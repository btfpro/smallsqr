!----------------------------------------------------------------------!
!Report Name: modar1a.SQR-Accounts Receivable Aging By Customer Group  !
!----------------------------------------------------------------------!
! This software and related documentation are provided under a         !
! license agreement containing restrictions on use and                 !
! disclosure and are protected by intellectual property                !
! laws. Except as expressly permitted in your license agreement        !
! or allowed by law, you may not use, copy, reproduce,                 !
! translate, broadcast, modify, license, transmit, distribute,         !
! exhibit, perform, publish or display any part, in any form or        !
! by any means. Reverse engineering, disassembly, or                   !
! decompilation of this software, unless required by law for           !
! interoperability, is prohibited.                                     !
! The information contained herein is subject to change without        !
! notice and is not warranted to be error-free. If you find any        !
! errors, please report them to us in writing.                         !
!                                                                      !
!                                                                      *
! Copyright (C) 1992, 2014, Oracle and/or its affiliates.              !
! All Rights Reserved.                                                 !
!***********************************************************************
!                                                                      *
!       $Date:  2017/08/09					                                   !
!       $Release:  FSCM92                                              !
!       $Revision:  1                                                  !
!                                                                      !
!----------------------------------------------------------------------!
! Program Desc: Aging Detail by Corporate Customer lists aged open     !
!               open item balances by corporate customer.              !
!               If the posted date on the item is on or before the     !
!               'as of' date for the report, the item balance is       !
!               retrieved from the PS_ITEM table.  If the posted date  !
!               on the item is later than the as of date for the       !
!               report, the item balance is established by looking at  !
!               the item activity (PS_ITEM_ACTIVITY) up to the         !
!               'as of' date.                                          !
!----------------------------------------------------------------------!
! Tables:       PS_ITEM, PS_ITEM_ACTIVITY, PS_AGING_TBL                !
!               PS_AGING_CATEG_TBL, PS_ENTRY_TYPE_TBL, PS_DISPUTE_TBL, !
!               PS_MOD_ARAGING_STG                                     !
!----------------------------------------------------------------------!
!CHANGE LOG                                                            !
!----------------------------------------------------------------------!
!DATE:     WHO:       REFERENCE:   DESCRIPTION:                        !
!----------------------------------------------------------------------!
!Report Created By - Devarajan Ganesan                                 !
!Date  : 2017/Aug/09                                                   !
!----------------------------------------------------------------------!

#include 'setenv.sqc'    ! Set Environment Procedure
#IFNDEF INFORMIX
begin-setup
#include 'setupdb.sqc'
#include 'ptset02.sqc'  ! Printer and Page-Size Initialization
declare-variable
integer #levcnt2 
integer #levcnt3
integer #levcnt4
integer #levcnt5
integer #levcnt6
integer #levcnt7
integer #levcnt8
integer #levcnt9
integer #levcnt10
integer #levcnt11
end-declare

end-setup
#ENDIF
#include 'sqrtrans.sqc'  ! Set Translation environment
#include 'number.sqc'    ! Formats Numbers

#define col1 1
#define COL2 26
#define col3 47 
#define col4 56
#define col5 71
#define col6 83
#define col7 95
#define col8 107
#define col9 119
#define col10 131
#define col11 144
#define col12 157
#define col13 170




begin-PROGRAM
  do INIT-REPORT
  do CREATE-ARRAYS1
  !do COV-CUST-LEVEL-INFO
  do END-PROCESS

end-PROGRAM



begin-heading  10
move 'MODAR1A' to $ReportID
LET $TreeName= 'Tree Name:'||'AR_CORP_BU'
LET $Currency= 'Currency:'||'USD'
LET $ReportTime=$ReportTime||'. '
#include 'arhdg01.sqc'
alter-printer
!POINT-SIZE=8
POINT-SIZE=10
  print $DateHeading                                    (3,)     center
  print 'Accounts Receivable Aging By Customer Group   '(+1,)    center
  !print 'As of date '$asofdate                                       (+1,) center
  print $asofdate                                       (+1,) center
 
alter-printer
POINT-SIZE=8
  print $TreeName										 (4,1)
  print $Currency										 (5,1)
  print 'Customer ID â€“ Name'         (+3,{col1}) wrap 25 10
  print ' Item ID       '            (0,{col2})
  print 'Currency'                   (0,45)
  print 'Amount'                     (0,{col4})
  print 'Current'                    (0,{col5})
  print '1-15'                       (0,{col6})
  print '16-30'                      (0,{col7})
  print '31-60'                      (0,{col8})
  print '61-90'                      (0,{col9})
  print '91-180'                     (0,{col10})
  print '181-270'                    (0,{col11})
  print '271-360'                    (0,{col12}) 
  print '361 +'                      (0,{col13})


  print '-'                          (+1,1,20)   fill
  print '-'                          (0,{col2},15)   fill
  print '-'                          (0,45,9)  fill
  print '-'                          (0,{col4},10)   fill
  print '-'                          (0,{col5},8) fill
  print '-'                          (0,{col6},8)  fill
  print '-'                          (0,{col7},8) fill
  print '-'                          (0,{col8},8)  fill
  print '-'                          (0,{col9},8) fill
  print '-'                          (0,{col10},8)  fill
  print '-'                          (0,{col11},8) fill
  print '-'                          (0,{col12},8)  fill
  print '-'                          (0,{col13},8) fill



end-heading



!***********************************************************************
! Function:    CREATE-ARRAYS1
! Description: Establish arrays used to calculate total amount of corporate customer
!***********************************************************************
begin-procedure CREATE-ARRAYS1
  create-array name= customer-amt size=1000
                     field=custid:char
                     field=corp-custid:char
                     field=amount:number
                     field=tot-amt:number
                     field=bkt-amt1:number
                     field=bkt-amt2:number
                     field=bkt-amt3:number
                     field=bkt-amt4:number
                     field=bkt-amt5:number
                     field=bkt-amt6:number
                     field=bkt-amt7:number
                     field=bkt-amt8:number
                     field=bkt-amt9:number
  
end-procedure


!***********************************************************************
! Function:    INIT-REPORT
! Description: Prompt for run-time parameters 
!***********************************************************************
begin-procedure INIT-REPORT

dO INIT-DATETIME
do Init-Number
do DEFINE-PRCS-VARS
do GET-CURRENT-DATETIME
do GET-RUN-CONTROL-PARMS
do SELECT-SECURITY
do SELECT-PARAMETERS
 
  if $prcs_process_instance = ''
      !NOPROMPT
  end-if
!print ' '                          (+1,1,20)
do COV-INIT-REPORT

end-procedure




!***********************************************************************
! Function:    COV-INIT-REPORT
! Description: This procedure stores additional where clause criteria
!              to a string, so it may be used in the main select.
!***********************************************************************

BEGIN-PROCEDURE COV-INIT-REPORT

DO CLEAR-STG
let $Exists = '' 

BEGIN-SELECT
RUN_CNTL_AR.AS_OF_DATE	&COV_RNTL_ASOFDT
RUN_CNTL_AR.SETID			  &COV_RNTL_SETID
RUN_CNTL_AR.AGING_ID		&COV_RNTL_AGING_ID
RUN_CNTL_AR.TREE_NAME   &COV_RNTL_TREE_NAME
RUN_CNTL_AR.BUSINESS_UNIT  &COV_RNTL_BUSINESS_UNIT
LT.CUST_GRP_TYPE        &COV_RNTL_CUST_GRP_TYPE
LT.CUSTOMER_GROUP       &COV_RNTL_CUSTOMER_GROUP
RUN_CNTL_AR.MOD_ALL_CUST_FLAG &MOD_ALL_CUST_FLAG
RUN_CNTL_AR.MOD_ALL_CUST1_FLAG &MOD_ALL_CUST1_FLAG

!CURRENCY_AMT_TYPE			&COV_RNTL_AMT_TYPE
!RT_TYPE								&COV_RNTL_RT_TYPE
!CUST_ID								&COV_RNTL_CORP_CUST_ID
!AGE_DISPLAY_OPTION			&COV_RNTL_DISPLAY_OPTION


		MOVE &COV_RNTL_ASOFDT TO $COV_RNTL_ASOFDT
		MOVE &COV_RNTL_ASOFDT TO $asofdate
		MOVE &COV_RNTL_SETID  TO $setid 
		MOVE &COV_RNTL_AGING_ID TO $agingid
		MOVE &COV_RNTL_TREE_NAME TO $COV_RNTL_TREE_NAME
		MOVE $COV_RNTL_TREE_NAME To $TreeName
		MOVE &COV_RNTL_CUST_GRP_TYPE TO $COV_RNTL_CUST_GRP_TYPE
		MOVE &COV_RNTL_CUSTOMER_GROUP TO $COV_RNTL_CUSTOMER_GROUP
		MOVE &COV_RNTL_BUSINESS_UNIT TO $COV_RNTL_BUSINESS_UNIT
		
		MOVE &MOD_ALL_CUST_FLAG  TO $MOD_ALL_CUST_FLAG
		MOVE &MOD_ALL_CUST1_FLAG TO $MOD_ALL_CUST1_FLAG
		
		!MOVE &COV_RNTL_AMT_TYPE TO $COV_RNTL_AMT_TYPE 
		!MOVE &COV_RNTL_RT_TYPE TO $COV_RNTL_RT_TYPE  
		!MOVE &COV_RNTL_CORP_CUST_ID TO $COV_RNTL_CORP_CUST_ID  
		!MOVE &COV_RNTL_CORP_CUST_ID TO $COV_RNTL_DISPLAY_OPTION 		
		
		!Uj - Begin
		!DO COV-AMT-TYPE
		!DO GET-CORP-CUST
		!Uj - End
		
		if $MOD_ALL_CUST1_FLAG = 'Y' or $MOD_ALL_CUST_FLAG = 'Y'
			Let $Exists = ''
		else
			if $Exists = ''
				Let $Exists = ' and exists (select ''x'' from PS_CUST_CGRP_LNK er1 where er.setid = er1.setid and er.cust_id = er1.cust_id and ER1.CUST_GRP_TYPE=''' || $COV_RNTL_CUST_GRP_TYPE || ''' AND ER1.CUSTOMER_GROUP=''' || $COV_RNTL_CUSTOMER_GROUP ||''')'
			else
				Let $Exists = $Exists||' and exists (select ''x'' from PS_CUST_CGRP_LNK er1 where er.setid = er1.setid and er.cust_id = er1.cust_id and ER1.CUST_GRP_TYPE=''' || $COV_RNTL_CUST_GRP_TYPE || ''' AND ER1.CUSTOMER_GROUP=''' || $COV_RNTL_CUSTOMER_GROUP || ''')'
			end-if
  		end-if
		
		
FROM PS_MOD_RCNTL_AGING RUN_CNTL_AR, PS_MOD_RCNTL_CGT LT
  WHERE RUN_CNTL_AR.OPRID 	= $prcs_oprid
  AND RUN_CNTL_AR.RUN_CNTL_ID   = $prcs_run_cntl_id
  AND RUN_CNTL_AR.OPRID= LT.OPRID
  AND RUN_CNTL_AR.RUN_CNTL_ID=LT.RUN_CNTL_ID

END-SELECT

		!Uj - Begin
		show '$Exists: ' $Exists
		DO COV-AMT-TYPE
		DO GET-CORP-CUST
		!Uj - End

END-PROCEDURE !COV-INIT-REPORT

!***********************************************************************
! Function:    DISPLAY-OPTION
! Description: This procedure selects display option.
!***********************************************************************
begin-procedure DISPLAY-OPTION
  
  if $displayoption = 'A'
    move '' to $displaystring
    MOVE '' to $COV_DISPLAYSTRING
  end-if
  if $displayoption = 'D'
    move 'AND B.DISPUTE_STATUS <> '' ''' to $displaystring
    MOVE 'AND B.DISPUTE_STATUS <> '' ''' TO $COV_DISPLAYSTRING
  end-if
  if $displayoption = 'E'
    move 'AND B.DEDUCTION_STATUS <> '' ''' to $displaystring
    MOVE 'AND B.DEDUCTION_STATUS <> '' ''' TO $COV_DISPLAYSTRING
  end-if
  if $displayoption = 'C'
    move 'AND B.COLLECTION_STATUS <> '' ''' to $displaystring
    MOVE 'AND B.COLLECTION_STATUS <> '' ''' TO $COV_DISPLAYSTRING
  end-if
 
end-procedure
!***********************************************************************
! Function:    READ-AGING-TABLE
! Description: This procedure reads the aging table for the aging setid
!              and aging id entered.
!***********************************************************************
begin-procedure READ-AGING-TABLE
begin-select
D.EFFDT
D.BASIS_DT
D.DISPUTE_AGING
D.DISPUTE_CATEGORY
D.DISPUTE_PRTY
D.DEDUCTION_AGING
D.DEDUCTION_CTGY
D.DEDUCTION_PRTY
D.COLLECTION_AGING
D.COLLECTION_CTGY
D.COLLECTION_PRTY
 move &D.effdt to $aging-effdt
 move &D.basis_dt to $basis-dt
 move &D.dispute_aging to $dispute-aging
 move &D.dispute_category to $dispute-category
 move &D.dispute_prty to #dispute-priority
 move &D.deduction_aging to $deduction-aging
 move &D.deduction_ctgy to $deduction-category
 move &D.deduction_prty to #deduction-priority
 move &D.collection_aging to $collection-aging
 move &D.collection_ctgy to $collection-category
 move &D.collection_prty to #collection-priority
 move &D.basis_dt to $COV_BASIS_DT
		EVALUATE $COV_BASIS_DT
    		
    		WHEN = 'A'
       		   LET	$COV_DT_VAL_FLD  =  'B.ASOF_DT'
    
    		WHEN = 'D'
      		   LET	$COV_DT_VAL_FLD  =  'B.DUE_DT'
     
    		WHEN = 'G'
    		   LET	$COV_DT_VAL_FLD  =  'B.ACCOUNTING_DT'
    
    		WHEN = 'I'
    		   LET	$COV_DT_VAL_FLD  =  'B.ASOF_DT'
		
		END-EVALUATE
                

FROM PS_AGING_TBL D
WHERE D.EFF_STATUS = 'A'
  AND D.AGING_ID = $agingid
  AND D.SETID = $setid
  AND D.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_AGING_TBL B
                 WHERE B.AGING_ID = $agingid
                   AND B.SETID = $setid
                   AND B.EFFDT <= $asofdate)
end-select
show '1'
show $agingid
end-procedure


!***********************************************************************
! Function:    COV_AMT_TYPE
! Description: This procedure stores additional where clause criteria
!              to a string, so it may be used in the main select.
!***********************************************************************


BEGIN-PROCEDURE COV-AMT-TYPE

  IF $COV_RNTL_AMT_TYPE = 'B'
   LET $COV_BASE_CURRENCY = 'B.CURRENCY_CD'
   LET $COV_SUM_AMT_FLD   = 'SUM(B.BAL_AMT_BASE)'
  END-IF
  
  IF $COV_RNTL_AMT_TYPE = 'E'
   LET $COV_BASE_CURRENCY = 'B.BAL_CURRENCY'
   LET $COV_SUM_AMT_FLD   = 'SUM(B.BAM_AMT)'
  END-IF

END-PROCEDURE !COV_AMT_TYPE

!***********************************************************************
! Function:    GET-CORP-CUST
! Description: This procedure gives list of corporate customer if user selects 
!              corpoarte customer field as blank or % 
!***********************************************************************

BEGIN-PROCEDURE GET-CORP-CUST
LET #CORPCUSTCNT =0 
!BEGIN-SELECT
!Z.CUST_ID &Z.CUST_ID
!          
!	MOVE &Z.CUST_ID TO $COV_RNTL_CORP_CUST_ID
!        
!		DO COV-CUST-LEVEL-INFO
!        DO CUST-DETAIL-FINAL
!        DO GET-TOP-PARENT
!        !DO CLEAR-STG
!	LET  #CORPCUSTCNT =  #CORPCUSTCNT + 1
!	IF #CORPCUSTCNT  > 1
!	new-page
!        END-IF
!FROM PS_CUSTOMER Z,PS_CUST_CGRP_LNK ER
!where Z.setid = $setid
!AND Z.CUST_ID=ER.CUST_ID
!!Uj - Begin
!!AND Z.CUST_ID='COV16185'
!!Uj - End
!AND ER.CUST_GRP_TYPE=$COV_RNTL_CUST_GRP_TYPE
!AND ER.CUSTOMER_GROUP=$COV_RNTL_CUSTOMER_GROUP
!END-SELECT

if $MOD_ALL_CUST1_FLAG = 'N' and $MOD_ALL_CUST_FLAG = 'N'

begin-select 
distinct ER.CUST_ID &Z.CUST_ID

	MOVE &Z.CUST_ID TO $COV_RNTL_CORP_CUST_ID
	show '$COV_RNTL_CORP_CUST_ID: ' $COV_RNTL_CORP_CUST_ID
	DO COV-CUST-LEVEL-INFO
    DO CUST-DETAIL-FINAL
    DO GET-TOP-PARENT
	LET  #CORPCUSTCNT =  #CORPCUSTCNT + 1
	
	IF #CORPCUSTCNT  > 1
		new-page
    END-IF

from PS_CUST_CGRP_LNK ER
WHERE ER.SETID = $setid
[$Exists]
end-select

else

if $MOD_ALL_CUST1_FLAG = 'Y' 
show 'All Cust with No Group Type'
begin-select 
distinct ER.CUST_ID &Z.CUST_ID1

	MOVE &Z.CUST_ID1 TO $COV_RNTL_CORP_CUST_ID
	show '$COV_RNTL_CORP_CUST_ID: ' $COV_RNTL_CORP_CUST_ID
	DO COV-CUST-LEVEL-INFO
    DO CUST-DETAIL-FINAL
    DO GET-TOP-PARENT
	LET  #CORPCUSTCNT =  #CORPCUSTCNT + 1
	
	IF #CORPCUSTCNT  > 1
		new-page
    END-IF

from PS_CUSTOMER ER
where er.setid = $setid
and not exists (select 'x' 
from PS_CUST_CGRP_LNK B 
where ER.cust_id = B.cust_id
and ER.setid = B.setid)
end-select
end-if

if $MOD_ALL_CUST_FLAG = 'Y'
show 'All Customers Flag'
begin-select 
distinct ER.CUST_ID &Z.CUST_ID2

	MOVE &Z.CUST_ID2 TO $COV_RNTL_CORP_CUST_ID
	show '$COV_RNTL_CORP_CUST_ID: ' $COV_RNTL_CORP_CUST_ID
	DO COV-CUST-LEVEL-INFO
    DO CUST-DETAIL-FINAL
    DO GET-TOP-PARENT
	LET  #CORPCUSTCNT =  #CORPCUSTCNT + 1
	
	IF #CORPCUSTCNT  > 1
		new-page
    END-IF

from PS_CUSTOMER ER
where er.setid = $setid
end-select
end-if

end-if

show '#Gr_TOTALAMOUNT :' #Gr_TOTALAMOUNT noline
show '#Gr_TOTAL_AMT1  :' #Gr_TOTAL_AMT1  noline
show '#Gr_TOTAL_AMT2  :' #Gr_TOTAL_AMT2  noline
show '#Gr_TOTAL_AMT3  :' #Gr_TOTAL_AMT3  noline
show '#Gr_TOTAL_AMT_4 :' #Gr_TOTAL_AMT_4 noline
show '#Gr_AMT5_TOTAL  :' #Gr_AMT5_TOTAL  noline
show '#Gr_TOTAL_AMT6  :' #Gr_TOTAL_AMT6  noline
show '#Gr_AMOUNT_OUT7 :' #Gr_AMOUNT_OUT7 noline
show '#Gr_AMOUNT_OUT8 :' #Gr_AMOUNT_OUT8 noline
show '#Gr_AMT_9       :' #Gr_AMT_9      

	if #Gr_TOTALAMOUNT <> 0 
		PRINT 'Grand Total'(+2,{COL1}) wrap 19 4 BOLD
		
		PRINT #Gr_TOTALAMOUNT (0,{COL4})  BOLD  edit 999999.99
		PRINT #Gr_TOTAL_AMT1  (0,{COL5})  BOLD  edit 999999.99
		PRINT #Gr_TOTAL_AMT2  (0,{COL6})  BOLD  edit 999999.99
		PRINT #Gr_TOTAL_AMT3  (0,{COL7})  BOLD  edit 999999.99
		PRINT #Gr_TOTAL_AMT_4 (0,{COL8})  BOLD  edit 999999.99
		PRINT #Gr_AMT5_TOTAL  (0,{COL9})  BOLD  edit 999999.99
		PRINT #Gr_TOTAL_AMT6  (0,{COL10}) BOLD  edit 999999.99
		PRINT #Gr_AMOUNT_OUT7 (0,{COL11}) BOLD  edit 999999.99
		PRINT #Gr_AMOUNT_OUT8 (0,{COL12}) BOLD  edit 999999.99
		PRINT #Gr_AMT_9       (0,{COL13}) BOLD  edit 999999.99
	end-if

END-PROCEDURE !GET-CORP-CUST

!***********************************************************************
! Function:    COV-CUST-LEVEL-INFO
! Description: This procedure inserts customer level information into staging table.
!***********************************************************************


BEGIN-PROCEDURE COV-CUST-LEVEL-INFO
BEGIN-SQL

INSERT INTO SYSADM.PS_MOD_ARAGING_STG (LEVELNUM , SETID , CUST_ID,  NAME1 ,ITEM,CURRENCY_CD,  CORPORATE_SETID, CORPORATE_CUST_ID, AMOUNT,TOTAL_AMOUNT, AMT1, AMT2, AMT3, AMT4, AMT5, AMT6, AMT7, AMT8, AMT9,TOTAL_AMT1, TOTAL_AMT2, TOTAL_AMT3, TOTAL_AMT_4, AMT5_TOTAL, TOTAL_AMT6, AMOUNT_OUT7,AMOUNT_OUT8,AMT_9)

 WITH CUST (SETID , CUST_ID, NAME1 , XLEVEL, CORPORATE_SETID, CORPORATE_CUST_ID, AMOUNT,TOTAL_AMOUNT, ITEM, CURRENCY_CD,AMT1, AMT2, AMT3, AMT4, AMT5, AMT6, AMT7, AMT8, AMT9,TOTAL_AMT1, TOTAL_AMT2, TOTAL_AMT3, TOTAL_AMT_4, AMT5_TOTAL, TOTAL_AMT6, AMOUNT_OUT7,AMOUNT_OUT8,AMT_9) AS
  (SELECT SETID ,
    CUST_ID,
    NAME1,
    1,
    CORPORATE_SETID ,
    CORPORATE_CUST_ID,
    0,
    0, 
    ' ',
    'USD',
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  FROM SYSADM.PS_CUSTOMER
  WHERE SETID           = $setid
  AND CUST_ID           = $COV_RNTL_CORP_CUST_ID
  UNION ALL
  SELECT E.SETID ,
    E.CUST_ID,
    E.NAME1,
    CUST.XLEVEL+1,
    E.CORPORATE_SETID ,
    E.CORPORATE_CUST_ID,
    0,
    0,
     ' ',
    'USD',
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  FROM SYSADM.PS_CUSTOMER E,
    CUST
  WHERE E.CUST_ID=$COV_RNTL_CORP_CUST_ID
  ) CYCLE CUST_ID
  SET IS_CYCLE TO '1' DEFAULT '0'
	SELECT  XLEVEL,
  SETID,
  CUST_ID,
  NAME1 NAME,
  ' ',
  'USD',
  CORPORATE_SETID,
  CORPORATE_CUST_ID,
  0 AMOUNT,
   0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
FROM CUST
WHERE NOT ( XLEVEL <> 1
AND SETID           = $setid
AND CUST_ID         = $COV_RNTL_CORP_CUST_ID
 )
ORDER BY 1,3

END-SQL
DO CUST-DETAIL
END-PROCEDURE

!***********************************************************************
! Function:    CUST-DETAIL
! Description: This procedure selects each customer and send it to  
!              GET-CUST-ITEM-INFO procedure for item information
!***********************************************************************

BEGIN-PROCEDURE CUST-DETAIL
BEGIN-SELECT
LEVELNUM     	      &LEVELNUM
SETID		      &SETID
CUST_ID		      &CUST_ID
NAME1 		      &NAME1 
CORPORATE_SETID       &CORPORATE_SETID
CORPORATE_CUST_ID     &CORPORATE_CUST_ID
			
	MOVE &LEVELNUM TO #LEVELNUM
	MOVE &SETID  TO $SETID
	MOVE &CUST_ID TO $CUST_ID
	MOVE &NAME1 TO $NAME1
	MOVE &CORPORATE_SETID to $CORPSETID
	MOVE &CORPORATE_CUST_ID TO $CORP_CUSTID
    
    show '$CUST_ID from procedure CUST-DETAIL: '$CUST_ID	
	DO GET-CUST-ITEM-INFO

FROM SYSADM.PS_MOD_ARAGING_STG
where cust_id = $COV_RNTL_CORP_CUST_ID
ORDER BY LEVELNUM desc

END-SELECT

END-PROCEDURE



!***********************************************************************
! Function:    GET-CUST-ITEM-INFO
! Description: This is the main report procedure.  It is executed once.
!              The 'post' date on the item (PS_ITEM) is compared with
!              'as of' date.  If the 'as of' date is on or before the
!              'post' date, the item balance is determined by looking
!              at the item activity (PS_ITEM_ACTIVITY).
!***********************************************************************
begin-procedure GET-CUST-ITEM-INFO
let #CUST-AMT = 0
let #TOT-AMT1 = 0
let #TOT-AMT2 = 0
let #TOT-AMT3 = 0
let #TOT-AMT4 = 0
let #TOT-AMT5 = 0
let #TOT-AMT6 = 0
let #TOT-AMT7 = 0
let #TOT-AMT8 = 0
let #TOT-AMT9 = 0

show '$COV_DISPLAYSTRING: ' $COV_DISPLAYSTRING
show '$CUST_ID: ' $CUST_ID


begin-select
B.BUSINESS_UNIT
B.CUST_ID       
U.SETID
U.NAME1
B.ITEM
B.ITEM_LINE
B.ASOF_DT
B.BAL_AMT
B.BAL_AMT_BASE
B.BAL_CURRENCY     
B.CURRENCY_CD
B.POST_DT
B.DUE_DT
B.ACCOUNTING_DT
B.DISPUTE_STATUS
B.DEDUCTION_STATUS
B.COLLECTION_STATUS
B.DUE_DAYS
B.ENTRY_TYPE

  move &B.BUSINESS_UNIT to $BUSINESS-UNIT
  move &b.cust_id to $custid
  move &u.name1 to $cust-name
  move &u.setid to $custsetid
  move &b.item to $item
  move &b.item_line to #item-line
  move &b.bal_amt to #item-entered-amt
  move &b.bal_amt_base to #item-base-amt
  move &b.bal_currency to $entered-currency
  move &b.currency_cd to $base-currency
  move &b.post_dt to $post-dt
  move &b.due_dt to $due-dt
  move &b.accounting_dt to $accounting-dt
  move &b.asof_dt to $item-asof-dt
  move &b.dispute_status to $dispute-status
  move &b.deduction_status to $deduction-status
  move &b.collection_status to $collection-status
  move &b.due_days to #grace-days
  move &b.entry_type to $entrytype

       let #report-amt = 0
	   show '$COV_BASIS_DT: ' $COV_BASIS_DT
	   show '$item-asof-dt ,$due-dt, $accounting-dt, $item-asof-dt : '$item-asof-dt noline
	   show ','$due-dt noline
	   show ','$accounting-dt noline
	   show ','$item-asof-dt  
	EVALUATE $COV_BASIS_DT
    		
    	WHEN = 'A'
    	   	LET	$COV_DT_VAL_FLD  =  $item-asof-dt
    
    	WHEN = 'D'
    		LET	$COV_DT_VAL_FLD  =  $due-dt
     
    	WHEN = 'G'
                LET	$COV_DT_VAL_FLD  =  $accounting-dt
    
    	WHEN = 'I'
    		LET	$COV_DT_VAL_FLD  =  $item-asof-dt
		
	END-EVALUATE

  
  do Format-DateTime ($item-asof-dt,$item-asof-dt-1,{DefDate},'','')
  !do DIFF-DATE($asofdate,$post-dt,#diff-years,#diff-months,#diff-days)
  do DIFF-DATE($asofdate,$due-dt,#diff-years,#diff-months,#diff-days)
  if #diff-days < 0
    do SELECT-ITEM-ACTIVITY
  end-if
  if $COV_RNTL_AMT_TYPE = 'E'
    move $entered-currency to $report-currency
    move #item-entered-amt to #report-amt
  else
   
    move $base-currency to $report-currency
    if #item-entered-amt = 0 and #item-base-amt = 0
      move 0 to #report-amt
    else
      if $rate-type = '' or $entered-currency = $base-currency
        move #item-base-amt to #report-amt
      else
        do CALCULATE-BASE-AMT
      
      end-if
    end-if
  end-if
  
    show '$asofdate,$COV_DT_VAL_FLD,#diff-years,#diff-months,#diff-days: ' $asofdate noline
	show ' - ' $COV_DT_VAL_FLD noline
	show ' - ' #diff-years noline
	show ' - ' #diff-months noline
	show ' - ' #diff-day
	!do DIFF-DATE($asofdate,$COV_DT_VAL_FLD,#diff-years,#diff-months,#diff-days) -Commented by Uj
	let #days-overdue = #diff-days - #grace-days
	show '#diff-days - #grace-days: ' #diff-days ' - ' #grace-days
        !do LOAD-CATEGORIES
	do UPDATE-AMT
 	DO INSERT-ITEM-STG
	let #CUST-AMT = #CUST-AMT + #report-amt
        let #TOT-AMT1 = #TOT-AMT1 + #amt1 
        let #TOT-AMT2 = #TOT-AMT2 + #amt2 
        let #TOT-AMT3 = #TOT-AMT3 + #amt3 
        let #TOT-AMT4 = #TOT-AMT4 + #amt4
        let #TOT-AMT5 = #TOT-AMT5 + #amt5 
        let #TOT-AMT6 = #TOT-AMT6 + #amt6
        let #TOT-AMT7 = #TOT-AMT7 + #amt7 
        let #TOT-AMT8 = #TOT-AMT8 + #amt8
        let #TOT-AMT9 = #TOT-AMT9 + #amt9 

	DO INITIALIZE-AMT

FROM PS_ITEM B, PS_SET_CNTRL_REC V, PS_CUSTOMER U
WHERE B.CUST_ID = $CUST_ID
  AND B.CUST_ID = U.CUST_ID
  AND U.SETID = V.SETID
  AND V.SETCNTRLVALUE = B.BUSINESS_UNIT
  AND V.RECNAME = 'CUSTOMER'
  [$COV_DISPLAYSTRING]
   AND $asofdate >= (  SELECT min(ACCOUNTING_DT)
        FROM  PS_ITEM_ACTIVITY
        WHERE ITEM = B.ITEM
        AND ITEM_LINE = B.ITEM_LINE
        AND CUST_ID = B.CUST_ID
        AND BUSINESS_UNIT = B.BUSINESS_UNIT)
  AND NOT EXISTS( SELECT 'X'  FROM  PS_INSTALLATION WHERE
                     $asofdate >= ( SELECT max(ACCOUNTING_DT) FROM  PS_ITEM_ACTIVITY
                                     WHERE ITEM = B.ITEM
                                                                      AND ITEM_LINE = B.ITEM_LINE
                                                                      AND CUST_ID = B.CUST_ID
                  AND BUSINESS_UNIT = B.BUSINESS_UNIT
				  !AND B.ENTRY_TYPE  = 'IN'
                  AND B.ITEM_STATUS = 'C'))
ORDER BY B.ITEM
end-select

                DO CUST-TOTAL
  !Lakshmi Sep 16th Print CUSTOMER TOTALS
			  ! show '#CUST-AMT: for printing TOTAL '#CUST-AMT
		        
			!	PRINT $CUST-DET (0,{COL1})  WRAP 20 7
			!   PRINT #CUST-AMT  (0,{COL4})   edit 999999.99  ! Lakshmi commented printing TOTAL SEP 16TH
end-procedure


!***********************************************************************
! Function:    SELECT-ITEM-ACTIVITY
! Description: This procedure is called in the event that the posted
!              date on the item is later than the run-time as-of date
!              (so that the item balance reported accurately reflects
!              the item activity at the time of the as of date).
!***********************************************************************
begin-procedure SELECT-ITEM-ACTIVITY
MOVE 0 TO #item-entered-amt
MOVE 0 TO #item-base-amt
begin-select
C.ENTRY_AMT
C.ENTRY_AMT_BASE
C.ACCOUNTING_DT
C.POST_DT
  move &C.ENTRY_AMT to #activity-entered-amt
  move &C.ENTRY_AMT_BASE to #activity-base-amt
  move &C.ACCOUNTING_DT to $ACTIVITY-ACCTG-DT
  MOVE &C.POST_DT to $activity-post-dt

! if the ACCTG date on the item activity is on or before the as of date
! we include it in the item balance.  If you want to use the POSTED date
! of the activity instead, comment out the first line below, and uncomment
! the second line.

  do DIFF-DATE($asofdate,$activity-acctg-dt,#diff-years,#diff-months,#diff-days)
!  do DIFF-DATE($asofdate,$activity-post-dt,#diff-years,#diff-months,#diff-days)
  if #diff-days >= 0
    add #activity-entered-amt to #item-entered-amt
    add #activity-base-amt to #item-base-amt
  end-if
FROM  PS_ITEM_ACTIVITY C
WHERE C.ITEM = $ITEM
  AND C.ITEM_LINE = #ITEM-LINE
  AND C.CUST_ID = $CUSTID
  AND C.BUSINESS_UNIT = $BUSINESS-UNIT
end-select
end-procedure


!************************************************************************
! Function:    CALCULATE-BASE-AMT
! Description: If currency type to be reported is 'B' - Base currency,
!              the user has an option to provide a rate type.  When a
!              rate type is provided, we read the rate table.  If a
!              rate exists for the rate type provided and the from and to
!              currency on the item, we multiply the entered amount by
!              the rate.  This gives a 'revalued' base amount for the
!              item which is reported.  If no rate exists for the rate
!              type or no rate type was provided, we report the base              amount on the item.
!              amount from the item.
!************************************************************************
begin-procedure CALCULATE-BASE-AMT
  move 0 to #currency-exchange-rt
begin-select
L.CUR_EXCHNG_RT
  move &L.CUR_EXCHNG_RT to #currency-exchange-rt
FROM  PS_CUR_RT_TBL L
WHERE L.FROM_CUR = $entered-currency
  AND L.TO_CUR = $base-currency
  AND L.CUR_RT_TYPE = $rate-type
  AND L.EFFDT = (SELECT MAX(M.EFFDT) FROM PS_CUR_RT_TBL M
                   WHERE M.FROM_CUR = $entered-currency
                     AND M.TO_CUR = $base-currency
                     AND M.CUR_RT_TYPE = $rate-type
                     AND M.EFF_STATUS = 'A'
                     AND M.EFFDT <= $asofdate)
end-select
  if #currency-exchange-rt <> 0
    let #report-amt = round(#item-entered-amt * #currency-exchange-rt,2)
  else
    move #item-base-amt to #report-amt
  end-if
end-procedure


!***********************************************************************
! Function:    LOAD-CATEGORIES
! Description: This function is called to retrieve the aging categories
!              from the PS_AGING_TBL table.  The category data is used
!              to determine which aging category an item is placed in,
!              depending on the start and end dates for each category.
!***********************************************************************
begin-procedure LOAD-CATEGORIES
move 1 to #i
begin-select
AGING_CATEGORY
DESCRSHORT &descrshort
START_DAY
END_DAY

  let $lg_descrshort = &descrshort
 ! do Get-aging-lang-descr
   LET #START_DAY = &start_day
   LET #END_DAY = &end_day
  if  #days-overdue >= #START_DAY and #days-overdue <= #END_DAY
   !  do UPDATE-AMT
  end-if

FROM PS_AGING_CATEG_TBL
WHERE AGING_ID = $COV_RNTL_AGING_ID
  AND SETID = $COV_RNTL_SETID
  AND EFFDT = $AGING-EFFDT
ORDER BY START_DAY
end-select
end-procedure

!***********************************************************************
! Function:  UPDATE-AMT
! Desc:      This procedure updates the bucket category amount
!***********************************************************************

begin-procedure UPDATE-AMT

show '#days-overdue: '#days-overdue noline
show ', #report-amt: '#report-amt
if #days-overdue >= -9999 and #days-overdue <= 0
 let #amt1 = #report-amt
end-if
if #days-overdue >= 1 and #days-overdue <= 15
  let #amt2 = #report-amt
end-if
if #days-overdue >= 16 and #days-overdue <= 30
 let #amt3 = #report-amt
end-if
if #days-overdue >= 31 and #days-overdue <= 60
 let #amt4 = #report-amt
end-if
if #days-overdue >= 61 and #days-overdue <= 90
 let #amt5 = #report-amt
end-if
if #days-overdue >= 91 and #days-overdue <= 180
  let #amt6 = #report-amt
end-if
if #days-overdue >= 181 and #days-overdue <= 270
 let #amt7 = #report-amt
end-if
if #days-overdue >= 271 and #days-overdue <= 360
 let #amt8 = #report-amt
end-if
if #days-overdue >= 361 and #days-overdue <= 9999
  let #amt9 = #report-amt
end-if
  
  Let #amt_123 = #report-amt !Uj
  
end-procedure
!*******************************************************************************
! Function:  INITIALIZE-AMT
! Desc:      This procedure initialize bucket amount fields to zero
!*******************************************************************************
begin-procedure INITIALIZE-AMT
let #amt1 = 0
let #amt2 = 0
let #amt3 = 0
let #amt4 = 0
let #amt5 = 0
let #amt6 = 0
let #amt7 = 0
let #amt8 = 0
let #amt9 = 0

end-procedure
!*******************************************************************************
! Function:  INSERT-ITEM-STG
! Desc:      This procedure inserts item information for respective customer into staging table
!*******************************************************************************
begin-procedure INSERT-ITEM-STG

BEGIN-SQL
INSERT INTO SYSADM.PS_MOD_ARAGING_STG (LEVELNUM , SETID , CUST_ID,  NAME1 ,ITEM,CURRENCY_CD,  CORPORATE_SETID, CORPORATE_CUST_ID, AMOUNT,TOTAL_AMOUNT, AMT1, AMT2, AMT3, AMT4, AMT5, AMT6, AMT7, AMT8, AMT9,TOTAL_AMT1, TOTAL_AMT2, TOTAL_AMT3, TOTAL_AMT_4, AMT5_TOTAL, TOTAL_AMT6, AMOUNT_OUT7,AMOUNT_OUT8,AMT_9)
 !VALUES (#LEVELNUM,$SETID,$CUST_ID,$NAME1,$ITEM,$report-currency,$CORPSETID,$CORP_CUSTID,0,0,#amt1,#amt2,#amt3,#amt4,#amt5,#amt6,#amt7,#amt8,#amt9,0,0,0,0,0,0,0,0,0)
 VALUES (#LEVELNUM,$SETID,$CUST_ID,$NAME1,$ITEM,$report-currency,$CORPSETID,$CORP_CUSTID,#amt1,0,#amt_123,#amt2,#amt3,#amt4,#amt5,#amt6,#amt7,#amt8,#amt9,0,0,0,0,0,0,0,0,0)
	
END-SQL
END-PROCEDURE


!*********************************************************************************
! Function:  CUST-TOTAL
! Desc:      Update the amount, total amount and bucket amounts field with each customer total amount
!*********************************************************************************
begin-procedure CUST-TOTAL

show '#CUST-AMT: ' #CUST-AMT noline
show '#CUST-AMT1: ' #CUST-AMT1 noline
show '#CUST-AMT2: ' #CUST-AMT2 noline
show '#CUST-AMT3: ' #CUST-AMT3 noline
show '#CUST-AMT4: ' #CUST-AMT4 noline
show '#CUST-AMT5: ' #CUST-AMT5 noline
show '#CUST-AMT6: ' #CUST-AMT6 noline
show '#CUST-AMT7: ' #CUST-AMT7 noline
show '#CUST-AMT8: ' #CUST-AMT8 noline
show '#CUST-AMT9: ' #CUST-AMT9 noline
show '$CUST_ID: ' $CUST_ID
			  
			  

BEGIN-SQL
UPDATE 	SYSADM.PS_MOD_ARAGING_STG SET AMOUNT = #CUST-AMT , TOTAL_AMOUNT = #CUST-AMT, AMT1 = #TOT-AMT1, AMT2 = #TOT-AMT2, AMT3 = #TOT-AMT3, AMT4 = #TOT-AMT4, AMT5 = #TOT-AMT5, AMT6 = #TOT-AMT6, AMT7 = #TOT-AMT7, AMT8 = #TOT-AMT8, AMT9 = #TOT-AMT9 WHERE CUST_ID = $CUST_ID AND ITEM = ' '
END-SQL
END-PROCEDURE



!*****************************************************************************************
! Function:    CUST-DETAIL-FINAL
! Description: This procedure selects the all customer informations and stores 
!              into array for further calculation
!*****************************************************************************************

BEGIN-PROCEDURE CUST-DETAIL-FINAL
let #counter = 0
BEGIN-SELECT
C.LEVELNUM     	      &C.LEVELNUM
C.SETID		      &C.SETID
C.CUST_ID	      &C.CUST_ID
C.NAME1               &C.NAME1 
C.CORPORATE_SETID     &C.CORPORATE_SETID
C.CORPORATE_CUST_ID   &C.CORPORATE_CUST_ID
cast(C.AMOUNT as decimal(10,2))        			 &C.AMOUNT
cast(C.TOTAL_AMOUNT as decimal(10,2))        &C.TOTAL_AMOUNT
C.AMT1		      &C.AMT1	
C.AMT2	              &C.AMT2		
C.AMT3                &C.AMT3
C.AMT4                &C.AMT4
C.AMT5                &C.AMT5
C.AMT6                &C.AMT6
C.AMT7                &C.AMT7           
C.AMT8                &C.AMT8
C.AMT9                &C.AMT9
			
	MOVE &C.LEVELNUM TO #LEVEL
	MOVE &C.CUST_ID TO $CUST
        MOVE &C.NAME1 TO $CUSTNAME
	MOVE &C.CORPORATE_CUST_ID TO $CORPCUSTID                       
	MOVE &C.AMOUNT TO #CUSTAMT
	MOVE &C.TOTAL_AMOUNT TO #CUSTTOTAMT
	MOVE &C.AMT1 TO #TOTAMT1
	MOVE &C.AMT2 TO #TOTAMT2
	MOVE &C.AMT3 TO #TOTAMT3
	MOVE &C.AMT4 TO #TOTAMT4
	MOVE &C.AMT5 TO #TOTAMT5
	MOVE &C.AMT6 TO #TOTAMT6
	MOVE &C.AMT7 TO #TOTAMT7
	MOVE &C.AMT8 TO #TOTAMT8
	MOVE &C.AMT9 TO #TOTAMT9
	PUT $CUST $CORPCUSTID #CUSTAMT #CUSTTOTAMT #TOTAMT1 #TOTAMT2 #TOTAMT3 #TOTAMT4 #TOTAMT5 #TOTAMT6 #TOTAMT7 #TOTAMT8 #TOTAMT9
	INTO customer-amt(#counter) custid corp-custid amount tot-amt bkt-amt1 bkt-amt2 bkt-amt3 bkt-amt4 bkt-amt5 bkt-amt6 bkt-amt7 bkt-amt8 bkt-amt9
        add 1 to #counter


FROM SYSADM.PS_MOD_ARAGING_STG  C where C.ITEM = ' '
and C.AMOUNT <> 0 !Lakshmi added to avoid Printing customers with Zero dollar
and cust_id = $COV_RNTL_CORP_CUST_ID
ORDER BY C.LEVELNUM desc

END-SELECT
do UPDATE-TOTAL-AMOUNT
END-PROCEDURE

!*******************************************************************************************
! Function:    UPDATE-TOTAL-AMOUNT
! Description: This procedure stores adds the child amount to parent amount and stores in an array
!********************************************************************************************

BEGIN-PROCEDURE UPDATE-TOTAL-AMOUNT

let #j = 0
let #i = 0

while #i < #counter
let #j = #i + 1   
get $custid $corp-custid #amount #tot-amt #bkt-amt1 #bkt-amt2 #bkt-amt3 #bkt-amt4 #bkt-amt5 #bkt-amt6 #bkt-amt7 #bkt-amt8 #bkt-amt9 from customer-amt(#i)
 LET $CORPCUSTID  = $corp-custid
let #custamount  = #tot-amt
let #custamount1 = #bkt-amt1
let #custamount2 = #bkt-amt2
let #custamount3 = #bkt-amt3
let #custamount4 = #bkt-amt4
let #custamount5 = #bkt-amt5
let #custamount6 = #bkt-amt6
let #custamount7 = #bkt-amt7
let #custamount8 = #bkt-amt8
let #custamount9 = #bkt-amt9

while #j < #counter

get $custid $corp-custid #amount #tot-amt #bkt-amt1 #bkt-amt2 #bkt-amt3 #bkt-amt4 #bkt-amt5 #bkt-amt6 #bkt-amt7 #bkt-amt8 #bkt-amt9 from customer-amt(#j) 
  if $custid  = $CORPCUSTID 

 let customer-amt.tot-amt(#j) = customer-amt.tot-amt(#j) + #custamount 
 let customer-amt.bkt-amt1(#j) = customer-amt.bkt-amt1(#j) + #custamount1
 let customer-amt.bkt-amt2(#j) = customer-amt.bkt-amt2(#j) + #custamount2
 let customer-amt.bkt-amt3(#j) = customer-amt.bkt-amt3(#j) + #custamount3
 let customer-amt.bkt-amt4(#j) = customer-amt.bkt-amt4(#j) + #custamount4
 let customer-amt.bkt-amt5(#j) = customer-amt.bkt-amt5(#j) + #custamount5
 let customer-amt.bkt-amt6(#j) = customer-amt.bkt-amt6(#j) + #custamount6
 let customer-amt.bkt-amt7(#j) = customer-amt.bkt-amt7(#j) + #custamount7
 let customer-amt.bkt-amt8(#j) = customer-amt.bkt-amt8(#j) + #custamount8
 let customer-amt.bkt-amt9(#j) = customer-amt.bkt-amt9(#j) + #custamount9

 !let #fina-amt = customer-amt.tot-amt(#j)

 end-if
add 1 to #j
end-while
   add 1 to #i
end-while
let #k=0
while #k <  #counter

let #bkt-amt1 = 0
let #bkt-amt2 = 0
let #bkt-amt3 = 0
let #bkt-amt4 = 0
let #bkt-amt5 = 0
let #bkt-amt6 = 0
let #bkt-amt7 = 0
let #bkt-amt8 = 0
let #bkt-amt9 = 0
get $custid $corp-custid #amount #tot-amt #bkt-amt1 #bkt-amt2 #bkt-amt3 #bkt-amt4 #bkt-amt5 #bkt-amt6 #bkt-amt7 #bkt-amt8 #bkt-amt9 from customer-amt(#k)
let #CUSTTOTAMT = 0
let #CUSTTOTAMT1 = 0
let #CUSTTOTAMT2 = 0
let #CUSTTOTAMT3 = 0
let #CUSTTOTAMT4 = 0
let #CUSTTOTAMT5 = 0
let #CUSTTOTAMT6 = 0
let #CUSTTOTAMT7 = 0
let #CUSTTOTAMT8 = 0
let #CUSTTOTAMT9 = 0
let $CUST = $custid
let #CUSTTOTAMT=#tot-amt
let #CUSTTOTAMT1=#bkt-amt1
let #CUSTTOTAMT2=#bkt-amt2
let #CUSTTOTAMT3=#bkt-amt3
let #CUSTTOTAMT4=#bkt-amt4
let #CUSTTOTAMT5=#bkt-amt5
let #CUSTTOTAMT6=#bkt-amt6
let #CUSTTOTAMT7=#bkt-amt7
let #CUSTTOTAMT8=#bkt-amt8
let #CUSTTOTAMT9=#bkt-amt9

do UPDATE-TOT-CUSTOMER
add 1 to #k

end-while

END-PROCEDURE

!**************************************************************************************
! Function:    UPDATE-TOT-CUSTOMER
! Description: This procedure updates total amount of parent customer with child amount
!**************************************************************************************
begin-procedure UPDATE-TOT-CUSTOMER

BEGIN-SQL

UPDATE SYSADM.PS_MOD_ARAGING_STG  SET TOTAL_AMOUNT = #CUSTTOTAMT, TOTAL_AMT1 = #CUSTTOTAMT1 ,TOTAL_AMT2 = #CUSTTOTAMT2, TOTAL_AMT3 = #CUSTTOTAMT3 ,TOTAL_AMT_4= #CUSTTOTAMT4 , AMT5_TOTAL = #CUSTTOTAMT5 , TOTAL_AMT6 = #CUSTTOTAMT6 , AMOUNT_OUT7 = #CUSTTOTAMT7 ,AMOUNT_OUT8 = #CUSTTOTAMT8 , AMT_9 = #CUSTTOTAMT9 WHERE CUST_ID = $CUST  AND ITEM = ' '

END-SQL

end-procedure

!*************************************************************************************************
! Function:    GET-TOP-PARENT
! Description: This procedure takes the highest level parent and send as corporate customer to 
!              its child
!*************************************************************************************************


BEGIN-PROCEDURE GET-TOP-PARENT
LET $PREV_CUST =' '
let $dymn_parent = ' '
LET $PARENT-CUST = ' '
let $level1 = '1.'
let #levcnt2  = 1
let #levcnt3  = 1
let #levcnt4  = 1
let #levcnt5  = 1
let #levcnt6  = 1
let #levcnt7  = 1
let #levcnt8  = 1
let #levcnt9  = 1
let #levcnt10  = 1
let #levcnt11  = 1
BEGIN-SELECT
P.CUST_ID &P.CUST_ID
          let $level1 = '1.'
          let $level0 = '1.0'
          MOVE &P.CUST_ID TO $HIGHESTPARENT
	      MOVE &P.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
		  !DO PRINT-DETAILS($PARENT-CUST,$level0)
		  show '$PARENT-CUST from GET-TOP-PARENT: ' $PARENT-CUST
	  DO GET-FIRST-CHILD
FROM SYSADM.PS_MOD_ARAGING_STG P
WHERE P.LEVELNUM = 1 AND P.ITEM = ' '
and cust_id = $COV_RNTL_CORP_CUST_ID

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-FIRST-CHILD
! Description: This procedure selects the first level child and send as corporate customer to 
!              its child
!*************************************************************************************************

BEGIN-PROCEDURE GET-FIRST-CHILD
LET $PARENT-CUST = ' '
let #levcnt2  = 1

BEGIN-SELECT
Q.CUST_ID
          let $levelcnt2 = #levcnt2
           let $level2 = $level1 ||  $levelcnt2
          MOVE &Q.CUST_ID TO $SECONDPARENT
          MOVE &Q.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
		  !DO PRINT-DETAILS($PARENT-CUST,$level2)
		  DO GET-SECOND-CHILD
          let #levcnt2 = #levcnt2 + 1

FROM SYSADM.PS_MOD_ARAGING_STG Q
WHERE Q.CORPORATE_CUST_ID = $HIGHESTPARENT AND Q.LEVELNUM = 2 AND Q.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-SECOND-CHILD
! Description: This procedure selects the second level child and send as corporate customer to 
!              its child
!*************************************************************************************************


BEGIN-PROCEDURE GET-SECOND-CHILD
LET $PARENT-CUST = ' '

let #levcnt3  = 1

BEGIN-SELECT
R.CUST_ID
	  let $levcnt3 = #levcnt3
          let $level3 = $level2 || '.'|| $levcnt3
          MOVE &R.CUST_ID TO $THIRDPARENT
          MOVE &R.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
		  !DO PRINT-DETAILS($PARENT-CUST,$level3)
		  DO GET-THIRD-CHILD
           let #levcnt3 = #levcnt3 + 1
FROM SYSADM.PS_MOD_ARAGING_STG R
WHERE R.CORPORATE_CUST_ID = $SECONDPARENT AND R.LEVELNUM = 3 AND R.ITEM = ' '

END-SELECT
END-PROCEDURE


!*************************************************************************************************
! Function:    GET-THIRD-CHILD
! Description: This procedure selects the third level child and send as corporate customer to 
!              its child
!*************************************************************************************************

BEGIN-PROCEDURE GET-THIRD-CHILD

let #levcnt4  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
S.CUST_ID
           let $levcnt4 = #levcnt4
          let $level4 = $level3 || '.' ||$levcnt4
          MOVE &S.CUST_ID TO $FORTHPARENT
          MOVE &S.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level4)
	      DO GET-FORTH-CHILD
           let #levcnt4 = #levcnt4 + 1
FROM SYSADM.PS_MOD_ARAGING_STG S
WHERE S.CORPORATE_CUST_ID = $THIRDPARENT AND S.LEVELNUM = 4 AND S.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-FORTH-CHILD
! Description: This procedure selects the forth level child and send as corporate customer to 
!              its child
!*************************************************************************************************
BEGIN-PROCEDURE GET-FORTH-CHILD

let #levcnt5  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
T.CUST_ID
           let $levcnt5 = #levcnt5
          let $level5 = $level4 || '.' ||$levcnt5
          MOVE &T.CUST_ID TO $FIFTHPARENT
          MOVE &T.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
		  !DO PRINT-DETAILS($PARENT-CUST,$level5)
	      DO GET-FIFTH-CHILD
           let #levcnt5 = #levcnt5 + 1
FROM SYSADM.PS_MOD_ARAGING_STG T
WHERE T.CORPORATE_CUST_ID = $FORTHPARENT AND T.LEVELNUM = 5 AND T.ITEM = ' '

END-SELECT
END-PROCEDURE


!*************************************************************************************************
! Function:    GET-FiFTH-CHILD
! Description: This procedure selects the fifth level child and send as corporate customer to 
!              its child
!*************************************************************************************************
 
BEGIN-PROCEDURE GET-FIFTH-CHILD

let #levcnt6  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
U.CUST_ID
           let $levcnt6 = #levcnt6
          let $level6 = $level5 || '.' ||$levcnt6
          MOVE &U.CUST_ID TO $SIXTHPARENT
          MOVE &U.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level6)
	      DO GET-SIXTH-CHILD
           let #levcnt6 = #levcnt6 + 1
FROM SYSADM.PS_MOD_ARAGING_STG U
WHERE U.CORPORATE_CUST_ID = $FIFTHPARENT AND U.LEVELNUM = 6 AND U.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-SIXTH-CHILD
! Description: This procedure selects the sixth level child and send as corporate customer to 
!              its child
!*************************************************************************************************

BEGIN-PROCEDURE GET-SIXTH-CHILD

let #levcnt7  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
V.CUST_ID
           let $levcnt7 = #levcnt7
          let $level7 = $level6 || '.' ||$levcnt7
          MOVE &V.CUST_ID TO $SEVENPARENT
          MOVE &V.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level7)
	      DO GET-SEVEN-CHILD
           let #levcnt7 = #levcnt7 + 1
FROM SYSADM.PS_MOD_ARAGING_STG V
WHERE V.CORPORATE_CUST_ID = $SIXTHPARENT AND V.LEVELNUM = 7 AND V.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-SEVEN-CHILD
! Description: This procedure selects the seventhlevel child and send as corporate customer to 
!              its child
!*************************************************************************************************

BEGIN-PROCEDURE GET-SEVEN-CHILD

let #levcnt8  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
W.CUST_ID
           let $levcnt8 = #levcnt8
          let $level8 = $level7 || '.' ||$levcnt8
          MOVE &W.CUST_ID TO $EIGHTPARENT
          MOVE &W.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level8)
	      DO GET-EIGHT-CHILD
           let #levcnt8 = #levcnt8 + 1
FROM SYSADM.PS_MOD_ARAGING_STG W
WHERE W.CORPORATE_CUST_ID = $SEVENPARENT AND W.LEVELNUM = 8 AND W.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-EIGHT-CHILD
! Description: This procedure selects the eightth level child and send as corporate customer to 
!              its child
!*************************************************************************************************

BEGIN-PROCEDURE GET-EIGHT-CHILD

let #levcnt9  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
X.CUST_ID
           let $levcnt9 = #levcnt9
          let $level9 = $level8 || '.' ||$levcnt9
          MOVE &X.CUST_ID TO $NINEPARENT
          MOVE &X.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level9)
	      DO GET-NINETH-CHILD
           let #levcnt9 = #levcnt9 + 1
FROM SYSADM.PS_MOD_ARAGING_STG X
WHERE X.CORPORATE_CUST_ID = $EIGHTPARENT AND X.LEVELNUM = 9 AND X.ITEM = ' '

END-SELECT
END-PROCEDURE

!*************************************************************************************************
! Function:    GET-NINETH-CHILD
! Description: This procedure selects the nineth level child and send as corporate customer to 
!              its child
!*************************************************************************************************
BEGIN-PROCEDURE GET-NINETH-CHILD

let #levcnt10  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
Y.CUST_ID
           let $levcnt10 = #levcnt10
          let $level10 = $level9 || '.' ||$levcnt10
          MOVE &Y.CUST_ID TO $TENTHPARENT
          MOVE &Y.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level10)
	      DO GET-TENTH-CHILD
           let #levcnt10 = #levcnt10 + 1
FROM SYSADM.PS_MOD_ARAGING_STG Y
WHERE Y.CORPORATE_CUST_ID = $NINEPARENT AND Y.LEVELNUM = 10 AND Y.ITEM = ' '

END-SELECT
END-PROCEDURE


!*************************************************************************************************
! Function:    GET-TENTH-CHILD
! Description: This procedure selects the tenth level child and send as corporate customer to 
!              its child if any
!*************************************************************************************************

BEGIN-PROCEDURE GET-TENTH-CHILD
let #levcnt11  = 1
LET $PARENT-CUST = ' '
BEGIN-SELECT
M.CUST_ID
           let $levcnt11 = #levcnt11
          let $level11 = $level10 || '.' ||$levcnt11
          MOVE &M.CUST_ID TO $ELEVENPAR
          MOVE &M.CUST_ID TO $PARENT-CUST
          DO PRINT-DETAILS
          !DO PRINT-DETAILS($PARENT-CUST,$level11)
	  
           let #levcnt11 = #levcnt11 + 1
FROM SYSADM.PS_MOD_ARAGING_STG M
WHERE M.CORPORATE_CUST_ID = $TENTHPARENT AND M.LEVELNUM = 11 AND M.ITEM = ' '

END-SELECT
END-PROCEDURE



!*********************************************************************************
! Function:    PRINT-DETAILS
! Description: This procedure prints the customer and item information in PDF file
!*********************************************************************************

!BEGIN-PROCEDURE PRINT-DETAILS($PARENT-CUST,$level)
BEGIN-PROCEDURE PRINT-DETAILS
LET $NEW_CUST =' '
let #leveloccurs1 = 0
let #grcnt = 0
Let $FirstRow = 'Y'

show '$PARENT-CUST - in procedure PRINT-DETAILS: '$PARENT-CUST
BEGIN-SELECT
LEVELNUM  &LEVEL
CUST_ID   &CUSTOMER
NAME1     &CUSTNAME
ITEM      &ITEM
CURRENCY_CD &CURRENCY
CORPORATE_CUST_ID &CORPCUSTOMER
cast(AMOUNT as decimal(10,2))        &AMOUNT
cast(TOTAL_AMOUNT as decimal(10,2))  &TOTALAMOUNT
cast(AMT1 as decimal(10,2))          &AMT1
cast(AMT2 as decimal(10,2)) 	       &AMT2
cast(AMT3 as decimal(10,2))          &AMT3
cast(AMT4 as decimal(10,2))          &AMT4
cast(AMT5 as decimal(10,2))          &AMT5
cast(AMT6 as decimal(10,2))          &AMT6
cast(AMT7 as decimal(10,2))          &AMT7
cast(AMT8 as decimal(10,2))          &AMT8
cast(AMT9 as decimal(10,2))          &AMT9
cast(TOTAL_AMT1 as decimal(10,2))    &TOTAL_AMT1
cast(TOTAL_AMT2 as decimal(10,2))    &TOTAL_AMT2
cast(TOTAL_AMT3 as decimal(10,2))    &TOTAL_AMT3
cast(TOTAL_AMT_4 as decimal(10,2))   &TOTAL_AMT_4
cast(AMT5_TOTAL as decimal(10,2))    &AMT5_TOTAL
cast(TOTAL_AMT6 as decimal(10,2))    &TOTAL_AMT6
cast(AMOUNT_OUT7 as decimal(10,2))   &AMOUNT_OUT7
cast(AMOUNT_OUT8 as decimal(10,2))   &AMOUNT_OUT8
cast(AMT_9 as decimal(10,2))         &AMT_9

         alter-printer
        POINT-SIZE=9
        IF &LEVEL = 1 and #leveloccurs1 = 0 
			let $CORP-DET = &CORPCUSTOMER|| '-' || &CUSTNAME
			move &LEVEL        to   #1_LEVEL
			move &AMOUNT       to   #1_AMOUNT
			move &CURRENCY     to   $1_CURRENCY
			move &TOTALAMOUNT  to   #1_TOTALAMOUNT
			move &TOTAL_AMT1   to   #1_TOTAL_AMT1
			move &TOTAL_AMT2   to   #1_TOTAL_AMT2
			move &TOTAL_AMT3   to   #1_TOTAL_AMT3
			move &TOTAL_AMT_4  to   #1_TOTAL_AMT_4
			move &AMT5_TOTAL   to   #1_AMT5_TOTAL
			move &TOTAL_AMT6   to   #1_TOTAL_AMT6
			move &AMOUNT_OUT7  to   #1_AMOUNT_OUT7
			move &AMOUNT_OUT8  to   #1_AMOUNT_OUT8
			move &AMT_9        to   #1_AMT_9

		

		END-IF
        
	      !LET $CUST-DET = $level ||'  ' || &CUSTOMER || '-'||&CUSTNAME
	       LET $CUST-DET = &CUSTOMER || '-'||&CUSTNAME

     	   LET $NEW_CUST = &CUSTOMER
	
		!	show '#1_LEVEL       ' #1_LEVEL       noline
		!	show '#1_AMOUNT      ' #1_AMOUNT      noline
		!	show '#1_CURRENCY    ' #1_CURRENCY    noline
		!	show '#1_TOTALAMOUNT ' #1_TOTALAMOUNT noline
		!	show '#1_TOTAL_AMT1  ' #1_TOTAL_AMT1  noline
		!	show '#1_TOTAL_AMT2  ' #1_TOTAL_AMT2  noline
		!	show '#1_TOTAL_AMT3  ' #1_TOTAL_AMT3  noline
		!	show '#1_TOTAL_AMT_4 ' #1_TOTAL_AMT_4 noline
		!	show '#1_AMT5_TOTAL  ' #1_AMT5_TOTAL  noline
		!	show '#1_TOTAL_AMT6  ' #1_TOTAL_AMT6  noline
		!	show '#1_AMOUNT_OUT7 ' #1_AMOUNT_OUT7 noline
		!	show '#1_AMOUNT_OUT8 ' #1_AMOUNT_OUT8 noline
			show '#1_AMT_9       ' #1_AMT_9       
	
			show '#1_TOTALAMOUNT: ' #1_TOTALAMOUNT
			show '&TOTALAMOUNT test1: '&TOTALAMOUNT

       !show '$PREV_CUST <> $NEW_CUST: ' $PREV_CUST noline 
	   !show ' ' $NEW_CUST 
    	!IF $PREV_CUST <> $NEW_CUST
	    show '&ITEM ' &ITEM 
	    if  isblank(&ITEM )
			!*********Lakshmi-U 
			!PRINT $CUST-DET (+2,{COL1})  WRAP 20 7
			show '&TOTALAMOUNT test: '&TOTALAMOUNT
			
			if &TOTALAMOUNT <> 0
			!  PRINT $CUST-DET (0,{COL1})  WRAP 20 7 
			  show '&TOTALAMOUNT test: '&TOTALAMOUNT ! Lakshmi  this is printing 29572 Cust TOTAL-AMOUNT
			  
				!if   &LEVEL <> 1
					!if &TOTALAMOUNT <> &AMOUNT
					
				    	! this is printing at the begining. 1001
						!PRINT ' (+1,{COL2}) wrap 19 4 BOLD
						PRINT 'Total'      (+2,{COL1}) wrap 19 4 BOLD
						PRINT &CURRENCY    (0,{COL3})  BOLD  
						PRINT &TOTALAMOUNT (0,{COL4})  BOLD  edit 999999.99
						PRINT &TOTAL_AMT1  (0,{COL5})  BOLD  edit 999999.99
						PRINT &TOTAL_AMT2  (0,{COL6})  BOLD  edit 999999.99
						PRINT &TOTAL_AMT3  (0,{COL7})  BOLD  edit 999999.99
						PRINT &TOTAL_AMT_4 (0,{COL8})  BOLD  edit 999999.99
						PRINT &AMT5_TOTAL  (0,{COL9})  BOLD  edit 999999.99
						PRINT &TOTAL_AMT6  (0,{COL10}) BOLD  edit 999999.99
						PRINT &AMOUNT_OUT7 (0,{COL11}) BOLD  edit 999999.99
						PRINT &AMOUNT_OUT8 (0,{COL12}) BOLD  edit 999999.99
						PRINT &AMT_9       (0,{COL13}) BOLD  edit 999999.99
						
						Let #Gr_TOTALAMOUNT = #Gr_TOTALAMOUNT + &TOTALAMOUNT
						Let #Gr_TOTAL_AMT1  = #Gr_TOTAL_AMT1  + &TOTAL_AMT1 
						Let #Gr_TOTAL_AMT2  = #Gr_TOTAL_AMT2  + &TOTAL_AMT2 
						Let #Gr_TOTAL_AMT3  = #Gr_TOTAL_AMT3  + &TOTAL_AMT3 
						Let #Gr_TOTAL_AMT_4 = #Gr_TOTAL_AMT_4 + &TOTAL_AMT_4
						Let #Gr_AMT5_TOTAL  = #Gr_AMT5_TOTAL  + &AMT5_TOTAL 
						Let #Gr_TOTAL_AMT6  = #Gr_TOTAL_AMT6  + &TOTAL_AMT6 
						Let #Gr_AMOUNT_OUT7 = #Gr_AMOUNT_OUT7 + &AMOUNT_OUT7
						Let #Gr_AMOUNT_OUT8 = #Gr_AMOUNT_OUT8 + &AMOUNT_OUT8
						Let #Gr_AMT_9       = #Gr_AMT_9       + &AMT_9      
						
						
					!end-if
				!end-if
			end-if
			!if &LEVEL =  1
			!	!PRINT &CURRENCY (0,{COL3}) BOLD
			!else
			!	!if &TOTALAMOUNT = &AMOUNT
			!	!	PRINT &CURRENCY (-1,{COL3}) BOLD
			!	!else
			!	!	PRINT &CURRENCY (+1,{COL3}) BOLD
			!	!end-if
			!end-if
			
			!*********Lakshmi          
			!   PRINT 'Total' (+1,{COL2}) wrap 19 4 BOLD
			!	PRINT &AMOUNT (0,{COL4}) BOLD
			!	PRINT &AMT1 (0,{COL5})BOLD
			!	PRINT &AMT2 (0,{COL6})BOLD
			! 	PRINT &AMT3 (0,{COL7})BOLD
			!	PRINT &AMT4 (0,{COL8})BOLD
			!	PRINT &AMT5 (0,{COL9})BOLD
			!	PRINT &AMT6 (0,{COL10})BOLD
			!	PRINT &AMT7 (0,{COL11})BOLD
			!	PRINT &AMT8 (0,{COL12})BOLD
			!	PRINT &AMT9 (0,{COL13})BOLD
		!end-if
	else
		!****Lakshmi changes to ITEM Balance Print
		
		
		if &AMT1 <> 0
			alter-printer
			POINT-SIZE=8 
			!PRINT &ITEM (+3,{COL2}) wrap 19 4
			if $FirstRow = 'Y'
				PRINT $CUST-DET (+1,{COL1})  WRAP 20 7  !Lakshmi fix duplicate Sep 16th PRINT customer ONLY with OPEN ITEMS
				Let $FirstRow = 'N'
			end-if 

			PRINT &ITEM (+1,{COL2}) wrap 19 4
			PRINT &CURRENCY (0,{COL3})
			!Lakshmi commented printing zero Sep 11th 2017 and added Edit for Decimal
			
	        
			PRINT &AMT1   (0,{COL4})   edit 999999.99  ! Lakshmi commented printing zero Sep 1
			PRINT &AMOUNT (0,{COL5})   edit 999999.99  ! Lakshmi commented printing zero Sep 1
			PRINT &AMT2   (0,{COL6})   edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT3   (0,{COL7})   edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT4   (0,{COL8})   edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT5   (0,{COL9})   edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT6   (0,{COL10})  edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT7   (0,{COL11})  edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT8   (0,{COL12})  edit 999999.99  ! Lakshmi need to ADD code for  decimal
			PRINT &AMT9   (0,{COL13})  edit 999999.99  ! Lakshmi need to ADD code for  decimal
		end-if
	end-if

		LET $PREV_CUST = $NEW_CUST
        let #leveloccurs1 = #leveloccurs1  + 1 
		let #grcnt = #grcnt +1 
       
!*********Lakshmi 
      !  new-page   
      !  PRINT 'Grand total ' (0,{COL2})  WRAP 20 7 BOLD
      !  PRINT &CURRENCY (0,{COL3}) BOLD
      !  PRINT &TOTALAMOUNT (0,{COL4}) BOLD
      !  PRINT &TOTAL_AMT1 (0,{COL5}) BOLD
      !	 PRINT &TOTAL_AMT2 (0,{COL6}) BOLD
      !	PRINT &TOTAL_AMT3 (0,{COL7}) BOLD
      !	PRINT &TOTAL_AMT_4 (0,{COL8}) BOLD
      ! PRINT &AMT5_TOTAL (0,{COL9}) BOLD
      !	PRINT &TOTAL_AMT6 (0,{COL10})BOLD
      !	PRINT &AMOUNT_OUT7 (0,{COL11})BOLD
      !	PRINT &AMOUNT_OUT8 (0,{COL12})BOLD
      !	PRINT &AMT_9 (0,{COL13})BOLD     

 
FROM SYSADM.PS_MOD_ARAGING_STG 
WHERE CUST_ID = $PARENT-CUST
!where cust_id = $COV_RNTL_CORP_CUST_ID
!ORDER BY LEVELNUM,CUST_ID,ITEM
order by item desc
END-SELECT
!show '$COV_RNTL_CORP_CUST_ID: '$COV_RNTL_CORP_CUST_ID
!! this is printing at the end. if you observe, this is after select statement
!			show ' if #1_TOTALAMOUNT: ' #1_TOTALAMOUNT
!			show '#CUST-AMT: for printing TOTAL '#CUST-AMT
!			if &TOTALAMOUNT <> 0 !Lakshmi added
!			!if #1_TOTALAMOUNT <> 0
!			 !Lakshmi Sep 16th
!		      Print $CORP-DET (+4,{COL1}) WRAP 22 7 BOLD
!              PRINT #CUST-AMT  (0,{COL4})   edit 999999.99  ! Lakshmi commented printing TOTAL SEP 16TH
!              PRINT &AMT_9   (0,{COL4}) BOLD !Lakshmi printing Sep 18th
!				
!				if   #1_LEVEL = 1 !lAKSHMI SEP 16th
!				show '#1_LEVEL: ' #1_LEVEL
!				show '#1_TOTALAMOUNT <> #1_AMOUNT: '#1_AMOUNT
!				show '#1_TOTALAMOUNT: INSIDE IF FOR PRINTING TOTAL ' #1_TOTALAMOUNT
!			    show '#CUST-AMT: for printing TOTAL '#CUST-AMT
!		        
!				    PRINT $CUST-DET (0,{COL1})  WRAP 20 7
!			        PRINT #CUST-AMT  (0,{COL4})   edit 999999.99  ! Lakshmi commented printing TOTAL SEP 16TH
!					if #1_TOTALAMOUNT <> #1_AMOUNT
!	                                   Print $CORP-DET (+4,{COL1}) WRAP 22 7 BOLD
!                                           PRINT #CUST-AMT  (0,{COL4})   edit 999999.99  ! Lakshmi commented printing TOTAL SEP 16TH
!                                           PRINT &AMT_9   (0,{COL4}) BOLD !Lakshmi printing Sep 18th
!						!PRINT 'Total(Self+Child)' (+1,{COL2}) wrap 19 4 BOLD
!						!PRINT #1_CURRENCY (0,{COL3})     BOLD
!						!PRINT #1_TOTALAMOUNT (0,{COL4})  BOLD
!						!PRINT #1_TOTAL_AMT1 (0,{COL5})   BOLD
!						!PRINT #1_TOTAL_AMT2 (0,{COL6})   BOLD
!						!PRINT #1_TOTAL_AMT3 (0,{COL7})   BOLD
!						!PRINT #1_TOTAL_AMT_4 (0,{COL8})  BOLD
!						!PRINT #1_AMT5_TOTAL (0,{COL9})   BOLD
!						!PRINT #1_TOTAL_AMT6 (0,{COL10})  BOLD
!						!PRINT #1_AMOUNT_OUT7 (0,{COL11}) BOLD
!						!PRINT #1_AMOUNT_OUT8 (0,{COL12}) BOLD
!						!PRINT #1_AMT_9 (0,{COL13})       BOLD
!					end-if
!				end-if
!			end-if

display &AMOUNT


END-PROCEDURE
!*******************************************************************************
! Function:    CLEAR-STG
! Description: This procedure clears the staging table entry and make ready 
! for another corporate customer.
!*******************************************************************************
BEGIN-PROCEDURE CLEAR-STG
BEGIN-SQL
DELETE FROM SYSADM.PS_MOD_ARAGING_STG
END-SQL
END-PROCEDURE
!***********************************************************************
! Function:  END-PROCESS
! Desc:      Update the process scheduler run control
!***********************************************************************
begin-procedure END-PROCESS
    If $prcs_process_instance <> ''
        do UPDATE-PRCS-RUN-STATUS
        do Commit-Transaction
    end-if
end-procedure


!----------------------------------------------------------------------!
! Called SQC Procedures                                                !
!----------------------------------------------------------------------!
#include 'reset.sqc'     ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request Variable Declare
#include 'gar30003.sqc'  ! Get Variables entered through Process Scheduler
#include 'getselct.sqc'  ! Get Variables entered through Process Scheduler
#include 'tranctrl.sqc'  ! Commit transactions
#include 'arlang.sqc'    ! Get language related aging description
#include 'eoj.sqc'       !End-Of-Job