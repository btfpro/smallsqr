! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  EFTKANA:   Convert EFT KANA Characters                              *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
! Background: Japanese EFT transactions allow only a limited set of    *
!             characters to be used.  The allowable set is a subset of *
!             the single-byte ("Hankaku") Katakana characters.  Rules  *
!             Exist to convert many common, but invalid characters to  *
!             their closest equivalent in the valid character range.   *
!             This SQC performs this conversion.                       *
!                                                                      *
! Usage:      Pass a Hankaku Katakana string to convert_eft_kana       *
!             The procedure will return the string formatted as EFT    *
!             Katakana, and a flag indicating if any invalid and       *
!             "unconvertable" characters were included in the string.  *
!                                                                      *
!             If "unconvertable" characters are found, they are        *
!             skipped and not written to the output variable, and the  *
!             $cef_skip_flag output variable is set to 'Y'             *
!                                                                      *
! Note:       This SQR currently only supports the Shift-JIS character *
!             set.  Therefore, it may only be run on client Windows    *
!             workstations and on Japanese UNIX systems.  It does not  *
!             yet support Japanese MVS/390 server-side execution.      *
!                                                                      *
!***********************************************************************
begin-procedure convert_eft_kana($kana, :$cef_fix_kana, :$cef_skip_flag)

    let $cef_fix_kana = ''
    let #cef_length = length($kana)
    let #cef_count = 1
    let $cef_skip_flag = 'N'

    ! constants
    let $back_sl   = unicode('U+005C') ! used as yen sign
    let $yen_sign  = unicode('U+00A5') ! unicode yen sign
    let $left_blk  = unicode('U+FF62')
    let $right_blk = unicode('U+FF63')
    let $kana_wo   = unicode('U+FF66')
    let $kana_begin= unicode('U+FF71')
    let $kana_end  = unicode('U+FF9F')
    let $kana_bo   = unicode('U+FF70')
    let $kana_stop = unicode('U+FF61')
    let $kana_comma= unicode('U+FF64')
    let $kana_a    = unicode('U+FF67')
    let $kana_i    = unicode('U+FF68')
    let $kana_u    = unicode('U+FF69')
    let $kana_e    = unicode('U+FF6A')
    let $kana_o    = unicode('U+FF6B')
    let $kana_ya   = unicode('U+FF6C')
    let $kana_yu   = unicode('U+FF6D')
    let $kana_yo   = unicode('U+FF6E')
    let $kana_tsu  = unicode('U+FF6F')

    while #cef_count < #cef_length + 1

        let $furi_temp = substr($kana,#cef_count,1)
        let $cef_okay = 'N'
        let $cef_fix  = 'N'

        if range($furi_temp, $kana_begin ,$kana_end) or ! katakana range
           $furi_temp = $kana_wo or                     ! kana 'wo'
           range($furi_temp, '0', '9') or               ! numeric
           range($furi_temp, 'A', 'Z') or               ! captail letter
           $furi_temp = $yen_sign or                    ! yen sign
           $furi_temp = $back_sl  or                    ! yen sign
           $furi_temp = $left_blk or                    ! left blacket
           $furi_temp = $right_blk or                   ! rigth blacket
           $furi_temp = ' ' or                          ! space
           $furi_temp = '.' or                          ! period
           $furi_temp = ',' or                          ! comma
           $furi_temp = '(' or                          ! left parenthesis
           $furi_temp = ')' or                          ! right parenthesis
           $furi_temp = '-' or                          ! minus
           $furi_temp = '/'                             ! slash

            let $cef_okay = 'Y'

        else
            if range($furi_temp, 'a', 'z')

                let $furi_temp = upper($furi_temp)
                let $cef_okay = 'Y'

            end-if
        end-if
        if $cef_okay = 'N'
            if $furi_temp = $kana_bo      
                let $furi_temp = '-'
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_stop   
                let $furi_temp = '.'
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_comma 
                let $furi_temp = ','
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_a 
                let $furi_temp = unicode('U+FF71')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_i
                let $furi_temp = unicode('U+FF72')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_u
                let $furi_temp = unicode('U+FF73')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_e
                let $furi_temp = unicode('U+FF74')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_o
                let $furi_temp = unicode('U+FF75')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_ya
                let $furi_temp = unicode('U+FF94')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_yu
                let $furi_temp = unicode('U+FF95')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_yo
                let $furi_temp = unicode('U+FF96')
                let $cef_fix = 'Y'
            else 
            if $furi_temp = $kana_tsu
                let $furi_temp = unicode('U+FF82')
                let $cef_fix = 'Y'
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
            end-if
        end-if

        let #cef_count = #cef_count + 1

        if $cef_okay = 'Y' or $cef_fix = 'Y'
            let $cef_fix_kana = $cef_fix_kana || $furi_temp
        else 
            let $cef_fix_kana = $cef_fix_kana || ' '
            let $cef_skip_flag = 'Y'
        end-if

   end-while

end-procedure
