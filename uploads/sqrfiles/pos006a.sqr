!***********************************************************************
!  POS006A:  Build Position Reporting Structure                        *
!***********************************************************************
!  Note:  Report POS006 will not be current without first running      *
!         this utility.                                                *
!***********************************************************************
!** THIS REPORT HAS 3 DIMENSIONAL ARRAY TO HANDLE 568,467 POSITIONS  ***
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:19:54                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

begin-Report
   do Init-DateTime
   do Get-Current-DateTime
   do Init-Report
   do Process-Orgs
   do Stdapi-Term
end-REPORT

!********************************************
begin-procedure Init-Report

  move 'POS006A' to $ReportID
  move 'Building Position Reporting Structure' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-As-Of-Date
  else
    do Select-Parameters
  end-if
end-procedure

!********************************************
begin-procedure Get-Values

   do Get-As-Of-Date

end-procedure


begin-procedure Process-Orgs
   do Load-Orgcode-Symbols
   do Clear-Position_Data
   do Mark-Reports-To
   do Update-Top-Level
   move 'N' to $end-level
   while $end-level = 'N'
     do Update-Sub-Level
   end-while

   !***Diagnistic routines for position tree.***
   do Check-for-no-supervisor
   do Check-for-circle
end-procedure

begin-procedure Clear-Position_Data
let $sql-statement = 'POS006A.SQR,Clear-Position_Data,Update,PS_Position_Data'
begin-SQL on-error=SQL-Error
  UPDATE PS_POSITION_DATA
  SET ORGCODE_FLAG = ' ',
      ORGCODE      = ' '
end-SQL
end-procedure

begin-procedure Mark-Reports-To
!**********************************************************************
! For efficiency, mark those records which are "effective" on AsOfDate
!**********************************************************************
begin-SELECT
A.POSITION_NBR,
A.EFFDT
   do Set-Subordinate-Flag
FROM PS_POSITION_DATA A
WHERE A.REPORTS_TO <> ' '
  AND A.EFF_STATUS = 'A'
  AND A.EFFDT =
               (SELECT MAX(B.EFFDT)
                FROM PS_POSITION_DATA B
                WHERE B.POSITION_NBR = A.POSITION_NBR
                AND B.EFFDT <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Set-Subordinate-Flag
let $sql-statement = 'POS006A.SQR,Set-Subordinate-Flag,Update,PS_Position_Data'
begin-SQL on-error=SQL-Error
  UPDATE PS_POSITION_DATA
  SET ORGCODE_FLAG = 'N'
  WHERE POSITION_NBR = &A.Position_Nbr
    AND EFFDT  = &A.EffDt
end-SQL
end-procedure

begin-procedure Update-Top-Level
!**********************************************************************
!Note: PeopleSoft's convention for identifying a top-level is one that
!      that reports to itself (i.e. Position_Nbr = Reports_To).  This
!      is necessary since the on-line system enforces that Reports_To
!      must be a valid entry on the Table.
!**********************************************************************

move 0 to #i
begin-SELECT
D.POSITION_NBR
   do Add-Top-Level-OrgCode
 FROM PS_POSITION_DATA D
WHERE D.REPORTS_TO   = D.POSITION_NBR
  AND D.ORGCODE_FLAG = 'N'
end-SELECT
! diagnistic check - print message if no top node was found.
if (#i = 0)
  display ''
  display '**************************************************'
  display 'ERROR - A top-level position was not found.'
  display '        Reporting chart codes could not be created.'
  display '        The top-level node is defined as a position that'
  display '        reports to itself.'
  display '**************************************************'
end-if
end-procedure

begin-procedure Add-Top-Level-OrgCode
add 1 to #i
do Get-Orgcode-Symbol
let $sql-statement = 'POS006A.SQR,Add-Top-Level-OrgCode,Update,PS_Position_Data'
begin-SQL on-error=SQL-Error
  UPDATE PS_POSITION_DATA
  SET ORGCODE = $Code
  WHERE POSITION_NBR = &D.Position_Nbr
    AND ORGCODE_FLAG = 'N'
end-SQL
end-procedure

begin-procedure Update-Sub-Level
begin-SELECT
G.POSITION_NBR,
G.ORGCODE
   move 0 to #i
   do Get-Subordinates
   do Update-Subord-Flag
FROM PS_POSITION_DATA G
WHERE G.ORGCODE <> ' '
  AND G.ORGCODE_FLAG = 'N'
end-SELECT

   if &G.Position_Nbr = ''
     move 'Y' to $end-level
   end-if
end-procedure

begin-procedure Get-Subordinates
begin-SELECT
H.POSITION_NBR
   do Add-OrgCode
FROM PS_POSITION_DATA H
WHERE H.REPORTS_TO   = &G.Position_Nbr
  AND H.REPORTS_TO  <> H.POSITION_NBR
  AND H.ORGCODE_FLAG = 'N'
ORDER BY POSITION_NBR
end-SELECT
end-procedure

begin-procedure Add-OrgCode
add 1 to #i
do Get-Orgcode-Symbol
move &G.OrgCode to $field
move 60 to #length
    let $field = RTRIM(&G.OrgCode,' ')
move $field to $OrgCode
concat $Code with $OrgCode
let $sql-statement = 'POS006A.SQR,Add-OrgCode,Update,PS_Position_Data'
begin-SQL on-error=SQL-Error
   UPDATE PS_POSITION_DATA
   SET ORGCODE = $OrgCode
   WHERE POSITION_NBR = &H.Position_Nbr
     AND ORGCODE_FLAG = 'N'
end-SQL
end-procedure

begin-procedure Update-Subord-Flag
let $sql-statement = 'POS006A.SQR,Update-Subord-Flag,Update,PS_Position_Data'
begin-SQL on-error=SQL-Error
   UPDATE PS_POSITION_DATA
   SET ORGCODE_FLAG = 'Y'
   WHERE POSITION_NBR = &G.Position_Nbr
     AND ORGCODE_FLAG = 'N'
end-SQL
end-procedure

!********************************************************
! Diagnostics - Count the positions that do not have
!    a reports-to position identified.  These positions
!    will not appear on the POS006 report.
!********************************************************
begin-procedure Check-for-no-supervisor
let #count1 = 0
begin-SELECT
E.POSITION_NBR
  let #count1 = #count1 + 1
FROM PS_POSITION_DATA E
WHERE E.REPORTS_TO = ' '
  AND E.EFFDT =  (SELECT MAX(B.EFFDT)
                FROM PS_POSITION_DATA B
                WHERE B.POSITION_NBR = E.POSITION_NBR
                AND B.EFFDT <= $AsOfDate)
end-SELECT
if (#count1 > 0)
  let #count1 = trunc(#count1,0)
  display ' '
  display '++++++++++++++++++++++++++++++++++++++++++++++++++'
  display 'WARNING: Positions do not have data in the reports_to'
  display '         field.  This will cause positions to be unreported'
  display '         on report POS006.'
  display #count1 99 NOLINE
  display ' positions have no current reports_to data.'
  display '++++++++++++++++++++++++++++++++++++++++++++++++++'
end-if
end-procedure

!********************************************************
! Diagnostics - Check for a circular reports_to condition
!    where for example, position 1 reports to 2 and 2 reports to 1.
!********************************************************
begin-procedure Check-for-circle
let #count1 = 0
begin-SELECT
X.POSITION_NBR
X.REPORTS_TO
  do check-for-circle-1
FROM PS_POSITION_DATA X
WHERE X.ORGCODE = ' '
  AND X.EFFDT =  (SELECT MAX(B.EFFDT)
                  FROM PS_POSITION_DATA B
                  WHERE B.POSITION_NBR = X.POSITION_NBR
                  AND B.EFFDT <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Check-for-circle-1
begin-SELECT
Y.POSITION_NBR
Y.REPORTS_TO
  if (#count1 = 0)
    let #count1 = trunc(#count1,0)
    display ' '
    display '++++++++++++++++++++++++++++++++++++++++++++++++++'
    display 'WARNING: A circular reports to condition was found.'
    display '         Refer to the positions below for positions in question.'
    display 'POSITION      REPORTS_TO'
    let #count1 = #count1 + 1
  end-if
  display &Y.position_nbr  NOLINE
  display '      ' NOLINE
  display &Y.reports_to
  display '++++++++++++++++++++++++++++++++++++++++++++++++++'
FROM PS_POSITION_DATA Y
WHERE Y.REPORTS_TO = &X.position_nbr
  and Y.POSITION_NBR = &X.reports_to
  and Y.POSITION_NBR <> Y.REPORTS_TO
  AND Y.EFFDT =  (SELECT MAX(B.EFFDT)
                  FROM PS_POSITION_DATA B
                  WHERE B.POSITION_NBR = Y.POSITION_NBR
                  AND B.EFFDT <= $AsOfDate)
end-SELECT
end-procedure

!********************************************************************
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input

#Include 'datetime.sqc'  !Routine for Date and Time formatting
#Include 'curdttim.sqc'  !Get Current DateTime procedure
#Include 'ldorgsb.sqc'   !Get Load Org Symbols procedure
#Include 'getorgsb.sqc'  !Get Org Symbols procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
