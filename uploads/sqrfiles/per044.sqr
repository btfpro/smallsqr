!***********************************************************************
! PER044:  Multiple Seniority Components                               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:42:49                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
begin-setup
  #Include 'ptset02.sqc'   !Printer and page-size initialization
end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $prcs_oprid=''
    goto last2
  end-if
  let $Rate_Code_Class = 'SENPAY'
  do Process-Main
  if #EMP_CNT = 0
      Show 'No Employees Selected for report'
      Print 'No Employees Selected for report' (+2,5)
  end-if
  Show 'End Report: PER044.sqr'
  do Reset
  do Stdapi-Term
LAST2:
end-report

!***************
begin-heading 8
!***************

do Get_Field_Information ('PER044',     'REPORT_TITLE',         $REPORTTITLE,    #DW)
#Include 'stdhdgtr.sqc'

!*******************
! Print As-Of-Date *
!*******************

do Append_Report_Translation ('STDHDGHR')
if $Program_Read = 'Y'
   do Get_Field_Information ('STDHDGHR', 'ASOFDATE', $DATE, #DW)
end-if
print $DATE    (4,1)
do Format-DateTime($AsOfDate, $out, {DEFDATE}, '', '')
print $out (,+1)

!*******************************
! Print Employee List Headings *
!*******************************

do Get_Field_Information ('HR',     'EMPLID',          $EMPLID_LBL,         #DW)
do Get_Field_Information ('HR',     'NAME',            $NAME_LBL,           #DW)
do Get_Field_Information ('HR',     'EMPL_RCD',        $EMPL_RCD_LBL,       #DW)
do Get_Field_Information ('HR',     'EFFDT1',          $EFFDT1_LBL,         #DW)
do Get_Field_Information ('HR',     'EFFDT2',          $EFFDT2_LBL,         #DW)
do Get_Field_Information ('CMP016', 'EFF_SEQ',         $EFF_SEQ_LBL,        #DW)
do Get_Field_Information ('HR',     'ACTION',          $ACTION_LBL,         #DW)
do Get_Field_Information ('HR',     'ACTION_REASON1',  $ACTION_REASON1_LBL, #DW)
do Get_Field_Information ('HR',     'ACTION_REASON2',  $ACTION_REASON2_LBL, #DW)
do Get_Field_Information ('HR',     'COMP_RATECD',     $RATE_CODE,          #DW)
do Get_Field_Information ('HR',     'RATE_CODE_CLASS', $RATE_CD_CLS,        #DW)
do Get_Field_Information ('PER044', 'LEVEL',           $SEN_LEVEL,          #DW)
do Get_Field_Information ('PER044', 'ORIGIN',          $SEN_ORIGIN,         #DW)
do Get_Field_Information ('PER044', 'PARAMETERS',      $PARAM_LBL,          #DW)
do Get_Field_Information ('PER044', 'ALL',             $ALL,                #DW)
do Get_Field_Information ('PER044', 'RATE_CODES',      $RATE_CODES_LBL,     #DW)
do Get_Field_Information ('PER044', 'GROUPS',          $GROUPS_LBL,         #DW)

PRINT   $PARAM_LBL                    (  5,  1,  0)
if $process_by = 'R'
   PRINT   $RATE_CODES_LBL            (  5, +1,  0)
end-if
if $process_by = 'G'
   PRINT   $GROUPS_LBL                (  5, +1,  0)
end-if
if $process_by = 'A'
   PRINT   $ALL                       (  5, +1,  0)
end-if
PRINT   '-'                           (  5, +1,  0)
PRINT   $HDG_STRING                   (  5, +1)

PRINT $EMPLID_LBL                     (  7,  1, 11)
PRINT $NAME_LBL                       (  7, 13, 35)
PRINT $EMPL_RCD_LBL                   (  7, 49,  3)
PRINT $EFFDT1_LBL                     (  7, 54, 10)
PRINT $EFFDT2_LBL                     (  8, 54, 10)
PRINT $EFF_SEQ_LBL                    (  7, 66,  3)
PRINT $ACTION_LBL                     (  7, 71, 10)
PRINT $ACTION_REASON1_LBL             (  7, 84, 10)
PRINT $ACTION_REASON2_LBL             (  8, 84, 10)
PRINT $RATE_CODE                      (  7, 96, 12)
PRINT $EFF_SEQ_LBL                    (  7,109,  3)
PRINT $RATE_CD_CLS                    (  7,114, 18)
PRINT $SEN_LEVEL                      (  7,133,  8)
PRINT $SEN_ORIGIN                     (  7,142)

end-heading

!***************************
begin-procedure Init-Report
!***************************

  move 'PER044' to $ReportID
  do Stdapi-Init
   if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  do Select-Parameters

  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  do Append_Report_Translation ('CMP016')
  do Append_Report_Translation ('PER044')
  do Append_Report_Translation ('PER706B')
  do Append_Report_Translation ('BAS004')

  Show 'Begin Report PER044.sqr: ' $REPORTTITLE
  Show 'Using '
  Show 'Asofdate: ' $AsofDate
  Show 'Process by: ' $process_by

LAST1:
end-procedure

!**************************
begin-procedure Get-Values
!**************************

  let $language_cd = $prcs_language_cd
  do Get-As-Of-Date
  do Get-PER044-Parm
  if $process_by = 'R'
     do Get-Rate-Codes
     let $Where_And = 'AND EXISTS (SELECT COMP.COMP_RATECD FROM PS_COMPENSATION COMP
                                   WHERE COMP.EMPLID = A.EMPLID
                                     AND COMP.EMPL_RCD = A.EMPL_RCD
                                     AND COMP.EFFDT = A.EFFDT
                                     AND COMP.EFFSEQ = A.EFFSEQ
                                     AND COMP.COMP_RATECD IN (' || $RateCodeString || '))'
     let $Hdg_String = $RateCodeString
  end-if
  if $process_by = 'G'
     do Get-Group-IDs
     let $Where_And = 'AND EXISTS (SELECT COMP.COMP_RATECD FROM PS_COMPENSATION COMP
                                   WHERE COMP.EMPLID = A.EMPLID
                                     AND COMP.EMPL_RCD = A.EMPL_RCD
                                     AND COMP.EFFDT = A.EFFDT
                                     AND COMP.EFFSEQ = A.EFFSEQ
                                     AND COMP.COMP_RATECD IN (SELECT E.COMP_RATECD
                                     FROM PS_SEN_PAY_GROUP E
                                     WHERE E.GB_GROUP_ID IN (' || $GroupIDString || ')))'
     let $Hdg_String = $GroupIDString
  end-if
  if $process_by = 'A'
     let $Where_And = ''
     let $Hdg_String = ''
  end-if

end-procedure

!****************************
begin-procedure Process-Main
!****************************

! Select COMPENSATION packages that have more than 1 seniority component.
! Use rate codes or group ids as criteria if entered in run control panel.
! {DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX} &A.EFFDT_OUT
  move 0 to #Emp_cnt

begin-SELECT DISTINCT
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.EFFSEQ
  ! If compensation package found with more than 1 seniority component,
  ! retrieve the individual rows.

  let $E_Emplid = &A.EMPLID
  let #Empl_Rcd = &A.EMPL_RCD

  let #Effseq   = &A.EFFSEQ
  do Get-Senpay-Comp-Rows
  let #EMP_CNT  = #EMP_CNT + 1

FROM PS_COMPENSATION A
WHERE A.EFFDT = (SELECT MAX(CMP1.EFFDT)
                    FROM PS_COMPENSATION CMP1
                   WHERE CMP1.EMPLID = A.EMPLID
                     AND CMP1.EMPL_RCD = A.EMPL_RCD
                     AND CMP1.EFFDT <= $ASOFDATE)
  AND A.EFFSEQ = (SELECT MAX(CMP2.EFFSEQ)
                     FROM PS_COMPENSATION CMP2
                    WHERE CMP2.EMPLID = A.EMPLID
                      AND CMP2.EMPL_RCD = A.EMPL_RCD
                      AND CMP2.EFFDT = A.EFFDT)
  AND EXISTS (SELECT 'X'
                FROM PS_COMP_RATECD_TBL RC1
               WHERE RC1.COMP_RATECD = A.COMP_RATECD
                 AND RC1.RATE_CODE_CLASS = $Rate_Code_Class
                 AND RC1.EFF_STATUS = 'A'
                 AND RC1.EFFDT = (SELECT MAX(RC2.EFFDT)
                                   FROM PS_COMP_RATECD_TBL RC2
                                  WHERE RC2.COMP_RATECD = A.COMP_RATECD
                                    AND RC2.EFFDT <= A.EFFDT))
  AND EXISTS (SELECT 'X' FROM PS_COMPENSATION CMP3
               WHERE CMP3.EMPLID = A.EMPLID
                 AND CMP3.EMPL_RCD = A.EMPL_RCD
                 AND CMP3.EFFDT = A.EFFDT
                 AND CMP3.EFFSEQ = A.EFFSEQ
                 AND (CMP3.COMP_RATECD <> A.COMP_RATECD
                      OR (CMP3.COMP_RATECD = A.COMP_RATECD AND CMP3.COMP_EFFSEQ <> A.COMP_EFFSEQ))
                 AND EXISTS (SELECT 'X'
                               FROM PS_COMP_RATECD_TBL RC3
                              WHERE RC3.COMP_RATECD = CMP3.COMP_RATECD
                                AND RC3.RATE_CODE_CLASS = $Rate_Code_Class
                                AND RC3.EFF_STATUS = 'A'
                                AND RC3.EFFDT = (SELECT MAX(RC4.EFFDT)
                                                  FROM PS_COMP_RATECD_TBL RC4
                                                 WHERE RC4.COMP_RATECD = CMP3.COMP_RATECD
                                                   AND RC4.EFFDT <= CMP3.EFFDT)))
end-SELECT

end-procedure

!************************************
begin-procedure Get-Senpay-Comp-Rows
!************************************

begin-SELECT
F.EMPLID                       ( +1,  1, 11) on-break skiplines=1

   ! **************************
   ! Print the Name           *
   ! **************************
   move &F.EMPLID to $EmplID
   do Get-Employee-Name
   do Rotate-Name
   print $Name                  (  0, 13, 35) on-break skiplines=1

F.EMPL_RCD                      (  0, 49,  3) edit 999 on-break skiplines=1
F.EFFDT

   ! **************************
   ! Print Job Effective Date *
   ! **************************
   do Format-DateTime(&F.EFFDT, $out, {DEFDATE}, '', '')
   print $out                  (  0, 54, 10) on-break skiplines=1

F.EFFSEQ                       (  0, 66,  3) edit 999 on-break skiplines=1

   ! ***********************************************
   ! Get the Action and Action Reason descriptions *
   ! ***********************************************
   do Get-Action-Reason-Descr
   print $Action_Descr             (  0, 71, 10) on-break skiplines=1
   print $Action_Reason_DescrShort (  0, 84, 10) on-break skiplines=1

F.COMP_RATECD                      (  0, 96, 12)
F.COMP_EFFSEQ                      (  0,109,  3) edit 999

  let $Comp_Ratecd = &F.COMP_RATECD
  ! Get rate code class description, calculate seniority date, and
  ! then calculate employee's seniority level for the rate code.
  do Get-Rate-Code-Class-Descr
  print $Class_Descr15             (  0,114, 18)
  do Get-Seniority-Date
  do Get-Senpay-Level
  print #Level_Nbr                 (  0,133,  3) edit 999

F.MANUAL_SW

  ! If seniority component was manually added, indicate so on the report.
  ! Otherwise, determine the origin of the component and print it.
  let $manual_sw = &F.MANUAL_SW
  if $manual_sw = 'Y'
     do Get_Field_Information ('PER044',     'MANUALLY_ADDED',       $MAN_ADDED,    #DW)
     print $Man_Added              (  0, 142)
  else
     do Get-Origin
  end-if

FROM PS_COMPENSATION    F,
     PS_COMP_RATECD_TBL G
WHERE F.EMPLID      = $E_Emplid
  AND F.EMPL_RCD    = #Empl_Rcd
  AND F.EFFDT       = &A.EFFDT
  AND F.EFFSEQ      = #Effseq
  AND F.COMP_RATECD = G.COMP_RATECD
  AND G.RATE_CODE_CLASS = $Rate_Code_Class
  AND G.EFF_STATUS = 'A'
  AND G.EFFDT = (SELECT MAX(G1.EFFDT)
                   FROM PS_COMP_RATECD_TBL G1
                  WHERE G1.COMP_RATECD = G.COMP_RATECD
                    AND G1.EFFDT <= &A.EFFDT)
ORDER BY F.EMPLID
end-SELECT

end-procedure

!**************************************
begin-procedure Get-Action-Reason-Descr
!**************************************
! This procedure gets the descriptions of Action and Action Reason

begin-SELECT
J1.ACTION
J1.ACTION_REASON

   ! ************************
   ! Print Action Xlatvalue *
   ! ************************
   move 'ACTION'  to $FieldName
   move &J1.ACTION to $FieldValue
   do Read-Translate-Table
   let $Action_Descr = $XlatshortName

   ! ***************************
   ! Print Action Reason Descr *
   ! ***************************
   move &J1.ACTION         to $Action
   move &J1.ACTION_REASON  to $Action_Reason
   move $AsOfDate to $AsOfDate_Old
   move &F.EFFDT      to $AsOfDate
   do Get-Action-Reason
   move $AsOfDate_Old to $AsOfDate

FROM PS_JOB J1
WHERE J1.EMPLID = &F.EMPLID
  AND J1.EMPL_RCD = &F.EMPL_RCD
  AND J1.EFFDT = &F.EFFDT
  AND J1.EFFSEQ = &F.EFFSEQ
end-SELECT

end-procedure

!**********************************
begin-procedure Get-Seniority-Date
!**********************************
! This procedure determines the employee's seniority date, and then
! calculates the difference between it and the As Of Date in months.

begin-SELECT
CR.SENIORITY_CALC
  let $Seniority_Calc = &CR.SENIORITY_CALC
  if $Seniority_Calc = 'B'
     do Get-Birthdate
  else
     do Get-Employment-Dates
  end-if
  do Convert-To-DTU-Date($Seniority_Date, $DTU_Sen_Date)
  do Convert-To-DTU-Date($AsOfDate, $DTU_AsOfDate)
  do dtu-diff-months($DTU_Sen_Date, $DTU_AsOfDate, #dtu_months)

  #ifdef debugx
    display 'PER044.SQR: Get-Seniority-Date'
    #ifdef debugy
       display ' $Seniority_Date: ' noline
       display $Seniority_Date
       display ' #dtu_months: ' noline
       display #dtu_months
    #end-if
  #end-if

FROM PS_COMP_RATECD_TBL CR
WHERE CR.COMP_RATECD = $Comp_Ratecd
  AND CR.EFF_STATUS = 'A'
  AND CR.EFFDT = (SELECT MAX(CR1.EFFDT)
                    FROM PS_COMP_RATECD_TBL CR1
                   WHERE CR1.COMP_RATECD = CR.COMP_RATECD
                     AND CR1.EFFDT <= $AsOfDate)
end-SELECT

end-procedure

!*****************************
begin-procedure Get-Birthdate
!*****************************
! This procedure retrieves the employee's birth date.

begin-SELECT
PD.BIRTHDATE
{DATEOUT-PREFIX}PD.BIRTHDATE{DATEOUT-SUFFIX} &PD.BIRTHDATE_OUT
  let $Seniority_Date = &PD.BIRTHDATE_OUT

FROM PS_PERSON PD
WHERE PD.EMPLID = $E_Emplid
end-SELECT

end-procedure

!************************************
begin-procedure Get-Employment-Dates
!************************************
! This procedure retrieves the employee's hire date, company
! seniority date, and professional experience date.

begin-SELECT
EMP.HIRE_DT
EMP.CMPNY_SENIORITY_DT
EMP.PROF_EXPERIENCE_DT
{DATEOUT-PREFIX}EMP.HIRE_DT{DATEOUT-SUFFIX} &EMP.HIRE_DT_OUT
{DATEOUT-PREFIX}EMP.CMPNY_SENIORITY_DT{DATEOUT-SUFFIX} &EMP.CMPNY_SENIORITY_DT_OUT
{DATEOUT-PREFIX}EMP.PROF_EXPERIENCE_DT{DATEOUT-SUFFIX} &EMP.PROF_EXPERIENCE_DT_OUT
  if $Seniority_Calc = 'H'
     let $Seniority_Date = &EMP.HIRE_DT_OUT
  end-if
  if $Seniority_Calc = 'S'
     let $Seniority_Date = &EMP.CMPNY_SENIORITY_DT_OUT
  end-if
  if $Seniority_Calc = 'P'
     let $Seniority_Date = &EMP.PROF_EXPERIENCE_DT_OUT
  end-if

FROM PS_EMPLOYMENT EMP
WHERE EMP.EMPLID   = $E_Emplid
  AND EMP.EMPL_RCD = #Empl_Rcd
end-SELECT

end-procedure

!********************************
begin-procedure Get-Senpay-Level
!********************************
! This procedure determines the employee's seniority pay level for
! the given rate code based on the total number of months seniority
! which was calculated in Get-Seniority-Date.

  let #Level_Nbr = 0
  let #prev_level = 0
  let $level_found = 'N'
begin-SELECT
SC.COMP_RATECD
SC.LEVEL_NBR
SC.MIN_SEN_YEARS
SC.MIN_SEN_MONTHS
  let #sen_months = (12 * &SC.MIN_SEN_YEARS) + &SC.MIN_SEN_MONTHS
  if #dtu_months > #sen_months
     let #prev_level = &SC.LEVEL_NBR
  else
     if $level_found = 'N'
        let #Level_Nbr = #prev_level
        let $level_found = 'Y'
     end-if
  end-if

FROM  PS_SEN_PAY_COMPRT SC,
      PS_COMP_RATECD_TBL RCT1
WHERE SC.COMP_RATECD = $Comp_Ratecd
  AND SC.COMP_RATECD = RCT1.COMP_RATECD
  AND SC.EFFDT = RCT1.EFFDT
  AND RCT1.EFF_STATUS = 'A'
  AND RCT1.EFFDT = (SELECT MAX(RCT2.EFFDT)
                      FROM PS_COMP_RATECD_TBL RCT2
                     WHERE RCT2.COMP_RATECD = SC.COMP_RATECD
                       AND RCT2.EFFDT <= $AsOfDate)
ORDER BY SC.COMP_RATECD,
         SC.LEVEL_NBR
end-SELECT

  if $level_found = 'N'
     let #Level_Nbr = #prev_level
     let $level_found = 'Y'
  end-if

end-procedure

!**************************
begin-procedure Get-Origin
!**************************
! This procedure determines the origin of the employee's seniority
! rate code.  If the rate code belongs to a group, then the origin is
! set to the group id.  If the rate code does not belong to a group,
! the origin is set to 'All'.

  do Get_Field_Information ('PER706B', 'GROUP',   $GROUP_LBL, #DW)
  do Get_Field_Information ('BAS004',  'OR_ONLY', $OR_LBL,    #DW)

  let $group_found = 'N'
  let $first_group = 'Y'

begin-SELECT
SG.GB_GROUP_ID

  let $group_found = 'Y'
  if $first_group = 'Y'
     Print $GROUP_LBL              (  0, 142)
     Print &SG.GB_GROUP_ID         (  0,  +1)
     let $first_group = 'N'
  else
     Print $OR_LBL                 ( +1, 142)
     Print $GROUP_LBL              (  0,  +1)
     Print &SG.GB_GROUP_ID         (  0,  +1)
  end-if

FROM PS_SEN_PAY_GROUP SG,
     PS_COMP_RATECD_TBL RC_TBL1
WHERE SG.COMP_RATECD = $Comp_Ratecd
  AND SG.COMP_RATECD = RC_TBL1.COMP_RATECD
  AND SG.EFFDT = RC_TBL1.EFFDT
  AND RC_TBL1.EFF_STATUS = 'A'
  AND RC_TBL1.EFFDT = (SELECT MAX(RC_TBL2.EFFDT)
                         FROM PS_COMP_RATECD_TBL RC_TBL2
                        WHERE RC_TBL2.COMP_RATECD = SG.COMP_RATECD
                          AND RC_TBL2.EFFDT <= $AsOfDate)
end-SELECT

  if $group_found = 'N'
     do Get_Field_Information ('PER044',     'ALL',                  $ALL,            #DW)
     let $Origin = $All
  end-if

end-procedure

!**************************************************************

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input
#include 'askrtcds.sqc'  !Ask Rate Code input
#include 'askgrpid.sqc'  !Ask Group ID input
#Include 'getactrs.sqc'  !Get-Action-Reason procedure

#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'getrtcds.sqc'  !Get-Rate-Codes procedure
#Include 'getgrpid.sqc'  !Get-Group-IDs procedure
#Include 'getrtcls.sqc'  !Get-Rate-Code-Class-Descr procedure
#Include 'getgbgrp.sqc'  !Get-GB-Group-Descr procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
