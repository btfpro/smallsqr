!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:51:00                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!***********************************************************************
!
! Advancement Faults Management
! Used in the SQR's Simulation and Step Increment (FPA010,FPA320)
!
!***********************************************************************

#include 'setenv.sqc'

!***************************************************************
!
!   Function    : Fault-Search
!
!   Description : Search for Faults
!
!***************************************************************
BEGIN-PROCEDURE Fault-Search($emplid,#empl_rcd,$test_dt,$rank,$step,
                             $sanction,$ColDecIncr,$name,$effdt,$empl_rcd,
                            :$Fault,:$nx_sanction,:$nx_down_gra)

! Check Dups on Carreer
!----------------------
do Check-Dup-Career($emplid,#empl_rcd,$test_dt,$name,$effdt,$empl_rcd,$Fault)


! Check Dups on Notification
!---------------------------
do Check-Dup-Notif($emplid,#empl_rcd,$ColDecIncr,$name,$effdt,
                                   $empl_rcd,$Fault)


! Check Grade/Step don't exists
!------------------------------
!Do Check-Rank-Step($emplid,#empl_rcd,$rank,$step,$sanction,
!                   $name,$effdt,$empl_rcd,$Fault,$nx_sanction,$nx_down_gra)


! Check there's no demand before advancement
!-------------------------------------------
Do Check-Request($emplid,#empl_rcd,$test_dt,$name,$effdt,
                                $empl_rcd,$Fault)

END-PROCEDURE Fault-Search



!***************************************************************
!
!   Function    : Check-Rank-Step
!
!   Description : Search for Grade/Level Step in Carreer
!                   -> If previous Step is not a sanction: Fault
!                   -> If previous Step is a sanction: Calculates new sanction codes
!                      and demotion
!
!***************************************************************
BEGIN-PROCEDURE Check-Rank-Step($emplid,#empl_rcd,$rank,$step,
                                 $sanction,$name,$effdt,$empl_rcd,
                                :$Fault,:$nx_sanction,:$nx_down_gra)

Let $Search='N'

! Find career occurence number in the same garde/step
!-----------------------------------------------------

let $sql-statement = 'FPA010.SQR, Career,Select,PS_FPAEECAREER'
BEGIN-SELECT On-Error=SQL-Error

G.EMPLID        &Gemplid

        Let $Search='Y'

from PS_FPAEECAREER G

where G.EMPLID = $Emplid
and   G.EMPL_RCD = #Empl_rcd
and   G.FP_RANK_CD = $Rank
and   G.FP_STEP_CD = $Step

END-SELECT

IF $sanction = 'N'
        IF $Search='Y'
                Let $Fault='Y'      !Fault
                Let $Descr = 'There is already a career record links to this Rank/Step'
                Do Print-Fault ($Emplid,$Name,$Empl_rcd,$Effdt,$Descr)

        Else
                Let $Nx_Sanction = 'N'
                Let $Nx_Down_Gra = 'N'
        End-if
Else
        IF $Search='Y'  !Sanction not terminated
                Let $Nx_Sanction = 'S'
                Let $Nx_Down_Gra = 'Y'
        Else            !End of Sanction
                Let $Nx_Sanction = 'N'
                Let $Nx_Down_Gra = 'N'
        end-if

end-if

END-PROCEDURE Check-Rank-Step



!***************************************************************
!
!   Function    : Check-Request
!
!   Description : Search for demand Career records where effdt < promotion date
!
!***************************************************************
BEGIN-PROCEDURE Check-Request($emplid,#empl_rcd,$test_dt,$name,$effdt,$empl_rcd,:$Fault)

Let $Search='N'

let $sql-statement = 'FPCKFLT.SQC, Check-Request,Select,PS_FPAEECAREER'
BEGIN-SELECT On-Error=SQL-Error

H.EMPLID                                &Hemplid
{DATEOUT-PREFIX}H.EFFDT{DATEOUT-SUFFIX} &Heffdt
I.DESCR                                 &IDESCR
I.ACTION                                !Field needed for translation purpose
I.EFFDT                                 !Field needed for translation purpose

        Let $Search='Y'

        Let $FPMACTION_TBL-DESCR = &IDESCR

        Do Get_Related_FPMACTION_TBL(&I.ACTION,&I.EFFDT)
        Let $IDescr = $FPMACTION_TBL-DESCR

from PS_FPAEECAREER H, PS_FPMACTION_TBL I

where H.EMPLID = $Emplid
and   H.EMPL_RCD = #Empl_rcd
and   H.FP_INST_STAT = 'D'
and   H.EFFDT <= {DATEIN-PREFIX}$test_dt{DATEIN-SUFFIX}
and   I.ACTION = H.ACTION
and   I.EFF_STATUS = 'A'
and   I.EFFDT =
        (Select Max(J.EFFDT)
        from PS_FPMACTION_TBL J
        Where J.ACTION = H.ACTION
        and   J.EFFDT <= {DATEIN-PREFIX}$test_dt{DATEIN-SUFFIX})

END-SELECT

IF $Search='Y'
        Let $Fault='Y'      !Fault

        Do Convert-To-DTU-Date (&Heffdt,$Heffdt)

!YVG        Let $Descr = 'Une demande de ' || &IDESCR || ' a ete inseree a date d effet'
!YVG        Let $Descr = $Descr || $Heffdt

        do Get_Field_Information($ReportID, 'ERROR4', $Descr, #DW)  ! MSG = A %Action-descr request has been insert with
        Do String-Replace ($Descr,'%Action-descr',$IDescr,$Descr)   !       an effective date egal to %effdt
        Do String-Replace ($Descr,'%effdt',$Heffdt,$Descr)

        Do Print-Fault ($Emplid,$Name,$Empl_rcd,$Effdt,$Descr)

End-if

END-PROCEDURE Check-Request



!***************************************************************
!
!   Function    : Check-Dup-Career
!
!   Description : Verify Career Dups
!
!***************************************************************
BEGIN-PROCEDURE Check-Dup-Career($emplid,#empl_rcd,$test_dt,$name,$effdt,$empl_rcd,:$Fault)

Let $sql-statement = 'FPCKFLT.SQC, Career,Select,PS_FPAEECAREER'
BEGIN-SELECT On-Error=SQL-Error

V.EMPLID

        do Get_Field_Information($ReportID, 'ERROR5', $Descr, #DW)  ! MSG = Duplicate key in Career
        Do Print-Fault ($Emplid,$Name,$Empl_rcd,$Effdt,$Descr)
        Let $Fault = 'Y'

from PS_FPAEECAREER V

Where V.EMPLID = $Emplid
and V.EMPL_RCD = #Empl_rcd
and V.EFFSEQ = 0
and V.EFFDT = {DATEIN-PREFIX}$test_dt{DATEIN-SUFFIX}

END-SELECT

END-PROCEDURE Check-Dup-Career



!***************************************************************
!
!   Function    : Check-Dup-Notif
!
!   Description : Verify notification Dups
!
!***************************************************************
BEGIN-PROCEDURE Check-Dup-Notif($emplid,#empl_rcd,$ColDecIncr,$name,$effdt,
                                    $empl_rcd,:$Fault)

let $sql-statement = 'FPCKFLT.SQC, Check-Dup-Salary,Select,PS_FPAEESALARY'
BEGIN-SELECT On-Error=SQL-Error

X.EMPLID

        do Get_Field_Information($ReportID, 'ERROR6', $Descr, #DW)  ! MSG = Duplicate key in Order
        Do Print-Fault ($Emplid,$Name,$Empl_rcd,$Effdt,$Descr)
        Let $Fault = 'Y'

from PS_FPAEENOTICE X

Where X.EMPLID = $Emplid
and X.EMPL_RCD = #Empl_rcd
and X.FP_NOTIF_REF = $ColDecIncr
and X.FP_RETURN_R = ' '

END-SELECT

END-PROCEDURE Check-Dup-Notif



!***************************************************************
!
!   Function    : Print-Fault
!
!   Description : Print Faults
!
!***************************************************************
BEGIN-PROCEDURE Print-Fault ($Emplid,$Name,$Empl_rcd,$Effdt,$Descr)

print $Emplid           (+1,1)
print $Name             (,13)
print $Empl_rcd         (,50)
print $Effdt            (,62)
print $Descr            (,79)

END-PROCEDURE Print-Fault



!***************************************************************
!
!   Function    : String-Replace
!
!   Description : Remove and replace a given string with another
!                 given string into a given string
!
!       INPUT   : $Strg_In      --> Main string before the substitution
!                 $From_Strg    --> Remove and replace by $To_Strg
!                 $To_Strg
!       OUTPUT  : $Strg_Out     --> Main string after the substitution
!
!***************************************************************
BEGIN-PROCEDURE String-Replace ($Strg_In,$From_Strg,$To_Strg,:$Strg_Out)

let $l_Strg_In      = ltrim(rtrim($Strg_In,' '),' ')
let $l_From_Strg    = ltrim(rtrim($From_Strg,' '),' ')
let $l_To_Strg      = ltrim(rtrim($To_Strg,' '),' ')

if $l_Strg_In <> '' and $l_From_Strg <> '' and $l_To_Strg <> ''

    find $l_From_Strg in $l_Strg_In 0 #loc
    Let #Strg_In_Lgth = length($l_Strg_In)
    let #From_Strg_Lgth = length($l_From_Strg)

    let $Strg_Out =    substr($l_Strg_In, #loc, #Strg_In_Lgth - #loc)
                    || $l_To_Strg
                    || substr($l_Strg_In, #loc + #From_Strg_Lgth, #Strg_In_Lgth)

else

    let $Strg_Out = $Strg_In

end-if

END-PROCEDURE String-Replace
