!***********************************************************************
!   TL001:  Time & Labor Payable Status Report                         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/06:04:38:15                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !Printer and page-size initialization, SETUP31 and
                        !  SETUP32 SQCs to support HTML, HP PCL, PostScript,
                        !  PDF and Window in addition to Line Printer as
                        !  the output type.


!***********************************************************************
!                                                                      *
! begin-report                                                         *                                                          *
!                                                                      *
! Called By: N/A                                                       *
! Calls:     Init-Processing                                           *
!            Get-Values                                                *
!            Process-Main                                              *
!            Print-GrandTotal                                          *
!            Reset                                                     *
!            End-Report                                                *
!                                                                      *
!***********************************************************************

begin-report


#ifdef debugy
        show 'INIT-PROCESSING'
#end-if
        do Init-Processing


#ifdef debugy
        show 'GET-VALUES'
#end-if
        do Get-Values


#ifdef debugy
        show 'PROCESS-MAIN'
#end-if
        do Process-Main


#ifdef debugy
        show 'PRINT-GRANDTOTAL'
#end-if
        do Print-GrandTotal


#ifdef debugy
        show 'RESET'
#end-if
        do Reset                        ! called from reset1.sqc


#ifdef debugy
        show 'END-REPORT'
#end-if

        do Update-Prcs-Run-Status       ! called from prcsapi.sqc to update 
                                        ! the Process Monitor to Success
        
end-report




!***************************
begin-heading 7
!***************************

#include 'stdhdgtr.sqc'

#ifdef debugy
        show 'BEGIN-HEADING'
#end-if


!***********************************************************************
!                                                                      *
! Print column definitions.  Some fields are lined up vertically with  *
!   other fields on the report.  The first occurence of a column       *
!   location is defined.  After that, fields that occur in the same    *
!   column use the first field's column definition.  Field labels end  *
!   in _lbl.  Other column definitions are for the field values.       *
!                                                                      *
!***********************************************************************


    
    #define Col_EmpName  1
    #define Col_EMPLID   25
    #define Col_RecNum   37
    #define Col_DUR      49
    #define Col_Status   66
    #define Col_ReasonCD 89
    #define Col_TRC      114
    #define Col_Descr    125
    #define Col_Type     155
    #define Col_Qty      163
    
    
   
    
    
    
   


!***********************************************************************
!                                                                      *
! Time and Labor report header information.                            *
!                                                                      *
!***********************************************************************


   !***********************************************************************
!                                                                      *
! Time and Labor report header information.                            *
!                                                                      *
!***********************************************************************


   print $FOR_THE_PERIOD        (-1,{Col_EmpName})
   print ': '                   (,+1)
   print $HdgFromDt             (,+2)
   print $THROUGH               (,+2)
   print $HdgThruDt             (,+2)
   print $STATUS_SELECTED       (+1,{Col_EmpName})
   print ':  '                  (,+2)

   if #NoRowsFound > 0
        print $PayableStatusList (,+1)
   else
        print $NONE             (,+1)
   end-if


   print $EMPLOYEE              (+2,{Col_EMPLID})
   print $EMPLOYEE              (,{Col_RecNum})
   print $DATE_UNDER_REPORT1    (,{Col_DUR})
   print $PAYABLE               (,{Col_Status})
   print $REASON_CD             (,{Col_ReasonCD}) 
   print $TIME_RPTG_CODE1       (,{Col_TRC})
   print $PAYSTAT_TRC           (,{Col_Descr})
   print $PAYSTAT_TRC           (,{Col_Type})
   

   
   print $EMPLOYEE_NAME         (+1,{Col_EmpName})
   print $ID                    (,{Col_EMPLID})
   print $RECORD#               (,{Col_RecNum})
   print $DATE_UNDER_REPORT2    (,{Col_DUR})
   print $STATUS                (,{Col_Status})
   print $TIME_RPTG_CODE2       (,{Col_ReasonCD}) 
   print $TIME_RPTG_CODE2       (,{Col_TRC})
   print $DESCR                 (,{Col_Descr})
   print $TYPE                  (,{Col_Type})
   print $QUANTITY              (,{Col_Qty})
   
    
   


   
   graphic (, {Col_EmpName}, 15)    horz-line
   graphic (, {Col_EMPLID}, 8)      horz-line
   graphic (, {Col_RecNum}, 8)      horz-line
   graphic (, {Col_DUR}, 11)        horz-line
   graphic (, {Col_Status}, 15)     horz-line
   graphic (, {Col_ReasonCD}, 15)   horz-line
   graphic (, {Col_TRC}, 8)         horz-line
   graphic (, {Col_Descr}, 22)      horz-line
   graphic (, {Col_Type}, 7)        horz-line
   graphic (, {Col_Qty}, 15)        horz-line
   


   

end-heading


!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Define-Prcs-Vars        - prcsapi.sqc (prcsdef.sqc)    *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Init-Report                                            *
!               Init-Number             - number.sqc                   *
!               Get-Language-Codes      - prcslng.sqc                  *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing



#ifdef debugy
        show 'INIT-DATETIME'
#end-if
        do Init-Datetime                ! called from datetime.sqc


#ifdef debugy
        show 'GET-CURRENT-DATETIME'
#end-if
        do Get-Current-Datetime         ! called from prcsapi.sqc (curdttim.sqc)


#ifdef debugy
        show 'DEFINE-PRCS-VARS'
#end-if
        do Define-Prcs-Vars             ! called from prcsapi.sqc (prcsdef.sqc)


#ifdef debugy
        show 'GET-RUN-CONTROL-PARMS'
#end-if
        do Get-Run-Control-Parms        ! In prcsapi.sqc


#ifdef debugy
        show 'INIT-REPORT'
#end-if
        do Init-Report


#ifdef debugy
        show 'INIT-NUMBER'
#end-if
        do Init-Number                  ! called from number.sqc


#ifdef debugy
        show 'GET-LANGUAGE-CODES'
#end-if
        do Get-Language-Codes           ! called from prcslng.sqc


end-procedure !Init-Processing


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By: Init-Processing                                           *
! Calls:     Init_Report_Translation    -   sqrtrans.sqc               *
!            Append_Report_Translation  -   sqrtrans.sqc               *
!            Get_Field_Information                                     *
!            Format-DateTime                                           *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header, date formatting, time           *
!               formatting, translations & strings tables retrievals.  *
!                                                                      *
!***********************************************************************

begin-procedure Init-Report


!***********************************************************************
!                                                                      *
! Translations procedures & Strings Table retrievals.                  *
!                                                                      *
!***********************************************************************


    do Init_Report_Translation ($ReportID,$curr_language_cd)
    do Append_Report_Translation ('TLMAIN')

   do Get_Field_Information ('TLMAIN','EMPLOYEE',            $EMPLOYEE,             #DW)
   do Get_Field_Information ('TLMAIN','EMPLOYEE_NAME',       $EMPLOYEE_NAME,        #DW)
   do Get_Field_Information ('TLMAIN','ID',                  $ID,                   #DW)
   do Get_Field_Information ('TLMAIN','RECORD#',             $RECORD#,              #DW)
   do Get_Field_Information ('TLMAIN','DATE_UNDER_REPORT1',  $DATE_UNDER_REPORT1,   #DW)
   do Get_Field_Information ('TLMAIN','DATE_UNDER_REPORT2',  $DATE_UNDER_REPORT2,   #DW)
   do Get_Field_Information ('TLMAIN','PAYABLE',             $PAYABLE,              #DW)
   do Get_Field_Information ('TLMAIN','STATUS',              $STATUS,               #DW)
   do Get_Field_Information ('TLMAIN','REASON_CD',           $REASON_CD,            #DW)
   do Get_Field_Information ('TLMAIN','TIME_RPTG_CODE1',     $TIME_RPTG_CODE1,      #DW)
   do Get_Field_Information ('TLMAIN','TIME_RPTG_CODE2',     $TIME_RPTG_CODE2,      #DW)
   do Get_Field_Information ('TLMAIN','PAYSTAT_TRC',         $PAYSTAT_TRC,          #DW)
   do Get_Field_Information ('TLMAIN','DAY1',                $DAY1,                 #DW)
   do Get_Field_Information ('TLMAIN','TYPE',                $TYPE,                 #DW)
   do Get_Field_Information ('TLMAIN','QUANTITY',            $QUANTITY,             #DW)
   do Get_Field_Information ('TLMAIN','DESCR',               $DESCR,                #DW)
   do Get_Field_Information ('TLMAIN','FOR_THE_PERIOD',      $FOR_THE_PERIOD,       #DW)
   do Get_Field_Information ('TLMAIN','NO_RUNCTL_SELECTED',  $NO_RUNCTL_SELECTED,   #DW)
   do Get_Field_Information ('TLMAIN','THROUGH',             $THROUGH,              #DW)
   do Get_Field_Information ('TLMAIN','STATUS_SELECTED',     $STATUS_SELECTED,      #DW)
   do Get_Field_Information ('TLMAIN','NONE',                $NONE,                 #DW)
   do Get_Field_Information ('TLMAIN','COUNT_FOR_PAY_STAT',  $COUNT_FOR_PAY_STAT,   #DW)
   do Get_Field_Information ('TLMAIN','APPROVED',            $APPROVED,             #DW)
   let $approved_str = $APPROVED
   do Get_Field_Information ('TLMAIN','CLOSED',              $CLOSED,               #DW)
   let $closed_str = $CLOSED
   do Get_Field_Information ('TLMAIN','DILUTED',             $DILUTED,              #DW)
   let $diluted_str = $DILUTED
   do Get_Field_Information ('TLMAIN','ESTIMATED',           $ESTIMATED,            #DW)
   let $estimated_str = $ESTIMATED
   do Get_Field_Information ('TLMAIN','NEEDS_APPROVAL',      $NEEDS_APPROVAL,       #DW)
   do Get_Field_Information ('TLMAIN','PAID',                $PAID,                 #DW)
   let $paid_str = $PAID
   do Get_Field_Information ('TLMAIN','REJECTED',            $REJECTED,             #DW)
   let $rejected_str = $REJECTED
   do Get_Field_Information ('TLMAIN','SENT_TO_PR',          $SENT_TO_PR,           #DW)
   do Get_Field_Information ('TLMAIN','TAKEN_BY_PR',         $TAKEN_BY_PR,          #DW)
   do Get_Field_Information ('TLMAIN','ONLINE_EST',          $ONLINE_EST,           #DW)
   do Get_Field_Information ('TLMAIN','NO_PAY',              $NO_PAY,               #DW)
   do Get_Field_Information ('TLMAIN','IGNORE',              $IGNORE,               #DW)
   do Get_Field_Information ('TLMAIN','REVERSAL',            $REVERSAL,             #DW)
   do Get_Field_Information ('TLMAIN','REPORT_SUMMARY',      $REPORT_SUMMARY,       #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_AP_COUNT',   $PAY_STAT_AP_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_CL_COUNT',   $PAY_STAT_CL_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_DL_COUNT',   $PAY_STAT_DL_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_ES_COUNT',   $PAY_STAT_ES_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_NA_COUNT',   $PAY_STAT_NA_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_PD_COUNT',   $PAY_STAT_PD_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_RP_COUNT',   $PAY_STAT_RP_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_SP_COUNT',   $PAY_STAT_SP_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_TP_COUNT',   $PAY_STAT_TP_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_OE_COUNT',   $PAY_STAT_OE_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_NP_COUNT',   $PAY_STAT_NP_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_IG_COUNT',   $PAY_STAT_IG_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_RV_COUNT',   $PAY_STAT_RV_COUNT,    #DW)
   do Get_Field_Information ('TLMAIN','TOT_COUNT_FOR_RPT',   $TOT_COUNT_FOR_RPT,    #DW)
   do Get_Field_Information ('TLMAIN','PAY_STAT_RPT',        $PAY_STAT_RPT,         #DW)



!***********************************************************************
!                                                                      *
! Report variables.                                                    *
!                                                                      *
!***********************************************************************


    let $ReportID       = 'TL001'
    let $ReportTitle    = $PAY_STAT_RPT
    let $Records_Found  = 'N'
    let #PayStatCounter = 0
    let #GrandTotal     = 0
    let #SummCounter    = 0
    let #ApprovedCount  = 0
    let #ClosedCount    = 0
    let #DilutedCount   = 0
    let #EstimatedCount = 0
    let #NeedsApprCount = 0
    let #PaidCount      = 0
    let #RejectedCount  = 0
    let #SentToPRCount  = 0
    let #OnlineEstCount = 0
    let #NoPayCount     = 0
    let #IgnoreCount    = 0
    let #ReversalCount  = 0
    let #TakenCount     = 0
    let #Maxlines       = 55                  ! # rows on a page, used for page breaking
    let #Data_Found     = 0


!***********************************************************************
!                                                                      *
! Dates:   All of Europe uses date format DD/MM/YYYY                   *
!          The US uses date format of MM/DD/YYYY                       *
!                                                                      *
! Numbers: The U.S. and the U.K. use NN,NNN.NN                         *
!          The rest of Europe uses NN.NNN,NN                           *
!                                                                      *
!***********************************************************************

    if $curr_language_cd      = 'ENG'
        let $ReportDateType   = '0'             ! resolved in datetime.sqc
    else
        let $ReportDateType   = '1'
    end-if

    if $curr_language_cd = 'ENG' or $curr_language_cd = 'INE'
        let $ReportSDecimal   = '.'
        let $ReportSThousand  = ','
    else
        let $ReportSDecimal   = ','             ! resolved in number.sqc
        let $ReportSThousand  = '.'             ! resolved in number.sqc
    end-if


!***********************************************************************
!                                                                      *
! Initialize date formatting.                                          *
!                                                                      *
!***********************************************************************

    let $Date_Init = '1900-01-01 00:00:00.000'
    
    #ifdef ORACLE
           let $Date_Init = '01-NOV-1999'
    #end-if

    do Format-DateTime($Date_Init, $out999, {DEFDATE}, '', '')



end-procedure !Init-Report


!***********************************************************************
!                                                                      *
! Get-Values                                                           *
!                                                                      *
!                                                                      *
! Called By: begin-report                                              *
! Calls:     Ask-Values         -   this program                       *
!            Select-Parameters  -   tlrnctl1.sqc                       *
!                                                                      *
! Description:  If process instance blank, prompt user for input       *
!               If populated, get values from run control              *
!               Format dates to print in header                        *
!                                                                      *
!***********************************************************************

begin-procedure Get-Values


#ifdef debugy
    show 'IN PROCEDURE GET-VALUES'
#end-if


    if $prcs_process_instance = ''
        do Ask-Values
    else
        do Select-Parameters
    end-if


#ifdef debugz
    display 'FromDate from run control:             ' noline
    display $FromDate
    display 'ThruDate from run control:             ' noline
    display $ThruDate
    display 'Payable Status List from run control:  ' noline
    display $PayableStatusList
#end-if


    do Format-DateTime($FromDate,$HdgFromDt,{DEFDATE}, '', '')
    do Format-DateTime($ThruDate,$HdgThruDt,{DEFDATE}, '', '')


#ifdef debugz
    display 'FromDate to print in header:      ' noline
    display $HdgFromDt
    display 'ThruDate to print in header:      ' noline
    display $HdgThruDt
#end-if


end-procedure !Get-Values


!***********************************************************************
!                                                                      *
! Ask-Values                                                           *
!                                                                      *
!                                                                      *
! Called By: Get-Values                                                *
! Calls:     none                                                      *
!                                                                      *
! Description: Prompt user to input values                             *
!                                                                      *
!***********************************************************************

begin-procedure Ask-Values


#ifdef debugy
    show 'IN PROCEDURE ASK-VALUES'
#end-if


    input $FromDate          'Enter from date (format 01-01-1998)'                 TYPE=date  maxlen=11
    input $ThruDate          'Enter through date (format 01-02-1998)'              TYPE=date  maxlen=11
    input $PayableStatusList 'Enter one payable status translate value (eg. AP)'   TYPE=char  maxlen=2


end-procedure !Ask-Values


!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By: begin-report                                              *
! Calls:     Read-Translate-Table                                      *
!            Format-DateTime                                           *
!            Print-Output                                              *
!            Get-TRC-Rel-Lang                                          *
!                                                                      *
! Description:  Select rows where payable status in requested list.    *
!               $PayableStatusList value set in tlrnctl1.sqc.          *
!               Advance counter to track # of rows per payable status. *
!               Format date under report to MM/DD/YYYY.                *
!               Get xlatshort value for TRC_TYPE.                      *
!               Set flag to determine if payable status changed.       *
!               Retrieve TRC description from related language table   *
!               when appropriate.                                      *
!                                                                      *
!***********************************************************************

begin-procedure Process-Main


#ifdef debugy
    show 'IN PROCEDURE PROCESS-MAIN'
#end-if


if #NoRowsFound > 0                             ! If run control criteria selected, run
                                                !     Main Select.  From tlrnctl1.sqc

begin-SELECT


#ifdef debugz
    show 'IN MAIN SELECT STATEMENT'
#end-if


A.EMPLID
A.EMPL_RCD
A.DUR                   &DUR
A.TRC                   &RPTD_TRC
A.TL_QUANTITY
A.PAYABLE_STATUS        
B.EFFDT
B.DESCR                 &TRC_DESCR
B.TRC_TYPE              &TRC_TYPE
C.NAME
A.TL_PYBL_REASON_CD     &TL_PYBL_REASON_CD


    let #PayStatCounter = #PayStatCounter + 1   ! Counts rows per payable status
                                                !    Used in Print-Totals1


    


    let $FieldName  = 'TL_PYBL_REASON_CD'       ! Input into Read-Translate-Table
    let $FieldValue = &TL_PYBL_REASON_CD        ! Input into Read-Translate-Table
    do Read-Translate-Table                     ! Returns XlatShortName, XlatLongName
    let $TL_PYBL_REASON_CD =      $XlatLongName

    let $FieldName  = 'TRC_TYPE'                ! Input into Read-Translate-Table
    let $FieldValue = &TRC_TYPE                 ! Input into Read-Translate-Table
    do Read-Translate-Table                     ! Returns XlatShortName, XlatLongName
    let $TRC_Type =      $XlatShortName

    do Format-DateTime(&DUR, $out, {DEFDATE}, '', '')


    let $TRC_Descr = rtrim(&TRC_DESCR,' ')


     if $curr_language_cd <> $Psoptions_Language_Cd
        do Get-TRC-Rel-Lang
     end-if


    let $Emplid =        &A.EMPLID
    let $EmplRecNum =    &A.EMPL_RCD
    let $DUR =           $out
    let $TRC =           &RPTD_TRC
    let $Qty =           &A.TL_QUANTITY
    let $PayableStatus = &A.PAYABLE_STATUS
    let $Name =          rtrim(&C.NAME,' ')
    
    let #Data_Found = 1
    do Print-Output

    let $Prev_PayStat = rtrim($PayableStatus,' ')   ! Used in Print-Output to determine
                                                    !    when to print totals @ payable status chg.    

    FROM PS_TL_PAYABLE_TIME A,
         PS_TL_TRC_TBL B,
         PS_PERSON_NAME C,
         PS_TL_TIMECARD_RPT D
    WHERE A.DUR              BETWEEN $FromDate AND $ThruDate
        AND A.PAYABLE_STATUS IN ([$PayableStatusList])
        AND A.TRC                = B.TRC
        AND A.EMPLID             = D.EMPLID
        AND C.EMPLID             = D.EMPLID
        AND A.EMPL_RCD           = D.EMPL_RCD
        AND D.PROCESS_INSTANCE   = #Process_Instance
        AND B.EFFDT          = (SELECT MAX(EFFDT) FROM PS_TL_TRC_TBL
                                   WHERE TRC      = A.TRC
                                       AND EFFDT <= $ThruDate)
   ORDER BY A.PAYABLE_STATUS, A.EMPLID ASC, A.EMPL_RCD ASC, A.DUR


end-SELECT


else
    print $NO_RUNCTL_SELECTED     (+1,{Col_RecNum})
    print '.'                     (,)
end-if

  do Delete-Rows
end-procedure !Process-Main

!***********************************************************************
!                                                                      *
! Delete-Rows                                                          *
!                                                                      *
! Called By: Main                                                      *
! Calls:     none                                                      *
!                                                                      *
! Description:  Deletes rows used by the current process instance for  *
!               cleaning up purposes.                                  *
!                                                                      *
!***********************************************************************


begin-procedure Delete-Rows

#ifdef debugy
    show 'IN PROCEDURE Delete-Rows'
#end-if

#ifdef debugy
    show 'Process_Instance     ' noline
    show  #Process_Instance
#end-if

begin-SQL

DELETE FROM PS_TL_TIMECARD_RPT
WHERE PROCESS_INSTANCE = #Process_Instance

end-SQL

end-procedure Delete-Rows

!***********************************************************************
!                                                                      *
! Get-TRC-Rel-Lang                                                     *
!                                                                      *
!                                                                      *
! Called By: Process-Main                                              *
! Calls:     none                                                      *
!                                                                      *
! Description:  Gets related language description for TRC.             *
!                                                                      *
!***********************************************************************


begin-procedure Get-TRC-Rel-Lang


begin-SELECT


A.TRC
A.DESCR         &TRC_DESCR_LANG


    let $TRC_Descr =        rtrim(&TRC_DESCR_LANG,' ')


    FROM PS_TL_TRC_LANG A
    WHERE A.TRC           = &RPTD_TRC
        AND A.LANGUAGE_CD = $curr_language_cd
        AND A.EFFDT       = (SELECT MAX(EFFDT) FROM PS_TL_TRC_LANG
                                WHERE TRC           = &RPTD_TRC
                                    AND LANGUAGE_CD = $curr_language_cd
                                    AND EFFDT      <= $ThruDate)



end-SELECT


end-procedure ! Get-TRC-Rel-Lang


!***********************************************************************
!                                                                      *
! Print-Output                                                         *
!                                                                      *
!                                                                      *
! Called By: Process-Main                                              *
! Calls:     Print-Totals1                                             *
!                                                                      *
! Description:  Prints rows from main select statment                  *
!               If change in payable status, print totals for old      *
!                   payable status before printing current row         *
!               If change in payable status, start new page            *
!                                                                      *
!***********************************************************************

begin-procedure Print-Output

    if #NotFirstLine = 1                      ! Print only on change in payayable status,
        if $PayableStatus <> $Prev_PayStat    !     not first time through procedure.
            do Print-Totals1
        end-if
    end-if


    if #current-line + 3 > #Maxlines
        new-page
    end-if


    let #NotFirstLine = 1                     ! Indicates not first time through procedure


    if #NewPageVar = 1                        ! New page after payable status change,
        new-page                              !    value set to 1 in Print-Totals1
        let #NewPageVar = 0
    end-if

    
    print $Name           (+1,{Col_EmpName})    
    print $Emplid         (,{Col_EMPLID})
    print $EmplRecNum     (,{COL_RECNUM}) edit 9
    print $out            (,{Col_DUR})
    print $TL_PYBL_REASON_CD      (,{Col_ReasonCD})
    print $TRC            (,{Col_TRC})
    print $Descr2         (,{Col_Descr})
    print $TRC_Type       (,{Col_Type})
    print $TRC_Descr      (,{Col_Descr})
    print $Qty            (,{Col_Qty})    edit 999999999999.999999

    evaluate $PayableStatus
        when = 'AP'
            print $approved_str      (,{Col_Status})
        when = 'CL'
            print $closed_str        (,{Col_Status})
        when = 'DL'
            print $diluted_str       (,{Col_Status})
        when = 'ES'
            print $estimated_str     (,{Col_Status})
        when = 'NA'
            print $NEEDS_APPROVAL    (,{Col_Status})
        when = 'PD'
            print $paid_str          (,{Col_Status})
        when = 'RP'
            print $rejected_str      (,{Col_Status})
        when = 'SP'
            print $SENT_TO_PR        (,{Col_Status})
        when = 'TP'
            print $TAKEN_BY_PR       (,{Col_Status})
        when = 'OE'
            print $ONLINE_EST        (,{Col_Status})
        when = 'NP'
            print $NO_PAY            (,{Col_Status})
        when = 'IG'
            print $IGNORE            (,{Col_Status})
        when = 'RV'
            print $REVERSAL          (,{Col_Status})
    end-evaluate

end-procedure


!***********************************************************************
!                                                                      *
! Print-Totals1                                                        *
!                                                                      *
!                                                                      *
! Called By: Print-Output                                              *
!            Print-GrandTotal                                          *
! Calls:     none                                                      *
!                                                                      *
! Description:  Print row count for payable status.                    *
!               Set variable to indicate new page needed               *
!               Reset counter for next payable status                  *
!                                                                      *
!***********************************************************************

begin-procedure Print-Totals1


if #NoRowsFound > 0 and #Data_Found = 1

    evaluate $Prev_PayStat
        when = 'AP'
            print $approved_str      (+3,{Col_DUR})           
        when = 'CL'
            print $closed_str        (+3,{Col_DUR})  
        when = 'DL'
            print $diluted_str       (+3,{Col_DUR})  
        when = 'ES'
            print $estimated_str     (+3,{Col_DUR})  
        when = 'NA'
            print $NEEDS_APPROVAL    (+3,{Col_DUR})  
        when = 'PD'
            print $paid_str          (+3,{Col_DUR})  
        when = 'RP'
            print $rejected_str      (+3,{Col_DUR})  
        when = 'SP'
            print $SENT_TO_PR        (+3,{Col_DUR})  
        when = 'TP'
            print $TAKEN_BY_PR       (+3,{Col_DUR})  
        when = 'OE'
            print $ONLINE_EST        (+3,{Col_DUR})  
        when = 'NP'
            print $NO_PAY            (+3,{Col_DUR})  
        when = 'IG'
            print $IGNORE            (+3,{Col_DUR})
        when = 'RV'
            print $REVERSAL          (+3,{Col_DUR})  
    end-evaluate

    print $COUNT_FOR_PAY_STAT        (,+4)
    print ': '               (,)


    if $PayableStatus <> $Prev_PayStat
        let #PayStatCounter = #PayStatCounter - 1
        print #PayStatCounter           (,+6)   edit 999999999
    else
        print #PayStatCounter           (,+6)   edit 999999999
    end-if


        if $Prev_PayStat = 'AP'                             ! Payable status specific counter
                let $Approved1     = $Prev_PayStat          !   for use in report summary in
                let #ApprovedCount = #PayStatCounter        !   Print-GrandTotal.
        end-if


        if $Prev_PayStat = 'CL'
                let $Closed1     = $Prev_PayStat
                let #ClosedCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'DL'
                let $Diluted1     = $Prev_PayStat
                let #DilutedCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'ES'
                let $Estimated1     = $Prev_PayStat
                let #EstimatedCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'NA'
                let $NeedsAppr1     = $Prev_PayStat
                let #NeedsApprCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'PD'
                let $Paid1     = $Prev_PayStat
                let #PaidCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'RP'
                let $Rejected1     = $Prev_PayStat
                let #RejectedCount = #PayStatCounter
        end-if


        if $Prev_PayStat = 'SP'
                let $SentToPRCount1 = $Prev_PayStat
                let #SentToPRCount  = #PayStatCounter
        end-if


        if $Prev_PayStat = 'TP'
                let $TakenCount1 = $Prev_PayStat
                let #TakenCount  = #PayStatCounter
        end-if


        if $Prev_PayStat = 'OE'
                let $OnlineEstCount1 = $Prev_PayStat
                let #OnlineEstCount  = #PayStatCounter
        end-if


        if $Prev_PayStat = 'NP'
                let $NoPayCount1 = $Prev_PayStat
                let #NoPayCount  = #PayStatCounter
        end-if


        if $Prev_PayStat = 'IG'
                let $IgnoreCount1 = $Prev_PayStat
                let #IgnoreCount  = #PayStatCounter
        end-if

       if $Prev_PayStat = 'RV'
                let $ReversalCount1 = $Prev_PayStat
                let #ReversalCount  = #PayStatCounter
        end-if

    let #NewPageVar = 1
    let #GrandTotal = #GrandTotal + #PayStatCounter


    if $PayableStatus <> $Prev_PayStat
        let #PayStatCounter = 1
    end-if


end-if

end-procedure !Print-Totals1


!***********************************************************************
!                                                                      *
! Print-GrandTotal                                                     *
!                                                                      *
!                                                                      *
! Called By: Process-Main                                              *
! Calls:     none                                                      *
!                                                                      *
! Description:  Print count for last payable status on report.         *
!               Print report summary of all payable statuses selected  *
!                   for the report so if a status has zero rows, a     *
!                   full page is not wasted in the report body.        *
!               Print grand total count for all payable status on rpt. *
!                                                                      *
!***********************************************************************

begin-procedure Print-GrandTotal


    do Print-Totals1                        ! Writes payable status count for last occurrence

    if #current-line + 15 > #Maxlines
        new-page
    end-if

    print $REPORT_SUMMARY       (+3,{Col_RecNum})
    position                    (+1,)


    evaluate #ApprovedCount
        when = 54321                                               ! Selected in run control,
            print $PAY_STAT_AP_COUNT       (+1,{Col_RecNum})       !   but no rows selected in
            print ':  '                    (,)                     !   main select.
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0                                                  ! Selected in run control,
            print $PAY_STAT_AP_COUNT       (+1,{Col_RecNum})       !   and rows found in main
            print ':  '                    (,)                     !   select.
            print #ApprovedCount           (,{Col_TRC}) edit 999999999
            break
        when = 0                                                   ! Not selected in run
            break                                                  !   control.  Initialized
    end-evaluate                                                   !   to zero.


    evaluate #ClosedCount
        when = 54321
            print $PAY_STAT_CL_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999 ! to line up when other
            break                                                  ! payable stats have values
        when <> 0
            print $PAY_STAT_CL_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #ClosedCount             (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #DilutedCount
        when = 54321
            print $PAY_STAT_DL_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_DL_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #DilutedCount            (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate



    evaluate #EstimatedCount
        when = 54321
            print $PAY_STAT_ES_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_ES_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #EstimatedCount          (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #NeedsApprCount
        when = 54321
            print $PAY_STAT_NA_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break

        when <> 0
            print $PAY_STAT_NA_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #NeedsApprCount          (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #PaidCount
        when = 54321
            print $PAY_STAT_PD_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_PD_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #PaidCount               (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #RejectedCount
        when = 54321
            print $PAY_STAT_RP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_RP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #RejectedCount           (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #SentToPRCount
        when = 54321
            print $PAY_STAT_SP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_SP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #SentToPRCount           (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #TakenCount
        when = 54321
            print $PAY_STAT_TP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_TP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #TakenCount              (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #OnlineEstCount
        when = 54321
            print $PAY_STAT_OE_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_OE_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #OnlineEstCount          (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #NoPayCount
        when = 54321
            print $PAY_STAT_NP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_NP_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #NoPayCount              (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate


    evaluate #IgnoreCount
        when = 54321
            print $PAY_STAT_IG_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_IG_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #IgnoreCount             (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate

    evaluate #ReversalCount
        when = 54321
            print $PAY_STAT_RV_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print '0'                      (,{Col_TRC}) edit 999999999
            break
        when <> 0
            print $PAY_STAT_RV_COUNT       (+1,{Col_RecNum})
            print ':  '                    (,)
            print #ReversalCount           (,{Col_TRC}) edit 999999999
            break
        when = 0
            break
    end-evaluate

    print $TOT_COUNT_FOR_RPT            (+3,{Col_RecNum})
            print ':  '                 (,)
    print #GrandTotal                   (,+6) edit 9999999999


end-procedure ! Print-GrandTotal



!***********************************************************************
!                                                                      *
! Additional SQCs included in the report                               *
!                                                                      *
!***********************************************************************

#include 'tlrnctl1.sqc'     !Get run control parameter values, specific to this report
#include 'datetime.sqc'     !Routines for date and time formatting
#include 'datemath.sqc'     !Date conversion procedures
#include 'sqrtrans.sqc'     !Translate SQR strings to given language
#include 'prcsapi.sqc'      !Replaces stdapi.sqc
#include 'prcslng.sqc'      !Replaces getrplng.sqc
#include 'readxlat.sqc'     !Procedure to read values from xlattable
#include 'reset1.sqc'        !Reset printer procedure
#include 'number.sqc'       !Routines to format numbers
