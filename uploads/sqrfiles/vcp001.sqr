!*********************************************
!  VCP001:  Group Member Overlap Report      *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:57:29                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define NBGRP 10
#define C01    1
#define C011  16
#define C02   32
#define C021  48
#define C03   64
#define C04   84
#define C05   114
#define C06   134
#define C07   144
#define C08       165

!************************************************************************
! Report Section
!************************************************************************

begin-program

   display 'Start of VCP001.SQR '
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Term
   do Init-Report
   do Process-Main
   do Reset
   display 'End of VCP001.SQR'
   do Stdapi-Term
end-program

!************************************************************************
! Procedure Init-Report
!************************************************************************

begin-procedure Init-Report

  move 'VCP001' to $ReportID

  let $language_cd = $CURR_LANGUAGE_CD
  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)
  do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

  If $ReportTitle = ''
     let $ReportTitle = 'Tree Member Overlap'
  end-if

  display ' '
  display $ReportTitle
  display ' '

  do Stdapi-Init

  if $prcs_process_instance = ''
        !No Prompt
  else
                do select-parameters
  end-if

  do Init_Printer

end-procedure

!************************************************************************
! Section Heading
!************************************************************************

begin-heading 10
#Include 'stdhdg01.sqc'

print $TREE_NAME_LBL                     (+1,{C01},30)
print $ASOFDATE_LBL                              (,{C02})

let #myindix = 0
while #myindix < #nbcount
          let #myindix = #myindix + 1
          get $TREE_NAME $ASOFDATE from grouptab(#myindix)
          print $TREE_NAME                 (+1, {C01},30)
      do Format-DateTime($ASOFDATE, $ASOFDATE, {DEFMDY},'','')
          print $ASOFDATE                  (,{C02})
end-while

print $GB_GROUP_ID1_LBL            (+2,{C01},14)
print $GB_EFFDT1_LBL               (,{C011},15)
print $GB_GROUP_ID2_LBL            (,{C02},15)
print $GB_EFFDT2_LBL               (,{C021},15)
print $EMPLID_LBL                          (,{C03},19)
print $NAME_LBL                            (,{C04},29)
print $EMPL_RCD_LBL                        (,{C05},19)
print $JOBCODE_LBL                         (,{C06},9)
print $JOBDESCR_LBL                        (,{C07})

end-heading

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
#ifdef debugx
           display 'Entering VCP001.SQR: Get-Values'
#end-if
#ifdef debugx
           display 'Exiting VCP001.SQR: Get-Values'
#end-if
end-procedure

!************************************************************************
! Procedure Main
!************************************************************************

begin-procedure Process-Main

        do Get-Translat-Info     ! Global

        CREATE-ARRAY name=grouptab size={NBGRP}
           field=tree_name:char
           field=asofdate:date

        do Retrieve-Groups
        do Treat-Groups-2-By-2

end-procedure

!***********************************************************************
!  Execute all member groups
!***********************************************************************

begin-procedure Retrieve-Groups
#ifdef debugx
  display 'Entering VCP001.SQR: Retrieve-Groups'
  show '$prcs_oprid ' $prcs_oprid
  show '$prcs_run_cntl_id ' $prcs_run_cntl_id
#end-if

begin-SELECT ON-ERROR=SQL-Error
RUN_CNTL_VCP001.TREE_NAME                                                                                       &RUN_CNTL_VCP001.TREE_NAME
RUN_CNTL_VCP001.ASOFDATE       &RUN_CNTL_VCP001.ASOFDATE

  move &RUN_CNTL_VCP001.TREE_NAME to $TREE_NAME
  move &RUN_CNTL_VCP001.ASOFDATE  to $ASOFDATE

  let #num = #num + 1
  let #nbcount = #num

  if #nbcount <= {NBGRP}
         put $TREE_NAME $ASOFDATE into grouptab(#num)
  end-if

FROM PS_RUN_CNTL_VCP001 RUN_CNTL_VCP001
WHERE RUN_CNTL_VCP001.OPRID = $prcs_oprid
  AND RUN_CNTL_VCP001.RUN_CNTL_ID = $prcs_run_cntl_id
end-Select

#ifdef debugx
           display 'Exiting VCP001.SQR: Retrieve-Groups'
#end-if
end-procedure

!***********************************************************************
!  Print Groups Overlap
!***********************************************************************

begin-procedure Print-Overlap
#ifdef debugx
           display 'Entering VCP001.SQR: Print-Overlap'
   show '$prcs_run_cntl_id ' $prcs_run_cntl_id
   show '$prcs_oprid '       $prcs_oprid
   show '&GB.GB_GROUP_ID '   &GB.GB_GROUP_ID
   show '&GB.GB_EFFDT '      &GB.GB_EFFDT
   show '&GBA.GB_GROUP_ID '  &GBA.GB_GROUP_ID
   show '&GBA.GB_EFFDT '     &GBA.GB_EFFDT
#end-if

  let #FND_CNT = 0

begin-SELECT DISTINCT ON-ERROR=SQL-Error
A.EMPLID
A.NAME
A.EMPL_RCD
A.JOBCODE
A.DESCR
        let #FND_CNT = 1
        let $EMPLID   = &A.EMPLID
        let $NAME     = &A.NAME
        let #EMPL_RCD = &A.EMPL_RCD
        let $JOBCODE  = &A.JOBCODE
        let $JOBDESCR = &A.DESCR

        print $GB_GB_GROUP_ID           (+1,{C01},15)
        print $GB_GB_EFFDT              (,{C011},16)
        print $GBA_GB_GROUP_ID          (,{C02},16)
        print $GBA_GB_EFFDT             (,{C021},16)
        print $EMPLID                   (,{C03},19)
        print $NAME                     (,{C04},29)
        print #EMPL_RCD                 (,{C05},19)        EDIT 999999
        print $JOBCODE                  (,{C06},9)
        print $JOBDESCR                 (,{C07})

from PS_VC_GRP_RES_VW A,
     PS_VC_RUN_VCP001 B
where B.RUN_CNTL_ID = $prcs_run_cntl_id
and B.OPRID         = $prcs_oprid
and B.GB_GROUP_ID   = &GB.GB_GROUP_ID
and B.GB_EFFDT      = &GB.GB_EFFDT
and A.GB_GROUP_ID   = B.GB_GROUP_ID
and A.VERSIONGBQDM  = B.VERSIONGBQDM
and exists
(
 select 'X'
 from PS_VC_GRP_RES_TBL G,
      PS_VC_RUN_VCP001 H
 where G.EMPLID     = A.EMPLID
 and G.EMPL_RCD = A.EMPL_RCD
 and G.GB_GROUP_ID  = H.GB_GROUP_ID
 and G.VERSIONGBQDM = H.VERSIONGBQDM
 and H.OPRID        = $prcs_oprid
 and H.RUN_CNTL_ID  = $prcs_run_cntl_id
 and H.GB_GROUP_ID = &GBA.GB_GROUP_ID
 and H.GB_EFFDT = &GBA.GB_EFFDT
)
order by A.EMPLID, A.EMPL_RCD, A.JOBCODE
end-SELECT

    if #FND_CNT <> 0
        print '=' (+1,{C01},#placement_num) fill
    end-if

#ifdef debugx
    display 'Exiting VCP001.SQR: Print-Overlap'
#end-if
end-procedure Print-Overlap

!***********************************************************************
!  Treat Groups 2 by 2
!***********************************************************************

begin-procedure Treat-Groups-2-By-2
#ifdef debugx
           display 'Entering VCP001.SQR: Treat-Groups-2-By-2'
  show '$prcs_oprid ' $prcs_oprid
  show '$prcs_run_cntl_id ' $prcs_run_cntl_id
#end-if

begin-SELECT ON-ERROR=SQL-Error
GB.GB_GROUP_ID
GBA.GB_GROUP_ID
GB.GB_EFFDT
GBA.GB_EFFDT

        let $GBA_GB_GROUP_ID = &GBA.GB_GROUP_ID
        let $GB_GB_GROUP_ID  = &GB.GB_GROUP_ID

    do Format-DateTime(&GB.GB_EFFDT,  $GB_GB_EFFDT,  {DEFMDY},'','')
    do Format-DateTime(&GBA.GB_EFFDT, $GBA_GB_EFFDT, {DEFMDY},'','')

       do Print-Overlap

        let #placement_num = {C08}-{C01}

FROM PS_VC_RUN_VCP001 GB, PS_VC_RUN_VCP001 GBA
WHERE GB.OPRID = $prcs_oprid
  AND GB.RUN_CNTL_ID = $prcs_run_cntl_id
  AND GBA.OPRID = GB.OPRID
  AND GBA.RUN_CNTL_ID = GB.RUN_CNTL_ID
  AND ((GBA.GB_GROUP_ID <> GB.GB_GROUP_ID
  AND GBA.GB_GROUP_ID > GB.GB_GROUP_ID)
  OR (GBA.GB_GROUP_ID = GB.GB_GROUP_ID
  AND GBA.GB_EFFDT <> GB.GB_EFFDT
  AND GBA.GB_EFFDT > GB.GB_EFFDT))
order by GB.GB_GROUP_ID, GBA.GB_GROUP_ID, GB.GB_EFFDT, GBA.GB_EFFDT
end-Select

#ifdef debugx
           display 'Exiting VCP001.SQR: Treat-Groups-2-By-2'
#end-if
end-procedure Treat-Groups-2-By-2

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info
   do Get_Field_Information($ReportID, 'TREE_NAME_LBL'      , $TREE_NAME_LBL     , #DW)
   do Get_Field_Information($ReportID, 'ASOFDATE_LBL'       , $ASOFDATE_LBL      , #DW)
   do Get_Field_Information($ReportID, 'GB_GROUP_ID1_LBL'   , $GB_GROUP_ID1_LBL  , #DW)
   do Get_Field_Information($ReportID, 'GB_EFFDT1_LBL'          , $GB_EFFDT1_LBL         , #DW)
   do Get_Field_Information($ReportID, 'GB_GROUP_ID2_LBL'   , $GB_GROUP_ID2_LBL  , #DW)
   do Get_Field_Information($ReportID, 'GB_EFFDT2_LBL'          , $GB_EFFDT2_LBL         , #DW)
   do Get_Field_Information($ReportID, 'EMPLID_LBL'         , $EMPLID_LBL        , #DW)
   do Get_Field_Information($ReportID, 'NAME_LBL'           , $NAME_LBL          , #DW)
   do Get_Field_Information($ReportID, 'EMPL_RCD_LBL'       , $EMPL_RCD_LBL      , #DW)
   do Get_Field_Information($ReportID, 'JOBCODE_LBL'        , $JOBCODE_LBL       , #DW)
   do Get_Field_Information($ReportID, 'JOBDESCR_LBL'       , $JOBDESCR_LBL      , #DW)
end-procedure Get-Translat-Info

!***************************************************************
!Include SQCs
!***************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date calculation
#include 'hrrnctl1.sqc'  !Get run control parameter values
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
