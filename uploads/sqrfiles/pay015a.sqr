!*******************************************
!  PAY015A:  Check Reconciliation Process  *
!*******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:29:27                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY015A' to $ReportID

  do Init-DateTime
  do Init-Number
!  do Initialization
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  do Initialization        ! Moved down to have language-enabled ReportTitle

  do Payroll-Report-Initialization
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY015A  program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY015A', 'REPORT_TITLE', $Pay015a_ReportTitle,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRLST', $Pay015a_ErrLst,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'TRNST', $Pay015a_Trnst,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ACCNO', $Pay015a_AccNo,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'CHK#', $Pay015a_Chk#,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'AMT', $Pay015a_Amt,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'BANKAMT', $Pay015a_BankAmt,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'CHKDT', $Pay015a_ChkDt,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'FILE', $Pay015a_File,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG', $Pay015a_ErrMsg,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'CHK', $Pay015a_Chk,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'BANK', $Pay015a_Bank,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG1', $Pay015a_ErrMsg1,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG_EXT1', $Pay015a_ErrMsg_Ext1,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG_EXT2', $Pay015a_ErrMsg_Ext2,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG_EXT3', $Pay015a_ErrMsg_Ext3,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG_EXT4', $Pay015a_ErrMsg_Ext4,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG_EXT5', $Pay015a_ErrMsg_Ext5,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSGA', $Pay015a_ErrMsgA,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSGB', $Pay015a_ErrMsgB,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSG2', $Pay015a_ErrMsg2,   #dummy_width)
   do Get_Field_Information ('PAY015A', 'ERRMSGC', $Pay015a_ErrMsgC,   #dummy_width)
end-procedure

begin-heading 6

  #Include 'stdhdgtr.sqc'
  print $Pay015a_ErrLst       (3)    center
  print $Pay015a_Trnst        (+3,1)
  print $Pay015a_AccNo        (0,12)
  print $Pay015a_Chk#         (0,30)
  print $Pay015a_Amt          (0,55)
  print $Pay015a_BankAmt      (0,64)
  print $Pay015a_ChkDt        (0,85)
  print $Pay015a_File         (0,100)
  print $Pay015a_ErrMsg       (0,108)

end-heading


begin-procedure Initialization

begin-SELECT
COUNTRY
FROM PS_INSTALLATION
end-SELECT


    move $Pay015a_ReportTitle         to $ReportTitle
    move $Pay015a_Chk                 to $Chq


begin-SQL on-error=ignore
DELETE FROM PS_R_PAY015
end-SQL

end-procedure


begin-procedure Report

  do Reconcile-Unprocessed-Manuals
  do Process-Bank-File
  do Current-Period-Checks
  do Outstanding-Checks
  do Unprocessed-Manuals

end-procedure


begin-procedure Reconcile-Unprocessed-Manuals

!First, attempt to reconcile any unprocessed manual checks from entries made
!in the Payroll system during recent payroll period(s).
  move 'E'                to $SortFld
  move $SubHeadC          to $SubHead
  move 'UMCF'             to $ReconFile  !Unprocessed Manual Checks

begin-SELECT
A.TRANSIT_NUM,A.ACCOUNT_NUM,A.PAYCHECK_NBR,A.CHECK_DT,A.NET_PAY
B.COMPANY,B.PAYGROUP,B.PAYCHECK_CASHED,B.PAYCHECK_STATUS,B.NET_PAY,B.FORM_ID
B.PAY_SHEET_SRC,B.PAYCHECK_OPTION
B.PAY_END_DT,B.OFF_CYCLE,B.PAGE_NUM,B.LINE_NUM,B.SEPCHK

  move &A.TRANSIT_NUM        to $TRANSIT_NUM
  move &A.ACCOUNT_NUM        to $ACCOUNT_NUM
  move &B.Form_ID         to $Form_ID
  move &A.PAYCHECK_NBR          to #PAYCHECK_NBR
  move &A.Check_Dt        to $CheckDt
  move &A.Net_Pay         to #BankNetPay
  move &B.Company         to $Company
  move &B.PayGroup        to $PayGroup
  move &B.PayCheck_Cashed to $Cashed
  move &B.PayCheck_Status to $Status
  move &B.Net_Pay         to #NetPay
  move &B.Pay_Sheet_Src   to $Pay_Sheet_Src

  move &B.Pay_End_Dt to $Pay_End_Dt
  move &B.Off_Cycle  to $Off_Cycle
  move &B.PAGE_NUM      to #PAGE_NUM
  move &B.LINE_NUM      to #LINE_NUM
  move &B.SepChk     to #SepChk

  if &B.PayCheck_Option = '&'
    let #Deposit_Total = 0
    do Get-Pay-Distribution
    let #NetPay = #Deposit_Total
  end-if

  do Verification

  if $ErrMsg = $Chq
   do Mark-Pay-Check-Due
  end-if

FROM  PS_PAY_CHECK_DUE A,
      PS_PAY_CHECK     B,
      PS_PAYGROUP_TBL  C,
      PS_SRC_BANK      S
WHERE ! B.FORM_ID          = A.FORM_ID AND
      B.PAYCHECK_NBR           = A.PAYCHECK_NBR
!  AND B.CHECK_DT         = A.CHECK_DT
  AND B.PAYCHECK_OPTION IN ('C','&','M')
  AND C.COMPANY          = B.COMPANY
  AND C.PAYGROUP         = B.PAYGROUP
  AND C.EFFDT =
      (SELECT MAX(EFFDT)
       FROM  PS_PAYGROUP_TBL
       WHERE COMPANY  = C.COMPANY
         AND PAYGROUP = C.PAYGROUP
         AND EFFDT   <= B.CHECK_DT)
  AND C.SRC_BANK_ID         = S.SRC_BANK_ID
  AND S.BANK_CD             = A.TRANSIT_NUM
  AND S.ACCOUNT_EC_ID       = A.ACCOUNT_NUM
end-SELECT

begin-SQL on-error=ignore
DELETE FROM PS_PAY_CHECK_DUE
  WHERE TRANSIT_NUM='*'
end-SQL

end-procedure


begin-procedure Process-Bank-File
  #ifdef OS400
       open '{IMPORTPREFIX}BankFile{IMPORTSUFFIX}' as 1 for-reading record=55:fixed
  #else
       open '{IMPORTPREFIX}BankFile.trn{IMPORTSUFFIX}' as 1 for-reading record=55:fixed
  #endif
  move $Pay015a_Bank to $ReconFile
  move ' '    to $NetPay     !for Error Listing

  while 1 = 1
    read 1 into $TRANSIT_NUM:9    -
                $ACCOUNT_NUM:15   -
                $PAYCHECK_NBR:15      -
                $CheckDate:6   -
                $BankNetPay:10

    if #end-file = 1
      break  !exit the "while"
    else
      do Process-Bank-Record
    end-if

  end-while

  close 1

end-procedure


begin-procedure Process-Bank-Record

  move 'N'     to $Error
  move $Pay015a_ErrMsg1 to $ErrMsg

  move $PAYCHECK_NBR to $Value
  move 15     to #Len
  do Numeric-Test

  if $Num = 'Y'
    move $ReturnValue to #PAYCHECK_NBR
  else
    move $Pay015a_ErrMsg_Ext1 to $ErrMsg_Ext
  end-if

  move $CheckDate to $Value
  move 6         to #Len
  do Numeric-Test

  if $Num = 'Y'
    extract $MM from $ReturnValue 1 2
    extract $DD from $ReturnValue 3 2
    extract $YY from $ReturnValue 5 2

    if $MM < '01' or $MM > '12'
      move 'Y' to $Error
      move $Pay015a_ErrMsg_Ext2 to   $ErrMsg_Ext
    end-if

    if $DD < '01' or $DD > '31'
      move 'Y' to $Error
      move $Pay015a_ErrMsg_Ext3 to   $ErrMsg_Ext
    end-if

    if $YY >= '90' and $YY <= '99'
      move '19' to $CheckYr
    else
      move '20' to $CheckYr
    end-if

    let $CheckDt = $CheckYr || $YY || $MM || $DD

    do Format-DateTime($CheckDt, $CheckDt, {DEFCMP}, '', 'native')
  else
    move $Pay015a_ErrMsg_Ext4 to   $ErrMsg_Ext
  end-if

  move $BankNetPay to $Value
  move 10          to #Len
  do Numeric-Test

  if $Num = 'Y'
    move $ReturnValue to #BankNetPay
    divide 100      into #BankNetPay  !add decimal place
  else
    move   $Pay015a_ErrMsg_Ext5 to   $ErrMsg_Ext
  end-if

  if $Error = 'Y'
    move $BankNetPay to $BankNetPay bbbxxxxxxxxxx  !shift for alignment
    move $CheckDate  to $CheckDate  bxxxxxx        !with heading
    do Print-Error
  else
    do Match-to-PayCheck
  end-if

  move  '' to $Errmsg
  move  '' to $ErrMsg_Ext
end-procedure


begin-procedure Numeric-Test

  move ' '  to $ReturnValue
  move 'Y' to $Num
  move 0   to #i

  while #i < #Len
    extract $char from $Value #i 1

    if $char >= '0' and $char <= '9'
      concat $char with $ReturnValue
    else
      if $char = ' '
        concat '0' with $ReturnValue
      else
        move 'N' to $Num
        move 'Y' to $Error
        break  !exit the "while"
      end-if

    end-if

    add 1 to #i
  end-while

end-procedure


begin-procedure Match-to-PayCheck

!Determine if the check returned by the Bank has already been recorded
!in the Payroll system.  Perform some basic editing.  Finally, mark the
!check returned by the Bank as having been cashed.
!Checks returned by the Bank, which have not yet been recorded
!in the Payroll system, are either erroneous entries made by the
!Bank, or reflect manual checks issued by the company which (a) have
!been cashed by the employee but (b) have not yet been recorded in the
!Payroll system.

  move 'F' to $SortFld
  move ' ' to $PayCheck_Status

begin-SELECT
F.COMPANY
F.PAYGROUP
F.PAY_END_DT
F.OFF_CYCLE
F.PAGE_NUM
F.LINE_NUM
F.SEPCHK
F.FORM_ID
F.PAYCHECK_NBR
F.PAYCHECK_CASHED
F.PAYCHECK_STATUS
F.PAYCHECK_OPTION
F.NET_PAY
F.EMPLID
F.PAY_SHEET_SRC

  move &F.PayCheck_Status to $PayCheck_Status

FROM  PS_PAY_CHECK    F,
      PS_PAYGROUP_TBL G,
      PS_SRC_BANK     SB
WHERE F.PAYCHECK_NBR           = #PAYCHECK_NBR
!  AND F.CHECK_DT         = $CheckDt
  AND F.PAYCHECK_OPTION IN ('C','&','M')
  AND G.COMPANY          = F.COMPANY
  AND G.PAYGROUP         = F.PAYGROUP
  AND G.SRC_BANK_ID      = SB.SRC_BANK_ID
  AND SB.BANK_CD         = $TRANSIT_NUM
  AND SB.ACCOUNT_EC_ID   = $ACCOUNT_NUM
  AND G.EFFDT =
      (SELECT MAX(EFFDT)
       FROM  PS_PAYGROUP_TBL
       WHERE COMPANY  = G.COMPANY
         AND PAYGROUP = G.PAYGROUP
         AND EFFDT   <= F.CHECK_DT)
end-SELECT

  if RTRIM($ACCOUNT_NUM, ' ') = ''
    move ' ' to $ACCOUNT_NUM
  end-if

  if RTRIM($PayCheck_Status, ' ') = '' !No match found
    move ' ' to $Form_ID
    move 'S' to $Pay_Sheet_Src

    begin-SQL
    INSERT INTO PS_PAY_CHECK_DUE
      (TRANSIT_NUM,ACCOUNT_NUM,FORM_ID,PAYCHECK_NBR,CHECK_DT,NET_PAY,PAY_SHEET_SRC)
      VALUES
      ($TRANSIT_NUM,$ACCOUNT_NUM,$Form_ID,#PAYCHECK_NBR,$CheckDt,#BankNetPay,$Pay_Sheet_Src)
    end-SQL

  else
    move &F.Company         to $Company
    move &F.PayGroup        to $PayGroup
    move &F.Pay_End_Dt      to $Pay_End_Dt
    move &F.Off_Cycle       to $Off_Cycle
    move &F.PAGE_NUM           to #PAGE_NUM
    move &F.LINE_NUM           to #LINE_NUM
    move &F.SepChk          to #SepChk
    move &F.Form_ID         to $Form_ID
    move &F.PAYCHECK_NBR          to #PAYCHECK_NBR
    move &F.PayCheck_Cashed to $Cashed
    move &F.PayCheck_Status to $Status
    move &F.Net_Pay         to #NetPay
    move &F.Pay_Sheet_Src   to $Pay_Sheet_Src

    if &F.PayCheck_Option = '&'
      let #Deposit_Total = 0
      do Get-Pay-Distribution
      let #NetPay = #Deposit_Total
    end-if

    do Verification
  end-if

end-procedure


begin-procedure Current-Period-Checks

!Identify those checks processed during the current payroll period(s).

begin-SELECT
SBT.BANK_CD
SBT.ACCOUNT_EC_ID
T.COMPANY
T.PAYGROUP
T.PAY_END_DT
T.OFF_CYCLE
T.PAGE_NUM
T.LINE_NUM
T.SEPCHK
T.FORM_ID
T.PAYCHECK_NBR
T.CHECK_DT
T.NET_PAY
T.PAYCHECK_OPTION
T.PAYCHECK_CASHED
T.PAY_SHEET_SRC

  move &SBT.BANK_CD to $TRANSIT_NUM
  move &SBT.ACCOUNT_EC_ID to $ACCOUNT_NUM
  move &T.Form_ID  to $Form_ID
  move &T.PAYCHECK_NBR   to #PAYCHECK_NBR
  move &T.Check_Dt to $CheckDt
  move &T.Net_Pay  to #NetPay
  move &T.Pay_Sheet_src to $Pay_Sheet_Src
  move &T.Company  to $Company
  move &T.PayGroup to $PayGroup
  move &T.Pay_End_Dt to $Pay_End_Dt
  move &T.Off_Cycle  to $Off_Cycle
  move &T.PAGE_NUM      to #PAGE_NUM
  move &T.LINE_NUM      to #LINE_NUM
  move &T.SepChk     to #SepChk

  evaluate &T.PayCheck_Option
    when = 'R'  !Reversal
      move 'D' to $SortFld
    when = '&'  !Check and Advice
    when = 'C'  !Check
      move 'B' to $SortFld
    when = 'M'  !Manual Check
      move 'C' to $SortFld
  end-evaluate

  if &T.PayCheck_Option = '&'
    let #Deposit_Total = 0
    do Get-Pay-Distribution
    let #NetPay = #Deposit_Total
  end-if

  do Insert-Check-Recon

FROM  PS_PAY_CALENDAR S,
      PS_PAY_CHECK    T,
      PS_PAYGROUP_TBL U,
      PS_SRC_BANK     SBT
WHERE S.RUN_ID           = $RunID
  AND T.COMPANY          = S.COMPANY
  AND T.PAYGROUP         = S.PAYGROUP
  AND T.PAY_END_DT       = S.PAY_END_DT
  AND (T.PAYCHECK_STATUS = 'F' OR
       T.PAYCHECK_STATUS = 'R' AND T.PAYCHECK_OPTION IN ('C','&','M','A'))
  AND T.PAYCHECK_OPTION IN ('C','&','M','R')
  AND U.COMPANY          = T.COMPANY
  AND U.PAYGROUP         = T.PAYGROUP
  AND U.EFFDT =
      (SELECT MAX(EFFDT)
       FROM  PS_PAYGROUP_TBL
       WHERE COMPANY  = U.COMPANY
         AND PAYGROUP = U.PAYGROUP
         AND EFFDT   <= T.CHECK_DT)
  AND U.SRC_BANK_ID      = SBT.SRC_BANK_ID
end-SELECT

end-procedure


begin-procedure Outstanding-Checks

!Identify all outstanding checks; that is, all checks which have
!been confirmed, are not reversing entries, and have not been cashed.
  move 'G' to $SortFld

begin-SELECT
Q.COMPANY
Q.PAYGROUP
Q.PAY_END_DT
Q.OFF_CYCLE
Q.PAGE_NUM
Q.LINE_NUM
Q.SEPCHK
SBR.BANK_CD,
SBR.ACCOUNT_EC_ID,
Q.PAYCHECK_OPTION,
Q.FORM_ID,
Q.PAYCHECK_NBR,
Q.CHECK_DT,
Q.NET_PAY
Q.PAY_SHEET_SRC

  move &Q.Company       to $Company
  move &Q.PayGroup      to $PayGroup
  move &Q.Pay_End_Dt    to $Pay_End_Dt
  move &Q.Off_Cycle     to $Off_Cycle
  move &Q.PAGE_NUM      to #PAGE_NUM
  move &Q.LINE_NUM      to #LINE_NUM
  move &Q.SepChk        to #SepChk

  move &SBR.BANK_CD       to $TRANSIT_NUM
  move &SBR.ACCOUNT_EC_ID to $ACCOUNT_NUM
  move &Q.Form_ID       to $Form_ID
  move &Q.PAYCHECK_NBR        to #PAYCHECK_NBR
  move &Q.Form_ID       to $Form_ID
  move &Q.Check_Dt      to $CheckDt
  move &Q.Net_Pay       to #NetPay

  move &Q.Pay_Sheet_Src to $Pay_Sheet_Src

  if &Q.PayCheck_Option = '&'
    let #Deposit_Total = 0
    do Get-Pay-Distribution
    let #NetPay = #Deposit_Total
  end-if

  do Insert-Check-Recon

FROM  PS_PAY_CHECK    Q,
      PS_PAYGROUP_TBL R,
      PS_SRC_BANK     SBR
WHERE Q.PAYCHECK_OPTION IN ('C','&','M')
  AND Q.PAYCHECK_STATUS  = 'F'  !Confirmed
  AND Q.PAYCHECK_CASHED  = 'N'  !Not Cashed
  AND R.COMPANY          = Q.COMPANY
  AND R.PAYGROUP         = Q.PAYGROUP
  AND R.EFFDT =
      (SELECT MAX(EFFDT)
       FROM  PS_PAYGROUP_TBL
       WHERE COMPANY  = R.COMPANY
         AND PAYGROUP = R.PAYGROUP
         AND EFFDT   <= Q.CHECK_DT)
  AND R.SRC_BANK_ID      = SBR.SRC_BANK_ID
end-SELECT

end-procedure


begin-procedure Unprocessed-Manuals

!Identify the Unprocessed Manual Checks; that is, all checks which
!have been cashed and returned by the Bank but which have not yet been
!recorded in the Payroll system.

  move 'H' to $SortFld

begin-SELECT
P.TRANSIT_NUM,
P.ACCOUNT_NUM,
P.FORM_ID
P.PAYCHECK_NBR,
P.CHECK_DT,
P.NET_PAY
P.PAY_SHEET_SRC

  move &P.TRANSIT_NUM      to $TRANSIT_NUM
  move &P.ACCOUNT_NUM      to $ACCOUNT_NUM
  move &P.Form_ID       to $Form_ID
  move &P.PAYCHECK_NBR        to #PAYCHECK_NBR
  move &P.Check_Dt      to $CheckDt
  move &P.Net_Pay       to #NetPay
  move &P.Pay_Sheet_Src to $Pay_Sheet_Src

  do Insert-Check-Recon

FROM  PS_PAY_CHECK_DUE P
end-SELECT

end-procedure


begin-procedure Verification

  let  #NetPay     = round(#NetPay, 2)
  let  #BankNetPay = round(#BankNetPay, 2)

  move $Chq to $ErrMsg

  if $Cashed = 'Y'
    concat ' ' with $ErrMsg
    concat $Pay015a_ErrMsgA with $ErrMsg
  else
    if $Status = 'R'
      concat ' '     with $ErrMsg
      concat $Pay015a_ErrMsgB     with $ErrMsg
    else
      if #NetPay <> #BankNetPay
        move $Pay015a_ErrMsg2 to $ErrMsg
      end-if
    end-if
  end-if

  if $ErrMsg <> $Chq
    do Format-Error
  else
    do Insert-Check-Recon
begin-SQL
UPDATE PS_PAY_CHECK  SET PAYCHECK_CASHED='Y'
WHERE  COMPANY  = $Company
  AND  PAYGROUP = $PayGroup
  AND  FORM_ID  = $Form_ID
  AND  PAYCHECK_NBR   = #PAYCHECK_NBR
!  AND  CHECK_DT = $CheckDt
end-SQL
  end-if

end-procedure


begin-procedure Insert-Check-Recon

begin-SQL on-error=Recon-Error
INSERT INTO PS_R_PAY015
  (TRANSIT_NUM,ACCOUNT_NUM,FORM_ID,PAYCHECK_NBR,CHECK_DT,NET_PAY,SORT_FLD,PAY_SHEET_SRC)
VALUES
  ($TRANSIT_NUM,$ACCOUNT_NUM,$Form_ID,#PAYCHECK_NBR,$CheckDt,#NetPay,$SortFld,$Pay_Sheet_Src)
end-SQL

end-procedure


begin-procedure Format-Error

  do Format-Number(#PAYCHECK_NBR, $PAYCHECK_NBR, '099999999999999')
  do Format-Number(#NetPay, $NetPay, '99,999,999.99mi')
  do Format-Number(#BankNetPay, $BankNetPay, '99,999,999.99mi')
  do Format-DateTime($CheckDt, $CheckDt, {DEFCMP}, '', '')
  extract $Year  from $CheckDt 0 4
  extract $Month from $CheckDt 4 2
  extract $Day   from $CheckDt 6 2
  let $CheckDate =  $Year || '-' || $Month || '-' || $Day
  do Print-Error

end-procedure


begin-procedure Print-Error

  print $TRANSIT_NUM   (+1,1)
  print $ACCOUNT_NUM   (0,12)
  print $PAYCHECK_NBR     (0,30)
  print $NetPay     (0,48)
  print $BankNetPay (0,62)
  print $CheckDate  (0,85)
  print $ReconFile  (0,100)
  print $ErrMsg     (0,108)
  print $ErrMsg_Ext (0,158)

  move  '' to $ErrMsg_Ext
  move  '' to $ErrMsg

end-procedure


begin-procedure Mark-Pay-Check-Due

begin-SQL
UPDATE PS_PAY_CHECK_DUE
  SET  TRANSIT_NUM = '*'
WHERE  TRANSIT_NUM = $TRANSIT_NUM
  AND  ACCOUNT_NUM = $ACCOUNT_NUM
!  AND  FORM_ID  = $Form_ID
  AND  PAYCHECK_NBR   = #PAYCHECK_NBR
  AND  CHECK_DT = $CheckDt
end-SQL

end-procedure


begin-procedure Get-Pay-Distribution

begin-SELECT
PD.ACCOUNT_TYPE
PD.DEPOSIT_AMOUNT
PD.FORM_ID
PD.PAYCHECK_NBR

  if &PD.Form_ID = $Form_ID
    if &PD.PAYCHECK_NBR  = #PAYCHECK_NBR
      add &PD.Deposit_Amount to #Deposit_Total
    end-if
  end-if

FROM  PS_PAY_DISTRIBUTN PD
WHERE PD.COMPANY         = $Company
  AND PD.PAYGROUP        = $PayGroup
  AND PD.PAY_END_DT      = $Pay_End_Dt
  AND PD.OFF_CYCLE       = $Off_Cycle
  AND PD.PAGE_NUM           = #PAGE_NUM
  AND PD.LINE_NUM           = #LINE_NUM
  AND PD.SEPCHK          = #SepChk
end-SELECT

end-procedure


begin-procedure Recon-Error

  concat ' ' with $ErrMsg
  concat $Pay015a_ErrMsgC with $ErrMsg
  concat ' ' with $ErrMsg
  do Format-Error
  Let $Errmsg = ''

end-procedure


begin-procedure Ignore

! dummy procedure to avoid SQL error message

end-procedure


#Include 'payinit.sqc'   !Payroll-Report-Initialization procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
