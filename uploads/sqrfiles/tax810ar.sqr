!***********************************************************************
!  TAX810AR:  Qtrly Wage List - ARKANSAS                               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!                                                                      *
!                   Tape does not identify "Seasonal" Wages            *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2012, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2012/07/17:11:40:53                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872684                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file will have been'
    display 'created, as follows:'
    display ''
    display ''
    display '  TAX810AR  contains 155-character records in a modified SSA format'
    display '            required for electronic submission of quarterly wages to'
    display '            the Arkansas Department of Workforce Services.'
    display ''
    display ''
    display 'Follow the instructions from the department for preparing and'
    display 'submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id

  do Stdapi-Init
  do Initialization

  move 'TAX810AR'                          to $ReportID
  move 'Arkansas Quarterly UI Wage Report' to $ReportTitle
  move 'TAX810AR'                          to $Program
  display ''
  display 'Creating file for Arkansas UI Wage Reporting'

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'AR'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move &TX.Balance_Year  to $CalYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr


  open '{IMPORTPREFIX}TAX810AR{IMPORTSUFFIX}' as 10 for-writing record=155:fixed
  
  create-array name=OSDATA size=100     field=EMPLID:char
                                          field=COMPANY:char
                                          field=BALANCE_ID:char
                                          field=BALANCE_YEAR:number
                                          field=BALANCE_QTR:number
                                          field=BALANCE_PERIOD:number
                                          field=STATE:char
                                          field=TAX_CLASS:char
                                          field=NLGRS_YTD:number
                                          field=NLGRS_QTD:number
                                          field=TXGRS_YTD:number
                                          field=TXGRS_QTD:number
                                          field=EXCESS_WAGES:number
                                          
let #I=0
let $Report='N'
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL

  move &A.Company to $Company
  move &A.Descr to  $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.NLGRS_YTD
C.NLGRS_QTD
C.TXGRS_YTD
C.TXGRS_QTD
C.BALANCE_PERIOD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D.NAME_SUFFIX
D.NAME_PSFORMAT

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = $Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'AR'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D1.EMPLID           = D.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MiddleName = rtrim(&D.MIDDLE_NAME, ' ')
  let $NameSuffix = rtrim(&D.NAME_SUFFIX, ' ')
  let $NameFormat = rtrim(&D.NAME_PSFORMAT, ' ')

  uppercase $FirstName
  uppercase $LastName
  uppercase $MiddleName
  uppercase $NameSuffix
  
  do Validate-Out-of-State-Wages
  
  if #OS_Excess_Wages > 0  
     let #OS_Format = #OS_Excess_Wages 
     multiply 100 times #OS_Format
     do Format-Number(#OS_Format,  $OS_Excess_Wages_F,  '099999999')
     do Print-Out-Of-State-Detail
  else
     move '' to $OS_Excess_Wages_F
     move '' to $OS_State
  end-if

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD

  let #max_amt_NLG = 999999999
  let #NlGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  let $done1 = 'N'

  while $done1 <> 'Y'
    do split-s-record (#NlGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999')
    do Write-1S-Record
    do Write-2S-Record
    add 1 to #Count_R
  end-while

  move 'Y' to $RecordWritten
end-procedure


begin-procedure Before-Company
  do Get-Company-Data
  uppercase $CompanyName

  #ifdef TAXTEST
    move 'CA' to $State
  #else
    move 'AR' to $State
  #endif

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display $Company
    display '*********************** Processing stopped *********************'
    stop
  end-if

  let $StateEIN = EDIT(RTRIM(&Employer_ID_SUT,' '),'099999999')

  do Write-E-Record
end-procedure


begin-procedure After-Company
  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD    to #Tot_NlGrs_QTD
    add #Count_S         to #Count_F
    add #Count_R         to #Count_R_Total

    move 0   to #Co_NlGrs_QTD
    move 0   to #Count_S
    move 0   to #Count_R
    new-page
  end-if
end-procedure


begin-procedure Write-1S-Record

  write 10 from '1S':2    !Column   1 -   2
        $NATIONAL_ID:9    !Column   3 -  11
           $LastName:20   !Column  12 -  31
          $FirstName:15   !Column  32 -  46
         $MiddleName:15   !Column  47 -  61
         $NameSuffix:4    !Column  62 -  65
                 $Sp:86   !Column  66 - 151
                '05':2    !Column 152 - 153
                 $Sp:2    !Column 154 - 155

end-procedure

begin-procedure Write-2S-Record

  write 10 from '2S':2    !Column   1 -   2
           $StateEIN:9    !Column   3 -  11
                 $Sp:3    !Column  12 -  14
        $QtrEndMonth:2    !Column  15 -  16
            $RptYear:2    !Column  17 -  18
          $NlGrs_QTD:9    !Column  19 -  27
                 $Sp:101  !Column  28 - 128
  $OS_Excess_Wages_F:9    !Column 129 - 137
           $OS_State:2    !Column 138 - 139
                 $Sp:16   !Column 140 - 155

  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $OS_Excess_Wages_F
  move '' to $OS_State
end-procedure


begin-procedure Write-E-Record
  move &CT.Federal_EIN  to $FedEIN 099999999
  move &CT.Descr        to $ErName
  move $CompnyAdd1     to $ErAddress
  move $CompnyCity         to $City
  let $StateCd = rtrim(&CT.State, ' ')
  move &CT.Postal       to $Zip
  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move &CT.Country      to $Country
  do Foreign-Address-Test
  uppercase $ErName
  uppercase $ErAddress
  uppercase $City

  do Write-1E-Record
  do Write-2E-Record

  move 'Y' to $RecordWritten
end-procedure


begin-procedure Write-1E-Record

 write 10 from '1E':2     !Column 1 - 2
           $CalYear:4     !Column 3 - 6
            $FedEIN:9     !Column 7 - 15
                $Sp:9     !Column 16 - 24
            $ErName:50    !Column 25 - 74
         $ErAddress:40    !Column 75 - 114
                $Sp:14    !Column 115 - 128
                $Sp:9     !Column 129 - 137
                $Sp:18    !Column 138 - 155

end-procedure

begin-procedure Write-2E-Record

 write 10 from '2E':2     !Column 1 - 2
              $City:25    !Column 3 - 27
           $StateCd:10    !Column 28 - 37
          $ZipExtsn:5     !Column 38 - 42
               $Zip:5     !Column 43 - 47
                $Sp:108   !Column  48 - 155

end-procedure


begin-procedure Foreign-Address-Test
  if $Country = 'USA'
    move '' to $ForeignAddr
    move '' to $CountryName
  else
    move 'X' to $ForeignAddr
    let $City = RTRIM($City,' ')
    concat $StateCd with $City bxx
    if $Country <> $priorCountry
      do Get-Country-Code
      move $Country to $priorCountry
      move &Descr   to $CountryName
    end-if
    move &Country_2Char to $StateCd
  end-if
  move $Zip to $ZipExtsn ~~~~~xxxxx
end-procedure

begin-procedure Get-Country-Code
begin-SELECT
COUNTRY_2CHAR,DESCR
FROM  PS_COUNTRY_TBL
WHERE COUNTRY = &CT.Country
end-SELECT
end-procedure

begin-procedure Validate-Out-of-State-Wages
   do Get-Balance-Data

   if $Report = 'Y'
      do Get-OS-State
      if &C.NLGRS_QTD <> &C.TXGRS_QTD
         do Calculate-OS-Wages
      else
         let #OS_Excess_Wages = 0
      end-if     
   else 
      let #OS_Excess_Wages = 0
      let $OS_State        = '  '
   end-if
  
   CLEAR-ARRAY name=OSDATA
   let $Report = 'N'
   let #I=0  
end-procedure

begin-procedure Get-Balance-Data

   let $EmplID = &C.EMPLID

begin-SELECT
E.EMPLID
E.COMPANY
E.BALANCE_ID
E.BALANCE_YEAR
E.BALANCE_QTR
E.BALANCE_PERIOD
E.STATE
E.TAX_CLASS
E.NLGRS_YTD
E.NLGRS_QTD
E.TXGRS_YTD
E.TXGRS_QTD

   if &E.STATE <> 'AR'
      let $Report = 'Y'
   end-if
   
   do Emplid-Check-OS
   do Store-Row

FROM  PS_TAX_BALANCE E
WHERE E.COMPANY       = $Company
  AND E.EMPLID        = $EmplID
  AND E.TAX_CLASS     = 'U'
  AND E.BALANCE_ID    = $Calendar_Year_Id
  AND E.BALANCE_YEAR  = &TX.Balance_Year
  AND E.STATE        <> '$U'
  AND E.LOCALITY      = ' '
  AND E.BALANCE_QTR  <= &TX.Balance_Qtr
  AND E.NLGRS_YTD    <> 0
ORDER BY 
E.BALANCE_QTR,
E.BALANCE_PERIOD ASC
end-SELECT
end-procedure

begin-procedure Calculate-OS-Wages
do Get-State-Wage-Limit

let #Wage_Limit = &F.MAX_GROSS
let #NlGrs_YTD  = &C.NLGRS_YTD
let #NlGrs_QTD  = &C.NLGRS_QTD
let #TxGrs_QTD  = &C.TXGRS_QTD
let #Excess_Wages = #NlGrs_YTD - #Wage_Limit

if #Excess_Wages > 0
   do Prev-Qts-Excess
   let #Excess_Wages = #Excess_Wages - #Accum_Excess
else
   let #Excess_Wages = 0
end-if
 
let #OS_Excess_Wages = (#NlGrs_QTD - #TxGrs_QTD) - #Excess_Wages
end-procedure

begin-procedure Prev-Qts-Excess
let #Accum_Excess = 0
let #Calc_Excess  = 0
let $PREVSTATE    = ' '
if #I > 0
   let #G=1
   while #G <= #I
      GET $OSEMPLID   
          $OSCOMPANY 
          $OSBALANCE_ID     
          #OSBALANCE_YEAR   
          #OSBALANCE_QTR  
          #OSBALANCE_PERIOD 
          $OSSTATE      
          $OSTAX_CLASS   
          #OSNLGRS_YTD 
          #OSNLGRS_QTD 
          #OSTXGRS_YTD
          #OSTXGRS_QTD
          #OSEXCESS_WAGES
      from OSDATA(#G)
         
      if $PREVSTATE = 'AR'
         if #OSBALANCE_QTR <> #PREVQTR
            if #PREVNLGRS_QTD <> #PREVTXGRS_QTD
               let #Calc_Excess = #PREVNLGRS_YTD - #Wage_Limit
               if #Calc_Excess > 0
                 let #Accum_Excess = #Accum_Excess + #Calc_Excess
               end-if
            end-if              
         end-if
      end-if

      let #PREVQTR       = #OSBALANCE_QTR 
      let $PREVSTATE     = $OSSTATE
      let #PREVNLGRS_YTD = #OSNLGRS_YTD
      let #PREVNLGRS_QTD = #OSNLGRS_QTD
      let #PREVTXGRS_YTD = #OSTXGRS_YTD
      let #PREVTXGRS_QTD = #OSTXGRS_QTD
      
      let #G=#G+1 
      
   end-while
end-if
end-procedure

begin-procedure Get-OS-State
let #S=1
      GET $OSEMPLID   
          $OSCOMPANY 
          $OSBALANCE_ID     
          #OSBALANCE_YEAR   
          #OSBALANCE_QTR  
          #OSBALANCE_PERIOD 
          $OSSTATE      
          $OSTAX_CLASS   
          #OSNLGRS_YTD 
          #OSNLGRS_QTD 
          #OSTXGRS_YTD
          #OSTXGRS_QTD
          #OSEXCESS_WAGES
      from OSDATA(#S)
let $OS_State = $OSSTATE
end-procedure

begin-procedure Get-State-Wage-Limit
begin-SELECT 
F.MAX_GROSS
FROM  PS_ST_OTH_TAX_TBL F
WHERE STATE = 'AR'
  AND TAX_CLASS = 'U'
  AND EFFDT = 
      (SELECT MAX(EFFDT) 
       FROM  PS_ST_OTH_TAX_TBL F2
       WHERE F2.STATE = F.STATE
         AND F2.TAX_CLASS = F.TAX_CLASS)
end-SELECT
end-procedure

begin-procedure Emplid-Check-OS
   let $OSEMPLID         = &E.EMPLID
   let $OSCOMPANY        = &E.COMPANY
   let $OSBALANCE_ID     = &E.BALANCE_ID
   let #OSBALANCE_YEAR   = &E.BALANCE_YEAR
   let #OSBALANCE_QTR    = &E.BALANCE_QTR
   let #OSBALANCE_PERIOD = &E.BALANCE_PERIOD
   let $OSSTATE          = &E.STATE
   let $OSTAX_CLASS      = &E.TAX_CLASS
   let #OSNLGRS_YTD      = &E.NLGRS_YTD
   let #OSNLGRS_QTD      = &E.NLGRS_QTD
   let #OSTXGRS_YTD      = &E.TXGRS_YTD
   let #OSTXGRS_QTD      = &E.TXGRS_QTD
   let #OSEXCESS_WAGES   = 0
end-procedure


begin-procedure Store-Row
   if $OSSTATE = ''
   else
       let #I = #I + 1
       PUT
       $OSEMPLID   
       $OSCOMPANY 
       $OSBALANCE_ID     
       #OSBALANCE_YEAR
       #OSBALANCE_QTR  
       #OSBALANCE_PERIOD 
       $OSSTATE      
       $OSTAX_CLASS  
       #OSNLGRS_YTD 
       #OSNLGRS_QTD 
       #OSTXGRS_YTD
       #OSTXGRS_QTD
       #OSEXCESS_WAGES
       INTO OSDATA(#I)
   end-if
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'txovrflw.sqc'  !Split-S-Record Procedure
