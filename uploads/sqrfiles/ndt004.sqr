!************************************************
!  NDT004:  Nondiscrimination Testing Report    *
!************************************************

!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:09:15:31                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
!This program uses the file (PS_R_NDT_Empl_ADP) created by programs
!NDT002.SQR and NDT003.SQR to print the details.  This program will not
!recalculate the fields that were calculated by NDT002 and NDT003. For
!example, the ADP for employees, HCE, and non HCE will not be recalculated.
!However, if the report is printing values that were not stored in the
!database, then these values will be calculated.  For example, the results
!obtained by multiplying the ADPs with various factors.
!Since the report does not recalculate stored fields, any discreprancies
!usually mean that there could be data corruption and this must be
!researched to determine the cause of the corruption.
!***********************************************************************

#include 'setenv.sqc'    !Set environment

Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

!#define debugD  YES

#define FOREVER         1
#define DESCR_COL       5
#define TTL_NAME_COL    1
#define TTL_CNT_COL    33
#define ACTUAL_COL     77
#define FORECAST_COL  116
#define SEP_WIDTH     117
#define EE_WIDTH      121
#define ADP_MASK      999.99

!************************************************
begin-program
!************************************************

  do Init-Report

  display 'Program Began at: ' NoLine
  do Display-Time

  do Check-Run-Control

  if ($Results_Actual <> ' ')
    do Initialization
    do Get-Employee-Details
    do Final-Totals
    do Summary-Result
    do Aggregate-Testing
  else
    display 'There are no results to report.  Rerun your non-discrimination'
    display 'testing programs.'
    display ''
  end-if

  display 'Program Ended at: ' noline
  do Display-Time

  do StdAPI-Term

end-program

!************************************************
begin-procedure Init-Report
!************************************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number

  do StdAPI-Init
  if ($prcs_process_instance = '')
    do Ask-Values
  else
    do Get-Values
  end-if

  if ($NDT_Report_Type = 'M')
    let $ADP_Title = 'ACP'
    let $Rpt_Title = '401(m)'
  else
    let $ADP_Title = 'ADP'
    let $Rpt_Title = '401(k)'
  end-if

  let $ReportID = 'NDT004'
  let $ReportTitle = 'Non-Discrimination Testing - '
  let $ReportTitle = $ReportTitle || $Rpt_Title || ' Results'
  display $ReportTitle
  display ''

  let $Page_Header = 'Yes'

end-procedure


!************************************************
begin-procedure Ask-Values
!************************************************

  do Ask-Report-Type

end-procedure


!************************************************
begin-procedure Get-Values
!************************************************

  do Select-Parameters
  do Get-Report-Test-Type

end-procedure


!************************************************
begin-procedure Ask-Report-Type
!************************************************

  while {FOREVER}

    input $NDT_Report_Type maxlen=1 -
      'Enter NDT Report Type: K for 401(k) or M for 401(m)'
    uppercase $NDT_Report_Type

    if ($NDT_Report_Type = 'K') or ($NDT_Report_Type = 'M')
      break
    end-if

    display 'NDT Report Type must be "K" or "M"'

  end-while

end-procedure

!************************************************
begin-procedure Check-Run-Control
!************************************************

begin-SELECT
RC.RESULTS_ACTUAL_M,  RC.RESULTS_FORECAST_M
RC.ADP_LCE_ACTUAL_M,  RC.ADP_LCE_FORECAST_M
RC.ADP_HCE_ACTUAL_M,  RC.ADP_HCE_FORECAST_M
RC.RESULTS_ACTUAL_K,  RC.RESULTS_FORECAST_K
RC.ADP_LCE_ACTUAL_K,  RC.ADP_LCE_FORECAST_K
RC.ADP_HCE_ACTUAL_K,  RC.ADP_HCE_FORECAST_K
RC.D_EXCESS_ACTUAL_K, RC.D_EXCESS_ACTUAL_M,
RC.D_EXCESS_FCST_K,   RC.D_EXCESS_FCST_M

FROM PS_NDT_RUNCTL RC
end-SELECT

  if ($NDT_Report_Type = 'M')
    move &RC.Results_Actual_M   to $Results_Actual
    move &RC.Results_Forecast_M to $Results_Forecast
    move &RC.ADP_LCE_Actual_M   to #ADP_LCE_Actual
    move &RC.ADP_LCE_Forecast_M to #ADP_LCE_Forecast
    move &RC.ADP_HCE_Actual_M   to #ADP_HCE_Actual
    move &RC.ADP_HCE_Forecast_M to #ADP_HCE_Forecast
  else
    move &RC.Results_Actual_K   to $Results_Actual
    move &RC.Results_Forecast_K to $Results_Forecast
    move &RC.ADP_LCE_Actual_K   to #ADP_LCE_Actual
    move &RC.ADP_LCE_Forecast_K to #ADP_LCE_Forecast
    move &RC.ADP_HCE_Actual_K   to #ADP_HCE_Actual
    move &RC.ADP_HCE_Forecast_K to #ADP_HCE_Forecast
  end-if

begin-SELECT
NDT.MAX_TIMES_FACTOR,
NDT.MIN_ADD_FACTOR,
NDT.MIN_TIMES_FACTOR

FROM PS_NDT_HCE_TBL NDT
end-SELECT

  do Format-Number(&NDT.Max_Times_Factor, $Max_Times_Factor, '9.99')
  do Format-Number(&NDT.Min_Times_Factor, $Min_Times_Factor, '9.99')
  do Format-Number(&NDT.Min_Add_Factor,   $Min_Add_Factor,   '9.99')

end-procedure


!************************************************
begin-procedure Initialization
!************************************************

  create-array name=Totals size=4 -
    field=TotalName:char -
    field=TotalCount:number -
    field=ADP_Actual:number -
    field=ADP_Forecast:number -
    field=Total:number:4 -
    field=StartCol:number:4

  put 'Grand Total:'  into Totals(1) TotalName
  put 'Total:'        into Totals(2) TotalName
  put  47 62 85 101   into Totals(0) StartCol(0) StartCol(1) -
                                     StartCol(2) StartCol(3)

end-procedure


!************************************************
begin-heading 9
!************************************************

#Include 'stdhdg01.sqc'

  if ($Page_Header = 'Yes')
    if ($HCE_Type = 'H')
       print 'Highly Compensated Employees'               (4,1)
    else
       print 'Non Highly Compensated Employees'           (4,1)
    end-if

    print '-------- Actual Year-to-Date --------  '        (+3,46)
    print '-------- Forecasted Year-End --------'          ()
    print 'Employee Name                   Employee ID'    (+1,1)
    print '  Gross Earnings  Contributions     '           ()
    print $ADP_Title                                       ()
    print '  Gross Earnings  Contributions     '           ()
    print $ADP_Title                                       ()
    print '='                                              (+1,1,{EE_WIDTH}) fill
  else
    print ''                                               (9,1)
  end-if

end-heading


!************************************************
begin-footing 2
!************************************************

print 'Company Confidential' (2,1) center

end-footing


!************************************************
begin-procedure Get-Employee-Details
!************************************************

begin-SELECT
A.HCE_TYPE     ()       On-Break Print=Never Level=1 -
                        Procedure=HCE-TYPE-CHANGE Save=$HCE_TYPE
A.EMPLID       (0,33)   On-Break Skiplines=1 Level=2 -
                        Procedure=EMPLOYEE-CHANGE Save=$EMPLID
B.NAME         (0,1,30)
A.YTD_401_K_M
A.ADP_MODE
A.GRS_YTD
A.DED_YTD
A.ADP_HCE_ACTUAL

  if (&A.ADP_Mode = 'A')
     Put &A.GRS_YTD &A.DED_YTD &A.ADP_HCE_ACTUAL -
       Into TOTALS(3) TOTAL(0) TOTAL(1) ADP_ACTUAL
  else
     Put &A.GRS_YTD &A.DED_YTD &A.ADP_HCE_ACTUAL -
       Into TOTALS(3) TOTAL(2) TOTAL(3) ADP_FORECAST
  end-if

FROM  PS_R_NDT_EMPL_ADP A,
      PS_PERSON_NAME   B
WHERE A.YTD_401_K_M = $NDT_Report_Type
  AND B.EMPLID      = A.EMPLID
ORDER BY A.HCE_TYPE ASC,
         A.EMPLID ASC,
         A.ADP_MODE ASC
end-SELECT
end-procedure


!************************************************
begin-procedure HCE-Type-Change
!************************************************

  move 2 to #ChangeLevel
  do Print-Totals
  new-page

end-procedure


!************************************************
begin-procedure Employee-Change
!************************************************

  move 3 to #ChangeLevel
  do Print-Totals
  put  0 0 0 0 0 0 into Totals(3) -
     total(0) total(1) total(2) total(3) ADP_Actual ADP_Forecast

end-procedure


!************************************************
begin-procedure Final-Totals
!************************************************

  move 1 to #ChangeLevel
  do Print-Totals
  new-page

end-procedure


!************************************************
begin-procedure Print-Totals
!************************************************

  move 3 to #TotalRow
  while (#TotalRow >= #ChangeLevel)

    move #TotalRow to #RollRow
    subtract 1 from #RollRow

    if (#TotalRow < 3) !if not the individual Employee row

       if (#TotalRow = 2)
         print '-'                  (+1,1,{EE_WIDTH}) fill
       else
         print ''                  (+1,1)
       end-if

       get $TotalName from Totals(#TotalRow) TotalName
       print $TotalName (+1,{TTL_NAME_COL})

       get #TotalCount from Totals(#TotalRow) TotalCount
       print #TotalCount    (0,{TTL_CNT_COL}) Edit 8999999

       array-add #TotalCount to Totals(#RollRow) TotalCount
       put 0 into Totals(#TotalRow) TotalCount

       if (#TotalRow = 2)
         if ($HCE_Type  = 'H')
           print  #ADP_HCE_Actual     (0,{ACTUAL_COL})   Edit 99.999
           print  #ADP_HCE_Forecast   (0,{FORECAST_COL}) Edit 99.999
         else
           print  #ADP_LCE_Actual     (0,{ACTUAL_COL})   Edit 99.999
           print  #ADP_LCE_Forecast   (0,{FORECAST_COL}) Edit 99.999
         end-if
       end-if

    else

      array-add 1   to Totals(2) TotalCount
      get #ADP_Actual from Totals(3) ADP_Actual
      print  #ADP_Actual     (0,{ACTUAL_COL})   Edit 99.999
      get #ADP_Forecast from Totals(3) ADP_Forecast
      print  #ADP_Forecast   (0,{FORECAST_COL}) Edit 99.999

    end-if

    move 0 to #i
    while (#i <= 3)

      get #Total    from Totals(#TotalRow) total(#i)
      get #StartCol from Totals(0) StartCol(#i)
      print #Total            (0,#StartCol) Edit $$$,$$$,$$0.99

      array-add #Total to Totals(#RollRow) total(#i)
      put 0 into Totals(#TotalRow) total(#i)
      add 1 to #i

    end-while

    subtract 1 from #TotalRow

  end-while

end-procedure


!************************************************
begin-procedure Summary-Result
!************************************************

  let $Page_Header = 'No'
  move ' ' to $HCE_Type  !Clear HCE Type for summary report

  print ''                      (+3)

  if ($NDT_Report_Type = 'K')
    do Print-Summary(&RC.ADP_HCE_Actual_K, &RC.ADP_HCE_Forecast_K,
         &RC.ADP_LCE_Actual_K, &RC.ADP_LCE_Forecast_K,
         &RC.D_Excess_Actual_K, &RC.D_Excess_FCST_K,
         &RC.Results_Actual_K, &RC.Results_Forecast_K)
  else
    do Print-Summary(&RC.ADP_HCE_Actual_M,&RC.ADP_HCE_Forecast_M,
         &RC.ADP_LCE_Actual_M, &RC.ADP_LCE_Forecast_M,
         &RC.D_Excess_Actual_M, &RC.D_Excess_FCST_M,
         &RC.Results_Actual_M, &RC.Results_Forecast_M)
  end-if

end-procedure


!************************************************
begin-procedure Print-Summary (#hce_adp_a,  #hce_adp_f,
                               #nhce_adp_a, #nhce_adp_f,
                               #excess_a,   #excess_f,
                               $results_a,  $results_f)
!************************************************

  let #times_max  = &_NDT.Max_Times_Factor
  let #times_min  = &_NDT.Min_Times_Factor
  let #add_factor = &_NDT.Min_Add_Factor

  print '*'                      (+2,{DESCR_COL},{SEP_WIDTH}) fill
  print $_Rpt_Title              (+2,{DESCR_COL})
  print ' Results...'            ()
  let #Col = {ACTUAL_COL}
  print 'Actual'                 (0,#Col)
  let #Col = {FORECAST_COL} - 4
  print 'Forecasted'             (0,#Col)

  let $Str = 'Non Highly Compensated Employees ' || $_ADP_Title ||
             ' multiplied by ' || $_Max_Times_Factor
  let #nhce_test1a = #times_max * #nhce_adp_a
  let #nhce_test1f = #times_max * #nhce_adp_f
  print $Str                     (+2,{DESCR_COL})
  print #nhce_test1a             (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #nhce_test1f             (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Highly Compensated Employees ' || $_ADP_Title
  print $Str                     (+1,{DESCR_COL})
  print #hce_adp_a               (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #hce_adp_f               (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Result of first test'
  let $result_str_a = cond($results_a = '1','Passed','Failed')
  let $result_str_f = cond($results_f = '1','Passed','Failed')
  print $Str                     (+1,{DESCR_COL})
  print $result_str_a            (0,{ACTUAL_COL})
  print $result_str_f            (0,{FORECAST_COL})

  let $Str = 'Non Highly Compensated Employees ' || $_ADP_Title ||
             ' multiplied by ' || $_Min_Times_Factor
  let #nhce_test2a = #times_min * #nhce_adp_a
  let #nhce_test2f = #times_min * #nhce_adp_f
  print $Str                     (+2,{DESCR_COL})
  print #nhce_test2a             (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #nhce_test2f             (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Non Highly Compensated Employees ' || $_ADP_Title ||
             ' plus ' || $_Min_Add_Factor || ' percentage points'
  let #nhce_test3a = #add_factor + #nhce_adp_a
  let #nhce_test3f = #add_factor + #nhce_adp_f
  print $Str                     (+1,{DESCR_COL})
  print #nhce_test3a             (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #nhce_test3f             (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Non Highly Compensated Employees ' || $_ADP_Title ||
             ' used (the lesser of the above)'
  let #min_nhce_a =
       cond((#nhce_test2a > #nhce_test3a), #nhce_test3a, #nhce_test2a)
  let #min_nhce_f =
       cond((#nhce_test2f > #nhce_test3f), #nhce_test3f, #nhce_test2f)
  print $Str                     (+1,{DESCR_COL})
  print #min_nhce_a              (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #min_nhce_f              (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Highly Compensated Employees ' || $_ADP_Title
  print $Str                     (+1,{DESCR_COL})
  print #hce_adp_a               (0,{ACTUAL_COL})   Edit {ADP_MASK}
  print #hce_adp_f               (0,{FORECAST_COL}) Edit {ADP_MASK}

  let $Str = 'Result of second test'
  let $result_str_a = cond($results_a = '2','Passed',
               cond(($results_a = '1'),'N/A','Failed'))
  let $result_str_f = cond($results_f = '2','Passed',
               cond(($results_f = '1'),'N/A','Failed'))
  print $Str                     (+1,{DESCR_COL})
  print $result_str_a            (0,{ACTUAL_COL})
  print $result_str_f            (0,{FORECAST_COL})

  if ($results_a = 'F') or ($results_f = 'F')
    print 'Discriminatory Excess'    (+2,{DESCR_COL})
  end-if
  if ($results_a = 'F')
    print #excess_a                  (0,{ACTUAL_COL})   Edit {ADP_MASK}
  end-if
  if ($results_f = 'F')
    print #excess_f                  (0,{FORECAST_COL}) Edit {ADP_MASK}
  end-if

  let $Str = 'Final Result'
  let $result_str_a = cond(($results_a = 'F'),'Failed','Passed')
  let $result_str_f = cond(($results_f = 'F'),'Failed','Passed')
  print $Str                     (+2,{DESCR_COL})
  print $result_str_a            (0,{ACTUAL_COL})
  print $result_str_f            (0,{FORECAST_COL})

end-procedure


!************************************************
begin-procedure Aggregate-Testing
!************************************************

  if (&RC.Results_Actual_K = '2'   and  &RC.Results_Actual_M = '2') or
     (&RC.Results_Forecast_K = '2' and  &RC.Results_Forecast_M = '2')

    !Print Summary for other Test type if Aggregate Test is triggered...
    if ($NDT_Report_Type = 'K')
      let $ADP_Title = 'ACP'
      let $Rpt_Title = '401(m)'
      do Print-Summary(&RC.ADP_HCE_Actual_M, &RC.ADP_HCE_Forecast_M,
         &RC.ADP_LCE_Actual_M, &RC.ADP_LCE_Forecast_M,
         &RC.D_Excess_Actual_M, &RC.D_Excess_FCST_M,
         &RC.Results_Actual_M, &RC.Results_Forecast_M)
    else
      let $ADP_Title = 'ADP'
      let $Rpt_Title = '401(k)'
      do Print-Summary(&RC.ADP_HCE_Actual_K, &RC.ADP_HCE_Forecast_K,
         &RC.ADP_LCE_Actual_K, &RC.ADP_LCE_Forecast_K,
         &RC.D_Excess_Actual_K, &RC.D_Excess_FCST_K,
         &RC.Results_Actual_K, &RC.Results_Forecast_K)
    end-if

    print '*'                                 (+2,{DESCR_COL},{SEP_WIDTH}) fill
    print 'Results of Aggregate Limit Test: ' (+2,{DESCR_COL})

    let $Agg_Result_Actual = 'N'
    if (&RC.Results_Actual_K = '2') and (&RC.Results_Actual_M = '2')
      do Aggregate-Test(&RC.ADP_HCE_Actual_K, &RC.ADP_HCE_Actual_M,
             &RC.ADP_LCE_Actual_K, &RC.ADP_LCE_Actual_M,
             $Agg_Result_Actual)
    end-if
    let $Result = cond(($Agg_Result_Actual = 'P'),'Passed',
               cond(($Agg_Result_Actual = 'N'),'N/A','Failed'))
    print $Result    (0,{ACTUAL_COL})

    let $Agg_Result_Forecast = 'N'
    if (&RC.Results_Forecast_K = '2') and (&RC.Results_Forecast_M = '2')
      do Aggregate-Test(&RC.ADP_HCE_Forecast_K, &RC.ADP_HCE_Forecast_M,
             &RC.ADP_LCE_Forecast_K, &RC.ADP_LCE_Forecast_M,
             $Agg_Result_Forecast)
    end-if
    let $Result = cond(($Agg_Result_Forecast = 'P'),'Passed',
               cond(($Agg_Result_Forecast = 'N'),'N/A','Failed'))
    print $Result    (0,{FORECAST_COL})

    do Store-Aggregate-Results

  end-if

  print '*'  (+2,{DESCR_COL},{SEP_WIDTH}) fill

end-procedure


!************************************************
begin-procedure Aggregate-Test (#adp_h,#acp_h,#adp_n,#acp_n,:$Result)
!************************************************

  let $Result = 'F'
  let #hce_aggregate = #adp_h + #acp_h
  let #nhce_test1  = 1.25 * cond((#adp_n > #acp_n),#adp_n,#acp_n)
  let #min_nhce = cond((#adp_n > #acp_n),#acp_n,#adp_n)
  let #nhce_test2  = cond(((2 * #min_nhce) > (2 + #min_nhce)),(2 + #min_nhce),
                       (2 * #min_nhce))
  let #nhce_aggregate = #nhce_test1 + #nhce_test2

  if (#hce_aggregate < #nhce_aggregate)
    let $Result = 'P'
  else
    let #nhce_test3  = 1.25 * cond((#adp_n > #acp_n),#acp_n,#adp_n)
    let #max_nhce = cond((#adp_n > #acp_n),#adp_n,#acp_n)
    let #nhce_test4  = cond(((2 * #max_nhce) > (2 + #max_nhce)),(2 + #max_nhce),
                       (2 * #max_nhce))
    let #nhce_alt_aggregate = #nhce_test3 + #nhce_test4
    if (#hce_aggregate < #nhce_alt_aggregate)
      let $Result = 'P'
    end-if
  end-if

end-procedure


!************************************************
begin-procedure Store-Aggregate-Results
!************************************************

let $sql-statement = 'NDT004.SQR,Aggregate-Results,PS_NDT_Runctl,Update'
begin-SQL on-error=SQL-Error

Update PS_NDT_RUNCTL
  SET RESULTS_ACTUAL_AGG = $Agg_Result_Actual,
      RESULTS_FORCST_AGG = $Agg_Result_Forecast
end-SQL

end-procedure


!*******************************
begin-procedure Display-Time
!*******************************

  do Get-Current-Datetime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

end-procedure

!************************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

!******************************* End of NDT004 *******************************
