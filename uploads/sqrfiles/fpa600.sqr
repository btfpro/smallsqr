!***********************************************************************
! FPA600:  Retroactivity batch on Employee career                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:12:46:26                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! FPA600.LIS :  List the career events having been inserted or         *
!               deleted during to the Retroactivity process            *
! DEBUG :       - debugi  -> called functions name                     *
!               - debugij -> some of the used parameters               *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment
#include 'setup01.sqc'        ! Printer and page-size initialization

#define RETRO                 ! Use in FPA005.SQC,FPA310.SQC,FPA320.SQC


BEGIN-REPORT

Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
Do Init-Report
Do Proc-Main
Do End-Report
do Stdapi-Term

END-REPORT



!***************************************************************
!
!       Init-Report
!
!***************************************************************
BEGIN-PROCEDURE  Init-Report

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Init-Report '
#ENDIF

move 'FPA600' to $ReportID

do Stdapi-Init

let $language_cd = $CURR_LANGUAGE_CD

do Init_Report_Translation($ReportID, $language_cd)
do Append_Report_Translation($ReportID)

do Security-Param       !SQR security

if isnull($prcs_process_instance)

    INPUT $Emplid 'Enter the Employee Id'
    INPUT $empl_rcd 'Enter the Employee Record Number' TYPE=INTEGER

else
    do FP-Select-Parameters
    do Select-Parameters
end-if


! Trace files initialization
!---------------------------
Do Init-ficlog

END-PROCEDURE Init-Report



!***************************************************************
!
!      End-Report
!
!***************************************************************
BEGIN-PROCEDURE  End-Report

Do Close-ficlog

END-PROCEDURE End-Report



!***************************************************************
!
!       Get-Values
!
!***************************************************************
BEGIN-PROCEDURE  Get-Values

       do Get-Emplid
       do Get-EmplRcd

END-PROCEDURE Get-Values



!*****************************************************************
!
!  Init-ficlog : Trace files initialization
!
!  Used global variable : #Career_fhnd
!
!  Abrogation files edition is made by FPAWORD.SQC
!
!*****************************************************************
BEGIN-PROCEDURE  Init-ficlog

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Init-ficlog '
#ENDIF

LET #Career_fhnd = 99    ! handle Career insert/delete files
LET $Careerfic = '{IMPORTPREFIX}FPA600.lis'

! Trace files opening
!--------------------
open $Careerfic as #Career_fhnd FOR-WRITING RECORD=79:vary status=#result
if #result != 0
   LET $Careerfic = 'FPA600.lis'
   open $Careerfic as #Career_fhnd FOR-WRITING RECORD=79:vary status=#result
   if #result != 0
      DISPLAY '==> Problem OPENING Career file '
   end-if
end-if


! Trace files heading writing
!----------------------------
LET $msg_lg = RPAD( ' ', 79, '=' )
WRITE #Career_fhnd FROM $msg_lg:79

do Get_Field_Information($ReportID, 'ERROR1', $msg_lg, #DW)     ! MSG = Retroactivity impacted (FPA600) the :
LET $msg_lg = $msg_lg || $SysDateTime
WRITE #Career_fhnd FROM $msg_lg:79
LET $msg_lg = RPAD( ' ', 79, '=' )
WRITE #Career_fhnd FROM $msg_lg:79

END-PROCEDURE Init-ficlog



!***************************************************************
!
!   Function    : Close-ficlog
!
!   Description : Trace files closing
!
!   Used global variable : #Career_fhnd
!
!***************************************************************
BEGIN-PROCEDURE  Close-ficlog

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Close-ficlog '
#ENDIF

CLOSE #Career_fhnd

END-PROCEDURE Close-ficlog



!***************************************************************
!
!
!       Proc-Main
!
!
!***************************************************************
BEGIN-PROCEDURE Proc-Main

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Proc-Main '
#ENDIF

! Retractive moves selection
!---------------------------
Do Init-RETROTMP
Do Select-RETROSP

! Retroactive moves are processed one by one
!-------------------------------------------
Do Select-RETROTMP

! Mass Abrogations data file creation
!------------------------------------
Do Create-Fic-Abrog

END-PROCEDURE  Proc-Main



!*****************************************************************
!
!  Select-RETROSP : select the oldest Retractive move per Employee
!
!*****************************************************************
BEGIN-PROCEDURE Select-RETROSP

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Select-RETROSP '
#ENDIF

! Handle Retractive Deletion case : row being issued from the archive table
! code table = H
!--------------------------------------------------------------------------
let $clause-where = ' (A.FP_TBL_CD=''C'' or  A.FP_TBL_CD=''H'') '

if ( not isblank($emplid)  and  not isblank($empl_rcd) )

    move $empl_rcd to #empl_rcd
    let $clause-where = $clause-where||' and A.EMPLID= '''||$emplid||''' '
    let $clause-where = $clause-where || ' and A.EMPL_RCD='||$empl_rcd

end-if

#IFDEF DEBUGJ
   DISPLAY '--clause where : ' noline
   DISPLAY $clause-where
#ENDIF

let $bk-emplid = ''
let #bk-emplrcd = 0
let $bk-effdt = ''
let #bk-effseq =  0

let $sql-statement = 'FPA600.SQR,Select,Select-RETROSP'
BEGIN-SELECT  On-Error=SQL-Error
A.EMPLID                                    &mvt-emplid
A.EMPL_RCD                                  &mvt-emplrcd
{DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX}     &mvt-effdt2
A.EFFSEQ                                    &mvt-effseq2

        let $mvt_emplid = rtrim(&mvt-emplid,' ')
        let #mvt_emplrcd = &mvt-emplrcd

        if ( $mvt_emplid != $bk-emplid OR
                 #mvt_emplrcd != #bk-emplrcd )

                let $mvt_effdt2 = &mvt-effdt2
                let #mvt_effseq2 = &mvt-effseq2

                Do insert-RETROTMP( $mvt_emplid, #mvt_emplrcd,
                             $mvt_effdt2, #mvt_effseq2)

                let $bk-emplid = $mvt_emplid
                let #bk-emplrcd = #mvt_emplrcd

        end-if

from    PS_FPAEERETROSP A
       ,PS_FPFAST_PERS_VW2 SCRTY        !SQR security

where   [$clause-where]

        and A.EMPLID = SCRTY.EMPLID     !
     and A.EMPL_RCD = SCRTY.EMPL_RCD !SQR security
        [$SecurityClause]               !

order by A.EMPLID, A.EMPL_RCD, A.EFFDT, A.EFFSEQ

END-SELECT

END-PROCEDURE  Select-RETROSP



!***************************************************************
!
!   Select-RETROTMP : Loop on retroactive events which have to be
!                     computed.
!
!***************************************************************
BEGIN-PROCEDURE Select-RETROTMP

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Select-RETROTMP '
#ENDIF

let $sql-statement = 'FPA600.SQR,Select,Select-RETROTMP'
BEGIN-SELECT  On-Error=SQL-Error

R1.EMPLID
R1.EMPL_RCD
{DATEOUT-PREFIX}R1.EFFDT{DATEOUT-SUFFIX} &R1.EFFDT
R1.EFFSEQ
R1.FP_CNL_ROW
R1.FP_INST_STAT
R1.FP_ACTION_REF
R1.FP_NOTIF_REF
R1.ACTION
R1.ACTION_REASON
R1.FP_TBL_CD


        ! Variables initialization
        !-------------------------
        Do Var-Init-1

        ! Retroactive moves tracing
        !--------------------------
        Do trace-Retro ( #Career_fhnd, &R1.EMPLID, &R1.EMPL_RCD,
                                 &R1.EFFDT, &R1.EFFSEQ, &R1.ACTION )

        ! Update following Actions
        !----------------------------
        Do Impact-Career

        ! Update the retroactive action into the Career
        !----------------------------------------------
        Do FPA600-Updt-Career ( &R1.EMPLID, &R1.EMPL_RCD,
                                    &R1.EFFDT, &R1.EFFSEQ )


FROM PS_FPAEERETRO_TMP R1
ORDER BY R1.EMPLID, R1.EMPL_RCD

END-SELECT

END-PROCEDURE Select-RETROTMP



!***************************************************************
!
!   Impact-Career : Initialize begin date and end date for each retroactive move.
!
!   Used global variable :
!      - $ARRET:            stop-retroactivity flag
!      - $ERREUR_PARAM:     warning flag, retroactive move no compute
!      - $date-deb-retro:   retroactivity begin date
!      - $date-fin-retro:   retroactivity end date
!      - fields retrieves from the select in the Select-RETROTMP function
!
!***************************************************************
BEGIN-PROCEDURE Impact-Career

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Impact-Career '
#ENDIF

let $ARRET = 'N'

let $sql-statement = 'FPA600.SQR,Select,Impact-Career '
BEGIN-SELECT  On-Error=SQL-Error

R2.EMPLID
R2.EMPL_RCD
{DATEOUT-PREFIX}R2.EFFDT{DATEOUT-SUFFIX} &R2.EFFDT
R2.EFFSEQ           &R2.EFFSEQ
R2.FP_ACTION_REF    &R2.FP_ACTION_REF
R2.FP_NOTIF_REF     &R2.FP_NOTIF_REF
R2.FP_CNL_ROW       &R2.FP_CNL_ROW
R2.FP_INST_STAT     &R2.FP_INST_STAT
R2.ACTION           &R2.ACTION
R2.ACTION_REASON    &R2.ACTION_REASON
R2.FP_RANK_CD       &R2.FP_RANK_CD
R2.FP_STEP_CD       &R2.FP_STEP_CD
R2.FP_PROM_LCK      &R2.FP_PROM_LCK
R2.FP_SENTOSTPDY    &R2.FP_SENTOSTPDY
R2.FP_SENTOSTPMN    &R2.FP_SENTOSTPMN
R2.FP_SENTOSTPYR    &R2.FP_SENTOSTPYR
R2.FP_SENINSTPDY    &R2.FP_SENINSTPDY
R2.FP_SENINSTPMN    &R2.FP_SENINSTPMN
R2.FP_SENINSTPYR    &R2.FP_SENINSTPYR
R2.FP_TRUESEN_DY    &R2.FP_TRUESEN_DY
R2.FP_TRUESEN_MN    &R2.FP_TRUESEN_MN
R2.FP_TRUESEN_YR    &R2.FP_TRUESEN_YR
R2.FP_SENTRANSDY    &R2.FP_SENTRANSDY
R2.FP_SENTRANSMN    &R2.FP_SENTRANSMN
R2.FP_SENTRANSYR    &R2.FP_SENTRANSYR
R2.FP_SENKEPT_DY    &R2.FP_SENKEPT_DY
R2.FP_SENKEPT_MN    &R2.FP_SENKEPT_MN
R2.FP_SENKEPT_YR    &R2.FP_SENKEPT_YR
R2.FP_SENRAN_DY     &R2.FP_SENRAN_DY
R2.FP_SENRAN_MN     &R2.FP_SENRAN_MN
R2.FP_SENRAN_YR     &R2.FP_SENRAN_YR
R2.FP_SENCOR_DY     &R2.FP_SENCOR_DY
R2.FP_SENCOR_MN     &R2.FP_SENCOR_MN
R2.FP_SENCOR_YR     &R2.FP_SENCOR_YR
R2.FP_SEN_CALC      &R2.FP_SEN_CALC
R2.FP_CLD_INST      &R2.FP_CLD_INST
{DATEOUT-PREFIX}R2.FP_FOR_PROM_DT{DATEOUT-SUFFIX}   &R2.FP_FOR_PROM_DT
{DATEOUT-PREFIX}R2.FP_STEP_END_DT{DATEOUT-SUFFIX}   &R2.FP_STEP_END_DT
{DATEOUT-PREFIX}R2.FP_RK_ENT_DT{DATEOUT-SUFFIX}     &R2.FP_RK_ENT_DT
R2.FP_CORPS_CD      &R2.FP_CORPS_CD
{DATEOUT-PREFIX}R2.FP_CHG_COR_DT{DATEOUT-SUFFIX}    &R2.FP_CHG_COR_DT
R2.FP_CATG_FP       &R2.FP_CATG_FP
R2.FP_TRAINEE       &R2.FP_TRAINEE
R2.FP_TRNE_POSN     &R2.FP_TRNE_POSN
R2.FP_CATG_LEVEL    &R2.FP_CATG_LEVEL
R2.FP_TBL_CD        &R2.FP_TBL_CD
R2.FP_CHG_IND       &R2.FP_CHG_IND
{DATEOUT-PREFIX}R2.FP_APPL_SAL_DT{DATEOUT-SUFFIX}   &R2.FP_APPL_SAL_DT
R2.FP_ROW_CD        &R2.FP_ROW_CD
{DATEOUT-PREFIX}R2.FP_NOMINATION_DT{DATEOUT-SUFFIX} &R2.FP_NOMINATION_DT
R2.FP_RK_TRIALPD    &R2.FP_RK_TRIALPD
{DATEOUT-PREFIX}R2.FP_RK_PD_END_DT{DATEOUT-SUFFIX}  &R2.FP_RK_PD_END_DT
R2.FP_SANCTION      &R2.FP_SANCTION
R2.FP_DOWN_GRA      &R2.FP_DOWN_GRA
R2.FP_UPDT_PR_DT    &R2.FP_UPDT_PR_DT
R2.FP_RETROSPECT    &R2.FP_RETROSPECT
R2.FP_PROM_OK       &R2.FP_PROM_OK
R2.FP_PROPD_BRK     &R2.FP_PROPD_BRK
R2.FP_PRO_ACCESS    &R2.FP_PRO_ACCESS
R2.FP_EQUIV_STEP    &R2.FP_EQUIV_STEP

         if  $ARRET = 'N'

         ! Variables initialization
         !-------------------------
             Do Var-Init-2

         ! Search in parameter table for action needing processing
         !--------------------------------------------------------
            let $ERREUR_PARAM = 'N'

            Do Find-Prty-Act ( &R1.ACTION, &R2.ACTION, $ACT )

            EVALUATE   $ACT
            WHEN = 'A'
                  ! Retroactivity process is stopped
                  !---------------------------------

                  let $ARRET = 'Y'
                  let $date-deb-retro = &R1.EFFDT

                  Do Convert-To-DTU-Date(&R2.EFFDT, $DTU-date)
                  DO dtu-subtract-days($dtu-date, 1 , $dtu-fin-retro)
                  Do Convert-From-DTU-Date($dtu-fin-retro, $date-fin-retro)

                  DO traitement-arret

                  BREAK

             WHEN = 'S'
                  ! Row is deleted
                  !---------------

                  DO traitement-suppression

                  BREAK

             WHEN-OTHER

                  let $ERREUR_PARAM = 'Y'
                  let $ARRET = 'Y'

                  Do Traitement-interrompu

                  let $date-deb-retro =  &R1.EFFDT
                  Do Convert-To-DTU-Date(&R2.EFFDT, $DTU-date)
                  DO dtu-subtract-days($dtu-date, 1 , $dtu-fin-retro)
                  Do Convert-From-DTU-Date($dtu-fin-retro, $date-fin-retro)

                  DO traitement-arret

                  BREAK

             END-EVALUATE

        end-if

FROM  PS_FPAEECAREER  R2
WHERE R2.EMPLID = &R1.EMPLID and
      R2.EMPL_RCD = &R1.EMPL_RCD and
      (R2.EFFDT > {DATEIN-PREFIX}&R1.EFFDT{DATEIN-SUFFIX} OR
        (R2.EFFDT = {DATEIN-PREFIX}&R1.EFFDT{DATEIN-SUFFIX}
         and R2.EFFSEQ > &R1.EFFSEQ))
ORDER by R2.EMPLID, R2.EMPL_RCD, R2.EFFDT, R2.EFFSEQ

END-SELECT

if $ARRET = 'N'

  let $date-deb-retro = &R1.EFFDT

  Do Init-Datetime
  DO Get-Current-DateTime
  let $date-fin-retro = $AsOfToday

  Do traitement-arret

end-if

END-PROCEDURE Impact-Career



!***************************************************************
!
!   Traitement-arret : Retroactivity Period = [date-deb-retro; date-fin-retro]
!
!   Global variables used :
!      - $ARRET:            stop-retroactivity flag
!      - $date-deb-retro:   retroactivity begin date
!      - $date-fin-retro:   retroactivity end date
!      - fields retrieves from the select in Select-RETROTMP and Impact-Career functions
!
!***************************************************************
BEGIN-PROCEDURE traitement-arret

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Traitement-arret  '
   DISPLAY 'Retroactivity Period : [ ' noline
   display $date-deb-retro noline
   display ' ; ' noline
   display $date-fin-retro noline
   display ' ]'
#ENDIF


! Career reconstruction on the Retroactivity Period
!--------------------------------------------------
Do Reconstitue-CAreer(&R1.EMPLID, &R1.EMPL_RCD,
                            $date-deb-retro, $date-fin-retro )


! Step end-date update
!---------------------
Do select-datefin-career(&R1.EMPLID, &R1.EMPL_RCD,
                            $date-deb-retro, $date-fin-retro, $ARRET)

END-PROCEDURE traitement-arret



!***************************************************************
!
!   Traitement-suppression
!
!   Global variables used :
!      - #Career_fhnd
!      - fields retrieves from the select in Select-RETROTMP and Impact-Career functions
!
!***************************************************************
BEGIN-PROCEDURE traitement-suppression

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Traitement-suppression  '
#ENDIF

let $flag-abrog = 'N'
let $flag-req = 'N'

! Abrogations processing
!-----------------------
If not isblank(&R2.FP_NOTIF_REF)

    Do Select-abrog ($emplid1, #empl_rcd1, $effdt2,
                         #effseq2, $notif_ref2, $flag-abrog)
end-if

 ! Requests Table update
 !----------------------
If  not isblank(&R2.FP_ACTION_REF)

    let $flag-req = 'Y'
    Do Upd-Request (&R1.EMPLID, &R1.EMPL_RCD, &R2.FP_ACTION_REF)

End-if

 ! Bonus on hold
 !--------------
    ! Equivalent Sub-scale - Step case
    !---------------------------------
if $equiv_step2 = ''
    DO suspend-bonus(&R1.EMPLID, &R1.EMPL_RCD, &R2.FP_RANK_CD,
                     &R2.FP_STEP_CD,&R2.EFFDT, &R2.FP_STEP_END_DT)
else
    DO suspend-bonus(&R1.EMPLID, &R1.EMPL_RCD, &R2.FP_RANK_CD,
                     &R2.FP_EQUIV_STEP,&R2.EFFDT, &R2.FP_STEP_END_DT)
end-if


! Action is archived and deleted
!-------------------------------
Do historise-Career (&R1.EMPLID, &R1.EMPL_RCD, &R2.EFFDT, &R2.EFFSEQ)

If $Flag_Suppr = 'N'

        Do Insert-Fpaeedelrow ($Emplid1,#Empl_rcd1)
        let $Flag_Suppr = 'Y'

End-If



! Action deletion is traced
!--------------------------
Do trace-sup-Career ( #Career_fhnd, &R1.EMPLID, &R1.EMPL_RCD,
                     &R2.EFFDT, &R2.EFFSEQ, &R2.ACTION,
                     &R2.FP_RETROSPECT, $flag-req , $flag-abrog )

END-PROCEDURE traitement-suppression



!***************************************************************
!
!   Traitement-interrompu
!
!   Global variables used :
!           - $ARRET
!
!***************************************************************
BEGIN-PROCEDURE traitement-interrompu

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Traitement-interrompu  '
#ENDIF

! No-processing warning : write in SQR.LOG
!-----------------------------------------
display 'ALARM !! : '
display ' Retroactivity parameters problem : ' noline
display 'Action : ' noline
display  &R2.ACTION  noline
display ' which follows the retroactive action : ' noline
display &R1.ACTION
display ' ==> stop has occured on action ( ' noline
display &R1.EMPLID noline
display '/' noline
display &R1.EMPL_RCD noline
display '  ' noline
display &R2.EFFDT noline
display '/' noline
display &R2.EFFSEQ noline
display ' ) '


! Write in the FPA600.LIS trace file
!-----------------------------------
move &R1.EMPL_RCD to $l-rcd
move &R2.EFFSEQ to $l-seq


do Get_Field_Information($ReportID, 'ERROR2', $Descr, #DW)      ! MSG = Stop has occured on action ( %Key-Structure Action: %Action-Descr )
                                                                !       due to a problem with the retroactive setup

Let $Var1 =    &R1.EMPLID   || '/' || $l-rcd || '  '
            || &R2.EFFDT    || '/' || $l-seq

Do String-Replace ($Descr,'%Key-Structure',$Var1,$Descr)
Do String-Replace ($Descr,'%Action-Descr',&R2.ACTION,$Descr)

WRITE #Career_fhnd FROM $msg_lg:79

END-PROCEDURE traitement-interrompu



!***************************************************************
!
!   Create-Fic-Abrog
!
!   Global variables used :
!           - $Main_Where
!
!***************************************************************
BEGIN-PROCEDURE Create-Fic-Abrog

#IFDEF DEBUGI
   DISPLAY 'FPA600.SQR / Create-Fic-Abrog  '
#ENDIF

! $Main_where formatting
!-----------------------
let $Main_Where = ' FP_ORIG = ''R'' '

Do  Create-File-FPWORD               ! FPAWORD.SQC

! Cleaning of the Orders edition flat table
!------------------------------------------
DO  Delete-FLAT-ABROG

END-PROCEDURE Create-Fic-Abrog



!***************************************************************
!
!   Var-Init-1 :  Variables initialization
!
!***************************************************************
BEGIN-PROCEDURE Var-Init-1

    let $emplid1 = rtrim(&R1.EMPLID,' ')
    let #empl_rcd1 = &R1.EMPL_RCD
    let $effdt1 = &R1.EFFDT
    let #effseq1 = &R1.EFFSEQ
    let $action1 = rtrim(&R1.ACTION,' ')

    let $Flag_Suppr = 'N'

END-PROCEDURE Var-Init-1



!***************************************************************
!
!   Var-Init-2 :  Variables initialization
!
!***************************************************************
BEGIN-PROCEDURE Var-Init-2

    let $effdt2 =       &R2.EFFDT
    let #effseq2 =      &R2.EFFSEQ
    let $action2 =      rtrim(&R2.ACTION,' ')
    let $notif_ref2 =   rtrim(&R2.FP_NOTIF_REF,' ')
    let $action_ref2 =  rtrim(&R2.FP_ACTION_REF,' ')
    let $rank_cd2 =     rtrim(&R2.FP_RANK_CD,' ')
    let $step_cd2 =     rtrim(&R2.FP_STEP_CD,' ')
    let $step_end_dt2 = &R2.FP_STEP_END_DT
    let $retrospect2 =  rtrim(&R2.FP_RETROSPECT,' ')

    ! Equivalent Sub-scale - Step case
    !---------------------------------
    let $equiv_step2 =  rtrim(&R2.FP_EQUIV_STEP,' ')

END-PROCEDURE Var-Init-2



#Include 'fptestdt.sqc'     ! Routines for date and time formatting (FPS)
#Include 'fpa6inc.sqc'        ! Routines for FPA600 (FPS)
#include 'fpa110.sqc'         ! Routines for Abrogation Reports (FPS)
#include 'fpaword.sqc'        ! Routines for Abrogation Reports (FPS)
#include 'fpa005.sqc'         ! Compute promotion date (FPS)
#include 'fpa310.sqc'         ! Build the automatic promotion to-do list (FPS)
#include 'fpa320.sqc'         ! Automatic promotion (FPS)
#include 'curdttim.sqc'       ! Get-Current-DateTime procedure
#include 'stdapi.sqc'         ! Routines to update run status
#Include 'hrrnctl1.sqc'       ! Get run control parameter values
#Include 'hrgetval.sqc'       ! Get values mask routines
#Include 'fprnctl1.sqc'       ! Get run control parameter values (FPS)
#Include 'fpgetval.sqc'       ! Get values mask routines (FPS)
#Include 'number.sqc'         ! Routines to format numbers
#Include 'readxlat.sqc'       !Read-Translate-Table procedure
#include 'fpjob.sqc'          ! Insert-Fpaeeupdrow procedure (FPS)
#include 'fpsalary.sqc'       ! Routines for salary (FPS)
#Include 'fpa6anc.sqc'        ! Routines for FPA6INC.sqc (FPS)
#Include 'hrsecty.sqc'        ! Get SQR Security parameters
#include 'sqrtrans.sqc'       ! Translate SQR strings to given language
#Include 'fpckflt.sqc'        ! Routines for promotion errors (FPS)
#Include 'fpparam.sqc'        ! Routines for  Parameters Tables (FPS)
