!***********************************************************************
!  POS006: Indented Position Reporting Structure                       *
!***********************************************************************
!  Note:  This program is dependent upon the OrgCode structure built   *
!         by report POS006A; therefore, make sure you are using the    *
!         most current position reporting structure by running         *
!         POS006A first.                                               *
!***********************************************************************
!                                                                      *
!  Confidentiality Information:                                        *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:19:20                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP00001       Add $PublicSector indicator                            *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
Begin-Setup
#Include 'ptpsl177.sqc'  !Printer and page-size initialization
End-Setup
!********************************************
begin-program
    do Init-DateTime
    do Get-Current-DateTime
    do Init-Report
    do Process-Main
    do Stdapi-Term
end-program
!********************************************
begin-heading 6
#Include 'stdhdg03.sqc'
    print 'Posn No.'   (+2,1,12)
    print 'Position'   (0,14,11)
    print 'Incumbent'          (0,26,40)
    print 'Dotted-Line Report' (0,69,18)
    print 'Position'           (0,90,11)
end-heading
!********************************************
begin-procedure Init-Report
  move 'POS006' to $ReportID
  move 'Indented Position Reporting Chart ' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-As-Of-Date
    input $inlevel 'Enter highest level in position hierarchy to print >'
    display ' '
  else
    do Select-Parameters
  end-if
  do Initialization

end-procedure
!********************************************
begin-procedure Get-Values

   do Get-As-Of-Date
   do Get-Report-Level

end-procedure
!********************************************
begin-procedure Initialization
     move $inlevel to #inlevel
     if #inlevel = 0
        let #inlevel = 1
     end-if
     move 3 to #Level
     let #substring = (#inlevel * #Level)
end-procedure
!********************************************
begin-procedure Process-Main
begin-sql
delete from PS_POS6TMP1
end-sql

begin-sql
delete from PS_POS6RSLT
end-sql

do GetData1
let #Sequ_Num  = 0
let #merk = 1

begin-select
X.POSITION_NBR
X.REPORTS_TO
X.ORGCODE
X.DESCRSHORT
X.REPORT_DOTTED_LINE
   do Insert_Data(&X.POSITION_NBR,&X.REPORTS_TO,&X.ORGCODE,0,1,&X.REPORT_DOTTED_LINE
                  &X.DESCRSHORT)
   do GetReportsToPos(&X.POSITION_NBR,&X.REPORTS_TO,&X.ORGCODE,
                  #Sequ_Num,&X.REPORT_DOTTED_LINE,&X.DESCRSHORT)
   do CheckExistsReportsTo

from PS_POS6TMP1 X
WHERE X.USER_COUNT1 = #substring
end-select

do Get-Position-Record
end-procedure
!********************************************
begin-procedure CheckExistsReportsTo
   while #merk <= #Sequ_Num
      do SelectData
      let #merk = #merk + 1
   end-while
end-procedure
!********************************************
begin-procedure SelectData
begin-select
X1.POSITION_NBR
X1.REPORTS_TO
X1.ORGCODE
X1.DESCRSHORT
X1.REPORT_DOTTED_LINE
  do GetReportsToPos(&X1.POSITION_NBR,&X1.REPORTS_TO,
     &X1.ORGCODE,#Sequ_Num,&X1.REPORT_DOTTED_LINE,&X1.DESCRSHORT)
from PS_POS6RSLT X1
where X1.USER_COUNT1 = #merk
end-select
end-procedure
!********************************************
begin-procedure GetReportsToPos($POSITION_NBR,$REPORTS_TO,
                $ORGCODE,:#Sequ_Num,$REPORT_DOTTED_LINE,$DESCRSHORT)
begin-select
X2.POSITION_NBR
X2.REPORTS_TO
X2.ORGCODE
X2.DESCRSHORT
X2.REPORT_DOTTED_LINE
      let #Sequ_Num = #Sequ_Num + 1
      let #Leng = length(rtrim(&X2.ORGCODE,' '))
      let #Len1 = ((#Leng - #_substring) / 3 ) + 1
      let #Lev = ROUND(#Len1,0)
      do Insert_Data(&X2.POSITION_NBR,&X2.REPORTS_TO,&X2.ORGCODE,#Sequ_Num,
         #Lev,&X2.REPORT_DOTTED_LINE,&X2.DESCRSHORT)
from PS_POS6TMP1 X2
where X2.REPORTS_TO = $POSITION_NBR and
X2.REPORTS_TO <> X2.POSITION_NBR
end-select
end-procedure
!*********************************************
begin-procedure Insert_Data($X2.POSITION_NBR,$X2.REPORTS_TO,$X2.ORGCODE,
                #Sequ_Num,#Lev,$X2.REPORT_DOTTED_LINE,$X2.DESCRSHORT)
begin-sql
insert into PS_POS6RSLT(POSITION_NBR,REPORTS_TO,ORGCODE,USER_COUNT1,USER_COUNT2,REPORT_DOTTED_LINE,DESCRSHORT)
VALUES ($X2.POSITION_NBR,$X2.REPORTS_TO,$X2.ORGCODE,#Sequ_Num,#Lev,$X2.REPORT_DOTTED_LINE,$X2.DESCRSHORT)
end-sql
end-procedure
!*********************************************
begin-procedure GetData1
begin-select
X3.POSITION_NBR
X3.REPORTS_TO
X3.ORGCODE
X3.DESCRSHORT
X3.REPORT_DOTTED_LINE
  let #tmp1 = length(rtrim(&X3.ORGCODE,' '))
  let #tmp2 = #substring

  if #tmp1 = #tmp2
     let #TempLevel = #tmp2
  else
     let #TempLevel = 0
  end-if

  do InsertData1(&X3.POSITION_NBR,&X3.REPORTS_TO,
     &X3.ORGCODE,&X3.REPORT_DOTTED_LINE,&X3.DESCRSHORT,#TempLevel)



from PS_POSITION_DATA X3
WHERE X3.ORGCODE <> ' '
end-select
end-procedure
!********************************************
begin-procedure InsertData1($POSITION_NBR,$REPORTS_TO,$ORGCODE,$REPORT_DOTTED_LINE,$DESCRSHORT,#LEVELS)
begin-sql
insert into PS_POS6TMP1(POSITION_NBR,REPORTS_TO,ORGCODE,REPORT_DOTTED_LINE,DESCRSHORT,USER_COUNT1)
VALUES ($POSITION_NBR,$REPORTS_TO,$ORGCODE,$REPORT_DOTTED_LINE,$DESCRSHORT,#LEVELS)
end-sql
end-procedure
!*********************************************
begin-procedure Get-Position-Record
    display 'Level:' noline
    display #inlevel

    let $inlvlchar = to_char(#inlevel)
    let $ReportTitle = $ReportTitle || 'For Level ' || $inlvlchar
begin-select
A.POSITION_NBR
A.DESCRSHORT
A.ORGCODE
A.USER_COUNT2
A.REPORT_DOTTED_LINE
     let #i = 1 + (2 * &A.USER_COUNT2)
     print &A.POSITION_NBR   (+1,#i,12)
     print &A.DescrShort     (0,0,12)
     do Get-Incumbent
       if &A.REPORT_DOTTED_LINE <> ' '
        do Get-Dotted-Line-Report
      end-if


from PS_POS6RSLT A
order by A.ORGCODE
end-select
end-procedure
!***********************************************
Begin-procedure Get-Incumbent
    move ' ' to $Name
    move ' ' to $Emplid
    move 0 to #Flag
begin-SELECT
B.POSITION_NBR
B.EMPLID
    move &B.Emplid to $Emplid
    do Get-Employee-Name
      if #Flag = 0
         print $Name           (0,0,40)
         move 1 to #Flag
      else
         print $Name           (+1,-40,40)
      end-if
FROM PS_JOB B,
     PS_INSTALLATION IN1                                                !HP00001
WHERE B.POSITION_NBR = &A.POSITION_NBR
  AND (B.EMPL_STATUS IN('A','P','L','S')                                !HP99999
       OR (IN1.PUBLIC_SECTOR = 'Y'                                      !HP00001
           AND B.EMPL_STATUS = 'W'))                                    !HP99999
  AND B.EFFDT  = (SELECT MAX(C1.EFFDT)
                  FROM PS_JOB C1
                  WHERE C1.EMPLID = B.EMPLID
                    AND C1.EMPL_RCD = B.EMPL_RCD
                    AND C1.EFFDT <= $AsOfDate)
  AND B.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_JOB C2
                  WHERE C2.EMPLID = B.EMPLID
                    AND C2.EMPL_RCD = B.EMPL_RCD
                    AND C2.EFFDT = B.EFFDT)
end-SELECT
end-procedure

Begin-procedure Get-Dotted-Line-Report

begin-SELECT
D.DESCRSHORT

     print &A.REPORT_DOTTED_LINE   (0,70,12)
     print &D.DESCRSHORT           (0,91,12)

FROM PS_POSITION_DATA D
WHERE D.POSITION_NBR = &A.REPORT_DOTTED_LINE
  AND D.EFF_STATUS = 'A'
  AND D.EFFDT =
               (SELECT MAX(D1.EFFDT)
                FROM PS_POSITION_DATA D1
                WHERE D1.POSITION_NBR = D.POSITION_NBR
                AND D1.EFFDT <= $AsOfDate)
end-SELECT
end-procedure Get-Dotted-Line-Report



!********************************************************************
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routine for Date & Time formatting
#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'number.sqc'    !Reset printer procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
