!***********************************************************************
!  PER030.SQR:  Job Group Roster                                       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/08/06:00:32:28                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
! 6/19/2001 - Rewritten to accommodate AAP/ESTAB changes               *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#include 'hrhl02.sqc'   !Landscape Confidential Header


begin-program
   #debug show 'PER030: Begin-Program'
   do Use-Narrow-Layout
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report

   !********************************************************************
   !  Set miscellaneous report parameters
   !********************************************************************
   let $confidential = 'YES'
   let $quote = ''''

   evaluate $date-indicator

   !********************************************************************
   !  Format EFFDT selection criteria based on ASOFDATE
   !********************************************************************
   when = '1'
      let $effdt-criteria = ' <= ' || $quote || $asofdate || $quote
      break

   when-other
      display 'PER030/Error: Invalid Run Control Date Indicator'
      stop quiet

   end-evaluate

   evaluate $reportchoice

   !********************************************************************
   !  Generate report for the whole company
   !********************************************************************
   when = '1'
      do Get-Company-Info
      let $where-clause = ' AND C.COMPANY = ' || $quote || $company || $quote
      do Process-Main
      break

   !********************************************************************
   !  Generate report for a single establishment
   !********************************************************************
   when = '2'
      do Get-Establishment-Info
      let $where-clause = ' AND C.ESTABID = ' || $quote || $estab || $quote
      do Process-Main
      break

   !********************************************************************
   !  Generate report for a Headquarters Establishment and any other
   !  establishments under its control
   !********************************************************************
   when = '3'
      do Process-Multi-Estab
      break

   !********************************************************************
   !  Generate report for all Establishments
   !********************************************************************
   when = '4'
      do Process-Multi-Estab
      break

   when-other
      display 'PER030/Error: Invalid Run Control Report Choice'
      stop quiet

   end-evaluate

   !********************************************************************
   !  Print End-of-Report message on the very last page
   !********************************************************************
   if #reccnt > 24
      new-page
   end-if

   ALTER-PRINTER
      font=4
      point-size=18

   print '*** End of Report ***' (+3,1) Bold Center

   do Stdapi-Term
end-program


begin-procedure Process-Multi-Estab
   #debug show 'Process-Multi-Estab'
   let #i = 0
   do Get-Number-Of-Establishments
   while #i < #count
      let $estab = establishmentids.theestab(#i)
      do Get-Establishment-Info
      let $where-clause = ' AND C.ESTABID = ' || $quote || $estab || $quote
      do Process-Main
      add 1 to #i
      if #i < #count
         !*************************************************************
         !  Print each establishment on a separate page
         !*************************************************************
         new-page
      end-if
   end-while
end-procedure Process-Multi-Estab


begin-procedure Init-Report

   #debug show 'PER030: Init-Report'
   Let $_TableAlias = 'B'
   let $reportid    = 'PER030'
   let $reporttitle = 'Job Group Roster'
   show 'PER030: Start Program ' $reportid ' (' $reporttitle ')'

   do Stdapi-Init

   do Security-Param

   if $prcs_process_instance = ''
      display 'PER030/Error: The Job Group Roster program must be run using Process Scheduler'
      stop quiet
   else
      do Select-Parameters
   end-if
end-procedure Init-Report


begin-procedure Get-Values
   #debug show 'PER030: Get-Values'
   do Get-Date-Indicator
   do Get-As-Of-Date
   do Get-From-Thru-Date
   do Get-Run-Scope
   do Get-Company
   do Get-Establishment
   do Get-CTL_ESTABID
end-procedure Get-Values


begin-procedure Print-Column-Headings
   #debug show 'PER030: Print-Column-Headings'
   ALTER-PRINTER
      font=4
      point-size=12

   let $jobgroup-header = '[' || rtrim(&F.EEO_JOB_GROUP,' ') || '] ' || rtrim(&F.DESCR,' ') || $continue-header
   print $jobgroup-header    (+1,1) Bold

   ALTER-PRINTER
      font=4
      point-size=7.2

   print ' '                 (+2,1,30) Bold
   print ' '                 (0,+1,30) Bold
   print 'Ethnic'            (0,+1,11) Bold
   print ' '                 (0,+1,3)  Bold
   print 'Job Entry'         (0,+1,10) Bold
   print 'Salary'            (0,+1,8)  Bold
   print 'Cur'               (0,+1,3)  Bold
   print '   Hourly'         (0,+3,11) Bold
   print '   Monthly'        (0,+2,12) Bold
   print ' '                 (0,+1,10) Bold
   print '    Hire'          (0,+1,10) Bold
   print 'Job Title'         (0,+1,10) Bold

   print 'Name'              (+1,1,30) Bold
   print 'Job Title'         (0,+1,30) Bold
   print 'Group'             (0,+1,11) Bold
   print 'Sex'               (0,+1,3)  Bold
   print '    Date'          (0,+1,10) Bold
   print 'Grade'             (0,+1,8)  Bold
   print 'Cd'                (0,+1,3)  Bold
   print '     Rate'         (0,+3,11) Bold
   print '      Rate'        (0,+2,12) Bold
   print 'Dept Name'         (0,+1,10) Bold
   print '    Date'          (0,+1,10) Bold
   print '(at hire)'         (0,+1,10) Bold

   graphic (+1,1,165) horz-line 7
end-procedure Print-Column-Headings


begin-procedure Process-Main
   #debug show 'PER030: Process-Main' ' $effdt-criteria = ' $effdt-criteria ' $where-clause = ' $where-clause
   let $initial-estab-break    = 'Y'
   let $subsequent-estab-break = 'N'
   let $initial-jobgroup-break = 'Y'
   let #reccnt = 0

   ALTER-PRINTER
      font=4
      point-size=7.2

begin-select
C.ESTABID       () On-Break Level=1 Before=Process-Estab-Break    Print=Never
F.EEO_JOB_GROUP () On-Break Level=2 Before=Process-Jobgroup-Break Print=Never
F.DESCR
   let #reccnt    = #reccnt + 1
   let #remainder = mod(#reccnt, 2)
   if #remainder  = 0
      graphic (+1,1,165) box 1 0 15
   else
      print ' '            (+1)
   end-if
B.EMPLID
B.EMPL_RCD
NM.NAME                     (0,1,30)
D.DESCR                    (0,+1,30)
ETH.ETHNIC_GROUP
  let $fieldname  = 'ETHNIC_GROUP'
  let $fieldvalue = &ETH.ETHNIC_GROUP
  do Read-Translate-Table
  print $xlatshortname     (0,+1,11)
PDE.SEX                      (0,+2,2)
C.JOB_ENTRY_DT
   do Format-DateTime(&C.JOB_ENTRY_DT, $out, {DEFDATE}, '', '')
   print $out              (0,+1,10)
C.SAL_ADMIN_PLAN,C.GRADE
  let $salary-grade = &C.SAL_ADMIN_PLAN || '/' || &C.GRADE
  print $salary-grade      (0,+1,8)
C.CURRENCY_CD
   if #multicurr
      print &C.CURRENCY_CD (0,+1,3)
   end-if
C.HOURLY_RT
   do Format-Number(&C.HOURLY_RT, $out, '9999.999999')
   print $out              (0,+3,11)
C.MONTHLY_RT
   do Format-Number(&C.MONTHLY_RT, $out, '99999999.999')
   print $out              (0,+2,12)
C.BUSINESS_UNIT
  let $bu = rtrim(&C.BUSINESS_UNIT,' ')
C.DEPTID
  let $deptid = &C.DEPTID
  do Get-Department-Name
  print $deptnameabbrv     (0,+1,10)
B.HIRE_DT
   do Format-DateTime(&B.HIRE_DT, $out, {DEFDATE}, '', '')
   print $out              (0,+1,10)
   do Get-Title-At-Hire
   print &Y.DESCRSHORT     (0,+1,10)

   if #reccnt > 28
      let $continue-header = ' - Continued'
      do Process-Page-Break
   end-if

FROM  PS_PERSON A,
      PS_EMPLOYMENT B,
      PS_JOB C,
      PS_JOBCODE_TBL D,
      PS_DIVERS_ETHNIC DVR,
      PS_ETHNIC_GRP_TBL ETH,
      PS_EEO_JOB_GRP_TBL F,
      PS_NAMES NM,
      PS_PERS_DATA_EFFDT PDE
WHERE C.PER_ORG = 'EMP'   AND
A.EMPLID    =  B.EMPLID
   AND A.EMPLID    = NM.EMPLID
   AND A.EMPLID    =PDE.EMPLID
   AND NM.NAME_TYPE = 'PRI'
   AND C.ESTABID   <> ' '     !No EstabID
   AND C.EMPLID    = B.EMPLID
   AND C.EMPL_RCD  = B.EMPL_RCD
   AND C.EFFDT     = (SELECT MAX(C1.EFFDT) FROM PS_JOB C1
                       WHERE C1.EMPLID   = C.EMPLID
                         AND C1.EMPL_RCD = C.EMPL_RCD
                         AND C1.EFFDT [$effdt-criteria])
   AND C.EFFSEQ    = (SELECT MAX(C2.EFFSEQ) FROM PS_JOB C2
                       WHERE C2.EMPLID   = C.EMPLID
                         AND C2.EMPL_RCD = C.EMPL_RCD
                         AND C2.EFFDT    = C.EFFDT)

   AND NM.EFFDT    = (SELECT MAX(NM2.EFFDT) FROM PS_NAMES NM2
                        WHERE NM2.EMPLID     = NM.EMPLID
                          AND NM2.NAME_TYPE  = NM.NAME_TYPE
                          AND NM2.EFFDT [$effdt-criteria])

   AND PDE.EFFDT   = (SELECT MAX(PDE2.EFFDT) FROM PS_PERS_DATA_EFFDT PDE2
                        WHERE PDE2.EMPLID     = PDE.EMPLID
                          AND PDE2.EFFDT [$effdt-criteria])

   [$where-clause]

   AND C.EMPL_STATUS IN ('A','L','S','P','W')
   AND C.JOB_INDICATOR = 'P'
   AND C.EEO_CLASS    <> 'E'
   AND D.SETID      = C.SETID_JOBCODE
   AND D.JOBCODE    = C.JOBCODE
   AND D.EFF_STATUS = 'A'
   AND D.EFFDT      = (SELECT MAX(D1.EFFDT) FROM PS_JOBCODE_TBL D1
                      WHERE D1.SETID    = D.SETID
                        AND D1.JOBCODE  = D.JOBCODE
                        AND D1.EFFDT   <= C.EFFDT)
   AND D.EEO1CODE     <> 'N'
   AND DVR.EMPLID     = B.EMPLID
   AND DVR.PRIMARY_INDICATOR = 'Y' 
   AND DVR.SETID = ETH.SETID 
   AND DVR.ETHNIC_GRP_CD = ETH.ETHNIC_GRP_CD 
   AND ETH.EFFDT = (SELECT MAX(E2.EFFDT) FROM PS_ETHNIC_GRP_TBL E2 
                   WHERE E2.SETID = ETH.SETID 
                   AND E2.ETHNIC_GRP_CD = ETH.ETHNIC_GRP_CD 
                   AND E2.EFFDT [$effdt-criteria])
   AND F.EEO_JOB_GROUP = D.EEO_JOB_GROUP
   [$SecurityClausewithERN]
   ORDER BY C.ESTABID, F.EEO_JOB_GROUP, NM.NAME

end-select
   graphic (0,1,165) horz-line 7
end-procedure Process-Main


begin-procedure Process-Estab-Break
   #debug show 'PER030: Process-Estab-Break'
   if $initial-estab-break = 'Y'
      let $estab = &C.ESTABID
      do Get-Establishment-Info
      let $initial-estab-break = 'N'
   else
      let $subsequent-estab-break = 'Y'
   end-if
end-procedure Process-Estab-Break


begin-procedure Process-Jobgroup-Break
   #debug show 'PER030: Process-Jobgroup-Break'
   if $initial-jobgroup-break = 'Y'
      do Print-Column-Headings
      let $initial-jobgroup-break = 'N'
   else
      do Process-Page-Break
   end-if

   if $subsequent-estab-break = 'Y'
      let $estab = &C.ESTABID
      do Get-Establishment-Info
      let $subsequent-estab-break= 'N'
   end-if
end-procedure Process-Jobgroup-Break


begin-procedure Process-Page-Break
   #debug show 'PER030: Process-Page-Break'
   graphic (0,1,165) horz-line 7
   new-page
   do Print-Column-Headings
   let #reccnt = 0
   let $continue-header = ' '
end-procedure Process-Page-Break


begin-procedure Get-Title-At-Hire
   #debug show 'PER030: Get-Title-At-Hire'

begin-select
Y.DESCR
Y.DESCRSHORT

FROM  PS_JOB X,
      PS_JOBCODE_TBL Y

WHERE X.EMPLID    = &B.EMPLID
  AND X.EMPL_RCD  = &B.EMPL_RCD
  AND X.ACTION IN ('HIR','REH')

  AND X.EFFDT     = (SELECT MAX(X1.EFFDT) FROM PS_JOB X1
                     WHERE X1.EMPLID   = X.EMPLID
                       AND X1.EMPL_RCD = X.EMPL_RCD
                       AND X1.EFFDT [$effdt-criteria])

  AND X.EFFSEQ    = (SELECT MAX(X2.EFFSEQ) FROM PS_JOB X2
                     WHERE X2.EMPLID   = X.EMPLID
                       AND X2.EMPL_RCD = X.EMPL_RCD
                       AND X2.EFFDT    = X.EFFDT)

  AND Y.SETID     = X.SETID_JOBCODE
  AND Y.JOBCODE   = X.JOBCODE
  AND Y.EFF_STATUS = 'A'
  AND Y.EFFDT     = (SELECT MAX(Y1.EFFDT) FROM PS_JOBCODE_TBL Y1
                     WHERE Y1.SETID    = Y.SETID
                       AND Y1.JOBCODE  = Y.JOBCODE
                       AND Y1.EFFDT   <= X.EFFDT)
end-select
end-procedure Get-Title-At-Hire

!-----------------------------------------------------------------------

#include 'rgrnctl1.sqc'  !Get run control parameter values
#include 'rggetval.sqc'  !Get values mask routines
#include 'regutils.sqc'  !Get Company/Establishment data
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
