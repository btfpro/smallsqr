!*******************************************
!  PER058:  Primary Job Audit              *
!*******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:48:29                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment

begin-setup
#Include 'ptpsl177.sqc'   !Printer and page-size initialization
end-setup

!*******************************************
begin-report
!*******************************************

  let $Year4 = '1'
  do Init-DateTime
  do Init-Number

  do Init-Report

  if Not IsBlank($prcs_oprid)
    do Process-Main
    do Reset
    do Stdapi-Term
  end-if

end-report

!*******************************************
begin-heading 6
!*******************************************

  do Get_Field_Information ('PER058',     'REPORT_TITLE', $REPORTTITLE,   #DW)
#Include 'stdhdgtr.sqc'

  do Get_Field_Information ('HR',         'EMPLID',       $EMPLID_LBL,    #DW)
  do Get_Field_Information ('HR',         'NAME',         $NAME_LBL,      #DW)
  do Get_Field_Information ('PER058',     'ASOFDATE',     $ASOFDATE_LBL,  #DW)
  do Get_Field_Information ('PER058',     'EMPL_RCD',     $EMPL_RCD_LBL,  #DW)
  do Get_Field_Information ('PER058',     'EFFDT',        $EFFDT_LBL,     #DW)
  do Get_Field_Information ('PER058',     'JOB_INDICATOR',$JOB_INDIC_LBL, #DW)
  do Get_Field_Information ('HR',         'STATUS',       $STATUS_LBL,    #DW)
  do Get_Field_Information ('HR',         'BUS_UNIT',     $BUS_UNIT_LBL,  #DW)
  do Get_Field_Information ('HR',         'JOBCODE',      $JOBCODE_LBL,   #DW)
  do Get_Field_Information ('HR',         'DEPARTMENT',   $DEPT_LBL,      #DW)

  PRINT $EMPLID_LBL        (+2,1,18)
  PRINT $NAME_LBL          (0,20,36)
  PRINT $ASOFDATE_LBL      (0,57,10)
  PRINT $EMPL_RCD_LBL      (0,68,11)
  PRINT $EFFDT_LBL         (0,80,15)
  PRINT $JOB_INDIC_LBL     (0,96,13)
  PRINT $STATUS_LBL        (0,110,19)
  PRINT $BUS_UNIT_LBL      (0,130,19)
  PRINT $JOBCODE_LBL       (0,150,19)
  PRINT $DEPT_LBL          (0,170)

end-heading

!*******************************************
begin-procedure Init-Report
!*******************************************

  move 'PER058' to $ReportID
  do Stdapi-Init

  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
     goto last1
  end-if

  do Security-Param

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $Language_cd)
  do Append_Report_Translation ('HR')

  do Get_Field_Information ('PER058',     'MESSAGE1',     $MESSAGE1,      #DW)
  do Get_Field_Information ('PER058',     'MESSAGE2',     $MESSAGE2,      #DW)
  do Get_Field_Information ('PER058',     'MESSAGE3',     $MESSAGE3,      #DW)
  do Get_Field_Information ('PER058',     'NO_ROWS_FOUND',$NO_ROWS_FOUND, #DW)

last1:
end-procedure

!*******************************************
begin-procedure Get-Values
!*******************************************

  let $language_cd = $PRCS_LANGUAGE_CD
  do get-personnel-status

  if IsBlank($per_Org)
    let $PerOrgClause = ''
  else
    let $PerOrgClause = ' AND PD.PER_ORG = ''' || $per_Org || ''' '
  end-if

end-procedure

!*******************************************
begin-procedure Init-Array
!*******************************************

  let #M1 = 0
  let #M2 = 0
  let #M3 = 0

  CREATE-ARRAY name=MESSAGE1 size=500
    field=EMPLID:char:11
    field=ASOFDATE_MSG:text:10

  CREATE-ARRAY name=MESSAGE2 size=500
    field=EMPLID:char:11
    field=ASOFDATE_MSG:text:10

  CREATE-ARRAY name=MESSAGE3 size=500
    field=EMPLID:char:11
    field=ASOFDATE_MSG:text:10

end-procedure

!*******************************************
begin-procedure Process-Main
!*******************************************

  do Init-Array
  do Select-AsOfDates
  do Print-Message1
  do Print-Message2
  do Print-Message3

end-procedure

!*******************************************
begin-procedure Select-AsOfDates
!*******************************************

begin-SELECT DISTINCT
JD.EMPLID
JD.ASOFDATE

  let #PRIM = 0
  let #PRIM_ACT = 0
  let #PRIM_INACT = 0
  let #SEC_ACT = 0

  let $emplid = &jd.emplid
  let $asofdate = &jd.asofdate

  do Select-Multiple-Jobs

FROM  PS_JOB_DATE_VW JD,
      PS_JOB PD,
      PS_FAST_SQR_SEC_VW SCRTY
WHERE JD.EMPLID = PD.EMPLID
[$PerOrgClause]
[$SecurityClause]
AND SCRTY.EMPLID = PD.EMPLID
ORDER BY JD.EMPLID, JD.ASOFDATE DESC
end-SELECT

end-procedure

!*******************************************
begin-procedure Select-Multiple-Jobs
!*******************************************

begin-SELECT
A.EMPL_RCD        &A.EMPL_RCD
A.EFFDT           &A.EFFDT
A.EMPL_STATUS
A.JOB_INDICATOR   &A.JOB_INDICATOR
A.PER_ORG

     if &A.JOB_INDICATOR = 'P'
       LET #PRIM = #PRIM + 1
       evaluate &A.EMPL_STATUS
       when = 'A'
       when = 'L'
       when = 'P'
       when = 'S'
       when = 'W'
         let #PRIM_ACT = #PRIM_ACT + 1
       when-other
         let #PRIM_INACT = #PRIM_INACT + 1
       end-evaluate
     else
       evaluate &A.EMPL_STATUS
       when = 'A'
       when = 'L'
       when = 'P'
       when = 'S'
       when = 'W'
         let #SEC_ACT = #SEC_ACT + 1
       when-other
       end-evaluate
     end-if

FROM  PS_JOB A
WHERE A.EMPLID = &JD.EMPLID
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
  FROM PS_JOB A2
  WHERE EMPLID = A.EMPLID
    AND EMPL_RCD = A.EMPL_RCD
    AND EFFDT <= &JD.ASOFDATE)
  AND A.EFFSEQ =
  (SELECT MAX(EFFSEQ)
  FROM PS_JOB
  WHERE EMPLID = A.EMPLID
    AND EMPL_RCD = A.EMPL_RCD
    AND EFFDT = A.EFFDT)
ORDER BY A.EMPL_RCD
end-SELECT

  evaluate #PRIM
  when > 1
     PUT $emplid $asofdate into MESSAGE1(#M1)
     let #M1 = #M1 + 1
     break
  when = 1
     if #PRIM_INACT > 0 and #SEC_ACT > 0
       PUT $emplid $asofdate into MESSAGE2(#M2)
       let #M2 = #M2 + 1
     end-if
     break
  when-other
     PUT $emplid $asofdate into MESSAGE3(#M3)
     let #M3 = #M3 + 1
  end-evaluate

end-procedure
!*******************************************
begin-procedure Print-Message1
!*******************************************

  print $MESSAGE1          (+2,1)
  if #M1 = 0
     print $NO_ROWS_FOUND  (+1,1)
  end-if

  LET $old_emplid = ''
  LET $old_asofdate = ''
  LET #I = 0

  WHILE #I < #M1
     GET $Emplid $AsOFdate_MSG from MESSAGE1(#I)
     do Format-DateTime($asofdate_MSG, $asofdate_def, {DEFDATE}, '', '')
     do Print-Job-Data
     LET #I = #I + 1
  END-WHILE

end-procedure

!*******************************************
begin-procedure Print-Message2
!*******************************************

  print $MESSAGE2          (+2,1)
  if #M2 = 0
     print $NO_ROWS_FOUND  (+1,1)
  end-if

  LET $old_emplid = ''
  LET $old_asofdate = ''
  LET #I = 0

  WHILE #I < #M2
     GET $Emplid $AsOFdate_MSG from MESSAGE2(#I)
     do Format-DateTime($asofdate_MSG, $asofdate_def, {DEFDATE}, '', '')
     do Print-Job-Data
     LET #I = #I + 1
  END-WHILE

end-procedure

!*******************************************
begin-procedure Print-Message3
!*******************************************

  print $MESSAGE3          (+2,1)
  if #M3 = 0
     print $NO_ROWS_FOUND  (+1,1)
  end-if

  LET $old_emplid = ''
  LET $old_asofdate = ''
  LET #I = 0

  WHILE #I < #M3
     GET $Emplid $AsOFdate_MSG from MESSAGE3(#I)
     do Format-DateTime($asofdate_MSG, $asofdate_def, {DEFDATE}, '', '')
     do Print-Job-Data
     LET #I = #I + 1
  END-WHILE

end-procedure

!*******************************************
begin-procedure Print-Job-Data
!*******************************************

begin-SELECT  DISTINCT
!********BEGIN SQR NAME DISPLAY********************************
!PD2.NAME
PD2.NAME_DISPLAY
    !let $name = RTRIM(&pd2.name, ' ')
    let $name = RTRIM(&pd2.name_display, ' ')
!********END SQR NAME DISPLAY********************************

    position (+1)
    if $old_emplid <> $emplid
     print $emplid              (0,1,18)
     print $name                (0,20,36)
     print $asofdate_def        (0,57,10)
     LET $old_emplid = $emplid
     LET $old_asofdate = $asofdate
   else
     if $old_asofdate <> $asofdate
       print $asofdate_def      (0,57,10)
       LET $old_asofdate = $asofdate
     end-if
   end-if

J.EMPL_RCD                            (0,68,11)
J.EFFDT         &J.EFFDT
   do Format-DateTime(&J.EFFDT, $effdt, {DEFDATE}, '', '')
   print $effdt                 (0,80,15)

J.JOB_INDICATOR
   let $FieldName = 'JOB_INDICATOR'
   let $FieldValue = &J.JOB_INDICATOR
   do Read-Translate-Table
   print $XlatShortName         (0,96,13)

J.EMPL_STATUS
   let $FieldName = 'EMPL_STATUS'
   let $FieldValue = &J.EMPL_STATUS
   do Read-Translate-Table
   print $XlatShortName         (0,110,19)

J.BUSINESS_UNIT                 (0,130,19)
   let $BU = &J.business_unit

J.JOBCODE
J.SETID_JOBCODE
   let $jobcode = &j.jobcode
   let $setid = &j.setid_jobcode
   do Get-Job-Title
   print $JobTitleAbbrv         (0,150,19)

J.DEPTID
   let $DeptID = &j.deptid
   do Get-Department-Name
   print $DeptNameAbbrv         (0,170)

FROM  PS_JOB J, PS_PERSON_NAME PD2
WHERE PD2.EMPLID = $emplid
  AND J.EMPLID = PD2.EMPLID
  AND J.EFFDT =
  (SELECT MAX(EFFDT)
  FROM PS_JOB
  WHERE EMPLID = J.EMPLID
    AND EMPL_RCD = J.EMPL_RCD
    AND EFFDT <= $asofdate_MSG)
  AND J.EFFSEQ =
  (SELECT MAX(EFFSEQ)
  FROM PS_JOB
  WHERE EMPLID = J.EMPLID
    AND EMPL_RCD = J.EMPL_RCD
    AND EFFDT = J.EFFDT)
ORDER BY J.EMPL_RCD
end-SELECT

end-procedure

!*******************************************

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'stdapi.sqc'    !Routines to update run status
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#Include 'readxlat.sqc'
#Include 'getjobtl.sqc'
#Include 'getdptnm.sqc'

!*******************************************

