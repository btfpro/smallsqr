!**************************************
!  PAY104CN:  Business Payrolls Survey
!**************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/23:13:08:11                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'                 ! Printer and page-size initialization

begin-report
  do Init-Report
  close 10
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'PAY104CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Pay104cn_BPS to $ReportTitle
  display $ReportTitle
  display ' '

  do Init-DateTime
  do Init-Number

  do Select-Parameters

  move #RC_PAY.Balance_Year       to #Calendar_Year
  move #RC_PAY.Balance_Year       to $Calendar_Yr 9999
  move #RC_PAY.Balance_Period     to $MonthCd 09
  move #RC_PAY.Balance_Period     to #MonthCd

  do Get-Month-Name ($MonthCd, $MonthName)  !  use $MonthName

  do Get-Current-DateTime                   !  use $ReportDate


  do Month-Days(#MonthCd, #Calendar_Year, #Work_Month_Days)  ! last calendar date of reference month
  move #Work_Month_Days to $Work_Month_Days  '09'
  move $Calendar_Yr to $MnthEnd
  concat $MonthCd with $MnthEnd            '-xx'
  concat $Work_Month_Days with $MnthEnd    '-xx'
  do Convert-From-DTU-Date($MnthEnd ,$MnthEnd)

  do Set-Reference-Period-Dates

  do Array-Setup               !  create arrays to store data

  do Initialization            !  initialize files

  do Report                    !  main body of Report
  do Report-End

end-procedure


!*************************************************************************
!      REPORT-TRANSLATION   Read language-dependent text from the database
!*************************************************************************
begin-procedure Report-Translation   ! Read from PAY104CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY104CN', 'BPS'                  , $Pay104cn_BPS                , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'REPORT_SUMMARY'       , $Pay104cn_Report_Summary     , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUSINESS_NO'          , $Pay104cn_Business_No        , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'REFERENCE_MONTH'      , $Pay104cn_Reference_Month    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUS_CONTACT_RECORD'   , $Pay104cn_Bus_Contact_Record , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'NAME_OF_BUS'          , $Pay104cn_Name_Of_Bus        , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUS_CONTACT_NAME'     , $Pay104cn_Bus_Contact_Name   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUS_CONTACT_PHONE'    , $Pay104cn_Bus_Contact_Phone  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUS_CONTACT_FAX'      , $Pay104cn_Bus_Contact_Fax    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BUS_CONTACT_EMAIL'    , $Pay104cn_Bus_Contact_Email  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'COMMENTS'             , $Pay104cn_Comments           , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'PAYROLL_RECORD'       , $Pay104cn_Payroll_Record     , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'REPORTING_UNIT'       , $Pay104cn_Reporting_Unit     , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'PAY_PERIOD_TYPE'      , $Pay104cn_Pay_Period_Type    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'PAY_PERIOD'           , $Pay104cn_Pay_Period         , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'NUM_OF_EMPLOYEES'     , $Pay104cn_Num_Of_Employees   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'REGULAR_GROSS_PAY'    , $Pay104cn_Regular_Gross_Pay  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'OVERTIME_PAY'         , $Pay104cn_Overtime_Pay       , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'HOURS'                , $Pay104cn_Hours              , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'O/T_HOURS'            , $Pay104cn_O/T_Hours          , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'A._EMPL_PAID_BY_HR'   , $Pay104cn_A._Empl_Paid_By_Hr , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'B._SALARIED_EMPL'     , $Pay104cn_B._Salaried_Empl   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'C._OTHER_EMPL'        , $Pay104cn_C._Other_Empl      , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'D._WORK_OWNERS_INC'   , $Pay104cn_D._Work_Owners_Inc , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'E._PART_TIME_EMPL'    , $Pay104cn_E._Part_Time_Empl  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'SPECIAL_PAYMENTS'     , $Pay104cn_Special_Payments   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'EMPL_PAID_BY_HOUR'    , $Pay104cn_Empl_Paid_By_Hour  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'SALARIED_EMPLOYEES'   , $Pay104cn_Salaried_Employees , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'OTHER_EMPLOYEES'      , $Pay104cn_Other_Employees    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'WORKING_OWNERS'       , $Pay104cn_Working_Owners     , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK1_MONTHLY'       , $Pay104cn_Block1_Monthly     , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK2_2_MONTHS'      , $Pay104cn_Block2_2_Months    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK3_QUARTERLY'     , $Pay104cn_Block3_Quarterly   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK4_>QUARTERLY'    , $Pay104cn_Block4_>Quarterly  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK5_TAX_BENEFTS'   , $Pay104cn_Block5_Tax_Benefits, #dummy_width)
   do Get_Field_Information ('PAY104CN', 'BLOCK6_RETRO_PAY'     , $Pay104cn_Block6_Retro_Pay   , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'FROM'                 , $Pay104cn_From               , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'TO'                   , $Pay104cn_To                 , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'GROSS_MON_PAYROLL'    , $Pay104cn_Gross_Mon_Payroll  , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'TOTAL'                , $Pay104cn_Total              , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'HOURS_HOURLY_EE'      , $Pay104cn_Hours_Hourly_EE    , #dummy_width)
   do Get_Field_Information ('PAY104CN', 'HOURS_SALARIED_EE'    , $Pay104cn_Hours_Salaried_EE  , #dummy_width)

end-procedure


!***********************************************************************
!      SET-REFERENCE-PERIOD-DATES
!***********************************************************************
begin-procedure Set-Reference-Period-Dates

  move $Calendar_Yr to $RefMnthStrt
  concat $MonthCd with $RefMnthStrt       '-xx'
  concat '04' with $RefMnthStrt           '-xx'
  do Convert-From-DTU-Date($RefMnthStrt, $RefMnthStrt)


  if #MonthCd = 12
    let #YrEndCd    = #Calendar_Year + 1
    move #YrEndCd   to $YrEndCd 9999
    move $YrEndCd   to $RefMnthEnd
    let #MnthEndCd = 1
  else
    move $Calendar_Yr to $RefMnthEnd
    let #MnthEndCd    = #MonthCd + 1
  end-if

  move #MnthEndCd   to $MnthEndCd  09
  concat $MnthEndCd with $RefMnthEnd    '-xx'
  concat '03' with  $RefMnthEnd         '-xx'
  do Convert-From-DTU-Date($RefMnthEnd, $RefMnthEnd)

end-procedure


!***********************************************************************
!       ARRAY SETUP           create the data arrays for summing $ & hrs
!***********************************************************************
begin-procedure Array-Setup
  create-array name=LastPeriodTotals size=4 -           ! for A-E
               field=Empl_Type:char         -
               field=Pay_Period_Type:char   -
               field=Pay_Begin_Dt:char      -
               field=Pay_End_Dt:char        -
               field=EmplCount:number       -
               field=RegGross:number        -
               field=OT_Earns:number        -
               field=RegHrs:number          -
               field=OT_Hrs:number

  put 'Hourly'                    into LastPeriodTotals(0) Empl_Type
  put 'Salaried'                  into LastPeriodTotals(1) Empl_Type
  put 'Other'                     into LastPeriodTotals(2) Empl_Type
  put 'Working Owners'            into LastPeriodTotals(3) Empl_Type


  create-array name=SpecialPayments size=6  -          ! for Block 1-6
               field=BlockName:char         -
               field=Period_From_Dt:char    -
               field=Period_To_Dt:char      -
               field=Hourly:number          -
               field=Salaried:number        -
               field=Other:number           -
               field=WorkingOwners:number

  put 'Monthly'                   into SpecialPayments(0) BlockName
  put 'Every 2 Months'            into SpecialPayments(1) BlockName
  put 'Quarterly'                 into SpecialPayments(2) BlockName
  put 'Greater than Quarterly'    into SpecialPayments(3) BlockName
  put 'Federal Taxable Benefits'  into SpecialPayments(4) BlockName
  put 'Retroactive'               into SpecialPayments(5) BlockName


  do Array-Initialization                              ! set initial values
end-procedure

!***********************************************************************
!       ARRAY INITIALIZATION         initialize array fields
!***********************************************************************
begin-procedure Array-Initialization

  move 0 to #i1

  while #i1 < 4
    put ' ' into LastPeriodTotals(#i1) Pay_Period_Type
    put ' ' into LastPeriodTotals(#i1) Pay_Begin_Dt
    put ' ' into LastPeriodTotals(#i1) Pay_End_Dt
    put 0 into LastPeriodTotals(#i1) EmplCount
    put 0 into LastPeriodTotals(#i1) RegGross
    put 0 into LastPeriodTotals(#i1) OT_Earns
    put 0 into LastPeriodTotals(#i1) RegHrs
    put 0 into LastPeriodTotals(#i1) OT_Hrs
    add 1 to #i1
  end-while

  move 0 to #i2

  while #i2 < 6
    put ' ' into SpecialPayments(#i2) Period_From_Dt
    put ' ' into SpecialPayments(#i2) Period_To_Dt
    put 0 into SpecialPayments(#i2) Hourly
    put 0 into SpecialPayments(#i2) Salaried
    put 0 into SpecialPayments(#i2) Other
    put 0 into SpecialPayments(#i2) WorkingOwners
    add 1 to #i2
  end-while


  move 0   to #TotEmplHours
  move 0   to #TotEmpl
  move 0   to #AvgHrs
  move 0   to #TotPTEmpl

  move 0   to #TotalGross

end-procedure


!**************************************************************************
!       INITIALIZATION         initialize variables for record type 1 & 2
!**************************************************************************
begin-procedure Initialization

  do Open-File

  do Initialize-Record-Type-1
  do Initialize-Record-Type-2

end-procedure


!***********************************************************************
!       OPEN-FILE
!***********************************************************************
begin-procedure Open-File

  let $FileName      = 'BPS'
  add 1 to #FileExtension
  move #FileExtension to $FileExtension 099

  #ifdef OS400
    let $FileID = $FileName || '(D' || $FileExtension || ')'
  #else
    #ifdef MVS
      let $FileID = $FileName || $FileExtension
    #else
      let $FileID = '{IMPORTPREFIX}' || $FileName || '.'|| $FileExtension
    #endif
  #endif

  open $FileID as 10 for-writing record=480:vary

end-procedure


!***********************************************************************
!      PAGE HEADINGS              set report page headings
!***********************************************************************

begin-heading 4
  #Include 'stdhdg02.sqc'                       ! and also gets company data

  move 'Reference Month: ' to $MonthYear
  concat $MonthName with $MonthYear
  concat ', ' with $MonthYear
  concat $Calendar_Yr with $MonthYear

  move $Pay104cn_Report_Summary to $SummaryTitle

  print $SummaryTitle            (3,1)   center
  print $Pay104cn_Business_No    (4,1)
  print $BusinessNo              (0,13)
  print $MonthYear               (4,1)   center

end-heading

!***********************************************************************
!      REPORT PROCEDURE      main level
!***********************************************************************
begin-procedure Report

 do Process-Companies

end-procedure


!***********************************************************************
!      PROCESS-COMPANIES     get companies for reporting
!***********************************************************************

begin-procedure Process-Companies

begin-SELECT
RC_PAY104CN.COMPANY () on-break print=never level=1 before=Company-Change after=After-Comp-Chg save=$Prev-Comp
RC_PAY104CN.BPS_COMMENT

  move &RC_PAY104CN.Company  to  $Company
  do Get-RU-PayGroup

  if $RUFound  = 'N'
    display 'No reporting unit for company ' noline
    display &RC_PAY104CN.Company
  end-if

FROM  PS_RC_PAY104CN  RC_PAY104CN

WHERE RC_PAY104CN.OPRID         = $Prcs_OprID
  AND RC_PAY104CN.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
ORDER BY RC_PAY104CN.COMPANY

end-SELECT

end-procedure


!***********************************************************************
!      COMPANY-CHANGE    level 1
!***********************************************************************

begin-procedure Company-Change

  move &RC_PAY104CN.Company  to  $Company
  do Get-Bus-Contact-Info
  do Write-Record-Type-1
  do Print-Record-Type-1

  new-page

end-procedure


!***********************************************************************
!      AFTER-COMP-CHG
!***********************************************************************

begin-procedure After-Comp-Chg

  do Initialize-Record-Type-1

  move ' ' to $BusNo

end-procedure


!**********************************************************************
!      GET-RU-PAYGROUP    get rpting units and paygroups for a company
!**********************************************************************
begin-procedure Get-RU-PayGroup

  move ' ' to $PayGroup
  move ' ' to $Effdt
  move ' ' to $ReportingUnit
  move 'N' to $RUFound

begin-SELECT
PG.COMPANY
PG.BPS_RPT_UNIT      () on-break print=never level=1 after=Report-Unit-Change save=$Prev-ReportUnit
PG.PAYGROUP
PG.EFFDT

  move &PG.Paygroup     to $PayGroup
  move &PG.Effdt        to $Effdt
  move &PG.BPS_Rpt_Unit to $ReportingUnit
  move 'Y'              to $RUFound

FROM PS_BPS_REPORT_UNIT PG

WHERE PG.COMPANY      = &RC_PAY104CN.COMPANY
 AND  PG.EFFDT = (SELECT
       MAX(PG1.EFFDT)
       FROM PS_BPS_REPORT_UNIT PG1
       WHERE PG1.COMPANY       = PG.COMPANY
         AND PG1.EFFDT        <= $MnthEnd
         AND PG1.BPS_RPT_UNIT  = PG.BPS_RPT_UNIT)
 AND  PG.EFF_STATUS   = 'A'
ORDER BY PG.BPS_RPT_UNIT

end-SELECT

end-procedure


!***********************************************************************
!      REPORT-UNIT-CHANGE    Level 1
!***********************************************************************
begin-procedure Report-Unit-Change

     move $Prev-Comp           to $Company
     move $BusNo               to $BusinessNo
     move $Prev-ReportUnit     to $ReportingUnit

     do Build-BPS-Activity-Select
     do Build-BPS-Location-Select

     do Get-Last-Pay-Period
     do Get-First-Pay-Period

     if $LastPPFnd = 'Y'
       do Get-Pay-Period-Type
       do Process-Last-Pay-Period
     end-if

     do Process-Special-Payments
     do Process-Taxable-Benefits
     do Process-Taxable-Benefits-Earns                      ! GWC

     if $LastPPFnd = 'Y'
       do Process-Gross-Monthly-Payroll
     end-if

     do Get-Record-Type-2-Info

     do Write-Record-Type-2
     do Print-Record-Type-2
     do Initialize-Record-Type-2
     do Array-Initialization

     new-page


end-procedure


!***********************************************************************
!      MONTH-DAYS      get the last calendar day of the reference month
!***********************************************************************
begin-procedure Month-Days(#Work_Month, #Work_Year, :#Work_Month-Ddays)

  evaluate #Work_Month

      when =  1
      when =  3
      when =  5
      when =  7
      when =  8
      when =  10
      when =  12
          move 31  to  #Work_Month-Ddays
      when =  2
          move 28  to  #Work_Month-Ddays
          do Leap-Days(#Work_Year, #Work_Leap_Days)
          let #Work_Month-Ddays =  #Work_Month-Ddays + #Work_Leap_Days
      when =  4
      when =  6
      when =  9
      when =  11
          move 30  to  #Work_Month-Ddays
      when-other
          move 00  to  #Work_Month-Ddays
  end-evaluate

end-procedure


!***********************************************************************
!      LEAP-DAYS
!***********************************************************************
begin-procedure Leap-Days(#Work_Year, :#work_leap_days)

  let #leap_check = mod(#Work_Year, 4)

  if #leap_check <>  0
      move 0  to  #work_leap_days
  else
    let #leap_check = mod(#Work_Year, 100)

      if #leap_check <>  0
          move 1  to  #Work_leap_days
      else
          let #leap_check = mod(#Work_Year, 400)

          if #leap_check <>  0
            move 0  to  #Work_leap_days
          else
            move 1  to  #Work_leap_days
          end-if
      end-if
  end-if

end-procedure


!***********************************************************************
!      BUILD-BPS-ACTIVITY-SELECT
!***********************************************************************
begin-procedure Build-BPS-Activity-Select

  move ' 1 = 1 '  to $Select-Activity
  move 'N'        to $Activity-Found
  move 'Y'        to $First-Activity
  move 0          to #loc
  move ' '        to $Temp-Activity

begin-SELECT
BA.BPS_ACTIVITY_CD

  move 'Y' to $Activity-Found
  if $First-Activity  = 'Y'
    move 'N' to $First-Activity
    move 'BPS_ACTIVITY_CD IN ('to $Select-Activity
  end-if
  concat ' '''                  with $Select-Activity
  concat &BA.BPS_Activity_Cd    with $Select-Activity
  concat ''' '                  with $Select-Activity
  concat ','                    with $Select-Activity


FROM PS_BPS_REPORT_UNIT RU,
     PS_BPS_ACTIVITY    BA

WHERE RU.COMPANY      = $Company
  AND RU.COMPANY      = BA.COMPANY
  AND RU.EFFDT        = $Effdt
  AND RU.EFFDT        = BA.EFFDT
  AND RU.EFF_STATUS   = 'A'
  AND RU.BPS_RPT_UNIT = $ReportingUnit
  AND RU.BPS_RPT_UNIT = BA.BPS_RPT_UNIT
  AND RU.PAYGROUP     = $PayGroup

end-SELECT

  if $Activity-Found  = 'Y'
     concat ')' with $Select-Activity

     find ')' in $Select-Activity 0 #loc

     let #loc = #loc - 2

     extract $Temp-Activity from $Select-Activity 0 #loc

     concat ')' with $Temp-Activity

     let $Select-Activity = $Temp-Activity
  end-if

end-procedure

!***********************************************************************
!      BUILD-BPS-LOCATION-SELECT
!***********************************************************************
begin-procedure Build-BPS-Location-Select

  move ' 1 = 1 '  to $Select-Location
  move 'N'        to $Location-Found
  move 'Y'        to $First-Location
  move 0          to #loc
  move ' '        to $Temp-Location

begin-SELECT
BL.BPS_LOCATION_CD

  move 'Y' to $Location-Found
  if $First-Location = 'Y'
     move 'N' to $First-Location
     move 'TAX_LOCATION_CD IN (' to $Select-Location
  end-if
  concat ' '''                  with $Select-Location
  concat &BL.BPS_LOCATION_CD    with $Select-Location
  concat ''' '                  with $Select-Location
  concat ','                    with $Select-Location


FROM PS_BPS_REPORT_UNIT RU2,
     PS_BPS_LOCATION    BL

WHERE RU2.COMPANY      = $Company
  AND RU2.COMPANY      = BL.COMPANY
  AND RU2.EFFDT        = $Effdt
  AND RU2.EFFDT        = BL.EFFDT
  AND RU2.EFF_STATUS   = 'A'
  AND RU2.BPS_RPT_UNIT = $ReportingUnit
  AND RU2.BPS_RPT_UNIT = BL.BPS_RPT_UNIT
  AND RU2.PAYGROUP     = $PayGroup

end-SELECT

  if $Location-Found = 'Y'
     concat ')' with $Select-Location

     find ')' in $Select-Location 0 #loc

     let #loc = #loc - 2

     extract $Temp-Location from $Select-Location 0 #loc

     concat ')' with $Temp-Location

     let $Select-Location = $Temp-Location

  end-if

end-procedure


!***********************************************************************
!      GET-LAST-PAY-PERIOD
!***********************************************************************
begin-procedure Get-Last-Pay-Period

  move ' ' to $PeriodFromDDMM
  move ' ' to $PeriodToDDMM
  move ' ' to $LastPPFnd

begin-SELECT
PP.COMPANY
PP.PAYGROUP
PP.PAY_END_DT
PP.PAY_BEGIN_DT


  do Convert-To-DTU-Date(&PP.Pay_Begin_Dt , $PeriodFrom)
  let $PeriodFromDD   = substr($PeriodFrom,9,2)
  let $PeriodFromMM   = substr($PeriodFrom,6,2)
  let $PeriodFromDDMM = $PeriodFromDD || $PeriodFromMM

  do Convert-To-DTU-Date(&PP.Pay_End_Dt   , $PeriodTo)
  let $PeriodToDD     = substr($PeriodTo,9,2)
  let $PeriodToMM     = substr($PeriodTo,6,2)
  let $PeriodToDDMM   = $PeriodToDD   || $PeriodToMM

  move 'Y' to $LastPPFnd

FROM PS_PAY_CALENDAR  PP

WHERE PP.COMPANY           = $Company
  AND PP.PAYGROUP          = $PayGroup
  AND PP.PAY_CONFIRM_RUN   = 'Y'
  AND PP.PAY_OFF_CYCLE_CAL = 'N'
  AND PP.PAY_END_DT = 
     (SELECT MAX(PP1.PAY_END_DT)
      FROM PS_PAY_CALENDAR PP1
      WHERE PP1.PAY_END_DT <= $RefMnthEnd
        AND PP1.PAY_END_DT >= $RefMnthStrt
        AND PP1.COMPANY     = PP.COMPANY
        AND PP1.PAYGROUP    = PP.PAYGROUP
        AND PP1.PAY_CONFIRM_RUN   = PP.PAY_CONFIRM_RUN
        AND PP1.PAY_OFF_CYCLE_CAL = PP.PAY_OFF_CYCLE_CAL)

end-SELECT

end-procedure


!***********************************************************************
!      GET-FIRST-PAY-PERIOD
!***********************************************************************
begin-procedure Get-First-Pay-Period

  move ' ' to $GrossMonthFromDDMM

begin-SELECT
PP2.COMPANY
PP2.PAYGROUP
PP2.PAY_END_DT
PP2.PAY_BEGIN_DT


 do Convert-To-DTU-Date(&PP2.Pay_Begin_Dt , $GrossMonthFrom)
 let $GrossMonthFromDD   = substr($GrossMonthFrom,9,2)
 let $GrossMonthFromMM   = substr($GrossMonthFrom,6,2)
 let $GrossMonthFromDDMM = $GrossMonthFromDD || $GrossMonthFromMM


FROM PS_PAY_CALENDAR  PP2

WHERE PP2.COMPANY           = $Company
  AND PP2.PAYGROUP          = $PayGroup
  AND PP2.PAY_CONFIRM_RUN   = 'Y'
  AND PP2.PAY_OFF_CYCLE_CAL = 'N'
  AND PP2.PAY_END_DT = 
     (SELECT MIN(PP3.PAY_END_DT)
      FROM PS_PAY_CALENDAR PP3
      WHERE PP3.PAY_END_DT <= $RefMnthEnd
        AND PP3.PAY_END_DT >= $RefMnthStrt
        AND PP3.COMPANY     = PP2.COMPANY
        AND PP3.PAYGROUP    = PP2.PAYGROUP
        AND PP3.PAY_CONFIRM_RUN   = PP2.PAY_CONFIRM_RUN
        AND PP3.PAY_OFF_CYCLE_CAL = PP2.PAY_OFF_CYCLE_CAL)

end-SELECT

end-procedure


!****************************************************************
!      GET-PAY-PERIOD-TYPE       establish the pay period type
!****************************************************************
begin-procedure Get-Pay-Period-Type

  move ' ' to $PayPeriodType

begin-SELECT
PT.PAYGROUP
FT.FREQUENCY_TYPE

  evaluate &FT.FREQUENCY_TYPE
    when = 'W'                !Weekly
      move '1' to $PayPeriodType
    when = 'B'                !BiWeekly
      move '2' to $PayPeriodType
    when = 'S'                !SemiMonthly
      move '3' to $PayPeriodType
    when = 'M'                !Monthly
      move '4' to $PayPeriodType
    when-other                !Other
      move '5' to $PayPeriodType
  end-evaluate

FROM PS_PAYGROUP_TBL  PT,  PS_FREQUENCY_TBL FT
WHERE PT.COMPANY       = $Company
  AND PT.PAYGROUP      = $PayGroup
  AND PT.EFF_STATUS    = 'A'
  AND PT.EFFDT    =
    (SELECT MAX(PT1.EFFDT)
      FROM PS_PAYGROUP_TBL PT1
      WHERE PT1.COMPANY     = PT.COMPANY
        AND PT1.PAYGROUP    = PT.PAYGROUP
        AND PT1.EFFDT      <= &PP.PAY_END_DT )
  AND PT.PAY_FREQUENCY = FT.FREQUENCY_ID
  AND FT.EFF_STATUS    = 'A'
  AND FT.EFFDT         =
    (SELECT MAX(FT1.EFFDT)
      FROM PS_FREQUENCY_TBL FT1
      WHERE FT1.FREQUENCY_ID = FT.FREQUENCY_ID
        AND FT1.EFF_STATUS   = FT.EFF_STATUS
        AND FT1.EFFDT       <= PT.EFFDT)
end-SELECT

end-procedure


!***********************************************************************
!      TYPE-SET          routine to establish empl type
!***********************************************************************
begin-procedure Type-Set

  if $OfficerCd = 'C' or       !Working Owners
     $OfficerCd = 'D' or
     $OfficerCd = 'P' or
     $OfficerCd = 'V'

    move 3 to #Type#

  else
    evaluate $EmplType
      when = 'H'                !Hourly
      when = 'E'                !Exception Hourly
        move 0 to #Type#
      when = 'S'                !Salaried
        move 1 to #Type#
      when-other                !Other - undefined currently
        move 2 to #Type#
    end-evaluate

  end-if

end-procedure


!*****************************************************************
!      PROCESS-LAST-PAY-PERIOD  retrieve data for last pay period
!*****************************************************************
begin-procedure Process-Last-Pay-Period


  do Get-Reg-Pay-Earns

  do Get-OT-Pay-Earns

  move 0 to #NumOfBox

  while #NumOfBox  < 4

     evaluate #NumOfBox
       when = 0
         move 'RGP' to $BOX         ! regular gross pay
       when = 1
         move 'OTP' to $Box         ! overtime pay
       when = 2
         move 'THP' to $Box         ! total hours pay (hourly)
       when = 3
         move 'OTH' to $Box         ! overtime hours worked (hourly)
     end-evaluate

     do Get-Earns-Hrs

     add 1 to #NumOfBox
  end-while

  do Get-Employee-Count

  do Get-PT-Employee-Count

  do Calc-Avg-Hrs

end-procedure



!*************************************************************
!      GET-REG-PAY-EARNS  retrieve from PAY EARNINGS
!*************************************************************
begin-procedure Get-Reg-Pay-Earns

  if $Location-Found = 'Y'
    let $Select-Location1 = ' J.' || $Select-Location
  else
    let $Select-Location1 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity1 = ' CD.' || $Select-Activity
  else
    let $Select-Activity1 = $Select-Activity
  end-if

begin-SELECT

J.OFFICER_CD
J.EMPL_TYPE

SUM(E.REG_EARNS)               &Earnings
SUM(E.REG_HRLY_EARNS)          &Hrly_Earns

SUM(E.REG_EARN_HRS)            &Hours
SUM(E.REG_HRS)                 &Hrly_Hours

  move &J.Officer_Cd      to $OfficerCd
  move &J.Empl_Type       to $EmplType

  do Type-Set

  array-add &Earnings     to LastPeriodTotals(#Type#) RegGross
  array-add &Hrly_Earns   to LastPeriodTotals(#Type#) RegGross
  array-add &Hours        to LastPeriodTotals(#Type#) RegHrs
  array-add &Hrly_Hours   to LastPeriodTotals(#Type#) RegHrs

FROM  PS_PAY_CHECK     C,
      PS_PAY_EARNINGS  E,
      PS_JOB           J,
      PS_JOBCODE_TBL  CD

WHERE C.COMPANY     = $Company
  AND C.PAYGROUP    = $PayGroup
  AND C.PAY_END_DT  = &PP.PAY_END_DT
  AND C.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND E.COMPANY     = C.COMPANY
  AND E.PAYGROUP    = C.PAYGROUP
  AND E.PAY_END_DT  = C.PAY_END_DT
  AND E.OFF_CYCLE   = C.OFF_CYCLE
  AND E.PAGE_NUM       = C.PAGE_NUM
  AND E.LINE_NUM       = C.LINE_NUM
  AND J.EMPLID      = C.EMPLID
  AND J.COMPANY     = C.COMPANY
  AND J.PAYGROUP    = C.PAYGROUP
  AND J.EMPL_RCD   = C.EMPL_RCD

 AND
  #ifdef MVS
  \$Select-Location1\
  #else
  [$Select-Location1]
  #endif


  AND J.EFFDT =
      (SELECT MAX(J1.EFFDT)
      FROM PS_JOB J1
      WHERE J1.EMPLID    = J.EMPLID
        AND J1.COMPANY   = J.COMPANY
        AND J1.PAYGROUP  = J.PAYGROUP
        AND J1.EFFDT    <= &PP.PAY_END_DT
        AND J1.EMPL_RCD = J.EMPL_RCD )
  AND J.EFFSEQ =
      (SELECT MAX(J2.EFFSEQ)
      FROM PS_JOB J2
      WHERE J2.EMPLID    = J.EMPLID
        AND J2.COMPANY   = J.COMPANY
        AND J2.PAYGROUP  = J.PAYGROUP
        AND J2.EFFDT     = J.EFFDT
        AND J2.EMPL_RCD = J.EMPL_RCD)
  AND J.JOBCODE    =  CD.JOBCODE
  AND CD.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity1\
  #else
  [$Select-Activity1]
  #endif

  AND CD.SETID = J.SETID_JOBCODE
  AND CD.EFFDT =
  (SELECT MAX(CD1.EFFDT)
      FROM PS_JOBCODE_TBL CD1
      WHERE CD1.SETID       = CD.SETID
        AND CD1.JOBCODE     = CD.JOBCODE
        AND CD1.EFF_STATUS  = CD.EFF_STATUS
        AND CD1.EFFDT      <= &PP.PAY_END_DT)


GROUP BY J.OFFICER_CD, J.EMPL_TYPE

end-SELECT
end-procedure


!*****************************************************************
!      GET-OT-PAY-EARNS   retrieve from Pay Eanings and TForm Box
!*****************************************************************

begin-procedure Get-OT-Pay-Earns

  if $Location-Found = 'Y'
    let $Select-Location2 = ' J3.' || $Select-Location
  else
    let $Select-Location2 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity2 = ' CD2.' || $Select-Activity
  else
    let $Select-Activity2 = $Select-Activity
  end-if

begin-SELECT

J3.OFFICER_CD
J3.EMPL_TYPE
TFB4.BOX
SUM(E1.OT_HRLY_EARNS)           &OT_Earns
SUM(E1.OT_HRS)                  &OT_Hours

  move &J3.Officer_Cd   to $OfficerCd
  move &J3.Empl_Type    to $EmplType

  do Type-Set

  if rtrim(&TFB4.BOX, ' ') = 'OTP'
    array-add &OT_Earns       to LastPeriodTotals(#Type#) OT_Earns
  else
    if (rtrim(&TFB4.BOX, ' ') = 'OTH') and (#Type# = 0)
      array-add &OT_Hours     to LastPeriodTotals(#Type#) OT_Hrs
    end-if
  end-if


FROM  PS_PAY_CHECK     PC5,
      PS_PAY_EARNINGS  E1,
      PS_PAYGROUP_TBL  PT2,
      PS_EARNINGS_TBL  ET6,
      PS_TAXFORM_TBL   TFT7,
      PS_TAXFORM_BOX   TFB4,
      PS_TAXFORM_ERN   TFE3,
      PS_JOB           J3,
      PS_JOBCODE_TBL   CD2

WHERE PC5.COMPANY    = $Company
  AND PC5.PAYGROUP   = $PayGroup
  AND PC5.PAY_END_DT = &PP.PAY_END_DT
  AND PC5.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND E1.COMPANY      = PC5.COMPANY
  AND E1.PAYGROUP     = PC5.PAYGROUP
  AND E1.PAY_END_DT   = PC5.PAY_END_DT
  AND E1.OFF_CYCLE    = PC5.OFF_CYCLE
  AND E1.PAGE_NUM        = PC5.PAGE_NUM
  AND E1.LINE_NUM        = PC5.LINE_NUM
  AND PT2.COMPANY     = E1.COMPANY
  AND PT2.PAYGROUP    = E1.PAYGROUP
  AND PT2.EFF_STATUS  = 'A'
  AND PT2.EFFDT       =
      (SELECT MAX(PT3.EFFDT)
       FROM PS_PAYGROUP_TBL PT3
       WHERE PT3.COMPANY    = PT2.COMPANY
         AND PT3.PAYGROUP   = PT2.PAYGROUP
         AND PT3.EFF_STATUS = PT2.EFF_STATUS
         AND PT3.EFFDT     <= &PP.PAY_END_DT)
  AND PT2.ERNCD_OT_HRS = E1.ERNCD_OT_HRS
  AND ET6.ERNCD        = E1.ERNCD_OT_HRS
  AND ET6.EFFDT        =
      (SELECT MAX(ET7.EFFDT)
       FROM  PS_EARNINGS_TBL ET7
       WHERE ET7.ERNCD =   ET6.ERNCD
         AND ET7.EFFDT <=  E1.PAY_END_DT)
  AND TFT7.TAXFORM_ID = 'B'
  AND TFT7.EFFDT =
      (SELECT
       MAX(TFT8.EFFDT)
       FROM PS_TAXFORM_TBL  TFT8
       WHERE TFT8.EFFDT     <= &PP.PAY_END_DT
         AND TFT8.TAXFORM_ID = TFT7.TAXFORM_ID )
  AND TFB4.TAXFORM_ID = TFT7.TAXFORM_ID
  AND TFB4.EFFDT      = TFT7.EFFDT
  AND TFB4.BOX        IN ('OTP', 'OTH')
  AND TFE3.TAXFORM_ID = TFT7.TAXFORM_ID
  AND TFE3.EFFDT      = TFT7.EFFDT
  AND TFE3.BOX        = TFB4.BOX
  AND TFE3.ERNCD      = E1.ERNCD_OT_HRS
  AND J3.EMPLID       = PC5.EMPLID
  AND J3.COMPANY      = PC5.COMPANY
  AND J3.PAYGROUP     = PC5.PAYGROUP
  AND J3.EMPL_RCD    = PC5.EMPL_RCD

  AND
  #ifdef MVS
  \$Select-Location2\
  #else
  [$Select-Location2]
  #endif


  AND J3.EFFDT =
      (SELECT MAX(J4.EFFDT)
      FROM PS_JOB J4
      WHERE J4.EMPLID    = J3.EMPLID
        AND J4.COMPANY   = J3.COMPANY
        AND J4.PAYGROUP  = J3.PAYGROUP
        AND J4.EFFDT    <= &PP.PAY_END_DT
        AND J4.EMPL_RCD = J3.EMPL_RCD )
  AND J3.EFFSEQ =
      (SELECT MAX(J5.EFFSEQ)
      FROM PS_JOB J5
      WHERE J5.EMPLID    = J3.EMPLID
        AND J5.COMPANY   = J3.COMPANY
        AND J5.PAYGROUP  = J3.PAYGROUP
        AND J5.EFFDT     = J3.EFFDT
        AND J5.EMPL_RCD = J3.EMPL_RCD)
  AND J3.JOBCODE    =  CD2.JOBCODE
  AND CD2.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity2\
  #else
  [$Select-Activity2]
  #endif

  AND CD2.SETID = J3.SETID_JOBCODE
  AND CD2.EFFDT =
  (SELECT MAX(CD3.EFFDT)
      FROM PS_JOBCODE_TBL CD3
      WHERE CD3.SETID       = CD2.SETID
        AND CD3.JOBCODE     = CD2.JOBCODE
        AND CD3.EFF_STATUS  = CD2.EFF_STATUS
        AND CD3.EFFDT      <= &PP.PAY_END_DT)

GROUP BY J3.OFFICER_CD, J3.EMPL_TYPE, TFB4.BOX

end-SELECT

end-procedure


!*****************************************************************
!      GET-EARNS-HRS      retrieve data for the last pay period
!*****************************************************************
begin-procedure Get-Earns-Hrs

  if $Location-Found = 'Y'
    let $Select-Location3 = ' JE.' || $Select-Location
  else
    let $Select-Location3 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity3 = ' JCE.' || $Select-Activity
  else
    let $Select-Activity3 = $Select-Activity
  end-if

begin-SELECT

JE.OFFICER_CD
JE.EMPL_TYPE
SUM(V.OTH_EARNS)                &Oth_Earns
SUM(V.OTH_HRS)                  &Oth_Hrs

  move &JE.Officer_Cd   to $OfficerCd
  move &JE.Empl_Type    to $EmplType

  do Type-Set

  do Period-Array-Update


FROM  PS_PAY_CHECK     PC,
      PS_PAY_OTH_EARNS  V,
      PS_EARNINGS_TBL  ET,
      PS_TAXFORM_TBL  TFT,
      PS_TAXFORM_BOX  TFB,
      PS_TAXFORM_ERN  TFE,
      PS_JOB          JE,
      PS_JOBCODE_TBL  JCE

WHERE PC.COMPANY    = $Company
  AND PC.PAYGROUP   = $PayGroup
  AND PC.PAY_END_DT = &PP.PAY_END_DT
  AND PC.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND V.COMPANY     = PC.COMPANY
  AND V.PAYGROUP    = PC.PAYGROUP
  AND V.PAY_END_DT  = PC.PAY_END_DT
  AND V.OFF_CYCLE   = PC.OFF_CYCLE
  AND V.PAGE_NUM       = PC.PAGE_NUM
  AND V.LINE_NUM       = PC.LINE_NUM
  AND V.SEPCHK      = PC.SEPCHK
  AND ET.ERNCD      = V.ERNCD
  AND ET.EFFDT      =
      (SELECT MAX(ET1.EFFDT)
       FROM  PS_EARNINGS_TBL ET1
       WHERE ET1.ERNCD =   ET.ERNCD
         AND ET1.EFFDT <=  V.PAY_END_DT)
  AND TFT.TAXFORM_ID = 'B'
  AND TFT.EFFDT =
      (SELECT
       MAX(TFT1.EFFDT)
       FROM PS_TAXFORM_TBL  TFT1
       WHERE TFT1.EFFDT     <= &PP.PAY_END_DT
         AND TFT1.TAXFORM_ID = TFT.TAXFORM_ID )
  AND TFB.TAXFORM_ID = TFT.TAXFORM_ID
  AND TFB.EFFDT      = TFT.EFFDT
  AND TFB.BOX        = $BOX
  AND TFE.TAXFORM_ID = TFT.TAXFORM_ID
  AND TFE.EFFDT      = TFT.EFFDT
  AND TFE.BOX        = TFB.BOX
  AND TFE.ERNCD      = V.ERNCD
  AND JE.EMPLID      = PC.EMPLID
  AND JE.COMPANY     = PC.COMPANY
  AND JE.PAYGROUP    = PC.PAYGROUP
  AND JE.EMPL_RCD   = PC.EMPL_RCD

 AND
  #ifdef MVS
  \$Select-Location3\
  #else
  [$Select-Location3]
  #endif


  AND JE.EFFDT =
      (SELECT MAX(JE1.EFFDT)
      FROM PS_JOB JE1
      WHERE JE1.EMPLID    = JE.EMPLID
        AND JE1.COMPANY   = JE.COMPANY
        AND JE1.PAYGROUP  = JE.PAYGROUP
        AND JE1.EFFDT    <= &PP.PAY_END_DT
        AND JE1.EMPL_RCD = JE.EMPL_RCD )
  AND JE.EFFSEQ =
      (SELECT MAX(JE2.EFFSEQ)
      FROM PS_JOB JE2
      WHERE JE2.EMPLID    = JE.EMPLID
        AND JE2.COMPANY   = JE.COMPANY
        AND JE2.PAYGROUP  = JE.PAYGROUP
        AND JE2.EFFDT     = JE.EFFDT
        AND JE2.EMPL_RCD = JE.EMPL_RCD)
  AND JE.JOBCODE    =  JCE.JOBCODE
  AND JCE.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity3\
  #else
  [$Select-Activity3]
  #endif

  AND JCE.SETID = JE.SETID_JOBCODE
  AND JCE.EFFDT =
  (SELECT MAX(JCE1.EFFDT)
      FROM PS_JOBCODE_TBL JCE1
      WHERE JCE1.SETID       = JCE.SETID
        AND JCE1.JOBCODE     = JCE.JOBCODE
        AND JCE1.EFF_STATUS  = JCE.EFF_STATUS
        AND JCE1.EFFDT      <= &PP.PAY_END_DT)


GROUP BY JE.OFFICER_CD, JE.EMPL_TYPE

end-SELECT
end-procedure


!***********************************************************************
!      PERIOD-ARRAY-UPDATE
!***********************************************************************
begin-procedure Period-Array-Update

  evaluate $BOX
    when = 'RGP'
      array-add &Oth_Earns    to LastPeriodTotals(#Type#) RegGross
      break
    when = 'OTP'
      array-add &Oth_Earns    to LastPeriodTotals(#Type#) OT_Earns
      break
    when = 'THP'
      array-add &Oth_Hrs      to LastPeriodTotals(#Type#) RegHrs
      break
    when = 'OTH'
      array-add &Oth_Hrs      to LastPeriodTotals(#Type#) OT_Hrs
      break
    when-other
      break
  end-evaluate

end-procedure


!***********************************************************************
!      GET-Employee-Count
!***********************************************************************
begin-procedure Get-Employee-Count

  if $Location-Found = 'Y'
    let $Select-Location4 = ' EJ.' || $Select-Location
  else
    let $Select-Location4 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity4 = ' ECD.' || $Select-Activity
  else
    let $Select-Activity4 = $Select-Activity
  end-if

begin-SELECT

EJ.OFFICER_CD
EJ.EMPL_TYPE
COUNT(DISTINCT EJ.EMPLID)   &EmplCount


  move &EJ.Officer_Cd   to $OfficerCd
  move &EJ.Empl_Type    to $EmplType

  do Type-Set

  array-add &EmplCount  to LastPeriodTotals(#Type#) EmplCount


  put  $PayPeriodType               -
       $PeriodFromDDMM              -
       $PeriodToDDMM                -
  into LastPeriodTotals(#Type#)     -
       Pay_Period_Type              -
       Pay_Begin_Dt                 -
       Pay_End_Dt

FROM  PS_PAY_CHECK     EC,
      PS_JOB           EJ,
      PS_JOBCODE_TBL   ECD

WHERE EC.COMPANY     = $Company
  AND EC.PAYGROUP    = $PayGroup
  AND EC.PAY_END_DT  = &PP.PAY_END_DT
  AND EC.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND EJ.EMPLID      = EC.EMPLID
  AND EJ.COMPANY     = EC.COMPANY
  AND EJ.PAYGROUP    = EC.PAYGROUP
  AND EJ.EMPL_RCD   = EC.EMPL_RCD

 AND
  #ifdef MVS
  \$Select-Location4\
  #else
  [$Select-Location4]
  #endif


  AND EJ.EFFDT =
      (SELECT MAX(EJ1.EFFDT)
      FROM PS_JOB EJ1
      WHERE EJ1.EMPLID    = EJ.EMPLID
        AND EJ1.COMPANY   = EJ.COMPANY
        AND EJ1.PAYGROUP  = EJ.PAYGROUP
        AND EJ1.EFFDT    <= &PP.PAY_END_DT
        AND EJ1.EMPL_RCD = EJ.EMPL_RCD )
  AND EJ.EFFSEQ =
      (SELECT MAX(EJ2.EFFSEQ)
      FROM PS_JOB EJ2
      WHERE EJ2.EMPLID    = EJ.EMPLID
        AND EJ2.COMPANY   = EJ.COMPANY
        AND EJ2.PAYGROUP  = EJ.PAYGROUP
        AND EJ2.EFFDT     = EJ.EFFDT
        AND EJ2.EMPL_RCD = EJ.EMPL_RCD)
  AND EJ.JOBCODE    =  ECD.JOBCODE
  AND ECD.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity4\
  #else
  [$Select-Activity4]
  #endif

  AND ECD.SETID = EJ.SETID_JOBCODE
  AND ECD.EFFDT =
  (SELECT MAX(ECD1.EFFDT)
      FROM PS_JOBCODE_TBL ECD1
      WHERE ECD1.SETID       = ECD.SETID
        AND ECD1.JOBCODE     = ECD.JOBCODE
        AND ECD1.EFF_STATUS  = ECD.EFF_STATUS
        AND ECD1.EFFDT      <= &PP.PAY_END_DT)

GROUP BY EJ.OFFICER_CD, EJ.EMPL_TYPE

end-SELECT
end-procedure


!***********************************************************************
!      GET-PT-EMPLOYEE-COUNT
!***********************************************************************
begin-procedure Get-PT-Employee-Count

  if $Location-Found = 'Y'
    let $Select-Location5 = ' PTJ.' || $Select-Location
  else
    let $Select-Location5 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity5 = ' PTCD.' || $Select-Activity
  else
    let $Select-Activity5 = $Select-Activity
  end-if

begin-SELECT
COUNT(DISTINCT PTJ.EMPLID)   &PTEmplCount

  add &PTEmplCount to #TotPTEmpl

FROM  PS_PAY_CHECK     PTC,
      PS_JOB           PTJ,
      PS_JOBCODE_TBL   PTCD

WHERE PTC.COMPANY     = $Company
  AND PTC.PAYGROUP    = $PayGroup
  AND PTC.PAY_END_DT  = &PP.PAY_END_DT
  AND PTC.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND PTJ.EMPLID      = PTC.EMPLID
  AND PTJ.COMPANY     = PTC.COMPANY
  AND PTJ.PAYGROUP    = PTC.PAYGROUP
  AND PTJ.EMPL_RCD   = PTC.EMPL_RCD

 AND
  #ifdef MVS
  \$Select-Location5\
  #else
  [$Select-Location5]
  #endif
  AND PTJ.STD_HOURS   < 30
  AND PTJ.EFFDT =
      (SELECT MAX(PTJ1.EFFDT)
      FROM PS_JOB PTJ1
      WHERE PTJ1.EMPLID    = PTJ.EMPLID
        AND PTJ1.COMPANY   = PTJ.COMPANY
        AND PTJ1.PAYGROUP  = PTJ.PAYGROUP
        AND PTJ1.EFFDT    <= &PP.PAY_END_DT
        AND PTJ1.EMPL_RCD = PTJ.EMPL_RCD)
  AND PTJ.EFFSEQ =
      (SELECT MAX(PTJ2.EFFSEQ)
      FROM PS_JOB PTJ2
      WHERE PTJ2.EMPLID    = PTJ.EMPLID
        AND PTJ2.COMPANY   = PTJ.COMPANY
        AND PTJ2.PAYGROUP  = PTJ.PAYGROUP
        AND PTJ2.EFFDT     = PTJ.EFFDT
        AND PTJ2.EMPL_RCD = PTJ.EMPL_RCD)
  AND PTJ.JOBCODE    =  PTCD.JOBCODE
  AND PTCD.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity5\
  #else
  [$Select-Activity5]
  #endif

  AND PTCD.SETID = PTJ.SETID_JOBCODE
  AND PTCD.EFFDT =
  (SELECT MAX(PTCD1.EFFDT)
      FROM PS_JOBCODE_TBL PTCD1
      WHERE PTCD1.SETID       = PTCD.SETID
        AND PTCD1.JOBCODE     = PTCD.JOBCODE
        AND PTCD1.EFF_STATUS  = PTCD.EFF_STATUS
        AND PTCD1.EFFDT      <= &PP.PAY_END_DT)

end-SELECT
end-procedure


!***********************************************************************
!      CALC-AVG-HRS        Calc salaried avg hours/week
!***********************************************************************
begin-procedure Calc-Avg-Hrs

  do Calc-Total-Empl-Hours

  if #TotEmplHours  > 0
    move 1 to #Type#
    let #AvgHrs =  #TotEmplHours / #TotEmpl
    put #AvgHrs into LastPeriodTotals (#Type#) RegHrs
  end-if

end-procedure


!***********************************************************************
!      CALC-TOTAL-EMPL-HOURS
!***********************************************************************
begin-procedure Calc-Total-Empl-Hours

  if $Location-Found = 'Y'
    let $Select-Location6 = ' EHJ.' || $Select-Location
  else
    let $Select-Location6 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity6 = ' EHCD.' || $Select-Activity
  else
    let $Select-Activity6 = $Select-Activity
  end-if

begin-SELECT
EHJ.STD_HOURS                &StdHr
COUNT(DISTINCT EHJ.EMPLID)   &SalEmplCount

  let #EmplHours   = &StdHr * &SalEmplCount

  add #EmplHours        to #TotEmplHours
  add &SalEmplCount     to #TotEmpl

FROM  PS_PAY_CHECK     EHC,
      PS_JOB           EHJ,
      PS_JOBCODE_TBL   EHCD

WHERE EHC.COMPANY     = $Company
  AND EHC.PAYGROUP    = $PayGroup
  AND EHC.PAY_END_DT  = &PP.PAY_END_DT
  AND EHC.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND EHJ.EMPLID      = EHC.EMPLID
  AND EHJ.COMPANY     = EHC.COMPANY
  AND EHJ.PAYGROUP    = EHC.PAYGROUP
  AND EHJ.EMPL_RCD   = EHC.EMPL_RCD

 AND
  #ifdef MVS
  \$Select-Location6\
  #else
  [$Select-Location6]
  #endif

  AND EHJ.EMPL_TYPE   = 'S'
  AND EHJ.OFFICER_CD NOT IN ('C', 'D', 'P', 'V')
  AND EHJ.EFFDT =
      (SELECT MAX(EHJ1.EFFDT)
      FROM PS_JOB EHJ1
      WHERE EHJ1.EMPLID          = EHJ.EMPLID
        AND EHJ1.COMPANY         = EHJ.COMPANY
        AND EHJ1.PAYGROUP        = EHJ.PAYGROUP
        AND EHJ1.EFFDT          <= &PP.PAY_END_DT
        AND EHJ1.EMPL_RCD       = EHJ.EMPL_RCD)
  AND EHJ.EFFSEQ =
      (SELECT MAX(EHJ2.EFFSEQ)
      FROM PS_JOB EHJ2
      WHERE EHJ2.EMPLID          = EHJ.EMPLID
        AND EHJ2.COMPANY         = EHJ.COMPANY
        AND EHJ2.PAYGROUP        = EHJ.PAYGROUP
        AND EHJ2.EFFDT           = EHJ.EFFDT
        AND EHJ2.EMPL_RCD       = EHJ.EMPL_RCD)
  AND EHJ.JOBCODE    =  EHCD.JOBCODE
  AND EHCD.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity6\
  #else
  [$Select-Activity6]
  #endif

  AND EHCD.SETID = EHJ.SETID_JOBCODE
  AND EHCD.EFFDT =
  (SELECT MAX(EHCD1.EFFDT)
      FROM PS_JOBCODE_TBL EHCD1
      WHERE EHCD1.SETID       = EHCD.SETID
        AND EHCD1.JOBCODE     = EHCD.JOBCODE
        AND EHCD1.EFF_STATUS  = EHCD.EFF_STATUS
        AND EHCD1.EFFDT      <= &PP.PAY_END_DT)

GROUP BY EHJ.STD_HOURS
end-SELECT

end-procedure


!***********************************************************************
!     PROCESS-SPECIAL-PAYMENTS
!***********************************************************************
begin-procedure Process-Special-Payments

 move 0 to #NumOfBox

  while #NumOfBox  < 6

     evaluate #NumOfBox
       when = 0                          !Block 1 - Monthly
         move 'SP1' to $BOX
         let #Block = 0
       when = 1                          !Block 2 - Every 2 Months
         move 'SP2' to $Box
         let #Block = 1
       when = 2                          !Block 3 - Quarterly
         move 'SP3' to $Box
         let #Block = 2
       when = 3                          !Block 4 - Greater than Quarterly
         move 'SP4' to $Box
         let #Block = 3
       when = 4
         break
       when = 5                          !Block 6 - Retroactive pay
         move 'SP6' to $Box
         let #Block = 5
     end-evaluate

     if #NumOfBox <> 4
       do Process-Spcl-Pay-Box
       do Process-Spcl-Box-OT
     end-if

     add 1 to #NumOfBox
  end-while


end-procedure


!***********************************************************************
!     PROCESS-SPECIAL-PAYMENTS   block 1,2,3,4,6 - for the entire month
!***********************************************************************
begin-procedure Process-Spcl-Pay-Box

  if $Location-Found = 'Y'
    let $Select-Location7 = ' JS.' || $Select-Location
  else
    let $Select-Location7 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity7 = ' JCS.' || $Select-Activity
  else
    let $Select-Activity7 = $Select-Activity
  end-if

begin-SELECT

JS.OFFICER_CD
JS.EMPL_TYPE
SUM(V1.OTH_EARNS)          &SpclPayment

  move &JS.Officer_Cd   to $OfficerCd
  move &JS.Empl_Type to $EmplType

  do Type-Set

  do Update-Special-Pymt-Array


FROM  PS_PAY_CHECK     PC2,
      PS_PAY_OTH_EARNS  V1,
      PS_EARNINGS_TBL  ET2,
      PS_TAXFORM_TBL  TFT2,
      PS_TAXFORM_BOX  TFB1,
      PS_TAXFORM_ERN  TFE1,
      PS_JOB            JS,
      PS_JOBCODE_TBL   JCS

WHERE PC2.COMPANY    = $Company
  AND PC2.PAYGROUP   = $PayGroup
  AND PC2.CHECK_DT   >= $RefMnthStrt
  AND PC2.CHECK_DT   <= $RefMnthEnd
  AND PC2.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND V1.COMPANY     = PC2.COMPANY
  AND V1.PAYGROUP    = PC2.PAYGROUP
  AND V1.PAY_END_DT  = PC2.PAY_END_DT
  AND V1.OFF_CYCLE   = PC2.OFF_CYCLE
  AND V1.PAGE_NUM       = PC2.PAGE_NUM
  AND V1.LINE_NUM       = PC2.LINE_NUM
  AND V1.SEPCHK      = PC2.SEPCHK
  AND ET2.ERNCD      = V1.ERNCD
  AND ET2.EFFDT      =
      (SELECT MAX(ET3.EFFDT)
       FROM  PS_EARNINGS_TBL ET3
       WHERE ET3.ERNCD =   ET2.ERNCD
         AND ET3.EFFDT <=  V1.PAY_END_DT)
  AND TFT2.TAXFORM_ID = 'B'
  AND TFT2.EFFDT =
      (SELECT
       MAX(TFT3.EFFDT)
       FROM PS_TAXFORM_TBL  TFT3
       WHERE TFT3.EFFDT     <= V1.PAY_END_DT
         AND TFT3.TAXFORM_ID = TFT2.TAXFORM_ID )
  AND TFB1.TAXFORM_ID = TFT2.TAXFORM_ID
  AND TFB1.EFFDT      = TFT2.EFFDT
  AND TFB1.BOX        = $BOX
  AND TFE1.TAXFORM_ID = TFT2.TAXFORM_ID
  AND TFE1.EFFDT      = TFT2.EFFDT
  AND TFE1.BOX        = TFB1.BOX
  AND TFE1.ERNCD      = V1.ERNCD
  AND JS.EMPLID       = PC2.EMPLID
  AND JS.COMPANY      = PC2.COMPANY
  AND JS.PAYGROUP     = PC2.PAYGROUP
  AND JS.EMPL_RCD    = PC2.EMPL_RCD

  AND
  #ifdef MVS
  \$Select-Location7\
  #else
  [$Select-Location7]
  #endif

  AND JS.EFFDT =
      (SELECT MAX(JS1.EFFDT)
      FROM PS_JOB JS1
      WHERE JS1.EMPLID       = JS.EMPLID
        AND JS1.COMPANY      = JS.COMPANY
        AND JS1.PAYGROUP     = JS.PAYGROUP
        AND JS1.EFFDT       <= V1.PAY_END_DT
        AND JS1.EMPL_RCD    = JS.EMPL_RCD)
  AND JS.EFFSEQ =
      (SELECT MAX(JS2.EFFSEQ)
      FROM PS_JOB JS2
      WHERE JS2.EMPLID       = JS.EMPLID
        AND JS2.COMPANY      = JS.COMPANY
        AND JS2.PAYGROUP     = JS.PAYGROUP
        AND JS2.EFFDT        = JS.EFFDT
        AND JS2.EMPL_RCD    = JS.EMPL_RCD)

  AND JS.JOBCODE    =  JCS.JOBCODE
  AND JCS.EFF_STATUS = 'A'

  AND
  #ifdef MVS
  \$Select-Activity7\
  #else
  [$Select-Activity7]
  #endif

  AND JCS.SETID = JS.SETID_JOBCODE
  AND JCS.EFFDT =
  (SELECT MAX(JCS1.EFFDT)
      FROM PS_JOBCODE_TBL JCS1
      WHERE JCS1.SETID       = JCS.SETID
        AND JCS1.JOBCODE     = JCS.JOBCODE
        AND JCS1.EFF_STATUS  = JCS.EFF_STATUS
        AND JCS1.EFFDT      <= V1.PAY_END_DT)

GROUP BY JS.OFFICER_CD, JS.EMPL_TYPE

end-SELECT

end-procedure


!***********************************************************************
!      PROCESS-TAXABLE-BENEFITS     block 5 - for the entire month
!***********************************************************************
begin-procedure Process-Taxable-Benefits

  if $Location-Found = 'Y'
    let $Select-Location8 = ' JB.' || $Select-Location
  else
    let $Select-Location8 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity8 = ' JCB.' || $Select-Activity
  else
    let $Select-Activity8 = $Select-Activity
  end-if

begin-SELECT
JB.OFFICER_CD
JB.EMPL_TYPE
SUM(D.DED_CUR)          &TaxBnft

    move &JB.Officer_Cd   to $OfficerCd
    move &JB.Empl_Type    to $EmplType

    do Type-Set

    do Update-Tax-Ben-Array

FROM  PS_PAY_CHECK     PC3,
      PS_PAY_DEDUCTION   D,
      PS_DEDUCTION_TBL  DT,
      PS_TAXFORM_TBL  TFT4,
      PS_TAXFORM_BOX  TFB2,
      PS_TAXFORM_DED  TFD,
      PS_JOB          JB,
      PS_JOBCODE_TBL  JCB

WHERE PC3.COMPANY    = $Company
  AND PC3.PAYGROUP   = $PayGroup
  AND PC3.CHECK_DT   >= $RefMnthStrt
  AND PC3.CHECK_DT   <= $RefMnthEnd
  AND PC3.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND D.COMPANY      = PC3.COMPANY
  AND D.PAYGROUP     = PC3.PAYGROUP
  AND D.PAY_END_DT   = PC3.PAY_END_DT
  AND D.OFF_CYCLE    = PC3.OFF_CYCLE
  AND D.PAGE_NUM        = PC3.PAGE_NUM
  AND D.LINE_NUM        = PC3.LINE_NUM
  AND D.SEPCHK       = PC3.SEPCHK
  AND DT.PLAN_TYPE   = D.PLAN_TYPE
  AND DT.DEDCD       = D.DEDCD
  AND DT.EFFDT      =
      (SELECT MAX(DT1.EFFDT)
       FROM  PS_DEDUCTION_TBL DT1
       WHERE DT1.DEDCD  =  DT.DEDCD
         AND DT1.EFFDT <=  D.PAY_END_DT)
  AND TFT4.TAXFORM_ID = 'B'
  AND TFT4.EFFDT =
      (SELECT
       MAX(TFT5.EFFDT)
       FROM PS_TAXFORM_TBL  TFT5
       WHERE TFT5.EFFDT     <= D.PAY_END_DT
         AND TFT5.TAXFORM_ID = TFT4.TAXFORM_ID )
  AND TFB2.TAXFORM_ID = TFT4.TAXFORM_ID
  AND TFB2.EFFDT      = TFT4.EFFDT
  AND TFB2.BOX        = 'SP5'
  AND TFD.TAXFORM_ID  = TFT4.TAXFORM_ID
  AND TFD.EFFDT       = TFT4.EFFDT
  AND TFD.BOX         = TFB2.BOX
  AND TFD.PLAN_TYPE   = D.PLAN_TYPE
  AND TFD.DEDCD       = D.DEDCD
  AND TFD.DED_CLASS   = D.DED_CLASS
  AND TFD.DED_SLSTX_CLASS = D.DED_SLSTX_CLASS
  AND JB.EMPLID      = PC3.EMPLID
  AND JB.COMPANY     = PC3.COMPANY
  AND JB.PAYGROUP    = PC3.PAYGROUP
  AND JB.EMPL_RCD   = PC3.EMPL_RCD

  AND

  #ifdef MVS
  \$Select-Location8\
  #else
  [$Select-Location8]
  #endif

  AND JB.EFFDT =
      (SELECT MAX(JB1.EFFDT)
      FROM PS_JOB JB1
      WHERE JB1.EMPLID       = JB.EMPLID
        AND JB1.COMPANY      = JB.COMPANY
        AND JB1.PAYGROUP     = JB.PAYGROUP
        AND JB1.EFFDT       <= D.PAY_END_DT
        AND JB1.EMPL_RCD    = JB.EMPL_RCD)
  AND JB.EFFSEQ =
      (SELECT MAX(JB2.EFFSEQ)
      FROM PS_JOB JB2
      WHERE JB2.EMPLID       = JB.EMPLID
        AND JB2.COMPANY      = JB.COMPANY
        AND JB2.PAYGROUP     = JB.PAYGROUP
        AND JB2.EFFDT        = JB.EFFDT
        AND JB2.EMPL_RCD    = JB.EMPL_RCD)

  AND JB.JOBCODE    =  JCB.JOBCODE
  AND JCB.EFF_STATUS = 'A'

  AND
  #ifdef MVS
  \$Select-Activity8\
  #else
  [$Select-Activity8]
  #endif

  AND JCB.SETID = JB.SETID_JOBCODE
  AND JCB.EFFDT =
  (SELECT MAX(JCB1.EFFDT)
      FROM PS_JOBCODE_TBL JCB1
      WHERE JCB1.SETID       = JCB.SETID
        AND JCB1.JOBCODE     = JCB.JOBCODE
        AND JCB1.EFF_STATUS  = JCB.EFF_STATUS
        AND JCB1.EFFDT      <=  D.PAY_END_DT)

GROUP BY JB.OFFICER_CD, JB.EMPL_TYPE
end-SELECT

end-procedure


!***********************************************************************
!      PROCESS-TAXABLE-BENEFITS-EARNS     block 5 - for the entire month
!***********************************************************************
begin-procedure Process-Taxable-Benefits-Earns                ! GWC
SHOW 'PROCESSING TXBL BEN EARNS'

  if $Location-Found = 'Y'
    let $Select-Location12 = ' JE12.' || $Select-Location     ! GWC
  else
    let $Select-Location12 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity12 = ' JCE12.' || $Select-Activity
  else
    let $Select-Activity12 = $Select-Activity
  end-if

SHOW 'SELECT-LOCATION12 ->' $SELECT-LOCATION12
SHOW 'SELECT-ACTIVITY12 ->' $SELECT-ACTIVITY12
SHOW ' '

begin-SELECT
JE12.OFFICER_CD
JE12.EMPL_TYPE
SUM(V12.OTH_EARNS)        &TaxBenEarns
SUM(V12.OTH_HRS)          &TaxBenEarnsHRS

    move &JE12.Officer_Cd   to $OfficerCd
    move &JE12.Empl_Type    to $EmplType

    SHOW '>>>' $OFFICERCD '/' $EMPLTYPE '->' &TAXBENEARNS
    do Type-Set

    do Update-Tax-Ben-Earns-Array

FROM  PS_PAY_CHECK       PC12,
      PS_PAY_OTH_EARNS    V12,
      PS_EARNINGS_TBL    ET12,
      PS_TAXFORM_TBL    TFT12,
      PS_TAXFORM_BOX    TFB12,
      PS_TAXFORM_ERN    TFV12,
      PS_JOB             JE12,
      PS_JOBCODE_TBL    JCE12

WHERE PC12.COMPANY    = $Company
  AND PC12.PAYGROUP   = $PayGroup
  AND PC12.CHECK_DT   >= $RefMnthStrt
  AND PC12.CHECK_DT   <= $RefMnthEnd
  AND PC12.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND V12.COMPANY      = PC12.COMPANY
  AND V12.PAYGROUP     = PC12.PAYGROUP
  AND V12.PAY_END_DT   = PC12.PAY_END_DT
  AND V12.OFF_CYCLE    = PC12.OFF_CYCLE
  AND V12.PAGE_NUM     = PC12.PAGE_NUM
  AND V12.LINE_NUM     = PC12.LINE_NUM
  AND V12.SEPCHK       = PC12.SEPCHK
  AND ET12.ERNCD       = V12.ERNCD
  AND ET12.EFFDT       =
      (SELECT MAX(ET121.EFFDT)
       FROM  PS_EARNINGS_TBL ET121
       WHERE ET121.ERNCD  =  ET12.ERNCD
         AND ET121.EFFDT <=  V12.PAY_END_DT)
  AND TFT12.TAXFORM_ID = 'B'
  AND TFT12.EFFDT =
      (SELECT
       MAX(TFT121.EFFDT)
       FROM PS_TAXFORM_TBL  TFT121
       WHERE TFT121.EFFDT     <= V12.PAY_END_DT
         AND TFT121.TAXFORM_ID = TFT12.TAXFORM_ID )
  AND TFB12.TAXFORM_ID = TFT12.TAXFORM_ID
  AND TFB12.EFFDT      = TFT12.EFFDT
  AND TFB12.BOX        = 'SP5'
  AND TFV12.TAXFORM_ID = TFT12.TAXFORM_ID
  AND TFV12.EFFDT      = TFT12.EFFDT
  AND TFV12.BOX        = TFB12.BOX
  AND TFV12.ERNCD      = V12.ERNCD
  AND JE12.EMPLID      = PC12.EMPLID
  AND JE12.COMPANY     = PC12.COMPANY
  AND JE12.PAYGROUP    = PC12.PAYGROUP
  AND JE12.EMPL_RCD    = PC12.EMPL_RCD

  AND

  #ifdef MVS
  \$Select-Location12\
  #else
  [$Select-Location12]
  #endif

  AND JE12.EFFDT =
      (SELECT MAX(JE121.EFFDT)
      FROM PS_JOB JE121
      WHERE JE121.EMPLID       = JE12.EMPLID
        AND JE121.COMPANY      = JE12.COMPANY
        AND JE121.PAYGROUP     = JE12.PAYGROUP
        AND JE121.EFFDT       <= V12.PAY_END_DT
        AND JE121.EMPL_RCD     = JE12.EMPL_RCD)
  AND JE12.EFFSEQ =
      (SELECT MAX(JE122.EFFSEQ)
      FROM PS_JOB JE122
      WHERE JE122.EMPLID       = JE12.EMPLID
        AND JE122.COMPANY      = JE12.COMPANY
        AND JE122.PAYGROUP     = JE12.PAYGROUP
        AND JE122.EFFDT        = JE12.EFFDT
        AND JE122.EMPL_RCD     = JE12.EMPL_RCD)

  AND JE12.JOBCODE     =  JCE12.JOBCODE
  AND JCE12.EFF_STATUS = 'A'

  AND
  #ifdef MVS
  \$Select-Activity12\
  #else
  [$Select-Activity12]
  #endif

  AND JCE12.SETID = JE12.SETID_JOBCODE
  AND JCE12.EFFDT =
  (SELECT MAX(JCE121.EFFDT)
      FROM PS_JOBCODE_TBL JCE121
      WHERE JCE121.SETID       = JCE12.SETID
        AND JCE121.JOBCODE     = JCE12.JOBCODE
        AND JCE121.EFF_STATUS  = JCE12.EFF_STATUS
        AND JCE121.EFFDT      <=  V12.PAY_END_DT)

GROUP BY JE12.OFFICER_CD, JE12.EMPL_TYPE
end-SELECT

end-procedure


!***********************************************************************
!      PROCESS-SPCL-BOX-OT    retrieve from pay earnings and Tform boxes
!***********************************************************************
begin-procedure Process-Spcl-Box-OT

  if $Location-Found = 'Y'
    let $Select-Location11 = ' J6.' || $Select-Location
  else
    let $Select-Location11 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity11 = ' CD4.' || $Select-Activity
  else
    let $Select-Activity11 = $Select-Activity
  end-if

begin-SELECT

J6.OFFICER_CD
J6.EMPL_TYPE
SUM(E2.OT_HRLY_EARNS)           &OTSpcl

  move &J6.Officer_Cd   to $OfficerCd
  move &J6.Empl_Type    to $EmplType

  do Type-Set

  do Update-OT-Special-Pay


FROM  PS_PAY_CHECK     PC6,
      PS_PAY_EARNINGS  E2,
      PS_PAYGROUP_TBL  PT4,
      PS_EARNINGS_TBL  ET8,
      PS_TAXFORM_TBL   TFT9,
      PS_TAXFORM_BOX   TFB5,
      PS_TAXFORM_ERN   TFE4,
      PS_JOB           J6,
      PS_JOBCODE_TBL   CD4

WHERE PC6.COMPANY    = $Company
  AND PC6.PAYGROUP   = $PayGroup
  AND PC6.CHECK_DT   >= $RefMnthStrt
  AND PC6.CHECK_DT   <= $RefMnthEnd
  AND PC6.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND E2.COMPANY      = PC6.COMPANY
  AND E2.PAYGROUP     = PC6.PAYGROUP
  AND E2.PAY_END_DT   = PC6.PAY_END_DT
  AND E2.OFF_CYCLE    = PC6.OFF_CYCLE
  AND E2.PAGE_NUM        = PC6.PAGE_NUM
  AND E2.LINE_NUM        = PC6.LINE_NUM
  AND PT4.COMPANY     = E2.COMPANY
  AND PT4.PAYGROUP    = E2.PAYGROUP
  AND PT4.EFF_STATUS  = 'A'
  AND PT4.EFFDT       =
      (SELECT MAX(PT5.EFFDT)
       FROM PS_PAYGROUP_TBL PT5
       WHERE PT5.COMPANY    = PT4.COMPANY
         AND PT5.PAYGROUP   = PT4.PAYGROUP
         AND PT5.EFF_STATUS = PT4.EFF_STATUS
         AND PT5.EFFDT     <= E2.PAY_END_DT)
  AND PT4.ERNCD_OT_HRS = E2.ERNCD_OT_HRS
  AND ET8.ERNCD        = E2.ERNCD_OT_HRS
  AND ET8.EFFDT        =
      (SELECT MAX(ET9.EFFDT)
       FROM  PS_EARNINGS_TBL ET9
       WHERE ET9.ERNCD =   ET8.ERNCD
         AND ET9.EFFDT <=  E2.PAY_END_DT)
  AND TFT9.TAXFORM_ID = 'B'
  AND TFT9.EFFDT =
      (SELECT
       MAX(TFT10.EFFDT)
       FROM PS_TAXFORM_TBL  TFT10
       WHERE TFT10.EFFDT     <= E2.PAY_END_DT
         AND TFT10.TAXFORM_ID = TFT9.TAXFORM_ID )
  AND TFB5.TAXFORM_ID = TFT9.TAXFORM_ID
  AND TFB5.EFFDT      = TFT9.EFFDT
  AND TFB5.BOX        = $Box
  AND TFE4.TAXFORM_ID = TFT9.TAXFORM_ID
  AND TFE4.EFFDT      = TFT9.EFFDT
  AND TFE4.BOX        = TFB5.BOX
  AND TFE4.ERNCD      = E2.ERNCD_OT_HRS
  AND J6.EMPLID       = PC6.EMPLID
  AND J6.COMPANY      = PC6.COMPANY
  AND J6.PAYGROUP     = PC6.PAYGROUP
  AND J6.EMPL_RCD    = PC6.EMPL_RCD

  AND
  #ifdef MVS
  \$Select-Location11\
  #else
  [$Select-Location11]
  #endif


  AND J6.EFFDT =
      (SELECT MAX(J7.EFFDT)
      FROM PS_JOB J7
      WHERE J7.EMPLID    = J6.EMPLID
        AND J7.COMPANY   = J6.COMPANY
        AND J7.PAYGROUP  = J6.PAYGROUP
        AND J7.EFFDT    <= E2.PAY_END_DT
        AND J7.EMPL_RCD = J6.EMPL_RCD )
  AND J6.EFFSEQ =
      (SELECT MAX(J8.EFFSEQ)
      FROM PS_JOB J8
      WHERE J8.EMPLID    = J6.EMPLID
        AND J8.COMPANY   = J6.COMPANY
        AND J8.PAYGROUP  = J6.PAYGROUP
        AND J8.EFFDT     = J6.EFFDT
        AND J8.EMPL_RCD = J6.EMPL_RCD)
  AND J6.JOBCODE    =  CD4.JOBCODE
  AND CD4.EFF_STATUS = 'A'
  AND
  #ifdef MVS
  \$Select-Activity11\
  #else
  [$Select-Activity11]
  #endif

  AND CD4.SETID = J6.SETID_JOBCODE
  AND CD4.EFFDT =
  (SELECT MAX(CD5.EFFDT)
      FROM PS_JOBCODE_TBL CD5
      WHERE CD5.SETID       = CD4.SETID
        AND CD5.JOBCODE     = CD4.JOBCODE
        AND CD5.EFF_STATUS  = CD4.EFF_STATUS
        AND CD5.EFFDT      <= E2.PAY_END_DT)

GROUP BY J6.OFFICER_CD, J6.EMPL_TYPE

end-SELECT

end-procedure


!***********************************************************************
!      UPDATE-SPECIAL-PYMT-ARRAY        update special payments array
!***********************************************************************
begin-procedure Update-Special-Pymt-Array

  evaluate #Type#
    when = 0
      array-add &SpclPayment   to SpecialPayments(#Block) Hourly
    when = 1
      array-add &SpclPayment   to SpecialPayments(#Block) Salaried
    when = 2
      array-add &SpclPayment   to SpecialPayments(#Block) Other
    when = 3
      array-add &SpclPayment   to SpecialPayments(#Block) WorkingOwners
    when-other
      break
  end-evaluate

end-procedure


!***********************************************************************
!      UPDATE-OT-SPECIAL-PAY    update special OT payments
!***********************************************************************
begin-procedure Update-OT-Special-Pay

  evaluate #Type#
    when = 0
      array-add &OTSpcl  to SpecialPayments(#Block) Hourly
    when = 1
      array-add &OTSpcl  to SpecialPayments(#Block) Salaried
    when = 2
      array-add &OTSpcl  to SpecialPayments(#Block) Other
    when = 3
      array-add &OTSpcl  to SpecialPayments(#Block) WorkingOwners
    when-other
      break
  end-evaluate

end-procedure


!***********************************************************************
!      UPDATE-TAX-BEN-ARRAY    update block 5 - Federal taxable benefits
!***********************************************************************
begin-procedure Update-Tax-Ben-Array

  let #Block = 4

  evaluate #Type#
    when = 0
      array-add &TaxBnft to SpecialPayments(#Block) Hourly
    when = 1
      array-add &TaxBnft to SpecialPayments(#Block) Salaried
    when = 2
      array-add &TaxBnft to SpecialPayments(#Block) Other
    when = 3
      array-add &TaxBnft to SpecialPayments(#Block) WorkingOwners
    when-other
      break
  end-evaluate

end-procedure


!***********************************************************************
!      UPDATE-TAX-BEN-EARNS-ARRAY    update block 5 - Federal taxable benefits
!***********************************************************************
begin-procedure Update-Tax-Ben-Earns-Array                 ! GWC

  let #Block = 4

  evaluate #Type#
    when = 0
      array-add &TaxBenEarns to SpecialPayments(#Block) Hourly
    when = 1
      array-add &TaxBenEarns to SpecialPayments(#Block) Salaried
    when = 2
      array-add &TaxBenEarns to SpecialPayments(#Block) Other
    when = 3
      array-add &TaxBenEarns to SpecialPayments(#Block) WorkingOwners
    when-other
      break
  end-evaluate

end-procedure

!***********************************************************************
!      PROCESS-GROSS-MONTHLY-PAYROLL
!***********************************************************************
begin-procedure Process-Gross-Monthly-Payroll

  do Calc-Gross-Monthly-Payroll
  do Process-Monthly-Payroll-Box

end-procedure


!***********************************************************************
!      CALC-GROSS-MONTHLY-PAYROLL
!***********************************************************************
begin-procedure Calc-Gross-Monthly-Payroll

  if $Location-Found = 'Y'
    let $Select-Location9 = ' JP.' || $Select-Location
  else
    let $Select-Location9 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity9 = ' JCP.' || $Select-Activity
  else
    let $Select-Activity9 = $Select-Activity
  end-if

begin-SELECT

SUM(PT.TXGRS_CUR)   &true_T4

  add &true_T4 to #TotalGross

FROM  PS_PAY_CHECK    PC1,
      PS_PAY_TAX_CAN  PT,
      PS_JOB          JP,
      PS_JOBCODE_TBL  JCP
WHERE PC1.COMPANY     = $Company
  AND PC1.PAYGROUP    = $PayGroup
  AND PC1.PAY_END_DT <= &PP.PAY_END_DT
  AND PC1.PAY_END_DT >= &PP2.PAY_END_DT
  AND PC1.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND PC1.COMPANY     = PT.COMPANY
  AND PC1.PAYGROUP    = PT.PAYGROUP
  AND PC1.PAY_END_DT  = PT.PAY_END_DT
  AND PC1.OFF_CYCLE   = PT.OFF_CYCLE
  AND PC1.PAGE_NUM       = PT.PAGE_NUM
  AND PC1.LINE_NUM       = PT.LINE_NUM
  AND PC1.SEPCHK      = PT.SEPCHK
  AND PT.TAX_CLASS_CAN= 'TT4'
  AND JP.EMPLID       = PC1.EMPLID
  AND JP.COMPANY      = PC1.COMPANY
  AND JP.PAYGROUP     = PC1.PAYGROUP
  AND JP.EMPL_RCD    = PC1.EMPL_RCD

  AND
  #ifdef MVS
  \$Select-Location9\
  #else
  [$Select-Location9]
  #endif

  AND JP.EFFDT =
      (SELECT MAX(JP1.EFFDT)
      FROM PS_JOB JP1
      WHERE JP1.EMPLID    = JP.EMPLID
        AND JP1.COMPANY   = JP.COMPANY
        AND JP1.PAYGROUP  = JP.PAYGROUP
        AND JP1.EFFDT    <= PC1.PAY_END_DT
        AND JP1.EMPL_RCD = JP.EMPL_RCD)
  AND JP.EFFSEQ =
      (SELECT MAX(JP2.EFFSEQ)
      FROM PS_JOB JP2
      WHERE JP2.EMPLID    = JP.EMPLID
        AND JP2.COMPANY   = JP.COMPANY
        AND JP2.PAYGROUP  = JP.PAYGROUP
        AND JP2.EFFDT     = JP.EFFDT
        AND JP2.EMPL_RCD = JP.EMPL_RCD)
  AND JP.JOBCODE    =  JCP.JOBCODE
  AND JCP.EFF_STATUS = 'A'

  AND
  #ifdef MVS
  \$Select-Activity9\
  #else
  [$Select-Activity9]
  #endif

  AND JCP.SETID = JP.SETID_JOBCODE
  AND JCP.EFFDT =
      (SELECT MAX(JCP1.EFFDT)
      FROM PS_JOBCODE_TBL JCP1
      WHERE JCP1.SETID       = JCP.SETID
        AND JCP1.JOBCODE     = JCP.JOBCODE
        AND JCP1.EFF_STATUS  = JCP.EFF_STATUS
        AND JCP1.EFFDT      <= PC1.PAY_END_DT)

 end-SELECT

end-procedure


!***********************************************************************
!      PROCESS-MONTHLY-PAYROLL-BOX
!***********************************************************************
begin-procedure Process-Monthly-Payroll-Box

  if $Location-Found = 'Y'
    let $Select-Location10 = ' JG.' || $Select-Location
  else
    let $Select-Location10 = $Select-Location
  end-if

  if $Activity-Found = 'Y'
    let $Select-Activity10 = ' JCG.' || $Select-Activity
  else
    let $Select-Activity10 = $Select-Activity
  end-if

begin-SELECT
SUM(V2.OTH_EARNS)                &GrossMnthPay

  add &GrossMnthPay to #TotalGross

FROM  PS_PAY_CHECK     PC4,
      PS_PAY_OTH_EARNS V2,
      PS_EARNINGS_TBL  ET4,
      PS_TAXFORM_TBL   TFT6,
      PS_TAXFORM_BOX   TFB3,
      PS_TAXFORM_ERN   TFE2,
      PS_JOB           JG,
      PS_JOBCODE_TBL   JCG

WHERE PC4.COMPANY    = $Company
  AND PC4.PAYGROUP   = $PayGroup
  AND PC4.PAY_END_DT <= &PP.PAY_END_DT
  AND PC4.PAY_END_DT >= &PP2.PAY_END_DT
  AND PC4.PAYCHECK_STATUS IN ('A', 'F', 'R')
  AND V2.COMPANY     = PC4.COMPANY
  AND V2.PAYGROUP    = PC4.PAYGROUP
  AND V2.PAY_END_DT  = PC4.PAY_END_DT
  AND V2.OFF_CYCLE   = PC4.OFF_CYCLE
  AND V2.PAGE_NUM       = PC4.PAGE_NUM
  AND V2.LINE_NUM       = PC4.LINE_NUM
  AND V2.SEPCHK      = PC4.SEPCHK
  AND ET4.ERNCD      = V2.ERNCD
  AND ET4.EFFDT      =
      (SELECT MAX(ET5.EFFDT)
       FROM  PS_EARNINGS_TBL ET5
       WHERE ET5.ERNCD =   ET4.ERNCD
         AND ET5.EFFDT <=  V2.PAY_END_DT)
  AND TFT6.TAXFORM_ID = 'B'
  AND TFT6.EFFDT =
      (SELECT
       MAX(TFT7.EFFDT)
       FROM PS_TAXFORM_TBL  TFT7
       WHERE TFT7.EFFDT     <= V2.PAY_END_DT
         AND TFT7.TAXFORM_ID = TFT6.TAXFORM_ID )
  AND TFB3.TAXFORM_ID = TFT6.TAXFORM_ID
  AND TFB3.EFFDT      = TFT6.EFFDT
  AND TFB3.BOX        = 'TGR'
  AND TFE2.TAXFORM_ID = TFT6.TAXFORM_ID
  AND TFE2.EFFDT      = TFT6.EFFDT
  AND TFE2.BOX        = TFB3.BOX
  AND TFE2.ERNCD      = V2.ERNCD
  AND JG.EMPLID       = PC4.EMPLID
  AND JG.COMPANY      = PC4.COMPANY
  AND JG.PAYGROUP     = PC4.PAYGROUP
  AND JG.EMPL_RCD    = PC4.EMPL_RCD

  AND
  #ifdef MVS
  \$Select-Location10\
  #else
  [$Select-Location10]
  #endif

  AND JG.EFFDT =
      (SELECT MAX(JG1.EFFDT)
      FROM PS_JOB JG1
      WHERE JG1.EMPLID    = JG.EMPLID
        AND JG1.COMPANY   = JG.COMPANY
        AND JG1.PAYGROUP  = JG.PAYGROUP
        AND JG1.EFFDT    <= V2.PAY_END_DT
        AND JG1.EMPL_RCD = JG.EMPL_RCD)
  AND JG.EFFSEQ =
      (SELECT MAX(JG2.EFFSEQ)
      FROM PS_JOB JG2
      WHERE JG2.EMPLID    = JG.EMPLID
        AND JG2.COMPANY   = JG.COMPANY
        AND JG2.PAYGROUP  = JG.PAYGROUP
        AND JG2.EFFDT     = JG.EFFDT
        AND JG2.EMPL_RCD = JG.EMPL_RCD)
  AND JG.JOBCODE   =  JCG.JOBCODE
  AND JCG.EFF_STATUS = 'A'

  AND
  #ifdef MVS
  \$Select-Activity10\
  #else
  [$Select-Activity10]
  #endif

  AND JCG.SETID = JG.SETID_JOBCODE
  AND JCG.EFFDT =
  (SELECT MAX(JCG1.EFFDT)
      FROM PS_JOBCODE_TBL JCG1
      WHERE JCG1.SETID       = JCG.SETID
        AND JCG1.JOBCODE     = JCG.JOBCODE
        AND JCG1.EFF_STATUS  = JCG.EFF_STATUS
        AND JCG1.EFFDT      <= V2.PAY_END_DT)


end-SELECT

end-procedure


!********************************************************************
!         GET-BUS-CONTACT-INFO
!********************************************************************
begin-procedure Get-Bus-Contact-Info

begin-SELECT
BC.BPS_BUSINESS_NO
BC.BPS_BUSINESS_NAME
BC.BPS_CONTACT_NAME
BC.BPS_PHONE_NO
BC.BPS_FAX_NO
BC.EMAILID

FROM PS_BPS_CONTACT_CAN  BC
WHERE BC.COMPANY =  &RC_PAY104CN.COMPANY

end-SELECT

end-procedure


!********************************************************************
!         WRITE-RECORD-TYPE-1        write record type 1 to file
!********************************************************************
 begin-Procedure Write-Record-Type-1

   move '01' to $SurveyCode
   move '01' to $RecordType

   let $SurveyRefMonth  = $Calendar_Yr || $MonthCd
   move &BC.BPS_Business_No       to $BusinessNo
   move &BC.BPS_Business_No       to $BusNo
   move &BC.BPS_Business_Name     to $LegalNameBus
   move &BC.BPS_Contact_Name      to $BusContactName

   if &BC.BPS_PHONE_NO <> ' '
     let $AreaCode = substr(&BC.BPS_PHONE_NO, 1, 3)
     let $Prefix   = substr(&BC.BPS_PHONE_NO, 5, 3)
     let $PhoneNum = substr(&BC.BPS_PHONE_NO, 9, 4)
     let $Phone    = $AreaCode || $Prefix || $PhoneNum
     move $Phone       to $BusContactPhone
   end-if

   if &BC.BPS_FAX_NO <> ' '
    let $FaxAreaCode = substr(&BC.BPS_FAX_NO, 1, 3)
    let $FaxPrefix   = substr(&BC.BPS_FAX_NO, 5, 3)
    let $FaxNum      = substr(&BC.BPS_FAX_NO, 9, 4)
    let $Fax         = $FaxAreaCode || $FaxPrefix  || $FaxNum
    move $Fax          to $BusContactFax
   end-if

   if &BC.EmailId <> ' '
     let $BusContactEmail = substr(&BC.EmailId, 1,50)
   end-if

   move &RC_PAY104CN.BPS_Comment  to $Comments


   write 10 from
             $SurveyCode:2           !Pos   1 -  2
             $RecordType:2           !Pos   3 -  4
         $SurveyRefMonth:6           !Pos   5 -  10
             $BusinessNo:9           !Pos  11 -  19
           $LegalNameBus:25          !Pos  20 -  44
         $BusContactName:15          !Pos  45 -  59
        $BusContactPhone:10          !Pos  60 -  69
          $BusContactFax:10          !Pos  70 -  79
        $BusContactEmail:50          !Pos  80 - 129
     $PayServiceProvider:2           !Pos 130 - 131
               $Comments:29          !Pos 132 - 160

 end-procedure


!********************************************************************
!         INITIALIZE-RECORD-TYPE-1
!********************************************************************
 begin-procedure Initialize-Record-Type-1

   move '000000'      to $SurveyRefMonth
   move '000000000'   to $BusinessNo
   move '0000000000'  to $BusContactPhone
   move '0000000000'  to $BusContactFax
   move '00'          to $PayServiceProvider

   move ' '           to $LegalNameBus
   move ' '           to $BusContactName
   move ' '           to $BusContactEmail
   move ' '           to $Comments

 end-procedure


!********************************************************************
!         PRINT-RECORD-TYPE-1
!********************************************************************
 begin-procedure Print-Record-Type-1

   print $Pay104cn_Bus_Contact_Record                  (5,1)
   print $Pay104cn_Name_Of_Bus                         (+2,1)
   print $LegalNameBus                                 (0,41)
   print $Pay104cn_Bus_Contact_Name                    (+1,1)
   print $BusContactName                               (0,41)
   print $Pay104cn_Bus_Contact_Phone                   (+1,1)
   if $BusContactPhone <> ''
     print $BusContactPhone                            (0,41) edit (xxx)bxxx-xxxx
   end-if
   print $Pay104cn_Bus_Contact_Fax                     (+1,1)
   if $BusContactFax   <> ''
     print $BusContactFax                              (0,41) edit (xxx)bxxx-xxxx
   end-if
   print $Pay104cn_Bus_Contact_Email                   (+1,1)
   print $BusContactEmail                              (0,41)
   print $Pay104cn_Comments                            (+2,1)
   print $Comments                                     (0,41)

 end-procedure


!********************************************************************
!         GET-RECORD-TYPE-2-INFO
!********************************************************************
begin-procedure Get-Record-Type-2-Info

  move 0 to #Type#

  while #Type# < 4

    get $Pay_Period_Type            -
        $Pay_Begin_Dt               -
        $Pay_End_Dt                 -
        #EmplCount                  -
        #RegGross                   -
        #OT_Earns                   -
        #RegHrs                     -
        #OT_Hrs                     -
      from LastPeriodTotals(#Type#) -
        Pay_Period_Type             -
        Pay_Begin_Dt                -
        Pay_End_Dt                  -
        EmplCount                   -
        RegGross                    -
        OT_Earns                    -
        RegHrs                      -
        OT_Hrs

    evaluate #Type#
      when = 0
        move $Pay_Period_Type  to $HourlyPayPeriodType
        move $Pay_Begin_Dt     to $HourlyPayPeriod
        concat $Pay_End_Dt     with $HourlyPayPeriod
        move #EmplCount        to #NumOfHourlyEE
        move #RegGross         to #HourlyRegGrossPay
        move #OT_Earns         to #HourlyOTPay
        move #RegHrs           to #TotalNumHrPaid
        move #OT_Hrs           to #NumOTHrWorked
        break
      when = 1
        move $Pay_Period_Type  to $SalPayPeriodType
        move $Pay_Begin_Dt     to $SalPayPeriod
        concat $Pay_End_Dt     with $SalPayPeriod
        move #EmplCount        to #NumOfSalEE
        move #RegGross         to #SalRegGrossPay
        move #OT_Earns         to #SalOTPay
        move #RegHrs           to #AvgNumWorkHr
        break
      when = 2
        move $Pay_Period_Type  to $OtherPayPeriodType
        move $Pay_Begin_Dt     to $OtherPayPeriod
        concat $Pay_End_Dt     with $OtherPayPeriod
        move #EmplCount        to #NumOfOtherEE
        move #RegGross         to #OtherRegGrossPay
        break
      when = 3
        move $Pay_Period_Type  to $OwnersPayPeriodType
        move $Pay_Begin_Dt     to $OwnersPayPeriod
        concat $Pay_End_Dt     with $OwnersPayPeriod
        move #EmplCount        to #NumOfOwners
        move #RegGross         to #OwnersRegGrossPay
        break
      when-other
        break
    end-evaluate

    add 1 to #Type#
  end-while

  move #TotPTEmpl  to #NumPTEmployee




  move 0 to #block#

  while #block# < 6

    get $Period_From_Dt              -
        $Period_To_Dt                -
        #Hourly                      -
        #Salaried                    -
        #Other                       -
        #WorkingOwners               -
      from SpecialPayments(#block#)  -
        Period_From_Dt               -
        Period_To_Dt                 -
        Hourly                       -
        Salaried                     -
        Other                        -
        WorkingOwners


    evaluate #block#
      when = 0
        move #Hourly        to  #MonthlyPayHourlyEE
        move #Salaried      to  #MonthlyPaySalEE
        move #Other         to  #MonthlyPayOtherEE
        move #WorkingOwners to  #MonthlyPayOwners
        break
      when = 1
        move #Hourly        to  #TwoMonthsPayHourlyEE
        move #Salaried      to  #TwoMonthsPaySalEE
        move #Other         to  #TwoMonthsPayOtherEE
        move #WorkingOwners to  #TwoMonthsPayOwners
        break
      when = 2
        move #Hourly        to  #QuarterlyPayHourlyEE
        move #Salaried      to  #QuarterlyPaySalEE
        move #Other         to  #QuarterlyPayOtherEE
        move #WorkingOwners to  #QuarterlyPayOwners
        break
      when = 3
        move #Hourly        to  #GreaterQtrPayHourlyEE
        move #Salaried      to  #GreaterQtrPaySalEE
        move #Other         to  #GreaterQtrPayOtherEE
        move #WorkingOwners to  #GreaterQtrPayOwners
        break
      when = 4
        move #Hourly        to  #TxbleBenftPayHourlyEE
        move #Salaried      to  #TxbleBenftPaySalEE
        move #Other         to  #TxbleBenftPayOtherEE
        move #WorkingOwners to  #TxbleBenftPayOwners
        break
      when = 5
        move #Hourly        to  #RetroPayHourlyEE
        move #Salaried      to  #RetroPaySalEE
        move #Other         to  #RetroPayOtherEE
        move #WorkingOwners to  #RetroPayOwners
        break
      when-other
        break
      end-evaluate

    add 1 to #block#

  end-while



  if $GrossMonthFromDDMM <> ' '
    let $GrossPayrollPeriod = $GrossMonthFromDDMM ||  $PeriodToDDMM
  end-if

  move #TotalGross to #TotalGrossPayroll

end-procedure


!********************************************************************
!         WRITE-RECORD-TYPE-2        write record type 2 to file
!********************************************************************
 begin-procedure Write-Record-Type-2

   if #HourlyRegGrossPay < 0
     move 0 to #HourlyRegGrossPay
   else
     let #HourlyRegGrossPay = round(#HourlyRegGrossPay, 0)
   end-if


   if #HourlyOTPay < 0
     move 0 to #HourlyOTPay
   else
     let #HourlyOTPay = round(#HourlyOTPay, 0)
   end-if


   if #TotalNumHrPaid < 0
     move 0 to #TotalNumHrPaid
   else
     let #TotalNumHrPaid  = round(#TotalNumHrPaid, 0)
   end-if


   if #NumOTHrWorked < 0
     move 0 to #NumOTHrWorked
   else
     let #NumOTHrWorked  = round(#NumOTHrWorked, 0)
   end-if


   if #SalRegGrossPay < 0
     move 0 to #SalRegGrossPay
   else
     let #SalRegGrossPay = round(#SalRegGrossPay, 0)
   end-if


   if #SalOTPay < 0
     move 0 to #SalOTPay
   else
     let #SalOTPay = round(#SalOTPay, 0)
   end-if


   if #AvgNumWorkHr < 0
     move 0 to #AvgNumWorkHr
   else
     let #AvgNumWorkHr = round(#AvgNumWorkHr,2)
     let #AvgNumWorkHr = #AvgNumWorkHr * 100
   end-if


   if #OtherRegGrossPay < 0
     move 0 to #OtherRegGrossPay
   else
     let #OtherRegGrossPay = round(#OtherRegGrossPay,0)
   end-if


   if #OwnersRegGrossPay < 0
     move 0 to #OwnersRegGrossPay
   else
     let #OwnersRegGrossPay = round(#OwnersRegGrossPay,0)
   end-if


   if #MonthlyPayHourlyEE < 0
     move 0 to  #MonthlyPayHourlyEE
   else
     let #MonthlyPayHourlyEE = round(#MonthlyPayHourlyEE, 0)
   end-if


   if #MonthlyPaySalEE < 0
     move 0 to #MonthlyPaySalEE
   else
     let #MonthlyPaySalEE = round(#MonthlyPaySalEE, 0)
   end-if


   if #MonthlyPayOtherEE < 0
      move 0 to #MonthlyPayOtherEE
   else
      let #MonthlyPayOtherEE = round(#MonthlyPayOtherEE, 0)
   end-if


   if #MonthlyPayOwners < 0
      move 0 to  #MonthlyPayOwners
   else
      let #MonthlyPayOwners  = round(#MonthlyPayOwners, 0)
   end-if


   if #TwoMonthsPayHourlyEE < 0
      move 0 to #TwoMonthsPayHourlyEE
   else
      let #TwoMonthsPayHourlyEE = round(#TwoMonthsPayHourlyEE, 0)
   end-if


   if #TwoMonthsPaySalEE < 0
      move 0 to #TwoMonthsPaySalEE
   else
      let #TwoMonthsPaySalEE = round(#TwoMonthsPaySalEE, 0)
   end-if


   if #TwoMonthsPayOtherEE < 0
     move 0 to #TwoMonthsPayOtherEE
   else
     let #TwoMonthsPayOtherEE = round(#TwoMonthsPayOtherEE, 0)
   end-if


   if #TwoMonthsPayOwners < 0
     move 0 to #TwoMonthsPayOwners
   else
     let #TwoMonthsPayOwners = round(#TwoMonthsPayOwners, 0)
   end-if


   if #QuarterlyPayHourlyEE < 0
     move 0 to #QuarterlyPayHourlyEE
   else
     let #QuarterlyPayHourlyEE = round(#QuarterlyPayHourlyEE, 0)
   end-if


   if #QuarterlyPaySalEE < 0
     move 0 to #QuarterlyPaySalEE
   else
     let #QuarterlyPaySalEE = round(#QuarterlyPaySalEE, 0)
   end-if


   if #QuarterlyPayOtherEE < 0
     move 0 to #QuarterlyPayOtherEE
   else
     let #QuarterlyPayOtherEE = round(#QuarterlyPayOtherEE, 0)
   end-if


   if #QuarterlyPayOwners < 0
     move 0 to #QuarterlyPayOwners
   else
     let #QuarterlyPayOwners   = round(#QuarterlyPayOwners, 0)
   end-if


   if #GreaterQtrPayHourlyEE < 0
     move 0 to  #GreaterQtrPayHourlyEE
   else
     let #GreaterQtrPayHourlyEE = round(#GreaterQtrPayHourlyEE,0)
   end-if


   if #GreaterQtrPaySalEE < 0
     move 0 to  #GreaterQtrPaySalEE
   else
     let #GreaterQtrPaySalEE  = round(#GreaterQtrPaySalEE, 0)
   end-if


   if #GreaterQtrPayOtherEE < 0
     move 0 to #GreaterQtrPayOtherEE
   else
     let #GreaterQtrPayOtherEE = round(#GreaterQtrPayOtherEE, 0)
   end-if


   if #GreaterQtrPayOwners < 0
     move 0 to #GreaterQtrPayOwners
   else
     let #GreaterQtrPayOwners  = round(#GreaterQtrPayOwners, 0)
   end-if


   if #TxbleBenftPayHourlyEE < 0
     move 0 to #TxbleBenftPayHourlyEE
   else
     let #TxbleBenftPayHourlyEE  = round(#TxbleBenftPayHourlyEE, 0)
   end-if


   if #TxbleBenftPaySalEE < 0
     move 0 to #TxbleBenftPaySalEE
   else
     let #TxbleBenftPaySalEE = round(#TxbleBenftPaySalEE, 0)
   end-if


   if #TxbleBenftPayOtherEE < 0
     move 0 to #TxbleBenftPayOtherEE
   else
     let #TxbleBenftPayOtherEE = round(#TxbleBenftPayOtherEE, 0)
   end-if


   if #TxbleBenftPayOwners < 0
      move 0 to #TxbleBenftPayOwners
   else
      let #TxbleBenftPayOwners = round(#TxbleBenftPayOwners, 0)
   end-if


   if #RetroPayHourlyEE < 0
     move 0 to #RetroPayHourlyEE
   else
     let #RetroPayHourlyEE = round(#RetroPayHourlyEE, 0)
   end-if


   if #RetroPaySalEE < 0
     move 0 to #RetroPaySalEE
   else
     let #RetroPaySalEE = round(#RetroPaySalEE, 0)
   end-if


   if #RetroPayOtherEE < 0
     move 0 to #RetroPayOtherEE
   else
     let #RetroPayOtherEE = round(#RetroPayOtherEE, 0)
   end-if


   if #RetroPayOwners < 0
     move 0 to  #RetroPayOwners
   else
     let #RetroPayOwners = round(#RetroPayOwners, 0)
   end-if


   if #TotalGrossPayroll < 0
     move 0 to #TotalGrossPayroll
   else
     let #TotalGrossPayroll = round(#TotalGrossPayroll, 0)
   end-if


   do Format-Number(#NumOfHourlyEE, $NumOfHourlyEE, '0999999999')
   do Format-Number(#HourlyRegGrossPay, $HourlyRegGrossPay, '0999999999')
   do Format-Number(#HourlyOTPay, $HourlyOTPay, '0999999999')
   do Format-Number(#TotalNumHrPaid, $TotalNumHrPaid, '0999999999')
   do Format-Number(#NumOTHrWorked, $NumOTHrWorked, '0999999999')

   do Format-Number(#NumOfSalEE, $NumOfSalEE, '0999999999')
   do Format-Number(#SalRegGrossPay, $SalRegGrossPay, '0999999999')
   do Format-Number(#SalOTPay, $SalOTPay, '0999999999')
   do Format-Number(#AvgNumWorkHr, $AvgNumWorkHr, '0999999999')

   do Format-Number(#NumOfOtherEE, $NumOfOtherEE, '0999999999')
   do Format-Number(#OtherRegGrossPay, $OtherRegGrossPay, '0999999999')

   do Format-Number(#NumOfOwners,  $NumOfOwners, '0999999999')
   do Format-Number(#OwnersRegGrossPay, $OwnersRegGrossPay, '0999999999')

   do Format-Number(#NumPTEmployee, $NumPTEmployee, '0999999999')

   do Format-Number(#MonthlyPayHourlyEE, $MonthlyPayHourlyEE, '0999999999')
   do Format-Number(#MonthlyPaySalEE, $MonthlyPaySalEE, '0999999999')
   do Format-Number(#MonthlyPayOtherEE, $MonthlyPayOtherEE, '0999999999')
   do Format-Number(#MonthlyPayOwners, $MonthlyPayOwners, '0999999999')

   do Format-Number(#TwoMonthsPayHourlyEE, $TwoMonthsPayHourlyEE, '0999999999')
   do Format-Number(#TwoMonthsPaySalEE, $TwoMonthsPaySalEE, '0999999999')
   do Format-Number(#TwoMonthsPayOtherEE, $TwoMonthsPayOtherEE, '0999999999')
   do Format-Number(#TwoMonthsPayOwners, $TwoMonthsPayOwners, '0999999999')

   do Format-Number(#QuarterlyPayHourlyEE, $QuarterlyPayHourlyEE, '0999999999')
   do Format-Number(#QuarterlyPaySalEE, $QuarterlyPaySalEE, '0999999999')
   do Format-Number(#QuarterlyPayOtherEE, $QuarterlyPayOtherEE, '0999999999')
   do Format-Number(#QuarterlyPayOwners, $QuarterlyPayOwners, '0999999999')

   do Format-Number(#GreaterQtrPayHourlyEE, $GreaterQtrPayHourlyEE, '0999999999')
   do Format-Number(#GreaterQtrPaySalEE, $GreaterQtrPaySalEE, '0999999999')
   do Format-Number(#GreaterQtrPayOtherEE, $GreaterQtrPayOtherEE, '0999999999')
   do Format-Number(#GreaterQtrPayOwners, $GreaterQtrPayOwners, '0999999999')

   do Format-Number(#TxbleBenftPayHourlyEE, $TxbleBenftPayHourlyEE, '0999999999')
   do Format-Number(#TxbleBenftPaySalEE, $TxbleBenftPaySalEE, '0999999999')
   do Format-Number(#TxbleBenftPayOtherEE, $TxbleBenftPayOtherEE, '0999999999')
   do Format-Number(#TxbleBenftPayOwners, $TxbleBenftPayOwners, '0999999999')

   do Format-Number(#RetroPayHourlyEE, $RetroPayHourlyEE, '0999999999')
   do Format-Number(#RetroPaySalEE, $RetroPaySalEE, '0999999999')
   do Format-Number(#RetroPayOtherEE,$RetroPayOtherEE, '0999999999')
   do Format-Number(#RetroPayOwners, $RetroPayOwners, '0999999999')

   do Format-Number(#TotalGrossPayroll, $TotalGrossPayroll, '0999999999')

   move '01' to $SurveyCode
   move '02' to $RecordType

   let $SurveyRefMonth  = $Calendar_Yr || $MonthCd

   write 10 from
             $SurveyCode:2           !Pos   1 -  2
             $RecordType:2           !Pos   3 -  4
         $SurveyRefMonth:6           !Pos   5 -  10
             $BusinessNo:9           !Pos  11 -  19
          $ReportingUnit:9           !Pos  20 -  28
     $PayServiceProvider:2           !Pos  29 -  30
    $HourlyPayPeriodType:1           !Pos  31         A - EE paid by the hour
        $HourlyPayPeriod:8           !Pos  32 -  39
          $NumOfHourlyEE:10          !Pos  40 -  49
      $HourlyRegGrossPay:10          !Pos  50 -  59
            $HourlyOTPay:10          !Pos  60 -  69
         $TotalNumHrPaid:10          !Pos  70 -  79
          $NumOTHrWorked:10          !Pos  80 -  89
       $SalPayPeriodType:1           !Pos  90         B - Salaried EE
           $SalPayPeriod:8           !Pos  91 -  98
             $NumOfSalEE:10          !Pos  99 - 108
         $SalRegGrossPay:10          !Pos 109 - 118
               $SalOTPay:10          !Pos 119 - 128
           $AvgNumWorkHr:10          !Pos 129 - 138
     $OtherPayPeriodType:1           !Pos 139         C - Other EE
         $OtherPayPeriod:8           !Pos 140 - 147
           $NumOfOtherEE:10          !Pos 148 - 157
       $OtherRegGrossPay:10          !Pos 158 - 167
    $OwnersPayPeriodType:1           !Pos 168         D - Working owners
        $OwnersPayPeriod:8           !Pos 169 - 176
            $NumOfOwners:10          !Pos 177 - 186
      $OwnersRegGrossPay:10          !Pos 187 - 196
          $NumPTEmployee:10          !Pos 197 - 206   E - Part-time EE
     $MonthlyPayHourlyEE:10          !Pos 207 - 216   Block 1 - Monthly
        $MonthlyPaySalEE:10          !Pos 217 - 226
      $MonthlyPayOtherEE:10          !Pos 227 - 236
       $MonthlyPayOwners:10          !Pos 237 - 246
   $TwoMonthsPayHourlyEE:10          !Pos 247 - 256   Block 2 - Every 2 months
      $TwoMonthsPaySalEE:10          !Pos 257 - 266
    $TwoMonthsPayOtherEE:10          !Pos 267 - 276
     $TwoMonthsPayOwners:10          !Pos 277 - 286
   $QuarterlyPayHourlyEE:10          !Pos 287 - 296   Block 3 - Quarterly
      $QuarterlyPaySalEE:10          !Pos 297 - 306
    $QuarterlyPayOtherEE:10          !Pos 307 - 316
     $QuarterlyPayOwners:10          !Pos 317 - 326
  $GreaterQtrPayHourlyEE:10          !Pos 327 - 336   Block 4 - >Quarterly
     $GreaterQtrPaySalEE:10          !Pos 337 - 346
   $GreaterQtrPayOtherEE:10          !Pos 347 - 356
    $GreaterQtrPayOwners:10          !Pos 357 - 366
  $TxbleBenftPayHourlyEE:10          !Pos 367 - 376   Block 5 - Taxable ben
     $TxbleBenftPaySalEE:10          !Pos 377 - 386
   $TxbleBenftPayOtherEE:10          !Pos 387 - 396
    $TxbleBenftPayOwners:10          !Pos 397 - 406
     $RetroPayPeriodFrom:8           !Pos 407 - 414   Block 6 - Retro
       $RetroPayPeriodTo:8           !Pos 415 - 422
       $RetroPayHourlyEE:10          !Pos 423 - 432
          $RetroPaySalEE:10          !Pos 433 - 442
        $RetroPayOtherEE:10          !Pos 443 - 452
         $RetroPayOwners:10          !Pos 453 - 462
     $GrossPayrollPeriod:8           !Pos 463 - 470   Gross monthly payroll
      $TotalGrossPayroll:10          !Pos 471 - 480

 end-procedure


!********************************************************************
!         INITIALIZE-RECORD-TYPE-2
!********************************************************************
 begin-procedure Initialize-Record-Type-2

   move 0 to #NumOfHourlyEE
   move 0 to #HourlyRegGrossPay
   move 0 to #HourlyOTPay
   move 0 to #TotalNumHrPaid
   move 0 to #NumOTHrWorked
   move 0 to #NumOfSalEE
   move 0 to #SalRegGrossPay
   move 0 to #SalOTPay
   move 0 to #AvgNumWorkHr
   move 0 to #NumOfOtherEE
   move 0 to #OtherRegGrossPay
   move 0 to #NumOfOwners
   move 0 to #OwnersRegGrossPay
   move 0 to #NumPTEmployee
   move 0 to #MonthlyPayHourlyEE
   move 0 to #MonthlyPaySalEE
   move 0 to #MonthlyPayOtherEE
   move 0 to #MonthlyPayOwners
   move 0 to #TwoMonthsPayHourlyEE
   move 0 to #TwoMonthsPaySalEE
   move 0 to #TwoMonthsPayOtherEE
   move 0 to #TwoMonthsPayOwners
   move 0 to #QuarterlyPayHourlyEE
   move 0 to #QuarterlyPaySalEE
   move 0 to #QuarterlyPayOtherEE
   move 0 to #QuarterlyPayOwners
   move 0 to #GreaterQtrPayHourlyEE
   move 0 to #GreaterQtrPaySalEE
   move 0 to #GreaterQtrPayOtherEE
   move 0 to #GreaterQtrPayOwners
   move 0 to #TxbleBenftPayHourlyEE
   move 0 to #TxbleBenftPaySalEE
   move 0 to #TxbleBenftPayOtherEE
   move 0 to #TxbleBenftPayOwners
   move 0 to #RetroPayHourlyEE
   move 0 to #RetroPaySalEE
   move 0 to #RetroPayOtherEE
   move 0 to #RetroPayOwners
   move 0 to #TotalGrossPayroll

   move '00000000'   to $RetroPayPeriodFrom
   move '00000000'   to $RetroPayPeriodTo
   move '00000000'   to $GrossPayrollPeriod

   move '000000'     to $SurveyRefMonth
   move '00'         to $PayServiceProvider

   move ' '          to $ReportingUnit
   move ' '          to $HourlyPayPeriodType
   move ' '          to $HourlyPayPeriod
   move ' '          to $SalPayPeriodType
   move ' '          to $SalPayPeriod
   move ' '          to $OtherPayPeriodType
   move ' '          to $OtherPayPeriod
   move ' '          to $OwnersPayPeriodType
   move ' '          to $OwnersPayPeriod

 end-procedure


!********************************************************************
!         PRINT-RECORD-TYPE-2
!********************************************************************
 begin-procedure Print-Record-Type-2

   print $Pay104cn_Payroll_Record                       (5,1)
   print $Pay104cn_Reporting_Unit                       (7,1)
   print $ReportingUnit                                 (0,17)

   print $Pay104cn_Pay_Period_Type                      (10,41)
   print $Pay104cn_Pay_Period                           (0,61)
   print $Pay104cn_Num_Of_Employees                     (0,76)
   print $Pay104cn_Regular_Gross_Pay                    (0,98)
   print $Pay104cn_Overtime_Pay                         (0,123)
   print $Pay104cn_Hours                                (0,148)
   print $Pay104cn_O/T_Hours                            (0,169)

   print $Pay104cn_A._Empl_Paid_By_Hr                   (12,1)
   print $Pay104cn_B._Salaried_Empl                     (14,1)
   print $Pay104cn_C._Other_Empl                        (16,1)
   print $Pay104cn_D._Work_Owners_Inc                   (18,1)
   print $Pay104cn_E._Part_Time_Empl                    (20,1)

   do Print-Summary-Report


   print $Pay104cn_Special_Payments                     (26,1)
   print $Pay104cn_Empl_Paid_By_Hour                    (27,41)
   print $Pay104cn_Salaried_Employees                   (0,77)
   print $Pay104cn_Other_Employees                      (0,99)
   print $Pay104cn_Working_Owners                       (0,122)

   print $Pay104cn_Block1_Monthly                       (29,1)
   print $Pay104cn_Block2_2_Months                      (31,1)
   print $Pay104cn_Block3_Quarterly                     (33,1)
   print $Pay104cn_Block4_>Quarterly                    (35,1)
   print $Pay104cn_Block5_Tax_Benefits                  (37,1)
   print $Pay104cn_Block6_Retro_Pay                     (39,1)
   print $Pay104cn_From                                 (40,11)
   print $Pay104cn_To                                   (0,28)
   print $Pay104cn_Gross_Mon_Payroll                    (42,1)
   print $Pay104cn_From                                 (43,11)
   print $Pay104cn_To                                   (0,24)
   print $Pay104cn_Total                                (0,38)
   print $Pay104cn_Hours_Hourly_EE                      (46,1)
   print $Pay104cn_Hours_Salaried_EE                    (0, 56)

   do Print-Special-Payments-Summary

   if $GrossPayrollPeriod <> '00000000'
     let $GrossFromDD = substr($GrossPayrollPeriod,1,2)
     let $GrossFromMM = substr($GrossPayrollPeriod,3,2)
     let $GrossToDD   = substr($GrossPayrollPeriod,5,2)
     let $GrossToMM   = substr($GrossPayrollPeriod,7,2)

     let $GrossFrom   = $GrossFromDD || '/' || $GrossFromMM
     let $GrossTo     = $GrossToDD   || '/' || $GrossToMM

     print $GrossFrom                                   (43,17)
     print $GrossTo                                     (0,28)
   end-if

   let #TotalGrossPayroll  =  $TotalGrossPayroll
   print #TotalGrossPayroll                             (43,45)  edit b,999,999,999


 end-procedure


!********************************************************************
!         PRINT-SUMMARY-REPORT     Print out summary data from file
!********************************************************************
begin-procedure Print-Summary-Report

  print $HourlyPayPeriodType    (12,48)                       !Hourly EE

  if RTRIM($HourlyPayPeriod, ' ') <> ''
    let $FromDD = substr($HourlyPayPeriod,1,2)
    let $FromMM = substr($HourlyPayPeriod,3,2)
    let $ToDD   = substr($HourlyPayPeriod,5,2)
    let $ToMM   = substr($HourlyPayPeriod,7,2)
    let $FromDate = $FromDD || '/' || $FromMM || ' - '
    let $ToDate   = $ToDD   || '/' || $ToMM

    print $FromDate               (0,60)
    print $ToDate                 (0,68)
  end-if

  let #NumOfHourlyEE      = $NumOfHourlyEE
  print #NumOfHourlyEE          (0,78)  edit b,999,999,999

  let #HourlyRegGrossPay  = $HourlyRegGrossPay
  print #HourlyRegGrossPay      (0,99)  edit b,999,999,999

  let #HourlyOTPay        = $HourlyOTPay
  print #HourlyOTPay            (0,121) edit b,999,999,999

  let #TotalNumHrPaid     = $TotalNumHrPaid
  print #TotalNumHrPaid         (0,143) edit b,999,999,999

  let #NumOTHrWorked      = $NumOTHrWorked
  print #NumOTHrWorked          (0,163) edit b,999,999,999

  print $SalPayPeriodType       (14,48)                     !Salaried EE

  if RTRIM($SalPayPeriod, ' ') <> ''
    let $FromDD = substr($SalPayPeriod,1,2)
    let $FromMM = substr($SalPayPeriod,3,2)
    let $ToDD   = substr($SalPayPeriod,5,2)
    let $ToMM   = substr($SalPayPeriod,7,2)
    let $FromDate = $FromDD || '/' || $FromMM || ' - '
    let $ToDate   = $ToDD   || '/' || $ToMM

    print $FromDate               (0,60)
    print $ToDate                 (0,68)
  end-if


  let #NumOfSalEE         = $NumOfSalEE
  print #NumOfSalEE             (0,78)  edit b,999,999,999

  let #SalRegGrossPay     = $SalRegGrossPay
  print #SalRegGrossPay         (0,99)  edit b,999,999,999

  let #SalOTPay           = $SalOTPay
  print #SalOTPay               (0,121) edit b,999,999,999

  let #AvgNumWorkHr       = $AvgNumWorkHr
  let #AvgNumWorkHr       = #AvgNumWorkHr / 100
  print #AvgNumWorkHr           (0,140) edit b,999,999,999.99


  print $OtherPayPeriodType     (16,48)                       !Other EE

  if RTRIM($OtherPayPeriod, ' ') <> ''
    let $FromDD = substr($OtherPayPeriod,1,2)
    let $FromMM = substr($OtherPayPeriod,3,2)
    let $ToDD   = substr($OtherPayPeriod,5,2)
    let $ToMM   = substr($OtherPayPeriod,7,2)
    let $FromDate = $FromDD || '/' || $FromMM || ' - '
    let $ToDate   = $ToDD   || '/' || $ToMM

    print $FromDate               (0,60)
    print $ToDate                 (0,68)
  end-if


  let #NumOfOtherEE       = $NumOfOtherEE
  print #NumOfOtherEE           (0,78)  edit b,999,999,999

  let #OtherRegGrossPay   = $OtherRegGrossPay
  print #OtherRegGrossPay       (0,99)  edit b,999,999,999


  print $OwnersPayPeriodType    (18,48)                       !Working Owners

  if RTRIM($OwnersPayPeriod, ' ') <> ''
    let $FromDD = substr($OwnersPayPeriod,1,2)
    let $FromMM = substr($OwnersPayPeriod,3,2)
    let $ToDD   = substr($OwnersPayPeriod,5,2)
    let $ToMM   = substr($OwnersPayPeriod,7,2)
    let $FromDate = $FromDD || '/' || $FromMM || ' - '
    let $ToDate   = $ToDD   || '/' || $ToMM

    print $FromDate               (0,60)
    print $ToDate                 (0,68)
  end-if


  let #NumOfOwners        = $NumOfOwners
  print #NumOfOwners            (0,78)  edit b,999,999,999

  let #OwnersRegGrossPay  = $OwnersRegGrossPay
  print #OwnersRegGrossPay      (0,99)  edit b,999,999,999

  let #NumPTEmployee      = $NumPTEmployee
  print #NumPTEmployee          (20,78) edit b,999,999,999

end-procedure


!****************************************************************************
!         PRINT-SPECIAL-PAYMENTS-SUMMARY  Print out special payments from file
!****************************************************************************
begin-procedure Print-Special-Payments-Summary

  let #MonthlyPayHourlyEE      =  $MonthlyPayHourlyEE
  print #MonthlyPayHourlyEE      (29,45)  edit b,999,999,999

  let #MonthlyPaySalEE         =  $MonthlyPaySalEE
  print #MonthlyPaySalEE         (0,78)   edit b,999,999,999

  let #MonthlyPayOtherEE       =  $MonthlyPayOtherEE
  print #MonthlyPayOtherEE       (0,99)   edit b,999,999,999

  let #MonthlyPayOwners        =  $MonthlyPayOwners
  print #MonthlyPayOwners        (0,121)  edit b,999,999,999


  let #TwoMonthsPayHourlyEE    =  $TwoMonthsPayHourlyEE
  print #TwoMonthsPayHourlyEE    (31,45)  edit b,999,999,999

  let #TwoMonthsPaySalEE       =  $TwoMonthsPaySalEE
  print #TwoMonthsPaySalEE       (0,78)   edit b,999,999,999

  let #TwoMonthsPayOtherEE     =  $TwoMonthsPayOtherEE
  print #TwoMonthsPayOtherEE     (0,99)   edit b,999,999,999

  let #TwoMonthsPayOwners      =  $TwoMonthsPayOwners
  print #TwoMonthsPayOwners      (0,121)  edit b,999,999,999


  let #QuarterlyPayHourlyEE    =  $QuarterlyPayHourlyEE
  print #QuarterlyPayHourlyEE    (33,45)  edit b,999,999,999

  let #QuarterlyPaySalEE       =  $QuarterlyPaySalEE
  print #QuarterlyPaySalEE       (0,78)   edit b,999,999,999

  let #QuarterlyPayOtherEE     =  $QuarterlyPayOtherEE
  print #QuarterlyPayOtherEE     (0,99)   edit b,999,999,999

  let #QuarterlyPayOwners      = $QuarterlyPayOwners
  print #QuarterlyPayOwners      (0,121)  edit b,999,999,999


  let #GreaterQtrPayHourlyEE   = $GreaterQtrPayHourlyEE
  print #GreaterQtrPayHourlyEE   (35,45)  edit b,999,999,999

  let #GreaterQtrPaySalEE      = $GreaterQtrPaySalEE
  print #GreaterQtrPaySalEE      (0,78)   edit b,999,999,999

  let #GreaterQtrPayOtherEE    = $GreaterQtrPayOtherEE
  print #GreaterQtrPayOtherEE    (0,99)   edit b,999,999,999

  let #GreaterQtrPayOwners     = $GreaterQtrPayOwners
  print #GreaterQtrPayOwners     (0,121)  edit b,999,999,999


  let #TxbleBenftPayHourlyEE   = $TxbleBenftPayHourlyEE
  print #TxbleBenftPayHourlyEE   (37,45)  edit b,999,999,999

  let #TxbleBenftPaySalEE      = $TxbleBenftPaySalEE
  print #TxbleBenftPaySalEE      (0,78)   edit b,999,999,999

  let #TxbleBenftPayOtherEE    = $TxbleBenftPayOtherEE
  print #TxbleBenftPayOtherEE    (0,99)   edit b,999,999,999

  let #TxbleBenftPayOwners     = $TxbleBenftPayOwners
  print #TxbleBenftPayOwners     (0,121)  edit b,999,999,999


  let #RetroPayHourlyEE        = $RetroPayHourlyEE
  print #RetroPayHourlyEE        (40,45)  edit b,999,999,999

  let #RetroPaySalEE           = $RetroPaySalEE
  print #RetroPaySalEE           (0,78)   edit b,999,999,999

  let #RetroPayOtherEE         = $RetroPayOtherEE
  print #RetroPayOtherEE         (0,99)   edit b,999,999,999

  let #RetroPayOwners          = $RetroPayOwners
  print #RetroPayOwners          (0,121)  edit b,999,999,999

  if #RetroPayHourlyEE > 0 or
     #RetroPaySalEE    > 0 or
     #RetroPayOtherEE  > 0 or
     #RetroPayOwners   > 0

    print '00/00/0000'           (0,17)
    print '00/00/0000'           (0,32)

  end-if

end-procedure


!********************************************************************
!         REPORT-END
!********************************************************************
begin-procedure Report-End

  do Reset

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date conversions
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
