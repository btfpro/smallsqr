!***********************************************************************
! Name: OHS501UK.SQC                                                   *
!***********************************************************************
!                                                                      *
! Confidentiality Information:                                         *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/09/02:20:58:43                                 
!       $Release:  HR9                                                 
!    $Resolution:  689848                                              
!                                                                      *
!***********************************************************************
! Description: Lookup Health & Safety base information functions.      *
!              These routines are called from the application SQR.     *
!***********************************************************************

#define EMPTY ' '

!-----------------------------------------------------------------------
! Location Information
!-----------------------------------------------------------------------
begin-procedure GetLocationName($SetIDIn, $LocCodeIn, :$DescOut)

BEGIN-SELECT
A.DESCR
FROM  PS_LOCATION_TBL A
WHERE A.SETID    = $SetIDIn
  AND A.LOCATION = $LocCodeIn
  AND A.EFFDT = (SELECT MAX(B.EFFDT)
                 FROM   PS_LOCATION_TBL B
                 WHERE  B.LOCATION = A.LOCATION
                   AND  B.EFFDT <= $_AsOfToday)
end-SELECT

   let $DescOut = nvl(&A.DESCR, {EMPTY})

end-procedure


!-----------------------------------------------------------------------
! External Scheme Information
!-----------------------------------------------------------------------
begin-procedure GetUKExternalScheme($EmplID, #EmplRcd, :$TypeOut, :$DescOut)

   ! Join HS Employment table to External Scheme table to get description...

BEGIN-SELECT
E.EMPLID
S.SCHEME_TYPE_CD_UK
S.DESCR
FROM  PS_HS_EMPLOYMENT   E,
      PS_EXT_SCHM_TBL_UK S
WHERE E.EMPLID    = $EmplID
  AND E.EMPL_RCD = #EmplRcd
  AND E.EXT_SCHEME_CD_UK = S.EXT_SCHEME_CD_UK
  AND S.EFFDT = (SELECT MAX(X.EFFDT)
                 FROM   PS_EXT_SCHM_TBL_UK X
                 WHERE  X.EXT_SCHEME_CD_UK = S.EXT_SCHEME_CD_UK
                   AND  X.EFFDT <= $_AsOfToday)
END-SELECT

   let $TypeOut = nvl(&S.SCHEME_TYPE_CD_UK, {EMPTY})
   let $DescOut = nvl(&S.DESCR, {EMPTY})

end-procedure


!-----------------------------------------------------------------------
! Disease Information
!-----------------------------------------------------------------------
begin-procedure GetDiseaseName($RegRegion, $CodeIn, :$DescOut)

   ! Get the setid for the table...
   do ohsGetSETID($RegRegion, 'OCC_ILLNESS_TBL', $OISETID)

BEGIN-SELECT
A.DESCR50
FROM  PS_OCC_ILLNESS_TBL A
WHERE A.SETID          = $OISETID
  AND A.OCC_ILLNESS_CD = $CodeIn
END-SELECT

   let $DescOut = nvl(&A.DESCR50, {EMPTY})

end-procedure GetDiseaseName


!-----------------------------------------------------------------------
! Injury Body Part Information
!-----------------------------------------------------------------------
begin-procedure GetBodyPartList($EmplID, #EmplRcd, $NonEmplID, $IncNbr, $RegRegion, :$DescOut)

   ! Initialise...
   let $PartList = ''
   let #Found    = 0
   let $BPSETID  = ''

   ! Get the setid for the body part table...
   do ohsGetSETID($RegRegion, 'BODY_PART_TBL', $BPSETID)

BEGIN-SELECT
A.BODY_PART_CD
A.PRIMARY_INJURY
B.DESCR100
   let $PartList = $PartList || rtrim(&B.DESCR100,{EMPTY})
   if &A.PRIMARY_INJURY = 'Y'
      let $PartList = $PartList || '(*)'
   end-if
   let $PartList = $PartList || ', '
   let #Found = #Found + 1
FROM PS_INJURY_ILL_BP A,
     PS_BODY_PART_TBL B
WHERE A.EMPLID          = $EmplID
  AND A.EMPL_RCD       = #EmplRcd
  AND A.NON_EMPLOYEE_ID = $NonEmplID
  AND A.INCIDENT_NBR    = $IncNbr
  AND A.BODY_PART_CD    = B.BODY_PART_CD
  AND B.SETID           = $BPSETID
  AND B.EFFDT           = ( SELECT MAX(C.EFFDT)
                            FROM   PS_BODY_PART_TBL C
                            WHERE  C.BODY_PART_CD = B.BODY_PART_CD
                            AND B.SETID = C.SETID   
                            AND    C.EFFDT <= $_AsOfToday )
ORDER BY A.PRIMARY_INJURY DESC
END-SELECT

   if #Found > 0
      let #LenDesc = length($PartList)
      if #Found > 1
      ! take off the last comma...
         let #LenDesc = #LenDesc - 2
      else
         ! take off the asterisk as well as it's the only part specified...
         let #LenDesc = #LenDesc - 5
      end-if
      let $DescOut = {ps-substr}($PartList,1,#LenDesc)
   else
      let $DescOut = {EMPTY}
   end-if

end-procedure


!-----------------------------------------------------------------------
! Injury Nature Information
!-----------------------------------------------------------------------
begin-procedure GetInjuryList($EmplID, #EmplRcd, $NonEmplID, $IncNbr, $RegRegion, :$DescOut)

   ! Initialise...
   let $PartList = ''
   let #Found    = 0
   let $INSETID  = ''

   ! Get the setid for the injury nature table...
   do ohsGetSETID($RegRegion, 'INJURY_NATR_TBL', $INSETID)

BEGIN-SELECT
A.INJURY_NATURE_CD
A.PRIMARY_INJURY
B.DESCR100
   let $PartList = $PartList || rtrim(&B.DESCR100,{EMPTY})
   if &A.PRIMARY_INJURY = 'Y'
      let $PartList = $PartList || '(*)'
   end-if
   let $PartList = $PartList || ', '
   let #Found = #Found + 1
FROM PS_INJURY_ILL_NOI  A,
     PS_INJURY_NATR_TBL B
WHERE A.EMPLID           = $EmplID
  AND A.EMPL_RCD        = #EmplRcd
  AND A.NON_EMPLOYEE_ID  = $NonEmplID
  AND A.INCIDENT_NBR     = $IncNbr
  AND A.INJURY_NATURE_CD = B.INJURY_NATURE_CD
  AND B.SETID            = $INSETID
  AND B.EFFDT            = ( SELECT MAX(C.EFFDT)
                             FROM   PS_INJURY_NATR_TBL C
                             WHERE  C.INJURY_NATURE_CD = B.INJURY_NATURE_CD
                             AND    B.SETID = C.SETID
                             AND    C.EFFDT <= $_AsOfToday )
ORDER BY A.PRIMARY_INJURY DESC
END-SELECT

   if #Found > 0
      let #LenDesc = length($PartList)
      if #Found > 1
      ! take off the last comma...
         let #LenDesc = #LenDesc - 2
      else
         ! take off the asterisk as well as it's the only part specified...
         let #LenDesc = #LenDesc - 5
      end-if
      let $DescOut = {ps-substr}($PartList,1,#LenDesc)
   else
      let $DescOut = {EMPTY}
   end-if

end-procedure


!-----------------------------------------------------------------------
! Accident Type Information
!-----------------------------------------------------------------------
begin-procedure GetAccidentType($EmplID, #EmplRcd, $NonEmplID, $IncNbr, :$CodeOut)

BEGIN-SELECT
A.ACCIDENT_TYPE_CD
A.PRIMARY_INJURY
FROM PS_INJURY_ILL_ACC  A
WHERE A.EMPLID           = $EmplID
  AND A.EMPL_RCD        = #EmplRcd
  AND A.NON_EMPLOYEE_ID  = $NonEmplID
  AND A.INCIDENT_NBR     = $IncNbr
  AND A.PRIMARY_INJURY   = 'Y'
END-SELECT

   let $CodeOut = nvl(&A.ACCIDENT_TYPE_CD, {EMPTY})

end-procedure

