!***********************************************************************
!  TAX017:  Qtrly State Unemployment Tax Verification                  *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/03/01:13:12:09                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885420                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !printer and page-size initialization
#Include 'usarpt.sqc'    !Get USA variables

begin-report
  do Init-Report
  do Process-Main
  move 'Y' to $LastPage
  do Print-GrandTotals
  do NTR-Check
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX017' to $ReportID
  move 'Quarterly Employee Unemployment Verification' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

  do Init-DateTime
  do Get-Current-DateTime

  do Get-Tax-Reporting-Run-Controls

  move $PeriodEndDate to $AsOfDate  !for included procedures
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialize
end-procedure

begin-procedure Initialize
  move &TX.Balance_Year to $QtrBeginDate xxxx
  move &TX.Balance_Year to $QtrYear
  move &TX.Balance_Qtr to $Balance_Quarter
  let #QtrYear = $QtrYear
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  if $PRCS_Process_Instance = ''
     do Prompts
     do Evaluate-File-Type
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

  if $PgmMode = 'U'
    move 'Report and Update Tax Balance' to $RunType
  else
    move 'Report Only' to $RunType
  end-if
  move 'N' to $EmpFound
  move 'U' to $TaxClass
end-procedure

begin-heading 8
  #include 'stdhdg01.sqc'
  print $heading_dt                   (-1,,) center

  evaluate $QtrBeginMonth
    when = '01'
      move '1st' to $WhichQtr
    when = '04'
      move '2nd' to $WhichQtr
    when = '07'
      move '3rd' to $WhichQtr
    when-other
      move '04th' to $WhichQtr
  end-evaluate

  print $RunType                                         (+1) center
  if $LastPage = 'Y'
    print ' '                                            (+1, 1)
  else
    print 'Company'                                      (+1, 1)
    print $Company                                       (, 12)
  end-if
  print $WhichQtr                                        (, 80)
  print 'Quarter'                                        (, 84)
  print $QtrYear                                         (, 92)
  if $EmpFound = 'Y'
    if $LastPage = 'Y'
      print ' '                                         (+1, 1)
    else
      print $StateName                                  (+1, 1)
    end-if
  end-if
  if $LastPage = 'Y'
    print ' '                                            (+2, 1)
  else
    print 'Employee ID'                                  (+2, 1)
    print 'Name'                                         (, 21)
    print 'Tax Class'                                    (, 46)
  end-if
  print 'YTD Tax'                                        (, 61)
  print 'QTD Tax'                                        (, 77)
  print 'MTD Tax'                                        (, 93)
  print 'Adj Amount'                                     (,106)

end-heading

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT
begin-SELECT
C.COMPANY () on-break print=never level=1 before=Company-Change
C.STATE   () on-break print=never level=2 before=State-Change
                                          AFTER=Page-or-Not
C.TAX_CLASS
C.EMPLID
C.BALANCE_PERIOD
C.LOCALITY
C.TXGRS_YTD
C.TXGRS_QTD
C.TAX_YTD
C.TAX_QTD
C.TAX_MTD

D1.NATIONAL_ID () on-break print=never level=3 save=$SSN
PN.NAME        () on-break print=never level=3 save=$Name

  if &C.TAX_CLASS <> $TaxClass and
     $State = rtrim(&C.State, ' ')
     do TaxClass-Change
  end-if

  move &C.Balance_Period to #MonthCd
  move &C.Company to $Company
  move &C.Tax_YTD to #TaxYTD
  move &C.Tax_QTD to #TaxQTD
  move &C.Tax_MTD to #TaxMTD
  move &C.TxGrs_YTD to #CurTxGrs_YTD
  move &C.TAX_CLASS to $TaxClass

  do Process-Tax-Balance

  do Emplid-Print

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME PN,  PS_PERS_NID D1, PS_COMPANY_TBL CP
WHERE PN.EMPLID       = C.EMPLID
  AND C.COMPANY       = CP.COMPANY
  AND CP.TAX_REPORT_TYPE IN ('2', 'P')
  AND CP.EFF_STATUS = 'A'
  AND CP.EFFDT =
      (SELECT MAX(CP1.EFFDT)
       FROM   PS_COMPANY_TBL CP1
       WHERE  CP1.COMPANY = CP.COMPANY
         AND  CP1.EFFDT  <= $AsOfDate)
  AND C.STATE         NOT IN ('$U','$UPR','$UAS','$UGU','$UVI')
  AND C.LOCALITY      = ' '
  AND C.TAX_CLASS     IN ('U','S')
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND C1.BALANCE_ID    = C.BALANCE_ID
         AND C1.BALANCE_YEAR  = C.BALANCE_YEAR
         AND C1.BALANCE_QTR   = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.TXGRS_QTD > 0
  AND D1.EMPLID       = C.EMPLID
  AND D1.COUNTRY      = {NID_country}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE

ORDER BY C.COMPANY, C.STATE, C.LOCALITY,  C.TAX_CLASS DESC, C.EMPLID
end-SELECT
end-procedure

begin-procedure Process-Tax-Balance
  do Format-Number(&C.TxGrs_QTD, $TxGrs_QTD, '99999999999.99')
  do Format-Number(&C.TxGrs_YTD, $TxGrs_YTD, '99999999999.99')
  move &C.EmplID to $EmplID
end-procedure

begin-procedure TaxClass-Change
  move &C.TAX_CLASS to $TaxClass
  do State-Change
end-procedure


begin-procedure EmplID-Print

  do Calculate-Tax
  if $TaxDiff = 'Y'
    move 'N' to $TaxDiff
    move 'Y' to $DoPage
    move 'Y' to $EmpFound
    next-listing need=6

    print '*'                     (+2,61,15) fill
    print ' Current '             (0,76)
    print '*'                     (0,85,15) fill

    print $EmplID                 (+1,1)
    print $Name                   (0,21,20)
    print $TaxClass               (0,50,1)
    print #TaxYTD                 (0,54)    edit 99,999,999.99mi
    print #TaxQTD                 (0,70)    edit 99,999,999.99mi
    print #TaxMTD                 (0,86)    edit 99,999,999.99mi
    print #AdjTax                 (0,102)   edit 99,999,999.99mi

    print '*'                     (+2,61,14) fill
    print ' Adjusted '            (0,75)
    print '*'                     (0,85,15) fill
    add #TaxYTD      to  #New_YTD
    add #AdjTax      to  #New_YTD
    print #New_YTD                (+1,54)   edit 99,999,999.99
    add #TaxQTD      to  #New_QTD
    add #AdjTax      to  #New_QTD
    print #New_QTD                (0,70)    edit 99,999,999.99
    add #TaxMTD      to  #New_MTD
    add #AdjTax      to  #New_MTD
    print #New_MTD                (0,86)    edit 99,999,999.99

    do Accumulate-Totals

    if $PgmMode = 'U'
      do Update-Balance
    end-if

    move 0           to  #New_MTD
    move 0           to  #New_QTD
    move 0           to  #New_YTD
  end-if

end-procedure

begin-procedure Accumulate-Totals
  add #TaxYTD  to #total_TaxYTD
  add #TaxQTD  to #total_TaxQTD
  add #TaxMTD  to #total_TaxMTD
  add #AdjTax  to #total_AdjTax
  add #New_YTD to #total_New_YTD
  add #New_QTD to #total_New_QTD
  add #New_MTD to #total_New_MTD

  add #TaxYTD  to #grand_TaxYTD
  add #TaxQTD  to #grand_TaxQTD
  add #TaxMTD  to #grand_TaxMTD
  add #AdjTax  to #grand_AdjTax
  add #New_YTD to #grand_New_YTD
  add #New_QTD to #grand_New_QTD
  add #New_MTD to #grand_New_MTD

  move 'Y' to $PrintTotals
end-procedure

begin-procedure Calculate-Tax

  let #WorkGross = #CurTxGrs_YTD
  if $SUI_OVERRIDE='Y'

     evaluate &TX.Balance_Qtr
       when = 1
         if #WorkGross > #MaxGross1
           let #WorkGross=#MaxGross1
         end-if
         break
       when = 2
         if #WorkGross > #MaxGross2
           let #WorkGross=#MaxGross2
         end-if
         break
       when = 3
         if #WorkGross > #MaxGross3
           let #WorkGross=#MaxGross3
         end-if
         break
       when = 4
         if #WorkGross > #MaxGross4
           let #WorkGross=#MaxGross4
         end-if
     end-evaluate
  else

    if #MaxGross > 0
       if #WorkGross > #MaxGross
          let #WorkGross = #MaxGross
       end-if
    end-if
  end-if

  if $MultiRate = 'N'
    let #CalcdTax = round (#WorkGross * #Rate1  / 100,2)
  else
    do Calculate-Multiple
  end-if

  if #CalcdTax <> #TaxYTD
    let #AdjTax = #CalcdTax - #TaxYTD
  else
    move 0 to #AdjTax
  end-if

  move 0             to #CalcdTax

  if abs(#AdjTax) > .02
    move 'Y' to $TaxDiff
  else
    move 'N' to $TaxDiff
  end-if

end-Procedure

begin-procedure Calculate-Multiple
begin-SELECT
TB.BALANCE_QTR
TB.TXGRS_QTD
TB.EMPLID

  do Calculate-Quarters

TB.COMPANY
TB.BALANCE_YEAR
TB.BALANCE_PERIOD
FROM PS_TAX_BALANCE TB
WHERE TB.EMPLID=$EMPLID
 AND TB.COMPANY=$COMPANY
 AND TB.BALANCE_ID    = $Calendar_Year_Id
 AND TB.BALANCE_YEAR  = &TX.Balance_Year
 AND TB.BALANCE_QTR  <= &TX.Balance_Qtr
 AND TB.STATE=$STATE
 AND TB.LOCALITY=' '
 AND TB.TAX_CLASS=$TaxClass
 AND TB.BALANCE_PERIOD =
     (SELECT MAX(T1.BALANCE_PERIOD)
      FROM   PS_TAX_BALANCE T1
      WHERE  T1.EMPLID          = TB.EMPLID
        AND  T1.COMPANY         = TB.COMPANY
        AND  T1.BALANCE_ID    = TB.BALANCE_ID
        AND  T1.BALANCE_YEAR  = TB.BALANCE_YEAR
        AND  T1.BALANCE_QTR   = TB.BALANCE_QTR
        AND  T1.STATE           = TB.STATE
        AND  T1.LOCALITY        = TB.LOCALITY
        AND  T1.TAX_CLASS       = TB.TAX_CLASS)
ORDER BY TB.EMPLID ASC, TB.COMPANY ASC, TB.BALANCE_YEAR DESC, TB.BALANCE_QTR DESC
end-SELECT

end-procedure

begin-procedure Calculate-Quarters

  let #TxGrs_QTD = &TB.TXGRS_QTD
  if #TxGrs_QTD > #WorkGross
     let #TxGrs_QTD = #WorkGross
  end-if
  let #WorkGross = #WorkGross - #TxGrs_QTD

  evaluate &TB.Balance_Qtr
    when = 1
      let #Calcd1 = round (#TxGrs_QTD * #Rate1 / 100,2)
      add #Calcd1 to #CalcdTax
    when = 2
      let #Calcd2 = round (#TxGrs_QTD * #Rate2 / 100,2)
      add #Calcd2 to #CalcdTax
    when = 3
      let #Calcd3 = round (#TxGrs_QTD * #Rate3 / 100,2)
      add #Calcd3 to #CalcdTax
    when = 4
      let #Calcd4 = round (#TxGrs_QTD * #Rate4 / 100,2)
      add #Calcd4 to #CalcdTax
  end-evaluate
  move 0 to #Calcd1
  move 0 to #Calcd2
  move 0 to #Calcd3
  move 0 to #Calcd4
end-procedure

begin-procedure Company-Change
  if $Company <> ''
    do Page-or-Not
  end-if
  move &C.Company to $Company
  do Get-Company-Data
end-procedure


begin-procedure State-Change
  let $State = rtrim(&C.State, ' ')
  do Get-State-Tax-Data                       !Employer ID

  If &C.TAX_CLASS = 'S'
    do Get-Spc-Rate
  else
    do Get-SUT-Rates
    do Get-SUI-Amounts
  end-if

  if #Rate1 = #Rate2 and
     #Rate2 = #Rate3 and
     #Rate3 = #Rate4
       move 'N' to $MultiRate
  else
       move 'Y' to $MultiRate
  end-if

  let #MaxGross = 0

begin-SELECT
OT.MAX_GROSS

  let #MaxGross = &OT.MAX_GROSS

FROM  PS_ST_OTH_TAX_TBL OT
WHERE OT.STATE = $State
  AND OT.TAX_CLASS = $TaxClass
  AND OT.EFFDT     =
      (SELECT MAX(EFFDT)
       FROM   PS_ST_OTH_TAX_TBL
       WHERE  STATE   = OT.STATE
         AND  EFFDT  <= $AsOfDate)
end-SELECT
end-procedure


begin-procedure Print-SubTotals
  if $EmpFound = 'Y' and
    $PrintTotals = 'Y'
    print '*'                     (+4,59,17) fill
    print ' Current '             (0,76)
    print '*'                     (0,85,15) fill
    print 'Totals     Company: '  (+1,1)
    print $Company                (0,21,3)
    print '     State: '          (0,24)
    print $State                  (0,36,2)
    print #total_TaxYTD           (0,53)    edit 999,999,999.99mi
    print #total_TaxQTD           (0,69)    edit 999,999,999.99mi
    print #total_TaxMTD           (0,85)    edit 999,999,999.99mi
    print #total_AdjTax           (0,101)   edit 999,999,999.99mi
    print '*'                     (+2,59,16) fill
    print ' Adjusted '            (0,75)
    print '*'                     (0,85,15) fill
    print #total_New_YTD          (+1,53)   edit 999,999,999.99
    print #total_New_QTD          (0,69)    edit 999,999,999.99
    print #total_New_MTD          (0,85)    edit 999,999,999.99
    move 0 to #total_TaxYTD
    move 0 to #total_TaxQTD
    move 0 to #total_TaxMTD
    move 0 to #total_AdjTax
    move 0 to #total_New_YTD
    move 0 to #total_New_QTD
    move 0 to #total_New_MTD
    move 'N' to $PrintTotals
  end-if
end-procedure


begin-procedure Print-GrandTotals
  if $EmpFound = 'Y'
    print '*'                     (+4,59,17) fill
    print ' Current '             (0,76)
    print '*'                     (0,85,15) fill
    print 'Report Totals'         (+1,1)
    print #grand_TaxYTD           (0,53)    edit 999,999,999.99mi
    print #grand_TaxQTD           (0,69)    edit 999,999,999.99mi
    print #grand_TaxMTD           (0,85)    edit 999,999,999.99mi
    print #grand_AdjTax           (0,101)   edit 999,999,999.99mi
    print '*'                     (+2,59,16) fill
    print ' Adjusted '            (0,75)
    print '*'                     (0,85,15) fill
    print #grand_New_YTD          (+1,53)   edit 999,999,999.99
    print #grand_New_QTD          (0,69)    edit 999,999,999.99
    print #grand_New_MTD          (0,85)    edit 999,999,999.99
  end-if
end-procedure


begin-procedure Page-or-Not
  if $EmpFound = 'Y'
    if $State <> ''
      if $DoPage = 'Y'
        do Print-SubTotals
        new-page
        move 'N' to $DoPage
      end-if
    end-if
  end-if
end-procedure

begin-procedure NTR-Check
  if $EmpFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    print '********************************'  (+3,1)
    print '  No Employee Records Selected  '  (+1,1)
    print '********************************'  (+1,1)
    date-time () hh:mi:ss &t2
    display &t2
  end-if
end-procedure

begin-procedure Prompts

  while $PgmMode = ''
    input $PgmMode 'Report only or update mode? (R, U or Q to quit)'
    uppercase $PgmMode
    if INSTR('RUQ',$PgmMode,1) = 0
      display ' '
      display '***** Enter R, U, or Q *****'
      display ' '
      move '' to $PgmMode
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Program_Mode to $PgmMode
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $PgmMode
    when = 'Q'
      stop quiet

  end-evaluate
end-procedure

begin-procedure Get-SUT-Rates
begin-SELECT
B.EFF_STATUS
B.SUT_EFF_TAX_YR
B.SUT_EFF_TAX_QTR
B.SUT_EXPERIENCE_RT
B.COMPANY
B.STATE
B.EFFDT

  do Load-Rate-Tbl

FROM PS_CO_STATETAX_TBL B
WHERE B.COMPANY=$COMPANY
  AND B.STATE=$STATE
  AND B.EFF_STATUS='A'
  AND B.EFFDT<=$ASOFDATE
  AND B.SUT_EFF_TAX_YR<=#QTRYEAR
ORDER BY
  B.EFFDT ASC
end-SELECT
end-procedure

begin-procedure Load-Rate-Tbl

  if &B.SUT_Eff_Tax_Yr < #QtrYear
    move &B.SUT_Experience_Rt to #Rate1
    move &B.SUT_Experience_Rt to #Rate2
    move &B.SUT_Experience_Rt to #Rate3
    move &B.SUT_Experience_Rt to #Rate4
  else
    evaluate &B.SUT_Eff_Tax_Qtr
      when = '1'
        move &B.SUT_Experience_Rt to #Rate1
        move &B.SUT_Experience_Rt to #Rate2
        move &B.SUT_Experience_Rt to #Rate3
        move &B.SUT_Experience_Rt to #Rate4
      when = '2'
        move &B.SUT_Experience_Rt to #Rate2
        move &B.SUT_Experience_Rt to #Rate3
        move &B.SUT_Experience_Rt to #Rate4
      when = '3'
        move &B.SUT_Experience_Rt to #Rate3
        move &B.SUT_Experience_Rt to #Rate4
      when = '4'
        move &B.SUT_Experience_Rt to #Rate4
     end-evaluate
  end-if
end-procedure

begin-procedure Get-SUI-Amounts

  let #MaxGross1=0
  let #MaxGross2=0
  let #MaxGross3=0
  let #MaxGross4=0

begin-SELECT
D.EFFDT
D.SUT_EFF_TAX_YR
D.SUT_EFF_TAX_QTR
D.SUI_OVERRIDE
D.SUI_MAX_GROSS

  let $SUI_OVERRIDE=&D.SUI_OVERRIDE

  if $SUI_OVERRIDE='Y'
     do Load-MaxGross-Tbl
  end-if

FROM PS_CO_STATETAX_TBL D
WHERE D.COMPANY=$COMPANY
  AND D.STATE=$STATE
  AND D.EFF_STATUS='A'
  AND D.EFFDT<=$ASOFDATE
  AND D.SUT_EFF_TAX_YR<=#QTRYEAR
  AND D.SUT_EFF_TAX_QTR<=$Balance_Quarter
ORDER BY
  D.EFFDT ASC
end-SELECT
end-procedure

begin-procedure Load-MaxGross-Tbl

  if &D.SUT_Eff_Tax_Yr < #QtrYear
    move &D.SUI_Max_Gross to #MaxGross1
    move &D.SUI_Max_Gross to #MaxGross2
    move &D.SUI_Max_Gross to #MaxGross3
    move &D.SUI_Max_Gross to #MaxGross4
  else
    evaluate &D.SUT_Eff_Tax_Qtr
      when = '1'
        move &D.SUI_Max_Gross to #MaxGross1
        move &D.SUI_Max_Gross to #MaxGross2
        move &D.SUI_Max_Gross to #MaxGross3
        move &D.SUI_Max_Gross to #MaxGross4
      when = '2'
        move &D.SUI_Max_Gross to #MaxGross2
        move &D.SUI_Max_Gross to #MaxGross3
        move &D.SUI_Max_Gross to #MaxGross4
      when = '3'
        move &D.SUI_Max_Gross to #MaxGross3
        move &D.SUI_Max_Gross to #MaxGross4
      when = '4'
        move &D.SUI_Max_Gross to #MaxGross4
     end-evaluate
  end-if
end-procedure

begin-procedure Get-Spc-Rate
begin-SELECT
F.EFFDT
F.TAX_RT

    do Format-DateTime(&F.EFFDT, $F.EFFDT, {DEFCMP}, '', '')
    let #EFF_YR  = {ps-substr}($F.EFFDT, 1, 4)
    let #EFF_QTR = {ps-substr}($F.EFFDT, 5, 2)
    let #EFF_QTR = trunc((#EFF_QTR + 2) / 3,0)

    do Load-Spc-Rate-Tbl

FROM PS_ST_OTH_TAX_TBL F
WHERE F.TAX_CLASS = 'S'
  AND F.STATE=$STATE
  AND F.EFFDT  <= $AsOfDate
ORDER BY
  F.EFFDT ASC
end-SELECT

begin-SELECT
F1.SHI_OVERRIDE
F1.SHI_RATE

  if &F1.SHI_OVERRIDE = 'Y'

     move &F1.SHI_RATE to #Rate1
     move &F1.SHI_RATE to #Rate2
     move &F1.SHI_RATE to #Rate3
     move &F1.SHI_RATE to #Rate4

  end-if

FROM PS_CO_STATETAX_TBL F1
WHERE F1.COMPANY=$COMPANY
  AND F1.STATE=$STATE
  AND F1.EFF_STATUS='A'
  AND F1.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_CO_STATETAX_TBL Z1
     WHERE Z1.COMPANY=$COMPANY
       AND Z1.STATE=$STATE
       AND Z1.EFF_STATUS='A'
       AND Z1.EFFDT  <= $AsOfDate)
end-SELECT

  let #Rate1 = #Rate1 * 100
  let #Rate2 = #Rate2 * 100
  let #Rate3 = #Rate3 * 100
  let #Rate4 = #Rate4 * 100

end-procedure

begin-procedure Load-Spc-Rate-Tbl

  if #EFF_YR < #QtrYear
    move &F.TAX_RT to #Rate1
    move &F.TAX_RT to #Rate2
    move &F.TAX_RT to #Rate3
    move &F.TAX_RT to #Rate4
  else
    evaluate #EFF_QTR
      when = 1
        move &F.TAX_RT to #Rate1
        move &F.TAX_RT to #Rate2
        move &F.TAX_RT to #Rate3
        move &F.TAX_RT to #Rate4
      when = 2
        move &F.TAX_RT to #Rate2
        move &F.TAX_RT to #Rate3
        move &F.TAX_RT to #Rate4
      when = 3
        move &F.TAX_RT to #Rate3
        move &F.TAX_RT to #Rate4
      when = 4
        move &F.TAX_RT to #Rate4
     end-evaluate
  end-if
end-procedure

begin-procedure Update-Balance

begin-SQL
UPDATE PS_TAX_BALANCE
   SET TAX_YTD = #New_YTD
      ,TAX_QTD = #New_QTD
      ,TAX_MTD = #New_MTD
 WHERE EMPLID         = $EmplID
   AND COMPANY        = $Company
   AND  BALANCE_ID    = $Calendar_Year_Id
   AND  BALANCE_YEAR  = &TX.Balance_Year
   AND  BALANCE_QTR   = &TX.Balance_Qtr
   AND STATE          = $State
   AND LOCALITY       = ' '
   AND TAX_CLASS      = $TaxClass
   AND BALANCE_PERIOD        = #MonthCd
end-SQL
end-procedure

begin-procedure Ignore
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

