!***********************************************************************
!  TAX810KS:  Qtrly Wage List - KANSAS                                 *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/05/22:13:01:08                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  702214                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'

  Let $skip = 'n'   !*** Per incident R-JSODER-Y68V5
  do First-Company-Pass
  do Process-Main

  close 10

  if #Count_F > 0
     display ''
     display 'Upon successful conclusion of this program, the following'
     display 'file will have been created:'
     display ''
     display '  TAX810KS  contains 275-character records in the NASWA format'
     display '            required for the reporting of quarterly wages to the'
     display '            Kansas Department of Labor.'
     display ''
     display 'Follow the instructions from the department for preparing'
     display 'and submitting the file electronically.'
     display ''
  else
     do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810KS' to $ReportID
  move 'Kansas Quarterly UI Wage Report' to $ReportTitle

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'KS'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09
  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($QtrBeginDate,$QtrBeginDate,{DEFYMD},'','native')

  do Get-Quarter-Dates

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

  do Open-File
end-procedure


begin-procedure Open-File

  let  $FileID = '{IMPORTPREFIX}TAX810KS{IMPORTSUFFIX}'
  open $FileID as 10 for-writing record=275:fixed

end-procedure


begin-procedure First-Company-Pass
  do Init-Company-Array
  do Build-Company-Array
end-procedure

begin-procedure Init-Company-Array
   create-array name=Company_Emps   -
      size=2000                     -
      field=Company_ID:char         -
      field=Employees_YN:char
end-procedure


begin-procedure Build-Company-Array
  let #i = 0
  let $Company_Has_Employees = 'N'

begin-SELECT
Z.COMPANY

  do Read-Employee-Data-Firstpass
  let #i = #i + 1
  put                      &Z.COMPANY                -
                           $Company_Has_Employees    -
  into company_emps (#i)   Company_ID                -
                           Employees_YN
  let $Company_Has_Employees = 'N'

FROM  PS_COMPANY_TBL Z, PS_CO_STATETAX_TBL X
WHERE Z.COMPANY = X.COMPANY
#ifdef TAXTEST
  AND X.STATE = 'CA'
#else
  AND X.STATE = 'KS'
#endif
AND Z.EFF_STATUS      = 'A'
AND Z.TAX_REPORT_TYPE = '2'
AND X.EFF_STATUS      = 'A'
AND Z.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = X.COMPANY
       AND  EFFDT  <= $AsOfDate)
AND X.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_CO_STATETAX_TBL
     WHERE  COMPANY = X.COMPANY
       AND  STATE   = X.STATE
       AND  EFFDT  <= $AsOfDate)
ORDER BY Z.COMPANY
end-SELECT

let #i = 0

end-procedure


begin-procedure Read-Employee-Data-Firstpass

begin-SELECT loops = 1
FP.COMPANY
FP.EMPLID

    let $Company_Has_Employees = 'Y'

FROM  PS_TAX_BALANCE FP
WHERE FP.COMPANY       = &Z.Company
  AND FP.TAX_CLASS     = 'U'
  AND FP.BALANCE_ID    = $Calendar_Year_Id
  AND FP.BALANCE_YEAR  = &TX.Balance_Year
  AND FP.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND FP.STATE         = 'CA'
#else
  AND FP.STATE         = 'KS'
#endif
  AND FP.LOCALITY      = ' '
  AND FP.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = FP.EMPLID
         AND  COMPANY       = FP.COMPANY
         AND  BALANCE_ID    = FP.BALANCE_ID
         AND  BALANCE_YEAR  = FP.BALANCE_YEAR
         AND  BALANCE_QTR   = FP.BALANCE_QTR
         AND  STATE         = FP.STATE
         AND  LOCALITY      = FP.LOCALITY
         AND  TAX_CLASS     = FP.TAX_CLASS)
  AND FP.NLGRS_QTD <> 0

end-SELECT
end-procedure


begin-procedure Process-Main
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display ' '
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

  do Get-Company-Data                 !Transmitter identifying data

  do Write-A-Record
  do Write-B-Record

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  let $skip = 'n'

  move &A.Company to $Company
  move &A.Country to $Country
  move ''         to $priorEmplID

  do Before-Company
  if $skip = 'n'
   do Read-Employee-Data
  end-if

FROM  PS_COMPANY_TBL A, PS_CO_STATETAX_TBL B
WHERE A.COMPANY = B.COMPANY
#ifdef TAXTEST
  AND B.STATE = 'CA'
#else
  AND B.STATE = 'KS'
#endif
AND A.EFF_STATUS      = 'A'
AND A.TAX_REPORT_TYPE = '2'
AND B.EFF_STATUS      = 'A'
AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
AND B.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_CO_STATETAX_TBL
     WHERE  COMPANY = B.COMPANY
       AND  STATE   = B.STATE
       AND  EFFDT  <= $AsOfDate)
ORDER BY A.COMPANY
end-SELECT

  if #Count_F > 0
     do Print-Summary-Data('FileTotal')
  end-if

end-procedure


begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  if &C.NlGrs_QTD > 0
     do Process-Employee
  else
     do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'KS'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY C.COMPANY, D1.NATIONAL_ID

end-SELECT
end-procedure


begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
     move 'I        '      to $NATIONAL_ID
  else
     move &D1.NATIONAL_ID  to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $FirstName
  uppercase $LastName
  uppercase $MidInitial

  move &C.EmplID  to $EmplID

  let $MonEmpFlg1 = '0'
  let $MonEmpFlg2 = '0'
  let $MonEmpFlg3 = '0'

  do Get-Monthly-Employment-Indicator

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD

  add #NlGrs_QTD to #Co_NlGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD
  add #ExGrs_QTD to #Co_ExGrs_QTD


! CREATE MULTIPLE 'S' RECORDS FOR TOTAL WAGES OR EXCESS WAGES OF $1,000,000 OR MORE

  if #NlGrs_QTD > 999999.99
     let #NlGrs_Max = 999999.00
     let #NlGrs_Rem = #NlGrs_QTD - #NlGrs_Max
     let #ExGrs_Max = 999999.00
     let #ExGrs_Rem = #ExGrs_QTD - #ExGrs_Max
     move 'Y' to $Check-Excess

     while #NlGrs_Rem > 0
       let $NlGrs_QTD = EDIT(#NlGrs_Max * 100, '09999999999999')
       let #NlGrs_Max = #NlGrs_Max - 1.00
       let #NlGrs_Rem = #NlGrs_Rem - #NlGrs_Max

       do Check-Excess-Ovrflw
       do Write-S-Record
     end-while

     do Check-Excess-Ovrflw
     let #NlGrs_Rem = #NlGrs_Rem + #NlGrs_Max
     let $NlGrs_QTD = EDIT(#NlGrs_Rem * 100, '09999999999999')
     do Write-S-Record
  else
     let $NlGrs_QTD = EDIT(#NlGrs_QTD * 100, '09999999999999')
     let $ExGrs_QTD = EDIT(#ExGrs_QTD * 100, '09999999999999')
     do Write-S-Record   
  end-if

  add 1 to #Count_S
end-procedure


begin-procedure Check-Excess-Ovrflw

  if $Check-Excess = 'Y'
     if #ExGrs_Rem > 0
        let $ExGrs_QTD = EDIT(#ExGrs_Max * 100, '09999999999999')       
        let #ExGrs_Max = #ExGrs_Max - 1.00
        let #ExGrs_Rem = #ExGrs_Rem - #ExGrs_Max
     else
        let #ExGrs_Rem = #ExGrs_Rem + #ExGrs_Max
        let $ExGrs_QTD = EDIT(#ExGrs_Rem * 100, '09999999999999')
        move 'N' to $Check-Excess
     end-if

  else
     let $ExGrs_QTD = EDIT(#ExGrs_QTD * 100, '09999999999999')
  end-if

end-procedure

 
begin-procedure Before-Company
  do Get-Company-Data

  move 'KS' to $State
  do Get-State-Tax-Data             !Employer ID

  if RTRIM(&Employer_ID_SUT,' ') = ''
     display ' '
     display '*** State Unemployment ID missing in Company State Tax Table ***'
     display 'Company: ' noline
     display $Company
     display ' '
     let $skip = 'y'
  else

     let $StateSUT = RTRIM(&Employer_ID_SUT,' ')
     let  #MaxLength = length($StateSUT)

     if #MaxLength > 6
        display ' '
        display '*** State Unemployment ID in Company State Tax Table longer than 6 digits ***'
        display '**************************** Processing stopped *****************************'
        display 'Company: '  noline
        display $Company     noline
        display ', State Unemployment Employer ID: '  noline
        display $StateSUT
        display ' '
        stop
     else

! CHECK FOR ALL NUMERIC
        move 'N' to $Err-Ind
        let #Char_Pos  =  1

        while #Char_Pos <= 6
          let $Test_Char   = SUBSTR($StateSUT, #Char_Pos, 1)
          let #Which_Digit = INSTR('0123456789', $Test_Char, 1)

          if  #Which_Digit = 0
              move 'Y' to $Err-Ind
              break
          end-if

          add 1 to #Char_Pos
        end-while

! PRINT ERROR MESSAGE AND ABORT IF EMPLOYER ID INVALID
        if $Err-Ind = 'Y'
           display ' '
           display '*** State Unemployment ID not numeric in Company State Tax Table ***'
           display '*********************** Processing stopped *************************'
           display 'Company: ' noline
           display $Company noline
           display ', State Unemployment Employer ID: '  noline
           display $StateSUT
           display ' '
           stop
        else
           move $StateSUT to $StateSUT 099999
        end-if
     end-if
  end-if


  if $skip = 'n'
     move $CompanyName    to $TransmitterName
     move &CT.Federal_EIN to $FedEIN 099999999
     move &CT.Address1    to $TransmitterAddress
     move &CT.City        to $TransmitterCity
     move &CT.State       to $TransmitterState
     move &CT.Postal      to $Postal

     move $Postal to $ZipExtsn ~~~~~~xxxx
     if instr($Postal, '-',6) = 0 and
        $ZipExtsn <> '    '
         let $Postal = substr($Postal,1,5)|| '-' || substr($Postal,6,4)
     end-if
     move $Postal to $ZipExtsn ~~~~~xxxxx

     uppercase $TransmitterName
     uppercase $TransmitterAddress
     uppercase $TransmitterCity

     do Write-E-Record
  end-if

end-procedure


begin-procedure After-Company

  do Print-Summary-Data('CoTotal')

  add #Count_S to #Count_F
  move 0 to #Count_S

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
  add #Co_ExGrs_QTD to #Tot_ExGrs_QTD

  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  new-page

end-procedure


begin-Procedure Write-A-Record
  move $CompanyName    to $TransmitterName
  move &CT.Federal_EIN to $FedEIN 099999999
  move &CT.Address1    to $TransmitterAddress
  move &CT.City        to $TransmitterCity
  move &CT.State       to $TransmitterState
  move &CT.Postal      to $Postal

  move $Postal to $ZipExtsn ~~~~~~xxxx
  if instr($Postal, '-',6) = 0
  and $ZipExtsn <> '    '
    let $Postal = substr($Postal,1,5)|| '-' || substr($Postal,6,4)
  end-if
  move $Postal to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity

  write 10 from    'A':1          !    1
                   $Sp:4          !    2
               $FedEIN:9          !    6
                   $Sp:9          !   15
      $TransmitterName:50         !   24
   $TransmitterAddress:40         !   74
      $TransmitterCity:25         !  114
     $TransmitterState:2          !  139
                   $Sp:13         !  141
               $Postal:5          !  154
             $ZipExtsn:5          !  159
        $ContactPerson:30         !  164
         $ContactPhone:10         !  194
           $ContactExt:4          !  204
                   $Sp:68         !  208

end-procedure


begin-procedure Write-B-Record

  write 10 from    'B':1          !    1
                   $Sp:145        !    2
      $TransmitterName:44         !  147
   $TransmitterAddress:35         !  191
      $TransmitterCity:20         !  226
     $TransmitterState:2          !  246
                   $Sp:5          !  248
               $Postal:5          !  253
             $ZipExtsn:5          !  258
                   $Sp:13         !  263

end-procedure


begin-procedure Write-E-Record

  let $ZipExt = substr($ZipExtsn,2,4)

  write 10 from    'E':1          !    1
                   $Sp:4          !    2
               $FedEIN:9          !    6
                   $Sp:9          !   15
      $TransmitterName:50         !   24
   $TransmitterAddress:40         !   74
      $TransmitterCity:25         !  114
     $TransmitterState:2          !  139
                   $Sp:9          !  141
               $ZipExt:4          !  150
               $Postal:5          !  154
                   $Sp:14         !  159
             $StateSUT:6          !  173
                   $Sp:9          !  179
                   $Sp:88         !  188

  add 1 to #Count_E

end-procedure


begin-procedure Write-S-Record

  write 10 from    'S':1          !    1     
          $NATIONAL_ID:9          !    2
             $LastName:20         !   11
            $FirstName:12         !   31
           $MidInitial:1          !   43
                   $Sp:20         !   44
            $NLGrs_QTD:14         !   64
            $ExGrs_QTD:14         !   78
                   $Sp:55         !   92
             $StateSUT:6          !  147
                   $Sp:59         !  153
           $MonEmpFlg1:1          !  212
           $MonEmpFlg2:1          !  213
           $MonEmpFlg3:1          !  214
          $QtrEndMonth:2          !  215
      &TX.Balance_Year:4          !  217
                   $Sp:55         !  221

  move '' to $NlGrs_QTD
  move '' to $ExGrs_QTD
  move 0  to #NlGrs_QTD
  move 0  to #ExGrs_QTD

end-procedure


begin-procedure Get-Quarter-Dates

    move &TX.Balance_Year   to $EffYear 9999
    move &TX.Balance_Qtr    to $EffQuarter 9

    let #EffYear       = to_number($EffYear)
    let #EffQuarter    = to_number($EffQuarter)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            break
        when-other
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
    end-evaluate

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')

end-procedure


begin-procedure Get-Monthly-Employment-Indicator
begin-SELECT
A1.COMPANY
A1.PAYGROUP
A1.PAY_END_DT
A1.EMPLID
A1.EMPL_RCD
A1.EARNS_BEGIN_DT
A1.EARNS_END_DT
A1.PAY_LINE_STATUS

   move &A1.EARNS_BEGIN_DT to $EarnsBD
   move &A1.EARNS_END_DT   to $EarnsED

   do Format-DateTime($EarnsBD, $EarnsBeginDt,{DEFCMP},'','')
   do Format-DateTime($EarnsED, $EarnsEndDt,{DEFCMP},'','')

   if $EarnsBeginDt <= $12thOfMonth1
     if $EarnsEndDt >= $12thOfMonth1
          let $MonEmpFlg1 = '1'
          let #MonEmpCnt1 = 1
      end-if
   end-if

    if $EarnsBeginDt <= $12thOfMonth2
      if $EarnsEndDt >= $12thOfMonth2
          let $MonEmpFlg2 = '1'
          let #MonEmpCnt2 = 1
      end-if
    end-if

    if $EarnsBeginDt <= $12thOfMonth3
      if $EarnsEndDt >= $12thOfMonth3
           let $MonEmpFlg3 = '1'
           let #MonEmpCnt3 = 1
       end-if
    end-if

FROM PS_PAY_EARNINGS A1, PS_PAY_CHECK C1
WHERE A1.COMPANY = $Company
  AND A1.EMPLID  = $EmplID
  AND A1.PAY_END_DT BETWEEN $First_Day_Of_Quarter AND $Last_Day_Of_Quarter
  AND A1.PAY_LINE_STATUS = 'F'
  AND (($12th_Of_1st_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_2nd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_3rd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT))
  AND A1.COMPANY = C1.COMPANY
  AND A1.PAYGROUP = C1.PAYGROUP
  AND A1.PAY_END_DT = C1.PAY_END_DT
  AND A1.OFF_CYCLE = C1.OFF_CYCLE
  AND A1.PAGE_NUM = C1.PAGE_NUM
  AND A1.LINE_NUM = C1.LINE_NUM
  AND C1.PAYCHECK_STATUS IN ('F','A','R')
end-SELECT
end-procedure


begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $ContactPerson  maxlen=30 '  Contact name (30 char max)'
  input $ContactPhone   maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $ContactExt     maxlen=4  '  Contact 4-digit extension'

  uppercase $ContactPerson
  uppercase $ContactPhone
  uppercase $ContactExt
end-procedure


begin-procedure Convert-Parameters
  move $RC_QTR_UI.Contact_Person      to $ContactPerson
  move $RC_QTR_UI.Contact_Phone       to $ContactPhone
  move $RC_QTR_UI.Contact_Phone_EXT   to $ContactExt

  unstring  $ContactPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $ContactPhone  = $str1 || $str3 || $str4
end-procedure


#Include 'txrnctl1.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
