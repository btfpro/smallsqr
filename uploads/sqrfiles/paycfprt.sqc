!***********************************************************************
!***********************************************************************
!  PAYCFPRT: Print ChartFields                                         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/28:16:19:51                        
!       $Release:  HR9                                        
!      $Revision:  102                                        
!                                                                      *
!***********************************************************************
!-----------------------------------------------------------------------
! To use common ChartField print routine, define following variables
!
! $DynCF_ChartFields_Option --> CF Configuration - "P" = Pending Changes
!                                                  "A" = Current
!
! $DynCF_LabelPosn_Option   --> Label Position   - "T" = above
!                                                  "S" = side
!
! $DynCF_LabelUnderLine     --> Label Underline  - "Y" = Print
!                                                  "N" = Suppress
!
! $DynCF_Alignment_Option   --> Label Alignment  - "L" = Left
!                                                  "R" = Right
!                                                  "C" = Center
!
! $DynCF_CF_Headings        --> Label Heading    - "Y" = Print
!                                                  "N" = Suppress
!
! $DynCF_LabelName_Option   --> Label            - "L" = LongName
!                                                  "S" = ShortName
!
! $DynCF_Include_Affiliate  --> Affiliate        - "Y" = Include
!                                                - "N" = Not include
!
! $DynCF_LanguageCd         --> Language Code
!
! #DynCF_StrCol             --> Starting Column
!
! #DynCF_EndCol             --> Ending Column
!
!-----------------------------------------------------------------------
! Following work variables are initialized after ChartField read from
! ChartField Template and they can be referenced by the calling program
!
!   $DynCF_Filler         - initialized to blanks
!   #DynCF_HeaderPrtLine  - number of print lines required to print
!                           entire set of CF labels
!   #DynCF_DetailPrtLine  - number of print lines required to print
!                           entire set of CF values
!
!-----------------------------------------------------------------------
! Following common routines can be called
!
! Create-CF-Array (** Mandatory **)
!   - build internal work array
!   - no input parameter required
!
! Initialize-CF-Variables
!   - Reset all ChartField variables
!   - no input parameter required
!
! Add-To-Exclude-CF-List (:1)
!   - Append to the Exclude ChartField List
!   - input parameter :1 = ChartField name
!
! Add-To-LabelOverride (:1, :2)
!   - Append to the ChartField Label Override List
!   - input parameter :1 = ChartField name
!                     :2 = Override ChartField Label
!
! Build-CF-Array (** Mandatory **)
!   - Read ChartField Template and/or ChartField Activity Log depending
!     on the $DynCF_ChartFields_Option selected
!   - no input parameter required
!
! Print-CF-Labels (:1, :2)
!   - Print ChartField Labels
!   - input parameter :1 = number of lines to advance before print
!                     :2 = starting point of ChartField print line
!
! Format-CF-Print-Line (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12
!                       :13, :14, :15, :16)
!   - Format ChartField Print Lines
!   - input parameter  :1 = the value of ChartField Account
!                      :2 = the value of ChartField DeptID
!                      :3 = the value of ChartField Project ID
!                      :4 = the value of ChartField Product
!                      :5 = the value of ChartField Fund Code
!                      :6 = the value of ChartField Program Code
!                      :7 = the value of ChartField Class Field
!                      :8 = the value of ChartField Affiliate
!                      :9 = the value of ChartField Operating Unit
!                     :10 = the value of ChartField Alternate Account
!                     :11 = the value of ChartField Budget Reference
!                     :12 = the value of ChartField ChartField1
!                     :13 = the value of ChartField ChartField2
!                     :14 = the value of ChartField ChartField3
!                     :15 = the value of ChartField Affiliate Intra 1
!                     :16 = the value of ChartField Affiliate Intra 2
!
! Print-CF-Details (:1, :2)
!   - Print ChartField Values
!   - input parameter :1 = number of lines to advance before print
!                     :2 = starting point of ChartField print line
!
! Print-CF-Labels-and-Values (:1, :2)
!   - Print ChartField Labels & Values
!   - input parameter :1 = number of lines to advance before print
!                     :2 = starting point of ChartField print line
!
!-----------------------------------------------------------------------
!***********************************************************************

!***********************************************************************
! Procedure:   Create-CF-Array
! Descr:
!***********************************************************************
begin-procedure Create-CF-Array

  Create-Array name=Exclude_CF Size = 50
     Field=FieldName:Char

  Create-Array name=LabelOverride Size = 50
     Field=FieldName:Char
     Field=LabelName:Char

  Create-Array name=CFLabelArray Size = 30
     Field=LabelLine:Char

  Create-Array name=CFLabelLineArray Size = 30
     Field=LabelLine:Char

  Create-Array name=CFDetailsArray Size = 30
     Field=CFDetailLine:Char

  do Initialize-CF-Variables

end-procedure

!***********************************************************************
! Procedure:   Initialize-CF-Variables
! Descr:
!***********************************************************************
begin-procedure Initialize-CF-Variables

  Clear-Array name=Exclude_CF
  let #Exclude_CF_Cnt = 0
  let #Exclude_CF_Max = 50

  Clear-Array name=LabelOverride
  let #LabelOverride_Cnt = 0
  let #LabelOverride_Max = 50

  Clear-Array name=CFLabelArray
  Clear-Array name=CFLabelLineArray
  Clear-Array name=CFDetailsArray

end-procedure

!***********************************************************************
! Procedure:   Add-To-Exclude-CF-List
! Descr:
!***********************************************************************
begin-procedure Add-To-Exclude-CF-List ($ExclFieldName)

  let #_Exclude_CF_Cnt = #_Exclude_CF_Cnt + 1
  put $ExclFieldName into Exclude_CF(#_Exclude_CF_Cnt) FieldName

end-procedure

!***********************************************************************
! Procedure:   Add-To-LabelOverride
! Descr:
!***********************************************************************
begin-procedure Add-To-LabelOverride ($OvrdFieldName, $OvrdLabelName)

  let #_LabelOverride_Cnt = #_LabelOverride_Cnt + 1
  put $OvrdFieldName $OvrdLabelName
      into LabelOverride(#_LabelOverride_Cnt) FieldName LabelName

end-procedure

!***********************************************************************
! Procedure:   Create-Exclude-CF-List
! Descr:
!***********************************************************************
begin-procedure Create-Exclude-CF-List

  let $Excl_CF_List = ''
  let #Idx = 1

  if #Exclude_CF_Cnt > 0
      let $Excl_CF_List = 'ORIG_CF_NAME not in ('

      while #Idx <= #Exclude_CF_Cnt
          get $ExclFieldName from Exclude_CF(#Idx) FieldName

          let $ExclFieldName = ltrim(rtrim($ExclFieldName,' '),' ')
          let $Excl_CF_List = $Excl_CF_List || '''' || $ExclFieldName || ''''

          let #Idx = #Idx + 1
          if #Idx > #Exclude_CF_Cnt
              let $Excl_CF_List = $Excl_CF_List || ')'
          else
              let $Excl_CF_List = $Excl_CF_List || ', '
          end-if
       end-while
  end-if

end-procedure

!***********************************************************************
! Procedure:   Build-CF-Array
! Descr:       Load into CF-ARRAY Chartfields
!***********************************************************************
begin-procedure Build-CF-Array

 Create-Array name=CF_ARRAY Size=50
    Field=FieldName:Char
    Field=DefaultSeq:Number
    Field=FieldLength:Number
    Field=FieldLabel:Char
    Field=LabelLength:Number
    Field=LabelROffset:Number
    Field=LabelLOffset:Number
    Field=FldDispLength:Number
    Field=FldROffset:Number
    Field=FldLOffset:Number
    Field=PrtLength:Number
    Field=PrtLine:Number

  Clear-Array name=CF_ARRAY
  let #CF_ARRAY_Cnt = 0
  let #CF_ARRAY_Max = 50
  let #CF_Length_Tot   = 0

  let $DynCF_Filler = ' '

  do Create-Exclude-CF-List

  if $DynCF_ChartFields_Option = 'P'
      let $CFOrder  = 'Order by CF1.CF_ORDER'
      let $CFStatus = 'CF1.CF_ACTIVE_STATUS = ''A'''
  else
      let $CFOrder  = 'Order by CF1.PREV_CF_ORDER'
      let $CFStatus = 'CF1.PREV_CF_ORDER <> 99'
  end-if

  if $DynCF_Include_Affiliate = 'Y'
      let $CFType = ''
  else
      let $CFType = 'AND CF1.CF_TYPE <> ''A'''
  end-if

  if #Exclude_CF_Cnt > 0
      let $Tmplt_ExclList = 'and CF1.' || $Excl_CF_List
  else
      let $Tmplt_ExclList = ''
  end-if

  let #PrtColCount = #DynCF_StrCol
  let #PrtLevel    = 1

Begin-Select
CF1.ORIG_CF_NAME
CF1.CF_LENGTH
CF1.DISPLAY_LENGTH
CF1.PREV_DISPLAY_LEN
CFDFLT.FIELDNUM

  let $Fld_FieldName       = &CF1.ORIG_CF_NAME
  let #Fld_Length          = &CF1.CF_LENGTH
  let #Fld_DefSeq          = &CFDFLT.FIELDNUM

  if $DynCF_ChartFields_Option = 'P'
      let #Fld_DispLength = &CF1.DISPLAY_LENGTH
  else
      let #Fld_DispLength = &CF1.PREV_DISPLAY_LEN
  end-if

  do Check-Override-Label
  if $Override_Label = 'N'
      do Read-DB-Label
  end-if
  do Populate-CF-Array

From  PS_FS_CF_TEMPLATE CF1, PSRECFIELD CFDFLT
Where CF1.ORIG_CF_NAME = CFDFLT.FIELDNAME
and CFDFLT.RECNAME = 'CHARTFLD_KY_SBR'
and [$CFStatus]
[$CFType]
[$Tmplt_ExclList]
[$CFOrder]
End-Select

  do Format-CF-Labels


#ifdef debugx
  let #i = 1
  while #i <= #CF_ARRAY_Cnt

      get $Fld_FieldName #Fld_DefSeq #Fld_Length $FldLabel #FldLabelLength #LablRightOffset
          #LablLeftOffset #Fld_DispLength #FldRightOffset #FldLeftOffset #PrtLength #PrtLevel
      from CF_ARRAY(#i)
          FieldName DefaultSeq FieldLength FieldLabel LabelLength LabelROffset LabelLOffset
          FldDispLength FldROffset FldLOffset PrtLength PrtLine

      display $Fld_FieldName noline
      display ' ' noline
      display #Fld_DefSeq noline
      display ' ' noline
      display #Fld_Length noline
      display ' ' noline
      display $FldLabel noline
      display ' ' noline
      display #FldLabelLength noline
      display ' ' noline
      display #LablRightOffset noline
      display ' ' noline
      display #LablLeftOffset noline
      display ' ' noline
      display #Fld_DispLength noline
      display ' ' noline
      display #FldRightOffset noline
      display ' ' noline
      display #FldLeftOffset noline
      display ' ' noline
      display #PrtLength noline
      display ' ' noline
      display #PrtLevel

      let #i = #i + 1
  end-while
#end-if

end-procedure

!***********************************************************************
! Procedure:   Check-Override-Label
! Descr:
!***********************************************************************
begin-procedure Check-Override-Label

  let $Override_Label = 'N'
  let #Idx = 1

  if #LabelOverride_Cnt > 0
      while (#Idx <= #LabelOverride_Cnt and $Override_Label = 'N')
          get $OvrdFieldName $OvrdLabelName
              from LabelOverride(#Idx) FieldName LabelName

          if $OvrdFieldName = ltrim(rtrim($Fld_FieldName,' '),' ')
              let $Fld_LongName   = $OvrdLabelName
              let $Fld_ShortName  = $OvrdLabelName
              let $Override_Label = 'Y'
          end-if
          let #Idx = #Idx + 1
       end-while
  end-if

end-procedure

!***********************************************************************
! Procedure:   Read-DB-Label
! Descr:
!***********************************************************************
begin-procedure Read-DB-Label

Begin-Select
DBFLD.LONGNAME
DBFLD.SHORTNAME

  let $Fld_LongName   = &DBFLD.LONGNAME
  let $Fld_ShortName  = &DBFLD.SHORTNAME

From PSDBFLDLABL DBFLD
where DBFLD.FIELDNAME = $Fld_FieldName
and   DBFLD.DEFAULT_LABEL = 1
End-Select

Begin-Select
DBFLDLANG.LONGNAME
DBFLDLANG.SHORTNAME

  let $Fld_LongName   = &DBFLDLANG.LONGNAME
  let $Fld_ShortName  = &DBFLDLANG.SHORTNAME

From PSDBFLDLABLLANG DBFLDLANG, PSDBFLDLABL DBFLD1
where DBFLDLANG.FIELDNAME = $Fld_FieldName
and   DBFLDLANG.FIELDNAME = DBFLD1.FIELDNAME
and   DBFLDLANG.LABEL_ID = DBFLD1.LABEL_ID
and   DBFLD1.DEFAULT_LABEL = 1
and   DBFLDLANG.LANGUAGE_CD = $DynCF_LanguageCd
End-Select

  if $DynCF_ChartFields_Option = 'P'
      do Read-ActLog-Fld-Label
  end-if

end-procedure

!***********************************************************************
! Procedure:   Read-ActLog-Fld-Label
! Descr:
!***********************************************************************
begin-procedure Read-ActLog-Fld-Label

Begin-Select
ACTLG1.LONGNAME
ACTLG1.SHORTNAME

  let $Fld_LongName   = &ACTLG1.LONGNAME
  let $Fld_ShortName  = &ACTLG1.SHORTNAME

From PS_FS_CF_ACT_LOG ACTLG1, PSDBFLDLABL LABL
Where ACTLG1.ORIG_CF_NAME = $Fld_FieldName
and   ACTLG1.CF_TMPLT_ACTION = 'L'
and   LABL.FIELDNAME = ACTLG1.ORIG_CF_NAME
and   LABL.LABEL_ID = ACTLG1.LABEL_ID
and   LABL.DEFAULT_LABEL = 1
End-Select

Begin-Select
ACTLNG.LONGNAME
ACTLNG.SHORTNAME

  let $Fld_LongName   = &ACTLNG.LONGNAME
  let $Fld_ShortName  = &ACTLNG.SHORTNAME

From PS_FS_CF_ACT_LANG ACTLNG
Where ACTLNG.ORIG_CF_NAME = $Fld_FieldName
and   ACTLNG.LANGUAGE_CD  = $DynCF_LanguageCd
End-Select

end-procedure

!***********************************************************************
! Procedure:   Populate-CF-Array
! Descr:
!***********************************************************************
begin-procedure Populate-CF-Array

  if $DynCF_LabelPosn_Option = 'S'

      if $DynCF_LabelName_Option = 'L'
          let $FldLabel   = ltrim(rtrim($Fld_LongName,' '),' ')  || ' - '
      else
          let $FldLabel   = ltrim(rtrim($Fld_ShortName,' '),' ') || ' - '
      end-if
      let #FldLabelLength = Length($FldLabel)
      let #FldLeftOffset   = 0
      let #FldRightOffset  = 0
      let #LablLeftOffset  = 0
      let #LablRightOffset = 0
      let #PrtLength = #FldLabelLength + #Fld_DispLength

  else
      if $DynCF_LabelName_Option = 'L'
          let $FldLabel   = ltrim(rtrim($Fld_LongName,' '),' ')
      else
          let $FldLabel   = ltrim(rtrim($Fld_ShortName,' '),' ')
      end-if
      let #FldLabelLength = Length($FldLabel)

      if #FldLabelLength < #Fld_DispLength
          let #FldLeftOffset  = 0
          let #FldRightOffset = 0
          let #PrtLength = #Fld_DispLength

          evaluate $DynCF_Alignment_Option
              when = 'C'
                  let #LablLeftOffset  = Trunc((#Fld_DispLength - #FldLabelLength) / 2, 0)
                  let #LablRightOffset = #Fld_DispLength - #FldLabelLength - #LablLeftOffset
                  break
              when = 'L'
                  let #LablLeftOffset  = 0
                  let #LablRightOffset = #Fld_DispLength - #FldLabelLength
                  break
              when = 'R'
                  let #LablLeftOffset  = #Fld_DispLength - #FldLabelLength
                  let #LablRightOffset = 0
                  break
          end-evaluate
          let $FldLabel = rpad(lpad($FldLabel,#LablLeftOffset + #FldLabelLength,' '),#LablRightOffset + #LablLeftOffset + #FldLabelLength,' ')
      else
          if #FldLabelLength > #Fld_DispLength
              let #LablLeftOffset  = 0
              let #LablRightOffset = 0
              let #PrtLength = #FldLabelLength

              evaluate $DynCF_Alignment_Option
                  when = 'C'
                      let #FldLeftOffset  = Trunc((#FldLabelLength - #Fld_DispLength) / 2, 0)
                      let #FldRightOffset = #FldLabelLength - #Fld_DispLength - #FldLeftOffset
                      break
                  when = 'L'
                      let #FldLeftOffset  = 0
                      let #FldRightOffset = #FldLabelLength - #Fld_DispLength
                      break
                  when = 'R'
                      let #FldLeftOffset  = #FldLabelLength - #Fld_DispLength
                      let #FldRightOffset = 0
                      break
              end-evaluate
          else
              let #FldLeftOffset   = 0
              let #FldRightOffset  = 0
              let #LablLeftOffset  = 0
              let #LablRightOffset = 0
              let #PrtLength = #FldLabelLength
          end-if
      end-if
  end-if

  let #PrtColCount = #PrtColCount + #PrtLength
  if #PrtColCount > #DynCF_EndCol
      let #PrtLevel = #PrtLevel + 1
      let #PrtColCount = #DynCF_StrCol + #PrtLength + 2
  else
      let #PrtColCount = #PrtColCount + 2
  end-if

  let #CF_ARRAY_Cnt = #CF_ARRAY_Cnt + 1
  put $Fld_FieldName
      #Fld_DefSeq
      #Fld_Length
      $FldLabel
      #FldLabelLength
      #LablRightOffset
      #LablLeftOffset
      #Fld_DispLength
      #FldRightOffset
      #FldLeftOffset
      #PrtLength
      #PrtLevel
  into CF_ARRAY(#CF_ARRAY_Cnt)
      FieldName
      DefaultSeq
      FieldLength
      FieldLabel
      LabelLength
      LabelROffset
      LabelLOffset
      FldDispLength
      FldROffset
      FldLOffset
      PrtLength
      PrtLine

end-procedure

!***********************************************************************
! Procedure:   Format-CF-Labels
! Descr:
!***********************************************************************
begin-procedure Format-CF-Labels

  let #PrtLine = 1
  let $DynCF_Header_Ln = ''
  let $DynCF_UnderLine = ''
  let #i = 1
  while #i <= #CF_ARRAY_Cnt

      get $Fld_FieldName
          $FldLabel
          #FldLabelLength
          #LablRightOffset
          #LablLeftOffset
          #PrtLength
          #PrtLevel
      from CF_ARRAY(#i)
          FieldName
          FieldLabel
          LabelLength
          LabelROffset
          LabelLOffset
          PrtLength
          PrtLine

      if #PrtLine <> #PrtLevel

          let #DynCF_PrintLen = length($DynCF_Header_Ln) - 2
          let $DynCF_Header_Ln = substr($DynCF_Header_Ln, 3, #DynCF_PrintLen)
          put $DynCF_Header_Ln into CFLabelArray(#PrtLine) LabelLine

          if $DynCF_LabelUnderLine = 'Y'
              let #DynCF_PrintLen = length($DynCF_UnderLine) - 2
              let $DynCF_UnderLine  = substr($DynCF_UnderLine , 3, #DynCF_PrintLen)
              put $DynCF_UnderLine into CFLabelLineArray(#PrtLine) LabelLine
          end-if

          let #PrtLine = #PrtLevel
          let $DynCF_Header_Ln = ''
          let $DynCF_UnderLine = ''
      end-if

      let $DynCF_Header_Ln = $DynCF_Header_Ln || '  ' || $FldLabel
      if $DynCF_LabelUnderLine = 'Y'
          let $DynCF_UnderLine = $DynCF_UnderLine || '  ' || lpad('-',#PrtLength,'-')
      end-if

      let #i = #i + 1
  end-while

  let #DynCF_PrintLen = length($DynCF_Header_Ln) - 2
  let $DynCF_Header_Ln = substr($DynCF_Header_Ln, 3, #DynCF_PrintLen)
  put $DynCF_Header_Ln into CFLabelArray(#PrtLine) LabelLine
  if $DynCF_LabelUnderLine = 'Y'

      let #DynCF_PrintLen = length($DynCF_UnderLine) - 2
      let $DynCF_UnderLine  = substr($DynCF_UnderLine , 3, #DynCF_PrintLen)
      put $DynCF_UnderLine into CFLabelLineArray(#PrtLine) LabelLine
  end-if
  let #DynCF_HeaderPrtLine = #PrtLine

#ifdef debugx
  let #i = 1
  while #i <= #PrtLine
      get $DynCF_Header_Ln from CFLabelArray(#i) LabelLine
      display $DynCF_Header_Ln
      if $DynCF_LabelUnderLine = 'Y'
          get $DynCF_UnderLine from CFLabelLineArray(#i) LabelLine
          display $DynCF_UnderLine
      end-if
      let #i = #i + 1
  end-while
#end-if

end-procedure

!***********************************************************************
! Procedure:   Print-CF-Labels
! Descr:
!***********************************************************************
begin-procedure Print-CF-Labels (:#AdvLine, :#Stridx)

    let #CFidx = #Stridx
    while #CFidx <= #_DynCF_HeaderPrtLine
        get $DynCF_Header_Ln from CFLabelArray(#CFidx) LabelLine
        print $DynCF_Header_Ln (+#AdvLine, #_DynCF_StrCol)

        if $_DynCF_LabelUnderLine = 'Y'
            get $DynCF_UnderLine from CFLabelLineArray(#CFidx) LabelLine
            print $DynCF_UnderLine (+1, #_DynCF_StrCol)
        end-if

        if #AdvLine <> 1
            let #AdvLine = 1
        end-if

        let #CFidx = #CFidx + 1
    end-while

end-procedure

!***********************************************************************
! Procedure:   Format-CF-Print-Line
! Descr:       Format ChartField Print Line
!***********************************************************************
begin-procedure Format-CF-Print-Line ($CFValue1, $CFValue2, $CFValue3, $CFValue4, $CFValue5, $CFValue6,
                                      $CFValue7, $CFValue8, $CFValue9, $CFValue10, $CFValue11, $CFValue12,
                                      $CFValue13, $CFValue14, $CFValue15, $CFValue16)

  Clear-Array name=CFDetailsArray
  let $DynCF_Print_Ln  = ''
  let #PrtLine = 1

  let #i = 1
  while #i <= #_CF_ARRAY_Cnt

      get $Fld_FieldName
          #Fld_DefSeq
          #Fld_Length
          $FldLabel
          #Fld_DispLength
          #FldRightOffset
          #FldLeftOffset
          #PrtLength
          #PrtLevel
      from CF_ARRAY(#i)
          FieldName
          DefaultSeq
          FieldLength
          FieldLabel
          FldDispLength
          FldROffset
          FldLOffset
          PrtLength
          PrtLine

      evaluate #Fld_DefSeq
          when =  1
              let $CFValue = $CFValue1
              break
          when =  2
              let $CFValue = $CFValue2
              break
          when =  3
              let $CFValue = $CFValue3
              break
          when =  4
              let $CFValue = $CFValue4
              break
          when =  5
              let $CFValue = $CFValue5
              break
          when =  6
              let $CFValue = $CFValue6
              break
          when =  7
              let $CFValue = $CFValue7
              break
          when =  8
              let $CFValue = $CFValue8
              break
          when =  9
              let $CFValue = $CFValue9
              break
          when = 10
              let $CFValue = $CFValue10
              break
          when = 11
              let $CFValue = $CFValue11
              break
          when = 12
              let $CFValue = $CFValue12
              break
          when = 13
              let $CFValue = $CFValue13
              break
          when = 14
              let $CFValue = $CFValue14
              break
          when = 15
              let $CFValue = $CFValue15
              break
          when = 16
              let $CFValue = $CFValue16
              break
      end-evaluate

      let $CFValue = ltrim(rtrim($CFValue,' '), ' ')
      let #CFLen   = length($CFValue)
      if #CFLen < #Fld_DispLength
          let $CFValue = rpad($CFValue, #Fld_DispLength, ' ')
      else
          let $CFValue = substr($CFValue, 1, #Fld_DispLength)
      end-if

      if #PrtLine <> #PrtLevel
          let #DynCF_PrintLen = length($DynCF_Print_Ln) - 2
          let $DynCF_Print_Ln = substr($DynCF_Print_Ln, 3, #DynCF_PrintLen)
          put $DynCF_Print_Ln into CFDetailsArray(#PrtLine) CFDetailLine
          let #PrtLine = #PrtLevel
          let $DynCF_Print_Ln = ''
      end-if


      if $_DynCF_LabelPosn_Option = 'S'
          let $DynCF_Print_Ln = $DynCF_Print_Ln || '  '
                                || $FldLabel
                                || lpad(rpad($CFValue, #FldRightOffset + #Fld_DispLength, ' '), #FldLeftOffset + #FldRightOffset + #Fld_DispLength, ' ')
      else
          let $DynCF_Print_Ln = $DynCF_Print_Ln || '  '
                                || lpad(rpad($CFValue, #FldRightOffset + #Fld_DispLength, ' '), #FldLeftOffset + #FldRightOffset + #Fld_DispLength, ' ')
      end-if

      let #i = #i + 1
  end-while

  let #DynCF_PrintLen = length($DynCF_Print_Ln) - 2
  let $DynCF_Print_Ln = substr($DynCF_Print_Ln, 3, #DynCF_PrintLen)
  put $DynCF_Print_Ln into CFDetailsArray(#PrtLine) CFDetailLine
  let #_DynCF_DetailPrtLine = #PrtLine

end-procedure

!***********************************************************************
! Procedure:   Print-CF-Details
! Descr:
!***********************************************************************
begin-procedure Print-CF-Details (:#AdvLine, :#Stridx)

    let #CFidx = #Stridx
    while #CFidx <= #_DynCF_DetailPrtLine
        get $DynCF_Print_Ln from CFDetailsArray(#CFidx) CFDetailLine
        print $DynCF_Print_Ln (+#AdvLine, #_DynCF_StrCol)
        if #AdvLine <> 1
            let #AdvLine = 1
        end-if

        let #CFidx = #CFidx + 1
    end-while

end-procedure

!***********************************************************************
! Procedure:   Print-CF-Labels-and-Values
! Descr:
!***********************************************************************
begin-procedure Print-CF-Labels-and-Values (:#AdvLine, :#Stridx)

    let #CFidx = #Stridx
    while #CFidx <= #_DynCF_DetailPrtLine

        if #CFidx <= #_DynCF_HeaderPrtLine
            get $DynCF_Header_Ln from CFLabelArray(#CFidx) LabelLine
            print $DynCF_Header_Ln (+#AdvLine, #_DynCF_StrCol)

            if $_DynCF_LabelUnderLine = 'Y'
                get $DynCF_UnderLine from CFLabelLineArray(#CFidx) LabelLine
                print $DynCF_UnderLine (+1, #_DynCF_StrCol)
            end-if

            if #AdvLine <> 1
                let #AdvLine = 1
            end-if
        end-if

        get $DynCF_Print_Ln from CFDetailsArray(#CFidx) CFDetailLine
        print $DynCF_Print_Ln (+1, #_DynCF_StrCol)
        if #AdvLine <> 1
            let #AdvLine = 1
        end-if

        let #CFidx = #CFidx + 1
    end-while

end-procedure
