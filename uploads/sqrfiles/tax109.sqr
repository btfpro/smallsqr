!***********************************************************************
!  TAX109 : W4 - EMPLOYEE SOCIAL SECURITY NUMBER VERIFICATION RPT.     *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2011/09/23:12:45:41                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860824                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set Database Environment
#include 'setup31.sqc'   !Printer and page-size initialization
!#DEFINE TAXTEST

begin-report
  do Stdapi-Init
  move 'TAX109' to $ReportID
  move 'EMPLOYEE SSN VERIFICATION RPT' to $ReportTitle
  display $ReportTitle
  display ''

  do Get-Run-ID

  move ' ' to $SelectedDates
  if RTRIM($RC_PAY.FROMDATE, ' ') <> ''
     do Get-From-Thru-Date
  end-if
  do Init-DateTime
  do Get-Current-DateTime
  do Format-DateTime($AsOfToday, $out, {DEFMDY},'','')
  move $out to $ReportDate
  display 'Report Began: ' noline
  display $AsOfNow
  display ''

  do Format-DateTime($Fromdate, $FmDate, {DEFMDY},'','')
  do Format-DateTime($ThruDate, $TuDate, {DEFMDY},'','')

  do Check-Balance-Yr-Selection
  do Check-Processing
  do  Pull-Selection-Criteria
  do Open-File

  if $Reg_Select_Proc = 'H'
     do Get-EVS-Print-Hire
  else
     do Get-EVS-Print
  end-if

  do Get-Current-DateTime
  display ''
  display 'Report Ended: ' noline
  display $AsOfNow
  do Stdapi-Term
end-report

begin-heading 8

#include 'stdhdg01.sqc'

  do Format-DateTime($Fromdate, $FmDate, {DEFMDY},'','')
  do Format-DateTime($ThruDate, $TuDate, {DEFMDY},'','')

  if $Reg_Select_Proc = 'H'
    print 'Hire Date from ' (+1,1)
    print $FmDate ()
    print '  to  '  ()
    print $TuDate ()
  end-if


  print 'Social'                                                      (+2,1)
  print 'Date'                                                         (0,113)
  print 'Sec Nbr    Empl ID       Last Name'                          (+1,1)
  print 'First Name                       Middle Name/Initial'         (0,59)
  print 'of Birth  Gender'                                             (0,113)
  print '---------  ------------  --------------------------------'   (+1,1)
  print '-------------------------------- --------------------'        (0,59)
  print '--------- ------'                                             (0,113)

end-heading

begin-procedure Get-Run-ID
  move ' ' to $FromDate
  move ' ' to $ThruDate
  if $Prcs_Process_Instance = ''
     do Prompt
  else

    do Select-Parameters
  end-if
end-procedure


Begin-Procedure Prompt

while 1 = 1
    input $RunID maxlen=3 'Enter Valid Run ID' type=char

    if RTRIM($RunID, ' ') = ''
      display 'Exiting....'
      Stop
    end-if

    do edit-Run

    if $Break_YN = 'Y'
      Break
    End-If
End-While

End-Procedure


begin-procedure Edit-Run

  move 0 to #Found


begin-select

Z.FROMDATE
Z.THRUDATE


  add 1 to #Found

FROM PS_RC_PAY Z
where Z.RUN_CNTL_ID = $RunID
end-select

  if #Found = 0
    display 'Error --  Not a Valid Run ID.'
    move 'N' to $Break_YN
  else

    if #Found = 1
    move 'Y' to $Break_YN

         Let $RC_PAY.FROMDATE = &Z.FROMDATE
         Let $RC_PAY.THRUDATE = &Z.THRUDATE

    end-if

  end-if



end-procedure


begin-procedure Check-Balance-Yr-Selection

  let $BalYrSel       = ' '  
  let $BalYrParms     = ' '
  let $BalYrParms2    = ' '

  let $SelectedBalYr  = ' '
  let $SelectedBalYr2 = ' '

begin-select

BYR.BAL_YEAR_SEL
  move &BYR.BAL_YEAR_SEL to $BalYrSel

FROM PS_RC_TAX109_YR BYR
     WHERE BYR.OPRID       = $Prcs_OprID
       AND BYR.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-select

  if $BalYrSel = 'Y'
     do Get-Tax-Reporting-Run-Controls
     move &TX.Balance_ID   to $BalID
     move &TX.Balance_Year to $BalYear
     let $BalYrParms     = 'AND EXISTS (SELECT ''X'' FROM PS_TAX_BALANCE TB ' ||
                           'WHERE TB.BALANCE_ID = ''' || $BalID || ''' ' ||
                           'AND TB.BALANCE_YEAR = ' || $BalYear
     let $SelectedBalYr  = $BalYrParms || ' AND TB.EMPLID = PERS.EMPLID)'
     let $BalYrParms2    = 'AND EXISTS (SELECT ''X'' FROM PS_TAX_BALANCE TB2 ' ||
                           'WHERE TB2.BALANCE_ID = ''' || $BalID || ''' ' ||
                           'AND TB2.BALANCE_YEAR = ' || $BalYear
     let $SelectedBalYr2 = $BalYrParms2 || ' AND TB2.EMPLID = PERS2.EMPLID)'  
  end-if
     
end-procedure


begin-procedure Pull-Selection-Criteria

if $Reg_Select_Proc = 'M'

  move 0 to #CompanyFound

  move 'AND J.COMPANY IN (''' to $SelectedCos
  move ' ' to $SelectedCompany

begin-select
A.COMPANY
    if rtrim(&A.COMPANY, ' ') > ''
      add 1 to #CompanyFound
      move &A.COMPANY     to $SelectedCompany
      let $SelectedCos = $SelectedCos || $SelectedCompany || ''','''
    end-if

FROM PS_RC_TAX109_CO A
     WHERE A.OPRID       = $Prcs_OprID
       AND A.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-select
  if #CompanyFound > 0
    let $SelectedCos = SUBSTR($SelectedCos,1,LENGTH($SelectedCos) - 2)
    let $SelectedCos = $SelectedCos || ')'
  else
    move ' ' to $SelectedCos
  end-if

end-if


if $Reg_Select_Proc = 'P'

  move 0 to #CompanyFound

  move 'AND J.COMPANY IN (''' to $SelectedCos
  move ' ' to $SelectedCompany

  move 0 to #PayGrpFound

  move 'AND J.PAYGROUP IN (''' to $SelectedPGs
  move ' ' to $SelectedPayGroup

begin-select
B.COMPANY
B.PAYGROUP
    if rtrim(&B.PAYGROUP, ' ') > ''
       add 1 to #PayGrpFound
       move &B.PAYGROUP     to $SelectedPayGrp
       let $SelectedPGs = $SelectedPGs || $SelectedPayGrp || ''','''
    end-if
    if rtrim(&B.COMPANY, ' ') > ''
      add 1 to #CompanyFound
      move &B.COMPANY     to $SelectedCompany
      let $SelectedCos = $SelectedCos || $SelectedCompany || ''','''
    end-if

FROM PS_RC_TAX109_PG B
     WHERE B.OPRID       = $Prcs_OprID
       AND B.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-select

  if #CompanyFound > 0
    let $SelectedCos = SUBSTR($SelectedCos,1,LENGTH($SelectedCos) - 2)
    let $SelectedCos = $SelectedCos || ')'
  else
    move ' ' to $SelectedCos
  end-if

  if #PayGrpFound > 0
    let $SelectedPGs = SUBSTR($SelectedPGs,1,LENGTH($SelectedPGs) - 2)
    let $SelectedPGs = $SelectedPGs || ')'
  else
    move ' ' to $SelectedPGs
  end-if

  if #CompanyFound = 0 and #PayGrpFound = 0
    move ' ' to $SelectedCos
  end-if

end-if

end-procedure

begin-procedure Get-EVS-Print
  display 'Generating report . . . '

begin-SELECT DISTINCT
NID.NATIONAL_ID
PERS.EMPLID
PERS.LAST_NAME
PERS.FIRST_NAME
PERS.MIDDLE_NAME
PERSDATA.SEX
PERSON.BIRTHDATE

  let $name = &PERS.MIDDLE_NAME
  do Edit-Name
  let $MiddleName = $Name
  let $MiddleName_p = &PERS.MIDDLE_NAME

  let $name = &PERS.FIRST_NAME
  do Edit-Name
  let $FirstName = $Name
  let $FirstName_p = &PERS.FIRST_NAME

  let $name = &PERS.LAST_NAME
  do Edit-Name
  let $LastName = $Name
  let $LastName_p = &PERS.LAST_NAME
  let $SSN = &NID.NATIONAL_ID
  let $DOB = &PERSON.BIRTHDATE
  let $Gender = rtrim(&PERSDATA.SEX, ' ')
  let $EMPLID = rtrim(&PERS.EMPLID, ' ')

  do Print-EVS-Print

FROM PS_PERS_NID NID, PS_PERSON PERSON, PS_PERSON_NAME PERS,  PS_PERS_DATA_MAX PERSDATA,
     PS_EMPLOYMENT EMPLOY, PS_JOB J
WHERE NID.EMPLID = PERS.EMPLID
  AND NID.EMPLID = PERSON.EMPLID
  AND NID.EMPLID = PERSDATA.EMPLID
  AND NID.EMPLID = EMPLOY.EMPLID
  AND NID.EMPLID = J.EMPLID
  AND J.EMPL_RCD = EMPLOY.EMPL_RCD
  AND EMPLOY.PER_ORG = 'EMP'
  AND NID.COUNTRY = 'USA'
  AND EMPLOY.HIRE_DT =
     (SELECT MAX(HIRE_DT)
        FROM PS_EMPLOYMENT EMPLOYA
        WHERE EMPLOY.EMPLID = EMPLOYA.EMPLID
        AND EMPLOY.EMPL_RCD = EMPLOYA.EMPL_RCD)
  AND J.EFFDT =
     (SELECT MAX (EFFDT)
          FROM PS_JOB JA
          WHERE  J.EMPLID    = JA.EMPLID
            AND  J.EMPL_RCD  = JA.EMPL_RCD)
  AND  J.EFFSEQ =
     (SELECT MAX(EFFSEQ)
          FROM    PS_JOB
          WHERE   J.EMPLID     = EMPLID
            AND   J.EMPL_RCD    = EMPL_RCD
            AND   J.EFFDT        = EFFDT)
#ifdef MVS
  \$SelectedEEs\
  \$SelectedCos\
  \$SelectedPGs\
  \$SelectedBalYr\
#else
  [$SelectedEEs]
  [$SelectedCos]
  [$SelectedPGs]
  [$SelectedBalYr]
#end-if
  ORDER BY NID.NATIONAL_ID

end-SELECT

  display 'Done'
  do Cleanup-RunCntl
end-procedure

begin-procedure Get-EVS-Print-Hire
  display 'Generating report . . . '

begin-SELECT DISTINCT
NID2.NATIONAL_ID
PERS2.EMPLID
PERS2.LAST_NAME
PERS2.FIRST_NAME
PERS2.MIDDLE_NAME
PERSDATA2.SEX
PERSON2.BIRTHDATE

  let $name = &PERS2.MIDDLE_NAME
  do Edit-Name
  let $MiddleName = $Name
  let $MiddleName_p = &PERS2.MIDDLE_NAME

  let $name = &PERS2.FIRST_NAME
  do Edit-Name
  let $FirstName = $Name
  let $FirstName_p = &PERS2.FIRST_NAME

  let $name = &PERS2.LAST_NAME
  do Edit-Name
  let $LastName = $Name
  let $LastName_p = &PERS2.LAST_NAME

  let $SSN = &NID2.NATIONAL_ID
  let $DOB = &PERSON2.BIRTHDATE
  let $Gender = rtrim(&PERSDATA2.SEX, ' ')
  let $EMPLID = rtrim(&PERS2.EMPLID, ' ')

  do Print-EVS-Print

FROM PS_PERS_NID NID2, PS_PERSON PERSON2, PS_PERSON_NAME PERS2,  PS_PERS_DATA_MAX PERSDATA2,
     PS_EMPLOYMENT EMPLOY2, PS_JOB J2, PS_JOB_CURR_EFF_VW JOBVW
WHERE NID2.EMPLID = PERS2.EMPLID
  AND NID2.EMPLID = PERSON2.EMPLID
  AND NID2.EMPLID = PERSDATA2.EMPLID
  AND NID2.EMPLID = EMPLOY2.EMPLID
  AND NID2.EMPLID = J2.EMPLID
  AND J2.EMPL_RCD = EMPLOY2.EMPL_RCD
  AND JOBVW.EMPLID = J2.EMPLID
  AND JOBVW.EMPL_RCD = J2.EMPL_RCD
  AND EMPLOY2.PER_ORG = 'EMP'
  AND NID2.COUNTRY = 'USA'
  AND EMPLOY2.HIRE_DT =
     (SELECT MAX(EMPLOY3.HIRE_DT)
        FROM PS_EMPLOYMENT EMPLOY3
        WHERE EMPLOY2.EMPLID = EMPLOY3.EMPLID
        AND EMPLOY2.EMPL_RCD = EMPLOY3.EMPL_RCD)
  AND J2.EFFDT =
     (SELECT MAX (J3.EFFDT)
          FROM PS_JOB J3
          WHERE  J2.EMPLID    = J3.EMPLID
            AND  J2.EMPL_RCD  = J3.EMPL_RCD)
  AND  J2.EFFSEQ =
     (SELECT MAX(J4.EFFSEQ)
          FROM    PS_JOB J4
          WHERE   J2.EMPLID     = J4.EMPLID
            AND   J2.EMPL_RCD    = J4.EMPL_RCD
            AND   J2.EFFDT        = J4.EFFDT)
  AND JOBVW.LAST_HIRE_DT BETWEEN $FromDate AND $ThruDate
#ifdef MVS
  \$SelectedBalYr2\
#else
  [$SelectedBalYr2]
#end-if
  ORDER BY NID2.NATIONAL_ID

end-SELECT

  display 'Done'
  do Cleanup-RunCntl
end-procedure

Begin-Procedure Print-EVS-Print

  do Format-DateTime($DOB, $DOB, {DEFCMP},'','')
  let $DOB1 = SUBSTR($DOB,5,2) || SUBSTR($DOB,7,2) || SUBSTR($DOB,1,4)

  let  $LastName_p   = SUBSTR($LastName_p,1,32)
  let  $FirstName_p  = SUBSTR($FirstName_p,1,32)
  let  $MiddleName_p = SUBSTR($MiddleName_p,1,20)

  print $SSN                   (+1,1)
  print $EMPLID                 (0,12)
  print $LastName_p             (0,26)
  print $FirstName_p            (0,59)
  print $MiddleName_p           (0,92)
  print $DOB1                   (0,113)
  print $Gender                 (0,124)

  ! If gender = 'U'(unknown) we still print in the report, but output blank to the file
  if $Gender = 'U'
     let $Gender =  ' '
  end-if

  if $SSN = ' '
     let $NoSSNMsg = 'Employee '||$EMPLID ||' does not have a social security number.'
     display $NoSSNMsg
  else
     let $Mult_Rqst_ID = '000'
     let $Requester-ID-CD = 'OEVS'

     write 10 from  $SSN:9      ! 1 - 9
                   'TPV':3      ! 10-12
                   '214':3      ! 13-15
               $LastName:13     ! 16 - 28
              $FirstName:10     ! 29 - 38
             $MiddleName:7      ! 39 - 45
                   $DOB1:8      ! 46 - 53
                 $Gender:1      ! 54 - 54
                     $Sp:35     ! 55 - 89
                 $EMPLID:14     ! 90 - 103
                     $Sp:20     ! 104 - 123
        $Requester-ID-CD:4      ! 124 - 127
           $Mult_Rqst_ID:3      ! 128 - 130
   end-if

End-Procedure

begin-procedure Open-File

  let $FileID = '{IMPORTPREFIX}' || $ReportID || '{IMPORTSUFFIX}'
  open $FileID as 10 for-writing record=130:fixed

end-procedure

Begin-Procedure Check-Processing

begin-SELECT

RC_EVS.REG_SELECT_PROC

FROM  PS_RC_TAX109_EVS RC_EVS
WHERE RC_EVS.OPRID         = $Prcs_OprID
  AND RC_EVS.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

  let $Reg_Select_Proc     = RTRIM(&RC_EVS.REG_SELECT_PROC, ' ')

  if $Reg_Select_Proc = 'E'                                     !Load W-4 data for selected employees
    do Get-Selected-EEs
  end-if


End-Procedure

Begin-Procedure Get-Selected-EEs

move 'AND NID.EMPLID in (''' to $SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
X.SELECTED_EE

  move &X.Selected_EE     to $SelectedEmplID

  let $SelectedEEs = $SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX109_EE X
WHERE X.OPRID         = $Prcs_OprID
  AND X.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

let $SelectedEEs = SUBSTR($SelectedEEs,1,LENGTH($SelectedEEs) - 2)
let $SelectedEEs = $SelectedEEs || ')'

End-Procedure

Begin-Procedure Cleanup-RunCntl

begin-SQL
  UPDATE PS_RC_TAX109_EVS
  SET
   REG_SELECT_PROC = 'H'
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL

  do Delete-Sel-Hire-Dates
  do Delete-Sel-Employees-Table
  do Delete-Sel-Company-Table
  do Delete-Sel-PayGroup-Table
  do Delete-Sel-Balance-Year
end-procedure

Begin-Procedure Delete-Sel-Hire-Dates

begin-SQL
  UPDATE PS_RC_PAY
  SET
    FROMDATE = NULL
    ,THRUDATE = NULL
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL
End-Procedure

Begin-Procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX109_EE
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
End-Procedure

Begin-Procedure Delete-Sel-Company-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX109_CO
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
End-Procedure

Begin-Procedure Delete-Sel-PayGroup-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX109_PG
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
End-Procedure

Begin-Procedure Delete-Sel-Balance-Year
begin-SQL
  UPDATE PS_RC_TAX109_YR
  SET
    BAL_YEAR_SEL = 'N'
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL
End-Procedure

Begin-Procedure Edit-Name

    let $Name = rtrim($Name, ' ')

    while INSTR($Name,'-',1)
      let #locnhyphen = INSTR($Name,'-',1)
      let $Name = SUBSTR($Name,1,#locnhyphen - 1)   ||
                   SUBSTR($Name,#locnhyphen + 1,30)
    end-while

    while INSTR($Name,' ',1)
      let #locnblank = INSTR($Name,' ',1)
      let $Name = SUBSTR($Name,1,#locnblank - 1)   ||
                      SUBSTR($Name,#locnblank + 1,30)
    end-while

    while INSTR($Name,'.',1)
      let #locnper = INSTR($Name,'.',1)
      let $Name = SUBSTR($Name,1,#locnper - 1)   ||
                      SUBSTR($Name,#locnper + 1,30)
    end-while

    while INSTR($Name,'''',1)
      let #locnhapost = INSTR($Name,'''',1)
      let $Name = SUBSTR($Name,1,#locnhapost - 1)   ||
                      SUBSTR($Name,#locnhapost + 1,30)
    end-while

End-Procedure
begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure


#include 'getdatcd.sqc'  !Get Year from As of date
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'stdapi.sqc'    !Update Process API
#include 'payrctl2.sqc'  !Select Run Control Parameters
#include 'pygetval.sqc'  !To Get as Of date
#include 'number.sqc'    !Format numbers
#include 'getfrmat.sqc'  !Calculate MaxRecSize for diskettes
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
