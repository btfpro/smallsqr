!***********************************************************************
!  TAX810RI:  Qtrly Wage List - Tape - RHODE ISLAND                    *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2007 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/01/17:11:33:25                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  654914                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

! The following are variables for the state format output
  let $OUT_QTD_WAGE_TTL        = ' '
  let $OUT_MAG_CONSTANT        = 'MAGTAPWGR'
  let $OUT_RI_EMPLOYER_ID      = ' '
  let $OUT_RPT_YR              = ' '
  let $OUT_RPT_QTR             = ' '
  let $OUT_RI_EMPLOYER_NAME    = ' '
  let $OUT_SSN                 = '000000000'
  let $OUT_EE_LAST_NAME        = ' '
  let $OUT_EE_INITIAL          = ' '
  let $OUT_EE_QTR_WAGE         = ' '
   
  do Report-File-Create

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file'
  if $FileType = 'D'
    display '  TAX810RI.nnn  where "nnn" represents a volume number '
    display '              has been created.'
  else
    display '{IMPORTPREFIX}TAX810RI{IMPORTSUFFIX} has been created.'
  end-if
    display 'The file contains 275-char records in the format required'
    display 'for tape or diskette reporting of quarterly wages to the '
    display 'Rhode Island Department of Employment and Training (RIDET).'
    display ''
    display 'Follow directions provided in the RIDET ''Employer''s'
    display 'Guide to Magnetic Tape Reporting'' for submission of tapes.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810RI' to $ReportID
  if $FileType = 'D'
    move 'Rhode Island Quarterly UI Wage Report - Diskette' to $ReportTitle
    display ''
    display 'Creating Diskette File for Rhode Island UI Wage Reporting'
  else
  move 'Rhode Island Quarterly UI Wage Report - Tape' to $ReportTitle
  display ''
  display 'Creating Tape File for Rhode Island UI Wage Reporting'
end-if
end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'RI'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
end-procedure

begin-procedure Open-File

if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810RI' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810RI.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=275:fixed
else
  open '{IMPORTPREFIX}TAX810RI{IMPORTSUFFIX}' as 10 for-writing record=275:fixed
end-if
end-procedure

begin-procedure Report-File-Create
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN

  move &A.Company to $Company

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.NAME
D.LAST_NAME
D.FIRST_NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'RI'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if
  !move &D.Name         to $Name
  !do Rotate-Name
  !uppercase $Name

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD

  let #max_amt_NLG = 999999999
  let #NLGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  let $done1 = 'N'

  while $done1 <> 'Y'
    do split-s-record (#NLGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999999')
    do Write-W-record
    add 1 to #Count_R
  end-while

end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company'
    display $Company
    stop
  end-if
  move &Employer_ID_SUT to $StateEIN
  
  do Get-State-Wage-TTL

  do Write-T-Record
end-procedure

begin-procedure After-Company
  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Count_S to #Count_F
    add #Count_R to #Count_R_Total

    move 0 to #Co_NlGrs_QTD
    move 0 to #Count_S
    move 0 to #Count_R
    new-page
  end-if
end-procedure



!*****************************************
!***  Get Company Quartery Wage Total  ***
!*****************************************
begin-procedure Get-State-Wage-TTL

let $OUT_QTD_WAGE_TTL        = '000000000000'

begin-SELECT
SUM(WC.NLGRS_QTD)   &WC.NLGRS_QTD

  let #ER_NLGRS_QTD = &WC.NLGRS_QTD * 100
  do Format-Number(#ER_NLGRS_QTD, $OUT_QTD_WAGE_TTL, '099999999999')
  
FROM  PS_TAX_BALANCE WC
WHERE WC.COMPANY       = &A.Company
  AND WC.TAX_CLASS     = 'U'
  AND WC.BALANCE_ID    = $Calendar_Year_Id
  AND WC.BALANCE_YEAR  = &TX.Balance_Year
  AND WC.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND WC.STATE         = 'CA'
#else
  AND WC.STATE         = 'RI'
#endif
  AND WC.LOCALITY      = ' '
  AND WC.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = WC.EMPLID
         AND  COMPANY       = WC.COMPANY
         AND  BALANCE_ID    = WC.BALANCE_ID
         AND  BALANCE_YEAR  = WC.BALANCE_YEAR
         AND  BALANCE_QTR   = WC.BALANCE_QTR
         AND  STATE         = WC.STATE
         AND  LOCALITY      = WC.LOCALITY
         AND  TAX_CLASS     = WC.TAX_CLASS)
  AND WC.NLGRS_QTD > 0
end-SELECT

end-procedure




begin-procedure Write-T-Record
  move &A.Federal_EIN  to $FedEIN 099999999
  move &A.Descr        to $ErName

  uppercase $ErName

  if $FileType = 'D'
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  end-if

  let $OUT_RI_EMPLOYER_ID   = $StateEIN
  let $Temp_Rpt_Year        = &TX.Balance_Year
  let $OUT_RPT_YR           = substr($Temp_Rpt_Year,3,2)
  let $OUT_RPT_QTR          = &TX.BALANCE_QTR
  let $OUT_RI_EMPLOYER_NAME = $ErName
  
  write 10 from 'T':1
      $OUT_QTD_WAGE_TTL:12
      $OUT_QTD_WAGE_TTL:12
      $OUT_MAG_CONSTANT:9
      $Sp:9
      $OUT_RI_EMPLOYER_ID:10
      $Sp:22
      $OUT_RPT_YR:2
      $OUT_RPT_QTR:1
      $OUT_RI_EMPLOYER_NAME:11
      $Sp:186
      
  move 'Y' to $RecordWritten
  add 1 to #RecordCount
end-procedure

begin-procedure Write-W-Record

  if $FileType = 'D'
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  end-if
  
  let $OUT_EE_LAST_NAME = SUBSTR(&D.LAST_NAME,1,9)
  let $OUT_EE_INITIAL   = SUBSTR(&D.FIRST_NAME,1,1)
  let $OUT_EE_SSN       = $NATIONAL_ID
  
  UPPERCASE $OUT_EE_LAST_NAME
  UPPERCASE $OUT_EE_INITIAL
    
  write 10 from 'W':1
      $Sp:24
      $OUT_MAG_CONSTANT:9
      $OUT_EE_SSN:9
      $OUT_RI_EMPLOYER_ID:10
      $OUT_EE_LAST_NAME:9
      $OUT_EE_INITIAL:1
      $NlGrs_QTD:12
      $OUT_RPT_YR:2
      $OUT_RPT_QTR:1
      $OUT_RI_EMPLOYER_NAME:11
      $Sp:136
        
  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  add 1 to #RecordCount
end-procedure

begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
! #Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'txovrflw.sqc'  !Split-S-Record
