!***********************************************************************
! BENCRTBL: PeopleSoft Benefits
!           Carrier Interface Functions
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!----------------------------------------------------------------------*
!                                                                      *
!          $Date:  2007/08/08:04:39:27                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
!
! This SQC contains a collection of functions that are useful
! when developing a custom carrier interface extract, or a
! premium report.
!
! All Date variables are in Native format, unless the variable name
! contains a suffix indicating the format (e.g. $Effdt_YMD).
!***********************************************************************
!
! Modification History:
!       Initial Development: 10/31/2000   PeopleSoft, Inc.
!
!***********************************************************************

!------------------------------------
 Begin-Procedure Load-Reporting-Cache
!------------------------------------
! This procedure should be called prior to calling any other
! procedures in this module for Carrier Interface.

 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-Reporting-Cache'
 #endif
 Do Load-CvgCdTbl
 Do Load-CompanyTbl
 Do Load-PlanNameTbl
 Do Load-VendorPolicyTbl
 Do Load-RelationshipTbl
 Do Load-Run-History

End-Procedure

!-------------------------------
 Begin-Procedure Load-Rate-Cache($SetId, $VendorId, $PlanType, $AsOfDate)
!-------------------------------
! This procedure should be called prior to calling any other
! procedures in this module for Rate Calculation.
! The cache arrays are defined in "bencrtbl.sqc", which should
! be included in the Setup section of the calling SQR.
!
! Input: Set Id    - May not be blank, since the same vendor may appear
!                    under different Set Ids, causing duplication.
!        Vendor Id - May not be blank.
!        Plan Type - May be blank, indicating all plan types for the
!                    Vendor(s) are to be included.
!
! Output: <none>
!
 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-Rate-Cache'
 #endif
 Do Load-Calc-Rules($SetId, $VendorId, $PlanType, $AsOfDate)

End-Procedure

!----------------------------------
 Begin-Procedure Get-Covrg-Cd-Descr($CovrgCd, :$Descr, :$DescrShort)
!----------------------------------
!
! Input:   Coverage Code
!
! Output:  Coverage Code Description (Descr)
!          Coverage Code Short Description (Descrshort)
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Covrg-Cd-Descr'
 #endif

 Let $Descr = ' '
 Let $DescrShort = ' '
 Let $CovrgCd = Rtrim($CovrgCd,' ')
 Let #i = 0

 If $CovrgCd <> ''
    While #i < #_CovrgCdEntries
       Get $TmpCovrgCd from CovrgCdTbl(#i) CovrgCd
       If Rtrim($TmpCovrgCd, ' ') = $CovrgCd
          Get $Descr from CovrgCdTbl(#i) Descr
          Get $DescrShort from CovrgCdTbl(#i) DescrShort
          Break
       End-If
       Add 1 to #i
    End-While
 End-If
End-Procedure

!----------------------------------
 Begin-Procedure Get-Company-Name($Company, :$Descr, :$DescrShort)
!----------------------------------
!
! Input:   Company
!
! Output:  Company Description (Descr)
!          Company SHort Description (Descshort)
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Company-Name'
 #endif

 Let $Descr = ' '
 Let $DescrShort = ' '
 Let $Company = Rtrim($Company,' ')
 Let #i = 0

 If $Company <> ''
    While #i < #_CompanyEntries
       Get $TmpCompany from CompanyTbl(#i) Company
       If Rtrim($TmpCompany, ' ') = $Company
          Get $Descr from CompanyTbl(#i) Descr
          Get $DescrShort from CompanyTbl(#i) DescrShort
          Break
       End-If
       Add 1 to #i
    End-While
 End-If
End-Procedure

!-----------------------------
 Begin-Procedure Get-Plan-Name($PlanType, $BenefitPlan, :$Descr, :$DescrShort)
!-----------------------------
!
! Input:   Plan Type
!          Benefit Plan
!
! Output:  Benefit Plan Description (Descr)
!          Benefit Plan Short Description (Descrshort)
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Plan-Name'
 #endif

 Let $Descr = ' '
 Let $DescrShort = ' '
 Let $PlanType = Rtrim($PlanType,' ')
 Let $BenefitPlan = Rtrim($BenefitPlan,' ')
 Let #i = 0

 If $BenefitPlan <> ''
    While #i < #_PlanNameEntries
       Get $TmpPlanType from PlanNameTbl(#i) PlanType
       If Rtrim($TmpPlanType, ' ') = $PlanType
          Get $TmpBenefitPlan from PlanNameTbl(#i) BenefitPlan
          If Rtrim($TmpBenefitPlan,' ') = $BenefitPlan
             Get $Descr from PlanNameTbl(#i) Descr
             Get $DescrShort from PlanNameTbl(#i) DescrShort
             Break
          End-If
       End-If
       Add 1 to #i
    End-While
 End-If

End-Procedure

!-------------------------------------
Begin-Procedure Get-Relationship-Descr($Relationship, :$RelationDescr, :$RelationDescrShort)
!-------------------------------------
!
! Input:   Relationship Code
!
! Output:  Relationship Description (Descr)
!          Relationship Short Description (Descrshort)
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Relationship-Descr'
 #endif

 Let $RelationDescr = ' '
 Let $RelationDescrShort = ' '
 Let $Relationship = Rtrim($Relationship,' ')
 Let #i = 0

 If $Relationship <> ''
    While #i < #_RelationEntries
       Get $TmpRelation from RelationTbl(#i) Relationship
       If Rtrim($TmpRelation, ' ') = $Relationship
          Get $RelationDescr from RelationTbl(#i) Descr
          Get $RelationDescrShort from RelationTbl(#i) DescrShort
          Break
       End-If
       Add 1 to #i
    End-While
 End-If
End-Procedure


!---------------------------------
 Begin-Procedure Get-Vendor-Policy($SetId, $VendorId, $GroupNbr, :$PolicyNbr)
!---------------------------------
!
! Input:   Set Id
!          Vendor Id
!          Group Number
!
! Output:  Vendor Policy
!
! All entries in the cache are for the same SetId / Vendor_Id.
! Sequenced by Group_Nbr.
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Vendor-Policy'
 #endif

 Let $PolicyNbr = ' '
 Let #i = 0

 While #i < #_VendorPolicyEntries
    Get $TmpGroupNbr from VendorPolicyTbl(#i) GroupNbr
    If $TmpGroupNbr = $GroupNbr
       Get $PolicyNbr from VendorPolicyTbl(#i) PolicyNbr
       Break
    Else
       If $TmpGroupNbr > $GroupNbr
          ! Group_Nbr is not in the cache.
          Break
       End-If
    End-If
    Add 1 to #i
 End-While
End-Procedure

!----------------------------------
 Begin-Procedure Convert-YMD-to-RPT($date_YMD, :$date_RPT)
!----------------------------------
!
! Converts a date in YYYYMMDD format to YYYY-MM-DD format.
!
 #ifdef debugT
    DISPLAY 'BENCRFNC: Convert-YMD-to-RPT'
 #endif

 Let $date_RPT = Substr($date_YMD,1,4) || '-'
 Let $date_RPT = $date_RPT || Substr($date_YMD,5,2) || '-'
 Let $date_RPT = $date_RPT || Substr($date_YMD,7,2)
End-Procedure

!---------------------------------------
 Begin-Procedure Get-Last-Interface-Date($SetId, $VendorId, $PlanType, :$LastAsOfDate_YMD)
!---------------------------------------
!
! Input:   Set Id
!          Vendor Id
!          Plan Type  - This is the Plan Type from the run control. This may be
!                       blank, indicating that we're processing all plan types
!                       for this vendor.
!
! Output:  Last As Of Date in (YYYYMMDD format)
!
! Returns last "As Of" extract date for this Vendor / Plan Type in YYYYMMDD date format.
! Cache is loaded in Descending Run Date sequence for this Vendor_Id.
! All cache entries are for the same SetId and Vendor_Id.
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Last-Interface-Date'
 #endif

 Let $Out_YMD = ''
 Let #i = 0
 While #i < #_RunHistEntries
    Get $TmpPlanType from RunHistTbl(#i) PlanType
    If $TmpPlanType = $PlanType
          Or $TmpPlanType = ''
          Or Substr($TmpPlanType,1,1) = ' '
       Get $LastAsOfDate_YMD from RunHistTbl(#i) AsOfDate_YMD
       Break
    End-If
    Add 1 to #i
 End-While
End-Procedure

!--------------------------------------
 Begin-Procedure Get-Snapshot-Run-Dates(:$ThisSnapRunDate_YMD, :$PrevSnapRunDate_YMD)
!--------------------------------------
!
! Input:   <none>
!
! Output:  The run date of the current Snapshot in the BN_SNAP tables (in YYYYMMDD format)
!          The run date of the Snapshot previous to the current Snapshot (in YYYYMMDD format)
!
! Returns the "current" and "previous" Snapshot Run dates in YYYYMMDD date format.
! If there is no history of a Snapshot prior to the current Snapshot, we set the
! Previous snap date to the Current snap date.
! This is generally called only once - at the beginning of the extract program.
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Snapshot-Run-Dates'
 #endif

  Move ''  to  $ThisSnapRunDate_YMD
  Move ''  to  $PrevSnapRunDate_YMD

  Let #Counter = 0

BEGIN-SELECT
LS.RUNDATE

     Add 1  to  #Counter
     Do Format-DateTime(&LS.RUNDATE, $WorkDate_YMD, {DEFCMP}, '', '')
     If #Counter = 1
        Move &LS.RUNDATE  to  $SaveRunDate
        Move $WorkDate_YMD  to  $ThisSnapRunDate_YMD
     Else
        If &LS.RUNDATE <> $SaveRunDate
           Move $WorkDate_YMD  to  $PrevSnapRunDate_YMD
           EXIT-SELECT
        End-If
     End-If

FROM PS_BN_SNAP_HIST LS
WHERE BN_SNAP_HIST_TYPE = '1'
ORDER BY LS.RUNDATE DESC
END-SELECT

 If $PrevSnapDate_YMD = ''
    Move $ThisSnapRunDate_YMD  to  $PrevSnapRunDate_YMD
 End-If

End-Procedure

!--------------------------------------
Begin-Procedure Get-Snapshot-As-Of-Date(:$AsOfDate)
!--------------------------------------
!
! Input:   <none>
!
! Output:  As of Date for the current Snapshot in the BN_SNAP tables (in YYYYMMDD format)
!
! Note that the AsOfDate in all rows of all three BN_SNAP_xxx tables
! is the same, representing the AsOfDate used on the last run that
! created the BN_SNAP_xxx tables.
! We only need to select one row from any of these tables.
! This is generally called only once - at the beginning of the extract program.

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Snapshot-As-Of-Date'
 #endif

BEGIN-SELECT
RD.EFFDT
          Move &RD.EFFDT to $AsOfDate
          EXIT-SELECT
FROM PS_BN_SNAP_PER RD
END-SELECT
End-Procedure


!----------------------------------
 Begin-Procedure Update-Run-History($AsOfDate,$BNSnapHistType,$SetId,$VendorId,$PlanType,$FileName,#WriteCount)
!----------------------------------
!
! Input:   As Of Date (native format)
!          Snapshot History Type
!          Set Id
!          Vendor Id
!          Plan Type
!          File Name
!          Number of records written to output file
!
! Output:  <none>
!
! Creates a row in the Snapshot Run History table (BN_SNAP_HIST)
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Update-Run-History'
 #endif

! Refresh the current Date/Time
 Do Get-Current-DateTime
 Move $_AsOfToday    to  $RunDate
 Move $_SysDateTime  to  $RunDateTime
 Move $_username     to  $Oprid

 Let $PlanTypeHist = Rtrim($PlanType,' ')
 If $PlanTypeHist = ''
    Let $PlanTypeHist = ' '
 End-If

! The following SQL can be used to eliminate multiple history
! entries on the same day.
! BEGIN-SQL
! DELETE FROM PS_BN_SNAP_HIST
! WHERE ASOFDATE = $AsOfDate
!   AND RUNDATE = $RunDate
!   AND BN_SNAP_HIST_TYPE = $BNSnapHistType
!   AND SETID = $SetId
!   AND VENDOR_ID = $VendorId
!   AND PLAN_TYPE = $PlanTypeHist
! END-SQL


BEGIN-SQL
INSERT INTO PS_BN_SNAP_HIST
(ASOFDATE
,RUNDATE
,RUNDTTM
,BN_SNAP_HIST_TYPE
,SETID
,BN_EDI_PARTNER_ID
,VENDOR_ID
,PLAN_TYPE
,OPRID
,FILENAME
,RECORD_COUNT
,SCHED_ID)
VALUES
($AsOfDate
,$RunDate
,{DateTimeIn-Prefix}$RunDateTime{DateTimeIn-Suffix}
,$BNSnapHistType
,$SetId
,' '
,$VendorId
,$PlanTypeHist
,$Oprid
,$FileName
,#WriteCount
,' ')
END-SQL

End-Procedure

!-----------------------------
 Begin-Procedure Get-Calc-Rule($CalcRulesId, :#Pointer)
!-----------------------------
!
! Input:   Calc Rules Id
!
! Output:  A pointer (index) to the requested Calc Rule in the cache table
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Get-Calc-Rule - ' noline
    DISPLAY $CalcRulesId
 #endif

 Let #i = 0
 Let #Pointer = 0

 While #i < #_CalcRuleEntries
    Get $TmpCalcRulesId from CalcRule(#i) CalcRulesId
    If $TmpCalcRulesId = $CalcRulesId
       Let #Pointer = #i
    Else
       If $TmpCalcRulesId > $CalcRulesId
          ! Not in the cache.
          Break
       End-If
    End-If
    Add 1 to #i
 End-While
End-Procedure


! ===================================
! Procedures to Load Cache Structures
! ===================================

!-----------------------------
 Begin-Procedure Load-CvgCdTbl
!-----------------------------


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-CvgCdTbl'
 #endif

 Let #CovrgCdEntries = 0
BEGIN-SELECT
CCT.COVRG_CD
CCT.DESCR
CCT.DESCRSHORT

          If #CovrgCdEntries < {CovrgCdMax}
             Put &CCT.COVRG_CD into CovrgCdTbl(#CovrgCdEntries) CovrgCd
             Put &CCT.DESCR into CovrgCdTbl(#CovrgCdEntries) Descr
             Put &CCT.DESCRSHORT into CovrgCdTbl(#CovrgCdEntries) DescrShort
             Add 1 to #CovrgCdEntries
          Else
             Move 'Coverage Code Descriptions' to $ErrorTable
             Move {CovrgCdMax} to #MaxEntries
             Do Report-Table-Load-Error
             STOP
          End-If

 FROM PS_COVRG_CD_TBL CCT
WHERE EFFDT = (SELECT MAX(CCT1.EFFDT)
                 FROM PS_COVRG_CD_TBL CCT1
                WHERE CCT1.COVRG_CD = CCT.COVRG_CD
                  AND CCT1.EFFDT <= $AsOfDate)
  AND EFF_STATUS = 'A'
ORDER BY CCT.COVRG_CD
END-SELECT

End-Procedure


!-------------------------------
 Begin-Procedure Load-CompanyTbl
!-------------------------------


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-CompanyTbl'
 #endif

 Let #CompanyEntries = 0
BEGIN-SELECT
CT.COMPANY
CT.DESCR
CT.DESCRSHORT

          If #CompanyEntries < {CompanyMax}
             Put &CT.COMPANY into CompanyTbl(#CompanyEntries) Company
             Put &CT.DESCR into CompanyTbl(#CompanyEntries) Descr
             Put &CT.DESCRSHORT into CompanyTbl(#CompanyEntries) DescrShort
             Add 1 to #CompanyEntries
          Else
             Let $ErrorTable = 'Company Names'
             Let #MaxEntries = {CompanyMax}
             Do Report-Table-Load-Error
             STOP
          End-If

 FROM PS_COMPANY_TBL CT
WHERE EFFDT = (SELECT MAX(CT1.EFFDT)
                 FROM PS_COMPANY_TBL CT1
                WHERE CT1.COMPANY = CT.COMPANY
                  AND CT1.EFFDT <= $AsOfDate)
  AND EFF_STATUS = 'A'
ORDER BY CT.COMPANY
END-SELECT

End-Procedure


!--------------------------------
 Begin-Procedure Load-PlanNameTbl
!--------------------------------
! Uses the Base Language.
!


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-PlanNameTbl'
 #endif

 Let #PlanNameEntries = 0
BEGIN-SELECT
P.PLAN_TYPE
P.BENEFIT_PLAN
P.DESCR
P.DESCRSHORT

          If #PlanNameEntries < {PlanNameMax}
             Put &P.PLAN_TYPE into PlanNameTbl(#PlanNameEntries) PlanType
             Put &P.BENEFIT_PLAN into PlanNameTbl(#PlanNameEntries) BenefitPlan
             Put &P.DESCR into PlanNameTbl(#PlanNameEntries) Descr
             Put &P.DESCRSHORT into PlanNameTbl(#PlanNameEntries) DescrShort
             Add 1 to #PlanNameEntries
          Else
             Let $ErrorTable = 'Benefit Plan Names'
             Let #MaxEntries = {PlanNameMax}
             Do Report-Table-Load-Error
             STOP
          End-If

 FROM PS_BENEF_PLAN_TBL P
WHERE EFFDT = (SELECT MAX(P1.EFFDT)
                 FROM PS_BENEF_PLAN_TBL P1
                WHERE P1.PLAN_TYPE = P.PLAN_TYPE
                  AND P1.BENEFIT_PLAN = P.BENEFIT_PLAN
                  AND P1.EFFDT <= $AsOfDate)
ORDER BY P.PLAN_TYPE, P.BENEFIT_PLAN
END-SELECT

End-Procedure

!------------------------------------
 Begin-Procedure Load-RelationshipTbl
!------------------------------------
! Uses the base language.
!

 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-RelationshipTbl'
 #endif

 Let #RelationEntries = 0
BEGIN-SELECT
X1.FIELDVALUE
X1.XLATLONGNAME
X1.XLATSHORTNAME

          If #RelationEntries < {RelationMax}
             Put &X1.FIELDVALUE into RelationTbl(#RelationEntries) Relationship
             Put &X1.XLATLONGNAME into RelationTbl(#RelationEntries) Descr
             Put &X1.XLATSHORTNAME into RelationTbl(#RelationEntries) DescrShort
             Add 1 to #RelationEntries
          Else
             Let $ErrorTable = 'Relationship XLAT Values'
             Let #MaxEntries = {RelationMax}
             Do Report-Table-Load-Error
             STOP
          End-If

 FROM PSXLATITEM X1
WHERE X1.EFFDT = (SELECT MAX(X2.EFFDT)
                    FROM PSXLATITEM X2
                   WHERE X2.FIELDNAME = X1.FIELDNAME
                     AND X2.EFFDT <= $AsOfDate)
  AND X1.EFF_STATUS = 'A'
  AND X1.FIELDNAME = 'RELATIONSHIP'
END-SELECT

End-Procedure


!------------------------------------
 Begin-Procedure Load-VendorPolicyTbl
!------------------------------------


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-VendorPolicyTbl'
 #endif

 Let #VendorPolicyEntries = 0
BEGIN-SELECT
VP.SETID
VP.VENDOR_ID
VP.GROUP_NBR
VP.POLICY_NBR

          If #VendorPolicyEntries < {VendorPolicyMax}
             Put &VP.GROUP_NBR into VendorPolicyTbl(#VendorPolicyEntries) GroupNbr
             Put &VP.POLICY_NBR into VendorPolicyTbl(#VendorPolicyEntries) PolicyNbr
             Add 1 to #VendorPolicyEntries
          Else
             Let $ErrorTable = 'Vendor / Policy'
             Let #MaxEntries = {VendorPolicyMax}
             Do Report-Table-Load-Error
             STOP
          End-If

  FROM PS_VENDOR_POLICY VP
 WHERE SETID = $SetId
   AND VENDOR_ID = $VendorId
ORDER BY VP.SETID, VP.VENDOR_ID, VP.GROUP_NBR
END-SELECT

End-Procedure


!--------------------------------
 Begin-Procedure Load-Run-History
!--------------------------------


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-Run-History'
 #endif

 Let #RunHistEntries = 0
BEGIN-SELECT
RH.ASOFDATE
RH.RUNDATE
RH.RUNDTTM
RH.SETID
RH.VENDOR_ID
RH.PLAN_TYPE

          If #RunHistEntries < {RunHistMax}
             Let $DateOut = ' '
             Put &RH.PLAN_TYPE into RunHistTbl(#RunHistEntries) PlanType
             Do Format-Datetime(&RH.RUNDATE, $DateOut, {DEFCMP}, '', '')
             Put $DateOut into RunHistTbl(#RunHistEntries) RunDate_YMD
             Do Format-Datetime(&RH.ASOFDATE, $DateOut, {DEFCMP}, '', '')
             Put $DateOut into RunHistTbl(#RunHistEntries) AsOfDate_YMD
             Add 1 to #RunHistEntries
          Else
             Let $ErrorTable = 'Run History'
             Let #MaxEntries = {RunHistMax}
             Do Report-Table-Load-Error
             STOP
          End-If

 FROM PS_BN_SNAP_HIST RH
WHERE RUNDATE = (SELECT MAX(RH1.RUNDATE)
                   FROM PS_BN_SNAP_HIST RH1
                  WHERE RH1.SETID = RH.SETID
                    AND RH1.VENDOR_ID = RH.VENDOR_ID
                    AND RH1.PLAN_TYPE = RH.PLAN_TYPE
                    AND RH1.BN_SNAP_HIST_TYPE = RH.BN_SNAP_HIST_TYPE)
  AND BN_SNAP_HIST_TYPE = 'A'
  AND SETID = $SetId
  AND VENDOR_ID = $VendorId
ORDER BY RH.ASOFDATE DESC, RH.RUNDTTM DESC, RH.SETID, RH.VENDOR_ID, RH.PLAN_TYPE 
END-SELECT
End-Procedure

!-------------------------------
 Begin-Procedure Load-Calc-Rules($SetId, $VendorId, $PlanType, $AsOfDate)
!-------------------------------


 #ifdef debugT
    DISPLAY 'BENCRFNC: Load-Calc-Rules'
 #endif

 Let #_CalcRuleEntries = 0

 If IsBlank($PlanType)
   Let $PlanTypeClause = ''
 Else
   Let $PlanTypeClause = ' AND C.PLAN_TYPE = ''' || $PlanType || ''' '
 End-If

BEGIN-SELECT DISTINCT
B.CALC_RULES_ID
D.AGE_SOURCE
D.AGE_AS_OF_CD
D.AGE_AS_OF_DD
D.AGE_AS_OF_MM
D.SERVICE_AS_OF_CD
D.SERVICE_AS_OF_DD
D.SERVICE_AS_OF_MM

          If #_CalcRuleEntries < {CalcRuleMax}
             Put &B.CALC_RULES_ID      into CalcRule(#_CalcRuleEntries) CalcRulesId
             Put &D.AGE_SOURCE         into CalcRule(#_CalcRuleEntries) AgeSource
             Put &D.AGE_AS_OF_CD       into CalcRule(#_CalcRuleEntries) AgeAsOfCd
             Put &D.AGE_AS_OF_DD       into CalcRule(#_CalcRuleEntries) AgeAsOfDD
             Put &D.AGE_AS_OF_MM       into CalcRule(#_CalcRuleEntries) AgeAsOfMM
             Put &D.SERVICE_AS_OF_CD   into CalcRule(#_CalcRuleEntries) SvcAsOfCd
             Put &D.SERVICE_AS_OF_DD   into CalcRule(#_CalcRuleEntries) SvcAsOfDD
             Put &D.SERVICE_AS_OF_MM   into CalcRule(#_CalcRuleEntries) SvcAsOfMM
             Add 1 to #_CalcRuleEntries
           Else
             Let $_ErrorTable = 'Calc Rules'
             Let #_MaxEntries = {CalcRuleMax}
             Do Report-Table-Load-Error
             STOP
          End-If

  FROM PS_BEN_DEFN_OPTN A, PS_BEN_DEFN_COST B, PS_BENEF_PLAN_TBL C,
       PS_CALC_RULES_TBL D
 WHERE B.COST_TYPE = 'P'
   AND A.BENEFIT_PROGRAM = B.BENEFIT_PROGRAM
   AND A.PLAN_TYPE = B.PLAN_TYPE
   AND A.OPTION_ID = B.OPTION_ID
   AND A.EFFDT = B.EFFDT
   AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                    FROM PS_BEN_DEFN_OPTN A1
                   WHERE A1.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
                     AND A1.PLAN_TYPE = A.PLAN_TYPE
                     AND A1.OPTION_ID = A.OPTION_ID
                     AND A1.EFFDT <= $AsOfDate)
   AND A.PLAN_TYPE = C.PLAN_TYPE
   AND A.BENEFIT_PLAN = C.BENEFIT_PLAN
   AND C.SETID = $SetId
   AND C.VENDOR_ID = $VendorId
!  AND (C.PLAN_TYPE = $PlanType  OR $PlanType = ' ')
   [$PlanTypeClause]
   AND C.EFFDT = (SELECT MAX(C1.EFFDT)
                    FROM PS_BENEF_PLAN_TBL C1
                   WHERE C1.PLAN_TYPE = C.PLAN_TYPE
                     AND C1.BENEFIT_PLAN = C.BENEFIT_PLAN
                     AND C1.EFFDT <= $AsOfDate)
  AND D.CALC_RULES_ID = B.CALC_RULES_ID
  AND D.EFFDT = (SELECT MAX(D1.EFFDT)
                   FROM PS_CALC_RULES_TBL D1
                  WHERE D1.CALC_RULES_ID = D.CALC_RULES_ID
                    AND D1.EFFDT <= $AsOfDate)
ORDER BY B.CALC_RULES_ID
END-SELECT

End-Procedure


!---------------------------------------
 Begin-Procedure Report-Table-Load-Error
!---------------------------------------
 DISPLAY 'Cached table entries limit exceeded...'
 DISPLAY '     Table: ' noline
 DISPLAY $ErrorTable
 DISPLAY '     Limit: ' noline
 DISPLAY #MaxEntries 9999
End-Procedure

 #Include 'datemath.sqc'
