!******************************************************
! PER034 : Creates "Internal" Resume for Selected EE *
!******************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2007 Oracle. All Rights Reserved.                    *
!          $Date:  2007/07/30:00:48:56                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
!****************************************************************************
! This report is coded to make use of the BOLD typeface support for HP      *
! Laserjet printers (BOLD typeface) included in SQR release 2.28 (Aug, '91).*
!                                                                           *
! The resume can also be printed using the "standard" printer definition    *
! used in other reports.  To do this:                                       *
!   1) un-comment the "#include 'setup31.sqc' ..." line below AND           *
!   2) comment out the "Printer definition" - all lines from                *
!      "#define Laser Postscript" through "end-setup" below.                *
!                                                                           *
!****************************************************************************
!***********************************************************************
!Procedures ending with "Scrty" and Record alias ending with "SC" are
!using SQR Seurity.
!***********************************************************************
#include 'setenv.sqc' !Set environment
#include 'setup31.sqc'

!***************************************************************************
!**PRINTER DEFINITION
!***************************************************************************
#define Laser Postscript
begin-setup
!
! declare printer              ! Declare printer characteristics.
!        type=HPLASERJET       ! Types are POSTSCRIPT, HPLASERJET,
!        orientation=portrait  ! Or Landscape.
!        top-margin= .5
!        left-margin=.70       ! or LINEPRINTER
!        font=3                ! Courier font - Use a mono-space font so
!                              ! output lines up OK
!        point-size=8
!        line-size=9           ! In points (72 points per inch) - this is 8LPI.
!        char-size=4.32        ! 16.6 chars/inch
!page-size 79 122
end-setup

#define EP_REVW_TYP_TBL
#define REVW_RATING_TBL
#include 'rellang.sqc'

#define page-len 79 ! used to detect need for new page when output is
                    ! multi-line/item - keep the same as "page-size"
                    ! in printer definition
#define center 56 ! middle of line
#define  lc  78   ! Label text column for EE data
#define  dc  98   ! Data column - goes with label text
#define sdc   1   ! Starting date column
#define edc  17   ! Ending date column
#define stc  35   ! Text data column - goes with sdc/edc
#define src  55   ! Salary Reason column
#define cpc  37   ! Salary change % column
#define rtc  70   ! Review_type column
#define sac  60   ! Skill Acquired column
#define luc  85   ! Skill Last Used column
#define rpc  50   ! read proficiency
#define wpc  68   ! write proficiency
#define spc  86   ! speak proficiency
#define hac  25   ! Honors/Awards Column



!****************************************************************************
begin-heading 8
!****************************************************************************

  let $ReportID='PER034'
  let #center = {center} - 7

  do Append_Report_Translation ('STDHDGTR')
  if $Program_Read = 'Y'
    do Get_Field_Information ('STDHDGTR', 'STDHDG_PAGE_NO', $stdhdg_page_no, #dummy_width)
  end-if

  do Get_Field_Information ('PER034',     'INT_RESUME',         $INT_RESUME,   #DW)
  Print $INT_RESUME     (+1,#center)  BOLD
  !do Format-DateTime($AsOfToday,$out,{DEFMDY},'','')
  
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime($AsOfToday,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime($AsOfToday,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime($AsOfToday,$out,{DEFYMD},'','')
      break
  end-evaluate
           
  do Get_Field_Information ('PER034',     'GENERATED',         $GENERATED,   #DW)
  do Get_Field_Information ('PER034',     'BIRTHDATE',         $BIRTHDATE,   #DW)
  do Get_Field_Information ('PER034',     'ORIG_HIRE_DT',      $ORIG_HIRE_DT,   #DW)
  let $Line = $GENERATED
  let $onespace = ' '
  concat $onespace with $Line
  concat $out with $Line
  let #center = {center} - 8
  Print $Line                 (+1,#center)

  print $ADDLINE1             (+2,1,76)  bold
  print $BIRTHDATE         (0,{lc},19)
  print $BDate                (0,{dc})
  IF $ADDLINE2 <> ''
             PRINT $ADDLINE2  (+1,1,76)
  END-IF

  do Get_Field_Information ('PER034',     'ORIG_HIRE',         $ORIG_HIRE,   #DW)
  IF $ADDLINE2 = ''
    print $ORIG_HIRE            (+1,{lc},19)
    print $HDate                (0,{dc})
  end-if

  IF $ADDLINE2 <> ''
    print $ORIG_HIRE            (0,{lc},19)
    print $HDate                (0,{dc})
  end-if

  do Get_Field_Information ('PER034',     'NATIONAL_ID',         $NATIONAL_ID,   #DW)
  print $NATIONAL_ID          (+1,{lc},19)
  print $SSN                  (0,{dc})

  POSITION (-1,0)
     IF $ADDLINE3 <> ''
             PRINT $ADDLINE3  (+1,1)
     END-IF
     IF $ADDLINE31 <> ''
             PRINT $ADDLINE31  (+1,1)
     END-IF
     IF $ADDLINE4 <> ''
             PRINT $ADDLINE4  (+1,1)
     END-IF
     IF $ADDLINE5 <> ''
             PRINT $ADDLINE5   (+1,1)
     END-IF
     IF $ADDLINE6 <> ''
             PRINT $ADDLINE6    (+1,1)
     END-IF

  print $stdhdg_page_no   (+1,{dc})
  print #page-count       (0,+2)      edit 88888888

end-heading



!****************************************************************************
begin-report
!****************************************************************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Init-Report
  if $prcs_oprid=''
  goto last2
 end-if
  do Find-Date-Format
  do Get-EE-Data
  do Process-Main
  do Reset
  do Stdapi-Term
last2:

end-report

!***********************************************************************
!-----------------Find-Date-Format-------------------------------------*
!Description: Retrieve the date format defined in PSUSERPRSNLOPTN.
!***********************************************************************
begin-procedure Find-Date-Format

let $REC_FOUND = 'N' 
BEGIN-SELECT 
A.USER_OPTION_VALUE
      let $REC_FOUND = 'Y'
    FROM PSUSERPRSNLOPTN A
    WHERE A.OPRID = $prcs_oprid
    AND A.USEROPTN = 'DFRMT'
end-SELECT

  if $REC_FOUND = 'N'
    let $DT_FMT = 'M'
  else
    let $DT_FMT = &A.USER_OPTION_VALUE
    let $DT_FMT = RTRIM($DT_FMT,' ')
  end-if
end-procedure !Find-Date-Format


!****************************************************************************
begin-procedure Init-Report
!****************************************************************************

  do Stdapi-Init
   if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  if $prcs_process_instance = ''
    do Ask-Per034-Parameters
  else
    do Select-Parameters
  end-if

last1:
  let $ReportID = 'PER034'
  do Init_Report_Translation ($ReportID, $prcs_language_cd)
  do Append_Report_Translation ('HR')

end-procedure



!****************************************************************************
begin-procedure Get-Values
!****************************************************************************

   do Get-Per034-Parameters

end-procedure



!***************************************************************************
! This routine checks the database to see which resume sections have data  *
! for the selected employee, and includes those that do in the resume.     *
!***************************************************************************
begin-procedure Process-Main
!***************************************************************************

do Get-Primary-Job($EMPLID, '', #EmplRcd)

!********************
! Print Job History *
!********************
let #run_proc = 0
begin-SELECT
EMPLID
  if #run_proc = 0
    do Print-Job-History
    let #run_proc = 1
  end-if
!Begin the Resolution 692906
!FROM  PS_CAREER_SUMM_VW JHC
FROM  PS_JOB JHC
!End the resolution 692906
WHERE JHC.EMPLID = $EMPLID
  AND JHC.EMPL_RCD = #EmplRcd
end-SELECT

!***************************
! Print Prior Work History *
!***************************
let #run_proc = 0
begin-SELECT
PWC.EMPLID
  if #run_proc = 0
    do Print-PriorWork-Hist
    let #run_proc = 1
  end-if
FROM  PS_PRIORWORK_EXPER PWC
WHERE PWC.EMPLID = $EMPLID
end-SELECT

!**************************
! Print Education History *
!**************************
let #run_proc = 0
begin-SELECT
EDC.EMPLID
  if #run_proc = 0
    do Print-Education-Hist
    let #run_proc = 1
  end-if
FROM  PS_ACCOMPLISHMENTS EDC,
      PS_ACCOMP_TBL AA1
WHERE EDC.EMPLID = $EMPLID
  AND EDC.ACCOMPLISHMENT = AA1.ACCOMPLISHMENT
  AND AA1.ACCOMP_CATEGORY = 'DEG'
end-SELECT

!*****************************
! Print Compensation History *
!*****************************
let #run_proc = 0
begin-SELECT
SHC.EMPLID
  if #run_proc = 0
    do Print-Comp-Hist
    let #run_proc = 1
  end-if
FROM  PS_COMP_SUMM_VW SHC
WHERE SHC.EMPLID = $EMPLID
end-SELECT

!****************************
! Print Performance History *
!****************************
let #run_proc = 0
begin-SELECT
ERC.EMPLID
  if #run_proc = 0
    do Print-Job-Performance-Hist
    let #run_proc = 1
  end-if
FROM  PS_EMPLOYEE_REVIEW ERC
WHERE ERC.EMPLID = $EMPLID
end-SELECT

begin-SELECT
EPA.EMPLID
  if #run_proc = 0
    do Print-Job-Performance-Hist
    let #run_proc = 1
  end-if
FROM  PS_EP_APPR EPA
WHERE EPA.EMPLID = $EMPLID
AND   EPA.EP_REVIEW_STATUS = 'CO'
end-SELECT

!*************************
! Print Training History *
!*************************
let #run_proc = 0
begin-SELECT
TRC.EMPLID
  if #run_proc = 0
    do Print-Training-Hist
    let #run_proc = 1
  end-if
FROM  PS_TRAINING TRC
WHERE TRC.EMPLID = $EMPLID
AND TRC.ATTENDANCE = 'C'
end-SELECT

!********************************
! Print Special Project History *
!********************************
let #run_proc = 0
begin-SELECT
SPC.EMPLID
  if #run_proc = 0
    do Print-Special-Proj-Hist
    let #run_proc = 1
  end-if
FROM  PS_SPECL_PROJECT SPC
WHERE SPC.EMPLID = $EMPLID
end-SELECT

!***************
! Print Skills *
!***************
let #run_proc = 0
begin-SELECT
SKC.EMPLID
  if #run_proc = 0
    do Print-Skills
    let #run_proc = 1
  end-if
FROM  PS_COMPETENCIES SKC,
      PS_CM_EVALUATIONS CC1
WHERE SKC.EMPLID = $EMPLID
  AND SKC.EMPLID = CC1.EMPLID
  AND SKC.EVALUATION_ID = CC1.EVALUATION_ID
  AND CC1.EVALUATION_TYPE = 'A'
  AND SKC.EFFDT = (SELECT MAX(SKC2.EFFDT)
                   FROM   PS_COMPETENCIES SKC2
                   WHERE  SKC2.EMPLID = SKC.EMPLID
                     AND  SKC.EVALUATION_ID = SKC2.EVALUATION_ID
                     AND SKC.COMPETENCY = SKC2.COMPETENCY
                     AND SKC2.EFFDT <= $AsOftoday)
end-SELECT

!******************
! Print Languages *
!******************
let #run_proc = 0
begin-SELECT
LRC.EMPLID
  if #run_proc = 0
    do Print-Languages
    let #run_proc = 1
  end-if
FROM  PS_ACCOMPLISHMENTS LRC,
      PS_ACCOMP_TBL AA2
WHERE LRC.EMPLID = $EMPLID
  AND LRC.ACCOMPLISHMENT = AA2.ACCOMPLISHMENT
  AND AA2.ACCOMP_CATEGORY = 'LNG'
end-SELECT

!********************
! Print Citizenship *
!********************
let #run_proc = 0
begin-SELECT
CITC.EMPLID
  if #run_proc = 0
    do Print-Citizenship
    let #run_proc = 1
  end-if
FROM  PS_CITIZENSHIP CITC
WHERE CITC.EMPLID = $EMPLID
  AND CITC.DEPENDENT_ID = ' '
end-SELECT

!*****************************
! Print Visas & Work Permits *
!*****************************
let #run_proc = 0
begin-SELECT
VPC.EMPLID
 if #run_proc = 0
    do Print-Visas-WorkPermits
    let #run_proc = 1
 end-if
FROM  PS_VISA_PMT_DATA VPC
WHERE VPC.EMPLID = $EMPLID
  AND VPC.DEPENDENT_ID = ' '
end-SELECT

!********************************
! Print Licenses & Certificates *
!********************************
let #run_proc = 0
begin-SELECT
LCC.EMPLID
 if #run_proc = 0
    do Print-Licenses-Certs
    let #run_proc = 1
 end-if
FROM PS_ACCOMPLISHMENTS LCC,
     PS_ACCOMP_TBL AA3
WHERE LCC.EMPLID = $EMPLID
  AND LCC.ACCOMPLISHMENT = AA3.ACCOMPLISHMENT
  AND AA3.ACCOMP_CATEGORY = 'LIC'
end-SELECT

!********************
! Print Memberships *
!********************
let $found_membership = 'N'
let #run_proc = 0
begin-SELECT
MRC.EMPLID
 if #run_proc = 0
    do Print-Membership
    let #run_proc = 1
 end-if
FROM  PS_ACCOMPLISHMENTS MRC,
      PS_ACCOMP_TBL AA4
WHERE MRC.EMPLID = $EMPLID
  AND MRC.ACCOMPLISHMENT = AA4.ACCOMPLISHMENT
  AND AA4.ACCOMP_CATEGORY = 'MEM'
end-SELECT

!************************
! Print Honors & Awards *
!************************
let $found_honor = 'N'
let #run_proc = 0
begin-SELECT
HAC.EMPLID
 if #run_proc = 0
    do Print-Honors-Awards
    let #run_proc = 1
 end-if
FROM  PS_ACCOMPLISHMENTS HAC,
      PS_ACCOMP_TBL AA5
WHERE HAC.EMPLID = $EMPLID
  AND HAC.ACCOMPLISHMENT = AA5.ACCOMPLISHMENT
  AND AA5.ACCOMP_CATEGORY = 'HON'
end-SELECT

end-procedure



!****************************************************************************
Begin-Procedure Get-EE-Data
!****************************************************************************

begin-SELECT
PN.NAME
  move &PN.Name to $Name
  do Rotate-name

  do Get_Orig_Hire_Dt
  !do Format-DateTime(&ORH.ORIG_HIRE_DT,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&ORH.ORIG_HIRE_DT,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&ORH.ORIG_HIRE_DT,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&ORH.ORIG_HIRE_DT,$out,{DEFYMD},'','')
      break
  end-evaluate
         
  move $out to $HDate

EE.BIRTHDATE
  !do Format-DateTime(&EE.BirthDate,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&EE.BirthDate,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&EE.BirthDate,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&EE.BirthDate,$out,{DEFYMD},'','')
      break
  end-evaluate

  move $out to $BDate

  Do Get-Empl-Address ($Emplid,'HOME', $AddressFound)
  let $COUNTRY  = $GETADDR_Country
  let $ADDRESS1 = $GETADDR_Address1
  let $ADDRESS2 = $GETADDR_Address2
  let $ADDRESS3 = $GETADDR_Address3
  let $ADDRESS4 = $GETADDR_Address4
  let $HOUSE_TYPE = $GETADDR_HOUSE_TYPE
  let $ADDR_FIELD1 = $GETADDR_ADDR_FIELD1
  let $ADDR_FIELD2 = $GETADDR_ADDR_FIELD2
  let $ADDR_FIELD3 = $GETADDR_ADDR_FIELD3
  let $NUM1 = $GETADDR_NUM1
  let $NUM2 =$GETADDR_NUM2
  let $CITY = $GETADDR_CITY
  let $STATE =$GETADDR_STATE
  let $POSTAL = $GETADDR_POSTAL
  let $COUNTY = $GETADDR_COUNTY
  let $GEO_CODE =$GETADDR_GEO_CODE
  let $IN_CITY_LIMIT =$GETADDR_IN_CITY_LIMIT

  do ADFORMAT                ! Formats the address based on Country
  do Compress-Address         ! Removes blank lines from the formatted address

  do PROC-STATE
  do PERS_NID

FROM  PS_PERSON EE,
      PS_PERSON_NAME PN
WHERE EE.EMPLID = $Emplid
  AND PN.EMPLID = $Emplid
end-SELECT

end-procedure

!****************************************************************************
!---------Get Orig Hire Date-------------------------------------------
!****************************************************************************
begin-procedure Get_Orig_Hire_Dt
begin-select
ORH.ORIG_HIRE_DT
from PS_ORIG_HIRE_VW ORH
where ORH.EMPLID = $Emplid
end-select
end-procedure Get_Orig_Hire_Dt

!****************************************************************************
BEGIN-PROCEDURE PROC-STATE
!****************************************************************************

begin-SELECT
ST.DESCR
  let $STATE_DESC = RTRIM(&ST.DESCR,' ')

FROM  PS_STATE_NAMES_TBL ST
WHERE ST.STATE = $STATE
  AND ST.COUNTRY = $COUNTRY
end-SELECT

END-PROCEDURE



!****************************************************************************
BEGIN-PROCEDURE PERS_NID
!****************************************************************************

begin-SELECT
DD.NATIONAL_ID
  MOVE &DD.NATIONAL_ID TO $SSN
  !let $SSN1 = {ps-substr}(&DD.NATIONAL_ID,1,3)
  !let $SSN2 = {ps-substr}(&DD.NATIONAL_ID,4,2)
  !let $SSN3 = {ps-substr}(&DD.NATIONAL_ID,6,4)
  !let $SSN = $SSN1 || '-'
  !concat $SSN2 with $SSN
  !concat '-' with $SSN
  !concat $SSN3 with $SSN

FROM  PS_PERS_NID  DD

WHERE DD.EMPLID = $EmplId
 AND DD.COUNTRY = $COUNTRY
end-SELECT

END-PROCEDURE



!*************************************************************************
Begin-Procedure Print-Job-History
!****************************************************************************

  let #center = {center} - 6
  do Get_Field_Information ('PER034',     'JOB_HISTORY',         $JOB_HISTORY,   #DW)
  do Get_Field_Information ('PER034',     'PRESENT',         $PRESENT,   #DW)
  Print $JOB_HISTORY     (+4,#center)   BOLD
  let $EndDate = $PRESENT             ! Initial ending date

begin-SELECT
JH.BUSINESS_UNIT
  LET $BU = RTRIM(&JH.BUSINESS_UNIT,' ')

JH.EFFDT
  let $AsOfDate = &JH.Effdt            ! this is historic data - need to use
                                       ! the date it happened to look up data
                                       ! in other EFFDT'd tables
  !do Format-DateTime(&JH.Effdt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&JH.Effdt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&JH.Effdt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&JH.Effdt,$out,{DEFYMD},'','')
      break
  end-evaluate
  
  print $out                                 (+2,{sdc},15) ! leave a blank line
  print $EndDate                              (0,{edc},21)
  move $out to $EndDate

JH.POSITION_NBR
  let $Position_Nbr = rtrim(&JH.Position_Nbr, ' ')
  if $Position_Nbr <> ''
     do Get-Position-Title
     print $PosName                             (0,{stc})
  end-if

JH.JOBCODE
    move &JH.JOBCODE TO $JOBCODE
    move ' ' to $SETID
    do Get-Job-Setid
    move &SCG.SETID to $SETID
  let $JobCode = rtrim(&JH.JobCode, ' ')
  if $JobCode <> ''
    do Get-Job-Title
  end-if
  if $Position_Nbr <> ''
     print '-'                                    (0,+2,1)
     print $JobTitle                              (0,+2)
  else
     print $JobTitle                              (0,{stc})
  end-if

JH.DEPTID
  let $DeptID = rtrim(&JH.DeptID, ' ')
  SHOW '$AsOfDate ' $AsOfDate
  if $DeptID <> ''
     do Get-Department-Name
     print $DeptName                              (+1,{stc})
  end-if

JH.GRADE
  let $Grade = rtrim(&JH.Grade, ' ')
  if $Grade <> ' '
    do Get_Field_Information ('PER034',     'SALARY_GRADE',         $SALARY_GRADE,   #DW)
    print $SALARY_GRADE                        (+1,{stc})
    print $Grade                                  (0,+1)
  end-if
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 4      ! not enuf room for another entry
    do end-page
  end-if
!Begin the Resolution 692906
!FROM  PS_CAREER_SUMM_VW JH
FROM  PS_JOB JH
!End the Resolution 692906

WHERE JH.EMPLID = $Emplid
  AND JH.EMPL_RCD = #EmplRcd

ORDER BY JH.EFFDT DESC
end-SELECT

End-Procedure



!**************************************************************************
Begin-Procedure Print-PriorWork-Hist
!****************************************************************************

  let #center = {center} - 9
  do Get_Field_Information ('PER034',     'PRIOR_WK_HIST',         $PRIOR_WK_HIST,   #DW)
  let $CurrentHeading =  $PRIOR_WK_HIST

  if {page-len} - #current-line >= 7      !room for heading plus at least one
     Print $CurrentHeading (+4,#center) BOLD   ! entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
PW.START_DT
  !do Format-DateTime(&PW.Start_Dt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&PW.Start_Dt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&PW.Start_Dt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&PW.Start_Dt,$out,{DEFYMD},'','')
      break
  end-evaluate

  print $out                                   (+2,{sdc},15) ! leave a blank line

PW.END_DT
  if &PW.End_Dt <> ''
     !do Format-DateTime(&PW.End_Dt,$out,{DEFMDY},'','')
     evaluate $DT_FMT
       when = 'M'
         do Format-DateTime(&PW.End_Dt,$out,{DEFMDY},'','')
         break
       when = 'D'
         do Format-DateTime(&PW.End_Dt,$out,{DEFDMY},'','')
         break
       when-Other
         do Format-DateTime(&PW.End_Dt,$out,{DEFYMD},'','')
         break
     end-evaluate            
     print $Out                                (0,{edc},21)
  end-if

PW.ENDING_TITLE
  let $ET = rtrim(&PW.Ending_Title, ' ')
  if $ET <> ''
     print $ET                                 (0,{stc})
  end-if

PW.EMPLOYER
  let $Empl = rtrim(&PW.Employer, ' ')
  if $Empl <> ''
     if $ET <> ''                     !We had an ending title and printed it
        print $Empl                            (+1,{stc})
     else
        print $Empl                            (0,{stc})
     end-if
  end-if

PW.CITY
  let $City = rtrim(&PW.City, ' ')

PW.STATE
  let $State = rtrim(&PW.State, ' ')

PW.COUNTRY
  let $CountryCode = rtrim(&PW.Country, ' ')
  do Get-Country-Name
  let $Out = $City || ', '
  concat $State with $Out
  concat '  ' with $Out
  concat $CountryShortNm with $Out
  if $ET <> ''                          !We had an ending title and printed it
     print $Out             (0,+3)      !print on same line as employer
  else
     print $Out             (+1,{stc})   !print on separate line
  end-if
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 3      ! not enuf room for another entry
    do end-page
  end-if

FROM  PS_PRIORWORK_EXPER PW

WHERE PW.EMPLID = $Emplid
ORDER BY PW.START_DT DESC
end-SELECT

End-Procedure



!***************************************************************************
Begin-Procedure Print-Education-Hist
!****************************************************************************

  let #center = {center} - 5
  do Get_Field_Information ('PER034',     'EDUCATION',         $EDUCATION,   #DW)
  let $CurrentHeading = $EDUCATION

  if {page-len} - #current-line >= 6          !room for heading plus at least
      Print $CurrentHeading (+4,#center) BOLD ! entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
ED.DT_ISSUED
  !do Format-DateTime(&ED.DT_ISSUED,$YR_ACQUIRED,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&ED.DT_ISSUED,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&ED.DT_ISSUED,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&ED.DT_ISSUED,$out,{DEFYMD},'','')
      break
  end-evaluate
  print $YR_ACQUIRED                      (+2,{sdc},10)         ! leave a blank line

ED.ACCOMPLISHMENT
  print &ED.ACCOMPLISHMENT                         (0,{edc},21)

ED.MAJOR
  let $Major = rtrim(&ED.Major, ' ')
  print $Major                             (0,{stc})
  print ', '                               ()

ED.SCHOOL
  let $School = rtrim(&ED.School, ' ')
  print $School                            ()
  print ', '                               ()

ED.STATE
  let $State = rtrim(&ED.State, ' ')

ED.COUNTRY_OTHER
  let $CountryCode = rtrim(&ED.Country_Other, ' ')
  do Get-Country-Name
  let $Out = $State
  concat '  ' with $Out
  concat $CountryShortNm with $Out
  print $Out                                (0,+2)
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 2          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_ACCOMPLISHMENTS ED,
      PS_ACCOMP_TBL AA6

WHERE ED.EMPLID = $Emplid
  AND ED.ACCOMPLISHMENT = AA6.ACCOMPLISHMENT
  AND AA6.ACCOMP_CATEGORY = 'DEG'
ORDER BY ED.DT_ISSUED DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Comp-Hist
!****************************************************************************

  let #center = {center} - 7
  do Get_Field_Information ('PER034',     'SAL_HIST',         $SAL_HIST,   #DW)
  let $CurrentHeading = $SAL_HIST

  if {page-len} - #current-line >= 7     ! heading plus at least 1 entry
       Print $CurrentHeading       (+4,#center)  BOLD
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if


begin-SELECT

SH.EFFDT
  let $AsOfDate = &SH.Effdt            ! this is historic data - need to use
                                       ! the date it happened to look up data
                                       ! in other EFFDT'd tables
  !do Format-DateTime(&SH.Effdt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&SH.Effdt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&SH.Effdt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&SH.Effdt,$out,{DEFYMD},'','')
      break
  end-evaluate
           
  print $out                      (+2,{sdc},10)         ! leave a blank line

SH.CURRENCY_CD &curin
SH.ANNUAL_RT
  !do Format-Number(&SH.Annual_RT, $out, '$$$,$$$,$$$,$$9.999999')
  do Format-Amt(&SH.Annual_RT, $out, '999,999,999,999.999',&curin, $curout)
  print $out                      (0,12,24)
  print $curout                   (0,31)
  
  print $out                      (0,12,24)

SH.CHANGE_PCT
  do Format-Number(&SH.Change_PCT, $out, '999.999')
  print $out                      (0,{cpc})
  print '%'                       ()

SH.ACTION
  move 'ACTION'   to $FieldName
  move &SH.Action  to $FieldValue
  do Read-Translate-Table
  print $XlatLongName              (,{src})
  print ' - '                      ()

SH.ACTION_REASON
  let $Action = &SH.Action
  let $Action_Reason = rtrim(&SH.Action_Reason, ' ')
  do Get-Action-Reason-Descr
  print $ActionReasonDescr         ()

SH.SAL_ADMIN_PLAN
  do Get_Field_Information ('PER034',     'SAL_INFO',         $SAL_INFO,   #DW)
  print $SAL_INFO  (+1,{src})
  print &SH.Sal_Admin_Plan         (,+2)
  print '/'                        ()

SH.GRADE
  print &SH.Grade                  ()
  print '/'                        ()

SH.STEP
  print &SH.Step                   ()
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 3
    do end-page
  end-if

FROM  PS_COMP_SUMM_VW SH

WHERE SH.EMPLID = $Emplid
  AND SH.EMPL_RCD = #EmplRcd
ORDER BY SH.EFFDT DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Job-Performance-Hist
!****************************************************************************

  let #center = {center} - 8
  do Get_Field_Information ('PER034',     'JOB_PERF',         $JOB_PERF,   #DW)
  let $CurrentHeading = $JOB_PERF

  if {page-len} - #current-line >= 6          !room for heading plus at least
      Print $CurrentHeading (+4,#center) BOLD ! entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

  !******************
  ! Get All Reviews *
  !******************
  let $ERN = ''
  let $ReviewType = ''
  let $BeginDt = ''
  let $EndDt = ''
  let #MaxReviews = 0
  do Get-All-Reviews($Emplid, $ERN, $ReviewType, $BeginDt, $EndDt, #MaxReviews, #ReviewEntries)

  !***************************
  ! Loop through the Reviews *
  !***************************
  let #CNT = 1
  While #CNT <= #ReviewEntries

    !*********************************
    ! Get the relevant Review values *
    !*********************************
    Get #EmplRcd             from Reviews(#CNT) EmplRcd
    Get $PeriodBeginDt_YMD   from Reviews(#CNT) PeriodBeginDt_YMD
    Get $PeriodEndDt_YMD     from Reviews(#CNT) PeriodEndDt_YMD
    Get $ReviewType          from Reviews(#CNT) ReviewType
    Get $ReviewStatus        from Reviews(#CNT) ReviewStatus
    Get $RatingModel         from Reviews(#CNT) RatingModel
    Get #ReviewPoints        from Reviews(#CNT) ReviewPoints
    Get $CalcMethod          from Reviews(#CNT) CalcMethod
    Get $ReviewRating        from Reviews(#CNT) ReviewRating

    !************************************************
    ! Print only if the Review Status is 'complete' *
    !************************************************
    If $ReviewStatus = 'CO'

      !**************************
      ! Print Period Begin Date *
      !**************************
      let $Begin_Date_String = substr($PeriodBeginDt_YMD, 1, 4) || '-' || substr($PeriodBeginDt_YMD, 5, 2) || '-' || substr($PeriodBeginDt_YMD, 7, 2)
      do Convert-From-DTU-Date($Begin_Date_String, $Begin_Date_Native)
      !do Format-DateTime($Begin_Date_Native,$out,{DEFMDY},'','')
      evaluate $DT_FMT
        when = 'M'
          do Format-DateTime($Begin_Date_Native,$out,{DEFMDY},'','')
          break
        when = 'D'
          do Format-DateTime($Begin_Date_Native,$out,{DEFDMY},'','')
          break
        when-Other
          do Format-DateTime($Begin_Date_Native,$out,{DEFYMD},'','')
          break
      end-evaluate
      print $out                         (+2,{sdc})         ! leave a blank line

      !************************
      ! Print Period End Date *
      !************************
      let $End_Date_String = substr($PeriodEndDt_YMD, 1, 4) || '-' || substr($PeriodEndDt_YMD, 5, 2) || '-' || substr($PeriodEndDt_YMD, 7, 2)
      do Convert-From-DTU-Date($End_Date_String, $End_Date_Native)
      !do Format-DateTime($End_Date_Native,$out,{DEFMDY},'','')
      evaluate $DT_FMT
        when = 'M'
          do Format-DateTime($End_Date_Native,$out,{DEFMDY},'','')
          break
        when = 'D'
          do Format-DateTime($End_Date_Native,$out,{DEFDMY},'','')
          break
        when-Other
          do Format-DateTime($End_Date_Native,$out,{DEFYMD},'','')
          break
      end-evaluate
      print $out                         (0,{edc})

      !**********************
      ! Print Review Result *
      !**********************
      if $CalcMethod = 'S'
        do Get_Field_Information ('PER034',     'POINTS',         $POINTS_LBL,   #DW)
        print $POINTS_LBL                      (0,{stc})
        print #ReviewPoints                    (0,  +1) edit 999
      else
        do Get_Field_Information ('PER034',     'RATING',         $RATING_LBL,   #DW)
        print $RATING_LBL                      (0,{stc})
        let $Rating_Model = $RatingModel
        let $AsOfDate = $End_Date_Native
        let $Review_Rating = $ReviewRating
        do Get-Review-Rating-Descr
        if rtrim($Review_Rating_Descr, ' ') = ''
          let $Review_Rating_Descr = $ReviewRating
        end-if
        print $Review_Rating_Descr             (0,  +1)

      end-if

      !********************
      ! Print Review Type *
      !********************
      do Get_Field_Information ('PER034',     'REVIEW_TYPE',         $REVIEW_TYPE_LBL,   #DW)
      print $REVIEW_TYPE_LBL             (0,{rtc})
      let $Review_Type = $ReviewType
      let $AsOfDate = $End_Date_Native
      do Get-Review-Type-Descr
      if rtrim($Review_Type_Descr, ' ') = ''
        let $Review_Type_Descr = $ReviewType
      end-if
      print $Review_Type_Descr           (0,  +1)

      subtract 1 from #ToPrint
      if {page-len} - #current-line <= 2          !not enuf room for another entry
        do end-page
      end-if

    end-if

    add 1 to #CNT

  end-while

End-Procedure



!****************************************************************************
Begin-Procedure Print-Training-Hist
!****************************************************************************

  let #center = {center} - 4

  do Get_Field_Information ('PER034',     'TRAINING',         $TRAINING,   #DW)
  let $CurrentHeading = $TRAINING

  if {page-len} - #current-line >= 6          !room for heading plus at least
      Print $CurrentHeading (+4,#center) BOLD ! entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
TR.COURSE_END_DT
  !do Format-DateTime(&TR.Course_End_Dt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&TR.Course_End_Dt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&TR.Course_End_Dt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&TR.Course_End_Dt,$out,{DEFYMD},'','')
      break
  end-evaluate
  print $out                         (+2,{sdc})         ! leave a blank line

TR.COURSE_TITLE
  let $CT = rtrim(&TR.Course_Title, ' ')
  concat '  -  ' with $CT
  print $CT                          (0,{stc})

TR.COURSE_GRADE
  move 'COURSE_GRADE'   to $FieldName
  move &TR.Course_Grade to $FieldValue
  do Read-Translate-Table
  do Get_Field_Information ('PER034',     'COURSE_GRADE',         $COURSE_GRADE,   #DW)
  print $COURSE_GRADE            ()
  print $XlatShortName               (0, +1)

TR.SCHOOL
  if &TR.School <> ' '
    print &TR.School                 (+1,{stc})
  end-if
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 3          !not enuf room for another entry
    do end-page
  end-if

FROM PS_TRAINING TR

WHERE TR.EMPLID = $Emplid
  AND TR.ATTENDANCE = 'C'
ORDER BY TR.COURSE_END_DT DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Special-Proj-Hist
!****************************************************************************

  let #center = {center} - 8
  do Get_Field_Information ('PER034',     'SPEC_PROJ',         $SPEC_PROJ,   #DW)
  let $CurrentHeading = $SPEC_PROJ

  if {page-len} - #current-line >= 10         !room for heading plus at least
      Print $CurrentHeading (+4,#center) BOLD !one entry (assume 4 lines of
                                              !descriptive text for an "avg"
                                              !entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
SP.DT_COMPLETED
  !do Format-DateTime(&SP.Dt_Completed,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&SP.Dt_Completed,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&SP.Dt_Completed,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&SP.Dt_Completed,$out,{DEFYMD},'','')
      break
  end-evaluate
  print $out                         (+2,{sdc},15)         ! leave a blank line

SP.EMPLOYER                          (0, {EDC})
SP.DESCRLONG
  let $ProjDesc = rtrim(&SP.DescrLong, ' ')
  print $ProjDesc                    (+1,{edc})  WRAP 90 15
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 6       ! not enuf room for another entry
                                           ! (based on guess that "avg" entry
                                           ! will have 4 lines of descriptive
                                           ! text with it)
    do end-page
  end-if

FROM  PS_SPECL_PROJECT SP

WHERE SP.EMPLID = $Emplid
ORDER BY SP.DT_COMPLETED DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Skills
!****************************************************************************

  let #center = {center} - 6
  do Get_Field_Information ('PER034',     'COMPETENCIES',         $COMPETENCIES,   #DW)
  let $CurrentHeading = $COMPETENCIES

  if {page-len} - #current-line >= 6          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if


  SHOW '$AsOftoday - 2' $AsOftoday

begin-SELECT
SK.COMPETENCY
  let $Competency = rtrim(&SK.Competency, ' ')
  do Get-Skill-Descr
  print $CompetencyDescr                  (+2,{sdc},33)         ! leave a blank line

CRT.DESCRSHORT
  do Get_Field_Information ('PER034',     'PROFICIENCY',         $PROFICIENCY,   #DW)
  move &CRT.DESCRSHORT to $RatingDescr

  print $PROFICIENCY            (0, {stc})
  print $RatingDescr              ()

SK.EFFDT
  do Get_Field_Information ('PER034',     'COMPET_ACQ',         $COMPET_ACQ,   #DW)
  print $COMPET_ACQ          (0, {sac})
  !do Format-DateTime(&SK.EFFDT,$YR_EFFDT,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&SK.EFFDT,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&SK.EFFDT,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&SK.EFFDT,$out,{DEFYMD},'','')
      break
  end-evaluate
           
  let $YR_EFFDT  = datetostr(&SK.EFFDT,'YYYY')
  print $YR_EFFDT                       ()

SK.YR_LAST_USED
  do Get_Field_Information ('PER034',     'LAST_USED',         $LAST_USED,   #DW)
  print $LAST_USED              (0, {luc})
  print $YR_EFFDT ()
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 2          !not enuf room for another entry
    do end-page
  end-if

FROM PS_COMPETENCIES SK,
     PS_CM_EVALUATIONS CC2,
     PS_COMPETENCY_TBL CT,
     PS_REVW_RATING_TBL CRT

WHERE SK.EMPLID = $Emplid
  AND SK.EMPLID = CC2.EMPLID
  AND SK.EMPLID = CC2.EMPLID
  AND SK.EVALUATION_ID = CC2.EVALUATION_ID
  AND CC2.EVALUATION_TYPE = 'A'
  AND CT.COMPETENCY = SK.COMPETENCY
  AND CRT.RATING_MODEL = CT.RATING_MODEL
  AND CRT.REVIEW_RATING = SK.PROFICIENCY
  AND SK.EFFDT = (SELECT MAX(EFFDT)
                  FROM   PS_COMPETENCIES
                  WHERE  EMPLID = SK.EMPLID
                    AND  EVALUATION_ID = SK.EVALUATION_ID
                    AND  COMPETENCY = SK.COMPETENCY
                    AND  EFFDT <= $AsOftoday)
  AND CRT.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_RATING_MDL_TBL
                   WHERE  RATING_MODEL = CRT.RATING_MODEL
                     AND  EFFDT <= $AsOftoday)
ORDER BY SK.YR_LAST_USED DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Languages
!****************************************************************************

  let #center = {center} - 5
  do Get_Field_Information ('PER034',     'LANGUAGES',         $LANGUAGES,   #DW)
  let $CurrentHeading = $LANGUAGES

  if {page-len} - #current-line >= 6          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! one entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
LR.ACCOMPLISHMENT
  let $LCCode = rtrim(&LR.ACCOMPLISHMENT ' ')
  do Get-LC-Descr
  print $LCDescr                      (+2,{sdc},33)         ! leave a blank line
  let $LangXlat = $LCDescr               ! hang onto value for later use

LR.READ_PROFICIENCY
  move 'READ_PROFICIENCY'   to $FieldName
  move &LR.Read_Proficiency to $FieldValue
  do Read-Translate-Table
  do Get_Field_Information ('PER034',     'PROF',         $PROF,   #DW)
  do Get_Field_Information ('PER034',     'READ',         $READ,   #DW)
  print $PROF             (0, {stc})
  PRINT $READ                  (0, {rpc})
  print $XlatShortName              ()

LR.WRITE_PROFICIENCY
  move 'WRITE_PROFICIENCY'   to $FieldName
  move &LR.Write_Proficiency to $FieldValue
  do Read-Translate-Table
  do Get_Field_Information ('PER034',     'WRITE',         $WRITE,   #DW)
  PRINT $WRITE                  (0,{wpc})
  print $XlatShortName              ()

LR.SPEAK_PROFICIENCY
  move 'SPEAK_PROFICIENCY'   to $FieldName
  move &LR.Speak_Proficiency to $FieldValue
  do Read-Translate-Table
  do Get_Field_Information ('PER034',     'SPEAK',         $SPEAK,   #DW)
  PRINT $SPEAK                  (0,{spc})
  print $XlatShortName              ()

LR.NATIVE_LANGUAGE
  if &LR.Native_Language = 'Y'
    do Get_Field_Information ('PER034',     'NATIVE',         $NATIVE,   #DW)
    let $spacenat = ' '
    concat $NATIVE with $spacenat
    concat $spacenat with $LangXlat
    print $LangXlat                     (+1,{stc})
  end-if
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 3          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_ACCOMPLISHMENTS LR,
      PS_ACCOMP_TBL AA7

WHERE LR.EMPLID = $Emplid
  AND LR.ACCOMPLISHMENT = AA7.ACCOMPLISHMENT
  AND AA7.ACCOMP_CATEGORY = 'LNG'
ORDER BY LR.NATIVE_LANGUAGE DESC              !List native language 1st
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Citizenship
!****************************************************************************

  let #center = {center} - 6
  do Get_Field_Information ('PER034',     'CITIZENSHIP',         $CITIZENSHIP,   #DW)
  let $CurrentHeading =  $CITIZENSHIP

  if {page-len} - #current-line >= 6          !room for heading and  data on
    Print $CurrentHeading (+4,#center) BOLD ! same page
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
CIT.COUNTRY
  let $CountryCode = rtrim(&CIT.Country, ' ')
  do Get-Country-Name
  let #ctrypos = length($CountryName)/2
  let #ctrypos = {center} - #ctrypos
  print $CountryName                 (+2, #ctrypos)     ! leave a blank line
  subtract 1 from #ToPrint

FROM  PS_CITIZENSHIP CIT

WHERE CIT.EMPLID = $Emplid
  AND CIT.DEPENDENT_ID = ' '
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Visas-WorkPermits
!****************************************************************************

  let #center = {center} - 9
  do Get_Field_Information ('PER034',     'VISA',         $VISA,   #DW)
  let $CurrentHeading = $VISA

  if {page-len} - #current-line >= 7          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! one entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
VP.COUNTRY
  let $CountryCode = &VP.Country
  do Get-Country-Name
  print $CountryName                 (+2,{sdc},33)         ! leave a blank line

VP.VISA_PERMIT_TYPE
  let $VPCode = rtrim(&VP.Visa_Permit_Type, ' ')
  do Get-Visa-Pmt-Type
  print $VPCode                      (0, {stc})
  print '  -  '                      ()
  print $VPDescr                     ()

VP.VISA_WRKPMT_STATUS
  move 'VISA_WRKPMT_STATUS'  to $FieldName
  move &VP.Visa_WrkPmt_Status to $FieldValue
  do Read-Translate-Table
  do Get_Field_Information ('PER034',     'STATUS',         $STATUS,   #DW)
  print $STATUS                  (0,+8)
  print $XlatShortName              ()

VP.EFFDT
  !do Format-DateTime(&VP.EffDt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&VP.Effdt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&VP.Effdt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&VP.Effdt,$out,{DEFYMD},'','')
      break
  end-evaluate
  do Get_Field_Information ('PER034',     'START_DT',         $START_DT,   #DW)
  PRINT $START_DT             (+1,{stc})
  print $out                        ()

VP.EXPIRATN_DT
  !do Format-DateTime(&VP.Expiratn_Dt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&VP.Expiratn_Dt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&VP.Expiratn_Dt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&VP.Expiratn_Dt,$out,{DEFYMD},'','')
      break
  end-evaluate
  print '-'                         (0,+3)
  do Get_Field_Information ('PER034',     'EXPIRE_DT',         $EXPIRE_DT,   #DW)
  PRINT $EXPIRE_DT         (0,+3)
  print $out                        ()
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 3          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_VISA_PMT_DATA VP

WHERE VP.EMPLID = $Emplid
  AND VP.DEPENDENT_ID = ' '
ORDER BY VP.EXPIRATN_DT DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Licenses-Certs
!****************************************************************************

  let #center = {center} - 13
  do Get_Field_Information ('PER034',     'LIC_CERT',         $LIC_CERT,   #DW)
  let $CurrentHeading = $LIC_CERT

  if {page-len} - #current-line >= 6          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! one entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
LC.ACCOMPLISHMENT
  let $LCCode = rtrim(&LC.ACCOMPLISHMENT ' ')
  do Get-LC-Descr
  print $LCDescr                      (+2,{sdc},33)         ! leave a blank line

LC.DT_ISSUED
  !do Format-DateTime(&LC.Dt_Issued,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&LC.Dt_Issued,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&LC.Dt_Issued,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&LC.Dt_Issued,$out,{DEFYMD},'','')
      break
  end-evaluate
  do Get_Field_Information ('PER034',     'ISS_DT',         $ISS_DT,   #DW)
  PRINT $ISS_DT              (0,{stc})
  print $out                        ()

LC.EXPIRATN_DT
  !do Format-DateTime(&LC.Expiratn_Dt,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&LC.Expiratn_Dt,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&LC.Expiratn_Dt,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&LC.Expiratn_Dt,$out,{DEFYMD},'','')
      break
  end-evaluate
  do Get_Field_Information ('PER034',     'EXP_DT',         $EXP_DT,   #DW)
  PRINT $EXP_DT        (0, +8)
  print $out                        ()
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 2          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_ACCOMPLISHMENTS LC,
      PS_ACCOMP_TBL AA8

WHERE LC.EMPLID = $Emplid
  AND LC.ACCOMPLISHMENT = AA8.ACCOMPLISHMENT
  AND AA8.ACCOMP_CATEGORY = 'LIC'
ORDER BY LC.DT_ISSUED  DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Membership
!****************************************************************************

  let $found_membership = 'Y'

  let #center = {center} - 12
  do Get_Field_Information ('PER034',     'PROF_MEM',         $PROF_MEM,   #DW)
  let $CurrentHeading = $PROF_MEM

  if {page-len} - #current-line >= 6          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! one entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
MR.DT_ISSUED
  !do Format-DateTime(&MR.DT_ISSUED,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&MR.DT_ISSUED,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&MR.DT_ISSUED,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&MR.DT_ISSUED,$out,{DEFYMD},'','')
      break
  end-evaluate
  print $out                        (+2,{sdc},33)

MR.ACCOMPLISHMENT
  let $LCCode = rtrim(&MR.ACCOMPLISHMENT ' ')
  do Get-LC-Descr
  print $LCDescr                      (0,{stc})         ! leave a blank line
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 2          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_ACCOMPLISHMENTS MR,
      PS_ACCOMP_TBL AA8

WHERE MR.EMPLID = $Emplid
  AND MR.ACCOMPLISHMENT = AA8.ACCOMPLISHMENT
  AND AA8.ACCOMP_CATEGORY = 'MEM'
ORDER BY MR.DT_ISSUED DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Print-Honors-Awards
!****************************************************************************

  let $found_honor = 'Y'

  let #center = {center} -  9
  do Get_Field_Information ('PER034',     'HON_AWARD',         $HON_AWARD,   #DW)
  let $CurrentHeading = $HON_AWARD

  if {page-len} - #current-line >= 6          !room for heading plus at least
    Print $CurrentHeading (+4,#center) BOLD ! one entry
  else
    do end-page
    Print $CurrentHeading (+4,#center) BOLD
  end-if

begin-SELECT
HA.DT_ISSUED
  !do Format-DateTime(&HA.Dt_ISSUED,$out,{DEFMDY},'','')
  evaluate $DT_FMT
    when = 'M'
      do Format-DateTime(&HA.Dt_ISSUED,$out,{DEFMDY},'','')
      break
    when = 'D'
      do Format-DateTime(&HA.Dt_ISSUED,$out,{DEFDMY},'','')
      break
    when-Other
      do Format-DateTime(&HA.Dt_ISSUED,$out,{DEFYMD},'','')
      break
  end-evaluate
  print $Out                        (+2,{sdc},23)

HA.ACCOMPLISHMENT
  let $LCCode = rtrim(&HA.ACCOMPLISHMENT ' ')
  do Get-LC-Descr
  print $LCDescr                      (0,{HAC},34)

HA.GRANTOR
  do Get_Field_Information ('PER034',     'GRANTOR',         $GRANTOR,   #DW)
  PRINT $GRANTOR                 (0, {sac})
  print &HA.Grantor                  ()
  subtract 1 from #ToPrint
  if {page-len} - #current-line <= 2          !not enuf room for another entry
    do end-page
  end-if

FROM  PS_ACCOMPLISHMENTS HA,
      PS_ACCOMP_TBL AA0

WHERE HA.EMPLID = $Emplid
  AND HA.ACCOMPLISHMENT = AA0.ACCOMPLISHMENT
  AND AA0.ACCOMP_CATEGORY = 'HON'
ORDER BY HA.DT_ISSUED DESC
end-SELECT

End-Procedure



!****************************************************************************
Begin-Procedure Get-LC-Descr
!****************************************************************************

begin-SELECT
LCD.DESCR
LCD.DESCRSHORT

FROM  PS_ACCOMP_TBL LCD

WHERE LCD.ACCOMPLISHMENT = $LCCode
end-SELECT

  let $LCDescr = rtrim(&LCD.Descr ' ')
  let $LCDescrShort = rtrim(&LCD.DescrShort ' ')

end-procedure



!****************************************************************************
Begin-Procedure Get-Visa-Pmt-Type
!****************************************************************************

begin-SELECT
VPT.DESCR
VPT.DESCRSHORT

FROM  PS_VISA_PERMIT_TBL VPT

WHERE VPT.VISA_PERMIT_TYPE = $VPCode
end-SELECT

  let $VPDescr = rtrim(&VPT.Descr, ' ')
  let $VPDescrShort = rtrim(&VPT.DescrShort, ' ')

End-Procedure



!****************************************************************************
begin-procedure Get-Skill-Descr
!****************************************************************************

begin-SELECT
ST1.DESCR
ST1.DESCRSHORT

FROM  PS_COMPETENCY_TBL ST1

WHERE ST1.COMPETENCY = $COMPETENCY
end-SELECT

 let $CompetencyDescr = rtrim(&ST1.Descr, ' ')
 let $CompetencyDescrShort = rtrim(&ST1.DescrShort, ' ')

end-procedure



!****************************************************************************
begin-procedure Get-Review-Type-Descr
!****************************************************************************

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if

begin-SELECT
ERT.EP_REVIEW_TYPE
ERT.EFFDT
ERT.EP_REVW_DESCR
ERT.EP_REVW_DESCRSHORT

  let $EP_REVW_TYP_TBL-EP_REVW_DESCR = rtrim(&ERT.EP_REVW_DESCR, ' ')
  let $EP_REVW_TYP_TBL-EP_REVW_DESCRSHORT = rtrim(&ERT.EP_REVW_DESCRSHORT, ' ')
  do Get_Related_EP_REVW_TYP_TBL(&ERT.EFFDT, &ERT.EP_REVIEW_TYPE)
  let $Review_Type_Descr = $EP_REVW_TYP_TBL-EP_REVW_DESCR
  let $Review_Type_Descrshort = $EP_REVW_TYP_TBL-EP_REVW_DESCRSHORT

FROM  PS_EP_REVW_TYP_TBL ERT

WHERE ERT.EP_REVIEW_TYPE = $Review_Type
  AND ERT.EFFDT = (SELECT MAX(ERT1.EFFDT)
                   FROM   PS_EP_REVW_TYP_TBL ERT1
                   WHERE  ERT1.EP_REVIEW_TYPE = ERT.EP_REVIEW_TYPE
                     AND  ERT1.EFFDT <= $AsOfDate)
  AND ERT.EFF_STATUS = 'A'
end-SELECT

end-procedure Get-Review-Type-Descr



!****************************************************************************
begin-procedure Get-Review-Rating-Descr
!****************************************************************************

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if


begin-SELECT
RRT.RATING_MODEL
RRT.EFFDT
RRT.REVIEW_RATING
RRT.DESCR
RRT.DESCRSHORT

  let $REVW_RATING_TBL-DESCR = rtrim(&RRT.DESCR, ' ')
  let $REVW_RATING_TBL-DESCRSHORT = rtrim(&RRT.DESCRSHORT, ' ')
  do Get_Related_REVW_RATING_TBL(&RRT.EFFDT, &RRT.RATING_MODEL, &RRT.REVIEW_RATING)
  let $Review_Rating_Descr = $REVW_RATING_TBL-DESCR
  let $Review_Rating_Descrshort = $REVW_RATING_TBL-DESCRSHORT

FROM  PS_RATING_MDL_TBL RMT,
      PS_REVW_RATING_TBL RRT

WHERE RMT.RATING_MODEL = $Rating_Model
  AND RMT.EFFDT = (SELECT MAX(RMT1.EFFDT)
                     FROM PS_RATING_MDL_TBL RMT1
                    WHERE RMT1.RATING_MODEL = RMT.RATING_MODEL
                      AND RMT1.EFFDT <= $AsOfDate)
  AND RMT.EFF_STATUS = 'A'
  AND RRT.RATING_MODEL = RMT.RATING_MODEL
  AND RRT.EFFDT = RMT.EFFDT
  AND RRT.REVIEW_RATING = 'A'
end-SELECT

end-procedure Get-Review-Rating-Descr


!****************************************************************************
begin-procedure Get-Action-Reason-Descr
!****************************************************************************

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if

begin-SELECT
AR.DESCR
AR.DESCRSHORT

FROM  PS_ACTN_REASON_TBL AR

WHERE AR.ACTION = $Action
  AND AR.ACTION_REASON = $Action_Reason
  AND AR.EFFDT = (SELECT MAX(AR1.EFFDT)
                  FROM   PS_ACTN_REASON_TBL AR1
                  WHERE  AR1.ACTION = AR.ACTION
                    AND  AR1.ACTION_REASON = AR.ACTION_REASON
                    AND  AR1.EFFDT <= $AsOfDate)
end-SELECT

  let $ActionReasonDescr = rtrim(&AR.Descr, ' ')
  let $ActionReasonDescrShort = rtrim(&AR.DescrShort, ' ')

end-procedure



!****************************************************************************
begin-procedure Get-Country-Name
!****************************************************************************

  move '' to $CountryName
  move '' to $CountryShortNm

begin-SELECT
CO.DESCR
CO.DESCRSHORT

FROM  PS_COUNTRY_TBL CO

WHERE CO.COUNTRY = $CountryCode
end-SELECT

  let $CountryName    = rtrim(&CO.Descr,' ')
  let $CountryShortNm = rtrim(&CO.DescrShort,' ')

end-procedure



!****************************************************************************
BEGIN-PROCEDURE Get-Job-Setid
!****************************************************************************

begin-SELECT
SCG.SETID

FROM PS_SET_CNTRL_GROUP SCG

WHERE SETCNTRLVALUE = $BU
  AND REC_GROUP_ID = 'HR_02'
end-SELECT

END-PROCEDURE



!****************************************************************************
begin-procedure End-Page
!****************************************************************************

 let #CenterHold = #Center  ! In at least some cases #center has a different
                            ! value after the return from "end-page" - save
                            ! its current value so it can be used in the
                            ! print command after the new page
 new-page
 if #ToPrint > 0
    print $CurrentHeading   (+4,#centerhold)  BOLD
 end-if

end-procedure



!***************************************************************************
#include 'askp034.sqc'   !Asks Employee ID

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'adformat.sqc'  !For Global addressing

#Include 'eputils.sqc'   !Get-All-Reviews procedure
#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'getjobtl.sqc'  !Get-Job-Title procedure
#Include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'getposnm.sqc'  !Get-Position-Name procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Routines to calculate datetimes
#Include 'datetime.sqc'  !Routines to format datetimes
#Include 'number.sqc'    !Routine to format numbers
#include 'stdapi.sqc'    !Routines to update run status
#include 'sqrtrans.sqc'  !Get_Field_Information routine
#Include 'getprimj.sqc'  !Routines for selecting EE's primary job
#Include 'getaddr.sqc'   !Get Current Address Information
