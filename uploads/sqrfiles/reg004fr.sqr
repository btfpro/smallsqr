!*********************************************
!  REG004FR:  BIAF Report (FRA)              *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/06:21:34:21                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Printer and page-size initialization

#define ESTAB_TBL
#define NID_TYPE1_VW
#define PSMSGCATDEFN
#define TRN_VENDOR_TBL
#include 'rellang.sqc'

#define C01    1
#define C02   42
#define C03   93
#define C04  104
#define C05  125
#define C06  136
#define C07  175

!***********************************************************************

begin-program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-program

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 1
!  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

  move 'REG004FR' to $ReportID

  do Stdapi-Init

  let $language_cd = $CURR_LANGUAGE_CD

  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)

  do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

  do Format-DateTime('19000101',$Temp_Dt,{DEFCMP},'','native')

  if $prcs_process_instance = ''
        !No Prompt
  else
        do Select-Parameters-BIAF
  end-if

  if $CONTRACT_TYPE = ''
     let $CONTRACT_TYPE1 = 'ADD'
     let $CONTRACT_TYPE2 = 'CDD'
     let $CONTRACT_TYPE3 = 'IND'
  else
     let $CONTRACT_TYPE1 = $CONTRACT_TYPE
     let $CONTRACT_TYPE2 = $CONTRACT_TYPE1
     let $CONTRACT_TYPE3 = $CONTRACT_TYPE1
  end-if

  do Init_Printer

end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
  do GET-BIAF-FRA-PARM
end-procedure

!***********************************************************************
!  Main: Creates the Monthly Workforce Report
!***********************************************************************

begin-procedure Process-Main


   do Get-Translat-Info     ! Global
   do Print-Search-Period   ! Search Period - From/Thru Dates
   if not IsNull($FROMDT) and not IsNull($THRUDT)
      if not IsNull($GB_GROUP_ID)
         do Retrieve-Group-Build
      else
         do Get-BIAF-Employees-From-List
      end-if
   end-if

end-procedure

!***********************************************************************
!  Prints table banner
!***********************************************************************

begin-procedure Print-Banner0
   print $TITLE0_LBL      (+2,{C01},40)
end-procedure Print-Banner0

begin-procedure Print-Banner1
   print $TITLE1_LBL      (+2,{C01},40)
end-procedure Print-Banner1

begin-procedure Print-Banner2
   print $TITLE2_LBL      (+2,{C01},40)
end-procedure Print-Banner2

begin-procedure Print-Banner3
   print $TITLE3_LBL      (+2,{C01},40)
end-procedure Print-Banner3

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

! TITLES (SECTIONS)
!   do Get_Field_Information($ReportID, 'TITLE0'        , $TITLE0_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE1'        , $TITLE1_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE2'        , $TITLE2_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE3'        , $TITLE3_LBL        , #DW)

! ESTABLISHMENT INFO
   do Get_Field_Information($ReportID, 'SIRET_CD'      , $SIRET_CD_LBL      , #DW)
   do Get_Field_Information($ReportID, 'APE_CD'        , $APE_CD_LBL        , #DW)
   do Get_Field_Information($ReportID, 'ESTAB_NAME'    , $ESTAB_NAME_LBL    , #DW)
   do Get_Field_Information($ReportID, 'ESTAB_COUNT'   , $ESTAB_COUNT_LBL   , #DW)

! EE ADDRESS
   do Get_Field_Information($ReportID, 'EE_NAME'       , $EE_NAME_LBL       , #DW)
   do Get_Field_Information($ReportID, 'EE_ADDRESS'    , $EE_ADDRESS_LBL    , #DW)
   do Get_Field_Information($ReportID, 'EE_POSTAL'     , $EE_POSTAL_LBL     , #DW)
   do Get_Field_Information($ReportID, 'EE_CITY'       , $EE_CITY_LBL       , #DW)
   do Get_Field_Information($ReportID, 'EE_COUNTRY'    , $EE_COUNTRY_LBL    , #DW)

! EE NIDs LABELS
   do Get_Field_Information($ReportID, 'NID'           , $NID_LBL           , #DW)
   do Get_Field_Information($ReportID, 'NID_NAME'      , $NID_NAME_LBL      , #DW)
   do Get_Field_Information($ReportID, 'OTHER_NID'     , $OTHER_NID_LBL     , #DW)

! FONGECIF LABELS
   do Get_Field_Information($ReportID, 'FONGECIF'      , $FONGECIF_LBL      , #DW)
   do Get_Field_Information($ReportID, 'ADDRESS'       , $ADDRESS_LBL       , #DW)
   do Get_Field_Information($ReportID, 'POSTAL'        , $POSTAL_LBL        , #DW)
   do Get_Field_Information($ReportID, 'CITY'          , $CITY_LBL          , #DW)
   do Get_Field_Information($ReportID, 'COUNTRY'       , $COUNTRY_LBL       , #DW)
   do Get_Field_Information($ReportID, 'PHONE'         , $PHONE_LBL         , #DW)

! RUN CONTROL LABELS
   do Get_Field_Information($ReportID, 'GROUP'         , $GROUP_LBL         , #DW)
   do Get_Field_Information($ReportID, 'CONTRACT'      , $CONTRACT_LBL      , #DW)
   do Get_Field_Information($ReportID, 'FROMDT'        , $FROMDT_LBL        , #DW)
   do Get_Field_Information($ReportID, 'THRUDT'        , $THRUDT_LBL        , #DW)

end-procedure Get-Translat-Info

!***********************************************************************
!  Prints the Search Period of the report
!***********************************************************************
begin-procedure Print-Search-Period

   if not IsNull($FROMDT)
      do Format-DateTime($FROMDT, $FromDate, {DEFDMY},'','')
   end-if
   if not IsNull($THRUDT)
      do Format-DateTime($THRUDT, $ThruDate, {DEFDMY},'','')
   end-if

!   print $CONTRACT_LBL                (+1,{C01})
!   print $CONTRACT_TYPE                 (,{C02})
!   print $FROMDT_LBL                  (+1,{C01})
!   print $FromDate                      (,{C02})
!   print $THRUDT_LBL                  (+1,{C01})
!   print $ThruDate                      (,{C02})
!   if not IsNull($GB_GROUP_ID)
!      print $GROUP_LBL                (+1,{C01})
!      print $GB_GROUP_ID                (,{C02})
!   end-if

end-procedure Print-Search-Period

!***********************************************************************
!  Get BIAF Employees From List
!***********************************************************************
begin-procedure Get-BIAF-Employees-From-List
begin-SELECT ON-ERROR=SQL-Error
RC.EMPLID       () on-break print=never level=1 procedure=Employee-Change

    let $EMPLID = &RC.EMPLID
    do Get-List-Job-Data

from PS_RUNCTL_BIAF_FRA RC
where RC.OPRID = $prcs_oprid
and RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-SELECT
end-procedure Get-BIAF-Employees-From-List


begin-procedure Employee-Change
    new-page
    do Print-Search-Period
end-procedure Employee-Change

!***********************************************************************
!  Retrieve Group Build Data
!***********************************************************************
begin-procedure Retrieve-Group-Build
begin-SELECT ON-ERROR=SQL-Error
A.EMPLID                          () on-break print=never level=1 procedure=Employee-Change
    let $EMPLID = &A.EMPLID
A.NAME                            &A.NAME
    let $NAME = &A.NAME
A.EMPL_RCD                        &A.EMPL_RCD
    let #EMPL_RCD = &A.EMPL_RCD
{DATEOUT-PREFIX}A.JOB_EFFDT{DATEOUT-SUFFIX}          &A.JOB_EFFDT
{DATEOUT-PREFIX}OHD.ORIG_HIRE_DT{DATEOUT-SUFFIX}    &OHD.ORIG_HIRE_DT
    let $ORIG_HIRE_DT = &OHD.ORIG_HIRE_DT
JOB.ESTABID  &J.ESTABID
    let $ESTABID = &J.ESTABID
JOB.COMPANY  &J.COMPANY
    let $COMPANY = &J.COMPANY

    do Print-Banner1
    do Get-Person-Name
    do Get-Person-Address
    do Get-Person-NID
    do Get-Other-NID
    do Print-Banner2
    do Get-Estab-Data
    do Count-Estab-EE
    do Print-Banner3
    do Get-Fongecif-Data
    do Get-Fongecif-Phone
    print ''      (+2,{C01})
    do Get-Information-Message

from PS_GB_GRP_RES_VW A, PS_PERSON PERS, PS_CNT_ACTIVE_VW CNT, PS_JOB JOB, PS_ORIG_HIR_EMP_VW OHD
where A.GB_GROUP_ID = $GB_GROUP_ID
and A.VERSIONGBQDM = #VERSIONGBQDM
and A.EMPLID = PERS.EMPLID
and A.EMPLID = OHD.EMPLID
and OHD.ORIG_HIRE_DT >= {DATEIN-PREFIX}$FROMDT{DATEIN-SUFFIX}
and OHD.ORIG_HIRE_DT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
and A.JOB_EFFDT =
(
  select max(RES.JOB_EFFDT)
  from PS_GB_GRP_RES_TBL RES
  where RES.GB_GROUP_ID = A.GB_GROUP_ID
  and RES.VERSIONGBQDM = A.VERSIONGBQDM
  and RES.EMPLID = A.EMPLID
  and RES.EMPL_RCD = A.EMPL_RCD
  and RES.JOB_EFFDT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
)
and JOB.EMPLID = A.EMPLID
and JOB.EMPL_RCD = A.EMPL_RCD
and JOB.EFFDT = A.JOB_EFFDT
and JOB.EFFSEQ = A.JOB_EFFSEQ
and JOB.JOB_INDICATOR = 'P'
and JOB.EMPL_STATUS = 'A'
and CNT.EMPLID = JOB.EMPLID
and CNT.CONTRACT_NUM = JOB.CONTRACT_NUM
and CNT.EFFDT =
(
  SELECT MAX(EFFDT)
  FROM PS_CNT_ACTIVE_VW CNT_ACTIVE_VW
  WHERE CNT_ACTIVE_VW.EMPLID = CNT.EMPLID
  AND CNT_ACTIVE_VW.CONTRACT_NUM = CNT.CONTRACT_NUM
  AND CNT_ACTIVE_VW.EFFDT <= JOB.EFFDT
)
and ((CNT.CONTRACT_TYPE = $CONTRACT_TYPE1 and CNT.CONTRACT_TYPE = $CONTRACT_TYPE2 and CNT.CONTRACT_TYPE = $CONTRACT_TYPE3)
or (CNT.CONTRACT_TYPE = $CONTRACT_TYPE1 or CNT.CONTRACT_TYPE = $CONTRACT_TYPE2 or CNT.CONTRACT_TYPE = $CONTRACT_TYPE3))
and
(
  (
    CNT.CONTRACT_END_DT >= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
  )
  OR (CNT.CONTRACT_END_DT IS NULL)
  OR (CNT.CONTRACT_END_DT = {DATEIN-PREFIX}$Temp_Dt{DATEIN-SUFFIX})
)
order by A.EMPLID, A.NAME, A.EMPL_RCD
end-SELECT
end-procedure Retrieve-Group-Build


!***********************************************************************
!  Get Person Name
!***********************************************************************
begin-procedure Get-Person-Name
begin-SELECT ON-ERROR=SQL-Error
PN.NAME         &PN.NAME
PN.LAST_NAME    &PN.LAST_NAME
PN.FIRST_NAME   &PN.FIRST_NAME

    let $NAME = &PN.NAME
    let $LAST_NAME = &PN.LAST_NAME
    let $FIRST_NAME = &PN.FIRST_NAME

    print $EE_NAME_LBL  (+1,{C01},40)
    print $NAME           (,{C02},50)

from PS_PERSON_NAME PN
where PN.EMPLID = $EMPLID
end-SELECT
end-procedure Get-Person-Name

!***********************************************************************
!  Get Person Original Hire Date
!***********************************************************************
begin-procedure Get-Person-Hire-Date
begin-SELECT ON-ERROR=SQL-Error
PS_ORIG_HIR_EMP_VW.ORIG_HIRE_DT   &PS_ORIG_HIR_EMP_VW.ORIG_HIRE_DT

from PS_ORIG_HIR_EMP_VW
where PS_ORIG_HIR_EMP_VW.EMPLID = $EMPLID
end-SELECT
end-procedure Get-Person-Hire-Date

!***********************************************************************
!  Get Person Address
!***********************************************************************
begin-procedure Get-Person-Address
begin-SELECT ON-ERROR=SQL-Error
P.ADDRESS1   &P.ADDRESS1
P.ADDRESS2   &P.ADDRESS2
P.ADDRESS3   &P.ADDRESS3
P.ADDRESS4   &P.ADDRESS4
P.POSTAL     &P.POSTAL
P.CITY       &P.CITY
P.COUNTRY    &P.COUNTRY

    print $EE_ADDRESS_LBL  (+1,{C01},40)
    print &P.ADDRESS1        (,{C02},50)
    print &P.ADDRESS2      (+1,{C02},100)
    print &P.ADDRESS3      (+1,{C02},100)
    print &P.ADDRESS4      (+1,{C02},100)
    print $EE_POSTAL_LBL   (+1,{C01},40)
    print &P.POSTAL          (,{C02},50)
    print $EE_CITY_LBL       (,{C03},20)
    print &P.CITY            (,{C04},20)

from PS_PERSON_ADDRESS P
where P.EMPLID = $EMPLID
and P.ADDRESS_TYPE = 'HOME'
and P.EFF_STATUS = 'A'
end-SELECT
end-procedure Get-Person-Address

!***********************************************************************
!  Get Personal Identification Number
!***********************************************************************
begin-procedure Get-Person-NID
begin-SELECT ON-ERROR=SQL-Error
N.NATIONAL_ID  &N.NATIONAL_ID
N.SSN_KEY_FRA  &N.SSN_KEY_FRA

    let $NATIONAL_ID = &N.NATIONAL_ID || &N.SSN_KEY_FRA
    print $NID_LBL         (+1,{C01},40)
    print $NATIONAL_ID       (,{C02},50)

from PS_PERS_NID N
where N.EMPLID = $EMPLID
and N.COUNTRY = 'FRA'
and N.NATIONAL_ID_TYPE = 'PR'
and N.PRIMARY_NID = 'Y'
end-SELECT
end-procedure Get-Person-NID

!***********************************************************************
!  Get Other Identification Number
!***********************************************************************
begin-procedure Get-Other-NID
begin-SELECT ON-ERROR=SQL-Error
BB.COUNTRY          &BB.COUNTRY
BB.NATIONAL_ID_TYPE &BB.NATIONAL_ID_TYPE
BB.DESCR            &BB.DESCR
AA.NATIONAL_ID      &AA.NATIONAL_ID
AA.SSN_KEY_FRA      &AA.SSN_KEY_FRA

    let $BB_DESCR = &BB.DESCR
    let $NID_TYPE1_VW-DESCR  = $BB.DESCR
    do Get_Related_NID_TYPE1_VW(&BB.COUNTRY,&BB.NATIONAL_ID_TYPE)
    let $BB_DESCR  = $NID_TYPE1_VW-DESCR

    let $OTHER_NID = &AA.NATIONAL_ID || &AA.SSN_KEY_FRA
    print $NID_NAME_LBL    (+1,{C01},40)
    print $BB_DESCR          (,{C02},50)
    print $OTHER_NID_LBL     (,{C03},20)
    print $OTHER_NID         (,{C04},50)

from PS_PERS_NID AA, PS_NID_TYPE1_VW BB
where AA.EMPLID = $EMPLID
and AA.COUNTRY = 'FRA'
and AA.NATIONAL_ID_TYPE <> 'PR'
and BB.COUNTRY = AA.COUNTRY
and BB.NATIONAL_ID_TYPE = AA.NATIONAL_ID_TYPE
end-SELECT
end-procedure Get-Other-NID

!***********************************************************************
!  Get Group Job Data
!***********************************************************************
begin-procedure Get-Group-Job-Data
begin-SELECT ON-ERROR=SQL-Error
JJ.ESTABID  &JJ.ESTABID
    let $ESTABID = &JJ.ESTABID
JJ.COMPANY  &JJ.COMPANY
    let $COMPANY = &JJ.COMPANY

    do Get-Estab-Data

from PS_JOB JJ
where JJ.EMPLID = $EMPLID
and JJ.EMPL_RCD = #EMPL_RCD
and JJ.EFFDT = &A.JOB_EFFDT
and JJ.EFFSEQ =
(
  select MAX(JJ1.EFFSEQ)
  from PS_JOB JJ1
  where JJ1.EMPLID = JJ.EMPLID
  and JJ1.EMPL_RCD = JJ.EMPL_RCD
  and JJ1.EFFDT = JJ.EFFDT
)
end-SELECT
end-procedure Get-Group-Job-Data

!***********************************************************************
!  Get BIAF List Job Data
!***********************************************************************
begin-procedure Get-List-Job-Data
begin-SELECT ON-ERROR=SQL-Error
J.EMPL_RCD &J.EMPL_RCD
    let #EMPL_RCD = &J.EMPL_RCD
J.ESTABID  &J.ESTAB
    let $ESTABID = &J.ESTAB
J.COMPANY  &J.COMPY
    let $COMPANY = &J.COMPY
{DATEOUT-PREFIX}OHD1.ORIG_HIRE_DT{DATEOUT-SUFFIX}  &OHD1.ORIG_HIRE_DT
    let $ORIG_HIRE_DT = &OHD1.ORIG_HIRE_DT

    do Print-Banner1
    do Get-Person-Name
    do Get-Person-Address
    do Get-Person-NID
    do Get-Other-NID
    do Print-Banner2
    do Get-Estab-Data
    do Count-Estab-EE
    do Print-Banner3
    do Get-Fongecif-Data
    do Get-Fongecif-Phone
    print ''      (+2,{C01})
    do Get-Information-Message

from PS_JOB J, PS_PERSON PERSO, PS_CNT_ACTIVE_VW CNT, PS_ORIG_HIR_EMP_VW OHD1
where J.EMPLID = $EMPLID
and OHD1.EMPLID = J.EMPLID
and J.EFFDT =
(
  select MAX(J1.EFFDT)
  from PS_JOB J1
  where J1.EMPLID = J.EMPLID
  and J1.EMPL_RCD = J.EMPL_RCD
  and J1.EFFDT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
)
and J.EFFSEQ =
(
  select MAX(J2.EFFSEQ)
  from PS_JOB J2
  where J2.EMPLID = J.EMPLID
  and J2.EMPL_RCD = J.EMPL_RCD
  and J2.EFFDT = J.EFFDT
)
and J.JOB_INDICATOR = 'P'
and J.EMPL_STATUS = 'A'
and PERSO.EMPLID = J.EMPLID
and OHD1.ORIG_HIRE_DT >= {DATEIN-PREFIX}$FROMDT{DATEIN-SUFFIX}
and OHD1.ORIG_HIRE_DT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
and CNT.EMPLID = J.EMPLID
and CNT.CONTRACT_NUM = J.CONTRACT_NUM
and CNT.EFFDT =
(
  SELECT MAX(EFFDT)
  FROM PS_CNT_ACTIVE_VW CNT_ACTIVE_VW
  WHERE CNT_ACTIVE_VW.EMPLID = CNT.EMPLID
  AND CNT_ACTIVE_VW.CONTRACT_NUM = CNT.CONTRACT_NUM
  AND CNT_ACTIVE_VW.EFFDT <= J.EFFDT
)
and ((CNT.CONTRACT_TYPE = $CONTRACT_TYPE1 and CNT.CONTRACT_TYPE = $CONTRACT_TYPE2 and CNT.CONTRACT_TYPE = $CONTRACT_TYPE3)
or (CNT.CONTRACT_TYPE = $CONTRACT_TYPE1 or CNT.CONTRACT_TYPE = $CONTRACT_TYPE2 or CNT.CONTRACT_TYPE = $CONTRACT_TYPE3))
and
(
  (
    CNT.CONTRACT_END_DT >= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
  )
  OR (CNT.CONTRACT_END_DT IS NULL)
  OR (CNT.CONTRACT_END_DT = {DATEIN-PREFIX}$Temp_Dt{DATEIN-SUFFIX})
)
end-SELECT
end-procedure Get-List-Job-Data


!***********************************************************************
!  Get Establishment Data
!***********************************************************************
begin-procedure Get-Estab-Data
begin-SELECT ON-ERROR=SQL-Error
B.SIREN_CD_FRA                          &B.SIREN_CD_FRA
B.NIC_CODE_FRA                          &B.NIC_CODE_FRA
   let $SIRET = &B.SIREN_CD_FRA || &B.NIC_CODE_FRA
B.APE_INDSTRY_CD_FRA                    &B.APE_INDSTRY_CD_FRA
B.FONGECIF_CD_FRA                       &B.FONGECIF_CD_FRA
E.ESTABID                               &E.ESTABID
{DATEOUT-PREFIX}E.EFFDT{DATEOUT-SUFFIX} &E.EFFDT
E.ADDRESS1                              &E.ADDRESS1
E.ADDRESS2                              &E.ADDRESS2
E.ADDRESS3                              &E.ADDRESS3
E.ADDRESS4                              &E.ADDRESS4
E.CITY                                  &E.CITY
E.DESCR                                 &E.DESCR

   let $FONGECIF_CD_FRA = &B.FONGECIF_CD_FRA

   let $ESTAB_TBL-ADDRESS1 = &E.ADDRESS1
   let $ESTAB_TBL-ADDRESS2 = &E.ADDRESS2
   let $ESTAB_TBL-ADDRESS3 = &E.ADDRESS3
   let $ESTAB_TBL-ADDRESS4 = &E.ADDRESS4
   let $ESTAB_TBL-CITY     = &E.CITY
   let $ESTAB_TBL-DESCR    = &E.DESCR

   do Get_Related_ESTAB_TBL(&E.EFFDT,&E.ESTABID)

   let $ADDR1 = $ESTAB_TBL-ADDRESS1
   let $ADDR2 = $ESTAB_TBL-ADDRESS2
   let $ADDR3 = $ESTAB_TBL-ADDRESS3
   let $ADDR4 = $ESTAB_TBL-ADDRESS4
   let $CITY  = $ESTAB_TBL-CITY
   let $ESTAB_NAME = $ESTAB_TBL-DESCR

   print $ESTAB_NAME_LBL        (+1,{C01},40)
   print $ESTAB_NAME              (,{C02},100)
   print $SIRET_CD_LBL          (+1,{C01},40)
   print $SIRET                   (,{C02},50)
   print $APE_CD_LBL              (,{C03},20)
   print &B.APE_INDSTRY_CD_FRA    (,{C04},20)

from PS_ESTAB_TBL E, PS_ESTAB_TBL_FRA B
where E.ESTABID = $ESTABID
and B.ESTABID = E.ESTABID
and E.EFFDT =
(
  select MAX(EE.EFFDT)
  from PS_ESTAB_TBL EE
  where EE.ESTABID = E.ESTABID
  and EE.EFFDT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
)
and B.EFFDT = E.EFFDT
and E.EFF_STATUS = 'A'
end-SELECT
end-procedure Get-Estab-Data

!***********************************************************************
!  Get FONGECIF Data
!***********************************************************************
begin-procedure Get-Fongecif-Data
begin-SELECT ON-ERROR=SQL-Error
F.VENDOR    &F.FONGECIF_CD_FRA
F.DESCR     &F.DESCR50
F.ADDRESS1  &F.ADDRESS1
F.ADDRESS2  &F.ADDRESS2
F.ADDRESS3  &F.ADDRESS3
F.ADDRESS4  &F.ADDRESS4
F.POSTAL    &F.POSTAL
F.CITY      &F.CITY
F.COUNTRY   &F.COUNTRY

   let $FONGECIF_FRATBL-ADDRESS1 = &F.ADDRESS1
   let $FONGECIF_FRATBL-ADDRESS2 = &F.ADDRESS2
   let $FONGECIF_FRATBL-ADDRESS3 = &F.ADDRESS3
   let $FONGECIF_FRATBL-ADDRESS4 = &F.ADDRESS4
   let $FONGECIF_FRATBL-CITY     = &F.CITY
   let $FONGECIF_FRATBL-DESCR50  = &F.DESCR50

   do Get_Related_TRN_VENDOR_TBL(&F.FONGECIF_CD_FRA)

   let $ADDR1 = $FONGECIF_FRATBL-ADDRESS1
   let $ADDR2 = $FONGECIF_FRATBL-ADDRESS2
   let $ADDR3 = $FONGECIF_FRATBL-ADDRESS3
   let $ADDR4 = $FONGECIF_FRATBL-ADDRESS4
   let $CITY  = $FONGECIF_FRATBL-CITY
   let $FONGECIF_NAME = $TRN_VENDOR_TBL-DESCR

    print $FONGECIF_LBL    (+1,{C01},40)
    print $FONGECIF_NAME     (,{C02},50)
    print $ADDRESS_LBL     (+1,{C01},40)
    print $ADDR1             (,{C02},50)
    print $ADDR2           (+1,{C02},100)
    print $ADDR3           (+1,{C02},100)
    print $ADDR4           (+1,{C02},100)
    print $POSTAL_LBL      (+1,{C01},40)
    print &F.POSTAL          (,{C02},50)
    print $CITY_LBL          (,{C03},20)
    print $CITY              (,{C04},20)

from PS_TRN_VENDOR_TBL F
where F.VENDOR = $FONGECIF_CD_FRA
end-SELECT
end-procedure Get-Fongecif-Data

!***********************************************************************
!  Get FONGECIF Phone
!***********************************************************************
begin-procedure Get-Fongecif-Phone
begin-SELECT ON-ERROR=SQL-Error
PH.PHONE     &PH.PHONE

    print $PHONE_LBL     (+1,{C01},40)
    print &PH.PHONE        (,{C02},50)

from PS_TRN_VENDR_PHONE PH
where PH.VENDOR = $FONGECIF_CD_FRA
and PH.PHONE_TYPE = 'MAIN'
end-SELECT
end-procedure Get-Fongecif-Phone

!***********************************************************************
!  Get ESTABLISHMENT EE Number
!***********************************************************************
begin-procedure Count-Estab-EE
begin-SELECT ON-ERROR=SQL-Error
COUNT(DISTINCT PS.EMPLID) &COUNTER.COUNT

    let #COUNT = &COUNTER.COUNT

    print $ESTAB_COUNT_LBL (,{C05},20)
    print #COUNT           (,{C06},20) EDIT 999999

FROM PS_PERSON PS, PS_JOB JOB, PS_CNT_ACTIVE_VW CNT
WHERE JOB.EMPL_RCD =
(
  SELECT MIN(JOB2.EMPL_RCD)
  FROM PS_JOB JOB2
  WHERE JOB2.EMPLID = JOB.EMPLID
  AND JOB2.EFFDT =
      (
        SELECT MAX(JB2.EFFDT)
        FROM PS_JOB JB2
        WHERE JB2.EMPLID = JOB2.EMPLID
        AND JB2.EMPL_RCD = JOB2.EMPL_RCD
        AND JB2.EFFDT <=  JOB.EFFDT
      )
  AND JOB2.EFFSEQ =
      (
        SELECT MAX(JB22.EFFSEQ)
        FROM PS_JOB JB22
        WHERE JB22.EMPLID = JOB2.EMPLID
        AND JB22.EMPL_RCD = JOB2.EMPL_RCD
        AND JB22.EFFDT = JOB2.EFFDT
      )
  AND
      (
        (
          JOB2.EMPL_STATUS IN ('A','L','P','S','W')
          AND JOB2.JOB_INDICATOR = 'P'
        )
        OR NOT EXISTS
           (
             SELECT 'X'
             FROM PS_JOB JOB3
             WHERE JOB3.EMPLID = JOB2.EMPLID
             AND JOB3.EMPL_RCD <> JOB2.EMPL_RCD
             AND JOB3.EFFDT =
                 (
                   SELECT MAX(JB3.EFFDT)
                   FROM PS_JOB JB3
                   WHERE JB3.EMPLID = JOB3.EMPLID
                   AND JB3.EMPL_RCD = JOB3.EMPL_RCD
                   AND JB3.EFFDT <=  JOB.EFFDT
                 )
             AND JOB3.EFFSEQ =
                 (
                   SELECT MAX(JB33.EFFSEQ)
                   FROM PS_JOB JB33
                   WHERE JB33.EMPLID = JOB3.EMPLID
                   AND JB33.EMPL_RCD = JOB3.EMPL_RCD
                   AND JB33.EFFDT = JOB3.EFFDT
                 )
             AND
                 (
                   (
                     JOB3.EMPL_STATUS IN ('A','L','P','S','W')
                     AND
                     (
                       JOB2.EMPL_STATUS NOT IN ('A','L','P','S','W')
                       OR
                       (JOB3.JOB_INDICATOR = 'P' AND JOB2.JOB_INDICATOR <> 'P')
                     )
                   )
                   OR
                   (
                     JOB3.JOB_INDICATOR = 'P'
                     AND JOB2.JOB_INDICATOR <> 'P'
                     AND JOB2.EMPL_STATUS NOT IN ('A','L','P','S','W')
                   )
                 )
           )
      )
)
AND JOB.EFFDT =
(
  SELECT MAX(JB4.EFFDT)
  FROM PS_JOB JB4
  WHERE JOB.EMPLID = JB4.EMPLID
  AND JOB.EMPL_RCD = JB4.EMPL_RCD
  AND JB4.EFFDT <= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
)
AND JOB.EFFSEQ =
(
  SELECT MAX(JB5.EFFSEQ)
  FROM PS_JOB JB5
  WHERE JOB.EMPLID = JB5.EMPLID
  AND JOB.EMPL_RCD = JB5.EMPL_RCD
  AND JOB.EFFDT = JB5.EFFDT
)
AND JOB.EMPLID = PS.EMPLID
AND JOB.PER_ORG = 'EMP'
AND CNT.EMPLID = PS.EMPLID
AND CNT.CONTRACT_NUM = JOB.CONTRACT_NUM
AND CNT.EFFDT =
(
  SELECT MAX(EFFDT)
  FROM PS_CNT_ACTIVE_VW CNT_ACTIVE_VW
  WHERE CNT_ACTIVE_VW.EMPLID = CNT.EMPLID
  AND CNT_ACTIVE_VW.CONTRACT_NUM = CNT.CONTRACT_NUM
  AND CNT_ACTIVE_VW.EFFDT <= JOB.EFFDT
)
AND
(
  (
    CNT.CONTRACT_END_DT >= {DATEIN-PREFIX}$THRUDT{DATEIN-SUFFIX}
  )
  OR (CNT.CONTRACT_END_DT IS NULL)
  OR (CNT.CONTRACT_END_DT = {DATEIN-PREFIX}$Temp_Dt{DATEIN-SUFFIX})
)
AND JOB.ESTABID = $ESTABID
end-SELECT
end-procedure Count-Estab-EE


!***********************************************************************
!  Get Message Catalog BIAF Messages
!***********************************************************************
begin-procedure Get-Information-Message
begin-SELECT ON-ERROR=SQL-Error
MSG.MESSAGE_SET_NBR  &MSG.MESSAGE_SET_NBR
MSG.MESSAGE_NBR      &MSG.MESSAGE_NBR
MSG.DESCRLONG        &MSG.DESCRLONG

    let #MESSAGE_SET_NBR = &MSG.MESSAGE_SET_NBR
    let #MESSAGE_NBR = &MSG.MESSAGE_NBR
    let $MSG_DESCRLONG = &MSG.DESCRLONG
    let $PSMSGCATDEFN-DESCRLONG = $MSG_DESCRLONG
    do Get_Related_PSMSGCATDEFN(&MSG.MESSAGE_NBR,#MESSAGE_SET_NBR)
    let $MSG_DESCRLONG = $PSMSGCATDEFN-DESCRLONG

    let $MESSAGE = $MSG_DESCRLONG

    while (Length($MESSAGE) > {C07})
          let $MSG_PRINT = substr($MESSAGE,1,{C07})
          print $MSG_PRINT (+1,{C01})
          let #LENGTH = Length($MESSAGE)
          let $MESSAGE = substr($MESSAGE,{C07} + 1,#LENGTH - {C07})
    end-while
    print $MESSAGE (+1,{C01})

from PSMSGCATDEFN MSG
where MSG.MESSAGE_SET_NBR = 1010
and MSG.MESSAGE_NBR >= 1343
and MSG.MESSAGE_NBR <= 1360
order by MSG.MESSAGE_NBR
end-SELECT
end-procedure Get-Information-Message


!***********************************************************************
!  Get the year of a date
!***********************************************************************

begin-procedure Get-Year($DateIn, :#Year)
move 0 to #Year
   if not IsNull($DateIn)
      do Convert-To-DTU-Date($DateIn, $DTUDateIn)
          do dtu-parse-date($DTUDateIn, #Year, #unused, #unused)
   end-if
end-procedure Get-Year($DateIn, :#Year)


#include 'hrctbiaf.sqc'  !Get run control parameter values
#include 'hrgtbiaf.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'
#Include 'getprimj.sqc'  !Routines for selecting EE's primary job
