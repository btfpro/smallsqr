!***********************************************************************
!  PER038NL  : Yearly Report for the Dutch Law SAMEN                   *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:14:40:30                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! Author:   PRN                                                        *
! Date:     092399                                                     *
!***********************************************************************

#include 'setenv.sqc' !Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

#define C1  5
#define C2  60
#define C3  68
#define C4  77
#define C5  90

!***********************************************************************
! Specify the Highest Eduction Level for each category                 *
! Depending on the customer values, these can be overwritten           *
! by the user                                                          *
!***********************************************************************
#define L1  'A'
#define L2  'B'
#define L3  'D'
#define L4  'E'
#define L5  'L'


begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do commit-transaction
  do Reset
  do Stdapi-Term
end-report


begin-heading 5
  let $ReportTitle = 'JAARVERSLAG WET SAMEN ' || $ReportYear
  #Include 'stdhdgtr.sqc'

  print 'Behorende tot doelgroep'      (+2,{c4})
  print 'Aantal'              (+1,{c2},12)
  print 'Aantal'              (,{c4},12)
  print 'Percentage'          (,{c5})

end-heading

begin-procedure Init-Report
  move 'PER038NL' to $ReportID
  do Stdapi-Init

  Do Convert-To-DTU-Date($SysDateTime,$SysDateDTU)
  let #CurrentYear = {ps-substr}($SysDateDTU,1,4)
  let $PreviousYear = edit(#CurrentYear - 1,'9999')
  if $prcs_process_instance = ''
     Do Get-Report-Year
  else
     do Select-Parameters
  end-if
  do Init_Report_Translation ('PER038NL', $language_cd)


  !Compose date in DTU-format and convert to Native format
  let $Year_End_Dt = $ReportYear || '-12-31'
  let $Year_Begin_Dt = $ReportYear || '-01-01'
  Do Convert-From-DTU-Date($Year_End_Dt,$Year_End_Dt)
  Do Convert-From-DTU-Date($Year_Begin_Dt,$Year_Begin_Dt)

end-procedure

begin-procedure Get-Values
  let $language_cd = 'DUT'
  do Get-From-Month-Year
  let $ReportYear = edit(#FromYear,'9999')
end-procedure

begin-procedure Process-Main

 do Select-Employees
 do Print-Report

end-procedure


!***********************************************************************
! Function:    Select-Employees
! Description: Evaluate the employees in report year
!***********************************************************************
Begin-procedure Select-Employees

 let #Empl_Count         = 0  !Number of employees
 let #Minor_Count        = 0  !Number of employees from a Minority Group
 let #Object_Count       = 0  !Number of employees who objected for registration
 let #FullTime_Count     = 0  !Number of fulltime employees
 let #FullTm_Minor_Count = 0  !Number of fulltime employees from a Minority Group

 let #New_Hires          = 0  !Number of new employees
 let #Minor_New_Hires    = 0  !Number of new employees from a Minority Group
 let #Terminations       = 0  !Number of terminated employees
 let #Minor_Terminations = 0  !Number of terminated employees from a Minority Group

 let #LVL1  = 0
 let #LVL1A = 0
 let #LVL2  = 0
 let #LVL2A = 0
 let #LVL3  = 0
 let #LVL3A = 0
 let #LVL4  = 0
 let #LVL4A = 0
 let #LVL5  = 0
 let #LVL5A = 0

CREATE-ARRAY name=LOCATIONS size=100
  field=SETID:char:5
  field=LOCATION:char:10
  field=LVL1:number=0
  field=LVL1A:number=0
  field=LVL2:number=0
  field=LVL2A:number=0
  field=LVL3:number=0
  field=LVL3A:number=0
  field=LVL4:number=0
  field=LVL4A:number=0
  field=LVL5:number=0
  field=LVL5A:number=0

let #L = 0

Begin-Select Distinct
A.EMPLID
D.SAMEN_OBJECT_NLD
  !indication whether the employee objected against registration under the Law SAMEN
  let $objection = &D.SAMEN_OBJECT_NLD

D.SAMEN_IDENT_NLD
  !indication whether employees belongs to a minority group
  let $samen_ind = &D.SAMEN_IDENT_NLD

B.LAST_HIRE_DT
  do Convert-To-DTU-Date(&B.LAST_HIRE_DT,$hire_dtu)
  let $HireYear = {ps-substr}($hire_dtu,1,4)
  if $HireYear = $ReportYear
     let #New_Hires = #New_Hires + 1
     let #Minor_New_Hires = Cond($samen_ind = 'Y', #Minor_New_Hires + 1, #Minor_New_Hires)
  end-if

B.TERMINATION_DT
  if &b.termination_dt = ''
     let $TerminationYear = edit(#CurrentYear + 1,'9999')
     !a default value which is greater than the current year
  else
     do Convert-To-DTU-Date(&b.termination_dt,$term_dtu)
     let $TerminationYear = {ps-substr}($term_dtu,1,4)
  end-if
  if $TerminationYear = $ReportYear
     let #Terminations = #Terminations + 1
     let #Minor_Terminations = Cond($samen_ind = 'Y', #Minor_Terminations + 1, #Minor_Terminations)
  else
     let #Empl_Count = #Empl_Count + 1
  end-if

C.FULL_PART_TIME
  let $full_part_time = &c.full_part_time

C.BUSINESS_UNIT
C.LOCATION
  let $location = &c.location
  let $BU = &c.business_unit
  do Get-Location-Setid
  do Get-Location-Descr

A.HIGHEST_EDUC_LVL
  let $Education_Lvl = &A.HIGHEST_EDUC_LVL

  if $TerminationYear > $ReportYear
     let #Object_Count = Cond($objection = 'Y', #Object_Count + 1, #Object_Count)
     let #Minor_Count = Cond($samen_ind = 'Y', #Minor_Count + 1, #Minor_Count)
     if $full_part_time = 'F'
        let #FullTime_Count = #FullTime_Count + 1
        let #FullTm_Minor_Count = Cond($samen_ind = 'Y', #FullTm_Minor_Count + 1, #FullTm_Minor_Count)
     end-if
     do Update-Locations
  end-if

FROM PS_PERSONAL_DT_FST A, PS_PER_ORG_ASGN_VW B, PS_JOB C  ,PS_DIVERSITY D
WHERE B.LAST_HIRE_DT <= $Year_End_Dt
AND   B.EMPLID = A.EMPLID
And   B.PER_ORG = 'EMP'
AND   D.EMPLID = A.EMPLID
AND  (B.TERMINATION_DT IS NULL
      OR B.TERMINATION_DT > $Year_Begin_Dt)
AND   C.EMPLID = A.EMPLID
AND   C.EMPL_RCD = B.EMPL_RCD
AND   C.REG_REGION IN
     (SELECT REG_REGION
      FROM PS_REG_REGION_TBL
      WHERE COUNTRY = 'NLD')
AND   C.EMPL_RCD =
     (SELECT MIN(EMPL_RCD)
      FROM PS_JOB
      WHERE EMPLID = A.EMPLID
        AND REG_REGION IN
           (SELECT REG_REGION
            FROM PS_REG_REGION_TBL
            WHERE COUNTRY = 'NLD'))
AND   C.EFFDT =
     (SELECT MAX(EFFDT)
      FROM PS_JOB
      WHERE EMPLID = A.EMPLID
        AND EMPL_RCD = B.EMPL_RCD
        AND EFFDT <= $Year_End_Dt)
AND   C.EFFSEQ =
     (SELECT MAX(EFFSEQ)
      FROM PS_JOB
      WHERE EMPLID = A.EMPLID
        AND EMPL_RCD = B.EMPL_RCD
        AND EFFDT = C.EFFDT)
ORDER BY C.BUSINESS_UNIT, C.LOCATION
End-Select

 Do Determine-Percentages

End-procedure Select-Employees

!***********************************************************************
! Function:    Get-Report-Year
! Description: Determine the year of report
!***********************************************************************
Begin-procedure Get-Report-Year

     let $input = 'Y'
     While $input = 'Y'
        !input report year (default is previous year)
        input $ReportYear maxlen=5 'Rapportage jaar (default is vorig jaar)'
        if $ReportYear = ''
           let $input = 'N'
           let $ReportYear = $PreviousYear
        else
           if $ReportYear < '1000' or $ReportYear > $PreviousYear
              !report year needs to be between 1000 and previous year
              let $message = 'Rapportage jaar moet liggen tussen 1000 en ' || $PreviousYear
              display $message
           else
              let $input = 'N'
           end-if
        end-if
     end-while

End-procedure Get-Report-Year


!***********************************************************************
! Function:    Get-Location-Setid
! Description: Determine the Location SetID with the JOB Business Unit
!***********************************************************************
begin-procedure Get-Location-Setid

let $Setid = ''

begin-SELECT
SET_CNTRL_REC.SETID
   let $Setid = &SET_CNTRL_REC.SETID

FROM PS_SET_CNTRL_REC SET_CNTRL_REC
WHERE SET_CNTRL_REC.SETCNTRLVALUE = $BU
AND SET_CNTRL_REC.RECNAME = 'LOCATION_TBL'
end-SELECT

end-procedure


!***********************************************************************
! Function:    Get-Location-Descr
! Description: Determine the Location description
!***********************************************************************
begin-procedure Get-Location-Descr

let $Location_Descr = ''

begin-SELECT
LOC.DESCR
   let $Location_Descr = RTRIM(&LOC.DESCR, ' ')
LOC.COUNTRY
   let $Location_Country = RTRIM(&LOC.COUNTRY, ' ')

FROM PS_LOCATION_TBL LOC
WHERE LOC.SETID = $Setid
AND LOC.LOCATION = $Location
end-SELECT

end-procedure


!***********************************************************************
! Function:    Update-Locations
! Description: Keep track of the counts per setid/location
!***********************************************************************
begin-procedure Update-Locations

let #I = 0
WHILE #I < #L
   GET $SetidX $LocationX from LOCATIONS(#I)
   if $SetidX = $setid and $LocationX = $Location
       goto update
   end-if
   let #I = #I + 1
END-WHILE
PUT $setid $location into LOCATIONS(#I)
let #L = #L + 1

update:
     evaluate $Education_Lvl
     when <= {L1}
        let #LVL1 = #LVL1 + 1
        array-add 1 to LOCATIONS(#I) LVL1
        if $samen_ind = 'Y'
          let #LVL1A = #LVL1A + 1
          array-add 1 to LOCATIONS(#I) LVL1A
        end-if
        break
     when <= {L2}
        let #LVL2 = #LVL2 + 1
        array-add 1 to LOCATIONS(#I) LVL2
        if $samen_ind = 'Y'
          let #LVL2A = #LVL2A + 1
          array-add 1 to LOCATIONS(#I) LVL2A
        end-if
        break
     when <= {L3}
        let #LVL3 = #LVL3 + 1
        array-add 1 to LOCATIONS(#I) LVL3
        if $samen_ind = 'Y'
          let #LVL3A = #LVL3A + 1
          array-add 1 to LOCATIONS(#I) LVL3A
        end-if
        break
     when <= {L4}
        let #LVL4 = #LVL4 + 1
        array-add 1 to LOCATIONS(#I) LVL4
        if $samen_ind = 'Y'
          let #LVL4A = #LVL4A + 1
          array-add 1 to LOCATIONS(#I) LVL4A
        end-if
        break
     when-other
        let #LVL5 = #LVL5 + 1
        array-add 1 to LOCATIONS(#I) LVL5
        if $samen_ind = 'Y'
          let #LVL5A = #LVL5A + 1
           array-add 1 to LOCATIONS(#I) LVL5A
        end-if
     end-evaluate

end-procedure


!***********************************************************************
! Function:    Print-Locations
! Description: Print minority counts per location / education level
!***********************************************************************
begin-procedure Print-Locations

let #I = 0
let #MAX-L = #L - 1
WHILE #I <= #MAX-L
   GET $Setid $Location #LVL1 #LVL1A #LVL2 #LVL2A #LVL3 #LVL3A #LVL4 #LVL4A #LVL5 #LVL5A
   from LOCATIONS(#I) SETID LOCATION LVL1 LVL1A LVL2 LVL2A LVL3 LVL3A LVL4 LVL4A LVL5 LVL5A

   do Get-Location-Descr
   if $Location_Country <> 'NLD'
       goto end-while
   end-if
   if $Location_Descr = ''
     let $Location_Descr = $Setid || '-' || $Location
   end-if
   do Determine-Percentages-Location
   print $Location_Descr (+4,{c1})
   do Print-Location

   end-while:

   let #I = #I + 1

END-WHILE

end-procedure Print-Locations


!***********************************************************************
! Function:    Determine-Percentages
! Description: Determine summary percentages
!***********************************************************************
Begin-procedure Determine-Percentages

 let $Minor_Perc =             edit(0,'999.99')
 let $FullTime_Perc =            edit(0,'999.99')
 let $PartTime_Perc =           edit(0,'999.99')
 let $FullTm_Minor_Perc =        edit(0,'999.99')
 let $PartTm_Minor_Perc =       edit(0,'999.99')
 let $Minor_New_Hires_Perc =  edit(0,'999.99')
 let $Minor_Terminations_Perc = edit(0,'999.99')

 let #PartTime_Count = #Empl_Count - #FullTime_Count
 let #PartTime_Minor_Count = #Minor_Count - #FullTm_Minor_Count
 if #Empl_Count <> 0
   let #Minor_Perc = (#Minor_Count / #Empl_Count) * 100
   let $Minor_Perc = edit(#Minor_Perc,'999.99')
   let #FullTime_Perc = (#FullTime_Count / #Empl_Count) * 100
   let $FullTime_Perc = edit(#FullTime_Perc,'999.99')
   let #PartTime_Perc = (#PartTime_Count / #Empl_Count) * 100
   let $PartTime_Perc = edit(#PartTime_Perc,'999.99')
 end-if
 if #Minor_Count <> 0
   let #FullTm_Minor_Perc = (#FullTm_Minor_Count / #Empl_Count) * 100
   let $FullTm_Minor_Perc = edit(#FullTm_Minor_Perc,'999.99')
   let #PartTm_Minor_Perc = (#PartTime_Minor_Count / #Empl_Count) * 100
   let $PartTm_Minor_Perc = edit(#PartTm_Minor_Perc,'999.99')
 end-if
 if #New_Hires <> 0
   let #Minor_New_Hires_Perc = (#Minor_New_Hires / #New_Hires) * 100
   let $Minor_New_Hires_Perc = edit(#Minor_New_Hires_Perc,'999.99')
 end-if
 if #Terminations <> 0
   let #Minor_Terminations_Perc = (#Minor_Terminations / #Terminations) * 100
   let $Minor_Terminations_Perc = edit(#Minor_Terminations_Perc,'999.99')
 end-if

End-procedure Determine-Percentages


!***********************************************************************
! Function:    Determine-Percentages-Location
! Description: Determine the summary percentages per Location
!***********************************************************************
Begin-procedure Determine-Percentages-Location

 let $LVL1P = edit(0,'999.99')
 let $LVL2P = edit(0,'999.99')
 let $LVL3P = edit(0,'999.99')
 let $LVL4P = edit(0,'999.99')
 let $LVL5P = edit(0,'999.99')

if #LVL1 <> 0
 let #LVL1P = (#LVL1A / #LVL1) * 100
 let $LVL1P = edit(#LVL1P, '999.99')
end-if
if #LVL2 <> 0
 let #LVL2P = (#LVL2A / #LVL2) * 100
 let $LVL2P = edit(#LVL2P, '999.99')
end-if
if #LVL3 <> 0
 let #LVL3P = (#LVL3A / #LVL3) * 100
 let $LVL3P = edit(#LVL3P, '999.99')
end-if
if #LVL4 <> 0
 let #LVL4P = (#LVL4A / #LVL4) * 100
 let $LVL4P = edit(#LVL4P, '999.99')
end-if
if #LVL5 <> 0
 let #LVL5P = (#LVL5A / #LVL5) * 100
 let $LVL5P = edit(#LVL5P, '999.99')
end-if

End-procedure Determine-Percentages-Location


!***********************************************************************
! Function:    Print-Report
! Description: Print the Report
!***********************************************************************
Begin-procedure Print-Report

print 'PERSONEELSBESTAND TOTAAL'  (+1,1)
print '(%) T.o.v. aantal personen in dienst' (+1,1)

print 'Personen in dienst op 31 december' (+2,{c1},54)
print #Empl_Count                         (,{c2},6)         edit 999999
print #Minor_Count                       (,{c4},6)         edit 999999
print $Minor_Perc                      (,{c5})
print '%'                                    (,+1)

print 'Personen met een voltijd-dienstverband'  (+2,{c1},54)
print #FullTime_Count                      (,{c2},6)         edit 999999
print '('                              (,+1)
print $FullTime_Perc                      ()
print '%)'                             ()
print #FullTm_Minor_Count             (,{c4},6)         edit 999999
print $FullTm_Minor_Perc            (,{c5})
print '%'                                   (,+1)

print 'Personen met een deeltijd-dienstverband' (+2,{c1},54)
print #PartTime_Count                   (,{c2},6)         edit 999999
print '('                            (,+1)
print $PartTime_Perc                   ()
print '%)'                           ()
print #PartTime_Minor_Count          (,{c4},6)         edit 999999
print $PartTm_Minor_Perc          (,{c5})
print '%'                                   (,+1)

print 'Personen die bezwaar hebben aangetekend' (+2,{c1},54)
print #Object_Count                   (,{c2},6)         edit 999999

print 'GEGEVENS PERSONEELSVERLOOP'      (+4,1)
print '(%) T.o.v. aantal personen in/uit dienst getreden' (+1,1)

print 'Personen in dienst getreden'     (+2,{c1},54)
print #New_Hires                  (,{c2},6)         edit 999999
print #AllochNetInDienst        (,{c4},6)         edit 999999
print $Minor_New_Hires_Perc  (,{c5})
print '%'                                    (,+1)

print 'Personen uit dienst getreden'    (+2,{c1},54)
print #Terminations                 (,{c2},6)         edit 999999
print #AllochNetUitDienst       (,{c4},6)         edit 999999
print $Minor_Terminations_Perc (,{c5})
print '%'                                     (,+1)

print 'GEGEVENS PERSONEELSBESTAND NAAR FUNCTIENIVEAU'  (+4,1)
print '(%) T.o.v. aantal personen per functieniveau' (+1,1)

do Determine-Percentages-Location
do Print-Location
do Print-Legend

new-page

print 'GEGEVENS PERSONEELSBESTAND NAAR FUNCTIENIVEAU'  (+1,1)
print '(%) T.o.v. aantal personen per functieniveau' (+1,1)

print 'Totaal aantal locaties:' (+2,1)
print #L                    ()               edit 999

do Print-Locations

End-procedure Print-Report

!***********************************************************************
! Function:    Print-Location
! Description: Print report per Location
!***********************************************************************
Begin-procedure Print-Location

print 'Functieniveau I'     (+2,{c1},54)
print #LVL1                 (,{c2},6)         edit 999999
print #LVL1A       (,{c4},6)         edit 999999
print $LVL1P (,{c5})
print '%'                                     (,+1)

print 'Functieniveau II'     (+2,{c1},54)
print #LVL2                 (,{c2},6)         edit 999999
print #LVL2A       (,{c4},6)         edit 999999
print $LVL2P (,{c5})
print '%'                                     (,+1)

print 'Functieniveau III'     (+2,{c1},54)
print #LVL3                 (,{c2},6)         edit 999999
print #LVL3A       (,{c4},6)         edit 999999
print $LVL3P (,{c5})
print '%'                                     (,+1)


print 'Functieniveau IV'     (+2,{c1},54)
print #LVL4                 (,{c2},6)         edit 999999
print #LVL4A       (,{c4},6)         edit 999999
print $LVL4P (,{c5})
print '%'                                     (,+1)

print 'Functieniveau V'     (+2,{c1},54)
print #LVL5                 (,{c2},6)         edit 999999
print #LVL5A       (,{c4},6)         edit 999999
print $LVL5P (,{c5})
print '%'                                     (,+1)

End-procedure Print-Location

!***********************************************************************
! Function:    Print-Legend
! Description: Print the descriptions of the Education Levels
!***********************************************************************
Begin-procedure Print-Legend

print 'Legenda:'            (+4,1)
let $FieldName = 'HIGHEST_EDUC_LVL'

Begin-Select Distinct
X.FIELDVALUE

   let $FieldValue = RTrim(&X.FieldValue, ' ')
   do Read-Translate-Table
   evaluate $FieldValue
   when <= {L1}
      let $Level1 = $Level1 || $Sep1 || RTrim($XlatLongName, ' ')
      let $Sep1 = ';'
      break
   when <= {L2}
      let $Level2 = $Level2 || $Sep2 || RTrim($XlatLongName, ' ')
      let $Sep2 = ';'
      break
   when <= {L3}
      let $Level3 = $Level3 || $Sep3 || RTrim($XlatLongName, ' ')
      let $Sep3 = ';'
      break
   when <= {L4}
      let $Level4 = $Level4 || $Sep4 || RTrim($XlatLongName, ' ')
      let $Sep4 = ';'
      break
   when-other
      let $Level5 = $Level5 || $Sep5 || RTrim($XlatLongName, ' ')
      let $Sep5 = ';'
      break
   end-evaluate

FROM PSXLATITEM X
WHERE X.FIELDNAME = $FieldName
AND X.EFF_STATUS = 'A'
ORDER BY X.FIELDVALUE ASC
End-Select

print 'Functieniveau I   -' (+2,{c1})
do Print-Levels($Level1)

print 'Functieniveau II  -' (+1,{c1})
do Print-Levels($Level2)

print 'Functieniveau III -' (+1,{c1})
do Print-Levels($Level3)

print 'Functieniveau IV  -' (+1,{c1})
do Print-Levels($Level4)

print 'Functieniveau V   -' (+1,{c1})
do Print-Levels($Level5)

End-procedure Print-Legend

Begin-procedure Print-Levels($Levels)

let #loc1 = 1
find ';' in $levels #loc1 #loc2
while #loc2 > -1
    let $level = substr($levels, #loc1, #loc2-#loc1+1)
    print $level (,25)
    let #loc1 = #loc2 + 2
    find ';' in $levels #loc1 #loc2
    position (+1)
end-while
let $level = substr($levels, #loc1, length($Levels)-#loc1+1)
print $level (,25)

End-procedure Print-Levels


#include 'stdapi.sqc'    !Routine to update Run status
#include 'hrgetnld.sqc'  !Get the reportparameters (NL)
#Include 'reset.sqc'     !Reset printer procedure
#include 'hrctlnld.sqc'  !Get run control parameter values (NL)
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date and time calculations
#Include 'number.sqc'    !Routines to format numbers
#Include 'sqrtrans.sqc'
#Include 'readxlat.sqc'  !Read-Translate-Table procedure

