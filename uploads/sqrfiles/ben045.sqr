!*****************************************
! Report Name: BEN045.SQR - Billing Audit
!*****************************************
!***********************************************************************
!                                                                      *
! Confidentiality Information:                                         *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:44:47                                 
!       $Release:  HR9                                                 
!      $Revision:  102                                                 
!                                                                      *
!***********************************************************************


#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define c1_emplid                   1
#define c1_name                    14
#define c1_posting_date            29
#define c1_posting_sequence        40
#define c1_bill_per_cd             49
#define c1_plan_type               58
#define c1_plan_type_desc          64
#define c1_benefit_program         77
#define c1_benefit_plan            86
#define c1_benefit_plan_desc       95
#define c1_coverage_cd            127
#define c1_total_charge           134
#define c1_total_charge_desc      137
#define c1_amount_due             145
#define c1_amount_due_desc        148
#define c1_open_credit            156
#define c1_open_credit_desc       159

#define c2_emplid                   1
#define c2_name                    14
#define c2_EMPL_RCD               56
#define c2_plan_type               66
#define c2_cobra_event_id          72
#define c2_effdt                   82
#define c2_percent_calc            93
#define c2_rate_percent           102
#define c2_flat_calc              107
#define c2_rate_amount            113
#define c2_rate_amount_desc       117
#define c2_message                125

#define c3_emplid                   1
#define c3_name                    13
#define c3_posting_date            65
#define c3_posting_sequence        76
#define c3_bill_per_cd             85
#define c3_plan_type               94
#define c3_total_charge           100
#define c3_total_charge_desc      104
#define c3_amount_due             111
#define c3_amount_due_desc        114
#define c3_open_credit            122
#define c3_open_credit_desc       125
#define c3_message                133

#define c4_emplid                   1
#define c4_name                    13
#define c4_effdt                   66
#define c4_message                 77

#define c5_emplid                   1
#define c5_name                    14
#define c5_EMPL_RCD               66
#define c5_plan_type               76
#define c5_plan_type_desc          82
#define c5_cobra_event_id          95
#define c5_effdt                  105
#define c5_Billing_Reason         116
#define c5_percent_calc           128
#define c5_rate_percent           137
#define c5_rate_qualifier         142
#define c5_flat_calc              154
#define c5_rate_amount            160
#define c5_rate_amount_desc       164

#define amt_mask1                 99,999.99
#define amt_mask2                 999,999.99
#define amt_mask3                 999
#define amt_mask4                 000
#define amt_mask5                 00


!************
Begin-Program
!************

  do Init-Report

  display 'Report Begin at ' noline
  do Display-time

  do Process-Main

  display 'Report Ended at ' noline
  do Display-time

  do Reset
  do StdAPI-Term

End-Program


!***************************
Begin-Procedure Init-Report
!***************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do StdAPI-Init

  let $RepDate = $AsOfToday

  let $ReportID    = 'BEN045'
  do Get-Report-Language
  let $ReportTitle  = $BEN045-REPORTTITLE

  display $ReportID   NoLine
  display ': '        NoLine
  display $ReportTitle
  display ' '

End-Procedure

!**********************************
! This procedure is used to read language-dependent text from the database.
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN045 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN045', 'REPORT_TITLE', $BEN045-REPORTTITLE, #CW)
  do Get_Field_Information ('BEN045', 'CHARGE',       $BEN045-CHARGE,      #CW)
  do Get_Field_Information ('BEN045', 'POSTING',      $BEN045-POSTING,     #CW)
  do Get_Field_Information ('BEN045', 'OPEN',         $BEN045-OPEN,        #CW)
  do Get_Field_Information ('BEN045', 'REC_NO',       $BEN045-REC-NO,      #CW)
  do Get_Field_Information ('BEN045', 'ERR_MSG',      $BEN045-ERR-MSG,     #CW)
  do Get_Field_Information ('BEN045', 'HOLD_TYPE',    $BEN045-HOLD-TYPE,   #CW)
  do Get_Field_Information ('BEN045', 'CALC',         $BEN045-CALC,        #CW)
  do Get_Field_Information ('BEN045', 'NO_ERR_FOUND', $BEN045-NO-ERR-FOUND,#CW)
  do Get_Field_Information ('BEN045', 'END_OF_SECTN', $BEN045-END-OF-SECTN,#CW)
  do Get_Field_Information ('BEN045', 'OPEN_CHRG',    $BEN045-OPEN-CHRG,   #CW)
  do Get_Field_Information ('BEN045', 'OPEN_CRDS',    $BEN045-OPEN_CRDS,   #CW)
  do Get_Field_Information ('BEN045', 'ERR_MSG01',    $BEN045-ERR-MSG01,   #CW)
  do Get_Field_Information ('BEN045', 'ERR_MSG02',    $BEN045-ERR-MSG02,   #CW)
  do Get_Field_Information ('BEN045', 'ERR_MSG03',    $BEN045-ERR-MSG03,   #CW)
  do Get_Field_Information ('BEN045', 'INFO_MESS_01', $BEN045-INFO-MESS_01,#CW)
  do Get_Field_Information ('BEN045', 'INFO_MESS_02', $BEN045-INFO-MESS_02,#CW)
  do Get_Field_Information ('BEN045', 'BILL_HOLD',    $BEN045-BILL-HOLD,   #CW)
  do Get_Field_Information ('BEN045', 'STMT_HOLD',    $BEN045-STMT-HOLD,   #CW)
  do Get_Field_Information ('BEN045', 'REPORT_SUBT1', $BEN045-REPORT-ST1,  #CW)
  do Get_Field_Information ('BEN045', 'REPORT_SUBT2', $BEN045-REPORT-ST2,  #CW)
  do Get_Field_Information ('BEN045', 'REPORT_SUBT3', $BEN045-REPORT-ST3,  #CW)
  do Get_Field_Information ('BEN045', 'REPORT_SUBT4', $BEN045-REPORT-ST4,  #CW)
  do Get_Field_Information ('BEN045', 'REPORT_SUBT5', $BEN045-REPORT-ST5,  #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'PLAN',         $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',   'COVERAGE',     $BEN1-COVERAGE,      #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',      $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',   'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'TYPE',         $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'CODE',         $BEN1-CODE,          #CW)
  do Get_Field_Information ('BEN1',   'AMT',          $BEN1-AMT,           #CW)
  do Get_Field_Information ('BEN1',   'NAME',         $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',   'DUE',          $BEN1-DUE,           #CW)
  do Get_Field_Information ('BEN1',   'BILLING',      $BEN1-BILLING,       #CW)
  do Get_Field_Information ('BEN1',   'TOTAL',        $BEN1-TOTAL,         #CW)
  do Get_Field_Information ('BEN1',   'DESCR',        $BEN1-DESCR,         #CW)
  do Get_Field_Information ('BEN1',   'SEQ',          $BEN1-SEQ,           #CW)
  do Get_Field_Information ('BEN1',   'PROGRAM',      $BEN1-PROGRAM,       #CW)
  do Get_Field_Information ('BEN1',   'PERIOD',       $BEN1-PERIOD,        #CW)
  do Get_Field_Information ('BEN1',   'CREDIT',       $BEN1-CREDIT,        #CW)
  do Get_Field_Information ('BEN1',   'REASON',       $BEN1-REASON,        #CW)
  do Get_Field_Information ('BEN1',   'EVENT_ID3',    $BEN1-EVENT-ID3,     #CW)
  do Get_Field_Information ('BEN1',   'FLAT',         $BEN1-FLAT,          #CW)
  do Get_Field_Information ('BEN1',   'EFFECTIVE',    $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'PERCENT',      $BEN1-PERCENT ,      #CW)
  do Get_Field_Information ('BEN1',   'COBRA',        $BEN1-COBRA,         #CW)

End-Procedure

!***************
Begin-Heading 7
!***************

  let $AsOfDate = $RepDate

#Include 'stdhtr03.sqc'

 evaluate $Report_Type
    when = 'A'
      print $BEN1-EMPLOYEE       (+2,{c1_emplid},12)
      print $BEN1-EMPLOYEE       (0,{c1_name},14)
      print $BEN045-POSTING      (0,{c1_posting_date},10)
      print $BEN045-POSTING      (0,{c1_posting_sequence},8)
      print $BEN1-BILLING        (0,{c1_bill_per_cd},8)
      print $BEN1-PLAN           (0,{c1_plan_type},4)
      print $BEN1-BENEFIT        (0,{c1_benefit_program},7)
      print $BEN1-BENEFIT        (0,{c1_benefit_plan},7)
      print $BEN1-COVERAGE       (0,{c1_coverage_cd},8)
      print $BEN1-TOTAL          (0,{c1_total_charge_desc},9)
      print $BEN1-AMT            (0,{c1_amount_due_desc},9)
      print $BEN045-OPEN         (0,{c1_open_credit_desc},9)

      print $BEN1-ID             (+1,{c1_emplid},12)
      print $BEN1-NAME           (0,{c1_name},14)
      print $BEN1-DATE           (0,{c1_posting_date},10)
      print $BEN1-SEQ            (0,{c1_posting_sequence},8)
      print $BEN1-PERIOD         (0,{c1_bill_per_cd},8)
      print $BEN1-TYPE           (0,{c1_plan_type},4)
      print $BEN1-DESCR          (0,{c1_plan_type_desc},12)
      print $BEN1-PROGRAM        (0,{c1_benefit_program},7)
      print $BEN1-PLAN           (0,{c1_benefit_plan},7)
      print $BEN1-DESCR          (0,{c1_benefit_plan_desc},30)
      print $BEN1-CODE           (0,{c1_coverage_cd},8)
      print $BEN045-CHARGE       (0,{c1_total_charge_desc},9)
      print $BEN1-DUE            (0,{c1_amount_due_desc},9)
      print $BEN1-CREDIT         (0,{c1_open_credit_desc},9)

      break

    when = 'B'
      Print $BEN1-EMPLOYEE         (+2,{c2_emplid},12)
      Print $BEN1-EMPLOYEE         (0,{c2_name},40)
      Print $BEN1-EMPLOYEE         (0,{c2_EMPL_RCD},8)
      Print $BEN1-PLAN             (0,{c2_plan_type},4)
      Print $BEN1-COBRA            (0,{c2_cobra_event_id},8)
      Print $BEN1-EFFECTIVE        (0,{c2_effdt},10)
      Print $BEN1-PERCENT          (0,{c2_percent_calc},9)
      Print $BEN1-FLAT             (0,{c2_flat_calc},9)
      Print $BEN1-FLAT             (0,{c2_rate_amount_desc},7)

      Print $BEN1-ID               (+1,{c2_emplid},12)
      Print $BEN1-NAME             (0,{c2_name},40)
      Print $BEN045-REC-NO         (0,{c2_EMPL_RCD},8)
      Print $BEN1-TYPE             (0,{c2_plan_type},4)
      Print $BEN1-EVENT-ID3        (0,{c2_cobra_event_id},8)
      Print $BEN1-DATE             (0,{c2_effdt},10)
      Print $BEN045-CALC           (0,{c2_percent_calc},9)
      Print '  %'                  (0,{c2_rate_percent},3)
      Print $BEN045-CALC           (0,{c2_flat_calc},9)
      Print $BEN1-AMT              (0,{c2_rate_amount_desc},7)
      Print $BEN045-ERR-MSG        (0,{c2_message})

      break

    when = 'C'
      Print $BEN1-EMPLOYEE         (+2,{c3_emplid},11)
      Print $BEN1-EMPLOYEE         (0,{c3_name},50)
      Print $BEN045-POSTING        (0,{c3_posting_date},10)
      Print $BEN045-POSTING        (0,{c3_posting_sequence},8)
      Print $BEN1-BILLING          (0,{c3_bill_per_cd},8)
      Print $BEN1-PLAN             (0,{c3_plan_type},9)
      Print $BEN1-TOTAL            (0,{c3_total_charge_desc},9)
      Print $BEN1-AMT              (0,{c3_amount_due_desc},10)
      Print $BEN045-OPEN           (0,{c3_open_credit_desc},7)

      Print $BEN1-ID               (+1,{c3_emplid},11)
      Print $BEN1-NAME             (0,{c3_name},50)
      Print $BEN1-DATE             (0,{c3_posting_date},10)
      Print $BEN1-SEQ              (0,{c3_posting_sequence},8)
      Print $BEN1-PERIOD           (0,{c3_bill_per_cd},8)
      Print $BEN1-TYPE             (0,{c3_plan_type},9)
      Print $BEN045-CHARGE         (0,{c3_total_charge_desc},9)
      Print $BEN1-DUE              (0,{c3_amount_due_desc},10)
      Print $BEN1-CREDIT           (0,{c3_open_credit_desc},7)
      Print $BEN045-ERR-MSG        (0,{c3_message},20)

      break

    when = 'D'
      Print $BEN1-EMPLOYEE         (+2,{c4_emplid},11)
      Print $BEN1-EMPLOYEE         (0,{c4_name},50)
      Print $BEN1-EFFECTIVE        (0,{c4_effdt},10)

      Print $BEN1-ID               (+1,{c4_emplid},11)
      Print $BEN1-NAME             (0,{c4_name},50)
      Print $BEN1-DATE             (0,{c4_effdt},10)
      Print $BEN045-HOLD-TYPE      (0,{c4_message},20)

      break

    when = 'E'
      Print $BEN1-EMPLOYEE         (+2,{c5_emplid},12)
      Print $BEN1-EMPLOYEE         (0,{c5_name},50)
      Print $BEN1-EMPLOYEE         (0,{c5_EMPL_RCD},8)
      Print $BEN1-PLAN             (0,{c5_plan_type},4)
      Print $BEN1-COBRA            (0,{c5_cobra_event_id},8)
      Print $BEN1-EFFECTIVE        (0,{c5_effdt},10)
      Print $BEN1-BILLING          (0,{c5_billing_reason},10)
      Print $BEN1-PERCENT          (0,{c5_percent_calc},10)
      Print $BEN1-PERCENT          (0,{c5_rate_qualifier},11)
      Print $BEN1-FLAT             (0,{c5_flat_calc},9)
      Print $BEN1-FLAT             (0,{c5_rate_amount_desc},9)

      Print $BEN1-ID               (+1,{c5_emplid},12)
      Print $BEN1-NAME             (0,{c5_name},50)
      Print $BEN045-REC-NO         (0,{c5_EMPL_RCD},8)
      Print $BEN1-TYPE             (0,{c5_plan_type},4)
      Print $BEN1-DESCR            (0,{c5_plan_type_desc},12)
      Print $BEN1-EVENT-ID3        (0,{c5_cobra_event_id},8)
      Print $BEN1-DATE             (0,{c5_effdt},10)
      Print $BEN1-REASON           (0,{c5_billing_reason},10)
      Print $BEN045-CALC           (0,{c5_percent_calc},10)
      Print '  %'                  (0,{c5_rate_percent},3)
      Print $BEN1-TYPE             (0,{c5_rate_qualifier},11)
      Print $BEN045-CALC           (0,{c5_flat_calc},9)
      Print $BEN1-AMT              (0,{c5_rate_amount_desc},9)

      break

  end-evaluate

End-Heading


!****************************
Begin-Procedure Process-Main
!****************************

  do Open-Charge-Open-Credit
  new-page
  do Active-Audit
  new-page
  do Inactive-Audit
  new-page
  do Hold-Audit
  new-page
  do Hold-Enroll-Audit

End-Procedure


!***************************************
Begin-Procedure Open-Charge-Open-Credit
!***************************************

  let $ReportTitle = $BEN045-REPORT-ST1
  let $Entries_Found = 'N'
  let $Report_Type = 'A'

Begin-Select
A.EMPLID          () On-Break Print=Never
                     Before=New-Emp-Info
                     After=Process-Credits
                     Save=$Hold_Emplid

B.PERIOD_END_DT

    do Format-Datetime(&B.Period_End_Dt, $Posting_Date, {DEFDATE}, '', '')
    print $Posting_Date                        (+1,{c1_posting_date},10)

A.BILL_PER_CD                                   (0,{c1_bill_per_cd},8)
A.PLAN_TYPE                                     (0,{c1_plan_type},4)

  move 'PLAN_TYPE' to $Fieldname
  move &A.Plan_Type to $Fieldvalue
  move &B.Period_End_Dt to $AsOfDate
  do Read-Translate-Table
  print $XlatShortName                          (0,{c1_plan_type_desc},12)

A.BENEFIT_PROGRAM                               (0,{c1_benefit_program},7)
A.BENEFIT_PLAN                                  (0,{c1_benefit_plan},7)

  if &A.Benefit_Plan <> ' '
    move &A.Benefit_Plan to $Benefit_Plan
    move &A.Plan_Type to $Plan_Type
    move &B.Period_End_Dt to $AsOfDate
    do Get-Benefit-Name
    print $BenefitName                          (0,{c1_benefit_plan_desc},30)
  end-if

A.DED_SLSTX_CLASS

  if &A.Ded_Slstx_Class <> ' ' and &A.Ded_Slstx_Class <> 'B'
    move 'DED_SLSTX_CLASS' to $Fieldname
    move &A.Ded_Slstx_Class to $Fieldvalue
    move &B.Period_End_Dt to $AsOfDate
    do Read-Translate-Table
    print $XlatShortName                        (0,{c1_coverage_cd},8)
  end-if

A.COVRG_CD

  if &A.Covrg_Cd <> ' '
    print &A.Covrg_Cd                           (0,{c1_coverage_cd},8)
  end-if

A.TOTAL_CHARGE                                  (0,{c1_total_charge}) edit {amt_mask1}
A.AMOUNT_DUE                                    (0,{c1_amount_due})   edit {amt_mask1}

    let $Entries_Found = 'Y'

From  PS_BEN_BI_CHG_VW A,
      PS_BEN_BI_CALENDAR B
Where A.BILL_PER_CD = B.BILL_PER_CD
And   A.AMOUNT_DUE <> 0
And   Exists
         (SELECT 'X'
          FROM  PS_BEN_BI_DETAIL B
          WHERE B.EMPLID = A.EMPLID
          AND   B.DETAIL_TYPE = 'EXCS'
          AND   B.PAY_AMT <> 0)
Order By A.EMPLID,
A.BILL_PER_CD,
A.PLAN_TYPE
End-Select

  if $Entries_Found = 'N'
    print $BEN045-NO-ERR-FOUND (+15,1) center
    print ' '                  (+7,1)
  end-if

  print $BEN045-END-OF-SECTN   (+3,1) center

End-Procedure


!****************************
Begin-Procedure New-Emp-Info
!****************************

  let $Emplid = &A.Emplid
  do Get-Name

  print &A.Emplid                      (+2,{c1_emplid},12)
  print &Z.Name                        (0,{c1_name},14)
  print $BEN045-OPEN-CHRG              (+1,{c1_name},14)

End-Procedure


!*******************************
Begin-Procedure Process-Credits
!*******************************

  print $BEN045-OPEN-CRDS              (+2,{c1_name},14)

Begin-Select
C.POSTING_DATE

    do Format-Datetime(&C.Posting_Date, $Posting_Date, {DEFDATE}, '', '')
    print $Posting_Date                        (+1,{c1_posting_date},10)

C.POSTING_SEQUENCE                              (0,{c1_posting_sequence},8) edit {amt_mask5}
D.PAY_AMT                                       (0,{c1_open_credit})   edit {amt_mask1}

From  PS_BEN_BI_PAYMENT C,
      PS_BEN_BI_DETAIL D
Where C.EMPLID = D.EMPLID
And   C.BILL_PAY_ID = D.BILL_PAY_ID
And   D.DETAIL_TYPE = 'EXCS'
And   D.PAY_AMT <> 0
Order By C.POSTING_DATE
End-Select

End-Procedure


!****************************
Begin-Procedure Active-Audit
!****************************

  let $ReportTitle = $BEN045-REPORT-ST2
  let $Entries_Found = 'N'
  let $Report_Type = 'B'

Begin-Select
H.EMPLID
H.EMPL_RCD
H.PLAN_TYPE
H.COBRA_EVENT_ID
H.EFFDT
H.BILLING_STATUS
H.BILLING_REASON
H.PERCENT_CALC
H.FLAT_CALC
H.RATE_QUALIFIER
H.RATE_PERCENT
H.RATE_AMOUNT
H.EVENT_ID

    if &H.Percent_Calc = 'Y' and
       &H.Rate_Percent = 0
!---  let $Err_Message = 'Percent Calc Enrollment with no Percentage'
      let $Err_Message = $BEN045-ERR-MSG01
      do Print-Error
      let $Entries_Found = 'Y'
    end-if

    if &H.Flat_Calc = 'Y' and
       &H.Rate_Amount = 0
!---  let $Err_Message = 'Flat Amount Enrollment with no Flat Amount'
      let $Err_Message =  $BEN045-ERR-MSG02
      do Print-Error
      let $Entries_Found = 'Y'
    end-if

    if &H.Flat_Calc <> 'Y' or
       &H.Percent_Calc = 'Y' or
       &H.Billing_Reason <> 'A'

      let $Active_Enroll = 'N'
      do Check-Enrollment

      if $Active_Enroll = 'N'
!---    let $Err_Message = 'Active Billing with Inactive Coverage'
        let $Err_Message =  $BEN045-ERR-MSG03
        do Print-Error
        let $Entries_Found = 'Y'
      end-if

    end-if

From  PS_BEN_BI_ENR_EFDT H
Where H.BILLING_STATUS <> 'I'
And   H.EFFDT =
          (SELECT MAX(HH.EFFDT)
           FROM  PS_BEN_BI_ENR_EFDT HH
           WHERE HH.EMPLID = H.EMPLID
           AND   HH.EMPL_RCD = H.EMPL_RCD
           AND   HH.PLAN_TYPE = H.PLAN_TYPE
           AND   HH.COBRA_EVENT_ID = H.COBRA_EVENT_ID
           AND   HH.EFFDT <= $RepDate)
Order By H.EMPLID,
H.EMPL_RCD,
H.PLAN_TYPE,
H.COBRA_EVENT_ID,
H.EFFDT
End-Select

  if $Entries_Found = 'N'
    print $BEN045-NO-ERR-FOUND (+15,1) center
    print ' '                  (+7,1)
  end-if

  print $BEN045-END-OF-SECTN   (+3,1) center

End-Procedure


!********************************
Begin-Procedure Check-Enrollment
!********************************

  let $Plan_Category = {PS-SUBSTR}(&H.Plan_Type,1,1)

  evaluate $Plan_Category
     when = 'A'
      do Check-Simple
      break
    when = '1'
      do Check-Health
      break
    when = '2'
      do Check-Life
      break
    when = '3'
      do Check-Disability
      break
    when = '4'
      do Check-Savings
      break
    when = '6'
      do Check-FSA
      break
    when = '7'
      do Check-Rtrmnt
      break
    when = '8'
      do Check-Pension
      break
  end-evaluate

End-Procedure

!********************************
Begin-Procedure Check-Simple
!********************************

Begin-Select
I9.EMPLID
I9.EMPL_RCD
I9.PLAN_TYPE
I9.EFFDT

  let $Active_Enroll = 'Y'

From  PS_SIMPLE_BENEFIT I9
Where I9.EMPLID = &H.Emplid
And   I9.EMPL_RCD = &H.EMPL_RCD
And   I9.PLAN_TYPE = &H.Plan_Type
And   I9.EFFDT =
            (SELECT MAX(YI9.EFFDT)
             FROM   PS_SIMPLE_BENEFIT YI9
             WHERE  YI9.EMPLID = I9.EMPLID
             AND    YI9.EMPL_RCD = I9.EMPL_RCD
             AND    YI9.PLAN_TYPE = I9.PLAN_TYPE
             AND    YI9.EFFDT <= &H.Effdt)
And   I9.COVERAGE_ELECT = 'E'
Order By
I9.EMPLID,
I9.EMPL_RCD,
I9.PLAN_TYPE,
I9.EFFDT
End-Select

End-Procedure


!****************************
Begin-Procedure Check-Health
!****************************

Begin-Select
I1.EMPLID
I1.EMPL_RCD
I1.COBRA_EVENT_ID
I1.PLAN_TYPE
I1.EFFDT

  let $Active_Enroll = 'Y'

From  PS_HEALTH_BENEFIT I1
Where I1.EMPLID = &H.Emplid
And   I1.EMPL_RCD = &H.EMPL_RCD
And   I1.COBRA_EVENT_ID = &H.Cobra_Event_Id
And   I1.PLAN_TYPE = &H.Plan_Type
And   I1.EFFDT =
            (SELECT MAX(YI1.EFFDT)
             FROM   PS_HEALTH_BENEFIT YI1
             WHERE  YI1.EMPLID = I1.EMPLID
             AND    YI1.EMPL_RCD = I1.EMPL_RCD
             AND    YI1.COBRA_EVENT_ID = I1.COBRA_EVENT_ID
             AND    YI1.PLAN_TYPE = I1.PLAN_TYPE
             AND    YI1.EFFDT <= &H.Effdt)
And   I1.COVERAGE_ELECT = 'E'
And  (I1.DEDUCTION_END_DT IS NULL OR
      I1.DEDUCTION_END_DT >= &H.Effdt)
Order By
I1.EMPLID,
I1.EMPL_RCD,
I1.COBRA_EVENT_ID,
I1.PLAN_TYPE,
I1.EFFDT
End-Select

End-Procedure


!**************************
Begin-Procedure Check-Life
!**************************

Begin-Select
I2.EMPLID
I2.EMPL_RCD
I2.PLAN_TYPE
I2.EFFDT

  let $Active_Enroll = 'Y'

From  PS_LIFE_ADD_BEN I2
Where I2.EMPLID = &H.Emplid
And   I2.EMPL_RCD = &H.EMPL_RCD
And   I2.PLAN_TYPE = &H.Plan_Type
And   I2.EFFDT =
            (SELECT MAX(YI2.EFFDT)
             FROM   PS_LIFE_ADD_BEN YI2
             WHERE  YI2.EMPLID = I2.EMPLID
             AND    YI2.EMPL_RCD = I2.EMPL_RCD
             AND    YI2.PLAN_TYPE = I2.PLAN_TYPE
             AND    YI2.EFFDT <= &H.Effdt)
And   I2.COVERAGE_ELECT = 'E'
And  (I2.DEDUCTION_END_DT IS NULL OR
      I2.DEDUCTION_END_DT >= &H.Effdt)
Order By
I2.EMPLID,
I2.EMPL_RCD,
I2.PLAN_TYPE,
I2.EFFDT
End-Select

End-Procedure


!********************************
Begin-Procedure Check-Disability
!********************************

Begin-Select
I3.EMPLID
I3.EMPL_RCD
I3.PLAN_TYPE
I3.EFFDT

  let $Active_Enroll = 'Y'

From  PS_DISABILITY_BEN I3
Where I3.EMPLID = &H.Emplid
And   I3.EMPL_RCD = &H.EMPL_RCD
And   I3.PLAN_TYPE = &H.Plan_Type
And   I3.EFFDT =
            (SELECT MAX(YI3.EFFDT)
             FROM   PS_DISABILITY_BEN YI3
             WHERE  YI3.EMPLID = I3.EMPLID
             AND    YI3.EMPL_RCD = I3.EMPL_RCD
             AND    YI3.PLAN_TYPE = I3.PLAN_TYPE
             AND    YI3.EFFDT <= &H.Effdt)
And   I3.COVERAGE_ELECT = 'E'
And  (I3.DEDUCTION_END_DT IS NULL OR
      I3.DEDUCTION_END_DT >= &H.Effdt)
Order By
I3.EMPLID,
I3.EMPL_RCD,
I3.PLAN_TYPE,
I3.EFFDT
End-Select

End-Procedure


!*****************************
Begin-Procedure Check-Savings
!*****************************

Begin-Select
I4.EMPLID
I4.EMPL_RCD
I4.PLAN_TYPE
I4.EFFDT

  let $Active_Enroll = 'Y'

From  PS_SAVINGS_PLAN I4
Where I4.EMPLID = &H.Emplid
And   I4.EMPL_RCD = &H.EMPL_RCD
And   I4.PLAN_TYPE = &H.Plan_Type
And   I4.EFFDT =
            (SELECT MAX(YI4.EFFDT)
             FROM   PS_SAVINGS_PLAN YI4
             WHERE  YI4.EMPLID = I4.EMPLID
             AND    YI4.EMPL_RCD = I4.EMPL_RCD
             AND    YI4.PLAN_TYPE = I4.PLAN_TYPE
             AND    YI4.EFFDT <= &H.Effdt)
And   I4.COVERAGE_ELECT = 'E'
And  (I4.DEDUCTION_END_DT IS NULL OR
      I4.DEDUCTION_END_DT >= &H.Effdt)
Order By
I4.EMPLID,
I4.EMPL_RCD,
I4.PLAN_TYPE,
I4.EFFDT
End-Select

End-Procedure


!*************************
Begin-Procedure Check-FSA
!*************************

Begin-Select
I6.EMPLID
I6.EMPL_RCD
I6.COBRA_EVENT_ID
I6.PLAN_TYPE
I6.EFFDT

  let $Active_Enroll = 'Y'

From  PS_FSA_BENEFIT I6
Where I6.EMPLID = &H.Emplid
And   I6.EMPL_RCD = &H.EMPL_RCD
And   I6.COBRA_EVENT_ID = &H.Cobra_Event_Id
And   I6.PLAN_TYPE = &H.Plan_Type
And   I6.EFFDT =
            (SELECT MAX(YI6.EFFDT)
             FROM   PS_FSA_BENEFIT YI6
             WHERE  YI6.EMPLID = I6.EMPLID
             AND    YI6.EMPL_RCD = I6.EMPL_RCD
             AND    YI6.COBRA_EVENT_ID = I6.COBRA_EVENT_ID
             AND    YI6.PLAN_TYPE = I6.PLAN_TYPE
             AND    YI6.EFFDT <= &H.Effdt)
And   I6.COVERAGE_ELECT = 'E'
And  (I6.DEDUCTION_END_DT IS NULL OR
      I6.DEDUCTION_END_DT >= &H.Effdt)
Order By
I6.EMPLID,
I6.EMPL_RCD,
I6.COBRA_EVENT_ID,
I6.PLAN_TYPE,
I6.EFFDT
End-Select

End-Procedure


!****************************
Begin-Procedure Check-Rtrmnt
!****************************

Begin-Select
I7.EMPLID
I7.EMPL_RCD
I7.PLAN_TYPE
I7.EFFDT

  let $Active_Enroll = 'Y'

From  PS_RTRMNT_PLAN I7
Where I7.EMPLID = &H.Emplid
And   I7.EMPL_RCD = &H.EMPL_RCD
And   I7.PLAN_TYPE = &H.Plan_Type
And   I7.EFFDT =
            (SELECT MAX(YI7.EFFDT)
             FROM   PS_RTRMNT_PLAN YI7
             WHERE  YI7.EMPLID = I7.EMPLID
             AND    YI7.EMPL_RCD = I7.EMPL_RCD
             AND    YI7.PLAN_TYPE = I7.PLAN_TYPE
             AND    YI7.EFFDT <= &H.Effdt)
And   I7.COVERAGE_ELECT = 'E'
And  (I7.DEDUCTION_END_DT IS NULL OR
      I7.DEDUCTION_END_DT >= &H.Effdt)
Order By
I7.EMPLID,
I7.EMPL_RCD,
I7.PLAN_TYPE,
I7.EFFDT
End-Select

End-Procedure


!*****************************
Begin-Procedure Check-Pension
!*****************************

Begin-Select
I8.EMPLID
I8.EMPL_RCD
I8.PLAN_TYPE
I8.EFFDT

  let $Active_Enroll = 'Y'

From  PS_PENSION_PLAN I8
Where I8.EMPLID = &H.Emplid
And   I8.EMPL_RCD = &H.EMPL_RCD
And   I8.PLAN_TYPE = &H.Plan_Type
And   I8.EFFDT =
            (SELECT MAX(YI8.EFFDT)
             FROM   PS_PENSION_PLAN YI8
             WHERE  YI8.EMPLID = I8.EMPLID
             AND    YI8.EMPL_RCD = I8.EMPL_RCD
             AND    YI8.PLAN_TYPE = I8.PLAN_TYPE
             AND    YI8.EFFDT <= &H.Effdt)
And   I8.COVERAGE_ELECT = 'E'
And  (I8.DEDUCTION_END_DT IS NULL OR
      I8.DEDUCTION_END_DT >= &H.Effdt)
Order By
I8.EMPLID,
I8.EMPL_RCD,
I8.PLAN_TYPE,
I8.EFFDT
End-Select

End-Procedure


!***************************
Begin-Procedure Print-Error
!***************************

  print &H.Emplid                      (+1,{c2_emplid},12)

  let $Emplid = &H.Emplid
  do Get-Name

  print &Z.Name                         (0,{c2_name},40)
  print &H.EMPL_RCD                    (0,{c2_EMPL_RCD})          edit {amt_mask4}
  print &H.Plan_Type                    (0,{c2_plan_type},2)
  print &H.COBRA_Event_Id               (0,{c2_cobra_event_id})     edit {amt_mask4}

  do Format-Datetime(&H.Effdt, $Effdt, {DEFDATE}, '', '')
  print $Effdt                          (0,{c2_effdt},10)
  print &H.Percent_Calc                 (0,{c2_percent_calc},1)
  print &H.Rate_Percent                 (0,{c2_rate_percent})       edit {amt_mask3}
  print &H.Flat_Calc                    (0,{c2_flat_calc},1)
  print &H.Rate_Amount                  (0,{c2_rate_amount})        edit {amt_mask2}
  print $Err_Message                    (0,{c2_message},50)

End-Procedure


!******************************
Begin-Procedure Inactive-Audit
!******************************

  let $ReportTitle = $BEN045-REPORT-ST3
  let $Entries_Found = 'N'
  let $Report_Type = 'C'

Begin-Select DISTINCT
L.EMPLID
L.EMPL_RCD

  let $Emplid = &L.Emplid
  do Get-Name

  let $Active = 'I'
  do Get-Status

  if $Active = 'Y'
    do Check-Charges
  end-if

  do Check-Credits

From  PS_BEN_BI_ENR_EFDT L
Where NOT EXISTS
        (SELECT 'X'
         FROM  PS_BEN_BI_ENR_EFDT LL
         WHERE LL.BILLING_STATUS <> 'I'
         AND   LL.EMPLID = L.EMPLID
         AND   LL.EMPL_RCD = L.EMPL_RCD
         AND   LL.PLAN_TYPE = L.PLAN_TYPE
         AND   LL.COBRA_EVENT_ID = L.COBRA_EVENT_ID
         AND   LL.EFFDT =
              (SELECT MAX(LLL.EFFDT)
               FROM  PS_BEN_BI_ENR_EFDT LLL
               WHERE LLL.EMPLID = LL.EMPLID
               AND   LLL.EMPL_RCD = LL.EMPL_RCD
               AND   LLL.PLAN_TYPE = LL.PLAN_TYPE
               AND   LLL.COBRA_EVENT_ID = LL.COBRA_EVENT_ID
               AND   LLL.EFFDT <= $RepDate))
Order By L.EMPLID
End-Select

  if $Entries_Found = 'N'
    print $BEN045-NO-ERR-FOUND (+15,1) center
    print ' '                  (+7,1)
  end-if

  print $BEN045-END-OF-SECTN   (+3,1) center

End-Procedure


!**************************
Begin-Procedure Get-Status
!**************************

Begin-Select
M.EMPLID
M.EMPL_RCD
M.EFFDT

  let $Active = 'Y'

From PS_JOB M
Where M.EMPLID = &L.Emplid
And   M.EMPL_RCD = &L.EMPL_RCD
And   M.EFFDT =
          (SELECT MAX(MM.EFFDT)
           FROM  PS_JOB MM
           WHERE MM.EMPLID = M.EMPLID
           AND   MM.EMPL_RCD = M.EMPL_RCD
           AND   MM.EFFDT <= $RepDate)
And   M.HR_STATUS = 'A'
Order By M.EMPLID,
M.EMPL_RCD,
M.EFFDT
End-Select

End-Procedure


!*****************************
Begin-Procedure Check-Charges
!*****************************

Begin-Select
N.EMPLID                                          (+1,{c3_emplid},11)

    print &z.name                                  (0,{c3_name},50)

O.PERIOD_END_DT

    do Format-Datetime(&O.Period_End_Dt, $Posting_Date, {DEFDATE}, '', '')
    print $Posting_Date                            (0,{c3_posting_date},10)

N.BILL_PER_CD                                      (0,{c3_bill_per_cd},7)
N.PLAN_TYPE                                        (0,{c3_plan_type},2)
N.TOTAL_CHARGE                                     (0,{c3_total_charge}) edit {amt_mask1}
N.AMOUNT_DUE                                       (0,{c3_amount_due})   edit {amt_mask1}

!---print 'Payroll Active with Billing Balances'   (0,{c3_message})
    print $BEN045-INFO-MESS-01                     (0,{c3_message},50)
    let $Entries_Found = 'Y'

From  PS_BEN_BI_CHG_VW N,
      PS_BEN_BI_CALENDAR O
Where N.AMOUNT_DUE <> 0
And   N.EMPLID = &L.Emplid
And   N.BILL_PER_CD = O.BILL_PER_CD
Order By N.EMPLID,
N.BILL_PER_CD,
N.PLAN_TYPE
End-Select

End-Procedure


!*****************************
Begin-Procedure Check-Credits
!*****************************

Begin-Select
Q.EMPLID                                          (+1,{c3_emplid},11)

    print &z.name                                  (0,{c3_name},50)

Q.POSTING_DATE

    do Format-Datetime(&Q.Posting_Date, $Posting_Date, {DEFDATE}, '', '')
    print $Posting_Date                            (0,{c3_posting_date},10)


Q.POSTING_SEQUENCE                                 (0,{c3_posting_sequence})  edit {amt_mask5}
P.PAY_AMT                                          (0,{c3_open_credit})   edit {amt_mask1}

    if $Active = 'Y'
!---  print 'Payroll Active with Billing Balances' (0,{c3_message})
      print $BEN-45-INFO-MESS-01                   (0,{c3_message},50)
    else
!---  print 'Inactive Billing with Open Credit'    (0,{c3_message})
      print $BEN-45-INFO-MESS-02                   (0,{c3_message},50)
    end-if

    let $Entries_Found = 'Y'

From  PS_BEN_BI_PAYMENT Q,
      PS_BEN_BI_DETAIL P
Where Q.EMPLID = P.EMPLID
And   Q.BILL_PAY_ID = P.BILL_PAY_ID
And   P.DETAIL_TYPE = 'EXCS'
And   P.PAY_AMT <> 0
And   Q.EMPLID = &L.Emplid
Order By Q.POSTING_DATE
End-Select

End-Procedure


!**************************
Begin-Procedure Hold-Audit
!**************************

  let $ReportTitle = $BEN045-REPORT-ST4
  let $Entries_Found = 'N'
  let $Report_Type = 'D'

  do Convert-To-DTU-Date($AsOfToday, $DTU_Today)
  let #Months = -3
  do DTU-Add-Months($DTU_Today, #Months, $CutoffDate)
  do Convert-From-DTU-Date($CutoffDate, $CutoffDate)
  do Format-Datetime($CutoffDate, $CutoffDate, {DEFCMP}, '', '')

Begin-Select
R.EMPLID
R.EFFDT
R.HOLD_BILLING
R.HOLD_PRINT
S.NAME

    do Format-Datetime(&R.Effdt, $Effdt, {DEFCMP}, '', '')
    if $Effdt <= $CutoffDate

      do Format-Datetime(&R.Effdt, $Print_Effdt, {DEFDATE}, '', '')

      if &R.Hold_Billing = 'Y'

        print &R.Emplid                  (+1,{c4_emplid},11)
        print &S.Name                    (0,{c4_name},50)
        print $Print_Effdt               (0,{c4_effdt},10)
        print $BEN045-BILL-HOLD          (0,{c4_message},50)
        let $Entries_Found = 'Y'

      end-if

      if &R.Hold_Print = 'Y'

        print &R.Emplid                  (+1,{c4_emplid},11)
        print &S.Name                    (0,{c4_name},50)
        print $Print_Effdt               (0,{c4_effdt},10)
        print $BEN045-STMT-HOLD          (0,{c4_message},50)
        let $Entries_Found = 'Y'

      end-if

    end-if

From  PS_BEN_BI_EMP_PARM R,
      PS_PERSON_NAME     S
Where (R.HOLD_BILLING = 'Y' OR
       R.HOLD_PRINT = 'Y')
And   R.EMPLID = S.EMPLID
And   R.EFFDT =
              (SELECT MAX(RR.EFFDT)
               FROM  PS_BEN_BI_EMP_PARM RR
               WHERE RR.EMPLID = R.EMPLID
               AND   RR.EFFDT <= $RepDate)
Order By R.EMPLID,
R.EFFDT
End-Select

  if $Entries_Found = 'N'
    print $BEN045-NO-ERR-FOUND (+15,1) center
    print ' '                  (+7,1)
  end-if

  print $BEN045-END-OF-SECTN   (+3,1) center

End-Procedure


!*********************************
Begin-Procedure Hold-Enroll-Audit
!*********************************

  let $ReportTitle = $BEN045-REPORT-ST5
  let $Entries_Found = 'N'
  let $Report_Type = 'E'

  do Convert-To-DTU-Date($AsOfToday, $DTU_Today)
  let #Months = -3
  do DTU-Add-Months($DTU_Today, #Months, $CutoffDate)
  do Convert-From-DTU-Date($CutoffDate, $CutoffDate)
  do Format-Datetime($CutoffDate, $CutoffDate, {DEFCMP}, '', '')

Begin-Select
T.EMPLID
U.NAME
T.EMPL_RCD
T.PLAN_TYPE
T.COBRA_EVENT_ID
T.EFFDT
T.BILLING_REASON
T.PERCENT_CALC
T.RATE_PERCENT
T.RATE_QUALIFIER
T.FLAT_CALC
T.RATE_AMOUNT

    do Format-Datetime(&T.Effdt, $Effdt, {DEFCMP}, '', '')
    if $Effdt <= $CutoffDate

      print &T.Emplid                 (+1,{c5_emplid},12)
      print &U.Name                    (0,{c5_name},50)
      print &T.EMPL_RCD               (0,{c5_EMPL_RCD})          edit {amt_mask4}
      print &T.Plan_Type               (0,{c5_plan_type},2)

      move 'PLAN_TYPE' to $Fieldname
      move &T.Plan_Type to $Fieldvalue
      move &T.Effdt to $AsOfDate
      do Read-Translate-Table
      print $XlatShortName             (0,{c5_plan_type_desc},12)

      print &T.COBRA_Event_Id          (0,{c5_cobra_event_id})     edit {amt_mask4}

      do Format-Datetime(&T.Effdt, $Print_Effdt, {DEFDATE}, '', '')
      print $Print_Effdt               (0,{c5_effdt},10)

      move 'BILLING_REASON' to $Fieldname
      move &T.Billing_Reason to $Fieldvalue
      move &T.Effdt to $AsOfDate
      do Read-Translate-Table
      print $XlatShortName             (0,{c5_Billing_Reason},10)

      print &T.Percent_Calc            (0,{c5_percent_calc},1)
      print &T.Rate_Percent            (0,{c5_rate_percent})       edit {amt_mask3}

      move 'RATE_QUALIFIER' to $Fieldname
      move &T.Rate_Qualifier to $Fieldvalue
      move &T.Effdt to $AsOfDate
      do Read-Translate-Table
      print $XlatShortName             (0,{c5_rate_Qualifier},5)

      print &T.Flat_Calc               (0,{c5_flat_calc},1)
      print &T.Rate_Amount             (0,{c5_rate_amount})        edit {amt_mask2}

      let $Entries_Found = 'Y'

    end-if

From  PS_BEN_BI_ENR_EFDT T,
      PS_PERSON_NAME     U
Where T.BILLING_STATUS = 'H'
And   T.EMPLID = U.EMPLID
And   T.EFFDT =
              (SELECT MAX(TT.EFFDT)
               FROM  PS_BEN_BI_ENR_EFDT TT
               WHERE TT.EMPLID = T.EMPLID
               AND   TT.EMPL_RCD = T.EMPL_RCD
               AND   TT.PLAN_TYPE = T.PLAN_TYPE
               AND   TT.COBRA_EVENT_ID = T.COBRA_EVENT_ID
               AND   TT.EFFDT <= $RepDate)
Order By T.EMPLID,
T.EMPL_RCD,
T.PLAN_TYPE,
T.COBRA_EVENT_ID,
T.EFFDT
End-Select

  if $Entries_Found = 'N'
    print $BEN045-NO-ERR-FOUND (+15,1) center
    print ' '                  (+7,1)
  end-if

  print $BEN045-END-OF-SECTN   (+3,1) center

End-Procedure


!************************
Begin-Procedure Get-Name
!************************

Begin-Select
Z.NAME
From  PS_PERSON_NAME Z
Where Z.EMPLID = $Emplid
End-Select

End-Procedure


!****************************
Begin-Procedure Display-Time
!****************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure


!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime procedures
#Include 'number.sqc'    !Format-Number procedure
#Include 'reset.sqc'     !Reset printer procedure
#include 'getbennm.sqc'  !Get-Benefit-Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datemath.sqc'  !Date-Math procedures

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!******************************* End of Report *******************************
