!*************************************************************
! CBRDEPS:  COBRA Enrollment Form Dependent Processing
!*************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/04:13:36:02                        
!       $Release:  HR9                                        
!      $Revision:  102                                        
!                                                                      *
!***********************************************************************
!
! Function: Called by CBR004.SQR
!
! Input:  PS_DEP_BEN_EFF, PS_DEP_BEN_NAME  - Dependents of Employee
!         PS_HEALTH_DEPENDNT               - Dependents with current elections
!
! Output: Dependents will be printed in a dependent/plan type matrix
!
!**************************************************************************

!*********************************
Begin-Procedure Process-Dep-Benef
!*********************************


  if ((#Current-Line + 5) >= #Page_Maximum)
    do Bottom-Line
    new-page
  end-if

  print 'DEPENDENT/BENEFICIARIES'          (+3,1) bold
  let $Tmp_Txt = 'The first box lists all dependents with current health '
  let $Tmp_Txt = $Tmp_Txt || 'coverages on file.  Please make any necessary '
  let $Tmp_Txt = $Tmp_Txt || 'changes and identify any'
  print $Tmp_Txt     (+1,1)
  let $Tmp_Txt = 'new dependents or beneficiaries in the last box provided for '
  let $Tmp_Txt = $Tmp_Txt || 'you. '
  print $Tmp_Txt     (+1,1)

  do Initialize-Dep-Array
  do Select-Dependents       !For health plans
  do Print-Dep-Boxes         !For health plans
  do Print-New-Dep-Entry

End-Procedure

!************************************
Begin-Procedure Initialize-Dep-Array
!************************************

  Create-Array Name=DepArray
               Size=99
               Field=DepId:char
               Field=DepName:char

  move 0 to #j
  While #j <= #DepCount
    put ' ' ' ' into  DepArray(#j) DepId DepName
    add 1 to #j
  End-While

End-Procedure

!********************************
begin-procedure Select-Dependents
!********************************

  if ((#Current-Line + 8) >= #Page_Maximum)
    do Bottom-Line
    New-Page
  end-if

  let #DepCount = 0
  let $Last_Dep = '0'

Begin-Select

BA.EMPLID
BA.DEPENDENT_BENEF
BN.NAME

  PUT &BA.Dependent_Benef &BN.Name INTO DEPARRAY(#DEPCOUNT) DEPID DEPNAME
  add 1 to #DepCount

  if (&BA.Dependent_Benef <> $Last_Dep)
    if (#DepCount = 1)
      let #TmpRow = #Current-Line + 6
      let #Snapshot = #Current-Line + 2  !initialize Medical/Dental box row.
    end-if
    do Print-Dep-Name
    do Process-Dependents
  end-if
  let $Last_Dep = &BA.Dependent_Benef

FROM  PS_DEP_BEN_EFF BA,
      PS_DEP_BEN_NAME BN
WHERE BA.EMPLID            = $Emplid
AND   BA.EFFDT = (SELECT MAX(BA1.EFFDT)
                  FROM PS_DEP_BEN_EFF BA1
                  WHERE BA1.EMPLID = BA.EMPLID
                  AND   BA1.DEPENDENT_BENEF = BA.DEPENDENT_BENEF
                  AND   BA1.EFFDT <= $PeriodBegin)
AND   BN.EMPLID = BA.EMPLID
AND   BN.DEPENDENT_BENEF = BA.DEPENDENT_BENEF
AND   BN.EFFDT = (SELECT MAX(BN1.EFFDT)
                  FROM PS_DEP_BEN_NAME BN1
                  WHERE BN1.EMPLID = BN.EMPLID
                  AND   BN1.DEPENDENT_BENEF = BN.DEPENDENT_BENEF
                  AND   BN1.EFFDT <= $ASOFTODAY)
AND   BA.DEP_BENEF_TYPE   IN ('D','O')
ORDER BY BA.DEPENDENT_BENEF ASC

End-Select

End-Procedure

!*****************************
Begin-Procedure Print-Dep-Name
!*****************************

  let #TmpCol = {DEPCOL} + 1         !Print Dep ID one space after box column

  if (#DepCount  > 1)
    let #TmpRow = #TmpRow + #drow_depth
  end-if

  print &BA.Dependent_Benef          (#TmpRow,#TmpCol)
  print &BN.Name                     (+0,8)

End-Procedure

!*********************************
Begin-Procedure Process-Dependents
!*********************************

  move 'N'  to $dep10      !Initialize Dep's Current Coverage Variables
  move 'N'  to $dep11
  move 'N'  to $dep14
  move 'xy' to $depid      !Count distinct deps
  move 0    to #depcol     !Initialize
  move 0    to #TmpCol     !Initialize tmp variable for print name
  move 0    to #TmpCol1    !Initialize tmp variable for print YES

Begin-Select

BB.PLAN_TYPE

  let $PlnType  = &BB.Plan_Type
  Evaluate $PlnType
    When = '10'
      move 'Y' to $Dep10
      let #TmpCol1 = #Depcol1               !set 'YES' field for plan type
      break
    When = '11'
      move 'Y' to $Dep11
      let #TmpCol1 = #Depcol1 + {BOX_LEN}   !set 'YES' field for plan type
      break
    When = '14'
      move 'Y' to $Dep14
      let #TmpCol1 = #Depcol1 + 2*{BOX_LEN} !set 'YES' field for plan type
      break
  End-Evaluate

  do Print-Dependent-Data

FROM  PS_HEALTH_DEPENDNT BB

WHERE BB.EMPLID           = $emplid
  and BB.EMPL_RCD        = #emplrcd
  and BB.COBRA_EVENT_ID  = #event_id
  and BB.PLAN_TYPE       IN ('10','11','14')
  and BB.DEPENDENT_BENEF  = &BA.Dependent_Benef
  and BB.EFFDT =
      (SELECT MAX(BBB.EFFDT)
      FROM  PS_HEALTH_DEPENDNT BBB
      WHERE BBB.EMPLID          = BB.EMPLID
      and   BBB.COBRA_EVENT_ID =  BB.COBRA_EVENT_ID
      and   BBB.EMPL_RCD       = BB.EMPL_RCD
      and   BBB.PLAN_TYPE       = BB.PLAN_TYPE
      and   BBB.BENEFIT_NBR        = BB.BENEFIT_NBR
      and   BBB.DEPENDENT_BENEF = BB.DEPENDENT_BENEF
      and   BBB.EFFDT          <= $PeriodBegin)
ORDER BY BB.PLAN_TYPE ASC

End-Select

End-Procedure

!***********************************
Begin-Procedure Print-Dependent-Data
!***********************************

  print 'X'          (+0,#TmpCol1)

End-Procedure

!******************************
Begin-Procedure Print-Dep-Boxes
!******************************

  if (#DepCount = 0)
    let #TmpRow   = #Current-Line
  else
    let #TmpRow   = #Snapshot
  end-if
  let #dprows     = 0
  let #dprow      = #DepCount * 2
  let #Depth      = #dprow + 3 + (2 * 2)  !Add lines for header and 2 deps
  let #TmpShade   = 0
  let #TmpCol     = 0

  if ($Emp10 = 'N') And ($Emp11 = 'N')
    let #TmpShade = {SHADE}
  end-if
  do Print-Dep-Name-box
  move 0 to #TmpShade

  if ($Emp10 <> 'Y')
    let #TmpShade = {SHADE}     !shade ineligible plan types
  end-if
  let #TmpCol = #dcol1          !column for medical box
  do Print-Plan-Box
  move 0 to #TmpShade

  if ($Emp11 <> 'Y')
    let #TmpShade = {SHADE}     !shade ineligible plan types
  end-if
  let #TmpCol = #TmpCol+#dpcol  !column for dental box
  do Print-Plan-Box
  move 0 to #TmpShade

  if ($Emp14 <> 'Y')            !currently not on data entry panel
    let #TmpShade = {SHADE}     !shade ineligible plan types
  end-if
  let #TmpCol = #TmpCol+#dpcol  !column for dental box
  do Print-Plan-Box
  move 0 to #TmpShade

  do Bottom-Line
  New-Page

End-Procedure

!*********************************
Begin-Procedure Print-Dep-Name-Box
!*********************************

  print ' MEDICAL/DENTAL'      (#TmpRow,{DEPCOL}) Bold
  print 'DEPENDENT(S)'         (+2,#Depcol4)

!dep name box
  graphic (#TmpRow,{DEPCOL},{WIDTH}) box :#Depth {SMAL_LNSIZE} :#TmpShade

!horz lines
  move 0 to #i
  While #i < #DepCount+2                  !Extra spaces for new dependents
    graphic (+#drow_depth,{DEPCOL},{WIDTH}) horz-line {SMAL_LNSIZE}
    add 1 to #i
  End-While

End-Procedure

!*****************************
Begin-Procedure Print-Plan-Box
!*****************************

  let #TmpRow3 = #TmpRow + 2
  print 'MEDICAL'              (#TmpRow3,#Depcol5)
  print 'DENTAL'               (+0,#Depcol6)
  print 'VISION'               (+0,#Depcol7)

  !plan box
  graphic (#TmpRow,#TmpCol,{BOX_LEN}) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !horz lines
  move 0 to #i
  While #i < #DepCount+2                  !Extra spaces for new dependents
    graphic (+#drow_depth,#TmpCol,{BOX_LEN}) horz-line {SMAL_LNSIZE}
    add 1 to #i
  End-While

End-Procedure

!*****************************
Begin-Procedure Print-Ben-Name
!*****************************

  if ((#Current-Line + 5) >= #Page_Maximum)
    do Bottom-Line
    New-Page
  end-if

  let #count1 = 0

  !Set row for life box, 8 lines down from the last printed line
  let #TmpRow  = #Current-Line + #stboxrow - 1
  !Set row for top of box
  let #TmpRow2 = #Current-Line + #stboxrow - 5

  While #count1 <  #DepCount
    Get $DepId $DepName From DepArray(#count1) DepId DepName

  !Print Dep ID one space after box column
    let #TmpCol = {DEPCOL} + 1

    if (#count1 > 0)
      let #TmpRow = #TmpRow + #drow_depth
    end-if
    add 1 to #count1

    print $DepId                            (#TmpRow,#TmpCol)
    print $DepName                          (+0,8)
  End-While

End-Procedure

!**********************************
Begin-Procedure Print-New-Dep-Entry
!**********************************

  if ((#Current-Line + 12) >= #Page_Maximum)
    do Bottom-Line
    new-page
  end-if

  let #TmpRow2  = #Current-Line + #stboxrow - 5
  let #snapshot = #TmpRow2
  let #Depth    = 3 + (4 * 2)     !Space for header and 4 deps

  print ' NEW DEPENDENT/BENEF INFO'          (#TmpRow2,{DEPCOL}) Bold

  let #TmpRow2 = #TmpRow2 + 2
  print '   DEPENDENT/BENEF NAME'            (#TmpRow2,{DEPCOL})
  print 'RELATIONSHIP'                       (+0,#Depcol5)
  print ' DATE OF BIRTH'                     (+0,#Depcol6)
  print ' SEX'                               (+0,#Depcol7)
  print '    SSN'                            (+0,#DepCol8)

  !Benef Name box
  let #TmpRow2  = #TmpRow2 - 2
  let #TmpCol   = {DEPCOL}
  let #TmpWidth = {WIDTH}
  graphic (#TmpRow2,#TmpCol,#TmpWidth) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !Relationship box
  let #TmpCol   = #Depcol5 - 1
  let #TmpWidth = #Depcol6 - #Depcol5 + 1
  graphic (#TmpRow2,#TmpCol,#TmpWidth) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !Birthdate box
  let #TmpCol   = #Depcol6
  let #TmpWidth = #Depcol7 - #Depcol6
  graphic (#TmpRow2,#TmpCol,#TmpWidth) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !Sex box
  let #TmpCol   = #Depcol7
  let #TmpWidth = #Depcol8 - #Depcol7
  graphic (#TmpRow2,#TmpCol,#TmpWidth) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !SSN box
  let #TmpCol   = #Depcol8
  let #TmpWidth = #Depcol9 - #Depcol8
  graphic (#TmpRow2,#TmpCol,#TmpWidth) box :#Depth {SMAL_LNSIZE} :#TmpShade

  !first horz line
  let #TmpRow2 = #TmpRow2 + 2
  let #TmpWidth = #Depcol9 - {DEPCOL}
  graphic (#TmpRow2,{DEPCOL},#TmpWidth) horz-line {SMAL_LNSIZE}

  !other horz lines
  move 0 to #i
  While #i < 4                                 !Lines for 4 new deps
    graphic (+#drow_depth,{DEPCOL},#TmpWidth) horz-line {SMAL_LNSIZE}
    add 1 to #i
  End-While

End-Procedure

!**************************** End of Report ********************************


