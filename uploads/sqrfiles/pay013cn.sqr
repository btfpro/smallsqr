!***********************************************************************
!  PAY013CN:  Employee Earnings Snapshot - Canada                      *
!                                                                      *
!  Note: This report will pick up balances across all Wage Loss Plans  *
!        for all Provinces.                                            *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!----------------------------------------------------------------------
!                                                                      *
!                                                                      *
!***********************************************************************
!
!                $Date:  2006/07/06:12:43:43                           
!             $Release:  HR9                                           
!            $Revision:  103                                           
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization
#Include 'reset.sqc'     !Reset printer procedure
#Include 'getasodt.sqc'  !Get-As-Of-Date procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

begin-report
  do Init-Report
  do Get-Key-Loop
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY013CN' to $ReportID

  do Init-DateTime
  do Init-Number
  do Init-Arrays
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay013cn_ReportTitle to $ReportTitle
  display $ReportTitle

  do Get-Calendar-Year-Id
  do Get-Current-DateTime

  if $Prcs_Process_Instance = ''
    display 'Dates entered will be treated as month-end for payroll balances.'
    do Get-As-Of-Date
  else
    do Select-Parameters-As-Of-Date
  end-if


  do Get-Date-Codes
  move $AsOfYYYY to #AsOfYYYY
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY013CN  program ids
   do Init_Report_Translation($ReportID,$language_cd)
   do Append_Report_Translation('HR')


   do Get_Field_Information ('PAY013CN', 'REPORT_TITLE', $Pay013cn_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMP_ID1',      $Pay013cn_Emp_Id1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'HIRE_DT1',     $Pay013cn_Hire_Dt1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'REHIRE_DT1',   $Pay013cn_ReHire_Dt1,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'SRVC_DT1',     $Pay013cn_Srvc_Dt1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'TERM_DT1',     $Pay013cn_Term_Dt1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'LV_RTN1',      $Pay013cn_Lv_Rtn1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMPL_STAT1',   $Pay013cn_Empl_Stat1,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'REG_TEMP1',    $Pay013cn_Reg_Temp1,   #dummy_width)
   do Get_Field_Information ('PAY013CN', 'FULL_PART1',   $Pay013cn_Full_Part1,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'FLSA_STAT1',   $Pay013cn_FLSA_Stat1,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMPL_TYPE1',   $Pay013cn_Empl_Type1,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMPL_NM',      $Pay013cn_Empl_Nm,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMP_ID2',      $Pay013cn_Emp_Id2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'HIRE_DT2',     $Pay013cn_Hire_Dt2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'REHIRE_DT2',   $Pay013cn_ReHire_Dt2,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'SRVC_DT2',     $Pay013cn_Srvc_Dt2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'TERM_DT2',     $Pay013cn_Term_Dt2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'LV_RTN2',      $Pay013cn_Lv_Rtn2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMPL_STAT2',   $Pay013cn_Empl_Stat2,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'REG_TEMP2',    $Pay013cn_Reg_Temp2,   #dummy_width)
   do Get_Field_Information ('PAY013CN', 'FULL_PART2',   $Pay013cn_Full_Part2,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'FLSA_STAT2',   $Pay013cn_FLSA_Stat2,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'EMPL_TYPE2',   $Pay013cn_Empl_Type2,  #dummy_width)
   do Get_Field_Information ('PAY013CN', 'JOB_CD1',      $Pay013cn_Job_Cd1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'JOB_CD2',      $Pay013cn_Job_Cd2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'TITLE',        $Pay013cn_Title,       #dummy_width)
   do Get_Field_Information ('PAY013CN', 'DEPT_ID',      $Pay013cn_Dept_Id,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'DEPT_NM',      $Pay013cn_Dept_Nm,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'PAY_GRP1',     $Pay013cn_Pay_Grp1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'COMP_RT1',     $Pay013cn_Comp_Rt1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'COMP_FRQ1',    $Pay013cn_Comp_Frq1,   #dummy_width)
   do Get_Field_Information ('PAY013CN', 'MTH_RT1',      $Pay013cn_Mth_Rt1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'ANN_RT1',      $Pay013cn_Ann_Rt1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'ERN_CD1',      $Pay013cn_Ern_Cd1,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'CUR_MTH1',     $Pay013cn_Cur_Mth1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'QTD_ERN1',     $Pay013cn_QTD_Ern1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'YTD_ERN1',     $Pay013cn_YTD_Ern1,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'PAY_GRP2',     $Pay013cn_Pay_Grp2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'COMP_RT2',     $Pay013cn_Comp_Rt2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'COMP_FRQ2',    $Pay013cn_Comp_Frq2,   #dummy_width)
   do Get_Field_Information ('PAY013CN', 'MTH_RT2',      $Pay013cn_Mth_Rt2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'ANN_RT2',      $Pay013cn_Ann_Rt2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'ERN_CD2',      $Pay013cn_Ern_Cd2,     #dummy_width)
   do Get_Field_Information ('PAY013CN', 'CUR_MTH2',     $Pay013cn_Cur_Mth2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'QTD_ERN2',     $Pay013cn_QTD_Ern2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'YTD_ERN2',     $Pay013cn_YTD_Ern2,    #dummy_width)
   do Get_Field_Information ('PAY013CN', 'TOT',          $Pay013cn_Tot,         #dummy_width)

   do Get_Field_Information ('HR',       'BUS_UNIT',     $HR_Bus_Unit,          #dummy_width)

end-procedure

begin-Procedure Init-Arrays
  #define m 100         !maximum number of earning entries in array
  #define n 1           !maximum number of col occurrence per earning entry

  let $lastCode     = '***'
  let #lastEarnings = 0
  let #lastRow      = {m}-1
  let #lastCol      = {n}-1

  create-array name  = ETDarray          -
               size  = {m}               -
               field = ErnCd:char:{n}    -
               field = GrsMtd:number:{n} -
               field = GrsQtd:number:{n} -
               field = GrsYtd:number:{n}

  create-array name  = QTDarray                 -
               size  = {m}                      -
               field = Wage_Loss_Plan:char:{n}  -
               field = Prov:char:{n}            -
               field = TotalQtd:number:{n}


end-procedure


begin-heading 7

  #Include 'stdhtr09.sqc'
  print $Pay013cn_Emp_Id1                 (+3,32)
  print $Pay013cn_Hire_Dt1                (0,45)
  print $Pay013cn_Rehire_Dt1              (0,53)
  print $Pay013cn_Srvc_Dt1                (0,65)
  print $Pay013cn_Term_Dt1                (0,77)
  print $Pay013cn_Lv_Rtn1                 (0,86)
  print $Pay013cn_Empl_Stat1              (0,95)
  print $Pay013cn_Reg_Temp1               (0,101)
  print $Pay013cn_Full_Part1              (0,107)
  print $Pay013cn_FLSA_Stat1              (0,114)
  print $Pay013cn_Empl_Type1              (0,120)

  print $Pay013cn_Empl_Nm                 (+1,1)
  print $Pay013cn_Emp_Id2                 (0,32)
  print $Pay013cn_Hire_Dt2                (0,45)
  print $Pay013cn_Rehire_Dt2              (0,53)
  print $Pay013cn_Srvc_Dt2                (0,65)
  print $Pay013cn_Term_Dt2                (0,77)
  print $Pay013cn_Lv_Rtn2                 (0,86)
  print $Pay013cn_Empl_Stat2              (0,95)
  print $Pay013cn_Reg_Temp2               (0,101)
  print $Pay013cn_Full_Part2              (0,107)
  print $Pay013cn_FLSA_Stat2              (0,114)
  print $Pay013cn_Empl_Type2              (0,120)
end-heading

begin-procedure Get-Key-Loop
  if $Prcs_Process_Instance = ''
    while 1 = 1
      display 'Enter Employee ID or partial Last Name or leave blank to exit.'
      input $key maxlen=30 'Enter Employee ID or partial Last Name (Name is case sensitive) or leave blank to exit'

      if RTRIM($key, ' ') = ''
        break
      end-if
      move $key to $Name
      concat '%' with $Name
      UPPERCASE $key
      do Process-Main
    end-while
  else
    do Update-As-Of-Date
    do Select-Parameters-Search-Key
  end-if
end-procedure


begin-procedure Update-As-Of-Date
begin-SQL on-error=Bad-Date
UPDATE PSASOFDATE SET ASOFDATE=$ASOFDATE
end-SQL
end-procedure


begin-procedure Select-Parameters-As-Of-Date
BEGIN-SELECT

P1.ASOFDATE

FROM  PS_RC_PAY013_1 P1
WHERE P1.OPRID          = $PRCS_OPRID
AND   P1.RUN_CNTL_ID    = $PRCS_RUN_CNTL_ID
END-SELECT

  let  $ASOFDATE         = &P1.ASOFDATE

end-procedure

begin-procedure Select-Parameters-Search-Key

  let $Prev_EmplID  = ' '
  let #Prev_EmplRcd = 0

  let #SubTot_MTD = 0
  let #SubTot_QTD = 0
  let #SubTot_YTD = 0

BEGIN-SELECT

P2.SEARCH_KEY

      move &P2.SEARCH_KEY to $Key  xxxxxxxxxxx
      UPPERCASE $key
      move &P2.SEARCH_KEY to $Name
      let $Key  = RTrim($Key,' ')
      let $Name = RTrim($Name,' ')
      concat '%' with $Name

      do Process-Main

FROM  PS_RC_PAY013_2 P2
WHERE P2.OPRID          = $PRCS_OPRID
AND   P2.RUN_CNTL_ID    = $PRCS_RUN_CNTL_ID

END-SELECT

  if $Name = ''        !No rows retrieved by SELECT
      do Process-Main
  else
      if $Empl_Found = 'Y'
          do Print-SubTotal
          do Print-Grand-Total
      end-if
  end-if

end-procedure


begin-procedure Process-Main

  let $Empl_Found = 'N'

BEGIN-SELECT
A.COMPANY

A.NAME                          
A.EMPLID                      
A.EMPL_RCD
A.HIRE_DT
A.SERVICE_DT
A.REHIRE_DT                    
A.TERMINATION_DT               
A.EXPECTED_RETURN_DT          

A.EMPL_STATUS                   
A.REG_TEMP                      
A.FULL_PART_TIME                
A.FLSA_STATUS                   
A.EMPL_TYPE                     
A.JOBCODE                       
A.JOBTITLE_ABBRV                
A.DEPTID                        
A.DEPTNAME_ABBRV                
A.BUSINESS_UNIT                 
A.PAYGROUP                      
A.COMPRATE                                  
A.MONTHLY_RT                    
A.ANNUAL_RT

FT.FREQUENCY_TYPE                    
NM.NAME_PSFORMAT


  if &A.EmplID <> $Prev_EmplID
      if $Prev_EmplID = ' '
         move &A.EmplID   to $Prev_EmplID
         move &A.Empl_Rcd to #Prev_EmplRcd
         do Print-Employee-Info
         do Reset-Variables
         do Check-Total-Gross
      else
         do Print-SubTotal
         do Print-Grand-Total
         NEW-PAGE
         do Print-Employee-Info
         move &A.EmplID   to $Prev_EmplID
         move &A.Empl_Rcd to #Prev_EmplRcd
         do Reset-Variables
         do Check-Total-Gross
      end-if
  else
      if &A.Empl_Rcd <> #Prev_EmplRcd
          do Print-SubTotal
          NEW-PAGE
          do Print-Employee-Info
          move &A.Empl_Rcd to #Prev_EmplRcd
          do Reset-Variables
      end-if
  end-if


  move 'Y' to $Empl_Found
  move  0  to #Erncd_Cnt
  do Get-Earnings
  do Print-Earnings

FROM  PS_PERSONNEL A, PS_FREQUENCY_TBL FT, PS_PERSON_NAME NM

WHERE (NM.EMPLID = $KEY
   OR NM.NAME_PSFORMAT LIKE $NAME)
  AND  A.COMP_FREQUENCY = FT.FREQUENCY_ID
  AND FT.EFF_STATUS     = 'A'
  AND FT.EFFDT          =
      (SELECT MAX(FT1.EFFDT)
      FROM PS_FREQUENCY_TBL FT1
      WHERE FT1.FREQUENCY_ID   = FT.FREQUENCY_ID
        AND FT1.EFF_STATUS     = FT.EFF_STATUS
        AND FT1.EFFDT         <= A.EFFDT)
  AND A.EMPLID = NM.EMPLID
END-SELECT
end-procedure


begin-procedure Print-Employee-Info

  move &A.COMPANY to $COMPANY  !for the Heading

  print &A.NAME                          (+2,1)
  print &A.EMPLID                        (0,32)

  do Format-DateTime(&A.HIRE_DT, $out, {DEFDATE}, '', '')
  print $out                             (0,42)
  do Format-DateTime(&A.SERVICE_DT, $out, {DEFDATE}, '', '')
  print $out                             (0,64)

  if not IsNull(&A.REHIRE_DT)
    do Format-DateTime(&A.REHIRE_DT, $out, {DEFDATE}, '', '')
    print $out                           (0,53)
  end-if

  if not IsNull(&A.TERMINATION_DT)
    do Format-DateTime(&A.TERMINATION_DT, $out, {DEFDATE}, '', '')
    print $out                           (0,75)
  end-if

  if not IsNull(&A.EXPECTED_RETURN_DT)
    do Format-DateTime(&A.EXPECTED_RETURN_DT, $out, {DEFDATE}, '', '')
    print $out                           (0,86)
  end-if

  print &A.EMPL_STATUS                   (0,97)
  print &A.REG_TEMP                      (0,102)
  print &A.FULL_PART_TIME                (0,108)
  print &A.FLSA_STATUS                   (0,115)
  print &A.EMPL_TYPE                     (0,121)

  print $Pay013cn_Job_Cd1                (+6,1)
  print $Pay013cn_Job_Cd2                (+1,1)
  print $Pay013cn_Title                  (0,9)
  print $Pay013cn_Dept_Id                (0,21)
  print $Pay013cn_Dept_Nm                (0,33)
  print $Hr_Bus_Unit                     (0,48)

  print &A.JOBCODE                       (+2,1)
  print &A.JOBTITLE_ABBRV                (0,9)
  print &A.DEPTID                        (0,21)
  print &A.DEPTNAME_ABBRV                (0,33)
  print &A.BUSINESS_UNIT                 (0,52)

  print $Pay013cn_Pay_Grp1               (+6,1)
  print $Pay013cn_Comp_Rt1               (0,12)
  print $Pay013cn_Comp_Frq1              (0,23)
  print $Pay013cn_Mth_Rt1                (0,40)
  print $Pay013cn_Ann_Rt1                (0,56)
  print $Pay013cn_Ern_Cd1                (0,68)
  print $Pay013cn_Cur_Mth1               (0,81)
  print $Pay013cn_QTD_Ern1               (0,95)
  print $Pay013cn_YTD_Ern1               (0,110)

  print $Pay013cn_Pay_Grp2               (+1,1)
  print $Pay013cn_Comp_Rt2               (0,12)
  print $Pay013cn_Comp_Frq2              (0,23)
  print $Pay013cn_Mth_Rt2                (0,40)
  print $Pay013cn_Ann_Rt2                (0,56)
  print $Pay013cn_Ern_Cd2                (0,68)
  print $Pay013cn_Cur_Mth2               (0,81)
  print $Pay013cn_QTD_Ern2               (0,95)
  print $Pay013cn_YTD_Ern2               (0,110)

  print &A.PAYGROUP                      (+2,1)
  print &A.COMPRATE                      (0,4)  edit 999999999,999.999999
  print &FT.FREQUENCY_TYPE               (0,27)
  print &A.MONTHLY_RT                    (0,28) edit 999999999,999.999999
  print &A.ANNUAL_RT                     (0,47) edit 999999999,999.999999

end-procedure


begin-procedure Check-Total-Gross
  move $AsOfQtr   to #AsOfQtr       !current Quarter
  move $AsOfMonth to #AsOfMonth     !current Month
  move $AsOfQtr   to #AsOfQtrSave
  move $AsOfMonth to #AsOfMonthSave
  move 0          to #GrossYTD      !initialize GrossYTD amount
  move 0          to #TotalGrossQTD !initialize GrossQTD amount
  move 'Y'        to $ProcUpdate    !initialize Process Update QTD switch

  do Get-Check-YTD
  move #GrossYTD          to #TotalGrossYTD
  move #GrossYTD          to #TotalGrossMTD

  if #AsOfMonth > 1
    move 'N'     to $ProcUpdate
    subtract 1 from #AsOfMonth
    move 0       to #GrossYTD
    do Get-Check-YTD
    subtract #GrossYTD from #TotalGrossMTD
  end-if

  if #AsOfQtr > 1
    move 'Y'     to $ProcUpdate
    subtract 1 from #AsOfQtr
    move 0       to #GrossYTD
    do Get-Check-YTD
    do Get-Total-Gross-QTD
  else
    move #TotalGrossYTD   to #TotalGrossQTD
  end-if

end-procedure


begin-procedure Get-Check-YTD

  do Format-Number(#AsOfQtr, $PreQtrCd, '0')
  do Format-Number(#AsOfMonth, $PreMnthCd, '00')
  do Format-Number(#AsOfMonth, $PreAsOfMth, '00')
  move #AsOfYYYY  to #PreAsOfYr
  move #AsOfQtr  to  #PreQtrCd
  move #AsOfMonth  to  #PreMnthCd

BEGIN-SELECT
C.WAGE_LOSS_PLAN
C.PROVINCE
C.BALANCE_QTR
C.TOTAL_GROSS_YTD

  add  &C.TOTAL_GROSS_YTD       to #GrossYTD

  move &C.WAGE_LOSS_PLAN        to $Wage_Loss_Plan
  move &C.PROVINCE              to $Prov
  move &C.TOTAL_GROSS_YTD       to #TotalQtd

  if $ProcUpdate = 'Y'
    do Update-QTDarray
  end-if


FROM  PS_CAN_CHECK_YTD C
WHERE C.EMPLID        = &A.EMPLID
  AND C.COMPANY       = &A.COMPANY
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = #PreAsOfYr
  AND C.BALANCE_PERIOD =
    (SELECT MAX(BALANCE_PERIOD)
     FROM PS_CAN_CHECK_YTD
     WHERE EMPLID         = C.EMPLID
       AND COMPANY        = C.COMPANY
       AND BALANCE_ID     = C.BALANCE_ID
       AND BALANCE_YEAR   = C.BALANCE_YEAR
       AND WAGE_LOSS_PLAN = C.WAGE_LOSS_PLAN
       AND PROVINCE       = C.PROVINCE
       AND BALANCE_QTR    <= #PreQtrCd
       AND BALANCE_PERIOD <= #PreMnthCd)
END-SELECT

end-procedure




begin-procedure Get-Earnings

BEGIN-SELECT
B.ERNCD
B.GRS_YTD
B.BALANCE_QTR,B.BALANCE_PERIOD,B.GRS_QTD,B.GRS_MTD

  let $ERNCD    = &B.ERNCD
  let #MONTHCD  = &B.BALANCE_PERIOD
  let #QTRCD    = &B.BALANCE_QTR
  move &B.GRS_MTD  to #MTD
  move &B.GRS_QTD  to #QTD
  move &B.GRS_YTD  to #YTD

  do Update-ETDarray


FROM  PS_CAN_ERN_BALANCE B
WHERE B.EMPLID        = &A.EMPLID
  AND B.EMPL_RCD      = &A.EMPL_RCD
  AND B.COMPANY       = &A.COMPANY
  AND B.SPCL_BALANCE  = 'N'
  AND B.BALANCE_ID    = $Calendar_Year_Id
  AND B.BALANCE_YEAR  = #AsOfYYYY
  AND B.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_ERN_BALANCE
       WHERE  EMPLID         = B.EMPLID
         AND  EMPL_RCD       = B.EMPL_RCD
         AND  COMPANY        = B.COMPANY
         AND  BALANCE_ID     = B.BALANCE_ID
         AND  BALANCE_YEAR   = B.BALANCE_YEAR
         AND  WAGE_LOSS_PLAN = B.WAGE_LOSS_PLAN
         AND  PROVINCE       = B.PROVINCE
         AND  SPCL_BALANCE   = B.SPCL_BALANCE
         AND  ERNCD          = B.ERNCD
         AND  BALANCE_PERIOD <= #AsOfMonthsave)
END-SELECT

end-procedure


begin-procedure Reset-Variables

!reset MTD, QTD, YTD, TotalQtd amounts
  move 0 to #MTD
  move 0 to #QTD
  move 0 to #YTD
  move 0 to #TotalQtd

!reset ETDarray
  move 0 to #i
  while #i <= #lastRow
    move 0 to #j
    while #j <= #lastCol
        put ' ' 0 0 0 into ETDarray(#i) Erncd(#j) GrsMtd(#j) GrsQtd(#j)
          GrsYtd(#j)
        add 1 to #j
    end-while
    add 1 to #i
  end-while


!reset QTDarray
  move 0 to #i
  while #i <= #lastRow
    move 0 to #j
    while #j <= #lastCol
        put ' ' ' ' 0 into QTDarray(#i) Wage_Loss_Plan(#j) Prov(#j)
          TotalQtd(#j)
        add 1 to #j
    end-while
    add 1 to #i
  end-while

end-procedure


begin-procedure Update-QTDarray
  move 0 to #i
  move 0 to #j


  while #i <= #lastRow

    get $iWage_Loss_Plan $iProv from QTDarray(#i) Wage_Loss_Plan(#j)
      Prov(#j)

    if rtrim($iWage_Loss_Plan, ' ') = ''         !if array entry is null
      if &C.BALANCE_QTR = #AsOfQtrSave

        put $Wage_Loss_Plan $Prov #TotalQtd into QTDarray(#i)
          Wage_Loss_Plan(#j) Prov(#j) TotalQtd(#j)
      end-if

      break                                      !exit the while
    else
                                                 !if array entry match
      if $Wage_Loss_Plan = $iWage_Loss_Plan and $Prov = $iProv

        array-subtract #TotalQtd from QTDarray(#i) TotalQtd(#j)
        break                                    !exit the while
      end-if
    end-if

    add 1 to #i
  end-while
end-procedure




begin-procedure Update-ETDarray
  move 0 to #i
  move 0 to #j

  while #i <= #lastRow

    get $iErnCd from ETDarray(#i) ErnCd(#j)
    if rtrim($iErnCd,' ') = ''     !if array entry is null
      put $ErnCd into ETDarray(#i) ErnCd(#j)
      do Accumulate-Earnings
      break                        !exit the while
    else
      if $ErnCd = $iErnCd          !if array entry match
        do Accumulate-Earnings
        break                      !exit the while
      else
        if #i = #lastRow
          put $lastCode #lastEarnings #lastEarnings #lastEarnings into
            ETDarray(#i) ErnCd(#j) GrsMtd(#j) GrsQtd(#j) GrsYtd(#j)
          break                    !exit the while
        end-if
      end-if
    end-if

    add 1 to #i
  end-while

end-procedure


begin-procedure Get-Total-Gross-QTD
  move 0 to #i
  move 0 to #j
  while #i <= #lastRow
    get $iWage_Loss_Plan #iTotalQtd from QTDarray(#i) Wage_Loss_Plan(#j)
      TotalQtd(#j)

    if rtrim($iWage_Loss_Plan,' ') = ''
      break                          !exit the while
    else
      add #iTotalQtd   to #TotalGrossQTD
    end-if

    add 1 to #i
  end-while
end-procedure


begin-procedure Accumulate-Earnings
  if #MonthCd = #AsOfMonthSave
    array-add #MTD to ETDarray(#i) GrsMtd(#j)
    add       #MTD to #SubTot_MTD
  end-if

  if #QtrCd = #AsOfQtrSave
    array-add #QTD to ETDarray(#i) GrsQtd(#j)
    add       #QTD to #SubTot_QTD
  end-if

  array-add #YTD   to ETDarray(#i) GrsYtd(#j)
  add       #YTD   to #SubTot_YTD
end-procedure



begin-procedure Print-Earnings
  move 0 to #i
  move 0 to #j
  while #i <= #lastRow
    get $ErnCd #MTD #QTD #YTD from ETDarray(#i) ErnCd(#j) GrsMtd(#j)
      GrsQtd(#j) GrsYtd(#j)

    if rtrim($ErnCd,' ') = ''
       break                          !exit the while
    else
       if #Erncd_Cnt = 0 
          print $ErnCd    (0,68)
       else
      print $ErnCd       (+1,68)
       end-if

      print #YTD         (0,105)  edit 99,999,999.99mi
      print #MTD         (0,75)   edit 99,999,999.99mi
      print #QTD         (0,90)   edit 99,999,999.99mi
    end-if

    add 1 to #i
    add 1 to #Erncd_Cnt
  end-while

end-procedure


begin-procedure Print-SubTotal

  print 'SUBTOTAL'       (+2,62)
  do Format-Number(#SubTot_MTD, $out, '99,999,999.99mi')
  print $out (0,75)
  do Format-Number(#SubTot_QTD, $out, '99,999,999.99mi')
  print $out (0,90)
  do Format-Number(#SubTot_YTD, $out, '99,999,999.99mi')
  print $out (0,105)

  let #SubTot_MTD = 0
  let #SubTot_QTD = 0
  let #SubTot_YTD = 0

end-procedure


begin-procedure Print-Grand-Total

  print $Pay013cn_Tot  (+3,62)

  do Format-Number(#TotalGrossMTD, $out, '99,999,999.99mi')
  print $out (0,75)
  do Format-Number(#TotalGrossQTD, $out, '99,999,999.99mi')
  print $out (0,90)
  do Format-Number(#TotalGrossYTD, $out, '99,999,999.99mi')
  print $out (0,105)
end-procedure
