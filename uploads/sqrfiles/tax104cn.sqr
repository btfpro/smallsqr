!*******************************************************************
!  TAX104CN: Calculate Pension Adj for Defined Benefit Pension Plans
!*******************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2010, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2010/11/02:12:50:47                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  813289                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  #ifdef PRCSSCHD
    do StdAPI-Init
  #endif
  move 'TAX104CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Tax104cn_Title_Pens_adj to $ReportTitle
  display $ReportTitle

  do Init-Report
  do Report
  #ifdef PRCSSCHD
    do StdAPI-Term
  #endif
end-report

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from TAX104CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('TAX104CN', 'TITLE_PENS_ADJ' , $Tax104cn_Title_Pens_adj , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PENSION_PLAN'   , $Tax104cn_Pension_plan   , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'YMPE'           , $Tax104cn_Ympe           , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PA_UNDER_YMPE'  , $Tax104cn_PA_under_ympe  , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PA_OVER_YMPE'   , $Tax104cn_PA_over_ympe   , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'CAL_YEAR'       , $Tax104cn_Cal_year       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PA_EXCL_FROM'   , $Tax104cn_Pa_excl_from   , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PA_EXCL_TO'     , $Tax104cn_Pa_excl_to     , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'PA_ENT_CEIL'    , $Tax104cn_Pa_ent_ceil    , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'HEADING1'       , $Tax104cn_Heading1       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'HEADING2'       , $Tax104cn_Heading2       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'HEADING3'       , $Tax104cn_Heading3       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'HEADING4'       , $Tax104cn_Heading4       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'HEADING5'       , $Tax104cn_Heading5       , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'NO_JOB_MSG'     , $Tax104cn_No_job_msg     , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'UPD_ERROR'      , $Tax104cn_Upd_error      , #dummy_width)
   do Get_Field_Information ('TAX104CN', 'INS_ERROR'      , $Tax104cn_Ins_error      , #dummy_width)

end-procedure

begin-heading 8
  #Include 'stdhdgtr.sqc'
   print $Tax104cn_Pension_plan    (+1,1)
   print &Z.Plan_Type          (0,16)
   print &Z.Benefit_Plan      (0,20)
   print $Tax104cn_Ympe       (0,+2)
   do Format-Number(#YMPE, $out, '9,999,999.99')
   print $out                       (0,+2)
   print $Tax104cn_PA_under_ympe    (0,+2)
   do Format-Number(&Z.PA_Pct_Under_YMPE, $out, '9.99')
   print $out                       (0,+2)
   print $Tax104cn_PA_over_ympe     (0,+2)
   do Format-Number(&Z.PA_Pct_Over_YMPE, $out, '9.99')
   print $out                       (0,+2)
   print $Tax104cn_Cal_year         (+1,1)
   print $CalYear                   (0,16)
   print $Tax104cn_Pa_excl_from     (0,+2)
   do Format-Number(&Z.PA_Exclude_From, $out, '9,999,999.99')
   print $out                       (0,+2)
   print $Tax104cn_Pa_excl_to       (0,+2)
   do Format-Number(&Z.PA_Exclude_To, $out, '9,999,999.99')
   print $out                       (0,+2)
   print $Tax104cn_Pa_ent_ceil      (0,+2)
   do Format-Number(&Z.PA_Ben_Ent_Ceiling, $out, '9,999,999.99')
   print $out                       (0,+2)

  if $CalYear < '1999'
     print $Tax104cn_Heading1                              (+2,1)
     print $Tax104cn_Heading2                              (0,50)
     print $Tax104cn_Heading3                              (0,109)
     print $Tax104cn_Heading4                              (0,165)
  else
     print $Tax104cn_Heading1                              (+2,1)
     print $Tax104cn_Heading2                              (0,50)
     print $Tax104cn_Heading5                              (0,109)
  end-if

end-heading



begin-procedure Init-Report

  if $Prcs_Process_Instance = ''
    do Prompts
  else
    #ifdef PRCSSCHD
      do Select-Canadian-YrEnd-Parameters
      do Convert-Parameters
    #endif
  end-if
  do Get-Calendar-Year-Id
  do Initialization

end-procedure



begin-procedure Prompts

  display ' '
  input $CalYear maxlen=4 '<<< Please Enter Calendar year for PA Calculation >>>' type=number
  let #CalYear = $CalYear


end-procedure



begin-procedure Initialization

  let $YearBegin = lpad(to_char(#CalYear),  2, '0') || '/' ||
                   '01' || '/' || '01'
  do Format-DateTime($YearBegin, $YearBegin, {DEFYMD}, '', {DEFDATE})
  do Convert-to-DTU-date($YearBegin, $CMP-YearBegin)
  let $YearEnd = lpad(to_char(#CalYear),  2, '0') || '/' ||
                 '12' || '/' || '31'
  do Format-DateTime($YearEnd, $YearEnd, {DEFYMD}, '', {DEFDATE})
  do Convert-to-DTU-date($YearEnd, $CMP-YearEnd)

  do Get-Current-DateTime

  do Get-Tax-Table-Data

  create-array name=PensData size=10 field=company:char         -
                                     field=wage-loss-plan:char  -
                                     field=province:char        -
                                     field=accum-earns:number   -
                                     field=accum-hrs:number     -
                                     field=prorate-PA:number
  create-array name=StdHrsData size=100 field=effdt:char        -
                                     field=std-hours:number     -
                                     field=pay-pds-per-year:number
end-procedure



begin-procedure Report

begin-SELECT
Z.PLAN_TYPE
Z.BENEFIT_PLAN
Z.PENSION_TYPE
Z.ERNCD_SPCL
Z.PA_PCT_UNDER_YMPE
Z.PA_PCT_OVER_YMPE
Z.PA_EXCLUDE_FROM
Z.PA_EXCLUDE_TO
Z.PA_BEN_ENT_CEILING
Z.PA_ANNUAL_BASE_HRS
  Do Get-Pen-Plan
  NEW-PAGE
FROM PS_PENSION_PLN_TBL Z
WHERE Z.PENSION_TYPE = 'B'
  AND Z.EFFDT        =
             (SELECT MAX(EFFDT)
                FROM PS_PENSION_PLN_TBL
               WHERE PLAN_TYPE    = Z.PLAN_TYPE
                 AND BENEFIT_PLAN = Z.BENEFIT_PLAN
                 AND EFFDT       <= $YearEnd)
end-SELECT

end-procedure


begin-procedure Get-Tax-Table-Data
begin-SELECT
Y.CPP_MAX_EARNS
Y.CPP_BASIC_EXEM
  let #YMPE = &Y.CPP_Max_Earns
FROM PS_CAN_TAX_TBL Y
WHERE Y.EFFDT =
             (SELECT MAX(EFFDT)
                FROM PS_CAN_TAX_TBL
               WHERE EFFDT <= $YearEnd)
end-SELECT
end-procedure


begin-procedure Get-Pen-Plan
begin-SELECT
A.EMPLID
A.EMPL_RCD
A.EFFDT
  do Convert-to-DTU-Date(&A.EffDt, $CMP-A-EffDt)
  if $CMP-A-Effdt < $CMP-YearBegin
    let $Plan_EffDt = $CMP-YearBegin
  else
    let $Plan_EffDt = $CMP-A-Effdt
  end-if
  let $EffDt = $Plan_EffDt
  Do Get-Calendar
  let #Plan_Begin_Month = #CalMonthCd
  let #Total_Months = 12 - #Plan_Begin_Month + 1
  do Get-Name
  do Get-Pens-Data
  if #Pension-Earns <> 0 and #Pension-Hours <> 0
    if $CalYear < '1999'
       do Calculate-PA
    else
       do Calculate-PA-1999-Onwards
    end-if
    do Prorate-PA
    do Update-Recs-Write-Report
  end-if

FROM  PS_PENSION_PLAN A
WHERE A.PLAN_TYPE      = &Z.Plan_Type
  AND A.BENEFIT_PLAN   = &Z.Benefit_Plan
  AND A.COVERAGE_ELECT = 'E'
  AND A.EFFDT          =
             (SELECT MAX(EFFDT)
                FROM PS_PENSION_PLAN
               WHERE EMPLID       = A.EMPLID
                 AND EMPL_RCD    = A.EMPL_RCD
                 AND PLAN_TYPE    = A.PLAN_TYPE
                 AND BENEFIT_PLAN = A.BENEFIT_PLAN
                 AND EFFDT       <= $YearEnd)
  AND (A.DEDUCTION_END_DT IS NULL or A.DEDUCTION_END_DT >= $YearBegin)
ORDER BY A.EMPLID ASC
end-SELECT
end-procedure


begin-procedure Get-Name
begin-SELECT
B.NAME
FROM  PS_NAMES B
WHERE B.EMPLID    = &A.EmplID
  AND B.NAME_TYPE = 'PRI'
  AND B.EFFDT =
      (SELECT MAX(BN.EFFDT)
       FROM   PS_NAMES BN
       WHERE  BN.EMPLID    = B.EMPLID
         AND  BN.NAME_TYPE = B.NAME_TYPE
         AND  BN.EFFDT    <= $YearEnd)
end-SELECT
end-procedure


begin-procedure Get-Pens-Data
  let #idx = 0
  let #Pension-Earns = 0
  let #Pension-Hours   = 0
begin-SELECT
C.COMPANY
C.WAGE_LOSS_PLAN
C.PROVINCE
C.BALANCE_YEAR

#ifdef DB2ALL
DECIMAL(SUM(C.GRS_YTD),15,3)       &C.Grs_YTD
DECIMAL(SUM(C.HRS_YTD),15,3)       &C.Hrs_YTD
#else
SUM(C.GRS_YTD)           &C.Grs_YTD
SUM(C.HRS_YTD)           &C.Hrs_YTD
#endif

C.EMPLID

  let #Grs_YTD = &C.Grs_YTD
  let #Hrs_YTD = &C.Hrs_YTD
  if  #Grs_YTD > 0
    add #Grs_YTD to #Pension-Earns
  else
    let #Grs_YTD = 0
  end-if
  if  #Hrs_YTD > 0
    add #Hrs_YTD to #Pension-Hours
  else
    let #Hrs_YTD = 0
  end-if
  if #idx < 10
    PUT &C.Company        INTO PENSDATA(#IDX) COMPANY
    PUT &C.Wage_Loss_Plan INTO PENSDATA(#IDX) WAGE-LOSS-PLAN
    PUT &C.Province       INTO PENSDATA(#IDX) PROVINCE
    PUT #Grs_YTD          INTO PENSDATA(#IDX) ACCUM-EARNS
    PUT #Hrs_YTD          INTO PENSDATA(#IDX) ACCUM-HRS
    let #entries = #idx
    add 1 to #idx
  else
    display '*** Array overflow; limited to 10 company/WLP/province combinations ***'
  end-if
FROM  PS_CAN_ERN_BALANCE C
WHERE C.EMPLID        = &A.EmplID
AND   C.BALANCE_YEAR = #CalYear
AND   C.BALANCE_ID    = $Calendar_Year_Id
AND   C.SPCL_BALANCE  = 'Y'
AND   C.ERNCD         = &Z.ErnCd_Spcl
AND   C.BALANCE_PERIOD       =
                 (SELECT MAX(D.BALANCE_PERIOD)
                   FROM  PS_CAN_ERN_BALANCE D
                   WHERE D.EMPLID         = C.EMPLID
                    AND  D.COMPANY        = C.COMPANY
                    AND  D.BALANCE_YEAR  = C.BALANCE_YEAR
                    AND  D.BALANCE_ID    = C.BALANCE_ID
                    AND  D.WAGE_LOSS_PLAN = C.WAGE_LOSS_PLAN
                    AND  D.PROVINCE       = C.PROVINCE
                    AND  D.EMPL_RCD       = C.EMPL_RCD
                    AND  D.ERNCD          = C.ERNCD)
GROUP BY C.COMPANY,
         C.WAGE_LOSS_PLAN,
         C.PROVINCE,
         C.BALANCE_YEAR,
         C.EMPLID
end-SELECT
end-procedure


begin-procedure Calculate-PA
 do Get-Annual-Base-Hrs
  let #pension-service  = round(#Pension-Hours / #Annual_Base_Hrs,4)
  let #annualized-earns = #Pension-Earns / #pension-service
  if #annualized-earns <= #YMPE
    let #under-YMPE-earns = #annualized-earns
    let #over-YMPE-earns  = 0
  else
    let #under-YMPE-earns    = #YMPE
    if  #annualized-earns   >= &Z.PA_Exclude_From
      if #annualized-earns  <= &Z.PA_Exclude_To
        let #over-YMPE-earns = &Z.PA_Exclude_From - #YMPE
      else
        let #under-exclude   = &Z.PA_Exclude_From - #YMPE
        let #over-exclude    = #annualized-earns - &Z.PA_Exclude_To
        let #over-YMPE-earns = #under-exclude + #over-exclude
      end-if
    else
      let #over-YMPE-earns   = #annualized-earns - #under-YMPE-earns
    end-if
  end-if
  let #ben-ent-under = ((&Z.PA_Pct_Under_YMPE / 100) * #under-YMPE-earns)
  let #ben-ent-over  = ((&Z.PA_Pct_Over_YMPE  / 100) * #over-YMPE-earns)
  let #ben-ent-total = #ben-ent-under + #ben-ent-over
  if #ben-ent-total  > &Z.PA_Ben_Ent_Ceiling
    let #ben-ent-total = &Z.PA_Ben_Ent_Ceiling
  end-if
  let #ben-ent-total = #ben-ent-total * #pension-service
  if $CalYear >= '1997'
    let #PA = round((9 * #ben-ent-total) - (600 * #pension-service),0)
  else
    let #PA = round((9 * #ben-ent-total) - (1000 * #pension-service),0)
  end-if

end-procedure

begin-procedure Calculate-PA-1999-Onwards
  let #annualized-earns = #Pension-Earns
  if #annualized-earns <= #YMPE
    let #under-YMPE-earns = #annualized-earns
    let #over-YMPE-earns  = 0
  else
    let #under-YMPE-earns    = #YMPE
    if  #annualized-earns   >= &Z.PA_Exclude_From
      if #annualized-earns  <= &Z.PA_Exclude_To
        let #over-YMPE-earns = &Z.PA_Exclude_From - #YMPE
      else
        let #under-exclude   = &Z.PA_Exclude_From - #YMPE
        let #over-exclude    = #annualized-earns - &Z.PA_Exclude_To
        let #over-YMPE-earns = #under-exclude + #over-exclude
      end-if
    else
      let #over-YMPE-earns   = #annualized-earns - #under-YMPE-earns
    end-if
  end-if
  let #ben-ent-under = ((&Z.PA_Pct_Under_YMPE / 100) * #under-YMPE-earns)
  let #ben-ent-over  = ((&Z.PA_Pct_Over_YMPE  / 100) * #over-YMPE-earns)
  let #ben-ent-total = #ben-ent-under + #ben-ent-over
  if #ben-ent-total  > &Z.PA_Ben_Ent_Ceiling
    let #ben-ent-total = &Z.PA_Ben_Ent_Ceiling
  end-if
  let #PA = round(9 * #ben-ent-total - 600,0)
  if #PA < 0
    let #PA = 0
  end-if

end-procedure

begin-procedure Get-Annual-Base-Hrs
 let $SetDt =  $AsOfToday
 do Convert-to-DTU-date($SetDt, $CMP-SetDt)
 do Get-Job
 if $CMP-SetDt > $CMP-YearBegin and $Stop = 'N'
   while $CMP-SetDt > $CMP-YearBegin and $Stop = 'N'
     do Get-Job-Again
   end-while
   do Cal-Annual-Base-Hrs
 else
   if $Stop = 'N'
     let #StdHrsPP = &J.Std_hours * ( 52 / #PayPeriods )
     let #Annual_Base_Hrs = #StdHrsPP * #PayPeriods * ( #Total_Months / 12 )
   else
     display 'No Job Found For this Emplid: ' noline
     display &A.Emplid
     let #Annual_base_hrs = &Z.PA_Annual_Base_Hrs
   end-if
 end-if
end-procedure

begin-procedure Get-Job
 let #index = 0
 let $Stop = 'Y'
begin-SELECT
J.STD_HOURS
J.EFFDT
J.COMPANY
J.PAYGROUP
   let $Stop = 'N'
   if #index < 100
     let $Job-company   = &J.Company
     let $Job-paygroup  = &J.Paygroup
     do Get-pay-periods-per-year

     do Convert-to-DTU-Date(&J.Effdt, $CMP-J-EffDt)
     PUT $CMP-J-EffDt INTO STDHRSDATA(#INDEX) EFFDT
     PUT &J.Std_hours INTO STDHRSDATA(#INDEX) STD-HOURS
     let $SetDt      = &J.Effdt
     let $CMP-SetDt  = $CMP-J-Effdt
     let #stdhrs_ind = #index
     add 1 to #index
   else
     display '*** Array overflow; limited to 100 jobs ***'
   end-if

FROM  PS_JOB J
WHERE J.EMPLID    = &A.EmplID
  AND J.EMPL_RCD = &A.EMPL_RCD
  AND J.EFFDT     =
             (SELECT MAX(K.EFFDT)
                FROM PS_JOB K
               WHERE K.EMPLID    = J.EMPLID
                 AND K.EMPL_RCD = J.EMPL_RCD
                 AND K.EFFDT    <= $SetDt)
  AND J.EFFSEQ    =
             (SELECT MAX(L.EFFSEQ)
                FROM PS_JOB L
               WHERE L.EMPLID    = J.EMPLID
                 AND L.EMPL_RCD = J.EMPL_RCD
                 AND L.EFFDT     = J.EFFDT)
end-SELECT
end-procedure


begin-procedure Get-Job-Again
 Let $Stop = 'Y'
begin-SELECT
J2.STD_HOURS
J2.EFFDT
J2.COMPANY
J2.PAYGROUP
   Let $Stop = 'N'
   if #index < 100
     let $Job-company   = &J2.Company
     let $Job-paygroup  = &J2.Paygroup
     do Get-pay-periods-per-year

     do Convert-to-DTU-Date(&J2.Effdt, $CMP-J2-EffDt)
     PUT $CMP-J2-EffDt INTO STDHRSDATA(#INDEX) EFFDT
     PUT &J2.Std_Hours INTO STDHRSDATA(#INDEX) STD-HOURS
     Let $SetDt      = &J2.Effdt
     Let $CMP-SetDt  = $CMP-J2-Effdt
     let #stdhrs_ind = #index
     add 1 to #index
   else
     display '*** Array overflow; limited to 100 jobs ***'
     Let $Stop = 'Y'
   end-if

FROM  PS_JOB J2
WHERE J2.EMPLID    = &A.EmplID
  AND J2.EMPL_RCD = &A.EMPL_RCD
  AND J2.EFFDT     =
             (SELECT MAX(K2.EFFDT)
                FROM PS_JOB K2
               WHERE K2.EMPLID    = J2.EMPLID
                 AND K2.EMPL_RCD = J2.EMPL_RCD
                 AND K2.EFFDT     < $SetDt)
  AND J2.EFFSEQ     =
             (SELECT MAX(L2.EFFSEQ)
                FROM PS_JOB L2
               WHERE L2.EMPLID    = J2.EMPLID
                 AND L2.EMPL_RCD = J2.EMPL_RCD
                 AND L2.EFFDT     = J2.EFFDT)
end-SELECT
end-procedure


begin-procedure Get-pay-periods-per-year

begin-SELECT
L.PAY_PDS_PER_YEAR

  PUT &L.pay_pds_per_year INTO STDHRSDATA(#INDEX) PAY-PDS-PER-YEAR
  let #PayPeriods = &L.pay_pds_per_year

FROM PS_PAY_CALENDAR  L
WHERE L.COMPANY      = $Job-company
  AND L.PAYGROUP     = $Job-paygroup
  AND L.PAY_END_DT   =
    (SELECT MAX(PAY_END_DT)
       FROM PS_PAY_CALENDAR
      WHERE COMPANY     = L.COMPANY
        AND PAYGROUP    = L.PAYGROUP
        AND PAY_END_DT <= $YearEnd)

end-SELECT
end-procedure


begin-procedure Cal-Annual-Base-Hrs
  move 0 to #index
  let #MonthCd         = 13
  let #Annual_Base_Hrs = 0
  let #Total_Months    = 0
  get #Save_Std_hours from StdHrsData(0) Std-hours
  while #index <= #stdhrs_ind
    get $EffDt     from StdHrsData(#index) EffDt
    get #Std_Hours from StdHrsData(#index) Std-Hours
    get #PayPeriods from StdHrsData(#index) Pay-Pds-Per-Year

    if $EffDt < $CMP-YearBegin  or $Effdt < $Plan_EffDt
     let $Effdt = $Plan_Effdt
    end-if
    do Get-Calendar
    if #CalMonthcd >= #Plan_Begin_Month
      let #Months  = #MonthCd - #CalMonthCd
      let #MonthCd = #CalMonthCd
      add 1 to #index
    else
      if #MonthCd > #Plan_Begin_Month
        let #Months  = #MonthCd - #Plan_Begin_Month
        let #MonthCd = #CalMonthCd
      end-if
      add 999 to #index
    end-if
    if #Months > 0
      let #Total_Months     = #Total_Months + #Months
      let #StdHrsPP         = #Std_hours * ( 52 / #PayPeriods )
      let #Prorate_Base_Hrs = #StdHrsPP * #PayPeriods  * #Months / 12
      let #Annual_Base_Hrs  = #Annual_Base_Hrs + #Prorate_Base_Hrs
      if #Save_Std_hours <> #Std_Hours
        display '*** Different Std Hours *** ' noline
        display &A.EmplID noline
        display ' New StdHrs: ' noline
        display #Std_Hours  noline
        display ' Old StdHrs: ' noline
        display #Save_Std_Hours
        let #Save_Std_Hours = #Std_Hours
      end-if
    end-if
  end-while
  if #Total_Months > 12
    let #Total_Months = 12
  end-if
  let #Annual_Base_Hrs = #Annual_Base_Hrs * 12 / #Total_Months
end-procedure


begin-procedure Get-Calendar
  do Convert-From-DTU-Date($EffDt, $Nat-EffDt)
begin-SELECT loops=1
G1.BALANCE_YEAR
G1.BALANCE_PERIOD
G.COMPANY
G.PAY_END_DT
 if &G1.Balance_Year = #CalYear
   let #CalMonthCd = &G1.Balance_Period
 else
   let #CalMonthCd = 1
 end-if

FROM  PS_PAY_CALENDAR G, PS_PAY_CAL_BAL_ID G1
WHERE G.COMPANY = G1.COMPANY AND G.PAYGROUP = G1.PAYGROUP
  AND G.PAY_END_DT = G1.PAY_END_DT AND G1.BALANCE_ID = $Calendar_Year_Id
  AND G.PAY_BEGIN_DT <= $Nat-EffDt
  AND G.PAY_END_DT   >= $Nat-EffDt
ORDER BY G.COMPANY ASC, G.PAY_END_DT ASC
end-SELECT
end-procedure


begin-procedure Prorate-PA
  move 0 to #idx
  let #unprorated-PA = #PA
  while #idx <= #entries
    get #accum-earns   from PensData(#idx) accum-earns
    let #prorate-PA    = round((#accum-earns / #Pension-Earns) * #PA,0)
    let #unprorated-PA = #unprorated-PA - #prorate-PA
    put #prorate-PA    into PensData(#idx) prorate-PA
    add 1 to #idx
  end-while
  get #prorate-PA from PensData(#entries) prorate-PA
  let #prorate-PA = #prorate-PA + #unprorated-PA
  put #prorate-PA into PensData(#idx) prorate-PA
end-procedure


begin-procedure Update-Recs-Write-Report
  move 0 to #idx
  while #idx <= #entries
    get $company        from PensData(#idx) company
    get $wage-loss-plan from PensData(#idx) wage-loss-plan
    get $province       from PensData(#idx) province
    get #accum-earns    from PensData(#idx) accum-earns
    get #accum-hrs      from PensData(#idx) accum-hrs
    get #prorate-PA     from PensData(#idx) prorate-PA
    let $Error-Msg = ' '
    do Get-Latest-Tax-Bal-Rec
    do Update-Tax-Bal-Rec
    do Write-Report
    add 1 to #idx
  end-while
end-procedure


begin-procedure Get-Latest-Tax-Bal-Rec
begin-SELECT
E.BALANCE_PERIOD
E.BALANCE_QTR

FROM  PS_CAN_TAX_BALANCE E
WHERE E.EMPLID         = &A.EmplID
  AND E.COMPANY        = $Company
  AND E.BALANCE_YEAR   = #CalYear
  AND E.BALANCE_ID     = $Calendar_Year_Id
  AND E.WAGE_LOSS_PLAN = $Wage-Loss-Plan
  AND E.PROVINCE       = $Province
  AND E.BALANCE_PERIOD        =
                 (SELECT MAX(BALANCE_PERIOD)
                   FROM  PS_CAN_TAX_BALANCE F
                   WHERE F.EMPLID         = E.EMPLID
                    AND  F.COMPANY        = E.COMPANY
                    AND  F.BALANCE_YEAR   = E.BALANCE_YEAR
                    AND  F.BALANCE_ID     = E.BALANCE_ID
                    AND  F.WAGE_LOSS_PLAN = E.WAGE_LOSS_PLAN
                    AND  F.PROVINCE       = E.PROVINCE)
  AND  E.TAX_CLASS_CAN  =
                 (SELECT MAX(TAX_CLASS_CAN)
                   FROM  PS_CAN_TAX_BALANCE F1
                   WHERE F1.EMPLID         = E.EMPLID
                    AND  F1.COMPANY        = E.COMPANY
                    AND  F1.BALANCE_YEAR   = E.BALANCE_YEAR
                    AND  F1.BALANCE_ID     = E.BALANCE_ID
                    AND  F1.WAGE_LOSS_PLAN = E.WAGE_LOSS_PLAN
                    AND  F1.PROVINCE       = E.PROVINCE
                    AND  F1.BALANCE_PERIOD = E.BALANCE_PERIOD)
end-SELECT
end-procedure


begin-procedure Update-Tax-Bal-Rec

  do Get-Latest-CPA-Row

  if $CPA-Row-Found = 'Y' and
       &G.BALANCE_PERIOD = &E.Balance_Period

     do Update-CPA-Row

  else
     add #Prorate-PA to #CPA-Tax-YTD
     add #Prorate-PA to #CPA-Tax-QTD
     add #Prorate-PA to #CPA-Tax-MTD
     do Insert-CPA-Row
  end-if

end-procedure

begin-procedure Update-CPA-Row
begin-SQL  on-error=Bad-Update
UPDATE PS_CAN_TAX_BALANCE
SET    TAX_YTD        = TAX_YTD + #Prorate-PA,
       TAX_QTD        = TAX_QTD + #Prorate-PA,
       TAX_MTD        = TAX_MTD + #Prorate-PA
WHERE  EMPLID         = &A.EmplID
  AND  COMPANY        = $Company
  AND  BALANCE_YEAR   = #CalYear
  AND  BALANCE_ID     = $Calendar_Year_Id
  AND  WAGE_LOSS_PLAN = $Wage-Loss-Plan
  AND  PROVINCE       = $Province
  AND  BALANCE_PERIOD = &E.Balance_Period
  AND  BALANCE_QTR    = &E.Balance_Qtr
  AND  TAX_CLASS_CAN  = 'CPA'
end-SQL

end-procedure

begin-procedure Get-Latest-CPA-Row

  move 'N' to $CPA-Row-Found

  move 0.00 to #CPA-Tax-YTD
  move 0.00 to #CPA-Tax-QTD
  move 0.00 to #CPA-Tax-MTD

begin-SELECT
G.TAX_YTD
G.TAX_QTD
G.TAX_MTD
G.BALANCE_PERIOD

  move 'Y' to $CPA-Row-Found

  move &G.TAX_YTD    to #CPA-Tax-YTD
  move &G.TAX_QTD    to #CPA-Tax-QTD
  move &G.TAX_MTD    to #CPA-Tax-MTD

FROM PS_CAN_TAX_BALANCE G
WHERE  G.EMPLID         = &A.EmplID
  AND  G.COMPANY        = $Company
  AND  G.BALANCE_YEAR   = #CalYear
  AND  G.BALANCE_ID     = $Calendar_Year_Id
  AND  G.WAGE_LOSS_PLAN = $Wage-Loss-Plan
  AND  G.PROVINCE       = $Province
  AND  G.TAX_CLASS_CAN  = 'CPA'
  AND  G.BALANCE_PERIOD =
          (SELECT MAX(BALANCE_PERIOD)
             FROM PS_CAN_TAX_BALANCE
             WHERE EMPLID          = G.EMPLID
               AND COMPANY         = G.COMPANY
               AND BALANCE_ID      = G.BALANCE_ID
               AND BALANCE_YEAR    = G.BALANCE_YEAR
               AND WAGE_LOSS_PLAN  = G.WAGE_LOSS_PLAN
               AND PROVINCE        = G.PROVINCE
               AND TAX_CLASS_CAN   = G.TAX_CLASS_CAN
               AND BALANCE_PERIOD <= &E.Balance_Period)
end-SELECT
end-procedure

begin-procedure Insert-CPA-Row
begin-SQL  on-error=Bad-Insert
INSERT INTO PS_CAN_TAX_BALANCE
  (EMPLID,
   COMPANY,
   BALANCE_ID,
   BALANCE_YEAR,
   WAGE_LOSS_PLAN,
   PROVINCE,
   BALANCE_QTR,
   BALANCE_PERIOD,
   TAX_CLASS_CAN,
   NLGRS_YTD,
   NLGRS_QTD,
   NLGRS_MTD,
   TXGRS_YTD,
   TXGRS_QTD,
   TXGRS_MTD,
   TAX_YTD,
   TAX_QTD,
   TAX_MTD)
VALUES
  (&A.EmplID,
   $Company,
   $Calendar_Year_Id,
   #CalYear,
   $Wage-Loss-Plan,
   $Province,
   &E.Balance_Qtr,
   &E.Balance_Period,
   'CPA',
   0,
   0,
   0,
   0,
   0,
   0,
   #CPA-Tax-YTD,
   #CPA-Tax-QTD,
   #CPA-Tax-MTD)
end-SQL

end-procedure

begin-procedure Write-Report
  print &A.EmplID                    (+1,1)
  print &B.Name                      (0,16)
  print $company                     (0,52)
  print $wage-loss-plan              (0,68)
  print $province                    (0,86,2)
  do Format-Number(#accum-earns, $out, '99,999,999.99')
  print $out                         (0,104)

  if $CalYear < '1999'
     do Format-Number(#accum-hrs, $out, '999,999.99')
     print $out                         (0,130)
     if $Error-Msg = ' '
        do Format-Number(#prorate-PA, $out, '99,999,999.99')
        print $out                       (0,146)
        do Format-Number(#pension-service, $out, '9.9999')
        print $out                       (0,165)
     else
        print $Error-Msg                 (0,146)
     end-if
   else
     if $Error-Msg = ' '
        do Format-Number(#prorate-PA, $out, '99,999,999.99')
        print $out                       (0,130)
     else
        print $Error-Msg                 (0,130)
     end-if
   end-if

end-procedure


begin-procedure Bad-Insert
  let $Error-Msg = $Tax104cn_Ins_error
end-procedure

begin-procedure Bad-Update
  let $Error-Msg = $Tax104cn_Upd_error
end-procedure

begin-procedure Convert-Parameters
  move #RC_CAN_YE.Pens_Adj_Cal_Year   to #CalYear

  do Format-Number(#CalYear, $CalYear, '9999')
end-procedure


#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date comparisons
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'  !Routines for year end tax parameters
#Include 'stdapi.sqc'    !Update Process API
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
