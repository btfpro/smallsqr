! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSTREE: PS Tree Structure Edits report                             *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                     *
!                                                                      *
!***********************************************************************




!----------------------------------------------------------------------!
! Procedure: SYSTREE-Main                              !
! Descr:     System table audit against PSMENUITEM table:              !
!            MENUI-1: Verify Menu Items reference a valid Menu.        !
!----------------------------------------------------------------------!

begin-procedure SYSTREE-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Tree Definition Audit'
    do  SYSTREE-StrctLvl-Record-Exist
    do  SYSTREE-StrctLvl-Page-Exist
    do  SYSTREE-StrctNode-Record-Exist
    do  SYSTREE-StrctNode-Field-Exist
    do  SYSTREE-StrctNode-Page-Exist
    do  SYSTREE-StrctDtl-Record-Exist
    do  SYSTREE-StrctDtl-Field-Exist
    do  SYSTREE-StrctDtl-Page-Exist
    do  SYSTREE-StrctLvl-Summary-Exist
    do  SYSTREE-StrctLvl-Menu-Bar-Exist
    do  SYSTREE-StrctNode-Menu-Bar-Exist
    do  SYSTREE-StrctDtl-Menu-Bar-Exist
    do  SYSTREE-StrctLvl-Menu-Pnl-Exist
    do  SYSTREE-StrctNode-Menu-Pnl-Exist
    do  SYSTREE-StrctDtl-Menu-Pnl-Exist
    do  SYSTREE-Tree-Level-Count
    do  SYSTREE-TreeDef-Node-Count
    do  SYSTREE-TreeDef-Leaf-Count
    do  SYSTREE-Tree-Strct-Exist
    do  SYSTREE-Tree-Query-Count
    do  SYSTREE-Tree-SelCtl-Exist
    do  SYSTREE-Tree-Level-Use
    do  SYSTREE-Tree-Level-Exist
    do  SYSTREE-Tree-Node-Exist
    do  SYSTREE-Tree-Leaf-Exist
    do  SYSTREE-Tree-Leaf-Valid-Ranges
    do  SYSTREE-Tree-Leaf-Without-Node
    do  SYSTREE-Tree-Node-Invalid-Branch
    do  SYSTREE-Tree-Leaf-Invalid-Branch
    do  SYSTREE-TreeBranch-Node-Count
    do  SYSTREE-TreeBranch-Leaf-Count
    do  SYSTREE-Tree-Node-Num
    do  SYSTREE-Tree-Orphans-Exist
    do  SYSTREE-Tree-Node-Count-Non-Zero
    do  SYSTREE-Tree-Leaf-Count-Non-Zero


    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure




#define C_TreeStrctId  3
#define C_Descr        24
#define C_MenuName     57
#define C_BarName      85
#define C_PnlName      85


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctLvl-RecName-Exist                           !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-01: Verify Tree Structure Level Record names.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctLvl-Record-Exist

#define C_LevelRecName 57

   let $AuditDescr = '(TREE-01) Tree Structure table contains Level '
      || 'Record name that does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #numofhdr        =  3

   put 'Tree Structure ID'      #Start1 21 into printarray(0)
   put 'Description'            #Start2 31 into printarray(1)
   put 'Level Record'           #Start3 16 into printarray(2)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS1_TreeStrctId
A.DESCR            &TreeS1_Descr
A.LEVEL_RECNAME    &TreeS1_LevelRecName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS1_TreeStrctId  (+1, #Start1)
   print &TreeS1_Descr        ( 0, #Start2)
   print &TreeS1_LevelRecName ( 0, #Start3)

FROM PSTREESTRCT A
WHERE A.LEVEL_RECNAME <> ' '
! AND A.TREE_STRCT_ID <> 'ACCESS_GROUP'
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECDEFN B
  WHERE B.RECNAME = A.LEVEL_RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctLvl-PnlName-Exist                           !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-02: Verify Tree Structure Level Page names.         !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctLvl-Page-Exist

#define C_LevelPnlName 57

   move 0 to #rows
   let $AuditDescr = '(TREE-02) Tree Structure table contains Level '
      || 'Page name that does not exist in Page Definition table:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #numofhdr        =  3

   put 'Tree Structure ID'      #Start1 21 into printarray(0)
   put 'Description'            #Start2 31 into printarray(1)
   put 'Level Page'           #Start3 19 into printarray(2)




begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS2_TreeStrctId
A.DESCR            &TreeS2_Descr
A.LEVEL_PNLNAME    &TreeS2_LevelPnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS2_TreeStrctId  (+1, #Start1)
   print &TreeS2_Descr        ( 0, #Start2)
   print &TreeS2_LevelPnlName ( 0, #Start3)

FROM PSTREESTRCT A
WHERE A.LEVEL_PNLNAME <> ' '
! AND A.TREE_STRCT_ID <> 'ACCESS_GROUP'
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSPNLDEFN B
    WHERE B.PNLNAME = A.LEVEL_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctNode-Record-Exist                           !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-03: Verify Tree Structure Node Record names.         !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctNode-Record-Exist

#define C_NodeRecName  57

   move 0 to #rows
   let $AuditDescr = '(TREE-03) Tree Structure table contains Node '
      || 'Record name that does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #numofhdr        =  3

   put 'Tree Structure ID'      #Start1 21 into printarray(0)
   put 'Description'            #Start2 31 into printarray(1)
   put 'Node Record'            #Start3 19 into printarray(2)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS3_TreeStrctId
A.DESCR            &TreeS3_Descr
A.NODE_RECNAME     &TreeS3_NodeRecName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS3_TreeStrctId  (+1, #Start1)
   print &TreeS3_Descr        ( 0, #Start2)
   print &TreeS3_NodeRecName  ( 0, #Start3)

FROM PSTREESTRCT A
WHERE A.NODE_RECNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECDEFN B
  WHERE B.RECNAME = A.NODE_RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctNode-Field-Exist                            !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-04: Verify Tree Structure Node Field names.          !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctNode-Field-Exist

#define C_NodeRecName  57
#define C_NodeFldName  75

   let $AuditDescr = '(TREE-04) Tree Structure table contains Node '
      || 'Field name that does not exist in RecordField table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 75
   let #numofhdr        =  4

   put 'Tree Structure ID'      #Start1 21 into printarray(0)
   put 'Description'            #Start2 31 into printarray(1)
   put 'Node Record'            #Start3 19 into printarray(2)
   put 'Node Field'             #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS4_TreeStrctId
A.DESCR            &TreeS4_Descr
A.NODE_RECNAME     &TreeS4_NodeRecName
A.NODE_FIELDNAME   &TreeS4_NodeFldName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS4_TreeStrctId  (+1, #Start1)
   print &TreeS4_Descr        ( 0, #Start2)
   print &TreeS4_NodeRecName  ( 0, #Start3)
   print &TreeS4_NodeFldName  ( 0, #Start4)

FROM PSTREESTRCT A
WHERE A.NODE_FIELDNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECFIELD B
  WHERE B.FIELDNAME = A.NODE_FIELDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctNode-PnlName-Exist                          !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREES-05: Verify Tree Structure Node Page names.          !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctNode-Page-Exist

#define C_NodeRecName  57
#define C_NodePnlName  75

   move 0 to #rows
   let $AuditDescr = '(TREE-05) Tree Structure table contains Node '
      || 'Page name that does not exist in Page Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 75
   let #numofhdr        =  4

   put 'Tree Structure ID'      #Start1 21 into printarray(0)
   put 'Description'            #Start2 31 into printarray(1)
   put 'Node Record'            #Start3 19 into printarray(2)
   put 'Node Page'             #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS5_TreeStrctId
A.DESCR            &TreeS5_Descr
A.NODE_RECNAME     &TreeS5_NodeRecName
A.NODE_PNLNAME     &TreeS5_NodePnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS5_TreeStrctId  (+1, #Start1)
   print &TreeS5_Descr        ( 0, #Start2)
   print &TreeS5_NodeRecName  ( 0, #Start3)
   print &TreeS5_NodePnlName  ( 0, #Start4)

FROM PSTREESTRCT A
WHERE A.NODE_PNLNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSPNLDEFN B
    WHERE B.PNLNAME = A.NODE_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctDtl-Record-Exist                             !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-06: Verify Tree Structure Detail Record names.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctDtl-Record-Exist

#define C_DtlRecName   57


   let $AuditDescr = '(TREE-06) Tree Structure table contains Detail '
      || 'Record name that does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #numofhdr        =  3

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Detail Record'           #Start3 19 into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS6_TreeStrctId
A.DESCR            &TreeS6_Descr
A.DTL_RECNAME      &TreeS6_DtlRecName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS6_TreeStrctId  (+1, #Start1)
   print &TreeS6_Descr        ( 0, #Start2)
   print &TreeS6_DtlRecName   ( 0, #Start3)

FROM PSTREESTRCT A
WHERE A.DTL_RECNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECDEFN B
  WHERE B.RECNAME = A.DTL_RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctDtl-Field-Exist                             !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-07: Verify Tree Structure Detail Field names.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctDtl-Field-Exist

#define C_DtlRecName   57
#define C_DtlFldName   75


   let $AuditDescr = '(TREE-07) Tree Structure table contains Detail '
      || 'Record name that does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 75
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Detail Record'           #Start3 19 into printarray(2)
   put 'Detail Field'            #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS7_TreeStrctId
A.DESCR            &TreeS7_Descr
A.DTL_RECNAME      &TreeS7_DtlRecName
A.DTL_FIELDNAME    &TreeS7_DtlFldName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS7_TreeStrctId  (+1, #Start1)
   print &TreeS7_Descr        ( 0, #Start2)
   print &TreeS7_DtlRecName   ( 0, #Start3)
   print &TreeS7_DtlFldName   ( 0, #Start4)

FROM PSTREESTRCT A
WHERE A.DTL_FIELDNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECFIELD B
  WHERE B.FIELDNAME = A.DTL_FIELDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctDtl-PnlName-Exist                           !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-08: Verify Tree Structure Detail Page names.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctDtl-Page-Exist

#define C_DtlRecName   57
#define C_DtlPnlName   75


   let $AuditDescr = '(TREE-08) Tree Structure table contains Detail '
      || 'Page name that does not exist in Page Definition table:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 75
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Detail Record'           #Start3 19 into printarray(2)
   put 'Detail Page'            #Start4 21 into printarray(3)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS8_TreeStrctId
A.DESCR            &TreeS8_Descr
A.DTL_RECNAME      &TreeS8_DtlRecName
A.DTL_PNLNAME      &TreeS8_DtlPnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS8_TreeStrctId  (+1, #Start1)
   print &TreeS8_Descr        ( 0, #Start2)
   print &TreeS8_DtlRecName   ( 0, #Start3)
   print &TreeS8_DtlPnlName   ( 0, #Start4)

FROM PSTREESTRCT A
WHERE A.DTL_PNLNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSPNLDEFN B
  WHERE B.PNLNAME = A.DTL_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctLvl-Summary-Exist                           !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-09: Verify Tree Structure for Summary Trees.         !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctLvl-Summary-Exist

   let $AuditDescr = '(TREE-09) Tree Structure table contains Summary '
      || 'Tree that does not exist in Tree Level table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 75
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Detail Set ID'           #Start3 19 into printarray(2)
   put 'Detail Tree Name'        #Start4 21 into printarray(3)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS9_TreeStrctId
A.DESCR            &TreeS9_Descr
A.DTL_SETID        &TreeS9_DtlSetId
A.DTL_TREE_NAME    &TreeS9_DtlTreeName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS9_TreeStrctId  (+1, #Start1)
   print &TreeS9_Descr        ( 0, #Start2)
   print &TreeS9_DtlSetId     ( 0, #Start3)
   print &TreeS9_DtlTreeName  ( 0, #Start4)

FROM PSTREESTRCT A
WHERE A.TREE_STRCT_TYPE = 'S'
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSTREELEVEL B
  WHERE B.SETID = A.DTL_SETID
    AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND B.TREE_NAME = A.DTL_TREE_NAME
    AND B.TREE_LEVEL_NUM = A.DTL_TREE_LEVEL_NUM)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctLvl-Menu-Bar-Exist                          !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-10: Verify Tree Structure Level Menu/Bar info.      !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctLvl-Menu-Bar-Exist


   let $AuditDescr = '(TREE-10) Tree Structure table contains Level '
      || 'Menu-Menu Bar combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Menu Name    '           #Start3 24 into printarray(2)
   put 'Bar Name'                #Start4 21 into printarray(3)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS10_TreeStrctId
A.DESCR            &TreeS10_Descr
A.LEVEL_MENUNAME   &TreeS10_MenuName
A.LEVEL_BARNAME    &TreeS10_BarName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS10_TreeStrctId   (+1, #Start1)
   print &TreeS10_Descr         ( 0, #Start2)
   print &TreeS10_MenuName      ( 0, #Start3)
   print &TreeS10_BarName       ( 0, #Start4)

FROM PSTREESTRCT A
WHERE (A.LEVEL_BARNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSMENUITEM B
    WHERE B.MENUNAME = A.LEVEL_MENUNAME
    AND B.BARNAME = A.LEVEL_BARNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctNode-Menu-Bar-Exist                         !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-11: Verify Tree Structure Node Menu/Bar info.       !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctNode-Menu-Bar-Exist


   let $AuditDescr = '(TREE-11) Tree Structure table contains Node '
      || 'Menu-Menu Bar combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Node Menu Name'          #Start3 24 into printarray(2)
   put 'Node Bar Name'           #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS11_TreeStrctId
A.DESCR            &TreeS11_Descr
A.NODE_MENUNAME    &TreeS11_MenuName
A.NODE_BARNAME     &TreeS11_BarName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS11_TreeStrctId   (+1, #Start1)
   print &TreeS11_Descr         ( 0, #Start2)
   print &TreeS11_MenuName      ( 0, #Start3)
   print &TreeS11_BarName       ( 0, #Start4)

FROM PSTREESTRCT A
WHERE (A.NODE_BARNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSMENUITEM B
    WHERE B.MENUNAME = A.NODE_MENUNAME
    AND B.BARNAME = A.NODE_BARNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctDtl-Menu-Bar-Exist                          !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-12: Verify Tree Structure Dtl Menu/Bar info.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctDtl-Menu-Bar-Exist

   move 0 to #rows
   let $AuditDescr = '(TREE-12) Tree Structure table contains Detail '
      || 'Menu-Menu Bar combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Detail Menu Name'        #Start3 24 into printarray(2)
   put 'Detail Bar Name'         #Start4 21 into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS12_TreeStrctId
A.DESCR            &TreeS12_Descr
A.DTL_MENUNAME     &TreeS12_MenuName
A.DTL_BARNAME      &TreeS12_BarName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS12_TreeStrctId   (+1 ,#Start1)
   print &TreeS12_Descr         ( 0 ,#Start2)
   print &TreeS12_MenuName      ( 0 ,#Start3)
   print &TreeS12_BarName       ( 0 ,#Start4)

FROM PSTREESTRCT A
WHERE (A.DTL_BARNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSMENUITEM B
    WHERE B.MENUNAME = A.DTL_MENUNAME
    AND B.BARNAME = A.DTL_BARNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctLvl-Menu-Pnl-Exist                          !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREES-1: Verify Tree Structure Lvl Menu/Pnl info.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctLvl-Menu-Pnl-Exist


   let $AuditDescr = '(TREE-13) Tree Structure table contains Level '
      || 'Menu-Page combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Menu Name'               #Start3 24 into printarray(2)
   put 'Page Name'              #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS13_TreeStrctId
A.DESCR            &TreeS13_Descr
A.LEVEL_MENUNAME   &TreeS13_MenuName
A.LEVEL_PNLNAME    &TreeS13_PnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS13_TreeStrctId   (+1, #Start1)
   print &TreeS13_Descr         ( 0, #Start2)
   print &TreeS13_MenuName      ( 0, #Start3)
   print &TreeS13_PnlName       ( 0, #Start4)

FROM PSTREESTRCT A
WHERE (A.LEVEL_MENUNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSPNLGROUP B, PSMENUITEM C
    WHERE C.MENUNAME = A.LEVEL_MENUNAME
    AND B.PNLGRPNAME = C.PNLGRPNAME
    AND B.PNLNAME = A.LEVEL_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctNode-Menu-Pnl-Exist                         !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-14: Verify Tree Structure Node Menu/Pnl info.       !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctNode-Menu-Pnl-Exist


   let $AuditDescr = '(TREE-14) Tree Structure table contains Node '
      || 'Menu-Page combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Menu Name'               #Start3 24 into printarray(2)
   put 'Page Name'              #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS14_TreeStrctId
A.DESCR            &TreeS14_Descr
A.NODE_MENUNAME    &TreeS14_MenuName
A.NODE_PNLNAME     &TreeS14_PnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS14_TreeStrctId   (+1, #Start1)
   print &TreeS14_Descr         ( 0, #Start2)
   print &TreeS14_MenuName      ( 0, #Start3)
   print &TreeS14_PnlName       ( 0, #Start4)

FROM PSTREESTRCT A
WHERE (A.NODE_MENUNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSPNLGROUP B, PSMENUITEM C
    WHERE C.MENUNAME = A.NODE_MENUNAME
    AND B.PNLGRPNAME = C.PNLGRPNAME
    AND B.PNLNAME = A.NODE_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-StrctDtl-Menu-Pnl-Exist                          !
! Descr:     System table audit against PSTREESTRCT table:             !
!            TREE-15: Verify Tree Structure Dtl Menu/Pnl info.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-StrctDtl-Menu-Pnl-Exist


   let $AuditDescr = '(TREE-15) Tree Structure table contains Detail '
      || 'Menu-Page combination that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 57
   let #Start4          = 85
   let #numofhdr        =  4

   put 'Tree Structure ID'       #Start1 21 into printarray(0)
   put 'Description'             #Start2 31 into printarray(1)
   put 'Menu Name'               #Start3 24 into printarray(2)
   put 'Page Name'              #Start4 21 into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_STRCT_ID    &TreeS15_TreeStrctId
A.DESCR            &TreeS15_Descr
A.DTL_MENUNAME     &TreeS15_MenuName
A.DTL_PNLNAME      &TreeS15_PnlName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeS15_TreeStrctId   (+1, #Start1)
   print &TreeS15_Descr         ( 0, #Start2)
   print &TreeS15_MenuName      ( 0, #Start3)
   print &TreeS15_PnlName       ( 0, #Start4)

FROM PSTREESTRCT A
WHERE (A.DTL_MENUNAME <> ' ')
  AND NOT EXISTS
  (SELECT 'X'
    FROM PSPNLGROUP B, PSMENUITEM C
    WHERE C.MENUNAME = A.DTL_MENUNAME
    AND B.PNLGRPNAME = C.PNLGRPNAME
    AND B.PNLNAME = A.DTL_PNLNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Level-Count                                 !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-16: Verify Tree Definition Level Count.              !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Level-Count

#define C_LevelCount   50
#define C_Count        59

   move 0 to #rows
   let $AuditDescr = '(TREE-16) Tree Definition Level count does not '
      || 'match record count in Tree Level table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 59
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Level Count'     #Start4    6    into printarray(3)
   put 'Record Count'    #Start5    6    into printarray(4)

begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeD1_SetId
A.TREE_NAME        &TreeD1_TreeName
A.EFFDT            &TreeD1_EffDt
A.LEVEL_COUNT      &TreeD1_LevelCount
COUNT(*)           &TreeD1_Count

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD1_TreeName     (+1, #Start1)
   print &TreeD1_SetId        ( 0, #Start2)
   print &TreeD1_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD1_LevelCount   ( 0, #Start4) edit 99,999
   print &TreeD1_Count        ( 0, #Start5) edit 99,999

FROM PSTREEDEFN A, PSTREELEVEL B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
GROUP BY A.SETID,A.SETCNTRLVALUE, A.TREE_NAME, A.EFFDT, A.LEVEL_COUNT
HAVING A.LEVEL_COUNT <>
  (SELECT COUNT(*)
  FROM PSTREELEVEL C
  WHERE C.SETID = A.SETID
    AND C.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND C.TREE_NAME = A.TREE_NAME
    AND C.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-TreeDef-Node-Count                                  !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-17: Verify Tree Definition Node Count.               !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-TreeDef-Node-Count

#define C_NodeCount    50

   move 0 to #rows
   let $AuditDescr = '(TREE-17) Tree Definition Node count does not '
      || 'match record count in Tree Node table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 59
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Count'      #Start4    6    into printarray(3)
   put 'Record Count'    #Start5    6    into printarray(4)

begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeD2_SetId
A.TREE_NAME        &TreeD2_TreeName
A.EFFDT            &TreeD2_EffDt
A.NODE_COUNT       &TreeD2_NodeCount
COUNT(*)           &TreeD2_Count

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD2_TreeName     (+1, #Start1)
   print &TreeD2_SetId        ( 0, #Start2)
   print &TreeD2_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD2_NodeCount    ( 0, #Start4) edit 99,999
   print &TreeD2_Count        ( 0, #Start5) edit 99,999

FROM PSTREEDEFN A, PSTREENODE B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND A.NODE_COUNT <> 0
GROUP BY A.SETID, A.SETCNTRLVALUE, A.TREE_NAME, A.EFFDT, A.NODE_COUNT
HAVING A.NODE_COUNT <>
  (SELECT COUNT(*)
  FROM PSTREENODE C
  WHERE C.SETID = A.SETID
    AND C.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND C.TREE_NAME = A.TREE_NAME
    AND C.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Count                                  !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-18: Verify Tree Definition Leaf Count.               !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-TreeDef-Leaf-Count

#define C_LeafCount    50

   move 0 to #rows
   let $AuditDescr = '(TREE-18) Tree Definition Leaf count does not '
      || 'match record count in Tree Leaf table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 59
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Leaf Count'      #Start4    6    into printarray(3)
   put 'Record Count'    #Start5    6    into printarray(4)
begin-SELECT on-Error=Rpt-SQL-Error

A.SETID            &TreeD3_SetId
A.TREE_NAME        &TreeD3_TreeName
A.EFFDT            &TreeD3_EffDt
A.LEAF_COUNT       &TreeD3_LeafCount
A.NODE_COUNT
COUNT(*)           &TreeD3_Count

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD3_TreeName     (+1, #Start1)
   print &TreeD3_SetId        ( 0, #Start2)
   print &TreeD3_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD3_LeafCount    ( 0, #Start4) edit 99,999
   print &TreeD3_Count        ( 0, #Start5) edit 99,999

FROM PSTREEDEFN A, PSTREELEAF B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND A.NODE_COUNT <> 0
  AND B.DYNAMIC_RANGE = 'N'
GROUP BY A.SETID,A.SETCNTRLVALUE, A.TREE_NAME, A.EFFDT, A.LEAF_COUNT, A.NODE_COUNT
HAVING A.LEAF_COUNT <>
  (SELECT COUNT(*)
  FROM PSTREELEAF C
  WHERE C.SETID = A.SETID
    AND C.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND C.TREE_NAME = A.TREE_NAME
    AND C.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Strct-Exist                                 !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREED-4: Verify Tree Definition Structure ID.             !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Strct-Exist

#define C_StrctId      50


   let $AuditDescr = '(TREE-19) Tree Definition contains Structure ID '
      || 'that does not exist in Tree Structure table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50

   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Structure Id'    #Start4   20    into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeD4_SetId
A.TREE_NAME        &TreeD4_TreeName
A.EFFDT            &TreeD4_EffDt
A.TREE_STRCT_ID    &TreeD4_StrctId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD4_TreeName     (+1, #Start1)
   print &TreeD4_SetId        ( 0, #Start2)
   print &TreeD4_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD4_StrctId      ( 0, #Start4)

FROM PSTREEDEFN A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREESTRCT B
  WHERE B.TREE_STRCT_ID = A.TREE_STRCT_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Query-Count                                 !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-20: Verify Tree Definition Query Structure counts.   !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Query-Count

#define C_StrctId      50


   let $AuditDescr = '(TREE-20) Tree Definition contains Query Access '
      || 'Group structure with undefined levels and leaves:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50

   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Structure Id'    #Start4   20    into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeD5_SetId
A.TREE_NAME        &TreeD5_TreeName
A.EFFDT            &TreeD5_EffDt
A.TREE_STRCT_ID    &TreeD5_StrctId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD5_TreeName     (+1,#Start1)
   print &TreeD5_SetId        ( 0,#Start2)
   print &TreeD5_EffDt        ( 0,#Start3) edit {PTRPTDATE}
   print &TreeD5_StrctId      ( 0,#Start4)

FROM PSTREEDEFN A
WHERE A.TREE_STRCT_ID = 'ACCESS_GROUP'
  AND (A.LEVEL_COUNT <> 0
   OR A.LEAF_COUNT <> 0)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-SelCtl-Exist                                !
! Descr:     System table audit against PSTREESELCTL table:            !
!            TREE-21: Verify Tree Selector Control definitions.        !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-SelCtl-Exist

#define C_SelectNum    50


   let $AuditDescr = '(TREE-21) Tree Selector Control contains Tree name '
      || 'that is not defined in Tree Definition table:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50

   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Selector Number' #Start4   10    into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeD6_SetId
A.TREE_NAME        &TreeD6_TreeName
A.EFFDT            &TreeD6_EffDt
A.SELECTOR_NUM     &TreeD6_SelectNum

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD6_TreeName     (+1, #Start1)
   print &TreeD6_SetId        ( 0, #Start2)
   print &TreeD6_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD6_SelectNum    ( 0, #Start4)

FROM PSTREESELCTL A
WHERE A.TREE_NAME <> '_PSQRYSECJOIN_'         ! - special case for pseudo tree _PSQRYSECJOIN_ !
  AND (NOT EXISTS
  (SELECT 'X'
  FROM PSTREEDEFN B
  WHERE B.SETID = A.SETID
    AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND B.TREE_NAME = A.TREE_NAME
    AND B.EFFDT = A.EFFDT))
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure



!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Level-Use                                   !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-22: Verify Tree Level Count and Type.                !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Level-Use

#define C_Count       50
#define C_Use         59


   let $AuditDescr = '(TREE-22) Tree Definition Level count does not '
      || 'match level use:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 59
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Count'           #Start4    6    into printarray(3)
   put 'Use'             #Start4    4    into printarray(4)

begin-SELECT on-Error=Rpt-SQL-Error
SETID              &TreeD7_SetId
TREE_NAME          &TreeD7_TreeName
EFFDT              &TreeD7_EffDt
LEVEL_COUNT        &TreeD7_Count
USE_LEVELS         &TreeD7_Use

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD7_TreeName     (+1, #Start1)
   print &TreeD7_SetId        ( 0, #Start2)
   print &TreeD7_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD7_Count        ( 0, #Start4) edit 99,999
   print &TreeD7_Use          ( 0, #Start5)

FROM PSTREEDEFN
WHERE
        (LEVEL_COUNT <> 0 AND
        USE_LEVELS = 'N') OR
        (LEVEL_COUNT = 0 AND
        USE_LEVELS <> 'N')
  end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Level-Exist                                 !
! Descr:     System table audit against PSTREELEVEL table:             !
!            TREE-23: Verify Tree Level definitions.                   !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Level-Exist

#define C_TreeLevel    50


   let $AuditDescr = '(TREE-23) Tree Level does not exist in Tree '
      || 'Definition table:'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Tree Level'      #Start4   12    into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL1_TreeName
A.SETID            &TreeL1_SetId
A.EFFDT            &TreeL1_EffDt
A.TREE_LEVEL       &TreeL1_TreeLevel

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL1_TreeName     (+1, #Start1)
   print &TreeL1_SetId        ( 0, #Start2)
   print &TreeL1_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL1_TreeLevel    ( 0, #Start4)

FROM PSTREELEVEL A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREEDEFN B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Node-Exist                                  !
! Descr:     System table audit against PSTREENODE table:              !
!            TREE-24: Verify Tree Nodes defined.                       !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Node-Exist


   let $AuditDescr = '(TREE-24) Tree Node does not exist in Tree '
      || 'Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Tree Node'       #Start4   24    into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL2_TreeName
A.SETID            &TreeL2_SetId
A.EFFDT            &TreeL2_EffDt
A.TREE_NODE        &TreeL2_TreeNode

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL2_TreeName     (+1, #Start1)
   print &TreeL2_SetId        ( 0, #Start2)
   print &TreeL2_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL2_TreeNode     ( 0, #Start4)

FROM PSTREENODE A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREEDEFN B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Exist                                  !
! Descr:     System table audit against PSTREELEAF table:              !
!            TREE-25: Verify Tree Leaf definitions.                    !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Leaf-Exist


   let $AuditDescr = '(TREE-25) Tree Leaf does not exist in Tree '
      || 'Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Number'     #Start4   14    into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL3_TreeName
A.SETID            &TreeL3_SetId
A.EFFDT            &TreeL3_EffDt
A.TREE_NODE_NUM    &TreeL3_NodeNum

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL3_TreeName     (+1, #Start1)
   print &TreeL3_SetId        ( 0, #Start2)
   print &TreeL3_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL3_NodeNum      ( 0, #Start4) edit 99999999999

FROM PSTREELEAF A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREEDEFN B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Valid-Ranges                           !
! Descr:     System table audit against PSTREELEAF table:              !
!            TREE-26: Verify Tree Leaf has valid ranges.               !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Leaf-Valid-Ranges


   let $AuditDescr = '(TREE-26) Tree Leaf ranges not valid in Tree '
      || 'Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Number'     #Start4   14    into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
TREE_NAME          &TreeL4_TreeName
SETID              &TreeL4_SetId
EFFDT              &TreeL4_EffDt
TREE_NODE_NUM      &TreeL4_NodeNum

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL4_TreeName     (+1, #Start1)
   print &TreeL4_SetId        ( 0, #Start2)
   print &TreeL4_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL4_NodeNum      ( 0, #Start4) edit 99999999999

FROM PSTREELEAF
WHERE RANGE_FROM > RANGE_TO
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Without-Node                           !
! Descr:     System table audit against PSTREELEAF table:              !
!            TREE-27: Verify Tree Leaf has parent Tree Node.           !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Leaf-Without-Node


   let $AuditDescr = '(TREE-27) Tree Leaf does not have parent Tree '
      ||  'Node in Tree Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Number'     #Start4   14    into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL5_TreeName
A.SETID            &TreeL5_SetId
A.EFFDT            &TreeL5_EffDt
A.TREE_NODE_NUM    &TreeL5_NodeNum

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL5_TreeName     (+1, #Start1)
   print &TreeL5_SetId        ( 0, #Start2)
   print &TreeL5_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL5_NodeNum      ( 0, #Start4) edit 99999999999

FROM PSTREELEAF A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREENODE B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT
  AND B.TREE_NODE_NUM = A.TREE_NODE_NUM)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Node-Invalid-Branch                         !
! Descr:     System table audit against PSTREENODE table:              !
!            TREE-28: Verify Tree Branch is in PSTREEBRANCH.           !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Node-Invalid-Branch


   let $AuditDescr = '(TREE-28) Tree Branch does not exist in Tree '
      || 'Branch table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 68
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Number'     #Start4   14    into printarray(3)
   put 'Tree Branch'     #Start5   21    into printarray(4)

begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL6_TreeName
A.SETID            &TreeL6_SetId
A.EFFDT            &TreeL6_EffDt
A.TREE_NODE_NUM    &TreeL6_NodeNum
A.TREE_BRANCH      &TreeL6_TreeBranch

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if

   let #rows = #rows +1
   print &TreeL6_TreeName     (+1, #Start1)
   print &TreeL6_SetId        ( 0, #Start2)
   print &TreeL6_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL6_NodeNum      ( 0, #Start4) edit 99999999999
   print &TreeL6_TreeBranch   ( 0, #Start5)

FROM PSTREENODE A
WHERE A.TREE_BRANCH <> ' '
AND NOT EXISTS
  (SELECT 'X'
  FROM PSTREEBRANCH B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT
  AND B.TREE_BRANCH = A.TREE_BRANCH)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Invalid-Branch                         !
! Descr:     System table audit against PSTREELEAF table:              !
!            TREE-29: Verify Tree Branch is in PSTREEBRANCH.           !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Leaf-Invalid-Branch


   let $AuditDescr = '(TREE-29) Tree Branch does not exist in Tree '
      || 'Branch table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 68
   let #numofhdr        =  5

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Number'     #Start4   14    into printarray(3)
   put 'Tree Branch'     #Start5   21    into printarray(4)



begin-SELECT on-Error=Rpt-SQL-Error
A.TREE_NAME        &TreeL7_TreeName
A.SETID            &TreeL7_SetId
A.EFFDT            &TreeL7_EffDt
A.TREE_NODE_NUM    &TreeL7_NodeNum
A.TREE_BRANCH      &TreeL7_TreeBranch

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeL7_TreeName     (+1, #Start1)
   print &TreeL7_SetId        ( 0, #Start2)
   print &TreeL7_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeL7_NodeNum      ( 0, #Start4) edit 99999999999
   print &TreeL7_TreeBranch   ( 0, #Start5)

FROM PSTREELEAF A
WHERE A.TREE_BRANCH <> ' '
AND NOT EXISTS
  (SELECT 'X'
  FROM PSTREEBRANCH B
  WHERE B.TREE_NAME = A.TREE_NAME
  AND B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.EFFDT = A.EFFDT
  AND B.TREE_BRANCH = A.TREE_BRANCH)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSTREE-TreeBranch-Node-Count                             !
! Descr:     System table audit against PSTREEBRANCH table:            !
!            TREE-30: Verify Tree Branch Node Count.                   !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-TreeBranch-Node-Count

#define C_NodeCount    73
#define C_Count        82


   let $AuditDescr = '(TREE-30) Tree Branch Node count does not '
      || 'match record count in Tree Node table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 73
   let #Start6          = 82
   let #numofhdr        =  6

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20     into printarray(0)
   put 'Set Id'          #Start2   12     into printarray(1)
   put 'Effect DT'       #Start3   12     into printarray(2)
   put 'Tree Branch'     #Start4   21     into printarray(3)
   put 'Node Count'      #Start5   12     into printarray(4)
   put 'Record Count'    #Start6   14     into printarray(5)

begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeB1_SetId
A.TREE_NAME        &TreeB1_TreeName
A.EFFDT            &TreeB1_EffDt
A.TREE_BRANCH      &TreeB1_TreeBranch
A.NODE_COUNT       &TreeB1_NodeCount
COUNT(*)           &TreeB1_Count

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeB1_TreeName     (+1, #Start1)
   print &TreeB1_SetId        ( 0, #Start2)
   print &TreeB1_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeB1_TreeBranch   ( 0, #Start4)
   print &TreeB1_NodeCount    ( 0, #Start5) edit 99,999
   print &TreeB1_Count        ( 0, #Start6) edit 99,999

FROM PSTREEBRANCH A, PSTREENODE B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND B.TREE_BRANCH = A.TREE_BRANCH
GROUP BY A.SETID, A.SETCNTRLVALUE, A.TREE_NAME, A.EFFDT, A.TREE_BRANCH, A.NODE_COUNT
HAVING A.NODE_COUNT <>
  (SELECT COUNT(*)
  FROM PSTREENODE C
  WHERE C.SETID = A.SETID
    AND C.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND C.TREE_NAME = A.TREE_NAME
    AND C.EFFDT = A.EFFDT
    AND C.TREE_BRANCH = A.TREE_BRANCH)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Count                                  !
! Descr:     System table audit against PSTREEBRANCH table:            !
!            TREE-31: Verify Tree Branch Leaf Count.                   !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-TreeBranch-Leaf-Count

#define C_LeafCount    73


   let $AuditDescr = '(TREE-31) Tree Branch Leaf count does not '
      || 'match record count in Tree Leaf table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #Start5          = 73
   let #Start6          = 82
   let #numofhdr        =  6

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20     into printarray(0)
   put 'Set Id'          #Start2   12     into printarray(1)
   put 'Effect DT'       #Start3   12     into printarray(2)
   put 'Tree Branch'     #Start4   21     into printarray(3)
   put 'Leaf Count'      #Start5   12     into printarray(4)
   put 'Record Count'    #Start6   14     into printarray(5)


begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeB2_SetId
A.TREE_NAME        &TreeB2_TreeName
A.EFFDT            &TreeB2_EffDt
A.TREE_BRANCH      &TreeB2_TreeBranch
A.LEAF_COUNT       &TreeB2_LeafCount
COUNT(*)           &TreeB2_Count

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeB2_TreeName     (+1, #Start1)
   print &TreeB2_SetId        ( 0, #Start2)
   print &TreeB2_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeB2_TreeBranch   ( 0, #Start4)
   print &TreeB2_LeafCount    ( 0, #Start5)    edit 99,999
   print &TreeB2_Count        ( 0, #Start6)    edit 99,999

FROM PSTREEBRANCH A, PSTREELEAF B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND B.TREE_BRANCH = A.TREE_BRANCH
GROUP BY A.SETID, A.SETCNTRLVALUE, A.TREE_NAME, A.EFFDT, A.TREE_BRANCH, A.LEAF_COUNT
HAVING A.LEAF_COUNT <>
  (SELECT COUNT(*)
  FROM PSTREELEAF C
  WHERE C.SETID = A.SETID
    AND C.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND C.TREE_NAME = A.TREE_NAME
    AND C.EFFDT = A.EFFDT
    AND C.TREE_BRANCH = A.TREE_BRANCH)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Node-Num                                    !
! Descr:     System table audit against PSTREEBRANCH table:            !
!            TREE-32: Verify Tree Node Num, Node Num End, and Level    !
!            Num.                                                      !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Node-Num

   move 0 to #rows
   let $AuditDescr = '(TREE-32) Tree Node Num, Node Num End, '
      || 'or Level Num is invalid in Tree Branch table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 37
   let #Start4          = 50
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20     into printarray(0)
   put 'Set Id'          #Start2   12     into printarray(1)
   put 'Effect DT'       #Start3   12     into printarray(2)
   put 'Tree Branch'     #Start4   21     into printarray(3)



begin-SELECT on-Error=Rpt-SQL-Error
A.SETID            &TreeB3_SetId
A.TREE_NAME        &TreeB3_TreeName
A.EFFDT            &TreeB3_EffDt
A.TREE_BRANCH      &TreeB3_TreeBranch

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1
   print &TreeB3_TreeName     (+1, #Start1)
   print &TreeB3_SetId        ( 0, #Start2)
   print &TreeB3_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeB3_TreeBranch   ( 0, #Start4)

FROM PSTREEBRANCH A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSTREENODE B
  WHERE A.SETID = B.SETID
    AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
    AND A.TREE_NAME = B.TREE_NAME
    AND A.EFFDT = B.EFFDT
    AND A.TREE_BRANCH = B.TREE_BRANCH
    AND A.TREE_NODE_NUM = B.TREE_NODE_NUM
    AND A.TREE_NODE_NUM_END = B.TREE_NODE_NUM_END
    AND (A.TREE_LEVEL_NUM = B.TREE_LEVEL_NUM
      OR (A.BRANCH_LEVEL_NUM = 0
    AND A.TREE_LEVEL_NUM = 0
    AND B.TREE_LEVEL_NUM = 1)))
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Orphans-Exist                                !
! Descr:     System table audit against PSTREEBRANCH table:            !
!            TREE-33: Verify Tree Node Num, Node Num End, and Level    !
!            Num.                                                      !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Orphans-Exist


   let $AuditDescr = '(TREE-33) Identify all orphan access group definitions '
                  || 'as well as invalid access group definitions in the '
                  || 'access group security:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   !    Heading          Start   Length
   put 'Access Group'       #Start1   30     into printarray(0)
   put 'Description'        #Start2   30     into printarray(1)



begin-SELECT on-Error=Rpt-SQL-Error
A.ACCESS_GROUP         &Tree33_AccGrp
A.DESCR                &Tree33_Desc

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Tree33_AccGrp      (+1, #Start1)
   print &Tree33_Desc        ( 0, #Start2)

FROM PS_ACCESS_GRP_TBL A, PSTREENODE B, PSTREEDEFN C
WHERE B.TREE_NODE = A.ACCESS_GROUP
  AND B.TREE_NAME = C.TREE_NAME
  AND B.TREE_NODE_TYPE='G'
  AND C.TREE_STRCT_ID = 'ACCESS_GROUP'
  and NOT EXISTS (SELECT 'X'
                      FROM PSTREENODE D
                      WHERE D.TREE_NODE = A.ACCESS_GROUP AND
                            D.TREE_NODE_TYPE='G')
ORDER BY ACCESS_GROUP
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Node-Count-Non-Zero                          !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-34: A non-zero node count was found                  !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Node-Count-Non-Zero

#define C_NodeCount    50

   move 0 to #rows
   let $AuditDescr = '(TREE-34) Tree Definition Node count does not '
      || 'equal zero for branched tree:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 38
   let #Start4          = 52
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Node Count'      #Start4   10    into printarray(3)
begin-SELECT on-Error=Rpt-SQL-Error

A.SETID            &TreeD34_SetId
A.TREE_NAME        &TreeD34_TreeName
A.EFFDT            &TreeD34_EffDt
A.NODE_COUNT       &TreeD34_NodeCount

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD34_TreeName     (+1, #Start1)
   print &TreeD34_SetId        ( 0, #Start2)
   print &TreeD34_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD34_NodeCount        ( 0, #Start4) edit 99,999

FROM PSTREEDEFN A, PSTREEBRANCH B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND A.NODE_COUNT <> 0
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSTREE-Tree-Leaf-Count-Non-Zero                          !
! Descr:     System table audit against PSTREEDEFN table:              !
!            TREE-35: A non-zero Leaf count was found                  !
!----------------------------------------------------------------------!
begin-procedure SYSTREE-Tree-Leaf-Count-Non-Zero

#define C_NodeCount    50

   move 0 to #rows
   let $AuditDescr = '(TREE-35) Tree Definition Leaf count does not '
      || 'equal zero for branched tree:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 24
   let #Start3          = 38
   let #Start4          = 52
   let #numofhdr        =  4

   !    Heading          Start   Length
   put 'Tree Name'       #Start1   20    into printarray(0)
   put 'Set Id'          #Start2   12    into printarray(1)
   put 'Effect DT'       #Start3   12    into printarray(2)
   put 'Leaf Count'      #Start4   10    into printarray(3)
begin-SELECT on-Error=Rpt-SQL-Error

A.SETID            &TreeD35_SetId
A.TREE_NAME        &TreeD35_TreeName
A.EFFDT            &TreeD35_EffDt
A.LEAF_COUNT       &TreeD35_LeafCount

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &TreeD35_TreeName     (+1, #Start1)
   print &TreeD35_SetId        ( 0, #Start2)
   print &TreeD35_EffDt        ( 0, #Start3) edit {PTRPTDATE}
   print &TreeD35_LeafCount        ( 0, #Start4) edit 99,999

FROM PSTREEDEFN A, PSTREEBRANCH B
WHERE B.SETID = A.SETID
  AND B.SETCNTRLVALUE = A.SETCNTRLVALUE
  AND B.TREE_NAME = A.TREE_NAME
  AND B.EFFDT = A.EFFDT
  AND A.LEAF_COUNT <> 0
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure


