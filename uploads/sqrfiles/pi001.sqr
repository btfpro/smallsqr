!****************************************************
!  PI001:  Payroll Interface Export Changes Report  *
!****************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:02:25:33                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'  !Set environment
#include 'setup32.sqc' !Printer and page-size initialization
#define MAX_ARR_FIELDS_SIZE     1000
#define MAX_ARR_FILES_SIZE      150
#define MAX_FIELDS_PER_RECORD   200

!begin-setup
! LOAD-LOOKUP NAME=record ROWS=500
!     'TABLE=ps_pi_defn_record A' 'KEY=pi_file_id||pi_record_seq'
!     RETURN_VALUE=pi_record_id
!     'WHERE=EFFDT = (select max(EFFDT) from ps_pi_defn_record where pi_file_id = A.pi_file_id and pi_record_seq = A.pi_record_seq)'
! end-setup

begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report

  move 'PI001' to $ReportID

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Report-Language

  move $Pi001_ReportTitle to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

end-procedure


! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation

! Read from PI001 program ids
do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('PI001', 'REPORT_TITLE', $Pi001_ReportTitle, #dummy_width)
  do Get_Field_Information ('PI001', 'SYSTEMID', $Pi001_SystemID, #dummy_width)
  do Get_Field_Information ('PI001', 'COMPANY_PAYGRP', $Pi001_CompanyPaygrp, #dummy_width)
  do Get_Field_Information ('PI001', 'CONFIGID', $Pi001_ConfigID, #dummy_width)
  do Get_Field_Information ('PI001', 'PI_EMPLID', $Pi001_PIEmplid, #dummy_width)
  do Get_Field_Information ('PI001', 'EMPLNAME', $Pi001_EmployeeName, #dummy_width)
  do Get_Field_Information ('PI001', 'EMPLID', $Pi001_Emplid, #dummy_width)
  do Get_Field_Information ('PI001', 'FILE', $Pi001_File, #dummy_width)
  do Get_Field_Information ('PI001', 'REC', $Pi001_Rec, #dummy_width)
  do Get_Field_Information ('PI001', 'FIELDNAME', $Pi001_FieldName, #dummy_width)
  do Get_Field_Information ('PI001', 'CVAL', $Pi001_CurrentValue, #dummy_width)
  do Get_Field_Information ('PI001', 'OVAL', $Pi001_OldValue, #dummy_width)

end-procedure


begin-heading 7
  #Include 'stdhdgtr.sqc'

  print $Pi001_SystemID                   (3,1,18)
  print  $Current_System_Id               (,20)
  print  $Current_System_name             (,+2)
  print $Pi001_CompanyPaygrp              (+1,1,18)
  print  $Current_Company                 (,20)
  print  $Current_Paygroup                (,+2)
  print $Pi001_ConfigID                   (+1,1,18)
  print  $Current_Config                  (,20)
  print $Pi001_PIEmplid                   (+2,1,11)
  print $Pi001_EmployeeName               (,13,19)
  print $Pi001_Emplid                     (,34, 8)
  print $Pi001_File                       (,44,9)
  print $Pi001_Rec                        (,55,6)
  print $Pi001_FieldName                  (,63,40)
  print $Pi001_CurrentValue               (,105,30)
  print $Pi001_OldValue                   (,137,35)
  print '-'                               (+1,1,174) fill

end-heading


begin-procedure Process-Main

  do Setup-Arrays
  do Get-Select-Criteria
  do Process-Export-Rows

end-procedure


begin-procedure Setup-Arrays

   create-array name  = CurrArrSize size = 1
                field = LastRowFileArray:number
                field = LastRowFieldArray:number
                field = LastRowValuesArray:number
                field = LastRowDeletedArray:number

   put -1 -1 -1 -1 into  CurrArrSize(0)

   create-array name  = FileDefn size = {MAX_ARR_FILES_SIZE}
                field = File:char
                field = Record:number
                field = DateStamp:char
                field = StartIdx:number
                field = EndIdx:number
                field = MaxFlds:number
   put ' ' 0 ' ' 0 0 0 into  FileDefn(0)

   create-array name  = FieldAttributes size = {MAX_ARR_FIELDS_SIZE}
                field = FieldName:char
                field = FieldLength:number
                field = Redefined:char
                field = FieldDescr:char

   create-array name  = FieldValues size = {MAX_FIELDS_PER_RECORD}
                field = Field:char
                field = CurrentVal:char
                field = OldVal:char
                field = Name:char

   create-array name  = DeletedOldFields size = {MAX_FIELDS_PER_RECORD}
                field = Field:char
                field = Value:char
                field = Name:char

end-procedure Setup-Arrays


begin-procedure Initialize-OldValues local

  let #arr_ptr = 0
  while #arr_ptr < {MAX_FIELDS_PER_RECORD}
      put ' ' into FieldValues(#arr_ptr) OldVal
      let #arr_ptr = #arr_ptr + 1
  end-while
  put -1  into  CurrArrSize(0)  LastRowDeletedArray

end-procedure Initialize-OldValues


begin-procedure Get-Last-Row ( $Of, :#last_row )

  evaluate $Of
     when = 'File'
       get #last_row from CurrArrSize(0) LastRowFileArray
       break
     when = 'Field'
       get #last_row from CurrArrSize(0) LastRowFieldArray
       break
     when = 'Values'
       get #last_row from CurrArrSize(0) LastRowValuesArray
       break
  end-evaluate

end-procedure Get-Last-Row


begin-procedure Find-FieldValues-Row ( $field, :#row )
 let #row = -1
 let #row_ptr = 0
 do Get-Last-Row ( 'Values', #last_row )
 while #row_ptr < #last_row
   get $fld_name from FieldValues( #row_ptr ) Field
   if $fld_name = $field
      let #row = #row_ptr
      break
   end-if
   let #row_ptr = #row_ptr + 1
 end-while
end-procedure Find-FieldValues-Row


begin-procedure Get-Select-Criteria

  if $Prcs_Process_Instance = ''
    do Prompt-Params
  else
    do Get-PI-Run-Params
    let $print_changed_flds_only = &RC_PI.CHANGED_FLDS
    let #Current_Run_Number = &RC_PI.PI_RUN_NUM
    let $print_changed_flds_only = &RC_PI.CHANGED_FLDS

  end-if

  do Generate-Where-Clause ($selected_system,$selected_config,
     $selected_company,$selected_paygroup,$selected_emplid,
     $selected_records,$where_clause)

   let $Current_System_Id = $selected_system
   do Get-System-Name ( $Current_System_Id, $Current_System_name )
   
   do Get-Pay-End-Date

end-procedure Get-Select-Criteria

begin-procedure Get-Pay-End-Date
  let $Run-Pay-End-Dt = $AsOfToday
begin-SELECT
PED.PAY_END_DT

   let $Run-Pay-End-Dt = &ped.PAY_END_DT
   
FROM PS_PI_RUN_PYGRP PED
WHERE PED.PI_RUN_NUM = #Current_Run_Number
  AND PED.PAY_END_DT > $AsOfToday
end-SELECT
end-procedure Get-Pay-End-Date


begin-procedure Prompt-Params

    input  $selected_system  'Enter System Id'
    let $selected_system = upper($selected_system)

    input  $Current_Run_Number 'Enter PI Run Number'
    let  #Current_Run_Number = $Current_Run_Number

    input  $selected_config  'Enter Config Id'
    let $selected_config = upper($selected_config)
    input  $selected_company  'Enter Company'
    let $selected_company = upper($selected_company)
    input  $selected_paygroup  'Enter Paygroup'
    let $selected_paygroup = upper($selected_paygroup)
    input  $selected_emplid  'Enter Emplid'
    let $selected_emplid = upper($selected_emplid)
    input  $selected_records  'Print Changed Records Only (Y/N)'
    let $selected_records = upper($selected_records)

    input  $print_changed_flds_only  'Print Changed Fields Only (Y/N)'
    let $print_changed_flds_only = upper($print_changed_flds_only)

end-procedure Prompt-Params

begin-procedure Load-Record-Definition ($File, #Record, $RefDate)

  do Format-Datetime ( $RefDate, $RefDate1, {DEFDATE},'','' )
  do Format-Datetime ($RefDate1, $CurDate, {DEFMDY},'','native')
  do Get-Last-Row ( 'Field', #FieldRowCount )
  let #FieldRowCount = #FieldRowCount + 1
  let #start_row = #FieldRowCount

begin-SELECT

B.PI_FIELD_ID
B.PI_FIELD_LEN
A.REDEFINE_IND
B.DESCR
B.EFFDT
C.PI_RECORD_ID
A.PI_FIELD_SEQ
        Let $_effdt = &B.EFFDT
        Let $_Pi_field_id = &B.PI_FIELD_ID
        Let $_Prnt_PiFld_Descr = &B.DESCR
      if $Curr_language_cd <> $Psoptions_Language_Cd
        do Lang-Record-Details-Rcd-dfn
      end-if

  put &B.PI_FIELD_ID &B.PI_FIELD_LEN &A.REDEFINE_IND $_Prnt_PiFld_Descr
    into FieldAttributes( #FieldRowCount ) FieldName FieldLength Redefined FieldDescr

  let #FieldRowCount = #FieldRowCount + 1

FROM  PS_PI_DEFN_FIELD A, PS_PI_FIELD_TBL B, PS_PI_DEFN_RECORD C
WHERE A.PI_FILE_ID = $File AND A.PI_RECORD_SEQ = #Record
      AND A.EFFDT =
          ( SELECT max(EFFDT)
            FROM PS_PI_DEFN_FIELD
            WHERE  EFFDT <= $CurDate AND PI_FILE_ID = A.PI_FILE_ID
              AND PI_RECORD_SEQ = A.PI_RECORD_SEQ AND PI_FIELD_SEQ =
              A.PI_FIELD_SEQ )
      AND B.PI_FIELD_ID = A.PI_FIELD_ID
      AND B.PI_SYSTEM_ID = $_Current_System_Id
      AND B.EFFDT =
          (SELECT max(EFFDT)
            FROM PS_PI_FIELD_TBL
            WHERE EFFDT <= $CurDate AND  PI_SYSTEM_ID = B.PI_SYSTEM_ID
            AND PI_FIELD_ID = B.PI_FIELD_ID)
  AND C.PI_RECORD_TYPE IN ('D','P')
  AND  C.PI_FILE_ID = A.PI_FILE_ID AND C.PI_RECORD_SEQ = A.PI_RECORD_SEQ
      AND C.EFFDT =
          ( SELECT max(EFFDT)
            FROM PS_PI_DEFN_RECORD
            WHERE  EFFDT <= $CurDate AND PI_FILE_ID = C.PI_FILE_ID
                AND PI_RECORD_SEQ = C.PI_RECORD_SEQ)

ORDER BY A.PI_FIELD_SEQ

end-SELECT

  let #FieldRowCount =  #FieldRowCount - 1
  let #rows_added =  #FieldRowCount - #start-row + 1
  do Get-Last-Row ( 'File', #FilesRow )
  let #FilesRow = #FilesRow + 1
  put $File #Record $RefDate #start_row #FieldRowCount
        into FileDefn( #FilesRow ) File Record DateStamp StartIdx EndIdx
  put #FilesRow #FieldRowCount
        into CurrArrSize(0)  LastRowFileArray LastRowFieldArray

end-procedure Load-Record-Definition


begin-procedure Lang-Record-Details-Rcd-dfn
begin-select

D.DESCR

        Let $_Prnt_PiFld_Descr = Cond(Rtrim(&D.DESCR,' ')='', $_Prnt_PiFld_Descr, &D.DESCR)

FROM PS_PI_FIELD_LANG D
WHERE D.PI_SYSTEM_ID = $Current_System_Id
  AND D.PI_FIELD_ID  = $PI_FIELD_ID
  AND D.LANGUAGE_CD  = $Curr_language_cd
  AND D.EFFDT        = (SELECT MAX(EFFDT) FROM PS_PI_FIELD_LANG E
                             WHERE E.PI_SYSTEM_ID = $Current_System_Id
                                 AND E.PI_FIELD_ID  = $PI_FIELD_ID
                                 AND E.LANGUAGE_CD  = $Curr_language_cd
                                 AND E.EFFDT       <= $effdt)

end-select
end-procedure


begin-procedure Get-Max-Fields ($File, #Record, :#TotalFlds)
begin-SELECT

count(*)  &FieldCount

  move  &FieldCount to  #TotalFlds

FROM  PS_PI_DEFN_FIELD E
WHERE E.PI_FILE_ID = $File  AND E.PI_RECORD_SEQ = #Record
      AND E.EFFDT =
          (SELECT max(EFFDT)
            FROM PS_PI_DEFN_FIELD
            WHERE  EFFDT <= $_AsOfToday AND PI_FILE_ID = E.PI_FILE_ID)

end-SELECT
end-procedure



begin-procedure Parse-Export-Row ( $File_Id, #Rec_Seq, $Ref_Date, $History_Status )

  if $History_Status = 'Current'
      do Initialize-OldValues
  end-if

  let $export_line  = $_Full_Export_Row
  let #line_ptr     = 1
  let #line_length  = length($export_line)

  do Get-Record-Def-Params ( $File_Id, #Rec_Seq, $Ref_Date, #start, #end, #found )

  if #found = 0
     do Load-Record-Definition ( $File_Id, #Rec_Seq, $Ref_Date )
     do Get-Record-Def-Params ( $File_Id, #Rec_Seq, $Ref_Date, #start, #end, #found )
  end-if
  let #current_field   = #start
  let #last_field      = #end
  let #row_ptr         = 0
  let #deleted_fields  = 0

  while #current_field <= #last_field ! and #line_ptr < #line_length

    get $field_name #field_length $field_redef $field_descr from FieldAttributes(#current_field)
                   FieldName FieldLength Redefined FieldDescr

    if $field_redef = 'N'
       let $field_change_ind = {ps-substr}($export_line, #line_ptr, 1)
       let #field_change_ind = to_number($field_change_ind)
       let #line_ptr = #line_ptr + 1
       let $field_value  = {ps-substr}($export_line, #line_ptr, #field_length)
       let #line_ptr = #line_ptr + #field_length
    else
      let $field_value  = '**REDEFINED**'
      let $field_change_ind = ''
      let #field_change_ind = 0
    end-if

    if $History_Status = 'Current'
      if ($_print_changed_flds_only <> 'Y' and $field_redef = 'N') or ( $_print_changed_flds_only = 'Y' and #field_change_ind > 0 and $field_redef = 'N')
        put $field_name $field_value $field_descr into FieldValues( #row_ptr ) Field CurrentVal Name
        let #row_ptr = #row_ptr + 1
      end-if
    else
      do Find-FieldValues-Row ( $field_name, #row_found )
      if #row_found > -1
        put $field_value into FieldValues( #row_found ) OldVal
      else
        put $field_name $field_value $field_descr into DeletedOldFields( #deleted_fields ) Field Value Name
        let #deleted_fields = #deleted_fields + 1
      end-if
    end-if

    let #current_field = #current_field + 1

  end-while

    if $History_Status = 'Current'
       put #row_ptr into CurrArrSize(0)  LastRowValuesArray
    else
       put #deleted_fields into CurrArrSize(0)  LastRowDeletedArray
    end-if

end-procedure


begin-procedure Get-Record-Def-Params ($File, #Record, $CompareDt, :#Start, :#End, :#Found)
 do Get-Last-Row ( 'File', #LastFileRow )

 let #Found = 0
 let #row_ptr = 0

 while  #row_ptr <= #LastFileRow
    get $FileId #RecSeq $Cdate #Start #End from FileDefn(#row_ptr) File Record DateStamp StartIdx EndIdx

    if $FileId = $File and #Record = #RecSeq and $Cdate = $CompareDt
       let #Found = 1
       break
    end-if

    let #row_ptr = #row_ptr + 1

  end-while
end-procedure


begin-procedure Process-Export-Rows

let #breaks_encountered = 0
let #breaks_before = 0
let $Full_Export_Row = ''
let #loop_cnt = 1
let #lev1_before_breaks = 0
let #lev1_after_breaks = 0

begin-SELECT


A.PI_CONFIG_ID    () on-break  print=never save=$old_config   before=generate-page-break after=after-page-break level = 1
B.COMPANY         () on-break  print=never save=$old_company  before=generate-page-break after=after-page-break level = 1
B.PAYGROUP        () on-break  print=never save=$old_paygroup before=generate-page-break after=after-page-break level = 1
A.EMPLID          () on-break  print=never save=$old_emplid   before=set-values after=launch-printing level = 1
A.EMPL_RCD       () on-break  print=never save=$old_empl_rcd before=set-values after=launch-printing level = 2
A.PI_FILE_ID      () on-break  print=never save=$old_file_id  before=set-values after=launch-printing level = 2
A.PI_RECORD_SEQ   () on-break  print=never save=$old_rec_seq  before=set-values after=launch-printing level = 2
A.PI_EXPORT_SEQ   () on-break  print=never save=$old_exp_grp  before=set-values after=launch-printing level = 2
A.EFFDT           () on-break  print=never save=$old_effdt before=set-values after=launch-printing level = 3
{DATETIMEOUT-PREFIX}C.COMPARE_DTTM{DATETIMEOUT-SUFFIX} () on-break  print=never -
                                           save=$old_compare_dttm before=before-compare after=after-compare level = 4
A.PI_RUN_NUM
A.EXPORT_ROW
A.PI_SYSTEM_ID
B.PAY_END_DT
B.PI_EMPLID
A.EXPORT_SEQ


  let $Full_Export_Row = $Full_Export_Row || rpad( &A.export_row, 250, ' ')

  if #breaks_encountered > 0
     let #breaks_encountered = 0
  end-if
  if #breaks_before > 0
     let #breaks_before = 0
  end-if
  if #lev1_before_breaks > 0
     let #lev1_before_breaks = 0
  end-if
  if #lev1_after_breaks > 0
     let #lev1_after_breaks = 0
  end-if

FROM PS_PI_PARTIC_EXPT A, PS_PI_PARTIC B, PS_PI_RUN_PYGRP C
WHERE [$where_clause]
      AND A.PI_RUN_NUM = B.PI_RUN_NUM AND A.EMPLID = B.EMPLID
      AND A.EMPL_RCD = B.EMPL_RCD AND A.PI_SYSTEM_ID = B.PI_SYSTEM_ID
      AND A.PI_CONFIG_ID = B.PI_CONFIG_ID AND A.COMPANY = B.COMPANY
      AND A.PAYGROUP = B.PAYGROUP AND B.PI_RUN_NUM = C.PI_RUN_NUM
      AND B.COMPANY = C.COMPANY AND B.PAYGROUP = C.PAYGROUP
      AND B.PAY_END_DT = C.PAY_END_DT
      AND EXISTS
         ( SELECT 'x' FROM PS_PI_PARTIC_EXPT WHERE EMPLID = A.EMPLID
           AND PI_RUN_NUM = #Current_Run_Number )

ORDER BY A.PI_CONFIG_ID, B.COMPANY, B.PAYGROUP, A.EMPLID, A.EMPL_RCD,
  A.PI_FILE_ID, A.PI_RECORD_SEQ, A.PI_EXPORT_SEQ,
  A.EFFDT DESC, C.COMPARE_DTTM DESC, A.EXPORT_SEQ ASC

end-SELECT

end-procedure


begin-procedure before-compare

  if  #history_rows_found > 0
     let #history_rows_found = #history_rows_found + 1
  end-if

  let #run_num_retrieved = &A.PI_RUN_NUM

  if #run_num_retrieved = #Current_Run_Number
     let #history_rows_found = #history_rows_found + 1
  end-if

end-procedure


begin-procedure after-compare

    let $Current_File           = $PrevFileId
    let #Current_Rec_Seq        = #PrevRecordSeq
    let $Current_Rec_Seq        = edit(#PrevRecordSeq,'999')
    let $Current_Compare_Dttm   = $Old_Compare_Dttm
    let $Current_Emplid         = $old_emplid
    let $Current_Empl_Rcd       = $old_empl_rcd
    let $Current_Exp_Grp        = $old_exp_grp
    let $Current_Pi_Emplid      = $PrevPiEmplid
    let $Current_Pay_End_Dt     = $PrevPayEndDt
    let $Current_EffDt          = $OldEffdt

  evaluate #history_rows_found
     when = 1
         do Parse-Export-Row ( $Current_File, #Current_Rec_Seq, $Current_Compare_Dttm , 'Current' )
         break
     when = 2
         do Parse-Export-Row ( $Current_File, #Current_Rec_Seq, $Current_Compare_Dttm , 'Old' )
         break
  end-evaluate


  let $Full_Export_Row = ''

end-procedure


begin-procedure launch-printing

  let #breaks_encountered = #breaks_encountered + 1
  if #breaks_encountered = 1 and #history_rows_found > 0
    do Print-Values
    let $Full_Export_Row = ''
    display 'Done'
  end-if

end-procedure

begin-procedure set-values

  let #history_rows_found = 0
  let #breaks_before = #breaks_before + 1

  if #breaks_before = 1
      let $PrevFileId      = &A.PI_FILE_ID
      let $PrevSystemId    = &A.PI_SYSTEM_ID
      let #PrevRecordSeq   = &A.PI_RECORD_SEQ
      let $PrevPiEmplid    = &B.PI_EMPLID
      let $PrevPayEndDt    = &B.PAY_END_DT
      let $Current_Company  = &B.COMPANY
      let $Current_Paygroup = &B.PAYGROUP
      let $Current_Config   = &A.PI_CONFIG_ID

      display 'Processing Employee : ' noline
      display &A.emplid noline
      display '...' noline
  end-if
end-procedure


begin-procedure generate-page-break


  let #lev1_before_breaks = #lev1_before_breaks + 1
  if  #lev1_before_breaks = 1
     do set-values
  end-if
end-procedure generate-page-break

begin-procedure after-page-break
  let #lev1_after_breaks = #lev1_after_breaks + 1
  if  #lev1_after_breaks = 1
     new-page
     do launch-printing
  end-if
end-procedure after-page-break


begin-procedure Print-Values   local

   do Get-Last-Row ( 'Values', #last )
   let #curr_row = 0
   print ' ' (+1,1)
   while #curr_row < #last
     get  $field $cval $oval $fldescr from FieldValues( #curr_row ) Field CurrentVal OldVal Name
     do Get-Employee-Name ( $_Current_Emplid , $ename )

!     LOOKUP empnames $_Current_Emplid  $ename
!     let $look_for = $_Current_File||to_char(#_Current_Rec_Seq)
!     LOOKUP record $look_for  $rec-id

     do Get-Record-Id ($_Current_File, #_Current_Rec_Seq, $rec-id )

     let $field_descr = $fldescr||'('||$field ||')'
     print $_Current_Pi_Emplid     (+1,1,10)   on-break print=change/top-page level=1
     print $ename                  (,13,19)    on-break print=change/top-page level=1
     print $_Current_Emplid        (,34,8)    on-break print=change/top-page level=1
     print $_Current_File          (,44,9)    on-break print=change/top-page level=2
     print $rec-id                 (,55,6)    on-break print=change/top-page level=3
     print $field_descr            (,63, 40)
     print $cval                   (,105,30)
     print $oval                   (,137,35)
     let #curr_row = #curr_row + 1
   end-while

end-procedure Print-Values


begin-procedure Get-Record-Id ( $file_id, #Rec_Seq, :$Rec_id)

begin-SELECT Loops=1

PI_RECORD_ID
  move &PI_RECORD_ID to $Rec_id

FROM PS_PI_DEFN_RECORD A
WHERE A.PI_FILE_ID = $FILE_ID AND A.PI_RECORD_SEQ = #REC_SEQ AND
   EFFDT = (SELECT MAX(EFFDT) FROM PS_PI_DEFN_RECORD
   WHERE PI_FILE_ID = A.PI_FILE_ID AND PI_RECORD_SEQ = A.PI_RECORD_SEQ)

end-SELECT

end-procedure Get-Record-Id


begin-procedure Get-Employee-Name ( $Emplid, :$Ename )

begin-SELECT  Loops=1

N.NAME
 move &N.NAME to $Ename

FROM PS_NAMES N
WHERE N.EMPLID  =  $Emplid
AND   N.NAME_TYPE = 'PRI'
AND   N.EFFDT = ( SELECT MAX(ED_N.EFFDT)
                  FROM PS_NAMES ED_N
                  WHERE N.EMPLID = ED_N.EMPLID
                  AND   N.NAME_TYPE = ED_N.NAME_TYPE
                  AND   ED_N.EFFDT <= $_Run-Pay-End-Dt)

end-SELECT

end-procedure Get-Employee-Name



begin-procedure Get-System-Name ( $sid, :$Sname )

begin-SELECT  Loops=1

DESCR

 move &DESCR to $Sname
        if $Curr_language_cd <> $Psoptions_Language_Cd
          do Lang-Record-Details-System-Name
        end-if

FROM PS_PI_SYSTEM_TBL
WHERE PI_SYSTEM_ID  =  $sid

end-SELECT

end-procedure Get-System-Name


begin-procedure Lang-Record-Details-System-Name
begin-select

LS.DESCR

        let $Sname = Cond(Rtrim(&LS.DESCR,' ')='', $Sname, &LS.DESCR)

FROM PS_PI_SYSTEM_LANG LS
WHERE PI_SYSTEM_ID = $sid
  AND LANGUAGE_CD = $Curr_language_cd

end-select
end-procedure

#Include 'reset.sqc'     !Reset printer procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'pirunctl.sqc'  !PI Run Controls
#Include 'sqrtrans.sqc'  !Translate SQR strings to a given language
#Include 'getrplng.sqc'  !Gets the report language


