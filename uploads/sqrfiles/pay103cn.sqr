!******************************
!  PAY103CN:  Overtime Bank   *
!******************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:42:37                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

begin-report
  do Init-Report
  do Report
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY103CN' to $ReportID
  display 'rlb'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay103cn_ReportTitle to $ReportTitle
  display $ReportTitle

  if $Prcs_Process_Instance = ''
    do Get-From-Thru-Dates
  else
    do Select-Parameters
    move $RC_PAY.FromDate to $FromDate
    move $RC_PAY.ThruDate to $ThruDate
    move $RC_PAY.ThruDate to $AsOfDate
  end-if

  do Set-OT-Base

  let #array_size = 500
  Create-Array Name=ReptArray
               Size=500
               Field=BusUnit:char
               Field=Union:char
               Field=DeptId:char
               Field=EmplId:char
               Field=EmplRcd:number
               Field=EmplName:char
               Field=TotOT:number

   let #array_element = 0

end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY103CN  program ids
   do Init_Report_Translation($ReportID,$Language_Cd)
   do Append_Report_Translation('HR')


   do Get_Field_Information ('PAY103CN', 'REPORT_TITLE', $Pay103cn_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY103CN', 'UNION',        $Pay103cn_Union,       #dummy_width)
   do Get_Field_Information ('PAY103CN', 'DEPT_ID',      $Pay103cn_Dept_Id,     #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMP_ID1',      $Pay103cn_Emp_Id1,     #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMP_NM1',      $Pay103cn_Emp_Nm1,     #dummy_width)
   do Get_Field_Information ('PAY103CN', 'TOT_OVR1',     $Pay103cn_Tot_Ovr1,    #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMP_ID2',      $Pay103cn_Emp_Id2,     #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMPL_RCD1',    $Pay103cn_Empl_Rcd1,   #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMPL_RCD2',    $Pay103cn_Empl_Rcd2,   #dummy_width)
   do Get_Field_Information ('PAY103CN', 'EMP_NM2',      $Pay103cn_Emp_Nm2,     #dummy_width)
   do Get_Field_Information ('PAY103CN', 'TOT_OVR2',     $Pay103cn_Tot_Ovr2,    #dummy_width)
   do Get_Field_Information ('PAY103CN', 'NON_UNION',    $Pay103cn_Non_Union,   #dummy_width)

   do Get_Field_Information ('HR',       'BUS_UNIT1',    $HR_Bus_Unit1,         #dummy_width)
   do Get_Field_Information ('HR',       'BUS_UNIT2',    $HR_Bus_Unit2,         #dummy_width)

end-procedure

begin-heading 7

#Include 'stdhtr11.sqc'
  print $Pay103cn_Union         (+2,1)
  print $Pay103cn_Dept_Id       (0,23)
  print $Hr_Bus_Unit1           (0,37)
  print $Pay103cn_Emp_Id1       (0,50)
  print $Pay103cn_Empl_Rcd1     (0,65)
  print $Pay103cn_Emp_Nm1       (0,75)
  print $Pay103cn_Tot_Ovr1      (0,113)
  print $Hr_Bus_Unit2           (+1,39)
  print $Pay103cn_Emp_Id2       (0,50)
  print $Pay103cn_Empl_Rcd2     (0,65)
  print $Pay103cn_Emp_Nm2       (0,75)
  print $Pay103cn_Tot_Ovr2      (0,113)
end-heading

begin-procedure Set-OT-Base
  if $Prcs_Process_Instance = ''
    display 'Specify minimum overtime hours for'
    input $OT_Base# maxlen=3 'inclusion in report (<ENTER> for all)' type=integer
  else
    move $RC_PAY.Min_OT_Hrs to $OT_Base#
  end-if

  if RTRIM($OT_Base#, ' ') = ''
    move 0         to #OT_Base#
  else
    move $OT_Base# to #OT_Base#
  end-if
end-procedure

begin-procedure Report
  move '*' to $UnionCd
begin-SELECT
A.COMPANY          () on-break print=never level=1 before=Company-Change after=Print-Array
A.EMPLID
A.EMPL_RCD
A.BUSINESS_UNIT

#ifdef DB2ALL
DECIMAL(SUM(A.OT_HRS), 15, 3) &Total_OT
#else
SUM(A.OT_HRS)         &Total_OT
#end-if

C.UNION_CD
C.DEPTID

  do Load-Array

FROM  PS_PAY_EARNINGS A, PS_JOB C, PS_LOCATION_TBL L
WHERE A.PAY_END_DT BETWEEN $FromDate AND $AsOfDate
  AND A.EMPLID      = C.EMPLID
  AND C.LOCATION    = L.LOCATION
  AND L.COUNTRY     = 'CAN'
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCATION_TBL
       WHERE SETID    = C.SETID_JOBCODE
         AND LOCATION = L.LOCATION
         AND EFFDT <= $AsOfDate)
  AND C.EMPL_STATUS = 'A'
  AND A.EMPL_RCD = C.EMPL_RCD
  AND C.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID    = C.EMPLID
         AND  EMPL_RCD = C.EMPL_RCD
         AND  EFFDT <= $AsOfDate)
  AND  C.EFFSEQ =
       (SELECT MAX(EFFSEQ)
        FROM   PS_JOB
        WHERE  EMPLID    = C.EMPLID
          AND  EMPL_RCD = C.EMPL_RCD
          AND  EFFDT     = C.EFFDT
          AND  EFFDT     <= $AsOfDate)
GROUP BY A.COMPANY, A.BUSINESS_UNIT, C.UNION_CD, C.DEPTID, A.EMPLID, A.EMPL_RCD
ORDER BY A.COMPANY, A.BUSINESS_UNIT, C.UNION_CD, C.DEPTID, A.EMPLID, A.EMPL_RCD
end-SELECT
end-procedure


begin-procedure Clear-Array

  move 0 to #load
  move 0 to #loadamt
  move 0 to #loadEmplRcd
  move ' ' to $loadspace
  while #load < #array_size

       put $loadspace $loadspace $loadspace $loadspace #loadEmplRcd
           $loadspace #loadamt
           into ReptArray(#load)
       add 1 to #load

  end-while
end-procedure


!Load the overtime array. This array is necessary in order to sort the report
!in business unit, union code, deptid and employee id sequence
begin-procedure Load-Array

  move &A.Company to $Company

  if &Total_OT >= #OT_Base#

    do Process-OT-Hours

    let #Temp_Empl_Rcd = &A.EMPL_RCD
    put &A.Business_unit &C.Union_cd &C.DeptID  &A.EmplID #Temp_Empl_Rcd
        $Name #Total_OT
        into ReptArray(#array_element)

    add 1 to #array_element

  end-if

end-procedure


begin-procedure Print-Array

   let #i         = 0

   WHILE #i <  #array_element

        GET $TempBus $TempUnion $TempDept $TempEmpl #TempEmplRcd
            $TempName #TempTot
            from ReptArray(#i)

        if $TempUnion <> $UnionCd
           move $TempUnion to $UnionCd
           do Get-Union-Name              !returns $UnionName, $UnionNameAbbrv
           if RTRIM($UnionNameAbbrv, ' ') = ''
               move $Pay103cn_Non_Union to $UnionNameAbbrv
           end-if
        else
           move ' ' to $UnionNameAbbrv
        end-if

        print $UnionNameAbbrv        (+1,1)

        if $TempDept <> $DeptID
           or $TempUnion <> $UnionCd
           move  $TempDept to $DeptID
           print $DeptID             (0,23) ! Changed from 13 to 23
        end-if

        print $TempBus               (0,39)
        print $TempEmpl              (+0,50) ! Changed from 25 to 35, 50
        do Format-Number(#TempEmplRcd, $out, '999')
        print $out                   (0,65)
        print $TempName              (0,75,35)
        do Format-Number(#TempTot, $out, '999')
        print $out                   (0,113)

        add 1 to #i

   END-WHILE

end-procedure


begin-procedure Process-OT-Hours

  move &Total_OT to #Total_OT
  move &A.EmplID to $EmplID
  do Get-Employee-Name             !returns $Name

end-procedure

begin-procedure Company-Change

  if $company <> ''
     new-page
  end-if
  move '*' to $UnionCd
  move ' ' to $DeptID
  do Clear-Array
  let #array_element = 0
end-procedure

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getftdts.sqc'  !Get-From-Thru-Dates procedure
#Include 'getunion.sqc'  !Get-Union-Name procedure
#Include 'getcodta.sqc'  !Get-Company-Data
#Include 'getempnm.sqc'  !Get-Employee-Name
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
