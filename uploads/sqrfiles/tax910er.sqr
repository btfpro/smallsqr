
!***********************************************************************
!  TAX910ER:  W-2 Record Error Report- All                             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2012/11/08:21:17:37                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872695                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup01.sqc'  !printer and page-size init

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX910ER' to $ReportID
  move 'YE Record Error Report' to $ReportTitle
  display ''
  display 'YE Record Error Report'

  date-time () hh:mi:ss &t1
  display &t1

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Calendar-Year-Id
  do Initialization

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-US-Year-End-Parameters
     do Convert-Parameters
  end-if

  do Report-File-Create

  if $EE_Selected = 'Y'
    do Delete-Sel-Employees-Table
  end-if

  if  $Company_Selected = 'Y'
    do  Delete-Sel-Company-Table
  end-if

  date-time () hh:mi:ss &t2
  display &t2
end-procedure


begin-procedure Initialization
  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear
  do Get-Tax-Reporting-Run-Controls

  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  let #max_array_cnt = 500
  move 0  to #company-state-cnt
  create-array name=company-state-list size=501
               field=company:char
               field=state:char

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

end-procedure

begin-heading 7
  #Include 'stdhdg01.sqc'

  print 'W2 Rpt Company '                      (3,1)
  print $A.W2_Reporting_Co                     (0,+2)
  print $Descr                                 (0,+2)
  let $TaxYear = 'Tax Year ' || $CalYear
  print $TaxYear                               (3,)  center
  print 'Federal EIN '                         (4,1)
  print $A.Federal_EIN                         (,+2) edit xx-xxxxxxx
  print 'Employee ID  Employee Name'           (7,1)
  print 'SSN'                                  (0,49)
  print 'Taxform'                              (0,59)
  print 'Message'                              (0,70)
end-heading

begin-procedure Report-File-Create
begin-SELECT
A.W2_REPORTING_CO
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAXFORM_ID

  move &A.Federal_EIN     to $A.Federal_EIN  099999999
  move &A.Descr           to $A.Descr
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co
  move &A.W2_Reporting_Co to $Company

  do Get-Company-Data          !Tax_Report_Type

  do Check-Company-Data

  do Process-Employees

  do Check-for-YE_DATA

  NEW-PAGE

FROM  PS_W2_COMPANY A
WHERE A.CALENDAR_YEAR    = &TX.Balance_Year
  AND A.W2_REPORTING_CO  = A.COMPANY
       [$A.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND A.W2_REPORTING_CO  <> ' '
  AND A.TAXFORM_ID  = 'W'
ORDER BY A.W2_REPORTING_CO
end-SELECT
end-procedure

begin-procedure Process-Employees

 let $Prev-Company = ' '
 let $Prev-W2-State = ' '

begin-SELECT
E.COMPANY
E.EMPLID           () on-break level=1 print=never before=Before-EmplID
E.TAXFORM_ID
E.SEQUENCE_NUMBER
E.W2_STATE
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.MAR_STATUS
E.SPOUSE_SSN
E.EMPLOYER_ID_SWT
EE.PROCESS_FLAG

  display 'processing ' noline
  display &E.EmplID
  move &E.TaxForm_ID      to $TaxForm_ID
  move 'TAXFORM_ID'  to $FieldName
  move $TaxForm_ID   to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $TaxForm_Name

  do  Assign-Year-End-Variables

  if $TaxForm_ID <> 'P'
     do Get-EIC-Max
  end-if

  if &E.Sequence_Number <> #lastSeqNum
      let #lastSeqNum = &E.Sequence_Number
      do Load-Amounts
      do Check-Data
  end-if

  if &E.COMPANY <> $Prev-Company
     or &E.W2_STATE <> $Prev-W2-State

    if rtrim(&E.W2_STATE,' ') <> ''

     do Get-State-Descr

     move &E.Employer_ID_SWT  to $Employer-ID-SWT
     move &E.W2_STATE         to $W2-State
     move &S.DESCR            to $State-Name

     if $W2-State <> 'AS' and $W2-State <> 'GU'
        and $W2-State <> 'VI' and $W2-State <> 'PR'

       let $Found_In_Company_Array = 'N'
       let #j = 0

       while #j < #company-state-cnt and $Found_In_Company_Array = 'N'
         get $GetCompany $GetState from company-state-list(#j)
             company state

         if  &E.COMPANY       =  $GetCompany
           and $W2-State =  $GetState
              let $Found_In_Company_Array = 'Y'
         end-if

         add 1 to #j

       end-while

       if $Found_In_Company_Array = 'N'

         put &E.COMPANY $W2-State into company-state-list(#company-state-cnt)
             company state

         do Validate-SWT-ID-No-Abort
         if $Error-Message-Generated = 'Y'

              position (+1)
              print $Message       (+1,1)

         end-if

         if #company-state-cnt < #max_array_cnt
           add 1 to #company-state-cnt
         end-if

       end-if

     end-if

     move &E.COMPANY   to $Prev-Company
     move &E.W2_STATE  to $Prev-W2-State
    end-if
  end-if

FROM  PS_YE_EE EE, PS_YE_DATA E, PS_W2_COMPANY W
WHERE W.W2_REPORTING_CO  = &A.W2_Reporting_Co
  AND W.COMPANY          = E.COMPANY
  AND W.CALENDAR_YEAR    = E.CALENDAR_YEAR
!  AND W.TAXFORM_ID       = E.TAXFORM_ID
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.CALENDAR_YEAR    = &TX.Balance_Year
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used
ORDER BY E.SSN, E.EMPLID, E.SEQUENCE_NUMBER
end-SELECT
end-procedure


begin-procedure Get-State-Descr

begin-SELECT
S.DESCR

FROM PS_STATE_NAMES_TBL S
WHERE S.STATE    = &E.W2_STATE
  AND S.COUNTRY  = 'USA'
end-SELECT

end-procedure

begin-procedure Before-EmplID

  move &E.EmplID   to $E.EmplID
  move &E.YE_FNAME to $E.Fname
  move &E.YE_MIDDLE_NAME to $E.MiddleName
  move &E.YE_LNAME to $E.Lname
  move &E.YE_SUFFIX to $E.Suffix
  let $E.Fname = rtrim($E.Fname, ' ')  || ' '
  let $E.MiddleName = rtrim($E.MiddleName, ' ') || ' '
  let $E.Lname = rtrim($E.Lname, ' ')  || ' '
  let $E.Suffix =rtrim($E.Suffix, ' ')  || ' '
  if $E.MiddleName <> ' '
    let $E.YE_Fname = $E.Fname || $E.MiddleName || $E.Lname || $E.Suffix
  else
    let $E.YE_Fname = $E.Fname || $E.Lname || $E.Suffix
  end-if
  let #lastSeqNum = 0

end-procedure

begin-procedure Check-Data
  if &E.Sequence_Number = 1
    do Check-EE-Data
  end-if

  do Check-Amounts

   If $TaxForm_ID = 'P'
      do init-PR
   else
      do init-Rest
   end-if

end-procedure

begin-procedure init-PR
  move 0 to #07
  move 0 to #08
  move 0 to #09
  move 0 to #10
  move 0 to #11
  move 0 to #12
  move 0 to #13
  move 0 to #14
  move 0 to #15
  move 0 to #16
  move 0 to #17
  move 0 to #18
  move 0 to #19
  move 0 to #20
  move 0 to #21
  move 0 to #22
  move 0 to #23
end-procedure

begin-procedure init-Rest

  move 0 to #01
  move 0 to #02
  move 0 to #03
  move 0 to #04
  move 0 to #05
  move 0 to #06
  move 0 to #07
  move 0 to #08
  move 0 to #09
  move 0 to #10
  move 0 to #11AB
!  move 0 to #12
  move 0 to #12A
  move 0 to #12B
  move 0 to #12C
  move 0 to #12D
  move 0 to #12E
  move 0 to #12F
  move 0 to #12G
  move 0 to #12H
  move 0 to #12J
  move 0 to #12K
  move 0 to #12L
  move 0 to #12M
  move 0 to #12N
  move 0 to #12P

end-procedure

begin-procedure Load-Amounts

  let $PA_local_err = 'N'

begin-SELECT
C.W2_REPORTING_CO
D.STATE
D.BOX
D.LOCALITY
D.WORK_PSD_CD
D.RES_PSD_CD
#ifdef DB2ALL
DECIMAL(SUM(D.W2_AMOUNT),15,3) &D.W2_Amount
#else
SUM(D.W2_AMOUNT) &D.W2_Amount
#endif
   move &D.W2_Amount to #Amount

   let $D.Box = &D.Box
   let $D.State = RTRIM(&D.State,' ')
   let $D.Locality = &D.Locality
   move $D.Box to $Box xx
   let $Pos3 = substr($D.Box, 3,1)

   if $Box = $YE_Box12_StartPos or
      $Box = $YE_Other
      and $Pos3 > ' '
     let $D.Box = &D.Box
     let $D.Box = rpad($D.Box,4,' ')
   else
     let $D.Box = RTRIM(&D.Box,' ')
   end-if

   If $TaxForm_ID = 'P'
      do check-box-PR
   else
      do check-box-Rest
   end-if

   if ((&Tax_Report_Type = 'M') OR (&Tax_Report_Type = 'N'))
      and (&D.W2_Amount <> 0)
      move 'Form voided. Reportable W2 amounts for non employee' to $Message
      move 'Y' to $VoidNegative
      do Print-Error-Line
   end-if

   if rtrim(&D.State, ' ') = 'PA' 
   and rtrim(&D.Locality, ' ') <> ''
       let $D.Work_PSD_Cd = &D.Work_PSD_Cd
       let $D.Res_PSD_Cd  = &D.Res_PSD_Cd

       if (rtrim(&D.Locality, ' ') = '880000' or
           rtrim(&D.Locality, ' ') = '990000')
           move 'Y' to $PA_local_err
           move 'Locality code is invalid'  to $Message
           do Print-Error-Line
       else
           if (rtrim(&D.Work_PSD_Cd, ' ') = '' or 
               rtrim(&D.Res_PSD_Cd, ' ')  = '')
              move 'Y' to $PA_local_err
              move 'Missing one or both PSD Codes'  to $Message
              do Print-Error-Line
           end-if
       end-if
   end-if


FROM  PS_YE_AMOUNTS D, PS_W2_COMPANY C
WHERE C.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND C.COMPANY         = D.COMPANY
  AND C.CALENDAR_YEAR   = D.CALENDAR_YEAR
  AND D.EMPLID          = &E.Emplid
  AND D.CALENDAR_YEAR   = &TX.Balance_Year
  AND D.TAXFORM_ID      = &E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = &E.Sequence_Number
GROUP BY C.W2_REPORTING_CO, D.STATE, D.BOX, D.LOCALITY, D.WORK_PSD_CD, D.RES_PSD_CD
ORDER BY C.W2_REPORTING_CO, D.STATE, D.BOX, D.LOCALITY, D.WORK_PSD_CD, D.RES_PSD_CD
end-SELECT
end-procedure


begin-procedure check-box-Rest

!  Box 12C only has negative amount error if TOTAL of 12C is negative.
   if #Amount < 0 and $D.Box <> '12C '
     move 'Form voided. Negative Amount in Box' to $Message
     concat &D.Box with $Message
     if $D.Box = '18' or $D.Box = '19'
        concat ' for locality ' with $Message
        concat  $D.Locality with $Message
     end-if
     move 'Y' to $VoidNegative
     do Print-Error-Line
   end-if

  if (($D.Box ='16' or $D.Box ='18') and $D.State='NY')
      do get_amount_01
      if #Amount > #Amount_01
        if $D.Box ='16'
          move 'Box 16 Amount > Box 1 Amount' to $Message
        else
          move 'Box 18 Amount > Box 1 Amount' to $Message
        end-if
        do Print-Error-Line
      end-if
   end-if

   evaluate $D.Box
     when = $YE_Fed_Wages                        !Federal wages
       add  #Amount to #01
       break
     when = $YE_Fed_Tax                          !Federal tax
       add  #Amount to #02
       break
     when = $YE_SS_Wages                         !SS wages
       add  #Amount to #03
       break
     when = $YE_SS_Tax                           !SS Tax
       add  #Amount to #04
       break
     when = $YE_Med_Wages                        !Medicare wages
       add  #Amount to #05
       break
     when = $YE_Med_Tax                          !Medicare tax
       add  #Amount to #06
       break
     when = $YE_SS_Tips                          !SS tips
       add  #Amount to #07
       break
     when = $YE_Alloc_Tips                       !Allocated tips
       add  #Amount to #08
       break
     when = $YE_Adv_EIC                          !EIC
       add  #Amount to #09
       break
     when = $YE_Dep_Care                         !Dependent care
       add  #Amount to #10
       break
     when = $YE_Non_Qual_457_Y                   !non-qualified 457
       add  #Amount to #11AB
       move 'Y' to $Amt11A
       break
     when = $YE_Non_Qual_457_N                   !non-qualified non-457
       add  #Amount to #11AB
       move 'Y' to $Non457
       break
     when = $YE_Uncoll_SS_Tax_On_Tips            !Uncoll SS tax on tips
       add  #Amount to #12A
       break
     when = $YE_Uncoll_Med_Tax_On_Tips            !Uncoll Medi tax on tips
       add  #Amount to #12B
       break
     when = $YE_Group_Term_Life                   !GTL
       add  #Amount to #12C
       break
     when = $YE_401K                              !401(k)
       add  #Amount to #12D
       break
     when = $YE_403B                              !403(b)
       add  #Amount to #12E
       break
     when = $YE_408K6                             !408(k)(6)
       add  #Amount to #12F
       break
     when = $YE_457B                              !457(b)
       add  #Amount to #12G
       break
     when = $YE_501C18D                           !501(c)(18)(D)
       add  #Amount to #12H
       break
     when = $YE_Sick_Pay                          !Sick pay
       add  #Amount to #12J
       break
     when = $YE_Excise_Tax                        !Excise tax
       add  #Amount to #12K
       break
     when = $YE_Business_Exp                      !Business expense
       add  #Amount to #12L
       break
     when = $YE_Uncoll_SS_Tax_GTL                 !Uncoll SS tax - GTL
       add  #Amount to #12M
       break
     when = $YE_Uncoll_Med_Tax_GTL                !Uncoll Medi tax - GTL
       add  #Amount to #12N
       break
     when = $YE_Excl_Moving_Exp                   !Excl Moving Exp
       add  #Amount to #12P
       break
   end-evaluate

end-procedure

begin-procedure get_amount_01
let #Amount_01=0
begin-SELECT
F.W2_AMOUNT
  add &F.W2_Amount to #Amount_01
FROM  PS_YE_AMOUNTS F
WHERE F.COMPANY in (
                    SELECT G.COMPANY
                    FROM   PS_W2_COMPANY G
                    WHERE  G.W2_REPORTING_CO=$A.W2_Reporting_Co
                    AND    G.CALENDAR_YEAR=&TX.Balance_Year
                   )
  AND F.EMPLID=&E.Emplid
  AND F.CALENDAR_YEAR=&TX.Balance_Year
  AND F.TAXFORM_ID=&E.TaxForm_ID
  AND (F.BOX='01' OR F.BOX='01 ' OR F.BOX='01  ')
  AND F.SEQUENCE_NUMBER=(SELECT MAX(F1.SEQUENCE_NUMBER)
                         FROM PS_YE_AMOUNTS F1
                         WHERE F1.COMPANY=F.COMPANY
                         AND   F1.EMPLID=F.EMPLID
                         AND   F1.CALENDAR_YEAR=F.CALENDAR_YEAR
                         AND   F1.TAXFORM_ID=F.TAXFORM_ID
                         AND   F1.BOX=F.BOX)
  end-SELECT

end-procedure

begin-procedure check-box-PR

   if #Amount < 0
     move 'Form voided. Negative Amount in Box' to $Message
     concat $D.Box with $Message
     if $D.Box = '18' or $D.Box = '19'
        concat ' for locality ' with $Message
        concat  $D.Locality with $Message
     end-if
     move 'Y' to $VoidNegative
     do Print-Error-Line
   end-if

   evaluate $D.Box
     when = $YE_Cost_Pension_Annuity                 !Pension/Annuity
       add  #Amount to #07
       break
     when = $YE_Wages                                !PR wages
       add  #Amount to #08
       break
     when = $YE_Commissions                          !Commissions
       add  #Amount to #09
       break
     when = $YE_Allowance                            !Allowances
       add  #Amount to #10
       break
     when = $YE_Tips                                 !Tips
       add  #Amount to #11
       break
     when = $YE_Reimbursed_Expense                   !Reimbursed Expenses
       add  #Amount to #13
       break
     when = $YE_Tax_Withheld                         !PR Tax Withheld
       add  #Amount to #14
       break
     when = $YE_Retire_Fund                          !Retirement fund
       add  #Amount to #15
       break
     when = $YE_CODA_Plans                           !CODA Contributions
       add  #Amount to #16
       break
     when = $YE_SS_Wages                             !Soc Sec Wages
       add  #Amount to #17
       break
     when = $YE_SS_Tax                               !Soc Sec Tax Withheld
       add  #Amount to #18
       break
     when = $YE_Med_Wages                            !Medicare Wages and Tips
       add  #Amount to #19
       break
     when = $YE_Med_Tax                              !Medicare Tax Withheld
       add  #Amount to #20
       break
     when = $YE_SS_Tips                              !Soc Sec Tips
       add  #Amount to #21
       break
     when =  $YE_SS_Tax_Tips                         !Uncollected Soc Sec
       add  #Amount to #22                           ! Tax on Tips
       break
     when = $YE_Med_Tax_Tips                         !Uncollected Medicare
       add  #Amount to #23                           ! Tax on Tips
       break
   end-evaluate

end-procedure

begin-procedure Check-Company-Data
  let $tmp = SUBSTR(EDIT($A.Federal_EIN,'099999999'),1,2)
  evaluate $tmp
    when = '00'
    when = '07'
    when = '08'
    when = '09'
    when = '17'
    when = '18'
    when = '19'
    when = '28'
    when = '29'
    when = '49'
    when = '69'
    when = '70'
    when = '78'
    when = '79'
    when = '89'
      move 'Missing or Invalid Federal EIN' to $Message
      print $A.W2_Reporting_Co  (+1,1)
      print $A.Descr            (0,14)
      print $A.Federal_EIN      (0,45) edit 099999999
      print $Message            (0,70)
  end-evaluate

  if (RTRIM(&A.Address1,' ') = '' and RTRIM(&A.Address2,' ') = '') or
      RTRIM(&A.City,' ')    = '' or
      RTRIM(&A.State,' ')   = '' or
      RTRIM(&A.Postal,' ')  = ''
    move 'Incomplete employer address' to $Message
    do Print-Error-Line
  end-if
end-procedure

begin-procedure Check-EE-Data
  let #tmp = TO_NUMBER(&E.SSN)               !Verify SSN is numeric
  let $SSN = EDIT(TO_CHAR(#tmp),'099999999')
  if #tmp = 0 and &E.SSN <> 'XXXXXXXXX'
    move 'Missing SSN or SSN = 000000000' to $Message
    do Print-Error-Line
  else
    if $SSN <> &E.SSN
      move 'Invalid SSN' to $Message
      do Print-Error-Line
    else                                     !Check for invalid #'s
    if RTRIM(&E.SSN, ' ') = ''
          or &E.SSN  = '999999999'
          or SUBSTR(&E.SSN,1,3)  = '000'
          or SUBSTR(&E.SSN,1,3) = '666'
          or SUBSTR(&E.SSN,1,1) = '9'
          or SUBSTR(&E.SSN,4,2) = '00'
          or SUBSTR(&E.SSN,6,4) = '0000'
        move 'Invalid SSN' to $Message
        do Print-Error-Line
      end-if
    end-if
  end-if

  if RTRIM(&E.Country,' ') = 'USA' or
     RTRIM(&E.Country,' ') = 'CAN'
     if (RTRIM(&E.Address1,' ') = '' and RTRIM(&E.Address2,' ') = '') or
         RTRIM(&E.City,' ')    = '' or
         RTRIM(&E.State,' ')   = '' or
         RTRIM(&E.Postal,' ')  = ''
       move 'Incomplete employee address' to $Message
       do Print-Error-Line
     end-if
  end-if


if $TaxForm_ID = 'P'

   do PR-check-EE

end-if

end-procedure


begin-procedure PR-check-EE

! if &E.Mar_Status = 'M'
!      if RTRIM(&E.Spouse_SSN, ' ') = ''
!            or &E.Spouse_SSN  = '111111111'
!            or &E.Spouse_SSN  = '333333333'
!            or &E.Spouse_SSN  = '999999999'
!            or (SUBSTR(&E.Spouse_SSN,1,3) >= '729' and
!                SUBSTR(&E.Spouse_SSN,1,3) <= '799')
!            or &E.Spouse_SSN >= '800000000'
!          move 'Invalid Spouse SSN' to $Message
!          do Print-Error-Line
!      end-if
! end-if

begin-SELECT
F.COMPANY
F.EMPLID
F.STATE
F.TAX_CLASS
F.TAX_YTD
F.TXGRS_YTD


  evaluate &F.Tax_Class
    when = 'H'  !Withholding

      if  rtrim(&F.State, ' ') = '$U'
      and &Tax_Report_Type = 'P'
        if &F.Tax_YTD > 0 or &F.TxGrs_YTD > 0
           move 'FWT tax balance for Puerto Rico employee'   to $Message
           do Print-Error-Line
        end-if
      end-if

      if  (rtrim(&F.State, ' ') = 'PR'
          or rtrim(&F.State, ' ') = '$UPR')
      and &Tax_Report_Type <> 'P'
        if &F.Tax_YTD > 0 or &F.TxGrs_YTD > 0
           move 'Puerto Rico tax balance in a non-Puerto Rico company'  to $Message
           do Print-Error-Line
        end-if
      end-if


      if  rtrim(&F.State, ' ') <> '$U' and rtrim(&F.State, ' ') <> 'PR'
          and rtrim(&F.State, ' ') <> '$UPR'
      and &Tax_Report_Type = 'P'
           if &F.Tax_YTD > 0 or &F.TxGrs_YTD > 0
              let $Message = rtrim(&F.State, ' ')
              concat ' tax balance- only Puerto Rico tax balance expected' with $Message
              do Print-Error-Line
           end-if
      end-if

      break

    when = 'C'  !Earned Income Credit
      if &F.State = '$UPR'
        if &F.Tax_YTD > 0 or &F.TxGrs_YTD > 0
           move 'EIC for Puerto Rico employee'   to $Message
           do Print-Error-Line
        end-if
      else
        if &F.State = '$UAS'
          if &F.Tax_YTD > 0 or &F.TxGrs_YTD > 0
             move 'EIC for American Samoa employee'   to $Message
             do Print-Error-Line
          end-if
        end-if
      end-if

  end-evaluate

FROM  PS_TAX_BALANCE F
WHERE F.EMPLID        = &E.EmplID
  AND F.COMPANY       = &E.Company
  AND F.BALANCE_YEAR = &TX.Balance_Year
  AND F.BALANCE_ID    = $Calendar_Year_Id
  AND F.TAX_CLASS    IN ('H','C')
  AND F.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = F.EMPLID
         AND  COMPANY       = F.COMPANY
         AND  STATE         = F.STATE
         AND  TAX_CLASS     = F.TAX_CLASS)
ORDER BY F.COMPANY,F.EMPLID,F.STATE,F.TAX_CLASS

end-SELECT

end-procedure


begin-procedure Check-Amounts

  do Get-OASDI-Max

If $TaxForm_ID = 'P'

   do check-amounts-PR

else

  do check-amounts-Rest

end-if

end-procedure

begin-procedure check-amounts-PR

  if #17 > #MaxGross
    move 'OASDI Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  let #Comp1 = round((#18),2)
  move #Comp1 to $Comp1
  let $Comp1 = LTRIM($Comp1, ' ')
  move $Comp1 to #Comp1

  let #Comp2 = round((#MaxTax),2)
  move #Comp2 to $Comp2
  let $Comp2 = LTRIM($Comp2, ' ')
  move $Comp2 to #Comp2

  if #Comp1 > #Comp2
    move 'OASDI Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = (#21 + #17) * #TaxRt
  if (#CalcTax - #18) > 0.01 OR (#CalcTax - #18) < -0.01
    move 'OASDI Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  move #19 to #MedicareGross
  do Get-Medicare-Max

  if #19 > #MaxGross
    move 'Medicare Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  if #20 > #MaxTax
    move 'Medicare Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = #19 * #TaxRt
  if (#CalcTax - #20) > 0.01 OR (#CalcTax - #20) < -0.01
    move 'Medicare Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  if #08 < 0
    move 'Form voided. Box 8 Wages are Negative' to $Message
    move 'Y' to $VoidNegative
    do Print-Error-Line
  end-if

end-procedure

begin-procedure check-amounts-Rest

   if #03 > #MaxGross
    move 'OASDI Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  let #Comp1 = round((#04),2)
  move #Comp1 to $Comp1
  let $Comp1 = LTRIM($Comp1, ' ')
  move $Comp1 to #Comp1

  let #Comp2 = round((#MaxTax),2)
  move #Comp2 to $Comp2
  let $Comp2 = LTRIM($Comp2, ' ')
  move $Comp2 to #Comp2

  if #Comp1 > #Comp2
    move 'OASDI Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = (#03 + #07) * #TaxRt
  if (#CalcTax - #04) > 0.01 OR (#CalcTax - #04) < -0.01
    move 'OASDI Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  move #05 to #MedicareGross
  do Get-Medicare-Max

  if #05 > #MaxGross
    move 'Medicare Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  if #06 > #MaxTax
    move 'Medicare Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = #05 * #TaxRt
  if (#CalcTax - #06) > 0.01 OR (#CalcTax - #06) < -0.01
    move 'Medicare Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  if #09 < #EICMax
    move 'EIC Advance Payment Exceeds ' to $Message
    move #EICMax to $EICMax b99,999,999.99
    let $Message = $Message || $EICMax
    do Print-Error-Line
  end-if

  if #11AB > #01
    move 'Box 11 Amount > Box 1 Amount.'   to $Message
    do Print-Error-Line
  end-if

!  if #12 > #01
!    move 'Box 12 Amount > Box 1 Amount.'   to $Message
!    do Print-Error-Line
!  end-if

  if #12C < 0
    move 'Form voided. Box 12C Total Amount < 0.'  to $Message
    move 'Y' to $VoidNegative
    do Print-Error-Line
  end-if

!  if &E.Deferred_Comp = 'N'
!    if #12D <> 0 or #12E <> 0 or #12F <> 0 or #12G <> 0 or #12H <> 0
!      move '12D,E,F,G,or H <> 0, Def Comp not marked ' to $Message
!      do Print-Error-Line
!    end-if
!  end-if


end-procedure

begin-procedure Print-Error-Line
  position (+1)
  if &E.EmplID <> $priorEmplID or &E.Company <> $priorCompany
    print &E.EmplID         (+1,1)
    print $E.YE_FName       (0,14,30)
    print &E.SSN            (0,45) edit xxx-xx-xxxx
  end-if
  if &E.EmplID <> $priorEmplID or &E.Company <> $priorCompany
     or &E.TaxForm_ID <> $priorTaxForm
     or $VoidNegative <> $priorVoidNegative
      move &E.EmplID  to $priorEmplID
      move &E.Company to $priorCompany
      move &E.TaxForm_ID to $priorTaxForm
      move $VoidNegative to $priorVoidNegative
      if $MarkVoids = 'Y'
        or $VoidNegative = 'Y'
          do Mark-Void
      end-if
  end-if
  move 'N' to $VoidNegative

  if $PA_local_err = 'Y'
     if $D.Locality <> $priorLocal or $D.Work_PSD_Cd <> $priorWorkPSD
        or $D.Res_PSD_Cd <> $priorResPSD
         print $TaxForm_Name       (0,59)
         print $Message            (0,70)
         print 'Locality ='       (+1,70)
         print $D.Locality          (,+1) 
         print 'Work PSD ='       (+1,70)
         print $D.Work_PSD_Cd       (,+1)
         print 'Res PSD  ='       (+1,70)
         print $D.Res_PSD_Cd        (,+1)

         move 'N'            to $PA_local_err
         move $D.Locality    to $priorLocal
         move $D.Work_PSD_Cd to $priorWorkPSD
         move $D.Res_PSD_Cd  to $priorResPSD
     end-if
  else
     print $TaxForm_Name       (0,59)
     print $Message            (0,70)
  end-if
 
end-procedure

begin-procedure Mark-Void
begin-SELECT
C.COMPANY

  do Update-W2-EE

FROM  PS_W2_COMPANY C
WHERE C.CALENDAR_YEAR    = &TX.Balance_Year
  AND C.W2_REPORTING_CO  = &A.W2_Reporting_Co
end-SELECT
end-procedure

begin-procedure Update-W2-EE
  begin-SQL on-error=Ignore
    UPDATE PS_YE_EE
       SET PROCESS_FLAG = 'V'
     WHERE COMPANY           = &C.Company
       AND EMPLID            = &E.EmplID
       AND CALENDAR_YEAR     = &TX.Balance_Year
       AND TAXFORM_ID        = $TaxForm_ID
  end-SQL
end-procedure

begin-procedure Prompts
  while $MarkVoids = ''
    display ''
    input $MarkVoids 'Update STATUS to VOID if error found? (Y/N)'
    uppercase $MarkVoids
    if INSTR('YN',$MarkVoids,1) = 0
      display 'Enter Y or N'
      move '' to $MarkVoids
    end-if
  end-while

  while $SelectEEs = ''
    display ''
    display 'Regular processing or Select employees?'
    input $SelectEEs 'Enter R or S'
    uppercase $SelectEEs
    if INSTR('RS',$SelectEEs,1) = 0
      display 'Enter R or S'
      move '' to $SelectEEs
    end-if
  end-while

  if $SelectEEs = 'S'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND E.EmplID in (''' to $E.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      if $SelectedEmplID <> ''
        uppercase $SelectedEmplID
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
  end-if
end-procedure

begin-procedure Get-OASDI-Max

begin-SELECT
ST.TAX_RT
ST.MAX_GROSS

  move &ST.Tax_Rt    to #TaxRt
  move &ST.Max_Gross to #MaxGross
  let #MaxTax = round((&ST.Max_Gross * #TaxRT),2)
  move #MaxTax to $MaxTax
  let $MaxTax = LTRIM($MaxTax, ' ')
  move $MaxTax to #MaxTax

FROM  PS_ST_OTH_TAX_TBL ST
WHERE ST.TAX_CLASS = 'D'
  AND ST.STATE     = '$U'
  AND ST.EFFDT =
      (SELECT MAX(S.EFFDT)
       FROM   PS_ST_OTH_TAX_TBL S
       WHERE  S.STATE      = ST.STATE
         AND  S.TAX_CLASS  = ST.TAX_CLASS
         AND  S.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Get-Medicare-Max

begin-SELECT
OT.TAX_RT
OT.MAX_GROSS

  move &OT.Tax_Rt    to #TaxRt
  move &OT.Max_Gross to #MaxGross
  let #MaxTax = round((&OT.Max_Gross * #TaxRT),2)
  move #MaxTax to $MaxTax
  let $MaxTax = LTRIM($MaxTax, ' ')
  move $MaxTax to #MaxTax

FROM  PS_ST_OTH_TAX_TBL OT
WHERE OT.TAX_CLASS = 'F'
  AND OT.STATE     = '$U'
  AND OT.EFFDT =
      (SELECT MAX(O.EFFDT)
       FROM   PS_ST_OTH_TAX_TBL O
       WHERE  O.STATE      = OT.STATE
         AND  O.TAX_CLASS  = OT.TAX_CLASS
         AND  O.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Get-EIC-Max
begin-SELECT
TT.SPECIAL_AMT_2

  let #EICMax = (&TT.Special_Amt_2 * -1)

FROM  PS_STATE_TAX_TBL TT
WHERE TT.STATE     = '$E'
  AND TT.EFFDT =
      (SELECT MAX(T.EFFDT)
       FROM   PS_STATE_TAX_TBL T
       WHERE  T.STATE      = '$E'
         AND  T.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Check-for-YE_DATA

begin-SELECT DISTINCT
Y.COMPANY
Y.EMPLID
Y.CALENDAR_YEAR
Y.TAXFORM_ID
Y.SEQUENCE_NUMBER

  show 'Not in PS_YE_DATA: ' &Y.COMPANY ' ' &Y.EMPLID ' ' &Y.TAXFORM_ID ' ' &Y.SEQUENCE_NUMBER
  do Print-YE_DATA-Error

FROM PS_YE_AMOUNTS Y, PS_W2_COMPANY W1
WHERE W1.W2_REPORTING_CO  = &A.W2_Reporting_Co
  AND W1.COMPANY          = Y.COMPANY
  [$Y.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND W1.CALENDAR_YEAR    = Y.CALENDAR_YEAR
  AND Y.CALENDAR_YEAR    = &TX.Balance_Year
  [$Y.SelectedEEs]             !NULL string if SELECT EEs option not used
  AND NOT EXISTS (SELECT 'X' FROM PS_YE_DATA
                  WHERE Y.COMPANY         = COMPANY
                    AND Y.EMPLID          = EMPLID
                    AND Y.CALENDAR_YEAR   = CALENDAR_YEAR
                    AND Y.TAXFORM_ID      = TAXFORM_ID
                    AND Y.SEQUENCE_NUMBER = SEQUENCE_NUMBER)
ORDER BY Y.COMPANY, Y.EMPLID
end-SELECT

end-procedure

begin-procedure Print-YE_DATA-Error

  let $Message = 'Missing row on PS_YE_DATA'
  move 'TAXFORM_ID'  to $FieldName
  move &Y.TAXFORM_ID to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $TaxForm_Name

  position (+1)
  print &Y.EmplID           (+1,1)
  print 'Company:'          (0,15)
  print &Y.COMPANY          (0,25)
  print 'Sequence Number:'  (0,35)
  print &Y.SEQUENCE_NUMBER  (0,52) edit xx
  print $TaxForm_Name       (0,59)
  print $Message            (0,70)

end-procedure

begin-procedure Ignore
end-procedure

begin-procedure Convert-Parameters

  move $RC_US_YE.Reg_Select_Proc     to $SelectEEs
  move $RC_US_YE.Reg_Select_Comp   to $SelectCompanies
  move $RC_US_YE.Mark_Voids_Flag     to $MarkVoids

  if $SelectEEs = 'S'
     do Read-EEs
  end-if

  if $SelectCompanies = 'C'
    do Read-Companies
  end-if
end-procedure

begin-procedure Read-EEs

move 'AND E.EMPLID in (''' to $E.SelectedEEs
move 'AND S.EMPLID in (''' to $S.SelectedEEs
move 'AND J.EMPLID in (''' to $J.SelectedEEs
move 'AND Y.EMPLID in (''' to $Y.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
C.SELECTED_EE

  move &C.Selected_EE     to $SelectedEmplID

  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
  let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
  let $Y.SelectedEEs = $Y.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX910ER C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
let $S.SelectedEEs = $S.SelectedEEs || ')'

let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
let $J.SelectedEEs = $J.SelectedEEs || ')'

let $Y.SelectedEEs = SUBSTR($Y.SelectedEEs,1,LENGTH($Y.SelectedEEs) - 2)
let $Y.SelectedEEs = $Y.SelectedEEs || ')'

end-procedure

begin-procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX910ER
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-Companies

move 'AND A.COMPANY in (''' to $A.SelectedCompanies
move 'AND Y.COMPANY in (''' to $Y.SelectedCompanies
move ' ' to $SelectedEmplID

begin-SELECT
D.SELECTED_COMPANY

  move &D.SELECTED_COMPANY    to $SelectedCompany

  let $A.SelectedCompanies = $A.SelectedCompanies || $SelectedCompany || ''','''
  let $Y.SelectedCompanies = $Y.SelectedCompanies || $SelectedCompany || ''','''
  move 'Y' to $Company_Selected

FROM  PS_RC_SEL_COMPANY D
WHERE D.OPRID         = $Prcs_OprID
  AND D.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

  if $Company_Selected = 'Y'
      let $A.SelectedCompanies = SUBSTR($A.SelectedCompanies,1,LENGTH($A.SelectedCompanies) - 2)
  else
      let $A.SelectedCompanies = $A.SelectedCompanies || ''''
  end-if
  let $A.SelectedCompanies = $A.SelectedCompanies || ')'

let $Y.SelectedCompanies = SUBSTR($Y.SelectedCompanies,1,LENGTH($Y.SelectedCompanies) - 2)
let $Y.SelectedCompanies = $Y.SelectedCompanies || ')'

end-procedure

begin-procedure Delete-Sel-Company-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_SEL_COMPANY
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'w2.sqc'        !Routine for W2 Year End Box variables
#Include 'validein.sqc'  !Validate state EIN procedures
