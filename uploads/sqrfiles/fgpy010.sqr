!***********************************************************************
!  FGPY010:  Print Pre-IRR Worksheet                                       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:03:44:48                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'      !Set environment
#include 'setup32.sqc'     !printer definition

#define Year4      '1'   !Changing year to YYYY
#define DDelimiter '-'   !Changing date separator to dashes

Begin-Report

display 'begin report'
do Init-DateTime
do Init-Number
do Get-Current-DateTime
do Init-Report

do Process-Main

do Commit-Transaction
do Stdapi-Term

End-Report


Begin-Heading 10

#include 'stdhdg01.sqc'

print 'Name'                              (+2,2,0) bold
print 'Birthdate'                         (0,34,0) bold
print 'SSN#'                              (0,47,0) bold
print 'Agency'                            (0,60,0) bold
print 'Payroll Office'                    (0,80,0) bold
print 'Location'                          (0,100,0) bold
print 'Payroll Office No'                 (0,120,0) bold

print $field1                            (+2,2,0)  !name
print $field2                            (0,34,0)  !bday
print $field3                            (0,47,0) !ssn

 let #sv_cur_line = #current-line
 if rtrim($field4, ' ') <> ''                      !agency
   let $prntext = $field4
   let #PrnStartCol = 60
   let #PrnStartRow = #current-line
   let #MaxWrapWidth = 70
   let #MoveLinesDown = 1
   let #MaxPrnLines = 3
   let $PrintBold = 'N'
   do PrintWrap
 end-if
 position (#sv_cur_line)
 if rtrim($field5, ' ') <> ''                      !Payroll Office
   let $prntext = $field5
   let #PrnStartCol = 80
   let #PrnStartRow = #current-line
   let #MaxWrapWidth = 95
   let #MoveLinesDown = 1
   let #MaxPrnLines = 3
   let $PrintBold = 'N'
   do PrintWrap
 end-if
 position (#sv_cur_line)
 if rtrim($field6, ' ') <> ''                      !Location
   let $prntext = $field6
   let #PrnStartCol = 100
   let #PrnStartRow = #current-line
   let #MaxWrapWidth = 115
   let #MoveLinesDown = 1
   let #MaxPrnLines = 3
   let $PrintBold = 'N'
   do PrintWrap
 end-if

print $field7                            (#sv_cur_line,120,0) !payroll office no


End-Heading

!***********************************************************************
!                                                                      *
!  Function:     Init-Report                                           *
!                                                                      *
!  Description:  Initializes data for the beginning of the report      *
!                processing.                                           *
!                                                                      *
!***********************************************************************
Begin-Procedure Init-Report

move 'FGPY010'                to $ReportID
move 'Pre-IRR Worksheet Print Program' to $ReportTitle
display $ReportTitle
display $ReportDate
do Format-DateTime($AsOfToday,$Calendar_YMD, {DEFYMD}, '', '')
let #cur_yr = substr($Calendar_YMD,1,4)
let $first_pg = 'Y'

do Stdapi-Init

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Process-Main                                          *
!                                                                      *
!  Description:  Performs the main processing of the program.          *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-Main

if $prcs_process_instance = ''
  display '********************************'
  display 'Please enter the following data:'
  display '********************************'
  Input $run_emplid 'EmplId'
  Input #run_empl_rcd 'Empl Rcd#'
  do Process-Worksheet
else
  do Select-Run-Control-Data
end-if


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Run-Control-Data                               *
!                                                                      *
!  Description:  Select run control variables.                         *
!                                                                      *
!***********************************************************************

Begin-Procedure Select-Run-Control-Data


Begin-Select

SEL.OPRID
SEL.RUN_CNTL_ID
SEL.EMPLID
SEL.EMPL_RCD

  let $run_emplid = &sel.emplid
  let #run_empl_rcd = &sel.EMPL_RCD

  do Process-Worksheet
  new-page

from PS_GVT_FIN_RUNCTL2 SEL
where SEL.OPRID       = $prcs_oprid
and   SEL.RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY SEL.EMPLID

End-Select


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Process-Worksheet                                     *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-Worksheet

display 'Processing worksheet for: ' noline
display $run_emplid

do Select-Header-Data

!if $first_pg = 'N'
!  new-page
!
!else
!  let $first_pg = 'N'
!end-if

do Select-Service-History

do Select-Basic-Pay

do Select-LWOP

do Select-Fiscal-Data


End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Header-Data                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Header-Data

Begin-Select

E.EMPLID
E.EMPL_RCD
NN.NAME
NID.COUNTRY
NID.NATIONAL_ID_TYPE
NID.NATIONAL_ID
NN.BIRTHDATE
D.DESCR
C.GVT_ADDRESS1
C.GVT_ADDRESS_CITY
C.GVT_ADDRESS_STATE
C.GVT_AGY_LOC_CODE

   display &nn.name
   let $field1 = &nn.name
   Do format-datetime(&nn.birthdate,$out,{defdate},'','')
   let $field2 = $out
   let $field3 = edit(&nid.national_id, 'xxx-xx-xxxx')
   let $field4 = &d.descr
   let $field5 = &c.gvt_address1
   let $field6 = rtrim(&c.gvt_address_city, ' ') || ', ' || &c.gvt_address_state
   let $field7 = &c.gvt_agy_loc_code

FROM  PS_GVT_JOB          E,
      PS_GVT_PERS_DATA    NN,
      PS_GVT_PERS_NID     NID,
      PS_GVT_INTRFC_INFO  C,
      PS_COMPANY_TBL      D

WHERE E.EMPLID             = $run_emplid
and   E.EMPL_RCD          = #run_empl_rcd
and   E.EFFDT              = (SELECT MAX(E1.EFFDT)
                               FROM PS_GVT_JOB E1
                               WHERE E1.EMPLID = E.EMPLID
                               AND   E1.EMPL_RCD = E.EMPL_RCD
                               AND   E1.EFFDT <= $AsOfToday)
and   E.EFFSEQ             = (SELECT MAX(E2.EFFSEQ)
                              FROM PS_GVT_JOB E2
                              WHERE E2.EMPLID = E.EMPLID
                              AND   E2.EMPL_RCD = E.EMPL_RCD
                              AND   E2.EFFDT = E.EFFDT)
and   E.EMPLID             = NN.EMPLID
and   E.EMPL_RCD          = NN.EMPL_RCD
and   E.EFFDT              = NN.EFFDT
and   E.EFFSEQ             = NN.EFFSEQ
and   E.EMPLID             = NID.EMPLID
and   E.EMPL_RCD          = NID.EMPL_RCD
and   E.EFFDT              = NID.EFFDT
and   E.EFFSEQ             = NID.EFFSEQ
and   NID.COUNTRY          = 'USA'
and   NID.NATIONAL_ID_TYPE = 'PR'
AND   E.COMPANY            = D.COMPANY
and   D.EFFDT              = (SELECT MAX(D1.EFFDT)
                            FROM  PS_COMPANY_TBL D1
                            WHERE D1.COMPANY = E.COMPANY
                            AND   D1.EFFDT   <= E.EFFDT)
AND   D.COMPANY            = C.COMPANY
and   C.EFFDT              = (SELECT MAX(C1.EFFDT)
                            FROM  PS_GVT_INTRFC_INFO C1
                            WHERE C1.COMPANY = E.COMPANY
                            AND   C1.EFFDT   <= E.EFFDT)

End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Service-History                                *
!                                                                      *
!  Description:  Select all IRR Reportable PARs                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Service-History

print 'SERVICE HISTORY'                  (+1,2)  bold underline

print 'Effdt'                            (+2,2) bold
print 'Action'                           (0,14) bold
print 'Base Pay'                         (0,42) bold
print 'PAR Remarks'                      (0,57) bold

let $sh_where1 = 'AND A.EFFDT <= ''' || $AsOfToday || ''''

Begin-Select

A.EMPLID
A.EMPL_RCD
A.EFFDT
A.EFFSEQ
A.GVT_EFFDT
A.GVT_COMPRATE
A.GVT_LOCALITY_ADJ
B.DESCR25
A.GVT_PAY_PLAN
A.GRADE
A.GVT_STEP


  let $base_pay = edit(&a.gvt_comprate + &a.gvt_locality_adj,'99,999,999.99')
  Do format-datetime(&a.gvt_effdt,$out,{defdate},'','')
  let $field8 = $out


  MOVE &A.GVT_PAY_PLAN TO $GVT_PAY_PLAN
  let $GVT_PAY_PLAN = ltrim(rtrim($GVT_PAY_PLAN,' '),' ')
  MOVE &A.GRADE TO $GRADE
  let $GRADE = ltrim(rtrim($GRADE,' '),' ')
  MOVE &A.GVT_STEP TO $GVT_STEP
  let $GVT_STEP = ltrim(rtrim($GVT_STEP,' '),' ')
  LET $DISP_VAL = $GVT_PAY_PLAN || '-' || $GRADE || ' ' || 'step' || ' ' || $GVT_STEP
  let $disp_val = ltrim(rtrim($disp_val,' '),' ')
  print $field8            (+2,2,0)
  print &b.descr25         (0,14,0)
  print $base_pay          (0,42,0)
  do Select-PAR-Remarks

FROM PS_GVT_JOB A,
     PS_GVT_NOAC_TBL B

WHERE A.EMPLID               = $run_emplid
AND   A.EMPL_RCD            = #run_empl_rcd
[$sh_where1]
AND   A.GVT_NOA_CODE         =B.GVT_NOA_CODE
AND   A.ACTION               =B.ACTION
AND   B.EFFDT                = (SELECT MAX(B1.EFFDT)
                               FROM PS_GVT_NOAC_TBL B1
                               WHERE B1.ACTION = A.ACTION
                               AND B1.GVT_NOA_CODE = A.GVT_NOA_CODE
                               AND B1.EFFDT <= A.EFFDT)
AND   B.GVT_IRR_REPORTABLE   ='Y'

ORDER BY A.EFFDT ASC, A.EFFSEQ ASC


End-Select

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-PAR-Remarks                                    *
!                                                                      *
!  Description:  Select all IRR Reportable PAR Remarks                 *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-PAR-Remarks

MOVE 'N' TO $REM_FLAG
Begin-Select

P1.EMPLID
P1.EMPL_RCD
P1.EFFDT
P1.EFFSEQ
P1.GVT_SF50_REMARK
P1.GVT_INSERT_REQD
P1.GVT_REMARK_LINE1
P1.GVT_REMARK_LINE2
P1.GVT_REMARK_LINE3
P1.GVT_REMARK_LINE4
P1.GVT_REMARK_LINE5
P1.GVT_REMARK_LINE6
P1.GVT_REMARK_LINE7
P1.GVT_REMARK_LINE8
P1.GVT_REMARK_LINE9

 MOVE 'Y' TO $REM_FLAG

   if rtrim(&p1.gvt_remark_line1, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line1
      let $prnText = $DISP_VAL || ' ' || $prnText
      print $PrnText  (0,57,0)
    else
      let $prnText = $DISP_VAL
      print $PrnText  (0,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line2, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line2

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line3, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line3

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line4, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line4

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line5, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line5

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line6, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line6

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line7, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line7

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line8, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line8

      print $PrnText  (+1,57,0)
   end-if
   if rtrim(&p1.gvt_remark_line9, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line9

      print $PrnText  (+1,57,0)
   end-if

FROM PS_GVT_PAR_REMARKS P1,
     PS_GVT_SF50_RK_TBL P2

WHERE P1.EMPLID = &a.emplid
AND   P1.EMPL_RCD = &a.EMPL_RCD
AND   P1.EFFDT = &a.effdt
AND   P1.EFFSEQ = &a.effseq
AND   P1.GVT_SF50_REMARK = P2.GVT_SF50_REMARK
AND   P2.GVT_IRR_REPORTABLE='Y'
AND   P2.EFFDT =  (SELECT MAX(P2A.EFFDT)
                   FROM PS_GVT_SF50_RK_TBL  P2A
                   WHERE P2A.GVT_SF50_REMARK = P1.GVT_SF50_REMARK
                   AND   P2A.EFFDT <= P1.EFFDT)

End-Select

IF $REM_FLAG = 'N'
  let $prnText = $DISP_VAL
  print $PrnText  (0,57,0)
END-IF
MOVE ' ' TO $prnText
End-Procedure



!***********************************************************************
!                                                                      *
!  Function:     Select-Basic-Pay                                      *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Basic-Pay

let #bp_amt = 0

print 'Basic pay prior to a CSRS/FERS appt: '                  (+2,2)  bold

! Select prior year Basic Pay received during appt. with no CSRS or FERS coverage
Begin-Select

BP1.EMPLID
BP1.EMPL_RCD
BP1.GVT_YEAR
SUM(BP1.AMOUNT)      &bp1.tot_amt

   let #bp_amt = #bp_amt + &bp1.tot_amt

FROM PS_GVT_IRR_FIN_DTA BP1
WHERE BP1.GVT_IRR_FIN_CD_TP='B'
AND   BP1.EMPLID = $run_emplid
AND   BP1.EMPL_RCD = #run_empl_rcd
GROUP BY BP1.EMPLID,BP1.EMPL_RCD,BP1.GVT_YEAR

End-Select

! Select current year Basic Pay (Hourly Reg earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp2.emplid
A.EMPL_RCD           &bp2.empl_rcd
PC.GVT_PAY_YEAR       &bp2.gvt_pay_year
SUM(B.REG_HRLY_EARNS) &bp2.tot_amt

   let #bp_amt = #bp_amt + &bp2.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = $run_emplid
AND   A.EMPL_RCD = #run_empl_rcd
AND   A.PAY_END_DT <= $AsOfToday
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_REG_HRS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_REG_HRS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Hourly OT earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp3.emplid
A.EMPL_RCD           &bp3.empl_rcd
PC.GVT_PAY_YEAR       &bp3.gvt_pay_year
SUM(B.OT_HRLY_EARNS)  &bp3.tot_amt

   let #bp_amt = #bp_amt + &bp3.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = $run_emplid
AND   A.EMPL_RCD = #run_empl_rcd
AND   A.PAY_END_DT <= $AsOfToday
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_OT_HRS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_OT_HRS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Salaried Reg earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp4.emplid
A.EMPL_RCD           &bp4.empl_rcd
PC.GVT_PAY_YEAR       &bp4.gvt_pay_year
SUM(B.REG_EARNS)      &bp4.tot_amt

   let #bp_amt = #bp_amt + &bp4.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = $run_emplid
AND   A.EMPL_RCD = #run_empl_rcd
AND   A.PAY_END_DT <= $AsOfToday
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_REG_EARNS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_REG_EARNS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Other earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp5.emplid
A.EMPL_RCD           &bp5.empl_rcd
PC.GVT_PAY_YEAR       &bp5.gvt_pay_year
SUM(C.OTH_EARNS)      &bp5.tot_amt

   let #bp_amt = #bp_amt + &bp5.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_PAY_OTH_EARNS C,
     PS_GVT_JOB D,
     PS_RTRMNT_PLAN_TBL E,
     PS_EARNINGS_TBL F

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = $run_emplid
AND   A.EMPL_RCD = #run_empl_rcd
AND   A.PAY_END_DT <= $AsOfToday
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   B.COMPANY=C.COMPANY
AND   B.PAYGROUP=C.PAYGROUP
AND   B.PAY_END_DT=C.PAY_END_DT
AND   B.OFF_CYCLE=C.OFF_CYCLE
AND   B.PAGE_NUM=C.PAGE_NUM
AND   B.LINE_NUM=C.LINE_NUM
AND   B.SEPCHK=C.SEPCHK
AND   B.ADDL_NBR = C.ADDL_NBR
AND   A.EMPLID = D.EMPLID
AND   A.EMPL_RCD = D.EMPL_RCD
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GVT_JOB D1
                 WHERE D1.EMPLID = A.EMPLID
                 AND   D1.EMPL_RCD = A.EMPL_RCD
                 AND   D1.EFFDT <= A.PAY_END_DT)
AND   D.EFFSEQ = (SELECT MAX(D2.EFFSEQ)
                  FROM PS_GVT_JOB D2
                  WHERE D2.EMPLID =  A.EMPLID
                  AND   D2.EMPL_RCD = A.EMPL_RCD
                  AND   D2.EFFDT = D.EFFDT)
AND   D.GVT_RETIRE_PLAN = E.BENEFIT_PLAN
AND   E.PLAN_TYPE  = '70'
AND   E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL E1
                WHERE E1.BENEFIT_PLAN = D.GVT_RETIRE_PLAN
                AND E1.PLAN_TYPE = '70'
                AND E1.EFFDT <= D.EFFDT)
AND  E.GVT_IRR_RET_FORM <> 'C'
AND  E.GVT_IRR_RET_FORM <> 'F'
AND  C.ERNCD = F.ERNCD
AND  F.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM
                 PS_EARNINGS_TBL F1
                WHERE F1.ERNCD = C.ERNCD
                AND   F1.EFFDT <= B.PAY_END_DT)
AND  F.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

print #bp_amt                            (0,40,0)

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-LWOP                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-LWOP

print 'Leave Without Pay'                  (+2,2)  bold underline

print 'Year'                               (+2,2,0) bold
print 'Tot Hrs'                            (0,10,0) bold

! Select prior year Leave without Pay earnings
Begin-Select

L1.EMPLID
L1.EMPL_RCD
L1.GVT_YEAR
SUM(L1.HOURS_PER_YEAR)      &l1.tot_hrs

   print &l1.gvt_year                         (+1,2,0)
   print &l1.tot_hrs                          (0,10,0)

FROM PS_GVT_IRR_FIN_DTA L1
WHERE L1.GVT_IRR_FIN_CD_TP='L'
AND   L1.EMPLID = $run_emplid
AND   L1.EMPL_RCD = #run_empl_rcd
GROUP BY L1.EMPLID,L1.EMPL_RCD,L1.GVT_YEAR

End-Select

! Select current year Leave without Pay earnings
Begin-Select

A.EMPLID              &l2.emplid
A.EMPL_RCD           &l2.empl_rcd
PC.GVT_PAY_YEAR       &l2.gvt_pay_year
SUM(C.OTH_HRS)        &l2.tot_hrs

   print &l2.gvt_pay_year                     (+1,2,0)
   print &l2.tot_hrs                          (0,10,0)

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_PAY_OTH_EARNS C,
     PS_GVT_JOB D,
     PS_EARNINGS_TBL F

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = $run_emplid
AND   A.EMPL_RCD = #run_empl_rcd
AND   A.PAY_END_DT <= $AsOfToday
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   B.COMPANY=C.COMPANY
AND   B.PAYGROUP=C.PAYGROUP
AND   B.PAY_END_DT=C.PAY_END_DT
AND   B.OFF_CYCLE=C.OFF_CYCLE
AND   B.PAGE_NUM=C.PAGE_NUM
AND   B.LINE_NUM=C.LINE_NUM
AND   B.SEPCHK=C.SEPCHK
AND   B.ADDL_NBR = C.ADDL_NBR
AND   A.EMPLID = D.EMPLID
AND   A.EMPL_RCD = D.EMPL_RCD
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GVT_JOB D1
                 WHERE D1.EMPLID = A.EMPLID
                 AND   D1.EMPL_RCD = A.EMPL_RCD
                 AND   D1.EFFDT <= A.PAY_END_DT)
AND   D.EFFSEQ = (SELECT MAX(D2.EFFSEQ)
                  FROM PS_GVT_JOB D2
                  WHERE D2.EMPLID =  A.EMPLID
                  AND   D2.EMPL_RCD = A.EMPL_RCD
                  AND   D2.EFFDT = D.EFFDT)
AND  C.ERNCD = F.ERNCD
AND  F.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM
                 PS_EARNINGS_TBL F1
                WHERE F1.ERNCD = C.ERNCD
                AND   F1.EFFDT <= B.PAY_END_DT)
AND  F.GVT_IRR_LWOP = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Fiscal-Data                                    *
!                                                                      *
!  Description:  Select accumulated financial history                  *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Fiscal-Data

let #cum_ded = 0

print 'FISCAL HISTORY'                  (+2,2)  bold underline

print 'Year'                            (+2,2,0) bold
print 'Cal Yr Ded'                      (0,10,0) bold
print 'Cum Ded'                         (0,25,0) bold

Begin-Select

F1.EMPLID
F1.EMPL_RCD
F1.GVT_YEAR
F1.AMOUNT
F1.EMPL_PCT

      let $field13 = edit(&f1.amount,'99,999,999.99')
      let #cum_ded = #cum_ded + &f1.amount
      let $field14 = edit(#cum_ded,'99,999,999.99')
      let $field12 = to_char(&f1.gvt_year)

      print $field12  (+2,2,0)
      print $field13  (0,10,0)
      print $field14  (0,25,0)


FROM PS_GVT_IRR_FIN_DTA F1

WHERE F1.GVT_IRR_FIN_CD_TP = 'D'
AND   F1.EMPLID = $run_emplid
AND   F1.EMPL_RCD = #run_empl_rcd

End-Select

! Get current year retirement deductions
Begin-Select

B.EMPLID
B.EMPL_RCD
A.GVT_PAY_YEAR  &f2.gvt_pay_year
E.EMPL_PCT      &f2.empl_pct
SUM(C.DED_CUR)  &f2.amt

     let $field13 = edit(&f2.amt,'99,999,999.99')
     let #cum_ded = #cum_ded + &f2.amt
     let $field14 = edit(#cum_ded,'99,999,999.99')
     let $field12 = to_char(&f2.gvt_pay_year)

     print $field12  (+2,2,0)
     print $field13  (0,10,0)
     print $field14  (0,25,0)


FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B,
     PS_PAY_DEDUCTION C,
     PS_DEDUCTION_TBL D,
     PS_RTRMNT_PLAN_TBL E

WHERE
     A.GVT_PAY_YEAR = #cur_yr
AND  B.COMPANY = A.COMPANY
AND  B.PAYGROUP = A.PAYGROUP
AND  B.PAY_END_DT = A.PAY_END_DT
AND  B.EMPLID = $run_emplid
AND  B.EMPL_RCD = #run_empl_rcd
AND  B.PAY_END_DT <= $AsOfToday
AND  C.COMPANY = B.COMPANY
AND  C.PAYGROUP = B.PAYGROUP
AND  C.PAY_END_DT = B.PAY_END_DT
AND  C.PAGE_NUM = B.PAGE_NUM
AND  C.LINE_NUM = B.LINE_NUM
AND  C.SEPCHK = B.SEPCHK
AND  C.PLAN_TYPE = '70'
AND  C.DED_CLASS <= 'K'
AND  D.PLAN_TYPE = C.PLAN_TYPE
AND  D.DEDCD = C.DEDCD
AND  D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM PS_DEDUCTION_TBL D1
                WHERE D1.PLAN_TYPE=D.PLAN_TYPE
                AND   D1.DEDCD = D.DEDCD
                AND   D1.EFFDT <= C.PAY_END_DT)
AND  (D.GVT_REPORTING_CD = 'CS'
OR    D.GVT_REPORTING_CD = 'CO'
OR    D.GVT_REPORTING_CD = 'FE'
OR    D.GVT_REPORTING_CD = 'FH'
OR    D.GVT_REPORTING_CD = 'FO'
OR    D.GVT_REPORTING_CD = 'FR'
OR    D.GVT_REPORTING_CD = 'FS'
OR    D.GVT_REPORTING_CD = 'PR')
AND  C.PLAN_TYPE = E.PLAN_TYPE
AND  C.BENEFIT_PLAN = E.BENEFIT_PLAN
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM PS_RTRMNT_PLAN_TBL E1
                WHERE E1.PLAN_TYPE = C.PLAN_TYPE
                AND   E1.BENEFIT_PLAN = C.BENEFIT_PLAN
                AND   E1.EFFDT <= C.PAY_END_DT)
GROUP BY B.EMPLID, B.EMPL_RCD, A.GVT_PAY_YEAR, E.EMPL_PCT

End-Select

End-Procedure


#include 'fgprtwrp.sqc'  !Report column print wrap routine
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Routines for Platform portable commit


