!********************************************************
!  TRN036:  Budget Training Budget Period Costs Details *
!********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/15:01:36:38                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define TRN_DEMAND
#define TRN_CATALOG_TBL
#define BUDGET_PERIOD
#define BUS_UNIT_TBL_HR
#define COURSE_TBL
#define CURRENCY_CD_TBL
#define DEPT_TBL
#include 'rellang.sqc'

#define C01    1
#define C011  12 
#define C02   22
#define C021  33
#define C022  44
#define C03   57
#define C031  82
#define C04   89
#define C05   98
#define C06   108
#define C07   118
#define C08   128
#define C09   138
#define C10   148
#define C11   158
#define C12   168
#define C13   178

!************************************************************************
! Report Section
!************************************************************************

begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report
!--ADDED FOR FIX 302027 STARTS
  do Find-Date-Format
!--ADDED FOR FIX 302027 ENDS
   do Process-Main
   do Reset
   do Stdapi-Term
end-report

!************************************************************************
! Procedure Init-Report
!************************************************************************

begin-procedure Init-Report

  do Init-DateTime
  do Init-Number

  move $BaseCurr to $ReportCurr
  move $BaseRtType to $ReportRtType
  move 'W' to $ReportMsgType
  
  do Get-Current-DateTime

  move 'TRN036' to $ReportID
! Process Scheduler setup
  do Stdapi-Init
  if $prcs_process_instance = ' '
    !No Prompt
  else
     do Select-Parameters
  end-if
  let $language_cd = $prcs_language_cd
  do Init_Printer
  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)
  do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)
  
  display ' '
  display $ReportTitle
  display ' '
   
  display 'language_cd'
  display $language_cd
  display 'prcs_language_cd'
  display $prcs_language_cd

end-procedure

!--ADDED FOR FIX 302027 STARTS
begin-procedure Find-Date-Format

let $REC_FOUND = 'N'
begin-SELECT
A.USER_OPTION_VALUE
  let $REC_FOUND = 'Y'
FROM PSUSERPRSNLOPTN A

WHERE A.OPRID = $prcs_oprid
  AND A.USEROPTN = 'DFRMT'
end-SELECT

IF $REC_FOUND = 'N'
  let $DT_FMT = 'M'
ELSE
  LET $DT_FMT = &A.USER_OPTION_VALUE
  LET $DT_FMT = RTRIM($DT_FMT,' ')
END-If
 
end-procedure !Find-Date-Format
!--ADDED FOR FIX 302027 ENDS


!************************************************************************
! Section Heading
!************************************************************************

begin-heading 11
!--COMMENTED FOR FIX 302027 STARTS
!#Include 'stdhdg01.sqc'
!--COMMENTED FOR FIX 302027 ENDS

!--ADDED FOR FIX 590517 STARTS
  do Append_Report_Translation ('STDHDGTR')
  if $Program_Read = 'Y'
    do Get_Field_Information ('STDHDGTR', 'STDHDG_CO_NM',   $stdhdg_co_nm,   #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_REP_ID',  $stdhdg_rep_id,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_PAGE_NO', $stdhdg_page_no, #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_RUN_DT',  $stdhdg_run_dt,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_RUN_TM',  $stdhdg_run_tm,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_END_REP', $stdhdg_end_rep, #dummy_width)
  end-if 
!--ADDED FOR FIX 590517 ENDS

!--ADDED FOR FIX 302027 STARTS
  print '            '    (1,1)

!--COMMENTED FOR FIX 590517 STARTS
!  print 'PeopleSoft'      ()          center
!  print 'Report ID:  '    (+1,1)
!--COMMENTED FOR FIX 590517 ENDS

!--ADDED FOR FIX 590517 STARTS
   print $stdhdg_co_nm      ()          center
   print $stdhdg_rep_id     (+1, 1)
   print $ReportID         (, +1)
!--ADDED FOR FIX 590517 ENDS

!---Commented for Fix 590517 Starts
!  print $ReportID         ()
!---Commented for Fix 590517 Ends

  uppercase $ReportTitle
  print $ReportTitle      ()          center
  let #RptCol = {ColR} - 2

!----Commented for fix 590517 Starts  
!  page-number             (0,#RptCol)  'Page No.  '
!  print 'Run Date '       (+1,#RptCol)
!----Commented for fix 590517 Ends

!--ADDED FOR FIX 590517 STARTS
    print $stdhdg_page_no   (0,#RptCol)
    print #page-count       (0,+2)      edit 88888888
    print $stdhdg_run_dt   (+1,#RptCol)
!--ADDED FOR FIX 590517 ENDS

   let $RepDate = StrToDate($ReportDate,{PTRPTDATE})
  
      evaluate $DT_FMT
       when = 'M'
            do Format-DateTime($RepDate,$Rep_dt,{DEFMDY},'','')
            break
       when = 'D'
            do Format-DateTime($RepDate,$Rep_dt,{DEFDMY},'','')
            break
       when-Other
            do Format-DateTime($RepDate,$Rep_dt,{DEFYMD},'','')
            break
       end-evaluate
!--COMMENTED FOR FIX 590517 STARTS       
!  print $Rep_dt           () 
!  print 'Run Time '       (+1,#RptCol)
!  print $ReportTime       ()
!----Commented for fix 590517 Ends

!--ADDED FOR FIX 590517 STARTS
     print $Rep_dt           (, +2) 
     print $stdhdg_run_tm    (+1,#RptCol)
     print $ReportTime       (, +2)
!-----ADDED FOR FIX 590517 ENDS

!--ADDED FOR FIX 302027 ENDS

print $BUDGET_PERIOD_LBL         (+1,{C01})
print $BUDGET_PERIOD             (,{C02})
print $BP_DESCR                          (,{C021})


print $BUSINESS_UNIT_LBL         (+1,{C01})
print $BUSINESS_UNIT             (,{C02})
print $BU_DESCR                          (,{C021})

print $DEPTID_LBL                        (+1,{C01})
print $DEPTID                            (,{C02})
print $T_DEPTID_DESCR            (,{C021})

print $COURSE_LBL                        (+1,{C01})
print $COURSE                            (,{C02})
print $T_COURSE_DESCR            (,{C021},27)

print $CURRENCY_LBL                      (+1,{C01})
print $ReportCurr                        (,{C02})
print $T_CURRENCY_DESCR          (,{C021})

if $DEPTID <> ' '
                print $COST_LBL                         (+1,{C06})
else 
         if $COURSE <> ' '
                print $DURATION_LBL                     (+1,{C05})
                print $COST_LBL                         (,{C06})
         else
                print $COST_LBL                         (+1,{C06})
         end-if
end-if

if $DEPTID <> ' '
   let #placement_num = {C13}-{C06}
   print '=' (+1,{C06},#placement_num) fill
else
   if $COURSE <> ' '
      let #placement_num = {C06}-{C05}-1
          print '=' (+1,{C05},#placement_num) fill
          let #placement_num = {C13}-{C06}
          print '=' (,{C06},#placement_num) fill
   else
          let #placement_num = {C13}-{C06}
          print '=' (+1,{C06},#placement_num) fill
   end-if
end-if

print $DEPTID_LBL2                       (+1,{C01}) 
print $DEMAND_ID_LBL             (,{C011}) 
print $COURSE_LBL2                       (,{C02}) 
print $CATEGORY_CD_LBL           (,{C021}) 
print $SUB_CATEGORY_LBL          (,{C022}) 
print $COURSE_DESCR_LBL          (,{C03},26) 

print $EMPLID_LBL                        (,{C031})

IF $TRN_PLN_CAT_SW='1' 
   print $SCENARIO_LBL              (,{C04})
ELSE
   print $TRN_PLN_CATEGORY_LBL              (,{C04})
END-IF

if $DEPTID = ' ' and $COURSE <> ' '
   let $HOUR_LBL = lpad($HOUR_LBL, {C06}-{C05}, ' ')
   print $HOUR_LBL                       (,{C05}) 
end-if

let $F_COST_LBL = lpad($F_COST_LBL, {C07}-{C06}, ' ')
print $F_COST_LBL                        (,{C06}) 
let $I_COST_LBL = lpad($I_COST_LBL, {C08}-{C07}, ' ')
print $I_COST_LBL                        (,{C07}) 
let $P_COST_LBL = lpad($P_COST_LBL, {C09}-{C08}, ' ')
print $P_COST_LBL                        (,{C08}) 
let $Q_COST_LBL = lpad($Q_COST_LBL, {C10}-{C09}, ' ')
print $Q_COST_LBL                        (,{C09}) 
let $S_COST_LBL = lpad($S_COST_LBL, {C11}-{C10}, ' ')
print $S_COST_LBL                        (,{C10}) 
let $X_COST_LBL = lpad($X_COST_LBL, {C12}-{C11}, ' ')
print $X_COST_LBL                        (,{C11}) 
let $T_COST_LBL = lpad($T_COST_LBL, {C13}-{C12}, ' ')
print $T_COST_LBL                        (,{C12}) 

end-heading

!***********************************************************************
!  Get Values 
!***********************************************************************

begin-procedure Get-Values
  let $BUDGET_PERIOD = RTRIM(&RUN_CNTL_HR.BUDGET_PERIOD, ' ')
  let $BUSINESS_UNIT = RTRIM(&RUN_CNTL_HR.BUSINESS_UNIT, ' ')
  let $DEPTID = RTRIM(&RUN_CNTL_HR.DEPTID, ' ')
  let $COURSE = RTRIM(&RUN_CNTL_HR.COURSE, ' ')
  let $TRN_PLN_CAT_SW = RTRIM(&RUN_CNTL_HR.TRN_PLN_CAT_SW , ' ')
end-procedure

!************************************************************************
! Procedure Main
!************************************************************************

begin-procedure Process-Main

        do Get-Translat-Info     ! Global
        
        do Retrieve-Budget-Period-Descr 
        do Retrieve-Business-Unit-Descr 
        do Get-Base-Currency
        do Retrieve-Currency-Descr

        if $DEPTID <> ' '
           do Retrieve-Department-Descr
           do Print-Distribution-By-Deptid
        else
           if $COURSE <> ' '
                  do Retrieve-Course-Descr      
                  do Print-Distribution-By-Course
           else
                  do Print-Distribution
           end-if
        end-if
        
end-procedure

!***********************************************************************
!  Get Base Currency
!***********************************************************************

begin-procedure Get-Base-Currency
#ifdef debugx
           display 'Entering TRN036.SQR: Get-Base-Currency'
#end-if
begin-SELECT ON-ERROR=SQL-Error
M.BASE_CURRENCY          &M.BASE_CURRENCY
N.CUR_RT_TYPE            &N.CUR_RT_TYPE

        let $ReportCurr = &M.BASE_CURRENCY
        let $ReportRtType = &N.CUR_RT_TYPE

from PS_BUDGET_BUS_UNIT M, PS_TRN_BASE_CUR N
where M.BUDGET_PERIOD = $BUDGET_PERIOD
and M.BUSINESS_UNIT = $BUSINESS_UNIT
and M.BASE_CURRENCY = N.BASE_CURRENCY
end-SELECT
#ifdef debugx
           display 'Exiting TRN036.SQR: Get-Base-Currency'
#end-if
end-procedure Get-Base-Currency

!***********************************************************************
!  Print Individual Demands Costs
!***********************************************************************

begin-procedure Print-Individuals
#ifdef debugx
           display 'Entering TRN036.SQR: Print-Individuals'
#end-if

begin-SELECT ON-ERROR=SQL-Error
O.DEPTID                                                                    &O.DEPTID
M.EMPLID                                                                        &M.EMPLID
M.COURSE                                                                        &M.COURSE
M.DEMAND_ID                                                                     &M.DEMAND_ID
M.TOTAL_DEMAND                                                          &M.TOTAL_DEMAND
M.VARIABLE_COST                                                         &M.VARIABLE_COST
M.CURRENCY_CD                                                           &M.CURRENCY_CD
M.TO_CUR                                                                        &M.TO_CUR
M.BUDGET_PERIOD
M.BUSINESS_UNIT
S.DEMAND_APPROVED                                                       &S.DEMAND_APPROVED   
S.SCENARIO                                                              &S.SCENARIO
M.TRN_PLN_CATEGORY                                                      &M.TRN_PLN_CATEGORY

        let $SCENARIO = &S.SCENARIO
        let $TRN_PLN_CATEGORY=&M.TRN_PLN_CATEGORY

        let $DEPTID_O = &O.DEPTID
        let $EMPLID = &M.EMPLID
        let $COURSE_M = &M.COURSE
        let $DEMAND_ID = &M.DEMAND_ID
        let #TOTAL_DEMAND = &M.TOTAL_DEMAND
        let #DEMAND_APPROVED = &S.DEMAND_APPROVED

        let #VARIABLE_COST = &M.VARIABLE_COST
!!      let $CURRENCY_CD = &M.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &M.TO_CUR
 
        let #S_COST = #VARIABLE_COST * #TOTAL_DEMAND
        
        do Find-Course ($COURSE_M, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 

        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs

        let $Global = 'FALSE'
        do Compute-Total-Costs
        
        let #S_COST_T2 = #S_COST_T2 + #S_COST
        let #F_COST_T2 = #F_COST_T2 + #F_COST
        let #I_COST_T2 = #I_COST_T2 + #I_COST
        let #P_COST_T2 = #P_COST_T2 + #P_COST
        let #Q_COST_T2 = #Q_COST_T2 + #Q_COST
        let #X_COST_T2 = #X_COST_T2 + #X_COST
        let #T_COST_T2 = #T_COST_T2 + #T_COST
        
        print $DEPTID_O                  (+1,{C01})
        print $DEMAND_ID                 (,{C011})
        print $COURSE_M                  (,{C02})
        print $CATEGORY_CD               (,{C021})
        IF $TRN_PLN_CAT_SW='1'
           print $SCENARIO             (,{C04})
        ELSE
           move 'TRN_PLN_CATEGORY'     to $FieldName
           move $TRN_PLN_CATEGORY      to $FieldValue
           do Read-Translate-Table
           let $XlatLongName=substr($XlatLongName,1,17)
           print $XlatLongName          (,{C04})
        END-IF        
        print $SUB_CATEGORY_CD   (,{C022})
        print $COURSE_DESCR              (,{C03}, 24)  
        print $EMPLID                    (,{C031})  
    print #F_COST                        (,{C06})  EDIT 9999999.99
        print #I_COST                    (,{C07})  EDIT 9999999.99
        print #P_COST                    (,{C08})  EDIT 9999999.99
        print #Q_COST                    (,{C09})  EDIT 9999999.99
        print #S_COST                    (,{C10})  EDIT 9999999.99
        print #X_COST                    (,{C11})  EDIT 9999999.99
        print #T_COST                    (,{C12})  EDIT 9999999.99
        
from PS_TRN_DEMAND_EE M,  PS_JOB_CURR_VW O, PS_TRN_SIMULATION S, PS_TRN_SCENARIO C
where M.BUDGET_PERIOD = $BUDGET_PERIOD
and M.BUSINESS_UNIT = $BUSINESS_UNIT
and M.EMPLID = O.EMPLID
and M.EMPL_RCD = O.EMPL_RCD
and M.BUSINESS_UNIT=O.BUSINESS_UNIT
and M.BUSINESS_UNIT=S.BUSINESS_UNIT
and M.BUDGET_PERIOD=S.BUDGET_PERIOD
and M.DEMAND_ID=S.DEMAND_ID
and S.BUSINESS_UNIT=C.BUSINESS_UNIT
and S.BUDGET_PERIOD=C.BUDGET_PERIOD
and S.SCENARIO=C.SCENARIO
and S.DEPTID=C.DEPTID
and S.DEPTID = O.DEPTID
and C.SCENARIO_STATUS='A'
order by M.BUDGET_PERIOD, M.BUSINESS_UNIT, O.DEPTID, M.EMPLID, M.COURSE, M.DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Individuals'
#end-if
end-procedure Print-Individuals

!***********************************************************************
!  Print Individual Demands Costs By Course
!***********************************************************************

begin-procedure Print-Individuals-By-Course
#ifdef debugx
           display 'Entering TRN036.SQR: Print-Individuals-By-Course'
#end-if

begin-SELECT ON-ERROR=SQL-Error
OO.DEPTID                                                                   &OO.DEPTID
MM.EMPLID                                                                       &MM.EMPLID
MM.COURSE                                                                       &MM.COURSE
MM.DEMAND_ID                                                            &MM.DEMAND_ID
MM.TOTAL_DEMAND                                                         &MM.TOTAL_DEMAND
MM.VARIABLE_COST                                                        &MM.VARIABLE_COST
MM.CURRENCY_CD                                                          &MM.CURRENCY_CD
MM.TO_CUR                                                                       &MM.TO_CUR
MM.BUDGET_PERIOD
MM.BUSINESS_UNIT
SS.DEMAND_APPROVED                                                       &SS.DEMAND_APPROVED
SS.SCENARIO                                                              &SS.SCENARIO
MM.TRN_PLN_CATEGORY                                                      &MM.TRN_PLN_CATEGORY

        let $SCENARIO = &SS.SCENARIO
        let $TRN_PLN_CATEGORY=&MM.TRN_PLN_CATEGORY

        let $DEPTID_O = &OO.DEPTID
        let $EMPLID = &MM.EMPLID
        let $COURSE_M = &MM.COURSE
        let $DEMAND_ID = &MM.DEMAND_ID
        let #TOTAL_DEMAND = &MM.TOTAL_DEMAND
        let #DEMAND_APPROVED = &SS.DEMAND_APPROVED

        let #VARIABLE_COST = &MM.VARIABLE_COST
        
!!      let $CURRENCY_CD = &MM.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &MM.TO_CUR
        
        let #S_COST = #VARIABLE_COST * #TOTAL_DEMAND
        
        do Find-Course ($COURSE_M, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 

        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs

        let $Global = 'FALSE'
        do Compute-Total-Costs
        
        let #S_COST_T2 = #S_COST_T2 + #S_COST
        let #F_COST_T2 = #F_COST_T2 + #F_COST
        let #I_COST_T2 = #I_COST_T2 + #I_COST
        let #P_COST_T2 = #P_COST_T2 + #P_COST
        let #Q_COST_T2 = #Q_COST_T2 + #Q_COST
        let #X_COST_T2 = #X_COST_T2 + #X_COST
        let #T_COST_T2 = #T_COST_T2 + #T_COST
        
        print $DEPTID_O                  (+1,{C01})
        print $DEMAND_ID                 (,{C011})
        print $COURSE_M                  (,{C02})
        IF $TRN_PLN_CAT_SW='1'
           print $SCENARIO             (,{C04})
        ELSE
           move 'TRN_PLN_CATEGORY'     to $FieldName
           move $TRN_PLN_CATEGORY      to $FieldValue
           do Read-Translate-Table
           let $XlatLongName=substr($XlatLongName,1,17)
           print $XlatLongName          (,{C04})
        END-IF        
        print $CATEGORY_CD               (,{C021})
        print $SUB_CATEGORY_CD   (,{C022})
        print $COURSE_DESCR              (,{C03},24)  
        print $EMPLID                    (,{C031})  
        print #F_COST                        (,{C06})  EDIT 9999999.99
        print #I_COST                    (,{C07})  EDIT 9999999.99
        print #P_COST                    (,{C08})  EDIT 9999999.99
        print #Q_COST                    (,{C09})  EDIT 9999999.99
        print #S_COST                    (,{C10})  EDIT 9999999.99
        print #X_COST                    (,{C11})  EDIT 9999999.99
        print #T_COST                    (,{C12})  EDIT 9999999.99
        
from PS_TRN_DEMAND_EE MM,  PS_JOB_CURR_VW OO,PS_TRN_SIMULATION  SS, PS_TRN_SCENARIO CC
where MM.BUDGET_PERIOD = $BUDGET_PERIOD
and MM.BUSINESS_UNIT = $BUSINESS_UNIT
and MM.COURSE = $COURSE
and MM.EMPLID = OO.EMPLID
and MM.EMPL_RCD = OO.EMPL_RCD
and MM.BUSINESS_UNIT=OO.BUSINESS_UNIT
and MM.BUSINESS_UNIT=SS.BUSINESS_UNIT
and MM.BUDGET_PERIOD=SS.BUDGET_PERIOD
and MM.DEMAND_ID=SS.DEMAND_ID
and SS.BUSINESS_UNIT=CC.BUSINESS_UNIT
and SS.BUDGET_PERIOD=CC.BUDGET_PERIOD
and SS.SCENARIO=CC.SCENARIO
and SS.DEPTID=CC.DEPTID
and SS.DEPTID = OO.DEPTID
and CC.SCENARIO_STATUS='A'
order by MM.BUDGET_PERIOD, MM.BUSINESS_UNIT, OO.DEPTID, MM.EMPLID, MM.COURSE, MM.DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Individuals-By-Course'
#end-if
end-procedure Print-Individuals-By-Course

!***********************************************************************
!  Print Individual Demands Costs By Department
!***********************************************************************

begin-procedure Print-Individuals-By-Deptid
#ifdef debugx
           display 'Entering TRN036.SQR: Print-Individuals-By-Deptid'
#end-if

begin-SELECT ON-ERROR=SQL-Error
OOO.DEPTID                                                                  &OOO.DEPTID
MMM.EMPLID                                                                      &MMM.EMPLID
MMM.COURSE                                                                      &MMM.COURSE
MMM.DEMAND_ID                                                           &MMM.DEMAND_ID
MMM.TOTAL_DEMAND                                                        &MMM.TOTAL_DEMAND
MMM.VARIABLE_COST                                                       &MMM.VARIABLE_COST
MMM.CURRENCY_CD                                                         &MMM.CURRENCY_CD
MMM.TO_CUR                                                                      &MMM.TO_CUR
MMM.BUDGET_PERIOD
MMM.BUSINESS_UNIT
SSS.DEMAND_APPROVED                                                      &SSS.DEMAND_APPROVED
SSS.SCENARIO                                                             &SSS.SCENARIO
MMM.TRN_PLN_CATEGORY                                                     &MMM.TRN_PLN_CATEGORY

        let $SCENARIO = &SSS.SCENARIO
        let $TRN_PLN_CATEGORY=&MMM.TRN_PLN_CATEGORY

        let $DEPTID_O = &OOO.DEPTID
        let $EMPLID = &MMM.EMPLID
        let $COURSE_M = &MMM.COURSE
        let $DEMAND_ID = &MMM.DEMAND_ID
        let #TOTAL_DEMAND = &MMM.TOTAL_DEMAND
        let #DEMAND_APPROVED = &SSS.DEMAND_APPROVED

        let #VARIABLE_COST = &MMM.VARIABLE_COST
        
!!      let $CURRENCY_CD = &MMM.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &MMM.TO_CUR
        
        let #S_COST = #VARIABLE_COST * #TOTAL_DEMAND
        
        do Find-Course ($COURSE_M, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 

        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs

        let $Global = 'FALSE'
        do Compute-Total-Costs
        
        let #S_COST_T2 = #S_COST_T2 + #S_COST
        let #F_COST_T2 = #F_COST_T2 + #F_COST
        let #I_COST_T2 = #I_COST_T2 + #I_COST
        let #P_COST_T2 = #P_COST_T2 + #P_COST
        let #Q_COST_T2 = #Q_COST_T2 + #Q_COST
        let #X_COST_T2 = #X_COST_T2 + #X_COST
        let #T_COST_T2 = #T_COST_T2 + #T_COST
        
        print $DEPTID_O                  (+1,{C01})
        print $DEMAND_ID                 (,{C011})
        print $COURSE_M                  (,{C02})
        IF $TRN_PLN_CAT_SW='1'
           print $SCENARIO             (,{C04})
        ELSE
           move 'TRN_PLN_CATEGORY'     to $FieldName
           move $TRN_PLN_CATEGORY      to $FieldValue
           do Read-Translate-Table
           let $XlatLongName=substr($XlatLongName,1,17)
           print $XlatLongName          (,{C04})
        END-IF        
        print $CATEGORY_CD               (,{C021})
        print $SUB_CATEGORY_CD   (,{C022})
        print $COURSE_DESCR              (,{C03},24)  
        print $EMPLID                    (,{C031})  
        print #F_COST                        (,{C06})  EDIT 9999999.99
        print #I_COST                    (,{C07})  EDIT 9999999.99
        print #P_COST                    (,{C08})  EDIT 9999999.99
        print #Q_COST                    (,{C09})  EDIT 9999999.99
        print #S_COST                    (,{C10})  EDIT 9999999.99
        print #X_COST                    (,{C11})  EDIT 9999999.99
        print #T_COST                    (,{C12})  EDIT 9999999.99
        
from PS_TRN_DEMAND_EE MMM,  PS_JOB_CURR_VW OOO, PS_TRN_SIMULATION SSS, PS_TRN_SCENARIO CCC
where MMM.BUDGET_PERIOD = $BUDGET_PERIOD
and MMM.BUSINESS_UNIT = $BUSINESS_UNIT
and OOO.DEPTID = $DEPTID
and MMM.EMPLID = OOO.EMPLID
and MMM.EMPL_RCD = OOO.EMPL_RCD
and MMM.BUSINESS_UNIT=OOO.BUSINESS_UNIT
and MMM.BUSINESS_UNIT=SSS.BUSINESS_UNIT
and MMM.BUDGET_PERIOD=SSS.BUDGET_PERIOD
and MMM.DEMAND_ID=SSS.DEMAND_ID
and SSS.BUSINESS_UNIT=CCC.BUSINESS_UNIT
and SSS.BUDGET_PERIOD=CCC.BUDGET_PERIOD
and SSS.SCENARIO=CCC.SCENARIO
and SSS.DEPTID=CCC.DEPTID
and SSS.DEPTID = OOO.DEPTID
and CCC.SCENARIO_STATUS='A'
order by MMM.BUDGET_PERIOD, MMM.BUSINESS_UNIT, OOO.DEPTID, MMM.EMPLID, MMM.COURSE, MMM.DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Individuals-By-Deptid'
#end-if
end-procedure Print-Individuals-By-Deptid

!***********************************************************************
!  Print Distribution Total Costs
!***********************************************************************

begin-procedure Print-Total
#ifdef debugx
           display 'Entering TRN036.SQR: Print-Total'
#end-if

        let #placement_num = {C13}-{C01}
        print '-' (+1,{C01},#placement_num) fill
        print $INDIV_TOT_LBL             (+1,{C01})
    print #F_COST_T2                     (,{C06})  EDIT 9999999.99
        print #I_COST_T2                         (,{C07})  EDIT 9999999.99
        print #P_COST_T2                         (,{C08})  EDIT 9999999.99
        print #Q_COST_T2                         (,{C09})  EDIT 9999999.99
        print #S_COST_T2                         (,{C10})  EDIT 9999999.99
        print #X_COST_T2                         (,{C11})  EDIT 9999999.99
        print #T_COST_T2                         (,{C12})  EDIT 9999999.99
   
        let #F_COST_TT = #F_COST_T2 + #F_COST_T
        let #I_COST_TT = #I_COST_T2 + #I_COST_T
        let #P_COST_TT = #P_COST_T2 + #P_COST_T
        let #Q_COST_TT = #Q_COST_T2 + #Q_COST_T
        let #S_COST_TT = #S_COST_T2 + #S_COST_T
        let #X_COST_TT = #X_COST_T2 + #X_COST_T
        let #T_COST_TT = #T_COST_T2 + #T_COST_T

        let #placement_num = {C13}-{C01}
        print '=' (+2,{C01},#placement_num) fill
        print $TOTAL_LBL                         (+1,{C01})
    print #F_COST_TT                     (,{C06})  EDIT 9999999.99
        print #I_COST_TT                         (,{C07})  EDIT 9999999.99
        print #P_COST_TT                         (,{C08})  EDIT 9999999.99
        print #Q_COST_TT                         (,{C09})  EDIT 9999999.99
        print #S_COST_TT                         (,{C10})  EDIT 9999999.99
        print #X_COST_TT                         (,{C11})  EDIT 9999999.99
        print #T_COST_TT                         (,{C12})  EDIT 9999999.99
        
#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Total'
#end-if
end-procedure Print-Total

!***********************************************************************
!  Print Distribution
!***********************************************************************

begin-procedure Print-Distribution

#ifdef debugx
           display 'Entering TRN036.SQR: Print-Distribution'
#end-if

        IF $TRN_PLN_CAT_SW='1' 
          let $Orderby=' A.BUDGET_PERIOD, A.BUSINESS_UNIT, B.SCENARIO, B.DEPTID, A.DEMAND_ID'
        else
          let $Orderby=' A.TRN_PLN_CATEGORY, A.COURSE'
        end-if
        
begin-SELECT ON-ERROR=SQL-Error
A.VARIABLE_COST                                                                                         &A.VARIABLE_COST
A.CURRENCY_CD                                                                                           &A.CURRENCY_CD
A.TO_CUR                                                                                                        &A.TO_CUR
A.COURSE                                                                                                        &A.COURSE
A.DESCR                                                                                                         &A.DESCR
B.SCENARIO                                                                                                      &B.SCENARIO
B.DEPTID                                                                                                        &B.DEPTID
B.DEMAND_APPROVED                                                                                       &B.DEMAND_APPROVED
A.DEMAND_ID                                                                                             &A.DEMAND_ID
A.BUDGET_PERIOD                                                                                         &A.BUDGET_PERIOD
A.BUSINESS_UNIT                                                                                         &A.BUSINESS_UNIT
A.TRN_PLN_CATEGORY                                                                                      &A.TRN_PLN_CATEGORY

        let $SCENARIO = &B.SCENARIO
        let $TRN_PLN_CATEGORY=&A.TRN_PLN_CATEGORY
        let $COURSE_A = &A.COURSE
        let $DEPTID_B = &B.DEPTID
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_A = $COURSE_OLD and $DEPTID_B = $DEPTID_OLD)
        or ($SCENARIO_OLD = ' ' and $COURSE_OLD = ' ' and $DEPTID_OLD = ' ')
        else
           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR           (,{C03},24)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD      to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
        end-if
        
        let $TRN_DEMAND-DESCR = &A.DESCR
        do Get_Related_TRN_DEMAND(&A.BUDGET_PERIOD,&A.BUSINESS_UNIT,&A.DEMAND_ID)
        let $COURSE_DESCR = $TRN_DEMAND-DESCR
        let #VARIABLE_COST = &A.VARIABLE_COST
        
!!      let $CURRENCY_CD = &A.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &A.TO_CUR
        
        let #DEMAND_APPROVED = &B.DEMAND_APPROVED
        let $DEMAND_ID = &A.DEMAND_ID
        
        let #S_COST = #VARIABLE_COST * #DEMAND_APPROVED

        do Find-Course ($COURSE_A, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 

        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs
        
        let $Global = 'TRUE'
        do Compute-Total-Costs
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_A = $COURSE_OLD and $DEPTID_B = $DEPTID_OLD)
           let #DEMAND_APPROVED = #DEMAND_APPROVED + #DEMAND_APPROVED_OLD
           let #F_COST = #F_COST + #F_COST_OLD
           let #I_COST = #I_COST + #I_COST_OLD
           let #P_COST = #P_COST + #P_COST_OLD
           let #Q_COST = #Q_COST + #Q_COST_OLD
           let #S_COST = #S_COST + #S_COST_OLD
           let #X_COST = #X_COST + #X_COST_OLD
           let #T_COST = #T_COST + #T_COST_OLD
        end-if
        
        let $SCENARIO_OLD = $SCENARIO
        let $TRN_PLN_CATEGORY_OLD = $TRN_PLN_CATEGORY
        let $COURSE_OLD = $COURSE_A
        let $DEPTID_OLD = $DEPTID_B
        let $COURSE_DESCR_OLD = $COURSE_DESCR
        let #DEMAND_APPROVED_OLD = #DEMAND_APPROVED
        let #F_COST_OLD = #F_COST
        let #I_COST_OLD = #I_COST
        let #P_COST_OLD = #P_COST
        let #Q_COST_OLD = #Q_COST
        let #S_COST_OLD = #S_COST
        let #X_COST_OLD = #X_COST
        let #T_COST_OLD = #T_COST
        
        let #F_COST_T = #F_COST_T + #F_COST
        let #I_COST_T = #I_COST_T + #I_COST
        let #P_COST_T = #P_COST_T + #P_COST
        let #Q_COST_T = #Q_COST_T + #Q_COST
        let #S_COST_T = #S_COST_T + #S_COST
        let #X_COST_T = #X_COST_T + #X_COST
        let #T_COST_T = #T_COST_T + #T_COST

#ifdef debugx
        display #F_COST
        display #I_COST
        display #P_COST
        display #Q_COST
        display #S_COST
        display #X_COST
        display #T_COST
        display ' '
#end-if
        
from PS_TRN_DEMAND A, PS_TRN_SIMULATION B, PS_TRN_SCENARIO C
where A.BUDGET_PERIOD = $BUDGET_PERIOD
and A.BUSINESS_UNIT = $BUSINESS_UNIT
and A.EE_DEMAND_SW = 'N'
and A.BUDGET_PERIOD = B.BUDGET_PERIOD
and A.BUSINESS_UNIT = B.BUSINESS_UNIT
and A.DEMAND_ID = B.DEMAND_ID
and B.BUDGET_PERIOD = C.BUDGET_PERIOD
and B.BUSINESS_UNIT = C.BUSINESS_UNIT
and B.DEPTID = C.DEPTID
and B.SCENARIO = C.SCENARIO
and C.SCENARIO_STATUS = 'A'
order by [$Orderby]
end-SELECT

           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR_OLD       (,{C03},26)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD      to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
           
           let #placement_num = {C13}-{C01}
           print '-' (+1,{C01},#placement_num) fill
           print $GENERAL_TOT_LBL                          (+1,{C01})

           print #F_COST_T                       (,{C06})               EDIT 9999999.99
           print #I_COST_T                       (,{C07})               EDIT 9999999.99
           print #P_COST_T                       (,{C08})               EDIT 9999999.99
           print #Q_COST_T                       (,{C09})               EDIT 9999999.99
           print #S_COST_T                       (,{C10})               EDIT 9999999.99
           print #X_COST_T                       (,{C11})               EDIT 9999999.99
           print #T_COST_T                       (,{C12})               EDIT 9999999.99
           
           print ''                                      (+1,{C01})
           do Print-Individuals
           do Print-Total
             
#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Distribution'
#end-if
end-procedure

!***********************************************************************
!  Print Distribution By Department
!***********************************************************************

begin-procedure Print-Distribution-By-Deptid

#ifdef debugx
           display 'Entering TRN036.SQR: Print-Distribution-By-Deptid'
#end-if

        IF $TRN_PLN_CAT_SW='1' 
          let $Orderby=' D.BUDGET_PERIOD, D.BUSINESS_UNIT, E.SCENARIO, E.DEPTID, D.DEMAND_ID'
        else
          let $Orderby=' D.TRN_PLN_CATEGORY, D.COURSE'
        end-if

begin-SELECT ON-ERROR=SQL-Error
D.VARIABLE_COST                                                                                         &D.VARIABLE_COST
D.CURRENCY_CD                                                                                           &D.CURRENCY_CD
D.TO_CUR                                                                                                        &D.TO_CUR
D.COURSE                                                                                                        &D.COURSE
D.DESCR                                                                                                         &D.DESCR
E.SCENARIO                                                                                                      &E.SCENARIO
E.DEPTID                                                                                                        &E.DEPTID
E.DEMAND_APPROVED                                                                                       &E.DEMAND_APPROVED
D.DEMAND_ID                                                                                             &D.DEMAND_ID
D.BUDGET_PERIOD                                                                                         &D.BUDGET_PERIOD
D.BUSINESS_UNIT                                                                                         &D.BUSINESS_UNIT
D.TRN_PLN_CATEGORY                                                                                      &D.TRN_PLN_CATEGORY

        let $SCENARIO = &E.SCENARIO
        let $TRN_PLN_CATEGORY= &D.TRN_PLN_CATEGORY
        let $COURSE_D = &D.COURSE
        let $DEPTID_E = &E.DEPTID
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_D = $COURSE_OLD and $DEPTID_E = $DEPTID_OLD)
        or ($SCENARIO_OLD = ' ' and $COURSE_OLD = ' ' and $DEPTID_OLD = ' ')
        else
           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR           (,{C03},24)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD      to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF           
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
        end-if
        
        let $TRN_DEMAND-DESCR = &D.DESCR
        do Get_Related_TRN_DEMAND(&D.BUDGET_PERIOD,&D.BUSINESS_UNIT,&D.DEMAND_ID)
        let $COURSE_DESCR = $TRN_DEMAND-DESCR
        let #VARIABLE_COST = &D.VARIABLE_COST
        
!!      let $CURRENCY_CD = &D.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &D.TO_CUR

        let #DEMAND_APPROVED = &E.DEMAND_APPROVED
        let $DEMAND_ID = &D.DEMAND_ID
        
        let #S_COST = #VARIABLE_COST * #DEMAND_APPROVED
        
        do Find-Course ($COURSE_D, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 
        
        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs
        
        let $Global = 'TRUE'
        do Compute-Total-Costs
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_D = $COURSE_OLD and $DEPTID_E = $DEPTID_OLD)
           let #DEMAND_APPROVED = #DEMAND_APPROVED + #DEMAND_APPROVED_OLD
           let #F_COST = #F_COST + #F_COST_OLD
           let #I_COST = #I_COST + #I_COST_OLD
           let #P_COST = #P_COST + #P_COST_OLD
           let #Q_COST = #Q_COST + #Q_COST_OLD
           let #S_COST = #S_COST + #S_COST_OLD
           let #X_COST = #X_COST + #X_COST_OLD
           let #T_COST = #T_COST + #T_COST_OLD
        end-if
        
        let $SCENARIO_OLD = $SCENARIO
        let $TRN_PLN_CATEGORY_OLD = $TRN_PLN_CATEGORY
        let $COURSE_OLD = $COURSE_D
        let $DEPTID_OLD = $DEPTID_E
        let $COURSE_DESCR_OLD = $COURSE_DESCR
        let #DEMAND_APPROVED_OLD = #DEMAND_APPROVED
        let #F_COST_OLD = #F_COST
        let #I_COST_OLD = #I_COST
        let #P_COST_OLD = #P_COST
        let #Q_COST_OLD = #Q_COST
        let #S_COST_OLD = #S_COST
        let #X_COST_OLD = #X_COST
        let #T_COST_OLD = #T_COST
        
        let #F_COST_T = #F_COST_T + #F_COST
        let #I_COST_T = #I_COST_T + #I_COST
        let #P_COST_T = #P_COST_T + #P_COST
        let #Q_COST_T = #Q_COST_T + #Q_COST
        let #S_COST_T = #S_COST_T + #S_COST
        let #X_COST_T = #X_COST_T + #X_COST
        let #T_COST_T = #T_COST_T + #T_COST

#ifdef debugx
        display #F_COST
        display #I_COST
        display #P_COST
        display #Q_COST
        display #S_COST
        display #X_COST
        display #T_COST
        display ' '
#end-if
        
from PS_TRN_DEMAND D, PS_TRN_SIMULATION E, PS_TRN_SCENARIO F
where D.BUDGET_PERIOD = $BUDGET_PERIOD
and D.BUSINESS_UNIT = $BUSINESS_UNIT
and D.EE_DEMAND_SW = 'N'
and D.BUDGET_PERIOD = E.BUDGET_PERIOD
and D.BUSINESS_UNIT = E.BUSINESS_UNIT
and D.DEMAND_ID = E.DEMAND_ID
and E.BUDGET_PERIOD = F.BUDGET_PERIOD
and E.BUSINESS_UNIT = F.BUSINESS_UNIT
and E.DEPTID = F.DEPTID
and E.DEPTID = $DEPTID
and E.SCENARIO = F.SCENARIO
and F.SCENARIO_STATUS = 'A'
order by [$Orderby]
end-SELECT

           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR_OLD       (,{C03},26)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD       to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
           
           let #placement_num = {C13}-{C01}
           print '-' (+1,{C01},#placement_num) fill
           print $GENERAL_TOT_LBL                          (+1,{C01})
           
           print #F_COST_T                       (,{C06})               EDIT 9999999.99
           print #I_COST_T                       (,{C07})               EDIT 9999999.99
           print #P_COST_T                       (,{C08})               EDIT 9999999.99
           print #Q_COST_T                       (,{C09})               EDIT 9999999.99
           print #S_COST_T                       (,{C10})               EDIT 9999999.99
           print #X_COST_T                       (,{C11})               EDIT 9999999.99
           print #T_COST_T                       (,{C12})               EDIT 9999999.99
           
           print ''                                      (+1,{C01})
           do Print-Individuals-By-Deptid
           do Print-Total
           
#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Distribution-By-Deptid'
#end-if
end-procedure

!***********************************************************************
!  Print Distribution By Course
!***********************************************************************

begin-procedure Print-Distribution-By-Course
#ifdef debugx
           display 'Entering TRN036.SQR: Print-Distribution-By-Course'
#end-if

        IF $TRN_PLN_CAT_SW='1' 
           let $Orderby=' G.BUDGET_PERIOD, G.BUSINESS_UNIT, H.SCENARIO, H.DEPTID, G.DEMAND_ID'
        else
           let $Orderby=' G.TRN_PLN_CATEGORY, G.COURSE'
        end-if

begin-SELECT ON-ERROR=SQL-Error
G.VARIABLE_COST                                                                                         &G.VARIABLE_COST
G.CURRENCY_CD                                                                                           &G.CURRENCY_CD
G.TO_CUR                                                                                                        &G.TO_CUR
G.COURSE                                                                                                        &G.COURSE
G.DESCR                                                                                                         &G.DESCR
H.SCENARIO                                                                                                      &H.SCENARIO
H.DEPTID                                                                                                        &H.DEPTID
H.DEMAND_APPROVED                                                                                       &H.DEMAND_APPROVED
G.DEMAND_ID                                                                                                     &G.DEMAND_ID
J.DURATION_CONVERTED                                                                            &J.DURATION_CONVERTED
G.BUDGET_PERIOD                                                                                 &G.BUDGET_PERIOD
G.BUSINESS_UNIT                                                                                 &G.BUSINESS_UNIT
G.TRN_PLN_CATEGORY                                                                              &G.TRN_PLN_CATEGORY

        let $SCENARIO = &H.SCENARIO
        let $TRN_PLN_CATEGORY=&G.TRN_PLN_CATEGORY
        let $COURSE_G = &G.COURSE
        let $DEPTID_H = &H.DEPTID
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_G = $COURSE_OLD and $DEPTID_H = $DEPTID_OLD)
        or ($SCENARIO_OLD = ' ' and $COURSE_OLD = ' ' and $DEPTID_OLD = ' ')
        else
           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR           (,{C03},24)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD      to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF
           print #CRSE_DURATION          (,{C05})  EDIT 9999999.9
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
        end-if
        
        let $TRN_DEMAND-DESCR = &G.DESCR
        do Get_Related_TRN_DEMAND(&G.BUDGET_PERIOD,&G.BUSINESS_UNIT,&G.DEMAND_ID)
        let $COURSE_DESCR = $TRN_DEMAND-DESCR
        let #VARIABLE_COST = &G.VARIABLE_COST
        
!!      let $CURRENCY_CD = &G.CURRENCY_CD
!! The amount #VARIABLE_COST is in TO_CUR currency !!
        let $CURRENCY_CD = &G.TO_CUR
        
        let #DEMAND_APPROVED = &H.DEMAND_APPROVED
        let $DEMAND_ID = &G.DEMAND_ID
        let #DURATION_CONVERTED = &J.DURATION_CONVERTED
        
        let #S_COST = #VARIABLE_COST * #DEMAND_APPROVED
        
        do Find-Course ($COURSE_G, $CATEGORY_CD, $SUB_CATEGORY_CD, $REAL_COURSE, $COURSE_DESCR) 
        
        if $CURRENCY_CD <> $ReportCurr
           do ConvertCurrency(#S_COST, $CURRENCY_CD, $ReportCurr, $ReportRtType, $SysDate, #S_COST, $ReportMsgType)
        end-if

    let #F_COST = 0     
    let #I_COST = 0     
    let #P_COST = 0     
    let #Q_COST = 0     
    let #X_COST = 0     
    let #T_COST = 0     
        
        do Compute-Costs
        
        let $Global = 'TRUE'
        do Compute-Total-Costs
        
!do Compute-Course-Duration
        let #CRSE_DURATION = #DURATION_CONVERTED * #DEMAND_APPROVED
        
        if ($SCENARIO = $SCENARIO_OLD and $COURSE_G = $COURSE_OLD and $DEPTID_H = $DEPTID_OLD)
           let #DEMAND_APPROVED = #DEMAND_APPROVED + #DEMAND_APPROVED_OLD
           let #F_COST = #F_COST + #F_COST_OLD
           let #I_COST = #I_COST + #I_COST_OLD
           let #P_COST = #P_COST + #P_COST_OLD
           let #Q_COST = #Q_COST + #Q_COST_OLD
           let #S_COST = #S_COST + #S_COST_OLD
           let #X_COST = #X_COST + #X_COST_OLD
           let #T_COST = #T_COST + #T_COST_OLD
           let #CRSE_DURATION = #CRSE_DURATION + #CRSE_DURATION_OLD
        end-if
        
        let $SCENARIO_OLD = $SCENARIO
        let $TRN_PLN_CATEGORY_OLD = $TRN_PLN_CATEGORY
        let $COURSE_OLD = $COURSE_G
        let $DEPTID_OLD = $DEPTID_H
        let $COURSE_DESCR_OLD = $COURSE_DESCR
        let #DEMAND_APPROVED_OLD = #DEMAND_APPROVED
        let #F_COST_OLD = #F_COST
        let #I_COST_OLD = #I_COST
        let #P_COST_OLD = #P_COST
        let #Q_COST_OLD = #Q_COST
        let #S_COST_OLD = #S_COST
        let #X_COST_OLD = #X_COST
        let #T_COST_OLD = #T_COST
        let #CRSE_DURATION_OLD = #CRSE_DURATION
        
        let #F_COST_T = #F_COST_T + #F_COST
        let #I_COST_T = #I_COST_T + #I_COST
        let #P_COST_T = #P_COST_T + #P_COST
        let #Q_COST_T = #Q_COST_T + #Q_COST
        let #S_COST_T = #S_COST_T + #S_COST
        let #X_COST_T = #X_COST_T + #X_COST
        let #T_COST_T = #T_COST_T + #T_COST
        let #CRSE_DURATION_T = #CRSE_DURATION_T + #CRSE_DURATION

#ifdef debugx
        display #F_COST
        display #I_COST
        display #P_COST
        display #Q_COST
        display #S_COST
        display #X_COST
        display #T_COST
        display #CRSE_DURATION
        display ' '
#end-if
        
from PS_TRN_DEMAND G, PS_TRN_SIMULATION H, PS_TRN_SCENARIO I, PS_TRN_LST_CRSE_VW J
where G.BUDGET_PERIOD = $BUDGET_PERIOD
and G.BUSINESS_UNIT = $BUSINESS_UNIT
and G.COURSE = $COURSE
and G.EE_DEMAND_SW = 'N'
and G.BUDGET_PERIOD = H.BUDGET_PERIOD
and G.BUSINESS_UNIT = H.BUSINESS_UNIT
and G.DEMAND_ID = H.DEMAND_ID
and H.BUDGET_PERIOD = I.BUDGET_PERIOD
and H.BUSINESS_UNIT = I.BUSINESS_UNIT
and I.BUDGET_PERIOD = J.BUDGET_PERIOD
and I.BUSINESS_UNIT = J.BUSINESS_UNIT
and J.COURSE = G.COURSE
and H.DEPTID = I.DEPTID
and H.SCENARIO = I.SCENARIO
and I.SCENARIO_STATUS = 'A'
order by [$Orderby]
end-SELECT

           print $DEPTID_OLD             (+1,{C01})
           print $DEMAND_ID                      (,{C011})
           print $COURSE_OLD             (,{C02})
           print $CATEGORY_CD            (,{C021})
           print $SUB_CATEGORY_CD        (,{C022})
           print $COURSE_DESCR_OLD       (,{C03},26)
           IF $TRN_PLN_CAT_SW='1'
             print $SCENARIO_OLD            (,{C04})
           ELSE
             move 'TRN_PLN_CATEGORY'     to $FieldName
             move $TRN_PLN_CATEGORY_OLD      to $FieldValue          
             do Read-Translate-Table
             let $XlatLongName=substr($XlatLongName,1,17)
             print $XlatLongName           (,{C04})
           END-IF
           print #CRSE_DURATION          (,{C05})  EDIT 9999999.9
           print #F_COST                         (,{C06})  EDIT 9999999.99
           print #I_COST                         (,{C07})  EDIT 9999999.99
           print #P_COST                         (,{C08})  EDIT 9999999.99
           print #Q_COST                         (,{C09})  EDIT 9999999.99
           print #S_COST                         (,{C10})  EDIT 9999999.99
           print #X_COST                         (,{C11})  EDIT 9999999.99
           print #T_COST                         (,{C12})  EDIT 9999999.99
           
           let #placement_num = {C13}-{C01}
           print '-' (+1,{C01},#placement_num) fill
           print $GENERAL_TOT_LBL                          (+1,{C01})
           
           print #CRSE_DURATION_T        (,{C05})               EDIT 9999999.9
           print #F_COST_T                       (,{C06})               EDIT 9999999.99
           print #I_COST_T                       (,{C07})               EDIT 9999999.99
           print #P_COST_T                       (,{C08})               EDIT 9999999.99
           print #Q_COST_T                       (,{C09})               EDIT 9999999.99
           print #S_COST_T                       (,{C10})               EDIT 9999999.99
           print #X_COST_T                       (,{C11})               EDIT 9999999.99
           print #T_COST_T                       (,{C12})               EDIT 9999999.99
           
           print ''                                      (+1,{C01})
           do Print-Individuals-By-Course
           do Print-Total
           
#ifdef debugx
           display 'Exiting TRN036.SQR: Print-Distribution-By-Course'
#end-if
end-procedure

!***********************************************************************
!  Compute Costs 
!***********************************************************************

begin-procedure Compute-Costs

#ifdef debugx
           display 'Entering TRN036.SQR: Compute-Costs'
#end-if

begin-SELECT ON-ERROR=SQL-Error
A.COST_SOURCE                     &A.COST_SOURCE
A.CURRENCY_CD                     &CURRENCY_CODE
A.VARIABLE_COST                   &VARIABLE_COST
A.FIXED_COST                      &A.FIXED_COST

        let $COST_SOURCE = &A.COST_SOURCE
        let $CURRENCY_CODE = &CURRENCY_CODE
        let #VARIABLE_COST = &VARIABLE_COST
        let #FIXED_COST = &A.FIXED_COST

        let #COMPUTED_COST = (#VARIABLE_COST * #DEMAND_APPROVED) + #FIXED_COST

        if ($CURRENCY_CODE <> $ReportCurr and RTRIM($CURRENCY_CODE, ' ') <> ' ')
           do ConvertCurrency(#COMPUTED_COST, $CURRENCY_CODE, $ReportCurr, $ReportRtType, $SysDate, #COMPUTED_COST, $ReportMsgType)
        end-if
        
        if $COST_SOURCE = 'F'
           let #F_COST = #COMPUTED_COST
        end-if
        if $COST_SOURCE = 'I'
           let #I_COST = #COMPUTED_COST
        end-if
        if $COST_SOURCE = 'P'
           let #P_COST = #COMPUTED_COST
        end-if
        if $COST_SOURCE = 'Q'
           let #Q_COST = #COMPUTED_COST
        end-if
        if $COST_SOURCE = 'X'
           let #X_COST = #COMPUTED_COST
        end-if
        
from PS_TRN_SML_COST_VW A
where A.BUDGET_PERIOD = $BUDGET_PERIOD
and A.BUSINESS_UNIT = $BUSINESS_UNIT
and A.DEMAND_ID = $DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Compute-Costs'
#end-if

end-procedure Compute-Costs

!***********************************************************************
!  Compute Total Costs 
!***********************************************************************

begin-procedure Compute-Total-Costs

#ifdef debugx
           display 'Entering TRN036.SQR: Compute-Total-Costs'
#end-if

begin-SELECT ON-ERROR=SQL-Error
A.CURRENCY_CD                     &CUR_CD
A.VARIABLE_COST                   &VAR_COST
A.FIXED_COST                      &FIX_COST

        let $CUR_CD = &CUR_CD
        let #VARIABLE_COST = &VAR_COST
        let #FIXED_COST = &FIX_COST
        
        let #T_COST = 0
        
        if $Global = 'TRUE'
           let #COMPUTED_COST = (#VARIABLE_COST * #DEMAND_APPROVED) + #FIXED_COST
        else
           let #COMPUTED_COST = (#VARIABLE_COST * #TOTAL_DEMAND) + #FIXED_COST
        end-if

!This code is in remark because of the CURRENCY_CD which is not the one in which is evaluated the amount
!       if $CUR_CD <> $ReportCurr
!          do ConvertCurrency(#COMPUTED_COST, $CUR_CD, $ReportCurr, $ReportRtType, $SysDateTime, #COMPUTED_COST, $ReportMsgType)
!       end-if
        
        let #T_COST = #COMPUTED_COST
        
from PS_TRN_SML_SUM_VW A
where A.BUDGET_PERIOD = $BUDGET_PERIOD
and A.BUSINESS_UNIT = $BUSINESS_UNIT
and A.DEMAND_ID = $DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Compute-Total-Costs'
#end-if

end-procedure Compute-Total-Costs

!***********************************************************************
!  Compute Course Duration
!***********************************************************************

begin-procedure Compute-Course-Duration

#ifdef debugx
           display 'Entering TRN036.SQR: Compute-Course-Duration'
#end-if

begin-SELECT ON-ERROR=SQL-Error
K.DURATION_CONVERTED      &DURATION_CONVERTED
L.DEMAND_APPROVED                 &DEMAND_APPROVED

        let #DURATION_CONVERTED = &DURATION_CONVERTED
        let #DEMAND_APPROVED = &DEMAND_APPROVED
        
        let #COMPUTED_DURATION = 0
        let #COMPUTED_DURATION = (#DURATION_CONVERTED * #DEMAND_APPROVED)
        
from PS_TRN_LST_CRSE_VW K, PS_TRN_PLN_DEM_VW L
where K.BUDGET_PERIOD = $BUDGET_PERIOD
and K.BUSINESS_UNIT = $BUSINESS_UNIT
and K.COURSE = $COURSE
and K.BUDGET_PERIOD = L.BUDGET_PERIOD
and K.BUSINESS_UNIT = L.BUSINESS_UNIT
and K.COURSE = L.COURSE
and L.DEMAND_ID = $DEMAND_ID
end-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Compute-Course-Duration'
#end-if

end-procedure Compute-Course-Duration

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

   do Get_Field_Information($ReportID, 'SCENARIO_LBL'           , $SCENARIO_LBL            , #DW)
   do Get_Field_Information($ReportID, 'DEPTID_LBL'             , $DEPTID_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'BUDGET_PERIOD_LBL'  , $BUDGET_PERIOD_LBL       , #DW)
   do Get_Field_Information($ReportID, 'BUSINESS_UNIT_LBL'  , $BUSINESS_UNIT_LBL           , #DW)
   do Get_Field_Information($ReportID, 'COST_LBL'               , $COST_LBL                                , #DW)
   do Get_Field_Information($ReportID, 'COURSE_LBL'             , $COURSE_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'COURSE_LBL2'            , $COURSE_LBL2                     , #DW)
   do Get_Field_Information($ReportID, 'COURSE_DESCR_LBL'       , $COURSE_DESCR_LBL                , #DW)
   do Get_Field_Information($ReportID, 'DEPTID_LBL2'            , $DEPTID_LBL2                     , #DW)
   do Get_Field_Information($ReportID, 'DEMAND_ID_LBL'          , $DEMAND_ID_LBL                   , #DW)
   do Get_Field_Information($ReportID, 'CATEGORY_CD_LBL'        , $CATEGORY_CD_LBL                 , #DW)
   do Get_Field_Information($ReportID, 'SUB_CATEGORY_LBL'       , $SUB_CATEGORY_LBL                , #DW)
   do Get_Field_Information($ReportID, 'CURRENCY_LBL'           , $CURRENCY_LBL                    , #DW)
   do Get_Field_Information($ReportID, 'F_COST_LBL'             , $F_COST_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'I_COST_LBL'         , $I_COST_LBL                  , #DW)
   do Get_Field_Information($ReportID, 'P_COST_LBL'                     , $P_COST_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'Q_COST_LBL'                     , $Q_COST_LBL              , #DW)
   do Get_Field_Information($ReportID, 'S_COST_LBL'                     , $S_COST_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'X_COST_LBL'                     , $X_COST_LBL              , #DW)
   do Get_Field_Information($ReportID, 'T_COST_LBL'                     , $T_COST_LBL                      , #DW)
   do Get_Field_Information($ReportID, 'DURATION_LBL'           , $DURATION_LBL            , #DW)
   do Get_Field_Information($ReportID, 'HOUR_LBL'                       , $HOUR_LBL                                , #DW)
   do Get_Field_Information($ReportID, 'GENERAL_TOT_LBL'    , $GENERAL_TOT_LBL         , #DW)
   do Get_Field_Information($ReportID, 'INDIV_TOT_LBL'          , $INDIV_TOT_LBL           , #DW)
   do Get_Field_Information($ReportID, 'TOTAL_LBL'              , $TOTAL_LBL               , #DW)
   do Get_Field_Information($ReportID, 'EMPLID_LBL'             , $EMPLID_LBL              , #DW)
   do Get_Field_Information($ReportID, 'TRN_PLN_CAT_LBL'             , $TRN_PLN_CATEGORY_LBL              , #DW)   
   
end-procedure Get-Translat-Info

!***********************************************************************
!  Gets the Course Category, Sub-Category and Real from PS_TRN_CATALOG_TBL
!***********************************************************************

begin-procedure Find-Course($Course, :$Category_Cd, :$Sub_Category_Cd, :$RealCourse, :$CourseDescr)
#ifdef debugx
           display 'Entering TRN036.SQR: Find-Course'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
CATEGORY_CD      &CATEGORY_CD
SUB_CATEGORY_CD  &SUB_CATEGORY_CD
REAL_COURSE              &REAL_COURSE
DESCR                    &DESCR

   let $Category_Cd = &CATEGORY_CD
   let $Sub_Category_Cd = &SUB_CATEGORY_CD
   let $RealCourse = &REAL_COURSE
   let $TRN_CATALOG_TBL-DESCR = &DESCR
   do Get_Related_TRN_CATALOG_TBL(&CATEGORY_CD,$Course,&SUB_CATEGORY_CD)
   let $CourseDescr = $TRN_CATALOG_TBL-DESCR

FROM PS_TRN_CATALOG_TBL
WHERE COURSE = $Course
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Find-Course'
#end-if
end-procedure Find-Course($Course, :$Category_Cd, :$Sub_Category_Cd, :$RealCourse, :$CourseDescr)

!***********************************************************************
!  Gets Budget Period Description
!***********************************************************************

begin-procedure Retrieve-Budget-Period-Descr
#ifdef debugx
           display 'Entering TRN036.SQR: Retrieve-Budget-Period-Descr'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
DESCR      &BP_DESCR

   let $BUDGET_PERIOD-DESCR = &BP_DESCR
   do Get_Related_BUDGET_PERIOD($BUDGET_PERIOD)
   let $BP_DESCR = $BUDGET_PERIOD-DESCR

FROM PS_BUDGET_PERIOD
WHERE BUDGET_PERIOD = $BUDGET_PERIOD
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Retrieve-Budget-Period-Descr'
#end-if
end-procedure Retrieve-Budget-Period-Descr

!***********************************************************************
!  Gets Business Unit Description
!***********************************************************************

begin-procedure Retrieve-Business-Unit-Descr
#ifdef debugx
           display 'Entering TRN036.SQR: Retrieve-Business-Unit-Descr'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
DESCR      &BU_DESCR

   let $BUS_UNIT_TBL_HR-DESCR = &BU_DESCR
   do Get_Related_BUS_UNIT_TBL_HR($BUSINESS_UNIT)
   let $BU_DESCR = $BUS_UNIT_TBL_HR-DESCR

FROM PS_BUS_UNIT_TBL_HR
WHERE BUSINESS_UNIT = $BUSINESS_UNIT
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Retrieve-Business-Unit-Descr'
#end-if
end-procedure Retrieve-Business-Unit-Descr

!***********************************************************************
!  Gets Course Description
!***********************************************************************

begin-procedure Retrieve-Course-Descr
#ifdef debugx
           display 'Entering TRN036.SQR: Retrieve-Course-Descr'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
DESCR      &COURSE_DESCR

   let $COURSE_TBL-DESCR = &COURSE_DESCR
   do Get_Related_COURSE_TBL($COURSE)
   let $T_COURSE_DESCR = $COURSE_TBL-DESCR

FROM PS_COURSE_TBL
WHERE COURSE = $COURSE
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Retrieve-Course-Descr'
#end-if
end-procedure Retrieve-Course-Descr

!***********************************************************************
!  Gets Currency Description
!***********************************************************************

begin-procedure Retrieve-Currency-Descr
#ifdef debugx
           display 'Entering TRN036.SQR: Retrieve-Currency-Descr'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
CUR.EFFDT      &CUR.EFFDT
CUR.DESCR      &CUR.DESCR

   let $CURRENCY_CD_TBL-DESCR = &CUR.DESCR
   do Get_Related_CURRENCY_CD_TBL($ReportCurr,&CUR.EFFDT)
   let $T_CURRENCY_DESCR = $CURRENCY_CD_TBL-DESCR

FROM PS_CURRENCY_CD_TBL CUR
WHERE CUR.CURRENCY_CD = $ReportCurr
AND CUR.EFFDT = (SELECT MAX(EFFDT) FROM PS_CURRENCY_CD_TBL WHERE CURRENCY_CD = CUR.CURRENCY_CD AND EFFDT <= $SysDate)
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Retrieve-Currency-Descr'
#end-if
end-procedure Retrieve-Currency-Descr

!***********************************************************************
!  Gets Department Description
!***********************************************************************

begin-procedure Retrieve-Department-Descr
#ifdef debugx
           display 'Entering TRN036.SQR: Retrieve-Deptid-Descr'
#end-if

BEGIN-SELECT ON-ERROR=SQL-Error
DEPT.DEPTID     &DEPT.DEPTID
DEPT.EFFDT      &DEPT.EFFDT
DEPT.SETID      &DEPT.SETID
DEPT.DESCR      &DEPT.DESCR

   let $DEPT_TBL-DESCR = &DEPT.DESCR
   
   do Get_Related_DEPT_TBL(&DEPT.DEPTID,&DEPT.EFFDT,&DEPT.SETID)
   let $T_DEPTID_DESCR = $DEPT_TBL-DESCR
 
FROM PS_DEPT_TBL DEPT
WHERE DEPT.DEPTID = $DEPTID
AND DEPT.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEPT_TBL WHERE DEPTID = DEPT.DEPTID AND SETID = DEPT.SETID AND EFFDT <= $SysDate)
END-SELECT

#ifdef debugx
           display 'Exiting TRN036.SQR: Retrieve-Deptid-Descr'
#end-if
end-procedure Retrieve-Department-Descr

!***************************************************************
!Include SQCs
!***************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date calculation
!
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'readxlat.sqc'  !Read Translate Table
