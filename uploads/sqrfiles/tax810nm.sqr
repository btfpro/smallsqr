!***********************************************************************
!  TAX810NM:  Qtrly Wage List - NEW MEXICO                             *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2012, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2012/12/19:14:13:21                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885414                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the following'
    display 'file will have been created:'
    display ''
    display '  TAX810NM which is a file in XML format' 
    display '           required for on-line reporting to the'
    display '           New Mexico Department of Workforce Solutions (NMDWS).'
    display ''
    display 'Follow the instructions from the NMDWS for preparing'
    display 'and submitting the file.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810NM' to $ReportID

  do Get-Quarter-Dates

 if $FileType = 'D'
  move 'New Mexico Quarterly UI Wage Report - Diskette' to $ReportTitle
  display ''
  display 'Creating Diskette File for New Mexico UI Wage Reporting'
 else
   if $FileType = 'C' or $FileType = 'T'
    move 'New Mexico Quarterly UI Wage Report - Tape' to $ReportTitle
    display ''
    display 'Creating Tape File for New Mexico UI Wage Reporting'
   else
    move 'New Mexico Quarterly UI Wage Report - XML' to $ReportTitle
    display ''
    display 'Creating XML File for New Mexico UI Wage Reporting'
   end-if
 end-if

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'NM'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move &TX.Balance_Year  to $CalYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 128 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  let $FileType = 'X'
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
end-procedure

begin-procedure Open-File

if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810NM' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810NM.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=128:fixed
else
  open '{IMPORTPREFIX}TAX810NM{IMPORTSUFFIX}' as 10 for-writing record=300:vary

end-if

end-procedure

begin-procedure Process-Main

  if $FileType = 'X'
      do XML-Process
  else
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  move &A.Company to $Company

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.NAME
  Do Get-Empl-Address (&C.Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
    let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL
   let $COUNTY = $GETADDR_COUNTY

  if &C.NlGrs_QTD > 0 and &C.TxGrs_QTD >= 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'NM'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '         '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if
  move &D.Name         to $Name
  move $Address1     to $EEAddress
  move $City         to $EECity
  let $EEState = rtrim($State, ' ')
  move $Postal       to $EEZip

  move $EEZip          to $EEZipExtn ~~~~~~xxxx
  if instr($EEZip,'-',6) = 0
  and $EEZipExtn <> '    '
    let $EEZip = substr($EEZip,1,5) || '-' || substr($EEZip,6,4)
  end-if
  move $EEZip          to $EEZipExtn ~~~~~xxxxx

  do Rotate-Name
  uppercase $Name
  uppercase $EEAddress
  uppercase $EECity

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD

  move &C.TxGrs_QTD to #TxGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD
  add #ExGrs_QTD to #Co_ExGrs_QTD

  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999')

  multiply 100 times #TxGrs_QTD
  do Format-Number(#TxGrs_QTD,  $TxGrs_QTD,  '09999999999')

  multiply 100 times #ExGrs_QTD
  do Format-Number(#ExGrs_QTD,  $ExGrs_QTD,  '09999999999')

  do Write-S-Record
end-procedure

begin-procedure Before-Company
  do Get-Company-Data
  move &CT.Country to $Country
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'NM' to $State
#endif
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if
  move &Employer_ID_SUT to $StateEIN

  do Write-E-Record
end-procedure

begin-procedure After-Company
  if #Count_S > 0

    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Co_ExGrs_QTD to #Tot_ExGrs_QTD
    add #Count_S to #Count_F

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD
    move 0 to #Co_ExGrs_QTD
    move 0 to #Count_S
    new-page
  end-if
end-procedure

begin-procedure Write-E-Record
  move &A.Federal_EIN  to $FedEIN 099999999
  move &A.Descr        to $ErName
  move &A.Address1     to $ErAddress
  move &A.City         to $ErCity
  let $ErState = rtrim(&A.State, ' ')
  move &A.Postal       to $ErZip
  move $ErZip          to $ErZipExtn ~~~~~~xxxx
  if instr($ErZip,'-',6) = 0
  and $ErZipExtn <> '    '
    let $ErZip = substr($ErZip,1,5) || '-' || substr($ErZip,6,4)
  end-if
  move $ErZip          to $ErZipExtn ~~~~~xxxxx

  do Foreign-Address-Test
  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  if $FileType = 'D'
    do Write-Disk-1E
    do Write-Disk-2E
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  else
    do Write-Tape-E
  end-if
  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-Tape-E


  write 10 from 'E':1
       $QtrEndMonth:2
           $RptYear:2
                $Sp:9
                $Sp:9
            $ErName:50
         $ErAddress:40
            $ErCity:25
           $ErState:2
                $Sp:8
         $ErZipExtn:5
             $ErZip:5
                'F':1
                $Sp:9
               '35':2
                $Sp:10
          $StateEIN:7
       $MultiCounty:1
          $MultiLoc:1
                $Sp:86

end-procedure

begin-procedure Write-Disk-1E

 write 10 from '1E':2     !Column 1 - 2
           $CalYear:4     !Column 3 - 6
            $FedEIN:9     !Column 7 - 15
                $Sp:9     !Column 16 - 24
            $ErName:50    !Column 25 - 74
         $ErAddress:40    !Column 75 - 114
       $ForeignAddr:1     !Column 115
                $Sp:13    !Column 116 - 128
  add 1 to #RecordCount

end-procedure

begin-procedure Write-Disk-2E

 write 10 from '2E':2     !Column 1 - 2
            $ErCity:25    !Column 3 - 27
           $ErState:10    !Column 28 - 37
             $ErZip:5     !Column 38 - 42
         $ErZipExtn:5     !Column 43 - 47
                'F':1     !Column 48
                $Sp:80    !Column 49 - 128
  add 1 to #RecordCount

end-procedure

begin-procedure Write-S-Record

  if $FileType = 'D'
    do Write-Disk-1S
    do Write-Disk-2S
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  else
    do Write-Tape-S
  end-if
  add 1 to #Count_S
  add 1 to #Count_T

  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $TxGrs_QTD
  move 0  to #TxGrs_QTD
  move '' to $ExGrs_QTD
  move 0  to #ExGrs_QTD
end-procedure

begin-procedure Write-Tape-S

  write 10 from 'S':1
       $NATIONAL_ID:9
              $Name:27
         $EEAddress:40
            $EECity:25
           $EEState:2
                $Sp:8
             $EEZip:5
         $EEZipExtn:5
                $Sp:1
               '35':2
                $Sp:2
       $QtrEndMonth:2
           $RptYear:2
         $NlGrs_QTD:11
         $ExGrs_QTD:11
                'E':1
                $Sp:121

end-procedure

begin-procedure Write-Disk-1S


  write 10 from '1S':2
        $NATIONAL_ID:9
               $Name:27
          $EEAddress:40
             $EECity:25
            $EEState:2
                 $Sp:8
              $EEZip:5
          $EEZipExtn:5
                 $Sp:1
                '35':2
                 $Sp:2

   add 1 to #RecordCount
end-procedure

begin-procedure Write-Disk-2S
  write 10 from '2S':2
                 $Sp:5
           $StateEIN:7
        $QtrEndMonth:2
            $RptYear:2
          $NlGrs_QTD:11
          $ExGrs_QTD:11
                 ' ':1
                 $Sp:14
                '35':2
                 $Sp:71

   add 1 to #RecordCount
end-procedure

begin-procedure Foreign-Address-Test
  if $Country = 'USA'
    move '' to $ForeignAddr
    move '' to $CountryName
  else
    move 'X' to $ForeignAddr
    let $City = RTRIM($City,' ')
    concat $StateCd with $City bxx
    if $Country <> $priorCountry
      do Get-Country-Code
      move $Country to $priorCountry
      move &Descr   to $CountryName
    end-if
    move &Country_2Char to $StateCd
  end-if
  move $Zip         to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip to $ZipExtsn ~~~~~xxxxx
end-procedure

begin-procedure Get-Country-Code
begin-SELECT
COUNTRY_2CHAR,DESCR
FROM  PS_COUNTRY_TBL
WHERE COUNTRY = &CT.Country
end-SELECT
end-procedure

begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure


begin-procedure XML-Process

   move &TX.Balance_Year to $XMLQtrEndDate xxxx
   move &TX.Balance_Qtr  to $XMLQtr
   concat $XMLQtr        with $XMLQtrEndDate

   let $filer-info-written = 'N'

begin-SELECT
XMLINST.TEMP_SSN_MASK
FROM PS_INSTALLATION XMLINST
end-SELECT

begin-SELECT
XMLB.COMPANY
XMLB.DESCR
XMLB.ADDRESS1
XMLB.CITY
XMLB.STATE
XMLB.POSTAL
XMLB.COUNTRY

  if $filer-info-written = 'N'
     do XML-Begin-Filer-Info
     let $filer-info-written = 'Y'
  end-if

  move '' to $PrintHeader

  move &XMLB.COMPANY to $Company
  do XML-Process-Company-Employees

FROM  PS_COMPANY_TBL XMLB
WHERE XMLB.EFF_STATUS = 'A'
  AND XMLB.TAX_REPORT_TYPE = '2'
  AND XMLB.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = XMLB.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY XMLB.COMPANY
end-SELECT

  if #Count_F > 0
    let $RecordWritten = 'Y'
    do Print-Summary-Data('FileTotal')
  end-if

  if $filer-info-written = 'Y'
     do XML-End-Filer-Info
  end-if

end-procedure

begin-procedure XML-Begin-Filer-Info


   write 10 from '<?xml version="1.0" encoding="utf-8"?>'
   write 10 from '<Wage_File>'


end-procedure

begin-procedure XML-End-Filer-Info


   write 10 from '</Wage_File>'


end-procedure


begin-procedure XML-Process-Company-Employees
begin-SELECT

XMLC.COMPANY    () on-break print=never before=XML-Before-Company
                                        AFTER=XML-After-Company

XMLC.EMPLID

  move &XMLC.COMPANY to $Company
  move &XMLC.EMPLID  to $EmplID

  do XML-Process-Company-Employees-Detail

FROM  PS_TAX_BALANCE XMLC
WHERE XMLC.COMPANY       = &XMLB.Company
  AND XMLC.TAX_CLASS     = 'U'
  AND XMLC.BALANCE_ID    = $Calendar_Year_Id
  AND XMLC.BALANCE_YEAR  = &TX.Balance_Year
  AND XMLC.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND XMLC.STATE         = 'CA'
#else
  AND XMLC.STATE         = 'NM'
#endif
  AND XMLC.LOCALITY      = ' '
  AND XMLC.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = XMLC.EMPLID
         AND  COMPANY       = XMLC.COMPANY
         AND  BALANCE_ID    = XMLC.BALANCE_ID
         AND  BALANCE_YEAR  = XMLC.BALANCE_YEAR
         AND  BALANCE_QTR   = XMLC.BALANCE_QTR
         AND  STATE         = XMLC.STATE
         AND  LOCALITY      = XMLC.LOCALITY
         AND  TAX_CLASS     = XMLC.TAX_CLASS)

end-SELECT

end-procedure


begin-procedure XML-Process-Company-Employees-Detail

  let #XML_EMPL_QTD_WAGES = 0
  let #XML_NLGRS_HOLD = 0
  let #XML_EMPL_QTD_WITHHOLDING = 0
  let $No-Records = 'Y'

begin-SELECT
XMLD.EMPLID
XMLD.TAX_CLASS
XMLD.LOCALITY
SUM(XMLD.TXGRS_QTD) &XML_TXGRS_QTD
SUM(XMLD.NLGRS_QTD) &XML_NLGRS_QTD
SUM(XMLD.TAX_QTD)   &XML_TAX_QTD


  if  rtrim(&XMLD.TAX_CLASS, ' ') = 'U'
      let #XML_EMPL_QTD_WAGES = &XML_TXGRS_QTD
      let #XML_NLGRS_HOLD     = &XML_NLGRS_QTD
  end-if

  if  rtrim(&XMLD.TAX_CLASS, ' ') = 'H' 
      let #XML_EMPL_QTD_WITHHOLDING = &XML_TAX_QTD
  end-if

  let $No-Records = 'N'


FROM  PS_TAX_BALANCE XMLD
WHERE XMLD.COMPANY       = $Company
  AND XMLD.EMPLID        = $EmplID
  AND XMLD.BALANCE_ID    = $Calendar_Year_Id
  AND XMLD.BALANCE_YEAR  = &TX.Balance_Year
  AND XMLD.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND XMLD.STATE         = 'CA'
#else
  AND XMLD.STATE         = 'NM'
#endif
  AND ((XMLD.TAX_CLASS     = 'U'
  AND XMLD.LOCALITY      = ' ')
  OR  (XMLD.TAX_CLASS     = 'H'
  AND XMLD.LOCALITY      = ' '))
  AND XMLD.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = XMLD.EMPLID
         AND  COMPANY       = XMLD.COMPANY
         AND  BALANCE_ID    = XMLD.BALANCE_ID
         AND  BALANCE_YEAR  = XMLD.BALANCE_YEAR
         AND  BALANCE_QTR   = XMLD.BALANCE_QTR
         AND  STATE         = XMLD.STATE
         AND  LOCALITY      = XMLD.LOCALITY
         AND  TAX_CLASS     = XMLD.TAX_CLASS)
GROUP BY XMLD.EMPLID,XMLD.TAX_CLASS,XMLD.LOCALITY
ORDER BY XMLD.EMPLID,XMLD.TAX_CLASS,XMLD.LOCALITY
end-SELECT

  if  $No-Records <> 'Y'

     if #XML_EMPL_QTD_WAGES >= 0
        and #XML_EMPL_QTD_WITHHOLDING >= 0
        and #XML_NLGRS_HOLD >= 0
       do XML-Process-Name-and-SSN
     else
       do Report-Negative-Wages
     end-if
  end-if

end-procedure


begin-procedure XML-Process-Name-and-SSN

begin-SELECT
XMLE.EMPLID
XMLE1.NATIONAL_ID
XMLE.LAST_NAME
XMLE.FIRST_NAME
XMLE.MIDDLE_NAME

  do Get-Reporting-Unit-Number
  do Get-Monthly-Employment-Indicator
  do Get-Officer-Code   

  do XML-Output-Employee-Detail

FROM  PS_NAMES XMLE, PS_PERS_NID XMLE1
WHERE XMLE.EMPLID        = $EmplID
  AND XMLE.EMPLID        = XMLE1.EMPLID
  AND XMLE.NAME_TYPE = 'PRI'
  AND XMLE.EFFDT =
      (SELECT MAX(EX.EFFDT)
       FROM   PS_NAMES EX
       WHERE  EX.EMPLID    = XMLE.EMPLID
         AND  EX.NAME_TYPE = XMLE.NAME_TYPE
         AND  EX.EFFDT    <= $AsOfDate)
  AND XMLE1.COUNTRY = {NID_Country}
  AND XMLE1.NATIONAL_ID_TYPE = $Payroll_NID_Type
end-SELECT

end-procedure


begin-procedure XML-Output-Employee-Detail

   add #XML_NLGRS_HOLD           to #Co_NlGrs_QTD
   add #XML_EMPL_QTD_WAGES       to #Co_TxGrs_QTD
   add #XML_EMPL_QTD_WITHHOLDING to #Co_STW_QTD

   add 1 to #Count_S

   write 10 from '<Employee>'

   let $xml_content     = substr($StateEIN, 1, 8)
   let $xml_content     = rtrim($xml_content, ' ')
   do Process-XML-Content
   let $xml_output_line = ''
   let $xml_output_line = '<Employer_Acct_Number>' || $xml_content || '</Employer_Acct_Number>'
   write 10 from $xml_output_line


   let $xml_content      = substr($Reporting-Unit-No, 1, 5)
   let $xml_content      = rtrim($xml_content, ' ')
   do Process-XML-Content
   let $xml_output_line  = ''
   let $xml_output_line  = '<Unit_Number>' || $xml_content || '</Unit_Number>'
   write 10 from $xml_output_line


   let $xml_content      = $XMLQtrEndDate
   let $xml_output_line  = ''
   let $xml_output_line  = '<Year_Qtr>' || $xml_content || '</Year_Qtr>'
   write 10 from $xml_output_line


   let $xml_content      = $MonEmpFlg1
   let $xml_output_line  = ''
   let $xml_output_line  = '<Month_1_Employment>' || $xml_content || '</Month_1_Employment>'
   write 10 from $xml_output_line


   let $xml_content      = $MonEmpFlg2
   let $xml_output_line  = ''
   let $xml_output_line  = '<Month_2_Employment>' || $xml_content || '</Month_2_Employment>'
   write 10 from $xml_output_line


   let $xml_content      = $MonEmpFlg3
   let $xml_output_line  = ''
   let $xml_output_line  = '<Month_3_Employment>' || $xml_content || '</Month_3_Employment>'
   write 10 from $xml_output_line


   move &XMLE1.NATIONAL_ID  to $XMLSSN
   let $xml_content = substr($XMLSSN, 1, 9)
   let $xml_content = rtrim($xml_content, ' ')
   do Process-XML-Content
   let $xml_output_line = ''
   let $xml_output_line = '<Employee_SSN>' || $xml_content || '</Employee_SSN>'
   write 10 from $xml_output_line


   move &XMLE.LAST_NAME  to $XMLNAME
   let $xml_content = substr($XMLNAME, 1, 30)
   let $xml_content = rtrim($xml_content, ' ')
   do Process-XML-Content
   let $xml_output_line = ''
   let $xml_output_line = '<Employee_Last_Name>' || $xml_content || '</Employee_Last_Name>'
   write 10 from $xml_output_line


   move &XMLE.FIRST_NAME  to $XMFNAME
   let $xml_content = substr($XMFNAME, 1, 30)
   let $xml_content = rtrim($xml_content, ' ')
   do Process-XML-Content
   let $xml_output_line = ''
   let $xml_output_line = '<Employee_First_Name>' || $xml_content || '</Employee_First_Name>'
   write 10 from $xml_output_line


   move &XMLE.MIDDLE_NAME  to $XMMNAME
   let $xml_content = substr($XMMNAME, 1, 1)
   if rtrim($xml_content, ' ') = ''
      write 10 from '<Employee_Middle_Initial />'
   else
      do Process-XML-Content
      let $xml_output_line = ''
      let $xml_output_line = '<Employee_Middle_Initial>' || $xml_content || '</Employee_Middle_Initial>'
      write 10 from $xml_output_line
   end-if


   do format-number(#XML_NLGRS_HOLD, $XML_EMPL_QTD_WAGES, '999999999999.99')
   let $xml_content = $XML_EMPL_QTD_WAGES
   let $xml_output_line = ''
   let $xml_output_line = '<UI_Gross_Wage>' || $xml_content || '</UI_Gross_Wage>'
   write 10 from $xml_output_line


   do format-number(#XML_EMPL_QTD_WITHHOLDING, $XML_EMPL_QTD_WITHHOLDING, '999999999999.99')
   let $xml_content = $XML_EMPL_QTD_WITHHOLDING
   let $xml_output_line = ''
   let $xml_output_line = '<NM_Income_Tax_Withheld>' || $xml_content || '</NM_Income_Tax_Withheld>'
   write 10 from $xml_output_line


   let #XML_WC_FEE_DUE = 4.3
   do format-number(#XML_WC_FEE_DUE, $XML_WC_FEE_DUE, '999999999999.99')
   let $xml_content = $XML_WC_FEE_DUE
   let $xml_output_line = ''
   let $xml_output_line = '<WC_Fee_Due>' || $xml_content || '</WC_Fee_Due>'
   write 10 from $xml_output_line


   let $xml_content      = $Officer_Cd
   let $xml_output_line  = ''
   let $xml_output_line  = '<Owner_Officer_Indicator>' || $xml_content || '</Owner_Officer_Indicator>'
   write 10 from $xml_output_line


   let #XML_ADJ_RSN_CD = 0
   do format-number(#XML_ADJ_RSN_CD, $XML_ADJ_RSN_CD, '9')
   let $xml_content = $XML_ADJ_RSN_CD
   let $xml_output_line = ''
   let $xml_output_line = '<Adjustment_Reason_Code>' || $xml_content || '</Adjustment_Reason_Code>'
   write 10 from $xml_output_line


   write 10 from '</Employee>'

end-procedure


begin-procedure XML-Before-Company

   do Get-Company-Data

#ifdef TAXTEST
   move 'CA' to $State
#else
   move 'NM' to $State
#endif

   do Get-State-Tax-Data             !Employer ID
   if RTRIM(&Employer_ID_SUT,' ') = ''
     display '*** State Unemployment ID missing in Company State Tax Table ***'
     display '*********************** Processing stopped *********************'
     display 'Company ' noline
     display $Company
     stop
   end-if

   let $StateEIN = RTRIM(&Employer_ID_SUT,' ')

   if (SUBSTR($StateEIN,1,1) < '0' OR SUBSTR($StateEIN,1,1) > '9') OR
      (SUBSTR($StateEIN,2,1) < '0' OR SUBSTR($StateEIN,2,1) > '9') OR
      (SUBSTR($StateEIN,3,1) < '0' OR SUBSTR($StateEIN,3,1) > '9') OR
      (SUBSTR($StateEIN,4,1) < '0' OR SUBSTR($StateEIN,4,1) > '9') OR
      (SUBSTR($StateEIN,5,1) < '0' OR SUBSTR($StateEIN,5,1) > '9') OR
      (SUBSTR($StateEIN,6,1) < '0' OR SUBSTR($StateEIN,6,1) > '9') OR
      (SUBSTR($StateEIN,7,1) < '0' OR SUBSTR($StateEIN,7,1) > '9') OR
      (SUBSTR($StateEIN,8,1) < '0' OR SUBSTR($StateEIN,8,1) > '9')

      display ' '
      display '    *** Warning: State Unemployment ID - must be numeric ***'
      display '        Company ' noline
      display        $Company    noline
      display '   State Unemployment ID ' noline
      display        $StateEIN
      display ' '
   else
      if length($StateEIN) > 8
         display ' '
         display '    *** Warning: State Unemployment ID - longer than 8 digits ***'
         display '    *** Only 1st 8 digits will be reported on the output file ***'
         display '        Company '  noline
         display         $Company    noline
         display '   Reported ID# '  noline
         let $StateEIN = SUBSTR($StateEIN,1,8)
         display         $StateEIN   noline
         display '   Co StateTax Tbl ID# ' noline
         display     &Employer_ID_SUT
         display ' '
      end-if
   end-if

end-procedure


begin-procedure XML-After-Company

  if #Count_S > 0
     do Print-Summary-Data('CoTotal')

     add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
     add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
     add #Count_S to #Count_F

     move 0 to #Co_NlGrs_QTD
     move 0 to #Co_TxGrs_QTD
     move 0 to #Co_STW_QTD
     move 0 to #Count_S
     new-page
  end-if

end-procedure


begin-procedure Report-Negative-Wages

    if $PrintHeader = ''
      print '**** Negative Wages ******'  (+1,1)
      print ' '                         (+2,1,11)
      print '     QTD     '             (0,+4,13)
      print '     QTD     '             (0,+4,13)
      print '     QTD     '             (0,+8,13)
      print 'EmplID'                    (+1,1,11)
      print 'Taxable Gross'             (0,+4,13)
      print 'No Limit Gross'            (0,+4,14)
      print 'Withholding  '             (0,+7,13)
      position (+2)
      move 'N' to $PrintHeader
    end-if

    print $EmplID                    (+1,1,14)
    print #XML_EMPL_QTD_WAGES        (0,16) edit 99,999,999.99mi
    print #XML_NLGRS_HOLD            (0,34) edit 99,999,999.99mi
    print #XML_EMPL_QTD_WITHHOLDING  (0,52) edit 99,999,999.99mi

    add #XML_EMPL_QTD_WAGES to #Neg_TxGrs_QTD
    add #XML_NLGRS_HOLD     to #Neg_NlGrs_QTD

end-procedure


begin-procedure Process-XML-Content

   let $xml_content   = replace($xml_content, '&',  '&amp;')
   let $xml_content   = replace($xml_content, '"',  '&quot;')
   let $xml_content   = replace($xml_content, '<',  '&lt;')
   let $xml_content   = replace($xml_content, '>',  '&gt;')
   let $xml_content   = replace($xml_content, '''', '&apos;')


   let $xml_content   = ltrim($xml_content, ' ')
   let $xml_content   = rtrim($xml_content, ' ')

end-procedure


begin-procedure Get-Reporting-Unit-Number                   

  let $Reporting-Unit-No = '00001'
                                                                                                    
  let $Job_Found = 'N'                            
  do Get-Active-Job                               
                                                  
  if $Job_Found = 'Y'                             
    do Get-UI-Report-Code                  
  end-if                                          
end-procedure                                     
                                                  
begin-procedure Get-Active-Job                    
                                                  
#ifdef TAXTEST
  let $Active_Job_State = 'CA'
#else
  let $Active_Job_State = 'NM'
#endif

  let #Prev_Empl_Rcd    = 999

begin-select
JOB1.EMPL_RCD,
JOB1.EFFDT,
JOB1.EFFSEQ,
JOB1.EMPL_STATUS,
JOB1.TAX_LOCATION_CD

  if $Job_Found <> 'Y'
     let $Tax_Location  = &JOB1.TAX_LOCATION_CD
  end-if
  
  if &Job1.EMPL_STATUS = 'A'
     if &JOB1.EMPL_RCD < #Prev_Empl_Rcd
        let $Tax_Location  = &JOB1.TAX_LOCATION_CD
        let #Prev_Empl_Rcd = &JOB1.EMPL_RCD
     end-if
  end-if     
     
  let $Job_Found     = 'Y'

 FROM  PS_JOB JOB1
 WHERE JOB1.EMPLID          = $EmplID
   AND JOB1.COMPANY         = $Company
   AND EXISTS (SELECT 'X'
                FROM PS_TAX_LOCATION2 TL1
               WHERE TL1.TAX_LOCATION_CD = JOB1.TAX_LOCATION_CD
                 AND TL1.STATE           = $Active_Job_State)
  AND JOB1.EFFDT      =
      (SELECT MAX(JOB13.EFFDT)
         FROM PS_JOB JOB13
        WHERE JOB13.EMPLID          = JOB1.EMPLID
          AND JOB13.COMPANY         = JOB1.COMPANY
          AND JOB13.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB13.EFFDT          <= $AsOfDate
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL13
                       WHERE TL13.TAX_LOCATION_CD = JOB13.TAX_LOCATION_CD
                         AND TL13.STATE           = $Active_Job_State))
  AND JOB1.EFFSEQ     =
      (SELECT MAX(JOB14.EFFSEQ)
         FROM PS_JOB JOB14
        WHERE JOB14.EMPLID          = JOB1.EMPLID
          AND JOB14.COMPANY         = JOB1.COMPANY
          AND JOB14.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB14.EFFDT           = JOB1.EFFDT
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL14
                       WHERE TL14.TAX_LOCATION_CD = JOB14.TAX_LOCATION_CD
                         AND TL14.STATE           = $Active_Job_State))
order by JOB1.EFFDT, JOB1.EFFSEQ
end-select      
end-procedure   


begin-procedure Get-UI-Report-Code           
begin-select                                        
LOC.UI_RPT_CODE                                 
                                                    
  let $Reporting-Unit-No = &LOC.UI_RPT_CODE       
                                                    
FROM PS_CO_UI_RPTCD_TBL LOC                         
WHERE LOC.COMPANY    = $Company                        
  AND LOC.LOCATION   = $Tax_Location                  
  AND LOC.EFFDT =                                   
      (SELECT MAX(EFFDT)                            
         FROM PS_CO_UI_RPTCD_TBL                    
        WHERE COMPANY  = LOC.COMPANY                
          AND LOCATION = LOC.LOCATION               
          AND EFFDT   <= $AsOfDate)                 
  AND LOC.EFF_STATUS = 'A'                          
end-select                                          
end-procedure 


begin-procedure Get-Quarter-Dates

    move &TX.Balance_Year   to $EffYear 9999
    move &TX.Balance_Qtr    to $EffQuarter 9

    let #EffYear       = to_number($EffYear)
    let #EffQuarter    = to_number($EffQuarter)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            break
        when-other
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
    end-evaluate

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')

end-procedure

begin-procedure Get-Monthly-Employment-Indicator

  let $MonEmpFlg1 = '0'
  let $MonEmpFlg2 = '0'
  let $MonEmpFlg3 = '0'

begin-SELECT
A1.COMPANY
A1.PAYGROUP
A1.PAY_END_DT
A1.EMPLID
A1.EMPL_RCD
A1.EARNS_BEGIN_DT
A1.EARNS_END_DT
A1.PAY_LINE_STATUS

   move &A1.EARNS_BEGIN_DT to $EarnsBD
   move &A1.EARNS_END_DT   to $EarnsED

   do Format-DateTime($EarnsBD, $EarnsBeginDt,{DEFCMP},'','')
   do Format-DateTime($EarnsED, $EarnsEndDt,{DEFCMP},'','')

   if $EarnsBeginDt <= $12thOfMonth1
     if $EarnsEndDt >= $12thOfMonth1
          let $MonEmpFlg1 = '1'
      end-if
   end-if

    if $EarnsBeginDt <= $12thOfMonth2
      if $EarnsEndDt >= $12thOfMonth2
          let $MonEmpFlg2 = '1'
      end-if
    end-if

    if $EarnsBeginDt <= $12thOfMonth3
      if $EarnsEndDt >= $12thOfMonth3
           let $MonEmpFlg3 = '1'
       end-if
    end-if
 
FROM PS_PAY_EARNINGS A1, PS_PAY_CHECK C1
WHERE A1.COMPANY = $Company
  AND A1.EMPLID  = $EmplID
  AND A1.PAY_END_DT BETWEEN $First_Day_Of_Quarter AND $Last_Day_Of_Quarter
  AND A1.PAY_LINE_STATUS = 'F'
  AND (($12th_Of_1st_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_2nd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_3rd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT))
  AND A1.COMPANY = C1.COMPANY
  AND A1.PAYGROUP = C1.PAYGROUP
  AND A1.PAY_END_DT = C1.PAY_END_DT
  AND A1.OFF_CYCLE = C1.OFF_CYCLE
  AND A1.PAGE_NUM = C1.PAGE_NUM
  AND A1.LINE_NUM = C1.LINE_NUM
  AND C1.PAYCHECK_STATUS IN ('F','A','R')
end-SELECT
end-procedure


begin-procedure Get-Officer-Code

  move 'N' to $Officer_Cd

begin-select
J.OFFICER_CD
  if &J.Officer_Cd <> 'N'
    move 'Y' to $Officer_Cd
  end-if
 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID   
  AND J.COMPANY  = $Company  
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'getaddr.sqc'   !Get Person Current Address
