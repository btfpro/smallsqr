!*********************************************
!  REG001FR:  Monthly Workforce Report (FRA) *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/06:21:02:37                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define ESTAB_TBL
#define PERSONAL_DT_FST
#define JOBCODE_TBL
#include 'rellang.sqc'

#define EEC 'EEC'
#define ENTRY 'Entry'
#define LEAVE 'Leave'
#define COUNT 'Count'
#define PRINT 'Print'

#define C01    1
#define C02   53
#define C03   66
#define C04   77
#define C05   83
#define C06  115
#define C07  121
#define C08  133
#define C09  142
#define C10  154

!***********************************************************************

begin-program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-program

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 6
  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

  move 'REG001FR' to $ReportID

  do Stdapi-Init

  let $language_cd = $CURR_LANGUAGE_CD

  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)

  do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

  if $prcs_process_instance = ''
        !No Prompt
  else
    do Select-Parameters-FRA
  end-if

  do Init_Printer
  do get-action-grp
end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
   do GET-REG001-FRA-PARM
end-procedure

!***********************************************************************
!  Main: Creates the Monthly Workforce Report
!***********************************************************************

begin-procedure Process-Main

  let $RegRegion = 'FRA'
  let #FirstRow = 0
  
  do Get-Translat-Info     ! Global
  
  do Print-Search-Period   ! Search Period

  print $TITLE1_LBL (+2,1)
  do Frame1-Retrieve       ! Estab Identity

  print $TITLE2_LBL (+2,1)

  Let $Step = {COUNT}
  do Count-Workforce($ReportID, $Step, $RegRegion, $COMPANY, $ESTABID, $STARTDT, $ENDDT, $DTUSTARTDT, $DTUENDDT, #Counter1Male,#Counter1Female,
 #EntryCounterFemale, #EntryCounterMale, #LeaveCounterFemale, #LeaveCounterMale)
  do Frame2-Retrieve       ! Count Workforce in the Establishment

  do Agency-Temps-Retrieve ! Count Agency and Temps Workers

  print $TITLE3_LBL (+2,1)
  do Print-Banner

  Let $Step = {PRINT}     ! Force printing in Workforce-Moves
  do Count-Workforce($ReportID, $Step, $RegRegion, $COMPANY, $ESTABID, $STARTDT, $ENDDT, $DTUSTARTDT, $DTUENDDT, #Counter1Male,#Counter1Female,
 #EntryCounterFemale, #EntryCounterMale, #LeaveCounterFemale, #LeaveCounterMale)

end-procedure

!***********************************************************************
!  Prints table banner
!***********************************************************************

begin-procedure Print-Banner
   print $BIRTHYEAR1_LBL    (+2,{C03},48)
   print $INSEE_CD1_LBL     (,{C06},19)
   print $NATURE1_LBL       (,{C08})

   print $NAME_LBL          (+1,{C01},51)
   print $CITIZENSHIP_LBL   (,{C02},12)
   print $BIRTHYEAR2_LBL    (,{C03},10)
   print $SEX_LBL           (,{C04},5)
   print $JOB_LBL           (,{C05},31)
   print $INSEE_CD2_LBL     (,{C06},5)
   print $ENTRY_LBL         (,{C07},11)
   print $NATURE2_LBL       (,{C08},8)
   print $LEAVE_LBL         (,{C09},11)
   print $REASON_LBL        (,{C10})

end-procedure Print-Banner

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

   do Get_Field_Information($ReportID, 'TITLE1'        , $TITLE1_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE2'        , $TITLE2_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE3'        , $TITLE3_LBL        , #DW)
   do Get_Field_Information($ReportID, 'SIRET_CD'      , $SIRET_CD_LBL      , #DW)
   do Get_Field_Information($ReportID, 'APE_CD'        , $APE_CD_LBL        , #DW)
   do Get_Field_Information($ReportID, 'ESTAB_NAME'    , $ESTAB_NAME_LBL    , #DW)
   do Get_Field_Information($ReportID, 'ADDRESS'       , $ADDRESS_LBL       , #DW)
   do Get_Field_Information($ReportID, 'POSTAL'        , $POSTAL_LBL        , #DW)
   do Get_Field_Information($ReportID, 'CITY'          , $CITY_LBL          , #DW)
   do Get_Field_Information($ReportID, 'STARTDT'       , $STARTDT_LBL       , #DW)
   do Get_Field_Information($ReportID, 'ENDDT'         , $ENDDT_LBL         , #DW)
   do Get_Field_Information($ReportID, 'NOT_OBLIGATORY', $NOT_OBLIGATORY_LBL, #DW)
   do Get_Field_Information($ReportID, 'START_DT_WRK'  , $START_DT_WRK_LBL  , #DW)
   do Get_Field_Information($ReportID, 'ENTRIES'       , $ENTRIES_LBL       , #DW)
   do Get_Field_Information($ReportID, 'LEAVES'        , $LEAVES_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TOTAL_WORKFRCE', $TOTAL_WORKFRCE_LBL, #DW)
   do Get_Field_Information($ReportID, 'AND'           , $AND_LBL           , #DW)
   do Get_Field_Information($ReportID, 'MEN'           , $MEN_LBL           , #DW)
   do Get_Field_Information($ReportID, 'WOMEN'         , $WOMEN_LBL         , #DW)
   do Get_Field_Information($ReportID, 'AGENCY_COUNT'  , $AGENCY_COUNT_LBL  , #DW)
   do Get_Field_Information($ReportID, 'NAME'          , $NAME_LBL          , #DW)
   do Get_Field_Information($ReportID, 'CITIZENSHIP'   , $CITIZENSHIP_LBL   , #DW)
   do Get_Field_Information($ReportID, 'BIRTHYEAR1'    , $BIRTHYEAR1_LBL    , #DW)
   do Get_Field_Information($ReportID, 'BIRTHYEAR2'    , $BIRTHYEAR2_LBL    , #DW)
   do Get_Field_Information($ReportID, 'SEX'           , $SEX_LBL           , #DW)
   do Get_Field_Information($ReportID, 'JOB'           , $JOB_LBL           , #DW)
   do Get_Field_Information($ReportID, 'INSEE_CD1'     , $INSEE_CD1_LBL     , #DW)
   do Get_Field_Information($ReportID, 'INSEE_CD2'     , $INSEE_CD2_LBL     , #DW)
   do Get_Field_Information($ReportID, 'ENTRY'         , $ENTRY_LBL         , #DW)
   do Get_Field_Information($ReportID, 'NATURE1'       , $NATURE1_LBL       , #DW)
   do Get_Field_Information($ReportID, 'NATURE2'       , $NATURE2_LBL       , #DW)
   do Get_Field_Information($ReportID, 'LEAVE'         , $LEAVE_LBL         , #DW)
   do Get_Field_Information($ReportID, 'REASON'        , $REASON_LBL        , #DW)

end-procedure Get-Translat-Info

!***********************************************************************
!  Get Employee Hire/Re-Hire/Transfer Date
!***********************************************************************

begin-procedure Get-And-Print-Hire-Date($ReportID, $Emplid, #Empl_rcd, $ENDDT_TER, $ESTABID, $COMPANY)


BEGIN-SELECT ON-ERROR=SQL-Error
{DATEOUT-PREFIX}CC.EFFDT{DATEOUT-SUFFIX} &CC.EFFDT
A.CONTRACT_TYPE                     &CONTRACT_TYPE
CC.ACTION                     &ACTION

     let $CC_EFFDT = &CC.EFFDT
     let $ACTION = &ACTION
     let $CONTRACT_TYPE = &CONTRACT_TYPE

        do Print-Entry-Info($CC_EFFDT, $ACTION, $CONTRACT_TYPE)

FROM PS_JOB CC
, PS_CNT_ACTIVE_VW A
WHERE CC.EMPLID = $Emplid
AND CC.EMPL_RCD = #Empl_rcd
AND A.EMPLID = CC.EMPLID
AND CC.EMPL_STATUS = 'A'
AND CC.ESTABID = $ESTABID
AND CC.COMPANY = $COMPANY
AND CC.EMPL_CLASS NOT IN ('G', 'T')
AND CC.REG_TEMP <> 'T'
AND CC.EFFDT =
(
 SELECT MAX(CC2.EFFDT)
 FROM PS_JOB CC2
 WHERE CC2.EMPLID = CC.EMPLID
   AND CC2.EMPL_RCD = CC.EMPL_RCD
   AND CC2.ESTABID = CC.ESTABID
   AND CC2.EMPL_STATUS = 'A'
   AND CC2.EFFDT <= {DATEIN-PREFIX}$ENDDT_TER{DATEIN-SUFFIX}
)
AND CC.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT = CC.EFFDT
 AND EMPLID = CC.EMPLID
 AND EMPL_RCD = CC.EMPL_RCD
)
AND A.CONTRACT_TYPE in
(
 SELECT GRP.CONTRACT_TYPE
 FROM PS_CNTRCT_TYPE_DEF DEF, PS_CNTRCT_TYPE_GRP GRP
 WHERE DEF.GROUP_NAME = $ReportID
   AND GRP.GROUP_NAME = DEF.GROUP_NAME
   AND GRP.EFFDT = DEF.EFFDT
   AND GRP.SETID = CC.REG_REGION
   AND DEF.EFFDT =
 (
  SELECT MAX(EFFDT)
  FROM PS_CNTRCT_TYPE_DEF DEF1
  WHERE DEF1.GROUP_NAME = DEF.GROUP_NAME
    AND DEF1.EFFDT <= CC.EFFDT
 )
)
AND A.CONTRACT_NUM = CC.CONTRACT_NUM
AND A.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_CNT_ACTIVE_VW
 WHERE EFFDT <=  CC.EFFDT
 AND CONTRACT_NUM = A.CONTRACT_NUM
 AND EMPLID = A.EMPLID
)
AND CC.ACTION in ([$_ActionString])
ORDER BY CC.EFFDT ASC
END-SELECT
end-procedure Get-And-Print-Hire-Date

!***********************************************************************
!  Prints the Search Period of the report
!***********************************************************************

begin-procedure Print-Search-Period

   if not IsNull($STARTDT)
      do Format-DateTime($STARTDT, $StartDate, {DEFDMY},'','')
   end-if
   if not IsNull($ENDDT)
      do Format-DateTime($ENDDT, $EndDate, {DEFDMY},'','')
   end-if

   print $STARTDT_LBL                 (+1,1)
   print $StartDate                   (,+2)
   print $ENDDT_LBL                   (,+10)
   print $EndDate                     (,+2)

end-procedure Print-Search-Period

!***********************************************************************
!  Header: Retrieves Establishment Data
!***********************************************************************

begin-procedure Frame1-Retrieve

begin-SELECT ON-ERROR=SQL-Error
AA.SIREN_CD_FRA       &SIREN_CD_FRA
AA.NIC_CODE_FRA       &NIC_CD
AA.APE_INDSTRY_CD_FRA &APE_INDSTRY_CD_FRA
A.POSTAL             &POSTAL

A.ESTABID             &ESTABID
{DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX} &EFFDT

A.ADDRESS1            &ADDRESS1
A.ADDRESS2            &ADDRESS2
A.ADDRESS3            &ADDRESS3
A.ADDRESS4            &ADDRESS4
A.CITY                &CITY
A.DESCR               &ESTAB_NAME

   let $ESTAB_TBL-ADDRESS1 = &ADDRESS1
   let $ESTAB_TBL-ADDRESS2 = &ADDRESS2
   let $ESTAB_TBL-ADDRESS3 = &ADDRESS3
   let $ESTAB_TBL-ADDRESS4 = &ADDRESS4
   let $ESTAB_TBL-CITY = &CITY
   let $ESTAB_TBL-DESCR = &ESTAB_NAME

   do Get_Related_ESTAB_TBL(&EFFDT, &ESTABID)

   let $Addr1 = $ESTAB_TBL-ADDRESS1
   let $Addr2 = $ESTAB_TBL-ADDRESS2
   let $Addr3 = $ESTAB_TBL-ADDRESS3
   let $Addr4 = $ESTAB_TBL-ADDRESS4
   let $City = $ESTAB_TBL-CITY
   let $EstabName = $ESTAB_TBL-DESCR

   do Frame1-Print

from PS_ESTAB_TBL A, PS_REG_REGION_TBL R, PS_ESTAB_TBL_FRA AA
where A.ESTABID=$ESTABID
and AA.ESTABID=A.ESTABID
and A.REG_REGION = R.REG_REGION
and R.COUNTRY = $RegRegion
and A.EFFDT =
(
 select MAX(B.EFFDT)
 from PS_ESTAB_TBL B
 where B.ESTABID = A.ESTABID
 and B.EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
 and B.REG_REGION = R.REG_REGION
 and R.COUNTRY = $RegRegion
)
and A.EFF_STATUS = 'A'
and AA.EFFDT=A.EFFDT

end-SELECT
end-procedure Frame1-Retrieve

!***********************************************************************
!  Prints Establishement data
!***********************************************************************

begin-procedure Frame1-Print

   print $SIRET_CD_LBL                 (+2,1)
   let $SIRET_CODE = &SIREN_CD_FRA||&NIC_CD
   print $SIRET_CODE                   (,+2)
   print $APE_CD_LBL                   (,+10)
   print &APE_INDSTRY_CD_FRA           (,+2)
   print $ESTAB_NAME_LBL               (+1,1)
   print $EstabName                    (,+2)
   print $ADDRESS_LBL                  (+1,1)
   if rtrim($Addr1, ' ') <> ''
      print $Addr1                     (+1,1)
        end-if
   if rtrim($Addr2, ' ') <> ''
      print $Addr2                     (+1,1)
        end-if
   if rtrim($Addr3, ' ') <> ''
      print $Addr3                     (+1,1)
        end-if
   if rtrim($Addr4, ' ') <> ''
      print $Addr4                     (+1,1)
        end-if
   print $POSTAL_LBL                   (+1,1)
   print &POSTAL                       (,+2)
   print $CITY_LBL                     (,+10)
   print $City                         (,+2)

end-procedure Frame1-Print

!***********************************************************************
!  Counts Establishement Worforce
!***********************************************************************

begin-procedure Frame2-Retrieve

   let #TotalCounter1 = #Counter1Male + #Counter1Female
   let #TotalEntry = #EntryCounterMale + #EntryCounterFemale
   let #TotalLeave = #LeaveCounterMale + #LeaveCounterFemale
   let #TotalWorkersEndPeriod = #TotalCounter1 + #TotalEntry - #TotalLeave
   let #TotalMale = #Counter1Male + #EntryCounterMale - #LeaveCounterMale
   let #TotalFemale = #Counter1Female + #EntryCounterFemale - #LeaveCounterFemale

   if #TotalWorkersEndPeriod < 50
      print $NOT_OBLIGATORY_LBL     (+2,1)
   end-if

   print $START_DT_WRK_LBL           (+2,1,38)
   print #TotalCounter1              (,40) EDIT 999999
   print '+'                         (+1,6)
   print $ENTRIES_LBL                (+1,1,38)
   print #TotalEntry                 (,40) EDIT 999999
   print '-'                         (+1,6)
   print $LEAVES_LBL                 (+1,1,38)
   print #TotalLeave                 (,40) EDIT 999999
   print '='                         (+1,6)
   print $TOTAL_WORKFRCE_LBL         (+1,1,38)
   print #TotalWorkersEndPeriod      (,40) EDIT 999999
   print '->'                        (,+2)
   print #TotalMale                  (,+1) EDIT 999999
   print $MEN_LBL                    (,+1)
   print $AND_LBL                    (,+1)
   print #TotalFemale                (,+1) EDIT 999999
   print $WOMEN_LBL                  (,+1)

end-procedure Frame2-Retrieve


!***********************************************************************
!  Retrieve All Employees Linked to the Given Establishment
!  at the Start of the Period or during the Period.
!***********************************************************************

begin-procedure Count-Workforce($ReportID, $Step, $RegRegion, $COMPANY, $ESTABID, $STARTDT, $ENDDT, $DTUSTARTDT, $DTUENDDT,
 :#Counter1Male,:#Counter1Female,:#EntryCounterFemale, :#EntryCounterMale, :#LeaveCounterFemale, :#LeaveCounterMale)


   declare-variable
       date    $ENDDT_TER
   end-declare

   Move 0 to #Counter1Female
   Move 0 to #Counter1Male

   Move 0 to #EntryCounterFemale
   Move 0 to #EntryCounterMale
   Move 0 to #LeaveCounterFemale
   Move 0 to #LeaveCounterMale

   let $LastEmplid = ''
   let $LastAction = ''
   let $LastActionDt = ''

do Define-PrimJob-Clause('C', $ENDDT, $PRIM_JOB_CLAUSE)

   let $ENDDT_TER = strtodate($DTUENDDT,{DTUDateFormat})
   let $ENDDT_TER = dateadd($ENDDT_TER,'day',1)
   let $DTUENDDT_TER = datetostr($ENDDT_TER,{DTUDateFormat})
   do Convert-From-DTU-Date($DTUENDDT_TER, $NAT_ENDD_DT)

BEGIN-SELECT ON-ERROR=SQL-Error
B.EMPLID                                                 &Counter1.EMPLID
B.SEX                                                    &Counter1.SEX
{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX}                  &Counter1.EFFDT
C.EMPL_RCD                                               &Counter1.EMPL_RCD
C.ACTION                                                 &Counter1.ACTION
C.ACTION_REASON                                          &Counter1.ACTION_REASON

      do Convert-To-DTU-Date(&Counter1.EFFDT, $DTUEffDate)

      let $C1_EMPLID = &Counter1.EMPLID
      let #C1_EMPL_RCD = &Counter1.EMPL_RCD
      let $C1_EFFDT = &Counter1.EFFDT

      !Count workforce before period
      !-----------------------------
      if $DTUEffDate < $DTUSTARTDT
         if &Counter1.ACTION <> 'TER' AND &Counter1.ACTION <> 'RET' AND &Counter1.ACTION <> 'RWP' AND &Counter1.ACTION <> 'TWB' AND &Counter1.ACTION <> 'TWP' AND &Counter1.ACTION_REASON <> 'MIL'
            if &Counter1.SEX = 'F'
               Add 1 to #Counter1Female
            else
               if &Counter1.SEX = 'M'
                  Add 1 to #Counter1Male
               end-if
            end-if
         end-if
      end-if

      do dtu-add-days($DTUSTARTDT, 1, $DTUSTARTDT_TER)
      if $DTUEffDate = $DTUSTARTDT_TER
         if &Counter1.ACTION <> 'XFR' AND  &Counter1.ACTION <> 'HIR' AND &Counter1.ACTION <> 'REH'
            if &Counter1.SEX = 'F'
               Add 1 to #Counter1Female
            else
               if &Counter1.SEX = 'M'
                  Add 1 to #Counter1Male
               end-if
            end-if
         end-if
      end-if

      do dtu-add-days($DTUENDDT, 1, $DTUENDDT_TER)
      do Workforce-Moves($ReportID, $Step, $RegRegion, $COMPANY, $ESTABID, $DTUSTARTDT, $DTUENDDT, $DTUSTARTDT_TER, $DTUENDDT_TER, $NAT_ENDD_DT, $C1_EMPLID, #C1_EMPL_RCD, $C1_EFFDT,
 #EntryCounterFemale, #EntryCounterMale, #LeaveCounterFemale, #LeaveCounterMale)

FROM PS_PERSONAL_DT_FST B
,PS_JOB C
WHERE
C.EMPLID = B.EMPLID
AND C.EMPL_RCD = [$PRIM_JOB_CLAUSE]
AND C.EMPL_STATUS = 'A'                         ! Active
AND C.ESTABID = $ESTABID
AND C.COMPANY = $COMPANY
AND C.EMPL_CLASS NOT IN ('G', 'T')              ! No trainees, no temps
AND C.REG_TEMP <> 'T'                           ! No temps
AND C.EFFDT =
(
 SELECT MIN(C2.EFFDT)
 FROM PS_JOB C2
 WHERE C2.EMPLID = C.EMPLID
   AND C2.EMPL_RCD = C.EMPL_RCD
   AND C2.ESTABID = C.ESTABID
   AND C2.EMPL_STATUS = 'A'
   AND C2.EFFDT <= {DATEIN-PREFIX}$NAT_ENDD_DT{DATEIN-SUFFIX}
   AND
 (
  C2.EFFDT >=
  (
   SELECT MAX(C3.EFFDT)
   FROM PS_JOB C3
   WHERE C3.EMPLID = C2.EMPLID
     AND C3.EMPL_RCD = C2.EMPL_RCD
     AND C3.EFFDT < {DATEIN-PREFIX}$STARTDT{DATEIN-SUFFIX}
  )
  OR C2.EFFDT >= {DATEIN-PREFIX}$STARTDT{DATEIN-SUFFIX}
 )
)
AND C.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT = C.EFFDT
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
ORDER BY B.EMPLID, C.EFFDT ASC
END-SELECT

end-procedure Count-Workforce

!***********************************************************************
!  Retrieves Establishement Worforce Moves during the Period
!***********************************************************************

begin-procedure Workforce-Moves($ReportID, $Step, $RegRegion, $COMPANY, $ESTABID, $DTUSTARTDT, $DTUENDDT, $DTUSTARTDT_TER, $DTUENDDT_TER, $ENDDT_TER, $C1_EMPLID, #C1_EMPL_RCD, $C1_EFFDT,
 :#EntryCounterFemale, :#EntryCounterMale, :#LeaveCounterFemale, :#LeaveCounterMale)

BEGIN-SELECT ON-ERROR=SQL-Error
B.EMPLID                                                 &B.EMPLID
B.NAME                                                   &B.NAME
B.SEX                                                    &B.SEX
{DATEOUT-PREFIX}B.BIRTHDATE{DATEOUT-SUFFIX}              &B.BIRTHDATE
G.DESCR                                                  &G.DESCR
G.INSEE_CD_FRA                                           &G.INSEE_CD_FRA
{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX}                  &C.EFFDT
C.EMPL_RCD                               &C.EMPL_RCD
C.ACTION                                                 &C.ACTION
C.ACTION_REASON                                          &C.ACTION_REASON
C.ESTABID                                                &C.ESTABID
A.CONTRACT_TYPE                                          &A.CONTRACT_TYPE
G.SETID                                                  &G.SETID
G.JOBCODE                                                &G.JOBCODE
{DATEOUT-PREFIX}G.EFFDT{DATEOUT-SUFFIX}                  &G.EFFDT

   do Convert-To-DTU-Date(&C.EFFDT, $DTUEFFDT)

   let $C_EFFDT = &C.EFFDT
   let $C_ACTION= &C.ACTION
   let $A_CONTRACT_TYPE = &A.CONTRACT_TYPE

   ! Reinit variables
   !------------------

   let $ContractNature = ''
   let $TerminationReason = ''

   if $LastEmplid <> &B.EMPLID
      let $LastAction = ''
      let $LastActionDt = ''
      let $LastEstabId = ''
   end-if

   let $Name = &B.NAME
   let $JOBCODE_TBL-DESCR = &G.DESCR

   do Get_Related_JOBCODE_TBL(&G.EFFDT, &G.JOBCODE, &G.SETID)
   let $JobDescr = $JOBCODE_TBL-DESCR

      if $DTUEFFDT >= $DTUSTARTDT AND $DTUEFFDT <= $DTUENDDT AND &C.ACTION = 'XFR'
         if RTRIM(&C.ESTABID, ' ') = $ESTABID and $LastEstabId <> $ESTABID

            ! Count entries by transfert during period
            !-----------------------------------------
            if &B.SEX  = 'F'
               Add 1 to #EntryCounterFemale
            else
               if &B.SEX  = 'M'
                  Add 1 to #EntryCounterMale
               end-if
            end-if

            ! Print entry data
            !-----------------
            if $Step = {PRINT}
               do Format-DateTime(&C.EFFDT, $EntryDate, {DEFDMY},'','')
               do Print-Common-Info( &B.NAME , &B.BIRTHDATE , &B.EMPLID ,  &B.SEX , &G.INSEE_CD_FRA, $JobDescr)
               do Print-Entry-Info($C_EFFDT, $C_ACTION, $A_CONTRACT_TYPE)
            end-if

         end-if
      end-if


      if $DTUEFFDT >= $DTUSTARTDT_TER AND $DTUEFFDT <= $DTUENDDT_TER AND &C.ACTION = 'XFR'
         if RTRIM(&C.ESTABID, ' ') <> $ESTABID and $LastEstabId = $ESTABID         !Select transfert from the target establishment

            ! Count leaves by transfert during period
            !----------------------------------------
            if &B.SEX = 'F'
               Add 1 to #LeaveCounterFemale
            else
               if &B.SEX = 'M'
                  Add 1 to #LeaveCounterMale
               end-if
            end-if

            ! Print leave data
            !-----------------
            if $Step = {PRINT}
               do dtu-add-days($DTUEFFDT, -1, $DTULeaveDate)
               let $LeaveDate = strtodate($DTULeaveDate,{DTUDateFormat})
               do Format-DateTime($LeaveDate, $LeaveDate, {DEFDMY},'','')
               let $TerminationReason = 'TS'
               do Print-Common-Info( &B.NAME , &B.BIRTHDATE , &B.EMPLID ,  &B.SEX , &G.INSEE_CD_FRA, $JobDescr)
               
               do Get-And-Print-Hire-Date($ReportID, &B.EMPLID, &C.EMPL_RCD, $ENDDT_TER, $ESTABID, $COMPANY)
               do Print-Leave-Info($LeaveDate, $TerminationReason)

            end-if

         end-if
      end-if


      if $DTUEFFDT >= $DTUSTARTDT AND $DTUEFFDT <= $DTUENDDT AND RTRIM(&C.ESTABID, ' ') = $ESTABID
         if &C.ACTION = 'HIR' OR &C.ACTION = 'REH'
            let $ThisAction = {ENTRY}

            ! Count entries during period
            !----------------------------
            if &B.SEX = 'F'
               Add 1 to #EntryCounterFemale
            else
               if &B.SEX = 'M'
                  Add 1 to #EntryCounterMale
               end-if
            end-if

            ! Print entry data
            !-----------------
            if $Step = {PRINT}
               do Print-Common-Info( &B.NAME , &B.BIRTHDATE , &B.EMPLID, &B.SEX , &G.INSEE_CD_FRA, $JobDescr)
               do Print-Entry-Info($C_EFFDT, $C_ACTION, $A_CONTRACT_TYPE)
            end-if

         end-if
      end-if


      if $DTUEFFDT >= $DTUSTARTDT_TER AND $DTUEFFDT <= $DTUENDDT_TER AND RTRIM(&C.ESTABID, ' ') = $ESTABID
         if &C.ACTION = 'TER' OR &C.ACTION = 'RET' OR &C.ACTION = 'RWP' OR &C.ACTION = 'TWB' OR &C.ACTION = 'TWP' OR &C.ACTION_REASON = 'MIL'

            let $ThisAction = {LEAVE}
            if $LastEmplid <> &B.EMPLID
               if $LastAction = {LEAVE}
                  if $Step = {PRINT}
                     print 'Error two Leaves for the same EMPLID detected' (+5,10)
                  end-if
               end-if
            end-if

            ! Count leaves during period
            !---------------------------
            if &B.SEX = 'F'
               Add 1 to #LeaveCounterFemale
            else
               if &B.SEX = 'M'
                  Add 1 to #LeaveCounterMale
               end-if
            end-if

            ! Print leave data
            !-----------------
            if $Step = {PRINT}
               if not IsNull(&C.EFFDT)
                  do dtu-add-days($DTUEFFDT, -1, $DTULeaveDate)
                  let $LeaveDate = strtodate($DTULeaveDate,{DTUDateFormat})
                  do Format-DateTime($LeaveDate, $LeaveDate, {DEFDMY},'','')
               end-if
               do Get-Termination-Reason(&C.ACTION, &C.ACTION_REASON, $TerminationReason)
               do Print-Common-Info( &B.NAME , &B.BIRTHDATE , &B.EMPLID , &B.SEX , &G.INSEE_CD_FRA, $JobDescr)
               
               do Get-And-Print-Hire-Date($ReportID, &B.EMPLID, &C.EMPL_RCD, $ENDDT_TER, $ESTABID, $COMPANY)
               do Print-Leave-Info($LeaveDate, $TerminationReason)
            end-if

         end-if
      end-if

      let $LastAction = $ThisAction
      let $LastEmplid = &B.EMPLID
      let $LastActionDt = &C.EFFDT
      let $LastEstabId = RTRIM(&C.ESTABID, ' ')

FROM
PS_CNT_ACTIVE_VW A
,PS_PERSONAL_DT_FST B
,PS_JOB C
,PS_JOBCODE_TBL G
,PS_REG_REGION_TBL R
WHERE
A.EMPLID = $C1_EMPLID
AND B.EMPLID = A.EMPLID
AND C.EMPLID = B.EMPLID
AND C.EMPL_RCD = #C1_EMPL_RCD
AND R.COUNTRY = $RegRegion                      ! RegRegion
AND C.EMPL_CLASS NOT IN ('G', 'T')              ! No trainees, no temps
AND C.REG_TEMP <> 'T'                           ! No temps
AND G.JOBCODE = C.JOBCODE
AND G.SETID = C.SETID_JOBCODE
AND A.CONTRACT_TYPE in
(
 SELECT GRP.CONTRACT_TYPE
 FROM PS_CNTRCT_TYPE_DEF DEF, PS_CNTRCT_TYPE_GRP GRP
 WHERE DEF.GROUP_NAME = $ReportID
   AND GRP.GROUP_NAME = DEF.GROUP_NAME
   AND GRP.EFFDT = DEF.EFFDT
   AND GRP.SETID = R.REG_REGION
   AND DEF.EFFDT =
 (
  SELECT MAX(EFFDT)
  FROM PS_CNTRCT_TYPE_DEF DEF1
  WHERE DEF1.GROUP_NAME = DEF.GROUP_NAME
    AND DEF1.EFFDT <= C.EFFDT
 )
)
AND A.CONTRACT_NUM = C.CONTRACT_NUM
AND C.EFFDT >= {DATEIN-PREFIX}$C1_EFFDT{DATEIN-SUFFIX}
AND C.EFFDT <= {DATEIN-PREFIX}$ENDDT_TER{DATEIN-SUFFIX}
AND G.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOBCODE_TBL
 WHERE EFFDT <= {DATEIN-PREFIX}$C1_EFFDT{DATEIN-SUFFIX}                 ! EndPeriod
 AND JOBCODE = G.JOBCODE
 AND SETID = G.SETID
)
AND G.EFF_STATUS = 'A'
AND A.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_CNT_ACTIVE_VW
 WHERE EFFDT <= {DATEIN-PREFIX}$ENDDT_TER{DATEIN-SUFFIX}
 AND CONTRACT_NUM = A.CONTRACT_NUM
 AND EMPLID = A.EMPLID
)
ORDER BY B.EMPLID, C.EFFDT ASC
END-SELECT

end-procedure Workforce-Moves


!***********************************************************************
!  Prints common information
!***********************************************************************

begin-procedure Print-Common-Info($Name, $Birthdate, $Emplid, $Sex, $Insee-Cd-Fra, $JobDescr)

   do Get-Year($Birthdate, #BirthYear)
   do Citizenship-Retrieve($Emplid, $_ENDDT, $CitizenshipCode, $Country)

   print $Name               (+1,{C01},51)
   print $CitizenshipCode    (,{C02},12)
   print #BirthYear          (,{C03},10) EDIT 9999
   print $Sex                (,{C04},5)
   print $JobDescr           (,{C05},31)
   print $Insee-Cd-Fra       (,{C06},5)

end-procedure Print-Common-Info


!***********************************************************************
!  Prints Entry Info
!***********************************************************************

begin-procedure Print-Entry-Info($C_EFFDT, $C_ACTION, $A_CONTRACT_TYPE)

   if not IsNull($C_EFFDT)
      do Format-DateTime($C_EFFDT, $EntryDate, {DEFDMY},'','')
   end-if
   do Get-Contract-Nature($C_ACTION, $A_CONTRACT_TYPE, $ContractNature)

   print $EntryDate          (,{C07},11)
   print $ContractNature     (,{C08},8)

end-procedure Print-Entry-Info


!***********************************************************************
!  Prints Leave Info
!***********************************************************************

begin-procedure Print-Leave-Info($LeaveDate, $TerminationReason)

   print $LeaveDate              (,{C09},11)
   print $TerminationReason      (,{C10})

end-procedure Print-Leave-Info


!***********************************************************************
!  Count Number of Agency/Temp
!***********************************************************************

begin-procedure Agency-Temps-Retrieve

  let #AgencyTempsCounts = 0
BEGIN-SELECT ON-ERROR=SQL-Error
COUNT(*)                   &AgencyTempsCount
  let #AgencyTempsCounts = &AgencyTempsCount
FROM
PS_JOB C
,PS_REG_REGION_TBL R
WHERE
C.EMPL_CLASS = 'G'                     ! Agency/Temp
AND C.REG_TEMP <> 'R'                  ! No Regulars
AND C.COMPANY = $COMPANY
AND C.ESTABID = $ESTABID
AND C.EMPL_RCD =
(
 SELECT MIN(EMPL_RCD)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
)
AND C.REG_REGION = R.REG_REGION
AND R.COUNTRY = $RegRegion             ! RegRegion
AND C.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOB
 WHERE EFFDT >= {DATEIN-PREFIX}$STARTDT{DATEIN-SUFFIX}
 AND EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
AND C.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT = C.EFFDT
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
END-SELECT
   print $AGENCY_COUNT_LBL (+2,1)
   print #AgencyTempsCount  (,+2)    EDIT 99999

end-procedure Agency-Temps-Retrieve


!***********************************************************************
!  Retrieves Citizenship of an Employee
!***********************************************************************

begin-procedure Citizenship-Retrieve($Emplid, $DateSearch, :$CitizenshipCode, :$Country)

let $CitizenshipCode = 'A'    ! Other Nationality

BEGIN-SELECT ON-ERROR=SQL-Error
Z.COUNTRY               &Z.COUNTRY
Z.CITIZENSHIP_STATUS    &Z.CITIZENSHIP_STATUS

   let $Country_tmp = &Z.COUNTRY
   let $Citizenship_status = &Z.CITIZENSHIP_STATUS

   if  $Country_tmp = 'FRA' and ($Citizenship_status = '1' or $Citizenship_status = '5' or $Citizenship_status = '')
      let $CitizenshipCode = 'F'       ! French citizenship
      let $Country = $Country_tmp
   end-if

   if  $Country_tmp <> 'FRA' and $CitizenshipCode <> 'F'
      do Citizenship-Convert($Country_tmp, $DateSearch, $CitizenshipCode)
      let $Country = $Country_tmp
   end-if

FROM
PS_CITIZENSHIP Z
WHERE Z.EMPLID = $Emplid
END-SELECT

end-procedure Citizenship-Retrieve


!***********************************************************************
!  Determines Normalized Termination Reason of an Employee
!***********************************************************************

begin-procedure Get-Termination-Reason($Action, $ActionReason, :$TerminationReason)

let $TerminationReason = ''
   evaluate $Action
      When = 'XFR'
         let $TerminationReason = 'TS'
         break
      When = 'RET'
         let $TerminationReason = 'RT'
         break
      When = 'RWP'
         let $TerminationReason = 'RT'
         break
      When = 'TWB'
         let $TerminationReason = 'RT'
         break
      When = 'TWP'
         let $TerminationReason = 'RT'
         break
      When = 'TER'
         let $TerminationReason = 'LA'
         evaluate $ActionReason
            When = 'ATC'
               let $TerminationReason = 'AU'
               break
            When = 'ATT'
               let $TerminationReason = 'DM'
               break
            When = 'CDE'
               let $TerminationReason = 'LE'
               break
            When = 'CHI'
               let $TerminationReason = 'DM'
               break
            When = 'DEA'
               let $TerminationReason = 'AU'
               break
            When = 'EAB'
               let $TerminationReason = 'AU'
               break
            When = 'EAC'
               let $TerminationReason = 'FD'
               break
            When = 'EFT'
               let $TerminationReason = 'FD'
               break
            When = 'ELI'
               let $TerminationReason = 'LE'
               break
            When = 'EOD'
               let $TerminationReason = 'FD'
               break
            When = 'EPP'
               let $TerminationReason = 'ES'
               break
            When = 'ERT'
               let $TerminationReason = 'RT'
               break
            When = 'FAM'
               let $TerminationReason = 'DM'
               break
            When = 'HEA'
               let $TerminationReason = 'AU'
               break
            When = 'HRS'
               let $TerminationReason = 'DM'
               break
            When = 'ILL'
               let $TerminationReason = 'DM'
               break
            When = 'LOC'
               let $TerminationReason = 'DM'
               break
            When = 'LTC'
               let $TerminationReason = 'AU'
               break
            When = 'MAR'
               let $TerminationReason = 'DM'
               break
            When = 'OTP'
               let $TerminationReason = 'DM'
               break
            When = 'PAB'
               let $TerminationReason = 'AU'
               break
            When = 'PAY'
               let $TerminationReason = 'DM'
               break
            When = 'PCD'
               let $TerminationReason = 'LE'
               break
            When = 'PER'
               let $TerminationReason = 'DM'
               break
            When = 'POL'
               let $TerminationReason = 'DM'
               break
            When = 'PPO'
               let $TerminationReason = 'RT'
               break
            When = 'PPP'
               let $TerminationReason = 'ES'
               break
            When = 'PRM'
               let $TerminationReason = 'DM'
               break
            When = 'PTD'
               let $TerminationReason = 'AU'
               break
            When = 'RAT'
               let $TerminationReason = ' '
               break
            When = 'RED'
               let $TerminationReason = 'LE'
               break
            When = 'REL'
               let $TerminationReason = 'LE'
               break
            When = 'RES'
               let $TerminationReason = 'DM'
               break
            When = 'RET'
               let $TerminationReason = 'DM'
               break
            When = 'RLS'
               let $TerminationReason = 'FD'
               break
            When = 'RWU'
               let $TerminationReason = 'LE'
               break
            When = 'SUP'
               let $TerminationReason = 'DM'
               break
            When = 'TMP'
               let $TerminationReason = 'FD'
               break
            When = 'TRA'
               let $TerminationReason = 'DM'
               break
            When = 'TYP'
               let $TerminationReason = 'DM'
               break
            When = 'UFC'
               let $TerminationReason = 'LE'
               break
            When = 'WOR'
               let $TerminationReason = 'DM'
               break
      end-evaluate
   end-evaluate

end-procedure Get-Termination-Reason

!***********************************************************************
!  Determines Normalized Contract Nature of an Employee
!***********************************************************************

begin-procedure Get-Contract-Nature($Action, $ContractType, :$ContractNature)

let $ContractNature = ''

if $Action = 'XFR'
   let $ContractNature = 'TE'
else
   if $Action = 'HIR' OR $Action = 'REH'
      evaluate $ContractType
         When = 'ACE'
            let $ContractNature = 'RI'
            break
         When = 'ADA'
            let $ContractNature = 'RD'
            break
         When = 'ADD'
            let $ContractNature = 'RD'
            break
         When = 'APP'
            let $ContractNature = 'RD'
            break
         When = 'CDD'
            let $ContractNature = 'RD'
            break
         When = 'CDI'
            let $ContractNature = 'RI'
            break
         When = 'IND'
            let $ContractNature = 'RD'
            break
         When = 'INE'
            let $ContractNature = 'RD'
            break
         When = 'LOC'
            let $ContractNature = 'RI'
            break
         When = 'ORI'
            let $ContractNature = 'RD'
            break
         When = 'QUA'
            let $ContractNature = 'RD'
            break
         When = 'REC'
            let $ContractNature = 'RD'
            break
         When = 'SAI'
            let $ContractNature = 'RD'
            break
         When = 'SOC'
            let $ContractNature = 'RD'
            break
         When = 'SOL'
            let $ContractNature = 'RD'
            break
         When-Other
            break
      end-evaluate
   end-if
end-if

end-procedure Get-Contract-Nature($Action, $ContractType, $ContractNature)

!***********************************************************************
!  Retrieves Normalized Citizenship of an Employee
!***********************************************************************

begin-procedure Citizenship-Convert($Country, $DateSearch, :$CitizenshipCode)

BEGIN-SELECT ON-ERROR=SQL-Error
Y.COUNTRY   &Y.COUNTRY

   let $CitizenshipCode = 'C'    ! EEC Nationality

FROM PS_COUNTRY_GRP Y,
PS_COUNTRY_DEF YY
WHERE YY.GROUP_NAME = Y.GROUP_NAME
AND Y.COUNTRY = $Country
AND Y.GROUP_NAME = {EEC}
AND YY.EFFDT = Y.EFFDT
AND YY.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_COUNTRY_DEF
 WHERE EFFDT <= {DATEIN-PREFIX}$DateSearch{DATEIN-SUFFIX}
 AND GROUP_NAME = YY.GROUP_NAME
)
AND YY.EFF_STATUS = 'A'
END-SELECT

end-procedure  Citizenship-Convert

!***********************************************************************
!  Utilities
!***********************************************************************

!***********************************************************************
!  Get the year of a date
!***********************************************************************

begin-procedure Get-Year($DateIn, :#Year)

move 0 to #Year
   if not IsNull($DateIn)
      do Convert-To-DTU-Date($DateIn, $DTUDateIn)
          do dtu-parse-date($DTUDateIn, #Year, #unused, #unused)
!      do Get-DateComponents($DTUDateIn, #Year, #unused, #unused)
   end-if
end-procedure Get-Year($DateIn, :#Year)

!***********************************************************************
!  Gets the actions for selects in this report
!***********************************************************************


begin-procedure get-action-grp

   move '''' to $ActionString

BEGIN-SELECT

A.ACTION 

    move &A.ACTION to $Action
    do Build-action-string
FROM
PS_ACTION_DTL_FRA A
WHERE GROUP_ID = 'REG01'
END-SELECT
   
   concat '''' with $ActionString

   


end-procedure get-action-grp

begin-procedure Build-action-string
  if $ActionString  <> ''''
    concat ''',''' with $ActionString
  end-if
  concat $Action with $ActionString

end-procedure

#include 'hrctlfra.sqc'  !Get run control parameter values
#include 'hrgetfra.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'
#Include 'getprimj.sqc'  !Routines for selecting EE's primary job
