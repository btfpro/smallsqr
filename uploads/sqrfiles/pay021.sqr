!******************************************************************
!  PAY021: Employer Benefit Contributions/Deductions    *
!******************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:31:52                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY021' to $ReportID
  move 'Employer Benefit Contributions/Deductions' to $ReportTitle
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Calendar-Year-Id
  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

begin-procedure Array-Initialization
  create-array name=Totals size=6 -
    field=TotalName:char field=total:number:5
  put 'Grand Total'      into Totals(1) TotalName
  put 'Company Total'    into Totals(2) TotalName
  put 'Pay Period Total' into Totals(3) TotalName
  put 'Pay Group Total'  into Totals(4) TotalName
  put 'Deduction Total'  into Totals(5) TotalName
end-procedure

begin-heading 12
  #Include 'stdhdgpi.sqc'
  #Include 'stdhdg06.sqc'
  do Get-Deduction-Name
  move 'PLAN_TYPE' to $FieldName
  move $PlanType   to $FieldValue
  do Read-Translate-Table

  print 'Deduction'      (+2,1)
  print $DedCd           (0,13)
  print $DeductionName   (0,20)
  print 'Type'           (+1,1)
  print $PlanType        (0,13)
  print $XlatLongName    (0,20)
  print 'Current      Current     Calculated           '        (+2,45)
  print '       Month       Quarter       Year             '    ()
  print 'Employee ID  Name'                                     (+1,1)
  print 'Taxable     NonTaxable  Benefit Base          '        (0,45)
  print '      To-Date      To-Date      To-Date            '   ()
end-heading

begin-procedure Report
begin-SELECT
A.COMPANY      () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT   () on-break print=never level=2 procedure=PayEndDate-Change
A.PAYGROUP     () on-break print=never level=3 procedure=PayGroup-Change
C.PLAN_TYPE    () on-break print=never level=4 procedure=Deduction-Change
C.DEDCD        () on-break print=never level=4 procedure=Deduction-Change
B.EMPLID

  if &B.EmplID = $Prev_EmplID           ! keep non taxable and taxable
    print &B.EmplID          (+1,1)     ! on same page
  else
    NEXT-LISTING NEED = 2
    print &B.EmplID          (1,1)
    move &B.EmplID to $Prev_EmplID
  end-if

A.CHECK_DT
A1.BALANCE_PERIOD,
C.OFF_CYCLE,
C.DED_CLASS
C.DED_SLSTX_CLASS
B.EMPL_RCD
B.NAME            (0,14,20)

#ifdef DB2ALL
DECIMAL(SUM(C.DED_CUR),15,3)              &C.Ded_cur
DECIMAL(SUM(C.CALCULATED_BASE),15,3)      &C.Calculated_base
#else
SUM(C.DED_CUR)           &C.Ded_cur
SUM(C.CALCULATED_BASE)   &C.Calculated_base
#endif

  do Format-Number(&C.Ded_Cur, $Ded_Cur, '99,999,999.99mi')

  evaluate &C.Ded_Class
    when = 'T'
      print $Ded_Cur   (0,39)

      ARRAY-ADD &C.Ded_Cur to TOTALS(5) TOTAL(0)

    when = 'N'
    when = 'P'
      print $Ded_Cur   (0,53)

      ARRAY-ADD &C.Ded_Cur to TOTALS(5) TOTAL(1)

  end-evaluate

  if &C.Off_Cycle = 'Y'
    print '*'     (0,35)
  end-if

  do Format-Number(&C.Calculated_Base, $out, 'B9,999,999.99')
  print $out   (0,67)

  move &A.Company       to $Company
  move &A.PayGroup      to $PayGroup
  move &A.Pay_End_Dt  to $PayEndDate
  move &A.Check_Dt      to $AsOfDate  !for included procedures
  do Get-Date-Codes                   !for Get-Deduction-Balances
  move &B.EmplID        to $EmplID
  move &C.Plan_Type     to $PlanType
  move &C.DedCd         to $DedCd
  move &C.Ded_Class     to $DedClass
  move &C.Ded_SlsTx_Class to $DedSlsTxClass
  do Get-PayGroup-Data
  move $PayGroupCountry to $Country
  do Get-Deduction-Balances
  do Format-Number(#DedMTD, $out, 'B9,999,999.99mi')
  print $out   (0,91)
  do Format-Number(#DedQTD, $out, 'B9,999,999.99mi')
  print $out   (0,104)
  do Format-Number(#DedYTD, $out, 'B9,999,999.99mi')
  print $out   (0,117)
  ARRAY-ADD #DedMTD #DedQTD #DedYTD  to TOTALS(5) TOTAL(2) -
                                                  TOTAL(3) -
                                                  TOTAL(4)

  move 0  to  #DedMTD
  move 0  to  #DedQTD
  move 0  to  #DedYTD

FROM  PS_PAY_CALENDAR   A, PS_PAY_CAL_BAL_ID A1,
      PS_PAY_CHECK      B,
      PS_PAY_DEDUCTION  C
WHERE [$SlctCalendar]
  AND A.COMPANY = A1.COMPANY AND A.PAYGROUP = A1.PAYGROUP
  AND A.PAY_END_DT = A1.PAY_END_DT AND A1.BALANCE_ID = $Calendar_Year_Id
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = B.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND C.COMPANY    = A.COMPANY
  AND C.PAYGROUP   = B.PAYGROUP
  AND C.PAY_END_DT = B.PAY_END_DT
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.SEPCHK     = B.SEPCHK
  AND C.DED_CLASS  > 'K'
GROUP BY A.COMPANY,A.PAY_END_DT,A.PAYGROUP,C.PLAN_TYPE,
         C.DEDCD,B.NAME,B.EMPLID,A.CHECK_DT,A1.BALANCE_PERIOD,C.OFF_CYCLE,C.DED_CLASS,C.DED_SLSTX_CLASS,B.EMPL_RCD
ORDER BY A.COMPANY,A.PAY_END_DT,A.PAYGROUP,C.PLAN_TYPE,
         C.DEDCD,B.NAME,B.EMPLID
end-SELECT
  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals
end-procedure


begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Deduction-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Print-Totals
  move 5 to #totalRow

  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,14)
    move 39 to #startCol
    move 0 to #i

    while #i <= 4
      get #total from Totals(#totalRow) total(#i)
      do Format-Number(#total, $out, '99,999,999.99mi')
      print $out (0,#startCol)
      evaluate #i
          when = 0
            add 14 to #startCol
          when = 1
            add 38 to #startCol
          when > 1
            add 13 to #startCol
      end-evaluate
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    do Reset
  end-if

  new-page
end-procedure


begin-procedure Reset
  move 'Y' to $End_of_Report
  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if
end-procedure

begin-footing 2
  print 'Note - an * indicates off cycle ' (+0,1)

  if $End_of_Report = 'Y'
    print 'End of Report' (+1,1) center
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if
end-footing


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getdedbl.sqc'  !Get-Deduction-Balances procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
