!***********************************************************************
!  TAX810MO:  Qtrly Wage List - Tape - MISSOURI                        *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:06:43:31                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, one or more'
    display 'files will have been created, as follows: '
    display '{IMPORTPREFIX}TAX810MO{IMPORTSUFFIX} '
    display 'This file contains 72-char records in the format required'
    display 'for cartridge reporting of quarterly wages to the '
    display 'Missouri Division of Employment Security (MODES).'
    display ''
    display '     or '
    display ''
    display '  TAX810MO.nnn  where "nnn" represents a volume number '
    display 'This file contains 72-char records in the format required'
    display 'for diskette (5 1/4 or 3 1/2 in) reporting of quarterly wages '
    display 'to the Missouri Division of Employment Security (MODES).'
    display ''
    display 'Follow directions provided in the MODES ''Reporting'
    display 'Quarterly Contributions and Wage Data on Magnetic Media'''
    display 'for details on submission of cartridges or diskettes.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810MO' to $ReportID

 if $FileType = 'D'
  move 'Missouri Quarterly UI Wage Report - Diskette' to $ReportTitle
  display ''
  display 'Creating Diskette File for Missouri UI Wage Reporting'
 else
  move 'Missouri Quarterly UI Wage Report - Cartridge' to $ReportTitle
  display ''
  display 'Creating Cartridge File for Missouri UI Wage Reporting'
 end-if
end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'MO'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09
  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($QtrBeginDate,$QtrBeginDate,{DEFYMD},'','native')

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 72 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Ask-Values
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
end-procedure

begin-procedure Open-File

if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810MO' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810MO.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=72:fixed

else
  open '{IMPORTPREFIX}TAX810MO{IMPORTSUFFIX}' as 10 for-writing record=72:fixed

end-if
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY

  move &A.Company to $Company

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
C.EMPLID
C.TXGRS_QTD
C.NLGRS_QTD

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'MO'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  if $ReportProbationary = 'Y'
    do Check-Probationary
  else
    move '00' to $ProbationaryCode
    move '0' to $ProbCode
    move ''   to $SeparationDate
    move ''   to $SepDate
  end-if

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD


  let #max_amt_NLG = 999999999
  let #NLGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  add 1 to #Count_T
  let $done1 = 'N'

while $done1 <> 'Y'
  do split-s-record (#NLGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999')
  do write-s-record
  add 1 to #Count_R
end-while



end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  do Get-State-Tax-Data             !Employer ID
  move &Employer_ID_SUT to $StateEIN

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),10)
    end-if
  end-while
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),10)
    end-if
  end-while
end-procedure

begin-procedure After-Company
  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Count_S to #Count_F
    add #Count_R to #Count_R_Total

    move 0 to #Co_NlGrs_QTD
    move 0 to #Count_S
    move 0 to #Count_R
    new-page
  end-if
end-procedure

begin-procedure Write-S-Record

  if $FileType = 'D'
    if #RecordCount >= #MaxRecordsPerDiskette
       do Open-File
    end-if
  end-if

  if $NATIONAL_ID = 'I        '
    move '000000000' to $NATIONAL_ID
  end-if

  write 10 from '4':1
       $NATIONAL_ID:9
          $StateEIN:15
    &TX.Balance_Qtr:1
           $RptYear:2
         $FirstName:9
          $LastName:16
         $NlGrs_QTD:9
          $ProbCode:1
           $SepDate:6
              '000':3

  add 1 to #RecordCount

  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move 'Y' to $RecordWritten
end-procedure


begin-procedure Check-Probationary
  move '00' to $ProbationaryCode
  move '0' to $ProbCode
  move ''   to $SeparationDate
  move ''   to $SepDate
begin-SELECT
B.EFFDT
E.HIRE_DT

  do Convert-To-DTU-Date(&B.EffDt,   $EffDtTmp)
  do Convert-To-DTU-Date(&E.Hire_Dt, $HireDtTmp)
  do DTU-Diff-Days($HireDtTmp, $EffDtTmp, #Service)

  if #Service <= 28
    move '01' to $ProbationaryCode
    move '' to $DDelimiter
    Let $Year4_tmp = $Year4
    Let $Year4 = '0'
    do Format-DateTime(&B.EffDt, $SeparationDate, {DEFMDY}, '', '')
    let $SepDate = $SeparationDate
    let $SeparationDate = SUBSTR($SeparationDate,1,2) ||
                          SUBSTR($SEPARATIONDATE,5,2)
    Let $Year4 = $Year4_tmp
  end-if

  if $ProbationaryCode = '01'
     move '1' to $ProbCode
  end-if

FROM  PS_JOB B, PS_EMPLOYMENT E
WHERE B.COMPANY    = &A.Company
  AND B.EMPLID     = &C.EmplID
  AND B.EMPLID     = E.EMPLID
  AND B.EMPL_RCD   = E.EMPL_RCD
  AND B.ACTION  = 'TER'
  AND B.EFFDT >= $QtrBeginDate
  AND B.EFFDT <= $PeriodEndDate
end-SELECT
end-procedure

begin-procedure Ask-Values
  while INSTR('YNQ',$ReportProbationary,1) = 0
    input $ReportProbationary 'Report Probationary Employees? Enter Y/N or Q (to quit)'
    uppercase $ReportProbationary
  end-while

  if $ReportProbationary = 'Q'
    stop
  end-if
end-procedure

begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Cartridge or Diskette file? (C, D or Q to quit)'
    uppercase $FileType
    if INSTR('DCQ',$FileType,1) = 0
      display ' '
      display '***** Enter D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
  move $RC_QTR_UI.Report_Probatnary to $ReportProbationary
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'txovrflw.sqc'  !Split-S-Record
