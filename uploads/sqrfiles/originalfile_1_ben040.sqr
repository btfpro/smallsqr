!*********************************
! BEN040: Billing Statements
!*********************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/02:10:32:08                        
!       $Release:  HR9                                        
!      $Revision:  106                                        
!                                                                      *
!***********************************************************************


#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'setupdb.sqc'

  Declare-Printer THIS_REPORT
      Type=HPLASERJET
      Font=5
      Point-Size=12
      Pitch=17
      Symbol-Set=0U     ! ASCII symbol set
  End-Declare

  Declare-Layout THIS_REPORT
      Orientation=Portrait
      Top-Margin= .4
      Left-Margin=.60
      Max-Lines=63
      Max-Columns=130
      Char-Width=7.2
      Line-Height=12     ! 72/printer_point-size
  End-Declare

  Declare-Report THIS_REPORT
      Printer-Type=HPLASERJET
      LayOut=THIS_REPORT
  End-Declare

End-Setup


!Column Position
#define col00                1
#define col10               10
#define col20               20
#define col30               30
#define col40               40
#define col50               50
#define col60               60
#define col68               68

#define hdr1                 2
#define hdr1a                3
#define hdr1b                6
#define hdr2                11
#define hdr3                16
#define hdr4                22
#define hdr5                29
#define hdr6                48
#define hdr7                58
#define hdr8                65

#define rep1                 1
#define rep2                 9
#define rep3                16
#define rep4                22
#define rep5                29
#define rep6                48
#define rep7                57
#define rep8                65

!Page Parameter
#define Num_Per_Page       16       !Number of detail+1 that can fit on each
                                    !page--before automatic page break
#define Start_Row           2
#define Total_Line         29       !Begin Total line for employees
#define Comment_Line       40       !Start of general comments
#define Start_Footer       49       !Begin Footer line for each page

!Edit Mask
#define amt_mask            99,999.99MI
#define tot_mask            $99,999.99

!Printer
#define Laser Postscript

!Line
#define horz_line_ln  80
#define norm_lnsize   10

!Point Size
#define SMALL           '8'     !Small
#define NORM            '10'    !Normal
#define BIG             '14'    !Large
#define NORM_LNSIZE     '10'    !Normal Line
#define BIG_LNSIZE      '20'    !Large Line


!*************************************
Begin-Program
!*************************************

  Do Init-Report

  Display 'Report Begin at ' noline
  Do Display-time

  Do Main-Report

  Display 'Report Ended at ' noline
  Do Display-time

  If #Empl_Cnt = 0
    Display '**** NO BILLING STATEMENTS PRINTED ****'
  End-if

  Do StdAPI-Term

End-Program


!***************************
Begin-Procedure Init-Report
!***************************

 
  Do Init-Datetime
  Do Init-Number
  Do Get-Current-DateTime
  Move 0 to #Empl_Cnt            !Number of confirmation forms processed

  Display ''
  Display 'BEN040: Billing Statements'

  Do StdAPI-Init

  Let $ReportID = 'BEN040'
  do Get-Report-Language

  If $prcs_process_instance = ''
    Do Ask-Values
  Else
    Do Get-Values
  End-if

  Do Format-DateTime($AsOfDate, $CompAsOf, {DEFCMP}, '', '')
  Do Format-DateTime($AsOfDate, $PrintAsOf, {DEFDATE}, '', '')

  Let $High_Date = '20991231'
  Do Format-DateTime($High_Date, $High_Date, {DEFCMP}, '', 'native')

End-Procedure


!**************************
Begin-Procedure Ask-Values
!**************************

  Do Ask-Calendar-Cd
  Do Ask-As-Of-Date
  Do Ask-Reprint-Prompt

End-Procedure

!**********************************
! This procedure is used to read language-dependent text from the database.
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN040 program ids
  do Init_Report_Translation($ReportID, $curr_language_cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN040', 'RPT_ID1',          $BEN040-RPT-ID1,     #CW)
  do Get_Field_Information ('BEN040', 'RPT_ID2',          $BEN040-RPT-ID2,     #CW)
  do Get_Field_Information ('BEN040', 'BEG_BAL',          $BEN040-BEG-Bal,     #CD)
  do Get_Field_Information ('BEN040', 'NEW_ACTY',         $BEN040-NEW-ACTY,    #CW)
  do Get_Field_Information ('BEN040', 'END_BAL',          $BEN040-END-BAL,     #CW)
  do Get_Field_Information ('BEN040', 'TEXT01',           $BEN040-TEXT01,      #CW)
  do Get_Field_Information ('BEN040', 'PER_END',          $BEN040-PER-END,     #CW)
  do Get_Field_Information ('BEN040', 'ACTY_DT',          $BEN040-ACTY-DT,     #CW)
  do Get_Field_Information ('BEN040', 'CHG_ADJ',          $BEN040-CHG-ADJ,     #CW)
  do Get_Field_Information ('BEN040', 'PAY_ADJ',          $BEN040-PAY-ADJ,     #CW)
  do Get_Field_Information ('BEN040', 'DONOT',            $BEN040-DONOT,       #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE_ID',      $BEN1-EMPLOYEE-ID,   #CW)
  do Get_Field_Information ('BEN1',   'EMPLOYEE_ID2',     $BEN1-EMPLOYEE-ID2,  #CW)
  do Get_Field_Information ('BEN1',   'PAGE',             $BEN1-PAGE,          #CW)
  do Get_Field_Information ('BEN1',   'NAME2',            $BEN1-NAME2,         #CW)
  do Get_Field_Information ('BEN1',   'PLAN',             $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',   'FROM',             $BEN1-FROM,          #CW)
  do Get_Field_Information ('BEN1',   'TO',               $BEN1-TO,            #CW)
  do Get_Field_Information ('BEN1',   'TYPE',             $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'DATE',             $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'AMT',              $BEN1-AMT,           #CW)
  do Get_Field_Information ('BEN1',   'BEN_PLAN',         $BEN1-BEN-PLAN,      #CW)
  do Get_Field_Information ('BEN1',   'COVERAGE',         $BEN1-COVERAGE,      #CW)
  do Get_Field_Information ('BEN1',   'DUE',              $BEN1-DUE,           #CW)
  do Get_Field_Information ('BEN1',   'ACTY',             $BEN1-ACTY,          #CW)
  do Get_Field_Information ('BEN1',   'PERIOD',           $BEN1-PERIOD,        #CW)
  do Get_Field_Information ('BEN1',   'CONT_NEXT_PAGE',   $BEN1-CONT-NEXT-PAGE,#CW)
  do Get_Field_Information ('BEN1',   'TOT_CRDT',         $BEN1-TOT-CRDT,      #CW)
  do Get_Field_Information ('BEN1',   'TOT_DUE',          $BEN1-TOT-DUE,       #CW)
  do Get_Field_Information ('BEN1',   'TOT_OVERDUE',      $BEN1-TOT-OVERDUE,   #CW)
  do Get_Field_Information ('BEN1',   'AMT_DUE',          $BEN1-AMT-DUE,       #CW)
  do Get_Field_Information ('BEN1',   'PAYMENT',          $BEN1-PAYMENT,       #CW)
  do Get_Field_Information ('BEN1',   'CHARGE',           $BEN1-CHARGE,        #CW)

End-Procedure

!**************************
Begin-Procedure Get-Values
!**************************

  Do Select-Parameters
  Do Get-Calendar-Cd
  Do Get-As-Of-Date
  Do Get-Reprint-Prompt

End-Procedure


!**********************************
Begin-Procedure Ask-Reprint-Prompt
!**********************************

  Let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    Let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  If ($Reprint = 'Y')
    Do Ask-Reprint-Id
  End-if

End-Procedure


!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  Let $Reprint_Match = 'N'
  Input $Reprint_Id 'Enter Reprint Id'
  Let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And ($Reprint_Id <> '')
    Do Validate-Reprint-Id
    If ($Reprint_Match = 'N')
      Input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      Let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    End-if
  End-While

End-Procedure


!***********************************
Begin-Procedure Validate-Reprint-Id
!***********************************

  Let $Reprint_Match = 'N'

Begin-Select
PRINT_ID

    Let $Reprint_Match = 'Y'

From  PS_BEN_BI_PRNT
Where PRINT_ID = $Reprint_Id
And   BILL_PER_CD = $Bill_Per_Cd
End-Select

End-Procedure


!***************************
Begin-Procedure Main-Report
!***************************

  Do Get-Calendar-Info
  Do Clear-History

  Let $Hold_Emplid = ' '
  Let #Begin_Balance = 0
  Let #New_Activity = 0
  Let #End_Balance = 0
  Let #Total_OverDue = 0

  If ($Reprint = 'Y')
    If ($Reprint_Match = 'Y')
      Do Load-Reprint
    End-if
  Else
    Do Load-Regular
  End-if

  Do Print-Forms

  If ($Reprint = 'Y')
    If ($Reprint_Match = 'Y')
      Do Delete-Reprint-Id
    End-if
  End-if

  Do Update-Print-Period

  Do Update-Calendar

End-Procedure


!*********************************
Begin-Procedure Get-Calendar-Info
!*********************************

Begin-Select
A1.BILL_PER_CD
A1.COMMENTS
A1.PERIOD_BEGIN_DT
A1.PERIOD_END_DT
    Do Format-DateTime(&A1.Period_End_Dt, $PrintPeriod_End_Dt, {DEFDATE}, '', '')

From  PS_BEN_BI_CALENDAR A1
Where A1.BILL_PER_CD = $Bill_Per_Cd
Order By A1.BILL_PER_CD ASC
End-Select

End-Procedure

!*****************************
Begin-Procedure Clear-History
!*****************************

  let $Sql-Statement = 'BEN040: DELETE PS_R_Ben_bi_Hist(Start)'

Begin-SQL On-Error=SQL-Error

DELETE FROM PS_R_BEN_BI_HIST

End-SQL

End-Procedure


!****************************
Begin-Procedure Load-Reprint
!****************************

Begin-Select
A2.BILL_PER_CD
A3.EMPLID

    Let $WhereA = 'A.EMPLID = ''' || &A3.EmplId || ''' AND '
    Let $WhereA = $WhereA || 'B.PERIOD_END_DT <= ''' || &A1.Period_End_Dt || ''''

    Let $WhereC = 'C.EMPLID = ''' || &A3.EmplId || ''' AND '
    Let $WhereC = $WhereC || 'C.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''

    Let $WhereD = 'D.EMPLID = ''' || &A3.EmplId || ''' AND '
    Let $WhereD = $WhereD || 'D.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''

    Let $WhereF = 'F.EMPLID = ''' || &A3.EmplId || ''' AND '
    Let $WhereF = $WhereF || 'F.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''

    Do Select-Data

From  PS_BEN_BI_PRNT A2,
      PS_BEN_BI_PRNT_PAR A3
Where A2.PRINT_ID = $Reprint_Id
And   A2.PRINT_ID = A3.PRINT_ID
And   A2.BILL_PER_CD = $Bill_Per_Cd
Order By A3.EMPLID ASC
End-Select

  Let $Emplid = ' '
  Do Evaluate-Data

Begin-Select DISTINCT
A5.EMPLID

    Let $Hold_Emplid = &A5.Emplid
    Let $Bal_Detail_Type = 'BGN'
    Let #Bal_Amt = 0
    Do Insert-Balance

From  PS_BEN_BI_PRNT A4,
      PS_BEN_BI_PRNT_PAR A5,
      PS_BEN_BI_ENR_EFDT A6
Where A4.PRINT_ID = $Reprint_Id
And   A4.PRINT_ID = A5.PRINT_ID
And   A4.BILL_PER_CD = $Bill_Per_Cd
And   A6.EMPLID = A5.EMPLID
And   A6.BILLING_STATUS <> 'I'
And   A6.EFFDT =
         (SELECT MAX(AA6.EFFDT)
          From  PS_BEN_BI_ENR_EFDT AA6
          Where AA6.EMPLID = A6.EMPLID
          And   AA6.EMPL_RCD = A6.EMPL_RCD
          And   AA6.PLAN_TYPE = A6.PLAN_TYPE
          And   AA6.COBRA_EVENT_ID = A6.COBRA_EVENT_ID
          And   AA6.EFFDT <= &A1.Period_End_Dt)
And   NOT EXISTS
         (SELECT 'X'
          From  PS_R_BEN_BI_HIST A7
          Where A7.EMPLID = A5.EMPLID)
Order By A5.EMPLID ASC
End-Select

End-Procedure


!****************************
Begin-Procedure Load-Regular
!****************************

  Let $WhereA = 'B.PERIOD_END_DT <= ''' || &A1.Period_End_Dt || ''''
  Let $WhereC = 'C.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''
  Let $WhereD = 'D.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''
  Let $WhereF = 'F.POSTING_DATE <= ''' || &A1.Period_End_Dt || ''''

  Do Select-Data

  Let $Emplid = ' '
  Do Evaluate-Data

Begin-Select DISTINCT
A8.EMPLID

    Let $Hold_Emplid = &A8.Emplid
    Let $Bal_Detail_Type = 'BGN'
    Let #Bal_Amt = 0
    Do Insert-Balance

From  PS_BEN_BI_ENR_EFDT A8
Where A8.BILLING_STATUS <> 'I'
And   A8.EFFDT =
         (SELECT MAX(AA8.EFFDT)
          From  PS_BEN_BI_ENR_EFDT AA8
          Where AA8.EMPLID = A8.EMPLID
          And   AA8.EMPL_RCD = A8.EMPL_RCD
          And   AA8.PLAN_TYPE = A8.PLAN_TYPE
          And   AA8.COBRA_EVENT_ID = A8.COBRA_EVENT_ID
          And   AA8.EFFDT <= &A1.Period_End_Dt)
And   NOT EXISTS
         (SELECT 'X'
          From  PS_R_BEN_BI_HIST A9
          Where A9.EMPLID = A8.EMPLID)
Order By A8.EMPLID ASC
End-Select

End-Procedure


!***************************
Begin-Procedure Select-Data
!***************************

  Do Select-Charge
  Do Select-Payment
  Do Select-Charge-Adj
  Do Select-Payment-Adj

End-Procedure


!*****************************
Begin-Procedure Select-Charge
!*****************************

  Do Clear-Insert
  Let $Detail_Type = 'CHRG'

Begin-Select
A.EMPLID
B.PERIOD_END_DT
A.DATE_DUE
A.CHARGE
A.PLAN_TYPE
A.BENEFIT_PLAN
A.COVRG_CD
B.PERIOD_BEGIN_DT
A.DATE_OVERDUE
A.AMOUNT_DUE
A.PRINT_PERIOD
A.BILL_CHARGE_ID
A.DED_SLSTX_CLASS

    Let $EmplId = &A.EmplId
    Let $Posting_Date = &B.Period_End_Dt
    Let $Date_Due = &A.Date_Due
    Let #Amt = &A.Charge
    Let $Plan_Type = &A.Plan_Type
    Let $Benefit_Plan = &A.Benefit_Plan
    Let $Covrg_Cd = &A.Covrg_Cd
    Let $Period_Begin_Dt = &B.Period_Begin_Dt
    Do Format-DateTime(&A.Date_OverDue, $Date_OverDue, {DEFCMP}, '', '')
    Let #Amount_Due = &A.Amount_Due
    Let $Print_Period = RTRIM(&A.Print_Period, ' ')
    Let #Bill_Charge_Id = &A.Bill_Charge_Id
    Let $Ded_Slstx_Class = &A.Ded_Slstx_Class

    Do Evaluate-Data

From  PS_BEN_BI_CHG_VW A,
      PS_BEN_BI_CALENDAR B
Where [$WhereA]
And   A.BILL_PER_CD = B.BILL_PER_CD
Order by A.EMPLID,
B.PERIOD_END_DT,
A.PLAN_TYPE

End-Select

End-Procedure


!******************************
Begin-Procedure Select-Payment
!******************************

  Do Clear-Insert
  Let $Detail_Type = 'PMNT'

Begin-Select
C.EMPLID
C.POSTING_DATE
C.PRINT_PERIOD
C.BILL_PAY_ID

    Let $EmplId = &C.EmplId
    Let $Posting_Date = &C.Posting_Date
    Let $Print_Period = RTRIM(&C.Print_Period, ' ')
    Let #Bill_Pay_Id = &C.Bill_Pay_Id
    Let $Ded_Slstx_Class = ' '

    Do Select-Pay-Amt

From  PS_BEN_BI_PAY_VW C
Where [$WhereC]
Order by C.EMPLID,
C.POSTING_DATE

End-Select

End-Procedure

!******************************
Begin-Procedure Select-Pay-Amt
!******************************

Begin-Select
P.EMPLID
P.POSTED_DATE
P.BILL_PAY_ID
P.PAY_AMT
P.DETAIL_TYPE

     Let #Amt = &P.PAY_AMT * -1

     Do Evaluate-Data

From  PS_BEN_BI_DETAIL P
Where P.DETAIL_TYPE = 'PMNT'
AND P.EMPLID = $EmplId
AND P.POSTED_DATE = $Posting_Date
AND P.BILL_PAY_ID = #Bill_Pay_Id
Order by P.EMPLID,
P.POSTED_DATE

End-Select

End-Procedure




!*********************************
Begin-Procedure Select-Charge-Adj
!*********************************

  Do Clear-Insert
  Let $Detail_Type = 'CHRZ'

Begin-Select
D.EMPLID
D.POSTING_DATE
D.NET_ADJUSTMENT
D.PRINT_PERIOD
D.BILL_ADJ_ID
E.PLAN_TYPE
E.BENEFIT_PLAN
E.COVRG_CD
E.DED_SLSTX_CLASS

    Let $EmplId = &D.EmplId
    Let $Posting_Date = &D.Posting_Date
    Let #Amt = &D.Net_Adjustment
    Let $Plan_Type = &E.Plan_Type
    Let $Benefit_Plan = &E.Benefit_Plan
    Let $Covrg_Cd = &E.Covrg_Cd
    Let $Print_Period = RTRIM(&D.Print_Period, ' ')
    Let #Bill_Adj_Id = &D.Bill_Adj_Id
    Let $Ded_Slstx_Class = &E.Ded_Slstx_Class

    Do Evaluate-Data

From  PS_BEN_BI_ADJSTMNT D,
      PS_BEN_BI_CHARGE E
Where [$WhereD]
And   D.ADJUST_TYPE = 'CHG'
And   E.EMPLID = D.EMPLID
And   E.BILL_CHARGE_ID = D.BILL_CHARGE_ID
Order by D.EMPLID,
D.POSTING_DATE,
E.PLAN_TYPE

End-Select

End-Procedure


!**********************************
Begin-Procedure Select-Payment-Adj
!**********************************

  Do Clear-Insert
  Let $Detail_Type = 'PMNZ'

Begin-Select
F.EMPLID
F.POSTING_DATE
F.NET_ADJUSTMENT
F.PRINT_PERIOD
F.BILL_ADJ_ID

    Let $EmplId = &F.EmplId
    Let $Posting_Date = &F.Posting_Date
    Let #Amt = &F.Net_Adjustment * -1
    Let $Print_Period = RTRIM(&F.Print_Period, ' ')
    Let #Bill_Adj_Id = &F.Bill_Adj_Id
    Let $Ded_Slstx_Class = ' '

    Do Evaluate-Data

From  PS_BEN_BI_ADJSTMNT F
Where [$WhereF]
And   F.ADJUST_TYPE = 'PAY'
Order by F.EMPLID,
F.POSTING_DATE

End-Select

End-Procedure


!****************************
Begin-Procedure Clear-Insert
!****************************

  Let $EmplId = ' '
  Let $Posting_Date = $High_Date
  Let $Detail_Type = ' '
  Let $Billing_Reason = ' '
  Let $Date_Due = $High_Date
  Let #Amt = 0
  Let $Benefit_Program = ' '
  Let $Plan_Type = ' '
  Let $Benefit_Plan = ' '
  Let $Covrg_Cd = ' '
  Let $Period_Begin_Dt = $High_Date
  Let #Amount_Due = 0
  Let $Print_Period = ' '
  Let #Bill_Charge_Id = 0
  Let #Bill_Pay_Id = 0
  Let #Bill_Adj_Id = 0

End-Procedure


!*****************************
Begin-Procedure Evaluate-Data
!*****************************

  If $Emplid <> $Hold_Emplid

    If #Begin_Balance <> 0
      Let $Bal_Detail_Type = 'BGN'
      Let #Bal_Amt = #Begin_Balance
      Do Insert-Balance
    End-if

    If #New_Activity <> 0
      Let $Bal_Detail_Type = 'NEW'
      Let #Bal_Amt = #New_Activity
      Do Insert-Balance
    End-if

    If #End_Balance <> 0
      Let $Bal_Detail_Type = 'END'
      Let #Bal_Amt = #End_Balance
      Do Insert-Balance
    End-if

    If #Total_OverDue <> 0
      Let $Bal_Detail_Type = 'OVER'
      Let #Bal_Amt = #Total_OverDue
      Do Insert-Balance
    End-if

    Let $Hold_Emplid = $Emplid
    Let #Begin_Balance = 0
    Let #New_Activity = 0
    Let #End_Balance = 0
    Let #Total_OverDue = 0

  End-if

  If $Emplid <> ' '

    If $Print_Period <> '' and
       $Print_Period <> $Bill_Per_Cd
      Add #Amt to #Begin_Balance
    Else
      Add #Amt to #New_Activity
      Do Insert-History
    End-if

    Add #Amt to #End_Balance

    If $Detail_Type = 'CHRG' and
       $Date_OverDue < $CompAsOf
      Add #Amount_Due to #Total_OverDue
    End-if

  End-if

End-Procedure


!******************************
Begin-Procedure Insert-Balance
!******************************

  do PS_SQR_Round(#Bal_Amt, 2, #Bal_Amt)

  Let $SQL-Statement = 'BEN040: Insert-Balance'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_BEN_BI_HIST
( EMPLID,
  POSTING_DATE,
  DETAIL_TYPE,
  BILLING_REASON,
  DATE_DUE,
  AMT,
  BENEFIT_PROGRAM,
  PLAN_TYPE,
  BENEFIT_PLAN,
  COVRG_CD,
  PERIOD_BEGIN_DT,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  DED_SLSTX_CLASS,
  COUNTRY,
  PROVINCE
)
Values
( $Hold_EmplId,
  NULL,
  $Bal_Detail_Type,
  ' ',
  NULL,
  #Bal_Amt,
  ' ',
  ' ',
  ' ',
  ' ',
  NULL,
  0,
  0,
  0,
  $Ded_Slstx_Class,
  ' ',
  ' '
)
End-SQL

End-Procedure


!******************************
Begin-Procedure Insert-History
!******************************

  do PS_SQR_Round(#Amt, 2, #Amt)

  Let $SQL-Statement = 'BEN040: Insert-History'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_BEN_BI_HIST
( EMPLID,
  POSTING_DATE,
  DETAIL_TYPE,
  BILLING_REASON,
  DATE_DUE,
  AMT,
  BENEFIT_PROGRAM,
  PLAN_TYPE,
  BENEFIT_PLAN,
  COVRG_CD,
  PERIOD_BEGIN_DT,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  DED_SLSTX_CLASS,
  COUNTRY,
  PROVINCE
)
Values
( $EmplId,
  $Posting_Date,
  $Detail_Type,
  $Billing_Reason,
  $Date_Due,
  #Amt,
  $Benefit_Program,
  $Plan_Type,
  $Benefit_Plan,
  $Covrg_Cd,
  $Period_Begin_Dt,
  #Bill_Charge_Id,
  #Bill_Pay_Id,
  #Bill_Adj_Id,
  $Ded_Slstx_Class,
  ' ',
  ' '
)
End-SQL

End-Procedure


!***************************
Begin-Procedure Print-Forms
!***************************

  Do Delete-Holds
  Let $Hold_Emplid = ' '

Begin-Select 
G.EMPLID
G.PERIOD_BEGIN_DT
    Do Format-DateTime(&G.Period_Begin_Dt,$Period_Begin_Dt,{DEFDATE},'', '')

G.POSTING_DATE
    Do Format-DateTime(&G.Posting_Date,$Posting_Date,{DEFDATE},'', '')

G.DETAIL_TYPE
G.PLAN_TYPE
G.BENEFIT_PLAN
G.COVRG_CD
G.AMT
G.DATE_DUE
    Do Format-DateTime(&G.Date_Due,$Date_Due,{DEFDATE},'', '')

G.DED_SLSTX_CLASS

    If &G.Emplid <> $Hold_Emplid

      If $Hold_Emplid <> ' '
          Do Finish-Employee
      End-if

      Let $Hold_Emplid = &G.Emplid
      Do Start-Employee

    End-if

    Do Process-Entry

From  PS_R_BEN_BI_HIST G
WHERE EXISTS
(SELECT 'X' FROM
PS_BEN_BI_ENR_EFDT A
WHERE A.EMPLID=G.EMPLID
AND A.BILLING_STATUS = 'A'
AND A.EFFDT=(SELECT MAX(A2.EFFDT)
FROM PS_BEN_BI_ENR_EFDT A2
WHERE A2.EMPLID=A.EMPLID
AND A2.EMPL_RCD=A.EMPL_RCD
AND A2.PLAN_TYPE=A.PLAN_TYPE
AND A2.COBRA_EVENT_ID=A.COBRA_EVENT_ID
AND A2.EFFDT <= &A1.Period_End_Dt))
Order By G.EMPLID ASC,
         G.POSTING_DATE ASC,
         G.DETAIL_TYPE ASC,
         G.PLAN_TYPE ASC

End-Select

  If $Hold_Emplid <> ' '
     Do Finish-Employee
  End-if


End-Procedure


!****************************
Begin-Procedure Delete-Holds
!****************************

Begin-Select
H.EMPLID

    Do Delete-Rows

From  PS_BEN_BI_EMP_PARM H
Where H.HOLD_PRINT = 'Y'
And   H.EFFDT =
          (SELECT MAX(HH.EFFDT)
           From  PS_BEN_BI_EMP_PARM HH
           Where HH.EMPLID = H.EMPLID
           And   HH.EFFDT <= &A1.Period_End_Dt)
End-Select

End-Procedure


!***************************
Begin-Procedure Delete-Rows
!***************************

  let $Sql-Statement = 'BEN040: DELETE PS_R_BEN_BI_HIST(Holds)'

Begin-SQL On-Error=SQL-Error

DELETE FROM PS_R_BEN_BI_HIST
WHERE EMPLID = &H.Emplid

End-SQL

End-Procedure


!******************************
Begin-Procedure Start-Employee
!******************************

  Move 0 to #Page_Number       !Reset to 0 for each employee
  Add 1 to  #Empl_Cnt          !Increment the employee counter
  Do Get-Pers
  Do Get-Override
  Do Statement-Header
  Let #Begin_Balance = 0
  Let #New_Activity = 0
  Let #End_Balance = 0
  Let #Total_OverDue = 0

End-Procedure


!************************
Begin-Procedure Get-Pers
!************************

Begin-Select
I.EMPLID
I.NAME
I.LANG_CD

    do Get-Empl-Address ($Hold_Emplid,$AddrType, $AddressFound)
    Let $Address1 = $GETADDR_Address1
    Let $Address2 = $GETADDR_Address2
    Let $Address3 = $GETADDR_Address3
    Let $Address4 = $GETADDR_Address4
    Let $Address5 = RTRIM($GETADDR_City, ' ') || ',  ' || RTRIM($GETADDR_State,' ') || ' ' || $GETADDR_Postal

  if $prcs_language_option = 'R'
!-- if Language Code not defined for the Recipient level of translation
!-- then use the system default - $Language_Cd.
    if rtrim(&I.Lang_Cd,' ') = ''
      if $curr_language_cd <> $Language_Cd
        let $curr_language_cd = $Language_Cd
        do Report-Translation
      end-if
    else
      if &I.Lang_Cd <> $curr_language_cd
        let $curr_language_cd = &I.Lang_Cd
        do Report-Translation
      end-if
    end-if
  end-if

From  PS_PERSONAL_DT_FST I
Where I.EMPLID = $Hold_Emplid
Order by I.EMPLID
End-Select

End-Procedure


!********************************
Begin-Procedure Statement-Header
!********************************

  Let #Page_Number = #Page_Number + 1

!*** 'BILLING STATEMENT AS OF ' || $PrintAsOf
!*** 'FOR PERIOD ENDING ' || $PrintPeriod_End_Dt
  Let $Report_Id1 =  $BEN040-RPT-ID1 || $PrintAsOf
  Let $Report_Id2 =  $BEN040-RPT-ID2 || $PrintPeriod_End_Dt

  Alter-Printer Font=5 Point-Size={NORM}
  Print $Report_Id1                    ({start_row}, {col00}) bold
!*** 'Page '
  Print $BEN1-PAGE                     (+0, {col60})
  Print #Page_Number                   (+0, {col68}) edit 9
  Print $Report_Id2                    (+1, {col00}) bold
!***  'Name:'
  Print  $BEN1-NAME2                   (+3, {col00})
  Print &I.Name                        (+0, {col10})
!*** 'Employee Id:'
  Print $BEN1-EMPLOYEE-ID2             (+0, {col50})
  Print $Hold_Emplid                   (+0, {col60})
!*** 'Activity Date/'
  Print $BEN040-ACTY-DT                (+3, {hdr1a}, 19) bold
!*** 'Period'
  Print $BEN1-PERIOD                   (+1, {hdr1b}, 14) bold
!*** 'Activity'
  Print $BEN1-ACTY                     (+0, {hdr3}, 8)  bold
!*** 'Plan'
  Print $BEN1-PLAN                     (+0, {hdr4}, 7)  bold
!*** 'Date'
  Print  $BEN1-DATE                    (+0, {hdr8}, 10)  bold
!*** 'From'
  Print $BEN1-FROM                     (+1, {hdr1}, 10)  bold underline
!*** 'To'
 Print $BEN1-TO                        (+0, {hdr2}, 5)  bold underline
!***  'Type'
 Print  $BEN1-TYPE                     (+0, {hdr3}, 7)  bold underline
!***  'Type'
 Print  $BEN1-TYPE                     (+0, {hdr4}, 7)  bold underline
!***  'Benefit Plan'
 Print $BEN1-BEN-PLAN                  (+0, {hdr5}, 25)  bold underline
!***  'Coverage'
  Print $BEN1-COVERAGE                 (+0, {hdr6}, 12)  bold underline
!***  'Amount'
  Print $BEN1-AMT                      (+0, {hdr7}, 7)  bold underline
!***  'Due'
 Print $BEN1-DUE                       (+0, {hdr8}, 7)  bold underline

  Let #Lines_On_Page = 0

End-Procedure


!*****************************
Begin-Procedure Process-Entry
!*****************************

  Let $Det_Type = RTRIM(&G.Detail_Type, ' ')
  Evaluate $Det_Type
    When = 'BGN'
      Add &G.Amt to #Begin_Balance
      break
    When = 'NEW'
      Add &G.Amt to #New_Activity
      break
    When = 'END'
      Add &G.Amt to #End_Balance
      break
    When = 'OVER'
      Add &G.Amt to #Total_OverDue
      break
    When-Other
      Do Print-Line
      break
  End-Evaluate

End-Procedure


!**************************
Begin-Procedure Print-Line
!**************************

  Add 1 to #Lines_On_Page
  If #Lines_On_Page > {Num_Per_Page}
!***'Continued On Next Page ...'
    Print $BEN1-CONT-NEXT-PAGE         (+1, {rep3}) Bold Underline
    Do Print-Footer
    Do Reset-Printer
    Do Statement-Header
  End-If

  If &G.Detail_Type = 'CHRG'
    Print $Period_Begin_Dt             (+1, {rep1})
  Else
    Print ' '                          (+1, {rep1})
  end-if

  Print $Posting_Date                  (+0, {rep2})

  Let $Det_Type = &G.Detail_Type
  Evaluate $Det_Type
    When = 'CHRG'
      Let $Detail_Type = $BEN1-CHARGE
      break
    When = 'CHRZ'
      Let $Detail_Type = $BEN040-CHG-ADJ
      break
    When = 'PMNT'
      Let $Detail_Type = $BEN1-PAYMENT
      break
    When = 'PMNZ'
      Let $Detail_Type = $BEN040-PAY-ADJ
      break
  End-Evaluate

  Print $Detail_Type                   (+0, {rep3}, 8)

  If &G.Plan_Type <> ' '
    Move &G.Plan_Type to $Plan_Type
    Move 'PLAN_TYPE'  to $Fieldname
    Move $Plan_Type to $Fieldvalue
    Move &G.Posting_Date to $AsOfDate
    Do Read-Translate-Table
    Print $Xlatshortname               (+0, {rep4}, 8)
  End-If

  if &G.Benefit_Plan <> ' '
    move &G.Benefit_Plan to $Benefit_Plan
    move &G.Plan_Type to $Plan_Type
    move &G.Posting_Date to $AsOfDate
    do Get-Benefit-Name
    let $BenefitName = {PS-SUBSTR}($BenefitName,1,28)
    Print $BenefitName                 (+0, {rep5}, 25)
  end-if

  If &G.Ded_Slstx_Class <> ' ' and &G.Ded_Slstx_Class <> 'B'
    Move &G.Ded_Slstx_Class to $Ded_Slstx_Class
    Move 'DED_SLSTX_CLASS'  to $Fieldname
    Move $Ded_Slstx_Class to $Fieldvalue
    Move &G.Posting_Date to $AsOfDate
    Do Read-Translate-Table
    move $Xlatshortname to $CovrgDescrShort
    Print $CovrgDescrShort             (+0, {rep6}, 12)
  End-If

  If &G.Covrg_Cd <> ' ' and &G.Ded_Slstx_Class = 'B'
    move &G.Covrg_Cd to $CovrgCd
    move &G.Posting_Date to $CovrgEffdt
    do Get-Covrg-Code-Descr
    Print $CovrgDescrShort             (+0, {rep6}, 12)
  End-If

  Print &G.Amt                         (+0, {rep7}) edit {amt_mask}

  If &G.Detail_Type = 'CHRG'
    Print $Date_Due                    (+0, {rep8})
  end-if

End-Procedure


!*******************************
Begin-Procedure Finish-Employee
!*******************************

  Do Print-Balance
  Do Print-Comments
  Do Print-Footer
  Do Reset-Printer

End-Procedure


!*****************************
Begin-Procedure Print-Balance
!*****************************

!*** 'Beginning Balance'
  Print $BEN040-BEG-BAL                ({Total_Line}, {rep1}) Bold
  Print #Begin_Balance                 (+0, {rep7}) edit {amt_mask}

!***  'New Activity'
  Print $BEN040-NEW-ACTY               (+1, {rep1}) Bold
  Print #New_Activity                  (+0, {rep7}) edit {amt_mask}

!*** 'Ending Balance'
  Print $BEN040-END-BAL                (+1, {rep1}) Bold
  Print #End_Balance                   (+0, {rep7}) edit {amt_mask}

  If #End_Balance < 0
!*** 'TOTAL CREDIT'
    Print $BEN1-TOT-CRDT               (+3, {col00}, 20) Bold
    Let #Print_Balance = #End_Balance * -1
    do PS_SQR_Round(#Print_Balance, 2, #Print_Balance)
  Else
!*** 'TOTAL DUE'
    Print $BEN1-TOT-DUE                (+3, {col00}, 20) Bold
    Let #Print_Balance = #End_Balance
  End-If
  Print #Print_Balance                 (+0, {col30}) edit {tot_mask}
  If #End_Balance < 0
    Print $BEN040-DONOT                (+0, {col40}, 40)
  End-If

  If #Total_OverDue <> 0
!*** 'TOTAL OVERDUE'
    Print $BEN1-TOT-OVERDUE            (+2, {col00}, 20) Bold

    Print #Total_OverDue               (+0, {col30}) edit {tot_mask}
!*** 'Please remit overdue amounts immediately'
    Print $BEN040-TEXT01               (+1, {col00}, 80)
  End-If

End-Procedure


!******************************
Begin-Procedure Print-Comments
!******************************

  Position ({comment_line},{col00})

  If RTRIM(&A1.Comments, ' ') <> ''
    Print &A1.Comments                 (+0, {col00}) wrap 115 4
    Position                           (+2, {col00})
  End-If

  Do Get-Override

  If RTRIM(&K.Comments, ' ') <> '' and
     (&K.Comment_Print = 'ALL' or
     (RTRIM(&K.Bill_Per_Cd, ' ') = '' or &K.Bill_Per_Cd = $Bill_Per_Cd))
    Print &K.Comments                  (+0, {col00}) wrap 115 4
    If &K.Comment_Print = 'ONE'
      Do Update-Override
    End-If
  End-If

End-Procedure


!****************************
Begin-Procedure Get-Override
!****************************

Begin-Select
K.EMPLID
K.EFFDT
K.COMMENT_PRINT
K.BILL_PER_CD
K.COMMENTS
K.ADDRESS1
K.ADDRESS2
K.ADDRESS3
K.ADDRESS4
K.CITY
K.STATE
K.POSTAL

    If &K.Address1 <> '' or
       &K.Address2 <> '' or
       &K.Address3 <> '' or
       &K.Address4 <> '' or
       &K.City <> '' or
       &K.State <> '' or
       &K.Postal <> ''
      Let $Address1 = &K.Address1
      Let $Address2 = &K.Address2
      Let $Address3 = &K.Address3
      Let $Address4 = &K.Address4
      Let $Address5 = RTRIM(&K.City, ' ') || ',  ' || RTRIM(&K.State,' ') || ' ' || &K.Postal
    End-If

From  PS_BEN_BI_EMP_PARM K
Where K.EMPLID = $Hold_Emplid
And   K.EFFDT =
          (SELECT MAX(KK.EFFDT)
           From  PS_BEN_BI_EMP_PARM KK
           Where KK.EMPLID = K.EMPLID
           And   KK.EFFDT <= &A1.Period_End_Dt)
End-Select

End-Procedure


!*******************************
Begin-Procedure Update-Override
!*******************************

  let $Sql-Statement = 'BEN040: UPDATE PS_BEN_BI_EMP_PARM'

Begin-SQL On-Error=SQL-Error

UPDATE PS_BEN_BI_EMP_PARM
SET    BILL_PER_CD = $Bill_Per_Cd
Where  EMPLID = &K.EmplId
And    EFFDT = &K.Effdt

End-SQL

End-Procedure


!****************************
Begin-Procedure Print-Footer
!****************************

  graphic ({start_footer}, {col00},{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

!***  'Employee ID'
  Print $BEN1-EMPLOYEE-ID              (+2, {col00}, 11)
  Print $Hold_Emplid                   (+0, {col10})

!***  'Period Ending'
  Print $BEN040-PER-END                (+1, {col00}, 13)
  Print $PrintPeriod_End_Dt            (+0, {col10})

!***  'Amount Due'
  Print $BEN1-AMT-DUE                  (+1, {col00}, 10)
  Print #End_Balance                   (+0, {col10}) Edit {amt_mask}

  Print &I.Name                        (+1, {col40})
  If $Address1 <> ''
    Print $Address1                    (+1, {col40})
  End-If
  If $Address2 <> ''
    Print $Address2                    (+1, {col40})
  End-If
  If $Address3 <> ''
    Print $Address3                    (+1, {col40})
  End-If
  If $Address4 <> ''
    Print $Address4                    (+1, {col40})
  End-If
  If $Address5 <> ''
    Print $Address5                    (+1, {col40})
  End-If

  Let $Address1 = ''
  Let $Address2 = ''
  Let $Address3 = ''
  Let $Address4 = ''
  Let $Address5 = ''

End-Procedure


!*****************************
Begin-Procedure Reset-Printer
!*****************************

  new-page

End-Procedure


!***********************************
Begin-Procedure Update-Print-Period
!***********************************

Begin-Select
ZA.EMPLID
ZA.BILL_CHARGE_ID

    Do Update-Charge

From  PS_R_BEN_BI_HIST ZA
Where ZA.DETAIL_TYPE = 'CHRG'
End-Select

Begin-Select
ZB.EMPLID
ZB.BILL_PAY_ID

    Do Update-Pay

From  PS_R_BEN_BI_HIST ZB
Where ZB.DETAIL_TYPE = 'PMNT'
End-Select

Begin-Select
ZC.EMPLID
ZC.BILL_ADJ_ID

    Do Update-Adjust

From  PS_R_BEN_BI_HIST ZC
Where ZC.DETAIL_TYPE IN ('CHRZ','PMNZ')
End-Select

End-Procedure


!*****************************
Begin-Procedure Update-Charge
!*****************************

  let $Sql-Statement = 'BEN040: UPDATE PS_BEN_BI_CHARGE'

Begin-SQL On-Error=SQL-Error

UPDATE PS_BEN_BI_CHARGE
SET    PRINT_PERIOD = $Bill_Per_Cd
Where  EMPLID = &ZA.EmplId
And    BILL_CHARGE_ID = &ZA.Bill_Charge_Id
End-SQL

End-Procedure


!**************************
Begin-Procedure Update-Pay
!**************************

  let $Sql-Statement = 'BEN040: UPDATE PS_BEN_BI_PAYMENT'

Begin-SQL On-Error=SQL-Error

UPDATE PS_BEN_BI_PAYMENT
SET    PRINT_PERIOD = $Bill_Per_Cd
Where  EMPLID = &ZB.EmplId
And    BILL_PAY_ID = &ZB.Bill_Pay_Id
End-SQL

End-Procedure


!*****************************
Begin-Procedure Update-Adjust
!*****************************

  let $Sql-Statement = 'BEN040: UPDATE PS_BEN_BI_ADJSTMNT'

Begin-SQL On-Error=SQL-Error

UPDATE PS_BEN_BI_ADJSTMNT
SET    PRINT_PERIOD = $Bill_Per_Cd
Where  EMPLID = &ZC.EmplId
And    BILL_ADJ_ID = &ZC.Bill_Adj_Id
End-SQL

End-Procedure


!*******************************
Begin-Procedure Update-Calendar
!*******************************

  let $Sql-Statement = 'BEN040: UPDATE PS_BEN_BI_CALENDAR'

Begin-SQL On-Error=SQL-Error

UPDATE PS_BEN_BI_CALENDAR
SET    BILL_STATEMENT_RUN = 'Y'
WHERE  BILL_PER_CD = $Bill_Per_Cd
End-SQL

End-Procedure


!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

  Let $Sql-Statement = 'BEN040: DELETE PS_BEN_BI_PRNT'

Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BEN_BI_PRNT
WHERE PRINT_ID = $Reprint_Id

End-SQL

  Let $Sql-Statement = 'BEN040: DELETE PS_BEN_BI_PRNT_PAR'

Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BEN_BI_PRNT_PAR
WHERE PRINT_ID = $Reprint_Id

End-SQL

End-Procedure


!****************************
Begin-Procedure Display-Time
!****************************

  Do Get-Current-DateTime
  Display $AsOfToday NoLine
  Display ', '       NoLine
  Display $AsOfNow
  Display ''

End-Procedure


!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'getbical.sqc'  !Ask-Calendar-Cd routine
#Include 'benasof.sqc'   !Ask-As-Of-Date routine
#Include 'getaddr.sqc'   !Get current address for specified address type
#Include 'readxlat.sqc'  !Routines to read from Translate Table
#Include 'number.sqc'    !Routines to format numbers
#include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr
#include 'getbennm.sqc'  !Get-Benefit-Name procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!******************************* End of Report *******************************
