!************************************************************************
!  PAY040:  EFT- Child Support                                          *
!           Create Electron Funds Transmittal File for Child Support   *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/03/05:14:09:02                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  698735                                              !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-Paygroup-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Get_Field_Information

#Include 'reset.sqc'     !Reset printer
#include 'rotname1.sqc'  !Routine to reformat name
#Include 'tranctrl.sqc'  !Commit-Transaction
#include 'sqlerr.sqc'    !SQL error routine

!--- report column settings ---
#define pay040_ssn              1
#define pay040_name            21
#define pay040_emplid          53
#define pay040_case_id         68
#define pay040_remit_state     91
#define pay040_pymt_amt        106
#define pay040_max_print_line  65
#define pay040_edit_mask       $,$$$,$$9.99


begin-report
  do Init-Report

  do Stdapi-Term
end-report

begin-procedure Init-Report

  display 'Creating Child Support Electronic Funds Transmittal Files'

  LET $REPORTID = 'PAY040'

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Create-Array
  do Report-Translation

  move 'N' to $CyclePrompts     !Don't prompt for On/Off cycle in PAYINIT
  do Payroll-Report-Initialization

end-procedure


begin-PROCEDURE Create-Array

  move 8 to #lastIndex  !Index of last digit in Transit Routing Number
  create-array name=Weights size=1 field=Factor:number:9
  put 3 7 1 3 7 1 3 7 into Weights(0)                              -
                           Factor(0) Factor(1) Factor(2) Factor(3) -
                           Factor(4) Factor(5) Factor(6) Factor(7)

end-PROCEDURE  !Create-Array


!----------------------------------------------------------------------------
! Report Heading
!----------------------------------------------------------------------------
begin-heading 7

  move ''  to $CycleDesc
  move 'B' to $CycleInd

  #Include 'stdhtrpi.sqc'
  #Include 'stdhtr06.sqc'

  print $PAY040_SSN                              (+2,{pay040_ssn})
  print $PAY040_NAME                             ( 0,{pay040_name})
  print $PAY040_EMPLID                           ( 0,{pay040_emplid})
  print $PAY040_CASE_ID                          ( 0,{pay040_case_id})
  print $PAY040_REMIT_STATE                      ( 0,{pay040_remit_state})
  print $PAY040_PYMT_AMT                         ( 0,{pay040_pymt_amt})

end-heading


!----------------------------------------------------------------------------
! This procedure is used to read language-dependent text from the database.
!----------------------------------------------------------------------------
begin-PROCEDURE Report-Translation

   do Init_Report_Translation($ReportID,$language_cd)

   do Get_Field_Information ('PAY040', 'REPORT_TITLE', $ReportTitle,        #dummy_width)
   do Get_Field_Information ('PAY040', 'SSN',          $PAY040_SSN,         #dummy_width)
   do Get_Field_Information ('PAY040', 'NAME',         $PAY040_NAME,        #dummy_width)
   do Get_Field_Information ('PAY040', 'EMPLID',       $PAY040_EMPLID,      #dummy_width)
   do Get_Field_Information ('PAY040', 'CASE_ID',      $PAY040_CASE_ID,     #dummy_width)
   do Get_Field_Information ('PAY040', 'REMIT_STATE',  $PAY040_REMIT_STATE, #dummy_width)
   do Get_Field_Information ('PAY040', 'PYMT_AMT',     $PAY040_PYMT_AMT,    #dummy_width)
   do Get_Field_Information ('PAY040', 'PAGE_TOTAL',   $PAY040_PAGE_TOTAL,  #dummy_width)
   do Get_Field_Information ('PAY040', 'GRAND_TOTAL',  $PAY040_GRAND_TOTAL, #dummy_width)

end-procedure



!----------------------------------------------------------------------------
! Main Report
!----------------------------------------------------------------------------
begin-PROCEDURE Report

  move 'N' to $exception_flag
  move 'X' to $Details_Processed
  move 'N' to $FileOpen
  move 'N' to $BatchOpen
  move 'N' to $NewFile
  move 'N' to $NewBatch
  move  0  to #filenum
  move  0  to #BatchNbr

  do Company-Run-Control


  if $SlctRunID <> '*'
      move  'AA.RUN_ID = '''                to $DdovbankID
      concat $SlctRunID                   with $DdovbankID
      concat ''''                         with $DdovbankID
  end-if

  do Clear-temp-tables

  do Select-Bank-ID

  do Select-Main-Process


  if $FileOpen ='Y'

    !if #BatchEntryCount > 0
    !  do Write-Offset-Record
    !end-if

    if $BatchOpen = 'Y'
      do Write-Batch-Control
    end-if

    do Write-File-Control
    do Close-File
  else

    if $NewFile = 'Y'
      move 'N' to $NewFile
      do Start-New-File
      do Start-New-Batch
      do Write-Batch-Control
      do Write-File-Control
      do Close-File
    end-if
  end-if

  do Write-EFT-Report

  do Clear-temp-tables

end-PROCEDURE



!----------------------------------------------------------------------------
! Retrieve source bank ID
!----------------------------------------------------------------------------
begin-PROCEDURE Select-Bank-ID

begin-SELECT
AA.COMPANY
AA.PAYGROUP
AA.PAY_END_DT
AA.CHECK_DT
BB.SRC_BANK_ID
BB.DD_SRC_BANK_ID

  if isblank(&BB.DD_SRC_BANK_ID)
    move &BB.SRC_BANK_ID      to $Bank_ID
  else
    move &BB.DD_SRC_BANK_ID   to $Bank_ID
  end-if

  do Insert-Source-Bank-Info

 FROM PS_PAY_CALENDAR AA,
      PS_PAYGROUP_TBL BB
WHERE [$DdovbankID]
  AND AA.PAYGROUP         = BB.PAYGROUP
  AND AA.COMPANY          = BB.COMPANY
  AND BB.EFFDT            =
      (SELECT MAX(EFFDT)
         FROM PS_PAYGROUP_TBL
        WHERE COMPANY    = AA.COMPANY
          AND PAYGROUP   = AA.PAYGROUP
          AND EFF_STATUS = 'A'
          AND EFFDT     <= AA.PAY_END_DT)
  AND AA.PAY_CONFIRM_RUN  = 'Y'
  AND AA.PAY_CHECKS_RUN   = 'N'
ORDER BY AA.COMPANY,
         AA.PAYGROUP,
         AA.PAY_END_DT
end-SELECT

end-PROCEDURE  !Select-bank-id



!----------------------------------------------------------------------------
! Main Process - selected pay calendar and source bank id
!----------------------------------------------------------------------------
begin-PROCEDURE Select-Main-Process

begin-SELECT

A.COMPANY
A.PAYGROUP
A.PAY_END_DT
A.CHECK_DT
B.SRC_BANK_ID
S.BANK_CD
S.ACCOUNT_EC_ID
S.DD_ACCOUNT_NBR
BT.ALT_BANK_CD

  move &A.PAYGROUP   to $PAYGROUP
  move &A.PAY_END_DT to $PayEndDate
  if isblank(&BT.ALT_BANK_CD)
    move &S.BANK_CD          to $TransitNbr
    move 'SB.BANK_CD'         to $Transit_to_Use
  else
    move &BT.ALT_BANK_CD   to $TransitNbr
    move 'BTB.ALT_BANK_CD'  to $Transit_to_Use
  end-if

  if isblank(&S.DD_ACCOUNT_NBR)
    move &S.ACCOUNT_EC_ID    to $AccountNbr
  else
    move &S.DD_ACCOUNT_NBR   to $AccountNbr
  end-if

  do Get-Transit-Descr

  if $PriorCompany <> &A.Company

    if $FileOpen ='Y'

        !if #BatchEntryCount > 0
        !  do Write-Offset-Record
        !end-if

        if $BatchOpen ='Y'
          do Write-Batch-Control
        end-if
    else
        if $Details_Processed = 'N'             !First time equals X

          if $BatchOpen ='Y'
            do Write-Batch-Control
          end-if
        end-if
    end-if

    move 'Y'        to $NewBatch
    move &A.Company to $PriorCompany
    move &A.Company to $Company
    do Get-Company-Data
    move $CompanyName to $Batch_CompanyName
    UPPERCASE $Batch_CompanyName
    move &CT.Federal_EIN    to $Federal_EIN 099999999
    let $Batch_CompanyID = '1' || $Federal_EIN
  end-if

  if $TransitNbr <> $priorTransitNbr

    if $FileOpen ='Y'

        !if #BatchEntryCount > 0
        !  do Write-Offset-Record
        !end-if

        if $BatchOpen ='Y'
          do Write-Batch-Control
        end-if

        do Write-File-Control
        do Close-File
    else
        if $Details_Processed = 'N'       !First time equals X

          if $FileOpen ='Y'

            if $BatchOpen ='Y'
              do Write-Batch-Control
            end-if

            do Write-File-Control
            do Close-File
          end-if
        end-if
    end-if

    move 'Y'         to $NewFile
    move 'Y'         to $NewBatch
    move $TransitNbr   to $priorTransitNbr
    move &A.CHECK_DT to $priorCHECK_DT
  end-if

  if &A.CHECK_DT <> $priorCHECK_DT

    if $FileOpen ='Y'

        !if #BatchEntryCount > 0
        !  do Write-Offset-Record
        !end-if

        if $BatchOpen ='Y'
          do Write-Batch-Control
        end-if

    else
        if $Details_Processed = 'N'       !First time equals X

          if $FileOpen ='Y'

            if $BatchOpen ='Y'
              do Write-Batch-Control
            end-if

          end-if
        end-if
    end-if

    move 'Y'         to $NewBatch
    move &A.CHECK_DT to $priorCHECK_DT
  end-if

  move $AccountNbr to $priorAccountNbr

 do Process-Cycles

 FROM PS_PAY_CALENDAR A,
      PS_R_PAY040 B,
      PS_SRC_BANK     S,
      PS_BANK_EC_TBL  BT
WHERE [$SlctCalndr]
  AND A.PAYGROUP         = B.PAYGROUP
  AND A.COMPANY          = B.COMPANY
  AND A.PAY_CONFIRM_RUN  = 'Y'
  AND A.PAY_CHECKS_RUN   = 'N'
  AND S.SRC_BANK_ID      = B.SRC_BANK_ID
  AND BT.BANK_CD         = S.BANK_CD
ORDER BY A.COMPANY,
         B.SRC_BANK_ID,
         A.PAYGROUP
end-SELECT

end-PROCEDURE


!----------------------------------------------------------------------------
! Insert source bank id list into temp table
!----------------------------------------------------------------------------
begin-procedure Insert-Source-Bank-Info

begin-SQL
  INSERT INTO PS_R_PAY040 (COMPANY,
                           SRC_BANK_ID,
                           PAYGROUP)
                VALUES (&AA.COMPANY,
                        $Bank_ID,
                        &AA.PAYGROUP)
end-SQL

end-PROCEDURE


begin-procedure Start-New-File

    move 0 to #TotBatchCreditAmt
    move 0 to #TotBatchDebitAmt
    move 0 to #BatchEntryHash
    move 0 to #TotFileDebitAmt
    move 0 to #TotFileCreditAmt
    move 0 to #FileEntryHash
    move 0 to #BlockCount
    move 0 to #BatchEntryCount     !Batch control
    move 0 to #FileEntryCount      !file control
    move 0 to #FileBatchCount      !file control
    move 0 to #FileBlockCount      !file control
    move 0 to #BatchNbr

    do Get-File-Header-Company
    do Open-File
    do Write-File-Header

end-procedure


begin-procedure Start-New-Batch

    move 0 to #TotBatchCreditAmt
    move 0 to #TotBatchDebitAmt
    move 0 to #BatchEntryHash
    move 0 to #BatchEntryCount     !Batch control
    move 'Y' to $BatchOpen
    do Write-Batch-Header

end-procedure


begin-PROCEDURE Get-File-Header-Company

  if $Prcs_Process_Instance = ''
    input $File_Co 'Enter 3 Digit Company Code for File Header' type=char
    uppercase $File_Co
  else
    do Select-Parameters-File-Co
  end-if

  if  RTRIM($File_Co,' ') <> ''
     move $File_Co   to $Company
  else
     if RTRIM(&A.Company,' ') <> ''
        move &A.Company to $Company
     else
         if RTRIM($PriorCompany,' ') <> ''
            move $PriorCompany to $Company
         else
            move $check_company to $Company
         end-if
     end-if
  end-if


  do Get-Company-Data

  move $CompanyName to $File_CompanyName
  uppercase $File_CompanyName
  move &CT.Federal_EIN    to $Federal_EIN 099999999
  let $File_CompanyID = '1' || $Federal_EIN

end-procedure


begin-PROCEDURE Open-File

  add 1 to #filenum
  do Format-Number(#filenum, $filenum, '009')

#ifdef OS400
  let $FileName = 'PAY040' || '(D' || $FileNum || ')'
#else
#ifdef MVS
  let $FileName = 'PAY040' || $FileNum
#else
  let $FileName = 'PAY040' || '.' || $FileNum
#endif
#endif

  let $FileName = '{FILEPREFIX}' || $FileName || '{FILESUFFIX}'

  open $filename as 1 for-writing record=94:fixed
  move 'Y' to $FileOpen

end-PROCEDURE


begin-procedure Write-File-Header

  move '1'                    to $RecordType
  move '01'                   to $PriorityCode
  move ' '                    to $TransitRoutingNbr
  concat $TransitNbr          with $TransitRoutingNbr

  do Format-DateTime($AsOfToday, $out, {DEFCMP}, '', '')
  let $TransmitDate = substr($out, 3, 2) || substr($out, 5, 2) || substr($out, 7, 2)

  move '0' to $Time24
  move '1' to $TLZero
  move ''  to $TDelimiter
  do Format-DateTime($SysDateTime, $out, {DEFDATE}, 'time', '')
  let $Time1 = substr($out,12, 1)

  if $Time1 = ' '
    move '0' to $Time1
  end-if

  let $Time2 = substr($out,13, 1)
  let $Time3 = substr($out,14, 2)
  let $TransmitTime = $Time1 || $Time2 || $Time3

  move 'A'                    to $FileModifier
  move '094'                  to $RecordSize
  move '10'                   to $BlockingFactor
  move '1'                    to $FormatCode
  move &C.BANK_NM             to $OrigBank
  move '        '             to $Reference     ! 8 spaces
  uppercase $OrigBank

  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add 1 to #FileBlockCount
  end-if

  write 1 from  $RecordType:1             -
                $PriorityCode:2           -
                $TransitRoutingNbr:10       -      ! Immediate Destination
                $File_CompanyID:10        -
                $TransmitDate:6           -
                $TransmitTime:4           -
                $FileModifier:1           -
                $RecordSize:3             -
                $BlockingFactor:2         -
                $FormatCode:1             -
                $OrigBank:23              -
                $File_CompanyName:23      -
                $Reference:8

end-procedure


begin-procedure Write-Batch-Header

  move '5'                    to $RecordType
  move '200'                  to $ServiceClassCode
  move 'CCD'                  to $StandardEntryClass
  move 'CHILD SUPP'           to $CoEntryDescr

  do Format-DateTime(&A.Pay_End_Dt, $out, {DEFCMP}, '', '')
  let $CoDescrDt = substr($out, 3, 2) || substr($out, 5, 2) || substr($out, 7, 2)

  do Format-DateTime(&A.Check_Dt, $out, {DEFCMP}, '', '')
  let $EffEntryDt = substr($out, 3, 2) || substr($out, 5, 2) || substr($out, 7, 2)

  move '000'                  to $SettlementData
  move '1'                    to $StatusCode
  move $TransitNbr              to $TransitRoutingNbr

  add 1 to #BatchNbr
  do Format-Number(#BatchNbr, $BatchNbr, '0000009')

  add 1 to #FileBatchCount
  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add 1 to #FileBlockCount
  end-if

  write 1 from  $RecordType:1          -
                $ServiceClassCode:3    -
                $Batch_CompanyName:16  -
                $CustDiscrData:20      -
                $Batch_CompanyID:10       -
                $StandardEntryClass:3  -
                $CoEntryDescr:10       -
                $CoDescrDt:6           -
                $EffEntryDt:6          -
                $SettlementData:3      -
                $StatusCode:1          -
                $TransitRoutingNbr:8     -    ! originating DFI ID
                $BatchNbr:7

end-procedure


begin-procedure Write-Entry-Detail

  do insert-rpt-line

  move '6'  to $RecordType
  move '0'  to $CheckDigit
  move '0001'  to $NbrAddenda
  move ' '  to $DiscrData
  move '1'  to $AddendaIndicator
  move ' '  to $TraceNbr
  move '  '  to $Sp
  move &GARN_SPEC.EMPLID to $EmplID

  if &GARN_SPEC.ACCOUNT_TYPE = 'C'
    move '22' to $TransactionCode           !DDA Automatic Credit
  else   !Savings
    move '32' to $TransactionCode           !TDA Automatic Credit
  end-if

  move &GARN_SPEC.BANK_CD to $TransitRoutingNbr
  do Calc-DFI-CheckDigit
  move &GARN_SPEC.BANK_CD to $hashTransitNbr xxxxxxxx  !Only first eight numbers
  move $hashTransitNbr to #hashTransitNbr
  add #hashTransitNbr to #BatchEntryHash

  multiply 100 times #Amount                  !Remove decimal
  do Format-Number(#Amount, $Amount, '0000000009')
  add #Amount to #TotBatchCreditAmt
  add #Amount to #TotBatchDebitAmt            ! for offset record

  add 1 to #BatchEntryCount
  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add  1 to #FileBlockCount
  end-if

  add 1     to #TraceNbr
  move #TraceNbr to $TraceNbr 099999999999999

  let $Transit_Temp = substr($TransitNbr, 0, 8)
  do Format-Number(#TraceNbr, $Trace_Temp, '0999999')
  let $Alt_Trace = $Transit_Temp || $Trace_Temp

  write 1 from  $RecordType:1               -                   ! 01
                $TransactionCode:2          -                   ! 02
                &GARN_SPEC.BANK_CD:8        -                   ! 04
                $CheckDigit:1               -                   ! 12
                &GARN_SPEC.ACCOUNT_NUM:17   -                   ! 13
                $Amount:10                  -                   ! 30
                $EmplID:15                  -                   ! 40
                $Receiv_Co_Name:22          -                   ! 55
                $DiscrData:2                -                   ! 77
                $AddendaIndicator:1         -                   ! 79
                $Alt_Trace:15                                   ! 80

end-procedure

begin-procedure Write-Entry-Detail-Addenda


  move '7'                    to $RecordType
  move '05'                   to $AddTypeCode
  move '0001'                 to $AddendaSequence_Nbr
  let $EntryDetailSequenceNbr  = substr($Alt_Trace, 9, 7)

  add 1 to #BatchEntryCount
  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add  1 to #FileBlockCount
  end-if



  write 1 from  $RecordType:1               -                   ! 01
                $AddTypeCode:2              -                   ! 02
                $Addendum_info:80           -                   ! 04
                $AddendaSequence_Nbr:4      -                   ! 84
                $EntryDetailSequenceNbr:7                       ! 88

end-procedure

begin-PROCEDURE Close-File

  if #BlockCount <> 0 and #BlockCount <> 10
    do Complete-Block
  end-if

  close 1
  move 'N' to $FileOpen

end-PROCEDURE


 !begin-procedure Write-Offset-Record
 !
 ! move '6'                to $RecordType
 ! move '27'               to $TransactionCode        !DDA Automatic Debit
 ! move '0'                to $CheckDigit
 ! do Format-Number(#TotBatchDebitAmt, $Amount, '0000000009')
 ! move ' '                to $DiscrData
 ! move '0'                to $AddendaIndicator
 ! add 1     to #TraceNbr
 !
 ! let $Transit_Temp = substr($priorTransitNbr, 0, 8)
 ! do Format-Number(#TraceNbr, $Trace_Temp, '0999999')
 ! let $Alt_Trace = $Transit_Temp || $Trace_Temp
 !
 ! add 1 to #BatchEntryCount
 !
 ! move $priorAccountNbr to $CoAccountNbr
 ! move $priorTransitNbr to $TransitRoutingNbr
 ! do Calc-DFI-CheckDigit
 !
 ! move $priorTransitNbr to $hashTransitNbr xxxxxxxx    !Only first eight numbers
 ! move $hashTransitNbr to #hashTransitNbr
 ! add #hashTransitNbr to #BatchEntryHash
 !
 ! add 1 to #BlockCount
 !
 ! if #BlockCount = 10
 !   move 0 to #BlockCount
 !   add  1 to #FileBlockCount
 ! end-if
 !
 ! write 1 from  $RecordType:1           -
 !               $TransactionCode:2      -
 !               $priorTransitNbr:8        -              ! company
 !               $CheckDigit:1           -
 !               $CoAccountNbr:17          -              ! company
 !               $Amount:10              -
 !               $Batch_CompanyID:15     -
 !               $Batch_CompanyName:22   -
 !               $DiscrData:2            -
 !               $AddendaIndicator:1     -
 !               $Alt_Trace:15
 !
 !end-procedure


begin-procedure Write-Batch-Control

  move '8'                    to $RecordType
  move '200'                  to $ServiceClassCode

  add  #BatchEntryCount       to #FileEntryCount
  do Format-Number(#BatchEntryCount, $BatchEntryCount, '000009')
  move 0 to #BatchEntryCount

  add  #BatchEntryHash        to #FileEntryHash
  do Format-Number(#BatchEntryHash, $TestEntryHash, '09999999999999999')
  concat '*' with $TestEntryHash
  find '*' in $TestEntryHash 0 #Loc

  if #Loc > 10
    subtract 10 from #loc
    extract $BatchEntryHash   from $TestEntryHash #loc 10
  else
    do Format-Number(#BatchEntryHash, $BatchFileEntryHash, '0999999999')
  end-if

  add  #TotBatchDebitAmt      to #TotFileDebitAmt
  do Format-Number(#TotBatchDebitAmt, $TotBatchDebitAmt, '000000000009')

  add  #TotBatchCreditAmt     to #TotFileCreditAmt
  do Format-Number(#TotBatchCreditAmt, $TotBatchCreditAmt, '000000000009')

  move ' '                    to $Reserved1
  move ' '                    to $Reserved2
  move $priorTransitNbr         to $TransitRoutingNbr
  do Format-Number(#BatchNbr, $BatchNbr, '0000009')

  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add  1 to #FileBlockCount
  end-if

  write 1 from  $RecordType:1                -
                $ServiceClassCode:3          -
                $BatchEntryCount:6           -
                $BatchEntryHash:10           -
                $TotBatchDebitAmt:12         -
                $TotBatchCreditAmt:12        -
                $Batch_CompanyID:10          -
                $Reserved1:19                -
                $Reserved2:6                 -
                $TransitRoutingNbr:8           -
                $BatchNbr:7

  move 'N' to $BatchOpen
end-procedure


begin-procedure Write-File-Control

  move '9'                    to $RecordType
  do Format-Number(#FileBatchCount, $FileBatchCount, '000009')
  do Format-Number(#FileEntryCount, $FileEntryCount, '00000009')

  do Format-Number(#FileEntryHash, $TestEntryHash, '09999999999999999')
  concat '*' with $TestEntryHash
  find '*' in $TestEntryHash 0 #Loc

  if #Loc > 10
    subtract 10 from #loc
    extract $FileEntryHash from $TestEntryHash #loc 10
  else
    do Format-Number(#FileEntryHash, $FileEntryHash, '0999999999')
  end-if

  do Format-Number(#TotFileDebitAmt, $TotFileDebitAmt, '000000000009')
  do Format-Number(#TotFileCreditAmt, $TotFileCreditAmt, '000000000009')
  move ' '                    to $Reserved1

  add 1 to #BlockCount

  if #BlockCount = 10
    move 0 to #BlockCount
    add  1 to #FileBlockCount
  else
    if #BlockCount > 0
      add  1 to #FileBlockCount
    end-if
  end-if

  do Format-Number(#FileBlockCount, $FileBlockCount, '000009')

  write 1 from  $RecordType:1            -
                $FileBatchCount:6        -
                $FileBlockCount:6        -
                $FileEntryCount:8        -
                $FileEntryHash:10        -
                $TotFileDebitAmt:12      -
                $TotFileCreditAmt:12     -
                $Reserved1:39

end-procedure


begin-procedure Complete-Block

  move '999999999999999999999999999999' to $ThirtyNines

  while #BlockCount < 10
    write 1 from  $ThirtyNines:30        -
                  $ThirtyNines:30        -
                  $ThirtyNines:30        -
                  $ThirtyNines:4
    add 1 to #BlockCount

  end-while

end-procedure


begin-PROCEDURE Calc-DFI-CheckDigit

  move 0 to #CheckDigit
  move 0 to #i

  while #i <= #lastIndex
    extract $digit from $TransitRoutingNbr #i 1
    move $digit to #digit
    get #factor from Weights(0) Factor(#i)
    multiply #factor times #digit
    add #digit to #CheckDigit
    add 1 to #i
  end-while

  while #CheckDigit > 9
    subtract 10 from #CheckDigit
  end-while

  do Format-Number(#CheckDigit, $CheckDigit, '9')
  move $CheckDigit to #tempDigit
  move 10 to #CheckDigit
  subtract #tempDigit from #CheckDigit

  while #CheckDigit > 9
    subtract 10 from #CheckDigit
  end-while

  do Format-Number(#CheckDigit, $CheckDigit, '9')

end-PROCEDURE  !Calc-DFI-CheckDigit


begin-procedure Get-Transit-Descr

begin-SELECT
C.BANK_NM
 FROM PS_BANK_EC_TBL C
WHERE C.BANK_CD = $TransitNbr
end-SELECT

end-procedure


!********************************
begin-procedure Process-Cycles
!********************************

display ' '
display 'Processing On Cycle Payments for Run ID - ' noline
display $run_id

BEGIN-SELECT

ONCHK.COMPANY
ONCHK.PAYGROUP
ONCHK.PAY_END_DT
ONCHK.OFF_CYCLE
ONCHK.PAGE_NUM
ONCHK.LINE_NUM
ONCHK.SEPCHK
ONCHK.EMPLID
ONCHK.EMPL_RCD
ONCHK.PAYCHECK_NBR
ONCHK.NAME
ONCHK.FORM_ID
ONCHK.SSN
ONCHK.NET_PAY
ONCHK.CHECK_DT
ONCHK.PAYCHECK_OPTION
ONCHK.PAYCHECK_NAME
ONCHK.ADDRESS1
ONCHK.ADDRESS2
ONCHK.ADDRESS3
ONCHK.ADDRESS4
ONCHK.CITY
ONCHK.STATE
ONCHK.POSTAL


    do reset-check-variables

    let $check_company       = rtrim(&ONCHK.COMPANY,' ')
    let $check_paygroup      = rtrim(&ONCHK.PAYGROUP,' ')
    let $check_pay_end_dt    = &ONCHK.PAY_END_DT
    let $check_off_cycle     = rtrim(&ONCHK.OFF_CYCLE,' ')
    let #check_page_nbr      = &ONCHK.PAGE_NUM
    let #check_line_nbr      = &ONCHK.LINE_NUM
    let #check_sepchk        = &ONCHK.SEPCHK
    let $check_emplid        = rtrim(&ONCHK.EMPLID,' ')
    let #check_empl_rcd_nbr  = &ONCHK.EMPL_RCD
    let $check_ssn           = rtrim(&ONCHK.SSN,' ')
    let $check_dt            = &ONCHK.CHECK_DT
    let $check_paycheck_name = rtrim(&ONCHK.PAYCHECK_NAME,' ')
    let #check_net_pay       = &ONCHK.NET_PAY
    let $check_option        = rtrim(&ONCHK.PAYCHECK_OPTION,' ')
    let $check_address1      = rtrim(&ONCHK.ADDRESS1,' ')
    let $check_address2      = rtrim(&ONCHK.ADDRESS2,' ')
    let $check_postal        = rtrim(&ONCHK.POSTAL,' ')
    let $check_city          = rtrim(&ONCHK.CITY,' ')
    let $check_state         = rtrim(&ONCHK.STATE,' ')

    if $check_date = ''

       let $save_check_date = &ONCHK.CHECK_DT
       let $work_check_date = datetostr(&ONCHK.CHECK_DT,'MMDDYYYY')
    end-if

    do process-deductions

FROM PS_PAY_CHECK ONCHK,
     PS_PAY_CALENDAR CAL1

WHERE CAL1.RUN_ID          = $run_id
AND   CAL1.PAY_CONFIRM_RUN = 'Y'
AND   ONCHK.COMPANY        = CAL1.COMPANY
AND   ONCHK.PAYGROUP       = CAL1.PAYGROUP
AND   ONCHK.PAY_END_DT     = CAL1.PAY_END_DT
AND &A.COMPANY             = CAL1.COMPANY
AND &A.PAYGROUP            = CAL1.PAYGROUP
AND &A.PAY_END_DT          = CAL1.PAY_END_DT


END-SELECT

let $control_end_date = datetostr(&ONCHK.PAY_END_DT,'MMDDYYYY')

end-procedure       !process-on-cycles


!************************************
begin-procedure reset-check-variables
!************************************
let $check_company       = ''
let $check_paygroup      = ''
let $check_pay_end_dt    = ''
let $check_off_cycle     = ''
let #check_page_nbr      = 0
let #check_line_nbr      = 0
let #check_sepchk        = 0
let $check_emplid        = ''
let #check_empl_rcd_nbr  = 0
let $check_ssn           = ''
let $check_dt            = ''
let $check_paycheck_name = ''
let #check_net_pay       = 0
let $check_option        = ''
let $check_address1      = ''
let $check_address2      = ''
let $check_postal        = ''
let $check_city          = ''
let $check_state         = ''
let $check_gvt_schedule  = ''

end-procedure       !reset-check-variables




!*********************************
begin-procedure process-deductions
!*********************************


BEGIN-SELECT

DED.PLAN_TYPE
DED.BENEFIT_PLAN
DED.DEDCD
DED.DED_CLASS
DED.DED_SLSTX_CLASS
DED.DED_CUR
DEDTBL.SPCL_PROCESS

!  AO mod - begin - added the following 'if..else..end-if' condition to prevent processing of
!                   employees who have negative amounts for SHPS/LTC deductions. C2.070

    if &DED.DED_CUR < 0 and
      (&DED.DEDCD = 'FSAHC' or
       &DED.DEDCD = 'FSADC' or
       &DED.DEDCD = 'FSACR' or
       &DED.DEDCD = 'FSAPR' or
       &DED.DEDCD = 'LTC')

        let $Print_Amount = to_char(&DED.DED_CUR)
        let $Print_Line = $check_emplid ||' - '||$check_paycheck_name||', '|| $Print_Amount
        let $Print_Line = $Print_line || ',  has a negative FSA/LTC value.'
        print $print_line    (+2, 1)

        let $exception_flag = 'Y'

    else

        let $last_deduction_routed  = ''
        let $deduction_plan_type    = &DED.PLAN_TYPE
        let $deduction_benefit_plan = &DED.BENEFIT_PLAN
        let $deduction_code         = &DED.DEDCD
        let $deduction_class        = &DED.DED_CLASS
        let $deduction_slstx_class  = &DED.DED_SLSTX_CLASS

        !--- if   &DED.DED_CUR > 0  --- check for negative amt in the individual garn level

             let $processing = 'garnish'

             do process-garnishments

        !--- end-if
    end-if


    !C2.070 End
FROM PS_PAY_DEDUCTION DED, PS_DEDUCTION_TBL DEDTBL

WHERE DED.COMPANY         = $check_company
AND   DED.PAYGROUP        = $check_paygroup
AND   DED.PAY_END_DT      = $check_pay_end_dt
AND   DED.OFF_CYCLE       = $check_off_cycle
AND   DED.PAGE_NUM        = #check_page_nbr
AND   DED.LINE_NUM        = #check_line_nbr
AND   DED.SEPCHK          = #check_sepchk
AND   DED.PLAN_TYPE       = DEDTBL.PLAN_TYPE
AND   DED.DEDCD           = DEDTBL.DEDCD
AND   DEDTBL.SPCL_PROCESS = 'G'
AND   DEDTBL.EFFDT =  (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL DEDTBL2
                       WHERE DEDTBL.PLAN_TYPE = DEDTBL2.PLAN_TYPE
                       AND DEDTBL.DEDCD = DEDTBL2.DEDCD
                       AND DEDTBL2.EFFDT <= $check_pay_end_dt)

END-SELECT

let $last_deduction_routed  = ''

end-procedure


!***********************************
begin-procedure process-garnishments
!***********************************

move 'XX' to $Prev_Remit_State
move ' '  to $Receiv_Co_Name

BEGIN-SELECT

GARN_SPEC.EMPLID
GARN_SPEC.GARNID
GARN_SPEC.EFT_PAYMNT
GARN_SPEC.EFT_REMIT_STATE
GARN_SPEC.BANK_CD
GARN_SPEC.ACCOUNT_NUM
GARN_SPEC.ACCOUNT_TYPE
GARN_SPEC.CASE_IDENTIFIER
GARN_SPEC.FIPS_CODE
GARN_SPEC.GARN_DED_AMT
GARN_SPEC.GARN_TYPE

  do get-garn-deduction-amount
  
  if #payment_amount > 0
  
     move 'Y' to $Details_Processed

     if $NewFile = 'Y'
       move 'N' to $NewFile
       do Start-New-File
     end-if

     if $NewBatch = 'Y'
       move 'N' to $NewBatch
       do Start-New-Batch
     end-if

     if &GARN_SPEC.EFT_REMIT_STATE <> $Prev_Remit_State

        do Get-State-SDU-Name

        move &GARN_SPEC.EFT_REMIT_STATE to $Prev_Remit_State
     end-if

     do Write-Entry-Detail

     do Format-EFT
     do Write-Entry-Detail-Addenda

     let $last_deduction_routed = 'E'

     let #garn_deduct_amt = 0
  
  end-if

FROM  PS_GARN_SPEC GARN_SPEC

WHERE GARN_SPEC.EMPLID  = $check_emplid
AND   GARN_SPEC.COMPANY = $check_company
AND   GARN_SPEC.EFT_PAYMNT = 'Y'

END-SELECT

end-procedure       !process-garnishments

!****************************************
begin-procedure get-garn-deduction-amount
!****************************************

  let #amount = 0
  let #payment_amount = 0

BEGIN-SELECT
GARN_PAY.DEDUCT_GARN_AMT &GARN_PAY.DEDUCT_AMT

 let #payment_amount = &GARN_PAY.DEDUCT_AMT
 let #amount = &GARN_PAY.DEDUCT_AMT

FROM  PS_PAY_GARNISH GARN_PAY
WHERE GARN_PAY.COMPANY    =   $check_company
AND   GARN_PAY.PAYGROUP   =   $check_paygroup
AND   GARN_PAY.PAY_END_DT =   $check_pay_end_dt
AND   GARN_PAY.OFF_CYCLE  =   $check_off_cycle
AND   GARN_PAY.PAGE_NUM   =   #check_page_nbr
AND   GARN_PAY.LINE_NUM   =   #check_line_nbr
AND   GARN_PAY.SEPCHK     =   #check_sepchk
AND   GARN_PAY.GARNID     =   &GARN_SPEC.GARNID

END-SELECT

end-procedure       !get-garn-deduction-amount


!*************************
begin-procedure Format-EFT
!*************************

let $record_code = 'A'

let $remittance_is_due = 'N'

evaluate $processing

    when = 'garnish'

        let #amount            =   &GARN_PAY.DEDUCT_AMT

        let #eft_garn_tot      = #eft_garn_tot + #amount
        let #eft_garn_count    = #eft_garn_count + 1

        multiply 100 times #Amount
        do Format-Number(#Amount, $payment_amount, '0000000009')

         do format-CCD-addenda

        BREAK

end-evaluate

end-procedure       !format-eft


!****************************
begin-procedure format-CCD-addenda
!****************************
!format vendor CCD addenda


   let $ded01              = ''
   let $ded02              = ''
   let $ded03              = ''
   let $ded04              = ''
   let $ded05              = ''
   let $ded06              = ''
   let $ded07              = ''
   let $ded08              = ''
   let $ded09              = ''
   evaluate $processing
      when = 'garnish'
         evaluate &GARN_SPEC.GARN_TYPE
            when = 'C'
               let $ded          = 'DED'
               let $ded01        = 'CS'
               let $ded02        = substr(rtrim(&GARN_SPEC.CASE_IDENTIFIER,' '),1,20)

               let $ded03        = datetostr(&ONCHK.CHECK_DT,'YYMMDD')
               do Format-Number(#Amount, $ded04, '0000000009')
               let $ded05        = rtrim($check_ssn,' ')

               do Get-Garn-Job-Fields

               if $plan_type_10 = 'Y'
                   let $ded06  = 'Y'                                  !medical support indicator
               else
                   let $ded06  = 'N'                                  !medical support indicator
               end-if

               let $fixed_ccd_paycheck_name = ' '
               do Fix-Name

               let $ded07        = substr(upper($fixed_ccd_paycheck_name),1,10)       !non custodial parent name

               let $ded08        = substr(rtrim(&GARN_SPEC.FIPS_CODE,' '),1,7)        !fipps code

               evaluate &GJ.EMPL_STATUS
                  when = 'D'
                  when = 'R'
                  when = 'S'
                  when = 'T'
                     let $ded09  = 'Y'                                         !emp termination ind
                     break
               end-evaluate

               add 1 to #garn_child_support_count
               add #amount to #total_garn_child_support_amt

               break

            when-other
               break
         end-evaluate
      when-other
         !stub for future CCD payment types
         break
   end-evaluate

   let $Addendum_info         = ''

   if isblank($ded09)

      if isblank($ded08)

         if isblank($ded07)   !field 7 and 8 and 9 are blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'\'

         else                 !field 8 and 9 are blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'\'

         end-if

      else

         if isblank($ded07)   !field 7 and 9 are blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'**'||upper($ded08)||'\'

         else                 !field 9 is blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'*'||upper($ded08)||'\'

        end-if

      end-if

   else

      if isblank($ded08)

         if isblank($ded07)   !field 7 and 8 are blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'***'||upper($ded09)||'\'

         else                 !field 8 is blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'**'||upper($ded09)||'\'

         end-if

      else

         if isblank($ded07)   !field 7 is blank

            let $Addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'**'||upper($ded08)||'*'||upper($ded09)||'\'

         else                 !all 9 fields have a value

            let $Addendum_info =
                upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'*'||upper($ded08)||'*'||upper($ded09)||'\'

         end-if

      end-if

   end-if

end-procedure       !format-CCD-addenda



begin-procedure Get-Garn-Job-Fields
begin-select
GJ.EMPL_STATUS

FROM PS_JOB GJ
WHERE GJ.EMPLID = $check_emplid
AND   GJ.EMPL_RCD = #check_empl_rcd_nbr
AND   GJ.EFFDT = (SELECT MAX(GJ1.EFFDT) FROM PS_JOB GJ1
                  WHERE GJ1.EMPLID = GJ.EMPLID
                  AND   GJ1.EMPL_RCD = GJ.EMPL_RCD
                  AND   GJ1.EFFDT <= $check_pay_end_dt)
AND   GJ.EFFSEQ = (SELECT MAX(GJ2.EFFSEQ) FROM PS_JOB GJ2
                  WHERE GJ2.EMPLID = GJ.EMPLID
                  AND   GJ2.EMPL_RCD = GJ.EMPL_RCD
                  AND   GJ2.EFFDT = GJ.EFFDT)
end-select


let $plan_type_10 = 'N'

begin-select
GH.PLAN_TYPE

  let $plan_type_10 = 'Y'

FROM PS_HEALTH_BENEFIT GH
WHERE GH.EMPLID = $check_emplid
AND   GH.PLAN_TYPE = '10'
AND   GH.EFFDT = (SELECT MAX(GH1.EFFDT) FROM PS_HEALTH_BENEFIT GH1
                  WHERE GH1.EMPLID = GH.EMPLID
                  AND   GH1.EMPL_RCD = GH.EMPL_RCD
                  AND   GH1.PLAN_TYPE = GH.PLAN_TYPE
                  AND   GH1.EFFDT <= $check_pay_end_dt)

end-select

end-procedure


begin-procedure Fix-Name

  let #name_length = length($check_paycheck_name)
  find ',' in $check_paycheck_name 0 #locn
  extract $LastName  from $check_paycheck_name 0 #locn
  let #first_name_locn = #locn + 1
  let #end_name = #name_length - #locn

  extract $FirstName from $check_paycheck_name #first_name_locn #name_length

  let #last_name_length  = length($LastName)
  let #first_name_length = length($FirstName)

  if #last_name_length = 7
     let $fixed_ccd_paycheck_name = $LastName || $FirstName
  else
     if #last_name_length < 7
        let $fixed_ccd_paycheck_name = $LastName || ',' || $FirstName
     else
         if #first_name_length > 2
            let $fixed_ccd_paycheck_name = substr($LastName,1,7) || $FirstName
         else
            let $fixed_ccd_paycheck_name = substr($LastName,1,7) || ',' ||  $FirstName
         end-if
     end-if
  end-if
end-procedure


begin-procedure Select-Parameters-File-Co

begin-select

P1.COMPANY

FROM  PS_RC_PAY040_CO P1
WHERE P1.OPRID          = $Prcs_OprID
AND   P1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
AND   P1.BANK_CD        = $PriorTransitNbr
end-select

  let  $File_Co = &P1.Company

end-procedure



begin-procedure Company-Run-Control
begin-select
RP.RUN_ID
RP.TEXT20
FROM PS_RC_PAY040 RP
WHERE RP.OPRID = $Prcs_OprID
  AND RP.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SELECT

  let $SlctRunID    = rtrim( &RP.RUN_ID,' ')
  let $run_ID        = rtrim( &RP.RUN_ID,' ')

  move  'A.RUN_ID = ''' to $SlctCalndr
  concat $SlctRunID     with $SlctCalndr
  concat ''''           with $SlctCalndr

  let $CustDiscrData = rtrim(&RP.TEXT20,' ')


end-procedure

begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
end-procedure



!----------------------------------------------------------------------------
! Write EFT register report
!----------------------------------------------------------------------------
begin-procedure Write-EFT-Report

LET #EFT_PAGE_TOTAL    = 0
LET #EFT_GRAND_TOTAL   = 0
LET $PREV_COMPANY      = ''
LET $PREV_PAYGROUP     = ''
LET $PREV_STATE        = ''
LET $PRINT_FIRST       = 'Y'
LET $PREV_PAY_END_DT   = ''
let $Print_Detail_Flag = 'N'

if $exception_flag = 'Y'
   new-page
end-if

begin-select
EFT.COMPANY
EFT.PAYGROUP
EFT.EFT_REMIT_STATE
EFT.PAY_END_DT
EFT.PAYCHECK_NBR
EFT.EMPLID
EFT.SSN
EFT.NAME
EFT.CASE_IDENTIFIER
EFT.DEDUCT_AMT

  IF $PRINT_FIRST = 'Y'
     LET $PRINT_FIRST     = 'N'
     LET $PREV_COMPANY    = &EFT.COMPANY
     LET $PREV_PAYGROUP   = &EFT.PAYGROUP
     LET $PREV_STATE      = &EFT.EFT_REMIT_STATE
     LET $PREV_PAY_END_DT = &EFT.PAY_END_DT
  END-IF

  if $PREV_COMPANY  <> &EFT.COMPANY  or
     $PREV_PAYGROUP <> &EFT.PAYGROUP or
     $PREV_STATE    <> &EFT.EFT_REMIT_STATE or
     #current_line   > {pay040_max_print_line}

     PRINT $PAY040_PAGE_TOTAL                 ( +2,{pay040_ssn})
     PRINT #EFT_PAGE_TOTAL                    (  0,{pay040_pymt_amt})  edit $,$$$,$$9.99

     LET $Company    = $PREV_COMPANY
     LET $PayGroup   = $PREV_PAYGROUP
     LET $PayEndDate = $PREV_PAY_END_DT

     NEW-PAGE
     LET #EFT_PAGE_TOTAL = 0

  END-IF

  print &EFT.SSN                              (+1,{pay040_ssn})
  print &EFT.NAME                             ( 0,{pay040_name})
  print &EFT.EMPLID                           ( 0,{pay040_emplid})
  print &EFT.CASE_IDENTIFIER                  ( 0,{pay040_case_id})
  print &EFT.EFT_REMIT_STATE                  ( 0,{pay040_remit_state})
  print &EFT.DEDUCT_AMT                       ( 0,{pay040_pymt_amt})  edit $,$$$,$$9.99

  LET #EFT_PAGE_TOTAL  = #EFT_PAGE_TOTAL  + &EFT.DEDUCT_AMT
  LET #EFT_GRAND_TOTAL = #EFT_GRAND_TOTAL + &EFT.DEDUCT_AMT

  LET $PREV_COMPANY    = &EFT.COMPANY
  LET $PREV_PAYGROUP   = &EFT.PAYGROUP
  LET $PREV_STATE      = &EFT.EFT_REMIT_STATE
  LET $PREV_PAY_END_DT = &EFT.PAY_END_DT

  let $Print_Detail_Flag = 'Y'

FROM PS_R_PAY040_TMP EFT
WHERE EFT.PROCESS_INSTANCE = #prcs_process_instance
ORDER BY
EFT.PROCESS_INSTANCE,
EFT.COMPANY,
EFT.PAYGROUP,
EFT.EFT_REMIT_STATE,
EFT.NAME
end-SELECT


!--- Print final total ---
PRINT $PAY040_PAGE_TOTAL                 ( +2,{pay040_ssn})
PRINT #EFT_PAGE_TOTAL                    (  0,{pay040_pymt_amt})  edit $,$$$,$$9.99

PRINT $PAY040_GRAND_TOTAL                ( +2,{pay040_ssn})
PRINT #EFT_GRAND_TOTAL                   (  0,{pay040_pymt_amt})  edit $,$$$,$$9.99


!--- Use a globalized string if one was gotten from stdhdgtr ---
if $stdhdg_end_rep = ''
   print 'End of Report' (+1,1) center
else
   print $stdhdg_end_rep (+1,1) center
end-if

LET $Company    = $PREV_COMPANY
LET $PayGroup   = $PREV_PAYGROUP
LET $PayEndDate = $PREV_PAY_END_DT

end-procedure



!----------------------------------------------------------------------------
! Insert EFT Data for reporting later
!----------------------------------------------------------------------------
begin-procedure Insert-rpt-line

begin-SQL on-error=Insert-Error-rpt-line
  INSERT INTO PS_R_PAY040_TMP
         (PROCESS_INSTANCE,
          COMPANY,
          PAYGROUP,
          EFT_REMIT_STATE,
          PAY_END_DT,
          PAYCHECK_NBR,
          EMPLID,
          SSN,
          NAME,
          CASE_IDENTIFIER,
          DEDUCT_AMT)
  VALUES (#prcs_process_instance,
          &ONCHK.COMPANY,
          &ONCHK.PAYGROUP,
          &GARN_SPEC.EFT_REMIT_STATE,
          &ONCHK.PAY_END_DT,
          &ONCHK.PAYCHECK_NBR,
          &ONCHK.EMPLID,
          &ONCHK.SSN,
          &ONCHK.NAME,
          &GARN_SPEC.CASE_IDENTIFIER,
          #PAYMENT_AMOUNT)

end-SQL

end-procedure



!----------------------------------------------------------------------------
! Get State SDU Name
!----------------------------------------------------------------------------
begin-procedure Get-State-SDU-Name

move ' ' to $Receiv_Co_Name

BEGIN-SELECT
SDU.STATE_DESCR2

   move &SDU.STATE_DESCR2 to $Receiv_Co_Name

FROM PS_REMIT_STATE_TBL SDU
WHERE STATE = &GARN_SPEC.EFT_REMIT_STATE
AND STATUS = 'A'
END-SELECT

end-procedure



!----------------------------------------------------------------------------
! Clear temp tables
!----------------------------------------------------------------------------
begin-procedure Clear-temp-tables

   begin-SQL  on-error=Ignore
     DELETE FROM PS_R_PAY040
   end-SQL

   begin-SQL  on-error=Ignore
     DELETE FROM PS_R_PAY040_TMP
     WHERE PROCESS_INSTANCE = #prcs_process_instance
   end-SQL

end-procedure



!----------------------------------------------------------------------------
! Error routine for SQL Insert to PS_R_PAY040_TMP
!----------------------------------------------------------------------------
begin-procedure Insert-Error-rpt-line

  display 'Error on insert PS_R_PAY040_TMP' noline
  display '>>>>>>'
  display 'COMPANY     '
  display &ONCHK.COMPANY
  display 'PAYGROUP    '
  display &ONCHK.PAYGROUP
  display 'REMIT STATE '
  display &GARN_SPEC.EFT_REMIT_STATE
  display 'CHECK#      '
  display &ONCHK.PAYCHECK_NBR
  display 'EMPLID      '
  display &ONCHK.EMPLID

  display '*************'

  do sql-error
end-procedure
