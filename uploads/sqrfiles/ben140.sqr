!*******************************************
!  BEN140:  Billing Payment Interface      *
!*******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:45:25                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup


#define col_emplid              1
#define col_name               13
#define col_post_dt            52
#define col_totals             62
#define col_tot_pay            65
#define col_counts             68
#define col_bill_per_col       78
#define col_bill_per_dta       79
#define col_ben_prog_col       88
#define col_ben_prog_dta       90
#define col_plan_type_col      98
#define col_plan_type_dta      99
#define col_plan_desc         104
#define col_ben_plan          118
#define col_ben_desc          127
#define col_cov_code_col      150
#define col_cov_code_col_desc 148
#define col_cov_code_dta      152
#define col_chrg_amt          156
#define col_chrg_amt_desc     158
#define col_pay_amt           166

#define col_name_len           40
#define col_ben_desc_len       20

#define amt_mask1             $99,999.99
#define amt_mask2             99,999.99
#define amt_mask3             $9,999,999.99
#define count_mask            999,999


!************
Begin-Program
!************

  do Init-Report
  do Get-Report-Language
!--- BILLING PAYMENT INTERFACE ---
  let $ReportTitle  = $BEN140-REPORTTITLE

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ' '

  display 'Report Begin at ' noline
  do Display-time

  do Main-Report

  display 'Report Ended at ' noline
  do Display-time

  do Reset
  do StdAPI-Term

End-Program


!***************************
Begin-Procedure Init-Report
!***************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Get-Max-ID

  let #Total_Amt = 0
  let #Total_Rec = 0
  let #Total_Errors = 0
  let #Total_Process = 0
  let #Total_Applied = 0
  let #Total_Credit = 0

  let $ReportID    = 'BEN140'

  do StdAPI-Init

End-Procedure

!**********************************
! This procedure is used to read language-dependent text from the database.
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN140 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN140','REPORT_TITLE', $BEN140-REPORTTITLE, #CW)
  do Get_Field_Information ('BEN140','APPLIED',      $BEN140-APPLIED,     #CW)
  do Get_Field_Information ('BEN140','ERR_MSG01',    $BEN140-ERR-MSG01,   #CW)
  do Get_Field_Information ('BEN140','ERR_MSG02',    $BEN140-ERR-MSG02,   #CW)
  do Get_Field_Information ('BEN140','ERR_MSG03',    $BEN140-ERR-MSG03,   #CW)
  do Get_Field_Information ('BEN140','ERR_MSG04',    $BEN140-ERR-MSG04,   #CW)
  do Get_Field_Information ('BEN140','ERR_MSG05',    $BEN140-ERR-MSG05,   #CW)
  do Get_Field_Information ('BEN140','ERR_MSG06',    $BEN140-ERR-MSG06,   #CW)
  do Get_Field_Information ('BEN140','ERROR',        $BEN140-ERROR,       #CW)
  do Get_Field_Information ('BEN140','TOT_REC_01',   $BEN140-TOT-REC-01,  #CW)
  do Get_Field_Information ('BEN140','TOT_REC_02',   $BEN140-TOT-REC-02,  #CW)
  do Get_Field_Information ('BEN140','TOT_REC_03',   $BEN140-TOT-REC-03,  #CW)
  do Get_Field_Information ('BEN140','TOT_REC_04',   $BEN140-TOT-REC-04,  #CW)
  do Get_Field_Information ('BEN140','TOT_REC_05',   $BEN140-TOT-REC-05,  #CW)
  do Get_Field_Information ('BEN140','TOT_REC_06',   $BEN140-TOT-REC-06,  #CW)

  do Get_Field_Information ('BEN1',  'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',  'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',  'NAME',         $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',  'PLAN',         $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',  'COVERAGE',     $BEN1-COVERAGE,      #CW)
  do Get_Field_Information ('BEN1',  'BENEFIT',      $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',  'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',  'TYPE',         $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',  'CODE',         $BEN1-CODE,          #CW)
  do Get_Field_Information ('BEN1',  'AMT',          $BEN1-AMT,           #CW)
  do Get_Field_Information ('BEN1',  'PAYMENT',      $BEN1-PAYMENT,       #CW)
  do Get_Field_Information ('BEN1',  'DUE',          $BEN1-DUE,           #CW)
  do Get_Field_Information ('BEN1',  'DESCR',        $BEN1-DESCR,         #CW)
  do Get_Field_Information ('BEN1',  'PROGRAM',      $BEN1-PROGRAM,       #CW)
  do Get_Field_Information ('BEN1',  'BILLING',      $BEN1-BILLING,       #CW)
  do Get_Field_Information ('BEN1',  'PERIOD',       $BEN1-PERIOD,        #CW)

End-Procedure

!**************************
Begin-Procedure Get-Max-ID
!**************************

  let #Bill_Pay_ID = 1

Begin-Select
MAX(Z.BILL_PAY_ID) &MaxID

    let #Bill_Pay_ID = &MaxID

From  PS_BEN_BI_PAYMENT Z
End-Select

End-Procedure


!***************
Begin-Heading 7
!***************

#Include 'stdhdgtr.sqc'

  print $BEN1-EMPLOYEE                (+3,{col_emplid},11)
  print $BEN1-EMPLOYEE                 (0,{col_name},37)
  print $BEN1-PAYMENT                  (0,{col_post_dt},10)
  print $BEN1-PAYMENT                  (0,{col_tot_pay},11)
  print $BEN1-BILLING                  (0,{col_bill_per_col},8)
  print $BEN1-BENEFIT                  (0,{col_ben_prog_col},8)
  print $BEN1-PLAN                     (0,{col_plan_type_col},4)
  print $BEN1-BENEFIT                  (0,{col_ben_plan},7)
  print $BEN1-COVERAGE                 (0,{col_cov_code_col_desc},8)
  print $BEN1-AMT                      (0,{col_chrg_amt_desc},6)
  print $BEN1-PAYMENT                  (0,{col_pay_amt},7)

  print $BEN1-ID                       (+1,{col_emplid},11)
  print $BEN1-NAME                     (0,{col_name},37)
  print $BEN1-DATE                     (0,{col_post_dt},10)
  print $BEN1-AMT                      (0,{col_tot_pay},11)
  print $BEN1-PERIOD                   (0,{col_bill_per_col},8)
  print $BEN1-PROGRAM                  (0,{col_ben_prog_col},8)
  print $BEN1-TYPE                     (0,{col_plan_type_col},4)
  print $BEN1-DESCR                    (0,{col_plan_desc},12)
  print $BEN1-PLAN                     (0,{col_ben_plan},7)
  print $BEN1-DESCR                    (0,{col_ben_desc},19)
  print $BEN1-CODE                     (0,{col_cov_code_col_desc},8)
  print $BEN1-DUE                      (0,{col_chrg_amt_desc},6)
  print $BEN140-APPLIED                (0,{col_pay_amt},7)

End-Heading


!***************************
Begin-Procedure Main-Report
!***************************

  do Open-Payment-File
  do Get-Payment-Record

  while $End_of_File = 'N'

    let $Save_Emplid = $Emplid

    do Process-Charges

    while $Emplid = $Save_Emplid and
          $End_of_File = 'N'

      if #Total_Payment > 0
        do Write-Credit
        do Print-Credit
        add #Total_Payment to #Total_Credit
      end-if

      do Get-Payment-Record

    end-While

  end-While

  do Print-Totals

End-Procedure


!*********************************
Begin-Procedure Open-Payment-File
!*********************************

  open '{IMPORTPREFIX}BILLPMNT{IMPORTSUFFIX}' as 1 for-reading record=26:fixed

  let $End_of_File = 'N'

End-Procedure


!**********************************
Begin-Procedure Get-Payment-Record
!**********************************

  while 1 = 1

    read 1 into $Emplid:11       -
                $Posting_Date:8  -
                $Payment:7

    if #end-file = 1
      let $End_of_File = 'Y'
      close 1
      break
    else
      let #Total_Rec = #Total_Rec + 1
      do Process-Payment-Record
      if $Error = 'N'
        break
      end-if
    end-if

  end-while

End-Procedure


!**************************************
Begin-Procedure Process-Payment-Record
!**************************************

  move 'N'     to $Error
!--- Invalid data on payment record.
  move $BEN140-ERR-MSG03 to $ErrMsg

  move $Posting_Date to $Value
  move 8             to #Len
  do Numeric-Test

  if $Num = 'Y'
    extract $MM from $ReturnValue 1 2
    extract $DD from $ReturnValue 3 2
    extract $YYYY from $ReturnValue 5 4

    if $MM < '01' or $MM > '12'
      move 'Y' to $Error
!--- Bad Payment Month.
      move $BEN140-ERR-MSG04 to   $ErrMsg_Ext
    end-if

    if $DD < '01' or $DD > '31'
      move 'Y' to $Error
!--- Bad Payment Day.
      move $BEN140-ERR-MSG05 to   $ErrMsg_Ext
    end-if

    let $PrintDt = $MM || '/' || $DD || '/' || $YYYY
    let $PostDt = $YYYY || $MM || $DD

    do Format-DateTime($PostDt, $PostDt, {DEFCMP}, '', 'native')

  else

!--- Bad Post Date.
    move $BEN140-ERR-MSG01 to   $ErrMsg_Ext
    let $PrintDt = $PostDt

  end-if

  move $Payment to $Value
  move 7        to #Len
  do Numeric-Test

  if $Num = 'Y'
    move $ReturnValue to #Total_Payment
    divide 100      into #Total_Payment  !add decimal place
    move #Total_Payment to $PrintAmt {amt_mask1}
  else
!--- Bad Payment Amount.
    move $BEN140-ERR-MSG02   to   $ErrMsg_Ext
    move $Payment to $PrintAmt bbbxxxxxxx
  end-if

  let $Name = ' '
  if $Error = 'N'
    do Validate-Emplid
  end-if

  do Print-Payment

  if $Error = 'Y'
    do Print-Error
    let #Total_Errors = #Total_Errors + 1
  else
    do Write-Payment
    let #Total_Amt = #Total_Amt + #Total_Payment
    let #Total_Process = #Total_Process + 1
  end-if

  move  '' to $ErrMsg_Ext

End-Procedure


!****************************
Begin-Procedure Numeric-Test
!****************************

  move ' '  to $ReturnValue
  move 'Y' to $Num
  move 0   to #i

  while #i < #Len
    extract $char from $Value #i 1

    if $char >= '0' and $char <= '9'
      concat $char with $ReturnValue
    else
      if $char = ' '
        concat '0' with $ReturnValue
      else
        move 'N' to $Num
        move 'Y' to $Error
        break  !exit the "while"
      end-if

    end-if

    add 1 to #i
  end-while

End-Procedure


!*******************************
Begin-Procedure Validate-Emplid
!*******************************

  let $Error = 'Y'

Begin-Select
Y.EMPLID
Y.NAME

    let $Error = 'N'
    let $Name = &Y.Name

From  PS_PERSON_NAME Y
Where Y.EMPLID = $Emplid
Order By Y.EMPLID

End-Select

  if $Error = 'Y'
!--- Invalid Emplid.
    move $BEN140-ERR-MSG06 to   $ErrMsg_Ext
  end-if

End-Procedure


!*****************************
Begin-Procedure Print-Payment
!*****************************

  print $Emplid                        (+2,{col_emplid},11)
  print $Name                          (0,{col_name},37)
  print $PrintDt                       (0,{col_post_dt},10)
  print $PrintAmt                      (0,{col_tot_pay})

End-Procedure


!***************************
Begin-Procedure Print-Error
!***************************

  print $BEN140-ERROR          (+1,{col_emplid},19)
  print $Emplid                (0,21,11)
  print $Posting_Date          (0,33)
  print $Payment               (0,43)
  print $ErrMsg                (0,53)
  print $ErrMsg_Ext            ()

  move  '' to $ErrMsg_Ext

End-Procedure


!*****************************
Begin-Procedure Write-Payment
!*****************************

  do Get-Sequence
  let #Bill_Pay_Id = #Bill_Pay_Id + 1

  let $SQL-Statement = 'BEN140: Insert-Payment'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_BEN_BI_PAYMENT
( EMPLID,
  POSTING_DATE,
  POSTING_SEQUENCE,
  BILL_PAY_ID,
  PRINT_PERIOD,
  PAYMENT_ENTRY_DT,
  PAYMENT_SOURCE,
  PAYMENT_FORM
)
Values
( $EmplId,
  $PostDt,
  #Posting_Sequence,
  #Bill_Pay_Id,
  ' ',
  $AsOfToday,
  'A',
  'INT'
)
End-SQL

End-Procedure


!*******************************
Begin-Procedure Process-Charges
!*******************************

Begin-Select
A.BILL_CHARGE_ID
A.AMOUNT_DUE
A.EMPLID
A.DATE_DUE
A.BILL_PER_CD
A.PLAN_TYPE
A.BENEFIT_PROGRAM
A.BENEFIT_PLAN
A.DED_SLSTX_CLASS
A.COVRG_CD
A.TOTAL_CHARGE
B.PERIOD_END_DT

    let #Bill_Charge_ID = &A.Bill_Charge_ID
    let #Amount_Due = &A.Amount_Due
    let #Print_Due = &A.Amount_Due

    while $Emplid = $Save_Emplid and
          $End_of_File = 'N' and
          #Total_Payment > 0 and
          #Amount_Due > 0

      if #Total_Payment >= #Amount_Due

        let #Payment = #Amount_Due
        subtract #Amount_Due from #Total_Payment
        move 0 to #Amount_Due

      else

        let #Payment = #Total_Payment
        subtract #Total_Payment from #Amount_Due
        move 0 to #Total_Payment

      end-if

      do Write-Detail
      do Print-Detail
      add #Payment to #Total_Applied
      let #Print_Due = #Amount_Due

      if #Total_Payment = 0
        do Get-Payment-Record
      end-if

    end-while

    if $Emplid <> $Save_Emplid or
       $End_of_File = 'Y'
      Exit-Select
    end-if

From  PS_BEN_BI_CHG_VW A,
      PS_BEN_BI_CALENDAR B
Where A.EMPLID = $Emplid
And   A.AMOUNT_DUE <> 0
And   A.BILL_PER_CD = B.BILL_PER_CD
Order by A.EMPLID,
A.DATE_DUE,
A.BILL_PER_CD,
A.PLAN_TYPE
End-Select

End-Procedure


!****************************
Begin-Procedure Write-Detail
!****************************

  Let $SQL-Statement = 'BEN140: Insert-Detail'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_BEN_BI_DETAIL
( EMPLID,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  POSTED_DATE,
  DETAIL_TYPE,
  CHARGE_AMT,
  CHRG_ADJUST,
  PAY_AMT,
  PMT_ADJUST,
  EXCESS_CASH,
  GL_POST_DT
)
Values
( $EmplId,
  #Bill_Charge_Id,
  #Bill_Pay_Id,
  0,
  $PostDt,
  'PMNT',
  0,
  0,
  #Payment,
  0,
  0,
  NULL
)
End-SQL

End-Procedure


!****************************
Begin-Procedure Print-Detail
!****************************

  if &A.Benefit_Plan <> ' '
    move &A.Benefit_Plan to $Benefit_Plan
    move &A.Plan_Type to $Plan_Type
    move &B.Period_End_Dt to $AsOfDate
    do Get-Benefit-Name
    move $BenefitName to $Plan_Descr
  else
    move ' ' to $Plan_Descr
  end-if

  move &A.Plan_Type to $Plan_Type
  move 'PLAN_TYPE'  to $Fieldname
  move $Plan_Type to $Fieldvalue
  move &B.Period_End_Dt to $AsOfDate
  Do Read-Translate-Table

  print &A.Bill_Per_Cd                (+1,{col_bill_per_dta},8)
  print &A.Benefit_Program             (0,{col_ben_prog_dta},8)
  print &A.Plan_Type                   (0,{col_plan_type_dta},4)
  print $Xlatshortname                 (0,{col_plan_desc},12)
  print &A.Benefit_Plan                (0,{col_ben_plan},7)
  print $Plan_Descr                    (0,{col_ben_desc},{col_ben_desc_len})

  move ' ' to $Covrg_Cd_fld
  if &A.Ded_Slstx_Class <> ' ' and &A.Ded_Slstx_Class <> 'B'
      move 'DED_SLSTX_CLASS' to $Fieldname
      move &A.Ded_Slstx_Class to $Fieldvalue
      move &B.Period_End_Dt to $AsOfDate
      do Read-Translate-Table
      move $XlatShortName to $Covrg_Cd_fld
  end-if

  if &A.Covrg_Cd <> ' '
    move  &A.Covrg_Cd to $Covrg_Cd_fld
  end-if

  print $Covrg_Cd_fld                  (0,{col_cov_code_dta},8)
  print #Print_Due                     (0,{col_chrg_amt}) edit {amt_mask2}
  print #Payment                       (0,{col_pay_amt})  edit {amt_mask2}


End-Procedure


!****************************
Begin-Procedure Write-Credit
!****************************

  let $SQL-Statement = 'BEN140: Insert-Credit'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_BEN_BI_DETAIL
( EMPLID,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  POSTED_DATE,
  DETAIL_TYPE,
  CHARGE_AMT,
  CHRG_ADJUST,
  PAY_AMT,
  PMT_ADJUST,
  EXCESS_CASH,
  GL_POST_DT
)
Values
( $EmplId,
  0,
  #Bill_Pay_Id,
  0,
  $PostDt,
  'EXCS',
  0,
  0,
  #Total_Payment,
  0,
  #Total_Payment,
  NULL
)
End-SQL

End-Procedure


!****************************
Begin-Procedure Print-Credit
!****************************

!--- APPLIED TO OPEN CREDIT
  print $BEN140-INFO-MSG-01            (+1,{col_bill_per_dta},40)
  print #Total_Payment                 (0,{col_pay_amt})  edit {amt_mask2}


End-Procedure


!****************************
Begin-Procedure Get-Sequence
!****************************

  let #Posting_Sequence = 1

Begin-Select
MAX(X.POSTING_SEQUENCE) &MaxSeq

    let #Posting_Sequence = &MaxSeq + 1

From  PS_BEN_BI_PAYMENT X
Where X.EMPLID = $Emplid
And   X.POSTING_DATE = $PostDt
End-Select

End-Procedure


!****************************
Begin-Procedure Print-Totals
!****************************

!--- Total Records Read
  print $BEN140-TOT-REC-01                (+3,{col_name},40)
  print #Total_Rec                        (0,{col_counts}) edit {count_mask}

!-- Number Records in Error
  print $BEN140-TOT-REC-02                (+1,{col_name},40)
  print #Total_Errors                     (0,{col_counts}) edit {count_mask}

!-- Number Valid Records
  print $BEN140-TOT-REC-03                (+1,{col_name},40)
  print #Total_Process                    (0,{col_counts}) edit {count_mask}

!-- Total Valid Dollars Received
  print $BEN140-TOT-REC-04                (+2,{col_name},40)
  print #Total_Amt                        (0,{col_totals}) edit {amt_mask3}

!-- Dollars Applied to Charges
  print $BEN140-TOT-REC-05                (+1,{col_name},40)
  print #Total_Applied                    (0,{col_totals}) edit {amt_mask3}

!-- Dollars Applied to Open Credit
  print $BEN140-TOT-REC-06                (+1,{col_name},40)
  print #Total_Credit                     (0,{col_totals}) edit {amt_mask3}

End-Procedure


!****************************
Begin-Procedure Display-Time
!****************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure


!*****************************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Date math routines
#Include 'datetime.sqc'  !Format-DateTime procedures
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'number.sqc'    !Format-Number procedure
#Include 'reset.sqc'     !Reset printer procedure
#include 'getbennm.sqc'  !Get-Benefit-Name procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!******************************* End of Report *******************************
