!***********************************************************************
!  ABS001:  Absence History                                            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:10:58:20                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

Begin-Setup
!***************************************************************************************************
!This code was added to declare var that will be used in calculation of days absent during
!absence period and not the Duration_days stored in the table PS_ABSENCE_HIST.
!***************************************************************************************************

  declare-variable
    date $Beg_Dt
    date $Ret_Dt
  end-declare
End-Setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  
  do Init-Report
  
  !********Begin Resolution 594678******
  
  do Get-Report-Language
  
  !********End Resolution 594678********
  
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-heading 7
  #Include 'stdhdg02.sqc'

  DO Format-DateTime($FromDate, $FromOutput, {DEFDATE},'','')
  DO Format-DateTime($ThruDate, $ThruOutput, {DEFDATE},'','')
  LET $HeaderOutput = 'For the period ' || $FromOutput || ' Through ' || $ThruOutput

 ! print $HeaderOutput                                                      (3,1,0)
 ! print '* Indicates employees without a work schedule assigned'           (5,1,0)
 ! print 'Empl              Absence     Begin          Return          Duration'     (+1,66)
 ! print 'Employee Name                        '                            (+1,1)
 ! print 'Employee ID  Department   '                                       (0,+1)
 ! print 'Type  Job Title   Type        Date           Date'                     (0,+1)
 ! print 'Days   Hours  Paid? Approved?  Reason'                            (0,124)

 !********Begin Resolution 594678******
 
 Do Report-Translation
 
  
  print $HeaderOutput                                                      (0,1,0) center
  print '* Indicates employees without a work schedule assigned' (+1,1)
  !print 'Empl              Absence     Begin      Return      Duration'     (+3,66)
  !print 'Employee Name                        '                            (+1,1)
  !print 'Employee ID  Department   '                                       (0,+1)
  !print 'Type  Job Title   Type        Date       Date'                     (0,+1)
  !print 'Days   Hours  Paid? Approved?  Reason'                            (0,124)
    
  print $EMPL                 (+3,66)
  print $ABSENCE              (0,84)
  print $BEGIN                (0,96)
  print $RETURN               (0,107)
  print $DURATION             (0,119)
  print $EMPLOYEENAME         (+1,1) 
  print $EMPLOYEEID           (0,39)
  print $DEPARTMENT           (0,52)
  print $TYPE                 (0,66)
  print $JOBTITLE             (0,72)
  print $TYPE                 (0,84)
  print $DATE                 (0,96)
  print $DATE                 (0,107)
  print $DAYS                 (0,119)
  print $HOURS                (0,128)
  print $PAID?                (0,137)
  print $APPROVED?            (0,143)
  print $REASON               (0,153)
end-heading  

!********End Resolution 594678********

!********Begin Resolution 594678******

!*************************************************************
BEGIN-PROCEDURE Report-Translation
!*************************************************************
 
  !Should be ok to comment because the report should only produce one output file.
  !Use-report ABS001
  
  Do Init_Report_Translation($ReportId, $Language_Cd)
  SHOW 'LANGUAGE CODE = ' $Language_Cd
  Do Get_Field_Information  ('ABS001','EMPL',               $EMPL,            #CW)
  Do Get_Field_Information  ('ABS001','ABSENCE',            $ABSENCE,         #CW)
  Do Get_Field_Information  ('ABS001','BEGIN',              $BEGIN,           #CW)
  Do Get_Field_Information  ('ABS001','RETURN',             $RETURN,          #CW)
  Do Get_Field_Information  ('ABS001','DURATION',           $DURATION,        #CW)
  Do Get_Field_Information  ('ABS001','EMPLOYEE NAME',      $EMPLOYEENAME,    #CW)
  Do Get_Field_Information  ('ABS001','EMPLOYEE ID',        $EMPLOYEEID,      #CW)
  Do Get_Field_Information  ('ABS001','DEPARTMENT',         $DEPARTMENT,      #CW)
  Do Get_Field_Information  ('ABS001','TYPE',               $TYPE,            #CW)
  Do Get_Field_Information  ('ABS001','JOB TITLE',          $JOBTITLE,        #CW)
  Do Get_Field_Information  ('ABS001','TYPE',               $TYPE,            #CW)
  Do Get_Field_Information  ('ABS001','DATE',               $DATE,            #CW)
  Do Get_Field_Information  ('ABS001','DATE',               $DATE,            #CW)
  Do Get_Field_Information  ('ABS001','DAYS',               $DAYS,            #CW)
  Do Get_Field_Information  ('ABS001','HOURS',              $HOURS,           #CW)
  Do Get_Field_Information  ('ABS001','PAID?',              $PAID?,           #CW)
  Do Get_Field_Information  ('ABS001','APPROVED?',          $APPROVED?,       #CW)
  Do Get_Field_Information  ('ABS001','REASON',             $REASON,          #CW)
  
 END-PROCEDURE 
 
!********End Resolution 594678********

begin-procedure Init-Report

  move 'ABS001' to $ReportID
  move 'Absence History' to $ReportTitle
  display $ReportTitle


  do Stdapi-Init

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-ABS001-Parameters
  end-if

end-procedure
begin-procedure Select-ABS001-Parameters

BEGIN-SELECT

A1.OPRID
A1.RUN_CNTL_ID
A1.ASOFDATE
A1.FROMDATE
A1.THRUDATE
A1.DEPTID
A1.SETID


  do Get-Values

from PS_RUN_CNTL_ABS001 A1

where A1.OPRID = $prcs_oprid
  and A1.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure


begin-procedure Get-Values


    do Get-RUNABS001-Param
end-procedure

begin-procedure Get-RUNABS001-Param

  let $DeptId   = &A1.DEPTID
  let $SETID    = &A1.SETID
  let $FromDate = &A1.fromdate
  let $ThruDate = &A1.thrudate

  do Century-Begin-Date

  if $FromDate = ''
     move $Century_Begin_Dt to $FromDate
  end-if

  if $ThruDate = ''
     move $AsOfToday to $ThruDate
  end-if

end-procedure



begin-procedure Process-Main
 let #duration_days=0
   do Convert-To-DTU-Date($Thrudate, $Thrudate_DTU)
   do Convert-To-DTU-Date($FromDate , $FromDate_DTU)

begin-SELECT
B.COMPANY             ()      on-break print=never level=1 procedure=Company-Change
   move &B.Company to $Company
B.NAME                (+1,1,35)   on-break level=1

!********Begin Resolution 594678********
!Alignment changes have been done on fields

!B.EMPLID      (0,42) on-break level=1   !Resolution 594678
B.EMPLID      (0,39) on-break level=1    !Resolution 594678
  let $Empid = &B.EMPLID
  display $Empid noline
!B.DEPTNAME_ABBRV      (0,55)  on-break level=1  !Resolution 594678
B.DEPTNAME_ABBRV      (0,52)  on-break level=1   !Resolution 594678
!B.EMPL_TYPE           (0,68)  on-break level=1  !Resolution 594678
B.EMPL_TYPE           (0,66)  on-break level=1   !Resolution 594678
!B.JOBTITLE_ABBRV      (0,73)  on-break level=1  !Resolution 594678
B.JOBTITLE_ABBRV      (0,72)  on-break level=1   !Resolution 594678
B.EMPL_RCD
   let #Empl_RCD = &B.EMPL_RCD
A.ABSENCE_TYPE
A.BEGIN_DT
   let  $Begin_Dt_DMY_N=&A.Begin_Dt
   do Format-DateTime(&A.Begin_Dt, $Begin_Dt_DMY, {DEFDATE}, '', '')
   !print $Begin_Dt_DMY (0,97)prashant
   print $Begin_Dt_DMY (0,96)
   do Convert-To-DTU-Date(&A.Begin_Dt, $Begin_Dt_DMY)

A.RETURN_DT
   if RTRIM(&A.Return_Dt, ' ') <> ''
      do Format-DateTime(&A.Return_Dt, $Return_Dt_DMY, {DEFDATE}, '', '')
      !print $Return_Dt_DMY         (0,109)       !Resolution 594678
      print $Return_Dt_DMY         (0,107)        !Resolution 594678
      do Convert-To-DTU-Date(&A.Return_Dt, $Return_Dt_DMY)
      let $ReturnDate = $Return_Dt_DMY
   !Else
   end-if
   if isnull(&A.Return_Dt) = 1
         let $ReturnDate = $Thrudate
         do Format-DateTime($ReturnDate, $Return_Dt_DMY, {DEFDATE}, '', '')
         let $Return_Dt_DMY  = rtrim($Return_Dt_DMY,' ')
         do Convert-To-DTU-Date($ReturnDate, $Return_Dt_DMY)
         let $ReturnDate =$Return_Dt_DMY
         ! let $ReturnDate= $Thrudate_DTU
    end-if
A.DURATION_DAYS
   if &A.DURATION_DAYS=0
        if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY <= $Thrudate_DTU)
           Let $Beg_Dt = &A1.FromDate
           Let $Ret_Dt = nvl(&A.Return_Dt , &A1.ThruDate)
        else
           if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY > $Thrudate_DTU)
              Let $Beg_Dt = &A1.FromDate
              Let $Ret_Dt = &A1.Thrudate
           else
              if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY >= $Thrudate_DTU )
                 Let $Beg_Dt = &A.Begin_Dt
                 Let $Ret_Dt = &A1.Thrudate
              else
                 if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY < $Thrudate_DTU)
                    Let $Beg_Dt = &A.Begin_Dt
                    Let $Ret_Dt = &A.Return_Dt
                 else
                    if ($Begin_Dt_DMY < $FromDate_DTU and $Return_Dt_DMY = $FromDate_DTU)
                       Let $Beg_Dt= &A.Begin_Dt
                       Let $Ret_Dt =&A1.FromDate
                    end-if
                 end-if
              end-if
           end-if
        end-if
        !let #Dur_days = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
        do Convert-To-DTU-Date($Beg_Dt, $Begin_Dt_DMY)
        let $Begin_Dt_DMY = rtrim(ltrim($Begin_Dt_DMY,' '),' ')
        do Convert-To-DTU-Date($Ret_Dt, $Return_Dt_DMY)
        let $Return_Dt_DMY = rtrim(ltrim($Return_Dt_DMY,' '),' ')
        let $Returndate = $Return_Dt_DMY
        do Format-Number(#Dur_days, $out, 'b99.999')
        print $out          (0,122)
        add #Dur_days to #Runing_#Absence_TotalDays
!Commented below line to include only days absent during absence period
   !add &A.Duration_Days to #Runing_#Absence_TotalDays
   !locate the work schedule as of the work absence begin date
   !if &A.DURATION_DAYS=0
      let $AsOfDate = $Begin_Dt_DMY
      do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist_out,$futurescheduleExist_out
                             $futuresched_Begin_dt_out)


      let  $schd_abs_st_day_out=to_char(#schd_abs_st_day_out)



      if RTRIM(&A.Return_Dt, ' ') <> ''
         let $ReturnDate = $Return_Dt_DMY
      !else
      !   let $ReturnDate= $AsOfToday
      end-if




      !let #TotalDays = 0
       if $currentscheduleExist_out='Y'
         let $HolidayFlag='N'
         let $loop_dt =  $Begin_Dt_DMY
         let #looking_for_day = #schd_abs_st_day_out
         let #TotalDays =0
         while $loop_dt <=  $ReturnDate

            do get-schedule-begin-date($CurrentSchedule_out,$schd_begin_dt )
            do dtu-diff-days($Schd_begin_dt, $loop_dt, #diffdays)
            let #schd_days = #diffdays + 1

            do Calculate-Schedule-Days($currentschedule_out, $Begin_Dt_Dmy,#schd_days_out)
            let #day_no = mod(#schd_days, #schd_days_out)
            if #day_no = 0
               let #day_no = #Schd_days_out
            end-if



         ! Calculate duration days. Loop for each day of the absence and check if the days was a work day
            let $AsOfDate =$loop_dt
            ! Check holiday schedule. If holiday then no need to update duration days
            do Is-Holiday($HolidayFlag_in )
            if $HolidayFlag_in = 'N' ! holiday flag
              do Get-Day-schedule($CurrentSchedule_out,$currentSchedule_dt_out,#looking_for_day,#Duration_Days)
            end-if
            let #TotalDays =#TotalDays+#Duration_Days
            ! Update total duration days
            let $TotalDays =to_char(#TotalDays)
            let #Duration_Days=0
            if #looking_for_day=#Schedule_Days_out
              let #looking_for_day = 1
            else
               let #looking_for_day= #looking_for_day +1
            end-if
            let $looking_for_day=to_char(#looking_for_day)
            do dtu-add-days($AsOfDate,1, $NextDay)
            !increment loop date
            let $loop_dt =$NextDay
            ! check if next schedule has kicked in yet

            if $futurescheduleExist_out = 'Y'
               ! check if next day has kicked in yet
               if $loop_dt=$futuresched_Begin_dt_out
                  let $AsOfDate=$futuresched_Begin_dt_out
                  do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist,$futurescheduleExist_out
                              $futuresched_Begin_dt_out)
                  let #looking_for_day = #schd_abs_st_day_out
               end-if
            end-if
        end-while
     else
        if rtrim(ltrim($CurrentSchedule_out, ' '), ' ') = ''
           let #TotalDays = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
        end-if
     end-if
     do Format-Number(#TotalDays , $out, 'b99.999')
     !print $out          (0,122)   !Resolution 594678
     print $out          (0,117)    !Resolution 594678
  else
     do Format-Number(&A.Duration_Days, $out, 'b99.999')
     !print $out          (0,122)   !Resolution 594678
     print $out          (0,117)    !Resolution 594678
  end-if
A.DURATION_HOURS
!*****************  Begin Resolution - 618544  *********************
   !do Format-Number(&A.Duration_Hours, $out, 'b999.9')
   do Format-Number(&A.Duration_Hours, $out, 'b9999.99')
!*****************  End Resolution - 618544  ***********************
   !print $out          (0,131)     !Resolution 594678
   print $out          (0,128)      !Resolution 594678
A.PAID_UNPAID,A.EMPLOYER_APPROVED
   if &A.Paid_Unpaid = 'U'
    !print 'No'        (0,140)      !Resolution 594678
    print 'No'        (0,137)       !Resolution 594678
   else
    !print 'Yes'       (0,140)      !Resolution 594678
    print 'Yes'        (0,137)      !Resolution 594678
   end-if
   if &A.Employer_Approved = 'N'
    !print 'No'        (0,147)      !Resolution 594678
    print 'No'        (0,143)       !Resolution 594678
   else
    !print 'Yes'       (0,147)      !Resolution 594678
    print 'Yes'        (0,143)      !Resolution 594678
  end-if
A.REASON              (0,153)
D.DESCRSHORT    (0,84)
FROM  PS_EMPLOYEES B, PS_ABSENCE_HIST A,
        PS_JOB C, PS_ABS_TYPE_TBL D

WHERE ((A.BEGIN_DT >= $FromDate
AND A.BEGIN_DT <= $Thrudate)
OR (A.RETURN_DT >= $FromDate
AND A.RETURN_DT <= $Thrudate)
OR (A.BEGIN_DT < $FromDate
AND A.RETURN_DT > $Thrudate)
OR (A.BEGIN_DT <= $Thrudate
AND A.RETURN_DT is NULL))
AND C.DEPTID = $DeptID
AND C.SETID_DEPT =  $SETID

AND A.EMPLID = B.EMPLID
AND     C.EMPLID = A.EMPLID
AND     C.EMPL_RCD = A.EMPL_RCD
AND     C.EFFDT = (SELECT MAX(E.EFFDT)
                       FROM PS_JOB E
                       WHERE A.EMPLID = E.EMPLID AND A.EMPL_RCD = E.EMPL_RCD
                       AND E.EFFDT <= A.BEGIN_DT)
AND C.EFFSEQ =  (SELECT MAX(EE.EFFSEQ)
                       FROM PS_JOB EE
                       WHERE C.EMPLID = EE.EMPLID AND C.EMPL_RCD = EE.EMPL_RCD AND
                             C.EFFDT = EE.EFFDT)
AND     D.ABSENCE_TYPE=A.ABSENCE_TYPE
AND     D.SETID = (SELECT SETID
              FROM PS_SET_CNTRL_REC
              WHERE SETCNTRLVALUE = C.REG_REGION
              AND  RECNAME = 'ABS_TYPE_TBL')
ORDER BY B.COMPANY,B.NAME,A.BEGIN_DT
end-SELECT
  print ' ' (+1,1)
end-procedure

!**************************************************************************
! get-schedule-details
!
!   Output: $SchedID  - The current schedule ID
!           $curr_begin_dt - The current scheduleDate
!           #schd_abs_st_day_out - Day in Work schedule corresponding to 'AsOfDate'
!           #Schedule_Days - No of days in current cycle
!**************************************************************************

begin-procedure get-schedule-details(:$SchedID,:$curr_begin_dt,:#schd_abs_st_day_out,
                                     :#Schedule_Days,:$Current_Exist,:$futurescheduleExist_out
                                     :$futuresched_Begin_dt_out)

 do get-Current-Schedule-Details($Current_Exist,$curr_begin_dt,$SchedID)
 do get-schedule-begin-date($SchedID,$schedule_begin_dt)
 do Get-Future-Schedule($curr_begin_dt,$futurescheduleExist_out,$futuresched_Begin_dt_out)
 !Schedule doesn't exist so dont bother calculating days. Indicate with flag
 if $Current_Exist = 'N'
     print '*' (0,35)
 else
   do Calculate-Schedule-Days($SchedID,$curr_begin_dt,#Schedule_Days)
   do Calculate-schd-diff($schedule_begin_dt,#Schedule_Days,#schd_abs_st_day_out)
 end-if
end-procedure

begin-procedure Company-Change
  new-page
end-procedure

!**************************************************************************
! Get-Day-schedule
!
!   input: $SchedID, $curr_begin_dt, #looking_for_today
!   output: #duration_days
!**************************************************************************

begin-procedure Get-Day-schedule($currentschedID,$currentsched,#looking_for_today,:#duration_days)


   let #Previous_Day_No=0
   let #Previous_Seq_No=0
   let #lday_count=0
   let #duration_days =0

begin-SELECT
C.ABSW_SEQ_NO
   let #Seq_No = &C.ABSW_SEQ_NO
   let $Seq_No=to_char(#Seq_No )

C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours=&C.DURATION_HOURS
   let #Day_No =&C.ABSW_DAY_NO
   let $Day_no=to_char(#Day_No)

   ! only count days that have hours > 0
   if #Absw_Duration_Hours  > 0
      if #Seq_No <> #Previous_Seq_No
         let #lday_count=#lday_count +1
      else
         if #Day_No <> #Previous_Day_No
            let #lday_count=#lday_count +1
         end-if
      end-if
      if #lday_count=#looking_for_today
            let #duration_days=#duration_days +1
      end-if
   end-if
   let #Previous_Seq_No=#Seq_No
   let #Previous_Day_No=#Day_No

   let $duration_days=to_char(#duration_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  = $currentschedID
AND C.BEGIN_DT <= (select max(B.BEGIN_DT) FROM PS_ABSW_SCHD_VW B WHERE B.EMPLID = C.EMPLID AND
                   C.EMPL_RCD  = B.EMPL_RCD AND C.ABSW_SCHD_ID = B.ABSW_SCHD_ID AND
                   B.BEGIN_DT <= $currentsched)!$currentsched
end-SELECT

end-procedure

!**************************************************************************
! Is-Holiday:  Check if given day is defined as a holiday
!
!   output: $HolidayFlag_out
!**************************************************************************

begin-procedure Is-Holiday(:$HolidayFlag_out)

   let $HolidayFlag_out='N'
begin-SELECT
B.HOLIDAY_SCHEDULE
   let $HolidayFlag_out='Y'

FROM
 PS_ABSW_SCHEDULE A,
 PS_HOLIDAY_DATE B
WHERE
A.HOLIDAY_SCHEDULE = B.HOLIDAY_SCHEDULE
AND A.EMPLID = $_Empid
AND A.EMPL_RCD = #_Empl_RCD
AND B.HOLIDAY=$_AsOfDate
end-SELECT
end-procedure

!**************************************************************************
! Calculate-schd-diff:  Calculates days since work schedule
!
!   input:  $currentsched_Begin_dt, #Schedule_Days
!   output: #schd_abs_st_day
!**************************************************************************

begin-procedure Calculate-schd-diff($currentsched_Begin_dt,#Schedule_Days,:#schd_abs_st_day)

   let $Schedule_Days=to_char(#Schedule_Days)

   ! calculate days since work schedule
   do dtu-diff-days($currentsched_Begin_dt,$_AsOfDate,#diffDays)
   let #schd_days_s_st= #diffDays + 1
   let #schd_abs_st_day = mod(#schd_days_s_st,#Schedule_Days)
   if  #schd_abs_st_day =0
      let #schd_abs_st_day =#Schedule_Days
   end-if
   let $schd_abs_st_day=to_char(#schd_abs_st_day)
   let $schd_days_s_st=to_char(#schd_days_s_st)
   let $Schedule_Days=to_char(#Schedule_Days)
   display $schd_days_s_st
   display $Schedule_Days
   display $schd_abs_st_day
end-procedure

!**************************************************************************
! get-Current-Schedule-Details
!
!    output: :$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID
!**************************************************************************

begin-procedure get-Current-Schedule-Details(:$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID)

   ! get current schedule at absence begin date
   let $currentschedID =''
   let $currentsched_Begin_dt =''
   let $currentscheduleExist='N'
begin-SELECT
E.EMPLID
E.EMPL_RCD
E.BEGIN_DT
   let $currentsched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($currentsched_Begin_dt_N, $currentsched_Begin_dt)
E.ABSW_SCHD_ID

  let  $currentschedID =&E.ABSW_SCHD_ID
  let $currentscheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_Empid
AND   E.EMPL_RCD = #_Empl_RCD
AND   E.BEGIN_DT =(SELECT MAX(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT <= $_AsOfDate)
end-SELECT
end-procedure

!**************************************************************************
! get-schedule-begin-date: Gets the begin date of the work schedule
!
!     input: $Sched_ID
!     output: $Schedule_Begin_dt_out
!**************************************************************************

begin-procedure get-schedule-begin-date($SchedID_in,:$Schedule_Begin_dt_out)
begin-SELECT
F.BEGIN_DT
   let $Schedule_Begin_dt_N=&F.BEGIN_DT
   do Convert-To-DTU-Date($Schedule_Begin_dt_N, $Schedule_Begin_dt_out)

FROM PS_ABSW_SCHD_TBL F
WHERE F.ABSW_SCHD_ID = $SchedID_in
end-SELECT
end-procedure

!**************************************************************************
! Get-Future-Schedule
!
!    input: $curr_begin_dt_in
!**************************************************************************

begin-procedure Get-Future-Schedule($curr_begin_dt_in,:$futurescheduleExist,:$futuresched_Begin_dt)

   let $futurescheduleExist ='N'
   let $futurescheduleAnother ='Y'
   let $futureschedID =''
   let $futuresched_Begin_dt =''
begin-SELECT
E.BEGIN_DT
   let $futuresched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($futuresched_Begin_dt_N, $futuresched_Begin_dt)

E.ABSW_SCHD_ID
   let  $futureschedID =&E.ABSW_SCHD_ID
   let $futurescheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_Empid
AND   E.EMPL_RCD = #_Empl_RCD
AND   E.BEGIN_DT =(SELECT MIN(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT > $curr_begin_dt_in )
end-SELECT
end-procedure Get-Future-Schedule

!**************************************************************************
! Calculate-Schedule-Days: Calculates days in one work schedule
!
!    input:    $currentschedID,$curr_begin_dt
!    output:   #schd_cycle_days
!**************************************************************************

begin-procedure Calculate-Schedule-Days($currentschedID, $curr_begin_dt,:#schd_cycle_days)

   let #Prev_Day_No=0
   let #Prev_Seq_No=0
   let #schd_cycle_days=0
begin-SELECT
C.ABSW_SEQ_NO
   let #Absw_Seq_No = &C.ABSW_SEQ_NO
C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours =&C.DURATION_HOURS
   let #Absw_Day_No =&C.ABSW_DAY_NO
   if #Absw_Seq_No <> #Prev_Seq_No
      let #schd_cycle_days=#schd_cycle_days +1
   else
      if #Absw_Day_No <> #Prev_Day_No
         let #schd_cycle_days=#schd_cycle_days +1
      end-if
   end-if
   let #Prev_Seq_No=#Absw_Seq_No
   let #Prev_Day_No=#Absw_Day_No
   let $schd_cycle_days=to_char(#schd_cycle_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  =$currentschedID
AND C.BEGIN_DT <= $curr_begin_dt
end-SELECT

end-procedure

#include 'hrrnctl1.sqc'  ! GET RUN CONTROL PARAMETER VALUES
#include 'hrgetval.sqc'  ! GET VALUES MASK ROUTINES
#include 'reset.sqc'     ! RESET PRINTER PROCEDURE
#include 'stdapi.sqc'    ! UPDATE PROCESS API
#include 'curdttim.sqc'  ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'  ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'    ! ROUTINES TO FORMAT NUMBERS
#include 'datemath.sqc'  ! ROUTINES FOR DATEMATH
#Include 'getcodta.sqc'  !Get-Company-Data procedure (used in StdHdg02)
#Include 'readxlat.sqc'  !Read-Translate-Table procedure

!********Begin Resolution 594678********

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#include 'rellang.sqc'   !Gives Description from Related Lang tables

!********End Resolution 594678********