!***********************************************************************
!  TAX860UT:  Qtrly Wage List - UTAH - MMREF-1                         *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C)  2010, Oracle and/or its affiliates.                 *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2010/07/26:14:11:03                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  805004                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file will have been'
    display 'created, as follows:'
    display ''
    display ''
    display '  TAX860UT  contains 512-character records in the format required'
    display '            for electronic submission of quarterly wages to the'
    display '            Utah Department of Workforce Services.'
    display ''
    display ''
    display 'Follow the instructions from the department for preparing and'
    display 'submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  move 'TAX860UT' to $ReportID
  move 'Utah Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating file for Utah UI Wage Reporting'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Initialization
  do Get-Calendar-Year-Id
  do Stdapi-Init
end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'UT'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  let  $FileID = '{IMPORTPREFIX}' || 'TAX860UT' || '{IMPORTSUFFIX}'
  open $FileID as 10 for-writing record=512:fixed

end-procedure

begin-procedure Process-Main
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure


begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'UT'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID              = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'        to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MiddleName = rtrim(&D.MIDDLE_NAME, ' ')
  uppercase $LastName
  uppercase $FirstName
  uppercase $MiddleName

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD

  add #ExGrs_QTD to #Co_ExGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD

  do Write-S-Record

  move 'Y' to $RecordWritten
end-procedure

begin-procedure Before-Company
  do Get-Company-Data
  uppercase $CompanyName

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
       let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                       SUBSTR($StateEIN,(#Hyphen + 1),10)
    end-if
  end-while
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
       let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                       SUBSTR($StateEIN,(#Spaces + 1),10)
    end-if
  end-while
  while INSTR($StateEIN,'.',1) <> 0
    let #Marks  = INSTR($StateEIN,'.',1)
    if #Marks  > 0
       let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                       SUBSTR($StateEIN,(#Marks + 1),10)
    end-if
  end-while

 let #Length = LENGTH($StateEIN)

! CHECK THAT THE FIRST DIGIT IS ALPHA
  let $Test_FirstChar  = SUBSTR($StateEIN, 1, 1)
  let #FirstChar_Alpha = RANGE($Test_FirstChar,'A','Z')

! CHECK THAT THE REMAINING 8 DIGITS ARE NUMERIC
  move 'N' to $Num-Err
  let #Max_Lngth = 9
  let #Char_Pos  = 2

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = SUBSTR($StateEIN, #Char_Pos, 1)
    let #Num_Digit = INSTR('0123456789', $Test_Char, 1)

    if  #Num_Digit = 0
        move 'Y' to $Num-Err
        break
    end-if

    add 1 to #Char_Pos
  end-while

! PRINT WARNING MESSAGE IF EMPLOYER ID FORMAT IS INCORRECT
  if (#Length > 9) OR (#FirstChar_Alpha = 0) OR ($Num-Err = 'Y')
      display ' '
      display '*** Warning: Incorrect Format for State Unemployment Employer ID         ***'
      display '*** Position 1 should be Alpha then followed by 8 digits, e.g. C01234567 ***'
      display 'Company - ' noline
      display $Company     noline
      display '  Employer ID - ' noline
      display $StateEIN
      display ' '
  end-if


  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.99999
  let $Experience_Rt = SUBSTR($Experience_Rt,3,5)

  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if

  do Write-E-Record
end-procedure

begin-procedure After-Company

  if #Count_S > 0
    do Print-Summary-Data('CoTotal')
    do Write-T-Record

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Co_ExGrs_QTD  to #Tot_ExGrs_QTD
    add #Count_S to #Count_F

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD
    move 0 to #Co_ExGrs_QTD
    move 0 to #Count_S
    new-page
  end-if

end-procedure


begin-procedure Write-E-Record

  move &CT.Federal_EIN  to $FedEIN 099999999
  move &CT.Descr        to $ErName
  move $CompnyAdd1      to $ErAddress1
  move $CompnyAdd2      to $ErAddress2
  move $CompnyCity         to $City
  let $StateCd = rtrim(&CT.State, ' ')
  move &CT.Postal       to $Zip
  move &CT.Country      to $Country

  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
    and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if

  uppercase $ErName
  uppercase $ErAddress1
  uppercase $ErAddress2
  uppercase $City
  uppercase $StateCd


  write 10 from 'RE':2    !   1 -   2
            $RptYear:4    !   3 -   6
                 $Sp:1    !   7
             $FedEIN:9    !   8 -  16
                 $Sp:23   !  17 -  39
             $ErName:57   !  40 -  96
         $ErAddress1:22   !  97 - 118
         $ErAddress2:22   ! 119 - 140
               $City:22   ! 141 - 162
            $StateCd:2    ! 163 - 164
                $Zip:5    ! 165 - 169
           $ZipExtsn:4    ! 170 - 173
                 $Sp:48   ! 174 - 221
        $QtrEndMonth:2    ! 222 - 223
           $StateEIN:10   ! 224 - 233
                 $Sp:279  ! 234 - 512

  move 'Y' to $RecordWritten

end-procedure


begin-procedure Write-S-Record

  let $NlGrs_QTD  = EDIT(#NlGrs_QTD  * 100,'09999999999')
  let $TxGrs_QTD  = EDIT(#TxGrs_QTD  * 100,'09999999999')


  write 10 from 'RS':2    !   1 -   2
                '49':2    !   3 -   4
                 $Sp:5    !   5 -   9
        $NATIONAL_ID:9    !  10 -  18
          $FirstName:15   !  19 -  33
         $MiddleName:15   !  34 -  48
           $LastName:20   !  49 -  68
                 $Sp:128  !  69 - 196
       $QtrEndMonth:2     ! 197 - 198
           $RptYear:4     ! 199 - 202
          $NlGrs_QTD:11   ! 203 - 213
          $TxGrs_QTD:11   ! 214 - 224
                 $Sp:23   ! 225 - 247
           $StateEIN:10   ! 248 - 257
                 $Sp:11   ! 258 - 268
                 $Sp:244  ! 269 - 512


  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $TxGrs_QTD
  move 0  to #TxGrs_QTD

  add 1 to #Count_S

end-procedure


begin-procedure Write-T-Record

  move #Count_S      to $Count_S 0999999

  let $Co_NlGrs_QTD  = EDIT(#Co_NlGrs_QTD  * 100,'099999999999999')
  let $Co_TxGrs_QTD  = EDIT(#Co_TxGrs_QTD  * 100,'099999999999999')
  let $Co_ExGrs_QTD  = EDIT(#Co_ExGrs_QTD  * 100,'099999999999999')


  write 10 from 'RT':2    !   1 -   2
            $Count_S:7    !   3 -   9
       $Co_NlGrs_QTD:15   !  10 -  24
                 $Sp:375  !  25 - 399
       $Co_ExGrs_QTD:15   ! 400 - 414
       $Co_TxGrs_QTD:15   ! 415 - 429
      $Experience_Rt:5    ! 430 - 434
           $TaxesDue:9    ! 435 - 443
        $Month1Count:5    ! 444 - 448
        $Month2Count:5    ! 449 - 453
        $Month3Count:5    ! 454 - 458
                 $Sp:54   ! 459 - 512

end-procedure


begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should not include commas)'
  input $TaxesDue        '   UI Taxes Due          '
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'

  move $TaxesDue        to #TaxesDue
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  let  $TaxesDue        = EDIT(#TaxesDue    * 100,'099999999')
  move #Month1Count     to $Month1Count     09999
  move #Month2Count     to $Month2Count     09999
  move #Month3Count     to $Month3Count     09999
end-procedure


begin-procedure Company-Run-Control
begin-select

UT.UI_TAXES_DUE
UT.UI_MONTH1_COUNT
UT.UI_MONTH2_COUNT
UT.UI_MONTH3_COUNT

FROM PS_RC_TAX860UT UT
WHERE UT.OPRID       = $Prcs_OprID
  AND UT.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND UT.COMPANY     = &C.Company
end-SELECT

  move &UT.UI_TAXES_DUE        to #TaxesDue
  move &UT.UI_Month1_Count     to #Month1Count
  move &UT.UI_Month2_Count     to #Month2Count
  move &UT.UI_Month3_Count     to #Month3Count

  let  $TaxesDue        = EDIT(#TaxesDue    * 100,'099999999')
  move #Month1Count     to $Month1Count     09999
  move #Month2Count     to $Month2Count     09999
  move #Month3Count     to $Month3Count     09999
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
