
!***********************************************************************
!  PAY003:  Payroll Check Print - USA                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/20:19:19:08                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  694792                                              !
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
! Function: Generates paychecks and earnings statements for a given    *
!           RUN_ID or (partial) pay calendar.                          *
!                                                                      *
! Comments: Utilizes a bank microcode soft font and a custom signature *
!           font catridge to allow printing of the entire check on an  *
!           HP LaserJet printer so equipped and configured.            *
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP99998       E&G 7.51 AU Merge                                      *
!***********************************************************************


#include 'setenv.sqc'    !set database environment
#include 'chkadvpr.sqc'  !Printer settings for the Check-Advice printing
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'getdednm.sqc'  !Get-Deduction-Name procedure
#include 'getdptnm.sqc'  !Get-Department-Name procedure
#include 'geternnm.sqc'  !Get-Earnings-Name procedure
#include 'getjobtl.sqc'  !Get-Job-Title procedure
#include 'getlcdta.sqc'  !Get-Local-Tax-Data
#include 'getsetid.sqc'  !Get Set-Id procedure
#include 'getlocnm.sqc'  !Get-Location-Name procedure
#include 'ldnumlit.sqc'  !Load-NumberLits-Array procedure
#include 'netinwds.sqc'  !Net-Pay-In-Words procedure
#include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'rotname1.sqc'  !Rotate-Name procedure
#include 'datetime.sqc'  !general date and time formatting procedures
#include 'datemath.sqc'  !date arithmetic procedures
#include 'number.sqc'    !general number formatting procedures
#include 'payinit.sqc'   !Payroll-Report-Initialization procedure
#include 'payrnctl.sqc'  !Get-Run-Control procedure
#include 'stdapi.sqc'    !StdAPI-Init procedure
#include 'reset1.sqc'    !Reset printer procedure
#include 'getbalid.sqc'  !Get-Calendar-Year-Id
#include 'usarpt.sqc'    !Get USA variables
#Include 'getaddr.sqc'   !Get Person Current Address
#include 'getmsgct.sqc'  !Gets Message Catalog
#include 'pysspxml.sqc'  !Self Service Paycheck (SSP) XML Data process


!***********************************************************************
begin-procedure Init-Page-Size
!***********************************************************************
! This sends a 'Perforation Skip' command to disable any bottom
! margin and obtain the maximum PCL page.  This is required to
! print the MICR line sufficiently close to the bottom of the
! form to be correctly positioned on the check.

#ifndef MVS
#ifndef OS400
 encode '<27>&l0L' into $perforation_skip
#else
 encode '<39>&l0L' into $perforation_skip
#endif
#else
 encode '<39>&l0L' into $perforation_skip
#endif

  print $perforation_skip () code-printer={PRINTER_CHQADV}

end-procedure


!***********************************************************************
begin-procedure Init-Variables
!***********************************************************************

  let $ReportID    = 'PAY003'
  let $ReportTitle = 'Payroll Check Print'
  let $Country     = 'USA'
  let $ssp_setup_id = 'PNAUSA'

!printer escape sequence for the check signature font

#ifndef MVS
#ifndef OS400
  encode '<27>&l0O<27>(1Q<27>(s0p1.00h72.0v0s0b0T' into $SigFont
#else
  encode '<39>&l0O<39>(1Q<39>(s0p1.00h72.0v0s0b0T' into $SigFont
#endif
#else
  encode '<39>&l0O<39>(1Q<39>(s0p1.00h72.0v0s0b0T' into $SigFont
#endif


!the bank city/state prefix as printed on the check as part of the
!hyphenated numerator of the fractional bank routing number

  let $BankDistrict = '90'              !for paygroup $BankID

  let #Msg_SetNbr = 2000
  let #Msg_Nbr = 641
  do Get-Message-Catalog
  if $Msg_Desc <> ''
     let $In-date = substr($Msg_Desc,1,8)
     let $CA-date = $In-Date
  else
     let $CA-date = '20040101'
  end-if

end-procedure


!***********************************************************************
begin-procedure Init-Arrays
!***********************************************************************

  #define m  7  !number of separate detail sections
  #define n 13  !maximum number of detail entries per section

  let #RatesRow       = 0
  let #HoursRow       = 1
  let #EarnsRow       = 2
  let #PreTaxDedsRow  = 3
  let #TaxesRow       = 4
  let #PostTaxDedsRow = 5
  let #BenefitsRow    = 6

  let #lastRow  = {m}-1
  let #lastCol  = {n}-1
  let $lastCode = '***'
  let $lastName1 = 'Other'
  let $lastCmpRtCd = '***'
  let #lastRate = 0
  let $lastEarnBegin = ''
  let $lastEarnEnd = ''

  create-array name  = ETDarray        -
               size  = {m}             -
               field = Code:char:{n}   -
               field = Name:char:{n}   -
               field = EarnBegin:char:{n} -
               field = EarnEnd:char:{n}   -
               field = CmpRtCd:char:{n} -    ! Comp_rate_code
               field = Cur:number:{n}  -
               field = YTD:number:{n}

  do Load-NumberLits-Array  !load literals for converting Net Pay to words

end-procedure


!***********************************************************************
begin-report
!***********************************************************************

! use-report chkadvprn
  use-printer-type {PRINTER_CHQADV}
  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do StdAPI-Init
  do Init-Variables
  do Init-Arrays
  do Init-SSP-XML-Variables
  do Payroll-Report-Initialization      !calls "Report" procedure

  do Open-XML-Data-For-Bulk-Print 

  do Delete-SSP-Temporary-Guide-Data
  do Get-Paychecks

  if $FirstRecord = 'N' and $RC_PAYINIT.Text15 = $Create_XML_DATA
     let $xmltag = 'US_CHECK'
     let $xmloutput_line = ''
     let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
     write #outputfile from $xmloutput_line
  end-if

  do Close-XML-Data-For-Bulk-Print

  display 'Total Checks  ' noline
  display #TotalChecks  999,999,999
  display 'Total Net Pay ' noline
  display #TotalNetPay  $,$$$,$$$,$$9.99mi
  display 'XML Data File ' noline
  display $xmlssp_filenm

  do StdAPI-Term
  do Reset

end-report


!***********************************************************************
begin-procedure Report
!***********************************************************************

  if $Prcs_Process_Instance = ''
    display 'Enter a Beginning Check No. if restarting the run; ' noline
    display 'otherwise leave blank'
    input $BeginPAYCHECK_NBR maxlen=15 'Enter Beginning Check No.' type=integer
    move  $BeginPAYCHECK_NBR to #BeginPAYCHECK_NBR
    input $ThruPAYCHECK_NBR maxlen=15 'Enter Thru Check No.' type=integer
    if $ThruPAYCHECK_NBR = ''
      move '999999999999999' to $ThruPAYCHECK_NBR
    end-if
    move $ThruPAYCHECK_NBR to #ThruPAYCHECK_NBR
    input $CheckMessage maxlen=110 'Enter Check Message'
  else
     move #RC_PAYINIT.ChkAdv_No_Start to #BeginPAYCHECK_NBR
     move #RC_PAYINIT.ChkAdv_No_Thru  to #ThruPAYCHECK_NBR
     move $RC_PAYINIT.Message_Text   to $CheckMessage
  end-if

end-procedure


!***********************************************************************
begin-procedure Get-Paychecks
!***********************************************************************

begin-SELECT
A.COMPANY,A.PAYGROUP,A.PAY_BEGIN_DT,A.PAY_END_DT,A1.BALANCE_ID
A1.BALANCE_YEAR,A1.BALANCE_PERIOD,A.CHECK_DT
B.OFF_CYCLE,B.PAGE_NUM,B.LINE_NUM,B.SEPCHK
B.FORM_ID,B.PAYCHECK_NBR,B.CHECK_DT
B.EMPLID,B.EMPL_RCD,B.NAME,B.PAYCHECK_NAME,B.ADDRESS1,B.ADDRESS2,B.ADDRESS3
B.CITY,B.STATE,B.POSTAL
B.PAYCHECK_OPTION,B.PAYCHECK_ADDR_OPTN
B.TOTAL_GROSS,B.TOTAL_TAXES,B.TOTAL_DEDUCTIONS,B.NET_PAY
B.PAY_SHEET_SRC, B.BUSINESS_UNIT, B.UPDATE_DT
G.EFFDT
Y.TOTAL_GROSS_YTD,Y.TOTAL_TAXES_YTD,Y.TOTAL_DEDNS_YTD,Y.NET_PAY_YTD

  let $Prior_Earns_Found = 'N'
  do Find-Prior-Earn-Adj

  let $bus_unit = &B.Business_Unit
  if &A.Company <> $Company
    move &A.Company    to $Company
    move &A.Pay_End_Dt to $AsOfDate
    do Get-Company-Data
    move ''            to $PayGroup
  end-if

  if &A.PayGroup <> $PayGroup
    move &A.PayGroup   to $PayGroup
    move &A.Pay_End_Dt to $AsOfDate
    do Get-PayGroup-Data
  end-if

  do Reset-Variables

  do Get-Ee-Job-Data
  do Get-Ee-Tax-Data

  do Get-Earnings-Detail
  do Get-Taxes-Detail
  do Get-Deductions-Detail

  let $adv_acct_type = ''
  let $deposit_acct_nbr = ''
  let $deposit_acct_nbr_chckngs = ''
  let $deposit_acct_nbr_savings = ''
  let #chkg_ctr = 0
  let #svng_ctr = 0

  let $adv_checkings = ''
  let $adv_savings = ''
  let $chk_issued = ''

  if &B.PayCheck_Option = '&'           !both advice and check
    do Get-Net-Pay-Distribution
  else
    let $FieldName  = 'ACCOUNT_TYPE'
    let $FieldValue = '$'
    do Read-Translate-Table
    move $XLatShortName to $chk_issued
    move &B.Net_Pay     to #CheckNetPay
  end-if

  do Get-Vacation-Balances

  if $FirstRecord = 'Y'

     let $FirstRecord = 'N'
     let $PY_PSLP_PROCNAME = 'PrtCheck'

     if $RC_PAYINIT.Text15 = $Create_XML_DATA   
         do Insert-SSP-Temporary-Guide-Hdr
         do Write-1st-SSP-XML-Data
         let $xmltag = 'US_CHECK'
         let $xmloutput_line = ''
         let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
         write #outputfile  from $xmloutput_line
     end-if
  
  end-if

  if $RC_PAYINIT.Text15 = $Create_XML_DATA   

     do Get-Unique-Burst-Value

     let $burstfilename  = $xmlssp_burst || '.xml'
     let $xmlssp_filenm2 = '{IMPORTPREFIX}' || $burstfilename || '{IMPORTSUFFIX}'

     open $xmlssp_filenm2 as 20 for-writing record=150:vary

     write #outputfile2 from '<?xml version="1.0" encoding="Windows-1252"?>'

     let $xmltag = 'US_CHECK'
     let $xmloutput_line = ''
     let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
     write #outputfile2  from $xmloutput_line

     let $xmltag = 'G_EMP_DATA'
     do Process-SSP-XML-Tag-Beg

     if #RC_PAYINIT.PY_BATCH_SIZE > 0
        add 1 to #xmlssp_btch_ctr
        if #xmlssp_btch_ctr > #RC_PAYINIT.PY_BATCH_SIZE
           move 1 to #xmlssp_btch_ctr
           add  1 to #xmlssp_batch_id
        end-if
     end-if

     do SSP-Statement

     if &B.PAYCHECK_OPTION <> 'M'
        do SSP-Check
     end-if

     do Insert-SSP-Temporary-Guide-Dtl

     let $xmltag = 'G_EMP_DATA'
     do Process-SSP-XML-Tag-End

     let $xmltag = 'US_CHECK'
     let $xmloutput_line = ''
     let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
     write #outputfile2 from $xmloutput_line

     close #outputfile2
  else

     do Print-Statement
     do Print-Check
  end-if 

  add 1            to #TotalChecks
  add #CheckNetPay to #TotalNetPay

  do Delete-PY-Earns-Wrk

FROM  PS_PAY_CALENDAR A, PS_PAY_CAL_BAL_ID A1,
      PS_PAY_CHECK    B,
      PS_PAYGROUP_TBL G,
      PS_CHECK_YTD    Y
WHERE [$SlctCalendar]
  AND A.COMPANY = A1.COMPANY AND A.PAYGROUP = A1.PAYGROUP
  AND A.PAY_END_DT = A1.PAY_END_DT AND A1.BALANCE_ID = $Calendar_Year_Id
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND B.COMPANY         = A.COMPANY
  AND B.PAYGROUP        = A.PAYGROUP
  AND B.PAY_END_DT      = A.PAY_END_DT
  AND B.PAYCHECK_NBR         <> 0
  AND B.PAYCHECK_NBR         >= #BeginPAYCHECK_NBR
  AND B.PAYCHECK_NBR         <= #ThruPAYCHECK_NBR
  AND (($RC_PAYINIT.PY_SSP_MAN_CHK = 'R' AND B.PAYCHECK_OPTION IN ('C','&')) OR
       ($RC_PAYINIT.PY_SSP_MAN_CHK = 'M' AND B.PAYCHECK_OPTION = 'M'))
  AND B.PAYCHECK_STATUS = 'F'
  AND B.EMPLID         >= $RC_PAYINIT.Emplid_From
  AND B.EMPLID         <= $RC_PAYINIT.Emplid_To
  AND G.COMPANY         = A.COMPANY
  AND G.PAYGROUP        = A.PAYGROUP
  AND G.COUNTRY         = $Country
  AND Y.COMPANY         = A.COMPANY
  AND Y.BALANCE_ID   =  A1.BALANCE_ID
  AND Y.BALANCE_YEAR   =  A1.BALANCE_YEAR
  AND Y.BALANCE_QTR    = A1.BALANCE_QTR
  AND Y.BALANCE_PERIOD  = A1.BALANCE_PERIOD
  AND Y.EMPLID          = B.EMPLID
  AND G.EFFDT           =
    (SELECT MAX(EFFDT)
       FROM PS_PAYGROUP_TBL
      WHERE COMPANY    = A.COMPANY
        AND PAYGROUP   = A.PAYGROUP
        AND EFF_STATUS = 'A'
        AND EFFDT     <= A.PAY_END_DT)
ORDER BY B.FORM_ID,
         B.PAYCHECK_NBR
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Company-Data
!***********************************************************************

begin-SELECT
CT.DESCR,CT.ADDRESS1,CT.ADDRESS2,CT.CITY,CT.STATE,CT.POSTAL

  let $CompanyName      = &CT.Descr
  move &CT.Postal                  to $Zip
  move &CT.Postal                  to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if

  move $Zip                        to $ZipExtsn ~~~~~xxxxx

  let $CompanyCityState =
      rtrim(&CT.City,' ') ||' '|| rtrim(&CT.State,' ') ||'  '|| $Zip

  let $CompanyAddrLine1   = &CT.Address1
  let $CompanyAddrLine3   = ''
  if rtrim(&CT.Address2,' ') = ''
    let $CompanyAddrLine2 = $CompanyCityState
  else
    let $CompanyAddrLine2 = &CT.Address2
    let $CompanyAddrLine3 = $CompanyCityState
  end-if

FROM  PS_COMPANY_TBL CT
WHERE COMPANY = &A.Company
  AND EFFDT   =
    (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
      WHERE COMPANY = CT.COMPANY
        AND EFFDT  <= &A.Pay_End_Dt)
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-PayGroup-Data
!***********************************************************************

begin-SELECT
PG.DESCR
PG.ERNCD_REG_HRS,PG.ERNCD_OT_HRS,PG.ERNCD_REG_EARNS
PG.SRC_BANK_ID
SB.SRC_BANK_ID,SB.BANK_CD,SB.ACCOUNT_EC_ID
BT.BANK_NM,BT.ADDRESS1,BT.ADDRESS2,BT.CITY,BT.STATE,BT.POSTAL

  let $PayGroupName = &PG.Descr
  let $TransitNum   = &SB.BANK_CD
  let $AccountNum   = translate(rtrim(&SB.ACCOUNT_EC_ID,' '),'-','D')
  let $BankID       = $BankDistrict || '-' ||
                      SUBSTR(&SB.BANK_CD,5,4) || '/' ||
                      SUBSTR(&SB.BANK_CD,1,4)

  let $ErnCd = &PG.ErnCd_Reg_Hrs
  do Get-Earnings-Name
  let $ShiftDiffEligRegular = $ShiftDiffElig
  let #FactorMultRegular    = #FactorMult

  if $Prior_Earns_Found = 'Y'
    move $EarningsAbbrv to $EarnNameRegHrs
  else
    move $EarningsName to $EarnNameRegHrs
  end-if

  let $ErnCd = &PG.ErnCd_OT_Hrs
  do Get-Earnings-Name
  let $ShiftDiffEligOT = $ShiftDiffElig
  let #FactorMultOT    = #FactorMult

  if $Prior_Earns_Found = 'Y'
    move $EarningsAbbrv to $EarnNameOTHrs
  else
    move $EarningsName to $EarnNameOTHrs
  end-if

  let $ErnCd = &PG.ErnCd_Reg_Earns
  do Get-Earnings-Name

  if $Prior_Earns_Found = 'Y'
    move $EarningsAbbrv to $EarnNameRegEarns
  else
    move $EarningsName to $EarnNameRegEarns
  end-if


  let $BankName      = upper(&BT.BANK_NM)

  move &BT.Postal                  to $Zip
  move &BT.Postal                  to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if

  move $Zip                        to $ZipExtsn ~~~~~xxxxx

  let $BankCityState =
      rtrim(&BT.City,' ') ||' '|| rtrim(&BT.State,' ') ||'  '|| $Zip

  let $BankAddrLine1   = &BT.Address1
  let $BankAddrLine3   = ''
  if rtrim(&BT.Address2,' ') = ''
    let $BankAddrLine2 = $BankCityState
  else
    let $BankAddrLine2 = &BT.Address2
    let $BankAddrLine3 = $BankCityState
  end-if

FROM  PS_PAYGROUP_TBL PG,
      PS_SRC_BANK SB,
      PS_BANK_EC_TBL BT
WHERE PG.COMPANY  = &A.Company
  AND PG.PAYGROUP = &A.PayGroup
  AND PG.COUNTRY  = $Country
  AND PG.EFFDT    = &G.Effdt
  AND PG.SRC_BANK_ID = SB.SRC_BANK_ID
  AND BT.BANK_CD     = SB.BANK_CD
  AND BT.COUNTRY_CD  = $Country
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Ee-Job-Data
!***********************************************************************

begin-SELECT
J.DEPTID,J.JOBCODE,J.LOCATION,J.COMPRATE
P.NAME,
J.BUSINESS_UNIT
J.SETID_JOBCODE
FQ.FREQUENCY_TYPE

  let $BU       = rtrim(&J.BUSINESS_UNIT,' ')
  let $DeptID   = rtrim(&J.DeptID,' ')
  do Get-Department-Name
  let $SetID = rtrim(&J.SetID_JobCode, ' ')
  let $JobCode  = rtrim(&J.JobCode,' ')
  do Get-Job-Title
  move &J.Business_unit to $Busunit
  let $Recname  = 'LOCATION_TBL'
  do Get-Setid($Busunit, $Recname, $Setid)
  let $Location = rtrim(&J.Location,' ')
  do Get-Location-Name

  let $FieldName  = 'FREQUENCY_TYPE'
  let $FieldValue = &FQ.FREQUENCY_TYPE
  do Read-Translate-Table
  move $XLatLongName to $CompFrequency


  let $Name = &P.Name
  do Rotate-Name
  move $Name to $HomeName

   Do Get-Empl-Address (&B.Emplid,'HOME', $AddressFound)

   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL   = $GETADDR_POSTAL

  move $Postal                   to $Zip
  move $Postal                   to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if

  move $Zip                        to $ZipExtsn ~~~~~xxxxx

  let $HomeCityState =
      rtrim($City,' ') ||' '|| rtrim($State,' ') ||'  ' || $Zip


  let $HomeAddrLine1   = $Address1
  let $HomeAddrLine3   = ''
  if rtrim($Address2,' ') = ''
    let $HomeAddrLine2 = $HomeCityState
  else
    let $HomeAddrLine2 = $Address2
    let $HomeAddrLine3 = $HomeCityState
  end-if

FROM  PS_JOB           J,
      PS_NAMES P,
      PS_FREQUENCY_TBL FQ
WHERE P.EMPLID            = J.EMPLID
  AND J.EMPLID            = &B.EmplID
  AND J.EMPL_RCD         = &B.EMPL_RCD
  AND J.COMPANY = &A.COMPANY
  AND J.EFFDT             =
    (SELECT MAX(EFFDT)
       FROM PS_JOB
      WHERE EMPLID    = J.EMPLID
        AND EMPL_RCD = J.EMPL_RCD
        AND COMPANY = J.COMPANY
        AND EFFDT    <= &A.Pay_End_Dt)
  AND J.EFFSEQ =
    (SELECT MAX(EFFSEQ)
       FROM PS_JOB
      WHERE EMPLID    = J.EMPLID
        AND EMPL_RCD = J.EMPL_RCD
        AND COMPANY = J.COMPANY
        AND EFFDT     = J.EFFDT)
  AND J.COMP_FREQUENCY    = FQ.FREQUENCY_ID
  AND FQ.EFF_STATUS       = 'A'
  AND FQ.EFFDT            =
    (SELECT MAX(FQ1.EFFDT)
       FROM PS_FREQUENCY_TBL FQ1
      WHERE FQ1.FREQUENCY_ID   = FQ.FREQUENCY_ID
        AND FQ1.EFF_STATUS     = FQ.EFF_STATUS
        AND FQ1.EFFDT         <= J.EFFDT)
  AND P.NAME_TYPE = 'PRI'
  AND P.EFFDT =
      (SELECT MAX(PN.EFFDT)
       FROM   PS_NAMES PN
       WHERE  PN.EMPLID    = P.EMPLID
         AND  PN.NAME_TYPE = P.NAME_TYPE
         AND  PN.EFFDT    <= $AsOfToday)
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Ee-Tax-Data
!***********************************************************************

begin-SELECT
FT.EFFDT,
FT.SPECIAL_FWT_STATUS,
FT.FWT_MAR_STATUS,
FT.FWT_ALLOWANCES,
FT.FWT_ADDL_AMT,
FT.FWT_ADDL_PCT

  let $FieldName    = 'FWT_MAR_STATUS'
  let $FieldValue   = &FT.FWT_Mar_Status
  do Read-Translate-Table
  let $FWTMarStatus = $XlatShortName
  let $FieldName    = 'SPECIAL_FWT_STATUS'
  let $FieldValue   = &FT.SPECIAL_FWT_STATUS
  let $FieldValue   = 'E'
  do Read-Translate-Table
  let $FWTStatus    = $XLatShortName

FROM  PS_FED_TAX_DATA   FT
WHERE FT.EMPLID   = &B.EmplID
  AND FT.COMPANY  = &A.Company
  AND FT.EFFDT    =
    (SELECT MAX(EFFDT)
       FROM PS_FED_TAX_DATA
      WHERE EMPLID  = FT.EMPLID
        AND COMPANY = FT.COMPANY
        AND CREATION_DT <= &B.UPDATE_DT
        AND EFFDT  <= &A.Check_Dt)
end-SELECT

LET $ST_FOUND               = 'N'
LET $ST_STATE               = ''
LET $ST_RESIDENT            = ''
LET $ST_SWT_MAR_STATUS      = ''
LET #ST_SWT_ALLOWANCES      = 0
LET #ST_SWT_ADDL_ALLOWNCES  = 0
LET #ST_SWT_ADDL_AMT        = 0
LET #ST_SWT_ADDL_PCT        = 0
LET $ST.SPECIAL_SWT_STATUS  = ' '

begin-select
ST.STATE
ST.RESIDENT
ST.SPECIAL_SWT_STATUS,
ST.SWT_MAR_STATUS
ST.SWT_ALLOWANCES
ST.SWT_ADDL_ALLOWNCES
ST.SWT_ADDL_AMT
ST.SWT_ADDL_PCT

   LET $ST_FOUND               = 'Y'
   LET $ST_STATE               = &ST.STATE
   LET $ST_RESIDENT            = &ST.RESIDENT
   LET $ST_SWT_MAR_STATUS      = &ST.SWT_MAR_STATUS
   LET #ST_SWT_ALLOWANCES      = &ST.SWT_ALLOWANCES
   LET #ST_SWT_ADDL_ALLOWNCES  = &ST.SWT_ADDL_ALLOWNCES
   LET #ST_SWT_ADDL_AMT        = &ST.SWT_ADDL_AMT
   LET #ST_SWT_ADDL_PCT        = &ST.SWT_ADDL_PCT
   LET $ST.SPECIAL_SWT_STATUS  = &ST.SPECIAL_SWT_STATUS
   let $FieldName              = 'SPECIAL_SWT_STATUS'
   let $FieldValue             = &ST.SPECIAL_SWT_STATUS
   let $FieldValue             = 'E'
   do Read-Translate-Table
   let $SWTStatus              = $XLatShortName


from PS_STATE_TAX_DATA ST
WHERE ST.EMPLID   = &B.EmplID
  AND ST.COMPANY  = &A.COMPANY
  AND ST.EFFDT    = &FT.EFFDT
  AND ST.CREATION_DT <= &B.UPDATE_DT
  AND ST.RESIDENT = 'Y'
end-select

IF $ST_FOUND = 'N'
begin-select
ST2.STATE
ST2.RESIDENT
ST2.SPECIAL_SWT_STATUS,
ST2.SWT_MAR_STATUS
ST2.SWT_ALLOWANCES
ST2.SWT_ADDL_ALLOWNCES
ST2.SWT_ADDL_AMT
ST2.SWT_ADDL_PCT
PT.LOCALITY

   if $ST_FOUND = 'N'
      if rtrim(&PT.LOCALITY,' ') = ''
         LET $ST_FOUND               = 'Y'
         LET $ST_STATE               = &ST2.STATE
         LET $ST_RESIDENT            = &ST2.RESIDENT
         LET $ST_SWT_MAR_STATUS      = &ST2.SWT_MAR_STATUS
         LET #ST_SWT_ALLOWANCES      = &ST2.SWT_ALLOWANCES
         LET #ST_SWT_ADDL_ALLOWNCES  = &ST2.SWT_ADDL_ALLOWNCES
         LET #ST_SWT_ADDL_AMT        = &ST2.SWT_ADDL_AMT
         LET #ST_SWT_ADDL_PCT        = &ST2.SWT_ADDL_PCT
         LET $ST.SPECIAL_SWT_STATUS  = &ST2.SPECIAL_SWT_STATUS
         let $FieldName              = 'SPECIAL_SWT_STATUS'
         let $FieldValue             = &ST2.SPECIAL_SWT_STATUS
         let $FieldValue             = 'E'
         do Read-Translate-Table
         let $SWTStatus              = $XLatShortName
      end-if
   end-if

from PS_STATE_TAX_DATA ST2,
     PS_PAY_TAX PT
WHERE ST2.EMPLID    = &B.EmplID
  AND ST2.COMPANY   = &A.COMPANY
  AND ST2.CREATION_DT <= &B.UPDATE_DT
  AND ST2.EFFDT     = &FT.EFFDT
  AND ST2.STATE     = PT.STATE
  AND PT.COMPANY    = &A.COMPANY
  AND PT.PAYGROUP   = &A.PAYGROUP
  AND PT.PAY_END_DT = &A.PAY_END_DT
  AND PT.OFF_CYCLE  = &B.OFF_CYCLE
  AND PT.PAGE_NUM   = &B.PAGE_NUM
  AND PT.LINE_NUM   = &B.LINE_NUM
  AND PT.SEPCHK     = &B.SEPCHK
  AND PT.STATE     <> '$U'
  AND PT.TAX_CLASS  = 'H'
ORDER BY ST2.STATE
end-select
END-IF

IF $ST_FOUND = 'Y'
   do Get-SWT-Marital-Status
END-IF

end-procedure


!***********************************************************************
begin-procedure Get-SWT-Marital-Status
!***********************************************************************

begin-SELECT
SM.DESCRSHORT

  let $SWTMarStatus = substr(&SM.DescrShort,1,10)

FROM  PS_SWT_MARSTAT_TBL SM
WHERE SM.STATE          = $ST_State
  AND SM.SWT_MAR_STATUS = $ST_SWT_Mar_Status
  AND SM.EFFDT          =
    (SELECT MAX(EFFDT)
       FROM PS_SWT_MARSTAT_TBL
      WHERE STATE          = SM.STATE
        AND SWT_MAR_STATUS = SM.SWT_MAR_STATUS
        AND EFFDT         <= &A.Pay_End_Dt)
end-SELECT

end-procedure


!***********************************************************************
! Check if paycheck contains adjustment to prior period earnings
!***********************************************************************
begin-procedure Find-Prior-Earn-Adj

begin-SELECT
'X'

  let $Prior_Earns_Found = 'Y'

FROM  PS_PAY_EARNINGS EA
WHERE EA.COMPANY    = &A.Company
  AND EA.PAYGROUP   = &A.PayGroup
  AND EA.PAY_END_DT = &A.Pay_End_Dt
  AND EA.OFF_CYCLE  = &B.Off_Cycle
  AND EA.PAGE_NUM   = &B.PAGE_NUM
  AND EA.LINE_NUM   = &B.LINE_NUM
  AND EA.SEPCHK     = &B.SepChk
  AND EA.SINGLE_CHECK_USE IN ('C', 'N')
  AND EA.STATE = 'CA'
  AND EA.EARNS_END_DT < &A.PAY_BEGIN_DT
end-SELECT

  if $Prior_Earns_Found = 'Y'
    do Find-Earliest-Earns-Begin
  end-if

end-procedure


!***********************************************************************
! Find the earliest Earnings Begin Date for prior period earnigns
!***********************************************************************
begin-procedure Find-Earliest-Earns-Begin

begin-SELECT
MAX(EB.EARNS_END_DT)     &P_Earns_End
MIN(EB.EARNS_BEGIN_DT)   &P_Earns_Begin

FROM  PS_PAY_EARNINGS EB
WHERE EB.COMPANY    = &A.Company
  AND EB.PAYGROUP   = &A.PayGroup
  AND EB.PAY_END_DT = &A.Pay_End_Dt
  AND EB.OFF_CYCLE  = &B.Off_Cycle
  AND EB.PAGE_NUM   = &B.PAGE_NUM
  AND EB.LINE_NUM   = &B.LINE_NUM
  AND EB.SEPCHK     = &B.SepChk
  AND EB.SINGLE_CHECK_USE IN ('C', 'N')
  AND EB.STATE = 'CA'
  AND EB.EARNS_END_DT < &A.PAY_BEGIN_DT
end-SELECT
end-procedure


!***********************************************************************
begin-procedure Get-Earnings-Detail
!***********************************************************************

  let $EarnBegin = ''
  let $EarnEnd = ''

  if $Prior_Earns_Found = 'Y'
     let $E_Paysheet_Src = 'AND E.PAY_SHEET_SRC <> ''F'''
     let $E_OrderBy = 'ORDER BY E.EARNS_END_DT DESC, E.EARNS_BEGIN_DT DESC'
  else
     let $E_Paysheet_Src = ''
     let $E_OrderBy = 'ORDER BY E.ADDL_NBR'
  end-if

begin-SELECT
! E.HOURLY_RT
E.REG_HRS
E.REG_HRLY_EARNS
E.OT_HRS
E.OT_HRLY_EARNS
E.REG_EARNS
E.COMP_RATECD_REG
E.COMP_RATECD_OT
E.COMPRATE_USED_REG
E.COMPRATE_USED_OT
E.ADDL_NBR
E.RATE_USED
E.SHIFT_RT
E.EARNS_END_DT

  if $Prior_Earns_Found = 'Y'
    if &E.EARNS_END_DT < &A.PAY_BEGIN_DT
      move &P_Earns_Begin   to $EarnBegin
      move &P_Earns_End     to $EarnEnd
    else
      let $EarnBegin = ''
      let $EarnEnd = ''
    end-if
  end-if

  move &E.Shift_Rt                 to #ShiftRate
  let #k = 1
  WHILE #k <= 3
    evaluate #k
      when = 1
        move &PG.ErnCd_Reg_Hrs     to $Code
        move $EarnNameRegHrs       to $Name
        move &E.Comp_Ratecd_Reg    to $CmpRtCd
!       move &E.Hourly_Rt          to #Rate
        move &E.Comprate_used_reg  to #Rate
        move &E.Reg_Hrs            to #Hours
        move &E.Reg_Hrly_Earns     to #Earns
        move ''                    to $RateUsed
        move $ShiftDiffEligRegular to $ShiftDiffElig
        move #FactorMultRegular    to #FactorMult
        do Test-For-Rate-Recalc
      when = 2
        move &PG.ErnCd_OT_Hrs      to $Code
        move $EarnNameOTHrs        to $Name
        move &E.Comp_Ratecd_Ot     to $CmpRtCd        !++
        move &E.Comprate_used_Ot   to #Rate           !++
        move &E.OT_Hrs             to #Hours
        move &E.OT_Hrly_Earns      to #Earns
        move &E.Rate_Used          to $RateUsed
        move $ShiftDiffEligOT      to $ShiftDiffElig
        move #FactorMultOT         to #FactorMult
        do Test-For-Rate-Recalc
      when = 3
        move &PG.ErnCd_Reg_Earns   to $Code
        move $EarnNameRegEarns     to $Name
        move ''                    to $CmpRtCd        !++
        move 0                     to #Rate
        move 0                     to #Hours
        move &E.Reg_Earns          to #Earns
     end-evaluate
     move #RatesRow                to #i
     do Update-ETDarray-Current-Earnings
     add 1 to #k
  END-WHILE
  do Get-Other-Earnings-Detail
FROM  PS_PAY_EARNINGS E
WHERE E.COMPANY    = &A.Company
  AND E.PAYGROUP   = &A.PayGroup
  AND E.PAY_END_DT = &A.Pay_End_Dt
  AND E.OFF_CYCLE  = &B.Off_Cycle
  AND E.PAGE_NUM      = &B.PAGE_NUM
  AND E.LINE_NUM      = &B.LINE_NUM
  AND E.SEPCHK     = &B.SepChk
  AND E.SINGLE_CHECK_USE IN ('C', 'N')
[$E_Paysheet_Src]
[$E_Orderby]
end-SELECT

  let $EarnBegin = ''
  let $EarnEnd = ''

  if $Prior_Earns_Found = 'Y'
    do Arrange-Earnings
  end-if

  do Get-Earning-Balances
end-procedure


!***********************************************************************
begin-procedure Get-Other-Earnings-Detail
!***********************************************************************

begin-SELECT
OE.ERNCD
  let $ErnCd = &OE.ErnCd
  do Get-Earnings-Name
OE.COMP_RATECD
OE.COMPRATE_USED
OE.OTH_HRS
OE.OTH_EARNS
OE.OTH_PAY
OE.HRS_DIST_SW
OE.RATE_USED
  move $ErnCd            to $Code

  if $Prior_Earns_Found = 'Y'
    move $EarningsAbbrv to $Name
  else
    move $EarningsName to $Name
  end-if

  do Check-Override-Rate

  move &OE.Comp_Ratecd   to $CmpRtCd        !++

  if $override-yes = 'Y'
    move &OV.Perunit_Ovr_Rt to #Rate
  else
    if &OE.OTH_HRS > 0 and &OE.OTH_PAY > 0
      move 0                  to #Rate
    else
      move &OE.Comprate_used  to #Rate
    end-if
  end-if

  if &OE.HRS_DIST_SW = 'Y'
    move 0               to #Rate
    move 0               to #Hours
  else
    move &OE.Oth_Hrs     to #Hours
  end-if

  move &OE.Oth_Earns     to #Earns
  move &OE.Rate_Used     to $RateUsed
  do Test-For-Rate-Recalc

  move #RatesRow         to #i
  do Update-ETDarray-Current-Earnings
FROM  PS_PAY_OTH_EARNS OE
WHERE OE.COMPANY    = &A.Company
  AND OE.PAYGROUP   = &A.PayGroup
  AND OE.PAY_END_DT = &A.Pay_End_Dt
  AND OE.OFF_CYCLE  = &B.Off_Cycle
  AND OE.PAGE_NUM      = &B.PAGE_NUM
  AND OE.LINE_NUM      = &B.LINE_NUM
  AND OE.SEPCHK     = &B.SepChk
  AND OE.ADDL_NBR      = &E.ADDL_NBR
ORDER BY OE.ERNCD
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Check-Override-Rate
!***********************************************************************

  let $override-yes = 'N'

begin-SELECT
OV.PERUNIT_OVR_RT

  let $override-yes = 'Y'

FROM  PS_EARNINGS_TBL OV
WHERE OV.ERNCD        = &OE.ERNCD
  AND OV.EFF_STATUS   = 'A'
  AND OV.PAYMENT_TYPE = 'U'
  AND OV.EFFDT        =
     (SELECT MAX(EFFDT)
        FROM PS_EARNINGS_TBL
       WHERE ERNCD         = OV.ERNCD
         AND EFF_STATUS    = OV.EFF_STATUS
         AND EFFDT        <= &A.Pay_End_Dt)
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Test-For-Rate-Recalc
!***********************************************************************

  if #Rate <> 0 and #Hours <> 0 and #Earns <> 0

    let #wEarns = #Rate * #Hours
    let #wEarns = #wEarns - #Earns

    if #wEarns > .01 or #wEarns < -.01

      if $RateUsed = 'F' or $RateUsed = 'A'
        or #FactorHrsAdj <> 0 or #FactorErnAdj <> 0
        move 'Y' to $NeedXfootMsg
      else
        if $ShiftDiffElig = 'Y'
          let #Rate = (#Rate + #ShiftRate + #FactorRateAdj) * #FactorMult
        else
          let #Rate = (#Rate + #FactorRateAdj) * #FactorMult
        end-if

        let #wEarns = #Rate * #Hours
        let #wEarns = #wEarns - #Earns

        if #wEarns > .01 or #wEarns < -.01
          let #Rate = #Earns / #Hours
        end-if

        if #Rate < 0
          let #Rate = #Rate * -1
        end-if
      end-if
    end-if
  end-if

end-procedure


!***********************************************************************
begin-procedure Get-Earning-Balances
!***********************************************************************

  let #Cur = 0

begin-SELECT
EB.EMPL_RCD, EB.ERNCD,EB.HRS_YTD,EB.GRS_YTD

  let $ErnCd = &EB.ErnCd
  do Get-Earnings-Name
  let $Code = $ErnCd

  if $Prior_Earns_Found = 'Y'
    let $Name = $EarningsAbbrv
  else
    let $Name = $EarningsName
  end-if

  let #k = 1
  WHILE #k <= 3
    evaluate #k
      when = 1
        move 0           to #YTD
        move #RatesRow   to #i
      when = 2
        move &EB.Hrs_YTD to #YTD
        move #HoursRow   to #i
      when = 3
        move &EB.Grs_YTD to #YTD
        move #EarnsRow   to #i
    end-evaluate
            do Update-ETDarray
    add 1 to #k
  END-WHILE

FROM  PS_EARNINGS_BAL EB
WHERE EB.EMPLID        = &B.EmplID
  AND EB.COMPANY       = &A.Company
  AND EB.BALANCE_ID    = &A1.BALANCE_ID
  AND EB.BALANCE_YEAR  = &A1.BALANCE_YEAR
  AND EB.SPCL_BALANCE  = 'N'
  AND EB.BALANCE_PERIOD       =
    (SELECT MAX(BALANCE_PERIOD)
       FROM PS_EARNINGS_BAL
      WHERE EMPLID        = EB.EMPLID
        AND EMPL_RCD      = EB.EMPL_RCD
        AND COMPANY       = EB.COMPANY
        AND BALANCE_ID    = EB.BALANCE_ID
        AND BALANCE_YEAR  = EB.BALANCE_YEAR
        AND SPCL_BALANCE  = EB.SPCL_BALANCE
        AND ERNCD         = EB.ERNCD
        AND BALANCE_PERIOD      <= &A1.BALANCE_PERIOD)
ORDER BY EB.EMPL_RCD, EB.ERNCD
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Taxes-Detail
!***********************************************************************

  let #YTD = 0
  let #i   = #TaxesRow

begin-SELECT
T.STATE,T.LOCALITY,T.TAX_CLASS,T.TAX_CUR,T.TXGRS_CUR
  if rtrim(&T.State,' ') = 'PA' and &T.TAX_CUR = 0
    ! bypass zero tax_cur for PA
  else
    let $Code = rtrim(&T.State,' ') || rtrim(&T.Locality,' ') || &T.Tax_Class
    if rtrim(&T.State, ' ') = '$U'
      let $Name = 'Fed'
      if &T.Tax_Class = 'H' or &T.Tax_Class = 'A'   !withholding          !HP99999
        add  &T.TxGrs_Cur to #FedTaxGrossCur                              !HP99998
      end-if
    else
      let $Name = rtrim(&T.State, ' ')
      if rtrim(&T.Locality,' ') <> ''     !if a Locality
        let $State = rtrim(&T.State, ' ')
        let $Locality = rtrim(&T.Locality, ' ')
        do Get-Local-Tax-Data
        let $Name = $Name || ' ' || $Localabbr
      end-if
    end-if
    let $FieldName  = 'TAX_CLASS'
    let $FieldValue = &T.Tax_Class
    do Read-Translate-Table

    if rtrim(&T.State, ' ') = 'CA' and &T.Tax_Class = 'D'
       do Format-DateTime(&B.CHECK_DT,$out1,{DEFCMP},'','')
       if $out1 >= $CA-date and
          $Msg_Text <> ''
          let $Name = $Name || ' ' || substr($Msg_Text,1,8)
       else
          let $Name = $Name || ' ' || $XLatShortName
       end-if
    else
       let $Name = $Name || ' ' || $XLatShortName
    end-if

    move &T.Tax_Cur to #Cur
    do Update-ETDarray

  end-if

FROM  PS_PAY_TAX T
WHERE T.COMPANY    = &A.Company
  AND T.PAYGROUP   = &A.PayGroup
  AND T.PAY_END_DT = &A.Pay_End_Dt
  AND T.OFF_CYCLE  = &B.Off_Cycle
  AND T.PAGE_NUM      = &B.PAGE_NUM
  AND T.LINE_NUM      = &B.LINE_NUM
  AND T.SEPCHK     = &B.SepChk
  AND T.STATE NOT IN ('$UAS','$UGU','$UPR','$UVI')
  AND T.TAX_CLASS IN ('A','B','C','D','F','G','H','L','M','N','P','T','V','W')     !HP99999
ORDER BY T.STATE,T.LOCALITY,T.TAX_CLASS DESC
end-SELECT
  do Get-Tax-Balances
end-procedure


!***********************************************************************
begin-procedure Get-Tax-Balances
!***********************************************************************

  let #Cur = 0

begin-SELECT
TB.STATE,TB.LOCALITY,TB.TAX_CLASS,TB.TAX_YTD,TB.TXGRS_YTD
  if rtrim(&TB.State, ' ') = 'PA' and &TB.TAX_YTD = 0
    ! bypass zero tax_ytd for PA
  else
    let $Code = rtrim(&TB.State, ' ') || rtrim(&TB.Locality,' ') || &TB.Tax_Class  !-:
    if rtrim(&TB.State, ' ') = '$U'
      let $Name = 'Fed'
      if &TB.Tax_Class = 'H' or &TB.Tax_Class = 'A'         !withholding  !HP99999
        add  &TB.TxGrs_YTD to #FedTaxGrossYTD                             !HP99998
      end-if
    else
      let $Name = rtrim(&TB.State,' ')
      if rtrim(&TB.Locality,' ') <> ''     !if a Locality
        let $State = rtrim(&TB.State, ' ')
        let $Locality = rtrim(&TB.Locality, ' ')
        do Get-Local-Tax-Data
        let $Name = $Name || ' ' || $Localabbr
      end-if
    end-if
    let $FieldName  = 'TAX_CLASS'
    let $FieldValue = &TB.Tax_Class
    do Read-Translate-Table
    if rtrim(&TB.State, ' ') = 'CA' and &TB.Tax_Class = 'D'
       do Format-DateTime(&B.CHECK_DT,$out1,{DEFCMP},'','')
       if $out1 >= $CA-date and
          $Msg_Text <> ''
          let $Name = $Name || ' ' || substr($Msg_Text,1,8)
       else
          let $Name = $Name || ' ' || $XLatShortName
       end-if
    else
       let $Name = $Name || ' ' || $XLatShortName
    end-if
    move &TB.Tax_YTD to #YTD
    let $StName = rtrim(&TB.State, ' ')
    if $StName = 'PA'
      if rtrim(&TB.Locality,' ') = ''
        if &TB.Tax_Class = 'P'
        else
          do Update-ETDarray
        end-if
      else
        do Update-ETDarray
      end-if
    else
      do Update-ETDarray
    end-if
  end-if
FROM  PS_TAX_BALANCE TB
WHERE TB.EMPLID        = &B.EmplID
  AND TB.COMPANY       = &A.Company
  AND TB.BALANCE_ID    = &A1.BALANCE_ID
  AND TB.BALANCE_YEAR  = &A1.BALANCE_YEAR
  AND TB.STATE NOT IN ('$UAS','$UGU','$UPR','$UVI')
  AND TB.TAX_CLASS IN ('A','B','C','D','F','G','H','L','M','N','P','T','V','W')    !HP99999
  AND TB.BALANCE_PERIOD      =
    (SELECT MAX(BALANCE_PERIOD)
       FROM PS_TAX_BALANCE
      WHERE EMPLID        = TB.EMPLID
        AND COMPANY       = TB.COMPANY
        AND BALANCE_ID    = TB.BALANCE_ID
        AND BALANCE_YEAR  = TB.BALANCE_YEAR
        AND STATE         = TB.STATE
        AND (LOCALITY     = TB.LOCALITY
         OR  LOCALITY = ' ' and TB.LOCALITY = ' ')
        AND TAX_CLASS     = TB.TAX_CLASS
        AND BALANCE_PERIOD      <= &A1.BALANCE_PERIOD)
ORDER BY TB.STATE,TB.LOCALITY,TB.TAX_CLASS DESC
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Deductions-Detail
!***********************************************************************

  let #YTD = 0

begin-SELECT
N.PLAN_TYPE,N.DEDCD,N.DED_CLASS,N.DED_CUR

  let $PlanType = &N.Plan_Type
  let $DedCd    = &N.DedCd

  do Get-Deduction-Name

  if $SpclProcess= 'G'
    do Get-Garnishment-Detail
  else
    let $Code = $PlanType || $DedCd || &N.Ded_Class
    let $Name = $DeductionName

    evaluate &N.Ded_Class
      when = 'B'           !Before-tax deduction
        move #PreTaxDedsRow  to #i
      when = 'A'           !After-tax deduction
        move #PostTaxDedsRow to #i
      when = 'N'           !Non-taxable benefit
      when = 'P'
        move #BenefitsRow    to #i
      when = 'T'           !Taxable benefit
        move #BenefitsRow    to #i
        concat '*' with $Name
      when-other
        move #PostTaxDedsRow to #i
    end-evaluate

    move &N.Ded_Cur to #Cur
    do Update-ETDarray
  end-if

FROM  PS_PAY_DEDUCTION N
WHERE N.COMPANY    = &A.Company
  AND N.PAYGROUP   = &A.PayGroup
  AND N.PAY_END_DT = &A.Pay_End_Dt
  AND N.OFF_CYCLE  = &B.Off_Cycle
  AND N.PAGE_NUM   = &B.PAGE_NUM
  AND N.LINE_NUM   = &B.LINE_NUM
  AND N.SEPCHK     = &B.SepChk
end-SELECT
  do Get-Deduction-Balances
end-procedure


!**********************************************************************
begin-procedure Get-Garnishment-Detail
!**********************************************************************

  let #YTD = 0

begin-SELECT
GR.GARNID, GR.DEDUCT_AMT
GR.DEDUCT_GARN_AMT, GR.DEDUCT_CMPNY_FEE, GR.DEDUCT_PAYEE_FEE

     let $GarnID = RTRIM(&GR.Garnid, ' ')
     do Get-Garn-Type
     let $FieldName = 'GARN_TYPE'
     do Read-Translate-Table
     let $GarnName = Rtrim($XlatShortName,' ')

     move #PostTaxDedsRow to #i
     do Get-ETDarray-Entry-Count

     if &GR.Deduct_Amt = &GR.Deduct_Garn_Amt
        let #GarnAmt = &GR.Deduct_Amt
        let $Name = $DeductionAbbrv || '-' || $GarnName
        let $Code = 'GG' || $GarnID || &N.Ded_Class
        move #PostTaxDedsRow to #i
        move #GarnAmt to #Cur
        do Update-ETDarray

     else

        if #ecnt > 8
           let #GarnAmt = &GR.Deduct_Amt
           let $Name = $DeductionAbbrv || '-' || $GarnName || ' (Total)'
           let $Code = 'GG' || $GarnID || &N.Ded_Class
           move #PostTaxDedsRow to #i
           move #GarnAmt to #Cur
           do Update-ETDarray

        else

           do Check-For-Garn-YTD-Balances

           if &GR.Deduct_Garn_Amt <> 0 or $CGBE.Ded_Garn_YTD = 'Y'
              let #Cur = &GR.Deduct_Garn_Amt
              let $Name = $DeductionAbbrv || $GarnName || ' (Amount)'
              let $Code = 'GG' || $GarnID || &N.Ded_Class ||'AM'
              move #PostTaxDedsRow to #i
              do Update-ETDarray
           end-if

           if &GR.Deduct_Cmpny_Fee <> 0 or $CGBE.Ded_CFee_YTD = 'Y'
              let #Cur = &GR.Deduct_Cmpny_Fee
              let $Name = $DeductionAbbrv || $GarnName || ' (Co. Fee)'
              let $Code = 'GG' || $GarnID || &N.Ded_Class ||'CF'
              move #PostTaxDedsRow to #i
              do Update-ETDarray
           end-if

           if &GR.Deduct_payee_fee <> 0 or $CGBE.Ded_pfee_YTD = 'Y'
              let #Cur = &GR.Deduct_payee_fee
              let $Name = $DeductionAbbrv || $GarnName || ' (Payee Fee)'
              let $Code = 'GG' || $GarnID || &N.Ded_Class ||'PF'
              move #PostTaxDedsRow to #i
              do Update-ETDarray
           end-if

        end-if
     end-if

FROM PS_PAY_GARNISH GR
WHERE GR.COMPANY = &A.COMPANY
  AND GR.PAYGROUP = &A.PAYGROUP
  AND GR.PAY_END_DT = &A.PAY_END_DT
  AND GR.OFF_CYCLE = &B.OFF_CYCLE
  AND GR.PAGE_NUM = &B.PAGE_NUM
  AND GR.LINE_NUM = &B.LINE_NUM
  AND GR.SEPCHK = &B.SEPCHK
ORDER BY GR.GARNID
end-SELECT
end-procedure


!***********************************************************************
begin-procedure Get-Garn-Type
!***********************************************************************

begin-SELECT
GS.GARN_TYPE

  let $FieldValue = &GS.Garn_Type

FROM PS_GARN_SPEC GS
WHERE GS.EMPLID = &B.EMPLID
  AND GS.COMPANY = &A.COMPANY
  AND GS.GARNID = $Garnid
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Deduction-Balances
!***********************************************************************

  let #Cur = 0

begin-SELECT
NB.PLAN_TYPE,NB.DEDCD,NB.DED_CLASS,NB.DED_YTD

  let $PlanType = &NB.Plan_Type
  let $DedCd = &NB.DEDCD
  do Get-Deduction-Name
  if &DT.Spcl_Process = 'G'
    do Get-Garn-Balances
  else

    let $Code = &NB.Plan_Type || &NB.DedCd || &NB.Ded_Class

    let $PlanType = &NB.Plan_Type
    let $DedCd    = &NB.DedCd
    let $Name = $DeductionName

    evaluate &NB.Ded_Class
      when = 'B'           !Before-tax deduction
        move #PreTaxDedsRow  to #i
      when = 'A'           !After-tax deduction
        move #PostTaxDedsRow to #i
      when = 'N'           !Non-taxable benefit
      when = 'P'
        move #BenefitsRow    to #i
      when = 'T'           !Taxable benefit
        move #BenefitsRow    to #i
        concat '*' with $Name
      when-other
        move #PostTaxDedsRow to #i
    end-evaluate

    move &NB.Ded_YTD to #YTD
    do Update-ETDarray
  end-if

FROM  PS_DEDUCTION_BAL NB
WHERE NB.EMPLID        = &B.EmplID
  AND NB.COMPANY       = &A.Company
  AND NB.BALANCE_ID    = &A1.BALANCE_ID
  AND NB.BALANCE_YEAR  = &A1.BALANCE_YEAR
  AND NB.BALANCE_PERIOD       =
    (SELECT MAX(BALANCE_PERIOD)
       FROM PS_DEDUCTION_BAL
      WHERE EMPLID        = NB.EMPLID
        AND COMPANY       = NB.COMPANY
        AND BALANCE_ID    = NB.BALANCE_ID
        AND BALANCE_YEAR  = NB.BALANCE_YEAR
        AND BENEFIT_RCD_NBR = NB.BENEFIT_RCD_NBR
        AND PLAN_TYPE     = NB.PLAN_TYPE
        AND BENEFIT_PLAN  = NB.BENEFIT_PLAN
        AND DEDCD         = NB.DEDCD
        AND DED_CLASS     = NB.DED_CLASS
        AND BALANCE_PERIOD     <= &A1.BALANCE_PERIOD)
end-SELECT

end-procedure


!**********************************************************************
begin-procedure Get-Garn-Balances
!**********************************************************************

  let #Cur = 0

begin-SELECT
NG.GARNID, NG.DED_CLASS, NG.DED_YTD
NG.BALANCE_PERIOD, NG.DED_GARN_YTD, NG.DED_CFEE_YTD, NG.DED_PFEE_YTD

     let $GarnID = RTRIM(&NG.Garnid, ' ')
     do Get-Garn-Type
     let $FieldName = 'GARN_TYPE'
     do Read-Translate-Table
     let $GarnName = Rtrim($XlatShortName,' ')

     if &NG.Ded_YTD = &NG.Ded_Garn_YTD
        let #YTD  = &NG.Ded_YTD
        let $Name = $DeductionAbbrv || '-' || $GarnName
        let $Code = 'GG' || $GarnID || &NG.Ded_Class
        move #PostTaxDedsRow to #i
        do Update-ETDarray

     else
        let $Garn_Code_Tot  = 'GG' || $GarnID || &NG.Ded_Class
        let $Garn_Code_Amt  = 'GG' || $GarnID || &NG.Ded_Class ||'AM'
        let $Garn_Code_CFee = 'GG' || $GarnID || &NG.Ded_Class ||'CF'
        let $Garn_Code_Pfee = 'GG' || $GarnID || &NG.Ded_Class ||'PF'

        move #PostTaxDedsRow to #i
        do Check-ETDarray-Garn-Code

        If $Garn_Amt  = 'Y' or $Garn_Tot  = 'Y' or $Garn_CFee = 'Y' or $Garn_Pfee = 'Y'

           If $Garn_Tot  = 'Y'
              let #YTD  = &NG.Ded_YTD
              let $Name = $DeductionAbbrv || '-' || $GarnName || ' (Total)'
              let $Code = 'GG' || $GarnID || &NG.Ded_Class
              move #PostTaxDedsRow to #i
              do Update-ETDarray
           else
              if &NG.Ded_Garn_YTD <> 0
                 let #YTD  = &NG.Ded_Garn_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Amount)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'AM'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
              end-if
              if &NG.Ded_CFee_YTD <> 0
                 let #YTD  = &NG.Ded_CFee_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Co. Fee)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'CF'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
              end-if
              if &NG.Ded_PFee_YTD <> 0
                 let #YTD  = &NG.Ded_Pfee_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Payee Fee)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'PF'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
               end-if
           end-if 

        else

           move #PostTaxDedsRow to #i
           do Get-ETDarray-Entry-Count

           if #ecnt > 8
              let #YTD  = &NG.Ded_YTD
              let $Name = $DeductionAbbrv || '-' || $GarnName || ' (Total)'
              let $Code = 'GG' || $GarnID || &NG.Ded_Class
              move #PostTaxDedsRow to #i
              do Update-ETDarray
           else  
              if &NG.Ded_Garn_YTD <> 0
                 let #YTD  = &NG.Ded_Garn_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Amount)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'AM'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
              end-if
              if &NG.Ded_CFee_YTD <> 0
                 let #YTD  = &NG.Ded_CFee_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Co. Fee)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'CF'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
              end-if
              if &NG.Ded_PFee_YTD <> 0
                 let #YTD  = &NG.Ded_Pfee_YTD
                 let $Name = $DeductionAbbrv || $GarnName || ' (Payee Fee)'
                 let $Code = 'GG' || $GarnID || &NG.Ded_Class ||'PF'
                 move #PostTaxDedsRow to #i
                 do Update-ETDarray
               end-if
           end-if

        end-if

     end-if

FROM  PS_GARN_BALANCE NG
WHERE NG.EMPLID = &B.EMPLID
  AND NG.COMPANY = &A.COMPANY
  AND NG.BALANCE_ID = &A1.BALANCE_ID
  AND NG.BALANCE_YEAR = &A1.BALANCE_YEAR
  AND NG.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_GARN_BALANCE
        WHERE EMPLID = NG.EMPLID
          AND COMPANY = NG.COMPANY
          AND BALANCE_ID = NG.BALANCE_ID
          AND BALANCE_YEAR = NG.BALANCE_YEAR
          AND PLAN_TYPE = NG.PLAN_TYPE
          AND BENEFIT_PLAN = NG.BENEFIT_PLAN
          AND DEDCD = NG.DEDCD
          AND DED_CLASS = NG.DED_CLASS
          AND GARNID = NG.GARNID
          AND BALANCE_PERIOD <= &A1.BALANCE_PERIOD)
 ORDER BY NG.GARNID
end-SELECT

end-procedure

!**********************************************************************
begin-procedure Check-For-Garn-YTD-Balances
!**********************************************************************

     let $CGBE.Ded_Garn_YTD = 'N'
     let $CGBE.Ded_CFee_YTD = 'N'
     let $CGBE.Ded_pfee_YTD = 'N'

begin-SELECT
CGBE.DED_GARN_YTD, CGBE.DED_CFEE_YTD, CGBE.DED_PFEE_YTD

     if &CGBE.Ded_Garn_YTD <> 0
        let $CGBE.Ded_Garn_YTD = 'Y'
     end-if
     if &CGBE.Ded_CFee_YTD <> 0
        let $CGBE.Ded_CFee_YTD = 'Y'
     end-if
     if &CGBE.Ded_pfee_YTD <> 0
        let $CGBE.Ded_pfee_YTD = 'Y'
     end-if

FROM  PS_GARN_BALANCE CGBE
WHERE CGBE.EMPLID = &B.EMPLID
  AND CGBE.COMPANY = &A.COMPANY
  AND CGBE.BALANCE_ID = &A1.BALANCE_ID
  AND CGBE.BALANCE_YEAR = &A1.BALANCE_YEAR
  AND CGBE.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_GARN_BALANCE
        WHERE EMPLID = CGBE.EMPLID
          AND COMPANY = CGBE.COMPANY
          AND BALANCE_ID = CGBE.BALANCE_ID
          AND BALANCE_YEAR = CGBE.BALANCE_YEAR
          AND PLAN_TYPE = CGBE.PLAN_TYPE
          AND BENEFIT_PLAN = CGBE.BENEFIT_PLAN
          AND DEDCD = CGBE.DEDCD
          AND DED_CLASS = CGBE.DED_CLASS
          AND GARNID = CGBE.GARNID
          AND BALANCE_PERIOD <= &A1.BALANCE_PERIOD)
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Net-Pay-Distribution
!***********************************************************************

begin-SELECT
PD.PAYCHECK_NBR,PD.ACCOUNT_TYPE,PD.DEPOSIT_AMOUNT,PD.ACCOUNT_NUM

  let $FieldName  = 'ACCOUNT_TYPE'
  let $FieldValue = &PD.Account_Type
  do Read-Translate-Table

  if &PD.Account_Type = '$'             !check
    add &PD.Deposit_Amount to #CheckNetPay
    move $XLatShortName    to $chk_issued
  else
    move &PD.PAYCHECK_NBR  to #Advice#
    add &PD.Deposit_Amount to #DepositNetPay
    move &PD.ACCOUNT_NUM   to $deposit_acct_nbr
    if &PD.Account_Type = 'C'           !checking
        move $XLatShortName    to $adv_checkings
        add &PD.Deposit_Amount to #Depositcheckings
        add 1 to #chkg_ctr
        if #chkg_ctr = 1
           move &PD.ACCOUNT_NUM     to $deposit_acct_nbr_chckngs
        else
           move ''                  to $deposit_acct_nbr_chckngs
        end-if
    else
       if &PD.Account_Type = 'S'        !savings
           move $XLatShortName    to $adv_savings
           add &PD.Deposit_Amount to #Depositsavings
           add 1 to #svng_ctr
           if #svng_ctr = 1
              move &PD.ACCOUNT_NUM to $deposit_acct_nbr_savings
           else
              move ''              to $deposit_acct_nbr_savings
           end-if
       end-if
    end-if
  end-if

FROM  PS_PAY_DISTRIBUTN PD
WHERE PD.COMPANY    = &A.Company
  AND PD.PAYGROUP   = &A.PayGroup
  AND PD.PAY_END_DT = &A.Pay_End_Dt
  AND PD.OFF_CYCLE  = &B.Off_Cycle
  AND PD.PAGE_NUM      = &B.PAGE_NUM
  AND PD.LINE_NUM      = &B.LINE_NUM
  AND PD.SEPCHK     = &B.SepChk
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Vacation-Balances
!***********************************************************************

  move 0  to  #VacStartBal
  move 0  to  #VacEarned
  move 0  to  #VacBought
  move 0  to  #VacTaken
  move 0  to  #VacSold
  move 0  to  #VacAdjust
  move 0  to  #VacEndBal

  move 0  to  #SickStartBal
  move 0  to  #SickEarned
  move 0  to  #SickBought
  move 0  to  #SickTaken
  move 0  to  #SickSold
  move 0  to  #SickAdjust
  move 0  to  #SickEndBal
begin-SELECT
V.HRS_CARRYOVER,V.HRS_EARNED_YTD,V.HRS_TAKEN_YTD
V.HRS_ADJUST_YTD,V.HRS_BOUGHT_YTD,V.HRS_SOLD_YTD
V.HRS_TAKEN_UNPROC,V.HRS_ADJUST_UNPROC
V.HRS_BOUGHT_UNPROC,V.HRS_SOLD_UNPROC
V.ACCRUAL_PROC_DT,V.PLAN_TYPE

  if &V.PLAN_TYPE        = '50'
  let #SickStartBal = #SickStartBal + &V.Hrs_Carryover
  let #SickEarned   = #SickEarned + &V.Hrs_Earned_YTD
  let #SickBought   = #SickBought + &V.Hrs_Bought_YTD + &V.Hrs_Bought_Unproc
  let #SickTaken    = #SickTaken + &V.Hrs_Taken_YTD  + &V.Hrs_Taken_Unproc
  let #SickSold     = #SickSold + &V.Hrs_Sold_YTD   + &V.Hrs_Sold_Unproc
  let #SickAdjust   = #SickAdjust + &V.Hrs_Adjust_YTD + &V.Hrs_Adjust_Unproc
  let #SickEndBal   = #SickStartBal + #SickEarned + #SickBought
                 - #SickTaken - #SickSold + #SickAdjust
   else
  let #VacStartBal = #VacStartBal + &V.Hrs_Carryover
  let #VacEarned   = #VacEarned + &V.Hrs_Earned_YTD
  let #VacBought   = #VacBought + &V.Hrs_Bought_YTD + &V.Hrs_Bought_Unproc
  let #VacTaken    = #VacTaken + &V.Hrs_Taken_YTD  + &V.Hrs_Taken_Unproc
  let #VacSold     = #VacSold + &V.Hrs_Sold_YTD   + &V.Hrs_Sold_Unproc
  let #VacAdjust   = #VacAdjust + &V.Hrs_Adjust_YTD + &V.Hrs_Adjust_Unproc
  let #VacEndBal   = #VacStartBal + #VacEarned + #VacBought
                - #VacTaken - #VacSold + #VacAdjust
   end-if

FROM  PS_LEAVE_ACCRUAL V
WHERE V.EMPLID           = &B.Emplid
  AND V.COMPANY          = &A.Company
  AND (V.PLAN_TYPE        = '51'                 !Vacation
    OR V.PLAN_TYPE        = '50')                !Sick
  AND V.ACCRUAL_PROC_DT =
      (SELECT MAX(V1.ACCRUAL_PROC_DT)
         FROM PS_LEAVE_ACCRUAL V1
        WHERE V1.EMPLID = V.EMPLID
          AND V1.EMPL_RCD = V.EMPL_RCD
          AND V1.COMPANY = V.COMPANY
          AND V1.PLAN_TYPE = V.PLAN_TYPE
          AND (V1.ACCRUAL_PROC_DT <= &B.Check_Dt
                OR V1.ACCRUAL_PROC_DT IS NULL))
ORDER BY V.ACCRUAL_PROC_DT DESC
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Reset-Variables
!***********************************************************************

!reset employee tax data
  move ' ' to $FWTMarStatus
  move ' ' to $SWTMarStatus

!reset current and YTD amounts
  move 0 to #Cur
  move 0 to #YTD

!reset ETDarray
  move 0 to #i
  while #i <= #lastRow
    move 0 to #j
    while #j <= #lastCol
      put ' ' '' '' ' ' ' ' 0 0 into ETDarray(#i) Code(#j) Name(#j)  -
         EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j) Cur(#j) YTD(#j)

      add 1 to #j
    end-while
    add 1 to #i
  end-while

!reset vacation totals
  move 0 to #VacStartBal
  move 0 to #VacEarned
  move 0 to #VacBought
  move 0 to #VacTaken
  move 0 to #VacSold
  move 0 to #VacAdjust
  move 0 to #VacEndBal

!reset non-crossfoot message switch
  move 'N' to $NeedXfootMsg

!reset current and YTD recalc totals
  move 0 to #HourCurTotal
  move 0 to #HourYTDTotal
  move 0 to #PreTaxDedCurTotal
  move 0 to #PreTaxDedYTDTotal
  move 0 to #PostTaxDedCurTotal
  move 0 to #PostTaxDedYTDTotal
  move 0 to #FedTaxGrossCur
  move 0 to #FedTaxGrossYTD

!reset net pay distribution totals
  move 0 to #CheckNetPay
  move 0 to #DepositNetPay
  move 0 to #Depositcheckings
  move 0 to #Depositsavings

  do Delete-PY-Earns-Wrk

end-procedure


!***********************************************************************
begin-procedure Update-ETDarray-Current-Earnings
!***********************************************************************

  if #Hours <> 0 or #Earns <> 0

    move #RatesRow to #i
    move 0 to #j
    while #j <= #lastCol
      get $jCode $jEarnBegin $jEarnEnd $jCmpRtCd #jRate  -
        from ETDarray(#i) Code(#j) EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j) Cur(#j)
      if rtrim($jCode,' ') = ''                 !if array entry is null
        break                                   !exit the "while"
      else
        if $Code = $jCode and $CmpRtCd = $jCmpRtCd and #Rate = #jRate    !if array entry match
                and $EarnBegin = $jEarnBegin
                and $EarnEnd = $jEarnEnd
          break                                                          !exit the "while"
        else
          if #j = #lastCol
            move $lastCode to $Code
            move $lastName1 to $Name
            move $lastCmpRtCd to $CmpRtCd
            move #lastRate to #Rate
            move $lastEarnBegin to $EarnBegin
            move $lastEarnEnd to $EarnEnd
            break                               !exit the "while"
          end-if
        end-if
      end-if
      add 1 to #j
    end-while

    while #i <= #EarnsRow
      evaluate #i
        when = #RatesRow
          move #Rate  to #Cur
        when = #HoursRow
          move #Hours to #Cur
        when = #EarnsRow
          move #Earns to #Cur
        when-other
          move 0      to #Cur
      end-evaluate

      put $Code $Name $EarnBegin $EarnEnd $CmpRtCd -
        into ETDarray(#i) Code(#j) Name(#j) EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j)
      if #i = #RatesRow
        put #Cur     into ETDarray(#i) Cur(#j)
      else
        array-add #Cur to ETDarray(#i) Cur(#j)
      end-if
      add 1 to #i
    end-while

  end-if
end-procedure


!***********************************************************************
begin-procedure Update-ETDarray
!***********************************************************************

  move 0 to #j
  while #j <= #lastCol

    get $jCode from ETDarray(#i) Code(#j)
    if rtrim($jCode,' ') = ''                   !if array entry is null
      put $Code $Name into ETDarray(#i) Code(#j) Name(#j)
      break                                     !exit the "while"
    else
      if $Code = $jCode                         !if array entry match
        break                                   !exit the "while"
      else
        if #j = #lastCol
          put $lastCode $lastName1 into ETDarray(#i) Code(#j) Name(#j)
          break                                 !exit the "while"
        end-if
      end-if
    end-if
    add 1 to #j

  end-while

  array-add #Cur #YTD to ETDarray(#i) Cur(#j) YTD(#j)

end-procedure


!***********************************************************************
begin-procedure Read-ETDarray
!***********************************************************************

  move 0 to #i
  while #i <= #lastRow
    get $Name $EarnBegin $EarnEnd $CmpRtCd #Cur #YTD from -
        ETDarray(#i) Name(#j) EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j) Cur(#j) YTD(#j)
    evaluate #i
      when = #RatesRow
        move $Name to $EarnName
        move $CmpRtCd to $CompCode
        move #Cur  to #EarnRate
        move $EarnBegin to $Prt_EarnBegin
        move $EarnEnd   to $Prt_EarnEnd
      when = #HoursRow
        move #Cur  to #HourCur
        move #YTD  to #HourYTD
        add  #Cur  to #HourCurTotal
        add  #YTD  to #HourYTDTotal
      when = #EarnsRow
        move #Cur  to #EarnCur
        move #YTD  to #EarnYTD
      when = #PreTaxDedsRow
        move $Name to $PreTaxDedName
        move #Cur  to #PreTaxDedCur
        move #YTD  to #PreTaxDedYTD
        add  #Cur  to #PreTaxDedCurTotal
        add  #YTD  to #PreTaxDedYTDTotal
      when = #TaxesRow
        move $Name to $TaxName
        move #Cur  to #TaxCur
        move #YTD  to #TaxYTD
      when = #PostTaxDedsRow
        move $Name to $PostTaxDedName
        move #Cur  to #PostTaxDedCur
        move #YTD  to #PostTaxDedYTD
        add  #Cur  to #PostTaxDedCurTotal
        add  #YTD  to #PostTaxDedYTDTotal
      when = #BenefitsRow
        move $Name to $BenefitName
        move #Cur  to #BenefitCur
        move #YTD  to #BenefitYTD
    end-evaluate
    add 1 to #i
  end-while
end-procedure


!**********************************************************************
begin-procedure Print-Statement
!**********************************************************************

!print the pay period information

  let #row = 1

  columns 58

  graphic (#row,1,69) box 3 10

  columns 2 59 72 102 112

  do Alter-Printer-ChqAdv

  print $CompanyName            (#row,1) bold

  do Alter-Printer-Statement

  if rtrim($CompanyAddrLine3,' ') <> ''
    let $CompanyAddrLine1_2 = rtrim($CompanyAddrLine1,' ') || ', ' || $CompanyAddrLine2
    print $CompanyAddrLine1_2   (+1,1)
    print $CompanyAddrLine3     (+1,1)
  else
    print $CompanyAddrLine1     (+1,1)
    print $CompanyAddrLine2     (+1,1)
  end-if

  next-column
  print 'Pay Group:'            (#row,1)
  print 'Pay Begin Date:'       (+1,1)
  print 'Pay End Date:'         (+1,1)

  next-column
  let $out = $PayGroup || '-' || $PayGroupName
  print $out                    (#row,1)

  do Format-DateTime(&A.Pay_Begin_Dt, $out, {DEFDATE}, '', '')
  print $out                    (+1,1)

  do Format-DateTime(&A.Pay_End_Dt, $out, {DEFDATE}, '', '')
  print $out                    (+1,1)

  let $PayShtSrc = ''
  evaluate &B.Pay_Sheet_Src
    when = 'O'
      print '- On-line Check -' (0,13)
      let $PayShtSrc = '** On-line Check **'
      break
    when = 'K'
      print '- Final Check -'   (0,13)
      let $PayShtSrc = '** Final Check **'
      break
    when = 'L'
      print '- On-Line Final -' (0,13)
      let $PayShtSrc = '** On-Line Final **'
      break
  end-evaluate

  next-column
  print 'Business Unit:'        (#row,1)
  print 'Check #:'              (+1,1)
  print 'Check Date:'           (+1,1)

  next-column
  print $Bus_unit                  (#row,1)

  do Format-Number(&B.PAYCHECK_NBR, $out, '099999999999999')
  print $out                       (+1,1) bold

  do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
  print $out                       (+1,1)

!print the employee information

  let #row = 5

  columns 1 43 85

  graphic (#row,1,42) box 5 10
  next-column
  graphic (#row,1,42) box 5 10
  next-column
  graphic (#row,1,42) box 1 10
  graphic (+1,1,42)   box 4 10


  columns 2 44 54 86 98 108

  print $HomeName               (#row,1) bold
  print $HomeAddrLine1          (+1,1)
  print $HomeAddrLine2          (+1,1)
  print $HomeAddrLine3          (+1,1)

  next-column
  print 'Employee ID:'          (#row,1)
  print 'Department:'           (+1,1)
  print 'Location:'             (+1,1)
  print 'Job Title:'            (+1,1)
  print 'Pay Rate:'             (+1,1)

  next-column
  print &B.EmplID               (#row,1)
  let $out = $DeptID || '-' || $DeptName
  print $out                    (+1,1)
  print $LocationName           (+1,1)
  print $JobTitle               (+1,1)

  if &FQ.FREQUENCY_TYPE     = 'H'
     let $Comp_freq_format_mask =  '$$$,$$$,$$$,$$9.999999'
  else
     let $Comp_freq_format_mask =  '$$$,$$$,$$$,$$9.99'
  end-if

  let $out =
    ltrim(edit(&J.Comprate,$Comp_freq_format_mask),' ') || ' ' || $CompFrequency
  print $out                    (+1,1)

  next-column
  print 'TAX DATA:'             (#row,1)
  print 'Marital Status:'       (+1,1)
  print 'Allowances:'           (+1,1)
  print 'Addl. Pct.:'           (+1,1)
  print 'Addl. Amt.:'           (+1,1)

  next-column
  print 'Federal'               (#row,1)
  if &FT.SPECIAL_FWT_STATUS = 'G' and
     &FT.FWT_Addl_Pct = 0 and
     &FT.FWT_Addl_Amt = 0

      print $FWTStatus           (+1,1)
      print ' '                  (+1,1)
  else
      print $FWTMarStatus           (+1,1)
      let   $out = ltrim(edit(&FT.FWT_Allowances,'999'),' ')
      print $out                    (+1,1)
  end-if

  let   $out = ltrim(edit(&FT.FWT_Addl_Pct,'b9.999'),' ')
  print $out                    (+1,1)

  let   $out = ltrim(edit(&FT.FWT_Addl_Amt,'b9,999.99'),' ')
  print $out                    (+1,1)

  next-column

  let $ResidentState = rtrim($ST_State, ' ') || ' State'
  print $ResidentState          (#row,1)

  if $ST.SPECIAL_SWT_STATUS = 'G' and
     #ST_SWT_Addl_Pct = 0 and
     #ST_SWT_Addl_Amt = 0

      print $SWTStatus           (+1,1)
      print ' '                  (+1,1)
  else
      print $SWTMarStatus           (+1,1)
      let   $out = ltrim(edit(#ST_SWT_Allowances,'999'),' ')
      print $out                    (+1,1)

      if #ST_SWT_Addl_Allownces > 0
        let   $out = '+' || ltrim(edit(#ST_SWT_Addl_Allownces,'999'),' ')
        print $out                  ()
      end-if
  end-if

  let   $out = ltrim(edit(#ST_SWT_Addl_Pct,'b9.999'),' ')
  print $out                    (+1,1)

  let   $out = ltrim(edit(#ST_SWT_Addl_Amt,'b9,999.99'),' ')
  print $out                    (+1,1)

!print the ETD detail information

  let #row1 = 11
  let #row2 = 28

  columns 1 85 1 43 85

  graphic (#row1,1,84) box  1 10 12
  graphic (#row1,,84)  box  1 10
  graphic (+1,,84)     box  2 10
  graphic (+2,,84)     box 13 10
  graphic (+13,,84)    box  1 10
  next-column
  graphic (#row1,1,42) box  1 10 12
  graphic (#row1,,42)  box  1 10
  graphic (+1,,42)     box  2 10
  graphic (+2,,42)     box 13 10
  graphic (+13,,42)    box  1 10
  next-column
  graphic (#row2,1,42) box  1 10 12
  graphic (#row2,,42)  box  1 10
  graphic (+1,,42)     box  1 10
  graphic (+1,,42)     box 13 10
  graphic (+13,,42)    box  1 10
  next-column
  graphic (#row2,1,42) box  1 10 12
  graphic (#row2,,42)  box  1 10
  graphic (+1,,42)     box  1 10
  graphic (+1,,42)     box 13 10
  graphic (+13,,42)    box  1 10
  next-column
  graphic (#row2,1,42) box  1 10 12
  graphic (#row2,,42)  box  1 10
  graphic (+1,,42)     box  1 10
  graphic (+1,,42)     box 13 10
  graphic (+13,,42)    box  1 10

  use-column 0
  print 'HOURS AND EARNINGS'    (#row1,28) bold
  print 'TAXES'                 (,98)      bold
! print 'Rate'                  (+1,25)          ++

  if $Prior_Earns_Found = 'Y'
    print '-'                     (+1,16,7) fill
    print 'Prior Period'          (,21)
    print '-'                     (,30,6) fill
    print '-'                     (,37,16) fill
  else
    print '-'                     (+1,37,16) fill
  end-if

  print 'Current'               (,48)
  print '-'                     (,55,16)   fill
  print '-'                     (,67,12)   fill
  print 'YTD'                   (,74)
  print '-'                     (,78,10)   fill
  print 'Description'           (+1,2)
  if $Prior_Earns_Found = 'Y'
    print 'Begin Date'            (,16)
    print 'End Date'              (,26)
  end-if

! print 'Code'                  (,25)             ++
  print 'Rate'                  (,38)
  print 'Hours'                 (,49)
  print 'Earnings'              (,57)
  print 'Hours'                 (,68)
  print ' Earnings'             (,78)
  print 'Description'           (,86)
  print ' Current'              (,107)
  print ' YTD'                  (,122)

  print 'BEFORE-TAX DEDUCTIONS' (#row2,11) bold
  print 'AFTER-TAX DEDUCTIONS'  (,54)      bold
  print 'EMPLOYER PAID BENEFITS'(,95)      bold
  print 'Description'           (+1,2)
  print ' Current'              (,26)
  print ' YTD'                  (,38)
  print 'Description'           (,44)
  print ' Current'              (,68)
  print ' YTD'                  (,80)
  print 'Description'           (,86)
  print ' Current'              (,110)
  print ' YTD'                  (,122)

  let #row1 = #row1 + 3
  let #row2 = #row2 + 2

  columns 2 16 26 36 48 55 66 74  86 105 117  2 24 33  44 66 75  86 108 117


  move 0 to #j
  while #j <= {n}
    if #j = {n}                 !totals lines
      move 'Total:'             to $EarnName
      move 0                    to #EarnRate
      move #HourCurTotal        to #HourCur
      move #HourYTDTotal        to #HourYTD
      move &B.Total_Gross       to #EarnCur
      move &Y.Total_Gross_YTD   to #EarnYTD
      move 'Total:'             to $PreTaxDedName
      move #PreTaxDedCurTotal   to #PreTaxDedCur
      move #PreTaxDedYTDTotal   to #PreTaxDedYTD
      move 'Total:'             to $TaxName
      move &B.Total_Taxes       to #TaxCur
      move &Y.Total_Taxes_YTD   to #TaxYTD
      move 'Total:'             to $PostTaxDedName
      move #PostTaxDedCurTotal  to #PostTaxDedCur
      move #PostTaxDedYTDTotal  to #PostTaxDedYTD
      move '* Taxable'          to $BenefitName
      move 0                    to #BenefitCur
      move 0                    to #BenefitYTD
    else
      do Read-ETDarray
    end-if

    print $EarnName             (#row1,1)
    next-column             !++
  ! print $CompCode             ()   ++

    if $Prior_Earns_Found = 'Y'
      do Format-DateTime($Prt_EarnBegin, $out, {DEFDATE}, '', '')
      print $out                   ()
      next-column
      do Format-DateTime($Prt_EarnEnd, $out, {DEFDATE}, '', '')
      print $out                   ()
      next-column
    else
      next-column
      next-column
    end-if

    if #HourCur <> 0
      print #EarnRate           () edit b999.999999mi ! change to 12,6 if needed
    end-if
    next-column
    print #HourCur              () edit b999.99mi
    next-column
    if rtrim($EarnName,' ') <> ''
      print #EarnCur            () edit 9,999,990.99mi
    end-if
    next-column
    print #HourYTD              () edit b9,999.99mi
    next-column
    if rtrim($EarnName,' ') <> ''
      print #EarnYTD            () edit 999,999,990.99mi
    end-if

    next-column
    print $TaxName              ()
    next-column
    if rtrim($TaxName,' ') <> ''
      print #TaxCur             () edit 9,999,990.99mi
      next-column
      print #TaxYTD             () edit 99,999,990.99mi
    else
      next-column
    end-if

    next-column
    print $PreTaxDedName        (#row2,1)
    next-column
    if rtrim($PreTaxDedName,' ') <> ''
      print #PreTaxDedCur       () edit 9,999,990.99mi
      next-column
      print #PreTaxDedYTD       () edit 99,999,990.99mi
    else
      next-column
    end-if

    next-column
    print $PostTaxDedName       ()
    next-column
    if rtrim($PostTaxDedName,' ') <> ''
      print #PostTaxDedCur      () edit 9,999,990.99mi
      next-column
      print #PostTaxDedYTD      () edit 99,999,990.99mi
    else
      next-column
    end-if

    next-column
    print $BenefitName          ()
    next-column
    if rtrim($BenefitName,' ') <> ''
      if #j <= #lastCol         !not totals line
        print #BenefitCur       () edit 9,999,990.99mi
        next-column
        print #BenefitYTD       () edit 99,999,990.99mi
      end-if
    else
      next-column
    end-if

    add 1 to #row1
    add 1 to #row2
    next-column
    add 1 to #j

  end-while

 let #lncnt = {n}

!print the current and YTD summary totals

  let #row = 44

  columns 1

  graphic (#row,1,126) box 1 10 15
  graphic (#row,,126)  box 1 10
  graphic (+1,,126)    box 2 10

  columns 2 24 48 72 94 116

  print ''                      (#row,1)
  print 'Current:'              (+1,1)
  print 'YTD:'                  (+1,1)

  next-column
  print 'TOTAL GROSS'           (#row,-2) bold
  print &B.Total_Gross          (+1,1) edit 999,999,990.99mi
  print &Y.Total_Gross_YTD      (+1,1) edit 999,999,990.99mi

  next-column
  print 'FED TAXABLE GROSS'     (#row,-8) bold
  print #FedTaxGrossCur         (+1,1) edit 999,999,990.99mi
  print #FedTaxGrossYTD         (+1,1) edit 999,999,990.99mi

  next-column
  print ' TOTAL TAXES'          (#row,-3) bold
  print &B.Total_Taxes          (+1,1) edit 99,999,990.99mi
  print &Y.Total_Taxes_YTD      (+1,1) edit 99,999,990.99mi

  next-column
  print 'TOTAL DEDUCTIONS'      (#row,-8) bold
  print &B.Total_Deductions     (+1,1) edit 99,999,990.99mi
  print &Y.Total_Dedns_YTD      (+1,1) edit 99,999,990.99mi

  next-column
  print ' NET PAY'              (#row,+2) bold
  print &B.Net_Pay              (+1,1) edit 999,999,990.99mi
  print &Y.Net_Pay_YTD          (+1,1) edit 999,999,990.99mi

!print the vacation balance totals

  let #row = 47

  columns 1

  graphic (#row,1,24) box  1 10 12
  graphic (#row,,24)  box  1 10
  graphic (+1,,24)    box  6 10
  graphic (+6,,24)    box  1 10

  columns 2 19

  print 'PTO HOURS'             (#row,1) bold
  print 'Start Balance:'        (+1,1)
  print '+ Earned:'             (+1,1)
  print '+ Bought:'             (+1,1)
  print ' -  Taken:'            (+1,1)
  print ' -  Sold:'             (+1,1)
  print '+ Adjustments:'        (+1,1)
  print 'End Balance:'          (+1,1)

  next-column
  print ' YTD'                  (#row,+1) bold
  print #VacStartBal            (+1,1) edit 9,990.9mi
  print #VacEarned              (+1,1) edit b,999.9mi
  print #VacBought              (+1,1) edit b,999.9mi
  print #VacTaken               (+1,1) edit b,999.9mi
  print #VacSold                (+1,1) edit b,999.9mi
  print #VacAdjust              (+1,1) edit b,999.9mi
  print #VacEndBal              (+1,1) edit 9,990.9mi

!print non-crossfoot message

  if $NeedXfootMsg = 'Y'
    let #row = 47
    columns 30

    print 'NOTE: Rate * Hours = Earnings unless an hours or earnings'      (#row,1)
    print 'adjustment is included or Rate is from an FLSA calculation.'    (+1,1)

  end-if

!print the net pay distribution

  let #row = 47

  columns 92

  graphic (#row,1,35) box  1 10 12
  graphic (#row,,35)  box  1 10
  graphic (+1,,35)    box  2 10
  graphic (+2,,35)    box  1 10

  columns 93 116

  print 'NET PAY DISTRIBUTION'  (#row,1) bold

  if #DepositNetPay <> 0
    do Format-Number(#Advice#, $out, '099999999999999')
    let $out = 'Advice #' || $out
    print $out                  (+1,1)
    next-column
    print #DepositNetPay        () edit b99,999,999.99mi
    next-column
  end-if

  if #CheckNetPay <> 0
    do Format-Number(&B.PAYCHECK_NBR, $out, '099999999999999')
    let $out = 'Check #' || $out
    print $out                  (+1,1)
    next-column
    print #CheckNetPay          () edit b99,999,999.99mi
    next-column

  end-if

  position                      (50,1)
  print 'Total:'                ()
  next-column
  print &B.Net_Pay              () edit 999,999,990.99mi

!print the check message

  let #row = 56

  columns 2

  print 'MESSAGE: '             (#row,1) bold
  print $CheckMessage           ()

end-procedure


!***********************************************************************
begin-procedure Print-Check
!***********************************************************************

  do Alter-Printer-ChqAdv

  do Format-Check-Name-Address

!print the company and bank information and the check number

  let #row = 61

  columns 2 59 71 110

  print $CompanyName            (#row,1) bold
  print $CompanyAddrLine1       (+1,1)
  print $CompanyAddrLine2       (+1,1)
  print $CompanyAddrLine3       (+1,1)

  next-column

  do Alter-Printer-Statement

  print $BankID                 (#row,1)

  next-column
  print $BankName               (#row,1) bold
  print $BankAddrLine1          (+1,1)
  print $BankAddrLine2          (+1,1)
  print $BankAddrLine3          (+1,1)

  do Alter-Printer-ChqAdv

  next-column
  print 'Check No.'             (#row,1) bold
  do Format-Number(&B.PAYCHECK_NBR, $out, '999999999999999')
  let $out = ltrim($out,' ')
  print $out                    (+1,1)   bold

!print Check Cashing Location on check

  let #row = 65
  columns 2

  print $LocationChkCashLoc     (#row,1)

!print the check date and numeric amount

  let #row = 68

  columns 64 71 96 110

  print 'Date:'                 (#row,1) bold

  next-column
  do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
  print $out                    (#row,1) bold

  next-column
  print 'Pay Amount:'           (#row,1) bold

  next-column
  do Format-Number(#CheckNetPay, $out, '$,$$$,$$$,$$9.99mi')
  let $out = rpad(ltrim($out,' '),15,'*')
  print $out                    (#row,1) bold

!print the amount in words and the payee information

  let #row = 71

  columns 2 14

  print 'Pay'                   (#row,1) bold

  next-column
  graphic                       (#row,1,112) horz-line 7
  move #CheckNetPay to #NetPay
  do Net-Pay-In-Words           !convert numbers to words
  let $NetInWords = '****' || upper($NetInWords) || '****'
  print $NetInWords             ()

  next-column
  print 'To The'                (+2,1) bold
  print 'Order Of'              (+1,1) bold

  next-column
  print $CheckName              (+1,1) bold
  print $CheckAddrLine1         (+1,1)
  print $CheckAddrLine2         (+1,1)
  print $CheckAddrLine3         (+1,1)
  print $CheckAddrLine4         (+1,1)
  print $CheckLocation          (+1,1)

!print the check signature

  let #row = 79

  columns 84

  graphic                       (#row,1,42) horz-line 7
  print $SigFont                (+2,1) code-printer={PRINTER_CHQADV}
  print '!!a'                   (,+2)

!print the bank microcode

  use-column 0
  do Format-Number(&B.PAYCHECK_NBR, $CheckNum, '099999999999999')
  let $MicrLine =
    'C' || $CheckNum   || 'C' || ' ' ||
    'A' || $TransitNum || 'A' || ' ' ||
           $AccountNum || 'C'
  do Alter-Printer-Microcode
  print $MicrLine               (83,21)

  new-page

end-procedure


!***********************************************************************
begin-procedure Format-Check-Name-Address
!***********************************************************************

  if rtrim(&B.PayCheck_Name,' ') <> ''
    let $Name = &B.PayCheck_Name
    do Rotate-Name
    let $CheckName = upper($Name)
  end-if

  let $CheckAddrLine3 = ' '
  let $CheckAddrLine4 = ' '
  let $CheckLocation =  ' '

  evaluate &B.PayCheck_Addr_Optn
    when = 'C'  !Mail to Check Address
    when = 'H'  !Mail to Home Address
    when = 'M'  !Mail to Mail Address

      move &B.Postal                   to $Zip
      move &B.Postal                   to $ZipExtsn ~~~~~~xxxx

      if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
        let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
      end-if

      move $Zip                        to $ZipExtsn ~~~~~xxxxx

      let $CheckCityState =
        rtrim(&B.City,' ') || edit(&B.State,',bxxbb') || $Zip

      let $CheckAddrLine1   = &B.Address1
      if rtrim(&B.Address2,' ') = ''
        let $CheckAddrLine2 = $CheckCityState
      else
        let $CheckAddrLine2 = &B.Address2
      end-if
      if rtrim(&B.Address3,' ') = ''
        let $CheckAddrLine3 = $CheckCityState
      else
        let $CheckAddrLine3 = &B.Address3
        let $CheckAddrLine4 = $CheckCityState
      end-if
      if rtrim(&B.Address2,' ') = '' and rtrim(&B.Address3,' ') = ''
        let $CheckAddrLine3 = ' '
      end-if
      if rtrim(&B.Address2,' ') = '' and rtrim(&B.Address3,' ') > ''
         let $CheckAddrLine2= &B.Address3
         let $CheckAddrLine3= $CheckCityState
         let $CheckAddrLine4= ' '
      end-if
      let $CheckLocation = 'Location: ' || $LocationName

    when = 'D'  !Deliver to Home Department
      let $CheckAddrLine1 = 'Department ID: ' || $DeptID
      let $CheckAddrLine2 = $DeptName

    when = 'L'  !Deliver to Job Location
    when = 'P'  !Deliver to Check Location
      let $CheckAddrLine1 = 'Location ID: ' || $Location
      let $CheckAddrLine2 = $LocationName
  end-evaluate

end-procedure


!**********************************************************************
begin-procedure SSP-Statement
!**********************************************************************

!Create only XML data for Manual Check View Self Service

  do Format-Number(#xmlssp_batch_id, $out, '0999')
  let $out = 'Batch' || ltrim($out,' ')
  let $xmltag = 'BATCH_ID'
  let $xmlcontent = $out
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'BURST_VAL'
  let $xmlcontent = $xmlssp_burst
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'emp_id'
  Let $xmlcontent = rtrim(&B.EmplID,' ')
  do  Process-SSP-XML-Tag-Content

  let $emplangcd = 'ENG'
  let $xmltag = 'emp_langcd'
  Let $xmlcontent = rtrim($emplangcd,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'COMPANY_INFO'
  do Process-SSP-XML-Tag-Beg

  let $xmltag = 'company'
  let $xmlcontent = $CompanyName
  do  Process-SSP-XML-Tag-Content

  if rtrim($CompanyAddrLine3,' ') <> ''
    let $CompanyAddrLine1_2 = rtrim($CompanyAddrLine1,' ') || ', ' || $CompanyAddrLine2

    let $xmltag = 'co_addr_l1'
    let $xmlcontent = rtrim($CompanyAddrLine1_2,' ')
    do  Process-SSP-XML-Tag-Content

    let $xmltag = 'co_addr_l2'
    let $xmlcontent = rtrim($CompanyAddrLine3,' ')
    do  Process-SSP-XML-Tag-Content
  else
    let $xmltag = 'co_addr_l1'
    let $xmlcontent = rtrim($CompanyAddrLine1,' ')
    do  Process-SSP-XML-Tag-Content

    let $xmltag = 'co_addr_l2'
    let $xmlcontent = rtrim($CompanyAddrLine2,' ')
    do  Process-SSP-XML-Tag-Content
  end-if

  let $xmltag = 'COMPANY_INFO'
  do Process-SSP-XML-Tag-End

  let $xmltag = 'PAYGROUP_INFO'
  do Process-SSP-XML-Tag-Beg

  let $out = $PayGroup || '-' || $PayGroupName
  let $xmltag = 'pay_gp'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-DateTime(&A.Pay_Begin_Dt, $out, {DEFDATE}, '', '')
  let $xmltag = 'pay_beg_dt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-DateTime(&A.Pay_End_Dt, $out, {DEFDATE}, '', '')
  let $xmltag = 'pay_end_dt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  let $PayShtSrc = ''
  evaluate &B.Pay_Sheet_Src
    when = 'O'
      let $PayShtSrc = '** On-line Check **'
      break
    when = 'K'
      let $PayShtSrc = '** Final Check **'
      break
    when = 'L'
      let $PayShtSrc = '** On-Line Final **'
      break
  end-evaluate

  let $xmltag = 'pay_sht_src'
  let $xmlcontent = rtrim($PayShtSrc,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'bus_unit'
  let $xmlcontent = rtrim($Bus_unit,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-Number(&B.PAYCHECK_NBR, $out, '099999999999999')
  let $xmltag = 'check_num'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
  let $xmltag = 'check_dt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'PAYGROUP_INFO'
  do Process-SSP-XML-Tag-End

  do GET-SSP-View-Date

  let $xmltag = 'EMPLOYEE_INFO'
  do Process-SSP-XML-Tag-Beg

  let $xmltag = 'emp_name'
  let $xmlcontent = rtrim($HomeName,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'emp_addr_l1'
  let $xmlcontent = rtrim($HomeAddrLine1,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'emp_addr_l2'
  let $xmlcontent = rtrim($HomeAddrLine2,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'emp_addr_l3'
  let $xmlcontent = rtrim($HomeAddrLine3,' ')
  do  Process-SSP-XML-Tag-Content

  let $out = $DeptID || '-' || $DeptName
  let $xmltag = 'emp_dept'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'locn_code'
  let $xmlcontent = rtrim($LocationName,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'job_title'
  let $xmlcontent = rtrim($JobTitle,' ')
  do  Process-SSP-XML-Tag-Content

  if &FQ.FREQUENCY_TYPE     = 'H'
     let $Comp_freq_format_mask =  '$$$,$$$,$$$,$$9.999999'
  else
     let $Comp_freq_format_mask =  '$$$,$$$,$$$,$$9.99'
  end-if

  let $out =
    ltrim(edit(&J.Comprate,$Comp_freq_format_mask),' ') || ' ' || $CompFrequency
  let $xmltag = 'pay_rt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  if &FT.SPECIAL_FWT_STATUS = 'G' and
     &FT.FWT_Addl_Pct = 0 and
     &FT.FWT_Addl_Amt = 0

      let $xmltag = 'fed_marital'
      let $xmlcontent = rtrim($FWTStatus,' ')
      do  Process-SSP-XML-Tag-Content

      let $xmltag = 'fed_allw'
      let $xmlcontent = ''
      do  Process-SSP-XML-Tag-Content
  else
      let $xmltag = 'fed_marital'
      let $xmlcontent = rtrim($FWTMarStatus,' ')
      do  Process-SSP-XML-Tag-Content

      let   $out = ltrim(edit(&FT.FWT_Allowances,'999'),' ')
      let $xmltag = 'fed_allw'
      let $xmlcontent = $out
      do  Process-SSP-XML-Tag-Content
  end-if

  let   $out = ltrim(edit(&FT.FWT_Addl_Pct,'b9.999'),' ')
  let $xmltag = 'fed_addl_pct'
  let $xmlcontent = $out
  do  Process-SSP-XML-Tag-Content

  let   $out = ltrim(edit(&FT.FWT_Addl_Amt,'b9,999.99'),' ')
  let $xmltag = 'fed_addl_amt'
  let $xmlcontent = $out
  do  Process-SSP-XML-Tag-Content

  let $ResidentState = rtrim($ST_State, ' ') || ' State'
  let $xmltag = 'emp_prov'
  let $xmlcontent = rtrim($ST_State,' ')
  do  Process-SSP-XML-Tag-Content

  if $ST.SPECIAL_SWT_STATUS = 'G' and
     #ST_SWT_Addl_Pct = 0 and
     #ST_SWT_Addl_Amt = 0

      let $xmltag = 'state_marital'
      let $xmlcontent = rtrim($SWTStatus,' ')
      do  Process-SSP-XML-Tag-Content

      let $xmltag = 'state_allw'
      let $xmlcontent = ' '
      do  Process-SSP-XML-Tag-Content
  else
      let $xmltag = 'state_marital'
      let $xmlcontent = rtrim($SWTMarStatus,' ')
      do  Process-SSP-XML-Tag-Content

      let $out = ltrim(edit(#ST_SWT_Allowances,'999'),' ')
      let $xmltag = 'state_allw'
      let $xmlcontent = $out
      do  Process-SSP-XML-Tag-Content

      if #ST_SWT_Addl_Allownces > 0
        let $out = '+' || ltrim(edit(#ST_SWT_Addl_Allownces,'999'),' ')
        let $xmltag = 'state_addl_allw'
        let $xmlcontent = $out
        do  Process-SSP-XML-Tag-Content
      end-if
  end-if

  let $out = ltrim(edit(#ST_SWT_Addl_Pct,'b9.999'),' ')
  let $xmltag = 'state_addl_pct'
  let $xmlcontent = $out
  do  Process-SSP-XML-Tag-Content

  let $out = ltrim(edit(#ST_SWT_Addl_Amt,'b9,999.99'),' ')
  let $xmltag = 'state_addl_amt'
  let $xmlcontent = $out
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'EMPLOYEE_INFO'
  do Process-SSP-XML-Tag-End

  let #lncnt = {n}
  do Create-Earnings-XML-Data-US
  do Create-Taxes-XML-Data
  do Create-Before-Tax-Deduction-XML-Data
  do Create-After-Tax-Deduction-XML-Data
  do Create-Employee-Paid-Benefits-XML-Data
  do Current-YearToDate-Totals-XML-Data
  do PTO-Sick-Hours-XML-Data

  if $NeedXfootMsg = 'Y'
    let $xmltag     = 'xfoot_msg1'
    let $xmlcontent = 'NOTE: Rate * Hours = Earnings unless an hours or earnings'
    do  Process-SSP-XML-Tag-Content
    let $xmltag     = 'xfoot_msg2'
    let $xmlcontent = 'adjustment is included or Rate is from an FLSA calculation.'
    do  Process-SSP-XML-Tag-Content
  else
    let $xmltag     = 'xfoot_msg1'
    let $xmlcontent = ''
    do  Process-SSP-XML-Tag-Content
    let $xmltag     = 'xfoot_msg2'
    let $xmlcontent = ''
    do  Process-SSP-XML-Tag-Content
  end-if

  let $xmltag = 'NET_PAY_DISTRIBUTIONS'
  do Process-SSP-XML-Tag-Beg

  if #DepositNetPay <> 0

    if #Depositcheckings <> 0
       let $xmltag = 'net_distrib'
       do Process-SSP-XML-Tag-Beg

       let $xmltag     = 'py_type'
       do Format-Number(#Advice#, $out, '099999999999999')
       let $xmlcontent = 'Advice #' || $out
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'acct_type'
       let $xmlcontent = $adv_checkings
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'acct_num'
       let $xmlcontent = $deposit_acct_nbr_chckngs
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'net_amt'
       do Format-Number(#Depositcheckings, $out, '99,999,999.99')
       let $xmlcontent = ltrim($out,' ')
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'net_distrib'
       do Process-SSP-XML-Tag-End
    end-if

    if #Depositsavings <> 0
       let $xmltag = 'net_distrib'
       do Process-SSP-XML-Tag-Beg

       let $xmltag     = 'py_type'
       do Format-Number(#Advice#, $out, '099999999999999')
       let $xmlcontent = 'Advice #' || $out
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'acct_type'
       let $xmlcontent = $adv_savings
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'acct_num'
       let $xmlcontent = $deposit_acct_nbr_savings
       do  Process-SSP-XML-Tag-Content

       let $xmltag     = 'net_amt'
       do Format-Number(#Depositsavings, $out, '99,999,999.99')
       let $xmlcontent = ltrim($out,' ')
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'net_distrib'
       do Process-SSP-XML-Tag-End
    end-if

  end-if

  if #CheckNetPay <> 0
    let $xmltag = 'net_distrib'
    do Process-SSP-XML-Tag-Beg

    let $xmltag     = 'py_type'
    do Format-Number(&B.PAYCHECK_NBR, $out, '099999999999999')
    let $xmlcontent = 'Check #' || $out
    do  Process-SSP-XML-Tag-Content

    let $xmltag     = 'acct_type'
    let $xmlcontent = $chk_issued
    do  Process-SSP-XML-Tag-Content

    let $xmltag     = 'acct_num'
    let $xmlcontent = ''
    do  Process-SSP-XML-Tag-Content

    let $xmltag     = 'net_amt'
    do Format-Number(#CheckNetPay, $out, '99,999,999.99')
    let $xmlcontent = ltrim($out,' ')
    do  Process-SSP-XML-Tag-Content

    let $xmltag = 'net_distrib'
    do Process-SSP-XML-Tag-End
  end-if

  let $xmltag = 'NET_PAY_DISTRIBUTIONS'
  do Process-SSP-XML-Tag-End

  let $xmltag     = 'net_amt_total'
  do Format-Number(&B.Net_Pay, $out, '999,999,999.99')
  let $xmlcontent = ltrim($out,' ')
  do  Process-SSP-XML-Tag-Content
  
  if &B.PAYCHECK_OPTION <> 'M'
     let $xmltag     = 'pay_slip_msg'
     let $xmlcontent = $CheckMessage
     do  Process-SSP-XML-Tag-Content
  end-if

end-procedure

!***********************************************************************
begin-procedure SSP-Check
!***********************************************************************

  do Format-Check-Name-Address

  let $xmltag = 'CHECK_INFO'
  do Process-SSP-XML-Tag-Beg

  let $xmltag     = 'chk_co_name'
  let $xmlcontent = rtrim($CompanyName,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_co_adl1'
  let $xmlcontent = rtrim($CompanyAddrLine1,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_co_adl2'
  let $xmlcontent = rtrim($CompanyAddrLine2,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_co_adl3'
  let $xmlcontent = rtrim($CompanyAddrLine3,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'bnk_id'
  let $xmlcontent = rtrim($BankID,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'bnk_nm'
  let $xmlcontent = rtrim($BankName,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'bnk_adl1'
  let $xmlcontent = rtrim($BankAddrLine1,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'bnk_adl2'
  let $xmlcontent = rtrim($BankAddrLine2,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'bnk_adl3'
  let $xmlcontent = rtrim($BankAddrLine3,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-Number(&B.PAYCHECK_NBR, $out, '999999999999999')
  let $out = ltrim($out,' ')
  let $xmltag     = 'bnk_chkno'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  !print Check Cashing Location on check

  let $xmltag     = 'bnk_locchkcsh'
  let $xmlcontent = rtrim($LocationChkCashLoc,' ')
  do  Process-SSP-XML-Tag-Content

  !print the check date and numeric amount

  do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
  let $xmltag     = 'bnk_chkdt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  do Format-Number(#CheckNetPay, $out, '$,$$$,$$$,$$9.99mi')
  let $out = rpad(ltrim($out,' '),15,'*')
  let $xmltag     = 'bnk_payamt'
  let $xmlcontent = rtrim($out,' ')
  do  Process-SSP-XML-Tag-Content

  !print the amount in words and the payee information

  move #CheckNetPay to #NetPay
  do Net-Pay-In-Words           !convert numbers to words
  let $NetInWords = '****' || upper($NetInWords) || '****'
  let $xmltag     = 'bnk_amtinwords'
  let $xmlcontent = rtrim($NetInWords,' ')
  do  Process-SSP-XML-Tag-Content
  
  let $xmltag     = 'chk_pye_name'
  let $xmlcontent = rtrim($CheckName,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_pye_adl1'
  let $xmlcontent = rtrim($CheckAddrLine1,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_pye_adl2'
  let $xmlcontent = rtrim($CheckAddrLine2,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_pye_adl3'
  let $xmlcontent = rtrim($CheckAddrLine3,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_pye_adl4'
  let $xmlcontent = rtrim($CheckAddrLine4,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag     = 'chk_pye_locn'
  let $xmlcontent = rtrim($CheckLocation,' ')
  do  Process-SSP-XML-Tag-Content

  !print the bank microcode

  do Format-Number(&B.PAYCHECK_NBR, $CheckNum, '099999999999999')
  let $MicrLine =
    'C' || $CheckNum   || 'C' || ' ' ||
    'A' || $TransitNum || 'A' || ' ' ||
           $AccountNum || 'C'
  let $xmltag     = 'chk_mirc_line'
  let $xmlcontent = rtrim($MicrLine,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'CHECK_INFO'
  do Process-SSP-XML-Tag-End

end-procedure

!***************************
! Create Earnings XML Data *
!***************************
begin-procedure Create-Earnings-XML-Data-US

  move 0 to #xmllinecnt

  let $xmltag = 'EARNINGS'
  do Process-SSP-XML-Tag-Beg

  if $Prior_Earns_Found = 'Y'
     let $xmltag = 'pe_PrPd'
     let $xmlcontent = '-------- Prior Period --------'
     do  Process-SSP-XML-Tag-Content
     let $xmltag = 'pe_bhdg'
     let $xmlcontent = 'Begin Date'
     do  Process-SSP-XML-Tag-Content
     let $xmltag = 'pe_ehdg'
     let $xmlcontent = 'End Date'
     do  Process-SSP-XML-Tag-Content
  else
     let $xmltag = 'pe_PrPd'
     let $xmlcontent = '$$'
     do  Process-SSP-XML-Tag-Content
  end-if

  move 0 to #CurHrTotal
  move 0 to #YTDHrTotal
  move ' ' to $Extraspc

  move 0 to #idx
  while #idx <= #lncnt

   if #idx <> #lncnt                 !not totals lines

     move 0 to #idx2
     while #idx2 <= #lastRow

       get $Name $EarnBegin $EarnEnd $CmpRtCd #Cur #YTD  -
           from ETDarray(#idx2) Name(#idx) EarnBegin(#idx) EarnEnd(#idx) CmpRtCd(#idx) Cur(#idx) YTD(#idx)

       evaluate #idx2
         when = #RatesRow
            move $Name to $EarnName
            move $EarnBegin to $Prt_EarnBegin
            move $EarnEnd   to $Prt_EarnEnd
            move $CmpRtCd to $CompCode
            move #Cur  to #EarnRate
         when = #HoursRow
            move #Cur  to #HourCur
            move #YTD  to #HourYTD
            add  #Cur  to #CurHrTotal
            add  #YTD  to #YTDHrTotal
         when = #EarnsRow
            move #Cur  to #EarnCur
            move #YTD  to #EarnYTD
       end-evaluate

       add 1 to #idx2
     end-while

     if rtrim($EarnName,' ') <> ''

       add 1 to #xmllinecnt
       do Format-Number(#xmllinecnt, $xln, '09')

       let $xmltag = 'hrs_earns'
       do Process-SSP-XML-Tag-Beg

       if $Prior_Earns_Found = 'Y'
          let $xmltag = 'he_descr'
          let $EarnName = RPAD($EarnName, 10, ' ')
          let $xmlcontent = EDIT($EarnName, 'XXXXXXXXXX')
          do  Process-SSP-XML-Tag-Content

          do Format-DateTime($Prt_EarnBegin, $out, {DEFDATE}, '', '')
          let $xmltag = 'pe_bdt'
          let $xmlcontent = rtrim($out,' ')
          do  Process-SSP-XML-Tag-Content

          do Format-DateTime($Prt_EarnEnd, $out, {DEFDATE}, '', '')
          let $xmltag = 'pe_edt'
          let $xmlcontent = rtrim($out,' ')
          do  Process-SSP-XML-Tag-Content
       else
          let $xmltag = 'he_descr'
          let $EarnName = RPAD($EarnName, 30, ' ')
          let $xmlcontent = EDIT($EarnName, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
          do  Process-SSP-XML-Tag-Content
        end-if

       let $xmltag = 'cur_rt'
       let $xmlcontent = ''
       if #HourCur <> 0
          do format-number(#EarnRate, $amtout, '999.999999')
          let $xmlcontent = ltrim($amtout,' ')
       end-if
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'cur_hrs'
       let $xmlcontent = ''
       if #HourCur <> 0
          do format-number(#HourCur, $amtout, '9,999.99')
          let $xmlcontent = ltrim($amtout,' ')
       end-if
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'cur_ern'
       do format-number(#EarnCur, $amtout, '9,999,999.99')
       let $xmlcontent = ltrim($amtout,' ')
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'ytd_hrs'
       let $xmlcontent = ''
       if #HourYTD <> 0
          do format-number(#HourYTD, $amtout, '99,999.99')
          let $xmlcontent = ltrim($amtout,' ')
       end-if
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'ytd_ern'
       do format-number(#EarnYTD, $amtout, '999,999,999.99')
       let $xmlcontent = ltrim($amtout,' ')
       do  Process-SSP-XML-Tag-Content

       let $xmltag = 'hrs_earns'
       do Process-SSP-XML-Tag-End

     end-if
   end-if
   add 1 to #idx
  end-while

  let $xmltag = 'EARNINGS'
  do Process-SSP-XML-Tag-End

  move #CurHrTotal          to #HourCur
  move #YTDHrTotal          to #HourYTD
  move &B.Total_Gross       to #EarnCur
  move &Y.Total_Gross_YTD   to #EarnYTD

  let $xmltag = 'EARNINGS_TOTAL'
  do Process-SSP-XML-Tag-Beg

  let $xmltag = 'ttl_cur_hrs'
  do format-number(#HourCur, $amtout, '9,999.99')
  let $xmlcontent = ltrim($amtout,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'ttl_cur_ern'
  do format-number(#EarnCur, $amtout, '9,999,999.99')
  let $xmlcontent = ltrim($amtout,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'ttl_ytd_hrs'
  do format-number(#HourYTD, $amtout, '99,999.99')
  let $xmlcontent = ltrim($amtout,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'ttl_ytd_ern'
  do format-number(#EarnYTD, $amtout, '999,999,999.99')
  let $xmlcontent = ltrim($amtout,' ')
  do  Process-SSP-XML-Tag-Content

  let $xmltag = 'EARNINGS_TOTAL'
  do Process-SSP-XML-Tag-End

end-procedure

!***********************************************************************
begin-procedure Delete-PY-Earns-Wrk
!***********************************************************************

begin-SQL on-error=Ignore
DELETE FROM PS_PY_EARNS_WRK
WHERE PROCESS_INSTANCE = #prcs_process_instance
end-SQL
end-procedure


!***********************************************************************
begin-procedure Arrange-Earnings
!***********************************************************************

    move 0 to #j
    while #j <= #lastCol
      get $jCode $jName $jEarnBegin $jEarnEnd $jCmpRtCd #jRate  -
          from ETDarray(0) Code(#j) Name(#j) EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j) Cur(#j)
      if rtrim($jCode,' ') = ''                 !if array entry is null
        break                                   !exit the "while"
      else
        get #jEarns_Hrs
                from ETDarray(1) Cur(#j)
        get #jEarns_Amt
                from ETDarray(2) Cur(#j)
        evaluate $jCode
          when = &PG.ErnCd_Reg_Hrs
            move '1'  to $jEarns_Type    !Regular Hourly
            break
          when = &PG.ErnCd_Reg_Earns
            move '2'  to $jEarns_Type    !Regular Salary
            break
          when = &PG.ErnCd_OT_Hrs
            move '3'  to $jEarns_Type    !Overtime
            break
          when-other
            move '4'  to $jEarns_Type
            break
        end-evaluate
        do Process-Earns-Wrk
      end-if
      add 1 to #j
    end-while

!reset ETDarray
  move 0 to #i
  while #i <= #lastRow
    move 0 to #j
    while #j <= #lastCol
      put ' ' '' '' ' ' ' ' 0 0 into ETDarray(#i) Code(#j) Name(#j)  -
         EarnBegin(#j) EarnEnd(#j) CmpRtCd(#j) Cur(#j) YTD(#j)

      add 1 to #j
    end-while
    add 1 to #i
  end-while


  do Arrange-ETDarray-Curr-Earns

end-procedure


!***********************************************************************
begin-procedure Process-Earns-Wrk
!***********************************************************************

  let $Earns_Wrk_Found = 'N'

  if IsNull(rtrim($jEarnBegin,' '))
    let $jEarnBegin = &A.PAY_BEGIN_DT
  end-if

  if IsNull(rtrim($jEarnEnd, ' '))
    let $jEarnEnd = &A.PAY_END_DT
  end-if

  if IsNull(rtrim($jCmpRtCd, ' '))
    let $jCmpRtCd = ' '
  end-if

begin-SELECT DISTINCT
EWK.PROCESS_INSTANCE

  let $Earns_Wrk_Found = 'Y'

FROM PS_PY_EARNS_WRK EWK
WHERE EWK.PROCESS_INSTANCE = #prcs_process_instance
AND EWK.EARNS_TYPE = $jEarns_Type
AND EWK.ERNCD = $jCode
AND EWK.EARNS_BEGIN_DT = $jEarnBegin
AND EWK.EARNS_END_DT = $jEarnEnd
AND EWK.COMP_RATECD = $jCmpRtCd
AND EWK.HOURLY_RT = #jRate
end-SELECT

  if $Earns_Wrk_Found = 'N'
    do Insert-Earns-Wrk
  else
    do Update-Earns-Wrk
  end-if

end-procedure


!***********************************************************************
begin-procedure Insert-Earns-Wrk
!***********************************************************************

begin-SQL
INSERT INTO PS_PY_EARNS_WRK
(PROCESS_INSTANCE,
EARNS_TYPE,
ERNCD,
EARNS_BEGIN_DT,
EARNS_END_DT,
COMP_RATECD,
HOURLY_RT,
DESCR,
EARNS_HRS,
EARNS_AMT)
VALUES(#prcs_process_instance ,
$jEarns_Type,
$jCode,
$jEarnBegin,
$jEarnEnd,
$jCmpRtCd,
#jRate,
$jName,
#jEarns_Hrs,
#jEarns_Amt)
end-SQL
end-procedure


!***********************************************************************
begin-procedure Update-Earns-Wrk
!***********************************************************************
begin-SQL
UPDATE PS_PY_EARNS_WRK
SET EARNS_HRS = EARNS_HRS + #jEarns_Hrs,
    EARNS_AMT = EARNS_AMT + #jEarns_Amt
WHERE PROCESS_INSTANCE = #prcs_process_instance
AND EARNS_TYPE = $jEarns_Type
AND ERNCD = $jCode
AND EARNS_BEGIN_DT = $jEarnBegin
AND EARNS_END_DT = $jEarnEnd
AND COMP_RATECD = $jCmpRtCd
AND HOURLY_RT = #jRate
end-SQL
end-procedure


!***********************************************************************
begin-procedure Arrange-ETDarray-Curr-Earns
!***********************************************************************

  move 0  to #j
begin-SELECT
EW.ERNCD
EW.EARNS_BEGIN_DT
EW.EARNS_END_DT
EW.COMP_RATECD
EW.HOURLY_RT
EW.DESCR
EW.EARNS_HRS
EW.EARNS_AMT

  if &EW.EARNS_END_DT >= &A.PAY_BEGIN_DT
     let $EarnBegin = ''
     let $EarnEnd = ''
  else
     let $EarnBegin = &P_Earns_Begin
     let $EarnEnd = &P_Earns_End
  end-if

  move 0 to #i
  while #i <= #EarnsRow
    evaluate #i
      when = 0
        put &EW.ERNCD &EW.DESCR $EarnBegin $EarnEnd -
            &EW.COMP_RATECD &EW.HOURLY_RT -
                into ETDarray(#i) Code(#j) Name(#j) EarnBegin(#j) EarnEnd(#j) -
                     CmpRtCd(#j) Cur(#j)
      when = 1
        put &EW.ERNCD &EW.DESCR $EarnBegin $EarnEnd -
            &EW.COMP_RATECD &EW.EARNS_HRS -
                into ETDarray(#i) Code(#j) Name(#j) EarnBegin(#j) EarnEnd(#j) -
                     CmpRtCd(#j) Cur(#j)
      when = 2
        put &EW.ERNCD &EW.DESCR $EarnBegin $EarnEnd -
            &EW.COMP_RATECD &EW.EARNS_AMT -
                into ETDarray(#i) Code(#j) Name(#j) EarnBegin(#j) EarnEnd(#j) -
                     CmpRtCd(#j) Cur(#j)
    end-evaluate
    add 1 to #i
  end-while

  add 1 to #j

FROM PS_PY_EARNS_WRK EW
WHERE EW.PROCESS_INSTANCE = #prcs_process_instance
ORDER BY EW.EARNS_TYPE ASC, EW.ERNCD ASC, EW.EARNS_END_DT DESC, EW.EARNS_BEGIN_DT DESC,
         EW.HOURLY_RT ASC
end-SELECT
end-procedure


!***********************************************************************
begin-procedure Ignore
!***********************************************************************

  !Dummy procedure to avoid error if zero row selected for processing
end-procedure
