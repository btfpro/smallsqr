!***********************************************************************
!  PUPYG01:  8.9 Upgrade - ChartKey usage by Company and Business Unit *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      !
!                $Date:  2006/06/06:16:28:28                           !
!             $Release:  HR9                                           !
!            $Revision:  102                                           !
!                                                                      !
!**********************************************************************!

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc'  !printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PUPYG01' to $ReportID

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Report-Language
  move $PUPYG01_ReportTitle to $ReportTitle

  display ' '
  display $ReportTitle
  display ' '

end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PUPYG01 program ids

  do Init_Report_Translation($ReportID,$language_cd)
   Let #1A = 1
   Let #2A = 7
   Let #1B = 9
   Let #2B = 12
   Let #1C = 23
   Let #2C = 14
   Let #1D = 37
   Let #2D = 1
   Let #1E = 39
   Let #2E = 30
   Let #1F = 71
   Let #2F = 10
   Let #1G = 83
   Let #2G = 10
   Let #1H = 95
   Let #2H = 5
   Let #1I = 102
   Let #2I = 30

   Let $PUPYG01_ReportTitle = 'ChartKey Usage by Company and Business Unit'
   Let $PUPYG01_Company   =   'Company'
   Let $PUPYG01_Bus_Unit  =   'Bus Unit'
   Let $PUPYG01_Chart_Key  =  'ChartField Key'
   Let $PUPYG01_Account    =  'Account'
   Let $PUPYG01_Deptid    =   'Dept ID'
   Let $PUPYG01_Fund_Code  =  'Fund'
   Let $PUPYG01_Line_Descr =  'Line Description'
   Let $PUPYG01_group   =     'Earnings Code'
   Let $PUPYG01_group2  =     ''
   Let $PUPYG01_page_head  = 'Company Earnings Accounts'

end-procedure

begin-HEADING 8

  #Include 'stdhdgtr.sqc'
  Print $PUPYG01_page_head (+1,1,30)
  Print ''                 (+1,1,1)
  print $PUPYG01_Company    (+1,#1A,#2A)
  print $PUPYG01_Bus_Unit   (0,#1B,#2B)
  print $PUPYG01_group      (0,#1C,#2C)
  print $PUPYG01_group2     (0,#1D,#2D)
  print $PUPYG01_Chart_Key  (0,#1E,#2E)
  print $PUPYG01_Account    (0,#1F,#2F)
  print $PUPYG01_Deptid     (0,#1G,#2G)
  print $PUPYG01_Fund_Code  (0,#1H,#2H)
  print $PUPYG01_Line_Descr (0,#1I,#2I)

  print '-'     (+1,#1A,#2A)  Fill
  print '-'     (0,#1B,#2B)   Fill
  print '-'     (0,#1C,#2C)   Fill
  print '-'     (0,#1D,#2D)   Fill
  print '-'     (0,#1E,#2E)   Fill
  print '-'     (0,#1F,#2F)   Fill
  print '-'     (0,#1G,#2G)   Fill
  print '-'     (0,#1H,#2H)   Fill
  print '-'     (0,#1I,#2I)   Fill

end-HEADING

!***********************************************************************
!  PROC REPORT                                                         *
!         Main Procedure                                               *
!***********************************************************************

BEGIN-PROCEDURE Process-Main

 do Get-Companies('EARNINGS')
 New-Page
  Let  $PUPYG01_group    =  'Deduction Code'
  Let  $PUPYG01_group2   =  'Class'
  Let  $PUPYG01_page_head = 'Company Deduction Accounts'
  Let #1A = 1
  Let #2A = 7
  Let #1B = 9
  Let #2B = 12
  Let #1C = 23
  Let #2C = 14
  Let #1D = 39
  Let #2D = 14
  Let #1E = 55
  Let #2E = 30
  Let #1F = 77
  Let #2F = 10
  Let #1G = 88
  Let #2G = 10
  Let #1H = 99
  Let #2H = 5
  Let #1I = 105
  Let #2I = 27
 do Get-Companies('DEDUCTIONS')
 New-Page
 Let     $PUPYG01_group  =   'Tax Type'
 Let     $PUPYG01_group2  =  ''
 Let     $PUPYG01_page_head  = 'US Company Tax Accounts'
 Let #1A = 1
 Let #2A = 7
 Let #1B = 9
 Let #2B = 12
 Let #1C = 23
 Let #2C = 14
 Let #1D = 37
 Let #2D = 16
 Let #1E = 55
 Let #2E = 30
 Let #1F = 77
 Let #2F = 10
 Let #1G = 88
 Let #2G = 10
 Let #1H = 99
 Let #2H = 5
 Let #1I = 105
 Let #2I = 27

 do Get-US-Company-Tax
 New-Page
 Let  $PUPYG01_group    =   'Can Tax Class'
 Let  $PUPYG01_group2   =   'Plan'
 Let  $PUPYG01_page_head =  'Canadian Company Tax Accounts'
 Let #1A = 1
 Let #2A = 7
 Let #1B = 9
 Let #2B = 12
 Let #1C = 23
 Let #2C = 14
 Let #1D = 39
 Let #2D = 14
 Let #1E = 55
 Let #2E = 30
 Let #1F = 77
 Let #2F = 10
 Let #1G = 88
 Let #2G = 10
 Let #1H = 99
 Let #2H = 5
 Let #1I = 105
 Let #2I = 27
 do Get-CAN-Company-Tax
 print '' (+1,1,0)
END-PROCEDURE

!***********************************************************************
!  Get-Companies($Diver) Get companies for Earnings and Deductions     *
!***********************************************************************

BEGIN-PROCEDURE Get-Companies($Diver)

BEGIN-SELECT
A.COMPANY
   LET $COMPANY = &A.COMPANY
   Evaluate $Diver
   When = 'EARNINGS'
    do Get-EarnProgram($COMPANY)
    Break
   When = 'DEDUCTIONS'
        do Get-DeductionCodes($COMPANY)
        Break
   End-Evaluate


FROM PS_COMPANY_TBL A
WHERE A.EFFDT = (SELECT
                MAX(COMPANY_TBL.EFFDT)
   FROM PS_COMPANY_TBL COMPANY_TBL
  WHERE COMPANY_TBL.COMPANY = A.COMPANY)
AND A.EFF_STATUS = 'A'
END-SELECT

END-PROCEDURE


!***********************************************************************
!  Get-EarnProgram($MainCompany) Get the Earnings Program by company   *
!***********************************************************************

BEGIN-PROCEDURE Get-EarnProgram($MainCompany)

BEGIN-SELECT DISTINCT
C.ERN_PROGRAM
B.BUSINESS_UNIT_GL
  Let $ERN_PROGRAM = &C.ERN_PROGRAM
  Let $BUSINESS_UNIT_GL = &B.BUSINESS_UNIT_GL
A.BUSINESS_UNIT
  Let $BUSINESS_UNIT = &A.BUSINESS_UNIT
  do Get-EarningsCode($MainCompany, $ERN_PROGRAM, $BUSINESS_UNIT, $BUSINESS_UNIT_GL)
FROM PS_PAY_EARNINGS A
,PS_BUS_UNIT_TBL_HR B
,PS_PAYGROUP_TBL C
WHERE A.COMPANY = $MainCompany
AND B.BUSINESS_UNIT = A.BUSINESS_UNIT
AND B.BUSINESS_UNIT_GL <> ' '
AND C.COMPANY = A.COMPANY
AND C.PAYGROUP = A.PAYGROUP
AND C.EFFDT  = (
   SELECT MAX(PS_PAYGROUP_TBL.EFFDT)
   FROM PS_PAYGROUP_TBL PS_PAYGROUP_TBL
   WHERE PS_PAYGROUP_TBL.COMPANY = C.COMPANY
   AND PS_PAYGROUP_TBL.PAYGROUP = C.PAYGROUP
   AND PS_PAYGROUP_TBL.EFFDT <= $_AsOfToday)
   AND C.EFF_STATUS = 'A'
END-SELECT

END-PROCEDURE

!***************************************************************************
!  Get-EarningsCode($COMP, $ErnPrg, $Bu, $BuGl)Get the erncd and Chartkey  *
!***************************************************************************

BEGIN-PROCEDURE Get-EarningsCode($COMP, $ErnPrg, $Bu, $BuGl)
  Let $TableName = 'EARNINGS_TBL'
BEGIN-SELECT DISTINCT
C.ERNCD
  Let $ERNCD = &C.ERNCD
C.GL_EXPENSE
  Let $ChrtKey = &C.GL_EXPENSE
  If $Bu <> $Bu_old or $COMP <> $COMP_OLD
      Print $COMP (+1,#_1A,#_2A)
      Print $Bu (0,#_1B,#_2B)
  end-if
  Let $Bu_old = $Bu
  Let $COMP_OLD = $COMP
  do Print-ChartFields($BuGl, $ChrtKey, $ERNCD, $dummy_char, $TableName, $Bu)
FROM
PS_ERN_PROGRAM_DEF A
,PS_ERN_PROGRAM_TBL B
,PS_EARNINGS_TBL C
WHERE A.ERN_PROGRAM = B.ERN_PROGRAM
AND A.EFFDT = (
    SELECT MAX(PS_ERN_PROGRAM_DEF.EFFDT)
    FROM PS_ERN_PROGRAM_DEF PS_ERN_PROGRAM_DEF
    WHERE PS_ERN_PROGRAM_DEF.ERN_PROGRAM = A.ERN_PROGRAM
    AND PS_ERN_PROGRAM_DEF.ERNCD = A.ERNCD
    AND  PS_ERN_PROGRAM_DEF.EFFDT <= $_AsOfToday)
    AND B.ERN_PROGRAM = $ErnPrg
AND B.EFFDT = (
    SELECT MAX(PS_ERN_PROGRAM_TBL.EFFDT)
    FROM PS_ERN_PROGRAM_TBL PS_ERN_PROGRAM_TBL
    WHERE PS_ERN_PROGRAM_TBL.ERN_PROGRAM = B.ERN_PROGRAM
    AND PS_ERN_PROGRAM_TBL.EFFDT <= $_AsOfToday)
AND B.EFF_STATUS = 'A'
AND C.ERNCD = A.ERNCD
AND C.EFFDT = (
    SELECT MAX(PS_EARNINGS_TBL.EFFDT)
    FROM PS_EARNINGS_TBL PS_EARNINGS_TBL
    WHERE PS_EARNINGS_TBL.ERNCD = C.ERNCD
    AND PS_EARNINGS_TBL.EFFDT <= $_AsOfToday)
AND C.EFF_STATUS = 'A'
AND C.GL_EXPENSE <> ' '
AND EXISTS (
    SELECT 'X' FROM
    PS_CHART_KEYS_HR D
    ,PS_CHART_DIST_HR E
    ,PS_SET_CNTRL_REC F
    WHERE D.SETID = E.SETID
    AND D.SETID = F.SETID
    AND D.ACTIVITY = E.ACTIVITY
    AND D.ACCOUNT_TYPE = E.ACCOUNT_TYPE
    AND E.RECNAME = $TableName
    AND D.BUSINESS_UNIT_GL <> ' '
    AND D.BUSINESS_UNIT_GL = $BuGl
    AND D.CHART_KEY = C.GL_EXPENSE
    AND D.ACCOUNT_TYPE = 'X'
    AND F.SETCNTRLVALUE = $Bu
    AND F.RECNAME = 'JRNLGEN_APPL_ID' )

END-SELECT
END-PROCEDURE

!***************************************************************************
!  Get-DeductionCodes($Deduction_Company) Get the dedcd and Chartkey       *
!***************************************************************************


BEGIN-PROCEDURE Get-DeductionCodes($Deduction_Company)

  Let $TableName = 'DEDUCTION_CLASS'
BEGIN-SELECT DISTINCT
B.BUSINESS_UNIT
  Let $BUSINESS_UNIT = &B.BUSINESS_UNIT
    If $BUSINESS_UNIT <> $BUSINESS_UNIT_old or $Deduction_Company <> $Deduction_Company_OLD
        Print $Deduction_Company (+1,#_1A,#_2A)
        Print $BUSINESS_UNIT (0,#_1B,#_2B)
    end-if
  Let $BUSINESS_UNIT_old = $BUSINESS_UNIT
  Let $Deduction_Company_OLD = $Deduction_Company
C.BUSINESS_UNIT_GL
  Let $BUSINESS_UNIT_GL = &C.BUSINESS_UNIT_GL
A.DEDCD
  Let $DEDCD = &A.DEDCD
D.DED_CLASS
  Let $DED_CLASS = &D.DED_CLASS
D.GL_EXPENSE
  Let $GL_EXPENSE = &D.GL_EXPENSE
  do Print-ChartFields($BUSINESS_UNIT_GL, $GL_EXPENSE, $DEDCD , $DED_CLASS, $TableName, $BUSINESS_UNIT)
FROM PS_PAY_DEDUCTION A
 , PS_PAY_CHECK B
 ,PS_BUS_UNIT_TBL_HR C
 ,PS_DEDUCTION_CLASS D
WHERE A.COMPANY = $Deduction_Company
AND A.COMPANY = B.COMPANY
AND A.PAYGROUP = B.PAYGROUP
AND A.PAY_END_DT = B.PAY_END_DT
AND A.OFF_CYCLE = B.OFF_CYCLE
AND A.PAGE_NUM = B.PAGE_NUM
AND A.LINE_NUM = B.LINE_NUM
AND A.SEPCHK = B.SEPCHK
AND A.DED_CLASS IN ('L', 'N', 'P', 'T')
AND B.BUSINESS_UNIT = C.BUSINESS_UNIT
AND C.BUSINESS_UNIT_GL <> ' '
AND A.DEDCD = D.DEDCD
AND A.PLAN_TYPE = D.PLAN_TYPE
AND D.EFFDT = (
 SELECT MAX(DEDUCTION_CLASS.EFFDT)
        FROM PS_DEDUCTION_CLASS DEDUCTION_CLASS
        WHERE DEDUCTION_CLASS.PLAN_TYPE  = D.PLAN_TYPE
        AND DEDUCTION_CLASS.DEDCD = D.DEDCD
        AND DEDUCTION_CLASS.EFFDT <= $_AsOfToday)
AND EXISTS (
    SELECT 'X' FROM
    PS_CHART_KEYS_HR E
    ,PS_CHART_DIST_HR F
    ,PS_SET_CNTRL_REC G
    WHERE E.SETID = F.SETID
    AND E.SETID = G.SETID
    AND E.ACTIVITY = F.ACTIVITY
    AND E.ACCOUNT_TYPE = F.ACCOUNT_TYPE
    AND F.RECNAME = $TableName
    AND E.BUSINESS_UNIT_GL <> ' '
    AND E.BUSINESS_UNIT_GL = C.BUSINESS_UNIT_GL
    AND E.CHART_KEY = D.GL_EXPENSE
    AND G.SETCNTRLVALUE = B.BUSINESS_UNIT
    AND G.RECNAME = 'JRNLGEN_APPL_ID'
    AND E.ACCOUNT_TYPE = 'X')
ORDER BY B.BUSINESS_UNIT, A.DEDCD
END-SELECT

END-PROCEDURE

!********************************************************************
!  Get-US-Company-Tax Get Companies for US Taxes                    *
!********************************************************************


BEGIN-PROCEDURE Get-US-Company-Tax

BEGIN-SELECT DISTINCT
A.COMPANY
B.BUSINESS_UNIT
C.BUSINESS_UNIT_GL
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'FOR')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'FMR')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'FUT')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'SUT')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'SDR')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'VDR')
  do Get-US-Tax-Accounts(&A.COMPANY, &B.BUSINESS_UNIT, &C.BUSINESS_UNIT_GL, 'LWR')
FROM PS_PAY_TAX A
,PS_PAY_CHECK B
,PS_BUS_UNIT_TBL_HR C
WHERE A.COMPANY  = B.COMPANY
AND A.PAYGROUP = B.PAYGROUP
AND A.PAY_END_DT = B.PAY_END_DT
AND A.OFF_CYCLE = B.OFF_CYCLE
AND A.PAGE_NUM = B.PAGE_NUM
AND A.LINE_NUM = B.LINE_NUM
AND A.SEPCHK = B.SEPCHK
AND B.BUSINESS_UNIT = C.BUSINESS_UNIT
AND C.BUSINESS_UNIT_GL <> ' '
ORDER BY A.COMPANY, B.BUSINESS_UNIT
END-SELECT

END-PROCEDURE

!********************************************************************
!  Get-US-Company-Tax Get Accounts for US Company Taxes             *
!********************************************************************


BEGIN-PROCEDURE Get-US-Tax-Accounts($COMPANY, $BusinessUnit, $GlBusinessUnit, $TaxType)
Let $Where_cl  = ' '
 Let $TableName = 'COMPANY_TBL'
Evaluate $TaxType
  When = 'FOR'
    Let $Where_cl = 'AND B.GL_FICA_EXP_OASDI <> '''|| ' ' || ''' AND B.GL_FICA_EXP_OASDI = A.CHART_KEY '
    Let $Tax_Decr = 'Company FICA OASDI'
    break
  When = 'FMR'
     Let $Where_cl = 'AND B.GL_FICA_EXP_MED <> ''' || ' ' ||''' AND B.GL_FICA_EXP_MED = A.CHART_KEY '
     Let $Tax_Decr = 'Company FICA Medicare'
     break
  When = 'FUT'
      Let $Where_cl = 'AND B.GL_FUT_EXPENSE <> '''|| ' ' || ''' AND B.GL_FUT_EXPENSE = A.CHART_KEY '
      Let $Tax_Decr = 'Company FUT'
      break
  When = 'SUT'
    Let  $Where_cl = 'AND B.GL_SUT_EXPENSE <> ''' || ' ' ||''' AND B.GL_SUT_EXPENSE = A.CHART_KEY '
    Let  $Tax_Decr = 'Company SUT'
      break
  When = 'SDR'
     Let $Where_cl = 'AND B.GL_SDI_EXPENSE <> ''' || ' ' ||'''  AND B.GL_SDI_EXPENSE = A.CHART_KEY '
     Let  $Tax_Decr = 'Company SDI'
      break
  When = 'VDR'
     Let $Where_cl = 'AND B.GL_VDI_EXPENSE <> ''' || ' ' ||''' AND B.GL_VDI_EXPENSE = A.CHART_KEY '
     Let $Tax_Decr = 'Company VDI'
      break
  When = 'LWR'
     Let  $Where_cl = 'AND B.GL_LCL_EXP <> '''|| ' ' || ''' AND B.GL_LCL_EXP = A.CHART_KEY '
      Let $Tax_Decr = 'Company LWR'
      break
  When-other
      break
  End-Evaluate

BEGIN-SELECT ON-ERROR=SQL-Error
A.CHART_KEY
  If $BusinessUnit <> $BusinessUnit_old or $COMPANY <> $COMPANY_OLD
    Print $COMPANY (+1,#_1A,#_2A)
    Print $BusinessUnit (0,#_1B,#_2B)
  end-if
  Let $BusinessUnit_old = $BusinessUnit
  Let $COMPANY_OLD = $COMPANY
   Print $Tax_Decr (+1, 27, 22)
   Print '' (-1,1,0)
   do Print-ChartFields($GlBusinessUnit, &A.CHART_KEY, $TaxType, $Dummy, $TableName, $BusinessUnit )
FROM PS_COMPANY_TBL B
, PS_CHART_KEYS_HR A
,PS_SET_CNTRL_REC C
,PS_CHART_DIST_HR D
 WHERE B.COMPANY = $COMPANY
   AND A.SETID = C.SETID
   AND A.ACTIVITY = D.ACTIVITY
   AND A.ACCOUNT_TYPE = D.ACCOUNT_TYPE
   AND A.SETID = D.SETID
   AND A.BUSINESS_UNIT_GL <> ' '
   AND A.BUSINESS_UNIT_GL = $GlBusinessUnit
   AND D.RECNAME =  $TableName
   AND C.SETCNTRLVALUE = $BusinessUnit
   AND C.RECNAME = 'JRNLGEN_APPL_ID'
   AND A.ACCOUNT_TYPE = 'X'
   AND B.EFFDT = (
 SELECT MAX(COMPANY_TBL.EFFDT)
 FROM PS_COMPANY_TBL COMPANY_TBL
 WHERE COMPANY_TBL.COMPANY = B.COMPANY
 AND COMPANY_TBL.EFFDT <= $_AsOfToday)
 AND B.EFF_STATUS = 'A'
   [$Where_cl]
  END-SELECT

END-PROCEDURE

!********************************************************************
!  Get-CAN-Company-Tax Get Companies Accounts for CAN Taxes         *
!********************************************************************

BEGIN-PROCEDURE Get-CAN-Company-Tax

BEGIN-SELECT DISTINCT
A.COMPANY &comp
B.BUSINESS_UNIT &buint
C.BUSINESS_UNIT_GL &bunitgl
  do Get-CAN-Tax-Account(&comp , &buint, &bunitgl)
FROM PS_PAY_TAX_CAN A
,PS_PAY_CHECK B
,PS_BUS_UNIT_TBL_HR C
WHERE A.COMPANY  = B.COMPANY
AND A.PAYGROUP = B.PAYGROUP
AND A.PAY_END_DT = B.PAY_END_DT
AND A.OFF_CYCLE = B.OFF_CYCLE
AND A.PAGE_NUM = B.PAGE_NUM
AND A.LINE_NUM = B.LINE_NUM
AND A.SEPCHK = B.SEPCHK
AND B.BUSINESS_UNIT = C.BUSINESS_UNIT
AND C.BUSINESS_UNIT_GL <> ' '
ORDER BY A.COMPANY, B.BUSINESS_UNIT
END-SELECT

END-PROCEDURE

!********************************************************************
!  Get-CAN-Tax-Account Get Accounts for Company CAN Taxes           *
!********************************************************************

BEGIN-PROCEDURE Get-CAN-Tax-Account($CAN_COMPANY, $CAN_BUSINESS_UNIT, $CAN_BUSINESS_UNIT_GL)

Let $TableName = 'WGLS_EXP_GL_ACC'

BEGIN-SELECT
B.TAX_CLASS_CAN
B.GL_NBR
A.WAGE_LOSS_PLAN
    If $CAN_BUSINESS_UNIT <> $buint_old or $CAN_COMPANY <> $comp_old
      Print $CAN_COMPANY (+1,#_1A,#_2A)
      Print $CAN_BUSINESS_UNIT (0,#_1B,#_2B)
    end-if
  Let $buint_old = $CAN_BUSINESS_UNIT
  Let $comp_old = $CAN_COMPANY

 do Print-ChartFields($CAN_BUSINESS_UNIT_GL, &B.GL_NBR, &B.TAX_CLASS_CAN, &A.WAGE_LOSS_PLAN, $TableName, $CAN_BUSINESS_UNIT )
FROM
PS_WAGELS_PLAN_TBL A
,PS_WGLS_EXP_GL_ACC B
,PS_CHART_KEYS_HR H
,PS_SET_CNTRL_REC I
,PS_CHART_DIST_HR J
WHERE A.COMPANY = B.COMPANY
AND A.WAGE_LOSS_PLAN = B.WAGE_LOSS_PLAN
AND A.EFFDT = (
 SELECT MAX(WAGELS_PLAN_TBL.EFFDT)
        FROM PS_WAGELS_PLAN_TBL WAGELS_PLAN_TBL
 WHERE WAGELS_PLAN_TBL.COMPANY = A.COMPANY
        AND WAGELS_PLAN_TBL.WAGE_LOSS_PLAN = A.WAGE_LOSS_PLAN
        AND WAGELS_PLAN_TBL.EFFDT <= $_AsOfToday)
 AND A.EFF_STATUS = 'A'
 AND B.EFFDT = (
 SELECT MAX(WGLS_EXP_GL_ACC.EFFDT)
        FROM PS_WGLS_EXP_GL_ACC WGLS_EXP_GL_ACC
 WHERE WGLS_EXP_GL_ACC.COMPANY = B.COMPANY
        AND WGLS_EXP_GL_ACC.WAGE_LOSS_PLAN = B.WAGE_LOSS_PLAN
        AND WGLS_EXP_GL_ACC.EFFDT <= $_AsOfToday)
AND(B.TAX_CLASS_CAN in (SELECT E.TAX_CLASS_CAN
                        FROM PS_CAN_TAX_CLASS E
                        WHERE E.EFFDT = (
                        SELECT  MAX(CAN_TAX_CLASS.EFFDT)
                        FROM PS_CAN_TAX_CLASS CAN_TAX_CLASS WHERE
                        CAN_TAX_CLASS.TAX_CLASS_CAN  = E.TAX_CLASS_CAN
                        AND CAN_TAX_CLASS.EFFDT <= $_AsOfToday))
     OR B.TAX_CLASS_CAN in (SELECT F.TAX_CLASS_CAN
                        FROM PS_CAN_TAX_HLCLASS F
                        WHERE F.EFFDT = (
                        SELECT  MAX(CAN_TAX_HLCLASS.EFFDT)
                        FROM PS_CAN_TAX_HLCLASS CAN_TAX_HLCLASS WHERE
                        CAN_TAX_HLCLASS.TAX_CLASS_CAN  = F.TAX_CLASS_CAN
                        AND CAN_TAX_HLCLASS.EFFDT <= $_AsOfToday)) )
   AND A.COMPANY = $CAN_COMPANY
   AND H.SETID = I.SETID
   AND H.CHART_KEY = B.GL_NBR
   AND H.ACTIVITY = J.ACTIVITY
   AND H.ACCOUNT_TYPE = J.ACCOUNT_TYPE
   AND H.SETID = J.SETID
   AND H.BUSINESS_UNIT_GL <> ' '
   AND H.BUSINESS_UNIT_GL = $CAN_BUSINESS_UNIT_GL
   AND J.RECNAME =  $TableName
   AND I.SETCNTRLVALUE = $CAN_BUSINESS_UNIT
   AND I.RECNAME = 'JRNLGEN_APPL_ID'
   AND H.ACCOUNT_TYPE = 'X'

END-SELECT

END-PROCEDURE

!********************************************************************
!  Print-ChartFields                                                *
!********************************************************************

BEGIN-PROCEDURE Print-ChartFields($BU_GL, $Chart_Key, $Group, $Group2, $tbl, $SetContolBU )

BEGIN-SELECT

  Print $Group (+1,#_1C,#_2C)
  Print $Group2 (0,#_1D,#_2D)
A.CHART_KEY (0,#_1E,#_2E)
A.ACCOUNT (0,#_1F,#_2F)
A.DEPTID  (0,#_1G,#_2G)
A.FUND_CODE (0,#_1H,#_2H)
A.LINE_DESCR  (0,#_1I,#_2I)
FROM
 PS_CHART_KEYS_HR A
,PS_CHART_DIST_HR B
,PS_SET_CNTRL_REC C
WHERE A.SETID = B.SETID
AND A.SETID = C.SETID
AND A.ACTIVITY = B.ACTIVITY
AND A.ACCOUNT_TYPE = B.ACCOUNT_TYPE
AND B.RECNAME = $tbl
AND A.BUSINESS_UNIT_GL <> ' '
AND A.BUSINESS_UNIT_GL = $BU_GL
AND A.CHART_KEY = $Chart_Key
AND A.ACCOUNT_TYPE = 'X'
AND C.SETCNTRLVALUE = $SetContolBU
AND C.RECNAME = 'JRNLGEN_APPL_ID'
END-SELECT

END-PROCEDURE

#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#include 'sqrtrans.sqc'  !Translate SQR strings to given language
#include 'getrplng.sqc'  !Get the report language
#include 'readxlat.sqc'  !Read-Translate-Table procedure
