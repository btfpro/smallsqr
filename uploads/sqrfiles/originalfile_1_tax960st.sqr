!***********************************************************************
!  TAX960ST :  Create MMREF W-2 Reports for Selected States            *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/21:12:56:57                           !
!             $Release:  HR9                                           !
!            $Revision:  103                                           !
!                                                                      *
!***********************************************************************
!***********************************************************************
! Modified for Education & Government                                  *
! HP00001       Retirement Contributions for Massachusetts             *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup31.sqc' !Printer and page-size initialization

Begin-Program

  display ''
  display 'Creating Selected States W-2 File in MMREF Format'

  Let $t1 = datenow()
  Show 'Report Started at : ' $t1

  Move 0 to $Zero_fill 099999999999999

  do Init-Report
  do Process-Main

  do Stdapi-Term

  Display ''
  Let $t2 = datenow()
  Show 'Report Ended at : ' $t2
End-Program


Begin-Procedure Init-Report
  do Get-EandG                                                          !HP00001
  do Get-FederalProduct                                                 !FED0001
  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls
  do Initialization

  If $Prcs_Process_Instance = ''
    Display 'Report cannot be run outside of PeopleSoft, please use process scheduler.'
    Stop
  End-if

  do Read-States


End-Procedure

Begin-Procedure Populate-Headings
  let $ReportID2 = 'TAX960' ||$E.W2_State
  let $ReportID = 'TAX960ST'
  Let $Program = 'ST'
  move $E.W2_State to $State
  do Get-ee-State-Code
  move &S.NUMERIC_CD to $StateNumCd
  move &S.NUMERIC_CD to $StateNumCdA
  let $StateName = rtrim(&S.DESCR, ' ')
  let $ReportTitle = ' W-2 File Summary Report'
  show $StateName ' W-2 File Records'
  show ' '
  do File-Create

End-Procedure


Begin-Procedure Initialization

  do Get-Current-DateTime
  move '1' to $MMLZero
  do Format-DateTime($AsOfToday, $960Date, {DEFYMD},'','')
  move $960Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  If &TX.Balance_Year <> #AsOfYear
    display ''
    display 'Please note : Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    display ''
  End-if

Begin-Select
TEMP_SSN_MASK
FROM PS_INSTALLATION
End-Select
End-Procedure


Begin-Procedure File-Create

  do Close-File
  move &TX.Company       to $XCompany  !TX.Company is the Transmitter
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  let $EffDate = $CalYear || '1231'
  do Format-DateTime($EffDate, $EffDate, {DEFCMP}, '', 'native')
  do Get-Transmitter-Data
  if $E.W2_State = 'PA'
    do Check-Disk
  else
    move &RC960.Reporting_Medium to $FileType
  end-if
  do Open-File
  do Write-Transmitter-Records

End-Procedure


Begin-Procedure Get-Transmitter-Data
  Let $XmitterFound = 'N'
Begin-Select
X.DESCR
X.FEDERAL_EIN
X.ADDRESS1
X.ADDRESS2
X.CITY
X.STATE
X.POSTAL
X.COUNTRY

  Let $XmitterFound = 'Y'

FROM  PS_W2_COMPANY X
WHERE COMPANY = $XCompany
  AND X.CALENDAR_YEAR = &TX.Balance_Year
End-Select

  If $XmitterFound = 'N'
    Show 'W2 COMPANY DATA NOT SETUP FOR COMPANY : ' $XCompany '  BALANCE YEAR : ' &TX.Balance_Year
    Stop
  End-if

Begin-Select
RC960.REPORTING_MEDIUM
RC960.DISKETTE_TYPE
RC960.EMPLR_PIN
RC960.RESUB_INDICATOR
RC960.RESUB_TLCN
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN
RC960.EMAIL_ADDR_MMREF
RC960.CONTACT_FAX
RC960.NOTIFY_METHOD

FROM PS_TAX960_PARM RC960

End-Select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
    Show 'MMREF Parameters must be set up on SETUP Menu.'
    Show 'Re-execute after establishing MMREF Parameters.'
    Stop
  End-if

  move &RC960.EMAIL_ADDR_MMREF to $RC960.EMAIL_ADDR
  uppercase $RC960.EMAIL_ADDR
  Let $RC960.CONTACT_NAME_SSA = translate(&RC960.CONTACT_NAME_SSA,',','')
  move &RC960.Reporting_Medium to $FileType
  move &RC960.Diskette_Type    to $DisketteType
  Let #RecordLength = 512
  do Calculate-Diskette-Capacity
  #ifdef TAXTEST
     move 5 to #MaxRecordsPerDiskette
  #endif

End-Procedure

Begin-Procedure Write-Transmitter-Records
  move &X.Federal_EIN       to $FedEIN  099999999
  move &RC960.EMPLR_PIN     to $EmprPIN ! 09999999999999999
!  let  $EmprPIN = rpad(rtrim(&RC960.EMPLR_PIN, ' '),17,'0')

  move '99'  to $SoftwareCd

  If &RC960.RESUB_INDICATOR = 'Y'
    Let $RS_Ind = '1'
  Else
    Let $RS_Ind = '0'
  End-if

  If &RC960.PHONE_EXTN <> 0
    move &RC960.PHONE_EXTN to $Phone_Extn
  Else
    move '    ' to $Phone_Extn
  End-if

  move &RC960.RESUB_TLCN      to $TLCN
  move &X.Descr        to $Xmitr_Name
  move &X.Address1     to $X.Address1
  move &X.Address2     to $X.Address2
  move &X.City         to $City
  let  $StateCd = rtrim(&X.State, ' ')
  move &X.Postal       to $Zip
  move &X.Country      to $Country
  do Foreign-Address-Test('Format 3',25)

  uppercase $Xmitr_Name
  uppercase $X.Address1
  uppercase $X.Address2

  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  Else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  !Unique State Requirements - Different from MMREF
  ! Decide to write the RA record

  Evaluate $E.W2_State
    when = 'AL'
    when = 'DC'
    when = 'NC'
    when = 'WV'
      break
    when = 'PA'
      do Write-RA-Record-for-PA
      do Check-Disk

      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
    when-other
      do Write-RA-Record
      do Check-Disk

      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
  end-evaluate

End-Procedure

Begin-Procedure Process-Main

Begin-Select
E.W2_STATE         () on-break print=never before=Before-State  level=1
                                           AFTER=After-State  level=1
A.W2_REPORTING_CO  () on-break print=never before=Before-W2-Reporting-Co-Chg  level=2
                                           AFTER=After-W2-Reporting-Co-Chg  level=2
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.OTHER_EIN
A.BUSI_TERM_IND
E.COMPANY
E.EMPLID           () on-break print=never before=Before-EmplID   level=3
                                           AFTER=AFTER-EMPLID  level=3
E.SEQUENCE_NUMBER
E.TAXFORM_ID
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.DECEASED
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG

  move &E.Company         to $E.Company
  move &E.TaxForm_ID      to $E.TaxForm_ID
  move &E.Sequence_Number to #E.Sequence_Number
  move &E.Employer_ID_SWT to $E.Employer_ID_SWT
  do Load-Fed-Amounts
  do Load-State-Amounts

  !Unique State Requirements - Different from MMREF
  !    State requires local/county/district wages and taxes

  evaluate $E.W2_State
    when = 'IN'
    when = 'OH'
      do Load-Local-Amounts
      break
    when = 'KY'
      do Load-KY-Local
      break
    when = 'MA'
      if $PublicSector= 'Y'  or                                         !HP00001
         $FederalProduct = 'Y'                                          !HP00001
          do Gather-FRMALOC-Amounts                                     !HP00001
      else                                                              !HP00001
          move 0 to #FRMALOC-Retire-Fund
      end-if                                                            !HP00001
      break
    when = 'NJ'
    when = 'MD'
      do Gather-Local-Amounts
      break
  end-evaluate

FROM  PS_W2_COMPANY A, PS_YE_EE EE, PS_YE_DATA E
WHERE A.CALENDAR_YEAR    = &TX.Balance_Year
  AND A.W2_REPORTING_CO <> ' '
  AND A.TAXFORM_ID      =  'W'
  AND A.COMPANY          = E.COMPANY
  AND A.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND A.TAXFORM_ID       = E.TAXFORM_ID
  [$E.SelectedStates]
  AND E.TAXFORM_ID       = 'W'
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND EE.PROCESS_FLAG   <> 'V'

ORDER BY  E.W2_STATE, A.W2_REPORTING_CO, E.SSN, E.EMPLID

end-select

  If #Count-T <> 0
    do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

End-Procedure


Begin-Procedure  Before-W2-Reporting-Co-Chg

  move '  ' to $RESp
  move &A.W2_Reporting_Co to $Company
  move &A.Descr           to $A.Descr
  move &A.Federal_EIN     to $A.Federal_EIN
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.City            to $A.City
  let  $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.Country         to $A.Country
  move &A.Other_EIN       to #A.Other_EIN
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co
  move &A.Busi_Term_Ind   to $A.Busi_Term_Ind

  If $A.Busi_Term_Ind = 'Y'
     Let $A.Busi_Term_Ind = '1'
  Else
     Let $A.Busi_Term_Ind = '0'
  End-if

  do Get-Third-Party-Amount

  do Get-Third-Party-Sick

  move 0 to #Count-S
  move 0 to #Count-T
  move 0 to #Count-U
  move 'N' to $E-Written

  If $E-Written = 'N'
    do Write-E-Record
  End-if

end-procedure

Begin-Procedure  After-W2-Reporting-Co-Chg

  If #Count-T <> 0
    or $E.W2_STATE = 'MD'
       or $E.W2_State = 'PA'
      do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

  !Unique State Requirements - For Report Purposes Only
  !  StateEIN has been cleared for the RS Record, but is
  !    required for the report.  Modifications to show on
  !       TAX960ST here.

  Evaluate  $E.W2_State
    when = 'DE'
      move $FedEIN to $StateEIN
      move $FedEIN to $RptStateEIN
      break
    when = 'IN'
      move $StateEmplIN to $StateEIN
      add #Count-S         to #Count-F
      break
    when = 'PA'
      move $RESp to $StateEIN
      break
    when = 'CT'
    when = 'MA'
    when = 'RI'
      do Blank-T-Record
      move #Count-S        to $Count-T                    0999999
      move #Count-S        to #Count-T
      if $E.W2_State = 'RI'
        move #State_Wages-T  to $SS_Wages-T               099999999999999
        move #State_Tax-T    to $SS_Tips-T                099999999999999
      else
        move #State_Wages-T  to $Fed_Wages-T              099999999999999
        move #State_Tax-T    to $Fed_Tax-T                099999999999999
      end-if
      if $E.W2_State = 'MA'
        move #FRMALOC-Retire-Fund-T to $SS_Tips-T         099999999999999
        move #MA-Fed-Wages-T        to $Adv_EIC-T         099999999999999
        move #SS-Med-T              to $Med_Tax-T         099999999999999
      end-if
      if $E.W2_State = 'CT'
        add 1 to #Tot_Record_Count
        do Write-RT-Rec-for-CT
      else
        do Write-RT-Rec
      end-if
      add #Count-S         to #Count-F
      do Zero-S-Record
      move 0               to #SS-Med-T
      move 0               to #FRMALOC-Retire-Fund-T
      move 0               to #MA-Fed-Wages-T
      move 0               to #Count-S
      break

  end-evaluate

  print $RptStateEIN   (+2,3)                             !State Tax ID

  if $E.W2_State = 'CT' or
     $E.W2_State = 'MA' or
     $E.W2_State = 'RI'
    do Format-Number(#Count-T, $out, 'B99,999')             !Count
    print $out  (,23)

  else
    do Format-Number(#Count-S, $out, 'B99,999')             !Count
    print $out  (,23)
  end-if

  let #out = #State_Wages-T / 100
  do Format-Number(#out, $out, 'B9,999,999,999.99')       !State wages
  print $out  (,35)

  let #out = #State_Tax-T / 100
  do Format-Number(#out, $out, 'B9,999,999.99')           !State tax
  print $out  (,59)

  evaluate $E.W2_State
    when = 'IN'
    when = 'OH'
     do Print-Local
    break
  end-evaluate

  do Zero-T-Record

End-Procedure

Begin-Procedure Print-Local

  if $E.W2_State = 'IN'

    let $Local_Desc = ' Total all counties:'
  end-if

  if $E.W2_State = 'OH'

    let $Local_Desc = ' Total School Dist: '
  end-if

  print $Local_Desc (,74)
  let #out = #Local_Wages-T / 100                   !Local Wages
  do Format-Number(#out, $out, 'B99,999,999.99')    !
  print $out  (,95)

  let #out = #Local_Tax-T / 100                     !Local Taxes
  do Format-Number(#out, $out, 'B9,999,999.99')     !
  print $out  (,111)

  do Print-Temp-Table
  do Delete-Temp-Table

End-Procedure

Begin-Procedure Get-Third-Party-Amount
   Let #Third_party_tax = 0


Begin-Select
TRD_PTY.THIRD_PARTY_TAX

   add &TRD_PTY.THIRD_PARTY_TAX to #Third_party_tax

FROM  PS_RC_THIRD_PARTY   TRD_PTY,  PS_W2_COMPANY  TRD_W2_CPNY
WHERE TRD_PTY.OPRID               = $Prcs_OprID
  AND TRD_PTY.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
  AND TRD_PTY.COMPANY             = TRD_W2_CPNY.COMPANY
  AND TRD_W2_CPNY.CALENDAR_YEAR   = &TX.Balance_Year
  AND TRD_W2_CPNY.TAXFORM_ID      = 'W'
  AND TRD_W2_CPNY.W2_REPORTING_CO = &A.W2_REPORTING_CO
End-Select

   Let #Third_party_tax = #Third_party_tax * 100
   Move #Third_party_tax to $Third_party_tax 099999999999999

End-Procedure

Begin-Procedure Get-Third-Party-Sick
   Let $Thrd_Pty_Sick = '0'
Begin-Select
TSI.COUNTRY

   Let $Thrd_Pty_Sick = '1'

FROM PS_INSTALLATION TSI
WHERE EXISTS (SELECT 'X'
              FROM  PS_YE_EE TSE, PS_YE_DATA TS, PS_W2_COMPANY TSC
              WHERE TSC.W2_REPORTING_CO   = &A.W2_Reporting_Co
                AND TSC.COMPANY           = TS.COMPANY
                AND TSC.CALENDAR_YEAR     = TS.CALENDAR_YEAR
                AND TS.CALENDAR_YEAR      = &TX.Balance_Year
                AND TS.SEQUENCE_NUMBER    = 1
                AND TS.COMPANY            = TSE.COMPANY
                AND TS.EMPLID             = TSE.EMPLID
                AND TS.TAXFORM_ID         = TSE.TAXFORM_ID
                AND TS.CALENDAR_YEAR      = TSE.CALENDAR_YEAR
                AND TSE.PROCESS_FLAG      <> 'V'
                AND TS.THIRDPARTY_SICKPAY = 'Y')
End-Select
End-Procedure

Begin-Procedure Before-State

  move &E.W2_State        to $E.W2_State
  do Populate-Headings
  print 'State: ' (+2,1)
  print &S.DESCR   (,8)

End-Procedure


Begin-Procedure Before-EmplID

  #ifdef TAXDISPLAY
    Show 'Processing EMPLID : ' &E.EMPLID
  #endif

  Let $FirstTime = 'Y'
  let $State-Reportable = 'N'

  move &E.SSN to $S123 xxx
  If $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move '000000000' to $E.SSN
  else
    move &E.SSN to $E.SSN
  End-if

  move &E.YE_Fname  to $FirstName
  move &E.YE_Middle_name to $MiddleName
  move &E.YE_Lname  to $LastName
  move &E.YE_Suffix to $Suffix
  move '         '  to $Phila-SSN
  move '     '      to $TaxingEntityCd

  uppercase $FirstName
  uppercase $MiddleName
  uppercase $LastName
  uppercase $Suffix

  move &E.Emplid       to $E.Emplid
  move &E.City         to $E.City
  let  $E.StateCd = rtrim(&E.State, ' ')
  move &E.Postal       to $E.Zip
  move &E.Country      to $E.Country

  If &E.Statutory_Ee = 'Y'
    move '1' to $StatutoryEe
  else
    move '0' to $StatutoryEe
  End-if

  If &E.Pension_Plan = 'Y'
    move 1 to #RetirePlan
  else
    move 0 to #RetirePlan
  End-if

  If &E.Deceased = 'Y'
    move '1' to $DeceasedFlag
  else
    move '0' to $DeceasedFlag
  End-if

  if &E.THIRDPARTY_SICKPAY = 'Y'
     move 1 to #Third_Party_Sick_Ind
  else
     move 0 to #Third_Party_Sick_Ind
  end-if

  do Populate-EE-Address

  End-Procedure

  Begin-Procedure Populate-EE-Address

  If rtrim($E.City,' ') = ''
    Show 'City is blank in YE data for employee "' $E.Emplid '" in the personal data.'
    Show 'Fix it and run the load program (Tax910ld.sqr) again.'
    Stop
  End-if


  move $E.City         to $City
  move $E.StateCd      to $StateCd
  move $E.Zip          to $Zip
  move $E.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  if rtrim($E.Address1, ' ') = ''
      move '        ' to $E.Address1
  end-if

  if rtrim($E.Address2, ' ') = ''
      move '        ' to $E.Address2
  end-if

  move &E.Address1 to $E.Address1
  move &E.Address2 to $E.Address2
  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.City
End-Procedure

Begin-Procedure Load-Fed-Amounts

  move 'N' to $WriteORec

Begin-Select
D.BOX
D.W2_AMOUNT

  do Assign-Year-End-Variables
  let $D.Box = RTRIM(&D.Box,' ')
  let #Amount = &D.W2_Amount * 100
  if #Amount < 0  and $D.Box <> $YE_Adv_EIC
    display 'EMPLID ' noline
    display $E.Emplid noline
    display '  W2 Box ID ' noline
    display &D.BOX noline
    display ' Amount ' noline
    display #Amount  noline
    display ' Amount set to Zero '
    move 0 to #Amount
  end-if

    do Evaluate-Box

FROM  PS_YE_AMOUNTS D
WHERE D.COMPANY         = &E.Company
  AND D.CALENDAR_YEAR   = &TX.Balance_Year
  AND D.EMPLID          = &E.Emplid
  AND D.TAXFORM_ID      = &E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = 1
  AND D.STATE           = '$U'
End-Select
End-Procedure


begin-procedure Load-State-Amounts

  do Assign-Year-End-Variables
  let $State-Reportable = 'N'
begin-SELECT
DS.BOX
DS.W2_AMOUNT
  let #Amount = &DS.W2_Amount * 100

  let $DS.Box = RTRIM(&DS.Box,' ')

  do Evaluate-State-Box

  let $State-Reportable = 'Y'

FROM  PS_YE_AMOUNTS DS
WHERE DS.COMPANY         = $E.Company
  AND DS.CALENDAR_YEAR   = &TX.Balance_Year
  AND DS.EMPLID          = $E.Emplid
  AND DS.TAXFORM_ID      = $E.TaxForm_ID
  AND DS.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DS.BOX    IN ('16','17')
end-SELECT

end-procedure

begin-procedure Gather-Local-Amounts

begin-SELECT
GL.BOX
GL.W2_AMOUNT

  let #Amount = &GL.W2_Amount * 100
  let $GL.Box = rtrim(&GL.BOX, ' ')

  evaluate $GL.Box
    when = $YE_Local_Wages         !Local wages
      add  #Amount to #Local_Wages
      break
    when = $YE_Local_Tax           !Local withheld
      add  #Amount to #Local_Tax
      break
  end-evaluate

FROM  PS_YE_AMOUNTS GL
WHERE GL.COMPANY         = $E.COMPANY
  AND GL.CALENDAR_YEAR   = &TX.Balance_Year
  AND GL.EMPLID          = $E.Emplid
  AND GL.TAXFORM_ID      = $E.TaxForm_ID
  AND GL.SEQUENCE_NUMBER = #E.Sequence_Number
  AND GL.STATE           = $State
  AND GL.BOX    IN ('18','19')
end-SELECT
end-procedure

begin-procedure Load-KY-Local
begin-SELECT
KY.W2_AMOUNT
KY.LOCALITY
KY1.KEDFA_CD

  let #Amount = &KY.W2_Amount * 100
  let $KY.Locality = RTRIM(&KY.Locality, ' ')
  let $KEDFA-Cd = RTRIM(&KY1.KEDFA_CD, ' ')

  if $KY.Locality <> ''
    evaluate $KEDFA-CD
      when = '1'
        add  #Amount to #KY_KREDA
        break
      when = '2'
        add  #Amount to #KY_KJDA
        break
      when = '3'
        add  #Amount to #KY_KIRA
        break
      when = '4'
        add  #Amount to #KY_KIDA
        break
    end-evaluate
  end-if

FROM  PS_YE_AMOUNTS KY, PS_RC_TAX960KY KY1
WHERE KY.COMPANY         = $E.COMPANY
  AND KY.CALENDAR_YEAR   = &TX.Balance_Year
  AND KY.EMPLID          = $E.Emplid
  AND KY.TAXFORM_ID      = $E.TaxForm_ID
  AND KY.SEQUENCE_NUMBER = #E.Sequence_Number
  AND KY.STATE           = 'KY'
  AND KY.BOX             = '17'
  AND KY.LOCALITY        = KY1.LOCALITY
end-SELECT
end-procedure

begin-Procedure Gather-FRMALOC-Amounts                                  !HP00001
                                                                        !HP00001
  move 0 to #FRMALOC-Retire-Fund                                        !HP00001
                                                                        !HP00001
  move 'N' to $Ded_Processed                                            !HP00001
  move ' ' to $Prev_PlanType                                            !HP00001
  move ' ' to $Prev_DedCd                                               !HP00001
  move ' ' to $Prev_DedClass                                            !HP00001
  move ' ' to $Prev_BenefitPlan                                         !HP00001
  move 0   to #Prev_BenefitRcdNbr                                       !HP00001
                                                                        !HP00001
begin-SELECT                                                            !HP00001
                                                                        !HP00001
FRMALOC.PLAN_TYPE                                                       !HP00001
FRMALOC.DEDCD                                                           !HP00001
FRMALOC.DED_CLASS                                                       !HP00001
FRMALOC.BENEFIT_PLAN                                                    !HP00001
FRMALOC.BENEFIT_RCD_NBR                                                 !HP00001
FRMALOC.DED_YTD                                                         !HP00001
MA.DEDCD                                                                !HP00001
MA.DED_CLASS                                                            !HP00001
                                                                        !HP00001
  if    &FRMALOC.PLAN_TYPE        <> $Prev_PlanType                     !HP00001
     or &FRMALOC.DEDCD            <> $Prev_DedCd                        !HP00001
     or &FRMALOC.DED_CLASS        <> $Prev_DedClass                     !HP00001
     or &FRMALOC.BENEFIT_PLAN     <> $Prev_BenefitPlan                  !HP00001
     or &FRMALOC.BENEFIT_RCD_NBR  <> #Prev_BenefitRcdNbr                !HP00001
                                                                        !HP00001
      let $Prev_PlanType      = &FRMALOC.PLAN_TYPE                      !HP00001
      let $Prev_DedCd         = &FRMALOC.DEDCD                          !HP00001
      let $Prev_DedClass      = &FRMALOC.DED_CLASS                      !HP00001
      let $Prev_BenefitPlan   = &FRMALOC.BENEFIT_PLAN                   !HP00001
      let #Prev_BenefitRcdNbr = &FRMALOC.BENEFIT_RCD_NBR                !HP00001
      let $Ded_Processed      = 'N'                                     !HP00001
  end-if                                                                !HP00001
                                                                        !HP00001
  if $Ded_Processed        = 'N'                                        !HP00001
                                                                        !HP00001
      let #Amount = &FRMALOC.DED_YTD * 100                              !HP00001
                                                                        !HP00001
      if (rtrim(&MA.DEDCD, ' ') = ''                                    !HP00001
          or &MA.DEDCD = &FRMALOC.DEDCD)                                !HP00001
         and (rtrim(&MA.DED_CLASS, ' ')  = ''                           !HP00001
              or &MA.DED_CLASS = &FRMALOC.DED_CLASS)                    !HP00001
                                                                        !HP00001
          add #Amount to #FRMALOC-Retire-Fund                           !HP00001
          move 'Y'    to $Ded_Processed                                 !HP00001
      end-if                                                            !HP00001
  end-if                                                                !HP00001
                                                                        !HP00001
FROM  PS_DEDUCTION_BAL FRMALOC, PS_RC_TAX960MA MA                       !HP00001
WHERE FRMALOC.EMPLID        = &E.EMPLID                                 !HP00001
  AND FRMALOC.COMPANY       = &E.COMPANY                                !HP00001
  AND FRMALOC.BALANCE_YEAR  = &TX.Balance_Year                          !HP00001
  AND FRMALOC.BALANCE_ID    = $Calendar_Year_Id                         !HP00001
  AND FRMALOC.PLAN_TYPE     = MA.PLAN_TYPE                              !HP00001
  AND MA.OPRID               = $Prcs_OprID                              !HP00001
  AND MA.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID                        !HP00001
  AND FRMALOC.BALANCE_PERIOD    =                                       !HP00001
      (SELECT MAX(BALANCE_PERIOD)                                       !HP00001
       FROM   PS_DEDUCTION_BAL                                          !HP00001
       WHERE  EMPLID            = FRMALOC.EMPLID                        !HP00001
         AND  COMPANY           = FRMALOC.COMPANY                       !HP00001
         AND  BALANCE_YEAR      = FRMALOC.BALANCE_YEAR                  !HP00001
         AND  BALANCE_ID        = FRMALOC.BALANCE_ID                    !HP00001
         AND  BENEFIT_PLAN      = FRMALOC.BENEFIT_PLAN                  !HP00001
         AND  BENEFIT_RCD_NBR   = FRMALOC.BENEFIT_RCD_NBR               !HP00001
         AND  PLAN_TYPE         = FRMALOC.PLAN_TYPE                     !HP00001
         AND  DEDCD             = FRMALOC.DEDCD                         !HP00001
         AND  DED_CLASS         = FRMALOC.DED_CLASS)                    !HP00001
  AND FRMALOC.DED_YTD           <> 0                                    !HP00001
ORDER BY FRMALOC.PLAN_TYPE, FRMALOC.DEDCD, FRMALOC.DED_CLASS,           !HP00001
         FRMALOC.BENEFIT_PLAN, FRMALOC.BENEFIT_RCD_NBR                  !HP00001
                                                                        !HP00001
end-SELECT                                                              !HP00001
end-procedure                                                           !HP00001

begin-procedure Load-Local-Amounts

begin-SELECT      !Local Data
DL.BOX
DL.W2_AMOUNT
DL.STATE
DL.LOCALITY       () on-break print=never after=Report-Local-Amounts

  let $LCL_Status =  nvl (&DL.Locality,'none')
  if  $LCL_Status = 'none'
    display 'No Locality identified for local amount.'
    display 'Processing employee: ' noline
    display $E.EmplID               noline
    display '  In company: '        noline
    display $E.Company
    STOP
  end-if

  let #Amount = &DL.W2_Amount * 100
  let $DL.Locality = RTRIM(&DL.Locality,' ')
  let $DL.Box = RTRIM(&DL.Box,' ')
  let $DL.State = RTRIM(&DL.State,' ')

  if $DL.STATE = 'IN' and $DL.LOCALITY = '99990'
    add #Amount to #STATE_EIC
    move 0 to #Local_Wages
    add #Amount to #Local_Tax
  else
    evaluate $DL.Box
      when = $YE_Local_Wages         !Local wages
        add  #Amount to #Local_Wages
        break
      when = $YE_Local_Tax           !Local withheld
        add  #Amount to #Local_Tax
        break
   end-evaluate
  end-if

FROM  PS_YE_AMOUNTS DL
WHERE DL.COMPANY         = $E.COMPANY
  AND DL.CALENDAR_YEAR   = &TX.Balance_Year
  AND DL.EMPLID          = $E.Emplid
  AND DL.TAXFORM_ID      = $E.TaxForm_ID
  AND DL.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DL.BOX    IN ('18','19')
ORDER BY DL.LOCALITY DESC
end-SELECT
end-procedure                      !Load-Local-Amounts

begin-procedure  Report-Local-Amounts
  let $Loc_Tax_Cd = ''
  let $Locality = RTRIM($DL.Locality,' ')
  if $DL.STATE = 'OH'
     if (length($Locality)) = 4
        do  Get-Locality-Mag-CD
        let $Loc_Tax_Cd = rtrim ($Loc_Tax_Cd,' ')
     end-if
  else
     if &DL.STATE <> 'OH'
       do  Get-Locality-Mag-CD
       let $Loc_Tax_Cd = rtrim ($Loc_Tax_Cd,' ')
     end-if
  end-if
  if $Loc_Tax_Cd <> ''

    let $LocalReportable = 'Y'
    let $State-Reportable = 'Y'
    do Update-Temp-Table
    evaluate $E.W2_State
    when = 'IN'
      move 'D' to $Loc_Tax_Tp
      break
    when = 'OH'
      move 'E' to $Loc_Tax_Tp
      break
    end-evaluate
    let $Local_Save = $Locality
    let $Loc_Mag_Cd = $Loc_Tax_Cd
    do Write-S-Record-from-Local
  else
     if $Locality = '99990'
       do Update-Temp-Table
     end-if
     move 0 to #Local_Wages
     move 0 to #Local_Tax
  end-if
  move ' ' to $Loc_Tax_Tp
  move ' ' to $Loc_Mag_Cd
end-procedure                      !Report-Local-Amounts


Begin-Procedure After-EmplID

  !Unique State Requirements - Different from MMREF
  !  RS record requires specific changes
  !    Be advised - TAXMMREF contains some State Specific
  !        RS record code also.

  Move 0 to $Zero_fill 099999999999999

  evaluate $E.W2_State
    when = 'AL'
      do RS-CommonClear
      move 0 to $1099-Income 09999999999
      let $SupplData1a = '                                            '
      let $SupplData1 = $1099-Income || $SupplData1a
      move #Fed_Tax  to $OtherStateData 0999999999
      move '  '      to $StateNumCdA
      move '      '  to $Zero_fill
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'AR'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move $A.FEDERAL_EIN  to $OtherStateData  099999999
      move '      '  to $StateEIN
      break
    when = 'AZ'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      do Clear-Space-Fields
      break
    when = 'CO'
      move &TX.Balance_Year to $ReportingPeriod
      let $ReportingPeriod = '12' || $ReportingPeriod
      move '      '  to $Zero_fill
      move '      '  to $StateEIN
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'CT'
      move '      '  to $Zero_fill
      break
    when = 'DC'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'DE'
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      break
    when = 'GA'
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      move $StateEmplIN to $StateControlNumber
      move $StateEmplIN to $SupplData1 ~~~~~~~xx
      move '      '  to $StateEIN
      break
    when = 'ID'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'IL'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'IN'
      if $LocalReportable <> 'Y'
        do Indiana-Specific
      end-if
      break
    when = 'KS'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'KY'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move #KY_KREDA to $KY_KREDA               09999999999
      move #KY_KJDA  to $KY_KJDA                09999999999
      move #KY_KIRA  to $KY_KIRA                09999999999
      move #KY_KIDA  to $KY_KIDA                09999999999
      let $SupplData1 = $KY_KREDA || $KY_KJDA || $KY_KIRA || $KY_KIDA
      let  #TotalKYTax = #KY_KREDA + #KY_KJDA + #KY_KIRA + #KY_KIDA
      let #State_Tax = #State_Tax - #TotalKYTax
      break
    when = 'LA'
      move '      '  to $Zero_fill
      move '  '      to $StateNumCd
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'MA'
      move '  '      to $StateNumCdA
      move '      '  to $Zero_fill
      move '      '  to $StateEIN
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move #FRMALOC-Retire-Fund to $FRMALOC-Retire-Fund  09999999999
      move #Fed_Wages to $MA-Fed-Wages  09999999999
      let #TempHold = #SS_Tax + #Med_Tax
      move #TempHold to $TempHold       09999999999
      let $Suppldata1 = $TempHold || $FRMALOC-Retire-Fund || $MA-Fed-Wages
      add #TempHold  to #SS-Med-T
      add #FRMALOC-Retire-Fund to #FRMALOC-Retire-Fund-T
      add #Fed_Wages           to #MA-Fed-Wages-T
      break
    when = 'MD'
      move '  '      to $StateNumCdA
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      do MD-Specific
      add #Local_Tax to #State_Tax
      move #Fed_Wages  to $Fed_Wages            09999999999
      move #Fed_Tax    to $Fed_Tax              09999999999
      move #Allowances to $Allowances           09
      let $SupplData1 = $StateAccountNumber || $Fed_Wages || $Fed_Tax || $Allowances
      move ' ' to $StateEin
      break
    when = 'ME'
      move &TX.Balance_Year to $ReportingPeriod
      let $ReportingPeriod = '12' || $ReportingPeriod
      let $SupplData1 = $StateAccountNumber
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      move '      '  to $Zero_fill
      break
    when = 'MI'
      move '      '  to $Zero_fill
      move '  '      to $StateNumCd
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'MN'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'MO'
      move '      '  to $Zero_fill
      move '  '      to $StateNumCd
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'MS'
      move 0 to $1099-Income 09999999999
      let $SupplData1a = '                                            '
      move &TX.Balance_Year to  $SupplData1b
      let $SupplData1c = $SupplData1b || '                '
      let $SupplData1 = $1099-Income || $SupplData1a || $SupplData1c
      move #Fed_Tax  to $OtherStateData 0999999999
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'MT'
      move &TX.Balance_Year to $ReportingPeriod
      let $ReportingPeriod = '12' || $ReportingPeriod
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'NC'
      do RS-CommonClear
      do RW-CommonClear
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'ND'
      do Write-W-Record    ! North Dakota requires 'RW' record
                           ! but wants ee data cleared on 'RS'
                           ! record - write 'RW' before clear
      do RS-CommonClear
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      move '      '  to $StateEIN
      break
    when = 'NE'
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'NJ'
      move '      '  to $Zero_fill
      move '  '      to $StateNumCd
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      do NJ-Specific
      move #Local_Tax        to $NJPA           0999999999
      move #OtherD           to $NJD            09999
      move #OtherE           to $DIW            09999
      let $Tax_Type_Cd = substr($NJPA,8,1)
      let $Local_Wages = substr($NJPA,9,2) || '         '
      if &E.Pension_Plan = 'Y'
        move 'P' to $PPI
      else
        move ' ' to $PPI
      end-if
      let #DCA = #401K
      if #DCA > 0
        move 'D' to $DCI
      else
        move ' ' to $DCI
      end-if
      move #DCA              to $DCA            099999999
      let $SupplData1 = $DPTC || $PDPN || $NJD || $DIW || $PPI || $DCI || $DCA
      break
    when = 'NM'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'OH'
      if $LocalReportable <> 'Y'
        do Ohio-Specific
      end-if
      break
    when = 'PA'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move ' '       to $StateEIN
      move ' '       to $StateNumCd
      break
    when = 'RI'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'SC'
      move '000000'   to $ReportingPeriod
      move '00000000' to $EmployDate
      move '00000000' to $SepDate
      move '0'        to $Tax_Type_Cd
      move '    '     to $Local_Wages
      move '    '     to $Local_Taxes
      move '0000000'  to $StateControlNumber
      let $SupplData1 = rpad($SupplData1,75,'0')
      let $SupplData2 = rpad($SupplData2,75,'0')
      break
    when = 'UT'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'VA'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'WI'
      let $SupplData1 = rpad($SupplData1,75,'0')
      let $SupplData2 = rpad($SupplData2,75,'0')
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'WV'
      if rtrim($E.Address2, ' ') = ''
          move $E.Address1 to $E.Address2
          move ' ' to $E.Address1
      end-if
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when-other
      break
  end-evaluate

  if $State-Reportable = 'Y'
    evaluate $E.W2_State
      when = 'AL'
      when = 'AR'
      when = 'CO'
      when = 'CT'
      when = 'DC'
      when = 'DE'
      when = 'IL'
      when = 'IN'
      when = 'LA'
      when = 'MA'
      when = 'MD'
      when = 'ME'
      when = 'ND'
      when = 'PA'
      when = 'RI'
      when = 'VA'
        if $LocalReportable <> 'Y'
          do Write-S-Record
        end-if
        break
      when = 'NE'
      when = 'OH'
      when = 'NC'
      when = 'SC'
      when = 'UT'
      when = 'WI'
        if $LocalReportable <> 'Y'
          do Write-W-Record
          do Write-S-Record
        end-if
        break
      when-other
        do Write-W-Record
        do Write-O-Record
        do Write-S-Record
        break
    end-evaluate
  end-if

  do Zero-W-Record
  do Zero-O-Record
  do Zero-S-Record
  do Clear-Space-Fields

  Let $LocalReportable = 'N'

End-Procedure

Begin-Procedure Clear-Space-Fields

!  These fields are space filled  'RS' Record
  move '  '          to $WorkWeeks
  move '        '    to $EmployDate
  move '        '    to $SepDate
  move '  '          to $OtherStateData
  move ''            to $SupplData1
  move ''            to $SupplData2
  move '      '      to $ReportingPeriod
  move ' '           to $Tax_Type_CD
  move '       '     to $StateControlNumber

End-Procedure

Begin-Procedure RW-CommonClear

      move '     '         to $City
      move '00000000000'   to #SS_Wages
      move '00000000000'   to #SS_Tax
      move '00000000000'   to #Med_Wages
      move '00000000000'   to #Med_Tax
      move '00000000000'   to #SS_Tips
      move '00000000000'   to #Adv_EIC
      move '00000000000'   to #Dep_Care
      move '00000000000'   to #401K
      move '00000000000'   to #403B
      move '00000000000'   to #408K6
      move '00000000000'   to #457B
      move '00000000000'   to #501C18
      move '00000000000'   to #Non_Qual_457_Y
      move '00000000000'   to #Non_Qual_457_N
      move '00000000000'   to #Group_Term_ER_Cost
      move '00000000000'   to #Nonstatutory_Stock_Options
      move '00000000000'   to #HSA_Employer_Contrib
      move ' '   to $StatutoryEe
      move '0'   to #RetirePlan
      move '0'   to #Third_Party_Sick_Ind

End-Procedure

Begin-Procedure RS-CommonClear

      move '     '   to $Suffix
      move '     '   to $E.Address1
      move '     '   to $E.Address2
      move '     '   to $E.City
      move '     '   to $US_State
      move '     '   to $US_Zip
      move '     '   to $US_ZipXtnsn
      move '     '   to $Frgn_State
      move '     '   to $Frgn_Zip
      move '     '   to $Country-2Char
      move ' '       to $Tax_Type_Cd
      move 0         to $Zero_fill 099999999999999
End-Procedure

Begin-Procedure Indiana-Specific

  move #Local_Wages      to $Local_Wages    09999999999
  move #Local_Tax        to $Local_Taxes    09999999999
  move $StateEmplIN      to $StateControlNumber
  move $Loc_Mag_CD       to $OtherStateData x~
  let $OtherStateData = lpad($OtherStateData,10, ' ')
  move $Loc_Mag_CD       to $Tax_Type_Cd ~x
  move '      '          to $Zero_fill
  move '      '          to $StateEIN
End-Procedure

Begin-Procedure MD-Specific

  move 0 to #Allowances
begin-SELECT
MD.FWT_ALLOWANCES
  move &MD.FWT_ALLOWANCES to #Allowances
FROM  PS_FED_TAX_DATA MD
WHERE MD.COMPANY = $Company
  AND MD.EMPLID  = $E.Emplid
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_FED_TAX_DATA
       WHERE  COMPANY = $Company
         AND  EMPLID  = $E.Emplid
         AND  EFFDT  <= $AsOfDate)
end-SELECT

End-Procedure

Begin-Procedure NJ-Specific

  move 0 to   #OtherD
  move 0 to   #OtherE
  move ' '               to $DPTC
  move '              '  to $PDPN
begin-SELECT
NJ.VDI_PLAN
NJ.VDI_PLAN_NBR

  if &NJ.VDI_PLAN = 'Y'
    move 'P' to $DPTC
    let  $PDPN = rpad(rtrim(&NJ.VDI_PLAN_NBR, ' '),14,' ')
  end-if

FROM  PS_CO_STATETAX_TBL NJ
WHERE NJ.COMPANY = $Company
  AND NJ.STATE   = $State
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $Company
         AND  STATE   = $State
         AND  EFFDT  <= $AsOfDate)
end-SELECT

begin-SELECT
NG.BOX
NG.W2_AMOUNT
  let #Amount = &NG.W2_Amount * 100

  let $NG.Box = RTRIM(&NG.Box,' ')
  evaluate $NG.Box
      when = $YE_OtherD
        add  #Amount to #OtherD
        break
      when = $YE_OtherE
        add  #Amount to #OtherE
        break
  end-evaluate

FROM  PS_YE_AMOUNTS NG
WHERE NG.COMPANY         = $E.Company
  AND NG.CALENDAR_YEAR   = &TX.Balance_Year
  AND NG.EMPLID          = $E.Emplid
  AND NG.TAXFORM_ID      = $E.TaxForm_ID
  AND NG.SEQUENCE_NUMBER = #E.Sequence_Number
  AND NG.BOX    IN ('14D','14E')
end-SELECT
End-Procedure

Begin-Procedure Ohio-Specific

  move '      '          to $Zero_fill
  move #Fed_Wages        to $OtherStateData 0999999999
  move $Loc_Mag_CD       to $StateControlNumber
  let $StateControlNumber = lpad($StateControlNumber,7, ' ')
  let $Local_Tax_Cd = RTRIM($Loc_Tax_Cd,' ')
  if $Local_Tax_Cd <> ''
    move #Local_Wages      to $Local_Wages    09999999999
    move #Local_Tax        to $Local_Taxes    09999999999
  else
    move 0                 to $Local_Wages    09999999999
    move 0                 to $Local_Taxes    09999999999
    move 0                 to #Local_Wages
    move 0                 to #Local_Tax
  end-if
  if #Local_Wages = 0  and #Local_Tax = 0
    move 'F'               to $Tax_Type_Cd
  else
    move 'E'               to $Tax_Type_Cd
  end-if
End-Procedure


Begin-Procedure After-State

!Unique State Requirements - Different from MMREF
!   State does not require RF record


  evaluate $E.W2_State
    when = 'AL'
    when = 'AR'
    when = 'CO'
    when = 'DC'
    when = 'IL'
    when = 'LA'
    when = 'ME'
    when = 'NC'
    when = 'WV'
      break
    when-other
      do Write-F-Record
      break
  end-evaluate
  do State-End-Totals
  do Process-Totals
  do Zero-F-Record

End-Procedure


Begin-Procedure Write-E-Record

Begin-SELECT
CP.COMMON_PAY_ID

FROM PS_COMPANY_TBL CP
WHERE CP.COMPANY = &E.Company
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = &E.Company
         AND  EFFDT  <= $EffDate)
end-SELECT
  move $A.Federal_EIN  to $FedEIN   099999999
  If #A.Other_EIN <> 0
    move #A.Other_EIN  to $OtherEIN 099999999
  else
    move ' '           to $OtherEIN
  End-if
  move $A.Descr        to $ErName
  if $E.W2_State = 'AL'
    if $A.Address1  > ''
       move $A.Address1     to $ErAddress2
       move '         '     to $ErAddress1
    end-if
  else
    move $A.Address1     to $ErAddress1
    move $A.Address2     to $ErAddress2
  end-if
  move $A.City         to $ErCity
  move $A.State        to $StateCd
  move $A.Zip          to $Zip
  move $A.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  move &TX.Employment_Type to $Empl_Type
  let $Common_Pay_ID = RTRIM(&CP.Common_Pay_ID,' ')
!  If $Common_Pay_ID > ''
!    move '2' to $AgentID
!  else
    move '   ' to $AgentID
!  end-if

  uppercase $ErName
  uppercase $ErAddress1
  uppercase $ErAddress2
  uppercase $ErCity

  do  Validate-SWT-ID

  If $ForeignAddrInd = 'X'
     Let $ErUS_Zip      = ' '
     Let $ErUS_ZipXtnsn = ' '
     Let $ErUS_State    = ' '
     Let $ErFrgn_Zip    = $Zip
     Let $ErFrgn_State  = $StateName
  else
     Let $ErUS_Zip      = $Zip
     Let $ErUS_ZipXtnsn = $ZipExtsn
     Let $ErUS_State    = $StateCd
     Let $ErFrgn_Zip    = ' '
     Let $ErFrgn_State  = ' '
     Let $ErCountry-2Char   = ' '
  End-if

  !Unique State Requirements - Different from MMREF
  !  State has specific requirements for RE record

  evaluate $E.W2_State
    when = 'AL'
      do RE-GroupClear
      break
    when = 'GA'
      let $StateEmplIN = $StateEIN
      move $StateEmplIN to $StateEIN
      break
    when = 'IN'
      let $StateEmplIN = $StateEIN
      move $StateEmplIN to $StateEIN
      break
    when = 'NC'
      do RE-GroupClear
      break
    when = 'PA'
      do RE-GroupClear
      move ' ' to $OtherEIN
      move $ErAddress1 to $ErAddress2
      move ' ' to $ErAddress1
      let $RESp = $StateEmplIN
      break
  end-evaluate

  evaluate $E.W2_State
    when = 'DC'
      break
    when = 'AL'
      do Write-RE-Record-for-AL
    when-other
      do Write-RE-Record
      break
  end-evaluate
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  move 'Y' to $E-Written
End-Procedure

begin-Procedure RE-GroupClear

      move '    '    to $A.Busi_Term_Ind
      move '     '   to $ErFrgn_State
      move '     '   to $ErFrgn_Zip
      move '     '   to $ErCountry-2Char
      move '     '   to $Empl_Type
      move '     '   to $Tax_Jurisdiction
      move '     '   to $Thrd_Pty_Sick
end-procedure

begin-Procedure Check-Disk

if $FileType = 'T'
  if &E.W2_State = 'GA'
     close 10
       display &E.W2_State     noline
       display ' does not accept tape '  noline
       display 'submission' noline
       display ' must be on cartridge or diskette.'
       display ' '
       stop
   end-if
end-if

if $FileType = 'D'

  if &E.W2_State = 'DE'
     if #FileExtension > 1
       close 10
       display ' '
       display &E.W2_State           noline
       display ' does not accept multiple-volume diskettes.'
       display 'Submission for company ' noline
       display $Company                  noline
       display ' must be on tape.'
       display ' '
       stop
     end-if
  end-if
end-if

if $FileType = 'D'
   if &E.W2_State = 'PA'
     display ' '
     display &E.W2_State           noline
     display ' does not accept diskettes.'
     display 'Submission for company ' noline
     display $Company                  noline
     display ' will be changed to tape.'
     display ' '
     move 'T' to $FileType
  end-if
end-if

End-Procedure

Begin-Procedure Write-W-Record

  do Write-RW-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  add 1 to #Count-T
End-Procedure


Begin-Procedure Write-O-Record
  If $WriteORec ='Y'

    do Write-RO-Record
    do Check-Disk

    add 1 to #RecordCount
    add 1 to #Tot_Record_Count
    add 1 to #Count-U
  End-if
End-Procedure

Begin-procedure Write-S-Record-from-Local

  do Populate-EE-Address

  Evaluate $E.W2_State
    when = 'IN'
      do Indiana-Specific
      do Write-S-Record
      break
    when = 'NC'
      if $FirstTime = 'Y'
        do Write-W-Record
        let $FirstTime = 'N'
      end-if
      do Write-S-Record
      move 0 to #Fed_Wages
      move 0 to #Fed_Tax
      break
    when = 'OH'
      do Ohio-Specific
      if $FirstTime = 'Y'
        do Write-W-Record
        let $FirstTime = 'N'
      end-if
      do Write-S-Record
      move 0 to #Fed_Wages
      break
    when-other
      break
  end-evaluate
  move 0 to #State_Wages     !Only Report once
  move 0 to #State_Tax
  move 0   to #Local_Wages
  move 0   to #Local_Tax
  move 0 to #State_EIC
end-procedure

begin-procedure Write-S-Record

  do Write-RS-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

end-procedure


Begin-Procedure Write-T-Record
  move #Count-T           to $Count-T 0999999                     !Count

! Unique state requirements
!    State does not require RT Record

  Evaluate $E.W2_State
    when = 'AR'
    when = 'IL'
    when = 'LA'
    when = 'NC'
    when = 'WI'
    when = 'WV'
      break
    when = 'PA'
      do Blank-T-Record
      move #Count-S        to $S-Count-F       0000009
      move #State_Wages-T  to $State_Wages-T   099999999999999
      move #State_Tax-T    to $State_Tax-T     099999999999999
      let $RTSp = $S-Count-F || $State_Wages-T  || $State_Tax-T
      do Write-RT-Rec
      do Check-Disk
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
    when-other
      do Write-RT-Record
      do Check-Disk
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
  end-evaluate

  add #Count-T  to    #Count-F !Company count

End-Procedure


Begin-Procedure Write-U-Record

  do Write-RU-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  do Zero-U-Record
End-Procedure


Begin-Procedure Write-F-Record

  Evaluate $E.W2_State
    when = 'IN'
      move #Count-F to $Count-F   099999999
      break
    when = 'CT'
      move #Count-F to $Count-F   099999999
      move #State_Wages-F  to $State_Wages-F   0999999999999999
      move #State_Tax-F    to $State_Tax-F     0999999999999999
      let $F-Data = $State_Wages-F || $State_Tax-F
      break
    when = 'PA'
      move #S-Count-F      to $S-Count-F       0999999
      move #State_Wages-F  to $State_Wages-F   099999999999999
      move #State_Tax-F    to $State_Tax-F     099999999999999
      let $RFSp = $S-Count-F || $State_Wages-F  || $State_Tax-F
      move '      '        to $Count-F
      break
    when-other
      move #Count-F to $Count-F   099999999
      break
  end-evaluate

  Evaluate $E.W2_State
    when = 'CT'
      do Write-RF-Record-for-CT
      do Check-Disk
      break
    when-other
      do Write-RF-Record
      do Check-Disk
      break
  end-evaluate

  move 0         to #Count-S
  do Zero-F-Record

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

End-Procedure

Begin-Procedure Process-Totals

  do Format-Number (#Tot_Record_Count, $out, 'B99,999')
  print 'Total File Record Count: '(+3,8)
  print $out (,33)
  move 0 to #Tot_Record_Count

End-Procedure


begin-procedure Get-Locality-Mag-CD
  do Check-Temp-Table
  if $Code_Found = 'N'

    do Check-Master-Table
    move &L2.W2_Mag_Code   to $Loc_Tax_Cd
  else
    move &LL.W2_Mag_Code  to $Loc_Tax_Cd
  end-if
end-procedure

begin-procedure Check-Temp-Table
  let $Code_Found = 'N'
begin-SELECT
LL.W2_MAG_CODE
LL.LOCALITY
  let $Code_Found = 'Y'
FROM  PS_R_TAX960XX  LL
WHERE LL.STATE    = $State
  AND LL.LOCALITY = $Locality
end-select
end-procedure

begin-procedure  Check-Master-Table

  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_MAG_CODE

FROM  PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

begin-SELECT
L.LOCALITY_NAME
L.LOCALITY

  do Build-Temp-Table

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE    = $State
  AND L.LOCALITY = $Locality
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure  Build-Temp-Table
begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_TAX960XX (STATE,
                             LOCALITY,
                             W2_MAG_CODE,
                             LOCALITY_NAME,
                             WAGES,
                             TAXES)
          VALUES ($State,
                  $Locality,
                  &L2.W2_Mag_Code,
                  &L.Locality_Name,
                  0,0)
end-SQL
end-procedure

begin-procedure Insert-Error
  display 'Error on insert to temporary local table '

  Evaluate $E.W2_State
    when = 'OH'
      display 'Ohio School District requires Mag Media code, it may be blank'
      break
  end-evaluate
end-procedure

begin-procedure Delete-Temp-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX960XX
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure  Update-Temp-Table
begin-SQL on-error=Update-Error
  UPDATE  PS_R_TAX960XX
  SET     WAGES = WAGES + #Local_Wages, TAXES = TAXES + #Local_Tax
  WHERE   STATE    = $State     AND
          LOCALITY = $Locality

end-SQL
end-procedure

begin-procedure Update-Error
  display 'Error on update of temporary local table '
end-procedure

begin-procedure  Print-Temp-Table
  let #LnSp = 2
begin-SELECT
LCL.LOCALITY_NAME
LCL.WAGES
LCL.TAXES
LCL.W2_MAG_CODE

  let $LCL.W2_Mag_Code = ltrim (&LCL.W2_Mag_Code,' ')
  if &LCL.W2_Mag_Code <> ''

    let $Local_Desc = substr (&LCL.Locality_Name,1,18)
    print $Local_Desc (+#LnSp,74)
    let #LnSp = 1

    let #out = &LCL.Wages / 100                       !County Wages
    do Format-Number(#out, $out, 'B99,999,999.99')    !
    print $out  (,95)

    let #out = &LCL.Taxes / 100                       !County Taxes
    do Format-Number(#out, $out, 'B9,999,999.99')     !
    print $out  (,111)

  end-if

FROM PS_R_TAX960XX LCL

end-select
end-procedure

begin-procedure Foreign-Address-Test($Format,#MaxLength)
  Let $_StateName = ''

  If $_Country = 'USA'
    move ' ' to $_ForeignAddrInd
  else
    move 'X' to $_ForeignAddrInd

    If $_Country <> $priorCountry
      do Get-Country-Code
      move $_Country to $priorCountry
      move &_Descr   to $CountryName
      move &_COUNTRY_CD_1042 to $_Country-2Char
    End-if

    if $_StateCd = ''
      Show '      Note: No state code for this record.  Country - ' $_Country
    else
      do Get-State-Code
      move &_STATE.DESCR to $_StateName
      uppercase $_StateName
    End-if

    Evaluate $Format
      when = 'Format 1'
        let #Length = LENGTH(RTRIM($CountryName,' '))
        let $_City = SUBSTR(RTRIM($_City,' '),1,(#MaxLength - #Length - 4) )
        let $_City = $_City || ' ' || $_StateCd || ' ' || $CountryName
        move ' ' to $_StateCd
      when = 'Format 2'
        let $_StateCd = $_StateCd || ' ' || $CountryName
        uppercase $_StateCd
      when = 'Format 3'
        let $_StateCd = $_StateCd
        uppercase $_StateCd
    End-evaluate
  End-if
  uppercase $_City
  let $EditZip = RTRIM($_Zip, ' ')
  let #DashPosition = INSTR($EditZip,'-',1)
  if #DashPosition <> 6
    move $_Zip to $_ZipExtsn ~~~~~xxxx
  else
    move $_Zip to $_ZipExtsn ~~~~~~xxxx
  end-if
End-Procedure

Begin-Procedure Get-Country-Code
  Let $Record_found = 'N'
Begin-Select
COUNTRY_2CHAR
DESCR
  Let $Record_found = 'Y'
FROM  PS_COUNTRY_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country table.'
   Stop
 End-if

  Let $Record_found = 'N'
Begin-Select
COUNTRY_CD_1042
  Let $Record_found = 'Y'
FROM  PS_CNTRY_1042_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country 1042 table.'
   Stop
 End-if
End-Procedure

Begin-Procedure Get-State-Code
  Let $Record_found = 'N'
Begin-Select
STATE.NUMERIC_CD
STATE.DESCR
  Let $Record_found = 'Y'
FROM  PS_STATE_NAMES_TBL  STATE
WHERE STATE.COUNTRY = $Country
  AND STATE.STATE   = $StateCd
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $StateCd ', Country : ' $Country ' doesn''t exist in State table.'
   Stop
 End-if
End-Procedure


Begin-Procedure Get-ee-State-Code

  Let $Record_found = 'N'
Begin-Select
S.NUMERIC_CD
S.DESCR
  Let $Record_found = 'Y'
FROM  PS_STATE_NAMES_TBL  S
WHERE  S.STATE   = $E.W2_State
   AND S.COUNTRY = 'USA'
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $E.W2_State ', Country : ' $Country ' doesn''t exist in State table.'
   Stop
 End-if
End-Procedure

Begin-Procedure State-End-Totals

  display ''
  If $FileType = 'D'
    display 'Upon successful conclusion of this program, following diskette'
    display 'file(s) will have been created:'
    move 1 to #i
    while #i <= #FileExtension
     move #i to $i 099
     #ifdef OS400
       let $FileExtension = '(D' || $i || ')'
       let $FileID = '{IMPORTPREFIX}' || $ReportID2 || $i
     #else
       let $FileID = '{IMPORTPREFIX}' || $ReportID2 || '.' || $i
     #endif
       display $FileID
       add 1 to #i
    end-while
  else
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    let $FileID =  '{IMPORTPREFIX}' || $ReportID2 || '{IMPORTSUFFIX}'
    display $FileID            noline
    display ' contains W-2 file.'
  end-if
  display ''
  do Delete-Temp-Table

End-Procedure

begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure

begin-procedure Validate-SWT-ID

  if &E.W2_State <> 'DE'
    let $StateEIN = rtrim(&E.Employer_ID_SWT, ' ')
    if $StateEIN = ''
      do Invalid-SWT-ID
    end-if
  end-if

  Evaluate &E.W2_State
    when = 'AL'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 6)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       else
         move $SWT_ID_Numeric to $StateEIN 0000999999
       end-if
       break
    when = 'DC'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),6)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),6)
         end-if
       end-while
       do  Is-String-Numeric ($StateEIN, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       move $StateEIN to $StateEIN 00000000000099999999
       break
    when = 'DE'
       move '        '  to $StateEIN
       break
    when = 'ID'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 12)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       move $SWT_ID_Numeric  to $StateEIN  09999999999999999999
       break
    when = 'IN'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 10)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       break
    when = 'KY'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 6)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       if (length($SWT_ID_Numeric)) <> 6
         do Invalid-SWT-ID
       end-if
       move $SWT_ID_Numeric  to $StateEIN           00000000000000999999
       break
    when = 'MD'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),9)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),9)
         end-if
       end-while
       while INSTR($StateEIN,'.',1) <> 0
         let #Marks  = INSTR($StateEIN,'.',1)
         if #Marks  > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                           SUBSTR($StateEIN,(#Marks + 1),9)
         end-if
       end-while
       let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) <> 8
         do Invalid-SWT-ID
       end-if
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       move $SWT_ID_Test to $StateAccountNumber  09999999
       break
    when = 'ME'
       move &E.Employer_ID_SWT  to  $StateEIN
       if '' = rtrim($StateEIN,' ')
          do Invalid-SWT-ID
       end-if
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       let $StateAccountNumber = $StateEIN
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 10, 2)
       if rtrim($SWT_ID_Numeric,' ') = ''
         let $StateAccountNumber = rtrim($StateAccountNumber, ' ') || '00'
       end-if
       break
    when = 'MS'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),11)
         end-if
       end-while
       let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) < 9
         do Invalid-SWT-ID
       end-if
       if (length($SWT_ID_Test)) > 10
         do Invalid-SWT-ID
       end-if
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       if (length($SWT_ID_Test)) = 9
         let $SWT_ID_Test = $SWT_ID_Test || '0'
       end-if
       let $StateEIN = $SWT_ID_Test || $FedEIN
       break
    when = 'MT'
       move &E.Employer_ID_SWT to $StateEIN
       break
    when = 'NC'
       move &E.Employer_ID_SWT  to  $StateEIN
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       break
    when = 'NE'
       move &E.Employer_ID_SWT to $StateEIN
       let $StateEIN = RTRIM($StateEIN, ' ')
       do StripToDash
       break
    when = 'OH'
       let $StateEIN    = ltrim (&E.Employer_ID_SWT,' ')
       let $SWT_ID_Test  = rtrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) <> 8
         do Invalid-SWT-ID
       end-if
       let $SWT_ID_Test  = substr ($StateEIN,1,8)
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       break
    when = 'PA'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim,1,8)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       let $StateEmplIN = $StateEIN
       break
    when = 'UT'
       move &E.Employer_ID_SWT  to  $StateEIN
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $First_Char   = substr ($SWT_ID_Ltrim, 1, 1)
       uppercase $First_Char
       let #Alpha_Char   = range ($First_Char, 'A', 'Z')
       if #Alpha_Char = 0
         do Invalid-SWT-ID
       end-if
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 2, 5)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       let $SWT_ID_Space  = substr ($SWT_ID_Ltrim, 7, 1)
       if  $SWT_ID_Space <> ''
         if  $SWT_ID_Space <> ' '
           do Invalid-SWT-ID
         end-if
       end-if
       let  $StateEIN  =  substr ($SWT_ID_Ltrim, 1, 6)
       break
    when = 'VA'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $StateEIN = lpad($SWT_ID_Ltrim,20,' ')
       break
    when = 'WI'
      move &E.Employer_ID_SWT  to  $StateEIN
      let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
      let $SWT_ID_Test  = rtrim ($StateEIN, ' ')
      let $Six_Char_ID  = substr ($SWT_ID_Test, 1, 6)
      do  Is-String-Numeric ($Six_Char_ID, #Rtrn_Value)
      if #Rtrn_Value = 0
        do Invalid-SWT-ID
      else
        if $Six_Char_ID = ''
          do Invalid-SWT-ID
        else
          move $Six_Char_ID to $SWT_ID_Edited  099999
        end-if
      end-if
      break
    when = 'WV'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 12)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       if (length($SWT_ID_Numeric)) <> 12
         do Invalid-SWT-ID
       end-if
       let $StateEIN = $SWT_ID_Numeric  || '00000000'
       break
    when-other
       move &E.Employer_ID_SWT  to  $StateEIN
       break
  end-evaluate
  move $StateEIN to $RptStateEIN
end-procedure

!  Unique editing requirements for StateEIN

begin-procedure Invalid-SWT-ID
  display ''
  display 'Invalid SWT ID number -- process terminating'
  display 'For Company: ' noline
  display  $ErName
  display 'State ID number is: ' noline
  display  &E.Employer_ID_SWT noline
  display ''
  Evaluate &E.W2_State
    when = 'AL'
      display 'Alabama ID should be entered as: 999999'
      break
    when = 'DC'
      display 'District of Columbia ID must be numeric'
      break
    when = 'ID'
      display 'Idaho ID should be entered as: 999999999999'
      break
    when = 'KY'
      display 'Kentucky ID should be entered as: 999999'
      break
    when = 'MD'
      display 'Maryland ID should be entered as: 99999999 or 9999999-9'
      break
    when = 'MS'
      display 'Mississippi ID should be entered as: 9999999999'
      break
    when = 'NC'
      display 'North Carolina ID should be entered as: 999999999'
      break
    when = 'OH'
      display 'Ohio ID should be entered as: 99999999'
      break
    when = 'PA'
      display 'Pennsylvania ID should be entered as: 99999999'
      break
    when = 'UT'
      display 'Utah Account number should be entered as: X99999'
      break
    when = 'WI'
      display 'Wisconsin ID should be entered as: 999999 or 999999-9'
      break
    when = 'WV'
      display 'West Virginia ID should be entered as: 999999999999'
      break
    when-other
      break
  end-evaluate
    display ''
    stop
end-procedure

begin-procedure StripToDash

  let #DashPosition = INSTR($StateEIN,'-',1)
  if #DashPosition <> 2 and #DashPosition <> 3
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
  else
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '0123456789')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '-')
  end-if
  let $State_ID_Numeric  = $State_ID_Ltrim
  let #StateEIN = $State_ID_Numeric
  move  #StateEIN         to  $StateEIN    09999999999999999999
  do  Is-String-Numeric ($State_ID_Numeric, #Return_Value)
  if #Return_Value = 0
    do Invalid-SWT-ID
  end-if

end-procedure

begin-procedure Read-States

move 'AND E.W2_STATE IN (''' to $E.SelectedStates
move ' ' to $SelectedState

begin-SELECT
F.STATE

  move &F.STATE    to $SelectedState

  let $E.SelectedStates = $E.SelectedStates ||$SelectedState || ''','''
  if rtrim($SelectedState, ' ') <> ''
    move 'Y' to $State-Selected
  end-if

FROM PS_RC_TAX960ST F
WHERE F.OPRID               = $Prcs_OprID
  AND F.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
end-SELECT

  if $State-Selected <> 'Y'
    Display 'States must be selected on the Run Control Page.  Processing stopped.'
    Stop
  End-if

    let $E.SelectedStates = SUBSTR($E.SelectedStates,1,LENGTH($E.SelectedStates) - 2)
    let $E.SelectedStates = $E.SelectedStates || ')'

end-procedure

#Include 'geteandg.sqc'  !Get-EandG procedure                           !HP00001
#Include 'getfed.sqc'    !Get-Federalproduct procedure                  !FED0001
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'stw2smry.sqc'  !report page heading and column headings
#Include 'taxmmref.sqc'  !Format MMREF for Diskette or Tape
#Include 'w2.sqc'        !Assign-Year-End-Variables
#Include 'w2box.sqc'     !Evaluate-Box and Evaluate-State-Box
