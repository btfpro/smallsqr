!***********************************************************************
! Report Name: GPESBNK3.SQR  Monthly Bank Transfers Report             *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!                     Confidentiality Information:                     
!                                                                      
!   This module contains confidential and proprietary information      
!   of Oracle; it is not to be copied, reproduced, or transmitted      
!   in any form, by any means, in whole or in part, nor is it to       
!   be used for any purpose other than that for which it is            
!   expressly provided under the applicable license agreement.         
!                                                                      
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    
!                                                                      
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/09/13:01:51:33                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      
!----------------------------------------------------------------------


#include 'setenv.sqc'        ! SET ENVIRONMENT
begin-setup
#define colr 160
#Include 'ptpsl177.sqc'   !Printer and page-size initialization
end-setup


BEGIN-REPORT
  DO INIT-DATETIME
  DO INIT-NUMBER
  DO GET-CURRENT-DATETIME
  do Init-Report
  IF $PRCS_OPRID=''
     GOTO LAST2
  END-IF

  DO PROCESS-MAIN
  DO RESET
  DO STDAPI-TERM
last2:
END-REPORT


BEGIN-HEADING 10
#debug do Fin-Debug-Msg('BEGIN-HEADING')

#include 'stdhdg01.sqc'
  PRINT $PAY_ENTITY                  (+1,1)
  let $Out=rtrim($Pay-Entity-Print, ' ')
  PRINT $Out                         (0,+1)
  PRINT '-'                          (0,+2)
  DO GET-PAY-ENTITY-DATA
  PRINT $PAY-ENTITY-NAME             (0,+2)

  PRINT $SRC_BANK                    (+1,1)
  let $Out=rtrim($SRC_BANK_ID, ' ')
  PRINT $Out                         (0,+1)
  PRINT '-'                          (0,+2)
  DO GET-SOURCE-BANK-DATA
  PRINT $Source_Bank_NAME            (0,+2)

  PRINT $ACCOUNT_HDR                 (+1,1)
  PRINT $LINE1                       (0,+1)


  PRINT $EMPLOYEE                    (+3,1,11)
  PRINT $NATIONAL_ID                 (0,+3,11)
  PRINT $EMPL_NAME                   (0,+3,30)
  PRINT $DEPARTMENT                  (0,+3,22)
  PRINT $NAME1                       (0,+3,30)
  PRINT $ACCOUNT_DTL                 (0,+3,23)
  PRINT $AMOUNT                      (0,+3,12)
  PRINT $CURRENCY                    (0,+3,3)
END-HEADING


BEGIN-PROCEDURE INIT-REPORT
#debug do Fin-Debug-Msg('Init-Report')

  MOVE 'GPESBNK3' TO $REPORTID
  DO STDAPI-INIT
  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if
!**********  do Security-Param

  IF $PRCS_PROCESS_INSTANCE = ''
    !No Prompt
  ELSE
   DO SELECT-PARAMETERS
   ! do begin-of-month
   ! DO END-OF-MONTH
  END-IF
  DO INIT_PRINTER
  #Debugd show 'Language CD: ' $PRCS_LANGUAGE_CD
  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation ($ReportID, $language_cd)

  do Get_Field_information ('GPESBNK3','REPORT_TITLE',$REPORTTITLE,#DW)
  do Get_Field_information ('GPESBNK3','PAY_ENTITY',$PAY_ENTITY,#DW)
  do Get_Field_information ('GPESBNK3','SRC_BANK',$SRC_BANK,#DW)
  do Get_Field_information ('GPESBNK3', 'ACCOUNT_HDR',$ACCOUNT_HDR,#DW)
  do Get_Field_information ('GPESBNK3', 'PAY_DT',$PAY-DT,#DW)

  do Get_Field_information ('GPESBNK3', 'EMPLOYEE',$EMPLOYEE,#DW)
  do Get_Field_information ('GPESBNK3', 'NATIONAL_ID',$NATIONAL_ID,#DW)
  do Get_Field_information ('GPESBNK3', 'EMPL_NAME',$EMPL_NAME,#DW)
  do Get_Field_information ('GPESBNK3', 'DEPARTMENT', $DEPARTMENT,#DW)
  do Get_Field_information ('GPESBNK3', 'NAME1', $NAME1,#DW)
  do Get_Field_information ('GPESBNK3', 'ACCOUNT_DTL',$ACCOUNT_DTL,#DW)
  do Get_Field_information ('GPESBNK3', 'AMOUNT', $AMOUNT,#DW)
  do Get_Field_information ('GPESBNK3', 'CURRENCY', $CURRENCY,#DW)
  
  let #line=1

  LAST1:

END-PROCEDURE INIT-REPORT


!************************************************************************************
BEGIN-PROCEDURE SELECT-PARAMETERS
!************************************************************************************
#debug do Fin-Debug-Msg('Select-Parameters')

#debugd show 'Operator Id:     ' $prcs_oprid
#debugd show 'Run Control Id:  ' $prcs_run_cntl_id

let $sql-statement = 'GPESBNK3.SQR,Select-Parameters,Select,PS_GPES_RC_BNK'
BEGIN-SELECT on-error=SQL-Error
GPES_RC_BNK.PAY_BEGIN_DT
   let $PAY-BEGIN-DT-RNCTL = rtrim(&GPES_RC_BNK.PAY_BEGIN_DT, ' ')

GPES_RC_BNK.PAY_END_DT
   let $PAY-END-DT-RNCTL  = rtrim(&GPES_RC_BNK.PAY_END_DT, ' ')
   if $PAY-END-DT-RNCTL = ''
     let $end-mnd-dtu = '3000-12-01'
     do Convert-From-DTU-Date($end-mnd-dtu,$PAY-END-DT-RNCTL)
     do Format-DateTime($PAY-END-DT-RNCTL,$BEGIN-MND-CMP,{DEFCMP},'','')
   End-If

GPES_RC_BNK.COUNTRY
GPES_RC_BNK.PAY_ENTITY
   MOVE &GPES_RC_BNK.PAY_ENTITY TO $PAY-ENTITY-RNCTL

 !** IF NO PAY ENTITY PROVIDED, ALL PAY ENTITIES WILL BE RETRIEVED
   IF rtrim($PAY-ENTITY-RNCTL, ' ') = ''
     let $PAY-ENTITY-RNCTL = '%'
   END-IF
 !** IF NO PAY ENTITY PROVIDED, ALL PAY ENTITIES WILL BE RETRIEVED

FROM PS_GPES_RC_BNK GPES_RC_BNK

WHERE GPES_RC_BNK.OPRID = $PRCS_OPRID
 AND  GPES_RC_BNK.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
END-SELECT
END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE PROCESS-MAIN
!************************************************************************************
#debug do Fin-Debug-Msg('PROCESS-MAIN')

#debugd show 'Pay Begin Date: ' $PAY-BEGIN-DT-RNCTL
#debugd show 'Pay End Date:   ' $PAY-END-DT-RNCTL
#debugd show 'Pay entity:     ' $PAY-ENTITY-RNCTL

#define PMT_STATUS  'T'    !'F'inalized / 'P'repared / 'T'ransferred

let $First-Time='Y'

let $sql-statement = 'GPESBNK3.SQR,Process-Main,Select,PS_GP_PAYMENT'
BEGIN-SELECT on-error=SQL-Error
BNK.PAY_ENTITY             ()  ON-BREAK LEVEL=1 BEFORE=PENT-Bef AFTER=PENT-Aft SAVE=$Pay-Entity-Break PRINT=NEVER
CAL.PYMT_DT                ()  ON-BREAK LEVEL=2 BEFORE=PDT-Bef                 SAVE=$Pay-Date-Break   PRINT=NEVER
BNK.EMPLID
BNK.EMPL_RCD
CAL.RUN_TYPE
BNK.INSTANCE
BNK.PIN_NUM 
BNK.RECIPIENT_TAG

  let $Pay-Entity-Print = &BNK.PAY_ENTITY
  let $Pay-Dt-Print = &CAL.PYMT_DT

A.EMPLID &A.EMPLID
  let $EMPLID = rtrim(&A.EMPLID, ' ')
  PRINT $EMPLID            (+1,1,11)
  DO  Get-National-Id-Data
  PRINT $NID               (0,+3,11)
  DO  Get-Employee-Name
  PRINT $NAME              (0,+3,30)

BNK.SRC_BANK_ID  &BNK.SRC_BANK_ID
  let $SRC_BANK_ID = rtrim(&BNK.SRC_BANK_ID, ' ')

A.BUSINESS_UNIT &A.BUSINESS_UNIT
  LET $BU = rtrim(&A.BUSINESS_UNIT, ' ')

A.DEPTID  &A.DEPTID
  LET $DEPTID = rtrim(&A.DEPTID, ' ')
  DO GET-DEPARTMENT-NAME
  PRINT $DEPTNAME           (0,+3,22)

BNK.PMT_TYPE  &BNK.PMT_TYPE
BNK.CAL_RUN_ID  &BNK.CAL_RUN_ID
  Let $PMT_TYPE = rtrim(&BNK.PMT_TYPE, ' ')
  let $CAL_RUN_ID = rtrim(&BNK.CAL_RUN_ID, ' ')

  if $PMT_TYPE <> '01'
    Do Get-Recipient-Bank-Account
    PRINT $ACCOUNT_NAME      (0,+3,30)
    PRINT $BANK_CD_RCP       (0,+3,4)
    PRINT $BRANCH_CD_RCP     (0,+1,4)
    PRINT $CHECK_DIGIT_RCP   (0,+1,2)
    PRINT $ACCOUNT_ID_RCP    (0,+1,10)
  else
    Do Get-Bank-Account
    PRINT $ACCOUNT_NAME      (0,+3,30)
    PRINT $BANK_CD_EMPL      (0,+3,4)
    PRINT $BRANCH_CD_EMPL    (0,+1,4)
    PRINT $CHECK_DIGIT_EMPL  (0,+1,2)
    PRINT $ACCOUNT_ID_EMPL   (0,+1,10)
  end-if

BNK.GP_PMT_AMT
  PRINT &BNK.GP_PMT_AMT    (0,+3,12)        edit B,999,999.99
  let #GP-PMT-AMT-TOT = #GP-PMT-AMT-TOT + &BNK.GP_PMT_AMT

BNK.CURRENCY_CD
  let $CURRENCY = rtrim(&BNK.CURRENCY_CD ,' ')
  PRINT $CURRENCY          (0,+3,3)

FROM PS_JOB A
   , PS_GP_PAYMENT BNK
   , PS_GP_CALENDAR CAL
   , PS_FAST_SQR_SEC_VW FAST_SEC
WHERE A.EMPLID = BNK.EMPLID
  AND A.EMPL_RCD = BNK.EMPL_RCD
  AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
                  WHERE EMPLID = A.EMPLID
                   AND  EMPL_RCD = A.EMPL_RCD
                   AND  EFFDT <= CAL.PYMT_DT)
  AND A.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
                   WHERE EMPLID = A.EMPLID
                    AND  EMPL_RCD = A.EMPL_RCD
                    AND  EFFDT = A.EFFDT)
  AND BNK.PAY_ENTITY LIKE $PAY-ENTITY-RNCTL
  AND BNK.PMT_STATUS = {PMT_STATUS}
  AND BNK.CAL_ID = CAL.CAL_ID
  AND BNK.GP_PAYGROUP = CAL.GP_PAYGROUP
  AND CAL.PYMT_DT BETWEEN $PAY-BEGIN-DT-RNCTL AND $PAY-END-DT-RNCTL
  AND FAST_SEC.OPRID = $prcs_oprid
  AND BNK.EMPLID = FAST_SEC.EMPLID
  AND BNK.EMPL_RCD = FAST_SEC.EMPL_RCD
ORDER BY BNK.PAY_ENTITY, CAL.PYMT_DT, BNK.EMPLID

END-SELECT

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-National-Id-Data
!************************************************************************************
#debug do Fin-Debug-Msg('Get-National-Id-Data')

#debugd show 'Employee:  ' $EMPLID

let $sql-statement = 'GPESBNK3.SQR,Get-National-Id-Data,Select,PS_PERS_NID'
BEGIN-SELECT on-error=SQL-Error
B.NATIONAL_ID &B.NATIONAL_ID
 let $NID = rtrim(&B.NATIONAL_ID, ' ')

FROM PS_PERS_NID B
WHERE B.EMPLID = $EMPLID
 AND  PRIMARY_NID = 'Y'
END-SELECT
END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-Pay-Entity-Data
!************************************************************************************
#debug do Fin-Debug-Msg('Get-Pay-Entity-Data')

#debugd show 'Pay Entity: ' $Pay-Entity-Break

let $sql-statement = 'GPESBNK3.SQR,Get-Pay-Entity-Data,Select,PS_GP_PYENT'
BEGIN-SELECT on-error=SQL-Error
PE.DESCR     &PE.DESCR
  let $PAY-ENTITY-NAME = &PE.DESCR

FROM PS_GP_PYENT PE
WHERE PE.PAY_ENTITY = $Pay-Entity-Print
END-SELECT
END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-Source-Bank-data
!************************************************************************************
#debug do Fin-Debug-Msg('Get-Source-Bank-data')

#debugd show 'Source Bank ID: ' $SRC_BANK_ID

let $sql-statement = 'GPESBNK3.SQR,Get-Source-Bank-data,Select,PS_SRC_BANK'
BEGIN-SELECT on-error=SQL-Error
BB.DESCR
  if rtrim(&BB.DESCR ,' ') <> ''
    let $SOURCE_BANK_NAME = rtrim(&BB.DESCR ,' ')
  end-if
BB.BANK_CD
  if rtrim(&BB.BANK_CD ,' ') <> ''
    let $BANK_CD_SRC = rtrim(&BB.BANK_CD ,' ')
  end-if
BB.BRANCH_EC_CD
  if rtrim(&BB.BRANCH_EC_CD ,' ') <> ''
     let $BRANCH_CD_SRC = rtrim(&BB.BRANCH_EC_CD ,' ')
  end-if
BB.CHECK_DIGIT
  if rtrim(&BB.CHECK_DIGIT ,' ') <> ''
     let $CHECK_DIGIT_SRC = rtrim(&BB.CHECK_DIGIT ,' ')
  end-if
BB.ACCOUNT_EC_ID
  if rtrim(&BB.ACCOUNT_EC_ID ,' ') <> ''
     let $ACCOUNT_ID_SRC = rtrim(&BB.ACCOUNT_EC_ID ,' ')
  end-if
 LET $LINE1 =  $BANK_CD_SRC || ' ' || $BRANCH_CD_SRC || ' ' || $CHECK_DIGIT_SRC || ' ' || $ACCOUNT_ID_SRC


FROM PS_SRC_BANK BB
WHERE BB.SRC_BANK_ID= $SRC_BANK_ID

END-SELECT

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-Bank-Account
!************************************************************************************
#debug do Fin-Debug-Msg('Get-Bank-Account')

Let $BANK_COUNTRY_EMPL =  ''
Let $BANK_CD_EMPL      =  ''
Let $BRANCH_CD_EMPL    =  ''
Let $CHECK_DIGIT_EMPL  =  ''
Let $ACCOUNT_ID_EMPL   =  ''
Let $IBAN_EMPL         =  ''
Let $ACCOUNT_NAME      =  ''

let $sql-statement = 'GPESNK3.SQR,Get-Bank-Account,Select,PS_PYE_BANKACCT'
BEGIN-SELECT on-error=SQL-Error
C.COUNTRY_CD
C.BANK_CD
C.BRANCH_EC_CD
C.CHECK_DIGIT
C.ACCOUNT_EC_ID
C.INTL_BANK_ACCT_NBR
C.ACCOUNT_NAME

   let $BANK_COUNTRY_EMPL =  rtrim(&C.COUNTRY_CD, ' ')
   let $BANK_CD_EMPL      =  rtrim(&C.BANK_CD ,' ')
   let $BRANCH_CD_EMPL    =  rtrim(&C.BRANCH_EC_CD ,' ')
   let $CHECK_DIGIT_EMPL  =  rtrim(&C.CHECK_DIGIT ,' ')
   let $ACCOUNT_ID_EMPL   =  rtrim(&C.ACCOUNT_EC_ID ,' ')
   let $IBAN_EMPL         =  rtrim(&C.INTL_BANK_ACCT_NBR,' ')
   let $ACCOUNT_NAME      =  rtrim(&C.ACCOUNT_NAME,' ')
   
FROM PS_GP_NET_DIST_DTL B 
  , PS_PYE_BANKACCT C
WHERE B.EMPLID = &BNK.EMPLID
   AND B.EMPL_RCD = &BNK.EMPL_RCD
   AND B.RUN_TYPE = &CAL.RUN_TYPE
   AND B.EFFDT = ( SELECT MAX(EFFDT) FROM PS_GP_NET_DIST_DTL
                   WHERE EMPLID = B.EMPLID 
                    AND  RUN_TYPE = B.RUN_TYPE 
                    AND  EFFDT <= $asoftoday ) 
   AND B.INSTANCE = &BNK.INSTANCE
   AND C.EMPLID = B.EMPLID 
   AND C.ACCOUNT_ID = B.ACCOUNT_ID 
   AND C.EFF_STATUS ='A' 
END-SELECT

#debugd show 'Employee ID:            ' $emplid
#debugd show 'As of Date:             ' $asoftoday
#debugd show 'EE Bank Country:        ' $BANK_COUNTRY_EMPL
#debugd show 'EE Bank Code:           ' $BANK_CD_EMPL
#debugd show 'EE Bank Branch:         ' $BRANCH_CD_EMPL
#debugd show 'EE Account Check Digit: ' $CHECK_DIGIT_EMPL
#debugd show 'EE Account ID:          ' $ACCOUNT_ID_EMPL
#debugd show 'EE IBAN:                ' $IBAN_EMPL
#debugd show 'Account Name:           ' $ACCOUNT_NAME

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-Recipient-Bank-Account
!************************************************************************************
#debug do Fin-Debug-Msg('Get-Recipient-Bank-Account')

Let $BANK_COUNTRY_RCP =  ''
Let $BANK_CD_RCP      =  ''
Let $BRANCH_CD_RCP    =  ''
Let $CHECK_DIGIT_RCP  =  ''
Let $ACCOUNT_ID_RCP   =  ''
Let $IBAN_RCP         =  ''
Let $ACCOUNT_RCP      =  ''

let $sql-statement = 'GPESNK3.SQR,Get-Recipient-Bank-Account,Select,PS_GP_RCP_PYE_DTL'
BEGIN-SELECT on-error=SQL-Error
RCP.COUNTRY_CD
RCP.BANK_CD
RCP.BRANCH_EC_CD
RCP.CHECK_DIGIT
RCP.ACCOUNT_EC_ID
RCP.INTL_BANK_ACCT_NBR
RCP.ACCOUNT_NAME

   let $BANK_COUNTRY_RCP =  rtrim(&RCP.COUNTRY_CD, ' ')
   let $BANK_CD_RCP      =  rtrim(&RCP.BANK_CD ,' ')
   let $BRANCH_CD_RCP    =  rtrim(&RCP.BRANCH_EC_CD ,' ')
   let $CHECK_DIGIT_RCP  =  rtrim(&RCP.CHECK_DIGIT ,' ')
   let $ACCOUNT_ID_RCP   =  rtrim(&RCP.ACCOUNT_EC_ID ,' ')
   let $IBAN_RCP         =  rtrim(&RCP.INTL_BANK_ACCT_NBR,' ')
   let $ACCOUNT_NAME     =  rtrim(&RCP.ACCOUNT_NAME,' ')
   
FROM PS_GP_RCP_PYE_DTL RCP

WHERE RCP.EMPLID = &BNK.EMPLID
  AND RCP.EMPL_RCD = &BNK.EMPL_RCD 
  AND RCP.PIN_NUM = &BNK.PIN_NUM 
  AND RCP.RECIPIENT_TAG = &BNK.RECIPIENT_TAG
  AND RCP.EFFDT = ( SELECT MAX(EFFDT) FROM PS_GP_RCP_PYE_DTL
                    WHERE EMPLID = RCP.EMPLID 
                     AND  EMPL_RCD = RCP.EMPL_RCD
                     AND  PIN_NUM = RCP.PIN_NUM
                     AND  RECIPIENT_TAG = RCP.RECIPIENT_TAG
                     AND  EFFDT <= $asoftoday ) 
END-SELECT

#debugd show 'Employee ID:                   ' $emplid
#debugd show 'As of Date:                    ' $asoftoday
#debugd show 'Recipient Bank Country:        ' $BANK_COUNTRY_RCP
#debugd show 'Recipient Bank Code:           ' $BANK_CD_RCP
#debugd show 'Recipient Bank Branch:         ' $BRANCH_CD_RCP
#debugd show 'Recipient Account Check Digit: ' $CHECK_DIGIT_RCP
#debugd show 'Recipient Account ID:          ' $ACCOUNT_ID_RCP
#debugd show 'Recipient IBAN:                ' $IBAN_RCP
#debugd show 'Account Name:                  ' $ACCOUNT_NAME

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE PENT-Aft
!************************************************************************************
#debug do Fin-Debug-Msg('PENT-Aft')

   do Get_Field_information ('GPESBNK3', 'PYENT_TOTALS', $PYENT_TOTALS, #DW)
   PRINT $PYENT_TOTALS               (+2,122,#DW)
   PRINT #GP-PMT-AMT-TOT             (  ,144,14) edit 999,999,999.99 BOLD
   let #GP-PMT-AMT-TOT=0

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE PENT-Bef
!************************************************************************************
#debug do Fin-Debug-Msg('PENT-Bef')

  If $First-Time <> 'Y'
    NEW-PAGE
  end-if
  let $First-Time='N'
  let #Line=1

END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE PDT-Bef
!************************************************************************************
#debug do Fin-Debug-Msg('PDT-Bef')

  PRINT $PAY-DT                      (+#Line,3)
  let #Line=3
  do Format-DateTime(&CAL.PYMT_DT, $PYMT_DT, {DEFCMP}, '', '')
  let $Out = substr($PYMT_DT, 7, 2) || '/' || substr($PYMT_DT, 5, 2) || '/' || substr($PYMT_DT, 1, 4) 
  PRINT $Out                         (0,+1)
  PRINT ' '                          (+#Line + 1,1)

END-PROCEDURE


!--------------------------------------------------------------------!
! Debug Msg                                                          !
!--------------------------------------------------------------------!
begin-procedure Fin-Debug-Msg($procedure_name)
   display ' '
   display '----------------------------------'
   display $procedure_name
   #debugt date-time () {Native-DateTime} &SysDateTime
   #debugt move &SysDateTime to $SysDateTime
   #debugt show 'TIMING, ' $procedure_name ', ' $SysDateTime
   display ' '
end-procedure ! Fin-Debug-Msg


!***************************************************************
!Include SQCs
!***************************************************************
!#include 'hrgetval.sqc'  ! GET VALUES MASK ROUTINES

#include 'prcsapi.sqc'   !Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declare
#include 'reset.sqc'     ! RESET PRINTER PROCEDURE
#include 'stdapi.sqc'    ! UPDATE PROCESS API
#include 'curdttim.sqc'  ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'  ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'    ! ROUTINES TO FORMAT NUMBERS
#Include 'sqlerr.sqc'
#include 'datemath.sqc'  ! ROUTINES FOR DATEMATH
#include 'getdptnm.sqc'
#include 'getempnm.sqc'
#include 'sqrtrans.sqc'
#include 'useprntr.sqc'
