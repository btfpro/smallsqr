!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:39:07                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! -----------------------------------------------------------------------------
! Report ID:     PAY053.SQR
!
! Description:   Updates the employee Earning Balances with the
!                Tips Allocations.
!
! Purpose:       To allow the year-end program (TAX910LD.SQR)
!                to properly load the Box 8 information.
!
! Created:       2-Sep-1997
!
! Run Frequency: On request.
!
! Input:         PeopleSoft database & user parameters.
!
! Output:
!   ¯  Report   - Audit/Control Report (PAY053.LIS)
!   ¯  Database - Updates to the Employee Earnings Balances
!
!
! NOTES:
! ------
!   (1)  Specifications based on Tips Project (summer 1997)
!
!   (2)  The main paragraph (REPORT) does NOT perform a SQL JOIN
!        to prevent the possibility of a failed-JOIN against the
!        TIPS_ALLOC_EMPL table.  Performance is slightly impacted
!        with the gain of all rows of TIPS_ALLOC_EMPL being processed
!        by this SQR.
!
!   (3)  This process cannot be executed before the Payroll is Confirmed.
!
!   (4)  This SQR does NOT process QTD Tips information.
!
! ---------------------------------------------------------------------
!                      <<<  MAINTENANCE LOG  >>>
! ---------------------------------------------------------------------
! |   WHEN    |  WHO  |  Maintenance performed?
! ---------------------------------------------------------------------
! | dd-mmm-yy |  ???  |
! |           |       |
! ---------------------------------------------------------------------
! \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
! /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

#Include 'setenv.sqc'                  ! Set environment
#Include 'setup32.sqc'                 ! Printer Controls

BEGIN-REPORT                           ! SQR BEGIN Statement
  DO INIT-REPORT                       ! Start the SQR
  DO STDAPI-TERM                       ! End the SQR

END-REPORT                             ! SQR END Statement
! *******************************************************************
! ** Section Begin:  DEFINES <Standard SQR>
! *******************************************************************

#DEFINE  COL01 001     ! Emplid
#DEFINE  COL02 017     ! Employee Name
#DEFINE  COL03 061     ! Current Allocation
#DEFINE  COL04 084     ! YTD Allocation
#DEFINE  COL05 109     ! YTD Gross Tippable Hours
#DEFINE  COL06 124     ! Earning Code
#DEFINE  COL07 137     ! Comments

! *******************************************************************
! ** Section End:  DEFINES <Standard SQR>
! *******************************************************************

! *******************************************************************
! ** Section Begin:  BEGIN-HEADING  <STANDARD SQR>
! *******************************************************************

BEGIN-HEADING   9                        ! Begin Headings

#INCLUDE 'stdhdg02.sqc'                  ! Standard Heading #02

  PRINT 'Period Date: '                  (+1,1,)
  PRINT $PRINT_DT                        (,+1,)

  PRINT 'Current'                        (+1,{COL03},)
  PRINT 'YTD'                            (,{COL04},)
  PRINT 'YTD'                            (,{COL05},)

  PRINT 'Employee ID'                    (+1,{COL01},)
  PRINT 'Employee Name'                  (,{COL02},)
  PRINT 'Allocation'                     (,{COL03},)
  PRINT 'Allocation'                     (,{COL04},)
  PRINT 'Hours'                          (,{COL05},)
  PRINT 'Earning Code'                   (,{COL06},)
  PRINT 'Comments'                       (,{COL07},)

  PRINT '---------------'                (+1,{COL01},)
  PRINT '------------------------------' (,{COL02},)
  PRINT '---------------'                (,{COL03},)
  PRINT '---------------'                (,{COL04},)
  PRINT '---------------'                (,{COL05},)
  PRINT '------------'                   (,{COL06},)
  PRINT '---------------------------'    (,{COL07},)

END-HEADING     !  End Headings

! *******************************************************************
! ** Section End:  BEGIN-HEADING  <STANDARD SQR>
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  INIT-REPORT
!    Called by the SQR-required section [BEGIN-REPORT]
! *******************************************************************

BEGIN-PROCEDURE INIT-REPORT            ! Main Procedure Section

  MOVE 'PAY053.SQR'                        TO $REPORTID
  do Init-DateTime
  do Init-Number
  do Stdapi-Init

  MOVE 'Update Allocations Balances Audit Report' TO $REPORTTITLE
  DO GET-CURRENT-DATETIME
  DISPLAY $REPORTID
  DISPLAY $REPORTTITLE

  DISPLAY ' '

  DISPLAY 'CURRENT DATE : ' NOLINE
  DISPLAY $ASOFTODAY

  DISPLAY 'CURRENT TIME : ' NOLINE
  DISPLAY $ASOFNOW

  DISPLAY ' '

  DO SELECT-PARAMETERS                 ! Standard Select Parameters

  DO GET-CALENDAR-YEAR-ID              ! Get the Calendar Year ID

  DO VALIDATE-RUN                      ! Validate the Run

  IF $GOOD_TO_GO = 'Y'                 ! OK to proceed?
    DO REPORT-MAIN                     ! Do the MAIN PARAGRAPH
    DO UPDATE-PD-TABLE                 ! Set indicator that this is done
   ELSE
    DISPLAY 'Insufficient data...'     ! Display error
  END-IF

END-PROCEDURE                          ! End the Init Procedure

! *******************************************************************
! ** Paragraph End:  INIT-REPORT
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  REPORT-MAIN
!    This is the main paragraph of the SQR.
!    Common routine for version 6.01 of PeopleSoft Payroll.
! *******************************************************************

BEGIN-PROCEDURE REPORT-MAIN

#ifdef debugx
  display 'report'
#endif
BEGIN-SELECT

  LET #DIF     = 0                ! Reset W/S

  LET #HRS_YTD = 0                ! Reset
  LET #HRS_MTD = 0                ! Reset

  LET #GRS_YTD = 0                ! Reset
  LET #GRS_MTD = 0                ! Reset

TAE.EMPLID         (+1,{COL01},)  ! Select/Print Emplid
  let $Emplid=&TAE.EMPLID
TAE.EMPL_RCD      (,+1,)       EDIT 999  ! Select/Print EMPL Record #
  let #Empl_rcd = &TAE.EMPL_RCD

PD.NAME            (,{COL02},)    ! Print the returned Name

sum(TAE.CUR_ALLOCATION) &CUR_ALLOC (,{COL03},)  EDIT  $99,999,999.99

sum(TAE.TOT_ALLOCATION) &SUM_ALLOC (,{COL04},)  EDIT  $99,999,999.99

sum(TAE.GRS_TIP_HRS)  &SUM_TIP_HRS (,{COL05},) ! Gross Tippable Hours - YTD

  LET #HRS_YTD = &SUM_TIP_HRS     ! Always use the calculated YTD Hours

  LET #GRS_YTD = &SUM_ALLOC       ! Always use the calculated YTD amount

  LET #CUR_YTD = &CUR_ALLOC       ! FOr the Totals W/S

  LET #HRS_TOT = &SUM_TIP_HRS + #HRS_TOT   ! Totals print

  LET #GRS_TOT = &SUM_ALLOC   + #GRS_TOT   ! Totals print

  LET #CUR_TOT = &CUR_ALLOC   + #CUR_TOT   ! Totals print

  PRINT $ERNCD                     (,{COL06},)  ! Print Earning Code

! Process Earnings
! ================
  DO INSERT-OR-UPDATE-E          ! Earnings Balance exists?

  IF $EXISTS-E  = 'N'            ! If row does NOT exist

    DO GET-PRIOR-ROW             ! Retrieve the Prior Earnings Balance row

    LET #DIF = #PERIOD - &GPR.BALANCE_PERIOD

     IF #DIF = 1                 ! Prior month is also last month?

      LET #HRS_MTD = &SUM_TIP_HRS - &GPR.HRS_YTD    ! MTD Hours
      LET #GRS_MTD = &SUM_ALLOC   - &GPR.GRS_YTD    ! MTD Gross

     END-IF

    DO INSERT-ROW-E              ! INSERT new Earnings Balance row

    PRINT 'Earning INSERTED'         (,{COL07},)  ! Print Comment

   ELSE

    DO UPDATE-ROW-E              ! Update Earnings Balance row

    PRINT 'Earning UPDATED'          (,{COL07},)  ! Print Comment

  END-IF

! Process Adjustments
! ===================
  DO FIND-ADJ                    ! Find Adjustment

  DO INSERT-ROW-A                ! INSERT new Adjustment row

FROM
      PS_TIPS_ALLOC_EMPL TAE,
      PS_NAMES           PD

WHERE
      TAE.POST_DT  =  $RC_TIP.POST_DT               ! Filter - Post Date
  AND TAE.COMPANY  =  $RC_TIP.COMPANY               ! Filter - Company
  AND PD.EMPLID    =  TAE.EMPLID
  AND PD.NAME_TYPE = 'PRI'
  AND PD.EFFDT =
     (SELECT MAX(PX.EFFDT)
      FROM   PS_NAMES PX
      WHERE  PX.EMPLID    = PD.EMPLID
        AND  PX.NAME_TYPE = PD.NAME_TYPE
        AND  PX.EFFDT    <= $ASOFDATE)

GROUP BY
      PD.NAME,
      TAE.EMPLID,
      TAE.EMPL_RCD

ORDER BY
      PD.NAME,
      TAE.EMPLID,
      TAE.EMPL_RCD

END-SELECT

! Print the report totals.....all done!
! =====================================

  NEW-PAGE

  PRINT  'Report Totals:'  (+4,{COL01},)

  PRINT  '=============='  (,{COL03},)

  PRINT  '=============='  (,{COL04},)

  PRINT  '=============='  (,{COL05},)

  PRINT  #CUR_TOT          (+2,{COL03},)  EDIT  999,999,999.99

  PRINT  #GRS_TOT          (,{COL04},)    EDIT $999,999,999.99

  PRINT  #HRS_TOT          (,{COL05},)    EDIT $999,999,999.99

END-PROCEDURE   !  REPORT

! *******************************************************************
! ** Paragraph End:  REPORT
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  VALIDATE-RUN
!    This is called to see if it is OK to load the Earnings Balances.
! *******************************************************************

BEGIN-PROCEDURE VALIDATE-RUN
#ifdef debugx
  display 'validate run'
#endif

  LET $GOOD_TO_GO = 'N'                     ! Reset control variable

BEGIN-SELECT

VR.TIPS_CALC_RUN
VR.ADDL_PAY_LD_RUN
VR.ALLOC_COMPLETE

  LET $COMPANY = $RC_TIP.COMPANY            ! Lood Lookup variable
  DO GET-COMPANY-DATA                       ! Get Company Data

  LET $ERNCD = &CT.ERNCD_TIPS_ALLOC         ! Load the Earning Code

  DO FORMAT-DATETIME($RC_TIP.POST_DT, $OUT, {DEFDATE}, '', '')
  LET $PRINT_DT = $OUT    ! For the Headings

  LET $REASON = 'Tip Allocation loaded via SQR on ' || $ASOFTODAY

  LET $ORIG_DT   = $ASOFDATE                ! Save original AsOfDate
  LET $ASOFDATE  = $RC_TIP.POST_DT          ! Load getdatcd.sqc value

  DO  GET-DATE-CODES                        ! Derive date values

  LET $ASOFDATE  = $ORIG_DT                 ! Load getdatcd.sqc value

  LET #YEAR      = to_number($AsOfYYYY)     ! Load Year variable
  LET #PERIOD    = to_number($AsOfMonth)    ! Load Month variable
  LET #QTR       = to_number($AsOfQTR)      ! Load Quarter variable

  IF   &VR.TIPS_CALC_RUN    =  'Y'          ! Calculated?
  AND  &VR.ADDL_PAY_LD_RUN  =  'N'          ! Already loaded?
  AND  &VR.ALLOC_COMPLETE   =  'Y'          ! Alloc Complete?
   LET $GOOD_TO_GO  =  'Y'                  ! Let the SQR continue
   DISPLAY 'Everything looks OK...'         ! Display Debug
   GOTO OK                                  ! Bypass Command
  END-IF                                    ! End the IF

! A few paragraphs to make this thing user-friendly.

  IF   &VR.TIPS_CALC_RUN    =  'N'           ! Calculated?
   DISPLAY 'Allocations NOT calculated for ' NOLINE ! Display Debug
   DISPLAY $RC_TIP.COMPANY                   ! Display Debug
   DISPLAY 'Post Date is: '                  NOLINE ! Display Debug
   DISPLAY $RC_TIP.POST_DT                   ! Display Debug
   PRINT 'ALLOCATIONS NOT CALCULATED'    (+2,1,)  ! Send to report
   GOTO OK                                  ! Bypass Command
  END-IF                                     ! End the IF

  IF   &VR.ALLOC_COMPLETE   =  'N'           ! Completed?
   DISPLAY 'Allocations NOT completed for ' NOLINE ! Display Debug
   DISPLAY $RC_TIP.COMPANY                   ! Display Debug
   DISPLAY 'Post Date is: '                  NOLINE ! Display Debug
   DISPLAY $RC_TIP.POST_DT                   ! Display Debug
   PRINT 'ALLOCATIONS NOT COMPLETED'     (+2,1,)  ! Send to report
   GOTO OK                                   ! Bypass Command
  END-IF                                     ! End the IF

  IF   &VR.ADDL_PAY_LD_RUN  =  'Y'           ! Completed?
   DISPLAY 'Earnings previously loaded for ' NOLINE ! Display Debug
   DISPLAY $RC_TIP.COMPANY                   ! Display Debug
   DISPLAY 'Post Date is: '                  NOLINE ! Display Debug
   DISPLAY $RC_TIP.POST_DT                   ! Display Debug
   PRINT 'ALLOCATIONS PREVIOUSLY LOADED' (+2,1,)  ! Send to report
   GOTO OK                                   ! Bypass Command
  END-IF                                     ! End the IF

OK:                                         ! Skip place

FROM  PS_TIPS_ALLOC_PD  VR

WHERE
      VR.COMPANY            = $RC_TIP.COMPANY
  AND VR.POST_DT            = $RC_TIP.POST_DT

END-SELECT

END-PROCEDURE   !  VALIDATE-RUN

! *******************************************************************
! ** Paragraph End:  VALIDATE-RUN
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  INSERT-OR-UPDATE-E
! *******************************************************************
!    This paragraph determines if there is a Tip Earning Balance
!    for this employee. (This Company/Year/Period)
! *******************************************************************

BEGIN-PROCEDURE INSERT-OR-UPDATE-E !  Begin Procedure
#ifdef debugx
  display 'insert-or-update-e'
#endif

  LET  $EXISTS-E = 'N'         ! NOT found until SELECT is passed

BEGIN-SELECT  LOOPS=1          ! Start the SELECT

IUE.EMPLID                     ! Emplid

  LET  $EXISTS-E = 'Y'         ! Found one!

FROM
      PS_EARNINGS_BAL   IUE    ! Earnings Balance Table

WHERE
      IUE.EMPLID       =  $EMPLID         ! JOIN Emplid
  AND IUE.COMPANY      =  $RC_TIP.COMPANY ! JOIN Company
  AND IUE.BALANCE_ID   =  $CALENDAR_YEAR_ID ! Balance ID
  AND IUE.BALANCE_YEAR =  #YEAR           ! This Year (of Post Date)
  AND IUE.BALANCE_QTR  =  #QTR            ! This Quarter (of Post Date)
  AND IUE.BALANCE_PERIOD = #PERIOD        ! This Perios (of Post Date)
  AND IUE.EMPL_RCD     =  #Empl_rcd       ! This employee record number
  AND IUE.SPCL_BALANCE = 'N'              ! Not an Accumulator
  AND IUE.ERNCD        =  $ERNCD          ! Look for Tip Allocations

END-SELECT                               ! End the SELECT

END-PROCEDURE   !  INSERT-OR-UPDATE-E

! *******************************************************************
! ** Paragraph End:  INSERT-OR-UPDATE-E
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  GET-PRIOR-ROW
! *******************************************************************
!    This paragraph retreives the prior Tip Earning Balance row
!    for this employee. (This Company/Year/Period)
! *******************************************************************

BEGIN-PROCEDURE GET-PRIOR-ROW  ! Begin Procedure

#ifdef debugx
  display 'get-prior-row'
#endif
BEGIN-SELECT  LOOPS=1          ! Start the SELECT

GPR.BALANCE_PERIOD             ! Balance Period found

GPR.HRS_YTD                    ! YTD Hours
GPR.HRS_MTD                    ! MTD Hours

GPR.GRS_YTD                    ! YTD Gross
GPR.GRS_MTD                    ! MTD Gross

FROM
      PS_EARNINGS_BAL   GPR    ! Earnings Balance Table

WHERE
      GPR.EMPLID       =  $EMPLID         ! JOIN Emplid
  AND GPR.COMPANY      =  $RC_TIP.COMPANY ! JOIN Company
  AND GPR.BALANCE_ID   =  $CALENDAR_YEAR_ID ! Balance ID
  AND GPR.BALANCE_YEAR =  #YEAR           ! This Year (of Post Date)
  AND GPR.EMPL_RCD     =  #Empl_rcd       ! This employee record number
  AND GPR.SPCL_BALANCE = 'N'              ! Not an Accumulator
  AND GPR.ERNCD        =  $ERNCD          ! Look for Tip Allocations
  AND GPR.BALANCE_QTR  =                  ! Max Quarter
              (SELECT MAX(GPR1.BALANCE_QTR)
               FROM PS_EARNINGS_BAL    GPR1
               WHERE  GPR1.EMPLID        =  GPR.EMPLID
                 AND  GPR1.COMPANY       =  GPR.COMPANY
                 AND  GPR1.BALANCE_YEAR  =  GPR.BALANCE_YEAR
                 AND  GPR1.EMPL_RCD      =  GPR.EMPL_RCD
                 AND  GPR1.ERNCD         =  GPR.ERNCD
                 AND  GPR1.SPCL_BALANCE  =  GPR.SPCL_BALANCE)

  AND GPR.BALANCE_PERIOD =                ! Max Month
              (SELECT MAX(GPR2.BALANCE_PERIOD)
               FROM PS_EARNINGS_BAL    GPR2
               WHERE  GPR2.EMPLID        =  GPR.EMPLID
                 AND  GPR2.COMPANY       =  GPR.COMPANY
                 AND  GPR2.BALANCE_YEAR  =  GPR.BALANCE_YEAR
                 AND  GPR2.EMPL_RCD      =  GPR.EMPL_RCD
                 AND  GPR2.ERNCD         =  GPR.ERNCD
                 AND  GPR2.SPCL_BALANCE  =  GPR.SPCL_BALANCE
                 AND  GPR2.BALANCE_QTR   =  GPR.BALANCE_QTR
                 AND  GPR2.BALANCE_PERIOD < #PERIOD)

END-SELECT                               ! End the SELECT

END-PROCEDURE   !  GET-PRIOR-ROW

! *******************************************************************
! ** Paragraph End:  GET-PRIOR-ROW
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  FIND-ADJ
! *******************************************************************
!    This paragraph determines if there is a Tip Earning Adjustment
!    for this employee. (This Company/Year)
! *******************************************************************

BEGIN-PROCEDURE FIND-ADJ       ! Begin Procedure
#ifdef debugx
  display 'find-adj'
#endif

  LET  #SEQ      =  0          ! Reset the sequence

BEGIN-SELECT  LOOPS=1          ! Start the SELECT

IUA.BAL_ADJ_SEQ                ! Emplid

  LET  #SEQ =  &IUA.BAL_ADJ_SEQ       ! Add one to found sequence
  LET  #SEQ =  #SEQ  +   1            ! Add one to found sequence

FROM
      PS_BAL_ADJ_ERN    IUA    ! Earning Adjustment Table

WHERE
      IUA.EMPLID       =  $EMPLID         ! JOIN Emplid
  AND IUA.COMPANY      =  $RC_TIP.COMPANY ! JOIN Company
  AND IUA.BALANCE_ID   =  $CALENDAR_YEAR_ID ! Balance ID
  AND IUA.BALANCE_YEAR =  #YEAR           ! This Year (of Post Date)
  AND IUA.EMPL_RCD     =  #Empl_rcd       ! This employee record number
  AND IUA.SPCL_BALANCE = 'N'              ! Not an Accumulator
  AND IUA.ERNCD        =  $ERNCD          ! Look for Tip Allocations
  AND IUA.BAL_ADJ_SEQ  =                  ! Max Sequence
              (SELECT MAX(IUA1.BAL_ADJ_SEQ)
               FROM PS_BAL_ADJ_ERN     IUA1
               WHERE  IUA1.EMPLID        =  IUA.EMPLID
                 AND  IUA1.COMPANY       =  IUA.COMPANY
                 AND  IUA1.BALANCE_YEAR  =  IUA.BALANCE_YEAR
                 AND  IUA1.EMPL_RCD      =  IUA.EMPL_RCD
                 AND  IUA1.ERNCD         =  IUA.ERNCD
                 AND  IUA1.SPCL_BALANCE  =  IUA.SPCL_BALANCE)

END-SELECT                               ! End the SELECT

END-PROCEDURE   !  FIND-ADJ

! *******************************************************************
! ** Paragraph End:  FIND-ADJ
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  UPDATE-PD-TABLE
!    This is called to update the Tips Alloc Period Table.
! *******************************************************************

BEGIN-PROCEDURE UPDATE-PD-TABLE
#ifdef debugx
  display 'update-pd-table'
#endif

BEGIN-SQL   ON-ERROR=SQL-ERROR

UPDATE  PS_TIPS_ALLOC_PD

SET ADDL_PAY_LD_RUN = 'Y'

WHERE
      COMPANY            = $RC_TIP.COMPANY
  AND POST_DT            = $RC_TIP.POST_DT

END-SQL

END-PROCEDURE   !  UPDATE-PD-TABLE

! *******************************************************************
! ** Paragraph End:  UPDATE-PD-TABLE
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  INSERT-ROW-E
!    This is called to insert new Earnings Balance row.
! *******************************************************************

BEGIN-PROCEDURE INSERT-ROW-E
#ifdef debugx
  display 'insert-row-e'

#endif

BEGIN-SQL   ON-ERROR=SQL-ERROR

INSERT INTO PS_EARNINGS_BAL

( EMPLID                 ,         ! Employee ID
  COMPANY                ,         ! Company
  BALANCE_ID             ,         ! Balance ID
  BALANCE_YEAR           ,         ! Balance Year
  BALANCE_QTR            ,         ! Balance Quarter
  BALANCE_PERIOD         ,         ! Month
  EMPL_RCD               ,         ! Employee record number
  SPCL_BALANCE           ,         ! Special Balance Indicator
  ERNCD                  ,         ! Earning Code
  HRS_YTD                ,         ! Hours YTD
  HRS_QTD                ,         ! Hours QTD
  HRS_MTD                ,         ! Hours MTD
  GRS_YTD                ,         ! Gross YTD
  GRS_QTD                ,         ! Gross QTD
  GRS_MTD                )         ! Gross MTD

VALUES

( $EMPLID                ,         ! Employee ID
  $RC_TIP.COMPANY        ,         ! Company
  $CALENDAR_YEAR_ID      ,         ! Balance ID
  #YEAR                  ,         ! Balance Year
  #QTR                   ,         ! Balance Quarter
  #PERIOD                ,         ! Month
  #Empl_rcd              ,         ! Employee record number
  'N'                    ,         ! NOT a Special Balance
  $ERNCD                 ,         ! Tips Allocations Earning Code
  &SUM_TIP_HRS           ,         ! Hours YTD
  #HRS_QTD               ,         ! Hours QTD
  #HRS_MTD               ,         ! Hours MTD
  &SUM_ALLOC             ,         ! Gross YTD
  #GRS_QTD               ,         ! Gross QTD
  #GRS_MTD               )         ! Gross MTD

END-SQL

END-PROCEDURE   !  INSERT-ROW-E

! *******************************************************************
! ** Paragraph End:  INSERT-ROW-E
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  UPDATE-ROW-E
!    This is called to update the current Earnings Balance row.
! *******************************************************************

BEGIN-PROCEDURE UPDATE-ROW-E
#ifdef debugx
  display 'update-row-e'
#endif

BEGIN-SQL   ON-ERROR=SQL-ERROR

UPDATE PS_EARNINGS_BAL

SET
    HRS_YTD = #HRS_YTD ,
    GRS_YTD = #GRS_YTD

WHERE
      EMPLID         =  $EMPLID         ! JOIN Emplid
  AND COMPANY        =  $RC_TIP.COMPANY ! JOIN Company
  AND BALANCE_ID     =  $CALENDAR_YEAR_ID ! Balance ID
  AND BALANCE_YEAR   =  #YEAR           ! This Year (of Post Date)
  AND BALANCE_QTR    =  #QTR            ! This Quarter (of Post Date)
  AND BALANCE_PERIOD = #PERIOD          ! This Perios (of Post Date)
  AND EMPL_RCD       = #Empl_rcd        ! This employee record number
  AND SPCL_BALANCE   = 'N'              ! Not an Accumulator
  AND ERNCD          =  $ERNCD          ! Look for Tip Allocations

END-SQL

END-PROCEDURE   !  UPDATE-ROW-E

! *******************************************************************
! ** Paragraph End:  UPDATE-ROW-E
! *******************************************************************


! *******************************************************************
! ** Paragraph Begin:  INSERT-ROW-A
!    This is called to insert new Earnings Adjustment row.
! *******************************************************************

BEGIN-PROCEDURE INSERT-ROW-A
#ifdef debugx
  display 'Insert-row-a'
#endif
BEGIN-SQL   ON-ERROR=SQL-ERROR

INSERT INTO PS_BAL_ADJ_ERN

( EMPLID                 ,         ! Employee ID
  COMPANY                ,         ! Company
  BALANCE_ID             ,         ! Balance ID
  BALANCE_YEAR           ,         ! Balance Year
  EMPL_RCD               ,         ! Employee record number
  SPCL_BALANCE           ,         ! Special Balance Indicator
  ERNCD                  ,         ! Earning Code
  BAL_ADJ_SEQ            ,         ! Sequence Code
  DT_ENTERED             ,         ! Date Entered
  BALANCE_QTR            ,         ! Balance Quarter
  BALANCE_PERIOD         ,         ! Month
  HRS_YTD                ,         ! Hours YTD
  HRS_QTD                ,         ! Hours QTD
  HRS_MTD                ,         ! Hours MTD
  HRS_YTD_ADJ            ,         ! Hours YTD <- Adjustment
  HRS_QTD_ADJ            ,         ! Hours QTD <- Adjustment
  HRS_MTD_ADJ            ,         ! Hours MTD <- Adjustment
  HRS_ADJ                ,         ! Hours Adjustmennt
  GRS_YTD                ,         ! Gross YTD
  GRS_QTD                ,         ! Gross QTD
  GRS_MTD                ,         ! Gross MTD
  GRS_YTD_ADJ            ,         ! Gross YTD <- Adjustment
  GRS_QTD_ADJ            ,         ! Gross QTD <- Adjustment
  GRS_MTD_ADJ            ,         ! Gross MTD <- Adjustment
  GRS_ADJ                ,         ! Gross Adjustment
  ADJ_REASON             )         ! Adjustment Reason

VALUES

( $EMPLID                ,         ! Employee ID
  $RC_TIP.COMPANY        ,         ! Company
  $CALENDAR_YEAR_ID      ,         ! Balance ID - HARDCODED
  #YEAR                  ,         ! Balance Year
  #Empl_rcd              ,         ! Employee record number
  'N'                    ,         ! NOT a Special Balance
  $ERNCD                 ,         ! Tip Allocations Earning Code
  #SEQ                   ,         ! Balance Adjustment Sequence
  $RC_TIP.POST_DT        ,         ! Date Entered - Use Post Date
  #QTR                   ,         ! Balance Quarter
  #PERIOD                ,         ! Month
  &SUM_TIP_HRS           ,         ! Hours YTD
  #HRS_QTD               ,         ! Hours QTD
  #HRS_MTD               ,         ! Hours MTD
  #HRS_YTD_ADJ           ,         ! Hours YTD <- Adjustment
  #HRS_QTD_ADJ           ,         ! Hours QTD <- Adjustment
  #HRS_MTD_ADJ           ,         ! Hours MTD <- Adjustment
  #HRS_ADJ               ,         ! Hours Adjustment
  &SUM_ALLOC             ,         ! Gross YTD
  #GRS_QTD               ,         ! Gross QTD
  #GRS_MTD               ,         ! Gross MTD
  #GRS_YTD_ADJ           ,         ! Gross YTD <- Adjustment
  #GRS_QTD_ADJ           ,         ! Gross QTD <- Adjustment
  #GRS_MTD_ADJ           ,         ! Gross MTD <- Adjustment
  #GRS_MTD               ,         ! Gross Adjustment
  $REASON                )         ! Adjustment Reason

END-SQL

END-PROCEDURE   !  INSERT-ROW-A

! *******************************************************************
! ** Paragraph End:  INSERT-ROW-A
! *******************************************************************


! *******************************************************************
! *  Include Section
! *******************************************************************
! *    This is where the SQC's are  included into the body of
! *    the program.
! *    NOTE:  All SQC's are called in lower-case.  For UNIX
! *           environment, make sure that the actual SQC files
! *           are stored in lower-case, or they will not be found.
! *******************************************************************

#Include 'stdapi.sqc'    ! Standard API Procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'number.sqc'    ! Routines to format numbers
#Include 'readxlat.sqc'  ! Routine to read the Translate Table
#Include 'getcodta.sqc'  ! Routine to retrieve Company data
#Include 'getempnm.sqc'  ! Routine to retrieve Employee Name
#Include 'getbalid.sqc'  ! Routine to retrieve Balance ID
#Include 'getdatcd.sqc'  ! Routine to retrieve Date Values
#Include 'tiprnctl.sqc'  ! Routine to retrieve Tips Run Control

! *******************************************************************
!                   <<<   END OF FILE   >>>
! *******************************************************************
