!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:35:12                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
!***********************************************************************

begin-procedure Date-Difference($Begin_Dt, $End_Dt, :#Work_Days)

  do Format-DateTime($Begin_DT, $Begin_Dt, {DEFCMP}, '', '')
  do Format-DateTime($End_Dt, $End_Dt, {DEFCMP}, '', '')

  do Date-BreakDown($Begin_Dt, #Begin_Year, #Begin_Month, #Begin_Day)
  do Date-BreakDown($End_Dt, #End_Year, #End_Month, #End_Day)

  let #Work_Days = #End_Day - #Begin_Day

  move #Begin_Month to #Work_Month
  move #Begin_Year  to #Work_Year

  if #Work_Month <> #End_Month or #Work_Year <> #End_Year

    while #Work_Month <= 12

      do Month-Days(#Work_Month, #Work_Year, #Work_Month_Days)
      let #Work_Days = #Work_Days + #Work_Month_Days
      add 1 to #Work_Month

      if #Work_Month = #End_Month and #Work_Year = #End_Year
          break
      end-if

    end-while

  end-if

  if #Work_Month >  12
    move #End_Year to #Work_Year
    move 1         to #Work_Month

    while #Work_Month <> #End_Month
        do Month-Days(#Work_Month, #Work_Year, #Work_Month_Days)
        let #Work_Days = #Work_Days + #Work_Month_Days
        add 1 to #Work_Month
    end-while

    let #Work_Year = #Begin_Year + 1
  end-if

  if $End_Dt >= $Begin_Dt
!     add 1  to  #Work_Days

      while #Work_Year <> #End_Year
          do Year-Days(#Work_Year, #Work_Year_Days)
          let #Work_Days = #Work_DAys + #Work_Year_Days
          add 1  to  #Work_Year
      end-while

  else
!     subtract 1 from #Work_Days
      move #Work_Year to #Work_Save_Year
      move #End_Year to #Work_Year

      while #Work_Year <> #Work_Save_Year
          do Year-Days(#Work_Year, #Work_Year_Days)
          subtract #Work_Year_Days from #Work_Days
          add 1 to #Work_Year
      end-while

  end-if

  if #Work_Days <  0
    let #Work_Days = #Work_Days * -1
  end-if

end-procedure


begin-procedure Date-BreakDown($Date_In, :#Work_Year, :#Work_Month, :#Work_Day)

  let $Work_Year   = substr($Date_In, 1, 4)
  let $Work_Month  = substr($Date_In, 5, 2)
  let $Work_Day    = substr($Date_In, 7, 2)

  let #Work_Year   = $Work_Year
  let #Work_Month  = $Work_Month
  let #Work_Day    = $Work_Day

end-procedure


begin-procedure Month-Days(#Work_Month, #Work_Year, :#Work_Month_Days)

  evaluate #Work_Month

      when =  1
      when =  3
      when =  5
      when =  7
      when =  8
      when =  10
      when =  12
          move 31  to  #Work_Month_Days
      when =  2
          move 28  to  #Work_Month_Days
          do Leap-Days(#Work_Year, #Work_Leap_Days)
          let #Work_Month_Days =  #Work_Month_Days + #Work_Leap_Days
      when =  4
      when =  6
      when =  9
      when =  11
          move 30  to  #Work_Month_Days
      when-other
          move 00  to  #Work_Month_Days
  end-evaluate

end-procedure


begin-procedure Year-Days(#Work_Year, :#Work_Year_Days)
  move 365  to  #Work_Year_Days
  do Leap-Days(#Work_Year, #Work_Leap_Days)
  let #Work_Year_Days =  #Work_Year_Days +  #Work_Leap_Days
end-procedure


begin-procedure Leap-Days(#Work_Year, :#work_leap_days)
  let #leap_check = mod(#Work_Year, 4)

  if #leap_check <>  0
      move 0  to  #work_leap_days
  else
    let #leap_check = mod(#Work_Year, 100)

      if #leap_check <>  0
          move 1  to  #Work_leap_days
      else
          let #leap_check = mod(#Work_Year, 400)

          if #leap_check <>  0
            move 0  to  #Work_leap_days
          else
            move 1  to  #Work_leap_days
          end-if
      end-if
  end-if

end-procedure
                                                                     !HP99999
begin-procedure WorkDays($Begin_Dt, $End_Dt, $Work_Sched, :#days)    !HP99999
                                                                     !HP99999
  do Convert-to-DTU-Date($Begin_Dt, $DTU_Date)                       !HP99999
  do DTU-DayofWeek#($DTU_Date, #Day_of_Week)                         !HP99999
                                                                     !HP99999
  do Date-Difference($Begin_Dt, $End_Dt, #Total_Days)                !HP99999
                                                                     !HP99999
  add 1 to #Total_Days                                               !HP99999
                                                                     !HP99999
  let #count = 0                                                     !HP99999
  let #days  = 0                                                     !HP99999
                                                                     !HP99999
  while #count < #Total_Days                                         !HP99999
                                                                     !HP99999
     add 1 to #count                                                 !HP99999
                                                                     !HP99999
     let $Work = substr($Work_Sched, #Day_of_Week, 1)                !HP99999
                                                                     !HP99999
     if $Work = 'Y'                                                  !HP99999
                                                                     !HP99999
        add 1 to #days                                               !HP99999
     end-if                                                          !HP99999
                                                                     !HP99999
     if #Day_of_Week = 7                                             !HP99999
                                                                     !HP99999
        let #Day_of_Week = 1                                         !HP99999
     else                                                            !HP99999
                                                                     !HP99999
        add 1 to #Day_of_Week                                        !HP99999
     end-if                                                          !HP99999
  end-while                                                          !HP99999
                                                                     !HP99999
end-procedure                                                        !HP99999
