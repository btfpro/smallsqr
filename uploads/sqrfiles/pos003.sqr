!***********************************************************************
!  POS003: Incumbent Position History Report                           *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/08/06:00:33:42                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
!Procedures ending with "Scrty" and Record alias ending with "SC" are  *
!using SQR Security.                                                   *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
begin-setup
  #Include 'ptpsl215.sqc'   !Printer and page-size initialization
end-setup

#define POSITION_DATA
#include 'rellang.sqc'
#define RELLANG_PROG

begin-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $prcs_oprid=''
    goto last2
  end-if
  do Get-Language-Codes
    do Process-Main

  do Reset
  do Stdapi-Term
  LAST2:
end-report

begin-heading 13
do Get_Field_Information ('POS003',     'REPORT_TITLE', $REPORTTITLE,   #DW)
#Include 'stdhtr03.sqc'
do Get_Field_Information ('POS003',     'EMPLID',       $EMPLID,        #DW)
do Get_Field_Information ('POS003',     'ENTRY_DT1',    $ENTRYDT1,      #DW)
do Get_Field_Information ('POS003',     'ENTRY_DT2',    $ENTRYDT2,      #DW)
do Get_Field_Information ('POS003',     'EXIT_DT1',     $EXITDT1,       #DW)
do Get_Field_Information ('POS003',     'EXIT_DT2',     $EXITDT2,       #DW)
do Get_Field_Information ('POS003',     'ENTRY_SAL1',   $ENTRYSAL1,     #DW)
do Get_Field_Information ('POS003',     'ENTRY_SAL2',   $ENTRYSAL2,     #DW)
do Get_Field_Information ('POS003',     'EXIT_SAL1',    $EXITSAL1,      #DW)
do Get_Field_Information ('POS003',     'EXIT_SAL2',    $EXITSAL2,      #DW)
do Get_Field_Information ('POS003',     'EXIT_RSN1',    $EXITRSN1,      #DW)
do Get_Field_Information ('POS003',     'EXIT_RSN2',    $EXITRSN2,      #DW)
do Get_Field_Information ('POS003',     'ENTRY_PGS1',   $ENTRYPGS1,     #DW)
do Get_Field_Information ('POS003',     'ENTRY_PGS2',   $ENTRYPGS2,     #DW)
do Get_Field_Information ('POS003',     'EXIT_PGS1',    $EXITPGS1,      #DW)
do Get_Field_Information ('POS003',     'EXIT_PGS2',    $EXITPGS2,      #DW)
do Get_Field_Information ('POS003',     'SALARY_PGS1',  $SALPGS1,       #DW)
do Get_Field_Information ('POS003',     'SALARY_PGS2',  $SALPGS2,       #DW)
do Get_Field_Information ('POS003',     'INCUMBENT',    $INCUMB,        #DW)
do Get_Field_Information ('POS003',     'INCUMBENT',    $INCUMB,        #DW)
do Get_Field_Information ('POS003',     'POSITION',     $POS,           #DW)
do Get_Field_Information ('HR',         'INCUMBENT',    $INCUMBENT,     #DW)
do Get_Field_Information ('HR',         'JOBCODE',      $JOBCODE,       #DW)
do Get_Field_Information ('HR',         'POSITION_TITLE',$POSTITLE,     #DW)
do Get_Field_Information ('HR',         'POSITION_STAT1',$POSSTAT1,     #DW)
do Get_Field_Information ('HR',         'POSITION_STAT2',$POSSTAT2,     #DW)
do Get_Field_Information ('HR',         'COMPANY',      $COMP,          #DW)
do Get_Field_Information ('HR',         'CURRENCY_CD1', $CUR1,          #DW)
do Get_Field_Information ('HR',         'CURRENCY_CD2', $CUR2,          #DW)
do Get_Field_Information ('HR',         'DEPARTMENT',   $DEPT,          #DW)
do Get_Field_Information ('POS003',     'POSITION_NBR1',$POSNO,         #DW)

   print $COMP                  (+2,1,11)
   print $Company               (0,13,10)
   print $CompanyName           (0,24)

   print $DEPT                  (+1,1,11)
   print $DeptId                (0,13,10)
   print $DeptName              (0,24)

   print $POS                   (+2,17,92)
   print $INCUMB                (0,110)
   let #right_col = #sqr-max-columns - 2
   print '-'                    (+1,1,#right_col) fill
   let $POSNO_TITLE = $POSNO || '/'
   print $POSNO_TITLE           (+1,10,14)
   print $POSSTAT1              (0,25,8)
   print $SALPGS1               (0,34,11)
   print '|'                    (0,46,1)
   print $ENTRYDT1              (0,48,11)
   if #MultiCurr
     print $EXITDT1             (0,60,55)
     print $CUR1                (0,116,9)
   else
     print $EXITDT1             (0,60,65)
   end-if
   print $ENTRYSAL1             (0,126,14)
   if #MultiCurr
     print $ENTRYPGS1           (0,141,11)
     print $CUR1                (0,153,10)
   else
     print $ENTRYPGS1           (0,141,22)
   end-if
   print $EXITSAL1              (0,164,14)
   print $EXITPGS1              (0,178,11)
   print $EXITRSN1              (0,190)

   print $JOBCODE               (+1,1,8)
   print $POSTITLE              (0,10,14)
   print $POSSTAT2              (0,25,8)
   print $SALPGS2               (0,34,11)
   print '|'                    (0,46,1)
   print $ENTRYDT2              (0,48,11)
   print $EXITDT2               (0,60,11)
   print $INCUMBENT             (0,72,31)
   if #MultiCurr
     print $EMPLID              (0,104,11)
     print $CUR2                (0,116,8)
   else
     print $EMPLID              (0,104,20)
   end-if
   print $ENTRYSAL2             (0,125,15)
   if #MultiCurr
     print $ENTRYPGS2           (0,141,11)
     print $CUR2                (0,153,8)
   else
     print $ENTRYPGS2           (0,141,20)
   end-if
   print $EXITSAL2              (0,162,15)
   print $EXITPGS2              (0,178,11)
   print $EXITRSN2              (0,190)
   while #current-line <= #sqr-max-lines - 2
     print '|' (+1,46)
   end-while
end-heading

!********************************************
begin-procedure Init-Report
  LET $_TableAlias = 'H'
  move 'POS003' to $ReportID
  do Stdapi-Init
  if $prcs_oprid=''
    display ''
    display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
    display ''
    goto last1
  end-if

  do Security-Param

  if $prcs_process_instance = ''
    do Ask-As-Of-Date
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  LAST1:
end-procedure

!********************************************
begin-procedure Get-Values
   let $language_cd = $prcs_language_cd
   do Get-As-Of-Date
   do Get-POS003-Parm

end-procedure

!********************************************
!     PROC Process-Main                     *
!          Main Procedure                   *
!********************************************
begin-procedure Process-Main
begin-SELECT
B.BUSINESS_UNIT
   LET $BU = RTRIM(&B.BUSINESS_UNIT,' ')
B.COMPANY                  () on-break print=never level=1 procedure=Dept-Change
   move &B.Company to $Company
   do Get-Company-Data
B.DEPTID                   () on-break print=never level=1 procedure=Dept-Change
   move &B.DeptId to $DeptId
   do Get-Department-Name
B.JOBCODE                  (+1,1,8) on-break level=2 before=Job-Change skiplines=1
B.POSITION_NBR             (0,10,14)
B.POSN_STATUS
   move 'POSN_STATUS' to  $FieldName
   move &B.POSN_STATUS to $FieldValue
   do Read-Translate-Table
   print $XlatShortName    (0,25,8)
!B.JOBCODE
B.SAL_ADMIN_PLAN           (0,34,3)
B.GRADE                    (0,38,5)
B.STEP
   if &B.Step  = 00
      move ' ' to $JStep
      print $JStep         (0,42)
   else
      print &B.Step        (0,42) EDIT 99
   end-if
B.EFFDT
B.DESCR

   let $POSITION_DATA-DESCR = &B.DESCR
   do Get_Related_POSITION_DATA(&B.EFFDT,&B.POSITION_NBR)
   let $PositionDescr = $POSITION_DATA-DESCR

   print $PositionDescr (+1,10)
   position (-1)

  do Get-Incumbent

  NEXT-LISTING NEED=3

FROM PS_POSITION_DATA B WHERE EXISTS (SELECT 'X' FROM PS_POSN_HISTORY
            WHERE POSITION_NBR = B.POSITION_NBR)
       AND B.EFFDT = (SELECT MAX(C.EFFDT) FROM PS_POSITION_DATA C 
                  WHERE B.POSITION_NBR = C.POSITION_NBR 
                  AND C.EFFDT <= $AsOfDate)

ORDER BY B.COMPANY,B.DEPTID,B.JOBCODE,B.POSITION_NBR

end-SELECT
end-procedure

!********************************************
!   Get-Incumbent                           *
!********************************************
begin-procedure Get-Incumbent
begin-SELECT

H.POSITION_ENTRY_DT
   do Format-DateTime(&H.Position_Entry_Dt, $out, {DEFDATE}, '', '')
   print $out              (0,48,23)
H.SAL_ADMIN_PLAN           (0,141,3)
H.GRADE                    (0,145,3)
H.STEP
   if &H.Step  = 00
     move ' ' to $HStep
     print $HStep          (0,149)
   else
     print &H.Step         (0,149) EDIT 99
   end-if
N.NAME
   move &N.Name to $Name
   print $Name             (0,72,32)
H.EMPLID                   (0,104,11)
H.EMPL_RCD
H.CURRENCY_CD              (0,116,2)
H.COMPRATE
   do Format-Number(&H.COMPRATE, $out, '999999999999.99')
   print $out              (0,119,15)
H.COMP_FREQUENCY           (0,135,5)

   do Get-Exit-Date
   let $exit_sal_exists = 'N'
   do Get-Exit-Salary

   if $show_comp = 'Y'
     move 'Y' to $firstcomp
     do Get-Entry-Compensation-Components
     let #last_comp_line = #current-line
     if $exit_sal_exists = 'Y'
       let #entry_comp_diff = #first_comp_line - #current-line
       position (+#entry_comp_diff)
       move 'Y' to $first_exit_comp
       do Get-Exit-Compensation-Components
       let #entry_exit_diff = #last_comp_line - #current-line
       if #entry_exit_diff > 0
         position (+#entry_exit_diff)
       end-if
     end-if
     position (+2)
   else
     print ' '             (+1,1)
   end-if

FROM PS_POSN_HISTORY H,
     PS_PERSON_NAME N

WHERE H.POSITION_NBR = &B.Position_Nbr
  AND H.EMPLID       = N.EMPLID
[$SecurityClausewithERN]

 !ORDER BY H.EMPLID
ORDER BY H.POSITION_ENTRY_DT DESC

end-SELECT
end-procedure

!********************************************
!   Get-Exit-Date Procedure                 *
!********************************************

begin-procedure Get-Exit-Date
begin-SELECT
H2.POSITION_NBR
H2.POSITION_ENTRY_DT
H2.EMPLID
H2.EMPL_RCD
H2.POSITION_END_DT
    do Format-DateTime(&H2.Position_End_Dt, $out, {DEFDATE}, '', '')
     print $out            (0,60,129)
H2.EFFSEQ
H2.ACTION
     move &H2.ACTION to $FieldValue
       do Read-Lang
   print $ExitReason    (0,190)

FROM PS_POSN_HISTORY2 H2
WHERE &H.Position_Entry_Dt = H2.POSITION_ENTRY_DT
  AND &B.Position_Nbr      = H2.POSITION_NBR
  AND &H.Emplid            = H2.EMPLID

end-SELECT
end-procedure
!********************************************
!   Read-Lang                               *
!********************************************
begin-procedure Read-Lang
 if $PSOptions_language_cd = ''
        do Get-PSOptions-Language ($PSOptions_language_cd)
 end-if

    if $PSOptions_language_cd = $curr_language_cd
      do Get-Exit-Reason 
    else
      do Get-Exit-Reason-Lang 

      if $ExitReason = '' 
        do Get-Exit-Reason 
      end-if
    end-if
end-procedure
!********************************************
!   Get-Exit-Reason                         *
!********************************************
begin-procedure Get-Exit-Reason
begin-SELECT
A.ACTION_DESCR
    move &A.ACTION_DESCR to $ExitReason
FROM PS_ACTION_TBL A
 WHERE A.ACTION = $FieldValue
 AND A.EFF_STATUS ='A'
 AND A.EFFDT = (SELECT MAX(B.EFFDT)             
               FROM   PS_ACTION_TBL B
                 WHERE  B.ACTION  = $FieldValue
                        AND  B.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure 
!********************************************
!   Get-Exit-Reason-Lang                    *
!********************************************
begin-procedure Get-Exit-Reason-Lang
let $Lcl_Language_Cd = rtrim($curr_language_cd, ' ')
begin-SELECT
C.ACTION_DESCR
   move &C.ACTION_DESCR to $ExitReason
FROM PS_ACTION_LNG C
 WHERE C.ACTION = $FieldValue
 AND C.LANGUAGE_CD = $Lcl_Language_Cd
 AND C.EFFDT = (SELECT MAX(D.EFFDT)             
               FROM   PS_ACTION_LNG D
                 WHERE  D.ACTION  = $FieldValue
                        AND D.LANGUAGE_CD = $Lcl_Language_Cd 
                        AND  D.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure 
!********************************************
!   Get-Exit-Salary Procedure               *
!********************************************

begin-procedure Get-Exit-Salary
begin-SELECT

H3.SAL_ADMIN_PLAN          (0,178,3)
H3.GRADE                   (0,182,3)
H3.STEP
    if &H3.Step  = 00
      move ' ' to $HStep
      print $HStep         (0,186)
   else
      print &H3.Step       (0,186) EDIT 99
   end-if

H3.CURRENCY_CD             (0,153,2)
H3.COMPRATE
  do Format-Number(&H3.COMPRATE, $out, '999999999999.99')
  print $out               (0,156,15)
  let $exit_sal_exists = 'Y'
H3.COMP_FREQUENCY          (0,172,5)

FROM PS_POSN_HISTORY3 H3
WHERE &H.Position_Entry_Dt = H3.POSITION_ENTRY_DT
  AND &B.Position_Nbr      = H3.POSITION_NBR
  AND &H.Emplid            = H3.EMPLID

end-SELECT
end-procedure

!********************************************
!   Get-Entry-Compensation-Components       *
!********************************************

begin-procedure Get-Entry-Compensation-Components
  do Get_Field_Information ('HR',         'COMP_COMPONENTS',      $COMPONENTS,    #DW)
  print $COMPONENTS            (+2,77,30)
  let #first_comp_line = #current-line
begin-SELECT
D.COMP_EFFSEQ
D.COMP_RATECD
  if $firstcomp <> 'N'
    print &D.COMP_RATECD       (0,108,7)
    move 'N' to $firstcomp
  else
    print &D.COMP_RATECD       (+1,108,7)
  end-if
D.CURRENCY_CD                  (0,116,2)
D.COMPRATE
  do Format-Number(&D.CompRate, $out, '999999999999.99')
  print $out                   (0,119,15)
D.COMP_FREQUENCY               (0,135)
FROM  PS_COMPENSATION D
WHERE D.EMPLID    = &H.EmplID
  AND D.EMPL_RCD = &H.EMPL_RCD
  AND D.EFFDT     = &H.Position_Entry_Dt
  AND D.EFFSEQ    = (
   SELECT MIN(F.EFFSEQ)
    FROM PS_COMPENSATION F
    WHERE F.EMPLID = D.EMPLID
      AND F.EMPL_RCD = D.EMPL_RCD
      AND F.EFFDT = D.EFFDT)
ORDER BY D.COMP_RATECD, D.COMP_EFFSEQ
end-SELECT
end-procedure

!********************************************
!   Get-Exit-Compensation-Components        *
!********************************************

begin-procedure Get-Exit-Compensation-Components
begin-SELECT
E.COMP_EFFSEQ
E.COMP_RATECD
  if $first_exit_comp <> 'N'
    print &E.COMP_RATECD       (0,145,7)
    move 'N' to $first_exit_comp
  else
    print &E.COMP_RATECD       (+1,145,7)
  end-if
E.CURRENCY_CD                  (0,153,2)
E.COMPRATE
  do Format-Number(&E.CompRate, $out, '999999999999.99')
  print $out                   (0,156,15)
E.COMP_FREQUENCY               (0,172)
FROM  PS_COMPENSATION E
WHERE E.EMPLID    = &H2.EmplID
  AND E.EMPL_RCD = &H2.EMPL_RCD
  AND E.EFFDT     = &H2.Position_End_Dt
  AND E.EFFSEQ    = &H2.Effseq
ORDER BY E.COMP_RATECD, E.COMP_EFFSEQ
end-SELECT
end-procedure

!********************************************
begin-procedure Dept-Change
  new-page
end-procedure

!********************************************
begin-procedure Job-Change
  if #current-line >= #sqr-max-lines - 3
    new-page
  end-if
end-procedure

!*****************************************************************

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'getcodta.sqc'  !Get Company Data procedure
#Include 'getdptnm.sqc'  !Get Department Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#include 'prcslng.sqc'   !process language
