!***********************************************************************
!  BREREG01:  Employee Registry Report                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/09/26:17:31:16                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************
#define caa    1
#define cac   15
#define cad   18
#define caf   27
#define cah   40
#define caj   65
#define cal   75
#define caq   60
#define can   80
#define cao  125
#define cap  140
#define car  155

#define g0    0
#define g1    1
#define g2    5

#define laa  24
#define lac 170

#include 'setenv.sqc'   ! set enviroment

Begin-Setup
#include 'setupdb.sqc'

  Declare-Printer   THIS_REPORT
  Type=HPLASERJET
  Font= 4         
  Point-Size=12
  Pitch=17
  Symbol-Set=0U     ! ASCII symbol set
 End-Declare
 
 Declare-Layout THIS_REPORT       
  Orientation=Landscape
  Top-Margin= .3
  Left-Margin=.3
  Char-Width=4.3    ! 7.2
  Line-Height=9     ! 72/Printer_point-size
 End-Declare
 
 Declare-Report THIS_REPORT
  Printer-Type=HPLASERJET
  LayOut=THIS_REPORT
 End-Declare

end-Setup

!**************************************
begin-report
#debug show '** Report **'
!**************************************
 let #FontStd  = 4             !1,3 courier font  
 let #SizeGrd  = 11 
 let #SizeStd  = 9   
 let #SizeSml  = 7
 do Init-Report
 do Process-Main
 do Stdapi-Term
 do Reset
end-report

!**************************************
begin-procedure Init-Report
#debug show '** Init Report **'
!**************************************
 do Init-DateTime
 do Init-Number
 do Stdapi-Init
 do Get-Current-DateTime
 move 'BREREG01' to $ReportID
 move 'FICHA DE REGISTRO DE EMPREGADOS' to $ReportTitle
 display $ReportID
 display $ReportTitle
 #debug display 'Ver. 0908061700'
 date-time () hh:mi:ss &timeBegan
 display 'Report Began: ' noline
 display &timeBegan
 date-time () DD/MM/YYYY &ReportDT
end-procedure Init-Report

!**************************************
begin-heading 9
!**************************************
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print $ReportID                       (#r   ,{caa})
 Print 'Data/Hora: '                   (     ,{cap})  
 Print &ReportDT                       (     ,{car}) 
 Print &timeBegan                      (     ,+1) 
 
 Alter-Printer Point-size = #SizeGrd Font-Type = Proportional Font = #FontStd
 Print 'FICHA DE REGISTRO DE EMPREGADOS' (#r0  ,{caa}) Bold
 Print 'EmplID: '                      (     ,{cap}) Bold
   
 Graphic (  ,{caa},{lac}) horz-line {g1}
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd  
 Print 'Empresa  :'                    (#r1  ,{caa}) 
 Print 'Endereço :'                    (+1   ,{caa})  
 Print 'Bairro   :'                    (     ,{cal})   
 Print 'Cidade   :'                    (     ,{cao})    
 Print 'Estado   :'                    (+1   ,{caa})  
 Print 'C.E.P    :'                    (     ,{cal})     
 Print 'C.N.P.J  :'                    (+1  ,{caa})  
  
 Graphic (+1 ,{caa} ,{lac}) box  3 {g0} 10     !Name
  
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd  
 Print 'Nome     :'                    (+1,{caa}) 
 print 'Registro :'                    (  ,80)

 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd  
 Print 'Página   :'                    (     ,{cap})  
   
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd  
 Print $Emplid                         (#r0 ,{car})   Bold 
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd  
 Print $EstabIDNm                      (#r1 ,{cac})  Bold  
 Print $CompanyAdd                     (+1  ,{cac},40) Bold  
 Print $CompanyNeigb                   (    , 90,20) Bold
 Print $CompanyCity                    (    ,{cap},25) Bold
 Print $CompanyUF                      (+1  ,{cac})  Bold
 Print $CompanyPostal                  (    , 90)    Bold
 Print $CNPJ                           (#r2 ,{cac})  Edit 'XX.XXX.XXX/XXX-XX' Bold

 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 Uppercase $Name
 Print $Name                           (+2   ,{cad})  Bold
 Print $RegNum                         (     ,95)     Bold
 Page-number                           (     ,{car})
 last-page                             () ' / '
 
 if $PrintTitle <> ''
     Print  $PrintTitle (+1,1)
     Print  ' ...continuação' ()
     Print  ''  (+1,1)
     Let #Page = 0
     Let $PrintTitle = ''
 end-if
 
 if #Page <> 0
    Let    $PrintTitle = $Title
!    Print  $Title (+2,)
!    Print  ' ...continuação' ()
    Let    #Page = 0
 else 
    Let    $PrintTitle = ''
 end-if
 
end-heading

!**************************************
begin-procedure Select-Parameters
#debug show '** Select-Parameters **'
!**************************************
Let $Process     = 'N'

begin-select
RC.ESTABID
RC.DEPTID
RC.EMPLID
RC.LIST_OPTION_BRA
RC.BEGIN_DT
RC.END_DT
RC.COMMENTS_OPT_BRA 
RC.CHG_DEP_BRA
RC.CHG_EST_BRA
RC.CHG_JOBCD_BRA
RC.CHG_JOBPOS_BRA
RC.CHG_SAL_BRA
 
  Let $Process    = 'Y'
  Let $Estabid    = Rtrim(&RC.ESTABID, ' ')
  Let $DeptID     = Rtrim(&RC.DEPTID, ' ')
  Let $Emplid     = Rtrim(&RC.EMPLID, ' ')
  Let $ListOption = Rtrim(&RC.LIST_OPTION_BRA, ' ')
  Let $BeginDt    = Rtrim(&RC.BEGIN_DT, ' ')
  Let $EndDT      = Rtrim(&RC.END_DT, ' ')
  Let $CommentsOp = Rtrim(&RC.COMMENTS_OPT_BRA, ' ')
  Let $Chg_Dep    = Rtrim(&RC.CHG_DEP_BRA, ' ')
  Let $Chg_Est    = Rtrim(&RC.CHG_EST_BRA, ' ')
  Let $Chg_Job    = Rtrim(&RC.CHG_JOBCD_BRA, ' ')
  Let $Chg_Pos    = Rtrim(&RC.CHG_JOBPOS_BRA, ' ')
  Let $Chg_Sal    = Rtrim(&RC.CHG_SAL_BRA, ' ')
  
  Do Select-Installation

FROM  PS_EMPL_REG_RC_BRA RC
WHERE RC.OPRID = $prcs_oprid
AND   RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure Select-Parameters

!**************************************
begin-procedure Select-Installation
#debug show '** Select-Installation **'
!**************************************
Let $GPBrazil = 'N'
begin-select
A.INSTALLED_GP_BRA

  Let $GPBrazil   = rtrim(&A.INSTALLED_GP_BRA, ' ')
 
FROM  PS_INSTALLATION A
end-select
end-procedure Select-Installation

!**************************************
begin-procedure Process-Main
#debug show '** Process-Main **'
!**************************************
 Let $Condition01 = ''
 Let $Condition02 = ''
 Let $Condition03 = ''
 Let $Condition04 = ''
 Let $Condition05 = ''

 Do Select-Parameters
!664294001 
 Do Security-Param

 If $Process = 'Y' 
    Do Create-Arrays
    
    Evaluate $ListOption
    When = '1'
    break
    When = '2'
       If $Estabid <> ''
          Let $Condition01 = ' AND B.ESTABID = ' || '''' || $Estabid || ''''
          Let $Condition02 = ' AND A.ESTABID = ' || '''' || $Estabid || ''''
       end-if
     
       If $Deptid <> ''
          Let $Condition02 = $Condition02 || ' AND A.DEPTID = ' || '''' || $Deptid || ''''
       end-if
     
       If $Emplid <> ''
          Let $Condition02 = $Condition02 || ' AND A.EMPLID = ' || '''' || $Emplid || ''''
       end-if  
    break
    When = '3'
       If $Emplid <> ''
          Let $Condition02 = $Condition02 || ' AND A.EMPLID = ' || '''' || $Emplid || ''''
       end-if  
    break    
    end-evaluate
      If $Chg_Dep = 'Y' Or $Chg_Est = 'Y'
         Let $Condition04 = $Condition04 || ' JB.ACTION = ' || '''' || 'XFR' || ''''
      End-If
      If $Chg_Job = 'Y' Or $Chg_Pos = 'Y'
         If $Condition04 <> ''
            Let $Condition04 = $Condition04 || ' OR '
         End-If
         Let $Condition04 = $Condition04 || ' JB.ACTION = ' || '''' || 'POS' || ''''
      End-If
      If $Chg_Sal = 'Y'
         If $Condition04 <> ''
            Let $Condition04 = $Condition04 || ' OR '
         End-If
         Let $Condition04 = $Condition04 || ' JB.ACTION = ' || '''' || 'PAY' || ''''
      End-If
      If $Condition04 <> ''
         Let $Condition04 = ' AND EXISTS (SELECT JB.EMPLID FROM PS_JOB JB WHERE JB.EMPLID = A.EMPLID AND JB.ESTABID = A.ESTABID AND (' || $Condition04 || ') AND JB.EFFDT BETWEEN '
         Let $Condition04 = $Condition04 ||  '''' || $BeginDt || '''' || ' AND ' ||  '''' || $EndDt || '''' || ' )'
      End-If

    
    Evaluate $ListOption
    When = '1'
    When = '2'
    When = '3'
      if $Condition01 <> ''
         Do Select-Establishment
      else   
         Do Select-Employee-Data
      end-if
      break
    End-Evaluate
    
 else
    show 'Run Cntrl Missing'
 end-if    
#debug show '$Condition1 ' $Condition1
#debug show '$Condition2 ' $Condition2
#debug show '$Condition4 ' $Condition4  
end-procedure Process-Main

!**************************************
begin-procedure Create-Arrays
#debug show '** Create Arrays **'
!**************************************
 create-array name=Dependents size=1000 -
  Field=Emplid:Char
  Field=DepntName:Char
  Field=DepntBirthDt:Char
  Field=DepntMarstatus:Char
  Field=DepntRel:Char

 create-array name=Vacations size=1000 -
  Field=Emplid:Char
  Field=BeginPeriod:Char
  Field=EndPeriod:Char
  Field=BeginDt:Char
  Field=EndDt:Char
           
 create-array name=Absents size=1000 -
  Field=Emplid:Char
  Field=Reason:Char
  Field=BeginDt:Char
  Field=EndDt:Char
  Field=CID:Char

 create-array name=Salary size=1000 -
  Field=Emplid:Char
  Field=JobEffdt:Char     
  Field=JobReason:Char
  Field=JobSalary:Char

 create-array name=Position size=1000 -
  Field=Emplid:Char
  Field=JobEffdt:Char 
  Field=JobReason:Char
  Field=JobPosition:Char
  
 create-array name=Transfer size=1000 -
  Field=Emplid:Char
  Field=JobEffdt:Char 
  Field=JobReason:Char
  Field=JobLocation:Char
  
 create-array name=Union size=1000 -
  Field=Emplid:Char
  Field=UEffdt:Char 
  Field=Union:Char
  Field=UAmount:Char
  
 create-array name=Comments size=1000 -
  Field=Emplid:Char
  Field=CommentDt:Char 
  Field=CommentBy:Char
  Field=Comment:Char
  
 create-array name=Schedule size=1000 -
  Field=Day:Char
  Field=WrkDayId:Char 
  Field=SchDescr:Char
  Field=TimeDay:Char
   
End-procedure Create-Arrays

!**************************************
begin-procedure Clear-Arrays
#debug show '** Clear Arrays **'
!**************************************   
 clear-array name=Dependents 
 clear-array name=Vacations 
 clear-array name=Absents
 clear-array name=Salary
 clear-array name=Position
 clear-array name=Transfer
 clear-array name=Union 
 clear-array name=Comments
 clear-array name=Schedule
End-procedure Clear-Arrays

!**************************************
begin-procedure Select-Establishment
#debug show '** Select-Establishment **'
!**************************************
Begin-Select
B.ESTABID
B.COMPANY 
B.DESCR
B.ADDRESS1
B.ADDRESS2
B.ADDRESS3
B.ADDRESS4
B.CITY
B.STATE
B.POSTAL
B.NUM1
  
    Let $EstabIDNm     = Ltrim(Rtrim(&B.DESCR, ' '), ' ')
    Let $EstabIDNum1   = Ltrim(Rtrim(&B.NUM1, ' '), ' ')
    Let $EstabIDAdd1   = Ltrim(Rtrim(&B.ADDRESS1, ' '), ' ') 
    Let $CompanyAdd3   = Ltrim(Rtrim(&B.ADDRESS3, ' '), ' ') 
    Let $CompanyPostal = Ltrim(Rtrim(&B.POSTAL, ' '), ' ')
    Let $CompanyUF     = Ltrim(Rtrim(&B.STATE, ' '), ' ')
    Let $CompanyAdd2   = Ltrim(Rtrim(&B.ADDRESS2, ' '), ' ') 
    Let $CompanyNeigb  = Ltrim(Rtrim(&B.ADDRESS4, ' '), ' ')
    Let $CompanyCity   = Ltrim(Rtrim(&B.CITY, ' '), ' ')
    
    Let $CompanyAdd    = $EstabIDAdd1 || ' ' || $EstabIDNum1 || ' ' || $CompanyAdd3 
    Let $Company       = Rtrim(&B.COMPANY, ' ')
    Do Select-Estab-Id
    Do Select-Employee-Data
  
FROM PS_ESTAB_TBL B
,PS_ESTAB_TBL_BRA BB
WHERE B.ESTABID = BB.ESTABID
[$Condition01]
End-Select
End-Procedure Select-Establishment

!**************************************
begin-procedure Select-Estabid-Descr
#debug show '** Select-Estabid-Descr **'
!**************************************
Begin-Select
C.DESCRSHORT

  Let $JobEstabid = Rtrim(&C.DESCRSHORT, ' ')
 
FROM PS_ESTAB_TBL C
WHERE C.ESTABID = $JEstabid
AND   C.EFFDT   = (SELECT MAX(BB.EFFDT) 
                   FROM PS_ESTAB_TBL BB
                   WHERE C.ESTABID = BB.ESTABID
                   AND BB.EFFDT <= $AsOfToday) 
End-Select
End-Procedure Select-Estabid-Descr

!**************************************
begin-procedure Select-EstabID-Data
#debug show '** Select-EstabID-Data **'
!**************************************
Begin-Select
E.DESCR
E.ADDRESS1
E.ADDRESS2
E.ADDRESS3
E.ADDRESS4
E.CITY
E.STATE
E.POSTAL
E.NUM1

  Let $EstabIDNm     = Ltrim(Rtrim(&E.DESCR, ' '), ' ')
  Let $EstabIDNum1          = Ltrim(Rtrim(&E.NUM1, ' '), ' ')
  Let $EstabIDAdd1   = Ltrim(Rtrim(&E.ADDRESS1, ' '), ' ') 
  Let $CompanyAdd3   = Ltrim(Rtrim(&E.ADDRESS3, ' '), ' ') 
  Let $CompanyPostal = Ltrim(Rtrim(&E.POSTAL, ' '), ' ')
  Let $CompanyUF     = Ltrim(Rtrim(&E.STATE, ' '), ' ')
  Let $CompanyAdd2   = Ltrim(Rtrim(&E.ADDRESS2, ' '), ' ') 
  Let $CompanyNeigb  = Ltrim(Rtrim(&E.ADDRESS4, ' '), ' ')
  Let $CompanyCity   = Ltrim(Rtrim(&E.CITY, ' '), ' ')
  
  Let $CompanyAdd    = $EstabIDAdd1 || ' ' || $EstabIDNum1 || ' ' || $CompanyAdd3

  Do Select-Estab-Id 
  
FROM PS_ESTAB_TBL E
WHERE E.ESTABID = $Estabid
End-Select
End-Procedure Select-EstabID-Data

!**************************************
begin-procedure Select-Employee-Data
#debug show '** Select-Employee-Data **'
#debug show '$Condition02 ' $Condition02
#debug show '$Condition03 ' $Condition03
#debug show '$Condition04 ' $Condition04
#debug show '$SecurityClause ' $SecurityClause
!**************************************
Let $BirthDt                           = ' '
Let #TotalEmpl                         = 0
Let #CountC                            = 0
Let #CountJ                            = 0
Let #CountE                            = 0
Let #CountS                            = 0
Let #CountT                            = 0
Let #CountP                            = 0
Let #CountAb                           = 0
Let #CountSc                           = 0                        

Begin-Select  
A.EMPLID
A.EFFDT
A.COMPRATE
A.COMPANY
A.JOBCODE
A.SETID_JOBCODE
A.HOURLY_RT 
A.LOCATION
A.SETID_LOCATION
A.STD_HRS_FREQUENCY      
A.STD_HOURS
A.GP_PAYGROUP
A.DEPTID 
A.SETID_DEPT  
A.ESTABID       () On-Break Print=Never procedure=Select-EstabID-Data                    
A.POSITION_NBR
B.CONT_SAL_TYPE_BRA
C.NAME
F.BIRTHDATE
F.BIRTHPLACE
F.BIRTHSTATE
G.HIRE_DT
G.SERVICE_DT
G.TERMINATION_DT  

  Let #CountTra                          = 0
  Let #CountSal                          = 0
  Let #CountPos                          = 0
  Let #CountJob                          = 0
  Let $CondActionR                       = ''
  Let $Estabid                         = Rtrim(&A.ESTABID, ' ')
  
  #debug show 'A.EMPLID ' &A.EMPLID
  #debug show 'A.ESTABID ' &A.ESTABID
  If $Estabid <> ''  
    
     Do Clear-Arrays
  
     Let #TotalEmpl                       = #TotalEmpl + 1 
     Let $Company                         = Rtrim(&A.COMPANY, ' ')
     Let $Emplid                          = Rtrim(&A.EMPLID, ' ')  
     Let $Effdt                           = Rtrim(&A.EFFDT, ' ')     
     Let #StdHours                        = &A.STD_HOURS
     Let #Salary                          = &A.COMPRATE 
     Let $JJobCode                        = Rtrim(&A.JOBCODE,' ')
     Let $JJCSetid                        = Rtrim(&A.SETID_JOBCODE, ' ')
     Let #HourlyRt                        = &A.HOURLY_RT 
     Let $JLocation                       = Rtrim(&A.LOCATION, ' ')
     Let $JSetidLoc                       = Rtrim(&A.SETID_LOCATION, ' ')                    
     Let $Paygroup                        = Rtrim(&A.GP_PAYGROUP, ' ')
     Let $Deptid                          = Rtrim(&A.DEPTID, ' ')

     if #TotalEmpl = 1
        Do Select-EstabID-Data   
     end-if

     Let $Name                            = Rtrim(&C.NAME, ' ')
     Let $BirthState                      = Rtrim(&F.BIRTHSTATE, ' ')
     Let $BirthPlace                      = Rtrim(&F.BIRTHPLACE, ' ')
  
     Let $XlatValue                       = Rtrim(&B.CONT_SAL_TYPE_BRA,' ')    !  Salary Type
     Let $XlatField                       = 'CONT_SAL_TYPE_BRA'
     Do Evaluate-Xlat
     Let $Frequency                       = $XlatDescr
     Do Evaluate-XlatLang
     If $LangDescr<> ''      
        Let $Frequency = $LangDescr
     End-If   
     Let $BirthDate                       = Rtrim(&F.BIRTHDATE, ' ')
     Let $TermDt                          = Rtrim(&G.TERMINATION_DT,' ')  
     Let $HireDt                          = Rtrim(&G.SERVICE_DT, ' ')
     Let $JPosition                       = Rtrim(&A.POSITION_NBR, ' ')

     If $BirthDate <> ''
        Do convert-to-dtu-date(&F.BIRTHDATE,$BirthDate)
     End-if
     If $TermDt <> ''
        Do convert-to-dtu-date(&G.TERMINATION_DT,$TermDt) 
     End-if
     If $HireDt <> ''
        Do convert-to-dtu-date(&G.SERVICE_DT,$HireDt)
     End-if
  
     Do Select-JobCode-Descr
     Do Select-Position-Descr
     Do Select-Location-Descr
     Do Select-Personal-Data  
     Do Select-Dependents
  
     Let $DescLocation                    = $JobLocation
     Let $JobCode                         = $JobJobCode
     !Do Select-Actions
     Do Select-Job-Data
     Do Action_Reason-Lang
        If $JobReasonLang <> ''       
            move $JobReasonLang to $JobReason      
        End-If
     
     If $CommentsOp <> '1' or
        $CommentsOp <> '3'
        Do Select-Comments
     End-if

     If $GPBrazil = 'Y'  
        Do Select-Schedule-HR       
        if $DayWorks = ''
           Do Select-Schedule  
        end-if
        Do Select-Vacations
        Do Select-Absences  
        Do Select-Union-Data        
     else
        Do Select-Schedule-HR
     End-If

     Do Print-Employee
  end-if

FROM PS_JOB A
    ,PS_JOB_JR B
    ,PS_PERSON_NAME C
    ,PS_PERSON F
    ,PS_EMPLOYMENT G
    ,PS_FAST_SQR_SEC_VW SCRTY
WHERE A.EMPLID  = B.EMPLID
[$Condition04]
[$Condition02]
  AND A.EMPLID  = C.EMPLID
  AND A.EMPLID  = F.EMPLID
  AND A.EMPLID  = G.EMPLID
  AND A.EFFDT   = (SELECT MAX(AA.EFFDT) FROM PS_JOB AA 
                  WHERE A.EMPLID = AA.EMPLID
                  AND A.ESTABID = AA.ESTABID
                  AND AA.ACTION IN ('HIR', 'REH'))
  AND A.EFFDT   = B.EFFDT   
  AND A.EFFSEQ =  (SELECT MAX(AA.EFFSEQ) FROM PS_JOB AA 
                   WHERE A.EMPLID = AA.EMPLID
                   AND   A.EFFDT  = AA.EFFDT)
AND A.EFFSEQ   = B.EFFSEQ                   
AND A.EMPL_RCD = B.EMPL_RCD     
AND A.EMPL_RCD = G.EMPL_RCD
[$Condition03]
AND A.EMPLID = SCRTY.EMPLID 
[$SecurityClause] 
ORDER BY A.ESTABID, A.EMPLID
End-Select

show '  Empregados: ' #TotalEmpl
End-Procedure Select-Employee-Data

!**************************************
begin-procedure Select-Estab-Id
#debug show '** Select-Estab-Id **'
!**************************************
Let $Authorization = '0000000'

Begin-Select
A.ESTAB_ID_TYPE_BRA
A.ESTAB_ID_BRA

  Let $EstabIdType = rtrim(&A.ESTAB_ID_TYPE_BRA, ' ')
 
  Evaluate $EstabIdType
  when = 'CNPJ'
       Let $CNPJ = Rtrim(&A.ESTAB_ID_BRA, ' ')
  when = 'CNAE'
       Let #CNAE = &A.ESTAB_ID_BRA  
       Let $CNAE = Edit(#CNAE, '00000')
  End-Evaluate
  
FROM  PS_ESTAB_ID_BRA A
     ,PS_ESTAB_TBL_BRA A2
WHERE A.ESTABID = $EstabId
AND   A.ESTABID = A2.ESTABID
AND   A.COUNTRY = 'BRA'
AND   A.COUNTY_CD_BRA  = A2.COUNTY_CD_BRA
AND   A.EFFDT = A2.EFFDT
End-Select
End-Procedure Select-Estab-Id

!**************************************
begin-procedure Select-Personal-Data
#debug show '** Select-Personal-Data **'
!**************************************
 Do Select-Person-Bra
 Do Select-Personal-Data-Effdt
 Do Select-Personal-Data-BRA
 Do Select-Payee-Parm
 Do Select-Payee-Sta-Parm
 Do Select-National-Id
 Do Select-Drivers-Lic
 Do Address-History
 Do Select-Education
End-Procedure Select-Personal-Data

!**************************************
begin-procedure Select-Personal-Data-Effdt
#debug show '** Select-Personal-Data-Effdt **'
!**************************************
Begin-Select  
D.MAR_STATUS
D.SEX

  Let $XlatValue = Rtrim(&D.MAR_STATUS, ' ') 
  Let $XlatField = 'MAR_STATUS'
  Do Evaluate-Xlat
  Let $MarStatus = $XlatDescr
  Do Evaluate-XlatLang
  If $LangDescr<> ''   
     Let $MarStatus =$LangDescr
  End-If
  Let $Sex       = Rtrim(&D.SEX, ' ')
    
FROM PS_PERS_DATA_EFFDT D
WHERE D.EMPLID  = $Emplid
  AND D.EFFDT   = (SELECT MAX(DD.EFFDT) 
                   FROM PS_PERS_DATA_EFFDT DD
                   WHERE D.EMPLID = DD.EMPLID
                   AND DD.EFFDT <= $AsOfToday)
End-Select
End-Procedure Select-Personal-Data-Effdt

!**************************************
begin-procedure Select-Personal-Data-BRA
#debug show '** Select-Personal-Data-BRA **'
!**************************************
Begin-Select  
E.EDUCATION_LVL_BRA
E.NATIONALITY_CD_BRA
 
  Let $XlatValue = Rtrim(&E.NATIONALITY_CD_BRA, ' ') 
  Let $XlatField = 'NATIONALITY_CD_BRA'
  Do Evaluate-Xlat
  Let $Nationality = $XlatDescr
  Do Evaluate-XlatLang
  If $LangDescr<> ''   
     Let $Nationality =$LangDescr
  End-If
  If $XlatValue <> '10'
     Let $ForeignChild = 'Y'
     If $XlatValue = '20'
        Let $ForeignNat = 'S'
     else
        Let $ForeignNat = 'N'
     end-if
     Do Visa-Data
     Do Passport-Data
  else
     Let $ForeignDt   = ''
     Let $ForeignNbr  = ''
     Let $ForeignNat  = ''
     Let $ForeignMar  = ''
     Let $ForeignChild = ''
  end-if
   
  Let $XlatValue = Rtrim(&E.EDUCATION_LVL_BRA, ' ')  
  Let $XlatField = 'EDUCATION_LVL_BRA'
  Do Evaluate-Xlat
  Let $EducationLvl = $XlatDescr
  Do Evaluate-XlatLang
  If $LangDescr<> ''   
     Let $EducationLvl = $LangDescr
  End-If
  
FROM PS_PERS_DATA_BRA E 
WHERE E.EMPLID  = $Emplid
  AND E.EFFDT   = (SELECT MAX(EE.EFFDT) 
                   FROM PS_PERS_DATA_BRA EE
                   WHERE EE.EMPLID = E.EMPLID
                   AND EE.EFFDT <= $AsOfToday)
End-Select
End-Procedure Select-Personal-Data-BRA

!**************************************
begin-procedure Select-Person-Bra
#debug show '** Select-Person-Bra **' 
!**************************************
Let $CTPSSerie                         = ''
Let $CTPSDate                          = ''
Let $MilitarCategory                   = ''
Let $MilitarRegion                     = ''
Let $MilitarState                      = ''
Let $PISDt                             = ''
Let $RGDt                              = ''
Let $RGState                           = ''
Let $VoterZone                         = ''
Let $VoterSeccion                      = ''

Begin-Select  
I.CTPS_SERIES_BRA
!I.CTPS_STATE_BRA
I.CTPS_EXP_DT_BRA
I.MILITAR_CAT_BRA
I.PIS_PASEP_DT_BRA
I.RG_ISSUEDBY_BRA
I.RG_ISSUED_DT_BRA
I.RG_STATE_BRA
I.VOTER_ZONE_BRA
I.VOTER_SECTION_BRA
I.MILITAR_SERIES_BRA

 Let $CTPSSerie                     = Rtrim(&I.CTPS_SERIES_BRA, ' ')
 Let $CTPSDate                      = Rtrim(&I.CTPS_EXP_DT_BRA, ' ')
 Let $MilitarCategory               = Rtrim(&I.MILITAR_CAT_BRA, ' ')
 Let $PISDt                         = Rtrim(&I.PIS_PASEP_DT_BRA, ' ')
 Let $RGDt                          = Rtrim(&I.RG_ISSUED_DT_BRA, ' ')
 Let $RGState                       = Rtrim(&I.RG_STATE_BRA, ' ')
 Let $VoterZone                     = Rtrim(&I.VOTER_ZONE_BRA, ' ')
 Let $VoterSeccion                  = Rtrim(&I.VOTER_SECTION_BRA, ' ')
 Let $RGIssued                      = Rtrim(&I.RG_ISSUEDBY_BRA, ' ')

 If $PISDt    <> ''
    Do convert-to-dtu-date(&I.PIS_PASEP_DT_BRA,$PISDt)
 End-if
 If $CTPSDate <> ''
    Do convert-to-dtu-date(&I.CTPS_EXP_DT_BRA,$CTPSDate)    
 End-if
 If $RGDt    <> ''
     Do convert-to-dtu-date(&I.RG_ISSUED_DT_BRA,$RGDt)
 End-if
    
FROM PS_PERSON_BRA I
WHERE I.EMPLID  = $Emplid
End-Select
End-Procedure Select-Person-Bra

!**************************************
begin-procedure Select-Payee-Parm
#debug show '** Select-Payee-Data **'
!**************************************
Let $EmplidNum = $Emplid
Begin-Select  
NN.GPBR_REG_NUMBER
NN.GPBR_FGTS_DT
    
  Let $RegNum = Rtrim(&NN.GPBR_REG_NUMBER, ' ')
  Let $FGTSDt = Rtrim(&NN.GPBR_FGTS_DT, ' ')
  
  If $FGTSDt <> ''
     Do convert-to-dtu-date(&NN.GPBR_FGTS_DT,$FGTSDt)
  end-if 
 
  Do Convert-from-DTU-Date($FGTSDt,$FGTSDt) 
  Do Format-DateTime($FGTSDt ,$FGTSDt , {DEFDMY},'','') 
  
FROM PS_GPBR_PAYEE_PARM NN
WHERE NN.EMPLID = $Emplid
End-Select
End-Procedure Select-Payee-Parm

!**************************************
begin-procedure Select-Payee-Sta-Parm
#debug show '** Select-Payee-Est-Data **'
!**************************************
Let $Cipa = 'N'
Begin-Select  
N.GPBR_CIPA_TITLE
    
  Let #CIPA                            = &N.GPBR_CIPA_TITLE
  if #CIPA = 1
     Let $Cipa = 'Y'
  end-if
  
FROM PS_GPBR_PYEST_PARM N
WHERE N.EMPLID = $Emplid
End-Select
End-Procedure Select-Payee-Sta-Parm

!**************************************
begin-procedure Select-Education
#debug show '** Select-Education **'
!**************************************
Begin-Select  
A.MAJOR
  
  Let $Education =  Rtrim(&A.MAJOR, ' ') 

FROM PS_ACCOMPLISHMENTS A
    ,PS_DEGREE_VW BB
WHERE A.EMPLID         = $Emplid
AND   A.ACCOMPLISHMENT = BB.ACCOMPLISHMENT
End-Select
End-Procedure Select-Education

!**************************************
begin-procedure Select-Accomplishments
#debug show '** Select-Accomplishments **'
!**************************************
Begin-Select  
A.ACCOMPLISHMENT
A.LICENSE_NBR
A.COUNTRY
A.STATE
AB.DESCR
  
  Let #Licence = &A.LICENSE_NBR
  Let $Accom   = Rtrim(&AB.DESCR, ' ')
  Let $ACountry = &A.COUNTRY
  Let $AState   = &A.STATE
  
  Print $Accom                     (+1  ,{caa}) Bold
  Print #Licence                   (    ,50) Edit 99999999999999 Bold
  Print $ACountry                  (    ,  90 ) Bold
  Print $AState                    (    , 110 ) Bold
  
FROM PS_ACCOMPLISHMENTS A
    ,PS_LIC_CERTIF_VW AB 
WHERE A.EMPLID         = $Emplid
AND   A.ACCOMPLISHMENT = AB.ACCOMPLISHMENT
End-Select
End-Procedure Select-Accomplishments

!**************************************
begin-procedure Evaluate-Xlat
#debug show '** Evaluate-Xlat **'
!**************************************
Let $XlatDescr = ''

Begin-Select     
XX.XLATLONGNAME

  Let $XlatDescr = Rtrim(&XX.XLATLONGNAME,' ')
FROM XLATTABLE_VW XX
WHERE XX.FIELDNAME  = $XlatField
AND   XX.FIELDVALUE = $XlatValue 
End-Select
End-Procedure Evaluate-Xlat

!**************************************
begin-procedure Evaluate-XlatLang
#debug show '** Evaluate-XlatLang **'
!716552001
!**************************************
Let $LangDescr = ''

Begin-Select     
XL.XLATSHORTNAME  
  Let $LangDescr = Rtrim(&XL.XLATSHORTNAME,' ')
FROM PSXLATITEMLANG XL
WHERE XL.FIELDNAME = $XlatField
AND XL.FIELDVALUE= $XlatValue
AND XL.LANGUAGE_CD = $Curr_language_Cd 
End-Select
End-Procedure Evaluate-XlatLang

!**************************************
begin-procedure Select-JobCode-Descr
#debug show '** Select-Jobcode-Descr **'
!**************************************
Let $JobJobCode                        = ''
Let $Function                          = ''
Let $FunCd                             = ''

Begin-Select     
A.DESCR 
A.JOB_FUNCTION

  Let $JobJobCode  = Rtrim(&A.DESCR,' ')
  Let $FunCd       = Rtrim(&A.JOB_FUNCTION,' ')
  
FROM PS_JOBCODE_TBL A
WHERE A.SETID  = $JJCSetid
AND   A.JOBCODE = $JJobCode
AND   A.EFFDT = (SELECT MAX(AA.EFFDT) 
                 FROM PS_JOBCODE_TBL AA
                 WHERE A.SETID = AA.SETID
                 AND   A.JOBCODE = AA.JOBCODE
                 AND   AA.EFFDT <= $AsOfToday)
End-Select

If $FunCd <> ''
Begin-Select     
BB.DESCR
  
  Let $Function = Rtrim(&BB.DESCR,' ')
  
FROM PS_JOBFUNCTION_TBL BB
WHERE BB.JOB_FUNCTION = $FunCd            
End-Select
else
Let $Function = ''
End-if                  
End-Procedure Select-Jobcode-Descr


!**************************************
begin-procedure JobCode-Lang
#debug show '** JobCode-Lang **'
!**************************************
Let $JobCode_Descr=''

Begin-select
JC.DESCR
 MOVE &JC.DESCR TO $JobCode_Descr
from PS_JOBCODE_LANG JC
where JC.SETID = $JJCSetid 
and   JC.JOBCODE = $JJobCode
AND   JC.LANGUAGE_CD = $Curr_language_Cd 
and   JC.EFFDT =  (SELECT MAX(EFFDT) 
                   FROM PS_JOBCODE_LANG
                   WHERE SETID = JC.SETID
                   AND JOBCODE = JC.JOBCODE
                   AND LANGUAGE_CD = JC.LANGUAGE_CD
                   AND EFFDT <= $End_Dt)

end-select
End-Procedure JobCode-Lang


!**************************************
begin-procedure Select-Position-Descr
#debug show '** Select-Position-Descr **'
!**************************************
Let $JobPosition = ''
if $JPosition <> ''
Begin-Select     
P.DESCRSHORT

  Let $JobPosition  = Rtrim(&P.DESCRSHORT,' ')    
  Do Evaluate-XlatLang
  If $JobPosition<> ''      
        Let $JobPosition = $LangDescr
  End-If     
  
FROM PS_POSITION_DATA P
WHERE P.POSITION_NBR = $JPosition
AND  P.EFFDT = (SELECT MAX(AA.EFFDT) 
                FROM PS_POSITION_DATA AA
                WHERE AA.POSITION_NBR = P.POSITION_NBR
                AND AA.EFFDT <= $AsOfToday)       
End-Select
end-if
End-Procedure Select-Position-Descr

!**************************************
begin-procedure Position-Lang
#debug show '** Position-Lang **'
#debug show '$JPosition: ' $JPosition
#debug show '$Curr_language_Cd: ' $Curr_language_Cd 
#debug show '$AsOfToday: ' $AsOfToday 
!**************************************
Let $JobPositionL  = ''

Begin-Select     
PL.DESCRSHORT

  Let $JobPositionL = Rtrim(&PL.DESCRSHORT,' ')
  
FROM PS_POSN_DATA_LANG PL
WHERE PL.POSITION_NBR = $JPosition
AND   PL.LANGUAGE_CD = $Curr_language_Cd 
AND   PL.EFFDT = (SELECT MAX(PLA.EFFDT) 
                  FROM PS_POSN_DATA_LANG PLA
                  WHERE PL.POSITION_NBR = PLA.POSITION_NBR
                  AND   PL.LANGUAGE_CD = PLA.LANGUAGE_CD
                  AND   PLA.EFFDT <= $AsOfToday)
End-Select
End-Procedure Position-Lang

!**************************************
begin-procedure Action_Reason-Lang
#debug show '** Action_Reason-Lang **'
!**************************************
Let $JobReasonLang  = ''

Begin-Select  
AR.DESCR
     Let $JobReasonLang = Rtrim(&AR.DESCR,' ')           
AR.DESCRSHORT 
  
FROM PS_ACTN_RSN_LANG AR
WHERE AR.ACTION = $Action
AND   AR.ACTION_REASON= $ActionReason
AND   AR.LANGUAGE_CD = $Curr_language_Cd 
AND   AR.EFFDT = (SELECT MAX(ARL.EFFDT) 
                  FROM PS_ACTN_RSN_LANG ARL
                  WHERE AR.ACTION = ARL.ACTION 
                  AND AR.ACTION_REASON = ARL.ACTION_REASON
                  AND ARL.EFFDT <= $AsOfToday)
End-Select

End-Procedure Action_Reason-Lang


!**************************************
begin-procedure Select-Location-Descr
#debug show '** Select-Location-Descr **'
!**************************************
Let $JobLocation  = ''

Begin-Select     
B.DESCRSHORT

  Let $JobLocation = Rtrim(&B.DESCRSHORT,' ')
  
FROM PS_LOCATION_TBL B
WHERE B.SETID = $JSetidLoc
AND   B.LOCATION = $JLocation
AND   B.EFFDT = (SELECT MAX(A.EFFDT) 
                 FROM PS_LOCATION_TBL A
                 WHERE A.SETID = B.SETID
                 AND   A.LOCATION = B.LOCATION
                 AND   A.EFFDT <= $AsOfToday)
End-Select
End-Procedure Select-Location-Descr


!**************************************
begin-procedure Select-Deptid-Descr
#debug show '** Select-Deptid-Descr **'
#debug show '    $JDeptid : ' $JDeptid
!**************************************
Begin-Select     
DD.DESCRSHORT

  Let $JobDeptid                    = Rtrim(&DD.DESCRSHORT,' ')
  
FROM PS_DEPT_TBL DD
WHERE DD.SETID   = $JDeptidSetid
AND   DD.DEPTID  = $JDeptid
AND   DD.EFFDT   =  (SELECT MAX(EFFDT) 
                     FROM PS_DEPT_TBL
                     WHERE SETID    = DD.SETID
                     AND   DEPTID   = DD.DEPTID
                     AND   EFFDT <= $AsOfToday)
AND   DD.EFF_STATUS = 'A'  
End-Select
End-Procedure Select-Deptid-Descr


!**************************************
begin-procedure Visa-Data
#debug show '** Visa-Data **'
!**************************************
Let $ForeignDt  = ''
Let #ForeignNbr = 0
Let $ForeignSta = ''

Begin-Select     
A.VISA_WRKPMT_NBR
A.DT_ISSUED
A.VISA_WRKPMT_STATUS
A.ENTRY_DT

  Let $ForeignDt  = Rtrim(&A.ENTRY_DT,' ')
  Let $ForeignDtExp  = Rtrim(&A.DT_ISSUED,' ')
  Do convert-to-dtu-date($ForeignDt,$ForeignDt)
  Do convert-to-dtu-date($ForeignDtExp,$ForeignDtExp)

  Let #ForeignNbr = &A.VISA_WRKPMT_NBR

  Let $XlatValue = Rtrim(&A.VISA_WRKPMT_STATUS, ' ')
  Let $XlatField = 'VISA_WRKPMT_STATUS'
  Do Evaluate-Xlat
  Let $ForeignSta = $XlatDescr 
  
FROM PS_VISA_PMT_DATA A
WHERE A.EMPLID  = $Emplid
AND   A.EFFDT   = (SELECT MAX(AA.EFFDT) 
                   FROM PS_VISA_PMT_DATA AA 
                   WHERE AA.EMPLID  = A.EMPLID
                   AND   AA.COUNTRY = A.COUNTRY
                   AND   AA.EFFDT <= $AsOfToday)
AND   A.COUNTRY = 'BRA'                
End-Select
End-Procedure Visa-Data


!**************************************
begin-procedure Passport-Data
#debug show '** Passport-Data **'
!**************************************
Let $ForeignPDt  = ''
Let #ForeignPNbr = 0

Begin-Select     
PA.PASSPORT_NBR
PA.DT_ISSUED

  Let $ForeignPDt  = Rtrim(&PA.DT_ISSUED,' ')
  Do convert-to-dtu-date($ForeignPDt ,$ForeignPDt )

  Let #ForeignPNbr = &PA.PASSPORT_NBR
  
FROM PS_CITIZEN_PSSPRT PA
WHERE PA.EMPLID  = $Emplid
AND   PA.COUNTRY_PASSPORT = 'BRA'                
End-Select
End-Procedure Passport-Data


!**************************************
begin-procedure Address-History
#debug show '** Address-History **'
!**************************************
Let $Address                           = '' 
Let $Neighborhood                      = ''
Let $City                              = ''
Let $State                             = ''

Begin-Select     
AD.ADDRESS1
AD.ADDRESS2
AD.NUM1
AD.ADDRESS4
AD.CITY
AD.EFFDT
AD.STATE
AD.POSTAL
  
  Let $Address                         = Rtrim(&AD.ADDRESS1,' ')
  Let $Address2                        = Rtrim(&AD.ADDRESS2,' ')  
  Let $Number                          = Rtrim(&AD.NUM1, ' ')  
  Let $Address                         = $Address  || ' ' || $Number || ' ' || $Address2 
  Let $Address                         = Ltrim(Rtrim($Address, ' '), ' ')
  Let $Neighborhood                    = Rtrim(&AD.ADDRESS4, ' ')
  Let $City                            = Rtrim(&AD.City, ' ')
  Let $State                           = Rtrim(&AD.STATE, ' ')
  Let $Postal                          = Rtrim(&AD.POSTAL, ' ')
  
FROM PS_ADDRESSES AD
WHERE AD.EMPLID  = $Emplid
AND AD.ADDRESS_TYPE = 'HOME'
AND AD.EFF_STATUS = 'A'
AND   AD.EFFDT   = (SELECT MAX(BB.EFFDT) 
                    FROM PS_ADDRESSES BB 
                    WHERE BB.EMPLID = AD.EMPLID
                    AND BB.ADDRESS_TYPE = AD.ADDRESS_TYPE
                    AND BB.EFF_STATUS = AD.EFF_STATUS
                    AND BB.EFFDT <= $AsOfToday)
End-Select
End-Procedure Address-History


!**************************************
begin-procedure Select-Dependents
#debug show '** Select-Dependents **'
!**************************************
Let #CountDep                          = 0
Let #ChildNo                           = 0
Let $ForeignChildBra                   = 'N'
Let $ForeignSpou                       = 'N'
Let $XlatField                         = ''
Let $XlatValue                         = ''

Begin-Select     
DE.NAME
DE.RELATIONSHIP
X.XLATLONGNAME
X.FIELDNAME             
X.FIELDVALUE            
DE.DEP_BENEF_TYPE
DE.BIRTHDATE
DE.MAR_STATUS
DE.BIRTHCOUNTRY

  Let $DepntName                       = Rtrim(&DE.NAME, ' ')
  Let $DepBenefType                    = Rtrim(&DE.DEP_BENEF_TYPE, ' ')  
  Let $RelationS                       = Rtrim(&DE.RELATIONSHIP, ' ')
  Let $BirthCountry                    = Rtrim(&DE.BIRTHCOUNTRY, ' ')
  Let $XlatField                       = Rtrim(&X.FIELDNAME, ' ')
  Let $XlatValue                       = Rtrim(&X.FIELDVALUE, ' ')
  
  Evaluate $RelationS
    when = 'FA'
      Let $Father                      = Rtrim(&DE.NAME, ' ')  
    when = 'M'
      Let $Mother                      = Rtrim(&DE.NAME, ' ') 
    when = 'SP'
      If $BirthCountry = 'BRA'
         Let $ForeignSpou              = 'S'
      else
         Let $ForeignSpou              = 'N'
      end-if
    when = 'S'
    when = 'D'
    when = 'XC'
    when = 'XD'
    when = 'XS'
      Let #ChildNo                     = #ChildNo + 1
      if $BirthCountry = 'BRA' 
         Let $ForeignChildBra = 'S'
      end-if
  End-Evaluate
  
  If $DepBenefType <> 'N'
     Let $DepntBirthDt                 = Rtrim(&DE.BIRTHDATE, ' ')
     If  $DepntBirthDt <> ''
         Do convert-to-dtu-date(&DE.BIRTHDATE,$DepntBirthDt) 
     end-if 
     Let $XlatValue = Rtrim(&DE.MAR_STATUS, ' ') 
     Let $XlatField = 'MAR_STATUS'
     Do Evaluate-Xlat
     Let $DepntMarStatus = $XlatDescr
     Do Evaluate-XlatLang
     If $LangDescr<>''
        Let $DepntMarstatus = $LangDescr
     End-If 
     Let $DepntRel                     = Rtrim(&X.XLATLONGNAME, ' ')
     Do Evaluate-XlatLang
     If $LangDescr<>''
         Let $DepntRel = $LangDescr
     End-If
       
          
!    Create Array: Dependents
     Let #CountDep = #CountDep + 1
   
     Put $Emplid $DepntName $DepntBirthDt $DepntMarstatus $DepntRel 
     into Dependents(#CountDep) Emplid DepntName DepntBirthDt DepntMarstatus DepntRel 
  End-if
  
FROM PS_DEPENDENT_BENEF DE
    ,XLATTABLE_VW X
WHERE DE.EMPLID = $Emplid
AND X.FIELDVALUE = DE.RELATIONSHIP
AND X.FIELDNAME  = 'RELATIONSHIP'

End-Select
End-Procedure Select-Dependents


!***************************************
begin-procedure Select-National-Id
#debug show '** Select-National-Id **'
!***************************************
Let $PIS                               = ''
Let $CTPS                              = ''
Let $CRES                              = ''
Let $CPF                               = ''
Let $RG                                = ''
Let $TITEL                             = ''

Begin-Select
A.NATIONAL_ID
A.NATIONAL_ID_TYPE

   Let $NationalId                     = Rtrim(&A.NATIONAL_ID_TYPE, ' ')
 
   Evaluate $NationalId 
   when = 'PIS'
     Let $PIS                          = Rtrim(&A.NATIONAL_ID,' ')
   when = 'CTPS'
     Let $CTPS                         = Rtrim(&A.NATIONAL_ID,' ') 
   when = 'C-RES'
     Let $CRES                         = Rtrim(&A.NATIONAL_ID,' ') 
   when = 'TIT-EL'
     Let $TITEL                        = Rtrim(&A.NATIONAL_ID,' ') 
   when = 'CPF'
     Let $CPF                          = Rtrim(&A.NATIONAL_ID,' ')  
   when = 'RG'
     Let $RG                           = Rtrim(&A.NATIONAL_ID,' ')  
   when = 'ESTRAN'
     Let $EXTRAN                       = Rtrim(&A.NATIONAL_ID,' ')  
   End-Evaluate
   
from PS_PERS_NID A
WHERE A.EMPLID  = $Emplid
AND   A.COUNTRY = 'BRA' 
End-Select
End-Procedure Select-National-Id

!***************************************
begin-procedure Select-Drivers-Lic
#debug show '** Select-Drivers-Lic **'
!***************************************
Let #DriverLic                       = 0
Let $DriverDtFrom                    = ''
Let $DriverDtTo                      = ''

Begin-Select
A.DRIVERS_LIC_NBR
A.VALID_FROM_DT
A.EXPIRATN_DT

   Let #DriverLic                   = &A.DRIVERS_LIC_NBR
   Let $DriverDtFrom                = Rtrim(&A.VALID_FROM_DT, ' ')
   Let $DriverDtTo                  = Rtrim(&A.EXPIRATN_DT, ' ')
   
   if $DriverDtFrom <>  ''
       Do convert-to-dtu-date(&A.VALID_FROM_DT,$DriverDtFrom) 
   End-if
   
   if $DriverDtto <>  ''
      Do convert-to-dtu-date(&A.EXPIRATN_DT,$DriverDtto) 
   End-if
   
   Let $DriverLic                   = Edit(#DriverLic, '99999999999999999999')
   Let $DriverLic                   = Ltrim(Rtrim($DriverLic, ' '), ' ')
  
FROM PS_DRIVERS_LIC A
WHERE A.EMPLID  = $Emplid
AND   A.COUNTRY = 'BRA' 
End-Select
End-Procedure Select-Drivers-Lic

!**************************************
begin-procedure Select-Schedule-HR
#debug show '** Select-Schedule-HR **'
!**************************************
Let $DayWorks = ''
 
Begin-Select
A.ABSW_SCHD_ID
B.DESCR50
 
   Let $DayWorks = Rtrim(&B.DESCR50, ' ')
   
FROM PS_ABSW_SCHEDULE A
    ,PS_ABSW_SCHD_TBL B
WHERE A.EMPLID = $Emplid
AND A.ABSW_SCHD_ID =  B.ABSW_SCHD_ID
AND A.BEGIN_DT = (SELECT MAX(AA.BEGIN_DT)
                  FROM   PS_ABSW_SCHEDULE AA
                  WHERE AA.EMPLID = A.EMPLID)
End-Select
End-Procedure Select-Schedule-HR

!**************************************
begin-procedure Select-Schedule
#debug show '** Select-Schedule **'
!**************************************
 Let $OffDay = ''
 Let $WrkDayId    = ''
 Let #DayNumber = 1
 Let #CountSch  = 0
 
 Do convert-to-dtu-date($Effdt, $BeginDay)
 Do dtu-add-days($BeginDay, 6, $EndDay)
 Do convert-from-dtu-date($BeginDay, $BeginDay)
 Do convert-from-dtu-date($EndDay, $EndDay)
 
 Do Select-Work-Days
  
 if $WrkDayId =''
    Do Select-Sch-Defn
 end-if
End-Procedure Select-Schedule

!**************************************
begin-procedure Select-Work-Days
#debug show '** Select-Work-Days **'
#debug show '   $Paygroup: ' $Paygroup
#debug show '   $EndDay:   ' $EndDay
#debug show '   $BeginDay: ' $BeginDay
!**************************************
Let $WrkDayId = ''
Let $WrkDayIdAnt = ''
!Difference between SS version and environment=>The following line was added inthe env. version
Do convert-to-dtu-date($Effdt,$Effdt) 
Do convert-from-dtu-date($Effdt,$Effdt) 

Begin-Select 
B2.WRKDAY_ID
B2.DUR
B2.DESCR

 Let $WrkDayId = Rtrim(&B2.WRKDAY_ID, ' ')
 Let $Day      = Rtrim(&B2.DUR, ' ')
 Let $SchDescr = Rtrim(&B2.DESCR, ' ')

 Let $SchDescr = $SchDescr || ' - '
 Do convert-to-dtu-date($Day,$Day) 
 
 If $WrkDayId = 'OFF'
    Do dtu-dayofweek#($Day, #dayofweek)
    Let $dayofweek = Edit(#dayofweek,'0') 
    Let $TimeDAy = '0'
   
    Evaluate $dayofweek
      when = '1'
        Let $DayName = 'Domingo'
      when = '2'
        Let $DayName = 'Segunda'
      when = '3'
        Let $DayName = 'Terça'
      when = '4'
        Let $DayName = 'Quarta'
      when = '5'
        Let $DayName = 'Quinta'
      when = '6'
        Let $DayName = 'Sexta'
      when = '7'
        Let $DayName = 'Sáb'
    End-Evaluate
!   Create Array: Schedule
    Let #CountSch = #CountSch + 1
       
    Put $DayName $WrkDayId $SchDescr $TimeDay  
    into Schedule(#CountSch) Day WrkDayId SchDescr TimeDay 
 else 
    If $WrkDayId <> $WrkDayIdAnt
       Let $WrkDayIdAnt = $WrkDayId
       Let $DayName = ' '
       Do Select-Time
!      Create Array: Schedule
       Let #CountSch = #CountSch + 1
              
    Put $DayName $WrkDayId $SchDescr $TimeDay  
    into Schedule(#CountSch) Day WrkDayId SchDescr TimeDay 
    End-if
 end-if

FROM PS_GP_PYGRP_DTL A2
    ,PS_SCH_CLND_DTL_VW B2
    !,PS_SCH_WRKDAY_TBL C
WHERE A2.EFFDT = (SELECT MAX(A_ED.EFFDT) 
                 FROM PS_GP_PYGRP_DTL A_ED 
                 WHERE A2.GP_PAYGROUP = A_ED.GP_PAYGROUP
                 AND A_ED.EFFDT <= $Effdt)
AND A2.SCHEDULE_ID = B2.SCHEDULE_ID 
!AND B.WRKDAY_ID   = C.WRKDAY_ID
AND A2.GP_PAYGROUP = $Paygroup
AND B2.DUR BETWEEN $BeginDay AND $EndDay
ORDER BY B2.WRKDAY_ID
End-Select
End-Procedure Select-Work-Days

!**************************************
begin-procedure Select-Sch-Defn
#debug show '** Select-Sch-Defn **'
!**************************************
 Let $WrkDayId = '' 
!Difference between SS version and environment=>The following line was added inthe env. version 
!Do convert-from-dtu-date($Today,$Today)

Begin-Select 
B1.DESCR

 
   Let $TimeWorks1 = Rtrim(&B1.DESCR, ' ')
 
FROM PS_GP_PYGRP_DTL A 
    ,PS_SCH_DEFN_TBL B1
WHERE A.EFFDT = (SELECT MAX(A_ED.EFFDT) 
                 FROM PS_GP_PYGRP_DTL A_ED 
                 WHERE A.GP_PAYGROUP = A_ED.GP_PAYGROUP
                 AND A_ED.EFFDT <= $AsOfToday)
AND A.SCHEDULE_ID = B1.SCHEDULE_ID               
AND A.GP_PAYGROUP = $Paygroup
End-Select
End-Procedure Select-Sch-Defn

!**************************************
begin-procedure Select-Time
#debug show '** Select-Time **'
#debug show '   $WrkDayId: ' $WrkDayId
#debug show '$AsOfToday: ' $AsOfToday
!**************************************
 Let $InHrs   = ''
 Let $OutHrs  = ''
 Let $MealHrs = ''
 Let $TimeDay = ''
 Let #CountTime = 0
      
Begin-Select
A.PUNCH_TIME
A.PUNCH_TYPE

  Let $PunchTime = Rtrim(&A.PUNCH_TYPE,' ')
  Let $Time      = Rtrim(&A.PUNCH_TIME,' ')
  Let #Counter     = 1
  Let #LenField    = Length($Time)   
  
  While #Counter  <= #LenField
    Let $Char    = Substr($Time,#Counter, 1)  
    If $Char = ' '
       Let #Counter = #Counter + 1
       Let #End  = #LenField - #Counter
       Let $Time = Substr($Time ,#Counter, 5)  
       Let #Counter = #LenField
    End-if
    Add 1 To #Counter
  End-While
  
  !Entrada: 0800 Intervalo: 13:00 às 15:00 Saída: 18:00
  
  Evaluate $PunchTime
     when = '1'
       If #CountTime = 0
          Let $TimeDay = $TimeDay || ' Entrada: ' || $Time 
          Let #CountTime = 1
       else
           Let $TimeDay = $TimeDay || ' às ' || $Time 
       end-if
     when = '2'
       Let $TimeDay = $TimeDay || ' Saída: ' || $Time 
     when = '3'
     when = '4' 
       If #CountTime = 1
          Let $TimeDay = $TimeDay || ' Intervalo: ' || $Time 
          Let #CountTime = 2
       else
          Let $TimeDay = $TimeDay || ' Saída: ' || $Time 
       end-if
  End-Evaluate
  
FROM PS_SCH_SHIFT_DTL  A
    ,PS_SCH_SHIFT_TBL B
WHERE A.SHIFT_ID = B.SHIFT_ID
AND A.EFFDT = (SELECT MAX(AA.EFFDT) 
               FROM PS_SCH_SHIFT_DTL AA
               WHERE A.SHIFT_ID = AA.SHIFT_ID
               AND AA.EFFDT <= $AsOfToday)
AND B.EFFDT = (SELECT MAX(BB.EFFDT) 
               FROM PS_SCH_SHIFT_TBL BB
               WHERE B.SHIFT_ID = BB.SHIFT_ID
               AND BB.EFFDT <= $AsOfToday)
AND B.SHIFT_ID = $WrkDayId
AND A.SCH_CONFIG_IND2 = 'N'
AND A.SCH_CONFIG_IND3 = 'N'
AND A.SCH_CONFIG_IND4 = 'N'
ORDER BY A.PUNCH_TIME
End-Select 
End-Procedure Select-Time

!**************************************
begin-procedure Print-Schedule
#debug show '** Print-Schedule **'
!**************************************
Let #pos = 18
!Let $WrkDayId2 = ''
!Begin-Select DISTINCT
!BB.WRKDAY_ID
 
!  Let $WrkDayId2 = Rtrim(&BB.WRKDAY_ID, ' ')
!  show '$WrkDayId2 ' $WrkDayId2
Do Load-Schedule
  
!FROM PS_GP_PYGRP_DTL A 
!    ,PS_SCH_CLND_TBL BB
!WHERE A.EFFDT = (SELECT MAX(A_ED.EFFDT) 
!                 FROM PS_GP_PYGRP_DTL A_ED 
!                 WHERE A.GP_PAYGROUP = A_ED.GP_PAYGROUP
!                 AND A_ED.EFFDT <= $AsOfToday)
!AND A.SCHEDULE_ID = BB.SCHEDULE_ID               
!AND A.GP_PAYGROUP = $Paygroup
!AND BB.DUR BETWEEN $Today AND $Day 
!ORDER BY BB.WRKDAY_ID
!End-Select

!if $WrkDayId2 = '' and $DayWorks <> ''
!   print $DayWorks ( , #pos) Bold
!end-if
End-Procedure Print-Schedule

!**************************************
begin-procedure Load-Schedule
#debug show '** Load-Schedule **'
!**************************************
  Let  $TimeWorks1 =  '' 
  Let  $TimeWorks2 =  '' 
  Let  $TimeWorks3 =  '' 
  Let  $TimeWorks4 =  '' 
  Let  $CountTime  =  1
  
  While #CountSc <= #CountSch
    Get $DayName $WrkDayId $SchDescr $TimeDay 
    from Schedule(#CountSc)
     
    If $WrkDayId = 'OFF'  
       Let  $Dayoff    =  $DayWorks  || $DayName  || ', ' 
    else    
       Evaluate #CountTime
       when = 1
         Let  $TimeWorks1 =  $SchDescr || $TimeDay 
       when = 2
         Let  $TimeWorks2 =  $SchDescr || $TimeDay 
       when = 3
         Let  $TimeWorks3 =  $SchDescr || $TimeDay 
       when = 4   
         Let  $TimeWorks2 =  $SchDescr || $TimeDay 
       End-Evaluate
         Let #CountTime = #CountTime + 1
    End-if    
    add 1 to #CountSc      
 
  End-while
 
  Let  #CountSc = 1
  Let  $DayWorks  =  ''

End-Procedure Load-Schedule

!**************************************
begin-procedure Select-Other-Earnings
#debug show '** Select-Other-Earnings **'
!**************************************
Let #OtherErns = 0
begin-select
SUM(A.CALC_RSLT_VAL) &CALC_RSLT_VAL

  Let #OtherEarnings = &CALC_RSLT_VAL
  Let $OtherEarnings = Edit($OtherEarnings, '00000000.00')

FROM PS_GP_RSLT_ED_VW A
    ,PS_GP_PYE_PRC_STAT T
WHERE A.EMPLID = $Emplid 
AND   A.EMPL_RCD = #EmplRcd
AND   A.EMPLID = T.EMPLID
AND   A.EMPL_RCD = T.EMPL_RCD
AND   A.CAL_RUN_ID = T.CAL_RUN_ID
AND   A.CAL_ID = T.CAL_ID
AND   A.GP_PAYGROUP = T.GP_PAYGROUP
AND   T.RSLT_VER_NUM = (SELECT MAX(T1.RSLT_VER_NUM)
                        FROM PS_GP_PYE_PRC_STAT T1
                        WHERE T1.EMPLID = T.EMPLID
                        AND   T1.EMPL_RCD = T.EMPL_RCD
                        AND   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        AND   T1.CAL_ID = T.CAL_ID
                        AND   T1.GP_PAYGROUP = T.GP_PAYGROUP)
AND   T.RSLT_REV_NUM = (SELECT MAX(T1.RSLT_REV_NUM)
                        FROM PS_GP_PYE_PRC_STAT T1
                        WHERE T1.EMPLID = T.EMPLID
                        AND   T1.EMPL_RCD = T.EMPL_RCD
                        AND   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        AND   T1.CAL_ID = T.CAL_ID
                        AND   T1.GP_PAYGROUP = T.GP_PAYGROUP)
AND   A.SLICE_END_DT  = (SELECT MAX(A1.SLICE_END_DT) 
                         FROM PS_GP_RSLT_ERN_DED A1
                         WHERE A1.EMPLID = A.EMPLID
                         AND   A1.EMPL_RCD = A.EMPL_RCD 
                         AND   A1.RSLT_SEG_NUM = A.RSLT_SEG_NUM)
!                         AND   A1.SLICE_END_DT  <= $EndDt)
AND   A.PIN_NUM IN      (SELECT B.GPBR_PIN_ERN_NUM 
                         FROM PS_GPBR_RC_EMP_REG B 
                         WHERE B.OPRID = $prcs_oprid
                         AND   B.RUN_CNTL_ID = $prcs_run_cntl_id)                       
end-select

end-procedure Select-Other-Earnings

!**************************************
begin-procedure Select-Vacations
#debug show '** Select-Vacations **'
!**************************************
Let #CountVac  = 0
Begin-Select
V.EMPLID
V.BEGIN_DT
V.END_DATE
V.ABS_BGN_DT
V.ABS_END_DT

  Let $BeginPeriod = Rtrim(&V.BEGIN_DT, ' ')
  Let $EndPeriod   = Rtrim(&V.END_DATE, ' ')
  Let $BeginDt     = Rtrim(&V.ABS_BGN_DT, ' ')
  Let $EndDt       = Rtrim(&V.ABS_END_DT, ' ')
  
  Do convert-to-dtu-date(&V.BEGIN_DT,$BeginDt) 
  Do convert-to-dtu-date(&V.END_DATE,$EndDt)
  Do convert-to-dtu-date(&V.ABS_BGN_DT,$BeginPeriod)
  Do convert-to-dtu-date(&V.ABS_END_DT,$EndPeriod)
  
! Create Array: Vacations  
  
  Let #CountVac = #CountVac + 1
  
  Put $Emplid $BeginPeriod $EndPeriod $BeginDt $EndDt
  into Vacations(#CountVac) Emplid BeginPeriod EndPeriod BeginDt  EndDt 
  
FROM PS_GPBR_LEAVE_PROG V
! PS_GP_ABS_EVENT V ,PS_GPBR_VACN_AP B ,PS_GP_ABS_TAKE C ,PS_GP_ABS_TYPE D
WHERE V.EMPLID = $Emplid
!AND V.EMPLID = B.EMPLID
!AND V.END_DT BETWEEN B.BEGIN_DT AND B.END_DATE
!AND V.PIN_TAKE_NUM = C.PIN_NUM
!AND D.COUNTRY = 'BRA'
!AND C.ABS_TYPE_OPTN = D.ABS_TYPE_OPTN
!AND C.ABS_TYPE_OPTN IN ('FER')
!AND V.PROCESS_DT IS NOT NULL
ORDER BY V.BEGIN_DT, V.END_DATE, V.ABS_BGN_DT, V.ABS_END_DT
End-Select
End-Procedure Select-Vacations

!**************************************
begin-procedure Select-Actions
#debug show '** Select-Actions **'
!**************************************
Let #CountTra                          = 0
Let #CountSal                          = 0
Let #CountPos                          = 0
Let #CountJob                          = 0
Let $CondActionR = ''
Begin-Select  
C.XLATLONGNAME
F.ACTION_TYPE_BRA
F.ACTION
F.ACTION_REASON
 
    Let $JobAction                     = Rtrim(&F.ACTION_TYPE_BRA, ' ')
    Let $Action                        = Rtrim(&F.ACTION, ' ')
    Let $ActionReason                  = Rtrim(&F.ACTION_REASON, ' ')
  
    If $ActionReason <> ''
       Let $CondActionR = ' AND AA.ACTION_REASON = ' || '''' || $ActionReason || ''''
    else
       Let $CondActionR = ''
    end-if 
    
    Do Select-Job-Data
    
FROM XLATTABLE_VW  C
    ,PS_EMPL_ACT_RC_BRA F
WHERE C.FIELDNAME  = 'ACTION'
  AND C.FIELDVALUE = F.ACTION
  AND F.OPRID = $prcs_oprid
  AND F.RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY F.ACTION_TYPE_BRA, F.ACTION ,F.ACTION_REASON
End-Select
End-Procedure Select-Actions

!**************************************
begin-procedure Select-Job-Data
#debug show '** Select-Job-Data **'
!**************************************
Let $JobLocation  = '' 
Let $JobDeptid    = ''
Let $JJCJobCod    = ''
Let $JobPosition  = ''

Begin-Select  
AA.EMPLID
AA.EFFDT
AA.ACTION
AA.ACTION_REASON
AA.COMPANY                      
AA.ESTABID                         () On-Break Print=Never procedure=Select-EstabID-Data
AA.LOCATION                        () On-Break Print=Never procedure=Select-Location-Descr
AA.DEPTID                          () On-Break Print=Never procedure=Select-Deptid-Descr
AA.POSITION_NBR                    () On-Break Print=Never procedure=Select-Position-Descr  
AA.JOBCODE                         
AA.COMPRATE
B.COMPRATE
AC.DESCR
AA.SETID_DEPT
AA.SETID_LOCATION
AA.SETID_JOBCODE

    Let $JobAction                     = Rtrim(&AA.ACTION, ' ')
    Let #CountJob                      = #CountJob + 1
    Let $JobEffdt                      = Rtrim(&AA.EFFDT, ' ')
    Let $JobReason                     = Rtrim(&AC.DESCR, ' ')      
    Do Action_Reason-Lang
    If $JobReasonLang <> ''       
       move $JobReasonLang to $JobReason      
    End-If
    If $JobEffdt <> ''
      Do convert-to-dtu-date(&AA.EFFDT,$JobEffdt)
     !Do convert-from-dtu-date(&AA.EFFDT,$JobEffdt)
    End-if
    
    Evaluate $JobAction 
    when = 'XFR'
       Let $JDeptid                    = Rtrim(&AA.DEPTID, ' ')
       Let $JDeptidSetid               = Rtrim(&AA.SETID_DEPT, ' ')
       Let $JCompany                   = Rtrim(&AA.COMPANY, ' ')
       Let $JLocation                  = Rtrim(&AA.LOCATION, ' ')
       Let $JLocSetid                  = Rtrim(&AA.SETID_LOCATION, ' ')
       Let $JEstabid                   = Rtrim(&AA.ESTABID, ' ')
       !if #CountJob = 1
          Do Select-Estabid-Descr
          Do Select-Location-Descr
          Do Select-Deptid-Descr
       !end-if
       Let $JobLocation                = $JobEstabid || ' - ' || $JobDeptid
       Let $JobLocation                = Rtrim($JobLocation, ' ')
       Let $JobLocation                = Ltrim(Rtrim($JobLocation, ' - '), ' - ')     
       Do Create-Array-Transfer
    when = 'PAY'
       Let #JobSalary                  = &B.COMPRATE 
       Let $JobSalary                  = #JobSalary 
       Do Create-Array-Salary
    when = 'POS'
       Let $JPosition                  = Rtrim(&AA.POSITION_NBR, ' ')      
       Let $JJobCode                   = Rtrim(&AA.JOBCODE, ' ')    
       Do Select-Position-Descr        
       Let $JJCJobCode                 = Rtrim(&AA.SETID_JOBCODE, ' ')
       do Select-JobCode-Descr
       Let $JobPosition                = $JobJobCode || ' - ' || $JobPosition              
       Let $JobPosition                = Rtrim($JobPosition, ' ')
       Let $JobPosition                = Rtrim($JobPosition, '- ')      
       Do Create-Array-Position
    end-Evaluate
   
FROM PS_JOB AA
    ,PS_COMPENSATION B
    ,PS_ACTN_REASON_TBL AC
WHERE AA.EMPLID    = $Emplid
  AND AA.EMPLID    = B.EMPLID  
  AND AA.EMPL_RCD  = B.EMPL_RCD
  AND AA.EFFDT     = B.EFFDT
  AND AA.EFFSEQ    = B.EFFSEQ
  AND  B.COMP_EFFSEQ      = (SELECT MAX(COMP_EFFSEQ) 
                             FROM PS_COMPENSATION 
                             WHERE EMPLID = AA.EMPLID 
                             AND EMPL_RCD = AA.EMPL_RCD 
                             AND EFFDT = AA.EFFDT 
                             AND EFFSEQ = AA.EFFSEQ)
! AND AA.ACTION    = $Action
  AND AC.ACTION           = AA.ACTION
  AND AC.ACTION_REASON    = AA.ACTION_REASON
  AND AC.EFFDT            = (SELECT MAX(D.EFFDT) 
                             FROM PS_ACTN_REASON_TBL D 
                             WHERE AC.ACTION = D.ACTION 
                             AND   AC.ACTION_REASON = D.ACTION_REASON
                             AND   D.EFFDT <= $AsOfToday)
[$CondActionR]                      
ORDER BY AA.EMPLID ,AA.EFFDT ,AA.ACTION ,AA.ACTION_REASON ,AA.COMPANY ,AA.ESTABID
        ,AA.LOCATION ,AA.DEPTID ,AA.POSITION_NBR ,AA.JOBCODE 
End-Select
End-Procedure Select-Job-Data

!**************************************
begin-procedure Select-Union-Data
#debug show '** Select-Union-Data **'
!**************************************
Let #CountUni = 0
Begin-Select DISTINCT 
U.EFFDT
U.UNION_CD
U.AMOUNT 

  Let $UnionCd                         = Rtrim(&U.UNION_CD, ' ')
  Let #UAmount                         = &U.AMOUNT 
  Let $UAmount                         = #UAmount
  Let $UEffdt                          = Rtrim(&U.EFFDT, ' ')
  
  If $UEffdt <> ''
      Do convert-to-dtu-date(&U.EFFDT,$UEffdt)  
      !Do convert-from-dtu-date($UEffdt,$UEffdt)
  End-if
  
  Do Select-Union-Descr
  Do Create-Array-Union
  
FROM PS_GPBR_PYE_UN_WA U
WHERE U.EMPLID = $Emplid    
End-Select
End-Procedure Select-Union-Data

!**************************************
begin-procedure Select-Union-Descr
#debug show '** Select-Union-Descr **'
!**************************************
Begin-Select 
U.DESCRSHORT

  Let $Union                           = Rtrim(&U.DESCRSHORT, ' ')

FROM PS_UNION_TBL U
WHERE U.UNION_CD = $UnionCd   
AND   U.EFFDT    = (SELECT MAX(UU.EFFDT) 
                    FROM PS_UNION_TBL UU
                    WHERE UU.UNION_CD = U.UNION_CD
                    AND UU.EFFDT <= $AsOfToday)
End-Select
End-Procedure Select-Union-Descr

!**************************************
begin-procedure Select-Comments
#debug show '** Select-Comments **'
!**************************************
Let $Comment = ''
Let #CountCom = 0

Begin-Select
A.COMMENT_DT
A.COMMENTS_BY_NAME
A.COMMENTS

  Let $CommentDt = Rtrim(&A.COMMENT_DT, ' ')
!Difference between SS version and environment=>The following line had from in the SS version  
  Do convert-to-dtu-date($CommentDt,$CommentDt)
  Let $CommentBy = Rtrim(&A.COMMENTS_BY_NAME,' ')
  Let $Comment   = Rtrim(&A.COMMENTS,' ')
  
! Create Array: Comments  
  Let #CountCom = #CountCom + 1

  Put $Emplid $CommentDt $CommentBy $Comment
  into Comments(#CountCom) Emplid CommentDt CommentBy Comment
  
from PS_GENL_COMMENT A
WHERE A.EMPLID = $Emplid
End-Select
End-Procedure Select-Comments

!**************************************
begin-procedure Select-Absences
#debug show '** Select-Absences **'
!**************************************
  
  Do convert-to-dtu-date($AsOfToday, $Today) 
  Do convert-from-dtu-date($Today, $Today)
  
Let #CountAbs = 0
Begin-Select
AA.BGN_DT
BB.ESTABID
AA.END_DT
AA.ORIG_BEGIN_DT
AA.ABSENCE_REASON
AA.EVT_CONFIG1
D.DESCR
D.ABS_TYPE_OPTN

  Let $BeginDt = Rtrim(&AA.BGN_DT, ' ')
  Let $Reason  = Rtrim(&D.DESCR, ' ')
  Let $EndDt   = Rtrim(&AA.END_DT, ' ')
  Let $CID     = Rtrim(&AA.EVT_CONFIG1, ' ')
  Let $Abs_Type= Rtrim(&D.ABS_TYPE_OPTN, ' ')
      
  Do convert-to-dtu-date($BeginDt,$BeginDt)
  Do convert-to-dtu-date($EndDt,$EndDt)
  
  Do Get-Abs-Xlat
  If $XLReason <> ''
     Let $Reason = $XLReason
  End-If
  
! Create Array: Absences  
  Let #CountAbs       = #CountAbs + 1
  
  Put $Emplid $Reason $BeginDt $EndDt $CID 
  into Absents(#CountAbs) Emplid Reason BeginDt EndDt CID

FROM PS_GP_ABS_EVENT AA
    ,PS_JOB BB
    ,PS_GP_ABS_TAKE C
    ,PS_GP_ABS_TYPE D    
WHERE AA.EMPLID = $Emplid 
AND AA.EMPLID = BB.EMPLID
AND BB.EFFDT = (SELECT MAX(B.EFFDT) 
                FROM PS_JOB B 
                WHERE BB.EMPLID  = B.EMPLID 
                AND   BB.ESTABID = B.ESTABID
                AND   B.EFFDT <= $AsOfToday)
AND BB.ESTABID = $Estabid               
AND AA.PIN_TAKE_NUM = C.PIN_NUM
AND D.COUNTRY = 'BRA'
AND C.ABS_TYPE_OPTN = D.ABS_TYPE_OPTN
AND AA.BGN_DT < $Today
ORDER BY AA.ORIG_BEGIN_DT
End-Select
End-Procedure Select-Absences

!**************************************
begin-procedure Get-Abs-Xlat
#debug show '** Get-Abs-Xlat **'
!**************************************
  
let $XLReason = ''
   
Begin-Select
AL.DESCR    &AL.DESCR
  Let $XLReason= Rtrim(&AL.DESCR, ' ')  
FROM PS_GP_ABS_TP_LANG AL
WHERE AL.COUNTRY   = 'BRA'
and   AL.LANGUAGE_CD = $Curr_language_Cd 
and   AL.ABS_TYPE_OPTN = $Abs_Type
and   AL.EFFDT   =  (SELECT MAX(EFFDT) 
                     FROM PS_GP_ABS_TP_LANG AXL
                     WHERE AXL.COUNTRY   = 'BRA'                   
                     AND   AXL.LANGUAGE_CD = AL.LANGUAGE_CD
                     AND   AXL.EFFDT <=  $Today)

End-Select
End-Procedure Get-Abs-Xlat
  
!**************************************
begin-procedure Create-Array-Transfer
#debug show '** Create-Array-Transfer **'
!**************************************
  Let #CountTra = #CountTra + 1
  
  Put $Emplid $JobEffdt $JobReason $JobLocation 
  into Transfer(#CountTra) Emplid JobEffdt JobReason JobLocation 

End-Procedure Create-Array-Transfer

!**************************************
begin-procedure Create-Array-Salary
! show '** Create-Array-Salary **' 
!**************************************
 Let #CountSal = #CountSal + 1
  
 Put $Emplid $JobEffdt $JobReason $JobSalary 
 into Salary(#CountSal) Emplid JobEffdt JobReason JobSalary 
 
End-Procedure Create-Array-Salary

!**************************************
begin-procedure Create-Array-Position
#debug show '** Create-Array-Position **'
!**************************************
  Let #CountPos = #CountPos + 1
  !Move $JobPosition to $JPosition
  Do Position-Lang 
  If $JobPositionL <> '' 
     Let $JobPosition = $JobPositionL
  End-If   
  Put $Emplid $JobEffdt $JobReason $JobPosition 
  into Position(#CountPos) Emplid JobEffdt JobReason JobPosition

End-Procedure Create-Array-Position

!**************************************
begin-procedure Create-Array-Union
#debug show '** Create-Array-Union **'
!**************************************
 Let #CountUni = #CountUni + 1
  
 Put $Emplid $UEffdt $Union $UAmount
 into Union(#CountUni) Emplid UEffdt Union UAmount 
 
End-Procedure Create-Array-Union

!**************************************
begin-procedure Declare-Rows
#debug show '** Declare-Rows **'
!**************************************
! Row 1  
  Let #r    = 1
  Let #r0   = 3
  
! Row 3 to 4
  Let #r0a  = #r0
  Let #r1   = #r0a +  1
  Let #r1a  = #r1  +  1
  Let #r1b  = #r1  +  2
  
! Row 3
  Let #r2   = #r1b +  1
  Let #r2a  = #r2  +  1
  Let #r2b  = #r2  +  2

! Row 6 to 8
  Let #r3   = #r2  +  #r0a           
  Let #r3a  = #r3  +  1
  Let #r3b  = #r3  +  2
  
! Row 9 to 11  
  Let #r4   = #r3  +  #r0a
  Let #r4a  = #r4  +  1
  Let #r4b  = #r4  +  2    
  
! Row 12 to 15 
  Let #r5   = #r4  + #r0a    
  Let #r5a  = #r5  + 1
  Let #r5b  = #r5  + 2
  
  Let #r6   = #r5  + #r0a
  Let #r6a  = #r6  + 1 
  Let #r6b  = #r6  + 2
  
  Let #r7   = #r6  + #r0a
  Let #r7a  = #r7  + 1 
  Let #r7b  = #r7  + 2 
  
  Let #r8   = #r7  + #r0a
  Let #r8a  = #r8  + 1 
  Let #r8b  = #r8  + 2 
  
  Let #r9   = #r8  + #r0a 
  Let #r9a  = #r9  + 1 
  Let #r9b  = #r9  + 2 
  
  Let #r10   = #r9  + #r0a
  Let #r10a  = #r10  + 1 
  Let #r10b  = #r10  + 2 
  
! Row 21 to 24
  Let #r11  = #r10 + #r0a 
  Let #r11a = #r11 + 1  
  Let #r11b = #r11 + 2
    
! Row 27 to 31  
  Let #r12   = #r11  + #r0a 
  Let #r12a  = #r12  + 1
  Let #r12b  = #r12  + 2
 
! Row 33
  Let #r13   = #r12  + #r0a  
  Let #r13v  = #r13
  Let #r13a  = #r13  + 1
  Let #r13b  = #r13  + 2
 
! Row 39 to 54  
  Let #r14   = #r13  + #r0a  
  Let #r14a  = #r14  + 1
  Let #r14b  = #r14  + 2

! Row 58 to 
  Let #r15   = #r14  + #r0a
  Let #r15a  = #r15  + 1
  Let #r15b  = #r15  + 2 
    
! Row 64 to 66
  Let #r16   = #r15  + #r0a
  Let #r16a  = #r16  + 1
  Let #r16b  = #r16  + 2
 
! Row 71 
  Let #r17   = #r16  + #r0a
  Let #r17a  = #r17  + 1
  Let #r17b  = #r17  + 2

end-procedure Declare-Rows

!**************************************
begin-procedure Print-Employee
#debug show '** Print-Employee **'
!**************************************
 Do Declare-Rows

 Let #CountA  = 1
 Let #CountD  = 1
 Let #CountAb = 1
 Let #CountT  = 1
 Let #CountP  = 1
 Let #CountV  = 1
 Let #CountS  = 1
 Let #CountU  = 1
 Let #CountC  = 1
 Let #CountSc = 1
 
 Do Print-Page01
 Do Print-Page02
 
 If $CommentsOp <> '1' 
    If $CommentsOp <> '3' 
       Do Print-Page03
    end-if
    If $CommentsOp <> '2' 
       Do Print-Page04
    end-if
 end-if
 
end-procedure Print-Employee

!**************************************
begin-procedure Print-Page01
#debug show '** Print-Page01 **'
!**************************************
 

 Do Convert-from-DTU-Date($HireDt,$HireDt)
 Do Format-DateTime($HireDt ,$HireDt , {DEFDMY},'','')
 Do Convert-from-DTU-Date($CTPSDate,$CTPSDate)
 Do Format-DateTime($CTPSDate , $CTPSDate , {DEFDMY},'','')
 Do Convert-from-DTU-Date($PISDt,$PISDt)
 Do Format-DateTime($PISDt , $PISDt, {DEFDMY},'','') 
 Do Convert-from-DTU-Date($RGDt,$RGDt)
 Do Format-DateTime($RGDt , $RGDt, {DEFDMY},'','')
 Do Convert-from-DTU-Date($DriverDtFrom,$DriverDtFrom)
 Do Format-DateTime($DriverDtFrom , $DriverDtFrom, {DEFDMY},'','') 
 Do Convert-from-DTU-Date($DriverDtTo,$DriverDtTo)
 Do Format-DateTime($DriverDtTo ,$DriverDtTo, {DEFDMY},'','')
 !Dados Pessoais
 Do Convert-from-DTU-Date($BirthDate,$BirthDate)
 Do Format-DateTime($BirthDate ,$BirthDate, {DEFDMY},'','')
 Do Convert-from-DTU-Date($ForeignDt,$ForeignDt)
 Do Format-DateTime($ForeignDt  ,$ForeignDt , {DEFDMY},'','')
 Do Convert-from-DTU-Date($ForeignPDt,$ForeignPDt)
 Do Format-DateTime( $ForeignPDt  , $ForeignPDt , {DEFDMY},'','')


 Do Convert-from-DTU-Date($TermDt,$TermDt)
 Do Format-DateTime($TermDt ,$TermDt , {DEFDMY},'','')
 
 

 Let #Page  = 0

 graphic (#r0a  ,{caa} ,{laa}) box  16 {g2}    ! Photo
   
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Filiação'                      (#r0a ,{caf}) Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Mãe   -'                       (+2   ,{caf}) 
 Print 'Pai   -'                       (     ,100) 
 
 graphic (#r1b  ,{caf},143) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Documentos'                    (#r2  ,{caf}) Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Cart. Profis   :'              (+2   ,{caf}) 
 Print 'Série          :'              (     ,{caj})    
 Print 'Data Exp       :'              (     ,105)    
 Print 'Cert. de Reserv:'              (+1   ,{caf})  
 Print 'Categoria      :'              (     ,{caj})  
 Print 'Título Eleitor :'              (+1   ,{caf}) 
 Print 'Zona Eleitoral :'              (     ,{caj})   
 Print 'Seção Eleitoral:'              (     ,105)   
 Print 'P.I.S.         :'              (+1   ,{caf}) 
 Print 'Dt. Cad PIS    :'              (     ,{caj}) 
 Print 'C.I.           :'              (+1   ,{caf}) 
 Print 'Data Exp       :'              (     ,{caj})   
 Print 'Local          :'              (     ,105)   
 Print 'UF           :'                (     ,{cap})   
 Print 'Car. Motorista :'              (+1   ,{caf})
 Print 'Data         :'                (     ,105) 
 Print 'C.P.F          :'              (+1   ,{caf}) 

 graphic (#r5a   ,{caf},143) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Dados Pessoais'                (#r5b  ,{caf}) Bold 
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data de Nascimento:'           (+2   ,{caa})  
 Print 'Estado Civil      :'           (     , 42)  
 Print 'Sexo              :'           (     , 85)  
 Print 'Grau Instrução    :'           (     ,127)  
 Print 'Nacionalidade     :'           (+1   ,{caa})  
 Print 'Naturalidade      :'           (     , 42)  
 Print 'Estado            :'           (     , 85)  
  
 graphic (#r7    ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Quando Estrangeiro'           (#r7a   ,{caa}) Bold 
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data da Chegada   :'           (+2   ,{caa}) 
 Print 'Naturalizado      :'           (     , 42) 
 Print 'Cônjuge Brasileiro:'           (     , 85) 
 Print 'Tem filhos Brasileiros:'       (     ,127) 
 Print 'N. de Filhos      :'           (+1   ,{caa}) 
 Print 'N. de Registro Geral:'         (     , 42)     
 Print 'N. de Passaporte  :'           (     , 85)
 Print 'Data Expedição    :'           (     ,127)
 Print 'N. de VISA        :'           (+1   ,{caa}) 
 Print 'Status            :'           (     , 42)     
 
 graphic (#r9  ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Endereço'                      (#r9a  ,{caa}) Bold 
  
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'End. Atual :'                  (+2   ,{caa}) 
 Print 'Bairro     :'                  (     , 85) 
 Print 'Cidade     :'                  (+1   ,{caa}) 
 Print 'C.E.P      :'                  (     ,42)  
 Print 'Estado     :'                  (     ,85) 
 
 graphic (#r10b   ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Dados Admissionais'                      (#r11 ,{caa}) Bold 
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data Admissão  :'              (+2,{caa}) 
 Print 'Data Opção FGTS:'              (     , 42) 
 Print 'Jornada de Trabalho:'          (     , 85) 
 Print 'Forma de Remuneração:'         (     ,127)   
 Print 'Cargo          :'              (+1   ,{caa})   
 Print 'Salário Hora   :'              (     , 85)  
 Print 'Data de Desligamento:'         (     ,127) 
 Print 'Função         :'              (+1   ,{caa}) 
 Print 'Salário Atual  :'              (     , 85)
! Print 'Código de Afastamento:'       (     ,127)
 Print 'Local/Setor de Trabalho:'      (     ,127) 
 Print 'Horário de Trabalho:'          (+1   ,{caa})
 Print 'Descanso semanal: '            (     ,127)   
 
 Print '____/____/____'                (#r15, 15) 
 Print '____/____/____'                (#r15,95)   
 graphic (#r15 ,30,40) horz-line {g1}
 graphic (#r15 ,110,40) horz-line {g1}
 Print 'Assin. Empregador'             (+1   , 42) 
 Print 'Assin. Empregado'              (     ,122)       
 
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 Print $Mother                         (#r1a ,{cah}) Bold
 Print $Father                         (     , 110)  Bold 

!Documentos
 Print $CTPS                           (#r2b , 44)   Bold
 Print $CTPSSerie                      (     , 82)   Bold
! Do Format-DateTime($CTPSDate , $CTPSDate , {DEFDMY},'','')
 Print $CTPSDate                       (     ,122)   Bold
 Print $CRES                           (+1   , 44)   Bold
 Print $MilitarCategory                (     , 82)   Bold
 Print $TITEL                          (+1   , 44)   Bold
 Print $VoterZone                      (     , 82)   Bold
 Print $VoterSeccion                   (     ,122)   Bold
 Print $PIS                            (+1   , 44)   Bold 
! Do Format-DateTime($PISDt , $PISDt, {DEFDMY},'','')
 Print $PISDt                          (     , 82)   Bold
 Print $RG                             (+1   , 44)   Bold 
! Do Format-DateTime($RGDt , $RGDt, {DEFDMY},'','')
 Print $RGDt                           (     , 82)   Bold
 Print $RGIssued                       (     ,122)   Bold
 Print $RGState                        (     ,162)   Bold
 Print $DriverLic                      (+1   , 44)   Bold  
! Do Format-DateTime($DriverDtFrom , $DriverDtFrom, {DEFDMY},'','')
 Print $DriverDtFrom                   (     ,122)   Bold
 Print '-'                             (     ,+2)    Bold  
! Do Format-DateTime($DriverDtTo ,$DriverDtTo, {DEFDMY},'','')
 Print $DriverDtTo                     (     ,+2)    Bold  
 Print $CPF                            (+1   , 44)   Bold
 Print ' '                             (     , 82)   Bold
 
 !Dados Pessoais
! Do Format-DateTime($BirthDate  ,$BirthDate , {DEFDMY},'','')
 Print $BirthDate                      (#r6a ,{cad}) Bold
 Print $MarStatus                      (     ,{caq}) Bold
 Print $Sex                            (     ,103)   Bold
 Print $EducationLvl                   (     ,141,23) Bold 
 Print $Nationality                    (+1   ,{cad}) Bold
 Print $BirthPlace                     (     ,{caq}) Bold
 Print $BirthState                     (     ,103)   Bold

!Quando Estrangeiro
! Do Format-DateTime($ForeignDt  ,$ForeignDt , {DEFDMY},'','')
 Print $ForeignDt                      (#r8, 20)   Bold
 Print $ForeignNat                     (    ,{caq})  Bold
if $ForeignChild <> ''
 Print $ForeignSpou                    (     ,105)   Bold  
 Print $ForeignChildBra                (     ,147)   Bold
 Print #ChildNo                        (+1   , 20)   Edit 99 Bold
 Print $EXTRAN                         (     ,{caq}) Edit 999999999999 Bold
 end-if
 if #ForeignPNbr <> 0
    Print #ForeignPNbr                 (     ,105)   Edit 999999999999 Bold
 end-if
! Do Format-DateTime( $ForeignPDt  , $ForeignPDt , {DEFDMY},'','')
 Print $ForeignPDt                     (     ,147)   Bold
 if #ForeignNbr <> 0
    Print #ForeignNbr                  (+1   , 20)   Edit 999999999999 Bold
 end-if
 Print $ForeignSta                     (     ,{caq}) Bold
  
!Endereço  
 Print $Address                        (#r10,{cad},50) Bold
 Print $Neighborhood                   (    , 103)   Bold            
 Print $City                           (+1  ,{cad})  Bold            
 Print $Postal                         (    ,{caq})  Bold      
 Print $State                          (    , 103)   Bold        
 
!Dados Admissionais   
! Do Format-DateTime($HireDt ,$HireDt , {DEFDMY},'','')
 Print $HireDt                         (#r11B , 19)   Bold  
! Do Format-DateTime($FGTSDt ,$FGTSDt , {DEFDMY},'','') 
 Print $FGTSDt                         (     , 61)   Bold  
 Print #StdHours                       (     ,106)   Edit 9999 Bold
 Print $Frequency                      (     ,150)   Bold  
 Do JobCode-Lang 
 If $JobCode_Descr<>''
    Let $JobCode = $JobCode_Descr
 End-If   
 Print $JobCode                        (+1   ,{cad})   Bold
 Print #HourlyRt                       (     ,100)   Edit 99999999.99 Bold 
! Do Format-DateTime($TermDt ,$TermDt , {DEFDMY},'','')
 Print $TermDt                         (     ,150)   Bold
!716552000 
 Do Position-Lang
     If $JobPositionL<> ''      
        Let $JobPosition = $JobPositionL                
     End-If          
 Print $JobPosition                    (+1   ,{cad},10)   Bold
 Print #Salary                         (     ,100)   Edit 99999999.99 Bold

 Print $DescLocation                   (     ,150)   Bold 
 
 Do Print-Schedule
 print $TimeWorks1                     (+1   ,18)    Bold  
 
 Let $DayOff = Rtrim($DayOff, ', ') 
 Print $DayOff                         (     ,150)   Bold
 print $TimeWorks2                     (+1   ,18)    Bold 
 
 If $TimeWorks3 <> ''
    Let #r13v = #r13v + 1
    print $TimeWorks3                     (+1   ,18)    Bold 
 end-if
 If $TimeWorks4 <> ''
    print $TimeWorks4                     (+1   ,18)    Bold 
    Let #r13v = #r13v + 1
 end-if
 
 graphic (#r13v  ,{caa},170) horz-line {g1}
 
 new-page
end-procedure Print-Page01

!**************************************
begin-procedure Print-Page02
#debug show '** Print-Page02 **'
!**************************************
 Let $Title = 'Beneficiários' 
 Let #Page  = 0
  
 If #CountDep > 0    

    Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
    Print 'Beneficiários'                 (#r0a  ,{caa}) Bold

    Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
    Print 'Nome'                          (+2   ,{caa})  
    Print 'Data de Nascimento'            (     , 55)
    Print 'Estado Civil'                  (     , 97)
    Print 'Parentesco'                    (     ,130)
    Print ''                              (+1)
    Let #Page  = 2
    Do Print-Dependents
    Let #Page  = 0
 End-if
 
 Let $Title = 'Informações sobre Segurança e Saúde do Trabalhador'
 graphic (+1 ,{caa},170) horz-line {g1}
 
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print $Title                         (+1 ,{caa})  Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Informaçoes Cipa: '            (+2 ,{caa}) 
 
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Let #Page  = 2
 Print $Cipa                           (   , 25)   Bold
 Let #Page  = 0
 
 Let $Title = 'Profissional'
 graphic (+1 ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Profissional: '            (+1 ,{caa})  Bold
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Hab. Profissional :'       (+2 ,{caa}) 
 Print 'Reg. Profissional :'       (   ,55) 
 Print 'País'                      (   ,90)
 Print 'UF'                        (   ,110)
 Print ''                              (+1)
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 
 Let #Page  = 2
 Do Select-Accomplishments
 Let #Page  = 0
 
 If #CountVac > 0
    Let $Title = 'Histórico de Férias' 
    graphic (+1 ,{caa},170) horz-line {g1}
    Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
    Print 'Histórico de Férias'           (+1 ,{caa}) Bold
 
    Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
    Print 'Referente ao período de'       (+2,{caa})  
    Print 'Início'                        (  ,{cah})
    Print 'Fim'                           (  ,{can})
    Print ''                              (+1)
    Let #Page  = 2
    Do Print-Vacations
    Let #Page  = 0
 End-if
 
 Let $Title = 'Histórico Salarial' 
 graphic (+1 ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Histórico Salarial'           (+1 ,{caa}) Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data'                          (+2   ,{caa})  
 Print 'Para'                          (     ,60)
 Print 'Motivo'                        (     ,80)
!Print 'Cargo'                         (     ,110)
 Print ''                              (+1)
 
 Do Print-Salary
 
 Let $Title = 'Histórico de Contribuição Sindical'
 graphic (+1 ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Histórico de Contribuição Sindical'           (+1 ,{caa}) Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data'                          (+2   ,{caa})  
 Print 'Valor'                         (     ,60)
 Print 'Sindicato'                     (     ,80)
 Print ''                              (+1)
  
 Do Print-Union
 
 Let $Title = 'Histórico de Alteração de Cargo'
 graphic (+1 ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Histórico de Alteração de Cargo'           (+1 ,{caa}) Bold
 
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data'                          (+2   ,{caa})  
 Print 'Novo Cargo'                    (     ,60)
 Print 'Motivo'                        (     ,110)
 Print ''                              (+1)
 
 If #CountPos > 0                     
    Do Print-Position
 End-if
 
 Let $Title = 'Histórico de Mudança de Seção'
 graphic (+1 ,{caa},170) horz-line {g1}
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
 Print 'Histórico de Mudança de Seção'          (+1 ,{caa}) Bold
  
 Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
 Print 'Data'                          (+2   ,{caa})  
 Print 'Nova Seção'                    (     ,60)
 Print 'Motivo'                        (     ,110)
 Print ''                              (+1)
  
 Do Print-Transfer
 
 If #CountAbs > 0
    Let $Title = 'Histórico de Afastamento'
 
    graphic (+1 ,{caa},170) horz-line {g1}
    Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd
    Print 'Histórico de Afastamento'      (+1 ,{caa}) Bold
    Let #Page  = 2     
    Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
    Print 'Inicio'                        (+2   ,{caa})  
    Print 'Fim'                           (     ,{cah})
    Print 'Motivo'                        (     ,{can})
    Print 'CID'                           (     ,120)
    Print ''                              (+1)

    Do Print-Absents
    Let #Page  = 0
  end-if
  
 Let #Page  = 0
 new-page
end-procedure Print-Page02

!**************************************
begin-procedure Print-Page03
#debug show '** Print-Page03 **'
!**************************************  
  if #CountCom > 0
     Let $Title = 'Anotações'

     Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
     Print $Title                          (#r0a  ,{caa}) Bold
   
     Do print-comments
     
     new-page
  end-if
  
  Let #Page  = 0
end-procedure Print-Page03

!**************************************
begin-procedure Print-Page04
#debug show '** Print-Page04 **'
!**************************************  

  Let $Title = 'Anotações'
 
  Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
  Print $Title                          (#r0a  ,{caa}) Bold
  Print ''                              (+1)
  Graphic (+1 ,{caa} ,{lac}) box  42 {g1}        

end-procedure Print-Page04
   
!**************************************
begin-procedure Print-Dependents
#debug show '** Print-Dependents **'
!**************************************
Do Convert-from-DTU-Date($DepntBirthDt,$DepntBirthDt)
Do Format-DateTime($DepntBirthDt ,$DepntBirthDt , {DEFDMY},'','')

Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 

 While #CountD <= #CountDep
 
   get $EmplidD $DepntName $DepntBirthDt $DepntMarstatus $DepntRel 
   from Dependents(#CountD)
     
     Do Convert-from-DTU-Date($DepntBirthDt,$DepntBirthDt)
     Do Format-DateTime($DepntBirthDt ,$DepntBirthDt , {DEFDMY},'','')     
     Print $DepntName                  (+1  ,{caa}) Bold
     Print $DepntBirthDt               (    , 55)   Bold
     Print $DepntMarstatus             (    , 97)   Bold     
     Print $DepntRel                   (    ,130)   Bold
   
     add 1 to #CountD

 End-while
end-procedure Print-Dependents

!**************************************
begin-procedure Print-Vacations
#debug show '** Print-Vacations **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 While #CountV <= #CountVac
    get $EmplidV $BeginPeriod $EndPeriod $BeginDt $EndDt 
    from Vacations(#CountV) 
      
      Do Convert-from-DTU-Date($BeginPeriod,$BeginPeriod)
      Do Format-DateTime($BeginPeriod ,$BeginPeriod , {DEFDMY},'','')
      Do Convert-from-DTU-Date($EndPeriod,$EndPeriod)
      Do Format-DateTime($EndPeriod ,$EndPeriod , {DEFDMY},'','')
      Do Convert-from-DTU-Date($BeginDt,$BeginDt)
      Do Format-DateTime($BeginDt ,$BeginDt , {DEFDMY},'','')
      Do Convert-from-DTU-Date($EndDt,$EndDt)
      Do Format-DateTime($EndDt ,$EndDt , {DEFDMY},'','')
      
      Let $BeginPeriod = Rtrim($BeginPeriod, ' ')
      Let $EndPeriod   = Rtrim($EndPeriod, ' ')
      Let $VacPEriod   = $BeginPeriod || ' - ' || $EndPeriod
     
      Print $VacPEriod                 (+1  ,{caa}) Bold
      Print $BeginDt                   (    , {cah} ) Bold
      Print $EndDt                     (    , {can} ) Bold

      add 1 to #CountV 
  End-while
end-procedure Print-Vacations

!**************************************
begin-procedure Print-Transfer
#debug show '** Print-Transfer **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 While #CountT <= #CountTra
  
    get $EmplidJ $JobEffdt $JobReason $JobLocation
    from Transfer(#CountT) 

!GPA   Do convert-to-dtu-date($JobEffdt,$JobEffdt)
!      Do Format-DateTime($JobEffdt, $JobEffdt, {DEFDMY},'','')
      Do Convert-from-DTU-Date($JobEffdt,$JobEffdt)
      Do Format-DateTime($JobEffdt ,$JobEffdt , {DEFDMY},'','')
      Print $JobEffdt                  (+1   ,{caa}) Bold
      Print $JobLocation               (     ,60) Bold
      Print $JobReason                 (     ,110) Bold
      add 1 to #CountT 
      
  End-while
end-procedure Print-Transfer

!**************************************
begin-procedure Print-Salary
#debug show '** Print-Salary **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 While #Counts <= #CountSal
  
    get $EmplidJ $JobEffdt $JobReason $JobSalary
    from Salary(#CountS) 
    
!GPA   Do convert-to-dtu-date($JobEffdt,$JobEffdt)
!      Do Format-DateTime($JobEffdt, $JobEffdt, {DEFDMY},'','')
      Do Convert-from-DTU-Date($JobEffdt,$JobEffdt)      
      Do Format-DateTime($JobEffdt, $JobEffdt, {DEFDMY},'','')
      Print $JobEffdt                  (+1   ,{caa}) Bold  
      Print $JobSalary                 (     ,55) Edit 999,999,999.99 Bold
      Print $JobReason                 (     ,80) Bold    

      add 1 to #CountS 
  End-while
end-procedure Print-Salary

!**************************************
begin-procedure Print-Position
#debug show '** Print-Position **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 While #CountP <= #CountPos
  
    get $Emplid $JobEffdt $JobReason $JobPosition
    from Position(#CountP)           
!GPA  Do convert-to-dtu-date($JobEffdt,$JobEffdt)
      Do Convert-from-DTU-Date($JobEffdt,$JobEffdt)      
      Do Format-DateTime($JobEffdt, $JobEffdt, {DEFDMY},'','')
!      Do Format-DateTime($JobEffdt, $JobEffdt, {DEFDMY},'','')
      Print $JobEffdt                  (+1  ,{caa}) Bold
      Print $JobPosition               (    ,60,40) Bold
      Print $JobReason                 (    ,110) Bold

      add 1 to #CountP 
  End-while
end-procedure Print-Position

!**************************************
begin-procedure Print-Absents
#debug show '** Print-Absents **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd   
 While #countAb <= #CountAbs

    get $Emplid $Reason $BeginDt $EndDt $CID 
    from Absents(#CountAb)     

      Do Convert-from-DTU-Date($BeginDt,$BeginDt)      
      Do Format-DateTime($BeginDt, $BeginDt, {DEFDMY},'','')
!      Do Format-DateTime($BeginDt, $BeginDt, {DEFDMY},'','')
      Print $BeginDt                   (+1   ,{caa}) Bold
      Do Convert-from-DTU-Date($EndDt,$EndDt)      
      Do Format-DateTime($EndDt, $EndDt, {DEFDMY},'','')
!      Do Format-DateTime($endDt, $EndDt, {DEFDMY},'','')
      Print $EndDt                     (     ,{cah}) Bold
      Print $Reason                    (     ,{can}) Bold 
      Print $CID                       (     ,120) Bold 
     
      add 1 to #CountAb 
           
 End-while
end-procedure Print-Absents

!**************************************
begin-procedure Print-Union
#debug show '** Print-Union **'
!**************************************
 Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
 While #CountU <= #CountUni
  
    get $Emplid $UEffdt $Union $UAmount
    from Union(#CountU)   
    
!      Do Format-DateTime($UEffdt, $UEffdt, {DEFDMY},'','')
      Do Convert-from-DTU-Date($UEffdt,$UEffdt)      
      Do Format-DateTime($UEffdt, $UEffdt, {DEFDMY},'','')
      Print $UEffdt                  (+1   ,{caa}) Bold  
      Print $UAmount                 (     ,55) Edit 999,999,999.99 Bold
      Print $Union                   (     ,80) Bold    

      add 1 to #CountU
  End-while
end-procedure Print-Union

!**************************************
begin-procedure Print-Comments
#debug show '** Print-Comments **'
!**************************************

 While #CountC <= #CountCom
  
    get $Emplid $CommentDt $CommentBy $Comment
    from Comments(#CountC) 
       
    Do Convert-from-DTU-Date($CommentDt,$CommentDt)
    Do Format-DateTime($CommentDt ,$CommentDt , {DEFDMY},'','')   
    
    Let #LenField  = Length($Comment) 
    if  #LenField < 130
        Let #PrintTime = 1
    else
        Let #PrintTime = #LenField / 130         
        Let #PrintTime = round(#PrintTime, 0) 
    end-if
    
    Let $Comment01 = ''
    Let #Position  = 1
    Let #Time      = 1
    
    Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
    Print 'Realizado por:'                (+2   ,{caa})  
    Print 'Data:'                         (     ,{caj})      
    Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
    Print $CommentBy                      (     ,{cac}) Bold
!    Do Format-DateTime($CommentDt, $CommentDt, {DEFDMY},'','')    
    Print $CommentDt                      (     ,{cal}) Bold
    Alter-Printer Point-size = #SizeSml Font-Type = Proportional Font = #FontStd
    Print 'Comentário:'                   (+1   ,{caa})  
    Alter-Printer Point-size = #SizeStd Font-Type = Proportional Font = #FontStd 
    
    Print $Comment                      (+1   ,{caa}) Bold Wrap 130 #PrintTime

    add 1 to #CountC
  End-while
end-procedure Print-Comments

!**************************************
#Include 'reset.sqc'     !Reset Printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'useprntr.sqc'  !Indicate which Printer to use for reports
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language          