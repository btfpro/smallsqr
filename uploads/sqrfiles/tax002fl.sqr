!***********************************************************************
!  TAX002FL:  Qtrly State Employee Wage List - FLORIDA                 *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:47:10                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report

  do Process-Main
  do Company-Change

  if #PAGE_NUM > 0
    add 1 to #PAGE_NUM
    do Print-Summary-Totals
    new-page
  end-if


  do Stdapi-Term


end-report

begin-procedure Init-Report
  display 'Quarterly Employee Wage List - Florida'

  do Init-DateTime
  do Init-Number

  do Get-Tax-Reporting-Run-Controls

  move $PeriodEndDate to $AsOfDate  !for included procedures

  do Initialize
  do Get-Calendar-Year-Id

  do Stdapi-Init

create-array name=Grand size=1000 field=GrandPageNo:number
                                     field=GrandTotals:char

end-procedure

begin-procedure Initialize
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'FL' to $State
#endif
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PEndDateYMD,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PEndDateYMD,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PEndDateYMD,#EndOffsetDays,$EarnsEndDate)
  else
    move $PEndDateYMD to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  move 0 to #StateMinimum
end-procedure

begin-heading 12
  print 'FACSIMILE'                   (2,44)

  print 'ACCOUNT NUMBER:'             (+2,4)
  if RTRIM(&Employer_ID_SUT, ' ') <> ''
    print &Employer_ID_SUT            (0,20)
  else
    print &Employer_ID_SWT            (0,20)
  end-if

  print 'QUARTER ENDING DATE:'        (0,46)
  do Format-DateTime($PeriodEndDate, $out, {DEFMDY}, '', '')
  print $out                          (0,67)

  print 'LOCATION CODE:'              (+1,4)
  print 'PAGE NO.'                    (0,55)
  do Format-Number(#PAGE_NUM, $out, '999')
  print $out                          (0,64)

  print 'EMPLOYER NAME AND ADDRESS:'  (+1,4)
  uppercase $CompanyName
  print $CompanyName                  (+1,4)
  move $Compnyadd1 to $CoAddress1
  uppercase $CoAddress1
  print $CoAddress1                    (+1,4)
  move $compnyadd2 to $CoAddress2
  uppercase $CoAddress2
  print $CoAddress2                    (+1,4)
  let $field = RTRIM($Compnycity, ' ')
  uppercase $field
  print $field                        (+1,4)
  print &CT.State                     ()      edit ,bxx
  move  &CT.Postal                    to $Zip
  move  &CT.Postal                    to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  print $Zip                          (0,+2)


  if $lastpage <> 'Y'
    print 'SS NUMBER'                   (+2,4)
    print 'EMPLOYER NAME'               (0,18)
    print 'GROSS WAGES PAID'            (0,58)
    print '    THIS QUARTER'            (+1,58)
  end-if
end-heading

begin-procedure Process-Main

  Show 'Calendar Year: ' $Calendar_Year_Id
  Show 'Balance  Year: ' &TX.Balance_Year
  Show 'Balance  Qtr:  ' &TX.Balance_Qtr
  Show 'Asofdate:      ' $Asofdate

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
C.COMPANY         () on-break print=never level=1 before=Company-Change
C.STATE
C.EMPLID          () on-break print=never level=2 after=EmplID-Change
C.TAX_CLASS
C.LOCALITY
C.NLGRS_QTD

D1.NATIONAL_ID    () on-break print=never level=2 save=$SSN
PN.NAME           () on-break print=never level=2 save=$Name
  move &C.Company to $Company
  do Process-Tax-Balance

FROM  PS_TAX_BALANCE C, PS_NAMES PN, PS_PERS_NID D1, PS_COMPANY_TBL A
WHERE C.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.EMPLID           = C.EMPLID
#ifdef TAXTEST
  AND C.STATE             = 'CA'
#else
  AND C.STATE             = 'FL'
#endif
  AND C.LOCALITY          = ' '
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND C1.BALANCE_ID     = C.BALANCE_ID
         AND C1.BALANCE_YEAR   = C.BALANCE_YEAR
         AND C1.BALANCE_QTR    = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD > 0
  AND A.COMPANY = C.COMPANY
  AND A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
  AND PN.NAME_TYPE = 'PRI'
  AND PN.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = PN.EMPLID
         AND  PX.NAME_TYPE = PN.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
ORDER BY C.COMPANY, D1.NATIONAL_ID, C.STATE, C.LOCALITY, C.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Tax-Balance
  do Format-Number(&C.NLGrs_QTD, $NLGrs_QTD, '99999999.99')
  add &C.NLGrs_QTD to #PageTotal
  move &C.EmplID to $EmplID
end-procedure

begin-procedure EmplID-Change
  move $SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM($SSN, ' ') = ''
    print 'Applied For' (+2,4)
  else
    print $SSN          (+2,4)  edit xxxbxxbxxxx
  end-if

  uppercase $Name
  print $Name           (0,18,20)

  print $NLGrs_QTD          (0,58)

  move '' to $NLGrs_QTD

  add 1 to #Employees_On_Page

  if #Employees_On_Page = 22
    do Page-Complete
  end-if
end-procedure

begin-procedure Page-Complete
  print 'TOTAL WAGES THIS PAGE:' (+2,34)
  do Format-Number (#PageTotal, $out, '99999999.99')
  print $out (0,58)
  add 1 to #PAGE_NUM
  add #PageTotal to #CoTotal

  put #PAGE_NUM into Grand(#PAGE_NUM) GrandPageNo
  put $out   into Grand(#PAGE_NUM) GrandTotals

  new-page
  move 0 to #PageTotal
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Company-Change
  if #Employees_On_Page < 22 and #Employees_On_Page > 0
    do Page-Complete
  end-if

  let $lastpage = 'Y'

  if #PAGE_NUM > 0
    add 1 to #PAGE_NUM
    do Print-Summary-Totals
    new-page
  end-if

  move 0 to #PAGE_NUM
  move 0 to #CoTotal
  move &C.Company to $Company
  do Get-Company-Data
  do Get-State-Tax-Data             !Employer ID
  let $lastpage = 'N'
end-procedure


begin-procedure Print-Summary-Totals

  let #count_pg_num = 0
  do Print-Summary-Heading

  let #rowcount = 1
  let #PAGE_WHILE = #PAGE_NUM

  while #rowcount <  #PAGE_WHILE
     get #GrandPageNo from Grand(#rowcount) GrandPageNo
     get $GrandTotals from Grand(#rowcount) GrandTotals
    
     do Format-Number(#GrandPageNo, $out1, '999')
     print $out1                          (+2,4)
     print $GrandTotals                  (0,58)

     let #count_pg_num = #count_pg_num + 1

     if #count_pg_num > 24
       new-page
       let #PAGE_NUM = #PAGE_NUM + 1
       do Print-Summary-Heading
       let #count_pg_num = 0
     end-if

     add 1 to #rowcount
  end-while

  print 'TOTAL WAGES THIS REPORT '       (+4,12)
  do Format-Number(#CoTotal, $out, '999999999.99')
  print $out                             (0,57)
 
end-procedure


begin-procedure Print-Summary-Heading

  print 'PAGE NUMBER'                 (+2,4)
  print '             '               (0,18)
  print 'PAGE TOTALS     '            (0,58)
  print '                '            (+1,58)
 
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Date Math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API

