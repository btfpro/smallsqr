!***********************************************************************
!  TAX5162T Special Accumulator Update - Two Tiered Suppl - 2005       *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:06:22:26                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'  !Set environment
#include 'setup02.sqc' !printer and page-size initialization
#Include 'usarpt.sqc'  !Get USA variables

begin-report
  do Init-Report
  do Process-Main
  do NTR-Check
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Init-DateTime
  move '1' to $MMLZero
  move '1' to $DDLZero
  move '1' to $Year4
  move '-' to $DDelimiter
  do Stdapi-Init
  do Select-Parameters
  move 'TAX5162T' to $ReportID
  if $ActionType = 'U'
    move 'Special Accumulator Update Report' to $ReportTitle
  else
    move 'Special Accumulator Audit Report' to $ReportTitle
  end-if
  display ' '
  display $ReportTitle
  display ' '

  do Get-Current-DateTime
  let $StartDate = $AsOfToday
  do Format-DateTime('20041231', $PPEDate, {DEFCMP}, '', 'native')
  move 'N' to $EmpFound
  if $PayEndDt = ''
    move $AsOfToday to $NewEffDt
  else
    move $PayEndDt to $NewEffDt
  end-if

  do Select-Installation

end-procedure

begin-heading 7
  #include 'stdhdg01.sqc'
  print $heading_dt                   (-1,,) center

  print 'Balance'                                      (+3,98)
  print 'Balance'                                     (, 114)
  print 'Spec Accum'                                  (,155)
  print 'Employee Id'                                 (+1, 1)
  print 'Company'                                      (, 15)
  print 'Name'                                         (, 30)
  print '   ID'                                        (, 80)
  print 'QTR'                                          (, 101)
  print 'PERIOD  '                                     (, 116)
  print 'Erncd'                                        (, 129)
  print ' Tax Grs   '                                  (, 142)
  print ' Upd Amt  '                                   (, 155)
end-heading

begin-procedure Select-Installation

begin-SELECT
I.BAL_ID_FOR_CAL_YR

FROM PS_INSTALLATION I

end-SELECT

let $Bal-ID = &I.BAL_ID_FOR_CAL_YR

end-procedure

begin-procedure Process-Main

begin-SELECT
AA.COMPANY
AA.PAYGROUP
AA.CHECK_DT
AA.PAY_END_DT

  let $Pay-End-Dt = &AA.PAY_END_DT
  let $Company = &AA.COMPANY
  let $Paygroup = &AA.PAYGROUP
  do Process-Employees

FROM PS_PAY_CALENDAR AA WHERE
 AA.PAY_END_DT = (SELECT MIN(AA1.PAY_END_DT) FROM PS_PAY_CALENDAR AA1
                            WHERE AA1.COMPANY=AA.COMPANY
                            AND AA1.PAYGROUP=AA.PAYGROUP
                            AND AA1.CHECK_DT > $PPEDate)

ORDER BY AA.COMPANY, AA.PAYGROUP

end-SELECT

end-procedure

begin-procedure Process-Employees

begin-SELECT
A.OTH_EARNS
B.ERNCD
B.ERNCD_SPCL
D.EMPLID          () on-break print=never AFTER=Process-EE  level=1
D.PAY_END_DT      () on-break print=never AFTER=Process-Pay-End level=2
A.SEPCHK          () on-break print=never AFTER=Process-Check  level=3
D.COMPANY
D.EMPL_RCD
D.PAYGROUP
E.TXGRS_CUR
PN.LAST_NAME
PN.FIRST_NAME
PN.MIDDLE_NAME

   let $Emplid = &D.EMPLID
   let $Company = &D.COMPANY
   let $Paygroup = &D.PAYGROUP
   let $PrintCompany = &D.COMPANY
   let #EmplRcd = &D.EMPL_RCD
   let $Erncd-Spcl = &B.ERNCD_SPCL
   let $Erncd = &B.ERNCD
   let $LastName = &PN.LAST_NAME
   let $FirstName = &PN.FIRST_NAME
   let $MiddleName = &PN.MIDDLE_NAME
   let #pre-amt = &A.OTH_EARNS
   let #pre-tx-grs = &E.TXGRS_CUR
   add &A.OTH_EARNS to #test-pre-amt

   let #Oth-Earns = &A.OTH_EARNS
   if $Emplid = $Prior-EE
       let $PrintCompany = ' '
       let $LastName = ' '
       let $FirstName = ' '
       let $MiddleName = ' '
   end-if
   if $Emplid <> $Prior-EE
       let $Prior-EE = $Emplid
   end-if
   do Print-Name
   do Print-ERNCD

FROM
 PS_PAY_OTH_EARNS A, PS_EARNINGS_SPCL B, PS_EARNINGS_TBL C, PS_PAY_CHECK D,  PS_PAY_TAX E, PS_PERSON F, PS_PERSON_NAME PN
WHERE A.ERNCD = B.ERNCD
  AND A.COMPANY= $Company
  AND A.PAYGROUP= $Paygroup
  AND A.COMPANY=D.COMPANY
  AND A.PAYGROUP=D.PAYGROUP
  AND A.PAY_END_DT=D.PAY_END_DT
  AND A.OFF_CYCLE=D.OFF_CYCLE
  AND A.SEPCHK=D.SEPCHK
  AND A.PAGE_NUM=D.PAGE_NUM
  AND A.LINE_NUM=D.LINE_NUM
  AND A.COMPANY=E.COMPANY
  AND A.PAYGROUP=E.PAYGROUP
  AND A.PAY_END_DT=E.PAY_END_DT
  AND A.OFF_CYCLE=E.OFF_CYCLE
  AND A.SEPCHK=E.SEPCHK
  AND A.PAGE_NUM=E.PAGE_NUM
  AND A.LINE_NUM=E.LINE_NUM
  AND D.EMPLID=F.EMPLID
  AND F.EMPLID=PN.EMPLID
  AND D.PAYCHECK_STATUS IN ('A','F','R')
  AND D.CHECK_DT > $PPEDate
  AND A.PAY_END_DT <= $NewEffDt
  AND A.PAY_END_DT >= $Pay-End-Dt
  AND E.TAX_CLASS = 'H'
  AND E.STATE='$U'
  AND B.ERNCD=C.ERNCD
  AND B.SPCL_EFFECT = 'T'
  AND C.TAX_METHOD IN ('S', 'X')
  AND  B.EFFDT = (SELECT MAX(B1.EFFDT)
                 FROM PS_EARNINGS_SPCL B1
                 WHERE B.ERNCD = B1.ERNCD
                 AND B.ERNCD_SPCL = B1.ERNCD_SPCL)
  AND C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_EARNINGS_TBL C1
                 WHERE C.ERNCD = C1.ERNCD)
ORDER BY D.COMPANY,D.EMPLID

end-SELECT

end-procedure

begin-procedure Process-Check
   let #pre-amt = #test-pre-amt
   if #test-pre-amt > 0
     if #test-pre-amt > #pre-tx-grs
       let #pre-amt = #pre-tx-grs
     end-if
     add #pre-amt to #amt
   else
     if #pre-tx-grs < 0
       if #test-pre-amt < #pre-tx-grs
          let #pre-amt = #pre-tx-grs
       end-if
     add #pre-amt to #amt
     end-if
   end-if
   move 0 to #test-pre-amt

end-procedure

begin-procedure Process-Pay-End
     move 0 to #test-pre-amt
end-procedure

begin-procedure Process-EE
    do Get-Earnings-SPCL
    let #amt = 0
end-procedure


begin-procedure Get-Earnings-SPCL

move 'N' to $RecordFlag

begin-SELECT
G.EMPLID
G.COMPANY
G.BALANCE_ID
G.BALANCE_YEAR
G.BALANCE_QTR
G.BALANCE_PERIOD
G.EMPL_RCD
G.SPCL_BALANCE
G.ERNCD
G.HRS_YTD
G.HRS_QTD
G.HRS_MTD
G.GRS_YTD
G.GRS_QTD
G.GRS_MTD

  move &G.EMPLID to $Empl
  move &G.BALANCE_PERIOD to $Per
  move 'Y' to $RecordFlag

FROM
 PS_EARNINGS_BAL G, PS_EARNINGS_SPCL H, PS_EARNINGS_TBL I

WHERE  G.EMPLID = $Emplid
AND G.COMPANY = $Company
AND G.BALANCE_YEAR = 2005
AND G.ERNCD = H.ERNCD_SPCL
AND H.EFFDT = (SELECT MAX(H1.EFFDT)
                 FROM PS_EARNINGS_SPCL H1
                 WHERE H.ERNCD = H1.ERNCD
                 AND H.ERNCD_SPCL = H1.ERNCD_SPCL
                 AND H1.EFFDT <= $NewEffDt)
AND G.ERNCD=H.ERNCD_SPCL
AND G.BALANCE_ID = $Bal-ID
AND H.ERNCD=I.ERNCD
AND H.SPCL_EFFECT = 'T'
AND I.TAX_METHOD IN ('S', 'X')
AND I.EFFDT = (SELECT MAX(I1.EFFDT)
                FROM PS_EARNINGS_TBL I1
                WHERE I.ERNCD=I1.ERNCD)
AND G.BALANCE_PERIOD = (SELECT MAX(G2.BALANCE_PERIOD)
                        FROM PS_EARNINGS_BAL G2
                     WHERE G.EMPLID = G2.EMPLID
                     AND G.COMPANY = G2.COMPANY
                     AND G.BALANCE_ID = G2.BALANCE_ID
                     AND G.BALANCE_YEAR = G2.BALANCE_YEAR
                     AND G.BALANCE_QTR  = G2.BALANCE_QTR
                     AND G.EMPL_RCD = G2.EMPL_RCD
                     AND G.SPCL_BALANCE = G2.SPCL_BALANCE
                     AND G.ERNCD = G2.ERNCD)

ORDER BY G.BALANCE_QTR, G.BALANCE_PERIOD

end-SELECT

  if $RecordFlag = 'Y'
    let $Balance_ID = &G.BALANCE_ID
    let $Balance_Year = &G.BALANCE_YEAR
    let #Balance_Year = &G.BALANCE_YEAR
    let $Balance_Qtr = &G.BALANCE_QTR
    let #Balance_Qtr = &G.BALANCE_QTR
    let $Balance_Period = &G.BALANCE_PERIOD
    let #Balance_Period = &G.BALANCE_PERIOD
    let $Response = 'Update'
  else
    do Insert-Selected-Balance-Info
  end-if
  let $Spec-ERNCD     = &G.ERNCD

  do Print-Info
  if $ActionType = 'U'
    if $RecordFlag = 'N'
      do Insert-Earnings-SPCL
    else
      do Update-Earnings-SPCL
    end-if
  end-if

end-procedure

begin-procedure Insert-Selected-Balance-Info

  do Select-Pay-End-Dt
  let $Balance_ID = $Bal-ID
  let $Balance_Year = '2005'
  let #Balance_Year = 2005
  let $Balance_Qtr = $Obtained-Balance-Qtr
  let #Balance_Qtr = $Obtained-Balance-Qtr
  let $Balance_Period = $Obtained-Balance-Period
  let #Balance_Period = $Obtained-Balance-Period
  let $Response = 'Insert'

end-procedure

begin-procedure  Select-Pay-End-Dt

begin-SELECT
J.BALANCE_ID
J.BALANCE_YEAR
J.BALANCE_PERIOD
J.BALANCE_QTR

  let $Obtained-Balance-ID = &J.BALANCE_ID
  let $Obtained-Balance-Qtr = &J.BALANCE_QTR

  let $Obtained-Balance-Period = &J.BALANCE_PERIOD

FROM PS_PAY_CAL_BAL_ID J WHERE
J.COMPANY= $Company
AND J.PAYGROUP=$Paygroup
AND J.BALANCE_ID = $Bal-ID
AND J.BALANCE_YEAR>2004
AND J.BALANCE_YEAR= (SELECT MAX(J1.BALANCE_YEAR) FROM
                   PS_PAY_CAL_BAL_ID J1
                   WHERE J1.COMPANY=J.COMPANY
                    AND J1.PAYGROUP=J.PAYGROUP
                    AND J1.BALANCE_PERIOD=
                           (SELECT MAX(J2.BALANCE_PERIOD) FROM
                                       PS_PAY_CAL_BAL_ID J2
                                 WHERE   J2.COMPANY=J1.COMPANY
                                   AND J2.PAYGROUP=J1.PAYGROUP
                                   AND J2.BALANCE_YEAR=J1.BALANCE_YEAR))
end-SELECT


end-procedure
begin-procedure Insert-Earnings-SPCL
  let $sql-statement = 'TAX5162T.SQR,Insert-Earnings-Bal,Insert,PS_EARNINGS_BAL'
BEGIN-SQL
INSERT INTO PS_EARNINGS_BAL
(EMPLID,
 COMPANY,
 BALANCE_ID,
 BALANCE_YEAR,
 BALANCE_QTR,
 BALANCE_PERIOD,
 EMPL_RCD,
 SPCL_BALANCE,
 ERNCD,
 HRS_YTD,
 HRS_QTD,
 HRS_MTD,
 GRS_YTD,
 GRS_QTD,
 GRS_MTD
)
VALUES
($Emplid,
 $Company,
 $BALANCE_ID,
 #BALANCE_YEAR,
 #BALANCE_QTR,
 #BALANCE_PERIOD,
 #EmplRcd,
 'Y',
 $Erncd-Spcl,
 0,
 0,
 0,
 #amt,
 #amt,
 #amt
)
end-sql

move 'Y' to $InsertedFed

END-PROCEDURE


begin-procedure Update-Earnings-SPCL

  let #G.GRS_YTD = #amt
  let #G.GRS_QTD = #amt
  let #G.GRS_MTD = #amt

  let $sql-statement = 'TAX5162T.SQR,Update-Earnings-Bal,Update,PS_EARNINGS_BAL'
BEGIN-SQL
UPDATE PS_EARNINGS_BAL
  SET GRS_YTD = #amt,
      GRS_QTD = #amt,
      GRS_MTD = #amt
WHERE  EMPLID = $Emplid
AND COMPANY = $Company
AND BALANCE_YEAR = #Balance_Year
AND BALANCE_QTR  = #Balance_Qtr
AND BALANCE_PERIOD  = #Balance_Period
AND EMPL_RCD = &G.EMPL_RCD
AND SPCL_BALANCE = &G.SPCL_BALANCE
AND ERNCD = $Spec-ERNCD
AND BALANCE_ID = $Bal-ID

end-sql

move 'Y' to $InsertedFed

END-PROCEDURE

begin-procedure Print-Name
  print $Emplid                   (+1,1,11)
  print $PrintCompany              (0,17,3)
  let $LastName = rtrim($LastName,' ')
  print $LastName                (0,30,20)
  print ', '                      ()
  let $FirstName = rtrim($FirstName,' ')
  print $FirstName               (0,53,25)
  print $MiddleName              (0,80,1) edit bx

end-procedure

begin-procedure Print-ERNCD

  print &B.ERNCD                   (0,131)
  print #Oth-Earns                 (0,140) edit 99,999,999.99

end-procedure

begin-procedure Print-Info
  let #print_amt = #amt
  move 'Y' to $EmpFound
  print $Balance_ID             (0,82,11)
  print $Balance_Qtr             (0,102)  edit B9
  print $Balance_Period          (0,118)  edit B99
  print #print_amt               (0,155)  edit B9,999,999.99
  print $Response                  (0,170)
end-procedure


begin-procedure NTR-Check
  if $EmpFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    print '********************************'  (+3,1)
    print '  No Employee Records Selected  '  (+1,1)
    print '********************************'  (+1,1)
    date-time () hh:mi:ss &t2
    display &t2
  end-if
end-procedure

begin-procedure Select-Parameters

Begin-select
MASS.ACTION_TYPE
MASS.PAY_END_DT

    let $ActionType     = RTRIM(&MASS.ACTION_TYPE, ' ')
    let $PayEndDt       = &MASS.PAY_END_DT

FROM PS_RC_MASS_EE_UPD MASS
WHERE MASS.OPRID         = $Prcs_OprID
  AND MASS.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT
end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !dtu-subtract-days
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
