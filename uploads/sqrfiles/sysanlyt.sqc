! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSOPTZN: Analytic audit report                                  *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                   /peopletools/SQR/sysanlyt.sqc
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------!
! Procedure: SYSANLYT-Main                                             !
! Descr:     Control function for checking analytic                !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure SYSANLYT-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Analytic Audit'

    do SysOptzn-01
    do SysOptzn-02
    do SysOptzn-03
    do SysOptzn-04
!    do SysOptzn-05
    do SysOptzn-06
    do SysOptzn-07
    do SysOptzn-08
!    do SysOptzn-09
    do SysOptzn-10
    do SysOptzn-11
    do SysOptzn-12
    do SysOptzn-13
    do SysOptzn-14
!    do SysOptzn-15
    do SysOptzn-16
    do SysOptzn-17
    do SysOptzn-18
    do SysOptzn-19
!    do SysOptzn-20
    do SysOptzn-21
    do SysOptzn-22

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysOptzn-01                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-1: Verify Problem Type Defns against RecDefns       !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-01

    let $AuditDescr = '(OPTZN-1) Problem Type Records that do not have '
      || 'matching record definitions: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Problem Type'   #Start1 21 into printarray(0)
   put 'Record Name'    #Start2 21 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.PROBTYPE      &Optzn1_ProbType
A.RECNAME       &Optzn1_RecName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn1_ProbType   (+1, #Start1)
   print &Optzn1_RecName    (0,#Start2)

FROM PSOPTREC A
WHERE NOT EXISTS
    (SELECT RECNAME
     FROM PSRECDEFN B
     WHERE B.RECNAME = A.RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-02                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-2: Verify RecDefn exists if PSRECDEFN.OPTDELRECNAME !
!                     is set.                                          !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-02

    let $AuditDescr = '(OPTZN-2) Analytic delete records that do not '
      || 'have matching definitions: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #Start3          = 51
   let #numofhdr        =  3
   put 'Base Record'    #Start1 21 into printarray(0)
   put 'Delete Record'  #Start2 21 into printarray(1)
   put 'Ownerid'        #Start3  7 into printarray(2)

begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn2_BaseRec
A.OPTDELRECNAME  &Optzn2_DelRec
A.OBJECTOWNERID  &Optzn2_OwnerId

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn2_BaseRec   (+1, #Start1)
   print &Optzn2_DelRec    (0,#Start2)
   print &Optzn2_OwnerId   (0,#Start3)

FROM PSRECDEFN A
WHERE A.OPTDELRECNAME <> ' '
  AND NOT EXISTS
    (SELECT 'X'
     FROM PSRECDEFN B
     WHERE B.RECNAME = A.OPTDELRECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-03                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-3: optzn del record and base record mismatch        !
!                     1 of 3: base rec fields exist but del rec doesnt !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-03

    let $AuditDescr = '(OPTZN-3) Analytic base record has fields '
      || 'that delete record does not: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'
    let #Start1          =  1
    let #Start2          = 26
    let #Start3          = 51
    let #numofhdr        =  3
    put 'Base Record'    #Start1 21 into printarray(0)
    put 'Delete Record'  #Start2 21 into printarray(1)
    put 'Field'          #Start3 21 into printarray(2)

begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn3_BaseRec
A.OPTDELRECNAME  &Optzn3_DelRec
B.FIELDNAME      &Optzn3_FieldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn3_BaseRec   (+1, #Start1)
   print &Optzn3_DelRec    (0,#Start2)
   print &Optzn3_FieldName (0,#Start3)

FROM PSRECDEFN A, PSRECFIELD B
WHERE A.OPTDELRECNAME <> ' '
  AND A.FIELDCOUNT <> 0
  AND B.RECNAME = A.RECNAME
  AND B.FIELDNAME NOT IN
    (SELECT FIELDNAME
     FROM PSRECFIELD C
     WHERE C.RECNAME = A.OPTDELRECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-04                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-4: optzn del record and base record mismatch        !
!                     2 of 3: del rec fields exist but base rec doesnt !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-04

    let $AuditDescr = '(OPTZN-4) Analytic delete record has fields '
      || 'that base record does not: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'
    let #Start1          =  1
    let #Start2          = 26
    let #Start3          = 51
    let #numofhdr        =  3
    put 'Delete Record'  #Start1 21 into printarray(0)
    put 'Base Record'    #Start2 21 into printarray(1)
    put 'Field'          #Start3 21 into printarray(2)

begin-SELECT on-Error=SQL-Error
A.OPTDELRECNAME  &Optzn4_DelRec
A.RECNAME        &Optzn4_BaseRec
B.FIELDNAME      &Optzn4_FieldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn4_DelRec     (+1, #Start1)
   print &Optzn4_BaseRec    (0,#Start2)
   print &Optzn4_FieldName  (0,#Start3)

FROM PSRECDEFN A, PSRECFIELD B
WHERE A.OPTDELRECNAME <> ' '
  AND A.FIELDCOUNT <> 0
  AND B.RECNAME = A.OPTDELRECNAME
  AND B.FIELDNAME NOT IN
    (SELECT FIELDNAME
     FROM PSRECFIELD C
     WHERE C.RECNAME = A.RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-05                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-5: optzn del record and base record mismatch        !
!                     3 of 3: base field is different from  del field  !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-05

    let $AuditDescr = '(OPTZN-5) Analytic base record field '
      || 'definitions that do not match with delete record fields: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'
    let #Start1          =  1
    let #Start2          = 26
    let #Start3          = 51
    let #numofhdr        =  3
    put 'Base Record'    #Start1 21 into printarray(0)
    put 'Delete Record'  #Start2 21 into printarray(1)
    put 'Field'          #Start3 21 into printarray(2)

begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn5_BaseRec
A.OPTDELRECNAME  &Optzn5_DelRec
B.FIELDNAME      &Optzn5_FieldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn5_BaseRec   (+1, #Start1)
   print &Optzn5_DelRec    (0,#Start2)
   print &Optzn5_FieldName (0,#Start3)

FROM PSRECDEFN A, PSRECFIELD B, PSRECFIELD C
WHERE A.OPTDELRECNAME <> ' '
  AND B.RECNAME = A.RECNAME
  AND C.RECNAME = A.OPTDELRECNAME
  AND B.FIELDNAME = C.FIELDNAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-06                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-6: If OPTTRIGFLAG is set, OPTDELRECNAME <> null     !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-06

    let $AuditDescr = '(OPTZN-6) Analytic base record defn has trigger '
      || 'flag set but has no delete record name or vice versa: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'
    let #Start1          =  1
    let #Start2          = 26
    let #Start3          = 41
    let #Start4          = 68
    let #numofhdr        =  4
    put 'Base Record'    #Start1 21 into printarray(0)
    put 'OptTrigFlag'    #Start2 11 into printarray(1)
    put 'Delete Record'  #Start3 21 into printarray(2)
    put 'Ownerid'        #Start4  7 into printarray(3)

begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn6_BaseRec
A.OPTTRIGFLAG    &Optzn6_OptTrigFlag
A.OPTDELRECNAME  &Optzn6_DelRec
A.OBJECTOWNERID  &Optzn6_OwnerId

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn6_BaseRec     (+1, #Start1)
   print &Optzn6_OptTrigFlag (0,#Start2)
   print &Optzn6_DelRec      (0,#Start3)
   print &Optzn6_OwnerId     (0,#Start4)

FROM PSRECDEFN A
WHERE (A.OPTTRIGFLAG = 'Y'
  AND A.OPTDELRECNAME = ' ')
   OR (A.OPTTRIGFLAG = 'N'
  AND A.OPTDELRECNAME <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-07                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-7: If Problem type record requires triggers then    !
!                     PSRECDEFN.OPTTRIGFLAG is 'Y'                     !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-07

    let $AuditDescr = '(OPTZN-7) Analytic records that need to have '
      || 'trigger flag set and do not: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Problem Type'   #Start1 21 into printarray(0)
   put 'Record Name'    #Start2 21 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.PROBTYPE       &Optzn7_ProbType
A.RECNAME        &Optzn7_RecName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn7_ProbType   (+1, #Start1)
   print &Optzn7_RecName    (0,#Start2)

FROM PSOPTREC A, PSRECDEFN B
WHERE A.RECNAME = B.RECNAME
  AND A.READABLE = 'Y'
  AND B.OPTTRIGFLAG <> 'Y'
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysOptzn-08                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-8: If PSRECDEFN.OPTTRIGFLAG is 'Y' then it is used  !
!                     in atleast one problem type                      !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-08

    let $AuditDescr = '(OPTZN-8)  -Informational Only- Analytic records that have trigger '
      || 'flag set but are not marked readable in any problem type: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Record Name'    #Start1 21 into printarray(0)

begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn8_RecName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn8_RecName    (+1,#Start1)

FROM PSRECDEFN A
WHERE A.OPTTRIGFLAG = 'Y'
  AND NOT EXISTS
    (SELECT RECNAME
    FROM PSOPTREC B
    WHERE B.READABLE = 'Y'
      AND B.RECNAME = A.RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-09                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-9: VERIFY THAT PSOPTREC NOT EMPTY FOR A PROBLEM TYPE!
!----------------------------------------------------------------------!
begin-procedure SysOptzn-09

    let $AuditDescr = '(OPTZN-9) -Informational Only- The following problem types do not have '
      || 'any records specified: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Problem Type'    #Start1 21 into printarray(0)

begin-SELECT on-Error=SQL-Error
A.PROBTYPE        &Optzn9_ProbType

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn9_ProbType    (+1,#Start1)

FROM PSOPTPRBTYPE A
WHERE NOT EXISTS
    (SELECT B.PROBTYPE 
    FROM PSOPTREC B
    WHERE B.PROBTYPE = A.PROBTYPE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-10                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-10: VERIFY THAT PSOPTSYNC HAS ENTRIES FOR ALL PROB  !
!            INSTANCES IN PSOPTPRBINST IF READABLE = Y IN              !
!            PSOPTREC                                                  !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-10

    let $AuditDescr = '(OPTZN-10) -Informational Only- Analytic records marked as readable '
      || 'and scenario-managed in problem type definition but are '
      || 'missing from PSOPTSYNC table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Record Name'    #Start1 21 into printarray(0)
   put 'Problem Type'   #Start2 21 into printarray(1)
   
   let $allString = '$ALL$'
    
begin-SELECT on-Error=SQL-Error
B.PROBINST        &Optzn10_ProbInst
A.RECNAME         &Optzn10_RecName
A.PROBTYPE        &Optzn10_ProbType

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn10_RecName    (+1,#Start1)
   print &Optzn10_ProbType   (0,#Start2)

FROM PSOPTREC A, PSOPTPRBINST B
WHERE A.READABLE = 'Y'
AND A.SCENMGMT = 'Y'
AND A.PROBTYPE = B.PROBTYPE
AND NOT EXISTS
       (SELECT C.RECNAME 
       FROM PSOPTSYNC C
       WHERE A.RECNAME = C.RECNAME
       AND B.PROBINST = C.PROBINST)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-11                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-11: VERIFY THAT PSOPTSYNC HAS ENTRY $ALL$ FOR ALL   !
!            RECORDNAMES IN PSOPTREC IF SCENARIO_MANAGED = N           !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-11

    let $AuditDescr = '(OPTZN-11) -Informational Only- Analytic records marked as readable '
      || 'and NOT scenario-managed in problem type definition but are '
      || 'missing from PSOPTSYNC table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Record Name'    #Start1 21 into printarray(0)
   put 'Problem Type'   #Start2 21 into printarray(1)

   let $allString = '$ALL$'
   
   
begin-SELECT on-Error=SQL-Error
A.RECNAME         &Optzn11_RecName
A.PROBTYPE        &Optzn11_ProbType

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn11_RecName    (+1,#Start1)
   print &Optzn11_ProbType   (0,#Start2)
  
FROM PSOPTREC A
WHERE A.SCENMGMT = 'N'
AND A.READABLE = 'Y'
AND NOT EXISTS
    (SELECT B.RECNAME 
     FROM PSOPTSYNC B
     WHERE B.PROBINST = $allString
     AND B.RECNAME = A.RECNAME)
AND EXISTS
    (SELECT C.PROBTYPE 
    FROM PSOPTPRBINST C
    WHERE C.PROBTYPE = A.PROBTYPE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-12                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-12: VERIFY THAT PSOPTSYNC DOES NOT HAVE EXTRA       !
!            ENTRIES THAT ARE NOT PRESENT IN PSOPTREC                  !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-12

    let $AuditDescr = '(OPTZN-12) Analytic Tools Table PSOPTSYNC '
      || 'has extra entries for following record names that are '
      || 'not referred by problem type definitions: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Record Name'    #Start1 21 into printarray(0)
   
begin-SELECT on-Error=SQL-Error
DISTINCT A.RECNAME        &Optzn12_RecName


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn12_RecName    (+1,#Start1)
  

FROM PSOPTSYNC A
WHERE A.RECNAME NOT IN
    (SELECT RECNAME 
    FROM PSOPTREC)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-13                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-13: VERIFY THAT FOR EACH RECORD NAME IN PSOPTREC    !
!            THERE EXISTS AT LEAST ONE FIELD IN PSOPTFIELD             !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-13

    let $AuditDescr = '(OPTZN-13) Following analytic records have NO fields '
      || 'selected in problem type definitions:'
 
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Record Name'    #Start1 21 into printarray(0)
   
begin-SELECT on-Error=SQL-Error
A.RECNAME        &Optzn13_RecName


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn13_RecName    (+1,#Start1)
  

FROM PSOPTREC A
WHERE A.RECNAME NOT IN
    (SELECT B.RECNAME 
    FROM PSOPTFIELD B)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-14                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-14: VERIFY THAT FOR EACH PARAMETER OF TYPE RECARRAY !
!            THE DEFAULT VALUE COLUMN CONTAINS A VALID RECORD NAME     !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-14

    let $AuditDescr = '(OPTZN-14) For following transaction parameters of type'
      || ' RECARRAY the default value contains an invalid record name:'
 
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #Start3          = 51
   let #numofhdr        =  3
   put 'Problem Type'      #Start1 21 into printarray(0)
   put 'Transaction Name'  #Start2 21 into printarray(1)
   put 'Parameter Id'      #Start3 21 into printarray(2)
   
begin-SELECT on-Error=SQL-Error
A.PROBTYPE      &Optzn14_ProbType
A.TRANNAME      &Optzn14_TranName
A.PARMID        &Optzn14_ParmId


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   
   print &Optzn14_ProbType   (+1, #Start1)
   print &Optzn14_TranName   (0,#Start2)
   print &Optzn14_ParmId     (0,#Start3)


FROM PSOPTTRNCTLG A
WHERE PARM_TYPE = 13
AND (DEF_VALUE = ' '
OR DEF_VALUE NOT IN
(SELECT RECNAME FROM PSRECDEFN))
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysOptzn-15                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-15: VERIFY THAT FOR EACH PROBLEM TYPE               !
!            PSOPTSOLVERCODE TABLE IS NOT EMPTY                        !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-15

    let $AuditDescr = '(OPTZN-15) -Informational Only- No solver licenses are specified '
      || 'for the following problem types:'
 
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Problem Type'      #Start1 21 into printarray(0)
   
   
begin-SELECT on-Error=SQL-Error
A.PROBTYPE      &Optzn15_ProbType


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   
   print &Optzn15_ProbType   (+1, #Start1)
  


FROM PSOPTPRBTYPE A
WHERE PROBTYPE NOT IN
(SELECT PROBTYPE FROM PSOPTSOLVERCODE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysOptzn-16                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-16: VERIFY THAT PSOPTSOLVERCODE TABLE CONTAINS      !
!            A NON-NULL LICENSE KEY                                    !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-16

    let $AuditDescr = '(OPTZN-16) The following problem types have NULL '
      || 'as their licence key:'
 
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Problem Type'      #Start1 21 into printarray(0)
   
   
begin-SELECT on-Error=SQL-Error
A.PROBTYPE      &Optzn16_ProbType


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn16_ProbType   (+1, #Start1)
  
FROM PSOPTSOLVERCODE A
WHERE LICENSECODE1 = ' '
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-17                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-17: Verify records that are readable should have    !
!            delete record.                                            !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-17

    let $AuditDescr = '(OPTZN-17) The following analytic records are readable, '
      || 'but do not have delete record: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Problem Type'   #Start1 21 into printarray(0)
   put 'Record Name'    #Start2 21 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.PROBTYPE   &Optzn17_ProbType
A.RECNAME    &Optzn17_RecName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn17_ProbType   (+1, #Start1)
   print &Optzn17_RecName    (0, #Start2)

FROM PSOPTREC A, PSRECDEFN B
WHERE A.RECNAME = B.RECNAME
AND A.READABLE = 'Y'
AND B.OPTDELRECNAME = ' '
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-18                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-18: Verify records that have delete record should   !
!            be marked readable.                                       !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-18

    let $AuditDescr = '(OPTZN-18) The following analytic records have delete record, '
      || 'but are not marked readable: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1
   put 'Record Name'    #Start1 21 into printarray(0)

begin-SELECT on-Error=SQL-Error
A.RECNAME    &Optzn18_RecName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn18_RecName    (+1, #Start1)

FROM PSRECDEFN A
WHERE A.OPTDELRECNAME <> ' '
AND NOT EXISTS
       (SELECT RECNAME
       FROM PSOPTREC B
       WHERE B.READABLE = 'Y'
       AND B.RECNAME = A.RECNAME) 
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-19                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-19: Verify base and delete record fileds should     !
!            have same field orders.                                   !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-19

    let $AuditDescr = '(OPTZN-19) The following base and delete records '
      || 'have different field orders: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #Start3          = 51
   let #Start4          = 76
   let #Start5          = 91
   let #numofhdr        =  5
   put 'Base Record'    #Start1 21 into printarray(0)
   put 'Delete Record'  #Start2 21 into printarray(1)
   put 'Field'          #Start3 21 into printarray(2)
   put 'Field Number'         #Start4 7 into printarray(3)
   put 'Delete Field Number'  #Start5 7 into printarray(4)

begin-SELECT on-Error=SQL-Error
A.RECNAME         &Optzn19_RecName
A.OPTDELRECNAME   &Optzn19_DelRecName
B.FIELDNAME       &Optzn19_FldName
B.FIELDNUM        &Optzn19_FldNum
D.FIELDNUM        &Optzn19_DelFldNum

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn19_RecName    (+1, #Start1)
   print &Optzn19_DelRecName (0, #Start2)
   print &Optzn19_FldName    (0, #Start3)
   print &Optzn19_FldNum     (0, #Start4)
   print &Optzn19_DelFldNum  (0, #Start5)

FROM PSRECDEFN A, PSRECFIELD B, PSRECDEFN C, PSRECFIELD D
WHERE A.OPTDELRECNAME <> ' '
AND A.FIELDCOUNT <> 0
AND A.RECNAME = B.RECNAME
AND A.OPTDELRECNAME = C.RECNAME
AND C.RECNAME = D.RECNAME
AND B.FIELDNAME = D.FIELDNAME
AND B.FIELDNUM <> D.FIELDNUM
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-20                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-20: Verify records in analytic type have fields     !
!            selected but not used in analytic model.                  !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-20

    let $AuditDescr = '(OPTZN-20) The following records in analytic type '
      || 'have fields selected but not used in analytic model: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Record'         #Start1 21 into printarray(0)
   put 'Field'          #Start2 21 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.RECNAME         &Optzn20_RecName
AF.FIELDNAME      &Optzn20_FldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn20_RecName    (+1, #Start1)
   print &Optzn20_FldName    (0, #Start2)

FROM PSOPTREC A, PSOPTPTMODEL B, PSOPTFIELD AF
WHERE A.PROBTYPE = B.PROBTYPE
AND B.MODELTYPE = 'B'
AND AF.RECNAME = A.RECNAME
AND AF.PROBTYPE = A.PROBTYPE
AND AF.FIELDNAME NOT IN (
        SELECT C.FIELDNAME
        FROM PSACECUBECOLMAP C, PSACECUBECOLL D
        WHERE D.ACEMODELID = B.MODELID AND D.RECORDNAME = A.RECNAME AND D.ACECOLLNAME = C.ACECOLLNAME )
AND AF.FIELDNAME NOT IN (
        SELECT E.FIELDNAME
        FROM PSACECUBECOLMAP E, PSACECUBECOLL F
        WHERE F.ACEMODELID = B.MODELID AND F.ACEAGRRECORDNAME = A.RECNAME AND F.ACECOLLNAME = E.ACECOLLNAME ) 

end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-21                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-21: Verify main records in analytic model use       !
!            fields that are selected in analytic type.                !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-21

    let $AuditDescr = '(OPTZN-21) The following main records in analytic model '
      || 'use fields not selected in analytic type: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 36
   let #Start3          = 71
   let #Start4          = 96
   let #numofhdr        =  4
   put 'Analytic Model'    #Start1 31 into printarray(0)
   put 'Cube Collection'   #Start2 31 into printarray(1)
   put 'Record'            #Start3 21 into printarray(2)
   put 'Field'             #Start4 21 into printarray(3)

begin-SELECT on-Error=SQL-Error
A.ACEMODELID     &Optzn21_MdlName
A.ACECOLLNAME    &Optzn21_CCName
B.RECORDNAME     &Optzn21_RecName
A.FIELDNAME      &Optzn21_FldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn21_MdlName    (+1, #Start1)
   print &Optzn21_CCName     (0, #Start2)
   print &Optzn21_RecName    (0, #Start3)
   print &Optzn21_FldName    (0, #Start4)

FROM PSACECUBECOLMAP A, PSACECUBECOLL B, PSRECDEFN C 
WHERE A.ACEMODELID = B.ACEMODELID 
    AND A.ACECOLLNAME = B.ACECOLLNAME
    AND B.RECORDNAME <> ' ' 
    AND A.FIELDNAME <> ' ' 
    AND B.RECORDNAME = C.RECNAME 
    AND C.RECTYPE <> 2 
    AND A.ACEMODELID IN (
        SELECT A2.MODELID 
        FROM PSOPTPTMODEL A2 
        WHERE A2.MODELTYPE = 'B' 
            AND B.ACEMODELID = A2.MODELID 
    )
    AND A.FIELDNAME NOT IN (
        SELECT C1.FIELDNAME 
        FROM PSOPTREC A1, PSOPTPTMODEL B1, PSOPTFIELD C1 
        WHERE A1.PROBTYPE = B1.PROBTYPE 
            AND B1.MODELTYPE = 'B' 
            AND B.ACEMODELID = B1.MODELID 
            AND B.RECORDNAME = A1.RECNAME 
            AND A1.RECNAME = C1.RECNAME 
            AND A1.PROBTYPE = C1.PROBTYPE
    )
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysOptzn-22                                               !
! Descr:     System audit for analytic                                 !
!            OPTZN-22: Verify aggregate records in analytic model use  !
!            fields that are selected in analytic type.                !
!----------------------------------------------------------------------!
begin-procedure SysOptzn-22

    let $AuditDescr = '(OPTZN-22) The following aggregate records in analytic model '
      || 'use fields not selected in analytic type: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 36
   let #Start3          = 71
   let #Start4          = 96
   let #numofhdr        =  4
   put 'Analytic Model'    #Start1 31 into printarray(0)
   put 'Cube Collection'   #Start2 31 into printarray(1)
   put 'Record'            #Start3 21 into printarray(2)
   put 'Field'             #Start4 21 into printarray(3)

begin-SELECT on-Error=SQL-Error
A.ACEMODELID         &Optzn22_MdlName
A.ACECOLLNAME        &Optzn22_CCName
B.ACEAGRRECORDNAME   &Optzn22_RecName
A.ACEAGGRFIELDNAME   &Optzn22_FldName

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Optzn22_MdlName    (+1, #Start1)
   print &Optzn22_CCName     (0, #Start2)
   print &Optzn22_RecName    (0, #Start3)
   print &Optzn22_FldName    (0, #Start4)

FROM PSACECUBECOLMAP A, PSACECUBECOLL B, PSRECDEFN C 
WHERE A.ACEMODELID = B.ACEMODELID 
    AND A.ACECOLLNAME = B.ACECOLLNAME
    AND B.ACEAGRRECORDNAME <> ' ' 
    AND A.ACEAGGRFIELDNAME <> ' ' 
    AND B.ACEAGRRECORDNAME = C.RECNAME 
    AND C.RECTYPE <> 2 
    AND A.ACEMODELID IN (
        SELECT A2.MODELID 
        FROM PSOPTPTMODEL A2 
        WHERE A2.MODELTYPE = 'B' 
            AND B.ACEMODELID = A2.MODELID 
    )
    AND A.FIELDNAME NOT IN (
        SELECT C1.FIELDNAME 
        FROM PSOPTREC A1, PSOPTPTMODEL B1, PSOPTFIELD C1 
        WHERE A1.PROBTYPE = B1.PROBTYPE 
            AND B1.MODELTYPE = 'B' 
            AND B.ACEMODELID = B1.MODELID 
            AND B.ACEAGRRECORDNAME = A1.RECNAME 
            AND A1.RECNAME = C1.RECNAME 
            AND A1.PROBTYPE = C1.PROBTYPE
    ) 
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
