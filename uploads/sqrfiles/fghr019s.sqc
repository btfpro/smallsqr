!***************************************************************************
!  FGHR019S.SQC: Routines shared by Dynamic and Status for CPDF data edits *
!***************************************************************************
!***************************************************************************
!                                                                          *
!                                                                          *
!               Confidentiality Information:                               *
!                                                                          *
!   This module contains confidential and proprietary information          *
!   of Oracle; it is not to be copied, reproduced, or transmitted          *
!   in any form, by any means, in whole or in part, nor is it to           *
!   be used for any purpose other than that for which it is                *
!   expressly provided under the applicable license agreement.             *
!                                                                          *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                        *
!***************************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                          *
!          $Date:  2006/09/05:16:15:19                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                          *
!***************************************************************************


!***********************************************************************
begin-procedure Format-Current-Appt-Authority
!***********************************************************************

do Format-CPDF-Field(&jobf.gvt_curr_apt_auth1,'GVT_CURR_APT_AUTH1',$gvt_curr_apt_auth1)
do Format-CPDF-Field(&jobf.gvt_curr_apt_auth2,'GVT_CURR_APT_AUTH2',$gvt_curr_apt_auth2)

let $authtest = rtrim(&jobf.gvt_curr_apt_auth1,'')
if $authtest <> ''

#IFDEF STATUS_PROC
   Do Check-Posn-Occupied-Either        ! Status only
#END-IF

end-if

do Format-CPDF-Field($authtest,'GVT_CURR_APT_AUTH1',$gvt_curr_apt_auth1)

let $authtest = rtrim(&jobf.gvt_curr_apt_auth2,'')
if $authtest <> ''

#IFDEF STATUS_PROC
   Do Check-Posn-Occupied-Either        ! Status only
#END-IF

end-if

do Format-CPDF-Field($authtest,'GVT_CURR_APT_AUTH2',$gvt_curr_apt_auth2)

#IFDEF STATUS_PROC
Do Check-ES-Pay-Plan-2nd-Auth
#END-IF      ! STATUS_PROC

let $authtest = rtrim(&jobf.gvt_curr_apt_auth1,'')
if $authtest <> ''
   Do Check-Auth-Pay-Plan-Either
end-if

do Format-CPDF-Field($authtest,'GVT_CURR_APT_AUTH1',$gvt_curr_apt_auth1)

let $authtest = rtrim(&jobf.gvt_curr_apt_auth2,'')
if $authtest <> ''
   Do Check-Auth-Pay-Plan-Either
end-if

do Format-CPDF-Field($authtest,'GVT_CURR_APT_AUTH2',$gvt_curr_apt_auth2)

if isnull(rtrim(&jobf.gvt_curr_apt_auth1,' '))
   do Format-CPDF-Field('','GVT_CURR_APT_AUTH1',$gvt_curr_apt_auth1)
end-if

if isnull(rtrim(&jobf.gvt_curr_apt_auth2,' '))
   do Format-CPDF-Field('','GVT_CURR_APT_AUTH2',$gvt_curr_apt_auth2)
end-if

end-procedure

!**********************************************************
begin-procedure Check-Auth-Pay-Plan-Either
!**********************************************************

evaluate $authtest       

  when = 'UAM'                 ! OPM 440.45.3
    if &jobf.gvt_pay_plan = 'GS'
         do Format-CPDF-Field('GG','GVT_CPDF_ERN_PROG',$gvt_cpdf_ern_prog)
    end-if
    break

end-evaluate

end-procedure

!**********************************************************
begin-procedure Format-Position-Occupied
!**********************************************************

do Format-CPDF-Field(&JOBF.GVT_POSN_OCCUPIED,'GVT_POSN_OCCUPIED', $gvt_posn_occupied)

end-procedure

!***********************************************************************
begin-procedure Format-Differentials
!***********************************************************************
move 0 to #retention_allowance
move 0 to #supervisory_diff
move 0 to #staffing_diff
move 0 to #other_diff

BEGIN-SELECT
ERN.FACTOR_MULT
ERN.GVT_CPDF_ERNCD
JOBERN.ERNCD
JOBERN.AMOUNT

#debugd  Show 'Earn Code lookup: ' &jobern.erncd '/' &jobern.amount

  Do Determine-Pay-Frequency

  let #lv_jobern_amount = TRUNC(((&JOBERN.AMOUNT * #gvt_pay_pds_per_yr) + .5),0)

  evaluate &ERN.GVT_CPDF_ERNCD
    when = 'R'       ! Retention Allowance

      !*****************************************************************************
      !   :  If the user has specified a erncd amount for the PAR, then this  *
      !  should supercede any factor_mult computation at the Earnings Table level. *
      !*****************************************************************************

      if (#lv_jobern_amount > 0)

         let #retention_allowance = #retention_allowance + #lv_jobern_amount

      else

         evaluate &jobf.gvt_pay_plan
           when = 'AL'
           when = 'CA'
           when = 'ES'
           when = 'EX'
           when = 'GM'
           when = 'GS'
           when = 'SL'
           when = 'ST'

             Do Determine-Pay-Frequency

             if &ern.factor_mult <= {RETENTION-LIMIT}
               let #retention_allowance = trunc(((&ern.factor_mult * &jobf.gvt_comprate * #gvt_pay_pds_per_yr) + .5),0) + #retention_allowance
             end-if

             break

           when-other

             Do Determine-Pay-Frequency
             let #retention_allowance = trunc(((&ern.factor_mult * &jobf.gvt_comprate * #gvt_pay_pds_per_yr) + .5),0) + #retention_allowance

             break
           end-evaluate
     end-if
     break

    when = 'S' ! supervisory differential
       !*****************************************************************************
       !   :  If the user has specified a erncd amount for the PAR, then this
       !  should supercede any factor_mult computation at the Earnings Table level.
       !*****************************************************************************
       if (#lv_jobern_amount > 0)

          let #supervisory_diff = #supervisory_diff + #lv_jobern_amount

       else

          Do Determine-Pay-Frequency
          let #supervisory_diff = trunc(((&ern.factor_mult * &jobf.gvt_comprate * #gvt_pay_pds_per_yr) + .5),0) + #supervisory_diff

       end-if

       break

    when = 'T'  ! Staffing 

    ! As per OPM Update 34, Staffing Differential will no longer be reported as of 8/1/2000

      if $dtu_effdt < '2000-08-01'
         !*****************************************************************************
         !   :  If the user has specified a erncd amount for the PAR, then this  *
         !  should supercede any factor_mult computation at the Earnings Table level. *
         !*****************************************************************************
         if (#lv_jobern_amount > 0)

                 let #staffing_diff = #staffing_diff + #lv_jobern_amount

         else

            Do Determine-Pay-Frequency
            let #staffing_diff = trunc(((&ern.factor_mult * &jobf.gvt_comprate * #gvt_pay_pds_per_yr) + .5),0) + #staffing_diff

         end-if
      end-if

       break

#IFDEF DYNAMIC_PROC
    when-other

      !*****************************************************************************
      !   :  This code will handle AUO and AVL earnings codes for 818 & 819   *
      !  NOA's.  If award was already set in Procedure Process-Bonus-Awd, then the *
      !  amount calculated here will not be used.                                  *
      !  AUO is calculated to be % of (annual rate + locality).                    *
      !  AVL is calculated to be a defined flat amount.                            *
      !                                                                            *
      !*****************************************************************************

      evaluate &jobf.gvt_noa_code                                    ! We don't care to report other earnings codes that are not handled here. (e.g., Beeper Pay, Holiday, etc.)
        when = '818'    !Percentage of comprate + locality           ! The OPM guidelines do not specify reporting of these codes.
           if &jobern.erncd = 'A05' or &jobern.erncd = 'A10' or
              &jobern.erncd = 'A15' or &jobern.erncd = 'A20' or
              &jobern.erncd = 'A25'
              !**********************************************************************************
              !   :  Do not calculate the AUO percentage.  Just pass along the percentage. *
              !**********************************************************************************
               let #other_diff = &ern.factor_mult * 100          ! is this what we want to pass only the percentage, even if other earnings exist?  Similar to SF50/52 process.
           end-if
          break

        when = '819'
           if &jobern.erncd = 'AVL'
              if (#lv_jobern_amount > 0)
                 let #other_diff = #lv_jobern_amount
              else
                 Do Determine-Pay-Frequency
                 let #other_diff = trunc(((&ern.factor_mult * (&jobf.gvt_comprate + &jobf.gvt_locality_adj) * #gvt_pay_pds_per_yr) + .5),0)
              end-if
           end-if
              break
      end-evaluate

      ! If award values were stored in Awards table for the AUO or AVL, then use those values only if none are present in earnings codes
      ! (i.e., earnings codes take precedence over award amounts if [for some reason] both are present)
      if ($found-award-amount = 'N' or #other_diff > 0) and ((&jobf.gvt_noa_code = '818') OR (&jobf.gvt_noa_code = '819'))
        let $other_diff = to_char(#other_diff)
        do Format-CPDF-Field($other_diff,'GVT_CPDF_AWARD_AMT',$gvt_cpdf_award_amt)
      end-if
#END-IF    DYNAMIC_PROC

  end-evaluate

FROM PS_GVT_JOBERNS JOBERN,
     PS_EARNINGS_TBL ERN
WHERE ERN.ERNCD          = JOBERN.ERNCD
AND   ERN.EFF_STATUS     = 'A'
AND   ERN.GVT_CPDF_ERNCD <> 'N'
AND   ERN.EFFDT          = (SELECT MAX(ERN2.EFFDT)
                            FROM PS_EARNINGS_TBL ERN2
                            WHERE ERN2.ERNCD    = ERN.ERNCD
                            AND ERN2.EFF_STATUS = ERN.EFF_STATUS
                            AND ERN2.EFFDT     <= JOBERN.EFFDT)
AND   JOBERN.EMPLID    = &JOB1.EMPLID
AND   JOBERN.EMPL_RCD = &JOB1.EMPL_RCD
AND   JOBERN.EFFDT     = &JOB1.EFFDT
!AND   JOBERN.EFFDT     = $Job_Effdt
AND   JOBERN.EFFSEQ    = &JOB1.EFFSEQ

END-SELECT

let $retention_allowance = to_char(#retention_allowance)
let $supervisory_diff    = to_char(#supervisory_diff)
let $staffing_diff       = to_char(#staffing_diff)

#IFDEF DYNAMIC_PROC

 ! OPM edit 370.20.2
 ! 5/17/2000  --- When we encounter a 810 noac and the retention allowance is blank,
 !  this can mean a beginning or end to a differential disbursement.
 !  OPM requires that if we do not have a value and the row before this has a value
 ! then we must write '00000' to the dynamic table not a space.
 !
 ! We must look up the row before the current one and see if there is a retention allowance
 ! if this function returns a blank in "$previous_erncd" then there was no prior retention allowance

 ! "R" is for Retention Allowance.
 ! "T" is for Staffing
 ! "S" is for Supervisory Differential

if #staffing_diff = 0

   do Look-Up-Previous-ERNCD('T',$previous_erncd)

   If isnull(rtrim($previous_erncd,' '))
      let $staffing_diff = ''
   else
      let $staffing_diff = '00'    ! pass a double-zero to trick format-cpdf-field into expanding to all zeros
   end-if

end-if

if #supervisory_diff = 0

   do Look-Up-Previous-ERNCD('S',$previous_erncd)

   If isnull(rtrim($previous_erncd,' '))
     let $supervisory_diff = ''
   else
     let $supervisory_diff = '00'    ! pass a double-zero to trick format-cpdf-field into expanding to all zeros
   end-if

end-if

if #retention_allowance = 0

   do Look-Up-Previous-ERNCD('R',$previous_erncd)

   If isnull(rtrim($previous_erncd,' '))
     let $retention_allowance = ''
   else
     let $retention_allowance = '00'    ! pass a double-zero to trick format-cpdf-field into expanding to all zeros
   end-if

end-if

#END-IF    ! DYNAMIC_PROC


do Format-CPDF-Field($staffing_diff,'GVT_CPDF_STFF_DIFF',$gvt_cpdf_stff_diff)
do Format-CPDF-Field($supervisory_diff,'GVT_CPDF_SUPV_DIFF',$gvt_cpdf_supv_diff)
do Format-CPDF-Field($retention_allowance,'GVT_CPDF_RET_ALLW',$gvt_cpdf_ret_allw)

end-procedure


!***********************************************************************
begin-procedure Determine-Pay-Frequency
!***********************************************************************

evaluate &jobf.gvt_pay_basis

  when = 'PA'  !Annual
  when = 'SY'  !School Year
    let #gvt_pay_pds_per_yr = 1
    break
  when = 'PH'  !Hourly
    let #gvt_pay_pds_per_yr = 2080
    break
  when = 'PD'  !Daily
    let #gvt_pay_pds_per_yr = 260
    break
  when = 'BW'  !BiWeekly
    let #gvt_pay_pds_per_yr = 26
    break
  when = 'PM'  !Monthly
    let #gvt_pay_pds_per_yr = 12
    break
  when = 'SM'  !Semi-Monthly
    let #gvt_pay_pds_per_yr = 24
    break
  when-other
    let #gvt_pay_pds_per_yr = 1
end-evaluate

End-Procedure

!***********************************************************************
begin-procedure Get-Ern-Program-Data
!***********************************************************************
move 'N' to $ern_program_notfound

Lookup Ern_Prog_Tbl $parm-pay-plan $ern_data
if isnull($ern_data)
  move 'Y' to $Ern_Program_NotFound

else

   ! because the returned value from the lookup table is
   ! several fields concatenated.  The trailing spaces get left
   ! out so we need to test for the length to extract the values that we need

let #len_of_ern_data = length($ern_data)

   evaluate #len_of_ern_data
     WHEN = 6
        let $gvt_locality_pay_flag  = substr($ern_data,4,1) !crm
        let $gvt_leo_pay_flag       = substr($ern_data,5,1) !crm
        let $gvt_iga_pay_flag       = substr($ern_data,6,1) !crm
     WHEN = 5
        let $gvt_locality_pay_flag  = substr($ern_data,3,1) !crm
        let $gvt_leo_pay_flag       = substr($ern_data,4,1) !crm
        let $gvt_iga_pay_flag       = substr($ern_data,5,1) !crm
   end-evaluate

end-if

end-procedure



!***********************************************************************
begin-procedure Format-Locality-Pay
!***********************************************************************

#debugd  Show '$parm-effdt          = ' $parm-effdt
#debugd  Show '$parm-pay-basis      = ' $parm-pay-basis
#debugd  Show '$parm-pay-rate-deter = ' $parm-pay-rate-deter
#debugd  Show '$parm-pay-plan       = ' $parm-pay-plan
#debugd  Show '#parm-locality-adj   = ' #parm-locality-adj
#debugd  Show '$parm-loc-setid      = ' $parm-loc-setid
#debugd  Show '$parm-location       = ' $parm-location

let #locality_adj = 0

if $parm-pay-basis = 'PH'
  evaluate $parm-pay-rate-deter
    when = 'A'
    when = 'B'
    when = 'E'
    when = 'F'
    when = 'U'
    when = 'V'
      let #locality_adj = (#parm-locality-adj * 2080) + .5
      let #locality_adj = trunc(#locality_adj,0)
      break
    when-other
      let #locality_adj = #parm-locality-adj + .5
      let #locality_adj = trunc(#locality_adj,0)
  end-evaluate
else
  let #locality_adj = #parm-locality-adj + .5
  let #locality_adj = trunc(#locality_adj,0)
end-if

Do Get-Ern-Program-Data

Do Get-Locality-Area

let $locality_area = $return-gvt-locality-area

if rtrim($locality_area,' ') = ''
   Show 'LOCALITY AREA NOT FOUND FOR EMPLID/EFFDT/EFFSEQ: '  &JOB1.EMPLID '/' &JOB1.EFFDT '/' &JOB1.EFFSEQ
end-if

let $pp_category = substr($parm-pay-plan,1,1)

if ($locality_area = '' or $locality_area = '99' or $parm-pay-rate-deter = 'C')     ! 99 = Not in a locality area / C = Critical Position Pay

   OR ($Ern_Program_NotFound = 'Y' or ($gvt_locality_pay_flag = 'N' and $gvt_leo_pay_flag = 'N' and $gvt_iga_pay_flag = 'N'))

   OR (($parm-pay-plan = 'EH' or $parm-pay-plan = 'EI' or
        $parm-pay-plan = 'EX' or $parm-pay-plan = 'ZZ') and
   ($parm-pay-rate-deter = 'A' or  ! Retained Grade
    $parm-pay-rate-deter = 'B' or  ! Retained Grade
    $parm-pay-rate-deter = 'E' or  ! Retained Grade
    $parm-pay-rate-deter = 'F' or  ! Retained Grade
    $parm-pay-rate-deter = 'S' or  ! Continued SES Basic Pay
    $parm-pay-rate-deter = 'U' or  ! Retained Grade
    $parm-pay-rate-deter = 'V'))   ! Retained Grade

   OR ($pp_category = 'B' or $pp_category = 'W' or $pp_category = 'X') and
   not ($parm-pay-rate-deter = 'A' or
        $parm-pay-rate-deter = 'B' or
        $parm-pay-rate-deter = 'E' or
        $parm-pay-rate-deter = 'F' or
        $parm-pay-rate-deter = 'S' or
        $parm-pay-rate-deter = 'U' or
        $parm-pay-rate-deter = 'V')

       let $locality_adj = ' '

       Show '$parm-pay-rate-deter       : ' $parm-pay-rate-deter
       Show '$Ern_Program_NotFound      : ' $Ern_Program_NotFound
       Show '$gvt_locality_pay_flag     : ' $gvt_locality_pay_flag
       Show '$gvt_leo_pay_flag          : ' $gvt_leo_pay_flag
       Show '$gvt_iga_pay_flag          : ' $gvt_iga_pay_flag
else
       let $locality_adj = to_char(#locality_adj)

end-if


end-procedure


!***********************************************************************
begin-procedure Get-Locality-Area
!***********************************************************************

let $return-gvt-locality-area = ''

begin-select
LOC5.GVT_GEOLOC_CD
GEOLOC5.GVT_LOCALITY_AREA

   let $return-gvt-locality-area = &geoloc5.gvt_locality_area

       Show '$gvt_geoloc_cd             : ' &loc5.gvt_geoloc_cd
       Show '$gvt_locality_area         : ' &geoloc5.gvt_locality_area

FROM PS_LOCATION_TBL LOC5,
     PS_GVT_GEOLOC_TBL GEOLOC5
WHERE LOC5.LOCATION   = $PARM-LOCATION
AND   LOC5.SETID      = $PARM-LOC-SETID
AND   LOC5.EFF_STATUS = 'A'
AND   LOC5.EFFDT      = (SELECT MAX(L5.EFFDT)
                         FROM PS_LOCATION_TBL L5
                          WHERE L5.LOCATION     = LOC5.LOCATION
                          AND   L5.SETID        = LOC5.SETID
                          AND   L5.EFF_STATUS   = 'A'
                          AND   L5.EFFDT       <= &RUN_CNTL_FG.ASOFDATE)
!                          AND   L5.EFFDT       <= $PARM-EFFDT)
AND   GEOLOC5.GVT_GEOLOC_CD = LOC5.GVT_GEOLOC_CD
AND   GEOLOC5.EFF_STATUS = 'A'
AND   GEOLOC5.EFFDT =(SELECT MAX(GEO5.EFFDT)
                      FROM PS_GVT_GEOLOC_TBL GEO5
                      WHERE GEO5.GVT_GEOLOC_CD = GEOLOC5.GVT_GEOLOC_CD
                      AND   GEO5.EFF_STATUS    = 'A'
                      AND   GEO5.EFFDT  <= LOC5.EFFDT)
end-select

end-procedure

!**********************************************************
begin-procedure Format-Military-Status
!**********************************************************

do Format-CPDF-Field(&PERSU.MILITARY_STATUS,'MILITARY_STATUS',$military_status)

end-procedure

!***********************************************************************
begin-procedure Get-Employee-Review
!***********************************************************************

!----------------------!
! Initialize Variables !
!----------------------!
let $found-empl-review = 'N'
let $found-opm-rating = 'N'
let $End_Date_Native = ''
let $RatingModel = ''
let $ReviewRating = ''

!------------------!
! Get All Reviews  !
!------------------!
let $Emplid = rtrim(&JOB1.EMPLID, ' ')
let $ERN = rtrim(to_char(&JOB1.EMPL_RCD), ' ')
let $ReviewType = ''
let $BeginDt = ''
let $EndDt = $review-as-of-date
let #MaxReviews = 0
do Get-All-Reviews($Emplid, $ERN, $ReviewType, $BeginDt, $EndDt, #MaxReviews, #ReviewEntries)
!--------------------------!
! Loop through the Reviews !
!--------------------------!
let #CNT = 1
While #CNT <= #ReviewEntries

  !-----------------------!
  ! Get the Status values !
  !-----------------------!
  Get $ReviewStatus        from Reviews(#CNT) ReviewStatus
  Get $ApprovalStatus      from Reviews(#CNT) ApprovalStatus

  !-------------------------------------------------!
  ! If Review Status is 'Complete' and              !
  ! Approval Status is 'Approved' or 'Not Required' !
  ! then get the Period End Daate, Rating Model,    !
  ! and Review Rating, and stop the loop            !
  !-------------------------------------------------!
  Let $ReviewStatus= Rtrim($ReviewStatus ,' ')
  If $ReviewStatus = 'CO' and ($ApprovalStatus = 'APRV' or $ApprovalStatus = 'NREQ')

    Get $PeriodEndDt_YMD     from Reviews(#CNT) PeriodEndDt_YMD
    let $End_Date_String = substr($PeriodEndDt_YMD, 1, 4) || '-' || substr($PeriodEndDt_YMD, 5, 2) || '-' || substr($PeriodEndDt_YMD, 7, 2)
    do Convert-From-DTU-Date($End_Date_String, $End_Date_Native)

    Get $RatingModel         from Reviews(#CNT) RatingModel
    Get $ReviewRating        from Reviews(#CNT) ReviewRating

    let $found-empl-review = 'Y'
    let #CNT = #ReviewEntries + 1

  end-if

  add 1 to #CNT

end-while

!--------------------------------!
! Get OPM Pattern and OPM Rating !
!--------------------------------!
begin-SELECT 
RM1.GVT_OPM_PATTERN
RR1.GVT_OPM_RATING

    let $found-opm-rating = 'Y'

FROM  PS_RATING_MDL_TBL RM1,
      PS_REVW_RATING_TBL RR1
WHERE RM1.RATING_MODEL = $RatingModel
  AND RM1.EFFDT = (SELECT MAX(RM2.EFFDT)
                     FROM PS_RATING_MDL_TBL RM2
                    WHERE RM2.RATING_MODEL = RM1.RATING_MODEL
                      AND RM2.EFFDT <= $End_Date_Native)
  AND RM1.EFF_STATUS = 'A'
  AND RR1.RATING_MODEL = RM1.RATING_MODEL
  AND RR1.EFFDT = RM1.EFFDT
  AND RR1.REVIEW_RATING = $ReviewRating
end-SELECT


!-------------------!
! Format CPDF Field !
!-------------------!
if ($found-empl-review = 'Y') and ($found-opm-rating = 'Y') and ($ReviewRating <> 'X')

   do Format-CPDF-Field(&RR1.GVT_OPM_RATING,'REVIEW_RATING',$review_rating)
   do Format-CPDF-Field($PeriodEndDt_YMD,'GVT_CPDF_REV_PRD',$gvt_cpdf_rev_prd)
   do Format-CPDF-Field(&RM1.GVT_OPM_PATTERN,'GVT_CPDF_REVW_PTRN',$gvt_cpdf_revw_ptrn)

else

   do Format-CPDF-Field('','REVIEW_RATING',$review_rating)
   do Format-CPDF-Field('','GVT_CPDF_REV_PRD',$gvt_cpdf_rev_prd)
   do Format-CPDF-Field('','GVT_CPDF_REVW_PTRN',$gvt_cpdf_revw_ptrn)

end-if

end-procedure


!**********************************************************
begin-procedure Format-Education
!**********************************************************

begin-select
ACCOMP1.YR_ACQUIRED
ACCOMP1.MAJOR_CODE
DEG1.ACCOMPLISHMENT
DEG1.EDUCATION_LVL
    
  ! OPM 780.04.3:  If Instructional Program is not blank, then must report year of degree
#debugd     Show 'EDUCATION STUFF:'
#debugd     Show 'ACCOMP1.YR_ACQUIRED  : ' &ACCOMP1.YR_ACQUIRED
#debugd     Show 'ACCOMP1.MAJOR_CODE   : ' &ACCOMP1.MAJOR_CODE
#debugd     Show 'DEG1.ACCOMPLISHMENT  : ' &DEG1.ACCOMPLISHMENT
#debugd     Show 'DEG1.EDUCATION_LVL   : ' &DEG1.EDUCATION_LVL

    ! OPM indicates as of 8/11/2000 that Highest Educ Level may be reported if it is available
    ! regardless of conditions.

    do Format-CPDF-Field(&DEG1.EDUCATION_LVL,'GVT_CPDF_HI_ED_LVL',$gvt_cpdf_hi_ed_lvl)

    let $year_of_degree = to_char(&ACCOMP1.YR_ACQUIRED)

    if $year_of_degree = '0'
       let $year_of_degree = ''
    end-if

    do Format-CPDF-Field($year_of_degree,'GVT_CPDF_YR_OF_DEG',$gvt_cpdf_yr_of_deg)
                
    !Ensure only 6 character major code values are reported
    let $major_code = rtrim(&ACCOMP1.MAJOR_CODE, ' ')
    let #len_major_code = length($major_code)
    if #len_major_code > 6
       let $major_code = ''
        Show 'INSTITUTIONAL PROGRAM INVALID, VALUE SHOULD NOT EXCEED 6 CHARACTERS: ' &ACCOMP1.MAJOR_CODE
    end-if

    do Format-CPDF-Field($major_code,'GVT_CPDF_INST_PROG',$gvt_cpdf_inst_prog)
                

FROM PS_DEGREE_VW DEG1,
     PS_ACCOMPLISHMENTS ACCOMP1                                 ! OPM 780.03.1 Get only rows as of the $AsOfDate (specific to Status)
WHERE ACCOMP1.EMPLID         = &JOB1.EMPLID
AND   ACCOMP1.ACCOMPLISHMENT = DEG1.ACCOMPLISHMENT
AND   DEG1.EDUCATION_LVL = (SELECT MAX(EDUCATION_LVL)
                            FROM PS_DEGREE_VW DEG2,PS_ACCOMPLISHMENTS ACCOMP2
                            WHERE ACCOMP1.EMPLID        = ACCOMP2.EMPLID
                            AND DEG2.ACCOMPLISHMENT     = ACCOMP2.ACCOMPLISHMENT)
AND ACCOMP1.YR_ACQUIRED  = (SELECT MAX(YR_ACQUIRED) FROM PS_DEGREE_VW DEG3,PS_ACCOMPLISHMENTS ACCOMP3
                            WHERE  ACCOMP3.EMPLID                =  ACCOMP1.EMPLID
                            AND    ACCOMP3.ACCOMPLISHMENT        =  ACCOMP1.ACCOMPLISHMENT
                            AND    DEG3.ACCOMPLISHMENT = ACCOMP3.ACCOMPLISHMENT)
end-select

end-procedure


!**********************************************************
begin-procedure Format-Service-Comp-Date
!**********************************************************

Do Convert-To-DTU-Date($Birthdate_Date,$dtu_birth_dt)
Do Convert-To-DTU-Date($Service_Date,$dtu_serv_dt)
do Convert-To-DTU-Date($AsOfDate,$dtu_AsOfDate)
Do DTU-Diff-Years($dtu_birth_dt,$dtu_serv_dt,#years)

if ($ServCmpDt > $dtu_AsOfDate)  ! OPM 660.02.3
#IFDEF STATUS_PROC
    or (#years < 13)                ! OPM 660.03.1
#END-IF

   do Format-CPDF-Field('','GVT_CPDF_SCD_DT',$gvt_cpdf_scd_dt)

else
   do Format-CPDF-Field($Service_Date,'GVT_CPDF_SCD_DT',$gvt_cpdf_scd_dt)
end-if

end-procedure

!**********************************************************
begin-procedure Format-EX-Grade
!**********************************************************
evaluate $parm-grade-in
  when = 'I'
    let $converted-grade = '01'
    break
  when = 'II'
    let $converted-grade = '02'
    break
  when = 'III'
    let $converted-grade = '03'
    break
  when = 'IV'
    let $converted-grade = '04'
    break
  when = 'V'
    let $converted-grade = '05'
    break
end-evaluate

let $adj_grade = $converted-grade

end-procedure

!-----------------------------!
!#include files               !
!-----------------------------!
#Include 'eputils.sqc'   !Get-All-Reviews procedure
#Include 'datetime.sqc'
