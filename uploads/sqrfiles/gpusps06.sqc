!***********************************************************************
!  gpusps06.sqc:  Payroll Check Print - GPUS                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/01/10:14:59:04                           *
!             $Release:  HR9                                           *
!            $Revision:  102                                           *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
! Function: Generates paycheck for a given RUN_ID or (partial)         *
!           pay calendar.                                              *
!                                                                      *
!                                                                      *
!***********************************************************************
! Change History
! Incident ID    Dated     Comments
!
! 1269701000      7/05     Redundant reads for some tables. Create arrays and read in data
!                          up front and access the array instead of the table for subsequent
!                          data retrieval
!
! 1237142000     12/05     Some of the labels on the "numbers as words" line are hardcoded.
!
! 1450708000      1/06     Printing checks in draft mode are missing the Non-Negotiable label

!#define PRINTER_CHQADV HPLASERJET
#define CHECK_SIZE 24
#define ARRAY_SIZE 10

!***********************************************************************
begin-procedure GP06_init_arrays  
!***********************************************************************
CREATE-ARRAY
    Name=PS06_check_data
    Size={ARRAY_SIZE}
    field=check_nbr:char
    field=check_amt:number
    field=check_dt:char
    field=check_pmtmthd:char
    
    clear-array name=PS06_check_data

    
end-procedure

!***********************************************************************
begin-procedure Load-Check06-Array
!***********************************************************************
  create-array name=Check06-Nbr_Lists size=91 field=NumLit06:char
  put 'One'       into Check06-Nbr_Lists(01)
  put 'Two'       into Check06-Nbr_Lists(02)
  put 'Three'     into Check06-Nbr_Lists(03)
  put 'Four'      into Check06-Nbr_Lists(04)
  put 'Five'      into Check06-Nbr_Lists(05)
  put 'Six'       into Check06-Nbr_Lists(06)
  put 'Seven'     into Check06-Nbr_Lists(07)
  put 'Eight'     into Check06-Nbr_Lists(08)
  put 'Nine'      into Check06-Nbr_Lists(09)
  put 'Ten'       into Check06-Nbr_Lists(10)
  put 'Eleven'    into Check06-Nbr_Lists(11)
  put 'Twelve'    into Check06-Nbr_Lists(12)
  put 'Thirteen'  into Check06-Nbr_Lists(13)
  put 'Fourteen'  into Check06-Nbr_Lists(14)
  put 'Fifteen'   into Check06-Nbr_Lists(15)
  put 'Sixteen'   into Check06-Nbr_Lists(16)
  put 'Seventeen' into Check06-Nbr_Lists(17)
  put 'Eighteen'  into Check06-Nbr_Lists(18)
  put 'Nineteen'  into Check06-Nbr_Lists(19)
  put 'Twenty'    into Check06-Nbr_Lists(20)
  put 'Thirty'    into Check06-Nbr_Lists(30)
  put 'Forty'     into Check06-Nbr_Lists(40)
  put 'Fifty'     into Check06-Nbr_Lists(50)
  put 'Sixty'     into Check06-Nbr_Lists(60)
  put 'Seventy'   into Check06-Nbr_Lists(70)
  put 'Eighty'    into Check06-Nbr_Lists(80)
  put 'Ninety'    into Check06-Nbr_Lists(90)
end-procedure

begin-procedure Load-NumberLits-Array

    do Append_Report_Translation ('LDNUMTRN')
    do Get_Field_Information ('LDNUMTRN', 'ONE',       $Ldnumtrn_One,       #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'TWO',       $Ldnumtrn_Two,       #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'THREE',     $Ldnumtrn_Three,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FOUR',      $Ldnumtrn_Four,      #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FIVE',      $Ldnumtrn_Five,      #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SIX',       $Ldnumtrn_Six,       #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SEVEN',     $Ldnumtrn_Seven,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'EIGHT',     $Ldnumtrn_Eight,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'NINE',      $Ldnumtrn_Nine,      #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'TEN',       $Ldnumtrn_Ten,       #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'ELEVEN',    $Ldnumtrn_Eleven,    #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'TWELVE',    $Ldnumtrn_Twelve,    #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'THIRTEEN',  $Ldnumtrn_Thirteen,  #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FOURTEEN',  $Ldnumtrn_Fourteen,  #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FIFTEEN',   $Ldnumtrn_Fifteen,   #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SIXTEEN',   $Ldnumtrn_Sixteen,   #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SEVENTEEN', $Ldnumtrn_Seventeen, #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'EIGHTEEN',  $Ldnumtrn_Eighteen,  #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'NINETEEN',  $Ldnumtrn_Nineteen,  #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'TWENTY',    $Ldnumtrn_Twenty,    #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'THIRTY',    $Ldnumtrn_Thirty,    #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FORTY',     $Ldnumtrn_Forty,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'FIFTY',     $Ldnumtrn_Fifty,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SIXTY',     $Ldnumtrn_Sixty,     #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'SEVENTY',   $Ldnumtrn_Seventy,   #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'EIGHTY',    $Ldnumtrn_Eighty,    #dummy_width)
    do Get_Field_Information ('LDNUMTRN', 'NINETY',    $Ldnumtrn_Ninety,    #dummy_width)

    let $Ldnumtrn_appended = 'Y'        ! Indicate not to do this again

  create-array name=NumberLits size=91 field=NumLit:char

  put $Ldnumtrn_one       into NumberLits(01)
  put $Ldnumtrn_Two       into NumberLits(02)
  put $Ldnumtrn_Three     into NumberLits(03)
  put $Ldnumtrn_Four      into NumberLits(04)
  put $Ldnumtrn_Five      into NumberLits(05)
  put $Ldnumtrn_Six       into NumberLits(06)
  put $Ldnumtrn_Seven     into NumberLits(07)
  put $Ldnumtrn_Eight     into NumberLits(08)
  put $Ldnumtrn_Nine      into NumberLits(09)
  put $Ldnumtrn_Ten       into NumberLits(10)
  put $Ldnumtrn_Eleven    into NumberLits(11)
  put $Ldnumtrn_Twelve    into NumberLits(12)
  put $Ldnumtrn_Thirteen  into NumberLits(13)
  put $Ldnumtrn_Fourteen  into NumberLits(14)
  put $Ldnumtrn_Fifteen   into NumberLits(15)
  put $Ldnumtrn_Sixteen   into NumberLits(16)
  put $Ldnumtrn_Seventeen into NumberLits(17)
  put $Ldnumtrn_Eighteen  into NumberLits(18)
  put $Ldnumtrn_Nineteen  into NumberLits(19)
  put $Ldnumtrn_Twenty    into NumberLits(20)
  put $Ldnumtrn_Thirty    into NumberLits(30)
  put $Ldnumtrn_Forty     into NumberLits(40)
  put $Ldnumtrn_Fifty     into NumberLits(50)
  put $Ldnumtrn_Sixty     into NumberLits(60)
  put $Ldnumtrn_Seventy   into NumberLits(70)
  put $Ldnumtrn_Eighty    into NumberLits(80)
  put $Ldnumtrn_Ninety    into NumberLits(90)
end-procedure





!***********************************************************************
begin-procedure print_check_usa
!***********************************************************************
Let $space_left = 'n'


#debug do Pslp-Proc-Debug-Msg('** USA CHECK section GPUSPS06.SQC ')
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure print_check_usa')


#debug1 show '** USA CHECK section:      GLOBAL VARS  $gbl_tgt_Emplid = ' $gbl_tgt_Emplid ' $gbl_postal = '$gbl_postal 
#debug1 show '** USA CHECK section:                   $gbl_tgt_mail_drop = '$gbl_tgt_mail_drop ' $gbl_tgt_alt_locadr = ' $gbl_tgt_alt_locadr 
#debug1 show '** USA CHECK section:      GLOBAL VARS1 $gbl_tgt_setid_location = ' $gbl_tgt_setid_location ' $gbl_tgt_deptid = ' $gbl_tgt_deptid
#debug1 show '** USA CHECK section:                   $gbl_tgt_dlvry_opt = ' $gbl_tgt_dlvry_opt ' $gbl_tgt_other_drop = ' $gbl_tgt_other_drop 
#debug1 show '** USA CHECK section:                   $gbl_tgt_pye_nm_opt = ' $gbl_tgt_pye_nm_opt ' $gbl_tgt_setid_dept = ' $gbl_tgt_setid_dept
#debug1 show '** USA CHECK section:                   $gbl_tgt_adr_type = ' $gbl_tgt_adr_type
#debug1 show '** USA CHECK section:                   #current-line = ' #current-line ' #page-count = ' #page-count

if #gbl_Paycheck_Start_Line < #current-line
    let #gbl_Paycheck_Start_Line = #current-line
end-if
do evaluate_space_for_title(#gbl_Paycheck_Start_Line,{CHECK_SIZE}, $space_left)
if ( $space_left = 'y') 
  do Init_Report_Translation ($ReportID, $SQR_Default_Language)
 if upper($gbl_new_lang_flag) = 'Y'
  do Get_Field_Information ($ReportID, 'DATE_LBL' , $CHECK_DT_LBL, #DW)
  do Get_Field_Information ($ReportID, 'CHECK_AMT_LBL' , $CHECK_AMT_LBL, #DW)
  do Get_Field_Information ($ReportID, 'CHECK_NBR_LBL' , $CHECK_NBR_LBL, #DW)
  do Get_Field_Information ($ReportID, 'CHECK_PAY_LBL' , $CHECK_PAY_LBL, #DW)
  do Get_Field_Information ($ReportID, 'CHECK_TO_LBL' , $CHECK_TO_LBL, #DW)
  do Get_Field_Information ($ReportID, 'CHECK_ORDER_LBL' , $CHECK_ORDER_LBL, #DW)
  do Get_Field_Information ($ReportID, 'NO_LBL' , $NO_LBL, #DW)
  do Get_Field_Information ($ReportID, 'MILLION_LBL' , $MILLION_LBL, #DW)
  do Get_Field_Information ($ReportID, 'THOUSAND_LBL' , $THOUSAND_LBL, #DW)
  do Get_Field_Information ($ReportID, 'HUNDRED_LBL' , $HUNDRED_LBL, #DW)
  do Get_Field_Information ($ReportID, 'AND_LBL' , $AND_LBL, #DW)
  do Get_Field_Information ($ReportID, 'DOLLAR_LBL' , $DOLLAR_LBL, #DW)
  do Get_Field_Information ($ReportID, 'NONNEGOTIABLE_LBL' , $NONNEGOTIABLE_LBL, #DW)

  do Load-NumberLits-Array
 end-if
  do Init_Report_Translation ($ReportID, $gbl_tgt_lang_cd)

  Do GP06_init_arrays
  
  do Get_Company_Address_Check($gbl_tgt_company,$CompanyDescr, $CompanyAddrLine1, $CompanyAddrLine2 , 
       $CompanyAddrLine3, $CompanyAddrLine4,$CompanyCITY,$CompanySTATE,$CompanyPOSTAL)

     let $ADDRESS1_EE06 = ' '
     let $ADDRESS2_EE06 = ' '
     let $ADDRESS3_EE06 = ' '
     let $ADDRESS4_EE06 = ' '
     let $CITY_EE06 = ' '
     let $STATE_EE06 = ' '
     let $POSTAL_EE06 = ' '
  evaluate $gbl_tgt_dlvry_opt

  when = 'ADDR'
     Do Get_Payee_Address($gbl_tgt_Emplid, $gbl_tgt_adr_type , $ADDRESS1_EE06, $ADDRESS2_EE06, 
              $ADDRESS3_EE06, $ADDRESS4_EE06, $CITY_EE06, $STATE_EE06, $POSTAL_EE06)
     break
  when = 'HOME'
     Do Get_Payee_Address($gbl_tgt_Emplid, $gbl_tgt_adr_type , $ADDRESS1_EE06, $ADDRESS2_EE06, 
              $ADDRESS3_EE06, $ADDRESS4_EE06, $CITY_EE06, $STATE_EE06, $POSTAL_EE06)
     break
  when = 'DEPT'
     Do Get_Dept_Name_Check($gbl_tgt_deptid, $gbl_tgt_setid_dept, $Dept)
     let $ADDRESS1_EE06 = $Dept
     let $ADDRESS2_EE06 = ' '
     let $ADDRESS3_EE06 = ' '
     let $ADDRESS4_EE06 = ' '
     let $CITY_EE06 = ' '
     let $STATE_EE06 = ' '
     let $POSTAL_EE06 = ' '
     BREAK
  when = 'DROP'
     let $ADDRESS1_EE06 = $gbl_tgt_mail_drop
     let $ADDRESS2_EE06 = ' '
     let $ADDRESS3_EE06 = ' '
     let $ADDRESS4_EE06 = ' '
     let $CITY_EE06 = ' '
     let $STATE_EE06 = ' '
     let $POSTAL_EE06 = ' '
     BREAK
  when = 'LOCN'
     do Get_Location_Name_Check($gbl_tgt_location,$gbl_tgt_setid_location, $LOCATION,$ADDRESS1_EE061, 
            $ADDRESS2_EE061, $ADDRESS3_EE061,$ADDRESS4_EE061, $CITY_EE06, $STATE_EE06, $POSTAL_EE06)
     let $ADDRESS1_EE06 = $LOCATION
     let $ADDRESS2_EE06 = $ADDRESS1_EE061
     let $ADDRESS3_EE06 = $ADDRESS2_EE061
     let $ADDRESS4_EE06 = $ADDRESS3_EE061
     BREAK
  when = 'MAIL'
     Do Get_Payee_Address($gbl_tgt_Emplid, 'MAIL' , $ADDRESS1_EE06, $ADDRESS2_EE06, $ADDRESS3_EE06, 
                           $ADDRESS4_EE06, $CITY_EE06, $STATE_EE06, $POSTAL_EE06)
     break
  when = 'OTHL'
     do Get_Location_Name_Check($gbl_tgt_alt_locadr,$gbl_tgt_setid_location, $LOCATION,$ADDRESS1_EE061, 
            $ADDRESS2_EE061, $ADDRESS3_EE061,$ADDRESS4_EE061, $CITY_EE06, $STATE_EE06, $POSTAL_EE06)
     let $ADDRESS1_EE06 = $LOCATION
     let $ADDRESS2_EE06 = $ADDRESS1_EE061
     let $ADDRESS3_EE06 = $ADDRESS2_EE061
     let $ADDRESS4_EE06 = $ADDRESS3_EE061
     BREAK
  when = 'OTHM'
     let $ADDRESS1_EE06 = $gbl_tgt_other_drop
     let $ADDRESS2_EE06 = ' '
     let $ADDRESS3_EE06 = ' '
     let $ADDRESS4_EE06 = ' '
     let $CITY_EE06 = ' '
     let $STATE_EE06 = ' '
     let $POSTAL_EE06 = ' '
     BREAK
end-evaluate

  let $empl_name = $gbl_tgt_pye_nm_opt

  do GP06_Get_Bank_CD
  
  do GP06_Get_DistrictCD
    
  do GP06_Get_Bank_Addr

  do GP06_Get_Check_Data
  
  do GP06_Get_Other_Data

  !do Alter-Printer-ChqAdv
  
  let #cnt = 0
  while #cnt <= #check_cnt
    let $check_nbr = PS06_check_data.check_nbr(#cnt)
    let #check_amt = PS06_check_data.check_amt(#cnt)
    let $check_dt  = PS06_check_data.check_dt(#cnt)
    let $check_pmtmthd  = PS06_check_data.check_pmtmthd(#cnt)
    Add 1 to #cnt
  end-while
  
  if #check_amt = 0 
    let #check_amt = #other_total_amt
    let $check_dt = &other_check_dt
  end-if


!***********************************************************************
!Print the company and bank information and the check number 
!***********************************************************************

 !let #row =  #gbl_Paycheck_Start_Line + 5   !this corresponds to row 61
  let #row =  #gbl_Paycheck_Start_Line

  columns 2 58 71 110

  print $CompanyDescr           (#row,1) bold
  print $CompanyAddrLine1       (+1,1)
  if rtrim($CompanyAddrLine2, ' ') != ''
     print $CompanyAddrLine2    (+1,1)
  end-if
  if rtrim($CompanyAddrLine3, ' ') != ''
     print $CompanyAddrLine3    (+1,1)
  end-if
   
    Let $CHKComAddress = ''
    Let $CompanyCITY = rtrim($CompanyCITY,' ')
    Let $CompanySTATE = rtrim($CompanySTATE,' ')
    if $CompanySTATE != ''
       if rtrim($CompanyPOSTAL,' ') != ''
          concat $CompanyCITY with $CHKComAddress
          concat ', ' with $CHKComAddress
          concat $CompanySTATE with $CHKComAddress
       end-if
  end-if
  concat '  ' with $CHKComAddress !$CompanyPOSTAL
  concat $CompanyPOSTAL With $CHKComAddress
  
  print $CHKComAddress          (+1,1)
  
  next-column

  !do Alter-Printer-Statement

!***********************************************************************
  !Print ABA Fractional number and the City/State Prefix information
!***********************************************************************
  !
  let $BankDistABA_FRRS = $BankDistrict || '-' ||
                      SUBSTR($CHKBankID,5,4) || '/' ||
                      SUBSTR($CHKBankID,1,4)

  print $BankDistABA_FRRS         (#row,1)
       
  next-column
  
  ! Print Bank Information
  !
  print $CHKBankName              (#row,1) bold
  print $CHKBankAddrLine1         (+1,1)
  if rtrim($CHKBankAddrLine2, ' ') != ''
     print $CHKBankAddrLine2      (+1,1)
  end-if
  if rtrim($CHKBankAddrLine3, ' ') != ''
     print $CHKBankAddrLine3      (+1,1)
  end-if 
  
  Let $CHKBankAddress = ''
  Let $CHKBankCity = rtrim($CHKBankCity,' ')
  Let $CHKBankState = rtrim($CHKBankState,' ')
  if $CHKBankState != ''
     if rtrim($CHKBankPostal,' ') != ''
        concat $CHKBankCity with $CHKBankAddress
        concat ', ' with $CHKBankAddress
        concat $CHKBankState with $CHKBankAddress
     end-if
  end-if
  concat '  ' with $CHKBankAddress
  concat $CHKBankPostal With $CHKBankAddress
      
  print $CHKBankAddress           (+1,1)
  
  !do Alter-Printer-ChqAdv


  ! Print Check Number
  !
  next-column
  print $CHECK_NBR_LBL             (#row,1) bold
  
  !do Format-Number(&check_nbr, $out, '999999999999999')
  
  Add 1 to #row
  print $check_nbr      (#row,1) Edit 000000000000000


!***********************************************************************
!print Check Cashing Location on check
!***********************************************************************

  let #row = #row+4 !this corresponds to row 65
  columns 2

  !print $LocationChkCashLoc     (#row,1)


!***********************************************************************
!print the check date and numeric amount
!***********************************************************************

  let #row = #row+3 !this corresponds to row 68

  columns 64 71 96 110

  print $CHECK_DT_LBL            (#row,1) bold ! 'Check Date:'

  next-column

  if not isblank($check_dt)
    do Format-DateTime($check_dt, $out, {DEFDATE}, '', '')
    print $out                    (#row,1) bold
  end-if

  next-column
  print $CHECK_AMT_LBL           (#row,1) bold

  next-column
  
  move #check_amt to #CheckNetPay
  
  !move $check_amt to #CheckNetPay
  
  do Format-Number(#CheckNetPay, $out, '$,$$$,$$$,$$9.99mi')

  let $out = rpad(ltrim($out,' '), 15, '*')

  print $out                    (#row,1) bold


!***********************************************************************
!print the amount in words and the payee information
!***********************************************************************

  let #row = #row + 3 !this corresponds to row 71

  columns 2 14

  print $CHECK_PAY_LBL                   (#row,1) bold ! 'Pay'

  next-column
  graphic         (#row,1,112) horz-line 7

  move #CheckNetPay to #NetPay

  DO Net-Pay-In-Words
  let $NetInWords = '****' || upper($NetInWords) || '****'

  print $NetInWords                ()

  next-column
  print $CHECK_TO_LBL                (+2,1) bold
  print $CHECK_ORDER_LBL             (+1,1) bold
  
  !Remember the Non-Negotiable Line
  
  LET #Non_Negotiable_Pos = #row + 2 
  
  !***********************************
  ! Print Employee's Name and Address
  !***********************************

  next-column
  
  If rtrim($empl_name, ' ') != ''
     let $CheckName = $empl_name
  Else
     let $CheckName = $gbl_tgt_full_name
  End-if

  print $CheckName                 (+1,1) bold
    
  print $ADDRESS1_EE06         (+1,1)
  if rtrim($ADDRESS2_EE06, ' ') != ''
     print $ADDRESS2_EE06         (+1,1)
  end-if
  if rtrim($ADDRESS3_EE06, ' ') != ''
     print $ADDRESS3_EE06        (+1,1)
  end-if
  if rtrim($ADDRESS4_EE06, ' ') != ''
     print $ADDRESS4_EE06         (+1,1)
  end-if
  
  Let $CheckLoc = ''
  Let $CityC = rtrim($City_EE06,' ')
  Let $StateC = rtrim($State_EE06,' ')
  if $StateC != ''
     if rtrim($Postal_EE06,' ') != ''
        concat $CityC with $CheckLoc
        concat ', ' with $CheckLoc
        concat $StateC with $CheckLoc
     end-if
  end-if
  concat '  ' with $CheckLoc
  concat $Postal_EE06 With $CheckLoc
    
  print $CheckLoc   (+1,1)
  
 !**********************************************************************************
 !If $gbl_rc_Proc_Name = GEN, RGEN and RNUM then print check with Signature and MICR 
 !IF COPY or draft mode then print NON-NEGOTIABLE on the check instead
 !**********************************************************************************
 If ($gbl_rc_Proc_Name = 'GEN' OR
    $gbl_rc_Proc_Name = 'RGEN' OR  
    $gbl_rc_Proc_Name = 'RNUM' Or
    $gbl_rc_Draft_Flag <> 'Y') AND
    $check_pmtmthd = 'C'
 
 !***********************************************************************
 !Print Signature
 !***********************************************************************

   !do Init-Signature-Font

   let #row = #row+8 !this corresponds to row 79

   columns 84

   graphic                       (#row,1,42) horz-line 7
   print $SigFont                (+2,1) code-printer={PRINTER_CHQADV}
   
  !LET #Non_Negotiable_Pos = #row + 2 
   
   ! print 'XX TEST XX'            (,+2)

   !***********************************************************************
   !Print MICR
   !***********************************************************************

   let #row = #row+4
   
   !do Alter-Printer-Microcode

   use-column 0
   move $check_nbr to #check_nbr
   do Format-Number(#check_nbr, $CheckNum, '099999999999999')

   let $MicrLine =
           'C' || $CheckNum   || 'C' || ' ' ||
           'A' || $TransitNum || 'A' || ' ' || 
               $CHKAccountNbr || 'C'
                   
   !do Alter-Printer-Microcode
 
   print $MicrLine               (#row,21)
   print ' '                      (+4,)
 
  End-If 

  !***************************************************************************
  !If $gbl_rc_Proc_Name = COPY or $gbl_rc_Draft_Flag = 'Y' then print NON-NEGOTIABLE
  !on the check instead. MICR and Signature should not be included either.
  !***************************************************************************
  If $gbl_rc_Proc_Name = 'COPY' OR
  $gbl_rc_Draft_Flag = 'Y' OR
  $check_pmtmthd <> 'C' OR
  #check_amt = 0
  
     
     columns 50
     
     Let $Non_Negotiable_Line = $NONNEGOTIABLE_LBL
     
     !Do Alter-Printer-Non-Negotiable
     print $Non_Negotiable_Line  (#Non_Negotiable_Pos, 1)
     
  End-If


End-If !if space is available, then only print the check

end-procedure !print_check_usa


!**********************************************************************
begin-procedure GP06_Get_Check_Data
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_Check_Data')
let #check_cnt = 0
let #check_total_amt = 0

BEGIN-SELECT
AB.PYMT_NBR    
AB.GP_PMT_AMT  
AB.PYMT_DT
AB.PAYMENT_MTHD1

  let PS06_check_data.check_nbr(#check_cnt) = &AB.PYMT_NBR
  let #check_amt = &AB.GP_PMT_AMT
  let PS06_check_data.check_amt(#check_cnt) = #check_amt 
  let PS06_check_data.check_dt(#check_cnt)  = &AB.PYMT_DT
  let PS06_check_data.check_pmtmthd(#check_cnt)  = &AB.PAYMENT_MTHD1
  
  let #cnt = #cnt + 1
  let #check_total_amt = #check_total_amt + #check_amt

FROM PS_GP_PYMT_BNK_TBL AB
WHERE AB.CAL_RUN_ID = $gbl_rc_Calendar_Group
  AND AB.EMPLID = $gbl_tgt_Emplid
  AND AB.PMT_GRP_ID = #gbl_tgt_Grp_ID
  !AND AB.PAYMENT_MTHD1 = 'C'
  AND (AB.PAYMENT_MTHD1 = 'C' OR AB.PAYMENT_MTHD1 = 'Z')
  AND AB.RECON_STAT = '01'

END-SELECT

end-procedure !GP06_Get_Check_Data


!**********************************************************************
begin-procedure GP06_Get_Other_Data
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_Other_Data')

let #other_cnt = 0
let #other_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR 
A.GP_PMT_AMT  &other_amt
B.PYMT_DT &other_check_dt


  let #other_cnt = #other_cnt + 1
  let #other_total_amt = #other_total_amt + &other_amt
  !let &other_check_dt  = &B.PYMT_DT 

FROM PS_GP_PYMT_BNK_TBL B, PS_GP_PAYMENT A
WHERE A.CAL_RUN_ID = B.CAL_RUN_ID 
  AND A.EMPLID = B.EMPLID 
  AND A.EMPL_RCD = B.EMPL_RCD 
  AND A.GP_PAYGROUP = B.GP_PAYGROUP 
  AND A.CAL_ID = B.CAL_ID 
  AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID 
  AND A.RSLT_SEG_NUM = B.RSLT_SEG_NUM 
  AND A.PIN_NUM = B.PIN_NUM 
  AND A.INSTANCE = B.INSTANCE 
  AND A.RECIPIENT_TAG = B.RECIPIENT_TAG 
  AND A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
  AND A.EMPLID = $gbl_tgt_Emplid 
  AND A.PMT_TYPE = '01'
  AND (A.PAYMENT_MTHD = 'P' OR A.PAYMENT_MTHD = 'W' OR A.PAYMENT_MTHD = 'A' OR A.PAYMENT_MTHD = 'T')

END-SELECT

end-procedure !GP06_Get_Other_Data


!**********************************************************************
begin-procedure GP06_Get_EE_Name
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_EE_Name')

 let $empl_name = $gbl_tgt_pye_nm_opt

end-procedure !Get_EE_Name

!**********************************************************************
begin-procedure GP06_Get_DistrictCD
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_DistrictCD')
BEGIN-SELECT
A.GPUS_DISTRICT_ID   

 !let $BankDistrict = &A.GPUS_DISTRICT_ID
  
  let $BankDistrict = rtrim(&A.GPUS_DISTRICT_ID,' ') 

FROM PS_GPUS_BNK_DSTRCT A
WHERE A.COUNTRY_CD = $gbl_curr_Section_Country
AND BANK_CD = $CHKBankID

END-SELECT

end-procedure !GP06_Get_DistrictCD




!*********************************************************************
Begin-Procedure GP06_Get_Bank_CD
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_Bank_CD')
BEGIN-SELECT
B.BANK_CD
B.ACCOUNT_EC_ID

       let $TransitNum    = &B.BANK_CD
       let $CHKBankID     = &B.BANK_CD
      !let $CHKAccountNbr = &B.ACCOUNT_EC_ID
       let $CHKAccountNbr = translate(rtrim(&B.ACCOUNT_EC_ID,' '),'-','D') 
       
       
FROM  PS_GP_PAYMENT A,
      PS_SRC_BANK B
WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group
      AND A.EMPLID = $gbl_tgt_Emplid
      AND A.SRC_BANK_ID = B.SRC_BANK_ID
      AND A.PAYMENT_MTHD = 'C'

END-SELECT

end-procedure

!*********************************************************************
Begin-Procedure GP06_Get_Bank_Addr
!**********************************************************************
#debug do Pslp-Proc-Debug-Msg('** USA CHECK section: Procedure GP06_Get_Bank_Addr')
BEGIN-SELECT
A.BANK_NM
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.CITY
A.STATE
A.POSTAL
       let $CHKBankName      = &A.BANK_NM
       let $CHKBankAddrLine1 = &A.ADDRESS1
       let $CHKBankAddrLine2 = &A.ADDRESS2
       let $CHKBankAddrLine3 = &A.ADDRESS3
       let $CHKBankCity      = &A.CITY
       let $CHKBankState     = &A.STATE
       let $CHKBankPostal    = &A.POSTAL
       
FROM  PS_BANK_EC_TBL A
WHERE A.BANK_CD = $CHKBankID

END-SELECT

end-procedure

!*********************************************************************
begin-procedure Net-Pay-In-Words 
!*********************************************************************
  move #NetPay to $NetPay 099999999.99
  if #NetPay < 1.00
    move $NO_LBL to $NetInWords
  else
    move '' to $NetInWords
    move $NetPay to $Input xxx        !isolate Millions
    if $Input <> '000'
      do Convert-Input
      Let $NetInWords = $NetInWords || ' ' || $MILLION_LBL || ' '
    end-if
    move $NetPay to $Input ~~~xxx     !isolate Thousands
    if $Input <> '000'
      do Convert-Input
      Let $NetInWords = $NetInWords || ' ' || $THOUSAND_LBL || ' '
    end-if
    move $NetPay to $Input ~~~~~~xxx  !isolate Hundreds
    do Convert-Input
  end-if
  Let $NetInWords = $NetInWords || ' ' || $AND_LBL || ' '
  concat $NetPay        with $NetInWords ~~~~~~~~~~xx  !Cents portion
  Let $NetInWords = $NetInWords || $DOLLAR_LBL
end-procedure

!*********************************************************************
begin-procedure Convert-Input
  move $Input to $Index x  !isolate the "hundreds" position
  if $Index <> '0'
    do Append-Literal
    Let $NetInWords = $NetInWords || ' ' || $HUNDRED_LBL || ' '
  end-if
  move $Input to $Index ~xx  !isolate the "tens" and "units"
  do Append-Literal
end-procedure

!*********************************************************************
begin-procedure Append-Literal
  move $Index to #Index
  if #Index < 20
    get $NumLit06 from NumberLits(#Index)
    concat $NumLit06 with $NetInWords
  else
    move $Index to $Index x  !isolate the "tens" position
    move $Index to #Index2
    multiply 10 times #Index2
    get $NumLit06 from NumberLits(#Index2)
    concat $NumLit06 with $NetInWords
    if #Index > #Index2
      subtract #Index2 from #Index
      get $NumLit06 from NumberLits(#Index)
      concat '-' with $NetInWords
      concat $NumLit06 with $NetInWords
    end-if
  end-if
end-procedure
!*********************************************************************
