!***************************************
! BAS027: Employee Processing Status
!***************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:35:45                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set Database Environment

Begin-Setup
  #Include 'ptpsp125.sqc'            !Portrait
 !#Include 'ptpsl177.sqc'            !Landscape
End-Setup


#define col_process_status       7   !Process Status
#define col_emplid              12   !Employee Id
#define col_name                25   !Name
#define col_sched_id             8   !Schedule Id
#define col_event_id             6   !Event Id
#define col_event_date          10   !Event Date
#define col_event_class          5   !Event Class
#define col_event_status         6   !Event Status
#define col_process_indicator    9   !Process Indicator
#define col_ben_pgm              7   !Benefit Program

#define col_total                5   !Totals
#define col_sep                  1   !Column Separator

#define MAX_STATUS              15   !Max elements in Proc_Stat_Accums Array

!*************************************
Begin-Program
!*************************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!*************************************
Begin-Procedure Init-Report
!*************************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Accum-Array
  do StdAPI-Init

  let $ReportID    = 'BAS027'
  do Get-Report-Language
  let $ReportTitle  = $BAS027-REPORTTITLE
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS027 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BAS027', 'REPORT_TITLE', $BAS027-REPORTTITLE, #CW)
  do Get_Field_Information ('BAS027', 'INDICATOR',    $BAS027-INDICATOR,   #CW)
  do Get_Field_Information ('BAS027', 'T01_L01A',     $BAS027-T01-L01A,    #CW)
  do Get_Field_Information ('BAS027', 'T01_L01B',     $BAS027-T01-L01B,    #CW)
  do Get_Field_Information ('BAS027', 'T01_L02A',     $BAS027-T01-L02A,    #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'NAME',         $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',   'EVENT',        $BEN1-EVENT,         #CW)
  do Get_Field_Information ('BEN1',   'SCHEDULE',     $BEN1-SCHEDULE,      #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',      $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',   'PROCESS',      $BEN1-PROCESS,       #CW)
  do Get_Field_Information ('BEN1',   'STATUS',       $BEN1-STATUS,        #CW)
  do Get_Field_Information ('BEN1',   'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'CLASS',        $BEN1-CLASS,         #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'PROGRAM',      $BEN1-PROGRAM,       #CW)

End-Procedure

!*************************************
Begin-Procedure Init-Accum-Array
!*************************************

  Create-Array Name=Proc_Stat_Accums
               Size={MAX_STATUS}
               Field=StatusCd:Char
               Field=ReportFlag:Char
               Field=#Tot:Number

  let #Idx = 1

Begin-Select LOOPS={MAX_STATUS}
XLAT.FIELDVALUE

  let $StatusCd = RTRIM(&XLAT.FieldValue,' ')
  PUT $StatusCd 'N' INTO PROC_STAT_ACCUMS(#IDX) STATUSCD REPORTFLAG
  Add 1 to #Idx

FROM  PSXLATITEM XLAT
WHERE XLAT.FIELDNAME   = 'BAS_PROCESS_STATUS'
  AND XLAT.EFF_STATUS = 'A'
  AND XLAT.EFFDT = (SELECT MAX(EFFDT)
                      FROM PSXLATITEM
                     WHERE FIELDNAME   = 'BAS_PROCESS_STATUS'
                       AND FIELDVALUE  = XLAT.FIELDVALUE
                       AND EFFDT      <= $AsOfToday)
ORDER BY XLAT.FIELDVALUE ASC
End-Select

End-Procedure

!*************************************
Begin-Procedure Ask-Values
!*************************************

  do Ask-Schedule-Id
  do Ask-Process-Status

End-Procedure

!*************************************
Begin-Procedure Get-Values
!*************************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-Process-Status

  move 0 to #InputCnt
  let $WhereStatus = 'IN ('

  if $process_status_AE = 'Y'
    let $ProcessStatus = 'AE'
    do Set-Where-Clause
  end-if

  if $process_status_AN = 'Y'
    let $ProcessStatus = 'AN'
    do Set-Where-Clause
  end-if

  if $process_status_AS = 'Y'
    let $ProcessStatus = 'AS'
    do Set-Where-Clause
  end-if

  if $process_status_EE = 'Y'
    let $ProcessStatus = 'EE'
    do Set-Where-Clause
  end-if

  if $process_status_ET = 'Y'
    let $ProcessStatus = 'ET'
    do Set-Where-Clause
  end-if

  if $process_status_FA = 'Y'
    let $ProcessStatus = 'FA'
    do Set-Where-Clause
  end-if

  if $process_status_FE = 'Y'
    let $ProcessStatus = 'FE'
    do Set-Where-Clause
  end-if

  if $process_status_FP = 'Y'
    let $ProcessStatus = 'FP'
    do Set-Where-Clause
  end-if

  if $process_status_NT = 'Y'
    let $ProcessStatus = 'NT'
    do Set-Where-Clause
  end-if

  if $process_status_PE = 'Y'
    let $ProcessStatus = 'PE'
    do Set-Where-Clause
  end-if

  if $process_status_PR = 'Y'
    let $ProcessStatus = 'PR'
    do Set-Where-Clause
  end-if

  if $process_status_RE = 'Y'
    let $ProcessStatus = 'RE'
    do Set-Where-Clause
  end-if

  if #InputCnt = 0
    let $WhereStatus = 'LIKE ''%'''
    let $ProcessStatus = 'ALL'
    do Set-Report-Flag
  else
    let $WhereStatus = $WhereStatus || ')'
  end-if

End-Procedure

!*************************************
Begin-Procedure Ask-Process-Status
!*************************************

  move 0 to #InputCnt
  let $WhereStatus = 'IN ('

GET_INPUT:

  input $ProcessStatus -
  'Enter the Process-Status Codes to report (or ''ALL'') (Enter blank when done)'
  let $ProcessStatus = RTRIM(UPPER($ProcessStatus), ' ')

  if ($ProcessStatus = '') And (#InputCnt = 0)
    let $ProcessStatus = 'ALL'
  end-if

  if ($ProcessStatus = '')
    Goto INPUT_COMPLETE
  end-if

  do Set-Where-Clause

  if ($ProcessStatus <> 'ALL')
    Goto GET_INPUT
  end-if

INPUT_COMPLETE:

  if ($ProcessStatus = 'ALL')
    let $WhereStatus = 'LIKE ''%'''
  else
    let $WhereStatus = $WhereStatus || ')'
  end-if

  display ''

End-Procedure

!*************************************
Begin-Procedure Set-Where-Clause
!*************************************

  if (#InputCnt <> 0)
    let $WhereStatus = $WhereStatus || ','
  end-if
  let $WhereStatus = $WhereStatus || '''' || $ProcessStatus || ''''

  add 1 to #InputCnt
  do Set-Report-Flag

End-Procedure

!*************************************
Begin-Procedure Set-Report-Flag
!*************************************

  let $FoundMatch = 'N'

  move 1 to #Idx
  While (#Idx < {MAX_STATUS})
    get $StatusCd from Proc_Stat_Accums(#Idx)
    if (($ProcessStatus = 'ALL') And ($StatusCd <> ''))
       Or ($ProcessStatus = $StatusCd)
         put 'Y' into Proc_Stat_Accums(#Idx) ReportFlag
         let $FoundMatch = 'Y'
    end-if
    add 1 to #Idx
  End-While

  if ($FoundMatch <> 'Y')
    display 'User entered invalid Process Status Code: ' NoLine
    display $ProcessStatus NoLine
  end-if

End-Procedure

!*************************************
Begin-Heading 7
!*************************************

#Include 'stdhdgtr.sqc'

  print $BEN1-PROCESS     (+2,1,{col_process_status})
  print $BEN1-EMPLOYEE    (0,+{col_sep},{col_emplid})
  print $BEN1-EMPLOYEE    (0,+{col_sep},{col_name})
  print $BEN1-SCHEDULE    (0,+{col_sep},{col_sched_id})
  print $BEN1-EVENT       (0,+{col_sep},{col_event_id})
  print $BEN1-EVENT       (0,+{col_sep},{col_event_date})
  print $BEN1-EVENT       (0,+{col_sep},{col_event_class})
  print $BEN1-EVENT       (0,+{col_sep},{col_event_status})
  print $BEN1-PROCESS     (0,+{col_sep},{col_process_indicator})
  print $BEN1-BENEFIT     (0,+{col_sep},{col_ben_pgm})

  print $BEN1-STATUS      (+1,1,{col_process_status})
  print $BEN1-ID          (0,+{col_sep},{col_emplid})
  print $BEN1-NAME        (0,+{col_sep},{col_name})
  print $BEN1-ID          (0,+{col_sep},{col_sched_id})
  print $BEN1-ID          (0,+{col_sep},{col_event_id})
  print $BEN1-DATE        (0,+{col_sep},{col_event_date})
  print $BEN1-CLASS       (0,+{col_sep},{col_event_class})
  print $BEN1-STATUS      (0,+{col_sep},{col_event_status})
  print $BAS027-INDICATOR (0,+{col_sep},{col_process_indicator})
  print $BEN1-PROGRAM     (0,+{col_sep},{col_ben_pgm})

  print '='               (+1,1,{col_process_status})             Fill
  print '='               (0,+{col_sep},{col_emplid})             Fill
  print '='               (0,+{col_sep},{col_name})               Fill
  print '='               (0,+{col_sep},{col_sched_id})           Fill
  print '='               (0,+{col_sep},{col_event_id})           Fill
  print '='               (0,+{col_sep},{col_event_date})         Fill
  print '='               (0,+{col_sep},{col_event_class})        Fill
  print '='               (0,+{col_sep},{col_event_status})       Fill
  print '='               (0,+{col_sep},{col_process_indicator})  Fill
  print '='               (0,+{col_sep},{col_ben_pgm})            Fill

End-Heading

!*************************************
Begin-Procedure Process-Main
!*************************************

Begin-Select
P.BAS_PROCESS_STATUS      (+1,1,{COL_PROCESS_STATUS}) On-Break
                                                  PRINT=ALWAYS
                                                  LEVEL=1
                                                  PROCEDURE=NEW-PAGE
  let $ProcessStatus = RTRIM(&P.BAS_PROCESS_STATUS,' ')
P.EMPLID              (0,+{COL_SEP},{COL_EMPLID})
D.NAME                (0,+{COL_SEP},{COL_NAME})
P.SCHED_ID            (0,+{COL_SEP},{COL_SCHED_ID})
P.EVENT_ID            (0,+{COL_SEP},{COL_EVENT_ID}) EDIT 999999
P.EVENT_DT
  do Format-Datetime(&P.Event_Dt, $Out, {DEFDATE}, '', '')
  print $Out          (0,+{col_sep},{col_event_date})
P.EVENT_CLASS         (0,+{COL_SEP},{COL_EVENT_CLASS})
P.EVENT_STATUS        (0,+{COL_SEP},{COL_EVENT_STATUS})
P.PROCESS_IND         (0,+{COL_SEP},{COL_PROCESS_INDICATOR})
P.BENEFIT_PROGRAM     (0,+{COL_SEP},{COL_BEN_PGM})

  do Accum-Totals

From PS_BAS_PARTIC    P,
     PS_PERSON_NAME   D

Where P.SCHED_ID   LIKE $Sched_Id
And   P.BAS_PROCESS_STATUS [$WhereStatus]
And   D.EMPLID = P.EMPLID

Order by P.BAS_PROCESS_STATUS ASC,
         P.EMPLID ASC,
         P.SCHED_ID ASC,
         P.EVENT_ID ASC

End-Select

  do Print-Totals

End-Procedure

!*************************************
Begin-Procedure New-Page
!*************************************

  new-page

End-Procedure

!*************************************
Begin-Procedure Accum-Totals
!*************************************

  move 1 to #Idx
  While (#Idx < {MAX_STATUS})
    get $StatusCd from Proc_Stat_Accums(#Idx)
    if ($StatusCd = $ProcessStatus)
      Array-Add 1 to Proc_Stat_Accums(#Idx) #Tot
      Break
    end-if
    add 1 to #Idx
  End-While

End-Procedure

!*************************************
Begin-Procedure Print-Totals
!*************************************

  new-page

  move 0 to #GrandTotal
  move 1 to #Idx
  While (#Idx < {MAX_STATUS})

    get $StatusCd $RptFlag #Tots
    from Proc_Stat_Accums(#Idx) StatusCd ReportFlag #Tot

    if ($RptFlag = 'Y')
 !***     print 'The number of employees with a process status of' (+2,1)
 !***     print $StatusCd              (0,+{col_sep})
 !***     print 'is'                   (0,+{col_sep})
 !***     print #Tots                  (0,+{col_sep}) edit 99999.
      let $Temp_Tots = Edit(#Tots, '99999.')
      let $Temp_Text = $BAS027-T01-L01A || $StatusCd
      let $Temp_Text = $Temp_Text || $BAS027-T01-L01B
      let $Temp_Text = $Temp_Text || $Temp_Tots
      print $Temp_Text                 (+2,1)

    end-if

    add #Tots to #GrandTotal
    add 1 to #Idx

  End-While

  print '                          =====' (+2,30)
 !***print 'Total employees reported:'       (+1,30)
 !***print #GrandTotal                       (0,+{col_sep}) edit 99999.
  let $Temp_GrandTotal = Edit(#GrandTotal, '99999.')
  let $Temp_Text = $BAS027-T01-L02A || $Temp_GrandTotal
  print $Temp_Text                  (+1,30)



End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime
#Include 'getsched.sqc'  !Ask-Schedule-Id

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!****************************** End Of Report *******************************
