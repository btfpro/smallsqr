!********************************************************
!  OHS019.SQR - OSHA 300a Incident Summary              !
!********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:12:52                                 *
!       $Release:  HR9                                                 *
!      $Revision:  101                                                 *
!                                                                      *
!***********************************************************************
!                              *
!                              *
!***********************************************************************


#include 'setenv.sqc'   !Set environment

! No printout for this process, so manually include #setupdb.sqc
! Output will be in RTF format
!----------------------------------------------------------------------
Begin-Setup
#include 'setupdb.sqc'
End-Setup

!----------------------------------------------------------------------
!---------Program------------------------------------------------------
!----------------------------------------------------------------------

!----------------------------------------------------------------------
Begin-Program
DISPLAY 'Begin-Program'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Init-Array

  do Process-Main

  ! Update the Process Scheduler
  !------------------------------------------------------------
  DO Stdapi-Term

End-Program

!----------------------------------------------------------------------
!---------Init-Report--------------------------------------------------
!----------------------------------------------------------------------
! We need to get the calendar year from the process instance
!----------------------------------------------------------------------

begin-procedure Init-Report

  move 'OHS019' to $ReportID
  move 'OSHA 300A Incident Summary' to $ReportTitle
  move 'OSHA300A' to $ProcessName

  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
     STOP QUIET
  else
     do Select-Parameters
  end-if

end-procedure init-report

!----------------------------------------------------------------------
!---------Get-Values---------------------------------------------------
!----------------------------------------------------------------------
! Fetch run control parameters
!----------------------------------------------------------------------
begin-procedure Get-Values

   do Get-From-Thru-Date
   do Get-Establishment

   LET $Quote = ''''
   LET $CRLF = chr(13) ||chr(10) ! Line break read correctly on all platforms
   LET $RTFPageBreak = '\page ' || $CRLF
   LET $RTFDocumentEnd = '}' || $CRLF

end-procedure Get-Values

!----------------------------------------------------------------------
!---------Process-Main-------------------------------------------------
!----------------------------------------------------------------------
!----------------------------------------------------------------------
begin-procedure Process-Main

DO Get-Establishment-Info
DO Format-DateTime($ThruDate, $TempDate, {DEFCMP},'','')
LET $Reporting_Year = {ps-substr}($TempDate, 1, 4)
DO RTF-Add-Token('%YEAR%', $Reporting_Year)
LET #Total-EEs = 0
LET #PageRowCount = 0
LET #Total-EE-Hours = 0
LET #RTF_Seq_Nbr = 1

BEGIN-SELECT
A.ESTABID
A.CASE_NBR_USA
A.NAME
A.JOB_TITLE
A.INCIDENT_DT
A.EXACT_LOCATION
A.OSHA_200_DESCR
A.FATALITY_SW
A.INJURY_ILLNESS
A.RESTRICTD_WORKDAYS
A.AWAY_FROM_WORKDAYS
A.OSHA_INJ_CLASS
A.ILLNESS_RESULT

   LET #Restricted = &A.RESTRICTD_WORKDAYS
   LET #Away       = &A.AWAY_FROM_WORKDAYS
   LET $A_CASE_NBR_USA = &A.CASE_NBR_USA
   
   ! Here, we need to check for any unterminated absences in PS_INJURY_ABSENCES
   ! and calculate the number of days as of the $ThruDate
   ! --------------------------------------------------------------------------
   do Unterminated-Leave-Check
   do Add-Job-Transfers
   
   #DEBUG SHOW '------------------------'
   #DEBUG SHOW '&A.CASE_NBR_USA: ' &A.CASE_NBR_USA
   #DEBUG SHOW '#Restricted: ' #Restricted
   #DEBUG SHOW '#Away: ' #Away
   #DEBUG SHOW '------------------------'
   
   IF rtrim(&A.FATALITY_SW,' ') = 'Y'
       ADD 1 TO #Total_W_Deaths
   ELSE
       IF &A.AWAY_FROM_WORKDAYS > 0
          ADD 1 TO #Total_W_Away
      ELSE
          LET $ILLNESS_RESULT = rtrim(&A.ILLNESS_RESULT,' ')
          IF (&A.RESTRICTD_WORKDAYS > 0) OR ($ILLNESS_RESULT = 'X')
             ADD 1 to #Total_W_Transfer
          ELSE
             ADD 1 to #Total_Other
          END-IF
      END-IF
   END-IF    

   ADD #Restricted TO #Total_Days_Xfer
   ADD #Away TO #Total_Days_Away

   LET #Injury = TO_NUMBER(&A.OSHA_INJ_CLASS)   
   LET PAGE_INJURY_TOTALS.countForType(#Injury) = PAGE_INJURY_TOTALS.countForType(#Injury) + 1

FROM PS_OSHA_300_RPT A
WHERE A.ESTABID = $Estab
  AND A.INCIDENT_DT >= $FromDate
  AND A.INCIDENT_DT <= $ThruDate
ORDER BY A.CASE_NBR_USA, A.INCIDENT_DT
END-SELECT      

LET $TEMP = TO_CHAR(#Total_W_Deaths)
DO RTF-Add-Token('%TOTDEATHS%', $TEMP)

LET $TEMP = TO_CHAR(#Total_W_Away)
DO RTF-Add-Token('%TOTWDAYSAWAY%', $TEMP)

LET $TEMP = TO_CHAR(#Total_W_Transfer)
DO RTF-Add-Token('%TOTXFER%', $TEMP)

LET $TEMP = TO_CHAR(#Total_Other)
DO RTF-Add-Token('%TOTOTHER%', $TEMP)

LET $TEMP = TO_CHAR(#Total_Days_Xfer)
DO RTF-Add-Token('%TOTXFERDAYS%', $TEMP)

LET $TEMP = TO_CHAR(#Total_Days_Away)
DO RTF-Add-Token('%TOTDAYSAWAY%', $TEMP)

LET #I_Loop = 1
WHILE #I_Loop <= 6
      LET $TEMP = '%' || TO_CHAR(#I_Loop)
      LET $TEMP = $TEMP || 'T%'
      LET $TEMPVAL = TO_CHAR(PAGE_INJURY_TOTALS.countForType(#I_Loop))      
      DO RTF-Add-Token($TEMP,$TEMPVAL) 
   ADD 1 to #I_Loop
END-WHILE   

LET #Total-EEs = 0
DO Loop-Through-Paygroups
LET #Total-EEs = ROUND(#Total-EEs, 2)
LET $TEMP = TO_CHAR(#Total-EEs)
DO RTF-Add-Token('%AVGEES%', $TEMP)
LET #Total-EE-Hours = ROUND(#Total-EE-Hours, 2)
LET $TEMP = TO_CHAR(#Total-EE-Hours)
DO RTF-Add-Token('%TOTHOURS%', $TEMP)
DO Merge-File

end-procedure Process-Main

!----------------------------------------------------------------------
!---------Loop-Through-Paygroups---------------------------------------
!----------------------------------------------------------------------
begin-procedure Loop-Through-Paygroups

SHOW '$EstabCompany: ' $EstabCompany

BEGIN-SELECT
PG.PAYGROUP
PG.PAY_FREQUENCY

   SHOW 'PG.PAYGROUP: ' &PG.PAYGROUP
   DO Tally-EEs-For-Paygroup

FROM PS_PAYGROUP_VW PG
WHERE PG.EFFDT = (SELECT MAX(PG1.EFFDT)
                   FROM PS_PAYGROUP_VW PG1
                   WHERE PG1.PAYGROUP = PG.PAYGROUP
                   AND PG1.COMPANY = PG.COMPANY
                   AND PG1.EFFDT <= $ThruDate)
  AND PG.EFF_STATUS = 'A'
  AND PG.COMPANY = $EstabCompany
END-SELECT

end-procedure Loop-Through-Paygroups
!----------------------------------------------------------------------
!---------Tally-EEs-For-Paygroup---------------------------------------
!----------------------------------------------------------------------
! We are going to average the number of employees active by taking one
! point in time from each pay period as defined by the paygroup. This
! type of pay period snapshot is allowed by 29 CFR Parts 1904 and 1952
!
! For MONTHLY, we use calendar months, not pay months for our 
! calculations. Hours worked per year are based on 48 work weeks per
! year.
!----------------------------------------------------------------------
begin-procedure Tally-EEs-For-Paygroup

EVALUATE &PG.PAY_FREQUENCY
   WHEN = 'A' ! ANNUAL
      DO Employee-Snapshot($ThruDate, $Estab, &PG.PAYGROUP, #theCount)
      DO Employee-Hours($ThruDate, $Estab, 48, &PG.PAYGROUP, #hourCount)
      LET #Total-EEs = #Total-EEs + #theCount
      LET #Total-EE-Hours = #Total-EE-Hours + #hourCount
      BREAK
   WHEN = 'M' ! MONTHLY
      LET #M_Loop = 1
      LET #loopCount = 0
      LET #R_Year = TO_NUMBER($Reporting_Year)
      DO dtu-format-date(#R_Year, 1, 1, $TempDate)
      WHILE #M_Loop <= 12
         DO Convert-From-DTU-Date($TempDate, $TempDateConv)
         DO Employee-Snapshot($TempDateConv, $Estab, &PG.PAYGROUP, #theCount)
         DO Employee-Hours($TempDateConv, $Estab, 4, &PG.PAYGROUP, #hourCount)
         LET #loopCount = #loopCount + #theCount
         LET #Total-EE-Hours = #Total-EE-Hours + #hourCount
         ADD 1 to #M_Loop
         DO dtu-add-months($TempDate,1,$TempDate)
      END-WHILE
      LET #Total-EEs = #Total-EEs + (#loopCount / 12)
      BREAK
   WHEN = 'Q' ! QUARTERLY
      LET #Q_Loop = 1
      LET #loopCount = 0
      LET #R_Year = TO_NUMBER($Reporting_Year)
      DO dtu-format-date(#R_Year, 1, 1, $TempDate)
      WHILE #Q_Loop <= 12
         DO Convert-From-DTU-Date($TempDate, $TempDateConv)
         DO Employee-Snapshot($TempDateConv, $Estab, &PG.PAYGROUP, #theCount)
         DO Employee-Hours($TempDateConv, $Estab, 12, &PG.PAYGROUP, #hourCount)
         LET #loopCount = #loopCount + #theCount
         LET #Total-EE-Hours = #Total-EE-Hours + #hourCount
         ADD 3 to #Q_Loop
         DO dtu-add-months($TempDate,3,$TempDate)
      END-WHILE
      LET #Total-EEs = #Total-EEs + (#loopCount / 4)
      BREAK
   WHEN = 'B' ! BI-WEEKLY
   WHEN = 'S' ! SEMI-MONTHLY
      LET #S_Loop = 1
      LET #loopCount = 0
      LET #R_Year = TO_NUMBER($Reporting_Year)
      DO dtu-format-date(#R_Year, 1, 1, $TempDate)
      WHILE #S_Loop <= 24
         DO Convert-From-DTU-Date($TempDate, $TempDateConv)
         DO Employee-Snapshot($TempDateConv, $Estab, &PG.PAYGROUP, #theCount)
         DO Employee-Hours($TempDateConv, $Estab, 2, &PG.PAYGROUP, #hourCount)
         LET #loopCount = #loopCount + #theCount
         LET #Total-EE-Hours = #Total-EE-Hours + #hourCount
         ADD 1 to #S_Loop
         DO dtu-add-weeks($TempDate,2,$TempDate)
      END-WHILE
      LET #Total-EEs = #Total-EEs + (#loopCount / 24)
      BREAK
   WHEN = 'D' ! DAILY - calculates as if WEEKLY
   WHEN = 'W' ! WEEKLY
   WHEN-OTHER ! OTHER - calculates as if WEEKLY
      LET #W_Loop = 1
      LET #loopCount = 0
      LET #R_Year = TO_NUMBER($Reporting_Year)
      DO dtu-format-date(#R_Year, 1, 1, $TempDate)
      WHILE #W_Loop <= 48
         DO Convert-From-DTU-Date($TempDate, $TempDateConv)
         DO Employee-Snapshot($TempDateConv, $Estab, &PG.PAYGROUP, #theCount)
         DO Employee-Hours($TempDateConv, $Estab, 1, &PG.PAYGROUP, #hourCount)
         LET #loopCount = #loopCount + #theCount
         LET #Total-EE-Hours = #Total-EE-Hours + #hourCount
         ADD 1 to #W_Loop
         DO dtu-add-weeks($TempDate,1,$TempDate)
      END-WHILE
      LET #Total-EEs = #Total-EEs + (#loopCount / 48)
      BREAK
END-EVALUATE

end-procedure Tally-EEs-For-Paygroup
!----------------------------------------------------------------------
!---------Employee-Hours-----------------------------------------------
!----------------------------------------------------------------------
Begin-Procedure Employee-Hours($SnapDate, $inEstab, #weeks, $Paygroup, :#hourCount)

BEGIN-SELECT
SUM(STD_HOURS * FTE)  &EE_Hours
   LET #hourCount = &EE_Hours * #weeks
FROM PS_JOB HR
WHERE HR.EFFDT = (SELECT MAX(HR1.EFFDT)
                    FROM PS_JOB HR1
                   WHERE HR1.EMPLID = HR.EMPLID
                     AND HR1.EMPL_RCD = HR.EMPL_RCD
                     AND HR1.EFFDT <= $SnapDate)
  AND HR.EFFSEQ = (SELECT MAX(HR2.EFFSEQ)
                    FROM PS_JOB HR2
                    WHERE HR2.EMPLID = HR.EMPLID
                    AND HR2.EMPL_RCD = HR.EMPL_RCD
                    AND HR2.EFFDT = HR.EFFDT)
  AND HR.JOB_INDICATOR = 'P'
  AND HR.HR_STATUS = 'A'
  AND HR.ESTABID = $inEstab
  AND HR.PAYGROUP = $Paygroup
END-SELECT

End-Procedure Employee-Hours
!----------------------------------------------------------------------
!---------Employee-Snapshot--------------------------------------------
!----------------------------------------------------------------------
begin-procedure Employee-Snapshot($SnapDate, $inEstab, $Paygroup, :#EECount)

BEGIN-SELECT
COUNT(*) &EE_COUNT
    LET #EECount =  &EE_COUNT
FROM PS_JOB J
WHERE J.EFFDT = (SELECT MAX(J1.EFFDT)
                   FROM PS_JOB J1
                  WHERE J1.EMPLID = J.EMPLID
                    AND J1.EMPL_RCD = J.EMPL_RCD
                    AND J1.EFFDT <= $SnapDate)
  AND J.EFFSEQ = (SELECT MAX(J2.EFFSEQ)
                   FROM PS_JOB J2
                   WHERE J2.EMPLID = J.EMPLID
                   AND J2.EMPL_RCD = J.EMPL_RCD
                   AND J2.EFFDT = J.EFFDT)
  AND J.JOB_INDICATOR = 'P'
  AND J.HR_STATUS = 'A'
  AND J.ESTABID = $inEstab
  AND J.PAYGROUP = $Paygroup
END-SELECT

end-procedure Employee-Snapshot
!----------------------------------------------------------------------
!---------Merge-File---------------------------------------------------
!----------------------------------------------------------------------
begin-procedure Merge-File

LET $RTFFile = 'ohs019.dat'
LET $RTFTemplate = ''
DO RTF-Fetch-and-Process

end-procedure Merge-File
!----------------------------------------------------------------------
!---------Init-Array---------------------------------------------------
!----------------------------------------------------------------------
begin-procedure Init-Array

CREATE-ARRAY NAME=PAGE_INJURY_TOTALS
             SIZE=7
             FIELD=countForType:number

CREATE-ARRAY NAME=OSHA
             SIZE=100
            FIELD=search:char
            FIELD=replace:char
            
end-procedure Init-Array
!----------------------------------------------------------------------
!---------Get-Establishment-Info---------------------------------------
!----------------------------------------------------------------------

!----------------------------------------------------------------------
Begin-Procedure Get-Establishment-Info

BEGIN-SELECT
QQ.DESCR
QQ.ADDRESS1
QQ.ADDRESS2
QQ.CITY
QQ.STATE
QQ.POSTAL
QQ.SIC
QQ.NAICS
QQ.COMPANY
QQ.BUS_ACTIVITY_LINE1
QQ.BUS_ACTIVITY_LINE2
QQ.BUS_ACTIVITY_LINE3
QQ.BUS_ACTIVITY_LINE4

        DO RTF-Add-Token('%ESTABNAME%', &QQ.DESCR)
        DO RTF-Add-Token('%ADDRESS1%', &QQ.ADDRESS1)
        DO RTF-Add-Token('%ADDRESS2%', &QQ.ADDRESS2)
        LET $TEMP = rtrim(&QQ.CITY,' ') || ', ' || rtrim(&QQ.STATE,' ') || ' ' || rtrim(&QQ.POSTAL,' ')
        DO RTF-Add-Token('%ADDRESS3%', $TEMP)
        DO RTF-Add-Token('%SIC%', &QQ.SIC)
        DO RTF-Add-Token('%NAICS%', &QQ.NAICS)
        LET $EstabCompany = rtrim(&QQ.COMPANY,' ')
        LET $Industry = RTRIM(&QQ.BUS_ACTIVITY_LINE1,' ') || ' ' || RTRIM(&QQ.BUS_ACTIVITY_LINE2,' ') || ' '
        LET $Industry = $Industry || RTRIM(&QQ.BUS_ACTIVITY_LINE3,' ')  || ' ' || RTRIM(&QQ.BUS_ACTIVITY_LINE4,' ') 
        DO RTF-Add-Token('%INDUSTRY%', $Industry)

FROM PS_ESTAB_TBL QQ
WHERE QQ.ESTABID = $Estab
  AND QQ.EFFDT = (SELECT MAX(QQ1.EFFDT) 
                  FROM PS_ESTAB_TBL QQ1
                  WHERE QQ1.ESTABID = QQ.ESTABID
                    AND QQ1.EFF_STATUS = 'A'
                    AND QQ1.EFFDT <= $ThruDate)

END-SELECT

End-Procedure Get-Establishment-Info
!----------------------------------------------------------------------
!---------SQCs---------------------------------------------------------
!----------------------------------------------------------------------
#include 'osha.sqc'
#include 'stdapi.sqc'      !Routine to update run status
#include 'rgrnctl1.sqc'    !Get run control parameter values
#include 'rggetval.sqc'    !Get values mask routines
#include 'askcalyr.sqc'    !Ask Calendar Year input
#Include 'curdttim.sqc'    !Get-Current-DateTime procedure
#Include 'datetime.sqc'    !Routines for date and time formatting
#Include 'datemath.sqc'    !Routines for date and time calculations
#Include 'number.sqc'      !Routines to format numbers
   
