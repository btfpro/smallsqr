!***********************************************************************
!  PER050.SQR:  TENURE REPORT - DETAILS OF BATCH TENURE CALCULATIONS   *
!               HRMS for Education & Government Reports                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!     Name, and Service Calc Group between specified from and to dates *
!     provided by the user.                                            *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:46:13                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Education & Government          *
!***********************************************************************

#include 'setenv.sqc'         !Set Environment
#include 'setup32.sqc'        !Printer and Page-Size Initialization

begin-report
   do Init-Report
   do Process-Main
   do Wrap-Up
   do Stdapi-Term
end-report


begin-heading 8
#include 'stdhdgtr.sqc'                                               !F-LPARKER-125 (CAMI)

   Print $PER048_SERVICE_GRP             (+1,3,24)                    !F-LPARKER-125 (CAMI)
   Print $Svc_Group_Descr                    (,+2)

   Print $PER049_PERIOD                 (+2,66,09)                    !F-LPARKER-125 (CAMI)
   Print $PER049_PERIOD                   (,+4,09)                    !F-LPARKER-125 (CAMI)
   Print $PER049_BREAKS                   (,+2,06)                    !F-LPARKER-125 (CAMI)
   Print $PER048_SERVICE                  (,+3,07)                    !F-LPARKER-125 (CAMI)
   Print $PER049_AMT_IN                   (,+2,06)                    !F-LPARKER-125 (CAMI)
   Print $PER048_SERVICE                  (,+3,07)                    !F-LPARKER-125 (CAMI)
   Print $PER049_ACCUM                    (,+3,07)                    !F-LPARKER-125 (CAMI)
   Print $PER049_ADJUST                   (,+2,06)                    !F-LPARKER-125 (CAMI)

   Print $PER048_DEPTID                  (+1,3,10)                    !F-LPARKER-125 (CAMI)
   Print $PER048_EMPLID                   (,+2,10)                    !F-LPARKER-125 (CAMI)
   Print $PER048_EMPL_NAME                (,+1,30)                    !F-LPARKER-125 (CAMI)
   Print $PER049_RCD_NO                   (,+2,04)                    !F-LPARKER-125 (CAMI)
   Print $PER049_BEGIN_DT                 (,+2,11)                    !F-LPARKER-125 (CAMI)
   Print $PER049_END_DT                   (,+3,10)                    !F-LPARKER-125 (CAMI)
   Print $PER049_IN_PRD                   (,+2,06)                    !F-LPARKER-125 (CAMI)
   Print $PER049_WO_BRKS                  (,+2,08)                    !F-LPARKER-125 (CAMI)
   Print $PER049_BREAKS                   (,+2,06)                    !F-LPARKER-125 (CAMI)
   Print $PER049_W_BRKS                   (,+3,07)                    !F-LPARKER-125 (CAMI)
   Print $PER049_W_BRKS                   (,+3,07)                    !F-LPARKER-125 (CAMI)
   Print $PER049_AMOUNT                   (,+2,06)                    !F-LPARKER-125 (CAMI)
   Print $PER049_ACT_RSN                  (,+2,07)                    !F-LPARKER-125 (CAMI)

   Print '----------'                    (+1,3,10)
   Print '----------'                     (,+2,10)
   Print '------------------------------' (,+1,30)
   Print '----'                           (,+2,04)
   Print '-----------'                    (,+2,11)
   Print '-----------'                    (,+2,11)
   Print '------'                         (,+2,06)
   Print '--------'                       (,+2,08)
   Print '------'                         (,+2,06)
   Print '--------'                       (,+2,08)
   Print '--------'                       (,+2,08)
   Print '------'                         (,+2,06)
   Print '-------'                        (,+2,07)

end-heading


!***********************************************************************
! F-LPARKER-125 (CAMI)                                                 *
! Read language-dependent text from the database using PER050 program  *
! ids.                                                                 *
!***********************************************************************
begin-procedure REPORT-TRANSLATION

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)
  do Append_Report_Translation('PER048')
  do Append_Report_Translation('PER049')

  do Get_Field_Information ('PER048', 'DEPT_ID',      $PER048_DEPTID,      #DW)
  do Get_Field_Information ('PER048', 'EMPLID',       $PER048_EMPLID,      #DW)
  do Get_Field_Information ('PER048', 'EMPLOYEE_NAME',$PER048_EMPL_NAME,   #DW)
  do Get_Field_Information ('PER048', 'NO_GROUP',     $PER048_NO_GROUP,    #DW)
  do Get_Field_Information ('PER048', 'SERVICE',      $PER048_SERVICE,     #DW)
  do Get_Field_Information ('PER048', 'SERVICE_GROUP',$PER048_SERVICE_GRP, #DW)
  do Get_Field_Information ('PER048', 'SHOW_1',       $PER048_SHOW_1,      #DW)
  do Get_Field_Information ('PER048', 'SHOW_2',       $PER048_SHOW_2,      #DW)
  do Get_Field_Information ('PER048', 'SHOW_3',       $PER048_SHOW_3,      #DW)

  do Get_Field_Information ('PER049', 'ACCUM',        $PER049_ACCUM,       #DW)
  do Get_Field_Information ('PER049', 'ACT_RSN',      $PER049_ACT_RSN,     #DW)
  do Get_Field_Information ('PER049', 'ADJUST',       $PER049_ADJUST,      #DW)
  do Get_Field_Information ('PER049', 'AMOUNT',       $PER049_AMOUNT,      #DW)
  do Get_Field_Information ('PER049', 'AMT_IN',       $PER049_AMT_IN,      #DW)
  do Get_Field_Information ('PER049', 'BEGIN_DT',     $PER049_BEGIN_DT,    #DW)
  do Get_Field_Information ('PER049', 'BREAKS',       $PER049_BREAKS,      #DW)
  do Get_Field_Information ('PER049', 'END_DT',       $PER049_END_DT,      #DW)
  do Get_Field_Information ('PER049', 'IN_PRD',       $PER049_IN_PRD,      #DW)
  do Get_Field_Information ('PER049', 'PERIOD',       $PER049_PERIOD,      #DW)
  do Get_Field_Information ('PER049', 'RCD_NO',       $PER049_RCD_NO,      #DW)
  do Get_Field_Information ('PER050', 'REPORT_TITLE', $REPORTTITLE,        #DW)
  do Get_Field_Information ('PER049', 'WO_BRKS',      $PER049_WO_BRKS,     #DW)
  do Get_Field_Information ('PER049', 'W_BRKS',       $PER049_W_BRKS,      #DW)

end-procedure

!***********************************************************************
! Procedure: INIT-REPORT                                               *
! Descr:     Performs the application initializations.  Formats var-   *
!            iables for use.  Calls the procedures to get input parms. *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
begin-procedure Init-Report

   move 'PER050'             to $ReportID

   let #First_Pass = 1

   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Init
   do REPORT-TRANSLATION                                              !F-LPARKER-125 (CAMI)

   if $prcs_process_instance = ''
     show $PER048_SHOW_1                                              !F-LPARKER-125 (CAMI)
     show $PER048_SHOW_2                                              !F-LPARKER-125 (CAMI)
     show $PER048_SHOW_3                                              !F-LPARKER-125 (CAMI)
     !NOTE -- The call to "Ask-Parameters" is provided only to assist in
     !        only to assist in debugging or program modification.
     !        Uncomment ASK-PARAMETERS for SQRW development/testing ONLY!!
     ! do ASK-PARAMETERS
   else
     do SELECT-PARAMETERS
   end-if

   if $Svc_Calc_name <> ''
     do SELECT-EG-RUN-CNTL
   end-if

   if $Svc_Group <> ''
      move $Svc_Group to $Last_Group
      do LOAD-GROUP-DESCRIPTION
   end-if

   do SET-TENURE-SELECTION

end-procedure


!***********************************************************************
! Procedure: ASK-PARAMETERS                                            *
! Descr:     Gets run-time parameters from the user where the program  *
!            is not executed through the process scheduler interface   *
!                                                                      *
! Called by: INIT-REPORT                                               *
!***********************************************************************
Begin-Procedure ASK-PARAMETERS



   input $Svc_Calc_Name maxlen=30 'Enter Calc Name' type=char

      if $Svc_Calc_Name <> ' '

      input $Svc_BU maxlen=5 'Enter Business Unit' type=char

      input $Svc_DeptID maxlen=10 'Enter Department ID' type=char

      input $Svc_EmplID maxlen=11 'Enter Employee ID' type=char

      input $Svc_Group maxlen=6 'Enter Calc Group' type=char
      uppercase $Svc_Group

   end-if

   input $Svc_FrDate maxlen=11 'Enter Processed From Date' type=char

   input $Svc_ThDate maxlen=11 'Enter Processed Thru Date' type=char

   if ($Svc_Calc_Name = 'QUIT' or $Svc_Group = 'QUIT')
      display ' '
      display 'Program aborted by user'
      stop quiet
   end-if

End-Procedure ASK-PARAMETERS


!***********************************************************************
! Procedure: GET_VALUES                                                *
! Descr:     Assigns variable read from the run control record to      *
!            program variables.  Mandatory module called from the      *
!            run control select module.                                *
!                                                                      *
! Called by: SELECT-PARAMETERS                                         *
!***********************************************************************
begin-procedure GET-VALUES

   let $Svc_RnCntl   = rtrim(&RUN_CNTL_EG.RUN_CNTL_ID,' ')
   let $Svc_Calc_name = rtrim(&RUN_CNTL_EG.EG_CALC_NAME, ' ')
   let $Svc_BU       = upper(rtrim(&RUN_CNTL_EG.BUSINESS_UNIT,' '))
   let $Svc_DeptID   = upper(rtrim(&RUN_CNTL_EG.DEPTID,' '))
   let $Svc_EmplID   = upper(rtrim(&RUN_CNTL_EG.EMPLID,' '))
   let $Svc_Group    = upper(rtrim(&RUN_CNTL_EG.EG_GROUP, ' '))
   let $Svc_Frdate   = &RUN_CNTL_EG.FROMDATE
   let $Svc_Thdate   = &RUN_CNTL_EG.THRUDATE

end-procedure GET-VALUES


!***********************************************************************
! Procedure: SELECT-EG-RUN-CNTL                                        *
! Descr:     Reads the run control table EG_RUN_CNTL_SVC for parms     *
!            from the tenure calculation run.  Loads these parms into *
!            search fields for the primary select.                     *
!                                                                      *
! Called by: INIT-REPORT                                               *
!***********************************************************************
Begin-Procedure SELECT-EG-RUN-CNTL

begin-SELECT
RC.OPRID
RC.RUN_CNTL_ID
RC.CALC_NAME
RC.EMPLID
RC.FROM_DATE
RC.EG_GROUP
RC.FUNCTN_RESULT_NM

   let $Svc_Calc_Name = rtrim(&RC.CALC_NAME,' ')
   let $Svc_Group = upper(rtrim(&RC.EG_GROUP,' '))
   let $Svc_BU = ''
   let $Svc_DeptID = ''


FROM PS_EG_RUN_CNTL_SVC RC
WHERE RC.RUN_CNTL_ID = $Svc_Calc_Name
  AND RC.CALC_NAME = $Svc_Calc_Name
  AND RC.AS_OF_DATE = (SELECT MAX(RC1.AS_OF_DATE)
                         FROM PS_EG_RUN_CNTL_SVC RC1
                        WHERE RC1.RUN_CNTL_ID = RC.RUN_CNTL_ID
                          AND RC1.CALC_NAME = RC.CALC_NAME)
end-SELECT

End-Procedure SELECT-EG-RUN-CNTL


!***********************************************************************
! Procedure: SET-TENURE-SELECTION                                     *
! Descr:     Assigns variable read from the run control record to      *
!            where clause substitutions for processing.  Where no parm *
!            has been supplied, the search is set to be global.        *
!                                                                      *
! Called by: INIT-REPORT                                               *
!***********************************************************************
Begin-Procedure SET-TENURE-SELECTION

   if $Svc_Calc_Name = ''
     let $Calc_Name_Srch = 'SVC.CALC_NAME'
   else
     let $Calc_Name_Srch = '''' || $Svc_Calc_Name || ''''
   end-if

   if $Svc_BU = ''
     let $BUnit_Srch = 'CTL.SETCNTRLVALUE'
   else
     let $BUnit_Srch = '''' || $Svc_BU || ''''
   end-if

   if $Svc_DeptID = ''
     let $DeptID_Srch = 'JOB.DEPTID'
   else
     let $DeptID_Srch = '''' || $Svc_DeptID || ''''
   end-if

   if $Svc_EmplID = ''
     let $EmplID_Srch = 'SVC.EMPLID'
   else
     let $EmplID_Srch = '''' || $Svc_EmplID || ''''
   end-if

   if $Svc_Group = ''
     let $CGrp_Srch = 'SVC.EG_GROUP'
   else
     let $CGrp_Srch = '''' || $Svc_Group || ''''
   end-if

End-Procedure SET-TENURE-SELECTION


!***********************************************************************
! Procedure: PROCESS-MAIN                                              *
! Descr:     Main Select for this program.  Selects data from PS_EG_   *
!            CLC_SVC_AY.                                               *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
begin-procedure PROCESS-MAIN


   let #First_Pass = 1

Begin-SELECT
SVC.CALC_NAME
SVC.EMPLID               () ON-BREAK LEVEL=3 PRINT=NEVER BEFORE=TRIGGER-NAME-PRINT
PDT.NAME
SVC.EG_GROUP             () ON-BREAK LEVEL=1 PRINT=NEVER SAVE=$Sav_Group
                                     BEFORE=TRIGGER-PROC-HEADER
JOB.SETID_DEPT
JOB.DEPTID               () ON-BREAK LEVEL=2 PRINT=NEVER BEFORE=TRIGGER-DEPT-HEADER
SVC.PRD_FR_DT
SVC.PRCS_THRU_DT
SVC.PRD_END_DT
SVC.EG_BRKS_PRD
SVC.EG_SVC_AMT_WO_BRK
SVC.EG_ACCUM_BRKS
SVC.EG_SVC_AMT_W_BRK
SVC.EG_ACCUM_SVC_W_BRK
SVC.EG_SVC_ADJ_AMT
SVC.FTE
SVC.ACTION
SVC.ACTION_REASON
SVC.DEPTID
SVC.GEN_ADJ_IND
SVC.EG_SERVICE_TYPE
SVC.UNITS

   let $Svc_Group          = rtrim(&SVC.EG_GROUP,' ')
   let $EmplID             = rtrim(&SVC.EMPLID,' ')
   let $Name               = rtrim(&PDT.NAME,' ')
   let $Srv_FTE            = edit(&SVC.FTE,'9.999999')
   let $Breaks_In_Prd      = edit(&SVC.EG_BRKS_PRD,'999.999')
   let $Period_Srv_WO_Brk  = edit(&SVC.EG_SVC_AMT_WO_BRK,'999.999')
   let $Period_Breaks      = edit(&SVC.EG_ACCUM_BRKS,'999.999')
   let $Period_Srv_W_Brk   = edit(&SVC.EG_SVC_AMT_W_BRK,'999.999')
   let $Accum_Srv_W_Brk    = edit(&SVC.EG_ACCUM_SVC_W_BRK,'999.999')
   let $Srv_Adjust_Amt     = edit(&SVC.EG_SVC_ADJ_AMT,'999.999')


   If #Header_Break
      If #First_Pass
         move 0 to #First_Pass
      Else
         new-page
      End-if
      Move $Svc_Group to $Last_Group
      do LOAD-GROUP-DESCRIPTION
      move 0 to #Header_Break
   end-if

   If #Dept_Break
      Print $DeptID                          (+3,3,10)
      Print $DeptName                         (,+1,20)
      Print ' '                              (+1,3,01)
      move 0 to #Dept_Break
   End-If

   If #Empl_Break
      Print $EmplID                         (+2,15,10)
      Print $Name                            (,026,30)
      move 0 to #Empl_Break
   Else
      Print ' '                             (+1,15,01)
   End-If

   Print $Empl_Rcdno                         (,059,02)
   Print &SVC.PRD_FR_DT                      (,064,11)
   Print &SVC.PRD_END_DT                     (,077,11)
   Print $Breaks_In_Prd                      (,090,07)
   Print $Period_Srv_WO_Brk                  (,100,07)
   Print $Period_Breaks                      (,108,07)
   Print $Period_Srv_W_Brk                   (,118,07)
   Print $Accum_Srv_W_Brk                    (,128,07)
   Print $Srv_Adjust_Amt                     (,136,07)
   Print &SVC.ACTION                         (,144,03)
   Print &SVC.ACTION_REASON                  (,148,03)

FROM PS_EG_CLC_SVC_AY SVC
   , PS_PERSON_NAME PDT
   , PS_JOB JOB
WHERE SVC.CALC_NAME = [$Calc_Name_Srch]
  AND SVC.EMPLID = [$EmplID_Srch]
  AND JOB.EMPLID = SVC.EMPLID
  AND PDT.EMPLID = SVC.EMPLID
  AND JOB.DEPTID = [$DeptID_Srch]
  AND JOB.EMPL_RCD = SVC.EMPL_RCD
  AND SVC.EG_GROUP = [$CGrp_Srch]
  AND SVC.FUNCTN_RESULT_NM = 'FACTENURE'
  AND SVC.PRD_FR_DT <= $Svc_ThDate
  AND SVC.PRD_END_DT >= $Svc_FrDate
  AND JOB.SETID_DEPT IN (SELECT CTL.SETID
                           FROM PS_SET_CNTRL_REC CTL
                          WHERE CTL.SETCNTRLVALUE = [$BUnit_Srch]
                            AND CTL.REC_GROUP_ID = 'HR_01'
                            AND CTL.RECNAME='DEPT_TBL')
  AND JOB.EFFDT =  (SELECT MAX(JOB1.EFFDT)
                      FROM PS_JOB JOB1
                     WHERE JOB1.EMPLID = JOB.EMPLID
                       AND JOB1.EMPL_RCD = JOB.EMPL_RCD
                       AND JOB1.EFFDT <= SVC.PRD_END_DT)
  AND JOB.EFFSEQ = (SELECT MAX(JOB2.EFFSEQ)
                      FROM PS_JOB JOB2
                     WHERE JOB2.EMPLID = JOB.EMPLID
                       AND JOB2.EMPL_RCD = JOB.EMPL_RCD
                       AND JOB2.EFFDT = JOB.EFFDT)
ORDER BY SVC.EG_GROUP,JOB.DEPTID,SVC.EMPLID,SVC.PRD_FR_DT DESC
end-SELECT

End-procedure PROCESS-MAIN


!***********************************************************************
! Procedure: TRIGGER-PROC-HEADER                                       *
! Descr:     Loads values for EG_GROUP and FUNCTION_RESULT_NM into     *
!             the last report header line when a break occurs.         *
!                                                                      *
! Called by: PROCESS-MAIN (ON-BREAK: EG_GROUP and FUNCTION_RESULT_NM)  *
!***********************************************************************
Begin-Procedure TRIGGER-PROC-HEADER

   let #Header_Break = 1

End-Procedure TRIGGER-PROC-HEADER


!***********************************************************************
! Procedure: TRIGGER-DEPT-HEADER                                       *
! Descr:     Loads values for department header and prints header      *
!            when a break occurs.                                      *
!                                                                      *
! Called by: PROCESS-MAIN (ON-BREAK for DEPTID)                        *
!***********************************************************************
Begin-Procedure TRIGGER-DEPT-HEADER

   let #Dept_Break         = 1
   let $DeptID             = &JOB.DEPTID
   let $SetID              = &JOB.SETID_DEPT
   do Get-Department-Name-With-SetId

End-Procedure TRIGGER-DEPT-HEADER


!***********************************************************************
! Procedure: TRIGGER-NAME-PRINT                                        *
! Descr:     Loads a trigger so that EMPLID and NAME will print when   *
!            a break occurs.                                           *
!                                                                      *
! Called by: PROCESS-MAIN (ON-BREAK for EMPLID)                        *
!***********************************************************************
Begin-Procedure TRIGGER-NAME-PRINT

   let #Empl_Break         = 1

End-Procedure TRIGGER-NAME-PRINT


!***********************************************************************
! Procedure: LOAD-GROUP-DESCRIPTION                                    *
! Descr:     Obtains Description for Calc Group for use in the heading *
!            line.  Concatenates result.                               *
!                                                                      *
! Called by: INIT-REPORT                                               *
!***********************************************************************
Begin-Procedure LOAD-GROUP-DESCRIPTION

   move $PER048_NO_GROUP to $Grp_Descr                                !F-LPARKER-125 (CAMI)

begin-SELECT
PG1.DESCR

   let $Grp_Descr = rtrim(&PG1.DESCR,' ')
   let $Svc_Group_Descr = $Last_Group || ' (' || rtrim($Grp_Descr,' ') || ')'

FROM PS_EG_CALC_GRP_TBL PG1
WHERE PG1.EG_GROUP = $Last_Group
end-SELECT

End-Procedure LOAD-GROUP-DESCRIPTION


!***********************************************************************
! Procedure: WRAP-UP                                                   *
! Descr:     Deletes Run Control record and performs general           *
!            housekeeping activies.                                    *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure WRAP-UP

   do Delete-Run-Control
   do Commit-Transaction
   do Reset
   do Successful-EOJ

End-Procedure WRAP-UP


!***********************************************************************
! Procedure: DELETE-RUN-CONTROL                                        *
! Descr:     Deletes run control information from run control table.   *
!                                                                      *
! Called by: WRAPUP                                                    *
!***********************************************************************
Begin-Procedure DELETE-RUN-CONTROL

   let $SQL-STATEMENT = 'PER050.SQR, DELETE-RUN-CONTROL, PS_RUN_CNTL_BDGT'

begin-SQL on-error=SQL-Error
DELETE FROM PS_RUN_CNTL_EG
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL

End-Procedure DELETE-RUN-CONTROL


!***********************************************************************
! "Include" modules containing various called procedures               *
!***********************************************************************
#include 'egrnctl1.sqc'  !Get run control parameter values             *
#include 'stdapi.sqc'    !Routines to update run status                *
#Include 'reset.sqc'     !Reset printer procedure                      *
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure               *
#Include 'datetime.sqc'  !Routines for date and time formatting        *
#Include 'number.sqc'    !Routines to format numbers                   *
#include 'readxlat.sqc'  !Read Translate Table                         *
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)          *
#include 'getempnm.sqc'  !Get Employee Name                            *
#include 'rotname1.sqc'  !Rotate Name                                  *
#include 'getdptnm.sqc'  !Get Department Name                          *
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language      * !F-LPARKER-125 (CAMI)
!***********************************************************************
