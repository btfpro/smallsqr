!*********************************************
!  CNTPAY03 Calculate Contract Accumulators  *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:26:28                                 *
!       $Release:  HR9                                                 *
!      $Revision:  101                                                 *
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'     !Set environment
#Include 'setup31.sqc'    !Printer and page-size initialization
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

!****************************************************************************
! HOUSEKEEPING                                                              *
!****************************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do STDAPI-INIT

  let $Run_Flag = 'Run_ID'

  if $Prcs_Process_Instance = ''
     !START-Security logic, does not allow SQR to run with SQRW
     !DISPLAY 'ERROR - SQR CAN ONLY BE RUN FROM PROCESS SCHEDULER'
     !DISPLAY ' THIS IS BECAUSE OF SECURITY LOGIC'
     !STOP QUIET               !exit program
     !END of Security Logic
     !Uncomment Prompts for SQRW development/testing ONLY!!
     do PROMPTS              !Change this to call whatever
                            !procedures are needed if the user
                            !is not using the process scheduler.
                            !(eg. do ASK-FROM-THRU-DATE)
  else
     do SELECT-PARAMETERS
     do GET-VALUES
  end-if

  do ASSIGN-SELECT-COND
  do CREATE-ARRAY

  move 'CNTPAY03' to $ReportID
  move 'Calculate Contract Accumulators' to $ReportTitle
  show $ReportID ' - ' $ReportTitle
  display ' '

end-procedure
!****************************************************************************
! PROMPTS                                                                   *
! Prompts for all input parameters.                                         *
!****************************************************************************
begin-procedure PROMPTS

  input $RUN_ID 'Input RUN_ID (Enter blank for Company, Paygroup, Pay_End_Dt processing)'
  uppercase $RUN_ID

  if $RUN_ID = ''

     let $Run_Flag = 'CPP'

     input $COMPANY 'Input Company'
     uppercase $Company

     input $Paygroup 'Input Paygroup'
     uppercase $Paygroup

     input $Pay_End_Dt 'Input Pay_End_Dt' type=date
     uppercase $Pay_End_Dt

  end-if

end-procedure
!****************************************************************************
! GET-VALUES                                                                *
! Retrives run control varibles for process scheduler                       *
!****************************************************************************
begin-procedure GET-VALUES

  if $RC_PAYINIT.RUN_ID = ''
     let $Run_Flag = 'CPP'
     let $Company = $RC_PAYINIT.COMPANY
     let $Paygroup = $RC_PAYINIT.PAYGROUP
     let $Pay_End_Dt = $RC_PAYINIT.Pay_End_Dt
  else
     let $Run_ID = $RC_PAYINIT.RUN_ID
  end-if

end-procedure
!***************************************************************************
! ASSIGN-SELECT-COND                                                       *
! Assigns Where clause variable dependant upon the input parameters.  This *
! is either by Run_ID or Company, Paygroup, and Pay_End_Dt.                *
!***************************************************************************
begin-procedure ASSIGN-SELECT-COND

  if $Run_Flag = 'CPP'

     let $Cond = 'PAY_CAL.COMPANY = '''|| $Company ||
                 ''' AND PAY_CAL.PAYGROUP = '''|| $Paygroup ||
                 ''' AND PAY_CAL.PAY_END_DT = '''|| $Pay_End_Dt||''''
  else

     let $Cond = 'PAY_CAL.RUN_ID = '''|| $RUN_ID || ''''
  end-if

end-procedure
!******************************************************************************
! CREATE-ARRAY                                                                *
! Sets up the storage array used during processing                            *
!******************************************************************************
begin-procedure CREATE-ARRAY

   let #max_wrk = 30

   Create-array name=Wrk_Comp  Size = 30
        field=Wrk_Effdt:Char
        field=Job_Effdt:Char
        field=Job_CompRate:Number
        field=Wrk_Lump_Sum_Pay:Char
        field=Wrk_Adjust_Amt:Number
        field=Wrk_Prorate_Amt:Number
        field=Wrk_BC_PayPrd:Number
        field=Wrk_DC_PayPrd:Number
        field=Wrk_AC_PayPrd:Number
        field=Wrk_BC_Goal_Amt:Number
        field=Wrk_DC_Goal_Amt:Number
        field=Wrk_AC_Goal_Amt:Number
        field=Wrk_BC_Passed_PayPrd:Number
        field=Wrk_DC_Passed_PayPrd:Number
        field=Wrk_AC_Passed_PayPrd:Number
        field=Wrk_PNE_Retro_Amt:Number
        field=Wrk_CRG_Retro_Amt:Number
        field=Wrk_ENP_Retro_Amt:Number

end-procedure
!****************************************************************************
! INITIALIZE-ARRAY                                                          *
!****************************************************************************
begin-procedure INITIALIZE-ARRAY

  let #wrk_idx = 0

  while #wrk_idx < #max_wrk

      put ' ' ' ' 0 ' ' 0 0 0 0 0 0 0 0 0 0 0 0 0 0
      into Wrk_Comp(#wrk_idx)
           Wrk_Effdt
           Job_Effdt
           Job_CompRate
           Wrk_Lump_Sum_Pay
           Wrk_Adjust_Amt
           Wrk_Prorate_Amt
           Wrk_BC_PayPrd
           Wrk_DC_PayPrd
           Wrk_AC_PayPrd
           Wrk_BC_Goal_Amt
           Wrk_DC_Goal_Amt
           Wrk_AC_Goal_Amt
           Wrk_BC_Passed_PayPrd
           Wrk_DC_Passed_PayPrd
           Wrk_AC_Passed_PayPrd
           Wrk_PNE_Retro_Amt
           Wrk_CRG_Retro_Amt
           Wrk_ENP_Retro_Amt

      add 1 to #wrk_idx
  end-while

end-procedure
!****************************************************************************
! MAINLINE                                                                  *
! Selects Paygroups to process                                              *
!****************************************************************************
begin-procedure MAINLINE

  let $Indent = ''

  if $Run_Flag = 'Run_ID'

     let $Processing = 'Run_ID: ' || $Run_ID
     do START-PROCESSING
  end-if

let $err-statement1 = 'CNTPAY01.SQR, Select Error- MAINLINE'
let $err-statement2 = 'Bind Variables: Run_ID '||$run_ID||', Company' ||
                       $Company||', Paygroup '||$Paygroup||', Pay End Date '||
                       $Pay_End_Dt
begin-SELECT on-error=Error-Display
PAY_CAL.COMPANY
PAY_CAL.PAYGROUP
PAY_GRP.EFF_STATUS
PAY_GRP.ERNCD_REG_EARNS
PAY_GRP.ERNCD_CNTRCT_REG
PAY_GRP.ERNCD_ERN_NOT_PD
PAY_GRP.ERNCD_PD_NOT_ERN
PAY_CAL.PAY_BEGIN_DT
PAY_CAL.PAY_END_DT
PAY_CAL.PAY_CONFIRM_RUN
FRQ_TBL.FREQUENCY_TYPE


   let $PD_Eff_Status = &PAY_GRP.EFF_STATUS

   if &PAY_CAL.PAY_CONFIRM_RUN = 'Y'

      if &PAY_GRP.EFF_STATUS = 'A'

         let $PD_Company          = &PAY_CAL.COMPANY
         let $PD_Paygroup         = &PAY_CAL.PAYGROUP
         let $PD_Pay_Freq         = &FRQ_TBL.FREQUENCY_TYPE
         let $PD_Erncd_Reg_Earns  = &PAY_GRP.ERNCD_CNTRCT_REG
         let $PD_Erncd_Ern_not_Pd = &PAY_GRP.ERNCD_ERN_NOT_PD
         let $PD_Erncd_Pd_not_Ern = &PAY_GRP.ERNCD_PD_NOT_ERN
         let $CP_Pay_Begin_Dt     = &PAY_CAL.PAY_BEGIN_DT
         let $CP_Pay_End_Dt       = &PAY_CAL.PAY_END_DT

         do PROCESS-PAYGROUP

      end-if

   else

      display ' '
      display '   Pay Calendar: ' noline
      display &PAY_CAL.Company    noline
      display ', '                noline
      display &PAY_CAL.Paygroup   noline
      display ', '                noline
      display &PAY_CAL.Pay_End_Dt noline
      display ' not processed'
      display '   Calendar has not been confirmed'

   end-if

FROM PS_PAY_CALENDAR PAY_CAL, PS_PAYGROUP_TBL PAY_GRP,
     PS_FREQUENCY_TBL FRQ_TBL
WHERE [$Cond]
  AND PAY_CAL.COMPANY  = PAY_GRP.COMPANY
  AND PAY_CAL.PAYGROUP = PAY_GRP.PAYGROUP
  AND PAY_GRP.EFFDT    = (SELECT MAX(PAY_GRP2.EFFDT)
                          FROM PS_PAYGROUP_TBL PAY_GRP2
                          WHERE PAY_GRP2.COMPANY  = PAY_GRP.COMPANY
                            AND PAY_GRP2.PAYGROUP = PAY_GRP.PAYGROUP
                            AND PAY_GRP2.EFFDT   <= PAY_CAL.PAY_END_DT)
  AND PAY_GRP.PAY_FREQUENCY   = FRQ_TBL.FREQUENCY_ID
  AND FRQ_TBL.EFF_STATUS      = 'A'
  AND FRQ_TBL.EFFDT           =
    (SELECT MAX(FRQ_TBL1.EFFDT)
       FROM PS_FREQUENCY_TBL FRQ_TBL1
      WHERE FRQ_TBL1.FREQUENCY_ID   = FRQ_TBL.FREQUENCY_ID
        AND FRQ_TBL1.EFF_STATUS     = FRQ_TBL.EFF_STATUS
        AND FRQ_TBL1.EFFDT         <= PAY_GRP.EFFDT)


ORDER BY PAY_CAL.COMPANY,PAY_CAL.PAYGROUP, PAY_CAL.PAY_END_DT

end-SELECT

  let $Indent = ''

  if $Run_Flag = 'Run_ID'

     let $Processing = 'Run_ID: ' || $Run_ID
     do FINISH-PROCESSING
  end-if

end-procedure
!****************************************************************************
! PROCESS-PAYGROUP                                                          *
! Controls processing for each paygroup from mainline                       *
!****************************************************************************
begin-procedure PROCESS-PAYGROUP

  let #EEs_Processed = 0
  let #EEs_in_Error  = 0
  let $Msg           = ''
  let $Msg2          = ''
  let $Msg3          = ''
  let $Msg4          = ''
  let $Msg5          = ''

  let $Indent = '   '
  let $Processing = 'Company: ' || $PD_Company || ',  Paygroup: '||$PD_Paygroup
  do START-PROCESSING

  do VERIFY-PAYGROUP1
  do VERIFY-PAYGROUP2

  if $Skip_Paygroup = 'N'

     do SELECT-CONTRACT-INFO

     do PROCESS-LATE-ADJUSTMENTS

     display ' '
     display '      Employees Processed: ' noline
     move #EEs_Processed to $EEs_Processed 999999
     display $EEs_Processed

     display '      Employees in Error : ' noline
     move #EEs_in_Error to $EEs_in_Error 999999
     display $EEs_in_Error

     let $Indent = '   '
     let $Processing = 'Paygroup: '||$PD_Paygroup
     do FINISH-PROCESSING
  else

     display ' '
     let $Processing = '     Company: ' || $PD_Company || ',  Paygroup: '||$PD_Paygroup||' not processed'
     display $Processing
     display $Msg
     display $Msg2
     display $Msg3
     display $Msg4
     display $Msg5
  end-if

end-procedure
!****************************************************************************
! VERIFY-PAYGROUP1                                                          *
! Verifies that no contracts exceed the maximum pay calendar for the        *
! paygroup                                                                  *
!****************************************************************************
begin-procedure VERIFY-PAYGROUP1

   let $Skip_Paygroup = 'N'
   let $Exceed_Max = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-PAYGROUP1'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt
begin-SELECT on-error=Error-Display
CONT1.EMPLID
CONT1.EMPL_RCD
CONT1.PAYMENT_END_DT

    if $Exceed_Max = 'N'
        move &CONT1.EMPLID    to $Chk_EmplID
        move &CONT1.EMPL_RCD  to #Chk_Empl_Rcd
        do VERIFY-ACTIVE-JOB

        if $Active_Job = 'Y'
            let $Skip_Paygroup = 'Y'
            let $Exceed_Max = 'Y'
            let $Msg = '   Pay Calendar does not extend out to cover contract payment '||
                       'end date of '||&CONT1.PAYMENT_END_DT
        end-if
    end-if

FROM PS_JOB JOB1, PS_CONTRACT CONT1, PS_FREQUENCY_TBL FRQ_TBL2
WHERE JOB1.COMPANY        = $PD_Company
  AND JOB1.PAYGROUP       = $PD_Paygroup
  AND JOB1.EMPLID         = CONT1.EMPLID
  AND JOB1.EMPL_RCD       = CONT1.EMPL_RCD
  AND JOB1.EFFDT  = (SELECT MAX(JOB11.EFFDT)
                       FROM PS_JOB JOB11
                      WHERE JOB11.EMPLID         = JOB1.EMPLID
                        AND JOB11.EMPL_RCD       = JOB1.EMPL_RCD
                        AND JOB11.EFFDT         <= $CP_Pay_End_Dt)
  AND JOB1.EFFSEQ = (SELECT MAX(JOB12.EFFSEQ)
                       FROM PS_JOB JOB12
                      WHERE JOB12.EMPLID         = JOB1.EMPLID
                        AND JOB12.EMPL_RCD       = JOB1.EMPL_RCD
                        AND JOB12.EFFDT          = JOB1.EFFDT)
  AND CONT1.EFFDT <= $CP_Pay_End_Dt
  AND CONT1.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt
  AND CONT1.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt
  AND CONT1.PAYMENT_END_DT   > (SELECT MAX(CAL1.PAY_END_DT)
                                  FROM PS_PAY_CALENDAR CAL1
                                 WHERE CAL1.COMPANY  = $PD_Company
                                   AND CAL1.PAYGROUP = $PD_Paygroup)
  AND JOB1.COMP_FREQUENCY       = FRQ_TBL2.FREQUENCY_ID
  AND FRQ_TBL2.EFF_STATUS       = 'A'
  AND FRQ_TBL2.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL2.EFFDT            =
     (SELECT MAX(FRQ_TBL21.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL21
      WHERE FRQ_TBL21.FREQUENCY_ID   = FRQ_TBL2.FREQUENCY_ID
        AND FRQ_TBL21.EFF_STATUS     = FRQ_TBL2.EFF_STATUS
        AND FRQ_TBL21.FREQUENCY_TYPE = FRQ_TBL2.FREQUENCY_TYPE
        AND FRQ_TBL21.EFFDT         <= JOB1.EFFDT)
ORDER BY CONT1.PAYMENT_END_DT  DESC
end-SELECT

end-procedure
!****************************************************************************
! VERIFY-PAYGROUP2                                                          *
! Verifies that no contract begins before the pay calendar begins for the   *
! paygroup                                                                  *
!****************************************************************************
begin-procedure VERIFY-PAYGROUP2

   let $Exceed_Min = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-PAYGROUP2'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt

begin-SELECT on-error=Error-Display
CONT2.EMPLID
CONT2.EMPL_RCD
CONT2.PAYMENT_BEGIN_DT

    if $Exceed_Min = 'N'
        move &CONT2.EMPLID    to $Chk_EmplID
        move &CONT2.EMPL_RCD  to #Chk_Empl_Rcd
        do VERIFY-ACTIVE-JOB

        if $Active_Job = 'Y'
            let $Skip_Paygroup = 'Y'
            let $Exceed_Min = 'Y'
            let $Msg2 = '   Pay Calendar does not begin before  '||&CONT2.PAYMENT_BEGIN_DT
        end-if
    end-if

FROM PS_JOB JOB2, PS_CONTRACT CONT2, PS_FREQUENCY_TBL FRQ_TBL4
WHERE JOB2.COMPANY        = $PD_Company
  AND JOB2.PAYGROUP       = $PD_Paygroup
  AND JOB2.EMPLID         = CONT2.EMPLID
  AND JOB2.EMPL_RCD       = CONT2.EMPL_RCD
  AND JOB2.EFFDT  = (SELECT MAX(JOB21.EFFDT)
                       FROM PS_JOB JOB21
                      WHERE JOB21.EMPLID         = JOB2.EMPLID
                        AND JOB21.EMPL_RCD       = JOB2.EMPL_RCD
                        AND JOB21.EFFDT         <= $CP_Pay_End_Dt)
  AND JOB2.EFFSEQ = (SELECT MAX(JOB22.EFFSEQ)
                       FROM PS_JOB JOB22
                      WHERE JOB22.EMPLID         = JOB2.EMPLID
                        AND JOB22.EMPL_RCD       = JOB2.EMPL_RCD
                         AND JOB22.EFFDT          = JOB2.EFFDT)
  AND CONT2.EFFDT <= $CP_Pay_End_Dt
  AND CONT2.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt
  AND CONT2.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt
  AND CONT2.PAYMENT_BEGIN_DT  < (SELECT MIN(CAL2.PAY_BEGIN_DT)
                                   FROM PS_PAY_CALENDAR CAL2
                                  WHERE CAL2.COMPANY  = $PD_Company
                                    AND CAL2.PAYGROUP = $PD_Paygroup)
  AND JOB2.COMP_FREQUENCY        = FRQ_TBL4.FREQUENCY_ID
  AND FRQ_TBL4.EFF_STATUS       = 'A'
  AND FRQ_TBL4.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL4.EFFDT            =
     (SELECT MAX(FRQ_TBL41.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL41
      WHERE FRQ_TBL41.FREQUENCY_ID   = FRQ_TBL4.FREQUENCY_ID
        AND FRQ_TBL41.EFF_STATUS     = FRQ_TBL4.EFF_STATUS
        AND FRQ_TBL41.FREQUENCY_TYPE = FRQ_TBL4.FREQUENCY_TYPE
        AND FRQ_TBL41.EFFDT         <= JOB2.EFFDT)
ORDER BY CONT2.PAYMENT_BEGIN_DT  ASC
end-SELECT

end-procedure

!****************************************************************************
! VERIFY-ACTIVE-JOB                                                         *
! Verifies that the job data is active in the processing pay period         *
!****************************************************************************
begin-procedure VERIFY-ACTIVE-JOB

   let $Active_Job = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-ACTIVE-JOB'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt||', Min Pay Begin Date '||
                       $Min_Pay_Begin_Dt

begin-SELECT on-error=Error-Display
JOB3.EMPLID

    let $Active_Job = 'Y'

FROM PS_JOB JOB3
WHERE JOB3.EMPLID    = $Chk_EmplID
  AND JOB3.EMPL_RCD  = #Chk_Empl_Rcd
  AND EXISTS (SELECT 'X' FROM PS_JOB JOB31, PS_FREQUENCY_TBL FRQ_TBL5
               WHERE JOB31.EMPLID    = JOB3.EMPLID
                 AND JOB31.EMPL_RCD  = JOB3.EMPL_RCD
                 AND JOB31.COMPANY  = $PD_Company
                 AND JOB31.PAYGROUP = $PD_Paygroup
                 AND JOB31.EMPL_STATUS IN ('A', 'P','Q','U')
                 AND ((JOB31.EFFDT BETWEEN $CP_Pay_Begin_Dt and $CP_Pay_End_Dt)
                      OR
                      (JOB31.EFFDT = (SELECT MAX(JOB311.EFFDT)
                                        FROM PS_JOB JOB311
                                       WHERE JOB311.EMPLID    = JOB31.EMPLID
                                         AND JOB311.EMPL_RCD  = JOB31.EMPL_RCD
                                         AND JOB311.EFFDT    <= $CP_Pay_Begin_Dt)))
                 AND JOB31.EFFSEQ = (SELECT MAX(JOB32.EFFSEQ)
                                       FROM PS_JOB JOB32
                                      WHERE JOB32.EMPLID    = JOB31.EMPLID
                                        AND JOB32.EMPL_RCD  = JOB31.EMPL_RCD
                                        AND JOB32.EFFDT     = JOB31.EFFDT)
                 AND JOB31.COMP_FREQUENCY      = FRQ_TBL5.FREQUENCY_ID
                 AND FRQ_TBL5.EFF_STATUS       = 'A'
                 AND FRQ_TBL5.FREQUENCY_TYPE   = 'C'
                 AND FRQ_TBL5.EFFDT            =
                    (SELECT MAX(FRQ_TBL51.EFFDT)
                       FROM PS_FREQUENCY_TBL FRQ_TBL51
                     WHERE FRQ_TBL51.FREQUENCY_ID   = FRQ_TBL5.FREQUENCY_ID
                       AND FRQ_TBL51.EFF_STATUS     = FRQ_TBL5.EFF_STATUS
                       AND FRQ_TBL51.FREQUENCY_TYPE = FRQ_TBL5.FREQUENCY_TYPE
                       AND FRQ_TBL51.EFFDT         <= JOB31.EFFDT))

end-SELECT
end-procedure

!****************************************************************************
! SELECT-CONTRACT-INFO                                                      *
! Selects contract information for each employee who has an active contract *
! during the current pay period.                                            *
!****************************************************************************
begin-procedure SELECT-CONTRACT-INFO

let $err-statement1 = 'CNTPAY01.SQR, Select Error- SELECT-CONTRACT-INFO'
let $err-statement2 = 'Bind Variables: Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt

begin-SELECT on-error=Error-Display
CONT.EMPLID
CONT.EMPL_RCD
CONT.EFFDT
CONT.PAYMENT_TERM
CONT.CONTRACT_BEGIN_DT
CONT.CONTRACT_END_DT
CONT.PAYMENT_BEGIN_DT
CONT.PAYMENT_END_DT
CONT.PAY_PERIOD_HRS
CONT.ASSIGN_HRS_TO_FLG
CONT.CONTRACT_TERM_DT
CONT.ADDL_SEQ
CONT.HP_CONTRACT_START
CONT.HP_TRACK_ACTUALS
CONT.HP_USE_HOL_SCHD
JOBA.HOLIDAY_SCHEDULE

   let $E_Emplid            = &CONT.EMPLID
   let #E_Empl_Rcd          = &CONT.EMPL_RCD
   let $Contract_Effdt      = &CONT.EFFDT
   let $C_Payment_Term      = &CONT.PAYMENT_TERM
   let $C_Contract_Begin_Dt = &CONT.CONTRACT_BEGIN_DT
   let $C_Contract_End_Dt   = &CONT.CONTRACT_END_DT
   let $C_Payment_Begin_Dt  = &CONT.PAYMENT_BEGIN_DT
   let $C_Payment_End_Dt    = &CONT.PAYMENT_END_DT
   let #C_Pay_Period_Hrs    = &CONT.PAY_PERIOD_HRS
   let $C_Assign_Hrs_To_Flg = &CONT.ASSIGN_HRS_TO_FLG
   let $C_Contract_Term_Dt  = &CONT.CONTRACT_TERM_DT
   let #C_Addl_Seq          = &CONT.ADDL_SEQ
   let $C_Contract_Start_Dt = &CONT.HP_CONTRACT_START
   let $C_Track_Actuals     = &CONT.HP_TRACK_ACTUALS
   let $C_Use_Holiday_Sched = &CONT.HP_USE_HOL_SCHD

   let $Lump_Sum_Pay        = 'N'

   let $Skip_Emplee = 'N'

   do GET-PAYGROUP-SCHEDULE

   if rtrim(&JOBA.HOLIDAY_SCHEDULE,' ') > ''
      let $Holiday_Schedule = &JOBA.HOLIDAY_SCHEDULE
   else
      let $Holiday_Schedule = $PD_Holiday_Schedule
   end-if

   if $C_Track_Actuals = 'Y'
      do CALCULATE-WORK-DAYS
   end-if

   do SELECT-JOB-INFO

   if $Skip_Emplee = 'N'

       do CALCULATE-CONTRACT-AMT

       if not #First_Row
          add 1 to #EEs_Processed

          if $C_Track_Actuals = 'Y'
              do CALCULATE-PAID-TO-DATE
              do UPDATE-CONTRACT-ACCUMULATORS
          end-if
       end-if
   end-if

FROM PS_JOB JOBA, PS_CONTRACT CONT, PS_FREQUENCY_TBL FRQ_TBL6
WHERE JOBA.EMPLID    = CONT.EMPLID
  AND JOBA.EMPL_RCD = CONT.EMPL_RCD
  AND JOBA.COMP_FREQUENCY        = FRQ_TBL6.FREQUENCY_ID
  AND FRQ_TBL6.EFF_STATUS       = 'A'
  AND FRQ_TBL6.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL6.EFFDT            =
     (SELECT MAX(FRQ_TBL7.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL7
      WHERE FRQ_TBL7.FREQUENCY_ID   = FRQ_TBL6.FREQUENCY_ID
        AND FRQ_TBL7.EFF_STATUS     = FRQ_TBL6.EFF_STATUS
        AND FRQ_TBL7.FREQUENCY_TYPE = FRQ_TBL6.FREQUENCY_TYPE
        AND FRQ_TBL7.EFFDT         <= JOBA.EFFDT)
  AND JOBA.COMPANY        = $PD_Company
  AND JOBA.PAYGROUP       = $PD_Paygroup
  AND JOBA.EMPL_STATUS IN ('A', 'P','Q','U')
  AND CONT.EFFDT <= $CP_Pay_End_Dt
  AND ((CONT.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt AND
        CONT.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt) OR
       (CONT.CONTRACT_BEGIN_DT <= $CP_Pay_End_Dt AND
        CONT.CONTRACT_END_DT   >= $CP_Pay_Begin_Dt))
  AND JOBA.EFFDT = (SELECT MAX(JOBA1.EFFDT)
                      FROM PS_JOB JOBA1
                     WHERE JOBA1.EMPLID         = JOBA.EMPLID
                       AND JOBA1.EMPL_RCD      = JOBA.EMPL_RCD
                       AND JOBA1.COMP_FREQUENCY = JOBA.COMP_FREQUENCY
                       AND JOBA1.EFFDT         <= CONT.CONTRACT_END_DT
                       AND JOBA1.EMPL_STATUS IN ('A', 'P','Q','U'))
  AND JOBA.EFFSEQ = (SELECT MAX(JOBA2.EFFSEQ)
                      FROM PS_JOB JOBA2
                     WHERE JOBA2.EMPLID         = JOBA.EMPLID
                       AND JOBA2.EMPL_RCD      = JOBA.EMPL_RCD
                       AND JOBA2.COMP_FREQUENCY = JOBA.COMP_FREQUENCY
                       AND JOBA2.EFFDT          = JOBA.EFFDT)
ORDER BY CONT.EMPLID, CONT.EMPL_RCD, CONT.CONTRACT_BEGIN_DT
end-SELECT

end-procedure

!****************************************************************************
! GET-PAYGROUP-SCHEDULE                                                     *
!****************************************************************************
begin-procedure GET-PAYGROUP-SCHEDULE

   let $err-statement1 = 'CNTPAY03.SQR, Select Error- GET-PAYGROUP-SCHEDULE'
   let $err-statement2 = 'Bind Variables: Company ' || $PD_Company ||
                         ', Paygroup ' || $PD_Paygroup ||
                         ', Effective Date ' || $C_Contract_End_Dt

   let $PD_Work_Schedule    = ' '
   let $PD_Holiday_Schedule = ' '

begin-SELECT on-error=Error-Display
PG.WORK_SCHEDULE
PG.HOLIDAY_SCHEDULE

   let $PD_Work_Schedule    = &PG.WORK_SCHEDULE
   let $PD_Holiday_Schedule = &PG.HOLIDAY_SCHEDULE

FROM PS_PAYGROUP_TBL PG
WHERE PG.COMPANY  = $PD_Company
  AND PG.PAYGROUP = $PD_Paygroup
  AND PG.EFFDT    = (SELECT MAX(PG2.EFFDT)
                      FROM PS_PAYGROUP_TBL PG2
                     WHERE PG2.COMPANY  = PG.COMPANY
                       AND PG2.PAYGROUP = PG.PAYGROUP
                       AND PG2.EFFDT   <= $C_Contract_End_Dt)
end-SELECT

end-procedure

!****************************************************************************
! SELECT-JOB-INFO                                                           *
! Selects job information for each employee who has an active contract      *
! during the current pay period.                                            *
!****************************************************************************
begin-procedure SELECT-JOB-INFO

 let $err-statement1 = 'CNTPAY01.SQR, Select Error- SELECT-JOB-INFO'
 let $E_Empl_rcd     = edit(#E_Empl_rcd,'999')
 let $err-statement2 = 'Bind Variables: EmplID '||$E_EmplID ||', EMPL_RCD '||
                       $E_Empl_Rcd ||', Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period End Date '||
                       $CP_Pay_End_Dt||',  Contract Begin Dt ' ||
                       $C_Contract_Begin_Dt||',  Contract End Dt ' ||
                       $C_Contract_End_Dt||',  Payment Begin Dt ' ||
                       $C_Payment_Begin_Dt||',  Payment End Dt ' ||
                       $C_Payment_End_Dt||', Comp Frequency Type C, '||
                       'Employee Status A or P'

   let #First_Row       = 1
   let #Total_Delta_Amt = 0
   let #J_Comprate      = 0

   do INITIALIZE-ARRAY
   let #wrk_idx         = 0
   let #lst_idx         = 0

begin-SELECT
JOBB.EMPLID
JOBB.EMPL_RCD
JOBB.EFFDT
JOBB.COMPRATE
JOBB.CHANGE_AMT
JOBB.PRORATE_CNT_AMT
JOBB.LUMP_SUM_PAY
FRQ_TBL8.FREQUENCY_TYPE

   if $Skip_Emplee = 'N'
       let $DT_Effdt = &JOBB.EFFDT
       do FORMAT-DATETIME($DT_Effdt, $CMP_EffDt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Contract_Begin_Dt, $CMP_Contract_Begin_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Contract_End_Dt, $CMP_Contract_End_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Payment_Begin_Dt, $CMP_Payment_Begin_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Payment_End_Dt, $CMP_Payment_End_Dt, {DEFCMP},'','')

       if $C_Payment_Term <> 'L'
           if #First_Row
               let $J_Effdt           = &JOBB.EFFDT
               let $J_Comp_Frequency  = &FRQ_TBL8.FREQUENCY_TYPE
               let #last_Comprate     = &JOBB.COMPRATE
               let #First_Row         = 0

               do COMPUTE-CONTRACT-DATES
               do FORMAT-DATETIME($C_Contract_Begin_Dt, $CMP_Contract_Begin_Dt, {DEFCMP},'','')
               do FORMAT-DATETIME($C_Contract_Start_Dt, $CMP_Contract_Start, {DEFCMP},'','')
               let #Contract_Amt = &JOBB.COMPRATE

               if $CMP_Contract_Start > $CMP_Contract_Begin_Dt                      ! Late start
                  do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_End_Dt,#total_contract_prd)
                  do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_Start_Dt,#late_contract_prd)
                  let #late_start_dedn = #Contract_Amt * (#late_contract_prd / #total_contract_prd)
                  let #Contract_Amt = #Contract_Amt - round(#late_start_dedn,2)
               end-if

               add 1 to #lst_idx

               Put  $C_Payment_Begin_Dt
                    &JOBB.EFFDT
                    #Contract_Amt
                    'N'
                    #Contract_Amt
                    #Contract_Amt
                    #BC_Pay_Prds
                    #DC_Pay_Prds
                    #AC_Pay_Prds
                    0
                    0
                    0
                    0 0 0
                    0 0 0
               into Wrk_Comp(#lst_idx)
                    Wrk_Effdt
                    Job_Effdt
                    Job_CompRate
                    Wrk_Lump_Sum_Pay
                    Wrk_Adjust_Amt
                    Wrk_Prorate_Amt
                    Wrk_BC_PayPrd
                    Wrk_DC_PayPrd
                    Wrk_AC_PayPrd
                    Wrk_BC_Goal_Amt
                    Wrk_DC_Goal_Amt
                    Wrk_AC_Goal_Amt
                    Wrk_BC_Passed_PayPrd
                    Wrk_DC_Passed_PayPrd
                    Wrk_AC_Passed_PayPrd
                    Wrk_PNE_Retro_Amt
                    Wrk_CRG_Retro_Amt
                    Wrk_ENP_Retro_Amt
           else

               do FIND-PAY-BEGIN-DT

               if $Pay_Cal_Found = 'N'

                   add 1 to #EEs_in_Error

                   move #E_Empl_Rcd to $Empl_Rcd
                   let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                $Empl_Rcd||' with pay calendar record not found.'||
                                '  Employee skipped.'
                   display $Error

                   let $Skip_Emplee = 'Y'
               else
                   let $PAYC_Pay_Begin_Dt = &PAYC.PAY_BEGIN_DT
                   do FORMAT-DATETIME($PAYC_Pay_Begin_Dt, $CMP_Pay_Cal_Begin_Dt, {DEFCMP}, '','')

                   if &JOBB.LUMP_SUM_PAY = 'Y'

                       let #J_Change_Amt      = &JOBB.COMPRATE - #last_Comprate
                       let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
                       let #last_Comprate     = &JOBB.COMPRATE

                       if $CMP_EffDt >= $CMP_Pay_Cal_Begin_Dt
                           let $Lump_Sum_Pay = 'Y'
                       end-if

                       do PROCESS-PRORATA-CHANGE
                       do COMPUTE-CONTRACT-DATES
                       do FIND-REMAINING-PERIODS

                       let #Cal_BC_Passed_PayPrd = #BC_Pay_Prds - #BC_Remain_Pay_Prds
                       let #Cal_DC_Passed_PayPrd = #DC_Pay_Prds - #DC_Remain_Pay_Prds
                       let #Cal_AC_Passed_PayPrd = #AC_Pay_Prds - #AC_Remain_Pay_Prds

                       add 1 to #lst_idx

                       if #lst_idx >= #max_wrk

                           add 1 to #EEs_in_Error

                           move #E_Empl_Rcd to $Empl_Rcd
                           let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                        $Empl_Rcd||' with maximum array size reached.'||
                                        '  Employee skipped.'
                           display $Error

                           let $Skip_Emplee = 'Y'
                       else

                           let #wrk_idx = #lst_idx + 1
                           let #Job_Comprate = &JOBB.COMPRATE - #J_Change_Amt + #DT_Delta_Amt

                           Put  $PAYC_Pay_Begin_Dt
                                &JOBB.EFFDT
                                #Job_Comprate
                                'Y'
                                #J_Change_Amt
                                #DT_Delta_Amt
                                #BC_Pay_Prds
                                #DC_Pay_Prds
                                #AC_Pay_Prds
                                0
                                0
                                0
                                #Cal_BC_Passed_PayPrd
                                #Cal_DC_Passed_PayPrd
                                #Cal_AC_Passed_PayPrd
                                0 0 0
                           into Wrk_Comp(#lst_idx)
                                Wrk_Effdt
                                Job_Effdt
                                Job_CompRate
                                Wrk_Lump_Sum_Pay
                                Wrk_Adjust_Amt
                                Wrk_Prorate_Amt
                                Wrk_BC_PayPrd
                                Wrk_DC_PayPrd
                                Wrk_AC_PayPrd
                                Wrk_BC_Goal_Amt
                                Wrk_DC_Goal_Amt
                                Wrk_AC_Goal_Amt
                                Wrk_BC_Passed_PayPrd
                                Wrk_DC_Passed_PayPrd
                                Wrk_AC_Passed_PayPrd
                                Wrk_PNE_Retro_Amt
                                Wrk_CRG_Retro_Amt
                                Wrk_ENP_Retro_Amt
                       end-if

                   else

                       if $CMP_Effdt <= $CMP_Contract_End_Dt
                           let #J_Change_Amt      = &JOBB.COMPRATE - #last_Comprate
                           let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
                           let #last_Comprate     = &JOBB.COMPRATE

                           do PROCESS-PRORATA-CHANGE
                           do FIND-REMAINING-PERIODS

                           add 1 to #lst_idx

                           if #lst_idx >= #max_wrk

                               add 1 to #EEs_in_Error

                               move #E_Empl_Rcd to $Empl_Rcd
                               let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                            $Empl_Rcd||' with maximum array size reached.'||
                                            '  Employee skipped.'
                               display $Error

                               let $Skip_Emplee = 'Y'
                           else

                               let #wrk_idx = #lst_idx + 1
                               let #Job_Comprate = &JOBB.COMPRATE - #J_Change_Amt + #DT_Delta_Amt

                               Put  $PAYC_Pay_Begin_Dt
                                    &JOBB.EFFDT
                                    #Job_Comprate
                                    'N'
                                    #J_Change_Amt
                                    #DT_Delta_Amt
                                    #BC_Remain_Pay_Prds
                                    #DC_Remain_Pay_Prds
                                    #AC_Remain_Pay_Prds
                                    0
                                    0
                                    0
                                    0 0 0
                                    0 0 0
                               into Wrk_Comp(#lst_idx)
                                    Wrk_Effdt
                                    Job_Effdt
                                    Job_CompRate
                                    Wrk_Lump_Sum_Pay
                                    Wrk_Adjust_Amt
                                    Wrk_Prorate_Amt
                                    Wrk_BC_PayPrd
                                    Wrk_DC_PayPrd
                                    Wrk_AC_PayPrd
                                    Wrk_BC_Goal_Amt
                                    Wrk_DC_Goal_Amt
                                    Wrk_AC_Goal_Amt
                                    Wrk_BC_Passed_PayPrd
                                    Wrk_DC_Passed_PayPrd
                                    Wrk_AC_Passed_PayPrd
                                    Wrk_PNE_Retro_Amt
                                    Wrk_CRG_Retro_Amt
                                    Wrk_ENP_Retro_Amt
                           end-if
                       end-if
                   end-if
               end-if
           end-if
       else
           if $CMP_EffDt <= $CMP_Contract_Begin_Dt

               let #First_Row         = 0
               let #J_Comprate        = &JOBB.COMPRATE
               let #J_Change_Amt      = 0
               let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
           else
               let #J_Comprate        = &JOBB.COMPRATE - &JOBB.CHANGE_AMT
               let #J_Change_Amt      = &JOBB.CHANGE_AMT
               let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
               do PROCESS-PRORATA-CHANGE
               let #J_Comprate        = &JOBB.COMPRATE - &JOBB.CHANGE_AMT + #DT_Delta_Amt
           end-if

           add 1 to #lst_idx

           if #lst_idx >= #max_wrk

               add 1 to #EEs_in_Error
               move #E_Empl_Rcd to $Empl_Rcd
               let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                            $Empl_Rcd||' with maximum array size reached.'||
                            '  Employee skipped.'
               display $Error

               let $Skip_Emplee = 'Y'
           else

               Put  $C_Payment_Begin_Dt
                    &JOBB.EFFDT
                    #J_Comprate
                    #DT_Delta_Amt
               into Wrk_Comp(#lst_idx)
                    Wrk_Effdt
                    Job_Effdt
                    Job_CompRate
                    Wrk_Prorate_Amt
           end-if
       end-if
   end-if

FROM PS_JOB JOBB,  PS_FREQUENCY_TBL FRQ_TBL8
WHERE JOBB.EMPLID    = $E_EmplID
  AND JOBB.EMPL_RCD = #E_Empl_Rcd
  AND JOBB.COMPANY        = $PD_Company
  AND JOBB.PAYGROUP       = $PD_Paygroup
  AND JOBB.EMPL_STATUS IN ('A', 'P','Q','U')
  AND ((JOBB.EFFDT BETWEEN $C_Payment_Begin_Dt and $C_Payment_End_Dt)
       OR
       (JOBB.EFFDT BETWEEN $C_Contract_Begin_Dt and $C_Contract_End_Dt)
       OR
       (JOBB.EFFDT = (SELECT MAX(JOBB1.EFFDT)
                        FROM PS_JOB JOBB1
                       WHERE JOBB1.EMPLID    = JOBB.EMPLID
                         AND JOBB1.EMPL_RCD  = JOBB.EMPL_RCD
                         AND JOBB1.EFFDT    <= $C_Payment_Begin_Dt))
       OR
       (JOBB.EFFDT = (SELECT MAX(JOBB2.EFFDT)
                        FROM PS_JOB JOBB2
                       WHERE JOBB2.EMPLID    = JOBB.EMPLID
                         AND JOBB2.EMPL_RCD  = JOBB.EMPL_RCD
                         AND JOBB2.EFFDT    <= $C_Contract_Begin_Dt)))
  AND JOBB.EFFDT <= $CP_Pay_End_Dt
  AND JOBB.EFFSEQ = (SELECT MAX(JOBF.EFFSEQ)
                       FROM PS_JOB JOBF
                      WHERE JOBF.EMPLID    = JOBB.EMPLID
                        AND JOBF.EMPL_RCD = JOBB.EMPL_RCD
                        AND JOBF.EFFDT     = JOBB.EFFDT)
  AND JOBB.COMP_FREQUENCY       = FRQ_TBL8.FREQUENCY_ID
  AND FRQ_TBL8.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL8.EFF_STATUS       = 'A'
  AND FRQ_TBL8.EFFDT            =
    (SELECT MAX(FRQ_TBL9.EFFDT)
       FROM PS_FREQUENCY_TBL FRQ_TBL9
      WHERE FRQ_TBL9.FREQUENCY_ID   = FRQ_TBL8.FREQUENCY_ID
        AND FRQ_TBL9.FREQUENCY_TYPE = FRQ_TBL8.FREQUENCY_TYPE
        AND FRQ_TBL9.EFF_STATUS     = FRQ_TBL8.EFF_STATUS
        AND FRQ_TBL9.EFFDT         <= JOBB.EFFDT)

ORDER BY JOBB.EFFDT ASC

end-SELECT

end-procedure


!****************************************************************************
! PROCESS-LATE-ADJUSTMENTS                                                  *
! Selects pay earnings for contracts already completed paid out during the  *
! current pay period.                                                       *
!****************************************************************************
begin-procedure PROCESS-LATE-ADJUSTMENTS

let $err-statement1 = 'CNTPAY01.SQR, Select Error- PROCESS-LATE-ADJUSTMENTS'
let $err-statement2 = 'Bind Variables: Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt

let $Prev_Emplid = ''
let #Prev_Empl_Rcd = 999
let $Prev_Cont_Begin = ''

begin-SELECT on-error=Error-Display
CNT.EMPLID
CNT.EMPL_RCD
CNT.EFFDT
CNT.PAYMENT_TERM
CNT.CONTRACT_BEGIN_DT
CNT.CONTRACT_END_DT
CNT.PAYMENT_BEGIN_DT
CNT.PAYMENT_END_DT
CNT.CONTRACT_TERM_DT
CNT.ADDL_SEQ
CNT.HP_CONTRACT_START
CNT.HP_TRACK_ACTUALS
CNT.HP_USE_HOL_SCHD
JB.HOLIDAY_SCHEDULE

 if $Prev_Emplid <> $E_Emplid and #Prev_Empl_Rcd <> #E_Empl_Rcd
   and $Prev_Cont_Begin <> $C_Contract_Begin_Dt

   let $E_Emplid            = &CNT.EMPLID
   let #E_Empl_Rcd          = &CNT.EMPL_RCD
   let $Contract_Effdt      = &CNT.EFFDT
   let $C_Payment_Term      = &CNT.PAYMENT_TERM
   let $C_Contract_Begin_Dt = &CNT.CONTRACT_BEGIN_DT
   let $C_Contract_End_Dt   = &CNT.CONTRACT_END_DT
   let $C_Payment_Begin_Dt  = &CNT.PAYMENT_BEGIN_DT
   let $C_Payment_End_Dt    = &CNT.PAYMENT_END_DT
   let $C_Contract_Term_Dt  = &CNT.CONTRACT_TERM_DT
   let #C_Addl_Seq          = &CNT.ADDL_SEQ
   let $C_Contract_Start_Dt = &CNT.HP_CONTRACT_START
   let $C_Track_Actuals     = &CNT.HP_TRACK_ACTUALS
   let $C_Use_Holiday_Sched = &CNT.HP_USE_HOL_SCHD

   let $Lump_Sum_Pay        = 'N'

   let $Skip_Emplee = 'N'

   do GET-PAYGROUP-SCHEDULE

   if rtrim(&JB.HOLIDAY_SCHEDULE,' ') > ''
      let $Holiday_Schedule = &JB.HOLIDAY_SCHEDULE
   else
      let $Holiday_Schedule = $PD_Holiday_Schedule
   end-if

   if $C_Track_Actuals = 'Y'
      do CALCULATE-WORK-DAYS
   end-if

   do SELECT-JOB-INFO

   if $Skip_Emplee = 'N'

       do CALCULATE-CONTRACT-AMT

       if not #First_Row
          add 1 to #EEs_Processed

          if $C_Track_Actuals = 'Y'
              do CALCULATE-PAID-TO-DATE
              do UPDATE-CONTRACT-ACCUMULATORS
          end-if
       end-if
   end-if
 end-if

 let $Prev_Emplid = $E_Emplid
 let #Prev_Empl_Rcd = #E_Empl_Rcd
 let $Prev_Cont_Begin = $C_Contract_Begin_Dt

FROM PS_JOB JB, PS_CONTRACT CNT, PS_FREQUENCY_TBL FRQ, PS_PAY_EARNINGS ERN
WHERE ERN.COMPANY = $PD_Company
  AND ERN.PAYGROUP = $PD_Paygroup
  AND ERN.PAY_END_DT = $CP_Pay_End_Dt
  AND CNT.EMPLID  = ERN.EMPLID
  AND CNT.EMPL_RCD = ERN.EMPL_RCD
  AND CNT.PAYMENT_END_DT < $CP_Pay_Begin_Dt
  AND CNT.EFFDT < $CP_Pay_Begin_Dt
  AND CNT.PAYMENT_BEGIN_DT <= ERN.EARNS_END_DT
  AND CNT.PAYMENT_END_DT   >= ERN.EARNS_BEGIN_DT
  AND JB.EMPLID   = CNT.EMPLID
  AND JB.EMPL_RCD = CNT.EMPL_RCD
  AND JB.COMP_FREQUENCY    = FRQ.FREQUENCY_ID
  AND FRQ.EFF_STATUS       = 'A'
  AND FRQ.FREQUENCY_TYPE   = 'C'
  AND FRQ.EFFDT            =
     (SELECT MAX(FRQ2.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ2
      WHERE FRQ2.FREQUENCY_ID   = FRQ.FREQUENCY_ID
        AND FRQ2.EFF_STATUS     = FRQ.EFF_STATUS
        AND FRQ2.FREQUENCY_TYPE = FRQ.FREQUENCY_TYPE
        AND FRQ2.EFFDT         <= JB.EFFDT)
  AND JB.COMPANY        = $PD_Company
  AND JB.PAYGROUP       = $PD_Paygroup
  AND JB.EMPL_STATUS IN ('A', 'P','Q','U')
  AND JB.EFFDT = (SELECT MAX(JB1.EFFDT)
                      FROM PS_JOB JB1
                     WHERE JB1.EMPLID         = JB.EMPLID
                       AND JB1.EMPL_RCD       = JB.EMPL_RCD
                       AND JB1.COMP_FREQUENCY = JB.COMP_FREQUENCY
                       AND JB1.EFFDT         <= CNT.CONTRACT_END_DT
                       AND JB1.EMPL_STATUS IN ('A', 'P','Q','U'))
  AND JB.EFFSEQ = (SELECT MAX(JB2.EFFSEQ)
                      FROM PS_JOB JB2
                     WHERE JB2.EMPLID         = JB.EMPLID
                       AND JB2.EMPL_RCD       = JB.EMPL_RCD
                       AND JB2.COMP_FREQUENCY = JB.COMP_FREQUENCY
                       AND JB2.EFFDT          = JB.EFFDT)
ORDER BY CNT.EMPLID, CNT.EMPL_RCD, CNT.CONTRACT_BEGIN_DT
end-SELECT

end-procedure


!****************************************************************************
! FIND-PAY-BEGIN-DT                                                         *
!****************************************************************************
begin-procedure  FIND-PAY-BEGIN-DT

let $err-statement1 = 'CNTPAY01.SQR, Select Error- FIND-PAY-BEGIN-DT'
let $err-statement2 = 'Bind Variables: Employee '||$E_Emplid||', EMPL_RCD '||
                       $Empl_Rcd||', Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Effective Date '|| $DT_Effdt

  let $Pay_Cal_Found = 'N'


begin-SELECT on-error=Error-Display
PAYC.PAY_BEGIN_DT

    let $Pay_Cal_Found = 'Y'

FROM PS_PAY_CALENDAR PAYC
WHERE PAYC.COMPANY = $PD_Company
  AND PAYC.PAYGROUP = $PD_Paygroup
  AND PAYC.PAY_BEGIN_DT = (SELECT MAX(PAYC2.PAY_BEGIN_DT)
                                   FROM PS_PAY_CALENDAR PAYC2
                                  WHERE PAYC2.COMPANY  = PAYC.COMPANY
                                    AND PAYC2.PAYGROUP = PAYC.PAYGROUP
                                    AND PAYC2.PAY_BEGIN_DT <= $DT_Effdt)

end-SELECT

end-procedure

!****************************************************************************
! CALCULATE-CONTRACT-AMT                                                    *
! Scan through the array and establish the total contract worth.            *
!****************************************************************************
begin-procedure CALCULATE-CONTRACT-AMT

    let #wrk_idx         = 1
    let $Job_EffDt       = ' '
    let $Job_Prev_Effdt  = ' '
    let #Job_CompRate    = 0
    let #Job_Prev_CompRate = 0
    let #Days_Worked_To_Date = 0
    let #Earned_To_Date  = 0
    let $Last_Job_Period = 'N'

    let #BC_Total_Amount = 0
    let #DC_Total_Amount = 0
    let #AC_Total_Amount = 0
    let #C_Total_Amount  = 0

    let #PNE_Retro_Total_Amt1 = 0
    let #PNE_Retro_Total_Amt2 = 0
    let #CRG_Retro_Total_Amt1 = 0
    let #ENP_Retro_Total_Amt1 = 0
    let #ENP_Retro_Total_Amt2 = 0

    do FORMAT-DATETIME($C_Contract_Start_Dt, $CMP_Contract_Start_Dt, {DEFCMP}, '','')
    do FORMAT-DATETIME($C_Contract_Term_Dt, $CMP_Contract_Term_Dt, {DEFCMP}, '','')
    do FORMAT-DATETIME($CP_Pay_End_Dt, $CMP_CP_Pay_End_Dt, {DEFCMP}, '','')

    WHILE #wrk_idx <= #lst_idx

        GET  $Job_Effdt
             #Job_CompRate
             #Cal_Prorate_Amt
             #BC_Remain_Pay_Prds
             #DC_Remain_Pay_Prds
             #AC_Remain_Pay_Prds
             $Cal_Lump_Sum_Pay
             #BC_Passed_PayPrd
             #DC_Passed_PayPrd
             #AC_Passed_PayPrd
        from Wrk_Comp(#wrk_idx)
             Job_Effdt
             Job_CompRate
             Wrk_Prorate_Amt
             Wrk_BC_PayPrd
             Wrk_DC_PayPrd
             Wrk_AC_PayPrd
             Wrk_Lump_Sum_Pay
             Wrk_BC_Passed_PayPrd
             Wrk_DC_Passed_PayPrd
             Wrk_AC_Passed_PayPrd

        if #wrk_idx > 1
           do CALCULATE-ACTUAL-WORKED-EARNED
        end-if

        let $Job_Prev_Effdt = $Job_Effdt
        let #Job_Prev_CompRate = #Job_CompRate

        if $C_Payment_Term <> 'L'

           let #Cal_Total_Pay_Prds = #BC_Remain_Pay_Prds + #DC_Remain_Pay_Prds + #AC_Remain_Pay_Prds

           if #Cal_Total_Pay_Prds <= 0

               add 1 to #EEs_in_Error

               move #E_Empl_Rcd to $Empl_Rcd
               let $Error = 'ERROR-Cal Contract Amt '|| $E_Emplid || ', ' ||
                            $Empl_Rcd||' with payment periods <= 0 pay'||
                            ' periods.  Employee skipped.'
               display $Error

               let $Skip_Emplee = 'Y'
               let #wrk_idx = #lst_idx + 1

           else

               let #Cal_BC_Pct = #BC_Remain_Pay_Prds / #Cal_Total_Pay_Prds
               let #Cal_DC_Pct = #DC_Remain_Pay_Prds / #Cal_Total_Pay_Prds
               let #Cal_AC_Pct = 1 - #Cal_BC_Pct - #Cal_DC_Pct

               let #Cal_BC_Goal_Amt = round(#Cal_Prorate_Amt * #Cal_BC_Pct,2)
               let #Cal_DC_Goal_Amt = round(#Cal_Prorate_Amt * #Cal_DC_Pct,2)
               let #Cal_AC_Goal_Amt = #Cal_Prorate_Amt - #Cal_BC_Goal_Amt - #Cal_DC_Goal_Amt

               ARRAY-ADD #Cal_BC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_BC_Goal_Amt
               ARRAY-ADD #Cal_DC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_DC_Goal_Amt
               ARRAY-ADD #Cal_AC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_AC_Goal_Amt

               let #BC_Total_Amount = #BC_Total_Amount + #Cal_BC_Goal_Amt
               let #DC_Total_Amount = #DC_Total_Amount + #Cal_DC_Goal_Amt
               let #AC_Total_Amount = #AC_Total_Amount + #Cal_AC_Goal_Amt
               let #C_Total_Amount  = #C_Total_Amount  + #Cal_Prorate_Amt

               let #Cal_PNE_Retro_Amt1 = 0
               let #Cal_PNE_Retro_Amt2 = 0
               let #Cal_CRG_Retro_Amt1 = 0
               let #Cal_ENP_Retro_Amt1 = 0
               let #Cal_ENP_Retro_Amt2 = 0

               if $Cal_Lump_Sum_Pay = 'Y'

                   if #BC_Remain_Pay_Prds > 0
                       let #Cal_PNE_Retro_Amt1 =
                                round(#Cal_BC_Goal_Amt * #BC_Passed_PayPrd / #BC_Remain_Pay_Prds, 2)
                   end-if

                   if #DC_Remain_Pay_Prds > 0
                       let #Cal_PNE_Retro_Amt2 =
                            -1 * round(#Cal_BC_Goal_Amt * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)

                       let #Cal_CRG_Retro_Amt1 =
                                 round(#Cal_Prorate_Amt  * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)

                       let #Cal_ENP_Retro_Amt1 =
                            -1 * round(#Cal_AC_Goal_Amt * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)
                   end-if

                   if #AC_Remain_Pay_Prds > 0
                       let #Cal_ENP_Retro_Amt2 =
                                 round(#Cal_AC_Goal_Amt * #AC_Passed_PayPrd / #AC_Remain_Pay_Prds, 2)
                   end-if

                   ARRAY-ADD #Cal_PNE_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_PNE_Retro_Amt
                   ARRAY-ADD #Cal_PNE_Retro_Amt2 to Wrk_Comp(#wrk_idx) Wrk_PNE_Retro_Amt
                   ARRAY-ADD #Cal_CRG_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_CRG_Retro_Amt
                   ARRAY-ADD #Cal_ENP_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_ENP_Retro_Amt
                   ARRAY-ADD #Cal_ENP_Retro_Amt2 to Wrk_Comp(#wrk_idx) Wrk_ENP_Retro_Amt

                   let #PNE_Retro_Total_Amt1 = #PNE_Retro_Total_Amt1 + #Cal_PNE_Retro_Amt1
                   let #PNE_Retro_Total_Amt2 = #PNE_Retro_Total_Amt2 + #Cal_PNE_Retro_Amt2
                   let #CRG_Retro_Total_Amt1 = #CRG_Retro_Total_Amt1 + #Cal_CRG_Retro_Amt1
                   let #ENP_Retro_Total_Amt1 = #ENP_Retro_Total_Amt1 + #Cal_ENP_Retro_Amt1
                   let #ENP_Retro_Total_Amt2 = #ENP_Retro_Total_Amt2 + #Cal_ENP_Retro_Amt2
               end-if
           end-if
        end-if

        add 1 to #wrk_idx

    END-WHILE

    let $Last_Job_Period = 'Y'
    do CALCULATE-ACTUAL-WORKED-EARNED


    #DEBUG do PRINT-ARRAY
    #DEBUG let $BC_Total_Amount = #BC_Total_Amount
    #DEBUG let $DC_Total_Amount = #DC_Total_Amount
    #DEBUG let $AC_Total_Amount = #AC_Total_Amount
    #DEBUG let $C_Total_Amount  = #C_Total_Amount

    #DEBUG let $DebugMsg = 'Debug Total : '|| $BC_Total_Amount || ', '
    #DEBUG                                 || $DC_Total_Amount || ', '
    #DEBUG                                 || $AC_Total_Amount || ', '
    #DEBUG                                 || $C_Total_Amount
    #DEBUG display $DebugMsg

    #DEBUG let $PNE_Retro_Total_Amt1 = #PNE_Retro_Total_Amt1
    #DEBUG let $PNE_Retro_Total_Amt2 = #PNE_Retro_Total_Amt2
    #DEBUG let $CRG_Retro_Total_Amt1 = #CRG_Retro_Total_Amt1
    #DEBUG let $ENP_Retro_Total_Amt1 = #ENP_Retro_Total_Amt1
    #DEBUG let $ENP_Retro_Total_Amt2 = #ENP_Retro_Total_Amt2

    #DEBUG let $DebugMsg = 'Retro Total : '|| $PNE_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $PNE_Retro_Total_Amt2 || ', '
    #DEBUG                                 || $CRG_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $ENP_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $ENP_Retro_Total_Amt2
    #DEBUG display $DebugMsg

end-procedure

!****************************************************************************
! CALCULATE-WORK-DAYS                                                       *
! Calculate actual work days within the contract period.                    *
!****************************************************************************
begin-procedure CALCULATE-WORK-DAYS

  let #C_Contract_WorkDays = 0
  let #Total_WorkDays = 0
  let $Start_Dt = $C_Contract_Begin_Dt
  let $End_Dt = $C_Contract_End_Dt

  do WorkDays($Start_Dt, $End_Dt, $PD_Work_Schedule, #C_Contract_WorkDays)

  let $Start_Dt = $C_Contract_Start_Dt
  let $End_Dt = $C_Contract_End_Dt
  do WorkDays($Start_Dt, $End_Dt, $PD_Work_Schedule, #Total_WorkDays)

  if $C_Use_Holiday_Sched = 'Y' and rtrim($Holiday_Schedule,' ') > ''

begin-SELECT
COUNT(*) &holidays
   let #C_Contract_WorkDays = #C_Contract_WorkDays - &holidays
from  PS_HOLIDAY_DATE
where HOLIDAY_SCHEDULE = $Holiday_Schedule
  and HOLIDAY between $C_Contract_Begin_Dt and $C_Contract_End_Dt
end-SELECT

begin-SELECT
COUNT(*) &holidays2
   let #Total_WorkDays = #Total_WorkDays - &holidays2
from  PS_HOLIDAY_DATE
where HOLIDAY_SCHEDULE = $Holiday_Schedule
  and HOLIDAY between $C_Contract_Start_Dt and $C_Contract_End_Dt
end-SELECT

  end-if

end-procedure

!****************************************************************************
! CALCULATE-ACTUAL-WORKED-EARNED                                            *
! Calculates actual days worked for each Job effective period within the    *
! contract period.                                                          *
! Then calculates the actual earned amount for the same period.             *
!****************************************************************************
begin-procedure CALCULATE-ACTUAL-WORKED-EARNED

 let #Days_Worked = 0

 if $C_Track_Actuals = 'Y'

  do FORMAT-DATETIME($Job_Prev_Effdt, $CMP_Job_Prev_Effdt, {DEFCMP}, '','')
  do FORMAT-DATETIME($Job_Effdt, $CMP_Job_Effdt, {DEFCMP}, '','')

  if $CMP_Job_Effdt >= $CMP_C_Contract_Start_Dt and
     $CMP_Job_Effdt < $CMP_CP_Pay_End_Dt

     if $CMP_Contract_Start_Dt > $CMP_Job_Prev_Effdt and $Last_Job_Period = 'N'
         move $C_Contract_Start_Dt to $Start_Dt
         do CONVERT-TO-DTU-DATE($Job_Effdt, $Temp_Dt)
         do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
         do CONVERT-FROM-DTU-DATE($Temp_Dt2, $End_Dt)
     else
         if $CMP_Contract_Start_Dt > $CMP_Job_Prev_Effdt
            move $C_Contract_Start_Dt to $Start_Dt
         else
            move $Job_Prev_Effdt to $Start_Dt
         end-if

         if $Job_Effdt < $CMP_Contract_Term_Dt and $Last_Job_Period = 'N'
            do CONVERT-TO-DTU-DATE($Job_Effdt, $Temp_Dt)
            do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
            do CONVERT-FROM-DTU-DATE($Temp_Dt2, $End_Dt)
         else
            move 'Y' to $Last_Job_Period
            if $CMP_CP_Pay_End_Dt < $CMP_Contract_Term_Dt
               move $CP_Pay_End_Dt to $End_Dt
            else
               move $C_Contract_Term_Dt to $End_Dt
            end-if
         end-if
     end-if

     do FORMAT-DATETIME($Start_Dt, $CMP_Start_Dt, {DEFCMP}, '','')
     do FORMAT-DATETIME($End_Dt, $CMP_End_Dt, {DEFCMP}, '','')

     if $CMP_Start_Dt <= $CMP_End_Dt
       do WorkDays($Start_Dt, $End_Dt, $PD_Work_Schedule, #Days_Worked)

       if $C_Use_Holiday_Sched = 'Y' and rtrim($Holiday_Schedule,' ') > ''

begin-SELECT
COUNT(*) &count_holidays
   let #Days_Worked = #Days_Worked - &count_holidays
from  PS_HOLIDAY_DATE
where HOLIDAY_SCHEDULE = $Holiday_Schedule
  and HOLIDAY between $Start_Dt and $End_Dt
end-SELECT

       end-if
     else
        let #Days_Worked = 0
     end-if

     if #Days_Worked_To_Date > 0
        let #Earned_Change_Amount = #Cal_Prorate_Amt * #Days_Worked_To_Date / #Total_WorkDays
     else
        let #Earned_Change_Amount = 0
     end-if

     add #Earned_Change_Amount to #Earned_To_Date
     add #Days_Worked to #Days_Worked_To_Date

     if #Total_WorkDays > 0
       if #Days_Worked > #Total_WorkDays
          let #Days_Worked = #Total_WorkDays
       end-if
       let #Earned_This_Period = #Job_Prev_CompRate * #Days_Worked / #Total_WorkDays
       let #Earned_This_Period = round(#Earned_This_Period,2)
       add #Earned_This_Period to #Earned_To_Date
     end-if

  end-if
 end-if

end-procedure

!****************************************************************************
! PROCESS-PRORATA-CHANGE                                                    *
! Establishes the total contract amount for a contract with a change amt.   *
!     Contract amount is dependent on value of PRORATE_CNT_AMT FLAG.        *
!****************************************************************************
begin-procedure PROCESS-PRORATA-CHANGE

   evaluate $J_Prorate_Cnt_Amt

      when = 'N'
         let #DT_Delta_Amt = #J_Change_Amt
      when = 'C'
         if $CMP_Effdt >= $CMP_Contract_End_Dt
            let #DT_Delta_Amt = 0
         else
            if $CMP_Effdt <= $CMP_Contract_Begin_Dt
               let #DT_Delta_Amt = #J_Change_Amt
            else
               do PAY-PRDS-BETWEEN($DT_Effdt, $C_Contract_End_Dt, #PR_Pay_Prds)
               do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_End_Dt, #TT_Pay_Prds)
               let #DT_Delta_Amt = round(#J_Change_Amt * #PR_Pay_Prds / #TT_Pay_Prds,2)
            end-if
         end-if
      when = 'P'
         if $CMP_Effdt >= $CMP_Payment_End_Dt
            let #DT_Delta_Amt = 0
         else
            if $CMP_Effdt <= $CMP_Payment_Begin_Dt
               let #DT_Delta_Amt = #J_Change_Amt
            else
               do PAY-PRDS-BETWEEN($DT_Effdt, $C_Payment_End_Dt, #PR_Pay_Prds)
               do PAY-PRDS-BETWEEN($C_Payment_Begin_Dt, $C_Payment_End_Dt, #TT_Pay_Prds)
               let #DT_Delta_Amt = round(#J_Change_Amt * #PR_Pay_Prds / #TT_Pay_Prds,2)
            end-if
         end-if
   end-evaluate

   add #DT_Delta_Amt to #Total_Delta_Amt

end-procedure

!****************************************************************************
! CALCULATE-PAID-TO-DATE                                                    *
! Calulate contract earnings for all confirmed pays                         *
!****************************************************************************
begin-procedure CALCULATE-PAID-TO-DATE

  move 0 to #Paid_To_Date

begin-SELECT
SUM(A.OTH_EARNS) &PAID

   let #Paid_To_Date = &PAID

FROM PS_PAY_OTH_EARNS A, PS_PAY_CHECK B,  PS_PAY_EARNINGS C
WHERE A.COMPANY = $PD_Company
 AND C.EMPLID = $E_Emplid
 AND C.EMPL_RCD = #E_Empl_Rcd
 AND (A.ERNCD = $PD_Erncd_Reg_Earns or A.ERNCD = $PD_Erncd_Ern_not_Pd or A.ERNCD = $PD_Erncd_Pd_not_Ern)
 AND (A.ADDL_SEQ = #C_Addl_Seq or A.ADDL_SEQ not in (SELECT D.ADDL_SEQ from PS_CONTRACT D
                                   where D.EMPLID = B.EMPLID
                                     and D.EMPL_RCD = B.EMPL_RCD
                                     and D.EFFDT <= B.PAY_END_DT))
 AND A.COMPANY=B.COMPANY
 AND A.PAYGROUP=B.PAYGROUP
 AND A.PAY_END_DT=B.PAY_END_DT
 AND A.OFF_CYCLE=B.OFF_CYCLE
 AND A.PAGE_NUM=B.PAGE_NUM
 AND A.LINE_NUM=B.LINE_NUM
 AND A.SEPCHK=B.SEPCHK
 AND C.COMPANY=A.COMPANY
 AND C.PAYGROUP=A.PAYGROUP
 AND C.PAY_END_DT=A.PAY_END_DT
 AND C.OFF_CYCLE=A.OFF_CYCLE
 AND C.PAGE_NUM=A.PAGE_NUM
 AND C.LINE_NUM=A.LINE_NUM
 AND C.ADDL_NBR = A.ADDL_NBR
 AND C.SEPCHK=A.SEPCHK
 AND C.EARNS_END_DT >= $C_Payment_Begin_Dt
 AND C.EARNS_BEGIN_DT <= $C_Payment_End_Dt
 AND C.EARNS_END_DT <= $CP_Pay_End_Dt
 AND B.PAYCHECK_STATUS = 'F'
 AND B.PAYCHECK_OPTION <> 'R'
 AND B.PAY_END_DT >= $C_Payment_Begin_Dt
end-SELECT

end-procedure

!****************************************************************************
! COMPUTE-CONTRACT-DATES                                                    *
! Calculates the Before, During, and After contract begin and end dates and *
! calls Pay-Prds-Between for for each to determine the total pay periods.   *
!****************************************************************************
begin-procedure COMPUTE-CONTRACT-DATES

  let $BC_Start_Dt = $C_Payment_Begin_Dt

  do CONVERT-TO-DTU-DATE($C_Contract_Begin_Dt, $Temp_Dt)
  do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
  do CONVERT-FROM-DTU-DATE($Temp_Dt2, $BC_End_Dt)

  do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Pay_Prds)

  if #BC_Pay_Prds = 0

     let $BC_Start_Dt = ''
     let $BC_End_Dt   = ''
  end-if

  let $DC_Start_Dt = $C_Contract_Begin_Dt
  let $DC_End_Dt = $C_Contract_End_Dt

  do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Pay_Prds)

  if #DC_Pay_Prds = 0
     let $DC_Start_Dt = ''
     let $DC_End_Dt   = ''
  end-if

  do CONVERT-TO-DTU-DATE($C_Contract_End_Dt, $Temp_Dt)
  do DTU-ADD-DAYS($Temp_Dt, 1, $Temp_Dt2)
  do CONVERT-FROM-DTU-DATE($Temp_Dt2, $AC_Start_Dt)
  let $AC_End_Dt   = $C_Payment_End_Dt

  do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt, #AC_Pay_Prds)

  if #AC_Pay_Prds = 0
     let $AC_Start_Dt = ''
     let $AC_End_DT   = ''
  end-if

end-procedure
!****************************************************************************
! FIND-REMAINING-PERIODS                                                    *
! Calculates the Before, During, and After contract begin and end dates     *
! based on the Job's effective date. Call Pay-Prds-Between for each to      *
! determine the remaining pay period.                                       *
!****************************************************************************
begin-procedure FIND-REMAINING-PERIODS

  if $CMP_EffDt > $CMP_Payment_Begin_Dt

      let $BC_Start_Dt = $PAYC_Pay_Begin_Dt

      do CONVERT-TO-DTU-DATE($C_Contract_Begin_Dt, $Temp_Dt)
      do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
      do CONVERT-FROM-DTU-DATE($Temp_Dt2, $BC_End_Dt)

      do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Remain_Pay_Prds)
  else
      let #BC_Remain_Pay_Prds = #BC_Pay_Prds
  end-if

  if $CMP_Effdt > $CMP_Contract_Begin_Dt

      let $DC_Start_Dt = $PAYC_Pay_Begin_Dt
      let $DC_End_Dt = $C_Contract_End_Dt

      do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Remain_Pay_Prds)
  else
      let #DC_Remain_Pay_Prds = #DC_Pay_Prds
  end-if

  if $CMP_Effdt > $CMP_Contract_End_Dt

      let $DC_Start_Dt = $PAYC_Pay_Begin_Dt
      let $DC_End_Dt = $C_Payment_End_Dt

      do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #AC_Remain_Pay_Prds)
  else
      let #AC_Remain_Pay_Prds = #AC_Pay_Prds
  end-if

end-procedure
!****************************************************************************
! COMPUTE-REMAINING-PAY-PERIODS                                             *
! Calls Pay-Prds-Between with the proper dates to calculate the number of   *
! pay periods remaining in the current contract.                            *
!****************************************************************************
begin-procedure COMPUTE-REMAINING-PAY-PERIODS

  do FORMAT-DATETIME($CP_Pay_Begin_Dt, $Temp_CP_Begin_Dt, {DEFCMP},'','')

  if #BC_Pay_Prds > 0

     do FORMAT-DATETIME($BC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $BC_End_Dt,
                            #BC_Pay_Prds_Remaining)
     end-if
  else

     let #BC_Pay_Prds_Remaining = 0
  end-if

  if #DC_Pay_Prds > 0

     do FORMAT-DATETIME($DC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $DC_End_Dt,
                            #DC_Pay_Prds_Remaining)
     end-if
  else

     let #DC_Pay_Prds_Remaining = 0
  end-if

  if #AC_Pay_Prds > 0

     do FORMAT-DATETIME($AC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt, #AC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $AC_End_Dt,
                            #AC_Pay_Prds_Remaining)
     end-if
  else

     let #AC_Pay_Prds_Remaining = 0
  end-if

end-procedure
!****************************************************************************
! COMPUTE-CURRENT-PAY-PERIOD                                                *
! Computes the total contract pay periods in the current pay period         *
!****************************************************************************
begin-procedure COMPUTE-CURRENT-PAY-PERIOD

  do FORMAT-DATETIME($CP_Pay_Begin_Dt, $Temp_CP_Begin_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($CP_Pay_End_Dt, $Temp_CP_End_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_End_Dt, $Temp_Contract_End_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_Term_Dt, $Temp_Contract_Term_Dt, {DEFCMP},'','')
  move $CP_Pay_End_Dt to $save_CP_Pay_End_Dt
  if $Temp_Contract_Term_Dt < $Temp_Contract_End_Dt and      ! Contract terminates prematurely
     $Temp_Contract_Term_Dt < $Temp_CP_End_Dt
    move $Temp_Contract_Term_Dt to $Temp_CP_End_Dt
    move $C_Contract_Term_Dt to $CP_Pay_End_Dt
  end-if

  if #BC_Pay_Prds > 0

     do FORMAT-DATETIME($BC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($BC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt,
                               #CP_Pay_Prds_Before)
        else

           do PAY-PRDS-BETWEEN($BC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_Before)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $BC_End_Dt,
                               #CP_Pay_Prds_Before)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_Before)
        end-if
     end-if
  else

     let #CP_Pay_Prds_Before = 0
  end-if

  if #DC_Pay_Prds > 0

     do FORMAT-DATETIME($DC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($DC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt,
                               #CP_Pay_Prds_During)
        else

           do PAY-PRDS-BETWEEN($DC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_During)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $DC_End_Dt,
                               #CP_Pay_Prds_During)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_During)
        end-if
     end-if
  else

     let #CP_Pay_Prds_During = 0
  end-if

  if #AC_Pay_Prds > 0

     do FORMAT-DATETIME($AC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($AC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt,
                               #CP_Pay_Prds_After)
        else

           do PAY-PRDS-BETWEEN($AC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_After)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $AC_End_Dt,
                               #CP_Pay_Prds_After)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_After)
        end-if
     end-if
  else

     let #CP_Pay_Prds_After = 0
  end-if

  move $save_CP_Pay_End_Dt to $CP_Pay_End_Dt

end-procedure
!****************************************************************************
! PAY-PRDS-BETWEEN                                                          *
! Calculates the total number of pay periods between the start and end date *
! passed to it.                                                             *
!****************************************************************************
begin-procedure PAY-PRDS-BETWEEN($Start_Date, $End_Date, :#Pay_Prds)

  let #Pay_Prds = 0

  do FORMAT-DATETIME($Start_Date, $Cnt_Start_Date, {DEFCMP},'','')
  do FORMAT-DATETIME($End_Date, $Pay_End_Date, {DEFCMP},'','')

  if $Cnt_Start_Date <= $Pay_End_Date
    do PAY-PRDS-BETWEEN-1($Start_Date, $End_Date, #Pay_Prds)
  end-if

end-procedure
!****************************************************************************
! PAY-PRDS-BETWEEN-1                                                        *
! Calculates the total number of pay periods between the start and end date *
! passed to it.  This routine is called if Start Date is less or equal to   *
! End Date.                                                                 *
!****************************************************************************
begin-procedure PAY-PRDS-BETWEEN-1($Start_Date, $End_Date, :#Pay_Prds)

  do CONVERT-TO-DTU-DATE($Start_Date, $DTU_Start_Date)
  do CONVERT-TO-DTU-DATE($End_Date, $DTU_End_Date)
  let $SQL_Company  = $_PD_Company
  let $SQL_Paygroup = $_PD_Paygroup

let $err-statement1 = 'CNTPAY01.SQR, Select Error- PAY-PRDS-BETWEEN-1'
let $err-statement2 = 'Bind Variables: Company '||$_PD_Company||', Paygroup '||
                       $_PD_Paygroup||', Period Begin Date '||
                       $Start_Date||', Period End Date '||$End_Date
begin-SELECT on-error=Error-Display
PAY_CAL1.PAY_BEGIN_DT
PAY_CAL1.PAY_END_DT

   do CONVERT-TO-DTU-DATE(&PAY_CAL1.PAY_BEGIN_DT, $DTU_Pay_Bgn_Dt)
   do CONVERT-TO-DTU-DATE(&PAY_CAL1.PAY_END_DT, $DTU_Pay_End_Dt)

   if $DTU_Start_Date > $DTU_Pay_Bgn_Dt

      if $DTU_Start_Date <= $DTU_Pay_End_Dt

         if $DTU_End_Date <= $DTU_Pay_End_Dt

            do WORKDAYS($Start_Date, $End_Date, $_PD_Work_Schedule, #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         else

            do WORKDAYS($Start_Date, &PAY_CAL1.PAY_END_DT, $_PD_Work_Schedule,
                        #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         end-if
      end-if
   else

      if $DTU_End_Date < $DTU_Pay_End_Dt

         if $DTU_End_Date >= $DTU_Pay_Bgn_Dt

            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, $End_Date, $_PD_Work_Schedule,
                        #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         end-if
      else

            add 1 to #Pay_Prds
      end-if
  end-if

FROM PS_PAY_CALENDAR PAY_CAL1
WHERE PAY_CAL1.COMPANY  = $SQL_Company
  AND PAY_CAL1.PAYGROUP = $SQL_Paygroup
  AND PAY_CAL1.PAY_OFF_CYCLE_CAL = 'N'
  AND (PAY_CAL1.PAY_END_DT BETWEEN $Start_Date AND $End_Date
   OR PAY_CAL1.PAY_BEGIN_DT BETWEEN $Start_Date AND $End_Date
   OR ($Start_Date BETWEEN PAY_CAL1.PAY_BEGIN_DT AND PAY_CAL1.PAY_END_DT
      AND $End_Date BETWEEN PAY_CAL1.PAY_BEGIN_DT AND PAY_CAL1.PAY_END_DT))

end-SELECT

end-procedure

!****************************************************************************
! UPDATE-CONTRACT-ACCUMULATORS                                              *
! Update Accumulators on Contract Pay Record                                *
!****************************************************************************
begin-procedure UPDATE-CONTRACT-ACCUMULATORS

   let $E_Empl_Rcd     = edit(#E_Empl_Rcd,'99')
   let $Paid_To_Date   = edit(#Paid_To_Date,'999,999,999.99')
   let $Earned_To_Date = edit(#Earned_To_Date,'999,999,999.99')
   let $Worked_To_Date = edit(#Days_Worked_To_Date,'999')
   let $Work_Days = edit(#C_Contract_WorkDays,'999')

   let $err-statement1 = 'CNTPAY03 Update Error - UPDATE-CONTRACT-ACCUMULATORS'
   let $err-statement2 = 'Key Fields: EMPLID ' || $E_Emplid ||
                         ', EMPL_RCD ' || $E_Empl_Rcd ||
                         ', EFFDT ' || $Contract_Effdt ||
                         ', HP_PAID_TO_DT ' || $Paid_To_Date ||
                         ', HP_EARNED_TO_DT ' || $Earned_To_Date ||
                         ', HP_WORKED_TO_DT ' || $Worked_To_Date ||
                         ', HP_WORKDAYS ' || $Work_Days

begin-SQL on-error=Error-Display
UPDATE PS_CONTRACT
SET HP_PAID_TO_DT   = #Paid_To_Date,
    HP_EARNED_TO_DT = #Earned_To_Date,
    HP_WORKED_TO_DT = #Days_Worked_To_Date,
    HP_WORKDAYS     = #C_Contract_WorkDays
WHERE EMPLID   = $E_Emplid
  AND EMPL_RCD = #E_Empl_Rcd
  AND EFFDT    = $Contract_Effdt
end-SQL

end-procedure
!****************************************************************************
! START-PROCESSING                                                          *
! Displays status to screen when beginning a new process                    *
!****************************************************************************
begin-procedure START-PROCESSING

  do GET-CURRENT-DATETIME
  display ' '
  display ' '
  display $Indent noline
  display 'Started  Processing ' noline
  display $Processing noline
  display ' at ' noline
  display $SysDateTime

end-procedure
!****************************************************************************
! FINISH-PROCESSING                                                         *
! Displays Status to screen when completing a process                       *
!****************************************************************************
begin-procedure FINISH-PROCESSING

  do GET-CURRENT-DATETIME
  display ' '
  display $Indent noline
  display 'Finished Processing ' noline
  display $Processing noline
  display ' at ' noline
  display $SysDateTime

end-procedure
!****************************************************************************
! DELETE-RUN-CONTROL                                                        *
! Deletes run control information from run control table.                   *
!****************************************************************************
begin-procedure DELETE-RUN-CONTROL

begin-SQL

DELETE FROM PS_RC_PAYINIT
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure
!****************************************************************************
! WRAPUP                                                                    *
! This paragraph ends the report process and updates the status of the      *
! job in the process scheduler.                                             *
!****************************************************************************
begin-procedure WRAPUP

  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

end-procedure

!****************************************************************************
! PRINT-ARRAY                                                               *
!****************************************************************************
begin-procedure Print-ARRAY

  let #wrk_idx = 1

  while #wrk_idx <= #lst_idx

      get  $Prt_Effdt
           $Prt_Lump_Sum_Pay
           #Prt_Adjust_Amt
           #Prt_Prorate_Amt
           #Prt_BC_PayPrd
           #Prt_DC_PayPrd
           #Prt_AC_PayPrd
           #Prt_BC_Goal_Amt
           #Prt_DC_Goal_Amt
           #Prt_AC_Goal_Amt
           #Prt_BC_Passed_PayPrd
           #Prt_DC_Passed_PayPrd
           #Prt_AC_Passed_PayPrd
           #Prt_PNE_Retro_Amt
           #Prt_CRG_Retro_Amt
           #Prt_ENP_Retro_Amt
      from Wrk_Comp(#wrk_idx)
           Wrk_Effdt
           Wrk_Lump_Sum_Pay
           Wrk_Adjust_Amt
           Wrk_Prorate_Amt
           Wrk_BC_PayPrd
           Wrk_DC_PayPrd
           Wrk_AC_PayPrd
           Wrk_BC_Goal_Amt
           Wrk_DC_Goal_Amt
           Wrk_AC_Goal_Amt
           Wrk_BC_Passed_PayPrd
           Wrk_DC_Passed_PayPrd
           Wrk_AC_Passed_PayPrd
           Wrk_PNE_Retro_Amt
           Wrk_CRG_Retro_Amt
           Wrk_ENP_Retro_Amt

      move #E_Empl_Rcd      to $Empl_Rcd
      move #Prt_Adjust_Amt  to $Prt_Adjust_Amt
      move #Prt_Prorate_Amt to $Prt_Prorate_Amt
      move #Prt_BC_PayPrd   to $Prt_BC_PayPrd
      move #Prt_DC_PayPrd   to $Prt_DC_PayPrd
      move #Prt_AC_PayPrd   to $Prt_AC_PayPrd
      move #Prt_BC_Goal_Amt to $Prt_BC_Goal_Amt
      move #Prt_DC_Goal_Amt to $Prt_DC_Goal_Amt
      move #Prt_AC_Goal_Amt to $Prt_AC_Goal_Amt

      move #Prt_BC_Passed_PayPrd to $Prt_BC_Passed_PayPrd
      move #Prt_DC_Passed_PayPrd to $Prt_DC_Passed_PayPrd
      move #Prt_AC_Passed_PayPrd to $Prt_AC_Passed_PayPrd

      move #Prt_PNE_Retro_Amt  to $Prt_PNE_Retro_Amt
      move #Prt_CRG_Retro_Amt  to $Prt_CRG_Retro_Amt
      move #Prt_ENP_Retro_Amt  to $Prt_ENP_Retro_Amt

      let $DebugMsg = 'Debug : '|| $E_Emplid || ', '
                                || $Empl_Rcd || ', '
                                || $Prt_Effdt || ', '
                                || $Prt_Lump_Sum_Pay || ', '
                                || $Prt_Adjust_Amt  || ', '
                                || $Prt_Prorate_Amt || ', '
                                || $Prt_BC_PayPrd   || ', '
                                || $Prt_DC_PayPrd   || ', '
                                || $Prt_AC_PayPrd   || ', '
                                || $Prt_BC_Goal_Amt || ', '
                                || $Prt_DC_Goal_Amt || ', '
                                || $Prt_AC_Goal_Amt
      display $DebugMsg

      let $DebugMsg = 'Retro : ' || $Prt_BC_Passed_PayPrd || ', '
                                 || $Prt_DC_Passed_PayPrd || ', '
                                 || $Prt_AC_Passed_PayPrd || ', '
                                 || $Prt_PNE_Retro_Amt || ', '
                                 || $Prt_CRG_Retro_Amt || ', '
                                 || $Prt_ENP_Retro_Amt

      display $DebugMsg

      add 1 to #wrk_idx
  end-while

end-procedure

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stderror.sqc'  !Routine for error display
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get run control parameters.  This will change
                         !depending on the type of report you are running
                         !and which type of parameters are being used to
                         !run the report.
