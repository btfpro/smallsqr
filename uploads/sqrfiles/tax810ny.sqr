!***********************************************************************
!  TAX810NY:  Qtrly Wage List - NEW YORK                               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/07/18:11:34:12                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872684                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP00001       Add PublicSector indicator                             *
! HP99998       E&G 7.51 AU Merge                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

  do Process-Main

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file will have been'
    display 'created, as follows:'
    display ''
    display ''
    display '  TAX810NY  contains 128-character records in the format required'
    display '            for electronic submission of quarterly wages to the'
    display '            New York Department of Taxation and Finance.'
    display ''
    display ''
    display 'Follow the instructions in the department''s Publication 69'
    display 'for preparing and submitting the file electronically.'
    display ''
    display 'Note: 4th quarter reporting includes annual W-2 information for'
    display 'NY state, NYC and Yonkers.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Delete-Temp-Table

  do Stdapi-Term

end-report

begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Get-Calendar-Year-Id

  do Stdapi-Init

  do Initialize
  move 'TAX810NY' to $ReportID
  move 'New York Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating file for New York Quarterly Combined Wage and ' noline
  display 'Withholding Tax Information'

end-procedure

begin-procedure Initialize
  do Delete-Temp-Table
  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate to $AsOfDate  !for included procedures
  move &TX.Balance_Year to $RptYYYY 9999
  move $RptYYYY          to $RptYY   ~~xx

  !Format date in MMDDYY format...
  do Format-Datetime($AsOfToday, $WorkDt, {DEFCMP}, '', '')
  let $TapeCreateDate = Substr($WorkDt, 5, 2) || Substr($WorkDt, 7, 2)
                     || Substr($WorkDt, 3, 2)


  let $Process-O-Record = ' '
  do Get-Earn-Parms

  open '{IMPORTPREFIX}TAX810NY{IMPORTSUFFIX}' as 10 for-writing record=128:fixed

end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  do Get-Company-Data                 !Transmitter identifying data
  do Save-A-Record-Data

begin-SELECT
A.COMPANY
A.DESCR
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.TAX_REPORT_TYPE

  move &A.Company to $Company
  move &A.Descr   to $CompanyName
  move '' to $priorEmplID
  move ' ' to $Tax_Class_NY
  move ' ' to $Tax_Class_NY2


  if &TX.Balance_Qtr = 4
     if &A.TAX_REPORT_TYPE = '2' or
        &A.TAX_REPORT_TYPE = 'R'
        do Select-EE-YTD
     end-if
  else
    if &A.TAX_REPORT_TYPE = '2'
      do Select-EE-QTD
    end-if
  end-if

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  do Write-A-Record
  do Write-Employee-Records

  if #Count_F > 0
     do Write-F-Record
     do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Select-EE-QTD
begin-SELECT
C.COMPANY
C.STATE
C.EMPLID
C.NLGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME


  let #Grs_QTD = &C.NlGrs_QTD

  move &D1.NATIONAL_ID       to $NATIONAL_ID
  move &C.EmplID    to $EmplID
  let $LastName   = rtrim(&D.LAST_NAME, '')
  let $FirstName  = rtrim(&D.FIRST_NAME, '')
  let $MiddleName = {ps-substr}(&D.MIDDLE_NAME,1,1)


  do Insert-Empl

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = $Company
  AND D.EMPLID        = C.EMPLID
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'NY'
#endif
  AND C.LOCALITY      = ' '
  AND C.TAX_CLASS     = 'U'
  AND C.NLGRS_QTD    <> 0
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND  C1.BALANCE_ID    = C.BALANCE_ID
         AND  C1.BALANCE_YEAR  = C.BALANCE_YEAR
         AND  C1.BALANCE_QTR   = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY C.COMPANY, D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Select-EE-YTD
begin-SELECT
PD1.NATIONAL_ID
TB.EMPLID () on-break print=never level=1 After=After-EE
TB.TAX_YTD
PD.LAST_NAME
PD.FIRST_NAME
PD.MIDDLE_NAME

  move &PD1.NATIONAL_ID     to $NATIONAL_ID
  move &TB.EmplID  to $EmplID
  let $LastName   = rtrim(&PD.LAST_NAME, '')
  let $FirstName  = rtrim(&PD.FIRST_NAME, '')
  let $MiddleName = {ps-substr}(&PD.MIDDLE_NAME,1,1)


  add &TB.Tax_YTD  to #Tax_YTD

FROM  PS_TAX_BALANCE TB, PS_PERSON_NAME PD,
      PS_PERS_NID PD1           !HP00001
WHERE TB.COMPANY       = $Company
  AND PD.EMPLID        = TB.EMPLID
#ifdef TAXTEST
  AND TB.STATE         = 'CA'
#else
  AND TB.STATE         = 'NY'
#endif
  AND TB.LOCALITY     IN (' ','P0001','84000') !SWT, NYC, Yonkers
  AND TB.TAX_CLASS     = 'H'                   !Withholding
  AND TB.BALANCE_ID    = $Calendar_Year_Id
  AND TB.BALANCE_YEAR  = &TX.Balance_Year
  AND (TB.TXGRS_YTD   <> 0 OR
       TB.TAX_YTD     <> 0 )
  AND TB.BALANCE_PERIOD       =
      (SELECT MAX(TB2.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB2
       WHERE  TB2.EMPLID        = TB.EMPLID
         AND  TB2.COMPANY       = TB.COMPANY
         AND  TB2.BALANCE_ID    = TB.BALANCE_ID
         AND  TB2.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND  TB2.STATE         = TB.STATE
         AND  TB2.LOCALITY      = TB.LOCALITY
         AND  TB2.TAX_CLASS     = TB.TAX_CLASS)
  AND PD.EMPLID            = PD1.EMPLID
  AND PD1.COUNTRY          = {NID_Country}
  AND PD1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY TB.EMPLID
end-SELECT

!Unemployment only records (people with no H records)

begin-SELECT
TB3.EMPLID () on-break print=never level=1 After=After-EE
TB3.NLGRS_QTD
PD32.NATIONAL_ID
PD3.LAST_NAME
PD3.FIRST_NAME
PD3.MIDDLE_NAME
TB3.TAX_CLASS


  move &PD32.NATIONAL_ID       to $NATIONAL_ID
  move &TB3.EmplID    to $EmplID
  let $LastName   = &PD3.LAST_NAME
  let $FirstName  = &PD3.FIRST_NAME
  let $MiddleName = &PD3.MIDDLE_NAME
  move &TB3.Tax_Class to $Tax_Class_NY

  let #Grs_QTD = &TB3.NlGrs_QTD

FROM  PS_TAX_BALANCE TB3, PS_PERSON_NAME PD3, PS_PERS_NID PD32
WHERE TB3.COMPANY       = $Company
  AND PD3.EMPLID        = TB3.EMPLID
#ifdef TAXTEST
  AND TB3.STATE         = 'CA'
#else
  AND TB3.STATE         = 'NY'
#endif
  AND TB3.LOCALITY      = ' '
  AND TB3.TAX_CLASS     = 'U'
  AND TB3.NLGRS_QTD    <> 0
  AND TB3.BALANCE_ID    = $Calendar_Year_Id
  AND TB3.BALANCE_YEAR  = &TX.Balance_Year
  AND TB3.BALANCE_QTR   = 4               !&TX.QtrCd
  AND NOT EXISTS (SELECT 'X'
                  FROM PS_R_TAX002NY RU
                  WHERE RU.EMPLID = TB3.EMPLID
                  AND RU.COMPANY = TB3.COMPANY)
  AND TB3.BALANCE_PERIOD =
      (SELECT MAX(TB4.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB4
       WHERE  TB4.EMPLID        = TB3.EMPLID
         AND  TB4.COMPANY       = TB3.COMPANY
         AND  TB4.BALANCE_ID    = TB3.BALANCE_ID
         AND  TB4.BALANCE_YEAR  = TB3.BALANCE_YEAR
         AND  TB4.BALANCE_QTR   = TB3.BALANCE_QTR
         AND  TB4.STATE         = TB3.STATE
         AND  TB4.LOCALITY      = TB3.LOCALITY
         AND  TB4.TAX_CLASS     = TB3.TAX_CLASS)
  AND PD3.EMPLID            = PD32.EMPLID
  AND PD32.COUNTRY          = {NID_Country}
  AND PD32.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY TB3.EMPLID
end-SELECT
end-procedure

begin-procedure After-EE

  do Select-EE-Unempl-QTD
  do Federal-Select

  if &TX.Balance_Qtr = 4
     if &A.TAX_REPORT_TYPE = '2' or
        &A.TAX_REPORT_TYPE = 'R'
          do Select-EE-DPB-Deductions
     end-if
  end-if

  do Insert-Empl

  move 0 to #Grs_QTD
  move 0 to #Tax_YTD
  move 0 to #TxGrs_YTD
  let $Tax_Class_NY = ' '
  let $Tax_Class_NY2 = ' '
end-procedure

!
! This procedure is only used for 4th QTR NLGrs_QTD balance lookup
!

begin-procedure Select-EE-Unempl-QTD
begin-SELECT
CC.NLGRS_QTD
CC.TAX_CLASS


  move &CC.Tax_Class to $Tax_Class_NY2
  let #Grs_QTD = &CC.NlGrs_QTD

FROM  PS_TAX_BALANCE CC
WHERE CC.COMPANY       = $Company
  AND CC.EMPLID        = $Emplid
#ifdef TAXTEST
  AND CC.STATE         = 'CA'
#else
  AND CC.STATE         = 'NY'
#endif
  AND CC.LOCALITY      = ' '
  AND CC.NLGRS_QTD    <> 0
  AND CC.TAX_CLASS     = 'U'
  AND CC.BALANCE_ID    = $Calendar_Year_Id
  AND CC.BALANCE_YEAR  = &TX.Balance_Year
  AND CC.BALANCE_QTR   = 4
  AND CC.BALANCE_PERIOD =
      (SELECT MAX(CC1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE CC1
       WHERE  CC1.EMPLID        = CC.EMPLID
         AND  CC1.COMPANY       = CC.COMPANY
         AND  CC1.BALANCE_ID   = CC.BALANCE_ID
         AND  CC1.BALANCE_YEAR  = CC.BALANCE_YEAR
         AND  CC1.BALANCE_QTR   = CC.BALANCE_QTR
         AND  CC1.STATE         = CC.STATE
         AND  CC1.LOCALITY      = CC.LOCALITY
         AND  CC1.TAX_CLASS     = CC.TAX_CLASS)
end-SELECT
end-procedure

!
! This procedure is only used for 4th QTR '$U' TxGrs_YTD balance lookup
!

begin-procedure Federal-Select
begin-Select
TB5.TXGRS_YTD

  add &TB5.TxGrs_YTD to #TxGrs_YTD                                      !HP99998

FROM  PS_TAX_BALANCE TB5
WHERE TB5.TAX_CLASS     = 'H'                   !Withholding
  AND TB5.EMPLID        = $EmplID
  AND TB5.COMPANY       = $Company
  AND TB5.STATE         = '$U'
  AND TB5.BALANCE_ID    = $Calendar_Year_Id
  AND TB5.BALANCE_YEAR  = &TX.Balance_Year
  AND (TB5.TXGRS_YTD   <> 0)
  AND TB5.BALANCE_PERIOD =
      (SELECT MAX(TB6.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB6
       WHERE  TB6.EMPLID        = TB5.EMPLID
       AND  TB6.COMPANY       = TB5.COMPANY
       AND  TB6.BALANCE_ID    = TB5.BALANCE_ID
       AND  TB6.BALANCE_YEAR  = TB5.BALANCE_YEAR
       AND  TB6.STATE         = TB5.STATE
       AND  TB6.LOCALITY      = TB5.LOCALITY
       AND  TB6.TAX_CLASS     = TB5.TAX_CLASS)
end-SELECT
end-procedure


!
! This procedure selects the DPB deductions that are not subject to SWT
!

begin-procedure Select-EE-DPB-Deductions

   move 0 to #DPB-Ded-Ytd


begin-Select
DED1.DED_YTD

  add &DED1.DED_YTD  to  #DPB-Ded-Ytd

FROM  PS_DEDUCTION_BAL DED1, PS_PY_NY_DPB_DED DED2
WHERE DED1.EMPLID        = $EmplID
  AND DED1.COMPANY       = $Company
  AND DED1.BALANCE_ID    = $Calendar_Year_Id
  AND DED1.BALANCE_YEAR  = &TX.Balance_Year
  AND DED1.DED_YTD      <> 0
  AND DED1.PLAN_TYPE     = DED2.PLAN_TYPE
  AND DED1.BENEFIT_PLAN  = DED2.BENEFIT_PLAN
  AND DED1.DEDCD         = DED2.DEDCD
  AND DED1.DED_CLASS     = DED2.DED_CLASS
  AND DED1.BALANCE_PERIOD =
      (SELECT MAX(DED3.BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL DED3
       WHERE  DED3.EMPLID      = DED1.EMPLID
       AND  DED3.COMPANY       = DED1.COMPANY
       AND  DED3.BALANCE_ID    = DED1.BALANCE_ID
       AND  DED3.BALANCE_YEAR  = DED1.BALANCE_YEAR
       AND  DED3.BENEFIT_RCD_NBR = DED1.BENEFIT_RCD_NBR
       AND  DED3.PLAN_TYPE     = DED1.PLAN_TYPE
       AND  DED3.BENEFIT_PLAN  = DED1.BENEFIT_PLAN
       AND  DED3.DEDCD         = DED1.DEDCD
       AND  DED3.DED_CLASS     = DED1.DED_CLASS)

end-SELECT

  subtract #DPB-Ded-Ytd from #TxGrs_YTD

end-procedure


begin-procedure Write-Employee-Records

begin-SELECT
R.COMPANY    () on-break print=never level=1 before=Before-Company
                                              AFTER=AFTER-COMPANY
R.EMPLID
R.SSN
R.LAST_NAME
R.FIRST_NAME
R.MIDDLE_NAME
R.GRS_QTD
R.TXGRS_YTD
R.TAX_YTD
R.TAX_CLASS_NY
R.TAX_CLASS_NY2

  move &R.Emplid to $Emplid

  if &TX.Balance_Qtr <> 4
    if &R.Grs_QTD > 0
      do Write-W-Record
    else
      if &R.Grs_QTD < 0
        do Print-Summary-Data('NegWage')
      end-if
    end-if
  else
     if &R.Grs_QTD >= 0 and &R.TxGrs_YTD >= 0 and &R.Tax_YTD >= 0
       do Write-W-Record
     else
       if &R.Grs_QTD < 0 and &R.TxGrs_YTD >= 0 and &R.Tax_YTD >= 0
         do Write-W-Record
         do Print-Summary-Data('NegWage')
       else
         do Print-Summary-Data('NegWage')
       end-if
     end-if
  end-if


FROM  PS_R_TAX002NY R
ORDER BY R.COMPANY, R.SSN
end-SELECT
end-procedure

begin-procedure Before-Company
  move &R.Company to $Company
  do Get-Company-Data

  move 'NY' to $State
  do Get-State-Tax-Data             !Employer ID
  move &Employer_ID_SWT to $StateEIN
  find ' ' in $StateEIN 0 #SEIN_Spc_loc

  do Write-E-Record
end-procedure

begin-procedure After-Company
  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_Grs_QTD   to #Tot_Grs_QTD
    add #Co_TxGrs_YTD to #Tot_TxGrs_YTD
    add #Co_Tax_YTD   to #Tot_Tax_YTD
    add #Count_S to #Count_F

    do Write-T-Record

    move 0 to #Co_Grs_QTD
    move 0 to #Co_TxGrs_YTD
    move 0 to #Co_Tax_YTD
    move 0 to #Count_S
    new-page
  end-if
end-procedure

begin-procedure Insert-Empl

! For Rounding purposes using SQRW3 this function is necessary
  let #cur_prec = 2

  move #TxGrs_YTD to #in_amt
  do PS_SQR_ROUND (#in_amt, #cur_prec, #out_amt1)
  move #out_amt1 to #TxGrs_YTD

  move #Tax_YTD to #in_amt
  do PS_SQR_ROUND (#in_amt, #cur_prec, #out_amt2)
  move #out_amt2 to #Tax_YTD

  Let $NATIONAL_ID = rtrim($NATIONAL_ID, ' ')


begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_TAX002NY
                                (COMPANY,
                                 SSN,
                                 EMPLID,
                                 LAST_NAME,
                                 FIRST_NAME,
                                 MIDDLE_NAME,
                                 GRS_QTD,
                                 TXGRS_YTD,
                                 TAX_YTD,
                                 TAX_CLASS_NY,
                                 TAX_CLASS_NY2)
                                VALUES ($Company,
                                    $NATIONAL_ID,
                                    $EmplID,
                                    $LastName,
                                    $FirstName,
                                    $MiddleName,
                                    #Grs_QTD,
                                    #TxGrs_YTD,
                                    #Tax_YTD,
                                    $Tax_Class_NY,
                                    $Tax_Class_NY2)
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure Delete-Temp-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX002NY
end-SQL
end-procedure

begin-procedure Insert-Error
  display 'Error on insert of employee SSN ' noline
  display $NATIONAL_ID noline
  display '  EmplID ' noline
  display $EmplID
  display 'Possible duplicate SSN'
end-procedure

begin-procedure Save-A-Record-Data
  move $CompanyName    to $TransmitterName
  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompnyAdd1    to $TransmitterAddress
  move $CompnyCity        to $TransmitterCity
  let $TransmitterState = rtrim(&CT.State, ' ')
  move &CT.Postal      to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
    move $Zip            to $ZipExtsn ~~~~~~xxxxx
  end-if


  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity

end-procedure

begin-procedure Write-A-Record
  write 10 from  '1A':2
      $TapeCreateDate:6
              $FedEIN:11
     $TransmitterName:40
   $TransmitterAddress:30
     $TransmitterCity:25
    $TransmitterState:2
                 $Zip:5
            $ZipExtsn:4
                  $Sp:3

  add 1 to #RecordCount
end-procedure

begin-procedure Write-E-Record

  move 0 to #S_Count

  move &CT.Descr       to $ErName
  move $CompnyAdd1    to $ErAddress
  move $CompnyCity        to $City
  let $StateCd = rtrim(&CT.State, ' ')
  move &CT.Postal      to $ZipE
  move $ZipE            to $ZipExtsnE ~~~~~~xxxx
  if instr($ZipE,'-',6) = 0
  and $ZipExtsnE <> '    '
    let $ZipE = substr($ZipE,1,5) || '-' || substr($ZipE,6,4)
    move $ZipE            to $ZipExtsnE ~~~~~~xxxxx
  end-if

  uppercase $ErName
  uppercase $ErAddress
  uppercase $City

  if (#SEIN_Spc_loc < 11)

    write 10 from '1E':2
          $QtrEndMonth:2
                $RptYY:2
             $StateEIN:9
                   $Sp:1
                   $Sp:1
                   $Sp:1
               $ErName:40
                   $Sp:1
            $ErAddress:30
                 $City:25
              $StateCd:2
                 $ZipE:5
            $ZipExtsnE:4
                   $Sp:1
                   'O':1
                   $Sp:1

    add 1 to #RecordCount

  else

    write 10 from '1E':2
          $QtrEndMonth:2
                $RptYY:2
             $StateEIN:11
                   $Sp:1
               $ErName:40
                   $Sp:1
            $ErAddress:30
                 $City:25
              $StateCd:2
                 $ZipE:5
            $ZipExtsnE:4
                   $Sp:1
                   'O':1
                   $Sp:1

    add 1 to #RecordCount
  end-if

end-procedure

begin-procedure Write-W-Record

  move &R.SSN to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&R.SSN, ' ') = ''
    move '000000000'   to $NATIONAL_ID
  else
    move &R.SSN        to $NATIONAL_ID  099999999
  end-if

  let $LastName   = rtrim(&R.LAST_NAME, ' ')
  let $FirstName  = rtrim(&R.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&R.MIDDLE_NAME,1,1)
  let $Name = $LastName || ' ' || $FirstName || ' ' || $MidInitial
  uppercase $Name

  if &R.Grs_QTD < 0
    move 0          to #Grs_QTD
  else
    move &R.Grs_QTD to #Grs_QTD
  end-if
  move &R.TxGrs_YTD to #TxGrs_YTD
  move &R.Tax_YTD   to #Tax_YTD

  if &R.Grs_QTD > 0
    add &R.Grs_QTD to #Co_Grs_QTD
  end-if
  add &R.TxGrs_YTD to #Co_TxGrs_YTD
  add &R.Tax_YTD   to #Co_Tax_YTD

!* The following if statement first checks to see if an "O" record needs to be processed (if the user enters
!* an earnings code on the panel)
!* If an "O" record needs to be processed, then it checks to see if the 4th quarter is being processed
!* If the 4th quarter is not being processed, then it will being to process the "O" record, otherwise
!* it will only process an "O" record in the 4th quarter for an employee with an unemployment record for NY
!* not just an withholding record

  if $Process-O-Record = 'Y'
   if &TX.Balance_Qtr = 4
     if &R.Tax_Class_NY = 'U' or &R.Tax_Class_NY2 = 'U'
        do Process-O-Record
      else
        do Write-1W-Record
     end-if
   else
     do Process-O-Record
   end-if
  else
     do Write-1W-Record
  end-if

  add 1 to #Count_S

end-procedure


begin-procedure Write-1W-Record

  multiply 100 times   #Grs_QTD
  multiply 100 times   #TxGrs_YTD
  multiply 100 times   #Tax_YTD

  move #Grs_QTD     to $Grs_QTD    09999999999999
  move #TxGrs_YTD   to $TxGrs_YTD  09999999999999
  move #Tax_YTD     to $Tax_YTD    09999999999999

  write 10 from '1W':2
        $NATIONAL_ID:9
               $Name:30
                 $Sp:1
                 'W':1
                 $Sp:1
            $Grs_QTD:14
                 $Sp:1
          $TxGrs_YTD:14
                 $Sp:1
            $Tax_YTD:14
                 $Sp:40

  add 1 to #Count_T
  add 1 to #RecordCount
  add #Grs_QTD     to #T_Grs_QTD
  add #TxGrs_YTD   to #T_TxGrs_YTD
  add #Tax_YTD     to #T_Tax_YTD
  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-O-Record

  move 0 to #Zero_Fill

  multiply 100 times   #Earns

  move #Earns       to $Earns      09999999999999
  move #Zero_Fill   to $Zero_Fill  09999999999999

  write 10 from '1W':2
        $NATIONAL_ID:9
               $Name:30
                 $Sp:1
                 'O':1
                 $Sp:1
              $Earns:14
                 $Sp:1
          $Zero_Fill:14
                 $Sp:1
          $Zero_Fill:14
                 $Sp:40

  add 1 to #Count_T
  add 1 to #RecordCount

  add #Earns       to #T_Grs_QTD

  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-T-Record

  add  #Count_T       to #Count_F_W
  add  1              to #Count_F_E
  move #Count_T       to $Count_T       0999999
  move #T_Grs_QTD     to $T_Grs_QTD     09999999999999
  move #T_TxGrs_YTD   to $T_TxGrs_YTD   09999999999999
  move #T_Tax_YTD     to $T_Tax_YTD     09999999999999

  write 10 from '1T':2
            $Count_T:7
                 $Sp:35
          $T_Grs_QTD:14
                 $Sp:1
        $T_TxGrs_YTD:14
                 $Sp:1
          $T_Tax_YTD:14
                 $Sp:40

  move 0  to #Count_T
  move 0  to #T_Grs_QTD
  move 0  to #T_TxGrs_YTD
  move 0  to #T_Tax_YTD
  add 1 to #RecordCount
end-procedure

begin-procedure Write-F-Record

  move #Count_F_E to $Count_F_E 0999999999
  move #Count_F_W to $Count_F_W 0999999999

  write 10 from '1F':2
          $Count_F_E:10
          $Count_F_W:10
                 $Sp:106

  move 0  to #Count_F_E
  move 0  to #Count_F_W
  add 1 to #RecordCount
end-procedure

begin-procedure Process-O-Record    !***Gets earnings entered on panel to write on the o record use GETEARNS.SQC

  move 'PS_RC_TAX810NY D'  to $TAX810X1
  move 'PS_RC_TAX810NY D1' to $TAX810X2
  move 'PS_RC_TAX810NY D2' to $TAX810X3
  move 'PS_RC_TAX810NY D3' to $TAX810X4
  do Get-Earns

  if #Earns > 0
   let #Grs_QTD = #Grs_QTD - #Earns
   if  #Grs_QTD < 0     !** Checks to prevent any negative earnings reporting
    let #Grs_QTD = 0
   end-if

   if #Grs_QTD > 0 or &TX.Balance_Qtr = 4
     do Write-1W-Record
   end-if

   do Write-O-Record
  else
   do Write-1W-Record
  end-if

end-procedure


!***********************************************************************
!  RptSmmry:  Print summary information                                *
!***********************************************************************

begin-heading 6
  #Include 'stdhdg01.sqc'
  print 'Company'          (3,1)
  print $LastCompany       (0,13)
  print $LastCompanyName   (0,17)
  print $RptQtrYr          (3,,)      center
end-heading

begin-procedure Print-Summary-Data($Type)
  if $_Company <> $_LastCompany
    move $_Company     to $_LastCompany
    move $_CompanyName to $_LastCompanyName
    move '' to $PrintHeader
  end-if

  evaluate $Type
    when = 'NegWage'
      if $PrintHeader = ''
        print '**** Negative Wages ****'  (+1,1)
        print ' '                         (+2,1,11)
        print '     QTD     '             (0,+4,13)
        print '     YTD     '             (0,+4,13)
        print '     YTD     '             (0,+4,13)
        print 'EmplID'                    (+1,1,11)
        print '   Gross     '             (0,+4,13)
        print 'Taxable Gross'             (0,+4,13)
        print '     Tax     '             (0,+4,13)
        position (+2)
        move 'N' to $PrintHeader
      end-if
      do Print-Negative-Wages
    when = 'CoTotal'
      do Print-Company-Totals
    when = 'FileTotal'
      move '' to $_LastCompany
      move '' to $_LastCompanyName
      do Print-File-Totals
    when = 'NoData'
      move '' to $_LastCompany
      move '' to $_LastCompanyName
      print '******  No Data Selected  ******'  (+2,) center
  end-evaluate
end-procedure

begin-procedure Print-Negative-Wages

  print &R.EmplID        (+1,1)
  print &R.Grs_QTD       (0,16) edit 99,999,999.99mi

  add &R.Grs_QTD   to #Neg_Grs_QTD

  if &TX.Balance_Qtr = 4
    print &R.TxGrs_YTD     (0,34) edit 99,999,999.99mi
    print &R.Tax_YTD       (0,52) edit 99,999,999.99mi

    add &R.TxGrs_YTD to #Neg_TxGrs_YTD
    add &R.Tax_YTD   to #Neg_Tax_YTD
  end-if


end-procedure

begin-procedure Print-Company-Totals
  if #Neg_TxGrs_QTD <> 0 or #Neg_NlGrs_QTD <> 0
    print '** Total **'      (+2,1)
    print #Neg_TxGrs_QTD     (0,16) edit 99,999,999.99mi
    print #Neg_NlGrs_QTD     (0,34) edit 99,999,999.99mi

    move 0 to #Neg_TxGrs_QTD
    move 0 to #Neg_NlGrs_QTD
  end-if

  print '**** Company Total ****'        (+7,1)
  print 'Gross QTD '                     (+2,1)
  print #Co_Grs_QTD                      (,28)   edit 999,999,999.99mi

  if #Co_TxGrs_YTD <> 0
    print 'Taxable Gross YTD  '          (+2,1)
    print #Co_TxGrs_YTD                  (,28)   edit 999,999,999.99mi
  end-if

  if #Co_Tax_YTD <> 0
    print 'Tax YTD   '                   (+2,1)
    print #Co_Tax_YTD                    (,28)   edit 999,999,999.99mi
  end-if

  print 'Employees Reported'             (+2,1)
  print #Count_S                         (,31)   edit 999,999,999
end-procedure

begin-procedure Print-File-Totals
  print '**** File Total ****'     (+3,1)
  print 'Gross QTD '               (+2,1)
  print #Tot_Grs_QTD               (,28)   edit 999,999,999.99mi

  if #Tot_TxGrs_YTD <> 0
    print 'Taxable Gross YTD  '    (+2,1)
    print #Tot_TxGrs_YTD           (,28)   edit 999,999,999.99mi
  end-if

  if #Tot_Tax_YTD <> 0
    print 'Tax YTD   '             (+2,1)
    print #Tot_Tax_YTD             (,28)   edit 999,999,999.99mi
  end-if

  print 'Employees Reported'       (+2,1)
  print #Count_F                   (,31)   edit 999,999,999

  if #Count_E <> 0
    print 'Employers Reported'     (+2,1)
    print #Count_E                  (,31)   edit 999,999,999
  end-if

  print 'Output File:  '           (+2,1)
  move 1 to #i
  if #FileExtension > 0
    while #i <= #FileExtension
      move #i to $i 099
      let $FileID = $ReportID || '.' || $i
      let $FileID = '{IMPORTPREFIX}' || $FileID || '{IMPORTSUFFIX}'
      print $FileID                  (+1,10)
      add 1 to #i
    end-while
  else
      let $FileID = $ReportID
      let $FileID = '{IMPORTPREFIX}' || $FileID || '{IMPORTSUFFIX}'
      print $FileID                  (+1,10)
  end-if
end-procedure


begin-procedure Get-Earn-Parms   !*** Checks to see if user entered any earnings on the panel

begin-SELECT

V.ERNCD

FROM PS_RC_TAX810NY V
WHERE $prcs_oprid = V.OPRID
 AND $prcs_run_cntl_id = V.RUN_CNTL_ID
end-SELECT


  let $TEMP_ERNCD = rtrim(&V.ERNCD, ' ')


    if $TEMP_ERNCD = ''
       let $Process-O-Record = 'N'
    else
       let $Process-O-Record = 'Y'
    end-if


end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'getearns.sqc'

