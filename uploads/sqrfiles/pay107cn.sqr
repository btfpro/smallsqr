!***********************************************************************
!  PAY107CN:    Import ROE Web XML                                     *
!***********************************************************************
!***********************************************************************
!                                                                      *
!Confidentiality Information:                                          *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/20:21:33:23                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  694792                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init
#Include 'canrpt.sqc'    !Get CAN variables

#define col_SIN               2
#define col_SerialNum         20
#define col_AmendedSN         34
#define col_DateIssued        53
#define col_BusNum            67
#define col_PayrollRefNum     84
#define col_FirstDayWk        103
#define col_LastDayPd         121
#define col_ROECategory       2
#define col_FileName          2
#define col_ROECount          2
#define col_Msg               10


begin-heading 6
  #Include 'stdhdgtr.sqc'

  print $Pay107CN_SIN                          (+2,{col_SIN})
  print $Pay107CN_Serial_Num                   (0,{col_SerialNum})
  print $Pay107CN_Amended_Serial_Num           (0,{col_AmendedSN})
  print $Pay107CN_Date_Issued                  (0,{col_DateIssued})
  print $Pay107CN_Bus_Num                      (0,{col_BusNum})
  print $Pay107CN_Payroll_Ref                  (0,{col_PayrollRefNum})
  print $Pay107CN_FirstDayWorked               (0,{col_FirstDayWk})
  print $Pay107CN_LastDayPaid                  (0,{col_LastDayPd})

end-heading

begin-report

  do Init-Report

  do Process-Main

  close 10

  do Reset

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report

begin-procedure Init-Report

  #ifdef PRCSSCHD
    do StdAPI-Init
  #endif

 do Initialization

end-procedure

begin-procedure Initialization

  move 'N' to $FileAtEnd

  move 'PAY107CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  do Select-Parameters
  move $RC_PAY.ROE_IMPORT_FILE to $ROE_FileName
  let $ROE_FileName =  rtrim($ROE_FileName, ' ')
  let $ROE_FileName =  '{IMPORTPREFIX}' || $ROE_FileName

  do Open-File

  move $Pay107CN_Title to $ReportTitle
  display 'IMPORT ROE WEB XML'

  let #Parse_StartPos = 1

  do Initialize-ROE-Data

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY107CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY107CN', 'TITLE_ROE_IMPORT' , $Pay107CN_Title , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'ISSUED'           , $Pay107CN_Issued  , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'PASSED'           , $Pay107CN_Passed   , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'FAILED'           , $Pay107CN_Failed   , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'REJECTED'         , $Pay107CN_Rejected , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'SIN'              , $Pay107CN_SIN , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'SERIAL_NUM'       , $Pay107CN_Serial_Num , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'AMENDED_NUM'      , $Pay107CN_Amended_Serial_Num , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'DATE_ISSUED'      , $Pay107CN_Date_Issued , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'BUS_NUM'          , $Pay107CN_Bus_Num , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'PAYROLL_REF'      , $Pay107CN_Payroll_Ref , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'FIRST_DAY_WORKED' , $Pay107CN_FirstDayWorked , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'LAST_DAY_PAID'    , $Pay107CN_LastDayPaid , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'ROE_CATEGORY'     , $Pay107CN_ROE_Category , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'BULK_FILE_NAME'   , $Pay107CN_Bulk_File_Name , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'ROE_COUNT'        , $Pay107CN_Roe_Count , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'ROE_MSG1'         , $Pay107CN_Roe_Msg1 , #dummy_width)
   do Get_Field_Information ('PAY107CN', 'ROE_MSG2'         , $Pay107CN_Roe_Msg2 , #dummy_width)

end-procedure


begin-procedure Open-File

  open $ROE_FileName as 10 for-reading record=200:fixed_nolf status = #filestat

  if #filestat != 0              !file open error
    move #filestat to $filestat 99999
    show 'File Open Error, Status: ' $filestat
    show 'Input File Name: ' $ROE_FileName
      stop
    else
      show 'Reading File ' $ROE_FileName
  end-if

end-procedure


begin-procedure Process-Main

   do Read-File
   let $ROEData_wk = $ROEData

   while 1 = 1

   if $FileAtEnd = 'Y'
     break
   else
     do Find-Full-XML-Tag
     do Find-ROE-Tag

     if $ROE_Tag = ' '

       evaluate $Full_XML_Tag
         when = '</Issued>'
         when = '</Failed>'
         when = '</Rejected>'
         when = '</Passed>'
           do Print-ROE-Category
           break
         when = '</Roe>'
           do Match-XML-Data
           if rtrim($Emplid, ' ') <> ''   and
             rtrim($Company, ' ') <> ''   and
             rtrim($WLP, ' ') <> ''       and
             rtrim($FirstDayWorked_Native, ' ') <> '' and
             rtrim($LastDayPaid_Native, ' ') <> ''

               evaluate $ROE_Status
               when = 'C'                                  ! Issued
                 do Update-ROE-Issued
                 break
               when = 'F'                                  ! Failed
               when = 'R'                                  ! Rejected
                 do Check-ROE-Exists
                 if $ROE_Found = 'Y'
                   do Update-ROE-Fail-Reject
                   do Reset-ROE-Nbr-Ins-Earns
                 end-if
                 break
               when-other
                 break
               end-evaluate
           end-if
           do Print-ROE-Detail
           do Initialize-ROE-Data
           break
         when = '</ROEHEADER>'
           move 'Y' to $FileAtEnd
           break
         when-other                                        ! ROE elements
           do Process-ROE-XML-Records
           break
       end-evaluate

     end-if
   end-if
  end-while

end-procedure


begin-procedure Read-File

  read 10 into $ROEData:200

  if #end-file = 1
    move 'Y' to $FileAtEnd
  end-if

end-procedure


!************************************************************************
!                                                                       *
! This routine parses the XML file and returns a full XML tag, i.e. < > *
! or </ >. Variable #Parse_StartPos is the pointer for parsing in       *
! the file. When a '<' or '>' cannot be found from the parse starting   *
! position, the XML file will be read in for 200 characters and append  *
! to the existing file string, and continue with the XML parse process. *
!                                                                       *
!************************************************************************

begin-procedure Find-Full-XML-Tag

  let $Full_XML_Tag        = ' '
  let #OpenTag_Loc         = 0
  let #EndTag_Loc          = 0
  let #Parse_StartPos_Save = 0
  let #Extract_Len         = 0
  let #ROEData_wk_Len      = 0

  let #Parse_StartPos_Save = #Parse_StartPos
  let #OpenTag_Loc  = instr($ROEData_wk, '<', #Parse_StartPos)

  if #OpenTag_Loc <> 0
    let #Parse_StartPos = #OpenTag_Loc

    let #EndTag_Loc = instr($ROEData_wk, '>', #Parse_StartPos)

    if #EndTag_Loc <> 0                                  ! The file string has '< >'

      let #Extract_Len      = #EndTag_Loc - #OpenTag_Loc +1
      let $Full_XML_Tag     = substr ($ROEData_wk, #OpenTag_Loc, #Extract_Len)
      let #Parse_StartPos   = #EndTag_Loc + 1            ! Positon after '>' for next parse

    else                                                 ! The file string does not contain '>'
      do Read-File
      if $FileAtEnd <> 'Y'
        let #ROEData_wk_Len = Length($ROEData_wk)
                                                         ! Extract from last parse start position
        let #Extract_Len    = #ROEData_wk_Len - #Parse_StartPos_Save + 1

        let $ROEData_wk     = substr($ROEData_wk, #Parse_StartPos_Save, #Extract_Len)
        let $ROEData_wk     = $ROEData_wk || $ROEData

        let #Parse_StartPos = 1
        let #Parse_StartPos_Save = #Parse_StartPos
        let #OpenTag_Loc    = instr($ROEData_wk, '<', #Parse_StartPos)
        let #Parse_StartPos = #OpenTag_Loc + 1
        let #EndTag_Loc     = instr($ROEData_wk, '>', #Parse_StartPos)

        if #OpenTag_Loc <> 0 and #EndTag_Loc <> 0
          let #Extract_Len      = #EndTag_Loc - #OpenTag_Loc +1
          let $Full_XML_Tag     = substr ($ROEData_wk, #OpenTag_Loc, #Extract_Len)
          let #Parse_StartPos   = #EndTag_Loc + 1        ! Positon after '>' for next parse
        end-if

      end-if
    end-if

  else                                                   ! The file string does not contain '<'

    do Read-File
    if $FileAtEnd <> 'Y'
      let #ROEData_wk_Len = Length($ROEData_wk)
      let #Extract_Len    = #ROEData_wk_Len - #Parse_StartPos  + 1
                                                         !Extract from start parse position
      let $ROEData_wk     = substr($ROEData_wk, #Parse_StartPos , #Extract_Len)
      let $ROEData_wk     = $ROEData_wk || $ROEData

      let #Parse_StartPos = 1
      let #Parse_StartPos_Save = #Parse_StartPos

      let #OpenTag_Loc    = instr($ROEData_wk, '<', #Parse_StartPos)
      let #Parse_StartPos = #OpenTag_Loc + 1
      let #EndTag_Loc     = instr($ROEData_wk, '>', #Parse_StartPos)

      if #OpenTag_Loc <> 0 and #EndTag_Loc <> 0
        let #Extract_Len      = #EndTag_Loc - #OpenTag_Loc +1
        let $Full_XML_Tag     = substr ($ROEData_wk, #OpenTag_Loc, #Extract_Len)
        let #Parse_StartPos   = #EndTag_Loc + 1          ! Positon after '>' for next parse
      end-if

    end-if

  end-if

end-procedure


begin-procedure Process-ROE-XML-Records

  let #TagSlashPosition     = 0
  let #Element_Len          = 0
  let $Open_XML_Tag         = ' '
  let $Close_XML_Tag        = ' '
  let $Element              = ' '

  let $Open_XML_Tag = $Full_XML_Tag
  evaluate $Full_XML_Tag
    when = '<SerialNumber>'
    when = '<DateIssued>'
    when = '<PayrollRefNumber>'
    when = '<BusinessNumber>'
    when = '<SIN>'
    when = '<FirstDayWorked>'
    when = '<LastDayForWhichPaid>'
    when = '<FinalPayPeriodEndingDate>'
    when = '<TotalInsurableEarnings>'
    when = '<AmendedSerialNumber>'

      let $Open_XML_Tag   = ltrim (replace($Open_XML_Tag, '<' , ' '),' ')
      let $Open_XML_Tag   = rtrim (replace($Open_XML_Tag, '>' , ' '),' ')

      do Find-Full-XML-Tag                ! Find Full XML Close Tag
      let $Close_XML_Tag     = $Full_XML_Tag

      let #TagSlashPosition = instr($Close_XML_Tag, '/', 1)
      if #TagSlashPosition  =  2
        let $Close_XML_Tag  = ltrim (replace($Close_XML_Tag, '<' , ' '),' ')
        let $Close_XML_Tag  = ltrim (replace($Close_XML_Tag, '/' , ' '),' ')
        let $Close_XML_Tag  = rtrim (replace($Close_XML_Tag, '>' , ' '),' ')
      end-if

      if $Open_XML_Tag = $Close_XML_Tag
        let #Element_Len = #OpenTag_Loc - #Parse_StartPos_Save
        let $Element     = substr($ROEData_wk, #Parse_StartPos_Save , #Element_Len)

        let $Element = replace($Element, '&amp;'  , '&')
        let $Element = replace($Element, '&lt;'   , '<')
        let $Element = replace($Element, '&quot;' , '"')
        let $Element = replace($Element, '&gt;'   , '>')
        let $Element = replace($Element, '&apos;' , '''')

        do Extract-ROE-Data
      end-if

      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Find-ROE-Tag

  let $ROE_Tag   = ' '

  let #String_Loc  = instr($Full_XML_Tag, 'Issued Count', 1)
  if #String_Loc <> 0
    let $ROE_Tag   = '<Issued Count'
  end-if

  if $ROE_Tag   = ' '
    let #String_Loc  = instr($Full_XML_Tag, 'Passed Count', 1)
    if #String_Loc <> 0
      let $ROE_Tag   = '<Passed Count'
    end-if
  end-if

  if $ROE_Tag   = ' '
    let #String_Loc  = instr($Full_XML_Tag, 'Failed Count', 1)
    if #String_Loc <> 0
      let $ROE_Tag   = '<Failed Count'
    end-if
  end-if

  if $ROE_Tag   = ' '
    let #String_Loc  = instr($Full_XML_Tag, 'Rejected Count', 1)
    if #String_Loc <> 0
      let $ROE_Tag   = '<Rejected Count'
    end-if
  end-if

  if $ROE_Tag   = ' '
    let #String_Loc  = instr($Full_XML_Tag, 'BulkFileName', 1)
    if #String_Loc <> 0
      let $ROE_Tag   = '<Roe BulkFileName'
    end-if
  end-if

  if $ROE_Tag   <> ' '
    do Extract-Tag-Attribute
  end-if

end-procedure


begin-procedure Extract-Tag-Attribute

  Evaluate $ROE_Tag
    when = '<Issued Count'
      do Find-Tag-Value
      move $TagValue  to $Count
      let $ROE_Category = $Pay107CN_Issued
      let $ROE_Status = 'C'
      break
    when = '<Failed Count'
      do Find-Tag-Value
      move $TagValue  to $Count
      let $ROE_Category = $Pay107CN_Failed
      let $ROE_Status = 'F'
      break
    when = '<Rejected Count'
      do Find-Tag-Value
      move $TagValue  to $Count
      let $ROE_Category = $Pay107CN_Rejected
      let $ROE_Status = 'R'
      break
    when = '<Passed Count'
      do Find-Tag-Value
      move $TagValue  to $Count
      let $ROE_Category = $Pay107CN_Passed
      let $ROE_Status = 'P'
      break
    when = '<Roe BulkFileName'
      do Find-Tag-Value
      move $TagValue  to $FileName
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Find-Tag-Value

  let #BegValuePos = 0
  let #EndValuePos = 0
  let #ValueLen    = 0
  let $TagValue    = ' '

  let #BegValuePos = (instr($Full_XML_Tag , '"', 1)) +1
  let #EndValuePos = (instr($Full_XML_Tag , '"', #BegValuePos)) - 1
  let #ValueLen    = #EndValuePos - #BegValuePos +1

  let $TagValue    = substr($Full_XML_Tag, #BegValuePos, #ValueLen)

end-procedure


begin-procedure Extract-ROE-Data

  let $Element_Tag = ' '

  let $Element_Tag = replace($Open_XML_Tag, '<', ' ')
  let $Element_Tag = replace($Open_XML_Tag, '>', ' ')
  let $Element_Tag = ltrim($Open_XML_Tag, ' ')
  let $Element_Tag = rtrim($Open_XML_Tag, ' ')

  evaluate $Element_Tag
    when = 'SerialNumber'
      let $SerialNumber                = $Element
      break
    when = 'DateIssued'
      let $DateIssued                  = $Element
      break
    when = 'PayrollRefNumber'
      let $PayrollRefNumber            = $Element
      break
    when = 'BusinessNumber'
      let $BusinessNumber              = $Element
      break
    when = 'SIN'
      let $SIN                         = $Element
      break
    when = 'FirstDayWorked'
      let $FirstDayWorked              = $Element
      break
    when = 'LastDayForWhichPaid'
      let $LastDayPaid                 = $Element
      break
    when = 'FinalPayPeriodEndingDate'
      let $FinalPayPeriodEndDt         = $Element
      break
    when = 'TotalInsurableEarnings'
      let $TotalInsEarns               = $Element
      break
    when = 'AmendedSerialNumber'
      let $AmendedSerialNumber         = $Element
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Initialize-ROE-Data

  let $TypeOfData           = ' '
  let $SerialNumber         = ' '
  let $DateIssued           = ' '
  let $PayrollRefNumber     = ' '
  let $BusinessNumber       = ' '
  let $SIN                  = ' '
  let $FirstDayWorked       = ' '
  let $LastDayPaid          = ' '
  let $FinalPayPeriodEndDt  = ' '
  let $TotalInsEarns        = ' '
  let $AmendedSerialNumber  = ' '

end-procedure


begin-procedure Match-XML-Data

  do Match-Employe-Id
  do Match-Company
  do Convert-ROE-Dates

end-procedure


begin-procedure Match-Employe-Id

  let $Emplid = ' '

  let $SIN    = rtrim($SIN, ' ')

begin-select
PN.EMPLID

  let $Emplid = rtrim(&PN.EMPLID, ' ')

FROM PS_PERS_NID PN
WHERE PN.COUNTRY          = {NID_COUNTRY}
  AND PN.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.NATIONAL_ID      = $SIN

end-SELECT
end-procedure


begin-procedure Match-Company

  let $Company = ' '
  let $WLP     = ' '
  let $BusinessNumber = rtrim($BusinessNumber, ' ')

begin-select
W.COMPANY
W.WAGE_LOSS_PLAN

  let $Company = rtrim(&W.COMPANY, ' ')
  let $WLP     = rtrim(&W.WAGE_LOSS_PLAN, ' ')

FROM PS_WAGELS_PLAN_TBL  W
WHERE W.CANADA_BN = $BusinessNumber
  AND W.EFFDT =
      (SELECT MAX(W1.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL W1
       WHERE  W1.COMPANY        = W.COMPANY
         AND  W1.WAGE_LOSS_PLAN = W.WAGE_LOSS_PLAN)

end-SELECT
end-procedure


begin-procedure Convert-ROE-Dates

  let $FirstDayWorked_in           = ' '
  let $LastDayPaid_in              = ' '
  let $FirstDayWorked_Native       = ' '
  let $LastDayPaid_Native          = ' '
  let $DateIssued_DDMMYYYY         = ' '
  let $FirstDayWk_DDMMYYYY         = ' '
  let $LastDayPd_DDMMYYYY          = ' '

  if rtrim($FirstDayWorked, ' ') <> ''

    let $DD   = substr($FirstDayWorked, 1, 2)
    let $MM   = substr($FirstDayWorked, 3, 2)
    let $YYYY = substr($FirstDayWorked, 5, 4)

    let $FirstDayWorked_in = $YYYY || '-' ||  $MM  || '-' ||  $DD

    do Convert-From-DTU-Date($FirstDayWorked_in, $FirstDayWorked_Native)

    let $FirstDayWk_DDMMYYYY  = $DD || '-' ||  $MM  || '-' ||  $YYYY

  end-if

  if rtrim($LastDayPaid, ' ') <> ''

    let $DD   = substr($LastDayPaid, 1, 2)
    let $MM   = substr($LastDayPaid, 3, 2)
    let $YYYY = substr($LastDayPaid, 5, 4)

    let $LastDayPaid_in = $YYYY || '-' ||  $MM  || '-' ||  $DD

    do Convert-From-DTU-Date($LastDayPaid_in, $LastDayPaid_Native)

    let $LastDayPd_DDMMYYYY  = $DD || '-' ||  $MM  || '-' ||  $YYYY

  end-if

  if rtrim($DateIssued, ' ') <> ''

    let $DD   = substr($DateIssued, 1, 2)
    let $MM   = substr($DateIssued, 3, 2)
    let $YYYY = substr($DateIssued, 5, 4)

    let $DateIssued_DDMMYYYY  = $DD || '-' ||  $MM  || '-' ||  $YYYY

  end-if

end-procedure


begin-procedure Update-ROE-Issued

  let $SerialNumber         = rtrim($SerialNumber, ' ')
  let $AmendedSerialNumber  = rtrim($AmendedSerialNumber, ' ')

  if rtrim($AmendedSerialNumber, ' ') = ''
    let $AmendedSerialNumber = ' '
  end-if
begin-SQL
UPDATE PS_ROE SET ROE_SERIAL_NUM  =  $SerialNumber ,
                  ROE_PROCESS     =  $ROE_Status   ,
                  AMEND_ROE_SN    =  $AmendedSerialNumber
WHERE EMPLID            =  $Emplid
  AND COMPANY           =  $Company
  AND WAGE_LOSS_PLAN    =  $WLP
  AND FIRST_DATE_WORKED =  $FirstDayWorked_Native
  AND LAST_DATE_WORKED  =  $LastDayPaid_Native
  AND ROE_NBR   <> ' '
  AND ROE_PROCESS = 'X'

end-SQL

end-procedure


begin-procedure Update-ROE-Fail-Reject

begin-SQL
UPDATE PS_ROE SET ROE_PROCESS     =  $ROE_Status ,
                  ROE_NBR         =  ' '
WHERE EMPLID            =  $Emplid
  AND COMPANY           =  $Company
  AND WAGE_LOSS_PLAN    =  $WLP
  AND FIRST_DATE_WORKED =  $FirstDayWorked_Native
  AND LAST_DATE_WORKED  =  $LastDayPaid_Native
  AND ROE_NBR   <> ' '
  AND ROE_PROCESS = 'X'

end-SQL

end-procedure


begin-procedure Check-ROE-Exists

  let $ROE_Found  = 'N'

begin-SELECT
FR.EMPLID
FR.ROE_NBR

  move 'Y' to $ROE_Found

FROM PS_ROE FR
WHERE FR.EMPLID            =  $Emplid
  AND FR.COMPANY           =  $Company
  AND FR.WAGE_LOSS_PLAN    =  $WLP
  AND FR.FIRST_DATE_WORKED =  $FirstDayWorked_Native
  AND FR.LAST_DATE_WORKED  =  $LastDayPaid_Native
  AND FR.ROE_NBR   <> ' '
  AND FR.ROE_PROCESS = 'X'
end-SELECT
end-procedure


begin-procedure Reset-ROE-Nbr-Ins-Earns

begin-SQL
UPDATE PS_INS_EARNS_BAL
SET ROE_NBR             = ' '
WHERE EMPLID            = &FR.EMPLID
  AND ROE_NBR           = &FR.ROE_NBR

end-SQL

end-procedure


begin-procedure Print-ROE-Detail

  print $SIN                  (+1,{col_SIN})          edit xxx-xxx-xxx
  print $SerialNumber         (0,{col_SerialNum})
  print $AmendedSerialNumber  (0,{col_AmendedSN})
  print $DateIssued_DDMMYYYY  (0,{col_DateIssued})
  print $BusinessNumber       (0,{col_BusNum})
  print $PayrollRefNumber     (0,{col_PayrollRefNum})
  print $FirstDayWk_DDMMYYYY  (0,{col_FirstDayWk})
  print $LastDayPd_DDMMYYYY   (0,{col_LastDayPd})

end-procedure


begin-procedure Print-ROE-Category

  print $Pay107CN_ROE_Category        (+2,{col_ROECategory})
  print $ROE_Category                 (0, 28)
  print $Pay107CN_Bulk_File_Name      (+2,{col_FileName})
  print $FileName                     (0, 28)
  print $Pay107CN_Roe_Count           (+2,{col_ROECount})
  print $Count                        (0, 28)

  move $Count to #ROECount

  if $ROE_Status = 'P' and #ROECount > 0
    print $Pay107CN_Roe_Msg1          (+2,{col_Msg})
    print $Pay107CN_Roe_Msg2          (0, +2)
  end-if

  NEW-PAGE

  let $ROE_Category = ' '
  let $FileName     = ' '
  let $Count        = ' '
  let $ROE_Status   = ' '
  let #ROECount     = 0

end-procedure


#Include 'datemath.sqc'  !Routines for date comparisons
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'reset.sqc'     !Reset printer procedure
#ifdef PRCSSCHD
#Include 'stdapi.sqc'    !Update Process API
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
