!------------------------------------------------------------------------------------------------!
! Report Name: EO9030 -- Reciprocal and Cross-Rate Generation Report    !
!------------------------------------------------------------------------------------------------!
! Confidentiality Information:                                                               !
!                                                                                            !
! This module contains confidential and proprietary information                              !
! of Oracle; it is not to be copied, reproduced, or transmitted                              !
! in any form, by any means, in whole or in part, nor is it to                               !
! be used for any purpose other than that for which it is                                    !
! expressly provided under the applicable license agreement.                                 !
!                                                                                            !
! Copyright (C) 2006 Oracle. All Rights Reserved.                                            !
!                                                                                            !
!                                                                                            !
!                                                                                            !
!                $Date:  2006/04/13:11:48:10                           !
!             $Release:  Z89EO                                         !
!            $Revision:  103                                           !
!                                                                                            !
!------------------------------------------------------------------------------------------  !
! Descr:                                                                                                                   !
!----------------------------------------------------------------------------------------------- !
! Debug: SELECT:         -debuga  Select Statements/SQL                               !
!        FETCHED ROWS:   -debuga  Resulting Rows Fetch                            !
!        CALCULATION:    -debuga  Calcalations                                              !
!        DATA:           -debuga  Start of Procedure/Sections                             !
!                                                                                                                               !
!---------------------------------------------------------------------------------------------   !


#include 'setenv.sqc'    ! Set Environment Procedure
#include 'setup32.sqc'   ! Printer and page-size initialization
#include 'tranctrl.sqc'  ! Tools transaction control module
#include 'sqrtrans.sqc'  ! Set Translations
#include 'eoactive.sqc'
#include 'eoparam.sqc'
#include 'eoprcsnm.sqc'

!----------------------------------------------------------------------!
!    Report Columne Definition                                         !
!----------------------------------------------------------------------!
#define HDG_COL          25
#define HDG_COL2        65

#define 1_EFFDT           1
#define 1_FROM          13
#define 1_TO                18
#define 1_RATEM       24
#define 1_RATED        42

#define 2_EFFDT          60
#define 2_FROM           72
#define 2_TO                 77
#define 2_RATEM        83
#define 2_RATED        101
#define 2_RATEnote      118

#define 3_EFFDT          120
#define 3_FROM           132
#define 3_TO                 137
#define 3_RATEM        143
#define 3_RATED         161
#define 3_RATEnote     178

!----------------------------------------------------------------------!
!    Max Width                                                         !
!----------------------------------------------------------------------!

#define MW_EFFDT        10
#define MW_FROM          5
#define MW_TO            5
#define MW_RATEM        16
#define MW_RATED        16

!----------------------------------------------------------------------!
!    Report Heading Information                                        !
!----------------------------------------------------------------------!

BEGIN-heading 14

IF $generate_report='Y'

  let $reportid='EO9030'
  move $xv_title to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '


  if $stdhdg_appended = ''
     do Append_Report_Translation ('STDHDGTR')
     do Get_Field_Information ('STDHDGTR', 'STDHDG_END_REP',
                               $stdhdg_end_rep, #dummy_width)
     let $stdhdg_appended = 'Y'
  end-if

  do Add_Report_Translation('EOHDG01', $prcs_language_cd)


  do Get_Field_Information('EOHDG01','LOGO', $xvc_logo, #xfwc_logo)
  do Get_Field_Information('EOHDG01','REP_ID',  $xvc_rep_id, #xfwc_rep_id)
  do Get_Field_Information('EOHDG01','RUN_DTE', $xvc_run_dte, #xfwc_run_dte)
  do Get_Field_Information('EOHDG01','RUN_TIME', $xvc_run_time, #xfwc_run_time)
  do Get_Field_Information('EOHDG01','PAGE_NBR', $xvc_page_nbr, #xfwc_page_nbr)

  print '          '      (1,1)
  print $xvc_logo          ()          center
  let $hdg01_rep_id = $xvc_rep_id || '  '
  print $hdg01_rep_id     (+1,1, #xfwc_rep_id)
  print $ReportID         (0,13)
  uppercase $ReportTitle
  print $ReportTitle      ()          center
 
 let #RptCol = {ColR} - 12


  let $hdg01_pg_nbr = $xvc_page_nbr || '  '
  print $hdg01_pg_nbr     (0,#RptCol, #xfwc_page_nbr + 2)
  print #page-count       ()          edit 88888888
  let $hdg01_run_dte = $xvc_run_dte || ' '
  print $hdg01_run_dte    (+1,#RptCol, #xfwc_run_dte + 1)
  print $ReportDate       ()
  let $hdg01_run_time = $xvc_run_time || ' '
  print $hdg01_run_time   (+1,#RptCol, #xfwc_run_time + 1)
  print $ReportTime       ()

#IFdef debuga
  show '********************************'
  show 'ReportColRight : ' #RptCol
  show 'MaxWidthReportDate:  ' #xfwc_run_dte
  show '********************************'
#ENDIF

!----------------------------------------------------------------------!

!Common From
  let $cfc = $xv_com_fm_currency || ' '
  print $cfc                                                    (+1,1,{HDG_COL})
  print $rc_from_cur                                            (,+2,10)

!Process Instance
  let $procinst = $xv_proc_inst || ' '
  print $procinst                                               (,{HDG_COL2},{HDG_COL})
  print $prcs_process_instance                                  (,+2,5)

!Rate Type
  let $ratetype = $xv_rate_ty || ' '
  print $ratetype                                               (+1,1,{HDG_COL})
  print $rc_from_type                                           (,+2,5)

!OverRide Rate Flag
  let $upr = $xv_updte_prev_rate || ' '
  print $upr                                                    (,{HDG_COL2},{HDG_COL})
  print $rate_override                                          (,+2,10)

!Effective Date
  print $xv_rate_effdt                                          (+1,1,{HDG_COL})
  do Format-DateTime($AsOfDate, $out, {DEFDATE}, '', '')
  print $out                                                    (,+2)

!Term
  let $Prnt_Term = $xv_Rc_Term || ' '
  print $Prnt_Term                                              (+1,1,{HDG_COL})
  print #Rc_Term                                                (,+2,5)

!Rate Index
  let $Prnt_Rc_Rt_Rate_Index = $xv_Rc_Rt_Rate_Index || ' '
  print $Prnt_Rc_Rt_Rate_Index                                   (+1,1,{HDG_COL})
  print $Rc_Rt_Rate_Index                                        (,+2,5)

  print $xv_msg1                                                (,{HDG_COL2})
END-IF

!-----------    Dave Bergloff    -------------!

if $reciprocal_only = 'Y'

   !Having $reciprocal_only = 'Y' ensures print-rec-header is executed only once per loop.
   print $xv_rec_com                                             (+1,1,{HDG_COL})
   print $Reciprocal_only                                        (,+2,10)

   do print-rec-header
   move 'N' to $reciprocal_only

else

  if $Cross_Rate = 'Y'
     print $xv_CROSS_RTE_CAL                                    (+1,1,{HDG_COL})
     print $Cross_Rate                                          (,+2,10)
  end-if

  if $Tria_Rate = 'Y'
     print $xv_tria_com                                         (+1,1,{HDG_COL})
     print $Tria_Rate                                           (,+2,10)
  end-if

   do print-x-header
end-if

END-heading

!----------------------------------------------------------------------!
BEGIN-report
!----------------------------------------------------------------------!
!Add to Translation record
  let $AutoX = 'N'
  let #rounding = 8
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $AsOfDate = ''
      move $AsOfToday to $AsOfDate
  end-if
  do Reset
  do Commit-Transaction
  do Update-Prcs-Run-Status
END-report

!----------------------------------------------------------------------!
begin-procedure Init-Report
!----------------------------------------------------------------------!
  let $calc = 'N'
  let #NEXT=0
  let #FIRSTCROSSRATE = 0

  do Define-Prcs-Vars
  do Get-Run-Control-Parms

  do get-xlat-fields

  if $prcs_process_instance = ''
    do Ask-Request-Keys
  end-if

  do Get-values

end-procedure

!----------------------------------------------------------------------!
! Procedure: Ask-Request-Keys                                          !
! Desc:      When run this report from outside of Process Scheduler,   !
!            prompt user for OprID and Run_Cntl_ID                     !
!----------------------------------------------------------------------!

begin-procedure Ask-Request-Keys

  input $prcs_OprID maxlen=8 'Enter Operator ID'
  uppercase $prcs_OprID
  let $prcs_OprID = RTRIM($prcs_OprID,' ')

  input $prcs_Run_Cntl_ID maxlen=30 'Enter Run Control ID'
  let $prcs_Run_Cntl_ID = RTRIM($prcs_Run_Cntl_ID,' ')

end-procedure

!----------------------------------------------------------------------!
! Procedure: Get-Values                                                !
! Descr:     Takes values selected from the run control table and      !
!            calls a masking routine.  This routine is called from     !
!            inside the Get-Run-Control routine.                       !
!----------------------------------------------------------------------!
begin-procedure Get-Values

#IFdef debuga
   show '<<SELECT: Get-Values >>*******************'
   show  '$prcs_process_instance = '   $prcs_process_instance
   show 'SELECT                       '
   show 'FROM_CURRENCY                '
   show ',CUR_RT_TYPE                 '
   show ',AS_OF_DATE                  '
   show ',RT_RATE_INDEX               '
   show ',TERM                        '
   show ',GENERATE_RECIP              '
   show ',OVERRIDE_CUR_RT             '
   show ',GENERATE_REPORT             '
   show ',GENERATE_CROSS_RT           '
   show ',RATE_TRIANGULATE            '
   show 'FROM PS_RUN_EO_RT_GEN'
   show 'WHERE OPRID = ' ''''$prcs_oprid''''
   show '  AND RUN_CNTL_ID = ' ''''$prcs_run_cntl_id''''
   show '********************************************'
#ENDIF

BEGIN-SELECT   ON-ERROR=SQL-Error
RUN_EO_RT_GEN.RT_RATE_INDEX
RUN_EO_RT_GEN.TERM
RUN_EO_RT_GEN.FROM_CURRENCY
RUN_EO_RT_GEN.CUR_RT_TYPE
RUN_EO_RT_GEN.AS_OF_DATE
RUN_EO_RT_GEN.GENERATE_RECIP
RUN_EO_RT_GEN.OVERRIDE_CUR_RT
RUN_EO_RT_GEN.GENERATE_REPORT
RUN_EO_RT_GEN.GENERATE_CROSS_RT
RUN_EO_RT_GEN.RATE_TRIANGULATE

 #IFdef debuga
   show '<<FETCHED ROWS:Get-Values >> * * * * * * *'
   show '&RUN_EO_RT_GEN.FROM_CURRENCY     =' &RUN_EO_RT_GEN.FROM_CURRENCY
   show '&RUN_EO_RT_GEN.CUR_RT_TYPE       =' &RUN_EO_RT_GEN.CUR_RT_TYPE
   show '&RUN_EO_RT_GEN.AS_OF_DATE        =' &RUN_EO_RT_GEN.AS_OF_DATE
   show '&RUN_EO_RT_GEN.RT_RATE_INDEX     =' &RUN_EO_RT_GEN.RT_RATE_INDEX
   show '&RUN_EO_RT_GEN.TERM              =' &RUN_EO_RT_GEN.TERM
   show '&RUN_EO_RT_GEN.GENERATE_RECIP    =' &RUN_EO_RT_GEN.GENERATE_RECIP
   show '&RUN_EO_RT_GEN.OVERRIDE_CUR_RT   =' &RUN_EO_RT_GEN.OVERRIDE_CUR_RT
   show '&RUN_EO_RT_GEN.GENERATE_REPORT   =' &RUN_EO_RT_GEN.GENERATE_REPORT
   show '&RUN_EO_RT_GEN.GENERATE_CROSS_RT =' &RUN_EO_RT_GEN.GENERATE_CROSS_RT
   show '&RUN_EO_RT_GEN.RATE_TRIANGULATE  =' &RUN_EO_RT_GEN.RATE_TRIANGULATE
   show '* * * * * * * * * * * * * * * * * * * * * *'
 #ENDIF

   let $Rc_From_Cur      = RTRIM(&RUN_EO_RT_GEN.FROM_CURRENCY, ' ')
   let $Rc_From_Type     = RTRIM(&RUN_EO_RT_GEN.CUR_RT_TYPE, ' ')
   let $AsOfDate         = &RUN_EO_RT_GEN.AS_OF_DATE
   let $Rc_Rt_Rate_Index = RTRIM(&RUN_EO_RT_GEN.RT_RATE_INDEX, ' ')
   let #Rc_Term          = &RUN_EO_RT_GEN.TERM
   let $Reciprocal_Only  = RTRIM(&RUN_EO_RT_GEN.GENERATE_RECIP, ' ')
   let $Rate_Override    = RTRIM(&RUN_EO_RT_GEN.OVERRIDE_CUR_RT, ' ')
   let $Generate_Report  = RTRIM(&RUN_EO_RT_GEN.GENERATE_REPORT, ' ')
   let $Cross_Rate       = RTRIM(&RUN_EO_RT_GEN.GENERATE_CROSS_RT, ' ')
   let $Tria_Rate        = RTRIM(&RUN_EO_RT_GEN.RATE_TRIANGULATE,' ')

   !Set Insert defaults from RC
      let $RecIns_Rt_Rate_Index = $rc_Rt_Rate_Index
      let #RecIns_Term          = #Rc_Term
      let $RecIns_Rt_Type       = $Rc_From_Type
      let $RecIns_Effdt         = $AsOfDate

   IF $reciprocal_only='Y'
         do Create-Reciprocal-Array
         do Load-Reciprocal-Array
         do Calc-Reciprocal
   END-IF

   IF $cross_rate='Y'
      OR $Tria_Rate = 'Y'
       do  Get-cross-rate-rcvalues
   END-IF

FROM PS_RUN_EO_RT_GEN RUN_EO_RT_GEN
WHERE RUN_EO_RT_GEN.OPRID               = $prcs_oprid
  AND RUN_EO_RT_GEN.RUN_CNTL_ID         = $prcs_run_cntl_id

end-SELECT

!Insert Batch parm Record Once

  IF $Ins_BatchPub_Parm = 'Y'
     do BatchPub
  END-IF

end-procedure

!**RECIPROCAL PROCESSING**!
!----------------------------------------------------------------------!
BEGIN-procedure Create-Reciprocal-Array
!----------------------------------------------------------------------!
#IFdef debuga
        show '**Create-Reciprocal-Array, Currency_Data: REC_TO_CUR, REC_RATE_MULT, REC_RATE_DIV **'
#ENDIF

  create-array name=Currency_Data size=32041
         field=REC_TO_CUR:char
         field=REC_RATE_MULT:number
         field=REC_RATE_DIV:number
         field=REC_EFFDT:char
END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Load-Reciprocal-Array
!----------------------------------------------------------------------!
! Only for current date

#IFdef debuga
   show '<<SELECT: Load-Reciprocal-Array>>=============='
   show 'SELECT                       '
   show 'TO_CUR                       '
   show ',RATE_MULT                   '
   show ',RATE_DIV                    '
   show ',EFFDT                    '
   show 'FROM PS_RT_RATE_TBL          '
   show 'WHERE RT_RATE_INDEX =    '     '''' $Rc_RT_RATE_INDEX ''''
   show '  AND TERM          =    '     #Rc_TERM
   show '  AND RT_TYPE       =    '     '''' $Rc_From_Type ''''
   show '  AND EFFDT         =    '     '''' $AsOfDate ''''
   show '  AND FROM_CUR      =    '     '''' $Rc_From_Cur ''''
   show '  AND FROM_CUR      <>   '     'TO_CUR'
   show 'ORDER BY TO_CUR          '
   show '================================================'
#ENDIF

let #RateDiv = 1
let #RepR75=0

BEGIN-select      ON-ERROR=SQL-Error               !loops=1
RT1.TO_CUR
RT1.RATE_MULT
RT1.RATE_DIV
RT1.EFFDT

   let #RepR75=#RepR75+1

   #IFdef debuga
      show '<<FETCHED ROWS: Load-Reciprocal-Array>>= = = ='
      show 'rep                  = ' #RepR75
      show '&RT1.TO_CUR          = ' &RT1.TO_CUR
      show '&RT1.RATE_MULT       = ' &RT1.RATE_MULT
      show '&RT1.RATE_DIV        = ' &RT1.RATE_DIV
      show '= = = = = = = = = = = = = = = = = = = = = = = ='
   #ENDIF

   PUT  &RT1.TO_CUR
        &RT1.RATE_MULT
        &RT1.RATE_DIV
        &RT1.EFFDT
   INTO CURRENCY_DATA(#RepR75)
        REC_TO_CUR
        REC_RATE_MULT
        REC_RATE_DIV
        REC_EFFDT

FROM PS_RT_RATE_TBL RT1
WHERE RT1.RT_RATE_INDEX =    $Rc_RT_RATE_INDEX
  AND RT1.TERM          =    #Rc_TERM
  AND RT1.RT_TYPE       =    $Rc_From_Type
  AND RT1.FROM_CUR      =    $Rc_From_Cur
  AND RT1.FROM_CUR      <>   RT1.TO_CUR         !From and To not equal
  AND RT1.EFFDT         =    $AsOfDate

ORDER BY RT1.TO_CUR

END-select

END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Calc-Reciprocal
!----------------------------------------------------------------------!
#IFdef debuga
        display '**Calc-Reciprocal**'
#ENDIF

let #recget = 1

WHILE #recget < (#RepR75 + 1)

   get $recg_to_cur
       #recg_rate_mult
       #recg_rate_div
       $recg_effdt
   from CURRENCY_DATA(#recget)
       REC_TO_CUR
       REC_RATE_MULT
       REC_RATE_DIV
       REC_EFFDT

  let #recget = #recget + 1

       !Reverse From/To Currency
          let $RecIns_From_Cur      = $recg_to_cur
          let $RecIns_To_Cur        = $Rc_From_Cur
          let #R_rate_mult          = #recg_rate_mult
          let #R_rate_div           = #recg_rate_div

       do Generic-Calc-Reciprocal

       IF $calc = 'Y'
          let $1_EFFDT = $RecIns_effdt
          let $2_EFFDT = $RecIns_effdt
          let $Print_Rec = 'Y'
          do Check-Rate-Exists
       END-IF

END-WHILE

new-page

END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Generic-Calc-Reciprocal
!----------------------------------------------------------------------!
#IFdef debuga
        display '**Generic-Calc-Reciprocal**'
#ENDIF

       do Check-Quote-Method-Exits
       IF $QuoteExist = 'N'
          !**RM=1/(RM1/RD1)**!
             let #RecIns_Rate_Mult     = (1/(#R_rate_mult/#R_rate_div))
          !RD1=1
             let #RecIns_Rate_Div      = 1

          let $calc = 'Y'

                #IFdef debuga
                   show '<<CALCULATION: Calc-Reciprocal >> = = = ='
                   show 'IF $QuoteExist = N'
                   show 'RM       = 1/(RM1     /RD1     )'
                   show #RecIns_Rate_Mult    ' =(1/(' #R_rate_mult '/' #R_rate_div '))'
                   show 'RD1      = 1'
                   show #RecIns_Rate_Div     ' = ' '1'
                   show '= = = = = = = = = = = = = = = = = = = = ='
                #ENDIF
       END-IF

       IF $QuoteExist = 'Y'
          !**RM=RD1, RD=RM1)**!
          !RM=RD1
             let #RecIns_Rate_Mult     = #R_rate_div
          !RD1=RM1
             let #RecIns_Rate_Div      = #R_rate_mult
          let $calc = 'Y'
                #IFdef debuga
                   show '<<CALCULATION: Calc-Reciprocal>> = = = ='
                   show 'IF $QuoteExist = Y'
                   show 'RM      = RD1'
                   show #RecIns_Rate_Mult    ' = ' #R_rate_div
                   show 'RD1       = RM1'
                   show #RecIns_Rate_Div     ' = ' #R_rate_mult
                   show '= = = = = = = = = = = = = = = = = = = = ='
                #ENDIF

       END-IF

END-procedure


!----------------------------------------------------------------------!
BEGIN-procedure print-rec-header
!----------------------------------------------------------------------!
#IFdef debuga
        display '**print-rec-header**'
#ENDIF
 
   if $generate_report   ='Y'

     !print ' ' (+1,1,1)
     !print $xv_rec_com                                             (+1,1,{HDG_COL})
     !print $Reciprocal_only                                        (,+2,10)

     let   $orte        = '<-------------------- '   || $xv_org_rate   ||' -------------------->'
     let   $recip       = '<---------------------- ' || $xv_reciprocal ||' --------------------->'
     print $orte                                                   (+2,1,58)
     print $recip                                                  (,{2_EFFDT},58)

     print $xv_effdt                                               (+1,{1_EFFDT}, {MW_EFFDT})   underline
     print $xv_from                                                (,{1_FROM}, {MW_FROM})       underline

     let   $to_txt      = $xv_to      || '  '
     let   $Rate_txtM   = $xv_rateM   || '             '
     let   $Rate_txtD     = $xv_rateD || '             '
     print $to_txt                                                 (,{1_TO}, {MW_TO})           underline
     print $rate_txtM                                              (,{1_RATEM},16)              underline
     print $rate_txtD                                              (,{1_RATED},16)              underline

     print $xv_effdt                                               ( ,{2_EFFDT}, {MW_EFFDT})    underline
     print $xv_from                                                (,{2_FROM}, {MW_FROM})       underline
     print $to_txt                                                 (,{2_TO}, {MW_TO})           underline
     print $rate_txtM                                              (,{2_RATEM},16)              underline
     print $rate_txtD                                              (,{2_RATED},16)              underline

   end-if

end-procedure

!**CROSS/TRIANGULATED PROCESSING**!
!----------------------------------------------------------------------!
begin-procedure Get-cross-rate-rcvalues
!----------------------------------------------------------------------!
#IFdef debuga
   show '<<SELECT: Get-cross-rate-rcvalues >>*******************'
   show 'SELECT                        '
   show 'FROM_CUR                      '
   show ',TO_CUR                       '
   show 'FROM PS_RUN_EO_RT_GEN_D       '
   show 'WHERE OPRID = '               '''' $prcs_oprid ''''
   show '  AND RUN_CNTL_ID = '         '''' $prcs_run_cntl_id ''''
   show '*******************************************************'
#ENDIF

!David Bergloff -- commented out call to print-x-header
! do print-x-header

BEGIN-SELECT        ON-ERROR=SQL-Error

RUN_EO_RT_GEN_D.FROM_CUR
RUN_EO_RT_GEN_D.TO_CUR

        let $rc_cross_from_cur  = RTRIM(&RUN_EO_RT_GEN_D.FROM_CUR, ' ')
        let $rc_cross_to_cur    = RTRIM(&RUN_EO_RT_GEN_D.TO_CUR, ' ')

             #IFdef debuga
                show '<<FETCHED ROWS:Get-cross-rate-rcvalues >> * * * *'
                show '&RUN_EO_RT_GEN_D.FROM_CUR = ' &RUN_EO_RT_GEN_D.FROM_CUR
                show '&RUN_EO_RT_GEN_D.TO_CUR   = ' &RUN_EO_RT_GEN_D.TO_CUR
                show '* * * * * *  * * * * * * * * * * * * * * * * * * *'
              #ENDIF

                do Create-Cross-Array75
                do Load-75CR-Array
                do create-cross-rate75
                CLEAR-ARRAY NAME=CURRENCY_DATA

FROM PS_RUN_EO_RT_GEN_D RUN_EO_RT_GEN_D
WHERE RUN_EO_RT_GEN_D.OPRID               = $prcs_oprid
  AND RUN_EO_RT_GEN_D.RUN_CNTL_ID         = $prcs_run_cntl_id

end-SELECT
end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure print-x-header
!----------------------------------------------------------------------!
#IFdef debuga
        display '**print-X-header**'
#ENDIF

IF $generate_report   ='Y'

  let $A = '<-------------------- ' || $xv_frm_rte_a ||' --------------------->'
  let $B = '<--------------------- ' || $xv_to_rte_b || ' ---------------------->'
  let $C = '<------------------- ' || $xv_new_rte ||  ' ------------------->'

  print $A                                                      (+2,{1_EFFDT},58)
  print $B                                                      (,{2_EFFDT},58)
  print $C                                                      (,{3_EFFDT},58)

  print $xv_effdt                                               (+1,{1_EFFDT}, {MW_EFFDT})      underline
  print $xv_from                                                (,{1_FROM}, {MW_FROM})          underline
  let $to_txt = $xv_to || '  '
  print $to_txt                                                 (,{1_TO}, {MW_TO})              underline

  let $Rate_txtM = $xv_rateM || '             '
  print $rate_txtM                                               (,{1_RATEM},16)                underline

  let $Rate_txtD = $xv_rateD || '             '
  print $rate_txtD                                               (,{1_RATED},16)                underline

  print $xv_effdt                                                (,{2_EFFDT}, {MW_EFFDT})       underline
  print $xv_from                                                 (,{2_FROM}, {MW_FROM})         underline
  print $to_txt                                                  (,{2_TO}, {MW_TO})             underline
  print $rate_txtM                                               (,{2_RATEM},16)                underline
  print $rate_txtD                                               (,{2_RATED},16)                underline

  print $xv_effdt                                                (,{3_EFFDT}, {MW_EFFDT})       underline
  print $xv_from                                                 (,{3_FROM}, {MW_FROM})         underline
  print $to_txt                                                  (,{3_TO}, {MW_TO})             underline
  print $rate_txtM                                               (,{3_RATEM},16)                underline
  print $rate_txtD                                               (,{3_RATED},16)                underline

END-IF

end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Create-Cross-Array75
!----------------------------------------------------------------------!
#IFdef debuga
        display '**Create-Cross-Array75, Cross_Currency_Data:FromRt_TO_CUR' noline
#ENDIF

  create-array name=Cross_Currency_Data size=32041
         field=FromRt_effdt:char
         field=FROM_CUR:char
         field=FromRt_RATE_MULT:number
         field=FromRt_RATE_DIV:number
         field=ToRt_effdt:char
         field=TO_CUR:char
         field=ToRt_RATE_MULT:number
         field=ToRt_RATE_DIV:number

END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Load-75CR-Array
!----------------------------------------------------------------------!
let #75crossa   = 0

#IFdef debuga
   show '<<SELECT: Load-75CR-Array TO/FROM CUR>>---------'
   show 'SELECT                       '
   show 'FromTbl.EFFDT'
   show ',FromTbl.TO_CUR'
   show ',FromTbl.RATE_MULT'
   show ',FromTbl.RATE_DIV'
   show ',ToTbl.EFFDT'
   show ',ToTbl.TO_CUR'
   show ',ToTbl.RATE_MULT'
   show ',ToTbl.RATE_DIV'
   show 'FROM PS_RT_RATE_TBL FromTbl,  '
   show '     PS_RT_RATE_TBL ToTbl     '
   show 'WHERE FromTbl.RT_RATE_INDEX = ' '''' $Rc_RT_RATE_INDEX ''''
   show '  AND FromTbl.TERM          = ' #Rc_TERM
   show '  AND FromTbl.RT_TYPE       = ' '''' $Rc_From_Type ''''
   show '  AND FromTbl.FROM_CUR      = ' '''' $Rc_From_Cur ''''
   show '  AND FromTbl.TO_CUR     LIKE ' '''' $Rc_CROSS_FROM_Cur ''''
   show '  AND FromTbl.EFFDT         = (SELECT MAX(FromTblE.EFFDT)      '
   show '                                FROM PS_RT_RATE_TBL FromTblE   '
   show '                                WHERE FromTblE.RT_RATE_INDEX = ' 'FromTbl.RT_RATE_INDEX'
   show '                                  AND FromTblE.TERM          = ' 'FromTbl.TERM'
   show '                                  AND FromTblE.RT_TYPE       = ' 'FromTbl.RT_TYPE'
   show '                                  AND FromTblE.FROM_CUR      = ' 'FromTbl.FROM_CUR'
   show '                                  AND FromTblE.TO_CUR        = ' 'FromTbl.TO_CUR'
   show '                                  AND FromTblE.EFFDT         <=' '''' $AsOfDate '''' ')'
   show '  AND ToTbl.RT_RATE_INDEX = ' '''' $Rc_RT_RATE_INDEX ''''
   show '  AND ToTbl.TERM          = ' #Rc_TERM
   show '  AND ToTbl.RT_TYPE       = ' '''' $Rc_From_Type ''''
   show '  AND ToTbl.FROM_CUR      = ' '''' $Rc_From_Cur ''''
   show '  AND ToTbl.TO_CUR     LIKE ' '''' $Rc_CROSS_TO_Cur ''''
   show '  AND ToTbl.EFFDT         = (SELECT MAX(ToTblE.EFFDT)        '
   show '                                FROM PS_RT_RATE_TBL ToTblE   '
   show '                                WHERE ToTblE.RT_RATE_INDEX = ' 'ToTbl.RT_RATE_INDEX'
   show '                                  AND ToTblE.TERM          = ' 'ToTbl.TERM'
   show '                                  AND ToTblE.RT_TYPE       = ' 'ToTbl.RT_TYPE'
   show '                                  AND ToTblE.FROM_CUR      = ' 'ToTbl.FROM_CUR'
   show '                                  AND ToTblE.TO_CUR        = ' 'ToTbl.TO_CUR'
   show '                                  AND ToTblE.EFFDT         <=' '''' $AsOfDate '''' ')'
#ENDIF

BEGIN-select       ON-ERROR=SQL-Error              !loops=1
FromTbl.EFFDT
FromTbl.TO_CUR
FromTbl.RATE_MULT
FromTbl.RATE_DIV

ToTbl.EFFDT
ToTbl.TO_CUR
ToTbl.RATE_MULT
ToTbl.RATE_DIV

  let #75crossa=#75crossa+1

      #IFdef debuga
         show '<<FETCHED ROWS: Load-75CR-Array TO CUR >>- - - -'
         show '#75crossa             = ' #75crossa
         show '&FromTbl.EFFDT        = ' &FromTbl.EFFDT
         show '&FromTbl.TO_CUR       = ' &FromTbl.TO_CUR
         show '&FromTbl.RATE_MULT    = ' &FromTbl.RATE_MULT
         show '&FromTbl.RATE_DIV     = ' &FromTbl.RATE_DIV
         show ' '
         show '&ToTbl.EFFDT          = ' &ToTbl.EFFDT
         show '&ToTbl.TO_CUR         = ' &ToTbl.TO_CUR
         show '&ToTbl.RATE_MULT      = ' &ToTbl.RATE_MULT
         show '&ToTbl.RATE_DIV       = ' &ToTbl.RATE_DIV
         show '- - - - - - - - - - - - - - - - - - - - - - - - - -'
      #ENDIF


      PUT  &FromTbl.EFFDT
           &FromTbl.TO_CUR
           &FromTbl.RATE_MULT
           &FromTbl.RATE_DIV
           &ToTbl.EFFDT
           &ToTbl.TO_CUR
           &ToTbl.RATE_MULT
           &ToTbl.RATE_DIV
      INTO CROSS_CURRENCY_DATA(#75crossa)
           FromRt_effdt
           FROM_CUR
           FromRt_RATE_MULT
           FromRt_RATE_DIV
           ToRt_effdt
           TO_CUR
           ToRt_RATE_MULT
           ToRt_RATE_DIV



FROM PS_RT_RATE_TBL FromTbl,
     PS_RT_RATE_TBL ToTbl

WHERE FromTbl.RT_RATE_INDEX = $Rc_RT_RATE_INDEX
  AND FromTbl.TERM          = #Rc_TERM
  AND FromTbl.RT_TYPE       = $Rc_From_Type
  AND FromTbl.FROM_CUR      = $Rc_From_Cur
  AND FromTbl.TO_CUR     LIKE $Rc_CROSS_FROM_Cur
  AND FromTbl.EFFDT         = (SELECT MAX(FromTblE.EFFDT)
                                FROM PS_RT_RATE_TBL FromTblE
                                WHERE FromTblE.RT_RATE_INDEX = FromTbl.RT_RATE_INDEX
                                  AND FromTblE.TERM          = FromTbl.TERM
                                  AND FromTblE.RT_TYPE       = FromTbl.RT_TYPE
                                  AND FromTblE.FROM_CUR      = FromTbl.FROM_CUR
                                  AND FromTblE.TO_CUR        = FromTbl.TO_CUR
                                  AND FromTblE.EFFDT         <= $AsOfDate)

  AND ToTbl.RT_RATE_INDEX = $Rc_RT_RATE_INDEX
  AND ToTbl.TERM          = #Rc_TERM
  AND ToTbl.RT_TYPE       = $Rc_From_Type
  AND ToTbl.FROM_CUR      = $Rc_From_Cur
  AND ToTbl.TO_CUR     LIKE $Rc_CROSS_TO_Cur
  AND ToTbl.EFFDT         = (SELECT MAX(ToTblE.EFFDT)
                                FROM PS_RT_RATE_TBL ToTblE
                                WHERE ToTblE.RT_RATE_INDEX = ToTbl.RT_RATE_INDEX
                                  AND ToTblE.TERM          = ToTbl.TERM
                                  AND ToTblE.RT_TYPE       = ToTbl.RT_TYPE
                                  AND ToTblE.FROM_CUR      = ToTbl.FROM_CUR
                                  AND ToTblE.TO_CUR        = ToTbl.TO_CUR
                                  AND ToTblE.EFFDT         <= $AsOfDate)

ORDER BY FromTbl.TO_CUR, ToTbl.TO_CUR

END-select

END-procedure

!----------------------------------------------------------------------------------
BEGIN-procedure create-cross-rate75         !Get numerator and calculate cross rate
!----------------------------------------------------------------------------------
#IFdef debuga
        display '**create-cross-rate75**'
#ENDIF


let #75crossc = 1

WHILE #75crossc < (#75crossa + 1)
   get $FromRt_effdt
       $FROM_CUR
       #FromRt_RATE_MULT
       #FromRt_RATE_DIV
       $ToRt_effdt
       $TO_CUR
       #ToRt_RATE_MULT
       #ToRt_RATE_DIV
from CROSS_CURRENCY_DATA(#75crossc)
       FromRt_effdt
       FROM_CUR
       FromRt_RATE_MULT
       FromRt_RATE_DIV
       ToRt_effdt
       TO_CUR
       ToRt_RATE_MULT
       ToRt_RATE_DIV

#IFdef debuga
        show '<<Get Array Rows >>- - - - - - - - -'
        show '$FromRt_effdt    :' $FromRt_effdt
        show '$FROM_CUR        :' $FROM_CUR
        show '#FromRt_RATE_MULT:' #FromRt_RATE_MULT
        show '#FromRt_RATE_DIV :' #FromRt_RATE_DIV
        show '$ToRt_effdt      :' $ToRt_effdt
        show '$TO_CUR          :' $TO_CUR
        show '#ToRt_RATE_MULT  :' #ToRt_RATE_MULT
        show '#ToRt_RATE_DIV   :' #ToRt_RATE_DIV
        show '- - - - - - - - - - - - - - - - - -'
#ENDIF

   let #75crossc = #75crossc + 1        !get next rate for cross-rate calcuations

#IFdef debuga
    display '**QUOTE DATA FOR CROSS-RATE, AND BASE FROM/TO -> to compare Rate_Direct**'
#ENDIF

   let $RecIns_From_Cur = $FROM_CUR
   let $RecIns_To_Cur   = $TO_CUR

   #IFdef debuga
       display '**Quote Data for Target Rate**'
   #ENDIF

   do Check-Quote-Method-Exits

!update!!!!!
      #IFdef debuga
        show '<<DATA: Quote Methods>>- - - - - - -'
        show '$RecIns_From_Cur: '  $RecIns_From_Cur
        show '$RecIns_To_Cur  : '  $RecIns_To_Cur
        show '#Rate_Decimals   = ' #Rate_Decimals
        show '#Quote_Units     = ' #Quote_Units
        show '$Rate_Direct     = ' $Rate_Direct
        show '$Auto_Reciprocate= ' $Auto_Reciprocate
        show '$Rate_Triangulate= ' $Rate_Triangulate
        show '$Ref_Cur         = ' $Ref_Cur
        show '$Primary_Visual  = ' $Primary_Visual
        show '$Xrate_Override  = ' $Xrate_Override
        show '$Xrate_Recalc    = ' $Xrate_Recalc
        show '- - - - - - - - - - - - - - - - - - - - - -'
      #ENDIF


!** Steve Whitman  **!
IF  $QuoteExist = 'Y'
   AND $Rate_Triangulate = 'N'          
      AND $cross_rate='Y'

        #IFdef debuga
            display '**Cross Rate Calculation**'
        #ENDIF

     !**Quote Unit Comparison**!

         IF  $Rate_Direct = 'D'

         !** Calcuate Cross Rate**!
         let $calc = 'Y'
         !**(RD = U) **!
         let #RecIns_rate_div          = #Quote_Units

         !** (RM=[(RM1*RD2)/RD1*RM2)]*U) **!
         let #RecIns_rate_mult = ((#FromRt_RATE_DIV*#ToRt_Rate_Mult))*#Quote_Units/(#FromRt_RATE_MULT*#ToRt_Rate_Div)

             #IFdef debuga
                show '<<CALCULATION: create-cross-rate75 direct>>- - - - '
                show ' IF  $Rate_Direct = D'
                show 'RM      =[(RM1     *RD2     )/ RD1     *RM2     )]*U'
                show #RecIns_rate_mult '=((' #FromRt_rate_div '*' #ToRt_rate_mult ')/(' #FromRt_rate_mult '*' #ToRt_rate_div '))*' #Quote_Units
                show '- - - - - - - - - - - - - - - - - - - - - - -'
             #ENDIF

         END-IF  ! Rate Direct
         IF  $Rate_Direct = 'I'
         !** Calcuate Cross Rate**!
         let $calc = 'Y'
         !**(RM = U) **!
         let #RecIns_Rate_Mult = #Quote_Units

         !** (RD = [(RD1*RM2)/RM1*RD2)]*U) **!
         let #RecIns_Rate_Div  = ((#FromRt_Rate_Mult*#ToRt_Rate_Div)/(#FromRt_Rate_Div*#ToRt_Rate_Mult))*#Quote_Units

             #IFdef debuga
                show '<<CALCULATION: create-cross-rate75 indirect>>- - - - '
                show 'RD      =[(RD1     *RM2     )/ RM1     *RD2     )]*U'
                show ' IF  $Rate_Direct = I'
                show #RecIns_Rate_Div  '=((' #FromRt_Rate_Mult '*' #ToRt_Rate_Div ')/(' #FromRt_Rate_Div '*' #ToRt_Rate_Mult '))*' #Quote_Units
                show '- - - - - - - - - - - - - - - - - - - - - - -'
             #ENDIF

         END-IF  ! Rate InDirect
      END-IF  !Crosss Rate


!** Triangulation Must have a Quote Method**!

   IF $Tria_Rate='Y'
      AND $QuoteExist = 'N'
      AND $Ref_Cur    = $Rc_From_Cur

         show '**Error Triangulated Rates Must have Quote Method **'
         show 'From: '          $Rc_From_Cur      ' To: ' $Rc_To_Cur
   END-IF

!** Triangulation calculation **!
   IF $QuoteExist = 'Y'
      AND $Rate_Triangulate = 'Y'
      AND $Tria_Rate='Y'

      #IFdef debuga
          display '**Triangulated Rates**'
      #ENDIF

          let $calc = 'Y'
          !RM = (RM2/RD2) * U
           let #RecIns_Rate_Mult = (#ToRt_Rate_Mult/#ToRt_Rate_Div)
   !      Steve Whitman 9-20-00                                                                                                      ! 
   !       let #RecIns_Rate_Mult = (#ToRt_Rate_Mult/#ToRt_Rate_Div)*#Quote_Units  !

          !RD = (RD1/RM1) * U
          let #RecIns_Rate_Div =  (#FromRt_Rate_Mult/#FromRt_Rate_Div)
   !      Steve Whitman 9-20-00                                                                                                            ! 
   !     let #RecIns_Rate_Div =  (#FromRt_Rate_Mult/#FromRt_Rate_Div)*#Quote_Units   !

          #IFdef debuga
                show '<<CALCULATION: create-cross-rate75/ Tria>>- - - - '
                show 'IF $QuoteExist = Y'
                show 'Triangulate    = Y'
                show 'RM       = (RM2     /RD2     )*U'
                show #RecIns_Rate_Mult       ' = (' #ToRt_Rate_Mult '/' #ToRt_Rate_Div ')*' #Quote_Units
                show 'RD       = (RD1     /RM1     )*U'
                show #RecIns_Rate_Div        ' = (' #FromRt_Rate_Div '/' #FromRt_Rate_mult ')*' #Quote_Units
                show '- - - - - - - - - - - - - - - - - - - - - - - - -'
          #ENDIF

   END-IF !Trangulated

     IF $calc = 'Y'
        let $Print_X = 'Y'
          let $1_EFFDT = $FromRt_effdt
          let $2_EFFDT = $ToRt_effdt
          let $3_EFFDT = $RecIns_effdt
        do Check-Rate-Exists  !Insert or Update Rate

         IF $Auto_Reciprocate = 'Y'
            !**Generate Reciprocal for Triagulated or Cross Rate RM=RD1, RD=RM1**!

            let $RecIns_From_Cur = $Temp_To_Cur
            let $RecIns_To_Cur   = $Temp_From_Cur
            let #R_rate_mult     = #Temp_Mult
            let #R_rate_div      = #Temp_Div

              #IFdef debuga
                show 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
                show '$Auto_Reciprocate = Y'
                show '**Before**'
                show '$Temp_From_cur:  '  $Temp_From_cur
                show '$Temp_To_Cur  :  '  $Temp_To_Cur
                show '#Temp_Mult:      '  #Temp_mult
                show '#Temp_Div:       '  #Temp_Div
              #ENDIF

         do Generic-Calc-Reciprocal

           #IFdef debuga
                show '**Reciprocal Result**'
                show '$RecIns_From_Cur:  '  $RecIns_From_Cur
                show '$RecIns_To_Cur   : ' $RecIns_To_Cur
                show '#RecIns_rate_mult: ' #RecIns_rate_mult
                show '#RecIns_rate_div : ' #RecIns_rate_div
                show 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
              #ENDIF

         let $AutoX = 'Y'
         let $Print_X = 'Y'
         do Check-Rate-Exists  !Insert or Update Rate

         END-IF            !Auto Reciprocal
     END-IF


END-WHILE
END-procedure


!**COMMON PROCESSING**!
!----------------------------------------------------------------------!
begin-procedure Check-Quote-Method-Exits
!----------------------------------------------------------------------!
#IFdef debuga
   show '<<SELECT: Check-Quote-Method-Exits>>************'
   show 'SELECT                       '
   show 'EFFDT                        '
   show ',RATE_DECIMALS               '
   show ',QUOTE_UNITS                 '
   show ',RATE_DIRECT                 '
   show ',AUTO_RECIPROCATE            '
   show ',RATE_TRIANGULATE            '
   show ',REF_CUR                     '
   show ',PRIMARY_VISUAL              '
   show ',XRATE_OVERRIDE              '
   show ',XRATE_RECALC                '
   show 'FROM PS_CURR_QUOTE_TBL       '
   show 'WHERE FROM_CUR = '             '''' $RecIns_From_Cur ''''
   show '  AND TO_CUR   = '             '''' $RecIns_To_Cur ''''
   show 'AND EFFDT    = (SELECT MAX(B.EFFDT)'
   show '                FROM PS_CURR_QUOTE_TBL B'
   show '                WHERE B.FROM_CUR =' '''' $RecIns_From_Cur ''''
   show '                  AND B.TO_CUR   =' '''' $RecIns_To_Cur ''''
   show '                  AND B.EFFDT <='   '''' $AsOfDate '''' ')'
   show 'AND EFF_STATUS = '             '''' 'A' ''''
   show '* * * * * * * * * * * * * * * * * * * * * * * * *'
#ENDIF

let $QuoteExist = 'N'
let #Rate_Decimals    = 0
let #Quote_Units      = 1
let $Rate_Direct      = 'D'
let $Auto_Reciprocate = 'N'
let $Rate_Triangulate = 'N'
let $Ref_Cur          = ' '
let $Primary_Visual   = ' '
let $Xrate_Override   = ' '
let $Xrate_Recalc     = ' '

begin-SELECT       ON-ERROR=SQL-Error
EFFDT
RATE_DECIMALS
QUOTE_UNITS
RATE_DIRECT
AUTO_RECIPROCATE
RATE_TRIANGULATE
REF_CUR
PRIMARY_VISUAL
XRATE_OVERRIDE
XRATE_RECALC

    let $QuoteExist = 'Y'
    let #Rate_Decimals    = &RATE_DECIMALS
    let #Quote_Units      = &QUOTE_UNITS
    let $Rate_Direct      = &RATE_DIRECT
    let $Auto_Reciprocate = &AUTO_RECIPROCATE
    let $Rate_Triangulate = &RATE_TRIANGULATE
    let $Ref_Cur          = &REF_CUR
    let $Primary_Visual   = &PRIMARY_VISUAL
    let $Xrate_Override   = &XRATE_OVERRIDE
    let $Xrate_Recalc     = &XRATE_RECALC

    #IFdef debuga
       show '<<FETCHED ROWS: Check-Quote-Method-Exits>> * * *'
       show '$QuoteExist       = ' $QuoteExist
       show '&EffDt            = ' &EffDt
       show '&Rate_Decimals    = ' &Rate_Decimals
       show '&Quote_Units      = ' &Quote_Units
       show '&Rate_Direct      = ' &Rate_Direct
       show '&Auto_Reciprocate = ' &Auto_Reciprocate
       show '&Rate_Triangulate = ' &Rate_Triangulate
       show '&Ref_Cur          = ' &Ref_Cur
       show '&Primary_Visual   = ' &Primary_Visual
       show '&Xrate_Override   = ' &Xrate_Override
       show '&Xrate_Recalc     = ' &Xrate_Recalc
      show '* * * * * * * * * * * * * * * * * * * * * * * * *'
    #ENDIF

FROM PS_CURR_QUOTE_TBL
WHERE FROM_CUR = $RecIns_From_Cur
  AND TO_CUR   = $RecIns_To_Cur
  AND EFFDT    = (SELECT MAX(B.EFFDT)
                  FROM PS_CURR_QUOTE_TBL B
                  WHERE B.FROM_CUR = $RecIns_From_Cur
                    AND B.TO_CUR   = $RecIns_To_Cur
                    AND B.EFFDT <= $AsOfDate )
  AND EFF_STATUS = 'A'

end-SELECT

end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Check-Rate-Exists
!----------------------------------------------------------------------!
#IFdef debuga
   show '<<SELECT: Check-Rate-Exists>>**************'
   show 'SELECT                       '
   show 'RT_RATE_INDEX                '
   show ',TERM                        '
   show ',RT_TYPE                     '
   show ',EFFDT                       '
   show ',FROM_CUR                    '
   show ',TO_CUR                      '
   show ',RATE_MULT                   '
   show ',RATE_DIV                    '
   show 'FROM PS_RT_RATE_TBL          '
   show 'WHERE RT_RATE_INDEX = '        ''''$RecIns_rt_rate_index''''
   show '  AND TERM          = '        #RecIns_term
   show '  AND RT_TYPE       = '        ''''$RecIns_rt_type''''
   show '  AND EFFDT         = '        ''''$RecIns_effdt''''
   show '  AND FROM_CUR      = '        ''''$RecIns_from_cur''''
   show '  AND TO_CUR        = '        ''''$RecIns_to_cur''''
   show '********************************************'
#ENDIF

let $Rate_Exists ='N'

BEGIN-SELECT        ON-ERROR=SQL-Error

RT.RT_RATE_INDEX
RT.TERM
RT.RT_TYPE
RT.EFFDT
RT.FROM_CUR
RT.TO_CUR
RT.RATE_MULT
RT.RATE_DIV

        let $Rate_Exists ='Y'

        #IFdef debuga
           show '<<FETCHED ROWS: Check-Rate-Exists>>******'
           show '$Rate_Exists = Y'
           show 'RT.RT_RATE_INDEX= ' &RT.RT_RATE_INDEX
           show 'RT.TERM         = ' &RT.TERM
           show 'RT.RT_TYPE      = ' &RT.RT_TYPE
           show 'RT.EFFDT        = ' &RT.EFFDT
           show 'RT.FROM_CUR     = ' &RT.FROM_CUR
           show 'RT.TO_CUR       = ' &RT.TO_CUR
           show 'RT.RATE_MULT    = ' &RT.RATE_MULT
           show 'RT.RATE_DIV     = ' &RT.RATE_DIV
           show '******************************************'
        #ENDIF

FROM PS_RT_RATE_TBL RT
WHERE RT.RT_RATE_INDEX =$RecIns_rt_rate_index
  AND RT.TERM          =#RecIns_term
  AND RT.RT_TYPE       =$RecIns_rt_type
  AND RT.EFFDT         =$RecIns_effdt
  AND RT.FROM_CUR      =$RecIns_from_cur
  AND RT.TO_CUR        =$RecIns_to_cur

END-SELECT

!Insert/Update Logic

do PS_SQR_Round(#RecIns_rate_mult, #rounding, #RecIns_rate_mult_Round)
do PS_SQR_Round(#RecIns_rate_div, #rounding, #RecIns_rate_div_Round)
move #RecIns_Rate_Mult_Round to $RecIns_Rate_Mult_Round 999,999.99999999
move #RecIns_Rate_Div_Round  to $RecIns_Rate_Div_Round  999,999.99999999


do Check_Rt_Rate_Def_Tbl

   let $Ins_BatchPub_Parm = 'N'

IF $Rt_Rate_Def_Tbl = 'N'
   do Insert_Rt_Rate_Def_Tbl
   do Insert_Rt_Rate_Def_TMP
END-IF
IF $Rate_Exists ='Y'
   do Update-Rate
   do Update-InsertRate-TMP
END-IF
IF $Rate_Exists ='N'
    do Insert-Rate
    do Insert-Rate-TMP
END-IF

IF $Print_Rec = 'Y'
        move #recg_rate_mult    to $recg_rate_mult 999,999.99999999
        move #recg_rate_div     to $recg_rate_div  999,999.99999999
        do print-rec-ln
       let $Print_Rec = 'N'
END-IF

IF $Print_X = 'Y'
        move #FromRt_rate_mult  to $FromRt_rate_mult  999,999.99999999
        move #FromRt_rate_div   to $FromRt_rate_div   999,999.99999999
        move #ToRt_rate_mult    to $ToRt_rate_mult    999,999.99999999
        move #ToRt_rate_div     to $ToRt_rate_div     999,999.99999999
        do print-X-ln
       let $Print_X = 'N'
END-IF

!Store Last Rate for Rec Process
   let $Temp_From_cur  = $RecIns_From_Cur
   let $Temp_To_Cur    = $RecIns_To_Cur
   let #Temp_Mult      = #RecIns_rate_mult
   let #Temp_Div       = #RecIns_rate_div

!Reset insert variables
   let $RecIns_from_cur         = ' '
   let $RecIns_to_cur           = ' '
   let #RecIns_rate_mult        = 0
   let #RecIns_rate_div         = 0
   let #RecIns_rate_mult_Round  = 0
   let #RecIns_rate_div_Round   = 0

END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Check_Rt_Rate_Def_Tbl
!----------------------------------------------------------------------!
#IFdef debuga
   show '<<SELECT: Check-Rt_Rate_Def_Tbl>>**********'
   show 'SELECT                       '
   show 'RT_RATE_INDEX                '
   show ',TERM                        '
   show ',FROM_CUR                    '
   show ',TO_CUR                      '
   show ',MAX_VARIANCE                '
   show ',ERROR_TYPE                  '
   show ',INT_BASIS                   '
   show 'FROM PS_RT_RATE_DEF_TBL      '
   show 'WHERE RT_RATE_INDEX = '        '''' $RecIns_rt_rate_index ''''
   show '  AND TERM          = '        #RecIns_term
   show '  AND FROM_CUR      = '        '''' $RecIns_from_cur ''''
   show '  AND TO_CUR        = '        '''' $RecIns_to_cur ''''
   show '********************************************'
#ENDIF

let $Rt_Rate_Def_Tbl = 'N'

BEGIN-SELECT       ON-ERROR=SQL-Error
RT_RATE_INDEX
TERM
FROM_CUR
TO_CUR
MAX_VARIANCE
ERROR_TYPE
INT_BASIS

       #IFdef debuga
          show '<<FETCHED ROWS: Check_Rt_Rate_Def_Tbl >> * * *'
          show 'let $Rt_Rate_Def_Tbl = Y'
          show '&RT_RATE_INDEX       = ' &RT_RATE_INDEX
          show '&TERM                = ' &TERM
          show '&FROM_CUR            = ' &FROM_CUR
          show '&TO_CUR              = ' &TO_CUR
          show '&MAX_VARIANCE        = ' &MAX_VARIANCE
          show '&ERROR_TYPE          = ' &ERROR_TYPE
          show '&INT_BASIS           = ' &INT_BASIS
          show '* * * * * * * * * * * * * * * * * * * * * * * *'
      #ENDIF

      let $Rt_Rate_Def_Tbl = 'Y'

 FROM PS_RT_RATE_DEF_TBL
WHERE RT_RATE_INDEX = $RecIns_rt_rate_index
  AND TERM          = #RecIns_term
  AND FROM_CUR      = $RecIns_from_cur
  AND TO_CUR        = $RecIns_to_cur


END-SELECT
end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Insert_Rt_Rate_Def_Tbl
!----------------------------------------------------------------------!
#IFdef debuga
        show '<<SQL: Insert_Rt_Rate_Def_Tbl>>****************'
        show 'INSERT INTO PS_RT_RATE_DEF_TBL('
        show '                               RT_RATE_INDEX'
        show '                               ,TERM        '
        show '                               ,FROM_CUR    '
        show '                               ,TO_CUR      '
        show '                               ,MAX_VARIANCE'
        show '                               ,ERROR_TYPE  '
        show '                               ,INT_BASIS)  '
        show 'VALUES                        ( ' '''' $RecIns_rt_rate_index ''''
        show '                               ,' #RecIns_term
        show '                               ,' '''' $RecIns_from_cur ''''
        show '                               ,' '''' $RecIns_to_cur ''''
        show '                               ,' '2.5'
        show '                               ,' '''' 'WAR' ''''
        show '                               ,' '''' ' ' '''' ')'
        show '***********************************************'
#ENDIF

BEGIN-SQL  ON-ERROR=SQL-Error
INSERT INTO PS_RT_RATE_DEF_TBL (RT_RATE_INDEX
                               ,TERM
                               ,FROM_CUR
                               ,TO_CUR
                               ,MAX_VARIANCE
                               ,ERROR_TYPE
                              ,INT_BASIS)
VALUES (                       $RecIns_rt_rate_index
                              ,#RecIns_term
                              ,$RecIns_from_cur
                              ,$RecIns_to_cur
                              ,2.5
                              ,'WAR'
                               ,' ')
END-SQL

end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Insert_Rt_Rate_Def_TMP
!----------------------------------------------------------------------!
#IFdef debuga
        show '<<SQL: Insert_Rt_Rate_Def_TMP>>****************'
        show 'INSERT INTO PS_RT_RATE_DEF_TMP('
        show '                               RT_RATE_INDEX'
        show '                               ,TERM        '
        show '                               ,FROM_CUR    '
        show '                               ,TO_CUR      '
        show '                               ,MAX_VARIANCE'
        show '                               ,ERROR_TYPE  '
        show '                               ,INT_BASIS)  '
        show 'VALUES                        ( ' '''' $RecIns_rt_rate_index ''''
        show '                               ,' #RecIns_term
        show '                               ,' '''' $RecIns_from_cur ''''
        show '                               ,' '''' $RecIns_to_cur ''''
        show '                               ,' '2.5'
        show '                               ,' '''' 'WAR' ''''
        show '                               ,' '''' ' ' '''' ')'
        show '***********************************************'
#ENDIF

BEGIN-SQL  ON-ERROR=SQL-Error
INSERT INTO PS_RT_RATE_DEF_TMP (RT_RATE_INDEX
                               ,TERM
                               ,FROM_CUR
                               ,TO_CUR
                               ,MAX_VARIANCE
                               ,ERROR_TYPE
                              ,INT_BASIS
                               ,PROCESS_INSTANCE
                               ,AUDIT_ACTN)
VALUES (                       $RecIns_rt_rate_index
                              ,#RecIns_term
                              ,$RecIns_from_cur
                              ,$RecIns_to_cur
                              ,2.5
                              ,'WAR'
                               ,' '
                                ,#prcs_process_instance
                                ,'A')
END-SQL
    let $Ins_BatchPub_Parm = 'Y'
end-procedure



!----------------------------------------------------------------------!
BEGIN-procedure Insert-Rate
!----------------------------------------------------------------------!

#IFdef debuga
        show '<<SQL: Insert-Rate>>********************'
        show 'INSERT INTO PS_RT_RATE_TBL    ( RT_RATE_INDEX'
        show '                               ,TERM         '
        show '                               ,FROM_CUR     '
        show '                               ,TO_CUR       '
        show '                               ,RT_TYPE      '
        show '                               ,EFFDT        '
        show '                               ,RATE_MULT    '
        show '                               ,RATE_DIV)    '
        show 'VALUES                        ( ' '''' $RecIns_rt_rate_index ''''
        show '                               ,' #RecIns_term
        show '                               ,' '''' $RecIns_from_cur ''''
        show '                               ,' '''' $RecIns_to_cur ''''
        show '                               ,' '''' $RecIns_rt_type ''''
        show '                               ,' '''' $RecIns_effdt ''''
        show '                               ,' #RecIns_rate_mult_round
        show '                               ,' #RecIns_rate_div_round ')'
        show '*****************************************'
#ENDIF


BEGIN-SQL  ON-ERROR=SQL-Error
INSERT INTO PS_RT_RATE_TBL( RT_RATE_INDEX
                           ,TERM
                           ,FROM_CUR
                           ,TO_CUR
                           ,RT_TYPE
                           ,EFFDT
                           ,RATE_MULT
                           ,RATE_DIV)
VALUES (                   $RecIns_rt_rate_index
                           ,#RecIns_term
                           ,$RecIns_from_cur
                           ,$RecIns_to_cur
                           ,$RecIns_rt_type
                           ,$RecIns_effdt
                           ,#RecIns_rate_mult_round
                           ,#RecIns_rate_div_round)
END-SQL

let $calc = 'N'

END-procedure


!----------------------------------------------------------------------!
BEGIN-procedure Insert-Rate-TMP
!----------------------------------------------------------------------!

#IFdef debuga
        show '<<SQL: Insert-Rate-TMP>>********************'
        show 'INSERT INTO PS_RT_RATE_TMP    ( RT_RATE_INDEX'
        show '                               ,TERM         '
        show '                               ,FROM_CUR     '
        show '                               ,TO_CUR       '
        show '                               ,RT_TYPE      '
        show '                               ,EFFDT        '
        show '                               ,RATE_MULT    '
        show '                               ,RATE_DIV)    '
        show 'VALUES                        ( ' '''' $RecIns_rt_rate_index ''''
        show '                               ,' #RecIns_term
        show '                               ,' '''' $RecIns_from_cur ''''
        show '                               ,' '''' $RecIns_to_cur ''''
        show '                               ,' '''' $RecIns_rt_type ''''
        show '                               ,' '''' $RecIns_effdt ''''
        show '                               ,' #RecIns_rate_mult_round
        show '                               ,' #RecIns_rate_div_round ')'
        show '*****************************************'
#ENDIF


BEGIN-SQL  ON-ERROR=SQL-Error
INSERT INTO PS_RT_RATE_TMP( RT_RATE_INDEX
                           ,TERM
                           ,FROM_CUR
                           ,TO_CUR
                           ,RT_TYPE
                           ,EFFDT
                           ,RATE_MULT
                           ,RATE_DIV
                           ,PROCESS_INSTANCE
                           ,AUDIT_ACTN)
VALUES (                   $RecIns_rt_rate_index
                           ,#RecIns_term
                           ,$RecIns_from_cur
                           ,$RecIns_to_cur
                           ,$RecIns_rt_type
                           ,$RecIns_effdt
                           ,#RecIns_rate_mult_round
                           ,#RecIns_rate_div_round
                           ,#prcs_process_instance
                           ,'A')
END-SQL
  let $Ins_BatchPub_Parm = 'Y'
END-procedure



!----------------------------------------------------------------------!
BEGIN-procedure Update-Rate
!----------------------------------------------------------------------!
IF $rate_override = 'Y'


#IFdef debuga
   show '<<SQL:Update-Rate>>********************'
   show 'UPDATE PS_RT_RATE_TBL SET  RATE_MULT = ' #RecIns_rate_mult_round
   show '                          ,RATE_DIV  = ' #RecIns_rate_div_round
   show 'WHERE RT_RATE_INDEX = ' '''' $RecIns_rt_rate_index ''''
   show '  AND TERM          = ' #RecIns_term
   show '  AND RT_TYPE       = ' '''' $RecIns_rt_type ''''
   show '  AND EFFDT         = ' '''' $RecIns_effdt ''''
   show '  AND FROM_CUR      = ' '''' $RecIns_from_cur ''''
   show '  AND TO_CUR        = ' '''' $RecIns_to_cur ''''
   show '***************************************'
#ENDIF

BEGIN-SQL  ON-ERROR=SQL-Error
UPDATE PS_RT_RATE_TBL SET  RATE_MULT =#RecIns_rate_mult_round
                          ,RATE_DIV  =#RecIns_rate_div_round
WHERE RT_RATE_INDEX =$RecIns_rt_rate_index
  AND TERM          =#RecIns_term
  AND RT_TYPE       =$RecIns_rt_type
  AND EFFDT         =$RecIns_effdt
  AND FROM_CUR      =$RecIns_from_cur
  AND TO_CUR        =$RecIns_to_cur
END-SQL

END-IF

let $calc = 'N'

END-procedure


!----------------------------------------------------------------------!
BEGIN-procedure Update-InsertRate-TMP
!Since Batch Publish always deletes TMP table then update to application !
!table would mean insert with audit_actn = C for temp table !
!----------------------------------------------------------------------!

IF $rate_override = 'Y'

#IFdef debuga
   show '<<SQL:Update-InsertRate-Tmp>>********************'
   show 'INSERT PS_RT_RATE_TMP SET  RATE_MULT = ' #RecIns_rate_mult_round
   show '                          ,RATE_DIV  = ' #RecIns_rate_div_round
   show 'WHERE RT_RATE_INDEX = '             ''''$RecIns_rt_rate_index''''
   show '  AND TERM          = '             ''''#RecIns_term''''
   show '  AND RT_TYPE       = '             ''''$RecIns_rt_type''''
   show '  AND EFFDT         = '             ''''$RecIns_effdt''''
   show '  AND FROM_CUR      = '             ''''$RecIns_from_cur''''
   show '  AND TO_CUR        = '             ''''$RecIns_to_cur''''
   show '  PROCESS_INSTANCE  = '             ''''#prcs_process_instance''''
   show '***************************************'
#ENDIF

BEGIN-SQL  ON-ERROR=UpdateRate-TMP
INSERT INTO PS_RT_RATE_TMP( RT_RATE_INDEX
                           ,TERM
                           ,FROM_CUR
                           ,TO_CUR
                           ,RT_TYPE
                           ,EFFDT
                           ,RATE_MULT
                           ,RATE_DIV
                           ,PROCESS_INSTANCE
                           ,AUDIT_ACTN)
VALUES (                   $RecIns_rt_rate_index
                           ,#RecIns_term
                           ,$RecIns_from_cur
                           ,$RecIns_to_cur
                           ,$RecIns_rt_type
                           ,$RecIns_effdt
                           ,#RecIns_rate_mult_round
                           ,#RecIns_rate_div_round
                           ,#prcs_process_instance
                           ,'C')
END-SQL

END-IF
   let $Ins_BatchPub_Parm = 'Y'
END-procedure

!----------------------------------------------------------------------!
BEGIN-procedure UpdateRate-TMP
!----------------------------------------------------------------------!


#IFdef debuga
   show '<<SQL:UpdateRate-TMP>>********************'
   show 'UPDATE PS_RT_RATE_TMP SET  RATE_MULT = ' #RecIns_rate_mult_round
   show '                          ,RATE_DIV  = ' #RecIns_rate_div_round
   show 'WHERE RT_RATE_INDEX = ' '''' $RecIns_rt_rate_index ''''
   show '  AND TERM          = ' #RecIns_term
   show '  AND RT_TYPE       = ' '''' $RecIns_rt_type ''''
   show '  AND EFFDT         = ' '''' $RecIns_effdt ''''
   show '  AND FROM_CUR      = ' '''' $RecIns_from_cur ''''
   show '  AND TO_CUR        = ' '''' $RecIns_to_cur ''''
   show '  PROCESS_INSTANCE  = ' '''' #prcs_process_instance ''''

   show '***************************************'
#ENDIF

BEGIN-SQL  ON-ERROR=SQL-Error
UPDATE PS_RT_RATE_TMP SET  RATE_MULT =#RecIns_rate_mult_round
                          ,RATE_DIV  =#RecIns_rate_div_round
WHERE RT_RATE_INDEX      =$RecIns_rt_rate_index
  AND TERM               =#RecIns_term
  AND RT_TYPE            =$RecIns_rt_type
  AND EFFDT              =$RecIns_effdt
  AND FROM_CUR           =$RecIns_from_cur
  AND TO_CUR             =$RecIns_to_cur
  AND PROCESS_INSTANCE   =#prcs_process_instance

END-SQL


END-procedure



!----------------------------------------------------------------------!
BEGIN-procedure Print-Rec-Ln
!----------------------------------------------------------------------!
#IFdef debuga
        display '**Print-Rec-Ln**'
#ENDIF

IF $generate_report   ='Y'

   do Format-DateTime($1_effdt,$out,{DEFDATE},'','')
   print $out                                     (+1,{1_EFFDT}, {MW_EFFDT})
   print $Rc_From_Cur                             (,{1_FROM}, {MW_FROM})
   print $recg_to_cur                             (,{1_TO}, {MW_TO})
   print $recg_rate_mult                          (,{1_RATEM}, {MW_RATEM})
   print $recg_rate_div                           (,{1_RATED}, {MW_RATED})

   do Format-DateTime($2_effdt,$out,{DEFDATE},'','')
   print $out                                     (,{2_EFFDT}, {MW_EFFDT})
   print $RecIns_From_Cur                         (,{2_FROM}, {MW_FROM})
   print $RecIns_To_Cur                           (,{2_TO}, {MW_TO})
   print $RecIns_Rate_Mult_Round                  (,{2_RATEM}, {MW_RATEM})
   print $RecIns_Rate_Div_Round                   (,{2_RATED}, {MW_RATED})


   IF  $Rate_Exists = 'Y' AND $Rate_Override <> 'Y'
        print '*'                                 (0,{2_RATEnote})
   END-IF

       #IFdef debuga
          show '<<DATA: Calc-Reciprocal>>------------------'
          show '#recget                 = ' #recget
          show '$recg_to_cur            = ' $recg_to_cur
          show '$recg_rate_mult         = ' $recg_rate_mult
          show '$recg_rate_div          = ' $recg_rate_div
          show '<<Insert/Update Var>> - - - - - - - - - - -'
          show '$RecIns_Rt_Rate_Index   = '  $RecIns_Rt_Rate_Index
          show '#RecIns_Term            = '  #RecIns_Term
          show '$RecIns_Rt_Type         = '  $RecIns_Rt_Type
          show '$RecIns_Effdt           = '  $RecIns_Effdt
          show '$RecIns_From_Cur        = '  $RecIns_From_Cur
          show '$RecIns_To_Cur          = '  $RecIns_To_Cur
          show '$RecIns_Rate_Mult_round = '  $RecIns_Rate_Mul_Tround
          show '$RecIns_Rate_Div_round  = '  $RecIns_Rate_Div_round
          show '-------------------------------------------'
       #ENDIF
END-IF
end-procedure

!----------------------------------------------------------------------!
BEGIN-procedure Print-X-Ln
!----------------------------------------------------------------------!
#IFdef debuga
   show '**Print-X-Ln**'

   show  '$Rc_From_Cur            :' $Rc_From_Cur
   show  '$FROM_CUR               :' $FROM_CUR
   show  '$FromRt_rate_mult       :' $FromRt_rate_mult
   show  '$FromRt_rate_div        :' $FromRt_rate_div

   show  '$Rc_From_Cur            :' $Rc_From_Cur
   show  '$TO_CUR                 :' $TO_CUR
   show  '$ToRt_rate_mult         :' $ToRt_rate_mult
   show  '$ToRt_rate_div          :' $ToRt_rate_div

   show  '$RecIns_from_cur        :' $RecIns_from_cur
   show  '$RecIns_to_cur          :' $RecIns_to_cur
   show  '$RecIns_rate_mult_Round :' $RecIns_rate_mult_Round
   show  '$RecIns_rate_div_Round  :' $RecIns_rate_div_Round

#ENDIF

if $RecIns_from_cur = $FROM_CUR
  next-listing  skiplines=0  need=4
end-if

IF $generate_report   ='Y'

  IF $AutoX = 'N'
    do Format-DateTime($1_effdt,$out,{DEFDATE},'','')
    print $out                                   (+1,{1_EFFDT}, {MW_EFFDT})
    print $Rc_From_Cur                           (,{1_FROM}, {MW_FROM})
    print $FROM_CUR                              (,{1_TO}, {MW_TO})

    print $FromRt_rate_mult                      (,{1_RATEM},16)
    print $FromRt_rate_div                       (,{1_RATED},16)

    do Format-DateTime($2_effdt,$out,{DEFDATE},'','')
    print $out                                   (,{2_EFFDT}, {MW_EFFDT})
    print $Rc_From_Cur                           (,{2_FROM}, {MW_FROM})
    print $TO_CUR                                (,{2_TO}, {MW_TO})
    print $ToRt_rate_mult                        (,{2_RATEM},16)
    print $ToRt_rate_div                         (,{2_RATED},16)
  ELSE
    PRINT ' '                                    (+1,{1_EFFDT})
  END-IF

  do Format-DateTime($3_effdt,$out,{DEFDATE},'','')
  print $out                                     (,{3_EFFDT}, {MW_EFFDT})
  print $RecIns_from_cur                         (,{3_FROM}, {MW_FROM})
  print $RecIns_to_cur                           (,{3_TO}, {MW_TO})
  print $RecIns_rate_mult_round                  (,{3_RATEM},16)
  print $RecIns_rate_div_round                   (,{3_RATED},16)


  IF  $Rate_Exists = 'Y' AND $Rate_Override <> 'Y'
     print '*'                                   (0,{3_RATEnote})
  END-IF

let $AutoX = 'N'
END-IF

end-procedure

begin-procedure get-xlat-fields


  do Init_Report_Translation('EO9030', $prcs_language_cd)

  do Get_Field_Information('EO9030','PROC_INST', $xv_proc_inst,
                           #xfw_proc_inst)
  do Get_Field_Information('EO9030','RATE_EFFDT', $xv_rate_effdt,
                           #xfw_rate_effdt)
  do Get_Field_Information('EO9030','RATE_TY', $xv_rate_ty, #xfw_rate_ty)
  do Get_Field_Information('EO9030','COM_FM_CURRENCY', $xv_com_fm_currency,
                           #xfw_com_fm_currency)
  do Get_Field_Information('EO9030','REC_COM', $xv_rec_com, #xfw_rec_com)
  do Get_Field_Information('EO9030','CROSS_RATE', $xv_cross_rate,
                           #xfw_cross_rate)

  do Get_Field_Information('EO9030','GENERATE_RPT', $xv_generate_rpt,
                           #xfw_generate_rpt)
  do Get_Field_Information('EO9030','UPDTE_PREV_RATE', $xv_updte_prev_rate,
                           #xfw_updte_prev_rate)
  do Get_Field_Information('EO9030','MSG1', $xv_msg1, #xfw_msg1)
  do Get_Field_Information('EO9030','ORG_RATE', $xv_org_rate, #xfw_org_rate)
  do Get_Field_Information('EO9030','RECIPROCAL', $xv_reciprocal,
                           #xfw_reciprocal)
  do Get_Field_Information('EO9030','CROSS_RTE_CAL', $xv_cross_rte_cal,
                           #xfw_cross_rte_cal)
  do Get_Field_Information('EO9030','FRM_RTE_A', $xv_frm_rte_a,
                           #xfw_frm_rte_a)
  do Get_Field_Information('EO9030','TO_RTE_B', $xv_to_rte_b, #xfw_to_rte_b)
  do Get_Field_Information('EO9030','NEW_RTE', $xv_new_rte, #xfw_new_rte)

  do Get_Field_Information('EO9030','STATUS', $xv_status, #xfw_status)
  do Get_Field_Information('EO9030','EFFDT', $xv_effdt, #xfw_effdt)
  do Get_Field_Information('EO9030','TYPE', $xv_type, #xfw_type)

  do Get_Field_Information('EO9030','FROM',$xv_from,#xfw_from)
  do Get_Field_Information('EO9030','TO', $xv_to, #xfw_to)
  do Get_Field_Information('EO9030','RATE', $xv_rate, #xfw_rate)
  do Get_Field_Information('EO9030','RC_FRM_TYPE', $xv_rc_frm_type,
                           #xfw_rc_frm_type)
  do Get_Field_Information('EO9030','ASOFDATE', $xv_asofdate, #xfw_asofdate)

  do Get_Field_Information('EO9030','RC_FRM_CUR', $xv_rc_frm_cur,
                           #xfw_rc_frm_cur)
  do Get_Field_Information('EO9030','RC_RECIP_ONLY', $xv_rc_recip_only,
                           #xfw_rc_recip_only)
  do Get_Field_Information('EO9030','RTE_OVERRIDE', $xv_rte_override,
                           #xfw_rte_override)
  do Get_Field_Information('EO9030','GEN_RPT', $xv_gen_rpt, #xfw_gen_rpt)
  do Get_Field_Information('EO9030','CRS_RTE', $xv_crs_rte, #xfw_crs_rte)

  do Get_Field_Information('EO9030','RC_CRS_FRM_CUR', $xv_rc_crs_frm_cur,
                           #xfw_rc_crs_frm_cur)
  do Get_Field_Information('EO9030','RC_CRS_TO_CUR', $xv_rc_crs_to_cur,
                           #xfw_rc_crs_to_cur)
  do Get_Field_Information('EO9030','RECIP_CROSS', $xv_recip_cross,
                           #xfw_recip_cross)

  do Get_Field_Information('EO9030','RECIP_RATE', $xv_recip_rate,
                           #xfw_recip_rate)
  do Get_Field_Information('EO9030','CRS_RATE', $xv_crs_rate, #xfw_crs_rate)

  do Get_Field_Information('EO9030','NO_UPDATE', $xv_no_update,
                           #xfw_no_update)
  do Get_Field_Information('EO9030','DEL_VAL', $xv_del_val, #xfw_del_val)
  do Get_Field_Information('EO9030','INSERT_RATE', $xv_insert_rate,
                           #xfw_insert_rate)

  do Get_Field_Information('EO9030','TITLE', $xv_TITLE,
                           #xfw_TITLE)

  do Get_Field_Information('EO9030','RC_TERM', $xv_Rc_Term,#xfw_xv_Rc_Term)
  do Get_Field_Information('EO9030','RC_RT_RATE_INDEX', $xv_Rc_Rt_Rate_Index,#xfw_Rc_Rt_Rate_Index)
  do Get_Field_Information('EO9030','RATEM', $xv_rateM,#xfw_rateM  )
  do Get_Field_Information('EO9030','RATED ', $xv_rateD ,#xfw_rateD )
  do Get_Field_Information('EO9030','TRIA_COM', $xv_tria_com,#xfw_tria_com)

end-procedure get-xlat-fields

!----------------------------------------------------------------------!
BEGIN-procedure BatchPub
!----------------------------------------------------------------------!

  do Get-Process-Name (#prcs_process_instance, $prcsname)
#IFdef debuga
   show '*********Get-Process-Name*************'
   show ' #prcs_process_instance  = ' '''' #prcs_process_instance ''''  noline
   show '  $prcsname  = ' '''' $prcsname ''''                           noline
   show '***************************************'
#END-IF
  do Get-Active-In-BatchPub ($prcsname, #cntmsg)
  if #cntmsg > 0
      do Get-Job-Instance
      do Insert-Param-In-BatchPub (#prcs_process_instance, #prcs_job_instance, $prcsname,  $SysDateTime, 'D')
#IFdef debuga
   show '*******Insert-Param-In-BatchPub***********'
   show '  #prcs_process_instance  = ' '''' #prcs_process_instance '''' noline
   show '  #prcs_job_instance  = ' '''' #prcs_job_instance ''''         noline
   show '  $prcsname  = ' '''' $prcsname '''' '  $sysdatetime  = '      noline
   show '''' $SysDateTime ''''
#END-IF
  end-if

end-procedure BatchPub

!----------------------------------------------------------------------!
! Called SQC Procedures                                                !
!----------------------------------------------------------------------!

#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declare

#include 'reset.sqc'     ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines for number formatting

