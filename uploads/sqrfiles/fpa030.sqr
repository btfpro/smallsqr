
!***********************************************************************
!  FPA030:  Compute the adjustment constant                            *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2007/02/04:23:49:33                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************

!-------------------------------------------
! INCLUDES ENVIRONEMENT
!-------------------------------------------
#include 'setenv.sqc'           ! Set environment
#include 'setup01.sqc'          ! Printer and page-size initialization



!-------------------------------------------
! SETUP
!-------------------------------------------
BEGIN-SETUP
END-SETUP



!-------------------------------------------
! REPORT
!-------------------------------------------
BEGIN-REPORT

 Do Init-DateTime
 Do Init-Number
 Do Get-Current-DateTime()
 let #nb_notes = 0
 do Init-Report
 do FOND-DE-PAGE
 do Stdapi-Term

END-REPORT



!-------------------------------------------
! Procedure INIT-REPORT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE  Init-Report

  move 'FPA030' to $ReportID

  do Stdapi-Init

  let $language_cd = $CURR_LANGUAGE_CD

  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)

  do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

  do Security-Param       !SQR security

 if $prcs_process_instance = ''
  INPUT $FromDate 'Enter start review date'
  INPUT $ThruDate 'Enter end review date'
  INPUT $Corps    'Enter corps'
  INPUT $arrondi  'Enter round shape of adjustment constants Y/N'
 else
  do FP-Select-Parameters
  do Select-Parameters
 end-if

END-PROCEDURE Init-Report



!-------------------------------------------
! Procedure GET-VALUES
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE Get-Values

 do Get-From-Thru-Date
 do Get-Corps
 do Get-YesNo
 Let $arrondi  =  $YesNo

END-PROCEDURE Get-Values



!-------------------------------------------
! Procedure FOND-DE-PAGE
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE FOND-DE-PAGE

 position (+1,1)
 let $titre = $ReportTitle
 uppercase $titre

 print $titre () center

  do Get_Field_Information($ReportID, 'CORPS', $CORPS_LBL, #DW)
  do Get_Field_Information($ReportID, 'MOY', $MOY_LBL, #DW)
  do Get_Field_Information($ReportID, 'NBR_NOTES', $NBR_NOTES_LBL, #DW)
  do Get_Field_Information($ReportID, 'EVAL', $EVAL_LBL, #DW)
  do Get_Field_Information($ReportID, 'CSTE1', $CSTE1_LBL, #DW)
  do Get_Field_Information($ReportID, 'CSTE2', $CSTE2_LBL, #DW)

 position (+5,10)

 print $CORPS_LBL (,16,)
 print $MOY_LBL   (,29,)
 print $NBR_NOTES (,47,)
 print '|'      (,25,1)
 print '|'      (,42,1)
 print '|'      (+1,25,1)
 print '|'      (,42,1)
 print '-' (+1,10,57) Fill

 do SELECT-CORPS

END-PROCEDURE FOND-DE-PAGE



!-------------------------------------------
! Procedure SELECT-CORPS
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE SELECT-CORPS

BEGIN-SQL
 DELETE FROM PS_FPMPEREQUAT_TMP WHERE OPRID = $prcs_oprid
END-SQL
BEGIN-SQL
 DELETE FROM PS_FPMREVIEWER_TMP WHERE OPRID = $prcs_oprid
END-SQL

#ifdef debugx
 display '--Procedure SELECT-CORPS--'
#end-if

!---- Build dynamic where clause

let $select-where =
   '{DATEIN-PREFIX}''' || $FromDate || '''{DYN-DateIn-Suffix} <= A.PERIOD_BEGIN_DT
and {DATEIN-PREFIX}''' || $ThruDate ||'''{DYN-DateIn-Suffix}  >= A.PERIOD_END_DT
and   A.EMPLID = B.EMPLID
and   A.EMPL_RCD = B.EMPL_RCD
and   A.EP_REVIEW_TYPE <> ''R''  '        ! temporary notation

let $select-where =  $select-where ||
  ' and B.EFFDT = (select max(B1.EFFDT) from PS_FPAEECAREER B1
    where B1.EMPLID = B.EMPLID
    and B1.EMPL_RCD = B.EMPL_RCD
    and B1.EFFDT <= A.PERIOD_END_DT)'
let $select-where =  $select-where ||
  ' and B.EFFSEQ = (select max(B2.EFFSEQ) from PS_FPAEECAREER B2
    where B2.EMPLID = B.EMPLID
    and B2.EMPL_RCD = B.EMPL_RCD
    and B2.EFFDT = B.EFFDT)'

if $corps <> '' and $corps <> ' '
 let $select-where =  $select-where ||
 ' and   B.FP_CORPS_CD = ''' || $corps ||''''
end-if

#ifdef debugx
 display '$select-where=' noline
 display $select-where
#end-if

!---- Exec request

BEGIN-SELECT
C.EP_RATING
B.FP_CORPS_CD
 print &B.FP_CORPS_CD (,10,20) ON-BREAK PRINT  = never
                                        SET    = 1
                                        LEVEL  = 1
                                        SAVE   = $nom_corps
                                        !BEFORE = ADD-CORPS
                                        AFTER  = TOTAL-CORPS

 ADD 1 TO #nb_notes
 ADD &C.EP_RATING TO #totreview_rating

 ADD 1 TO #nb_notes_gene
 ADD &C.EP_RATING TO #totreview_rat_gene

#ifdef debugx
 !---- Debuging info
 display '#nb_notes=' noline
 display #nb_notes
 display '#totreview_rating=' noline
 display #totreview_rating
 display '#nb_notes_gene=' noline
 display #nb_notes_gene
 display '#totreview_rat_gene=' noline
 display #totreview_rat_gene
#end-if

from    PS_EP_APPR A,PS_FPAEECAREER B, PS_EP_APPR_SECTION C
        ,PS_FPFAST_PERS_VW2 SCRTY                      !SQR security

where   [$select-where]
and A.EP_APPRAISAL_ID = C.EP_APPRAISAL_ID
and C.EP_ROLE = 'M'
and C.EP_SEQ_NUM = 10
and C.EP_SECTION_TYPE = 'SUMMARY'
and B.EMPLID = SCRTY.EMPLID                    !
and B.EMPL_RCD = SCRTY.EMPL_RCD   !SQR security
and NOT EXISTS (SELECT 'X' FROM PS_FPAREVIEW_HIST FPAHIST WHERE FPAHIST.EP_APPRAISAL_ID = A.EP_APPRAISAL_ID)
        [$SecurityClause]                              !

order by  B.FP_CORPS_CD

END-SELECT

 let #nb_notes = 0
 let #totreview_rating = 0

 ! compute global average
 If #nb_notes_gene <> 0
  let #moyenne_gene =  #totreview_rat_gene / #nb_notes_gene
 else
  let #moyenne_gene = 0
 end-if

 do PRINT-TAB2

END-PROCEDURE SELECT-CORPS



!-------------------------------------------
! Procedure TOTAL-CORPS
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE TOTAL-CORPS

#ifdef debugx
 !---- Debug info
 display '--Procedure TOTAL-CORPS--'
 display '#nb_notes=' noline
 display #nb_notes
 display '#totreview_rating=' noline
 display #totreview_rating
#end-if

 !---- Compute average
 let #moyenne =  #totreview_rating / #nb_notes

 print '|'      (+1,25,1)
 print '|'      (,42,1)
 print $nom_corps (+1,10,15)
 print '|'      (,25,1)
 print #moyenne (,+3,14)
 print '|'      (,42,1)
 print #nb_notes  (,+3,10)

let $sql-statement = 'FPA030.SQR, TOTAL-CORPS ,Insert,PS_FPMPEREQUAT_TMP'
BEGIN-SQL On-Error=SQL-Error
INSERT INTO PS_FPMPEREQUAT_TMP
(OPRID,
 FP_AVG_TYPE,
 REVIEWER_ID,
 FP_CORPS_CD,
 REVIEW_FROM_DT,
 REVIEW_THRU_DT,
 FP_AVERAGE,
 FP_MARK_NB,
 FP_ADJUSTMNT_CST,
 EMPLID,
 EMPL_RCD,
 EP_REVIEW_TYPE,
 EP_REVIEW_STATUS,
 EP_RATING,
 CREATION_DT,
 EP_APPRAISAL_ID)
values
($prcs_oprid,
 'G',
 '99999999999',
 $nom_corps,
 {DATEIN-PREFIX}$FromDate{DATEIN-SUFFIX} ,
 {DATEIN-PREFIX}$ThruDate{DATEIN-SUFFIX} ,
 #moyenne,
 #nb_notes,
 0,
 ' ',
 0,
 ' ',
 ' ',
 0,
 NULL,
 0)

END-SQL

 let #nb_notes = 0
 let #totreview_rating = 0

END-PROCEDURE TOTAL-CORPS



!-------------------------------------------
! Procedure PRINT-TAB2
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE PRINT-TAB2

 let #nb_notes = 0
 let #totreview_rating = 0

 position (+5,1)

 print $EVAL_LBL       (,20,)
 print $MOY_LBL        (,55,)
 print $NBRE_NOTES_LBL (,71,)
 print $CSTE1_LBL (,92,)
 print '|'      (,50,1)
 print '|'      (,67,1)
 print '|'      (,89,1)
 print '|'      (+1,50,1)
 print '|'      (,67,1)
 print '|'      (,89,1)
 print $CSTE2_LBL (,92,)
 print '-' (+1,1,108) Fill

 do SELECT-EVAL

END-PROCEDURE PRINT-TAB2



!-------------------------------------------
! Procedure SELECT-EVAL
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
 BEGIN-PROCEDURE SELECT-EVAL

#ifdef debugx
 display 'select-eval'
#end-if

let $select-where =
   '{DATEIN-PREFIX}'''||$FromDate || '''{DYN-DateIn-Suffix} <= E.PERIOD_BEGIN_DT
and {DATEIN-PREFIX}''' || $ThruDate ||'''{DYN-DateIn-Suffix} >= E.PERIOD_END_DT
and   E.EP_APPRAISAL_ID = C.EP_APPRAISAL_ID
and   C.REVIEWER_ID = D.EMPLID
and   B.EMPLID = E.EMPLID
and   B.EMPL_RCD = E.EMPL_RCD '

let $select-where =  $select-where ||
  ' and B.EFFDT = (select max(B1.EFFDT) from PS_FPAEECAREER B1
    where B1.EMPLID = B.EMPLID
    and B1.EMPL_RCD = B.EMPL_RCD
    and B1.EFFDT <= E.PERIOD_END_DT)'
let $select-where =  $select-where ||
  ' and B.EFFSEQ = (select max(B2.EFFSEQ) from PS_FPAEECAREER B2
    where B2.EMPLID = B.EMPLID
    and B2.EMPL_RCD = B.EMPL_RCD
    and B2.EFFDT = B.EFFDT)'

 if $corps <> '' and $corps <> ' '
  let $select-where =  $select-where ||
  ' and   B.FP_CORPS_CD = ''' || $corps ||''''
 end-if

#ifdef debugx
 display $select-where
#end-if

BEGIN-SELECT
F.EP_APPRAISAL_ID

 let #ReviewerMax = 1
 do Get-Reviewers(&F.EP_APPRAISAL_ID, ' ', #ReviewerMax)
! into release 8.4, only 1 reviewer is returned by appraisal
 get $emplid from Reviewers(1) ReviewerId
 move &F.EP_APPRAISAL_ID to $appraisalid B9999999
 do Insert-ReviewerID($appraisalid, $emplid)

from PS_EP_APPR F, PS_FPAEECAREER G
where F.EMPLID = G.EMPLID
and F.EMPL_RCD = G.EMPL_RCD
and F.PERIOD_BEGIN_DT >= {DATEIN-PREFIX}$FromDate{DATEIN-SUFFIX}
and F.PERIOD_END_DT <= {DATEIN-PREFIX}$ThruDate{DATEIN-SUFFIX}
and G.EFFDT = (select max(G2.EFFDT) from PS_FPAEECAREER G2
    where G2.EMPLID = G.EMPLID
    and G2.EMPL_RCD = G.EMPL_RCD
    and G2.EFFDT <= F.PERIOD_END_DT)
and G.EFFSEQ = (select max(G3.EFFSEQ) from PS_FPAEECAREER G3
    where G3.EMPLID = G.EMPLID
    and G3.EMPL_RCD = G.EMPL_RCD
    and G3.EFFDT = G.EFFDT)
and NOT EXISTS (SELECT 'X' FROM PS_FPAREVIEW_HIST FPAHIST2 WHERE FPAHIST2.EP_APPRAISAL_ID = F.EP_APPRAISAL_ID)
END-SELECT

BEGIN-SELECT
D.EMPLID
D.NAME
E.EP_APPRAISAL_ID
E.CREATION_DT
F.EP_RATING
E.EMPLID,
E.EMPL_RCD,
E.EP_REVIEW_TYPE,
E.EP_REVIEW_STATUS,
 let $emplid_name  = rtrim(&D.EMPLID,' ' )||'  '||rtrim(&D.NAME,' ' )
 do Insert-Review
 print $emplid_name (,2,50) ON-BREAK PRINT = never
                                     SET   = 1
                                     LEVEL = 1
                                     SAVE  = $nom_eval
                                     AFTER = TOTAL-EVAL
 ADD 1 TO #nb_notes
 ADD &F.EP_RATING TO #totreview_rating

 let $emplid = rtrim(&D.EMPLID,' ' )

from PS_EP_APPR E, PS_FPMREVIEWER_TMP C, PS_PERSON_NAME D,
     PS_FPAEECAREER B, PS_EP_APPR_SECTION F
where [$select-where]
and E.EP_APPRAISAL_ID = F.EP_APPRAISAL_ID
and F.EP_ROLE = 'M'
and F.EP_SEQ_NUM = 10
and F.EP_SECTION_TYPE = 'SUMMARY'
and NOT EXISTS (SELECT 'X' FROM PS_FPAREVIEW_HIST FPAHIST3 WHERE FPAHIST3.EP_APPRAISAL_ID = E.EP_APPRAISAL_ID)
order by D.NAME

END-SELECT

END-PROCEDURE SELECT-EVAL



!-------------------------------------------
! Procedure TOTAL-EVAL
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE TOTAL-EVAL

 ! Compute the average
 !--------------------
 let #moyenne =  #totreview_rating / #nb_notes


 ! Compute the "perequation" constant
 !----------------------------------------------------
 let #const_pereq = #moyenne_gene - #moyenne

 if $arrondi = 'Y'
  let #constante = #const_pereq
  do arrondir(#constante, #const_pereq )
 end-if

 print '|'      (+1,50,1)
 print '|'      (,67,1)
 print '|'      (,89,1)
 print $nom_eval (+1,1,50)
 print '|'      (,50,1)
 print #moyenne (,+3,14)
 print '|'      (,67,1)
 print #nb_notes  (,+3,10)
 print '|'      (,89,1)
 print #const_pereq (,+3,10)

let $sql-statement = 'FPA030.SQR, TOTAL-EVAL ,Insert,PS_FPMPEREQUAT_TMP'
BEGIN-SQL On-Error=SQL-Error
INSERT INTO PS_FPMPEREQUAT_TMP
(OPRID,
 FP_AVG_TYPE,
 REVIEWER_ID,
 FP_CORPS_CD,
 REVIEW_FROM_DT,
 REVIEW_THRU_DT,
 FP_AVERAGE,
 FP_MARK_NB,
 FP_ADJUSTMNT_CST,
 EMPLID,
 EMPL_RCD,
 EP_REVIEW_TYPE,
 EP_REVIEW_STATUS,
 EP_RATING,
 CREATION_DT,
 EP_APPRAISAL_ID)
values
($prcs_oprid,
 'N',
 $emplid ,
 $nom_corps,
 {DATEIN-PREFIX}$FromDate{DATEIN-SUFFIX},
 {DATEIN-PREFIX}$ThruDate{DATEIN-SUFFIX},
 #moyenne,
 #nb_notes,
 #const_pereq,
 ' ',
 0,
 ' ',
 ' ',
 0,
 NULL,
 0)

END-SQL

 let #nb_notes = 0
 let #totreview_rating = 0

END-PROCEDURE TOTAL-EVAL

!-------------------------------------------
! Procedure Insert-ReviewerID(&F.EP_APPRAISAL_ID, $emplid)
!-------------------------------------------
! Description : Store the reviewer ID for each appraisal
! In  : $appraisalid, $emplid
! Out : none
!-------------------------------------------
BEGIN-PROCEDURE Insert-ReviewerID($appraisalid, $emplid)

BEGIN-SQL On-Error=SQL-Error
INSERT INTO PS_FPMREVIEWER_TMP
(OPRID,
 EP_APPRAISAL_ID,
 REVIEWER_ID)
 values ($_prcs_oprid,
 $appraisalid,
 $emplid)
END-SQL
END-PROCEDURE Insert-ReviewerID

!-------------------------------------------
! Description : Store the reviewe
! In  : none
! Out : none
!-------------------------------------------
BEGIN-PROCEDURE Insert-Review
BEGIN-SQL On-Error=SQL-Error
INSERT INTO PS_FPMPEREQUAT_TMP
(OPRID,
 FP_AVG_TYPE,
 REVIEWER_ID,
 FP_CORPS_CD,
 REVIEW_FROM_DT,
 REVIEW_THRU_DT,
 FP_AVERAGE,
 FP_MARK_NB,
 FP_ADJUSTMNT_CST,
 EMPLID,
 EMPL_RCD,
 EP_REVIEW_TYPE,
 EP_REVIEW_STATUS,
 EP_RATING,
 CREATION_DT,
 EP_APPRAISAL_ID)
values
($prcs_oprid,
 'I',
 &D.EMPLID,
 $nom_corps,
 {DATEIN-PREFIX}$FromDate{DATEIN-SUFFIX},
 {DATEIN-PREFIX}$ThruDate{DATEIN-SUFFIX},
 0,
 0,
 0,
 &E.EMPLID,
 &E.EMPL_RCD,
 &E.EP_REVIEW_TYPE,
 &E.EP_REVIEW_STATUS,
 &F.EP_RATING,
 &E.CREATION_DT,
 &E.EP_APPRAISAL_ID)

END-SQL
END-PROCEDURE Insert-Review



!-------------------------------------------
! Procedure ARRONDIR(#const_pereq,:#arrondi)
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
BEGIN-PROCEDURE ARRONDIR(#const_pereq,:#arrondi)

! standard rounding with a precision = 1/4
!-----------------------------------------------------------------

 let #decimal = (#const_pereq - floor(#const_pereq) ) * 100
 let #n = floor (#decimal/25)
 if ( ((#n + 1) * 25 ) - #decimal) < 25/2
  let #decimal = ((#n + 1) * 25  )/100
 else
  let #decimal = (#n * 25 ) / 100
 end-if
 let #arrondi = floor(#const_pereq) + #decimal

END-PROCEDURE ARRONDIR

!-------------------------------------------
! Procedure Get-Reviewer-Name($emplid, :$emplid_name)
!-------------------------------------------
! Description : Get Name from PERSON_NAME record
! In  : $emplid
! Out : $emplid_name
!-------------------------------------------
BEGIN-PROCEDURE Get-Reviewer-Name($emplid, :$emplid_name)

BEGIN-SELECT
D.NAME
 let $emplid_name  = rtrim($emplid,' ' )||'  '||rtrim(&D.NAME,' ' )
FROM PS_PERSON_NAME D
WHERE D.EMPLID = $emplid
END-SELECT
END-PROCEDURE Get-Reviewer-Name



#Include 'fptestdt.sqc'         ! Routines for date and time formatting
#Include 'eputils.sqc'          ! Get reviewer API fonctions
#include 'curdttim.sqc'         ! Get-Current-DateTime procedure
#include 'stdapi.sqc'           ! Routines to update run status
#Include 'hrrnctl1.sqc'         ! Get run control parameter values
#Include 'fprnctl1.sqc'         ! Get run control parameter values
#Include 'fpgetval.sqc'         ! Get values mask routines
#Include 'hrgetval.sqc'         ! Get values mask routines
#Include 'number.sqc'           ! Routines to format numbers
#include 'sqrtrans.sqc'         ! Translate SQR strings to given language
#Include 'hrsecty.sqc'          ! Get SQR Security parameters
