!***********************************************************************
!  BEN008/BEN009:  Section 415 Reports                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:40:17                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment

begin-setup
  #Include 'ptpsl177.sqc'
end-setup

!Note: BEN008 and BEN009 are complete clones of each other, except for
!the following defines, which turn on one report or the other.
#define BEN008  !This defines the BEN008 Section 415 Status Report
!#define BEN009  !This defines the BEN009 Section 415 Non-Compliance Report

#define lines_on_page   56
#define col_sep                  1   !Column Separator
#define col_empl_id              8   !Employee ID
#define col_eff_dt              10   !Eff Date
#define col_spcl_accum           5   !Specl Accum
#define col_ben_prog             3   !Ben Pgm
#define col_pct_earns            7   !Max % earns
#define col_ded_ytd_max         10   !Max Yearly Deduction
#define col_earn_amt            12   !Earnings Amount
#define col_allowed_ded         12   !Max Allowed Deduction
#define col_plan_type1           6   !Plan Type
#define col_ben_plan1            8   !Benefit Plan
#define col_amount1             12   !Amount
#define col_plan_type2           6   !Plan Type
#define col_ben_plan2            8   !Benefit Plan
#define col_amount2             12   !Amount
#define col_plan_type3           6   !Plan Type
#define col_ben_plan3            8   !Benefit Plan
#define col_amount3             12   !Amount
#define col_total               16   !Total
#define col_over_under_lim      12   !Over Limit/Under Limit

!***************************************
begin-program
!***************************************

  do Init-Report
  do Process-Main

  display 'Report Ended at: ' noline
  do Display-Time

  do Reset
  do Stdapi-Term

end-program

!***************************************
begin-procedure Init-Report
!***************************************
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Stdapi-Init
  if $Prcs_Process_Instance = ''
    do Ask-As-Of-Date
  else
    do Select-Parameters
    do Get-As-Of-Date
  end-if

  do Get-Date-Codes
  let #AsOfYYYY = to_number($AsOfYYYY)
  let #AsOfMM   = to_number($AsOfMonth)

#ifdef BEN008
  move 'BEN008' to $ReportID
#else
  move 'BEN009' to $ReportID
#end-if
  do Get-Report-Language
  display $ReportID
  display $ReportTitle

  Display 'Report Begin at: ' noline
  Do Display-Time

  do Array-Create
  do Initialize-Arrays
  do Get-Calendar-Year-Id

  let #Plan_Offset = {col_empl_id} + {col_eff_dt} + {col_spcl_accum}
  let #Plan_Offset = #Plan_Offset + {col_pct_earns} +  {col_ded_ytd_max} + {col_earn_amt} + {col_allowed_ded}
  let #Plan_Offset = #Plan_Offset + (6 * {col_sep})

end-procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
  do Init_Report_Translation('BEN008', $Language_Cd)
  do Append_Report_Translation('BEN009')
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN008', 'EXCLUDED',     $BEN008-EXCLUDED,    #CW)
  do Get_Field_Information ('BEN008', 'IMPUTED',      $BEN008-IMPUTED,     #CW)
  do Get_Field_Information ('BEN008', 'PLNS_TO_LIM',  $BEN008-PLNS-TO-LIM, #CW)
  do Get_Field_Information ('BEN008', 'SPCL',         $BEN008-SPCL,        #CW)
  do Get_Field_Information ('BEN008', 'MAX_PCT',      $BEN008-MAX-PCT,     #CW)
  do Get_Field_Information ('BEN008', 'EARNINGS',     $BEN008-EARNINGS,    #CW)
  do Get_Field_Information ('BEN008', 'ACCUM',        $BEN008-ACCUM,       #CW)
  do Get_Field_Information ('BEN008', 'EARNS',        $BEN008-EARNS,       #CW)
  do Get_Field_Information ('BEN008', 'BASE_MAX',     $BEN008-BASE-MAX,    #CW)
  do Get_Field_Information ('BEN008', 'UND_LIM',      $BEN008-UND-LIM,     #CW)
  do Get_Field_Information ('BEN008', 'TOT_EXCLD',    $BEN008-TOT-EXCLD,   #CW)
  do Get_Field_Information ('BEN008', 'TOT_IMPUT',    $BEN008-TOT-IMPUT,   #CW)
  do Get_Field_Information ('BEN008', 'TOT_INCLD',    $BEN008-TOT-INCLD,   #CW)
  do Get_Field_Information ('BEN008', 'MAX_YEARLY',   $BEN008-MAX-YEARLY,  #CW)
  do Get_Field_Information ('BEN008', 'MAX_ALLOWED',  $BEN008-MAX-ALLOWED,  #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'PLAN',         $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',      $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',   'BEN',          $BEN1-BEN,           #CW)
  do Get_Field_Information ('BEN1',   'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'TYPE',         $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'PGM',          $BEN1-PROGRAM,       #CW)
  do Get_Field_Information ('BEN1',   'AMT',          $BEN1-AMT,           #CW)
  do Get_Field_Information ('BEN1',   'EFFECTIVE',    $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'DEDCTON',      $BEN1-DEDUCTION,     #CW)

#ifdef BEN008
  do Get_Field_Information ('BEN008', 'REPORT_TITLE', $ReportTitle,     #CW)
  do Get_Field_Information ('BEN008', 'OVER_LIM',     $OVER-LIM-STR,    #CW)
#else
  do Get_Field_Information ('BEN009', 'REPORT_TITLE', $ReportTitle,     #CW)
  do Get_Field_Information ('BEN009', 'OVER_LIM',     $OVER-LIM-STR,    #CW)
#end-if

End-Procedure

!***************************************
begin-heading 7
!***************************************

  #Include 'stdhtr03.sqc'

!Column Heading line 1
  print ''                        (+2,1,#PLAN_Offset)
  print $BEN008-PLNS-TO-LIM       (0,+{col_sep})
  print '------------:'           ()
  print $BEN008-EXCLUDED          (0,+{col_sep})
  print '------------------:'     ()
  print $BEN008-IMPUTED           (0,+{col_sep})
  print '-------------------:'    ()
#ifdef BEN008
  print $BEN1-AMT                 (0,+{col_sep})
#end-if

!Column Heading line 2
  print $BEN1-EMPLOYEE            (+1,1,{col_empl_id})
  print $BEN1-EFFECTIVE           (0,+{col_sep},{col_eff_dt})
  print $BEN008-SPCL              (0,+{col_sep},{col_spcl_accum})
  print $BEN008-MAX-PCT           (0,+{col_sep},{col_pct_earns})
  print $BEN008-MAX-YEARLY        (0,+{col_sep},{col_ded_ytd_max})
  print $BEN008-EARNINGS          (0,+{col_sep},{col_earn_amt})
  print $BEN008-MAX-ALLOWED       (0,+{col_sep},{col_allowed_ded})
  print $BEN1-PLAN                (0,+{col_sep},{col_plan_type1})
  print $BEN1-BENEFIT             (0,+{col_sep},{col_ben_plan1})
  print ''                        (0,+{col_sep},{col_amount1})
  print $BEN1-PLAN                (0,+{col_sep},{col_plan_type2})
  print $BEN1-BENEFIT             (0,+{col_sep},{col_ben_plan2})
  print ''                        (0,+{col_sep},{col_amount2})
  print $BEN1-PLAN                (0,+{col_sep},{col_plan_type3})
  print $BEN1-BENEFIT             (0,+{col_sep},{col_ben_plan3})
  print ''                        (0,+{col_sep},{col_amount3})
#ifdef BEN008
  print $OVER-LIM-STR             (0,+{col_sep},{col_over_under_lim})
#else
  print $BEN1-AMT                 (0,+{col_sep})
#end-if

!Column Heading line 3
  print $BEN1-ID                  (+1,1,{col_empl_id})
  print $BEN1-DATE                (0,+{col_sep},{col_eff_dt})
  print $BEN008-ACCUM             (0,+{col_sep},{col_spcl_accum})
  print $BEN008-EARNS             (0,+{col_sep},{col_pct_earns})
  print $BEN1-DEDUCTION           (0,+{col_sep},{col_ded_ytd_max})
  print $BEN1-AMT                 (0,+{col_sep},{col_earn_amt})
  print $BEN1-DEDUCTION           (0,+{col_sep},{col_allowed_ded})
  print $BEN1-TYPE                (0,+{col_sep},{col_plan_type1})
  print $BEN1-PLAN                (0,+{col_sep},{col_ben_plan1})
  print $BEN1-AMT                 (0,+{col_sep},{col_amount1})
  print $BEN1-TYPE                (0,+{col_sep},{col_plan_type2})
  print $BEN1-PLAN                (0,+{col_sep},{col_ben_plan2})
  print $BEN1-AMT                 (0,+{col_sep},{col_amount2})
  print $BEN1-TYPE                (0,+{col_sep},{col_plan_type3})
  print $BEN1-PLAN                (0,+{col_sep},{col_ben_plan3})
  print $BEN1-AMT                 (0,+{col_sep},{col_amount3})
#ifdef BEN008
  print $BEN008-UND-LIM           (0,+{col_sep},{col_over_under_lim})
#else
  print $OVER-LIM-STR             (0,+{col_sep},{col_over_under_lim})
#end-if

!Column Heading line 4
  print '='                       (+1,1,{col_empl_id})                Fill
  print '='                       (0,+{col_sep},{col_eff_dt})         Fill
  print '='                       (0,+{col_sep},{col_spcl_accum})     Fill
  print '='                       (0,+{col_sep},{col_pct_earns})      Fill
  print '='                       (0,+{col_sep},{col_ded_ytd_max})    Fill
  print '='                       (0,+{col_sep},{col_earn_amt})       Fill
  print '='                       (0,+{col_sep},{col_allowed_ded})    Fill
  print '='                       (0,+{col_sep},{col_plan_type1})     Fill
  print '='                       (0,+{col_sep},{col_ben_plan1})      Fill
  print '='                       (0,+{col_sep},{col_amount1})        Fill
  print '='                       (0,+{col_sep},{col_plan_type2})     Fill
  print '='                       (0,+{col_sep},{col_ben_plan2})      Fill
  print '='                       (0,+{col_sep},{col_amount2})        Fill
  print '='                       (0,+{col_sep},{col_plan_type3})     Fill
  print '='                       (0,+{col_sep},{col_ben_plan3})      Fill
  print '='                       (0,+{col_sep},{col_amount3})        Fill
  print '='                       (0,+{col_sep},{col_over_under_lim}) Fill

end-heading

!***************************************
begin-procedure Array-Create
!***************************************

  create-array name=ExcInc_Tbl size=50    -
  field=Exclude_YTD:number                -
  field=Exclude_PLAN_TYPE:char            -
  field=Exclude_BENEFIT_PLAN:char         -
  field=Include_YTD:number                -
  field=Include_PLAN_TYPE:char            -
  field=Include_BENEFIT_PLAN:char         -
  field=Imputed_YTD:number                -
  field=Imputed_PLAN_TYPE:char            -
  field=Imputed_BENEFIT_PLAN:char

end-procedure


!***************************************
begin-procedure Process-Main
!***************************************

#ifdef debugF
  display 'FLOW : Process-Main'
  display ''
#end-if

#ifdef debugD
  display '  DATA: Run Year : '  noline
  display #AsOfYYYY
  display '        Run Month: '  noline
  display #AsOfMM
  display ''
#end-if

begin-SELECT

C.LIMIT_TYPE
C.EFFDT
C.ERNCD_SPCL
C.PCT_OF_SALARY
C.DED_YTD_MAX

  Do Process-Employee

FROM PS_LIMIT_TBL C
WHERE C.LIMIT_TYPE = '415'
  AND C.EFFDT =
         (SELECT MAX(EFFDT)
            FROM PS_LIMIT_TBL
            WHERE LIMIT_TYPE      = C.LIMIT_TYPE
              AND EFFDT          <= $AsOfDate)

end-SELECT

end-procedure


!***************************************
begin-procedure Process-Employee
!***************************************

#ifdef debugF
  display 'FLOW : Process-Employee'
  display ''
#end-if

  move 'Y' to $First_Time
  move ' ' to $Common_ID
  move ' ' to $Company
  move ' ' to $Emplid
  move 0 to #Total_Exclude
  move 0 to #Total_Include
  move 0 to #Total_Imputed

begin-SELECT
A.COMPANY
A.EMPLID
A.EMPL_RCD
A.BALANCE_ID
A.BALANCE_YEAR
A.BALANCE_PERIOD
A.GRS_YTD
B.EFFDT
B.ERNCD
B.ERNCD_SPCL
H.COMMON_PAY_ID
H.COMMON_OTH_ID

  if &A.EMPLID <> $Emplid

    if #Total_Exclude > 0
          or #Total_Include > 0
          or #Total_Imputed > 0
        do Compare-Base-Includes
    end-if

    let $Emplid = &A.EMPLID
    move ' ' to $Common_ID
    move ' ' to $Company
    move 0 to #Total_Exclude
    move 0 to #Total_Include
    move 0 to #Total_Imputed
  end-if

  Do Check-Common-ID

  if $Same_PayMaster = 'Y'
    if &A.Company <> $Company
        do Get-Excluded
        do Get-Included
        do Get-Imputed
        add #Exclude_Amount to #Total_Exclude
        add #Include_Amount to #Total_Include
        add #Imputed_Amount to #Total_Imputed
        move &A.Company to $Company
    end-if

    add &A.Grs_YTD to #Total_Grs_YTD

    #ifdef debugD
      display '  DATA: EarnCd: '      noline
      display &B.ERNCD                noline
      display ' has GRS: '            noline
      display &A.Grs_YTD              noline
      display ' yielding Total GRS: ' noline
      display #Total_Grs_YTD
      display ''
    #end-if

  else

    if #Total_Exclude > 0
            or #Total_Include > 0
            or #Total_Imputed > 0
        do Compare-Base-Includes
    end-if

    do Initialize-PayMaster

  end-if


FROM PS_EARNINGS_SPCL B,
     PS_EARNINGS_BAL  A,
     PS_COMPANY_TBL   H
WHERE B.ERNCD_SPCL = &C.ERNCD_SPCL
  AND B.EFFDT =
      (SELECT MAX(B1.EFFDT)
        FROM PS_EARNINGS_SPCL B1
         WHERE B1.ERNCD      = B.ERNCD
           AND B1.ERNCD_SPCL = B.ERNCD_SPCL
           AND B1.EFFDT     <= $AsOfDate )
  AND A.BALANCE_ID     = $Calendar_Year_Id
  AND A.BALANCE_YEAR   = #AsOfYYYY
  AND A.ERNCD          = B.ERNCD
  AND A.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_EARNINGS_BAL
       WHERE EMPLID          = A.EMPLID
         AND COMPANY         = A.COMPANY
         AND EMPL_RCD        = A.EMPL_RCD
         AND BALANCE_ID      = A.BALANCE_ID
         AND BALANCE_YEAR    = A.BALANCE_YEAR
         AND ERNCD           = A.ERNCD
         AND SPCL_BALANCE    = A.SPCL_BALANCE
         AND BALANCE_PERIOD <= #AsOfMM)
  AND H.COMPANY = A.COMPANY
  AND H.EFF_STATUS = 'A'
  AND H.EFFDT =
      (SELECT MAX(H1.EFFDT)
         FROM PS_COMPANY_TBL H1
         WHERE H1.COMPANY = H.COMPANY
           AND H1.EFFDT  <= $AsOfDate )

ORDER BY A.EMPLID ASC,
         H.COMMON_PAY_ID ASC,
         H.COMMON_OTH_ID ASC,
         A.COMPANY ASC
end-SELECT

  if #Total_Exclude > 0
          or #Total_Include > 0
          or #Total_Imputed > 0
        do Compare-Base-Includes
  end-if

end-procedure


!***************************************
begin-procedure Check-Common-ID
!***************************************

  move 'Y' to $Same_PayMaster
  move $Common_ID to $Prior_Common_ID

  #ifdef debugD
    display '  DATA: Prior Company: '  noline
    display $Company
    display '      : Prior Common : '  noline
    display $Common_ID
  #end-if

  if &H.Common_Pay_Id <> ' '
    if &H.Common_Pay_Id <> $Common_ID
      move 'N' to $Same_PayMaster
      move &H.Common_Pay_Id to $Common_ID
    end-if
  else
    if &H.Common_Oth_Id <> ' '
      if &H.Common_Oth_Id <> $Common_ID
        move 'N' to $Same_PayMaster
        move &H.Common_Oth_Id to $Common_ID
      end-if
    else
      if &A.Company <> $Company
        move 'N' to $Same_PayMaster
      end-if
    end-if
  end-if

  #ifdef debugD
    display '      : This Company : '  noline
    display &A.Company
    display '      : Common Pay   : '  noline
    display &H.Common_Pay_Id
    display '      : Common Oth   : '  noline
    display &H.Common_Oth_Id
    display '      : New Common   : '  noline
    display $Common_ID
    display '      : PayMaster Flg: '  noline
    if $Same_PayMaster = 'N'
      display 'PayMaster Break'
    else
      display 'PayMaster Match'
    end-if
    display ''
  #end-if

end-procedure


!****************************************
begin-procedure Initialize-PayMaster
!****************************************

    move &A.Company to $Company
    move &H.Common_Pay_Id to $Common_ID

    do Initialize-Arrays
    do Get-Excluded
    do Get-Included
    do Get-Imputed
    move #Exclude_Amount to #Total_Exclude
    move #Include_Amount to #Total_Include
    move #Imputed_Amount to #Total_Imputed

    move &A.Grs_YTD          to #Total_Grs_YTD
    move &B.ErnCd_Spcl       to $ErnCd_Spcl
    move &C.Pct_Of_Salary    to $Pct_Of_Salary

    #ifdef debugD
      display '  DATA: EarnCd: '      noline
      display &B.ERNCD                noline
      display ' has GRS: '            noline
      display &A.Grs_YTD              noline
      display ' yielding Total GRS: ' noline
      display #Total_Grs_YTD
      display ''
    #end-if

end-procedure


!***************************************
begin-procedure Compare-Base-Includes
!***************************************

#ifdef debugF
  display 'FLOW : Compare-Base-Includes'
  display ''
#end-if

  let #Temp_Base = #Total_Grs_YTD - #Total_Exclude + #Total_Imputed
  let #Max_Ded_Allowed = #Temp_Base * (&C.Pct_Of_Salary / 100)

  #ifdef debugD
    display '  DATA: Total Earns : ' noline
    display #Temp_Base
    display '      : 415 Max Pct : ' noline
    display &C.Pct_Of_Salary         noline
    display ' giving Pct Limit: '    noline
    display #Max_Ded_Allowed
    display '      : 415 Max Ded : ' noline
    display &C.Ded_YTD_Max           noline
  #end-if

  if #Max_Ded_Allowed  > &C.Ded_YTD_Max
    let #Max_Ded_Allowed = &C.Ded_YTD_Max
  end-if

  #ifdef debugD
    display ' giving Ded Limit: '    noline
    display #Max_Ded_Allowed
  #end-if

  let #Amount_Over  = 0
  let #Amount_Under = 0

  if #Total_Include > #Max_Ded_Allowed
    let #Amount_Over = #Total_Include - #Max_Ded_Allowed
  end-if
  if #Max_Ded_Allowed >= #Total_Include
    let #Amount_Under = #Max_Ded_Allowed - #Total_Include
  end-if

  #ifdef debugD
    display '  DATA: Under : ' noline
    display #Amount_Under      noline
    display ' Over: '          noline
    display #Amount_Over
  #end-if

#ifdef BEN008
    do print-exceptions
#else
  if (#Amount_Over > 0)
    do print-exceptions
  end-if
#end-if

end-procedure


!***************************************
begin-procedure Get-Excluded
!***************************************

#ifdef debugF
  display 'FLOW : Get-Excluded'
#end-if

  let #EIxc_Dex         = 0
  let #Exclude_Amount   = 0

begin-SELECT
E.BENEFIT_RCD_NBR
E.PLAN_TYPE
E.BENEFIT_PLAN
E.DEDCD
E.DED_CLASS
E.DED_YTD

  #ifdef debugD
    display '  DATA: Found '    noline
    display &E.BENEFIT_RCD_NBR  noline
    display '/'                 noline
    display &E.PLAN_TYPE        noline
    display '/'                 noline
    display &E.BENEFIT_PLAN
  #end-if

  add &E.Ded_YTD to #Exclude_Amount
  move 0 to #EIxc_Dex

  WHILE #EIxc_Dex <= #Max_EIxc_Dex

    GET    #Exclude_YTD          -
           $Exclude_PLAN_TYPE    -
           $Exclude_BENEFIT_PLAN -
    from   EXCINC_TBL(#EIXC_DEX) -
           EXCLUDE_YTD           -
           EXCLUDE_PLAN_TYPE     -
           EXCLUDE_BENEFIT_PLAN

    if &E.PLAN_TYPE = $Exclude_PLAN_TYPE
        and &E.BENEFIT_PLAN = $Exclude_BENEFIT_PLAN

      add &E.Ded_YTD to #Exclude_YTD

      PUT  #Exclude_YTD          -
      INTO EXCINC_TBL(#EIXC_DEX) -
        EXCLUDE_YTD

      #ifdef debugD
        display '  DATA: Matched on index ' noline
        display #EIxc_Dex   noline
        display ' of '      noline
        display #Max_EIxc_Dex
      #end-if

      break
    else
      if $Exclude_PLAN_TYPE = ' '
          and $Exclude_BENEFIT_PLAN = ' '

        PUT    &E.Ded_YTD            -
               &E.PLAN_TYPE          -
               &E.BENEFIT_PLAN       -
        INTO   EXCINC_TBL(#EIXC_DEX) -
               EXCLUDE_YTD           -
               EXCLUDE_PLAN_TYPE     -
               EXCLUDE_BENEFIT_PLAN

        break
      else
        add 1 to #EIxc_Dex
      end-if
    end-if

  END-WHILE

  if #EIxc_Dex > #Max_EIxc_Dex

    PUT    &E.Ded_YTD            -
           &E.PLAN_TYPE          -
           &E.BENEFIT_PLAN       -
    INTO   EXCINC_TBL(#EIXC_DEX) -
           EXCLUDE_YTD           -
           EXCLUDE_PLAN_TYPE     -
           EXCLUDE_BENEFIT_PLAN

    let #Max_EIxc_Dex = #EIxc_Dex

    #ifdef debugD
      display '  DATA: Inserted as index ' noline
      display #EIxc_Dex
    #end-if

  end-if

FROM PS_LIMIT_EXCLD_TBL D,
     PS_DEDUCTION_BAL   E

WHERE D.LIMIT_TYPE      = &C.Limit_Type
  AND D.EFFDT           = &C.EffDt
  AND D.PLAN_TYPE       = E.PLAN_TYPE
  AND D.BENEFIT_PLAN    = E.BENEFIT_PLAN
  AND ((D.PLAN_TYPE     = '00'
  AND D.DEDCD           = E.DEDCD)
   Or (D.PLAN_TYPE      <> '00'))
  AND D.DED_CLASS       = E.DED_CLASS
  AND E.EMPLID          = &A.EmplID
  AND E.COMPANY         = &A.Company
  AND E.BALANCE_ID      = &A.Balance_ID
  AND E.BALANCE_YEAR    = &A.Balance_Year
  AND E.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_DEDUCTION_BAL
       WHERE EMPLID          = E.EMPLID
         AND COMPANY         = E.COMPANY
         AND BALANCE_ID      = E.BALANCE_ID
         AND BALANCE_YEAR    = E.BALANCE_YEAR
         AND BENEFIT_RCD_NBR = E.BENEFIT_RCD_NBR
         AND PLAN_TYPE       = E.PLAN_TYPE
         AND BENEFIT_PLAN    = E.BENEFIT_PLAN
         AND DEDCD           = E.DEDCD
         AND DED_CLASS       = E.DED_CLASS
         AND BALANCE_PERIOD <= #AsOfMM)
ORDER BY E.PLAN_TYPE ASC,
         E.BENEFIT_PLAN ASC,
         E.DEDCD ASC,
         E.DED_CLASS ASC
end-SELECT

  if #EIxc_Dex > #Max_EIxc_Dex
    let #Max_EIxc_Dex = #EIxc_Dex
  end-if

#ifdef debugD
  display '  DATA: Total Exclude: ' noline
  display #Exclude_Amount
  display ''
#end-if

end-procedure


!***************************************
begin-procedure Get-Included
!***************************************

#ifdef debugF
  display 'FLOW : Get-Included'
#end-if

  let #EIxc_Dex         = 0
  let #Include_Amount   = 0

begin-SELECT
G.BENEFIT_RCD_NBR
G.PLAN_TYPE
G.BENEFIT_PLAN
G.DEDCD
G.DED_CLASS
G.DED_YTD

  #ifdef debugD
    display '  DATA: Found '    noline
    display &G.BENEFIT_RCD_NBR  noline
    display '/'                 noline
    display &G.PLAN_TYPE        noline
    display '/'                 noline
    display &G.BENEFIT_PLAN
  #end-if

  add &G.Ded_YTD to #Include_Amount
  move 0 to #EIxc_Dex

  WHILE #EIxc_Dex <= #Max_EIxc_Dex

    GET   #Include_YTD           -
          $Include_PLAN_TYPE     -
          $Include_BENEFIT_PLAN  -
    from   EXCINC_TBL(#EIXC_DEX) -
           INCLUDE_YTD           -
           INCLUDE_PLAN_TYPE     -
           INCLUDE_BENEFIT_PLAN

    if &G.PLAN_TYPE = $Include_PLAN_TYPE
        and &G.BENEFIT_PLAN = $Include_BENEFIT_PLAN

      add &G.Ded_YTD to #Include_YTD

      PUT  #Include_YTD          -
      INTO EXCINC_TBL(#EIXC_DEX) -
        INCLUDE_YTD

      #ifdef debugD
        display '  DATA: Matched on index ' noline
        display #EIxc_Dex   noline
        display ' of '      noline
        display #Max_EIxc_Dex
      #end-if

      break
   else
     if $Include_PLAN_TYPE = ' '
          and $Include_BENEFIT_PLAN = ' '

        PUT    &G.Ded_YTD            -
               &G.PLAN_TYPE          -
               &G.BENEFIT_PLAN       -
        INTO   EXCINC_TBL(#EIXC_DEX) -
               INCLUDE_YTD           -
               INCLUDE_PLAN_TYPE     -
               INCLUDE_BENEFIT_PLAN

        break
      else
        add 1 to #EIxc_Dex
      end-if
   end-if

  END-WHILE

  if #EIxc_Dex > #Max_EIxc_Dex

    PUT   &G.Ded_YTD             -
          &G.PLAN_TYPE           -
          &G.BENEFIT_PLAN        -
    INTO   EXCINC_TBL(#EIXC_DEX) -
           INCLUDE_YTD           -
           INCLUDE_PLAN_TYPE     -
           INCLUDE_BENEFIT_PLAN

    let #Max_EIxc_Dex = #EIxc_Dex

    #ifdef debugD
      display '  DATA: Inserted as index ' noline
      display #EIxc_Dex
    #end-if

  end-if

FROM PS_LIMIT_INCLD_TBL F,
     PS_DEDUCTION_BAL   G

WHERE F.LIMIT_TYPE      = &C.Limit_Type
  AND F.EFFDT           = &C.EffDt
  AND F.PLAN_TYPE       = G.PLAN_TYPE
  AND F.BENEFIT_PLAN    = G.BENEFIT_PLAN
  AND ((F.PLAN_TYPE     = '00'
  AND F.DEDCD           = G.DEDCD)
   Or (F.PLAN_TYPE      <> '00'))
  AND F.DED_CLASS       = G.DED_CLASS
  AND G.EMPLID          = &A.EmplID
  AND G.COMPANY         = &A.Company
  AND G.BALANCE_ID      = &A.Balance_ID
  AND G.BALANCE_YEAR    = &A.Balance_Year
  AND G.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_DEDUCTION_BAL
       WHERE EMPLID          = G.EMPLID
         AND COMPANY         = G.COMPANY
         AND BALANCE_ID      = G.BALANCE_ID
         AND BALANCE_YEAR    = G.BALANCE_YEAR
         AND BENEFIT_RCD_NBR = G.BENEFIT_RCD_NBR
         AND PLAN_TYPE       = G.PLAN_TYPE
         AND BENEFIT_PLAN    = G.BENEFIT_PLAN
         AND DEDCD           = G.DEDCD
         AND DED_CLASS       = G.DED_CLASS
         AND BALANCE_PERIOD <= #AsOfMM)
ORDER BY G.PLAN_TYPE ASC,
         G.BENEFIT_PLAN ASC,
         G.DEDCD ASC,
         G.DED_CLASS ASC
end-SELECT

  if #EIxc_Dex > #Max_EIxc_Dex
    let #Max_EIxc_Dex = #EIxc_Dex
  end-if

#ifdef debugD
  display '  DATA: Total Include: ' noline
  display #Include_Amount
  display ''
#end-if

end-procedure


!***************************************
begin-procedure Get-Imputed
!***************************************

#ifdef debugF
  display 'FLOW : Get-Imputed'
#end-if

  let #EIxc_Dex         = 0
  let #Imputed_Amount   = 0

begin-SELECT
J.BENEFIT_RCD_NBR
J.PLAN_TYPE
J.BENEFIT_PLAN
J.DEDCD
J.DED_CLASS
J.DED_YTD

  #ifdef debugD
    display '  DATA: Found '    noline
    display &J.BENEFIT_RCD_NBR  noline
    display '/'                 noline
    display &J.PLAN_TYPE        noline
    display '/'                 noline
    display &J.BENEFIT_PLAN
  #end-if

  add &J.Ded_YTD to #Imputed_Amount
  move 0 to #EIxc_Dex

  WHILE #EIxc_Dex <= #Max_EIxc_Dex

    GET   #Imputed_YTD           -
          $Imputed_PLAN_TYPE     -
          $Imputed_BENEFIT_PLAN  -
    from   EXCINC_TBL(#EIXC_DEX) -
           IMPUTED_YTD           -
           IMPUTED_PLAN_TYPE     -
           IMPUTED_BENEFIT_PLAN

    if &J.PLAN_TYPE = $Imputed_PLAN_TYPE
        and &J.BENEFIT_PLAN = $Imputed_BENEFIT_PLAN

      add &J.Ded_YTD to #Imputed_YTD

      PUT  #Imputed_YTD          -
      INTO EXCINC_TBL(#EIXC_DEX) -
        IMPUTED_YTD

      #ifdef debugD
        display '  DATA: Matched on index ' noline
        display #EIxc_Dex   noline
        display ' of '      noline
        display #Max_EIxc_Dex
      #end-if

      break
   else
     if $Imputed_PLAN_TYPE = ' '
          and $Imputed_BENEFIT_PLAN = ' '

        PUT    &J.Ded_YTD            -
               &J.PLAN_TYPE          -
               &J.BENEFIT_PLAN       -
        INTO   EXCINC_TBL(#EIXC_DEX) -
               IMPUTED_YTD           -
               IMPUTED_PLAN_TYPE     -
               IMPUTED_BENEFIT_PLAN

        break
      else
        add 1 to #EIxc_Dex
      end-if
   end-if

  END-WHILE

  if #EIxc_Dex > #Max_EIxc_Dex

    PUT   &J.Ded_YTD             -
          &J.PLAN_TYPE           -
          &J.BENEFIT_PLAN        -
    INTO   EXCINC_TBL(#EIXC_DEX) -
           IMPUTED_YTD           -
           IMPUTED_PLAN_TYPE     -
           IMPUTED_BENEFIT_PLAN

    let #Max_EIxc_Dex = #EIxc_Dex

    #ifdef debugD
      display '  DATA: Inserted as index ' noline
      display #EIxc_Dex
    #end-if

  end-if

FROM PS_LIMIT_IMPIN_TBL I,
     PS_DEDUCTION_BAL   J

WHERE I.LIMIT_TYPE      = &C.Limit_Type
  AND I.EFFDT           = &C.EffDt
  AND I.PLAN_TYPE       = J.PLAN_TYPE
  AND I.BENEFIT_PLAN    = J.BENEFIT_PLAN
  AND ((I.PLAN_TYPE     = '00'
  AND I.DEDCD           = J.DEDCD)
   Or (I.PLAN_TYPE      <> '00'))
  AND I.DED_CLASS       = J.DED_CLASS
  AND J.EMPLID          = &A.EmplID
  AND J.COMPANY         = &A.Company
  AND J.BALANCE_ID      = &A.Balance_ID
  AND J.BALANCE_YEAR    = &A.Balance_Year
  AND J.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_DEDUCTION_BAL
       WHERE EMPLID          = J.EMPLID
         AND COMPANY         = J.COMPANY
         AND BALANCE_ID      = J.BALANCE_ID
         AND BALANCE_YEAR    = J.BALANCE_YEAR
         AND BENEFIT_RCD_NBR = J.BENEFIT_RCD_NBR
         AND PLAN_TYPE       = J.PLAN_TYPE
         AND BENEFIT_PLAN    = J.BENEFIT_PLAN
         AND DEDCD           = J.DEDCD
         AND DED_CLASS       = J.DED_CLASS
         AND BALANCE_PERIOD <= #AsOfMM)
ORDER BY J.PLAN_TYPE ASC,
         J.BENEFIT_PLAN ASC,
         J.DEDCD ASC,
         J.DED_CLASS ASC
end-SELECT

  if #EIxc_Dex > #Max_EIxc_Dex
    let #Max_EIxc_Dex = #EIxc_Dex
  end-if

#ifdef debugD
  display '  DATA: Total Imputed: ' noline
  display #Imputed_Amount
  display ''
#end-if

end-procedure


!***************************************
begin-procedure print-exceptions
!***************************************

#ifdef debugF
  display 'FLOW : Print-Exceptions'
  display ''
#end-if

  do Format-DateTime(&C.EffDt, $EffDt, {DEFDATE}, '', '')
  do Format-Number(&C.PCT_OF_SALARY, $Pct_Of_Salary, '999.999')
  do Format-Number(&C.DED_YTD_MAX, $Ded_YTD_Max,   '999,999.99')
  do Format-Number(#Max_Ded_Allowed,  $Max_Allowed,   '9,999,999.99')
  do Format-Number(#Total_Grs_YTD, $Grs_YTD,       '9,999,999.99')
  do Format-Number(#Total_Exclude, $Total_Exclude, '9,999,999.99')
  do Format-Number(#Total_Include, $Total_Include, '9,999,999.99')
  do Format-Number(#Total_Imputed, $Total_Imputed, '9,999,999.99')
  do Format-Number(#Amount_Over,   $Amount_Over,   '9,999,999.99')
  do Format-Number(#Amount_Under,  $Amount_Under,  '9,999,999.99')

  print $Emplid              (+3,1,{col_empl_id})
  print $EffDt               (0,+{col_sep},{col_eff_dt})
  print $ErnCd_Spcl          (0,+{col_sep},{col_spcl_accum})
  print $Pct_Of_Salary       (0,+{col_sep},{col_pct_earns})
  print $Ded_YTD_Max         (0,+{col_sep},{col_ded_ytd_max})
  print $Grs_YTD             (0,+{col_sep},{col_earn_amt})
  print $Max_Allowed         (0,+{col_sep},{col_allowed_ded})

  let #EIxc_Dex = 0
  let #Detail_Line = 0

  while #EIxc_Dex <= #Max_EIxc_Dex

    get    #Exclude_YTD          -
           $Exclude_PLAN_TYPE    -
           $Exclude_BENEFIT_PLAN -
           #Include_YTD          -
           $Include_PLAN_TYPE    -
           $Include_BENEFIT_PLAN -
           #Imputed_YTD          -
           $Imputed_PLAN_TYPE    -
           $Imputed_BENEFIT_PLAN -
    from   ExcInc_Tbl(#EIxc_Dex) -
           Exclude_YTD           -
           Exclude_PLAN_TYPE     -
           Exclude_BENEFIT_PLAN  -
           Include_YTD           -
           Include_PLAN_TYPE     -
           Include_BENEFIT_PLAN  -
           Imputed_YTD           -
           Imputed_PLAN_TYPE     -
           Imputed_BENEFIT_PLAN

    if #Exclude_YTD > 0 or #Include_YTD > 0 or #Imputed_YTD > 0

      if #Detail_Line > 0
        print ''                    (+1,1,#Plan_Offset)
      end-if

      print $Include_PLAN_TYPE    (0,+{col_sep},{col_plan_type1})
      print $Include_BENEFIT_PLAN (0,+{col_sep},{col_ben_plan1})
      do Format-Number(#Include_YTD, $Include_YTD, '9,999,999.99')
      print $Include_YTD          (0,+{col_sep},{col_amount1})

      print $Exclude_PLAN_TYPE    (0,+{col_sep},{col_plan_type2})
      print $Exclude_BENEFIT_PLAN (0,+{col_sep},{col_ben_plan2})
      do Format-Number(#Exclude_YTD, $Exclude_YTD, '9,999,999.99')
      print $Exclude_YTD          (0,+{col_sep},{col_amount2})

      print $Imputed_PLAN_TYPE    (0,+{col_sep},{col_plan_type3})
      print $Imputed_BENEFIT_PLAN (0,+{col_sep},{col_ben_plan3})
      do Format-Number(#Imputed_YTD, $Imputed_YTD, '9,999,999.99')
      print $Imputed_YTD          (0,+{col_sep},{col_amount3})

      if #Detail_Line = 0
        print $Amount_Over          (0,+{col_sep},{col_over_under_lim})
        add 1 to #Detail_Line
#ifdef BEN008
        print '/'                   ()
      else
        if #Detail_Line = 1
            print $Amount_Under     (0,+{col_sep},{col_over_under_lim})
            add 1 to #Detail_Line
        end-if
#end-if
      end-if

    end-if

    add 1 to #EIxc_Dex
  end-while

  print ''                    (+1,1,#Plan_Offset)
  print $BEN008-TOT-INCLD     (0,+{col_sep},{col_total})
  print $Total_Include        ()
  print $BEN008-TOT-EXCLD     (0,+{col_sep},{col_total})
  print $Total_Exclude        ()
  print $BEN008-TOT-IMPUT     (0,+{col_sep},{col_total})
  print $Total_Imputed        ()

#ifdef BEN008
  if #Detail_Line = 1
     print $Amount_Under     (0,+{col_sep},{col_over_under_lim})
  end-if
#end-if

end-procedure


!***************************************
begin-procedure Initialize-Arrays
!***************************************

  let #EIxc_Dex = 0

  while #EIxc_Dex < 50
    put    0                     -
           ' '                   -
           ' '                   -
           0                     -
           ' '                   -
           ' '                   -
           0                     -
           ' '                   -
           ' '                   -
    into   ExcInc_Tbl(#EIxc_Dex) -
           Exclude_YTD           -
           Exclude_PLAN_TYPE     -
           Exclude_BENEFIT_PLAN  -
           Include_YTD           -
           Include_PLAN_TYPE     -
           Include_BENEFIT_PLAN  -
           Imputed_YTD           -
           Imputed_PLAN_TYPE     -
           Imputed_BENEFIT_PLAN
    add 1 to #EIxc_Dex
  end-while

  let #Max_EIxc_Dex  = 0

end-procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!***************************************

#Include 'reset1.sqc'     !Reset printer procedure
#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!************************** End of Program *****************************
