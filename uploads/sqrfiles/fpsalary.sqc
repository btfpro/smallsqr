!***********************************************************************
!  FPSALARY.SQC
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:53:26                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

!***********************************************************************
!
! Salary computation functions : change amount and change percentage computation, salary.
!
!***********************************************************************

#include 'setenv.sqc'

!****************************************************************
!
! Get-Comprate : Get compensation rate  and pay frequency
!
!       IN      $Emplid         Emplid
!               $Empl_rcd       Empl_rcd
!               $Effdt          Effective date
!               #Sequence       Sequence
!
!       OUT     $Frequency      Frequency
!               #Comprate       Salary
!               $Currency_cd    Currency
!
!
!
!****************************************************************

BEGIN-PROCEDURE Get-Comprate ($Emplid,#Empl_rcd,$Effdt,#Sequence,
:$Frequency,:#Comprate,:$Currency_cd )

let $_sql-statement = 'fpsalary.sqc,Get-Comprate,Select,PS_FPAEESALARY'
BEGIN-SELECT On-Error=SQL-Error

A.COMP_FREQUENCY
A.COMPRATE,
A.CURRENCY_CD,

        Let #Comprate = &A.COMPRATE
        Let $Frequency = &A.COMP_FREQUENCY
        Let $Currency_cd = &A.CURRENCY_CD

from PS_FPAEESALARY A
where A.EMPLID = $Emplid
and   A.EMPL_RCD = #Empl_rcd
and   A.EFFDT = {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX}
and   A.EFFSEQ = #Sequence

END-SELECT

END-PROCEDURE Get-Comprate


!****************************************************************
!
! Get-Rates  : Get compensation rates according to point type and increased index
!
!
!
!       IN      $Pointyp_cd     Point type
!               $Incs_Ind       Increased index
!               $Effdt          Effective date
!
!       OUT     #Annual_rt      Annual rate
!               #Monthly_rt     Monthly rate
!               #Hourly_rt      Hourly rate
!
!****************************************************************

BEGIN-PROCEDURE Get-Rates  ($Pointyp_cd,#Incs_Ind,$Effdt,
                            :#Annual_rt,:#Monthly_rt,:#Hourly_rt)


let $_sql-statement = 'fpasalary.sqc,Calc-Rates,Select,PS_FPMINDEXAMT_TBL'
BEGIN-SELECT On-Error=SQL-Error

A.FP_ANNL_AMT
A.FP_MONTH_AMT
A.FP_HOUR_AMT

        Let #Annual_rt = &A.FP_ANNL_AMT
        Let #Monthly_rt = &A.FP_MONTH_AMT
        Let #Hourly_rt = &A.FP_HOUR_AMT

from PS_FPMINDEXAMT_TBL A
where A.FP_POINTYP_CD = $Pointyp_cd
and   A.FP_INCS_IND   = #Incs_Ind
and   A.EFFDT         =
        (SELECT max(EFFDT) from PS_FPMINDEXAMT_TBL B
        where B.FP_POINTYP_CD = $Pointyp_cd
        and   B.FP_INCS_IND   = #Incs_Ind
        and   B.EFFDT        <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Rates


!****************************************************************
!
! Calc-Comprate:  Compensation computation
!
!
!       IN      $Frequency      Frequency
!               #Annual_rt      Annual Rate
!               #Monthly_rt     Monthly Rate
!               #Hourly_rt      Hourly Rate
!
!       OUT     #Comprate       Compensation Rate
!
!****************************************************************

BEGIN-PROCEDURE Calc-Comprate ($Frequency,#Annual_rt,#Monthly_rt,#Hourly_rt,
                               :#Comprate)

EVALUATE $Frequency
when ='H'
        let #Comprate = #Hourly_rt
        break
when ='M'
        let #Comprate = #Monthly_rt
        break
when ='A'
        let #Comprate = #Annual_rt
        break
when ='D'
        let #Comprate = #Annual_rt/365
        break
when ='W'
        let #Comprate = #Annual_rt/52
        break
when ='B'
        let #Comprate = #Annual_rt/26
        break
when ='S'
        let #Comprate = #Annual_rt/24
        break
when ='Q'
        let #Comprate = #Annual_rt/4
        break
END-EVALUATE

END-PROCEDURE Calc-Comprate


!****************************************************************
!
! Calc-Change:  Change in amount and percentage
!
!
!       IN      #Comprate       Comprate
!               #Last_Comprate  Last Comprate
!
!       OUT     #Change_amt     Change Amount
!               #Change_pct     Percentage Amount
!
!****************************************************************

BEGIN-PROCEDURE Calc-Change (#Comprate,#Last_Comprate,
                               :#Change_amt,:#Change_pct)


let #Change_amt = #Comprate - #Last_Comprate
display 'Changement : ' noline
display #Change_amt

!***************************************************************
! Percentage amount
!***************************************************************

if #Last_Comprate != 0

   let #Change_pct = ( #Change_amt / #Last_Comprate ) * 100
   Display '#Pourcentage:' noline
   Display #Change_pct
   if (#Change_pct > 0 and #Change_pct < 0.1 ) or
      (#Change_pct > -0.1 and #Change_pct < 0 )
      let #Change_pct = 0
   else
      if #Change_pct > 999.999
         let #Change_pct = 999.999
      else
         if #Change_pct < -999.999
            let #Change_pct = -999.999
         end-if
      end-if
   end-if
else
   let #Change_pct = 0
end-if

END-PROCEDURE Calc-Change



!****************************************************************
!
! Get-Pointyp : Get point type
!
!       IN      $Matrix_Typ     Matrix type
!               $Matrix_Cd      Matrix
!               $Scale_cd       Scale
!               $Effdt          Effective Date
!
!       OUT     $Pointyp_cd     Point Type Code
!
!****************************************************************

BEGIN-PROCEDURE Get-Pointyp ($Matrix_Typ,$Matrix_Cd,$Scale_cd,
                             $Effdt,:$Pointyp_cd )


let $sql-statement = 'fpaparam.sqc,Get-Pointyp,Select,PS_FPMSALMATRX_TBL'
BEGIN-SELECT On-Error=SQL-Error

A.FP_POINTYP_CD

        Let $Pointyp_cd=&A.FP_POINTYP_CD

from PS_FPMSALMATRX_TBL  A
where A.FP_MATRIX_TYP = $Matrix_Typ
and   A.FP_MATRIX_CD  = $Matrix_Cd
and   A.FP_SCALE_CD   = $Scale_cd
and   A.EFF_STATUS = 'A'
and   A.EFFDT         =
        (SELECT max(B.EFFDT) from PS_FPMSALMATRX_TBL B
        where B.FP_MATRIX_TYP =  $Matrix_Typ
        and   B.FP_MATRIX_CD  =  $Matrix_Cd
        and   B.FP_SCALE_CD   =  $Scale_cd
        and   B.EFFDT         <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Pointyp

!****************************************************************
!
! Get-Indexes : Get Indexes
!
!       IN      $Matrix_Typ     Matrix Type
!               $Matrix_Cd      Matrix
!               $Scale_Cd       Scale
!               $Effdt          Effective Date
!               $Step_Cd        Step
!
!       OUT     #Gross_Ind      Gross Index
!               #Incs_Ind       Increased Index
!               $Step_Chv       Step/Sub-scale
!               #annl_amt       Annual Amount
!
!****************************************************************

BEGIN-PROCEDURE Get-Indexes ($Matrix_Typ,$Matrix_Cd,$Scale_Cd,
                             $Effdt,$Step_Cd,:#Gross_Ind,:#Incs_Ind,:$Step_Chv,:#annl_amt)

        let $scale_cd = rtrim($scale_cd,' ')
        if $scale_cd = ''
               let $scale_cd = ' '
        end-if

let $sql-statement = 'fpsalary.sqc,Get-Indexes,Select,PS_FPMSALSTEP_TBL'
BEGIN-SELECT On-Error=SQL-Error

S.FP_GROSS_IND
S.FP_INCS_IND
S.FP_STP_CHV_LBL
S.FP_ANNL_AMT

        Let #Gross_Ind = &S.FP_GROSS_IND
        Let #Incs_Ind = &S.FP_INCS_IND
        Let $Step_Chv = rtrim(&S.FP_STP_CHV_LBL,' ')
        Let #annl_amt = &S.FP_ANNL_AMT

    display $effdt

from PS_FPMSALSTEP_TBL S
where S.FP_MATRIX_TYP = $Matrix_Typ
and   S.FP_MATRIX_CD  = $Matrix_Cd
and   S.FP_SCALE_CD   = $Scale_Cd
and   S.FP_STEP_CD    = $Step_Cd
and   S.EFFDT         =
        (SELECT max(S1.EFFDT) from PS_FPMSALSTEP_TBL S1
        where S1.FP_MATRIX_TYP =  $Matrix_Typ
        and   S1.FP_MATRIX_CD  =  $Matrix_Cd
        and   S1.FP_SCALE_CD   =  $Scale_Cd
        and   S1.EFFDT         <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Indexes




!*****************************************!
!      procedure Get-Matrix-Scale         !
!*****************************************!


BEGIN-PROCEDURE Get-Matrix-Scale($SETID,$RANK_CD,$EFFDT,:$MATRIX_TYP,:$MATRIX_CD,:$SCALE_CD)

Let $sql-statement = 'fpsalary.sqc,Get-Matrix-Scale,select,FPMRANK_TBL'
BEGIN-SELECT On-Error=SQL-Error

AA.FP_MATRIX_TYP,
AA.FP_MATRIX_CD,
AA.FP_SCALE_CD

   let $MATRIX_TYP = &AA.FP_MATRIX_TYP
   let $MATRIX_CD = &AA.FP_MATRIX_CD
   let $SCALE_CD = &AA.FP_SCALE_CD

FROM PS_FPMRANK_TBL AA
WHERE AA.SETID = $SETID
AND AA.FP_RANK_CD = $RANK_CD
AND   AA.EFF_STATUS = 'A'
  AND AA.EFFDT =
        (SELECT max(BB.EFFDT)
        from PS_FPMRANK_TBL BB
        where BB.SETID = AA.SETID
        and   BB.FP_RANK_CD =  AA.FP_RANK_CD
        and   BB.EFFDT <= {DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX})

END-SELECT
END-PROCEDURE Get-Matrix-Scale


!*****************************************!
!         procedure Get-Matrix            !
!*****************************************!


BEGIN-PROCEDURE Get-Matrix($SETID,$JOBCODE,$EFFDT,:$MATRIX_TYP,:$MATRIX_CD)

Let $sql-statement = 'fpsalary.sqc,Get-Matrix,select,JOB'
BEGIN-SELECT On-Error=SQL-Error

CC.FP_MATRIX_TYP,
CC.FP_MATRIX_CD

   let $MATRIX_TYP = &CC.FP_MATRIX_TYP
   let $MATRIX_CD  = &CC.FP_MATRIX_CD

FROM PS_JOBCODE_TBL CC
WHERE CC.SETID = $SETID
  AND CC.JOBCODE = $JOBCODE
  AND CC.EFF_STATUS = 'A'
  AND CC.EFFDT =
        (SELECT max(DD.EFFDT)
        from PS_JOBCODE_TBL DD
        where DD.SETID = CC.SETID
        and   DD.JOBCODE =  CC.JOBCODE
        and   DD.EFFDT <= {DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX})

END-SELECT
END-PROCEDURE Get-Matrix-Scale

!***************************************************************
!
! GetWPain-Comprate  Determine compensation rate
!
! called by : FPA110.SQR
!
! following variables must be previously affected...
!   $W_Salmatrx_EE      CONTRAT
!   $W_Rank             CAREER
!   $W_Chg_Ind          CAREER
!   $W_Step_Car         CAREER
!   $W_Chg_Sal          POST
!   $W_Step_Pos         POST
!   $W_Jobcode          POST
!   #W_Gross_Ind        SALARY
!   #W_Incs_Ind         SALARY
!   $W_Pointyp          SALARY
!   #W_Comprate         SALARY
!   #W_Hourly           SALARY
!   #W_Monthly          SALARY
!   #W_Annual           SALARY
!   #W_Frequency        SALARY
!
!***************************************************************

BEGIN-PROCEDURE GetWPain-Comprate

!*** Get frequency if null
if RTRIM($W_Frequency,' ')=''
   do Get-Frequency ($W_Frequency)
end-if

!*** A Rank is defined...
if $W_Rank <> ''
    !if $W_Chg_Ind = 'N' or #W_Incs_Ind = 0
        do Get-Matrix-Scale($W_Setid_rank, $W_Rank ,$W_Effdt, $W_Matrix_Typ, $W_Matrix_cd, $W_Scale_cd)
        do Get-Pointyp($W_Matrix_Typ, $W_Matrix_cd, $W_Scale_cd, $W_Effdt, $W_Pointyp)
     if $W_Chg_Ind = 'N'
        do Get-Indexes($W_Matrix_Typ, $W_Matrix_cd, $W_Scale_cd, $W_Effdt, $W_Step_Car,
                #W_Gross_Ind, #W_Incs_Ind,$W_Step_Chv,#W_annl_amt)
     end-if
        do Get-Rates($W_Pointyp,#W_Incs_Ind,$W_Effdt,#W_Annual ,#W_Monthly,#W_Hourly)
        do Calc-Comprate($W_Frequency,#W_Annual ,#W_Monthly,#W_Hourly,#W_Comprate)

    !end-if
else
    !*** Else explore Assignment...
    if $W_Step_Pos <> ''
        if $W_Chg_Sal = 'N' or (#W_Incs_Ind = 0 and #W_Comprate = 0)
            do Get-Matrix($W_Setid_jobcd, $W_Jobcode, $W_Effdt, $W_Matrix_Typ, $W_Matrix_cd)
            let $W_Scale_cd = ' '
            do Get-Pointyp($W_Matrix_Typ, $W_Matrix_cd, $W_Scale_cd, $W_Effdt, $W_Pointyp_cd)
            do Get-Indexes($W_Matrix_Typ, $W_Matrix_cd, $W_Scale_cd,
                         $W_Effdt, $W_Step_Pos, #W_Gross_Ind, #W_Incs_Ind,$W_Step_Chv,#W_annl_amt)
            do Get-Rates($W_Pointyp,#W_Incs_Ind,$W_Effdt,#W_Annual ,#W_Monthly,#W_Hourly)
            do Calc-Comprate($W_Frequency,#W_Annual ,#W_Monthly,#W_Hourly,#W_Comprate)
        end-if
    end-if
end-if

display '*** GetWPain-Comprate ***'
display $W_Salmatrx_EE
display $W_Rank
display $W_Chg_Ind
display $W_Step_Car
display $W_Chg_Sal
display $W_Step_Pos
display $W_Jobcode
display   #W_Gross_Ind
display   #W_Incs_Ind
display   $W_Pointyp
display   #W_Comprate
display   #W_Hourly
display   #W_Monthly
display   #W_Annual
display   #W_Frequency
display '*** ... GetWPain-Comprate ***'

END-PROCEDURE GetWPain-Comprate
