! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!  compare_numerics                                                    *
!***********************************************************************
!  SQR has a known problem where numeric values are not properly       *
!  being compared, especially if one of the values is "fixed" and the  *
!  other is calculated.  The problem has to do with the SQR            *
!  implementation of numerics as double-precision floating points, and *
!  their usage of the native OS floating point conversion routines,    *
!  which are sometimes imprecise, depending on the values.             *
!  This subroutine is an implementation of MITI's suggested workaround *
!  to the problem, which is to assign the numerics to string variables *
!  and then truncate off the low order digits                          *
!***********************************************************************
!  Input:                                                              *
!    #value1    the first value to be compared                         *
!    #value2    the second value to be compared                        *
!    #scale     the number of digits to the right of the decimal place *
!               to treat as significant for comparison purposes        *
!  Output:                                                             *
!    #result    the result of the comparison between the values:       *
!                 1 if they are equal                                  *
!                 2 if value1 is less than value2                      *
!                 3 if value1 is greater than value2                   *
!***********************************************************************
#define COMP_NUM_EQUAL          1
#define COMP_NUM_LESS_THAN      2
#define COMP_NUM_GREATER_THAN   3

begin-procedure compare_numerics (#value1, #value2, #scale, :#result)
#ifdef debugx
  display 'Entering COMPNUM.SQC: compare_numerics'
  display ' Input #value1: ' noline
  display #value1
  display ' Input #value2: ' noline
  display #value2
  display ' Input #scale: ' noline
  display #scale
#end-if

  move '099999999999999.999999999999999' to $comp_mask
  let #comp_baselen = instr($comp_mask, '.', 1)
  let #comp_numlen = #comp_baselen + #scale

  move #value1 to #adj_value1
  do Adjust_Number (#adj_value1)
  move #adj_value1 to $comp_val1 :$comp_mask
  let $comp_val1 = substr($comp_val1, 1, #comp_numlen)

  move #value2 to #adj_value2
  do Adjust_Number (#adj_value2)
  move #adj_value2 to $comp_val2 :$comp_mask
  let $comp_val2 = substr($comp_val2, 1, #comp_numlen)

#ifdef debugx
  #ifdef debugy
    display '  $comp_val1: ' noline
    display $comp_val1
    display '  $comp_val2: ' noline
    display $comp_val2
  #end-if
#end-if

  if $comp_val1 = $comp_val2
    let #result = {COMP_NUM_EQUAL}
  else
    if $comp_val1 < $comp_val2
      let #result = {COMP_NUM_LESS_THAN}
    else
      let #result = {COMP_NUM_GREATER_THAN}
    end-if
  end-if

#ifdef debugx
  display 'Exiting COMPNUM.SQC: compare_numerics'
  display ' Output #result: ' noline
  display #result
#end-if
end-procedure                    ! compare_numerics
