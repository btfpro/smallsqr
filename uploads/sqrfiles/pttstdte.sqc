! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!***********************************************************************
!  PTTSTDTE: PeopleTools SQR Testing - DATE Logic                      *
!***********************************************************************
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
! This SQC include the common code for use by PTTESTV3.SQR and
! PTTESTV4.SQR

!**********************************************************************
Begin-Procedure TestDatelogic
!**********************************************************************
    show {Stars}
    show 'DATE LOGIC TESTING (' {Native-DateTimeMask} ')'
    show {Stars}
    do TestCurDtTim
    show {Stars}
    do TestDateTime
    show {Stars}
    do TestDateMath
    show {Stars}
    do TestDateSQL
    show {Stars}
    do TestDateValidation


  #ifdef PTVer
    #if {PTVer} = '8'
      show {Stars}
      do TestGlobalDateTime
    #end-if
  #end-if


End-Procedure


!**********************************************************************
Begin-Procedure TestCurDtTim
!   It is tough to test this through an automated test, but, it will
!   take the variables populated in CURDTTIM.SQC and convert them into
!   SQR Date Variables.  If this procdure does not fail, then the dates
!   are valid.  If the dates are invalid SQR will stop running.
!   The values surrounded by {} are defined in SETENV.SQC.  When the
!   SQR is run, they are converted to the literal value.
!   For info on the strtodate function refer to the LET command on the
!   SQR Language Reference manual
!**********************************************************************

    show 'Current DateTime Testing'
    show {Dashes}


    let $error  = {No}
    let $Testid = 'Current_DateTime_Test:'

! Check if the variables are not null or blank
    If IsBlank($SysDateTime) or IsBlank($AsOfToday)  or IsBlank($AsOfNow) or
       IsBlank($ReportDate)  or IsBlank($ReportTime) or IsBlank($CurrentCentury)
        let $error = {Yes}
! Convert above character variables to SQR Date Variables
    else
        let $wkDate = strtodate($SysDateTime,   {Native-DateTimeMask})
        let $wkDate = strtodate($AsOfToday,     {Native-DateMask})
        let $wkDate = strtodate($AsOfNow,       {Native-TimeMask})
        let $wkDate = strtodate($ReportDate,    {PTRPTDate})
        let $wkDate = strtodate($ReportTime,    {PTRPTTime})
    end-if

    do ShowTestStatus


#ifdef PTVer
  #if {PTVer} = '8'
! Now test the Client Current DateTime
    let $error  = {No}
    let $Testid = 'GetCurrentClientDateTime_Test:'

    do GetCurrentClientDateTime

! Check if the variables are not null or blank
    If IsBlank($ClientAsOfToday) or IsBlank($ClientAsOfNow)
        let $error = {Yes}
! Convert above character variables to SQR Date Variables
    else
        let $wkDate = strtodate($ClientAsOfToday,{Native-DateMask})
        let $wkDate = strtodate($ClientAsOfNow,  {Native-TimeMask})
    end-if

    do ShowTestStatus
  #end-if
#end-if

end-procedure


!**********************************************************************
begin-procedure TestDateTime
!**********************************************************************

    show 'DATETIME.SQC Testing'
    show {Dashes}

!***********************************************************************
!Format_DateTime_Test
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'Format_DateTime_Test:'

    let $TestDate  = '19980501123013'
    let $wkDate    = strtodate('19990305111212','YYYYMMDDHHMISS')
    let $TestDate1 = datetostr($wkdate,'YYYYMMDDHHMISS')

    do Format-DateTime_Test($TestDate)
    do Format-DateTime_Test($TestDate1)
    do Format-DateTime_Test('11111111111111')
    do Format-DateTime_Test('19720824235959')
    do Format-DateTime_Test('20000101000000')
    do Format-DateTime_Test('20040229000000')
    do Format-DateTime_Test('1999 1 2003500')
    do Format-DateTime_Test($TestDate)

    do ShowTestStatus

!-------------------------
!  Year 2K tests of Format_DateTime

    let $error  = {No}

    let $Testid = 'Format_DateTime_Test_Literals_Using_YY:'

    let $temp = $Year4

    let $Year4 = '0'
    do Format-DateTime('03/05/65',$Literal3,{DEFDATE},'','native')

    let $Year4 = '0'
    do Format-DateTime('06/10/08',$Literal4,{DEFDATE},'','native')

    let $Year4 = $temp

    if datetostr(strtodate($literal3,{Native-DateMask}),'YYYY') <> '1965' or
       datetostr(strtodate($literal4,{Native-DateMask}),'YYYY') <> '2008'
        move {Yes} to $error
    end-if

    do ShowTestStatus

!-------------------------
!  Passing Column Variable to Format_DateTime
    let $error  = {No}
    let $error1 = {No}
    let $error2 = {No}
    let $error3 = {No}
    let $error4 = {No}
    let $error5 = {No}
    let $error6 = {No}
    let $error7 = {No}
    let $error8 = {No}
    let $error9 = {No}

    let $Testid = 'Format_DateTime_Test_Using_Column_Variables:'

    do Format-DateTime(&Tst_DateTime,$ActResult,{DEFDATE},'time','')
    let $ExpResult = '03/05/1965 01:00:00'
    if $ActResult <> $ExpResult
        let $error1 = {Yes}
    end-if
    #ifdef debugd
        Show 'Col: &Tst_DateTime-->DEFDATE w/Time: ' $ActResult ' Expected: ' $ExpResult ' $Error1: ' $error1
    #end-if

    do Format-DateTime(&Tst_DateTime,$ActResult,{DEFDATE},'','')
    let $ExpResult = '03/05/1965'
    if $ActResult <> $ExpResult
        let $error2 = {Yes}
    end-if
    #ifdef debugd
        Show 'Col: &Tst_DateTime-->DEFDATE wo/Time: ' $ActResult ' Expected: ' $ExpResult ' $Error2: ' $error2
    #end-if

    do Format-DateTime(&Tst_Date,$ActResult,{DEFDATE},'','')
    let $ExpResult = '03/05/1965'
    if $ActResult <> $ExpResult
        let $error3 = {Yes}
    end-if
    #ifdef debugd
        Show 'Col: &Tst_Date-->DEFDATE: ' $ActResult ' Expected: ' $ExpResult ' $Error3: ' $error3
    #end-if

    do Format-DateTime(&Tst_Date_Wrap,$ActResult,{DEFDATE},'','')
    let $ExpResult = '03/05/1965'
    if $ActResult <> $ExpResult
        let $error4 = {Yes}
    end-if
    #ifdef debugd
        Show 'Col: &Tst_Date_Wrap-->DEFDATE wo/Time: ' $ActResult ' Expected: ' $ExpResult ' $Error4: ' $error4
    #end-if


    If $error1 = {Yes} or $error2 = {Yes} or
       $error3 = {Yes} or $error4 = {Yes} or
       $error5 = {Yes} or $error6 = {Yes} or
       $error7 = {Yes} or $error8 = {Yes} or
       $error9 = {Yes}
       let $Error = {Yes}
    end-if

    do ShowTestStatus

!***********************************************************************
!FormatNativeTime_Test
!  This is also tested in PTTSTTIM.SQC as part of TIMEMATH.SQC
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'FormatNativeTime_Test:'

    let $InDate     = '19490101112503'
    let #TestStart  = 9
    let $DDelimiter = ''
    let #Delimiter  = 0
    do FormatNativeTime_Test($InDate,$testTT,#testStart,#Delimiter)

!This test is only supported in PT 8, all previous version of PeopleTools would fail.
#ifdef PTVer
#if {PTVer} = '8'
    let $InDate     = '112503'
    let #TestStart  = 1
    let $DDelimiter = ''
    let #Delimiter  = 0
    do FormatNativeTime_Test($InDate,$testTT,#testStart,#Delimiter)
#end-if
#end-if

    let $InDate     = '1949/01/01 11:25:03'
    let #TestStart  = 12
    let $DDelimiter = '/'
    let #Delimiter  = 1
    do FormatNativeTime_Test($InDate,$testTT,#testStart,#Delimiter)

    let $InDate     = '11:25:03'
    let #TestStart  = 1
    let #Delimiter  = 1
    do FormatNativeTime_Test($InDate,$testTT,#testStart,#Delimiter)

    do ShowTestStatus

!***********************************************************************
!Diff-Date_Test/Diff-DateElapsed
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'Diff-Date_Test:'

    do Diff-Date_Test('20000101121212','19990401121212')
    do Diff-Date_Test('19000121121212','19990401121212')
    do Diff-Date_Test('18000121121212','19990401121212')
    do Diff-Date_Test('19990101121212','19990401121212')
    do Diff-Date_Test('29990101121212','19990401121212')
    do Diff-Date_Test('19990101121212','19990101121212')
    do Diff-Date_Test('19990101121212','19990402121212')

    do ShowTestStatus

!***********************************************************************
!Get_DateComponents_Test
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'Get_DateComponents_Test:'

    do Get-DateComponents_Test('19960224120812')
    do Get-DateComponents_Test('20120803000000')
    do Get-DateComponents_Test('19491231')


    do ShowTestStatus

!***********************************************************************
!MakeYear4Digits_Test
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'MakeYear4Digits_Test:'

    let $TestYear='98'
    Let $ExpectedYear='1998'
    do MakeYear4Digits_Test($TestYear,$ExpectedYear)

    let $TestYear='00'
    Let $ExpectedYear='2000'
    do MakeYear4Digits_Test($TestYear,$ExpectedYear)

    let $TestYear='49'
    Let $ExpectedYear='2049'
    do MakeYear4Digits_Test($TestYear,$ExpectedYear)

    let $TestYear='50'
    Let $ExpectedYear='1950'
    do MakeYear4Digits_Test($TestYear,$ExpectedYear)


    do ShowTestStatus


!***********************************************************************
!Count-LeapDays_Test
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'Count-LeapDays_Test:'

    do Count-LeapDays_Test('19490101112503','19490101112503',0)
    do Count-LeapDays_Test('20320229000000','20320229240000',0)
    do Count-LeapDays_Test('20000228003340','20010228456656',1)
    do Count-LeapDays_Test('20000301003340','20010228456656',0)

    do ShowTestStatus


end-procedure


!**********************************************************************
begin-procedure Format-DateTime_Test($TestDate)
!**********************************************************************

    #ifdef debugd
        show {Dashes}
        show 'Format-DateTime_Test: ' $TestDate
    #end-if

    if substr($testdate,1,2) <> '  '
        let $_wkDate = strtodate($TestDate, 'YYYYMMDDHHMISS')
    else
        let $_wkDate = strtodate(ltrim($TestDate,' '), 'RRMMDDHHMISS')
    end-if

    let $TestNativeDateTime = datetostr($_wkDate,{Native-DateTimeMask})
    let $TestNativeDate     = datetostr($_wkDate,{Native-DateMask})


!!!!!!!!!!!!!!!!!!!!!!!!!!!
!From NativeDateTime
!!!!!!!!!!!!!!!!!!!!!!!!!!

    let $ExpectedDateOut = datetostr($_wkDate,'YYYYMMDDHHMISS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFCMP},'time','')
    if  $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFCMP: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'MM/DD/YYYY HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFMDY},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFMDY: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'DD/MM/YYYY HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFDMY},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFDMY: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'YYYY/MM/DD HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFYMD},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFYMD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'MM/DD/YYYY HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFDATE},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFDATE0: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '1'
    let $ExpectedDateOut=datetostr($_wkDate,'DD/MM/YYYY HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFDATE},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFDATE1: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '2'
    let $ExpectedDateOut=datetostr($_wkDate,'YYYY/MM/DD HH:MI:SS')

    do Format-DateTime($TestNativeDateTime,$DateOut,{DEFDATE},'time','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeDT-->DEFDATE2: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if


!!!!!!!!!!!!!!!!!!!!!!!!!!!
!To NativeDateTime
!!!!!!!!!!!!!!!!!!!!!!!!!!

    let $ExpectedDateOut=datetostr($_wkDate,{Native-DateTimeMask})

    let $TestDateTime=datetostr($_wkDate,'YYYYMMDDHHMISS')

    do Format-DateTime($TestDateTime,$DateOut,{DEFCMP},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFCMP-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDateTime=datetostr($_wkDate,'MM/DD/YYYY HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFMDY},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFMDY-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDateTime=datetostr($_wkDate,'DD/MM/YYYY HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFDMY},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDMY-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDateTime=datetostr($_wkDate,'YYYY/MM/DD HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFYMD},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFYMD-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if


!=======================================================================
    let $TestDateTime=datetostr($_wkDate,'MM/DD/YYYY HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFDATE},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE0-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '1'
    let $TestDateTime=datetostr($_wkDate,'DD/MM/YYYY HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFDATE},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE1-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '2'
    let $TestDateTime=datetostr($_wkDate,'YYYY/MM/DD HH:MI:SS')
    do Format-DateTime($TestDateTime,$DateOut,{DEFDATE},'time','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE2-->NativeDT: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if


!!!!!!!!!!!!!!!!!!!!!!!!!!!
!From NativeDate (No Time)
!!!!!!!!!!!!!!!!!!!!!!!!!!

    let $ExpectedDateOut = datetostr($_wkDate,'YYYYMMDD')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFCMP},'','')
    if  $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFCMP: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'MM/DD/YYYY')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFMDY},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFMDY: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'DD/MM/YYYY')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFDMY},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFDMY: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'YYYY/MM/DD')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFYMD},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFYMD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $ExpectedDateOut=datetostr($_wkDate,'MM/DD/YYYY')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFDATE},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFDATE0: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '1'
    let $ExpectedDateOut=datetostr($_wkDate,'DD/MM/YYYY')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFDATE},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFDATE1: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '2'
    let $ExpectedDateOut=datetostr($_wkDate,'YYYY/MM/DD')

    do Format-DateTime($TestNativeDate,$DateOut,{DEFDATE},'','')
    if     $DateOut<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'NativeD-->DEFDATE2: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if


!!!!!!!!!!!!!!!!!!!!!!!!!!!
!To NativeDate
!!!!!!!!!!!!!!!!!!!!!!!!!!

    let $ExpectedDateOut=datetostr($_wkDate,{Native-DateMask})

    let $TestDate=datetostr($_wkDate,'YYYYMMDD')

    do Format-DateTime($TestDate,$DateOut,{DEFCMP},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFCMP-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDate=datetostr($_wkDate,'MM/DD/YYYY')
    do Format-DateTime($TestDate,$DateOut,{DEFMDY},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFMDY-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDate=datetostr($_wkDate,'DD/MM/YYYY')
    do Format-DateTime($TestDate,$DateOut,{DEFDMY},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDMY-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $TestDate=datetostr($_wkDate,'YYYY/MM/DD')
    do Format-DateTime($TestDate,$DateOut,{DEFYMD},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFYMD-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if


!=======================================================================
    let $TestDate=datetostr($_wkDate,'MM/DD/YYYY')
    do Format-DateTime($TestDate,$DateOut,{DEFDATE},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE0-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '1'
    let $TestDate=datetostr($_wkDate,'DD/MM/YYYY')
    do Format-DateTime($TestDate,$DateOut,{DEFDATE},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE1-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

!=======================================================================
    let $_DateType = '2'
    let $TestDate=datetostr($_wkDate,'YYYY/MM/DD')
    do Format-DateTime($TestDate,$DateOut,{DEFDATE},'','native')
    if     upper($DateOut)<>$ExpectedDateOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'DEFDATE2-->NativeD: ' $DateOut ',Expected: ' $ExpectedDateOut ',Error: ' $_error
    #end-if

end-procedure


!**********************************************************************
begin-procedure FormatNativeTime_Test($in,$tt,#start,#delimiter)
!**********************************************************************
    if #start <> 1
        if $_DDelimiter = ''
            let $_wkDate = strtodate($in,'YYYYMMDDHHMISS')
        else
            let $_wkDate = strtodate($in,'YYYY/MM/DD HH:MI:SS')
        end-if
    else
        if $_DDelimiter = ''
            let $_wkDate = strtodate($in,'HHMISS')
        else
            let $_wkDate = strtodate($in,'HH:MI:SS')
        end-if
    end-if

    let $ExpectedOut = datetostr($_wkDate,{Native-TimeMask})
    #ifdef DB2ALL
        if #start <> 1      !DB2 needs microseconds if used as part of a DateTime.
            let $ExpectedOut = datetostr($_wkDate,{Native-TimeMaskMS})
        end-if
    #end-if

    do formatNativeTime($in,$tt,#start,#delimiter,$TestTZone)

    if $tt <> $ExpectedOut
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'Got: ' $tt ',Expected: ' $ExpectedOut ',$tzone: ' $TestTzone ',Error: ' $_error
    #end-if

end-procedure

!**********************************************************************
begin-procedure Diff-Date_Test($DateCMP1,$DateCMP2)
!**********************************************************************
    declare-variable
        integer #ExpectedYears
        integer #ExpectedMonths
        integer #ExpectedDays
        integer #dY
        integer #dM
        integer #dD
    end-declare

    !convert to native format
    do Format-DateTime($DateCMP1,$DateNative1,{DEFCMP},'time','native')
    do Format-DateTime($DateCMP2,$DateNative2,{DEFCMP},'time','native')

    let $_wkDate1 =StrToDate($dateCMP1,'YYYYMMDDHHMISS')
    let $_wkDate2 =StrToDate($dateCMP2,'YYYYMMDDHHMISS')

    !Use SQR functions to anticipate correct results
    let #tmpvar = datediff($_wkDate1,$_wkDate2,'Year')
    let #ExpectedYears = trunc(#tmpvar,0)

    let #tmpvar = datediff($_wkDate1,$_wkDate2,'Month')
    let #ExpectedMonths = trunc(#tmpvar,0)

    let #tmpvar = datediff($_wkDate1,$_wkDate2,'Day')
    let #ExpectedDays = trunc(#tmpvar,0)

    do Diff-Date($DateNative1,$DateNative2,#dY,#dM,#dD)

    !check if it is right
    if #ExpectedYears<>#dY or #ExpectedMonths<>#dM or #ExpectedDays<>#dD
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'Using Dates: ' $DateNative2 ' and ' $DateNative1
        show '  Diff-Date       : ActY/ExpY: ' #dY '/' #ExpectedYears ' ActY/ExpY: ' #dM '/' #ExpectedMonths ' ActD/ExpD: ' #dD '/' #ExpectedDays ',Error: ' $_error
    #end-if

#ifdef PTVer
#if {PTVer} = '8'
  !Run same values through Diff-DateElapsed
  !Use SQR functions to anticipate correct results
    let #tmpvar         = datediff($_wkDate1,$_wkDate2,'Year')
    let #ExpectedYears = trunc(#tmpvar,0)

    let $_wkDate        = dateadd($_wkDate2,'year',#ExpectedYears)
    let #tmpvar         = datediff($_wkDate1,$_wkDate,'Month')
    let #ExpectedMonths = trunc(#tmpvar,0)

    let $_wkDate        = dateadd($_wkDate,'month',#ExpectedMonths)
    let #tmpvar         = datediff($_wkDate1,$_wkDate,'Day')
    let #ExpectedDays = trunc(#tmpvar,0)

    do Diff-DateElapsed($DateNative1,$DateNative2,#dY,#dM,#dD)

    !check if it is right
    if #ExpectedYears<>#dY or #ExpectedMonths<>#dM or #ExpectedDays<>#dD
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show '  Diff-DateElapsed: ActY/ExpY: ' #dY '/' #ExpectedYears ' ActY/ExpY: ' #dM '/' #ExpectedMonths ' ActD/ExpD: ' #dD '/' #ExpectedDays ',Error: ' $_error
    #end-if

#end-if
#end-if

end-procedure


!**********************************************************************
begin-procedure Get-DateComponents_Test($testdate)
!**********************************************************************
    declare-variable
        integer #TestYear
        integer #TestMonth
        integer #TestDay
        integer #outYear
        integer #outMonth
        integer #outDay
    end-declare


    let $_wkDate   = strtodate(substr($testdate,1,8), 'YYYYMMDD')
    let #TestYear  = datetostr($_wkDate,'YYYY')
    let #TestMonth = datetostr($_wkDate,'MM')
    let #TestDay   = datetostr($_wkDate,'DD')

    do Get-DateComponents($testdate ,#outYear,#outMonth,#outDay)

    if #TestYear<>#outYear or #TestMonth<>#outMonth or #TestDay<>#outDay
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActY/ExpY: ' #outYear '/' #TestYear ' ActM/ExpM: ' #outMonth '/' #TestMonth ' ActD/ExpD: ' #outDay '/' #TestDay ',Error: ' $_error
    #end-if

end-procedure

!**********************************************************************
begin-procedure MakeYear4Digits_Test($TestYear,$ExpectedYear)
!  This routine will create a warning message as follows:
! (SQR 7501) Using RR edit mask from (RR) against (YY)
!  This is due to SQR keeping track of whenever a 2 digit year is used
!  We use 'RR' to ensure that SQR will automatically keep track of
!  the century.  This message can be ignored and there is a way to supress
!  it, but we don't suggest doing that.
!**********************************************************************

    do MakeYear4Digits ($TestYear)
    if $TestYear<>$ExpectedYear
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActY/ExpY: ' $TestYear '/' $ExpectedYear ',Error: ' $_error
    #end-if

end-procedure

!**********************************************************************
begin-procedure Count-LeapDays_Test($testDate1,$testDate2,#testLeapCount)
!**********************************************************************

    do Count-LeapDays($testDate1,$testDate2,#outLeapCount)

    if #testLeapCount<>#outLeapCount
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActCount/ExpCount: ' #outLeapCount '/' #testLeapCount ',Error: ' $_error
    #end-if

end-procedure



!**********************************************************************
begin-procedure TestDateMath
!**********************************************************************

    show 'DATEMATH.SQC Testing'
    show {Dashes}

    let $wkDate = strtodate($AsOfToday, {Native-DateMask}) !used to verify all results
    let $error  = {No}

    #ifdef debugd
        show 'Date being used for test: ' $AsOfToday
    #end-if
!***********************************************************************
!Convert-To-DTU-Date_Test
!-----------------------------------------------------------------------

    let $Testid = 'Convert-To-DTU-Date_Test:'

    Do Convert-To-DTU-Date($AsOfToday, $dtu_date)

    If $dtu_date <> datetostr($wkDate,'YYYY-MM-DD')
        let $error = {Yes}
    end-if

    do ShowTestStatus


!***********************************************************************
!Convert-From-DTU-Date_Test
!-----------------------------------------------------------------------
    let $error  = {No}

    let $Testid = 'Convert-From-DTU-Date_Test:'

    Do Convert-From-DTU-Date($dtu_date, $out_date)

    let $out_date = upper($out_date)        !older versions of PeopleTools return MON part of date as 'Jan', should be 'JAN'

    If $out_date <> datetostr($wkDate,{Native-DateMask})
        let $error = {Yes}
    end-if

    do ShowTestStatus

!***********************************************************************
!Date_Math_Functions_Test
!  This test calls all of the Date Math functions in DATEMATH.SQC using
!  the value passed in.
!-----------------------------------------------------------------------

    let $Testid = 'Date_Math_Functions_Test:'

    do Date_Math_Functions_Test(0)
    do Date_Math_Functions_Test(1)
    do Date_Math_Functions_Test(31)
    do Date_Math_Functions_Test(100)
    do Date_Math_Functions_Test(365)
    do Date_Math_Functions_Test(-365)
    do Date_Math_Functions_Test(-100)
    do Date_Math_Functions_Test(-31)
    do Date_Math_Functions_Test(-1)
    do Date_Math_Functions_Test(1000)

    do ShowTestStatus

end-procedure

!**********************************************************************
begin-procedure Date_Math_Functions_Test(#ToChange)
!**********************************************************************

    declare-variable
        integer #dtu_value
        integer #ExpectedValue
    end-declare

    #ifdef debugd
        show 'Changing Dates by increments of ' #ToChange edit 99999
    #endif

!***********************************************************************
!dtu-add-days_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-add-days_Test:'

    do dtu-add-days($_dtu_date,#ToChange,$dtu_date_out)

    let $ExpectedDate = datetostr(dateadd($_wkDate,'day',#ToChange),'YYYY-MM-DD')
    If $dtu_date_out <> $ExpectedDate
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActDate/ExpectedDate: ' $dtu_date_out '/' $ExpectedDate '  (Add Days) Error: ' $_error
    #endif


!***********************************************************************
!dtu-subtract-days_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-subtract-days_Test:'

    do dtu-subtract-days($_dtu_date,#ToChange,$dtu_date_out)

    let $ExpectedDate = datetostr(dateadd($_wkDate,'day',-#ToChange),'YYYY-MM-DD')
    If $dtu_date_out <> $ExpectedDate
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActDate/ExpectedDate: ' $dtu_date_out '/' $ExpectedDate '  (Sub Days) Error: ' $_error
    #endif

!***********************************************************************
!dtu-add-weeks_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-add-weeks_Test:'

    do dtu-add-weeks($_dtu_date,#ToChange,$dtu_date_out)

    let $ExpectedDate = datetostr(dateadd($_wkDate,'week',#ToChange),'YYYY-MM-DD')
    If $dtu_date_out <> $ExpectedDate
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActDate/ExpectedDate: ' $dtu_date_out '/' $ExpectedDate '  (Add Weeks) Error: ' $_error
    #endif

!***********************************************************************
!dtu-add-months_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-add-months_Test:'

    do dtu-add-months($_dtu_date,#ToChange,$dtu_date_out)

    let $ExpectedDate = datetostr(dateadd($_wkDate,'month',#ToChange),'YYYY-MM-DD')
    If $dtu_date_out <> $ExpectedDate
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActDate/ExpectedDate: ' $dtu_date_out '/' $ExpectedDate '  (Add Months) Error: ' $_error
    #endif

!***********************************************************************
!dtu-add-years_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-add-years_Test:'

    do dtu-add-years($_dtu_date,#ToChange,$dtu_date_out)

    let $ExpectedDate = datetostr(dateadd($_wkDate,'year',#ToChange),'YYYY-MM-DD')
    If $dtu_date_out <> $ExpectedDate
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActDate/ExpectedDate: ' $dtu_date_out '/' $ExpectedDate '  (Add Years) Error: ' $_error
    #endif

!***********************************************************************
!dtu-diff-days_Test
!-----------------------------------------------------------------------
    let $_wkDate1 = strtodate($dtu_date_out,'YYYY-MM-DD')   !$dtu_date-our formated in previous test

    let $Testid = 'dtu-diff-days_Test:'

    do dtu-diff-days($_dtu_date,$dtu_date_out,#dtu_value)

    let #ExpectedValue = datediff($_wkDate1,$_wkdate,'day')
    If #dtu_value <> #ExpectedValue
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActValue/ExpectedValue: ' #dtu_value '/' #ExpectedValue '  (Diff Days) Error: ' $_error
    #endif

!***********************************************************************
!dtu-diff-months_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-diff-months_Test:'

    do dtu-diff-months($_dtu_date,$dtu_date_out,#dtu_value)

    let #ExpectedValue = trunc(datediff($_wkDate1,$_wkdate,'month'),0)
    If #dtu_value <> #ExpectedValue
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActValue/ExpectedValue: ' #dtu_value '/' #ExpectedValue '  (Diff Months) Error: ' $_error
    #endif

!***********************************************************************
!dtu-diff-years_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-diff-years_Test:'

    do dtu-diff-years($_dtu_date,$dtu_date_out,#dtu_value)

    let #ExpectedValue = trunc(datediff($_wkDate1,$_wkdate,'year'),0)
    If #dtu_value <> #ExpectedValue
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActValue/ExpectedValue: ' #dtu_value '/' #ExpectedValue '  (Diff Years) Error: ' $_error
    #endif

!***********************************************************************
!dtu-dayofweek#_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-dayofweek#_Test:'

    do dtu-dayofweek#($dtu_date_out, #dtu_value)

    let #ExpectedValue = to_number(datetostr($_wkDate1,'D'))

    If #dtu_value <> #ExpectedValue
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActValue/ExpectedValue: ' #dtu_value '/' #ExpectedValue '  (Day of Week#) Error: ' $_error
    #endif

!***********************************************************************
!dtu-dayofweek$_Test
!-----------------------------------------------------------------------

    let $Testid = 'dtu-dayofweek$_Test:'

    do dtu-dayofweek$($dtu_date_out, $dtu_dayofweek)

    let $ExpectedValue = upper(datetostr($_wkDate1,'Day'))

    If upper($dtu_dayofweek) <> $ExpectedValue
        let $_error = {Yes}
    end-if

    #ifdef debugd
        show 'ActValue/ExpectedValue: ' $dtu_dayofweek '/' $ExpectedValue '  (Day of Week) Error: ' $_error
    #endif

end-procedure


!**********************************************************************
begin-procedure TestDateMisc
!**********************************************************************

 !   show 'Misc Date Handling Testing'
 !   show {Dashes}


 !   let $Testid = 'Date_Misc_Test:'


 !   do ShowTestStatus

end-procedure

!**********************************************************************
begin-procedure TestDateSQL
!**********************************************************************

    show 'Date and SQL Testing'
    show {Dashes}

let #ASOF_ROWCOUNT=0

BEGIN-SELECT
H.ASOFDATE
   let #ASOF_ROWCOUNT=1
   exit-select
FROM PSASOFDATE H
END-SELECT


    do Date_Wrapper_Tests
if #ASOF_ROWCOUNT=1
    do Date_Select_Tests
    do Date_Where_Tests
else
   show 'Date_SQL_Tests: Skipped - No Rows Exist In PSASOFDATE'
   show 'Date_Where_Tests: Skipped - No Rows Exist In PSASOFDATE'
end-if

end-procedure

!**********************************************************************
Begin-Procedure  Date_Select_Tests
!**********************************************************************

    let $error  = {No}
    let $error1 = {No}
    let $error2 = {No}
    let $error3 = {No}
    let $error4 = {No}
    let $error5 = {No}

    let $Testid = 'Date_SQL_Tests:'

!-------------------------

BEGIN-SELECT ON-ERROR=TestFailed
A.ASOFDATE
   let $wkDate = &A.ASOFDATE
   let $NoType = &A.ASOFDATE
   let $NoTypeButPreAssigned = 'ABCDEFG'
   let $NoTypeButPreAssigned = &A.ASOFDATE
   let $NoTypeTrimmed = RTRIM(&A.ASOFDATE, ' ')
FROM PSASOFDATE A
END-SELECT

!Check if Variables are equal
    if ($wkDate               <> &A.ASOFDATE) or
       ($NoType               <> &A.ASOFDATE) or
       ($NoTypeButPreAssigned <> &A.ASOFDATE) or
       ($NoTypeTrimmed        <> &A.ASOFDATE)
        let $error1 = {Yes}
    end-if

    #ifdef debugd
        Show $Testid ' beginning.....'
        show 'Test1: &A,AsOfDate: ' &A.ASOFDATE ' $wkDate: ' $wkDate ' $NoType: ' $NoType ' $NoTypeButPreAssigned: ' $NoTypeButPreAssigned ' $NoTypeTrimmed: ' $NoTypeTrimmed noline
        show ' Error: ' $error1
    #end-if

!-------------------------

BEGIN-SELECT ON-ERROR=TestFailed
ASOFDATE   &Alias
   let $NoTypeFromAlias = &Alias
FROM PSASOFDATE
END-SELECT

!Check if Variables are equal
    if ($NoTypeFromAlias <> &Alias)
        let $error2 = {Yes}
    end-if

    #ifdef debugd
        show 'Test2: &Alias: ' &Alias ' $NoTypeFromAlias: ' $NoTypeFromAlias ' Error: ' $error2
    #end-if

!-------------------------

BEGIN-SELECT ON-ERROR=TestFailed
ASOFDATE   &DateAlias = DATE
   let $NoTypeFromDateAlias = &DateAlias
FROM PSASOFDATE
END-SELECT

!Check if Variables are equal
    if ($NoTypeFromDateAlias <> &DateAlias)
        let $error3 = {Yes}
    end-if

    #ifdef debugd
        show 'Test3: &DateAlias: ' &DateAlias ' $NoTypeFromDateAlias: ' $NoTypeFromDateAlias ' Error: ' $error3
    #end-if

!-------------------------

BEGIN-SELECT ON-ERROR=TestFailed
ASOFDATE   &CharAlias = CHAR
   let $NoTypeFromCharAlias = &CharAlias
FROM PSASOFDATE
END-SELECT

!Check if Variables are equal
    if ($NoTypeFromCharAlias <> &CharAlias)
        let $error4 = {Yes}
    end-if

    #ifdef debugd
        show 'Test4: &CharAlias: ' &CharAlias ' $NoTypeFromCharAlias: ' $NoTypeFromCharAlias ' Error: ' $error4
    #end-if


!-------------------------

BEGIN-SELECT ON-ERROR=TestFailed
{DateOut-Prefix}ASOFDATE{DateOut-Suffix}   &WrapAlias
   let $FromWrapAlias = &WrapAlias
#ifdef INFORMIX
{DateOut-Prefix}ASOFDATE{DateOut-Suffix}   &WrapCharAlias
#else
{DateOut-Prefix}ASOFDATE{DateOut-Suffix}   &WrapCharAlias=CHAR
#endif
   let $FromWrapCharAlias = &WrapCharAlias
FROM PSASOFDATE
END-SELECT

!Check if Variables are equal
    if ($FromWrapAlias     <> &WrapAlias) or
       ($FromWrapCharAlias <> &WrapCharAlias)
        let $error5 = {Yes}
    end-if

    #ifdef debugd
        show 'Test5: &WrapAlias: ' &WrapAlias  ' &WrapCharAlias: ' &WrapCharAlias ' $FromWrapAlias: ' $FromWrapAlias ' $FromWrapCharAlias: ' $FromWrapCharAlias ' Error: ' $error5
    #end-if

    If $error1 = {Yes} or $error2 = {Yes} or
       $error3 = {Yes} or $error4 = {Yes} or
       $error5 = {Yes}

        let $error = {Yes}
    end-if

    do ShowTestStatus

end-procedure

!**********************************************************************
begin-Procedure  Date_Wrapper_Tests
!**********************************************************************

  let $Testid = 'Date_Wrapper_Tests:'
  let $error = {Yes}

BEGIN-Select ON-ERROR=TestFailed
MC_DEFN_ID
{DATETIMEOut-Prefix}MC_NULL_DTTM_STAMP{DateTimeOut-Suffix} &StringDTTM
{DATEOut-Prefix}MC_NULL_DT{DateOut-Suffix} &StringDATE
{TIMEOut-Prefix}MC_NULL_TIME{TimeOut-Suffix} &StringTIME
{TIME24Out-Prefix}MC_NULL_TIME{Time24Out-Suffix} &StringTIME24

    let $error = {No}

    #ifdef debugd
        show 'TestCase: ' $Testid
        show 'DATETIMEOut-Prefix &Col DateTimeOut-Suffix (' &StringDTTM ')'
        show 'DATEOut-Prefix &Col DATEOut-Suffix         (' &StringDATE ')'
        show 'TIMEOut-Prefix &Col TIMEOut-Suffix         (' &StringTIME ')'
        show 'TIME24Out-Prefix &Col TIME24Out-Suffix     (' &StringTIME24 ')'
    #end-if

FROM PS_MC_DEFN
WHERE OPRID = 'SQRTEST'
ORDER BY MC_DEFN_ID
END-SELECT

    do ShowTestStatus


end-procedure

!**********************************************************************
begin-Procedure  Date_Where_Tests
!**********************************************************************

  let $Testid = 'Date_Where_Tests:'
  let $error = {No}


!-------------------------
! Test 1

    let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W1.ASOFDATE
    let $FlagVar = {Yes}
FROM PSASOFDATE W1
WHERE W1.ASOFDATE = &A.ASOFDATE
END-SELECT

    if ($FlagVar = {Yes})
        let $error001 = {No}
    else
        let $error001 = {Yes}
    end-if

!-------------------------
! Test 2

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W3.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W3
WHERE W3.ASOFDATE = $NativeDate
END-SELECT

    if ($FlagVar = {Yes})
        let $error002 = {No}
    else
        let $error002 = {Yes}
    end-if

!-------------------------
! Test  3

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W2.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W2
WHERE W2.ASOFDATE = $NoType
END-SELECT

    if ($FlagVar = {Yes})
        let $error003 = {No}
    else
        let $error003 = {Yes}
    end-if

!-------------------------
! Test  4

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W4.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W4
WHERE W4.ASOFDATE = $NoTypeButPreAssigned
END-SELECT

    if ($FlagVar = {Yes})
        let $error004 = {No}
    else
        let $error004 = {Yes}
    end-if

!-------------------------
! Test  5

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W5.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W5
WHERE W5.ASOFDATE = $NoTypeTrimmed
END-SELECT

    if ($FlagVar = {Yes})
        let $error005 = {No}
    else
        let $error005 = {Yes}
    end-if


!-------------------------
! Test  6

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W6.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W6
WHERE W6.ASOFDATE = &Alias
END-SELECT

    if ($FlagVar = {Yes})
        let $error006 = {No}
    else
        let $error006 = {Yes}
    end-if

!-------------------------
! Test  7

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W7.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W7
WHERE W7.ASOFDATE = $NoTypeFromAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error007 = {No}
    else
        let $error007 = {Yes}
    end-if

!-------------------------
! Test  8

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W8.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W8
WHERE W8.ASOFDATE = &DateAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error008 = {No}
    else
        let $error008 = {Yes}
    end-if

!-------------------------
! Test  9

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W9.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W9
WHERE W9.ASOFDATE = $NoTypeFromDateAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error009 = {No}
    else
        let $error009 = {Yes}
    end-if

!-------------------------
! Test  10

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W10.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W10
WHERE W10.ASOFDATE = &WrapAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error010 = {No}
    else
        let $error010 = {Yes}
    end-if

!-------------------------
! Test  11

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W11.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W11
WHERE W11.ASOFDATE = $FromWrapAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error011 = {No}
    else
        let $error011 = {Yes}
    end-if

!-------------------------
! Test  12

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W12.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W12
WHERE W12.ASOFDATE = &WrapCharAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error012 = {No}
    else
        let $error012 = {Yes}
    end-if

!-------------------------
! Test  13

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W13.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W13
WHERE W13.ASOFDATE = $FromWrapCharAlias
END-SELECT

    if ($FlagVar = {Yes})
        let $error013 = {No}
    else
        let $error013 = {Yes}
    end-if

!-------------------------
! Test  14

   let $FlagVar = {No}
BEGIN-SELECT ON-ERROR=TestFailed
W23.ASOFDATE
   let $FlagVar = {Yes}
FROM PSASOFDATE W23
#ifndef ORACLE                                           ! For Oracle, you must use TO_DATE if format is not default
WHERE W23.ASOFDATE = '1965-03-05'
#else
WHERE W23.ASOFDATE = TO_DATE('1965-03-05','YYYY-MM-DD')
#end-if
END-SELECT

    if ($FlagVar = {Yes})
        let $error014 = {No}
    else
        let $error014 = {Yes}
    end-if

    #ifdef DB2ALL                     ! DB2 Platforms will fail on this test until SQR Enhancement 4825 is complete
        if $error002 = {Yes}          ! For Now, this value will be set to 'X' indicating Known failure
            let $error002 = 'X'
        end-if
    #end-if

    If $error001 = {Yes} or $error002 = {Yes} or
       $error003 = {Yes} or $error004 = {Yes} or
       $error005 = {Yes} or $error006 = {Yes} or
       $error007 = {Yes} or $error008 = {Yes} or
       $error009 = {Yes} or $error010 = {Yes} or
       $error011 = {Yes} or $error012 = {Yes} or
       $error013 = {Yes} or $error014 = {Yes}
        let $error = {Yes}
    end-if

    do ShowTestStatus

    #ifdef debugd
        show '   Test001: ' $error001 '  Test002: ' $error002 '  Test003: ' $error003
        show '   Test004: ' $error004 '  Test005: ' $error005 '  Test006: ' $error006
        show '   Test007: ' $error007 '  Test008: ' $error008 '  Test009: ' $error009
        show '   Test010: ' $error010 '  Test011: ' $error011 '  Test012: ' $error012
        show '   Test013: ' $error013 '  Test014: ' $error014
    #end-if

End-Procedure

!**********************************************************************
begin-procedure TestDateValidation
!**********************************************************************

    show 'Date Validation Testing'
    show {Dashes}

    let $Testid = 'Date_Validation_Testing:'
    let $error = {No}

    ! Expected result value: N - Invalid Date, Y - Valid Date
    do ValidateDate('19990229','N',$error001)
    do ValidateDate('00000000','N',$error002)
    do ValidateDate('19990228','Y',$error003)
    do ValidateDate('20000229','Y',$error004)
    do ValidateDate('19990200','N',$error005)
    do ValidateDate('19980229','N',$error006)
    do ValidateDate('19970229','N',$error007)
    do ValidateDate('19960229','Y',$error008)
    do ValidateDate('19920229','Y',$error009)
    do ValidateDate('19920228','Y',$error010)
    do ValidateDate('20010229','N',$error011)
    do ValidateDate('20020229','N',$error012)
    do ValidateDate('20030229','N',$error013)
    do ValidateDate('20040229','Y',$error014)

    If $error001 = {Yes} or $error002 = {Yes} or
       $error003 = {Yes} or $error004 = {Yes} or
       $error005 = {Yes} or $error006 = {Yes} or
       $error007 = {Yes} or $error008 = {Yes} or
       $error009 = {Yes} or $error010 = {Yes} or
       $error011 = {Yes} or $error012 = {Yes} or
       $error013 = {Yes} or $error014 = {Yes}
        let $error = {Yes}
    end-if

    do ShowTestStatus

    #ifdef debugd
        show '   Test001: ' $error001 '  Test002: ' $error002 '  Test003: ' $error003
        show '   Test004: ' $error004 '  Test005: ' $error005 '  Test006: ' $error006
        show '   Test007: ' $error007 '  Test008: ' $error008 '  Test009: ' $error009
        show '   Test010: ' $error010 '  Test011: ' $error011 '  Test012: ' $error012
        show '   Test013: ' $error013 '  Test014: ' $error014
    #end-if

end-procedure

!**********************************************************************
begin-procedure ValidateDate($Datein,$ExpResult,:$error)
!**********************************************************************

! Because Dates could be invalid, String manipulation is required to convert to Native Date
! Format.  If an invalid date is passed to an SQR Date command, the SQR program would halt.
    let $YY = substr($Datein,1,4)
    let $MM = substr($Datein,5,2)
    let $DD = substr($Datein,7,2)

! Format: 'YYYY-MM-DD' (DB2ALL,Informix)
#if {Native-DateMask} = 'YYYY-MM-DD'
    let $Dateout = $YY || '-' || $MM || '-' || $DD
#end-if

! Format: 'MON DD YYYY' (Microsoft,Sybase)
#if {Native-DateMask} = 'MON DD YYYY'
    do Convert-To-MMM($MM)
    let $MM = upper($MM)
    let $Dateout = $MM || ' ' || $DD || ' ' || $YY
#end-if

! Format: 'DD-MON-YYYY' (Oracle)
#if {Native-DateMask} = 'DD-MON-YYYY'
    do Convert-To-MMM($MM)
    let $MM = upper($MM)
    let $Dateout = $DD || '-' || $MM || '-' || $YY
#end-if

    do Validate-Native-Date($Dateout,$ActResult)

    if $ActResult <> $ExpResult
        let $error = 'Y'
    else
        let $error = 'N'
    end-if

#ifdef debugd
    Show '$Datein/$DateOut: ' $DateIn '/' $DateOut ' $ExpResult/$ActResult: ' $ExpResult '/' $ActResult
#end-if
end-procedure

#ifdef PTVer
  #if {PTVer} = '8'                                 !Only include if PT 8

!**********************************************************************
begin-procedure TestGlobalDateTime
!**********************************************************************

    show 'Global DateTime Testing'
    show {Dashes}


    let $Testid = 'Global_DateTime_Tests:'

    do Check-GlobalTestData
    do GetTimeZones

    do Global_DateTime_Tests

#ifdef debugd
    show '----------------------------------------'
    show 'Printout of TimeZone Array'
    show ' '
    move 0 to #n
    while #n < #TZCurSize
        get $arTZ $arTZStdLbl $arTZDSTLbl #arUTCOffset $arObserveDST #arDSTOffset $arDSTStart $arDSTend
            from timezone(#n) arTZ arTZStdLbl arTZDSTLbl arUTCOffset arObserveDST arDSTOffset arDSTStart arDSTend
        show #n ': ' $arTZ ', ' $arTZStdlbl ', ' $arTZDSTLbl ', ' #arUTCOffset ', ' $arObserveDST ', ' #arDSTOffset ', ' $arDSTStart ', ' $arDSTend
        add 1 to #n
    end-while

    show '----------------------------------------'
    show 'Printout of DSTTime Array'
    show ' '
    move 0 to #n
    while #n < #DSTCurSize
        get $arDSTId $arDSTAbsolute #arDSTMonth #arDSTDay #arDSTDOW #arDSTHour #arDSTMinute
            from DSTtime(#n) arDSTId arDSTAbsolute arDSTMonth arDSTDay arDSTDOW arDSTHour arDSTMinute
        show #n ': ' $arDSTId ',' $arDSTAbsolute ',' #arDSTMonth ',' #arDSTDay ',' #arDSTDOW ',' #arDSTHour ',' #arDSTMinute
        add 1 to #n
    end-while
#end-if

    do ShowTestStatus

end-procedure


!**********************************************************************
begin-procedure Global_DateTime_Tests
!**********************************************************************

    do TestClientTimeZone('PST','MST','001',-1,$Error001)
    do TestClientTimeZone('PST','PST','002',0,$Error002)
    do TestClientTimeZone('','','003',0,$Error003)
    do TestClientTimeZone('PST','EST','004',-3,$Error004)
    do TestClientTimeZone('EST','PST','005',3,$Error005)

    do Format-DateTime('20001005121400',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'MST','007',-1,$Error007)
    do CallFormatGlobalTime($DateTimeIn, 'EST', 'PST','008',3,$Error008)

    do Format-DateTime('20001029121400',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'MST','009',-1,$Error009)

    do Format-DateTime('19650305121400',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'MST','010',-1,$Error010)

    do Format-DateTime('19651130233000',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'MST','011',-1,$Error011)

    do Format-DateTime('20071104010100',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'EST', 'EST','012',0,$Error012)
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'AKST','013',1,$Error013)
    do CallFormatGlobalTime($DateTimeIn, 'AKST', 'PST','014',1,$Error014)
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'MST','015',1,$Error015)
    do CallFormatGlobalTime($DateTimeIn, 'MST', 'PST','016',1,$Error016)
    do CallFormatGlobalTime($DateTimeIn, 'PST', 'EST','017',-2,$Error017)
    do CallFormatGlobalTime($DateTimeIn, 'EST', 'PST','018',3,$Error018)
    do CallFormatGlobalTime($DateTimeIn, 'HST', 'AKST','019',-1,$Error019)

    do Format-DateTime('20071104000100',$DateTimeIn,{DEFCMP},'time','native')
    do CallFormatGlobalTime($DateTimeIn, 'HST', 'AKST','020',-1,$Error020)

    do CallFormatGlobalTime($DateTimeIn, 'Bad', 'Bad','999',0,$Error999)

    If $error001 = {Yes} or $error002 = {Yes} or
       $error003 = {Yes} or $error004 = {Yes} or
       $error005 = {Yes} or $error006 = {Yes} or
       $error007 = {Yes} or $error008 = {Yes} or
       $error009 = {Yes} or $error010 = {Yes} or
       $error011 = {Yes} or $error012 = {Yes} or
       $error013 = {Yes} or $error014 = {Yes} or
       $error015 = {Yes} or $error016 = {Yes} or
       $error017 = {Yes} or $error018 = {Yes} or
       $error019 = {Yes} or $error020 = {Yes} or
       $error999 = {Yes}
        move {Yes} to $error
    end-if

    #ifdef debugd
        show '   Test001: ' $error001 '  Test002: ' $error002 '  Test003: ' $error003
        show '   Test004: ' $error004 '  Test005: ' $error005 '  Test006: ' $error006
        show '   Test007: ' $error007 '  Test008: ' $error008 '  Test009: ' $error009
        show '   Test010: ' $error010 '  Test011: ' $error011 '  Test012: ' $error012
        show '   Test013: ' $error013 '  Test014: ' $error014 '  Test015: ' $error015
        show '   Test016: ' $error016 '  Test017: ' $error017 '  Test018: ' $error018
        show '   Test019: ' $error019 '  Test020: ' $error020 '  Test999: ' $error999
    #end-if


end-procedure

!**********************************************************************
begin-procedure TestClientTimeZone ($STZ,$TTZ,$TestCase,#ExpDiff,:$Error)
!**********************************************************************
declare-variable
    integer #diff
    integer #ExpDiff
end-declare

    let $_BSE_TIMEZONE = $STZ       ! Source TimeZone
    let $_CLT_TIMEZONE = $TTZ       ! Target TimeZone

    let $Error = {No}

    do GetCurrentClientDateTime

    let #diff = round(datediff(strtodate($_SysDateTime,{Native-DateTimeMask}),strtodate($_ClientDateTime,{Native-DateTimeMask}),'hour'),0)

    ! Adjust Expected results for Daylight Savings else comment if statement
!    if $_TObserveDST = {Yes} and $_SObserveDST = {No}
!        add -1 to #ExpDiff
!    else
!        if $_TObserveDST = {No} and $_SObserveDST = {Yes}
!            add 1 to #ExpDiff
!        end-if
!    end-if

    if #diff <> #ExpDiff
        let $error = {Yes}
    end-if

    #ifdef debugd
        show '$TestCase: ' $TestCase '-Convert Current DateTime from ' $STZ ' to ' $TTZ
        show '  using the following timestamp: '  $_SysDateTime
        show '    $_ClientDateTime : ' $_ClientDateTime
        show '    $_ClientAsOfToday: ' $_ClientAsOfToday
        show '    $_ClientAsOfNow  : ' $_ClientAsOfNow
        show '    $BSE_TIMEZONE    : ' $_BSE_TimeZone
        show '    $CLT_TIMEZONE    : ' $_CLT_TimeZone
        show '    #Diff/#ExpDiff   : ' #diff '/' #ExpDiff
        show '    $Error           : ' $Error
    #end-if


end-procedure

!**********************************************************************
begin-procedure CallFormatGlobalTime ($DateTimeIn, $STZ, $TTZ, $TestCase,#ExpDiff,:$Error)
!**********************************************************************
declare-variable
    integer #diff
    integer #ExpDiff
end-declare

    let $Error = {No}

    do FormatGlobalTime($DateTimeIn, $STZ, $TTZ, $DateTimeOut)
    let #diff = round(datediff(strtodate($DateTimeIn,{Native-DateTimeMask}),strtodate($DateTimeOut,{Native-DateTimeMask}),'hour'),0)

    if #diff <> #ExpDiff
        let $error = {Yes}
    end-if

    #ifdef debugd
        show '$TestCase: ' $TestCase '-Convert ' $DateTimeIn ' from ' $STZ ' to ' $TTZ
        show '    $DateTimein : ' $DateTimein
        show '    $DateTimeOut: ' $DateTimeOut
        show '    #Diff/#ExpDiff   : ' #diff '/' #ExpDiff
        show '    $Error           : ' $Error
    #end-if


end-procedure

!**********************************************************************
begin-procedure Check-GlobalTestData
!**********************************************************************

    do Check-TimeZoneTbl('AKST','AKST','AKDT',-540,'Y',60,'22ndSunMar','2FirstSunNov','Alaska Time')
    !*** do Check-TimeZoneTbl('BRI','BRI','BRI',600,'N',60,' ',' ','Brisbane Time')
    do Check-TimeZoneTbl('CST','CST','CDT',-360,'Y',60,'22ndSunMar','2FirstSunNov','Central Time')
    do Check-TimeZoneTbl('EST','EST','EDT',-300,'Y',60,'22ndSunMar','2FirstSunNov','Eastern Time')
    !*** do Check-TimeZoneTbl('ESTA','EST','EST',-300,'N',60,' ',' ','Indiana')
    !*** do Check-TimeZoneTbl('HAW','HAW','HAW',-600,'N',60,' ',' ','Hawaii Time')
    !***  do Check-TimeZoneTbl('HOB','HOB','HDB',600,'Y',60,'2FirstSunOct','2LastSunMar','Hobart Time')
    do Check-TimeZoneTbl('MST','MST','MDT',-420,'Y',60,'22ndSunMar','2FirstSunNov','Mountain Time')
    !*** do Check-TimeZoneTbl('MSTA','MST','MST',-420,'N',60,' ',' ','Arizona Time')
    do Check-TimeZoneTbl('PST','PST','PDT',-480,'Y',60,'22ndSunMar','2FirstSunNov','Pacific Time')
    !*** do Check-TimeZoneTbl('SYD','SYD','SDD',600,'Y',60,'2LastSunOct','2LastSunMar','Sydney Time')
    !*** do Check-TimeZoneTbl('VAL','VAL','VDL',600,'Y',60,'2LastSunMar','3LastSunOct','Vladivostok Time')

    do Check-DSTTimeTbl('2FirstSunApr','N','4',1,'0',2,0,'First Sunday in April')
    do Check-DSTTimeTbl('2FirstSunOct','N','10',1,'0',2,0,'First Sunday in October')
    do Check-DSTTimeTbl('2LastSunMar','N','3',5,'0',2,0,'Last Sunday in March')
    do Check-DSTTimeTbl('2LastSunOct','N','10',5,'0',2,0,'Last Sunday in October')
    do Check-DSTTimeTbl('3LastSunOct','N','10',5,'0',3,0,'Last Sunday in October')
    do Check-DSTTimeTbl('22ndSunMar','N','3',2,'0',2,0,'Second Sunday in March')
    do Check-DSTTimeTbl('2FirstSunNov','N','11',1,'0',2,0,'First Sunday in Nov')

end-procedure


!**********************************************************************
begin-procedure Check-TimeZoneTbl ($timezone,$Stdlbl,$Dstlbl,#UOff,$ODst,#DOff,$DstSt,$DstEnd,$TZDecr)
!**********************************************************************

    let $Found = 'N'

begin-Select
A.TIMEZONE
    let $found = 'Y'
    exit-select
FROM PSTIMEZONEDEFN A
WHERE A.TIMEZONE = $timezone
end-select

    if $found = 'N'
        #ifdef debugd
            show 'Inserting Timezone: ' $timezone
        #end-if
        do Insert-TimeZoneTbl($timezone,$Stdlbl,$Dstlbl,#UOff,$ODst,#DOff,$DstSt,$DstEnd,$TZDecr)
    end-if

end-procedure


!**********************************************************************
begin-procedure Insert-TimeZoneTbl ($timezone,$Stdlbl,$Dstlbl,#UOff,$ODst,#DOff,$DstSt,$DstEnd,$TZDecr)
!**********************************************************************

begin-sql

insert into PSTIMEZONEDEFN (
        TIMEZONE,
        TIMEZONESTDLBL,
        TIMEZONEDSTLBL,
        UTCOFFSET,
        OBSERVEDST,
        DSTOFFSET,
        DSTSTART,
        DSTEND,
        TZDESCR)
values($timezone,
        $Stdlbl,
        $Dstlbl,
        #UOff,
        $ODst,
        #DOff,
        $DstSt,
        $DstEnd,
        $TZDecr)

end-sql

end-procedure

!**********************************************************************
begin-procedure Check-DSTTimeTbl($DSTID,$DSTA,$DSTM,#DSTD,$DSTDOW,#DSTH,#DSTMI,$Decr)
!**********************************************************************
    declare-variable
        integer #DSTD
        integer #DSTH
        integer #DSTMI
    end-declare

    let $Found = 'N'

begin-Select
A.DSTID
    let $found = 'Y'
    exit-select
FROM PSDSTTIME A
WHERE A.DSTID = $DSTID
end-select

    if $found = 'N'
        #ifdef debugd
            show 'Inserting DSTID: ' $DSTID
        #end-if
        do Insert-DSTTimeTbl($DSTID,$DSTA,$DSTM,#DSTD,$DSTDOW,#DSTH,#DSTMI,$Decr)
    end-if

end-procedure


!**********************************************************************
begin-procedure Insert-DSTTimeTbl($DSTID,$DSTA,$DSTM,#DSTD,$DSTDOW,#DSTH,#DSTMI,$Decr)
!**********************************************************************
    declare-variable
        integer #DSTD
        integer #DSTH
        integer #DSTMI
    end-declare

begin-sql
insert into PSDSTTIME values($DSTID,$DSTA,$DSTM,#DSTD,$DSTDOW,#DSTH,#DSTMI,$Decr)
end-sql

end-procedure


  #end-if                                           ! if PTVer = '8'
#end-if                                             ! if PTVer
