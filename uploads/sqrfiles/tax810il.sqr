!***********************************************************************
! TAX810IL: Quarterly wage reporting - Illinois                        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of PeopleSoft, Inc.; it is not to be copied, reproduced, or          *
! transmitted in any form, by any means, in whole or in part,          *
! nor is it to be used for any purpose other than that for             *
! which it is expressly provided under the applicable license          *
! agreement.                                                           *
!                                                                      *
! Copyright (c) 1988-2004 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  01/24/2013 RSI-HCM102922  v1.0                                      *
!  Descr: Re-write of TAX810IL to accomodate 2013 reporting changes    *
!                                                                      *
!  04/02/2013 RSI-HCM103344  v1.1                                      *
!  Descr: Truncate the name length as per spec. in CSV files           *
!                                                                      *
!  05/20/2013 RSI-HCM103362  v1.2                                      *
!  Descr: Correction to ICESA layout for quarterly file.               *
!                                                                      *
!  08/12/2013 RSI-HCM103526  v2.0                                      *
!  Descr: Correction to filename printed in log file.                  *
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   ! Set Environment
#Include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information
#Include 'setup32.sqc'  ! Printer and Page-Size Initialization
#Include 'usarpt.sqc'   ! USA-specific variables

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver       2.0   !Corresponds to Modification History above.
  #Define Dyn-S          [
  #Define Dyn-E          ]
  #Define MaxFileSize    10000000
  #Define MaxRptLines    20
  #Define MaxERecSize    45
  #Define MaxSRecSize    58
  #Define RecordSize     60
  #Define ICESARecordSize 276
  #Define ProcessAll     'R'
  #Define ProcessSome    'C'
  #Define Tax_Class      'U'
  #Define ThisState      'IL'
  #Define Empty          ' '

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  Declare-Report PRINTERRORS
    layout       = DEFAULT
    printer-type = HP
  End-Declare

!  #Define DebugA
!  #Define DebugB
!  #Define DebugC
!  #Define DebugD
!  #Define DebugE
!  #Define DebugF
!  #Define DebugG

End-Setup

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program

  Show 'TAX810IL.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
  Show 'Processing quarterly wage reporting for Illinois'
  Show ''

  let $Start = datenow()
  Show 'Report Started at : ' $Start
  Show ''

  do Init-Report

  #IfDef DebugA
     do Show-DebugA-Statements
  #EndIf

  do Process-Main
  do Processing-Wrapup

End-Program

!***********************************************************************
! Procedure Processing-Wrapup
!***********************************************************************
Begin-Procedure Processing-Wrapup

  close 10

  If #Ttl_Rec_Cnt > 0
     Show '-------------------------------------------------------------------------------------'
     Show ' '
     Show 'Upon successful conclusion of this program, one or more files will'
     Show 'have been created, as shown:'
     Show ' '
     move 0 to #Temp

     While #Temp < #FileNumber
       add 1 to #Temp

       If $ProcessFileType = 'CSV'
          move #Temp to $Temp 09
          let $FileID = $FileOutputPath || 'ILUIMonthlyWage' || $Mth || $RptYear || '_' || $Temp || '.csv'
       Else
          move #Temp to $Temp 009
     !     let $FileID = $FileOutputPath || 'TAX810IL.txt'  !RSI-HCM103526 
       End-If
       Show $FileID
     End-While

     Show ''

     If $ProcessFileType = 'CSV'
        Show 'using the CSV format required for monthly reporting. Each file '
        Show 'contains the records for activity to be reported for a single company,'
     Else
        Show 'using the 276-character ICESA format required for quarterly reporting'
     End-If

     Show 'for submission to the state of Illinois. For delivery, follow'
     Show 'instructions from the Department of Employment Security.'
     Show ' '
     Show '-------------------------------------------------------------------------------------'
     Show ' '
     let $E_Rec_Cnt = edit(#Count_E, '999999')
     Show $E_Rec_Cnt ' Companies processed.'
     let $S_Rec_Cnt = edit(#Count_F, '999999')
     Show $S_Rec_Cnt ' Employee records processed.'
     let $Ttl_Rec_Cnt = edit(#Ttl_Rec_Cnt,'999999')
     Show $Ttl_Rec_Cnt ' Total records written.'
     Show ''
  Else
     print '=====>  No Data Selected  <====='  (+2,) center
  End-If

  let $End = datenow()
  Show '-------------------------------------------------------------------------------------'
  Show ' '
  Show 'Report Ended at : ' $End
  do Stdapi-Term              ! End of Job Processing

End-Procedure Processing-Wrapup

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Set-DB
 
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Installation-Parameters
  do Get-Tax-Reporting-Run-Controls
  do Initialization
  do Get-Output-File-Path
  do Get-Current-DateTime
  do Get-Run-Control-Parameters
  do Get-Period-End-Dt
  do Get-Month
  do Setup-Process-Type-Specific
  do Get-Period-Start-Dt

  If $ProcessFileType = 'ICESA'
     move &TX.COMPANY to $Company
     do Get-Company-Data
     do Setup-Xmitter-Data
  End-If

  Show 'Processing balances for: '   noline
  Show $RptMonth noline
  Show '/' noline
  Show $RptYear
  Show ' '
  Show '-------------------------------------------------------------------------------------'
  Show ' '

End-Procedure Init-Report

!***********************************************************************
! Procedure Set-DB
!***********************************************************************
Begin-Procedure Set-DB

  #IfDef DB2ALL
     #Define DB2
  #EndIf
  #IfDef DB2UNIX
     #Define DB2
  #EndIf
  #IfDef DB2400
     #Define DB2
  #EndIf
  #IfDef DB2DDCS
     #Define DB2
  #EndIf

End-Procedure Set-DB

!***********************************************************************
! Procedure Get-Installation-Parameters
!***********************************************************************
Begin-Procedure Get-Installation-Parameters

BEGIN-SELECT
INS.BAL_ID_FOR_CAL_YR  &BAL_ID_FOR_CAL_YR
INS.TEMP_SSN_MASK      &TEMP_SSN_MASK
FROM PS_INSTALLATION INS
END-SELECT

End-Procedure Get-Installation-Parameters

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization

  let $ReportID       = 'TAX810IL'
  let $TaxCode        = 'UTAX'
  let $RecCode        = ' '
  let $FileType       = ' '
  let $StateID        = '17'
  let $No_Wages       = '1'
  let #FileNumber     = 0
  let #Ttl_Rec_Cnt    = 0
  let #Page_Total     = 0
  let #OpenFailed     = 0
  let #Count_S        = 0
  let #Count_E        = 0
  let $Company_Option = ''
  let #Company_Total  = 0
  let #Report_Total   = 0
  let $Zero9          = rpad('',9,'0')
  let $Zero11         = rpad('',11,'0')
  let $Zero13         = rpad('',13,'0')
  let $Zero14         = rpad('',14,'0')
  let $Zero15         = rpad('',15,'0')
  let $Sp1            = ' '
  let $Sp2            = rpad('',2,' ')
  let $Sp3            = rpad('',3,' ')
  let $Sp4            = rpad('',4,' ')
  let $Sp5            = rpad('',5,' ')
  let $Sp6            = rpad('',6,' ')
  let $Sp8            = rpad('',8,' ')
  let $Sp9            = rpad('',9,' ')
  let $Sp10           = rpad('',10,' ')
  let $Sp12           = rpad('',12,' ')
  let $Sp13           = rpad('',13,' ')
  let $Sp26           = rpad('',26,' ')
  let $Sp56           = rpad('',56,' ')
  let $Sp85           = rpad('',85,' ')
  let $Sp108          = rpad('',108,' ')
  let $Sp176          = rpad('',176,' ')

  move &TEMP_SSN_MASK      to $SSN_Mask
  move &BAL_ID_FOR_CAL_YR  to $Balance_ID
  move &TX.BALANCE_YEAR    to $RptYear
  move &TX.Company         to $Company

End-Procedure Initialization

!***********************************************************************
! Procedure Setup-Xmitter-Data
!***********************************************************************
Begin-Procedure Setup-Xmitter-Data

  move $CompanyName    to $XmitCoName
  move &CT.Federal_EIN to $XmitEIN 099999999
  move $CompnyAdd1     to $XmitAddress
  move $CompnyCity     to $XmitCity
  let  $XmitState       = rtrim(&CT.STATE, ' ')
  move &CT.POSTAL      to $XmitZip
  move $XmitZip        to $XmitZipExtsn ~~~~~~xxxx

  If instr($XmitZip,'-',6) = 0 and $XmitZipExtsn <> '    '
     let $XmitZip = substr($XmitZip,1,5) || '-' || substr($XmitZip,6,4)
  End-If

  move $XmitZip to $XmitZipExtsn ~~~~~xxxxx
  uppercase $XmitCoName
  uppercase $XmitAddress
  uppercase $XmitCity
  uppercase $XmitContact

  #IfDef DebugG
    do Show-DebugG-Statements
  #EndIf

End-Procedure Setup-Xmitter-Data

!***********************************************************************
! Procedure Get-Output-File-Path
!***********************************************************************
Begin-Procedure Get-Output-File-Path

  #IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
     let $FileOutputPath = '{IMPORTPREFIX}'
  #Else                  ! 8.2 and 7.5 Tools Support
     let $FileOutputPath = '{FILEPREFIX}'
  #EndIf

  let #PathLength = length($FileOutputPath)
  let $End_Char   = substr($FileOutputPath, #PathLength, 1)

  #IfDef NT
     If $End_Char <> '\'
        let $FolderSep = '\'
     Else
        let $FolderSep = ''
     End-If
  #EndIf

  #IfDef UNIX
     If $End_Char <> '/'
        let $FolderSep = '/'
     Else
        let $FolderSep = ''
     End-If
  #EndIf

  let $FileOutputPath = $FileOutputPath || $FolderSep

  #IfDef HAS
     do Get_OutPut_Location
     let $FileOutputPath = $g_file_path_out
  #EndIf

End-Procedure Get-Output-File-Path

!***********************************************************************
! Procedure Get-Run-Control-Parameters
!***********************************************************************
Begin-Procedure Get-Run-Control-Parameters

  If $Prcs_Process_Instance <> ''
     do Get-Tax-Reporting-Parameters
  Else

     input $Prcs_OprID batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     If $Prcs_OprID = '' and $Prcs_Run_Cntl_ID = ''
        do Report-Parameter-Error
     Else
        do Get-Tax-Reporting-Parameters

        If $Company_Option = '' OR $RptMonth = ''
           do Report-Parameter-Error
        End-If
     End-If
  End-If

End-Procedure Get-Run-Control-Parameters

!***********************************************************************
! Procedure Report-Parameter-Error
!***********************************************************************

Begin-Procedure Report-Parameter-Error

  Show ''
  Show 'In order to run from the command line, this report requires as'
  Show 'arguments a valid Operator ID and a valid Run Control ID, used'
  Show 'previously to specify values on the process Run Control Record.'
  Show ''
  Show ' Press Enter to exit.'
  input $Temp
  STOP

End-Procedure Report-Parameter-Error

!***********************************************************************
! Procedure Get-Tax-Reporting-Parameters
!***********************************************************************
Begin-Procedure Get-Tax-Reporting-Parameters

  let $Company_Option = ''
  let $RptMonth = ''

BEGIN-SELECT DISTINCT
CO.REG_SELECT_COMP
CO.BALANCE_PERIOD
CO.CONTACT_PERSON
CO.CONTACT_PHONE
CO.CONTACT_PHONE_EXT

    move &CO.CONTACT_PERSON    to $XmitContact
    unstring &CO.CONTACT_PHONE by '/' into $Area $Temp
    unstring $Temp by '-' into $Exchange $LocalNum
    let $XmitPhone = $Area || $Exchange || $LocalNum
    move &CO.CONTACT_PHONE_EXT to $XmitPhoneExt
    move &CO.BALANCE_PERIOD    to $RptMonth  99
    move &CO.BALANCE_PERIOD    to #Balance_Period
    let  $Company_Option        = &CO.REG_SELECT_COMP

FROM PS_RC_TAX810IL CO
WHERE CO.OPRID       = $Prcs_OprID
  AND CO.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

End-Procedure Get-Tax-Reporting-Parameters

!***********************************************************************
! Procedure Get-Period-End-Dt
!***********************************************************************
Begin-Procedure Get-Period-End-Dt

  let $TaxYear = substr($RptYear,3,2)
  move $RptYear to $Period_End_Date xxxx
  move $RptMonth to $Period_End_Month 09
  concat $Period_End_Month with $Period_End_Date -xx-31

  Evaluate $Period_End_Month
    When = '02'
      Evaluate $TaxYear2
        When = '12'
        When = '16'
        When = '20'
        When = '24'
        When = '28'
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'29')
          Break
        When-Other
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'28')
          Break
      End-Evaluate
      Break
    When = '04'
    When = '06'
    When = '09'
    When = '11'
      let $Period_End_Date = rtrim($Period_End_Date,'1')
      let $Period_End_Date = rpad($Period_End_Date,10,'0')
      Break
  End-Evaluate

  move '1' to $Year4
  move '-' to $DDelimiter

  do Format-DateTime($Period_End_Date, $Period_End_Date, {DEFYMD}, '', 'native')

End-Procedure Get-Period-End-Dt

!***********************************************************************
! Procedure Get-Period-Start-Dt
!***********************************************************************
Begin-Procedure Get-Period-Start-Dt

  move $RptYear          to $Period_Start_Date xxxx
  let  #RptYear           = to_number($RptYear)
  move #StartMonth       to $Period_Start_Month 09
  let  $Period_Start_Date = $Period_Start_Date || '-' || $Period_Start_Month || '-01'
  move '1' to $Year4
  move '-' to $DDelimiter

  do Format-DateTime($Period_Start_Date, $Period_Start_Date, {DEFYMD}, '', 'native')

End-Procedure Get-Period-Start-Dt

!***********************************************************************
! Procedure Setup-Process-Type-Specific
!***********************************************************************

Begin-Procedure Setup-Process-Type-Specific

  let #RptMonth = to_number($RptMonth)
  let #StartMonth = #RptMonth
  let $RptQtr = to_char(trunc(((#RptMonth + 2)/3),0))
  let #RptQtr = trunc(((#RptMonth + 2)/3),0)
  let $CreationDate = substr($ReportDate,1,2) || substr($ReportDate,4,2) || substr($ReportDate,7,4)

  Evaluate #RptMonth
    When = 3
    When = 6
    When = 9
    When = 12
      subtract 2 from #StartMonth
      let $ProcessFileType = 'ICESA'
      let $Balance_Source = 'TB.NLGRS_QTD'
      Break
    When-Other
      let $ProcessFileType = 'CSV'
      let $Balance_Source = 'TB.NLGRS_MTD'
      Break
  End-Evaluate

  If $ProcessFileType = 'CSV'
    let $RptTitle = 'Qtrly Wage List - ILLINOIS '
    let $RptText = 'Wages for Period ' || $RptMonth || ', ' || $Month || ' ' || $RptYear
  Else
    let $RptTitle = 'ILLINOIS QUARTERLY UI WAGE REPORT'
    let $RptText = $RptQtr || substr('stndrdth',(((to_number($RptQtr) - 1) * 2) + 1),2) || ' Quarter ' || $RptYear
  End-If

End-Procedure Setup-Process-Type-Specific

!***********************************************************************
! Procedure Open-File
!***********************************************************************
Begin-Procedure Open-File

 ! Begin RSI-HCM103344 
 ! If #FileNumber > 0
 !   If $ProcessFileType = 'CSV'
 !      close 10
 !   Else
 !      Show 'Attempt to open an additional ICESA File, Processing halted.'
 !      STOP
 !   End-If
 ! End-If
 !End RSI-HCM103344 

 add 1 to #FileNumber

  If $ProcessFileType = 'CSV'
    If #FileNumber = 1   !RSI-HCM103344 
       move #FileNumber to $FileNumber 09
       move $RptMonth   to $Mth 09
       let $FileID = 'ILUIMonthlyWage' || $Mth || $RptYear || '_' || $FileNumber || '.csv'
       let $FileID = $FileOutputPath || $FileID
       open $FileID as 10 for-writing Record={RecordSize}:vary status=#OpenFailed
    End-If               !RSI-HCM103344
  Else
    ! Begin RSI-HCM103526 
    !#IfDef HAS
    !      let $FileID = $FileOutputPath || 'TAX810IL.txt'
    !   #Else
    !      let $FileID = $FileOutputPath || 'TAX810IL'
    !   #EndIf
 
       let $FileID = $FileOutputPath || 'TAX810IL'
    ! End RSI-HCM103526 
 
    #IfNDef DebugK
       open $FileID as 10 for-writing record={ICESARecordSize}:fixed status=#OpenFailed
    #Else
       open $FileID as 10 for-writing record={ICESARecordSize}:fixed_nolf status=#OpenFailed
    #End-If
  End-If


  If #OpenFailed <> 0
     Show 'Unable to open ' $FileID ', Processing halted.'
     STOP
  End-If
  Let #FileNumber = 1           !RSI-HCM103344 

End-Procedure Open-File

!***********************************************************************
! Procedure Process-Main
!***********************************************************************
Begin-Procedure Process-Main

  do Set-CO-Dynamic-SQL

  If $ProcessFileType = 'ICESA'
     do Open-File
     do Write-A-Record-ICESA
     do Write-B-Record-ICESA
  End-If

BEGIN-SELECT
A.COMPANY
A.FEDERAL_EIN
B.EMPLOYER_ID_SUT
B.SUT_EXPERIENCE_RT
A.DESCR
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL

  move &A.COMPANY to $Company

  If rtrim($Company,' ') <>  ''
     move &A.DESCR           to $Company_name
     move &A.FEDERAL_EIN     to $Federal_EIN
     move &B.EMPLOYER_ID_SUT to $State_UI_acct
     move &A.ADDRESS1        to $Company_Addr
     move &A.CITY            to $Company_City
     move &A.STATE           to $Company_State
     move &A.POSTAL          to $Company_Zip
     let $Experience_RT = substr(edit(&B.SUT_EXPERIENCE_RT/100, '0.99999'),2,6)
     let $Company_City  = rtrim($Company_City, ' ' )
     let #Co_Ee_Cnt     = 0
     let #Company_Total = 0

     #IfDef DebugB
       do Show-Debugb-Statements
     #EndIf
     do Process-Company-Totals

     If $ProcessFileType = 'CSV'
        do Process-Company-CSV
     Else
        do Process-Company-ICESA
     End-If
  Else
     Show 'Blank company encountered. Skipping.'
  End-If

FROM PS_COMPANY_TBL A, PS_CO_STATETAX_TBL B {Dyn-S}$Runcontroltable_From_Clause{Dyn-E}
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT           = (SELECT MAX(AA.EFFDT)
                           FROM PS_COMPANY_TBL AA
                           WHERE AA.COMPANY = A.COMPANY
                             AND AA.EFFDT  <= $Period_End_Date)
  AND A.COMPANY         = B.COMPANY
  AND {Dyn-S}$StateSubstr{Dyn-E} = 'IL'
  {Dyn-S}$CoStatusCheck_where_clause{Dyn-E}
  AND B.EFFDT           = (SELECT MAX(BB.EFFDT)
                           FROM PS_CO_STATETAX_TBL BB
                           WHERE BB.COMPANY = B.COMPANY
                             AND BB.STATE   = B.STATE
                             AND BB.EFFDT <= $Period_End_Date)
{Dyn-S}$Opridcheck_Where_Clause{Dyn-E}
{Dyn-S}$Runcntlcheck_Where_Clause{Dyn-E}
{Dyn-S}$Companycheck_Where_Clause{Dyn-E}
ORDER BY A.COMPANY
END-SELECT

  If $ProcessFileType = 'ICESA'
     do Write-F-Record-ICESA
     move '' to $Company
     move '' to $Company_name
     do Print-ICESA-File-Totals
  End-If

End-Procedure Process-Main

!***********************************************************************
! Procedure Set-CO-Dynamic-SQL
!***********************************************************************
Begin-Procedure Set-CO-Dynamic-SQL

  If $Company_Option = {ProcessAll}
     let $Runcontroltable_From_Clause = ''
     let $Opridcheck_Where_Clause     = ''
     let $Runcntlcheck_Where_Clause   = ''
     let $Companycheck_Where_Clause   = ''
  Else
     let $Runcontroltable_From_Clause = ',PS_RSI_TAX810IL_CO RC'
     let $Opridcheck_Where_Clause     = ' AND RC.OPRID = ''' || $Prcs_OprID || ''''
     let $Runcntlcheck_Where_Clause   = ' AND RC.RUN_CNTL_ID  = ''' || $Prcs_Run_Cntl_ID || ''''
     let $Companycheck_Where_Clause   = ' AND RC.COMPANY = A.COMPANY'
  End-If

  If $ProcessFileType = 'CSV'
     let $CoStatusCheck_where_clause = ' AND B.EFF_STATUS = ''A'''
  Else
     let $CoStatusCheck_where_clause = ''
  End-If

  #IfDef MICROSOFT
     let $StateSubstr = ' SUBSTRING(B.STATE,1,2) '
  #EndIf
  #IfDef SYBASE
     let $StateSubstr = ' SUBSTRING(B.STATE,1,2) '
  #EndIf
  #IfDef ORACLE
     let $StateSubstr = ' SUBSTR(B.STATE,1,2) '
  #EndIf
  #IfDef INFORMIX
     let $StateSubstr = ' SUBSTR(B.STATE,1,2) '
  #EndIf
  #IfDef DB2
     let $StateSubstr = ' SUBSTR(B.STATE,1,2) '
  #EndIf

End-Procedure Set-CO-Dynamic-SQL

!***********************************************************************
! Procedure Process-Company-CSV
!***********************************************************************
Begin-Procedure Process-Company-CSV

  move $RptWages to #RptWages
  do Open-File
  do Write-E-Record-CSV

  If #co_ee_cnt > 0 OR #RptWages > 0
     let $EE_Found = edit(#Co_Ee_Cnt, '999999')
     Show  $Company ' ' $Company_name  ' '  $EE_Found ' --->>> Employee Records found.'
     do Process-Employees
     let $EE_Found = edit(#Count_S, '999999')
     Show  $Company ' ' $Company_name  ' '  $EE_Found ' --->>> Employee Records Processed'
     add #Count_S to #Count_F
     move 0 to #Count_S
  Else
     let $RptWages = '0'
     print 'No Employees received Illinois UI wages for the reporting period.' (+2,12)
     Show $Company ' ' $Company_name  ' No Employees with Illinois wages found for this reporting period.'
  End-If
  new-page
  Show ' '

End-Procedure Process-Company-CSV

!***********************************************************************
! Procedure Process-Company-ICESA
!***********************************************************************
Begin-Procedure Process-Company-ICESA

  If #co_ee_cnt > 0
     do Get-CO-Run-Control-Detail
     do Write-E-Record-ICESA
     do Process-Employees
     let $EE_Found = edit(#Count_S, '999999')
     Show  $Company ' ' $Company_name  ' '  $EE_Found ' --->>> Employee Records Found and Processed'
     Show ' '
     multiply 100 times #Co_NlGrs_QTD
     do Format-Number(#Co_NlGrs_QTD,  $Co_NlGrs_QTD,  '09999999999999')
     divide 100 into #Co_NlGrs_QTD 
     multiply 100 times #Co_TxGrs_QTD
     do Format-Number(#Co_TxGrs_QTD,  $Co_TxGrs_QTD,  '09999999999999')
     divide 100 into #Co_TxGrs_QTD
     let #Co_ExGrs_QTD = #Co_NlGrs_QTD - #Co_TxGrs_QTD
     multiply 100 times #Co_ExGrs_QTD
     If #Co_ExGrs_QTD < 0
        Move 0 to #Co_ExGrs_QTD
     End-if
     do Format-Number(#Co_ExGrs_QTD,  $Co_ExGrs_QTD,  '09999999999999')
     divide 100 into #Co_ExGrs_QTD
     do Print-ICESA-CO-Totals
     move $DCN to $DCN  0999999999
     move #Count_S to $Count_S 0999999
     do Write-T-Record-ICESA
     move 0 to #Co_NlGrs_QTD
     move 0 to #Co_ExGrs_QTD
     move 0 to #Co_TxGrs_QTD
     add #Count_S to #Count_F
     move 0 to #Count_S
     new-page
  Else
     Show $Company ' ' $Company_name  ' No Records found for processing.'
     Show ' '
  End-If

End-Procedure Process-Company-ICESA

!***********************************************************************
! Procedure Get-CO-Run-Control-Detail
!***********************************************************************
Begin-Procedure Get-CO-Run-Control-Detail

BEGIN-SELECT
RCO.IL_TAX_TYPE
RCO.IL_TAXES_DUE
RCO.IL_PREV_QTR_UNDRPY
RCO.IL_INTEREST_DUE
RCO.IL_PENALTY_DUE
RCO.IL_PREVIOUS_CREDIT
RCO.IL_TOTAL_PAYMENT
RCO.IL_MONTH1_COUNT
RCO.IL_MONTH2_COUNT
RCO.IL_MONTH3_COUNT
RCO.ILLINOIS_DCN

  move &RCO.IL_TAX_TYPE        to $TaxTypeCode
  move &RCO.IL_TAXES_DUE       to $TaxesDue
  move &RCO.IL_PREV_QTR_UNDRPY to $PrevQtrUnderpay
  move &RCO.IL_INTEREST_DUE    to $Interest
  move &RCO.IL_PENALTY_DUE     to $Penalty
  move &RCO.IL_PREVIOUS_CREDIT to $Credit
  move &RCO.IL_TOTAL_PAYMENT   to $TotalPayment
  move &RCO.IL_MONTH1_COUNT    to $Month1Count
  move &RCO.IL_MONTH2_COUNT    to $Month2Count
  move &RCO.IL_MONTH3_COUNT    to $Month3Count
  move &RCO.ILLINOIS_DCN       to $DCN

  #IfDef DebugF
     do Show-DebugF-Statements
  #EndIf

FROM PS_RSI_TAX810IL_CO RCO
WHERE RCO.OPRID        = $Prcs_OprID
  AND RCO.RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
  AND RCO.COMPANY      = $Company
END-SELECT

End-Procedure Get-CO-Run-Control-Detail

!***********************************************************************
! Procedure Process-Company-Totals
!***********************************************************************
Begin-Procedure Process-Company-Totals

  move 0 to $RptWages
  move 0 to #Co_Ee_Cnt

BEGIN-SELECT
COUNT(TBTTL.NLGRS_QTD) &EE_COUNT
SUM(TBTTL.NLGRS_QTD)   &QTD_TTL
SUM(TBTTL.NLGRS_MTD)   &MTD_TTL

  let $RptMonth = rtrim(ltrim($RptMonth,' '), ' ')  !RSI-HCM103344
  Evaluate $RptMonth
    When = '1'
    When = '2'
    When = '4'
    When = '5'
    When = '7'
    When = '8'
    When = '10'
    When = '11'
      move &MTD_TTL to #RptWages       !RSI-HCM103344
      Break
    When-Other
      move &QTD_TTL to #RptWages       !RSI-HCM103344
      Break
  End-Evaluate
  let $RptWages = ltrim(edit(#RptWages,'99999999999.99'), ' ')   !RSI-HCM103344
  move &EE_COUNT to #Co_Ee_Cnt

FROM  PS_TAX_BALANCE TBTTL
WHERE TBTTL.COMPANY        = $Company
  AND TBTTL.TAX_CLASS      = 'U'
  AND TBTTL.BALANCE_ID     = $Balance_Id
  AND TBTTL.BALANCE_YEAR   = #RptYear
  AND TBTTL.BALANCE_QTR    = #RptQtr
  AND TBTTL.STATE          = 'IL'
  AND TBTTL.LOCALITY       = ' '
  AND TBTTL.NLGRS_QTD     <> 0
  AND TBTTL.NLGRS_QTD      > 0
  AND TBTTL.BALANCE_PERIOD = (SELECT MAX(TBBTTL.BALANCE_PERIOD) FROM PS_TAX_BALANCE TBBTTL
                               WHERE TBBTTL.EMPLID        = TBTTL.EMPLID
                                 AND TBBTTL.COMPANY       = TBTTL.COMPANY
                                 AND TBBTTL.BALANCE_ID    = TBTTL.BALANCE_ID
                                 AND TBBTTL.BALANCE_YEAR  = TBTTL.BALANCE_YEAR
                                 AND TBBTTL.BALANCE_QTR   = TBTTL.BALANCE_QTR
                                 AND TBBTTL.STATE         = TBTTL.STATE
                                 AND TBBTTL.LOCALITY      = TBTTL.LOCALITY
                                 AND TBBTTL.TAX_CLASS     = TBTTL.TAX_CLASS
                                 AND TBBTTL.BALANCE_PERIOD <= #RptMonth
                                 AND TBBTTL.BALANCE_PERIOD >= #StartMonth)
END-SELECT

End-Procedure Process-Company-Totals

!***********************************************************************
! Procedure Process-Employees
!***********************************************************************
Begin-Procedure Process-Employees

BEGIN-SELECT
TB.EMPLID
{Dyn-S}$Balance_Source{Dyn-E}   &BALANCE_TOTAL=NUMBER
TB.TXGRS_QTD
NID.NATIONAL_ID
PD.LAST_NAME
PD.FIRST_NAME
PD.NAME_SUFFIX
PD.MIDDLE_NAME

  move &BALANCE_TOTAL to #RptWages

  #IfDef DebugC
     do Show-Debugc-Statements
  #EndIf

  If #RptWages > 0 or ($ProcessFileType = 'CSV' and #RptWages < 0)
     do Process-One-Employee
  Else
     let $Temp = 'Skipping EE: ' || &TB.EMPLID || ' ' || &PD.LAST_NAME || ','
     let $Temp = $Temp  || &PD.FIRST_NAME  || ' has zero or negative wages'
     Show $Temp
  End-If

#IfDef RSI_TOOLS_7.5
FROM PS_TAX_BALANCE TB, PS_PERS_DATA_EFFDT PD, PS_PERS_NID NID
#Else
FROM  PS_TAX_BALANCE TB, PS_PERSON_NAME PD, PS_PERS_NID NID
#EndIf
WHERE TB.COMPANY           = $Company
  AND PD.EMPLID            = TB.EMPLID
#IfDef RSI_TOOLS_7.5
  AND PD.EFFDT             = (SELECT MAX(DD.EFFDT)
                              FROM PS_PERS_DATA_EFFDT DD
                              WHERE DD.EMPLID = DD.EMPLID
                                AND DD.EFFDT <= $Period_End_Date)
#EndIf
  AND TB.TAX_CLASS         = {Tax_Class}
  AND TB.BALANCE_ID        = $Balance_Id
  AND TB.BALANCE_YEAR      = #RptYear
  AND TB.BALANCE_QTR       = #RptQtr
  AND TB.STATE             = {ThisState}
  AND TB.LOCALITY          = {Empty}
  AND PD.EMPLID            = NID.EMPLID
  AND NID.COUNTRY          = {NID_Country}
  AND NID.NATIONAL_ID_TYPE = $Payroll_NID_Type
  AND TB.BALANCE_PERIOD    = (SELECT MAX(TBB.BALANCE_PERIOD)
                              FROM PS_TAX_BALANCE TBB
                              WHERE TBB.EMPLID          = TB.EMPLID
                                AND TBB.COMPANY         = TB.COMPANY
                                AND TBB.BALANCE_ID      = TB.BALANCE_ID
                                AND TBB.BALANCE_YEAR    = TB.BALANCE_YEAR
                                AND TBB.BALANCE_QTR     = TB.BALANCE_QTR
                                AND TBB.STATE           = TB.STATE
                                AND TBB.LOCALITY        = TB.LOCALITY
                                AND TBB.TAX_CLASS       = TB.TAX_CLASS
                                AND TBB.BALANCE_PERIOD <= #RptMonth
                                AND TBB.BALANCE_PERIOD >= #StartMonth)
ORDER BY NID.NATIONAL_ID
END-SELECT

End-Procedure Process-Employees

!***********************************************************************
! Procedure Process-One-Employee
!***********************************************************************
Begin-Procedure Process-One-Employee

  move &NID.NATIONAL_ID to $S123 xxx

  If $S123 = $SSN_Mask or rtrim(&NID.NATIONAL_ID, ' ') = ''
     If $ProcessFileType = 'CSV'
        let $E_Ssn = rpad('',9,'0')
     Else
        move 'I        '   to $E_Ssn
     End-if
  Else
     move &NID.NATIONAL_ID to $E_Ssn
  End-If

  let $FirstName  = nvl(rtrim(ltrim(&PD.FIRST_NAME,' '),' '),' ')
  let $LastName   = nvl(rtrim(ltrim(&PD.LAST_NAME,' '),' '),' ')
  let $LastName   = $LastName || ' ' || nvl(rtrim(ltrim(&PD.NAME_SUFFIX,' '),' '),' ')
  let $MiddleInit = substr(&PD.MIDDLE_NAME,1,1)

  If $ProcessFileType = 'CSV'
     let $E_Ssn = edit($E_Ssn,'xxx-xx-xxxx')

     If #RptWages < 0
        move 0 to #RptWages
     End-If

     let $RptWages = ltrim(edit(#RptWages,'999999999999.99'), ' ')
     move &TB.EMPLID to $Emplid

     #IfDef DebugD
        do Show-DebugD-Statements
     #EndIf

     do Write-S-Record-CSV
     do Print-Rpt-Detail
  Else
     If #RptWages < 0
        let $Temp = &TB.EMPLID || ' ' || &PD.LAST_NAME || ',' || &PD.FIRST_NAME 
        let $Temp = $Temp || ' has zero or negative No Limit Gross wages. Setting to zero.'
        Show $Temp
        Move 0 to #RptWages
     End-If
     add #RptWages       to #Co_NlGrs_QTD
     add #RptWages       to #Tot_NlGrs_QTD
     multiply 100 times #RptWages
     do Format-Number(#RptWages,  $RptWages,  '09999999999999')
     move &TB.TXGRS_QTD  to #TxGrs_QTD
     If #TxGrs_QTD < 0
        let $Temp = &TB.EMPLID || ' ' || &PD.LAST_NAME || ',' || &PD.FIRST_NAME
        let $Temp = $Temp || ' has zero or negative Taxable Gross wages. Setting to zero.'
        Show $Temp
        Move 0 to #TxGrs_QTD
     End-If

     add #TxGrs_QTD      to #Co_TxGrs_QTD
     add #TxGrs_QTD      to #Tot_TxGrs_QTD
     multiply 100 times #TxGrs_QTD
     do Format-Number(#TxGrs_QTD,  $TxGrs_QTD,  '09999999999999')

     #IfDef DebugD
        do Show-DebugE-Statements
     #EndIf

     do Write-S-Record-ICESA
  End-If
End-Procedure Process-One-Employee

!***********************************************************************
! Procedure Write-S-Record-CSV
!***********************************************************************
Begin-Procedure Write-S-Record-CSV

  move 'S' to $rec
  let $rec = $rec || ',' || rtrim(substr($FirstName,1,12),' ')   !RSI-HCM103344
  let $rec = $rec || ',' || rtrim(substr($Lastname,1,20),' ')    !RSI-HCM103344
  let $rec = $rec || ',' || rtrim($E_SSN    ,' ')
  let $rec = $rec || ',' || rtrim($RptWages ,' ')

  write 10 from $rec

  add 1 to #Ttl_Rec_Cnt
  add 1 to #Count_S

End-Procedure Write-S-Record-CSV

!***********************************************************************
! Procedure Print-Rpt-Detail
!***********************************************************************
Begin-Procedure Print-Rpt-Detail

  use-report DEFAULT

  move $RptWages to #RptWages
  let $Name = rtrim($FirstName, ' ') || ' ' || rtrim($LastName,' ')

  print $E_SSN                 (+2,12)
  print $Emplid                (,32)
  print $Name                  (,45)
  print #RptWages              (,112)  edit '999999999999.99'

  add #RptWages to #Page_Total
  add #RptWages to #Company_Total
  add #RptWages to #Report_Total

End-Procedure Print-Rpt-Detail

!***********************************************************************
! Procedure Print-ICESA-File-Totals
!***********************************************************************
Begin-Procedure Print-ICESA-File-Totals

  print '**** File Totals ****'     (1,1)
  print 'No Limit Gross QTD '       (+2,1)
  print #Tot_NlGrs_QTD              (,55)   edit 99,999,999,999.99mi
  print 'Taxable Gross QTD  '       (+2,1)
  print #Tot_TxGrs_QTD              (,55)   edit 99,999,999,999.99mi
  print 'Excess Gross QTD   '       (+2,1)
  print #Tot_ExGrs_QTD              (,55)   edit 99,999,999,999.99mi
  print 'Employers Reported'        (+2,1)
  print #Count_E                    (,61)   edit 999,999,999
  print 'Employees Reported'        (+2,1)
  print #Count_F                    (,61)   edit 999,999,999
  print 'Output File:  '            (+2,1)

  print $FileID                     (,+2)

End-Procedure Print-ICESA-File-Totals

!***********************************************************************
! Procedure Print-ICESA-File-Totals
!***********************************************************************
Begin-Procedure Print-ICESA-CO-Totals

  move $TaxesDue        to #TaxesDue
  move $PrevQtrUnderpay to #PrevQtrUnderpay
  move $Interest        to #Interest
  move $Penalty         to #Penalty
  move $Credit          to #Credit
  move $TotalPayment    to #TotalPayment
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count
  print '**** Company Total ****'         (1,1)
  print 'No Limit Gross QTD '             (+2,1)
  print #Co_NlGrs_QTD                     (,55)   edit 99,999,999,999.99mi
  print 'Taxable Gross QTD  '             (+2,1)
  print #Co_TxGrs_QTD                     (,55)   edit 99,999,999,999.99mi
  print 'Excess Gross QTD   '             (+2,1)
  print #Co_ExGrs_QTD                     (,55)   edit 99,999,999,999.99mi
  print 'Employees Reported'              (+2,1)
  print #Count_S                          (,61)   edit 999,999,999
  print 'Taxes Due '                      (+2,1)
  print #TaxesDue                         (,55)   edit 99,999,999,999.99mi
  print 'Previous Qtr Underpayment '      (+2,1)
  print #PrevQtrUnderpay                  (,55)   edit 99,999,999,999.99mi
  print 'Interest  '                      (+2,1)
  print #Interest                         (,55)   edit 99,999,999,999.99mi
  print 'Penalty   '                      (+2,1)
  print #Penalty                          (,55)   edit 99,999,999,999.99mi
  print 'Credit/Overpayment'              (+2,1)
  print #Credit                           (,55)   edit 99,999,999,999.99mi
  print 'Total Payment '                  (+2,1)
  print #TotalPayment                     (,55)   edit 99,999,999,999.99mi
  print 'Month 1 Count '                  (+2,1)
  print #Month1Count                      (,62)   edit 99,999,999
  print 'Month 2 Count '                  (+2,1)
  print #Month2Count                      (,62)   edit 99,999,999
  print 'Month 3 Count '                  (+2,1)
  print #Month3Count                      (,62)   edit 99,999,999
  print 'Document Control Number'         (+2,1)
  print $DCN                              (,33)
  print 'Tax Type Code'                   (+2,1)
  print $TaxTypeCode                      (,33)
  If $TaxTypeCode = 'T'
    print '(Taxable)'                     (,+1)
  Else
    print '(Reimbursable)'                (,+1)
  End-If

End-Procedure Print-ICESA-CO-Totals

!***********************************************************************
! Procedure Get-Month
!***********************************************************************
Begin-Procedure Get-Month

  Evaluate #Balance_Period
    When = 1
      let $Month = 'January'
      Break
    When = 2
      let $Month = 'February'
      Break
    When = 3
      let $Month = 'March'
      Break
    When = 4
      let $Month = 'April'
      Break
    When = 5
      let $Month = 'May'
      Break
    When = 6
      let $Month = 'June'
      Break
    When = 7
      let $Month = 'July'
      Break
    When = 8
      let $Month = 'August'
      Break
    When = 9
      let $Month = 'September'
      Break
    When = 10
      let $Month = 'October'
      Break
    When = 11
      let $Month = 'November'
      Break
    When = 12
      let $Month = 'December'
      Break
  End-Evaluate

End-Procedure Get-Month

!***********************************************************************
! Procedure Write-A-Record-ICESA
!***********************************************************************

Begin-Procedure Write-A-Record-ICESA

  write 10 from 'A':1      ! 1 - 1
           $RptYear:4      ! 2 - 5
           $XmitEIN:9      ! 6 - 14
           $TaxCode:4      ! 15 - 18
               $Sp5:5      ! 19 - 23
        $XmitCoName:50     ! 24 - 73
       $XmitAddress:40     ! 74 - 113
          $XmitCity:25     ! 114 - 138
         $XmitState:2      ! 139 - 140
              $Sp13:13     ! 141 - 153
           $XmitZip:5      ! 154 - 158
      $XmitZipExtsn:5      ! 159 - 163
       $XmitContact:30     ! 164 - 193
         $XmitPhone:10     ! 194 - 203
      $XmitPhoneExt:4      ! 204 - 207
               $Sp6:6      ! 208 - 213
               $Sp1:1      ! 214 - 214
               $Sp5:5      ! 215 - 219
               $Sp1:1      ! 220 - 220
               $Sp9:9      ! 221 - 229
              $Sp13:13     ! 230 - 242
      $CreationDate:8      ! 243 - 250
              $Sp26:26     ! 251 - 276

  add 1 to #Ttl_Rec_Cnt

End-Procedure Write-A-Record-ICESA

!***********************************************************************
! Procedure Write-B-Record-ICESA
!***********************************************************************
Begin-Procedure Write-B-Record-ICESA

  write 10 from 'B':1      ! 1 - 1
           $RptYear:4      ! 2 - 5
           $XmitEIN:9      ! 6 - 14
               $Sp8:8      ! 15 - 22
               $Sp2:2      ! 23 - 24
               $Sp1:1      ! 25 - 25
               $Sp2:2      ! 26 - 27
           $RecCode:3      ! 28 - 30
               $Sp2:2      ! 31 - 32
               $Sp2:2      ! 33 - 34
           $TaxCode:4      ! 35 - 38
             $Sp108:108    ! 39 - 146
        $XmitCoName:44     ! 147 - 190
       $XmitAddress:35     ! 191 - 225
          $XmitCity:20     ! 226 - 245
         $XmitState:2      ! 246 - 247
               $Sp5:5      ! 248 - 252
           $XmitZip:5      ! 253 - 257
      $XmitZipExtsn:5      ! 258 - 262
          $FileType:2      ! 263 - 264
              $Sp12:12     ! 265 - 276

  add 1 to #Ttl_Rec_Cnt

End-Procedure Write-B-Record-ICESA

!***********************************************************************
! Procedure Write-E-Record-CSV
!***********************************************************************
Begin-Procedure Write-E-Record-CSV

  move 'E' to $rec
  let $rec = $rec || ',' || rtrim($Federal_EIN,' ')
  let $rec = $rec || ',' || rtrim($State_UI_acct,' ')
  let $rec = $rec || ',' || $RptWages
  let $rec = $rec || ',0'

  write 10 from $rec

  add 1 to #Ttl_Rec_Cnt
  add 1 to #Count_E

End-Procedure Write-E-Record-CSV

!***********************************************************************
! Procedure Write-E-Record-ICESA
!***********************************************************************
Begin-Procedure Write-E-Record-ICESA

    write 10 from 'E':1    ! 1 - 1
             $RptYear:4    ! 2 - 5
         $Federal_EIN:9    ! 6 - 14
                 $Sp9:9    ! 15 - 23
        $Company_name:50   ! 24 - 73
        $Company_Addr:40   ! 74 - 113
        $Company_City:25   ! 114 - 138
       $Company_State:2    ! 139 - 140
                 $Sp8:8    ! 141 - 148
    $Company_ZipExtsn:5    ! 149 - 153
         $Company_Zip:5    ! 154 - 158
                 $Sp1:1    ! 159 - 159
                 $Sp1:1    ! 160 - 160
                 $Sp2:2    ! 161 - 162
                 $Sp4:4    ! 163 - 166
             $TaxCode:4    ! 167 - 170
             $StateID:2    ! 171 - 172
       $State_UI_acct:7    ! 173 - 179
                 $Sp8:8    ! 180 - 187
    $Period_End_Month:2    ! 188 - 189
            $No_Wages:1    ! 190 - 190
         $TaxTypeCode:1    ! 191 - 191
                $Sp85:85   ! 192 - 276

  add 1 to #Count_E
  add 1 to #Ttl_Rec_Cnt

End-Procedure Write-E-Record-ICESA

!***********************************************************************
! Procedure Write-F-Record-ICESA
!***********************************************************************
Begin-Procedure Write-F-Record-ICESA

  let #Tot_ExGrs_QTD = #Tot_NlGrs_QTD - #Tot_TxGrs_QTD
  If #Tot_ExGrs_QTD < 0 
     Move 0 to #Tot_ExGrs_QTD
  End-IF
  move #Count_F       to $Count_F '0999999999'
  move #Count_E       to $Count_E '0999999999'
  multiply 100 times #Tot_NlGrs_QTD
  move #Tot_NlGrs_QTD to $Tot_NlGrs_QTD '099999999999999'
  Divide 100 into #Tot_NlGrs_QTD
  multiply 100 times #Tot_ExGrs_QTD
  move #Tot_ExGrs_QTD to $Tot_ExGrs_QTD '099999999999999'
  Divide 100 into #Tot_ExGrs_QTD
  multiply 100 times #Tot_TxGrs_QTD
  move #Tot_TxGrs_QTD to $Tot_TxGrs_QTD '099999999999999'
  Divide 100 into #Tot_TxGrs_QTD

  write 10 from 'F':1      ! 1 - 1
           $Count_F:10     ! 2 - 11
           $Count_E:10     ! 12 - 21
           $TaxCode:4      ! 22 - 25
            $Zero15:15     ! 26 - 40
     $Tot_NlGrs_QTD:15     ! 41 - 55
     $Tot_ExGrs_QTD:15     ! 56 - 70
     $Tot_TxGrs_QTD:15     ! 71 - 85
            $Zero15:15     ! 86 - 100
             $Sp176:176    ! 101 - 276

End-Procedure Write-F-Record-ICESA

!***********************************************************************
! Procedure Write-S-Record-ICESA
!***********************************************************************
Begin-Procedure Write-S-Record-ICESA

  write 10 from 'S':1      ! 1 - 1
             $E_SSN:9      ! 2 - 10
          $LastName:20     ! 11 - 30
         $FirstName:12     ! 31 - 42
        $MiddleInit:1      ! 43 - 43
           $StateID:2      ! 44 - 45
               $Sp4:4      ! 46 - 49
            $Zero14:14     ! 50 - 63
          $RptWages:14     ! 64 - 77
            $Zero14:14     ! 78 - 91
            $Zero14:14     ! 92 - 105
            $Zero15:15     ! 106 - 120
             $Zero9:9      ! 121 - 129
               $Sp2:2      ! 130 - 131
               $Sp3:3      ! 132 - 134
               $Sp8:8      ! 135 - 142
           $TaxCode:4      ! 143 - 146
     $State_UI_acct:7      ! 147 - 153
               $Sp8:8      ! 154 - 161
               $Sp3:3      ! 162 - 164
              $Sp12:12     ! 165 - 176
            $Zero14:14     ! 177 - 190
            $Zero14:14     ! 191 - 204
              $Sp10:10     ! 205 - 214
  $Period_End_Month:2      ! 215 - 216
           $RptYear:4      ! 217 - 220
              $Sp56:56     ! 221 - 276

  add 1 to #Count_S
  add 1 to #Ttl_Rec_Cnt

End-Procedure Write-S-Record-ICESA

!***********************************************************************
! Procedure Write-T-Record-ICESA
!***********************************************************************
Begin-Procedure Write-T-Record-ICESA

  let $TaxesDue        = edit(#TaxesDue        * 100,'0999999999999')
  let $PrevQtrUnderpay = edit(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = edit(#Interest        * 100,'09999999999')
  let $Penalty         = edit(#Penalty         * 100,'09999999999')
  let $Credit          = edit(#Credit          * 100,'09999999999')
  let $TotalPayment    = edit(#TotalPayment    * 100,'09999999999')
  let $Month1Count     = edit(#Month1Count, '0999999')
  let $Month2Count     = edit(#Month2Count, '0999999')
  let $Month3Count     = edit(#Month3Count, '0999999')

  write 10 from 'T':1      ! 1 - 1
           $Count_S:7      ! 2 - 8
           $TaxCode:4      ! 9 - 12
            $Zero14:14     ! 13 - 26
      $Co_NlGrs_QTD:14     ! 27 - 40
      $Co_ExGrs_QTD:14     ! 41 - 54
      $Co_TxGrs_QTD:14     ! 55 - 68
            $Zero13:13     ! 69 - 81
     $Experience_Rt:6      ! 82 - 87
          $TaxesDue:13     ! 88 - 100
   $PrevQtrUnderpay:11     ! 101 - 111
          $Interest:11     ! 112 - 122
           $Penalty:11     ! 123 - 133
            $Credit:11     ! 134 - 144
               $Sp4:4      ! 145 - 148
            $Zero11:11     ! 149 - 159
               $Sp6:4      ! 160 - 163
            $Zero11:11     ! 164 - 174
      $TotalPayment:11     ! 175 - 185
            $Zero13:13     ! 186 - 198
            $Zero14:14     ! 199 - 212
            $Zero14:14     ! 213 - 226
       $Month1Count:7      ! 227 - 233
       $Month2Count:7      ! 234 - 240
       $Month3Count:7      ! 241 - 247
               $Sp3:3      ! 248 - 250
  $Period_End_Month:2      ! 251 - 252
           $RptYear:4      ! 253 - 256
               $Sp1:1      ! 257 - 257
               $DCN:10     ! 258 - 267
     $State_Ui_Acct:7      ! 268 - 274
               $Sp2:2      ! 275 - 276

  add 1 to #Ttl_Rec_Cnt

End-Procedure Write-T-Record-ICESA

!***********************************************************************
! Procedure Heading 9
!***********************************************************************
Begin-Heading 9

  #Include 'stdhdg01.sqc'

  print $RptText                (3,)  center

  If $ProcessFileType = 'CSV'
     print 'ACCT. NUMBER'        (+1,3)
     print $State_UI_acct        (,+3)
     print 'EMPLOYER'            (+1,3)
     print $Company              (,+3)
     print $Company_Name         (,+3)
     print $Company_Addr         (+1,3)
     print $Company_City         (+1,3)
     print ','                   (,+1)
     print $Company_State        (,+1)
     print $Company_Zip          (,+2)
     print 'SSN'                 (+2,12)
     print 'EMPLID'              (,32)
     print 'NAME'                (,45)
     print 'TOTAL WAGES'         (,116)
  Else
     print 'Company'             (3,3)
     print $Company              (,+3)
     print $Company_Name         (,+3)
  End-If

End-Heading

!***********************************************************************
! Procedure Footing 5
!***********************************************************************
Begin-Footing 6

  If $ProcessFileType = 'CSV'
     print 'PAGE TOTAL'            (2,85)
     print #Page_Total             (,112) edit '999999999999.99'
     print 'COMPANY CURRENT TOTAL' (+2,85)
     print #Company_Total          (,112) edit '999999999999.99'
     print 'REPORT CURRENT TOTAL'  (+2,85)
     print #Report_Total           (,112) edit '999999999999.99'
     let #Page_Total = 0
  End-If

End-Footing

!***********************************************************************
! Procedure Show-DebugA-Statements
!***********************************************************************
Begin-Procedure Show-DebugA-Statements

  Show ' '
  Show '$RptYear                    = |' $RptYear                    '|'
  Show '$RptMonth                   = |' $RptMonth                   '|'
  Show '$Prcs_OprID                 = |' $Prcs_OprID                 '|'
  Show '$Balance_Source             = |' $Balance_Source             '|'
  Show 'Runcontroltable_From_Clause = ' $Runcontroltable_From_Clause '|'
  Show 'Opridcheck_Where_Clause     = ' $Opridcheck_Where_Clause     '|'
  Show 'Runcntlcheck_Where_Clause   = ' $Runcntlcheck_Where_Clause   '|'
  Show 'Companycheck_Where_Clause   = ' $Companycheck_Where_Clause   '|'
  Show 'CoStatusCheck_where_clause  = ' $CoStatusCheck_where_clause  '|'
  Show '*************************************************'

End-Procedure Show-DebugA-Statements

!***********************************************************************
! Procedure Show-DebugB-Statements
!***********************************************************************
Begin-Procedure Show-DebugB-Statements

  Show ' '
  Show 'Company_name  = |' $Company_name   '|'
  Show 'Federal_EIN   = |' $Federal_EIN    '|'
  Show 'State_UI_acct = |' $State_UI_acct  '|'
  Show 'Company_Addr  = |' $Company_Addr   '|'
  Show 'Company_City  = |' $Company_City   '|'
  Show 'Company_State = |' $Company_State  '|'
  Show 'Company_Zip   = |' $Company_Zip    '|'
  Show '*************************************************'

End-Procedure Show-DebugB-Statements

!***********************************************************************
! Procedure Show-DebugC-Statements
!***********************************************************************
Begin-Procedure Show-DebugC-Statements

  Show ' '
  Show 'TB.EMPLID       = |' &TB.EMPLID       '|'
  Show 'BALANCE_TOTAL   = |' &BALANCE_TOTAL   '|'
  Show 'TB.TXGRS_QTD    = |' &TB.TXGRS_QTD    '|'
  Show 'NID.NATIONAL_ID = |' &NID.NATIONAL_ID '|'
  Show 'PD.LAST_NAME    = |' &PD.LAST_NAME    '|'
  Show 'PD.FIRST_NAME   = |' &PD.FIRST_NAME   '|'
  Show 'PD.NAME_SUFFIX  = |' &PD.NAME_SUFFIX  '|'
  Show 'PD.MIDDLE_NAME  = |' &PD.MIDDLE_NAME  '|'
  Show '*************************************************'

End-Procedure Show-DebugC-Statements

!***********************************************************************
! Procedure Show-DebugD-Statements
!***********************************************************************
Begin-Procedure Show-DebugD-Statements

  Show ' '
  Show 'TB.EMPLID = |' &TB.EMPLID  '|'
  Show 'FirstName = |' $FirstName  '|'
  Show 'Lastname  = |' $Lastname   '|'
  Show 'E_SSN     = |' $E_SSN      '|'
  Show 'RptWages  = |' $RptWages   '|'
  Show '*************************************************'

End-Procedure Show-DebugD-Statements

!***********************************************************************
! Procedure Show-DebugE-Statements
!***********************************************************************
Begin-Procedure Show-DebugE-Statements

  Show ' '
  Show 'TB.EMPLID        = |' &TB.EMPLID       '|'
  Show 'E_SSN            = ' $E_SSN            '|'
  Show 'LastName         = ' $LastName         '|'
  Show 'FirstName        = ' $FirstName        '|'
  Show 'MiddleInit       = ' $MiddleInit       '|'
  Show 'RptWages         = ' $RptWages         '|'
  Show 'State_UI_acct    = ' $State_UI_acct    '|'
  Show 'Period_End_Month = ' $Period_End_Month '|'
  Show 'RptYear          = ' $RptYear          '|'
  Show '*************************************************'

End-Procedure Show-DebugE-Statements

!***********************************************************************
! Procedure Show-DebugF-Statements
!***********************************************************************
Begin-Procedure Show-DebugF-Statements

  Show ' '
  Show '$Balance_Year    = |' $Balance_Year    '|'
  Show '$Prcs_OprID      = |' $Prcs_OprID      '|'
  Show '$Company         = |' $Company         '|'
  Show '$TaxTypeCode     = |' $TaxTypeCode     '|'
  Show '$TaxesDue        = |' $TaxesDue        '|'
  Show '$PrevQtrUnderpay = |' $PrevQtrUnderpay '|'
  Show '$Interest        = |' $Interest        '|'
  Show '$Penalty         = |' $Penalty         '|'
  Show '$Credit          = |' $Credit          '|'
  Show '$TotalPayment    = |' $TotalPayment    '|'
  Show '$Month1Count     = |' $Month1Count     '|'
  Show '$Month2Count     = |' $Month2Count     '|'
  Show '$Month3Count     = |' $Month3Count     '|'
  Show '$DCN             = |' $DCN             '|'

  Show '*************************************************'

End-Procedure Show-DebugF-Statements

!***********************************************************************
! Procedure Show-DebugG-Statements
!***********************************************************************
Begin-Procedure Show-DebugG-Statements

  Show ' '
  Show '$RptYear      = |' $RptYear      '|'
  Show '$XmitEIN      = |' $XmitEIN      '|'
  Show '$XmitCoName   = |' $XmitCoName   '|'
  Show '$XmitAddress  = |' $XmitAddress  '|'
  Show '$XmitCity     = |' $XmitCity     '|'
  Show '$XmitState    = |' $XmitState    '|'
  Show '$XmitZip      = |' $XmitZip      '|'
  Show '$XmitZipExtsn = |' $XmitZipExtsn '|'
  Show '$XmitContact  = |' $XmitContact  '|'
  Show '$XmitPhone    = |' $XmitPhone    '|'
  Show '$XmitPhoneExt = |' $XmitPhoneExt '|'
  Show '$CreationDate = |' $CreationDate '|'
  Show '*************************************************'

End-Procedure Show-DebugG-Statements

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getcodta.sqc'  !Routine to retrieve company data
