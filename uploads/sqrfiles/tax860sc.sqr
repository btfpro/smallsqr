!***********************************************************************
!  TAX860SC:  Qtrly Wage List - SOUTH CAROLINA - MMREF-1               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2008 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2008/07/17:16:56:21                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  741871                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup01.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined


begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10
  if #Count_F > 0
    display ''
    display 'Upon successful conclusion of this program, the file will have been'
    display 'created, as follows:'
    display ''
    display '  TAX860SC  contains 512-character records in the EFW2/MMREF-1 format'
    display '            required for reporting of quarterly wages to the'
    display '            South Carolina ESC.'
    display ''
    display ''
    display 'Follow instructions from the ESC for preparing and submitting'
    display 'the file on a CD.'
      display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report


begin-procedure Init-Report

  do Init-DateTime
  do Init-Number

  do Get-Current-DateTime

  do Stdapi-Init
  do Get-Calendar-Year-Id

  do Initialization

  move 'TAX860SC' to $ReportID
  move 'South Carolina Quarterly UI Wage Report' to $ReportTitle
    display ''
  display 'Creating file for South Carolina UI Wage Reporting'

end-procedure


begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'SC'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate    to $AsOfDate
  move &TX.Balance_Year  to $RptYear  9999
  let $ReportingPeriod = $QtrEndMonth || $RptYear

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  If $Prcs_Process_Instance = ''
     do Prompts
  else
     do Select-Transmitter-Contact-Data
  End-if


    open '{IMPORTPREFIX}TAX860SC{IMPORTSUFFIX}' as 10 for-writing record=512:fixed

end-procedure


begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

  do Get-Company-Data                 !Transmitter identifying data
  do Write-A-Record


begin-SELECT
A.COMPANY
A.DESCR

  move &A.Company       to $Company
  move &A.Descr         to $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  do Write-F-Record
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if

end-procedure


begin-procedure Read-Employee-Data

begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D.NAME_SUFFIX

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.STATE         = $State
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT

end-procedure


begin-procedure Process-Employee

  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'        to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID    to $NATIONAL_ID
  end-if

  move &D.LAST_NAME   to $LastName
  move &D.FIRST_NAME  to $FirstName
  move &D.MIDDLE_NAME to $MiddleName
  move &D.NAME_SUFFIX to $Suffix
  uppercase $LastName
  uppercase $FirstName
  uppercase $MiddleName
  uppercase $Suffix

  let #NlGrs_QTD = &C.NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD

  let #TxGrs_QTD = &C.TxGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD

  multiply 100 times #NlGrs_QTD
  multiply 100 times #TxGrs_QTD

  do Write-S-Record

end-procedure


begin-procedure Before-Company

  do Get-Company-Data

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company  ' noline
    display $Company    noline
    stop
  end-if

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')

  let #Hyphen   = INSTR($StateEIN,'-',1)
  if #Hyphen <> 0
     if #Hyphen > 6
        let $StateEIN = SUBSTR($StateEIN,1,6)
     else
        let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1))
     end-if
  else
     let $StateEIN = SUBSTR($StateEIN,1,6)
  end-if

  move $StateEIN to $StateEIN  099999

  do Write-E-Record

end-procedure


begin-procedure After-Company

  do Write-T-Record

  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Count_S to #Count_F

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD

    move 0 to #Count_S
    new-page
  end-if

end-procedure


Begin-Procedure Write-A-Record

  move $CompanyName    to $TransmitterName
  move $CompnyAdd1     to $TransmitterAddress1
  move $CompnyAdd2     to $TransmitterAddress2
  move $CompnyCity     to $TransmitterCity
  move &CT.State       to $TransmitterState

  if &CT.Country = 'USA'
     move &CT.Postal   to $Zip
  else
     move ' '          to $Zip
  end-if

  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress1
  uppercase $TransmitterAddress2
  uppercase $TransmitterCity
  uppercase $TransmitterContact


  write 10 from     'RA':2     !   1 -   2
                     $Sp:33    !   3 -  35
                    '99':2     !  36 -  37
                     $Sp:179   !  38 - 216
        $TransmitterName:57    ! 217 - 273
    $TransmitterAddress1:22    ! 274 - 295
    $TransmitterAddress2:22    ! 296 - 317
        $TransmitterCity:22    ! 318 - 339
       $TransmitterState:2     ! 340 - 341
                    $Zip:5     ! 342 - 346
                     $Sp:49    ! 347 - 395
     $TransmitterContact:27    ! 396 - 422
       $TransmitterPhone:15    ! 423 - 437
                     $Sp:62    ! 438 - 499
                     'L':1     ! 500
                     $Sp:12    ! 501 - 512

End-Procedure


Begin-Procedure Write-E-Record

  move $CompanyName    to $ErName
  move $CompnyAdd1     to $ErAddress1
  move $CompnyAdd2     to $ErAddress2
  move $CompnyCity     to $ErCity
  move &CT.State       to $ErState

  if &CT.Country = 'USA'
     move &CT.Postal   to $Zip
  else
     move ' '          to $Zip
  end-if

  move $Zip to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0 and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip to $ZipExtsn ~~~~~~xxxx

  uppercase $ErName
  uppercase $ErAddress1
  uppercase $ErAddress2
  uppercase $ErCity


  write 10 from     'RE':2     !   1 -   2
                $RptYear:4     !   3 -   6
                     $Sp:33    !   7 -  39
                 $ErName:57    !  40 -  96
             $ErAddress1:22    !  97 - 118
             $ErAddress2:22    ! 119 - 140
                 $ErCity:22    ! 141 - 162
                $ErState:2     ! 163 - 164
                    $Zip:5     ! 165 - 169
               $ZipExtsn:4     ! 170 - 173
                     $Sp:45    ! 174 - 218
                     'R':1     ! 219
                     $Sp:293   ! 220 - 512

End-Procedure


begin-procedure Write-S-Record

  move #NlGrs_QTD        to $NlGrs_QTD    09999999999
  move #TxGrs_QTD        to $TxGrs_QTD    09999999999

  do Chk-Empl-Name


  write 10 from     'RS':2     !   1 -   2
                    '45':2     !   3 -   4
                     $Sp:5     !   5 -   9
            $NATIONAL_ID:9     !  10 -  18
              $FirstName:15    !  19 -  33
             $MiddleName:15    !  34 -  48
               $LastName:20    !  49 -  68
                 $Suffix:4     !  69 -  72
                     $Sp:124   !  73 - 196
        $ReportingPeriod:6     ! 197 - 202
              $NlGrs_QTD:11    ! 203 - 213
              $TxGrs_QTD:11    ! 214 - 224
                     $Sp:23    ! 225 - 247
               $StateEin:6     ! 248 - 253
                     $Sp:259   ! 254 - 512


  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $TxGrs_QTD
  move 0  to #TxGrs_QTD

  add 1 to #Count_S

end-procedure

begin-procedure Chk-Empl-Name

  let $ChkName  = rtrim($FirstName,' ')
  do Chk-Name-Err($ChkName,'Employee',$FirstName)

  let $ChkName  = rtrim($LastName,' ')
  do Chk-Name-Err($ChkName,'EmplLastName',$LastName)

  let $ChkName  = rtrim($MiddleName,' ')
  do Chk-Name-Err($ChkName,'Employee',$MiddleName)

end-procedure


begin-procedure Chk-Name-Err($ChkName,$NameType,:$OutputName)

  let #ChkName_Lgth = length($ChkName)
  let #ChkName_Pos  = 1

  while #ChkName_Pos <= #ChkName_Lgth
    let $ChkName_Sub  = substr($ChkName, #ChkName_Pos, 1)
    let $ChkName_Sub  = upper($ChkName_Sub)
    let #ChkName_Rem_Lgth = #ChkName_Lgth - #ChkName_Pos

    if $ChkName_Sub = ',' or $ChkName_Sub = '-'  or $ChkName_Sub = '.'  or $ChkName_Sub = ';'  or $ChkName_Sub = ':'
      let $OutputName = substr($OutputName,1,#ChkName_Pos -1)||' '||substr($OutputName,#ChkName_Pos+1,#ChkName_Rem_Lgth)
    end-if
    add 1 to #ChkName_Pos
  end-while

end-procedure


Begin-Procedure Write-T-Record

  move  #Count_S to $Count_S  0999999

  write 10 from 'RT':2     !   1 -   2
            $Count_S:7     !   3 -   9
                 $Sp:503   !  10 - 512

End-Procedure


Begin-Procedure Write-F-Record

  move  #Count_F to $Count_F  0999999

  write 10 from 'RF':2     !   1 -   2
            $Count_F:7     !   3 -   9
                 $Sp:503   !  10 - 512

End-Procedure


begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $TransmitterContact  maxlen=30 '  Contact name (30 char max)'
  input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'
  do Unstring-Phone-No
end-procedure

begin-procedure Unstring-Phone-No
  unstring  $TransmitterPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $TransmitterPhone = $str1 || $str3 || $str4
end-procedure


begin-procedure Select-Transmitter-Contact-Data
begin-select
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN

FROM PS_TAX960_PARM RC960
end-select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
     show 'MMREF Parameters must be set up on SETUP Menu.'
     show 'Re-execute after establishing MMREF Parameters.'
     stop
  end-if

  let $TransmitterContact       = translate(&RC960.CONTACT_NAME_SSA,',','')

  let $TempPho1= translate (&RC960.TELEPHONE_NBR,' ','')
  let $TempPho1= translate ($TempPho1,'-','')
  let $TempPho1= translate ($TempPho1,'(','')
  let $TempPho1= translate ($TempPho1,')','')
  let $TempPho1= translate ($TempPho1,'/','')
  let $TempPho1= translate ($TempPho1,'\','')
  move $TempPho1 to $TransmitterPhone

  do Is-String-Numeric ($TransmitterPhone, #Rtrn_Value)
  if (length($TempPho1) <> 10) or (#Rtrn_Value = 0)
     display '*** Warning: Contact Telephone Number is not 10 digits ' noline
     display ': ' noline
     display $TransmitterPhone
     display ''
  end-if

  If &RC960.PHONE_EXTN <> 0
     move &RC960.PHONE_EXTN to $TransmitterPhoneExt
  Else
     move '    ' to $TransmitterPhoneExt
  End-if

End-Procedure


begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
