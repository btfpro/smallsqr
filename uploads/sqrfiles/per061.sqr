!***********************************************************************
!  PER061:  Manage Labor Relations Letter Data Extract                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:50:12                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
! This SQR is a 'shell' program that creates several output files that
! may be used to perform a mail merge using a word processing package to
! print letters in the Labor Relations Module.

#include 'setenv.sqc'    !Set environment
#Include 'setup06.sqc'   !Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report


begin-procedure Init-Report

  move 'PER061' to $ReportID
  move 'Labor Relations Letter Data Extract' to $ReportTitle
  display $ReportTitle

  do Set-MonthDDYYYY
  Do Delete-Worktable
  move 'MLR' to $AppPrefix  !3 character to group files by application
  move 'LTR' to $OutputFile !3 character to group files created by program

  do Stdapi-Init
  do Get-Report-Language

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if

end-procedure

begin-procedure Get-Values

!No Prompt

end-procedure

begin-procedure Set-MonthDDYYYY
! Format to pass the current date for merging with letters as
! Month DD, YYYY format

  move '1' to $MMLZero
  move '1' to $DDLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $out, {DEFMDY},'','')
  let $MonthCd =  {ps-substr}($out, 1, 2)
  do Get-Month-Name ($MonthCd, $MonthName)
  let $Current_Date = $MonthName || ' ' || {ps-substr}($out,4,2) || ', ' || {ps-substr}($out,7,4)
end-procedure

begin-procedure Delete-Worktable
let $sql-statement = 'PER061.SQR,Delete-Worktable,Delete,PS_R_PER061'

begin-SQL On-Error=SQL-Error
DELETE FROM PS_R_PER061
end-SQL
end-procedure

begin-procedure Write-Done
! Create a temporary output file so that a Windows-based word processing
! package such as Word for Windows can detect that the SQR report has
! completed processing.

  open '{IMPORTPREFIX}DONEFLG.TMP{IMPORTSUFFIX}'    as 1 for-writing record=4
  move 'DONE' TO $ioarea
  write 1 from $ioarea
  close 1

end-procedure

!***********************************************************************
! MAIN
!***********************************************************************
begin-procedure Process-Main

! Scan through all the data records that have letter codes
  do Get-Disciplinary-Action
  do Get-Grievance

! Process each record in PS_R_PER061 and create extract file for
! word processing package in comma separated variable (CSV) format.
  do Create-Extract

  do Delete-Worktable
!DG
  if rtrim($prcsoutputdir,' ') <> ''
       do Write-Done
  end-if

end-procedure


!***********************************************************************
!Get Disciplinary Action Data and insert one row for each letter to be generated
!***********************************************************************

begin-procedure Get-Disciplinary-Action

let $sql-statement = 'PER061.SQR,Get-Disciplinary-Action,Select,PS_R_PER061'
begin-SELECT On-Error=SQL-Error

F.LETTER_CD,
B.EMPLID,
B.DISCIPLINE_DT,
B.DISCIPLINARY_TYPE,
C.DESCR,
B.FINAL_RESOLUTION,
B.RESLTN_COMM,
B.DESCRLONG


         move &F.LETTER_CD to $Letter_Cd1
         move &B.EMPLID to $Emplid1
         move &B.DISCIPLINE_DT to $Disciplin_Dt1
         move &B.DISCIPLINARY_TYPE to $Disciplinary_Type1
         move &C.DESCR to $ResDescr1
         move &B.FINAL_RESOLUTION to $Final_Resolution1
         move &B.RESLTN_COMM to $Resolution_Comments1
         move &B.DESCRLONG to $Descrlong1

         do Insert-Proc

  FROM PS_DISCIPLIN_LTR F, PS_DISCIPLIN_ACTN B, PS_DISCIP_TYPE_TBL C
  WHERE F.EMPLID=B.EMPLID
    AND F.DISCIPLINE_DT = B.DISCIPLINE_DT
    AND F.DISCIPLINARY_TYPE = B.DISCIPLINARY_TYPE
    AND F.LETTER_PRINTED_DT IS NULL
    AND F.LETTER_CD <> ' '
    AND C.DISCIPLINARY_TYPE = F.DISCIPLINARY_TYPE
    AND C.EFFDT = (SELECT MAX(D.EFFDT)
                   FROM PS_DISCIP_TYPE_TBL D
                   WHERE D.DISCIPLINARY_TYPE = C.DISCIPLINARY_TYPE
                   AND D.EFF_STATUS = 'A'
                   AND D.EFFDT <= B.DISCIPLINE_DT)
end-SELECT


let $sql-statement = 'PER061.SQR,Get-Disciplinary-Action,Update,PS_Disciplin_Actn'
begin-SQL On-Error=SQL-Error
UPDATE PS_DISCIPLIN_LTR
  SET   LETTER_PRINTED_DT = $AsOfToday
  WHERE LETTER_PRINTED_DT IS NULL
    AND LETTER_CD <> ' '
end-SQL

end-procedure


begin-procedure Insert-Proc

let $sql-statement = 'PER061.SQR,Get-Disciplinary-Action,Insert,PS_R_PER061'
begin-SQL On-Error=SQL-Error

INSERT INTO PS_R_PER061  (LETTER_CD, EMPLID, TRANS_DT, DISCIPLINARY_TYPE, DESCR, GRIEVANCE_ID, FINAL_RESOLUTION, DESCR2, RESLTN_COMM, DESCRLONG)
VALUES ($Letter_Cd1,$Emplid1,$Disciplin_Dt1,$Disciplinary_Type1,$ResDescr1, ' ',$Final_Resolution1,' ',$Resolution_Comments1,$Descrlong1)

end-SQL

end-procedure


!***********************************************************************
!Get Grievance Data and insert one row for each letter to be generated
!***********************************************************************

begin-procedure Get-Grievance

let $sql-statement = 'PER061.SQR,Get-Grievance,Select,PS_R_PER061'
begin-SELECT On-Error=SQL-Error

G.LETTER_CD,
H.EMPLID,
H.GRIEVANCE_DT,
H.GRIEVANCE_ID,
H.FINAL_RESOLUTION,
H.RESLTN_COMM,
H.DESCRLONG


        move &G.LETTER_CD to $Letter_Cd2
        move &H.EMPLID to $Emplid2
        move &H.GRIEVANCE_DT to $Grievance_Dt2
        move &H.GRIEVANCE_ID to $Grievance_Id2
        move &H.FINAL_RESOLUTION to $Final_Resolution2
        move &H.RESLTN_COMM to $Resltn_Comm2
        move &H.DESCRLONG to $Descrlong2

        do Insert-Proc-Gr


  FROM PS_GRIEVANCE H, PS_GRIEVANCE_STEP G
  WHERE G.LETTER_PRINTED_DT IS NULL
    AND G.LETTER_CD <> ' '
    AND G.GRIEVANCE_ID = H.GRIEVANCE_ID

end-SELECT

let $sql-statement = 'PER061.SQR,Get-Grievance,Update,PS_Grievance_Step'
begin-SQL On-Error=SQL-Error
UPDATE PS_GRIEVANCE_STEP
  SET   LETTER_PRINTED_DT = $AsOfToday
  WHERE LETTER_PRINTED_DT IS NULL
    AND LETTER_CD <> ' '
end-SQL

end-procedure


begin-procedure Insert-Proc-Gr

let $sql-statement = 'PER061.SQR,Get-Disciplinary-Action,Insert,PS_R_PER061'
begin-SQL On-Error=SQL-Error

INSERT INTO PS_R_PER061
  (LETTER_CD, EMPLID, TRANS_DT, DISCIPLINARY_TYPE, DESCR, GRIEVANCE_ID, FINAL_RESOLUTION, DESCR2, RESLTN_COMM, DESCRLONG)
  VALUES($Letter_Cd2,$Emplid2,$Grievance_Dt2,' ',' ',$Grievance_Id2,$Final_Resolution2,' ',$Resltn_Comm2,$Descrlong2)

end-SQL

end-procedure

!***********************************************************************
!
!***********************************************************************
begin-procedure Get-Resolution-Descr

begin-SELECT

E.DESCR

  let $ResDescr = &C.DESCR

FROM PS_RESLTN_TYPE_TBL E
WHERE E.RESOLUTION_TYPE = $Final_Resolution
AND   E.EFFDT = (SELECT MAX(D.EFFDT)
                 FROM PS_RESLTN_TYPE_TBL D
                 WHERE D.RESOLUTION_TYPE = E.RESOLUTION_TYPE
                 AND D.EFF_STATUS = 'A'
                 AND D.EFFDT <= $AsOfToday)
end-SELECT
end-procedure


!***********************************************************************
! CREATE EXTRACT
!***********************************************************************
begin-procedure Create-Extract

  move ' ' to $Prior_Letter_Cd

BEGIN-SELECT
A.LETTER_CD

  if &A.Letter_Cd <> $Prior_Letter_Cd          !When letter code changes
    move '{IMPORTPREFIX}' to $FileName           !start a new report file

    do Get-prcsoutputdir
    if (rtrim($prcsoutputdir,' ') <> '')
       move $prcsoutputdir to $Filename
       move 'LTR' to $AppPrefix  !DG allows generic LTR prefix
    end-if


    let $Letter_Cd = rtrim(&A.Letter_Cd,' ')
    concat $AppPrefix with $FileName
    concat $Letter_Cd with $FileName
    concat '.' with $Filename
    concat $OutputFile with $Filename
    concat '{IMPORTSUFFIX}' with $Filename
    NEW-REPORT $Filename
    if $Letter_Cd='DAF'
    move 'LANG,SystemDate,Line1,Line2,Line3,Line4,Line5,Line6,Salutation,Trans_dt,Type,Disc_Descr,ID,DescrLong,Action,Resolution,Res_Descr,Comments'
         to $ioarea
        print $ioarea (1,1)
    end-if
    if $Letter_Cd='DAR'
    move 'LANG,SystemDate,Line1,Line2,Line3,Line4,Line5,Line6,Salutation,Trans_dt,Type,Disc_Descr,ID,DescrLong,Action,Resolution,Res_Descr,Comments'
         to $ioarea
        print $ioarea (1,1)
    end-if
    if $Letter_Cd='GRF'
    move 'LANG,SystemDate,Line1,Line2,Line3,Line4,Line5,Line6,Salutation,Trans_dt,Grievance_ID,Resolution,Res_Descr,Comments,Description'
         to $ioarea
    print $ioarea (1,1)
    end-if
    if $Letter_Cd='GRR'
    move 'LANG,SystemDate,Line1,Line2,Line3,Line4,Line5,Line6,Salutation,Trans_dt,Grievance_ID,Resolution,Res_Descr,Comments,Description'
         to $ioarea
    print $ioarea (1,1)
    end-if
    NEXT-LISTING
    move &A.Letter_Cd to $Prior_Letter_Cd
  end-if


A.EMPLID
A.TRANS_DT
A.DISCIPLINARY_TYPE
A.DESCR
A.GRIEVANCE_ID
A.DESCRLONG
A.FINAL_RESOLUTION
A.DESCR2
A.RESLTN_COMM

  do Format-DateTime(&A.Trans_dt, $Trans_dt, {DEFMDY},'','')
  let $Type        = &A.DISCIPLINARY_TYPE
  let $TypeDescr   = &A.DESCR
  let $ID          = &A.GRIEVANCE_ID
  let $DescrLong   = &A.DESCRLONG
  let $Resolution  = &A.FINAL_RESOLUTION
  if &A.FINAL_RESOLUTION <> ' '
    let $Final_Resolution = &A.FINAL_RESOLUTION
    do Get-Resolution-Descr
  end-if
  let $Comments    = &A.RESLTN_COMM

PD.NAME_PREFIX
  let $field = rtrim(&PD.Name_Prefix,' ')
  move $field to $Line1
  move $field to $Salutation

PD.NAME
  move &PD.Name to $Name
  do Rotate-Name

  concat ' ' with $Line1
  concat $Name with $Line1

PDE.LANG_CD        &Empl_Language_Cd
  if $prcs_language_option = 'R'
!-- if Language Code not defined for the Recipient level of translation
!-- then use the system default - $Language_Cd
    if rtrim(&Empl_Language_Cd,' ') = ''
       let $curr_language_cd = $Language_Cd
    else
       let $curr_language_cd = &Empl_Language_Cd
    end-if
  end-if

  let $Emplid  = &A.EMPLID
  Do Get-Empl-Address ($Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $ADDRESS3 = $GETADDR_Address3
   let $ADDRESS4 = $GETADDR_Address4
   let $HOUSE_TYPE = $GETADDR_HOUSE_TYPE
   let $ADDR_FIELD1 = $GETADDR_ADDR_FIELD1
   let $ADDR_FIELD2 = $GETADDR_ADDR_FIELD2
   let $ADDR_FIELD3 = $GETADDR_ADDR_FIELD3
   let $NUM1 = $GETADDR_NUM1
   let $NUM2 =$GETADDR_NUM2
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL
   let $COUNTY = $GETADDR_COUNTY
   let $GEO_CODE =$GETADDR_GEO_CODE
   let $IN_CITY_LIMIT =$GETADDR_IN_CITY_LIMIT



  do Format-Address

  move $Address1 to $Line2
  move $Address2 to $Line3
  move $Address3 to $Line4
  move $Address4 to $Line5
  move $Address5 to $Line6

  concat ' ' with $Salutation
  FIND ',' IN &PD.Name 0 #loc
  EXTRACT $LastName from &PD.NAME 0 #loc
  concat $LastName with $Salutation

  !do Build-Action-History

  if $Letter_Cd = 'DAF'
    do Print-Section1
    do Print-Section2
  end-if

  if $Letter_Cd = 'DAR'
    do Print-Section1
    do Print-Section2
  end-if

  if $Letter_Cd = 'GRF'
    do Print-Section1
    do Print-Section3
  end-if

  if $Letter_Cd='GRR'
    do Print-Section1
    do Print-Section3
  end-if

  NEXT-LISTING

FROM PS_R_PER061 A, PS_PERSON_NAME PD, PS_PERS_DATA_EFFDT PDE
WHERE A.EMPLID = PD.EMPLID
and A.EMPLID = PDE.EMPLID
and PDE.EFFDT = (Select max(EFFDT)
              from PS_PERS_DATA_EFFDT
              Where EMPLID = PDE.EMPLID
              and EFFDT <= $AsOfToday)
ORDER BY A.LETTER_CD, A.EMPLID
END-SELECT
end-procedure

begin-procedure Print-Section1

  display 'print1'

  print '"'                (1,1)
  print $curr_language_cd  ()
  print '","'              ()
  print $Current_Date      ()
  print '","'              ()
  print $Line1             ()
  print '","'              ()
  print $Line2             ()
  print '","'              ()
  print $Line3             ()
  print '","'              ()
  print $Line4             ()
  print '","'              ()
  print $Line5             ()
  print '","'              ()
  print $Line6             ()
  print '","'              ()
  print $Salutation        ()
  print '","'              ()
  print $Trans_dt          ()
  print '","'              ()
end-procedure

begin-procedure Print-Section2
  print $Type              ()
  print '","'              ()
  print $TypeDescr         ()
  print '","'              ()
  print $ID                ()
  print '","'              ()
  print $DescrLong         ()
  print '","'              ()
  print $Action            ()
  print '","'              ()
  print $Resolution        ()
  print '","'              ()
  print $ResDescr          ()
  print '","'              ()
  print $Comments          ()
  print '"'                ()
end-procedure


begin-procedure Print-Section3

  display 'print3'

  print $ID                ()
  print '","'              ()
  print $Resolution        ()
  print '","'              ()
  print $ResDescr          ()
  print '","'              ()
  print $Comments          ()
  print '","'              ()
  print $Descrlong         ()
  print '"'                ()
end-procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! This is DUMMY procedure.
! Needed for the reference from getrplng.sqc.
End-Procedure

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'address.sqc'   !Routines to format address
#Include 'getrplng.sqc'  !Get the report language
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getaddr.sqc'   !Routine to retrieve Home Address
#include 'getlogou.sqc'  !get current logoutputdir
!**************************** End Of Report ****************************


