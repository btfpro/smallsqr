!**********************************************
! CBR007: COBRA Audit Report
!**********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/11:17:58:54                           
!             $Release:  HR9                                           
!            $Revision:  101                                           
!                                                                      *
!***********************************************************************


#Include 'setenv.sqc'   !Set Database Environment
#Include 'usarpt.sqc'   !Variables specific to USA

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

!Set report column widths.

#Define col_name                25      !Employee Name
#Define col_emplid              12      !Employee ID
#Define col_benefit_plan         7      !Benefit Plan
#Define col_dep_id               3      !Dependent Beneficiary ID
#Define col_relation             4      !Relationship
#Define col_plan_type            4      !Plan Type
#Define col_EMPL_RCD            4      !Employee Record Number
#Define col_covrg_cd             5      !Coverage Code
#Define col_birthdate           11      !Birthdate
#Define col_mar_sts              3      !Marital Status
#Define col_mar_sts_dt          11      !Marital Status Date
#Define col_dis                  5      !Disabled Inidicator
#Define col_stu                  4      !Student
#Define col_stu_sts_dt          11      !Student Status Date
#Define col_sep                  2      !Column Separator
#Define col_benefit_program      4      !Benefit Program
#Define col_effdt               11      !Effective Date
#Define col_eventid              5      !Event ID
#Define col_head1               17
#Define col_ssn                 10      !Dependent SSN

!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  let $ReportID    = 'CBR007'
  let $ReportTitle = 'COBRA Audit Report'

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if


End-Procedure

Begin-Procedure Ask-Values

  do Get-As-of-Date

End-Procedure

Begin-Procedure Get-Values

  do Select-Parameters
  do Get-As-of-Date

End-Procedure

!***************
Begin-Heading 4
!***************

#Include 'stdhdg03.sqc' !Standard Headings

End-Heading

!****************************
Begin-Procedure Process-Main
!****************************

  do Get-Employees-With-Active-and-COBRA-Covrg
  do Get-Employees-Same-Plan-Active-and-COBRA
  do Get-Employee-And-Spouse-Both-Electing-COBRA-Benefits
  do Get-Employees-With-Over-Age-Dependent-Coverage

End-Procedure

!***********************************************************************
!This procedure captures employees who are currently enrolled in active*
!health coverage and COBRA health coverage regardless of plan type.    *                             *
!***********************************************************************

!********************************************************
Begin-Procedure Get-Employees-With-Active-and-COBRA-Covrg
!********************************************************
display 'Get-Employees-With-Active-and-COBRA-Covrg: '

 let $SubTitle =
    'Employees Enrolled in Active and COBRA Health Coverage'

  print $SubTitle                  (+4,1)
  print ' '                        (+2,1,{col_emplid})
  print 'Event'                    (0,+{col_sep},{col_eventid})
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'ID'                       (0,+{col_sep},{col_eventid})
  print '-'                        (+1,1,19)  Fill

  let #rcds = 0

Begin-Select Distinct
R.EMPLID                           (+1,1,{col_emplid})
R.COBRA_EVENT_ID                   (0,+{col_sep},{col_eventid}) edit 9999

  add 1 to #rcds

FROM  PS_HEALTH_BENEFIT R,
      PS_HEALTH_BENEFIT S

WHERE R.COVERAGE_BEGIN_DT = (SELECT MAX(Z1.COVERAGE_BEGIN_DT)
                             FROM  PS_HEALTH_BENEFIT Z1
                             WHERE Z1.EMPLID             = R.EMPLID
                               AND Z1.COBRA_EVENT_ID     = R.COBRA_EVENT_ID
                               AND Z1.EMPL_RCD          = R.EMPL_RCD
                               AND Z1.PLAN_TYPE          = R.PLAN_TYPE
                               AND Z1.COVERAGE_BEGIN_DT <= $AsofDate)
  AND R.COVERAGE_ELECT <> 'T'
  AND S.COVERAGE_ELECT <> 'T'
  AND R.COBRA_EVENT_ID <> 0
  AND S.EMPLID=R.EMPLID
  AND S.COBRA_EVENT_ID=0
  AND S.EMPL_RCD=R.EMPL_RCD
  AND S.COVERAGE_BEGIN_DT = (SELECT MAX(Z2.COVERAGE_BEGIN_DT)
                             FROM  PS_HEALTH_BENEFIT Z2
                             WHERE Z2.EMPLID             = S.EMPLID
                               AND Z2.COBRA_EVENT_ID     = S.COBRA_EVENT_ID
                               AND Z2.EMPL_RCD          = S.EMPL_RCD
                               AND Z2.PLAN_TYPE          = S.PLAN_TYPE
                               AND Z2.COVERAGE_BEGIN_DT <= $AsofDate)
ORDER BY R.EMPLID
End-Select


  print 'The number of records that met this criteria is '   (+2,1)
  print #rcds                                                () edit 999.

End-Procedure

!***********************************************************************
!This procedure captures employees who are currently enrolled in active*
!health coverage and COBRA health coverage within the same plan type.  *
!***********************************************************************

!********************************************************
Begin-Procedure Get-Employees-Same-Plan-Active-and-COBRA
!********************************************************

display 'Get-Employees-Same-Plan-Active-and-COBRA: '

 let $SubTitle =
    'Employees Enrolled in both Active and COBRA Health Coverage for the Same Plan'

  print $SubTitle                  (+4,1)
  print ' '                        (+2,1,{col_emplid})
  print ' '                        (0,+{col_sep},{col_eventid})
  print '     COBRA'               (0,+{col_sep},{col_head1})
  print '    Active'               (0,+{col_sep},{col_head1})
  print ' '                        (+1,1,{col_emplid})
  print ' '                        (0,+{col_sep},{col_eventid})
  print '-'                        (0,+{col_sep},{col_head1}) fill
  print '-'                        (0,+{col_sep},{col_head1}) fill
  print ' '                        (+1,1,{col_emplid})
  print 'Event'                    (0,+{col_sep},{col_eventid})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Coverage'                 (0,+{col_sep},{col_effdt})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Coverage'                 (0,+{col_sep},{col_effdt})
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'ID'                       (0,+{col_sep},{col_eventid})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Begin Date'               (0,+{col_sep},{col_effdt})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Begin Date'               (0,+{col_sep},{col_effdt})
  print '-'                        (+1,1,57)  Fill

  let #rcds = 0

Begin-Select
T.EMPLID                           (+1,1,{col_emplid})
T.COBRA_EVENT_ID                   (0,+{col_sep},{col_eventid}) edit 9999
T.PLAN_TYPE                        (0,+3,{col_plan_type})
T.COVERAGE_BEGIN_DT
  do Format-Datetime (&T.COVERAGE_BEGIN_DT, $Print_Date, {DEFDATE}, '','')
  print $Print_Date                (0,+{col_sep},{col_effdt})

U.PLAN_TYPE                        (0,+{col_sep},{col_plan_type})
U.COVERAGE_BEGIN_DT
  do Format-Datetime (&U.COVERAGE_BEGIN_DT, $Print_Date, {DEFDATE}, '','')
  print $Print_Date                (0,+{col_sep},{col_effdt})
  add 1 to #rcds

FROM  PS_HEALTH_BENEFIT T,
      PS_HEALTH_BENEFIT U

WHERE T.COVERAGE_BEGIN_DT = (SELECT MAX(Z3.COVERAGE_BEGIN_DT)
                             FROM  PS_HEALTH_BENEFIT Z3
                             WHERE Z3.EMPLID             = T.EMPLID
                               AND Z3.COBRA_EVENT_ID     = T.COBRA_EVENT_ID
                               AND Z3.EMPL_RCD          = T.EMPL_RCD
                               AND Z3.PLAN_TYPE          = T.PLAN_TYPE
                               AND Z3.COVERAGE_BEGIN_DT <= $AsofDate)
  AND T.COVERAGE_ELECT <> 'T'
  AND U.COVERAGE_ELECT <> 'T'
  AND T.COBRA_EVENT_ID <> 0
  AND U.EMPLID=T.EMPLID
  AND U.COBRA_EVENT_ID=0
  AND U.EMPL_RCD=T.EMPL_RCD
  AND T.PLAN_TYPE=U.PLAN_TYPE
  AND U.COVERAGE_BEGIN_DT = (SELECT MAX(Z4.COVERAGE_BEGIN_DT)
                             FROM  PS_HEALTH_BENEFIT Z4
                             WHERE Z4.EMPLID             = U.EMPLID
                               AND Z4.COBRA_EVENT_ID     = U.COBRA_EVENT_ID
                               AND Z4.EMPL_RCD          = U.EMPL_RCD
                               AND Z4.PLAN_TYPE          = U.PLAN_TYPE
                               AND Z4.COVERAGE_BEGIN_DT <= $AsofDate)
ORDER BY T.EMPLID
End-Select


  print 'The number of records that met this criteria is '      (+2,1)
  print #rcds                                           () edit 999.

End-Procedure

!*************************************************************************
! The purpose of this procedure is to identify occurrences of employee   *
! and spouse (or other dependent) both electing (i.e., not Waiving)      *
! COBRA health coverage in the same Plan Type and the dependent is       *
! covered by the employee.                                               *
!                                                                        *
! Note: SSN must be entered for dependent on Personal Data and           *
! corresponding Dependent Benef records.                                 *
!*************************************************************************

!*********************************************************************
Begin-Procedure Get-Employee-And-Spouse-Both-Electing-COBRA-Benefits
!*********************************************************************
  display 'Get-Employee-And-Spouse-Both-Electing-COBRA-Benefits '
  let $SubTitle =
    'Employee and Spouse (or Other Dependent) Both Electing Health Benefits'

  print $SubTitle                  (+4,1)
  print ''                         (+2,1,{col_emplid})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Benefit'                  (0,+{col_sep},{col_benefit_plan})
  print 'Covrg'                    (0,+{col_sep},{col_covrg_cd})
  print 'Dep'                      (0,+{col_sep},{col_dep_id})
  print ' '                        (0,+{col_sep},{col_ssn})
  print ' '                        (0,+{col_sep},{col_emplid})
  print 'Benefit'                  (0,+{col_sep},{col_benefit_plan})
  print 'Covrg'                    (0,+{col_sep},{col_covrg_cd})
  print 'Dep'                      (0,+{col_sep},{col_dep_id})
  print ' '                        (0,+{col_sep},{col_ssn})
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Plan'                     (0,+{col_sep},{col_benefit_plan})
  print 'Code'                     (0,+{col_sep},{col_covrg_cd})
  print 'ID'                       (0,+{col_sep},{col_dep_id})
  print 'SSN'                      (0,+{col_sep},{col_ssn})
  print 'Employee ID'              (0,+{col_sep},{col_emplid})
  print 'Plan'                     (0,+{col_sep},{col_benefit_plan})
  print 'Code'                     (0,+{col_sep},{col_covrg_cd})
  print 'ID'                       (0,+{col_sep},{col_dep_id})
  print 'SSN'                      (0,+{col_sep},{col_ssn})
  print '-'                        (+1,1,100)  Fill

  let #rcds = 0

Begin-Select
K.EMPLID                        (+1,1,{COL_EMPLID})
J.EMPL_RCD
J.BENEFIT_NBR
K.NAME
J.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
J.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
J.COVRG_CD                      (0,+{COL_SEP},{COL_COVRG_CD})
L.DEPENDENT_BENEF               (0,+{COL_SEP},{COL_DEP_ID})
LN.NATIONAL_ID                  (0,+{COL_SEP},{COL_SSN})
M.EMPLID                        (0,+{COL_SEP},{COL_EMPLID})
N.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
N.COVRG_CD                      (0,+{COL_SEP},{COL_COVRG_CD})

  print '00'                    (0,+{COL_SEP},{COL_DEP_ID})
  print &LN.NATIONAL_ID         (0,+{COL_SEP},{COL_SSN})
  add 1 to #rcds
  let $emplid1 = &K.EMPLID
  let $emplid2 = &M.EMPLID
  let $plantype = &J.PLAN_TYPE
  let #emplrcd = &J.EMPL_RCD

  do Get-Matching-Dependents

K.NAME_PSFORMAT

FROM    PS_HEALTH_BENEFIT  J,
        PS_PERSON_NAME     K,
        PS_DEP_BEN L,
        PS_DEP_BENEF_NID   LN,
        PS_PERSON          M,
        PS_PERS_NID        MN,
        PS_HEALTH_BENEFIT  N
WHERE  J.COVERAGE_ELECT = 'E'
  AND  J.COBRA_EVENT_ID <> 0
  AND  J.EFFDT =
       (SELECT MAX(Z5.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z5
        WHERE  Z5.EMPLID          = J.EMPLID
          AND  Z5.COBRA_EVENT_ID = J.COBRA_EVENT_ID
          AND  Z5.EMPL_RCD       = J.EMPL_RCD
          AND  Z5.PLAN_TYPE       = J.PLAN_TYPE
          AND  Z5.EFFDT          <= $AsOfDate)
  AND  (J.COVERAGE_END_DT IS NULL OR J.COVERAGE_END_DT > $AsOfDate)
  AND  K.EMPLID         = J.EMPLID
  AND  L.EMPLID         = J.EMPLID
  AND  LN.EMPLID        = L.EMPLID
  AND  LN.DEPENDENT_BENEF = L.DEPENDENT_BENEF
  AND  LN.COUNTRY       = {NID_COUNTRY}
  AND  MN.EMPLID        = M.EMPLID
  AND  MN.COUNTRY       = {NID_COUNTRY}
  AND  MN.NATIONAL_ID   = LN.NATIONAL_ID
  AND  MN.PRIMARY_NID   = LN.PRIMARY_NID
  AND  MN.NATIONAL_ID   <> ' '
  AND  MN.PRIMARY_NID   = 'Y'
  AND  N.EMPLID         = M.EMPLID
  AND  N.COVERAGE_ELECT = 'E'
  AND  N.COBRA_EVENT_ID <> 0
  AND  N.EFFDT =
       (SELECT MAX(Z6.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z6
        WHERE  Z6.EMPLID          = N.EMPLID
          AND  Z6.EMPL_RCD       = N.EMPL_RCD
          AND  Z6.PLAN_TYPE       = N.PLAN_TYPE
          AND  Z6.COBRA_EVENT_ID  = N.COBRA_EVENT_ID
          AND  Z6.EFFDT          <= $AsOfDate)
  AND  (N.COVERAGE_END_DT IS NULL OR N.COVERAGE_END_DT > $AsOfDate)
  AND  N.PLAN_TYPE      = J.PLAN_TYPE
  AND  EXISTS
       (SELECT 'x'
        FROM   PS_HEALTH_DEPENDNT Z7
        WHERE  Z7.EMPLID          = J.EMPLID
          AND  Z7.COBRA_EVENT_ID  = J.COBRA_EVENT_ID
          AND  Z7.EMPL_RCD       = J.EMPL_RCD
          AND  Z7.PLAN_TYPE       = J.PLAN_TYPE
          AND  Z7.EFFDT          <= $AsOfDate
          AND  Z7.DEPENDENT_BENEF = L.DEPENDENT_BENEF)
ORDER BY K.NAME_PSFORMAT ASC,
         J.PLAN_TYPE ASC
End-Select

  print 'The number of records that met this criteria is '      (+2,1)
  print #rcds                                           () edit 999.

End-Procedure
!**************************************
Begin-Procedure Get-Matching-Dependents
!**************************************

display 'Get-Matching-Dependents '
Begin-Select
X1.DEPENDENT_BENEF               (+1,37,{col_dep_id})
Y1N.NATIONAL_ID                  (0,+{col_sep},{col_ssn})
X2.DEPENDENT_BENEF               (0,84,{col_dep_id})
Y2N.NATIONAL_ID                  (0,+{col_sep},{col_ssn})

  add 1 to #rcds

FROM   PS_HEALTH_DEPENDNT X1,
       PS_DEP_BEN Y1,
       PS_DEP_BENEF_NID Y1N,
       PS_HEALTH_DEPENDNT X2,
       PS_DEP_BEN Y2,
       PS_DEP_BENEF_NID Y2N
WHERE  X1.EMPLID = $emplid1
  AND  X2.EMPLID = $emplid2
  AND  X1.EMPLID = Y1.EMPLID
  AND  X2.EMPLID = Y2.EMPLID
  AND  X1.EMPL_RCD = #emplrcd
  AND  X2.EMPL_RCD = #emplrcd
  AND  X1.DEPENDENT_BENEF=Y1.DEPENDENT_BENEF
  AND  X2.DEPENDENT_BENEF=Y2.DEPENDENT_BENEF
  AND  X1.PLAN_TYPE = $PlanType
  AND  X2.PLAN_TYPE = $PlanType
  AND  X1.EFFDT = (SELECT MAX(Z8.EFFDT)
                  FROM PS_HEALTH_DEPENDNT Z8
                  WHERE Z8.EMPLID=X1.EMPLID
                    AND Z8.EMPL_RCD=X1.EMPL_RCD
                    AND Z8.DEPENDENT_BENEF=X1.DEPENDENT_BENEF
                    AND Z8.EFFDT <= $AsofDate)
  AND  X2.EFFDT = (SELECT MAX(Z9.EFFDT)
                  FROM PS_HEALTH_DEPENDNT Z9
                  WHERE Z9.EMPLID=X2.EMPLID
                    AND Z9.EMPL_RCD=X2.EMPL_RCD
                    AND Z9.DEPENDENT_BENEF=X2.DEPENDENT_BENEF
                    AND Z9.EFFDT <= $AsofDate)
  AND  Y1N.EMPLID      = Y1.EMPLID
  AND  Y1N.DEPENDENT_BENEF = Y1.DEPENDENT_BENEF
  AND  Y1N.COUNTRY     = {NID_COUNTRY}
  AND  Y2N.EMPLID      = Y2.EMPLID
  AND  Y2N.DEPENDENT_BENEF = Y2.DEPENDENT_BENEF
  AND  Y2N.COUNTRY     = {NID_COUNTRY}
  AND  Y1N.NATIONAL_ID = Y2N.NATIONAL_ID
  AND  Y1N.NATIONAL_ID <> ' '
  AND  Y2N.NATIONAL_ID <> ' '
  AND  Y1N.PRIMARY_NID = Y2N.PRIMARY_NID
  AND  Y1N.PRIMARY_NID = 'Y'
End-Select

End-Procedure

!***************************************************************************
! The purpose of this procedure is to identify employees that are actively *
! enrolled in COBRA health benefits with dependent coverage where the      *
! dependent is considered to be overage.  Dependents are considered over   *
! age if the health plan coverage begin date is greater than or equal      *
! to the limit specified at the benefit program level.  These limits are   *
! specified separately for non-students and students.  In addition, a      *
! handicapped parameter defines whether handicapped dependents should be   *
! considiered when determining whether a dependents is overage.  These     *
! limits only apply to dependents with a relationship of son or daughter.  *
!***************************************************************************

!***************************************************************************
Begin-Procedure Get-Employees-With-Over-Age-Dependent-Coverage
!***************************************************************************

display 'Get-Employees-With-Over-Age-Dependent-Coverage '
  let $SubTitle =
    'Employees With Over-Age Dependent Coverage'

  print $SubTitle                  (+4,1)
  print ''                         (+2,1,{col_emplid})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Covrg'                    (0,+{col_sep},{col_covrg_cd})
  print 'Dep'                      (0,+{col_sep},{col_dep_id})
  print 'Rel-'                     (0,+{col_sep},{col_relation})
  print 'Dependent'                (0,+{col_sep},{col_emplid})
  print 'Mar'                      (0,+{col_sep},{col_mar_sts})
  print 'Dis-'                     (0,+{col_sep},{col_dis})
  print 'Stu-'                     (0,+{col_sep},{col_stu})
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Code'                     (0,+{col_sep},{col_covrg_cd})
  print 'ID'                       (0,+{col_sep},{col_dep_id})
  print 'Ship'                     (0,+{col_sep},{col_relation})
  print 'Birthdate'                (0,+{col_sep},{col_emplid})
  print 'Sts'                      (0,+{col_sep},{col_mar_sts})
  print 'abled'                    (0,+{col_sep},{col_dis})
  print 'dent'                     (0,+{col_sep},{col_stu})
  print '-'                        (+1,1,94)  Fill

  let #rcds = 0
  

Begin-Select
P.NAME
P.EMPLID
O.PLAN_TYPE
O.COVRG_CD
O.COVERAGE_BEGIN_DT
Q.DEPENDENT_BENEF
QE.RELATIONSHIP
Q.BIRTHDATE
QE.STUDENT
QE.DISABLED
QE.MAR_STATUS
Z.DEP_AGE_LIMIT
Z.STUDENT_AGE_LIMIT
Z.EXCL_DISABLED_AGE

  do Convert-To-DTU-Date(&Q.Birthdate,$CvtBDay)
  do Convert-To-DTU-Date(&O.Coverage_Begin_Dt,$CvtToday)
  do Dtu-Diff-Years($CvtBDay,$CvtToday,#Age_Yrs)

  
  if &Z.Excl_Disabled_Age = 'Y' and &QE.Disabled = 'Y'
  else
     if &QE.Student = 'N'
        if #Age_Yrs > &Z.Dep_Age_Limit
           print &P.Emplid                 (+1,1,{col_emplid})
           print &O.Plan_Type              (0,+{col_sep},{col_plan_type})
           print &O.Covrg_Cd               (0,+{col_sep},{col_covrg_cd})
           print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})
           print &QE.Relationship           (0,+{col_sep},{col_relation})

           do Format-Datetime (&Q.Birthdate, $Print_Date, {DEFDATE}, '','')
           print $Print_Date               (0,+{col_sep},{col_birthdate})

           print &QE.Mar_Status             (0,+3,{col_mar_sts})

           print &QE.Disabled               (0,+{col_sep},{col_dis})
           print &QE.Student                (0,+{col_sep},{col_stu})

           add 1 to #rcds
           
        end-if
     end-if

     if &QE.Student = 'Y'
        if #Age_Yrs > &Z.Student_Age_Limit
           print &P.Emplid                 (+1,1,{col_emplid})
           print &O.Plan_Type              (0,+{col_sep},{col_plan_type})
           print &O.Covrg_Cd               (0,+{col_sep},{col_covrg_cd})
           print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})
           print &QE.Relationship           (0,+{col_sep},{col_relation})

           do Format-Datetime (&Q.Birthdate, $Print_Date, {DEFDATE}, '','')
           print $Print_Date               (0,+{col_sep},{col_birthdate})

           print &QE.Mar_Status             (0,+3,{col_mar_sts})



           print &QE.Disabled               (0,+{col_sep},{col_dis})
           print &QE.Student                (0,+{col_sep},{col_stu})


           add 1 to #rcds
           
        end-if
     end-if
   end-if

P.NAME_PSFORMAT

From PS_HEALTH_BENEFIT  O,
     PS_PERSON_NAME     P,
     PS_DEP_BEN Q,
     PS_DEP_BEN_EFF QE,
     PS_BEN_PROG_PARTIC Y,
     PS_BEN_DEFN_PGM    Z

Where  O.COVERAGE_ELECT = 'E'
  AND  O.COBRA_EVENT_ID <> 0
  AND  O.EFFDT =
       (SELECT MAX(Z10.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z10
        WHERE  Z10.EMPLID          = O.EMPLID
          AND  Z10.COBRA_EVENT_ID  = O.COBRA_EVENT_ID
          AND  Z10.EMPL_RCD       = O.EMPL_RCD
          AND  Z10.PLAN_TYPE       = O.PLAN_TYPE
          AND  Z10.EFFDT          <= $AsOfToday)
  AND  (O.COVERAGE_END_DT IS NULL OR O.COVERAGE_END_DT > $AsOfToday)
  AND  P.EMPLID         = O.EMPLID
  AND  Q.EMPLID         = O.EMPLID
  AND  Y.EMPLID         = O.EMPLID
  AND  Y.COBRA_EVENT_ID = O.COBRA_EVENT_ID
  AND  Y.EMPL_RCD      = O.EMPL_RCD
  AND  Y.EFFDT =
       (SELECT MAX(Z11.EFFDT)
        FROM   PS_BEN_PROG_PARTIC Z11
        WHERE  Z11.EMPLID          = Y.EMPLID
          AND  Z11.COBRA_EVENT_ID = Y.COBRA_EVENT_ID
          AND  Z11.EMPL_RCD       = Y.EMPL_RCD
          AND  Z11.EFFDT   <= $AsOfToday)
  AND  Z.BENEFIT_PROGRAM = Y.BENEFIT_PROGRAM
  AND  Z.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_BEN_DEFN_PGM
        WHERE  BENEFIT_PROGRAM = Z.BENEFIT_PROGRAM
         AND  EFFDT <= $AsOfToday)
  AND QE.EMPLID = Q.EMPLID
  AND QE.DEPENDENT_BENEF = Q.DEPENDENT_BENEF
  AND QE.EFFDT = (SELECT MAX(QE1.EFFDT)
                  FROM PS_DEP_BEN_EFF QE1
                  WHERE QE1.EMPLID = QE.EMPLID
                  AND QE1.DEPENDENT_BENEF = QE.DEPENDENT_BENEF
                  AND QE.EFFDT <= $AsOfToday)
  AND  QE.RELATIONSHIP  <> 'SP'
  AND  Q.BIRTHDATE IS NOT NULL
  AND  EXISTS
       (SELECT 'x'
        FROM   PS_HEALTH_DEPENDNT Z12
        WHERE  Z12.EMPLID          = O.EMPLID
          AND  Z12.COBRA_EVENT_ID  = O.COBRA_EVENT_ID
          AND  Z12.EMPL_RCD       = O.EMPL_RCD
          AND  Z12.PLAN_TYPE       = O.PLAN_TYPE
          AND  Z12.EFFDT          <= $AsOfToday
          AND  Z12.DEPENDENT_BENEF = Q.DEPENDENT_BENEF)

ORDER BY P.NAME_PSFORMAT ASC,
         O.PLAN_TYPE ASC

End-Select

  print 'The number of records that met this criteria is ' (+2,1)
  print #rcds   () edit 999.

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************
display 'Display-Time '
  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime
#Include 'datemath.sqc'  !Convert to DTU procedure
#Include 'askaod.sqc'
#Include 'cbrncntl.sqc'
#Include 'cbgetval.sqc'
#Include 'cbaskval.sqc'

#Include 'stdapi.sqc'    !Update Process API

!******************************* End of Report *******************************
