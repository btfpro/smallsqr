!********************************************************
!  PER510:  Create Row Level Security for Dept Managers *
!********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:08:32                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!Procedures ending with "Scrty" and Record alias ending with "SC" are  *
!using SQR Security.                                                   *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
Begin-Setup
  #Include 'ptset02.sqc'   !Printer and page-size initialization
End-Setup

#define DEPT_TBL
#include "rellang.sqc"

!**********************************************
! Report                                      *
!**********************************************
begin-report

   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report

   if $prcs_oprid=''
      goto last2
   end-if
 
   do Process-Main
 
   do Reset
   do Stdapi-Term
last2:

end-report


!**********************************************
! Heading                                     *
!**********************************************
begin-heading 5

   do Get_Field_Information ('PER510', 'REPORT_TITLE', $REPORTTITLE, #DW)

   !************************
   ! Print Standard Header *
   !************************
   #Include 'stdhdgtr.sqc'

   !*******************
   ! Print As-Of-Date *
   !*******************
   do Append_Report_Translation ('STDHDGHR')
   if $Program_Read = 'Y'
      do Get_Field_Information ('STDHDGHR', 'ASOFDATE', $DATE, #DW)
   end-if
   print $DATE    (3,1)
   do Format-DateTime($AsOfDate, $out, {DEFDATE}, '', '')
   print $out (,+1)

   !*********************
   ! Print Header Title *
   !*********************
   print $HEADER_TITLE   (5,1)

end-heading


!**********************************************
! Init-Report                                 *
!**********************************************
begin-procedure Init-Report

   move 'PER510' to $ReportID
   move 'W' to $ReportMsgType  !Warning

   do Stdapi-Init

   if $prcs_oprid=''
      display ''
      display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
      display ''
      goto last1
   end-if

   if $prcs_process_instance = ''
      do Ask-As-Of-Date
   else
      do Select-Parameters
   end-if

   do Init_Printer
   do Init_Report_Translation ($ReportID, $language_cd)
last1:
end-procedure


!**********************************************
! Get-Values                                  *
!**********************************************
begin-procedure Get-Values

   let $language_cd = $prcs_language_cd

   let $AsOfDate = &RUN_CNTL_HR.ASOFDATE

   if $AsOfDate = ''
      move $AsOfToday to $AsOfDate
   end-if

end-procedure


!**********************************************
! Process-Main                                *
!**********************************************
begin-procedure Process-Main

   !**********************************************
   ! Get Field Label/Value Strings, needed later *
   !**********************************************
   do Get_Field_Information ('PER510', 'ACC_TYPE', $ACC_TYPE_LBL, #DW)
   do Get_Field_Information ('PER510', 'COMPLETED', $COMPLETED_LBL, #DW)
   do Get_Field_Information ('PER510', 'DEL_ROW_SEC_PERML', $DEL_ROW_SEC_PERML_LBL, #DW)
   do Get_Field_Information ('PER510', 'DEPTID', $DEPTID_LBL, #DW)
   do Get_Field_Information ('PER510', 'DESCR', $DESCR_LBL, #DW)
   do Get_Field_Information ('PER510', 'EMPLID', $EMPLID_LBL, #DW)
   do Get_Field_Information ('PER510', 'NAME', $NAME_LBL, #DW)
   do Get_Field_Information ('PER510', 'NEW_ROW_SEC', $NEW_ROW_SEC_LBL, #DW)
   do Get_Field_Information ('PER510', 'NEW_ROW_SEC_PERML', $NEW_ROW_SEC_PERML_LBL, #DW)
   do Get_Field_Information ('PER510', 'NEW_USER_PROF', $NEW_USER_PROF_LBL, #DW)
   do Get_Field_Information ('PER510', 'NONE', $NONE_LBL, #DW)
   do Get_Field_Information ('PER510', 'OLD_ROW_SEC', $OLD_ROW_SEC_LBL, #DW)
   do Get_Field_Information ('PER510', 'OPRID', $OPRID_LBL, #DW)
   do Get_Field_Information ('PER510', 'PENDING', $PENDING_LBL, #DW)
   do Get_Field_Information ('PER510', 'PERM_LIST', $PERM_LIST_LBL, #DW)
   do Get_Field_Information ('PER510', 'REM_PERM_LIST', $REM_PERM_LIST_LBL, #DW)
   do Get_Field_Information ('PER510', 'REPL_PERM_LIST', $REPL_PERM_LIST_LBL, #DW)
   do Get_Field_Information ('PER510', 'ROW_LVL_ACC', $ROW_LVL_ACC_LBL, #DW)
   do Get_Field_Information ('PER510', 'ROW_SEC', $ROW_SEC_LBL, #DW)
   do Get_Field_Information ('PER510', 'ROW_SEC_PERM_LIST', $ROW_SEC_PERM_LIST_LBL, #DW)
   do Get_Field_Information ('PER510', 'SETID', $SETID_LBL, #DW)
   do Get_Field_Information ('PER510', 'STATUS', $STATUS_LBL, #DW)
   do Get_Field_Information ('PER510', 'TOTAL_COUNT', $TOTAL_COUNT_LBL, #DW)
   do Get_Field_Information ('PER510', 'UPD_ROW_SEC_PERML', $UPD_ROW_SEC_PERML_LBL, #DW)
   do Get_Field_Information ('PER510', 'USER_PROF', $USER_PROF_LBL, #DW)

   !**************************************
   ! Print Row Security Permission Lists *
   !**************************************
   let $HEADER_TITLE = $ROW_SEC_PERM_LIST_LBL
   do Print-Perm-List-New
   do Print-Perm-List-Update
   do Print-Perm-List-Delete

   new-page

   !**********************
   ! Print User Profiles *
   !**********************
   let $HEADER_TITLE = $USER_PROF_LBL
   do Print-User-Profile-New
   do Print-User-Profile-Replace
   do Print-User-Profile-Remove

end-procedure


!***********************************************
! Procedure Print-Perm-List-New                *
! Prints the new row security permission lists *
!***********************************************
begin-procedure Print-Perm-List-New

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $NEW_ROW_SEC_PERML_LBL              ( +2,    1)
do Print-Perm-List-Heading

!**************************************
! Print row security permission lists *
!**************************************
begin-SELECT
NEW_PL.ROWSECCLASS                        (  +1,   1)
NEW_PL.STATUS_FLAG

   if &NEW_PL.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 117)
   end-if
   if &NEW_PL.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 117)
   end-if

   do Print-Perm-List-New-Access
   add 1 to #count

FROM PS_HR_PER510_PERML NEW_PL
WHERE NEW_PL.OPRID = &RUN_CNTL_HR.OPRID
  AND NEW_PL.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND NEW_PL.ACTION_FLAG = 'N'
end-SELECT

!*************************
! Print the total number *
!*************************
Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'
Print '_'                                 (  +2,   1, 150) FILL

end-procedure


!********************************************
! Procedure Print-Perm-List-New-Access      *
! Prints the row-level access of the        *
! new row security permission lists         *
!********************************************
begin-procedure Print-Perm-List-New-Access

!****************************
! Print row security access *
!****************************
begin-SELECT
NEW_SCRTY.SETID                           (   0,  34)
NEW_SCRTY.DEPTID                          (   0,  42)

   do Print-Dept-Descr(&NEW_SCRTY.SETID, $AsOfDate, &NEW_SCRTY.DEPTID)

NEW_SCRTY.ACCESS_CD

   ! *****************************
   ! Print Access-Code Xlatvalue *
   ! *****************************
   move 'ACCESS_CD'  to $FieldName
   move &NEW_SCRTY.ACCESS_CD to $FieldValue
   do Read-Translate-Table
   print $XlatLongName                    (   0,  86,  30)
   print ''                               (  +1,   0)

FROM PS_HR_PER510_SCRTY NEW_SCRTY
WHERE NEW_SCRTY.OPRID = &RUN_CNTL_HR.OPRID
  AND NEW_SCRTY.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND NEW_SCRTY.ROWSECCLASS = &NEW_PL.ROWSECCLASS
end-SELECT

end-procedure


!********************************************
! Procedure Print-Perm-List-Update
!********************************************
begin-procedure Print-Perm-List-Update

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $UPD_ROW_SEC_PERML_LBL              ( +2,    1)
do Print-Perm-List-Heading

!**************************************
! Print row security permission lists *
!**************************************
begin-SELECT
UPD_PL.ROWSECCLASS                        (  +1,   1)
UPD_PL.STATUS_FLAG

   if &UPD_PL.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 117)
   end-if
   if &UPD_PL.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 117)
   end-if

   do Print-Perm-List-Upd-Access
   add 1 to #count

FROM PS_HR_PER510_PERML UPD_PL
WHERE UPD_PL.OPRID = &RUN_CNTL_HR.OPRID
  AND UPD_PL.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND UPD_PL.ACTION_FLAG = 'U'
end-SELECT

!*************************
! Print the total number *
!*************************
Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'
Print '_'                                 (  +2,   1, 150) FILL

end-procedure


!********************************************
! Procedure Print-Perm-List-Upd-Access
!********************************************
begin-procedure Print-Perm-List-Upd-Access

!****************************
! Print row security access *
!****************************
begin-SELECT
UPD_SCRTY.SETID                           (   0,  34)
UPD_SCRTY.DEPTID                          (   0,  42)

   do Print-Dept-Descr(&UPD_SCRTY.SETID, $AsOfDate, &UPD_SCRTY.DEPTID)

UPD_SCRTY.ACCESS_CD

   ! *****************************
   ! Print Access-Code Xlatvalue *
   ! *****************************
   move 'ACCESS_CD'  to $FieldName
   move &UPD_SCRTY.ACCESS_CD to $FieldValue
   do Read-Translate-Table
   print $XlatLongName                    (   0,  86,  30)
   print ''                               (  +1,   0)

FROM PS_HR_PER510_SCRTY UPD_SCRTY
WHERE UPD_SCRTY.OPRID = &RUN_CNTL_HR.OPRID
  AND UPD_SCRTY.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND UPD_SCRTY.ROWSECCLASS = &UPD_PL.ROWSECCLASS
end-SELECT

end-procedure


!********************************************
! Procedure Print-Perm-List-Delete          *
! Print the deleted row security            *
! permission lists                          *
!********************************************
begin-procedure Print-Perm-List-Delete

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $DEL_ROW_SEC_PERML_LBL              ( +2,    1)
do Print-Perm-List-Heading

!**************************************
! Print row security permission lists *
!**************************************
begin-SELECT
DEL_PL.ROWSECCLASS                        (  +1,   1)
DEL_PL.STATUS_FLAG

   if &DEL_PL.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 117)
   end-if
   if &DEL_PL.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 117)
   end-if

   do Print-Perm-List-Del-Access
   add 1 to #count

FROM PS_HR_PER510_PERML DEL_PL
WHERE DEL_PL.OPRID = &RUN_CNTL_HR.OPRID
  AND DEL_PL.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND DEL_PL.ACTION_FLAG = 'D'
end-SELECT

!*************************
! Print the total number *
!*************************
Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'

end-procedure


!********************************************
! Procedure Print-Perm-List-Del-Access      *
! Print the row level access of the         *
! deleted row security permission list      *
!********************************************
begin-procedure Print-Perm-List-Del-Access

!****************************
! Print row security access *
!****************************
begin-SELECT
DEL_SCRTY.SETID                           (   0,  34)
DEL_SCRTY.DEPTID                          (   0,  42)

   do Print-Dept-Descr(&DEL_SCRTY.SETID, $AsOfDate, &DEL_SCRTY.DEPTID)

DEL_SCRTY.ACCESS_CD

   ! *****************************
   ! Print Access-Code Xlatvalue *
   ! *****************************
   move 'ACCESS_CD'  to $FieldName
   move &DEL_SCRTY.ACCESS_CD to $FieldValue
   do Read-Translate-Table
   print $XlatLongName                    (   0,  86,  30)
   print ''                               (  +1,   0)

FROM PS_SCRTY_TBL_DEPT DEL_SCRTY
WHERE DEL_SCRTY.ROWSECCLASS = &DEL_PL.ROWSECCLASS
end-SELECT

end-procedure


!********************************************
! Procedure Print-Perm-List-Heading
!********************************************
begin-procedure Print-Perm-List-Heading

Print $ROW_SEC_LBL                        (  +2,   1)
Print $ROW_LVL_ACC_LBL                    (   0,  34)
Print $STATUS_LBL                         (   0, 117)

Print $PERM_LIST_LBL                      (  +1,   1)
Print $SETID_LBL                          (   0,  34)
Print $DEPTID_LBL                         (   0,  42)
Print $DESCR_LBL                          (   0,  52)
Print $ACC_TYPE_LBL                       (   0,  86)
Print ''                                  (  +1,   0)

end-procedure


!********************************************
! Procedure Print-Dept-Descr                *
! Print the Department Description          *
!********************************************
begin-procedure Print-Dept-Descr($SETID,$AsOfDate,$DEPTID)

let $DEPT_TBL-DESCR = ''

begin-SELECT
D.SETID
D.DEPTID
D.DESCR

  let $DEPT_TBL-DESCR = &D.DESCR
  do Get_Related_DEPT_TBL($DEPTID, $AsOfDate, $SETID)
  print $DEPT_TBL-DESCR                   (   0,  52,  30)

FROM PS_DEPT_TBL D
WHERE D.SETID = $SETID
  AND D.DEPTID = $DEPTID
  AND D.EFF_STATUS = 'A'
  AND D.EFFDT = (SELECT MAX(D1.EFFDT)
                   FROM PS_DEPT_TBL D1
                  WHERE D1.SETID = $SETID
                    AND D1.DEPTID = $DEPTID
                    AND D1.EFFDT <= $AsOfDate)
end-SELECT

end-procedure


!********************************************
! Procedure Print-User-Profile-New          *
! Print the new user profiles               *
!********************************************
begin-procedure Print-User-Profile-New

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $NEW_USER_PROF_LBL                  ( +2,    1)
do Print-User-Profile-Heading

!**********************
! Print user profiles *
!**********************
begin-SELECT
NEW_UP.USER_OPRID                         (  +1,   1)
NEW_UP.EMPLID                             (   0,  32)
NEW_UP.STATUS_FLAG

   do Print-Empl-Name(&NEW_UP.EMPLID)
   Print $NONE_LBL                        (   0,  82)

   if &NEW_UP.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 144)
   end-if
   if &NEW_UP.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 144)
   end-if

   add 1 to #count

NEW_UP.ROWSECCLASS_NEW                    (   0, 113)
FROM PS_HR_PER510_USERP NEW_UP
WHERE NEW_UP.OPRID = &RUN_CNTL_HR.OPRID
  AND NEW_UP.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND NEW_UP.ACTION_FLAG = 'N'
end-SELECT

!*************************
! Print the total number *
!*************************
Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'
Print '_'                                 (  +2,   1, 150) FILL

end-procedure


!********************************************
! Procedure Print-User-Profile-Replace      *
! Print the user profiles with replaced     *
! row security permission lists             *
!********************************************
begin-procedure Print-User-Profile-Replace

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $REPL_PERM_LIST_LBL                 ( +2,    1)
do Print-User-Profile-Heading

!**********************
! Print user profiles *
!**********************
begin-SELECT
REPL_UP.USER_OPRID                        (  +1,   1)
REPL_UP.EMPLID                            (   0,  32)
REPL_UP.STATUS_FLAG

   do Print-Empl-Name(&REPL_UP.EMPLID)

   if &REPL_UP.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 144)
   end-if
   if &REPL_UP.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 144)
   end-if

   add 1 to #count

REPL_UP.ROWSECCLASS_OLD                   (   0,  82)
REPL_UP.ROWSECCLASS_NEW                   (   0, 113)
FROM PS_HR_PER510_USERP REPL_UP
WHERE REPL_UP.OPRID = &RUN_CNTL_HR.OPRID
  AND REPL_UP.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND REPL_UP.ACTION_FLAG = 'R'
end-SELECT

Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'
print '_'                                 (  +2,   1, 150) FILL

end-procedure


!********************************************
! Procedure Print-User-Profile-Remove       *
! Print the user profiles with removed      *
! row security permission lists             *
!********************************************
begin-procedure Print-User-Profile-Remove

!********************
! Reset the counter *
!********************
let #count = 0

!**********************
! Print column header *
!**********************
Print $REM_PERM_LIST_LBL                  ( +2,    1)
do Print-User-Profile-Heading

!**********************
! Print user profiles *
!**********************
begin-SELECT
REM_UP.USER_OPRID                         (  +1,   1)
REM_UP.EMPLID                             (   0,  32)
REM_UP.ROWSECCLASS_OLD                    (   0,  82)
REM_UP.STATUS_FLAG

   do Print-Empl-Name(&REM_UP.EMPLID)
   Print $NONE_LBL                        (   0, 113)

   if &REM_UP.STATUS_FLAG = 'P'
      Print $PENDING_LBL                  (   0, 144)
   end-if
   if &REM_UP.STATUS_FLAG = 'C'
      Print $COMPLETED_LBL                (   0, 144)
   end-if

   add 1 to #count

FROM PS_HR_PER510_USERP REM_UP
WHERE REM_UP.OPRID = &RUN_CNTL_HR.OPRID
  AND REM_UP.RUN_CNTL_ID = &RUN_CNTL_HR.RUN_CNTL_ID
  AND REM_UP.ACTION_FLAG = 'D'
end-SELECT

!*************************
! Print the total number *
!*************************
Print $TOTAL_COUNT_LBL                    (  +2,   1)
Print #count                              (   0,  +2) edit '999,999,999'

end-procedure


!**************************************************
! Procedure Print-User-Profile-Heading            *
! Prints the column headers for the user profiles *
!**************************************************
begin-procedure Print-User-Profile-Heading

Print $OPRID_LBL                          (  +2,   1)
Print $EMPLID_LBL                         (   0,  32)
Print $NAME_LBL                           (   0,  45)
Print $OLD_ROW_SEC_LBL                    (   0,  82)
Print $NEW_ROW_SEC_LBL                    (   0, 113)
Print $STATUS_LBL                         (   0, 144)
Print $PERM_LIST_LBL                      (  +1,  82)
Print $PERM_LIST_LBL                      (   0, 113)
Print ''                                  (  +1,   0)

end-procedure


!********************************************
! Procedure Print-Empl-Name                 *
! Prints the employee's name                *
!********************************************
begin-procedure Print-Empl-Name($EMPLID)

begin-SELECT
!***********BEGIN *****************
 !PN.NAME                                   (   0,  45,  35)
PN.NAME_DISPLAY                             (   0,  45,  35)
FROM PS_PERSON_NAME PN
WHERE PN.EMPLID = $EMPLID
end-SELECT

end-procedure


#Include 'hrrnctl1.sqc'  !Get run control parameter values
#Include 'hrgetval.sqc'  !Get values mask routines
#Include 'askaod.sqc'    !Ask As Of Date input

#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to update run status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'


