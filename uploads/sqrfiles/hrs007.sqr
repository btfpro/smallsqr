!****************************************
!  HRS007:  Salary Package Model Report *
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/05/08:05:11:32                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689716                                              !
!                                                                      *
!***********************************************************************

begin-setup

#include 'setenv.sqc'    !Set environment
#Include 'ptset02.sqc'   !Printer and page-size initialization

end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-heading 6
  #Include 'stdhdg01.sqc'
  !print 'From Date: '  (+1,1)
   Let $FROM_DATE_TMP = $FROM_DATE ||  ' '

  print $FROM_DATE_TMP  (+1,1)
  print $FromDate      (0,0)
    Let $TO_DATE_TMP = $TO_DATE  ||  '   '
      print $TO_DATE_TMP       (+1,1)
  !print 'To Date:   '  (+1,1)

  print $ThruDate      (0,0)
end-heading


begin-procedure Init-Report
!**************************

  move 'HRS007' to $ReportID
  move 'Salary Package Models' to $ReportTitle
  display $ReportTitle
  do Stdapi-Init

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if

  do Format-DateTime($RC.From_Dt,$FromDate,{DEFDMY},'','')
  do Format-DateTime($RC.Thru_Dt,$ThruDate,{DEFDMY},'','')

    do Get-Language-Codes   ! get the current language in which user wants to print the report
  do Init_Report_Translation ($ReportID, $curr_language_cd) ! from settrans.sqc
  do Append_Report_Translation ('HRS007')       ! from settrans.sqc

   do Get_Field_Information ('HRS007', 'FROM_DATE', $FROM_DATE, #DW)
   do Get_Field_Information ('HRS007', 'TO_DATE', $TO_DATE, #DW)
   do Get_Field_Information ('HRS007', 'NAMES', $NAMES, #DW)
   do Get_Field_Information ('HRS007', 'ID', $ID, #DW)
   do Get_Field_Information ('HRS007', 'PACKAGE_ST_DATE', $PACKAGE_ST_DATE, #DW)
   do Get_Field_Information ('HRS007', 'EFFECTIVE_DATE', $EFFECTIVE_DATE, #DW)
   do Get_Field_Information ('HRS007', 'PACKAGE_END_DATE', $PACKAGE_END_DATE, #DW)
   do Get_Field_Information ('HRS007', 'MODEL_NO', $MODEL_NO, #DW)
   do Get_Field_Information ('HRS007', 'PACKAGE_STATUS', $PACKAGE_STATUS, #DW)
   do Get_Field_Information ('HRS007', 'CONFIRMED', $CONFIRMED, #DW)
   do Get_Field_Information ('HRS007', 'TAX_SCALE', $TAX_SCALE, #DW)
   do Get_Field_Information ('HRS007', 'PAYROLL_TAX_STATE', $PAYROLL_TAX_STATE, #DW)
   do Get_Field_Information ('HRS007', 'ANNUAL', $ANNUAL, #DW)
   do Get_Field_Information ('HRS007', 'PACKAGE_PERIOD', $PACKAGE_PERIOD, #DW)
   do Get_Field_Information ('HRS007', 'TOTAL_PACK_VAL', $TOTAL_PACK_VAL, #DW)
   do Get_Field_Information ('HRS007', 'TOTAL_EMP_COST', $TOTAL_EMP_COST, #DW)
   do Get_Field_Information ('HRS007', 'TARGET_TEC', $TARGET_TEC, #DW)
   do Get_Field_Information ('HRS007', 'CAR_FORW_TEC', $CAR_FORW_TEC, #DW)
   do Get_Field_Information ('HRS007', 'TARGET_TPV', $TARGET_TPV, #DW)
   do Get_Field_Information ('HRS007', 'PAY_FREQ', $PAY_FREQ, #DW)
   do Get_Field_Information ('HRS007', 'GROS_SAL', $GROS_SAL, #DW)
   do Get_Field_Information ('HRS007', 'TAX', $TAX, #DW)
   do Get_Field_Information ('HRS007', 'NET_SAL', $NET_SAL, #DW)
   do Get_Field_Information ('HRS007', 'YEARLY', $YEARLY, #DW)
   do Get_Field_Information ('HRS007', 'COMP_PERIOD', $COMP_PERIOD, #DW)
   do Get_Field_Information ('HRS007', 'ANNUAL_AMT', $ANNUAL_AMT, #DW)
   do Get_Field_Information ('HRS007', 'PACK_PERIO_AMOUNT', $PACK_PERIO_AMOUNT, #DW)
   do Get_Field_Information ('HRS007', 'COMPONENT_ADD', $COMPONENT_ADD, #DW)
   do Get_Field_Information ('HRS007', 'FROM', $FROM, #DW)
   do Get_Field_Information ('HRS007', 'TO', $TO, #DW)
   do Get_Field_Information ('HRS007', 'TPV', $TPV, #DW)
   do Get_Field_Information ('HRS007', 'TEC', $TEC, #DW)
   do Get_Field_Information ('HRS007', 'END_OF_REP', $END_OF_REP, #DW)



end-procedure


begin-procedure Process-Main
!***************************

begin-SELECT
PMT.EMPLID
  !print 'Name:'                        (+1,  1)
  print $NAMES                         (+1,  1)

  do Get_Name
  print $Name                          ( 0, 20)
  !print 'ID:'                         ( 0, 61)
  print $ID                            ( 0, 61)
  print &PMT.EMPLID                    ( 0, 80)
  print '/'                            ( 0, 91)
PMT.EMPL_RCD                           ( 0, 92) edit '999'
  !print 'Package Start Date:'          (+2,  1)
  print $PACKAGE_ST_DATE              (+2,  1)
PMT.PKG_START_DT
  do Format-DateTime(&PMT.Pkg_Start_Dt,$Pkg_Start,{DEFDMY},'','')
  print $Pkg_Start                     ( 0, 20)
  !print 'Effective Date:'             ( 0, 61)
  print $EFFECTIVE_DATE                ( 0, 61)
PMT.EFFDT
  do Format-DateTime(&PMT.EffDt,$Pkg_EffDt,{DEFDMY},'','')
  print $Pkg_EffDt                     ( 0, 80)
  !print 'Package End Date:'            (+1,  1)
  print $PACKAGE_END_DATE            (+1,  1)
PMT.PKG_END_DT
  do Format-DateTime(&PMT.Pkg_End_Dt,$Pkg_End,{DEFDMY},'','')
  print $Pkg_End                       ( 0, 20)
  !print 'Model No.:'                   ( 0, 61)
  print $MODEL_NO                   ( 0, 61)
PMT.EFFSEQ                             ( 0, 80)
 ! print 'Package Status:'              (+2,  1)
  print $PACKAGE_STATUS             (+2,  1)
PMT.PKG_STATUS
  evaluate &PMT.Pkg_Status
    when = 'P'
      let $Pkg_Status = 'Proposed'
      break
    when = 'C'
      let $Pkg_Status = 'Current'
      break
    when = 'H'
      let $Pkg_Status = 'History'
      break
  end-evaluate
  print $Pkg_Status                    ( 0, 20)
  !print 'Confirmed:'                   ( 0, 61)
  print $CONFIRMED                  ( 0, 61)
PMT.PKG_CONFIRMED
  if &PMT.Pkg_Confirmed = 'Y'
    let $Pkg_Confirmed = 'Yes'
  else
    let $Pkg_Confirmed = 'No'
  end-if
  print $Pkg_Confirmed                 ( 0, 80)
  !print 'Tax Scale:'                   (+1,  1)
  print $TAX_SCALE                   (+1,  1)
PMT.TAX_SCALE                          ( 0, 20)
  !print 'Payroll Tax State:'           ( 0, 61)
  print $PAYROLL_TAX_STATE           ( 0, 61)
PMT.PAYROLL_STATE_AUS                  ( 0, 80)
  !print 'Annual'                       (+2, 37)
  print $ANNUAL                     (+2, 37)
  !print 'Package Period'               ( 0, 69)
  print $PACKAGE_PERIOD               ( 0, 69)
  print '---------'                    (+1, 35)
  print '--------------'               ( 0, 69)
  !print 'Total Package Value (TPV):'   (+1,  1)
  print $TOTAL_PACK_VAL                 (+1,  1)
PMT.TPV_CURRENT                        ( 0, 32) edit '$99999999.99'
PMT.TPV_PER_CURRENT                    ( 0, 70) edit '$99999999.99'
  !print 'Total Employment Cost (TEC):' (+1,  1)
  print $TOTAL_EMP_COST                  (+1,  1)
PMT.TEC_CURRENT                        ( 0, 32) edit '$99999999.99'
PMT.TEC_PER_CURRENT                    ( 0, 70) edit '$99999999.99'
PMT.PKG_METHOD
PMT.TEC_TARGET
PMT.TEC_PER_TARGET
PMT.TPV_TARGET
PMT.TPV_PER_TARGET
PMT.CF_TEC_TARGET
PMT.CF_TEC_PER_TARGET
PMT.CF_TPV_TARGET
PMT.CF_TPV_PER_TARGET
  if &PMT.PKG_METHOD = 'T'
    !print 'Target TEC:'                (+1,  1)
    print $TARGET_TEC                      (+1,  1)
    print &PMT.TEC_TARGET              ( 0, 32) edit '$99999999.99'
    print &PMT.TEC_PER_TARGET          ( 0, 70) edit '$99999999.99'
    !print 'Carried Forward TEC:'      (+1,  1)
    print $CAR_FORW_TEC                (+1,  1)
    print &PMT.CF_TEC_TARGET           ( 0, 32) edit '$99999999.99'
    print &PMT.CF_TEC_PER_TARGET       ( 0, 70) edit '$99999999.99'
  else
    if &PMT.PKG_METHOD = 'M'
      !print 'Target TPV:'              (+1,  1)
      print $TARGET_TPV                  (+1,  1)
      print &PMT.TPV_TARGET            ( 0, 32) edit '$99999999.99'
      print &PMT.TPV_PER_TARGET        ( 0, 70) edit '$99999999.99'
      !print 'Carried Forward TEC:'     (+1,  1)
      print $CAR_FORW_TEC            (+1,  1)
      print &PMT.CF_TEC_TARGET         ( 0, 32) edit '$99999999.99'
      print &PMT.CF_TEC_PER_TARGET     ( 0, 70) edit '$99999999.99'
    end-if
  end-if
 ! print 'Pay Frequency'                (+3,  1)
  print $PAY_FREQ                      (+3,  1)
  !print 'Gross Salary'                 ( 0, 21)
  print $GROS_SAL                        ( 0, 21)
  !print 'Tax'                          ( 0, 47)
  print $TAX                              ( 0, 47)
  !print 'Net Salary'                   ( 0, 61)
  print $NET_SAL                           ( 0, 61)
  print '-------------'                (+1,  1)
  print '------------'                 ( 0, 21)
  print '----------'                   ( 0, 42)
  print '----------'                   ( 0, 61)

PMT.GP_PAYGROUP

  ! Get Default Frquencies for the Country

     do Get_Default_Freq
CO.COUNTRY
PMT.GROSS_SALARY
PMT.TAX_YEARLY

   if #Factor_1 > 0
     let #Tax_1   = round(&PMT.Tax_Yearly / #Factor_1, 2)
     let #Gross_1 = round(&PMT.Gross_Salary / #Factor_1, 2)
     let #NET_1      = #Gross_1 - #Tax_1
   end-if

   if #Factor_2 > 0
     let #Tax_2   = round(&PMT.Tax_Yearly / #Factor_2, 2)
     let #Gross_2 = round(&PMT.Gross_Salary / #Factor_2, 2)
     let #Net_2      = #Gross_2 - #Tax_2
   end-if

   if #Factor_3 > 0
     let #Tax_3   = round(&PMT.Tax_Yearly / #Factor_3, 2)
     let #Gross_3 = round(&PMT.Gross_Salary / #Factor_3, 2)
     let #Net_3      = #Gross_3 - #Tax_3
   end-if

   if #Factor_4 > 0
    let #Tax_4   = round(&PMT.Tax_Yearly / #Factor_4, 2)
    let #Gross_4 = round(&PMT.Gross_Salary / #Factor_4, 2)
    let #Net_4      = #Gross_4 - #Tax_4
   end-if

  let #Net_Yearly = &PMT.Gross_Salary - &PMT.Tax_Yearly

  !print 'Yearly'          (+1,  1)
  print $YEARLY          (+1,  1)
  print &PMT.Gross_Salary ( 0, 17) edit '9999999999999.99'
  print &PMT.Tax_Yearly   ( 0, 36) edit '9999999999999.99'
  print #Net_Yearly       ( 0, 55) edit '9999999999999.99'

  if $Freq_Label_1 <> ' '
     print $Freq_Label_1         (+1,  1)
     print #Gross_1   ( 0, 17) edit '9999999999999.99'
     print #Tax_1     ( 0, 36) edit '9999999999999.99'
    print #NET_1      ( 0, 55) edit '9999999999999.99'
  end-if

  if $Freq_Label_2 <> ' '
     print $Freq_Label_2     (+1,  1)
     print #Gross_2   ( 0, 17) edit '9999999999999.99'
     print #Tax_2     ( 0, 36) edit '9999999999999.99'
     print #NET_2     ( 0, 55) edit '9999999999999.99'
  end-if

  if $Freq_Label_3 <> ' '
     print $Freq_Label_3     (+1,  1)
     print #Gross_3   ( 0, 17) edit '9999999999999.99'
     print #Tax_3     ( 0, 36) edit '9999999999999.99'
     print #NET_3     ( 0, 55) edit '9999999999999.99'
  end-if

  if $Freq_Label_4 <> ' '
     print $Freq_Label_4          (+1,  1)
     print #Gross_4     ( 0, 17) edit '9999999999999.99'
     print #Tax_4       ( 0, 36) edit '9999999999999.99'
     print #NET_4      ( 0, 55) edit '9999999999999.99'
  end-if

    !print 'Component Period'               (+2, 52)
    print $COMP_PERIOD                     (+2, 52)
    !print 'Annual Amounts'                 ( 0, 82)
    print $ANNUAL_AMT                        ( 0, 82)

    !print 'Package Period Amounts'         ( 0,110)
    print $PACK_PERIO_AMOUNT             ( 0,110)
    !print 'Component/Additional Component' (+1,  1)
    print $COMPONENT_ADD                    (+1,  1)
  !  print 'From'                           ( 0, 52)
    print $FROM                           ( 0, 52)
    !print 'To'                             ( 0, 65)
    print $TO                             ( 0, 65)
    !print 'TPV'                            ( 0, 80)
    print $TPV                              ( 0, 80)
    !print 'TEC'                            ( 0, 95)
    print $TEC                              ( 0, 95)
    !print 'TPV'                            ( 0,112)
    print $TPV                            ( 0,112)
    !print 'TEC'                            ( 0,127)
    print $TEC                            ( 0,127)
    print '--------------------------------------------' (+1,  1)
    print '----------'                     ( 0, 49)
    print '----------'                     ( 0, 61)
    print '---------'                      ( 0, 77)
    print '---------'                      ( 0, 92)
    print '---------'                      ( 0,109)
    print '---------'                      ( 0,124)

  let #Tot_Ann_TPV = 0
  let #Tot_Ann_TEC = 0
  let #Tot_Per_TPV = 0
  let #Tot_Per_TEC = 0

  do Process_Pkg_Details

    print '---------'                      (+1, 77)
    print '---------'                      ( 0, 92)
    print '---------'                      ( 0,109)
    print '---------'                      ( 0,124)
    print #Tot_Ann_TPV                     (+1, 74) edit '999999999.99'
    print #Tot_Ann_TEC                     ( 0, 89) edit '999999999.99'
    print #Tot_Per_TPV                     ( 0,106) edit '999999999.99'
    print #Tot_Per_TEC                     ( 0,121) edit '999999999.99'

  new-page


  FROM PS_PKG_MDL_TBL PMT,
       PS_COMPANY_TBL CO
 WHERE PMT.EMPLID        = $RC.Emplid
   AND PMT.EMPL_RCD      = #RC.Empl_Rcd
   AND PMT.PKG_STATUS    = $RC.Pkg_Status

    AND PMT.EFFDT   BETWEEN $RC.From_Dt AND $RC.Thru_Dt
   AND CO.COMPANY        = PMT.COMPANY
   AND CO.EFFDT =
        (SELECT MAX(CO1.EFFDT)
           FROM PS_COMPANY_TBL CO1
           WHERE CO1.COMPANY = CO.COMPANY
             AND CO1.EFFDT <= $RC.From_Dt)

 ORDER BY PMT.PKG_START_DT DESC, PMT.EFFDT DESC, PMT.EFFSEQ DESC
end-SELECT


  !Print '** End of Report **' ( +2, 70)
Print $END_OF_REP ( +2, 70)
end-procedure

begin-procedure Get_Name
!*********************************
  let $sql-statement = 'SELECT Pers Name'
  begin-SELECT on-error=SQL-Error
PER.NAME
  let $Name = &Per.Name
 FROM PS_PERSON_NAME PER
 WHERE     PER.EMPLID        = &PMT.EMPLID

end-SELECT

if isblank($Name) = 1
  let $sql-statement = 'SELECT Appl Name'
  begin-SELECT on-error=SQL-Error
APP.NAME
  let $Name = &App.Name
 FROM PS_HRS_APP_CURR_VW APP
 WHERE     APP.EMPLID  = &PMT.EMPLID
 end-SELECT
end-if


end-procedure


begin-procedure Get_Default_Freq
!*********************************



  let $sql-statement = 'SELECT PS_DFLT_FRQUENCY'
  begin-SELECT on-error=SQL-Error
DFLT.PAY_FREQ_01
DFLT.PAY_FREQ_02
DFLT.PAY_FREQ_03
DFLT.PAY_FREQ_04

      if &DFLT.PAY_FREQ_01 <> ' '
        let $Freq_Cd       = &DFLT.PAY_FREQ_01
        do Get_Freq_Annual_Factor
        let #Factor_1      = &FREQ.Freq_Annual_Factor
        let $Freq_Label_1  = &FREQ.DescrShort
      end-if

      if &DFLT.PAY_FREQ_02 <> ' '
        let $Freq_Cd       = &DFLT.PAY_FREQ_02
        do Get_Freq_Annual_Factor
        let #Factor_2      = &FREQ.Freq_Annual_Factor
        let $Freq_Label_2  = &FREQ.DescrShort
     end-if

      if &DFLT.PAY_FREQ_03 <> ' '
        let $Freq_Cd       = &DFLT.PAY_FREQ_03
        do Get_Freq_Annual_Factor
        let #Factor_3      = &FREQ.Freq_Annual_Factor
        let $Freq_Label_3  = &FREQ.DescrShort
      end-if

     if &DFLT.PAY_FREQ_04 <> ' '
        let $Freq_Cd       = &DFLT.PAY_FREQ_04
        do Get_Freq_Annual_Factor
        let #Factor_4      = &FREQ.Freq_Annual_Factor
        let $Freq_Label_4  = &FREQ.DescrShort
     end-if



FROM PS_DFLT_FREQUENCY DFLT
WHERE DFLT.COUNTRY = &CO.COUNTRY

end-select

end-procedure


begin-procedure Get_Freq_Annual_Factor
!*************************************

  let $sql-statement = 'SELECT PS_FREQUENCY_TBL'
  begin-SELECT on-error=SQL-Error
FREQ.FREQ_ANNUAL_FACTOR
FREQ.DESCRSHORT

FROM PS_FREQUENCY_TBL FREQ
WHERE FREQ.FREQUENCY_ID = $Freq_Cd
  AND FREQ.EFFDT = (SELECT MAX(FREQ1.EFFDT)
        FROM PS_FREQUENCY_TBL FREQ1
        WHERE FREQ1.FREQUENCY_ID  = FREQ.FREQUENCY_ID
        AND FREQ1.EFFDT <= &PMT.Effdt)
  AND FREQ.EFF_STATUS = 'A'
end-select

end-procedure




begin-procedure Process_Pkg_Details
!**********************************

  begin-SELECT on-error=SQL-Error

PMB.COMPONENT                      (+1,  1)
PBC.DESCR                          ( 0, 12)
PBC.PACKAGE_LEVEL
PMB.COMPONENT_START
  do Format-DateTime(&PMB.Component_Start,$Comp_Start,{DEFDMY},'','')
  print $Comp_Start                ( 0, 49)
PMB.COMPONENT_END
  do Format-DateTime(&PMB.Component_End,$Comp_End,{DEFDMY},'','')
  print $Comp_End                  ( 0, 61)
PMB.COMPONENT_AMT                  ( 0, 89) edit '999999999.99'
  let #Tot_Ann_TEC = #Tot_Ann_TEC + &PMB.COMPONENT_AMT
  if &PBC.PACKAGE_LEVEL = 'TPV'
    let #Tot_Ann_TPV = #Tot_Ann_TPV + &PMB.COMPONENT_AMT
    print &PMB.COMPONENT_AMT       ( 0, 74) edit '999999999.99'
  end-if
PMB.COMPONENT_PER_AMT              ( 0,121) edit '999999999.99'
  let #Tot_Per_TEC = #Tot_Per_TEC + &PMB.COMPONENT_PER_AMT
  if &PBC.PACKAGE_LEVEL = 'TPV'
    let #Tot_Per_TPV = #Tot_Per_TPV + &PMB.COMPONENT_PER_AMT
    print &PMB.COMPONENT_PER_AMT   ( 0,106) edit '999999999.99'
  end-if

  move &PMB.COMPONENT to $PMB_COMPONENT

  do Process_Add_Details

  print ''                         (+1,  1)

  FROM PS_PKG_MDL_BSE_CMP PMB,
       PS_PKG_BSE_CMP_TBL PBC
 WHERE PMB.EMPLID        = &PMT.EMPLID
   AND PMB.EMPL_RCD      = &PMT.EMPL_RCD
   AND PMB.EFFDT         = &PMT.EFFDT
   AND PMB.EFFSEQ        = &PMT.EFFSEQ
   AND PBC.COMPONENT     = PMB.COMPONENT
   AND PBC.EFFDT         = (SELECT MAX(PBC1.EFFDT)
                              FROM PS_PKG_BSE_CMP_TBL PBC1
                             WHERE PBC1.COMPONENT =  PBC.COMPONENT
                               AND PBC1.EFFDT    <= PMB.EFFDT)
end-SELECT
end-procedure


begin-procedure Process_Add_Details
!**********************************

begin-SELECT
PMA.ADD_COMPONENT     (+1,  3) on-break print=Change level=1
PAC.DESCR             ( 0, 12) on-break print=Change level=1
PAC.PACKAGE_LEVEL
PMA.ADD_CMP_AMT
PMA.ADD_CMP_AMT_PER
   let #Tot_Ann_TEC = #Tot_Ann_TEC + &PMA.ADD_CMP_AMT
   let #Tot_Per_TEC = #Tot_Per_TEC + &PMA.ADD_CMP_AMT_PER
   if &PAC.PACKAGE_LEVEL = 'TPV'
       let #Tot_Ann_TPV = #Tot_Ann_TPV + &PMA.ADD_CMP_AMT
       let #Tot_Per_TPV = #Tot_Per_TPV + &PMA.ADD_CMP_AMT_PER
       print &PMA.ADD_CMP_AMT      ( 0, 74) edit '999999999.99'
       print &PMA.ADD_CMP_AMT_PER  ( 0,106) edit '999999999.99'
   end-if
   print &PMA.ADD_CMP_AMT          ( 0, 89) edit '999999999.99'
   print &PMA.ADD_CMP_AMT_PER      ( 0,121) edit '999999999.99'

  FROM PS_PKG_MDL_ADD_CMP PMA,
       PS_PKG_ADD_CMP_TBL PAC
 WHERE PMA.EMPLID        = &PMT.EMPLID
   AND PMA.EMPL_RCD      = &PMT.EMPL_RCD
   AND PMA.EFFDT         = &PMT.EFFDT
   AND PMA.EFFSEQ        = &PMT.EFFSEQ
   AND PMA.COMPONENT     = $PMB_COMPONENT
   AND PMA.COMPONENT_START = &PMB.COMPONENT_START
   AND PAC.ADD_COMPONENT = PMA.ADD_COMPONENT
   AND PAC.EFFDT         = (SELECT MAX(PAC1.EFFDT)
                              FROM PS_PKG_ADD_CMP_TBL PAC1
                             WHERE PAC1.ADD_COMPONENT =  PAC.ADD_COMPONENT
                               AND PAC1.EFFDT        <= PMA.EFFDT)
end-SELECT
end-procedure



#include 'hrspkrnc.sqc'  !Get run control parameter values
#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'sqrtrans.sqc'     ! Translate SQR strings to given langua
