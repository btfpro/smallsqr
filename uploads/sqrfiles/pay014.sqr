!*************************************
!  PAY014:  Employee Earnings Record *
!*************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2012/11/08:11:50:54                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872695                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure

begin-report

  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY014' to $ReportID
  move 'Employee Earnings Record' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization
  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate to $AsOfDate  !for included procedures

  do Standard-Initialization
end-procedure


begin-procedure Initialization

  create-array name=Totals size=3 -
    field=TotalName:char          -
    field=total:number:11         -
    field=startCol:number:11

  put 'Co. Total'        into Totals(1) TotalName
  put 'QTR Total'        into Totals(2) TotalName
  put  11 into Totals(0) startCol(0)              !Reg Hrs
  put  25 into Totals(0) startCol(1)              !Reg Earns
  put  34 into Totals(0) startCol(2)              !OT Hrs
  put  46 into Totals(0) startCol(3)              !OT Earns
  put  59 into Totals(0) startCol(4)              !Other Hrs
  put  73 into Totals(0) startCol(5)              !Other Earns
  put  87 into Totals(0) startCol(6)              !Gross Pay
  put 101 into Totals(0) startCol(7)              !Federal Taxes
  put 118 into Totals(0) startCol(8)              !State Taxes
  put 138 into Totals(0) startCol(9)              !Deductions
  put 161 into Totals(0) startCol(10)             !Net Pay

  create-array name=ETDarray size=200         -
    field=EarnType:char                       -
    field=EarnHours:number                    -
    field=EarnGross:number                    -
    field=FedTaxType:char                     -
    field=FedTaxAmt:number                    -
    field=StLocTaxType:char                   -
    field=StLocTaxAmt:number                  -
    field=DedCode:char                        -
    field=DedAmt:number

  move 5 to #MaxSummaryLines !Index of last entry in the
                             !Summary array
  create-array name=SUMarray size=6           -
    field=EarnHrType:char:2                   -
    field=EarnHours:number:2                  -
    field=EarnGrsType:char:2                  -
    field=EarnGross:number:2                  -
    field=FedTaxType:char                     -
    field=FedTaxAmt:number                    -
    field=StTaxType:char                      -
    field=StTaxAmt:number                     -
    field=LocTaxType:char                     -
    field=LocTaxAmt:number                    -
    field=DedCode:char:3                      -
    field=DedAmt:number:3

  do Initialize-ETD-Array
  do Initialize-SUM-Array

end-procedure


begin-heading 7

  #Include 'stdhdg10.sqc'

  evaluate &TX.Balance_Qtr
    when = 1
      move 'First'  to $QtrName
    when = 2
      move 'Second' to $QtrName
    when = 3
      move 'Third'  to $QtrName
    when = 4
      move 'Fourth' to $QtrName
  end-evaluate

  move $QtrName to $PeriodDesc
  concat ' Quarter ' with $PeriodDesc
  concat &TX.Balance_Year with $PeriodDesc
  print $PeriodDesc (3)  CENTER

  print 'P/E Date  Form ID  <---- REGULAR ---'                     (+3,1)

  print '-> <---- OVERTIME ----> <-------- OTHER --------->         ' ()

#ifdef USA
  print '      <---- Federal ---> <--- State/Loc -->'                  ()
#endif

#ifdef CANADA
  print '      <---- Federal ---> <--- Prov/Loc --->'                  ()
#endif

  print 'Dept.ID   Bus.Unit Hours      Earning'                    (+1,1)
  print 's    Hours    Earnings  Type  Hours      '                    ()
  print 'Earnings     Gross Pay    Taxes      Type     Taxes   Type  ' ()
  print '   Deductions Code          Net Pay'                          ()

#ifdef USA
  print 'Check No.'               (+1,1)
#endif

#ifdef CANADA
  print 'Cheque#'                 (+1,1)
#endif
end-heading


begin-footing 14

  if $EmplRecordComplete <> 'Y' or $LastPage = 'Y'
    goto END-FOOTING
  end-if

  print 'QTR Total'           (+0,4)
  move 2 to #totalRow
  move 1 to #rollRow
  move 1 to #posn
  move 0 to #i

  while #i <= 10
    get #total from Totals(#totalRow) total(#i)
    get #startCol from Totals(0) startCol(#i)
    do Format-Number(#total, $out, '999,999,999.99mi')
    print $out (+#posn,#startCol)
    multiply -1 times #posn
    array-add #total to Totals(#rollRow) total(#i)
    put 0 into Totals(#totalRow) total(#i)
    add 1 to #i
  end-while

  do Get-YTD

  print 'YTD Total'           (+1,4)
  print 'Gross:'              (+0,81)
  print &Y.Total_Gross_YTD    (+0,88)    edit 99,999,999.99mi
  print 'Taxes:'              (+0,106)
  print &Y.Total_Taxes_YTD    (+0,113)   edit 99999,999.99mi
  print 'Deductions:'         (+0,129)
  print &Y.Total_Dedns_YTD    (+0,141)   edit 9999,999.99mi
  print 'Net:'                (+0,157)
  print &Y.Net_Pay_YTD        (+0,162)   edit 99,999,999.99mi

  print 'QTD->'                                                   (+2,1)
  print '<----- Other Hours ----->'                               (+0,7)
  print '<----- Other Earnings ------>'                           (+0,33)
  print 'Federal Tax'                                             (+0,65)

#ifdef USA
  print 'State Tax'                                               (+0,83)
#endif

#ifdef CANADA
  print 'Prov Tax'                                               (+0,83)
#endif

  print 'Local Tax'                                               (+0,102)
  print '<----------------------'                                 (+0,116)
  print 'Deductions ----------------------->'                     (+0,140)

  move 0 to #i

  while #i <= #MaxSummaryLines

    get $EarnHrType0        -
        #EarnHours0         -
        $EarnGrsType0       -
        #EarnGross0         -
        $EarnHrType1        -
        #EarnHours1         -
        $EarnGrsType1       -
        #EarnGross1         -
        $FedTaxType         -
        #FedTaxAmt          -
        $StTaxType          -
        #StTaxAmt           -
        $LocTaxType         -
        #LocTaxAmt          -
        $DedCode0           -
        #DedAmt0            -
        $DedCode1           -
        #DedAmt1            -
        $DedCode2           -
        #DedAmt2            -
      from SUMarray(#i)     -
        EarnHrType(0)       -
        EarnHours(0)        -
        EarnGrsType(0)      -
        EarnGross(0)        -
        EarnHrType(1)       -
        EarnHours(1)        -
        EarnGrsType(1)      -
        EarnGross(1)        -
        FedTaxType          -
        FedTaxAmt           -
        StTaxType           -
        StTaxAmt            -
        LocTaxType          -
        LocTaxAmt           -
        DedCode(0)          -
        DedAmt(0)           -
        DedCode(1)          -
        DedAmt(1)           -
        DedCode(2)          -
        DedAmt(2)

    do Format-Number(#EarnHours0, $out, 'b9999.99mi')
    print $out      (+1,07)
    print $EarnHrType0      (+0,16)
    do Format-Number(#EarnHours1, $out, 'b9999.99mi')
    print $out      (+0,20)
    print $EarnHrType1      (+0,29)

    do Format-Number(#EarnGross0, $out, 'b999999.99mi')
    print $out      (+0,33)
    print $EarnGrsType0     (+0,44)
    do Format-Number(#EarnGross1, $out, 'b999999.99mi')
    print $out      (+0,48)
    print $EarnGrsType1     (+0,59)

    do Format-Number(#FedTaxAmt, $out, 'b999999.99mi')
    print $out      (+0,63)
    print $FedTaxType       (+0,74)

    do Format-Number(#StTaxAmt, $out, 'b999999.99mi')
    print $out      (+0,80)
    print $StTaxType        (+0,91)

    do Format-Number(#LocTaxAmt, $out, 'b999999.99mi')
    print $out      (+0,97)
    print $LocTaxType       (+0,108)

    do Format-Number(#DedAmt0, $out, 'b99999.99mi')
    print $out      (+0,116)
    print $DedCode0         (+0,126)

    do Format-Number(#DedAmt1, $out, 'b99999.99mi')
    print $out      (+0,136)
    print $DedCode1         (+0,146)

    do Format-Number(#DedAmt2, $out, 'b99999.99mi')
    print $out      (+0,156)
    print $DedCode2         (+0,166)

    add 1 to #i
  end-while

    print 'Pay Sheet Source Legend: K = Batch Final  L = On-line Final  O = On-line' (+1,1)

END-FOOTING:

end-footing


begin-procedure Report

begin-SELECT
A.COMPANY    () on-break print=never  level=1 procedure=Company-Change
A.PAYGROUP   () on-break print=never  level=2 procedure=PayGroup-Change
PD.NAME      () on-break print=never  level=3 procedure=Employee-Change
B.EMPLID
A.PAY_END_DT

! move '0' to $Year4
  do Format-DateTime(&A.Pay_End_Dt, $out, {DEFDATE}, '', '')
  print $out           (2,1)

A1.BALANCE_YEAR
B.DEPTID               (3,1)
B.BUSINESS_UNIT        (3,12)
A.CHECK_DT
B.CHECK_DT
B.PAYCHECK_OPTION
B.FORM_ID
B.PAYCHECK_NBR    () on-break print=never  level=4 procedure=PAYCHECK_NBR-Change

  if RTRIM(&B.Form_ID, ' ') <> ''
    print &B.Form_ID   (2,12)
  end-if

  if &B.PAYCHECK_NBR <> 0
    do Format-Number(&B.PAYCHECK_NBR, $out, '099999999999999')
    print $out         (4,1)
  end-if

B.TOTAL_GROSS          (2,89)  EDIT 99999,999.99MI
B.NET_PAY              (2,162) EDIT 99,999,999.99MI
B.TOTAL_TAXES
B.TOTAL_DEDUCTIONS
B.OFF_CYCLE
B.PAGE_NUM
B.LINE_NUM
B.SEPCHK
B.PAY_SHEET_SRC

  if &B.Pay_Sheet_Src = 'O' or &B.Pay_Sheet_Src = 'K' or &B.Pay_Sheet_Src = 'L'
     print &B.Pay_Sheet_Src (2,9)
  end-if

  move &A.Company    to $Company
  move &A.PayGroup   to $PayGroup
  move &A.Pay_End_Dt to $PayEndDate
  move &B.EmplID     to $EmplID
  move &PD.Name      to $Name
  move &A.Check_Dt   to $AsOfDate  !for included procedures

  ARRAY-ADD &B.Total_Gross     -
           &B.Total_Deductions -
           &B.Net_Pay          -
    to Totals(2) total(6)      -
                 TOTAL(9)      -
                 TOTAL(10)

  do Initialize-ETD-Array
  do Get-Pay-Earnings
  do Get-Taxes
  do Get-Deductions
  do Print-Detail

  NEXT-LISTING NEED=4

FROM  PS_PAY_CALENDAR  A, PS_PAY_CAL_BAL_ID A1,
      PS_PAY_CHECK     B,
      PS_PAYGROUP_TBL  P,
      PS_NAMES PD
WHERE A.COMPANY         = A1.COMPANY
  AND A.PAYGROUP        = A1.PAYGROUP
  AND A.PAY_END_DT      = A1.PAY_END_DT
  AND A1.BALANCE_ID     = &TX.Balance_Id
  AND A1.BALANCE_YEAR   = &TX.Balance_Year
  AND A1.BALANCE_QTR    = &TX.Balance_Qtr
  AND PD.EMPLID         = B.EMPLID
  AND PD.NAME_TYPE = 'PRI'
  AND PD.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = PD.EMPLID
         AND  PX.NAME_TYPE = PD.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
  AND B.COMPANY         = A.COMPANY
  AND B.PAYGROUP        = A.PAYGROUP
  AND B.PAY_END_DT      = A.PAY_END_DT
  AND B.PAYCHECK_STATUS IN ('F','R','A')
  AND P.COMPANY         = A.COMPANY
  AND P.PAYGROUP        = A.PAYGROUP
  AND P.COUNTRY         = 'USA'
  AND P.EFFDT            =
      (SELECT MAX(EFFDT)
         FROM PS_PAYGROUP_TBL
        WHERE COMPANY    = A.COMPANY
          AND PAYGROUP   = A.PAYGROUP
          AND EFF_STATUS = 'A'
          AND EFFDT     <= A.PAY_END_DT)
ORDER BY A.COMPANY,
         A.PAYGROUP,
         PD.NAME,
         B.EMPLID,
         A.PAY_END_DT,
         B.DEPTID,
         B.PAGE_NUM,
         B.LINE_NUM,
         B.SEPCHK
end-SELECT

   do Print-Co-Totals

end-procedure

begin-procedure Print-Co-Totals

                              !print last employee
  move 1 to #changeLevel
  move 'Y' to $EmplRecordComplete
  do Print-Totals
                              !print company totals on separate page
  move ' ' to $Name
  move ' ' to $EmplID
  move 'Y' to $LastPage
  get $TotalName from Totals(1) TotalName
  print $TotalName (+2,4)
  position (+1)
  move 0 to #i

  while #i <= 10
    get #total from Totals(1) total(#i)
    get #startCol from Totals(0) startCol(#i)
    do Format-Number(#total, $out, '999,999,999.99mi')
    print $out (+#posn,#startCol)
    multiply -1 times #posn
    put 0 into Totals(1) total(#i)
    put 0 into Totals(2) total(#i)
    add 1 to #i
  end-while

  do Initialize-ETD-Array
  do Initialize-SUM-Array

end-procedure

begin-procedure Initialize-ETD-Array
  move 0 to #i

  while #i <= #ETDmax

    put  ' '            -
         0              -
         0              -
         ' '            -
         0              -
         ' '            -
         0              -
         ' '            -
         0              -
    into ETDarray(#i)   -
         EarnType       -
         EarnHours      -
         EarnGross      -
         FedTaxType     -
         FedTaxAmt      -
         StLocTaxType   -
         StLocTaxAmt    -
         DedCode        -
         DedAmt

    add 1 to #i
  end-while

  move -1 to #ETDmax
end-procedure


begin-procedure Initialize-SUM-Array
  move 0 to #i

  while #i <= #MaxSummaryLines

    put  ' ' 0 ' ' 0                                           -
         ' ' 0 ' ' 0                                           -
         ' ' 0                                                -
         ' ' 0                                                -
         ' ' 0                                                -
         ' ' 0 ' ' 0 ' ' 0                                      -
    into SUMarray(#i)                                        -
      EarnHrType(0) EarnHours(0) EarnGrsType(0) EarnGross(0) -
      EarnHrType(1) EarnHours(1) EarnGrsType(1) EarnGross(1) -
      FedTaxType FedTaxAmt                                   -
      StTaxType StTaxAmt                                     -
      LocTaxType LocTaxAmt                                   -
      DedCode(0) DedAmt(0) DedCode(1) DedAmt(1) DedCode(2) DedAmt(2)
    add 1 to #i
  end-while

end-procedure


begin-procedure Get-Pay-Earnings
  position (1)
  move -1 to #i

begin-SELECT
C.REG_HRS+C.REG_EARN_HRS     &Hours    (+1,18) EDIT       B999.99MI
C.REG_EARNS+C.REG_HRLY_EARNS &Earnings (0,27)  EDIT  B9999,999.99MI
C.OT_HRS                               (0,41)  EDIT       B999.99MI
C.OT_HRLY_EARNS                        (0,50)  EDIT    B99,999.99MI
C.ADDL_NBR

  ARRAY-ADD &Hours           -
            &Earnings        -
            &C.OT_Hrs        -
            &C.OT_Hrly_Earns -
    to Totals(2) total(0)    -
                 TOTAL(1)    -
                 TOTAL(2)    -
                 TOTAL(3)

  do Get-Other-Hours-Earnings

FROM  PS_PAY_EARNINGS C
WHERE COMPANY         = $Company
  AND PAYGROUP        = $PayGroup
  AND PAY_END_DT      = $PayEndDate
  AND OFF_CYCLE       = &B.Off_Cycle
  AND PAGE_NUM           = &B.PAGE_NUM
  AND LINE_NUM           = &B.LINE_NUM
  AND SEPCHK          = &B.SepChk
  AND OK_TO_PAY       = 'Y'
  AND PAY_LINE_STATUS = 'F'
  AND C.SINGLE_CHECK_USE IN ('C', 'N')
ORDER BY C.ADDL_NBR
end-SELECT

end-procedure


begin-procedure Get-Other-Hours-Earnings

begin-SELECT
ERNCD
OTH_HRS
OTH_EARNS

  add 1 to #i

  PUT &ErnCd          -
      &Oth_Hrs        -
      &Oth_Earns      -
    INTO ETDARRAY(#I) -
      EARNTYPE        -
      EARNHOURS       -
      EARNGROSS

  ARRAY-ADD &Oth_Hrs   -
            &Oth_Earns -
    to Totals(2)       -
       TOTAL(4)        -
       TOTAL(5)

  move &ErnCd to $SummaryCode

  if &Oth_Hrs <> 0
    move 'ERNHR' to $UpdateType
    move &Oth_Hrs to #Hours
    do Update-Summary-Array
  end-if

  if &Oth_Earns <> 0
    move 'ERNGRS' to $UpdateType
    move &Oth_Earns to #Gross
    do Update-Summary-Array
  end-if

FROM  PS_PAY_OTH_EARNS
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDate
  AND OFF_CYCLE  = &B.Off_Cycle
  AND PAGE_NUM      = &B.PAGE_NUM
  AND LINE_NUM      = &B.LINE_NUM
  AND SEPCHK     = &B.SepChk
  AND ADDL_NBR      = &C.ADDL_NBR
ORDER BY ERNCD
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

end-procedure


begin-procedure Get-Taxes
  move -1 to #i
  move -1 to #j

begin-SELECT
L.STATE
L.LOCALITY
L.TAX_CLASS
L.TAX_CUR

  if &L.Tax_Cur <> 0
    if RTRIM(&L.State, ' ') = '$U'  !if U.S. federal
     add 1 to #i

      evaluate &L.Tax_Class
        when = 'H'  !FWT
          move 'FWT' to $TaxType
        when = 'C'  !Earned Income Credit
          move 'EIC' to $TaxType
        when = 'D'  !FICA OASDI
          move 'OASDI' to $TaxType
        when = 'G'  !FICA OASDI Tips / EE
          move 'OASDI/Tips' to $TaxType
        when = 'F'  !FICA Medicare
          move 'MEDI' to $TaxType
        when = 'T'  !FICA Medicare Tips / EE
          move 'MEDI/Tips' to $TaxType
        when = 'A'  !Non-resident alien                                 !HP99999
          move '1042' to $TaxType                                       !HP99999
        when = '7'  !Additional Medicare
          move 'ADMED' to $TaxType
      end-evaluate

      ARRAY-ADD &L.Tax_Cur to TOTALS(2) TOTAL(7)

      PUT &L.Tax_Cur      -
          $TaxType        -
        INTO ETDARRAY(#I) -
          FEDTAXAMT       -
          FEDTAXTYPE

      move 'FED'    to $UpdateType
      move $TaxType to $SummaryCode
      move &L.Tax_Cur to #FedTax
      do Update-Summary-Array
    else
     add 1 to #j

      if RTRIM(&L.Locality, ' ') = '' !if a State

        LET $TaxType = RTRIM(&L.State, ' ')
        evaluate &L.Tax_Class
          when = 'H'  !SWT
            concat 'SWT' with $TaxType
          when = 'A'  !Non-resident alien (1042)                        !HP99999
            concat '1042' with $TaxType                                 !HP99999
          when = 'D'  !Employee SUI/SDI
            concat 'SDI' with $TaxType
          when = 'L'  !New Jersey SWAF
            concat 'SWAF' with $TaxType
          when = 'M'  !New Jersey WFDP
            concat 'WFDP' with $TaxType
          when = 'N'  !New Jersey HCSF
            concat 'HCSF' with $TaxType
          when = 'V'  !Employee SUI/SDI
            concat 'UI' with $TaxType
          when = 'W'  !Employee VDI
            concat 'VDI' with $TaxType
          when = 'I'  !FLI EE
            concat 'FLI' with $TaxType
          when = 'O'  !VOL FLI EE
            concat 'VFLI' with $TaxType
        end-evaluate

        move 'STATE'  to $UpdateType
        move $TaxType to $SummaryCode
        move &L.Tax_Cur to #StTax
        do Update-Summary-Array
      else
        move &L.Locality to $TaxType

        move 'LOCAL'  to $UpdateType
        move $TaxType to $SummaryCode
        move &L.Tax_Cur to #LocTax
        do Update-Summary-Array
      end-if

      ARRAY-ADD &L.Tax_Cur to TOTALS(2) TOTAL(8)

      PUT &L.Tax_Cur      -
          $TaxType        -
        INTO ETDARRAY(#J) -
           STLOCTAXAMT    -
           STLOCTAXTYPE

    end-if
  end-if

FROM  PS_PAY_TAX L
WHERE L.COMPANY    = $Company
  AND L.PAYGROUP   = $PayGroup
  AND L.PAY_END_DT = $PayEndDate
  AND L.OFF_CYCLE  = &B.Off_Cycle
  AND L.PAGE_NUM      = &B.PAGE_NUM
  AND L.LINE_NUM      = &B.LINE_NUM
  AND L.SEPCHK     = &B.SepChk
  AND TAX_CLASS IN ('H','C','D','F','L','M','N','V','P','B','G','T','W','A','I','O','7')  !HP99999
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

  if #j > #ETDmax
    move #j to #ETDmax
  end-if

end-procedure


begin-procedure Get-Deductions
  move -1 to #i

begin-SELECT
F.PLAN_TYPE
F.DEDCD

#ifdef DB2ALL
DECIMAL(SUM(F.DED_CUR),15,3)   &F.Ded_cur
#else
SUM(F.DED_CUR)         &F.Ded_cur
#endif

  add 1 to #i
  move &F.Plan_Type to $DedCode xx
  concat &F.DedCd with $DedCode -xxxxxx
  PUT &F.Ded_Cur $DedCode INTO ETDARRAY(#I) DEDAMT DEDCODE

  move 'DED' to $UpdateType
  move $DedCode to $SummaryCode
  move &F.Ded_Cur to #DedAmt
  do Update-Summary-Array

FROM  PS_PAY_DEDUCTION F
WHERE F.COMPANY    = $Company
  AND F.PAYGROUP   = $PayGroup
  AND F.PAY_END_DT = $PayEndDate
  AND F.OFF_CYCLE  = &B.Off_Cycle
  AND F.PAGE_NUM      = &B.PAGE_NUM
  AND F.LINE_NUM      = &B.LINE_NUM
  AND F.SEPCHK     = &B.SepChk
  AND F.DED_CLASS <= 'K'
  AND F.DED_CUR   <> 0
GROUP BY F.PLAN_TYPE, F.DEDCD
ORDER BY F.PLAN_TYPE, F.DEDCD
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

end-procedure


begin-procedure Get-YTD

begin-SELECT
Y.TOTAL_GROSS_YTD
Y.TOTAL_TAXES_YTD
Y.TOTAL_DEDNS_YTD
Y.NET_PAY_YTD
Y.EMPLID
Y.COMPANY
Y.BALANCE_YEAR
Y.BALANCE_QTR
Y.BALANCE_PERIOD

 EXIT-SELECT                  !only get record from most recent month

 FROM PS_CHECK_YTD Y
WHERE Y.BALANCE_YEAR = &TX.Balance_Year
  AND Y.BALANCE_ID  =  &TX.Balance_Id
  AND Y.BALANCE_QTR  = &TX.Balance_Qtr
  AND Y.COMPANY       = $Company
  AND Y.EMPLID        = $EmplID
ORDER BY Y.EMPLID, Y.COMPANY, Y.BALANCE_YEAR, Y.BALANCE_QTR, Y.BALANCE_PERIOD DESC
end-SELECT

end-procedure


begin-procedure Print-Detail
  position (1)
  move 0 to #i

  while #i <= #ETDmax

    get $EarnType #EarnHours #EarnGross -
        #FedTaxAmt $FedTaxType -
        #StLocTaxAmt $StLocTaxType -
        #DedAmt $DedCode -
    from ETDarray(#i) -
        EarnType EarnHours EarnGross -
        FedTaxAmt FedTaxType -
        StLocTaxAmt StLocTaxType -
        DedAmt DedCode

    print $EarnType     (+1,62)
    do Format-Number(#EarnHours, $out, 'b999.99mi')
    print $out  (0,66)
    do Format-Number(#EarnGross, $out, 'b9999,999.99mi')
    print $out  (0,75)
    do Format-Number(#FedTaxAmt, $out, 'b9999,999.99mi')
    print $out  (0,103)
    print $FedTaxType   (0,116)
    do Format-Number(#StLocTaxAmt, $out, 'b99,999.99mi')
    print $out  (0,121)
    print $StLocTaxType (0,132)
    do Format-Number(#DedAmt, $out, 'b999,999.99mi')
    print $out  (0,141)
    print $DedCode      (0,153)
    add 1 to #i
  end-while

end-procedure


begin-procedure Company-Change

  do Print-Co-Totals

  move 2 to #changeLevel
  move 'Y' to $EmplRecordComplete
  do Print-Totals
  move 'N' to $EmplRecordComplete
  move 'N' to $LastPage
end-procedure


begin-procedure PayGroup-Change
  move 3 to #changeLevel
  move 'Y' to $EmplRecordComplete
  do Print-Totals
  do Initialize-SUM-Array
  move 'N' to $EmplRecordComplete
end-procedure


begin-procedure Employee-Change
  move 4 to #changeLevel
  move 'Y' to $EmplRecordComplete
  do Print-Totals
  do Initialize-SUM-Array
  move 'N' to $EmplRecordComplete
end-procedure


begin-procedure PAYCHECK_NBR-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals

  if #changeLevel = 5          !skip page except on Pay_End_Dt change
    position (+1)
  else
    new-page
  end-if

end-procedure


begin-procedure Update-Summary-Array
  move 0 to #k
  move 'N' to $ExitWhile

  while #k <= #MaxSummaryLines

    evaluate $UpdateType
      when = 'ERNHR'
        move 0 to #m

        while #m <= 1
          get $EarnType from SUMarray(#k) EarnHrType(#m)

          if RTRIM($EarnType, ' ') = '' !if array entry is null
            put $SummaryCode into SUMarray(#k) EarnHrType(#m)
            move 'Y' to $ExitWhile
            break                 !exit the "evaluate"
          else
            if $SummaryCode = $EarnType
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            else
              if #k = #MaxSummaryLines
                put 'OTH' into SUMarray(#k) EarnHrType(#m)
                move 'Y' to $ExitWhile
                break  !exit the "evaluate"
              end-if
            end-if
          end-if

          add 1 to #m
        end-while

      when = 'ERNGRS'
        move 0 to #m

        while #m <= 1
          get $EarnType from SUMarray(#k) EarnGrsType(#m)

          if RTRIM($EarnType, ' ') = '' !if array entry is null
            put $SummaryCode into SUMarray(#k) EarnGrsType(#m)
            move 'Y' to $ExitWhile
            break                 !exit the "evaluate"
          else
            if $SummaryCode = $EarnType
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            else
              if #k = #MaxSummaryLines
                put 'OTH' into SUMarray(#k) EarnGrsType(#m)
                move 'Y' to $ExitWhile
                break  !exit the "evaluate"
              end-if
            end-if
          end-if

          add 1 to #m
        end-while

      when = 'FED'
        get $FedTaxType from SUMarray(#k) FedTaxType

        if RTRIM($FedTaxType, ' ') = '' !if array entry is null
          put $SummaryCode into SUMarray(#k) FedTaxType
          move 'Y' to $ExitWhile
          break                 !exit the "evaluate"
        else
          if $SummaryCode = $FedTaxType
            move 'Y' to $ExitWhile
            break  !exit the "evaluate"
          else
            if #k = #MaxSummaryLines
              put 'OTH' into SUMarray(#k) FedTaxType
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            end-if
          end-if
        end-if

      when = 'STATE'
        get $StTaxType from SUMarray(#k) StTaxType

        if RTRIM($StTaxType, ' ') = '' !if array entry is null
          put $SummaryCode into SUMarray(#k) StTaxType
          move 'Y' to $ExitWhile
          break                 !exit the "evaluate"
        else
          if $SummaryCode = $StTaxType
            move 'Y' to $ExitWhile
            break  !exit the "evaluate"
          else
            if #k = #MaxSummaryLines
              put 'OTH' into SUMarray(#k) StTaxType
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            end-if
          end-if
        end-if

      when = 'LOCAL'
        get $LocTaxType from SUMarray(#k) LocTaxType

        if RTRIM($LocTaxType, ' ') = '' !if array entry is null
          put $SummaryCode into SUMarray(#k) LocTaxType
          move 'Y' to $ExitWhile
          break                 !exit the "evaluate"
        else
          if $SummaryCode = $LocTaxType
            move 'Y' to $ExitWhile
            break  !exit the "evaluate"
          else
            if #k = #MaxSummaryLines
              put 'OTH' into SUMarray(#k) LocTaxType
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            end-if
          end-if
        end-if

      when = 'DED'
        move 0 to #m

        while #m <= 2
          get $DedCode from SUMarray(#k) DedCode(#m)

          if RTRIM($DedCode, ' ') = '' !if array entry is null
            put $SummaryCode into SUMarray(#k) DedCode(#m)
            move 'Y' to $ExitWhile
            break                 !exit the "evaluate"
          else
            if $SummaryCode = $DedCode
              move 'Y' to $ExitWhile
              break  !exit the "evaluate"
            else
              if #k = #MaxSummaryLines
                put 'OTH' into SUMarray(#k) DedCode(#m)
                move 'Y' to $ExitWhile
                break  !exit the "evaluate"
              end-if
            end-if
          end-if

          add 1 to #m
        end-while

    end-evaluate

    if $ExitWhile = 'Y'
      break
    end-if

    add 1 to #k
  end-while

  evaluate $UpdateType
    when = 'ERNHR'
      array-add #Hours  to SUMarray(#k) EarnHours(#m)
    when = 'ERNGRS'
      array-add #Gross  to SUMarray(#k) EarnGross(#m)
    when = 'FED'
      array-add #FedTax to SUMarray(#k) FedTaxAmt
    when = 'STATE'
      array-add #StTax  to SUMarray(#k) StTaxAmt
    when = 'LOCAL'
      array-add #LocTax to SUMarray(#k) LocTaxAmt
    when = 'DED'
      array-add #DedAmt to SUMarray(#k) DedAmt(#m)
  end-evaluate

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'stdinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getmsgct.sqc'  !Gets Message Catalog

