!***********************************************************************
!  TAX955: Print summary data for Form 1042
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:07:32:51                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'   ! set environment
#include 'setup31.sqc'  ! printer and page-size initialization
#include 'datetime.sqc' ! routines for date and time formatting


!***********************************************************************
begin-report
  do Init-Report
  do Process-1042-Data
  do Reset
  do Stdapi-Term
end-report


!***********************************************************************
begin-heading 5
  #include 'stdhdg01.sqc'

  ! actual column headings are printed during the print process

end-heading


!***********************************************************************
begin-procedure Init-Report
  move 'TAX955' to $ReportID
  move 'Form 1042 Tax Liability Data' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

  move '-' to $ReportDDelimiter
  move '1' to $ReportDDLZero
  move '1' to $ReportMMLZero
  move '1' to $ReportYear4

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Parameters
  do Create-Company-Array

  create-array name=month-name size=13 field=mm:char
    put 'Jan' into month-name(1)  mm
    put 'Feb' into month-name(2)  mm
    put 'Mar' into month-name(3)  mm
    put 'Apr' into month-name(4)  mm
    put 'May' into month-name(5)  mm
    put 'Jun' into month-name(6)  mm
    put 'Jul' into month-name(7)  mm
    put 'Aug' into month-name(8)  mm
    put 'Sep' into month-name(9)  mm
    put 'Oct' into month-name(10) mm
    put 'Nov' into month-name(11) mm
    put 'Dec' into month-name(12) mm

end-procedure


!***********************************************************************
! Procedure:  Get-Parameters
! Description:
!   This routine gets the run control parameters and formats them
!   as required.
!***********************************************************************
begin-procedure Get-Parameters
  if $Prcs_Process_Instance = ''
    input $Parm_Tax_Year 'Enter Year, e.g. 1990'
    input $Parm_Company  'Enter Company Code (use "ALL" to run for all companies'
  else
    do Select-Parameters
    move #RC_TAX1042.Tax_Year to $Parm_Tax_Year 9999
    move $RC_TAX1042.Company  to $Parm_Company
  end-if

  let $StartOfYear = $Parm_Tax_Year || '-01-01'
  do Format-DateTime($StartOfYear, $StartOfYear, {DEFYMD}, '', 'NATIVE')
  let $EndOfYear = $Parm_Tax_Year || '-12-31'
  do Format-DateTime($EndOfYear, $EndOfYear, {DEFYMD}, '', 'NATIVE')

  if $Parm_Company <> 'ALL'
    let $Company_Where = 'AND PTX.COMPANY = ''' || $Parm_Company || ''' '
  else
    let $Company_Where = ''
  end-if

end-procedure


!***********************************************************************
! Procedure:  Create-Company-Array
! Description:
!   This procedure will create an array that will hold all of the
!   yearly tax liability data for a company.
!***********************************************************************
begin-procedure Create-Company-Array

! declare the array
create-array name=company-array size=48
  field=start-date:char
  field=end-date:char
  field=tax-amt:number

! load the array
let #Month_Nbr = 1
while #Month_Nbr <= 12

  move #Month_Nbr to $Month_Nbr 09

  let #Pos = (#Month_Nbr - 1) * 4

  let $StartDt = $Parm_Tax_Year || '-' || $Month_Nbr || '-01'
  do Format-DateTime($StartDt, $StartDt, {DEFYMD}, '', 'NATIVE')
  let $EndDt   = $Parm_Tax_Year || '-' || $Month_Nbr || '-07'
  do Format-DateTime($EndDt, $EndDt, {DEFYMD}, '', 'NATIVE')
  put $StartDt $EndDt into company-array(#Pos) start-date end-date

  add 1 to #Pos
  let $StartDt = $Parm_Tax_Year || '-' || $Month_Nbr || '-08'
  do Format-DateTime($StartDt, $StartDt, {DEFYMD}, '', 'NATIVE')
  let $EndDt   = $Parm_Tax_Year || '-' || $Month_Nbr || '-15'
  do Format-DateTime($EndDt, $EndDt, {DEFYMD}, '', 'NATIVE')
  put $StartDt $EndDt into company-array(#Pos) start-date end-date

  add 1 to #Pos
  let $StartDt = $Parm_Tax_Year || '-' || $Month_Nbr || '-16'
  do Format-DateTime($StartDt, $StartDt, {DEFYMD}, '', 'NATIVE')
  let $EndDt   = $Parm_Tax_Year || '-' || $Month_Nbr || '-22'
  do Format-DateTime($EndDt, $EndDt, {DEFYMD}, '', 'NATIVE')
  put $StartDt $EndDt into company-array(#Pos) start-date end-date

  add 1 to #Pos
  let $StartDt = $Parm_Tax_Year || '-' || $Month_Nbr || '-23'
  do Format-DateTime($StartDt, $StartDt, {DEFYMD}, '', 'NATIVE')
  ! determine the last day of the month by retrieving the value
  ! of LEN from the array MONTH-CHAR, except for February, when
  ! the last day of the month is determined by starting with
  ! the 1st of March (for the Tax Year) and subtracting one
  if #Month_Nbr = 2
    let $EndDt = $Parm_Tax_Year  || '-03-01'
    do Format-DateTime($EndDt, $EndDt, {DEFYMD}, '', 'NATIVE')
    do Convert-To-DTU-Date($EndDt, $EndDt)
    do dtu-subtract-days($EndDt, 1, $EndDt)
    do Convert-From-DTU-Date($EndDt, $EndDt)
  else
    get #LOM from month-char(#Month_Nbr) len
    move #LOM to $LOM 09
    let $EndDt = $Parm_Tax_Year || '-' || $Month_Nbr || '-' || $LOM
    do Format-DateTime($EndDt, $EndDt, {DEFYMD}, '', 'NATIVE')
  end-if
  put $StartDt $EndDt into company-array(#Pos) start-date end-date

  add 1 to #Month_Nbr
end-while

do Init-Company-Array

end-procedure


!***********************************************************************
! Procedure:  Process-1042-Data
! Description:
!   This procedure reads data from the PAY_TAX_1042 table.  All data
!   for the specified tax year is processed (determined by looking at
!   the year of the pay end date).  As well, all companies will be
!   processed, unless only one particular company was specified.
!   For each row retrieved, a routine is called to add that row
!   to the correct quarter-month.
!***********************************************************************
begin-procedure Process-1042-Data

begin-SELECT
PTX.COMPANY    (0,0) on-break print=never after=Company-Break save=$Last_Company
PTX.PAY_END_DT
PCK.CHECK_DT
PTX.TAX_1042_CUR

  do Add-To-Company-Array

FROM PS_PAY_TAX_1042 PTX,
     PS_PAY_CHECK PCK
WHERE PCK.COMPANY     = PTX.COMPANY
  AND PCK.PAYGROUP    = PTX.PAYGROUP
  AND PCK.PAY_END_DT  = PTX.PAY_END_DT
  AND PCK.OFF_CYCLE   = PTX.OFF_CYCLE
  AND PCK.PAGE_NUM    = PTX.PAGE_NUM
  AND PCK.LINE_NUM    = PTX.LINE_NUM
  AND PCK.SEPCHK      = PTX.SEPCHK
  AND PCK.CHECK_DT BETWEEN $StartOfYear AND $EndOfYear
  AND PTX.STATE = '$U'
[$Company_Where]
ORDER BY PTX.COMPANY
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Add-To-Company-Array
! Description:
!   This procedure attempts to determine which quarter-month that the
!   current Tax_1042 record is attributable to, based upon the
!   CHECK_DT.  Once the correct quarter-month is found, the
!   tax amount is added to the total at that array position.
!***********************************************************************
begin-procedure Add-To-Company-Array

  let #Pos = 0
  while #Pos < 48
    get $StartDt $EndDt from company-array(#Pos) start-date end-date

    do Convert-To-DTU-Date($StartDt, $DTUStartDt)
    do Convert-To-DTU-Date($EndDt, $DTUEndDt)
    do Convert-To-DTU-Date(&PCK.CHECK_DT, $DTUCheckdt)

    if $DTUCheckdt >= $DTUStartDt and $DTUCheckdt <= $DTUEndDt
      move &PTX.TAX_1042_CUR to #Tax_Amt
      array-add #Tax_Amt to company-array(#Pos) tax-amt
      let #Pos = 99
    end-if
    add 1 to #Pos
  end-while

end-procedure


!***********************************************************************
! Procedure:  Company-Break
! Description:
!   This routine is called when a new company begins.  The data
!   for the prior company is printed on a new page and then the
!   tax amounts in the company array are reset to zero.
!***********************************************************************
begin-procedure Company-Break

begin-SELECT
CMP.DESCR
  move &CMP.DESCR to $Company_Name
FROM PS_COMPANY_TBL CMP
WHERE CMP.COMPANY = $Last_Company
  AND CMP.EFF_STATUS = 'A'
  AND CMP.EFFDT = (SELECT MAX(CMP2.EFFDT)
                  FROM PS_COMPANY_TBL CMP2
                 WHERE CMP2.COMPANY = CMP.COMPANY
                   AND CMP2.EFFDT  <= $AsOfToday)
end-SELECT

do Print-Company-Array
do Init-Company-Array

end-procedure


!***********************************************************************
! Procedure:  Print-Company-Array
! Description:
!   This procedure prints out the summary data contained in the array.
!   The report consists of three columns.  Each column contains data
!   for four months.  Each quarter-month total is printed, followed
!   by a monthly total.  At the end of the page, a yearly total
!   is printed.
!***********************************************************************
begin-procedure Print-Company-Array

print 'Company:'      (7, 1)
print $Company_Name   (7,+2)

let #X = 1
let #TaxAmt_Year = 0

while #X <= 3

  let #Y = 1
  let #M = 0
  let #TaxAmt_Month = 0

  if #X = 3
    let #FillAmt = 30
  else
    let #FillAmt = 38
  end-if

  while #Y <= 16
    let #Pos = (#X - 1) * 16 + (#Y - 1)
    let #Col = (#X - 1) * 37 + 1
    let #Col2 = #Col + 16

    if #Y = 1
      print 'Deposit Period'   (10,#Col)
      print ' Tax Liability'   (10,#Col2)
      print '--------------'   (11,#Col)
      print '--------------'   (11,#Col2)
    end-if

    get $PrintDt from company-array(#Pos) end-date

    do Convert-To-DTU-Date($PrintDt, $EndDt)
    do dtu-parse-date($EndDt, #PrintYr, #PrintMo, #PrintDay)
    do Convert-From-DTU-Date($EndDt, $PrintDt)

    get $PrintMMM from month-name(#PrintMo) mm
    move #PrintDay to $PrintDay 09

    get #TaxAmt from company-array(#Pos) tax-amt

    print $PrintMMM  (+1,#Col)
    print $PrintDay  ( 0,+2)
    print #TaxAmt    ( 0,#Col2) edit 999,999,999.99

    ! add up taxes for each month and print a monthly total
    add #TaxAmt to #TaxAmt_Month
    add 1 to #M

    if #M = 4
      print '-'       (+1,#Col2,14) fill

      print $PrintMMM (+1,#Col)
      print 'Total'   ( 0,+2)
      print #TaxAmt_Month ( 0,#Col2) edit 999,999,999.99

      print '-'       (+1,#Col,#FillAmt) fill

      add #TaxAmt_Month to #TaxAmt_Year
      let #TaxAmt_Month = 0
      let #M = 0
    end-if

    add 1 to #Y

  end-while

  add 1 to #X

end-while

print 'Total Tax Liability for '  (+2, 1)
print $Parm_Tax_Year                   ( 0,+1)
print ':'                         ( 0,+1)
print #TaxAmt_Year                ( 0,+1) edit 99,999,999,999.99

new-page

end-procedure


!***********************************************************************
! Procedure:  Init-Company-Array
! Description:
!   This procedure initializes all of the tax amounts stored in
!   the company array, leaving the date ranges intact.
!***********************************************************************
begin-procedure Init-Company-Array

let #Pos = 0
while #Pos <= 47
  put 0 into company-array(#Pos) tax-amt
  add 1 to #Pos
end-while

end-procedure


!***********************************************************************
#Include 'readxlat.sqc'  ! Read-Translate-Table procedure
#Include 'reset.sqc'     ! Reset printer procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datemath.sqc'  ! Routine to perform date math
#Include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Update Process API
#Include 'taxrctl1.sqc'  ! Retrieve run control parameters
