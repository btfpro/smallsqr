!***********************************************************************
!  PER045.SQR:  Faculty Events History                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:43:23                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************
! This report is specifically designed to function in the HRMS         *
! Education & Government database, not the Student Administration      *
! database                                                             *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup31.sqc'

!#define DEBUGX
!#define DEBUGY


begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-heading 10
#include 'stdhdgtr.sqc'
   print $PER045_FAC_MEMBER          (+1,1,24)                            !F-LPARKER-125 (CAMI)
   print $Faculty_Name               (, 26)
   print $Emplid                     (,+2)
   print $PER045_TENHOME_DPT         (+1,1,24)                            !F-LPARKER-125 (CAMI)
   print $Tenure_Home                (,26)
   print $Home_Dept_Name             (,+2)
   print $PER045_TEN_STATUS          (+1,1,24)                            !F-LPARKER-125 (CAMI)
   print $Tenure_Xlate               (,26)
   print $PER045_RANK                (+1,1,24)                            !F-LPARKER-125 (CAMI)
   print $Academic_Rank_Descr        (,26)
   print $PER045_ANNUAL_RT           (+1,1,24)                            !F-LPARKER-125 (CAMI)
   print $Annual_Rate                (,26)
end-heading


begin-procedure Init-Report

  move 'PER045'             to $ReportID
  move 'Faculty Events History' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do REPORT-TRANSLATION

  if $prcs_process_instance = ''
     input $EmplID maxlen=11 'Enter Employee ID' Type=char
     uppercase $EmplID
  else
    do Select-Parameters
  end-if

  if $Emplid = ''
    print $PER045_PARMS_INCOM (+2) center
    show $PER045_PARMS_INCOM
    stop
  end-if

  show 'Report: '  $ReportID
  show 'EmplID: '  $Emplid

  do Get-Employee-Name

  do Rotate-Name
  let $Faculty_Name = $Name

  do Faculty-Empl-Data

end-procedure


begin-procedure Get-Values

   let $language_cd = $PRCS_LANGUAGE_CD

   let $Curr_Language_Cd = $Language_Cd

   let $Emplid = RTRIM(&RUN_CNTL_EG.EMPLID, ' ')

end-procedure


begin-procedure Faculty-Empl-Data

   move '' to $Tenure_Home
   move '' to $Academic_Rank
   move '' to $Tenure_Status

begin-SELECT
TN.EG_TENURE_HOME
TN.EG_ACADEMIC_RANK
TN.TENURE_STATUS
JA.ANNUAL_RT
JA.BUSINESS_UNIT
JA.SETID_DEPT

  let $Tenure_Home   = RTRIM(&TN.EG_TENURE_HOME, ' ')
  let $Academic_Rank = RTRIM(&TN.EG_ACADEMIC_RANK, ' ')
  let $Tenure_Status = RTRIM(&TN.TENURE_STATUS, ' ')
  move &JA.ANNUAL_RT to #annual_rate
  move &JA.BUSINESS_UNIT to $BU
  move &JA.SETID_DEPT to $SetID_Dept

From PS_EG_TENURE_DATA TN,
     PS_JOB JA
WHERE TN.EMPLID = $Emplid
  AND JA.EMPLID =  TN.EMPLID
  AND JA.EFFDT = (SELECT MAX(JA1.EFFDT)
                   FROM PS_JOB JA1
                  WHERE JA1.EMPLID = JA.EMPLID
                    AND JA1.EMPL_RCD = JA.EMPL_RCD)
  AND JA.EMPL_RCD = (SELECT MIN(JA2.EMPL_RCD)
                       FROM PS_JOB JA2
                      WHERE JA2.EMPLID = JA.EMPLID
                        AND JA2.EFFSEQ = JA.EFFSEQ)
  AND JA.EFFSEQ = (SELECT MAX(JA3.EFFSEQ)
                    FROM PS_JOB JA3
                   WHERE JA3.EMPLID = JA.EMPLID
                     AND JA3.EMPL_RCD = JA.EMPL_RCD
                     AND JA3.EFFDT = JA.EFFDT)
end-SELECT

   if $Tenure_Home = ''
      do Faculty-Alt-Empl-Data
   end-if

   move 'TENURE_STATUS' to $FieldName
   move $Tenure_Status  to $FieldValue
   do Read-Translate-Table
   move $XlatLongName to $Tenure_Xlate

   do Get-Rank-Description

   let $Annual_Rate = to_char(#annual_rate)
   let $DeptID = $Tenure_Home
   let $SetID = $SetID_Dept

   do Get-Department-Name-With-SetID
   let $Home_Dept_Name = $DeptName

end-procedure Faculty-Empl-Data


begin-procedure Faculty-Alt-Empl-Data

begin-SELECT
JB.DEPTID
JB.ANNUAL_RT
JB.BUSINESS_UNIT
JB.SETID_DEPT

   let $Tenure_Home     = RTRIM(&JB.DEPTID, ' ')
   move &JB.ANNUAL_RT to #annual_rate
   move &JB.BUSINESS_UNIT to $BU
   move &JB.SETID_DEPT to $SetID_Dept

FROM PS_JOB JB
WHERE JB.EMPLID = $Emplid
  AND JB.EFFDT = (SELECT MAX(JB1.EFFDT)
                   FROM PS_JOB JB1
                  WHERE JB1.EMPLID    = JB.EMPLID
                    AND JB1.EMPL_RCD = JB.EMPL_RCD)
  AND JB.EMPL_RCD = (SELECT MIN(JB2.EMPL_RCD)
                       FROM PS_JOB JB2
                      WHERE JB2.EMPLID = JB.EMPLID
                        AND JB2.EFFSEQ = JB.EFFSEQ)
  AND JB.EFFSEQ = (SELECT MAX(JB3.EFFSEQ)
                    FROM PS_JOB JB3
                   WHERE JB3.EMPLID    = JB.EMPLID
                     AND JB3.EMPL_RCD = JB.EMPL_RCD
                     AND JB3.EFFDT     = JB.EFFDT)
end-SELECT

end-procedure Faculty-Alt-Empl-Data

begin-procedure Process-Main

  do Activities
  do Admin-Posts
  do Committees
  do Education
  do Honors-Awards
  do License-Certs
  do Memberships
  do Presentations
  do Publications
  do Special-Projects
  do Student-Advising
  do Teaching-Responsibilities

end-procedure


begin-procedure Activities
move 1 to #first
begin-SELECT
AC.HP_FAC_ACTV_TYPE  !Pubsec
AC.ACTIVITY_DESCR
AC.FROM_DATE
AC.THRU_DATE
AC.SPONSOR
AC.COMPENSATED
AC.INTERNAL_EXTERNAL
AC.DESCR50
AC.DESCRLONG

  move 'ACTIVITY_TYPE'   to $FieldName
  move &AC.HP_FAC_ACTV_TYPE to $FieldValue
  do Read-Translate-Table
     let $Activity = rtrim($XlatShortName, ' ')

  do Format-DateTime(&AC.FROM_DATE, $Ac_From_Date, {DEFDATE},'','')
  do Format-DateTime(&AC.THRU_DATE, $Ac_Thru_Date, {DEFDATE},'','')

  if &AC.INTERNAL_EXTERNAL = 'I'
     move 'Internal' to $I_E
  else
     move 'External' to $I_E
  end-if

  if #first
    print $per045_ACTIVITY_HDG       (+2,1)
    move 0 to #first
  end-if
  print $per045_Activity_Type        (+1,1) underline
  print $Activity                    (,17)
  print ','                          ()
  print &AC.ACTIVITY_DESCR           (,+2)
  print $per045_From                 (,80)
  print $Ac_From_Date                (,+2)
  print $per045_Thru                 (,103)
  print $Ac_Thru_Date                (,+2)
  print $Per045_sponsor              (+1,1)
  print &AC.SPONSOR                  (,17)
  print $per045_compensated          (,80)
  print &AC.COMPENSATED              ()
  print $I_E                         (,103)
  print $per045_Organization         (+1,1)
  print &AC.DESCR50                  (,+2)
  print $per045_Notes                (+1,1,6)
  print &AC.DESCRLONG                (,8) wrap 116 10

FROM PS_EG_ACTIVITIES AC
WHERE AC.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Admin-Posts
move 1 to #first
begin-SELECT
AD.ADMIN_POST
AD.DESCR100
AD.FROMDATE
AD.END_DATE
AD.REVISION_DT
AD.REASON
AD.SETID
AD.DEPTID
AD.DESCR50
AD.DESCRLONG

  move &AD.ADMIN_POST to $Admin_Post
  let $SetID = &AD.SETID
  let $DeptID = RTRIM(&AD.DEPTID, ' ')

  do Get-Admin-Post-Description
  do Get-Department-Name-With-SetID

  do Format-DateTime(&AD.FROMDATE, $Ad_From_Date, {DEFDATE},'','')
  do Format-DateTime(&AD.END_DATE, $Ad_End_Date, {DEFDATE},'','')
  do Format-DateTime(&AD.REVISION_DT, $Ad_Revision_Date, {DEFDATE},'','')


  if #first
    print $per045_post_app_hdg (+2,1)
    move 0 to #first
  end-if
  print $per045_Type                 (+1,1) underline
  print $Admin_Post_Descr            (,+2)
  print $Post_Type                   (,+2)
  print $per045_Descr                (+1,1)
  print &AD.DESCR100                 (,+2)
  print $per045_Begin_Dt             (+1,1)
  print $Ad_From_Date                (,+1)
  print $per045_End_Date             (,27)
  print $Ad_End_Date                 (,+1)
  print $per045_Rev_End_Date         (,50)
  print $Ad_Revision_Date            (,+1)
  print $per045_Reason               (,81)
  print &AD.REASON                   (,+2)
  print $per045_dept_org1            (+1,1)
  print $DeptID                      (,+2)
  print $DeptName                    (,+2)
  print &AD.DESCR50                  (,+4)
  print $per045_Notes                (+1,1)
  print &AD.DESCRLONG                (, 8) wrap 116 10

FROM PS_EG_ADMIN_POSTS AD
WHERE AD.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Committees
move 1 to #first
begin-SELECT
COM.COMMITTEE_ID
COM.EFFDT
COM.COMMITTEE_MEMBER
COM.COMMITTEE_ROLE
COM.START_DT
COM.END_DT

  do Get-Committee-Descr

  move 'COMMITTEE_ROLE'    to $FieldName
  move &COM.COMMITTEE_ROLE to $FieldValue
  do Read-Translate-Table
  move $XlatLongName to $Role_Descr

  do Format-DateTime(&COM.EFFDT, $Com_Effdt, {DEFDATE},'','')
  do Format-DateTime(&COM.START_DT, $Com_Start_Dt, {DEFDATE},'','')
  do Format-DateTime(&COM.END_DT, $Com_End_Dt, {DEFDATE},'','')

  if #first
    print $PER045_COMMITTEE_HDG (+2,1)
    move 0 to #first
  end-if
  print $per045_Committee_id      (+1,1) underline
  print $Committee_Descr          (,12)
  print $per045_Effdt             (,55)
  print $Com_Effdt                (,71)
  print $per045_Role              (+1,1)
  print $Role_Descr               (,12)
  print $per045_Start_Dt          (,55)
  print $Com_Start_Dt             (,71)
  print $Per045_End_Date          (,85)
  print $Com_End_Dt               (,95)

FROM PS_EG_COMM_MBR_VW COM
WHERE COM.EMPLID = $Emplid
end-SELECT
end-procedure

begin-procedure Get-Committee-Descr
move '' to $Committee_Descr
begin-SELECT
CD.DESCR
  move &CD.DESCR to $Committee_Descr
FROM PS_EG_COMMITTEE CD
WHERE CD.COMMITTEE_ID = &COM.COMMITTEE_ID
end-SELECT
end-procedure


begin-procedure Education
move 1 to #first
begin-SELECT
ED.ACCOMPLISHMENT
ED.DT_ISSUED
ED.EDUCATOR
ED.GRADUATE_INDICATOR
ED.MAJOR
ED.SCHOOL_CODE
ED.SCHOOL
ED.STATE_OTHER
ED.COUNTRY_OTHER
ED.TERMINAL_DEGREE

  let $Major     = RTRIM(&ED.MAJOR, ' ')
  let $School_Ed = RTRIM(&ED.SCHOOL, ' ')
  let $Educator  = RTRIM(&ED.EDUCATOR, ' ')

  do Format-DateTime(&ED.DT_ISSUED, $Date_Acquired, {DEFDATE},'','')

  if #first
    print $per045_PROF_ED_HDG  (+2,1)
    move 0 to #first
  end-if
  print $per045_Degree               (+1,1) underline
  print &ED.ACCOMPLISHMENT           (,9)
  print $per045_Terminal             (,+4)
  print &ED.TERMINAL_DEGREE          (,+1)
  print $per045_Date_Acquired        (,39)
  print $Date_Acquired               (,+1)
  print $per045_Graduated            (,69)
  print &ED.GRADUATE_INDICATOR       (,80)
  print $per045_Major                (+1,1)
  print $Major                       (,9)
  print $per045_School               (,39)
  print $School_Ed                   (,+1)
  if $Educator <> ''
    print $per045_Educator           (+1,1)
    print $Educator                  (,+2)
  end-if
  print &ED.COUNTRY_OTHER            (,+4)
  print &ED.STATE_OTHER              (,+4)

FROM PS_ACCOMPLISHMENTS ED,
     PS_ACCOMP_TBL ACC
WHERE ED.EMPLID = $Emplid
  AND ACC.ACCOMPLISHMENT  = ED.ACCOMPLISHMENT
  AND ACC.ACCOMP_CATEGORY = 'DEG'         !Degree
end-SELECT

  do Get-Training

end-procedure


begin-procedure Honors-Awards
move 1 to #first
begin-SELECT
HA.ACCOMPLISHMENT
HAC.DESCR
HA.GRANTOR
HA.DT_ISSUED
HA.END_DATE

  let $Honor   = RTRIM(&HAC.DESCR, ' ')
  let $Grantor = RTRIM(&HA.GRANTOR, ' ')

  do Format-DateTime(&HA.DT_ISSUED, $Dt_Issued, {DEFDATE},'','')
  do Format-DateTime(&HA.END_DATE, $Ha_End_Date, {DEFDATE},'','')

  if #first
    print $per045_honor_hdg           (+2,1)
    move 0 to #first
  end-if
  print $per045_Honor_Award           (+1,1) underline
  print $Honor                        (,+1)
  print $per045_Grantor               (,45)
  print $Grantor                      (,54)
  print $per045_Issue_Dt              (,77)
  print $Dt_Issued                    (,+1)
  print $per045_End_Date              (,102)
  print $Ha_End_Date                  (,+1)

FROM PS_ACCOMPLISHMENTS HA,
     PS_ACCOMP_TBL HAC
WHERE HA.EMPLID = $Emplid
  AND HAC.ACCOMPLISHMENT   = HA.ACCOMPLISHMENT
  AND HAC.ACCOMP_CATEGORY = 'HON'         !Honors
end-SELECT
end-procedure


begin-procedure License-Certs
move 1 to #first
begin-SELECT
LC.ACCOMPLISHMENT
LCC.DESCR
LC.DT_ISSUED
LC.LICENSE_NBR
LC.ISSUED_BY
LC.EXPIRATN_DT
LC.LICENSE_VERIFIED
LC.RENEWAL
LC.COUNTRY
LC.STATE

  let $License = RTRIM(&LCC.DESCR, ' ')

  do Format-DateTime(&LC.EXPIRATN_DT, $Expire_Date, {DEFDATE},'','')
  do Format-DateTime(&LC.DT_ISSUED, $Lc_Date_Issued, {DEFDATE},'','')


  if #first
    print $PER045_LICENSE_HDG  (+2,1)
    move 0 to #first
  end-if
  print $PER045_License_Certif         (+1,1) underline
  print $License                       (,+1)
  print $PER045_NBR                    (,55)
  print &LC.LICENSE_NBR                (,+1)
  print $PER045_Issue_Dt               (,79)
  print $Lc_Date_Issued                (,+1)
  print $PER045_Issued_by              (+1,1)
  print &LC.ISSUED_BY                  (,+1)
  print $per045_Expires                (,43)
  print $Expire_Date                   (,+1)
  print $PER045_VERIFIED               (,64)
  print &LC.LICENSE_VERIFIED           (,+1)
  print $PER045_RENEWAL                (,79)
  print &LC.RENEWAL                    (,+1)
  print $PER045_Location               (,103)
  print &LC.COUNTRY                    (,+1)
  print &LC.STATE                      (,+1)

FROM PS_ACCOMPLISHMENTS LC,
     PS_ACCOMP_TBL LCC
WHERE LC.EMPLID = $Emplid
  AND LCC.ACCOMPLISHMENT = LC.ACCOMPLISHMENT
  AND LCC.ACCOMP_CATEGORY = 'LIC'
end-SELECT
end-procedure


begin-procedure Memberships
move 1 to #first
begin-SELECT
ME.ACCOMPLISHMENT
MEC.DESCR
ME.DT_ISSUED
ME.MANDATE
ME.MANDATE_FUNCTION
ME.MANDATE_BEGIN_DATE
ME.MANDATE_END_DATE

   let $Membership = RTRIM(&MEC.DESCR, ' ')

  do Format-DateTime(&ME.DT_ISSUED, $Me_Dt_Issued, {DEFDATE},'','')
  do Format-DateTime(&ME.MANDATE_BEGIN_DATE, $Mandate_Begin_Dt, {DEFDATE},'','')
  do Format-DateTime(&ME.MANDATE_END_DATE, $Mandate_End_Date, {DEFDATE},'','')

  if #first
    print $per045_memb_hdg         (+2,1)
    move 0 to #first
  end-if
  print $per045_Membership      (+1,1) underline
  print $Membership             (,+1)
  print $per045_Memb_Date       (,62)
  print $Me_Dt_Issued           (,+1)
  print $per045_Mandate         (+1,1)
  print &ME.MANDATE             (,+1)
  print $per045_Mandate_func    (,27)
  print &ME.MANDATE_FUNCTION    (,+1)
  print $per045_Mandate_Begin   (,62)
  print $Mandate_Begin_Dt       (,+3)
  print $per045_Mandate_End     (,92)
  print $Mandate_End_Date       (,+1)


FROM PS_ACCOMPLISHMENTS ME,
     PS_ACCOMP_TBL MEC
WHERE ME.EMPLID = $Emplid
  AND MEC.ACCOMPLISHMENT = ME.ACCOMPLISHMENT
  AND MEC.ACCOMP_CATEGORY = 'MEM'
end-SELECT
end-procedure


begin-procedure Presentations
move 1 to #first
begin-SELECT
PR.PRESENTATION_TYPE
PR.ACTION_DT
PR.PRESENT_TITLE
PR.DESCR50
PR.LOCATION_DESCR
PR.DESCRLONG

  let $FieldName   = 'PRESENTATION_TYPE'
  let $FieldValue  = &PR.PRESENTATION_TYPE
  do Read-Translate-Table
    let $Presentation = $XlatLongName

  do Format-DateTime(&PR.ACTION_DT, $Action_Dt, {DEFDATE},'','')

  if #first
    print $per045_PRESENT_hdg        (+2,1)
    move 0 to #first
  end-if
  print $Per045_Presentation     (+1,1) underline
  print $Presentation            (,+1)
  print $PER045_Date             (,60)
  print $Action_Dt               (,+1)
  print $PER045_Location         (,80)
  print &PR.LOCATION_DESCR       (,+1)
  print $Per045_Title            (+1,1)
  print &PR.PRESENT_TITLE        (,+1)
  print $per045_Purpose          (,60)
  print &PR.DESCR50              (,+1)
  print $per045_Notes            (+1,1)
  print &PR.DESCRLONG            (,8) wrap 116 10

FROM PS_EG_PRESENTATION PR
WHERE PR.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Publications
move 1 to #first
begin-SELECT
PUB.PUBLICATION_NBR
PUB.PUBLICATION_DT
PUB.PUBL_DT
PUB.DATE_FORMAT
PUB.PUBLICATION_TYPE
PUB.PUBLICATION_NAME
PUB.PUBLICATION_TITLE
PUB.VOLUME
PUB.ISSUE
PUB.PAGE_NBR
PUB.EG_PUBLISHER
PUB.AUTHOR_TYPE
PUB.NOTES

  let $Pub_Nbr = to_char(&PUB.PUBLICATION_NBR)

  move 'PUBLICATION_TYPE'    to $FieldName
  move &PUB.PUBLICATION_TYPE to $FieldValue
  do Read-Translate-Table
  move $XlatLongName         to $Pub_Type

  move 'AUTHOR_TYPE'         to $FieldName
  move &PUB.AUTHOR_TYPE      to $FieldValue
  do Read-Translate-Table
  move $XlatLongName         to $Author_Type


  move 0 to #date_fmt
  if &PUB.DATE_FORMAT = 'Y'
     move &PUB.PUBL_DT to $Pub_Date
     move 1 to #date_fmt
  else
     move &PUB.PUBLICATION_DT to $Pub_Date
  end-if
  if #date_fmt
    do Format-DateTime($Pub_Date, $Pub_Date, {DEFDATE},'','')
  end-if

  if #first
    print $per045_PUBLICATION_hdg        (+2,1)
    move 0 to #first
  end-if
  print $per045_Pub_nbr         (+1,1) underline
  print $Pub_Nbr                (,16)
  print $per045_Type            (,20)
  print $Pub_Type               (,26)
  print $per045_Author_Type     (,60)
  print $Author_Type            (,73)
  print $per045_Title           (+1,1)
  print &PUB.PUBLICATION_TITLE  (,8)
  print $per045_Name            (,60)
  print &PUB.PUBLICATION_NAME   (,66)
  print $per045_Publisher       (+1,1)
  print &PUB.EG_PUBLISHER       (,12)
  print $per045_Date            (+1,1)
  print $Pub_Date               (,7)
  print $per045_Volume          (,20)
  print &PUB.VOLUME             (,28)
  print $per045_Issue           (,40)
  print &PUB.ISSUE              (,47)
  print $per045_Pages           (,59)
  print &PUB.PAGE_NBR           (,68)
  print $per045_Notes           (+1,1)
  print &PUB.NOTES              (,8)  wrap 116 10

FROM PS_PUBLICATIONS PUB
WHERE PUB.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Special-Projects
move 1 to #first
begin-SELECT
SP.DT_COMPLETED
SP.SETID
SP.DEPTID
SP.DESCR50
SP.DESCRLONG

  let $SetID = &SP.SETID
  let $DeptID = RTRIM(&SP.DEPTID, ' ')
  do Get-Department-Name-With-SetID

  do Format-DateTime(&SP.DT_COMPLETED, $Date_Completed, {DEFDATE},'','')

  if #first
    print $PER045_SPEC_PROJ_HDG (+2,1)
    move 0 to #first
  end-if
  print $per045_Date_Completed     (+1,1) underline
  print $Date_Completed            (,+1)
  print $per045_Dept_Org2          (,29)
  print $DeptName                  (,+1)
  print &SP.DESCR50                (,73)
  print $per045_Notes              (+1,1)
  print &SP.DESCRLONG              (, 8) wrap 116 10

FROM PS_EG_SPECIAL_PRJ SP
WHERE SP.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Student-Advising
move 1 to #first
begin-SELECT
SA.EG_STUDENT_NAME
SA.ADVISE_LEVEL
SA.FROM_DATE
SA.THRU_DATE
SA.DESCR100
SA.DATE_DUE
SA.DESCRLONG

  let $Name = RTRIM(&SA.EG_STUDENT_NAME, ' ')
  do Rotate-Name

  let $FieldName  = 'ADVISE_LEVEL'
  let $FieldValue = RTRIM(&SA.ADVISE_LEVEL, ' ')
  do Read-Translate-Table
    let $Level = $XlatLongName

  do Format-DateTime(&SA.FROM_DATE, $Sa_From_Date, {DEFDATE},'','')
  do Format-DateTime(&SA.THRU_DATE, $Sa_Thru_Date, {DEFDATE},'','')
  do Format-DateTime(&SA.DATE_DUE, $Sa_Date_Due, {DEFDATE},'','')

  if #first
    print $PER045_ST_ADV_HDG     (+2,1)
    move 0 to #first
  end-if
  print $per045_Student_Name     (+1,1) underline
  print $Name                    (,+1)
  print $per045_level            (,66)
  print $Level                   (,+1)
  print $per045_from             (+1,1)
  print $Sa_From_Date            (,+1)
  print $per045_Thru             (,+4)
  print $Sa_Thru_Date            (,+1)
  print $per045_Project          (+1,1)
  print &SA.DESCR100             (,+1)
  print $per045_Proj_Due         (+1,1)
  print $Sa_Date_Due             (,+1)
  print $per045_Notes            (+1,1)
  print &SA.DESCRLONG            (, 8) wrap 116 10

FROM PS_EG_ADVISING SA
WHERE SA.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Teaching-Responsibilities
move 1 to #first
begin-SELECT
TR.EG_COURSE_ID
TR.DESCR100
TR.EG_COURSE_TYPE
TR.EG_TERM
TR.CALENDAR_YR
TR.EG_UNITS
TR.EG_TEAM_TAUGHT
TR.PERCENT_RATE
TR.DESCRLONG

  let $FieldName    = 'EG_COURSE_TYPE'
  let $FieldValue   = &TR.EG_COURSE_TYPE
  do Read-Translate-Table
    let $CourseType = $XlatLongName

  if #first
    print $PER045_TEACHING_HDG  (+2,1)
    move 0 to #first
  end-if
  print $PER045_COURSE           (+1,1) underline
  print &TR.EG_COURSE_ID         (,+1)
  print &TR.DESCR100             (,+2)
  print $PER045_COURSETYPE       (+1,1)
  print $CourseType              (,+1)
  print $PER045_UNITS            (,43)
  print &TR.EG_UNITS             (,+1) edit b99
  print $PER045_TERM             (,55)
  print &TR.EG_TERM              (,+1) edit 9
  print $PER045_TEAM             (,65)
  print &TR.EG_TEAM_TAUGHT       (,+1)
  print $PER045_PERCENT          (,+2)
  print &TR.PERCENT_RATE         (,+1) edit b99.99

  do Get-Enrollment

FROM PS_EG_TEACHING TR
WHERE TR.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Get-Enrollment
begin-SELECT
NE.EG_ENROLLED
NE.EG_ENROLL_TYPE

  let $FieldName = 'EG_ENROLL_TYPE'
  let $FieldValue = &NE.EG_ENROLL_TYPE
  do Read-Translate-Table
    let $Enroll_Type = $XlatLongName

  print $PER045_ENROLLED         (+1,1)
  print &NE.EG_ENROLLED          (,+1) edit b999
  print $PER045_TYPE             (,30)
  print $Enroll_Type             (,+1)

FROM PS_EG_TEACH_ENROLL NE
WHERE NE.EMPLID = $Emplid
  AND NE.EG_COURSE_ID = &TR.EG_COURSE_ID
end-SELECT
end-procedure


begin-procedure Get-Rank-Description
begin-SELECT
R.DESCR

  let $Academic_Rank_Descr = RTRIM(&R.DESCR, ' ')

FROM PS_EG_RANK_TBL R
WHERE R.EG_ACADEMIC_RANK = $Academic_Rank
  AND R.EFF_STATUS = 'A'
  AND R.EFFDT = (SELECT MAX(R1.EFFDT)
                   FROM PS_EG_RANK_TBL R1
                  WHERE R1.EG_ACADEMIC_RANK = R.EG_ACADEMIC_RANK
                    AND R1.EFF_STATUS = R.EFF_STATUS
                    AND R1.EFFDT <= $AsOfToday)
end-SELECT
end-procedure


begin-procedure Get-Admin-Post-Description
begin-SELECT
AP.POST_TYPE
AP.DESCR50

  move 'POST_TYPE'   to $FieldName
  move &AP.POST_TYPE to $FieldValue
  do Read-Translate-Table
     move $XlatLongName to $Post_Type

  let $Admin_Post_Descr  = RTRIM(&AP.DESCR50, ' ')

FROM PS_EG_ADM_POST_TBL AP
WHERE AP.ADMIN_POST = $Admin_Post
end-SELECT
end-procedure


begin-procedure Get-Training
begin-SELECT
TR.COURSE_TITLE
TR.SCHOOL
TR.COURSE_START_DT
TR.COURSE_END_DT

  let $Course            = RTRIM(&TR.COURSE_TITLE, ' ')
  let $School_Training   = RTRIM(&TR.SCHOOL, ' ')
  do Format-DateTime(&TR.COURSE_START_DT, $Crse_Start_Dt, {DEFDATE},'','')
  do Format-DateTime(&TR.COURSE_END_DT, $Crse_End_Dt, {DEFDATE},'','')

  print $PER045_TRAINING             (+1,1) underline
  print $Course                      (,+1)
  print $School_Training             (,42)
  print $PER045_START_DT             (,73)
  print $Crse_Start_Dt               (,85)
  print $PER045_END_DATE             (,98)                            !F-LPARKER-125 (CAMI)
  print $Crse_End_Dt                 (,108)

FROM PS_TRAINING TR
WHERE TR.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure REPORT-TRANSLATION

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('PER045', 'ACADEMIC_RANK', $PER045_RANK,          #DW)
  do Get_Field_Information ('PER045', 'ANNUAL_RT',     $PER045_ANNUAL_RT,     #DW)
  do Get_Field_Information ('PER045', 'BEGIN_DT',      $PER045_BEGIN_DT,      #DW)
  do Get_Field_Information ('PER045', 'FAC_MEMBER',    $PER045_FAC_MEMBER,    #DW)
  do Get_Field_Information ('PER045', 'PARMS_INCOMPLT',$PER045_PARMS_INCOM,   #DW)
  do Get_Field_Information ('PER045', 'TEN_HOME_DEPT', $PER045_TENHOME_DPT,   #DW)
  do Get_Field_Information ('PER045', 'TENURE_STATUS', $PER045_TEN_STATUS,    #DW)
  do Get_Field_Information ('PER045', 'TITLE',         $PER045_TITLE,         #DW)
  do Get_Field_Information ('PER045', 'TYPE',          $PER045_TYPE,          #DW)

  do Get_Field_Information ('PER045', 'END_DATE',      $PER045_END_DATE,      #DW)
  do Get_Field_Information ('PER045', 'START_DT',      $PER045_START_DT,      #DW)
  do Get_Field_Information ('PER045', 'TRAINING',      $PER045_TRAINING,      #DW)

  do Get_Field_Information ('PER045', 'COURSE',      $PER045_COURSE,      #DW)
  do Get_Field_Information ('PER045', 'COURSE_TYPE',      $PER045_COURSETYPE,      #DW)
  do Get_Field_Information ('PER045', 'UNITS',      $PER045_UNITS,      #DW)
  do Get_Field_Information ('PER045', 'TERM',      $PER045_TERM,      #DW)
  do Get_Field_Information ('PER045', 'TEAM',      $PER045_TEAM,      #DW)
  do Get_Field_Information ('PER045', 'PERCENT',      $PER045_PERCENT,      #DW)

  do Get_Field_Information ('PER045', 'AUTHOR_TYPE',      $PER045_AUTHOR_TYPE,      #DW)
  do Get_Field_Information ('PER045', 'NAME', $PER045_NAME,      #DW)
  do Get_Field_Information ('PER045', 'HONOR_AWARD',      $PER045_HONOR_AWARD,      #DW)
  do Get_Field_Information ('PER045', 'LOCATION',      $PER045_LOCATION,      #DW)
  do Get_Field_Information ('PER045', 'ISSUE',      $PER045_ISSUE,      #DW)
  do Get_Field_Information ('PER045', 'DATE',      $PER045_DATE,      #DW)
  do Get_Field_Information ('PER045', 'NOTES',      $PER045_NOTES,      #DW)
  do Get_Field_Information ('PER045', 'PRESENTATION',      $PER045_PRESENTATION,      #DW)

  do Get_Field_Information ('PER045', 'PURPOSE', $PER045_PURPOSE,      #DW)
  do Get_Field_Information ('PER045', 'PUBLISHER',      $PER045_PUBLISHER,      #DW)
  do Get_Field_Information ('PER045', 'PUB_NBR',      $PER045_PUB_NBR,      #DW)
  do Get_Field_Information ('PER045', 'PAGES',      $PER045_PAGES,      #DW)
  do Get_Field_Information ('PER045', 'VOLUME',      $PER045_VOLUME,      #DW)
  do Get_Field_Information ('PER045', 'DATE_COMPLETED',      $PER045_DATE_COMPLETED,      #DW)
  do Get_Field_Information ('PER045', 'DEPT_ORG2',      $PER045_DEPT_ORG2,      #DW)

  do Get_Field_Information ('PER045', 'FROM', $PER045_FROM,      #DW)
  do Get_Field_Information ('PER045', 'LEVEL',   $PER045_LEVEL,      #DW)
  do Get_Field_Information ('PER045', 'THRU',    $PER045_THRU,      #DW)
  do Get_Field_Information ('PER045', 'PROJECT', $PER045_PROJECT,      #DW)
  do Get_Field_Information ('PER045', 'PROJ_DUE', $PER045_PROJ_DUE,      #DW)
  do Get_Field_Information ('PER045', 'STUDENT_NAME', $PER045_STUDENT_NAME,      #DW)

  do Get_Field_Information ('PER045', 'MEMB_HDG',      $PER045_MEMB_HDG,      #DW)
  do Get_Field_Information ('PER045', 'PRESENT_HDG',      $PER045_PRESENT_HDG,      #DW)
  do Get_Field_Information ('PER045', 'PUBLICATION_HDG',      $PER045_PUBLICATION_HDG,      #DW)
  do Get_Field_Information ('PER045', 'SPEC_PROJ_HDG', $PER045_SPEC_PROJ_HDG,      #DW)
  do Get_Field_Information ('PER045', 'ST_ADV_HDG', $PER045_ST_ADV_HDG,      #DW)
  do Get_Field_Information ('PER045', 'TEACHING_HDG', $PER045_TEACHING_HDG,      #DW)

  do Get_Field_Information ('PER045', 'MEMBERSHIP', $PER045_MEMBERSHIP,      #DW)
  do Get_Field_Information ('PER045', 'MEMB_DATE',   $PER045_MEMB_DATE,      #DW)
  do Get_Field_Information ('PER045', 'MANDATE',    $PER045_MANDATE,      #DW)
  do Get_Field_Information ('PER045', 'MANDATE_FUNC', $PER045_MANDATE_FUNC,      #DW)
  do Get_Field_Information ('PER045', 'MANDATE_BEGIN', $PER045_MANDATE_BEGIN,      #DW)
  do Get_Field_Information ('PER045', 'MANDATE_END', $PER045_MANDATE_END,      #DW)


  do Get_Field_Information ('PER045', 'COMMITTEE_HDG',      $PER045_COMMITTEE_HDG,      #DW)
  do Get_Field_Information ('PER045', 'COMMITTEE_ID',      $PER045_COMMITTEE_ID,      #DW)
  do Get_Field_Information ('PER045', 'HONOR_HDG',      $PER045_HONOR_HDG,      #DW)
  do Get_Field_Information ('PER045', 'EFFDT', $PER045_EFFDT,      #DW)
  do Get_Field_Information ('PER045', 'VERIFIED', $PER045_VERIFIED,      #DW)
  do Get_Field_Information ('PER045', 'ROLE', $PER045_ROLE,      #DW)

  do Get_Field_Information ('PER045', 'RENEWAL', $PER045_RENEWAL,      #DW)
  do Get_Field_Information ('PER045', 'GRANTOR',   $PER045_GRANTOR,      #DW)
  do Get_Field_Information ('PER045', 'LICENSE_CERTIF',    $PER045_LICENSE_CERTIF,      #DW)
  do Get_Field_Information ('PER045', 'LICENSE_HDG', $PER045_LICENSE_HDG,      #DW)
  do Get_Field_Information ('PER045', 'NBR', $PER045_NBR,      #DW)
  do Get_Field_Information ('PER045', 'ISSUE_DT', $PER045_ISSUE_DT,      #DW)

  do Get_Field_Information ('PER045', 'EXPIRES', $PER045_EXPIRES,      #DW)
  do Get_Field_Information ('PER045', 'ISSUED_BY', $PER045_ISSUED_BY,      #DW)

  do Get_Field_Information ('PER045', 'DEGREE', $PER045_DEGREE,      #DW)
  do Get_Field_Information ('PER045', 'EDUCATOR', $PER045_EDUCATOR,      #DW)
  do Get_Field_Information ('PER045', 'SCHOOL', $PER045_SCHOOL,      #DW)
  do Get_Field_Information ('PER045', 'MAJOR', $PER045_MAJOR,      #DW)
  do Get_Field_Information ('PER045', 'GRADUATED', $PER045_GRADUATED,      #DW)
  do Get_Field_Information ('PER045', 'TERMINAL', $PER045_TERMINAL,      #DW)

  do Get_Field_Information ('PER045', 'DATE_ACQUIRED', $PER045_DATE_ACQUIRED,      #DW)
  do Get_Field_Information ('PER045', 'PROF_ED_HDG', $PER045_PROF_ED_HDG,      #DW)
  do Get_Field_Information ('PER045', 'REASON', $PER045_REASON,      #DW)
  do Get_Field_Information ('PER045', 'DEPT_ORG1', $PER045_DEPT_ORG1,      #DW)
  do Get_Field_Information ('PER045', 'DESCR', $PER045_DESCR,      #DW)
  do Get_Field_Information ('PER045', 'REV_END_DATE', $PER045_REV_END_DATE,      #DW)
  do Get_Field_Information ('PER045', 'POST_APP_HDG', $PER045_POST_APP_HDG,      #DW)

  do Get_Field_Information ('PER045', 'COMPENSATED', $PER045_COMPENSATED,      #DW)
  do Get_Field_Information ('PER045', 'ENROLLED', $PER045_ENROLLED,      #DW)
  do Get_Field_Information ('PER045', 'ACTIVITY_TYPE', $PER045_ACTIVITY_TYPE,      #DW)
  do Get_Field_Information ('PER045', 'SPONSOR', $PER045_SPONSOR,      #DW)
  do Get_Field_Information ('PER045', 'ORGANIZATION', $PER045_ORGANIZATION,      #DW)
  do Get_Field_Information ('PER045', 'ACTIVITY_HDG', $PER045_ACTIVITY_HDG,      #DW)

end-procedure

!***********************************************************************
#include 'egrnctl1.sqc'  !Get run control parameter values             *
#include 'stdapi.sqc'    !Routines to update run status                *
#Include 'reset.sqc'     !Reset printer procedure                      *
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure               *
#Include 'datetime.sqc'  !Routines for date and time formatting        *
#Include 'number.sqc'    !Routines to format numbers                   *
#include 'readxlat.sqc'  !Read Translate Table                         *
#include 'getempnm.sqc'  !Get Employee Name                            *
#include 'rotname1.sqc'  !Rotate Name                                  *
#include 'getdptnm.sqc'  !Get Department Name                          *
#include 'sqrtrans.sqc'  !Get Translation                              *
!***********************************************************************
