!***********************************************************************
!  FGPY007:  Print Standard Form 2806 or Standard Form 3100            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:03:40:52                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
! 5/23/01 - Addded logic to inlcude GVT_JOB.GVT_PAY_PLAN, GVT_JOB.GRADE, GVT_JOB.GVT_STEP
!
!***********************************************************************


#include 'setenv.sqc'      !Set environment

#define Year4      '1'   !Changing year to YYYY
#define DDelimiter '-'   !Changing date separator to dashes

Begin-Setup
#include 'setupdb.sqc'

 Declare Printer
   type = HPLASERJET
   orientation = Landscape
   top-margin = 0.25
   left-margin = 0.25
   font = 5
   point-size = 12
   char-size = 7.2
   line-size = 12

page-size 60 110

End-Setup

Begin-Report

display 'begin report'
do Init-DateTime
do Init-Number
do Get-Current-DateTime
do Init-Report

do Process-Main

do Commit-Transaction
do Stdapi-Term

End-Report


!***********************************************************************
!                                                                      *
!  Function:     Init-Report                                           *
!                                                                      *
!  Description:  Initializes data for the beginning of the report      *
!                processing.                                           *
!                                                                      *
!***********************************************************************
Begin-Procedure Init-Report

move 'FGIRR'                to $ReportID
move 'SF2806/SF3100 Print Program' to $ReportTitle
display $ReportTitle
do Format-DateTime($AsOfToday,$Calendar_YMD, {DEFYMD}, '', '')
let #cur_yr = substr($Calendar_YMD,1,4)

do Stdapi-Init
let $first_page = 'Y'

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Process-Main                                          *
!                                                                      *
!  Description:  Performs the main processing of the program.          *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-Main

create-array name=serv_hist size=100
  field=field8:char=''
  field=field9:char=''
  field=field10:char=''
  field=par_cnt:number=0

create-array name=par_rmks size=50
  field=field11:char:50=''

create-array name=fiscal size=100
  field=field12:char=''
  field=field13:char=''
  field=field14:char=''
  field=field15:char=''

create-array name=irr_rmks size=100
  field=field16:char=''

create-array name=prt_buff size=100
  field=fld8:char=''
  field=fld9:char=''
  field=fld10:char=''
  field=fld11:char=''
  field=fld12:char=''
  field=fld13:char=''
  field=fld14:char=''
  field=fld15:char=''

Create-array name=wrap_array size=25
  field=ColText:char=''

if $prcs_process_instance = ''
  display '********************************'
  display 'Please enter the following data:'
  display '********************************'
  Input $run_emplid 'EmplId'
  Input #run_empl_rcd 'Empl Rcd#'
  Input $run_irr_type 'IRR Type'
  Input $run_effdt 'Effdt'
  Input #run_effseq 'Effseq'
  Input $run_irr_orig 'Original IRR'
  do Process-Select-IRR
else
  do Select-IRR-Run-Control-Data
end-if


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-IRR-Parameters                                 *
!                                                                      *
!  Description:  Select IRR run control variables.                     *
!                                                                      *
!***********************************************************************

Begin-Procedure Select-IRR-Run-Control-Data


Begin-Select

SEL.OPRID
SEL.RUN_CNTL_ID
SEL.EMPLID
SEL.EMPL_RCD
SEL.GVT_IRR_TYPE
SEL.EFFDT
SEL.EFFSEQ
SEL.GVT_IRR_TYPE_S

  let $run_emplid = &sel.emplid
  let #run_empl_rcd = &sel.EMPL_RCD
  let $run_irr_type = &sel.gvt_irr_type
  let $run_effdt = &sel.effdt
  let #run_effseq = &sel.effseq
  let $run_irr_orig = &sel.gvt_irr_type_s

  do Process-Select-IRR

from PS_GVT_IRR_PRT_SEL SEL
where SEL.OPRID       = $prcs_oprid
and   SEL.RUN_CNTL_ID = $prcs_run_cntl_id

End-Select


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Process-Select-IRR                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-Select-IRR

Begin-Select

IRR.EMPLID
IRR.EMPL_RCD
IRR.EFFDT
IRR.EFFSEQ
IRR.GVT_IRR_TYPE
IRR.GVT_IRR_RET_FORM
IRR.GVT_IRR_STATUS
IRR.GVT_IRR_DED_TOT

    display &irr.emplid
    do Process-IRR

from PS_GVT_IRR_CONTROL IRR
where IRR.EMPLID    = $run_emplid
and   IRR.EMPL_RCD = #run_empl_rcd
and   IRR.GVT_IRR_TYPE = $run_irr_type
and   IRR.EFFDT = $run_effdt
and   IRR.EFFSEQ = #run_effseq

End-Select

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Process-IRR                                           *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-IRR

display 'Processing IRR for: ' noline
display &irr.emplid

let #par_rmk_cnt = -1
let #irr_rmk_cnt = -1
let #sh_cnt = 0
let #fin_cnt = -1
let #cum_ded = 0
let #line_cnt = 0
let #prt_cnt1 = 0
let #prt_cnt2 = 0
let #prt_cnt3 = 0
let #prt_cnt4 = 0
clear-array name=serv_hist
clear-array name=par_rmks
clear-array name=fiscal
clear-array name=irr_rmks
clear-array name=prt_buff

if $first_page = 'N'
  new-page
else
  let $first_page = 'N'
end-if

do Select-Header-Data

Evaluate &irr.gvt_irr_type
  when = 'M'  !Military Deposit
    do Select-Military-Deposit-Accts
    do Summarize-Military-Deposit-Amts
    break
  when = 'S'  !Supplemental
    do Retrieve-Orig-IRR
    if $found_irr = 'Y'
      do Select-Fiscal-Data
      do Select-IRR-Remarks
    end-if
    break
  when = 'C'  !Correction?
    do Retrieve-Orig-IRR
    if $found_irr = 'Y'
      do Select-Service-History
      do Select-Fiscal-Data
    end-if
    break
  when-other
    do Select-Service-History

    do Select-Basic-Pay

    do Select-Fiscal-Data

    do Select-LWOP

    do Select-IRR-Remarks

End-evaluate

do Build-Print-Buffer

!*******************************************************************************************
! The following code prints the IRR form and the data which can be replaced with a
! customized version.
!
! Form Print Routines                  Data Print Routines
! ------------------------             -------------------------
! Print-SF2806-Page-Layout             Print-SF2806-Page-Header
! Print-SF3100-Page-Layout             Print-SF2806-Page-Body
! Print-SF3101-Page-Layout             Print-SF3101-Page-Data
! Print-SF2806-1-Page-Layout           Print-SF2806-1-Page-Layout
!*******************************************************************************************
evaluate &irr.gvt_irr_ret_form
  when = 'C'
    if &irr.gvt_irr_type = 'C'
      do Print-SF2806-1-Page-Layout
      do Print-SF2806-1-Page-Data
    else
      do Print-SF2806-Page-Layout
      do Print-SF2806-Page-Header
      do Print-SF2806-Page-Body
    end-if
    break
  when = 'F'
    if &irr.gvt_irr_type = 'C'
      do Print-SF3101-Page-Layout
      do Print-SF3101-Page-Data
    else
      do Print-SF3100-Page-Layout
      do Print-SF3100-Page-Header
      do Print-SF3100-Page-Body
    end-if
    break
  when-other
    break
end-evaluate

do Update-IRR-Control
do Update-Job-Status

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Header-Data                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Header-Data

Begin-Select

E.EMPLID
E.EMPL_RCD
NN.NAME
NID.COUNTRY
NID.NATIONAL_ID_TYPE
NID.NATIONAL_ID
NN.BIRTHDATE
D.DESCR
C.GVT_ADDRESS1
C.GVT_ADDRESS_CITY
C.GVT_ADDRESS_STATE
C.GVT_AGY_LOC_CODE

   display &nn.name
   let $field1 = &nn.name
   Do format-datetime(&nn.birthdate,$out,{defdate},'','')
   let $field2 = $out
   let $field2a = substr($out,1,2)
   let $field2b = substr($out,4,2)
   let $field2c = substr($out,7,2)
   let $field3  = edit(&nid.national_id,'xxx-xx-xxxx')
   let $field3a = substr(&nid.national_id,1,3)
   let $field3b = substr(&nid.national_id,4,2)
   let $field3c = substr(&nid.national_id,6,4)
   let $field4 = &d.descr
   let $field5 = &c.gvt_address1
   let $field6 = rtrim(&c.gvt_address_city, ' ') || ', ' || &c.gvt_address_state
   let $field7 = &c.gvt_agy_loc_code

FROM  PS_GVT_JOB          E,
      PS_GVT_PERS_DATA    NN,
      PS_GVT_PERS_NID     NID,
      PS_GVT_INTRFC_INFO  C,
      PS_COMPANY_TBL      D

WHERE E.EMPLID             = &irr.emplid
and   E.EMPL_RCD          = &irr.EMPL_RCD
and   E.EFFDT              = (SELECT MAX(E1.EFFDT)
                               FROM PS_GVT_JOB E1
                               WHERE E1.EMPLID = E.EMPLID
                               AND   E1.EMPL_RCD = E.EMPL_RCD
                               AND   E1.EFFDT <= &irr.effdt)
and   E.EFFSEQ             = (SELECT MAX(E2.EFFSEQ)
                              FROM PS_GVT_JOB E2
                              WHERE E2.EMPLID = E.EMPLID
                              AND   E2.EMPL_RCD = E.EMPL_RCD
                              AND   E2.EFFDT = E.EFFDT)
and   E.EMPLID             = NN.EMPLID
and   E.EMPL_RCD          = NN.EMPL_RCD
and   E.EFFDT              = NN.EFFDT
and   E.EFFSEQ             = NN.EFFSEQ
and   E.EMPLID             = NID.EMPLID
and   E.EMPL_RCD          = NID.EMPL_RCD
and   E.EFFDT              = NID.EFFDT
and   E.EFFSEQ             = NID.EFFSEQ
and   NID.COUNTRY          = 'USA'
and   NID.NATIONAL_ID_TYPE = 'PR'
AND   E.COMPANY            = D.COMPANY
and   D.EFFDT              = (SELECT MAX(D1.EFFDT)
                            FROM  PS_COMPANY_TBL D1
                            WHERE D1.COMPANY = E.COMPANY
                            AND   D1.EFFDT   <= E.EFFDT)
AND   D.COMPANY            = C.COMPANY
and   C.EFFDT              = (SELECT MAX(C1.EFFDT)
                            FROM  PS_GVT_INTRFC_INFO C1
                            WHERE C1.COMPANY = E.COMPANY
                            AND   C1.EFFDT   <= E.EFFDT)

End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Retrieve-Orig-IRR                                     *
!                                                                      *
!  Description:  Select original IRR that Supplemental refers to       *
!                                                                      *
!***********************************************************************
Begin-Procedure Retrieve-Orig-IRR

let $found_irr = 'N'

Begin-Select

O.EMPLID
O.EMPL_RCD
O.EFFDT             &oirr.effdt
O.EFFSEQ
O.GVT_IRR_TYPE
O.GVT_IRR_RET_FORM
O.GVT_IRR_STATUS
O.GVT_IRR_DED_TOT   &oirr.gvt_irr_ded_tot
O.GVT_IRR_DED_CURYR &oirr.gvt_irr_ded_curyr
O.GVT_ROST_TYPE     &oirr.gvt_rost_type
O.GVT_ROST_SEQ_YR   &oirr.gvt_rost_seq_yr
O.GVT_ROST_PAGE_NO  &oirr.gvt_rost_page_no

   let $found_irr = 'Y'

from PS_GVT_IRR_CONTROL O
where O.EMPLID    = $run_emplid
and   O.EMPL_RCD = #run_empl_rcd
and   O.GVT_IRR_STATUS = 'F'
and   O.GVT_IRR_TYPE = $run_irr_orig
and   O.EFFDT <= $run_effdt


End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Service-History                                *
!                                                                      *
!  Description:  Select all IRR Reportable PARs                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Service-History


evaluate &irr.gvt_irr_type

  when = 'C'
    let $sh_where1 = 'AND A.GVT_STATUS_TYPE=''COR'''
    break
  when = 'S'
    let $sh_where1 = 'AND A.GVT_STATUS_TYPE=''COM'''
    break
  when-other
    let $sh_where1 = 'AND (A.GVT_STATUS_TYPE=''COM'' OR A.GVT_STATUS_TYPE=''COR'')'
    break

end-evaluate

let $locality_pay = 'N'

Begin-Select

A.EMPLID           &sh.emplid
A.EMPL_RCD        &sh.EMPL_RCD
A.EFFDT            &sh.effdt
A.EFFSEQ           &sh.effseq
A.GVT_EFFDT        &sh.gvt_effdt
B.DESCR25          &sh.descr25
A.GVT_COMPRATE     &sh.gvt_comprate
A.GVT_LOCALITY_ADJ &sh.gvt_locality_adj
A.GVT_PAY_PLAN
A.GRADE
A.GVT_STEP

  let #par_rmk_cnt = -1
  MOVE &A.GVT_PAY_PLAN TO $GVT_PAY_PLAN
  let $GVT_PAY_PLAN = ltrim(rtrim($GVT_PAY_PLAN,' '),' ')
  MOVE &A.GRADE TO $GRADE
  let $GRADE = ltrim(rtrim($GRADE,' '),' ')
  MOVE &A.GVT_STEP TO $GVT_STEP
  let $GVT_STEP = ltrim(rtrim($GVT_STEP,' '),' ')
  LET $DISP_VAL = $GVT_PAY_PLAN || '-' || $GRADE || ' ' || 'step' || ' ' || $GVT_STEP
  let $disp_val = ltrim(rtrim($disp_val,' '),' ')
  do Select-PAR-Remarks
  let $base_pay = edit(&sh.gvt_comprate + &sh.gvt_locality_adj,'99,999,999.99')
  if &sh.gvt_locality_adj > 0
    let $base_pay = $base_pay || '*'
    let $locality_pay = 'Y'
  end-if
  Do format-datetime(&sh.gvt_effdt,$out,{defdate},'','')
  let $field8 = $out
  put $field8 &sh.descr25 $base_pay #par_rmk_cnt into serv_hist(#sh_cnt)

  let #sh_cnt = #sh_cnt + 1

FROM PS_GVT_JOB A,
     PS_GVT_NOAC_TBL B,
     PS_RTRMNT_PLAN_TBL R

WHERE A.EMPLID               = &irr.emplid
AND   A.EMPL_RCD            = &irr.EMPL_RCD
[$sh_where1]
AND   A.GVT_NOA_CODE         =B.GVT_NOA_CODE
AND   A.ACTION               =B.ACTION
AND   B.EFFDT                = (SELECT MAX(B1.EFFDT)
                               FROM PS_GVT_NOAC_TBL B1
                               WHERE B1.ACTION = A.ACTION
                               AND B1.GVT_NOA_CODE = A.GVT_NOA_CODE
                               AND B1.EFFDT <= A.EFFDT)
AND   B.GVT_IRR_REPORTABLE   ='Y'
and   A.GVT_RETIRE_PLAN      = R.BENEFIT_PLAN
and   R.PLAN_TYPE            = '70'
and   R.EFFDT                = (SELECT MAX(R2.EFFDT)
                                FROM PS_RTRMNT_PLAN_TBL R2
                                WHERE R2.BENEFIT_PLAN = A.GVT_RETIRE_PLAN
                                AND R2.PLAN_TYPE = '70'
                                AND R2.EFFDT <= A.EFFDT)
and   R.GVT_IRR_RET_FORM     = &irr.gvt_irr_ret_form
ORDER BY A.EFFDT ASC, A.EFFSEQ ASC


End-Select

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-PAR-Remarks                                    *
!                                                                      *
!  Description:  Select all IRR Reportable PAR Remarks                 *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-PAR-Remarks
MOVE 'N' TO $REM_FLAG
Begin-Select

P1.EMPLID
P1.EMPL_RCD
P1.EFFDT
P1.EFFSEQ
P1.GVT_SF50_REMARK
P1.GVT_INSERT_REQD
P1.GVT_REMARK_LINE1
P1.GVT_REMARK_LINE2
P1.GVT_REMARK_LINE3
P1.GVT_REMARK_LINE4
P1.GVT_REMARK_LINE5
P1.GVT_REMARK_LINE6
P1.GVT_REMARK_LINE7
P1.GVT_REMARK_LINE8
P1.GVT_REMARK_LINE9

   MOVE 'Y' TO $REM_FLAG
   if rtrim(&p1.gvt_remark_line1, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line1
      let $prnText = $DISP_VAL || ' ' || $prnText
      do Store-PAR-Remarks
   else
      let $prnText = $DISP_VAL
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line2, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line2
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line3, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line3
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line4, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line4
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line5, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line5
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line6, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line6
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line7, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line7
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line8, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line8
      do Store-PAR-Remarks
   end-if
   if rtrim(&p1.gvt_remark_line9, ' ') <> ''
      let $PrnText = &p1.gvt_remark_line9
      do Store-PAR-Remarks
   end-if

FROM PS_GVT_PAR_REMARKS P1,
     PS_GVT_SF50_RK_TBL P2

WHERE P1.EMPLID = &sh.emplid
AND   P1.EMPL_RCD = &sh.EMPL_RCD
AND   P1.EFFDT = &sh.effdt
AND   P1.EFFSEQ = &sh.effseq
AND   P1.GVT_SF50_REMARK = P2.GVT_SF50_REMARK
AND   P2.GVT_IRR_REPORTABLE='Y'
AND   P2.EFFDT =  (SELECT MAX(P2A.EFFDT)
                   FROM PS_GVT_SF50_RK_TBL  P2A
                   WHERE P2A.GVT_SF50_REMARK = P1.GVT_SF50_REMARK
                   AND   P2A.EFFDT <= P1.EFFDT)

End-Select
IF $REM_FLAG = 'N'
  let $prnText = $DISP_VAL
  do Store-PAR-Remarks
END-IF
MOVE ' ' TO $prnText
End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Store-PAR-Remarks                                       *
!                                                                      *
!  Description:                    *
!                                                                      *
!***********************************************************************
Begin-Procedure Store-PAR-Remarks

      if &irr.gvt_irr_ret_form = 'F'
         let #MaxLineChars = 40
      else
         let #MaxLineChars = 35
      end-if
      do Column-Wrap
      let #j = 0

      While #j < #MaxRows
        get $ColText from wrap_array(#j)
        if rtrim($ColText, ' ') <> ''
          let #par_rmk_cnt = #par_rmk_cnt + 1
          put $ColText into par_rmks(#sh_cnt) field11(#par_rmk_cnt)
        end-if
        let #j = #j + 1
      end-While

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Column-Wrap                                       *
!                                                                      *
!  Description:                    *
!                                                                      *
!***********************************************************************
Begin-Procedure Column-Wrap

clear-array name=wrap_array
let #TextLen = length($PrnText)
let $cr = chr(13)
let $lf = chr(10)
move 0 to #CurrLine
move 1 to #ActChar
let #MaxRows = 25

while #CurrLine < #MaxRows
  move 0 to #CurrChar
  move 0 to #SkipAhead
  while #CurrChar < #MaxLineChars
    let $AscChr = substr($PrnText,#ActChar + #CurrChar,1)
    if (#ActChar + #CurrChar + 1) <= #TextLen
       let $AscChrLA = substr($PrnText,#ActChar + #CurrChar + 1,1)
    else
       break
    end-if

    if $AscChr = $cr or $AscChr = $lf
       subtract 1 from #CurrChar
       add 1 to #SkipAhead
       if $AscChrLA = $cr or $AscChrLA = $lf
          add 1 to #SkipAhead
       end-if
       break
    end-if

    if #CurrChar + 1 = #MaxLineChars and $AscChrLA <> ' ' and (#ActChar + #CurrChar ) <> #TextLen
       move 0 to #MoveBack
       while #MoveBack < #MaxLineChars and $AscChr <> ' '
          add 1 to #MoveBack
          let $AscChr = substr($PrnText,#ActChar + #CurrChar - #MoveBack,1)
       end-while
       if #MoveBack + 1 <> #MaxLineChars
          subtract #MoveBack from #CurrChar
       end-if
       break
    end-if
    add 1 to #CurrChar
  end-while

  add 1 to #CurrChar
  let $ColText = substr($PrnText, #ActChar, #CurrChar)

  put $ColText into wrap_array(#CurrLine)


  add 1 to #CurrLine
  add #CurrChar to #ActChar
  add #SkipAhead to #ActChar

end-while

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Basic-Pay                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Basic-Pay

! Determine if EE had an appt without CSRS/FERS coverage and store Begin and End dates of period
! Determine length of CSRS coverage, if applicable

let $CSRS_end_dt = ''
let $CSRS_start_dt = ''
let $begin_bp_dt = ''
let $end_bp_dt = ''
let $dedstrt_dt = ''

Begin-Select

JB.EFFDT
RT.GVT_IRR_RET_FORM

   if &rt.gvt_irr_ret_form <> 'C' and
      &rt.gvt_irr_ret_form <> 'F'
      if isnull($begin_bp_dt)
        Do format-datetime(&jb.effdt,$out,{defdate},'','')
        let $begin_bp_dt = $out
      end-if
   else
      if &rt.gvt_irr_ret_form = 'C'

         if isnull($CSRS_start_dt)

            do Convert-To-DTU-Date(&jb.effdt, $CSRS_start_dt)

         end-if
      else
         if not isnull($CSRS_start_dt)

            do Convert-To-DTU-Date(&jb.effdt, $CSRS_end_dt)

         end-if
      end-if

      if not isnull($begin_bp_dt) and isnull ($end_bp_dt)
        Do format-datetime(&jb.effdt,$ded_strt_dt,{defdate},'','')
        do Convert-To-DTU-Date(&jb.effdt, $out_dtu)
        do dtu-subtract-days($out_dtu, 1, $end_bp_dtu)
        let $end_bp_dt = substr($end_bp_dtu,6,5) || '-' || substr($end_bp_dtu,1,4)
      end-if

   end-if

FROM PS_GVT_JOB JB,
     PS_RTRMNT_PLAN_TBL RT
WHERE JB.EMPLID = &irr.emplid
AND   JB.EMPL_RCD = &irr.EMPL_RCD
AND   JB.GVT_RETIRE_PLAN      = RT.BENEFIT_PLAN
AND   RT.PLAN_TYPE            = '70'
AND   RT.EFFDT                = (SELECT MAX(R2.EFFDT)
                                FROM PS_RTRMNT_PLAN_TBL R2
                                WHERE R2.BENEFIT_PLAN = JB.GVT_RETIRE_PLAN
                                AND R2.PLAN_TYPE = '70'
                                AND R2.EFFDT <= JB.EFFDT)
ORDER BY JB.EFFDT ASC

End-Select

!Calculate CSRS length of service

if not isnull($CSRS_end_dt)

   do dtu-diff-years($CSRS_end_dt, $CSRS_start_dt, #CSRS_service)

else

   let #CSRS_service = 0

end-if

! Select prior year Basic Pay received during appt. with no CSRS or FERS coverage
let #bp_amt = 0

Begin-Select

BP1.EMPLID
BP1.EMPL_RCD
BP1.GVT_YEAR
SUM(BP1.AMOUNT)      &bp1.tot_amt

   let #bp_amt = #bp_amt + &bp1.tot_amt

FROM PS_GVT_IRR_FIN_DTA BP1
WHERE BP1.GVT_IRR_FIN_CD_TP='B'
AND   BP1.EMPLID = &irr.emplid
AND   BP1.EMPL_RCD = &irr.EMPL_RCD
GROUP BY BP1.EMPLID,BP1.EMPL_RCD,BP1.GVT_YEAR

End-Select

! Select current year Basic Pay (Hourly Reg earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp2.emplid
A.EMPL_RCD           &bp2.empl_rcd
PC.GVT_PAY_YEAR       &bp2.gvt_pay_year
SUM(B.REG_HRLY_EARNS) &bp2.tot_amt

   let #bp_amt = #bp_amt + &bp2.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = &irr.emplid
AND   A.EMPL_RCD = &irr.EMPL_RCD
AND   A.PAY_END_DT <= &irr.effdt
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_REG_HRS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_REG_HRS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Hourly OT earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp3.emplid
A.EMPL_RCD           &bp3.empl_rcd
PC.GVT_PAY_YEAR       &bp3.gvt_pay_year
SUM(B.OT_HRLY_EARNS)  &bp3.tot_amt

   let #bp_amt = #bp_amt + &bp3.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = &irr.emplid
AND   A.EMPL_RCD = &irr.EMPL_RCD
AND   A.PAY_END_DT <= &irr.effdt
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_OT_HRS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_OT_HRS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Salaried Reg earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp4.emplid
A.EMPL_RCD           &bp4.empl_rcd
PC.GVT_PAY_YEAR       &bp4.gvt_pay_year
SUM(B.REG_EARNS)      &bp4.tot_amt

   let #bp_amt = #bp_amt + &bp4.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D,
     PS_EARNINGS_TBL E

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = &irr.emplid
AND   A.EMPL_RCD = &irr.EMPL_RCD
AND   A.PAY_END_DT <= &irr.effdt
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID =  A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN = D.BENEFIT_PLAN
AND   D.PLAN_TYPE  = '70'
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL D1
                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                AND D1.PLAN_TYPE = '70'
                AND D1.EFFDT <= C.EFFDT)
AND  D.GVT_IRR_RET_FORM <> 'C'
AND  D.GVT_IRR_RET_FORM <> 'F'
AND  B.ERNCD_REG_EARNS = E.ERNCD
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                 PS_EARNINGS_TBL E1
                WHERE E1.ERNCD = B.ERNCD_REG_EARNS
                AND   E1.EFFDT <= B.PAY_END_DT)
AND  E.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

! Select current year Basic Pay ( Other earnings) received during appt. with no CSRS or FERS coverage
Begin-Select

A.EMPLID              &bp5.emplid
A.EMPL_RCD           &bp5.empl_rcd
PC.GVT_PAY_YEAR       &bp5.gvt_pay_year
SUM(C.OTH_EARNS)      &bp5.tot_amt

   let #bp_amt = #bp_amt + &bp5.tot_amt

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_PAY_OTH_EARNS C,
     PS_GVT_JOB D,
     PS_RTRMNT_PLAN_TBL E,
     PS_EARNINGS_TBL F

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = &irr.emplid
AND   A.EMPL_RCD = &irr.EMPL_RCD
AND   A.PAY_END_DT <= &irr.effdt
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   B.COMPANY=C.COMPANY
AND   B.PAYGROUP=C.PAYGROUP
AND   B.PAY_END_DT=C.PAY_END_DT
AND   B.OFF_CYCLE=C.OFF_CYCLE
AND   B.PAGE_NUM=C.PAGE_NUM
AND   B.LINE_NUM=C.LINE_NUM
AND   B.SEPCHK=C.SEPCHK
AND   B.ADDL_NBR = C.ADDL_NBR
AND   A.EMPLID = D.EMPLID
AND   A.EMPL_RCD = D.EMPL_RCD
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GVT_JOB D1
                 WHERE D1.EMPLID = A.EMPLID
                 AND   D1.EMPL_RCD = A.EMPL_RCD
                 AND   D1.EFFDT <= A.PAY_END_DT)
AND   D.EFFSEQ = (SELECT MAX(D2.EFFSEQ)
                  FROM PS_GVT_JOB D2
                  WHERE D2.EMPLID =  A.EMPLID
                  AND   D2.EMPL_RCD = A.EMPL_RCD
                  AND   D2.EFFDT = D.EFFDT)
AND   D.GVT_RETIRE_PLAN = E.BENEFIT_PLAN
AND   E.PLAN_TYPE  = '70'
AND   E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL E1
                WHERE E1.BENEFIT_PLAN = D.GVT_RETIRE_PLAN
                AND E1.PLAN_TYPE = '70'
                AND E1.EFFDT <= D.EFFDT)
AND  E.GVT_IRR_RET_FORM <> 'C'
AND  E.GVT_IRR_RET_FORM <> 'F'
AND  C.ERNCD = F.ERNCD
AND  F.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM
                 PS_EARNINGS_TBL F1
                WHERE F1.ERNCD = C.ERNCD
                AND   F1.EFFDT <= B.PAY_END_DT)
AND  F.GVT_IRR_REPORTABLE = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

if #bp_amt <> 0
  let #fin_cnt = #fin_cnt + 1
  let $field12 = 'Base Pay ' || $begin_bp_dt || ' to ' || $end_bp_dt || '--' || edit(#bp_amt,'$$$,$$8.88')
  let $field15 = 'Ded began ' || $ded_strt_dt
  put $field12 $field15 into fiscal(#fin_cnt) field12 field15

end-if

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-LWOP                                           *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-LWOP

! Select prior year Leave without Pay earnings
Begin-Select

L1.EMPLID
L1.EMPL_RCD
L1.GVT_YEAR
SUM(L1.HOURS_PER_YEAR)      &l1.tot_hrs

   if &l1.tot_hrs <> 0
      let #fin_cnt = #fin_cnt + 1
      let $field15 = edit(&l1.tot_hrs,'8888') || ' Hrs LWOP in ' || edit(&l1.gvt_year,'9999')
      put $field15 into fiscal(#fin_cnt) field15
   end-if

FROM PS_GVT_IRR_FIN_DTA L1
WHERE L1.GVT_IRR_FIN_CD_TP    ='L'
AND   L1.GVT_IRR_RET_FORM     = &irr.gvt_irr_ret_form
AND   L1.EMPLID               = &irr.emplid
AND   L1.EMPL_RCD            = &irr.EMPL_RCD
GROUP BY L1.EMPLID,L1.EMPL_RCD,L1.GVT_YEAR

End-Select

! Select current year Leave without Pay earnings
Begin-Select

A.EMPLID              &l2.emplid
A.EMPL_RCD           &l2.empl_rcd
PC.GVT_PAY_YEAR       &l2.gvt_pay_year
SUM(C.OTH_HRS)        &l2.tot_hrs

   if &l2.tot_hrs <> 0
      let #fin_cnt = #fin_cnt + 1
      let $field15 = edit(&l2.tot_hrs,'8888') || ' Hrs LWOP in ' || edit(&l2.gvt_pay_year,'9999')
      put $field15 into fiscal(#fin_cnt) field15
   end-if

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_PAY_OTH_EARNS C,
     PS_GVT_JOB D,
     PS_RTRMNT_PLAN_TBL E,
     PS_EARNINGS_TBL F

WHERE PC.GVT_PAY_YEAR = #cur_yr
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
AND   A.EMPLID = &irr.emplid
AND   A.EMPL_RCD = &irr.EMPL_RCD
AND   A.PAY_END_DT <= &irr.effdt
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   B.COMPANY=C.COMPANY
AND   B.PAYGROUP=C.PAYGROUP
AND   B.PAY_END_DT=C.PAY_END_DT
AND   B.OFF_CYCLE=C.OFF_CYCLE
AND   B.PAGE_NUM=C.PAGE_NUM
AND   B.LINE_NUM=C.LINE_NUM
AND   B.SEPCHK=C.SEPCHK
AND   B.ADDL_NBR = C.ADDL_NBR
AND   A.EMPLID = D.EMPLID
AND   A.EMPL_RCD = D.EMPL_RCD
AND   D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GVT_JOB D1
                 WHERE D1.EMPLID = A.EMPLID
                 AND   D1.EMPL_RCD = A.EMPL_RCD
                 AND   D1.EFFDT <= A.PAY_END_DT)
AND   D.EFFSEQ = (SELECT MAX(D2.EFFSEQ)
                  FROM PS_GVT_JOB D2
                  WHERE D2.EMPLID =  A.EMPLID
                  AND   D2.EMPL_RCD = A.EMPL_RCD
                  AND   D2.EFFDT = D.EFFDT)
AND   D.GVT_RETIRE_PLAN = E.BENEFIT_PLAN
AND   E.PLAN_TYPE  = '70'
AND   E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM
                  PS_RTRMNT_PLAN_TBL E1
                WHERE E1.BENEFIT_PLAN = D.GVT_RETIRE_PLAN
                AND E1.PLAN_TYPE = '70'
                AND E1.EFFDT <= D.EFFDT)
AND  E.GVT_IRR_RET_FORM = &irr.gvt_irr_ret_form
AND  C.ERNCD = F.ERNCD
AND  F.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM
                 PS_EARNINGS_TBL F1
                WHERE F1.ERNCD = C.ERNCD
                AND   F1.EFFDT <= B.PAY_END_DT)
AND  F.GVT_IRR_LWOP = 'Y'

GROUP BY A.EMPLID, A.EMPL_RCD, PC.GVT_PAY_YEAR

End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Fiscal-Data                                    *
!                                                                      *
!  Description:  Select accumulated financial history                  *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Fiscal-Data

let #cum_ded = 0

! Get previous year retirement deductions
Begin-Select

F1.EMPLID
F1.EMPL_RCD
F1.GVT_YEAR
F1.AMOUNT
F1.EMPL_PCT

   if &irr.gvt_irr_type = 'S' or &irr.gvt_irr_type = 'C'
      let #cum_ded = #cum_ded + &f1.amount
   else
      let $field13 = edit(&f1.amount,'99,999,999.99')
      let #cum_ded = #cum_ded + &f1.amount
      let $field14 = edit(#cum_ded,'99,999,999.99')
      let $field12 = to_char(&f1.gvt_year)
      if &f1.empl_pct <> 0
         let $field15 = edit(&f1.empl_pct,'88.88') || '% Ded'
      else
         let $field15 = ' '
      end-if
      let #fin_cnt = #fin_cnt + 1
      put $field12 $field13 $field14 $field15 into fiscal(#fin_cnt)


   end-if

FROM PS_GVT_IRR_FIN_DTA F1

WHERE F1.GVT_IRR_FIN_CD_TP    = 'D'
AND   F1.GVT_IRR_RET_FORM     = &irr.gvt_irr_ret_form
AND   F1.EMPLID               = &irr.emplid
AND   F1.EMPL_RCD            = &irr.EMPL_RCD
ORDER BY F1.GVT_YEAR ASC

End-Select

! Get current year retirement deductions
let #curyr_ded = 0

Begin-Select

B.EMPLID
B.EMPL_RCD
A.GVT_PAY_YEAR  &f2.gvt_pay_year
MAX(E.EMPL_PCT) &f2.empl_pct
SUM(C.DED_CUR)  &f2.amt

  !If correction IRR, print difference between current total and original IRR total
  if &irr.gvt_irr_type = 'S'
     let #cum_ded = #cum_ded + &f2.amt
     let #cur_yr_ded =  &f2.amt
     let $field13 = edit(#cum_ded - &oirr.gvt_irr_ded_tot,'99,999,999.99')
     let $field14 = $field13
     let $field12 = to_char(#cur_yr)
     let #fin_cnt = #fin_cnt + 1
     put $field12 $field13 $field14 into fiscal(#fin_cnt) field12 field13 field14
  else
     if  &irr.gvt_irr_type = 'C'
        let #cum_ded = #cum_ded + &f2.amt
        let #cur_yr_ded = &f2.amt
        let #over_curyr =  &oirr.gvt_irr_ded_curyr - #cur_yr_ded
        let #over_cum =  &oirr.gvt_irr_ded_tot - #cum_ded
        let #fin_cnt = #fin_cnt + 1
     else
        let $field13 = edit(&f2.amt,'99,999,999.99')
        let #cum_ded = #cum_ded + &f2.amt
        let #cur_yr_ded = &f2.amt
        let $field14 = edit(#cum_ded,'99,999,999.99')
        let $field12 = to_char(&f2.gvt_pay_year)
        if &f2.empl_pct <> 0
           let $field15 = edit(&f2.empl_pct,'88.88') || '% Ded'
        end-if
        let #fin_cnt = #fin_cnt + 1
        put $field12 $field13 $field14 $field15 into fiscal(#fin_cnt)

     end-if
  end-if

FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B,
     PS_PAY_DEDUCTION C,
     PS_DEDUCTION_TBL D,
     PS_RTRMNT_PLAN_TBL E

WHERE
     A.GVT_PAY_YEAR = #cur_yr
AND  B.COMPANY = A.COMPANY
AND  B.PAYGROUP = A.PAYGROUP
AND  B.PAY_END_DT = A.PAY_END_DT
AND  B.EMPLID = &irr.emplid
AND  B.EMPL_RCD = &irr.EMPL_RCD
AND  B.PAY_END_DT <= &irr.effdt
AND  C.COMPANY = B.COMPANY
AND  C.PAYGROUP = B.PAYGROUP
AND  C.PAY_END_DT = B.PAY_END_DT
AND  C.PAGE_NUM = B.PAGE_NUM
AND  C.LINE_NUM = B.LINE_NUM
AND  C.SEPCHK = B.SEPCHK
AND  C.PLAN_TYPE = '70'
AND  C.DED_CLASS <= 'K'
AND  D.PLAN_TYPE = C.PLAN_TYPE
AND  D.DEDCD = C.DEDCD
AND  D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM PS_DEDUCTION_TBL D1
                WHERE D1.PLAN_TYPE=D.PLAN_TYPE
                AND   D1.DEDCD = D.DEDCD
                AND   D1.EFFDT <= C.PAY_END_DT)
AND  (D.GVT_REPORTING_CD = 'CS'
OR    D.GVT_REPORTING_CD = 'CO'
OR    D.GVT_REPORTING_CD = 'FE'
OR    D.GVT_REPORTING_CD = 'FH'
OR    D.GVT_REPORTING_CD = 'FO'
OR    D.GVT_REPORTING_CD = 'FR'
OR    D.GVT_REPORTING_CD = 'FS'
OR    D.GVT_REPORTING_CD = 'PR')
AND  C.PLAN_TYPE = E.PLAN_TYPE
AND  C.BENEFIT_PLAN = E.BENEFIT_PLAN
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM PS_RTRMNT_PLAN_TBL E1
                WHERE E1.PLAN_TYPE = C.PLAN_TYPE
                AND   E1.BENEFIT_PLAN = C.BENEFIT_PLAN
                AND   E1.EFFDT <= C.PAY_END_DT)
AND  E.GVT_IRR_RET_FORM = &irr.gvt_irr_ret_form
GROUP BY B.EMPLID, B.EMPL_RCD, A.GVT_PAY_YEAR, E.EMPL_PCT

End-Select

let $field12 = 'DEDUCTIONS AND SERVICE'
let #fin_cnt = #fin_cnt + 1
put $field12 into fiscal(#fin_cnt) field12
let $field12 = 'CERTIFIED CORRECT'
let #fin_cnt = #fin_cnt + 1
put $field12 into fiscal(#fin_cnt) field12

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-IRR-Remarks                                    *
!                                                                      *
!  Description:  Select IRR specific remarks                           *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-IRR-Remarks

Begin-Select

RMK.GVT_IRR_REMARK

    do Select-IRR-Remark-Seq

    !Format remarks to fit column width and store in array
    let #MaxLineChars = 90
    let $PrnText = $tmp_irr_rmk
    do Column-Wrap
    let #j = 0

    While #j < #MaxRows
       get $ColText from wrap_array(#j)
       if rtrim($ColText, ' ') <> ''
         let #irr_rmk_cnt = #irr_rmk_cnt + 1
         put $ColText into irr_rmks(#irr_rmk_cnt) field16
       end-if
       let #j = #j + 1
    end-While

FROM PS_GVT_IRR_REMARKS RMK

WHERE RMK.EMPLID = &irr.emplid
AND   RMK.EMPL_RCD = &irr.EMPL_RCD
AND   RMK.GVT_IRR_TYPE = &irr.gvt_irr_type
AND   RMK.EFFDT = &irr.effdt

End-Select

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-IRR-Remark-Seq                                 *
!                                                                      *
!  Description:  Select IRR specific remark segments                   *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-IRR-Remark-Seq

let $tmp_irr_rmk = ''

Begin-Select

R1.EMPLID
R1.EMPL_RCD
R1.GVT_IRR_TYPE
R1.EFFDT
R1.GVT_IRR_REMARK
R1.SEQ_NO
R1.GVT_RMK_VAL_TEXT
R1.GVT_RMK_VAL_DATE
R1.GVT_RMK_VAL_NBR
R2.GVT_IRR_RK_TYPE
R2.GVT_RMK_FIELD_TYPE
R2.GVT_RMK_VAL_TEXT

  if &r2.gvt_irr_rk_type = 'E'
    if &r2.gvt_rmk_field_type = 'T'
      let $tmp_irr_rmk =  rtrim($tmp_irr_rmk,' ') || ' ' || &r1.gvt_rmk_val_text
    end-if
    if &r2.gvt_rmk_field_type = 'D'
      Do format-datetime(&r1.gvt_rmk_val_date,$out,{defdate},'','')
      let $tmp_irr_rmk =  rtrim($tmp_irr_rmk,' ') || ' ' || $out
    end-if
    if &r2.gvt_rmk_field_type = 'N'
      let $tmp_irr_rmk = rtrim($tmp_irr_rmk,' ') || ' ' || to_char(&r1.gvt_rmk_val_nbr)
    end-if
  end-if

  if &r2.gvt_irr_rk_type = 'T'
    let $tmp_irr_rmk = rtrim($tmp_irr_rmk,' ') || ' ' || &r2.gvt_rmk_val_text
  end-if


FROM PS_GVT_IRR_RMK_VAL R1,
     PS_GVT_IRR_RK_FMT  R2

WHERE R1.EMPLID = &irr.emplid
AND   R1.EMPL_RCD = &irr.EMPL_RCD
AND   R1.GVT_IRR_TYPE = &irr.gvt_irr_type
AND   R1.EFFDT = &irr.effdt
AND   R1.GVT_IRR_REMARK = &rmk.gvt_irr_remark
AND   R2.GVT_IRR_REMARK = R1.GVT_IRR_REMARK
AND   R2.SEQ_NO = R1.SEQ_NO
AND   R2.EFFDT = (SELECT MAX(R2A.EFFDT)
                  FROM PS_GVT_IRR_RK_FMT  R2A
                  WHERE R2A.GVT_IRR_REMARK = R1.GVT_IRR_REMARK
                  AND   R2A.SEQ_NO = R1.SEQ_NO
                  AND   R2A.EFFDT <= R1.EFFDT)

End-Select


End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Military-Deposit-Accts                         *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Military-Deposit-Accts

let #par_rmk_cnt = -1
let $field8 = 'MILITARY SERVICE HISTORY AND DEPOSIT RECORD'
put $field8 #par_rmk_cnt into serv_hist(#sh_cnt) field8 par_cnt
let #sh_cnt = #sh_cnt + 1

Begin-Select

MD1.GVT_SRV_AGENCY
MD1.FROM_DATE
MD1.THRU_DATE
SUM(MD2.TRANS_AMT)  &md1.tot_deposit

    Do format-datetime(&md1.from_date,$out,{defdate},'','')
    let $frm_dt = $out
    Do format-datetime(&md1.thru_date,$out,{defdate},'','')
    let $thru_dt = $out
    let $fieldname = 'GVT_SRV_AGENCY'
    let $fieldvalue = &md1.gvt_srv_agency
    do Read-Translate-Table
    let $field8 = $frm_dt || ' to ' || $thru_dt || ' ' || $xlatshortname
    let #par_rmk_cnt = -1
    put $field8 #par_rmk_cnt into serv_hist(#sh_cnt) field8 par_cnt
    let #sh_cnt = #sh_cnt + 1

    let $field8 = '(Deposit paid in full ' || edit(&md1.tot_deposit,'99,999,999.99') || ')'
    let #par_rmk_cnt = -1
    put $field8 #par_rmk_cnt into serv_hist(#sh_cnt) field8 par_cnt
    let #sh_cnt = #sh_cnt + 1

from PS_GVT_SVCDEP_TBL MD1,
     PS_GVT_SVCTRN_TBL MD2
where MD1.EMPLID    = &irr.emplid
and   MD1.EMPL_RCD = &irr.EMPL_RCD
and   MD1.SEQ_NO    = &irr.effseq
and   MD1.EMPLID    = MD2.EMPLID
and   MD1.EMPL_RCD = MD2.EMPL_RCD
and   MD1.SEQ_NO    = MD2.SEQ_NO
and   MD2.GVT_TRANS_TYPE in ('U','S')
group by MD1.GVT_SRV_AGENCY, MD1.FROM_DATE, MD1.THRU_DATE


End-Select

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Summarize-Military-Deposit-Amts                       *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Summarize-Military-Deposit-Amts

let #md_yr_amt = 0
let #cum_ded = 0
let #prev_tran_yr = 0

Begin-Select

MD2.TRANS_DT
MD2.TRANS_AMT

   Do format-datetime(&md2.trans_dt,$out,{defcmp},'','')
   display $out
   let #tran_yr = substr($out,1,4)

   if #tran_yr = #prev_tran_yr or #prev_tran_yr = 0
      let #md_yr_amt = #md_yr_amt + &md2.trans_amt
      let #cum_ded = #cum_ded + &md2.trans_amt
      let #prev_tran_yr = #tran_yr
   else

      let #fin_cnt = #fin_cnt + 1
      let $field12 = edit(#prev_tran_yr,'9999')
      let $field13 = edit(#md_yr_amt,'99,999,999.99')
      let $field14 = edit(#cum_ded,'99,999,999.99')
      put $field12 $field13 $field14 into fiscal(#fin_cnt) field12 field13 field14
      let #prev_tran_yr = #tran_yr
      let #md_yr_amt = &md2.trans_amt
      let #cum_ded = #cum_ded + &md2.trans_amt
   end-if


from PS_GVT_SVCTRN_TBL MD2
where MD2.EMPLID    = &irr.emplid
and   MD2.EMPL_RCD = &irr.EMPL_RCD
and   MD2.SEQ_NO    = &irr.effseq
and   MD2.GVT_TRANS_TYPE in ('U','S')
order by MD2.TRANS_DT ASC

End-Select

!store last entry
let #fin_cnt = #fin_cnt + 1
let $field12 = edit(#prev_tran_yr,'9999')
let $field13 = edit(#md_yr_amt,'99,999,999.99')
let $field14 = edit(#cum_ded,'99,999,999.99')
put $field12 $field13 $field14 into fiscal(#fin_cnt) field12 field13 field14
let $field12 = 'DEPOSIT FOR MILITARY SERVICE'
let #fin_cnt = #fin_cnt + 1
put $field12 into fiscal(#fin_cnt) field12
let $field12 = 'CERTIFIED CORRECT'
let #fin_cnt = #fin_cnt + 1
put $field12 into fiscal(#fin_cnt) field12


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Build-Print-Buffer                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Build-Print-Buffer

let #buff_cnt = -1

While #prt_cnt1 < #sh_cnt

! Store Service History
   get $field8 $field9 $field10 #par_cnt from serv_hist(#prt_cnt1)
   let $fld8 = $field8
   let $fld9 = $field9
   let $fld10 = $field10
   let #buff_cnt = #buff_cnt + 1
   put $fld8 $fld9 $fld10 into prt_buff(#buff_cnt) fld8 fld9 fld10

   let #prt_cnt2 = 0
   While #prt_cnt2 <= #par_cnt

!Store Par Remarks

     get $field11 from par_rmks(#prt_cnt1) field11(#prt_cnt2)
     let $fld11 = translate($field11,chr(13),' ')
     put $fld11 into prt_buff(#buff_cnt) fld11
     if #prt_cnt2 < #par_cnt
       let #buff_cnt = #buff_cnt + 1
     end-if
     let #prt_cnt2 = #prt_cnt2 + 1

   end-While

   let #prt_cnt1 = #prt_cnt1 + 1

end-While

let #sh_buff_line = #buff_cnt
let #buff_cnt = -1

While #prt_cnt3 <= #fin_cnt

!Store fiscal data
     get $field12 $field13 $field14 $field15 from fiscal(#prt_cnt3)

     let $fld12 = $field12
     let $fld13 = $field13
     let $fld14 = $field14
     let $fld15 = $field15
     let #buff_cnt = #buff_cnt + 1
     put $fld12 $fld13 $fld14 $fld15 into prt_buff(#buff_cnt) fld12 fld13 fld14 fld15

     let #prt_cnt3 = #prt_cnt3 + 1

end-While
let #fiscal_buff_line = #buff_cnt

!Store IRR Remarks
let #buff_cnt = #sh_buff_line + 1
if $locality_pay = 'Y'
  let $fld8 = '  * INCLUDE INTERIM GEO ADJ - P.L. 101-509'
  put $fld8 into prt_buff(#buff_cnt) fld8
end-if

While #prt_cnt4 <= #irr_rmk_cnt

  get $field16 from irr_rmks(#prt_cnt4)
  let #buff_cnt = #buff_cnt + 1
  let $fld8 = '  ' || $field16
  put $fld8 into prt_buff(#buff_cnt) fld8
  let #prt_cnt4 = #prt_cnt4 + 1

end-While
let #sh_buff_line = #buff_cnt

if #sh_buff_line > #fiscal_buff_line
  let #max_buff_line = #sh_buff_line
else
  let #max_buff_line = #fiscal_buff_line
end-if

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Update-IRR-Control                                    *
!                                                                      *
!  Description:   Update Status to 'Final'                             *
!                 Record Current Yr and Total Deductions               *
!                                                                      *
!***********************************************************************
Begin-Procedure Update-IRR-Control

Begin-SQL ON-ERROR = SQL-Error

UPDATE PS_GVT_IRR_CONTROL
SET GVT_IRR_STATUS = 'F',
    GVT_IRR_DED_CURYR = #cur_yr_ded,
    GVT_IRR_DED_TOT = #cum_ded

WHERE EMPLID = &irr.emplid
AND   EMPL_RCD = &irr.EMPL_RCD
AND   GVT_IRR_TYPE = &irr.gvt_irr_type
AND   EFFDT = &irr.effdt
AND   EFFSEQ = &irr.effseq

End-SQL

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Update-Job-Status                                     *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Update-Job-Status

if &irr.gvt_irr_type <> 'P' and &irr.gvt_irr_type <> 'M'

Begin-Select

A.EFFDT
A.EFFSEQ

    do Change-Status-To-IRR

from  PS_GVT_JOB A,
      PS_RTRMNT_PLAN_TBL R
where A.EMPLID          = &irr.emplid
and   A.EMPL_RCD       = &irr.EMPL_RCD
and   (A.GVT_STATUS_TYPE='COM' OR A.GVT_STATUS_TYPE='COR')
and   A.GVT_RETIRE_PLAN = R.BENEFIT_PLAN
and   R.PLAN_TYPE       = '70'
and   R.EFFDT           = (SELECT MAX(R2.EFFDT)
                                     FROM PS_RTRMNT_PLAN_TBL R2
                                     WHERE R2.BENEFIT_PLAN = A.GVT_RETIRE_PLAN
                                     AND R2.PLAN_TYPE = '70'
                                     AND R2.EFFDT <= A.EFFDT)
and   R.GVT_IRR_RET_FORM= &irr.gvt_irr_ret_form

End-Select

end-if

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Change-Status-To-IRR                                  *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Change-Status-To-IRR

Begin-SQL ON-ERROR = SQL-Error

UPDATE PS_GVT_JOB
SET GVT_STATUS_TYPE = 'IRR',
    GVT_WIP_STATUS = 'IRR'
WHERE EMPLID    = &irr.emplid
AND   EMPL_RCD = &irr.EMPL_RCD
AND   EFFDT     = &a.effdt
AND   EFFSEQ    = &a.effseq

End-SQL


End-Procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routine for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Routines for Platform portable commit
#include 'fgpy007f.sqc'  !SF-2806, SF-3100 form layouts
#include 'fgpy007p.sqc'  !SF-2806, SF-3100 data print routines

