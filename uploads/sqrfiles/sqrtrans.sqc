! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  SQRTrans:  Translate SQR strings to given language                  *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
! This SQC file contains the procedures that will allow SQR reports    *
! to be generated for different languages.                             *
! Of the procedures that are defined here, only the following should   *
! be called outside of this SQC:                                       *
!   Init_Report_Translation                                            *
!   Get_Field_Information                                              *
!   Append_Report_Translation                                          *
!   Add_Report_Translation                                             *
!***********************************************************************


!***********************************************************************
! Procedure Init_Report_Translation                                    *
!   Initialize data structures needed for subsequent retrieval of      *
!   SQR string information                                             *
!***********************************************************************
#ifndef SQR_Strings_Array_Size
   #define SQR_Strings_Array_Size 350
#endif


begin-procedure Init_Report_Translation ($Report_ID, $Report_Language)
#ifdef debugx
  display 'Entering SQRTRANS.SQC: Init_Report_Translation'
  display ' Input $Report_ID: ' noline
  display $Report_ID
  display ' Input $Report_Language: ' noline
  display $Report_Language
#endif
  !*********************************************************************
  ! Set the global variables for later use                             *
  !*********************************************************************
  let $_SQR_Report_Language = rpad($Report_Language, 3, ' ')

  begin-select
LANGUAGE_CD  &PSOPT_LANG_CD

  let $_SQR_Default_Language = rpad(&PSOPT_LANG_CD, 3, ' ')

    FROM PSOPTIONS
  end-select

  #ifdef debugx
    #ifdef debugy
      display '  $SQR_Report_Language: ' noline
      display $_SQR_Report_Language
      display '  $SQR_Default_Language: ' noline
      display $_SQR_Default_Language
    #endif
  #endif
  !*********************************************************************
  ! Create the array of strings, and use the select to build it        *
  !*********************************************************************

  if $_array_created = ''
    create-array name=strings size={SQR_Strings_Array_Size}
      field=report_id:char
      field=string_id:char
      field=deflabel:number
      field=label_id:char
      field=text:char
      field=colwidth:number
    let $_array_created = 'Y'
  end-if

  if $_SQR_Report_Language = $_SQR_Prev_Language
    do Check_Report_Exists($Report_ID)
  end-if

  let $_Program_Read = 'N'
  if $_SQR_Report_Language <> $_SQR_Prev_Language or $_Report_Not_Found = 'Y'
    clear-array name=strings
    let #array_element = 0
    let $_Program_Read = 'Y'
    let $_SQR_Prev_Language=$_SQR_Report_Language
    do Get_Strings ($Report_ID, #array_element)
  end-if

!  let #array_element = 0

!  do Get_Strings ($Report_ID, #array_element)

#ifdef debugx
  #ifdef debugy
    display '  $SQR_Prev_Language: ' noline
    display $_SQR_Prev_Language
    display '  $Array_Created: ' noline
    display $_array_created
    display '  $Program_Read: ' noline
    display $_Program_Read
    do Dump_Array_Data
  #endif
  display 'Exiting SQRTRANS.SQC: Init_Report_Translation'
#endif
end-procedure


!***********************************************************************
! Procedure Get_Field_Information                                      *
!   Retrieve the information for a given field.                        *
!   Note that at the present time, we cannot assume that the array is  *
!   sorted (the caller could have done an append, for example).        *
!***********************************************************************
begin-procedure Get_Field_Information ($Report_ID, $Field_ID, :$Field_Text, :#Field_Width)
#ifdef debugx
  display 'Entering SQRTRANS.SQC: Get_Field_Information'
  display ' Input $Report_ID: ' noline
  display $Report_ID
  display ' Input $Field_ID: ' noline
  display $Field_ID
#endif

  let $Field_Text = ''
  let #Field_Width = 0
  let $Report_ID = rtrim($Report_ID, ' ')
  let $Field_ID = rtrim($Field_ID, ' ')

  move 0 to #done
  move 0 to #strings_index

  while not #done
    if ((strings.string_id(#strings_index) = $Field_ID) and
        (strings.report_id(#strings_index) = $Report_ID))
      let $Field_Text = strings.text(#strings_index)
      let #Field_Width = strings.colwidth(#strings_index)
      !*****************************************************************
      ! Truncate the text if the width is shorter                      *
      !*****************************************************************
      let #Field_Text_Len = length($Field_Text)
      if #Field_Width < #Field_Text_Len
        #ifdef debugx
          #ifdef debugy
            display '  Returned field text truncated, width less than length'
            display '   Width: ' noline
            display #Field_Width
            display '   FIeld text length: ' noline
            display #Field_Text_Len
          #end-if
        #end-if
        let $Field_Text = substr($Field_Text, 1, #Field_Width)
      end-if
      move 1 to #done
    else                                             ! No match
      add 1 to #strings_index
      if #strings_index > #_Strings_Array_Size       ! End of array, exit
        move 1 to #done
      end-if
    end-if
  end-while

#ifdef debugx
  #ifdef debugy
    display '  #strings_index: ' noline
    display #strings_index
  #endif
  display 'Exiting SQRTRANS.SQC: Get_Field_Information'
  display ' Output $Field_Text: ' noline
  display $Field_Text
  display ' Output #Field_Width: ' noline
  display #Field_Width
#endif
end-procedure


!***********************************************************************
! Procedure Append_Report_Translation                                  *
!   Append SQR string information to the existing data structures for  *
!   a given report ID.                                                 *
!***********************************************************************
begin-procedure Append_Report_Translation ($Report_ID)
#ifdef debugx
  display 'Entering SQRTRANS.SQC: Append_Report_Translation'
  display ' Input $Report_ID: ' noline
  display $Report_ID
#endif

!  let $Report_Not_Found = 'Y'

!  let #temp_index = 0
!  while ((#temp_index <= #_Strings_Array_Size) and ($Report_Not_Found = 'Y'))
!    if strings.report_id(#temp_index) = $Report_ID
!      let $Report_Not_Found = 'N'
!    end-if
!    add 1 to #temp_index
!  end-while
  do Check_Report_Exists($Report_ID)

  let $_Program_Read = 'N'
  if $_Report_Not_Found = 'Y'
    let #array_element = #_Strings_Array_Size + 1
    let $_Program_Read='Y'
    do Get_Strings ($Report_ID, #array_element)
  end-if

#ifdef debugx
  #ifdef debugy
    display '  $Program_Read: ' noline
    display $_Program_Read
    do Dump_Array_Data
  #endif
  display 'Exiting SQRTRANS.SQC: Append_Report_Translation'
#endif
end-procedure


!***********************************************************************
! Procedure Check_Report_Exists                                        *
!   Checks to see if a given report id has already been read into the  *
!   array.                                                             *
!***********************************************************************
begin-procedure Check_Report_Exists ($Report_ID)
#ifdef debugx
  display 'Entering SQRTRANS.SQC: Check_Report_Exists'
  display ' Input $Report_ID: ' noline
  display $Report_ID
#endif

  let $_Report_Not_Found = 'Y'

  let #temp_index = 0
  while ((#temp_index <= #_Strings_Array_Size) and ($_Report_Not_Found = 'Y'))
    if strings.report_id(#temp_index) = $Report_ID
      let $_Report_Not_Found = 'N'
    end-if
    add 1 to #temp_index
  end-while

#ifdef debugx
  #ifdef debugy
    display '  $Report_Not_Found: ' noline
    display $_Report_Not_Found
  #endif
  display 'Exiting SQRTRANS.SQC: Check_Report_Exists'
#endif
end-procedure


!***********************************************************************
! Procedure Add_Report_Translation                                     *
!   Add the SQR strings information for the given report ID.  This     *
!   procedure will determine if it needs to initialize the structures  *
!   or just append to the existing structures.                         *
!***********************************************************************
begin-procedure Add_Report_Translation($Report_ID, $Report_Language)
#ifdef debugx
  display 'Entering SQRTRANS.SQC: Add_Report_Translation'
  display ' Input $Report_ID: ' noline
  display $Report_ID
  display ' Input $Report_Language: ' noline
  display $Report_Language
  #ifdef debugy
    display '  #_Strings_Array_Size: ' noline
    display #_Strings_Array_Size
  #end-if
#end-if

  if #_Strings_Array_Size = 0   ! Need to initialize
    do Init_Report_Translation ($Report_ID, $Report_Language)
  else                          ! Just append to existing structure
    do Append_Report_Translation ($Report_ID)
  end-if

#ifdef debugx
  display 'Exiting SQRTRANS.SQC: Add_Report_Translation'
#end-if
end-procedure


!***********************************************************************
! Procedure Get_Strings                                                *
!   Drive the process of populating the strings data structures.       *
!***********************************************************************
begin-procedure Get_Strings ($Report_ID, :#array_element)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Get_Strings'
    display ' Input $Report_ID: ' noline
    display $Report_ID
    display ' Input #array_element: ' noline
    display #array_element
  #endif
#endif

  let $Report_ID = rtrim($Report_ID, ' ')

  begin-select
STRING_ID      &BaseString_ID
STR_LBLTYPE    &BaseString_Source
DEFAULT_LABEL  &BaseString_DefLabel
LABEL_ID       &BaseString_LabelID
STRING_TEXT    &BaseString_Text
COL_WIDTH      &BaseCol_Width

    let $BaseString_ID = rtrim(&BaseString_ID,' ')
    do Populate_Strings_Array ($Report_ID, #array_element, $BaseString_ID,
                               &BaseString_Source, &BaseString_DefLabel,
                               &BaseString_LabelID, &BaseString_Text,
                               &BaseCol_Width)

    FROM PS_STRINGS_TBL
    WHERE PROGRAM_ID = $Report_ID
    ORDER BY STRING_ID
  end-select

  let #_Strings_Array_Size = #array_element - 1

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Get_Strings'
    display ' Output #array_element: ' noline
    display #array_element
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Populate_String_Array                                      *
!   Given the information in the "base" strings row, see if the        *
!   related language table applies in this case.  If so, retrieve the  *
!   information from there.                                            *
!   Note that we will use the base table information if the base       *
!   language is the report language, or if there is no row in the      *
!   related language table.                                            *
!***********************************************************************
begin-procedure Populate_Strings_Array ($Report_ID, :#array_element,
                                        $BaseStringID, $BaseStringSrc,
                                        #BaseStringDefLabel,
                                        $BaseStringLabelID,
                                        $BaseStringText, #BaseColWidth)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Populate_Strings_Array'
    display ' Input $Report_ID: ' noline
    display $Report_ID
    display ' Input $BaseStringID: ' noline
    display $BaseStringID
    display ' Input $BaseStringSrc: ' noline
    display $BaseStringSrc
    display ' Input #BaseStringDefLabel: ' noline
    display #BaseStringDefLabel
    display ' Input $BaseStringLabelID: ' noline
    display $BaseStringLabelID
    display ' Input $BaseStringText: ' noline
    display $BaseStringText
    display ' Input #BaseColWidth: ' noline
    display #BaseColWidth
  #endif
#endif
  !*********************************************************************
  ! First, make sure we're not going to overwrite the array bounds.    *
  ! If we hit this, just increase the variable size near the top       *
  !*********************************************************************
  if #array_element = {SQR_Strings_Array_Size}  ! about to go beyond array bounds
    display 'Error: SQRTRANS.SQC, Populate_Strings_Array'
    display ' The current limit on number of elements in the array is {SQR_Strings_Array_Size}.'
    display ' The current request will exceed that, aborting this program.'
    display ' sqrtrans.sqc needs to be modified to increase this value.'
    stop
  end-if

  let strings.report_id(#array_element) = $Report_ID
  let strings.string_id(#array_element) = $BaseStringID
  !*********************************************************************
  ! Use the related language table if the base language is not the     *
  ! report language.  Otherwise, we already have the information.      *
  !*********************************************************************
  if $_SQR_Report_Language <> $_SQR_Default_Language
    do Select_RelLang_Table ($Report_ID, $BaseStringID, $LangStringSrc,
                             #LangStringDefLabel, $LangStringLabelID,
                             $LangStringText, #LangColWidth, #found)
  end-if
  !*********************************************************************
  ! If there was no row found in the related language table, or if     *
  ! we're using the base language, look in the base language table     *
  ! for all of the needed information.  Otherwise, use the related     *
  ! language table.                                                    *
  ! When the source is long name or short name, if the field isn't     *
  ! found in the PSDBFLDLABLLANG table, then use the PSDBFLDLABL table *
  !*********************************************************************
  let $ReturnText = ''
  if ($_SQR_Report_Language = $_SQR_Default_Language) or (not #found)
    if $BaseStringSrc = '1'
      let strings.text(#array_element) = rtrim($BaseStringText, ' ')
      let strings.text(#array_element) = translate(strings.text(#array_element),'~',' ')
      let strings.deflabel(#array_element) = #BaseStringDefLabel
    else
      if $_SQR_Report_Language <> $_SQR_Default_Language
        let $AndWhere = ' AND LANGUAGE_CD = ''' ||
                        rtrim($_SQR_Report_Language, ' ') || ''''
        if $BaseStringSrc = '2'
          do Select_ShortField_Name_Lang ('PSDBFLDLABLLANG', $BaseStringID,
                                     #BaseStringDefLabel,
                                     $BaseStringLabelID,
                                     $AndWhere, $ReturnText)
        else
          do Select_LongField_Name_Lang ('PSDBFLDLABLLANG', $BaseStringID,
                                     #BaseStringDefLabel,
                                     $BaseStringLabelID,
                                    $AndWhere, $ReturnText)
        end-if
      end-if
      if $ReturnText = ''
        let $AndWhere = ''
        if $BaseStringSrc = '2'
          do Select_ShortField_Name ('PSDBFLDLABL', $BaseStringID,
                                     #BaseStringDefLabel,
                                     $BaseStringLabelID,
                                     $AndWhere, $ReturnText)
        else
          do Select_LongField_Name ('PSDBFLDLABL', $BaseStringID,
                                     #BaseStringDefLabel,
                                     $BaseStringLabelID,
                                    $AndWhere, $ReturnText)
        end-if
      end-if
      let strings.text(#array_element) = rtrim($ReturnText, ' ')
    end-if
    let strings.colwidth(#array_element) = #BaseColWidth
    let strings.deflabel(#array_element) = #BaseStringDefLabel
  else                                ! Use related language table info
    if $LangStringSrc = '1'
      let strings.text(#array_element) = rtrim($LangStringText, ' ')
      let strings.text(#array_element) = translate(strings.text(#array_element),'~',' ')
    else
      let $AndWhere = ' AND LANGUAGE_CD = ''' ||
                      rtrim($_SQR_Report_Language, ' ') || ''''
      if $LangStringSrc = '2'
        do Select_ShortField_Name_Lang ('PSDBFLDLABLLANG', $BaseStringID,
                                   #LangStringDefLabel,
                                   $LangStringLabelID
                                   $AndWhere, $ReturnText)
      else
        do Select_LongField_Name_Lang ('PSDBFLDLABLLANG', $BaseStringID,
                                   #LangStringDefLabel,
                                   $LangStringLabelID
                                  $AndWhere, $ReturnText)
      end-if
      if $ReturnText = ''
        let $AndWhere = ''
        if $LangStringSrc = '2'
          do Select_ShortField_Name ('PSDBFLDLABL', $BaseStringID,
                                   #LangStringDefLabel,
                                   $LangStringLabelID
                                     $AndWhere, $ReturnText)
        else
          do Select_LongField_Name ('PSDBFLDLABL', $BaseStringID,
                                   #LangStringDefLabel,
                                   $LangStringLabelID
                                    $AndWhere, $ReturnText)
        end-if
      end-if
      let strings.text(#array_element) = rtrim($ReturnText, ' ')
    end-if
    let strings.colwidth(#array_element) = #LangColWidth
  end-if

  #ifdef debugx
    #ifdef debugy
      display '  strings element: ' noline
      display #array_element 8888
      display '   REPORT_ID: ' noline
      let $temp = strings.report_id(#array_element)
      display $temp
      display '   STRING_ID: ' noline
      let $temp = strings.string_id(#array_element)
      display $temp
      display '   TEXT: ' noline
      let $temp = strings.text(#array_element)
      display $temp
      display '   COL_WIDTH: ' noline
      let #temp = strings.colwidth(#array_element)
      display #temp
    #endif
  #endif

  add 1 to #array_element

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Populate_Strings_Array'
    display ' Output #array_element: ' noline
    display #array_element
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Select_ShortField_Name                                     *
!   Retrieve the short name of the given field from                    *
!   PSDBFLDLABL table.                                                 *
!***********************************************************************
begin-procedure Select_ShortField_Name ($TableName, $FieldName,
                                        #DefLabel, $LabelID,
                                        $AndWhere, :$OutFieldName)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Select_ShortField_Name'
    display ' Input $TableName: ' noline
    display $TableName
    display ' Input $FieldName: ' noline
    display $FieldName
    display ' Input #DefLabel: ' noline
    display #DefLabel
    display ' Input $LabelID: ' noline
    display $LabelID
    display ' Input $AndWhere: ' noline
    display $AndWhere
  #endif
#endif

  let $OutFieldName = ''

if #DefLabel = 1

  begin-select
SHORTNAME &DefShortName

      let $OutFieldName = &DefShortName

    FROM [PSDBFLDLABL : $TableName]
    WHERE FIELDNAME = $FieldName
    AND DEFAULT_LABEL = 1
         [$AndWhere]
  end-select

else

  begin-select
SHORTNAME

      let $OutFieldName = &ShortName

    FROM [PSDBFLDLABL : $TableName]
    WHERE FIELDNAME = $FieldName
    AND LABEL_ID = $LabelID
         [$AndWhere]
  end-select

end-if

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Select_ShortField_Name'
    display ' Output $OutFieldName: ' noline
    display $OutFieldName
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Select_LongField_Name                                      *
!   Retrieve the long name of the given field from                     *
!   PSDBFLDLABL table.                                                 *
!***********************************************************************
begin-procedure Select_LongField_Name ($TableName, $FieldName,
                                       #DefLabel, $LabelID,
                                       $AndWhere, :$OutFieldName)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Select_LongField_Name'
    display ' Input $TableName: ' noline
    display $TableName
    display ' Input $FieldName: ' noline
    display $FieldName
    display ' Input #DefLabel: ' noline
    display #DefLabel
    display ' Input $LabelID: ' noline
    display $LabelID
    display ' Input $AndWhere: ' noline
    display $AndWhere
  #endif
#endif

  let $OutFieldName = ''

if #DefLabel = 1

  begin-select
LONGNAME &DefLongName

      let $OutFieldName = &DefLongName

    FROM [PSDBFLDLABL : $TableName]
    WHERE FIELDNAME = $FieldName
    AND DEFAULT_LABEL = 1

         [$AndWhere]
  end-select

else

  begin-select
LONGNAME

      let $OutFieldName = &LongName

    FROM [PSDBFLDLABL : $TableName]
    WHERE FIELDNAME = $FieldName
    AND LABEL_ID = $LabelID

         [$AndWhere]
  end-select

end-if

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Select_LongField_Name'
    display ' Output $OutFieldName: ' noline
    display $OutFieldName
  #endif
#endif
end-procedure
!***chill 1/5/00
!***********************************************************************
! Procedure Select_ShortField_Name_Lang                                *
!   Retrieve the short name of the given field from                    *
!   PSDBFLDLABLLANG                                                    *
!***********************************************************************
begin-procedure Select_ShortField_Name_Lang ($TableName, $FieldName,
                                        #DefLabel, $LabelID,
                                        $AndWhere, :$OutFieldName)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Select_ShortField_Name_Lang'
    display ' Input $TableName: ' noline
    display $TableName
    display ' Input $FieldName: ' noline
    display $FieldName
    display ' Input #DefLabel: ' noline
    display #DefLabel
    display ' Input $LabelID: ' noline
    display $LabelID
    display ' Input $AndWhere: ' noline
    display $AndWhere
  #endif
#endif

  let $OutFieldName = ''

if #DefLabel = 1

  begin-select
SHORTNAME &DefShortName

      let $OutFieldName = &DefShortName

    FROM [PSDBFLDLABLLANG : $TableName]
    WHERE FIELDNAME = $FieldName
         AND LABEL_ID =  (SELECT LABEL_ID FROM PSDBFLDLABL
                               WHERE  FIELDNAME = $Fieldname
                                AND DEFAULT_LABEL = 1)
         [$AndWhere]
  end-select

else

  begin-select
SHORTNAME

      let $OutFieldName = &ShortName

    FROM [PSDBFLDLABLLANG : $TableName]
    WHERE FIELDNAME = $FieldName
         AND LABEL_ID = $LabelID
         [$AndWhere]
  end-select

end-if

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Select_ShortField_Name_Lang'
    display ' Output $OutFieldName: ' noline
    display $OutFieldName
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Select_LongField_Name_Lang                                 *
!   Retrieve the long name of the given field from                     *
!   PSDBFLDLABLLANG table.                                             *
!***********************************************************************
begin-procedure Select_LongField_Name_Lang ($TableName, $FieldName,
                                       #DefLabel, $LabelID,
                                       $AndWhere, :$OutFieldName)
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Select_LongField_Name_Lang'
    display ' Input $TableName: ' noline
    display $TableName
    display ' Input $FieldName: ' noline
    display $FieldName
    display ' Input #DefLabel: ' noline
    display #DefLabel
    display ' Input $LabelID: ' noline
    display $LabelID
    display ' Input $AndWhere: ' noline
    display $AndWhere
  #endif
#endif

  let $OutFieldName = ''

if #DefLabel = 1

  begin-select
LONGNAME &DefLongName

      let $OutFieldName = &DefLongName

    FROM [PSDBFLDLABLLANG : $TableName]
    WHERE FIELDNAME = $FieldName
      AND LABEL_ID =  (SELECT LABEL_ID FROM PSDBFLDLABL
                                   WHERE  FIELDNAME = $Fieldname
                                      AND DEFAULT_LABEL = 1)
            [$AndWhere]
  end-select

else

  begin-select
LONGNAME

      let $OutFieldName = &LongName

    FROM [PSDBFLDLABLLANG : $TableName]
    WHERE FIELDNAME = $FieldName
    AND LABEL_ID = $LabelID

         [$AndWhere]
  end-select

end-if

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Select_LongField_Name_Lang'
    display ' Output $OutFieldName: ' noline
    display $OutFieldName
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Select_RelLang_Table                                       *
!   Retrieve the information from the related language table           *
!***********************************************************************
begin-procedure Select_RelLang_Table ($Report_ID, $BaseStringID,
                                      :$LangStrSrc, :#LangStrDefLabel,
                                      :$LangStrLabelID, :$LangStrTxt,
                                      :#LangColWid, :#found)

#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Select_RelLang_Table'
    display ' Input $Report_ID: ' noline
    display $Report_ID
    display ' Input $BaseStringID: ' noline
    display $BaseStringID
  #endif
#endif

  move 0 to #found
  let $WhereLang = rtrim($_SQR_Report_Language, ' ')

  begin-select
STR_LBLTYPE    &LangString_Source
DEFAULT_LABEL  &LangString_DefLabel
LABEL_ID       &LangString_LabelID
STRING_TEXT    &LangString_Text
COL_WIDTH      &LangCol_Width

    let #found = 1
    let $LangStrSrc      = &LangString_Source
    let #LangStrDefLabel = &LangString_DefLabel
    let $LangStrLabelID  = &LangString_LabelID
    let $LangStrTxt      = &LangString_Text
    let #LangColWid      = &LangCol_Width

    FROM PS_STRINGS_LNG_TBL
    WHERE PROGRAM_ID = $Report_ID
      AND LANGUAGE_CD = $WhereLang
      AND STRING_ID = $BaseStringID
  end-select

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Select_RelLang_Table'
    display ' Output $LangStrSrc: ' noline
    display $LangStrSrc
    display ' Output #LangStrDefLabel: ' noline
    display #LangStrDefLabel
    display ' Output $LangStrLabelID: ' noline
    display $LangStrLabelID
    display ' Output $LangStrTxt: ' noline
    display $LangStrTxt
    display ' Output $LangFldNm: ' noline
    display #LangColWid
    display ' Output #found: ' noline
    display #found
  #endif
#endif
end-procedure


!***********************************************************************
! Procedure Dump_Array_Data                                            *
!   Debugging procedure to dump out the contents of the strings array  *
!***********************************************************************
begin-procedure Dump_Array_Data Local
#ifdef debugx
  #ifdef debugy
    display 'Entering SQRTRANS.SQC: Dump_Array_Data'
  #endif
#endif

  display '  The contents of the Strings array follows.'

  let #strings_index = 0
  while (#strings_index <= #_Strings_Array_Size)
    display '   Entry Number: ' noline
    display #strings_index 8888

    display '    Report_ID: ' noline
    let $dummytext = strings.report_id(#strings_index)
    display $dummytext

    display '    String_ID: ' noline
    let $dummytext = strings.string_id(#strings_index)
    display $dummytext

    display '    Use Default Label? ' noline
    let #dummytext = strings.deflabel(#strings_index)
    display #dummytext

    display '    Label_ID: ' noline
    let $dummytext = strings.label_id(#strings_index)

    display '    Text: ' noline
    let $dummytext = strings.text(#strings_index)
    display $dummytext

    display '    Column width: ' noline
    let #dummywidth = strings.colwidth(#strings_index)
    display #dummywidth

    add 1 to #strings_index
  end-while

#ifdef debugx
  #ifdef debugy
    display 'Exiting SQRTRANS.SQC: Dump_Array_Data'
  #endif
#endif
end-procedure
