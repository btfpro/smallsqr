!************************************************************************
!  GPESTAX2.SQR: Personal Information for IRPF                          *
!                Comparative Percentage of IRPF                         *
!************************************************************************
!************************************************************************
!                                                                       *
!               Confidentiality Information:                            *
!                                                                       *
!                                                                       *
! This module contains confidential and proprietary information         *
! of Oracle; it is not to be copied, reproduced, or transmitted         *
! in any form, by any means, in whole or in part, nor is it to          *
! be used for any purpose other than that for which it is               *
! expressly provided under the applicable license agreement.            *
!                                                                       *
! Copyright (C) 2006 Oracle. All Rights Reserved.                       *
!                                                                       *
!-----------------------------------------------------------------------!
!                                                                       !
!          $Date:  2006/09/25:04:04:49                                 !
!       $Release:  HR9                                                 !
!      $Revision:  105                                                 !
!                                                                       !
!***********************************************************************!
#include 'setenv.sqc'   !Set environment

!************************************************************************
! Setup Section
!************************************************************************
begin-setup

#Include 'ptpsl177.sqc'  !Printer and page-size initialization

End-Setup


!************************************************************************
! Report Section
!************************************************************************
Begin-Report
#debug do Fin-Debug-Msg('Begin-Report')

  do Init-Report
  do Process-Main
  do Stdapi-Term
  do reset

End-Report


!************************************************************************
! Heading Section
!************************************************************************
Begin-Heading 3

#define colr 159
#include 'stdhdg01.sqc'

End-Heading


!************************************************************************
! Procedure: Init-Report
!************************************************************************
Begin-Procedure Init-Report
#debug do Fin-Debug-Msg('Init-Report')

  let $Quote = ''''
  move 'GPESTAX2' to $ReportID
  do Stdapi-Init
  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
     goto last1
  end-if
  
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  move $AsOfToday to $AsOfDate


  If $Prcs_Process_Instance = ''
    display ''
    display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT. PLEASE USE PROCESS SCHEDULER.'
    display ''
  Else
!    do Get_RC_Data
  End-If

Begin-Select On-Error=SQL-Error
RC.LANGUAGE_CD
   let $PRCS_LANGUAGE_CD = &RC.LANGUAGE_CD

FROM PS_GPES_RC_CP_IRPF RC
WHERE RC.OPRID = $Prcs_Oprid
  AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-Select

  #Debugd show 'Language CD: ' $PRCS_LANGUAGE_CD
  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation ($ReportID, $language_cd)

  do Get_Field_information ('GPESTAX2', 'ESTIMATION',$ESTIMATION,#DW)
  do Get_Field_information ('GPESTAX2', 'ACTUAL',$ACTUAL,#DW)
  do Get_Field_information ('GPESTAX2', 'ALL_YEAR_LBL',$ALL_YEAR_LBL,#DW)
  do Get_Field_information ('GPESTAX2', 'COMPARATIVE_LBL',$COMPARATIVE_LBL,#DW)
  do Get_Field_information ('GPESTAX2', 'COMPANY_LBL',$COMPANY_LBL,#DW)
  do Get_Field_information ('GPESTAX2', 'PAY_ENTITY_LBL',$PAY_ENTITY_LBL,#DW)
  do Get_Field_information ('GPESTAX2', 'PAY_GROUP_LBL',$PAY_GROUP_LBL,#DW)
  do Get_Field_information ('GPESTAX2', 'DIFFERENCE_LBL',$DIFFERENCE_LBL,#DW)  
  do Get_Field_information ('GPESTAX2', 'COMPANY',$COMPANY,#DW)
  do Get_Field_information ('GPESTAX2', 'EMPLOYEE_ID',$EMPLOYEE_ID,#DW)
  do Get_Field_information ('GPESTAX2', 'NATIONAL_ID',$NATIONAL_ID,#DW)
  do Get_Field_information ('GPESTAX2', 'COMPARISION_MONTH',$COMPARISION_MONTH,#DW)
  do Get_Field_information ('GPESTAX2', 'DISABILITY_TYPE',$DISABILITY_TYPE,#DW)
  do Get_Field_information ('GPESTAX2', 'CEUTA_MELILLA1',$CEUTA_MELILLA1,#DW)
  do Get_Field_information ('GPESTAX2', 'CEUTA_MELILLA2',$CEUTA_MELILLA2,#DW)
  do Get_Field_information ('GPESTAX2', 'RED_MOBILITY1',$RED_MOBILITY1,#DW)
  do Get_Field_information ('GPESTAX2', 'RED_MOBILITY2',$RED_MOBILITY2,#DW)  
  do Get_Field_information ('GPESTAX2', 'RED_WRK_LIFE_EXT1',$RED_WRK_LIFE_EXT1,#DW)
  do Get_Field_information ('GPESTAX2', 'RED_WRK_LIFE_EXT2',$RED_WRK_LIFE_EXT2,#DW)
  do Get_Field_information ('GPESTAX2', 'FAMILIAR_SITUATN1', $FAMILIAR_SITUATN1,#DW)
  do Get_Field_information ('GPESTAX2', 'FAMILIAR_SITUATN2', $FAMILIAR_SITUATN2,#DW)
  do Get_Field_information ('GPESTAX2', 'RELATION_TYPE1', $RELATION_TYPE1,#DW)
  do Get_Field_information ('GPESTAX2', 'RELATION_TYPE2', $RELATION_TYPE2,#DW)
  do Get_Field_information ('GPESTAX2', 'NBR_DEPENDENTS1',$NBR_DEPENDENTS1,#DW)
  do Get_Field_information ('GPESTAX2', 'NBR_DEPENDENTS2',$NBR_DEPENDENTS2,#DW)
  do Get_Field_information ('GPESTAX2', 'IRPF_BASE', $IRPF_BASE,#DW)
  do Get_Field_information ('GPESTAX2', 'IRPF_WHITHLD_PCT1', $IRPF_WHITHLD_PCT1,#DW)
  do Get_Field_information ('GPESTAX2', 'IRPF_WHITHLD_PCT2', $IRPF_WHITHLD_PCT2,#DW)
  do Get_Field_information ('GPESTAX2', 'SOC_SEC_CONTRIBTN1', $SOC_SEC_CONTRIBTN1,#DW)
  do Get_Field_information ('GPESTAX2', 'SOC_SEC_CONTRIBTN2', $SOC_SEC_CONTRIBTN2,#DW)
  do Get_Field_information ('GPESTAX2', 'TAX_REDUCTIONS',$TAX_REDUCTIONS,#DW)
  do Get_Field_information ('GPESTAX2', 'NONREGULAR_INCOME1', $NONREGULAR_INCOME1,#DW)
  do Get_Field_information ('GPESTAX2', 'NONREGULAR_INCOME2', $NONREGULAR_INCOME2,#DW)
  do Get_Field_information ('GPESTAX2', 'IRPFWITHLD_ACTUAL1', $IRPFWITHLD_ACTUAL1,#DW)
  do Get_Field_information ('GPESTAX2', 'IRPFWITHLD_ACTUAL2', $IRPFWITHLD_ACTUAL2,#DW)
  do Get_Field_information ('GPESTAX2', 'EE_INCOME', $EE_INCOME,#DW)
    
  LAST1:
  
End-Procedure ! Init-Report


!************************************************************************
! Procedure: Process-Main
!************************************************************************
Begin-Procedure Process-Main
#debug do Fin-Debug-Msg('Process-Main')

  do DeleteSQLTable
  do Get_RC_Data
  If $Compare_Year = 'A'  !All Year
    do ReadDataPrint
  Else              !'C'  !Comparative
    If $Diff_FIND = 'NONE'
      Else
        do DeleteUnique
    End-If
    do CountIRPF
  End-If

End-Procedure ! Process-Main


!************************************************************************
! Procedure: Get_RC_Data
!************************************************************************
Begin-Procedure Get_RC_Data
#debug do Fin-Debug-Msg('Get_RC_Data')

let $MonthCD       = ''
let #MonthCD       = 0
let $DescrMonthCD  = ''
let $YearCD        = ''
let #YearCD        = 0
let $TitleDown     = ''
let $Difference    = ''
let #Difference    = 0
let $Difference2    = ''
let #Difference2    = 0
let $Diff_FIND     = ''
let $Compare_Year  = ''
let $Period        = ''
let $FilterBy      = ''
let $Company       = ''
let $PayEntity     = ''
let $PayGroup      = ''
let $Payee         = ''
let $TaxLocation   = ''
let $DescrName     = ''
let $TitleGroup    = ''
let $WhereClauseWATax2 = ''

let $SQL-statement = 'GPESTAX2.SQR, Get_RC_Data, Select, PS_GPES_RC_CP_IRPF, PS_GPES_FILTER_CP'
Begin-Select On-Error=SQL-Error
GPESRC_A.GPES_MONTHCD
GPESRC_A.YEARCD
GPESRC_A.GPES_DIFFERENCE2
GPESRC_A.GPES_YEAR_COMPARE
GPESRC_A.GPES_FILTER_BY_CP
GPESRC_B.COMPANY
GPESRC_B.PAY_ENTITY
GPESRC_B.GP_PAYGROUP
GPESRC_B.EMPLID
GPESRC_B.GPES_TAX_LOCATION
GPESRC_B.DESCR50

  let $MonthCD = &GPESRC_A.GPES_MONTHCD
  let $FieldName = 'GPES_MONTHCD'
  let $FieldValue = $MonthCD
  let $MonthCur =  RTRIM(LTRIM($MonthCD,' '), ' ')
  do Read-Translate-Table
  let $DescrMonthCD = Rtrim($XLatshortName, ' ')
  let $YearCD = &GPESRC_A.YEARCD
  let $TitleDown = $DescrMonthCD || ' ' || $YearCD
  
  
  let #MonthCD = to_number($MonthCD)
  let #YearCD = to_number($YearCD)
  !let $YearMonth = TO_CHAR((#YearCD * 100) + #MonthCD)
  !let $Month-Begin-DT = &GPESRC_A.YEARCD || '-' || &GPESRC_A.GPES_MONTHCD || '-01'
  !do DTU-Month-End($Month-Begin-DT, $Month-End-DT)
  !do Convert-From-DTU-Date($Month-End-DT, $YearMonth)
  
  
  let $Difference = LTRIM(&GPESRC_A.GPES_DIFFERENCE2, ' ')
    If $Difference = ''
      let $Diff_FIND = 'NONE'
    Else
      let #Difference = to_number($Difference)
    End-If
  let $Compare_Year = &GPESRC_A.GPES_YEAR_COMPARE
    If $Compare_Year = 'C'
      let $Difference = to_char(#Difference)
      let $Difference = '( ' || $DIFFERENCE_LBL || ' ' || $Difference || ' )'
    Else
      let $Difference = ''
    End-If
  let $DescrName = Rtrim(&GPESRC_B.DESCR50, ' ')
  let $FilterBy = &GPESRC_A.GPES_FILTER_BY_CP

    Evaluate $FilterBy
!!!!!!!!!!!!!!!!!!! COMPANY LIST !!!!!!!!!!!!!!!!!!!
      When = 'CL'
        let $Company = Rtrim(&GPESRC_B.COMPANY, ' ')
        let $TitleGroup = $COMPANY_LBL || ' ' || $Company || ' - ' || $DescrName

        If $Compare_Year = 'A'  !All Year
          let $WhereClauseWATax2 = ' AND WATax2.COMPANY = ' || $Quote || $Company || $Quote || ' AND WATax2.GPES_MONTH BETWEEN 1 AND ' || $MonthCD
          do Find_Data_WATax2
        End-If

        If $Compare_Year = 'C'  !Comparative
          let $WhereClauseWATax2 = ' AND WATax2.COMPANY = ' || $Quote || $Company || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2

          If #MonthCD = 1      !Calculate Previous Month
            !let #MonthCD = 12
            !let $MonthCD = to_char(#MonthCD)
            let #YearCD = #YearCD - 1
            let $YearCD = to_char(#YearCD)
          !Else
            !let #MonthCD = #MonthCD - 1
            !let $MonthCD = to_char(#MonthCD)
          End-If
          
           do PreviousMonth
          let #MonthCD = #prevmonth
          let $MonthCD = to_char(#MonthCD)
          

          let $WhereClauseWATax2 = ' AND WATax2.COMPANY = ' || $Quote || $Company || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2
          End-If
      Break

!!!!!!!!!!!!!!!!!!! PAY ENTITY LIST !!!!!!!!!!!!!!!!!!!
      When = 'PE'
        let $PayEntity  = Rtrim(&GPESRC_B.PAY_ENTITY, ' ')
        let $TitleGroup = $PAY_ENTITY_LBL || ' ' || $PayEntity || ' - ' || $DescrName
        
        do PayEntity_to_PayGroup
      Break

!!!!!!!!!!!!!!!!!!! PAY GROUP LIST !!!!!!!!!!!!!!!!!!!
      When = 'PG'
        let $PayGroup = Rtrim(&GPESRC_B.GP_PAYGROUP, ' ')
        let $TitleGroup = $PAY_GROUP_LBL || ' ' || $PayGroup || ' - ' || $DescrName

        If $Compare_Year = 'A'  !All Year
          let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup || $Quote || ' AND WATax2.GPES_MONTH BETWEEN 1 AND ' || $MonthCD
          do Find_Data_WATax2
        End-If
        
        If $Compare_Year = 'C'  !Comparative
          let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2

         If #MonthCD = 1      !Calculate Previous Month
            !let #MonthCD = 12
            !let $MonthCD = to_char(#MonthCD)
             let #YearCD = #YearCD - 1
             let $YearCD = to_char(#YearCD)
         !Else
            !let #MonthCD = #MonthCD - 1
            !let $MonthCD = to_char(#MonthCD)
         End-If
        
         do PreviousMonth
         let #MonthCD = #prevmonth
              let $MonthCD = to_char(#MonthCD)

          let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2
        End-If
      Break

!!!!!!!!!!!!!!!!!!! PAYEE LIST !!!!!!!!!!!!!!!!!!!
      When = 'PL'
        let $Payee = Rtrim(&GPESRC_B.EMPLID, ' ')
        let $TitleGroup = $PAYEE_LBL || ' ' || $Payee || ' - ' || $DescrName

        If $Compare_Year = 'A'  !All Year
          let $WhereClauseWATax2 = ' AND WATax2.EMPLID = ' || $Quote || $Payee || $Quote || ' AND WATax2.GPES_MONTH BETWEEN 1 AND ' || $MonthCD
          do Find_Data_WATax2
        End-If
        
        If $Compare_Year = 'C'  !Comparative
          let $WhereClauseWATax2 = ' AND WATax2.EMPLID = ' || $Quote || $Payee || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2
          
          If #MonthCD = 1      !Calculate Previous Month
             !let #MonthCD = 12
             !let $MonthCD = to_char(#MonthCD)
              let #YearCD = #YearCD - 1
              let $YearCD = to_char(#YearCD)
          !Else
             !let #MonthCD = #MonthCD - 1
             !let $MonthCD = to_char(#MonthCD)
          End-If
            
          do PreviousMonth
          let #MonthCD = #prevmonth
          let $MonthCD = to_char(#MonthCD)

          let $WhereClauseWATax2 = ' AND WATax2.EMPLID = ' || $Quote || $Payee || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2
        End-If
      Break

!!!!!!!!!!!!!!!!!!! TAX LOCATION !!!!!!!!!!!!!!!!!!!
      When = 'TL'
        let $TaxLocation = Rtrim(&GPESRC_B.GPES_TAX_LOCATION, ' ')
        let $TitleGroup = $TAX_LOCATION_LBL || ' ' || $TaxLocation || ' - ' || $DescrName
        
        If $Compare_Year = 'A'  !All Year
          let $WhereClauseWATax2 = ' AND WATax2.GPES_TAX_LOCATION = ' || $Quote || $TaxLocation || $Quote || ' AND WATax2.GPES_MONTH BETWEEN 1 AND ' || $MonthCD
          do Find_Data_WATax2
        End-If
        
        If $Compare_Year = 'C'  !Comparative
          let $WhereClauseWATax2 = ' AND WATax2.GPES_TAX_LOCATION = ' || $Quote || $TaxLocation || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2

        If #MonthCD = 1      !Calculate Previous Month
            !let #MonthCD = 12
            !let $MonthCD = to_char(#MonthCD)
            let #YearCD = #YearCD - 1
            let $YearCD = to_char(#YearCD)
          !Else
            !let #MonthCD = #MonthCD - 1
            !let $MonthCD = to_char(#MonthCD)
          End-If
          
           do PreviousMonth
          let #MonthCD = #prevmonth
          let $MonthCD = to_char(#MonthCD)
          let $WhereClauseWATax2 = ' AND WATax2.GPES_TAX_LOCATION = ' || $Quote || $TaxLocation || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
          do Find_Data_WATax2
        End-If
      Break

      When-Other  ! default code
    End-Evaluate

FROM PS_GPES_RC_CP_IRPF GPESRC_A,
     PS_GPES_FILTER_CP GPESRC_B
WHERE GPESRC_A.OPRID = $Prcs_Oprid
  AND GPESRC_A.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND GPESRC_A.OPRID = GPESRC_B.OPRID
  AND GPESRC_A.RUN_CNTL_ID = GPESRC_B.RUN_CNTL_ID

End-Select

End-Procedure ! Get_RC_Data


!************************************************************************
! Procedure: PayEntity_to_PayGroup
! Descr.:    Convert PayEntity to PayGroup
!************************************************************************
Begin-Procedure PayEntity_to_PayGroup
#debug do Fin-Debug-Msg('PayEntity_to_PayGroup')

let $PayGroup_PYGRP    = ''
let $WhereClauseWATax2 = ''

let #YearCDTo   =  #YearCD
let #YearCDFrom =  #YearCD
If #MonthCD = 1      !Calculate Previous Month
  !let #MonthCDFrom = 12
  !let $MonthCDFrom = to_char(#MonthCDFrom)
  let #YearCDFrom = #YearCD - 1
  let $YearCDFrom = to_char(#YearCDFrom)
!Else
  !let #MonthCDFrom = #MonthCD - 1
  !let $MonthCDFrom = to_char(#MonthCDFrom)
End-If
       
    do PreviousMonth
    let #MonthCDFrom = #prevmonth
    let $MonthCDFrom = to_char(#MonthCDFrom)

#debugd show 'Pay Entity: ' $PayEntity

let $SQL-statement = 'GPESTAX2.SQR, PayEntity_to_PayGroup, Select, PS_GP_PYGRP'
Begin-Select DISTINCT On-Error=SQL-Error
PYGRP.GP_PAYGROUP

  let $PayGroup_PYGRP = Rtrim(&PYGRP.GP_PAYGROUP, ' ')

  If $Compare_Year = 'A'  !All Year
    let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup_PYGRP || $Quote || ' AND WATax2.GPES_MONTH BETWEEN 1 AND ' || $MonthCD
    do Find_Data_WATax2
  End-If

  If $Compare_Year = 'C'  !Comparative
      let #YearCD = #YearCDTo
    let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup_PYGRP || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCD
    do Find_Data_WATax2
    do PreviousMonth
        let #MonthCDFrom = #prevmonth
        let $MonthCDFrom = to_char(#MonthCDFrom)
    let #YearCD = #YearCDFrom
    let $WhereClauseWATax2 = ' AND WATax2.GP_PAYGROUP = ' || $Quote || $PayGroup_PYGRP || $Quote || ' AND WATax2.GPES_MONTH = ' || $MonthCDFrom
    do Find_Data_WATax2
  End-If

FROM PS_GP_PYGRP PYGRP
WHERE PYGRP.PAY_ENTITY = $PayEntity

End-Select

!let $MonthCD = to_char(to_number($MonthCD) - 1)

    let #MonthCD = to_number($MonthCDFrom)
    let $MonthCD = to_char(#MonthCD)

End-Procedure ! PayEntity_to_PayGroup


!************************************************************************
! Procedure: Find_Data_WATax2
!************************************************************************
Begin-Procedure Find_Data_WATax2
#debug do Fin-Debug-Msg('Find_Data_WATax2')

let $Emplid       = ''
let $DateWATax2   = ''
let #RendIrreg    = 0
let #AcumTaxes    = 0
let #AcumEarnings = 0
let $RendIrreg    = '0'
let $AcumTaxes    = '0'
let $AcumEarnings = '0'

#Debugd show 'Year: ' #YearCD
#Debugd show 'Search criteria: ' $WhereClauseWATax2

let $SQL-statement = 'GPESTAX2.SQR, Find_Data_WATax2, Select, PS_GPES_TAX2_RSLT'
Begin-Select On-Error=SQL-Error
WATax2.EMPLID
WATax2.GPES_MONTH
MAX(WATax2.EFFDT)  &DateWATax2
SUM(WATax2.GPES_REDUCTIONS)  &RendIrregWATax2
SUM(WATax2.GPES_SALARY_WITHLD + GPES_INK_WITHLD_EE)  &AcumTaxesWATax2
SUM(WATax2.GPES_SALARY_INCOME + GPES_INKIND_INCOME)  &AcumEarningsWATax2

  let $Emplid = &WATax2.EMPLID
  let #MonthCD = &WATax2.GPES_MONTH
  let $DateWATax2 = &DateWATax2
  let #RendIrreg = &RendIrregWATax2
  let $RendIrreg = to_char(#RendIrreg)
  let #AcumTaxes = &AcumTaxesWATax2
  let $AcumTaxes = to_char(#AcumTaxes)
  let #AcumEarnings = &AcumEarningsWATax2
  let $AcumEarnings = to_char(#AcumEarnings)

  do Find_Data_WATax1
  do PersonalData
  do InsertData
  
FROM PS_GPES_TAX2_RSLT WATax2,
PS_FAST_SQR_SEC_VW FAST_SEC 
WHERE WATax2.GPES_YEAR = #YearCD
  AND WATax2.GPES_FISCAL_KEY = 'A'
  AND WATax2.RSLT_VER_NUM = (SELECT MAX(WATax2_ED.RSLT_VER_NUM)
                             FROM PS_GPES_TAX2_RSLT WATax2_ED
                            WHERE WATax2.EMPLID = WATax2_ED.EMPLID
                              AND WATax2.EMPL_RCD = WATax2_ED.EMPL_RCD
                              AND WATax2.CAL_ID = WATax2_ED.CAL_ID)
  AND WATax2.RSLT_REV_NUM = (SELECT MAX(WATax2_ED.RSLT_REV_NUM)
                             FROM PS_GPES_TAX2_RSLT WATax2_ED
                            WHERE WATax2.EMPLID = WATax2_ED.EMPLID
                              AND WATax2.EMPL_RCD = WATax2_ED.EMPL_RCD
                              AND WATax2.CAL_ID = WATax2_ED.CAL_ID)
[$WhereClauseWATax2]
AND WATax2.EMPLID = FAST_SEC.EMPLID
AND WATax2.EMPL_RCD = FAST_SEC.EMPL_RCD
AND FAST_SEC.OPRID = $prcs_oprid 
GROUP BY WATax2.EMPLID,
         WATax2.GPES_MONTH

End-Select

do Treat_Acum

End-Procedure ! Find_Data_WATax2


!************************************************************************
! Procedure: Find_Data_WATax1
!************************************************************************
Begin-Procedure Find_Data_WATax1
#debug do Fin-Debug-Msg('Find_Data_WATax1')

let #BaseIRPF     =  0
let #IRPF         =  0
let #SocialSec    =  0
let #Reduct       =  0
let $CeutaMelilla =  ' ' 
let $RedGeo       =  ' '
let $RedWorkExt   =  ' '
let $FamlrSituatn =  ' '
let $RelshipType  =  ' '
let #No_of_Dep    =  0

let $SQL-statement = 'GPESTAX2.SQR, Find_Data_WATax1, Select, PS_GPES_TAX_RSLT'
Begin-Select On-Error=SQL-Error
WATax1.GPES_TAX_BASE                                                  &BaseIRPFWATax1
WATax1.GPES_TAX_PCT                                                   &IRPFWATax1
WATax1.GPES_SS_CT_EE                                                  &SocialSecWATax1
WATax1.GPES_TAX_MIN_FAMLR + GPES_TAX_MIN_PERS + GPES_TAX_REDUCTION    &ReductionsWATax1
WATax1.GPES_CEUTA_MELILLA                                             &CeutaMelillaWATax1
WATax1.GPES_RED_GEO                                                   &RedGeoWATax1
WATax1.GPES_RED_WORK_EXT                                              &RedWorkExtWATax1
WATax1.GPES_FAMLR_SITUATN                                             &FamlrSituatnWATax1
WATax1.GPES_RELSHIP_TYPE                                              &RelshipTypeWATax1
WATax1.GPES_DISABLTY_TYPE                                             &DisabltyTypeWATax1
WATax1.GPES_ASC_TOTAL + WATax1.GPES_DEPN_TOTAL                        &DependentsWATax1

  
  let #BaseIRPF     =  &BaseIRPFWATax1
  let #IRPF         =  &IRPFWATax1
  let #SocialSec    =  &SocialSecWATax1
  let #Reduct       =  &ReductionsWATax1
  let $CeutaMelilla =  &CeutaMelillaWATax1
  let $RedGeo       =  &RedGeoWATax1
  let $RedWorkExt   =  &RedWorkExtWATax1
  let $FamlrSituatn =  &FamlrSituatnWATax1
  let $RelshipType  =  &RelshipTypeWATax1
  let $DisabltyType =  &DisabltyTypeWATax1
  let #No_of_Dep    =  &DependentsWATax1
  
FROM PS_GPES_TAX_RSLT WATax1
WHERE WATax1.EMPLID = $Emplid
  AND WATax1.RSLT_VER_NUM = (SELECT MAX(WATax1_ED.RSLT_VER_NUM)
                             FROM PS_GPES_TAX_RSLT WATax1_ED
                            WHERE WATax1.EMPLID = WATax1_ED.EMPLID
                              AND WATax1.EMPL_RCD = WATax1_ED.EMPL_RCD
                              AND WATax1.CAL_ID = WATax1_ED.CAL_ID)
  AND WATax1.RSLT_REV_NUM = (SELECT MAX(WATax1_ED.RSLT_REV_NUM)
                             FROM PS_GPES_TAX_RSLT WATax1_ED
                            WHERE WATax1.EMPLID = WATax1_ED.EMPLID
                              AND WATax1.EMPL_RCD = WATax1_ED.EMPL_RCD
                              AND WATax1.CAL_ID = WATax1_ED.CAL_ID)
 
 AND WATax1.EFFDT = $DateWATax2
 ! AND WATax1.EFFDT = (SELECT MAX(WATax1_ED.EFFDT)
 !                            FROM PS_GPES_TAX_RSLT WATax1_ED
 !                           WHERE WATax1.EMPLID = WATax1_ED.EMPLID
 !                             AND WATax1.EMPL_RCD = WATax1_ED.EMPL_RCD
 !                             AND WATax1_ED.EFFDT <= $DateWATax2)
 !GROUP BY WATax1.EMPLID

End-Select

End-Procedure ! Find_Data_WATax1

!************************************************************************
! Procedure: PreviousMonth
!************************************************************************
Begin-Procedure PreviousMonth
#debug do Fin-Debug-Msg('PreviousMonth')

let $prevdate=''
let #prevmonth=0
let $SQL-statement = 'GPESTAX2.SQR,  PreviousMonth, Select,PS_GPES_TAX_RSLT'
Begin-Select On-Error=SQL-Error
MAX(tax1.EFFDT) &effdate

 let $prevdate = &effdate
FROM PS_GPES_TAX_RSLT tax1    
WHERE tax1.EMPLID = $Emplid
  AND tax1.EFFDT < $DateWATax2
End-Select

let $SQL-statement = 'GPESTAX2.SQR,  PreviousMonth, Select,PS_GPES_TAX2_RSLT'
Begin-Select On-Error=SQL-Error
tax2.GPES_MONTH  &monthvalue
        let #prevmonth = &monthvalue

FROM PS_GPES_TAX2_RSLT tax2
     
WHERE tax2.EMPLID = $Emplid
   AND tax2.EFFDT = &effdate
End-Select



End-Procedure !PreviousMonth




!************************************************************************
! Procedure: PersonalData
!************************************************************************
Begin-Procedure PersonalData
#debug do Fin-Debug-Msg('PersonalData')

let $NationalID = ' '
let $BirthDate  = ' '

let $SQL-statement = 'GPESTAX2.SQR, PersonalData, Select, PS_PERS_NID, PS_PERSON'
Begin-Select On-Error=SQL-Error
PERS_A.NATIONAL_ID
PERS_B.BIRTHDATE

  let $NationalID = &PERS_A.NATIONAL_ID
  let $BirthDate = &PERS_B.BIRTHDATE

FROM PS_PERS_NID PERS_A,
     PS_PERSON PERS_B
WHERE PERS_A.EMPLID = PERS_B.EMPLID
  AND PERS_A.EMPLID = $Emplid
  AND PERS_A.PRIMARY_NID = 'Y'
  
End-Select

End-Procedure ! PersonalData


!************************************************************************
! Procedure: DeleteSQLTable
!************************************************************************
Begin-Procedure DeleteSQLTable
#debug do Fin-Debug-Msg('DeleteSQLTable')

let $SQL-statement = 'GPESTAX2.SQR, DeleteSQLTable, Delete, PS_GPES_CPER_TMP'
Begin-SQL On-Error=SQL-Error
DELETE FROM PS_GPES_CPER_TMP
WHERE OPRID = $Prcs_Oprid
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

End-SQL

End-Procedure ! DeleteSQLTable


!************************************************************************
! Procedure: InsertData
!************************************************************************
Begin-Procedure InsertData
#debug do Fin-Debug-Msg('InsertData')

let $Mnth = to_char(#MonthCD)
If isnull($NationalID)
  let $NationalID = ' '
End-If
If isnull($CeutaMelilla)
  let $CeutaMelilla = ' '
End-If
If isnull($RedGeo)
  let $RedGeo = ' '
End-If
If isnull($RedWorkExt)
  let $RedWorkExt = ' '
End-If
If isnull($FamlrSituatn)
  let $FamlrSituatn = ' '
End-If
If isnull($RelshipType)
  let $RelshipType = ' '
End-If
let $No_of_Dep = to_char(#No_of_Dep)

let $SQL-statement = 'GPESTAX2.SQR, InsertData, Insert, PS_GPES_CPER_TMP'
Begin-SQL On-Error=SQL-Error
INSERT INTO PS_GPES_CPER_TMP
           (OPRID,
            RUN_CNTL_ID,
            DESCR100,
            EMPLID,
            NATIONAL_ID,
            GPES_MONTHCD,
            GPES_DISABLTY_TYPE,
            GPES_CEUTA_MELILLA,
            GPES_RED_GEO,
            GPES_RED_WORK_EXT,
            GPES_FAMLR_SITUATN,
            GPES_RELSHIP_TYPE,
            ORIG_DEP_BENEF,
            GPES_TAX_BASE,
            GPES_TAX_PCT,
            GPES_SS_CT_EE,
            GPES_TOT_REDUCTION,
            GPES_REDUCTIONS,
            GPES_SALARY_WITHLD,
            GPES_SALARY_INCOME)
VALUES     ($Prcs_Oprid,
            $Prcs_Run_Cntl_ID,
            $TitleGroup,
            $Emplid,
            $NationalID,
            $Mnth,
            $DisabltyType,
            $CeutaMelilla,
            $RedGeo,
            $RedWorkExt,
            $FamlrSituatn,
            $RelshipType,
            $No_of_Dep,
            #BaseIRPF,
            #IRPF,
            #SocialSec,
            #Reduct,
            #RendIrreg,
            #AcumTaxes,
            #AcumEarnings)
End-SQL

End-Procedure ! InsertData


!************************************************************************
! Procedure: CountIRPF
!************************************************************************
Begin-Procedure CountIRPF
#debug do Fin-Debug-Msg('CountIRPF')

let #IRPF_Co = 0

let $SQL-statement = 'GPESTAX2.SQR, CountIRPF, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
COUNT(distinct CDIFF_A.GPES_TAX_PCT)  &NUMIRPF

  let #IRPF_Co = &NUMIRPF
  
  If #IRPF_Co > 1
    do CalculateDIFF
  End-If

FROM PS_GPES_CPER_TMP CDIFF_A
WHERE CDIFF_A.OPRID = $Prcs_Oprid
  AND CDIFF_A.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

End-Select

End-Procedure ! CountIRPF


!************************************************************************
! Procedure: CalculateDIFF
!************************************************************************
Begin-Procedure CalculateDIFF
#debug do Fin-Debug-Msg('CalculateDIFF')

let #IRPF_1   = 0
let $Employee = ''

let #MonthCur=to_number($MonthCur)

#debugd show '$Month To: ' $MonthCur

let $SQL-statement = 'GPESTAX2.SQR, CalculateDIFF, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
CDIFF_B.EMPLID
CDIFF_B.GPES_TAX_PCT
CDIFF_B.DESCR100
CDIFF_B.GPES_MONTHCD

  let $Employee = &CDIFF_B.EMPLID
  let #IRPF_1 = &CDIFF_B.GPES_TAX_PCT

  !If $Diff_FIND = 'NONE'
  !Else
    do CalculateDIFF_2
  !End-If

FROM PS_GPES_CPER_TMP CDIFF_B
WHERE CDIFF_B.OPRID = $Prcs_Oprid
  AND CDIFF_B.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND CDIFF_B.GPES_MONTHCD =#MonthCur
ORDER BY CDIFF_B.DESCR100,
         CDIFF_B.EMPLID,
         CDIFF_B.GPES_MONTHCD DESC

End-Select

do ReadDataPrint


End-Procedure ! CalculateDIFF


!************************************************************************
! Procedure: CalculateDIFF_2
!************************************************************************
Begin-Procedure CalculateDIFF_2
#debug do Fin-Debug-Msg('CalculateDIFF_2')

let #IRPF_2   = 0
!let $MonthCD2 = to_char(to_number($MonthCD) - 1)
let $MonthCD2 = RTRIM(to_char(#prevmonth), ' ')

#debugd show '$Month From: ' $MonthCD2

let $SQL-statement = 'GPESTAX2.SQR, CalculateDIFF_2, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
CDIFF_B2.GPES_TAX_PCT
CDIFF_B2.DESCR100
CDIFF_B2.EMPLID
CDIFF_B2.GPES_MONTHCD

  let #IRPF_2 = &CDIFF_B2.GPES_TAX_PCT
  let #Difference2 = Abs(#IRPF_1 - #IRPF_2)
  let $Difference2 = to_char(Abs(#IRPF_1 - #IRPF_2))
  If Abs(#IRPF_1 - #IRPF_2) >= Abs(#Difference)
  Else
    do DeleteEmployeeDIFF
  End-If

FROM PS_GPES_CPER_TMP CDIFF_B2
WHERE CDIFF_B2.OPRID = $Prcs_Oprid
  AND CDIFF_B2.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND CDIFF_B2.GPES_MONTHCD =$MonthCD2
  AND CDIFF_B2.EMPLID = $Employee
ORDER BY CDIFF_B2.DESCR100,
         CDIFF_B2.EMPLID,
         CDIFF_B2.GPES_MONTHCD DESC

End-Select

End-Procedure ! CalculateDIFF_2


!************************************************************************
! Procedure: Treat_Acum
!************************************************************************
Begin-Procedure Treat_Acum
#debug do Fin-Debug-Msg('Treat_Acum')

let $AcumEmplid = ''

let $SQL-statement = 'GPESTAX2.SQR, Treat_Acum, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
ACU.EMPLID

  let $AcumEmplid = &ACU.EMPLID
  do Treat_Acum_2
    
FROM PS_GPES_CPER_TMP ACU
WHERE ACU.OPRID = $Prcs_Oprid
  AND ACU.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
GROUP BY ACU.EMPLID

End-Select

End-Procedure ! Treat_Acum


!************************************************************************
! Procedure: Treat_Acum_2
!************************************************************************
Begin-Procedure Treat_Acum_2
#debug do Fin-Debug-Msg('Treat_Acum_2')

let #AcumCount        = 1
let #Acum_AcumTaxes_2 = 0
let #Acum_AcumEarn_2  = 0
let $Acum_Month       = ''


let $SQL-statement = 'GPESTAX2.SQR, Treat_Acum_2, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
ACU2.GPES_SALARY_WITHLD
ACU2.GPES_SALARY_INCOME
ACU2.GPES_MONTHCD

  let #Acum_AcumTaxes_2 = &ACU2.GPES_SALARY_WITHLD
  let #Acum_AcumEarn_2 = &ACU2.GPES_SALARY_INCOME
  let $Acum_Month = &ACU2.GPES_MONTHCD
  
  let #Acum_Month_Prev = to_number($Acum_Month)
  subtract  1  from  #Acum_Month_Prev
  let $Acum_Month_Prev = to_char(#Acum_Month_Prev)

  do Treat_Acum_3
  
FROM PS_GPES_CPER_TMP ACU2
WHERE ACU2.EMPLID = $AcumEmplid
      AND ACU2.OPRID = $Prcs_Oprid
      AND ACU2.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY ACU2.GPES_MONTHCD

End-Select

End-Procedure ! Treat_Acum_2


!************************************************************************
! Procedure: Treat_Acum_3
!************************************************************************
Begin-Procedure Treat_Acum_3
#debug do Fin-Debug-Msg('Treat_Acum_3')

If #AcumCount > 1

let #Acum_AcumTaxes_3 = 0
let #Acum_AcumEarn_3  = 0

If #Acum_Month_Prev < 10
  let $Acum_Month_Prev = $Acum_Month_Prev
End-If


let $SQL-statement = 'GPESTAX2.SQR, Treat_Acum_3, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
SUM(ACU3.GPES_SALARY_WITHLD) &Acum_AcumTaxes_3
SUM(ACU3.GPES_SALARY_INCOME) &Acum_AcumEarn_3 

  let #Acum_AcumTaxes_3 = &Acum_AcumTaxes_3
  let #Acum_AcumEarn_3 = &Acum_AcumEarn_3

  do Update_Acum

FROM PS_GPES_CPER_TMP ACU3
WHERE ACU3.EMPLID = $AcumEmplid
  AND (ACU3.GPES_MONTHCD = $Acum_Month_Prev
   OR ACU3.GPES_MONTHCD = $Acum_Month)
  AND ACU3.OPRID = $Prcs_Oprid
  AND ACU3.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-Select

End-If

  Add 1 to #AcumCount

End-Procedure ! Treat_Acum_3


!************************************************************************
! Procedure: Update_Acum
!************************************************************************
Begin-Procedure Update_Acum
#debug do Fin-Debug-Msg('Update_Acum')

let $SQL-statement = 'GPESTAX2.SQR, Update_Acum, Update, PS_GPES_CPER_TMP'

Begin-SQL On-Error=SQL-Error
UPDATE PS_GPES_CPER_TMP
SET GPES_SALARY_WITHLD = #Acum_AcumTaxes_3,
    GPES_SALARY_INCOME = #Acum_AcumEarn_3
WHERE EMPLID = $AcumEmplid
  AND GPES_MONTHCD = $Acum_Month
  AND OPRID = $Prcs_Oprid
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SQL

End-Procedure ! Update_Acum


!************************************************************************
! Procedure: DeleteEmployeeDIFF
!************************************************************************
Begin-Procedure DeleteEmployeeDIFF
#debug do Fin-Debug-Msg('DeleteEmployeeDIFF')

let $SQL-statement = 'GPESTAX2.SQR, DeleteEmployeeDIFF, Delete, PS_GPES_CPER_TMP'
Begin-SQL On-Error=SQL-Error
DELETE FROM PS_GPES_CPER_TMP
WHERE OPRID = $Prcs_Oprid
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND EMPLID = $Employee

End-SQL

End-Procedure ! DeleteEmployeeDIFF



!************************************************************************
! Procedure: DeleteUnique
!************************************************************************
Begin-Procedure DeleteUnique
#debug do Fin-Debug-Msg('DeleteUnique')


let $SQL-statement = 'GPESTAX2.SQR, DeleteUnique, Delete, PS_GPES_CPER_TMP'
Begin-SQL On-Error=SQL-Error
DELETE FROM PS_GPES_CPER_TMP 
WHERE OPRID=$Prcs_Oprid 
  AND RUN_CNTL_ID=$Prcs_Run_Cntl_ID
  AND EMPLID IN (SELECT EMPLID FROM PS_GPES_CPER_TMP 
     WHERE GPES_TAX_PCT<>#Difference 
     AND OPRID=$Prcs_Oprid 
     AND RUN_CNTL_ID=$Prcs_Run_Cntl_ID
  GROUP BY OPRID, RUN_CNTL_ID, EMPLID HAVING COUNT(distinct EMPLID)=1)

End-SQL



End-Procedure ! DeleteUnique


!************************************************************************
! Procedure: PrintHeadDetail
!************************************************************************
Begin-Procedure PrintHeadDetail
#debug do Fin-Debug-Msg('PrintHeadDetail')

  Print $TitleDown  (+1,) CENTER

  let $TitleGroup = RTRIM(&DESCR100, ' ')
  UPPERCASE $TitleGroup
  Print $TitleGroup  (+2,5)

  Print '-'                         (+2, 34, 48) FILL
  Print $ESTIMATION                 (  , +6, 12)
  Print '-'                         (  , +3, 47) FILL
  Print '-'                         (  , +3,  7) FILL
  Print $ACTUAL                     (  , +2,  6)
  Print '-'                         (  , +2,  7) FILL

  Print $EMPLOYEE_ID                (+1,  1, 11)
  Print $NATIONAL_ID                (  , +2, 12)
  Print $COMPARISION_MONTH          (  , +1)
  Print $DISABILITY_TYPE            (  , +2)
  Print $CEUTA_MELILLA1             (  , +2)
  Print $RED_MOBILITY1              (  , +1)
  Print $RED_WRK_LIFE_EXT1          (  , +2)
  Print $FAMILIAR_SITUATN1          (  , +2)
  Print $RELATION_TYPE1             (  , +2)
  Print $NBR_DEPENDENTS1            (  , +2)
  Print $IRPF_BASE                  (  , +3)
  Print $IRPF_WHITHLD_PCT1          (  , +2)
  Print $SOC_SEC_CONTRIBTN1         (  , +3)
  Print $TAX_REDUCTIONS             (  , +3)
  Print $NONREGULAR_INCOME1         (  , +2)
  Print $EE_INCOME                  (  , +2)
  Print $IRPFWITHLD_ACTUAL1         (  , +5)
  
  Print $CEUTA_MELILLA2             (+1, 45)
  Print $RED_MOBILITY2              (  , +3)
  Print $RED_WRK_LIFE_EXT2          (  , +5)
  Print $FAMILIAR_SITUATN2          (  , +4)
  Print $RELATION_TYPE2             (  , +3)
  Print $NBR_DEPENDENTS2            (  , +4)
  Print $IRPF_WHITHLD_PCT2          (  , +15)
  Print $SOC_SEC_CONTRIBTN2         (  , +3)
  Print $NONREGULAR_INCOME2         (  , +15)
  Print $IRPFWITHLD_ACTUAL2         (  , +18)

  Graphic                           (,1,175)  HORZ-LINE
  Position                          (+1)
  
End-Procedure ! PrintHeadDetail


!************************************************************************
! Procedure: ReadDataPrint
!************************************************************************
Begin-Procedure ReadDataPrint
#debug do Fin-Debug-Msg('ReadDataPrint')


let $TitleGroup   = ''
! Print TitleDown (MONTH YEAR)
If $Compare_Year = 'A'
   let $Period = $ALL_YEAR_LBL
Else                    ! 'C'
   let $Period = $COMPARATIVE_LBL || ' ' || $Difference
End-If
let $TitleDown = Upper($TitleDown || ' - ' || $Period)


let $SQL-statement = 'GPESTAX2.SQR, ReadDataPrint, Select, PS_GPES_CPER_TMP'
Begin-Select On-Error=SQL-Error
R.DESCR100 &DESCR100 ()       ON-BREAK Before=PrintHeadDetail Print=Never Level=1
R.EMPLID                    (, 1,11) ON-BREAK Print=Change SKIPLINES=1
R.NATIONAL_ID               (,14,12) ON-BREAK Print=Change
R.GPES_MONTHCD
R.GPES_DISABLTY_TYPE
R.GPES_CEUTA_MELILLA
R.GPES_RED_GEO
R.GPES_RED_WORK_EXT
R.GPES_FAMLR_SITUATN
R.GPES_RELSHIP_TYPE
R.ORIG_DEP_BENEF
R.GPES_TAX_BASE
R.GPES_TAX_PCT
R.GPES_SS_CT_EE
R.GPES_TOT_REDUCTION
R.GPES_REDUCTIONS
R.GPES_SALARY_WITHLD
R.GPES_SALARY_INCOME

  let #Mnth         =  &R.GPES_MONTHCD
  let $DisabltyType =  &R.GPES_DISABLTY_TYPE
  let $FieldName    =  'GPES_DISABLTY_TYPE'
  let $FieldValue   =  $DisabltyType
  do Read-Translate-Table
  let $DisabltyType_Xlt = Rtrim($XLatshortName, ' ')
  let $CeutaMelilla =  &R.GPES_CEUTA_MELILLA
  let $RedGeo       =  &R.GPES_RED_GEO
  let $RedWorkExt   =  &R.GPES_RED_WORK_EXT
  let $FamlrSituatn =  &R.GPES_FAMLR_SITUATN
  let $RelshipType  =  &R.GPES_RELSHIP_TYPE
  let $No_of_Dep    =  &R.ORIG_DEP_BENEF

  Do Format-Number(#Mnth, $out, '99')
  Print $out                                    (,29, 3)
  Print $DisabltyType_Xlt                       (,34,10)
  Print $CeutaMelilla                           (,48, 1)
  Print $RedGeo                                 (,57, 1)
  Print $RedWorkExt                             (,66, 1)
  Print $FamlrSituatn                           (,77, 1)
  Print $RelshipType                            (,85, 1)
  Print $No_of_Dep                              (,93, 1)
  Do Format-Number(&R.GPES_TAX_BASE, $out, '999,999.99')
  Print $out                                    (, 98,10)
  Do Format-Number(&R.GPES_TAX_PCT, $out, '99')
  Print $out                                    (,110, 2)
  Do Format-Number(&R.GPES_SS_CT_EE, $out, '99,999.99')
  Print $out                                    (,116, 9)
  Do Format-Number(&R.GPES_TOT_REDUCTION, $out, '999,999.99')
  Print $out                                    (,128,10)
  Do Format-Number(&R.GPES_REDUCTIONS, $out, '999,999.99')
  Print $out                                    (,141,10)
  Do Format-Number(&R.GPES_SALARY_INCOME, $out, '999,999.99')
  Print $out                                    (,153,10)
  Do Format-Number(&R.GPES_SALARY_WITHLD, $out, '999,999.99')
  Print $out                                    (,166,10)

  Next-Listing

  If #current-line > 49
    New-Page
    do PrintHeadDetail
  End-If

FROM PS_GPES_CPER_TMP R
WHERE R.OPRID = $Prcs_Oprid
  AND R.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY R.DESCR100,
         R.EMPLID,
         R.GPES_MONTHCD DESC

End-Select

End-Procedure ! ReadDataPrint


!************************************************************************
! Procedure: Fin-Debug-Msg
!************************************************************************
Begin-Procedure Fin-Debug-Msg($ProcedureName)

  display ''
  display '----------------------------------'
  display $ProcedureName
  #debugt date-time () {Native-DateTime} &SysDateTime
  #debugt move &SysDateTime to $SysDateTime
  #debugt show 'TIMING, ' $ProcedureName ', ' $SysDateTime
  display ''

End-Procedure ! Fin-Debug-Msg


!************************************************************************
! Include SQCs
!************************************************************************
#Include 'sqlerr.sqc'    !SQL Error Handling Procedure
#include 'prcsdef.sqc'   !Update Process Request variable declare
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
!#Include 'datemath.sqc'  
#include 'sqrtrans.sqc'
#include 'reset.sqc'