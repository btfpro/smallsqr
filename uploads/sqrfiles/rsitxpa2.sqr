!***********************************************************************
! RSITXPA2:   PA Tax Balance Reconciliation Report                     *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  11/21/2012 RSI-HCM102694  v1.0                                      *
!  Descr: Create TAX_BALANCE with RSI_TAXPA_LD Audit Report            *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   ! Set Environment
#include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information
#include 'setup32.sqc'  ! Printer and Page-Size Initialization
#Include 'usarpt.sqc'   ! USA-specific variables

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup
#Define Prgm_Ver       1.0
#Define Max_Rows       500000
#Define Dyn-S          [
#Define Dyn-E          ]

#Define OutOfState    880000


  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

!Array Put and Get display
!#Define DebugA

!Show Processing Data Flow
!#Define DebugD

!Show SQC debug statements
!#Define Debugx

End-Setup

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program
  do Initialization

  Show $sqr-platform
  Show 'RSITXPA2.SQR - Version '  {Prgm_Ver}
  Show '**************************************************'
  let $Start = datenow()
  Show 'Report Started at : ' $Start
  Show ''
  Show $ReportDescr
  Show ''


  If $prcs_process_instance <> ''
     do Get-Rptg-Parms
  Else

     input $Prcs_OprID batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     If $Prcs_OprID = '' and $Prcs_Run_Cntl_ID = ''
        Show ''
        Show 'Report requires Operator ID and Run Control ID used on the Run Control Records to run.'
        Show ''
        STOP
     Else
        do Get-Rptg-Parms
     End-If
  End-If

  do Format-Report-Parameters
  do Get-Calendar-Year-Id        !$Calendar_Year_Id
  do Show-Report-Parameters
  do Process-Main

  let $End = datenow()

  Show 'Report Ended at : ' $End
  Show '**************************************************'

  do Stdapi-Term              ! End of Job Processing

End-Program


!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Set-DB

  let $ReportID       = 'RSITXPA2'
  let $ReportDescr    = 'PA Act 32 File Submission History to Tax Balance Record Reconciliation Report'

  let $NoRecordMsg    = 'No corresponding tax information exists in this record for this employee'
  let $ReconciledMsg  = 'The TAX_BALANCE and RSI_TAXPA_LD records are reconciled – no records were identified with differences in Taxable Gross or Tax Amounts for this reporting period.'
  let $NoDataMsg      = 'The following table(s) has no data for the specified run control parameters:  '
  let $NoDataMsg2     = '.  Please review the run control parameters and run again.'
  let $NoSortMsg      = 'Report was generated without selecting the Report Sort/Total Options on the run control; and is therefore defaulting to the Emplid within Company sort order'
  let $GenerateMsg    = 'Warning – Run Control Option Mismatch.  The Generate Reconciliation Report option should be selected on the run control to run this report; '
  let $GenerateMsg2   = 'verify the run control options and resubmit the correct report for processing.'
  let $ExceptionMsg   = 'Data inconsistencies with the work and/or resident PSD codes were identified with these adjusted records.  Please review and perform any adjustments necessary to correctly report the PSD codes.'
  let $NoExceptionMsg = 'No work and/or resident PSD code data inconsistency records found for the specified Run Control parameters.'


   Create-Array
     Name=RSI_TAXPA_LD
     size={Max_Rows}
     field=COMPANY:char
     field=LOCALITY:char
     field=EMPLID:char
     field=TXGRS:number
     field=TAX:number
     field=WRK_PSD:char
     field=RES_PSD:char

   Create-Array
     Name=TAX_BALANCE
     size={Max_Rows}
     field=COMPANY:char
     field=LOCALITY:char
     field=EMPLID:char
     field=TXGRS:number
     field=TAX:number

   Create-Array
     Name=EMPLOYEES
     size={Max_Rows}
     field=COMPANY:char
     field=LOCALITY:char
     field=EMPLID:char
     field=NAME:char

End-Procedure Initialization

!***********************************************************************
! Procedure Set-DB
!***********************************************************************
Begin-Procedure Set-DB

    #IfDef DB2ALL
       #Define DB2
    #EndIf
    #IfDef DB2UNIX
       #Define DB2
    #EndIf
    #IfDef DB2400
       #Define DB2
    #EndIf
    #IfDef DB2DDCS
       #Define DB2
    #EndIf

End-Procedure Set-DB

!***********************************************************************
! Procedure Get-Rptg-Parms
!***********************************************************************
Begin-Procedure Get-Rptg-Parms

BEGIN-SELECT
FF.RPTG_PERIOD           &FF.RPTG_PERIOD
FF.BALANCE_YEAR          &FF.BALANCE_YEAR
FF.BALANCE_PERIOD        &FF.BALANCE_PERIOD
FF.REG_SELECT_COMP       &FF.REG_SELECT_COMP
FF.RSI_RECON_RPT         &FF.RSI_RECON_RPT
FF.RSI_SORT              &FF.RSI_SORT

  move &FF.RPTG_PERIOD     to $Rptg_Period
  move &FF.BALANCE_YEAR    to #Balance_Year
  move &FF.BALANCE_PERIOD  to #Balance_Period_RC
  move &FF.REG_SELECT_COMP to $Sel_Company
  move &FF.RSI_RECON_RPT   to $Recon_Rpt
  move &FF.RSI_SORT        to $RSI_Sort

  if $Sel_Company = 'C'
     do Get-Rptg-Companies
     let $AND_RSITAX_CO_LIST  = 'AND RSITAX.COMPANY IN '   || $Company_List
     let $AND_TAXBAL_CO_LIST  = 'AND TAXBAL.COMPANY IN '   || $Company_List
  end-if

FROM PS_RC_RSITAXPA_TBL FF
WHERE FF.OPRID       = $Prcs_OprID
  AND FF.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

End-Procedure Get-Rptg-Parms

!***********************************************************************
! Procedure Get-Rptg-Companies
!***********************************************************************
Begin-Procedure Get-Rptg-Companies

let $Company_List = '('

BEGIN-SELECT
FCO.SELECTED_COMPANY     &FCO.SELECTED_COMPANY

  let $Sel_Co = &FCO.SELECTED_COMPANY
  let $Company_List = $Company_List || '''' || $Sel_Co  || '''' || ','

FROM PS_RC_RSITAXPA_CO FCO
WHERE FCO.OPRID       = $Prcs_OprID
  AND FCO.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY FCO.SELECTED_COMPANY
END-SELECT

let $Company_List = rtrim($Company_List, ',') || ')'

End-Procedure Get-Rptg-Companies


!***********************************************************************
! Procedure Format-Report-Parameters
!***********************************************************************
Begin-Procedure Format-Report-Parameters

  if $Recon_Rpt <> 'Y'
    let $GenerateMsg_Prt  =   $GenerateMsg
  end-if

  if rtrim($RSI_Sort, ' ') = ''
      let $RSI_Sort        = 'E'
      let $NoSortMsg_Prt   = $NoSortMsg
  end-if

!Convert parameters for select statements and print formatting
  move #Balance_Year       to $BalYear_Prt    9999
  move #Balance_Period_RC  to $BalPeriod_Prt  89

  Evaluate $Rptg_Period
    When = 'A'
      let $Hdr_Rpt_Period = 'Annual Report ' || $BalYear_Prt
      let #Balance_Quarter = 4
      let #Balance_Period = 12
      break
    When = 'Q'
      Evaluate #Balance_Period_RC
        When = 1
          let $Qtr = '1st'
          let #Balance_Quarter = 1
          let #Balance_Period  = 3
          Break
        When = 2
          let $Qtr = '2nd'
          let #Balance_Quarter = 2
          let #Balance_Period  = 6
          Break
        When = 3
          let $Qtr = '3rd'
          let #Balance_Quarter = 3
          let #Balance_Period  = 9
          Break
        When = 4
          let $Qtr = '4th'
          let #Balance_Quarter = 4
          let #Balance_Period  = 12
          Break
      End-Evaluate
      let $Hdr_Rpt_Period = $Qtr   || ' Quarter ' || $BalYear_Prt
      let $AND_Tax_Balance_Qtr = ' AND TAXBAL.BALANCE_QTR = ' ||   edit(#Balance_Quarter, '89')
      break
    When = 'M'
      let #Balance_Period  = #Balance_Period_RC
      do Get-Month
      let $Hdr_Rpt_Period  = 'Monthly Report For ' || $Month || ' ' || $BalYear_Prt
      let #Balance_Quarter = trunc(((#Balance_Period_RC + 2) / 3), 0)
      let $AND_Tax_Balance_Qtr = ' AND TAXBAL.BALANCE_QTR = ' ||   edit(#Balance_Quarter, '89')
      let $AND_Tax_Balance_Period = ' AND TAXBAL.BALANCE_PERIOD = ' || edit(#Balance_Period, '89')
      break
  End-Evaluate

  move #Balance_Quarter    to $Balance_Quarter 89
  move #Balance_Period     to $Balance_Period  89

  let $Year_Begin_dt = $BalYear_Prt || '/01/01'
  move '1' to $Year4
    do Format-DateTime($Year_Begin_dt, $Year_Begin_dt, {DEFYMD}, '', 'native')

  let $fieldname      = 'RPTG_PERIOD'
  let $fieldvalue     = $Rptg_Period
    do Read-Translate-Table
  let $RptgMode_Prt  = rtrim($xlatshortname,' ')

  let $fieldname      = 'RSI_SORT'
  let $fieldvalue     = $RSI_Sort
    do Read-Translate-Table
  let $sort_xlat      = rtrim($xlatlongname,' ')

  do Get-Period-End-Dt
  do Load-PSD-Codes

!Setup dynamic sql for select statements and ordering of data
  #IfDef RSI_TOOLS_7.5
  Let $TAX_BALANCE    = 'PS_TAX_BALANCE TAXBAL,  PS_PERS_DATA_EFFDT N6'
  Let $RSI_TAXPA_LD   = 'PS_RSI_TAXPA_LD RSITAX, PS_PERS_DATA_EFFDT N8'

  Let $Name_Effdt6 = ' AND N6.EMPLID = TAXBAL.EMPLID'
                  || ' AND N6.EFFDT  =    (SELECT MAX(N7.EFFDT)        '
                  || '                     FROM PS_PERS_DATA_EFFDT N7  '
                  || '                     WHERE N7.EMPLID = N6.EMPLID '
                  || '                       AND N7.EFFDT <= ''' || $Period_End_Date || ''') '

  Let $Name_Effdt8 = ' AND N8.EMPLID = RSITAX.EMPLID'
                     || ' AND N8.EFFDT  =    (SELECT MAX(N9.EFFDT)        '
                     || '                     FROM PS_PERS_DATA_EFFDT N9  '
                     || '                     WHERE N9.EMPLID = N8.EMPLID '
                     || '                       AND N9.EFFDT <= ''' || $Period_End_Date || ''') '

  #Else
  Let $TAX_BALANCE   = 'PS_TAX_BALANCE TAXBAL,  PS_PERSON_NAME N6'
  Let $RSI_TAXPA_LD  = 'PS_RSI_TAXPA_LD RSITAX, PS_PERSON_NAME N8'
  Let $Name_Effdt6 = '    AND N6.EMPLID = TAXBAL.EMPLID'
  Let $Name_Effdt8 = '    AND N8.EMPLID = RSITAX.EMPLID'
  #EndIf

if  $AND_Tax_Balance_Qtr = ''
let $AND_Tax_Balance_Qtr = ' AND TAXBAL.BALANCE_QTR = (SELECT MAX(TB1.BALANCE_QTR) '
                                                    || 'FROM PS_TAX_BALANCE TB1  '
                                                    || 'WHERE TAXBAL.EMPLID = TB1.EMPLID '
                                                    || '  AND TAXBAL.COMPANY = TB1.COMPANY '
                                                    || '  AND TAXBAL.BALANCE_ID = TB1.BALANCE_ID '
                                                    || '  AND TAXBAL.BALANCE_YEAR = TB1.BALANCE_YEAR '
                                                    || '  AND TAXBAL.STATE = TB1.STATE '
                                                    || '  AND TAXBAL.LOCALITY  = TB1.LOCALITY '
                                                    || '  AND TAXBAL.TAX_CLASS = TB1.TAX_CLASS) '
end-if
    
if  $AND_Tax_Balance_Period = ''                       
let $AND_Tax_Balance_Period = ' AND TAXBAL.BALANCE_PERIOD = (SELECT MAX(TB2.BALANCE_PERIOD) '
                                                          || 'FROM PS_TAX_BALANCE TB2 '
                                                          || 'WHERE TAXBAL.EMPLID = TB2.EMPLID '
                                                          || '  AND TAXBAL.COMPANY = TB2.COMPANY '
                                                          || '  AND TAXBAL.BALANCE_ID = TB2.BALANCE_ID '
                                                          || '  AND TAXBAL.BALANCE_YEAR = TB2.BALANCE_YEAR '
                                                          || '  AND TAXBAL.BALANCE_QTR  = TB2.BALANCE_QTR '
                                                          || '  AND TAXBAL.STATE = TB2.STATE '
                                                          || '  AND TAXBAL.LOCALITY  = TB2.LOCALITY '
                                                          || '  AND TAXBAL.TAX_CLASS = TB2.TAX_CLASS) '
end-if


Evaluate $RSI_Sort
  When = 'E'
    Let $TaxBal_Sort   = ' TAXBAL.COMPANY, TAXBAL.EMPLID, TAXBAL.LOCALITY'
    Let $TaxLD_Sort    = ' RSITAX.COMPANY, RSITAX.EMPLID, RSITAX.LOCALITY'
    break
  When = 'M'
    Let $TaxBal_Sort   = ' TAXBAL.COMPANY, TAXBAL.LOCALITY, TAXBAL.EMPLID'
    Let $TaxLD_Sort    = ' RSITAX.COMPANY, RSITAX.LOCALITY, RSITAX.EMPLID'
    break
  When = 'N'
    Let $TaxBal_Sort   = ' TAXBAL.COMPANY, N6.LAST_NAME, N6.FIRST_NAME, N6.MIDDLE_NAME, TAXBAL.LOCALITY'
    Let $TaxLD_Sort    = ' RSITAX.COMPANY, N8.LAST_NAME, N8.FIRST_NAME, N8.MIDDLE_NAME, RSITAX.LOCALITY'
    break
  When = 'O'
    Let $TaxBal_Sort   = ' TAXBAL.COMPANY, TAXBAL.LOCALITY, N6.LAST_NAME, N6.FIRST_NAME, N6.MIDDLE_NAME'
    Let $TaxLD_Sort    = ' RSITAX.COMPANY, RSITAX.LOCALITY, N8.LAST_NAME, N8.FIRST_NAME, N8.MIDDLE_NAME'
    break
End-Evaluate


End-Procedure Format-Report-Parameters

!***********************************************************************
! Procedure Get-Period-End-Dt
!***********************************************************************
Begin-Procedure Get-Period-End-Dt

  move #Balance_Year   to $Period_End_Date xxxx
  move #Balance_Period to $Period_End_Month 09
  concat $Period_End_Month with $Period_End_Date -xx-31

  Evaluate $Period_End_Month
    When = '02'
      Evaluate $TaxYear2
        When = '12'
        When = '16'
        When = '20'
        When = '24'
        When = '28'
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'29')
          Break
        When-Other
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'28')
          Break
      End-Evaluate
      Break
    When = '04'
    When = '06'
    When = '09'
    When = '11'
      let $Period_End_Date = rtrim($Period_End_Date,'1')
      let $Period_End_Date = rpad($Period_End_Date,10,'0')
      Break
  End-Evaluate

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($Period_End_Date, $Period_End_Date, {DEFYMD}, '', 'native')

End-Procedure Get-Period-End-Dt

!***********************************************************************
! Procedure Load-PSD-Codes
!***********************************************************************
Begin-Procedure Load-PSD-Codes

  #IfDef ORACLE
     let $PSD_Lkup_Where_Clause = 'AND RPAD(LT.LOCALITY,10,'' '') = RPAD(LT1.LOCALITY,10,'' '') '
  #Else
     let $PSD_Lkup_Where_Clause = 'AND LT.LOCALITY = LT1.LOCALITY '
  #EndIf

  let $PSD_Code_Lookup_Where_Clause = 'LT.STATE = ''PA'' AND LT.OTH_LOCALITY_ABBRV <> '' '' AND LT.TAX_CLASS = ''H'' '
                                   || 'AND LT.EFFDT = (SELECT MAX(LT1.EFFDT) FROM PS_LOCAL_TAX_TBL LT1 '
                                   || 'WHERE LT.STATE = LT1.STATE '
                                   || $PSD_Lkup_Where_Clause
                                   || 'AND LT1.EFFDT <= ''' || $Period_End_Date  || ''') '

  load-lookup
    name         = PSD_CODES
    rows         = 3000
    sort         = SC
    table        = 'PS_LOCAL_TAX_TBL LT'
    where        = $PSD_Code_Lookup_Where_Clause
    key          = RTRIM(LT.OTH_LOCALITY_ABBRV)
    return_value = RTRIM(LT.LOCALITY)
    quiet

End-Procedure Load-PSD-Codes

!***********************************************************************
! Procedure Show-Report-Parameters
!***********************************************************************
Begin-Procedure Show-Report-Parameters

  Evaluate $Sel_Company
    When = 'R'
	Let $Sel_Company_display = 'All Reporting Companies'
        break
    When = 'C'
        Let $Sel_Company_display = 'Selected Reporting Companies'
        break
    When-Other
        Let $Sel_Company_display = 'blank'
  End-Evaluate

  Show '    *** Report Run Parameters ***'
  Show ' '
  Show 'Reporting Mode:               '  $RptgMode_Prt ' (' $Rptg_Period ')'
  Show 'Balance Year:                 '  $BalYear_Prt
  Show 'Balance Period:               '  $BalPeriod_Prt
  Show 'Generate Report               '  $Recon_Rpt
  Show 'Report Sort/Total Options:    '  $sort_xlat ' (' $RSI_Sort ')'
  Show 'Processing Option - Company:  '  $Sel_Company_display ' (' $Sel_Company ')'
  if $Sel_Company = 'C'
  Show 'Selected Companies:           '  $Company_List
  end-if


  #IfDef DebugD
  Show ' '
  Show 'Get-Calendar-Year-Id          ' $Calendar_Year_Id
  Show 'Balance Quarter (derived)     ' $Balance_Quarter
  Show 'Balance Period: (derived)     ' $Balance_Period
  Show 'Year Begin Date (derived)     ' $Year_Begin_dt
  Show 'Period End Date (derived)     ' $Period_End_Date
  Show '$AND_Tax_Balance_Qtr          ' $AND_Tax_Balance_Qtr
  Show '$AND_Tax_Balance_Period       ' $AND_Tax_Balance_Period
  #EndIf

  Show ' '

End-Procedure Show-Report-Parameters

!***********************************************************************
! Procedure Heading 7
!***********************************************************************
begin-heading 7
  #Include 'stdhdg01.sqc'

  print $ReportDescr             (2,)  center

if $Report =  $ReportID
  print 'Company: '              (3,1)
  print $Company_Prt             (,+3)
  print $Hdr_Rpt_Period          (,)  center
  print 'Sort:    '              (4,1)
  print $sort_xlat               (,+3)
end-if

if $Report =  $ReportID
  print 'REPORTING'              (6,80)
  print 'BALANCE'                (0,91)
  print 'BALANCE'                (0,103)
  print 'WORK'                   (0,126)
  print 'RECORD'                 (+1,2)
  print 'COMPANY'                (0,16)
  print 'EMPLOYEE ID'            (0,24)
  print 'NAME'                   (0,38)
  print 'MODE'                   (0,80)
  print 'YEAR'                   (0,91)
  print 'PERIOD'                 (0,103)
  print 'LOCALITY'               (0,112)
  print 'PSD'                    (0,126)
  print 'TAXABLE GROSS'          (0,141)
  print 'TAX'                    (0,171)
else
  print 'REPORTING'              (6,80)
  print 'BALANCE'                (0,91)
  print 'BALANCE'                (0,102)
  print 'WORK'                   (0,122)
  print 'RES'                    (0,135)
  print 'RECORD'                 (+1,2)
  print 'COMPANY'                (0,16)
  print 'EMPLOYEE ID'            (0,24)
  print 'NAME'                   (0,38)
  print 'MODE'                   (0,80)
  print 'YEAR'                   (0,91)
  print 'PERIOD'                 (0,102)
  print 'LOCALITY'               (0,110)
  print 'PSD'                    (0,122)
  print 'PSD'                    (0,135)
  print 'TAXABLE GROSS'          (0,149)
  print 'TAX'                    (0,175)
end-if

end-heading


!***********************************************************************
!Procedure Process-Main
!***********************************************************************
Begin-Procedure Process-Main

  let $Report =  $ReportID

  do Select-TAX_BALANCE
  do Select-RSI_TAXPA_LD

  do Check-Record-Counts


    if $NoDataMsg_Prt <> ''
      Print $NoDataMsg_Prt                    (+3,5)
    else
      do Read-Employees

       if #RSITAX > 0 or #TAXBAL > 0
         do Print-Totals
       end-if

    end-if
  
    if $NoSortMsg_Prt <> ''
      print $NoSortMsg_Prt                    (+3,5)
    end-if

    if $GenerateMsg_Prt <> ''
      print $GenerateMsg_Prt                  (+3,5)
      print $GenerateMsg2                     (+1,5)
    end-if

  new-page

  Let $Report =  'LOCEXEMPT'
  let $ReportDescr  = 'RSITAXPA Adjustment Records Identified with Data Inconsistencies'

  do Report-Location-Exempt
  do Log-Message

End-Procedure Process-Main

!***********************************************************************
!Procedure Check-Record-Counts
!***********************************************************************
Begin-Procedure Check-Record-Counts
let $REC = ''

 if #RSITAX = 0
     Let $REC = 'RSI_TAXPA_LD'
  end-if

  if #TAXBAL = 0
     Let $REC = 'TAX_BALANCE'
  end-if

  if #RSITAX = 0 and #TAXBAL = 0
     Let $REC = 'RSI_TAXPA_LD, TAX_BALANCE'
  end-if

  if $REC <> ''
    let $NoDataMsg_Prt    = $NoDataMsg || $REC ||  $NoDataMsg2
  end-if

#IfDef DebugD
  if $REC <> ''
        Show ' '
	Show '    Check-Record-Counts records with 0 rows, Record(s) = ' $REC
        Show ' '
  end-if
#EndIF


End-Procedure Check-Record-Counts

!***********************************************************************
!Procedure Select-TAX_BALANCE
!***********************************************************************
Begin-Procedure Select-TAX_BALANCE

BEGIN-SELECT
N6.LAST_NAME
N6.FIRST_NAME
N6.MIDDLE_NAME
TAXBAL.EMPLID
TAXBAL.COMPANY
TAXBAL.LOCALITY
sum(TAXBAL.TXGRS_YTD)       &TAXBAL.TXGRS_YTD
sum(TAXBAL.TXGRS_QTD)       &TAXBAL.TXGRS_QTD
sum(TAXBAL.TXGRS_MTD)       &TAXBAL.TXGRS_MTD
sum(TAXBAL.TAX_YTD)         &TAXBAL.TAX_YTD
sum(TAXBAL.TAX_QTD)         &TAXBAL.TAX_QTD
sum(TAXBAL.TAX_MTD)         &TAXBAL.TAX_MTD

    let $FirstName  = nvl(rtrim(ltrim(&N6.FIRST_NAME, ' '), ' '), ' ')
    let $MiddleName = nvl(rtrim(ltrim(&N6.MIDDLE_NAME, ' '), ' '), ' ')
    let $LastName   = nvl(rtrim(ltrim(&N6.LAST_NAME, ' '), ' '), ' ')
    let $Name       = $LastName || ',' ||  $FirstName || $MiddleName
    Let $Emplid     = nvl(rtrim(ltrim(&TAXBAL.EMPLID, ' '), ' '), ' ')
    Let $Company    = nvl(rtrim(ltrim(&TAXBAL.COMPANY, ' '), ' '), ' ')
    Let $Locality   = nvl(rtrim(ltrim(&TAXBAL.LOCALITY, ' '), ' '), ' ')
    Let #TXGRS_YTD  = &TAXBAL.TXGRS_YTD
    Let #TXGRS_QTD  = &TAXBAL.TXGRS_QTD
    Let #TXGRS_MTD  = &TAXBAL.TXGRS_MTD
    Let #TAX_YTD    = &TAXBAL.TAX_YTD
    Let #TAX_QTD    = &TAXBAL.TAX_QTD
    Let #TAX_MTD    = &TAXBAL.TAX_MTD
    Let $Array_Tbl  = 'TAXBAL'

      do Set_Period_Amounts
      do Store_Data_Array

FROM  {Dyn-S}$TAX_BALANCE{Dyn-E}
WHERE TAXBAL.BALANCE_ID      = $Calendar_Year_Id
  AND TAXBAL.BALANCE_YEAR    = #Balance_Year
  {Dyn-S}$AND_Tax_Balance_Qtr{Dyn-E}
  {Dyn-S}$AND_Tax_Balance_Period{Dyn-E}
  AND TAXBAL.STATE           = 'PA'
  AND TAXBAL.TAX_CLASS       = 'H'
  AND TAXBAL.LOCALITY       <> ' '
  {Dyn-S}$AND_TAXBAL_CO_LIST{Dyn-E}
  {Dyn-S}$Name_Effdt6{Dyn-E}

GROUP BY TAXBAL.COMPANY, TAXBAL.EMPLID, TAXBAL.LOCALITY, N6.LAST_NAME, N6.FIRST_NAME, N6.MIDDLE_NAME
ORDER BY {Dyn-S}$TaxBal_Sort{Dyn-E}
END-SELECT


End-Procedure Select-TAX_BALANCE

!***********************************************************************
!Procedure Select-RSI_TAXPA_LD
!***********************************************************************
Begin-Procedure Select-RSI_TAXPA_LD

BEGIN-SELECT
N8.LAST_NAME
N8.FIRST_NAME
N8.MIDDLE_NAME
RSITAX.EMPLID
RSITAX.COMPANY
RSITAX.LOCALITY
RSITAX.WRK_PSD_CODE
RSITAX.RES_PSD_CODE
sum(RSITAX.TXGRS_YTD)        &RSITAX.TXGRS_YTD
sum(RSITAX.TXGRS_QTD)        &RSITAX.TXGRS_QTD
sum(RSITAX.TXGRS_MTD)        &RSITAX.TXGRS_MTD
sum(RSITAX.TAX_YTD)          &RSITAX.TAX_YTD
sum(RSITAX.TAX_QTD)          &RSITAX.TAX_QTD
sum(RSITAX.TAX_MTD)          &RSITAX.TAX_MTD


    let $FirstName  = nvl(rtrim(ltrim(&N8.FIRST_NAME, ' '), ' '), ' ')
    let $MiddleName = nvl(rtrim(ltrim(&N8.MIDDLE_NAME, ' '), ' '), ' ')
    let $LastName   = nvl(rtrim(ltrim(&N8.LAST_NAME, ' '), ' '), ' ')
    let $Name       = $LastName || ',' ||  $FirstName || $MiddleName
    Let $Emplid     = nvl(rtrim(ltrim(&RSITAX.EMPLID, ' '), ' '), ' ')
    Let $Company    = nvl(rtrim(ltrim(&RSITAX.COMPANY, ' '), ' '), ' ')
    Let $Locality   = nvl(rtrim(ltrim(&RSITAX.LOCALITY, ' '), ' '), ' ')
    Let $WRK_PSD    = nvl(rtrim(ltrim(&RSITAX.WRK_PSD_CODE, ' '), ' '), ' ')
    Let $RES_PSD    = nvl(rtrim(ltrim(&RSITAX.RES_PSD_CODE, ' '), ' '), ' ')
    Let #TXGRS_YTD  = &RSITAX.TXGRS_YTD
    Let #TXGRS_QTD  = &RSITAX.TXGRS_QTD
    Let #TXGRS_MTD  = &RSITAX.TXGRS_MTD
    Let #TAX_YTD    = &RSITAX.TAX_YTD
    Let #TAX_QTD    = &RSITAX.TAX_QTD
    Let #TAX_MTD    = &RSITAX.TAX_MTD
    Let $Array_Tbl  = 'RSITAX'
    Let $PSDLocation = ''

      if rtrim($Locality, ' ') = '{OutOfState}'

        #IfDef NOPSD
            let $Check_PSD          = $RES_PSD
            do Get-PSD-Location
        #else
            let $PSDLocation        = $RES_PSD
        #EndIf

         if $PSDLocation <> ''
             let $Locality         = $PSDLocation
         else
             let $Company_S  = rpad($Company,3,' ') 
             let $Locality_S  = rpad($Locality,10,' ') 
             let $Emplid_S    = rpad($Emplid,11,' ') 
             Show '  Company ' $Company_S '  Locality ' $Locality_S '  Emplid ' $Emplid_S '   RECORD SKIPPED:  Employee with Out Of State work location, resident locality not found for PSD Code  >' $RES_PSD   '<'
         end-if

      end-if

      do Set_Period_Amounts
      do Store_Data_Array

FROM  {Dyn-S}$RSI_TAXPA_LD{Dyn-E}
WHERE RSITAX.BALANCE_YEAR    = #Balance_Year
  AND RSITAX.BALANCE_PERIOD  = #Balance_Period_RC
  AND RSITAX.RPTG_PERIOD     = $Rptg_Period
 {Dyn-S}$AND_RSITAX_CO_LIST{Dyn-E}
 {Dyn-S}$Name_Effdt8{Dyn-E}

GROUP BY RSITAX.COMPANY, RSITAX.EMPLID, RSITAX.LOCALITY, RSITAX.WRK_PSD_CODE, RSITAX.RES_PSD_CODE, N8.LAST_NAME, N8.FIRST_NAME, N8.MIDDLE_NAME
ORDER BY {Dyn-S}$TaxLD_Sort{Dyn-E}

END-SELECT


End-Procedure Select-RSI_TAXPA_LD


!***********************************************************************
! Procedure Set_Period_Amounts
!***********************************************************************
Begin-Procedure Set_Period_Amounts

    Evaluate $Rptg_Period
      When = 'A'
        move #TXGRS_YTD to #TaxGrs
        move #TAX_YTD   to #Tax
        Break
      When = 'Q'
        move #TXGRS_QTD to #TaxGrs
        move #TAX_QTD   to #Tax
        Break
      When = 'M'
        move #TXGRS_MTD to #TaxGrs
        move #TAX_MTD   to #Tax
        Break
    End-Evaluate

End-Procedure Set_Period_Amounts

!***********************************************************************
! Procedure Store_Data_Array
!***********************************************************************
Begin-Procedure Store_Data_Array

if $Array_Tbl = 'RSITAX'

  let #RSITAX_Tmp   =  0
  let $Found_RSITAX = 'N'
  let $Search_Key   = $Company || $Locality || $Emplid

      !This loop is to accumulate amounts for the same Locality
      While #RSITAX_Tmp < #RSITAX
        Get $Company_LD  $Locality_LD  $Emplid_LD From  RSI_TAXPA_LD(#RSITAX_Tmp) COMPANY LOCALITY EMPLID

        let $Tmp_Key   = $Company_LD || $Locality_LD || $Emplid_LD

            if $Search_Key = $Tmp_Key
              let $Found_RSITAX = 'Y'

                 #IfDef DebugA
                   let $RSITAX_Tmp  = edit(#RSITAX_Tmp, '888,889')
                   let $TaxGrs   = edit(#TaxGrs , '888,888,889.99')
                   let $Tax      = edit(#Tax    , '888,888,889.99')

                   Show '     ADD AMOUNTS ' $Company_LD '|'  $Locality_LD '|' $Emplid_LD  '|' $TaxGrs '|' $Tax '| TO RSI_TAXPA_LD (' $RSITAX_Tmp ')'
                 #EndIF

              Array-Add #TaxGrs  #Tax To  RSI_TAXPA_LD(#RSITAX_Tmp) TXGRS TAX
              break
            end-if

        Add 1 to #RSITAX_Tmp
      End-While

  if $Found_RSITAX = 'N'

      if #RSITAX < {Max_Rows}
            #IfDef DebugA
                        let $RSITAX  = edit(#RSITAX, '888,889')
            Show '    PUT ' $Company '|'  $Locality '|' $Emplid '|' #TaxGrs '|'  #Tax '| into RSI_TAXPA_LD (' $RSITAX ')'
            #EndIF

        Put $Company  $Locality $Emplid  #TaxGrs   #Tax  $WRK_PSD  $RES_PSD  Into RSI_TAXPA_LD(#RSITAX)
        Add 1 to #RSITAX
    
      else
          Display 'Cache capacity exceeded for RSI_TAXPA_LD Data'
          Stop
      end-if

  end-if

end-if

if $Array_Tbl = 'TAXBAL'
  if #TAXBAL < {Max_Rows}
          #IfDef DebugA
                    let $TAXBAL  = edit(#TAXBAL, '888,889')
          Show '    PUT ' $Company '|'  $Locality '|' $Emplid '|' $TaxGrs  '|' #Tax '| into TAX_BALANCE (' $TAXBAL ')'
          #EndIF
    Put $Company  $Locality  $Emplid  #TaxGrs   #Tax  Into TAX_BALANCE(#TAXBAL)
    Add 1 to #TAXBAL

  else
      Display 'Cache capacity exceeded for TAX_BALANCE Data'
      Stop
  end-if
end-if

!Put each unique break parameter into control array
let #EE = 0
let $Search_Key   = $Company || $Locality || $Emplid

    While #EE < {Max_Rows}

      Get $Comp $Loc $Empl $N From EMPLOYEES(#EE)

        let $Found_Key =  $Comp || $Loc || $Empl
        if  $Found_Key = $Search_Key
            Break
        else
            if $Found_Key = ''
               Put $Company  $Locality $Emplid  $Name  Into EMPLOYEES(#EE)
                    #IfDef DebugA
                    Show '    PUT ' $Company '|'  $Locality '|' $Emplid  '| into EMPLOYEES (' #EE ')'
                    #EndIF
               Add 1 to #EE
               Add 1 to #EE_Count
               Break
            end-if
         end-if

      Add 1 to #EE

      if #EE = {Max_Rows}
        Display 'Cache capacity exceeded for EMPLOYEES Data'
        Stop
      end-if

    End-While

End-Procedure Store_Data_Array

!***********************************************************************
!Procedure Read-Employees
!***********************************************************************
Begin-Procedure Read-Employees

let   #EE_Read   = 0
While #EE_Read < #EE_Count

  Get $Company1   $Locality1  $Emplid1  $EE_Name1  From EMPLOYEES(#EE_Read)
  let $Search_Key   = $Company1 || $Locality1 || $Emplid1

  if $Search_Key = ''
     Break
  end-if


  ! Check location agency active status
  if $Locality1 <> $Prev_Locality1
      let $Check_Locality       = $Locality1
      do Determine-PSD-Code     !Sets $Agency_Status flag
  end-if


  if $Agency_Status = 'A'

      Get $Company   $Locality  $Emplid  $EE_Name  From EMPLOYEES(#EE_Read)
      let $Search_Key   = $Company || $Locality || $Emplid

          #IfDef DebugA
            Show ' '
            Show 'Processing Employee record ' $Company '|'  $Locality '|' $Emplid  '|  From EMPLOYEES (' #EE_Read ')'
          #EndIF

      Do Process-Report-Data

      let $Prev_Locality = $Locality
      let $Prev_Company  = $Company
  else

         let $Company_S  = rpad($Company1,3,' ') 
         let $Locality_S  = rpad($Locality1,10,' ') 
         let $Emplid_S    = rpad($Emplid1,11,' ') 
         Show '  Company ' $Company_S '  Locality ' $Locality_S '  Emplid ' $Emplid_S '   RECORD SKIPPED:  Active Agency not found for balance year using PSD Code >'  $PSDCode   '<'

      Add 1 to #NoAgency
  end-if

let $Prev_Locality1 = $Locality1
Add 1 to #EE_Read

End-While

  Let #TAXBAL = #TAXBAL - #TAXBAL_Zero         !TAX_BALANCE selected minus TAX_BALANCE records with 0 amounts for run paramters
  Let #RSITAX = #RSITAX - #RSITAX_Zero         !RSI_TAXPA_LD selected minus RSI_TAXPA_LD records with 0 amounts for run paramters
  Let #EE_Count = #EE_Count - (#RSITAX_Zero + #TAXBAL_Zero)

  Let $TAXBAL_Count     = edit(#TAXBAL, '999,999')
  Let $RSITAX_Count     = edit(#RSITAX, '999,999')
  Let $Match_Count      = edit(#MatchCount, '999,999')
  Let $PrintDiff_Count  = edit(#PrintDiffCount, '999,999')
  let $NoAgency_Count   = edit(#NoAgency, '999,999')
  Let $EMPLOYEES_Count  = edit(#EE_Count, '999,999')

End-Procedure Read-Employees

!***********************************************************************
!Procedure Process-Report-Data
!***********************************************************************
Begin-Procedure Process-Report-Data


     !Locality total break
     if $Locality <> $Prev_Locality and $Prev_Locality <> ''
        if $RSI_Sort = 'M' or $RSI_Sort = 'O'
          let #Print_Total = 3
          do Format-Totals
        end-if
     end-if

     !Company total break
     if $Company <> $Prev_Company
       !For the subtotal and header
       if $Prev_Company = ''
           do Get-Company-Data
           let $Company_PRT  = $CompanyName
       else
           let $Save_Company = $Company
           let $Company      = $Prev_Company
           do Get-Company-Data
           let $Company_PRT  = $CompanyName
           let $Company      = $Save_Company

           let #Print_Total = 2
           do Format-Totals

           do Get-Company-Data
           let $Company_PRT  = $CompanyName
       end-if
     end-if

      !For each company employee location, search for records in each table

       let $Array_Tbl = 'RSITAX'
         do Search-Detail-Array

       let $Array_Tbl = 'TAXBAL'
         do Search-Detail-Array

     do Set-Print-Vars
     do Compare-Tax-Balances
     do Clear-Print-Vars


End-Procedure Process-Report-Data

!***********************************************************************
!Procedure Search-Detail-Array
!***********************************************************************
Begin-Procedure Search-Detail-Array

if $Array_Tbl = 'RSITAX'

    let $Found_RSITAX = 'N'
    let #TaxGrs_LD    =  0
    let #Tax_LD       =  0
    let #RSITAX_Tmp   =  0

      While #RSITAX_Tmp < #RSITAX
        Get $Company_LD  $Locality_LD  $Emplid_LD From  RSI_TAXPA_LD(#RSITAX_Tmp) COMPANY LOCALITY EMPLID

        let $Tmp_Key   = $Company_LD || $Locality_LD || $Emplid_LD

            if $Search_Key = $Tmp_Key
              let $Found_RSITAX = 'Y'
              Get #TaxGrs_LD  #Tax_LD $WRK_PSD  $RES_PSD From  RSI_TAXPA_LD(#RSITAX_Tmp) TXGRS  TAX  WRK_PSD  RES_PSD

                 #IfDef DebugA
                   let $RSITAX_Tmp  = edit(#RSITAX_Tmp, '888,889')
                   let $TaxGrs_LD   = edit(#TaxGrs_LD , '888,888,889.99')
                   let $Tax_LD      = edit(#Tax_LD    , '888,888,889.99')

                   Show '     GET ' $Company_LD '|'  $Locality_LD '|' $Emplid_LD  '|' $TaxGrs_LD '|' $Tax_LD '|' $WRK_PSD '|' $RES_PSD '| From RSI_TAXPA_LD (' $RSITAX_Tmp ')'
                 #EndIF
              break
            end-if

        Add 1 to #RSITAX_Tmp
      End-While

end-if

if $Array_Tbl = 'TAXBAL'

    let $Found_TAXBAL = 'N'
    let #TaxGrs_TB    =  0
    let #Tax_TB       =  0
    let #TAXBAL_Tmp   =  0

      While #TAXBAL_Tmp < #TAXBAL
        Get $Company_TB  $Locality_TB  $Emplid_TB  From  TAX_BALANCE(#TAXBAL_Tmp) COMPANY LOCALITY EMPLID

        let $Tmp_Key   = $Company_TB || $Locality_TB || $Emplid_TB

            if $Search_Key = $Tmp_Key
              let $Found_TAXBAL = 'Y'
              Get #TaxGrs_TB  #Tax_TB From  TAX_BALANCE(#TAXBAL_Tmp) TXGRS TAX

                  #IfDef DebugA
                   let $TAXBAL_Tmp  = edit(#TAXBAL_Tmp, '888,889')
                   let $TaxGrs_TB   = edit(#TaxGrs_TB , '888,888,889.99')
                   let $Tax_TB      = edit(#Tax_TB    , '888,888,889.99')
                   Show '     GET ' $Company_TB '|'  $Locality_TB '|' $Emplid_TB  '|' $TaxGrs_TB '|' $Tax_TB '| From TAX_BALANCE (' $TAXBAL_Tmp ')'
                  #EndIF
              break
            end-if

        Add 1 to #TAXBAL_Tmp
      End-While

end-if

End-Procedure Search-Detail-Array

!***********************************************************************
! Procedure Compare-Tax-Balances
!***********************************************************************
Begin-Procedure Compare-Tax-Balances


if $Found_RSITAX = 'Y' and $Found_TAXBAL = 'Y'

  if #TaxGrs_LD <> #TaxGrs_TB or #Tax_LD <> #Tax_TB

    let $Record_Prt        = 'RSI_TAXPA_LD'
    let #TaxableGross_Prt  = #TaxGrs_LD
    let #Tax_Prt           = #Tax_LD
      Do Print-Detail-Line

    let $Record_Prt        = 'TAX_BALANCE'
    let #TaxableGross_Prt  = #TaxGrs_TB
    let #Tax_Prt           = #Tax_TB
      Do Print-Detail-Line

    Add 1 to #PrintDiffCount
  else
    !Matched records
          #IfDef DebugD
           let #TaxableGross_Prt     = #TaxGrs_TB
           let #Tax_Prt              = #Tax_TB
           Show '   Records Match:    ,'  noline
           Show $Emplid_Prt        '  ,'  noline
           Show $EE_Name_Prt       '  ,'  noline
           Show $RptgMode_Prt      '  ,'  noline
           Show $BalYear_Prt       '  ,'  noline
           Show $BalPeriod_Prt     '  ,'  noline
           Show $Locality_Prt      '  ,'  noline
           Show #TaxableGross_Prt  '  ,'  noline
           Show #Tax_Prt           '  ,'
          #EndIf
    Add 1 to #MatchCount
  end-if

end-if


if $Found_RSITAX = 'Y' and $Found_TAXBAL = 'N'

    if #TaxGrs_LD = 0 And #Tax_LD = 0
       #IfDef DebugD
         let $Company_S  = rpad($Company,3,' ') 
         let $Locality_S  = rpad($Locality,10,' ') 
         let $Emplid_S    = rpad($Emplid,11,' ') 
         Show '  Company ' $Company_S '  Locality ' $Locality_S '  Emplid ' $Emplid_S  '   RECORD SKIPPED:  Zero Amounts in RSI_TAXPA_LD, no corresponding TAX_BALANCE record. '
        #EndIF
      Add 1 to #RSITAX_Zero
    else
    
      let $Record_Prt        = 'RSI_TAXPA_LD'
      let #TaxableGross_Prt  = #TaxGrs_LD
      let #Tax_Prt           = #Tax_LD
        Do Print-Detail-Line
    
      let $Record_Prt        = 'TAX_BALANCE'
      let $Emplid_Prt        = $NoRecordMsg
      let #TaxableGross_Prt  = 0
      let #Tax_Prt           = 0
        Do Print-Detail-Line
    
      Add 1 to #PrintDiffCount
    end-if
end-if


if $Found_RSITAX = 'N' and $Found_TAXBAL = 'Y'

    If #TaxGrs_TB  = 0 And #Tax_TB = 0
       #IfDef DebugD
         let $Company_S  = rpad($Company,3,' ') 
         let $Locality_S  = rpad($Locality,10,' ') 
         let $Emplid_S    = rpad($Emplid,11,' ') 
         Show '  Company ' $Company_S '  Locality ' $Locality_S '  Emplid ' $Emplid_S  '   RECORD SKIPPED:  Zero Amounts in TAX_BALANCE , no corresponding RSI_TAXPA_LD record. '
       #EndIF
      Add 1 to #TAXBAL_Zero
    else
    
      let $Record_Prt        = 'RSI_TAXPA_LD'
      let $Emplid_Prt        = $NoRecordMsg
      let #TaxableGross_Prt  = 0
      let #Tax_Prt           = 0
        Do Print-Detail-Line
    
      let $Record_Prt        = 'TAX_BALANCE'
      let $Emplid_Prt        = $Emplid
      let #TaxableGross_Prt  = #TaxGrs_TB
      let #Tax_Prt           = #Tax_TB
        Do Print-Detail-Line
    
      Add 1 to #PrintDiffCount
    end-if
end-if

#IfDef DebugA
	Show '   Compare-Tax-Balances:  $Found_RSITAX = '  $Found_RSITAX '  Found_TAXBAL = ' $Found_TAXBAL '    $Emplid_Prt = ' $Emplid_Prt
#EndIF
End-Procedure Compare-Tax-Balances

!***********************************************************************
! Procedure Set-Print-Vars
!***********************************************************************
Begin-Procedure Set-Print-Vars

let $Emplid_Prt        = $Emplid
let $EE_Name_Prt       = $EE_Name
let $Locality_Prt      = $Locality
let $Co_Prt            = $Company

End-Procedure Set-Print-Vars

!***********************************************************************
! Procedure Clear-Print-Vars
!***********************************************************************
Begin-Procedure Clear-Print-Vars

let $Emplid_Prt        = ''
let $EE_Name_Prt       = ''
let #TaxableGross_Prt  = 0
let #Tax_Prt           = 0

End-Procedure Clear-Print-Vars

!***********************************************************************
! Procedure Print-Detail-Line
!***********************************************************************
Begin-Procedure Print-Detail-Line

if $Record_Prt  = 'RSI_TAXPA_LD'
  if #current-line > 55
     new-page
  end-if
end-if

  print $Record_Prt                   (+1,2)
  print $Co_Prt                      (,18)
  print $Emplid_Prt                   (0,24)

if $Emplid_Prt  <> $NoRecordMsg
  print $EE_Name_Prt                  (0,38)
  print $RptgMode_Prt                 (0,80)
  print $BalYear_Prt                  (0,91)
  print $BalPeriod_Prt                (0,103)
  print $Locality_Prt                 (0,112)

if $Record_Prt  = 'RSI_TAXPA_LD'
  print $PSDCode                      (0,126)
end-if
  print #TaxableGross_Prt             (0,140)  edit '999,999,999.99'
  print #Tax_Prt                      (0,160)  edit '999,999,999.99'
end-if

if $Record_Prt  = 'TAX_BALANCE'
  Position                            (+1)
end-if

  do Add-To-Totals

End-Procedure Print-Detail-Line

!***********************************************************************
! Procedure Add-To-Totals
!***********************************************************************
Begin-Procedure Add-To-Totals

if $Record_Prt  = 'RSI_TAXPA_LD'
  Add #TaxGrs_LD  to  #LOC_TaxGrs_LD
  Add #Tax_LD     to  #LOC_Tax_LD

  Add #TaxGrs_LD  to  #CO_TaxGrs_LD
  Add #Tax_LD     to  #CO_Tax_LD

  Add #TaxGrs_LD  to  #TOT_TaxGrs_LD
  Add #Tax_LD     to  #TOT_Tax_LD
else
  Add #TaxGrs_TB  to  #LOC_TaxGrs_TB
  Add #Tax_TB     to  #LOC_Tax_TB

  Add #TaxGrs_TB  to  #CO_TaxGrs_TB
  Add #Tax_TB     to  #CO_Tax_TB

  Add #TaxGrs_TB  to  #TOT_TaxGrs_TB
  Add #Tax_TB     to  #TOT_Tax_TB
end-if

    Add 1 to #Loc_Print
    Add 1 to #Co_Print
    Add 1 to #Tot1_Print

End-Procedure Add-To-Totals

!***********************************************************************
! Procedure Print-Totals
!***********************************************************************
Begin-Procedure Print-Totals

Let $Report1_End = 'Y'

do Get-Company-Data
let $Company_PRT  = $CompanyName

if $RSI_Sort = 'M' or $RSI_Sort = 'O'
  let #Print_Total = 3
  if #current-line > 41
	new-page
  end-if
else
  let #Print_Total = 2
  if #current-line > 45
	new-page
  end-if
end-if

  While #Print_Total > 0
        do Format-Totals
    Subtract 1 from #Print_Total
  End-While

End-Procedure Print-Totals

!***********************************************************************
! Procedure Format-Totals
!***********************************************************************
Begin-Procedure Format-Totals

Evaluate #Print_Total
  When = 3
      ! Locality Total
      if #Loc_Print > 0 
        Let $Total_Descr  = 'Summary of Record Differences Identified for: '
        Let $SubTotal     =  $Locality_Prt
        Move #LOC_TaxGrs_LD   to  #T_TaxGrs_LD
        Move #LOC_Tax_LD      to  #T_Tax_LD
        Move #LOC_TaxGrs_TB   to  #T_TaxGrs_TB
        Move #LOC_Tax_TB      to  #T_Tax_TB

          do Print-Total
          Let #Loc_Print = 0 
      end-if
      do Reset-Subtotal
      break
  When = 2
      ! Company Total
      if #Co_Print > 0 
        Let $Total_Descr  = 'Summary of All Record Differences Identified: '
        Let $SubTotal     = $Company_PRT
        Move #CO_TaxGrs_LD    to  #T_TaxGrs_LD
        Move #CO_Tax_LD       to  #T_Tax_LD
        Move #CO_TaxGrs_TB    to  #T_TaxGrs_TB
        Move #CO_Tax_TB       to  #T_Tax_TB

          do Print-Total
          Let #Co_Print = 0 
          if $Report1_End <> 'Y'
            new-page
          end-if
      end-if
      do Reset-Subtotal

      break
  When = 1
      ! Grand Total
     if #Tot1_Print > 0
        Let $Total_Descr = 'Report Total of All Record Differences Identified: '
        Let $SubTotal     = ''
        Move #TOT_TaxGrs_LD   to  #T_TaxGrs_LD
        Move #TOT_Tax_LD      to  #T_Tax_LD
        Move #TOT_TaxGrs_TB   to  #T_TaxGrs_TB
        Move #TOT_Tax_TB      to  #T_Tax_TB

         do Print-Total
     else
         let $Company_Prt = ''
         let $ReconciledMsg_Prt = $ReconciledMsg
         Print $ReconciledMsg_Prt             (+3,5)
     end-if

End-Evaluate

End-Procedure Format-Totals

!***********************************************************************
! Procedure Print-Total
!***********************************************************************
Begin-Procedure Print-Total

    if  #Print_Total = 3
      Position                            (+1)
    else
      Position                            (+2)
    end-if

    if #current-line > 53
      new-page
    end-if

    if  #Print_Total = 1
      print $Total_Descr                  (+1,73)
    else
      print $Total_Descr                  (+1,78)
    end-if
    
      print $SubTotal                     (0,126)
      print 'RSI_TAXPA_LD'                (+1,126)
      print #T_TaxGrs_LD                  (0,137)  edit '99,999,999,999.99'
      print #T_Tax_LD                     (0,157)  edit '99,999,999,999.99'
      print 'TAX_BALANCE'                 (+1,126)
      print #T_TaxGrs_TB                  (0,137)  edit '99,999,999,999.99'
      print #T_Tax_TB                     (0,157)  edit '99,999,999,999.99'
   
    if  #Print_Total = 3
      if $Report1_End <> 'Y'
        Position                            (+2)
      end-if
    end-if



End-Procedure Print-Total

!***********************************************************************
! Procedure Reset-Subtotal
!***********************************************************************
Begin-Procedure Reset-Subtotal

if #Print_Total = 3
  Move 0 to #LOC_TaxGrs_LD
  Move 0 to #LOC_Tax_LD
  Move 0 to #LOC_TaxGrs_TB
  Move 0 to #LOC_Tax_TB
end-if

if #Print_Total = 2
  Move 0 to #CO_TaxGrs_LD
  Move 0 to #CO_Tax_LD
  Move 0 to #CO_TaxGrs_TB
  Move 0 to #CO_Tax_TB
end-if

if #Print_Total = 1
Move 0 to #TOT_TaxGrs_LD
Move 0 to #TOT_Tax_LD
Move 0 to #TOT_TaxGrs_TB
Move 0 to #TOT_Tax_TB
end-if

End-Procedure Reset-Subtotal


!***********************************************************************
! Procedure Get-Month
!***********************************************************************
Begin-Procedure Get-Month

  Evaluate #Balance_Period
    When = 1
      let $Month = 'January'
      Break
    When = 2
      let $Month = 'February'
      Break
    When = 3
      let $Month = 'March'
      Break
    When = 4
      let $Month = 'April'
      Break
    When = 5
      let $Month = 'May'
      Break
    When = 6
      let $Month = 'June'
      Break
    When = 7
      let $Month = 'July'
      Break
    When = 8
      let $Month = 'August'
      Break
    When = 9
      let $Month = 'September'
      Break
    When = 10
      let $Month = 'October'
      Break
    When = 11
      let $Month = 'November'
      Break
    When = 12
      let $Month = 'December'
      Break
  End-Evaluate

End-Procedure Get-Month


!***********************************************************************
! Procedure Determine-PSD-Code
!***********************************************************************
Begin-Procedure Determine-PSD-Code

  let $Check_Char = substr($Check_Locality, 1, 1)

  If $Check_Char = 'I' !This would be an 'old' Locality Code (i.e. I31011C)
     Do Get-PSD-CODE
  Else
     let $PSDCode = $Check_Locality
  End-If

  let $Check_Agency_PSD =  substr($PSDCode, 1, 2)

  Do Get-Agency-Status

End-Procedure Determine-PSD-Code


!***********************************************************************
! Procedure Get-PSD-Code
!***********************************************************************
Begin-Procedure Get-PSD-Code
let $PSDCode = ''

BEGIN-SELECT
LT.OTH_LOCALITY_ABBRV

  let $PSDCode = rtrim(&LT.OTH_LOCALITY_ABBRV, ' ')

FROM PS_LOCAL_TAX_TBL LT
WHERE LT.STATE               = 'PA'
  AND LT.LOCALITY            = $Check_Locality
  AND LT.OTH_LOCALITY_ABBRV <> ' '
  AND LT.TAX_CLASS           = 'H'
  AND LT.EFFDT               = (SELECT MAX(LT1.EFFDT)
                                FROM PS_LOCAL_TAX_TBL LT1
                                WHERE LT.STATE    = LT1.STATE
                                  AND LT.LOCALITY = LT1.LOCALITY
                                  AND LT1.EFFDT  <= $Period_End_Date)
END-SELECT

#IfDef DebugD
  if $PSDCode = ''
      Show '    PSD Code not found using >' $Check_Locality '<'
  end-if
#EndIF

End-Procedure Get-PSD-Code

!***********************************************************************
! Procedure Get-PSD-Location
!***********************************************************************
Begin-Procedure Get-PSD-Location
let $PSDLocation = ''


  lookup PSD_CODES $Check_PSD $PSDLocation


#IfDef DebugD
  if $PSDLocation = ''
      Show '    Get-PSD-Location:  Locality not found using >' $Check_PSD '<'
  end-if
#EndIF

End-Procedure Get-PSD-Location

!***********************************************************************
! Procedure Get-Agency-Status
!***********************************************************************
Begin-Procedure Get-Agency-Status
!Deterimine if agency is active or was active at any time during the balance year
let $Agency_Status = 'I'
let $Agency = ''

BEGIN-SELECT
AG.EFF_STATUS
AG.RSI_TAX_AGENCY

    let $Agency_Status = &AG.EFF_STATUS
    let $Agency        = &AG.RSI_TAX_AGENCY

FROM  PS_RSI_ST_TX_AGNCS AG
WHERE AG.RSI_TCD_PSD_CODE = $Check_Agency_PSD
  AND ((AG.EFFDT BETWEEN $Year_Begin_dt AND $Period_End_Date
  AND AG.EFF_STATUS = 'A')
   OR
      (AG.EFFDT = (SELECT MAX(AG1.EFFDT)
                     FROM  PS_RSI_ST_TX_AGNCS AG1
                    WHERE AG1.RSI_TCD_PSD_CODE = AG.RSI_TCD_PSD_CODE
                      AND AG1.EFFDT  < $Year_Begin_dt) ) )
END-SELECT

#IfDef DebugD
  if $Agency = ''
        Show ' '
	Show '    Agency not found using PSD Code >' $Check_Agency_PSD '<'
        Show ' '
  end-if
#EndIF

End-Procedure Get-Agency-Status


!***********************************************************************
!Procedure Report-Location-Exempt
!***********************************************************************
Begin-Procedure Report-Location-Exempt

let $Company_PRT = ''
let $Record_Prt  = 'RSI_TAXPA_LD'

    let #RSITAX_Tmp   =  0

    While #RSITAX_Tmp < #RSITAX
        Get $Company  $Locality  $Emplid  #TaxGrs  #Tax  $WRK_PSD  $RES_PSD   From  RSI_TAXPA_LD(#RSITAX_Tmp) 

        if #TaxGrs <> 0 and #Tax <> 0

        #IfDef NOPSD
            let $Check_PSD          = $RES_PSD
            do Get-PSD-Location
            let $ResCdLocation      = $PSDLocation

            let $Check_PSD          = $WRK_PSD
            do Get-PSD-Location
            let $WrkCdLocation      = $PSDLocation
        #else
            let $ResCdLocation      = $RES_PSD
            let $WrkCdLocation      = $WRK_PSD
        #EndIf
        
            if rtrim($ResCdLocation, ' ') = '' or rtrim($WrkCdLocation, ' ')  = ''
               if  rtrim($WRK_PSD, ' ') <> '{OutOfState}' and rtrim($RES_PSD, ' ')  <> '{OutOfState}'
                    let $LD_Name_Srch_Key = $Company || $Locality || $Emplid
                    do Get-Empl-Name
                    do Set-Print-Vars
                        let #TaxableGross_Prt  = #TaxGrs
                        let #Tax_Prt           = #Tax
                    do Print_Localities_Exempt
                    do Clear-Print-Vars
               end-if
            end-if

        end-if

        Add 1 to #RSITAX_Tmp
    End-While


  if #LocExempt > 0
    let $ExceptionMsg_Prt = $ExceptionMsg 
  else
    let $ExceptionMsg_Prt =  $NoExceptionMsg  
  end-if

     print $ExceptionMsg_Prt   (+3,5)   Wrap  144 3

     Let $LocExempt  = edit(#LocExempt, '999,999')

End-Procedure Report-Location-Exempt

!***********************************************************************
! Procedure Get-Empl-Name
!***********************************************************************
Begin-Procedure Get-Empl-Name
    
let   $Found_Name   = 'N'
let   $EE_Name      = ''
let   #EE_Read      = 0
While #EE_Read < #EE_Count

    Get $Company1  $Locality1  $Emplid1  $EE_Name1  From EMPLOYEES(#EE_Read)
    let $Search_Key   = $Company1 || $Locality1 || $Emplid1
   
    if $Search_Key = ''
       Break
    end-if
   
    if $Search_Key = $LD_Name_Srch_Key
        let $Found_Name   = 'Y'
        let $EE_Name      = $EE_Name1
        Break
    end-if

Add 1 to #EE_Read
End-While

    if $Found_Name   = 'N'
        Show $Company ' '  $Locality '    Emplid:  '  $Emplid ' Name not found.'
    end-if

End-Procedure Get-Empl-Name


!***********************************************************************
! Procedure Print_Localities_Exempt
!***********************************************************************
Begin-Procedure Print_Localities_Exempt

  print $Record_Prt                   (+1,2)
  print $Co_Prt                       (,18)
  print $Emplid_Prt                   (0,24)
  print $EE_Name_Prt                  (0,38)
  print $RptgMode_Prt                 (0,80)
  print $BalYear_Prt                  (0,91)
  print $BalPeriod_Prt                (0,102)
  print $Locality_Prt                 (0,110)
  print $WRK_PSD                      (0,122)
  print $RES_PSD                      (0,135)
  print #TaxableGross_Prt             (0,148)  edit '999,999,999.99'
  print #Tax_Prt                      (0,164)  edit '999,999,999.99'

  add 1 to #LocExempt

End-Procedure Print_Localities_Exempt

!***********************************************************************
! Procedure Log-Message
!***********************************************************************
Begin-Procedure Log-Message


    if $ReconciledMsg_Prt <> ''
      Show ' '
      Show $ReconciledMsg_Prt
      Show ' '
    end-if

    if $NoDataMsg_Prt <> ''
      Show ' '
      Show $NoDataMsg_Prt
      Show ' '
    end-if

    if $NoSortMsg_Prt <> ''
     Show ' '
     Show $NoSortMsg_Prt
     Show ' '
    end-if

    if $GenerateMsg_Prt <> ''
     Show ' '
     Show $GenerateMsg_Prt
     Show $GenerateMsg2
     Show ' '
    end-if


  Show ' '
  Show '  ** Data Record Count **'
  Show 'TAX BALANCE        ' $TAXBAL_Count
  Show 'RSI TAXPA LD       ' $RSITAX_Count
  Show 'Records Matched    ' $Match_Count
  Show 'Records Different  ' $PrintDiff_Count
  Show 'Records Skipped    ' $NoAgency_Count
  Show 'Employee Total     ' $EMPLOYEES_Count


  Show ' '
  Show ' '
  Show 'Begin ' $ReportDescr 

    if $ExceptionMsg_Prt <> ''
      Show ' '
      Show $ExceptionMsg_Prt
      Show ' '
    end-if

  Show 'Number of Data Inconsistency Records        ' $LocExempt


Show ' '

End-Procedure Log-Message


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'getcodta.sqc'  !Get-Company-Data procedure