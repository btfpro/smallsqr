! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSAUDIT: PS System Audits                                           *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-Main                                              !
! Descr:     System table audit against Process Scheduler   tables     !
!----------------------------------------------------------------------!

begin-procedure SYSPRCS-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Process Scheduler Audit'

    move 1 to #rowstoadd      ! set back to default

    do SYSPRCS-01
    ! do SYSPRCS-02
    do SYSPRCS-03
    do SYSPRCS-04
    do SYSPRCS-05
    do SYSPRCS-06
    do SYSPRCS-07
    do SYSPRCS-08
    do SYSPRCS-09
    do SYSPRCS-10
    do SYSPRCS-11
    do SYSPRCS-12
    do SYSPRCS-13
    do SYSPRCS-14
    do SYSPRCS-15
    do SYSPRCS-16
    do SYSPRCS-17
    do SYSPRCS-18
    do SYSPRCS-19
    do SYSPRCS-20

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-01                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-01: List any SQR-related process definitions that !
!                override the PARMLIST.  This will result in possible  !
!                errors when run from PT8 Process Scheduler(Server)    !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-01

   let $AuditDescr = '(PRCSSCHED-01) SQR-Related Process Definitions (PS_PRCSDEFN) '
      || 'that override the PARMLIST field from the Process Type Definition'
      || ' (PS_PRCSTYPEDEFN) table '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Process Description'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','DESCR',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.PRCSTYPE        &PrcsSchd01_PrcsType
A.PRCSNAME        &PrcsSchd01_PrcsName
A.DESCR           &PrcsSchd01_Descr
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd01_PrcsType    (+1, #Start1)
   print &PrcsSchd01_PrcsName    ( 0, #Start2)
   print &PrcsSchd01_Descr       ( 0, #Start3)

FROM  PS_PRCSDEFN A, PS_PRCSTYPEDEFN B
WHERE A.PARMLISTTYPE = '1'
  AND B.GENPRCSTYPE = '1'
  AND A.PRCSTYPE = B.PRCSTYPE
ORDER BY 1, 2

end-SELECT

   do End-Section
#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSPRCS-02                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-02: List any SQR/Crystal process definitions that !
!                do not have OUTDESTTYPE set to 'ANY'                  !
!----------------------------------------------------------------------!
! seems to be some confusion between #2 and #3 here, deciding to leave !
! #2 in place (but not called) although made a quick change to refer to!
! fieldvalue > '0' rather than xlatshortname <> 'Any' which was        !
! producing all kinds of bogus hits when translations had been done    !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-02

   let $AuditDescr = '(PRCSSCHED-02) -Informational Only- Process Definitions (PS_PRCSDEFN) '
      || 'where the OUTDESTTYPE should be set to ANY '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'OutDestType'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSXLATITEM','XLATSHORTNAME',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.PRCSTYPE        &PrcsSchd02_PrcsType
A.PRCSNAME        &PrcsSchd02_PrcsName
X.XLATSHORTNAME   &PrcsSchd02_OutDestType
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd02_PrcsType    (+1, #Start1)
   print &PrcsSchd02_PrcsName    ( 0, #Start2)
   print &PrcsSchd02_OutDestType ( 0, #Start3)

FROM PS_PRCSDEFN A, PSXLATITEM X
WHERE A.OUTDESTTYPE = X.FIELDVALUE
AND X.FIELDNAME = 'OUTDESTTYPE'
AND A.PRCSTYPE IN ( SELECT DISTINCT B.PRCSTYPE
           FROM PS_PRCSTYPEDEFN B
           WHERE B.GENPRCSTYPE IN('1', '3'))
AND X.FIELDVALUE > '0'
ORDER BY 1, 2
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-03                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-03: List any  process definitions that            !
!                do not have OUTDESTTYPE set to 'NONE', 'ANY' or 'WEB' !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-03

   let $AuditDescr = '(PRCSSCHED-03) Process Definitions (PS_PRCSDEFN) '
      || 'where the OUTDESTTYPE should be set to NONE, ANY or WEB'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'OutDestType'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSXLATITEM','XLATSHORTNAME',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.PRCSTYPE        &PrcsSchd03_PrcsType
A.PRCSNAME        &PrcsSchd03_PrcsName
X.XLATSHORTNAME   &PrcsSchd03_OutDestType
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd03_PrcsType    (+1, #Start1)
   print &PrcsSchd03_PrcsName    ( 0, #Start2)
   print &PrcsSchd03_OutDestType ( 0, #Start3)

FROM PS_PRCSDEFN A, PSXLATITEM X
WHERE A.OUTDESTTYPE = X.FIELDVALUE
AND X.FIELDNAME = 'OUTDESTTYPE'
AND A.PRCSTYPE IN ( SELECT DISTINCT B.PRCSTYPE
           FROM PS_PRCSTYPEDEFN B
           WHERE B.GENPRCSTYPE NOT IN('1', '3'))
AND X.FIELDVALUE NOT IN ('0', '1', '6')
ORDER BY 1, 2
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-04                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-04: List any Process Definitions that must be     !
!            marked as APIAWARE                                        !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-04

   let $AuditDescr = '(PRCSSCHED-04) Process Definitions (PS_PRCSDEFN) '
      || 'where the APIAWARE should be set to TRUE'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'OutDestType'

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.PRCSTYPE        &PrcsSchd04_PrcsType
A.PRCSNAME        &PrcsSchd04_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd04_PrcsType    (+1, #Start1)
   print &PrcsSchd04_PrcsName    ( 0, #Start2)

FROM PS_PRCSDEFN A
WHERE A.APIAWARE='0'
AND A.PRCSTYPE IN ( SELECT DISTINCT B.PRCSTYPE
           FROM PS_PRCSTYPEDEFN B
           WHERE B.GENPRCSTYPE IN('1', '2', '3', '5', '6', '7', '8'))
ORDER BY 1, 2
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-05                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-05: List any Process Definitions where            !
!            Process Type does not exist in the PS_PRCSTYPEDEFN        !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-05

   let $AuditDescr = '(PRCSSCHED-05) Process Definitions (PS_PRCSDEFN) '
      || 'where Process Type was not found in the Process Type Definition (PS_PRCSTYPEDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
P.PRCSTYPE        &PrcsSchd05_PrcsType
P.PRCSNAME        &PrcsSchd05_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd05_PrcsType    (+1, #Start1)
   print &PrcsSchd05_PrcsName    ( 0, #Start2)

FROM PS_PRCSDEFN P WHERE P.PRCSTYPE
NOT IN (SELECT DISTINCT
T.PRCSTYPE FROM PS_PRCSTYPEDEFN T)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-06                                                !
! Descr:     System table audit against PS_PRCSJOBITEM table:          !
!            SYSPRCS-06: List any Job Items that                       !
!            are not found in PS_PRCSDEFN                              !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-06

   let $AuditDescr = '(PRCSSCHED-06) Process Job Item (PS_PRCSJOBITEM) '
      || 'where Process Type listed as a Job Item but was not '
      || ' found in the Process Definition  (PS_PRCSDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Job Name '
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Type'
    let #Column2len = lengthp($Column1Name)
    let $Column3Name = 'Process Name'
    let #Column3len = lengthp($Column2Name)

    do RetrieveColumnLength('PRCSJOBITEM','PRCSJOBNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
A.PRCSJOBNAME     &PrcsSchd06_JobName
A.PRCSTYPE        &PrcsSchd06_PrcsType
A.PRCSNAME        &PrcsSchd06_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd06_JobName     (+1, #Start1)
   print &PrcsSchd06_PrcsType    ( 0, #Start2)
   print &PrcsSchd06_PrcsName    ( 0, #Start3)

FROM PS_PRCSJOBITEM A
WHERE A.PRCSTYPE <> 'PSJob'
AND A.PRCSNAME NOT IN
(SELECT B.PRCSNAME FROM PS_PRCSDEFN B)
end-SELECT

  do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-07                                                !
! Descr:     System table audit against PS_SERVERCLASS table:          !
!            SYSPRCS-07: List any Process Type that does not           !
!            exist exist in the PS_PRCSTYPEDEFN table                  !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-07

   let $AuditDescr = '(PRCSSCHED-07) Server Class List (PS_SERVERCLASS) '
      || 'where Process Type was not found in the Process Type Definition (PS_PRCSTYPEDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Server Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Type'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('SERVERDEFN','SERVERNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
S.SERVERNAME      &PrcsSchd07_ServerName
S.PRCSTYPE        &PrcsSchd07_PrcsType
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd07_ServerName  (+1, #Start1)
   print &PrcsSchd07_PrcsType    ( 0, #Start2)

FROM PS_SERVERCLASS S
WHERE S.PRCSTYPE NOT IN
(SELECT A.PRCSTYPE FROM PS_PRCSTYPEDEFN A WHERE A.OPSYS = S.OPSYS)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-08                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-08: List any Process that have an invalid         |
!            process category                                          !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-08

   let $AuditDescr = '(PRCSSCHED-08) Process Definitions (PS_PRCSDEFN) '
      || 'where Process Category was not found in the Process Category '
      || 'Definitions (PS_PRCS_CAT_TBL) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Process Category'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSCATEGORY',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE        &PrcsSchd08_PrcsType
S.PRCSNAME        &PrcsSchd08_PrcsName
S.PRCSCATEGORY    &PrcsSchd08_PrcsCategory
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd08_PrcsType      (+1, #Start1)
   print &PrcsSchd08_PrcsName      ( 0, #Start2)
   print &PrcsSchd08_PrcsCategory  ( 0, #Start3)

FROM PS_PRCSDEFN S
WHERE S.PRCSCATEGORY NOT IN (SELECT B.PRCSCATEGORY FROM PS_PRCS_CAT_TBL B)
AND S.PRCSCATEGORY <> ''
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure
!----------------------------------------------------------------------!
! Procedure: SYSPRCS-09                                                !
! Descr:     System table audit against PS_PRCSJOBDEFN table:          !
!            SYSPRCS-09: List any Jobs that have an invalid            |
!            process category                                          !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-09

   let $AuditDescr = '(PRCSSCHED-09) Job Definitions (PS_PRCSJOBDEFN) '
      || 'where Process Category was not found in the Process Category '
      || 'Definitions (PS_PRCS_CAT_TBL) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Job Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Process Category'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSJOBDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSJOBDEFN','PRCSJOBNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCSJOBDEFN','PRCSCATEGORY',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE        &PrcsSchd09_PrcsType
S.PRCSJOBNAME     &PrcsSchd09_PrcsJobName
S.PRCSCATEGORY    &PrcsSchd09_PrcsCategory
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd09_PrcsType      (+1, #Start1)
   print &PrcsSchd09_PrcsJobName   ( 0, #Start2)
   print &PrcsSchd09_PrcsCategory  ( 0, #Start3)

FROM PS_PRCSJOBDEFN S
WHERE S.PRCSCATEGORY NOT IN (SELECT B.PRCSCATEGORY FROM PS_PRCS_CAT_TBL B)
AND S.PRCSCATEGORY <> ''
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-10                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-10: List any Process that have a missing          |
!            process category                                          !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-10

   let $AuditDescr = '(PRCSSCHED-10) Process Definitions (PS_PRCSDEFN) '
      || 'where Process Category is not defined'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len  = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len  = lengthp($Column2Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE        &PrcsSchd10_PrcsType
S.PRCSNAME        &PrcsSchd10_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd10_PrcsType      (+1, #Start1)
   print &PrcsSchd10_PrcsName      ( 0, #Start2)

FROM PS_PRCSDEFN S
where S.PRCSCATEGORY = ''

end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure
!----------------------------------------------------------------------!
! Procedure: SYSPRCS-11                                                !
! Descr:     System table audit against PS_PRCSJOBDEFN table:          !
!            SYSPRCS-11: List any Jobs that have a missing             |
!            process category                                          !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-11

   let $AuditDescr = '(PRCSSCHED-11) Job Definitions (PS_PRCSJOBDEFN) '
      || 'where Process Category is not defined '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Job Name'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PRCSJOBDEFN','PRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSJOBDEFN','PRCSJOBNAME',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE        &PrcsSchd11_PrcsType
S.PRCSJOBNAME     &PrcsSchd11_PrcsJobName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd11_PrcsType      (+1, #Start1)
   print &PrcsSchd11_PrcsJobName   ( 0, #Start2)

FROM PS_PRCSJOBDEFN S
where S.PRCSCATEGORY = ''
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure
!----------------------------------------------------------------------!
! Procedure: SYSPRCS-12                                                !
! Descr:     System table audit against PS_SERVERCATEGORY table:       !
!            SYSPRCS-12: List any categories defined for a server      |
!            that do not exist in process category definition          !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-12

   let $AuditDescr = '(PRCSSCHED-12) Server Categories (PS_SERVERCATEGORY) '
      || 'where Server Category was not found in the Process Category '
      || 'Definitions (PS_PRCS_CAT_TBL) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Server Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Category'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PS_SERVERCATEGORY','SERVERNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PS_SERVERCATEGORY','PRCSCATEGORY',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
S.SERVERNAME        &PrcsSchd12_ServerName
S.PRCSCATEGORY      &PrcsSchd12_PrcsCategory
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd12_ServerName      (+1, #Start1)
   print &PrcsSchd12_PrcsCategory    ( 0, #Start2)

FROM PS_SERVERCATEGORY S
WHERE S.PRCSCATEGORY NOT IN (SELECT B.PRCSCATEGORY from PS_PRCS_CAT_TBL B)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-13                                                !
! Descr:     System table audit against PS_SERVERCATEGORY table:       !
!            SYSPRCS-13: List any categories not defined for a server  |
!            that exist in process category definition                 !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-13

   let $AuditDescr = '(PRCSSCHED-13) Server Categories (PS_SERVERCATEGORY) '
      || 'missing category from Process Category Definitions (PS_PRCS_CAT_TBL) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Server Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Category'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PS_SERVERCATEGORY','SERVERNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PS_SERVERCATEGORY','PRCSCATEGORY',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
S.SERVERNAME        &PrcsSchd13_ServerName
C.PRCSCATEGORY      &PrcsSchd13_PrcsCategory
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd13_ServerName      (+1, #Start1)
   print &PrcsSchd13_PrcsCategory    ( 0, #Start2)

FROM PS_SERVERDEFN S, PS_PRCS_CAT_TBL C
WHERE NOT EXISTS (SELECT 'X' FROM PS_SERVERCATEGORY P
WHERE P.SERVERNAME=S.SERVERNAME AND P.PRCSCATEGORY=C.PRCSCATEGORY)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-14                                                !
! Descr:     System table audit against PSPRCSQUEUE table:             !
!            SYSPRCS-14: List any queued/pending requests which have   !
!            a category that does not exist in process category        !
!            definition                                                !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-14

   let $AuditDescr = '(PRCSSCHED-14) Process Requests (PSPRCSQUEUE) '
      || 'where Max Concurrent count for Process Category is '
      || '0 for the requested server in Server Category (PS_SERVERCATEGORY) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Server Name'
    let #Column1len  = lengthp($Column1Name)
    let $Column2Name = 'Process Category'
    let #Column2len  = lengthp($Column2Name)
    let $Column3Name = 'Process Type'
    let #Column3len  = lengthp($Column2Name)
    let $Column4Name = 'Process Name'
    let #Column4len  = lengthp($Column2Name)
    let $Column5Name = 'Process Instance'
    let #Column5len  = lengthp($Column2Name)

    do RetrieveColumnLength('PSPRCSQUE','SERVERNAMERQST',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSPRCSQUE','PRCSCATEGORY'  ,#Field2Len,$FieldType)
    do RetrieveColumnLength('PSPRCSQUE','PRCSTYPE'      ,#Field3Len,$FieldType)
    do RetrieveColumnLength('PSPRCSQUE','PRCSNAME'      ,#Field4Len,$FieldType)
    do RetrieveColumnLength('PSPRCSQUE','PRCSINSTANCE'  ,#Field5Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)
    let #Start4          = (#Start3 + #Column3len + 4)
    let #Start5          = (#Start4 + #Column4len + 4)

    let #numofhdr        = 5

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)

begin-SELECT on-Error=Rpt-SQL-Error
S.SERVERNAMERQST    &PrcsSchd14_ServerName
S.PRCSCATEGORY      &PrcsSchd14_PrcsCategory
S.PRCSTYPE          &PrcsSchd14_PrcsType
S.PRCSNAME          &PrcsSchd14_PrcsName
S.PRCSINSTANCE      &PrcsSchd14_PrcsInstance
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd14_ServerName      (+1, #Start1)
   print &PrcsSchd14_PrcsCategory    ( 0, #Start2)
   print &PrcsSchd14_PrcsType        ( 0, #Start3)
   print &PrcsSchd14_PrcsName        ( 0, #Start4)
   print &PrcsSchd14_PrcsInstance    ( 0, #Start5)

FROM PSPRCSQUE S
WHERE S.RUNSTATUS IN('5', '16') AND S.SERVERNAMERQST <> ' '
AND S.PRCSCATEGORY NOT IN (SELECT PRCSCATEGORY FROM PS_SERVERCATEGORY
WHERE SERVERNAME=S.SERVERNAMERQST AND MAXCONCURRENT > 0)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-15                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-15: List any Process that have an invalid         |
!            folder                                                    !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-15

   let $AuditDescr = '(PRCSSCHED-15) Process Definition (PS_PRCSDEFN) '
      || 'where folder name was not found in the Folder list (PSRF_FLIST_TBL) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Report Folder'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PRCSDEFN','PRCSTYPE',        #Field1Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PRCSNAME',        #Field2Len,$FieldType)
    do RetrieveColumnLength('PRCSDEFN','PSRF_FOLDER_NAME',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE        &PrcsSchd15_PrcsType
S.PRCSNAME        &PrcsSchd15_PrcsName
S.PSRF_FOLDER_NAME    &PrcsSchd15_PrcsFolder
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd15_PrcsType      (+1, #Start1)
   print &PrcsSchd15_PrcsName      ( 0, #Start2)
   print &PrcsSchd15_PrcsFolder    ( 0, #Start3)

FROM PS_PRCSDEFN S
WHERE S.PSRF_FOLDER_NAME NOT IN (SELECT B.PSRF_FOLDER_NAME FROM PSRF_FLIST_TBL B)
AND S.PSRF_FOLDER_NAME <> ''
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure
!----------------------------------------------------------------------!
! Procedure: SYSPRCS-16                                                !
! Descr:     System table audit against PS_PRCSDEFN table:             !
!            SYSPRCS-16: Process definition has a recovery process     |
!            that does not exist                                       |
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-16

   let $AuditDescr = '(PRCSSCHED-16) Process Definitions (PS_PRCSDEFN) '
      || 'where configured recovery process does not exist in Process Definitions (PS_PRCSDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len  = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len  = lengthp($Column2Name)
    let $Column3Name = 'Recovery Process Type'
    let #Column3len  = lengthp($Column3Name)
    let $Column4Name = 'Recovery Process Name'
    let #Column4len  = lengthp($Column4Name)

    do RetrieveColumnLength('PS_PRCSDEFN','RECVRYPRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSDEFN','RECVRYPRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSDEFN','PRCSTYPE'      ,#Field3Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSDEFN','PRCSNAME'      ,#Field4Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)
    let #Start4          = (#Start3 + #Column3len + 4)

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
S.RECVRYPRCSTYPE    &PrcsSchd16_RecvryPrcsType
S.RECVRYPRCSNAME    &PrcsSchd16_RecvryPrcsName
S.PRCSTYPE          &PrcsSchd16_PrcsType
S.PRCSNAME          &PrcsSchd16_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd16_PrcsType        (+1, #Start1)
   print &PrcsSchd16_PrcsName        (0,  #Start2)
   print &PrcsSchd16_RecvryPrcsType  (0,  #Start3)
   print &PrcsSchd16_PrcsName        (0,  #Start4)

FROM PS_PRCSDEFN S
WHERE RECVRYPRCSTYPE <> '' AND RECVRYPRCSNAME <> ' '
AND NOT EXISTS (SELECT 'X' FROM PS_PRCSDEFN WHERE
PRCSNAME=S.RECVRYPRCSNAME and PRCSTYPE=S.RECVRYPRCSTYPE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure
!----------------------------------------------------------------------!
! Procedure: SYSPRCS-17                                                !
! Descr:     System table audit against PS_PRCSJOBDEFN table:          !
!            SYSPRCS-17: Job definition has a recovery process         |
!            that does not exist                                       |
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-17

   let $AuditDescr = '(PRCSSCHED-17) Job Definitions (PS_PRCSJOBDEFN) '
      || 'where configured recovery process does not exist in Process Definitions (PS_PRCSDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Type'
    let #Column1len  = lengthp($Column1Name)
    let $Column2Name = 'Job Name'
    let #Column2len  = lengthp($Column2Name)
    let $Column3Name = 'Recovery Process Type'
    let #Column3len  = lengthp($Column3Name)
    let $Column4Name = 'Recovery Process Name'
    let #Column4len  = lengthp($Column4Name)

    do RetrieveColumnLength('PS_PRCSJOBDEFN','RECVRYPRCSTYPE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSJOBDEFN','RECVRYPRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSJOBDEFN','PRCSTYPE'      ,#Field3Len,$FieldType)
    do RetrieveColumnLength('PS_PRCSJOBDEFN','PRCSJOBNAME'   ,#Field4Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)
    let #Start4          = (#Start3 + #Column3len + 4)

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSTYPE          &PrcsSchd17_PrcsType
S.PRCSJOBNAME       &PrcsSchd17_PrcsJobName
S.RECVRYPRCSTYPE    &PrcsSchd17_RecvryPrcsType
S.RECVRYPRCSNAME    &PrcsSchd17_RecvryPrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd17_PrcsType        (+1, #Start1)
   print &PrcsSchd17_PrcsJobName     (0,  #Start2)
   print &PrcsSchd17_RecvryPrcsType  (0,  #Start3)
   print &PrcsSchd17_RecvryPrcsName  (0,  #Start4)

FROM PS_PRCSJOBDEFN S
WHERE RECVRYPRCSTYPE <> '' AND RECVRYPRCSNAME <> ' '
AND NOT EXISTS (SELECT 'X' FROM PS_PRCSDEFN WHERE
PRCSNAME=S.RECVRYPRCSNAME and PRCSTYPE=S.RECVRYPRCSTYPE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSPRCS-18                                                !
! Descr:     Process Scheduler Transactional tables audit              !
!            SYSPRCS-18: List queued or on hold processes which contain|
!            DBNAME different than the current one:                    |
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-18

   let $AuditDescr = '(PRCSSCHED-18) Queued or on hold processes in PSPRCSPARMS and PSPRCSRQST'
      || ' which contain DBNAME different than '
      || $database_name
      || '. Recovery process: Run AE program MGRPRCSTBL with process schedulers down.'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Process Instance' 
    let #Column1len  = lengthp($Column1Name)
    let $Column2Name = 'Process Name'
    let #Column2len  = lengthp($Column2Name)
    let $Column3Name = 'Database Name'
    let #Column3len  = lengthp($Column3Name)
    let $Column4Name = 'Run Status'
    let #Column4len  = lengthp($Column3Name)

    do RetrieveColumnLength('PSPRCSRQST','PRCSINSTANCE',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSPRCSRQST','PRCSNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSPRCSRQST','DBNAME',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSPRCSRQST','RUNSTATUS',#Field4Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)
    let #Start4          = (#Start3 + #Column3len + 4)

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
S.PRCSINSTANCE      &PrcsSchd18_PrcsInstance 
S.PRCSNAME          &PrcsSchd18_PrcsName
S.DBNAME            &PrcsSchd18_DbName
S.RUNSTATUS         &PrcsSchd18_RunStatus   


 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd18_PrcsInstance        (+1,  #Start1)
   print &PrcsSchd18_PrcsName            (0,   #Start2)
   print &PrcsSchd18_DbName              (0,   #Start3)
   
   evaluate &PrcsSchd18_RunStatus
       when = '5'
           print 'Queued'                    (0,   #Start4)
         break
       when = '4'
           print 'On Hold'                   (0,   #Start4)
         break
       when = '16'
           print 'Pending'                   (0,   #Start4)
         break
   end-evaluate
   
FROM PSPRCSRQST S WHERE (S.RUNSTATUS = '5' OR S.RUNSTATUS = '4' OR S.RUNSTATUS = '16') AND S.DBNAME <> $database_name
end-SELECT
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if
end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-19                                                !
! Descr:     System table audit against PS_PRCS_RUNPARM table:         !
!            SYSPRCS-19: List any Runtime parameters that have         !
!            a run control record not found in the PSRECDEFN table.    !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-19

   let $AuditDescr = '(PRCSSCHED-19) Process Definition Runtime Parameters (PS_PRCS_RUNPARM) '
      || 'where runtime parameter listed has a run control record not '
      || ' found in the Record Definition (PSRECDEFN) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Record Name '
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Process Type'
    let #Column2len = lengthp($Column1Name)
    let $Column3Name = 'Process Name'
    let #Column3len = lengthp($Column2Name)

    do RetrieveColumnLength('PRCS_RUNPARM','RECNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCS_RUNPARM','PRCSTYPE',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCS_RUNPARM','PRCSNAME',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME         &PrcsSchd19_RecName
A.PRCSTYPE        &PrcsSchd19_PrcsType
A.PRCSNAME        &PrcsSchd19_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd19_RecName     (+1, #Start1)
   print &PrcsSchd19_PrcsType    ( 0, #Start2)
   print &PrcsSchd19_PrcsName    ( 0, #Start3)

FROM PS_PRCS_RUNPARM A
WHERE A.RECNAME NOT IN
(SELECT B.RECNAME FROM PSRECDEFN B)
end-SELECT

  do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSPRCS-20                                                !
! Descr:     System table audit against PS_PRCS_RUNPARM table:         !
!            SYSPRCS-20: List any Runtime parameters that have         !
!            a run control record field not found in                   !
!            the PSRECFIELD table.                                     !
!----------------------------------------------------------------------!
begin-procedure SYSPRCS-20

   let $AuditDescr = '(PRCSSCHED-20) Process Definition Runtime Parameters (PS_PRCS_RUNPARM) '
      || 'where runtime parameter listed has a run control record field not '
      || ' found in the Record Field Definition (PSRECFIELD) table'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Record Name '
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Record Field Name '
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Process Type'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Process Name'
    let #Column4len = lengthp($Column4Name)

    do RetrieveColumnLength('PRCS_RUNPARM','RECNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PRCS_RUNPARM','RECFIELDNAME',#Field2Len,$FieldType)
    do RetrieveColumnLength('PRCS_RUNPARM','PRCSTYPE',#Field3Len,$FieldType)
    do RetrieveColumnLength('PRCS_RUNPARM','PRCSNAME',#Field4Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if
    
    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if



    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Start2 + #Column2len + 4)
    let #Start4          = (#Start3 + #Column3len + 4)

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME         &PrcsSchd20_RecName
A.RECFIELDNAME    &PrcsSchd20_RecFieldName
A.PRCSTYPE        &PrcsSchd20_PrcsType
A.PRCSNAME        &PrcsSchd20_PrcsName
 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &PrcsSchd20_RecName     (+1, #Start1)
   print &PrcsSchd20_RecFieldName (0, #Start2)
   print &PrcsSchd20_PrcsType    ( 0, #Start3)
   print &PrcsSchd20_PrcsName    ( 0, #Start4)

FROM PS_PRCS_RUNPARM A
WHERE A.RECFIELDNAME NOT IN
(SELECT B.FIELDNAME FROM PSRECFIELD B WHERE B.RECNAME=A.RECNAME)
end-SELECT

  do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
