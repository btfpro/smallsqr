!***********************************************************************
!   UVGPS01:  Global Payroll Upgrade Audit Report                      *
!             to find invalid record/record-field references in        *
!             Arrays, Writable-Arrays and Triggers                     *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/09/20:02:56:49                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! Change History                                                       *
! Incident ID    Dated     Comments                                    *
! 1521249001     Jul2006   SQR Created                                 *
!                Sep2006   Minor updates to Trigger Audit to list      *
!                          Active/Inactive flag                        *
!***********************************************************************


!----------------------------------------------------------------------!
! Definition List                                                      !
!----------------------------------------------------------------------!
#define SECTLOC      5
#define SUBSECTLOC   9
#define DESCRLOC     5
#define CNTRYLOC     10
#define ELEMLOC      24
#define PINLOC       50
#define RECLOC       65
#define FIELDLOC     87
#define TACTLOC      24
#define TRECLOC      34
#define TTYPELOC     56
#define TFIELDLOC    72

#define R_LINE_LEN   130
#define RF_LINE_LEN  170
#define TR_LINE_LEN  100
#define TRF_LINE_LEN 140

#define SECTFONT     12
#define SUBSECTFONT  11
#define DSCRFONT     9
#define HEADFONT     8
#define CELLFONT     8

#define BOTTOM1      43
#define BOTTOM2      46
#define BOTTOM3      50


!----------------------------------------------------------------------!
! Setting Environment                                                  !
!----------------------------------------------------------------------!
#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !Printer and page-size initialization, SETUP31 
                        ! and SETUP32 SQCs to support HTML, HP PCL, 
                        ! PostScript, PDF and Window in addition to 
                        ! Line Printer as the output type.

!----------------------------------------------------------------------!
! Heading Section                                                      !
!----------------------------------------------------------------------!
begin-heading 5
   let $ReportID = 'UVGPS01'
   let $ReportTitle = 'Global Payroll Upgrade Audit'
   ALTER-PRINTER font=5 POINT-SIZE=8
   #include 'stdhdg01.sqc'
   print 'INVALID RECORD/RECORD-FIELD REFERENCES IN ARRAYS, WRITABLE ARRAYS AND TRIGGERS' (3) center
   ALTER-PRINTER font=5 POINT-SIZE={HEADFONT}
   print '-' (5,1,280) fill
end-heading



!----------------------------------------------------------------------!
! Report:    UVGPS01: Global Payroll Upgrade Audit Report             !
! Descr:     Audit Arrays, Writable arrays and Triggers for invalid    !
!            Record and Record-Field references                        !
!----------------------------------------------------------------------!

begin-report
   do Init-Processing

   do Report

   do Reset                       ! called from reset.sqc
   do Update-Prcs-Run-Status      ! called from prcsapi.sqc to update the Process Monitor to Success
end-report

begin-procedure Init-Processing
  do Init-Datetime                ! called from datetime.sqc
  do Get-Current-Datetime         ! called from prcsapi.sqc (curdttim.sqc)
  do Define-Prcs-Vars             ! called from prcsapi.sqc (prcsdef.sqc)
  do Get-Run-Control-Parms        ! In prcsapi.sqc
  do Init-Number                  ! called from number.sqc
  do Get-Language-Codes           ! called from prcslng.sqc
  do Security-Param
end-procedure !Init-Processing


!----------------------------------------------------------------------!
! Procedure: Report                                                    !
! Descr:     Perform each audit report procedure.                      !
!----------------------------------------------------------------------!
begin-procedure Report
    do AuditArray
    do AuditWArray
    do AuditTrigger
end-procedure


!----------------------------------------------------------------------!
! Procedure: AuditArray                                                !
! Descr:     Check Arrays for invalid Record/Record-field references   !
!----------------------------------------------------------------------!
begin-procedure AuditArray

do SectionHeading('Invalid Record/Record-Field references in Arrays','This section lists the invalid records and record-fields referenced by Array definitions.')
do SubSectionHeading('Invalid Record References')
do RecordListHeading('Y')
let #count1 = 0

begin-select
C1.COUNTRY
C1.PIN_NM
A1.PIN_NUM
A1.RECNAME

    let #count1 = #count1 + 1
    do RecordListHeading('N')
    print &C1.COUNTRY      (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &C1.PIN_NM       (,{ELEMLOC})    on-break print=change/top-page level=2
    print &A1.PIN_NUM      (,{PINLOC})     on-break print=change/top-page level=3
    print &A1.RECNAME      (,{RECLOC})     on-break print=change/top-page level=4

FROM PS_GP_ARRAY A1,
     PS_GP_PIN C1
WHERE A1.PIN_NUM = C1.PIN_NUM
  AND A1.RECNAME NOT IN (SELECT RECNAME FROM PSRECDEFN)
ORDER BY C1.COUNTRY, C1.PIN_NM, A1.RECNAME
end-select


do RowCheckMessage(#count1)

do SubSectionHeading('Invalid Record-Field References under "Map Retrieved Fields to Variable Elements"')
do FieldListHeading('Y')
let #count2 = 0



begin-select
C2.COUNTRY
C2.PIN_NM
A2.PIN_NUM
A2.RECNAME
B2.FIELDNAME

    let #count2 = #count2 + 1
    do FieldListHeading('N')
    print &C2.COUNTRY      (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &C2.PIN_NM       (,{ELEMLOC})    on-break print=change/top-page level=2
    print &A2.PIN_NUM      (,{PINLOC})     on-break print=change/top-page level=3
    print &A2.RECNAME      (,{RECLOC})     on-break print=change/top-page level=4
    print &B2.FIELDNAME    (,{FIELDLOC})   on-break print=change/top-page level=5


FROM PS_GP_ARRAY A2,
     PS_GP_ARRAY_FLD B2,
     PS_GP_PIN C2
WHERE A2.PIN_NUM = B2.PIN_NUM
  AND A2.PIN_NUM = C2.PIN_NUM
  AND B2.PIN_NUM = C2.PIN_NUM
  AND A2.RECNAME IN (SELECT RECNAME FROM PSRECDEFN)
  AND B2.FIELDNAME NOT IN (SELECT E2.FIELDNAME FROM PSRECFIELDALL E2
                           WHERE E2.RECNAME = A2.RECNAME)
ORDER BY C2.COUNTRY, C2.PIN_NM, A2.RECNAME, B2.FIELDNAME
end-select


do RowCheckMessage(#count2)

do SubSectionHeading('Invalid Record-Field References under "Keys and Retrieval Criteria"')
do FieldListHeading('Y')
let #count3 = 0


begin-select
C3.COUNTRY
C3.PIN_NM
A3.PIN_NUM
A3.RECNAME
B3.FIELDNAME

    let #count3 = #count3 + 1
    do FieldListHeading('N')
    print &C3.COUNTRY      (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &C3.PIN_NM       (,{ELEMLOC})    on-break print=change/top-page level=2
    print &A3.PIN_NUM      (,{PINLOC})     on-break print=change/top-page level=3
    print &A3.RECNAME      (,{RECLOC})     on-break print=change/top-page level=4
    print &B3.FIELDNAME    (,{FIELDLOC})   on-break print=change/top-page level=5

    
FROM PS_GP_ARRAY A3,
    PS_GP_ARRAY_KEY B3,
    PS_GP_PIN C3
WHERE A3.PIN_NUM = B3.PIN_NUM
  AND A3.PIN_NUM = C3.PIN_NUM
  AND A3.RECNAME IN (SELECT RECNAME FROM PSRECDEFN)
  AND B3.FIELDNAME NOT IN (SELECT E3.FIELDNAME FROM PSRECFIELDALL E3
                           WHERE E3.RECNAME = A3.RECNAME)
ORDER BY C3.COUNTRY, C3.PIN_NM, A3.RECNAME, B3.FIELDNAME
end-select
do RowCheckMessage(#count3)

let #count = #count1+#count2+#count3
do SectionFooter(#count)
end-procedure


!----------------------------------------------------------------------!
! Procedure: AuditWArray                                               !
! Descr:     Check Writable Arrays for invalid Record/Record-field     !
!            references                                                !
!----------------------------------------------------------------------!
begin-procedure AuditWArray
do SectionHeading('Invalid Record/Record-Field references in Writable Arrays','This section lists the invalid records and record-fields referenced by Writable Array definitions.')

do SubSectionHeading('Invalid Record References')
do RecordListHeading('Y')
let #count1 = 0

begin-select
WC1.COUNTRY
WC1.PIN_NM
WA1.PIN_NUM
WA1.RECNAME

    let #count1 = #count1 + 1
    do RecordListHeading('N')
    print &WC1.COUNTRY      (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &WC1.PIN_NM       (,{ELEMLOC})    on-break print=change/top-page level=2
    print &WA1.PIN_NUM      (,{PINLOC})     on-break print=change/top-page level=3
    print &WA1.RECNAME      (,{RECLOC})     on-break print=change/top-page level=4

FROM PS_GP_WA_ARRAY WA1,
     PS_GP_PIN WC1
WHERE WA1.PIN_NUM = WC1.PIN_NUM
  AND WA1.RECNAME NOT IN (SELECT RECNAME FROM PSRECDEFN)
ORDER BY WC1.COUNTRY, WC1.PIN_NM, WA1.RECNAME
end-select
do RowCheckMessage(#count1)

do SubSectionHeading('Invalid Record-Field References')
do FieldListHeading('Y')
let #count2 = 0

begin-select
WC2.COUNTRY
WC2.PIN_NM
WA2.PIN_NUM
WA2.RECNAME
WB2.FIELDNAME

    let #count2 = #count2 + 1
    do FieldListHeading('N')
    print &WC2.COUNTRY      (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &WC2.PIN_NM       (,{ELEMLOC})    on-break print=change/top-page level=2
    print &WA2.PIN_NUM      (,{PINLOC})     on-break print=change/top-page level=3
    print &WA2.RECNAME      (,{RECLOC})     on-break print=change/top-page level=4
    print &WB2.FIELDNAME    (,{FIELDLOC})   on-break print=change/top-page level=5

FROM PS_GP_ARRAY WA2,
     PS_GP_ARRAY_FLD WB2,
     PS_GP_PIN WC2
WHERE WA2.PIN_NUM = WB2.PIN_NUM
  AND WA2.PIN_NUM = WC2.PIN_NUM
  AND WB2.PIN_NUM = WC2.PIN_NUM
  AND WA2.RECNAME IN (SELECT RECNAME FROM PSRECDEFN)
  AND WB2.FIELDNAME NOT IN (SELECT WE2.FIELDNAME FROM PSRECFIELDALL WE2
                           WHERE WE2.RECNAME = WA2.RECNAME)
ORDER BY WC2.COUNTRY, WC2.PIN_NM, WA2.RECNAME, WB2.FIELDNAME
end-select
do RowCheckMessage(#count2)

let #count = #count1+#count2
do SectionFooter(#count)
end-procedure


!----------------------------------------------------------------------!
! Procedure: AuditTrigger                                              !
! Descr:     Check Trigger Definitions for invalid Record/Record-field !
!            references                                                !
!----------------------------------------------------------------------!
begin-procedure AuditTrigger
do SectionHeading('Invalid Record/Record-Field references in Trigger Definitions','This section lists the invalid records and record-fields referenced by Trigger definitions.')
print 'It is recommended, but not mandatory to correct Inactive triggers that have invalid references. Active triggers with invalid references SHOULD BE fixed.' (+1,{DESCRLOC})

do SubSectionHeading('Invalid Record References')
do TriggerRecordHeading('Y')

let #count1 = 0

begin-select
TA1.COUNTRY
TA1.TRGR_ACTIVE_IND
TA1.RECNAME
TB1.XLATLONGNAME

    let #count1 = #count1 + 1
    do TriggerRecordHeading('N')
    print &TA1.COUNTRY              (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &TA1.TRGR_ACTIVE_IND      (,{TACTLOC})    on-break print=change/top-page level=2
    print &TA1.RECNAME              (,{TRECLOC})    on-break print=change/top-page level=3
    print &TB1.XLATLONGNAME         (,{TTYPELOC})   on-break print=change/top-page level=4

FROM PS_GP_TRGR_REC TA1, PSXLATITEM TB1
WHERE TA1.RECNAME NOT IN (SELECT RECNAME FROM PSRECDEFN)
  AND TB1.FIELDNAME = 'TRGR_TYPE'
  AND TB1.FIELDVALUE = TA1.TRGR_TYPE
  AND TB1.EFFDT = (SELECT MAX(TC1.EFFDT) 
                   FROM PSXLATITEM TC1 
                   WHERE TC1.FIELDNAME = 'TRGR_TYPE' 
                   AND TC1.FIELDVALUE = TB1.FIELDVALUE)
ORDER BY TA1.COUNTRY, TA1.TRGR_ACTIVE_IND DESC, TA1.RECNAME, TB1.XLATLONGNAME
end-select
do RowCheckMessage(#count1)

do SubSectionHeading('Invalid Record-Field References')
do TriggerFieldHeading('Y')

let #count2 = 0

begin-select
TA2.COUNTRY
TR2.TRGR_ACTIVE_IND
TA2.RECNAME
TB2.XLATLONGNAME
TA2.FIELDNAME

    let #count2 = #count2 + 1
    do TriggerFieldHeading('N')
    print &TA2.COUNTRY              (+1,{CNTRYLOC}) on-break print=change/top-page level=1 skiplines=1
    print &TR2.TRGR_ACTIVE_IND      (,{TACTLOC})    on-break print=change/top-page level=2
    print &TA2.RECNAME              (,{TRECLOC})    on-break print=change/top-page level=3
    print &TB2.XLATLONGNAME         (,{TTYPELOC})   on-break print=change/top-page level=4
    print &TA2.FIELDNAME            (,{TFIELDLOC})  on-break print=change/top-page level=5


FROM PS_GP_TRGR_RECFLD TA2, PSXLATITEM TB2, PS_GP_TRGR_REC TR2
WHERE TA2.COUNTRY = TR2.COUNTRY
  AND TA2.RECNAME = TR2.RECNAME
  AND TA2.TRGR_TYPE = TR2.TRGR_TYPE
  AND TA2.RECNAME IN (SELECT RECNAME FROM PSRECDEFN)
  AND TA2.FIELDNAME NOT IN (SELECT TE2.FIELDNAME FROM PSRECFIELDALL TE2
                           WHERE TE2.RECNAME = TA2.RECNAME)
  AND TB2.FIELDNAME = 'TRGR_TYPE'
  AND TB2.FIELDVALUE = TA2.TRGR_TYPE
  AND TB2.EFFDT = (SELECT MAX(TC2.EFFDT) 
                   FROM PSXLATITEM TC2
                   WHERE TC2.FIELDNAME = 'TRGR_TYPE' 
                   AND TC2.FIELDVALUE = TB2.FIELDVALUE)
ORDER BY TA2.COUNTRY, TR2.TRGR_ACTIVE_IND DESC, TA2.RECNAME, TB2.XLATLONGNAME, TA2.FIELDNAME
end-select
do RowCheckMessage(#count2)

let #count = #count1+#count2
do SectionFooter(#count)
end-procedure



!----------------------------------------------------------------------!
! Procedure: SectionHeading                                            !
! Descr:     Prints the Heading for each Section in the Audit Report   !
!            $SectionHeading - The Section Heading                     !
!            $SectionDescription - The Section Description             !
!----------------------------------------------------------------------!
begin-procedure SectionHeading($SectionHeading,$SectionDescription)
if #_current-line >= {BOTTOM1}
    New-Page
end-if
ALTER-PRINTER font=5 POINT-SIZE={SECTFONT}
if #_current-line < 7
    print $SectionHeading               (+1,{SECTLOC}) bold
else
    print $SectionHeading               (+3,{SECTLOC}) bold
end-if
ALTER-PRINTER font=5 POINT-SIZE={DSCRFONT}
print $SectionDescription           (+1,{DESCRLOC})
end-procedure


!----------------------------------------------------------------------!
! Procedure: SubSectionHeading                                         !
! Descr:     Prints the Heading for each Sub-Section in the Audit      !
!            Report                                                    !
!            $Heading - The Sub-Section Heading                        !
!----------------------------------------------------------------------!
begin-procedure SubSectionHeading($Heading)
if #_current-line >= {BOTTOM2}
    New-Page
end-if
ALTER-PRINTER font=5 POINT-SIZE={SUBSECTFONT}
print $heading                  (+2,{SUBSECTLOC}) bold
end-procedure



!----------------------------------------------------------------------!
! Procedure: RecordListHeading                                         !
! Descr:     Prints the Table headers for List of invalid record       !
!            references in Arrays and Writable Arrays                  !
!            $force - Option to force the printing of table headers.   !
!                     If set to 'Y', Headers will be printed always.   !
!                     If set to 'N', headers will be printed only on a !
!                     new page                                         !
!----------------------------------------------------------------------!
begin-procedure RecordListHeading($force)
if($force='Y' and #_current-line >= {BOTTOM3})
    New-Page
end-if
if($force='N' and #_current-line >= {BOTTOM3})
    let $force='Y'
    New-Page
end-if
if $force = 'Y'
    ALTER-PRINTER font=5 POINT-SIZE={HEADFONT}
    print '-' (+1,{CNTRYLOC},{R_LINE_LEN}) fill
    print 'COUNTRY'                     (+1,{CNTRYLOC}) bold
    print 'PIN NUM'                     (,{PINLOC}) bold
    print 'ELEMENT NAME'                (,{ELEMLOC}) bold
    print 'RECORD'                      (,{RECLOC}) bold
    print '-' (+1,{CNTRYLOC},{R_LINE_LEN}) fill
    ALTER-PRINTER font=5 POINT-SIZE={CELLFONT}
end-if
end-procedure


!----------------------------------------------------------------------!
! Procedure: TriggerRecordHeading                                      !
! Descr:     Prints the Table headers for List of invalid record       !
!            references in Triggers                                    !
!            $force - Option to force the printing of table headers.   !
!                     If set to 'Y', Headers will be printed always.   !
!                     If set to 'N', headers will be printed only on a !
!                     new page                                         !
!----------------------------------------------------------------------!
begin-procedure TriggerRecordHeading($force)
if($force='Y' and #_current-line >= {BOTTOM3})
    New-Page
end-if
if($force='N' and #_current-line >= {BOTTOM3})
    let $force='Y'
    New-Page
end-if
if $force = 'Y'
    ALTER-PRINTER font=5 POINT-SIZE={HEADFONT}
    print '-' (+1,{CNTRYLOC},{TR_LINE_LEN}) fill
    print 'COUNTRY'                     (+1,{CNTRYLOC}) bold
    print 'ACTIVE'                      (,{TACTLOC}) bold
    print 'RECORD'                      (,{TRECLOC}) bold
    print 'TYPE'                        (,{TTYPELOC}) bold
    print '-' (+1,{CNTRYLOC},{TR_LINE_LEN}) fill
    ALTER-PRINTER font=5 POINT-SIZE={CELLFONT}
end-if
end-procedure


!----------------------------------------------------------------------!
! Procedure: RecordListHeading                                         !
! Descr:     Prints the Table headers for List of invalid record-fields!
!            references in Arrays and Writable Arrays                  !
!            $force - Option to force the printing of table headers.   !
!                     If set to 'Y', Headers will be printed always.   !
!                     If set to 'N', headers will be printed only on a !
!                     new page                                         !
!----------------------------------------------------------------------!
begin-procedure FieldListHeading($force)
if($force='Y' and #_current-line >= {BOTTOM3})
    New-Page
end-if
if($force='N' and #_current-line >= {BOTTOM3})
    let $force='Y'
    New-Page
end-if
if $force = 'Y'
    ALTER-PRINTER font=5 POINT-SIZE={HEADFONT}
    print '-' (+1,{CNTRYLOC},{RF_LINE_LEN}) fill
    print 'COUNTRY'      (+1,{CNTRYLOC}) bold
    print 'PIN NUM'      (,{PINLOC}) bold
    print 'ELEMENT NAME' (,{ELEMLOC}) bold
    print 'RECORD'       (,{RECLOC}) bold
    print 'FIELD'        (,{FIELDLOC}) bold
    print '-' (+1,{CNTRYLOC},{RF_LINE_LEN}) fill
    ALTER-PRINTER font=5 POINT-SIZE={CELLFONT}
end-if
end-procedure


!----------------------------------------------------------------------!
! Procedure: RecordListHeading                                         !
! Descr:     Prints the Table headers for List of invalid record-fields!
!            references in Triggers                                    !
!            $force - Option to force the printing of table headers.   !
!                     If set to 'Y', Headers will be printed always.   !
!                     If set to 'N', headers will be printed only on a !
!                     new page                                         !
!----------------------------------------------------------------------!
begin-procedure TriggerFieldHeading($force)
if($force='Y' and #_current-line >= {BOTTOM3})
    New-Page
end-if
if($force='N' and #_current-line >= {BOTTOM3})
    let $force='Y'
    New-Page
end-if
if $force = 'Y'
    ALTER-PRINTER font=5 POINT-SIZE={HEADFONT}
    print '-' (+1,{CNTRYLOC},{TRF_LINE_LEN}) fill
    print 'COUNTRY'                     (+1,{CNTRYLOC}) bold
    print 'ACTIVE'                      (,{TACTLOC}) bold
    print 'RECORD'                      (,{TRECLOC}) bold
    print 'TYPE'                        (,{TTYPELOC}) bold
    print 'FIELD'                       (,{TFIELDLOC}) bold
    print '-' (+1,{CNTRYLOC},{TRF_LINE_LEN}) fill
    ALTER-PRINTER font=5 POINT-SIZE={CELLFONT}
end-if
end-procedure


!----------------------------------------------------------------------!
! Procedure: RowCheckMessage                                           !
! Descr:     Prints a message that no rows have been retrieved         !
!            depending on the value of #count                          !
!            #count - Number of rows retrieved                         !
!----------------------------------------------------------------------!
begin-procedure RowCheckMessage(#count)
ALTER-PRINTER font=5 POINT-SIZE={DSCRFONT}
if #count = 0
 print 'No rows to be displayed.'  (+1,{CNTRYLOC})
end-if
end-procedure




!----------------------------------------------------------------------!
! Procedure: SectionFooter                                             !
! Descr:     Prints a message at the end of a section giving the       !
!            number of invalid record/record-field references found    !
!            #count - Number of invalid references found               !
!----------------------------------------------------------------------!
begin-procedure SectionFooter(#count)
string #count ' invalid references found.' by ' ' into $line
print $line (+2,{DESCRLOC})
end-procedure


!***********************************************************************
! Additional SQCs included in the report                               *
!***********************************************************************
#include 'reset.sqc'         ! Reset printer
#include 'curdttim.sqc'      ! Current Date and Time
#include 'datetime.sqc'      ! Routines for date and time formatting
#Include 'number.sqc'        ! Routines to format numbers
#include 'prcsapi.sqc'       ! Update Process Request API
#include 'prcsdef.sqc'       ! Update Process Request variable declaration
#include 'sqrtrans.sqc'      ! Translate SQR strings to given language
#include 'hrsecty.sqc'       ! Get SQR Security parameters



