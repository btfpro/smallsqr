!***********************************************************************
!  TAX810MO:  Qtrly Wage List - Tape - MISSOURI                        *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/20:22:32:10                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  694792                                              !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if #Count_F > 0
    display ''
    display 'Upon successful conclusion of this program, the following'
    display 'file will have been created:'
    display ''
    display '  TAX810MO  contains 275-character records in the ICESA format'
    display '            required for the reporting of quarterly wages to the'
    display '            Missouri Division of Employment Security (MODES).'
    display ''
    display 'Employers should refer to the Missouri Electronic File Transfer'
    display 'and Magnetic Media Reporting Instructions for Reporting Quarterly'
    display 'Contribution and Wage Data for further instructions.' 
    display ''
    display 'Prior to submitting CDs, Diskettes or Tape Cartridges,'
    display 'the file must be renamed to UIWAGE.TXT '
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810MO' to $ReportID
  move 'Missouri Quarterly UI Wage Report' to $ReportTitle

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'MO'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear         to $CalendarYr 
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09
  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($QtrBeginDate,$QtrBeginDate,{DEFYMD},'','native')

  do Get-Quarter-Dates

  move '1' to $Year4
  move '1' to $MMLZero
  do Format-DateTime($AsOfToday, $out, {DEFMDY}, '', '')
  let $CreationDate = substr($out, 1, 2) || substr($out, 4, 2) || substr($out, 7, 4)

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr
  display ' '

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Transmitter-Contact-Data
  end-if

  do Open-File
end-procedure


begin-procedure Open-File

  let  $FileID = '{IMPORTPREFIX}TAX810MO{IMPORTSUFFIX}'
  open $FileID as 10 for-writing record=275:fixed

end-procedure


begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
     display '*** Company field blank on Tax Run Control Record ***'
     display '***************** Processing stopped ****************'
     display ' Company   ' noline
     display   $Company
     stop
  end-if

  do Get-Company-Data                 !Transmitter identifying data
  do Get-Total-Remittance-Amounts

  do Write-A-Record

begin-SELECT
A.COMPANY
A.DESCR

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F > 0
    do Write-F-Record
    do Print-File-Tot
  end-if
end-procedure


begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
P.HIRE_DT

  if &C.NlGrs_QTD > 0
    do Format-Hire-Date   
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1, PS_EMPLOYMENT P
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND P.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'MO'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND P.EMPL_RCD  =
      (SELECT MIN(EMPL_RCD)
       FROM   PS_EMPLOYMENT
       WHERE  EMPLID      = C.EMPLID)
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Format-Hire-Date

  move '1' to $Year4
  move '1' to $MMLZero
  do Format-DateTime(&P.Hire_Dt, $out, {DEFMDY},'','')
  let $HireDt = SUBSTR($out, 1, 2) || SUBSTR($out, 7, 4) 

end-procedure


begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if ($S123 = &Temp_SSN_Mask) OR (RTRIM(&D1.NATIONAL_ID, ' ') = '')
                              OR (&D1.NATIONAL_ID = '999999999')
    add 1 to #DefaultSSN
    let $SSN = EDIT(#DefaultSSN,'099999999')
  else
    move &D1.NATIONAL_ID        to $SSN
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD

  add #ExGrs_QTD to #Co_ExGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD

  move &C.EmplID           to $EmplID
  move 'PS_RC_TAX810MO D'  to $TAX810X1
  move 'PS_RC_TAX810MO D1' to $TAX810X2
  move 'PS_RC_TAX810MO D2' to $TAX810X3
  move 'PS_RC_TAX810MO D3' to $TAX810X4
 
  do Get-Hours
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

  do Check-Probationary

  let $MonEmpFlg1 = '0'
  let $MonEmpFlg2 = '0'
  let $MonEmpFlg3 = '0'
  let #MonEmpCnt1 = 0
  let #MonEmpCnt2 = 0
  let #MonEmpCnt3 = 0

  do Get-Monthly-Employment-Indicator

  add #MonEmpCnt1 to #CoMonEmpCnt1
  add #MonEmpCnt2 to #CoMonEmpCnt2
  add #MonEmpCnt3 to #CoMonEmpCnt3

  do Get-Employer-ID

  do Write-S-Record
end-procedure


begin-procedure Before-Company
  do Get-Company-Data
  do Get-Other-Fed-EIN

  move 'MO' to $State
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  move &Employer_ID_SUT to $StateEIN

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),15)
    end-if
  end-while

  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),15)
    end-if
  end-while

  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.99999
  let $Experience_Rt = SUBSTR($Experience_Rt,2,6)

  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if

  do Write-E-Record

#ifdef TAXTEST              !Reset so Gethours will work
  move 'CA' to $State
#endif

end-procedure


begin-procedure Get-Other-Fed-EIN
  let $OtherEIN = ' '

begin-SELECT

W2.OTHER_EIN
  move &W2.OTHER_EIN to $OtherEIN

FROM PS_W2_COMPANY  W2

WHERE W2.COMPANY       = $Company
  AND W2.CALENDAR_YEAR = &TX.Balance_Year

end-SELECT

  if $OtherEIN = '0'
     let $OtherEIN = ' '
  end-if
end-procedure


begin-procedure After-Company

  add #Co_NlGrs_QTD  to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD  to #Tot_TxGrs_QTD
  add #Co_ExGrs_QTD  to #Tot_ExGrs_QTD
  add #CoMonEmpCnt1  to #TotMonEmpCnt1
  add #CoMonEmpCnt2  to #TotMonEmpCnt2
  add #CoMonEmpCnt3  to #TotMonEmpCnt3

  add #Count_S to #Count_F

  if #Count_S > 0
     do Write-T-Record
  end-if

  let #UITaxesDue = #Co_TxGrs_QTD * #Experience_Rt
  let #UITaxesDue = EDIT(#UITaxesDue,'99999999999.99')
  if #UITaxesDue <> #TaxesDue
     display '*** Warning: Taxes Due not equal to Taxable Wages times UI Tax Rate'
     display '             for company ' noline
     display $Company noline
     display ', please verify'
     display ' '
  end-if
 
  if $Company <> $LastCompany
     move $Company     to $LastCompany
     move $CompanyName to $LastCompanyName
  end-if

  do Print-Company-Tot

  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  move 0 to #CoMonEmpCnt1
  move 0 to #CoMonEmpCnt2
  move 0 to #CoMonEmpCnt3
  move 0 to #Count_S
  new-page

end-procedure


begin-procedure Write-A-Record

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  move $CompnyAdd1     to $TransmitterAddress
  move $CompnyCity     to $TransmitterCity
  move &CT.State       to $TransmitterState

  if &CT.Country = 'USA'
     move &CT.Postal    to $Zip
  else
     move ' '           to $Zip
  end-if

  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6)  = 0 and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip             to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  write 10 from    'A':1          !    1
      &TX.Balance_Year:4          !    2
               $FedEIN:9          !    6
                'UTAX':4          !   15
                   $Sp:5          !   19
      $TransmitterName:50         !   24
   $TransmitterAddress:40         !   74
      $TransmitterCity:25         !  114
     $TransmitterState:2          !  139
                   $Sp:13         !  141
                  $Zip:5          !  154
             $ZipExtsn:5          !  159
   $TransmitterContact:30         !  164
     $TransmitterPhone:10         !  194
  $TransmitterPhoneExt:4          !  204
                   $Sp:6          !  208
                   $Sp:1          !  214
                   $Sp:5          !  215
                   $Sp:1          !  220
                   $Sp:9          !  221
      $TotalRemittance:13         !  230
         $CreationDate:8          !  243
                   $Sp:25         !  251

end-procedure


begin-procedure Write-E-Record

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  move $CompnyAdd1     to $TransmitterAddress
  move $CompnyCity     to $TransmitterCity
  move &CT.State       to $TransmitterState
  move &CT.Postal      to $Zip

  if &CT.Country = 'USA'
     move &CT.Postal    to $Zip
  else
     move ' '           to $Zip
  end-if

  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6)  = 0 and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip             to $ZipExtsn ~~~~~xxxxx


  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity

  uppercase $EmployerContact


  write 10 from    'E':1          !    1
      &TX.Balance_Year:4          !    2
               $FedEIN:9          !    6
                   $Sp:9          !   15
      $TransmitterName:50         !   24
   $TransmitterAddress:40         !   74
      $TransmitterCity:25         !  114
     $TransmitterState:2          !  139
                   $Sp:8          !  141
                  $Zip:5          !  149
             $ZipExtsn:5          !  154
                   $Sp:1          !  159
                   $Sp:1          !  160
                  '85':2          !  161
                   $Sp:4          !  163
                'UTAX':4          !  167
                  '29':2          !  171
             $StateEIN:15         !  173
          $QtrEndMonth:2          !  188
                   '1':1          !  190
                   $Sp:18         !  191
      $EmployerContact:30         !  209
        $EmployerPhone:10         !  239
     $EmployerPhoneExt:4          !  249
                   $Sp:5          !  253
             $OtherEIN:9          !  258
                   $Sp:9          !  267

  add 1 to #Count_E

end-procedure


begin-procedure Write-S-Record

  let $NlGrs_QTD  = EDIT(#NlGrs_QTD  * 100,'09999999999999')
  let $TxGrs_QTD  = EDIT(#TxGrs_QTD  * 100,'09999999999999')
  let $ExGrs_QTD  = EDIT(#ExGrs_QTD  * 100,'09999999999999')


  write 10 from    'S':1          !    1
                  $SSN:9          !    2
             $LastName:20         !   11
            $FirstName:12         !   31
           $MidInitial:1          !   43
                  '29':2          !   44
                   $Sp:4          !   46
      '00000000000000':14         !   50
            $NlGrs_QTD:14         !   64
            $ExGrs_QTD:14         !   78
            $TxGrs_QTD:14         !   92
     '000000000000000':15         !  106
           '000000000':9          !  121
                  '00':2          !  130
                $Hours:3          !  132
                   $Sp:8          !  135
                'UTAX':4          !  143
             $StateEIN:15         !  147
      $Employer_ID_Ext:4          !  162
                   $Sp:43         !  166
             $ProbCode:1          !  209
                   '0':1          !  210
                   $Sp:1          !  211
           $MonEmpFlg1:1          !  212
           $MonEmpFlg2:1          !  213
           $MonEmpFlg3:1          !  214
          $QtrEndMonth:2          !  215
           $CalendarYr:4          !  217
               $HireDt:6          !  221
       $SeparationDate:6          !  227
                   '0':1          !  233
                   $Sp:42         !  234

  add 1 to #Count_S

end-procedure


begin-procedure Write-T-Record

  move #Count_S      to $Count_S 0999999

  let $Co_NlGrs_QTD  = EDIT(#Co_NlGrs_QTD  * 100,'09999999999999')
  let $Co_TxGrs_QTD  = EDIT(#Co_TxGrs_QTD  * 100,'09999999999999')
  let $Co_ExGrs_QTD  = EDIT(#Co_ExGrs_QTD  * 100,'09999999999999')

  let $UITaxRate     = SUBSTR($UITaxRt,2,6)

  move #CoMonEmpCnt1 to $CoMonEmpCnt1 0999999
  move #CoMonEmpCnt2 to $CoMonEmpCnt2 0999999
  move #CoMonEmpCnt3 to $CoMonEmpCnt3 0999999


  write 10 from 'T':1             !    1
           $Count_S:7             !    2
             'UTAX':4             !    9
   '00000000000000':14            !   13
      $Co_NlGrs_QTD:14            !   27
      $Co_ExGrs_QTD:14            !   41
      $Co_TxGrs_QTD:14            !   55
    '0000000000000':13            !   69
     $Experience_Rt:6             !   82
          $TaxesDue:13            !   88
   $PrevQtrUnderpay:11            !  101
          $Interest:11            !  112
      '00000000000':11            !  123
            $Credit:11            !  134
                $Sp:4             !  145
     $AssessmentAmt:11            !  149
                $Sp:4             !  160
      '00000000000':11            !  164
      $TotalPayment:11            !  175
       $AmtRemitted:13            !  186
   '00000000000000':14            !  199
   '00000000000000':14            !  213
      $CoMonEmpCnt1:7             !  227
      $CoMonEmpCnt2:7             !  234
      $CoMonEmpCnt3:7             !  241
                $Sp:28            !  248

end-procedure


begin-procedure Write-F-Record

  move #Count_F to $Count_F 0999999999
  move #Count_E to $Count_E 0999999999

  let $Tot_NlGrs_QTD  = EDIT(#Tot_NlGrs_QTD * 100,'099999999999999')
  let $Tot_ExGrs_QTD  = EDIT(#Tot_ExGrs_QTD * 100,'099999999999999')
  let $Tot_TxGrs_QTD  = EDIT(#Tot_TxGrs_QTD * 100,'099999999999999')

  move #TotMonEmpCnt1 to $TotMonEmpCnt1 09999999
  move #TotMonEmpCnt2 to $TotMonEmpCnt2 09999999
  move #TotMonEmpCnt3 to $TotMonEmpCnt3 09999999


  write 10 from 'F':1             !    1
           $Count_F:10            !    2
           $Count_E:10            !   12
             'UTAX':4             !   22
  '000000000000000':15            !   26
     $Tot_NlGrs_QTD:15            !   41
     $Tot_ExGrs_QTD:15            !   56
     $Tot_TxGrs_QTD:15            !   71
  '000000000000000':15            !   86
  '000000000000000':15            !  101
     $TotMonEmpCnt1:8             !  116
     $TotMonEmpCnt2:8             !  124
     $TotMonEmpCnt3:8             !  132
                $Sp:136           !  140

end-procedure


begin-procedure Get-Total-Remittance-Amounts
begin-SELECT

SUM(MO_SUM.UI_AMOUNT_REMITTED)  &MO_SUM.UI_AMOUNT_REMITTED

FROM PS_RC_TAX810MO_PRM  MO_SUM

WHERE MO_SUM.OPRID       = $Prcs_OprID
  AND MO_SUM.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SELECT

  move &MO_SUM.UI_AMOUNT_REMITTED    to #TotalRemittance
  let $TotalRemittance = EDIT(#TotalRemittance * 100,'0999999999999')

end-procedure


begin-procedure Check-Probationary
  move '00'     to $ProbationaryCode
  move '0'      to $ProbCode
  move '000000' to $SeparationDate

begin-SELECT

B.EFFDT
E.HIRE_DT

  do Convert-To-DTU-Date(&B.EffDt,   $EffDtTmp)
  do Convert-To-DTU-Date(&E.Hire_Dt, $HireDtTmp)
  do DTU-Diff-Days($HireDtTmp, $EffDtTmp, #Service)

  if #Service <= 28
    move '01' to $ProbationaryCode
    move '1' to $Year4
    move '1' to $MMLZero
    do Format-DateTime(&B.EffDt, $SepDate, {DEFMDY}, '', '')
    let $SeparationDate = SUBSTR($SepDate,1,2) || SUBSTR($SepDate,7,4)
  end-if

  if $ProbationaryCode = '01'
     move '1' to $ProbCode
  end-if

FROM  PS_JOB B, PS_EMPLOYMENT E
WHERE B.COMPANY       = $Company
  AND B.EMPLID        = $EmplID
  AND B.EMPLID        = E.EMPLID
  AND B.EMPL_RCD      = E.EMPL_RCD
  AND B.ACTION        = 'TER'
  AND B.ACTION_REASON = 'PPP'
  AND B.EFFDT        >= $QtrBeginDate
  AND B.EFFDT        <= $PeriodEndDate
end-SELECT
end-procedure


begin-procedure Get-Quarter-Dates

    move &TX.Balance_Year   to $EffYear 9999
    move &TX.Balance_Qtr    to $EffQuarter 9

    let #EffYear       = to_number($EffYear)
    let #EffQuarter    = to_number($EffQuarter)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            break
        when-other
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
    end-evaluate

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')

end-procedure


begin-procedure Get-Monthly-Employment-Indicator
begin-SELECT
A1.COMPANY
A1.PAYGROUP
A1.PAY_END_DT
A1.EMPLID
A1.EMPL_RCD
A1.EARNS_BEGIN_DT
A1.EARNS_END_DT
A1.PAY_LINE_STATUS

   move &A1.EARNS_BEGIN_DT to $EarnsBD
   move &A1.EARNS_END_DT   to $EarnsED

   do Format-DateTime($EarnsBD, $EarnsBeginDt,{DEFCMP},'','')
   do Format-DateTime($EarnsED, $EarnsEndDt,{DEFCMP},'','')

   if $EarnsBeginDt <= $12thOfMonth1
     if $EarnsEndDt >= $12thOfMonth1
          let $MonEmpFlg1 = '1'
          let #MonEmpCnt1 = 1
      end-if
   end-if

    if $EarnsBeginDt <= $12thOfMonth2
      if $EarnsEndDt >= $12thOfMonth2
          let $MonEmpFlg2 = '1'
          let #MonEmpCnt2 = 1
      end-if
    end-if

    if $EarnsBeginDt <= $12thOfMonth3
      if $EarnsEndDt >= $12thOfMonth3
           let $MonEmpFlg3 = '1'
           let #MonEmpCnt3 = 1
       end-if
    end-if

FROM PS_PAY_EARNINGS A1, PS_PAY_CHECK C1
WHERE A1.COMPANY = $Company
  AND A1.EMPLID  = $EmplID
  AND A1.PAY_END_DT BETWEEN $First_Day_Of_Quarter AND $Last_Day_Of_Quarter
  AND A1.PAY_LINE_STATUS = 'F'
  AND (($12th_Of_1st_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_2nd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_3rd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT))
  AND A1.COMPANY = C1.COMPANY
  AND A1.PAYGROUP = C1.PAYGROUP
  AND A1.PAY_END_DT = C1.PAY_END_DT
  AND A1.OFF_CYCLE = C1.OFF_CYCLE
  AND A1.PAGE_NUM = C1.PAGE_NUM
  AND A1.LINE_NUM = C1.LINE_NUM
  AND C1.PAYCHECK_STATUS IN ('F','A','R')
end-SELECT
end-procedure


begin-procedure Get-Employer-ID                                         
                                                                        
  let $Employer_ID_Ext = '0000'                                             
                                                                        
  let $Job_Found = 'N'                                                  
  do Get-Active-Job                                                     
                                                                        
  if $Job_Found = 'N'                                                   
    do Get-Inactive-Job                                                 
  end-if                                                                
                                                                        
  if $Job_Found = 'Y'                                                   
    do Get-Employer-ID-Extension                                        
  end-if
                                                               
end-procedure                                                           
                                                                        
begin-procedure Get-Active-Job                                          
                                                                        
begin-select                                                            
JOB.BUSINESS_UNIT                                                       
JOB.TAX_LOCATION_CD                                                     
                                                                        
  let $Business_Unit = &JOB.BUSINESS_UNIT                               
  let $Tax_Location  = &JOB.TAX_LOCATION_CD                             
  let $Job_Found     = 'Y'                                              
                                                                        
FROM PS_JOB JOB                                                         
WHERE JOB.EMPLID     = $EmplID                                          
  AND JOB.COMPANY    = $Company                                         
  AND JOB.EMPL_RCD  =                                                  
      (SELECT MIN(EMPL_RCD)                                            
         FROM PS_JOB                                                   
        WHERE EMPLID    = JOB.EMPLID                                   
          AND COMPANY   = JOB.COMPANY                                  
          AND EMPL_STATUS = 'A')                                       
  AND JOB.EFFDT    =                                                 
      (SELECT MAX(EFFDT)                                             
         FROM PS_JOB                                                 
        WHERE EMPLID    = JOB.EMPLID                                 
          AND COMPANY   = JOB.COMPANY                                
          AND EMPL_RCD  = JOB.EMPL_RCD                                
          AND EFFDT    <= $AsOfDate)                                 
  AND JOB.EFFSEQ   =                                                 
      (SELECT MAX(EFFSEQ)                                            
         FROM PS_JOB                                                 
        WHERE EMPLID    = JOB.EMPLID                                 
          AND COMPANY   = JOB.COMPANY                                
          AND EMPL_RCD  = JOB.EMPL_RCD                               
          AND EFFDT     = JOB.EFFDT)                                  
end-select                                                            
end-procedure                                                         
                                                                      
begin-procedure Get-Inactive-Job                                      
                                                                      
begin-select                                                          
JOB1.BUSINESS_UNIT                                                    
JOB1.TAX_LOCATION_CD                                                  
                                                                      
  let $Business_Unit = &JOB1.BUSINESS_UNIT                            
  let $Tax_Location  = &JOB1.TAX_LOCATION_CD                          
  let $Job_Found     = 'Y'                                            
                                                                      
FROM PS_JOB JOB1                                                      
WHERE JOB1.EMPLID     = $EmplID                                       
  AND JOB1.COMPANY    = $Company                                      
  AND JOB1.EMPL_RCD  =                                                
      (SELECT MIN(EMPL_RCD)                                           
         FROM PS_JOB                                                  
        WHERE EMPLID    = JOB1.EMPLID                                 
          AND COMPANY   = JOB1.COMPANY)                               
  AND JOB1.EFFDT    =                                                 
      (SELECT MAX(EFFDT)                                            
         FROM PS_JOB                                                
        WHERE EMPLID    = JOB1.EMPLID                               
          AND COMPANY   = JOB1.COMPANY                              
          AND EMPL_RCD  = JOB1.EMPL_RCD                             
          AND EFFDT    <= $AsOfDate)                                
  AND JOB1.EFFSEQ   =                                               
      (SELECT MAX(EFFSEQ)                                           
         FROM PS_JOB                                                
        WHERE EMPLID    = JOB1.EMPLID                               
          AND COMPANY   = JOB1.COMPANY                              
          AND EMPL_RCD  = JOB1.EMPL_RCD                             
          AND EFFDT     = JOB1.EFFDT)                               
end-select                                                          
end-procedure                                                       
                                                                    
begin-procedure Get-Employer-ID-Extension                           
begin-select                                                        
LOC.EMPLOYER_ID_EXT                                                 
                                                                    
  let $Employer_ID_Ext = &LOC.Employer_ID_Ext       
                                                                    
FROM PS_CO_UI_RPTCD_TBL LOC                                         
WHERE LOC.COMPANY  = $Company                                       
  AND LOC.LOCATION = $Tax_Location                                  
  AND LOC.EFFDT =                                                   
      (SELECT MAX(EFFDT)                                            
         FROM PS_CO_UI_RPTCD_TBL                                    
        WHERE COMPANY  = LOC.COMPANY                                
          AND LOCATION = LOC.LOCATION                               
          AND EFFDT   <= $AsOfDate)                                 
  AND LOC.EFF_STATUS = 'A'                                          
end-select                                                          

do Format-Employer-ID-Ext

end-procedure


begin-procedure Format-Employer-ID-Ext
  let $aflag = ''
  let $ovrs1 = ''
  let #icntr = 1
  let #lngth = Length($Employer_ID_Ext) + 1
  while #icntr < #lngth
      let $ifld = Substr($Employer_ID_Ext,#icntr,1)
      let #f_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$ifld, 1)
       if #f_Inst <> 0
          let $ovrs1 =  $ovrs1 || $ifld
         let #a_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$ifld, 1)
         if #a_Inst <> 0
            let $aflag = 'Y'
         end-if
       end-if
       add 1 to #icntr
  end-while

  if $aflag = 'Y'
     display ''
     display '*******************************************************************'
     display 'WARNING: Employer ID Extension ' noline
     display $ovrs1                            noline
     display ' contains non-numeric values.'
     display '*******************************************************************'
  end-if

  let #lngth = Length($ovrs1)
  if #lngth < 4
      let #icntr = 1
      let $ovrs2 = ''

      let #dlngth = 5 - #lngth
      while #icntr < #dlngth
        let $ovrs2 =  $ovrs2 || '0'
        add 1 to #icntr
      end-while
      let $ovrs2 =  $ovrs2 || Substr($ovrs1,1,#lngth)

      let $Emplyr_ID_Ext = Substr($ovrs2,1,4)
  else
      let $Emplyr_ID_Ext = Substr($ovrs1,1,4)
      if #lngth > 4
         display '***************************************************************'
         display 'WARNING: Employer ID Extension ' noline
         display $ovrs1                            noline
         display ' is more than 4 digits'
         display '         in the UI Report Code Table.'
         display '***************************************************************'
      end-if
  end-if

end-procedure


begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $TransmitterContact  maxlen=30 '  Contact name (30 char max)'
  input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'
end-procedure


begin-procedure Convert-Parameters
end-procedure


begin-procedure Select-Transmitter-Contact-Data
begin-select
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN

FROM PS_TAX960_PARM RC960
end-select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
     show 'MMREF Parameters must be set up on SETUP Menu.'
     show 'Re-execute after establishing MMREF Parameters.'
     stop
  end-if

  let $TransmitterContact       = translate(&RC960.CONTACT_NAME_SSA,',','')

  let $TempPho1= translate (&RC960.TELEPHONE_NBR,' ','')
  let $TempPho1= translate ($TempPho1,'-','')
  let $TempPho1= translate ($TempPho1,'(','')
  let $TempPho1= translate ($TempPho1,')','')
  let $TempPho1= translate ($TempPho1,'/','')
  let $TempPho1= translate ($TempPho1,'\','')
  move $TempPho1 to $TransmitterPhone

  do Is-String-Numeric ($TransmitterPhone, #Rtrn_Value)
  if (length($TempPho1) <> 10) or (#Rtrn_Value = 0)
     display '*** Warning: Contact Telephone Number is not 10 digits ' noline
     display ': ' noline
     display $TransmitterPhone
     display ''
  end-if

  If &RC960.PHONE_EXTN <> 0
     move &RC960.PHONE_EXTN to $TransmitterPhoneExt
  Else
     move '    ' to $TransmitterPhoneExt
  End-if

End-Procedure


begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure


begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should include decimal and cents, but no commas, e.g. 1234.00)'
  input $TaxesDue            '   Quarterly Contribution Due'
  input $Interest            '   Interest Due'
  input $AssessmentAmt       '   Assessment Amount'
  input $PrevQtrUnderpay     '   Previous Underpay'
  input $Credit              '   Previous Credit'
  input $TotalPayment        '   Total Payment Due'
  input $AmtRemitted         '   Amount Remitted'

  display 'Enter Employer Contact Information:'
  input $EmployerContact  maxlen=30 '  Contact name (30 char max)'
  input $EmployerPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $EmployerPhoneExt maxlen=4  '  Contact 4-digit extension'

  move $TaxesDue        to #TaxesDue
  move $Interest        to #Interest
  move $AssessmentAmt   to #AssessmentAmt
  move $PrevQtrUnderpay to #PrevQtrUnderpay
  move $Credit          to #Credit
  move $TotalPayment    to #TotalPayment
  move $AmtRemitted     to #AmtRemitted

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $AssessmentAmt   = EDIT(#AssessmentAmt   * 100,'09999999999')
  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')
  let $AmtRemitted     = EDIT(#AmtRemitted     * 100,'0999999999999')

end-procedure


begin-procedure Company-Run-Control
begin-select

MO.UI_TAXES_DUE
MO.UI_PREV_QTR_UNDRPY
MO.UI_INTEREST_DUE
MO.UI_PREVIOUS_CREDIT
MO.UI_ER_ASSESS_AMT
MO.UI_TOTAL_PAYMENT
MO.UI_AMOUNT_REMITTED
MO.CONTACT_PERSON
MO.CONTACT_PHONE
MO.CONTACT_PHONE_EXT

FROM PS_RC_TAX810MO_PRM  MO

WHERE MO.OPRID       = $Prcs_OprID
  AND MO.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND MO.COMPANY     = $Company

end-SELECT

  move &MO.UI_Taxes_Due        to #TaxesDue
  move &MO.UI_Prev_Qtr_Undrpy  to #PrevQtrUnderpay
  move &MO.UI_Interest_Due     to #Interest
  move &MO.UI_Previous_Credit  to #Credit
  move &MO.UI_ER_Assess_Amt    to #AssessmentAmt
  move &MO.UI_Total_Payment    to #TotalPayment
  move &MO.UI_Amount_Remitted  to #AmtRemitted

  let #TestTotalPayment = #TaxesDue + #Interest + #PrevQtrUnderpay
  let #TestTotalPayment = #TestTotalPayment - #Credit

  if #TestTotalPayment <> #TotalPayment
     display ' '
     display '*** Warning: Cross check on Total Payment Due indicates error'
     display '             for company ' noline
     display $Company noline
     display ', please verify'
     display ' '
  end-if

  move &MO.Contact_Person      to $EmployerContact
  move &MO.Contact_Phone       to $EmployerPhone
  move &MO.Contact_Phone_Ext   to $EmployerPhoneExt

  unstring  $EmployerPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $EmployerPhone = $str1 || $str3 || $str4

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $AssessmentAmt   = EDIT(#AssessmentAmt   * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')
  let $AmtRemitted     = EDIT(#AmtRemitted     * 100,'0999999999999')

end-procedure


begin-procedure Print-Company-Tot

  print '**** Company Total ****'         (+4,1)
  print 'No Limit Gross QTD '             (+2,1,26)
  print #Co_NlGrs_QTD                      (,28)   edit 999,999,999.99mi
                                                                         
  print 'Taxable Gross QTD '              (+2,1,26)
  print #Co_TxGrs_QTD                      (,28)   edit 999,999,999.99mi

  print 'Excess Gross QTD   '             (+2,1,26)
  print #Co_ExGrs_QTD                      (,28)   edit 999,999,999.99mi

  print 'Employees Reported '             (+2,1,26)
  print #Count_S                           (,31)   edit 999,999,999

  print 'Taxes Due '                      (+2,1,26)
  print #TaxesDue                          (,25)   edit 99,999,999,999.99mi

  print 'Interest Due '                   (+2,1,26)
  print #Interest                          (,28)   edit 999,999,999.99mi
    
  print 'ER Assessment Amount '           (+2,1,26)
  print #AssessmentAmt                     (,28)   edit 999,999,999.99mi

  print 'Previous Qtr Underpayment '      (+2,1,26)
  print #PrevQtrUnderpay                   (,28)   edit 999,999,999.99mi

  print 'Previous Credit '                (+2,1,26)
  print #Credit                            (,28)   edit 999,999,999.99mi

  print 'Total Payment Due '              (+2,1,26)
  print #TotalPayment                      (,28)   edit 999,999,999.99mi

  print 'Amount Remitted '                (+2,1,26)
  print #AmtRemitted                       (,25)   edit 99,999,999,999.99mi

  print 'Month 1 Employment Count '       (+2,1,26)
  print #CoMonEmpCnt1                      (,33)   edit 9,999,999

  print 'Month 2 Employment Count '       (+2,1,26)
  print #CoMonEmpCnt2                      (,33)   edit 9,999,999

  print 'Month 3 Employment Count '       (+2,1,26)
  print #CoMonEmpCnt3                      (,33)   edit 9,999,999

  print 'UI Employer Account ID '         (+2,1,26)
  print &Employer_ID_SUT                   (,33)

end-procedure


begin-procedure Print-File-Tot

  move '' to $LastCompany
  move '' to $LastCompanyName

  print '**** File Total ****'            (+3,1)
  print 'No Limit Gross QTD '             (+2,1,26)
  print #Tot_NlGrs_QTD                     (,28)   edit 9,999,999,999,999.99mi

  print 'Taxable Gross QTD '              (+2,1,26)
  print #Tot_TxGrs_QTD                     (,28)   edit 9,999,999,999,999.99mi

  print 'Excess Gross QTD '               (+2,1,26)
  print #Tot_ExGrs_QTD                     (,28)   edit 9,999,999,999,999.99mi

  print 'Employees Reported '             (+2,1,26)
  print #Count_F                           (,35)   edit 9,999,999,999

  print 'Employers Reported '             (+2,1,26)
  print #Count_E                           (,35)   edit 9,999,999,999

  print 'Amount Remitted '                (+2,1,26)
  print #TotalRemittance                   (,31)   edit 99,999,999,999.99mi

  print 'Month 1 Employment Count '       (+2,1,26)
  print #TotMonEmpCnt1                     (,38)   edit 99,999,999

  print 'Month 2 Employment Count '       (+2,1,26)
  print #TotMonEmpCnt2                     (,38)   edit 99,999,999

  print 'Month 3 Employment Count '       (+2,1,26)
  print #TotMonEmpCnt3                     (,38)   edit 99,999,999

  print 'Output File:  '                  (+2,1)
  print $FileID                           (+1,10)

end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'gethours.sqc'  !Get-Hours procedure
