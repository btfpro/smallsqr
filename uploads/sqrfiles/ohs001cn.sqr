!***********************************************************************
!  OHS001CN: Workers' Compensation Board Form 7
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:07:43                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment


!***********************************************************************
! BEGIN-REPORT
!***********************************************************************
begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report

   if $OK = 'Y'
      do Report($GetEmplid,#GetEmplRcd,$Incident_Nbr)
   end-if
   do Reset
   do Stdapi-Term

end-report



!***********************************************************************
begin-procedure Init-Report
!***********************************************************************

  move 'OHS001CN' to $ReportID
  move 'Workers'' Compensation Board Form 7' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init
  do Get-Calendar-Year-Id
  if $prcs_process_instance = ''
     do Ask-Input-Data($GetEmplid,#GetEmplRcd,$Incident_Nbr,$OK)
  else
     do Select-Parameters
  end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Values
!***********************************************************************
 begin-procedure Get-Values

   do Get-Emplid-Incident-Parameters
   let $OK = 'Y'
   let $GetEmplid = $Emplid
   let #GetEmplRcd = #Emplrcd
   let $Incident_Nbr = $Incident
   
 end-procedure

#Include 'setup02.sqc'  !Printer and page-size initialization

!***********************************************************************
! BEGIN-HEADING
!***********************************************************************
begin-heading 4
  #Include 'stdhdg01.sqc'
end-heading

!***********************************************************************
! BEGIN-PROCEDURE Ask-Input-Data
!***********************************************************************
begin-procedure Ask-Input-Data(:$Emplid,:#Emplrcd,:$Incident_Nbr,:$OK)

   let $OK = 'Y'
   input $Emplid 'Enter Employee ID'
   if $Emplid <> ''
      let #EmplRcd = 0
      input #EmplRcd 'Enter Employee Record Number'
      if #EmplRcd >= 0
         input $Incident_Nbr 'Enter Incident Number'
         if $Incident_Nbr <> ''
            let $Incident_Nbr = lpad($Incident_Nbr,8,'0')
            do Check-Entry($Emplid,#Emplrcd,$Incident_Nbr,$OK)
            if $OK = 'N'
               display '***  Invalid Emplid / EmplRcd / Incident Number  ***'
               display 'Emplid          ' noline
               display $Emplid
               display 'EmplRcd          ' noline
               display #EmplRcd
               display 'Incident Number ' noline
               display $Incident_Nbr
            end-if
         else
            let $OK = 'N'
         end-if
      else
         let $OK = 'N'
      end-if
   else
      let $OK = 'N'
   end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Report
!***********************************************************************
begin-procedure Report($GetEmplid,#GetEmplRcd,$Incident_Nbr)



!-----------------------------------------------------------------------
! Select Incident/Injury Information
!-----------------------------------------------------------------------
begin-SELECT
ID.REG_REGION
ID.INCIDENT_DT
{TIMEOUT-PREFIX}ID.INCIDENT_TIME{TIMEOUT-SUFFIX} &ID.INCIDENT_TM
ID.INCIDENT_TIME
ID.DESCRLONG
ID.REPORTED_TO
ID.LOCATION_NAME
ID.ADDRESS1
ID.ADDRESS2
ID.CITY
ID.STATE
ID.POSTAL
ID.COUNTRY
ID.EXACT_LOCATION
ID.EMPLOYER_PREMISES
ID.HS_CONTACT_EMPLID
ID.BUSINESS_TYPE
II.EMPL_RCD
II.DT_REPORTED
{TIMEOUT-PREFIX}II.TM_REPORTED {TIMEOUT-SUFFIX} &II.TM_REPORTED
II.COMMENTS
II.RETURN_DT
{TIMEOUT-PREFIX}II.RETURN_TM{TIMEOUT-SUFFIX} &II.RETURN_TM
II.ABSENT_AFTER
II.RTW_MODWORK_SW_CAN
II.LAST_FULL_WORK_DAY
{TIMEOUT-PREFIX}II.LAST_WORKED_TM{TIMEOUT-SUFFIX} &II.LAST_WORKED_TM
II.EARN_LESS_PAY
II.PAYMENTS_DURING
II.BENEFITS_CONT
II.ACTIONS_BUSREL_SW
II.ACTIONS_ROUTINE_SW

   do Format-DateTime(&ID.Incident_Dt,$Incident_Dt,{DEFDATE},'','')
   let $IncidentDt         = &ID.Incident_Dt

  if length(&ID.INCIDENT_TM) > 15
    move '1' to $Year4
    do Format-DateTime(&ID.INCIDENT_TM,$inc_tm,{DEFMDY},'time','')
    let $inc_tm = {ps-substr}($inc_tm,12,20)
    do Format-Times($inc_tm, $inc_tm)
  else
    do Format-Times(&ID.INCIDENT_TM, $inc_tm)
  end-if
   let $incident_time = $inc_tm

   let $Incident_Descr     = &ID.Descrlong
   let $Reg_Region         = &ID.REG_REGION

   do Get-Empl-Name(&ID.Reported_To,$Reported_To)
   let $Location_Name      = &ID.Location_Name
   let $Incdnt_Street      = rtrim(&ID.Address1,' ') || ' ' || rtrim(&ID.Address2,' ')
   let $Incdnt_City_State  = rtrim(&ID.City,' ') || ', ' || &ID.State
   let $Incdnt_Zip_Cntry   = &ID.POSTAL || '  ' || &ID.Country
   let $Exact_Location     = &ID.Exact_Location
   let $Employer_Premises  = cond(&ID.Employer_Premises='Y','Yes','No')
   let $Activity           = &ID.BUSINESS_TYPE


   let #Empl_RCD           = &II.EMPL_RCD
   do Format-DateTime(&II.Dt_Reported,$Dt_Reported,{DEFDATE},'','')

  if length(&II.TM_REPORTED) > 15
    move '1' to $Year4
    do Format-DateTime(&II.TM_REPORTED,$Tm_Reported,{DEFMDY},'time','')
    let $Tm_Reported = {ps-substr}($Tm_Reported,12,20)
    do Format-Times($Tm_Reported, $Tm_Reported)
  else
    do Format-Times(&II.TM_REPORTED, $Tm_Reported)
  end-if


   let $Injury_Descr       = &II.Comments

   do Format-DateTime(&II.RETURN_DT,$Return_Dt,{DEFDATE},'','')

   if length(&II.RETURN_TM) > 15
      move '1' to $Year4
      do Format-DateTime(&II.RETURN_TM,$Return_TM,{DEFMDY},'time','')
      let $Return_TM = {ps-substr}($Return_TM,12,20)
      do Format-Times($Return_TM, $Return_TM)
   else
      do Format-Times(&II.RETURN_TM, $Return_TM)
   end-if

   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'D', $WCB_Descr)
   let $Delay_Reporting    = $WCB_Descr
   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'A', $WCB_Descr)
   let $Activities         = $WCB_Descr


   do Translate-Field('ABSENT_AFTER',&II.Absent_After,$Absent_After)
   let $Other_Duties       = cond(&II.RTW_MODWORK_SW_CAN='Y','Yes','No')
   do Format-DateTime(&II.LAST_FULL_WORK_DAY,$Last_Worked_Dt,{DEFDATE},'','')

   if length(&II.Last_Worked_Tm) > 15
      move '1' to $Year4
      do Format-DateTime(&II.Last_Worked_Tm,$Last_Worked_Tm,{DEFMDY},'time','')
      let $Last_Worked_Tm= {ps-substr}($Last_Worked_Tm,12,20)
      do Format-Times($Last_Wrkd_End, $Last_Worked_Tm)
   else
      do Format-Times(&II.Last_Worked_Tm, $Last_Worked_Tm)
   end-if


   let $Earn_Less_Pay      = cond(&II.Earn_Less_Pay='Y','Yes','No')
   let $Payments_During    = cond(&II.Payments_During='Y','Yes','No')
   do Translate-Field('BENEFITS_CONT',&II.Benefits_Cont,$Benefits_Cont)
   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'E', $WCB_Descr)
   let $Rtrn_Earlier_Descr = $WCB_Descr
   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'P', $WCB_Descr)
   let $Prev_Pain_Descr    = $WCB_Descr

   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'B', $WCB_Descr)
   let $Doubt_Descr        = $WCB_Descr
   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'S', $WCB_Descr)
   let $Satisfied_Descr    = $WCB_Descr


FROM  PS_INCIDENT_DATA ID,
      PS_INJURY_ILL II

WHERE ID.INCIDENT_NBR = $Incident_Nbr
  AND II.INCIDENT_NBR = ID.INCIDENT_NBR
  AND II.EMPLID = $GetEmplId
  AND II.EMPL_RCD = #GetEmplRcd

end-SELECT

!-----------------------------------------------------------------------
! Select Health & Safety Contact Information
!
!-----------------------------------------------------------------------

let $hs_contact_emplid = &ID.HS_CONTACT_EMPLID
do Get-Primary-Job($hs_contact_emplid, '', #hs_contact_emplrcd)

begin-SELECT

E1.EMPLID
E1.POSITION_PHONE

   do Get-Empl-Name(&E1.Emplid,$Contact_Name)
   let $WorkPhone    = &E1.Position_Phone

FROM PS_PER_ORG_ASGN E1
WHERE E1.EMPLID = &ID.HS_CONTACT_EMPLID
     AND E1.EMPL_RCD = #hs_contact_emplrcd
end-SELECT
!-----------------------------------------------------------------------
! Select Incident REport Information
!
!-----------------------------------------------------------------------
begin-SELECT

IR.FIRM_NBR_RPT_CAN
IR.OP_LOCN_RPT_CAN

   let #WCB_Firm          = &IR.FIRM_NBR_RPT_CAN
   let #Locn_rpt          = &IR.OP_LOCN_RPT_CAN

FROM PS_INCIDENT_REPORT IR
WHERE IR.INCIDENT_NBR = $Incident_nbr
  AND IR.REG_REGION = 'CANBC'
end-SELECT


!-----------------------------------------------------------------------
! Select Personal/Job/Employment/Company/Location Information
!-----------------------------------------------------------------------

begin-SELECT
PD1.NAME
NDD.NATIONAL_ID
PD1.BIRTHDATE
PD1.SEX
PD1.HEALTH_CARE_NBR
PD1.HEALTH_CARE_STATE
PD1.MAR_STATUS
PD1.LANG_CD
J2.EFFDT
J2.SETID_JOBCODE
J2.JOBCODE
J2.JOB_ENTRY_DT
J2.HOURLY_RT
J2.STD_HOURS
J2.STD_HRS_FREQUENCY
J2.PAYGROUP
J2.SHIFT
J2.COMPANY
J2.EMPL_CLASS
J2.EMPL_TYPE
J2.FULL_PART_TIME
J2.BUSINESS_UNIT
J2.LOCATION
J2.SETID_LOCATION
J2.REG_REGION
C.DESCR
C.ADDRESS1
C.ADDRESS2
C.CITY
C.STATE
C.POSTAL
C.COUNTRY
C.WCB_RATE_NBR
E2.HIRE_DT

   let $Empl_Name         = &PD1.Name

   let $SIN               = {ps-substr}(&NDD.NATIONAL_ID,1,3) || ' ' || {ps-substr}(&NDD.NATIONAL_ID,4,3) || ' ' || {ps-substr}(&NDD.NATIONAL_ID,7,3)
   do Format-DateTime(&PD1.Birthdate,$Birthdate,{DEFDATE},'','')
   let $Sex               = &PD1.Sex
   let $HealthCare_Nbr    = Rtrim(&PD1.HEALTH_CARE_NBR,' ')
   let $Health_Care_State = Rtrim(&PD1.Health_Care_State,' ')
   do Translate-Field('MAR_STATUS',&PD1.Mar_Status,$Mar_Status)
   do Translate-Field('LANG_CD',&PD1.LANG_CD,$LANG_CD)
   do Format-DateTime(&J2.Job_Entry_Dt,$Job_Entry_Dt,{DEFDATE},'','')
   let $Job_Effdt         = &J2.Effdt
   let #Hourly_Rt         = &J2.Hourly_Rt
   let #Std_Hours         = &J2.Std_Hours
   let $Std_Hrs_Freq      = rtrim(&J2.Std_Hrs_Frequency,' ')
   let $PayGroup          = &J2.PayGroup
   let $Shift             = &J2.Shift
   let $Company           = &J2.Company
   let $Empl_Class        = &J2.Empl_Class
   let $Reg_Region        = &J2.Reg_Region
   ! input: $Reg_Region, $Empl_Class; output: $Empl_Class_Name
   do Get-Empl-Class-Name
   let $Empl_type         = &J2.Empl_Type
   do Translate-Field('FULL_PART_TIME',&J2.Full_Part_Time,$Full_Part_Time)
   let $Co_Name           = &C.Descr
   let $Co_Street         = rtrim(&C.Address1,' ') || ' ' || rtrim(&C.Address2,' ')
   let $Co_City_State     = rtrim(&C.City,' ') || ', ' || rtrim(&C.State,' ')
   let $Co_Zip_Cntry      = &C.POSTAL || '  ' || &C.Country
   let $WCB_Rate          = &C.WCB_RATE_NBR
   do Format-DateTime(&E2.Hire_Dt,$Hire_Dt,{DEFDATE},'','')

   do Get-Address-Data ($GetEmplid, &ID.INCIDENT_DT, $AD_Address1,
                        $AD_Address2,$AD_City,$AD_State,$AD_Postal,
                        $AD_Country)
   let $Empl_Street       = rtrim($AD_Address1,' ') || ' ' || rtrim($AD_Address2,' ')
   let $Empl_City_State   = rtrim($AD_City,' ') || ', ' || $AD_State
   let $Empl_Zip_Cntry    = $AD_POSTAL || '  ' || $AD_Country

   do Get-Phone-Data ($GetEmplid, $Pers_Phone)
   move $Pers_Phone to $Home_Phone

 FROM PS_PERSONAL_DATA PD1,
     PS_JOB J2,
     PS_COMPANY_TBL C,
     PS_EMPLOYMENT E2,
     PS_PERS_NID NDD

WHERE PD1.EMPLID = $GetEmplid
   AND NDD.EMPLID = PD1.EMPLID
   AND NDD.COUNTRY='CAN'
   AND J2.EMPLID = PD1.EMPLID
   AND J2.EMPL_RCD = #Empl_RCD
   AND J2.EFFDT = (SELECT MAX(J21.EFFDT) FROM PS_JOB J21
                 WHERE J21.EMPLID = J2.EMPLID AND J21.EMPL_RCD = J2.EMPL_RCD
                 AND J21.EFFDT <= &ID.INCIDENT_DT
                  )
   AND J2.EFFSEQ = (SELECT MAX(J22.EFFSEQ) FROM PS_JOB J22
                 WHERE J22.EMPLID = J2.EMPLID AND J22.EMPL_RCD = J2.EMPL_RCD
                 AND J22.EFFDT = J2.EFFDT)
    AND C.COMPANY = J2.COMPANY
   AND C.EFF_STATUS = 'A'
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_COMPANY_TBL C1
                 WHERE C1.COMPANY = C.COMPANY AND C1.EFF_STATUS = 'A'
                 AND C1.EFFDT <= &ID.INCIDENT_DT)
   AND E2.EMPLID = PD1.EMPLID
   AND E2.EMPL_RCD = J2.EMPL_RCD

  end-SELECT


begin-select
JC.DESCR
      let $Occupation        = &JC.Descr
FROM PS_JOBCODE_TBL JC
WHERE JC.JOBCODE = &J2.JOBCODE
   AND JC.SETID = &J2.SETID_JOBCODE
   AND JC.EFF_STATUS = 'A'
   AND JC.EFFDT = (SELECT MAX(JC1.EFFDT) FROM PS_JOBCODE_TBL JC1
                   WHERE JC1.JOBCODE = JC.JOBCODE
                     AND JC1.SETID = JC.SETID
                     AND JC1.EFF_STATUS = 'A'
                     AND JC1.EFFDT <= &ID.INCIDENT_DT)
end-select

begin-select
L.DESCR
L.ADDRESS1
L.ADDRESS2
L.CITY
L.STATE
L.POSTAL
L.COUNTRY
   let $Location          = &L.Descr
   let $Wrk_Street        = rtrim(&L.Address1,' ') || ' ' || rtrim(&L.Address2,' ')
   let $Wrk_City_State    = rtrim(&L.City,' ') || ', ' || &L.State
   let $Wrk_Zip_Cntry     = &L.POSTAL || '  ' || &L.Country


FROM PS_LOCATION_TBL L
WHERE L.LOCATION = &J2.LOCATION
   AND L.SETID = &J2.SETID_LOCATION
   AND L.EFF_STATUS = 'A'
   AND L.EFFDT = (SELECT MAX(L1.EFFDT) FROM PS_LOCATION_TBL L1
                 WHERE L1.LOCATION = L.LOCATION
                 AND L1.SETID = L.SETID
                 AND L1.EFF_STATUS = 'A'
                 AND L1.EFFDT <= &ID.INCIDENT_DT)
end-select

!-----------------------------------------------------------------------
! Select Union Data
!-----------------------------------------------------------------------
  let $Union = 'No'
Begin-Select

JL.UNION_CD

   let $Union = cond(&JL.Union_Cd=' ','No','Yes')

FROM PS_JOB JL
WHERE JL.EMPLID    = $GetEmplid
  AND JL.EMPL_RCD = #Empl_RCD
  AND JL.EFFDT = (SELECT MAX(JL1.EFFDT) FROM PS_JOB JL1
                 WHERE JL1.EMPLID    = JL.EMPLID
                   AND JL1.EMPL_RCD = JL.EMPL_RCD
                   AND JL1.EFFDT     <= $IncidentDt)
  AND JL.EFFSEQ = (SELECT MAX(JL2.EFFSEQ) FROM PS_JOB JL2
                 WHERE JL2.EMPLID     = JL.EMPLID
                   AND JL2.EMPL_RCD  = JL.EMPL_RCD
                   AND JL2.EFFDT      = JL.EFFDT)
End-Select

!-----------------------------------------------------------------------
! Select HS_EMPLOYMENT Information
!-----------------------------------------------------------------------

begin-SELECT
HS.EMPL_SECURE_SW_CAN
HS.REL_PARTNER_SW_CAN
HS.REL_PRNCPL_SW_CAN
HS.REL_RLTV_SW_CAN
HS.EMPTYP_FTW_SW_CAN
HS.EMPTYP_PER_SW_CAN
HS.EMPTYP_SNL_SW_CAN
HS.EMPTYP_CSL_SW_CAN
HS.EMPTYP_VLN_SW_CAN
HS.EMPTYP_STU_SW_CAN
HS.EMPTYP_SUB_SW_CAN
HS.OCCUPATION_CD_CAN

   let $Employment_Secure  = cond(&HS.EMPL_SECURE_SW_CAN='Y','Yes','No')
   let $Partner   = cond(&HS.REL_PARTNER_SW_CAN='Y','Yes','No')
   let $Principal = cond(&HS.REL_PRNCPL_SW_CAN='Y','Yes','No')
   let $Relative  = cond(&HS.REL_RLTV_SW_CAN='Y','Yes','No')
   let $Full_time = cond(&HS.EMPTYP_FTW_SW_CAN='Y','Yes','No')
   let $Permanent = cond(&HS.EMPTYP_PER_SW_CAN='Y','Yes','No')
   let $Seasonal  = cond(&HS.EMPTYP_SNL_SW_CAN='Y','Yes','No')
   let $Casual    = cond(&HS.EMPTYP_CSL_SW_CAN='Y','Yes','No')
   let $Volunteer = cond(&HS.EMPTYP_VLN_SW_CAN='Y','Yes','No')
   let $Student   = cond(&HS.EMPTYP_STU_SW_CAN='Y','Yes','No')
   let $Subcon    = cond(&HS.EMPTYP_SUB_SW_CAN='Y','Yes','No')

FROM PS_HS_EMPLOYMENT HS

WHERE HS.EMPLID = $GetEmplid
     AND HS.EMPL_RCD = #EMPL_RCD

end-SELECT

begin-select
HREL.REL_DESCR_CAN
     let $Rel_Descr = &HREL.REL_DESCR_CAN
FROM PS_HS_EMPL_REL_CAN HREL
WHERE EMPLID = $Getemplid
 AND  EMPL_RCD = #EMPL_RCD
end-select

begin-select
HREL.SUBCON_DESCR_CAN
     let $Sub_Descr = &HREL.SUBCON_DESCR_CAN
FROM PS_HS_EMPL_SUB_CAN HREL
WHERE EMPLID = $Getemplid
 AND  EMPL_RCD = #EMPL_RCD
end-select

!
!-----------------------------------------------------------------------
! PRINT Report
!-----------------------------------------------------------------------
print 'WORKER IDENTIFICATION'                      (+1, 3)
print $Empl_Name                                   (+2, 3,38)
print 'Employee ID:'                               ( 0,42,17)
print $GetEmplId                                   ( 0,60,30)
print 'SIN:           '                            ( 0,91,15)
print $SIN                                         ( 0,107)
print $Empl_Street                                 (+1, 3,38)
print 'Occupation: '                               ( 0,42,17)
print $Occupation                                  ( 0,60,30)
print 'Birth Date:'                                ( 0,91,15)
print $Birthdate                                   ( 0,107)
print $Empl_City_State                             (+1, 3,38)
print 'Employee Class:'                            ( 0,42,17)
print $Empl_Class_Name                             ( 0,60,30)
print 'Sex:        '                               ( 0,91,15)
print $Sex                                         ( 0,107)
print $Empl_Zip_Cntry                              (+1, 3,38)
print 'Employee Status:'                           ( 0,42,17)
print $Full_Part_Time                              ( 0,60,30)
print 'Marital Status:'                            ( 0,91,15)
print $Mar_Status                                  ( 0,107)
print 'Hire Date:     '                            ( +1,42,17)
print $Hire_dt                                     ( 0,60,30)
print 'Health Care:'                               ( 0,91,15)
print $HealthCare_Nbr                              ( 0,107)
print $Health_Care_State                           ( 0,+1)
print 'Home Phone:    '                            (+1, 3,12)
print $Home_Phone                                  ( 0,16,25)
print 'Job Start Date:'                            ( 0,42,11)
print $Job_Entry_Dt                                ( 0,60,30)
print 'Preferred Lang:'                            ( 0,91,15)
print $LANG_CD                                     ( 0,107)
!print 'Miner''s Cert:'                             (+1,42,17)
!print $License                                     ( 0,60)

print 'EMPLOYER IDENTIFICATION '                   (+2, 3)
print 'Worker''s Location:'                        (+1, 3,90)
print 'Reporting Locn: '                           ( 0,94)
print #Locn                                        ( 0,+2)  EDIT '999'
print $Co_Name                                     (+1, 3,38)
print 'Firm Number:'                               ( 0,42,19)
print #WCB_Firm                                    ( 0,62)  EDIT '999999'
print $Location                                    ( 0,94)
print $Co_Street                                   (+1, 3,38)
print 'Rate Number:'                               ( 0,42,19)
print $WCB_Rate                                    ( 0,62,31)
print $Wrk_Street                                  ( 0,94)
print $Co_City_State                               (+1, 3,38)
print 'Contact Name:'                              ( 0,42,19)
print $Contact_Name                                ( 0,62,31)
print $Wrk_City_State                              ( 0,94)
print $Co_Zip_Cntry                                (+1, 3,38)
print 'Phone Number:'                              ( 0,42,19)
print $WorkPhone                                   ( 0,62,31)
print $Wrk_Zip_Cntry                               ( 0,94)
print 'Trade Union?      '                         (+1,42,19)
print $Union                                       ( 0,62)
print 'Business Activity:'                         (+1,42,19)
print $Activity                                    ( 0,62)

print 'Is Employee Full-time? '                    (+1,3,41)
print $full_Time                                   (0,45)

print 'Is Employee Permanent? '                    (+1,3,41)
print $Permanent                                   (0,45)

print 'Is Employee Seasonal? '                     (+1,3,41)
print $Seasonal                                    (0,45)

print 'Is Employee Casual? '                       (+1,3,41)
print $Casual                                      (0,45)

print 'Is Employee a Volunteer? '                  (+1,3,41)
print $Volunteer                                   (0,45)

print 'Is Employee a Student? '                    (+1,3,41)
print $Student                                     (0,45)

print 'Is Employee a subcontractor? '              (+1,3,41)
print $Subcon                                      (0,45)
print $Sub_Descr                                   (+1,5) Wrap 105 5

print 'Is Employee a Partner of the Employer? '    (+1,3,41)
print $Partner                                     (0,45)

print 'Is Employee a Principal of the Firm? '    (+1,3,41)
print $Principal                                     (0,45)

print 'Is Employee a Relative of the Employer? '    (+1,3,41)
print $Relative                                     (0,45)
print $Rel_descr                                    (+1,5)  Wrap 105 5

print 'TEMPORARY DISABILITY'                       (+2, 3)
print 'Following the day that the injury/awareness of disease occured, will the'    (+2, 3)
print 'injured worker be absent because of the injury/disease?'                     (+1, 3,111)
print $Absent_After                                ( 0,115)
print 'Will the injured worker as a result of the injury/disease assume other duties'       (+2, 3)
print 'because the injury/disease prevents him/her from performing his/her regular duties?' (+1, 3,111)
print $Other_Duties                                ( 0,115)
print 'Will the injured worker as a result of the injury/disease earn less than'          (+2, 3)
print 'his/her regular wages because of the injury/disease?'                              (+1, 3,111)
print $Earn_Less_Pay                               ( 0,115)

print 'DETAILS OF INCIDENT'                        (+2, 3)
print 'Date and Time:'                             (+2, 3,18)
print $Incident_Dt                                 ( 0,22)
print $Incident_Time                               ( 0,+1)
print 'Employer''s Premises?'                      ( 0,91,23)
print $Employer_Premises                           ( 0,115)
print 'Location:'                                  (+1, 3,18)
print $Location_Name                               ( 0,22)
print $Incdnt_Street                               ( 0,+1)
print $Incdnt_City_State                           ( 0,+1)
print $Incdnt_Zip_Cntry                            ( 0,+1)
print $Exact_Location                              (+1,22)  WRAP 95 5
print 'What happened:'                             (+1, 3)
print $Incident_Descr                              ( 0,22)  WRAP 95 5

!-----------------------------------------------------------------------
! SELECT Incident Cause Information
!-----------------------------------------------------------------------
print 'Cause of Incident:'                         (+1, 3,18)
begin-SELECT
IC.INCIDENT_CAUSE

    print &IC.Incident_Cause                       (+0,22)
    print ' '                                      (+1,1)

FROM PS_INCIDENT_CAUSE  IC

WHERE IC.INCIDENT_NBR = $Incident_Nbr
end-SELECT

!-----------------------------------------------------------------------
! SELECT Vehicle/Machinery Information
!-----------------------------------------------------------------------
print 'Vehicles/Machinery Involved:'               (+1, 3)
begin-SELECT DISTINCT
CP.DESCR
CP.VEH_EQUIP_MAKE
CP.VEH_EQUIP_MODEL
CP.VEH_EQUIP_YEAR
   print &CP.Descr                                 (+1,22,32)
   print &CP.Veh_Equip_Year                        ( 0,55,6)
   print &CP.Veh_Equip_Make                        ( 0,62,10)
   print &CP.Veh_Equip_Model                       ( 0,73)

FROM PS_COMP_PROP_TBL CP,
     PS_INCDNT_VEH_EMPL IVE

WHERE IVE.INCIDENT_NBR = $Incident_Nbr
   AND CP.PROPERTY_ID = IVE.PROPERTY_ID
   AND CP.EFF_STATUS = 'A'
   AND CP.EFFDT = (SELECT MAX(CP1.EFFDT) FROM PS_COMP_PROP_TBL CP1
          WHERE CP1.PROPERTY_ID = CP.PROPERTY_ID
          AND CP1.EFF_STATUS = 'A'
          AND CP1.EFFDT <= $IncidentDt)

end-SELECT

!-----------------------------------------------------------------------
! SELECT People Involved with Vehicle/Machinery Information
!-----------------------------------------------------------------------
print 'People Involved with Vehicles/Machinery:' (+1, 5)

begin-SELECT DISTINCT
IVE2.EMPLID
IVE2.NON_EMPLOYEE_ID
IVE2.EMPLOYEE_ROLE
   if &IVE2.Emplid = ' '
      do Get-NonEmpl-Name(&IVE2.Non_Employee_ID,$Name)
      let $Status = 'Non-Employee'
   else
      do Get-Empl-Name(&IVE2.Emplid,$Name)
      let $Status = 'Employee'
   end-if
   do Translate-Field('EMPLOYEE_ROLE',&IVE2.Employee_Role,$Employee_Role)
   print $Name                                    (+1,22,32)
   print $Employee_Role                           ( 0,55,27)
   print $Status                                  ( 0,83)

FROM PS_INCDNT_VEH_EMPL IVE2

WHERE IVE2.INCIDENT_NBR = $Incident_Nbr

end-SELECT


!-----------------------------------------------------------------------
print 'DETAILS OF INJURY/DISEASE'                  (+2, 3)
!-----------------------------------------------------------------------
print 'Reported Dt/Tm:'                            (+2, 3,17)
print $Dt_Reported                                 ( 0,21)
print $Tm_Reported                                 ( 0,+1)
print 'Last Worked date:'                          ( 0,42,19)
print $Last_Worked_Dt                              ( 0,62,16)
print 'Returned to Work:'                          ( 0,85,19)
print $Return_Dt                                   ( 0,105)
print $Return_Tm                                   ( 0,+1)
print 'To Whom:'                                   (+1, 3)
print $Reported_to                                 ( 0,21,17)
print 'Last Worked Tm'                             ( 0,42,19)
print $Last_Worked_Tm                              ( 0,62)

print 'If injury/disease was not reported immediately, provide reason for delay.'  (+2,3)
print $Delay_Reporting                             (+1, 6) WRAP 105 5

print 'What happened to cause the injury/disease?' (+2, 3)
print $Injury_Descr                                (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------
! SELECT Source of Injury
!-----------------------------------------------------------------------
print 'Source of Injury:'                          (+2, 3)

begin-SELECT
II2.INJURY_SOURCE_CD
Z2.DESCR100
      print &II2.INJURY_SOURCE_CD                  ( 0,30,6)
      print &Z2.Descr100                           ( 0,37)
      print ' '                                    ( +1,1)

FROM PS_INJURY_ILL_SOI II2,
     PS_INJURY_SRCE_TBL Z2

WHERE II2.EMPLID = $GetEmplid
  AND II2.EMPL_RCD = #EMPL_RCD
  AND II2.INCIDENT_NBR = $Incident_Nbr
  AND Z2.SETID = $REG_REGION
  AND Z2.INJURY_SOURCE_CD = II2.INJURY_SOURCE_CD
  AND Z2.EFFDT = (SELECT MAX(Z21.EFFDT) FROM PS_INJURY_SRCE_TBL Z21
                  WHERE Z21.INJURY_SOURCE_CD = Z2.INJURY_SOURCE_CD
                  AND Z21.EFFDT <= $incidentdt)

end-SELECT
!-----------------------------------------------------------------------
! SELECT Nature of Injury / Body Parts
!-----------------------------------------------------------------------
begin-SELECT
INB.INJURY_NATURE_CD
ZN.DESCR100
INB.BODY_PART_CD
BP.DESCR100

      print &INB.INJURY_NATURE_CD                  ( 0,30,6)
      print &ZN.Descr100                           ( 0,37)
      print &BP.Descr100                           (+1,37)
      print ' '                                    (+1,1)


FROM PS_INJ_ILL_BPI_CAN INB,
     PS_INJURY_NATR_TBL ZN,
     PS_BODY_PART_TBL BP

WHERE INB.EMPLID        = $GetEmplid
  AND INB.EMPL_RCD     = #EMPL_RCD
  AND INB.INCIDENT_NBR  = $Incident_Nbr
  AND ZN.SETID = $REG_REGION
  AND ZN.INJURY_NATURE_CD = INB.INJURY_NATURE_CD
  AND ZN.EFFDT = (SELECT MAX(Z21.EFFDT) FROM PS_INJURY_NATR_TBL Z21
                  WHERE Z21.INJURY_NATURE_CD = ZN.INJURY_NATURE_CD
                  AND Z21.EFFDT <= $incidentdt)
  AND BP.SETID = $REG_REGION
  AND BP.BODY_PART_CD = INB.BODY_PART_CD
  AND BP.EFFDT = (SELECT MAX(Z21.EFFDT) FROM PS_BODY_PART_TBL Z21
                  WHERE Z21.BODY_PART_CD = BP.BODY_PART_CD
                  AND Z21.EFFDT <= $incidentdt)
end-SELECT

!-----------------------------------------------------------------------

print 'Describe the worker''s activites at the time of the injury/disease.' (+2,3)
print $Activities                                  (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------
! SELECT Injury Witness Information
!-----------------------------------------------------------------------
print 'Is there anyone else who may have witnessed or who may know about the injury/onset of disease?'  (+2,3)
begin-SELECT
PD2.EMPLID
PD2.NAME

   let $Name  = &PD2.Name
   do Rotate-Name

   do Get-Address-Data (&PD2.EMPLID, &ID.INCIDENT_DT, $AD_Address1,
                        $AD_Address2,$AD_City,$AD_State,$AD_Postal,
                        $AD_Country)
   let $Address = rtrim($AD_Address1,' ') || ' ' || rtrim($AD_Address2,' ') || '  ' || rtrim($AD_City,' ') || ', ' || $AD_State || ' ' || $AD_Postal
   print $Name                                     (+1, 6,26)
   print $Address                                  ( 0,33,57)

   do Get-Phone-Data (&PD2.EMPLID, $Pers_Phone)
   print $Pers_Phone                                ( 0,91)


FROM PS_PERSON_NAME   PD2,
     PS_INJ_PEOPLE_CAN IW

WHERE IW.INCIDENT_NBR = $Incident_Nbr
   AND PD2.EMPLID = IW.IP_EMPLID_CAN
   AND IW.INJURY_ROLE_CAN = 'IW'

end-SELECT

begin-SELECT
NPD2.NAME
NPD2.ADDRESS1
NPD2.ADDRESS2
NPD2.CITY
NPD2.STATE
NPD2.POSTAL
NPD2.NON_EMPLOYEE_ID

   let $Name  = &NPD2.Name
   do Rotate-Name

   let $Address = rtrim(&NPD2.Address1,' ') || ' ' || rtrim(&NPD2.Address2,' ') || '  ' || rtrim(&NPD2.City,' ') || ', ' || &NPD2.State || ' ' || &NPD2.POSTAL
   print $Name                                     (+1, 6,26)
   print $Address                                  ( 0,33,57)
   do Get-NE-Phone(&NPD2.NON_EMPLOYEE_ID,$NE_PHONE)
    print $NE_Phone                                ( 0,91)


FROM PS_NE_PERSONAL_DTA   NPD2,
     PS_INJ_PEOPLE_CAN IW

WHERE IW.INCIDENT_NBR = $Incident_Nbr
   AND NPD2.NON_EMPLOYEE_ID = IW.IP_NON_EMPLID_CAN
   AND IW.INJURY_ROLE_CAN = 'IW'

end-SELECT

!-----------------------------------------------------------------------
! SELECT Incident Witness Information
!-----------------------------------------------------------------------

begin-SELECT
PD2B.EMPLID
PD2B.NAME

   let $Name  = &PD2B.Name
   do Rotate-Name

   do Get-Address-Data (&PD2B.EMPLID, &ID.INCIDENT_DT, $AD_Address1,
                        $AD_Address2,$AD_City,$AD_State,$AD_Postal,
                        $AD_Country)
   let $Address = rtrim($AD_Address1,' ') || ' ' || rtrim($AD_Address2,' ') || '  ' || rtrim($AD_City,' ') || ', ' || $AD_State || ' ' || $AD_Postal
   print $Name                                     (+1, 6,26)
   print $Address                                  ( 0,33,57)

   do Get-Phone-Data (&PD2B.EMPLID, $Pers_Phone)
   print $Pers_Phone                                ( 0,91)


FROM PS_PERSON_NAME   PD2B,
     PS_INCIDENT_PEOPLE IW2

WHERE IW2.INCIDENT_NBR = $Incident_Nbr
   AND IW2.INCIDENT_ROLE = 'IW'
   AND IW2.EMPLID = PD2B.EMPLID


end-SELECT

begin-SELECT
NPD2B.NAME
NPD2B.ADDRESS1
NPD2B.ADDRESS2
NPD2B.CITY
NPD2B.STATE
NPD2B.POSTAL
NPD2B.NON_EMPLOYEE_ID


   let $Name  = &NPD2B.Name
   do Rotate-Name
   let $Address = rtrim(&NPD2B.Address1,' ') || ' ' || rtrim(&NPD2B.Address2,' ') || '  ' || rtrim(&NPD2B.City,' ') || ', ' || &NPD2B.State || ' ' || &NPD2B.POSTAL
   print $Name                                     (+1, 6,26)
   print $Address                                  ( 0,33,57)
   do Get-NE-Phone(&NPD2B.NON_EMPLOYEE_ID,$NE_PHONE)
   print $NE_Phone                                ( 0,91)


FROM PS_NE_PERSONAL_DTA   NPD2B,
     PS_INCIDENT_PEOPLE IW2

WHERE IW2.INCIDENT_NBR = $Incident_Nbr
   AND IW2.INCIDENT_ROLE = 'IW'
   AND IW2.NON_EMPLOYEE_ID = NPD2B.NON_EMPLOYEE_ID


end-SELECT
!-----------------------------------------------------------------------
! SELECT First Aid Info
!-----------------------------------------------------------------------

   do  Get-FirstAid-Info ($GetEmplid, $Incident_nbr,)

 !-----------------------------------------------------------------------
! SELECT Physician Info
!-----------------------------------------------------------------------

   do  Get-Physician-Info ($GetEmplid, $Incident_Nbr, $incidentdt)



!-----------------------------------------------------------------------
print 'EARNINGS INFORMATION'                       (+2, 3)
!-----------------------------------------------------------------------
  let #EARNINGS3 = 0
  let $DateRange3 = ' '
  let #Earnings12 = 0
  let $DateRange12 = ' '
begin-select
LTE.SEQUENCE_NBR
LTE.LTE_AMOUNT_CAN
LTE.PERIOD_START_DT &LTE.PERIOD_ST_DT
LTE.PERIOD_END_DATE &LTE.PERIOD_END_DT
   do Format-DateTime(&LTE.PERIOD_ST_DT,$Start_Dt,{DEFDATE},'','')
   do Format-DateTime(&LTE.PERIOD_END_DT,$END_Dt,{DEFDATE},'','')


   if &LTE.SEQUENCE_NBR = 1
      let #EARNINGS3 = &LTE.LTE_AMOUNT_CAN
      let $DateRange3 = $Start_DT || ' to ' || $End_Dt
   else
      let #EARNINGS12 = &LTE.LTE_AMOUNT_CAN
      let $DateRange12 = $Start_DT || ' to ' || $End_Dt
   end-if


FROM PS_LONG_EARNS_CAN LTE
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND LTE.EMPLID = $GetEmplId
end-select

print 'Hourly Rate of Pay:'                        (+2, 3,19)
print #Hourly_Rt                                   ( 0,23) EDIT '$$$,$$9.999999'

!calculate and print Total Weekly Pay Hours
do Det-Annual-Factor($std_hrs_freq,$Job_Effdt,$dummy1,$dummy2,#Annual_Factor,$dummy3)
let #Total_Std_Hours = (#Std_Hours * #Annual_Factor) / 52
print 'Total Weekly Pay Hours:'                    ( 0,60)
print #Total_Std_Hours                             ( 0,+3) EDIT '9999.99'

print 'Average Days Earnings:'                     (+1, 3,19)
print #AveWage                                     ( 0,23) EDIT '$$,$$9.99'


print '3 months Gross:'                            (+1, 3,19)
print #Earnings3                                   ( 0,23)  Edit '$$$,$$$,$$9.99'
print $DateRange3                                  ( 0,+3)

print '12 months Gross:'                           (+1, 3,19)
print #Earnings12                                  ( 0,23)  Edit '$$$,$$$,$$9.99'
print $DateRange12                                 ( 0,+3)

print 'Are Benefit Plan contributions continuing?' ( +1,3)
print $Benefits_Cont                               ( 0,+2)

print 'Payments made during period of disability?' ( +1,3)
print $Payments_During                             ( 0, +2)


!-----------------------------------------------------------------------
! SELECT Wage Inclusions
!-----------------------------------------------------------------------
   print 'Wage Inclusions:'                         (+2,3)
Begin-select
WI.WAGE_INCLS_CD
WI.TIME_PERIOD_CD
WI.INCLS_AMOUNT
WI.DESCRLONG


   do Translate-Field('WAGE_INCLS_CD',&WI.WAGE_INCLS_CD,$Wage_incl)
   do Translate-Field('TIME_PERIOD_CD',&WI.TIME_PERIOD_CD,$TIME_PER)
   print $Wage_Incl                                (+1,5,24)
   print $Time_per                                 (0, 30,29)
   print &WI.INCLS_AMOUNT                          (0, 60) EDIT '$$$,$$$.99'
   print &WI.DESCRLONG                             (+1,8) WRAP 105 5


FROM PS_INJ_ILL_WI_CAN WI
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select


!-----------------------------------------------------------------------
! SELECT Wage Additions
!-----------------------------------------------------------------------
   print 'Wage Additions:'                         (+2,3)
Begin-select
WA.WAGE_ADDN_CD
WA.TIME_PERIOD_CD
WA.ADDN_AMOUNT
WA.DESCRLONG


   do Translate-Field('WAGE_ADDN_CD',&WA.WAGE_ADDN_CD,$Wage_incl)
   do Translate-Field('TIME_PERIOD_CD',&WA.TIME_PERIOD_CD,$TIME_PER)
   print $Wage_Incl                                (+1,5,24)
   print $Time_per                                 (0, 30,29)
   print &WA.ADDN_AMOUNT                          (0, 60) EDIT '$$$,$$$.99'
   print &WA.DESCRLONG                             (+1,8) WRAP 105 5


FROM PS_INJ_ILL_WA_CAN WA
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select

!-----------------------------------------------------------------------
! SELECT Work Schedule
!-----------------------------------------------------------------------

 Print 'Work Schedule:'            (+2,3)
 print 'Day'                       (+1,5,4)
 print 'Hours'                     ( 0,10)

begin-SELECT
SSSS.ABSW_DAY_NO
SSSS.DURATION_HOURS

  Let $daynum={ps-substr}(to_char(&SSSS.ABSW_DAY_NO),1,1)
  Let #durhrs=&SSSS.DURATION_HOURS

 print $daynum                      (+1,5,4)
 
!******************** Begin Resolution 618544 ***************
 
 !print #durhrs                      ( 0,10)  EDIT '999.99'
 print #durhrs                      ( 0,10)  EDIT '9999.99'
 
 !******************** End Resolution 618544 *****************

FROM PS_ABSW_SCHD_VW SSSS
WHERE SSSS.EMPLID=$GetEmplid
AND   SSSS.EMPL_RCD=#EMPL_RCD
AND   SSSS.BEGIN_DT = ( SELECT MAX(SS2.BEGIN_DT) FROM PS_ABSW_SCHD_VW SS2
                        WHERE SS2.EMPLID = SSSS.EMPLID
                          AND SS2.EMPL_RCD = SSSS.EMPL_RCD
                          AND SS2.BEGIN_DT <= $INCIDENTDT)
end-SELECT



!-----------------------------------------------------------------------
print 'CLAIM INFORMATION'                          (+2, 3)
!-----------------------------------------------------------------------
print 'To your knowledge has the worker had a previous injury/disease?'              (+2, 3)
let $Prev_Inj = 'No'
begin-select
PHC.DESCRLONG
    let $Prev_Inj = &PHC.DESCRLONG
FROM PS_INJ_ILL_PHC_CAN PHC
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select

Print $Prev_inj                                    (+1,6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Were the worker''s actions at the time of injury for the purpose of your business?'   (+2, 3)
!-----------------------------------------------------------------------------
   let $Activities_Descr = 'Yes'
   do Get-Non-Bus($GETEmplid,$Incident_Nbr,$Activities_Descr)
   print $Activities_Descr                            (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Were they part of regular work?'            (+2, 3)
!-----------------------------------------------------------------------------
   let $Regular_Descr = 'Yes'
   do Get-Non-Routine($GETEmplid,$Incident_Nbr,$Regular_Descr)
   print $Regular_Descr                               (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Are you satisfied the injury occurred as stated?' (+2, 3)
!-----------------------------------------------------------------------------
print $Satisfied_Descr                             (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Do you know of any previous pain or disability in the area of the worker''s present injury?' (+2, 3)
!-----------------------------------------------------------------------------
print $Prev_Pain_Descr                             (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Do you know of any defect or diability the worker had prior to the injury?' (+2, 3)
!-----------------------------------------------------------------------------
let $Defect_Descr = 'No'
begin-select
PDS.DESCRLONG
    let $Defect_Descr = &PDS.DESCRLONG
FROM PS_INJ_ILL_PDS_CAN PDS
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select

print $Defect_Descr                                (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Do you have any reason to doubt that the injury/disease is work-related?'   (+2, 3)
!-----------------------------------------------------------------------------
print $Doubt_Descr                                 (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Do you have any information that the worker could have returned to work earlier?'   (+2, 3)
!-----------------------------------------------------------------------------
print $Rtrn_Earlier_Descr                          (+1, 6) WRAP 105 5

!-----------------------------------------------------------------------------
print 'Do you object to the acceptance of this claim?' (+2, 3)
!-----------------------------------------------------------------------------

let $Object_Accept = 'No'
begin-select
IJO.STATEMENT
    let $Object_Accept = &IJO.Statement
FROM PS_INJ_ILL_OBJSTMT IJO
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select

print $Object_Accept                               (+1, 6) WRAP 105 5

end-procedure report

!***********************************************************************
! BEGIN-PROCEDURE Get-FirstAid_Info
!***********************************************************************
begin-procedure Get-FirstAid-Info ($GetEmplid, $Incident_Nbr)
let #Cnt_FA = 0
  print 'HEALTH CARE'                                (+2, 3)
  print 'Did worker receive first aid?'              (+2, 3)

Begin-Select
IIA.TREATMENT_TYPE
IIA.TREATMENT_DT
{TIMEOUT-PREFIX}IIA.TREATMENT_TM{TIMEOUT-SUFFIX} &IIA.TREATMENT_TM
IIA.AID_EMPLID
IIA.AID_NON_EMPLID

   let $First_Aid          = cond(&IIA.TREATMENT_TYPE='FA','Yes','No')
   do Format-DateTime(&IIA.TREATMENT_Dt,$FirstAid_Dt,{DEFDATE},'','')
   if length(&IIA.TREATMENT_TM) > 15
      move '1' to $Year4
      do Format-DateTime(&IIA.TREATMENT_TM,$FirstAid_Tm,{DEFMDY},'time','')
      let $FirstAid_Tm = {ps-substr}($FirstAid_Tm,12,20)
      do Format-Times($FirstAid_Tm, $FirstAid_Tm)
   else
      do Format-Times(&IIA.TREATMENT_TM, $FirstAid_Tm)
   end-if

   if &IIA.Aid_Emplid = ' '
      do Get-NonEmpl-Name(&IIA.Aid_Non_EmplID,$FirstAid_Name)
   else
      do Get-Empl-Name(&IIA.Aid_Emplid,$FirstAid_Name)
   end-if

   do  Get-WCB-Descr ($GetEmplid, $Incident_Nbr, 'N', $WCB_Descr)
   let $FirstAid_Not_Admin = $WCB_Descr


  print $First_Aid                                   ( 0,+1)
  print 'Date/Time:'                                 ( 0,42,19)
  print $FirstAid_Dt                                 ( 0,62)
  print $FirstAid_Tm                                 ( 0,+1)
  print 'By whom:'                                   ( 0,91,7)
  print $FirstAid_Name                               ( 0,99)

  let #Cnt_FA = 1

FROM PS_INJURY_ILL_AID IIA
WHERE IIA.INCIDENT_NBR = $Incident_Nbr
  AND IIA.EMPLID = $GetEmplId

end-SELECT

  if #Cnt_FA = 0
     print 'No'                                         ( 0,+1)
     print 'If not, why?'                               (+1, 3,12)
     print $FirstAid_Not_Admin                          ( 0,16) WRAP 95 5
 end-if
end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Physician_Info
!***********************************************************************
begin-procedure Get-Physician-Info ($GetEmplid, $Incident_Nbr,$incidentdt)
!-----------------------------------------------------------------------
! Initialize variables and get the required Physician info from the DB
!-----------------------------------------------------------------------

let $IHC_Descr = ' '
let #HC_CNT = 0
  print 'Did worker receive health care?'            (+2,3)
begin-SELECT

ILA.PHYSICIAN_NAME
ILA.MEDICAL_FAC_CD
ILA.ADDRESS1
ILA.ADDRESS2
ILA.CITY
ILA.STATE
ILA.POSTAL
ILA.COUNTRY
ILA.CARE_TYPE

   let $Physician_Name = &ILA.PHYSICIAN_NAME
   let $Med_Fac = ' '
   let $Med_FAC_CD = &ILA.Medical_Fac_CD
   do Get-Med-Fac-Name($MED_FAC_CD,$INCIDENTDT, $MED_FAC)

   let $Street         = rtrim(&ILA.Address1,' ') || ' ' || rtrim(&ILA.Address2,' ')
   let $City_State     = rtrim(&ILA.City,' ') || ', ' || &ILA.State
   let $Zip_Cntry      = &ILA.POSTAL || '  ' || &ILA.Country


   do Translate-Field('CARE_TYPE',&ILA.Care_Type,$Health_Care)

  print 'Care Type: '                                (+1,5,10)
  print $Health_Care                                 ( 0,16)
  print $Physician_NAME                              (+1,10)
  print $Med_fac                                     (+1,10)
  print $Street                                      (+1,10)
  print $City_State                                  (+1,10)
  print $Zip_Cntry                                   (+1,10)
  print ' '                                          (+1,1)

  let #HC_CNT = 1

FROM PS_INJURY_ILL_ADDR ILA
WHERE ILA.INCIDENT_NBR = $Incident_Nbr
  AND ILA.EMPLID = $GetEmplId
ORDER BY ILA.CARE_TYPE
end-SELECT
  if #HC_CNT = 0
     print 'No'                                         ( 0,+1)
   end-if
end-procedure

!---------------------------------------------------------------
Begin-procedure Get-Med-Fac-Name($MED_FAC_CD,$INCIDENTDT,:$MED_FAC)
!---------------------------------------------------------------
begin-select
MF.MEDICAL_FAC_NAME
   let $Med_Fac = &MF.MEDICAL_FAC_NAME

FROM PS_MEDICAL_FAC_TBL MF
WHERE MF.MEDICAL_FAC_CD = $Med_FAC_CD
  AND MF.EFFDT = (SELECT MAX(MF1.EFFDT) FROM PS_MEDICAL_FAC_TBL MF1
                  WHERE MF1.MEDICAL_FAC_CD = MF.MEDICAL_FAC_CD
                    AND MF1.EFFDT <= $incidentdt)
end-select
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Check-Entry
!***********************************************************************
begin-procedure Check-Entry($Emplid,#Emplrcd,$Incident_Nbr,:$OK)

begin-SELECT
ID.INCIDENT_DT &ID.INCIDENT_DT

   let $Incident_Dt = &ID.Incident_Dt

FROM PS_INJURY_ILL II,
     PS_INCIDENT_DATA ID

WHERE ID.INCIDENT_NBR = $Incident_Nbr
  AND II.INCIDENT_NBR = ID.INCIDENT_NBR
  AND II.EMPLID = $Emplid
  AND II.EMPL_RCD = #Emplrcd
end-SELECT

if $Incident_Dt = ''
   let $OK = 'N'
end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Empl-Name
!***********************************************************************
begin-procedure Get-Empl-Name($_Emplid,:$_Name)

   do Get-Employee-Name
   do Rotate-Name

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-NonEmpl-Name
!***********************************************************************
begin-procedure Get-NonEmpl-Name($ID,:$Name)

begin-SELECT

NPD.NAME
   let $Name = &NPD.Name
   do Rotate-Name

FROM PS_NE_PERSONAL_DTA NPD
WHERE NON_EMPLOYEE_ID = $ID
end-SELECT

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-NE-Phone
!***********************************************************************
begin-procedure Get-NE-PHONE($ID,:$Phone)

begin-SELECT loops=1
NPDP.PHONE
   let $Phone = &NPDP.Phone

FROM PS_NE_PERS_PHONE NPDP
WHERE NON_EMPLOYEE_ID = $ID

end-SELECT

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Non-Bus
!***********************************************************************
begin-procedure Get-Non-Bus($GetEmplid,$Incident_Nbr,:$Activities_Descr)
begin-select
NBD.DESCRLONG
    let $Activities_Descr = &NBD.DESCRLONG
FROM PS_INJ_ILL_NBD_CAN NBD
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId
end-select
end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Non-Routine
!***********************************************************************
begin-procedure Get-Non-Routine($GetEmplid,$Incident_Nbr,:$Regular_Descr)
begin-select
NRD.DESCRLONG
    let $Regular_Descr = &NRD.DESCRLONG
FROM PS_INJ_ILL_NRD_CAN NRD
WHERE INCIDENT_NBR = $INCIDENT_NBR
  AND EMPLID = $GetEmplId

end-select
end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Translate-Field
!***********************************************************************
begin-procedure Translate-Field($Field,$Value,:$ValueName)

   let $_FieldName  = $Field
   let $_FieldValue = $Value
   do Read-Translate-Table
   if $_FieldName = 'MAR_STATUS'
      let $ValueName = $_XlatShortName
   else
      let $ValueName = $_XlatLongName
   end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-WCB-Descr
!***********************************************************************
begin-procedure Get-WCB-Descr($GetEmplid, $Incident_Nbr, $Desc_Type, :$WCB_Descr)
!-----------------------------------------------------------------------
! Initialize $WCB_Descr and get the required description from the DB
!-----------------------------------------------------------------------

let $WCB_Descr = ' '

begin-SELECT

ILD.INJURY_ILL_DESCR

   let $WCB_Descr = &ILD.Injury_Ill_Descr

FROM PS_INJURY_ILL_DESC ILD
WHERE ILD.INCIDENT_NBR = $Incident_Nbr
  AND ILD.EMPLID = $GetEmplId
  AND ILD.DESC_TYPE = $Desc_Type

end-SELECT

end-procedure


begin-procedure Format-Times ($timeIn, :$timeOut)
  if isnull($timeIn)
     let $timeOut = ''
  else
    extract $time-hour   from $timeIn 0 2
    extract $time-min    from $timeIn 3 2
    let #time-hour     = $time-hour
    if #time-hour >= 12
       move 'PM' to $am-pm
    else
       move 'AM' to $am-pm
    end-if
    if #time-hour > 12
        subtract 12 from #time-hour
        let $timeOut   = #time-hour
    else
       let $timeOut   = $time-hour
    end-if
    let $timeOut   = ltrim($timeOut, '0')
    if #time-hour < 10
       let $timeOut   = {ps-substr}($timeOut,1,1)
    else
       let $timeOut   = {ps-substr}($timeOut,1,2)
    end-if
    if #time-hour < 10
       let $timeOut = '0' || $timeOut
    end-if
    concat ':'        with $timeOut
    concat $time-min with $timeOut
    concat ' '        with $timeOut
    concat $am-pm     with $timeOut
  end-if
end-procedure

!************************************************************************!
begin-procedure Get-Address-Data ($AddrEmplid,$AddrEffdt,:$AD_Address1,
                                  :$AD_Address2,:$AD_City,:$AD_State,:$AD_Postal,
                                  :$AD_Country)
!************************************************************************!
Begin-SELECT

AD.ADDRESS1
AD.ADDRESS2
AD.CITY
AD.STATE
AD.POSTAL
AD.COUNTRY

FROM PS_ADDRESSES AD
WHERE AD.EMPLID = $AddrEmplid
AND   AD.ADDRESS_TYPE = 'HOME'
AND   AD.EFFDT = (SELECT MAX(AD1.EFFDT)
                  FROM PS_ADDRESSES AD1
                  WHERE AD1.EMPLID = AD.EMPLID
                  AND   AD1.ADDRESS_TYPE = 'HOME'
                  AND   AD1.EFFDT <= $AddrEffdt)

End-SELECT

let $AD_Address1 = &AD.ADDRESS1
let $AD_Address2 = &AD.ADDRESS2
let $AD_City = &AD.CITY
let $AD_State = &AD.STATE
let $AD_Postal = &AD.POSTAL
let $AD_Country = &AD.COUNTRY

End-Procedure

!************************************************************************!
begin-procedure Get-Phone-Data ($PersEmplid,:$Phone)
!************************************************************************!

  if rtrim( $PersEmplid,' ') = ''
    move '' to $Phone
    goto GetPhoneExit
  end-if

begin-SELECT
PP.PHONE
FROM  PS_PERSONAL_PHONE PP
WHERE PP.EMPLID = $PersEmplid
  AND PP.PHONE_TYPE = 'HOME'
end-SELECT

     let $Phone      = rtrim(&PP.Phone,' ')

 GetPhoneExit:

end-procedure

!------------------------------------------------------------------
#Include 'stdapi.sqc'    !Update Process Request API
#Include 'ohsrnctl.sqc'  !Get run control parameter values
#Include 'ohsget.sqc'  !Get values mask routines

#Include 'datemath.sqc'
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'getftdts.sqc'  !Get-As-Of-Date procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'frquency.sqc'  !Det-Annual-Factor procedure
#Include 'getprimj.sqc'  ! Routines for selecting EE's primary job
#Include 'getempcl.sqc'  !Get Employee Class Name


