!***********************************************************************
!  FPA305:  Calculation of Probationnary period end date               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:12:38:24                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment


BEGIN-REPORT

Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
Do Init-Report
Do Proc-Main
do Stdapi-Term

END-REPORT


#include 'setup01.sqc'

begin-heading 7

    #include 'stdhdg01.sqc'

    do Get_Field_Information($ReportID, 'EMPLID' ,           $EMPLID_LBL ,           #DW)
    do Get_Field_Information($ReportID, 'EMPL_RCD' ,         $EMPL_RCD_LBL ,         #DW)
    do Get_Field_Information($ReportID, 'GRADE' ,            $GRADE_LBL ,            #DW)
    do Get_Field_Information($ReportID, 'STEP' ,             $STEP_LBL ,             #DW)
    do Get_Field_Information($ReportID, 'EFFDT' ,            $EFFDT_LBL ,            #DW)
    do Get_Field_Information($ReportID, 'EFFSEQ' ,           $EFFSEQ_LBL ,           #DW)
    do Get_Field_Information($ReportID, 'GRADE_ENTRY_DT' ,   $GRADE_ENTRY_DT_LBL ,   #DW)
    do Get_Field_Information($ReportID, 'BODY_ENTRY_DT' ,    $BODY_ENTRY_DT_LBL ,    #DW)
    do Get_Field_Information($ReportID, 'PROB_END_DT' ,      $PROB_END_DT_LBL ,      #DW)

    Print $EMPLID_LBL                   (+4,1,9)
    Print $EMPL_RCD_LBL                 (,+3,14)
    Print $GRADE_LBL                    (,+3,5)
    Print $STEP_LBL                     (,+3,3)
    Print $EFFDT_LBL                    (,+3,10)
    Print $EFFSEQ_LBL                   (,+3,3)
    Print $GRADE_ENTRY_DT_LBL           (,+3,15)
    Print $BODY_ENTRY_DT_LBL            (,+3,15)
    Print $PROB_END_DT_LBL              (,+3,26)

end-heading



!***************************************************************
!
!
!       Init-Report
!
!
!***************************************************************
BEGIN-PROCEDURE  Init-Report

move 'Calculation of Probationnary period end date' to $ReportTitle
display $ReportTitle

do Stdapi-Init
do Security-Param       !SQR security
if $prcs_process_instance = ''

        INPUT $Emplid 'Emplid'
        let $Emplid = rtrim($Emplid,' ')

        INPUT $Empl_rcd 'Empl Rcd nbr'
        let $Empl_rcd = rtrim($Empl_rcd,' ')
else

        do FP-Select-Parameters
        do Select-Parameters

end-if

END-PROCEDURE Init-Report



!***************************************************************
!
!
!       Get-Values
!
!
!***************************************************************
BEGIN-PROCEDURE  Get-Values

        do Get-Emplid
        do Get-EmplRcd

END-PROCEDURE Get-Values



!***************************************************************
!
!
!       Proc-Main
!
!
!***************************************************************
BEGIN-PROCEDURE Proc-Main

!Select trainee
!--------------------------------------------------------------

!Dynamic 'Where' building
!------------------------

let $select-where =

        'D.FP_CLD_INST      = ''N''                !Instance not Terminated
        and D.FP_TRAINEE    = ''Y''                !Trainee
        and D.FP_TRNE_POSN  = ''E'''               !Probationary Period State in progress

if $Emplid  != ''
        let $select-where =   $select-where ||
       '  and   D.EMPLID  = ''' || $Emplid  || ''''
end-if

! select Empl Rcd nbr
if $Empl_rcd != ''
        let $select-where =   $select-where ||
        ' and   D.EMPL_RCD  = ' || $Empl_rcd
end-if

! Calendar or Thirtieth
!----------------------
do Get-Cal-Thirtieth($Cal-Thirtieth,$Term-dt)

let $sql-statement = 'FPA305.SQR,,Select,Proc-Main'
BEGIN-SELECT On-Error=SQL-Error

D.EMPLID             &Emplid
D.EMPL_RCD           &Empl_rcd
D.FP_SETID_RANK      &Setid
D.FP_RANK_CD         &Rank
D.FP_STEP_CD         &Step

{DATEOUT-PREFIX}D.EFFDT{DATEOUT-SUFFIX} &StepBeg_dt2
D.EFFSEQ             &Sequence

! Select Body and grade entry date
! Probationnary period end date is based on the grade entry date
{DATEOUT-PREFIX}D.FP_RK_ENT_DT{DATEOUT-SUFFIX} &StepBeg_dt
{DATEOUT-PREFIX}D.FP_CHG_COR_DT{DATEOUT-SUFFIX} &CorpsBeg_dt

        ! variables
        do Convert-To-DTU-Date(&StepBeg_dt,$StepBeg_dt)
        do Convert-To-DTU-Date(&StepBeg_dt2,$StepBeg_dt2)
        do Convert-To-DTU-Date(&CorpsBeg_dt,$CorpsBeg_dt)
        let $Emplid = rtrim(&Emplid,' ')
        let #Empl_rcd = &Empl_rcd
        let $rank = rtrim(&Rank,' ')
        let $step = rtrim(&Step,' ')

        ! Variable for the procedure Insert-Fpaeeupdrow
        let $Effdt_nat = &StepBeg_dt2

        #IFDEF DEBUGi
        display  '****************************************************************'
        display  'Proc-Main no agent :' noline
        display  &Emplid
        display  'Proc-Main Rank :' noline
        display  &Rank
        display  'Proc-Main Step :' noline
        display  &Step
        display  'Proc-Main debut Step :' noline
        display  &stepbeg_dt2
        display  'Proc-Main debut Rank :' noline
        display  &stepbeg_dt
        #ENDIF

        print $Emplid                       (+1,1,9)
        print #Empl_rcd                     (0,+3,14)
        print $rank                         (0,+3,5)
        print $step                         (0,+3,3)
        print $StepBeg_dt2                  (0,+3,10)
        print #Sequence                     (0,+3,3)
        Print $StepBeg_dt                   (0,+8,15)
        Print $CorpsBeg_dt                  (0,+3,15)

        !----------------------------------------------------------------------------------
        ! Check if grade entry date = body entry date
        !----------------------------------------------------------------------------------
        if $StepBeg_dt = $CorpsBeg_dt

            do Va-Init                   !Init variables
            do Get-Dur-Prom              !Select Prob period length
            do Search-First-Pos-Stat     !Search for the last civil service position link to
                                         !the previous step
            IF $Promo = 'N'
                 do Search-Pos-Stat      !Search for civil service position and career increment
            end-if
            !------------------------------------------------------
            ! Calculation of Probationnary period end date
            !------------------------------------------------------
            IF $Promo = 'N'
                display  'Calculation of Probationnary period end date'
                Let #Coeff=100
                IF #i = 0
                    do dtu-add-days ($Posit-End,1,$Calc-Beg-dt) !Position  start
                    let #Anc-Dy-Last = #Anc-Dy                  !Seniority previous position
                    let #Anc-Mn-Last = #Anc-Mn
                    let #Anc-Yr-Last = #Anc-Yr
                end-if
                do Calc-Prom
            end-if

            !---------------------------------------------------------------------------------------
            ! Check if grade entry date < Probationnary period end date else error
            !---------------------------------------------------------------------------------------
            if $TrainPD-End-dt < $StepBeg_dt2

                do Get_Field_Information($ReportID, 'ERROR1' ,  $ERROR1_LBL ,   #DW)
                do Get_Field_Information($ReportID, 'ERROR2' ,  $ERROR2_LBL ,   #DW)

                let $mes_erreur = $ERROR1_LBL || $Emplid || $ERROR2_LBL
                print $mes_erreur     (+1,1,95)
                display $mes_erreur

            else

                print $TrainPD-End-dt    (0,+14,10)

            end-if

        else    !error : grade entry date != body entry date

            do Get_Field_Information($ReportID, 'ERROR1' ,  $ERROR1_LBL ,   #DW)
            do Get_Field_Information($ReportID, 'ERROR3' ,  $ERROR3_LBL ,   #DW)

            let $mes_erreur = $ERROR1_LBL || $Emplid || $ERROR3_LBL
            print $mes_erreur     (+1,1,95)
            display $mes_erreur

        end-if

from  PS_FPAEECAREER  D
     ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

where [$select-where]
and D.EMPLID = SCRTY.EMPLID     !
and D.EMPL_RCD = SCRTY.EMPL_RCD !SQR security
[$SecurityClause]               !

order by D.EFFDT


END-SELECT

END-PROCEDURE  Proc-Main



!***************************************************************
!
!
!       Get-Dur-Prom
!       Select Prob period length
!       (in grade record)
!
!***************************************************************
BEGIN-PROCEDURE Get-Dur-Prom

display 'Get-Dur-Prom'

let $sql-statement = 'FPA305.SQR,,Select,Get-Dur-Prom'
BEGIN-SELECT On-Error=SQL-Error

A.FP_PRO_TRN_PD       &TrainPD-Mn         ! Prob period length (Month)

    let #DurTrainYr =  0
    let #DurTrainMn  =  &TrainPD-Mn
    let #DurTrainDy  =  0


    While #DurTrainDy >= 30
        let #DurTrainMn = #DurTrainMn + 1
        let #DurTrainDy = #DurTrainDy - 30
    End-While

    While #DurTrainMn >= 12
        let #DurTrainYr = #DurTrainYr + 1
        let #DurTrainMn = #DurTrainMn - 12
    End-While


    do Change-Char (#DurTrainYr, #DurTrainMn, #DurTrainDy, $Dur_Train)

    #IFDEF DEBUGi
    display   'Prob period length '
    display $Dur_Train
    #ENDIF

from PS_FPMRANK_TBL A

where A.FP_RANK_CD = &Rank
and   A.SETID      = &Setid
and   A.EFF_STATUS = 'A'
and   A.EFFDT  =
(select max(B.EFFDT) from PS_FPMRANK_TBL B
where  B.FP_RANK_CD = &Rank
and    B.SETID      = &Setid
and    B.EFFDT    <= {DATEIN-PREFIX}&stepbeg_dt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Dur-Prom



!***************************************************************
!
! Calc-Prom : Calculation of Probationnary period end date
!
!***************************************************************

BEGIN-PROCEDURE Calc-Prom

let $Promo ='Y'
#IFDEF DEBUGi
display 'Calc-Prom debut'
#ENDIF

Do Calc-Compl   !Calculate the remaining duration in the probation period to achieve the legal duration

#IFDEF DEBUGI
Display '$Calc-Beg-dt :' noline
Display $Calc-Beg-dt
#ENDIF

!Thirtieth or Calendar

if $Cal-Thirtieth = 'T'     !Thirtieth

        let #day-Number=30
        do Dtu-Parse-Date($Calc-Beg-dt,#Calc-Beg-An,#Calc-Beg-Mn,#Calc-Beg-Jr)

        let #Calc-Beg-An = #Calc-Beg-An + #Compl-An
        let #Calc-Beg-Mn = #Calc-Beg-Mn + #Compl-Mn
        let #Calc-Beg-Jr = #Calc-Beg-Jr + #Compl-Jr

        While #Calc-Beg-Jr > #Days-Number
                 let #Calc-Beg-Mn = #Calc-Beg-Mn + 1
                 let #Calc-Beg-Jr = #Calc-Beg-Jr - #Days-Number
        End-While

        While #Calc-Beg-Mn > 12
                 let #Calc-Beg-An = #Calc-Beg-An + 1
                 let #Calc-Beg-Mn = #Calc-Beg-Mn - 12
        End-While

        #IFDEF DEBUGI
        display '#Calc-Beg-An'
        display #Calc-Beg-An
        display '#Calc-Beg-Mn'
        display #Calc-Beg-Mn
        display '#Calc-Beg-Jr'
        display ##Calc-Beg-Jr
        #ENDIF

        do Dtu-format-Date (#Calc-Beg-An ,#Calc-Beg-Mn ,#Calc-Beg-Jr,$TrainPD-End-dt)

        If #Calc-Beg-Mn = 2 and (#Calc-Beg-Jr = 29 or #Calc-Beg-Jr = 30)
                 do dtu-month-end($TrainPD-End-dt,$TrainPD-End-dt)
        end-if

else                    !Calendar

        do Add-Date($Calc-Beg-dt,#Compl-An,#Compl-Mn,#Compl-Jr,$TrainPD-End-dt)

end-if


do dtu-subtract-days($TrainPD-End-dt,1,$TrainPD-End-dt)

#IFDEF DEBUGI
display 'Probationnary period end date'  noline
display $TrainPD-End-dt
#ENDIF

! if grade entry date < Probationnary period end date
if $TrainPD-End-dt < $StepBeg_dt2

    let $TrainPD-End-dt = ''

end-if

do Updt-Career !update Career

   do Insert-Fpaeeupdrow($Emplid,#Empl_rcd,$Effdt_nat,$AsOfToday)

END-PROCEDURE Calc-Prom



!***************************************************************
!
!
!   Updt-Career : Update PS_FPAEECAREER record
!
!
!***************************************************************
BEGIN-PROCEDURE  Updt-Career

do convert-from-DTU-Date($TrainPD-End-dt,$End-dt-nat)

let $sql-statement = 'FPA305.SQR,,Update,Updt-Career'

BEGIN-SQL On-Error=SQL-Error
update  PS_FPAEECAREER
set
        FP_RK_PD_END_DT={DATEIN-PREFIX}$End-dt-nat{DATEIN-SUFFIX},
        LAST_UPDATE_DATE={DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}

where EMPLID=&Emplid
and   EMPL_RCD=&Empl_rcd
and   EFFDT={DATEIN-PREFIX}&stepbeg_dt2{DATEIN-SUFFIX}

END-SQL

#IFDEF DEBUGI
display 'Update Career'
#ENDIF
END-PROCEDURE Updt-Career


#IFNDEF FPPARAM
    !first call of fpparam.sqc
    #Include 'fpparam.sqc'     ! Routines for  Parameters Tables    FPS
#ENDIF



!***************************************************************************
#Include 'fptestdt.sqc'     ! Routines for date and time formatting
#Include 'fptrain.sqc'        ! Routines for FPA300 et FPA305
#include 'curdttim.sqc'       ! Get-Current-DateTime procedure
#include 'stdapi.sqc'         ! Routines to update run status
#Include 'hrrnctl1.sqc'       ! Get run control parameter values
#Include 'hrgetval.sqc'       ! Get values mask routines
#Include 'fprnctl1.sqc'       ! Get run control parameter values (Fct publique)
#Include 'fpgetval.sqc'       ! Get values mask routines (Fct publique)
#Include 'number.sqc'         ! Routines to format numbers
#include 'fpjob.sqc'          ! Insert-Fpaeeupdrow procedure
#include 'fpsalary.sqc'       ! Routines for salary
#Include 'hrsecty.sqc'        ! Get SQR Security parameters
#include 'sqrtrans.sqc'       ! Translate SQR strings to given language
