!***********************************************************************
!  TAX860AZ:  Qtrly Wage List - ARIZONA - MMREF-1                      *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2008 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2008/01/25:13:58:39                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  739116                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup32.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, one or more'
    display 'files will have been created, as follows:'
    display ''
    display '  TAX860AZ  contains 512-character records in the format'
    display '            required for tape submission of wage data to'
    display '            the Arizona Department of Economic Security.'
    display ''
    display '     or '
    display '  TAX860AZ.nnn contains 512-character records in the format'
    display '            required for diskette reporting to the '
    display '            the Arizona Department of Economic Security'
    display '            where "nnn" represents a volume number.'
    display ''
    display 'Follow instructions from the department for preparing and'
    display 'submitting the tape or diskette.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  move 'TAX860AZ' to $ReportID

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization

 if $FileType = 'D'
  move 'Arizona Quarterly UI Wage Report - Diskette' to $ReportTitle
  display ''
  display 'Creating Diskette File for Arizona UI Wage Reporting'
 else
  move 'Arizona Quarterly UI Wage Report - Tape' to $ReportTitle
  display ''
  display 'Creating Tape File for Arizona UI Wage Reporting'
 end-if
end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'AZ'              to $State
#endif


  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $ReportYear ~~xx
  move $RptYear          to $RptYear xxxx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr


  move 275 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Open-File

end-procedure

begin-procedure Open-File

 if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX860AZ' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX860AZ.' || $FileExtension
#endif
   open $FileID as 10 for-writing record=512:fixed
 else

  open '{IMPORTPREFIX}TAX860AZ{IMPORTSUFFIX}' as 10 for-writing record=512:fixed

 end-if


end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
B.EMPLOYER_ID_SUT

  if RTRIM(&B.Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company: ' noline
    display &A.Company

    stop
  end-if
  let $StateEIN = RTRIM(&B.Employer_ID_SUT,' ')
  unstring $StateEIN by '-' into $str1 $str2 $str3
  string $str1 $str2 $str3 &Branch_Cd '*' by '' into $StateEIN
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),10)
    end-if
  end-while

  move &A.Company to $Company

  do Read-Employee-Data

FROM  PS_COMPANY_TBL A, PS_CO_STATETAX_TBL B
WHERE A.COMPANY = B.COMPANY
#ifdef TAXTEST
  AND B.STATE         = 'CA'
#else
  AND B.STATE         = 'AZ'
#endif
AND A.EFF_STATUS = 'A'
AND A.TAX_REPORT_TYPE = '2'
AND B.EFF_STATUS = 'A'
AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
AND B.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_CO_STATETAX_TBL
     WHERE  COMPANY = B.COMPANY
       AND  STATE   = B.STATE
       AND  EFFDT  <= $AsOfDate)
ORDER BY B.EMPLOYER_ID_SUT, A.COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
  do Write-Final-Record

end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
PN.FIRST_NAME
PN.MIDDLE_NAME
PN.LAST_NAME
    Do Get-Empl-Address (&C.Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $ADDRESS3 = $GETADDR_Address3
   let $ADDRESS4 = $GETADDR_Address4
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES PN,
      PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND PN.EMPLID       = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'AZ'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND C.EMPLID            = D1.EMPLID
  AND PN.NAME_TYPE = 'PRI'
  AND PN.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = PN.EMPLID
         AND  PX.NAME_TYPE = PN.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if
  Move &PN.Last_Name to $LastName
  Move &PN.First_Name to $FirstName
  Move &PN.Middle_Name to  $MiddleName
  if $MiddleName = ''
     move '               ' to $MiddleName
  end-if

  uppercase $FirstName
  uppercase $LastName
  uppercase $MiddleName

  move $Address1 to $EEAddress1
  move $Address2 to $EEAddress2
  move $City     to $EECity

  let  $EEState = rtrim($State, ' ')
  move $Postal   to $EEZip
  move $Country  to $EECountry

  move $EEZip to $ZipExtsn ~~~~~~xxxx
  If instr($EEZip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $EEZip = substr($EEZip,1,5) || '-' || substr($EEZip,6,4)
  End-if
  move $EEZip to $ZipExtsn ~~~~~~xxxx

  if $EEState = 'AZ'
      move '04' to $EEState
  else
      do Get-State-Numeric-Cd
  end-if

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD

  move &C.TxGrs_QTD to #TxGrs_QTD

  multiply 100 times #NlGrs_QTD
  multiply 100 times #TxGrs_QTD

  do write-s-record
  do Test-Diskette-Max-Write
end-procedure


begin-procedure After-Company

  do Print-Summary-Data('CoTotal')
  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Count_S      to #Count_F
  move 0            to #Count_S
  move 0            to #Co_NlGrs_QTD
  new-page
end-procedure


begin-procedure Write-S-Record

  move #NlGrs_QTD        to $NlGrs_QTD    09999999999
  move #TxGrs_QTD        to $TxGrs_QTD    09999999999

  write 10 from 'RS':2
                '04':2
             'UITAX':5
       $NATIONAL_ID:9
         $FirstName:15
        $MiddleName:15
          $LastName:20
                $Sp:4
        $EEAddress1:22
        $EEAddress2:22
            $EECity:22
           $EEState:2
             $EEZip:5
          $ZipExtsn:4
                $Sp:47
       $QtrEndMonth:2
           $RptYear:4
         $NlGrs_QTD:11
         $TxGrs_QTD:11
                $Sp:23
          $StateEIN:7
              '000':3
                $Sp:255



  add 1 to #RecordCount
  add 1 to #Count_S

end-procedure


begin-procedure Write-Final-Record
  move #F_Count to $F_Count 0999999

  write 10 from 'RF':2
                $Sp:510

  move 'Y' to $RecordWritten

  add 1 to #RecordCount

end-procedure

begin-procedure Test-Diskette-Max-Write
   if $FileType = 'D'
     if #RecordCount = #MaxRecordsPerDiskette
        do Write-Final-Record
        do Open-File
     end-if
  end-if
end-procedure

begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      do Get-Diskette-Format
      do Calculate-Diskette-Capacity
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

begin-procedure Get-Diskette-Format
  display 'Enter number corresponding to diskette type:'
  display '  1  =  3 1/2 High   Density (1.4 MB)'
  display ''
  while $DisketteType = ''
    input $DisketteType 'Enter diskette type (1 or Q to quit)'
    uppercase $DisketteType
    if INSTR('1Q',$DisketteType,1) = 0
      display ' '
      display '***** Enter 1 or Q *****'
      display ' '
      move '' to $DisketteType
    end-if
  end-while
end-procedure

begin-procedure Calculate-Diskette-Capacity
      evaluate $DisketteType
        when = 'Q'
          stop
        when = '1'
          let #MaxRecordsPerDiskette = round (.7498 * 1400000 / #RecordLength, 0)
        when-other
          let #MaxRecordsPerDiskette = 2359
      end-evaluate
          move #MaxRecordsPerDiskette to $MaxRecords
          if $PRCS_Process_Instance = ''
           if $FileType = 'D'
             display '  '
             display ' Maximum Records per Diskette is ' noline
             display $MaxRecords
             display '  '
           end-if
          end-if
end-procedure

begin-procedure Get-State-Numeric-Cd
  move '00' to $EEState
begin-SELECT
SN.NUMERIC_CD
  move &SN.NUMERIC_CD to $EEState
FROM PS_STATE_US_VW SN
WHERE SN.STATE = $STATE
end-SELECT
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'getaddr.sqc'   !Get Current Person Address
