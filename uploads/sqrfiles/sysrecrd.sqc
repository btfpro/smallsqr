! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSRECDF: PS Record Definition Edits report                          *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYSRECORD-Record-Main                                       !
! Descr:     Control function for checking records                     !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure SYSRECORD-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Record Definition Audit'

    do SysRecord-01
    do SysRecord-02
    do SysRecord-03
    do SysRecord-04
    do SysRecord-05
    do SysRecord-06
    do SysRecord-07
    do SysRecord-08
    do SysRecord-09            ! TPRD-WANDERSO-YQR9D
    ! do SysRecord-10          Pulled because unlimited nesting ok at PT81
    do SysRecord-11
    do SysRecord-12
    do SysRecord-13
    do SysRecord-14

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-01                              !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-1: Verify Record Definition Field count.            !
!----------------------------------------------------------------------!
begin-procedure SysRecord-01

    let $AuditDescr = '(RECORD-1) Record Definition Field count does not '
      || 'match the number of records in Record Field table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 26
   let #Start3          = 41
   let #Start4              = 56
   let #numofhdr        =  4
   put 'Record Name'  #Start1 21 into printarray(0)
   put 'Field Count'  #Start2 11 into printarray(1)
   put 'Actual Count' #Start3 12 into printarray(2)
   put 'Ownerid'          #Start4  7 into printarray(3)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record1_RecName
A.FIELDCOUNT       &Record1_FieldCount
A.OBJECTOWNERID    &Record1_ObjectOwnerid
COUNT(*)           &Record1_Count


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1


   print &Record1_RecName      (+1,#Start1)
   print &Record1_FieldCount   (0, #Start2)   edit 9,999
   print &Record1_Count        (0, #Start3)   edit B9,999
   print &Record1_ObjectOwnerid ( 0, #Start4)

FROM PSRECDEFN A, PSRECFIELD B
WHERE A.RECNAME = B.RECNAME
GROUP BY A.RECNAME, A.FIELDCOUNT,A.OBJECTOWNERID
HAVING A.FIELDCOUNT <>
  (SELECT COUNT(*)
   FROM PSRECFIELD C
   WHERE C.RECNAME = A.RECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-02                              !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-2: Verify Record Definition Field exists.           !
!----------------------------------------------------------------------!
begin-procedure SysRecord-02
   let $AuditDescr = '(RECORD-2) Record Definition Fields do not exist in Record Field table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let $DetailErrFound = 'N'

   let #rows           =  0
   let #Start1         =  1
   let #Start2         = 26
   let #Start3             = 60
   let #numofhdr       =  3
   put 'Record Name'  #Start1 21 into printarray(0)
   put 'Field Count'  #Start2 11 into printarray(1)
   put 'Ownerid'          #Start3  7 into printarray(2)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record2_RecName
A.FIELDCOUNT       &Record2_FieldCount
A.OBJECTOWNERID    &Record2_ObjectOwnerid


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Record2_RecName      (+1,#Start1)
   print &Record2_FieldCount   (0,#Start2)   edit 9,999
   print &Record2_ObjectOwnerid ( 0,#Start3)

FROM PSRECDEFN A
WHERE A.FIELDCOUNT <> 0
  AND NOT EXISTS
  (SELECT 'X'
   FROM PSRECFIELD B
   WHERE B.RECNAME = A.RECNAME)

end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-03                             !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-3: Verify Record Definition Parent Record exists.   !
!----------------------------------------------------------------------!
begin-procedure SysRecord-03

   let $AuditDescr = '(RECORD-3) Record Definition Parent Record does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound    = 'N'
   let #rows            = 0
   let #Start1            =  1
   let #Start2            = 26
   let #Start3                  = 60
   let #numofhdr        = 3

   put 'Record Name'  #Start1 21 into printarray(0)
   put 'Parent Record'  #Start2 21 into printarray(1)
   put 'Ownerid'          #Start3  7 into printarray(2)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record3_RecName
A.PARENTRECNAME    &Record3_ParentRec
A.OBJECTOWNERID    &Record3_ObjectOwnerid

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1


   print &Record3_RecName      (+1,#Start1)
   print &Record3_ParentRec    (0,#Start2)
   print &Record3_ObjectOwnerid (0,#Start3)

FROM PSRECDEFN A
WHERE A.PARENTRECNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X'
   FROM PSRECDEFN B
   WHERE B.RECNAME = A.PARENTRECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if


end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-04                             !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-4: Verify Record Definition SubRecord exists.       !
!----------------------------------------------------------------------!
begin-procedure SysRecord-04

#define C_FieldNum     21
#define C_SubRecord    29

   let $AuditDescr = '(RECORD-4) Record Definition SubRecord does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let #rows            =  0
   let $DetailErrFound    = 'N'
   let #Start1            =  1
   let #Start2            = 26
   let #Start3            = 41
   let #numofhdr          = 3
   put 'Record Name'    #Start1 21 into printarray(0)
   put 'Field Num'      #Start2 11 into printarray(1)
   put 'SubRecord Name' #Start3 21 into printarray(2)



begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record4_RecName
A.FIELDNUM         &Record4_FieldNum
A.FIELDNAME        &Record4_SubRecord


   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1


   print &Record4_RecName      (+1, #Start1)
   print &Record4_FieldNum     ( 0, #Start2)     edit 9,999
   print &Record4_SubRecord    ( 0, #Start3)

FROM PSRECFIELD A
WHERE A.SUBRECORD = 'Y'
    AND NOT EXISTS
    (SELECT 'X' FROM PSRECDEFN B
    WHERE B.RECNAME = A.FIELDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-05                             !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-5: Verify Record Definition Query Security record.  !
!----------------------------------------------------------------------!
begin-procedure SysRecord-05

   let $AuditDescr = '(RECORD-5) Record Definition Query Security Record does not exist in Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'


   let $DetailErrFound    = 'N'
   let #Start1            =  1
   let #Start2            = 26
   let #Start3                    = 60
   let #rows            =  0
   let #numofhdr        =  3
   put 'Record Name'                 #Start1 21 into printarray(0)
   put 'Query Security Record Name'  #Start2 27 into printarray(1)
   put 'Ownerid'                                         #Start3  7 into printarray(2)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record5_RecName
A.QRYSECRECNAME    &Record5_QrySecRec
A.OBJECTOWNERID    &Record5_ObjectOwnerid

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1


   print &Record5_RecName      (+1,#Start1)
   print &Record5_QrySecRec    (0,#Start2)
   print &Record5_ObjectOwnerid (0,#Start3)

FROM PSRECDEFN A
WHERE A.QRYSECRECNAME <> ' '
  AND NOT EXISTS
  (SELECT 'X' FROM PSRECDEFN B
  WHERE B.RECNAME = A.QRYSECRECNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-06                           !
! Descr:     System table audit against PSRECFIELD table:              !
!            RECORD-6: Verify Record Field Recname exists.              !
!----------------------------------------------------------------------!
begin-procedure SysRecord-06

   let $AuditDescr = '(RECORD-6) Record Field definitions contain Record names that do not exist in the Record Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound = 'N'
   let #Start1           =  1
   let #Start2         = 26
   let #numofhdr       =  2
   let #rows           =  0
   put 'Record Name'  #Start1 21 into printarray(0)
   put 'Field Num'    #Start2 11 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record6_RecName
A.FIELDNUM         &Record6_FieldNum

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Record6_RecName      (+1,#Start1)
   print &Record6_FieldNum     (0, #Start2)     edit 9,999

FROM PSRECFIELD A
WHERE NOT EXISTS
  (SELECT 'X'
   FROM PSRECDEFN B
   WHERE B.RECNAME = A.RECNAME)
end-SELECT

      do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-07                            !
! Descr:     System table audit against PSRECFIELD table:              !
!            RECORD-7: Verify Record Field DBName exists.               !
!----------------------------------------------------------------------!
begin-procedure SysRecord-07

   let $AuditDescr = '(RECORD-7) DBField records do not exist for the following RecField table Fields:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'


   let $DetailErrFound    = 'N'
   let #rows              =  0
   let #Start1            =  1
   let #Start2            = 26
   let #numofhdr          =  2
   put 'Record Name'      #Start1 21 into printarray(0)
   put 'Field Name'       #Start2 18 into printarray(1)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record7_RecName
A.FIELDNAME        &Record7_FieldName


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Record7_RecName      (+1,#Start1)     on-break PRINT=CHANGE/TOP-PAGE LEVEL=1
   print &Record7_FieldName    (0, #Start2)

FROM PSRECFIELD A
WHERE A.SUBRECORD <> 'Y'
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSDBFIELD B
  WHERE B.FIELDNAME = A.FIELDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-08                         !
! Descr:     System table audit against PSRECFIELD table:              !
!            RECORD-8: Verify Record Field SubRecord exists.            !
!----------------------------------------------------------------------!
begin-procedure SysRecord-08

   let $AuditDescr = '(RECORD-8) Record definitions do not exist for the '
      || 'following RecField table SubRecords:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound      = 'N'
   let #rows                =  0
   let #Start1              =  1
   let #Start2              = 26
   let #Start3              = 41
   let #numofhdr            =  2
   put 'Record Name'  #Start1 21 into printarray(0)
   put 'Field Name'   #Start2 18 into printarray(1)



begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record8_RecName
A.FIELDNAME        &Record8_FieldName


   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Record8_RecName      (+1, #Start1)     on-break PRINT=CHANGE/TOP-PAGE LEVEL=1
   print &Record8_FieldName    ( 0, #Start2)

FROM PSRECFIELD A
WHERE A.SUBRECORD = 'Y'
  AND NOT EXISTS
  (SELECT 'X'
  FROM PSRECDEFN B
  WHERE B.RECNAME = A.FIELDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-09           !
! Descr:     System table audit against PSRECDEFN & PS_REC_GROUP       !
!             table:                                                   !
!            RECORD-9: IDENTIFY INVALID RECORDS IN RECORD GROUP        !
!                    DEFINITIONS                                       !
!----------------------------------------------------------------------!
begin-procedure SysRecord-09

   let $AuditDescr = '(RECORD-9) IDENTIFY INVALID RECORDS IN RECORD GROUP DEFINITIONS:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound  = 'N'
   let #rows            =  0
   let #Start1          =  1
   let #Start2          = 26
   let #numofhdr        =  2
   put 'Record Group'   #Start1  21 into printarray(0)
   put 'Record Name'    #Start2  21 into printarray(1)

begin-SELECT on-Error=SQL-Error
A.REC_GROUP_ID         &Record9_RecGroup
A.RECNAME              &Record9_RecName


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Record9_RecGroup      (+1, #Start1)     on-break PRINT=CHANGE/TOP-PAGE LEVEL=1
   print &Record9_RecName       ( 0, #Start2)

FROM PS_REC_GROUP_REC A
WHERE NOT EXISTS (SELECT 'X' FROM PSRECDEFN B
                  WHERE A.RECNAME = B.RECNAME)
ORDER BY A.REC_GROUP_ID, A.RECNAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-11                                !
! Descr:     System table audit against PSRECFIELD & table:            !
!            RECORD-11: IDENTIFY RECORDS WITH 2 OR MORE LONGS DEFINED  !
!----------------------------------------------------------------------!
begin-procedure SysRecord-11

   let $AuditDescr = '(RECORD-11)INFORMATIONAL ONLY-RECORDS WITH MORE THAN 2 LONGS DEFINED'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound  = 'N'
   let #rows            =  0
   let #numofhdr        =  3
   let #Start1          =  1
   let #Start2          =  35
   let #Start3          =  50
   put 'Record Name'    #Start1 21 into printarray(0)
   put 'Ownerid'        #Start2  7 into printarray(1)
   put '# of Longs'     #Start3 12 into printarray(2)

begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record11_RecName
E.OBJECTOWNERID    &Record11_ObjectOwnerid
COUNT(*)           &Record11_Count

 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

      print &Record11_RecName       (+1,#Start1) on-break PRINT=CHANGE/TOP-PAGE LEVEL=1
      print &Record11_ObjectOwnerid (0,#Start2)
      print &Record11_Count         (0,#Start3)

   FROM PSRECFIELD A,
       PSRECFIELD B,
       PSDBFIELD C,
       PSDBFIELD D,
       PSRECDEFN E,
       PSDBFIELD F,
       PSDBFIELD G
  WHERE E.RECTYPE = 0
    AND E.RECNAME = A.RECNAME
    AND A.RECNAME = B.RECNAME
    AND A.FIELDNAME = C.FIELDNAME
    AND F.FIELDNAME = C.FIELDNAME
    AND B.FIELDNAME = D.FIELDNAME
    AND G.FIELDNAME = D.FIELDNAME
    AND C.FIELDTYPE = 1
    AND (F.LENGTH = 0 OR F.LENGTH > 2000)
    AND D.FIELDTYPE = 1
    AND (G.LENGTH = 0 OR G.LENGTH > 2000)
    AND C.FIELDNAME <> D.FIELDNAME
GROUP BY A.RECNAME,E.OBJECTOWNERID
ORDER BY A.RECNAME
end-SELECT


   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-12                       !
! Descr:     System table audit against PSRECDEFN                      !
!            RECORD-12: IDENTIFY RECORDS WITH RECNAME = nothing        !
!----------------------------------------------------------------------!
begin-procedure SysRecord-12

   let $AuditDescr = '(RECORD-12) Records with a Blank/Null RECNAME'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound  = 'N'
   let #rows            =  0
   let #numofhdr        =  1
   let #Start1          =  1
   put 'Record Name'    #Start1 21 into printarray(0)


begin-SELECT on-Error=SQL-Error
COUNT(*)          &Record12_Count

    if &Record12_Count > 0
        if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
            move 'Y' to $DetailErrFound
            do PrintSectionHeadings
        end-if
        let #rows = #rows +1

        print &Record12_Count      (+1,#Start1)     on-break PRINT=CHANGE/TOP-PAGE LEVEL=1
    else
        exit-select
    end-if

FROM PSRECDEFN
WHERE RECNAME = ' '

end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SysRecord-13                                              !
! Descr:     System table audit against PSRECDEFN & table:             !
!            RECORD-13: IDENTIFY TEMP RECORDS WITH SQLTABLENAME        !
!----------------------------------------------------------------------!
begin-procedure SysRecord-13

   let $AuditDescr = '(RECORD-13) TEMP RECORDS WITH SQLTABLENAME'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if   let $DetailErrFound = 'N'

   let $DetailErrFound  = 'N'
   let #rows            =  0
   let #numofhdr        =  1
   let #Start1          =  1
   put 'Record Name'    #Start1 21 into printarray(0)



begin-SELECT DISTINCT on-Error=SQL-Error
RECNAME          &Record13_RecName


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

      print &Record13_RecName      (+1,#Start1)

FROM PSRECDEFN 
WHERE RECTYPE = 7 AND SQLTABLENAME <> ' '
ORDER BY RECNAME
end-SELECT


   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SysRecord-14                              !
! Descr:     System table audit against PSRECDEFN table:               !
!            RECORD-14: Verify Record Field values.            !
!----------------------------------------------------------------------!
begin-procedure SysRecord-14

    let $AuditDescr = '(RECORD-14) Record Field Field Number has invalid value: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 25
   let #Start3          = 40
   let #Start4              = 64
   let #Start5              = 77
   let #numofhdr        =  5
   put 'Record Name'  #Start1 20 into printarray(0)
   put 'Field Count'  #Start2 11 into printarray(1)
   put 'Field Name' #Start3 20 into printarray(2)
   put 'Field Num' #Start4 9 into printarray(3)
   put 'Ownerid'          #Start5  7 into printarray(4)


begin-SELECT on-Error=SQL-Error
A.RECNAME          &Record14_RecName
A.FIELDCOUNT       &Record14_FieldCount
B.FIELDNAME        &Record14_FieldName
B.FIELDNUM         &Record14_FieldNum
A.OBJECTOWNERID    &Record14_ObjectOwnerid


 if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1


   print &Record14_RecName      (+1,#Start1)
   print &Record14_FieldCount   (0, #Start2)   edit 9,999
   print &Record14_FieldName        (0, #Start3)   
   print &Record14_FieldNum        (0, #Start4)   edit 9,999
   print &Record14_ObjectOwnerid ( 0, #Start5)

FROM PSRECDEFN A, PSRECFIELD B WHERE
A.RECNAME = B.RECNAME AND
A.FIELDCOUNT < B.FIELDNUM
ORDER BY A.RECNAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
