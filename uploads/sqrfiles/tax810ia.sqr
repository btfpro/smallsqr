!***********************************************************************
!  TAX810IA:  Qtrly Wage List - IOWA                                   *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2010, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2010/09/23:10:02:55                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  813279                                              !
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
! Rimini Street Modification Log                                       *
!                                                                      *
!  07/30/2013	RSI-HCM103467                                            *
!  Descr: Change max # of records from 1500 to 9999.                   *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  if #Vol <> 0
    close 10
  end-if

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the following'
    display 'file(s) will have been created in CSV format for the reporting'
    display 'of quarterly wages to Iowa Workforce Development :'
    display ''
    display '  TIAxxxnn   where "xxx" represents a company identifier'
    display '             and "nn" represents a volume number.'
    display ''
    display 'Follow the instructions from the department for preparing and'
    display 'submitting the file(s).'
    display ''

  else
     do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810IA'                      to $ReportID
  move 'Iowa Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating file for Iowa UI Wage Reporting'
  display ''

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'IA'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.Balance_Qtr   to $RptQtr  9
  let $RptQtr  = rtrim($RptQtr, ' ')
  let $YrQtr   = $CalendarYr || $RptQtr

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
  end-if

  move ','     to $Comma
  move 'CSV'   to $FileExtension
  move 'N'     to $ExceedMax
  move 8       to #MaxAcctNumLen
  move 9       to #FEINLen
  move 9999    to #MaxRecordsPerFile   ! RSI-HCM103467
  move 99      to #MaxFileNum

  do Array-Create
  do Initialize-Array

end-procedure


begin-procedure Array-Create

  create-array name=FileInfo size= 150  -
    field=Company:char                  -
    field=NumOfFile:number

end-procedure


begin-procedure Initialize-Array

  move 0     to #i
  move ' '   to $Sp
  move 0     to #zero
  move 150   to #arraysize

  while #i < #arraysize

     put $Sp #zero into FileInfo(#i) Company NumOfFile
     add 1 to #i

  end-while

end-procedure


begin-procedure Open-File

   if #Vol <> 0
      close 10

      if $ExceedMax = 'N'
        move 0 to #Vol
      end-if
   end-if

   add 1 to #Vol

   if #Vol > #MaxFileNum
     move #Vol to $Vol 099

     display '*** There is a limit of 99 files per company ***'
     display '*********************** Processing stopped *********************'
     display 'Company ' noline
     display &C.COMPANY
     display 'File volume number ' noline
     display $Vol
     stop
   end-if


   move #Vol to $Vol 09


#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TIA' || &C.COMPANY || $Vol || $FileExtension
#else
  #ifdef MVS
    let $FileID = '{IMPORTPREFIX}' || 'TIA' || &C.COMPANY || $Vol
  #else
    let $FileID = '{IMPORTPREFIX}' || 'TIA' || &C.COMPANY || $Vol || '.'|| $FileExtension
  #endif
#endif
   open $FileID as 10 for-writing record=109:fixed

end-procedure


begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F > 0
    move '' to $LastCompany
    move '' to $LastCompanyName
    do Print-Summary-File-Names
  end-if

end-procedure


begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME


  if &C.NlGrs_QTD > 0 and &C.TxGrs_QTD >= 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = $Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'IA'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Process-Employee

  let $LastName   = {ps-substr}(&D.LAST_NAME,1,30)
  let $FirstName  = {ps-substr}(&D.FIRST_NAME,1,15)
  let $LastName   = rtrim($LastName, ' ')
  let $FirstName  = rtrim($FirstName, ' ')

  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)

  move &C.EmplID       to $EmplID
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
     display ' '
     display '*** WARNING ****'
     display '** SSN missing for Employee ' noline
     display $EmplID noline
     display ' - ' noline
     display $LastName
     move ' ' to $NATIONAL_ID
  else
     move &D1.NATIONAL_ID to $NATIONAL_ID
     let $NATIONAL_ID   = {ps-substr}($NATIONAL_ID,1,9)
     move $NATIONAL_ID to $NATIONAL_ID xxx-xx-xxxx
  end-if

  if $MidInitial = '.'
     display ' '
     display '*** WARNING ****'
     display '** Invalid period in the Middle Initial for Employee ' noline
     display $EmplID noline
     display ' - ' noline
     display $LastName
     move ' ' to $MidInitial
  end-if


  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  add #NlGrs_QTD    to #Co_NlGrs_QTD
  add #TxGrs_QTD    to #Co_TxGrs_QTD

  do Get-Employer-Rpt-Unit
  do Write-Detail-Record

end-procedure


begin-procedure Before-Company
  do Get-Company-Data

  move &CT.Federal_EIN  to $FedEIN  !FEIN
  if &CT.Federal_EIN <> 0
    let $FedEIN_Rtrim  = rtrim($FedEIN, ' ')
    let #FEINLen_Rrim  = length($FedEIN_Rtrim)
    if #FEINLen_Rrim < #FEINLen
      display ' '
      display '*** WARNING ****'
      display '  The Federal Employer ID Number is less than 9 digits  '
      display '  Company: '  noline
      display   $Company     noline
      display ', FEIN: '  noline
      display  $FedEIN_Rtrim

    end-if

    let $FedEIN = SUBSTR($FedEIN,1,2) || '-' || SUBSTR($FedEIN,3,7)

  else
    move ' ' to $FedEIN
    display ' '
    display '*** WARNING ****'
    display '  The Federal Employer ID Number is missing '
    display '  Company: '  noline
    display   $Company

  end-if

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if


  let  $ER_ID_SUT_Rtrim = rtrim (&Employer_ID_SUT, ' ')
  let  #MaxLength = length($ER_ID_SUT_Rtrim)

  if #MaxLength > #MaxAcctNumLen
     display ' '
     display '*** WARNING ****'
     display '  State Unemployment ID in Co State Tax Table greater than 8 digits  '
     display '  Company: '  noline
     display   $Company     noline
     display ', State Unemployment Employer ID: '  noline
     display  $ER_ID_SUT_Rtrim
  end-if


  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  let $StateEIN = translate($StateEIN, ' ', '')

!* remove check digit after hyphen of old account number
  let #Hyphen = INSTR($StateEIN,'-',1)
  if #Hyphen > 0
    let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1))
  else
    let $StateEIN = rtrim($StateEIN, ' ')
  end-if

  let $StateEIN   = {ps-substr}($StateEIN,1,8)
  move $StateEIN to $StateEIN 09999999

  add 1 to #Count_E
  move 0 to #RecordCount

  do Open-File

  do Load-FileInfo-Array


end-procedure


begin-procedure After-Company

  move #Count_S to #Count_R
  do Print-Summary-Data('CoTotal')

  add #Count_S to #Count_F
  add #Count_S to #Count_R_Total

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD

  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Count_S
  new-page

end-procedure


begin-procedure Get-Employer-Rpt-Unit                                         

  let $RprtUnit    = '0001'     ! Default Reporting Unit                                                                        
  let $UI_Rpt_Code = ''                                             
                                                                        
  let $Job_Found = 'N'                                                  
  do Get-Active-Job                                                     
                                                                        
  if $Job_Found = 'N'                                                   
    do Get-Inactive-Job                                                 
  end-if                                                                
                                                                        
  if $Job_Found = 'Y'                                                   
    do Get-UI-Rpt-Code                                        
  end-if
                                                                
end-procedure                                                           
                                                                        
begin-procedure Get-Active-Job                                          
                                                                        
#ifdef TAXTEST
  let $Active_Job_State = 'CA'
#else
  let $Active_Job_State = 'IA'
#endif

begin-select
JOB1.BUSINESS_UNIT
JOB1.TAX_LOCATION_CD

  let $Business_Unit = &JOB1.BUSINESS_UNIT
  let $Tax_Location  = &JOB1.TAX_LOCATION_CD
  let $Job_Found     = 'Y'

  FROM PS_JOB JOB1
 WHERE JOB1.EMPLID          = $EmplID
   AND JOB1.COMPANY         = $Company
   AND EXISTS (SELECT 'X'
                FROM PS_TAX_LOCATION2 TL1
               WHERE TL1.TAX_LOCATION_CD = JOB1.TAX_LOCATION_CD
                 AND TL1.STATE           = $Active_Job_State)   
  AND JOB1.EMPL_RCD   =
      (SELECT MIN(JOB12.EMPL_RCD)
         FROM PS_JOB JOB12
        WHERE JOB12.EMPLID          = JOB1.EMPLID
          AND JOB12.COMPANY         = JOB1.COMPANY
          AND JOB12.EMPL_STATUS     = 'A'
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL12
                       WHERE TL12.TAX_LOCATION_CD = JOB12.TAX_LOCATION_CD
                         AND TL12.STATE           = $Active_Job_State))
  AND JOB1.EFFDT      =
      (SELECT MAX(JOB13.EFFDT)
         FROM PS_JOB JOB13
        WHERE JOB13.EMPLID          = JOB1.EMPLID
          AND JOB13.COMPANY         = JOB1.COMPANY
          AND JOB13.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB13.EFFDT          <= $AsOfDate
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL13
                       WHERE TL13.TAX_LOCATION_CD = JOB13.TAX_LOCATION_CD
                         AND TL13.STATE           = $Active_Job_State))
  AND JOB1.EFFSEQ     =
      (SELECT MAX(JOB14.EFFSEQ)
         FROM PS_JOB JOB14
        WHERE JOB14.EMPLID          = JOB1.EMPLID
          AND JOB14.COMPANY         = JOB1.COMPANY
          AND JOB14.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB14.EFFDT           = JOB1.EFFDT
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL14
                       WHERE TL14.TAX_LOCATION_CD = JOB14.TAX_LOCATION_CD
                         AND TL14.STATE           = $Active_Job_State))

end-select                                                              
end-procedure                                                           
                                                                        
begin-procedure Get-Inactive-Job                                        
                                                                        
#ifdef TAXTEST
  let $Active_Job_State = 'CA'
#else
  let $Active_Job_State = 'IA'
#endif
                                                                        
begin-select                                                            
JOB2.BUSINESS_UNIT                                                      
JOB2.TAX_LOCATION_CD                                                    
                                                                        
  let $Business_Unit = &JOB2.BUSINESS_UNIT                              
  let $Tax_Location  = &JOB2.TAX_LOCATION_CD                            
  let $Job_Found     = 'Y'                                              
                                                                        
  FROM PS_JOB JOB2
 WHERE JOB2.EMPLID          = $EmplID
   AND JOB2.COMPANY         = $Company
   AND EXISTS (SELECT 'X'
                FROM PS_TAX_LOCATION2 TL2
               WHERE TL2.TAX_LOCATION_CD = JOB2.TAX_LOCATION_CD
                 AND TL2.STATE           = $Active_Job_State)
  AND JOB2.EMPL_RCD   =
      (SELECT MIN(JOB22.EMPL_RCD)
         FROM PS_JOB JOB22
        WHERE JOB22.EMPLID          = JOB2.EMPLID
          AND JOB22.COMPANY         = JOB2.COMPANY
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL22
                       WHERE TL22.TAX_LOCATION_CD = JOB22.TAX_LOCATION_CD
                         AND TL22.STATE           = $Active_Job_State))
  AND JOB2.EFFDT      =
      (SELECT MAX(JOB23.EFFDT)
         FROM PS_JOB JOB23
        WHERE JOB23.EMPLID          = JOB2.EMPLID
          AND JOB23.COMPANY         = JOB2.COMPANY
          AND JOB23.EMPL_RCD        = JOB2.EMPL_RCD
          AND JOB23.EFFDT          <= $AsOfDate
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL23
                       WHERE TL23.TAX_LOCATION_CD = JOB23.TAX_LOCATION_CD
                         AND TL23.STATE           = $Active_Job_State))
  AND JOB2.EFFSEQ     =
      (SELECT MAX(JOB24.EFFSEQ)
         FROM PS_JOB JOB24
        WHERE JOB24.EMPLID          = JOB2.EMPLID
          AND JOB24.COMPANY         = JOB2.COMPANY
          AND JOB24.EMPL_RCD        = JOB2.EMPL_RCD
          AND JOB24.EFFDT           = JOB2.EFFDT
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL24
                       WHERE TL24.TAX_LOCATION_CD = JOB24.TAX_LOCATION_CD
                         AND TL24.STATE           = $Active_Job_State))

end-select                                                              
end-procedure                                                           

                                                                        
begin-procedure Get-UI-Rpt-Code                               
begin-select                                                            
LOC.UI_RPT_CODE                                                     
                                                                        
  let $UI_Rpt_Code = &LOC.UI_RPT_CODE                           
                                                                        
FROM PS_CO_UI_RPTCD_TBL LOC                                             
WHERE LOC.COMPANY  = $Company                                            
  AND LOC.LOCATION = $Tax_Location                                      
  AND LOC.EFFDT =                                                       
      (SELECT MAX(EFFDT)                                                
         FROM PS_CO_UI_RPTCD_TBL                                        
        WHERE COMPANY  = LOC.COMPANY                                    
          AND LOCATION = LOC.LOCATION                                   
          AND EFFDT   <= $AsOfDate)                                     
  AND LOC.EFF_STATUS = 'A'                                              
end-select                                                             

  if $UI_Rpt_Code <> ''
     do Check-Format-Rpt-Code
  end-if

end-procedure                                              


begin-procedure Write-Detail-Record

  add 1 to #RecordCount

  if #RecordCount > #MaxRecordsPerFile

    move 'Y' to $ExceedMax
    do Open-File
    do Load-FileInfo-Array
    move 'N'          to $ExceedMax
    move 0            to #RecordCount
    add 1             to #RecordCount
  end-if

  move #RecordCount   to $SeqNum   9999
  let $SeqNum = ltrim($SeqNum, ' ')

  do Format-Number (#NlGrs_QTD, $NlGrs_QTD, '9999999999.00')
  let $NlGrs_QTD = ltrim($NlGrs_QTD, ' ')


  let $OutputF = $SeqNum  || $Comma  || $StateEIN  || $Comma ||
                 $FedEIN  || $Comma  || $YrQtr     || $Comma ||
                 $NATIONAL_ID || $Comma || $LastName   || $Comma ||
                 $FirstName   || $Comma || $MidInitial || $Comma ||
                 $NlGrs_QTD   || $Comma || $RprtUnit

  write 10 from $OutputF



 ! write 10 from $SeqNum:4   ! 1   - 4
 !                $Comma:1   ! 5
 !             $StateEIN:8   ! 6   - 13
 !                $Comma:1   ! 14
 !               $FedEIN:10  ! 15  - 24
 !                $Comma:1   ! 25
 !                $YrQtr:5   ! 26  - 30
 !                $Comma:1   ! 31
 !          $NATIONAL_ID:11  ! 32  - 42
 !                $Comma:1   ! 43
 !             $LastName:30  ! 44  - 73
 !                $Comma:1   ! 74
 !            $FirstName:15  ! 75  - 89
 !                $Comma:1   ! 90
 !           $MidInitial:1   ! 91
 !                $Comma:1   ! 92
 !            $NlGrs_QTD:12  ! 93 - 104
 !                $Comma:1   ! 105
 !             $RprtUnit:4   ! 109


  add 1 to #Count_S
  move 'Y' to $RecordWritten

end-procedure


begin-procedure Check-Format-Rpt-Code
  let $aflag = ''
  let $ovrs1 = ''
  let #icntr = 1
  let #lngth = Length($UI_Rpt_Code) + 1
  while #icntr < #lngth
      let $ifld = Substr($UI_Rpt_Code,#icntr,1)
      let #f_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$ifld, 1)
       if #f_Inst <> 0
          let $ovrs1 =  $ovrs1 || $ifld
         let #a_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$ifld, 1)
         if #a_Inst <> 0
            let $aflag = 'Y'
         end-if
       end-if
       add 1 to #icntr
  end-while

  if $aflag = 'Y'
     display ''
     display '***************************************************************'
     display 'WARNING: UI Report Code ' noline
     display $ovrs1                     noline
     display ' - Company '              noline
     display $Company                   noline
     display '   Location '             noline
     display $Tax_Location
     display '         contains non-numeric values.'
     display '***************************************************************'
  end-if

  let #lngth = Length($ovrs1)
  if #lngth < 4
      let #icntr = 1
      let $ovrs2 = ''

      let #dlngth = 5 - #lngth
      while #icntr < #dlngth
        let $ovrs2 =  $ovrs2 || '0'
        add 1 to #icntr
      end-while
      let $ovrs2 =  $ovrs2 || Substr($ovrs1,1,#lngth)

      let $RprtUnit = Substr($ovrs2,1,4)
  else
      let $RprtUnit = Substr($ovrs1,1,4)
      if #lngth > 4
         display '***************************************************************'
         display 'WARNING: UI Report Code ' noline
         display $ovrs1                     noline
         display ' - Company '              noline
         display $Company                   noline
         display '   Location '             noline
         display $Tax_Location
         display '         is more than 4 digits in the UI Report Code Table.'
         display '***************************************************************'
      end-if
  end-if

end-procedure


begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while

end-procedure


begin-procedure Load-FileInfo-Array

  move 0 to #j
  while  #j < #arraysize
     get $Co from FileInfo(#j) Company

     if rtrim($Co, ' ') = rtrim(&C.COMPANY, ' ')
       put #Vol into FileInfo(#j) NumOfFile
       break
     else
       if $Co = ' ' or $Co = ''
         put &C.COMPANY #Vol into FileInfo(#j) Company NumOfFile
         add 1 to #j

         break
       else
         add 1 to #j
       end-if
     end-if
   end-while

end-procedure


begin-procedure Print-Summary-File-Names

  print '**** File(s) Total ****'     (+3,1)
  print 'No Limit Gross QTD '      (+2,1,26)
  print #Tot_NlGrs_QTD              (,55)   edit 999,999,999.99mi

  if #Tot_TxGrs_QTD <> 0
    print 'Taxable Gross QTD  '    (+2,1,26)
    print #Tot_TxGrs_QTD            (,55)   edit 999,999,999.99mi
  end-if

  if #Tot_ExGrs_QTD <> 0
    print 'Excess Gross QTD   '    (+2,1,26)
    print #Tot_ExGrs_QTD            (,55)   edit 999,999,999.99mi
  end-if

  if #Tot_Tips_QTD <> 0
    print 'Declared Tips QTD  '    (+2,1)
    print #Tot_Tips_QTD             (,55)   edit 999,999,999.99mi
  end-if

  print 'Employees Reported'       (+2,1,29)
  print #Count_F                    (,58)   edit 999,999,999

  if #Count_R_Total > 0
    print 'Records Reported'       (+2,1,29)
    print #Count_R_Total            (,58)   edit 999,999,999
  end-if

  if #Count_E <> 0
    print 'Employers Reported'     (+2,1,29)
    print #Count_E                  (,58)   edit 999,999,999
  end-if

  IF $STATE='OR'
    PRINT 'Total Hours Reported'   (+2,1,20)
    PRINT #TOT_HOURS                (,58) edit 999,999,999
  END-IF

  print 'Output File(s):  '        (+2,1)


 move 0 to #i

 while  #i < #arraysize
   get $Co #Vol from FileInfo(#i) Company NumOfFile
   let $Co = rtrim($Co, ' ')

   if $Co <> '' and $Co <> ' '

    if #Vol > 0
      move 1 to #k
      while #k <= #Vol
        move #k to $Vol 09


#ifdef OS400
   let $FileID = '{IMPORTPREFIX}' || 'TIA' || $Co || $Vol || $FileExtension
#else
  #ifdef MVS
    let $FileID = '{IMPORTPREFIX}' || 'TIA' || $Co || $Vol
  #else
    let $FileID = '{IMPORTPREFIX}' || 'TIA' || $Co || $Vol || '.'|| $FileExtension
  #endif
#endif
        print $FileID                  (+1,10)

        add 1 to #k
      end-while

    end-if
   else
     break
   end-if

   add 1 to #i
 end-while

end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'txrnctl1.sqc'  !Get-Tax-Reporting-Panel-Input procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'txovrflw.sqc'  !Split-S-Record Procedure
