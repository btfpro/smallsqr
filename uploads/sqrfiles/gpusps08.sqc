!***********************************************************************
!  GPUSPS08: Global Payroll Payslips - Static USA Gross To Net         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/22:18:05:53                                 *
!       $Release:  HR9                                                 *
!      $Revision:  102                                                 *
!                                                                      *
!***********************************************************************
! Change History
! Incident ID    Dated     Comments
!
! 1269701000      7/05     Redundant reads for some tables. Create arrays and read in data
!                          up front and access the array instead of the table for subsequent
!                          data retrieval

#DEFINE GROSSTONET_STATIC_TITLE_SIZE 1
!***********************************************************************
begin-procedure Init-Variables_GROSSTONET
!***********************************************************************
LET #total_earn_cur_GROSSTONET = 0
LET #total_earn_ytd_GROSSTONET = 0
let #total_fed_tax_gross_cur_GROSSTONET = 0
let #total_fed_tax_gross_ytd_GROSSTONET = 0
let #total_taxes_cur_GROSSTONET = 0
let #total_taxes_ytd_GROSSTONET = 0
let #total_ded_cur_GROSSTONET = 0
let #total_ded_ytd_GROSSTONET = 0
let #net_pay_cur_GROSSTONET = 0
let #net_pay_ytd_GROSSTONET = 0

let $_space_left   = 'y'
let $section_printed = 'n'
if upper($gbl_new_lang_flag) = 'Y'
    do Get_Field_Information ($ReportID, 'TOTAL_GROSS'   , $TOTAL_GROSS_LBL,    #DW)
    do Get_Field_Information ($ReportID, 'FED_TAX_GROSS' , $FED_TAX_GROSS_LBL, #DW)
    do Get_Field_Information ($ReportID, 'TOTAL_TAXES'   , $TOTAL_TAXES_LBL,   #DW)
    do Get_Field_Information ($ReportID, 'TOTAL_DED'     , $TOTAL_DED_LBL,       #DW)
    do Get_Field_Information ($ReportID, 'NET_PAY'       , $NET_PAY_LBL,          #DW)
    do Get_Field_Information ($ReportID, 'CUR_LBL'       , $CUR_LBL,          #DW)
    do Get_Field_Information ($ReportID, 'YTD_LBL'           , $YTD_LBL,           #DW)
END-IF
   
end-procedure

!***********************************************************************
! GROSS_TO_NET_Static                                                         *
!***********************************************************************
begin-procedure gross_to_net_Static

#debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section GPUSPS08.SQC ')
#debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Procedure gross_to_net_static')

    do Init-Variables_GROSSTONET
   #debug1 show '** USA STATIC GROSS section:        #current line = '#current-line ' #page-count = '  #page-count
    while ($section_printed = 'n')
        do get_start_page_line_number(#current-line, #page-count, #start-section-line-number, #start-section-page-number)
        do evaluate_space(#start-section-line-number,$space_left)
        #debug1 show '** USA STATIC GROSS section:        #start-section-line-number = '#start-section-line-number ' $space_left = ' $space_left
        if $space_left = 'n'
            if $gbl_Paycheck_To_Do = 'y'
                Do print_check_usa
                #debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Back into Procedure gross_to_net_static')
                move 'n' to $check_collision 
                move 'n' to $gbl_Paycheck_To_Do
            else
                new-page
                Move 1 to #gbl_curr_Section_Start_Line
                Move 1 to #start-section-line-number
                do GROSS_TO_NET
                move 'y' to $section_printed
                break
            end-if
        end-if
        if $space_left = 'y'
            if $gbl_Paycheck_To_Do = 'y'
                do evaluate_bankdraft_collision(#start-section-line-number,$check_collision)
                if $check_collision = 'y'
                    Do print_check_usa
                    #debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Back into Procedure gross_to_net_static')
                    move 'n' to $check_collision 
                    move 'n' to $gbl_Paycheck_To_Do
                else
                    do GROSS_TO_NET
                    move 'y' to $section_printed
                    break
                end-if
            else
                do GROSS_TO_NET
                move 'y' to $section_printed
                break
            end-if
        end-if
    end-while
    
end-procedure 
!**********************************************************************
!**********************************************************************
!      GROSS_TO_NET
!**********************************************************************
!**********************************************************************

begin-procedure GROSS_TO_NET
    do Get_Gross_To_Net_Curr_Elements
    do Get_Gross_To_Net_YTD_Elements
    do Print_Gross_To_Net
end-procedure 

!**********************************************************************
!**********************************************************************
!      Get_Gross_To_Net_Curr_Elements
!**********************************************************************
!**********************************************************************
begin-procedure Get_Gross_To_Net_Curr_Elements
#debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Procedure Get_Gross_To_Net_Curr_Elements')

BEGIN-SELECT ON-ERROR=SQL-ERROR
C.GP_PSLP_ORDER            &C.GP_PSLP_ORDER_GROSSTONET
    Move &C.GP_PSLP_ORDER_GROSSTONET to $GP_PSLP_ORDER_GROSSTONET_CHAR
    let #GP_PSLP_ORDER_GROSSTONET_INT = to_number($GP_PSLP_ORDER_GROSSTONET_CHAR)
C.PIN_NUM             &C.PIN_NUM_GROSSTONET   
SUM(C.CALC_RSLT_VAL)    &C.CALC_RSLT_VAL_GROSSTONET

#debug1 show '** USA STATIC CURR GROSS section:        &C.PIN_NUM_GROSSTONET = ' &C.PIN_NUM_GROSSTONET

    Evaluate #GP_PSLP_ORDER_GROSSTONET_INT
    When = 1
            Move &C.CALC_RSLT_VAL_GROSSTONET to #total_earn_cur_GROSSTONET
        Break
    When = 2
            Move &C.CALC_RSLT_VAL_GROSSTONET to #total_fed_tax_gross_cur_GROSSTONET
        Break
    When = 3
            Move &C.CALC_RSLT_VAL_GROSSTONET to #total_taxes_cur_GROSSTONET 
        Break
    When = 4
            Move &C.CALC_RSLT_VAL_GROSSTONET to #total_ded_cur_GROSSTONET
        Break
    When = 5
            Move &C.CALC_RSLT_VAL_GROSSTONET to #net_pay_cur_GROSSTONET
        Break
    End-Evaluate
    

FROM PS_GPUS_PSLP_RSLT C
WHERE C.JOBINSTANCE = #gbl_job_instance AND
C.CAL_RUN_ID        = $gbl_rc_Calendar_Group AND
C.GP_CNTRY_PSLP_ELN = $gbl_GP_CNTRY_PSLP_ELN AND
C.GP_ELN_SET        = $gbl_GP_ELN_SET AND
C.EMPLID = $gbl_tgt_Emplid AND
C.PMT_GRP_ID = #gbl_tgt_Grp_ID AND
C.GPUS_PSLP_ELN_CAT = '60' AND
C.GPUS_PSLP_CURR_YTD = '10' 
AND SEQ_NUM = 10 
AND GP_CNTRY_PSLP_ELN = 'USA' 
AND GP_ELN_SET = 'PSLP' 
GROUP BY C.PIN_NUM, C.RATE_RSLT_VAL, C.GP_PSLP_ORDER, C.GPUS_PSLP_CURR_YTD ORDER BY C.GP_PSLP_ORDER

END-SELECT

end-procedure

!**********************************************************************
!**********************************************************************
!      Get_Gross_To_Net_YTD_Elements
!**********************************************************************
!**********************************************************************
begin-procedure Get_Gross_To_Net_YTD_Elements
#debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Procedure Get_Gross_To_Net_YTD_Elements')

BEGIN-SELECT ON-ERROR=SQL-ERROR
Y.GP_PSLP_ORDER            &Y.GP_PSLP_ORDER_GROSSTONET
    Move &Y.GP_PSLP_ORDER_GROSSTONET to $GP_PSLP_ORDER_GROSSTONET_CHAR
    let #GP_PSLP_ORDER_GROSSTONET_INT = to_number($GP_PSLP_ORDER_GROSSTONET_CHAR)
Y.PIN_NUM             &Y.PIN_NUM_GROSSTONET   
SUM(Y.CALC_RSLT_VAL)       &Y.CALC_RSLT_VAL_GROSSTONET

#debug1 show '** USA STATIC GROSS section:        &Y.PIN_NUM_GROSSTONET = ' &Y.PIN_NUM_GROSSTONET
    Evaluate #GP_PSLP_ORDER_GROSSTONET_INT
    When = 1
                Move &Y.CALC_RSLT_VAL_GROSSTONET to #total_earn_ytd_GROSSTONET
        Break
    When = 2
                Move &Y.CALC_RSLT_VAL_GROSSTONET to #total_fed_tax_gross_ytd_GROSSTONET
        Break
    When = 3
                Move &Y.CALC_RSLT_VAL_GROSSTONET to #total_taxes_ytd_GROSSTONET 
        Break
    When = 4
                Move &Y.CALC_RSLT_VAL_GROSSTONET to #total_ded_ytd_GROSSTONET
        Break
    When = 5
                Move &Y.CALC_RSLT_VAL_GROSSTONET to #net_pay_ytd_GROSSTONET
        Break
    End-Evaluate 

FROM PS_GPUS_PSLP_RSLT Y
WHERE Y.JOBINSTANCE = #gbl_job_instance AND
Y.CAL_RUN_ID        = $gbl_rc_Calendar_Group AND
Y.GP_CNTRY_PSLP_ELN = $gbl_GP_CNTRY_PSLP_ELN AND
Y.GP_ELN_SET        = $gbl_GP_ELN_SET AND
Y.EMPLID = $gbl_tgt_Emplid AND
Y.PMT_GRP_ID = #gbl_tgt_Grp_ID AND
Y.GPUS_PSLP_ELN_CAT = '60' AND
Y.GPUS_PSLP_CURR_YTD = '20' AND
Y.SLICE_END_DT = (SELECT MAX(X.SLICE_END_DT) 
FROM PS_GPUS_PSLP_RSLT X
WHERE X.JOBINSTANCE = #gbl_job_instance AND
X.CAL_RUN_ID        = $gbl_rc_Calendar_Group AND
X.GP_CNTRY_PSLP_ELN = $gbl_GP_CNTRY_PSLP_ELN AND
X.GP_ELN_SET        = $gbl_GP_ELN_SET  AND
X.EMPLID = $gbl_tgt_Emplid AND
X.PMT_GRP_ID = #gbl_tgt_Grp_ID AND
X.GPUS_PSLP_ELN_CAT = '60' AND
X.GPUS_PSLP_CURR_YTD = '20')
GROUP BY Y.PIN_NUM, Y.GP_PSLP_ORDER
ORDER BY Y.GP_PSLP_ORDER

END-SELECT

end-procedure


!**********************************************************************
!**********************************************************************
!      get_pin_name_GROSSTONET
!**********************************************************************
!**********************************************************************
begin-procedure get_pin_name_GROSSTONET(#Pin_num, :$Name)
#debug1 show '** USA STATIC GROSS section: Procedure get_pin_name'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PIN_NM         
    Move &PIN_NM to $Name
FROM PS_GP_PIN
WHERE PIN_NUM = #Pin_num
end-select
#debug1 show '** USA STATIC GROSS section:        #Pin_num = '#Pin_num ' name = ' $Name
end-procedure

!**********************************************************************
!**********************************************************************
!      Print_Gross_To_Net
!**********************************************************************
!**********************************************************************
begin-procedure Print_Gross_To_Net
#debug do Pslp-Proc-Debug-Msg('USA STATIC GROSS section: Procedure Print_Gross_To_Net')

let $title_printed = 'n'
let #title_line_count = {GROSSTONET_STATIC_TITLE_SIZE}
let #title_dtl_diff = #gbl_curr_Section_Nbr_Lines - #gbl_curr_Section_Dtl_Lines

  let #row = #start-section-line-number
     
  columns 3
if #title_dtl_diff > 0
  graphic (#row,1,126) box 1 10 15
  graphic (#row,,126)  box 1 10
  graphic (+1,,126)    box 2 10
else
  graphic (#row,,126)    box 2 10
end-if

  columns 4 22 46 70 92 113

if #title_dtl_diff > 0
  print ''                      (#row,1)
  print $CUR_LBL             (+1,1)
  Print $YTD_LBL                  (+1,1)
else
  print $CUR_LBL             (#row,1)
  Print $YTD_LBL                  (+1,1)
end-if

  next-column
if #title_dtl_diff > 0
  print $TOTAL_GROSS_LBL          (#row,4) bold
  print #total_earn_cur_GROSSTONET          (+1,1) edit 999,999,990.99mi
  print #total_earn_ytd_GROSSTONET      (+1,1) edit 999,999,990.99mi
else
  print #total_earn_cur_GROSSTONET          (#row,1) edit 999,999,990.99mi
  print #total_earn_ytd_GROSSTONET      (+1,1) edit 999,999,990.99mi

end-if

  next-column
if #title_dtl_diff > 0
  print $FED_TAX_GROSS_LBL     (#row,1) bold
  print #total_fed_tax_gross_cur_GROSSTONET     (+1,4) edit 999,999,990.99mi
  print #total_fed_tax_gross_ytd_GROSSTONET        (+1,4) edit 999,999,990.99mi
else
  print #total_fed_tax_gross_cur_GROSSTONET     (#row,4) edit 999,999,990.99mi
  print #total_fed_tax_gross_ytd_GROSSTONET        (+1,4) edit 999,999,990.99
end-if

  next-column
if #title_dtl_diff > 0
  print $TOTAL_TAXES_LBL          (#row,4) bold
  print #total_taxes_cur_GROSSTONET         (+1,2) edit 99,999,990.99mi
  print #total_taxes_ytd_GROSSTONET      (+1,2) edit 99,999,990.99mi
else
  print #total_taxes_cur_GROSSTONET         (#row,2) edit 99,999,990.99mi
  print #total_taxes_ytd_GROSSTONET      (+1,2) edit 99,999,990.99mi
end-if

  next-column
if #title_dtl_diff > 0
  print $TOTAL_DED_LBL      (#row,1) bold
  print #total_ded_cur_GROSSTONET     (+1,4) edit 99,999,990.99mi
  print #total_ded_ytd_GROSSTONET      (+1,4) edit 99,999,990.99mi
else
  print #total_ded_cur_GROSSTONET     (#row,4) edit 99,999,990.99mi
  print #total_ded_ytd_GROSSTONET      (+1,4) edit 99,999,990.99mi
end-if

  next-column
if #title_dtl_diff > 0
  print $NET_PAY_LBL             (#row,8) bold
  print #net_pay_cur_GROSSTONET           (+1,1) edit 999,999,990.99mi
  print #net_pay_ytd_GROSSTONET          (+1,1) edit 999,999,990.99mi
else
  print #net_pay_cur_GROSSTONET           (#row,1) edit 999,999,990.99mi
  print #net_pay_ytd_GROSSTONET          (+1,1) edit 999,999,990.99mi
end-if

End-procedure 


