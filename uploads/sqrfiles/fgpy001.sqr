!***********************************************************************
!  FGPY001:  Create RITS 2812/2812A Interface Files/Reports            *
!***********************************************************************
!***********************************************************************
!                                                                      *
!  Confidentiality Information:                                        *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2007/03/02:13:03:46                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  698735                                              !
!                                                                      *
!***********************************************************************
! 5/10/01...Made some changes to the insert and udpate statements      *
!           on PS_GVT_SVCTRN_TBL. The table structure of this table    *
!           changes as a result of R-JDONOF-EV3JX                      *
!***********************************************************************
!                                                                      *
! 4/09/02  Made changes to accomodate Legislated Requirements.         *
!          Incident #R-BDELA-DT273.  See also #R-SZHANG-UX2HL.         *
!          See comments DT273.                                         *
!***********************************************************************
!                                                                      *
! 6/04/02  Made changes to accomodate Military Deposit Separation.     *
!          Incident #R-GGHERZ-WY4TZ.  See also #R-SZHANG-UX2HL.        *
!          See comments WY4TZ.                                         *
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

begin-report

  do Init-Report
  do Open-rits-files
  do Process-2812-on-cycle
  if $off_cycle_ded = 'Y'
     do Process-2812-off-cycle
  end-if
  do Process-Military-Amounts                                    !WY4TZ
  do Write-2812-records
  do Print-2812-report
  do Process-2812A-on-cycle
  if $off_cycle_ded = 'Y'
      do Process-2812A-off-cycle
  end-if
  do Create-2812a-file-&-report
  do Close-rits-files
  if $mil_dep = 'Y'
    do process-mil-dep-payments
  end-if
  do Update-pay-calendar
  do Commit-Transaction
  if $off_cycle_ded = 'Y'
      do update-pay-deduction
      do Commit-Transaction
  end-if
  do Delete-run-control
  do Stdapi-Term

end-report

begin-heading 9
#Include 'stdhdg03.sqc'
   print '                 '        (4,1,17)

   print 'Payroll Office #:'        (5,1,17)
   print &H1.GVT_AGY_LOC_CODE       (5,+1,8)

   print 'Date Payroll Paid:'       (6,1,18)
   do Format-DateTime(&A2.CHECK_DT, $Payroll_Paid_DT, {DEFDATE}, '', '')
   print $Payroll_Paid_DT           (6,+1,12)

   print 'Payroll Period From:'     (7,1,22)
   do Format-DateTime(&A2.PAY_BEGIN_DT, $Payroll_Per_From, {DEFDATE}, '', '')
   print $Payroll_Per_From          (7,+1,12)

   print ' To:'                     (7,+1,5)
   do Format-DateTime(&A2.PAY_END_DT, $Payroll_Per_To, {DEFDATE}, '', '')
   print $Payroll_Per_To            (7,+1,12)

end-heading

!**************************
begin-procedure Init-Report
!**************************

move 'FGPY001' to $ReportID
move 'RITS 2812/2812A Interface Summary Report' to $ReportTitle

display 'Processing SF2812 and SF2812A Information'

do Init_printer
do Init-DateTime
do Init-Number
do Get-Current-DateTime
do Stdapi-Init

if $Prcs_Process_Instance = ''

   input $run_id            maxlen=3  'Enter Payroll Run ID'  type=char
   input $gvt_pay_period_cd maxlen=3  'Pay Period Code'       type=char
   input $gvt_original_supp maxlen=3  'Original/Supplemental' type=char
   input $gvt_2812_file     maxlen=12 'Enter 2812 file Name'  type=char

   uppercase $Run_ID

else

    do select-parameters
    do Get-RITS-Parameters

end-if

let #c1            = 1
let #c2            = 40
let #c3            = 70
let #c4            = 100
let #enroll_cd_tot = 0


end-procedure     !Init-Report

!******************************
begin-procedure Open-rits-files
!******************************

!****** 2812 File
let $gvt_2812_file = rtrim($gvt_2812_file, ' ')
let $gvt_2812_file = '{IMPORTPREFIX}' || $gvt_2812_file || '{IMPORTSUFFIX}'
open $gvt_2812_file as 1 for-writing record=199:vary


do 2812-Header

end-procedure     !Open-rits-files


!**********************************************************************
begin-procedure 2812-Header
!
!  This is the section writes out new header record as
!  requested by OPM
!
!**********************************************************************



let $file-id                =  'RITS2812'              !DT273
                                                       !DT273
write 1 from $file-id:8                                !DT273
                                                       !DT273
end-procedure                                          !2812-Header

!************************************
begin-procedure Process-2812-on-cycle
!************************************

!******** Define Variables for SF2812 Rec Defns 1-3.

!******** Record Defn 1 Fields.
let $1-1       = '2812'
let $1-2       = '01'
let $1-3       = ' '
let $1-4       = $gvt_pay_period_cd
let $1-5       = $gvt_original_supp
let $1-6       = ' '
let $1-7       = ' '
let $1-8       = ' '
let $1-9-char  = '00000000000'
let #1-9-nbr   = 0
let $1-10-char = '00000000000'
let #1-10-nbr  = 0
let $1-11-char = '00000000000'
let #1-11-nbr  = 0
let $1-12-char = '00000000000'
let #1-12-nbr  = 0
let $1-13-char = '00000000000'
let #1-13-nbr  = 0
let $1-14-char = '00000000000'
let #1-14-nbr  = 0
let $1-15-char = '00000000000'
let #1-15-nbr  = 0
let $1-16-char = '00000000000'
let #1-16-nbr  = 0
let $1-17-char = '00000000000'
let #1-17-nbr  = 0

!******** Record Defn 2 Fields.
let $2-1       = '2812'
let $2-2       = '02'
let $2-3-char  = '00000000000'
let $2-3-nbr   = 0
let $2-4-char  = '00000000000'
let $2-4-nbr   = 0
let $2-5-char  = '00000000000'
let $2-5-nbr   = 0
let $2-6-char  = '00000000000'
let $2-6-nbr   = 0
let $2-7-char  = '00000000000'
let $2-7-nbr   = 0
let $2-8-char  = '00000000000'
let $2-8-nbr   = 0
let $2-9-char  = '00000000000'
let $2-9-nbr   = 0
let $2-10-char = '000000000.00 '
let $2-10-nbr  = 0
let $2-11-char = '00000000000'
let $2-11-nbr  = 0
let $2-12-char = '00000000000'
let $2-12-nbr  = 0
let $2-13-char = '00000000000'
let $2-13-nbr  = 0
let $2-14-char = '00000000000'
let $2-14-nbr  = 0
let $2-15-char = '00000000000'
let $2-15-nbr  = 0
let $2-16-char = '00000000000'
let $2-16-nbr  = 0

!******** Record Defn 3 Fields.
let $3-1  = '2812'
let $3-2  = '03'
let $3-3-char  = '00000000000'
let $3-3-nbr   = 0
let $3-4-char  = '00000000000'
let $3-4-nbr   = 0
let $3-5-char  = '00000000000'
let $3-5-nbr   = 0
let $3-6-char  = '00000000000'
let $3-6-nbr   = 0
let $3-7-char  = '00000000000'
let $3-7-nbr   = 0
let $3-8-char  = '00000000000'
let $3-8-nbr   = 0
let $3-9-char  = '00000000000'
let $3-9-nbr   = 0
let $3-10-char = '00000000000'
let $3-10-nbr  = 0
let $3-11-char = '00000000000'
let $3-11-nbr  = 0
let $3-12-char = '00000000000'
let $3-12-nbr  = 0
let $3-13-char = '00000000000'
let $3-13-nbr  = 0
let $3-14-char = '00000000000'
let $3-14-nbr  = 0
let $3-15-char = '00000000000'
let $3-15-nbr  = 0
let $3-16-char = '00000000000'
let $3-16-nbr  = 0
let $3-17-char = '0000000000000'
let $3-17-nbr  = 0
let $3-18-char = '0000000000000'
let $3-18-nbr  = 0
let $3-19-char = '0000000000000'
let $3-19-nbr  = 0

!******** Retrieve On-Cycle Deductions

begin-select

A1.COMPANY
A1.PAYGROUP
A1.DEDCD
A1.DED_CLASS
A1.PLAN_TYPE
SUM(A1.DED_CUR)  &DED_SUM1A
SUM(A1.DED_CUR_PAYBK) &DED_SUM2A
SUM(A1.DED_CUR_REFUND) &DED_SUM3A
SUM(A1.DED_NOT_TAKEN) &DED_SUM4A
A2.PAY_END_DT
A2.PAY_BEGIN_DT
A2.CHECK_DT

   let $dedcd         = &A1.DEDCD
   let $ded_class     = &A1.DED_CLASS
   let $plan_type     = &A1.PLAN_TYPE
   let $pay_end_dt    = &A2.PAY_END_DT
   let $pay_begin_dt  = &A2.PAY_BEGIN_DT
   let #deduction_sum = (&DED_SUM1A - &DED_SUM2A - &DED_SUM3A)
   let #deduction_sum2= (&DED_SUM1A + &DED_SUM4A - &DED_SUM2A - &DED_SUM3A)

   let $date_work = datetostr(&A2.CHECK_DT,'MMDDYYYY')
   let $1-6       = substr($date_work,1,4)||substr($date_work,7,2)

   let $date_work = datetostr(&A2.PAY_BEGIN_DT,'MMDDYYYY')
   let $1-7       = substr($date_work,1,4)||substr($date_work,7,2)

   let $date_work = datetostr(&A2.PAY_END_DT,'MMDDYYYY')
   let $1-8       = substr($date_work,1,4)||substr($date_work,7,2)

   do Process-2812-deduction

FROM  PS_PAY_DEDUCTION A1,
      PS_PAY_CALENDAR A2

WHERE A2.RUN_ID          = $run_id
AND   A2.PAY_CONFIRM_RUN = 'Y'
AND   A2.GVT_RITS_RUN    = 'N'
AND   A1.COMPANY         = A2.COMPANY
AND   A1.PAYGROUP        = A2.PAYGROUP
AND   A1.PAY_END_DT      = A2.PAY_END_DT
AND   A1.OFF_CYCLE       = 'N'

GROUP BY A1.COMPANY,
         A1.PAYGROUP,
         A1.DEDCD,
         A1.DED_CLASS,
         A1.PLAN_TYPE,
         A2.PAY_END_DT,
         A2.PAY_BEGIN_DT,
         A2.CHECK_DT

end-select

    !SHOW 'PROCESSING FOR ON-CYCLE'

    let $offcycle_rtr = 'N'

    do Process-retirement-offset

!**** Retrieve GVT_AGY_LOC_CODE and move it into $1-3

begin-select

H1.GVT_AGY_LOC_CODE

   let $1-3 = &H1.GVT_AGY_LOC_CODE

FROM PS_COMPANY_TBL H,
     PS_GVT_INTRFC_INFO H1

WHERE H.COMPANY    = &A1.COMPANY
AND   H.EFF_STATUS = 'A'
AND   H1.COMPANY   = &A1.COMPANY
AND   H1.EFFDT     = (SELECT MAX(H2.EFFDT)
                      FROM   PS_GVT_INTRFC_INFO H2
                      WHERE  H2.COMPANY  = H1.COMPANY
                      AND    H2.EFFDT   <= $PAY_END_DT)

end-select

end-procedure    !Process-2812-on-cycle

!*************************************
begin-procedure Process-2812-off-cycle
!*************************************

!******** Retrieve Off-Cycle Deductions

begin-select

B1.DEDCD
B1.DED_CLASS
B1.PLAN_TYPE
SUM(B1.DED_CUR)        &DED_SUM1B
SUM(B1.DED_CUR_PAYBK)  &DED_SUM2B
SUM(B1.DED_CUR_REFUND) &DED_SUM3B
SUM(B1.DED_NOT_TAKEN)  &DED_SUM4B


   let $dedcd         = &B1.DEDCD
   let $ded_class     = &B1.DED_CLASS
   let $plan_type     = &B1.PLAN_TYPE
   let #deduction_sum = (&DED_SUM1B - &DED_SUM2B - &DED_SUM3B)
   let #deduction_sum2 = (&DED_SUM1B + &DED_SUM4B - &DED_SUM2B - &DED_SUM3B)

   do Process-2812-deduction

FROM  PS_PAY_DEDUCTION B1,
      PS_PAY_CALENDAR B2

WHERE B2.RUN_ID          = $run_id
AND   B2.PAY_CONFIRM_RUN = 'Y'
AND   B1.COMPANY         = B2.COMPANY
AND   B1.PAYGROUP        = B2.PAYGROUP
AND   B1.PAY_END_DT     <= B2.PAY_END_DT
AND   B1.OFF_CYCLE       = 'Y'
AND   B1.GVT_RITS_DT     IS NULL

GROUP BY B1.DEDCD,
         B1.DED_CLASS,
         B1.PLAN_TYPE

end-select

   !SHOW 'PROCESSING FOR OFF-CYCLE'

   let $offcycle_rtr = 'Y'

   do Process-retirement-offset

end-procedure     !Process-2812-off-cycle
!*************************************
begin-procedure Process-2812-deduction
!*************************************

!******** Only process RITS Deductions - GVT_DIST_DEST = 'R'

begin-select

E1.GVT_REPORTING_CD

   do Move-to-2812-extract-field

FROM PS_DEDUCTION_TBL E1

WHERE E1.PLAN_TYPE     = $plan_type
AND   E1.DEDCD         = $dedcd
AND   E1.GVT_DIST_DEST = 'R'
AND   E1.EFFDT         = (SELECT MAX(E2.EFFDT)
                          FROM   PS_DEDUCTION_TBL E2
                          WHERE  E2.PLAN_TYPE = E1.PLAN_TYPE
                          AND    E2.DEDCD     = E1.DEDCD
                          AND    E2.EFFDT    <= $PAY_END_DT)

end-select

end-procedure     !Process-2812-deduction


!*****************************************
begin-procedure Move-to-2812-extract-field
!*****************************************

!* Move value to appropriate Field based on Report CD & DED_CLASS

evaluate $ded_class

    when = 'A'
    when = 'B'

        evaluate &E1.GVT_REPORTING_CD

            when = 'BA'
                let #1-9-nbr = #1-9-nbr + #deduction_sum

            when = 'ST'
                let #1-11-nbr = #1-11-nbr + #deduction_sum

            when = 'AD'
                let #1-12-nbr = #1-12-nbr + #deduction_sum

            when = 'FA'
                let #1-13-nbr = #1-13-nbr + #deduction_sum

            when = 'PR'
                let #1-14-nbr = #1-14-nbr + #deduction_sum

            when = 'FH'
                let #2-3-nbr = #2-3-nbr + #deduction_sum2

            when = 'CS'
                let #2-10-nbr = #2-10-nbr + #deduction_sum

            when = 'FE'
                let #3-3-nbr = #3-3-nbr + #deduction_sum

            when = 'FR'
                let #3-5-nbr = #3-5-nbr + #deduction_sum

            when = 'FS'
                let #3-7-nbr = #3-7-nbr + #deduction_sum

        end-evaluate !&E1.GVT_REPORTING_CD

        break

    when-other

        evaluate &E1.GVT_REPORTING_CD

            when = 'BA'
                let #1-10-nbr = #1-10-nbr + #deduction_sum

            when = 'FH'
                let #2-4-nbr = #2-4-nbr + #deduction_sum2

            when = 'CS'
                let #2-11-nbr = #2-11-nbr + #deduction_sum

    !        when = 'CO'
    !            let #2-12-nbr = #2-12-nbr + #deduction_sum

            when = 'FE'
                let #3-4-nbr = #3-4-nbr + #deduction_sum

            when = 'FR'
                let #3-6-nbr = #3-6-nbr + #deduction_sum

            when = 'FS'
                let #3-8-nbr = #3-8-nbr + #deduction_sum

    !        when = 'FO'
    !            let #3-9-nbr = #3-9-nbr + #deduction_sum

       end-evaluate !&E1.GVT_REPORTING_CD

end-evaluate     !$DED_CLASS

end-procedure   !Move-to-2812-extract-field

!****************************************
begin-procedure Process-retirement-offset
!****************************************

 if $offcycle_rtr = 'N'
  let #gvt_annuity_amt_rtr = 0
  let #gvt_annuity_amt_FERS_rtr = 0
  let #gvt_annuity_amt_CSRS_rtr = 0
 end-if

BEGIN-SELECT DISTINCT
A.COMPANY
F.PAY_END_DT
F.PAY_BEGIN_DT
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.EFFSEQ
A.GVT_RETIRE_PLAN
A.GVT_ANNUITY_OFFSET
A.DEPTID
B.NAME
B.BIRTHDATE
C.HIRE_DT
C.REHIRE_DT
C.TERMINATION_DT
D.NATIONAL_ID
E.REG_PAY_HRS
X.XLATSHORTNAME

  let $company_rtr         = &A.COMPANY
  let $pay_end_dt_rtr      = &F.PAY_END_DT
  let $emplid_rtr          = &A.EMPLID
  let $gvt_retire_plan_rtr = &A.GVT_RETIRE_PLAN
  let #reg_pay_hrs_rtr     = &E.REG_PAY_HRS

  do process-earnings-rtr

  let #gvt_annuity_amt_rtr = #TEMP3 * #reg_pay_hrs_rtr


  Evaluate $gvt_retire_plan_rtr
     When = 'K'
     When = 'L'
     When = 'M'
     When = 'N'

       let #gvt_annuity_amt_FERS_rtr = #gvt_annuity_amt_FERS_rtr
                                       + #gvt_annuity_amt_rtr
       break
     When = '1'
     When = '6'
     When = 'C'
     When = 'E'
     When = 'R'
     When = 'T'

       let #gvt_annuity_amt_CSRS_rtr = #gvt_annuity_amt_CSRS_rtr
                                       + #gvt_annuity_amt_rtr
       break


  End-Evaluate

  move #gvt_annuity_amt_CSRS_rtr to #2-12-nbr
  move #gvt_annuity_amt_FERS_rtr to #3-9-nbr

  !SHOW '#gvt_annuity_amt_CSRS_rtr:'#gvt_annuity_amt_CSRS_rtr
  !SHOW '#gvt_annuity_amt_FERS_rtr:'#gvt_annuity_amt_FERS_rtr

FROM
  PS_GVT_JOB A,
  PS_GVT_PERS_DATA B,
  PS_GVT_EMPLOYMENT C,
  PS_GVT_PERS_NID D,
  PS_PAY_EARNINGS E,
  PS_PAY_CALENDAR F,
  PSXLATITEM X
WHERE A.GVT_ANN_IND IN ('1', '4', '5', 'A', 'C', 'E')
  AND A.EFFDT =
      (SELECT MAX(A1.EFFDT) FROM PS_GVT_JOB A1
      WHERE A1.EMPLID = A.EMPLID
        AND A1.EMPL_RCD = A.EMPL_RCD
        AND A1.EFFDT <= F.PAY_END_DT)
  AND A.EFFSEQ =
      (SELECT MAX(A2.EFFSEQ) FROM PS_GVT_JOB A2
      WHERE A2.EMPLID = A.EMPLID
        AND A2.EMPL_RCD = A.EMPL_RCD
        AND A2.GVT_ANN_IND IN ('1', '4', '5', 'A', 'C', 'E')
        AND A2.EFFDT = A.EFFDT)
  AND B.EMPLID = A.EMPLID
  AND B.EMPL_RCD = A.EMPL_RCD
  AND B.EFFDT = A.EFFDT
  AND B.EFFSEQ = A.EFFSEQ
  AND C.EMPLID = A.EMPLID
  AND C.EMPL_RCD = A.EMPL_RCD
  AND C.EFFDT = A.EFFDT
  AND C.EFFSEQ = A.EFFSEQ
  AND D.EMPLID = A.EMPLID
  AND D.EMPL_RCD = A.EMPL_RCD
  AND D.EFFDT = A.EFFDT
  AND D.EFFSEQ = A.EFFSEQ
  AND E.EMPLID = A.EMPLID
  AND E.COMPANY = A.COMPANY
  AND E.PAYGROUP = A.PAYGROUP
  AND E.REG_PAY_HRS <> 0
  AND X.FIELDNAME = 'GVT_WORK_SCHED'
  AND X.EFF_STATUS = 'A'
  AND X.FIELDVALUE = A.GVT_WORK_SCHED
  AND X.EFFDT =
      (SELECT MAX(X1.EFFDT) FROM PSXLATITEM X1
      WHERE X1.FIELDNAME = 'GVT_WORK_SCHED'
        AND X1.EFF_STATUS = 'A'
        AND X1.FIELDVALUE = A.GVT_WORK_SCHED
        AND X1.EFFDT <= A.EFFDT)
  AND F.COMPANY = &A1.COMPANY
  AND F.COMPANY = A.COMPANY
  AND F.PAY_END_DT = &A2.PAY_END_DT
  AND F.PAY_END_DT = E.PAY_END_DT
  AND E.OFF_CYCLE  = $offcycle_rtr
END-SELECT


end-procedure Process-retirement-offset


!****************************************
begin-procedure process-earnings-rtr
!****************************************

 let #temp1 = 0
 let #temp2 = 0
 let #temp3 = 0

BEGIN-SELECT
MIN(HOURLY_RT) &TEMP1

   let #temp1 = &TEMP1


FROM PS_PAY_EARNINGS
WHERE COMPANY  =  $company_rtr
AND PAY_END_DT =  $pay_end_dt_rtr
AND EMPLID     =  $emplid_rtr
END-SELECT

BEGIN-SELECT
MAX(HOURLY_RT) &TEMP2


  let #temp2 = &TEMP2

FROM PS_PAY_EARNINGS
WHERE COMPANY  =  $company_rtr
AND PAY_END_DT =  $pay_end_dt_rtr
AND EMPLID     =  $emplid_rtr
END-SELECT

 let #temp3 = #temp2 - #temp1

end-procedure process-earnings-rtr

!*********************************
begin-procedure Write-2812-records
!*********************************

!***** Calculate Total Fields
let #1-15-nbr = #1-9-nbr + #1-11-nbr + #1-12-nbr + #1-13-nbr + #1-14-nbr
let #1-16-nbr = #1-10-nbr
let #1-17-nbr = #1-15-nbr + #1-16-nbr

let #2-7-nbr  = #2-3-nbr + #2-5-nbr
let #2-8-nbr  = #2-4-nbr + #2-6-nbr
let #2-9-nbr  = #2-7-nbr + #2-8-nbr

!let #2-14-nbr = #2-10-nbr + #2-13-nbr
!let #2-15-nbr = #2-11-nbr + #2-12-nbr
let #2-14-nbr = #2-10-nbr + #2-13-nbr + #2-12-nbr
let #2-15-nbr = #2-11-nbr
let #2-16-nbr = #2-14-nbr + #2-15-nbr

!let #3-11-nbr = #3-3-nbr + #3-5-nbr + #3-7-nbr + #3-10-nbr
!let #3-12-nbr = #3-4-nbr + #3-6-nbr + #3-8-nbr + #3-9-nbr
let #3-11-nbr = #3-3-nbr + #3-5-nbr + #3-7-nbr + #3-10-nbr + #3-9-nbr
let #3-12-nbr = #3-4-nbr + #3-6-nbr + #3-8-nbr
let #3-13-nbr = #3-11-nbr + #3-12-nbr
let #3-14-nbr = #2-14-nbr + #3-11-nbr
let #3-15-nbr = #2-15-nbr + #3-12-nbr
let #3-16-nbr = #3-14-nbr + #3-15-nbr
let #3-17-nbr = #1-15-nbr + #2-7-nbr + #3-14-nbr
let #3-18-nbr = #1-16-nbr + #2-8-nbr + #3-15-nbr
let #3-19-nbr = #3-17-nbr + #3-18-nbr

do Init-Number

do Format-Number(#1-9-nbr, $1-9-char,'099999999V99mi')
let $temp1 = substr($1-9-char,11,2)
do overpunch($temp1, $temp2)
let $1-9-char = substr($1-9-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-10-nbr, $1-10-char,'099999999V99mi')
let $temp1 = substr($1-10-char,11,2)
do overpunch($temp1, $temp2)
let $1-10-char = substr($1-10-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-11-nbr, $1-11-char,'099999999V99mi')
let $temp1 = substr($1-11-char,11,2)
do overpunch($temp1, $temp2)
let $1-11-char = substr($1-11-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-12-nbr, $1-12-char, '099999999V99mi')
let $temp1 = substr($1-12-char,11,2)
do overpunch($temp1, $temp2)
let $1-12-char = substr($1-12-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-13-nbr, $1-13-char, '099999999V99mi')
let $temp1 = substr($1-13-char,11,2)
do overpunch($temp1, $temp2)
let $1-13-char = substr($1-13-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-14-nbr, $1-14-char, '099999999V99mi')
let $temp1 = substr($1-14-char,11,2)
do overpunch($temp1, $temp2)
let $1-14-char = substr($1-14-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-15-nbr, $1-15-char, '099999999V99mi')
let $temp1 = substr($1-15-char,11,2)
do overpunch($temp1, $temp2)
let $1-15-char = substr($1-15-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-16-nbr, $1-16-char, '099999999V99mi')
let $temp1 = substr($1-16-char,11,2)
do overpunch($temp1, $temp2)
let $1-16-char = substr($1-16-char,1,10) || rtrim($temp2,' ')

do Format-Number(#1-17-nbr, $1-17-char, '099999999V99mi')
let $temp1 = substr($1-17-char,11,2)
do overpunch($temp1, $temp2)
let $1-17-char = substr($1-17-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-3-nbr,  $2-3-char,  '099999999V99mi')
let $temp1 = substr($2-3-char,11,2)
do overpunch($temp1, $temp2)
let $2-3-char = substr($2-3-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-4-nbr,  $2-4-char,  '099999999V99mi')
let $temp1 = substr($2-4-char,11,2)
do overpunch($temp1, $temp2)
let $2-4-char = substr($2-4-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-5-nbr,  $2-5-char,  '099999999V99mi')
let $temp1 = substr($2-5-char,11,2)
do overpunch($temp1, $temp2)
let $2-5-char = substr($2-5-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-6-nbr,  $2-6-char,  '099999999V99mi')
let $temp1 = substr($2-6-char,11,2)
do overpunch($temp1, $temp2)
let $2-6-char = substr($2-6-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-7-nbr,  $2-7-char,  '099999999V99mi')
let $temp1 = substr($2-7-char,11,2)
do overpunch($temp1, $temp2)
let $2-7-char = substr($2-7-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-8-nbr,  $2-8-char,  '099999999V99mi')
let $temp1 = substr($2-8-char,11,2)
do overpunch($temp1, $temp2)
let $2-8-char = substr($2-8-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-9-nbr,  $2-9-char,  '099999999V99mi')
let $temp1 = substr($2-9-char,11,2)
do overpunch($temp1, $temp2)
let $2-9-char = substr($2-9-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-10-nbr, $2-10-char, '099999999V99mi')
let $temp1 = substr($2-10-char,11,2)
do overpunch($temp1, $temp2)
let $2-10-char = substr($2-10-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-11-nbr, $2-11-char, '099999999V99mi')
let $temp1 = substr($2-11-char,11,2)
do overpunch($temp1, $temp2)
let $2-11-char = substr($2-11-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-12-nbr, $2-12-char, '099999999V99mi')
let $temp1 = substr($2-12-char,11,2)
do overpunch($temp1, $temp2)
let $2-12-char = substr($2-12-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-13-nbr, $2-13-char, '099999999V99mi')
let $temp1 = substr($2-13-char,11,2)
do overpunch($temp1, $temp2)
let $2-13-char = substr($2-13-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-14-nbr, $2-14-char, '099999999V99mi')
let $temp1 = substr($2-14-char,11,2)
do overpunch($temp1, $temp2)
let $2-14-char = substr($2-14-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-15-nbr, $2-15-char, '099999999V99mi')
let $temp1 = substr($2-15-char,11,2)
do overpunch($temp1, $temp2)
let $2-15-char = substr($2-15-char,1,10) || rtrim($temp2,' ')

do Format-Number(#2-16-nbr, $2-16-char, '099999999V99mi')
let $temp1 = substr($2-16-char,11,2)
do overpunch($temp1, $temp2)
let $2-16-char = substr($2-16-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-3-nbr,  $3-3-char,  '099999999V99mi')
let $temp1 = substr($3-3-char,11,2)
do overpunch($temp1, $temp2)
let $3-3-char = substr($3-3-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-4-nbr,  $3-4-char,  '099999999V99mi')
let $temp1 = substr($3-4-char,11,2)
do overpunch($temp1, $temp2)
let $3-4-char = substr($3-4-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-5-nbr,  $3-5-char,  '099999999V99mi')
let $temp1 = substr($3-5-char,11,2)
do overpunch($temp1, $temp2)
let $3-5-char = substr($3-5-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-6-nbr,  $3-6-char,  '099999999V99mi')
let $temp1 = substr($3-6-char,11,2)
do overpunch($temp1, $temp2)
let $3-6-char = substr($3-6-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-7-nbr,  $3-7-char,  '099999999V99mi')
let $temp1 = substr($3-7-char,11,2)
do overpunch($temp1, $temp2)
let $3-7-char = substr($3-7-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-8-nbr,  $3-8-char,  '099999999V99mi')
let $temp1 = substr($3-8-char,11,2)
do overpunch($temp1, $temp2)
let $3-8-char = substr($3-8-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-9-nbr,  $3-9-char,  '099999999V99mi')
let $temp1 = substr($3-9-char,11,2)
do overpunch($temp1, $temp2)
let $3-9-char = substr($3-9-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-10-nbr, $3-10-char, '099999999V99mi')
let $temp1 = substr($3-10-char,11,2)
do overpunch($temp1, $temp2)
let $3-10-char = substr($3-10-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-11-nbr, $3-11-char, '099999999V99mi')
let $temp1 = substr($3-11-char,11,2)
do overpunch($temp1, $temp2)
let $3-11-char = substr($3-11-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-12-nbr, $3-12-char, '099999999V99mi')
let $temp1 = substr($3-12-char,11,2)
do overpunch($temp1, $temp2)
let $3-12-char = substr($3-12-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-13-nbr, $3-13-char, '099999999V99mi')
let $temp1 = substr($3-13-char,11,2)
do overpunch($temp1, $temp2)
let $3-13-char = substr($3-13-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-14-nbr, $3-14-char, '099999999V99mi')
let $temp1 = substr($3-14-char,11,2)
do overpunch($temp1, $temp2)
let $3-14-char = substr($3-14-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-15-nbr, $3-15-char, '099999999V99mi')
let $temp1 = substr($3-15-char,11,2)
do overpunch($temp1, $temp2)
let $3-15-char = substr($3-15-char,1,10) || rtrim($temp2,' ')

do Format-Number(#3-16-nbr, $3-16-char, '099999999V99mi')
let $temp1 = substr($3-16-char,11,2)
do overpunch($temp1, $temp2)
let $3-16-char = substr($3-16-char,1,10) || rtrim($temp2,' ')


do Format-Number(#3-17-nbr, $3-17-char, '09999999999V99mi')
let $temp1 = substr($3-17-char,13,2)
do overpunch($temp1, $temp2)
let $3-17-char = substr($3-17-char,1,12) || rtrim($temp2,' ')
do Format-Number(#3-18-nbr, $3-18-char, '09999999999V99mi')
let $temp1 = substr($3-18-char,13,2)
do overpunch($temp1, $temp2)
let $3-18-char = substr($3-18-char,1,12) || rtrim($temp2,' ')

do Format-Number(#3-19-nbr, $3-19-char, '09999999999V99mi')
let $temp1 = substr($3-19-char,13,2)
do overpunch($temp1, $temp2)
let $3-19-char = substr($3-19-char,1,12) || rtrim($temp2,' ')


write 1 from $1-1:4
             $1-2:2
             $1-3:8
             $1-4:3
             $1-5:1
             $1-6:6
             $1-7:6
             $1-8:6
             $1-9-char:11
             $1-10-char:11
             $1-11-char:11
             $1-12-char:11
             $1-13-char:11
             $1-14-char:11
             $1-15-char:11
             $1-16-char:11
             $1-17-char:11

write 1 from $2-1:4
             $2-2:2
             $2-3-char:11
             $2-4-char:11
             $2-5-char:11
             $2-6-char:11
             $2-7-char:11
             $2-8-char:11
             $2-9-char:11
             $2-10-char:11
             $2-11-char:11
             $2-12-char:11
             $2-13-char:11
             $2-14-char:11
             $2-15-char:11
             $2-16-char:11

write 1 from $3-1:4
             $3-2:2
             $3-3-char:11
             $3-4-char:11
             $3-5-char:11
             $3-6-char:11
             $3-7-char:11
             $3-8-char:11
             $3-9-char:11
             $3-10-char:11
             $3-11-char:11
             $3-12-char:11
             $3-13-char:11
             $3-14-char:11
             $3-15-char:11
             $3-16-char:11
             $3-17-char:13
             $3-18-char:13
             $3-19-char:13

end-procedure       !Write-2812-file


!********************************
begin-procedure Print-2812-report
!********************************

!****** Print 2812 page

print 'Benefit Category'           (1,1,16)
print '    Withholdings'           (1,34,16)
print '   Contributions'           (1,64,16)
print '       Total'               (1,94,12)
print '--------------------'       (2,34,20)
print '--------------------'       (2,64,20)
print '--------------------'       (2,94,20)

print 'LIFE INSURANCE'             (3,1,14)
print ' - Basic Life'              (5,1,14)
print #1-9-nbr                     (5,#c2,15)   edit 999,999,999.99mi
print #1-10-nbr                    (5,#c3,15)   edit 999,999,999.99mi
print ' - Standard - Option A'     (7,1,22)
print #1-11-nbr                    (7,#c2,15)   edit 999,999,999.99mi
print ' - Additional - Option B'   (9,1,24)
print #1-12-nbr                    (9,#c2,15)   edit 999,999,999.99mi
print ' - Family - Option C'       (11,1,20)
print #1-13-nbr                    (11,#c2,15)  edit 999,999,999.99mi
print ' - Post-Retirement'         (13,1,18)
print #1-14-nbr                    (13,#c2,15)  edit 999,999,999.99mi
print ' - Total Life Insurance'    (15,1,24)
print #1-15-nbr                    (15,#c2,15)  edit 999,999,999.99mi
print #1-16-nbr                    (15,#c3,15)  edit 999,999,999.99mi
print #1-17-nbr                    (15,#c4,15)  edit 999,999,999.99mi

print 'HEALTH BENEFITS'            (18,1,15)
print ' - Regular'                 (20,1,10)
print #2-3-nbr                     (20,#c2,15)  edit 999,999,999.99mi
print #2-4-nbr                     (20,#c3,15)  edit 999,999,999.99mi
print ' - Total Health Benefits'   (22,1,24)
print #2-7-nbr                     (22,#c2,15)  edit 999,999,999.99mi
print #2-8-nbr                     (22,#c3,15)  edit 999,999,999.99mi
print #2-9-nbr                     (22,#c4,15)  edit 999,999,999.99mi

print 'RETIREMENT'                 (25,1,10)
print ' CSRS'                      (26,1,5)
print ' - All Categories'          (28,1,17)
print #2-10-nbr                    (28,#c2,15)  edit 999,999,999.99mi
print #2-11-nbr                    (28,#c3,15)  edit 999,999,999.99mi
print ' - Total Annuity Amount'    (30,1,23)
print '   CSRS'                    (31,1,9)
!print #2-12-nbr                    (31,#c3,15)  edit 999,999,999.99mi
print #2-12-nbr                    (31,#c2,15)  edit 999,999,999.99mi
print ' - Military & Civilian'     (33,1,22)
print '   Service Credit'          (34,1,17)
print #2-13-nbr                    (34,#c2,15)  edit 999,999,999.99mi
print ' FERS'                      (36,1,5)
print ' - Regular'                 (38,1,10)
print #3-3-nbr                     (38,#c2,15)  edit 999,999,999.99mi
print #3-4-nbr                     (38,#c3,15)  edit 999,999,999.99mi
print ' - Military Reserve'        (40,1,19)
print '   Technicians'             (41,1,14)
print #3-5-nbr                     (41,#c2,15)  edit 999,999,999.99mi
print #3-6-nbr                     (41,#c3,15)  edit 999,999,999.99mi
print ' - Special'                 (43,1,10)
print #3-7-nbr                     (43,#c2,15)  edit 999,999,999.99mi
print #3-8-nbr                     (43,#c3,15)  edit 999,999,999.99mi
!print ' - Salary Offset -'         (45,1,18)
!print '   Reemployed Annuitants'   (45,1,26)
print ' - Total Annuity Amount'    (45,1,23)
print '   FERS'                    (46,1,9)
!print #3-9-nbr                     (45,#c3,15)  edit 999,999,999.99mi
print #3-9-nbr                     (46,#c2,15)  edit 999,999,999.99mi
print ' - Military Deposit'        (48,1,19)
print #3-10-nbr                    (48,#c2,15)  edit 999,999,999.99mi
print ' Total Retirement'          (50,1,17)
print #3-14-nbr                    (50,#c2,15)  edit 999,999,999.99mi
print #3-15-nbr                    (50,#c3,15)  edit 999,999,999.99mi
print #3-16-nbr                    (50,#c4,15)  edit 999,999,999.99mi
print 'Grand Total'                (53,1,11)
print #3-17-nbr                    (53,37,17)   edit 99,999,999,999.99mi
print #3-18-nbr                    (53,67,17)   edit 99,999,999,999.99mi
print #3-19-nbr                    (53,97,17)   edit 99,999,999,999.99mi

end-procedure     !Print-2812-report

!**************************************
begin-procedure Process-2812A-on-cycle
!**************************************

!******* Create Array to hold FEHB Transactions.
create-array name=fehb_array size = 6000
             field=enrollment_code:char
             field=covrg_cd_1_amt:number
             field=covrg_cd_1_cnt:number
             field=covrg_cd_2_amt:number
             field=covrg_cd_2_cnt:number
             field=covrg_cd_3_amt:number
             field=covrg_cd_3_cnt:number
             field=covrg_cd_4_amt:number
             field=covrg_cd_4_cnt:number
             field=covrg_cd_5_amt:number
             field=covrg_cd_5_cnt:number

!******** Retrieve FEHB Deductions

begin-select

C1A.DEDCD
C1A.DED_CLASS
C1A.PLAN_TYPE
C1A.DED_CUR
C1A.DED_NOT_TAKEN
C1A.BENEFIT_PLAN
C1A.OFF_CYCLE
C2A.EMPLID
C2A.EMPL_RCD

    let $dedcd         = &C1A.DEDCD
    let $ded_class     = &C1A.DED_CLASS
    let $plan_type     = &C1A.PLAN_TYPE
    let #ded_cur       = &C1A.DED_CUR
    let #ded_not_taken = &C1A.DED_NOT_TAKEN
    let $emplid        = &C2A.EMPLID
    let #empl_rcd      = &C2A.EMPL_RCD
    let $benefit_plan  = &C1A.BENEFIT_PLAN

    do Get-coverage-cd

FROM  PS_PAY_CALENDAR CAL2,
      PS_PAY_DEDUCTION C1A,
      PS_PAY_CHECK C2A

WHERE CAL2.RUN_ID     = $run_id
AND   C2A.COMPANY     = CAL2.COMPANY
AND   C2A.PAYGROUP    = CAL2.PAYGROUP
AND   C2A.PAY_END_DT  = CAL2.PAY_END_DT
AND   C2A.OFF_CYCLE   = 'N'
AND   C2A.COMPANY     = C1A.COMPANY
AND   C2A.PAYGROUP    = C1A.PAYGROUP
AND   C2A.PAY_END_DT  = C1A.PAY_END_DT
AND   C2A.OFF_CYCLE   = C1A.OFF_CYCLE
AND   C2A.PAGE_NUM      = C1A.PAGE_NUM
AND   C2A.LINE_NUM       = C1A.LINE_NUM
AND   EXISTS (SELECT 'X'
              FROM PS_DEDUCTION_TBL D1A
              WHERE D1A.GVT_DIST_DEST    = 'R'
              AND   D1A.GVT_REPORTING_CD = 'FH'
              AND   D1A.DEDCD            = C1A.DEDCD
              AND   D1A.EFFDT            = (SELECT MAX(D2A.EFFDT)
                                            FROM   PS_DEDUCTION_TBL D2A
                                            WHERE  D2A.PLAN_TYPE = D1A.PLAN_TYPE
                                            AND    D2A.EFFDT    <= C1A.PAY_END_DT
                                            AND    D2A.DEDCD     = D1A.DEDCD))
ORDER BY C1A.BENEFIT_PLAN

end-select

end-procedure     !Process-2812A-on-cycle

!*************************************
begin-procedure Process-2812A-off-cycle
!*************************************

begin-select

C1B.DEDCD
C1B.DED_CLASS
C1B.PLAN_TYPE
C1B.DED_CUR
C1B.DED_NOT_TAKEN
C1B.BENEFIT_PLAN
C1B.OFF_CYCLE
C2B.EMPLID
C2B.EMPL_RCD

    let $dedcd         = &C1B.DEDCD
    let $ded_class     = &C1B.DED_CLASS
    let $plan_type     = &C1B.PLAN_TYPE
    let #ded_cur       = &C1B.DED_CUR
    let #ded_not_taken = &C1B.DED_NOT_TAKEN
    let $emplid        = &C2B.EMPLID
    let #empl_rcd      = &C2B.EMPL_RCD
    let $benefit_plan  = &C1B.BENEFIT_PLAN

    do Get-coverage-cd

FROM  PS_PAY_CALENDAR CAL3,
      PS_PAY_DEDUCTION C1B,
      PS_PAY_CHECK C2B

WHERE CAL3.RUN_ID         = $run_id
AND   C2B.COMPANY         = CAL3.COMPANY
AND   C2B.PAYGROUP        = CAL3.PAYGROUP
AND   C2B.PAY_END_DT     <= CAL3.PAY_END_DT
AND   C2B.OFF_CYCLE       = 'Y'
AND   C2B.PAYCHECK_STATUS IN ('F','R')
AND   C2B.COMPANY         = C1B.COMPANY
AND   C2B.PAYGROUP        = C1B.PAYGROUP
AND   C2B.PAY_END_DT      = C1B.PAY_END_DT
AND   C2B.OFF_CYCLE       = C1B.OFF_CYCLE
AND   C2B.PAGE_NUM        = C1B.PAGE_NUM
AND   C2B.LINE_NUM        = C1B.LINE_NUM
AND   C2B.GVT_RITS_DT     IS NULL
AND   EXISTS (SELECT 'X'
              FROM  PS_DEDUCTION_TBL D1B
              WHERE D1B.GVT_DIST_DEST    = 'R'
              AND   D1B.GVT_REPORTING_CD = 'FH'
              AND   D1B.DEDCD            = C1B.DEDCD
              AND   D1B.EFFDT            = (SELECT MAX(D2B.EFFDT)
                                            FROM   PS_DEDUCTION_TBL D2B
                                            WHERE  D2B.PLAN_TYPE = D1B.PLAN_TYPE
                                            AND    D2B.EFFDT    <= C1B.PAY_END_DT
                                            AND    D2B.DEDCD     = D1B.DEDCD))
ORDER BY C1B.BENEFIT_PLAN

end-select

end-procedure     !Process-2812A-off-cycle


!******************************
begin-procedure Get-coverage-cd
!******************************

begin-select

G1.COVRG_CD

    let $benefit_plan = SUBSTR($benefit_plan,1,4)
    let $benefit_plan = RTRIM($benefit_plan, ' ')

    let $covrg_cd = RTRIM(&G1.COVRG_CD, ' ')

    let #ded_tot = #ded_cur + #ded_not_taken

    let #I = 0

    while #I <> 5999

       get $code from fehb_array(#I) enrollment_code

       evaluate $code

           when = ''

               put $benefit_plan into fehb_array(#I) enrollment_code

               if ($ded_class = 'A' or $ded_class = 'B') !Withhold Deduction
                   let #enroll_cd_tot = #enroll_cd_tot + 1


                   evaluate $covrg_cd

                      when = '1'
                          put #ded_tot into fehb_array(#I) covrg_cd_1_amt
                          put 1 into fehb_array(#I) covrg_cd_1_cnt

                      when = '2'
                          put #ded_tot into fehb_array(#I) covrg_cd_2_amt
                          put 1 into fehb_array(#I) covrg_cd_2_cnt

                      when = '3'
                          put #ded_tot into fehb_array(#I) covrg_cd_3_amt
                          put 1 into fehb_array(#I) covrg_cd_3_cnt

                      when = '4'
                          put #ded_tot into fehb_array(#I) covrg_cd_4_amt
                          put 1 into fehb_array(#I) covrg_cd_4_cnt

                       when = '5'
                          put #ded_tot into fehb_array(#I) covrg_cd_5_amt
                          put 1 into fehb_array(#I) covrg_cd_5_cnt

                   end-evaluate      !$covrg_cd

               else                  !Contribution Deduction

                   evaluate $covrg_cd

                      when = '1'
                          put #ded_tot into fehb_array(#I) covrg_cd_1_amt

                      when = '2'
                          put #ded_tot into fehb_array(#I) covrg_cd_2_amt

                      when = '3'
                          put #ded_tot into fehb_array(#I) covrg_cd_3_amt

                      when = '4'
                          put #ded_tot into fehb_array(#I) covrg_cd_4_amt

                      when = '5'
                           put #ded_tot into fehb_array(#I) covrg_cd_5_amt

                  end-evaluate      !$covrg_cd

               end-if

               let #I = 5999
               BREAK

           when = $benefit_plan

               if ($DED_CLASS = 'A' or $DED_CLASS = 'B') !Withhold Deduction

                   evaluate $covrg_cd

                       when = '1'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_1_amt
                           array-add 1 to fehb_array(#I) covrg_cd_1_cnt

                       when = '2'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_2_amt
                           array-add 1 to fehb_array(#I) covrg_cd_2_cnt

                       when = '3'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_3_amt
                           array-add 1 to fehb_array(#I) covrg_cd_3_cnt

                       when = '4'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_4_amt
                           array-add 1 to fehb_array(#I) covrg_cd_4_cnt

                       when = '5'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_5_amt
                           array-add 1 to fehb_array(#I) covrg_cd_5_cnt

                   end-evaluate      !$covrg_cd

               else      !Contribution Deduction

                   evaluate $covrg_cd

                       when = '1'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_1_amt

                       when = '2'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_2_amt

                       when = '3'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_3_amt

                       when = '4'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_4_amt

                       when = '5'
                           array-add #ded_tot to fehb_array(#I) covrg_cd_5_amt

                   end-evaluate      !&G1.COVRG_CD

               end-if

               let #I = 5999
               BREAK

           when <> $benefit_plan

               let #I = #I + 1

       end-evaluate     !$code

   end-while   !#I <> 5999

FROM  PS_HEALTH_BENEFIT G1

WHERE G1.EMPLID       = $emplid
AND   G1.EMPL_RCD    = #empl_rcd
AND   G1.BENEFIT_PLAN = $benefit_plan
AND   G1.EFFDT = (SELECT MAX(G2.EFFDT)
                  FROM   PS_HEALTH_BENEFIT G2
                  WHERE  G2.EMPLID       = G1.EMPLID
                  AND    G2.EMPL_RCD    = G1.EMPL_RCD
                  AND    G2.BENEFIT_PLAN = G1.BENEFIT_PLAN
                  AND    G2.EFFDT       <= $PAY_END_DT)

ORDER BY G1.COVRG_CD

end-select

end-procedure     !Get-coverage-cd

!*****************************************
begin-procedure Create-2812a-file-&-report
!*****************************************

!***** Loop thru array and write info to file and to the report.

let #detail-lines     = 66
let #2812A-FILE-COL   = 1
let #2812A-REPORT-COL = 1
let $current_covrg_cd = '1'
let #I = 0

while #I <> 5999

   while $current_covrg_cd <> '0'

       get $code from fehb_array(#I) enrollment_code

       evaluate $current_covrg_cd

           when = '1'
               let $current_enrollment_cd = $code || '1'
               get #current_covrg_cd_amt from fehb_array(#I) covrg_cd_1_amt
               get #current_covrg_cd_cnt from fehb_array(#I) covrg_cd_1_cnt
               BREAK

           when = '2'
               let $current_enrollment_cd = $code || '2'
               get #current_covrg_cd_amt from fehb_array(#I) covrg_cd_2_amt
               get #current_covrg_cd_cnt from fehb_array(#I) covrg_cd_2_cnt
               BREAK

           when = '3'
               let $current_enrollment_cd = $code || '3'
               get #current_covrg_cd_amt from fehb_array(#I) covrg_cd_3_amt
               get #current_covrg_cd_cnt from fehb_array(#I) covrg_cd_3_cnt
               BREAK

           when = '4'
               let $current_enrollment_cd = $code || '4'
               get #current_covrg_cd_amt from fehb_array(#I) covrg_cd_4_amt
               get #current_covrg_cd_cnt from fehb_array(#I) covrg_cd_4_cnt
               BREAK

          when = '5'
             let $current_enrollment_cd = $code || '5'
             get #current_covrg_cd_amt from fehb_array(#I) covrg_cd_5_amt
             get #current_covrg_cd_cnt from fehb_array(#I) covrg_cd_5_cnt
             BREAK

       end-evaluate    !$current_covrg_cd

       if $code = ''

          let #I = 5999

          if #2812A-REPORT-COL <> 1 or
             #amt_sum <> 0
               do Write-to-2812A-report
          end-if
          do Write-to-2812A-file
          let $current_covrg_cd = '0'

       else

           if #current_covrg_cd_amt <> 0 or
              #current_covrg_cd_cnt <> 0
               do Write-to-2812A-report
               do Write-to-2812A-file
           end-if

           if  #I <> 5999 and $current_covrg_cd = '5'
               let #I = #I + 1
           end-if

           evaluate $current_covrg_cd

               when = '1'
                  let $current_covrg_cd = '2'
                  BREAK

               when = '2'
                  let $current_covrg_cd = '3'
                  BREAK

               when = '3'
                  let $current_covrg_cd = '4'
                  BREAK

               when = '4'
                  let $current_covrg_cd = '5'
                  BREAK

               when = '5'
                  let $current_covrg_cd = '1'

          end-evaluate   !$current_covrg_cd

       end-if

   end-while    !$current_covrg_cd <> '0'

end-while !#I <> 5999

end-procedure     !Create-2812a-file-&-report

!************************************
begin-procedure write-to-2812A-report
!************************************

if #detail-lines = 66
   let #detail-lines = 0
   new-page

   !***** 2812A column titles
   print 'Enrollment'           (1,1,10)
   print 'Total Withholdings'   (1,13,18)
   print 'Number'               (1,33,6)
   print 'Enrollment'           (1,43,10)
   print 'Total Withholdings'   (1,55,18)
   print 'Number'               (1,75,6)
   print 'Enrollment'           (1,85,10)
   print 'Total Withholdings'   (1,97,18)
   print 'Number'               (1,117,6)
   print 'Code No.'             (2,1,8)
   print '& Contributions'      (2,13,15)
   print 'Enrolled'             (2,33,9)
   print 'Code No.'             (2,43,8)
   print '& Contributions'      (2,55,15)
   print 'Enrolled'             (2,75,9)
   print 'Code No.'             (2,85,8)
   print '& Contributions'      (2,97,15)
   print 'Enrolled'             (2,117,9)
   print '----------'           (3,1,10)
   print '------------------'   (3,13,18)
   print '--------'             (3,33,8)
   print '----------'           (3,43,10)
   print '------------------'   (3,55,18)
   print '--------'             (3,75,8)
   print '----------'           (3,85,10)
   print '------------------'   (3,97,18)
   print '--------'             (3,117,8)

end-if

evaluate #2812A-REPORT-COL

   when = 1
       let $rep-code-col1 = $current_enrollment_cd
       let #rep-code-sum-col1 = #current_covrg_cd_amt
       let #amt_sum = #amt_sum + #current_covrg_cd_amt
       let #rep-code_enrolled-col1 = #current_covrg_cd_cnt
       let #cnt_sum = #cnt_sum + #current_covrg_cd_cnt
       let #cnt_sum1 = #cnt_sum                        !DT273
       let #2812A-REPORT-COL = 2
       BREAK

   when = 2
       let $rep-code-col2 = $current_enrollment_cd
       let #rep-code-sum-col2 = #current_covrg_cd_amt
       let #amt_sum = #amt_sum + #current_covrg_cd_amt
       let #rep-code_enrolled-col2 = #current_covrg_cd_cnt
       let #cnt_sum = #cnt_sum + #current_covrg_cd_cnt
       let #cnt_sum2 = #cnt_sum                        !DT273
       let #2812A-REPORT-COL = 3
       if #I = 5999
           print $rep-code-col1           (+1,1,5)
           print #rep-code-sum-col1       (,17,15)  edit 999,999,999.99mi
           print #rep-code_enrolled-col1  (,34,7)   edit 999,999
       let #detail-lines = #detail-lines + 1
       end-if
       BREAK

   when = 3
       let $rep-code-col3 = $current_enrollment_cd
       let #rep-code-sum-col3 = #current_covrg_cd_amt
       let #amt_sum = #amt_sum + #current_covrg_cd_amt
       let #rep-code_enrolled-col3 = #current_covrg_cd_cnt
       let #cnt_sum = #cnt_sum + #current_covrg_cd_cnt
       let #cnt_sum3 = #cnt_sum                         !DT273
       let #2812A-REPORT-COL = 1
       print $rep-code-col1               (+1,1,5)
       print #rep-code-sum-col1           (,17,15)  edit 999,999,999.99mi
       print #rep-code_enrolled-col1      (,34,7)   edit 999,999
       print $rep-code-col2               (,43,5)
       print #rep-code-sum-col2           (,59,15)  edit 999,999,999.99mi
       print #rep-code_enrolled-col2      (,77,7)   edit 99,999

       if #I <> 5999
           print $rep-code-col3           (,85,5)
           print #rep-code-sum-col3       (,101,15) edit 999,999,999.99mi
           print #rep-code_enrolled-col3  (,118,7)  edit 999,999
           let #detail-lines = #detail-lines + 1
       end-if

end-evaluate       !#2812A-REPORT-COL


!if #I = 5999                                                      !DT273
!    print 'Witholdings and Contributions Grand Total: $' (+3,1,43)!DT273
!    print #amt_sum (,44,16) edit 999,999,999.99mi                 !DT273
!    print 'Total Number Enrolled: ' (+2,1,23)                     !DT273
!    print #cnt_sum (,24,8) edit 999,999                           !DT273
!end-if                                                            !DT273


end-procedure     !Write-to-2812A-report


!**********************************
begin-procedure Write-to-2812A-file
!**********************************

evaluate #2812A-FILE-COL

   when = 1
       let $file-code-col1 = $current_enrollment_cd
       let #file-code-sum-col1 = #current_covrg_cd_amt
       let #2812A-FILE-COL = 2
       let #total_withhold_contrib = #total_withhold_contrib + #file-code-sum-col1
       BREAK

   when = 2
       let $file-code-col2 = $current_enrollment_cd
       let #file-code-sum-col2 = #current_covrg_cd_amt
       let #total_withhold_contrib = #total_withhold_contrib + #file-code-sum-col2
       let $filler = rpad($filler, 160, '')

       do Format-Number(#file-code-sum-col1, $file-code-sum-col1,'099999999V99mi')
       do Format-Number(#file-code-sum-col2, $file-code-sum-col2,'099999999V99mi')

       if #I = 5999
           let $file-code-col2 = ''
           let $file-code-sum-col2 = ''
       end-if

       write 1 from '2812A':5
                    '01':2
                    $file-code-col1:5
                    $file-code-sum-col1:11
                    $file-code-col2:5
                    $file-code-sum-col2:11
                    $filler:160                                          !DT273


       let #2812A-FILE-COL = 1

end-evaluate   !#2812A-FILE-COL

!***** Write the 2812A Total Record to the 2812A File.

if #I = 5999

   print 'Witholdings and Contributions Grand Total: $' (+3,1,43)         !DT273
   print #amt_sum (,44,16) edit 999,999,999.99mi                          !DT273
   print 'Total Number Enrolled: ' (+2,1,23)                              !DT273
   print #cnt_sum (,24,8) edit 999,999


   do Format-Number(#total_withhold_contrib,$total_withhold_contrib,'099999999V99mi')
   do Format-Number(#cnt_sum,$cnt_sum,'09999mi')


   write 1 from '2812A':5
                '02':2
                $cnt_sum:5
                $total_withhold_contrib:11

end-if

end-procedure     !Write-to-2812A-file

!*******************************
begin-procedure Close-rits-files
!*******************************

close 1

end-procedure     !Close-rits-files


!***************************************
begin-procedure process-mil-dep-payments
!***************************************

display ' '
display 'Processing Military Deposits Payments'
display ' '

begin-select

MDA.DED_CUR
CHKA.PAY_END_DT
CHKA.EMPLID
CHKA.EMPL_RCD

    if &MDA.DED_CUR > 0

       let #md_ded_cur     = &MDA.DED_CUR
       let $md_emplid      = rtrim(&CHKA.EMPLID,' ')
       let #md_empl_rcd_no = &CHKA.EMPL_RCD
       let $md_pay_end_dt  = &CHKA.PAY_END_DT

       do check-for-mil-dep-accounts

    end-if

FROM  PS_PAY_CALENDAR CAL4,
      PS_PAY_DEDUCTION MDA,
      PS_PAY_CHECK CHKA

WHERE CAL4.RUN_ID      = $run_id
AND   CHKA.COMPANY     = CAL4.COMPANY
AND   CHKA.PAYGROUP    = CAL4.PAYGROUP
AND   CHKA.PAY_END_DT  = CAL4.PAY_END_DT
AND   CHKA.OFF_CYCLE   = 'N'
AND   MDA.COMPANY      = CHKA.COMPANY
AND   MDA.PAYGROUP     = CHKA.PAYGROUP
AND   MDA.PAY_END_DT   = CHKA.PAY_END_DT
AND   MDA.OFF_CYCLE    = CHKA.OFF_CYCLE
AND   MDA.PAGE_NUM       = CHKA.PAGE_NUM
AND   MDA.LINE_NUM        = CHKA.LINE_NUM
AND   EXISTS (SELECT 'X'
              FROM PS_DEDUCTION_TBL MD1
              WHERE MD1.GVT_DIST_DEST    = 'R'
              AND   MD1.GVT_REPORTING_CD = 'MD'
              AND   MD1.DEDCD            = MDA.DEDCD
              AND   MD1.EFFDT            = (SELECT MAX(MD2.EFFDT)
                                            FROM   PS_DEDUCTION_TBL MD2
                                            WHERE  MD2.PLAN_TYPE = MD1.PLAN_TYPE
                                            AND    MD2.EFFDT    <= MDA.PAY_END_DT
                                            AND    MD2.DEDCD     = MD1.DEDCD))

end-select

do Commit-Transaction

if $off_cycle_ded = 'Y'

    do process-mil-dep-payments-off-cycle

end-if

end-procedure     !process-mil-dep-payments

!*************************************************
begin-procedure process-mil-dep-payments-off-cycle
!*************************************************

begin-select

MDB.DED_CUR
CHKB.PAY_END_DT
CHKB.EMPLID
CHKB.EMPL_RCD

    if &MDB.DED_CUR > 0

        let #md_ded_cur     = &MDB.DED_CUR
        let $md_emplid      = rtrim(&CHKB.EMPLID,' ')
        let #md_empl_rcd_no = &CHKB.EMPL_RCD
        let $md_pay_end_dt  = &CHKB.PAY_END_DT

        do check-for-mil-dep-accounts

    end-if

FROM  PS_PAY_CALENDAR CAL5,
      PS_PAY_DEDUCTION MDB,
      PS_PAY_CHECK CHKB

WHERE CAL5.RUN_ID          = $run_id
AND   CHKB.COMPANY         = CAL5.COMPANY
AND   CHKB.PAYGROUP        = CAL5.PAYGROUP
AND   CHKB.PAY_END_DT     <= CAL5.PAY_END_DT
AND   CHKB.OFF_CYCLE       = 'Y'
AND   CHKB.PAYCHECK_STATUS IN ('F','R')
AND   MDB.COMPANY          = CHKB.COMPANY
AND   MDB.PAYGROUP         = CHKB.PAYGROUP
AND   MDB.PAY_END_DT       = CHKB.PAY_END_DT
AND   MDB.OFF_CYCLE        = CHKB.OFF_CYCLE
AND   MDB.PAGE_NUM         = CHKB.PAGE_NUM
AND   MDB.LINE_NUM         = CHKB.LINE_NUM
AND   MDB.GVT_RITS_DT      IS NULL
AND   EXISTS (SELECT 'X'
              FROM PS_DEDUCTION_TBL MDD3
              WHERE MDD3.GVT_DIST_DEST    = 'R'
              AND   MDD3.GVT_REPORTING_CD = 'MD'
              AND   MDD3.DEDCD            = MDB.DEDCD
              AND   MDD3.EFFDT            = (SELECT MAX(MDD4.EFFDT)
                                           FROM   PS_DEDUCTION_TBL MDD4
                                           WHERE  MDD4.PLAN_TYPE = MDD3.PLAN_TYPE
                                           AND    MDD4.EFFDT    <= MDB.PAY_END_DT
                                           AND    MDD4.DEDCD     = MDD3.DEDCD))

end-select

end-procedure     !process-mil-dep-payments-off-cycle


!*****************************************
begin-procedure check-for-mil-dep-accounts
!*****************************************


let $acct_closed = 'N'
let #remaining_deposit_amt     = round(#md_ded_cur, 2)

begin-select

SVCDEP.SEQ_NO
SVCDEP.GVT_STATUS_ACCT
SVCDEP.DEDUCT_AMT
SVCDEP.GVT_MILDEP_CHK

    if #remaining_deposit_amt > 0

        do check-mil-dep-trans

    end-if

FROM  PS_GVT_SVCDEP_TBL SVCDEP

WHERE SVCDEP.EMPLID          = $md_emplid
AND   SVCDEP.EMPL_RCD       = #md_empl_rcd_no
AND   SVCDEP.GVT_STATUS_ACCT = '1'

end-select

if $acct_closed =  'Y'

   do move-svc-deduction

end-if

end-procedure     !check-for-mil-dep-accounts


!**********************************
begin-procedure check-mil-dep-trans
!**********************************
let $md_trans_type = 'S'
begin-select

SVCTRN.END_BAL
SVCTRN.TRANS_AMT
SVCTRN.TRANS_DT

    if &SVCTRN.END_BAL < #remaining_deposit_amt

        let #begin_bal         = round(&SVCTRN.END_BAL, 2)

        let #deposit_trans_amt = round(&SVCTRN.END_BAL, 2)

        let #end_bal           = 0

        let #remaining_deposit_amt = round(#remaining_deposit_amt - #deposit_trans_amt, 2)

        do post-mil-dep-trans

        do update-svc-dep-status

        do Find-Existing-IRR

    else

       if &SVCTRN.END_BAL > #remaining_deposit_amt

          let #begin_bal         = round(&SVCTRN.END_BAL, 2)

          let #deposit_trans_amt = round(#remaining_deposit_amt, 2)

          if &SVCTRN.TRANS_DT = $md_pay_end_dt

              let #remaining_deposit_amt = #remaining_deposit_amount + &SVCTRN.TRANS_AMT

          end-if

          let #end_bal           = round(&SVCTRN.END_BAL - #remaining_deposit_amt, 2)

          let #remaining_deposit_amt = 0

          do post-mil-dep-trans

       else

          let #begin_bal         = round(&SVCTRN.END_BAL, 2)

          let #deposit_trans_amt = round(#remaining_deposit_amt, 2)

          let #end_bal           = 0

          let #remaining_deposit_amt = 0

          do post-mil-dep-trans

          do update-svc-dep-status

          do Find-Existing-IRR

       end-if

    end-if

FROM PS_GVT_SVCTRN_TBL SVCTRN

WHERE SVCTRN.EMPLID    = $md_emplid
AND   SVCTRN.EMPL_RCD  = #md_empl_rcd_no
AND   SVCTRN.SEQ_NO    = &SVCDEP.SEQ_NO
AND   SVCTRN.TRANS_DT  = (SELECT MAX(SVCTRN1.TRANS_DT)
                          FROM  PS_GVT_SVCTRN_TBL SVCTRN1
                          WHERE SVCTRN1.EMPLID     = $md_emplid
                          AND   SVCTRN1.EMPL_RCD   = #md_empl_rcd_no
                          AND   SVCTRN1.SEQ_NO     = &SVCDEP.SEQ_NO
                          AND   SVCTRN1.TRANS_DT  <= $md_pay_end_dt)

end-select

end-procedure     !check-mil-dep-trans


!*********************************
begin-procedure post-mil-dep-trans
!*********************************

do check-for-posted-md-trans

if $md_trans_found = 'N'
   let $descr50 = 'Payroll Deduction'

begin-SQL

INSERT INTO PS_GVT_SVCTRN_TBL
           (EMPLID,
            EMPL_RCD,
            SEQ_NO,
            TRANS_DT,
            GVT_SVC_TRANS_NBR,
            GVT_TRANS_TYPE,
            BEGIN_BAL,
            END_BAL,
            TRANS_AMT,
            INTEREST_RATE,
            DESCR50)
VALUES
           ($md_emplid,
            #md_empl_rcd_no,
            &SVCDEP.SEQ_NO,
            $md_pay_end_dt,
            '1',
            'S',
            #begin_bal,
            #end_bal,
            #deposit_trans_amt,
            0,
            $descr50)

end-SQL
else
begin-SQL

UPDATE PS_GVT_SVCTRN_TBL

SET    BEGIN_BAL         = #begin_bal,
       END_BAL           = #end_bal,
       TRANS_AMT         = #md_update_amt,
       DESCR50           = $descr50

WHERE  EMPLID            = $md_emplid
AND    EMPL_RCD          = #md_empl_rcd_no
AND    SEQ_NO            = &SVCDEP.SEQ_NO
AND    TRANS_DT          = $md_pay_end_dt
AND    GVT_SVC_TRANS_NBR = $md_trans_nbr
AND    GVT_TRANS_TYPE    = $md_trans_type
end-sql

end-if

let $descr50 = ' '

end-procedure     !post-mil-dep-trans


!****************************************
begin-procedure check-for-posted-md-trans
!****************************************

let $md_trans_found = 'N'

begin-select

TRNCHK.TRANS_AMT
TRNCHK.GVT_SVC_TRANS_NBR

  let $md_trans_nbr = &TRNCHK.GVT_SVC_TRANS_NBR
    let $md_trans_found = 'Y'

    let #md_update_amt  = &TRNCHK.TRANS_AMT + #deposit_trans_amt

    let $descr50 = 'Payroll Deduction - Multiple Deductions'

FROM PS_GVT_SVCTRN_TBL TRNCHK

WHERE TRNCHK.EMPLID         = $md_emplid
AND   TRNCHK.EMPL_RCD       = #md_empl_rcd_no
AND   TRNCHK.SEQ_NO         = &SVCDEP.SEQ_NO
AND   TRNCHK.TRANS_DT       = $md_pay_end_dt
AND   TRNCHK.GVT_TRANS_TYPE = 'S'

end-select

end-procedure     !check-for-posted-md-trans

!************************************
begin-procedure update-svc-dep-status
!************************************

let $acct_closed = 'Y'

if &SVCDEP.GVT_MILDEP_CHK = 'Y'

  let #sv_deduct_amt = &SVCDEP.DEDUCT_AMT

end-if

begin-SQL

UPDATE PS_GVT_SVCDEP_TBL

SET    GVT_STATUS_ACCT = '3',
       STATUS_DT       =  $md_pay_end_dt,
       GVT_MILDEP_CHK  = 'N'

WHERE  EMPLID    = $md_emplid
AND    EMPL_RCD  = #md_empl_rcd_no
AND    SEQ_NO    = &SVCDEP.SEQ_NO

end-SQL

end-procedure

!************************************
begin-procedure move-svc-deduction
!************************************

begin-select

MIN(OA.SEQ_NO) &oa.seq_no

   do update-deduction-flag

FROM PS_GVT_SVCDEP_TBL OA
WHERE  OA.EMPLID          = $md_emplid
AND    OA.EMPL_RCD        = #md_empl_rcd_no
AND    OA.GVT_STATUS_ACCT = '1'

end-select

end-procedure


!************************************
begin-procedure update-deduction-flag
!************************************

begin-SQL

UPDATE PS_GVT_SVCDEP_TBL

SET    GVT_MILDEP_CHK = 'Y',
       DEDUCT_AMT     = #sv_deduct_amt

WHERE  EMPLID          = $md_emplid
AND    EMPL_RCD        = #md_empl_rcd_no
AND    GVT_STATUS_ACCT = '1'
AND    SEQ_NO          = &oa.seq_no

end-SQL

end-procedure


!************************************
begin-procedure Find-Existing-IRR
!************************************

let #irr_count = 0

begin-Select

COUNT(*) &irr_cnt

  let #irr_count = &irr_cnt

FROM PS_GVT_IRR_CONTROL
WHERE EMPLID    = $md_emplid
AND   EMPL_RCD = #md_empl_rcd_no
AND   EFFSEQ    = &SVCDEP.SEQ_NO
AND   GVT_IRR_TYPE = 'M'

end-Select

if #irr_count = 0

   do insert-IRR-control

end-if

end-procedure

!************************************
begin-procedure insert-IRR-control
!************************************

let $ret_form = 'N'

begin-Select

RP.GVT_IRR_RET_FORM

   let $ret_form = &RP.GVT_IRR_RET_FORM

FROM PS_GVT_JOB JOB,
     PS_RTRMNT_PLAN_TBL RP
WHERE JOB.EMPLID             = $md_emplid
AND   JOB.EMPL_RCD           = #md_empl_rcd_no
and   JOB.EFFDT              = (SELECT MAX(JB2.EFFDT)
                                FROM PS_GVT_JOB JB2
                                WHERE JB2.EMPLID = JOB.EMPLID
                                AND   JB2.EMPL_RCD = JOB.EMPL_RCD
                                AND   JB2.EFFDT <= $md_pay_end_dt)
AND   JOB.EFFSEQ             = (SELECT MAX(JB3.EFFSEQ)
                                FROM PS_GVT_JOB JB3
                                WHERE JB3.EMPLID = JOB.EMPLID
                                AND   JB3.EMPL_RCD = JOB.EMPL_RCD
                                AND   JB3.EFFDT = JOB.EFFDT)
and   JOB.GVT_RETIRE_PLAN    = RP.BENEFIT_PLAN
and   RP.PLAN_TYPE           = '70'
and   RP.EFFDT               = (SELECT MAX(RP2.EFFDT)
                                FROM PS_RTRMNT_PLAN_TBL RP2
                                WHERE RP2.BENEFIT_PLAN = JOB.GVT_RETIRE_PLAN
                                AND RP2.PLAN_TYPE = '70'
                                AND RP2.EFFDT <= JOB.EFFDT)

end-Select


begin-SQL  ON-ERROR = SQL-Error

INSERT INTO PS_GVT_IRR_CONTROL
  (EMPLID,
   EMPL_RCD,
   GVT_IRR_TYPE,
   EFFDT,
   EFFSEQ,
   GVT_IRR_RET_FORM,
   GVT_IRR_STATUS,
   GVT_IRR_DED_TOT,
   GVT_IRR_DED_CURYR,
   GVT_ROST_TYPE,
   GVT_ROST_SEQ_YR,
   GVT_ROST_PAGE_NO)

VALUES
  ($md_emplid,
   #md_empl_rcd_no,
   'M',
   $md_pay_end_dt,
   &SVCDEP.SEQ_NO,
   $ret_form,
   'P',
   0,
   0,
   ' ',
   0,
   0)

end-SQL

end-procedure     !insert-IRR-control


!**********************************
begin-procedure Update-pay-calendar
!**********************************

BEGIN-SQL

UPDATE PS_PAY_CALENDAR

SET GVT_RITS_RUN = 'Y'

WHERE RUN_ID = $run_id

END-SQL

end-procedure     !Update-pay-calendar

!***********************************
begin-procedure update-pay-deduction
!***********************************

BEGIN-SQL

UPDATE PS_PAY_DEDUCTION

SET GVT_RITS_DT = $AsOfToday

WHERE GVT_RITS_DT IS NULL
AND   OFF_CYCLE   = 'Y'
AND   PAY_END_DT <= (SELECT MAX(CAL6.PAY_END_DT)
                     FROM    PS_PAY_CALENDAR CAL6
                     WHERE   CAL6.RUN_ID = $run_id)

END-SQL

end-procedure     !update-pay-deduction

!**********************************
begin-procedure Delete-run-control
!**********************************

BEGIN-SQL

DELETE FROM PS_GVT_RUN_CNTL

WHERE RUN_CNTL_ID = $Prcs_Run_Cntl_ID

END-SQL

end-procedure     !Delete-run-control


!************************************
begin-procedure PROCESS-MILITARY-AMOUNTS
!************************************

!PICK UP THE PAGE AND LINE NUMBERS FOR ALL MILITARY SERVICE
!DEDUCTIONS.

 let #2-13-nbr    = 0
 let #3-10-nbr    = 0
 let #md-ded-cur  = 0
begin-SELECT

ADED.DED_CUR            &ADED.DED_CUR
ADED.COMPANY            &ADED.COMPANY
ADED.PAYGROUP           &ADED.PAYGROUP
ADED.PAGE_NUM           &ADED.PAGE_NUM
ADED.LINE_NUM           &ADED.LINE_NUM
ADED.OFF_CYCLE          &ADED.OFF_CYCLE
BDED.GVT_REPORTING_CD   &BDED.GVT_REPORTING_CD

 let #md-ded-cur       = &ADED.DED_CUR
 let $company          = &ADED.COMPANY
 let $paygroup         = &ADED.PAYGROUP
 let #page             = &ADED.PAGE_NUM
 let #line             = &ADED.LINE_NUM
 let $off-cycle        = &ADED.OFF_CYCLE
 let $gvt-reporting-cd = &BDED.GVT_REPORTING_CD
 let $mil_dep          = 'Y'

 do DETERMINE-CSRS-OR-FERS

FROM PS_PAY_DEDUCTION ADED,
     PS_DEDUCTION_TBL BDED
     WHERE ADED.PAY_END_DT = $pay_end_dt
     AND   BDED.GVT_REPORTING_CD = 'MD'
     AND   ADED.DEDCD = BDED.DEDCD
     AND   BDED.EFFDT = (SELECT MAX(BDED1.EFFDT) FROM PS_DEDUCTION_TBL BDED1
                         WHERE BDED.PLAN_TYPE = BDED1.PLAN_TYPE
                         AND BDED.DEDCD = BDED1.DEDCD
                         AND BDED1.EFFDT <= $pay_end_dt)

end-select

end-procedure !PROCESS-MILITARY-AMOUNTS


!*************************************
begin-procedure DETERMINE-CSRS-OR-FERS

!*************************************

!DETERMINE IF THE DEDUCTION IS FOR CSRS OR FERS
!AND ADD AMT TO REPORT

begin-SELECT

PAYC.EMPLID,
PAYC.EMPL_RCD,
SVCDEP.GVT_RETIRE_PLAN_BB

  let $gvt_retire_plan  = &SVCDEP.GVT_RETIRE_PLAN_BB

  do MOVE-TO-MILITARY-2812-EXTRACT-FIELD

FROM PS_PAY_CHECK        PAYC,
     PS_GVT_SVCDEP_TBL   SVCDEP

     WHERE   PAYC.COMPANY               = $company
     AND     PAYC.PAYGROUP              = $paygroup
     AND     PAYC.PAY_END_DT            = $pay_end_dt
     AND     PAYC.PAGE_NUM              = #page
     AND     PAYC.LINE_NUM              = #line
     AND     PAYC.EMPLID                = SVCDEP.EMPLID
     AND     PAYC.EMPL_RCD              = SVCDEP.EMPL_RCD
     AND     SVCDEP.GVT_RETIRE_PLAN_BB IN ('CS','FS')
     AND     SVCDEP.GVT_STATUS_ACCT     = '1'

end-select

end-procedure !DETERMINE-CSRS-OR-FERS


!************************************
begin-procedure MOVE-TO-MILITARY-2812-EXTRACT-FIELD
!************************************


EVALUATE $gvt_retire_plan

            when = 'CS'
                let #2-13-nbr = #2-13-nbr + #md-ded-cur

            when = 'FS'
                let #3-10-nbr = #3-10-nbr + #md-ded-cur

END-EVALUATE


end-procedure !MOVE-TO-MILITARY-2812-EXTRACT-FIELD



#Include 'fgrunctl.sqc'  !Get run control parameter values
#include 'fggetval.sqc'  !Get values mask routines
#Include 'fgovrpch.sqc'  !Over Punch routine
#Include 'reset.sqc'     !Reset printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
#Include 'useprntr.sqc'  !
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Commit-Transaction
