! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  PTSQRTST: PeopleTools SQR Testing Program                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'

#define TestOK     'Completed Successfully'
#define TestFailed 'FAILED'
#define TestFailOK 'FAILED as expected'
#define Stars      '**************************************************************'
#define Dashes     '--------------------------------------------------------------'

! The following #defines are used throughout the test.  These defines
! are include in the PT8 version of PeopleTools, but older PeopleTools
! require them for this test to work as designed

#ifndef Native-DateTimeMask

    #define PTDateDelim /
    #define DDelimiter  '{PTDateDelim}'             !sDate
    #define PDelimiter  '{PTDateDelim}'
    #define PTTimeDelim :
    #define TDelimiter '{PTTimeDelim}'              !sTime

    #define PTMon       MM
    #define PTDay       DD
    #define PTYear      YYYY            !This format is used internally and MUST remain 4 digits
    #define PT2Year     RR              !This format is used internally if Year4 = '0'.  The RR will ensure that SQR
                                        ! keeps track of the Century
    #if {Year4} = '0'
        #define PTRPTYear {PT2Year}     !This triggers SQR to properly determine the Century
    #else
        #define PTRPTYear {PTYear}      !This is the Default - 4Years
    #end-if

! Format PTRPTDATE based on what DateType is set to (SETENV.SQC or overriden in SQR Program).
    #if {DateType} = '0'
        #define PTRPTDATE '{PTMon}{PTDateDelim}{PTDay}{PTDateDelim}{PTRPTYear}'        !MM/DD/YYYY (Default)
    #else
        #if {DateType} = '1'
            #define PTRPTDATE '{PTDay}{PTDateDelim}{PTMon}{PTDateDelim}{PTRPTYear}'    !DD/MM/YYYY
        #else  ! {DateType = '2'
            #define PTRPTDATE '{PTRPTYear}{PTDateDelim}{PTMon}{PTDateDelim}{PTDay}'    !YYYY/MM/DD
        #end-if
    #end-if

    #define PTRPTTIME   'HH:MI:SS'

    #ifdef DB2ALL
        #define Native-DateTimeMask 'YYYY-MM-DD-HH.MI.SS.NNNNNN'
        #define Native-DateMask     'YYYY-MM-DD'
        #define Native-TimeMask     'HH.MI.SS'
        #define Native-TimeMaskMS   'HH.MI.SS.NNNNNN'
    #end-if

    #ifdef INFORMIX
        #define Native-DateTimeMask 'YYYY-MM-DD HH:MI:SS.NNN'
        #define Native-DateMask     'YYYY-MM-DD'
        #define Native-TimeMask     'HH:MI:SS.NNN'
    #end-if

    #ifdef  MICROSOFT
        #define Native-DateTimeMask 'YYYY-MM-DD HH:MI:SS.NNN'
        #define Native-DateMask     'YYYY-MM-DD'
        #define Native-TimeMask     'HH:MI:SS.NNN'
    #end-if

    #ifdef ORACLE
        #define Native-DateTimeMask 'DD-MON-YYYY HH:MI:SS AM'
        #define Native-DateMask     'DD-MON-YYYY'
        #define Native-TimeMask     'HH:MI:SS AM'
    #end-if

    #ifdef SYBASE
        #define Native-DateTimeMask 'YYYY-MM-DD HH:MI:SS.NNN'
        #define Native-DateMask     'YYYY-MM-DD'
        #define Native-TimeMask     'HH:MI:SS.NNN'
    #end-if

    #ifdef SQLBASE
        #define Native-DateTimeMask 'YYYY-MM-DD-HH.MI.SS.NNNNNN'
        #define Native-DateMask     'YYYY-MM-DD'
        #define Native-TimeMask     'HH.MI.SS'
        #define Native-TimeMaskMS   'HH.MI.SS.NNNNNN'
    #end-if


!Misc Defines
    #define TRUE     1
    #define FALSE    0
    #define OK      'OK'

    #define No      'N'
    #define Yes     'Y'

#end-if

!**********************************************************************
Begin-Setup
!**********************************************************************

#include 'setupdb.sqc'

Declare-Variable
    date    $wkDate
    date    $wkDate1
    date    $wkDate2
    integer #arUTCOffset
    integer #arDSTOffset
    integer #arDSTMonth
    integer #arDSTDay
    integer #arDSTDOW
    integer #arDSTHour
    integer #arDSTMinute
End-Declare

End-Setup
!**********************************************************************
Begin-Program
!**********************************************************************

    do InitPeopleTools

    do DatabaseSetup

    let $error_found = {No}
    do TestDateLogic
    do TestTimeLogic
!   do TestNumeric
    do TestMisc

    do CleanDatabase
    do Terminate
    do Reset

End-Program


!**********************************************************************
begin-procedure InitPeopleTools
!**********************************************************************
    do Init-DateTime
    do Define-Prcs-Vars
    do Get-Run-Control-Parms
    do Init-Number
    do Get-Current-DateTime
    move 'PTSQRTST'                     to $ReportID
    move 'PeopleTools SQR Test Program' to $ReportTitle
    show {Stars}
    show $ReportID ': ' $ReportTitle
    #ifdef PTVer
        show 'PeopleTools ' {PTVer}
    #end-if
    do DisplayRunInformation
end-procedure


!**********************************************************************
begin-procedure Terminate
!**********************************************************************

    if #prcs_process_instance > 0
        if $error_found = {No}
            do Update-Prcs-Run-Status
        else
            let #prcs_message_set_nbr = #prcs_msg_set_nbr
            let #prcs_message_nbr = #prcs_msg_nbr_sql_error
            let #prcs_run_status = #prcs_run_status_error
            let #prcs_rc = #sql-status
            let $prcs_message_parm1 = $sql-error
            let #prcs_continuejob = 0
            do Rollback-Transaction
            if $prcs_in_update_prcs_run_stat <> 'Y'
                do Update-Prcs-Run-Status
                do Commit-Transaction
            end-if
        end-if
    end-if

    if $error_found = {Yes}
        show ' '
        show 'ERRORS FOUND :-('
        let #return-Status = 1
        stop
    else
        show ' '
        show 'NO ERRORS FOUND :-)'
    end-if

end-procedure


!**********************************************************************
begin-procedure DisplayRunInformation
!**********************************************************************
    show {Dashes}
    show 'SQR Program: ' $sqr-program
    show 'Platform   : ' $sqr-platform

    let $Database = 'UNKNOWN'
    #ifdef DB2ALL
        #ifdef DB2400
            #ifdef NT
                let $Database = 'ODBC to DB2/400'
            #else
                let $Database = 'DB2/400'
            #end-if
        #else
            #ifdef DB2UNIX
                #ifdef NT
                    let $Database = 'ODBC to DB2/UNIX'
                #else
                    let $Database = 'DB2/UNIX'
                #end-if
            #else
                #ifdef NT
                    let $Database = 'ODBC to DB2/390'
                #else
                    let $Database = 'DB2/390'
                #end-if
            #end-if
        #end-if
    #end-if

    #ifdef INFORMIX
        let $Database = 'Informix'
    #end-if
    #ifdef ORACLE
        let $Database = 'Oracle'
    #end-if
    #ifdef MICROSOFT
        let $Database = 'Microsoft SQL Server'
    #end-if
    #ifdef SYBASE
        let $Database = 'Sybase'
    #end-if

    show 'Database   : ' $Database
    show 'Locale     : ' $sqr-locale
    show 'SQR Version: ' $sqr-ver
end-procedure

!**********************************************************************
begin-procedure  DatabaseSetup
!**********************************************************************

!This is to ensure that the test data is consistent: PSAsOfDate will be
!set to March 05, 1965.  If not, then some of the tests below
!which use literal dates will appear to fail, since in the original test
!bed this was the date used.

  Do CleanDatabase

  let $wkDate = strtodate('19650305000000','YYYYMMDDHHMISS')
  let $NativeDate = datetostr($wkDate,{Native-DateMask})

  let $Testid = 'Database Setup - Update PSASOFDATE'

BEGIN-SQL ON-ERROR=TestFailed                   !Used to test DATE Fields
UPDATE PSASOFDATE
SET ASOFDATE= $NativeDate
END-SQL

  let #Count = 0
  let $SQRTest = 'AM Test'

  let $wkDate = strtodate('19650305010000','YYYYMMDDHHMISS')
  let $NativeTimeStamp = datetostr($wkDate,{Native-DateTimeMask})
  let $NativeTime      = datetostr($wkDate,{Native-TimeMask})

  let $wkDate = strtodate('19650305130000','YYYYMMDDHHMISS')
  let $NativeTimeStamp1 = datetostr($wkDate,{Native-DateTimeMask})
  let $NativeTime1      = datetostr($wkDate,{Native-TimeMask})

  #ifdef debugd
    show '$NativeDate      : ' $NativeDate
    show '$NativeTimeStamp : ' $NativeTimeStamp
    show '$NativeTimeStamp1: ' $NativeTimeStamp1
    show '$NativeTime      : ' $NativeTime
    show '$NativeTime1     : ' $NativeTime1
  #end-if


While #Count < 2

  let $Testid = 'Database Setup - Insert into PS_MC_DEFN'


BEGIN-SQL ON-ERROR=TestFailed                  !Used to test TIMESTAMP & TIME Fields
INSERT INTO PS_MC_DEFN
   (MC_DEFN_ID, MC_TYPE_ID, DTTM_STAMP, PS_OWNER,
    OPRID, MC_TEMPLATE_ID, MC_NULL_DT, MC_NULL_DTTM_STAMP,
    MC_NULL_TIME, ARCHIVE_ID, ARCHIVE_DT)
  VALUES
    ($SQRTEST, $SQRTEST,
    {DATETIMEIN-Prefix}$NativeTimeStamp{DATETIMEIN-Suffix},
    'ST', 'SQRTEST', $SQRTEST, $NativeDate,
    {DATETIMEIN-Prefix}$NativeTimeStamp{DATETIMEIN-Suffix},
    {TIMEIN-Prefix}$NativeTime{TIMEIN-Suffix},
    $SQRTEST, $NativeDate)
END-SQL

  let $NativeTime = $NativeTime1
  let $NativeTimeStamp = $NativeTimeStamp1
  let $SQRTest = 'PM Test'
  Add 1 to #Count
End-While

! Perform a select to set some SQR Column Date Fields for use in Testing

Begin-Select
{DateTimeOut-Prefix}DTTM_STAMP{DateTimeOut-Suffix} &Tst_DateTime
MC_NULL_DT                                         &Tst_Date
{DateOut-Prefix}MC_NULL_DT{DateOut-Suffix}         &Tst_Date_Wrap
{TimeOut-Prefix}MC_NULL_TIME{TimeOut-Suffix}       &Tst_Time
{Time24Out-Prefix}MC_NULL_TIME{Time24Out-Suffix}   &Tst_Time24

  #ifdef debugd
    show '&Tst_DateTime    : ' &Tst_DateTime
    show '&Tst_Date        : ' &Tst_Date
    show '&Tst_Date_Wrap   : ' &Tst_Date_Wrap
    show '&Tst_Time        : ' &Tst_Time
    show '&Tst_Time24      : ' &Tst_Time24
  #end-if

  exit-select

FROM PS_MC_DEFN
WHERE MC_DEFN_ID = 'AM Test'
End-Select


end-procedure

!**********************************************************************
begin-procedure  CleanDatabase
!**********************************************************************

!This is to ensure that the test data is added by this program is removed

BEGIN-SQL
DELETE
FROM PS_MC_DEFN
WHERE OPRID = 'SQRTEST'
END-SQL

end-procedure

!**********************************************************************
! The following routine is used to trap any error that occur, show the
! error and then continue on processing.
!**********************************************************************
begin-procedure TestFailed
!**********************************************************************
    show 'Test: ' $Testid  ' Failed.  SQL Status = ' #sql-status edit 99999
    show '  SQL Error  = ' $sql-error
end-procedure

!**********************************************************************
begin-procedure ShowTestStatus
!**********************************************************************
    if $error = {No}
        show $Testid ' ' {TestOK}
    else
        show $Testid ' ' {TestFailed}
        let $error_found = {Yes}
    end-if
end-procedure

!**********************************************************************
#include 'pttstdte.sqc'
#include 'pttsttim.sqc'
#include 'pttstmsc.sqc'
!**********************************************************************
#include 'datetime.sqc'
#include 'datemath.sqc'
#include 'timemath.sqc'
#include 'validdt.sqc'
#include 'number.sqc'
#include 'prcsapi.sqc'   !Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request API
#include 'reset.sqc'
