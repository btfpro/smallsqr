!***********************************************************************
!  TAX810VT:  Qtrly Wage List - Tape - VERMONT                         *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2012/09/19:07:09:38                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872690                                              !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the following file'
    display 'will have been created:'
    display ''
    display '  TAX810VT  contains 275-character records in the ICESA format'
    display '            required for the reporting of quarterly wages to '
    display '            the Vermont Department of Labor.'
    display ''
    display 'Follow instructions from the department for preparing and'
    display 'submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report


begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization
  move 'TAX810VT' to $ReportID

 if $FileType = 'D'
    display '                                          '
    display 'Diskette processing eliminated 9-2012'
    display 'Program Stopped.                          '
    display 'Modify Tax Report Run Control.            '
    display '                                          '
    stop
 else
    move 'Vermont Quarterly UI Wage Report - Electronic' to $ReportTitle
    display ''
    display 'Creating Electronic File for Vermont UI Wage Reporting'
 end-if

end-procedure


begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'VT'              to $State
#endif
  let $CompanyChange = 'Y'
  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move &TX.Balance_Qtr   to $QtrCode 09
  move $PeriodEndDate    to $AsOfDate
  move '25'              to $Blocking_Factor

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Electronic-Parameters
     do Convert-Parameters
     move 'X' to $FileType
  end-if
  do Open-File
  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure


begin-procedure Open-File
  open '{IMPORTPREFIX}TAX810VT{IMPORTSUFFIX}' as 10 for-writing record=275:fixed
end-procedure


begin-procedure Process-Main
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    display ' Company   ' noline
    display   $Company
    stop
  end-if

  do Get-Company-Data !Transmitter identifying data
  do Write-A-Record
  do Write-B-Record

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
M.COMPANY     () on-break print=never AFTER=AFTER-COMPANY-TBL
M.DESCR
M.FEDERAL_EIN
M.ADDRESS1
M.CITY
M.STATE
M.POSTAL
N.HEALTH_CARE_COV

  move &M.Company to $Company
  move &M.Descr   to $CompanyName
  if &M.Company <> $PriorCompany

     move &N.HEALTH_CARE_COV to $Health-Cov
     move &M.Company to $PriorCompany
  else
     if $Health-Cov = 'N' and &N.HEALTH_CARE_COV = 'Y'
       move &N.HEALTH_CARE_COV to $Health-Cov
     end-if
  end-if


FROM  PS_COMPANY_TBL M, PS_CO_STATETAX_TBL N
WHERE M.EFF_STATUS = 'A'
  AND M.TAX_REPORT_TYPE = '2'
  AND M.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = M.COMPANY
       AND  EFFDT  <= $AsOfDate)
   AND M.COMPANY = N.COMPANY
   AND N.STATE = 'VT'
   AND N.EFFDT = (SELECT MAX(N1.EFFDT)
                  FROM PS_CO_STATETAX_TBL N1
                  WHERE N1.COMPANY = N.COMPANY
                    AND N1.STATE   = N.STATE
                    AND N1.EFFDT   <= $AsOfDate
                    AND N1.EFFDT = (SELECT MAX(N2.EFFDT)
                                    FROM PS_CO_STATETAX_TBL N2
                                    WHERE N1.COMPANY = N2.COMPANY
                                      AND N1.STATE   = N2.STATE
                                      AND N2.EFFDT   <= $PeriodBegDate))
ORDER BY M.COMPANY
end-SELECT
  if #Count_F > 0
    do Write-F-Record
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure AFTER-COMPANY-TBL


  move '' to $priorEmplID
  do Read-Employee-Data

end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
C.STATE
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D.SEX

  move &C.EmplID to $EmplID

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSONAL_DT_FST D, PS_PERS_NID D1
WHERE C.COMPANY           = $Company
  AND D.EMPLID            = C.EMPLID
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'VT'
#endif
  AND C.LOCALITY          = ' '
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'     to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID to $NATIONAL_ID
  end-if

  move &D.LAST_NAME            to $LastName
  move &D.FIRST_NAME           to $FirstName
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $FirstName
  uppercase $LastName
  uppercase $MidInitial

  move ' ' to $EmplType
  move 0   to #Hourly_Rt
  move ' ' to $Hire-Date

begin-select
J.EMPL_TYPE
J.HOURLY_RT
J.ACTION
J.EFFDT

  if (&J.EMPL_TYPE = 'E') or (&J.EMPL_TYPE = 'H')
    move 'H' to $EmplType
  else
    move 'S' to $EmplType
  end-if

  move &J.HOURLY_RT to #Hourly_Rt
  move &J.EFFDT to $JEffdt
  if &J.ACTION = 'HIR' and $JEffdt > $PeriodBegDate
    move &J.EFFDT to $Hire-Date
  end-if

 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID
  AND J.COMPANY  = $Company
  AND J.EMPL_RCD     =
      (SELECT MAX(EMPL_RCD)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND EMPL_RCD  = J.EMPL_RCD
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND EMPL_RCD  = J.EMPL_RCD
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select

  let $Hlth-Cov-Ind = ' '
  if $Hire-Date > ' '
     let $SelectBegDate = $Hire-Date
  else
     let $SelectBegDate = $PeriodBegDate
  end-if

begin-select
L.EFFDT
L.HLTH_COV_IND
L.EMPLID

  if $Hlth-Cov-Ind = ' '
    let $Hlth-Cov-Ind = &L.HLTH_COV_IND
  else
    if $Health-Cov = 'Y' and &L.HLTH_COV_IND = 'A'
      let $Hlth-Cov-Ind = &L.HLTH_COV_IND
    else
      if $Health-Cov = 'Y'  and  &L.HLTH_COV_IND = 'B'
                            and ($Hlth-Cov-Ind <> 'B'
                            and  $Hlth-Cov-Ind <> 'A')
          let $Hlth-Cov-Ind = &L.HLTH_COV_IND
      else
        if $Health-Cov = 'Y' and &L.HLTH_COV_IND = 'C'
                           and  $Hlth-Cov-Ind = 'D'
          let $Hlth-Cov-Ind = &L.HLTH_COV_IND
        end-if
      end-if
    end-if
  end-if

FROM PS_STATE_TAX_DATA L
WHERE L.EMPLID = $EmplID
  AND L.COMPANY = $Company
  AND L.EFFDT  IN (SELECT EFFDT
                  FROM PS_STATE_TAX_DATA
                    WHERE EMPLID  = L.EMPLID
                      AND COMPANY = L.COMPANY
                      AND EFFDT   <= $AsOfDate
                      AND EFFDT   >= (SELECT MAX(L1.EFFDT)
                  FROM PS_STATE_TAX_DATA L1
                    WHERE L1.EMPLID  = L.EMPLID
                      AND L1.COMPANY = L.COMPANY
                      AND L1.EFFDT   <= $SelectBegDate))

  AND L.STATE  = $State
  ORDER BY L.EFFDT DESC

END-SELECT

  let $Sex = RTRIM(&D.SEX,' ')
  if ($Sex <> 'F') and ($Sex <> 'M')
    move ' ' to $Sex
  end-if

#ifdef TAXTEST
  move 'CA' to $State
#endif

  move 'PS_RC_TAX810VT D'  to $TAX810X1
  move 'PS_RC_TAX810VT D1' to $TAX810X2
  move 'PS_RC_TAX810VT D2' to $TAX810X3
  move 'PS_RC_TAX810VT D3' to $TAX810X4
  do Get-Hours
  if #Hours > 520
     move 520 to #Hours
  end-if
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

  if $Health-Cov = 'N'
     if $Hlth-Cov-Ind <> 'S'
      move 'N' to $Hlth-Cov-Ind
     end-if
  end-if

  Evaluate $Hlth-Cov-Ind
    when = 'A'
      add #Hours to #HC-Elig
      let $Coverage-Message = 'A - Eligible and covered              '
      break
    when = 'B'
      add #Hours to #HC-Elig-Covered-Elsewhere
      let $Coverage-Message = 'B - Eligible, does not elect, has other coverage    '
      break
    when = 'C'
      add #Hours to #HC-Elig-Not-Covered
      let $Coverage-Message = 'C - Eligible, does not elect, no coverage            '
      break
    when = 'D'
      add #Hours to #HC-Not-Elig
      let $Coverage-Message = 'D - Not Eligible                                     '
      break
    when = 'S'
      add #Hours to #HC-Seasonal
      let $Coverage-Message = 'S - Seasonal                                       '
      break
    when = 'N'
      add #Hours to #HC-Not-Applicable
      let $Coverage-Message = 'N - Not Applicable                                 '
      break
  end-evaluate

  if $RC_QTR_UI.Rpt_Totals_Only = 'N'
    Let $FullName = rtrim($LastName, '  ') || ',' || rtrim($FirstName, ' ') || rtrim($MidInitial,' ')
    do Print-Summary-Data('Detail')
  end-if

  ADD #Hours TO #TOT_HOURS
  ADD #Hours TO #SUB_HOURS

  move &C.NlGrs_QTD  to #NlGrs_QTD
  add #NlGrs_QTD     to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD
  
  move &C.TxGrs_QTD  to #TxGrs_QTD
  add #TxGrs_QTD     to #Co_TxGrs_QTD
  multiply 100 times #TxGrs_QTD

  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  do Write-S-Record
  add 1 to #Count_R

end-procedure


begin-procedure Before-Company
  do Get-Company-Data
  let $CompanyChange = ' '
  
  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Company-Run-Control
  end-if

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  let $StateSUT = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateSUT,'-',1) <> 0
    let #Hyphen = INSTR($StateSUT,'-',1)
    if #Hyphen > 0
      let $StateSUT = SUBSTR($StateSUT,1,(#Hyphen - 1)) ||
                      SUBSTR($StateSUT,(#Hyphen + 1),7)
    end-if
  end-while
  while INSTR($StateSUT,' ',1) <> 0
    let #Spaces = INSTR($StateSUT,' ',1)
    if #Spaces > 0
      let $StateSUT = SUBSTR($StateSUT,1,(#Spaces - 1)) ||
                      SUBSTR($StateSUT,(#Spaces + 1),7)
    end-if
  end-while

  move $StateSUT to $StateSUT 0999999

  if $StateSUT = '*******'
    display '*** State Unemployment ID # too large in Company State Tax   ***'
    display '*** Table. Format is 0999999                                 ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  do Write-E-Record
end-procedure


begin-procedure After-Company

  let #Co_ExGrs_QTD = #Co_NlGrs_QTD - #Co_TxGrs_QTD
  let #Tot_Amt_Due_VDOL = #UnempAmtDue + #HlthCareAmtDue

  move 'Y'  to $Prnt_CoTxGrs
  move 'Y'  to $Prnt_CoExGrs

  do Print-Summary-Data('CoTotal')

  print '** NOTE: The QTD User-defined Hours represent hours for earnings codes specified on the Run Control Page.**'     (+2,27)

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Count_S to #Count_F
  
  if #Count_S > 0
    do Write-T-Record
  end-if
  
  do Write-C-Record

  add #Count_R to #Count_R_Total
  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  move 0 to #Tot_Amt_Due_VDOL
  move 0 to #UnempAmtDue
  move 0 to #HlthCareAmtDue
  move 0 to #FTEEmpCount
  move 0 to #Month1Count
  move 0 to #Month2Count
  move 0 to #Month3Count
  move 0 to #Month3CountFem
  move 0 to #Count_S
  move 0 to #Count_R
  move 0 to #HC-Elig
  move 0 to #HC-Elig-Covered-Elsewhere
  move 0 to #HC-Elig-Not-Covered
  move 0 to #HC-Not-Elig
  move 0 to #HC-Seasonal
  move 0 to #HC-Not-Applicable
  new-page
end-procedure


begin-procedure Write-A-Record

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  move $CompnyAdd1     to $TransmitterAddress
  move $CompnyCity     to $TransmitterCity
  move &CT.State       to $TransmitterState
  move &CT.Postal      to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  !Format date in MMDDYY format...
  do Format-Datetime($AsOfToday, $WorkDt, {DEFCMP}, '', '')
  let $TapeCreateDate = Substr($WorkDt, 5, 2) || Substr($WorkDt, 7, 2)
                     || Substr($WorkDt, 1, 4)

     write 10 from 'A':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
                'UTAX':4     !Col  15 -  18
                   $Sp:5     !Col  19 -  23
      $TransmitterName:50    !Col  24 -  73
   $TransmitterAddress:40    !Col  74 - 113
      $TransmitterCity:25    !Col 114 - 138
     $TransmitterState:2     !Col 139 - 140
                   $Sp:13    !Col 141 - 153
                  $Zip:5     !Col 154 - 158
             $ZipExtsn:5     !Col 159 - 163
   $TransmitterContact:30    !Col 164 - 193
     $TransmitterPhone:10    !Col 194 - 203
  $TransmitterPhoneExt:4     !Col 204 - 207
      $AuthorizationCd:6     !Col 208 - 213
                   $Sp:29    !Col 214 - 242
       $TapeCreateDate:8     !Col 243 - 250
                   $Sp:25    !Col 251 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Write-B-Record

     write 10 from 'B':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
                   $Sp:18    !Col  15 -  32
      $Blocking_Factor:2     !Col  33 -  34
                'UTAX':4     !Col  35 -  38
                   $Sp:108   !Col  39 - 146
      $TransmitterName:44    !Col 147 - 190
   $TransmitterAddress:35    !Col 191 - 225
      $TransmitterCity:20    !Col 226 - 245
     $TransmitterState:2     !Col 246 - 247
                   $Sp:5     !Col 248 - 252
                  $Zip:5     !Col 253 - 257
             $ZipExtsn:5     !Col 258 - 262
                   $Sp:13    !Col 263 - 275

  add 1 to #RecordCount

end-procedure

begin-procedure Write-C-Record
  multiply 100 times    #Co_NlGrs_QTD
  multiply 100 times    #Co_TxGrs_QTD
  multiply 100 times    #Co_ExGrs_QTD
  multiply 100 times    #Tot_Amt_Due_VDOL
  multiply 100 times    #UnempAmtDue
  multiply 100 times    #HlthCareAmtDue
  move #Co_NlGrs_QTD     to $Co_NlGrs_QTD     0999999999999
  move #Co_TxGrs_QTD     to $Co_TxGrs_QTD     0999999999999
  move #Co_ExGrs_QTD     to $Co_ExGrs_QTD     0999999999999
  move #Tot_Amt_Due_VDOL to $Tot_Amt_Due_VDOL   09999999999
  move #UnempAmtDue      to $UnempAmtDue        09999999999
  move #HlthCareAmtDue   to $HlthCareAmtDue     09999999999
  move #FTEEmpCount      to $FTEEmpCount             099999
  move #Month1Count      to $Month1Count              09999
  move #Month2Count      to $Month2Count              09999
  move #Month3Count      to $Month3Count              09999
  move #Month3CountFem   to $Month3CountFem           09999
 
     write 10 from 'C':1   !Col   1
             $StateSUT:7   !Col   2 -   8
      &TX.Balance_Year:4   !Col   9 -  12
       &TX.Balance_Qtr:1   !Col  13 
          $Month1Count:5   !Col  14 -  18
          $Month2Count:5   !Col  19 -  23
          $Month3Count:5   !Col  24 -  28
       $Month3CountFem:5   !Col  29 -  33
         $Co_NlGrs_QTD:13  !Col  34 -  46
       $Co_ExGrs_QTD:13  !Col  47 -  59
         $Co_TxGrs_QTD:13  !Col  60 -  72
          $UnempAmtDue:11  !Col  73 -  83
          $FTEEmpCount:6   !Col  84 -  89
       $HlthCareAmtDue:11  !Col  90 - 100
     $Tot_Amt_Due_VDOL:11  !Col 101 - 111
                   'N':1   !Col 112
                   'N':1   !Col 113
                   'N':1   !Col 114
                   'N':1   !Col 115

  add 1 to #RecordCount

end-procedure

begin-procedure Write-E-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  uppercase $TransmitterName

     write 10 from 'E':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
                   $Sp:9     !Col  15 -  23
      $TransmitterName:50    !Col  24 -  73
                   $Sp:93    !Col  74 - 166
                'UTAX':4     !Col 167 - 170
                  '50':2     !Col 171 - 172
             $StateSUT:7     !Col 173 - 179
                   $Sp:8     !Col 180 - 187
          $QtrEndMonth:2     !Col 188 - 189
                   $Sp:86    !Col 190 - 275

     add 1 to #Count_E
  add 1 to #RecordCount

end-procedure


begin-procedure Write-S-Record

  multiply 100 times #Hourly_Rt
  move #Hourly_Rt   to $Hourly_Rt 099999

  if $EmplType <> 'H'
    move '000000' to $Hourly_Rt
  end-if

  write 10 from 'S':1        !Col   1
       $NATIONAL_ID:9        !Col   2 -  10
          $LastName:20       !Col  11 -  30
         $FirstName:12       !Col  31 -  42
        $MidInitial:1        !Col  43
               '50':2        !Col  44 -  45
       $QtrEndMonth:2        !Col  46 -  47
           $RptYear:2        !Col  48 -  49
         $NlGrs_QTD:14       !Col  50 -  63
                $Sp:79       !Col  64 - 142
             'UTAX':4        !Col 143 - 146
                $Sp:8        !Col 147 - 154
          $StateSUT:7        !Col 155 - 161
                $Sp:71       !Col 162 - 232
          $EmplType:1        !Col 233
               $Sex:1        !Col 234
                $Sp:4        !Col 235 - 238
         $Hourly_Rt:6        !Col 239 - 244
                $Sp:31       !Col 245 - 275

  add 1 to #Count_S
  add 1 to #Tot_Count_S
  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  add 1 to #RecordCount

  move 'Y' to $RecordWritten

end-procedure


begin-procedure Write-T-Record

  move #Count_S      to $Count_S 0999999
  multiply 100 times    #Co_NlGrs_QTD
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999

  write 10 from 'T':1        !Col   1
           $Count_S:7        !Col   2 -   8
             'UTAX':4        !Col   9 -  12
      $Co_NlGrs_QTD:14       !Col  13 -  26
                $Sp:249      !Col  27 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Write-F-Record

  move #Tot_Count_S   to $Tot_Count_S 0999999999
  move #Count_E       to $Count_E 0999999999
  move #Tot_NlGrs_QTD to #F_NlGrs_QTD
  multiply 100 times     #F_NlGrs_QTD
  move #F_NlGrs_QTD   to $F_NlGrs_QTD 099999999999999

  write 10 from 'F':1        !Col   1
       $Tot_Count_S:10       !Col   2 -  11
           $Count_E:10       !Col  12 -  21
             'UTAX':4        !Col  22 -  25
       $F_NlGrs_QTD:15       !Col  26 -  40
                $Sp:235      !Col  41 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should not include commas)'
  input $Month1Count       maxlen=5  '   Month 1 employee count               '
  input $Month2Count       maxlen=5  '   Month 2 employee count               '
  input $Month3Count       maxlen=5  '   Month 3 employee count               '
  input $Month3CountFem    maxlen=5  '   Month 3 female employee count        '
  input $UnempAmtDue       maxlen=11 '   Unemployment Amount Due              '
  input $FTEEmpCount       maxlen=6  '   FTE Employment Count                 '
  input $HlthCareAmtDue    maxlen=11 '   Health Care Amount Due               '
  input $AuthorizationCd   maxlen=6  '   Authorization Code                   '

  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count
  move $Month3CountFem  to #Month3CountFem
  move $UnempAmtDue     to #UnempAmtDue
  move $FTEEmpCount     to #FTEEmpCount
  move $HlthCareAmtDue  to #HlthCareAmtDue
  
  let  #UnempAmtDue     = EDIT(#UnempAmtDue,'099999999.99')
  let  #HlthCareAmtDue  = EDIT(#HlthCareAmtDue,'099999999.99')
end-procedure

begin-procedure Electronic-Parameters

begin-select
EL.CONTACT_NAME_SSA
EL.TELEPHONE_NBR
EL.PHONE_EXTN
  
FROM PS_TAX960_PARM EL
end-select

end-procedure

begin-procedure Convert-Parameters
  if rtrim(&EL.CONTACT_NAME_SSA, ' ') = ''
    Show 'MMREF Parameters must be set up on SETUP Menu.'
    Show 'Re-execute after establishing MMREF Parameters.'
    Stop
  end-if
  
  Let $TransmitterContact       = translate(&EL.CONTACT_NAME_SSA,',','')
  
  let $TempPho1= translate (&EL.TELEPHONE_NBR,' ','')
  let $TempPho1= translate ($TempPho1,'-','')
  let $TempPho1= translate ($TempPho1,'(','')
  let $TempPho1= translate ($TempPho1,')','')
  let $TempPho1= translate ($TempPho1,'/','')
  let $TempPho1= translate ($TempPho1,'\','')
  move $TempPho1 to $TransmitterPhone

  do Is-String-Numeric ($TransmitterPhone, #Rtrn_Value)
  if (length($TempPho1) <> 10) or (#Rtrn_Value = 0)
  display '*** Warning: Contact Telephone Number is not 10 digits ' noline
  display ': ' noline
  display $TransmitterPhone
  display ''
  end-if

  If &EL.PHONE_EXTN <> 0
    move &EL.PHONE_EXTN to $TransmitterPhoneExt
  Else
    move '    ' to $TransmitterPhoneExt
  End-if

  move #RC_QTR_UI.Remitter_Number  to $AuthorizationCd  099999
end-procedure


begin-procedure Company-Run-Control

  move 0   to #Month1Count
  move 0   to #Month2Count
  move 0   to #Month3Count
  move 0   to #Month3CountFem
  move 0   to #UnempAmtDue
  move 0   to #FTEEmpCount
  move 0   to #HlthCareAmtDue
begin-select
VT.MONTH1_COUNT5
VT.MONTH2_COUNT5
VT.MONTH3_COUNT5
VT.MONTH3_COUNT5_FEM
VT.UNEMPLYMNT_AMT_DUE
VT.FTE_EMP_COUNT
VT.HLTH_CARE_AMT_DUE

  move &VT.MONTH1_COUNT5       to #Month1Count    
  move &VT.MONTH2_COUNT5       to #Month2Count     
  move &VT.MONTH3_COUNT5       to #Month3Count     
  move &VT.MONTH3_COUNT5_FEM   to #Month3CountFem  
  move &VT.UNEMPLYMNT_AMT_DUE  to #UnempAmtDue
  move &VT.FTE_EMP_COUNT       to #FTEEmpCount   
  move &VT.HLTH_CARE_AMT_DUE   to #HlthCareAmtDue

FROM PS_RC_TAX810VT_PRM VT
WHERE VT.OPRID       = $Prcs_OprID
  AND VT.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND VT.COMPANY     = $Company
end-select

end-procedure

begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'gethours.sqc'  !Get-Hours procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
