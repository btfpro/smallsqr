! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! DDDTRIGR: Audit Trigger                                              *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                       *
!                                                                      *
!***********************************************************************


#IFDEF MICROSOFT

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &MSTrigr1_RecName
A.SQLTABLENAME         &MSTrigr1_SqlTableName
A.RECTYPE              &MSTrigr1_RecType
A.OBJECTOWNERID        &MSTrigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &MSTrigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &MSTrigr1_TimestampFieldName
A.OPTTRIGFLAG          &MSTrigr1_OptTrigFlag

   let $MSTrigr_RecName = &MSTrigr1_RecName
   let $MSCheckForMobileTrigger = 'N'
   let $MSTrim_CheckForOptTrigger = &MSTrigr1_OptTrigFlag
   let $MSTrigr_SystemIdFieldName = &MSTrigr1_SystemIdFieldName
   let $MSTrigr_TimestampFieldName = &MSTrigr1_TimestampFieldName

   let $MSTrim_SystemIdFieldName = rtrim($MSTrigr_SystemIdFieldName,' ')
   let $MSTrim_TimestampFieldName = rtrim($MSTrigr_TimestampFieldName,' ')
   let $MSCheckForOptTrigger = rtrim($MSTrim_CheckForOptTrigger,' ')

   if ( ($MSTrim_SystemIdFieldName <> '')  and ($MSTrim_TimestampFieldName <> '') )
       let $MSCheckForMobileTrigger = 'Y'
   end-if

   if ( $MSCheckForMobileTrigger = 'Y' or  $MSCheckForOptTrigger = 'Y')
       let $MSTrigr1_TriggerName = 'PSI' || rtrim(&MSTrigr1_RecName,' ')
       do MSCheckTrgr                    
       if #MSfound = 0
           do Trigger1-Page-Control
              print &MSTrigr1_RecName      (+1,{C_One})
              print $MSTrigr1_TriggerName  (0,{C_Two})
       end-if 

       let $MSTrigr1_TriggerName = 'PSU' || rtrim(&MSTrigr1_RecName,' ')
       do MSCheckTrgr
       if #MSfound = 0
          do Trigger1-Page-Control
            print &MSTrigr1_RecName      (+1,{C_One})
            print $MSTrigr1_TriggerName  (0,{C_Two})
       end-if

       if $MSCheckForOptTrigger = 'Y'
          let $MSTrigr1_TriggerName = 'PSW' || rtrim(&MSTrigr1_RecName,' ')
          do MSCheckTrgr
          if #MSfound = 0
             do Trigger1-Page-Control
              print &MSTrigr1_RecName      (+1,{C_One})
              print $MSTrigr1_TriggerName  (0,{C_Two})
          end-if
       end-if
   end-if
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure MSCheckTrgr  
!----------------------------------------------------------------------!
move 0 to #MSfound
begin-SELECT on-Error=Rpt-SQL-Error
C.NAME
   move 1 to #MSfound
FROM SYSOBJECTS C
WHERE C.NAME = $MSTrigr1_TriggerName 
AND TYPE = 'TR'
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Name'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure

#ENDIF


#IFDEF ORACLE

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &ORTrigr1_RecName
A.SQLTABLENAME         &ORTrigr1_SqlTableName
A.RECTYPE              &ORTrigr1_RecType
A.OBJECTOWNERID        &ORTrigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &ORTrigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &ORTrigr1_TimestampFieldName
A.OPTTRIGFLAG          &ORTrigr1_OptTrigFlag

   let $ORTrigr_RecName = &ORTrigr1_RecName
   let $ORCheckForMobileTrigger = 'N'
   let $ORTrim_CheckForOptTrigger = &ORTrigr1_OptTrigFlag
   let $ORTrigr_SystemIdFieldName = &ORTrigr1_SystemIdFieldName
   let $ORTrigr_TimestampFieldName = &ORTrigr1_TimestampFieldName

   let $ORTrim_SystemIdFieldName = rtrim($ORTrigr_SystemIdFieldName,' ')
   let $ORTrim_TimestampFieldName = rtrim($ORTrigr_TimestampFieldName,' ')

   let $ORCheckForOptTrigger = rtrim($ORTrim_CheckForOptTrigger,' ')

   if ( ($ORTrim_SystemIdFieldName <> '')  and ($ORTrim_TimestampFieldName <> '') )
       let $ORCheckForMobileTrigger = 'Y'
   end-if

   if ( $ORCheckForMobileTrigger = 'Y')
       let $ORTrigr1_TriggerName = 'PSU' || rtrim(&ORTrigr1_RecName,' ')
          do ORCheckTrgr
          if #ORfound = 0
            do Trigger1-Page-Control
            print &ORTrigr1_RecName      (+1,{C_One})
            print $ORTrigr1_TriggerName  (0,{C_Two})
          end-if
   end-if

   if ($ORCheckForOptTrigger = 'Y')
       let $ORTrigr1_TriggerName = 'PSO' || rtrim(&ORTrigr1_RecName,' ')
          do ORCheckTrgr
          if #ORfound = 0
              do Trigger1-Page-Control
              print &ORTrigr1_RecName      (+1,{C_One})
              print $ORTrigr1_TriggerName  (0,{C_Two})
           end-if
   end-if  
  
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure ORCheckTrgr  
!----------------------------------------------------------------------!
move 0 to #ORfound
begin-SELECT on-Error=Rpt-SQL-Error
C.TRIGGER_NAME
   move 1 to #ORfound
FROM USER_TRIGGERS C
WHERE C.TRIGGER_NAME = $ORTrigr1_TriggerName 
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Name'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure

#ENDIF

#IFDEF DB2UNIX

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &DXTrigr1_RecName
A.SQLTABLENAME         &DXTrigr1_SqlTableName
A.RECTYPE              &DXTrigr1_RecType
A.OBJECTOWNERID        &DXTrigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &DXTrigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &DXTrigr1_TimestampFieldName
A.OPTTRIGFLAG          &DXTrigr1_OptTrigFlag

   let $DXTrigr_RecName = &DXTrigr1_RecName
   let $DXCheckForMobileTrigger = 'N'
   let $DXTrigr_SystemIdFieldName = &DXTrigr1_SystemIdFieldName
   let $DXTrigr_TimestampFieldName = &DXTrigr1_TimestampFieldName
   let $DXTrim_CheckForOptTrigger = &DXTrigr1_OptTrigFlag
   let $DXCheckForOptTrigger = rtrim($DXTrim_CheckForOptTrigger,' ')

   let $DXTrim_SystemIdFieldName = rtrim($DXTrigr_SystemIdFieldName,' ')
   let $DXTrim_TimestampFieldName = rtrim($DXTrigr_TimestampFieldName,' ')

   if ( ($DXTrim_SystemIdFieldName <> '')  and ($DXTrim_TimestampFieldName <> '') )
       let $DXCheckForMobileTrigger = 'Y'
   end-if

   if ( $DXCheckForMobileTrigger = 'Y')
        let $DXTrigr1_TriggerName = 'PSK' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
          if #DXfound = 0
            do Trigger1-Page-Control
            print &DXTrigr1_RecName      (+1,{C_One})
            print $DXTrigr1_TriggerName  (0,{C_Two})
          end-if

        let $DXTrigr1_TriggerName = 'PSI' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr                    
        if #DXfound = 0
            do Trigger1-Page-Control
            print &DXTrigr1_RecName      (+1,{C_One})
            print $DXTrigr1_TriggerName  (0,{C_Two})
        end-if
   end-if

   if ( $DXCheckForOptTrigger = 'Y')
        let $DXTrigr1_TriggerName = 'PSI' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr                    
        if #DXfound = 0
            do Trigger1-Page-Control
            print &DXTrigr1_RecName      (+1,{C_One})
            print $DXTrigr1_TriggerName  (0,{C_Two})
        end-if

       let $DXTrigr1_TriggerName = 'PSJ' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr                    
        if #DXfound = 0
            do Trigger1-Page-Control
            print &DXTrigr1_RecName      (+1,{C_One})
            print $DXTrigr1_TriggerName  (0,{C_Two})
        end-if

   if ( $DXCheckForMobileTrigger = 'Y')
        let $DXTrigr1_TriggerName = 'PSU' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
          if #DXfound = 0
            do Trigger1-Page-Control
            print &DXTrigr1_RecName      (+1,{C_One})
            print $DXTrigr1_TriggerName  (0,{C_Two})
          end-if
    end-if

    if ( $DXCheckForOptTrigger = 'Y' )

        let $DXTrigr1_TriggerName = 'PSV' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
            if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
            end-if      

        let $DXTrigr1_TriggerName = 'PSW' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
            if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
            end-if      


        let $DXTrigr1_TriggerName = 'PSX' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
            if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
            end-if      

        let $DXTrigr1_TriggerName = 'PSY' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
            if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
            end-if      

        let $DXTrigr1_TriggerName = 'PSD' || rtrim(&DXTrigr1_RecName,' ')
            do DXCheckTrgr
             if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
             end-if
        

        let $DXTrigr1_TriggerName = 'PSE' || rtrim(&DXTrigr1_RecName,' ')
        do DXCheckTrgr
            if #DXfound = 0
               do Trigger1-Page-Control
               print &DXTrigr1_RecName      (+1,{C_One})
               print $DXTrigr1_TriggerName  (0,{C_Two})
            end-if      
    end-if           
  end-if
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure DXCheckTrgr  
!----------------------------------------------------------------------!
move 0 to #DXfound
let $trigname = 'WHERE C.TRIGNAME = ''' || $DXTrigr1_TriggerName || ''''
begin-SELECT on-Error=Rpt-SQL-Error
C.TRIGNAME
   move 1 to #DXfound
FROM SYSCAT.TRIGGERS C
[$trigname]
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Name'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure

!----------------------------------------------------------------------!
begin-procedure DBXFindIfEffDt
!----------------------------------------------------------------------!

move 0 to #DBXEffDt

begin-SELECT on-Error=Rpt-SQL-Error
RECNAME
   move 1 to #DBXEffDt
FROM PSRECFIELD
WHERE FIELDNAME = 'EFFDT'
AND RECNAME = $DXTrigr_RecName
end-SELECT
end-procedure

#ENDIF

#IFDEF SYBASE

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &SYTrigr1_RecName
A.SQLTABLENAME         &SYTrigr1_SqlTableName
A.RECTYPE              &SYTrigr1_RecType
A.OBJECTOWNERID        &SYTrigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &SYTrigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &SYTrigr1_TimestampFieldName
A.OPTTRIGFLAG          &SYTrigr1_OptTrigFlag

   let $SYTrigr_RecName = &SYTrigr1_RecName
   let $SYCheckForMobileTrigger = 'N'
   let $SYTrigr_SystemIdFieldName = &SYTrigr1_SystemIdFieldName
   let $SYTrigr_TimestampFieldName = &SYTrigr1_TimestampFieldName
   let $SYTrim_CheckForOptTrigger = &SYTrigr1_OptTrigFlag
   let $SYCheckForOptTrigger = rtrim($SYTrim_CheckForOptTrigger,' ')

   let $SYTrim_SystemIdFieldName = rtrim($SYTrigr_SystemIdFieldName,' ')
   let $SYTrim_TimestampFieldName = rtrim($SYTrigr_TimestampFieldName,' ')

   if ( ($SYTrim_SystemIdFieldName <> '')  and ($SYTrim_TimestampFieldName <> '') )
       let $SYCheckForMobileTrigger = 'Y'
   end-if

   if ( $SYCheckForMobileTrigger = 'Y' or  $SYCheckForOptTrigger = 'Y')
       let $SYTrigr1_TriggerName = 'PSI' || rtrim(&SYTrigr1_RecName,' ')
          do SYCheckTrgr                    
          if #SYfound = 0
             do Trigger1-Page-Control
             print &SYTrigr1_RecName      (+1,{C_One})
             print $SYTrigr1_TriggerName  (0,{C_Two})
          end-if


       let $SYTrigr1_TriggerName = 'PSU' || rtrim(&SYTrigr1_RecName,' ')
          do SYCheckTrgr
          if #SYfound = 0
            do Trigger1-Page-Control
            print &SYTrigr1_RecName      (+1,{C_One})
            print $SYTrigr1_TriggerName  (0,{C_Two})
          end-if

      if $SYCheckForOptTrigger = 'Y'
             let $SYTrigr1_TriggerName = 'PSW' || rtrim(&SYTrigr1_RecName,' ')
             do SYCheckTrgr
             if #SYfound = 0
               do Trigger1-Page-Control
               print &SYTrigr1_RecName      (+1,{C_One})
               print $SYTrigr1_TriggerName  (0,{C_Two})
             end-if
      end-if
    end-if
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure SYCheckTrgr  
!----------------------------------------------------------------------!
move 0 to #SYfound
begin-SELECT on-Error=Rpt-SQL-Error
C.NAME
   move 1 to #SYfound
FROM SYSOBJECTS C
WHERE C.NAME = $SYTrigr1_TriggerName 
AND TYPE = 'TR'
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Name'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure

#ENDIF

#IFDEF INFORMIX

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &IFTrigr1_RecName
A.SQLTABLENAME         &IFTrigr1_SqlTableName
A.RECTYPE              &IFTrigr1_RecType
A.OBJECTOWNERID        &IFTrigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &IFTrigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &IFTrigr1_TimestampFieldName
A.OPTTRIGFLAG          &IFTrigr1_OptTrigFlag

   let $IFTrigr_RecName = &IFTrigr1_RecName
   let $IFCheckForMobileTrigger = 'N'
   let $IFTrigr_SystemIdFieldName = &IFTrigr1_SystemIdFieldName
   let $IFTrigr_TimestampFieldName = &IFTrigr1_TimestampFieldName
   let $IFTrim_CheckForOptTrigger = &IFTrigr1_OptTrigFlag
   let $IFCheckForOptTrigger = rtrim($IFTrim_CheckForOptTrigger,' ')

   let $IFTrim_SystemIdFieldName = rtrim($IFTrigr_SystemIdFieldName,' ')
   let $IFTrim_TimestampFieldName = rtrim($IFTrigr_TimestampFieldName,' ')

   if ( ($IFTrim_SystemIdFieldName <> '')  and ($IFTrim_TimestampFieldName <> '') )
       let $IFCheckForMobileTrigger = 'Y'
   end-if

   if ( $IFCheckForMobileTrigger = 'Y' or  $IFCheckForOptTrigger = 'Y')
       let $IFTrigr1_TriggerName = 'psi' || rtrim(LOWER(&IFTrigr1_RecName),' ')
       
           do IFCheckTrgr                    
             if #IFfound = 0
               do Trigger1-Page-Control
               print &IFTrigr1_RecName      (+1,{C_One})
               print $IFTrigr1_TriggerName  (0,{C_Two})
             end-if

       let $IFTrigr1_TriggerName = 'psu' || rtrim(LOWER(&IFTrigr1_RecName),' ')
          do IFCheckTrgr
          if #IFfound = 0
            do Trigger1-Page-Control
            print &IFTrigr1_RecName      (+1,{C_One})
            print $IFTrigr1_TriggerName  (0,{C_Two})
          end-if

       if $IFCheckForOptTrigger = 'Y'
             let $IFTrigr1_TriggerName = 'psd' || rtrim(LOWER(&IFTrigr1_RecName),' ')
             do IFCheckTrgr
             if #IFfound = 0
                do Trigger1-Page-Control
                print &IFTrigr1_RecName      (+1,{C_One})
                print $IFTrigr1_TriggerName  (0,{C_Two})
             end-if
       end-if


  end-if
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure IFCheckTrgr  
!----------------------------------------------------------------------!
move 0 to #IFfound
begin-SELECT on-Error=Rpt-SQL-Error
TRIGNAME
   move 1 to #IFfound
FROM 'informix'.SYSTRIGGERS
WHERE TRIGNAME = $IFTrigr1_TriggerName 
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Name'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure

#ENDIF

#IFDEF DB2

!----------------------------------------------------------------------!
begin-procedure DDDTRIGR-Trigger-in-DD-and-not-in-DB
!----------------------------------------------------------------------!

  move 0 to #rows
   let $AuditDescr = '(TRIGGER-1) Trigger defined in the Application '
      || 'Designer and not found in the Database:'

begin-SELECT on-Error=Rpt-SQL-Error
A.RECNAME              &D2Trigr1_RecName
A.SQLTABLENAME         &D2Trigr1_SqlTableName
A.RECTYPE              &D2Trigr1_RecType
A.OBJECTOWNERID        &D2Trigr1_ObjectOwnerid
A.SYSTEMIDFIELDNAME    &D2Trigr1_SystemIdFieldName
A.TIMESTAMPFIELDNAME   &D2Trigr1_TimestampFieldName
A.OPTTRIGFLAG          &D2Trigr1_OptTrigFlag

   let $D2Trigr_RecName = &D2Trigr1_RecName
   let $D2Trigr_ObjectOwnerId = &D2Trigr1_ObjectOwnerid
   let $D2CheckForMobileTrigger = 'N'
   let $D2Trigr_SystemIdFieldName = &D2Trigr1_SystemIdFieldName
   let $D2Trigr_TimestampFieldName = &D2Trigr1_TimestampFieldName
   let $D2Trim_CheckForOptTrigger = &D2Trigr1_OptTrigFlag
   let $D2CheckForOptTrigger = rtrim($D2Trim_CheckForOptTrigger,' ')


   let $D2Trim_SystemIdFieldName = rtrim($D2Trigr_SystemIdFieldName,' ')
   let $D2Trim_TimestampFieldName = rtrim($D2Trigr_TimestampFieldName,' ')

   if ( ($D2Trim_SystemIdFieldName <> '')  and ($D2Trim_TimestampFieldName <> '') )
       let $D2CheckForMobileTrigger = 'Y'
   end-if

   if ( $D2CheckForOptTrigger = 'Y')
         let $D2Trigr_Type = 'I'
         let $D2Trigr1_TriggerName = ' '
          do D2GetTrgrName
          do D2CheckTrgr                    
          if #D2found = 0
             do Trigger1-Page-Control
             print &D2Trigr1_RecName      (+1,{C_One})
             print $D2Trigr_Type  (0,{C_Two})
          end-if

         let $D2Trigr_Type = 'J'
         let $D2Trigr1_TriggerName = ' '
          do D2GetTrgrName
          do D2CheckTrgr                    
          if #D2found = 0
             do Trigger1-Page-Control
             print &D2Trigr1_RecName      (+1,{C_One})
             print $D2Trigr_Type  (0,{C_Two})
          end-if

   if $D2CheckForMobileTrigger = 'Y'
         let $D2Trigr_Type = 'I'
         let $D2Trigr1_TriggerName = ' '
          do D2GetTrgrName
          do D2CheckTrgr                    
          if #D2found = 0
             do Trigger1-Page-Control
             print &D2Trigr1_RecName      (+1,{C_One})
             print $D2Trigr_Type  (0,{C_Two})
          end-if

         let $D2Trigr_Type = 'L'
         let $D2Trigr1_TriggerName = ' '
          do D2GetTrgrName
          do D2CheckTrgr
          if #D2found = 0
            do Trigger1-Page-Control
            print &D2Trigr1_RecName      (+1,{C_One})
            print $D2Trigr_Type  (0,{C_Two})
          end-if

         let $D2Trigr_Type = 'U'
         let $D2Trigr1_TriggerName = ' '
          do D2GetTrgrName
          do D2CheckTrgr
          if #D2found = 0
            do Trigger1-Page-Control
            print &D2Trigr1_RecName      (+1,{C_One})
            print $D2Trigr_Type  (0,{C_Two})
          end-if
    end-if

    if $D2CheckForOptTrigger = 'Y'
           let $D2Trigr_Type = 'K'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'V'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'W'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'X'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'Y'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'D'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
           let $D2Trigr_Type = 'E'
           let $D2Trigr1_TriggerName = ' '
              do D2GetTrgrName
              do D2CheckTrgr
              if #D2found = 0
                do Trigger1-Page-Control
                print &D2Trigr1_RecName      (+1,{C_One})
                print $D2Trigr_Type  (0,{C_Two})
              end-if
    end-if          

  end-if
FROM PSRECDEFN A
WHERE A.RECTYPE IN (0, 7)
ORDER BY RECNAME
end-SELECT

   do Print-Audit-Result
   do Commit-Transaction
end-procedure
!----------------------------------------------------------------------!
begin-procedure D2CheckTrgr  
!----------------------------------------------------------------------!

move 0 to #D2found

begin-SELECT on-Error=Rpt-SQL-Error
NAME
   move 1 to #D2found
FROM SYSIBM.SYSTRIGGERS 
WHERE NAME = $D2Trigr1_TriggerName 
AND TBOWNER = CURRENT SQLID
end-SELECT
end-procedure


!----------------------------------------------------------------------!
begin-procedure D2GetTrgrName
!----------------------------------------------------------------------!

begin-SELECT on-Error=Rpt-SQL-Error
PSTRIGNAME    &D2TriggerName 
   let $D2Trigr1_TriggerName = &D2TriggerName 
FROM PSDB2TRIGGER
WHERE RECNAME = $D2Trigr_RecName
AND PSTRIGTYPE = $D2Trigr_Type
end-SELECT
end-procedure

begin-procedure Trigger1-Page-Control
   do Check-Page-Break
   if #Break = {TRUE}

      print 'Record Name'               (+2,{C_One})
      print 'Trigger Type'                  (0,{C_Two})
      print '---------------'           (+1,{C_One})
      print '---------------'                  (0,{C_Two})

   end-if
end-procedure


!----------------------------------------------------------------------!
begin-procedure D2FindIfEffDt
!----------------------------------------------------------------------!

move 0 to #DB2EffDt

begin-SELECT on-Error=Rpt-SQL-Error
RECNAME
   move 1 to #DB2EffDt
FROM PSRECFIELD
WHERE FIELDNAME = 'EFFDT'
AND RECNAME = $D2Trigr_RecName
end-SELECT
end-procedure
#ENDIF
