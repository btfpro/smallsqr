!***********************************************************************
!  TAX010PA :  Pennsylvania Occupational Tax Report                    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/01/17:11:30:42                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  654914                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup31.sqc'  !printer and page-size initialization
#include 'usarpt.sqc'   !Get USA variables


begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX010PA' to $ReportID
  move 'PA Occupational Tax Report' to $ReportTitle

  do Init-DateTime
  do Init-Number
   do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize
  do Select-Parameters
  do Process-Run-Control

if #MonthCd <> 0
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
end-if

  create-array name=TaxArray size=4
                             field=TAXMTD:number:14
                             field=TAXQTD:number:14
                             field=TAXYTD:number:14


  create-array name=SectCols size=4
                             field=TAXMTDCol:number
                             field=TAXQTDCol:number
                             field=TAXYTDCol:number

  put  76 into SectCols(1) TAXMTDCol
  put  92 into SectCols(1) TAXQTDCol
  put 108 into SectCols(1) TAXYTDCol

  create-array name=Totals size=4
                           field=TotalName:char
                           field=total_MTD:number:4
                           field=total_QTD:number:4
                           field=total_YTD:number:4
                           field=startCol:number:4
  put 'Grand Total'    into Totals(1) TotalName
  put 'Company Total'  into Totals(2) TotalName
  put 'LocalityTotal'  into Totals(3) TotalName
  put  24 into Totals(0) startCol(1)
  put  40 into Totals(0) startCol(2)
  put  55 into Totals(0) startCol(3)

  let $Tax_Classes = 'HCPDFMNVBUSRE'            !for storing array info
  let $TaxSection  = '1112222223333'            !section for tax class
  let $TaxesFound  = 'HCPDFMNVBUSRE'            !track which taxes found
  let #Num_Tax_Classes = 13                     !for tax entity
end-procedure

begin-procedure Process-Run-Control
  move &RC_TAX010PA.Balance_Year to $RptYear 9999
  move $RptYear to #RptYear
  move 0 to #Zero
  move &RC_TAX010PA.Balance_Qtr         to $RptQtr

  if &RC_TAX010PA.Balance_Qtr > 0
    move 'Q'          to $RptPeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '1'
        move '01' to $BegMonthCd
        let #BegAsOfMonth = to_number($BegMonthCD)
        let $BegAsOfMonth = $BegMonthCD
        move '03' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        move '1st Quarter' to $Period
        break
      when = '2'
        move '04' to $BegMonthCd
        let #BegAsOfMonth = to_number($BegMonthCD)
        let $BegAsOfMonth = $BegMonthCD
        move '06' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        move '2nd Quarter' to $Period
        break
      when = '3'
        move '07' to $BegMonthCd
        let #BegAsOfMonth = to_number($BegMonthCD)
        let $BegAsOfMonth = $BegMonthCD
        move '09' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        move '3rd Quarter' to $Period
        break
      when = '4'
        move '10' to $BegMonthCd
        let #BegAsOfMonth = to_number($BegMonthCD)
        let $BegAsOfMonth = $BegMonthCD
        move '12' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        move '4th Quarter' to $Period
        break
    end-evaluate
    let $Slct1 = 'AND  BALANCE_PERIOD  <= '
    move #AsofMonth to $Slct2 99
    let $Slct3 = ')'
    let $BalPerSlct = $Slct1 || $Slct2 || $Slct3


  else
    move &RC_TAX010PA.Balance_Period to #MonthCd
    let #AsofMonth = #MonthCd
    if #MonthCd <> 0
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      let $Period = $MonthName
      let $AsOfMonth = $MonthCD
    end-if
    let #RptQtr = to_number($RptQtr)
    let $Slct1 = 'AND  BALANCE_PERIOD  <= '
 !   let $Slct2 = #AsofMonth
    move #AsofMonth to $Slct2 99
    let $Slct3 = ')'
    let $BalPerSlct = $Slct1 || $Slct2 || $Slct3
  end-if

  if $EE_Detail_Flag = 'Y'
    if $Sort_Option  = 'L'
      let $Rpt_Type = 'YC'
      let $Rpt_Type_Desc = 'By Locality within Company'
    else
      if $Sort_Option = 'C'
        let $Rpt_Type = 'YL'
        let $Rpt_Type_Desc = 'By Company within Locality'
      end-if
    end-if
  else
    if $EE_Detail_Flag = 'N'
      if $Sort_Option  = 'L'
        let $Rpt_Type = 'NC'
        let $Rpt_Type_Desc = 'By Locality within Company'
      else
        if $Sort_Option = 'C'
          let $Rpt_Type = 'NL'
          let $Rpt_Type_Desc = 'By Company within Locality'
        end-if
      end-if
    end-if
  end-if
end-procedure

begin-heading 4
  #Include 'stdhdg01.sqc'  !standard heading 1
  print $Rpt_Type_Desc                                             (+0,1)
  print $Period                                                    (+0,54)
  print $RptYear                                                   (+0,66)
end-heading

begin-procedure Report
  evaluate $Rpt_Type
    when = 'YC'
       do Process-Company-Detail
       break
    when = 'YL'
       do Process-Locality-Detail
       break
    when = 'NC'
       do Process-Company-Summary
       break
    when = 'NL'
       do Process-Locality-Summary
       break
  end-evaluate

  move 1 to #totalRow
  move 1 to #changeLevel
  move 'Y' to $End
  if $Company = ''
    display 'No data selected'
    print 'No data selected'    (+5,1)  center
  else
    do Print-Totals
  end-if
end-procedure

begin-procedure Process-Company-Summary
begin-SELECT
C1.COMPANY   () on-break level=1 print=never before=Before-Company
                                             AFTER=AFTER-COMPANY
C1.STATE     () on-break level=2 print=never
C1.LOCALITY  () on-break level=3 print=never before=Before-State-Local
                                             AFTER=AFTER-STATE-LOCAL
C1.TAX_CLASS () on-break level=4 print=never  after=After-Class
C1.BALANCE_QTR
C1.BALANCE_PERIOD
C1.TAX_MTD
C1.TAX_QTD
C1.TAX_YTD

  move &C1.Tax_Class to $priorTaxClass
  let #i = INSTR($Tax_Classes,&C1.Tax_Class,1)
  if &C1.Balance_Period = to_number($AsOfMonth)
      ARRAY-ADD &C1.Tax_MTD to TAXARRAY(1) TAXMTD(#I)
  end-if
  if &C1.Balance_Qtr = to_number($AsOfQtr)
      ARRAY-ADD &C1.Tax_QTD to TAXARRAY(1) TAXQTD(#I)
  end-if
  ARRAY-ADD &C1.Tax_YTD to TAXARRAY(1) TAXYTD(#I)

FROM  PS_TAX_BALANCE C1
WHERE C1.BALANCE_YEAR = #RptYear
  AND C1.BALANCE_ID    = $Calendar_Year_Id
  AND C1.STATE         = 'PA'
  AND C1.LOCALITY      <> ' '
  AND C1.TAX_CLASS     = 'P'
  AND C1.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  COMPANY       = C1.COMPANY
         AND  EMPLID        = C1.EMPLID
         AND  STATE         = C1.STATE
         AND  LOCALITY      = C1.LOCALITY
         AND  TAX_CLASS     = C1.TAX_CLASS
         AND  BALANCE_ID    = C1.BALANCE_ID
         AND  BALANCE_YEAR  = C1.BALANCE_YEAR
[$BalPerSlct]
ORDER BY C1.COMPANY, C1.STATE, C1.LOCALITY, C1.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Locality-Summary
begin-SELECT
C2.LOCALITY  () on-break level=1 print=never before=Before-State-Local2
                                             AFTER=AFTER-STATE-LOCAL
C2.COMPANY   () on-break level=2 print=never before=Before-Company2
                                             AFTER=AFTER-COMPANY
C2.STATE
C2.TAX_CLASS () on-break level=3 print=never  after=After-Class
C2.BALANCE_QTR
C2.BALANCE_PERIOD
C2.TAX_MTD
C2.TAX_QTD
C2.TAX_YTD

  move &C2.Tax_Class to $priorTaxClass
  let #i = INSTR($Tax_Classes,&C2.Tax_Class,1)
  if &C2.Balance_Period = to_number($AsOfMonth)
     ARRAY-ADD &C2.Tax_MTD to TAXARRAY(1) TAXMTD(#I)
  end-if
  if &C2.Balance_Qtr = to_number($AsOfQtr)
     ARRAY-ADD &C2.Tax_QTD to TAXARRAY(1) TAXQTD(#I)
  end-if
  ARRAY-ADD &C2.Tax_YTD to TAXARRAY(1) TAXYTD(#I)

FROM  PS_TAX_BALANCE C2
WHERE C2.BALANCE_YEAR = #RptYear
  AND C2.BALANCE_ID    = $Calendar_Year_Id
  AND C2.STATE         = 'PA'
  AND C2.LOCALITY      <> ' '
  AND C2.TAX_CLASS     = 'P'
  AND C2.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  COMPANY       = C2.COMPANY
         AND  EMPLID        = C2.EMPLID
         AND  STATE         = C2.STATE
         AND  LOCALITY      = C2.LOCALITY
         AND  TAX_CLASS     = C2.TAX_CLASS
         AND  BALANCE_ID    = C2.BALANCE_ID
         AND  BALANCE_YEAR  = C2.BALANCE_YEAR
[$BalPerSlct]
ORDER BY C2.LOCALITY, C2.COMPANY, C2.TAX_CLASS
end-SELECT
end-procedure


begin-procedure Process-Company-Detail
begin-SELECT
C3.COMPANY   () on-break level=1 print=never before=Before-Company3
                                             AFTER=AFTER-COMPANY
C3.STATE
C3.LOCALITY  () on-break level=2 print=never before=Before-State-Local3
                                             AFTER=AFTER-STATE-LOCAL
C3.TAX_CLASS () on-break level=3 print=never  after=After-Class
C3.BALANCE_QTR
C3.BALANCE_PERIOD
C3.TAX_MTD
C3.TAX_QTD
C3.TAX_YTD
C3A.EMPLID
C3A.NAME

  move &C3.Tax_Class to $priorTaxClass
  let #i = INSTR($Tax_Classes,&C3.Tax_Class,1)

  print &C3A.EMPLID (+1,1)
  if $Print_SSN = 'Y'
     move  &C3A.EMPLID to $get_SSN
     do Get-SSN
     print $NID     (0,14)
  end-if
  print &C3A.NAME   (0,36)

  if &C3.Balance_Period = to_number($AsOfMonth)
     do Format-Number(&C3.Tax_MTD, $out, 'b99,999,999.99mi')
     ARRAY-ADD &C3.Tax_MTD to TAXARRAY(1) TAXMTD(#I)
  else
     do Format-Number(#Zero, $out,  'b99,999,999.99mi')
  end-if
  print $out (0,76)
  if &C3.Balance_Qtr = to_number($AsOfQtr)
     do Format-Number(&C3.Tax_QTD, $out, 'b99,999,999.99mi')
     ARRAY-ADD &C3.Tax_QTD to TAXARRAY(1) TAXQTD(#I)
  else
     do Format-Number(#Zero, $out, 'b99,999,999.99mi')
  end-if
  print $out (0,92)
  do Format-Number(&C3.Tax_YTD, $out, 'b99,999,999.99mi')
  print $out (0,108)
  ARRAY-ADD &C3.Tax_YTD to TAXARRAY(1) TAXYTD(#I)

FROM  PS_TAX_BALANCE C3, PS_PERSON_NAME C3A
WHERE C3.EMPLID       = C3A.EMPLID
  AND C3.BALANCE_YEAR = #RptYear
  AND C3.BALANCE_ID    = $Calendar_Year_Id
  AND C3.STATE         = 'PA'
  AND C3.LOCALITY      <> ' '
  AND C3.TAX_CLASS     = 'P'
  AND C3.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  COMPANY       = C3.COMPANY
         AND  EMPLID        = C3.EMPLID
         AND  STATE         = C3.STATE
         AND  LOCALITY      = C3.LOCALITY
         AND  TAX_CLASS     = C3.TAX_CLASS
         AND  BALANCE_ID    = C3.BALANCE_ID
         AND  BALANCE_YEAR  = C3.BALANCE_YEAR
[$BalPerSlct]
ORDER BY C3.COMPANY, C3.LOCALITY, C3.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Locality-Detail
begin-SELECT
C4.LOCALITY  () on-break level=1 print=never before=Before-State-Local4
                                             AFTER=AFTER-STATE-LOCAL
C4.COMPANY   () on-break level=2 print=never before=Before-Company4
                                             AFTER=AFTER-COMPANY
C4.STATE
C4.TAX_CLASS () on-break level=3 print=never  after=After-Class
C4.BALANCE_QTR
C4.BALANCE_PERIOD
C4.TAX_MTD
C4.TAX_QTD
C4.TAX_YTD
C4A.EMPLID
C4A.NAME

  move &C4.Tax_Class to $priorTaxClass
  let #i = INSTR($Tax_Classes,&C4.Tax_Class,1)

  print &C4A.EMPLID (+1,1)
  if $Print_SSN = 'Y'
     move  &C4A.EMPLID to $get_SSN
     do Get-SSN
     print $NID     (0,14)
  end-if
  print &C4A.NAME   (0,36)

  if &C4.Balance_Period = to_number($AsOfMonth)
     do Format-Number(&C4.Tax_MTD, $out, 'b99,999,999.99mi')
     ARRAY-ADD &C4.Tax_MTD to TAXARRAY(1) TAXMTD(#I)
  else
     do Format-Number(#Zero, $out,  'b99,999,999.99mi')
  end-if
  print $out (0,76)
  if &C4.Balance_Qtr = to_number($AsOfQtr)
     do Format-Number(&C4.Tax_QTD, $out, 'b99,999,999.99mi')
     ARRAY-ADD &C4.Tax_QTD to TAXARRAY(1) TAXQTD(#I)
  else
     do Format-Number(#Zero, $out, 'b99,999,999.99mi')
  end-if
  print $out (0,92)
  do Format-Number(&C4.Tax_YTD, $out, 'b99,999,999.99mi')
  print $out (0,108)
  ARRAY-ADD &c4.Tax_YTD to TAXARRAY(1) TAXYTD(#I)

FROM  PS_TAX_BALANCE C4, PS_PERSON_NAME C4A
WHERE C4.EMPLID        = C4A.EMPLID
  AND C4.BALANCE_YEAR = #RptYear
  AND C4.BALANCE_ID    = $Calendar_Year_Id
  AND C4.STATE         = 'PA'
  AND C4.LOCALITY      <> ' '
  AND C4.TAX_CLASS     = 'P'
  AND C4.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  COMPANY       = C4.COMPANY
         AND  EMPLID        = C4.EMPLID
         AND  STATE         = C4.STATE
         AND  LOCALITY      = C4.LOCALITY
         AND  TAX_CLASS     = C4.TAX_CLASS
         AND  BALANCE_ID    = C4.BALANCE_ID
         AND  BALANCE_YEAR  = C4.BALANCE_YEAR
[$BalPerSlct]
ORDER BY C4.LOCALITY, C4.COMPANY, C4.TAX_CLASS
end-SELECT
end-procedure

!****************************************************************************
! Get SSN from PERS_NID                                                     *
!****************************************************************************
begin-procedure Get-SSN

begin-SELECT On-Error=Not-Found
P.NATIONAL_ID
FROM PS_PERS_NID P
WHERE P.EMPLID           = $get_SSN
  AND P.COUNTRY          = {NID_Country}
  AND P.NATIONAL_ID_TYPE = $Payroll_NID_Type
end-SELECT

if isblank(&P.NATIONAL_ID)
   move 'Not/Found' to $NID
else
   move 'xxx-xx-xxxx' to $SSN_mask
   move &P.NATIONAL_ID  to $NID :$SSN_mask
end-if

end-procedure

!****************************************************************************
! If NID can not be retireved for employee replace with message             *
!****************************************************************************
begin-procedure Not-Found

  move 'Not/Found' to $NID

end-procedure

begin-procedure Before-Company
  move &C1.Company to $Company
  do Get-Company-Data
  let $Emplid_Literal  = ' '
  let $SSN_Literal     = ' '
  let $Name_Literal    = ' '
  do Company-Heading1A
  print ' '                                                       (+1,1)
end-procedure

begin-procedure Before-Company2
  move &C2.Company to $Company
  do Get-Company-Data
  do Company-Heading2B
end-procedure

begin-procedure Before-Company3
  move &C3.Company to $Company
  do Get-Company-Data
  let $Emplid_Literal  = 'EMPLID'
  if $Print_SSN = 'Y'
     let $SSN_Literal     = 'SSN'
  else
     let $SSN_Literal     = ' '
  end-if
  let $Name_Literal    = 'NAME'
  do Company-Heading1A
  print ' '                                                       (+1,1)
end-procedure

begin-procedure Before-Company4
  move &C4.Company to $Company
  do Get-Company-Data
  do Company-Heading2B
  print ' '                                                       (+1,1)
end-procedure

begin-procedure After-Company
  evaluate $Rpt_Type
    when = 'YC'
    when = 'NC'
      move 2 to #totalRow
      move 2 to #changeLevel
      do Print-Totals
      new-page
      break
    when = 'YL'
    when = 'NL'
      move 2 to #totalRow
      move 2 to #changeLevel
       do Print-State-Local
       break
  end-evaluate
end-procedure

begin-procedure Before-State-Local
  let $State = rtrim(&C1.State, ' ')
  do Get-State-Tax-Data

  if RTRIM(&C1.Locality, ' ') <> ''
    move &C1.Locality to $Locality
    do Get-Local-Tax-Data
  end-if
  do Company-Heading2A
end-procedure

begin-procedure Before-State-Local2
  let $State = rtrim(&C2.State, ' ')
  do Get-State-Tax-Data

  if RTRIM(&C2.Locality, ' ') <> ''
    move &C2.Locality to $Locality
    do Get-Local-Tax-Data
  end-if
  let $Emplid_Literal  = ' '
  let $SSN_Literal     = ' '
  let $Name_Literal    = ' '
  do Company-Heading1B
end-procedure

begin-procedure Before-State-Local3
  let $State = rtrim(&C3.State, ' ')
  do Get-State-Tax-Data

  if RTRIM(&C3.Locality, ' ') <> ''
    move &C3.Locality to $Locality
    do Get-Local-Tax-Data
  end-if
  do Company-Heading2A
  print ' '                                                       (+1,1)
end-procedure

begin-procedure Before-State-Local4
  let $State = rtrim(&C4.State, ' ')
  do Get-State-Tax-Data

  if RTRIM(&C4.Locality, ' ') <> ''
    move &C4.Locality to $Locality
    do Get-Local-Tax-Data
  end-if
  let $Emplid_Literal  = 'EMPLID'
  if $Print_SSN = 'Y'
     let $SSN_Literal     = 'SSN'
  else
     let $SSN_Literal     = ' '
  end-if
  let $Name_Literal    = 'NAME'
  do Company-Heading1B
end-procedure

begin-procedure Company-Heading1A
  print 'Company ID'                                               (+1,1)
  print $Company                                                   (0,13)
  print 'Company Name'                                             (+1,1)
  print &CT.Descr                                                  (0,16)
  print $Emplid_Literal                                            (+2,1)
  print $SSN_Literal                                               (0,14)
  print $Name_Literal                                              (0,36)
  print 'MTD'                                                      (0,85)
  print 'QTD'                                                      (0,101)
  print 'YTD'                                                      (0,117)
  print 'Tax'                                                      (+1,85)
  print 'Tax'                                                      (0,101)
  print 'Tax'                                                      (0,117)
  print 'Locality ID/Name'                                         (+1,7)
  print ' '                                                        (+1,1)
end-procedure

begin-procedure Company-Heading2A
  let $Locality = rtrim($Locality, ' ')
  let $Locality_Heading = $Locality || '/' || &A.Locality_Name
  print $Locality_Heading                                         (0,7)
end-procedure

begin-procedure Company-Heading1B
  print 'Locality ID'                                               (+1,1)
  print $Locality                                                   (0,15)
  print 'Locality Name'                                             (+1,1)
  print &A.Locality_Name                                            (0,17)
  print $Emplid_Literal                                             (+2,1)
  print $SSN_Literal                                                (0,14)
  print $Name_Literal                                               (0,36)
  print 'MTD'                                                       (0,85)
  print 'QTD'                                                       (0,101)
  print 'YTD'                                                       (0,117)
  print 'Tax'                                                       (+1,85)
  print 'Tax'                                                       (0,101)
  print 'Tax'                                                       (0,117)
  print 'Company ID/Name'                                           (+1,7)
  print ' '                                                         (+1,1)
end-procedure

begin-procedure Company-Heading2B
  let $Company = rtrim($Company, ' ')
  let $Company_Heading = $Company || '/' || &CT.Descr
  print $Company_Heading                                         (+1,7)
end-procedure

begin-procedure After-State-Local
  evaluate $Rpt_Type
    when = 'YL'
    when = 'NL'
      move 2 to #totalRow
      move 2 to #changeLevel
      do Print-Totals
      new-page
      break
    when = 'YC'
    when = 'NC'
      move 2 to #totalRow
      move 2 to #changeLevel
      do Print-State-Local
      break
  end-evaluate
end-procedure

begin-procedure After-Class
  let $TaxesFound = TRANSLATE($TaxesFound,$priorTaxClass,'x')
end-procedure

begin-procedure Print-State-Local
  move 1 to #i
  let #ToDate = COND($RptPeriod = 'M',1,2)
  while #ToDate <= 3
    move 0 to #priorSection
    move 1 to #i
    while #i <= #Num_Tax_Classes
      if SUBSTR($TaxesFound,#i,1) = 'x'
        let #Section = TO_NUMBER(SUBSTR($TaxSection,#i,1))
        if #Section <> #priorSection
          move #startline to #line
        end-if
        move #Section to #priorSection
        get #TAXMTDCol #TAXQTDCol #TAXYTDCol
          from SectCols(#Section) TAXMTDCol TAXQTDCol TAXYTDCol
        get #TAXMTD #TAXQTD #TAXYTD
          from TaxArray(1) TAXMTD(#i) TAXQTD(#i) TAXYTD(#i)
        evaluate $Rpt_Type
          when = 'YL'
            if #ToDate = 2
              let $TotalCoName = 'Company ' || $Company || ' Total'
              print $TotalCoName (+2,7)
              do Format-Number(#TAXMTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXMTDCol)
              do Format-Number(#TAXQTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXQTDCol)
              do Format-Number(#TAXYTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXYTDCol)
            end-if
            break
          when = 'YC'
            if #ToDate = 2
              let $Local_Tot_Desc = 'Locality ' || $Locality || ' Total'
              print $Local_Tot_Desc (+2,7)
              do Format-Number(#TAXMTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXMTDCol)
              do Format-Number(#TAXQTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXQTDCol)
              do Format-Number(#TAXYTD, $out, 'b99,999,999.99mi')
              print $out         (0,#TAXYTDCol)
              print ' '             (+1,1)
            end-if
            break
          when = 'NC'
          when = 'NL'
           if #ToDate = 2
             do Format-Number(#TAXMTD, $out, 'b99,999,999.99mi')
             print $out         (0,#TAXMTDCol)
             do Format-Number(#TAXQTD, $out, 'b99,999,999.99mi')
             print $out         (0,#TAXQTDCol)
             do Format-Number(#TAXYTD, $out, 'b99,999,999.99mi')
             print $out         (0,#TAXYTDCol)
           end-if
           break
        end-evaluate
        evaluate #ToDate
            when = 1
              array-add #TAXYTD to Totals(2) total_MTD(#Section)
              array-add #TAXMTD to Totals(2) total_QTD(#Section)
              array-add #TAXQTD to Totals(2) total_YTD(#Section)
            when = 2
              array-add #TAXYTD to Totals(2) total_YTD(#Section)
              array-add #TAXMTD to Totals(2) total_MTD(#Section)
              array-add #TAXQTD to Totals(2) total_QTD(#Section)
            when = 3
              array-add #TAXYTD to Totals(3) total_YTD(#Section)
              array-add #TAXMTD to Totals(3) total_MTD(#Section)
              array-add #TAXQTD to Totals(3) total_QTD(#Section)
        end-evaluate

        put 0 0 0
              into TaxArray(1) TAXMTD(#i) TAXQTD(#i) TAXYTD(#i)
        add 1 to #line
      end-if
      add 1 to #i
    end-while
    add 1 to #ToDate
  end-while

  move 0 to #MaxCount
  let $TaxesFound = $Tax_Classes

  next-listing skiplines=1 need=6
end-procedure

begin-procedure Print-Totals
  while #totalRow >= #changeLevel
    let #rollRow = #totalRow - 1
    get $TotalName from Totals(#totalRow) TotalName

    evaluate $Rpt_Type
      when = 'YL'
      when = 'NL'
        if $TotalName = 'Company Total'
          let $TotalName = 'Locality ' || $Locality || ' Total'
        end-if
        break
      when = 'YC'
      when = 'NC'
        if $TotalName = 'Company Total'
          let $TotalName = 'Company ' || $Company || ' Total'
        end-if
        break
    end-evaluate


    print $TotalName (+1,7)
    move 1 to #i
    while #i <= 3
      move 0 to #subLine
      get #total_MTD from Totals(#totalRow) total_MTD(#i)
      do Format-Number(#total_MTD, $out, 'b99,999,999.99mi')
      print $out (0,76)
      get #total_QTD from Totals(#totalRow) total_QTD(#i)
      do Format-Number(#total_QTD, $out, 'b99,999,999.99mi')
      print $out (0,92)
      get #total_YTD from Totals(#totalRow) total_YTD(#i)
      do Format-Number(#total_YTD, $out, 'b99,999,999.99mi')
      print $out (0,108)
      array-add #total_MTD #total_QTD #total_YTD
          to Totals(#rollRow) total_MTD(#i) total_QTD(#i) total_YTD(#i)
      put 0 0 0
          into Totals(#totalRow) total_MTD(#i) total_QTD(#i) total_YTD(#i)
      add 1 to #i
      if #i <= 3
        if $RptPeriod = 'M'
          position (-2)
        else
          position (-1)
        end-if
      end-if
    end-while
    subtract 1 from #totalRow
  end-while
  if $End = 'Y'
    do Reset
  end-if
end-procedure

begin-procedure Select-Parameters

begin-select

RC_TAX010PA.BALANCE_YEAR
RC_TAX010PA.BALANCE_QTR
RC_TAX010PA.BALANCE_PERIOD
RC_TAX010PA.EE_DETAIL_FLAG
RC_TAX010PA.SORT_OPTION
RC_TAX010PA.PRINT_SSN

FROM  PS_RC_TAX010PA RC_TAX010PA
WHERE RC_TAX010PA.OPRID          = $Prcs_OprID
AND   RC_TAX010PA.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

  let  #RC_TAX010PA.Balance_Year     = &RC_TAX010PA.Balance_Year
  let  #RC_TAX010PA.Balance_Qtr      = &RC_TAX010PA.Balance_Qtr
  let  #RC_TAX010PA.Balance_Period   = &RC_TAX010PA.Balance_Period
  let  $EE_Detail_Flag               = &RC_TAX010PA.EE_Detail_Flag
  let  $Sort_Option                  = &RC_TAX010PA.Sort_Option
  let  $Print_SSN                    = &RC_TAX010PA.PRINT_SSN

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'getqtrcd.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
