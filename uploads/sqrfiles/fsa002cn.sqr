!*********************************************************
!  FSA002CN:  Flexible Spending Account Closure Process  *
!             for Canadian Customers                     *
!*********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:09:02:50                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!
! This program prints the annual Account Closure Statement for all
! participants who had an active FSA account at the end of the calendar
! year. The program also sets each active account's status to "Closed".
!
!***********************************************************************

#Include 'setenv.sqc'    !Set Database Environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

!**************************************
Begin-Program
!**************************************

  do Init-Report
  display 'Report Began at: ' NoLine
  do display-time
  do Process-Main
  display 'Report Ended at: ' NoLine
  do display-time
  do StdAPI-Term
  End-Program

!**************************************
Begin-Procedure Init-Report
!**************************************

  do Init_Printer
  do Init-Number
  do Init-DateTime
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do StdAPI-Init
  let $ReportID    = 'FSA002CN'

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  do Initialization

  if ($PRCS_Process_Instance = '')
    do Ask-Values
  else
    do Get-Values
  end-if
  if ($FSA_Acct_Closure = 'Y')
    let $ReportTitle = $Fsa002cn_Title_Ac_Cl
  else
    let $ReportTitle = $Fsa002cn_Title_Ac_Prcl
  end-if
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

End-Procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from FSA002CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('FSA002CN', 'TITLE_AC_CL'  ,   $Fsa002cn_Title_Ac_Cl  , #dummy_width)
   do Get_Field_Information ('FSA002CN', 'TITLE_AC_PRCL' ,  $Fsa002cn_Title_Ac_Prcl  ,        #dummy_width)
   do Get_Field_Information ('FSA002CN', 'PLAN_TYP' ,       $Fsa002cn_Plan_Typ ,      #dummy_width)
   do Get_Field_Information ('FSA002CN', 'BEN_PR' ,         $Fsa002cn_Ben_Pr ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'GRND_TOT',        $Fsa002cn_Grnd_Tot ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'BEN_PR_TOT' ,     $Fsa002cn_Ben_Pr_Tot ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'PL_TYP_TOT' ,     $Fsa002cn_Pl_Typ_Tot ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'BEN_PL_TOT' ,     $Fsa002cn_Ben_Pl_Tot ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'BEN_PL' ,         $Fsa002cn_Ben_Pl ,       #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR1' ,       $Fsa002cn_Col_Hdr1 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR2' ,       $Fsa002cn_Col_Hdr2 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR3' ,       $Fsa002cn_Col_Hdr3 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR4' ,       $Fsa002cn_Col_Hdr4 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR5' ,       $Fsa002cn_Col_Hdr5 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR6' ,       $Fsa002cn_Col_Hdr6 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR7' ,       $Fsa002cn_Col_Hdr7 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'COL_HDR8' ,       $Fsa002cn_Col_Hdr8 ,   #dummy_width)
   do Get_Field_Information ('FSA002CN', 'CAL_YR' ,         $Fsa002cn_Cal_Yr ,     #dummy_width)
   do Get_Field_Information ('FSA002CN', 'DATA' ,           $Fsa002cn_Data ,       #dummy_width)
end-procedure
!**************************************
Begin-Procedure Initialization
!**************************************

  create-array name=Totals size=6
               field=TotalName:char
               field=total:number:10
               field=startCol:number:10
  put $Fsa002cn_Grnd_Tot         into Totals(1) TotalName
  put $Fsa002cn_Ben_Pr_Tot       into Totals(2) TotalName
  put $Fsa002cn_Pl_Typ_Tot       into Totals(3) TotalName
  put $Fsa002cn_Ben_Pl_Tot       into Totals(4) TotalName
  put 52 64 76 88 100 112 126 138 149 161 into Totals(0) -
    startCol(0) startCol(1) startCol(2) startCol(3) startCol(4)
    startCol(5) startCol(6) startCol(7) startCol(8) startCol(9)

End-Procedure

!*************************************************
Begin-Procedure Ask-Values
!*************************************************

  input $FSA_Acct_Closure -
     'Close FSA Accounts in addition to running Report (Y/N)'
  let $FSA_Acct_Closure = UPPER(RTRIM($FSA_Acct_Closure, ' '))

End-Procedure

!*************************************************
Begin-Procedure Get-Values
!*************************************************

  do Select-Parameters
  do Get-FSA-Acct-Closure

End-Procedure

!**************************************
Begin-Heading 8
!**************************************

#Include 'stdhdgtr.sqc'

  let $Out = $Fsa002cn_Bal_Yr  || ' ' || Edit(&A.Calendar_Year, '9999')
  print $Out                   (3) CENTER
  print $Fsa002cn_Ben_Pr       (+1,1)
  print $BenProgram            (0,+1)
  print ' - '                  ()
  print $BenefitProgramName    ()
  print $Fsa002cn_Plan_Typ     (+1,1)
  print $PlanType              (0,+1)
  print ' - '                  ()
  print $XlatLongName          ()
  print $Fsa002cn_Ben_Pl       (+1,1)
  print $BenPlan               (0,+1)
  print '                                                               '  (+1,1)
  print $Fsa002cn_Col_Hdr1      ()
  print $Fsa002cn_Col_Hdr2      ()
  print $Fsa002cn_Col_Hdr3      (+1,1)
  print $Fsa002cn_Col_Hdr4      ()
  print $Fsa002cn_Col_Hdr5      ()
  print $Fsa002cn_Col_Hdr6      (+1,1)
  print $Fsa002cn_Col_Hdr7      ()
  print $Fsa002cn_Col_Hdr8      ()

End-Heading

!**************************************
Begin-Procedure Process-Main
!**************************************

  do Get-System-Date-Override
  do Format-DateTime($AsOfToday, $TempDate, {DEFCMP}, '', '')
  let #Year  = To_Number(SubStr($TempDate, 1, 4))

Begin-Select
A.CALENDAR_YEAR

  move &A.Calendar_Year to $Calendar_Year
  do DTU-Format-Date(&A.Calendar_Year, 1, 1, $YearBegin)
  do Convert-From-DTU-Date($YearBegin, $YearBegin)
  do DTU-Format-Date(&A.Calendar_Year, 12, 31, $YearEnd)
  do Convert-From-DTU-Date($YearEnd, $YearEnd)
A.FSA_RUN_ID

  do Retrieve-Benefit-Programs

FROM  PS_FSA_RUNCTL A
WHERE #Year = (A.CALENDAR_YEAR + 1)
ORDER BY A.FSA_RUN_ID
End-Select

  if ($FSA_Acct_Closure = 'Y')
    do Close-FSA-Acounts
  end-if

End-Procedure

!**************************************
Begin-Procedure Close-FSA-Acounts
!**************************************

let $sql-statement = 'FSA002CN.SQR,Close-FSA-Acounts,FSA_BENEFIT,Update'
Begin-SQL on-error=SQL-Error
UPDATE PS_FSA_BENEFIT
   SET FSA_ACCT_STATUS = 'C'
 WHERE (FSA_ACCT_STATUS = 'A'
    OR  (FSA_ACCT_STATUS = 'I'
   AND   COVERAGE_END_DT IS NOT NULL))
   AND COVERAGE_BEGIN_DT BETWEEN $YearBegin AND $YearEnd;
End-SQL

End-Procedure

!**************************************
Begin-Procedure Retrieve-Benefit-Programs
!**************************************

Begin-Select
B.BENEFIT_PROGRAM () On-Break Print=Never Level=1
                     Procedure=Benefit-Program-Change
                     Save=$BenProgram
B.EFFDT,B.DESCR

  move &B.Benefit_program to $BenProgram
  do Get-Balance-Year-Data
  do Get-Benefit-Program-Name
  do Prepare-Account-Closure-Report

FROM  PS_BEN_DEFN_PGM B
WHERE B.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_BEN_DEFN_PGM
       WHERE  BENEFIT_PROGRAM = B.BENEFIT_PROGRAM
         AND  EFFDT          <= $YearEnd)
  AND B.EFF_STATUS        = 'A'
  AND B.FSA_RUN_ID        = &A.FSA_Run_ID
ORDER BY B.BENEFIT_PROGRAM
End-Select

  move 'Y' to $End
  move 1 to #changeLevel
  do Print-Totals

End-Procedure

!**************************************
Begin-Procedure Prepare-Account-Closure-Report
!**************************************

Begin-Select
E.PLAN_TYPE    () On-Break Print=Never Level=2
                  Procedure=Plan-Type-Change
                  Save=$PlanType
E.BENEFIT_PLAN () On-Break Print=Never Level=3
                  Procedure=Benefit-Plan-Change
                  Save=$BenPlan
E.EMPLID  (+1,32) On-Break Level=4
                  Procedure=Employee-Change
F.NAME            (0,1,25)
E.FSA_ACCT_STATUS (0,42)
E.CARRYFORWARD_EE (0,49)
E.EMPL_RCD
E.COVERAGE_BEGIN_DT
E.ANNUAL_PLEDGE
E.CARRYFWD_AMT_CLM
E.CARRYFWD_AMT_CRD
E.CARRYFWD_CLM_SPENT
E.CARRYFWD_CRD_SPENT
H.BENEFIT_PROGRAM,
E.EFFDT

  do Retrieve-FSA-Summary
  if &E.Plan_Type <> $PriorPlanType
    move 'PLAN_TYPE'  to $FieldName
    move &E.Plan_Type to $FieldValue
    move $YearEnd     to $AsOfDate
    do Read-Translate-Table
    move &E.Plan_Type to $PriorPlanType
  end-if

  move &E.EmplID       to $PrevEmplid
  move &E.EMPL_RCD    to #PrevRcdNo
  move &E.Plan_Type    to $PrevPlan
  move &E.Benefit_Plan to $PrevBenPlan

  evaluate &E.Plan_Type
  when = '65'
  when = '66'
    do Get-Primary-Job(&E.EMPLID,&E.EMPL_RCD,&E.EFFDT,#Primary_Job_Empl_Rcd,$Found)
    do Canadian-Conts-YTD
    let #Carryfwd_Crd=0
    let #Carryfwd_Clm=0
    let #forfeit_Clm=&E.Carryfwd_Amt_Clm-&E.Carryfwd_Clm_Spent
    let #forfeit_Crd=&E.Carryfwd_Amt_Crd-&E.Carryfwd_Crd_Spent
!   display '&e.carryforward_ee    '
!   display &E.carryforward_ee
!   let #newclaims=&SM.FSA_Sub_Amt_YTD - &E.Carryfwd_Amt_Clm
    let #newclaims=&SM.FSA_Apr_Amt_YTD - &E.Carryfwd_Amt_Clm
    let #amtpaid=&SM.FSA_Pd_Amt_YTD + &E.Carryfwd_Crd_Spent
!   if &E.Carryforward_EE = 'CR'
      let #Carryfwd_Crd = (&ContribsYTD+&E.Carryfwd_Amt_Crd-#forfeit_Crd)
                       - (&E.Carryfwd_Amt_Clm-#forfeit_Clm + #newclaims)
      if #Carryfwd_Crd < 0
        let #Carryfwd_Crd = 0
      end-if
!   else
      let #Carryfwd_Clm = (&E.Carryfwd_Amt_Clm-#forfeit_Clm + #newclaims)
!                       - (&ContribsYTD + &E.Carryfwd_Amt_Crd-#forfeit_Crd)
                        - (#AmtPaid + &E.Carryfwd_Amt_Crd-#forfeit_Crd)
      if #Carryfwd_Clm <= 0
        let #Carryfwd_Clm = 0
      end-if
!   end-if
  end-evaluate

  if  &E.Carryforward_EE = 'CR'
    let #FF_Claim  = #CarryFwd_Clm
    let #FF_Credit = 0
    let #CF_Claim  = 0
    let #CF_Credit = #CarryFwd_Crd
  else
    let #FF_Claim  = 0
    let #FF_Credit = #CarryFwd_Crd
    let #CF_Claim  = #CarryFwd_Clm
    let #CF_Credit = 0
    let #EmplTotClm = #EmplTotClm + #CarryFwd_Clm
  end-if

  do Get-Next-Year-Benefit
  let #FF_Claim  = #FF_Claim_Less_pledge
  let #CF_Claim  = #EmplTotClm

  ARRAY-ADD &E.Annual_Pledge &E.Carryfwd_Amt_Crd &E.Carryfwd_Amt_Clm
            &ContribsYTD #newclaims #amtpaid
!           #CarryFwd_Crd #CarryFwd_Clm -
            #FF_Credit #FF_Claim #CF_Credit #CF_Claim -
         to Totals(5) total(0) total(1) total(2) total(3) total(4)
                      TOTAL(5) TOTAL(6) TOTAL(7) TOTAL(8) TOTAL(9)

  if ($FSA_Acct_Closure = 'Y')
    do Update-FSA-Benefit-Record
  end-if
  move 0 to #EmpTotClm

FROM  PS_BEN_DEFN_OPTN   C,
      PS_FSA_BENEFIT     E,
      PS_PERSON_NAME     F,
      PS_BEN_PROG_PARTIC H
WHERE C.BENEFIT_PROGRAM = &B.Benefit_Program
  AND C.EFFDT           = &B.EffDt
  AND C.PLAN_TYPE    LIKE '6%'
  AND C.OPTION_TYPE     = 'O'
  AND E.PLAN_TYPE       = C.PLAN_TYPE
  AND E.COBRA_EVENT_ID  = 0
  AND E.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_FSA_BENEFIT
       WHERE  EMPLID         = E.EMPLID
         AND  EMPL_RCD       = E.EMPL_RCD
         AND  COBRA_EVENT_ID = E.COBRA_EVENT_ID
         AND  PLAN_TYPE      = E.PLAN_TYPE
         AND  COVERAGE_ELECT = 'E'
         AND  COVERAGE_BEGIN_DT BETWEEN $YearBegin AND $YearEnd)
  AND E.BENEFIT_PLAN     = C.BENEFIT_PLAN
  AND F.EMPLID           = E.EMPLID
  AND H.EMPLID           = E.EMPLID
  AND H.COBRA_EVENT_ID   = 0
  AND H.EMPL_RCD         = E.EMPL_RCD
  AND H.BENEFIT_PROGRAM  = &B.Benefit_Program
  AND H.EFFDT =
      (SELECT MAX(H2.EFFDT)
       FROM   PS_BEN_PROG_PARTIC H2
       WHERE  H2.EMPLID          = H.EMPLID
         AND  H2.COBRA_EVENT_ID  = H.COBRA_EVENT_ID
         AND  H2.EMPL_RCD        = H.EMPL_RCD
         AND  H2.EFFDT          <= $YearEnd)
ORDER BY E.PLAN_TYPE,
         E.BENEFIT_PLAN,
         E.EMPLID
End-Select

End-Procedure


!**************************************
Begin-Procedure Retrieve-FSA-Summary
!**************************************

Begin-Select
SM.FSA_SUB_AMT_YTD
SM.FSA_APR_AMT_YTD
SM.FSA_PD_AMT_YTD

FROM  PS_FSA_SUMMARY SM
WHERE SM.EMPLID       = &E.Emplid
  AND SM.PLAN_TYPE    = &E.Plan_Type
  AND SM.BALANCE_YEAR = &A.Calendar_Year
End-Select
End-Procedure


!*******************************************************
Begin-Procedure Canadian-Conts-YTD
!*******************************************************
Begin-Select

#ifdef INFORMIX
ROUND(SUM(SCDN.DED_YTD),3)      &ContribsYTD
#else
#ifdef DB2ALL
DECIMAL(SUM(SCDN.DED_YTD),15,3) &ContribsYTD
#else
SUM(SCDN.DED_YTD)               &ContribsYTD
#endif
#endif

FROM  PS_JOB G,
      PS_CAN_DED_BALANCE SCDN
WHERE SCDN.PLAN_TYPE     = &E.Plan_Type
  AND SCDN.BALANCE_ID    = $Calendar_Year_Id
  AND SCDN.BALANCE_YEAR  = &A.Calendar_Year
  AND SCDN.EMPLID        = &E.EmplID
  AND G.EMPLID           = SCDN.EMPLID
  AND G.EMPL_RCD         = #Primary_Job_Empl_Rcd
  AND G.EFFDT            = (SELECT MAX(G1.EFFDT)
                              FROM PS_JOB G1
                             WHERE G1.EMPLID = G.EMPLID
                               AND G1.EMPL_RCD = G.EMPL_RCD
                               AND G1.EFFDT <= &E.EFFDT)
  AND G.EFFSEQ           = (SELECT MAX(G2.EFFSEQ)
                              FROM PS_JOB G2
                             WHERE G2.EMPLID = G.EMPLID
                               AND G2.EMPL_RCD = G.EMPL_RCD
                               AND G2.EFFDT = G.EFFDT)
  AND (SCDN.COMPANY      = G.COMPANY
        OR
       SCDN.COMPANY IN
        (SELECT CPB.COMPANY
          FROM  PS_COMPANY_TBL CPA,
                PS_COMPANY_TBL CPB
         WHERE  CPA.COMPANY = G.COMPANY
           AND  CPA.EFFDT <= $YearEnd
           AND  CPA.EFFDT = (SELECT MAX(X.EFFDT)
                             FROM   PS_COMPANY_TBL X
                             WHERE  CPA.COMPANY = X.COMPANY
                              AND   X.EFFDT <= $YearEnd)
           AND ((CPA.COMMON_PAY_ID <> ' '
                   AND CPA.COMMON_PAY_ID = CPB.COMMON_PAY_ID)
                OR
                (CPA.COMMON_OTH_ID <> ' '
                   AND CPA.COMMON_OTH_ID = CPB.COMMON_OTH_ID))
           AND   CPB.EFFDT <= $YearEnd
           AND   CPB.EFFDT = (SELECT MAX(X1.EFFDT)
                              FROM   PS_COMPANY_TBL X1
                              WHERE  CPB.COMPANY = X1.COMPANY
                                AND  X1.EFFDT <= $YearEnd)
           AND   CPB.EFF_STATUS = 'A')
       )
  AND SCDN.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_DED_BALANCE
       WHERE  PLAN_TYPE       = SCDN.PLAN_TYPE
         AND  BALANCE_ID      = SCDN.BALANCE_ID
         AND  BALANCE_YEAR    = SCDN.BALANCE_YEAR
         AND  EMPLID          = SCDN.EMPLID
         AND  COMPANY         = SCDN.COMPANY
         AND  BENEFIT_RCD_NBR = SCDN.BENEFIT_RCD_NBR
         AND  WAGE_LOSS_PLAN  = SCDN.WAGE_LOSS_PLAN
         AND  PROVINCE        = SCDN.PROVINCE
         AND  DEDCD           = SCDN.DEDCD
         AND  DED_CLASS       = SCDN.DED_CLASS
         AND  DED_SLSTX_CLASS = SCDN.DED_SLSTX_CLASS)
End-Select
End-Procedure


!************************************
Begin-Procedure Update-FSA-Benefit-Record
!************************************
#ifdef debugF
  print 'FLOW : Update-FSA-Benefit-Record -> Entry'  (+1,1)
#end-if

#ifdef debugD

  print 'FLOW : Update-FSA-Benefit-Record           '  (+2,1)
  print '       ....................................'  (+1,1)
  print 'Data : '            (+1,1)
  print &e.emplid            (0,+2)
  print &e.EMPL_RCD         (0,+2)
  print &e.plan_type         (0,+2)
  print &e.benefit_plan      (0,+2)
  print &e.coverage_begin_dt (0,+2)
#end-if

!  let #CarryfwdClm=0
!  let #CarryfwdCrd=0
!  if &E.Carryforward_EE = 'CL'
!    let #CarryfwdClm = &SM.FSA_Apr_Amt_YTD - &SM.FSA_Pd_Amt_YTD
!    if #CarryfwdClm < 0
!      let #CarryfwdClm = 0
!    end-if
!  else
!    let #CarryfwdCrd = &ContribsYTD - &SM.FSA_Pd_Amt_YTD
!    if #CarryfwdCrd < 0
!      let #CarryfwdCrd = 0
!    end-if
!  end-if

  move #CF_Credit to #CarryfwdCrd

  let #NextCalYr = (&A.Calendar_Year + 1)
  do DTU-Format-Date(#NextCalYr, 1, 1, $NextYearBegin)
  do Convert-From-DTU-Date($NextYearBegin, $NextYearBegin)
  do DTU-Format-Date(#NextCalYr, 12, 31, $NextYearEnd)
  do Convert-From-DTU-Date($NextYearEnd, $NextYearEnd)

let $sql-statement = 'FSA001CN.SQU,Update-FSA-Benefit-Record,FSA_Benefit,Update'
Begin-SQL on-error=SQL-Error
UPDATE PS_FSA_BENEFIT
    SET CARRYFWD_AMT_CLM = #EmplTotClm,
        CARRYFWD_AMT_CRD = #CarryfwdCrd
 WHERE EMPLID            = $PrevEmplid
   AND EMPL_RCD         = #PrevRcdNo
   AND PLAN_TYPE         = $PrevPlan
   AND COVERAGE_ELECT    = 'E'
   AND COVERAGE_BEGIN_DT = &N.EffDT
End-SQL

End-Procedure


!*******************************************************
Begin-Procedure Get-Next-Year-Benefit
!*******************************************************

  let #NextCalYr = (&A.Calendar_Year + 1)
  do DTU-Format-Date(#NextCalYr, 1, 1, $NextYearBegin)
  do Convert-From-DTU-Date($NextYearBegin, $NextYearBegin)
  do DTU-Format-Date(#NextCalYr, 12, 31, $NextYearEnd)
  do Convert-From-DTU-Date($NextYearEnd, $NextYearEnd)

Begin-Select

N.EFFDT
N.ANNUAL_PLEDGE

FROM  PS_FSA_BENEFIT N
WHERE N.EMPLID        = $PrevEmplid
  AND N.EMPL_RCD     = #PrevRcdNo
  AND N.PLAN_TYPE     = $PrevPlan
  AND  N.COVERAGE_ELECT = 'E'
 AND N.EFFDT =
     (SELECT MAX(O.EFFDT)
      FROM   PS_FSA_BENEFIT O
      WHERE  O.EMPLID         = N.EMPLID
        AND  O.EMPL_RCD      = N.EMPL_RCD
        AND  O.PLAN_TYPE      = N.PLAN_TYPE
        AND  O.COVERAGE_ELECT = 'E'
        AND  O.COVERAGE_BEGIN_DT BETWEEN $NextYearBegin AND $NextYearEnd)
End-Select

  let #ff_Claim_less_pledge = 0
  if #EmplTotClm <= 0
    let #EmplTotClm = 0
  else
    if #EmplTotClm > &N.Annual_Pledge    !carryfwd_clm cannot be > pledge amount
      let #ff_Claim_less_pledge = #EmplTotClm - &N.Annual_Pledge
      let #EmplTotClm = &N.Annual_Pledge
    end-if
  end-if

End-Procedure


!**************************************
Begin-Procedure Benefit-Program-Change
!**************************************

  move 2 to #changeLevel
  do Print-Totals
  new-page

End-Procedure

!**************************************
Begin-Procedure Plan-Type-Change
!**************************************

  move 3 to #changeLevel
  do Print-Totals
  new-page

End-Procedure

!**************************************
Begin-Procedure Benefit-Plan-Change
!**************************************

  move 4 to #changeLevel
  do Print-Totals
  new-page

End-Procedure

!**************************************
Begin-Procedure Employee-Change
!**************************************

  if ($FSA_Acct_Closure = 'Y')
    do Update-FSA-Benefit-Record
  end-if

  move 0 to #EmplTotClm
  move 5 to #changeLevel
  do Print-Totals

End-Procedure

!**************************************
Begin-Procedure Print-Totals
!**************************************

  move 5 to #totalRow
  while #totalRow >= #changeLevel

    move #totalRow to #rollRow
    subtract  1 from #rollRow
    if #totalRow < 5    !if not the employee's detail
      get $TotalName from Totals(#totalRow) TotalName
      print $TotalName (+2,25)
    end-if

    move 0 to #i
    while #i <= 9

      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999,999.99')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add  1 to #i

    end-while

    subtract 1 from #totalRow

  end-while

  if $End = 'Y'
    do Reset
  end-if

End-Procedure

!**************************************
Begin-Procedure Display-Time
!**************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*******************************************************

#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date and time math
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'useprntr.sqc'  !Select printer type
#Include 'getpgmnm.sqc'  !Get the Name of the current Benefit Program
#Include 'bnprijob.sqc'  !Get-Primary-Job()
#Include 'fsadates.sqc'  !Get-Balance-Year-Data
!***************************** End of Report ***************************
