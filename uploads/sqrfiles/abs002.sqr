!***********************************************************************
!  ABS002:  Absence Periods                                            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:10:58:57                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
!************Begin Resolution - 580007***************
 #ifdef DB2UNIX
  #ifdef NT
  #else
!************End Resolution   - 580007***************
    declare-variable
      date $Beg_Dt
      date $Ret_Dt
    end-declare
!************Begin Resolution - 580007***************    
  #end-if
 #end-if
!************End Resolution   - 580007*************** 
end-setup

begin-report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  
  !**************Begin Resolution 594678**********
  
    do Get-Report-Language
    
  !**************End Resolution 594678************
  
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-heading 7
  #Include 'stdhdg08.sqc'
   !**************Begin Resolution 594678************
  
  !print 'Regulatory'                    (+2,2,15)
  !print 'Employee Name'                 (0,18,32)
  !print 'ID'                            (0,45,9)
  !print 'Absence Type'                  (0,55,14)
  !print 'Number of'                     (0,70,24)
  !print 'Duration (Days)'               (0,95,9)
  !print 'Average'                       (0,105)
  !print 'Absence Periods'               (+1,70,0)
  !print 'Region'                        (0,2,92)
  !print 'of Absence'                    (0,95,9)
  !print '(Days)'                        (0,105)
  
   Do Report-Translation

    print $Regulatory                    (+2,2,15)
    print $EmpName                       (0,18,32)
    print $ID                            (0,45,9)
    print $AbsenceType                   (0,55,14)
    print $NumberOf                      (0,70,24)
    print $Duration                      (0,95,9)
    print $AbsencePeriods                (+1,70,0)
    print $Region                        (0,2,92)
    print $OfAbsenc                      (0,95,9)
    
  !**************End Resolution 594678************ 
    end-heading
    
    
 !**************Begin Resolution 594678************
  
  !*************************************************************
   BEGIN-PROCEDURE Report-Translation
  !*************************************************************
   
    !Should be ok to comment because the report should only produce one output file.
    !Use-report ABS001
    
          Do Init_Report_Translation($ReportId, $Language_Cd)
          SHOW 'LANGUAGE CODE = ' $Language_Cd
          Do Get_Field_Information  ('ABS002','REGULATORY',         $Regulatory,      #CW)
          Do Get_Field_Information  ('ABS002','EMPLOYEE NAME',      $EmpName,         #CW)
          Do Get_Field_Information  ('ABS002','ID',                 $ID,              #CW)
          Do Get_Field_Information  ('ABS002','ABSENCE TYPE',       $AbsenceType,     #CW)
          Do Get_Field_Information  ('ABS002','NUMBER OF',          $NumberOf,        #CW)
          Do Get_Field_Information  ('ABS002','DURATION',           $Duration,        #CW)
          Do Get_Field_Information  ('ABS002','REGION',             $Region,          #CW)
          Do Get_Field_Information  ('ABS002','ABSENCE PERIODS',    $AbsencePeriods,  #CW)
          Do Get_Field_Information  ('ABS002','OF ABSENCE',         $OfAbsenc,        #CW)
    
    END-PROCEDURE 
   
!**************End Resolution 594678************

begin-procedure Init-Report

  move 'ABS002' to $ReportID
  move 'Number Of Absence Periods' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-From-Thru-Date
  else
    do Select-Parameters
  end-if

end-procedure

begin-procedure Get-Values

   do Get-From-Thru-Date

end-procedure

begin-procedure Process-Main
  do Convert-To-DTU-Date($FromDate, $FromDate_DTU)
  do Convert-To-DTU-Date($ThruDate, $Thrudate_DTU)
Begin-SELECT
C.REG_REGION    (+1,2,15)  ON-BREAK Print = Change/Top-Page SKIPLINES = 1
                level =1
                after =GetRegionTotals

B.NAME          (0,18,26) ON-BREAK   Print = Change/Top-Page SKIPLINES = 1
                level =2

A.EMPLID        (0,45,9)  ON-BREAK   Print = Change/Top-Page SKIPLINES = 2
                level =2
                after =GetTotals
A.EMPL_RCD
  LET #EMPL_RCD = &A.EMPL_RCD
D.DESCRSHORT    (0,55,14)
A.ABSENCE_TYPE
COUNT(*)        &Absence  (0,70,24)
                add &Absence to #AbsenceCnt
A.DURATION_DAYS
A.BEGIN_DT
A.RETURN_DT
  if &A.DURATION_DAYS=0
      let $Begin_Dt_DMY = rtrim(ltrim($Begin_Dt_DMY,' '),' ')
      do Convert-To-DTU-Date(&A.Begin_Dt, $Begin_Dt_DMY)

!change Return date if Return date > $Thrudate
      if RTRIM(&A.Return_Dt, ' ') <> ''
         do Format-DateTime(&A.Return_Dt, $Return_Dt_DMY, {DEFDATE}, '', '')
         let $Return_Dt_DMY  = rtrim($Return_Dt_DMY,' ')
         do Convert-To-DTU-Date(&A.Return_Dt, $Return_Dt_DMY)
         let $ReturnDate =$Return_Dt_DMY
      end-if
      if isnull(&A.Return_Dt) = 1
         let $ReturnDate = $Thrudate
         do Format-DateTime($ReturnDate, $Return_Dt_DMY, {DEFDATE}, '', '')
         let $Return_Dt_DMY  = rtrim($Return_Dt_DMY,' ')
         do Convert-To-DTU-Date($ReturnDate, $Return_Dt_DMY)
         let $ReturnDate =$Return_Dt_DMY
      end-if

!This code was added to include days absent during absence period and not
!the Duration_days stored in the table PS_ABSENCE_HIST.

        if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY <= $Thrudate_DTU )
           Let $Beg_Dt = $FromDate
           Let $Ret_Dt = nvl(&A.Return_Dt, $ThruDate)
        else
           if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY > $Thrudate_DTU )
              Let $Beg_Dt = $FromDate
              Let $Ret_Dt = $Thrudate
           else
              if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY >= $Thrudate_DTU )
                  Let $Beg_Dt = &A.Begin_Dt
                  Let $Ret_Dt = $Thrudate
              else
                 if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY < $Thrudate_DTU)
                    Let $Beg_Dt = &A.Begin_Dt
                    Let $Ret_Dt = &A.Return_Dt
                 else
                    if ($Begin_Dt_DMY < $FromDate_DTU and $Return_Dt_DMY = $FromDate_DTU)
                       Let $Beg_Dt= &A.Begin_Dt
                       Let $Ret_Dt =$FromDate
                    end-if
                 end-if
              end-if
           end-if
        end-if
        do Convert-To-DTU-Date($Beg_Dt, $Beg_Dt_DMY)
        let $Beg_Dt_DMY = rtrim(ltrim($Beg_Dt_DMY,' '),' ')
        do Convert-To-DTU-Date($Ret_Dt, $Ret_Dt_DMY)
        let $Ret_Dt_DMY = rtrim(ltrim($Ret_Dt_DMY,' '),' ')
        let $Returndate = $Ret_Dt_DMY
        let $AsOfDate = $Beg_DT_DMY
        do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist_out,$futurescheduleExist_out
                             $futuresched_Begin_dt_out)

        let  $schd_abs_st_day_out=to_char(#schd_abs_st_day_out)
        let #TotalDays =0
        if $currentscheduleExist_out='Y'
           let $HolidayFlag='N'
           let $loop_dt =  $Beg_Dt_DMY
           let #looking_for_day = #schd_abs_st_day_out
           let #TotalDays =0
           let $asof_lv_date = $Beg_Dt_DMY
         while $loop_dt <=  $Ret_Dt_DMY


            do get-schedule-begin-date($CurrentSchedule_out,$schd_begin_dt )

            do dtu-diff-days($Schd_begin_dt, $loop_dt, #diffdays)

            let #schd_days = #diffdays + 1
            do Calculate-Schedule-Days($currentschedule_out, $Beg_Dt_Dmy, #schd_days_out)

            let #day_no = mod(#schd_days, #schd_days_out)

            if #day_no = 0
               let #day_no = #Schd_days_out
            end-if


         ! Calculate duration days. Loop for each day of the absence and check if the days was a work day
            let $AsOfDate =$loop_dt
            ! Check holiday schedule. If holiday then no need to update duration days
            do Is-Holiday($HolidayFlag_in )
            if $HolidayFlag_in = 'N' ! holiday flag
              do Get-Day-schedule($CurrentSchedule_out,$currentSchedule_dt_out,#looking_for_day,#Duration_Days)
            end-if
            let #TotalDays =#TotalDays+#Duration_Days
            ! Update total duration days
            let $TotalDays =to_char(#TotalDays)
            let #Duration_Days=0
            if #looking_for_day=#Schedule_Days_out
              let #looking_for_day = 1
            else
               let #looking_for_day= #looking_for_day +1
            end-if
            let $looking_for_day=to_char(#looking_for_day)
            do dtu-add-days($AsOfDate,1, $NextDay)
            !increment loop date
            let $loop_dt =$NextDay
            ! check if next schedule has kicked in yet

            if $futurescheduleExist_out = 'Y'
               ! check if next day has kicked in yet
               if $loop_dt=$futuresched_Begin_dt_out
                  let $AsOfDate=$futuresched_Begin_dt_out
                  do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist,$futurescheduleExist_out
                              $futuresched_Begin_dt_out)
                  let #looking_for_day = #schd_abs_st_day_out
               end-if
            end-if
        end-while
     else
        if rtrim(ltrim($CurrentSchedule_out, ' '), ' ') = ''
!************Begin Resolution - 580007***************         
         #ifdef DB2UNIX
           #ifdef NT     
           let #TotalDays = datediff(strtodate ($Ret_Dt, 'yyyy-mm-dd'),  strtodate ($Beg_Dt, 'yyyy-mm-dd'), 'DAY') + 1
           #else
!************End Resolution   - 580007***************           
           let #TotalDays = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
!************Begin Resolution - 580007***************           
           #end-if
         #end-if
!************End Resolution   - 580007***************
        end-if
     end-if
     do Format-Number(#TotalDays , $out, 'b9999.999')
     print $out          (0,95)

       add #TotalDays to #DurationCnt
!***********
  else
     do Format-Number(&A.DURATION_DAYS, $out, 'b99.999')
     print $out          (0,95)
     add &A.DURATION_DAYS to #DurationCnt
  end-if
FROM    PS_ABSENCE_HIST A,
        PS_JOB C,
        PS_PERSON_NAME B,
        PS_ABS_TYPE_TBL D

        WHERE ((A.BEGIN_DT >= $FromDate
        AND A.BEGIN_DT <= $Thrudate)
        OR (A.RETURN_DT >= $FromDate
        AND A.RETURN_DT <= $Thrudate)
        OR (A.BEGIN_DT < $FromDate
        AND A.RETURN_DT > $Thrudate)
        OR (A.BEGIN_DT <= $Thrudate
        AND A.RETURN_DT is NULL))

        AND A.EMPLID    = B.EMPLID
        AND C.EMPLID = A.EMPLID
        AND C.EMPL_RCD = A.EMPL_RCD
        AND C.EFFDT = (SELECT MAX(E.EFFDT)
                       FROM PS_JOB E
                       WHERE A.EMPLID = E.EMPLID AND A.EMPL_RCD = E.EMPL_RCD
                       AND E.EFFDT <= A.BEGIN_DT)
        AND C.EFFSEQ = (SELECT MAX(I.EFFSEQ)
                        FROM PS_JOB I
                        WHERE I.EMPLID = C.EMPLID
                        AND I.EMPL_RCD = C.EMPL_RCD
                        AND I.EFFDT = C.EFFDT)

        AND D.ABSENCE_TYPE=A.ABSENCE_TYPE
        AND  D.SETID = (SELECT SETID
              FROM PS_SET_CNTRL_REC
              WHERE SETCNTRLVALUE = C.REG_REGION
              AND  RECNAME = 'ABS_TYPE_TBL')
GROUP BY C.REG_REGION,B.NAME,A.EMPLID,A.EMPL_RCD, D.DESCRSHORT,A.ABSENCE_TYPE,
         A.DURATION_DAYS,A.BEGIN_DT, A.RETURN_DT
ORDER BY C.REG_REGION, B.NAME,A.ABSENCE_TYPE

End-SELECT

 let $GrandAbsence=to_char(#GrandAbsence)
 let $GrandDurationCnt=to_char(#GrandDurationCnt)
 print '=====' (+2,70,24)
 print '=====' (0,95,44)
 print 'Grand Totals'  (0,50)
 print $GrandAbsence (+1,70,24)
 print $GrandDurationCnt (0,95)
 print '=====' (+1,70,24)
 print '=====' (0,95)

end-procedure Process-Main

begin-procedure GetDescription

Begin-SELECT
S.DESCRSHORT (0,2,67)
FROM PS_SETID_TBL  S
WHERE
        S.SETID=&C.REG_REGION
End-SELECT

end-procedure GetDescription

begin-procedure GetTotals

 print '_____'  (0,70,24)
 print '_____'  (0,95)
 let  $AbsenceCnt =to_char(#AbsenceCnt)
 let  $DurationCnt=to_char(#DurationCnt)
 print $AbsenceCnt (+1,70,24)
 print $DurationCnt (0,95)
 add #AbsenceCnt to #RegionAbsence
 add #DurationCnt to #RegionDurationCnt
 print ' ' (+1,95)
 move 0 to #AbsenceCnt
 move 0 to #DurationCnt

end-procedure GetTotals

begin-procedure GetRegionTotals

 print ' ' (+1,95,39)
 print 'Region Totals' (0,55,24)
 print '====='  (0,70,24)
 print '====='  (0,95)
 let $RegionAbsence=to_char(#RegionAbsence)
 let $RegionDurationCnt=to_char(#RegionDurationCnt)
 add #RegionAbsence to  #GrandAbsence
 add #RegionDurationCnt to #GrandDurationCnt
 print $RegionAbsence (+1,70,24)
 print $RegionDurationCnt (0,95)
 print ' ' (+1,95)
 move 0 to #RegionAbsence
 move 0 to #RegionDurationCnt

end-procedure GetRegionTotals
!*********************
!**************************************************************************
! get-schedule-details
!
!   Output: $SchedID  - The current schedule ID
!           $curr_begin_dt - The current scheduleDate
!           #schd_abs_st_day_out - Day in Work schedule corresponding to 'AsOfDate'
!           #Schedule_Days - No of days in current cycle
!**************************************************************************

begin-procedure get-schedule-details(:$SchedID,:$curr_begin_dt,:#schd_abs_st_day_out,
                                     :#Schedule_Days,:$Current_Exist,:$futurescheduleExist_out
                                      :$futuresched_Begin_dt_out)

  do get-Current-Schedule-Details($Current_Exist,$curr_begin_dt,$SchedID)
  do get-schedule-begin-date($SchedID,$schedule_begin_dt)
  do Get-Future-Schedule($curr_begin_dt,$futurescheduleExist_out,$futuresched_Begin_dt_out)
 !Schedule doesn't exist so dont bother calculating days. Indicate with flag
 if $Current_Exist = 'N'
     !print '*' (0,35)
 else
   do Calculate-Schedule-Days($SchedID,$curr_begin_dt,#Schedule_Days)
   do Calculate-schd-diff($schedule_begin_dt,#Schedule_Days,#schd_abs_st_day_out)
 end-if
end-procedure

begin-procedure Company-Change
  new-page
end-procedure

!**************************************************************************
! Get-Day-schedule
!
!   input: $SchedID, $curr_begin_dt, #looking_for_today
!   output: #duaration_days
!**************************************************************************

begin-procedure Get-Day-schedule($currentschedID,$currentsched,#looking_for_today,:#duaration_days)


   let #Previous_Day_No=0
   let #Previous_Seq_No=0
   let #lday_count=0
   let #duaration_days =0

begin-SELECT
C.ABSW_SEQ_NO
   let #Seq_No = &C.ABSW_SEQ_NO
   let $Seq_No=to_char(#Seq_No )

C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours=&C.DURATION_HOURS
   let #Day_No =&C.ABSW_DAY_NO
   let $Day_no=to_char(#Day_No)

   ! only count days that have hours > 0
   if #Absw_Duration_Hours  > 0
      if #Seq_No <> #Previous_Seq_No
         let #lday_count=#lday_count +1
      else
         if #Day_No <> #Previous_Day_No
            let #lday_count=#lday_count +1
         end-if
      end-if
      if #lday_count=#looking_for_today
            let #duaration_days=#duaration_days +1
      end-if
   end-if
   let #Previous_Seq_No=#Seq_No
   let #Previous_Day_No=#Day_No

   let $duaration_days=to_char(#duaration_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_EMPLID
AND C.EMPL_RCD = #_EMPL_RCD
AND C.ABSW_SCHD_ID  = $currentschedID
AND C.BEGIN_DT <= (select max(B.BEGIN_DT) FROM PS_ABSW_SCHD_VW B WHERE B.EMPLID = C.EMPLID AND
                   C.EMPL_RCD  = B.EMPL_RCD AND C.ABSW_SCHD_ID = B.ABSW_SCHD_ID AND B.BEGIN_DT <= $currentsched)!$currentsched
end-SELECT

end-procedure

!**************************************************************************
! Is-Holiday:  Check if given day is defined as a holiday
!
!   output: $HolidayFlag_out
!**************************************************************************

begin-procedure Is-Holiday(:$HolidayFlag_out)

   let $HolidayFlag_out='N'
begin-SELECT
B.HOLIDAY_SCHEDULE
   let $HolidayFlag_out='Y'

FROM
 PS_ABSW_SCHEDULE A,
 PS_HOLIDAY_DATE B
WHERE
A.HOLIDAY_SCHEDULE = B.HOLIDAY_SCHEDULE
AND A.EMPLID = $_EMPLID
AND A.EMPL_RCD = #_EMPL_RCD
AND B.HOLIDAY=$_AsOfDate
end-SELECT
end-procedure

!**************************************************************************
! Calculate-schd-diff:  Calculates days since work schedule
!
!   input:  $currentsched_Begin_dt, #Schedule_Days
!   output: #schd_abs_st_day
!**************************************************************************

begin-procedure Calculate-schd-diff($currentsched_Begin_dt,#Schedule_Days,:#schd_abs_st_day)

   let $Schedule_Days=to_char(#Schedule_Days)

   ! calculate days since work schedule
   do dtu-diff-days($currentsched_Begin_dt,$_AsOfDate,#diffDays)
   let #schd_days_s_st= #diffDays + 1
   let #schd_abs_st_day = mod(#schd_days_s_st,#Schedule_Days)
   if  #schd_abs_st_day =0
      let #schd_abs_st_day =#Schedule_Days
   end-if
   let $schd_abs_st_day=to_char(#schd_abs_st_day)
   let $schd_days_s_st=to_char(#schd_days_s_st)
   let $Schedule_Days=to_char(#Schedule_Days)

end-procedure

!**************************************************************************
! get-Current-Schedule-Details
!
!    output: :$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID
!**************************************************************************

begin-procedure get-Current-Schedule-Details(:$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID)

   ! get current schedule at absence begin date
   let $currentschedID =''
   let $currentsched_Begin_dt =''
   let $currentscheduleExist='N'

begin-SELECT
E.EMPLID
E.EMPL_RCD
E.BEGIN_DT


   let $currentsched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($currentsched_Begin_dt_N, $currentsched_Begin_dt)

E.ABSW_SCHD_ID

  let  $currentschedID =&E.ABSW_SCHD_ID
  let $currentscheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_EMPLID
AND   E.EMPL_RCD = #_EMPL_RCD
AND   E.BEGIN_DT =(SELECT MAX(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT <= $_AsOfDate)
end-SELECT
end-procedure

!**************************************************************************
! get-schedule-begin-date: Gets the begin date of the work schedule
!
!     input: $Sched_ID
!     output: $Schedule_Begin_dt_out
!**************************************************************************

begin-procedure get-schedule-begin-date($SchedID_in,:$Schedule_Begin_dt_out)
begin-SELECT
F.BEGIN_DT
   let $Schedule_Begin_dt_N=&F.BEGIN_DT
   do Convert-To-DTU-Date($Schedule_Begin_dt_N, $Schedule_Begin_dt_out)

FROM PS_ABSW_SCHD_TBL F
WHERE F.ABSW_SCHD_ID = $SchedID_in
end-SELECT
end-procedure

!**************************************************************************
! Get-Future-Schedule
!
!    input: $curr_begin_dt_in
!**************************************************************************

begin-procedure Get-Future-Schedule($curr_begin_dt_in,:$futurescheduleExist,:$futuresched_Begin_dt)

   let $futurescheduleExist ='N'
   let $futurescheduleAnother ='Y'
   let $futureschedID =''
   let $futuresched_Begin_dt =''
begin-SELECT
E.BEGIN_DT
   let $futuresched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($futuresched_Begin_dt_N, $futuresched_Begin_dt)

E.ABSW_SCHD_ID
   let  $futureschedID =&E.ABSW_SCHD_ID
   let $futurescheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_EMPLID
AND   E.EMPL_RCD = #_EMPL_RCD
AND   E.BEGIN_DT =(SELECT MIN(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT > $curr_begin_dt_in )
end-SELECT
end-procedure Get-Future-Schedule

!**************************************************************************
! Calculate-Schedule-Days: Calculates days in one work schedule
!
!    input:    $currentschedID,$curr_begin_dt
!    output:   #schd_cycle_days
!**************************************************************************

begin-procedure Calculate-Schedule-Days($currentschedID, $curr_begin_dt,:#schd_cycle_days)

   let #Prev_Day_No=0
   let #Prev_Seq_No=0
   let #schd_cycle_days=0
begin-SELECT
C.ABSW_SEQ_NO
   let #Absw_Seq_No = &C.ABSW_SEQ_NO
C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours =&C.DURATION_HOURS
   let #Absw_Day_No =&C.ABSW_DAY_NO
   if #Absw_Seq_No <> #Prev_Seq_No
      let #schd_cycle_days=#schd_cycle_days +1
   else
      if #Absw_Day_No <> #Prev_Day_No
         let #schd_cycle_days=#schd_cycle_days +1
      end-if
   end-if
   let #Prev_Seq_No=#Absw_Seq_No
   let #Prev_Day_No=#Absw_Day_No
   let $schd_cycle_days=to_char(#schd_cycle_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_EMPLID
AND C.EMPL_RCD = #_EMPL_RCD
AND C.ABSW_SCHD_ID  =$currentschedID
AND C.BEGIN_DT <= $curr_begin_dt
end-SELECT

end-procedure

!**************************************************
#include 'stdapi.sqc'    !Routine to update run status
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askftd.sqc'    !From Thru Date input

#Include 'readxlat.sqc'  !Read Translate Table procedure
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

!**************Begin Resolution 594678************

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#include 'rellang.sqc'   !Gives Description from Related Lang tables

!**************End Resolution 594678**************