!***********************************************************************
!  CTX910VP:   PRINT  RL-2 Supplementary from Tax Extract Table        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/03/01:16:54:48                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  698735                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup07.sqc'
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#define TAXFORM_NOTES
#include 'rellang.sqc'

#DEFINE FORMS/PAGE      3
#DEFINE LASTPRINTLINE   17

begin-setup
!#include 'setupdb.sqc'               ! Database specific setup

DECLARE-LAYOUT  DEFAULT
PAPER-SIZE      =(150,150)
FORMFEED        =NO
ORIENTATION     =PORTRAIT
TOP-MARGIN      =0.0
LEFT-MARGIN     =0.25
LINE-HEIGHT     = 6pt
END-DECLARE

#ifdef TAXTEST

#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string   =<27>E<27>(10U<27>&l0O<27>&l6D<27>&l0E<27>&l80F<27>(s10.0H
  end-declare
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
#endif
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
#endif

#endif


#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-HP
  end-declare
 !              |     !--> Perforation Skip
 !              --> Reset
  declare-printer DEFAULT-LP
  init-string   =<27>E<27>&l0L
  end-declare
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>&l0L
  end-declare
#endif
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>&l0L
  end-declare
#endif

  declare-procedure
    before-report = Init-Page-Size
  end-declare



end-setup

!***********************************************************************
begin-procedure Init-Page-Size
!***********************************************************************
! This sends a 'Perforation Skip' command to disable any bottom
! margin and obtain the maximum PCL page.  This is required in
! the printing of the Releve 2 laser form.

#ifndef MVS
#ifndef OS400
 encode '<27>&l0L<27>&l2E' into $perforation_skip
#else
 encode '<39>&l0L<39>&l2E' into $perforation_skip
#endif
#else
 encode '<39>&l0L<39>&l2E' into $perforation_skip
#endif

 print $perforation_skip () code

end-procedure

begin-report

  do Init-Report
  do Process-Main

  if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
    close 1
  end-if

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report


begin-procedure Init-Report

  display 'PRINT RL-2'
  display '  '
  do Init-DateTime
  do Init-Number
#ifdef PRCSSCHD
  do StdAPI-Init
#endif

 do Initialization

  if $FormType <> 'L'
     use-printer-type LINEPRINTER
     do Printer-Alignment
  else
     use-printer-type HPLASERJET
     do Declare-Printer-RV2
     do Set-RV2-Row-Pointers
!**
!     do Laser-Print-Alignment
  end-if

end-procedure

begin-procedure Initialization

  move 'Y' to $FirstRecord
  do Get-Current-DateTime

  do Array-Create

  move '1' to $Year4
  move '-' to $DDelimiter
  move '1' to $MMLZero
  display $AsOfToday
  do Format-DateTime($AsOfToday, $AsOfDateYMD, {DEFYMD},'','')
  move $AsOfDateYMD to $AsOfYear xxxx
  display $AsOfYear

  move $AsOfYear  to #AsOfYear
  subtract 1 from #AsOfYear

   do Get-Can-Tax-Processing-Params  !TX.Balance_Year


  move &TX.Balance_Year to #TaxYear
  move &TX.Balance_Year to $TaxYear
  let #CalendarYear = &TX.Balance_Year

  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  do Array-Setup-FootNotes

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is ' noline
    display $AsOfYear
    display 'Tax Reporting Year is ' noline
    display $TaxYear
    display 'Current Year is not one greater than Tax Reporting Year.'
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer

    if $Answer <> 'Y'
      stop
    end-if
  end-if

  if $Prcs_Process_Instance = ''
     do Prompts
  else
#ifdef PRCSSCHD
      do Select-Canadian-YrEnd-Parameters
      do Convert-Parameters
#endif
  end-if

  if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
#ifdef MPE
  let $feq='FILE CTX910V1.DAT; REC=-250,,F,ASCII'
  call system using $feq #status
  open 'CTX910V1.DAT' as 1 for-writing record=250:fixed
#else
  open '{IMPORTPREFIX}CTX910V1{IMPORTSUFFIX}' as 1 for-writing record=250:vary
#endif
  end-if

end-procedure


begin-procedure Prompts

  display ' '
  display ' '
  display ' '
  display 'Select the type of form to use for your RL-2 printing '
  display ' '

  while $FormType = ''
    input $FormType 'Enter L(Laser Form), or S(Standard Tractor Feed), or enter Q to quit'
    uppercase $FormType
    if INSTR('LSQ',$FormType, 1) = 0
      display ' '
      display '***** Enter L, S, or Q to quit *****'
      display ' '
      move '' to $FormType
    end-if
  end-while

  if $FormType = 'Q'
     stop
  end-if

  display ' '
  display ' '
  display ' '
  display 'If this job will print forms to send to the Quebec '
  display 'government, enter 1 and the system will establish the '
  display 'correct sort sequence.'
  display ' '
  display 'If this job will print forms for another use (such as '
  display 'self-mailers, laser forms, employer copy, etc., you '
  display 'may select the sort sequence you prefer.  Enter 2 to '
  display 'see the sort options.  You will be shown three levels '
  display 'of sorting options, one level at a time.'
  display ' '

  while $SortInd = ''
    input $SortInd 'Enter 1(Std Govt Sort Sequence) or 2(Other Sort Options), or enter Q to quit'
    uppercase $SortInd
    if INSTR('12Q',$SortInd, 1) = 0
      display ' '
      display '***** Enter 1, 2, or Q to quit *****'
      display ' '
      move '' to $SortInd
    end-if
  end-while

  if $SortInd = 'Q'
     stop
  end-if

 if $SortInd = '1'
     let $SortSequence = 'SL.REPORTING_ID ASC, ' ||
       'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

 else
  display ' '
  display ' '
  display ' '
  display 'Select the Primary Sort Sequence for your Releve 2 slips.'
  display 'To sequence by Quebec Identification number, enter 1.'
  display 'To sequence by company, enter 2.'
  display ' '

  while $SortInd1 = ''
    input $SortInd1 '1st Sort Field : Enter 1(by QID), or 2(by Company), or enter Q to quit'
    uppercase $SortInd1
    if INSTR('12Q',$SortInd1, 1) = 0
      display ' '
      display '***** Enter 1, 2, or Q to quit *****'
      display ' '
      move '' to $SortInd1
    end-if
  end-while

  if $SortInd1 = 'Q'
     stop
  end-if

  if $SortInd1 = '1'
     let $Sort1 = 'SL.REPORTING_ID ASC'
     let $DispSort1 = 'Quebec ID Number; '
  end-if

  if $SortInd1 = '2'
     let $Sort1 = 'SL.COMPANY ASC'
     let $DispSort1 = 'Company; '
  end-if


  display ' '
  display ' '
  display ' '
  display 'Within the previous sort, select the second sort sequence.'
  display '    To sort by Location Code                 - enter 1'
  display '    To sort by Department Code               - enter 2'
  display '    To sort by Mail Drop                     - enter 3'
  display '    To sort by Postal Code                   - enter 4'
  display '    To sort by none of the above             - enter 5'
  display '    To quit                                  - enter Q'
  display ' '

  while $SortInd2 = ''
    input $SortInd2 '2nd Sort Field : 1(by LocCode), 2(by DeptCode), 3(by MailDrop), 4(by PostCode), 5(None), or Q to quit'
    uppercase $SortInd2
    if INSTR('12345Q',$SortInd2, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, 4, 5, or Q to quit *****'
      display ' '
      move '' to $SortInd2
    end-if
  end-while

  if $SortInd2 = 'Q'
     stop
  end-if

  if $SortInd2 = '1'
     let $Sort2 = 'EE.LOCATION  ASC'
     let $DispSort2 = 'Location; '
  end-if

  if $SortInd2 = '2'
     let $Sort2 = 'EE.DEPTID  ASC'
     let $DispSort2 = 'Department; '
  end-if

  if $SortInd2 = '3'
     let $Sort2 = 'EE.MAIL_DROP  ASC'
     let $DispSort2 = 'Mail Drop; '
  end-if

  if $SortInd2 = '4'
     let $Sort2 = 'EE.POSTAL ASC'
     let $DispSort2 = 'Postal Code; '
  end-if

  if $SortInd2 = '5'
     let $Sort2 = 'N'
  end-if

  display ' '
  display ' '
  display ' '
  display 'Within the previous sorts, select the third sort sequence.'
  display '   To sort by Employee Name            - enter 1'
  display '   To sort by Employee ID              - enter 2'
  display '   To sort by Employee SIN             - enter 3'
  display '   To quit                             - enter Q'
  display ' '

  while $SortInd3 = ''
    input $SortInd3 '3rd Sort Field : 1(by Empl Name), 2(by Empl ID), 3(by Empl SIN), or enter Q to quit'
    uppercase $SortInd3
    if INSTR('123Q',$SortInd3, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, or Q to quit *****'
      display ' '
      move '' to $SortInd3
    end-if
  end-while

  if $SortInd3 = 'Q'
     stop
  end-if

  if $SortInd3 = '1'
     let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
     let $DispSort3 = 'Employee Name; Employee ID'
  end-if

  if $SortInd3 = '2'
     let $Sort3 = 'EE.EMPLID ASC'
     let $DispSort3 = 'Employee ID'
  end-if

  if $SortInd3 = '3'
     let $Sort3 = 'EE.SIN ASC'
     let $DispSort3 = 'Employee SIN'
  end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if
 end-if

   if $SortInd = '2' and $SortInd1 = '1'
      move 'R' to $SortCode
   else
      if $SortInd = '2' and $SortInd1 = '2'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

   if $SortInd <> '1'
      display '  '
      display '  '
      display 'Your sort sequence is ' noline
      display $DisplaySeq
      display '  '
      display '  '
     display 'Is this sequence correct?'
     display 'If the sequence is correct, enter Y'

      while $Response = ''
        input $Response 'Enter Y to continue or enter Q to quit'
        uppercase $Response
        if INSTR('YQ',$Response, 1) = 0
          display ' '
          display '***** Enter Y or Q to quit *****'
          display ' '
          move '' to $Response
        end-if
      end-while

     if $Response = 'Q'
        stop
     end-if
   else
     display 'Standard Government sort selected.'
   end-if

  while $SelectEEs = ''
    display ''
    display 'Regular processing or Select employees?'
    input $SelectEEs 'Enter R or S'
    uppercase $SelectEEs
    if INSTR('RS',$SelectEEs,1) = 0
      display 'Enter R or S'
      move '' to $SelectEEs
    end-if
  end-while

  if $SelectEEs = 'S'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND EE.EMPLID in (''' to $E.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      if $SelectedEmplID <> ''
        uppercase $SelectedEmplID
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
  end-if

end-procedure

begin-procedure Array-Create

  create-array name=FootNotes size=100 -
    field=FN_Box_Num:char              -
    field=FN_Box_Priority:number       -
    field=FN_Text:char

  create-array name=FormNotes size=100 -
    field=Box_Num:char                 -
    field=Box_Priority:number          -
    field=Text:char                    -
    field=Box_Value:char               -
    field=Box_Amount:number

end-procedure


begin-procedure Array-Setup-FootNotes

  let #i = 0

begin-SELECT
FN.BOX
FN.BOX_NOTE_SEQ
FN.BOX_NOTE_TEXT
FN.EFFDT

  let $TAXFORM_NOTES-BOX_NOTE_TEXT = &FN.BOX_NOTE_TEXT
  do Get_Related_TAXFORM_NOTES(&FN.BOX,&FN.EFFDT,'V')

  PUT  &FN.Box &FN.Box_Note_Seq $TAXFORM_NOTES-BOX_NOTE_TEXT
          INTO FOOTNOTES(#I) FN_BOX_NUM FN_BOX_PRIORITY FN_TEXT

  move #i to #max_i
  add 1 to #i


FROM  PS_TAXFORM_NOTES  FN
WHERE FN.TAXFORM_ID  =  'V'
  AND FN.EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_TAXFORM_NOTES
      WHERE EFFDT <= $AsOfDate
        AND TAXFORM_ID = 'V')
end-SELECT
end-procedure


begin-procedure  Process-Main

begin-SELECT
SL.REPORTING_ID
SL.RELEVE2_SLIP_NO
SL.COMPANY
SL.WAGE_LOSS_PLAN
SL.EMPLID
SL.CALENDAR_YEAR
SL.PROVINCE
SL.SEQUENCE_NUMBER
SL.YE_SLIP_PROCESS
SL.PROVENANCE
SL.SIN_CONTRB_SPOUSE
EE.SIN
EE.EMPLID
EE.SLIP_SURNAME
EE.SLIP_FIRST_NAME
EE.SLIP_INITIAL
EE.ADDRESS1
EE.ADDRESS2
EE.CITY
EE.PROVINCE
EE.COUNTRY
EE.POSTAL
EE.LOCATION
EE.DEPTID
EE.MAIL_DROP

 if $Proc_Amend_Cancel = 'Y'
  do Check-Status
 end-if

 if $StatusOpen = 'Y'

  if $FirstRecord = 'N'
    if $SortInd = '1'

      if &EE.EmplID <> $EmplID or
         &SL.Reporting_ID <> $ReportID
         do Print-RV2-Data
         do Finish-Printing

         if &SL.Reporting_ID <> $ReportID
            if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
              do Write-Summary-Record
            end-if
         end-if
         do Initialize-Employee-Data
         move 0 to #j
      end-if
    else
      if $SortInd1 = '1'
         if &SL.Reporting_ID <> $ReportID or
            &EE.EmplID <> $EmplID
            do Print-RV2-Data
            do Finish-Printing
            if &SL.Reporting_ID <> $ReportID
               if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
                 do Write-Summary-Record
               end-if
            end-if
            do Initialize-Employee-Data
            move 0 to #j
         end-if
      else
         if &SL.Company <> $Company or
            &SL.Reporting_ID <> $ReportID or
            &EE.EmplID <> $EmplID
            do Print-RV2-Data
            do Finish-Printing
            if &SL.Company <> $Company
               if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
                 do Write-Summary-Record
               end-if
            end-if
            do Initialize-Employee-Data
            move 0 to #j
         end-if
      end-if
    end-if
  else
    move 'N' to $FirstRecord
  end-if

  do Check-Releve-Start-No
  do Format-Employee-Data
  do Get-Slip-Detail

  if &SL.Company <> $PriorCompany and $Compbrk = 'Y'
    if $FormType <> 'L'
       do New-Company-Break
    end-if
  end-if

  if &SL.Company <> $PriorCompany
      move &SL.Company to $Company
      do Get-Company-Data
      move $Company to $PriorCompany
      move 'Y'      to $Compbrk
  end-if

  if $Proc_Amend_Cancel = 'Y' and $RC_CAN_YE.RL2_Final_Print = 'Y'
    do Close-Amend-Cancel-RL-2
  end-if

 end-if

FROM   PS_CAN_YE_SLIP  SL,
       PS_CAN_YE_EMPL  EE
WHERE  SL.CALENDAR_YEAR = &TX.Balance_Year
  AND  SL.TAXFORM_ID = 'V'
  AND  SL.PROCESS_FLAG <> 'V'
  AND  EE.CALENDAR_YEAR = &TX.Balance_Year
  AND  EE.EMPLID = SL.EMPLID
#ifdef MVS
  \$E.SelectedEEs\
#else
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used
#endif
  AND  EE.COMPANY = SL.COMPANY
  AND  EE.SEQUENCE_NUMBER = SL.SEQUENCE_NUMBER
  AND  SL.SEQUENCE_NUMBER = (SELECT MAX(SL1.SEQUENCE_NUMBER)
               FROM PS_CAN_YE_SLIP SL1
               WHERE SL1.COMPANY = SL.COMPANY
                 AND SL1.EMPLID  = SL.EMPLID
                 AND SL1.CALENDAR_YEAR = SL.CALENDAR_YEAR
#ifdef MVS
  \$seq_number\
#else
  [$seq_number]
#endif
#ifdef MVS
  \$ye_slip_process\
#else
  [$ye_slip_process]
#endif
#ifdef MVS
  ORDER by \$SORTSEQUENCE\
#else
  ORDER by [$SortSequence]
#endif
end-SELECT

   if $EmplID <> ''
     do Print-RV2-Data
     do Finish-Printing

     if $SelectEEs = 'R' or $SelectEEs = 'A' or $SelectEEs = 'C'
       do Write-Summary-Record
     end-if
   end-if

end-procedure

begin-procedure Check-Releve-Start-No

begin-SELECT
RV.RELEVE2_SERIAL_BEG
RV.RELEVE2_SERIAL_END

  if &RV.Releve2_Serial_Beg > 0  and
     &RV.Releve2_Serial_End = 0
        display 'If you plan to file by magnetic media, you must run '
        display 'job CTX910VM.SQR first to calculate the Releve Serial '
        display 'numbers to be printed on the paper forms.  If you do  '
        display 'not plan to file by magnetic media, set the Beginning '
        display 'Serial Number to 0 on the PQ_REPTNG_TBL. Then run this job.'
      STOP
  end-if


FROM PS_PQ_REPTNG_TBL  RV
WHERE RV.COMPANY = &SL.COMPANY
  AND EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_PQ_REPTNG_TBL
     WHERE  COMPANY = RV.COMPANY
       AND  EFFDT  <= $AsOfDate)
end-SELECT

end-procedure


begin-procedure Get-SLIP-Detail

begin-SELECT
DE.BOX
DE.CAN_YE_BOX_TEXT
DE.CAN_YE_BOX_AMT

  EXTRACT $FN_Ind from &DE.Box 2 1
  if $FN_Ind = '' or $FN_Ind = ' '
    do Accumulate-Employee-Data
  else
    do Insert-EmplNote-Data
  end-if

FROM  PS_CAN_YE_DETAIL DE
WHERE EMPLID            = &EE.EmplID
  AND TAXFORM_ID        = 'V'
  AND WAGE_LOSS_PLAN    = &SL.Wage_Loss_Plan
  AND CALENDAR_YEAR     = &TX.Balance_Year
  AND COMPANY           = &SL.Company
  AND SEQUENCE_NUMBER   = &SL.Sequence_Number
end-SELECT

end-procedure


begin-procedure Insert-EmplNote-Data

  move 0 to #k
  move 50 to #max_k

  while #k <= #max_k
     get $FindBox from FormNotes(#k) Box_Num
     if $FindBox = &DE.Box
        array-add #DE.Can_YE_Box_Amt to FormNotes(#k) Box_Amount
        break
     else
       if $FindBox = ' ' or $FindBox = ''
          put  &DE.Box &DE.Can_YE_Box_Text &DE.Can_YE_Box_Amt
             into FormNotes(#k) Box_Num Box_Value Box_Amount
           let #max_j = #k + 1

          move 0 to #i
          while #i <= #max_i
            do Get-FootNotes
            if $FN_Box = &DE.Box
               put #FN_Priority $FN_Text
                 into FormNotes(#k) Box_Priority Text
               break
            else
              if $FN_Box = '' or $FN_Box = ' '
                 break
              else
                 add 1 to #i
              end-if
            end-if
          end-while
       else
          add 1 to #k
       end-if
    end-if
  end-while

end-procedure

begin-procedure Get-FootNotes

  get  $FN_Box
       #FN_Priority
       $FN_Text
  from FootNotes(#i)
        FN_Box_Num
        FN_Box_Priority
        FN_Text

end-procedure


begin-procedure Accumulate-Employee-Data


    let $Box = RTRIM(&DE.Box, ' ')
    let #BoxAmt = &DE.Can_YE_Box_Amt
    let $BoxText = &DE.Can_YE_Box_Text

    evaluate $Box

       when = 'A'
         if #BoxAmt > 0
            add #BoxAmt to #TotLAPayment
            add #BoxAmt to #LAPayment
         end-if

       when = 'B'
         if #BoxAmt > 0
            add #BoxAmt to #TotMBenefits
            add #BoxAmt to #MBenefits
         end-if

       when = 'C'
         if #BoxAmt > 0
            add #BoxAmt to #TotOPayments
            add #BoxAmt to #OPayments
         end-if

       when = 'D'
         if #BoxAmt > 0
            add #BoxAmt to #TotRefRRSP
            add #BoxAmt to #RefRRSP
         end-if

       when = 'E'
         if #BoxAmt > 0
            add #BoxAmt to #TotAmtPriorD
            add #BoxAmt to #AmtPriorD
         end-if

       when = 'F'
         if #BoxAmt > 0
            add #BoxAmt to #TotRExcessRRSP
            add #BoxAmt to #RExcessRRSP
         end-if

       when = 'G'
         if #BoxAmt > 0
           add #BoxAmt to #TotRecRevRRP
           add #BoxAmt to #RecRevRRP
         end-if

       when = 'H'
         if #BoxAmt > 0
            add #BoxAmt to #TotOtherIncome
            add #BoxAmt to #OtherIncome
         end-if

       when = 'I'
         if #BoxAmt > 0
            add #BoxAmt to #TotEntlDed
            add #BoxAmt to #EntlDed
         end-if

       when = 'J'
         if #BoxAmt > 0
            add #BoxAmt to #TotQITWithheld
            add #BoxAmt to #QITWithheld
         end-if

       when = 'K'
         if #BoxAmt > 0
            add #BoxAmt to #TotIncDeath
            add #BoxAmt to #IncDeath
         end-if

       when = 'L'
         if #BoxAmt > 0
            add #BoxAmt to #TotWthdrwlLLP
            add #BoxAmt to #WthdrwlLLP
         end-if

       when = 'M'
         if #BoxAmt > 0
            add #BoxAmt to #TotTaxPaid
            add #BoxAmt to #TaxPaid
         end-if

      when = 'O'
         if #BoxAmt > 0
            add #BoxAmt to #TotWthdrwlHBP
            add #BoxAmt to #WthdrwlHBP
         end-if

      end-evaluate

end-procedure

begin-procedure Print-RV2-Data

  add 1 to #RV2Count

  let $RV2SlipNo = edit($Releve2_Slip_No, 'xxxbbxxxbbxxx')
  if $FormType <> 'L'
     print $RV2SlipNo (2,62)

     if $SelectEEs = 'S' or $SelectEEs = 'E'
        print 'DUPLICATE' (1,41)
     end-if
  else
     print $RV2SlipNo (#Slip1_Row2,61)
     print $RV2SlipNo (#Slip2_Row2,61)
     print $RV2SlipNo (#Slip3_Row2,61)

     if $SelectEEs = 'S' or $SelectEEs = 'E'
        let #Dup1_Row =  #Slip1_Row1
        let #Dup2_Row =  #Slip2_Row1
        let #Dup3_Row =  #Slip3_Row1
        print 'DUPLICATE' (#Dup1_Row,41)
        print 'DUPLICATE' (#Dup2_Row,41)
        print 'DUPLICATE' (#Dup3_Row,41)
     end-if
  end-if

  if $FormType <> 'L'
      print $TaxYear (3,38)

  else
     print $TaxYear (#Slip1_Row4,37)
     print $TaxYear (#Slip2_Row4,37)
     print $TaxYear (#Slip3_Row4,37)

  end-if


         if #LAPayment > 0
            do Format-Number (#LAPayment, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,2)                         ! Box 'A' - print all depends on layout
         else
            print $BoxAmt (#Slip1_Row10,1)
            print $BoxAmt (#Slip2_Row10,1)
            print $BoxAmt (#Slip3_Row10,1)

         end-if

         if #MBenefits > 0
            do Format-Number (#MBenefits, $BoxAmt, '99999999.00')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,15)                        ! Box 'B'
         else
            print $BoxAmt (#Slip1_Row10,14)
            print $BoxAmt (#Slip2_Row10,14)
            print $BoxAmt (#Slip3_Row10,14)
         end-if

         if #OPayments > 0
            do Format-Number (#OPayments, $BoxAmt, '99999999.00')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,27)                        ! Box 'C'
         else
            print $BoxAmt (#Slip1_Row10,26)
            print $BoxAmt (#Slip2_Row10,26)
            print $BoxAmt (#Slip3_Row10,26)

         end-if

         if #RefRRSP > 0
            do Format-Number (#RefRRSP, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,40)                        ! Box 'D'
         else
            print $BoxAmt (#Slip1_Row10,39)
            print $BoxAmt (#Slip2_Row10,39)
            print $BoxAmt (#Slip3_Row10,39)
         end-if

         if #AmtPriorD > 0
            do Format-Number (#AmtPriorD, $BoxAmt, '99999999.00')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,53)                        ! Box 'E'
         else
            print $BoxAmt (#Slip1_Row10,52)
            print $BoxAmt (#Slip2_Row10,52)
            print $BoxAmt (#Slip3_Row10,52)
         end-if

         if #RExcessRRSP > 0
            do Format-Number (#RExcessRRSP, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (6,65)                        ! Box 'F'
         else
            print $BoxAmt (#Slip1_Row10,64)
            print $BoxAmt (#Slip2_Row10,64)
            print $BoxAmt (#Slip3_Row10,64)
         end-if

         if #RecRevRRP > 0
            do Format-Number (#RecRevRRP, $BoxAmt, '99999999.00')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (9,2)                         ! Box 'G'
         else
            print $BoxAmt (#Slip1_Row16,1)
            print $BoxAmt (#Slip2_Row16,1)
            print $BoxAmt (#Slip3_Row16,1)
         end-if

         if #OtherIncome > 0
            do Format-Number (#OtherIncome, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (9,15)                         ! Box 'H'
         else
            print $BoxAmt (#Slip1_Row16,14)
            print $BoxAmt (#Slip2_Row16,14)
            print $BoxAmt (#Slip3_Row16,14)
         end-if

         if #EntlDed > 0
            do Format-Number (#EntlDed, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
            print $BoxAmt (9,27)                         ! Box 'I'
         else
            print $BoxAmt (#Slip1_Row16,26)
            print $BoxAmt (#Slip2_Row16,26)
            print $BoxAmt (#Slip3_Row16,26)
         end-if

         if #QITWithheld > 0
            do Format-Number (#QITWithheld, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
           print $BoxAmt (9,40)                          ! Box 'J'
         else
           print $BoxAmt (#Slip1_Row16,39)
           print $BoxAmt (#Slip2_Row16,39)
           print $BoxAmt (#Slip3_Row16,39)
         end-if

         if #IncDeath > 0
            do Format-Number (#IncDeath, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
           print $BoxAmt (9,53)                          ! Box 'K'
         else
           print $BoxAmt (#Slip1_Row16,52)
           print $BoxAmt (#Slip2_Row16,52)
           print $BoxAmt (#Slip3_Row16,52)
         end-if

         if #WthdrwlLLP > 0
            do Format-Number (#WthdrwlLLP, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
           print $BoxAmt (9,65)                          ! Box 'L'
         else
           print $BoxAmt (#Slip1_Row16,64)
           print $BoxAmt (#Slip2_Row16,64)
           print $BoxAmt (#Slip3_Row16,64)
         end-if


         if #TaxPaid > 0
            do Format-Number (#TaxPaid, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
           print $BoxAmt (11,53)                         ! Box 'M'
         else
           print $BoxAmt (#Slip1_Row20,52)
           print $BoxAmt (#Slip2_Row20,52)
           print $BoxAmt (#Slip3_Row20,52)
         end-if

         if #WthdrwlHBP > 0
            do Format-Number (#WthdrwlHBP, $BoxAmt, '99999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $FormType <> 'L'
           print $BoxAmt (11,65)                         ! Box 'O'
         else
           print $BoxAmt (#Slip1_Row20,64)
           print $BoxAmt (#Slip2_Row20,64)
           print $BoxAmt (#Slip3_Row20,64)
         end-if


!*******************************************************************************
!* Provenance field change
!* for a fixed value in the provenance field fill in the $BoxAmt value and                                                      !* uncomment the next two lines .....
!  move ' ' to $BoxAmt
!  print $BoxAmt (3,45)                                 ! Provenance field
!*******************************************************************************

  if $FormType <> 'L'
     print $Provenance (3,52)                            ! Provenance field
  else
     print $Provenance (#Slip1_Row4,51)
     print $Provenance (#Slip2_Row4,51)
     print $Provenance (#Slip3_Row4,51)
  end-if

  if $FormType <> 'L'
     print $SIN_Contrb_Spouse (14,62)                    ! Box 'N'
  else
     print $SIN_Contrb_Spouse (#Slip1_Row26,61)
     print $SIN_Contrb_Spouse (#Slip2_Row26,61)
     print $SIN_Contrb_Spouse (#Slip3_Row26,61)
  end-if

  if $FormType <> 'L'
     print $Code_du_Releve (3,44)                        ! Code du Releve field
  else
     print $Code_du_Releve (#Slip1_Row4,43)
     print $Code_du_Releve (#Slip2_Row4,43)
     print $Code_du_Releve (#Slip3_Row4,43)
  end-if

end-procedure

begin-procedure Format-Employee-Data

  let $SIN = edit(&EE.SIN, 'xxxbxxxbxxx')

  let $LastName = &EE.SLIP_Surname
  let $LastName = RTRIM($LastName, ' ')
  let $FirstName = &EE.SLIP_First_Name
  let $FirstName = RTRIM($FirstName, ' ')
  let $MidInitial = &EE.SLIP_Initial

  let $Name = $LastName || ', ' || $FirstName || ' ' || $MidInitial
  do convert-to-char($Name, $Name)
  let $Street1 =  &EE.Address1
  do convert-to-char($Street1, $Street1)
  let $Street2 =  &EE.Address2
  let $Street2 = RTRIM(&EE.Address2, ' ')
  do convert-to-char($Street2, $Street2)

  let $EeAddr = RTRIM(&EE.City, ' ')
  do convert-to-char($EeAddr, $EeAddr)
  let $ProvCd = rtrim(&EE.Province, ' ')
  if $ProvCd = 'ZZ'
     move ' ' to $ProvCd
  end-if
  concat $ProvCd with $EeAddr ,bxx
  if &EE.Country <> 'CAN'
     move &EE.Country to $Country
     concat $Country with $EeAddr bxxxxxxxxxx
  end-if
  let $TempAddr = RTRIM($EeAddr, ' ')

  unstring &EE.POSTAL by ' ' into $ZIP1 $ZIP2
  let $ZIP1 = $ZIP1  || $ZIP2

  if &EE.Country = 'CAN'
     let $ZipValue = edit($ZIP1, 'xxxbxxx')
     let $PrintAddr = $TempAddr || '  ' || $ZipValue
     let $PrintZip = ' '
  else
     let $PrintAddr = $TempAddr
     let $PrintZip = rtrim(&EE.POSTAL, ' ')
  end-if

  let $ReportID =  &SL.Reporting_ID
  let $Provenance = edit(&SL.Provenance, 'xxxxxx')

  let $SIN_Contrb_Spouse  = edit(&SL.SIN_Contrb_Spouse,'xxxbxxxbxxx')

  let $Releve2_Slip_No = &SL.Releve2_Slip_No
  let $EmplID =  &EE.EmplID
  let $Slip_Process = &SL.YE_Slip_Process

  evaluate $SelectEEs
     when = 'R'
     when = 'S'
        let $Code_du_Releve  = '0'
        break
     when = 'A'
     when = 'E'
        if $Slip_Process = 'A'
           let $Code_du_Releve  = '1'
        end-if
        break
     when-other
        let $Code_du_Releve  = ' '
        break
  end-evaluate

end-procedure

begin-procedure Finish-Printing

  if ($SelectEEs = 'A' or $SelectEEs = 'E') and $Slip_Process = 'A'
    if $FormType <> 'L'
      print 'AMENDED' (1,30)
    else
      print 'AMENDED' (#Slip1_Row1,30)
      print 'AMENDED' (#Slip2_Row1,30)
      print 'AMENDED' (#Slip3_Row1,30)
    end-if
  end-if

  if ($SelectEEs = 'C' or $SelectEEs = 'E') and $Slip_Process = 'C'
    if $FormType <> 'L'
      print 'CANCELLED' (1,30)
    else
      print 'CANCELLED' (#Slip1_Row1,30)
      print 'CANCELLED' (#Slip2_Row1,30)
      print 'CANCELLED' (#Slip3_Row1,30)
    end-if
  end-if

  if $FormType <> 'L'
     print $SIN (14,44)
  else
     print $SIN (#Slip1_Row26,43)
     print $SIN (#Slip2_Row26,43)
     print $SIN (#Slip3_Row26,43)
  end-if

! print $ReportID (15,62)

  if $FormType <> 'L'
     print $Name (15,3)
     print $Street1 (16,3)
  else
     print $Name    (#Slip1_Row25,3)
     print $Street1 (#Slip1_Row27,3)
     print $Name    (#Slip2_Row26,3)
     print $Street1 (#Slip2_Row28,3)
     print $Name    (#Slip3_Row25,3)
     print $Street1 (#Slip3_Row27,3)
  end-if

  if $Street2 <> ''
    if $FormType <> 'L'
      print $Street2 (17,3)
      print $PrintAddr (18,3)
      print $PrintZip (19,3)
    else
      print $Street2   (#Slip1_Row29,3)
      print $PrintAddr (#Slip1_Row31,3)
      print $PrintZip  (#Slip1_Row33,3)

      print $Street2   (#Slip2_Row30,3)
      print $PrintAddr (#Slip2_Row32,3)
      print $PrintZip  (#Slip2_Row34,3)

      print $Street2   (#Slip3_Row29,3)
      print $PrintAddr (#Slip3_Row31,3)
      print $PrintZip  (#Slip3_Row33,3)
    end-if
  else
    if $FormType <> 'L'
       print $PrintAddr (17,3)
       print $PrintZip (18,3)
    else
       print $PrintAddr (#Slip1_Row29,3)
       print $PrintZip  (#Slip1_Row31,3)

       print $PrintAddr (#Slip2_Row30,3)
       print $PrintZip  (#Slip2_Row32,3)

       print $PrintAddr (#Slip3_Row29,3)
       print $PrintZip  (#Slip3_Row31,3)

    end-if
  end-if

  do Format-Company-Data

  if $FormType <> 'L'
     print $CompanyName (17,44)
     print $CompStreet1 (18,44)
     print $PrintCompAddr (19,44)
  else
     print $CompanyName   (#Slip1_Row30,44)
     print $CompStreet1   (#Slip1_Row32,44)
     print $PrintCompAddr (#Slip1_Row34,44)

     print $CompanyName   (#Slip2_Row30,44)
     print $CompStreet1   (#Slip2_Row32,44)
     print $PrintCompAddr (#Slip2_Row34,44)

     print $CompanyName   (#Slip3_Row30,44)
     print $CompStreet1   (#Slip3_Row32,44)
     print $PrintCompAddr (#Slip3_Row34,44)
  end-if

  if #max_j > 0
     do Print-Footnotes
  end-if

  if $FormType <> 'L'
     print '  ' (24,5)
  else
     do Insert-FormFeed
  end-if

  new-page

end-procedure

begin-procedure Format-Company-Data
  do convert-to-char($CompanyName, $CompanyName)
  let $CompStreet1 = $CompnyAdd1
  do convert-to-char($CompStreet1, $CompStreet1)

  let $ErAddr = RTRIM($CompnyCity, ' ')
  let $ProvCd = rtrim(&CT.State, ' ')
  concat $ProvCd with $ErAddr ,bxx
  do convert-to-char($ErAddr, $ErAddr)
  if &CT.Country <> 'CAN'
     move &CT.Country to $Country
     concat $Country with $ErAddr bxxxxxxxxxx
  end-if
  let $TempCompAddr = RTRIM($ErAddr, ' ')

  unstring &CT.POSTAL by ' ' into $ErZIP1 $ErZIP2
  let $ErZIP1 = $ErZIP1 || $ErZIP2
  let $ErZipValue = edit($ErZIP1, 'xxxbxxx')
  do convert-to-char($ErZipValue, $ErZipValue)
  let $PrintCompAddr = $TempCompAddr || '  ' || $ErZipValue


end-procedure

begin-procedure Print-Footnotes


  move 'Y' to $MoreFootnotes
  move 0 to #NoteCount

  move 2 to #MaxFootnotes

  while #NoteCount < #MaxFootnotes
     if #NoteCount > #max_j  or $MoreFootnotes = 'N'
        break
     end-if
     move 999 to #HoldPriority
     move 0 to #j

     while #j <= #max_j
        get $CkBox #BoxPriority from FormNotes(#j) Box_Num Box_Priority
        move #BoxPriority to $BoxPriority
        if $CkBox = ' ' or
           $CkBox = ''
           break
        else
          if #BoxPriority < #HoldPriority and
             #BoxPriority <> 0
             let #HoldIdx = #j
             move #BoxPriority to #HoldPriority
          end-if
          add 1 to #j
        end-if
     end-while
      if #HoldPriority <> 999 and
         #HoldPriority <> 0
        put 999 into FormNotes (#HoldIdx) Box_Priority

        get $Note_Box from FormNotes (#HoldIdx) Box_Num
        get $Note_Text from FormNotes (#HoldIdx) Text
        get #Note_Amt from FormNotes (#HoldIdx) Box_Amount
        get $Note_Value from FormNotes (#HoldIdx) Box_Value

        add 1 to #NoteCount
        evaluate #NoteCount
           when = 1
             if $FormType <> 'L'
                let #FNLine = 11
                let #FNCol  = 2
             else
                let #Slip1_FNLine = 20
                let #Slip_FNCol  = 1
             end-if

           when = 2
             if $FormType <> 'L'
                let #FNLine = 12
                let #FNCol  = 2
             else
                let #Slip1_FNLine = 22
                let #Slip_FNCol  = 1
             end-if

        end-evaluate

       if $FormType = 'L'
          let #Slip2_FNLine = #Slip1_FNLine + 44
          let #Slip3_FNLine = #Slip2_FNLine + 44
       end-if

       let $Note_Text = RTRIM($Note_Text, ' ')
       let $Note_Text = SUBSTR($Note_Text,1,30)

       if #Note_Amt <> 0
         do Format-Number(#Note_Amt, $Note_Amt, '999999.99')
         let $Note_Amt = LTRIM($Note_Amt, ' ')
         let $PrintAmt =  '$' || $Note_Amt || ' ' || $Note_Text

         if $FormType <> 'L'
           print $PrintAmt (#FNLine,#FNCol)
         else
           print $PrintAmt (#Slip1_FNLine,#Slip_FNCol)
           print $PrintAmt (#Slip2_FNLine,#Slip_FNCol)
           print $PrintAmt (#Slip3_FNLine,#Slip_FNCol)
         end-if
       else
         if $Note_Text <> ''
           let $PrintAmt = $Note_Text
           if $FormType <> 'L'
             print $Note_Text (#FNLine,#FNCol)
           else
             print $Note_Text (#Slip1_FNLine,#Slip_FNCol)
             print $Note_Text (#Slip2_FNLine,#Slip_FNCol)
             print $Note_Text (#Slip3_FNLine,#Slip_FNCol)
           end-if
         end-if
       end-if

      else
         move 'N' to $MoreFootnotes
      end-if

  end-while
  do Initialize-FormNotes-Array

end-procedure

begin-procedure Initialize-FormNotes-Array

  let #i = 0
  let $InitSpace = ' '
  let #InitNumber = 0

  while #i <= #max_i
   put $InitSpace #InitNumber $InitSpace $InitSpace #InitNumber
    into FormNotes(#i) Box_Num Box_Priority Text Box_Value Box_Amount

    add 1 to #i
  end-while

end-procedure


begin-procedure Initialize-Employee-Data

  move 0 to #LAPayment                ! box A
  move 0 to #MBenefits                ! box B
  move 0 to #OPayments                ! box C
  move 0 to #RefRRSP                  ! box D
  move 0 to #AmtPriorD                ! box E
  move 0 to #RExcessRRSP              ! box F
  move 0 to #RecRevRRP                ! box G
  move 0 to #OtherIncome              ! box H
  move 0 to #EntlDed                  ! box I
  move 0 to #QITWithheld              ! box J
  move 0 to #IncDeath                 ! box K
  move 0 to #WthdrwlLLP               ! box L
  move 0 to #TaxPaid                  ! box M
  move 0 to #WthdrwlHBP               ! box O

end-procedure

begin-procedure Write-Summary-Record

!Totals Formatting

  do format-number(#CalendarYear, $TaxYear, '9999')
  do format-number(#RV2Count, $TotalSupplementary, '0999999')
  do format-number(#TotLAPayment, $TotalLAPayment, '0999999999.99')
  do format-number(#TotMBenefits, $TotalMBenefits, '09999999.99')
  do format-number(#TotOPayments, $TotalOPayments, '09999999.99')
  do format-number(#TotRefRRSP, $TotalRefRRSP, '09999999.99')
  do format-number(#TotAmtPriorD, $TotAmtPriorD, '09999999.99')
  do format-number(#TotRExcessRRSP, $TotalRExcessRRSP, '09999999.99')
  do format-number(#TotRecRevRRP, $TotalRecRevRRP, '0999999999.99')
  do format-number(#TotOtherIncome, $TotalOtherIncome, '09999999.99')
  do format-number(#TotEntlDed, $TotEntlDed, '09999999.99')
  do format-number(#TotQITWithheld, $TotQITWithheld, '09999999.99')
  do format-number(#TotIncDeath, $TotIncDeath, '0999999999.99')
  do format-number(#TotWthdrwlLLP, $TotWthdrwlLLP, '0999999999.99')
  do format-number(#TotTaxPaid, $TotTaxPaid, '09999999.99')
  do format-number(#TotWthdrwlHBP, $TotWthdrwlHBP, '0999999999.99')

  write 1 from $CompanyName:30          -    ! 1   thru  30  Summary record
               $TaxYear:4               -    ! 31  thru 34
               $TotalSupplementary:7    -    ! 35  thru 41
               $TotalLAPayment:13       -    ! 42  thru 54   Box A
               $TotalMBenefits:11       -    ! 55  thru 65   Box B
               $TotalOPayments:11       -    ! 66  thru 76   Box C
               $TotalRefRRSP:11         -    ! 77  thru 87   Box D
               $TotAmtPriorD:11         -    ! 88  thru 98   Box E
               $TotalRExcessRRSP:11     -    ! 99  thru 109  Box F
               $TotalRecRevRRP:13       -    ! 110 thru 122  Box G
               $TotalOtherIncome:11     -    ! 123 thru 133  Box H
               $TotEntlDed:11           -    ! 134 thru 144  Box I
               $TotQITWithheld:11       -    ! 145 thru 155  Box J
               $TotIncDeath:13          -    ! 156 thru 168  Box K
               $TotWthdrwlLLP:13        -    ! 169 thru 181  Box L
               $TotTaxPaid:11           -    ! 182 thru 192  Box M
               $TotWthdrwlHBP:15        -    ! 193 thru 207  Box O
               $ReportID:16             -    ! 208 thru 223  no box
               $ReportType:1                 ! 224 thru 224  original/amended/cancelled

  do Init-Summary-Values

end-procedure


begin-procedure Init-Summary-Values

  move 0 to #RV2Count                 ! box no equiv
  move 0 to #TotLAPayment             ! box A
  move 0 to #TotMBenefits             ! box B
  move 0 to #TotOPayments             ! box C
  move 0 to #TotRefRRSP               ! box D
  move 0 to #TotAmtPriorD             ! box E
  move 0 to #TotRExcessRRSP           ! box F
  move 0 to #TotRecRevRRP             ! box G
  move 0 to #TotOtherIncome           ! box H
  move 0 to #TotEntlDed               ! box I
  move 0 to #TotQITWithheld           ! box J
  move 0 to #TotIncDeath              ! box K
  move 0 to #TotWthdrwlLLP            ! box L
  move 0 to #TotTaxPaid               ! box M
  move 0 to #TotWthdrwlHBP            ! box O

end-procedure

begin-procedure Printer-Alignment

  while #AlignPageCnt < &TX.ALIGN_COUNT
    do Printer-Align-Page
    add 1   to #AlignPageCnt
  end-while

end-procedure


begin-procedure New-Company-Break

  while #ComPgBrkCnt < 3
    do Printer-Align-Page
    add 1   to #ComPgBrkCnt
  end-while

  move 0 to #ComPgBrkCnt

end-procedure

begin-procedure Insert-FormFeed

#ifndef MVS
#ifndef OS400
 encode '<27>&k2G' into $FormFeed
#else
 encode '<39>&k2G' into $FormFeed
#endif
#else
 encode '<39>&k2G' into $FormFeed
#endif

 print $FormFeed () code
 print ' ' (140,01)

end-procedure

begin-procedure Set-RV2-Row-Pointers

  let #Slip1_Row1 = 1
  let #Slip1_Row2 = 2
  let #Slip1_Row3 = 3
  let #Slip1_Row4 = 4
  let #Slip1_Row8 = 8
  let #Slip1_Row10 = 10
  let #Slip1_Row12 = 12
  let #Slip1_Row14 = 14
  let #Slip1_Row16 = 16
  let #Slip1_Row18 = 18
  let #Slip1_Row19 = 19
  let #Slip1_Row20 = 20
  let #Slip1_Row22 = 22
  let #Slip1_Row24 = 24
  let #Slip1_Row25 = 25
  let #Slip1_Row26 = 26
  let #Slip1_Row27 = 27
  let #Slip1_Row28 = 28
  let #Slip1_Row29 = 29
  let #Slip1_Row30 = 30
  let #Slip1_Row31 = 31
  let #Slip1_Row32 = 32
  let #Slip1_Row33 = 33
  let #Slip1_Row34 = 34
  let #Slip1_Row35 = 35
  let #Slip1_Row36 = 36
  let #Slip1_Row37 = 37
  let #Slip1_Row38 = 38

  let #Slip2_Row1  = #Slip1_Row1 + 44
  let #Slip2_Row2  = #Slip1_Row2 + 44
  let #Slip2_Row3  = #Slip1_Row3 + 44
  let #Slip2_Row4  = #Slip1_Row4 + 44
  let #Slip2_Row8 =  #Slip1_Row8 + 44
  let #Slip2_Row10 = #Slip1_Row10 + 44
  let #Slip2_Row12 = #Slip1_Row12 + 44
  let #Slip2_Row14 = #Slip1_Row14 + 44
  let #Slip2_Row16 = #Slip1_Row16 + 44
  let #Slip2_Row18 = #Slip1_Row18 + 44
  let #Slip2_Row19 = #Slip1_Row19 + 44
  let #Slip2_Row20 = #Slip1_Row20 + 44
  let #Slip2_Row22 = #Slip1_Row22 + 44
  let #Slip2_Row24 = #Slip1_Row24 + 44
  let #Slip2_Row25 = #Slip1_Row25 + 44
  let #Slip2_Row26 = #Slip1_Row26 + 44
  let #Slip2_Row27 = #Slip1_Row27 + 44
  let #Slip2_Row28 = #Slip1_Row28 + 44
  let #Slip2_Row29 = #Slip1_Row29 + 44
  let #Slip2_Row31 = #Slip1_Row31 + 44
  let #Slip2_Row33 = #Slip1_Row33 + 44
  let #Slip2_Row35 = #Slip1_Row35 + 44
  let #Slip2_Row37 = #Slip1_Row37 + 44
  let #Slip2_Row30 = #Slip1_Row30 + 44
  let #Slip2_Row31 = #Slip1_Row31 + 44
  let #Slip2_Row32 = #Slip1_Row32 + 44
  let #Slip2_Row34 = #Slip1_Row34 + 44
  let #Slip2_Row36 = #Slip1_Row36 + 44
  let #Slip2_Row38 = #Slip1_Row38 + 44

  let #Slip3_Row1  = #Slip2_Row1 + 44
  let #Slip3_Row2  = #Slip2_Row2 + 44
  let #Slip3_Row3  = #Slip2_Row3 + 44
  let #Slip3_Row4  = #Slip2_Row4 + 44
  let #Slip3_Row8  = #Slip2_Row8 + 44
  let #Slip3_Row10 = #Slip2_Row10 + 44
  let #Slip3_Row12 = #Slip2_Row12 + 44
  let #Slip3_Row14 = #Slip2_Row14 + 44
  let #Slip3_Row16 = #Slip2_Row16 + 44
  let #Slip3_Row18 = #Slip2_Row18 + 44
  let #Slip3_Row19 = #Slip2_Row19 + 44
  let #Slip3_Row20 = #Slip2_Row20 + 44
  let #Slip3_Row22 = #Slip2_Row22 + 44
  let #Slip3_Row24 = #Slip2_Row24 + 44
  let #Slip3_Row25 = #Slip2_Row25 + 44
  let #Slip3_Row26 = #Slip2_Row26 + 44
  let #Slip3_Row27 = #Slip2_Row27 + 44
  let #Slip3_Row28 = #Slip2_Row28 + 44
  let #Slip3_Row29 = #Slip2_Row29 + 44
  let #Slip3_Row30 = #Slip2_Row30 + 44
  let #Slip3_Row31 = #Slip2_Row31 + 44
  let #Slip3_Row32 = #Slip2_Row32 + 44
  let #Slip3_Row33 = #Slip2_Row33 + 44
  let #Slip3_Row34 = #Slip2_Row34 + 44
  let #Slip3_Row35 = #Slip2_Row35 + 44
  let #Slip3_Row36 = #Slip2_Row36 + 44
  let #Slip3_Row37 = #Slip2_Row37 + 44
  let #Slip3_Row38 = #Slip2_Row38 + 44

end-procedure

begin-procedure Printer-Align-Page

  let $Box_Value = 'XXX  XXX  XXX'
  print $Box_Value (2,62)

  let $Box_Value = '20XX'
 ! print $Box_Value (3,55)
  print $Box_Value (3,38)

  let $Box_Value = '9'
  print $Box_Value (3,44)

  let $Box_Value = 'TEST'
  print $Box_Value (3,51)

! let $Box_Value = 'XXXXXXXXXXXXXXRF'
! print $Box_Value (15,61)

  let $Box_Value = '9999999A.00'
  print $Box_Value (6,2)

  let $Box_Value = '9999999B.00'
  print $Box_Value (6,15)

  let $Box_Value = '9999999C.00'
  print $Box_Value (6,27)

  let $Box_Value = '9999999D.00'
  print $Box_Value (6,40)

  let $Box_Value = '9999999E.00'
  print $Box_Value (6,53)

  let $Box_Value = '9999999F.00'
  print $Box_Value (6,65)

  let $Box_Value = '9999999G.00'
  print $Box_Value (9,2)

  let $Box_Value = '9999999H.00'
  print $Box_Value (9,15)

  let $Box_Value = '9999999I.00'
  print $Box_Value (9,27)

  let $Box_Value = '9999999J.00'
  print $Box_Value (9,40)

  let $Box_Value = '9999999K.00'
  print $Box_Value (9,53)

  let $Box_Value = '9999999L.00'
  print $Box_Value (9,65)

  let $Box_Value = '9999999M.00'
  print $Box_Value (11,53)

  let $Box_Value = '9999999O.00'
  print $Box_Value (11,65)

  let $Box_Value = 'XXX XXX XSN'
  print $Box_Value (14,44)

  let $Box_Value = 'XXX XXX XSN'
  print $Box_Value (14,62)

  let $Box_Value = 'EMPLOYER NAME XXXXXXXXXXXXXXXX'
  print $Box_Value (17,44)

  let $Box_Value = 'EMPLOYER ADDRESS XXXXXXXXXXXXX'
  print $Box_Value (18,44)

  let $Box_Value = 'EMPLOYER CITY, PROV  POSTAL CD'
  print $Box_Value (19,44)

  let $Box_Value = 'EMPLOYEE NAME XXXXXX'
  print $Box_Value (15,3)

  let $Box_Value = 'EMPLOYEE ADDRESS XXX'
  print $Box_Value (16,3)

  let $Box_Value = 'EMPLOYEE ADDR LINE 2'
  print $Box_Value (17,3)

  let $Box_Value = 'EMPLOYEE CITY, PROV POSTAL CD'
  print $Box_Value (18,3)

  let $Box_Value = 'FOREIGN POSTAL CODE  '
  print $Box_Value (19,3)

!  let $Box_Value = 'FOOTNOTE 1 999999.99 XXXXXXXX'
!  print $Box_Value (11,2)
!
!  let $Box_Value = 'FOOTNOTE 2 999999.99 XXXXXXXX'
!  print $Box_Value (12,2)

  print ' ' (24,5)

  new-page

end-procedure

begin-procedure Convert-Parameters

 if $RC_CAN_YE.RV2_Primary_Sort  = '1'
       let $SortSequence = 'SL.REPORTING_ID ASC, ' ||
       'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

 else

      if $RC_CAN_YE.RV2_Primary_Sort  = '2'
         let $Sort1 = 'SL.REPORTING_ID ASC'
         let $DispSort1 = 'Quebec ID Number; '
      end-if

      if $RC_CAN_YE.RV2_Primary_Sort  = '3'
         let $Sort1 = 'SL.COMPANY ASC'
         let $DispSort1 = 'Company; '
      end-if

      if $RC_CAN_YE.RV2_Sec_Sort  = '1'
          let $Sort2 = 'EE.LOCATION ASC'
          let $DispSort2 = 'Location; '
      end-if

      if $RC_CAN_YE.RV2_Sec_Sort  = '2'
         let $Sort2 = 'EE.DEPTID ASC'
         let $DispSort2 = 'Department; '
      end-if

      if $RC_CAN_YE.RV2_Sec_Sort  = '3'
         let $Sort2 = 'EE.MAIL_DROP  ASC'
         let $DispSort2 = 'Mail Drop; '
      end-if

      if $RC_CAN_YE.RV2_Sec_Sort  = '4'
          let $Sort2 = 'EE.POSTAL  ASC'
          let $DispSort2 = 'Postal Code; '
      end-if

      if $RC_CAN_YE.RV2_SEC_SORT  = '5'
          let $Sort2 = 'N'
      end-if

      if $RC_CAN_YE.RV2_Third_Sort  = '1'
          let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
          let $DispSort3 = 'Employee Name; Employee ID'
      end-if

      if $RC_CAN_YE.RV2_Third_Sort  = '2'
         let $Sort3 = 'EE.EMPLID ASC'
         let $DispSort3 = 'Employee ID'
      end-if

      if $RC_CAN_YE.RV2_Third_Sort  = '3'
         let $Sort3 = 'EE.SIN ASC'
         let $DispSort3 = 'Employee SIN'
      end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if

end-if

    if $RC_CAN_YE.RV2_Primary_Sort  = '2'
          move 'R' to $SortCode
   else
      if $RC_CAN_YE.RV2_Primary_Sort  = '3'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

  let $FormType = $RC_CAN_YE.RV2_Form_Type
  let $SelectEEs = $RC_CAN_YE.RL2_Processing_Flg

  if $SelectEEs = 'S' or $SelectEEs = 'E'
    do Read-EEs
  end-if


  let $ye_slip_process = ' '
  let $seq_number      = ' '

  evaluate $SelectEEs
  when = 'A'                    ! Amended slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''A'' '
    let $seq_number      = ')'
    let $ReportType      = 'A'
    break
  when = 'C'                    ! Cancelled slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''C'' '
    let $seq_number      = ')'
    let $ReportType      = 'C'
    break
  when = 'E'
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS IN (''A'', ''C'') '
    let $seq_number      = ' AND SL1.TAXFORM_ID = SL.TAXFORM_ID AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    break
  when = 'R'
  when = 'S'
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''O'' '
    let $seq_number      = ' AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    let $ReportType      = 'O'
    break
  end-evaluate

  if $SelectEEs = 'A' or $SelectEEs = 'C'
    let $Proc_Amend_Cancel = 'Y'
  else
    let $StatusOpen = 'Y'
  end-if

end-procedure

!***********************************************************************
begin-procedure Declare-Printer-RV2
!***********************************************************************

  alter-printer
    symbol-set    = 10U
    font          = 3
    point-size    = 12

end-procedure

begin-procedure Read-EEs

move 'AND EE.EMPLID in (''' to $E.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
CT.EMPLID

  move &CT.EMPLID     to $SelectedEmplID

  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''

  move 'Y' to $EE_Selected

FROM  PS_RC_CTX910VP CT
WHERE CT.OPRID         = $Prcs_OprID
  AND CT.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

end-procedure


begin-procedure Check-Status

  move 'N' to $StatusOpen

begin-SELECT
CS.EMPLID

  move 'Y' to $StatusOpen

FROM PS_CAN_AMEND_RL2_S CS
WHERE CS.COMPANY         = &SL.COMPANY
  AND CS.EMPLID          = &SL.EMPLID
  AND CS.CALENDAR_YEAR   = &SL.CALENDAR_YEAR
  AND CS.SEQUENCE_NUMBER = &SL.SEQUENCE_NUMBER
  AND CS.WAGE_LOSS_PLAN  = &SL.WAGE_LOSS_PLAN
  AND CS.PROVINCE        = &SL.PROVINCE
  AND CS.AMEND_STATUS    = 'O'

end-SELECT

end-procedure


begin-procedure Close-Amend-Cancel-RL-2

begin-SQL

  UPDATE PS_CAN_AMEND_RL2_S
  SET AMEND_STATUS       = 'C'
  WHERE COMPANY          = &SL.COMPANY
    AND EMPLID           = &SL.EMPLID
    AND CALENDAR_YEAR    = &SL.CALENDAR_YEAR
    AND SEQUENCE_NUMBER  = &SL.SEQUENCE_NUMBER
    AND WAGE_LOSS_PLAN   = &SL.WAGE_LOSS_PLAN
    AND PROVINCE         = &SL.PROVINCE

end-SQL

end-procedure


!begin-procedure Laser-Print-Alignment
!
!  print '20XX' (#Slip1_Row4,54)
!  print '20XX' (#Slip2_Row4,54)
!  print '20XX' (#Slip3_Row4,54)
!
!  print '999 999 999' (#Slip1_Row2,61)
!  print '999 999 999' (#Slip2_Row2,61)
!  print '999 999 999' (#Slip3_Row2,61)
!
!  move 99999999.99 to #BoxAmt
!  do Format-Number (#BoxAmt, $BoxAmt, '99999999.99')
!
!  print $BoxAmt (#Slip1_Row10,1)              ! Box 'A'
!  print $BoxAmt (#Slip2_Row10,1)
!  print $BoxAmt (#Slip3_Row10,1)
!
!  print $BoxAmt (#Slip1_Row10,14)             ! Box 'B'
!  print $BoxAmt (#Slip2_Row10,14)
!  print $BoxAmt (#Slip3_Row10,14)
!
!  print $BoxAmt (#Slip1_Row10,26)             ! Box 'C'
!  print $BoxAmt (#Slip2_Row10,26)
!  print $BoxAmt (#Slip3_Row10,26)
!
!  print $BoxAmt (#Slip1_Row10,39)             ! Box 'D'
!  print $BoxAmt (#Slip2_Row10,39)
!  print $BoxAmt (#Slip3_Row10,39)
!
!  print $BoxAmt (#Slip1_Row10,52)             ! Box 'E'
!  print $BoxAmt (#Slip2_Row10,52)
!  print $BoxAmt (#Slip3_Row10,52)
!
!  print $BoxAmt (#Slip1_Row10,64)             ! Box 'F'
!  print $BoxAmt (#Slip2_Row10,64)
!  print $BoxAmt (#Slip3_Row10,64)
!
!  print $BoxAmt (#Slip1_Row16,1)              ! Box 'G'
!  print $BoxAmt (#Slip2_Row16,1)
!  print $BoxAmt (#Slip3_Row16,1)
!
!  print $BoxAmt (#Slip1_Row16,14)             ! Box 'H'
!  print $BoxAmt (#Slip2_Row16,14)
!  print $BoxAmt (#Slip3_Row16,14)
!
!  print $BoxAmt (#Slip1_Row16,26)             ! Box 'I'
!  print $BoxAmt (#Slip2_Row16,26)
!  print $BoxAmt (#Slip3_Row16,26)
!  print $BoxAmt (#Slip1_Row16,39)             ! Box 'J'
!  print $BoxAmt (#Slip2_Row16,39)
!  print $BoxAmt (#Slip3_Row16,39)
!
!  print $BoxAmt (#Slip1_Row16,52)             ! Box 'K'
!  print $BoxAmt (#Slip2_Row16,52)
!  print $BoxAmt (#Slip3_Row16,52)
!
!  print $BoxAmt (#Slip1_Row16,64)             ! Box 'L'
!  print $BoxAmt (#Slip2_Row16,64)
!  print $BoxAmt (#Slip3_Row16,64)
!
!  print $BoxAmt (#Slip1_Row20,48)             ! Box 'M'
!  print $BoxAmt (#Slip2_Row20,48)
!  print $BoxAmt (#Slip3_Row20,48)
!
!  print '123 456 789' (#Slip1_Row22,61)       ! Box 'N'
!  print '123 456 789' (#Slip2_Row22,61)
!  print '123 456 789' (#Slip3_Row22,61)
!
!  print  'XXXXXXXXXXXX' (#Slip1_Row26,61)     ! Box 'O'
!  print  'XXXXXXXXXXXX' (#Slip2_Row26,61)
!  print  'XXXXXXXXXXXX' (#Slip3_Row26,61)
!
!  print 'XXXX' (#Slip1_Row4,44)               ! Provenance field
!  print 'XXXX' (#Slip2_Row4,44)
!  print 'XXXX' (#Slip3_Row4,44)
!
!  print '123 456 789' (#Slip1_Row26,43)       ! SIN
!  print '123 456 789' (#Slip2_Row26,43)
!  print '123 456 789' (#Slip3_Row26,43)
!
!  print 'NAMExxxxxxxxxxxxxxxx'    (#Slip1_Row25,3)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip1_Row27,3)
!
!  print 'NAMExxxxxxxxxxxxxxxx'    (#Slip2_Row26,3)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip2_Row28,3)
!
!  print 'NAMExxxxxxxxxxxxxxxx'    (#Slip3_Row25,3)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip3_Row27,3)
!
!  print 'STREET2xxxxxxxxxxxxx'    (#Slip1_Row29,3)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip1_Row31,3)
!  print 'ZIPxxxxxxxxxxxxxxxxx'    (#Slip1_Row33,3)
!
!  print 'STREET2xxxxxxxxxxxxx'    (#Slip2_Row30,3)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip2_Row32,3)
!  print 'ZIPxxxxxxxxxxxxxxxxx'    (#Slip2_Row34,3)
!
!  print 'STREET2xxxxxxxxxxxxx'    (#Slip3_Row29,3)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip3_Row31,3)
!  print 'ZIPxxxxxxxxxxxxxxxxx'    (#Slip3_Row33,3)
!
!  print 'COMPANYxxxxxxxxxxxxx'    (#Slip1_Row30,44)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip1_Row32,44)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip1_Row34,44)
!
!  print 'COMPANYxxxxxxxxxxxxx'    (#Slip2_Row30,44)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip2_Row32,44)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip2_Row34,44)
!
!  print 'COMPANYxxxxxxxxxxxxx'    (#Slip3_Row30,44)
!  print 'STREET1xxxxxxxxxxxxx'    (#Slip3_Row32,44)
!  print 'ADDRESSxxxxxxxxxxxxx'    (#Slip3_Row34,44)
!
!  let #Slip1_FNLine = 20
!  let #Slip2_FNLine = #Slip1_FNLine + 44
!  let #Slip3_FNLine = #Slip2_FNLine + 44
!
!  let #Slip_FNCol   = 1
!  print 'Footnote1xxxxxxxxxxxxxxxx' (#Slip1_FNLine,#Slip_FNCol)
!  print 'Footnote1xxxxxxxxxxxxxxxx' (#Slip2_FNLine,#Slip_FNCol)
!  print 'Footnote1xxxxxxxxxxxxxxxx' (#Slip3_FNLine,#Slip_FNCol)
!
!  let #Slip1_FNLine = 22
!  let #Slip2_FNLine = #Slip1_FNLine + 44
!  let #Slip3_FNLine = #Slip2_FNLine + 44
!  print 'Footnote2xxxxxxxxxxxxxxxx' (#Slip1_FNLine,#Slip_FNCol)
!  print 'Footnote2xxxxxxxxxxxxxxxx' (#Slip2_FNLine,#Slip_FNCol)
!  print 'Footnote2xxxxxxxxxxxxxxxx' (#Slip3_FNLine,#Slip_FNCol)
!
!  let #Dup1_Row =  #Slip1_Row1
!  let #Dup2_Row =  #Slip2_Row1
!  let #Dup3_Row =  #Slip3_Row1
!  print 'DUPLICATE' (#Dup1_Row,33)
!  print 'DUPLICATE' (#Dup2_Row,33)
!  print 'DUPLICATE' (#Dup3_Row,33)
!
!  print 'AMENDED' (#Slip1_Row3,33)
!  print 'AMENDED' (#Slip2_Row3,33)
!  print 'AMENDED' (#Slip3_Row3,33)
!
!  if $FormType <> 'L'
!     print '  ' (24,5)
!  else
!     do Insert-FormFeed
!  end-if
!
!  new-page
!
!end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getdptnm.sqc'  !Get-Department-Name
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'   !Get-Can-Tax YE Report Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#endif

