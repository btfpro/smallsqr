!***********************************************************************
! PER063JP:  Appointment Notification                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!          $Date:  2006/07/19:14:51:21                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
begin-setup
  #Include 'ptset01.sqc'   !Printer and page-size initialization

  #DEFINE JapaneseDates

 declare-variable
    DATE    $Rh_Asofdate_date
    DATE    $Rh_Asofdate_rep
    DATE    $Rh_Publish_dt_date
 end-declare

end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $prcs_oprid=''
    goto last2
  end-if
  do Process-Main
  do End-Report-Proc
  do Stdapi-Term
LAST2:
end-report

!***************
begin-heading 2
!***************

  PRINT   $REPORTTITLE              (+1,0,0) center

end-heading

!***************************
begin-procedure Init-Report
!***************************

  move 'PER063JP' to $ReportID
  do Stdapi-Init
   if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  if $prcs_process_instance = ''
!     No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')

  let $PNLGRPNAME = &RUN_CNTL_HR_JPN.PNLGRPNAME
  DO Security-Param
  DO Security-Param-JPN

  let $Select_Records = 'PS_PERSON_NAME P, PS_JOB J, PS_JOB_JR Z, ' || $Security_Record

  do Get_Field_Information ($ReportID, 'REPORT_TITLE_HIR', $REPORT_TITLE_HIR,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_PRO', $REPORT_TITLE_PRO,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_RET', $REPORT_TITLE_RET,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_XFR', $REPORT_TITLE_XFR,    #DW)
  do Get_Field_Information ($ReportID, 'ANNOUNCEMENT_DT',  $STR_ANNOUNCEMENT_DT, #DW)
  do Get_Field_Information ($ReportID, 'COMPANY',          $STR_COMPANY,         #DW)
  do Get_Field_Information ($ReportID, 'DEPARTMENT',       $STR_DEPARTMENT,      #DW)
  do Get_Field_Information ($ReportID, 'SUPV_LVL',         $STR_SUPV_LVL,        #DW)
  do Get_Field_Information ($ReportID, 'SAL_ADMIN_PLAN',   $STR_SAL_ADMIN_PLAN,  #DW)
  do Get_Field_Information ($ReportID, 'GRADE',            $STR_GRADE,           #DW)
  do Get_Field_Information ($ReportID, 'EMPL_CLASS',       $STR_EMPL_CLASS,      #DW)
  do Get_Field_Information ($ReportID, 'DONO',             $STR_DONO,            #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT',     $STR_MESSAGE_TEXT,    #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT1',    $STR_MESSAGE_TEXT1,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT2',    $STR_MESSAGE_TEXT2,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT3',    $STR_MESSAGE_TEXT3,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT_DEPT',$STR_MESSAGE_TEXT_DEPT, #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT_SAL', $STR_MESSAGE_TEXT_SAL,  #DW)

  evaluate $Rh_Action
    when = 'HIR'
    when = 'REH'
      let $REPORTTITLE = $REPORT_TITLE_HIR
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || '.'
      let $STR_MESSAGE_TEXT3 = ''
    when = 'PRO'
      let $REPORTTITLE = $REPORT_TITLE_PRO
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || $STR_MESSAGE_TEXT2 || $STR_MESSAGE_TEXT_SAL
    when = 'XFR'
      let $REPORTTITLE = $REPORT_TITLE_XFR
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || $STR_MESSAGE_TEXT2 || $STR_MESSAGE_TEXT_DEPT
    when = 'TER'
      let $REPORTTITLE = $REPORT_TITLE_RET
      let $Rh_Asofdate_rep = dateadd($Rh_Asofdate_date,'day',-1)
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || '.'
      let $STR_MESSAGE_TEXT3 = ''
  end-evaluate

! Column Position
  let #col1  = 1
  let #col2  = 30
  let #col3  = 90
  let #Line1 = 28

! format Asofdate
  if $language_cd = 'JPN'
      do Format-DateTime($Rh_Asofdate_rep,    $Rh_Asofdate_repfmt, {DEFKAN}, '', '')
      do Format-DateTime($Rh_Publish_dt_date, $Rh_Publish_dtfmt,   {DEFKAN}, '', '')
  else
      do Format-DateTime($Rh_Asofdate_rep,    $Rh_Asofdate_repfmt, {DEFDATE}, '', '')
      do Format-DateTime($Rh_Publish_dt_date, $Rh_Publish_dtfmt,   {DEFDATE}, '', '')
  end-if

! Set initial value
  let #PRINT_FLG2 = 0

LAST1:
end-procedure

!**************************
begin-procedure Get-Values
!**************************
  let $language_cd        = $prcs_language_cd
  let $AsOfDate           = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate        = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate_date   = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate_rep    = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Company         = &RUN_CNTL_HR_JPN.COMPANY
  let $Rh_Action          = RTRIM(&RUN_CNTL_HR_JPN.ACTION,' ')
  let $Rh_Wording         = &RUN_CNTL_HR_JPN.WORDING
  let $Rh_Descr           = &RUN_CNTL_HR_JPN.DESCR
  let $Rh_Title2          = RTRIM(&RUN_CNTL_HR_JPN.REP_TITLE2, ' ')
  let $Rh_Name2           = RTRIM(&RUN_CNTL_HR_JPN.REP_NAME2, ' ')
  let $Rh_Title_Name      = $Rh_Title2 || '  ' || $Rh_Name2
  let $Rh_Publish_dt      = &RUN_CNTL_HR_JPN.PUBLISH_DT
  let $Rh_Publish_dt_date = &RUN_CNTL_HR_JPN.PUBLISH_DT

end-procedure

!****************************
begin-procedure Process-Main
!****************************
LET $sql-statement = 'An error occurred in selecting applicable data from Job Table.'

begin-SELECT DISTINCT  ON-ERROR=SQL-Error
P.EMPLID
P.NAME
J.EMPL_RCD
J.EFFDT
J.EFFSEQ
J.ACTION
J.ACTION_REASON
J.EMPL_CLASS
J.COMPANY
J.BUSINESS_UNIT
J.SETID_DEPT
J.DEPTID
J.SUPV_LVL_ID
J.SETID_SALARY
J.SAL_ADMIN_PLAN
J.GRADE
J.REG_REGION
  let $Emplid         = &P.EMPLID
  let $Name           = &P.NAME
  let #Empl_rcd       = &J.EMPL_RCD
  let $Effdt          = &J.EFFDT
  let #Effseq         = &J.EFFSEQ
  let $Action         = &J.ACTION
  let $Empl_class     = &J.EMPL_CLASS
  let $Company        = &J.COMPANY
  let $Business_unit  = RTRIM(&J.BUSINESS_UNIT,' ')
  let $Setid_dept     = RTRIM(&J.SETID_DEPT,' ')
  let $Deptid         = RTRIM(&J.DEPTID,' ')
  let $Supv_lvl_id    = RTRIM(&J.SUPV_LVL_ID,' ')
  let $Setid_salary   = RTRIM(&J.SETID_SALARY,' ')
  let $Sal_admin_plan = RTRIM(&J.SAL_ADMIN_PLAN,' ')
  let $Grade          = RTRIM(&J.GRADE,' ')

  let #PRINT_FLG = 1

  if $Rh_Action = 'PRO' or $Rh_Action = 'XFR'
     do Get-Job-Previous
  end-if

  if #PRINT_FLG = 1
     let #PRINT_FLG2 = 1
     do Print-Proc
  end-if

FROM [PS_PERSON_NAME P, PS_JOB J, PS_JOB_JR Z, PS_FAST_SQR_SEC_VW SCRTY: $Select_Records]
WHERE P.EMPLID = J.EMPLID
  AND J.EFFDT = $Rh_Asofdate
  AND J.EFFSEQ = (SELECT MAX(J1.EFFSEQ) FROM PS_JOB J1
                                            ,PS_RUNCTL_NTFA_JPN RN
                   WHERE J1.EMPLID   = J.EMPLID
                     AND J1.EMPL_RCD = J.EMPL_RCD
                     AND J1.EFFDT    = J.EFFDT
                     AND J1.ACTION   = $Rh_Action
                     AND J1.ACTION_REASON = RN.ACTION_REASON
                     AND RN.OPRID       = $prcs_oprid
                     AND RN.RUN_CNTL_ID = $prcs_run_cntl_id
                     AND RN.ACTION      = $Rh_Action)
  AND J.COMPANY = $Rh_Company
  AND Z.EMPLID = J.EMPLID
  AND Z.EMPL_RCD = J.EMPL_RCD
  AND Z.EFFDT = J.EFFDT
  AND Z.EFFSEQ = J.EFFSEQ
  [$SecurityClause]
  AND P.EMPLID = SCRTY.EMPLID
  AND J.EMPL_RCD = SCRTY.EMPL_RCD
ORDER BY P.EMPLID
end-SELECT

end-procedure

!********************************
begin-procedure Get-Job-Previous
!********************************
LET $sql-statement = 'An error occurred in reading Previous Job Table(JOB).'

begin-SELECT  ON-ERROR=SQL-Error
JP.EMPLID
JP.EMPL_RCD
JP.EFFDT
JP.EFFSEQ
JP.SETID_DEPT
JP.DEPTID
JP.SUPV_LVL_ID
JP.SETID_SALARY
JP.SAL_ADMIN_PLAN
JP.GRADE
  let $Jp_Setid_dept     = RTRIM(&JP.SETID_DEPT,' ')
  let $Jp_Deptid         = RTRIM(&JP.DEPTID,' ')
  let $Jp_Supv_lvl_id    = RTRIM(&JP.SUPV_LVL_ID,' ')
  let $Jp_Setid_salary   = RTRIM(&JP.SETID_SALARY,' ')
  let $Jp_Sal_admin_plan = RTRIM(&JP.SAL_ADMIN_PLAN,' ')
  let $Jp_Grade          = RTRIM(&JP.GRADE,' ')

  evaluate $Rh_Action
    when = 'PRO'
      if $Jp_Setid_salary   = $Setid_salary   and
         $Jp_Sal_admin_plan = $Sal_admin_plan and
         $Jp_Grade          = $Grade
           let #PRINT_FLG = 0
      end-if
    when = 'XFR'
      if $Jp_Setid_dept  = $Setid_dept  and
         $Jp_Deptid      = $Deptid      and
         $Jp_Supv_lvl_id = $Supv_lvl_id
           let #PRINT_FLG = 0
      end-if
  end-evaluate

FROM  PS_JOB JP, PS_JOB_JR ZP
WHERE JP.EMPLID = $Emplid
  AND JP.EMPL_RCD = #Empl_rcd
  AND JP.EFFDT = (SELECT MAX(JP1.EFFDT) FROM PS_JOB JP1
                    WHERE JP1.EMPLID = JP.EMPLID
                      AND JP1.EMPL_RCD = JP.EMPL_RCD
                      AND JP1.EFFDT < $Effdt)
  AND JP.EFFSEQ = (SELECT MAX(JP2.EFFSEQ) FROM PS_JOB JP2
                   WHERE JP2.EMPLID   = JP.EMPLID AND
                         JP2.EMPL_RCD = JP.EMPL_RCD AND
                         JP2.EFFDT    = JP.EFFDT)
  AND ZP.EMPLID = JP.EMPLID
  AND ZP.EMPL_RCD = JP.EMPL_RCD
  AND ZP.EFFDT = JP.EFFDT
  AND ZP.EFFSEQ = JP.EFFSEQ
end-select

end-procedure

!**************************
begin-procedure Print-Proc
!**************************

  if $language_cd = 'JPN'
      let $Name_dono = RTRIM($Name,' ') || '  ' || $STR_DONO
      print $Name_dono        (+3,#col1)
  else
      print $Name             (+3,#col1)
  end-if

  print $Rh_Wording           (+2,#col1)

  print $STR_ANNOUNCEMENT_DT  (+5,#col1)

  print $Rh_Asofdate_repfmt   ( 0,#col2)

  if $Rh_Action = 'HIR' or $Rh_Action = 'REH' or $Rh_Action = 'XFR' or $Rh_Action = 'TER'
      do Get-Company-Data
      print $STR_COMPANY      (+2,#col1)
      print $CompanyName      ( 0,#col2)

      let $BU     = $Business_unit
      do Get-Department-Name
      print $STR_DEPARTMENT   (+2,#col1)
      print $Deptname         ( 0,#col2)
  end-if

  if $Rh_Action = 'XFR' or $Rh_Action = 'TER'
      let $Recname = 'SUPVSR_LVL_TBL'
      let $Busunit = $Business_unit
      do  Get-Setid ($Busunit, $Recname, $Setid)
      let $Setid_dept = $Setid
      do  Get-Supvlvl-Name
      print $STR_SUPV_LVL       (+2,#col1)
      print $SupvlvlName        ( 0,#col2)
  end-if

  if $Rh_Action = 'HIR' or $Rh_Action = 'REH' or $Rh_Action = 'PRO'
      do  Get-SalAdminPlan-Name
      print $STR_SAL_ADMIN_PLAN (+2,#col1)
      print $SalAdminPlanName   ( 0,#col2)

      do  Get-Grade-Name
      print $STR_GRADE          (+2,#col1)
      print $GradeName          ( 0,#col2)
  end-if

  if $Rh_Action = 'HIR' or $Rh_Action = 'REH'
      let $Recname = 'SUPVSR_LVL_TBL'
      let $Busunit = $Business_unit
      do  Get-Setid ($Busunit, $Recname, $Setid)
      let $Setid_dept = $Setid
      do  Get-Supvlvl-Name
      print $STR_SUPV_LVL       (+2,#col1)
      print $SupvlvlName        ( 0,#col2)

      let $Reg_Region = &J.REG_REGION
    ! input: $Reg_Region, $Empl_Class; output: $Empl_Class_Name
      do Get-Empl-Class-Name
      print $STR_EMPL_CLASS     (+2,#col1)
      print $Empl_Class_Name    ( 0,#col2)
  end-if

  print $Rh_Publish_dtfmt   (#Line1,#col3)
  print $Rh_Descr           (+1,#col3)
  print $Rh_Title_Name      (+1,#col3)

  new-page
end-procedure

!*******************************
begin-procedure End-Report-Proc
!*******************************
  if #PRINT_FLG2 <> 1
      print $STR_MESSAGE_TEXT      (+4,1) CENTER
      print $STR_MESSAGE_TEXT1     (+1,1) CENTER
      print $STR_MESSAGE_TEXT3     (+1,1) CENTER
  end-if

end-procedure

#include 'askaod.sqc'    !Ask As Of Date input
#include 'askrtcds.sqc'  !Ask Rate Code input
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'hrsectjp.sqc'   !Get SQR Security parameters
#include 'hrcntljp.sqc'  !Get run control parameter values
#include 'getcodta.sqc'  !Get selected fields from the Company Table
#include 'getdptnm.sqc'  !Get selected fields from the Dept Table
#Include 'getsupjp.sqc'  !Get selected fields from the Supervisor Level ID Table
#Include 'getplnjp.sqc'  !Get selected fields from the Sal Admin Plan Table
#Include 'getgrdjp.sqc'  !Get selected fields from the Sal Grade Table
#Include 'getempcl.sqc'  !Get the Employee Class Name
#Include 'getsetid.sqc'  !Get Set Id from the Tableset Record Detail
