!*********************************************************
! EPUTILS.SQC: PeopleSoft ePerformance Review Access API *
!*********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:11:43:03                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

!***********************************************************************
!
! This SQC contains several 'API' functions that return an array of
! employee review information:
!
!    Get-Reviews()     - returns an array of ePerformance reviews
!    Get-Old-Reviews() - returns an array of Salary Planning reviews
!    Get-All-Reviews() - returns an array of both ePerformance and
!                        Salary Planning reviews
!    Get-Reviewers()   - returns an array of "authors" for an
!                        ePerformance review
!
! All Date variables are in Native format, unless the variable name
! contains a suffix indicating the format (e.g. $Effdt_YMD).
!------------------------------------------------------------------ dcd

!**********************************************************************
!
! Modification History:
!       Initial Development: 05/22/2002   PeopleSoft, Inc.
!
!**********************************************************************

!

!-----------
 Begin-Setup
!-----------

 Create-Array Name = Reviews  Size = 100
   Field=AppraisalId:number
   Field=Emplid:char
   Field=EmplRcd:number
   Field=PeriodBeginDt_YMD:char
   Field=PeriodEndDt_YMD:char
   Field=ReviewType:char
   Field=ReviewTypeDescr:char
   Field=ReviewId:char
   Field=OfficialSW:char
   Field=ReviewStatus:char
   Field=ApprovalStatus:char
   Field=PreRevwRating:char
   Field=PreRating:number
   Field=PrePoints:number
   Field=RatingModel:char
   Field=ReviewRating:char
   Field=ReviewRatingDescr:char
   Field=Rating:number
   Field=ReviewPoints:number
   Field=CalcMethod:char
   Field=RtgOverride:char
   Field=EmplAckInd:char
   Field=EmplAckDt_YMD:char
   Field=GvtOPMPattern:char
   Field=GvtOPMRating:char
   Field=GvtOPMRatingDescr:char

 Create-Array Name = OldReviews Size = 100
   Field=Emplid:char
   Field=EmplRcd:number
   Field=Effdt_YMD:char
   Field=ReviewFromDt_YMD:char
   Field=ReviewThruDt_YMD:char
   Field=ReviewType:char
   Field=ReviewTypeDescr:char
   Field=RatingScale:char
   Field=ReviewRating:char
   Field=ReviewRatingDescr:char
   Field=TotalEEPoints:number
   Field=EmplRevwStatus:char
   Field=ResRvwBandCd:char
   Field=FinalRvwBandCd:char
   Field=GBGroupId:char
   Field=FPRevRating:number
   Field=RevwScaleType:char
   Field=RatingModel:char
   Field=SetId:char
   Field=RegRegion:char
   Field=OfficialSW:char
   Field=GvtOPMPattern:char
   Field=GvtOPMRating:char
   Field=GvtOPMRatingDescr:char

 Create-Array Name = Reviewers Size = 20
   Field=AppraisalId:number
   Field=Role:char
   Field=ReviewerId:char
   Field=DueDt_YMD:char
   Field=ReviewStatus:char

 Create-Array Name = ReviewIdsJPN Size = 500
   Field=SetId:char
   Field=ReviewId:char

 Create-Array Name = ReviewTypes Size = 200
   Field=ReviewType:char
   Field=Effdt_YMD:char
   Field=Descr:char

 Create-Array Name = ReviewRatings Size = 1000
   Field=RatingModel:char
   Field=Effdt_YMD:char
   Field=ReviewRating:char
   Field=Descr:char
   Field=GvtOPMPattern:char
   Field=GvtOPMRating:char

 End-Setup


!---------------------------
 Begin-Procedure Get-Reviews($Emplid, $ERN, $ReviewType, $BeginDt, $EndDt, #MaxReviews, :#ReviewEntries)
!---------------------------
! Populates the "Reviews" array with ePerformance Management reviews meeting the
! criteria specified in the function call parameters.
!
! Input Parameters:
! ----------------
!     $Emplid        - Required -
!     $ERN           - Optional - Pass this in as a String. Blank if all EmplRcds are acceptable.
!     $ReviewType    - Optional - Blank if all Review Types are acceptable.
!     $BeginDt       - Optional - Earliest acceptable Period Begin date, in database native format.
!                                 Blank if all Period Begin dates are acceptable.
!     $EndDt         - Optional - Latest acceptable Period End date, in database native format.
!                                 Blank if all Period End dates are acceptable.
!     #MaxReviews    - Optional - Maximum number of reviews to return in the array.
!                                 Zero if all reviews meeting the criteria are to be returned.
! Output Parameters:
! -----------------
!     #ReviewEntries            - Returns the number of rows populated in the "Reviews" array.
!
 Let $Emplid = Rtrim($Emplid,' ')
 Let $ERN = Rtrim($ERN,' ')
 Let $ReviewType = Rtrim($ReviewType,' ')
 Let $BeginDt = Rtrim($BeginDt,' ')
 Let $EndDt = Rtrim($EndDt,' ')

 If Rtrim($BaseLanguage,' ') = ''
    do Get-BaseLanguage
 End-If

 Let $SQLQuote = ''''
 Let $where = ''
 If $ERN <> ''
    Let $ERN_Str = ' AND EMPL_RCD = ' || $ERN
    Concat $ERN_Str with $where
 End-If
 If $ReviewType <> ''
    Let $ReviewType_Str = ' AND EP_REVIEW_TYPE = ' || $SQLQuote || $ReviewType || $SQLQuote
    Concat $ReviewType_Str with $where
 End-If
 If $BeginDt <> ''
    Let $BeginDt_Str = ' AND PERIOD_BEGIN_DT >= ' || $SQLQuote || $BeginDt || $SQLQuote
    Concat $BeginDt_Str with $where
 End-If
 If $BeginDt <> ''
    Let $EndDt_Str = ' AND PERIOD_END_DT >= ' || $SQLQuote || $EndDt || $SQLQuote
    Concat $EndDt_Str with $where
 End-If

 Let #ReviewEntries = 0

BEGIN-SELECT
EP_APPRAISAL_ID
EMPLID
EMPL_RCD
PERIOD_BEGIN_DT
PERIOD_END_DT
EP_REVIEW_TYPE
EP_REVIEW_ID
EP_OFFICIAL_SW
EP_REVIEW_STATUS
EP_APPROVAL_STATUS
EP_PRE_REVW_RATING
EP_PRE_RATING
EP_PRE_POINTS
EP_RATING
RATING_MODEL
REVIEW_POINTS
EP_CALC_METHOD
REVIEW_RATING
EP_RTG_OVERRIDE
EP_EMPL_ACK_IND
EP_EMPL_ACK_DT

       If (#ReviewEntries < #MaxReviews) Or (#MaxReviews = 0)
          Add 1 to #ReviewEntries
          Put &EP_APPRAISAL_ID    into Reviews(#ReviewEntries) AppraisalId
          Put &EMPLID             into Reviews(#ReviewEntries) Emplid
          Put &EMPL_RCD           into Reviews(#ReviewEntries) EmplRcd
          Put &EP_REVIEW_TYPE     into Reviews(#ReviewEntries) ReviewType
          Put &EP_REVIEW_ID       into Reviews(#ReviewEntries) ReviewId
          Put &EP_OFFICIAL_SW     into Reviews(#ReviewEntries) OfficialSW
          Put &EP_REVIEW_STATUS   into Reviews(#ReviewEntries) ReviewStatus
          Put &EP_APPROVAL_STATUS into Reviews(#ReviewEntries) ApprovalStatus
          Put &EP_PRE_REVW_RATING into Reviews(#ReviewEntries) PreRevwRating
          Put &EP_PRE_RATING      into Reviews(#ReviewEntries) PreRating
          Put &EP_PRE_POINTS      into Reviews(#ReviewEntries) PrePoints
          Put &EP_RATING          into Reviews(#ReviewEntries) Rating
          Put &RATING_MODEL       into Reviews(#ReviewEntries) RatingModel
          Put &REVIEW_POINTS      into Reviews(#ReviewEntries) ReviewPoints
          Put &EP_CALC_METHOD     into Reviews(#ReviewEntries) CalcMethod
          Put &REVIEW_RATING      into Reviews(#ReviewEntries) ReviewRating
          Put &EP_RTG_OVERRIDE    into Reviews(#ReviewEntries) RtgOverride
          Put &REVIEW_RATING      into Reviews(#ReviewEntries) ReviewRating
          Put &EP_EMPL_ACK_IND    into Reviews(#ReviewEntries) EmplAckInd

          Do Format-Datetime(&PERIOD_BEGIN_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into Reviews(#ReviewEntries) PeriodBeginDt_YMD
          Do Format-Datetime(&PERIOD_END_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into Reviews(#ReviewEntries) PeriodEndDt_YMD
          Let $ReviewEffdt_YMD = $DateOut
          Do Format-Datetime(&EP_EMPL_ACK_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into Reviews(#ReviewEntries) EmplAckDt_YMD

          Let $ReviewType = &EP_REVIEW_TYPE
          Let $ReviewTypeDescr = ' '
          Do Lookup-ReviewType($ReviewType, $ReviewEffdt_YMD, $ReviewTypeDescr)
          Put $ReviewTypeDescr    into Reviews(#ReviewEntries) ReviewTypeDescr

          Let $RatingModel = &RATING_MODEL
          Let $ReviewRating = &REVIEW_RATING
          Let $ReviewRatingDescr = ' '
          Let $GvtOPMPattern = ' '
          Let $GvtOPMRating = ' '
          Do Lookup-ReviewRating($RatingModel, $ReviewEffdt_YMD, $ReviewRating, $ReviewRatingDescr, $GvtOPMPattern, $GvtOPMRating)
          Put $ReviewRatingDescr  into Reviews(#ReviewEntries) ReviewRatingDescr
          Put $GvtOPMRating       into Reviews(#ReviewEntries) GvtOPMRating
          Put $GvtOPMPattern      into Reviews(#ReviewEntries) GvtOPMPattern

          ! US Federal - OPM ratings are nested inside the "regular" ratings.
          If Rtrim($GvtOPMPattern,' ') <> ''
             Do Lookup-ReviewRating($GvtOPMPattern, $ReviewEffdt_YMD, $GvtOPMRating, $ReviewRatingDescr, $GvtOPMPattern, $GvtOPMRating)
             Put $ReviewRatingDescr  into Reviews(#ReviewEntries) GvtOPMRatingDescr
          End-If
       End-If

FROM PS_EP_APPR
WHERE EMPLID = $Emplid
[$where]
ORDER BY PERIOD_END_DT DESC, PERIOD_BEGIN_DT DESC

END-SELECT

End-Procedure

!-------------------------------
 Begin-Procedure Get-Old-Reviews($Emplid_Old, $ERN_Old, $ReviewType_Old, $BeginDt_Old, $EndDt_Old, #MaxReviews_Old, :#OldReviewEntries)
!-------------------------------
! Populates the "OldReviews" array with Salary Planning reviews meeting the
! criteria specified in the function call parameters.
!
! Input Parameters:
! ----------------
!     $Emplid_Old     - Required -
!     $ERN_Old        - Optional - Pass this in as a String. Blank if all EmplRcds are acceptable.
!     $ReviewType_Old - Optional - Blank if all Review Types are acceptable.
!     $BeginDt_Old    - Optional - Earliest acceptable Period Begin date, in database native format.
!                                 Blank if all Period Begin dates are acceptable.
!     $EndDt_Old      - Optional - Latest acceptable Period End date, in database native format.
!                                 Blank if all Period End dates are acceptable.
!     #MaxReviews_Old - Optional - Maximum number of reviews to return in the array.
!                                 Zero if all reviews meeting the criteria are to be returned.
! Output Parameters:
! -----------------
!     #OldReviewEntries            - Returns the number of rows populated in the "OldReviews" array.
!

 declare-variable 
   date     $StrToDate
 end-declare

 Let $Emplid_Old = Rtrim($Emplid_Old,' ')
 Let $ERN_Old = Rtrim($ERN_Old,' ')
 Let $ReviewType_Old = Rtrim($ReviewType_Old,' ')
 Let $BeginDt_Old = Rtrim($BeginDt_Old,' ')
 Let $EndDt_Old = Rtrim($EndDt_Old,' ')

 If Rtrim($BaseLanguage,' ') = ''
    do Get-BaseLanguage
 End-If


 Let #OldReviewEntries = 0

 Let $SQLQuote = ''''
 Let $where = ''
 If $ERN_Old <> ''
    Let $ERN_Str = ' AND A.EMPL_RCD = ' || $ERN_Old
    Concat $ERN_Str with $where
 End-If
 If $ReviewType_Old <> ''
    Let $ReviewType_Str = ' AND A.REVIEW_TYPE = ' || $SQLQuote || $ReviewType_Old || $SQLQuote
    Concat $ReviewType_Str with $where
 End-If
 If $BeginDt_Old <> ''
    Let $BeginDt_Str = ' AND A.REVIEW_FROM_DT >= ' || $SQLQuote || $BeginDt_Old || $SQLQuote
    Concat $BeginDt_Str with $where
 End-If
 If $EndDt_Old <> ''

    !Fix for ICE 1164590000.
    Let $HostPlatform = 'OTHER' 

    #ifdef INFORMIX 
       Let $HostPlatform = 'INFORMIX' 
    #endif
 
    #ifdef DB2UNIX 
       Let $HostPlatform = 'DB2UNIX' 
    #endif
 
    #ifdef DB2 
       Let $HostPlatform = 'DB2' 
    #endif
 
    Evaluate $HostPlatform
       When = 'INFORMIX'
          Let $StrToDate = $EndDt_Old 
          Let $EndDtOld = datetostr($StrToDate, {Native-DateMask})   
          Let $EndDt_Str = ' AND A.REVIEW_THRU_DT >= ' || $SQLQuote || $EndDtOld || $SQLQuote
          Concat $EndDt_Str with $where
          Break
       When = 'DB2UNIX'
          Let $StrToDate = $EndDt_Old 
          Let $EndDtOld = datetostr($StrToDate, {Native-DateMask})   
          Let $EndDt_Str = ' AND A.REVIEW_THRU_DT >= ' || $SQLQuote || $EndDtOld || $SQLQuote
          Concat $EndDt_Str with $where
          Break
       When = 'DB2'
          Let $StrToDate = $EndDt_Old 
          Let $EndDtOld = datetostr($StrToDate, {Native-DateMask})   
          Let $EndDt_Str = ' AND A.REVIEW_THRU_DT >= ' || $SQLQuote || $EndDtOld || $SQLQuote
          Concat $EndDt_Str with $where
          Break
       When-Other
          Let $EndDt_Str = ' AND A.REVIEW_FROM_DT >= ' || $SQLQuote || $EndDtOld || $SQLQuote
          Concat $EndDt_Str with $where
          Break
    End-Evaluate
 
 End-If

BEGIN-SELECT
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.REVIEW_FROM_DT
A.REVIEW_THRU_DT
A.REVIEW_TYPE
A.RATING_SCALE
A.REVIEW_RATING
A.TOTAL_EE_POINTS
A.EMPL_REVW_STATUS
A.RES_RVW_BAND_CD
A.FINAL_RVW_BAND_CD
A.GB_GROUP_ID
A.GVT_OPM_RATING
A.FP_REV_RATING
A.REVW_SCALE_TYPE
A.RATING_MODEL
A.SETID_1
A.REG_REGION
B.EP_OFFICIAL_SW

       If (#OldReviewEntries < #MaxReviews_Old) Or (#MaxReviews_Old = 0)
          Add 1 to #OldReviewEntries
          Put &A.EMPLID            into OldReviews(#OldReviewEntries) Emplid
          Put &A.EMPL_RCD          into OldReviews(#OldReviewEntries) EmplRcd
          Put &A.REVIEW_TYPE       into OldReviews(#OldReviewEntries) ReviewType
          Put &A.RATING_SCALE      into OldReviews(#OldReviewEntries) RatingScale
          Put &A.REVIEW_RATING     into OldReviews(#OldReviewEntries) ReviewRating
          Put &A.TOTAL_EE_POINTS   into OldReviews(#OldReviewEntries) TotalEEPOints
          Put &A.EMPL_REVW_STATUS  into OldReviews(#OldReviewEntries) EmplRevwStatus
          Put &A.RES_RVW_BAND_CD   into OldReviews(#OldReviewEntries) ResRvwBandCd
          Put &A.FINAL_RVW_BAND_CD into OldReviews(#OldReviewEntries) FinalRvwBandCd
          Put &A.GB_GROUP_ID       into OldReviews(#OldReviewEntries) GBGroupId
          Put &A.GVT_OPM_RATING    into OldReviews(#OldReviewEntries) GvtOPMRating
          Put &A.FP_REV_RATING     into OldReviews(#OldReviewEntries) FPRevRating
          Put &A.REVW_SCALE_TYPE   into OldReviews(#OldReviewEntries) RevwScaleType
          Put &A.RATING_MODEL      into OldReviews(#OldReviewEntries) RatingModel
          Put &A.SETID_1           into OldReviews(#OldReviewEntries) SetId
          Put &A.REG_REGION        into OldReviews(#OldReviewEntries) RegRegion
          Put &B.EP_OFFICIAL_SW    into OldReviews(#OldReviewEntries) OfficialSW

          Do Format-Datetime(&A.EFFDT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into OldReviews(#OldReviewEntries) Effdt_YMD
          Let $ReviewEffdt_YMD = $DateOut
          Do Format-Datetime(&A.REVIEW_FROM_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into OldReviews(#OldReviewEntries) ReviewFromDt_YMD
          Do Format-Datetime(&A.REVIEW_THRU_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut            into OldReviews(#OldReviewEntries) ReviewThruDt_YMD

          Let $ReviewType = &A.REVIEW_TYPE

          Do Lookup-ReviewType($ReviewType, $ReviewEffdt_YMD, $ReviewTypeDescr)
          Put $ReviewTypeDescr    into OldReviews(#OldReviewEntries) ReviewTypeDescr

          Let $ReviewRating = &A.REVIEW_RATING
          Let $RatingModel = &A.RATING_MODEL
          Let $ReviewRatingDescr = ' '
          Let $GvtOPMPattern = ' '
          Let $GvtOPMRating = ' '
          Do Lookup-ReviewRating($RatingModel, $ReviewEffdt_YMD, $ReviewRating, $ReviewRatingDescr, $GvtOPMPattern, $GvtOPMRating)
          Put $ReviewRatingDescr  into OldReviews(#OldReviewEntries) ReviewRatingDescr
          Put $GvtOPMRating       into OldReviews(#OldReviewEntries) GvtOPMRating
          Put $GvtOPMPattern      into OldReviews(#OldReviewEntries) GvtOPMPattern

          ! US Federal - OPM ratings are nested inside the "regular" ratings.
          If Rtrim($GvtOPMPattern,' ') <> ''
             Do Lookup-ReviewRating($GvtOPMPattern, $ReviewEffdt_YMD, $GvtOPMRating, $ReviewRatingDescr, $GvtOPMPattern, $GvtOPMRating)
             Put $ReviewRatingDescr  into OldReviews(#OldReviewEntries) GvtOPMRatingDescr
          End-If
       End-If

FROM PS_EP_OLD_REVW_VW A,
     PS_EP_REVW_TYP_TBL B
WHERE A.REVIEW_TYPE = B.EP_REVIEW_TYPE
  AND B.EFFDT = (SELECT MAX(B1.EFFDT)
                   FROM PS_EP_REVW_TYP_TBL B1
                  WHERE B1.EP_REVIEW_TYPE = B.EP_REVIEW_TYPE
                    AND B1.EFFDT <= A.EFFDT)
  AND A.EMPLID = $Emplid_Old
[$where]
ORDER BY A.EFFDT DESC, A.REVIEW_FROM_DT DESC, A.REVIEW_THRU_DT DESC

END-SELECT

End-Procedure


!-----------------------------
 Begin-Procedure Get-All-Reviews($Emplid_All, $ERN_All, $ReviewType_All, $BeginDt_All, $EndDt_All, #MaxReviews_All, :#ReviewEntries)
!-----------------------------
! Populates the "Reviews" array with both ePerformance and Salary Planning reviews meeting the
! criteria specified in the function call parameters.
!
! Input Parameters:
! ----------------
!     $Emplid_All     - Required -
!     $ERN_All        - Optional - Pass this in as a String. Blank if all EmplRcds are acceptable.
!     $ReviewType_All - Optional - Blank if all Review Types are acceptable.
!     $BeginDt_All    - Optional - Earliest acceptable Period Begin date, in database native format.
!                                 Blank if all Period Begin dates are acceptable.
!     $EndDt_All      - Optional - Latest acceptable Period End date, in database native format.
!                                 Blank if all Period End dates are acceptable.
!     #MaxReviews_All - Optional - Maximum number of reviews to return in the array.
!                                 Zero if all reviews meeting the criteria are to be returned.
! Output Parameters:
! -----------------
!     #ReviewEntries            - Returns the number of rows populated in the "Reviews" array.
!

 Let #ReviewEntries = 0
 Let #OldReviewEntries = 0
 Let #I = 1
 Do Get-Reviews($Emplid_All, $ERN_All, $ReviewType_All, $BeginDt_All, $EndDt_All, 0, #ReviewEntries)
 Do Get-Old-Reviews($Emplid_All, $ERN_All, $ReviewType_All, $BeginDt_All, $EndDt_All, 0, #OldReviewEntries)

 ! Merge the "Old" Reviews with the "New" Reviews
 While #I <= #OldReviewEntries

          Get $Emplid              from OldReviews(#I) Emplid
          Get #EmplRcd             from OldReviews(#I) EmplRcd
          Get $ReviewType          from OldReviews(#I) ReviewType
          Get $ReviewTypeDescr     from OldReviews(#I) ReviewTypeDescr
          Get $OfficialSW          from OldReviews(#I) OfficialSW
          Get $Effdt_YMD           from OldReviews(#I) Effdt_YMD
          Get $ReviewThruDt_YMD    from OldReviews(#I) ReviewThruDt_YMD
          Get $ReviewFromDt_YMD    from OldReviews(#I) ReviewFromDt_YMD
          Get $RatingScale         from OldReviews(#I) RatingScale
          Get $ReviewRating        from OldReviews(#I) ReviewRating
          Get $ReviewRatingDescr   from OldReviews(#I) ReviewRatingDescr
          Get #TotalEEPoints       from OldReviews(#I) TotalEEPOints
          Get $EmplRevwStatus      from OldReviews(#I) EmplRevwStatus
          Get $ResRvwBandCd        from OldReviews(#I) ResRvwBandCd
          Get $FinalRvwBandCd      from OldReviews(#I) FinalRvwBandCd
          Get $GBGroupId           from OldReviews(#I) GBGroupId
          Get $GvtOPMRating        from OldReviews(#I) GvtOPMRating
          Get #FPRevRating         from OldReviews(#I) FPRevRating
          Get $RevwScaleType       from OldReviews(#I) RevwScaleType
          Get $RatingModel         from OldReviews(#I) RatingModel
          Get $SetId               from OldReviews(#I) SetId
          Get $RegRegion           from OldReviews(#I) RegRegion
          Get $GvtOPMPattern       from OldReviews(#I) GvtOPMPattern
          Get $GvtOPMRating        from OldReviews(#I) GvtOPMRating
          Get $GvtOPMRatingDescr   from OldReviews(#I) GvtOPMRatingDescr

          If Rtrim($ReviewThruDt_YMD, ' ') = ''
             ! Old review has no "From" date - use Effdt instead.
             Move $Effdt_YMD  to  $ReviewThruDt_YMD
          End-If
          ! Find correct position in Reviews array to insert the "old" review
          Let #J = 1
          While #J <= #ReviewEntries
             Get $PeriodEndDt_YMD     from Reviews(#J) PeriodEndDt_YMD
             Get $PeriodBeginDt_YMD   from Reviews(#J) PeriodBeginDt_YMD
             If $ReviewThruDt_YMD > $PeriodEndDt_YMD
                ! Insert the new row here - open up a "hole" by moving all entries down 1 row
                Let #K = #ReviewEntries
                While #K >= #J
                   Let #L = #K + 1
                   Get #X from Reviews(#K) AppraisalId
                   Put #X into Reviews(#L) AppraisalId
                   Get $X from Reviews(#K) Emplid
                   Put $X into Reviews(#L) Emplid
                   Get #X from Reviews(#K) EmplRcd
                   Put #X into Reviews(#L) EmplRcd
                   Get $X from Reviews(#K) PeriodBeginDt_YMD
                   Put $X into Reviews(#L) PeriodBeginDt_YMD
                   Get $X from Reviews(#K) PeriodEndDt_YMD
                   Put $X into Reviews(#L) PeriodEndDt_YMD
                   Get $X from Reviews(#K) ReviewType
                   Put $X into Reviews(#L) ReviewType
                   Get $X from Reviews(#K) ReviewTypeDescr
                   Put $X into Reviews(#L) ReviewTypeDescr
                   Get $X from Reviews(#K) ReviewId
                   Put $X into Reviews(#L) ReviewId
                   Get $X from Reviews(#K) OfficialSW
                   Put $X into Reviews(#L) OfficialSW
                   Get $X from Reviews(#K) ReviewStatus
                   Put $X into Reviews(#L) ReviewStatus
                   Get $X from Reviews(#K) ApprovalStatus
                   Put $X into Reviews(#L) ApprovalStatus
                   Get $X from Reviews(#K) PreRevwRating
                   Put $X into Reviews(#L) PreRevwRating
                   Get #X from Reviews(#K) PreRating
                   Put #X into Reviews(#L) PreRating
                   Get #X from Reviews(#K) PrePoints
                   Put #X into Reviews(#L) PrePoints
                   Get $X from Reviews(#K) RatingModel
                   Put $X into Reviews(#L) RatingModel
                   Get $X from Reviews(#K) ReviewRating
                   Put $X into Reviews(#L) ReviewRating
                   Get $X from Reviews(#K) ReviewRatingDescr
                   Put $X into Reviews(#L) ReviewRatingDescr
                   Get #X from Reviews(#K) Rating
                   Put #X into Reviews(#L) Rating
                   Get #X from Reviews(#K) ReviewPoints
                   Put #X into Reviews(#L) ReviewPoints
                   Get $X from Reviews(#K) CalcMethod
                   Put $X into Reviews(#L) CalcMethod
                   Get $X from Reviews(#K) RtgOverride
                   Put $X into Reviews(#L) RtgOverride
                   Get $X from Reviews(#K) EmplAckInd
                   Put $X into Reviews(#L) EmplAckInd
                   Get $X from Reviews(#K) EmplAckDt_YMD
                   Put $X into Reviews(#L) EmplAckDt_YMD
                   Get $X from Reviews(#K) GvtOPMPattern
                   Put $X into Reviews(#L) GvtOPMPattern
                   Get $X from Reviews(#K) GvtOPMRating
                   Put $X into Reviews(#L) GvtOPMRating
                   Get $X from Reviews(#K) GvtOPMRatingDescr
                   Put $X into Reviews(#L) GvtOPMRatingDescr
                   Subtract 1 from #K
                End-While
                Break
             End-If
             Add 1 to #J
          End-While

          Add 1 to #ReviewEntries
          Put 0                    into Reviews(#J) AppraisalId
          Put $Emplid              into Reviews(#J) Emplid
          Put #EmplRcd             into Reviews(#J) EmplRcd
          Put $ReviewType          into Reviews(#J) ReviewType
          Put $ReviewTypeDescr     into Reviews(#J) ReviewTypeDescr
          Put $OfficialSW          into Reviews(#J) OfficialSW
          Put 'CO'                 into Reviews(#J) ReviewStatus
          Put 'NREQ'               into Reviews(#J) ApprovalStatus
          Put ' '                  into Reviews(#J) PreRevwRating
          Put 0                    into Reviews(#J) PreRating
          Put 0                    into Reviews(#J) PrePoints
          Put $RatingModel         into Reviews(#J) RatingModel
          Put $RevwScaleType       into Reviews(#J) CalcMethod
          Put 0                    into Reviews(#J) Rating
          Put ' '                  into Reviews(#J) RtgOverride
          Put ' '                  into Reviews(#J) EmplAckInd
          Put $GvtOPMPattern       into Reviews(#J) GvtOPMPattern
          Put $GvtOPMRating        into Reviews(#J) GvtOPMRating
          Put $GvtOPMRatingDescr   into Reviews(#J) GvtOPMRatingDescr

          Evaluate $RevwScaleType
             When = 'R'
                Put $FinalRvwBandCd     into Reviews(#J) ReviewRating
                Put #TotalEEPoints      into Reviews(#J) ReviewPoints
                Break
             When = 'S'
                Put ' '                 into Reviews(#J) ReviewRating
                Put #TotalEEPoints      into Reviews(#J) ReviewPoints
                Break
             When = 'A'
                Put $ReviewRating       into Reviews(#J) ReviewRating
                Put $ReviewRatingDescr  into Reviews(#J) ReviewRatingDescr
                Put 0                   into Reviews(#J) ReviewPoints
                Break
             When-Other
                Break
          End-Evaluate

          Put $ReviewThruDt_YMD    into Reviews(#J) PeriodEndDt_YMD
          Put $ReviewFromDt_YMD    into Reviews(#J) PeriodBeginDt_YMD

          ! ---------
          ! For Japan: ReviewId is Review Effdt (YYYYMMDD) if the Effdt is listed
          ! ---------  in the Rev_Def_Tbl_JPN table.
          If Rtrim($JPN, ' ') = ''
             Do Get-Installation($JPN)
          End-If
          If Rtrim($RegRegion, ' ') <> ''
            let $RegRegion = rtrim($RegRegion, ' ')
             DO Get-Reg-Region-Country($RegRegion,$RegRegionCountry)
          End-If
          If $JPN = 'Y' And $RegRegionCountry = 'JPN'
             Do Lookup-ReviewId-JPN($SetId, $Effdt_YMD, $ReviewId)
          Else
             Let $ReviewId = ' '
          End-If
          Put $ReviewId            into Reviews(#J) ReviewId

          Add 1 to #I
 End-While


 ! Apply the Max Reviews parameter
 If #MaxReviews_All > 0
    Move #MaxReviews_All to #ReviewEntries
 End-If

End-Procedure

!-----------------------------
 Begin-Procedure Get-Reviewers(#AppraisalIdIn, $RoleIn, :#ReviewerEntries)
!-----------------------------
! Populates "Reviewers" array with all authors that have participated in the specified
! ePerformance review.
!
! Input Parameters
! ----------------
!     #AppraisalId   - Required - Appraisal Id.
!     $Role          - Optional - Role/Author Type.  Blank if all Roles are requested.
!
! Output Parameters
! -----------------
!     #ReviewersEntries         - Returns the number of rows returned in the Reviewers array.
!

 Let $Role = Rtrim($Role,' ')

 Let $where = ''
 If $Role <> ''
    Concat ' AND &EP_ROLE = &Role ' with $where
 End-If

 Let #ReviewerEntries = 0

BEGIN-SELECT
EP_APPRAISAL_ID
EP_ROLE
EP_REVIEWER_ID
EP_DUE_DT
EP_REVIEW_STATUS

          Add 1 to #ReviewerEntries
          Put &EP_APPRAISAL_ID     into Reviewers(#ReviewerEntries) AppraisalId
          Put &EP_ROLE             into Reviewers(#ReviewerEntries) Role
          Put &EP_REVIEWER_ID      into Reviewers(#ReviewerEntries) ReviewerId
          Put &EP_REVIEW_STATUS    into Reviewers(#ReviewerEntries) ReviewStatus

          Do Format-Datetime(&EP_DUE_DT, $DateOut, {DEFCMP}, '', '')
          Put $DateOut             into Reviewers(#ReviewerEntries) DueDt_YMD

FROM PS_EP_APPR_ROLE
WHERE EP_APPRAISAL_ID = #AppraisalIdIn
[$where]
ORDER BY EP_ROLE, EP_REVIEWER_ID

END-SELECT

End-Procedure



!-----------------------------------
 Begin-Procedure Lookup-ReviewId-JPN($SetId, $Effdt_YMD, :$ReviewId)
!-----------------------------------
! - For Japan only -
! If Review Effective Date is listed in the Japanese Review Definition table,
! then this effective date (in YYYYMMDD format) is the Review Id.

  If #ReviewIdEntries = 0
     Do Cache-ReviewIds-JPN(#ReviewIdEntries)
  End-If

  Let #I = 1
  Let $ReviewId = ' '

  While #I <= #ReviewIdEntries
     Get $SetIdArray     from ReviewIdsJPN(#I) SetId
     If $SetIdArray > $SetId
        Break
     Else
        If $SetIdArray = $SetId
           Get $ReviewIdArray    from ReviewIdsJPN(#I) ReviewId
           If $ReviewIdArray > $Effdt_YMD
              Break
           Else
              If $reviewIdArray = $Effdt_YMD
                 Let $ReviewId = $Effdt_YMD
                 Break
              End-If
           End-If
        End-If
     End-If
     Add 1 to #I
  End-While

End-Procedure


!-----------------------------------
 Begin-Procedure Cache-ReviewIds-JPN(:#ReviewIdEntries)
!-----------------------------------
! Load a cache of Review Ids for Japan
!
 Let #ReviewIdEntries = 0
BEGIN-SELECT
SETID
EP_REVIEW_ID

        Add 1 to #ReviewIdEntries
        Put &SETID                 into ReviewIdsJPN(#ReviewIdEntries) SetId
        Put &EP_REVIEW_ID          into ReviewIdsJPN(#ReviewIdEntries) ReviewId

FROM PS_REV_DEF_TBL_JPN
ORDER BY SETID, EP_REVIEW_ID
END-SELECT

End-Procedure


!--------------------------------
 Begin-Procedure Get-Installation(:$JPN)
!--------------------------------

BEGIN-SELECT
JPN

       Move &JPN  to  $JPN

FROM PS_INSTALLATION
END-SELECT

 End-Procedure


!--------------------------------------
 Begin-Procedure Get-Reg-Region-Country($RegRegion,:$RegRegionCountry)
!--------------------------------------

BEGIN-SELECT
COUNTRY

       Move &COUNTRY to $RegRegionCountry

FROM PS_REG_REGION_TBL
WHERE REG_REGION = $RegRegion
END-SELECT

 End-Procedure


!--------------------------------
 Begin-Procedure Get-BaseLanguage
!--------------------------------

BEGIN-SELECT
LANGUAGE_CD

       Move &LANGUAGE_CD  to  $BaseLanguage

FROM PSOPTIONS
END-SELECT

 End-Procedure

!---------------------------------
 Begin-Procedure Cache-ReviewTypes(:#ReviewTypeEntries)
!---------------------------------
! Both "old" and "new" Review Types exist in the EP_REVW_TYP_TBL table, since
! "old" Review Types would have been upgraded from the translate table into the EP
! table at upgrade time.
!
 Let #ReviewTypeEntries = 0
 Let $Table = 'PS_EP_REVW_TYP_TBL'
 Let $WhereLang = ' '
 If Rtrim($BaseLanguage,' ') = ''
    do Get-BaseLanguage
 End-If
 If Rtrim($_Language_Cd,' ') <> ''
    If $_Language_Cd <> $BaseLanguage
       Let $Table = 'PS_EP_REVWTYP_LANG'
       Let $Quote = ''''
       Let $WhereLang = ' WHERE LANGUAGE_CD = ' || $Quote || $_Language_Cd || $Quote || ' '
    End-If
 End-If
BEGIN-SELECT
EP_REVIEW_TYPE
EFFDT
EP_REVW_DESCR

        Add 1 to #ReviewTypeEntries
        Put &EP_REVIEW_TYPE        into ReviewTypes(#ReviewTypeEntries) ReviewType
        Put &EP_REVW_DESCR         into ReviewTypes(#ReviewTypeEntries) Descr
        Do Format-Datetime(&EFFDT, $DateOut, {DEFCMP}, '', '')
        Put $DateOut               into ReviewTypes(#ReviewTypeEntries) Effdt_YMD

FROM [$Table]
[$WhereLang]
ORDER BY EP_REVIEW_TYPE, EFFDT DESC
END-SELECT

 End-Procedure

!-----------------------------------
 Begin-Procedure Lookup-ReviewType($ReviewType_In, $Effdt_YMD_In, :$ReviewTypeDescr)
!-----------------------------------
! Returns the description of the indicated Review Type from the cache

  If #ReviewTypeEntries = 0
     Do Cache-ReviewTypes(#ReviewTypeEntries)
  End-If

  Let #I = 1
  Let $ReviewTypeDescr = ' '

  While #I <= #ReviewTypeEntries
     Get $ReviewType     from ReviewTypes(#I) ReviewType

     If Rtrim($ReviewType,' ') > Rtrim($ReviewType_In,' ')
        Break
     Else

        If Rtrim($ReviewType,' ') = Rtrim($ReviewType_In,' ')
           Get $Effdt_YMD    from ReviewTypes(#I) Effdt_YMD

           If Rtrim($Effdt_YMD,' ') > Rtrim($Effdt_YMD_In,' ')
              Break
           Else

              If Rtrim($Effdt_YMD,' ') <= Rtrim($Effdt_YMD_In,' ')
                 Get  $ReviewTypeDescr    from ReviewTypes(#I) Descr
                 Let $ReviewTypeDescr = Rtrim($ReviewTypeDescr,' ')
                 Break
              End-If
           End-If
        End-If
     End-If
     Add 1 to #I
  End-While

 End-Procedure


!-----------------------------------
 Begin-Procedure Cache-ReviewRatings(:#ReviewRatingEntries)
!-----------------------------------

 Let #ReviewRatingEntries = 0
 Let $Table = 'PS_REVW_RATING_TBL A '
 Let $WhereLang = ' '
 If Rtrim($BaseLanguage,' ') = ''
    do Get-BaseLanguage
 End-If
 If Rtrim($_Language_Cd,' ') <> ''
    If $_Language_Cd <> $BaseLanguage
       Let $Table = 'PS_REVW_RATING_LNG A '
       Let $Quote = ''''
       Let $WhereLang = ' AND A.LANGUAGE_CD = ' || $Quote || $_Language_Cd || $Quote || ' '
    End-If
 End-If
BEGIN-SELECT
A.RATING_MODEL
A.EFFDT
A.REVIEW_RATING
A.DESCR
B.GVT_OPM_RATING
C.GVT_OPM_PATTERN

        Add 1 to #ReviewRatingEntries
        Put &A.RATING_MODEL        into ReviewRatings(#ReviewRatingEntries) RatingModel
        Put &A.REVIEW_RATING       into ReviewRatings(#ReviewRatingEntries) ReviewRating
        Put &A.DESCR               into ReviewRatings(#ReviewRatingEntries) Descr
        Put &B.GVT_OPM_RATING      into ReviewRatings(#ReviewRatingEntries) GvtOPMRating
        Put &C.GVT_OPM_PATTERN     into ReviewRatings(#ReviewRatingEntries) GvtOPMPattern
        Do Format-Datetime(&A.EFFDT, $DateOut, {DEFCMP}, '', '')
        Put $DateOut               into ReviewRatings(#ReviewRatingEntries) Effdt_YMD

FROM [$Table] , PS_REVW_RATING_TBL B, PS_RATING_MDL_TBL C
WHERE B.RATING_MODEL = A.RATING_MODEL
  AND B.EFFDT = A.EFFDT
  AND B.REVIEW_RATING = A.REVIEW_RATING
  AND C.RATING_MODEL = A.RATING_MODEL
  AND C.EFFDT = A.EFFDT
[$WhereLang]
ORDER BY A.RATING_MODEL, A.EFFDT, A.REVIEW_RATING
END-SELECT

 End-Procedure


!-----------------------------------
 Begin-Procedure Lookup-ReviewRating($RatingModel_In, $Effdt_YMD_In, $ReviewRating_In, :$ReviewRatingDescr, :$GvtOPMPattern, :$GvtOPMRating)
!-----------------------------------
! Returns the description of the indicated Review Rating, and the Federal OPM pattern & Rating
! from the cache


  If #ReviewRatingEntries = 0
     Do Cache-ReviewRatings(#ReviewRatingEntries)
  End-If

  Let #I = 1
  Let $ReviewRatingDescr = ' '
  Let $GvtOPMPattern = ' '
  Let $GvtOPMRating = ' '

  While #I <= #ReviewRatingEntries
     Get $RatingModel     from ReviewRatings(#I) RatingModel

     If Rtrim($RatingModel,' ') > Rtrim($RatingModel_In,' ')
        Break
     Else
        If Rtrim($RatingModel,' ')  = Rtrim($RatingModel_In,' ')
           Get $Effdt_YMD    from ReviewRatings(#I) Effdt_YMD


           If Rtrim($Effdt_YMD,' ') > Rtrim($Effdt_YMD_In,' ')
              Break
           Else

              If Rtrim($Effdt_YMD,' ') <= Rtrim($Effdt_YMD_In,' ')
                 Get $ReviewRating     from ReviewRatings(#I) ReviewRating

                 If Rtrim($ReviewRating,' ') > Rtrim($ReviewRating_In,' ')
                    Break
                 Else

                    If Rtrim($ReviewRating,' ') = Rtrim($ReviewRating_In,' ')

                       Get  $ReviewRatingDescr    from ReviewRatings(#I) Descr
                       Let $ReviewRatingDescr = Rtrim($ReviewRatingDescr,' ')
                       Get  $GvtOPMPattern        from ReviewRatings(#I) GvtOPMPattern
                       Get  $GvtOPMRating         from ReviewRatings(#I) GvtOPMRating

                       Break
                    End-If
                 End-If
              End-If
           End-If
        End-If
     End-If
     Add 1 to #I
  End-While

End-Procedure

