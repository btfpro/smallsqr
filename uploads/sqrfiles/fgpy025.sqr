!***********************************************************************
!  Family Medical Leave Act History Report                             *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!          $Date:  2006/07/20:03:52:50                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup02.sqc'   !Printer and page-size initialization

#define Max_Size                 5   !Array Size
#define col_sep                  1   !Column Separator
#define col_empl_name           25   !Employee Name
#define col_national_id         11   !National ID
#define col_occ_series          12   !Occupational Series
#define col_base_pay            13   !Base Pay
#define col_fmla_taken          30   !FMLA Taken
#define col_reason              20   !Reason
#define col_12_months_pd        20   !12 Month Period
#define col_year_rpt            13   !Year Reported
#define col_begin_dt            10   !Begin Date
#define col_end_dt              10   !End Date
#define col_hrs_taken           11   !Hours Taken

!***********************************************************************
!  FGPY025:  Begin Report                                              *
!***********************************************************************
begin-report

  do Init-Report
  do Array-Init
  do Get-Run-Year
  do Process-Main
  do Stdapi-Term

end-report
!***********************************************************************
!  Init Report Procedure:  Do Report Time and others for the heading   *
!***********************************************************************
begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  move 0 to $RowCounter
  do Stdapi-Init
  let $ReportID = 'FGPY025' 
  let $ReportTitle  = 'Family Medical Leave Act History Report'
  let $first_page = 'Y'
  display  'Report ID: ' noline
  display $ReportTitle

end-procedure
!***********************************************************************
!  Init Array Procedure:  Create an Array                              *
!***********************************************************************
begin-procedure Array-Init

  create-array name=Hrs_Array          -
               size={Max_Size}         -
               field=hours:number

end-procedure
!***********************************************************************
!  Heading:  Do Report Heading for Each New Page or New Company        *
!***********************************************************************
begin-heading 8

#Include 'stdhdgtr.sqc'

   DO COMPANY-NAME

   print 'Year Reported: ' (+2, 1)
   print $REPORTING-YEAR (0,22,10)

!Column Heading line 1
  print 'Employee Name'      (+2,1,{col_empl_name})
  print 'National ID'        (0,+{col_sep},{col_national_id})
  print 'Occupational'       (0,+{col_sep},{col_occ_series})
  print 'Base Pay'           (0,+6,9)
  print 'FMLA Taken'         (0,+{col_sep},{col_hrs_taken})
  print 'Reason'             (0,+2,{col_reason})
  print '12 Month Period'    (0,+10)

!Column Heading line 2
  print 'Series'            (+1,42,)
  print 'Year Reported'     (0,66,{col_year_rpt})
  print 'Begin Date'        (0,+22,{col_begin_dt})
  print 'End Date'          (0,+{col_sep},{col_end_dt})
  print 'Hours Taken'       (0,+0,{col_hrs_taken})

!Column Heading line 3
  print '='                 (+1,1,{col_empl_name})               Fill
  print '='                 (0,+{col_sep},{col_national_id})     Fill
  print '='                 (0,+{col_sep},{col_occ_series})      Fill
  print '='                 (0,+{col_sep},{col_base_pay})        Fill
  print '='                 (0,+{col_sep},{col_year_rpt})        Fill
  print '='                 (0,+{col_sep},{col_reason})          Fill
  print '='                 (0,+{col_sep},32)                    Fill
 
   move &a.company to $company

end-heading
!***********************************************************************
!  Get Run Year Procedure: Get Report Year from Run Control Panel or   *
!                          from user input                             *
!***********************************************************************
begin-procedure Get-Run-Year

  if $Prcs_Process_Instance = ''
    do Process-Run-Year
  else
    do Select-Parameters
  end-if

  LET $YEAR-START = $REPORTING-YEAR
  LET $YEAR-END = $REPORTING-YEAR
  CONCAT '-01-01' WITH $YEAR-START
  CONCAT '-12-31' WITH $YEAR-END
  DO Convert-From-DTU-Date($YEAR-START,$SQL-YEAR-START)
  DO Convert-From-DTU-Date($YEAR-END,$SQL-YEAR-END)
  show 'Reporting Year ' $SQL-YEAR-START ' ' $SQL-YEAR-END

end-procedure
!***********************************************************************
!  Process Run Year Procedure:  Get Report Year from User Input        *
!***********************************************************************
begin-procedure Process-Run-Year

  move 0 to #Found
  while #Found = 0
    input $REPORTING-YEAR 'Enter Reporting Year'
    if $REPORTING-YEAR = ''
      stop
    else
      move 1 to #Found
    end-if
  end-while

end-procedure
!***********************************************************************
!  Main Procedure:  Read Data from Database tables and call print      *
!                   detail for each leave request of each employee.    *
!***********************************************************************
begin-procedure Process-Main

  LET #EMP_TOTAL = 0
  LET #AGENCY_HRS = 0
  LET #FMLA_YEAR_LINE = 0
  LET #EMPLOYEE_LINE = 0

begin-SELECT
A.COMPANY () ON-BREAK Print = Never Before = Create_new_page 
                                    After = Agency_Totals
                                    SAVE = $PREV_COMP 
A.ANNUAL_RT,
A.EMPLID,
B.NAME () ON-BREAK Print = Never AFTER = Employee_Totals
                    SAVE = $PREV_NAME
C.NATIONAL_ID,
D.GVT_OCC_SERIES,
A.DEPTID, 
A.GVT_SUB_AGENCY, 
E.BEGIN_DT,
E.FMLA_LEAVE_REASON,
E.FMLA_YEAR_BEGIN_DT,
E.FMLA_REQUEST_ID

  do Process-Detail

FROM PS_GVT_JOB       A,
     PS_GVT_PERS_DATA B, 
     PS_GVT_PERS_NID  C,
     PS_POSITION_DATA D,
     PS_FMLA_LV_REQUEST E

WHERE A.EMPLID    = B.EMPLID 
  AND A.EMPL_RCD = B.EMPL_RCD
  AND A.EFFDT     = B.EFFDT
  AND A.EFFSEQ    = B.EFFSEQ 
  AND A.EMPLID    = C.EMPLID
  AND A.EMPL_RCD = C.EMPL_RCD
  AND A.EFFDT     = C.EFFDT
  AND A.EFFSEQ    = C.EFFSEQ
  AND A.POSITION_NBR = D.POSITION_NBR
  AND A.EMPLID = E.EMPLID
  AND E.FMLA_LV_APPROVED = 'A'
  AND E.RETURN_DT >= $SQL-YEAR-START
  AND E.BEGIN_DT <= $SQL-YEAR-END

  AND A.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_GVT_JOB
        WHERE  EMPLID  = A.EMPLID)        
  AND  A.EFFSEQ =
       (SELECT MAX(EFFSEQ)
        FROM   PS_GVT_JOB
        WHERE  EMPLID  = A.EMPLID
          AND  EFFDT = A.EFFDT)
  AND  A.EMPL_RCD =
       (SELECT MAX(EMPL_RCD)
        FROM   PS_GVT_JOB
        WHERE  EMPLID  = A.EMPLID
         AND  EFFDT = A.EFFDT)
  AND  D.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_POSITION_DATA
        WHERE  POSITION_NBR  = D.POSITION_NBR
          AND  EFFDT = D.EFFDT)

ORDER BY A.COMPANY,
         A.DEPTID, 
         A.GVT_SUB_AGENCY, 
         A.EMPLID,
         E.BEGIN_DT

end-SELECT

end-procedure
!***********************************************************************
!  Process Procedure:  Process each leave request for each employee    *
!***********************************************************************
begin-procedure Process-Detail

   clear-array name=Hrs_Array       
   LET #REQUEST_TOTAL = 0
   DO DTU-DAYOFWEEK#($YEAR-START,#WEEK-DAY1)
   DO DTU-DAYOFWEEK#($YEAR-END,#WEEK-DAY2)

   LET $NEW-YEAR-START = $YEAR-START
   IF #WEEK-DAY1 > 1 AND #WEEK-DAY1 < 7
      LET #WEEK-DAY1 = #WEEK-DAY1 - 1
      DO DTU-SUBTRACT-DAYS($YEAR-START,#WEEK-DAY1,$NEW-YEAR-START)
   END-IF
   DO Convert-From-DTU-Date($NEW-YEAR-START,$SQL-NEW-YEAR-START)
  #ifdef debugx
     SHOW 'SELECT YEAR ' &A.EMPLID ' ' $SQL-NEW-YEAR-START ' ' $SQL-YEAR-END ' ' &E.FMLA_YEAR_BEGIN_DT 
  #endif
 
begin-SELECT
F.WEEK_BEGIN_DT
F.SUN_HRS,
F.MON_HRS,
F.TUES_HRS,
F.WED_HRS,
F.THURS_HRS,
F.FRI_HRS,
F.SAT_HRS

    LET Hrs_Array.hours(0) = &F.MON_HRS 
    LET Hrs_Array.hours(1) = &F.TUES_HRS 
    LET Hrs_Array.hours(2) = &F.WED_HRS 
    LET Hrs_Array.hours(3) = &F.THURS_HRS 
    LET Hrs_Array.hours(4) = &F.FRI_HRS 
    LET $WEEK_BEGIN_DT = &F.WEEK_BEGIN_DT 

    IF $WEEK_BEGIN_DT < $YEAR-START 
       do Adjust_Period_Start
    END-IF

    LET $LAST_WEEK_DT = dateadd(&F.WEEK_BEGIN_DT,'WEEK',1)
    LET $LAST_WEEK_DT = EDIT($LAST_WEEK_DT,'YYYY-MM-DD')
    IF $LAST_WEEK_DT > $YEAR-END
        do Adjust_Period_End
    END-IF

    Let #i = 0
    LET #REC_TOTAL = 0
    While #i < {MAX_SIZE}
       LET #REC_TOTAL = #REC_TOTAL + Hrs_Array.hours(#i)
       Add 1 to #i
    End-While
     
    LET #REQUEST_TOTAL = #REQUEST_TOTAL + #REC_TOTAL
  #ifdef debugx
    SHOW &A.EMPLID ' ' &F.WEEK_BEGIN_DT ' ' #REC_TOTAL ' ' #REQUEST_TOTAL
  #endif

FROM PS_FMLA_LV_HISTORY F

WHERE F.EMPLID = &A.EMPLID
  AND F.FMLA_REQUEST_ID = &E.FMLA_REQUEST_ID
  AND F.WEEK_BEGIN_DT >= $SQL-NEW-YEAR-START
  AND F.WEEK_BEGIN_DT <= $SQL-YEAR-END

end-SELECT

     ADD #REQUEST_TOTAL TO #EMP_TOTAL 
     IF #REQUEST_TOTAL > 0
         DO Print-Detail
     END-IF

     IF #FMLA_YEAR_LINE = 0
        do Print-FMLA-Year
     END-IF
     
end-procedure
!***********************************************************************
!  Print Detail Procedure:  Write each leave request for each employee *
!***********************************************************************
begin-procedure Print-Detail

     LET #EMPLOYEE_LINE = 1
     do Format-Number(&A.ANNUAL_RT, $Base_pay, '99,999,999.99mi')
     print $PREV_NAME           (+2,1,{col_empl_name})
     print &C.NATIONAL_ID       (0,+2,{col_national_id})
     print &D.GVT_OCC_SERIES    (0,+4,8)
     print $Base_pay            (0,+{col_sep},13)
     print #REQUEST_TOTAL       (0,0,{col_hrs_taken}) edit 9999999.99
     LET $Fieldname = 'FMLA_LEAVE_REASON'
     LET $Fieldvalue = &E.FMLA_LEAVE_REASON 
     Do Read-Translate-Table
     print $Xlatlongname (0,+5,{col_reason})

end-procedure
!***********************************************************************
!  Print Detail Procedure:  Write FMLA year total for each employee    *
!***********************************************************************
begin-procedure Print-FMLA-Year

   clear-array name=Hrs_Array       
   LET #FMLA_YEAR_LINE = 1
   LET #FMLA_REQUEST_TOTAL = 0
   DO Convert-TO-DTU-Date(&E.FMLA_YEAR_BEGIN_DT,$FMLA-YEAR-START)
   DO DTU-ADD-YEARS($FMLA-YEAR-START,1,$TEMP-YEAR-END)
   DO DTU-SUBTRACT-DAYS($TEMP-YEAR-END,1,$FMLA-YEAR-END)
   DO DTU-DAYOFWEEK#($FMLA-YEAR-START,#WEEK-DAY1)
   DO DTU-DAYOFWEEK#($FMLA-YEAR-END,#WEEK-DAY2)

   IF #WEEK-DAY1 > 1 AND #WEEK-DAY1 < 7
      LET #WEEK-DAY1 = #WEEK-DAY1 - 1
      DO DTU-SUBTRACT-DAYS($FMLA-YEAR-START,#WEEK-DAY1,$TEMP-YEAR-START)
      LET $FMLA-YEAR-START = $TEMP-YEAR-START
   END-IF
   DO Convert-From-DTU-Date($FMLA-YEAR-START,$SQL-FMLA-YEAR-START)
   DO Convert-From-DTU-Date($FMLA-YEAR-END,$SQL-FMLA-YEAR-END)

  #ifdef debugx
    SHOW 'FMLA YEAR ' $SQL-FMLA-YEAR-START ' ' $SQL-FMLA-YEAR-END
  #endif

begin-SELECT
G.WEEK_BEGIN_DT
G.MON_HRS,
G.TUES_HRS,
G.WED_HRS,
G.THURS_HRS,
G.FRI_HRS

    LET Hrs_Array.hours(0) = &G.MON_HRS 
    LET Hrs_Array.hours(1) = &G.TUES_HRS 
    LET Hrs_Array.hours(2) = &G.WED_HRS 
    LET Hrs_Array.hours(3) = &G.THURS_HRS 
    LET Hrs_Array.hours(4) = &G.FRI_HRS 
    LET $WEEK_BEGIN_DT = &G.WEEK_BEGIN_DT 

    IF $WEEK_BEGIN_DT < &E.FMLA_YEAR_BEGIN_DT
       do Adjust_Period_Start
    END-IF

    LET $LAST_WEEK_DT = dateadd(&G.WEEK_BEGIN_DT,'WEEK',1)
    LET $LAST_WEEK_DT = EDIT($LAST_WEEK_DT,'YYYY-MM-DD')
    IF $LAST_WEEK_DT > $FMLA-YEAR-END
       do Adjust_Period_End
    END-IF

    Let #i = 0
    LET #REC_TOTAL = 0
    While #i < {MAX_SIZE}
       LET #REC_TOTAL = #REC_TOTAL + Hrs_Array.hours(#i)
       Add 1 to #i
    End-While
    LET #FMLA_REQUEST_TOTAL = #FMLA_REQUEST_TOTAL + #REC_TOTAL

  #ifdef debugx
    SHOW 'FMLA YEAR ' &A.EMPLID ' ' &G.WEEK_BEGIN_DT ' ' #REC_TOTAL ' ' #FMLA_REQUEST_TOTAL 
  #endif

FROM PS_FMLA_LV_HISTORY G

WHERE G.EMPLID = &A.EMPLID
  AND G.WEEK_BEGIN_DT >= $SQL-FMLA-YEAR-START 
  AND G.WEEK_BEGIN_DT <= $SQL-FMLA-YEAR-END 

end-SELECT

  IF #FMLA_REQUEST_TOTAL > 0 OR #REQUEST_TOTAL > 0
     IF #REQUEST_TOTAL = 0
        Do Print-Detail
     END-IF 
     DO Convert-TO-DTU-Date(&E.FMLA_YEAR_BEGIN_DT,$FMLA-YEAR-START)
     print $FMLA-YEAR-START      (0,+{col_sep},{col_begin_dt})
     print $FMLA-YEAR-END        (0,+{col_sep},{col_end_dt})
     print #FMLA_REQUEST_TOTAL   (0,+{col_sep},{col_hrs_taken}) edit 9999999.99
  END-IF     

end-procedure
!***********************************************************************
!  Adjust Period Start Procedure:  To make sure all hours falls in year*
!                             period                                   *
!***********************************************************************
begin-procedure Adjust_Period_Start

    IF #WEEK-DAY1 > 1 AND #WEEK-DAY1 < 7
       Let #i = 0
       Let #loop_ctl = #WEEK-DAY1 - 1
       While #i < #loop_ctl
          LET Hrs_Array.hours(#i) = 0
          Add 1 to #i
       End-While
    END-IF

end-procedure
!***********************************************************************
!  Adjust Period End Procedure:  To make sure all hours falls in year  *
!                             period                                   *
!***********************************************************************
begin-procedure Adjust_Period_End

    IF #WEEK-DAY2 > 0 AND #WEEK-DAY2 < 6
       Let #i = #WEEK-DAY2 - 1
       While #i < {Max_Size}
          LET Hrs_Array.hours(#i) = 0
          Add 1 to #i
       End-While
    END-IF

end-procedure
!***********************************************************************
!  Employee Totals Procedure:  Write total line for each employee      *
!***********************************************************************
begin-procedure Employee_Totals

     IF #EMPLOYEE_LINE > 0
        print 'Employee total'    (+2,49,15)
        print #EMP_TOTAL          (0,+{col_sep},) edit 9999999.99
     END-IF
     LET #AGENCY_TOTAL = #AGENCY_TOTAL + #EMP_TOTAL 
     LET #EMP_TOTAL = 0
     LET #FMLA_YEAR_LINE = 0
     LET #EMPLOYEE_LINE = 0

  end-procedure
!***********************************************************************
!  Company Name Procedure:  Using Company Id to get Comapny Name       *
!***********************************************************************
begin-procedure Company-Name

Begin-Select
D.DESCR
  print 'Agency: '          (4,1)
  print $Company            (0,13)
  print &D.DESCR            (0,17)

FROM PS_COMPANY_TBL D
WHERE D.COMPANY   = $Company
  AND D.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_COMPANY_TBL
        WHERE  COMPANY  = D.COMPANY)
end-SELECT

end-procedure
!***********************************************************************
!  Agency Total Procedure:  Write accumulated total for each agency    *
!***********************************************************************
begin-procedure Agency_Totals

   move $PREV_COMP to $Company
   print 'Agency: '       (+3,1)
   print $PREV_COMP       (0,13)
   print 'Total'          (0,18)
   print #AGENCY_TOTAL    (0,65,) edit 9999999.99

   LET #AGENCY_TOTAL = 0
   
end-procedure
!***********************************************************************
!  Create New Page Procedure: Create new page for each company (agency)*
!***********************************************************************
begin-procedure Create_new_page

  if $first_page = 'Y'
     move &A.COMPANY to $Company
     let $first_page = 'N'
  else
     New-Page
  end-if

end-procedure
!***********************************************************************
!  The following are include sqc files                                 *
!***********************************************************************
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'fgfmla.sqc'    !Select Run Contrl Parameters
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'datemath.sqc'  !Do date manipulation
!*---------------------------------------------------------------------*
