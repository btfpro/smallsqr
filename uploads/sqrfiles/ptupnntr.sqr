! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!----------------------------------------------------------------------
! Report Name: ptupnntr.sqr   Update Parent Node Number
!----------------------------------------------------------------------
!
!
!----------------------------------------------------------------------
! Program Descr: This SQR updates the parent node number in PSTREENODE.
!
!  In the past, PeopleTools did not use the parent node number, and it
!  occasionally did not update properly.  With PeopleTools 7, we use
!  parent node number in the initial tree display; if it is incorrect
!  the tree will not display properly.
!
!  This program will process all rows of PSTREENODE.  For a parent node,
!  all children are selected based on the Tree Node End, which indicates
!  the highest used tree node number for a child of that tree.
!  If an overlapping node number is found, the program halts.  An
!  overlapping tree node is defined as a tree node whose end number
!  falls outside the boundary of the node/end node range of its parent.
!  If this situation occurs, please run SYSAUDIT and contact customer
!  support.
!
!  'Record' type tree nodes (type = 'R') are not processed by this
!  program.
!----------------------------------------------------------------------
! Prompts: SETID, Tree name, Effective Date
!----------------------------------------------------------------------
! Tables Referenced:  PSTREENODE, PSTREEDEFN, PSLOCK
!----------------------------------------------------------------------

#include 'setenv.sqc' !Set environment
#include 'setup01.sqc' !Set printer

begin-report
  do init-datetime
  do init-number
  do get-current-datetime
  do init-report
  do Prog-Initialization

! date-time () 'MM/DD/YY HH:MI:SS PM' &date-time2
  show ''
  show 'Tree Parent Node Update completed at: ' $SysDateTime

!  do Reset
!  do Stdapi-Term
end-report

begin-procedure INIT-REPORT

  do get-current-datetime
! date-time () 'MM/DD/YY HH:MI:SS PM' &date-time1
  show ''
  show 'Tree Parent Node Update started at: ' $SysDateTime

  let $reportid = 'PTUPNNTR'

!  do stdapi-init

end-procedure


begin-heading 5
  #include 'stdhdg01.sqc'

  let $head1  = 'Tree Parent Node Update'
  print $head1 (2) center

  #define          col_setid    (+1,1,5)
  #define          col_setcntrlvalue (0,7,20)
  #define          col_name     (0,29,18)
  #define          col_effdt    (0,49,10)
  #define          col_node     (0,61,20)
  #define          col_nodenum  (0,83,10) edit 9999999999
  #define          col_parent   (0,95,10) edit 9999999999
  #define          col_actual   (0,107,10) edit 9999999999

  print ' '             (+2,,)
  print 'Setid'         {col_setid}
  print 'SetCntrlValue' {col_setcntrlvalue}
  print 'Tree Name'     {col_name}
  print 'Effdt'         {col_effdt}
  print 'Tree Node'     {col_node}
  print 'Tree Nd #'     {col_nodenum}
  print 'Parent Nd'     {col_parent}
  print 'New Pnt Nd'    {col_actual}
end-heading

!----------------------------------------------------------------------!
! Procedure: Prog-Initialization                                       !
! Descr:     Prompt for SetID, Tree Name, and Effective Date.  Calls   !
!            Verify-Tree to verify that the specified tree exists.     !
!----------------------------------------------------------------------!

begin-procedure Prog-Initialization

while 1=1
  do get-user-input
  if $Setid = 'ALL'
    display 'All tree nodes selected'
    do all-root-check
    do all-report
    move 'Y' to $All
    break
  end-if
  if $Setid = 'QUIT'
    do quit-program
    break
  end-if
  if $Setid = ''
    let $Setid = ' '
  end-if
  if $Found = 'Y'
    display 'Tree found'
    do root-check
    do Report
    move 'N' to $All
    break
  else
    input $Found 'Tree not found.  Please try again.  Please press ENTER'
  end-if
end-while

end-procedure

!----------------------------------------------------------------------!
! Procedure: get-user-input                                            !
! Desc:      Input from user                                           !
!----------------------------------------------------------------------!

begin-procedure get-user-input

input $Setid 'Enter Specific key value for tree, ALL or QUIT' type=char maxlen=20
  let $Setid = upper($Setid)
  let $SetCntrlValue = ' '

if $Setid = ''
  let $Setid = ' '
  let $TreeKeyType = 'N'
end-if

if $Setid <> 'QUIT'
  if $Setid <> 'ALL' and $Setid <> ' '
    while 1 = 1
      input $TreeKeyType 'Enter type of tree key field (S=SetID, B=Business Unit, U=User-defined)' type=char maxlen=1
      let $TreeKeyType = upper($TreeKeyType)
      IF $TreeKeyType = 'S' or $TreeKeyType = 'B' or $TreeKeyType = 'U'
        break
      else
        input $invalidEntry 'Incorrect tree key type.  Please press ENTER'
      end-if
    end-while
  end-if

  if $Setid <> 'ALL'
    input $TreeName 'Enter Tree Name' type=char maxlen=18
    let $TreeName = upper($TreeName)
    do Ask-Eff-Date
    do Verify-Tree
    display 'Finding Tree...'
    display $Found
  end-if

  input $Reporto 'Report Only (Y or N)?' type=char maxlen=1
  let $Reporto = upper($Reporto)
  if $Reporto = 'Y'
    display 'Report only mode'
  end-if
end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: Verify-Tree                                               !
! Desc:      Determine if the tree specified by the user exists.  Also,!
!            get the node count from PSTREEDEFN.                       !
!----------------------------------------------------------------------!

begin-procedure Verify-Tree
  move 'N' to $Found

  Evaluate $TreeKeyType
    WHEN = 'S'
      let $SetCntrlValue = ' '
    WHEN = 'B'
      let $SetCntrlValue = $Setid
      let $Setid = ' '
    WHEN = 'U'
      let $SetCntrlValue = $Setid
      let $Setid = ' '
    WHEN = 'N'
      let $SetCntrlValue = ' '
      let $Setid = ' '
  END-Evaluate

begin-SELECT
TD.NODE_COUNT
  move &TD.Node_Count to #NodeCount
  move 'Y' to $Found
from PSTREEDEFN TD
where TD.SETID = $Setid
and TD.SETCNTRLVALUE = $SetCntrlValue
and TD.TREE_NAME = $TreeName
and TD.EFFDT = $Effdt
end-SELECT

end-procedure

!----------------------------------------------------------------------!
! Procedure: Root-check                                                !
! Descr:     All nodes off the root (node_num = 1) need to be updated  !
!            first.                                                    !
!----------------------------------------------------------------------!

begin-procedure root-check

begin-SELECT
RE.SETID
RE.SETCNTRLVALUE
RE.TREE_NAME
RE.EFFDT
RE.TREE_BRANCH
RE.TREE_NODE_NUM
RE.TREE_NODE
RE.TREE_LEVEL_NUM
RE.PARENT_NODE_NUM
RE.PARENT_NODE_NAME
RE.TREE_NODE_NUM_END
RE.TREE_NODE_TYPE
  let $Root_setid = &RE.setid
  let $Root_setcntrlvalue = &RE.setcntrlvalue
  let $Root_name = &RE.tree_name
  let $Root_effdt = &RE.effdt
  let $Root_branch = &RE.tree_branch
  let $Root_tree_node = &RE.tree_node
  let #Root_node_num = &RE.tree_node_num
  let #Root_end = &RE.tree_node_num_end
  let #Root_parent_node_num  = &RE.parent_node_num
  let $Root_parent_node_name = &RE.parent_node_name
    if &RE.tree_node_type <> 'R'
      do update-root
    end-if
from PSTREENODE RE
WHERE RE.SETID = $SETID
AND RE.SETCNTRLVALUE = $SETCNTRLVALUE
AND RE.TREE_NAME = $TREENAME
AND RE.EFFDT = $EFFDT
AND RE.TREE_NODE_NUM = 1
end-SELECT

end-procedure

!----------------------------------------------------------------------!
! Procedure: All-root-check                                            !
! Descr:     All nodes off the root (node_num = 1) need to be updated  !
!            first.                                                    !
!----------------------------------------------------------------------!

begin-procedure all-root-check
begin-SELECT
RA.SETID
RA.SETCNTRLVALUE
RA.TREE_NAME
RA.EFFDT
RA.TREE_BRANCH
RA.TREE_NODE_NUM
RA.TREE_NODE
RA.TREE_LEVEL_NUM
RA.PARENT_NODE_NUM
RA.PARENT_NODE_NAME
RA.TREE_NODE_NUM_END
RA.TREE_NODE_TYPE
  let $Root_setid = &RA.setid
  let $Root_setcntrlvalue = &RA.setcntrlvalue
  let $Root_name = &RA.tree_name
  let $Root_effdt = &RA.effdt
  let $Root_branch = &RA.tree_branch
  let $Root_tree_node = &RA.tree_node
  let #Root_node_num = &RA.tree_node_num
  let #Root_parent_node_num  = &RA.parent_node_num
  let $Root_parent_node_name = &RA.parent_node_name
    if &RA.tree_node_type <> 'R'
      do update-root
    end-if
from PSTREENODE RA
WHERE RA.TREE_NODE_NUM = 1
end-SELECT

end-procedure

!----------------------------------------------------------------------!
! Procedure: Report                                                    !
! Descr:     We begin the program by selecting all rows from the       !
!            Tree Node table.  This is required since any given node   !
!            can be a parent, child, or both.  This procedure calls    !
!            find-child, which identifies all children of a given      !
!            parent.                                                   !
!----------------------------------------------------------------------!

begin-procedure report
display 'Tree selected...'
begin-SELECT
E.SETID
E.SETCNTRLVALUE
E.TREE_NAME
E.EFFDT
E.TREE_BRANCH
E.TREE_NODE_NUM
E.TREE_NODE
E.TREE_LEVEL_NUM
E.PARENT_NODE_NUM
E.PARENT_NODE_NAME
E.TREE_NODE_NUM_END
E.TREE_NODE_TYPE
  let $Parent_setid = &E.setid
  let $Parent_setcntrlvalue = &E.setcntrlvalue
  let $Parent_name = &E.tree_name
  let $Parent_effdt = &E.effdt
  let $Parent_branch = &E.tree_branch
  let $Parent_tree_node = &E.tree_node
  let #Parent_node_num = &E.tree_node_num
  let #Parent_end = &E.tree_node_num_end
  if &E.tree_node_type <> 'R'
    do find-child
  end-if
from PSTREENODE E
WHERE E.SETID = $Setid
AND E.SETCNTRLVALUE = $SetCntrlValue
AND E.TREE_NAME = $Treename
AND E.EFFDT = $Effdt
ORDER BY TREE_NODE_NUM
end-SELECT
if #updcnt <> 0
  do update-version-num
end-if
print ' '                 (+2,,)
print #updcnt {col_effdt} edit 99999
if $Reporto <> 'Y'
print 'Total Updates' {col_node}
else
  print 'Total Nodes' {col_node}
end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: all-Report                                                !
! Descr:     We begin the program by selecting rows from the           !
!            Tree Node table as specified via                          !
!            user input.  This is required since any given node        !
!            can be a parent, child, or both.  This procedure calls    !
!            find-child, which identifies all children of a given      !
!            parent.                                                   !
!----------------------------------------------------------------------!

begin-procedure all-report
display 'All trees selected...'
begin-SELECT
L.SETID
L.SETCNTRLVALUE
L.TREE_NAME
L.EFFDT
L.TREE_BRANCH
L.TREE_NODE_NUM
L.TREE_NODE
L.TREE_LEVEL_NUM
L.PARENT_NODE_NUM
L.PARENT_NODE_NAME
L.TREE_NODE_NUM_END
L.TREE_NODE_TYPE
  let $Parent_setid = &L.setid
  let $Parent_setcntrlvalue = &L.setcntrlvalue
  let $Parent_name = &L.tree_name
  let $Parent_effdt = &L.effdt
  let $Parent_branch = &L.tree_branch
  let $Parent_tree_node = &L.tree_node
  let #Parent_node_num = &L.tree_node_num
  let #Parent_end = &L.tree_node_num_end
  if &L.tree_node_type <> 'R'
    do find-child
  end-if
from PSTREENODE L
ORDER BY L.TREE_NODE_NUM
end-SELECT
print ' '                 (+2,,)
print #updcnt {col_effdt} edit 99999
if $Reporto <> 'Y'
print 'Total Updates' {col_node}
else
  print 'Total Nodes' {col_node}
end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: find-child                                                !
! Descr:     All potential children of this tree need to be identified.!
!            But, only some of the nodes in this result set are truly  !
!            children of the parent read above.  The first record read !
!            will always be a child, because the result set from       !
!            begin-report is ordered by the tree node num              !
!            and the numbering scheme for tree nodes ensures that      !
!            the first tree node number after the parent will be a     !
!            direct child.  From that baseline, we can find siblings   !
!            of the child by checking the tree node number against the !
!            end node number of the child.  If it falls outside of the !
!            range of the base child but within the range of the       !
!            parent, it is a direct child of the parent.  The next     !
!            child then becomes the baseline for finding the next      !
!            sibling.  If the child end node num falls outside the     !
!            parent range, the programs stops.  This overlap must be   !
!            resolved through SYSAUDIT and customer support.           !
!----------------------------------------------------------------------!

begin-procedure find-child

  let #Reccount = 0
  let #base_end_num = 0
begin-select
A.SETID
A.SETCNTRLVALUE
A.TREE_NAME
A.EFFDT
A.TREE_BRANCH
A.TREE_NODE_NUM
A.TREE_NODE
A.TREE_LEVEL_NUM
A.PARENT_NODE_NUM
A.TREE_NODE_NUM_END
  if &A.TREE_NODE_NUM_END > #Parent_end
    display 'Overlap Error - Run Sysaudit'
    display #Parent_node_num
    display #Parent_end
    display &A.TREE_NODE_NUM
    display &A.TREE_NODE_NUM_END
    do overlap-error
  else
    let #Base_node_num = &A.TREE_NODE_NUM
    let #Reccount = #Reccount + 1
    if &A.TREE_NODE_NUM > #base_end_num
      do update-parent
      let #base_end_num = &A.TREE_NODE_NUM_END
    else
      if #Reccount = 1
        do update-parent
        let #base_end_num = &A.TREE_NODE_NUM_END
      end-if
    end-if
  end-if
from PSTREENODE A
WHERE A.SETID = $Parent_setid
AND A.SETCNTRLVALUE = $Parent_SetCntrlValue
AND A.TREE_NAME = $Parent_name
AND A.EFFDT = $Parent_effdt
AND A.TREE_NODE_NUM > #Parent_node_num
AND A.TREE_NODE_NUM < #Parent_end
ORDER BY A.TREE_NODE_NUM
end-select

end-procedure

!----------------------------------------------------------------------!
! Procedure: update-parent                                             !
! Descr:     Once a sibling has been found, a check is made to ensure  !
!            that the parent node num is correct.  If not, another     !
!            procedure, update-parent-node, is called to perform the   !
!            update to the proper value.                               !
!----------------------------------------------------------------------!

begin-procedure update-parent

begin-select
Y.PARENT_NODE_NUM
  if #Parent_node_num <> &y.parent_node_num
    do update-parent-node
  end-if
FROM PSTREENODE Y
WHERE Y.SETID = &A.SETID
AND Y.SETCNTRLVALUE = &A.SETCNTRLVALUE
AND Y.TREE_NAME = &A.TREE_NAME
AND Y.EFFDT = &A.EFFDT
AND Y.TREE_BRANCH = &A.TREE_BRANCH
AND Y.TREE_NODE_NUM = &A.TREE_NODE_NUM
AND Y.TREE_NODE = &A.TREE_NODE
AND Y.TREE_LEVEL_NUM = &A.TREE_LEVEL_NUM
AND Y.PARENT_NODE_NUM = &A.PARENT_NODE_NUM
end-select
end-procedure

!----------------------------------------------------------------------!
! Procedure: update-root                                               !
! Descr:     If the mode num is one, ensure that it is root by         !
!            checking if the parent node num is 0                      !
!----------------------------------------------------------------------!

begin-procedure update-root

begin-select
RY.PARENT_NODE_NUM
  if &ry.parent_node_num <> 0
    do update-root-node
  end-if
FROM PSTREENODE RY
WHERE RY.SETID = $Root_setid
AND RY.SETCNTRLVALUE = $Root_SetCntrlValue
AND RY.TREE_NAME = $Root_name
AND RY.EFFDT = $Root_effdt
AND RY.TREE_NODE = $Root_tree_node
AND RY.TREE_BRANCH = $Root_branch
AND RY.TREE_NODE_NUM = #Root_node_num

end-select
end-procedure

!----------------------------------------------------------------------!
! Procedure: update-parent-node                                        !
! Descr:     Once a sibling has been found, a check is made to ensure  !
!            that the parent node num is correct.  If not, another     !
!            procedure, update-parent-node is called to perform the    !
!            update to the proper value.                               !
!----------------------------------------------------------------------!

begin-procedure update-parent-node

if $Reporto <> 'Y'
begin-sql
UPDATE PSTREENODE
   SET PARENT_NODE_NUM = #Parent_node_num,
       PARENT_NODE_NAME = $Parent_tree_node
WHERE PSTREENODE.SETID = &A.SETID
AND PSTREENODE.SETCNTRLVALUE = &A.SETCNTRLVALUE
AND PSTREENODE.TREE_NAME = &A.TREE_NAME
AND PSTREENODE.EFFDT = &A.EFFDT
AND PSTREENODE.TREE_BRANCH = &A.TREE_BRANCH
AND PSTREENODE.TREE_NODE_NUM = &A.TREE_NODE_NUM
AND PSTREENODE.TREE_NODE = &A.TREE_NODE
end-sql
do Commits
  if $Parent_setid <> $ver_upd_setid
    if $Parent_setcntrlvalue <> $ver_upd_setcntrlvalue
      if $Parent_name <> $ver_upd_name
        if $Parent_effdt <> $ver_upd_effdt
          do update-version-num
        end-if
      end-if
    end-if
  end-if
end-if

  do node-print
  let #updcnt = #updcnt + 1
end-procedure

!----------------------------------------------------------------------!
! Procedure: update-root-node                                          !
! Descr:     A root node (node num = 1) has been found that does not   !
!            have a parent of 0.  Update this node.                    !
!----------------------------------------------------------------------!

begin-procedure update-root-node

if $Reporto <> 'Y'
begin-sql
UPDATE PSTREENODE
   SET PARENT_NODE_NUM = 0,
       PARENT_NODE_NAME = ' '
WHERE PSTREENODE.SETID = $Root_setid
AND PSTREENODE.SETCNTRLVALUE = $Root_SetCntrlValue
AND PSTREENODE.TREE_NAME = $Root_name
AND PSTREENODE.EFFDT = $Root_effdt
AND PSTREENODE.TREE_BRANCH = $Root_branch
AND PSTREENODE.TREE_NODE_NUM = #Root_node_num
AND PSTREENODE.TREE_NODE = $Root_tree_node
end-sql
do Commits
do update-version-num
end-if
  do node-root-print
  let #updcnt = #updcnt + 1
end-procedure

!----------------------------------------------------------------------!
! Procedure: update-version-num                                        !
! Descr:     After the parent num is updated, we update the version #  !
!            on PSLOCK.                                                !
!----------------------------------------------------------------------!

begin-procedure update-version-num

begin-select
L.VERSION
  if $ver_num_updated <> 'Y'
  let #new_version = &l.version + 1
  end-if
FROM PSVERSION L
WHERE OBJECTTYPENAME = 'TDM'
end-select


if $ver_num_updated <> 'Y'
begin-sql
UPDATE PSVERSION
SET VERSION = #new_version
WHERE OBJECTTYPENAME = 'TDM'
end-sql
end-if

if $ver_num_updated <> 'Y'
begin-sql
UPDATE PSLOCK
SET VERSION = #new_version
WHERE OBJECTTYPENAME = 'TDM'
end-sql
end-if

if $ver_num_updated <> 'Y'
begin-sql
UPDATE PSLOCK
SET VERSION = VERSION + 1
WHERE OBJECTTYPENAME = 'SYS'
end-sql
end-if

let $ver_upd_setid = $Parent_setid
let $ver_upd_setcntrlvalue = $Parent_setcntrlvalue
let $ver_upd_name = $Parent_name
let $ver_upd_effdt = $Parent_effdt
let $ver_num_updated = 'Y'
do update-tree-version

end-procedure

!----------------------------------------------------------------------!
! Procedure: update-tree-version                                       !
! Descr:     After the parent num is updated, we update the version #  !
!            of the tree.                                              !
!----------------------------------------------------------------------!

begin-procedure update-tree-version

begin-sql
UPDATE PSTREEDEFN
   SET VERSION = #new_version,
       LASTUPDOPRID = 'PTUPNNTR',
       LASTUPDDTTM = {DateTimeIn-Prefix}$Sysdatetime{DateTimeIn-Suffix}
   WHERE SETID = $Parent_setid AND
   SETCNTRLVALUE = $SetCntrlValue AND
   TREE_NAME = $Parent_name AND
   EFFDT = $Parent_effdt
end-sql
do Commits
end-procedure


!----------------------------------------------------------------------!
! Procedure: Commits                                                   !
!----------------------------------------------------------------------!
begin-procedure Commits
 
  #ifdef SYBASE
    do commit-transaction
  #else
    #ifdef INFORMIX
      do commit-transaction
    #else
      Begin-SQL
      COMMIT
      End-Sql
    #endif
  #endif
end-procedure

!----------------------------------------------------------------------!
! Procedure: quit-program                                              !
! Descr:     For user request or overlap error                         !
!----------------------------------------------------------------------!

begin-procedure quit-program
  print 'QUIT'   {col_setid}
  do Rollback-Transaction
  stop quiet
end-procedure

!----------------------------------------------------------------------!
! Procedure: overlap-error                                             !
! Descr:     If child node has an end # greater than the parent end,   !
!            we record this here.                                      !
!----------------------------------------------------------------------!

begin-procedure overlap-error
  print &A.SETID             {col_setid}
  print &A.SETCNTRLVALUE     {col_setcntrlvalue}
  print &A.TREE_NAME         {col_name}
  print &A.EFFDT             {col_effdt}
  print &A.TREE_NODE         {col_node}
  print &A.TREE_NODE_NUM     {col_nodenum}
  print &A.PARENT_NODE_NUM   {col_parent}
  print '000000000'          {col_actual}
  do quit-program
end-procedure

!----------------------------------------------------------------------!
! Procedure: node-print                                                !
! Descr:     If a node needs to be updated, the node, previous and     !
!                actual parent_node_number are printed to the report.  !
!----------------------------------------------------------------------!

begin-procedure node-print
  print &A.SETID             {col_setid}
  print &A.SETCNTRLVALUE     {col_setcntrlvalue}
  print &A.TREE_NAME         {col_name}
  print &A.EFFDT             {col_effdt}
  print &A.TREE_NODE         {col_node}
  print &A.TREE_NODE_NUM     {col_nodenum}
  print &A.PARENT_NODE_NUM   {col_parent}
  print #Parent_node_num     {col_actual}

end-procedure

!----------------------------------------------------------------------!
! Procedure: node-root-print                                           !
! Descr:     If a root node needs to be updated, the node,             !
!            actual parent_node_number are printed to the report.      !
!----------------------------------------------------------------------!

begin-procedure node-root-print
  print $Root_setid           {col_setid}
  print $Root_setcntrlvalue   {col_setcntrlvalue}
  print $Root_name            {col_name}
  print $Root_effdt           {col_effdt}
  print $Root_tree_node       {col_node}
  print #Root_node_num        {col_nodenum}
  print #Root_parent_node_num {col_parent}
  print '0'                   {col_actual}

end-procedure


#include 'datetime.sqc'
#include 'number.sqc'
#include 'prcsapi.sqc'    ! Update Process Request API
#include 'askeffdt.sqc'   ! Ask Effective Date
#include 'curdttim.sqc'        ! Current Date and Time
