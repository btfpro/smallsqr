!***********************************************************************
!  BUD015.SQR:  Budget Export - Send Current FY to G/L                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
! Financials-PS application.                                           *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:26:04                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup32.sqc'
#define  daysinyear        365
#define  colr              160

!***********************************************************************
Begin-REPORT

   do INITIALIZE
   do POSN-TABLE-TO-FILE
   do JOB-TABLE-TO-FILE
   do DISTR-TABLE-TO-FILE
   do JOBCODE-TABLE-TO-FILE
   do WRAPUP

End-REPORT

Begin-heading 6
   #include 'stdhdg01.sqc'  ! for standard heading
   print '' (+1,,)
End-heading

!***********************************************************************
! Procedure: INITIALIZE                                                *
! Descr:     Performs the application initializations.  Formats var-   *
!            iables for use.  Calls the procedures to get input parms. *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure INITIALIZE

   do INIT-DATETIME
   do INIT-NUMBER
   do GET-CURRENT-DATETIME

   move 'BUD015.SQR' to $ReportID
   move 'BUD015' to $ProgramID
   move 'Flat File Data Export to Budgets' to $ReportTitle
   show $ReportTitle ' ' $ThruDate

   do STDAPI-INIT

   if $prcs_process_instance = ''
      !NOTE -- PeopleSoft does not support execution of SQR programs
      !     directly from SQRW.  The call to "Ask-Parameters" is provided
      !     only to assist in debugging or program modification
      !Uncomment Prompts for SQRW development/testing ONLY!!
      ! do ASK-PARAMETERS
   else
      do SELECT-PARAMETERS
   end-if

   do SELECT-INSTALLATION

   #IFDEF MVS

   !**   Build the output file names.
   let $OpenName1 = '{IMPORTPREFIX}' || 'BD15POSN'
   let $OpenName2 = '{IMPORTPREFIX}' || 'BD15JOB'
   let $OpenName3 = '{IMPORTPREFIX}' || 'BD15DIST'
   let $OpenName4 = '{IMPORTPREFIX}' || 'BD15JCD'

   #ELSE
   !**   Build the output file names.
   let $OpenName1 = '{IMPORTPREFIX}' || 'BUD015_' || $prcs_process_instance || '_POSN.DAT'
   let $OpenName2 = '{IMPORTPREFIX}' || 'BUD015_' || $prcs_process_instance || '_JOB.DAT'
   let $OpenName3 = '{IMPORTPREFIX}' || 'BUD015_' || $prcs_process_instance || '_DIST.DAT'
   let $OpenName4 = '{IMPORTPREFIX}' || 'BUD015_' || $prcs_process_instance || '_JCD.DAT'
   #ENDIF



End-Procedure INITIALIZE
!***********************************************************************
! Procedure: ASK-PARAMETERS                                            *
! Descr:     Gets run-time parameters from the user where the program  *
!            is not executed through the process scheduler interface   *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure ASK-PARAMETERS

   input $GL_RelNo maxlen=3 'Enter 3-digit G/L release code' type=char
   let $Prm_GL_RelNo = upper(ltrim(rtrim($GL_RelNo,' '),' '))

End-Procedure ASK-PARAMETERS
!***********************************************************************
! Procedure: GET-VALUES                                                *
! Descr:     Loads and formats the variables obtained through the      *
!            process scheduler interface.                              *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure GET-VALUES

   do GET-GL-RELEASE-NO

   move $Runctl_GL_Rel_No     to $Prm_Gl_RelNo


End-Procedure GET-VALUES
!***********************************************************************
! Procedure: SELECT-INSTALLATION                                       *
! Descr:     Selects necessary parameters from the installation table  *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure SELECT-INSTALLATION

Begin-SELECT
IN1.COUNTRY

   move &IN1.Country to $Gbl_Country

FROM PS_INSTALLATION IN1
End-SELECT

End-Procedure SELECT-INSTALLATION

!***********************************************************************
! Procedure: POSN-TABLE-TO-FILE                                        *
! Descr:     Reads the Budgets Position table and writes the contents  *
!            to the output flat file.                                  *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure POSN-TABLE-TO-FILE

   move 0 to #Posn_Tbl_Output_Cnt
   move '1' to $File_Record_ID
   move 'A' to $Audit_Actn

!**   Open the output file no.1 .
   move 0 to #filestat

   open $OpenName1 as 1 for-writing record=99:fixed status = #filestat

   !**   Check the result returned in the #filestat variable.  Stop program on error.
   if #filestat <> 0
      show ' '
      show 'Error on file open.  File is ' $OpenName1
      stop              ! Halt program
   end-if

begin-SELECT
B.BUSINESS_UNIT
B.POSITION_NBR
B.DESCR
B.POSN_STATUS
B.HEADCOUNT
B.BUSINESS_UNIT_HR
B.POSITION_NBR_HR
B.SPREADTYPE
B.SPREAD_TEMPLATE
B.EXISTING_POSN_FLG
B.BD_UPDATE_FLAG

   do Format-Number(&B.HEADCOUNT, $Out_HeadCount, '000000')
   do Format-Number(&B.SPREADTYPE, $Out_SpreadType, '09')

   Write 1 from  $File_Record_ID:1
                 $Audit_Actn:1
                 &B.BUSINESS_UNIT:5
                 &B.POSITION_NBR:8
                 &B.DESCR:30
                 &B.POSN_STATUS:1
                 $Out_HeadCount:6
                 &B.BUSINESS_UNIT_HR:5
                 &B.POSITION_NBR_HR:8
                 $Out_SpreadType:2
                 &B.SPREAD_TEMPLATE:30
                 &B.EXISTING_POSN_FLG:1
                 &B.BD_UPDATE_FLAG:1

   add 1 to #Posn_Tbl_Output_Cnt

FROM PS_BD_POSITION_TBL B
ORDER BY B.BUSINESS_UNIT, B.POSITION_NBR
end-SELECT

   CLOSE 1

end-procedure POSN-TABLE-TO-FILE

!***********************************************************************
! Procedure: JOB-TABLE-TO-FILE                                         *
! Descr:     Reads the Budgets Job table and writes the contents to    *
!            the output flat file.                                     *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure JOB-TABLE-TO-FILE

   move 0 to #Job_Tbl_Output_Cnt
   move '2' to $File_Record_ID
   move 'A' to $Audit_Actn

!**   Open the output file no.2 .
   move 0 to #filestat

   open $OpenName2 as 2 for-writing record=162:fixed status = #filestat

   !**   Check the result returned in the #filestat variable.  Stop program on error.
   if #filestat <> 0
      show ' '
      show 'Error on file open.  File is ' $OpenName2
      stop              ! Halt program
   end-if

begin-SELECT
J.BUSINESS_UNIT
J.POSITION_NBR
J.EMPLID
J.EMPL_RCD
J.EFFDT
J.EFFSEQ
J.EMPL_STATUS
J.NAME
J.ACTION
J.JOBCODE
J.REASON_CD
J.LOCATION
J.STD_HOURS
J.FTE
J.REG_TEMP
J.FULL_PART_TIME
J.ANNUAL_SALARY
J.CURRENCY_CD
J.SAL_ADMIN_PLAN
J.GRADE
J.STEP
J.BD_UPDATE_FLAG

   do Format-Number(&J.EMPL_RCD, $Out_Empl_Rcd, '000')
   do Format-Number(&J.EFFSEQ, $Out_Effseq, '000')
   do Format-Number(&J.STD_HOURS, $Out_Std_Hours, '00.99')
   do Format-Number(&J.FTE, $Out_FTE, '0.99')
   do Format-Number(&J.ANNUAL_SALARY, $Out_Annual_Salary, '000000000000.999')
   do Format-Number(&J.STEP, $Out_Step, '00')

   Write 2 from  $File_Record_ID:1
                 $Audit_Actn:1
                 &J.BUSINESS_UNIT:5
                 &J.POSITION_NBR:8
                 &J.EMPLID:11
                 $Out_Empl_Rcd:3
                 &J.EFFDT:10
                 $Out_Effseq:3
                 &J.EMPL_STATUS:1
                 &J.NAME:50
                 &J.ACTION:3
                 &J.JOBCODE:6
                 &J.REASON_CD:10
                 &J.LOCATION:10
                 $Out_Std_Hours:5
                 $Out_FTE:4
                 &J.REG_TEMP:1
                 &J.FULL_PART_TIME:1
                 $Out_Annual_Salary:16
                 &J.CURRENCY_CD:3
                 &J.SAL_ADMIN_PLAN:4
                 &J.GRADE:3
                 $Out_STEP:2
                 &J.BD_UPDATE_FLAG:1

   add 1 to #Job_Tbl_Output_Cnt

FROM PS_BD_JOB_TBL J
ORDER BY J.BUSINESS_UNIT, J.POSITION_NBR, J.EMPLID,
         J.EMPL_RCD, J.EFFDT, J.EFFSEQ
end-SELECT

   CLOSE 2

end-procedure JOB-TABLE-TO-FILE

!***********************************************************************
! Procedure: DISTR-TABLE-TO-FILE                                       *
! Descr:     Reads the Budgets Distribution table and writes the       *
!            contents to the output flat file.                         *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure DISTR-TABLE-TO-FILE

   move 0 to #Distr_Tbl_Output_Cnt
   move '3' to $File_Record_ID
   move 'A' to $Audit_Actn

  !**   Open the output file no.3.
   move 0 to #filestat

   open $OpenName3 as 3 for-writing record=191:fixed status = #filestat

   !**   Check the result returned in the #filestat variable.  Stop program on error.
   if #filestat <> 0
      show ' '
      show 'Error on file open.  File is ' $OpenName3
      stop              ! Halt program
   end-if

begin-SELECT
D.BUSINESS_UNIT
D.POSITION_NBR
D.EMPLID
D.EMPL_RCD
D.EFFDT
D.EFFSEQ
D.COMPENSATION_IND
D.BD_SEQ_NBR
D.ACCOUNT
D.ALTACCT
D.OPERATING_UNIT
D.DEPTID
D.PRODUCT
D.BUSINESS_UNIT_PC
D.PROJECT_ID
D.AFFILIATE
D.ACTIVITY_ID
D.RESOURCE_TYPE
D.FUND_CODE
D.PROGRAM_CODE
D.CLASS_FLD
D.BUDGET_PERIOD
D.PERCENTAGE
D.AMOUNT
D.PLAN_TYPE
D.CURRENCY_CD
D.BD_UPDATE_FLAG

   do Format-Number(&D.EMPL_RCD, $Out_Empl_Rcd, '000')
   do Format-Number(&D.EFFSEQ, $Out_Effseq, '000')
   do Format-Number(&D.BD_SEQ_NBR, $Out_BD_Seq_Nbr, '000')
   do Format-Number(&D.PERCENTAGE, $Out_Percentage, '0000.99')
   do Format-Number(&D.AMOUNT, $Out_Amount, '0000000000000000.999')

   Write 3 from  $File_Record_ID:1
                 $Audit_Actn:1
                 &D.BUSINESS_UNIT:5
                 &D.POSITION_NBR:8
                 &D.EMPLID:11
                 $Out_Empl_Rcd:3
                 &D.EFFDT:10
                 $Out_Effseq:3
                 &D.COMPENSATION_IND:1
                 $Out_BD_Seq_Nbr:3
                 &D.ACCOUNT:10
                 &D.ALTACCT:10
                 &D.OPERATING_UNIT:8
                 &D.DEPTID:10
                 &D.PRODUCT:6
                 &D.BUSINESS_UNIT_PC:5
                 &D.PROJECT_ID:15
                 &D.AFFILIATE:5
                 &D.ACTIVITY_ID:15
                 &D.RESOURCE_TYPE:5
                 &D.FUND_CODE:5
                 &D.PROGRAM_CODE:5
                 &D.CLASS_FLD:5
                 &D.BUDGET_PERIOD:8
                 $Out_Percentage:7
                 $Out_Amount:20
                 &D.PLAN_TYPE:2
                 &D.CURRENCY_CD:3
                 &D.BD_UPDATE_FLAG:1

   add 1 to #Distr_Tbl_Output_Cnt

FROM PS_BD_DISTR_TBL D
ORDER BY D.BUSINESS_UNIT, D.POSITION_NBR, D.EMPLID, D.EMPL_RCD,
         D.EFFDT, D.EFFSEQ, D.COMPENSATION_IND, D.BD_SEQ_NBR
end-SELECT

   CLOSE 3

end-procedure DISTR-TABLE-TO-FILE

!***********************************************************************
! Procedure: JOBCODE-TABLE-TO-FILE                                     *
! Descr:     Reads the Budgets Jobcode table and writes the contents   *
!            to the output flat file.                                  *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure JOBCODE-TABLE-TO-FILE

   move 0 to #Jobcd_Tbl_Output_Cnt
   move 'A' to $Audit_Actn

   !**   Open the output file no.4.
   move 0 to #filestat

   open $OpenName4 as 4 for-writing record=144:fixed status = #filestat

   !**   Check the result returned in the #filestat variable.  Stop program on error.
   if #filestat <> 0
      show ' '
      show 'Error on file open.  File is ' $OpenName4
      stop              ! Halt program
   end-if

begin-SELECT
JC.SETID
JC.JOBCODE
JC.EFFDT
JC.EFF_STATUS
JC.DESCR
JC.SAL_ADMIN_PLAN
JC.GRADE
JC.STEP
JC.CURRENCY_CD
JC.STD_HOURS
JC.STD_HRS_FREQUENCY
JC.REG_TEMP
JC.BD_DFLT_SAL_VAL
JC.BD_DFLT_OVERRIDE
JC.SURVEY_SALARY
JC.BD_USER_OVERID_FLG
JC.BD_POS_BNFT_OPTN
JC.BD_DFLT_BNFT_VAL
JC.BD_BNFT_MULT
JC.BD_DFLT_BNFT_OVRD
JC.BD_DFLT_BNFT_AMT
JC.BD_DFLT_BNFT_PCT
JC.BD_USER_BNFT_OVRD

   do Format-Number(&JC.STEP, $Out_Step, '00')
   do Format-Number(&JC.STD_HOURS, $Out_Std_Hours, '00.99')
   do Format-Number(&JC.SURVEY_SALARY, $Out_Survey_Salary, '00000000')
   do Format-Number(&JC.BD_DFLT_BNFT_AMT, $Out_BD_Dflt_Bnft_Amt, '00000000')
   do Format-Number(&JC.BD_DFLT_BNFT_PCT, $Out_BD_Dflt_Bnft_Pct, '000.99')

   Write 4 from  $Audit_Actn:1
                 &JC.SETID:5
                 &JC.JOBCODE:6
                 &JC.EFFDT:10
                 &JC.EFF_STATUS:1
                 &JC.DESCR:30
                 &JC.SAL_ADMIN_PLAN:4
                 &JC.GRADE:3
                 $Out_Step:2
                 &JC.CURRENCY_CD:3
                 $Out_Std_Hours:5
                 &JC.STD_HRS_FREQUENCY:5
                 &JC.REG_TEMP:1
                 &JC.BD_DFLT_SAL_VAL:20
                 &JC.BD_DFLT_OVERRIDE:1
                 $Out_Survey_Salary:8
                 &JC.BD_USER_OVERID_FLG:1
                 &JC.BD_POS_BNFT_OPTN:1
                 &JC.BD_DFLT_BNFT_VAL:20
                 &JC.BD_BNFT_MULT:1
                 &JC.BD_DFLT_BNFT_OVRD:1
                 $Out_BD_Dflt_Bnft_Amt:8
                 $Out_BD_Dflt_Bnft_Pct:6
                 &JC.BD_USER_BNFT_OVRD:1

   add 1 to #Jobcd_Tbl_Output_Cnt

FROM PS_ZBD_JOBCODE_TBL JC
ORDER BY JC.SETID, JC.JOBCODE, JC.EFFDT
end-SELECT

    CLOSE 4

end-procedure JOBCODE-TABLE-TO-FILE

!***********************************************************************
! Procedure: WRAPUP                                                    *
! Descr:     This paragraph ends the report process and updates the    *
!            status of the job in the process scheduler                *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure WRAPUP


   show ' '
   show ' '
   show 'Budgets Position records written.......: ' #Posn_Tbl_Output_Cnt
   show ' '
   show 'Budgets Job records written............: ' #Job_Tbl_Output_Cnt
   show ' '
   show 'Budgets Distribution records written...: ' #Distr_Tbl_Output_Cnt
   show ' '
   show 'Budgets Jobcodes records written.......: ' #Jobcd_Tbl_Output_Cnt
   show ' '
   show ' '
   show 'Program ' $ReportID ' completed successfully.'

   print 'Budgets Position records written.......:' (+2,5,40)
   print #Posn_Tbl_Output_Cnt                       (0,+2,07) edit 999,999
   print 'Budgets Job records written............:' (+2,5,40)
   print #Job_Tbl_Output_Cnt                        (0,+2,07) edit 999,999
   print 'Budgets Distribution records written...:' (+2,5,40)
   print #Distr_Tbl_Output_Cnt                      (0,+2,07) edit 999,999
   print 'Budgets Jobcodes records written.......:' (+2,5,40)
   print #Jobcd_Tbl_Output_Cnt                      (0,+2,07) edit 999,999
   print 'Program'                                  (+3,5,07)
   print $ReportID                                  (0,+2,10)
   print 'completed successfully.'                  (0,+2,23)

   do Reset
   do Successful-EOJ

End-Procedure WRAPUP
!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#include 'askaod.sqc'
#include 'btgetval.sqc'  !Formats run control parameters.
#include 'btrnctl1.sqc'  !Get Variables entered through Process Scheduler
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'reset.sqc'     !Reset printer procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
#include 'stderror.sqc'  !Routines to display error output
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
