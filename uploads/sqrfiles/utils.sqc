!***********************************************************************
!  UTILS.SQC:PRINTING UTILITIES
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!----------------------------------------------------------------------
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      
!          $Date:  2006/07/19:15:48:22                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************


begin-procedure print-word-wrapped ($long_line, #WrapLimit, #PrintCol)

  let #chars_printed    = 0
  let #max_length       = length($long_line)
  let #extract_pos      = 1
  let #loop_count       = 1


  while #chars_printed < #max_length

    if (#max_length - #chars_printed) < #WrapLimit
       let #WrapLimit = (#max_length - #chars_printed)
    end-if

    let $extracted_string = {ps-substr}($long_line, #extract_pos, #WrapLimit)
    let #ext_strlen = length($extracted_string)
    let #extract_start_pos = #extract_pos
    let $orstr = $extracted_string
    let $crlf = chr(13)||chr(10)
    let #crlf_pos = instr($extracted_string,$crlf,1)

        #ifdef debugA
                display 'crlf ?' noline
                display #crlf_pos      noline
                let #lstr = length($extracted_string)
                display ' olen ' noline
                display #lstr
        #end-if

    if #crlf_pos > 0 and #crlf_pos < #ext_strlen
       let $extracted_string = {ps-substr}($extracted_string,1,#crlf_pos)
       let #extract_pos = #extract_pos + 1      !skip the crlf
       let #chars_printed = #chars_printed + 1

        #ifdef debugA
           let #lstr = length($extracted_string)
           display ' truncated len ' noline
           display #lstr noline
           display ' pos ' noline
           display #extract_pos
        #end-if

    end-if

    ! if next character after the extracted string is a space or crlf

    let #next_char_pos = length($extracted_string)
    let #is_white_space = 0
    if  #next_char_pos < #max_length
       let $next_char = {ps-substr}($long_line, #extract_start_pos + #next_char_pos , 1)
       let #is_white_space = cond( $next_char = ' ' or $next_char = $crlf, 1, 0)
    end-if

    ! then the string is already wrapped, so don't wrap it further

    if  length($extracted_string) + #chars_printed < #max_length and #is_white_space = 0
        do Word-Wrap-String ($extracted_string, $dstr)
    else
        let  $dstr = $extracted_string
    end-if

    let $extracted_string = $dstr
    let #aflen = length($extracted_string)
    let $dstr =  ltrim(rtrim($dstr, ' '), ' ')
    let #printedlen = length($dstr)
    let  #onlyCR = 0

    if #printedlen = 1 ! if only single character
       let #onlyCR = instr($dstr,chr(13),1)   ! check to see if it is a CR
    end-if

    if #onlyCR = 0
      if #loop_count > 1
        print $dstr (+1,#PrintCol,#WrapLimit)
      else
        print $dstr (,#PrintCol,#WrapLimit)
      end-if
    end-if

    let #chars_printed =  #chars_printed + length($extracted_string)
    let #extract_pos = #chars_printed + 1


        #ifdef debugA
                let #charsleft = #max_length - #chars_printed
                let #ctr = #ctr + 1
                display 'loop # ' noline
                display #loop_count
                display 'original: ' noline
                display   $orstr
                display 'after: ' noline
                display   $extracted_string
                display 'Length: after - ' noline
                display #aflen noline
                display ' printed length ' noline
                display #printedlen noline
                display  ' maxl : ' noline
                display  #max_length noline
                display  ' chars# : ' noline
                display  #chars_printed  noline
                display  ' ext pos : ' noline
                display  #extract_pos  noline
                display  'left ' noline
                display  #charsleft
                display  'wrap ' noline
                display  #wraplimit
        #end-if

    let #loop_count = #loop_count + 1

  end-while

end-procedure

begin-procedure Word-Wrap-String ($String, :$wrapped_str)

if not isnull($String)

   let #string_ptr = length($String)
   let #string_length = #string_ptr
   let $curr_char = {ps-substr}($String, #string_ptr, 1)

   while $curr_char <> ' ' and $curr_char <> '.' and $curr_char <> '-' and  #string_ptr > 0

       let #string_ptr = #string_ptr - 1
       let $curr_char = {ps-substr}($String, #string_ptr, 1)

   end-while

   if #string_ptr > 0  and #string_ptr < #string_length   ! the string was actually wrapped
      let $wrapped_str = {ps-substr}($String, 1, #string_ptr - 1)
   else
      let $wrapped_str = $String
   end-if

else
   let $wrapped_str = $String
end-if
end-procedure


begin-procedure cpyifnull-lng($Tbl_field,$Lang_field,:$Prnt_field)
  if IsNull($Lang_field)
     move $Tbl_field to $Prnt_field
  else
     move $Lang_field to $Prnt_field
  end-if
end-procedure


