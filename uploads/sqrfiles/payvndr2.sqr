!***********************************************************************
!***********************************************************************
!  PAYVNDR: Print contents of HRMS Vendor Tables                       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/05/15:02:16:35                           
!             $Release:  HR9                                           
!            $Revision:  101                                           
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'  !printer and page-size initialization


!***********************************************************************
! BEGIN-REPORT                                                         *
!***********************************************************************
begin-report

  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term

end-report


!***********************************************************************
! PROCEDURE: Init-Report                                               *
!***********************************************************************
begin-procedure Init-Report
  move 'PAYVNDR2' to $ReportID
  move 'Vendor Listing' to $ReportTitle

  do Init-DateTime
  do Init-Number
  show ' '
  show $ReportID ' - ' $ReportTitle
  show ' '

  do Get-Current-DateTime
  do Stdapi-Init

  if ISNULL(RTRIM($prcs_process_instance, ' '))
    do Ask-Parameters                   ! Invoked interactively
  else
    do Select-Parameters                ! Invoked by Process Scheduler
    if RTRIM(&VR.HRMS_Class, ' ') = ''
      let $HRMS_Class = '%'
    else
      let $HRMS_Class = &VR.HRMS_Class
    end-if
    let $AsOfDate   = &VR.ASOFDATE
  end-if

end-procedure Init-Report


!***********************************************************************
! PROCEDURE: Ask-Parameters                                            *
!***********************************************************************
begin-procedure Ask-Parameters

  input $HRMS_Class 'Please enter the vendor classification: '
  input $AsOfDate 'Please enter an As Of Date (YYYY-MM-DD): '

end-Procedure Ask-Parameters


!***********************************************************************
! PROCEDURE: Select-Parameters                                         *
!***********************************************************************
begin-procedure Select-Parameters

begin-select

VR.HRMS_CLASS
VR.ASOFDATE
FROM  PS_RC_VNDR_REPORT VR
WHERE VR.OPRID       = $prcs_oprid
  AND VR.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-Procedure Select-Parameters


!***********************************************************************
! HEADING 6                                                            *
!***********************************************************************
begin-HEADING 6
  #Include 'stdhdg03.sqc'

  print 'SetID:'                        (+2,1,7)        BOLD
  print $SetId                          (0,+1)

  print 'Vendor ID:'                    (0,18,10)       BOLD
  print $Vendor_Id                      (0,+2)

  print 'Name 1:'                       (0,46,7)        BOLD
  print $Name_1                         (0,+1)

  print 'Status:'                       (0,96,7)        BOLD
  print $Vendor_Status_Desc             (0,+6,25)

  print 'Class:'                        (0,136,7)       BOLD
  print $HRMS_Class_Desc                (0,0,30)

  print 'Short Name:'                   (+1,18,11)      BOLD
  print $Short_Name                     (0,+1)

  print 'Name 2:'                       (0,46,7)        BOLD
  print $Name_2                         (0,+1)

  print 'Persistence:'                  (0,96,12)       BOLD
  print $Vendor_Persistence_Desc        (0,+1,30)

end-HEADING


!***********************************************************************
! PROCEDURE: Process-Main                                              *
!***********************************************************************
begin-procedure Process-Main

begin-select
COUNT(*)  &Vendor_Count
FROM PS_VENDOR_TMP
end-select

let #Vendor_Count = 0

begin-select
SETID
VENDOR_ID  (1,1) on-break print=never after=Vendor-Change
NAME1
NAME2
VENDOR_NAME_SHORT
HRMS_CLASS
VENDOR_STATUS
VENDOR_PERSISTENCE

 ! Store base level Vendor details, to be printed as part of the standard heading

  let $SetID = &SETID
  let $Vendor_Id = &VENDOR_ID
  let $Name_1 = &NAME1
  let $Name_2 = &NAME2
  let $Short_Name = &VENDOR_NAME_SHORT

  let $FieldName = 'HRMS_CLASS'
  let $FieldValue = &HRMS_CLASS
  do  Read-Translate-Table
  let $HRMS_Class_Desc = $XlatLongName

  let $FieldName = 'VENDOR_STATUS'
  let $FieldValue = &VENDOR_STATUS
  do  Read-Translate-Table
  let $Vendor_Status_Desc = $XlatLongName

  let $FieldName = 'VENDOR_PERSISTENCE'
  let $FieldValue = &VENDOR_PERSISTENCE
  do  Read-Translate-Table
  let $Vendor_Persistence_Desc = $XlatLongName

 ! Now print out all other Vendor details

  do Print-Vendor-Address-Details
  do Print-Vendor-Location-Details
  do Print-Vendor-Contact-Details
  do Print-Vendor-Policy-Details

  let #Vendor_Count = #Vendor_Count + 1

FROM  PS_VENDOR_TMP
WHERE HRMS_CLASS LIKE $HRMS_Class
ORDER BY SETID, VENDOR_ID
end-select

end-procedure Process-Main


!***********************************************************************
! PROCEDURE: Vendor-Change                                             *
!***********************************************************************
begin-procedure Vendor-Change

if #Vendor_Count <> &Vendor_Count
  new-page
end-if

end-procedure Vendor-Change


!***********************************************************************
! PROCEDURE: Print-Vendor-Address-Details                              *
!***********************************************************************
begin-procedure Print-Vendor-Address-Details

NEXT-LISTING NEED=5

begin-select
COUNT(*)  &Address_Count

FROM  PS_VENDOR_ADDR_TMP
WHERE SETID = &SETID AND
      VENDOR_ID = &VENDOR_ID
end-select

if &Address_Count = 0
  print 'No Address Details for Vendor.' (+1,1) Bold
else
  print 'Addresses/Telephone:'           (+1,1) underline
  print 'Seq Description                    Type            Address                                 '  (+1,1)  BOLD
  print 'City                 County               State           Country         Postal'             (0,+1)  BOLD

begin-select
PVA.ADDRESS_SEQ_NUM                      (+1,1,3)  Edit 999
PVA.EFFDT
PVAS.DESCR                               (0,+1,30)
PVAS.VNDR_ADDRESS_TYPE
  let $FieldName = 'VNDR_ADDRESS_TYPE'
  let $FieldValue = &PVAS.VNDR_ADDRESS_TYPE
  do Read-Translate-Table
  print $XlatLongName                    (0,+1,15)

PVA.ADDRESS1
PVA.ADDRESS2
PVA.ADDRESS3
  let $Address = rtrim(&PVA.ADDRESS1, ' ')
  do Merge-Address-Fields(&PVA.ADDRESS2, $Address)
  do Merge-Address-Fields(&PVA.ADDRESS3, $Address)
  print $Address                         (0,+1,40)

PVA.CITY                                 (0,+1,20)
PVA.COUNTY                               (0,+1,20)
PVA.STATE                                (0,+1,15)
PVA.COUNTRY                              (0,+1,15)
PVA.POSTAL                               (0,+1,10)

  do Print-Vendor-Address-Phone-Details

FROM  PS_VNDR_ADDR_S_TMP PVAS,
      PS_VENDOR_ADDR_TMP     PVA
WHERE PVAS.SETID          = &SETID AND
      PVAS.VENDOR_ID      = &VENDOR_ID AND
      PVA.SETID           = PVAS.SETID AND
      PVA.VENDOR_ID       = PVAS.VENDOR_ID AND
      PVA.ADDRESS_SEQ_NUM = PVAS.ADDRESS_SEQ_NUM AND
      PVA.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_VENDOR_ADDR_TMP
                   WHERE  SETID           = PVA.SETID AND
                          VENDOR_ID       = PVA.VENDOR_ID AND
                          ADDRESS_SEQ_NUM = PVA.ADDRESS_SEQ_NUM AND
                          EFFDT          <= $AsOfDate) AND
      PVA.EFF_STATUS = 'A'
ORDER BY PVA.ADDRESS_SEQ_NUM
end-select

end-if

end-procedure Print-Vendor-Address-Details


!***********************************************************************
! PROCEDURE: Merge-Address-Fields                                      *
!***********************************************************************
begin-procedure Merge-Address-Fields($Address_Field, :$Address)

  let $Address_Field = rtrim($Address_Field, ' ')
  if NOT ISNULL($Address_Field)
    find ',' in $Address 0 #Comma_Loc
    let #Length   = length($Address_Field)
    if #Comma_Loc = -1 or #Length <> #Comma_Loc
      let $Address = $Address || ','
    end-if
    let $Address = $Address || ' ' || $Address_Field
  end-if

end-procedure Merge-Address-Fields


!***********************************************************************
! PROCEDURE: Print-Vendor-Address-Phone-Details                        *
!***********************************************************************
begin-procedure Print-Vendor-Address-Phone-Details

  let #Count = 0

begin-select
PHONE_TYPE

  position (+1)
  if #Count = 0
    print 'Phone Type: '          (+1,50)  BOLD
    print 'Country Code: '        (0,79)   BOLD
    print 'Telephone: '           (0,102)  BOLD
    print 'Extension: '           (0,144)  BOLD
  end-if

  let $FieldName = 'PHONE_TYPE'
  let $FieldValue = &PHONE_TYPE
  do Read-Translate-Table
  print $XlatLongName             (0,62,10)

COUNTRY_CODE                      (0,93)
PHONE                             (0,113)
EXTENSION                         (0,155)

  let #Count = #Count + 1

FROM  PS_VNDR_ADDR_P_TMP
WHERE SETID           = &SETID AND
      VENDOR_ID       = &VENDOR_ID AND
      ADDRESS_SEQ_NUM = &PVA.ADDRESS_SEQ_NUM AND
      EFFDT           = &PVA.EFFDT
ORDER BY PHONE_TYPE
end-select

if #Count <> 0
  position (+1)
end-if

end-procedure Print-Vendor-Address-Phone-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Location-Details                             *
!***********************************************************************
begin-procedure Print-Vendor-Location-Details

NEXT-LISTING NEED=5

begin-select
COUNT(*)  &Location_Count

FROM PS_VENDOR_LOC_TMP
WHERE SETID     = &SETID AND
      VENDOR_ID = &VENDOR_ID
end-select

if &Location_Count = 0
  print 'No Location Details for Vendor.' (+2,1) Bold
else
  print 'Locations/Pay Details/Bank Details:' (+2,1) underline
  print 'Location     Description                      Remit Vendor / Location  / Addr. Seq'  (+1,1)  BOLD

begin-select
PVL.VNDR_LOC                       (+1,1,10)
PVL.EFFDT
PVLS.DESCR                         (0,+3,30)
PVL.REMIT_VENDOR                   (0,+3,10)
PVL.REMIT_LOC                      (0,+5,10)
PVL.REMIT_ADDR_SEQ_NUM             (0,+5,3)  Edit 999

  do Print-Vendor-Location-Pay-Details
  do Print-Vendor-Location-Bank-Details

FROM  PS_VNDR_LOC_S_TMP PVLS,
      PS_VENDOR_LOC_TMP     PVL
WHERE PVLS.SETID     = &SETID AND
      PVLS.VENDOR_ID = &VENDOR_ID AND
      PVL.SETID      = PVLS.SETID AND
      PVL.VENDOR_ID  = PVLS.VENDOR_ID AND
      PVL.VNDR_LOC   = PVLS.VNDR_LOC AND
      PVL.EFFDT      = (SELECT MAX(EFFDT)
                        FROM   PS_VENDOR_LOC_TMP
                        WHERE  SETID     = PVL.SETID AND
                               VENDOR_ID = PVL.VENDOR_ID AND
                               VNDR_LOC  = PVL.VNDR_LOC AND
                               EFFDT    <= $AsOfDate) AND
      PVL.EFF_STATUS = 'A'
ORDER BY PVL.VNDR_LOC
end-select

end-if

end-procedure Print-Vendor-Location-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Location-Pay-Details                         *
!***********************************************************************
begin-procedure Print-Vendor-Location-Pay-Details

  let #Count = 0

begin-select
SEQ_NUM

  position (+1)
  if #Count = 0
    print 'Pay:  Seq:'         (+1,4)  BOLD
    print 'Bank Code:'         (0,22)  BOLD
    print 'Account:'           (0,42)  BOLD
    print 'Hold Payment:'      (0,59)  BOLD
    print 'Separate Payment:'  (0,78)  BOLD
    print 'Method:'            (0,102) BOLD
    print 'Handling Code:'     (0,138) BOLD
  end-if

  print &SEQ_NUM               (0,15,3)  Edit 999

BANK_CD        &Dummy1         (0,33,5)
BANK_ACCT_KEY  &Dummy2         (0,51,4)
PYMNT_HOLD                     (0,73,1)
PYMNT_SEPARATE                 (0,97,1)
PYMNT_METHOD
  if ISNULL(RTRIM(&PYMNT_METHOD, ' '))
    print 'Default'            (0,110,24)
  else
    let $FieldName = 'PYMNT_METHOD'
    let $FieldValue = &PYMNT_METHOD
    do Read-Translate-Table
    print $XlatLongName        (0,110,24)
  end-if

PYMNT_HANDLING_CD
  if ISNULL(RTRIM(&PYMNT_HANDLING_CD, ' '))
    print 'Default'            (0,153,24)
  else
    let $FieldName = 'PYMNT_HANDLING_CD'
    let $FieldValue = &PYMNT_HANDLING_CD
    do Read-Translate-Table
    print $XlatLongName        (0,153,24)
  end-if

  let #Count = #Count + 1

FROM  PS_VENDOR_PAY_TMP
WHERE SETID      = &SETID AND
      VENDOR_ID  = &VENDOR_ID AND
      VNDR_LOC   = &PVL.VNDR_LOC AND
      EFFDT      = &PVL.EFFDT AND
      EFF_STATUS = 'A'
ORDER BY SEQ_NUM
end-select

if #Count <> 0
  position (+1)
end-if

end-procedure Print-Vendor-Location-Pay-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Location-Bank-Details                        *
!***********************************************************************
begin-procedure Print-Vendor-Location-Bank-Details

  let #Count = 0

begin-select
BANK_ACCT_SEQ_NBR

  position (+1)
  if #Count = 0
    print 'Bank: Seq:'     (+1,4)  BOLD
    print 'Descr:'         (0,21)  BOLD
    print 'Bank Cd:'       (0,51)  BOLD
    print 'ID Qual:'       (0,67)  BOLD
    print 'ID Num:'        (0,81)  BOLD
    print 'Branch:'        (0,106) BOLD
    print 'Acct Type:'     (0,126) BOLD
    print 'Acct:'          (0,149) BOLD
    print 'Acct #:'        (0,161) BOLD
  end-if

  print &BANK_ACCT_SEQ_NBR (0,15,3)  Edit 999

DESCR                      (0,28,20)
BANK_ID_QUAL               (0,76,3)
BNK_ID_NBR                 (0,89,15)
BRANCH_ID                  (0,114,10)
BANK_ACCT_TYPE
  let $FieldName  = 'BANK_ACCT_TYPE'
  let $FieldValue = &BANK_ACCT_TYPE
  do Read-Translate-Table
  print $XlatShortName     (0,137,10)

BANK_ACCOUNT_NUM           (0,169,5)

  let #Count = #Count + 1

FROM  PS_VNDR_BANK_A_TMP
WHERE SETID     = &SETID AND
      VENDOR_ID = &VENDOR_ID AND
      VNDR_LOC  = &PVL.VNDR_LOC AND
      EFFDT     = &PVL.EFFDT
ORDER BY BANK_ACCT_SEQ_NBR
end-select

if #Count <> 0
  position (+1)
end-if

end-procedure Print-Vendor-Location-Bank-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Contact-Details                              *
!***********************************************************************
begin-procedure Print-Vendor-Contact-Details

NEXT-LISTING NEED=5

begin-select
COUNT(*)  &Contact_Count

FROM  PS_VNDR_CNTCT_TMP
WHERE SETID     = &SETID AND
      VENDOR_ID = &VENDOR_ID
end-select

if &Contact_Count = 0
  print 'No Contact Details for Vendor.' (+2,1) Bold
else
  print 'Contacts/Telephone:' (+2,1) underline
  print 'Seq.   Description                      Type         Name                            '      (+1,1)  BOLD
  print 'Title                  URL                                                           Addr.' (0,+1)  BOLD

begin-select
PVC.CNTCT_SEQ_NUM                  (+1,1,3)  Edit 999
PVC.EFFDT
PVCS.DESCR                         (0,+4,30)
PVC.CONTACT_TYPE
  let $FieldName  = 'CONTACT_TYPE'
  let $FieldValue = &PVC.CONTACT_TYPE
  do Read-Translate-Table
  print $XlatShortName             (0,+3,10)

PVC.CONTACT_NAME                   (0,+3,30)
PVC.CONTACT_TITLE                  (0,+3,20)
PVC.URL                            (0,+3,60)
PVC.ADDRESS_SEQ_NUM                (0,+3,3)  edit 999

  do Print-Vendor-Contact-Phone-Details

FROM  PS_VNDR_CTCT_S_TMP   PVCS,
      PS_VNDR_CNTCT_TMP     PVC
WHERE PVCS.SETID        = &SETID AND
      PVCS.VENDOR_ID    = &VENDOR_ID AND
      PVC.SETID         = PVCS.SETID AND
      PVC.VENDOR_ID     = PVCS.VENDOR_ID AND
      PVC.CNTCT_SEQ_NUM = PVCS.CNTCT_SEQ_NUM AND
      PVC.EFFDT         = (SELECT MAX(EFFDT)
                           FROM   PS_VNDR_CNTCT_TMP
                           WHERE  SETID         = PVC.SETID AND
                                  VENDOR_ID     = PVC.VENDOR_ID AND
                                  CNTCT_SEQ_NUM = PVC.CNTCT_SEQ_NUM AND
                                  EFFDT        <= $AsOfDate) AND
      PVC.EFF_STATUS    = 'A'
ORDER BY PVC.CNTCT_SEQ_NUM
end-select

end-if

end-procedure Print-Vendor-Contact-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Contact-Phone-Details                        *
!***********************************************************************
begin-procedure Print-Vendor-Contact-Phone-Details

  let #Count = 0

begin-select
PHONE_TYPE &PHONE_TYPE_2

  position (+1)
  if #Count = 0
    print 'Phone Type:'           (+1,50)  BOLD
    print 'Country Code:'         (0,74)   BOLD
    print 'Telephone:'            (0,92)   BOLD
    print 'Extension:'            (0,129)  BOLD
  end-if

  let $FieldName = 'PHONE_TYPE'
  let $FieldValue = &PHONE_TYPE_2
  do Read-Translate-Table
  print $XlatLongName             (0,62,10)

COUNTRY_CODE &Dummy6              (0,88)
PHONE        &Dummy7              (0,103)
EXTENSION    &Dummy8              (0,140)

  let #Count = #Count + 1

FROM  PS_VNDR_CTCT_P_TMP
WHERE SETID         = &SETID AND
      VENDOR_ID     = &VENDOR_ID AND
      CNTCT_SEQ_NUM = &PVC.CNTCT_SEQ_NUM AND
      EFFDT         = &PVC.EFFDT
ORDER BY PHONE_TYPE
end-select

if #Count <> 0
  position (+1)
end-if

end-procedure Print-Vendor-Contact-Phone-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Policy-Details                               *
!***********************************************************************
begin-procedure Print-Vendor-Policy-Details

NEXT-LISTING NEED=5

begin-select
COUNT(*)  &Policy_Count

FROM  PS_VNDR_POLICY_TMP
WHERE SETID     = &SETID AND
      VENDOR_ID = &VENDOR_ID
end-select

if &Policy_Count = 0
  print 'No Policy Details for Vendor.' (+2,1) Bold
else
  print 'Policies/Contacts:' (+2,1) underline
  print 'Group Number                      Policy Number  Policy Begin Date  Policy End Date '   (+1,1)  BOLD
  print 'Policy URL ID                    Provider URL ID'                                       (0,+1)  BOLD

begin-select
PVP2.GROUP_NBR                     (+1,2,30)
PVP2.POLICY_NBR                    (0,+4,10)
PVP2.POLICY_BEGIN_DATE
  do Format-DateTime(&PVP2.POLICY_BEGIN_DATE, $out, {DEFDATE}, '', '')
  print $out                       (0,+7,10)

PVP2.POLICY_END_DATE
  do Format-DateTime(&PVP2.POLICY_END_DATE, $out, {DEFDATE}, '', '')
  print $out                       (0,+8,10)

PVP2.POLICY_URL_ID                 (0,+5,30)
PVP2.VENDOR_URL_ID                 (0,+3,30)

  do Print-Vendor-Policy-Contact-Details

FROM  PS_VNDR_POLICY_TMP PVP2
WHERE PVP2.SETID     = &SETID AND
      PVP2.VENDOR_ID = &VENDOR_ID
ORDER BY PVP2.GROUP_NBR
end-select

end-if

end-procedure Print-Vendor-Policy-Details


!***********************************************************************
! PROCEDURE: Print-Vendor-Policy-Contact-Details                       *
!***********************************************************************
begin-procedure Print-Vendor-Policy-Contact-Details

  let #Count = 0

begin-select
PVPC.CNTCT_SEQ_NUM

  position (+1)
  if #Count = 0
    print 'Seq:'                  (+1,50)  BOLD
    print 'Type:'                 (0,62)   BOLD
    print 'Name:'                 (0,102)  BOLD
  end-if

  print &PVPC.CNTCT_SEQ_NUM       (0,55,3)  Edit 999

PVC2.CONTACT_TYPE
  let $FieldName  = 'CONTACT_TYPE'
  let $FieldValue = &PVC2.CONTACT_TYPE
  do Read-Translate-Table
  print $XlatLongName             (0,68,30)

PVC2.CONTACT_NAME                 (0,108,50)

  let #Count = #Count + 1

FROM  PS_VNDR_PLCY_C_TMP PVPC,
      PS_VNDR_CNTCT_TMP PVC2
WHERE PVPC.SETID         = &SETID AND
      PVPC.VENDOR_ID     = &VENDOR_ID AND
      PVPC.GROUP_NBR     = &PVP2.GROUP_NBR AND
      PVC2.SETID         = &SETID AND
      PVC2.VENDOR_ID     = &VENDOR_ID AND
      PVC2.CNTCT_SEQ_NUM = PVPC.CNTCT_SEQ_NUM AND
      PVC2.EFFDT         = (SELECT MAX(EFFDT)
                            FROM   PS_VNDR_CNTCT_TMP
                            WHERE  SETID         = PVC2.SETID AND
                                   VENDOR_ID     = PVC2.VENDOR_ID AND
                                   CNTCT_SEQ_NUM = PVC2.CNTCT_SEQ_NUM AND
                                   EFFDT        <= $AsOfDate) AND
      PVC2.EFF_STATUS    = 'A'
ORDER BY PVPC.CNTCT_SEQ_NUM
end-select

if #Count <> 0
  position (+1)
end-if

end-procedure Print-Vendor-Policy-Contact-Details


!**************************************************************************
#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
