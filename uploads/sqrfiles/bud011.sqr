!***********************************************************************
!  BUD011.SQR:  HRMS POSITION/EMPLOYEE FUNDING SUMMARY REPORT          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
! Report Description: This report is to list out the funding source    *
! information for each position or employee (appointment) within a     *
! specific department. User enters a SetID and a Department ID and the *
! AsOfDate which the report will be used as the date reference.        *
! Funding Summary Report Type is the report option which user can      *
! choose on the run request panel. Based on this option, the program   *
! will create the summary report for either by position or appointment *
! level. Position Number, Employee ID and Employee Record number are   *
! optional field that program will use to determine if the entire      *
! department will be printed. If these fields are entered, then the    *
! report will only prints for that position or employee. Along with the*
! funding source, the report will also include the total FTE for each  *
! position or employee.                                                *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/06/12:10:35:36                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!    $Last Modified : Mar 5 2001 HP Retro Distribution                 *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Landscape Setup

!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

begin-heading 10
       #include 'stdhtr03.sqc'        ! for standard heading          !F-LPARKER-125 (CAMI)
       print ''                       (+1,,)
       print $BUD011_RPT_OPT          (+1,1,)                         !F-LPARKER-125 (CAMI)
       print $Sub_Title               (,+2,)
       print $BUD011_SETID            (+1,1,)                         !F-LPARKER-125 (CAMI)
       print $SetID                   (,+2,)
       print $BUD011_DEPT             (,+5,)                          !F-LPARKER-125 (CAMI)
       print $DeptID                  (,+2,)
       print '-'                      (,+2,)
       print $DeptName                (,+2,)
       print $BUD011_FISCAL           (,+5,)                          !F-LPARKER-125 (CAMI)
       print #FiscalYear              (,+2,) edit 9999

       if $Fund_Sum_Rpt_Type = 'P'
          print $BUD011_POSN          (10, 1)                         !F-LPARKER-125 (CAMI)
          print $BUD011_STATUS        (  ,16)                         !F-LPARKER-125 (CAMI)
       else
          print $BUD011_EMPLOYEE      ( 9, 5)                         !F-LPARKER-125 (CAMI)
          print $BUD011_ID            (+1, 8)                         !F-LPARKER-125 (CAMI)
          print $BUD011_RCD           (  ,18)                         !F-LPARKER-125 (CAMI)
       end-if

       print $BUD011_FUNDING          (-1,60)                         !F-LPARKER-125 (CAMI)
       print $BUD011_LVL              (+1,61)                         !F-LPARKER-125 (CAMI)
       print $BUD011_ACCT_CD          (  ,70)                         !F-LPARKER-125 (CAMI)

       evaluate $Fund_Sum_Rpt_Opt
          when = 'E'
             print $BUD011_ERNCD      (  ,97)                         !F-LPARKER-125 (CAMI)
             break
          when = 'D'
             print $BUD011_DEDN1      (-1,97)                         !F-LPARKER-125 (CAMI)
             print $BUD011_DEDN2      (+1,97)                         !F-LPARKER-125 (CAMI)
             break
          when = 'T'
             print $BUD011_TAX1       (-1,97)                         !F-LPARKER-125 (CAMI)
             print $BUD011_TAX_CLASS  (+1,97)                         !F-LPARKER-125 (CAMI)
             break
          when = 'C'
             print $BUD011_CTX        (-1,97)                         !F-LPARKER-125 (CAMI)
             print $BUD011_TAX_CLASS  (+1,97)                         !F-LPARKER-125 (CAMI)
             break
          when-other
       end-evaluate

       print $BUD011_SEQ              (  ,118)                        !F-LPARKER-125 (CAMI)
       print $BUD011_BUDGET           (-1,127)                        !F-LPARKER-125 (CAMI)
       print $BUD011_AMOUNT           (+1,127)                        !F-LPARKER-125 (CAMI)
       print $BUD011_DIST             (-1,140)                        !F-LPARKER-125 (CAMI)
       print '%'                      (+1,142)                        !F-LPARKER-125 (CAMI)
       print $BUD011_FUNDING          (-1,150)                        !F-LPARKER-125 (CAMI)
       print $BUD011_END_DATE         (+1,150)                        !F-LPARKER-125 (CAMI)

       if $Fund_Sum_Rpt_Opt = 'E' and $Fund_Sum_Rpt_Type = 'P'
          print $BUD011_TOTAL         (-1,165)                        !F-LPARKER-125 (CAMI)
          print $BUD011_FTE           (+1,166)                        !F-LPARKER-125 (CAMI)
       end-if

end-heading

begin-footing 2
        print $BUD011_LVL_AP          ( 2,1)                          !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_JC          (  ,+5)                         !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_PN          (  ,+5)                         !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_PP          (  ,+5)                         !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_DP          (  ,+5)                         !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_JE          (  ,+5)                         !F-LPARKER-125 (CAMI)
        print $BUD011_LVL_JD          (  ,+5)                         !F-LPARKER-125 (CAMI)
end-footing


!***********************************************************************
! F-LPARKER-125 (CAMI)                                                 *
! Read language-dependent text from the database using BUD011 program  *
! ids.                                                                 *
!***********************************************************************
begin-procedure REPORT-TRANSLATION

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('BUD011', 'ACCT_CD',       $BUD011_ACCT_CD,     #DW)
  do Get_Field_Information ('BUD011', 'ACTIVE',        $BUD011_ACTIVE,      #DW)
  do Get_Field_Information ('BUD011', 'ACTIVE_DATA',   $BUD011_ACTIVE_DATA, #DW)
  do Get_Field_Information ('BUD011', 'AMOUNT',        $BUD011_AMOUNT,      #DW)
  do Get_Field_Information ('BUD011', 'AS_OF',         $BUD011_AS_OF,       #DW)
  do Get_Field_Information ('BUD011', 'BUDGET',        $BUD011_BUDGET,      #DW)
  do Get_Field_Information ('BUD011', 'CTX',           $BUD011_CTX,         #DW)
  do Get_Field_Information ('BUD011', 'CTX_DISTRIB',   $BUD011_CTX_DISTRIB, #DW)
  do Get_Field_Information ('BUD011', 'DED_DISTRIB',   $BUD011_DED_DISTRIB, #DW)
  do Get_Field_Information ('BUD011', 'DEDN1',         $BUD011_DEDN1,       #DW)
  do Get_Field_Information ('BUD011', 'DEDN2',         $BUD011_DEDN2,       #DW)
  do Get_Field_Information ('BUD011', 'DEPT',          $BUD011_DEPT,        #DW)
  do Get_Field_Information ('BUD011', 'DEL_ERROR',     $BUD011_DEL_ERROR,   #DW)
  do Get_Field_Information ('BUD011', 'DIST',          $BUD011_DIST,        #DW)
  do Get_Field_Information ('BUD011', 'EMPLOYEE',      $BUD011_EMPLOYEE,    #DW)
  do Get_Field_Information ('BUD011', 'EMPLOYEE_SEL',  $BUD011_EMPLOYEE_SEL,#DW)
  do Get_Field_Information ('BUD011', 'END_DATE',      $BUD011_END_DATE,    #DW)
  do Get_Field_Information ('BUD011', 'END_REPORT',    $BUD011_END_REPORT,  #DW)
  do Get_Field_Information ('BUD011', 'ENTIRE_DEPT',   $BUD011_ENTIRE_DEPT, #DW)
  do Get_Field_Information ('BUD011', 'ERN_DISTRIB',   $BUD011_ERN_DISTRIB, #DW)
  do Get_Field_Information ('BUD011', 'ERNCD',         $BUD011_ERNCD,       #DW)
  do Get_Field_Information ('BUD011', 'FISCAL_YEAR',   $BUD011_FISCAL,      #DW)
  do Get_Field_Information ('BUD011', 'FTE',           $BUD011_FTE,         #DW)
  do Get_Field_Information ('BUD011', 'FUNDING',       $BUD011_FUNDING,     #DW)
  do Get_Field_Information ('BUD011', 'ID',            $BUD011_ID,          #DW)
  do Get_Field_Information ('BUD011', 'INACTIVE',      $BUD011_INACTIVE,    #DW)
  do Get_Field_Information ('BUD011', 'KEY_VAL_HDG',   $BUD011_KEY_VALUES,  #DW)
  do Get_Field_Information ('BUD011', 'LEVEL',         $BUD011_LVL,         #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_AP',      $BUD011_LVL_AP,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_DP',      $BUD011_LVL_DP,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_JC',      $BUD011_LVL_JC,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_JD',      $BUD011_LVL_JD,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_JE',      $BUD011_LVL_JE,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_PN',      $BUD011_LVL_PN,      #DW)
  do Get_Field_Information ('BUD011', 'LEVEL_PP',      $BUD011_LVL_PP,      #DW)
  do Get_Field_Information ('BUD011', 'NO_FUNDING',    $BUD011_NO_FUND,     #DW)
  do Get_Field_Information ('BUD011', 'NOT_FOUND',     $BUD011_NOT_FND,     #DW)
  do Get_Field_Information ('BUD011', 'POSITION',      $BUD011_POSN,        #DW)
  do Get_Field_Information ('BUD011', 'POSN_SELECTED', $BUD011_POSN_SEL,    #DW)
  do Get_Field_Information ('BUD011', 'RCD$',          $BUD011_RCD,         #DW)
  do Get_Field_Information ('BUD011', 'REPORT_OPTION', $BUD011_RPT_OPT,     #DW)
  do Get_Field_Information ('BUD011', 'REPORT_TITLE1', $REPORT_TITLE1,      #DW)
  do Get_Field_Information ('BUD011', 'REPORT_TITLE2', $REPORT_TITLE2,      #DW)
  do Get_Field_Information ('BUD011', 'SEL_EMPLID_RCD',$BUD011_SEL_EMPLID_RCD,#DW)
  do Get_Field_Information ('BUD011', 'SEL_POSN_NBR',  $BUD011_SEL_POSN_NBR,#DW)
  do Get_Field_Information ('BUD011', 'SEQ',           $BUD011_SEQ,         #DW)
  do Get_Field_Information ('BUD011', 'SETID',         $BUD011_SETID,       #DW)
  do Get_Field_Information ('BUD011', 'STATUS',        $BUD011_STATUS,      #DW)
  do Get_Field_Information ('BUD011', 'TAX_CLASS',     $BUD011_TAX_CLASS,   #DW)
  do Get_Field_Information ('BUD011', 'TAX_DISTRIB',   $BUD011_TAX_DISTRIB, #DW)
  do Get_Field_Information ('BUD011', 'TAX1',          $BUD011_TAX1,        #DW)
  do Get_Field_Information ('BUD011', 'TOTAL',         $BUD011_TOTAL,       #DW)
  do Get_Field_Information ('BUD011', 'TOTAL_EMPLS',   $BUD011_TOTAL_EMPLS, #DW)
  do Get_Field_Information ('BUD011', 'TOTAL_POSNS',   $BUD011_TOTAL_POSNS, #DW)

end-procedure


!***********************************************************************
! HOUSEKEEPING                                                         *
! This procedure performs the application initializations.  Formats    *
! variables for use.  Calls the procedures to get input parameters.    *
!***********************************************************************
begin-procedure HOUSEKEEPING

  move 'BUD011' to $ReportID                                          !F-LPARKER-125 (CAMI)
  do INIT-DATETIME
  do GET-CURRENT-DATETIME
  do STDAPI-INIT
  do SELECT-PARAMETERS
  do REPORT-TRANSLATION                                               !F-LPARKER-125 (CAMI)

  if $Fund_Sum_Rpt_Type = 'P'
     move $REPORT_TITLE1 to $ReportTitle                              !F-LPARKER-125 (CAMI)

     if $Position_Nbr <> ''
        let $Where = 'AND PD.POSITION_NBR = ''' || $Position_Nbr || ''''
     else
        let $Where = ''
     end-if

     if $ActiveData = 'Y'
        let $Where = $Where || ' AND PD.EFF_STATUS = ''A'''
     end-if

  else
     move $REPORT_TITLE2 to $ReportTitle                              !F-LPARKER-125 (CAMI)

     if $EmplID <> ''
        let $Where = 'AND JB.EMPLID = ''' || $EmplID ||
                     ''' AND JB.EMPL_RCD = '

! #ifdef INFORMIX
!         let $Where = 'AND JB.EMPLID = ''' || $EmplID ||
!                      ''' AND JB.EMPL_RCDN = '
! #else
!         let $Where = 'AND JB.EMPLID = ''' || $EmplID ||
!                      ''' AND JB.EMPL_RCD = '
! #endif

        concat #empl_rcd_no with $Where
     else
        let $Where = ''
     end-if

     if $ActiveData = 'Y'
        let $Where = $Where || ' AND JB.EMPL_STATUS IN (''A'',''L'',''P'',''S'',''W'')'
     end-if

  end-if

  evaluate $Fund_Sum_Rpt_Opt
     when = 'E'
        let $Sub_Title = $BUD011_ERN_DISTRIB                          !F-LPARKER-125 (CAMI)
        break
     when = 'D'
        let $Sub_Title = $BUD011_DED_DISTRIB                          !F-LPARKER-125 (CAMI)
        break
     when = 'T'
        let $Sub_Title = $BUD011_TAX_DISTRIB                          !F-LPARKER-125 (CAMI)
        break
     when = 'C'
        let $Sub_Title = $BUD011_CTX_DISTRIB                          !F-LPARKER-125 (CAMI)
        break
     when-other
        let $Sub_Title = ' '
  end-evaluate

  do Setup-Dynamic-Variables

  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display ' (' noline
  display $Sub_Title noline
  display ')'
  display ''
  display ''
  display $BUD011_DEPT noline                                         !F-LPARKER-125 (CAMI)
  display ' ' noline                                                  !F-LPARKER-125 (CAMI)
  display $SetID noline
  display '/' noline
  display $DeptID
  display ''
  display $BUD011_FISCAL noline                                       !F-LPARKER-125 (CAMI)
  display ' ' noline                                                  !F-LPARKER-125 (CAMI)
  display #FiscalYear 9999
  display ''
  display $BUD011_AS_OF noline                                        !F-LPARKER-125 (CAMI)
  display ' ' noline                                                  !F-LPARKER-125 (CAMI)
  display $AsOfDate
  display ''
  display ''

  if $Fund_Sum_Rpt_Type = 'P'
     if $Position_NBR <> ''
        display $BUD011_POSN_SEL noline                               !F-LPARKER-125 (CAMI)
        display ' ' noline                                            !F-LPARKER-125 (CAMI)
        display $Position_Nbr
     else
        display $BUD011_ENTIRE_DEPT                                   !F-LPARKER-125 (CAMI)
     end-if
  else
     if $EmplID <> ''
        display $BUD011_EMPLOYEE_SEL noline                           !F-LPARKER-125 (CAMI)
        display ' ' noline                                            !F-LPARKER-125 (CAMI)
        display $EmplID noline
        display '/' noline
        display #Empl_Rcd_No 999
     else
        display $BUD011_ENTIRE_DEPT
     end-if
  end-if

  if $ActiveData = 'Y'
     display ''
     display $BUD011_ACTIVE_DATA
  end-if

  if $OutputCSV = 'Y'
     move 'CSV' to $FileExtension

#ifdef OS400
     let $FileExtension = '(D' || $FileExtension || ')'
     let $FileID = '{IMPORTPREFIX}' || 'BUD011' || $FileExtension
#else
     let $FileID = '{IMPORTPREFIX}' || 'BUD011.' || $FileExtension
#endif

     Open $FileID as 1 for-writing record=150:vary status=#FileStatus
     if #FileStatus <> 0
        display ''
        display 'Error in opening CSV file'
        let $OutputCSV = 'N'     ! Turn off file output and run report as usual
     else
        let $OutputF = $BUD011_AS_OF || ',' || $AsOfDate
        do Write-To-CSV
        let $OutputF = $BUD011_RPT_OPT || ',' || $Sub_Title
        do Write-To-CSV
        let $OutputF = $BUD011_SETID || ',' || $SetID
        do Write-To-CSV
        let $OutputF = $BUD011_DEPT || ',' || $DeptID || ',"' || $DeptName || '"'
        do Write-To-CSV
        move #FiscalYear to $FiscalYear  9999
        let $OutputF = $BUD011_FISCAL || ',' || $FiscalYear
        do Write-To-CSV
     end-if
  end-if

end-procedure HOUSEKEEPING

!***********************************************************************
!GET-VALUES                                                            *
!***********************************************************************
begin-procedure GET-VALUES

        do GET-SETID

        do GET-DEPTID

        do GET-DEPARTMENT-NAME-WITH-SETID

        do GET-FISCALYEAR

        do GET-AS-OF-DATE

        do GET-FUND-SUM-RPT-TYPE

        do GET-FUND-SUM-RPT-OPT

        if $Fund_Sum_Rpt_Type = 'P'
           do GET-POSITION-NBR
        else
           do GET-EMPLID
           do GET-EMPL-RCD-NO
        end-if

        do Get-Active-Data

        do Get-Output-CSV

end-procedure GET-VALUES


!***********************************************************************
!SETUP-DYNAMIC-VARIABLES                                               *
!***********************************************************************
begin-procedure Setup-Dynamic-Variables

  let $Sec_Key1   = ''
  let $Sec_Key2   = ''
  let $Sec_Key3   = ''
  let $Sec_Key4   = ''
  let $Sel_Record = ''
  let $Order_By   = 'ORDER BY '
  let $Order_By_2 = ', DB.BUDGET_SEQ, DB.ACCT_CD'

  evaluate $Fund_Sum_Rpt_Opt

     when = 'E'
        let $Sec_Key1    = 'DB.ERNCD'
        let $Sel_Record  = 'PS_DEPT_BUDGET_ERN DB'
        let $Order_By    = $Order_By || 'DB.ERNCD' || $Order_By_2
        break
     when = 'D'
        let $Sec_Key1    = 'DB.PLAN_TYPE'
        let $Sec_Key2    = 'DB.BENEFIT_PLAN'
        let $Sec_Key3    = 'DB.DEDCD'
        let $Sec_Key4    = 'DB.DED_CLASS'
        let $Sel_Record  = 'PS_DEPT_BUDGET_DED DB'
        let $Order_By    = $Order_By || 'DB.PLAN_TYPE, DB.BENEFIT_PLAN, ' ||
                           'DB.DEDCD, DB.DED_CLASS' || $Order_By_2
        break
     when = 'T'
        let $Sec_Key1    = 'DB.STATE'
        let $Sec_Key2    = 'DB.LOCALITY'
        let $Sec_Key3    = 'DB.TAX_CLASS'
        let $Sel_Record  = 'PS_DEPT_BUDGET_TAX DB'
        let $Order_By    = $Order_By || 'DB.STATE, DB.LOCALITY, ' ||
                           'DB.TAX_CLASS' || $Order_By_2
        break
     when = 'C'
        let $Sec_Key1    = 'DB.PROVINCE'
        let $Sec_Key2    = 'DB.TAX_CLASS_CAN'
        let $Sel_Record  = 'PS_DEPT_BUDGET_CTX DB'
        let $Order_By    = $Order_By || 'DB.PROVINCE, DB.TAX_CLASS_CAN' || $Order_By_2
        break
     when-other
  end-evaluate

end-procedure Setup-Dynamic-Variables

!***********************************************************************
! MAINLINE                                                             *
! This procedure is the main processing paragraph.  It performs        *
! application specific record processing.                              *
!***********************************************************************

begin-procedure MAINLINE

  let #Total_Proc_Count = 0

  if $Fund_Sum_Rpt_Type = 'P'

     do Retrieve-Posn-Within-Dept

  else

     do Retrieve-Appt-Within-Dept

  end-if

  if $OutputCSV = 'Y'
     close 1
  end-if

end-procedure MAINLINE

!***********************************************************************
!RETRIEVE-POSN-WITHIN-DEPT                                             *
!***********************************************************************

begin-procedure Retrieve-Posn-Within-Dept

begin-SELECT

PD.POSITION_NBR
PD.EFFDT
PD.EFF_STATUS
PD.DESCR
PD.POSITION_POOL_ID
PD.BUSINESS_UNIT

  let $Proc_Position_Nbr  = &PD.POSITION_NBR
  let $Proc_Descr         = &PD.DESCR
  let $Proc_Eff_Status    = &PD.EFF_STATUS
  let $Proc_Posn_Pool_ID  = &PD.POSITION_POOL_ID
  let $Proc_Business_Unit = &PD.BUSINESS_UNIT
  let #Total_Proc_Count   = #Total_Proc_Count + 1
  let $Fund_Found         = 'N'
  let $Prev_Position_Nbr  = ' '

  print $Proc_Position_Nbr     (+1,1)
  let $Output = rtrim($Proc_Position_Nbr, ' ')
  if $Proc_Eff_Status = 'A'
     print $BUD011_ACTIVE      (  ,16)                                !F-LPARKER-125 (CAMI)
     let $Output = $Output || ',' || $BUD011_ACTIVE
  else
     print $BUD011_INACTIVE    (  ,16)                                !F-LPARKER-125 (CAMI)
     let $Output = $Output || ',' || $BUD011_INACTIVE
  end-if
  print $Proc_Descr            (  ,26)
  let $Output = $Output || ',"' || rtrim($Proc_Descr, ' ') || '"'

  if $Fund_Sum_Rpt_Opt = 'E'
     do Calc-FTE-by-Posn
     print #FTE                (  ,165) edit 99.999999
     move #FTE to $FTE  88.888888
  end-if

  do Find-Funding-Level-by-Posn

  if $Fund_Found = 'N'
     print $BUD011_NO_FUND     ( ,85)                                 !F-LPARKER-125 (CAMI)
     if $OutputCSV = 'Y'
        let $OutputF = $Output || ',,' || $BUD011_NO_FUND
        if $Fund_Sum_Rpt_Opt = 'E'
           let $OutputF = $OutputF || ',,,,,,' || $FTE
        end-if
        do Write-To-CSV
     end-if
  end-if

FROM PS_POSITION_DATA PD, PS_DEPT_TBL DT
WHERE DT.SETID  = $SetID
  AND PD.DEPTID IN (SELECT PBUDDEP.DEPTID FROM PS_DEPT_TBL PBUDDEP
                     WHERE PBUDDEP.SETID = $SetID
                       AND PBUDDEP.BUDGET_DEPTID = $DeptID
                       AND PBUDDEP.EFFDT = (SELECT MAX(PBUDDEP1.EFFDT) FROM PS_DEPT_TBL PBUDDEP1
                                           WHERE PBUDDEP1.SETID = PBUDDEP.SETID
                                             AND PBUDDEP1.DEPTID = PBUDDEP.DEPTID
                                             AND PBUDDEP1.EFFDT <= $AsOfDate)
                       AND PBUDDEP.EFF_STATUS = 'A')
  AND DT.SETID  = (SELECT SET_CNTL.SETID
                     FROM PS_SET_CNTRL_REC SET_CNTL
                    WHERE SET_CNTL.SETCNTRLVALUE = PD.BUSINESS_UNIT
                      AND SET_CNTL.RECNAME = 'DEPT_TBL')
  AND DT.DEPTID = PD.DEPTID
  AND DT.EFFDT  = (SELECT MAX(DT1.EFFDT)
                     FROM PS_DEPT_TBL DT1
                    WHERE DT1.DEPTID = DT.DEPTID
                      AND DT1.SETID  = DT.SETID
                      AND DT1.EFFDT <= $AsOfDate)
  AND PD.EFFDT  = (SELECT MAX(PD1.EFFDT)
                     FROM PS_POSITION_DATA PD1
                    WHERE PD1.POSITION_NBR = PD.POSITION_NBR
                      AND PD1.EFFDT <= $AsOfDate)
[$Where]
ORDER BY PD.POSITION_NBR
end-SELECT

  if $Position_Nbr <> '' and #Total_Proc_Count = 0
     display $BUD011_SEL_POSN_NBR noline                              !F-LPARKER-125 (CAMI)
     display $Position_Nbr noline
     display ' ' noline                                               !F-LPARKER-125 (CAMI)
     display $BUD011_NOT_FND                                          !F-LPARKER-125 (CAMI)
  end-if

  print $BUD011_TOTAL_POSNS (+4, 5)                                   !F-LPARKER-125 (CAMI)
  print ' - '               (  , +2)                                  !F-LPARKER-125 (CAMI)
  print #Total_Proc_Count   (  , +2) edit 99999

  print $BUD011_END_REPORT  (+2,,) center                             !F-LPARKER-125 (CAMI)


end-procedure Retrieve-Posn-Within-Dept


!***********************************************************************
!RETRIEVE-APPT-WITHIN-DEPT                                             *
!***********************************************************************

begin-procedure Retrieve-Appt-Within-Dept

begin-SELECT

JB.EMPLID          () on-break level=1 print=never before=Print-Empl-Info
JB.EMPL_RCD        () on-break level=2 print=never before=Print-Empl-Id
JB.EFFDT
JB.EFFSEQ
JB.SETID_JOBCODE
JB.JOBCODE
JB.BUSINESS_UNIT
JB.POSITION_NBR
JB.ACCT_CD
PE.NAME

  let $Proc_Effdt         = &JB.EFFDT
  let #Proc_Eff_Seq       = &JB.EFFSEQ
  let $Proc_SetID_Jobcode = &JB.SETID_JOBCODE
  let $Proc_Jobcode       = &JB.JOBCODE
  let $Proc_Business_Unit = &JB.BUSINESS_UNIT
  let $Proc_Position_Nbr  = &JB.POSITION_NBR
  let $Proc_Acct_Cd       = &JB.ACCT_CD
  let $Fund_Found         = 'N'
  let $Print_Indc         = 'Y'

  do Find-Funding-Level-by-Appt

  if $Fund_Found = 'N'
     print $BUD011_NO_FUND ( ,85)                                     !F-LPARKER-125 (CAMI)
     if $OutputCSV = 'Y'
        let $OutputF = $Output || ',,' || $BUD011_NO_FUND
        do Write-To-CSV
     end-if
  end-if

FROM PS_JOB JB, PS_PERSON_NAME PE
WHERE JB.SETID_DEPT = $SetID
  AND JB.DEPTID IN (SELECT JBUDDEP.DEPTID FROM PS_DEPT_TBL JBUDDEP
                     WHERE JBUDDEP.SETID = $SetID
                       AND JBUDDEP.BUDGET_DEPTID = $DeptID
                       AND JBUDDEP.EFFDT = (SELECT MAX(JBUDDEP1.EFFDT) FROM PS_DEPT_TBL JBUDDEP1
                                           WHERE JBUDDEP1.SETID = JBUDDEP.SETID
                                             AND JBUDDEP1.DEPTID = JBUDDEP.DEPTID
                                             AND JBUDDEP1.EFFDT <= $AsOfDate)
                       AND JBUDDEP.EFF_STATUS = 'A')
  AND JB.EFFDT      = (SELECT MAX(JB1.EFFDT)
                         FROM PS_JOB JB1
                        WHERE JB1.EMPLID     = JB.EMPLID
                          AND JB1.EMPL_RCD  = JB.EMPL_RCD
                          AND JB1.EFFDT     <= $AsOfDate)
  AND JB.EFFSEQ     = (SELECT MAX(JB2.EFFSEQ)
                         FROM PS_JOB JB2
                        WHERE JB2.EMPLID     = JB.EMPLID
                          AND JB2.EMPL_RCD  = JB.EMPL_RCD
                          AND JB2.EFFDT      = JB.EFFDT)
  AND JB.EMPLID     = PE.EMPLID
[$Where]
ORDER BY JB.EMPLID, JB.EMPL_RCD
end-SELECT

  if $Emplid <> '' and #Total_Proc_Count = 0
     display $BUD011_SEL_EMPLID_RCD noline                            !F-LPARKER-125 (CAMI)
     display $EmplID noline
     display '/' noline
     display #Empl_Rcd_No 999 noline
     display ' ' noline                                               !F-LPARKER-125 (CAMI)
     display $BUD011_NOT_FND                                          !F-LPARKER-125 (CAMI)
  end-if

  print $BUD011_TOTAL_EMPLS (+4, 5)                                   !F-LPARKER-125 (CAMI)
  print ' - '               (  , +2)                                  !F-LPARKER-125 (CAMI)
  print #Total_Proc_Count   (  , +2) edit 99999                       !F-LPARKER-125 (CAMI)

  print $BUD011_END_REPORT  (+2,,) center                             !F-LPARKER-125 (CAMI)


end-procedure Retrieve-Appt-Within-Dept


!***********************************************************************
!PRINT-EMPL-INFO                                                       *
!***********************************************************************
begin-procedure Print-Empl-Info

  let $Proc_Emplid        = &JB.EMPLID
  let #Proc_Empl_Rcd_No   = &JB.EMPL_RCD
  let $Proc_Name          = &PE.NAME

  print $Proc_Emplid           (+1,5)
  print #Proc_Empl_Rcd_No      (  ,18) edit 99
  print $Proc_Name             (  ,26)

  move #Proc_Empl_Rcd_No to $Proc_Empl_Rcd_No  88
  let $Output = rtrim($Proc_Emplid, ' ') || ',' || $Proc_Empl_Rcd_No ||
                ',"' || rtrim($Proc_Name, ' ') || '"'

  let #Total_Proc_Count   = #Total_Proc_Count + 1
  let $Print_Indc         = 'N'

end-procedure Print-Empl-Info

!***********************************************************************
!PRINT-EMPL-ID                                                         *
!***********************************************************************
begin-procedure Print-Empl-Id

  let $Proc_Emplid        = &JB.EMPLID
  let #Proc_Empl_Rcd_No   = &JB.EMPL_RCD

  if $Print_Indc = 'Y'
     print $Proc_Emplid           (+1,5)
     print #Proc_Empl_Rcd_No      (  ,18) edit 99
  end-if

  move #Proc_Empl_Rcd_No to $Proc_Empl_Rcd_No  88
  let $Output = rtrim($Proc_Emplid, ' ') || ',' || $Proc_Empl_Rcd_No ||
                ',"' || rtrim($Proc_Name, ' ') || '"'

end-procedure Print-Empl-Id

!***********************************************************************
!FIND-FUNDING-LEVEL-BY-POSN                                            *
!***********************************************************************

begin-procedure Find-Funding-Level-by-Posn

  do Initialize-Where-Clause

  let $Fund_Level = 'PN'
  let $Level_Indc = 'P'
  let $Bud_Where4 = 'AND DB.POSITION_NBR = ''' || $Proc_Position_Nbr || ''''

  do Get-Dept-Budget-Data

  if $Fund_Found = 'N' and $Proc_Posn_Pool_ID <> ''
     let $Fund_Level = 'PP'
     let $Level_Indc = 'O'
     do Initialize-Where-Clause
     let $Bud_Where1 = 'AND DB.POSITION_POOL_ID = ''' || $Proc_Posn_Pool_ID || ''''

     do Get-Dept-Budget-Data
  end-if

  if $Fund_Found = 'N'
     let $Fund_Level = 'DP'
     let $Level_Indc = 'D'

     do Initialize-Where-Clause
     do Get-Dept-Budget-Data
  end-if

end-procedure Find-Funding-Level-by-Posn


!***********************************************************************
!FIND-FUNDING-LEVEL-BY-APPT                                            *
!***********************************************************************

begin-procedure Find-Funding-Level-by-Appt

  if $Fund_Sum_Rpt_Opt = 'E'

     let $Fund_Level = 'JE'
     do Get-Job-Earn-Tbl

     if $Fund_Found = 'N' and RTRIM($Proc_Acct_Cd, ' ')  <> ''
        let $Fund_Level = 'JD'
        let $Fund_Found = 'Y'
        print $Fund_Level             (  ,62)
        print $Proc_Acct_Cd           (  ,70)
        if $OutputCSV = 'Y'
           let $OutputF = $Output || ',' || $Fund_Level || ',' ||
                          rtrim($Proc_Acct_Cd, ' ')
           do Write-To-CSV
        end-if
     end-if
  end-if

  do Initialize-Where-Clause

  if $Fund_Found = 'N'
     let $Fund_Level = 'AP'
     let $Level_Indc = 'A'
     let $Bud_Where5 = 'AND DB.EMPLID = ''' || $Proc_EmplID  || ''''
     let $Bud_Where6 = 'AND DB.EMPL_RCD = '

! #ifdef INFORMIX
!      let $Bud_Where6 = 'AND DB.EMPL_RCDN = '
! #else
!      let $Bud_Where6 = 'AND DB.EMPL_RCD = '
! #endif

     concat #Proc_Empl_Rcd_No with $Bud_Where6

     do Get-Dept-Budget-Data
  end-if

  if $Fund_Found = 'N'

     do Get-Posn-Mgmt-Indc

     if $Posn-Mgmt = 'N'

        let $Fund_Level = 'JC'
        let $Level_Indc = 'J'
        do Initialize-Where-Clause
        let $Bud_Where2 = 'AND DB.SETID_JOBCODE ''' || $Proc_SetID_Jobcode || ''''
        let $Bud_Where3 = 'AND DB.JOBCODE = ''' || $Proc_Jobcode || ''''

        do Get-Dept-Budget-Data

        if $Fund_Found = 'N'
           let $Fund_Level = 'DP'
           let $Level_Indc = 'D'

           do Initialize-Where-Clause
           do Get-Dept-Budget-Data
        end-if

     else

        let $Fund_Level = 'PN'
        let $Level_Indc = 'P'
        do Initialize-Where-Clause
        let $Bud_Where4 = 'AND DB.POSITION_NBR = ''' || $Proc_Position_Nbr || ''''

        do Get-Dept-Budget-Data

        if $Fund_Found = 'N'

           do Get-Posn-Pool-ID

           let $Fund_Level = 'PP'
           let $Level_Indc = 'O'
           do Initialize-Where-Clause
           let $Bud_Where1 = 'AND DB.POSITION_POOL_ID = ''' || $Proc_Posn_Pool_ID || ''''

           do Get-Dept-Budget-Data
        end-if

        if $Fund_Found = 'N'
           let $Fund_Level = 'DP'
           let $Level_Indc = 'D'

           do Initialize-Where-Clause
           do Get-Dept-Budget-Data
        end-if
     end-if
  end-if

end-procedure Find-Funding-Level-by-Appt

!***********************************************************************
!INITIALIZE-WHERE-CLAUSE                                               *
!***********************************************************************
begin-procedure Initialize-Where-Clause

  let $Bud_Where1 = 'AND (DB.POSITION_POOL_ID = '''' OR DB.POSITION_POOL_ID = '' '') '
  let $Bud_Where2 = 'AND (DB.SETID_JOBCODE = '''' OR DB.SETID_JOBCODE = '' '') '
  let $Bud_Where3 = 'AND (DB.JOBCODE = '''' OR DB.JOBCODE = '' '') '
  let $Bud_Where4 = 'AND (DB.POSITION_NBR = '''' OR DB.POSITION_NBR = '' '') '
  let $Bud_Where5 = 'AND (DB.EMPLID = '''' OR DB.EMPLID = '' '') '
  let $Bud_Where6 = 'AND DB.EMPL_RCD = 0'

! #ifdef INFORMIX
!   let $Bud_Where6 = 'AND DB.EMPL_RCDN = 0'
! #else
!   let $Bud_Where6 = 'AND DB.EMPL_RCD = 0'
! #endif

end-procedure Initialize-Where-Clause

!***********************************************************************
!GET-DEPT-BUDGET-DATA                                                  *
!***********************************************************************

begin-procedure Get-Dept-Budget-Data

  let $err-statement1 = 'BUD011.SQR, GET-DEPT-BUDGET-DATA'            !F-LPARKER-125 (CAMI)
  let $err-statement2 = ''
  let $First_Acct = 'Y'

begin-SELECT On-Error=Error-Display

[$Sec_Key1] &DB.Key1=char
[$Sec_Key2] &DB.Key2=char
[$Sec_Key3] &DB.Key3=char
[$Sec_Key4] &DB.Key4=char
DB.ACCT_CD
DB.BUDGET_SEQ
DB.BUDGET_AMT
DB.DIST_PCT
DB.FUNDING_END_DT

  let #Budget_Seq     = &DB.BUDGET_SEQ
  let #Budget_Amt     = &DB.BUDGET_AMT
  let #Dist_Pct       = &DB.DIST_PCT

  if isnull(rtrim(&DB.FUNDING_END_DT,' '))
     let $Date_Out = ''
  else
     do Format-DateTime (&DB.FUNDING_END_DT, $Date_Out, {DEFDATE}, '', '')
  end-if

  if $First_Acct = 'Y'
     let $First_Acct = 'N'

     print $Fund_Level        (  ,62)
     print &DB.ACCT_CD        (  ,70)
  else
     print &DB.ACCT_CD        (+1,70)
  end-if

  let $Combine_Key = ''
  Evaluate $Fund_Sum_Rpt_Opt

     when = 'E'
        let $DB.ERNCD          = RTRIM (&DB.Key1, ' ')
        let $Combine_Key       = $DB.ErnCd
        break

     when = 'D'
        let $DB.PLAN_TYPE      = RTRIM (&DB.Key1, ' ')
        let $DB.BENEFIT_PLAN   = RTRIM (&DB.Key2, ' ')
        let $DB.DEDCD          = RTRIM (&DB.Key3, ' ')
        let $DB.DED_CLASS      = RTRIM (&DB.Key4, ' ')

        if $DB.Plan_Type       <> '' or
           $DB.Benefit_Plan    <> '' or
           $DB.DedCd           <> '' or
           $DB.Ded_Class       <> ''

           if $DB.Plan_Type = ''
              let $DB.Plan_Type = ' '
           end-if

           if $DB.Benefit_Plan = ''
              let $DB.Benefit_Plan = ' '
           end-if

           if $DB.DedCd = ''
              let $DB.DedCd = ' '
           end-if

           if $DB.Ded_Class = ''
              let $DB.Ded_Class = ' '
           end-if

           let $Combine_Key = $DB.Plan_Type || '/' || $DB.Benefit_Plan || '/' ||
                              $DB.DedCd || '/' || $DB.Ded_Class
        end-if
        break

     when = 'T'
        let $DB.STATE          = RTRIM (&DB.Key1, ' ')
        let $DB.LOCALITY       = RTRIM (&DB.Key2, ' ')
        let $DB.TAX_CLASS      = RTRIM (&DB.Key3, ' ')

        if $DB.State           <> '' or
           $DB.Locality        <> '' or
           $DB.Tax_Class       <> ''

           if $DB.State = ''
              let $DB.State = ' '
           end-if

           if $DB.Locality = ''
              let $DB.Locality = ' '
           end-if

           if $DB.Tax_Class = ''
              let $DB.Tax_Class = ' '
           end-if

           let $Combine_Key = $DB.State || '/' || $DB.Locality || '/' ||
                              $DB.Tax_Class
        end-if
        break

     when = 'C'
        let $DB.PROVINCE       = RTRIM (&DB.Key1, ' ')
        let $DB.TAX_CLASS_CAN  = RTRIM (&DB.Key2, ' ')

        if $DB.Province        <> '' or
           $DB.Tax_Class_Can   <> ''

           if $DB.Province = ''
              let $DB.Province = ' '
           end-if

           if $DB.Tax_Class_Can = ''
              let $DB.Tax_Class_Can = ' '
           end-if

           let $Combine_Key = $DB.Province || '/' || $DB.Tax_Class_Can
        end-if
        break

     when-other
  end-evaluate

  print $Combine_Key          (  , 97)
  print #Budget_Seq           (  ,118) edit 99
  print #Budget_Amt           (  ,124) edit B99999999.99
  print #Dist_Pct             (  ,138) edit B999.999
  print $Date_Out             (  ,150)
  let $Fund_Found = 'Y'

  if $OutputCSV = 'Y'
     move #Budget_Seq to $Budget_Seq  88
     move #Budget_Amt to $Budget_Amt  B99999999.99
     move #Dist_Pct   to $Dist_Pct    B999.999
     let $OutputF = $Output || ',' || $Fund_Level || ',' ||
                    rtrim(&DB.ACCT_CD, ' ') || ',' || $Combine_Key ||
                    ',' || $Budget_Seq || ',' || $Budget_Amt || ',' ||
                    $Dist_Pct || ',' || $Date_Out
     if $Fund_Sum_Rpt_Opt = 'E' and
           $Fund_Sum_Rpt_Type = 'P' and
           $Prev_Position_Nbr <> $Proc_Position_Nbr
        let $OutputF = $OutputF || ',' || $FTE
        move $Proc_Position_Nbr to $Prev_Position_Nbr
     end-if
     do Write-To-CSV
  end-if

FROM [$Sel_Record]
WHERE DB.SETID         = $SetID
  AND DB.DEPTID        = $DeptID
  AND DB.FISCAL_YEAR   = #FiscalYear
[$Bud_Where1]
[$Bud_Where2]
[$Bud_Where3]
[$Bud_Where4]
[$Bud_Where5]
[$Bud_Where6]
  AND DB.EFFDT         = (SELECT MAX(DB1.EFFDT)
                            FROM PS_DEPT_BUDGET DB1
                           WHERE DB1.SETID             = DB.SETID
                             AND DB1.DEPTID            = DB.DEPTID
                             AND DB1.FISCAL_YEAR       = DB.FISCAL_YEAR
                             AND DB1.POSITION_POOL_ID  = DB.POSITION_POOL_ID
                             AND DB1.SETID_JOBCODE     = DB.SETID_JOBCODE
                             AND DB1.JOBCODE           = DB.JOBCODE
                             AND DB1.POSITION_NBR      = DB.POSITION_NBR
                             AND DB1.EMPLID            = DB.EMPLID
                             AND DB1.EMPL_RCD         = DB.EMPL_RCD
                             AND DB1.BUDGET_LEVEL_INDC = $Level_Indc
                             AND DB1.EFFDT            <= $AsOfDate)
  AND DB.EFFSEQ         = (SELECT MAX(DB3.EFFSEQ)                   !HPRET
                            FROM PS_DEPT_BUDGET DB3                     !HPRET
                           WHERE DB3.SETID             = DB.SETID         !HPRET
                             AND DB3.DEPTID            = DB.DEPTID            !HPRET
                             AND DB3.FISCAL_YEAR       = DB.FISCAL_YEAR       !HPRET
                             AND DB3.POSITION_POOL_ID  = DB.POSITION_POOL_ID  !HPRET
                             AND DB3.SETID_JOBCODE     = DB.SETID_JOBCODE     !HPRET
                             AND DB3.JOBCODE           = DB.JOBCODE           !HPRET
                             AND DB3.POSITION_NBR      = DB.POSITION_NBR      !HPRET
                             AND DB3.EMPLID            = DB.EMPLID            !HPRET
                             AND DB3.EMPL_RCD         = DB.EMPL_RCD           !HPRET
                             AND DB3.BUDGET_LEVEL_INDC = $Level_Indc          !HPRET
                             AND DB3.EFFDT             = DB.EFFDT)            !HPRET
  AND EXISTS (SELECT 'X'
                FROM PS_DEPT_BUDGET DB2
               WHERE DB2.SETID            = DB.SETID
                 AND DB2.DEPTID           = DB.DEPTID
                 AND DB2.FISCAL_YEAR      = DB.FISCAL_YEAR
                 AND DB2.POSITION_POOL_ID = DB.POSITION_POOL_ID
                 AND DB2.SETID_JOBCODE    = DB.SETID_JOBCODE
                 AND DB2.JOBCODE          = DB.JOBCODE
                 AND DB2.POSITION_NBR     = DB.POSITION_NBR
                 AND DB2.EMPLID           = DB.EMPLID
                 AND DB2.EMPL_RCD        = DB.EMPL_RCD
                 AND DB2.EFFDT            = DB.EFFDT
                 AND DB2.EFFSEQ           = DB.EFFSEQ                         !HPRET
                 AND DB2.EFF_STATUS       = 'A')
[$Order_By]
end-SELECT

end-procedure Get-Dept-Budget-Data

!***********************************************************************
!CALC-FTE-BY-POSN                                                      *
!***********************************************************************
begin-procedure Calc-FTE-by-Posn

  let $err-statement1 = 'BUD011.SQR, CALC-FTE-BY-POSN'                !F-LPARKER-125 (CAMI)
  let $err-statement2 = ''

begin-SELECT On-Error=Error-Display

SUM(JOB1.FTE)   &FTE

  let #FTE = &FTE

FROM PS_JOB JOB1
WHERE JOB1.BUSINESS_UNIT  = $Proc_Business_Unit
  AND JOB1.POSITION_NBR = $Proc_Position_Nbr
  AND JOB1.ADDS_TO_FTE_ACTUAL = 'Y'
  AND JOB1.EMPL_STATUS IN ('A','L','P','S','W')
  AND JOB1.EFFDT =
      (SELECT MAX(JOB1A.EFFDT)
       FROM PS_JOB JOB1A
       WHERE JOB1A.EMPLID    = JOB1.EMPLID
         AND JOB1A.EMPL_RCD = JOB1.EMPL_RCD
         AND JOB1A.EFFDT    <= $AsOfDate)
  AND JOB1.EFFSEQ =
      (SELECT MAX(JOB1B.EFFSEQ)
       FROM PS_JOB JOB1B
       WHERE JOB1B.EMPLID    = JOB1.EMPLID
         AND JOB1B.EMPL_RCD = JOB1.EMPL_RCD
         AND JOB1B.EFFDT     = JOB1.EFFDT)
end-SELECT

end-procedure Calc-FTE-by-Posn

!***********************************************************************
!GET-JOB-EARN-TBL                                                      *
!***********************************************************************
begin-procedure Get-Job-Earn-Tbl

  let $err-statement1 = 'BUD011.SQR, GET-JOB-EARN-TBL'                !F-LPARKER-125 (CAMI)
  let $err-statement2 = ''
  let $First_Acct = 'Y'

begin-SELECT On-Error=Error-Display

JE.ERNCD
JE.ACCT_CD

  if RTRIM (&JE.ACCT_CD, ' ') <> ''
     let $Fund_Found = 'Y'
     if $First_Acct = 'Y'
        let $First_Acct = 'N'

        print $Fund_Level       (  ,62)
        print &JE.ACCT_CD       (  ,70)
        print &JE.ERNCD         (  ,97)
     else
        print &JE.ACCT_CD       (+1,70)
        print &JE.ERNCD         (  ,97)
     end-if
     if $OutputCSV = 'Y'
        let $OutputF = $Output || ',' || $Fund_Level || ',' ||
                       rtrim(&JE.ACCT_CD, ' ') || ',' || &JE.ERNCD
        do Write-To-CSV
     end-if
  end-if

FROM PS_JOB_EARNS_DIST JE
WHERE JE.EMPLID      = $Proc_Emplid
  AND JE.EMPL_RCD   = #Proc_Empl_Rcd_No
  AND JE.EFFDT       = $Proc_Effdt
  AND JE.EFFSEQ      = #Proc_Eff_Seq
end-SELECT

end-procedure Get-Job-Earn-Tbl

!***********************************************************************
!GET-POSN-MGMT-INDC                                                    *
!***********************************************************************
begin-procedure Get-Posn-Mgmt-Indc

  let $err-statement1 = 'BUD011.SQR, GET-POSN-MGMT-INDC'              !F-LPARKER-125 (CAMI)
  let $err-statement2 = ''

begin-SELECT On-Error=Error-Display

JT.POSN_MGMT_INDC

  let $Posn_Mgmt = &JT.POSN_MGMT_INDC

FROM PS_JOBCODE_TBL JT
WHERE JT.SETID      =  $Proc_SetID_Jobcode
  AND JT.JOBCODE    = $Proc_Jobcode
  AND JT.EFFDT      = (SELECT MAX(JT1.EFFDT)
                         FROM PS_JOBCODE_TBL JT1
                        WHERE JT1.SETID   = JT.SETID
                          AND JT1.JOBCODE = JT.JOBCODE
                          AND JT1.EFFDT  <= $Proc_Effdt)
  AND JT.EFF_STATUS = 'A'
end-SELECT

end-procedure Get-Posn-Mgmt-Indc

!***********************************************************************
!GET-POSN-POOL-ID                                                      *
!***********************************************************************
begin-procedure Get-Posn-Pool-ID

  let $err-statement1 = 'BUD011.SQR, GET-POSN-POOL-ID'                !F-LPARKER-125 (CAMI)
  let $err-statement2 = ''

begin-SELECT On-Error=Error-Display

POSN_DATA.POSITION_POOL_ID

   let $Proc_Posn_Pool_ID = &POSN_DATA.POSITION_POOL_ID

FROM PS_POSITION_DATA POSN_DATA
WHERE POSN_DATA.POSITION_NBR  = $Proc_Position_Nbr
  AND POSN_DATA.EFFDT         = (SELECT MAX(POSN_DATA1.EFFDT)
                                   FROM PS_POSITION_DATA POSN_DATA1
                                  WHERE POSN_DATA1.POSITION_NBR = POSN_DATA.POSITION_NBR
                                    AND POSN_DATA1.EFFDT       <= $Proc_Effdt)
end-SELECT

end-procedure Get-Posn-Pool-ID

!***********************************************************************
!Write-To-CSV                                                          *
!***********************************************************************
begin-procedure Write-To-CSV

  let $OutputF = rtrim($OutputF, ',')
  Write 1 from $OutputF status=#FileStatus
  if #FileStatus <> 0
     display ''
     display 'Error in writing CSV file.'
     STOP
  else
     let $OutputF = ''
  end-if

end-procedure Write-To-CSV

!***********************************************************************
! WRAPUP                                                               *
! This paragraph ends the report process and updates the status of the *
! job in the process scheduler.                                        *
!***********************************************************************
begin-procedure WRAPUP

  do DEL-RUNCTL
  do STDAPI-TERM

end-procedure WRAPUP


!**********************************************************************
! DEL-RUNCTL
! This paragraph deletes the Run Controls from PS_RC_BUD011
!**********************************************************************
begin-procedure DEL-RUNCTL

  let $err-statement1 = 'BUD011, DEL-RUNCTL, '||$BUD011_DEL_ERROR     !F-LPARKER-125 (CAMI)
  let $err-statement2 = $BUD011_KEY_VALUES||' TABLE PS_RC_BUD011' ||  !F-LPARKER-125 (CAMI)
                        ', OPRID ' || $PRCS_OPRID ||
                        ', RUN_CNTL_ID ' || $PRCS_RUN_CNTL_ID


begin-SQL On-Error=Error-Display
  DELETE FROM PS_RC_BUD011
         WHERE OPRID = $PRCS_OPRID
           AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;
end-SQL

  do Commit-Transaction

end-procedure DEL-RUNCTL


!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'stdapi.sqc'    !Update Process API
#Include 'btrnctl2.sqc'  !Get run control parameters.
#Include 'btgetva2.sqc'  !Formats run control parameters.
#Include 'datemath.sqc'
#Include 'getdptnm.sqc'
#Include 'stderror.sqc'  !Routine for error display
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language       !F-LPARKER-125 (CAMI)
