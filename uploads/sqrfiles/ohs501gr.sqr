!*********************************************
!  OHS501GR :  Unfallanzeige in Crystal
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/09/15:15:29:18                                 
!       $Release:  HR9                                                 
!      $Revision:  102                                                 
!                                                                      *
!This program will write to a temporary table which can be used to     *
!generate a Crystal report. It is based on OHS501GR                    *
!                                                                      *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#define LANGUAGE_REPORT 'GER'
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

 

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Clean-Table
  do Process-Main
   Show 'End: OHS501GR.sqr'
  do Reset
  do Stdapi-Term
end-report

!-------------------------------------------------------
begin-heading 4
  #Include 'stdhdg01.sqc'
end-heading

!-------------------------------------------------------
begin-procedure Init-Report
!-------------------------------------------------------

  move 'OHS501GR' to $ReportID
  move 'Unfallanzeige' to $ReportTitle
    Show 'Start: OHS501GR.sqr' 
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
    ! Get the BG Address
      do Get-BG-Data
  end-if

end-procedure

!-------------------------------------------------------
begin-procedure Get-Values
!-------------------------------------------------------
  Move &RUN_CNTL_OHS.INCIDENT_NBR       to $Report_Incident_Nbr
  Move &RUN_CNTL_OHS.ACCIDENT_INS       to $BGName
  Move &RUN_CNTL_OHS.PHONE              to $PhoneNumber
  Move &RUN_CNTL_OHS.EMAIL_ADDR         to $Email-Addr
end-procedure

!-------------------------------------------------------
! Clear out the temporary table
!-------------------------------------------------------
begin-procedure Clean-Table

begin-sql on-error=sql-error
DELETE FROM PS_OHS001GER_TMP1
WHERE OPRID = $prcs_oprid
AND   RUN_CNTL_ID = $prcs_run_cntl_id
end-sql

begin-sql on-error=sql-error
DELETE FROM PS_OHS001GER_TMP2
WHERE OPRID = $prcs_oprid
AND   RUN_CNTL_ID = $prcs_run_cntl_id
end-sql

end-procedure

!-------------------------------------------------------
begin-procedure Process-Main
!-------------------------------------------------------
#ifdef debugx
  show 'Procedure Process-Main'
  show 'AsofToday: ' $AsOfToday 
#end-if

 if rtrim($AsOfToday, ' ') <> ''
  do ConvertToComponents($AsOfToday,$D_yy,$D_mm,$D_dd)
  let $AsOfDate1 = $D_dd || '.' || $D_mm || '.' || $D_yy
 else
  let $AsOfDate1 = ' '
 end-if

  let $in_DateTime = &RUN_CNTL_OHS.START_TIME
  do Convert_Time_24hr ($in_DateTime, $start_time)
  let $start_time = substr($start_time, 1, 5)

  let $in_DateTime = &RUN_CNTL_OHS.END_TIME
  do Convert_Time_24hr ($in_DateTime, $End_time)
  let $End_time = substr($End_time, 1, 5)

  let #cnt = 0
  do Get-Injury-Data
  If #cnt > 0 
     Show '# of Rows added to PS_OHS001GER_TMP1 temp table: ' #cnt
     Show 'Please run the Crystal Report now'
   else
     Show ' No data was selected for this report '
   end-if
   
end-procedure

!-------------------------------------------------------
!Get Injury Data
!-------------------------------------------------------
begin-procedure Get-Injury-Data
#ifdef debugx
  Show 'Procedure Get-Injury-Data'
#end-if

begin-SELECT

INJ.EMPLID
  move &INJ.EMPLID to $Emplid
 
  
INJ.EMPL_RCD
  move &INJ.EMPL_RCD to #Inj_Empl_Rcd_Nbr
  do SearchSetID
  Do Get-EE-Data
INJ.NON_EMPLOYEE_ID
  move &INJ.NON_EMPLOYEE_ID to $NonEmplid
INJ.INCIDENT_NBR
  move &INJ.INCIDENT_NBR to $Inc_Nbr
  Do Get-Incident-Data
INJ.PAY_UNTIL_DT_GER
  
  let $12Paycon = ' '
  if rtrim(&INJ.PAY_UNTIL_DT_GER, ' ') <> ''
     do Convert-To-DTU-Date(&INC.INCIDENT_DT, $date1)
     do Convert-To-DTU-Date(&INJ.PAY_UNTIL_DT_GER, $date2)
     do dtu-diff-days($date1, $date2, #diff_days)
     if #diff_days > 0
        let #sum_weeks = #diff_days / 7
        let #sum_weeks1   =ROUND(#sum_weeks,0)
        let $12Paycon = to_char(#sum_weeks1)
     end-if
  end-if
INJ.RETURN_DT
{DateTimeOut-Prefix}INJ.RETURN_TM{DateTimeOut-Suffix} &INJ.RETURN_TM
  do Format-DateTime(&INJ.RETURN_DT, $20work, {DEFDATE}, '', '')
  do Convert_Time_24hr (&INJ.RETURN_TM, $return_time)
  

  if rtrim(&INJ.RETURN_DT, ' ') = ''
     move 'X' to $20nein
     move ' ' to $20work
     move ' ' to $return_time
  else
     let $20nein = ' '
     do ConvertToComponents(&INJ.RETURN_DT,$RTN_yy,$RTN_mm,$RTN_dd)
     let $20work = $RTN_dd || '.' || $RTN_mm || '.' || $RTN_yy
     let $return_time = substr($return_time, 1, 5)
  end-if

  do Get-Body-Parts

  do Get-Doctor-Data

  let $CareType = 'A'
  do Get-Doctor-Hos-Data
    move $Phys  to $23Name
    move $Add1  to $23Add1
    move $Zip   to $23Zip
    move $City  to $23City

  if $DataExists = 'N'
    let $CareType = 'K'
    do Get-Doctor-Hos-Data
    move $Hosp  to $23Name
    move $Add1  to $23Add1
    move $Zip   to $23Zip
    move $City  to $23City
  end-if

INJ.WRK_STOP_CD_GER
INJ.WRK_STOP_DT_GER
 let $28descr = ' '
 let $28Nein = ' '
 
 let $INJ.WRK_STOP_CD_GER = rtrim(&INJ.WRK_STOP_CD_GER, ' ')
 evaluate $INJ.WRK_STOP_CD_GER
 when = 'S'
    move 'X' to $28descr
    let $28date = ' '
 when = 'N'
    move 'X' to $28Nein
    let $28date = ' '
 when-other
    if rtrim(&INJ.WRK_STOP_DT_GER, ' ') <> ''
       do ConvertToComponents(&INJ.WRK_STOP_DT_GER,$WRK_yy,$WRK_mm,$WRK_dd)
       let $28date = $WRK_dd || '.' || $WRK_mm || '.' || $WRK_yy
    else
       let $28date = ' ' 
    end-if

 end-evaluate
INJ.COMMENTS
  move &INJ.COMMENTS to $37descr
  let $17owner = ' '
  let $17partner = ' '
  let $17Relat = ' '
  let $17Spouse = ' '
INJ.OWNR_PRTNR_SW_GER
   if &INJ.OWNR_PRTNR_SW_GER = 'Y'
   move 'X' to $17owner
   end-if
INJ.PARTNER_SW_GER
   if &INJ.PARTNER_SW_GER = 'Y'
      move 'X' to $17partner
   end-if
INJ.RELATION_SW_GER
   if &INJ.RELATION_SW_GER = 'Y'
      move 'X' to $17Relat
   end-if
INJ.RELATIONSHIP
   
   if &INJ.RELATIONSHIP = 'SP'
   move 'X' to $17Spouse
   end-if
   
INJ.FATALITY_SW
  let $24Nein = ' '
  let $24Death = ' '
  if rtrim (&INJ.FATALITY_SW, ' ') = 'N' or rtrim (&INJ.FATALITY_SW, ' ') = ''
     Move 'X' to $24Nein
  else
     ! SG ADD TEST ON INJ.FATALITY_SW
     if rtrim (&INJ.FATALITY_SW, ' ') = 'Y'
        Move 'X' to $24Death
     end-if
  end-if

INJ.SI_PROVIDER_GER
  
 do Get-Injury-Nature

 do Write-Data

FROM PS_INJURY_ILL INJ

WHERE INJ.REPORTABLE_CASE = 'Y'
AND INJ.INCIDENT_NBR = $Report_Incident_Nbr
AND INJ.EMPLID > ' '
end-SELECT

end-procedure

!-------------------------------------------------------
!Get Injury Nature
!-------------------------------------------------------
begin-procedure Get-Injury-Nature
#ifdef debugx
  Show 'Procedure Get-Injury-Nature'
#end-if

let #Injury-Nature = 0
begin-SELECT
NATR.DESCR100
  move &NATR.DESCR100 to $22Nat
FROM  PS_INJURY_ILL_NOI NOI, PS_INJURY_NATR_TBL NATR
WHERE NOI.INCIDENT_NBR = $Report_Incident_Nbr
AND   NOI.EMPLID = $Emplid
AND   NOI.EMPL_RCD = #Inj_Empl_Rcd_Nbr
AND   NOI.NON_EMPLOYEE_ID = $NonEmplid
AND   NOI.INJURY_NATURE_CD = NATR.INJURY_NATURE_CD
AND   NATR.SETID = $REG_SetID
AND   NATR.EFFDT = (SELECT MAX(NATR1.EFFDT)
                   FROM PS_INJURY_NATR_TBL NATR1
                   WHERE NATR1.SETID = NATR.SETID
                   AND NATR1.INJURY_NATURE_CD = NATR.INJURY_NATURE_CD
                   AND NATR1.EFFDT <= $AsOfToday)
AND   NOI.PRIMARY_INJURY = 'Y'
end-SELECT
end-procedure

!-------------------------------------------------------
!Get Incident Data
!-------------------------------------------------------
begin-procedure Get-Incident-Data
#ifdef debugx
  Show 'Procedure Get-Incident-Data'
#end-if
begin-SELECT

INC.REPORTED_BY_EMPL
INC.REPORTED_BY_NONEMP
  if (rtrim($Emplid, ' ') = rtrim(&INC.REPORTED_BY_EMPL, ' ') and rtrim($Emplid, ' ') <> '')or
     (rtrim($NonEmplid, ' ') = rtrim(&INC.REPORTED_BY_NONEMP, ' ') and rtrim($NonEmplid, ' ') <> '') 
     let $same_Person = 'X'
  else
     let $same_Person = ' '
  end-if
INC.INCIDENT_DT
  move &INC.INCIDENT_DT to $Inc_Incident_Date
  
  if rtrim(&INC.INCIDENT_DT, ' ') <> ''
  do ConvertToComponents(&INC.INCIDENT_DT,$INC_yy,$INC_mm,$INC_dd)
   let $27incdate = $INC_dd || '.' || $INC_mm || '.' || $INC_yy
  else
   let $27incdate = ' ' 
  end-if

{DateTimeOut-Prefix}INC.INCIDENT_TIME{DateTimeOut-Suffix} &INC.INCIDENT_TIME

 
  let $in_DateTime = &INC.INCIDENT_TIME
  do Convert_Time_24hr ($in_DateTime, $Incident_time)
  let $Incident_time = substr($Incident_time, 1, 5)
INC.LOCATION_NAME
  move &INC.LOCATION_NAME to $31Loc
INC.ADDRESS1
  move &INC.ADDRESS1 to $31Add1
INC.CITY
  move &INC.CITY to $31City

  do Get-Future-Prevent-Data
  do Get-Incident-Witness

FROM PS_INCIDENT_DATA INC
WHERE INC.INCIDENT_NBR = $Inc_Nbr

end-SELECT
#ifdef debugx
  Show 'End Procedure Get-Incident-Data'
#end-if
end-procedure

!-------------------------------------------------------
!Get Employee Data
!-------------------------------------------------------
begin-procedure Get-EE-Data
#ifdef debugx
  Show 'Procedure Get-EE-Data'
#end-if

  do Get-Emplid-Data
  
  move $Full_Name to $5Name
  move $FirstName to $FirstNM1
  move $LastName  to $LastNM1
  move $Street    to $7Add1
  move $Postal    to $7Zip
  move $City      to $7City

 ! Sex
  let $Sex = rtrim($Sex,' ')
  evaluate $Sex
  when = 'F'
     move '2' to $9sex
  when = 'M'
     move '1' to $9sex
  when-other
     move '9' to $9sex
  end-evaluate

 ! Birthdate
 if $Birthdate <> ''
   do ConvertToComponents($Birthdate,$BD_yy,$BD_mm,$BD_dd)
   let $6Birth = $BD_dd || '.' || $BD_mm || '.' || $BD_yy
 else
   move '' to $6Birth
 end-if

 ! Nationality
   move $NatDescr to $10Nat

  do Get-Job-Related-Data

end-procedure

!-------------------------------------------------------
!Get Job Related Data
!-------------------------------------------------------
begin-procedure Get-Job-Related-Data
#ifdef debugx
  Show 'Procedure Get-Job-Related-Data'
#end-if
begin-SELECT
J.EMPLID
J.EMPL_RCD
  move &J.EMPL_RCD to #Emplrec
J.EFFDT
  move &J.EFFDT to $Job_Effdt
J.EFFSEQ
J.BUSINESS_UNIT
  LET $BU = RTRIM(&J.BUSINESS_UNIT,' ')
J.SETID_DEPT
  let $setID_Dept = &J.SETID_DEPT
J.DEPTID
  let $DeptID = rtrim (&J.DEPTID, '')
  if $DeptID <> ''
    ! Get Mitgliedsnummer
    do Get-Mit-Nbr-Data
    move $AccNum to $1Mit
    move $AccIns to $Accidentins
    do Get-Department-Name
    Move $DeptName to $14Dept
  end-if
J.JOBCODE
J.SETID_JOBCODE
   !show &J.JOBCODE
  let $JobCode = rtrim (&J.JOBCODE, '')
  if $JobCode <> ''
    let $SETID = &J.SETID_JOBCODE
    do Get-Job-Title
    move $JobTitle to $12Jobt
  end-if
J.LOCATION
  move &J.LOCATION to $Loc
  let $Location = rtrim (&J.LOCATION, '')
  if $Location <> ''
    do Get-Location-Name
    move $LocationName to $14Locname
  end-if
J.JOB_ENTRY_DT
#ifdef debugx
  Show 'Job Entry Date: ' &J.Job_entry_dt
#end-if
  do Format-DateTime(&J.JOB_ENTRY_DT, $13Jobentry, {DEFDATE}, '', '')
  if rtrim(&J.JOB_ENTRY_DT, ' ') <> ''
   do ConvertToComponents(&J.JOB_ENTRY_DT,$JE_yy,$JE_mm,$JE_dd)
   let $13Jobentry = $JE_dd || '.' || $JE_mm || '.' || $JE_yy
  else
   let $13Jobentry = ' '
  end-if

J.COMPANY
  move &J.COMPANY to $Company
  do Get-Health-Ins-Data
  move $DescrIns to $18Siprov
  move $City to $18City
  move $postal to $18postal

  move &J.COMPANY to $Company
  do Get-Company-Data
J.EMPL_CTG
  let $15Cat = ' '
  if &J.EMPL_CTG = '16'
     move 'X' to $15Cat
  end-if
J.EMPL_CLASS
  let $Empl_Class = rtrim(&J.EMPL_CLASS, ' ')
  if $Empl_Class = 'T' or $Empl_Class = 'P'
     move 'X' to $Empl_Class
  end-if
FROM PS_JOB J
WHERE   J.EMPLID = $Emplid
AND     J.EMPL_RCD = #Inj_Empl_Rcd_Nbr
AND     J.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_JOB J1
                   WHERE J1.EMPLID = J.EMPLID
                   AND J1.EMPL_RCD = J.EMPL_RCD)
AND     J.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM PS_JOB J12
                   WHERE J12.EMPLID = J.EMPLID
                   AND J12.EMPL_RCD = J.EMPL_RCD
                   AND J12.EFFDT = J.EFFDT)
end-SELECT
#ifdef debugx
  Show 'End Procedure Get-Job-Related-Data'
#end-if
end-procedure


!-------------------------------------------------------
!Get Body Parts
!-------------------------------------------------------
begin-procedure Get-Body-Parts
#ifdef debugx
  Show 'Procedure Get-Body-Parts'
#end-if
begin-SELECT
BPT.DESCR100
 move &BPT.DESCR100 to $21Body

FROM PS_INJURY_ILL_BP BP, PS_BODY_PART_TBL BPT

WHERE BP.EMPLID = $Emplid
AND   BP.EMPL_RCD = #Inj_Empl_Rcd_Nbr
AND   BP.NON_EMPLOYEE_ID = $NonEmplid
AND   BP.INCIDENT_NBR = $Inc_Nbr
AND   BP.PRIMARY_INJURY = 'Y'
AND   BP.BODY_PART_CD = BPT.BODY_PART_CD
AND   BPT.SETID = $REG_SetID
AND   BPT.EFFDT = (SELECT MAX(BPT1.EFFDT)
                   FROM PS_BODY_PART_TBL BPT1
                   WHERE BPT1.SETID = BPT.SETID
                   AND BPT1.BODY_PART_CD = BPT.BODY_PART_CD
                   AND BPT1.EFFDT <= $AsOfToday)
end-SELECT
end-procedure

!-------------------------------------------------------
!Get Hospital and Doctors Address
!-------------------------------------------------------
begin-procedure Get-Doctor-Hos-Data
#ifdef debugx
  Show 'Procedure Get-Doctor-Hos-Data'
#end-if
  
    move '' to $Hosp
    move '' to $Add1
    move '' to $Zip
    move '' to $City
    move '' to $Phys
    move 'N' to $DataExists
begin-SELECT
ILH.PHYSICIAN_NAME
ILH.HOSPITAL
ILH.ADDRESS1
ILH.POSTAL
ILH.CITY
ILH.CARE_TYPE
    move &ILH.PHYSICIAN_NAME to $Phys
    move &ILH.HOSPITAL to $Hosp
    move &ILH.ADDRESS1 to $Add1
    move &ILH.POSTAL to $Zip
    move &ILH.CITY to $City
    move 'Y' to $DataExists
FROM PS_INJURY_ILL_ADDR ILH
WHERE ILH.EMPLID = $Emplid
AND   ILH.EMPL_RCD = #Inj_Empl_Rcd_Nbr
AND   ILH.INCIDENT_NBR = $Inc_Nbr
AND   ILH.CARE_TYPE = $CareType
end-SELECT
#ifdef debugx
  show 'END Get-Doctor-Hos_data'
#end-if
end-procedure

!-------------------------------------------------------
!Get Doctor Address
!-------------------------------------------------------
begin-procedure Get-Doctor-Data
#ifdef debugx
  Show 'Procedure Get-Doctor-Data'
#end-if
  
begin-SELECT
ILA.CARE_TYPE

FROM PS_INJURY_ILL_ADDR ILA

WHERE ILA.EMPLID = $Emplid
AND   ILA.EMPL_RCD = #Inj_Empl_Rcd_Nbr
AND   ILA.INCIDENT_NBR = $Inc_Nbr
AND   ILA.CARE_TYPE IN ('W','B','H','S')

end-SELECT
#ifdef debugx
show 'End Procedure Get-Doctor-data'
#end-if
end-procedure


!-------------------------------------------------------
!Get Future Preventative Action
!-------------------------------------------------------
begin-procedure Get-Future-Prevent-Data
#ifdef debugx
  Show 'Procedure Get-Future-Prevent-Data'
#end-if
begin-SELECT
ASDF.DESCR100
  move &ASDF.DESCR100 to $35Descr
FROM  PS_INC_ACTION_P_VW IAF, PS_PREVENT_ACT_GER ASDF
WHERE IAF.INCIDENT_NBR = $Inc_Nbr
AND   ASDF.PREVENT_ACT_CD_GER = IAF.PREVENT_ACT_CD_GER
AND   ASDF.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_PREVENT_ACT_GER ASDF2
                     WHERE ASDF2.PREVENT_ACT_CD_GER = ASDF.PREVENT_ACT_CD_GER
                     AND ASDF2.EFFDT <= $AsOfDate)
AND   IAF.ACTION_SEQUENCE = (SELECT MIN(ACTION_SEQUENCE)
                             FROM PS_INC_ACTION_P_VW IAF2
                             WHERE IAF2.INCIDENT_NBR = IAF.INCIDENT_NBR
                             AND IAF2.HAZARD_ID = IAF.HAZARD_ID
                             AND IAF2.INCIDENT_CAUSE = IAF.INCIDENT_CAUSE
                             AND IAF2.ACTION_SEQUENCE = IAF.ACTION_SEQUENCE)
AND   IAF.ACTION_STATUS IN ('R','P')
end-SELECT

end-procedure

!-------------------------------------------------------
!Get Incident Witness
!-------------------------------------------------------
begin-procedure Get-Incident-Witness
#ifdef debugx
  Show 'Procedure Get-Incident-Witness'
#end-if

let $EMPL_tmp = $EmplID

begin-SELECT loops=1
IW.EMPLID
IW.NON_EMPLOYEE_ID

  if rtrim(&IW.EMPLID,' ') <> ''
     move &IW.EMPLID to $EmplID
     do Get-Personal-Data
  end-if
  if rtrim(&IW.NON_EMPLOYEE_ID,' ') <> ''
     move &IW.NON_EMPLOYEE_ID to $NonEmplid
     do Get-Non-Empl-Data
  end-if
  
  let $36Name = {ps-substr}($Name || $Address || $Eurozip || $City,1,30)

FROM PS_INCIDENT_PEOPLE IW
WHERE IW.INCIDENT_NBR = $Inc_Nbr
AND IW.CONFIRM_STATEMENT = 'Y'
AND IW.INCIDENT_ROLE = 'IW'


end-SELECT

let  $EmplID = $EMPL_tmp

LET $36COnfirm = ' '
If $36Name <> ''
 move 'X' to $36COnfirm
end-if

end-procedure

!-------------------------------------------------------
!Write Data to Temp Table
!-------------------------------------------------------
Begin-Procedure Write-Data
#ifdef debugx
  Show 'Procedure Write-Data'
#end-if

!********************************************
! Initialize the variables to a space
! This way if there is no data put in, the
! table insert statement will still work
!********************************************
 if $5Name <> '' 
   let #cnt = #cnt + 1
 end-if
If $1Mit = ''
 move '   ' to $1Mit
End-if
If $FirstNM1 = ''
 move ' ' to $FirstNM1
End-if
If $LastNM1 = ''
 move ' ' to $LastNM1
End-if
If $6Birth = ''
 move ' ' to $6Birth
End-if
If $7Add1 = ''
 move ' ' to $7Add1
End-if
If $7City = ''
 move ' ' to $7City
End-if
If $7Zip = ''
 move ' ' to $7Zip
End-if
If $9Sex = ''
 move ' ' to $9Sex
End-if
If $10Nat = ''
 move ' ' to $10Nat
End-if
If $12Jobt = ''
 move ' ' to $12Jobt
End-if
If $13Jobentry = ''
 move ' ' to $13Jobentry
End-if
If $14Dept = ''
 move ' ' to $14Dept
End-if
If $14Locname = ''
 move ' ' to $14Locname
End-if
If $15Cat = ''
 move ' ' to $15Cat
End-if
If $17Relat = ''
 move ' ' to $17Relat
End-if
If $17Owner = ''
 move ' ' to $17Owner
End-if
If $17Spouse = ''
 move ' ' to $17Spouse
End-if
If $17Partner = ''
 move ' ' to $17Partner
End-if
If $18SiProv = ''
 move ' ' to $18Siprov
End-if
If $18City = ''
 move ' ' to $18City
End-if
If $12Paycon = ''
 move ' ' to $12Paycon
End-if
If $20Work = ''
 move ' ' to $20Work
End-if
If $21Body = ''
 move ' ' to $21Body
End-if
If $22Nat = ''
 move ' ' to $22Nat
End-if
If $23Name = ''
 move ' ' to $23Name
End-if
If $23Add1 = ''
 move ' ' to $23Add1
End-if
If $23Zip = ''
 move ' ' to $23Zip
End-if
If $23City = ''
 move ' ' to $23City
End-if
If $24Death = ''
 move ' ' to $24Death
End-if
If $27Incdate = ''
 move ' ' to $27Incdate
End-if
!If $27Inctime = ''
! move ' ' to $27Inctime
!End-if
If $28Descr = ''
 move ' ' to $28Descr
End-if
If $28Date = ''
 move ' ' to $28Date
End-if
If $31Loc = ''
 move ' ' to $31Loce
End-if
If $31Add1 = ''
 move ' ' to $31Add1
End-if
If $31City = ''
 move ' ' to $31City
End-if
If $35Descr = ''
 move ' ' to $35Descr
End-if
If $36Descr = ''
 move ' ' to $36Descr
End-if
If $36Confirm = ''
 move ' ' to $36Confirm
End-if
If $Codescr = ''
 move ' ' to $Codescr
End-if
If $CoAdd1 = ''
 move ' ' to $Coadd1
End-if
If $Cozip = ''
 move ' ' to $Cozip
End-if
If $Cocity = ''
 move ' ' to $Cocity
End-if

If $20Nein = ''
 move ' ' to $20Nein
End-if
If $24Nein = ''
 move ' ' to $24Nein
End-if

If $28Nein = ''
 move ' ' to $28Nein
End-if
If $37Descr = ''
 move ' ' to $37Descr
End-if
If $18Siprov = ''
 move ' ' to $18Siprov
End-if
If $bgAdd1 = ''
 move ' ' to $bgadd1
End-if
If $bgzip = ''
 move ' ' to $bgzip
End-if
If $bgcity = ''
 move ' ' to $bgcity
End-if
If $START_TIME = ''
 move ' ' to $START_TIME
end-if
If $END_TIME = ''
 move ' ' to $END_TIME
end-if

if $Empl_Class = ''
   move ' ' to $Empl_Class
end-if

If $Report_Incident_Nbr = ''
 move ' ' to $Report_Incident_Nbr
end-if

if $18postal = ''
 move ' ' to $18postal
end-if

if $Email-Addr = ''
 move ' ' to $Email-Addr
end-if

if $PhoneNumber = ''
 move ' ' to $PhoneNumber
end-if

if $same_Person = ''
 move ' ' to $same_Person
end-if

if $return_time = ''
 move ' ' to $return_time 
end-if

if $AsOfDate1 = ''
  move ' ' to $AsOfDate1
end-if
!DISPLAY 'FLOW FIRST TEMP'

Begin-SQL ON-ERROR=SQL-ERROR

INSERT INTO PS_OHS001GER_TMP1
(OPRID,
RUN_CNTL_ID,
EMPLID,
INCIDENT_NBR,
SI_ACCIDENT_NUM,
EMPL_CLASS,
FIRST_NAME,
LAST_NAME,
BIRTHDATE_GER,
ADDRESS1,
POSTAL,
CITY_FROM,
DESCR1_GER,
NATIONALITY,
DESCR2_GER,
STEP_ENTRY_GER,
DESCR4_GER,
DESCR5_GER,
EMPL_CAT2_GER,
RELATION_SW_GER,
OWNR_PRTNR_SW_GER,
PARTNER_SW_GER,
SPOUSE_GER,
DESCR2,
CITY_OTHER,
PAY_UNTIL_GER,
WRK_AFTR_ST_GER,
DESCR100,
DESCR100_GER,
PHYSICIAN_NAME,
ADDRESS1_OTHER,
POSTAL_OTHER,
CITY_PASSPORT,
FATALITY_SW,
INCIDENT_TMP_GER,
INCIDENT_TMP2_GER,
WORK_STOP_GER,
WORK_STOP2_GER,
PHONE,
EMAIL_ADDR,
POSTAL3_GER,
REPORTED_BY_EMPL,
DESCR,
DESCR3_GER
)
VALUES
($prcs_oprid,
$prcs_run_cntl_id,
$Emplid,
$Report_Incident_Nbr,
$1Mit,
$Empl_Class,
$FirstNM1,
$LastNM1,
$6Birth,
$7Add1,
$7Zip,
$7City,
$9Sex,
$10Nat,
$12Jobt,
$13Jobentry,
$14Dept,
$14Locname,
$15Cat,
$17Relat,
$17Owner,
$17Partner,
$17Spouse,
$18Siprov,
$18City,
$12Paycon,
$20Work,
$21Body,
$22Nat,
$23Name,
$23Add1,
$23Zip,
$23City,
$24Nein,
$27Incdate,
$Incident_time,
$28Descr,
$28Date,
$PhoneNumber,
$Email-Addr,
$18postal,
$same_Person,
$return_time,
$AsOfDate1
)

end-SQL

#ifdef debugx
  Show 'Procedure Get-Write-Data    OHS001GER_TMP2'
#end-if

Begin-SQL ON-ERROR=SQL-ERROR

INSERT INTO PS_OHS001GER_TMP2
(OPRID,
RUN_CNTL_ID,
EMPLID,
INCIDENT_NBR,
LOCATION_NAME,
ADDRESS2,
CITY3_GER,
DESCR6_GER,
CONFIRM_STATEMENT,
DESCR7_GER,
ADDRESS2_OTHER,
CITY4_GER,
POSTAL4_GER,
ADDRESS3,
POSTAL5_GER,
CITY5_GER,
WRK_AFTR_ST2_GER,
FATALITY_GER,
WORK_STOP3_GER,
START_TIME1,
END_TIME1,
DESCRSHORT
#ifndef INFORMIX
,COMMENTS
#endif
)

VALUES
($prcs_oprid,
$prcs_run_cntl_id,
$Emplid,
$Report_Incident_Nbr,
$31Loc,
$31Add1,
$31City,
$35Descr,
$36Confirm,
$Codescr,
$Coadd1,
$Cocity,
$cozip,
$bgadd1,
$bgzip,
$bgcity,
$20Nein,
$24Death,
$28Nein,
$START_TIME,
$END_TIME,
$BGdescr
#ifndef INFORMIX
,$37Descr
#endif
)
End-SQL

#ifdef INFORMIX
  if $37Descr <> ' '
     do Update_Long
  end-if
#endif

End-Procedure

!-------------------------------------------------------
! Update_Long - to get long field for Informix
!-------------------------------------------------------
begin-procedure UPDATE_Long
#ifdef debugx
  Show 'Procedure Update_Long'
#end-if
#ifdef INFORMIX
let $sql-statement = 'OHS501GR.SQR,Update_Long,Update,OHS001GER_TMP2'
Begin-SQL ON-ERROR=SQL-ERROR
UPDATE PS_OHS001GER_TMP2
SET  COMMENTS  = (( SELECT COMMENTS FROM PS_INJURY_ILL 
                   WHERE REPORTABLE_CASE = 'Y'
                  AND   INCIDENT_NBR = $Report_Incident_Nbr
                  AND   EMPLID = $Emplid ))
WHERE OPRID = $prcs_oprid
 AND  RUN_CNTL_ID = $prcs_run_cntl_id
 AND  EMPLID = $Emplid
END-SQL
#endif
End-Procedure

!-------------------------------------------------------
!Format Times
!-------------------------------------------------------
begin-procedure Format-Times ($timeIn, :$timeOut)
#ifdef debugx
  Show 'Procedure Format-Times'
#end-if

  extract $time-hour   from $timeIn 0 2

  extract $time-min    from $timeIn 3 2

  let #time-hour     = $time-hour


  let $timeOut   = $time-hour
  let $timeOut   = ltrim($timeOut, '0')
  if #time-hour < 10
    let $timeOut   = {ps-substr}($timeOut,1,2)
  else
    let $timeOut   = {ps-substr}($timeOut,1,2)
  end-if
  concat '.'        with $timeOut
  concat $time-min with $timeOut
  concat ' Uhr '     with $timeOut
end-procedure

!***********************************************
!Search SetID
!***********************************************
begin-procedure SearchSetID
#ifdef debugx
  Show 'Procedure SearchSetid'
#end-if
let $REG_SetID = ''
Begin-select
JSET.REG_REGION
   let $REG_SetID = &JSET.REG_REGION
from  PS_JOB JSET
where JSET.EMPLID = $emplid
and   JSET.EMPL_RCD = #Inj_Empl_Rcd_Nbr
and   JSET.EFFDT =
                    (select max(JSET2.EFFDT)
                     from  PS_JOB JSET2
                     where JSET2.EMPLID = JSET.EMPLID
                     and   JSET2.EMPL_RCD = JSET.EMPL_RCD
                     and   JSET2.EFFDT <= $Asoftoday)
and JSET.EFFSEQ =
                    (select max(JSET3.EFFSEQ)
                     from  PS_JOB JSET3
                     where JSET3.EMPLID = JSET.EMPLID
                     and   JSET3.EMPL_RCD = JSET.EMPL_RCD
                     and   JSET3.EFFDT = JSET.EFFDT)
end-select
end-procedure

!-------------------------------------------------------
#include 'ohsrnctl.sqc'  !Get run control parameter values
#include 'ohsget.sqc'    !Get values mask routines

#include 'stdapi.sqc'    !Routines to update run status
#include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'getdptnm.sqc'  !Get-Department-Name procedure
#include 'getlocnm.sqc'  !Get-Location-Name procedure
#include 'getjobtl.sqc'  !Get-Job-Title procedure
#Include 'datemath.sqc'  !Routines for date arithmetic
#include 'timemath.sqc'  !Routines for Time arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'getempad.sqc'  !Get-Employee-Address
#Include 'getempna.sqc'  !Get-Nationality
#include 'ohs003gr.sqc'  !Gets common data for the reports OHS501GR.sqr and OHS504GR.sqr
