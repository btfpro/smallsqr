!***********************************************************************
!  TAX011PA :  Pennsylvania Local Earned Income Tax Report             *
!***********************************************************************
!***********************************************************************
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/11/08:10:30:15                                 *
!       $Release:  HR9                                                 *
!    $Resolution:  872695                                              *
!                                                                      *
!***********************************************************************
#Include 'setenv.sqc'   !Set environment
#Include 'setup31.sqc'  !printer and page-size initialization
#Include 'usarpt.sqc'   !Get USA variables

begin-report
  do Init-Report
  do Stdapi-Term
end-report

!***********************************************************************
begin-procedure Init-Report

  move 'TAX011PA' to $ReportID
  move 'PA Local Earned Income Tax Report' to $ReportTitle
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialize
  do Standard-Initialization

end-procedure

!***********************************************************************
begin-procedure Initialize

  do Select-Parameters
  do Process-Run-Control

  let #Co_Txgrs_Total  = 0
  let #Co_Tax_Total    = 0
  let #P51_Txgrs_Total = 0
  let #P51_Tax_Total   = 0
  let #Wrk_Txgrs_Total = 0
  let #Wrk_Tax_Total   = 0
  let #Res_Txgrs_Total = 0
  let #Res_Tax_Total   = 0
  let #TC_Txgrs_Total  = 0
  let #TC_Tax_Total    = 0
  let #Rpt_Txgrs_Total = 0
  let #Rpt_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Process-Run-Control

  let $RptYear = edit(#RptYear, '9999')

  if $Yr_Flag = 'Y'

    let $RptPeriod         = 'Y'
    let $RptPeriod_Literal = 'YTD'
    let $AsOfMonth         = '12'
    let #AsOfMonth         = 12
    let $Period            = ' '
    let $AsOfQtr           = '4'
    let #AsOfQtr           = 4

  else

    if #AsOfQtr > 0

      let $RptPeriod         = 'Q'
      let $RptPeriod_Literal = 'QTD'
      evaluate #AsOfQtr
        when = 1
          let $AsOfMonth = '03'
          let #AsOfMonth = 3
          let $Period    = '1st Quarter'
          break
        when = 2
          let $AsOfMonth = '06'
          let #AsOfMonth = 6
          let $Period    = '2nd Quarter'
          break
        when = 3
          let $AsOfMonth = '09'
          let #AsOfMonth = 9
          let $Period    = '3rd Quarter'
          break
        when = 4
          let $AsOfMonth = '12'
          let #AsOfMonth = 12
          let $Period    = '4th Quarter'
          break
        when-other
          let $AsOfMonth = '00'
          let #AsOfMonth = 0
          let $Period    = '**'
          break
      end-evaluate
      let $AsOfQtr = edit(#AsOfQtr, '9')

    else

      let $RptPeriod         = 'M'
      let $RptPeriod_Literal = 'MTD'
      if #AsOfMonth > 0
        let $AsOfMonth = edit(#AsOfMonth, '09')
        do Get-Month-Name($AsOfMonth, $MonthName)
        let $Period    = rtrim($MonthName, ' ')
        let #AsOfQtr   = ceil(#AsOfMonth / 3)
        let $AsOfQtr   = edit(#AsOfQtr, '9')
      else
        let $AsOfMonth = '00'
        let #AsOfMonth = 0
        let $Period    = '**'
        let $AsOfQtr   = '0'
        let #AsOfQtr   = 0
      end-if

    end-if
  end-if

  let #AsOfMonth  = trunc(#AsOfMonth, 0)
  let $Slct1      = 'AND TB1.BALANCE_PERIOD <= '
  let $Slct2      = edit(#AsOfMonth, '09')
  let $Slct3      = ')'
  let $BalPerSlct = $Slct1 || $Slct2 || $Slct3

  if $AsOfMonth = '00'
    let $Dt_AsOfDate = $AsOfDate
  else
    do Month-Days(#AsOfMonth, #RptYear, #Work_Month_Days)
    do DTU-Format-Date(#RptYear, #AsOfMonth, #Work_Month_Days, $Dtu_AsOfDate)
    do Convert-From-DTU-Date($Dtu_AsOfDate, $Dt_AsOfDate)
  end-if

  if $EE_Detail_Flag = 'Y'
    let $Emplid_Literal  = 'EMPLID'
    let $Name_Literal    = 'NAME'
    let $ResPSD_Literal  = 'RESIDENT PSD'
  else
    let $Emplid_Literal  = ' '
    let $Name_Literal    = ' '
    let $ResPSD_Literal  = ' '
  end-if

  if $Print_SSN = 'Y'
    let $SSN_Literal = 'SSN'
  else
    let $SSN_Literal = ' '
  end-if

  if $Print_Addr = 'Y'
    let $Address_Literal = 'ADDRESS'
    let #Detail_Line     = 5
  else
    let $Address_Literal = ' '
    let #Detail_Line     = 3
  end-if

  evaluate $Sort_Option
    when = 'W'
      let $Rpt_Type_Desc = 'By Work PSD within Company'
      break
    when = 'C'
      let $Rpt_Type_Desc = 'By Company within Work PSD'
      break
    when = 'T'
      let $Rpt_Type_Desc = 'By Work PSD within Tax Collector within Company'
      break
  end-evaluate

end-procedure

!***********************************************************************
begin-heading 4
  #Include 'stdhdg01.sqc'    !standard heading 1
  let $Period_heading = $Period ||' ' || $RptYear
  print $Rpt_Type_Desc            (+0,1)
  print $Period_heading           (+0) center
end-heading

!***********************************************************************
begin-procedure Report

  let $err-statement = 'TAX011PA, Select Error - Report'
  let $NoData        = 'Y'
  let $Prev_Emplid   = ' '

begin-SELECT On-Error=SQL-Statement-Error
TB.EMPLID
TB.COMPANY
TB.BALANCE_QTR
TB.BALANCE_PERIOD
TB.LOCALITY
TB.WORK_PSD_CD
TB.RES_PSD_CD
TB.TXGRS_MTD
TB.TXGRS_QTD
TB.TXGRS_YTD
TB.TAX_MTD
TB.TAX_QTD
TB.TAX_YTD

  evaluate $RptPeriod
    when = 'Y'
      let #Txgrs_YTD   = &TB.TXGRS_YTD
      let #Tax_YTD     = &TB.TAX_YTD
      break
    when = 'Q'
      if &TB.BALANCE_QTR = #AsOfQTR
        let #Txgrs_YTD = &TB.TXGRS_QTD
        let #Tax_YTD   = &TB.TAX_QTD
      else
        let #Txgrs_YTD = 0
        let #Tax_YTD   = 0
      end-if
      break
    when = 'M'
      if &TB.BALANCE_PERIOD = #AsOfMonth
        let #Txgrs_YTD = &TB.TXGRS_MTD
        let #Tax_YTD   = &TB.TAX_MTD
      else
        let #Txgrs_YTD = 0
        let #Tax_YTD   = 0
      end-if
      break
  end-evaluate

  if #Txgrs_YTD <> 0 or #Tax_YTD <> 0

    if $NoData = 'Y'
      let $NoData = 'N'
    end-if

    let $Emplid    = rtrim(&TB.EMPLID, ' ')
    let $LocPSD    = rtrim(&TB.LOCALITY, ' ')
    let $WorkPSD   = rtrim(&TB.WORK_PSD_CD, ' ')
    let $ResPSD    = rtrim(&TB.RES_PSD_CD, ' ')
    let $Collector = substr($WorkPSD, 1, 2)

    if $LocPSD = '510101'
      evaluate $WorkPSD
        when = '510101'
        when = '880000'
        when = '990000'
          let $RptOrder  = '2'              !510101 not subject to Act 32
          break
        when-other
          let $RptOrder  = '3'              !510101 subject to Act 32
          let $Collector = '51'
          break
      end-evaluate
    else
      let $RptOrder = '1'                   !all except 510101
    end-if

    if $WorkPSD = '510101' or
       $WorkPSD = '880000' or
       $WorkPSD = '990000'
      let $Collector = $WorkPSD
    end-if

    if $WorkPSD = '880000' or $WorkPSD = '990000'
      let $LocPSD = $ResPSD
    else
      let $LocPSD = ' '
    end-if

    if $Print_SSN = 'Y'
      if $Emplid <> $Prev_Emplid
        do Get-SSN
        let $Prev_Emplid = $Emplid
      end-if
    else
      let $NID = ' '
    end-if

    do Insert-Temp-Record

  end-if

FROM  PS_TAX_BALANCE TB
WHERE TB.BALANCE_ID   = $Calendar_Year_ID
  AND TB.BALANCE_YEAR = #RptYear
  AND TB.STATE        = 'PA'
  AND TB.TAX_CLASS    = 'H'
  AND TB.LOCALITY    <> ' '
  AND TB.WORK_PSD_CD <> ' '
  AND TB.RES_PSD_CD  <> ' '
  AND TB.BALANCE_PERIOD =
      (SELECT MAX(TB1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB1
       WHERE  TB1.EMPLID       = TB.EMPLID
         AND  TB1.COMPANY      = TB.COMPANY
         AND  TB1.BALANCE_ID   = TB.BALANCE_ID
         AND  TB1.BALANCE_YEAR = TB.BALANCE_YEAR
         AND  TB1.STATE        = TB.STATE
         AND  TB1.LOCALITY     = TB.LOCALITY
         AND  TB1.TAX_CLASS    = TB.TAX_CLASS
         AND  TB1.WORK_PSD_CD  = TB.WORK_PSD_CD
         AND  TB1.RES_PSD_CD   = TB.RES_PSD_CD
[$BalPerSlct]
ORDER BY TB.EMPLID, TB.WORK_PSD_CD
end-SELECT

  do Commit-Transaction

  if $NoData = 'Y'
    display 'No data selected'
    print 'No data selected'      (+5,1)  center
  else
    evaluate $Sort_Option
      when = 'W'
        do Process-Detail-W
        break
      when = 'C'
        do Process-Detail-C
        break
      when = 'T'
        do Process-Detail-T
        break
    end-evaluate
    print 'Grand Total'           (+2,7)
    do Format-Number(#Rpt_Txgrs_Total, $out, '9999999,999,999.99mi')
    print $out                    (0,76)
    do Format-Number(#Rpt_Tax_Total, $out, '9999999,999,999.99mi')
    print $out                    (0,95)
    do Reset
    do Delete-Temp-Record
  end-if

end-procedure

!***********************************************************************
begin-procedure Delete-Temp-Record
begin-SQL On-Error=Ignore
DELETE FROM PS_R_TAX011PA
WHERE OPRID        = $Prcs_OprID
  AND RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
  AND PRCSINSTANCE = #Prcs_Process_Instance
end-SQL
end-procedure

!***********************************************************************
begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
end-procedure

!***********************************************************************
begin-procedure Insert-Temp-Record

  let $err-statement = 'TAX011PA, Insert Error - Insert-Temp-Record'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_R_TAX011PA (
OPRID,
RUN_CNTL_ID,
PRCSINSTANCE,
ORDER_OPTION,
COMPANY,
OTH_LOCALITY_ABBRV,
WORK_PSD_CD,
LOCALITY,
NATIONAL_ID,
EMPLID,
RES_PSD_CD,
TXGRS_YTD,
TAX_YTD)
VALUES (
$Prcs_OprID,
$Prcs_Run_Cntl_ID,
#Prcs_Process_Instance,
$RptOrder,
&TB.COMPANY,
$Collector,
$WorkPSD,
$LocPSD,
$NID,
$Emplid,
$ResPSD,
#Txgrs_YTD,
#Tax_YTD)
end-SQL
end-procedure

!***********************************************************************
begin-procedure Get-Locality

  let $err-statement = 'TAX011PA, Select Error - Get-Locality'
  let $Locality_Name = ' '

begin-SELECT On-Error=SQL-Statement-Error
L.LOCALITY_NAME
L.OTH_LOCALITY_ABBRV

  let $Locality_Name = rtrim(&L.LOCALITY_NAME, ' ')
  if $Locality_Name = ''
    let $Locality_Name = ' '
  end-if

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE    = 'PA'
  AND L.LOCALITY = $Locality
  AND L.EFFDT =
      (SELECT MAX(L1.EFFDT)
       FROM   PS_LOCAL_TAX_TBL L1
       WHERE  L1.STATE    = L.STATE
         AND  L1.LOCALITY = L.LOCALITY
         AND  L1.EFFDT   <= $Dt_AsOfDate)
end-SELECT
end-procedure

!***********************************************************************
begin-procedure Process-Detail-W

  let $err-statement = 'TAX011PA, Select Error - Process-Detail-W'
  let $Prev_Company  = ' '
  let $Prev_WorkPSD  = ' '
  let $Prev_ResPSD   = ' '
  let $Prev_RptOrder = ' '

begin-SELECT On-Error=SQL-Statement-Error
RW.ORDER_OPTION
RW.COMPANY
RW.OTH_LOCALITY_ABBRV
RW.WORK_PSD_CD
RW.LOCALITY
RW.NATIONAL_ID
RW.EMPLID
RW.RES_PSD_CD
RW.TXGRS_YTD
RW.TAX_YTD
NW.NAME

  let $RptOrder = &RW.ORDER_OPTION
  let $WorkPSD  = rtrim(&RW.WORK_PSD_CD, ' ')
  let $ResPSD   = rtrim(&RW.RES_PSD_CD, ' ')
  let $Company  = rtrim(&RW.COMPANY, ' ')

  if $Prev_Company <> $Company
    if $Prev_Company <> ' '
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      do Print-WorkPSD-Total
      if $Prev_RptOrder = '2' or $Prev_RptOrder = '3'
        do Print-Philadelphia-Total
      end-if
      do Print-Company-Total
      new-page
    end-if
    if #current-line + #Detail_Line + 4 > 75
      new-page
    end-if
    do Get-Company-Data
    print 'Company'               (+2,1)
    print $Company                (0,+1)
    print '/'                     (0,+1)
    print &CT.DESCR               (0,+1)
    do Print-Column-Heading
    if $Prev_WorkPSD <> $WorkPSD
      let $Locality     = $WorkPSD
      do Get-Locality
      let $Work_LocName = $Locality_Name
    end-if
    if $RptOrder = '1'
      print 'Work PSD'            (+2,1)
      print $WorkPSD              (0,+1)
      print '/'                   (0,+1)
      print $Work_LocName         (0,+1)
    else
      if $Prev_RptOrder  = '1'       and
         $Prev_RptOrder <> $RptOrder and
         #current-line   > 8
        new-page
        do Print-Column-Heading
      end-if
      do Print-Philadelphia-WorkPSD
    end-if
    let $Prev_Company   = $Company
    let $Prev_WorkPSD   = $WorkPSD
    let $Prev_ResPSD    = ' '
  else
    if $Prev_WorkPSD <> $WorkPSD
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      do Print-WorkPSD-Total
      if #current-line + #Detail_Line + 2 > 75
        new-page
        do Print-Column-Heading
      end-if
      let $Locality     = $WorkPSD
      do Get-Locality
      let $Work_LocName = $Locality_Name
      if $RptOrder = '1'
        print 'Work PSD'          (+2,1)
        print $WorkPSD            (0,+1)
        print '/'                 (0,+1)
        print $Work_LocName       (0,+1)
      else
        if $Prev_RptOrder  = '1'       and
           $Prev_RptOrder <> $RptOrder and
           #current-line   > 8
          new-page
          do Print-Column-Heading
        end-if
        do Print-Philadelphia-WorkPSD
      end-if
      let $Prev_WorkPSD = $WorkPSD
      let $Prev_ResPSD  = ' '
    end-if
  end-if

  let #Wrk_Txgrs_Total = #Wrk_Txgrs_Total + &RW.TXGRS_YTD
  let #Wrk_Tax_Total   = #Wrk_Tax_Total + &RW.TAX_YTD
  let #Co_Txgrs_Total  = #Co_Txgrs_Total + &RW.TXGRS_YTD
  let #Co_Tax_Total    = #Co_Tax_Total + &RW.TAX_YTD
  let #Rpt_Txgrs_Total = #Rpt_Txgrs_Total + &RW.TXGRS_YTD
  let #Rpt_Tax_Total   = #Rpt_Tax_Total + &RW.TAX_YTD
  let $Prev_RptOrder   = $RptOrder

  evaluate $RptOrder
    when = '2'
      if $WorkPSD = '510101'
        let #P51_Txgrs_Total = #P51_Txgrs_Total + &RW.TXGRS_YTD
        let #P51_Tax_Total   = #P51_Tax_Total + &RW.TAX_YTD
      end-if
      break
    when = '3'
      let #P51_Txgrs_Total   = #P51_Txgrs_Total + &RW.TXGRS_YTD
      let #P51_Tax_Total     = #P51_Tax_Total + &RW.TAX_YTD
      break
  end-evaluate

  if #current-line + #Detail_Line > 75
    new-page
    do Print-Column-Heading
  end-if

  let #Txgrs_YTD = &RW.TXGRS_YTD
  let #Tax_YTD   = &RW.TAX_YTD
  let $Emplid    = rtrim(&RW.EMPLID, ' ')
  let $NID       = &RW.NATIONAL_ID
  let $EE_Name   = &NW.NAME
  do Print-EE-Detail

FROM  PS_R_TAX011PA RW, PS_PERSON_NAME NW
WHERE RW.OPRID        = $Prcs_OprID
  AND RW.RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
  AND RW.PRCSINSTANCE = #Prcs_Process_Instance
  AND RW.EMPLID       = NW.EMPLID
ORDER BY RW.COMPANY, RW.ORDER_OPTION, RW.WORK_PSD_CD, RW.LOCALITY, RW.NATIONAL_ID, RW.EMPLID
end-SELECT

  if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
    do Print-ResPSD-Total
  end-if
  do Print-WorkPSD-Total
  do Print-Philadelphia-Total
  do Print-Company-Total

end-procedure

!***********************************************************************
begin-procedure Process-Detail-C

  let $err-statement = 'TAX011PA, Select Error - Process-Detail-C'
  let $Prev_Company  = ' '
  let $Prev_WorkPSD  = ' '
  let $Prev_ResPSD   = ' '
  let $Prev_RptOrder = ' '

begin-SELECT On-Error=SQL-Statement-Error
RC.ORDER_OPTION
RC.COMPANY
RC.OTH_LOCALITY_ABBRV
RC.WORK_PSD_CD
RC.LOCALITY
RC.NATIONAL_ID
RC.EMPLID
RC.RES_PSD_CD
RC.TXGRS_YTD
RC.TAX_YTD
NC.NAME

  let $RptOrder = &RC.ORDER_OPTION
  let $WorkPSD  = rtrim(&RC.WORK_PSD_CD, ' ')
  let $ResPSD   = rtrim(&RC.RES_PSD_CD, ' ')
  let $Company  = rtrim(&RC.COMPANY, ' ')

  if $Prev_WorkPSD <> $WorkPSD
    if $Prev_WorkPSD <> ' '
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      do Print-Company-Total
      if $Prev_RptOrder <> '3'
        do Print-WorkPSD-Total
      end-if
      if $Prev_RptOrder = '1' or $Prev_RptOrder <> $RptOrder
        new-page
      end-if
    end-if
    if #current-line + #Detail_Line + 4 > 75
      new-page
    end-if
    let $Locality = $WorkPSD
    do Get-Locality
    let $Work_LocName = $Locality_Name
    if $RptOrder = '1'
      print 'Work PSD'            (+2,1)
      print $WorkPSD              (0,+1)
      print '/'                   (0,+1)
      print $Work_LocName         (0,+1)
    else
      do Print-Philadelphia-WorkPSD
    end-if
    if $Prev_RptOrder = '1' or $Prev_RptOrder <> $RptOrder
      do Print-Column-Heading
    end-if
    print 'Company'               (+2,1)
    print $Company                (0,+1)
    print '/'                     (0,+1)
    if $Prev_Company <> $Company
      do Get-Company-Data
    end-if
    print &CT.DESCR               (0,+1)
    let $Prev_Company = $Company
    let $Prev_WorkPSD = $WorkPSD
    let $Prev_ResPSD  = ' '
  else
    if $Prev_Company <> $Company
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      do Print-Company-Total
      if #current-line + #Detail_Line + 2 > 75
        new-page
        do Print-Column-Heading
      end-if
      print 'Company'             (+2,1)
      print $Company              (0,+1)
      print '/'                   (0,+1)
      do Get-Company-Data
      print &CT.DESCR             (0,+1)
      let $Prev_Company = $Company
      let $Prev_ResPSD  = ' '
    end-if
  end-if

  let #Wrk_Txgrs_Total = #Wrk_Txgrs_Total + &RC.TXGRS_YTD
  let #Wrk_Tax_Total   = #Wrk_Tax_Total + &RC.TAX_YTD
  let #Co_Txgrs_Total  = #Co_Txgrs_Total + &RC.TXGRS_YTD
  let #Co_Tax_Total    = #Co_Tax_Total + &RC.TAX_YTD
  let #Rpt_Txgrs_Total = #Rpt_Txgrs_Total + &RC.TXGRS_YTD
  let #Rpt_Tax_Total   = #Rpt_Tax_Total + &RC.TAX_YTD
  let $Prev_RptOrder   = $RptOrder

  evaluate $RptOrder
    when = '2'
      if $WorkPSD = '510101'
        let #P51_Txgrs_Total = #P51_Txgrs_Total + &RC.TXGRS_YTD
        let #P51_Tax_Total   = #P51_Tax_Total + &RC.TAX_YTD
      end-if
      break
    when = '3'
      let #P51_Txgrs_Total   = #P51_Txgrs_Total + &RC.TXGRS_YTD
      let #P51_Tax_Total     = #P51_Tax_Total + &RC.TAX_YTD
      break
  end-evaluate

  if #current-line + #Detail_Line > 75
    new-page
    do Print-Column-Heading
  end-if

  let #Txgrs_YTD = &RC.TXGRS_YTD
  let #Tax_YTD   = &RC.TAX_YTD
  let $Emplid    = rtrim(&RC.EMPLID, ' ')
  let $NID       = &RC.NATIONAL_ID
  let $EE_Name   = &NC.NAME
  do Print-EE-Detail

FROM  PS_R_TAX011PA RC, PS_PERSON_NAME NC
WHERE RC.OPRID        = $Prcs_OprID
  AND RC.RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
  AND RC.PRCSINSTANCE = #Prcs_Process_Instance
  AND RC.EMPLID       = NC.EMPLID
ORDER BY RC.ORDER_OPTION, RC.WORK_PSD_CD, RC.COMPANY, RC.LOCALITY, RC.NATIONAL_ID, RC.EMPLID
end-SELECT

  if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
    do Print-ResPSD-Total
  end-if
  do Print-Company-Total
  do Print-WorkPSD-Total
  do Print-Philadelphia-Total

end-procedure

!***********************************************************************
begin-procedure Process-Detail-T

  let $err-statement  = 'TAX011PA, Select Error - Process-Detail-T'
  let $Prev_Company   = ' '
  let $Prev_WorkPSD   = ' '
  let $Prev_ResPSD    = ' '
  let $Prev_Collector = ' '
  let $Prev_RptOrder  = ' '

begin-SELECT On-Error=SQL-Statement-Error
RT.ORDER_OPTION
RT.COMPANY
RT.OTH_LOCALITY_ABBRV
RT.WORK_PSD_CD
RT.LOCALITY
RT.NATIONAL_ID
RT.EMPLID
RT.RES_PSD_CD
RT.TXGRS_YTD
RT.TAX_YTD
NT.NAME

  let $RptOrder  = &RT.ORDER_OPTION
  let $WorkPSD   = rtrim(&RT.WORK_PSD_CD, ' ')
  let $ResPSD    = rtrim(&RT.RES_PSD_CD, ' ')
  let $Company   = rtrim(&RT.COMPANY, ' ')
  let $Collector = rtrim(&RT.OTH_LOCALITY_ABBRV, ' ')

  if $Prev_Company <> $Company
    if $Prev_Company <> ' '
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      if $Prev_RptOrder = '1'
        do Print-WorkPSD-Total
      end-if
      do Print-Collector-Total
      if $Prev_RptOrder = '2' or $Prev_RptOrder = '3'
        do Print-Philadelphia-Total
      end-if
      do Print-Company-Total
      new-page
    end-if
    if #current-line + #Detail_Line + 6 > 75
      new-page
    end-if
    do Get-Company-Data
    print 'Company'               (+2,1)
    print $Company                (0,+1)
    print '/'                     (0,+1)
    print &CT.DESCR               (0,+1)
    do Print-Column-Heading
    if $RptOrder = '1'
      print 'Tax Collector'       (+2,1)
      print $Collector            (0,+1)
    else
      if $Prev_RptOrder  = '1'       and
         $Prev_RptOrder <> $RptOrder and
         #current-line   > 8
        new-page
        do Print-Column-Heading
      end-if
      do Print-Philadelphia-WorkPSD
    end-if
    if $Prev_WorkPSD <> $WorkPSD
      let $Locality     = $WorkPSD
      do Get-Locality
      let $Work_LocName = $Locality_Name
    end-if
    if $RptOrder = '1'
      print 'Work PSD'            (+2,1)
      print $WorkPSD              (0,+1)
      print '/'                   (0,+1)
      print $Work_LocName         (0,+1)
    end-if
    let $Prev_Company   = $Company
    let $Prev_WorkPSD   = $WorkPSD
    let $Prev_Collector = $Collector
    let $Prev_ResPSD    = ' '
  else
    if $Prev_Collector <> $Collector
      if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
        do Print-ResPSD-Total
      end-if
      if $Prev_RptOrder = '1'
        do Print-WorkPSD-Total
      end-if
      do Print-Collector-Total
      if #current-line + #Detail_Line + 4 > 75
        new-page
        do Print-Column-Heading
      end-if
      if $RptOrder = '1'
        print 'Tax Collector'     (+2,1)
        print $Collector          (0,+1)
      else
        if $Prev_RptOrder  = '1'       and
           $Prev_RptOrder <> $RptOrder and
           #current-line   > 8
          new-page
          do Print-Column-Heading
        end-if
        do Print-Philadelphia-WorkPSD
      end-if
      if $Prev_WorkPSD <> $WorkPSD
        let $Locality     = $WorkPSD
        do Get-Locality
        let $Work_LocName = $Locality_Name
      end-if
      if $RptOrder = '1'
        print 'Work PSD'          (+2,1)
        print $WorkPSD            (0,+1)
        print '/'                 (0,+1)
        print $Work_LocName       (0,+1)
      end-if
      let $Prev_WorkPSD   = $WorkPSD
      let $Prev_Collector = $Collector
      let $Prev_ResPSD    = ' '
    else
      if $Prev_WorkPSD <> $WorkPSD
        if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
          do Print-ResPSD-Total
        end-if
        if $Prev_RptOrder = '1'
          do Print-WorkPSD-Total
        else
          if $Prev_RptOrder <> $RptOrder
            do Print-Collector-Total
          end-if
        end-if
        if #current-line + #Detail_Line + 2 > 75
          new-page
          do Print-Column-Heading
        end-if
        let $Locality     = $WorkPSD
        do Get-Locality
        let $Work_LocName = $Locality_Name
        if $RptOrder = '1'
          print 'Work PSD'        (+2,1)
          print $WorkPSD          (0,+1)
          print '/'               (0,+1)
          print $Work_LocName     (0,+1)
        else
          if $Prev_RptOrder  = '1'       and
             $Prev_RptOrder <> $RptOrder and
             #current-line   > 8
            new-page
            do Print-Column-Heading
          end-if
          do Print-Philadelphia-WorkPSD
        end-if
        let $Prev_WorkPSD = $WorkPSD
        let $Prev_ResPSD  = ' '
      end-if
    end-if
  end-if

  let #TC_Txgrs_Total  = #TC_Txgrs_Total + &RT.TXGRS_YTD
  let #TC_Tax_Total    = #TC_Tax_Total + &RT.TAX_YTD
  let #Co_Txgrs_Total  = #Co_Txgrs_Total + &RT.TXGRS_YTD
  let #Co_Tax_Total    = #Co_Tax_Total + &RT.TAX_YTD
  let #Rpt_Txgrs_Total = #Rpt_Txgrs_Total + &RT.TXGRS_YTD
  let #Rpt_Tax_Total   = #Rpt_Tax_Total + &RT.TAX_YTD
  let $Prev_RptOrder   = $RptOrder

  evaluate $RptOrder
    when = '1'
      let #Wrk_Txgrs_Total   = #Wrk_Txgrs_Total + &RT.TXGRS_YTD
      let #Wrk_Tax_Total     = #Wrk_Tax_Total + &RT.TAX_YTD
      break
    when = '2'
      if $WorkPSD = '510101'
        let #P51_Txgrs_Total = #P51_Txgrs_Total + &RT.TXGRS_YTD
        let #P51_Tax_Total   = #P51_Tax_Total + &RT.TAX_YTD
      end-if
      break
    when = '3'
      let #P51_Txgrs_Total   = #P51_Txgrs_Total + &RT.TXGRS_YTD
      let #P51_Tax_Total     = #P51_Tax_Total + &RT.TAX_YTD
      break
    end-evaluate

  if #current-line + #Detail_Line > 75
    new-page
    do Print-Column-Heading
  end-if

  let #Txgrs_YTD = &RT.TXGRS_YTD
  let #Tax_YTD   = &RT.TAX_YTD
  let $Emplid    = rtrim(&RT.EMPLID, ' ')
  let $NID       = &RT.NATIONAL_ID
  let $EE_Name   = &NT.NAME
  do Print-EE-Detail

FROM  PS_R_TAX011PA RT, PS_PERSON_NAME NT
WHERE RT.OPRID        = $Prcs_OprID
  AND RT.RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
  AND RT.PRCSINSTANCE = #Prcs_Process_Instance
  AND RT.EMPLID       = NT.EMPLID
ORDER BY RT.COMPANY, RT.ORDER_OPTION, RT.OTH_LOCALITY_ABBRV, RT.WORK_PSD_CD, RT.LOCALITY, RT.NATIONAL_ID, RT.EMPLID
end-SELECT

  if $Prev_WorkPSD = '880000' or $Prev_WorkPSD = '990000'
    do Print-ResPSD-Total
  end-if
  if $Prev_RptOrder = '1'
    do Print-WorkPSD-Total
    do Print-Collector-Total
  else
    do Print-Collector-Total
    do Print-Philadelphia-Total
  end-if
  do Print-Company-Total

end-procedure

!***********************************************************************
begin-procedure Get-SSN

  let $NID = 'Not/Found'

begin-SELECT On-Error=Not-Found
P.NATIONAL_ID

  let $SSN = rtrim(&P.NATIONAL_ID, ' ')
  if $SSN = ''
    let $NID = 'Not/Found'
  else
    let $NID = edit($SSN, 'xxx-xx-xxxx')
  end-if

FROM  PS_PERS_NID P
WHERE P.EMPLID           = $Emplid
  AND P.COUNTRY          = {NID_Country}
  AND P.NATIONAL_ID_TYPE = $Payroll_NID_Type
end-SELECT
end-procedure

!***********************************************************************
begin-procedure Not-Found

  let $NID = 'Not/Found'

end-procedure

!***********************************************************************
begin-procedure Get-Address

  let $Street        = ''
  let $Street2       = ''
  let $Postal        = ''
  let $City          = ''
  let $State         = ''
  let $PostalCity    = ''
  let $Address_Found = 'N'

begin-SELECT On-Error=No-Address
ADDR1.ADDRESS1
ADDR1.ADDRESS2
ADDR1.POSTAL
ADDR1.CITY
ADDR1.STATE

  let $Address_Found = 'Y'
  let $Street        = rtrim(&ADDR1.ADDRESS1,' ')
  let $Street2       = rtrim(&ADDR1.ADDRESS2,' ')
  let $City          = rtrim(&ADDR1.CITY,' ')
  let $State         = rtrim(&ADDR1.STATE,' ')
  let $Postal        = rtrim(&ADDR1.POSTAL,' ')
  let #Counter       = 1
  let #LenField      = Length($Postal)
  let $PostalEnd     = ''
  while #Counter  <= #LenField
    let $Char = substr($Postal, #Counter, 1)
    if $Char <> '-'
      let $PostalEnd = $PostalEnd || $Char
    end-if
    let #Counter = #Counter + 1
  end-while
  let $Postal5    = substr(rtrim($PostalEnd, ' '), 1, 5)
  let $PostalRest = substr(rtrim($PostalEnd, ' '), 6, 6)
  if $PostalRest > ''
    let $Postal =  $Postal5 || '-' || $PostalRest
  else
    let $Postal =  $Postal5
  end-if
  let $PostalCity = $City || ' ' || $State || ', ' || $Postal

FROM  PS_ADDRESSES ADDR1
WHERE ADDR1.EMPLID       = $Emplid
  AND ADDR1.ADDRESS_TYPE = 'HOME'
  AND ADDR1.EFFDT        =
      (SELECT MAX(ADDR2.EFFDT)
       FROM   PS_ADDRESSES ADDR2
       WHERE  ADDR2.EMPLID       = ADDR1.EMPLID
         AND  ADDR2.ADDRESS_TYPE = ADDR1.ADDRESS_TYPE
         AND  ( ADDR2.EFFDT <= $Dt_AsOfDate
               OR ( ADDR2.EFFDT > $Dt_AsOfDate
                   AND $Dt_AsOfDate < (SELECT MIN(ADDR3.EFFDT)
                                       FROM   PS_ADDRESSES ADDR3
                                       WHERE  ADDR3.EMPLID       = ADDR2.EMPLID
                                         AND  ADDR3.ADDRESS_TYPE = ADDR2.ADDRESS_TYPE))))
end-SELECT

  if $Address_Found = 'N'
    do No-Address
  end-if

end-procedure

!***********************************************************************
begin-procedure No-Address

  let $Street = 'No HOME Address found'

end-procedure

!***********************************************************************
begin-procedure Print-Column-Heading

  print $Emplid_Literal           (+2,1)
  print $SSN_Literal              (0,14)
  print $Name_Literal             (0,26)
  print $Address_Literal          (0,52)
  print $RptPeriod_Literal        (0,91)
  print $RptPeriod_Literal        (0,110)
  print $ResPSD_Literal           (0,115)
  print 'TAXABLE WAGES'           (+1,81)
  print 'EIT WITHHELD'            (0,101)

end-procedure

!***********************************************************************
begin-procedure Print-EE-Detail

  if $Prev_ResPSD <> $ResPSD
    if $Prev_ResPSD <> ' ' and
       ($WorkPSD = '880000' or $WorkPSD = '990000')
      do Print-ResPSD-Total
    end-if
    let $Locality = $ResPSD
    do Get-Locality
    let $Res_LocName = $Locality_Name
    if $WorkPSD = '880000' or $WorkPSD = '990000'
      print 'Resident PSD'        (+2,4)
      print $ResPSD               (0,+1)
      print '/'                   (0,+1)
      print $Res_LocName          (0,+1)
    end-if
    let $Prev_ResPSD = $ResPSD
  end-if

  if $WorkPSD = '880000' or $WorkPSD = '990000'
    let #Res_Txgrs_Total = #Res_Txgrs_Total + #Txgrs_YTD
    let #Res_Tax_Total   = #Res_Tax_Total + #Tax_YTD
  end-if

  if $EE_Detail_Flag = 'Y'

    print $Emplid                 (+2,1)
    if $Print_SSN = 'Y'
      print $NID                  (0,14)
    end-if

    if $Print_Addr = 'Y'
      print $EE_Name              (0,26,25)
      do Get-Address
      print $Street               (0,52,24)
    else
      print $EE_Name              (0,26)
    end-if

    do Format-Number(#Txgrs_YTD, $out, '9999999,999,999.99mi')
    print $out                    (0,76)
    do Format-Number(#Tax_YTD, $out, '9999999,999,999.99mi')
    print $out                    (0,95)
    print $ResPSD                 (0,115)

    if $Print_Addr = 'Y'
      if $Street2 <> ''
        print $Street2            (+1,52,30)
        print $Res_LocName        (0,115,17)
      end-if
      if $PostalCity <> ''
        print $PostalCity         (+1,52,30)
        if $Street2 = ''
          print $Res_LocName      (0,115,17)
        end-if
      end-if
      if $Street2 = '' and $PostalCity = ''
        print $Res_LocName        (+1,115,17)
      end-if
    else
      print $Res_LocName          (+1,115,17)
    end-if

  end-if

end-procedure

!***********************************************************************
begin-procedure Print-Philadelphia-WorkPSD

  if $Prev_RptOrder <> $RptOrder and $RptOrder = '2'
    print '510101 Philadelphia/Philadelphia City S D' (+2,1)
    if $Sort_Option = 'T'
      print 'Tax Collector'       (+2,1)
      print $WorkPSD              (0,+1)
    else
      print $WorkPSD              (+2,1)
    end-if
  end-if
  if $Prev_RptOrder <> $RptOrder and $RptOrder = '3'
    print '510101 Philadelphia - Act 32'              (+2,1)
  end-if
  if $Prev_RptOrder = $RptOrder and
     ($WorkPSD = '510101' or $WorkPSD = '880000' or $WorkPSD = '990000')
    if $Sort_Option = 'T' and $RptOrder = '2'
      print 'Tax Collector'       (+2,1)
      print $WorkPSD              (0,+1)
    else
      print $WorkPSD              (+2,1)
    end-if
  end-if

end-procedure

!***********************************************************************
begin-procedure Print-WorkPSD-Total

  if #current-line + 2 > 75
    new-page
    do Print-Column-Heading
  end-if
  if $Sort_Option = 'T'
    print 'Work PSD'              (+2,7)
    print $Prev_WorkPSD           (0,+1)
    print 'Total'                 (0,+1)
  else
    evaluate $Prev_RptOrder
      when = '1'
        print 'Work PSD'          (+2,7)
        print $Prev_WorkPSD       (0,+1)
        print 'Total'             (0,+1)
        break
      when = '2'
        if $Prev_WorkPSD = '510101'
          print '510101 Philadelphia Total'           (+2,7)
        else
          print $Prev_WorkPSD     (+2,7)
          print 'Total'           (0,+1)
        end-if
        break
      when = '3'
        print '510101 Philadelphia - Act 32 Total'    (+2,7)
        break
    end-evaluate
  end-if
  do Format-Number(#Wrk_Txgrs_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,76)
  do Format-Number(#Wrk_Tax_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,95)
  let #Wrk_Txgrs_Total = 0
  let #Wrk_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Print-ResPSD-Total

  if #current-line + 2 > 75
    new-page
    do Print-Column-Heading
  end-if
  print 'Resident PSD'            (+2,7)
  print $Prev_ResPSD              (0,+1)
  print 'Total'                   (0,+1)
  do Format-Number(#Res_Txgrs_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,76)
  do Format-Number(#Res_Tax_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,95)
  let #Res_Txgrs_Total = 0
  let #Res_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Print-Company-Total

  if #current-line + 2 > 75
    new-page
    do Print-Column-Heading
  end-if
  print 'Company'                 (+2,7)
  print $Prev_Company             (0,+1)
  print 'Total'                   (0,+1)
  do Format-Number(#Co_Txgrs_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,76)
  do Format-Number(#Co_Tax_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,95)
  let #Co_Txgrs_Total = 0
  let #Co_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Print-Collector-Total

  if #current-line + 2 > 75
    new-page
    do Print-Column-Heading
  end-if
  evaluate $Prev_RptOrder
    when = '1'
      print 'Tax Collector'       (+2,7)
      print $Prev_Collector       (0,+1)
      print 'Total'               (0,+1)
      break
    when = '2'
      if $Prev_Collector = '510101'
        print '510101 Philadelphia Total'             (+2,7)
      else
        print 'Tax Collector'     (+2,7)
        print $Prev_Collector     (0,+1)
        print 'Total'             (0,+1)
      end-if
      break
    when = '3'
      print '510101 Philadelphia - Act 32 Total'      (+2,7)
      break
  end-evaluate
  do Format-Number(#TC_Txgrs_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,76)
  do Format-Number(#TC_Tax_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,95)
  let #TC_Txgrs_Total = 0
  let #TC_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Print-Philadelphia-Total

  if #current-line + 2 > 75
    new-page
    do Print-Column-Heading
  end-if
  if $Sort_Option = 'C'
    print 'Philadelphia Grand Total'        (+2,7)
  else
    print 'Philadelphia Total'              (+2,7)
  end-if
  do Format-Number(#P51_Txgrs_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,76)
  do Format-Number(#P51_Tax_Total, $out, '9999999,999,999.99mi')
  print $out                      (0,95)
  let #P51_Txgrs_Total = 0
  let #P51_Tax_Total   = 0

end-procedure

!***********************************************************************
begin-procedure Select-Parameters

  let $err-statement = 'TAX011PA, Select Error - Select-Parameters'

begin-SELECT On-Error=SQL-Statement-Error
PA.BALANCE_ID
PA.BALANCE_YEAR
PA.BALANCE_QTR
PA.BALANCE_PERIOD
PA.PY_BAL_FOR_YR_FLG
PA.EE_DETAIL_FLAG
PA.PRINT_SSN
PA.PRINT_ADDR
PA.PY_SORT_OPTION

  let $Calendar_Year_ID = &PA.BALANCE_ID
  let #RptYear          = trunc(&PA.BALANCE_YEAR, 0)
  let #AsOfQtr          = trunc(&PA.BALANCE_QTR, 0)
  let #AsOfMonth        = trunc(&PA.BALANCE_PERIOD, 0)
  let $Yr_Flag          = &PA.PY_BAL_FOR_YR_FLG
  let $EE_Detail_Flag   = &PA.EE_DETAIL_FLAG
  let $Sort_Option      = &PA.PY_SORT_OPTION
  let $Print_SSN        = &PA.PRINT_SSN
  let $Print_Addr       = &PA.PRINT_ADDR

FROM  PS_RC_TAX011PA PA
WHERE PA.OPRID       = $Prcs_OprID
  AND PA.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SELECT

end-procedure

!***********************************************************************
begin-procedure SQL-Statement-Error

  if #SQL-Status <> 0
    display 'SQL-Statement-Error '
    display $err-statement
    display ' Error: ' noline
    display $SQL-error
    display ' SQL Status: ' noline
    display #SQL-Status
    do Rollback-Transaction
    do Commit-Transaction
    stop
  end-if

end-procedure

#Include 'curdttim.sqc' !Get-Current-DateTime procedure
#Include 'datemath.sqc' !Date math routine
#Include 'datetime.sqc' !Routines for date and time formatting
#Include 'datewrk.sqc'  !Routines for working with dates
#Include 'getcodta.sqc' !Get-Company-Data procedure
#Include 'getmonnm.sqc' !Get-Month-Name procedure
#Include 'number.sqc'   !Routines to format numbers
#Include 'reset.sqc'    !Reset printer procedure
#Include 'sqrtrans.sqc' !Translate SQR strings to given language
#Include 'stdapi.sqc'   !Update Process API
#Include 'stdinit.sqc'  !Standard-Initialization procedure
