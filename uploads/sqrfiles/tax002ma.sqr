!***********************************************************************
!  TAX002MA:  Qtrly State Employee Wage List - MASSACHUSETTS           *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:52:14                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP99998       E&G 7.51 AU Merge                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report

  do Process-Main

  if #Employees_On_Page > 0 and #Employees_On_Page < 22
    do Page-Complete
  end-if

  display 'Employees_Reported: ' noline
  display #Employees_Reported
  do Stdapi-Term

end-report

begin-procedure Init-Report
  display 'Quarterly Employee Wage List - Massachusetts'

  do Init-DateTime
  do Init-Number

  do Get-Tax-Reporting-Run-Controls

  move $PeriodEndDate to $AsOfDate  !for included procedures

  do Initialize
  do Get-Calendar-Year-Id
  do Stdapi-Init

end-procedure


begin-procedure Initialize
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'MA' to $State
#endif
end-procedure

begin-heading 9
  print 'QUARTER ENDED'           (+2,62)
  do Format-DateTime($PeriodEndDate, $out, {DEFMDY}, '', '')
  print $out                      (+1,62)
  print 'EMPLOYER'                (+2,4)
  print 'FEDERAL EIN'             (0,45)
  uppercase $CompanyName
  print $CompanyName              (+2,4)
  print &CT.Federal_EIN           (0,45) edit 099999999
  print 'PAGE'                    (0,68)
  do Format-Number(#PAGE_NUM, $out, '999')
  print $out                      (0,72)
  print 'SSN'                     (+2,8)
  print 'NAME'                    (0,30)
  print 'TOTAL WAGES'             (0,66)
end-heading

begin-procedure Process-Main

  Show 'Calendar Year: ' $Calendar_Year_Id
  Show 'Balance  Year: ' &TX.Balance_Year
  Show 'Balance  Qtr:  ' &TX.Balance_Qtr
  Show 'Asofdate:      ' $Asofdate

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
AA.FEDERAL_EIN   () on-break print=never before=Process-EIN
AA.COMPANY


FROM  PS_COMPANY_TBL AA
WHERE AA.EFF_STATUS = 'A'
  AND AA.TAX_REPORT_TYPE = '2'
  AND AA.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL   BB
     WHERE  BB.COMPANY = AA.COMPANY
       AND  BB.EFFDT  <= $AsOfDate)
ORDER BY AA.FEDERAL_EIN, AA.COMPANY
end-SELECT
end-procedure

begin-procedure Process-EIN

    if #Employees_On_Page < 22 and #Employees_On_Page > 0
      do Page-Complete
    end-if
    move 0 to #Page#

begin-SELECT
AA1.COMPANY

    move &AA1.Company to $Company
    MOVE &AA.Federal_EIN to $FEDERAL_EIN

    do Get-Company-Data
    do Get-State-Tax-Data             !Employer ID
    do Process-Tax-Balances

FROM  PS_COMPANY_TBL AA1
WHERE AA1.EFF_STATUS = 'A'
  AND AA1.TAX_REPORT_TYPE = '2'
  AND AA1.FEDERAL_EIN = &AA.FEDERAL_EIN
  and  AA1.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL  BB1
     WHERE  BB1.COMPANY = AA1.COMPANY
       AND  BB1.EFFDT  <= $AsOfDate)
ORDER BY AA1.COMPANY
end-SELECT

end-procedure


begin-procedure Process-Tax-Balances

  move '' to $EmplID                                                    !HP99998

begin-SELECT
TB.EMPLID         () on-break print=never level=2 after=Process-Employee
PD1.NATIONAL_ID   () on-break print=never level=2 save=$SSN
PN.NAME           () on-break print=never level=2 save=$Name

  if &TB.EMPLID <> $EmplID                                              !HP99998
      move &TB.EmplID    to $EmplID
      let $Resident_Status_Found = 'N'
      do Find-Resident-Status
      do Process-Resident-EE
  end-if                                                                !HP99998

TB.COMPANY

FROM  PS_TAX_BALANCE TB, PS_NAMES PN, PS_PERS_NID PD1
WHERE TB.COMPANY           = $COMPANY
  AND PD1.EMPLID           = TB.EMPLID
  AND PD1.COUNTRY          = {NID_COUNTRY}
  AND PD1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.EMPLID            = PD1.EMPLID
  AND PN.NAME_TYPE = 'PRI'
  AND PN.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = PN.EMPLID
         AND  PX.NAME_TYPE = PN.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
#ifdef TAXTEST
  AND TB.STATE             = 'CA'
#else
  AND TB.STATE             = 'MA'
#endif
  AND TB.LOCALITY          = ' '
  AND TB.TAX_CLASS         IN ('A','H')                                 !HP99999
  AND TB.TXGRS_QTD         > 0
  AND TB.BALANCE_ID        = $Calendar_Year_Id
  AND TB.BALANCE_YEAR      = &TX.Balance_Year
  AND TB.BALANCE_QTR       = &TX.Balance_Qtr
  AND TB.BALANCE_PERIOD    =
      (SELECT MAX(TB1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB1
       WHERE  TB1.EMPLID        = TB.EMPLID
         AND  TB1.COMPANY       = TB.COMPANY
         AND  TB1.BALANCE_ID    = TB.BALANCE_ID
         AND  TB1.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND  TB1.BALANCE_QTR   = TB.BALANCE_QTR
         AND  TB1.STATE         = TB.STATE
         AND  TB1.LOCALITY      = TB.LOCALITY
         AND  TB1.TAX_CLASS     = TB.TAX_CLASS)
ORDER BY PD1.NATIONAL_ID, TB.EMPLID                                     !HP99998
end-SELECT
end-procedure


begin-procedure Find-Resident-Status
begin-SELECT
ST.EMPLID
ST.RESIDENT
ST.STATE
ST.EFFDT
B1.PAY_END_DT

  if $Resident_Status_Found = 'N'
    if &B1.PAY_END_DT >= &ST.EFFDT
      let $STD_STATE = RTRIM(&ST.STATE, ' ')
      if $STD_STATE = 'MA'
      AND &ST.RESIDENT = 'Y'
          let $Resident = 'Y'
          let $Resident_Status_Found = 'Y'
      else
          let $Resident = 'N'
      end-if
    end-if
  end-if


FROM  PS_PAY_CALENDAR A3, PS_PAY_CAL_BAL_ID A4,
      PS_PAY_CHECK B1, PS_COMPANY_TBL X1,
      PS_STATE_TAX_DATA ST
WHERE A3.COMPANY = A4.COMPANY
  AND A3.PAYGROUP = A4.PAYGROUP
  AND A3.PAY_END_DT = A4.PAY_END_DT
  AND A3.COMPANY          = B1.COMPANY
  AND A3.PAYGROUP         = B1.PAYGROUP
  AND A3.COMPANY          = X1.COMPANY
  AND X1.TAX_REPORT_TYPE  = '2'
  AND A3.PAY_END_DT       = B1.PAY_END_DT
  AND A4.BALANCE_ID    = $Calendar_Year_Id
  AND A4.BALANCE_YEAR  = &TX.Balance_Year
  AND A4.BALANCE_QTR   = &TX.Balance_Qtr
  AND B1.PAYCHECK_STATUS IN ('F','R','A')
  AND B1.COMPANY       = $Company
  AND ST.EMPLID        = $EMPLID
  AND ST.EMPLID        = B1.EMPLID
  AND X1.EFFDT =
      (SELECT MAX(EFFDT)
         FROM PS_COMPANY_TBL
         WHERE  COMPANY = X1.COMPANY
          AND EFFDT    <= $AsOfDate)
ORDER BY ST.EMPLID, ST.EFFDT
end-SELECT
end-procedure


begin-procedure Process-Resident-EE
begin-SELECT
A.COMPANY
A.PAYGROUP
A.PAY_END_DT
B.EMPLID
B.PAYGROUP
B.COMPANY
B.PAY_END_DT
B.OFF_CYCLE
B.PAGE_NUM
B.LINE_NUM
B.SEPCHK
B.TOTAL_GROSS

    if $Resident = 'Y'
      add &B.Total_Gross to #Grs_QTD
      let #Res_Grs_QTD = 0
      do Get-Other-Resident-Earnings    !** This procedure calculates other earning,#Res_Grs_QTD,to DEDUCT from Gross QTD for Res
      let #Grs_QTD = #Grs_QTD - #Res_Grs_QTD
      do Get-Taxable-Benefits   !*** This procedure calualates taxable benifits to ADD to Gross QTD for Res
      do Get-Res-Other-Earnings !*** This procedure calualates other earnings to ADD to Gross QTD  for Res
    else
      do Get-Earnings
      let $Pay_End_Dt = ''
    end-if
FROM  PS_PAY_CALENDAR A, PS_PAY_CAL_BAL_ID A1,
      PS_PAY_CHECK B, PS_COMPANY_TBL X
WHERE A.COMPANY = A1.COMPANY AND A.PAYGROUP = A1.PAYGROUP
  AND A.PAY_END_DT = A1.PAY_END_DT
  AND A.COMPANY          = B.COMPANY
  AND A.PAYGROUP         = B.PAYGROUP
  AND A.COMPANY          = X.COMPANY
  AND A.PAY_END_DT       = B.PAY_END_DT
  AND X.TAX_REPORT_TYPE  = '2'
  AND A1.BALANCE_ID    = $Calendar_Year_Id
  AND A1.BALANCE_YEAR  = &TX.Balance_Year
  AND A1.BALANCE_QTR   = &TX.Balance_Qtr
  AND B.PAYCHECK_STATUS IN ('F','R','A')
  AND B.EMPLID         = $EmplID
  AND B.COMPANY        = $Company
  AND X.EFFDT =
      (SELECT MAX(EFFDT)
         FROM PS_COMPANY_TBL
         WHERE  COMPANY = X.COMPANY
          AND EFFDT    <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Get-Taxable-Benefits
begin-SELECT
D.DED_CLASS
D.DED_CUR

    add &D.Ded_Cur to #Grs_QTD

FROM  PS_PAY_DEDUCTION D
WHERE COMPANY          = &B.COMPANY
  AND PAYGROUP         = &B.PAYGROUP
  AND PAY_END_DT       = &B.PAY_END_DT
  AND OFF_CYCLE        = &B.OFF_CYCLE
  AND PAGE_NUM            = &B.PAGE_NUM
  AND LINE_NUM            = &B.LINE_NUM
  AND SEPCHK           = &B.SEPCHK
  AND DED_CLASS        = 'T'
  AND DED_SLSTX_CLASS  = 'B'
end-SELECT
end-procedure

begin-procedure Get-Earnings
begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(C.REG_HRLY_EARNS),15,3) &Reg_Hrly_Earns
DECIMAL(SUM(C.REG_EARNS),15,3)      &Reg_Earns
DECIMAL(SUM(C.OT_HRLY_EARNS),15,3)  &OT_Hrly_Earns
#else
SUM(C.REG_HRLY_EARNS) &Reg_Hrly_Earns
SUM(C.REG_EARNS)      &Reg_Earns
SUM(C.OT_HRLY_EARNS)  &OT_Hrly_Earns
#endif
C.ADDL_NBR
C.PAY_END_DT

  let #Grs_QTD = #Grs_QTD + &Reg_Hrly_Earns +
                 &Reg_Earns + &OT_Hrly_Earns
  do Get-Other-Hours-Earnings
  if &C.Pay_End_Dt <> $Pay_End_Dt
    do Get-Taxable-Benefits
    let $Pay_End_Dt = &C.Pay_End_Dt
  end-if

FROM  PS_PAY_EARNINGS C
WHERE C.COMPANY    = &A.Company
  AND C.PAYGROUP   = &B.PayGroup
  AND C.PAY_END_DT = &B.Pay_End_Dt
  AND C.OFF_CYCLE  = &B.Off_Cycle
  AND C.PAGE_NUM      = &B.PAGE_NUM
  AND C.LINE_NUM      = &B.LINE_NUM
  AND C.SEPCHK     = &B.SepChk
  AND C.SINGLE_CHECK_USE IN ('C', 'N')
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'MA'
#endif
GROUP BY C.ADDL_NBR, C.PAY_END_DT
ORDER BY C.ADDL_NBR, C.PAY_END_DT
end-SELECT
end-procedure

begin-procedure Get-Other-Hours-Earnings
begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(OTH_EARNS),15,3) &Oth_Earns
#else
SUM(OTH_EARNS) &Oth_Earns
#endif
O.ERNCD
E.SUBJECT_FWT
E.SUBJECT_FICA
E.SUBJECT_FUT

  If &E.SUBJECT_FWT  = 'Y'
  OR &E.SUBJECT_FICA = 'Y'
  OR &E.SUBJECT_FUT  = 'Y'
    let #Grs_QTD = #Grs_QTD + &Oth_Earns
  end-if

FROM  PS_PAY_OTH_EARNS O, PS_EARNINGS_TBL E
WHERE O.COMPANY    = &A.Company
  AND O.PAYGROUP   = &B.PayGroup
  AND O.PAY_END_DT = &B.Pay_End_Dt
  AND O.OFF_CYCLE  = &B.Off_Cycle
  AND O.PAGE_NUM      = &B.PAGE_NUM
  AND O.LINE_NUM      = &B.LINE_NUM
  AND O.SEPCHK     = &B.SepChk
  AND O.ADDL_NBR      = &C.ADDL_NBR
  AND O.ERNCD      = E.ERNCD
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_EARNINGS_TBL
       WHERE  ERNCD           = E.ERNCD
         AND  EFFDT          <= $AsOfDate)
GROUP BY O.ERNCD, E.SUBJECT_FWT, E.SUBJECT_FICA, E.SUBJECT_FUT
end-SELECT
end-procedure

begin-procedure Get-Other-Resident-Earnings
begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(OTH_EARNS),15,3) &OE.Oth_Earns
#else
SUM(OTH_EARNS) &OE.Oth_Earns
#endif
O1.ERNCD

    let #Res_Grs_QTD = #Res_Grs_QTD + &OE.Oth_Earns

FROM  PS_PAY_OTH_EARNS O1, PS_EARNINGS_TBL E1
WHERE O1.COMPANY    = &A.Company
  AND O1.PAYGROUP   = &B.PayGroup
  AND O1.PAY_END_DT = &B.Pay_End_Dt
  AND O1.OFF_CYCLE  = &B.Off_Cycle
  AND O1.PAGE_NUM      = &B.PAGE_NUM
  AND O1.LINE_NUM      = &B.LINE_NUM
  AND O1.SEPCHK     = &B.SepChk
  AND O1.ERNCD      = E1.ERNCD
  AND E1.SUBJECT_FWT  = 'N'
  AND E1.SUBJECT_FICA = 'N'
  AND E1.SUBJECT_FUT  = 'N'
  AND E1.ADD_GROSS    = 'Y'
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_EARNINGS_TBL
       WHERE  ERNCD           = E1.ERNCD
         AND  EFFDT          <= $AsOfDate)
GROUP BY O1.ERNCD
end-SELECT
end-procedure

begin-procedure Get-Res-Other-Earnings

begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(OTH_EARNS),15,3) &OE.Oth_Res_Earns
#else
SUM(OTH_EARNS) &OE.Oth_Res_Earns
#endif
O2.ERNCD

      let #Grs_QTD = #Grs_QTD + &OE.Oth_Res_Earns

FROM  PS_PAY_OTH_EARNS O2, PS_EARNINGS_TBL E3
WHERE O2.COMPANY    = &A.Company
  AND O2.PAYGROUP   = &B.PayGroup
  AND O2.PAY_END_DT = &B.Pay_End_Dt
  AND O2.OFF_CYCLE  = &B.Off_Cycle
  AND O2.PAGE_NUM   = &B.Page_Num
  AND O2.LINE_NUM   = &B.Line_Num
  AND O2.SEPCHK     = &B.SepChk
  AND O2.ERNCD      = E3.ERNCD
  AND (E3.SUBJECT_FWT  = 'Y'
       OR E3.SUBJECT_FICA = 'Y'
       OR E3.SUBJECT_FUT  = 'Y')
  AND E3.ADD_GROSS    = 'N'
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_EARNINGS_TBL
       WHERE  ERNCD           = E3.ERNCD
         AND  EFFDT          <= $AsOfDate)
GROUP BY O2.ERNCD
end-SELECT
end-procedure

begin-procedure Process-Employee
  if #Grs_QTD > 0
    do EmplID-Change
  end-if

  move 0 to #Grs_QTD
  move 0 to #Res_Grs_QTD
end-procedure

begin-procedure EmplID-Change
  do Format-Number(#Grs_QTD, $NLGrs_QTD, '99999999.99')
  add #Grs_QTD to #PageTotal
  move &B.EmplID to $EmplID
  move $SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM($SSN, ' ') = ''
    print 'Applied For' (+2,8)
  else
    print $SSN          (+2,8)  edit xxxbxxbxxxx
  end-if

  uppercase $Name
  print $Name           (0,30,20)

  print $NLGrs_QTD          (0,66)

  move '' to $NLGrs_QTD
  move '' to $Weeks

  add 1 to #Employees_On_Page
  add 1 to #Employees_Reported

  if #Employees_On_Page = 22
    do Page-Complete
  end-if
end-procedure

begin-procedure Page-Complete
  print 'PAGE TOTAL' (+2,38)
  do Format-Number (#PageTotal, $out, '99999999.99')
  print $out (0,66)
  print 'PAGE EMPLOYEES' (0,4)
  do Format-Number (#Employees_On_Page, $out, '99')
  print $out (0,+2)
  add 1 to #PAGE_NUM
  new-page
  move 0 to #PageTotal
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Ignore
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
