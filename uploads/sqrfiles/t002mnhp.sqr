!***********************************************************************
!  T002MNHP:  Qtrly State Employee Wage List - MINNESOTA               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:42:00                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       HP version of core SQR TAX002MN                        *
! HP00006       E&G 7.5  System test fixes                             *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002a.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report

  do Retrieve-Employees
  do Process-Main

  if #Employees_On_Page > 0 and #Employees_On_Page < 17
    do Page-Complete
  end-if

  do Delete-Work-File
  do Stdapi-Term

end-report

begin-procedure Init-Report
  display 'Quarterly Employee Wage List - Minnesota'

  do Init-DateTime
  do Init-Number

  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate to $AsOfDate  !for included procedures
  do Get-Calendar-Year-Id
  do Stdapi-Init

  if $prcs_process_instance = ''
    input $ReportDueDate  'Enter Report Due Date ({Prompt-Date})' type=char
    move '1' to $MMLZero
    do Format-DateTime($ReportDueDate, $out, {Prompt-Mask}, '', '')
    input $Phone  'Enter Employer''s Phone Number'
  else
    do Select-Parameters
    move $RC_QTR_UI.Report_Due_Date to $out
    move '0' to $Year4
    do Format-DateTime($out,$ReportDueDate, {DEFMDY}, '', '')
    move $RC_QTR_UI.Phone           to $Phone
  end-if

  do Initialize
end-procedure

begin-procedure Initialize
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'MN' to $State
#endif
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum

  do Delete-Work-File

end-procedure

begin-heading 21
  do Format-Number(#PAGE_NUM, $out, '999')
  print $out                      (3,9)
  do Format-Number(#TotalPages, $out, '999')
  print $out                      (0,+2)

  let $Employer_ID = RTRIM($Employer_ID, ' ')
  let $Employer_ID_Ext = RTRIM($Employer_ID_Ext, ' ')
  print $Employer_ID              (7,3)
  print $Employer_ID_Ext          (7,16)

  uppercase $CompanyName
  print $CompanyName              (12,3)
  move $Compnyadd1 to $CoAddress
  uppercase $CoAddress
  print $CoAddress                (+1,3)
  let $field = RTRIM($Compnycity, ' ')
  uppercase $field
  print $field                    (+1,3)
  print &CT.State                 ()      edit ,bxx
  move  &CT.Postal                 to $Zip
  move  &CT.Postal                 to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
      let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  print $Zip                       (0,+2)
  print &TX.Balance_Qtr                 (12,34)
  print &TX.Balance_Year         (,+3)
  print $ReportDueDate            (,+4)
  print $Phone                    (16,34)
  do Format-Number(#PageTotal, $out, '99999999.99')
  print $out                      (58,60)

end-heading

begin-procedure Retrieve-Employees

begin-SELECT
C.COMPANY        () on-break print=never level=1 before=Get-Company-Employer-ID
C.STATE
C.EMPLID
C.TAX_CLASS
C.LOCALITY
C.TXGRS_QTD
C.NLGRS_QTD
PN.NAME
PN.LAST_NAME
PN.FIRST_NAME
PN.MIDDLE_NAME
D1.NATIONAL_ID

  move &C.Company to $Company
  move &C.EmplID  to $EmplID
  move &C.State   to $Emp_State
  move &C.Locality   to $Locality
  move &C.Tax_Class  to $Tax_Class
  move &C.Txgrs_QTD  to #Txgrs_QTD
  move &C.Nlgrs_QTD  to #Nlgrs_QTD
  move &D1.National_ID to $National_ID
  move &PN.Name    to $Name
  move &PN.LAST_NAME    to $LastName
  move &PN.FIRST_NAME   to $FirstName
  move &PN.MIDDLE_NAME  to $MiddleName
  do Get-Employer-ID
  do Insert-Work-Record

FROM  PS_TAX_BALANCE C, PS_PERS_NID D1, PS_COMPANY_TBL A, PS_PERSON_NAME PN
WHERE C.EMPLID            = D1.EMPLID
  AND C.EMPLID            = PN.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
#ifdef TAXTEST
  AND C.STATE             = 'CA'
#else
  AND C.STATE             = 'MN'
#endif
  AND C.LOCALITY          = ' '
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND C1.BALANCE_ID     = C.BALANCE_ID
         AND C1.BALANCE_YEAR   = C.BALANCE_YEAR
         AND C1.BALANCE_QTR    = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD > 0
  AND A.COMPANY = C.COMPANY
  AND A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY C.COMPANY, D1.NATIONAL_ID, C.STATE, C.LOCALITY, C.TAX_CLASS
end-SELECT

end-procedure

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
WRK.COMPANY         () on-break print=never level=1 before=Company-Change
WRK.EMPLOYER_ID     () on-break print=never level=1 before=Company-Change
WRK.EMPLOYER_ID_EXT () on-break print=never level=1 before=Company-Change
WRK.STATE
WRK.EMPLID         () on-break print=never level=2 after=EmplID-Change
WRK.TAX_CLASS
WRK.LOCALITY
WRK.TXGRS_QTD
WRK.NLGRS_QTD
WRK.NATIONAL_ID    () on-break print=never level=2 save=$SSN
WRK.NAME           () on-break print=never level=2 save=$Name
WRK.LAST_NAME
WRK.FIRST_NAME
WRK.MIDDLE_NAME

  move &WRK.Company to $Company
  move &WRK.EmplID  to $EmplID
  move &WRK.Employer_ID to $Employer_ID
  move &WRK.Employer_ID_Ext to $Employer_ID_Ext
  let $LastName   = rtrim(&WRK.LAST_NAME, ' ')
  let $FirstName  = rtrim(&WRK.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&WRK.MIDDLE_NAME,1,1)

  do Process-Tax-Balance

FROM  PS_R_TAX002MN WRK
ORDER BY WRK.COMPANY, WRK.EMPLOYER_ID, WRK.EMPLOYER_ID_EXT,
         WRK.NATIONAL_ID, WRK.STATE, WRK.LOCALITY, WRK.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Tax-Balance
  do Format-Number(&WRK.NLGrs_QTD, $NLGrs_QTD, '99999999.99')
  add &WRK.NLGrs_QTD to #PageTotal
  move &WRK.EmplID to $EmplID

  move 'PS_RC_TAX810MN D'  to $TAX810X1
  move 'PS_RC_TAX810MN D1' to $TAX810X2
  move 'PS_RC_TAX810MN D2' to $TAX810X3
  move 'PS_RC_TAX810MN D3' to $TAX810X4

  do Get-Hours
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

end-procedure

begin-procedure EmplID-Change
  move $SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM($SSN, ' ') = ''
    print ' '           (+2,4)
  else
    print $SSN          (+2,4) edit xxxxxxxxx
  end-if

  uppercase $LastName
  print $LastName           (0,20,12)
  uppercase $FirstName
  print $FirstName          (0,41,8)
  print $MidInitial         (0,55)

  print $NLGrs_QTD          (0,60)
  print $Hours              (0,75)

  move '' to $NLGrs_QTD
  move '' to $Hours

  do Get-Officer-Code
  print $Officer_Cd         (0,80)

  add 1 to #Employees_On_Page

  if #Employees_On_Page = 17
    do Page-Complete
  end-if
end-procedure

begin-procedure Get-Total
begin-SELECT

COUNT(*)          &EmplCount

FROM  PS_R_TAX002MN TW
WHERE TW.COMPANY         = &WRK.Company
  AND TW.EMPLOYER_ID     = &WRK.Employer_ID
  AND TW.EMPLOYER_ID_EXT = &WRK.Employer_ID_Ext
end-SELECT
  let #TotalPages = CEIL(&EmplCount/17)
end-procedure

begin-procedure Get-Officer-Code
  move ' ' to $Officer_Cd
begin-select
J.OFFICER_CD
  if &J.Officer_Cd <> 'N'
    move 'X' to $Officer_Cd
  end-if
 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID
  AND J.COMPANY  = $Company
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select
end-procedure

begin-procedure Page-Complete
  add 1 to #PAGE_NUM
  new-page
  move 0 to #PageTotal
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Company-Change
  if #Employees_On_Page < 17 and #Employees_On_Page > 0
    do Page-Complete
  end-if
  move 0 to #PAGE_NUM
  move &WRK.Company to $Company
  do Get-Company-Data
  do Get-Total
end-procedure

begin-procedure Ignore
end-procedure

begin-procedure Get-Company-Employer-ID

  move &C.Company to $Company
  do Get-State-Tax-Data

  if RTRIM(&Employer_ID_SUT, ' ') <> ''
     let $Employer_ID_Def = &Employer_ID_SUT
  else
     let $Employer_ID_Def = &Employer_ID_SWT
  end-if

end-procedure

begin-procedure Get-Employer-ID

  let $Employer_ID      = $Employer_ID_Def
  let $Employer_ID_Ext  = ' '

  let $Job_Found = 'N'
  do Get-Active-Job

  if $Job_Found = 'N'
    do Get-Inactive-Job
  end-if

  if $Job_Found = 'Y'
    do Get-Employer-ID-Extension
  end-if
end-procedure

begin-procedure Get-Active-Job

begin-select
JOB.BUSINESS_UNIT
JOB.TAX_LOCATION_CD                                                     !HP00006

  let $Business_Unit = &JOB.BUSINESS_UNIT
  let $Tax_Location  = &JOB.TAX_LOCATION_CD                             !HP00006
  let $Job_Found     = 'Y'

FROM PS_JOB JOB
WHERE JOB.EMPLID     = $EmplID
  AND JOB.COMPANY    = $Company
  AND JOB.EMPL_RCD  =
      (SELECT MIN(EMPL_RCD)
         FROM PS_JOB
        WHERE EMPLID    = JOB.EMPLID
          AND COMPANY   = JOB.COMPANY
          AND EMPL_STATUS = 'A')
  AND JOB.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = JOB.EMPLID
          AND COMPANY   = JOB.COMPANY
          AND EMPL_RCD = JOB.EMPL_RCD
          AND EFFDT    <= $AsOfDate)
  AND JOB.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = JOB.EMPLID
          AND COMPANY   = JOB.COMPANY
          AND EMPL_RCD = JOB.EMPL_RCD
          AND EFFDT     = JOB.EFFDT)
end-select
end-procedure

begin-procedure Get-Inactive-Job

begin-select
JOB1.BUSINESS_UNIT
JOB1.TAX_LOCATION_CD                                                    !HP00006

  let $Business_Unit = &JOB1.BUSINESS_UNIT
  let $Tax_Location  = &JOB1.TAX_LOCATION_CD                            !HP00006
  let $Job_Found     = 'Y'

FROM PS_JOB JOB1
WHERE JOB1.EMPLID     = $EmplID
  AND JOB1.COMPANY    = $Company
  AND JOB1.EMPL_RCD  =
      (SELECT MIN(EMPL_RCD)
         FROM PS_JOB
        WHERE EMPLID    = JOB1.EMPLID
          AND COMPANY   = JOB1.COMPANY)
  AND JOB1.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = JOB1.EMPLID
          AND COMPANY   = JOB1.COMPANY
          AND EMPL_RCD = JOB1.EMPL_RCD
          AND EFFDT    <= $AsOfDate)
  AND JOB1.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = JOB1.EMPLID
          AND COMPANY   = JOB1.COMPANY
          AND EMPL_RCD = JOB1.EMPL_RCD
          AND EFFDT     = JOB1.EFFDT)
end-select
end-procedure

begin-procedure Get-Employer-ID-Extension
begin-select
LOC.EMPLOYER_ID_EXT

  let $Employer_ID_Ext = &LOC.Employer_ID_Ext

FROM PS_CO_UI_RPTCD_TBL LOC
WHERE LOC.COMPANY = $Company
  AND LOC.LOCATION = $Tax_Location                                      !HP00006
  AND LOC.EFFDT =
      (SELECT MAX(EFFDT)
         FROM PS_CO_UI_RPTCD_TBL
        WHERE COMPANY  = LOC.COMPANY
          AND LOCATION = LOC.LOCATION
          AND EFFDT   <= $AsOfDate)
  AND LOC.EFF_STATUS = 'A'
end-select
end-procedure

begin-procedure Insert-Work-Record

  let $Txgrs_QTD = #Txgrs_QTD
  let $Nlgrs_QTD = #Nlgrs_QTD

  let $err-statement1 = 'TAX002MN, Insert-Error - INSERT-WORK-RECORD'
  let $err-statement2 = 'Key Values: TABLE PS_R_TAX002MN' ||
                        ', COMPANY ' || $Company ||
                        ', EMPLOYER_ID ' || $Employer_ID ||
                        ', EMPLOYER_ID_EXT ' || $Employer_ID_Ext ||
                        ', NATIONAL_ID ' || $National_ID ||
                        ', STATE ' || $Emp_State ||
                        ', EMPLID ' || $Emplid ||
                        ', NAME ' || $Name ||
                        ', LAST_NAME ' || $LastName ||
                        ', FIRST_NAME ' || $FirstName ||
                        ', MIDDLE_NAME ' || $MiddleName ||
                        ', TAX_CLASS ' || $Tax_Class ||
                        ', LOCALITY ' || $Locality ||
                        ', TXGRS_QTD ' || $Txgrs_QTD ||
                        ', NLGRS_QTD ' || $Nlgrs_QYD

begin-SQL on-error=Error-Display
  INSERT INTO PS_R_TAX002MN
        (COMPANY,
         EMPLOYER_ID,
         EMPLOYER_ID_EXT,
         NATIONAL_ID,
         STATE,
         EMPLID,
         NAME,
         LAST_NAME,
         FIRST_NAME,
         MIDDLE_NAME,
         TAX_CLASS,
         LOCALITY,
         TXGRS_QTD,
         NLGRS_QTD)
 VALUES ($Company,
         $Employer_ID,
         $Employer_ID_Ext,
         $National_ID,
         $Emp_State,
         $EmplID,
         $Name,
         $LastName,
         $FirstName,
         $MiddleName,
         $Tax_Class,
         $Locality,
         #Txgrs_QTD,
         #Nlgrs_QTD)
end-SQL
end-procedure

begin-procedure Delete-Work-File

  let $err-statement1 = 'TAX002MN, Delete-Error - DELETE-WORK-FILE'
  let $err-statement2 = ' '

begin-SQL On-Error=Error-Display
DELETE FROM PS_R_TAX002MN
end-SQL

end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'gethours.sqc'  !Get-Hours procedure
#Include 'datemath.sqc'  !Date math procedures

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get Run Controls for Process Scheduler

#Include 'stderror.sqc'  !Routine for error display
