!***********************************************************************
! BAS702B: Benefit Program (Costs) -Benefits Administration
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/28:02:07:35                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define  MAX_LINES   56     !Maximum print lines for landscape mode

#define col_sep                  2   !Column Separator
#define col_sep1                 1   !Column Separator

#define col_plan_type           13   !Plan Type
#define col_optn_type           12   !Option Type
#define col_optcd                5   !OptCD
#define col_ben_plan_descr      37   !Benefit Plan Description
#define col_cover_code          13   !Coverage Code
#define col_ded_code            16   !Deduction Code
#define col_id                   3   !ID
#define col_type                 8   !Type
#define col_earn_code           15   !Earning Code
#define col_rate_type           15   !Rate Type
#define col_rate_table           5   !Rate Table
#define col_calc_rules           5   !Calc Rules

!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number
  do StdAPI-Init

  let $ReportID    = 'BAS702B'
  do Get-Report-Language
  move $BAS702B-REPORTTITLE TO $ReportTitle
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  let #CurRptLine    = {MAX_LINES} + 1
  let $FirstPageFlag = 'YES'
  let $PriorPlanType = ''

  if IsBlank($prcs_process_instance)
    do Ask-Values
  else
    do Get-Values
  end-if

  Do Set-Tbl-Lookup

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  do Ask-As-Of-Date
  !We will need to manipulate $AsOfDate to control other std procedures such
  !as Read-Translate-Table, Get-Benefit-Name, and Get-Deduction-Name.
  !Therefore we will copy this into $UserAsOfDate for safekeeping...
  let $UserAsOfDate = $AsOfDate

  do Ask-Benefit-Program

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-As-Of-Date
  let $UserAsOfDate = $AsOfDate

  do Get-Benefit-Program

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS702B program IDS
do Init_Report_Translation($ReportID, $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS702B', 'REPORT_TITLE',   $BAS702B-REPORTTITLE,   #CW)
do Get_Field_Information ('BAS702B', 'PGM_DEF_AS_OF',  $BAS702B-PGM-DEF-AS-OF, #CW)
do Get_Field_Information ('BAS702B', 'BEN_DED_PGM',    $BAS702B-BEN-DED-PGM,   #CW)
do Get_Field_Information ('BAS702B', 'COST_INFO',      $BAS702B-COST-INFO,     #CW)
do Get_Field_Information ('BAS702B', 'PGM_TYPE',       $BAS702B-PGM-TYPE,      #CW)
do Get_Field_Information ('BAS702B', 'PGM_EFFDT',      $BAS702B-PGM-EFFDT,     #CW)
do Get_Field_Information ('BAS702B', 'COVER_INFO',     $BAS702B-COVER-INFO,    #CW)
do Get_Field_Information ('BAS702B', 'COST_INFO',      $BAS702B-COST-INFO,     #CW)
do Get_Field_Information ('BAS702B', 'RATE_TYPE',      $BAS702B-RATE-TYPE,     #CW)
do Get_Field_Information ('BAS702B', 'BEN_PLAN_DESCR', $BAS702B-BEN-PLAN-DESCR,#CW)
do Get_Field_Information ('BAS702B', 'EARN_CODE',      $BAS702B-EARN-CODE,     #CW)
do Get_Field_Information ('BAS702B', 'CALC',           $BAS702B-CALC,          #CW)

do Get_Field_Information ('BEN1', 'PLAN_TYPE',         $BEN1-PLAN-TYPE,  #CW)
do Get_Field_Information ('BEN1', 'OPTN_TYPE',         $BEN1-OPTN-TYPE,  #CW)
do Get_Field_Information ('BEN1', 'OPTCD',             $BEN1-OPTCD,      #CW)
do Get_Field_Information ('BEN1', 'COVER_CD2',         $BEN1-COVER-CD2,  #CW)
do Get_Field_Information ('BEN1', 'DED_CD2',           $BEN1-DED-CD2,    #CW)
do Get_Field_Information ('BEN1', 'TABLE',             $BEN1-TABLE,      #CW)
do Get_Field_Information ('BEN1', 'ID',                $BEN1-ID,         #CW)
do Get_Field_Information ('BEN1', 'TYPE',              $BEN1-TYPE,       #CW)
do Get_Field_Information ('BEN1', 'RULES',             $BEN1-RULES,      #CW)
do Get_Field_Information ('BEN1', 'RATE',              $BEN1-RATE,       #CW)

End-Procedure

!***************************************
Begin-Procedure Ask-Benefit-Program
!***************************************

  input $Benefit_Program -
  'Enter Benefit Program to report (Leave blank for ALL Programs)'
  let $Benefit_Program = RTRIM(UPPER($Benefit_Program), ' ')

  if IsBlank($Benefit_Program)
    let $Benefit_Program = '%'
  end-if

End-Procedure

!******************************************************
Begin-Procedure Make_Where_For_XLAT($KeyField, :$Where)
!******************************************************

  let $Where = 'FIELDNAME=''' || $KeyField || ''' '

  if Not IsBlank($_Language_Cd) And RTrim($_Language_Cd,' ') <> RTrim($_SQR_Default_Language, ' ')

    let $Where = $Where || 'And FIELDVALUE Not In '
    let $Where = $Where || '(Select FIELDVALUE '
    let $Where = $Where || ' From PSXLATITEMLANG '
    let $Where = $Where || ' Where FIELDNAME=''' || $KeyField || ''' '
    let $Where = $Where || ' And LANGUAGE_CD=''' || $_Language_Cd || ''') '
    let $Where = $Where || 'UNION '
    let $Where = $Where || 'Select Distinct FIELDVALUE, XLATSHORTNAME '
    let $Where = $Where || 'From PSXLATITEMLANG '
    let $Where = $Where || 'Where FIELDNAME=''' || $KeyField || ''' '
    let $Where = $Where || 'And LANGUAGE_CD=''' || $_Language_Cd || ''' '

  end-if

End-Procedure

!******************************************************
Begin-Procedure Make_Where_For_RateType(:$Where)
!******************************************************

  let $Where = ' ''X''=''X'' '

  if Not IsBlank($_Language_Cd) And RTrim($_Language_Cd,' ') <> RTrim($_SQR_Default_Language, ' ')

    let $Where = $Where || 'And RATE_TYPE Not In '
    let $Where = $Where || '(Select RATE_TYPE '
    let $Where = $Where || ' From PS_BN_RATETYPE_LNG '
    let $Where = $Where || ' Where LANGUAGE_CD=''' || $_Language_Cd || ''') '
    let $Where = $Where || 'UNION '
    let $Where = $Where || 'Select Distinct RATE_TYPE, DESCRSHORT '
    let $Where = $Where || 'From PS_BN_RATETYPE_LNG '
    let $Where = $Where || 'Where LANGUAGE_CD=''' || $_Language_Cd || ''' '

  end-if

End-Procedure

!***************************************
Begin-Procedure Set-Tbl-Lookup
!***************************************

  do Make_Where_For_XLAT('PLAN_TYPE', $load_where)
  load-lookup name=TblPlanTypes
              rows=50
              table=PSXLATITEM
              key=FIELDVALUE
              return_value=XLATSHORTNAME
              where=$load_where
              quiet

  do Make_Where_For_XLAT('OPTION_TYPE', $load_where)
  load-lookup name=TblOptTypes
              rows=10
              table=PSXLATITEM
              key=FIELDVALUE
              return_value=XLATSHORTNAME
              where=$load_where
              quiet

  do Make_Where_For_XLAT('COST_TYPE', $load_where)
  load-lookup name=TblCostTypes
              rows=10
              table=PSXLATITEM
              key=FIELDVALUE
              return_value=XLATSHORTNAME
              where=$load_where
              quiet

  do Make_Where_For_RateType($load_where)
  load-lookup name=TblRateTypes
              rows=30
              table=PS_BN_RATE_TYPE
              key=RATE_TYPE
              return_value=DESCRSHORT
              where=$load_where
              quiet

End-Procedure

!***************************************
Begin-Procedure Print-Main-Heading
!***************************************

  if ($FirstPageFlag <> 'YES')
    new-page
  end-if

#Include 'stdhdgtr.sqc'     !Standard Report header

  let #CurRptLine = 5

!*** 'Program Definition as of: '
  print $BAS702B-PGM-DEF-AS-OF         (+1,1)
  do Format-DateTime($UserAsOfDate, $OutDt, {DEFDATE}, '', '')
  print $OutDt                         (0,28)

!*** 'Benefit/Deduction Program: '
  print $BAS702B-BEN-DED-PGM            (+2,1)
  print &P.BENEFIT_PROGRAM              (0,28,3)
  print ' - '                           ()
  print $BenefitProgramName             ()
!*** '(Program Type: '
  print $BAS702B-PGM-TYPE               (0,+2)
  print $ProgramType                    ()
  print ')'                             ()

!*** 'Program Effective Date   : '
  print $BAS702B-PGM-EFFDT              (+1,1)
  print $ProgramEffDt                   (0,28)

  add 4 to #CurRptLine

!Column Heading line 1
  print '|'                        (+2,1)
  print '-'                        (0,+0,40) FILL
  print $BAS702B-COVER-INFO        ()
  print '-'                        (0,68,40) FILL
  print '|'                        (0,108)
  print '|'                        (0,111)
  print '-'                        (0,+0,20) FILL
  print $BAS702B-COST-INFO         ()
  print '-'                        (0,152,18) FILL
  print '|'                        (0,170)

!Column Heading line 2
  print '|'                        (+1,1)
  print ''                         (0,+0,{col_plan_type})
  print ''                         (0,+{col_sep},{col_optn_type})
  print ''                         (0,+{col_sep},{col_optcd})
  print ''                         (0,+{col_sep},{col_ben_plan_descr})
  print ''                         (0,+{col_sep},{col_cover_code})
  print ''                         (0,+{col_sep},{col_ded_code})
  print '|'                        (0,108)
  print '|'                        (0,111)
  print ''                         (0,+0,{col_id})
  print ''                         (0,+{col_sep},{col_type})
  print ''                         (0,+{col_sep},{col_earn_code})
  print ''                         (0,+{col_sep1},{col_rate_type})
  print $BEN1-RATE                 (0,+{col_sep1},{col_rate_table})
  print $BAS702B-CALC              (0,+{col_sep1},{col_calc_rules})
  print '|'                        (0,170)

!Column Heading line 3
  print '|'                        (+1,1)
  print $BEN1-PLAN-TYPE            (0,0,{col_plan_type})
  print $BEN1-OPTN-TYPE            (0,+{col_sep},{col_optn_type})
  print $BEN1-OPTCD                (0,+{col_sep},{col_optcd})
  print $BAS702B-BEN-PLAN-DESCR    (0,+{col_sep},{col_ben_plan_descr})
  print $BEN1-COVER-CD2            (0,+{col_sep},{col_cover_code})
  print $BEN1-DED-CD2              (0,+{col_sep},{col_ded_code})
  print '|'                        (0,108)
  print '|'                        (0,111)
  print $BEN1-ID                   (0,+0,{col_id})
  print $BEN1-TYPE                 (0,+{col_sep},{col_type})
  print $BAS702B-EARN-CODE         (0,+{col_sep},{col_earn_code})
  print $BAS702B-RATE-TYPE         (0,+{col_sep1},{col_rate_type})
  print $BEN1-TABLE                (0,+{col_sep1},{col_rate_table})
  print $BEN1-RULES                (0,+{col_sep1},{col_calc_rules})
  print '|'                        (0,170)

!Column Heading line 4
  print '|'                        (+1,1)
  print '='                        (0,0,{col_plan_type})               FILL
  print '='                        (0,+{col_sep},{col_optn_type})      FILL
  print '='                        (0,+{col_sep},{col_optcd})          FILL
  print '='                        (0,+{col_sep},{col_ben_plan_descr}) FILL
  print '='                        (0,+{col_sep},{col_cover_code})     FILL
  print '='                        (0,+{col_sep},{col_ded_code})       FILL
  print '|'                        (0,108)
  print '|'                        (0,111)
  print '='                        (0,+0,{col_id})                     FILL
  print '='                        (0,+{col_sep},{col_type})           FILL
  print '='                        (0,+{col_sep},{col_earn_code})      FILL
  print '='                        (0,+{col_sep1},{col_rate_type})      FILL
  print '='                        (0,+{col_sep1},{col_rate_table})     FILL
  print '='                        (0,+{col_sep1},{col_calc_rules})     FILL
  print '|'                        (0,170)

  add 5 to #CurRptLine
  let $FirstPageFlag    = 'NO'

End-Procedure

!***************************************
Begin-Procedure Process-Main
!***************************************


  let $Where_Clause = ''
  let $Quote = ''''

  Move ' P.BENEFIT_PROGRAM LIKE ' to $Where_Clause

  if ($Benefit_Program <> '%')
    #ifdef DB2ALL
      Move '' to $Where_Clause
      Concat ' P.BENEFIT_PROGRAM = ' with $Where_Clause
    #endif
  End-if
  Concat $Quote with $Where_Clause
  Concat $Benefit_Program with $Where_Clause
  Concat $Quote with $Where_Clause

Begin-Select

P.BENEFIT_PROGRAM
P.EFFDT
  do Format-DateTime(&P.EFFDT, $ProgramEffDt, {DEFDATE}, '', '')
  !This sets the effective date for fetching from PSXLATITEM and other
  !supporting tables...
  let $AsOfDate = &P.EFFDT
P.DESCR
  let $BenefitProgramName = RTRIM(&P.DESCR, ' ')
  move &P.BENEFIT_PROGRAM    to $BenProgram
  move &P.EFFDT              to $EffDate
  do Get-Benefit-Program-Name-Lang

P.PROGRAM_TYPE
  move 'PROGRAM_TYPE'  to $FieldName
  move &P.PROGRAM_TYPE to $FieldValue
  do Read-Translate-Table
  let $ProgramType = RTRIM($XlatShortName, ' ')

  do Print-Main-Heading
  do Process-Plans

FROM  PS_BEN_DEFN_PGM P

WHERE [$Where_Clause]
  AND P.EFF_STATUS = 'A'
  AND P.EFFDT      = (SELECT MAX(EFFDT)
                        FROM PS_BEN_DEFN_PGM
                       WHERE BENEFIT_PROGRAM = P.BENEFIT_PROGRAM
                         AND EFF_STATUS      = 'A'
                         AND EFFDT          <= $UserAsOfDate)

ORDER BY P.BENEFIT_PROGRAM ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Process-Plans
!***************************************

Begin-Select

PL.BENEFIT_PROGRAM
PL.EFFDT
PL.PLAN_TYPE
  let $LookupVal = &PL.PLAN_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&PL.PLAN_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&PL.PLAN_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLPLANTYPES $LookupVal $Out
  let $PlanDescr = &PL.PLAN_TYPE || '-' || $Out
PL.DISPLAY_PLN_SEQ

  do Process-Options

FROM  PS_BEN_DEFN_PLAN PL
WHERE PL.BENEFIT_PROGRAM = &P.BENEFIT_PROGRAM
  AND PL.EFFDT           = &P.EFFDT
  AND PL.PLAN_TYPE      <> '00'
ORDER BY PL.DISPLAY_PLN_SEQ ASC
!ORDER BY PL.PLAN_TYPE ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Process-Options
!***************************************

Begin-Select

O.BENEFIT_PROGRAM
O.EFFDT
O.PLAN_TYPE
O.OPTION_ID
O.OPTION_TYPE
  let $LookupVal = &O.OPTION_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&O.OPTION_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&O.OPTION_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLOPTTYPES $LookupVal $OptionType
O.OPTION_CD
O.BENEFIT_PLAN
  move &O.BENEFIT_PLAN to $Benefit_Plan
  move &O.PLAN_TYPE    to $Plan_Type
  move &O.EFFDT        to $AsofDate
  do Get-Benefit-Name               !Returns $BenefitName
O.COVRG_CD
  let $CovrgCd = &O.COVRG_CD
  let $CovrgEffdt = $AsOfDate
  do Get-Covrg-Code-Descr
  let $CovrgCode = $CovrgDescrShort
O.DEDCD
  move &O.PLAN_TYPE to $PlanType
  move &O.DEDCD     to $DedCd
  do Get-Deduction-Name       !Returns $DeductionAbbrv
O.DISPLAY_OPT_SEQ

  do Print-Coverage-Info
  do Process-Costs
  if ($FirstCostFlag = 'YES')   !No costs associated with this option.
    add 1 to #CurRptLine
  end-if

FROM  PS_BEN_DEFN_OPTN O
WHERE O.BENEFIT_PROGRAM  = &PL.BENEFIT_PROGRAM
  AND O.EFFDT            = &PL.EFFDT
  AND O.PLAN_TYPE        = &PL.PLAN_TYPE
ORDER BY O.DISPLAY_OPT_SEQ ASC
!ORDER BY O.OPTION_TYPE ASC, O.BENEFIT_PLAN ASC, O.COVRG_CD ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Print-Coverage-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES}-2)
    do Print-Main-Heading
  end-if

  if ($PriorPlanType <> &PL.PLAN_TYPE)
    print ' '  (+1,1)
    add 1 to #CurRptLine
    let $PriorPlanType = &PL.PLAN_TYPE
  end-if

  print $PlanDescr                 (+1,2,13)
  print &O.OPTION_TYPE             (0,+2,1)
  print '-'                        ()
  print $OptionType                (0,0,10)
  print &O.OPTION_CD               (0,+4,3)
  print &O.BENEFIT_PLAN            (0,+2,6)
  print '-'                        ()
  print $BenefitName               (0,0,30)
  print &O.COVRG_CD                (0,+2,2)
  print '-'                        ()
  print $CovrgCode                 (0,0,10)
  print &O.DEDCD                   (0,+3,6)
  print '-'                        ()
  print $DeductionAbbrv            (0,0,10)

  let $FirstCostFlag = 'YES'
  let $PlanDescr = ''

End-Procedure

!***************************************
Begin-Procedure Process-Costs
!***************************************

Begin-Select

C.BENEFIT_PROGRAM
C.EFFDT
C.PLAN_TYPE
C.OPTION_ID
C.COST_ID
C.COST_TYPE
  let $LookupVal = &C.COST_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&C.COST_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&C.COST_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLCOSTTYPES $LookupVal $CostType
C.ERNCD
  move &C.ERNCD to $ErnCd
  do Get-Earnings-Name    !Returns $EarningsAbbrv
C.RATE_TYPE
  let $LookupVal = &C.RATE_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&C.RATE_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&C.RATE_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLRATETYPES $LookupVal $RateType
C.RATE_TBL_ID
C.CALC_RULES_ID

  do Print-Cost-Info

FROM  PS_BEN_DEFN_COST C

WHERE C.BENEFIT_PROGRAM = &O.BENEFIT_PROGRAM
  AND C.EFFDT           = &O.EFFDT
  AND C.PLAN_TYPE       = &O.PLAN_TYPE
  AND C.OPTION_ID       = &O.OPTION_ID
ORDER BY C.COST_ID ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Print-Cost-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES})
    do Print-Main-Heading
  end-if

  if ($FirstCostFlag = 'YES')
    print &C.COST_ID                 (0,112,3) edit 999
  else
    print &C.COST_ID                 (+1,112,3) edit 999
  end-if
  print &C.COST_TYPE               (0,+2,1)
  print '-'                        ()
  print $CostType                  (0,0,6)
  print &C.ERNCD                   (0,+2,3)
  print '-'                        ()
  print $EarningsAbbrv             (0,0,10)
  print &C.RATE_TYPE               (0,+2,4)
  print '-'                        ()
  print $RateType                  (0,0,10)
  print &C.RATE_TBL_ID             (0,+1,4)
  print &C.CALC_RULES_ID           (0,+2,4)

  let $FirstCostFlag = 'NO'
  add 1 to #CurRptLine

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'getpgmnm.sqc'  !Get-Benefit-program-Name-Lang procedure
#Include 'getbennm.sqc'  !Get-Benefit-Name procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'geternnm.sqc'  !Get-Earnings-Name procedure
#Include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!****************************** End Of Report *******************************
