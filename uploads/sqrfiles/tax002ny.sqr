!***********************************************************************
!  TAX002NY:  Qtrly State Employee Wage List - NEW YORK                *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/21:12:45:52                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP99998       E&G 7.51 AU Merge                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report
  do Process-Main

  if #Employees_On_Page > 0 and #Employees_On_Page < 15
    do Page-Complete
  end-if
  do Delete-Temp-Table

  if #Count_S > 0
    display ''
    display 'Employess with negative amounts listings'
    display 'will be written to file: TAX002NY'
    display 'Company totals are written to file: TAX002CP'
  end-if

  display 'Employees Reported ' noline
  move #Employees_Reported to $EE_RPT  999999999
  display $EE_RPT

  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  display 'Quarterly Combined Return - New York'
  do Get-Calendar-Year-Id
  do Stdapi-Init
  move 0 to #Count_S
  do Open-File

  do Initialize
end-procedure

begin-procedure Open-File

  open '{IMPORTPREFIX}TAX002NY{IMPORTSUFFIX}' as 10 for-writing record=80:fixed
  open '{IMPORTPREFIX}TAX002CP{IMPORTSUFFIX}' as 11 for-writing record=80:fixed

  write 10 from                $Sp:15
  'New York Negative Wage Listing':30
                               $Sp:35
  write 10 from                $Sp:80
  write 10 from                $Sp:80
  write 10 from      'EmplID':14
                          $Sp:3
                'Gross Wages':14
                          $Sp:3
                'Gross Wages':14
                          $Sp:6
                      'Total':14
                          $Sp:12
  write 10 from           $Sp:17
                  'Paid this':14
                          $Sp:3
                 'Subject to':14
                          $Sp:6
                        'Tax':14
                          $Sp:12
  write 10 from           $Sp:17
                    'Quarter':14
                          $Sp:3
                 'Withholding':14
                          $Sp:6
                   'Withheld':14
                          $Sp:12
  write 10 from           $Sp:19
                        '(c)':14
                          $Sp:6
                        '(d)':14
                          $Sp:3
                        '(e)':14
                          $Sp:10
  write 10 from                $Sp:80
  write 10 from                $Sp:80

  write 11 from                               $Sp:10
  'NYS-4-ATT Continuation Sheet - Company Totals':50
                                              $Sp:20
  write 11 from                               $Sp:80
  write 11 from                               $Sp:80
  write 11 from     'Company':14
                          $Sp:3
                'Gross Wages':14
                          $Sp:3
                'Gross Wages':14
                          $Sp:6
                      'Total':14
                          $Sp:12
  write 11 from           $Sp:17
                  'Paid this':14
                          $Sp:3
                 'Subject to':14
                          $Sp:6
                          'Tax':14
                          $Sp:12
  write 11 from           $Sp:17
                    'Quarter':14
                          $Sp:3
                 'Withholding':14
                          $Sp:6
                   'Withheld':14
                          $Sp:12
  write 11 from           $Sp:19
                        '(c)':14
                          $Sp:6
                        '(d)':14
                          $Sp:3
                        '(e)':14
                          $Sp:10
  write 11 from                               $Sp:80
  write 11 from                               $Sp:80


end-procedure

begin-procedure Initialize
  do Delete-Temp-Table
  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate to $AsOfDate  !for included procedures
end-procedure

begin-heading 19
  evaluate &TX.Balance_Qtr
    when = 1
      move 43 to #XPosition
    when = 2
      move 50 to #XPosition
    when = 3
      move 57 to #XPosition
    when = 4
      move 64 to #XPosition
  end-evaluate
  print 'X'                       (9,#XPosition)
  print 'Qtr 1'                   (8,41)
  print 'Qtr 2'                   (8,48)
  print 'Qtr 3'                   (8,55)
  print 'Qtr 4'                   (8,62)
  print '['                       (9,41)
  print ']'                       (9,46)
  print '['                       (9,48)
  print ']'                       (9,53)
  print '['                       (9,55)
  print ']'                       (9,60)
  print '['                       (9,62)
  print ']'                       (9,67)
  print 'Tax Yr'                  (8,73)
  print 'yy'                      (9,74)
  print &TX.Balance_Year          (9,77)   edit ~~xx underline
  print 'Page '                   (2,66)
  do Format-Number(#PAGE_NUM, $out, '9999')
  let $out = ltrim($out,' ')
  print $out                      (2,72) underline
  print 'of'                      (0,+2)
  do Format-Number(#TotalPages, $out, '9999')
  let $out = ltrim($out,' ')
  print $out                      (0,+1) underline

  print 'Totals this page only'   (55,5)
  do Format-Number(#PageTotalGrs, $out, '99999999.99')
  print $out                      (55,42)
  do Format-Number(#PageTotalTxGrs, $out, 'b9999999.99')
  print $out                      (55,57)
  do Format-Number(#PageTotalTax  , $out, 'b9999999.99')
  print $out                      (55,69)

  print 'New York State Withholding Tax' (3,1)
  print 'Quarterly Combined Withholding and Wage Reporting Return - Part B' (4,1)
  print 'NYS-4-ATT Continuation Sheet  ' (5,1)
  print 'Withholding ID# '               (7,1)
  print $StateEin                        (7,18) underline
  print 'Legal Name:'                    (7,35)
  print $CompanyName                     (7,46) underline
  print 'Seasonal'                       (10,46)
  print '[    ]'                         (10,+1)
  print '   Wages'                       (11,46)
  print '[ X  ]'                         (11,+1)
  print 'Other Wages'                    (11,62)
  print '[    ]'                         (11,+1)
  print 'Check box for amended return'   (12,45)
  print '[    ]'                         (12,+1)
  print 'Social'                         (14,5)
  print 'Last name,'                     (14,19)
  print 'Gross Wages'                    (14,42)
  print 'Gross Wages'                    (14,57)
  print 'Total'                          (14,72)
  print 'Security'                       (15,5)
  print 'first name,'                    (15,19)
  print 'Paid this'                      (15,42)
  print 'Subject to'                     (15,57)
  print 'Tax'                            (15,72)
  print 'Number'                         (16,5)
  print 'middle'                         (16,19)
  print 'Quarter'                        (16,42)
  print 'Withholding'                    (16,57)
  print 'Withheld'                       (16,72)
  print '(a)'                            (17,7)
  print 'initial'                        (17,19)
  print '(c)'                            (17,47)
  print '(d)'                            (17,62)
  print '(e)'                            (17,74)
  print '(b)'                            (18,24)


end-heading

begin-procedure Process-Main

  Show 'Calendar Year: ' $Calendar_Year_Id
  Show 'Balance  Year: ' &TX.Balance_Year
  Show 'Balance  Qtr:  ' &TX.Balance_Qtr
  Show 'Asofdate:      ' $Asofdate


begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.TAX_REPORT_TYPE

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  if &TX.Balance_Qtr = 4
    if &A.TAX_REPORT_TYPE = '2' or 
       &A.TAX_REPORT_TYPE = 'R'
       do Select-EE-YTD
    end-if
  else
    if &A.TAX_REPORT_TYPE = '2'
      do Select-EE-QTD
    end-if
  end-if

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  do Print-Report

end-procedure


begin-procedure Select-EE-QTD
begin-SELECT
C.COMPANY
C.STATE
C.EMPLID
C.NLGRS_QTD
D1.NATIONAL_ID
PN.LAST_NAME
PN.FIRST_NAME
PN.MIDDLE_NAME

  let #Grs_QTD = &C.NlGrs_QTD

  move &D1.NATIONAL_ID   to $SSN
  move &C.EmplID         to $EmplID
  move &PN.LAST_NAME      to $LastName
  move &PN.FIRST_NAME     to $FirstName
  move &PN.MIDDLE_NAME    to $MiddleName
  do Insert-Empl

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME PN,  PS_PERS_NID D1
WHERE C.COMPANY       = $Company
  AND PN.EMPLID           = C.EMPLID
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'NY'
#endif
  AND C.LOCALITY      = ' '
  AND C.TAX_CLASS     = 'U'
  AND C.NLGRS_QTD    <> 0
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND  C1.BALANCE_ID    = C.BALANCE_ID
         AND  C1.BALANCE_YEAR  = C.BALANCE_YEAR
         AND  C1.BALANCE_QTR   = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.EMPLID = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $payroll_NID_type
ORDER BY C.COMPANY, D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Select-EE-YTD
begin-SELECT
PD1.NATIONAL_ID
TB.EMPLID () on-break print=never level=1 After=After-EE
TB.TAX_YTD
PN1.LAST_NAME
PN1.FIRST_NAME
PN1.MIDDLE_NAME

  move &PD1.NATIONAL_ID  to $SSN
  move &TB.EmplID       to $EmplID
  move &PN1.LAST_NAME     to $LastName
  move &PN1.FIRST_NAME    to $FirstName
  move &PN1.MIDDLE_NAME   to $MiddleName

  add &TB.Tax_YTD  to #Tax_YTD

FROM  PS_TAX_BALANCE TB, PS_PERSON_NAME PN1, PS_PERS_NID PD1
WHERE TB.COMPANY       = $Company
  AND PN1.EMPLID        = TB.EMPLID
#ifdef TAXTEST
  AND TB.STATE         = 'CA'
#else
  AND TB.STATE         = 'NY'
#endif
  AND TB.LOCALITY     IN (' ','P0001','84000') !SWT, NYC, Yonkers
  AND TB.TAX_CLASS     = 'H'                   !Withholding
  AND TB.BALANCE_ID    = $Calendar_Year_Id
  AND TB.BALANCE_YEAR  = &TX.Balance_Year
  AND (TB.TXGRS_YTD   <> 0 OR
       TB.TAX_YTD     <> 0 )
  AND TB.BALANCE_PERIOD       =
      (SELECT MAX(TB2.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB2
       WHERE  TB2.EMPLID        = TB.EMPLID
         AND  TB2.COMPANY       = TB.COMPANY
         AND  TB2.BALANCE_ID    = TB.BALANCE_ID
         AND  TB2.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND  TB2.STATE         = TB.STATE
         AND  TB2.LOCALITY      = TB.LOCALITY
         AND  TB2.TAX_CLASS     = TB.TAX_CLASS)

  AND TB.EMPLID = PD1.EMPLID
  AND PD1.COUNTRY = {NID_Country}
  AND PD1.NATIONAL_ID_TYPE = $payroll_NID_type
ORDER BY TB.EMPLID
end-SELECT

!Unemployment only records (people with no H records)

begin-SELECT
TB3.EMPLID () on-break print=never level=1 After=After-EE
PD31.NATIONAL_ID
TB3.NLGRS_QTD
PN3.LAST_NAME
PN3.FIRST_NAME
PN3.MIDDLE_NAME

  move &PD31.NATIONAL_ID  to $SSN
  move &TB3.EmplID        to $EmplID
  move &PN3.LAST_NAME     to $LastName
  move &PN3.FIRST_NAME    to $FirstName
  move &PN3.MIDDLE_NAME   to $MiddleName

  let #Grs_QTD = &TB3.NlGrs_QTD

FROM  PS_TAX_BALANCE TB3, PS_PERSON_NAME PN3,  PS_PERS_NID PD31
WHERE TB3.COMPANY       = $Company
  AND PN3.EMPLID        = TB3.EMPLID
#ifdef TAXTEST
  AND TB3.STATE         = 'CA'
#else
  AND TB3.STATE         = 'NY'
#endif
  AND TB3.LOCALITY      = ' '
  AND TB3.TAX_CLASS     = 'U'
  AND TB3.NLGRS_QTD    <> 0
  AND TB3.BALANCE_ID    = $Calendar_Year_Id
  AND TB3.BALANCE_YEAR  = &TX.Balance_Year
  AND TB3.BALANCE_QTR   = 4
  AND NOT EXISTS (SELECT 'X'
                  FROM PS_R_TAX002NY RU
                  WHERE RU.EMPLID = TB3.EMPLID
                  AND RU.COMPANY = TB3.COMPANY)
  AND TB3.BALANCE_PERIOD =
      (SELECT MAX(TB4.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB4
       WHERE  TB4.EMPLID        = TB3.EMPLID
         AND  TB4.COMPANY       = TB3.COMPANY
         AND  TB4.BALANCE_ID    = TB3.BALANCE_ID
         AND  TB4.BALANCE_YEAR  = TB3.BALANCE_YEAR
         AND  TB4.BALANCE_QTR   = TB3.BALANCE_QTR
         AND  TB4.STATE         = TB3.STATE
         AND  TB4.LOCALITY      = TB3.LOCALITY
         AND  TB4.TAX_CLASS     = TB3.TAX_CLASS)
  AND TB3.EMPLID = PD31.EMPLID
  AND PD31.COUNTRY = {NID_Country}
  AND PD31.NATIONAL_ID_TYPE = $payroll_NID_type
ORDER BY TB3.EMPLID
end-SELECT
end-procedure

begin-procedure After-EE

  do Select-EE-Unempl-QTD
  do Federal-Select
  do Insert-Empl

  move 0 to #Grs_QTD
  move 0 to #Tax_YTD
  move 0 to #TxGrs_YTD

end-procedure

!
! This procedure is only used for 4th QTR NLGrs_QTD balance lookup
!

begin-procedure Select-EE-Unempl-QTD
begin-SELECT
CC.NLGRS_QTD

  let #Grs_QTD = &CC.NlGrs_QTD

FROM  PS_TAX_BALANCE CC
WHERE CC.COMPANY       = $Company
  AND CC.EMPLID        = $Emplid
#ifdef TAXTEST
  AND CC.STATE         = 'CA'
#else
  AND CC.STATE         = 'NY'
#endif
  AND CC.LOCALITY      = ' '
  AND CC.NLGRS_QTD    <> 0
  AND CC.TAX_CLASS     = 'U'
  AND CC.BALANCE_ID    = $Calendar_Year_Id
  AND CC.BALANCE_YEAR  = &TX.Balance_Year
  AND CC.BALANCE_QTR   = 4
  AND CC.BALANCE_PERIOD =
      (SELECT MAX(CC1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE CC1
       WHERE  CC1.EMPLID        = CC.EMPLID
         AND  CC1.COMPANY       = CC.COMPANY
         AND  CC1.BALANCE_ID    = CC.BALANCE_ID
         AND  CC1.BALANCE_YEAR  = CC.BALANCE_YEAR
         AND  CC1.BALANCE_QTR   = CC.BALANCE_QTR
         AND  CC1.STATE         = CC.STATE
         AND  CC1.LOCALITY      = CC.LOCALITY
         AND  CC1.TAX_CLASS     = CC.TAX_CLASS)
end-SELECT
end-procedure

!
! This procedure is only used for 4th QTR '$U' TxGrs_YTD balance lookup
!

begin-procedure Federal-Select
begin-Select
TB5.TXGRS_YTD

  add &TB5.TxGrs_YTD to #TxGrs_YTD                                      !HP99998

FROM  PS_TAX_BALANCE TB5
WHERE TB5.TAX_CLASS     = 'H'                    !Withholding
  AND TB5.EMPLID        = $EmplID
  AND TB5.COMPANY       = $Company
  AND TB5.STATE         = '$U'
  AND TB5.BALANCE_ID    = $Calendar_Year_Id
  AND TB5.BALANCE_YEAR  = &TX.Balance_Year
  AND (TB5.TXGRS_YTD   <> 0)
  AND TB5.BALANCE_PERIOD =
      (SELECT MAX(TB6.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TB6
       WHERE  TB6.EMPLID        = TB5.EMPLID
         AND  TB6.COMPANY       = TB5.COMPANY
         AND  TB6.BALANCE_ID    = TB5.BALANCE_ID
         AND  TB6.BALANCE_YEAR  = TB5.BALANCE_YEAR
         AND  TB6.STATE         = TB5.STATE
         AND  TB6.LOCALITY      = TB5.LOCALITY
         AND  TB6.TAX_CLASS     = TB5.TAX_CLASS)
end-SELECT
end-procedure


begin-procedure Print-Report
begin-SELECT
R.COMPANY    () on-break print=never level=1 before=Before-Company
                                              AFTER=AFTER-COMPANY
R.EMPLID
R.SSN
R.LAST_NAME
R.FIRST_NAME
R.MIDDLE_NAME
R.GRS_QTD
R.TXGRS_YTD
R.TAX_YTD

  do Print-Employee

FROM  PS_R_TAX002NY R
ORDER BY R.COMPANY, R.SSN
end-SELECT

  if #Count_S > 0
    do Write-Totals
  end-if
end-procedure

begin-procedure Print-Employee
  move &R.SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM(&R.SSN, ' ') = ''
    print 'Applied For' (+2,5)
  else
    print &R.SSN        (+2,5)  edit xxx-xx-xxxx
  end-if

  let $LastName   = rtrim(&R.LAST_NAME, ' ')
  let $FirstName  = rtrim(&R.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&R.MIDDLE_NAME,1,1)

  print $LastName           (0,19)
  print ','                 ()
  print $FirstName          (0,+1)
  print $MidInitial         (0,+1)

  do Format-Number(&R.Grs_QTD, $Grs_QTD, '99999999.99')
  add &R.Grs_QTD to #PageTotalGrs
  print $Grs_QTD            (0,42)

  if &TX.Balance_Qtr = 4
    do Format-Number(&R.TxGrs_YTD, $TxGrs_YTD, '99999999.99')
    add &R.TxGrs_YTD to #PageTotalTxGrs
    print $TxGrs_YTD        (0,57)

    do Format-Number(&R.Tax_YTD, $Tax_YTD, '99999999.99')
    add &R.Tax_YTD to #PageTotalTax
    print $Tax_YTD          (0,69)
  end-if

  move '' to $Grs_QTD
  move '' to $TxGrs_YTD
  move '' to $Tax_YTD

  add 1 to #Employees_On_Page
  add 1 to #Employees_Reported

  if #Employees_On_Page = 15
    do Page-Complete
  end-if
end-procedure


begin-procedure Get-Company-Total
begin-SELECT
COUNT(*)           &EmplCount
#ifdef DB2ALL
DECIMAL(SUM(R1.GRS_QTD),15,3)    &CoTotalGrs_QTD
DECIMAL(SUM(R1.TXGRS_YTD),15,3)  &CoTotalTxGrs_YTD
DECIMAL(SUM(R1.TAX_YTD),15,3)    &CoTotalTax_YTD
#else
SUM(R1.GRS_QTD)    &CoTotalGrs_QTD
SUM(R1.TXGRS_YTD)  &CoTotalTxGrs_YTD
SUM(R1.TAX_YTD)    &CoTotalTax_YTD
#endif

FROM  PS_R_TAX002NY R1
WHERE COMPANY = $Company
GROUP BY R1.COMPANY
end-SELECT
  let #TotalPages = CEIL(&EmplCount/15)
end-procedure

begin-procedure Page-Complete
  add 1 to #PAGE_NUM
  new-page
  move 0 to #PageTotalGrs
  move 0 to #PageTotalTxGrs
  move 0 to #PageTotalTax
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Before-Company
  move &R.Company to $Company
  do Get-Company-Data
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'NY' to $State
#endif
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SWT,' ') = ''
    display '*** State Withholding ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display ' Company   ' noline
    display   $Company
    stop
  end-if

  let $StateEIN = RTRIM(&Employer_ID_SWT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),9)
    end-if
  end-while
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),9)
    end-if
  end-while
  while INSTR($StateEIN,'.',1) <> 0
    let #Marks  = INSTR($StateEIN,'.',1)
    if #Marks  > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                      SUBSTR($StateEIN,(#Marks + 1),9)
    end-if
  end-while

  let #EIN_Length = LENGTH($StateEIN)
  if #EIN_Length = 10
    let $Four_Blanks = '    '
    let $StateEIN  = SUBSTR($StateEIN,1,9)  || $Four_Blanks ||
                     SUBSTR($StateEIN,10,1)
  else
    if #EIN_Length = 12
      let $Two_Blanks = '  '
      let $StateEIN  = SUBSTR($StateEIN,1,11)  || $Two_Blanks ||
                       SUBSTR($StateEIN,12,1)
    else
      display 'SWT Acct Nbr is not 10 or 12 characters'
      display 'Company and SWT #'
      display $Company
      display $StateEIN
      stop
    end-if
  end-if

  do Get-Company-Total
end-procedure

begin-procedure After-Company
  if #Employees_On_Page < 15 and #Employees_On_Page > 0
    do Page-Complete
  end-if
  move 0 to #PAGE_NUM

  move &CoTotalGrs_QTD       to $CoNlGrs_QTD     99,999,999.99mi
  move &CoTotalTxGrs_YTD     to $CoTXGrs_YTD     99,999,999.99mi
  move &CoTotalTax_YTD       to $CoTax_YTD       99,999,999.99mi

  write 11 from     $Company:15
                $CoNlGrs_QTD:15
                     $Sp:2
                $CoTXGrs_YTD:15
                     $Sp:2
                  $CoTax_YTD:15
                     $Sp:16

  write 11 from      $Sp:80

  move 0                    to $CoTax_YTD
  move 0                    to $CoNlGrs_QTD
  move 0                    to $CoTXGrs_YTD
end-procedure

begin-procedure Insert-Empl
  if &TX.Balance_Qtr <> 4
    if #Grs_QTD > 0
      do Insert-Employee
    else
        let $ErMsg = 'NY QTD ER NLGRS is Negative'
        do Write-Summary-Data
    end-if
  else
    if #Grs_QTD >= 0 and #TxGrs_YTD >= 0 and #Tax_YTD >= 0
      do Insert-Employee
    else
      if #Grs_QTD < 0 and #TxGrs_YTD >= 0 and #Tax_YTD >= 0
        do Insert-Employee
        let $ErMsg = 'NY NLGRS QTD balance is Negative'
        let #Grs_QTD = #Grs_QTD_Neg
        do Write-Summary-Data
      else
        let $ErMsg = '1 or more of the 3 NY QTD or YTD balances is Negative'
        do Write-Summary-Data
      end-if
    end-if
  end-if
end-procedure

begin-procedure Insert-Employee
 if #Grs_QTD < 0
   let #Grs_QTD_Neg = #Grs_QTD
   let #Grs_QTD = 0
 end-if

! For Rounding purposes using SQRW3 this function is necessary
  let #cur_prec = 2

  move #TxGrs_YTD to #in_amt
  do PS_SQR_ROUND (#in_amt, #cur_prec, #out_amt1)
  move #out_amt1 to #TxGrs_YTD

  move #Tax_YTD to #in_amt
  do PS_SQR_ROUND (#in_amt, #cur_prec, #out_amt2)
  move #out_amt2 to #Tax_YTD

  Let $SSN = rtrim($SSN, ' ')

begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_TAX002NY (COMPANY,
                             SSN,
                             EMPLID,
                             LAST_NAME,
                             FIRST_NAME,
                             MIDDLE_NAME,
                             GRS_QTD,
                             TXGRS_YTD,
                             TAX_YTD,
                             TAX_CLASS_NY,
                             TAX_CLASS_NY2)
                     VALUES ($Company,
                             $SSN,
                             $EmplID,
                             $LastName,
                             $FirstName,
                             $MiddleName,
                             #Grs_QTD,
                             #TxGrs_YTD,
                             #Tax_YTD,
                              ' ',
                              ' ')
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure Delete-Temp-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX002NY
end-SQL
end-procedure

begin-procedure Insert-Error
  display 'Error on insert of employee SSN ' noline
  display $SSN noline
  display '  EmplID ' noline
  display $EmplID
  display 'Possible duplicate SSN'
end-procedure

begin-procedure Write-Summary-Data
  move #Tax_YTD       to $Tax_YTD       99,999,999.99mi
  move #Grs_QTD       to $NlGrs_QTD     99,999,999.99mi
  move #TXGrs_YTD     to $TXGrs_YTD     99,999,999.99mi

  write 10 from  $EmplID:12
                     $Sp:2
              $NlGrs_QTD:15
                     $Sp:2
              $TXGrs_YTD:15
                     $Sp:2
                $Tax_YTD:15
                     $Sp:17

  write 10 from      $Sp:12
                  $ErMsg:60
                     $Sp:8

  write 10 from      $Sp:80

  add #Tax_YTD       to #Neg_Tax_YTD
  add #Grs_QTD       to #Neg_NlGrs_QTD
  add #TXGrs_YTD     to #Neg_TXGrs_YTD
  add 1 to #Count_S

end-procedure

begin-procedure Write-Totals

  move #Neg_Tax_YTD    to $Neg_Tax_YTD    99,999,999.99mi
  move #Neg_NlGrs_QTD  to $Neg_NlGrs_QTD  99,999,999.99mi
  move #Neg_TXGrs_YTD  to $Neg_TXGrs_YTD  99,999,999.99mi

  write 10 from 'Totals':6
                     $Sp:8
          $Neg_NlGrs_QTD:15
                     $Sp:2
          $Neg_TXGrs_YTD:15
                     $Sp:2
            $Neg_Tax_YTD:15
                     $Sp:17

end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API

