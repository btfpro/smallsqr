!***********************************************************************
! BRPPP01:  Perfil Profissiográfico Previdenciário - PPP               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/06/13:16:21:48                           *
!             $Release:  HR9                                           *
!            $Revision:  101                                           *
!                                                                      *
!***********************************************************************

#define c1       2
#define c2      16
#define c2a     17
#define c2b     19
#define c3      30
#define c4      44
#define c5      58
#define c6      72
#define c7      86
#define c8     100
#define c9     103
#define c9b    107

#define g1       3
#define g2      10

#include 'setenv.sqc'    !Set environment

begin-setup
#include 'setupdb.sqc'  
  Declare-Printer   THIS_REPORT
    type          = HPLASERJET
    symbol-set    = 19U
    font          = 5
    point-size    = 4
  End-Declare

  Declare-Layout THIS_REPORT
    Orientation= portrait
    Top-Margin= .2
    Left-Margin=.2
    Max-Lines   =145
    Max-Columns =145
    Line-Height = 10
    Char-Width  = 4.8   ! precise print positioning
  End-Declare

  Declare-Report THIS_REPORT
    Printer-Type=HPLASERJET
    LayOut=THIS_REPORT
  End-Declare
  
  !declare-image logo
  !  type       = JPEG-FILE
  !  image-size = (20,4)
  !  source     = 'brppp01.jpg'
  !end-declare
end-setup


begin-program
  do Declare-Print
  do Init-Report
  do Initialize-Variables
  do Process-Main
  
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do Stdapi-Term
end-program



begin-procedure Declare-Print
  let #fontstd  = 5
  let #sizestd  = 6
  let #fontsm   = 5
  let #sizesm   = 6
  let #fontmed  = 5
  let #sizemed  = 7
  let #fontgr   = 5
  let #sizegr   = 8
  let #fontxgr  = 5
  let #sizexgr  = 10

  Alter-Printer Point-size = #Sizestd Font-Type = Proportional Font = #FontStd
end-procedure Declare-Print



begin-procedure Init-Report
  move 'BRPPP01' to $ReportID
  move '1' to $ReportDateType
  move '1' to $Reportyear4
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  
  let #pos  = instr($sqr-program,'brppp01',0)
  let #pos  = #pos - 1
  let $path = substr($sqr-program,1,#pos)
  let $FileDir = $path || 'brppp01.jpg'

  #ifdef MVS
     let #pos  = instr($sqr-program,'brppp01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'brppp01)'
  #end-if

  #ifdef OS390
     let #pos  = instr($sqr-program,'brppp01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'brppp01)'
  #end-if

  #ifdef OS400
     let #pos  = instr($sqr-program,'brppp01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'brppp01)'
  #end-if

  #ifdef UNIX
     let $FileDir = $path || 'brppp01.jpg'
  #end-if
  !show 'File Directory:' $FileDir

  Do Format-DateTime($AsofToday, $AsofTodayF,{DEFDMY}, '','')
  date-time () hh:mi &EndTime
end-procedure Init-Report
                                      

begin-procedure Initialize-Variables
let $EstabInscr     = ''
let $LegalName      = ''
let $CNAE           = ''
let $EmplName       = ''
let $PPP_Situation  = ''
let $PISPASEP       = ''
let $Birth_DateF    = ''
let $EmplSex        = ''
let $NationalID     = ''
let $HireDTF        = ''
let $CAT_Reg_Dt     = ''
let $CAT_Reg_ID     = ''
let $CAT_Reg_Dt2    = ''
let $CAT_Reg_ID2    = ''

let $HEstabInscrip  = ''
let $HLocation      = ''
let $HJobCode       = ''
let $Manager_Level  = ''
let $HCBOCode       = ''
let $Sefip_Risk_Lvl = ''
let $TaskDescr2     = ''
end-procedure Initialize-Variables



Begin-procedure Process-Main
  Do Get-Parameters
  Do Security-Param
  Do Employees-Info
End-Procedure Process-Main



begin-procedure Get-Parameters
   Let $WhereOption = ''
   Let $Observation = ''
   Let $Program_Footer = $ReportID || '_' || $prcs_process_instance
begin-select
RC.COMPANY
RC.BEGIN_DT
RC.END_DT
RC.PPP_SEL_CRIT_BRA
RC.GB_GROUP_ID
RC.PPP_OBSERV_OPT_BRA
RC.LOCATION_DTL_BRA
RC.PPP_PARAM_ID
RC.RESPONSIBLE_ID_BRA
RC.DT_ISSUED
   Let $Company  = rtrim(&RC.COMPANY, ' ')
   Let $BeginDt  = rtrim(&RC.BEGIN_DT, ' ')
   Let $EndDt    = rtrim(&RC.END_DT, ' ')
   Let $SelCrit  = rtrim(&RC.PPP_SEL_CRIT_BRA, ' ')
   Let $GroupID  = rtrim(&RC.GB_GROUP_ID, ' ')
   Let $ObsOpt   = rtrim(&RC.PPP_OBSERV_OPT_BRA, ' ')
   Let $LocDtl   = rtrim(&RC.LOCATION_DTL_BRA, ' ')
   Let $ParamID  = rtrim(&RC.PPP_PARAM_ID, ' ')
   Let $PPP_Resp = rtrim(&RC.RESPONSIBLE_ID_BRA, ' ')
   Let $IssueDt  = rtrim(&RC.DT_ISSUED, ' ')
   Do Format-DateTime($IssueDt, $IssueDtF,{DEFDMY}, '','')
   let $EnterChar = chr(13)
   let $LFeedChar = chr(10)
   let $VTabChar  = chr(11)
   let $SpaceChar = chr(32)
   if $ObsOpt = 'OVR'
      Let $Observation = $LocDtl
      Let $Observation = replace($Observation, $EnterChar, $SpaceChar)
      Let $Observation = replace($Observation, $LFeedChar, $SpaceChar)
      Let $Observation = replace($Observation, $VTabChar , $SpaceChar)  
      Let $Observation = substr($LocDtl,1,188)
      Let $Observation2 = substr($LocDtl,189,375)
   end-if

   do Get-PPPResp-Data

   if $ParamID <> ''
      do Get-PPP-Parameters
   end-if

   Let $WhereRunC = 'WHERE OP.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND OP.RUN_CNTL_ID = '
   Let $WhereRunC = $WhereRunC  || '''' || $prcs_run_cntl_id || '''' || ')'

   Evaluate $SelCrit
   when = '1'  !Establishment
      Let $WhereOption = ' AND A.ESTABID '
      Let $WhereOption = $WhereOption   || ' IN ' || ' (SELECT OP.ESTABID FROM PS_PPP_RC_EST_BRA OP ' 
      Let $WhereOption = $WhereOption   || $WhereRunC
      
   when = '2'  !Department
      Let $WhereOption = ' AND A.DEPTID '
      Let $WhereOption = $WhereOption   || ' IN ' || ' (SELECT OP.DEPTID FROM PS_PPP_RC_DEPT_BRA OP ' 
      Let $WhereOption = $WhereOption   || $WhereRunC  
     
   when = '3'  !Employee
      Let $WhereOption = ' AND A.EMPLID '
      Let $WhereOption = $WhereOption   || ' IN ' || ' (SELECT OP.EMPLID FROM PS_PPP_RC_EMPL_BRA OP ' 
      Let $WhereOption = $WhereOption   || $WhereRunC

   when = '4'  !Group
      Let $WhereOption = ' AND A.EMPLID '
      Let $WhereOption = $WhereOption   || ' IN ' || ' (SELECT OP.EMPLID FROM PS_GB_GRP_RES_VW OP ' 
      Let $WhereOption = $WhereOption   || 'WHERE OP.GB_GROUP_ID = ' || '''' || $GroupID || '''' || ')'
   End-Evaluate

   If $BeginDt <> ''
      Let $WhereOption = $WhereOption || ' AND A.EFFDT >= ' || '''' || $BeginDt || ''''
   End-If

FROM PS_PPP_RC_BRA RC
WHERE RC.OPRID = $prcs_oprid
AND   RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
End-procedure  Get-Parameters


Begin-Procedure Get-PPP-Parameters
Begin-Select
PPPEXM.EXAM_TYPE_CD
PPPEXM.MED_EXAM_TYPE_BRA
   Let $Parm_Exam_CD  = rtrim(&PPPEXM.EXAM_TYPE_CD, ' ')
   Let $Parm_Exam_Type  = rtrim(&PPPEXM.MED_EXAM_TYPE_BRA, ' ')

FROM PS_PPP_PAR_EXM_BRA PPPEXM

WHERE PPPEXM.PPP_PARAM_ID = $ParamID
AND PPPEXM.COMPANY = $Company
AND PPPEXM.EFFDT = (SELECT MAX(EFFDT) FROM PS_PPP_PAR_EXM_BRA
             WHERE PPP_PARAM_ID = PPPEXM.PPP_PARAM_ID
             AND COMPANY = $Company
             AND EFFDT <= $EndDt)
End-Select



!  Let $Where_Action = ''
!Begin-Select
!PPPACT.ACTION
!PPPACT.ACTION_REASON
!   Let $Parm_Action  = rtrim(&PPPACT.ACTION, ' ')
!   Let $Parm_Act_Rsn = rtrim(&PPPACT.ACTION_REASON, ' ')
!
!   Let $Where_Action = ' AND A.ACTION IN (SELECT PPPACTN.ACTION FROM PS_PPP_PAR_ACT_BRA PPPACTN '
!   Let $Where_Action = $Where_Action || 'WHERE PPPACTN.PPP_PARAM_ID = ' || '''' || $ParamID || '''' || ' AND PPPACTN.COMPANY = '
!   Let $Where_Action = $Where_Action || '''' || $Company || '''' || ' AND PPPACTN.EFFDT = '
!   Let $Where_Action = $Where_Action || '(SELECT MAX(EFFDT) FROM PS_PPP_PAR_ACT_BRA WHERE PPP_PARAM_ID = PPPACTN.PPP_PARAM_ID '
!   Let $Where_Action = $Where_Action || ' AND COMPANY = ' || '''' || $Company || '''' || ' AND EFFDT <= ' 
!   Let $Where_Action = $Where_Action || '''' || $EndDt || '''' || '))'
!
!FROM PS_PPP_PAR_ACT_BRA PPPACT
!
!WHERE PPPACT.PPP_PARAM_ID = $ParamID
!AND PPPACT.COMPANY = $Company
!AND PPPACT.EFFDT = (SELECT MAX(EFFDT) FROM PS_PPP_PAR_ACT_BRA
!             WHERE PPP_PARAM_ID = PPPACT.PPP_PARAM_ID
!             AND COMPANY = $Company
!             AND EFFDT <= $EndDt)
!End-Select


  Let $Where_Action = ''
Begin-Select
PPPACT.ACTION
PPPACT.ACTION_REASON
   Let $Parm_Action  = rtrim(&PPPACT.ACTION, ' ')
   Let $Parm_Act_Rsn = rtrim(&PPPACT.ACTION_REASON, ' ')

   Let $Where_Action = ' AND A.ACTION IN (SELECT PPPACTN.ACTION FROM PS_PPP_RC_ACT_BRA PPPACTN '
   Let $Where_Action = $Where_Action || 'WHERE PPPACTN.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND PPPACTN.RUN_CNTL_ID = '
   Let $Where_Action = $Where_Action || '''' || $prcs_run_cntl_id || '''' || ' AND PPPACTN.PPP_PARAM_ID = '
   Let $Where_Action = $Where_Action || '''' || $ParamID || '''' || ')'
   !show '$Where_Action ' $Where_Action

FROM PS_PPP_RC_ACT_BRA PPPACT

WHERE PPPACT.OPRID = $prcs_oprid
AND PPPACT.RUN_CNTL_ID = $prcs_run_cntl_id
AND PPPACT.PPP_PARAM_ID = $ParamID
End-Select
End-Procedure Get-PPP-Parameters



Begin-Procedure Get-PPPResp-Data
  let $Report_Emplid = $PPP_Resp
  let $HEffdt = $AsofToday
  do Get-Reported-ID
  let $Resp20_NIT  = '20.1 - ' || $Reported_ID
  let $Resp20_Name = '20.2 - ' || $Report_Name
End-Procedure Get-PPPResp-Data


!**************************************
Begin-procedure Employees-Info
!**************************************
  !show '$WhereOption ' $WhereOption
  Let #Pagenum = 1
  Let #JOB_Count = 0
Begin-select
A.EMPLID
A.LOCATION
A.DEPTID
A.JOBCODE
A.SETID_JOBCODE
A.SETID_LOCATION
A.ESTABID
A.EMPL_STATUS
A.EFFDT
A.ACTION
A.ACTION_REASON
A.EMPL_RCD
A.GP_PAYGROUP
B.NAME
B.FIRST_NAME
B.LAST_NAME
B.SECOND_LAST_NAME
C.BIRTHDATE
V.SEFIP_CATEGORY_BRA
V.CBO_CD_BRA
X.HIRE_DT
X.REHIRE_DT
  Let $Emplid     = rtrim(&A.EMPLID, ' ')
  Let $Location   = rtrim(&A.LOCATION, ' ')
  Let $Estabid    = rtrim(&A.ESTABID, ' ')
  Let $Deptid     = rtrim(&A.DEPTID, ' ')
  Let $Jobcode    = rtrim(&A.JOBCODE, ' ')
  Let $SetidJobCd = rtrim(&A.SETID_JOBCODE, ' ')
  Let $SetidLocat = rtrim(&A.SETID_LOCATION, ' ')
  Let $Action     = rtrim(&A.ACTION, ' ')
  Let $Causa_Af   = rtrim(&A.ACTION_REASON, ' ')
  Let #EmplRcd    = &A.EMPL_RCD
  Let $GPPayGroup = rtrim(&A.GP_PAYGROUP, ' ')
  !Let $EmplName  = rtrim(&B.NAME, ' ')  
  Let $Efirstname = rtrim(&B.FIRST_NAME , ' ')
  Let $Elastname1 = rtrim(&B.LAST_NAME , ' ')
  Let $Elastname2 = rtrim(&B.SECOND_LAST_NAME , ' ')
  Let $EmplName   = $Efirstname || ' ' || $Elastname1 || ' ' || $Elastname2
  Let $BirthDt    = rtrim(&C.BIRTHDATE, ' ')
  Let $Effdt      = rtrim(&A.EFFDT, ' ')
  Do Convert-from-DTU-Date($Effdt,$Eff_Date)
  Do Format-DateTime($Eff_Date, $Eff_DateF,{DEFDMY}, '','')
  Do Convert-from-DTU-Date($BirthDt,$Birth_Date)
  Do Format-DateTime($Birth_Date, $Birth_DateF,{DEFDMY}, '','')
  Let $Category   = rtrim(&V.SEFIP_CATEGORY_BRA, ' ')
  Let $CBOCode    = rtrim(&V.CBO_CD_BRA, ' ')
  Let $CBOCode    = lpad($CBOCode, 7, '0')
  Let $HireDt     = rtrim(&X.HIRE_DT, ' ')
  Let $ReHireDt   = rtrim(&X.REHIRE_DT, ' ')
  if $ReHireDt > $HireDt
     let $HireDt = $ReHireDt
  end-if
  Do Format-DateTime($HireDt, $HireDtF,{DEFDMY}, '','')
  Do Format-DateTime($Effdt, $EffdtF,{DEFDMY}, '','')
  Do Format-DateTime($BeginDt, $BeginDtF,{DEFDMY}, '','')
  Do Format-DateTime($EndDt, $EndDtF,{DEFDMY}, '','')
  let $ActualPRD  = $BeginDtF || ' - ' || $EffdtF  !Hire-effdt+
  if $GPPayGroup <> ''
     do Get-GPSchedule
  else
     let $Schedule = 'NA'
  end-if
  add 1 to #JOB_Count

  Do Get-Company-Name
  Do Get-Estabid-Info
  Do Get-Estabid-Inscr
  Do Get-PPP-Situation
  Do Select-PISPASEP
  Do Select-EmplSex
  Do Get-NationalID
  do Print-Section1-1
  Do Get-CAT-Data
  do Print-Section1-LocHeader

  move $JobCode to $HJobCode
  move $Effdt to $HEffdt
  move #Empl_Rcd to #HEmpl_Rcd
  move $Location to $HLocation
  do Get-Manager-Level  !$Manager_Level !$EstabInscr !$Jobcd_Descr (1)
  do Sefip-Risk-Level   !$Sefip_Risk_Lvl
  if $ObsOpt = 'PRI'
     do Get-Loc-Descr
  end-if

  if #JOB_Count = 1
     Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
     graphic (+1,1,120) box 2 {g1}
     
     print $ActualPRD                                    (,{c1})
     print $EstabInscr                                   (,{c2}) edit XXXXXXXX/XXXX-XX
     print $HLocation                                    (,{c3})
     print $JobCd_Descr                                  (,{c4})
     !print $HJobCode                                    (,{c4})
     print $Manager_Level                                (,{c5})
     print $CBOCode                                      (,{c7})
     print $Sefip_Risk_Lvl                               (,{c8})
  end-if  

  do Get-Hist-Data
  do Print-Section1ProfisHeader
  do Get-Job-Task

  do Print-Section2RiskHeader
  Do Get-JobCd-Risks
  do Print-Section2RespHeader
  Do Get-PPP-Resp-A
  do Print-Section3ExamHeader
  Do Get-Medical-Exams
  do Print-Section3RespHeader
  Do Get-PPP-Resp-B
  do Print-Section4a
  do Print-Section4b
  do Print-Section4c
  new-page

FROM PS_JOB A
,PS_NAMES B
,PS_PERSON C
,PS_JOB_JR V
,PS_EMPLOYMENT X
,PS_FAST_SQR_SEC_VW SCRTY

WHERE A.COMPANY = $Company
AND   A.EFFDT = (SELECT MAX(AA.EFFDT)
                 FROM PS_JOB AA
                 WHERE AA.EMPLID   = A.EMPLID
                 AND   AA.EMPL_RCD = A.EMPL_RCD
                 AND   AA.EFFDT   <= $EndDt)
AND A.EFFSEQ = (SELECT MAX(A_ES.EFFSEQ)
                FROM PS_JOB A_ES
    WHERE A.EMPLID = A_ES.EMPLID
    AND A.EMPL_RCD = A_ES.EMPL_RCD
    AND A.EFFDT = A_ES.EFFDT)
AND A.EFFDT <= $EndDt
[$WhereOption]
[$Where_Action]
AND A.EMPLID = B.EMPLID
AND B.NAME_TYPE = 'PRI'
AND B.EFFDT = (SELECT MAX(BB.EFFDT) FROM PS_NAMES BB
                WHERE BB.EMPLID = B.EMPLID
                AND BB.NAME_TYPE = B.NAME_TYPE
                AND BB.EFFDT <= $EndDt)
AND A.EMPLID = C.EMPLID
AND A.EMPLID = V.EMPLID
AND V.EFFDT = (SELECT MAX(VV.EFFDT) 
               FROM PS_JOB VV
               WHERE VV.EMPLID   = V.EMPLID
               AND   VV.EMPL_RCD = V.EMPL_RCD
               AND   VV.EFFDT   <= $EndDt)  
AND A.EMPL_RCD = V.EMPL_RCD
AND A.EFFSEQ = V.EFFSEQ
AND A.EMPLID = X.EMPLID
AND A.EMPL_RCD = X.EMPL_RCD
AND A.EMPLID = SCRTY.EMPLID 
[$SecurityClause]

end-select
End-procedure Employees-Info



begin-procedure Get-GPSchedule
  let $Schedule = 'NA'
  let $SchedID  = '' 
begin-select
PYG.SCHEDULE_ID
  let $SchedID = rtrim(&PYG.SCHEDULE_ID, ' ')
  do Get-GPTemplate

FROM PS_GP_PYGRP_DTL PYG 
WHERE PYG.GP_PAYGROUP = $GPPayGroup
AND EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_PYGRP_DTL 
             WHERE GP_PAYGROUP = PYG.GP_PAYGROUP 
             AND EFFDT <= $IssueDt)
end-select
end-procedure Get-GPSchedule


begin-procedure Get-GPTemplate
  let $TemplateID = ''
  let $Schedule = 'NA'
begin-select
SCH.DESCR 
!  let $TemplateID = rtrim(&SCH.SCHED_TMPLT_ID, ' ')
  let $Schedule = rtrim(&SCH.DESCR, ' ')
!  do Get-GPTemplate-Descr

FROM PS_SCH_DEFN_TBL SCH 
WHERE SCH.SCHEDULE_ID = $SchedID
!AND SCH.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_SCH_DEFN_DTL 
!                  WHERE SCHEDULE_ID = SCH.SCHEDULE_ID)
end-select
end-procedure Get-GPTemplate


!begin-procedure Get-GPTemplate-Descr
!  let $Schedule = 'NA'
!begin-select
!TMPL.DESCR
!  let $Schedule = rtrim(&TMPL.DESCR, ' ')
!
!FROM PS_SCH_TMPLT_TBL TMPL
!WHERE TMPL.SCHED_TMPLT_ID = $TemplateID
!end-select
!end-procedure Get-GPTemplate-Descr



Begin-procedure Get-Company-Name
Begin-select
D.DESCR
  Let $CompanyName  = rtrim(&D.DESCR, ' ')

FROM PS_COMPANY_TBL D
WHERE D.COMPANY = $Company
AND  D.EFFDT = (SELECT MAX(DD.EFFDT)          
                FROM PS_COMPANY_TBL DD                 
                WHERE DD.COMPANY  = D.COMPANY   
                AND   DD.EFFDT   <= $IssueDt)
end-select
End-procedure Get-Company-Name



Begin-procedure Get-Estabid-Info
Begin-select
E.ESTAB_ID_BRA
  Let $CNAE = rtrim(&E.ESTAB_ID_BRA, ' ')
  !Let $CNAE = lpad($CNAE, 7, '0')
F.ADDRESS1
  Let $AddresEr = rtrim(&F.ADDRESS1, ' ')
F.NUM1
  Let $NumEr = rtrim(&F.NUM1, ' ')
  Let $AddresEr =  $AddresEr ||' ' || $NumEr
F.ADDRESS2
F.ADDRESS4
   Let $BairroEr = rtrim(&F.ADDRESS4, ' ')
F.CITY
   Let $MunicipalityEr = rtrim(&F.CITY, ' ')
F.STATE
   Let $StateE = rtrim(&F.STATE, ' ')
F.POSTAL
   Let $Postal = rtrim(&F.POSTAL, ' ')
   Do Check-Strings
   Let $PostalF1 = substr($Postal   ,1,5)
   Let $PostalF2 = substr($Postal   ,6,3)
   Let $PostalF = $PostalF1 || '-' || $PostalF2


   let $Address_Est1  = $AddresEr || ' ' || $NumEr
   let $Address_Est2  = $BairroEr || ' ' || $Postal
   let $Address_Est3  = $MunicipalityEr || '-' || $StateE

FROM PS_ESTAB_ID_BRA E
,PS_ESTAB_TBL F
WHERE E.COUNTRY = 'BRA'
AND E.ESTABID = $Estabid
AND E.ESTAB_ID_TYPE_BRA = 'CNAE'
AND E.EFFDT = (SELECT MAX(EE.EFFDT)
                FROM PS_ESTAB_ID_BRA EE
                WHERE EE.ESTABID = E.ESTABID
                AND   EE.EFFDT  <= $IssueDt)
AND E.ESTABID = F.ESTABID
AND F.EFFDT = (SELECT MAX(FF.EFFDT)          
                FROM PS_ESTAB_TBL FF                 
                WHERE FF.ESTABID  = F.ESTABID   
                AND   FF.EFFDT   <= $IssueDt)  
end-select    
End-procedure Get-Estabid-Info



Begin-procedure Get-Estabid-Inscr
   Let $EstabInscr = ''
Begin-select
G.ESTAB_ID_TYPE_BRA
G.ESTAB_ID_BRA
EST.DESCR
H2.LEGAL_ENT_TYPE_BRA
   Let $EstabIdType = rtrim(&G.ESTAB_ID_TYPE_BRA, ' ')
   Let $LegalNameType = rtrim(&H2.LEGAL_ENT_TYPE_BRA, ' ')
   Let $EstabName = rtrim(&EST.DESCR, ' ')

   Evaluate $EstabIdType
     when = 'CNPJ'
       Let $EstabInscr = rtrim(&G.ESTAB_ID_BRA, ' ')
     when = 'CEI'
       Let $EstabInscr  = rtrim(&G.ESTAB_ID_BRA, ' ')
   End-Evaluate

   Evaluate $LegalNameType
     when = 'COM'
       Let $LegalName = $CompanyName
       do Get-Company-Address
       Let $Legal_Address1 = $Address_Comp1
       Let $Legal_Address2 = $Address_Comp2
       Let $Legal_Address3 = $Address_Comp3
       
     when = 'EST'
       do Get-Estab-Name-Lang
       if $EstabNameLang <> ''
          Let $LegalName  = $EstabNameLang
       else
          Let $LegalName  = $EstabName
       End-if
       Let $Legal_Address1 = $Address_Est1
       Let $Legal_Address2 = $Address_Est2
       Let $Legal_Address3 = $Address_Est3       
   End-Evaluate

FROM PS_ESTAB_ID_BRA G,
     PS_ESTAB_TBL_BRA H2,
     PS_ESTAB_TBL EST

WHERE G.ESTABID = $Estabid
AND G.ESTABID = EST.ESTABID
AND G.ESTABID = H2.ESTABID
AND G.EFFDT = H2.EFFDT
AND G.EFFDT = EST.EFFDT
AND G.EFFDT = (SELECT MAX(GG.EFFDT)
                 FROM PS_ESTAB_ID_BRA GG
                 WHERE GG.ESTABID = G.ESTABID
                 AND   GG.EFFDT  <= $IssueDt)
AND G.ESTAB_ID_TYPE_BRA IN ('CNPJ','CEI')
AND G.COUNTY_CD_BRA = H2.COUNTY_CD_BRA
end-select
End-procedure Get-Estabid-Inscr


Begin-procedure Get-Estab-Name-Lang
  Let $EstabNameLang = ''
begin-select
GL.DESCR 
   Let $EstabNameLang = rtrim(&GL.DESCR, ' ')

FROM PS_ESTAB_TBL_LANG GL

WHERE GL.ESTABID = $Estabid
and GL.LANGUAGE_CD = $PRCS_LANGUAGE_CD
and GL.EFFDT = (SELECT MAX (EFFDT) FROM PS_ESTAB_TBL 
             WHERE ESTABID = GL.ESTABID
             AND EFFDT <= $IssueDt)
end-select
end-procedure Get-Estab-Name-Lang


Begin-procedure Get-PPP-Situation
  Let $PPP_Situation = 'NA'
begin-select
DIS.PPP_SITUATION_BRA 
   Let $PPP_Sit = rtrim(&DIS.PPP_SITUATION_BRA, ' ')
   Evaluate $PPP_Sit
     when = 'PDH'
        Let $PPP_Situation = 'PDH'
     when = 'REB'
        Let $PPP_Situation  = 'BR'
     when-other
        Let $PPP_Situation  = 'NA'
   End-Evaluate

FROM PS_DISABILITY_BRA DIS
WHERE DIS.EMPLID = $Emplid
AND DIS.EFFDT = (SELECT MAX (EFFDT) FROM PS_DISABILITY_BRA
             WHERE EMPLID = DIS.EMPLID
             AND EFFDT <= $IssueDt)
end-select
end-procedure Get-PPP-Situation



Begin-procedure Select-PISPASEP
  Let $PISPASEP = ''
Begin-select
L.NATIONAL_ID_TYPE
L.NATIONAL_ID
  Let $NationalIdType = rtrim(&L.NATIONAL_ID_TYPE, ' ')
  Evaluate $NationalIdType  
    when = 'SUS'
       Let $PISPASEP = rtrim(&L.NATIONAL_ID, ' ')
    when = 'PASEP'
       Let $PISPASEP = rtrim(&L.NATIONAL_ID, ' ')
    when = 'PIS'
       Let $PISPASEP = rtrim(&L.NATIONAL_ID, ' ')
  End-Evaluate

FROM PS_PERS_NID L 
WHERE L.EMPLID = $Emplid
AND (L.NATIONAL_ID_TYPE = 'PIS' OR  L.NATIONAL_ID_TYPE = 'PASEP' OR  L.NATIONAL_ID_TYPE = 'SUS')
end-select
End-procedure Select-PISPASEP



Begin-procedure Select-EmplSex
  Let $EmplSex = ''
Begin-select
PEF.SEX 
  Let $EmplSex = &PEF.SEX
  
  if $EmplSex = 'U'
     Let $EmplSex = ''
  End-if

FROM PS_PERS_DATA_EFFDT PEF

WHERE PEF.EMPLID = $Emplid
AND PEF.EFFDT = (SELECT MAX (EFFDT) FROM PS_PERS_DATA_EFFDT
             WHERE EMPLID = PEF.EMPLID
             AND EFFDT <= $IssueDt)
end-select
End-procedure Select-EmplSex



Begin-procedure Get-NationalID
   Let $NationalID  = ''
Begin-select
R1.NATIONAL_ID 
  Let $NationalID = rtrim(&R1.NATIONAL_ID, ' ')
  do Get-CTPS-Data
  let $NationalID  = $NationalID || ' - ' ||$CTPS_Series || ' - ' ||$CTPS_State

FROM PS_PERS_NID R1
WHERE R1.EMPLID = $Emplid
AND R1.NATIONAL_ID_TYPE = 'CTPS'
end-select
End-procedure Get-NationalID



Begin-procedure Get-CTPS-Data
  let $CTPS_Series = ''
  let $CTPS_State  = ''
begin-select
CTPS.CTPS_SERIES_BRA
CTPS.CTPS_STATE_BRA
  let $CTPS_Series = rtrim(&CTPS.CTPS_SERIES_BRA, ' ')
  let $CTPS_State  = rtrim(&CTPS.CTPS_STATE_BRA, ' ')

FROM PS_PERSON_BRA CTPS
WHERE CTPS.EMPLID = $Emplid
end-select
End-procedure Get-CTPS-Data




Begin-procedure Get-CAT-Data
   Let $CAT_Reg_DtF = ''
   Let $CAT_Reg_ID = ''
   Let #CAT_Count = 0
Begin-select
INC.CAT_REG_ID_BRA
INC.CAT_REG_DT_BRA
  let $CAT_Reg_Dt = &INC.CAT_REG_DT_BRA
  let #CAT_Reg_ID = &INC.CAT_REG_ID_BRA
  Do Format-DateTime($CAT_Reg_Dt, $CAT_Reg_DtF,{DEFDMY}, '','')
  add 1 to #Cat_Count

  if #CAT_Reg_ID <> 0
     move #CAT_Reg_ID to $CAT_Reg_ID XXXXXXXXXX-X/XX
  end-if

  if #CAT_Count = 1
     do Print-Section1-CATHeader
  end-if  
  do Print-Section1-CATDetail

FROM PS_INCIDENT_BRA INC

WHERE INC.EMPLID = $Emplid
AND INC.CAT_DATE_BRA = (SELECT MAX (CAT_DATE_BRA) FROM PS_INCIDENT_BRA
             WHERE EMPLID = INC.EMPLID
             AND INCIDENT_NBR = INC.INCIDENT_NBR
             AND CAT_ID_BRA = INC.CAT_ID_BRA
             AND CAT_DATE_BRA <= $IssueDt)
end-select
  if #CAT_Count = 0
     do Print-Section1-CATHeader
     Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
     graphic (+1,1,120) box 1 {g1}
     graphic (,29,28) box 1 {g1}
  end-if
End-procedure Get-CAT-Data



Begin-Procedure Get-Hist-Data
  let $Job_Change = 'N'
  let $PrevEffdt = $Effdt
Begin-select
A2.EMPLID
A2.EMPL_RCD
A2.LOCATION
A2.DEPTID
A2.SETID_JOBCODE
A2.SETID_LOCATION
A2.JOBCODE
A2.ESTABID
A2.EFFDT
A2.EMPL_STATUS
A2.ACTION
A2.ACTION_REASON
V2.SEFIP_CATEGORY_BRA
V2.CBO_CD_BRA
  Let #HEmpl_Rcd  = &A2.EMPL_RCD
  Let $HEffdt     = rtrim(&A2.EFFDT, ' ')
  Let $SetidJobCd = rtrim(&A2.SETID_JOBCODE, ' ')
  Let $SetidLocat = rtrim(&A2.SETID_LOCATION, ' ')
  Let $HDeptid    = rtrim(&A2.DEPTID, ' ')
  Let $HJobCode   = rtrim(&A2.JOBCODE, ' ')
  Let $HEstabid   = rtrim(&A2.ESTABID, ' ')
  Let $HLocation  = rtrim(&A2.LOCATION, ' ')
  Let $HCBOCode   = rtrim(&V2.CBO_CD_BRA, ' ')
  Let $HCBOCode   = lpad($HCBOCode, 7, '0')
  do Get-JobCode-Descr
  
  Do Format-DateTime($PrevEffdt, $PrevEffdtF,{DEFDMY}, '','')
  Do Format-DateTime($HEffdt, $HEffdt2,{DEFDMY}, '','')
  
  let $ActualPRD  = $PrevEffdtF || ' - ' || $HEffdt2
  
  
  if $HDeptid <> $Deptid
     let $Job_Change = 'Y'
  end-if
  if $HLocation <> $Location
     let $Job_Change = 'Y'
  end-if
  if $HJobCode <> $Jobcode
     let $Job_Change = 'Y'
  end-if 
  if $CBOCode <> $HCBOCode
     let $Job_Change = 'Y'
  end-if

  do Get-Manager-Level
  do Get-HEstabInscr
  do Sefip-Risk-Level
  
  if $Job_Change = 'Y'
     do Print-Section1-LocDetail
  end-if
  
  let $PrevEffdt = $HEffdt

FROM PS_JOB A2,
     PS_JOB_JR V2

WHERE A2.EMPLID = $Emplid
AND A2.COMPANY = $Company
AND A2.EFFDT BETWEEN $HireDt AND $IssueDt
AND A2.EMPL_STATUS NOT IN ('T','U','V','W','X','D')
AND A2.EFFSEQ = (SELECT MAX(A_ES.EFFSEQ)FROM PS_JOB A_ES
                 WHERE A2.EMPLID = A_ES.EMPLID
                 AND A2.EMPL_RCD = A_ES.EMPL_RCD
                 AND A2.EFFDT = A_ES.EFFDT)
AND A2.EMPLID = V2.EMPLID
AND V2.EFFDT=(SELECT MAX(VV2.EFFDT) FROM PS_JOB VV2
              WHERE VV2.EMPLID   = V2.EMPLID
              AND   VV2.EMPL_RCD = V2.EMPL_RCD
              AND   VV2.EFFDT   <= $PrevEffdt)
AND A2.EMPL_RCD = V2.EMPL_RCD
AND A2.EFFSEQ = V2.EFFSEQ
End-select
End-Procedure Get-Hist-Data



Begin-Procedure Get-Manager-Level
  Let $Manager_Level = 'NA'
Begin-select
JC.MANAGER_LEVEL
JC.DESCR
  Let $FieldValue = rtrim(&JC.MANAGER_LEVEL, ' ')
  let $FieldName  = 'MANAGER_LEVEL'
  do Read-Translate-Table
  let $Manager_Level = $XlatLongName
  let $Jobcd_Descr = substr(rtrim(&JC.DESCR, ' '),1,20)

FROM PS_JOBCODE_TBL JC

WHERE JC.JOBCODE = $HJobCode
AND JC.SETID = $SetidJobCd
AND JC.EFFDT = (SELECT MAX (JC2.EFFDT) FROM PS_JOBCODE_TBL JC2
             WHERE JC2.JOBCODE = JC.JOBCODE
             AND JC2.SETID = $SetidJobCd
             AND JC2.EFFDT <= $HEffdt)
End-Select
End-Procedure Get-Manager-Level



Begin-procedure Get-HEstabInscr
Begin-select
E2.ESTAB_ID_TYPE_BRA
E2.ESTAB_ID_BRA
F2.COMP_INS_TYPE_BRA
  Let $EstabIDType = rtrim(&E2.ESTAB_ID_TYPE_BRA, ' ')
  Let $InscripType = rtrim(&F2.COMP_INS_TYPE_BRA, ' ')
  
  if $EstabIDType = 'CNPJ'
     Let $CNPJT = rtrim(&E2.ESTAB_ID_BRA, ' ')
     Let $CNPJ1 = substr($CNPJT,1,8)
     Let $CNPJ2 = substr($CNPJT,9,4)
     Let $CNPJ3 = substr($CNPJT,13,2)
     Let $HCNPJ = $CNPJ1 || '/' || $CNPJ2 || '-' || $CNPJ3
  end-if
  if $EstabIDType = 'CEI'
     Let $CEIT = rtrim(&E2.ESTAB_ID_BRA, ' ')
     Let $CEI1 = substr($CEIT,1,2)
     Let $CEI2 = substr($CEIT,3,3)
     Let $CEI3 = substr($CEIT,6,5)
     Let $CEI4 = substr($CEIT,11,2)
     Let $HCEI = $CEI1 || '.' || $CEI2 || '.' || $CEI3 || '/' || $CEI4
  end-if
  
  if $InscripType = '10'
     Let $HEstabInscrip = $HCNPJ
  end-if
  if $InscripType = '20'
     Let $HEstabInscrip = $HCEI
  end-if

FROM PS_ESTAB_ID_BRA E2,
     PS_ESTAB_TBL_BRA F2

WHERE E2.COUNTRY = 'BRA'
AND E2.ESTABID = $HEstabid
AND E2.ESTAB_ID_TYPE_BRA IN ('CNPJ', 'CEI')
AND E2.EFFDT = (SELECT MAX(EE.EFFDT) FROM PS_ESTAB_ID_BRA EE
                WHERE EE.ESTABID = E2.ESTABID
                AND   EE.EFFDT  <= $HEffdt)
AND E2.ESTABID = F2.ESTABID
AND F2.EFFDT = (SELECT MAX(FF2.EFFDT) FROM PS_ESTAB_TBL FF2
                WHERE FF2.ESTABID  = F2.ESTABID
                AND   FF2.EFFDT   <= $HEffdt)
end-select
End-procedure Get-HEstabInscr



Begin-Procedure Sefip-Risk-Level
  Let $Sefip_Risk_Lvl = ''
Begin-Select
AD.SEFIP_RISK_LVL_BRA
  Let $Sefip_Risk_Lvl = &AD.SEFIP_RISK_LVL_BRA

FROM PS_ADDL_INFO_BRA AD

WHERE AD.EMPLID = $Emplid
AND AD.EMPL_RCD = #HEmpl_Rcd
AND AD.EFFDT = (SELECT MAX (AD2.EFFDT) FROM PS_ADDL_INFO_BRA AD2
             WHERE AD2.EMPLID = AD.EMPLID
             AND AD2.EMPL_RCD = #HEmpl_Rcd
             AND AD2.EFFDT <= $HEffdt)
End-Select
  if $Sefip_Risk_Lvl = ''  !not found in Payee Level, get it from Location
    do Get-Loc-Sefip-Risk-Level
  End-if
  
  if $Sefip_Risk_Lvl = ''  !not found in HR, get it from GP
    do Get-GP-Sefip-Risk-Level
  End-if
End-Procedure Sefip-Risk-Level



Begin-Procedure Get-Loc-Sefip-Risk-Level
Begin-Select
LC.SEFIP_RISK_LVL_BRA
  Let $Sefip_Risk_Lvl = &LC.SEFIP_RISK_LVL_BRA

FROM PS_LOCATN_TBL_BRA LC

WHERE LC.SETID = $SetidLocat
AND LC.LOCATION = $HLocation
AND LC.EFFDT = (SELECT MAX (LC2.EFFDT) FROM PS_LOCATN_TBL_BRA LC2
             WHERE LC2.SETID = LC.SETID
             AND LC2.LOCATION = $HLocation
             AND LC2.EFFDT <= $HEffdt)
End-Select
End-Procedure Get-Loc-Sefip-Risk-Level



Begin-Procedure Get-GP-Sefip-Risk-Level
Begin-Select
PP.GPBR_SEFIP_RIS_LVL
  Let $Sefip_Risk_Lvl = &PP.GPBR_SEFIP_RIS_LVL

FROM PS_GPBR_PAYEE_PARM PP

WHERE PP.EMPLID = $Emplid
AND PP.EMPL_RCD = #HEmpl_Rcd
AND PP.END_DT = (SELECT MAX (PP2.END_DT) FROM PS_GPBR_PAYEE_PARM PP2
             WHERE PP2.EMPLID = PP.EMPLID
             AND PP2.EMPL_RCD = #HEmpl_Rcd
             AND PP2.END_DT <= $HEffdt)
End-Select
End-Procedure Get-GP-Sefip-Risk-Level



Begin-Procedure Get-Loc-Descr
Begin-Select
LC3.LOCATION_DTL_BRA
  Let $Observation = &LC3.LOCATION_DTL_BRA
  Let $Observation = replace($Observation, $EnterChar, $SpaceChar)
  Let $Observation = replace($Observation, $LFeedChar, $SpaceChar)
  Let $Observation = replace($Observation, $VTabChar , $SpaceChar)  
  Let $Observation = substr($Observation,1,188)
  Let $Observation2 = substr($Observation,189,375)

FROM PS_LOCATN_TBL_BRA LC3

WHERE LC3.SETID = $SetidLocat
AND LC3.LOCATION = $HLocation
AND LC3.EFFDT = (SELECT MAX (LC4.EFFDT) FROM PS_LOCATN_TBL_BRA LC4
             WHERE LC4.SETID = LC3.SETID
             AND LC4.LOCATION = $HLocation
             AND LC4.EFFDT <= $HEffdt)
End-Select
End-Procedure Get-Loc-Descr



begin-Procedure Get-JobCode-Descr
begin-select
JC3.DESCR
  let $Jobcd_Descr = substr(rtrim(&JC3.DESCR, ' '),1,20)
  do Get-JobCode-Lang

from PS_JOBCODE_TBL JC3
where JC3.SETID = $SetidJobCd
and   JC3.JOBCODE = $HJobCode
and   JC3.EFFDT =  (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
                   WHERE SETID = JC3.SETID
                   and   JOBCODE = JC3.JOBCODE
                   and   EFFDT <= $HEffdt)
and   JC3.EFF_STATUS = 'A'
end-select
End-Procedure Get-JobCode-Descr



begin-procedure Get-JobCode-Lang
  let $JobCode_Lang = ''
Begin-select
JCL.DESCR
  let $JobCode_Lang = substr(rtrim(&JCL.DESCR, ' '),1,20)
  if $JobCode_Lang <> ''
     let $Jobcd_Descr = $JobCode_Lang
  end-if

FROM PS_JOBCODE_LANG JCL

WHERE JCL.SETID = $SetidJobCd
AND   JCL.JOBCODE = $HJobCode
AND   JCL.LANGUAGE_CD = $Curr_language_Cd
and   JCL.EFFDT =  (SELECT MAX(EFFDT) FROM PS_JOBCODE_LANG
       WHERE SETID = JCL.SETID
       and   JOBCODE = JCL.JOBCODE
       AND   LANGUAGE_CD = JCL.LANGUAGE_CD
       and   EFFDT <= $HEffdt)
end-select
End-Procedure Get-JobCode-Lang




Begin-Procedure Get-Job-Task
  Let $TaskDescr = ''
  Let $TaskDescr2 = 'Período sem cadastro de atividades'
  let $EnterChar = chr(13)
  Let $LFeedChar = chr(10)
  Let $VTabChar  = chr(11)
  let $SpaceChar = chr(32)

Begin-Select
R.DESCR
R.DESCRLONG
  Let $TaskDescrshort = rtrim(&R.DESCR, ' ')
  Let $TaskDescr  = rtrim(&R.DESCRLONG, ' ')
  Let $TaskDescr2 = ''
  Let $TaskDescr2 = $TaskDescr2 || ' ' || $TaskDescr
  Let $TaskDescr2 = Ltrim($TaskDescr2, ' ')
  Let $TaskDescr2 = replace($TaskDescr2, $EnterChar, $SpaceChar)
  Let $TaskDescr2 = replace($TaskDescr2, $LFeedChar, $SpaceChar)
  Let $TaskDescr2 = replace($TaskDescr2, $VTabChar , $SpaceChar)
  Let $TaskDescr2 = substr($TaskDescr2, 1, 170)
  let #Taskdescl = Length($TaskDescr2)

FROM PS_JOBCD_TASK_DEFN T,
     PS_JOB_TASK_TBL R

WHERE T.SETID = R.SETID
AND T.SETID = $SetidJobCd
AND T.SETID_LOCATION = $SetidLocat
AND T.JOBCODE = $JobCode
AND T.LOCATION = $Location
AND T.JOB_TASK = R.JOB_TASK
AND R.EFF_STATUS = 'A'
AND T.EFFDT >= R.EFFDT
AND T.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOBCD_TASK_DEFN TD2
              WHERE TD2.SETID = T.SETID 
              AND TD2.JOBCODE = T.JOBCODE
              AND TD2.SETID_LOCATION = T.SETID_LOCATION
              AND TD2.LOCATION = T.LOCATION
              AND TD2.JOB_TASK = T.JOB_TASK
              AND TD2.EFFDT <= $IssueDt)
End-Select
  let $ActualPRD  = $BeginDtF || ' - ' || $EndDtF
  do Print-Section1ProfisDetail
End-Procedure Get-Job-Task




Begin-Procedure Get-JobCd-Risks
  Let $Intens = 'NA'
  Let $Tech_Used = 'NA'
  Let $EPC = 'N'
  Let $EPI = 'N'
  Let #CA_EPI = 0
  Let $Reported_DT = ''
  Let $Removed_DT  = ''
  Let #Count_Risk = 0
begin-select
H.DT_REPORTED
H.DT_REMOVED
I.HAZARD_TYPE_BRA
I.HAZARD_FACTOR_BRA
I.HAZ_EVAL_TYPE_BRA
I.HAZ_CONCEPT_ID_BRA
I.HAZ_CONC_TYPE_BRA
I.HAZARD_UNITS_BRA
H.HAZARD_UNITS_BRA
I.HAZ_UNIT_ID_BRA
J.TECH_USED_BRA
J.EVALUATION_DT
J.EPC_BRA
J.EPI_BRA
J.CA_EPI_BRA
  Let $Reported_DT    = rtrim(&H.DT_REPORTED, ' ')
  Let $Removed_DT     = rtrim(&H.DT_REMOVED, ' ')
  Let $Hazard_Type    = &I.HAZARD_TYPE_BRA
  Let $Hazard_Factor  = rtrim(&I.HAZARD_FACTOR_BRA, ' ')
  Let $Eval_Type      = &I.HAZ_EVAL_TYPE_BRA   !L-Qualitative N-Quantitative
  Let $Haz_Unit       = rtrim(&I.HAZ_UNIT_ID_BRA, ' ')
  Let #Hazard_Units   = &I.HAZARD_UNITS_BRA
  Let #Hazard_Units2  = &H.HAZARD_UNITS_BRA
  if #Hazard_Units2 <> 0
     move #Hazard_Units2 to $Hazard_Units
  else
     move #Hazard_Units  to $Hazard_Units
  end-if
  Let $Haz_Concept    = rtrim(&I.HAZ_CONCEPT_ID_BRA, ' ')
  Let $Hazard_Concept = rtrim(&I.HAZ_CONC_TYPE_BRA, ' ')
  Let $Tech_Used      = rtrim(&J.TECH_USED_BRA, ' ')
  Let $EPC            = &J.EPC_BRA
  Let $EPI            = &J.EPI_BRA
  Let #CA_EPI         = &J.CA_EPI_BRA
  Do Format-DateTime($Reported_DT, $Reported_DTF,{DEFDMY}, '','')
  Do Format-DateTime($Removed_DT, $Removed_DTF,{DEFDMY}, '','')
  Let $HazPRD = $Reported_DTF || ' - ' ||$Removed_DTF

  if $Eval_Type = 'L'
     Let $Intens = $Hazard_Units || ' ' || $Hazard_Unit_T
  else
     Let $Intens = $Haz_Concept || '-' ||$Hazard_Concept
  end-if
  Let $Intens = substr($Intens,1,15)

  if $EPC = 'Y'
     Let $EPC = 'S'
  end-if
  if $EPI = 'Y'
     Let $EPI = 'S'
  end-if

  do Print-Section2RiskDetail

from PS_JOBCODE_HAZ_BRA H,
     PS_HAZARD_TBL_BRA I,
     PS_JOBCD_H_EVL_BRA J

WHERE H.SETID = I.SETID
AND H.SETID = J.SETID
AND J.SETID = $SetidJobCd
AND H.JOBCODE = J.JOBCODE
AND J.JOBCODE = $Jobcode
AND H.HAZARD_ID = I.HAZARD_ID
AND H.HAZARD_ID = J.HAZARD_ID
AND H.REG_REGION = J.REG_REGION
AND H.DT_REPORTED >= I.EFFDT
AND I.EFF_STATUS = 'A'
AND J.EVALUATION_DT BETWEEN $HireDt AND $IssueDt
!AND H.DT_REPORTED = J.DT_REPORTED
!AND J.EVALUATION_DT = (SELECT MAX(EVALUATION_DT) FROM PS_JOBCD_H_EVL_BRA
!                      WHERE SETID = J.SETID AND JOBCODE = J.JOBCODE
!                      AND REG_REGION = J.REG_REGION AND HAZARD_ID = J.HAZARD_ID
!                      AND DT_REPORTED = J.DT_REPORTED AND EVALUATION_DT <= $HEffdt)
end-select
  if #Count_Risk = 0
     graphic (+1,1,120) box 1 {g1}
  end-if
End-Procedure Get-JobCd-Risks



Begin-procedure Get-PPP-Resp-A
  let $Resp_BeginDt   = ''
  let $Resp_EndDt     = ''
  let $Resp_Prd       = ''
  let $Resp_CodeType  = ''
  let $Resp_ClassType = ''
  let $Resp_State     = ''
  let #Count_Resp-A   = 0
begin-select
RESP.BEGIN_DT
RESP.END_DT
RESP.PPP_INFO_TYPE_BRA
RESP.PPP_RESP_TYPE_BRA
RESP.EMPLID
RESP.PPP_COMMENTS_BRA
RESP.CODE_TYPE_BRA
RESP.CLASS_TYPE_BRA
RESP.COUNTRY
RESP.STATE
  let $Resp_BeginDt   = &RESP.BEGIN_DT
  let $Resp_EndDt     = &RESP.END_DT
  let $Resp_InfoType  = rtrim(&RESP.PPP_INFO_TYPE_BRA, ' ')
  let $Resp_RespType  = rtrim(&RESP.PPP_RESP_TYPE_BRA, ' ')
  let $Resp_Emplid    = rtrim(&RESP.EMPLID, ' ')
  let $Resp_PPP_Comm  = rtrim(&RESP.PPP_COMMENTS_BRA, ' ')
  let $Resp_CodeType  = rtrim(&RESP.CODE_TYPE_BRA, ' ')
  let $Resp_CodeType  = lpad($Resp_CodeType,7, '0')
  let $Resp_ClassType = rtrim(&RESP.CLASS_TYPE_BRA, ' ')
  let $Resp_Country   = rtrim(&RESP.COUNTRY, ' ')
  let $Resp_State     = rtrim(&RESP.STATE, ' ')
  add 1 to #Count_Resp-A
  
  let $Cons_Class = $Resp_CodeType || '-' || $Resp_ClassType || '/' || $Resp_State
  Do Format-DateTime($Resp_BeginDt, $Resp_BeginDtF,{DEFDMY}, '','')
  Do Format-DateTime($Resp_EndDt, $Resp_EndDtF,{DEFDMY}, '','')
  let $Resp_Prd = $Resp_BeginDtF || ' - ' || $Resp_EndDtF

  let $Report_Emplid = $Resp_Emplid
  do Get-Reported-ID
  let $Resp_NIT  = $Reported_ID
  let $Resp_Name = $Report_Name

  if #Count_Resp-A > 0
     do Print-Section2RespDetail
  end-if

FROM PS_PPP_RESP_BRA RESP

WHERE RESP.SETID = $SetidLocat
AND RESP.LOCATION = $HLocation
AND RESP.BEGIN_DT BETWEEN $HireDt and $IssueDt
AND RESP.PPP_INFO_TYPE_BRA = 'A'
end-select
  if #Count_Resp-A = 0
     graphic (+1,1,120) box 1 {g1}
     graphic (,15,14) box 1 {g1}
     graphic (,57,64) box 1 {g1}
  end-if
End-Procedure Get-PPP-Resp-A



Begin-procedure Get-Medical-Exams
  let $Baseline = 'N'
  Let $Med_OP1 = ' '
  Let $Med_OP2 = ' '
  Let $Alt_OP1 = ' '
  Let $Alt_OP1 = ' '
  Let $Sev_OP1 = ' '
  Let $Sev_OP1 = ' '
  Let $Exam_Comment = ''
  Let $PPP_Exam = ''
  let #Count_Med_Exam = 0
Begin-select
MED.EXAM_TYPE_CD
MED.EXAM_DT
MED.MED_EXAM_TYPE_BRA
MED.BASELINE
MED.PPP_EXAM_TYPE_BRA
MED.PPP_RSLT_TYPE_BRA
MED.PPP_ALT_RSLT_BRA
MED.PPP_SEV_RSLT_BRA
  let $Exam_Code   = &MED.EXAM_TYPE_CD
  let $Exam_DT     = &MED.EXAM_DT
  let $Exam_Type   = &MED.MED_EXAM_TYPE_BRA
  let $Baseline    = &MED.BASELINE
  let $PPP_Exam    = &MED.PPP_EXAM_TYPE_BRA
  let $Med_Result  = &MED.PPP_RSLT_TYPE_BRA
  let $Alt_Result  = &MED.PPP_ALT_RSLT_BRA
  let $Sev_Result  = &MED.PPP_SEV_RSLT_BRA
  add 1 to #Count_Med_Exam
  Do Format-DateTime($Exam_DT, $Exam_DTF,{DEFDMY}, '','')

  if $Baseline     = 'Y'
     let $Baseline = 'R - Referencial'
  else
     let $Baseline = 'S - Seqüencial'
  end-if

  if $Med_Result  = '0'
     Let $Med_OP1 = '( X ) Normal'
     Let $Med_OP2 = '(   ) Alterado'
  else
     Let $Med_OP1 = '(   ) Normal'
     Let $Med_OP2 = '( X ) Alterado'
  end-if
  
  if $Alt_Result  = '0'
     Let $Alt_OP1 = '( X )  Estável'
     Let $Alt_OP2 = '(   )  Agravamento'
  else
     Let $Alt_OP1 = '(   )  Estável'
     Let $Alt_OP2 = '( X )  Agravamento'
  end-if
  
  if $Sev_Result  = '0'
     Let $Sev_OP1 = '( X )  Ocupacional'
     Let $Sev_OP2 = '(   )  Não Ocupacional'
  else
     Let $Sev_OP1 = '(   )  Ocupacional'
     Let $Sev_OP2 = '( X )  Não Ocupacional'
  end-if

  evaluate $PPP_Exam
    when = 'A'
      let $PPP_Exam = $PPP_Exam || ' - ' || 'Admissional'
    when = 'P'
      let $PPP_Exam = $PPP_Exam || ' - ' || 'Periódico'
    when = 'M'
      let $PPP_Exam = $PPP_Exam || ' - ' || 'Mudanca de Funcao'
    when = 'R'
      let $PPP_Exam = $PPP_Exam || ' - ' || 'Retorno ao Trabalho'
    when = 'D'
      let $PPP_Exam = $PPP_Exam || ' - ' || 'Demissional'
  end-evaluate

  evaluate $Exam_Type
    when = 'RES'
      do Get-Med-Exam-Res
    when = 'PHY'
      do Get-Med-Exam-Phy
    when = 'EYE'
      do Get-Med-Exam-Eye
    when = 'AUD'
      do Get-Med-Exam-Aud
  end-evaluate
  Let $Exam_Comment = substr($Exam_Comment,1,50)

  if #Count_Med_Exam > 0
     do Print-Section3ExamDetail
  end-if  

FROM PS_MED_EXAM_BRA MED

WHERE EMPLID = $Emplid
AND EXAM_DT BETWEEN $HireDt and $IssueDt
end-select
  if #Count_Med_Exam = 0
     graphic (+1,1,120) box 1 {g1}
     graphic (,15,14) box 1 {g1}
     graphic (,71,14) box 1 {g1}
     graphic (,99,22) box 1 {g1}
  end-if
End-Procedure Get-Medical-Exams



Begin-Procedure Get-Med-Exam-Res
Begin-Select
RES.COMMENTS
  Let $Exam_Comment = &RES.COMMENTS
  
FROM PS_RESPIRATORY_EXM RES

WHERE RES.EMPLID = $Emplid
AND RES.EXAM_DT = $Exam_DT
AND RES.EXAM_TYPE_CD = $Exam_Code
End-Select
End-Procedure Get-Med-Exam-Res


Begin-Procedure Get-Med-Exam-Phy
Begin-Select
PHY.COMMENTS
  Let $Exam_Comment = &PHY.COMMENTS

FROM PS_PHYSICAL_EXAM PHY
WHERE PHY.EMPLID = $Emplid
AND PHY.EXAM_DT = $Exam_DT
AND PHY.EXAM_TYPE_CD = $Exam_Code
End-Select
End-Procedure Get-Med-Exam-Phy


Begin-Procedure Get-Med-Exam-Eye
Begin-Select
EYE.COMMENTS
  Let $Exam_Comment = &EYE.COMMENTS
  
FROM PS_EYE_EXAM EYE
WHERE EYE.EMPLID = $Emplid
AND EYE.EXAM_DT = $Exam_DT
AND EYE.EXAM_TYPE_CD = $Exam_Code
End-Select
End-Procedure Get-Med-Exam-Eye


Begin-Procedure Get-Med-Exam-Aud
Begin-Select
AUD.COMMENTS
  Let $Exam_Comment = &AUD.COMMENTS
  
FROM PS_AUDIOMETRIC_TST AUD
WHERE AUD.EMPLID = $Emplid
AND AUD.EXAM_DT = $Exam_DT
AND AUD.EXAM_TYPE_CD = $Exam_Code
End-Select
End-Procedure Get-Med-Exam-Aud




Begin-procedure Get-PPP-Resp-B
  let $Resp_BeginDt   = ''
  let $Resp_EndDt     = ''
  let $Resp_Prd       = ''
  let $Resp_CodeType  = ''
  let $Resp_ClassType = ''
  let $Resp_State     = ''
  let #Count_Resp-B   = 0
begin-select
RESPB.BEGIN_DT
RESPB.END_DT
RESPB.PPP_INFO_TYPE_BRA
RESPB.PPP_RESP_TYPE_BRA
RESPB.EMPLID
RESPB.PPP_COMMENTS_BRA
RESPB.CODE_TYPE_BRA
RESPB.CLASS_TYPE_BRA
RESPB.COUNTRY
RESPB.STATE
  let $Resp_BeginDt   = &RESPB.BEGIN_DT
  let $Resp_EndDt     = &RESPB.END_DT
  let $Resp_InfoType  = rtrim(&RESPB.PPP_INFO_TYPE_BRA, ' ')
  let $Resp_RespType  = rtrim(&RESPB.PPP_RESP_TYPE_BRA, ' ')
  let $Resp_Emplid    = rtrim(&RESPB.EMPLID, ' ')
  let $Resp_PPP_Comm  = rtrim(&RESPB.PPP_COMMENTS_BRA, ' ')
  let $Resp_CodeType  = rtrim(&RESPB.CODE_TYPE_BRA, ' ')
  let $Resp_CodeType  = lpad($Resp_CodeType,7, '0')
  let $Resp_ClassType = rtrim(&RESPB.CLASS_TYPE_BRA, ' ')
  let $Resp_Country   = rtrim(&RESPB.COUNTRY, ' ')
  let $Resp_State     = rtrim(&RESPB.STATE, ' ')
  add 1 to #Count_Resp-B
  
  let $Cons_Class = $Resp_CodeType || '-' || $Resp_ClassType || '/' || $Resp_State
  Do Format-DateTime($Resp_BeginDt, $Resp_BeginDtF,{DEFDMY}, '','')
  Do Format-DateTime($Resp_EndDt, $Resp_EndDtF,{DEFDMY}, '','')
  let $Resp_Prd = $Resp_BeginDtF || ' - ' || $Resp_EndDtF
  
  let $Report_Emplid = $Resp_Emplid
  do Get-Reported-ID
  let $Resp_NIT  = $Reported_ID
  let $Resp_Name = $Report_Name

  if #Count_Resp-B > 0
     do Print-Section3RespDetail
  end-if

FROM PS_PPP_RESP_BRA RESPB

WHERE RESPB.SETID = $SetidLocat
AND RESPB.LOCATION = $HLocation
AND RESPB.BEGIN_DT BETWEEN $HireDt and $IssueDt
AND RESPB.PPP_INFO_TYPE_BRA = 'B'
end-select
  if #Count_Resp-B = 0
     graphic (+1,1,120) box 1 {g1}
     graphic (,15,14) box 1 {g1}
     graphic (,57,64) box 1 {g1}
  end-if
End-Procedure Get-PPP-Resp-B





Begin-procedure Get-Reported-ID
  Let $Reported_ID = ''
  let $Report_Name = ''
Begin-select
L2.NATIONAL_ID_TYPE
L2.NATIONAL_ID
  Let $NationalIdType = rtrim(&L2.NATIONAL_ID_TYPE, ' ')
  Evaluate $NationalIdType
    when = 'PASEP'
       Let $Reported_ID = rtrim(&L2.NATIONAL_ID, ' ')
    when = 'PIS'
       Let $Reported_ID = rtrim(&L2.NATIONAL_ID, ' ')
  End-Evaluate 

FROM PS_PERS_NID L2
WHERE L2.EMPLID = $Report_Emplid
AND (L2.NATIONAL_ID_TYPE = 'PIS' OR  L2.NATIONAL_ID_TYPE = 'PASEP')
end-select

Begin-Select
RN.NAME
RN.FIRST_NAME
RN.LAST_NAME
RN.SECOND_LAST_NAME
  !let $Report_Name = rtrim(&RN.NAME, ' ')
  let $firstname = rtrim(&RN.FIRST_NAME , ' ')
  let $lastname1 = rtrim(&RN.LAST_NAME , ' ')
  let $lastname2 = rtrim(&RN.SECOND_LAST_NAME , ' ')
  let $Report_Name = $firstname || ' ' || $lastname1 || ' ' || $lastname2

FROM PS_NAMES RN

WHERE RN.EMPLID = $Report_Emplid
AND RN.NAME_TYPE = 'PRI'
AND RN.EFFDT = (SELECT MAX(BB.EFFDT) FROM PS_NAMES BB
                WHERE BB.EMPLID = RN.EMPLID
                AND BB.NAME_TYPE = RN.NAME_TYPE
                AND BB.EFFDT <= $HEffdt)
End-Select
End-procedure Get-Reported-ID




begin-procedure Get-Company-Address
begin-select
CADDR.ADDRESS1
CADDR.NUM1
CADDR.ADDRESS2
CADDR.ADDRESS4
CADDR.POSTAL
CADDR.CITY
CADDR.STATE
CADDR.EFFDT
  let $Company_Addr1  = rtrim(&CADDR.ADDRESS1,' ')
  let $Company_Num1   = rtrim(&CADDR.NUM1,' ')
  let $Company_Addr4  = rtrim(&CADDR.ADDRESS4,' ')
  let $Company_Postal = rtrim(&CADDR.POSTAL,' ')
  let $Company_City   = rtrim(&CADDR.CITY,' ')
  let $Company_State  = rtrim(&CADDR.STATE,' ')

  let $Address_Comp1  = $Company_Addr1 || ' ' || $Company_Num1
  let $Address_Comp2  = $Company_Addr4 || ' ' || $Company_Postal
  let $Address_Comp3  = $Company_City || '-' || $Company_State

FROM  PS_COMPANY_TBL CADDR
WHERE CADDR.COMPANY = $Company
  AND CADDR.EFFDT = (SELECT MAX(EFFDT) FROM PS_COMPANY_TBL
                    WHERE COMPANY = $Company
                    AND EFFDT <= $IssueDt)
end-select
End-procedure Get-Company-Address




begin-procedure Check-Strings
let $String_In  = ltrim(rtrim($Postal, ' '),' ')
let #I = 1
Let $String_Out = ''
let #Len = Length($String_In)

While #I  <= #Len
   Let $Test_Char    = Substr($String_In,#I, 1)

   evaluate $Test_Char
      when = '-'
         break
      when = ' '
         break
      when-other
      let $String_Out  = $String_Out || $Test_Char
      end-evaluate
   add 1 To #I
End-While

let $String_In  = ''
Let $Postal = $String_Out
End-procedure Check-Strings




begin-procedure Print-Section1-1
  let #Pagenum = 1
Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr

graphic (5,1,120) box 20 {g1}
print 'ANEXO XV'  (8,56)  Bold
print 'INSTRUÇÃO NORMATIVA INSS/DC Nº 99/2003'      (+3,39) Bold
print-image (+2,52)
   type       = jpeg-file
   image-size =(20,4)
   source     = $FileDir
    
print 'PERFIL PROFISSIOGRÁFICO PREVIDENCIÁRIO - PPP'(+8,35) Bold
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm

let $Pagenum = 'Pág: ' || to_char(#Pagenum)
print $Pagenum                                      (5,112) Bold
  
!****************************************************************
! SECCION 1
!****************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (20,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1}

Print 'I'                                           (,{c1}) Bold
Print 'SEÇÃO DE DADOS ADMINISTRATIVOS'              (,+5) Bold

graphic (+1,1,120) box 2 {g1}
graphic (,29,56) box 2 {g1}

print '1 - CNPJ do Domicilio Tributário'            (,{c1}) Bold
print '2 - Nome Empresarial'                        (,{c3}) Bold
print '3 - CNAE'                                    (,{c7}) Bold

if $EstabInscr <> ''
print $EstabInscr                                   (+1,{c1}) edit XXXXXXXX/XXXX-XX
end-if
print $LegalName                                    (,{c3})
print $CNAE                                         (,{c7}) edit XXXX-X/XX

graphic (+1,1,120) box 2 {g1}
graphic (,57,28) box 2 {g1}

print '4 - Nome do Trabalhador'                     (,{c1}) Bold
print '5 - BR/PDH'                                  (,{c5}) Bold
print '6 - NIT'                                     (,{c7}) Bold

print $EmplName                                     (+1,{c1})
print $PPP_Situation                                (,{c5})
print $PISPASEP                                     (,{c7}) edit XXX.XXXXX.XX-X

graphic (+1,1,120) box 2 {g1}
graphic (,16,13) box 2 {g1}
graphic (,57,28) box 2 {g1}

print '7 - Data do Nascimento'                      (,{c1}) Bold
print '8 - Sexo (F/M)'                              (,{c2a}) Bold
print '9 - CTPS (Nº, Série e UF)'                   (,{c3}) Bold
print '10 - Data de Admissão'                       (,{c5}) Bold
print '11 - Regime Revezamento'                     (,{c7}) Bold

print $Birth_DateF                                  (+1,{c1})
print $EmplSex                                      (,{c2a})
print $NationalID                                   (,{c3})
print $HireDTF                                      (,{c5})
print $Schedule                                     (,{c7})
end-procedure Print-Section1-1




begin-procedure Print-Section1-CATHeader
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '12'                                          (,{c1}) Bold
Print 'CAT REGISTRADA'                              (,+5) Bold 

graphic (+1,1,120) box 1 {g1}
graphic (,29,28) box 1 {g1}

print '12.1 - Data do Registro'                     (,{c1}) Bold
print '12.2 - Número de CAT'                        (,{c3}) Bold
End-procedure Print-Section1-CATHeader




begin-procedure Print-Section1-CATDetail
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+1,1,120) box 1 {g1}
graphic (,29,28) box 1 {g1}

print $CAT_Reg_DtF                                  (,{c1})
print $CAT_Reg_ID                                   (,{c3})
end-procedure Print-Section1-CATDetail




begin-procedure Print-Section1-LocHeader
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '13'                                          (,{c1}) Bold
Print 'LOTAÇÃO E ATRIBUIÇÃO'                          (,+5) Bold

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,43,14) box 1 {g1}
graphic (,85,14) box 1 {g1}

print '13.1 - Período'                              (,{c1}) Bold
print '13.2 - CNPJ/CEI'                             (,{c2}) Bold
print '13.3 - Setor'                                (,{c3}) Bold
print '13.4 - Cargo'                                (,{c4}) Bold
print '13.5 - Função'                               (,{c5}) Bold
print '13.6 - CBO'                                  (,{c7}) Bold
print '13.7 - GFIP'                                 (,{c8}) Bold
end-procedure Print-Section1-LocHeader




begin-procedure Print-Section1-LocDetail
if #Current-Line >= 71
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+1,1,120) box 2 {g1}

print $ActualPRD                                    (,{c1})
print $HEstabInscrip                                (,{c2})
print $HLocation                                    (,{c3})
print $Jobcd_Descr                                  (,{c4})
!print $HJobCode                                     (,{c4})
print $Manager_Level                                (,{c5})
print $HCBOCode                                     (,{c7})
print $Sefip_Risk_Lvl                               (,{c8})

!graphic (35,1,120) box 2 {g1}
!graphic (37,1,120) box 2 {g1}
end-procedure Print-Section1-LocDetail




begin-procedure Print-Section1ProfisHeader
if #Current-Line >= 71
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '14'                                          (,{c1}) Bold
Print 'PROFISSIOGRAFIA'                             (,+5) Bold 

graphic (+1,1,120) box 1 {g1}
graphic (,1,14) box 1 {g1} 

print '14.1 - Período'                              (,{c1}) Bold
print '14.2 - Descrição das Atividades'             (,{c2}) Bold
end-procedure Print-Section1ProfisHeader



begin-procedure Print-Section1ProfisDetail
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}

print $ActualPRD                                    (,{c1})
print $TaskDescrshort                               (,{c2})
!print $TaskDescr2                                  (,{c2})
end-procedure Print-Section1ProfisDetail




Begin-Procedure Print-Section2RiskHeader
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+3,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print 'II'                                          (,{c1}) Bold
Print 'SEÇÃO DE REGISTROS AMBIENTAIS'               (,+5) Bold

graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '15'                                          (,{c1}) Bold
Print 'EXPOSIÇÃO A FATORES DE RISCO'                (,+5) Bold

graphic (+1,1,120) box 2 {g1}
graphic (,15,14) box 2 {g1}
graphic (,43,14) box 2 {g1}
graphic (,71,14) box 2 {g1}
graphic (,99,22) box 2 {g1}

print '15.1 - Período'                              (,{c1}) Bold
print '15.2 - Tipo'                                 (,{c2}) Bold
print '15.3 - Fator de Risco'                       (,{c3}) Bold
print '15.4 - Intens./Conc.'                        (,{c4}) Bold
print '15.5 - Técnica'                              (,{c5}) Bold
print '15.6 - EPC'                                  (,{c6}) Bold
print '15.7 - EPI'                                  (,{c7}) Bold
print '15.8 - CA EPI'                               (,{c8}) Bold
print 'Utilizada'                                   (+1,{c5}) Bold
print 'Eficaz (S/N)'                                (,{c6}) Bold
print 'Eficaz (S/N)'                                (,{c7}) Bold
end-procedure Print-Section2RiskHeader




Begin-procedure Print-Section2RiskDetail
if #Current-Line >= 72
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+1,1,120) box 2 {g1}

print $HazPRD                                       (,{c1})
print $Hazard_Type                                  (,{c2})
print $Hazard_Factor                                (,{c3})
print $Intens                                       (,{c4}) edit b
print $Tech_Used                                    (,{c5})
print $EPC                                          (,{c6})
print $EPI                                          (,{c7})
print #CA_EPI                                       (,{c8}) edit 88888
end-procedure Print-Section2RiskDetail




begin-procedure Print-Section2RespHeader
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '16'                                          (,{c1}) Bold
Print 'RESPONÁVEL PELOS REGISTROS AMBIENTAIS'       (,+5) Bold

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,57,64) box 1 {g1}

print '16.1 - Período'                              (,{c1}) Bold
print '16.2 - NIT'                                  (,{c2}) Bold
print '16.3 - Registro Consehlho de Classe'         (,{c3}) Bold
print '16.4 - Nome do Profissional Legalmente Habilitado'         (,{c5}) Bold

end-procedure Print-Section2RespHeader




Begin-procedure Print-Section2RespDetail
if #Current-Line >= 72
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,57,64) box 1 {g1}

print $Resp_Prd                                     (,{c1})
print $Resp_NIT                                     (,{c2})
print $Cons_Class                                   (,{c3})
print $Resp_Name                                    (,{c5})
end-procedure Print-Section2RespDetail




begin-procedure Print-Section3ExamHeader
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+2,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print 'III'                                         (,{c1}) Bold
Print 'SEÇÃO DE RESULTADOS E MONITORAÇÃO BIOLÓGICA' (,+5) Bold

graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '17'                                          (,{c1}) Bold
Print 'EXAMES MÉDICOS CLÌNICOS E COMPLEMENTARES (Quaros I e II de NR-07)' (,+5) Bold 

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,71,14) box 1 {g1}

print '17.1 - Data'                                 (,{c1}) Bold
print '17.2 - Tipo'                                 (,{c2}) Bold
print '17.3 - Natureza'                             (,{c3}) Bold
print '17.4 - Exame (R/S)'                          (,{c6}) Bold
print '17.5 - Indicação de Resultados'              (,{c7}) Bold

end-procedure Print-Section3ExamHeader




begin-procedure Print-Section3ExamDetail
if #Current-Line >= 68
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 5 {g1}
graphic (,15,14) box 5 {g1}
graphic (,71,14) box 5 {g1}
graphic (,99,22) box 5 {g1}

print $Exam_DTF                                     (,{c1})
print $PPP_Exam                                     (,{c2})
print $Exam_Comment                                 (,{c3})
print $Baseline                                     (,{c6})
print $Med_OP1                                      (,{c7})
print $Med_OP2                                      (,{c8})
print $Alt_OP1                                      (+1,{c9})
print $Alt_OP2                                      (+1,{c9})
print $Sev_OP1                                      (+1,{c9b})
print $Sev_OP2                                      (+1,{c9b})
end-procedure Print-Section3ExamDetail




begin-procedure Print-Section3RespHeader
if #Current-Line >= 67
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+1,1,120) box 1 {g1}
graphic (,1,4) box 1 {g1} 

Print '18'                                          (,{c1}) Bold
Print 'RESPONSÁVEL PELA MONITORAÇÃO BIOLÓGICA'      (,+5) Bold 

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,57,64) box 1 {g1}

print '18.1 - Período'                              (,{c1}) Bold
print '18.2 - NIT'                                  (,{c2}) Bold
print '18.3 - Registro Conselho de Classe'          (,{c3}) Bold
print '18.4 - Nome do Profissional Legalmente Habilitado' (,{c5}) Bold

end-procedure Print-Section3RespHeader



Begin-procedure Print-Section3RespDetail
if #Current-Line >= 72
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+1,1,120) box 1 {g1}
graphic (,15,14) box 1 {g1}
graphic (,57,64) box 1 {g1}

print $Resp_Prd                                     (,{c1})
print $Resp_NIT                                     (,{c2})
print $Cons_Class                                   (,{c3})
print $Resp_Name                                    (,{c5})
end-procedure Print-Section3RespDetail



begin-procedure Print-Section4a
if #Current-Line >= 60
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+3,1,120) box 1 {g1}
!graphic (,1,4) box 1 {g1}

Print 'IV'                                          (,{c1}) Bold
Print 'RESPONSÁVEL PELAS INFORMAÇÕES'               (,+5) Bold

graphic (+1,1,120) box 5

let $TEXT1 = 'Declaramos, para todos os fins de direito, que as informações prestadas ' 
let $TEXT1 = $TEXT1 || 'neste documento são verídicas e foram transcritas fielmente dos registros '
let $TEXT1 = $TEXT1 || 'administrativos, das demosrações ambientais dos programas médicos '
let $TEXT2 = 'de responsabilidade da empresa. É de nosso conhecimento que a prestação de '
let $TEXT2 = $TEXT2 || 'informações falsas neste documento constitui crime de falsificação de ' 
let $TEXT2 = $TEXT2 || 'documento público, nos termos do art. 297 do Código Penal e, '
let $TEXT3 = 'também, que taisinformações são de caráter privativo do trabalhador,  '
let $TEXT3 = $TEXT3 || 'constituindo crime, nos termos de Lei nº 9.029/95. práticas discriminatórias '
let $TEXT3 = $TEXT3 || 'decorrentes de sua exigibilidade por outrem, bem como de sua divulgação  '
let $TEXT4 ='para terceiros, ressalvando quando exigida pelos órgãos públicos competentes.'

Print $TEXT1                                        (,{c1})
Print $TEXT2                                        (,{c1})
Print $TEXT3                                        (,{c1})
Print $TEXT4                                        (,{c1})
end-procedure Print-Section4a



begin-procedure Print-Section4b
if #Current-Line >= 60
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

graphic (+2,1,120) box 1 {g1}
graphic (,16,4) box 1 {g1} 

Print '19 - Data Emissão PPP'                       (,{c1}) Bold
Print '20'                                          (,{c2a}) Bold
Print 'REPRESENTANTE LEGAL DA EMPRESA'              (,+5) Bold

graphic (+1,1,120) box 1 {g1}
graphic (,16,41) box 1 {g1}

Print $Resp20_NIT                                   (,{c2a}) Bold !edit XXX.XXXXX.XX-X
Print $Resp20_Name                                  (,{c5}) Bold

graphic (+1,1,120) box 8 {g1}
graphic (,16,41) box 8 {g1}

Print $EstabInscr                                   (+1,{c2b}) Bold edit XXXXXXXX/XXXX-XX
Print $LegalName                                    (+1,{c2b}) Bold
Print $AsofTodayF                                   (+1,6)
Print $Legal_Address1                               (,{c2b})
Print $Legal_Address2                               (+1,{c2b})
Print $Legal_Address3                               (+1,{c2b})
Print '_________________________________________'   (,76)
Print '                (Assinatura)'                (+1,81)

graphic (+2,1,120) box 1 {g1}
Print 'OBSERVAÇÕES'                                 (,{c1}) Bold

graphic (+1,1,120) box 2 {g1} !box 1 {g1}
Print $Observation                                  (,{c1})
Print $Observation2                                 (,{c1})
end-procedure Print-Section4b



begin-procedure Print-Section4c
if #Current-Line >= 70
   do Print-Page-Header
end-if

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (+2,1,120) box 1 {g1}
Print 'PROTOCOLO'                                   (,{c5}) Bold

graphic (+1,1,120) box 4 {g1}
Print 'Recibi uma via deste documento de igual teor'(+1,{c1})
Print 'Data: '                                      (+1,{c1})
Print $AsofTodayF                                   (,+1)
Print '__________________________________________'  (,49)
Print 'Assinatura'                                  (+1,60)

graphic (75,1,120) box 1 {g1}

Print $Emplid                                       (,{c1})
Print $EmplName                                     (,+2)
Print 'Emissão:'                                    (,{c8})
Print $IssueDtF                                     (,+1)
Let #JOB_Count = 0
end-procedure Print-Section4c



begin-procedure Print-Page-Footer
add 1 to #Pagenum
graphic (75,1,120) box 1 {g1}
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
Print $Emplid                                       (,{c1})
Print $EmplName                                     (,+2)
Print 'Emissão:'                                    (,{c8})
Print $IssueDtF                                     (,+1)
end-procedure Print-Page-Footer



begin-procedure Print-Page-Header
do Print-Page-Footer
new-page

Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
let $Pagenum = 'Pág: ' || to_char(#Pagenum)
print $Pagenum                                      (5,112) Bold

Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr

graphic (5,1,120) box 17 {g1}
print 'ANEXO XV'  (8,56)  Bold
print 'INSTRUÇÃO NORMATIVA INSS/DC Nº 99/2003'      (+3,39) Bold
print-image (+2,52)
   type       = jpeg-file
   image-size =(20,4)
   source     = $FileDir

print 'PERFIL PROFISSIOGRÁFICO PREVIDENCIÁRIO - PPP'(+8,35) Bold
print ''                                            (+1,1)
end-procedure Print-Page-Header

!$_prcs_message_pgmname
!$ReportID
!$sqr-program

#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Common date routines
#include 'getcombr.sqc'  !Get selected fields from Company Table and Brazil Fields
#include 'hrsecty.sqc'   !Get SQR Security parameters
