!***********************************************
!  BUD020:  Retro Distribution Audit Report    *
!***********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:21:56                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
! Last Modified : Nov 7 2001 R-CFUNG-B775U                             *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

begin-report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  move 'BUD020' to $ReportID
  move 'Retro Distribution Audit' to $ReportTitle
  display $ReportTitle
  do Get-Calendar-Year-Id
  do Init-Report
  do Audit-Report
  do reset
  do Stdapi-Term
end-report


begin-heading 14
  #Include 'stdhdg01.sqc'

  print 'RUN CONTROL :'                                     (+2,1)
  print $DB_Run_control_id                                  (0, 16)
  print 'CREATED BY :'                                      (0, 70)
  print $DB_Create_user                                     (0, 84)
  print 'CREATED DATE :'                                    (0, 124)
  print $DB_Create_Date                                     (0, 139)
  print 'STATUS :'                                          (0, 151)
  print $DB_Status                                          (0, 161)

  print 'APPROVED BY :'                                     (+1,1)
  PRINT $DB_Approved_user                                   (0, 16)
  print 'APPROVED DATE :'                                   (0, 70)
  print $DB_Approved_Date                                   (0, 87)
  print 'PROCESSED DATE :'                                  (0, 124)
  PRINT $DB_processed_date                                  (0, 139)

  print 'CHECK DATA '                                       (+2, 1) bold
  print 'Employee Id '                                      (+1, 1)
  print 'Employee Name '                                    (+0, 15)

  print 'COMPANY'                                           (+0, 52)
  print 'PAYGROUP'                                          (+0, 62)
  print 'PAY END DATE'                                      (+0, 72)
  print 'OFF CYCLE'                                         (+0, 87)
  print 'PAGE NUMBER'                                       (+0, 97)
  print 'LINE NUMBER'                                       (+0, 112)
  print 'SEP CHK'                                           (+0, 127)


  PRINT 'DISTRIBUTION DATA (BEFORE AND AFTER)'              (+2, 1) bold
  print 'Type'                                              (+1, 5)
  print 'Empl Rcd'                                          (+0, 15)
  print 'Fiscal Yr/Period'                                  (+0, 25)
  print 'Department'                                        (+0, 45)
  print 'Pool Id'                                           (+0, 57)
  print 'Position'                                          (+0, 80)
  print 'Jobcode'                                           (+0, 90)
  print 'Combination Code'                                  (+0, 102)
  print 'Account'                                           (+0, 125)
  print 'Amount'                                            (+0, 141)
  print 'Retro Pay Date'                                    (+0, 159)

  print $title_emplid                        (+2,2)
  print $title_emplname                      (+0,15)
  print $title_company                       (+0,54)
  PRINT $title_paygroup                      (0,65)
  print $title_pay_end_date                  (0,72)
  print $title_off_cycle                     (0,91)
  print $title_page_num                      (0,103)
  print $title_line_num                      (0,117)
  PRINT $itle_sepchk                        (0,132)

end-heading

!***********************************************************************
! SET-UP-CHECK-HEAD This procedure sets up the headings for the audit  *
! report                                                               *
!***********************************************************************

begin-procedure set-up-check-head


   let $DB_Run_control_id = $A_HP_RUN_CNTL_ID
   let $DB_Create_user    = $A_OPRID_LAST_UPDT
   let $DB_Create_Date    = $A_CREATION_DT
   do Format-DateTime($DB_Create_Date , $DB_Create_Date , {DEFDATE}, '', '')

   let $DB_Status         = $A_HP_PROCESS_STATE
   let $DB_Approved_user  = $A_HP_APPROVER_ID
   let $DB_Approved_Date  = $A_APPROVE_DATE
   do Format-DateTime($DB_Approved_Date , $DB_Approved_Date , {DEFDATE}, '', '')

   let $DB_processed_date = $A_PROCESS_DT
   do Format-DateTime($DB_processed_Date , $DB_processed_Date , {DEFDATE}, '', '')

   let $title_emplid = $EmplID
   let $title_emplname = $EMPL-NAME
   let $title_company = &ECHK.COMPANY
   let $title_paygroup = &ECHK.PAYGROUP
   let $title_pay_end_date = $echk_pay_end_date
   let $title_off_cycle =  &ECHK.OFF_CYCLE

   let #title_page_num = &ECHK.PAGE_NUM
   do Format-Number(#title_page_num, $title_page_num, '9999')

   let #title_line_num = &ECHK.LINE_NUM
   do Format-Number(#title_line_num, $title_line_num, '9999')

   let #title_sepchk = &ECHK.SEPCHK
   do Format-Number(#title_sepchk, $title_sepchk, '99')

end-procedure

!***********************************************************************
! INIT-REPORT This procedure creates the Arrays and dynamic SQL used by*
! this report                                                          *
!***********************************************************************

begin-procedure Init-Report
  display ' '

  do Stdapi-Init

  use-PROCEDURE
     for-reports=(all)
     BEFORE-PAGE=SET-UP-CHECK-HEAD


  if $prcs_process_instance <> ''
     do Select-Parameters
  end-if

  create-array name=NewEarns size=100 field=ern-code:char        -
                                      field=fiscal-year:number     -
                                      field=fiscal-period:number    -
                                      field=deptid:char     -
                                      field=pos-pool:char -
                                      field=position:char -
                                      field=jobcode:char -
                                      field=acct-cd:char -
                                      field=account:char -
                                      field=earnings:number -
                                      field=empl-rcd:number -
                                      field=pay-dt:date

  create-array name=NewDeds size=100 field=plan-type:char        -
                                      field=benefit-plan:char     -
                                      field=ded-code:char          -
                                      field=ded-class:char        -
                                      field=fiscal-year:number     -
                                      field=fiscal-period:number    -
                                      field=deptid:char     -
                                      field=pos-pool:char -
                                      field=position:char -
                                      field=jobcode:char -
                                      field=acct-cd:char -
                                      field=account:char -
                                      field=ded-cur:number -
                                      field=empl-rcd:number -
                                      field=pay-dt:date

  create-array name=NewTaxs size=100 field=state:char        -
                                      field=locality:char     -
                                      field=tax-class:char        -
                                      field=fiscal-year:number     -
                                      field=fiscal-period:number    -
                                      field=deptid:char     -
                                      field=pos-pool:char -
                                      field=position:char -
                                      field=jobcode:char -
                                      field=acct-cd:char -
                                      field=account:char -
                                      field=tax-cur:number -
                                      field=empl-rcd:number -
                                      field=pay-dt:date

  create-array name=NewCtxs size=100 field=province:char        -
                                      field=tax-class:char        -
                                      field=fiscal-year:number     -
                                      field=fiscal-period:number    -
                                      field=deptid:char     -
                                      field=pos-pool:char -
                                      field=position:char -
                                      field=jobcode:char -
                                      field=acct-cd:char -
                                      field=account:char -
                                      field=tax-cur:number -
                                      field=empl-rcd:number -
                                      field=pay-dt:date



  ! Build where clause for finding tranasactions
  do Build-Query

  display 'SQL clause for RDIST TRANS Record'
  display $Check-Query

  display $Error-Query

end-procedure

!***********************************************************************
! GET-VALUES This procedure gets the specified report request          *
! parameters                                                           *
!***********************************************************************

begin-procedure Get-Values

  do Get-BUD020-Values

  IF $Min_Create_date <> ''
    do Format-DateTime($Min_Create_date, $Min_Create_date, {DEFCMP}, '', '')
  END-IF

  IF $Max_Create_date <> ''
    do Format-DateTime($Max_Create_date, $Max_Create_date, {DEFCMP}, '', '')
  END-IF

  IF $Min_Process_date <> ''
    do Format-DateTime($Min_Process_date, $Min_Process_date, {DEFCMP}, '', '')
  END-IF

  IF $Max_Process_date <> ''
    do Format-DateTime($Max_Process_date, $Max_Process_date, {DEFCMP}, '', '')
  END-IF


  display 'Requested Report Parameters'

  display 'Run Control Id :' noline
  display $Bud020_Run
  display 'Create User Id :' noline
  display $Bud020_User
  display 'Approved User Id :' noline
  display $Approved_By

  display 'Error Status :' noline
  display $Error_status
  display 'Process State :' noline
  display $Process_state
  display 'Min Create Date :' noline
  display $Min_Create_date
  display 'Max Create Date :' noline
  display $Max_Create_date
  display 'Min Process Date :' noline
  display $Min_Process_date
  display 'Max Process Date :' noline
  display $Max_Process_date


end-procedure

!***********************************************************************
! GET-BUD020-VALUES This translates the run control values to          *
! program variables                                                    *
!***********************************************************************
begin-procedure Get-Bud020-Values


  let $OperatorId  = RTRIM(&RUN_CNTL_BUD020.OPRID, ' ')

  LET $Bud020_Run  = RTRIM(&RUN_CNTL_BUD020.HP_RUN_CNTL_ID,' ')
  LET $Bud020_Run  = UPPER($Bud020_Run)
  LET $Bud020_User = RTriM(&RUN_CNTL_BUD020.OPRID_LAST_UPDT,' ')
  LET $Bud020_User = UPPER($Bud020_User)
  LET $Approved_By = Rtrim(&RUN_CNTL_BUD020.HP_APPROVER_ID, ' ')
  LET $Approved_By = UPPER($Approved_By)
  LET $Error_status = Rtrim(&RUN_CNTL_BUD020.HP_ERROR_STATUS, ' ')
  LET $Process_state = RTRIM(&RUN_CNTL_BUD020.HP_PROCESS_STATE, ' ')
  LET $Min_Create_date = RTRIM(&RUN_CNTL_BUD020.CREATION_DT, ' ')
  let $Max_Create_date = RTRIM(&RUN_CNTL_BUD020.HP_END_CREATE_DT, ' ')
  LET $Min_Process_date = RTRIM(&RUN_CNTL_BUD020.BEGIN_DT, ' ')
  LET $Max_Process_date = RTRIM(&RUN_CNTL_BUD020.END_DT, ' ')
  LET $Market = RTRIM(&RUN_CNTL_BUD020.HP_MARKET, ' ')


end-procedure


!***********************************************************************
! BUILD-QUERY Using the values from the run control this procedure     *
! builds the where clause for access to the Earnings, Dedns and Taxes  *
!***********************************************************************
begin-procedure Build-Query

  Let $Check-Query = ' '
  Let $Error-Query = ' '

  if $Bud020_Run <> ''

     #ifdef DB2UNIX
       let $Check-Query = $Check-Query || 'UCASE(A.HP_RUN_CNTL_ID) =  ''' || $Bud020_Run || ''' '

     #else
        let $Check-Query = $Check-Query || 'UPPER(A.HP_RUN_CNTL_ID) =  ''' || $Bud020_Run || ''' '
     #endif

  end-if

  if $Bud020_User <> ''
     if $Check-Query <> ' '
         let $Check-Query = $Check-Query || 'AND '
     end-if

     #ifdef DB2UNIX
          let $Check-Query = $Check-Query || 'UCASE(A.OPRID_LAST_UPDT) = ''' || $Bud020_User || ''' '

     #else
          let $Check-Query = $Check-Query || 'UPPER(A.OPRID_LAST_UPDT) = ''' || $Bud020_User || ''' '
     #endif

  end-if

  if $Approved_By <> ''
     if $Check-Query <> ' '
         let $Check-Query = $Check-Query || 'AND '
     end-if

     #ifdef DB2UNIX
          let $Check-Query = $Check-Query || 'UCASE(A.HP_APPROVER_ID) = ''' || $Approved_By || ''' '
     #else
          let $Check-Query = $Check-Query || 'UPPER(A.HP_APPROVER_ID) = ''' || $Approved_By || ''' '
     #endif

  end-if

  if $Process_state <> ''
     if $Check-Query <> ' '
         let $Check-Query = $Check-Query || 'AND '
     end-if

     let $Check-Query = $Check-Query || 'A.HP_PROCESS_STATE = ''' || $Process_state || ''' '
  end-if

  if $Min_Create_date <> ''
     if $Check-Query <> ' '
         let $Check-Query = $Check-Query || 'AND '
     end-if

     #ifdef ORACLE

     let $Check-Query = $Check-Query || 'A.CREATION_DT Between ' || 'TO_DATE(''' || &RUN_CNTL_BUD020.CREATION_DT ||
     ''',' || '''DD-MON-YYYY_HH:MI:SS_AM''' || ')' || ' AND ' || 'TO_DATE(''' || &RUN_CNTL_BUD020.HP_END_CREATE_DT ||
     ''',' || '''DD-MON-YYYY_HH:MI:SS_AM''' || ')' || ' '

     #else

     let $Check-Query = $Check-Query || 'A.CREATION_DT Between ''' ||  &RUN_CNTL_BUD020.CREATION_DT ||
     ''' AND ''' || &RUN_CNTL_BUD020.HP_END_CREATE_DT || ''' '

     #endif

  end-if

  if $Min_Process_date <> ''
     if $Check-Query <> ' '
         let $Check-Query = $Check-Query || 'AND '
     end-if


     #ifdef ORACLE

     let $Check-Query = $Check-Query || 'A.PROCESS_DT Between ' || 'TO_DATE(''' || &RUN_CNTL_BUD020.BEGIN_DT ||
     ''',' || '''DD-MON-YYYY_HH:MI:SS_AM''' || ')' || ' AND ' || 'TO_DATE(''' || &RUN_CNTL_BUD020.END_DT ||
     ''',' || '''DD-MON-YYYY_HH:MI:SS_AM''' || ')' || ' '


     #else

      let $Check-Query = $Check-Query || 'A.PROCESS_DT Between ''' || &RUN_CNTL_BUD020.BEGIN_DT ||
      ''' AND ''' || &RUN_CNTL_BUD020.END_DT  || ''' '

     #endif

  end-if

  if rtrim($Error_status, ' ') = ''
     LET $Error_status = '0'
  end-if

  let $Error-Query = ' AND HP_ERROR_STATUS = ''' || $Error_status || ''' '


  let $Error-Query = rtrim($Error-Query, ' ')
  let $Check-Query = rtrim($Check-Query, ' ')

end-procedure


!***********************************************************************
! AUDIT-REPORT  This procedure runs the Main Cursor sql that accesses  *
! the transaction record and then calls the process for earnings       *
! deductions and taxes attached to that transaction
!***********************************************************************
begin-procedure Audit-report


begin-SELECT DISTINCT
A.HP_RUN_CNTL_ID
A.OPRID_LAST_UPDT
A.PAY_DT
A.HP_TRANSACTION_SRC
A.HP_APPROVER_ID
A.HP_PROCESS_STATE
A.CREATION_DT
A.APPROVE_DATE
A.PROCESS_DT

  let $A_HP_RUN_CNTL_ID = &A.HP_RUN_CNTL_ID
  let $A_OPRID_LAST_UPDT = &A.OPRID_LAST_UPDT
  let $A_PAY_DT          = &A.PAY_DT
  let $A_HP_TRANSACTION_SRC = &A.HP_TRANSACTION_SRC
  let $A_HP_APPROVER_ID  = &A.HP_APPROVER_ID
  let $A_HP_PROCESS_STATE = &A.HP_PROCESS_STATE
  let $A_CREATION_DT     = &A.CREATION_DT
  let $A_APPROVE_DATE    = &A.APPROVE_DATE
  let $A_PROCESS_DT      = &A.PROCESS_DT

  do Get-Checks

  new-page

FROM  PS_HP_RDIST_TRANS A
  WHERE [$Check-Query] AND
   (EXISTS (SELECT E.HP_RUN_CNTL_ID
          FROM PS_HP_RDIST_ERNDAT E
          WHERE E.HP_RUN_CNTL_ID = A.HP_RUN_CNTL_ID
            AND E.OPRID_LAST_UPDT = A.OPRID_LAST_UPDT
            AND E.CREATION_DT = A.CREATION_DT
            AND E.PAY_DT = A.PAY_DT
            AND E.HP_TRANSACTION_SRC = A.HP_TRANSACTION_SRC
            AND E.HP_ERROR_STATUS = $error_status)
   OR EXISTS (SELECT D.HP_RUN_CNTL_ID
          FROM PS_HP_RDIST_DEDDAT D
          WHERE D.HP_RUN_CNTL_ID = A.HP_RUN_CNTL_ID
            AND D.OPRID_LAST_UPDT = A.OPRID_LAST_UPDT
            AND D.CREATION_DT = A.CREATION_DT
            AND D.PAY_DT = A.PAY_DT
            AND D.HP_TRANSACTION_SRC = A.HP_TRANSACTION_SRC
            AND D.HP_ERROR_STATUS = $error_status)
   OR EXISTS (SELECT TX.HP_RUN_CNTL_ID
          FROM PS_HP_RDIST_TAXDAT TX
          WHERE TX.HP_RUN_CNTL_ID = A.HP_RUN_CNTL_ID
            AND TX.OPRID_LAST_UPDT = A.OPRID_LAST_UPDT
            AND TX.CREATION_DT = A.CREATION_DT
            AND TX.PAY_DT = A.PAY_DT
            AND TX.HP_TRANSACTION_SRC = A.HP_TRANSACTION_SRC
            AND TX.HP_ERROR_STATUS = $error_status)
   OR EXISTS (SELECT CT.HP_RUN_CNTL_ID
          FROM PS_HP_RDIST_CTXDAT CT
          WHERE CT.HP_RUN_CNTL_ID = A.HP_RUN_CNTL_ID
            AND CT.OPRID_LAST_UPDT = A.OPRID_LAST_UPDT
            AND CT.CREATION_DT = A.CREATION_DT
            AND CT.PAY_DT = A.PAY_DT
            AND CT.HP_TRANSACTION_SRC = A.HP_TRANSACTION_SRC
            AND CT.HP_ERROR_STATUS = $error_status))

ORDER BY A.CREATION_DT
end-SELECT


end-procedure


!***********************************************************************
! GET-CHECKS  This procedure identifies the distinct check transactions*
! that identify any changes made                                       *
!***********************************************************************
begin-procedure Get-Checks


BEGIN-SELECT DISTINCT
ECHK.COMPANY
ECHK.PAYGROUP
ECHK.PAY_END_DT
ECHK.OFF_CYCLE
ECHK.PAGE_NUM
ECHK.LINE_NUM
ECHK.SEPCHK


  do write-check

  do process-earns

  do process-dedns

  do get-tax-counts

  IF &USA_TAXES > 0 AND &CDN_TAXES = 0

     do process-us-taxes

  end-if

  if &usa_taxes = 0 and &cdn_taxes = 0 and $market = 'USA'

     do process-us-taxes

  end-if

  IF &USA_TAXES = 0 AND &CDN_TAXES > 0

     do process-cdn-taxes

  end-if

  if &usa_taxes = 0 and &cdn_taxes = 0 and $market = 'CAN'

     do process-cdn-taxes

  end-if


FROM PS_HP_RDIST_ERNDAT ECHK
WHERE &A.HP_RUN_CNTL_ID = ECHK.HP_RUN_CNTL_ID
   AND &A.OPRID_LAST_UPDT = ECHK.OPRID_LAST_UPDT
   AND &A.CREATION_DT = ECHK.CREATION_DT
   AND &A.PAY_DT = ECHK.PAY_DT
   AND &A.HP_TRANSACTION_SRC = ECHK.HP_TRANSACTION_SRC
   [$ERROR-QUERY]
UNION  SELECT  COMPANY, PAYGROUP, PAY_END_DT, OFF_CYCLE, PAGE_NUM, LINE_NUM, SEPCHK
   FROM PS_HP_RDIST_DEDDAT DCHK
   WHERE &A.HP_RUN_CNTL_ID = DCHK.HP_RUN_CNTL_ID
   AND &A.OPRID_LAST_UPDT = DCHK.OPRID_LAST_UPDT
   AND &A.CREATION_DT = DCHK.CREATION_DT
   AND &A.PAY_DT = DCHK.PAY_DT
   AND &A.HP_TRANSACTION_SRC = DCHK.HP_TRANSACTION_SRC
   [$ERROR-QUERY]
UNION  SELECT COMPANY, PAYGROUP, PAY_END_DT, OFF_CYCLE, PAGE_NUM, LINE_NUM, SEPCHK
   FROM PS_HP_RDIST_TAXDAT TCHK
    WHERE &A.HP_RUN_CNTL_ID = TCHK.HP_RUN_CNTL_ID
   AND &A.OPRID_LAST_UPDT = TCHK.OPRID_LAST_UPDT
   AND &A.CREATION_DT = TCHK.CREATION_DT
   AND &A.PAY_DT = TCHK.PAY_DT
   AND &A.HP_TRANSACTION_SRC = TCHK.HP_TRANSACTION_SRC
   [$ERROR-QUERY]
UNION  SELECT COMPANY, PAYGROUP, PAY_END_DT, OFF_CYCLE, PAGE_NUM, LINE_NUM, SEPCHK
   FROM PS_HP_RDIST_CTXDAT CCHK
   WHERE &A.HP_RUN_CNTL_ID = CCHK.HP_RUN_CNTL_ID
   AND &A.OPRID_LAST_UPDT = CCHK.OPRID_LAST_UPDT
   AND &A.CREATION_DT = CCHK.CREATION_DT
   AND &A.PAY_DT = CCHK.PAY_DT
   AND &A.HP_TRANSACTION_SRC = CCHK.HP_TRANSACTION_SRC
   [$ERROR-QUERY]

END-SELECT


end-procedure


!***********************************************************************
! WRITE-CHECK  This procedure retrieves the employee id and employee   *
! name for each check transaction line                                 *
!***********************************************************************
begin-procedure WRITE-CHECK


begin-SELECT
ERN.EMPLID
ERN.NAME

  LET $emplid = &ERN.EMPLID
  let $Empl-name = &ERN.name

  let $echk_pay_end_date = &ECHK.PAY_END_DT
  do Format-DateTime($echk_pay_end_date , $echk_pay_end_date , {DEFDATE}, '', '')


FROM PS_HP_RDIST_ERN ERN
   WHERE ERN.COMPANY = &ECHK.COMPANY
   AND ERN.PAYGROUP = &ECHK.PAYGROUP
   AND ERN.PAY_END_DT = &ECHK.PAY_END_DT
   AND ERN.OFF_CYCLE = &ECHK.OFF_CYCLE
   AND ERN.PAGE_NUM = &ECHK.PAGE_NUM
   AND ERN.LINE_NUM = &ECHK.LINE_NUM
   AND ERN.SEPCHK = &ECHK.SEPCHK
UNION
   SELECT DED.EMPLID, DED.NAME
   FROM PS_HP_RDIST_DED DED
   WHERE DED.COMPANY = &ECHK.COMPANY
   AND DED.PAYGROUP = &ECHK.PAYGROUP
   AND DED.PAY_END_DT = &ECHK.PAY_END_DT
   AND DED.OFF_CYCLE = &ECHK.OFF_CYCLE
   AND DED.PAGE_NUM = &ECHK.PAGE_NUM
   AND DED.LINE_NUM = &ECHK.LINE_NUM
   AND DED.SEPCHK = &ECHK.SEPCHK
UNION
   SELECT TAX.EMPLID, TAX.NAME
   FROM PS_HP_RDIST_TAX TAX
   WHERE TAX.COMPANY = &ECHK.COMPANY
   AND TAX.PAYGROUP = &ECHK.PAYGROUP
   AND TAX.PAY_END_DT = &ECHK.PAY_END_DT
   AND TAX.OFF_CYCLE = &ECHK.OFF_CYCLE
   AND TAX.PAGE_NUM = &ECHK.PAGE_NUM
   AND TAX.LINE_NUM = &ECHK.LINE_NUM
   AND TAX.SEPCHK = &ECHK.SEPCHK
UNION
   SELECT CTX.EMPLID, CTX.NAME
   FROM PS_HP_RDIST_CTX CTX
   WHERE CTX.COMPANY = &ECHK.COMPANY
   AND CTX.PAYGROUP = &ECHK.PAYGROUP
   AND CTX.PAY_END_DT = &ECHK.PAY_END_DT
   AND CTX.OFF_CYCLE = &ECHK.OFF_CYCLE
   AND CTX.PAGE_NUM = &ECHK.PAGE_NUM
   AND CTX.LINE_NUM = &ECHK.LINE_NUM
   AND CTX.SEPCHK = &ECHK.SEPCHK

END-SELECT

  IF #CURRENT-LINE > 15

     print $EmplID                        (+2,2)
     print $EMPL-NAME                     (+0,15)
     print &ECHK.COMPANY                  (+0,54)
     PRINT &ECHK.PAYGROUP                 (0,65)
     print $echk_pay_end_date             (0,72)
     print &ECHK.OFF_CYCLE                (0,91)
     print &ECHK.PAGE_NUM                 (0,102)
     print &ECHK.LINE_NUM                 (0,117)
     PRINT &ECHK.SEPCHK                   (0,132)

  END-IF

end-procedure


!***********************************************************************
! PROCESS-EARNS Process Earnings data for check print old and new      *
! data lines for the given check                                       *
!***********************************************************************
begin-procedure process-earns


  PRINT 'EARNINGS '                   (+2, 1) bold
  PRINT '(----OLD DATA---)'           (+1, 5)

move 0 to #ernidx


begin-select
ERNDT.ERNCD
ERNDT.FISCAL_YEAR
ERNDT.ACCOUNTING_PERIOD
ERNDT.DEPTID
ERNDT.POSITION_POOL_ID
ERNDT.POSITION_NBR
ERNDT.JOBCODE
ERNDT.ACCT_CD
ERNDT.ACCOUNT
ERNDT.EARNINGS
ERNDT.EMPL_RCD
ERNDT.HP_NEW_FISCAL_YEAR
ERNDT.HP_NEW_ACCT_PERIOD
ERNDT.NEW_DEPTID
ERNDT.HP_NEW_POOL_ID
ERNDT.NEW_POS_NBR
ERNDT.HP_NEW_JOBCODE
ERNDT.HP_NEW_ACCT_CD
ERNDT.HP_NEW_ACCOUNT
ERNDT.NEW_EARNS_AMT
ERNDT.HP_RETDIST_PAY_DT

   PUT &ERNDT.ERNCD    INTO NEWEARNS(#ERNIDX) ERN-CODE
   PUT &ERNDT.HP_NEW_FISCAL_YEAR  INTO NEWEARNS(#ERNIDX) fiscal-year
   PUT &ERNDT.HP_NEW_ACCT_PERIOD INTO NEWEARNS(#ERNIDX) fiscal-period

   PUT &ERNDT.NEW_DEPTID    INTO NEWEARNS(#ERNIDX) DEPTID
   PUT &ERNDT.HP_NEW_POOL_ID INTO NEWEARNS(#ERNIDX) pos-pool
   PUT &ERNDT.NEW_POS_NBR   INTO NEWEARNS(#ERNIDX) POSITION

   PUT &ERNDT.HP_NEW_JOBCODE INTO NEWEARNS(#ERNIDX) JOBCODE
   PUT &ERNDT.HP_NEW_ACCT_CD  INTO NEWEARNS(#ERNIDX) acct-cd
   PUT &ERNDT.HP_NEW_ACCOUNT  INTO NEWEARNS(#ERNIDX) ACCOUNT
   PUT &ERNDT.NEW_EARNS_AMT   INTO NEWEARNS(#ERNIDX) EARNINGS

   PUT &ERNDT.EMPL_RCD    INTO NEWEARNS(#ERNIDX) empl-rcd
   PUT &ERNDT.HP_RETDIST_PAY_DT INTO NEWEARNS(#ERNIDX) Pay-dt


   let #ernidx = #ernidx + 1


   if &erndt.earnings <> 0
      PRINT 'ERN CODE ='                          (+1, 1)
      PRINT &ERNDT.ERNCD                          (0, 12)
      PRINT &ERNDT.EMPL_RCD                       (0, 17) edit '99'
      PRINT &ERNDT.FISCAL_YEAR                    (0, 29) EDIT '9999'
      PRINT '/'                                   (0, 33)
      PRINT &ERNDT.ACCOUNTING_PERIOD              (0, 34) EDIT '99'
      PRINT &ERNDT.DEPTID                         (0, 47)
      PRINT &ERNDT.POSITION_POOL_ID               (0, 57)
      PRINT &ERNDT.POSITION_NBR                   (0, 80)
      PRINT &ERNDT.JOBCODE                        (0, 90)
      PRINT &ERNDT.ACCT_CD                        (0, 102)
      PRINT &ERNDT.ACCOUNT                        (0, 125)
      PRINT &ERNDT.EARNINGS                       (0, 141) edit '99999.99'
   end-if


FROM PS_HP_RDIST_ERNDAT ERNDT
WHERE ERNDT.COMPANY = &ECHK.COMPANY
AND ERNDT.PAYGROUP = &ECHK.PAYGROUP
AND ERNDT.PAY_END_DT = &ECHK.PAY_END_DT
AND ERNDT.OFF_CYCLE = &echk.OFF_CYCLE
AND ERNDT.PAGE_NUM = &ECHK.PAGE_NUM
AND ERNDT.LINE_NUM = &ECHK.LINE_NUM
AND ERNDT.SEPCHK = &ECHK.SEPCHK
[$error-query]

end-select


  LET #max = #ernidx


  PRINT '(----NEW DATA---)'           (+1, 5)
  move 0 to #ernidx
  while #ernidx < #max

     get $Ern-code   from NewEarns(#ernidx) ern-code
     get #Fiscal-year from NewEarns(#ernidx) fiscal-year
     get #accounting-period from NewEarns(#ernidx) fiscal-period
     get $dept-id   from NewEarns(#ernidx) deptid
     get $position_pool from NewEarns(#ernidx) pos-pool
     get $position from NewEarns(#ernidx) position
     get $jobcode  from NewEarns(#ernidx) jobcode
     get $acct-cd  from NewEarns(#ernidx) acct-cd
     get $account  from NewEarns(#ernidx) account
     get #earnings from NewEarns(#ernidx) earnings
     get #empl_rcd from NewEarns(#ernidx) empl-rcd
     get $pay-dt   from NewEarns(#ernidx) pay-dt

     if #earnings <> 0
        PRINT 'ERN CODE ='                          (+1, 1)
        PRINT $Ern-code                             (0, 12)
        PRINT #empl-rcd                             (0, 17) edit '99'
        PRINT #FISCAL-YEAR                          (0, 29) EDIT '9999'
        PRINT '/'                                   (0, 33)
        PRINT #accounting-period                    (0, 34) EDIT '99'

        PRINT $DEPT-ID                               (0, 47)
        PRINT $POSITION_POOL                         (0, 57)
        PRINT $POSITION                              (0, 80)
        PRINT $JOBCODE                               (0, 90)
        PRINT $ACCT-CD                               (0, 102)
        PRINT $ACCOUNT                               (0, 125)
        PRINT #EARNINGS                              (0, 141) edit '99999.99'

        do Format-DateTime($pay-dt , $pay_dt, {DEFDATE}, '', '')
        print $pay_dt                                (0, 159)

      end-if

     let #ernidx = #ernidx + 1

  end-while

end-procedure

!***********************************************************************
! PROCESS-DEDNS Process Deductions data for check print old and new    *
! data lines for the given check                                       *
!***********************************************************************
begin-procedure process-dedns


  PRINT 'DEDUCTIONS'                  (+2, 1) bold
  PRINT '(----OLD DATA---)'           (+1, 5)

move 0 to #dedidx


begin-select
DEDDT.PLAN_TYPE
DEDDT.BENEFIT_PLAN
DEDDT.DEDCD
DEDDT.DED_CLASS
DEDDT.FISCAL_YEAR
DEDDT.ACCOUNTING_PERIOD
DEDDT.DEPTID
DEDDT.POSITION_POOL_ID
DEDDT.POSITION_NBR
DEDDT.JOBCODE
DEDDT.ACCT_CD
DEDDT.ACCOUNT
DEDDT.DED_CUR
DEDDT.EMPL_RCD
DEDDT.HP_NEW_FISCAL_YEAR
DEDDT.HP_NEW_ACCT_PERIOD
DEDDT.NEW_DEPTID
DEDDT.HP_NEW_POOL_ID
DEDDT.NEW_POS_NBR
DEDDT.HP_NEW_JOBCODE
DEDDT.HP_NEW_ACCT_CD
DEDDT.HP_NEW_ACCOUNT
DEDDT.HP_NEW_DED_CUR
DEDDT.HP_RETDIST_PAY_DT

   PUT &DEDDT.PLAN_TYPE INTO NEWDEDS(#DEDIDX) PLAN-TYPE
   PUT &DEDDT.BENEFIT_PLAN INTO NEWDEDS(#DEDIDX) BENEFIT-PLAN
   PUT &DEDDT.DEDCD INTO NEWDEDS(#DEDIDX) DED-CODE
   PUT &DEDDT.DED_CLASS INTO NEWDEDS(#DEDIDX) DED-CLASS
   PUT &DEDDT.HP_NEW_FISCAL_YEAR  INTO NEWDEDS(#DEDIDX) fiscal-year
   PUT &DEDDT.HP_NEW_ACCT_PERIOD INTO NEWDEDS(#DEDIDX) fiscal-period

   PUT &DEDDT.NEW_DEPTID    INTO NEWDEDS(#DEDIDX) DEPTID
   PUT &DEDDT.HP_NEW_POOL_ID INTO NEWDEDS(#DEDIDX) pos-pool
   PUT &DEDDT.NEW_POS_NBR   INTO NEWDEDS(#DEDIDX) POSITION

   PUT &DEDDT.HP_NEW_JOBCODE INTO NEWDEDS(#DEDIDX) JOBCODE
   PUT &DEDDT.HP_NEW_ACCT_CD  INTO NEWDEDS(#DEDIDX) acct-cd
   PUT &DEDDT.HP_NEW_ACCOUNT  INTO NEWDEDS(#DEDIDX) account
   PUT &DEDDT.HP_NEW_DED_CUR INTO NEWDEDS(#DEDIDX) DED-CUR

   PUT &DEDDT.EMPL_RCD    INTO NEWDEDS(#DEDIDX) empl-rcd
   PUT &DEDDT.HP_RETDIST_PAY_DT INTO NEWDEDS(#DEDIDX) Pay-dt


   let #dedidx = #dedidx + 1

   if &deddt.ded_cur <> 0

      PRINT 'PLAN TYPE = '                        (+1, 1)
      PRINT &DEDDT.PLAN_TYPE                      (0, 14)
      PRINT 'BENEFIT PLAN = '                     (0, 20)
      PRINT &DEDDT.BENEFIT_PLAN                   (0, 35)
      PRINT 'DEDN CODE = '                        (0, 50)
      PRINT &DEDDT.DEDCD                          (0, 63)
      PRINT 'DED CLASS = '                        (0, 70)
      PRINT &DEDDT.DED_CLASS                      (0, 83)

      PRINT &DEDDT.EMPL_RCD                       (+1, 17) edit '99'
      PRINT &DEDDT.FISCAL_YEAR                    (0, 29) EDIT '9999'
      PRINT '/'                                   (0, 33)
      PRINT &DEDDT.ACCOUNTING_PERIOD              (0, 34) EDIT '99'
      PRINT &DEDDT.DEPTID                         (0, 47)
      PRINT &DEDDT.POSITION_POOL_ID               (0, 57)
      PRINT &DEDDT.POSITION_NBR                   (0, 80)
      PRINT &DEDDT.JOBCODE                        (0, 90)
      PRINT &DEDDT.ACCT_CD                        (0, 102)
      PRINT &DEDDT.ACCOUNT                        (0, 125)
      PRINT &DEDDT.DED_CUR                        (0, 141) edit '99999.99'

   end-if


FROM PS_HP_RDIST_DEDDAT DEDDT
WHERE DEDDT.COMPANY = &ECHK.COMPANY
AND DEDDT.PAYGROUP = &ECHK.PAYGROUP
AND DEDDT.PAY_END_DT = &ECHK.PAY_END_DT
AND DEDDT.OFF_CYCLE = &echk.OFF_CYCLE
AND DEDDT.PAGE_NUM = &ECHK.PAGE_NUM
AND DEDDT.LINE_NUM = &ECHK.LINE_NUM
AND DEDDT.SEPCHK = &ECHK.SEPCHK
[$error-query]

end-select


  LET #max = #dedidx


  PRINT '(----NEW DATA---)'           (+1, 5)
  move 0 to #dedidx
  while #dedidx < #max

     get $Plan-type  from Newdeds(#dedidx) plan-type
     get $Benefit-plan from Newdeds(#dedidx) benefit-plan
     get $ded-code  from Newdeds(#dedidx) ded-code
     get $ded-class from Newdeds(#dedidx) ded-class
     get #Fiscal-year from Newdeds(#dedidx) fiscal-year
     get #accounting-period from Newdeds(#dedidx) fiscal-period
     get $dept-id   from Newdeds(#dedidx) deptid
     get $position_pool from Newdeds(#dedidx) pos-pool
     get $position from Newdeds(#dedidx) position
     get $jobcode  from Newdeds(#dedidx) jobcode
     get $acct-cd  from Newdeds(#dedidx) acct-cd
     get $account  from Newdeds(#dedidx) account
     get #ded-cur  from Newdeds(#dedidx) ded-cur
     get #empl_rcd from Newdeds(#dedidx) empl-rcd
     get $pay-dt   from Newdeds(#dedidx) pay-dt

     if #ded-cur <> 0

        PRINT 'PLAN TYPE = '                        (+1, 1)
        PRINT $Plan-type                            (0, 14)
        PRINT 'BENEFIT PLAN = '                     (0, 20)
        PRINT $benefit-plan                         (0, 35)
        PRINT 'DEDN CODE = '                        (0, 50)
        PRINT $ded-code                             (0, 63)
        PRINT 'DED CLASS = '                        (0, 70)
        PRINT $ded-class                            (0, 83)


        PRINT #empl-rcd                             (+1, 17) edit '99'
        PRINT #FISCAl-YEAR                          (0 ,29) EDIT '9999'
        PRINT '/'                                   (0, 33)
        PRINT #accounting-period                    (0, 34) EDIT '99'
        PRINT $DEPT-ID                              (0, 47)
        PRINT $POSITION_POOL                        (0, 57)
        PRINT $POSITION                             (0, 80)
        PRINT $JOBCODE                              (0, 90)
        PRINT $ACCT-CD                              (0, 102)
        PRINT $ACCOUNT                              (0, 125)
        PRINT #ded-cur                              (0, 141) edit '99999.99'

        do Format-DateTime($pay-dt , $pay_dt, {DEFDATE}, '', '')
        print $pay_dt                               (0, 159)

     end-if

     let #dedidx = #dedidx + 1

  end-while

end-procedure

!***********************************************************************
! GET-TAX-COUNTS Using counts determine if the check had US or CDN tax *
! data lines. Both types can not exist so if CDN found there are no    *
! US taxes                                                             *
!***********************************************************************
begin-procedure Get-Tax-Counts


begin-SELECT

count(*) &CDN_TAXES=NUMBER


FROM PS_HP_RDIST_CTXDAT CDN
WHERE CDN.COMPANY = &ECHK.COMPANY
AND CDN.PAYGROUP = &ECHK.PAYGROUP
AND CDN.PAY_END_DT = &ECHK.PAY_END_DT
AND CDN.OFF_CYCLE = &echk.OFF_CYCLE
AND CDN.PAGE_NUM = &ECHK.PAGE_NUM
AND CDN.LINE_NUM = &ECHK.LINE_NUM
AND CDN.SEPCHK = &ECHK.SEPCHK
[$error-query]

END-SELECT


begin-SELECT

count(*) &USA_TAXES=NUMBER

FROM PS_HP_RDIST_TAXDAT USA
WHERE USA.COMPANY = &ECHK.COMPANY
AND USA.PAYGROUP = &ECHK.PAYGROUP
AND USA.PAY_END_DT = &ECHK.PAY_END_DT
AND USA.OFF_CYCLE = &echk.OFF_CYCLE
AND USA.PAGE_NUM = &ECHK.PAGE_NUM
AND USA.LINE_NUM = &ECHK.LINE_NUM
AND USA.SEPCHK = &ECHK.SEPCHK
[$error-query]

END-SELECT

END-PROCEDURE

!***********************************************************************
! PROCESS-US-TAXES Process US tax data for check print old and new     *
! data lines for the given check                                       *
!***********************************************************************
begin-procedure process-us-taxes


  PRINT 'TAXES (USA) '                (+2, 1) bold
  PRINT '(----OLD DATA---)'           (+1, 5)

move 0 to #taxidx

begin-select
TAXDT.STATE
TAXDT.LOCALITY
TAXDT.TAX_CLASS
TAXDT.FISCAL_YEAR
TAXDT.ACCOUNTING_PERIOD
TAXDT.DEPTID
TAXDT.POSITION_POOL_ID
TAXDT.POSITION_NBR
TAXDT.JOBCODE
TAXDT.ACCT_CD
TAXDT.ACCOUNT
TAXDT.TAX_CUR
TAXDT.EMPL_RCD
TAXDT.HP_NEW_FISCAL_YEAR
TAXDT.HP_NEW_ACCT_PERIOD
TAXDT.NEW_DEPTID
TAXDT.HP_NEW_POOL_ID
TAXDT.NEW_POS_NBR
TAXDT.HP_NEW_JOBCODE
TAXDT.HP_NEW_ACCT_CD
TAXDT.HP_NEW_ACCOUNT
TAXDT.HP_NEW_TAX_CUR
TAXDT.HP_RETDIST_PAY_DT

   PUT &TAXDT.STATE  INTO NEWTAXS(#TAXIDX) STATE
   PUT &TAXDT.LOCALITY  INTO NEWTAXS(#TAXIDX) LOCALITY

   PUT &TAXDT.TAX_CLASS INTO NEWTAXS(#TAXIDX) TAX-CLASS
   PUT &TAXDT.HP_NEW_FISCAL_YEAR  INTO NEWTAXS(#TAXIDX) fiscal-year
   PUT &TAXDT.HP_NEW_ACCT_PERIOD INTO NEWTAXS(#TAXIDX) fiscal-period

   PUT &TAXDT.NEW_DEPTID    INTO NEWTAXS(#TAXIDX) DEPTID
   PUT &TAXDT.HP_NEW_POOL_ID INTO NEWTAXS(#TAXIDX) pos-pool
   PUT &TAXDT.NEW_POS_NBR   INTO NEWTAXS(#TAXIDX) POSITION

   PUT &TAXDT.HP_NEW_JOBCODE INTO NEWTAXS(#TAXIDX) JOBCODE
   PUT &TAXDT.HP_NEW_ACCT_CD  INTO NEWTAXS(#TAXIDX) acct-cd
   PUT &TAXDT.HP_NEW_ACCOUNT  INTO NEWTAXS(#TAXIDX) account
   PUT &TAXDT.HP_NEW_TAX_CUR INTO NEWTAXS(#TAXIDX) TAX-CUR

   PUT &TAXDT.EMPL_RCD    INTO NEWTAXS(#TAXIDX) empl-rcd
   PUT &TAXDT.HP_RETDIST_PAY_DT INTO NEWTAXS (#TAXIDX) Pay-dt


   let #taxidx = #taxidx + 1

   if &taxdt.tax_cur <> 0

     PRINT 'STATE = '                            (+1, 1)
     PRINT &TAXDT.STATE                          (0, 9)
     PRINT 'LOCALITY = '                         (0, 15)
     PRINT &TAXDT.LOCALITY                       (0, 25)
     PRINT 'TAX CLASS = '                        (0, 33)
     PRINT &TAXDT.TAX_CLASS                      (0, 45)

     PRINT &TAXDT.EMPL_RCD                       (+1, 17) edit '99'
     PRINT &TAXDT.FISCAL_YEAR                    (0, 29)  EDIT '9999'
     PRINT '/'                                   (0, 33)
     PRINT &TAXDT.ACCOUNTING_PERIOD              (0, 34)  EDIT '99'
     PRINT &TAXDT.DEPTID                         (0, 47)
     PRINT &TAXDT.POSITION_POOL_ID               (0, 57)
     PRINT &TAXDT.POSITION_NBR                   (0, 80)
     PRINT &TAXDT.JOBCODE                        (0, 90)
     PRINT &TAXDT.ACCT_CD                        (0, 102)
     PRINT &TAXDT.ACCOUNT                        (0, 125)
     PRINT &TAXDT.TAX_CUR                        (0, 141) edit '99999.99'

   end-if


FROM PS_HP_RDIST_TAXDAT TAXDT
WHERE TAXDT.COMPANY = &ECHK.COMPANY
AND TAXDT.PAYGROUP = &ECHK.PAYGROUP
AND TAXDT.PAY_END_DT = &ECHK.PAY_END_DT
AND TAXDT.OFF_CYCLE = &echk.OFF_CYCLE
AND TAXDT.PAGE_NUM = &ECHK.PAGE_NUM
AND TAXDT.LINE_NUM = &ECHK.LINE_NUM
AND TAXDT.SEPCHK = &ECHK.SEPCHK
[$error-query]

end-select

   LET #max = #taxidx


  PRINT '(----NEW DATA---)'           (+1, 5)
  move 0 to #taxidx
  while #taxidx < #max

     get $State  from Newtaxs(#taxidx) state
     get $locality  from Newtaxs(#taxdidx) locality
     get $tax-class froM Newtaxs(#taxidx) tax-class
     get #Fiscal-year from Newtaxs(#taxidx) fiscal-year
     get #accounting-period from Newtaxs(#taxidx) fiscal-period
     get $dept-id   from Newtaxs(#taxidx) deptid
     get $position_pool from Newtaxs(#taxidx) pos-pool
     get $position from Newtaxs(#taxidx) position
     get $jobcode  from Newtaxs(#taxidx) jobcode
     get $acct_cd  from Newtaxs(#taxidx) acct-cd
     get $account  from Newtaxs(#taxidx) account
     get #tax-cur  from Newtaxs(#taxidx) tax-cur
     get #empl_rcd from Newtaxs(#taxidx) empl-rcd
     get $pay-dt   from Newtaxs(#taxidx) pay-dt

     if #tax-cur <> 0

       PrINT 'STATE = '                            (+1, 1)
       PRINT $State                                (0, 9)
       PRINT 'LOCALITY = '                         (0, 15)
       PRINT $Locality                             (0, 25)
       PRINT 'TAX CLASS = '                        (0, 33)
       PRINT $tax-class                            (0, 45)

       PRINT #empl-rcd                             (+1, 17) edit '99'
       PRINT #FISCAl-YEAR                          (0, 29) EDIT '9999'
       PRINT '/'                                   (0, 33)
       PRINT #accounting-period                    (0, 34) EDIT '99'
       PRINT $DEPT-ID                              (0, 47)
       PRINT $POSITION_POOL                        (0, 57)
       PRINT $POSITION                             (0, 80)
       PRINT $JOBCODE                              (0, 90)
       PRINT $ACCT-CD                              (0, 102)
       PRINT $ACCOUNT                              (0, 125)
       PRINT #tax-cur                              (0, 141) edit '99999.99'

       do Format-DateTime($pay-dt , $pay_dt, {DEFDATE}, '', '')
       print $pay_dt                               (0, 159)

     end-if

     let #taxidx = #taxidx + 1

  end-while

end-procedure

!***********************************************************************
! PROCESS-CDN-TAXES  Process CDN tax data for check print old and new  *
! data lines for the given check                                       *
!***********************************************************************
begin-procedure process-cdn-taxes


  PRINT 'TAXES (CDN) '                (+2, 1) bold
  PRINT '(----OLD DATA---)'           (+1, 5)

move 0 to #ctxidx


begin-select
CTXDT.PROVINCE
CTXDT.TAX_CLASS_CAN
CTXDT.FISCAL_YEAR
CTXDT.ACCOUNTING_PERIOD
CTXDT.DEPTID
CTXDT.POSITION_POOL_ID
CTXDT.POSITION_NBR
CTXDT.JOBCODE
CTXDT.ACCT_CD
CTXDT.ACCOUNT
CTXDT.TAX_CUR
CTXDT.EMPL_RCD
CTXDT.HP_NEW_FISCAL_YEAR
CTXDT.HP_NEW_ACCT_PERIOD
CTXDT.NEW_DEPTID
CTXDT.HP_NEW_POOL_ID
CTXDT.NEW_POS_NBR
CTXDT.HP_NEW_JOBCODE
CTXDT.HP_NEW_ACCT_CD
CTXDT.HP_NEW_ACCOUNT
CTXDT.HP_NEW_TAX_CUR
CTXDT.HP_RETDIST_PAY_DT

   PUT &CTXDT.PROVINCE INTO NEWCTXS(#CTXIDX) PROVINCE

   PUT &CTXDT.TAX_CLASS_CAN INTO NEWCTXS(#CTXIDX) TAX-CLASS
   PUT &CTXDT.HP_NEW_FISCAL_YEAR  INTO NEWCTXS(#CTXIDX) fiscal-year
   PUT &CTXDT.HP_NEW_ACCT_PERIOD INTO NEWCTXS(#CTXIDX) fiscal-period

   PUT &CTXDT.NEW_DEPTID    INTO NEWCTXS(#CTXIDX) DEPTID
   PUT &CTXDT.HP_NEW_POOL_ID INTO NEWCTXS(#CTXIDX) pos-pool
   PUT &CTXDT.NEW_POS_NBR   INTO NEWCTXS(#CTXIDX) POSITION

   PUT &CTXDT.HP_NEW_JOBCODE INTO NEWCTXS(#CTXIDX) JOBCODE
   PUT &CTXDT.HP_NEW_ACCT_CD  INTO NEWCTXS(#CTXIDX) acct-cd
   PUT &CTXDT.HP_NEW_ACCOUNT  INTO NEWCTXS(#CTXIDX) ACCOUNT
   PUT &CTXDT.HP_NEW_TAX_CUR INTO NEWCTXS(#CTXIDX) TAX-CUR

   PUT &CTXDT.EMPL_RCD    INTO NEWCTXS(#CTXIDX) empl-rcd
   PUT &CTXDT.HP_RETDIST_PAY_DT INTO NEWCTXS (#CTXIDX) Pay-dt


   let #ctxidx = #ctxidx + 1

   if &ctxdt.tax_cur <> 0

     PRINT 'PROVINCE = '                         (+1, 1)
     PRINT &CTXDT.PROVINCE                       (0, 12)
     PRINT 'TAX CLASS = '                        (0, 16)
     PRINT &CTXDT.TAX_CLASS_CAN                  (0, 27)

     PRINT &CTXDT.EMPL_RCD                       (+1, 17) edit '99'
     PRINT &CTXDT.FISCAL_YEAR                    (0, 29)  EDIT '9999'
     PRINT '/'                                   (0, 33)
     PRINT &CTXDT.ACCOUNTING_PERIOD              (0, 34)  EDIT '99'
     PRINT &CTXDT.DEPTID                        (0, 47)
     PRINT &CTXDT.POSITION_POOL_ID               (0, 57)
     PRINT &CTXDT.POSITION_NBR                   (0, 80)
     PRINT &CTXDT.JOBCODE                        (0, 90)
     PRINT &CTXDT.ACCT_CD                        (0, 102)
     PRINT &CTXDT.ACCOUNT                        (0, 125)
     PRINT &CTXDT.TAX_CUR                        (0, 141) edit '99999.99'

   end-if


FROM PS_HP_RDIST_CTXDAT CTXDT
WHERE CTXDT.COMPANY = &ECHK.COMPANY
AND CTXDT.PAYGROUP = &ECHK.PAYGROUP
AND CTXDT.PAY_END_DT = &ECHK.PAY_END_DT
AND CTXDT.OFF_CYCLE = &echk.OFF_CYCLE
AND CTXDT.PAGE_NUM = &ECHK.PAGE_NUM
AND CTXDT.LINE_NUM = &ECHK.LINE_NUM
AND CTXDT.SEPCHK = &ECHK.SEPCHK
[$error-query]

end-select

   LET #max = #ctxidx


  PRINT '(----NEW DATA---)'           (+1, 5)
  move 0 to #ctxidx
  while #ctxidx < #max

     get $PROVINCE From Newctxs(#ctxidx) Province
     get $tax-class from Newctxs(#ctxidx) tax-class
     get #Fiscal-year from Newctxs(#ctxidx) fiscal-year
     get #accounting-period from Newctxs(#ctxidx) fiscal-period
     get $dept-id   from Newctxs(#ctxidx) deptid
     get $position_pool from Newctxs(#ctxidx) pos-pool
     get $position from Newctxs(#ctxidx) position
     get $jobcode  from Newctxs(#ctxidx) jobcode
     get $acct-cd  from Newctxs(#ctxidx) acct-cd
     get $account  from Newctxs(#ctxidx) account
     get #tax-cur  from Newctxs(#ctxidx) tax-cur
     get #empl_rcd from Newctxs(#ctxidx) empl-rcd
     get $pay-dt   from Newctxs(#ctxidx) pay-dt

     if #tax-cur <> 0

       PRINT 'PROVINCE = '                         (+1, 1)
       PRINT $province                             (0, 12)
       PRINT 'TAX CLASS = '                        (0, 16)
       PRINT $tax-class                            (0, 27)

       PRINT #empl-rcd                             (+1, 17) edit '99'
       PRINT #FISCAl-YEAR                          (0, 29) EDIT '9999'
       PRINT '/'                                   (0, 33)
       PRINT #accounting-period                    (0, 34) EDIT '99'
       PRINT $DEPT-ID                              (0, 47)
       PRINT $POSITION_POOL                        (0, 57)
       PRINT $POSITION                             (0, 80)
       PRINT $JOBCODE                              (0, 90)
       PRINT $ACCT-CD                              (0, 102)
       PRINT $ACCOUNT                              (0, 125)
       PRINT #tax-cur                              (0, 141) edit '99999.99'

       do Format-DateTime($pay-dt , $pay_dt, {DEFDATE}, '', '')
       print $pay_dt                               (0, 159)
     end-if

     let #ctxidx = #ctxidx + 1

  end-while

end-procedure

#Include 'hprnctl2.sqc'  !Get run control parameter values
#Include 'reset1.sqc'     !Reset printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
