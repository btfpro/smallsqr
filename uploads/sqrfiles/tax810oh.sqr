!***********************************************************************
!  TAX810OH:  Qtrly Wage List - Tape - OHIO                            *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2011/05/12:15:50:56                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860805                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'

  do Process-Main

  close 10

  if #Count_F > 0

    display 'Upon successful conclusion of this program, the following '
    display 'file will have been created:'
    display ''
    display '  TAX810OH  containing 275-character records in the ICESA format'
    display '            required for web submission to the Ohio Department '
    display '            of Job and Family Services.'
    display ''
    display 'Follow the instructions from the department'
    display 'for preparing and submitting the file via the web.'
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization
  move 'TAX810OH' to $ReportID

  move 'Ohio Quarterly UI Wage Report - File' to $ReportTitle
  display ''
  display 'Creating Electronic File for Ohio UI Wage Reporting'

end-procedure

begin-procedure Initialization
  #ifdef TAXTEST
    move 'CA'              to $State
  #else
    move 'OH'              to $State
  #endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

  if $FileType = 'D'
    move ' ' to $Blocking_Factor
  else
    move &TX.Blocking_Factor to $Blocking_Factor 09
  end-if

  move '1' to $Year4
  move '' to $DDelimiter
  do Format-DateTime($AsOfToday,$CreationDate,{DEFMDY},'','')

  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File

  if $FileType <> 'D'
    if &TX.Blocking_Factor > 25 or
       &TX.Blocking_Factor < 1
      display '******************************************'
      display 'Blocking Factor must be between 1 and 25. '
      display 'Program Stopped.                          '
      display 'Modify Tax Report Run Control.            '
      display '******************************************'
      stop
    end-if
  end-if
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  do DTU-Diff-Days($QtrBeginDate, $PeriodEndDate, #DaysInQtr)
  let #DaysInQtr = #DaysInQtr + 1

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if
  do Get-Company-Data                 !Transmitter identifying data
  move 'OH' to $State
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    stop
  end-if
  let $TempEIN1= translate (&Employer_ID_SUT,' ','')
  let $TempEIN1= translate ($TempEIN1,'-','')
  move $TempEIN1 to $StateEIN 0999999999
  do Write-A-Record
!  do Write-B-Record

begin-SELECT
B.COMPANY
B.DESCR
B.FEDERAL_EIN
B.ADDRESS1
B.CITY
B.STATE
B.POSTAL

  move &B.Company to $Company
  move &B.Descr   to $CompanyName

  do Read-Employee-Data

FROM  PS_COMPANY_TBL B
WHERE B.EFF_STATUS = 'A'
  AND B.TAX_REPORT_TYPE = '2'
  AND B.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = B.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
!    do Write-F-Record - F record not required. 2011
    divide 100 into #Tot_NlGrs_QTD
    divide 100 into #Tot_TxGrs_QTD
    divide 100 into #Tot_ExGrs_QTD
    divide 100 into #TotTotTxGrs_QTD
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data

begin-SELECT
C.COMPANY    () on-break level=1 print=never before=Before-Company
                                      AFTER=After-Company
C.EMPLID     () on-break level=2 print=never before=Before-EMPL
                                      AFTER=After-EMPL
C.TAX_CLASS    () on-break level=3 print=never before=Before-Tax-Class
C.NLGRS_QTD
C.TXGRS_QTD
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D1.NATIONAL_ID

  if $FileType = 'D' and #RecordCount >= #MaxRecordsPerDiskette
    do Open-File
  end-if
  if &C.Tax_Class = 'H' and &C.TXGrs_QTD < 0
    move 'OH QTD Wages Negative' to $ErMsg
    move &C.TxGrs_QTD to #Neg_TxGrs_QTD
    do Print-Summary-Data('NegAmt')
    move 'Y' to $DoNotProcess1
  end-if

  if &C.Tax_Class = 'H' and (&C.TXGrs_QTD = 0 or &C.TXGrs_QTD > 0)
    move '' to $DoNotProcess1
 end-if

  if &C.Tax_Class = 'U' and &C.NlGrs_QTD < 0
    move 'OH QTD SUI Wages Negative' to $ErMsg
    move &C.NlGrs_QTD to #Neg_NlGrs_QTD
    do Print-Summary-Data('NegAmt')
    move 'Y' to $DoNotProcess2
  end-if

  if &C.Tax_Class = 'U' and (&C.NlGrs_QTD = 0 or &C.NlGrs_QTD > 0)
    move '' to $DoNotProcess2
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE D.EMPLID        = C.EMPLID
  AND C.COMPANY       = &B.Company
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.LOCALITY      = ' '
  AND C.TAX_CLASS     = 'U'
!  AND C.TAX_CLASS IN ('U', 'H')
  #ifdef TAXTEST
     AND C.STATE         = 'CA'
  #else
    AND C.STATE         = 'OH'
  #endif

  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND (C.NLGRS_QTD <> 0 OR C.TXGRS_QTD <> 0)
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Before-EMPL
  move 0 to #HRec
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  move &C.EmplID to $EmplID
  move 0 to #TotTxGrs_QTD
  move 0 to #NlGrs_QTD
  move 0 to #TxGrs_QTD
  move 0 to #ExGrs_QTD

  do Get-Weeks

  if #WeeksWorked > 13
    move 13 to #Weeks
  else
    move #WeeksWorked to #Weeks
  end-if
  do Format-Number(#Weeks, $Weeks, '09')

  move '' to $DoNotProcess1
  move '' to $DoNotProcess2

end-procedure

begin-procedure After-EMPL

  do Write-S-Record

end-procedure

begin-procedure Before-Tax-Class

  if &C.TAX_CLASS = 'H' and #HRec = 0
    move &c.TxGrs_QTD to #TotTxGrs_QTD
    multiply 100 times #TotTxGrs_QTD
    do Format-Number(#TotTxGrs_QTD,  $TotTxGrs_QTD,  '09999999999999')
    add #TotTxGrs_QTD to #CoTotTxGrs_QTD
    move 1 to #HRec
  else
    if #HRec = 0
      move 0 to #TotTxGrs_QTD
      do Format-Number(#TotTxGrs_QTD,  $TotTxGrs_QTD,  '09999999999999')
      add #TotTxGrs_QTD to #CoTotTxGrs_QTD
    end-if
  end-if

  if &C.TAX_CLASS = 'U' and &C.NlGrs_QTD > 0
    move &C.NlGrs_QTD to #NlGrs_QTD
  else
    move 0 to #NlGrs_QTD
  end-if

  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  add #NlGrs_QTD to #Co_NlGrs_QTD

  if &C.TAX_CLASS = 'U' and &C.TxGrs_QTD > 0
    move &C.TxGrs_QTD to #TxGrs_QTD
  else
    move 0 to #TxGrs_QTD
  end-if

  multiply 100 times #TxGrs_QTD
  do Format-Number(#TxGrs_QTD,  $TxGrs_QTD,  '09999999999999')
  add #TxGrs_QTD to #Co_TxGrs_QTD

  let #ExGrs_QTD =  #NlGrs_QTD - #TxGrs_QTD
  do Format-Number(#ExGrs_QTD,  $ExGrs_QTD,  '09999999999999')
  add #ExGrs_QTD to #Co_ExGrs_QTD

end-procedure

begin-procedure Before-Company
  do Get-Company-Data
  !move 'OH' to $State
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    stop
  end-if
  let $TempEIN1= translate (&Employer_ID_SUT,' ','')
  let $TempEIN1= translate ($TempEIN1,'-','')
  move $TempEIN1 to $StateEIN 0999999999
  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.99999
  let $Experience_Rt = SUBSTR($Experience_Rt,2,6)
  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if
do Write-E-Record

#ifdef TAXTEST              !Reset so Getweeks will work
  move 'CA' to $State
#endif

end-procedure

begin-procedure After-Company

  if #Count_S > 0
    do Write-T-Record
  end-if

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
  add #Co_ExGrs_QTD to #Tot_ExGrs_QTD
  add #CoTotTxGrs_QTD to #TotTotTxGrs_QTD
  divide 100 into #Co_NlGrs_QTD
  divide 100 into #Co_TxGrs_QTD
  divide 100 into #Co_ExGrs_QTD
  divide 100 into #CoTotTxGrs_QTD

  do Print-Summary-Data('CoAmt')

  add #Count_S to #Count_F
  move 0 to #Co_TotTxGrs_QTD
  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  move 0 to #Count_S
  new-page

end-procedure

begin-procedure Write-A-Record
  move $CompanyName    to $TransmitterName
  move &CT.Federal_EIN to $FedEIN 099999999
  let $FedEIN = lpad($FedEIN,9,'0')
  move $CompnyAdd1    to $TransmitterAddress
  move $CompnyCity        to $TransmitterCity
  let $TransmitterState = rtrim(&CT.State, ' ')
  move &CT.Postal      to $Zip
  move '000000'        to $MediaAuthNbr 099999
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move '      ' to $CreationDate
  if RTRIM($ThirdPartyID,' ') = '0000000000'
     move $StateEIN to $StateEINA 0999999999
  else
     move '0000000000'  to $StateEINA 0999999999
  end-if

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  write 10 from    'A':1
           $CalendarYr:4
               $FedEIN:9
                   $Sp:4       ! Was defined as 'UTAX'
                   $Sp:5
      $TransmitterName:50
   $TransmitterAddress:40
      $TransmitterCity:25
     $TransmitterState:2
                   $Sp:3
            $StateEINA:10      ! New requirement 2011
                  $Zip:5
             $ZipExtsn:5
   $TransmitterContact:30
     $TransmitterPhone:10
  $TransmitterPhoneExt:4
         $MediaAuthNbr:6       ! Not required 2011
                   $Sp:1
                   $Sp:5
                   $Sp:1
                   $Sp:9
                   $Sp:13
         $CreationDate:8       ! Not Required 2011
                   $Sp:15
         $ThirdPartyID:10      ! New requirement 2011

  add 1 to #RecordCount
end-procedure

begin-procedure Write-B-Record

  write 10 from   'B':1
          $CalendarYr:4
              $FedEIN:9
        $Computer_Mfr:8
          $Tape_Label:2
                  $Sp:1
             $Density:2
        $Recording_Cd:3
              $Tracks:2
     $Blocking_Factor:2
               'UTAX':4
                  $Sp:108
     $TransmitterName:44
  $TransmitterAddress:35
     $TransmitterCity:20
    $TransmitterState:2
                  $Sp:5
                 $Zip:5
            $ZipExtsn:5
                  $Sp:13

  add 1 to #RecordCount
end-procedure


begin-procedure Write-E-Record
  move &B.Federal_EIN  to $FedEIN 099999999
  let $FedEIN = lpad($FedEIN,9,'0')
  move &B.Descr        to $ErName
  move &B.Address1     to $ErAddress
  move &B.City         to $ErCity
  let $ErState = rtrim(&B.State, ' ')
  move &B.Postal       to $Zip

  if $OutOfStateWages = 'N'
     move ' ' to $OutOfStateWages
  end-if

  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  move '1' to $NWNW         !E record will be followed by S record

  write 10 from 'E':1
   &TX.Balance_Year:4
            $FedEIN:9
   $OutOfStateWages:1       ! New requirement 2011
                $Sp:8
            $ErName:50
         $ErAddress:40
            $ErCity:25
           $ErState:2
                $Sp:13      ! $ZipExtsn not required 2011
               $Zip:5
                $Sp:12      !   $Sp:1, $Blocking_Factor:2, $Sp:4, 'UTAX':4 not required 2011
               '39':2
                $Sp:5
          $StateEIN:10      ! StateEIN changed from 15 to 10 - 2011 requirement
       $QtrEndMonth:2
              $NWNW:1
                $Sp:1
                $Sp:5
                $Sp:7
                $Sp:5
                $Sp:47
                $Sp:1
                $Sp:1
                $Sp:18

  move 'Y' to $RecordWritten
  add 1 to #Count_E
  move 0 to #Count_S
  add 1 to #RecordCount
end-procedure

begin-procedure Write-S-Record
  add 1 to #Count_S
  move '000000000000000' to $LocCode

  write 10 from 'S':1
       $NATIONAL_ID:9
          $LastName:20
         $FirstName:12
        $MidInitial:1
                $Sp:20    ! Removed   '39':2, $Sp:2, $Sp:2, $TotTxGrs_QTD:14 not required 2011
         $NlGrs_QTD:14    !
                $Sp:52    ! Removed $ExGrs_QTD:14, $TxGrs_QTD:14, $Sp:15, not required 2011
             $Weeks:2
                $Sp:30    ! Removed $Sp:8, 'UTAX':4, $StateEIN:15, not required 2011
           $LocCode:15
                $Sp:99    ! Removed $Sp:3, $QtrEndMonth:2, $CalendarYr:4
                          !         $Sp:12, $sp:43

  add 1 to #RecordCount
  move '00' to $Weeks
  move 0    to #Weeks
end-procedure

begin-procedure Write-T-Record
  move #Count_S to $Count_S 0999999
  add #Count_S to #TotCount_S
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999
  move #Co_TxGrs_QTD to $Co_TxGrs_QTD 09999999999999
  move #Co_ExGrs_QTD to $Co_ExGrs_QTD 09999999999999
  move #CoTotTxGrs_QTD to $CoTotTxGrs_QTD 09999999999999
  add #Month1Count to #TotMonth1Count
  add #Month2Count to #TotMonth2Count
  add #Month3Count to #TotMonth3Count
  move 0 to $Experience_Rt 0999999    !Fields zeroed, because no longer
  move 0 to $TaxesDue 09999999999999  ! required 2011.
  move 0 to $Interest 09999999999999
  move 0 to $Penalty  09999999999999
  move 0 to $TotalPayment  09999999999999

  write 10 from 'T':1
           $Count_S:7
                $Sp:18   ! Removed 'UTAX':4, $CoTotTxGrs_QTD:14 not required 2011
      $Co_NlGrs_QTD:14
                $Sp:14   ! Removed $Co_ExGrs_QTD:14, not required 2011
      $Co_TxGrs_QTD:14
    '0000000000000':13
     $Experience_Rt:6
          $TaxesDue:13
      '00000000000':11
          $Interest:11
           $Penalty:11
      '00000000000':11
             '0000':4
      '00000000000':11
             '0000':4
      '00000000000':11
      $TotalPayment:11
    '0000000000000':13
   '00000000000000':14
   '00000000000000':14
       $Month1Count:7
       $Month2Count:7
       $Month3Count:7
                $Sp:3
                $Sp:7
                $Sp:10
                $Sp:8

  add 1 to #RecordCount
  move 0  to #T_Gross
  move 0  to #Oth-State-Erns

end-procedure

begin-procedure Write-F-Record
  move #TotCount_S to $TotCount_S  0999999999
  move #Count_E    to $Count_E     0999999999
  move #Tot_NlGrs_QTD to $Tot_NlGrs_QTD 099999999999999
  move #Tot_TxGrs_QTD to $Tot_TxGrs_QTD 099999999999999
  move #Tot_ExGrs_QTD to $Tot_ExGrs_QTD 099999999999999
  move #TotTotTxGrs_QTD to $TotTotTxGrs_QTD 099999999999999
  move #TotMonth1Count to $TotMonth1Count   09999999
  move #TotMonth2Count to $TotMonth2Count   09999999
  move #TotMonth3Count to $TotMonth3Count   09999999

  write 10 from 'F':1
        $TotCount_S:10
           $Count_E:10
             'UTAX':4
   $TotTotTxGrs_QTD:15
     $Tot_NlGrs_QTD:15
     $Tot_ExGrs_QTD:15
     $Tot_TxGrs_QTD:15
  '000000000000000':15
  '000000000000000':15
    $TotMonth1Count:8
    $TotMonth2Count:8
    $TotMonth3Count:8
                $Sp:136
end-procedure

begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $TransmitterContact  maxlen=39 '  Contact name (39 char max)'
  input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Contact_Person   to $TransmitterContact
  move $RC_QTR_UI.Contact_Phone    to $TransmitterPhone
  move $RC_QTR_UI.Contact_Phone_Ext to $TransmitterPhoneExt
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.ThirdPartyID     to $ThirdPartyID  0999999999

  unstring  $TransmitterPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $TransmitterPhone = $str1 || $str3 || $str4
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Computer_Mfr      to $Computer_Mfr
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should include decimal and cents, but no commas, e.g. 1234.00)'
  input $TaxesDue        '   Quarterly Contribution Due'
  input $Interest        '   Interest Due'
  input $Penalty         '   Penalty Due'
  input $TotalPayment    '   Total Payment Due'
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'
  input $DCN             '   Document Control Number'

  move $TaxesDue        to #TaxesDue
  move $PrevQtrUnderpay to #PrevQtrUnderpay
  move $Interest        to #Interest
  move $Penalty         to #Penalty
  move $Credit          to #Credit
  move $TotalPayment    to #TotalPayment
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $Penalty         = EDIT(#Penalty         * 100,'09999999999')
  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure

begin-procedure Company-Run-Control
begin-select
OH.UI_TAXES_DUE
OH.UI_PREV_QTR_UNDRPY
OH.UI_INTEREST_DUE
OH.UI_PENALTY_DUE
OH.UI_PREVIOUS_CREDIT
OH.UI_TOTAL_PAYMENT
OH.UI_MONTH1_COUNT
OH.UI_MONTH2_COUNT
OH.UI_MONTH3_COUNT
OH.STATE_DOC_CNTL_NBR
OH.OUT_OF_STATE_WAGES
FROM PS_RC_TAX810OH OH
WHERE OH.OPRID = $Prcs_OprID
  AND OH.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND OH.COMPANY = &C.Company
end-SELECT

  move &OH.UI_Taxes_Due        to #TaxesDue
!  move &OH.UI_Prev_Qtr_Undrpy  to #PrevQtrUnderpay
  move &OH.UI_Interest_Due     to #Interest
  move &OH.UI_Penalty_Due      to #Penalty
!  move &OH.UI_Previous_Credit  to #Credit
  move &OH.UI_Total_Payment    to #TotalPayment
  move &OH.UI_Month1_Count     to #Month1Count
  move &OH.UI_Month2_Count     to #Month2Count
  move &OH.UI_Month3_Count     to #Month3Count
  move &OH.State_Doc_Cntl_Nbr     to #DCN
!  uppercase $DCN
  move &OH.OUT_OF_STATE_WAGES  to $OutOfStateWages

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
!  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $Penalty         = EDIT(#Penalty         * 100,'09999999999')
!  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure


begin-procedure Open-File
if $FileType='D'
  move 0 to #RecordCount
  if #FileExtension <> 0
    close 10
  end-if
  add 1 to #FileExtension
  move #FileExtension to $FileExtension 099
  #ifdef OS400
     let $FileExtension = '(D' || $FileExtension || ')'
     let $FileID = '{IMPORTPREFIX}' || 'TAX810OH' || $FileExtension
  #else
     let $FileID = '{IMPORTPREFIX}' || 'TAX810OH.' || $FileExtension
  #endif
  open $FileID as 10 for-writing record=275:fixed
else
  open '{IMPORTPREFIX}TAX810OH{IMPORTSUFFIX}' as 10 for-writing record=275:fixed
end-if
end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'getweksa.sqc'  !Get-Weeks procedure
#Include 'datemath.sqc'  !Date math procedures

