!***********************************************************************
!  HEP001:  Employees without current Reviews                          *
!           ePerformance Managment - Monitoring EE Reviews             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:17:43                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment

begin-Setup
#Include 'ptset02.sqc'   !Printer and page-size initialization (Landscape)
end-Setup

#define col_sep                1   !Column Separator
#define col_sep_six            6   !Column Separator

#define col_emp_name          50   !Employee Name
#define col_emp_id            12   !Employee ID
#define col_emp_rcd            8   !Employee Record Number
#define col_company           10   !Company
#define col_bus_unit          10   !Business Unit
#define col_dep_id            10   !Department ID
#define col_dep_descr         30   !Department Description
#define col_job_code          10   !Job Code
#define col_position          10   !Position
#define col_salary_plan        8   !Salary Plan
#define col_grade              6   !Grade

#define CT02  20
#define CT03  45
#define CT04  60
#define CT05  75
#define CT06  80

!***********************************************************************

begin-program
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-program

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 8
#include 'stdhdg01.sqc'         !Print Standard Heading #1 for printed reports.


print $EP_GROUPID_LBL  (0,1,28)
print $GB_GROUP_ID     (0,{CT02},10)
print $EP_ASOFDATE_LBL (0,{CT03},30)
        do Format-DateTime($GB_EFFDT, $out, {DEFDATE}, '', '')
print $out             (0,{CT04})

print $EP_REVIEW_TYPE  (+1,1,29)
print $EP_REVIEW_TYPE1 (0,{CT02})


print $EP_REVIEWS_LBL  (+1,1,29)
print $EP_REVIEW_DSC   (0,{CT02},29)
print $FROM_DT         (0,{CT03},29)
        do Format-DateTime($FROM_DATE, $out, {DEFDATE}, '', '')
print $out             (0,{CT04},28)
print $TO_DT           (0,{CT05},29)
        do Format-DateTime($TO_DATE, $out, {DEFDATE}, '', '')
print $out             (0,{CT06})

print $NAME_LBL        (+2,1,{col_emp_name})
print $EMPLID_LBL      (0,+{col_sep},{col_emp_id})
print $EMPL_RCD_LBL    (0,+{col_sep},{col_emp_rcd})
print $COMPANY_LBL     (0,+{col_sep},{col_company})
print $BUS_UNIT_LBL    (0,+{col_sep},{col_bus_unit})
print $DEPARTMENT_LBL  (0,+{col_sep},{col_dep_id})
print $EP_DEPT_DESCR_LBL (0,+{col_sep},{col_dep_descr})
print $JOBCODE_LBL     (0,+{col_sep},{col_job_code})
print $POSITION_LBL    (0,+{col_sep},{col_position})
print $SALARY_LBL      (0,+{col_sep},{col_salary_plan})
print $GRADE_LBL       (0,+{col_sep},{col_grade})

print '='              (+1,1,{col_emp_name})            Fill
print '='              (0,+{col_sep},{col_emp_id})      Fill
print '='              (0,+{col_sep},{col_emp_rcd})     Fill
print '='              (0,+{col_sep},{col_company})     Fill
print '='              (0,+{col_sep},{col_bus_unit})    Fill
print '='              (0,+{col_sep},{col_dep_id})      Fill
print '='              (0,+{col_sep},{col_dep_descr})   Fill
print '='              (0,+{col_sep},{col_job_code})    Fill
print '='              (0,+{col_sep},{col_position})    Fill
print '='              (0,+{col_sep},{col_salary_plan}) Fill
print '='              (0,+{col_sep},{col_grade})       Fill


end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

  move 'HEP001' to $ReportID

  do Stdapi-Init

  do Get-Language-Codes                         ! Get-Language-Codes, which is resolved in prcslng.sqc
  let $language_cd = $CURR_LANGUAGE_CD          ! retrieves run control lang code and psoptions lang code

  !if $curr_language_cd      = 'ENG'             ! $ReportDateType controls date format,
  !     let $ReportDateType   = '0'              ! which is resolved in datetime.sqc
  !else                                          ! USA uses date format of MM/DD/YYYY
  !     let $ReportDateType   = '1'              ! the rest uses date format DD/MM/YYYY
  !end-if

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Init_Report_Translation($ReportID, $language_cd)

  do Append_Report_Translation($ReportID)

  do Get_Field_Information($ReportID, 'REPORT_TITLE_LBL', $ReportTitle, #DW)

  if $prcs_process_instance = ''
        !No Prompt
  else
        do select-parameters

  end-if

  do Init_Printer

end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
   do Get-HEP001-Param
end-procedure

!***********************************************************************
!  Main: Creates the Group Member List Report
!***********************************************************************

begin-procedure Process-Main
        do Get-Translat-Info     ! Global
        do Retrieve-Group-Build
end-procedure


!***********************************************************************
!  Print Employees without Review from Group Build Data
!***********************************************************************


begin-procedure Print-Group-Build-Data

        print $NAME             (+1,1,{col_emp_name})
        print $EMPLID           (0,+{col_sep},{col_emp_id})
        print #EMPL_RCD         (0,+{col_sep},{col_emp_rcd}) EDIT 999
        print $COMPANY          (0,+{col_sep_six},{col_company})
        print $BUSINESS_UNIT    (0,+{col_sep},{col_bus_unit})
        print $DEPTID           (0,+{col_sep},{col_dep_id})
        print $deptname         (0,+{col_sep},{col_dep_descr})
        print $JOB_CODE         (0,+{col_sep},{col_job_code})
        print $POSITION_NBR     (0,+{col_sep},{col_position})
        print $SAL_ADMIN_PLAN   (0,+{col_sep},{col_salary_plan})
        print $GRADE            (0,+{col_sep})

end-procedure


!***********************************************************************
!  Retrieve Employees from Group Build Data
!***********************************************************************

begin-procedure Retrieve-Group-Build


MOVE 'DATE_TO_COMPARE' to $FieldName
MOVE $DATE_TO_COMPARE to $FieldValue
Do Read-Translate-Table
let $EP_REVIEW_DSC = rtrim($Xlatlongname,' ')

begin-SELECT ON-ERROR=SQL-Error
N.NAME
J.EMPLID
J.EMPL_RCD
J.COMPANY
J.BUSINESS_UNIT
J.SETID_DEPT
J.DEPTID
J.JOBCODE
J.POSITION_NBR
J.GRADE
J.SAL_ADMIN_PLAN
DT.DESCR
DT.EFFDT

        let $NAME          = &N.NAME
        let $EMPLID        = &J.EMPLID
        let #EMPL_RCD      = &J.EMPL_RCD
        let $COMPANY       = &J.COMPANY
        let $BUSINESS_UNIT = &J.BUSINESS_UNIT
        let $SETID_DEPT    = &J.SETID_DEPT
        let $DEPTID        = &J.DEPTID
        let $JOB_CODE      = &J.JOBCODE
        let $POSITION_NBR  = &J.POSITION_NBR
        let $GRADE         = &J.GRADE
        let $SAL_ADMIN_PLAN = &J.SAL_ADMIN_PLAN
        let $dep_effdt      = &DT.EFFDT
        let $deptname       = &DT.DESCR


        ADD 1 TO #GB_GRP_TOTAL

        evaluate $DATE_TO_COMPARE
        when =  'B'
              do Period-Begin-Date
              Break
        when = 'E'
              do Period-End-Date
              Break
        when = 'D'
              do Period-Due-Date
              Break
        end-evaluate

        If $EE_has_Review = 'N'
           ADD 1 TO #GB_GRP_TOTAL_No_Review
                if $Curr_Language_cd <> $PSoptions_language_cd
                        do Get-Department-Lang
                end-if
                do Print-Group-Build-Data
        end-if


from    PS_JOB            J,
        PS_PERSON_NAME    N,
        PS_DEPT_TBL       DT,
        PS_GB_GRP_RES_TBL G

WHERE G.GB_GROUP_ID = $GB_GROUP_ID
AND   G.VERSIONGBQDM = #VERSIONGBQDM
AND   G.JOB_EFFDT               = (SELECT MAX(JOB_EFFDT)
                                   FROM PS_GB_GRP_RES_TBL
                                   WHERE EMPLID = G.EMPLID
                                     AND EMPL_RCD = G.EMPL_RCD
                                     AND JOB_EFFDT <= $GB_EFFDT)
AND   G.JOB_EFFSEQ              = (SELECT MAX(JOB_EFFSEQ)
                                   FROM PS_GB_GRP_RES_TBL
                                   WHERE EMPLID = G.EMPLID
                                     AND EMPL_RCD = G.EMPL_RCD
                                     AND JOB_EFFDT = G.JOB_EFFDT)

AND     J.EMPLID                = G.EMPLID
AND     J.EMPL_RCD              = G.EMPL_RCD
AND     J.EFFDT                 = G.JOB_EFFDT
AND     J.EFFSEQ                = G.JOB_EFFSEQ
AND     J.EMPL_STATUS           IN ('A','L','P','S','W')

AND     N.EMPLID                = J.EMPLID

AND     DT.SETID                = J.SETID_DEPT
AND     DT.DEPTID               = J.DEPTID
AND     DT.EFF_STATUS           = 'A'
AND     DT.EFFDT                = (SELECT MAX(D_ED.EFFDT)
                                FROM PS_DEPT_TBL D_ED
                                WHERE D_ED.SETID  = DT.SETID
                                AND D_ED.DEPTID   = DT.DEPTID
                                AND D_ED.EFFDT <= J.EFFDT)

ORDER BY N.NAME ASC,
         J.EMPLID ASC,
         J.EMPL_RCD ASC,
         J.COMPANY ASC,
         J.BUSINESS_UNIT ASC,
         J.DEPTID ASC,
         J.JOBCODE ASC,
         J.POSITION_NBR

end-SELECT

do print-totals

end-procedure


!***********************************************************************
!  Period Begin Date
!***********************************************************************

begin-procedure Period-Begin-Date

Move 'N' to $EE_has_Review

begin-SELECT ON-ERROR=SQL-Error
AP.EP_APPRAISAL_ID
AP.EMPLID

   Let  $EE_has_Review = &AP.EMPLID

FROM PS_EP_APPR AP
where  AP.EMPLID  = $EMPLID
AND  AP.EMPL_RCD  = #EMPL_RCD
AND AP.EP_REVIEW_TYPE = $EP_REVIEW_TYPE1
AND AP.PERIOD_BEGIN_DT >= $FROM_DATE
AND AP.PERIOD_BEGIN_DT <= $TO_DATE
end-SELECT

end-procedure

!***********************************************************************
!  Period End Date
!***********************************************************************

begin-procedure Period-End-Date

Move 'N' to $EE_has_Review

begin-SELECT ON-ERROR=SQL-Error
APE.EP_APPRAISAL_ID
APE.EMPLID

   Let  $EE_has_Review = &APE.EMPLID

FROM PS_EP_APPR APE

where  APE.EMPLID  = $EMPLID
AND  APE.EMPL_RCD  = #EMPL_RCD
AND APE.EP_REVIEW_TYPE = $EP_REVIEW_TYPE1
AND APE.PERIOD_END_DT >= $FROM_DATE
AND APE.PERIOD_END_DT <= $TO_DATE
end-SELECT

end-procedure


!***********************************************************************
! Period Due Date
!***********************************************************************

begin-procedure Period-Due-Date

Move 'N' to $EE_has_Review


begin-SELECT ON-ERROR=SQL-Error
APD.EP_APPRAISAL_ID
APD.EMPLID

   Let  $EE_has_Review = &APD.EMPLID

FROM PS_EP_APPR APD , PS_EP_APPR_ROLE RL

where  APD.EMPLID  = $EMPLID
AND  APD.EMPL_RCD  = #EMPL_RCD
AND APD.EP_REVIEW_TYPE = $EP_REVIEW_TYPE1
AND APD.EP_APPRAISAL_ID = RL.EP_APPRAISAL_ID
AND RL.EP_ROLE = 'M'
AND RL.EP_DUE_DT >= $FROM_DATE
AND RL.EP_DUE_DT <= $TO_DATE
end-SELECT

end-procedure


!***********************************************************************
! Get Department lang
!***********************************************************************

begin-procedure Get-Department-Lang

begin-SELECT

DL.DESCR

        if Not IsBlank(&DL.DESCR)
        move &DL.DESCR to $deptname
        end-if

FROM PS_DEPT_TBL_LANG DL
WHERE  DL.DEPTID              = $deptid
   AND DL.EFFDT               = $dep_effdt
   AND DL.SETID               = $SETID_DEPT
   AND DL.LANGUAGE_CD         = $CURR_LANGUAGE_CD
END-SELECT

END-PROCEDURE



!***********************************************************************
! Print Totals
!***********************************************************************

begin-procedure print-totals

  print $EP_TOTAL_NAPPR_LBL (+2,1,28)
  do Format-Number(#GB_GRP_TOTAL_No_Review, $out, '999,999,999,999')
  print $out (0,20)

  print $EP_TOTAL_GRP_LBL (+1,1,28)
  do Format-Number(#GB_GRP_TOTAL, $out, '999,999,999,999')
  print $out (0,20)

End-Procedure



!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

        do Get_Field_Information ($ReportID,     'EP_GROUPID_LBL ',    $EP_GROUPID_LBL,    #DW)
        do Get_Field_Information ($ReportID,     'EP_ASOFDATE_LBL',    $EP_ASOFDATE_LBL,   #DW)
        do Get_Field_Information ($ReportID,     'EP_REVIEW_TYPE',     $EP_REVIEW_TYPE,    #DW)
        do Get_Field_Information ($ReportID,     'EP_REVIEWS_LBL',     $EP_REVIEWS_LBL,    #DW)
        do Get_Field_Information ($ReportID,     'FROM_DT ',           $FROM_DT,           #DW)
        do Get_Field_Information ($ReportID,     'TO_DT',              $TO_DT,             #DW)
        do Get_Field_Information ($ReportID,     'NAME_LBL',           $NAME_LBL,          #DW)
        do Get_Field_Information ($ReportID,     'EMPLID_LBL',         $EMPLID_LBL,        #DW)
        do Get_Field_Information ($ReportID,     'EMPL_RCD_LBL',       $EMPL_RCD_LBL,      #DW)
        do Get_Field_Information ($ReportID,     'COMPANY_LBL',        $COMPANY_LBL,       #DW)
        do Get_Field_Information ($ReportID,     'BUSINESS_UNIT ',     $BUS_UNIT_LBL,      #DW)
        do Get_Field_Information ($ReportID,     'DEPARTMENT_LBL',     $DEPARTMENT_LBL,    #DW)
        do Get_Field_Information ($ReportID,     'EP_DEPT_DESCR_LBL',  $EP_DEPT_DESCR_LBL, #DW)
        do Get_Field_Information ($ReportID,     'JOBCODE_LBL',        $JOBCODE_LBL,       #DW)
        do Get_Field_Information ($ReportID,     'POSITION_LBL',       $POSITION_LBL,      #DW)
        do Get_Field_Information ($ReportID,     'SALARY_LBL',         $SALARY_LBL,        #DW)
        do Get_Field_Information ($ReportID,     'GRADE_LBL',          $GRADE_LBL,         #DW)
        do Get_Field_Information ($ReportID,     'EP_TOTAL_GRP_LBL',   $EP_TOTAL_GRP_LBL,  #DW)
        do Get_Field_Information ($ReportID,     'EP_TOTAL_NAPPR_LBL', $EP_TOTAL_NAPPR_LBL,#DW)

end-procedure


!***********************************************************************
! Procedure:    Get-HEP001-Parm
!***********************************************************************


begin-procedure Get-HEP001-Param

  let $GB_EFFDT         = &RUN_CNTL_EP.GB_EFFDT
  let $GB_GROUP_ID      = &RUN_CNTL_EP.GB_GROUP_ID
  let #VERSIONGBQDM     = &RUN_CNTL_EP.VERSIONGBQDM
  let $EP_REVIEW_TYPE1  = &RUN_CNTL_EP.EP_REVIEW_TYPE
  let $DATE_TO_COMPARE  = &RUN_CNTL_EP.DATE_TO_COMPARE
  let $FROM_DATE        = &RUN_CNTL_EP.FROM_DATE
  let $TO_DATE          = &RUN_CNTL_EP.TO_DATE

end-procedure

!***********************************************************************
!  Includes
!***********************************************************************

#include 'eprnctl1.sqc'  !Get run control parameter values for ePerformance Managment
#include 'stdapi.sqc'    !Routines to update run status
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'  !Indicate which printer to use for reports
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'datemath.sqc'  !SQR date arithmetic procedures.
#Include 'readxlat.sqc'  !Read the Translate Table for the desired values.
!#include 'hrgetval.sqc' !Get values mask routines
!#include 'gbapi.sqc'    !Routines for Group Build API


