!********************************************************
!  REGUTILS.SQC - Regulatory Utilities                  !
!********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/01/17:20:02:00                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************



!----------------------------------------------------------------------
!---------Strip-Char---------------------------------------------------
!----------------------------------------------------------------------
! Description:
! This procedure is called in 'Check-Variables. It loops through all
! characters in the value string provided and removes all occurrences
! of ANY CHARACTER in $strip. This is used to remove characters like
! dashes, periods etc. Note: This function is also provided in the
! ECBUSDOC.SQC under the name Process-Strip-Char()
!----------------------------------------------------------------------
begin-procedure Strip-Char($invalue,:$outvalue,$strip)

  let #val_len = {PS-length}($invalue)
  let #i = 1
  let $cur_char = ''
  let $outvalue = ''

  while #i <= #val_len

     let $cur_char = {PS-substr}($invalue,#i,1)

     if instr($strip, $cur_char, 1) = 0

        let $outvalue = $outvalue || $cur_char

     end-if

     add 1 to #i
  end-while

end-procedure Strip-Char

!----------------------------------------------------------------------
!---------Get-Number-Of-Establishments---------------------------------
!----------------------------------------------------------------------
! Returns the number of Establishments in the ESTAB_TBL
!
! This will fetch them in correct printing order - an HQ unit followed
! by the establishments it controls
!----------------------------------------------------------------------
begin-procedure Get-Number-Of-Establishments

#IFDEF DEBUGAPP002
  DISPLAY 'FLOW: Get-Number-Of-Establishments'
#ENDIF

! If they want only those controlled by one headquarters, then we need
! to only get back those that are controlled by the supplied value
!----------------------------------------------------------------------
IF $ReportChoice = '3'
!******************Begin Resolution 1451539001*****************  
  LET $Estab-Where = 'AND Z1.CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote
!LET $Estab-Where = 'AND Z.CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote  
!******************End Resolution 1451539001*****************
ELSE
  IF $ReportChoice = '1'
     LET $Estab-Where = 'AND Z.COMPANY = ' || $Quote || $Company || $Quote
  ELSE
     LET $Estab-Where = ''
  END-IF
END-IF

CREATE-ARRAY
    NAME = EstablishmentIDs
    SIZE = 10000
    FIELD = theEstab:char

let #count = 0
BEGIN-SELECT DISTINCT

Z.ESTABID
    PUT &Z.ESTABID into EstablishmentIDs(#count)
    ADD 1 to #count
Z.HQUNIT
Z.COMPANY
!******************Begin Resolution 1451539001*****************
Z1.CTL_ESTABID
!Z.CTL_ESTABID
!******************End Resolution 1451539001*****************
FROM PS_ESTAB_TBL  Z,
     PS_ESTAB_TBL_USA Z1,   !**********Resolution 1451539001*****************
     PS_REG_REGION_TBL RR
WHERE Z.REG_REGION = RR.REG_REGION
AND RR.COUNTRY = 'USA'
AND Z.ESTABID = Z1.ESTABID        !**********Resolution 1451539001*****************
AND Z.EFFDT = Z1.EFFDT            !**********Resolution 1451539001***************** 

[$Estab-Where]
!******************Begin Resolution 1451539001*****************
ORDER BY Z1.CTL_ESTABID, Z.HQUNIT desc, Z.COMPANY, Z.ESTABID
!ORDER BY Z.CTL_ESTABID, Z.HQUNIT desc, Z.COMPANY, Z.ESTABID
!******************End Resolution 1451539001*****************

END-SELECT

end-procedure Get-Number-Of-Establishments

!----------------------------------------------------------------------
!---------Get-Company-Info---------------------------------------------
!----------------------------------------------------------------------
! Retrieves name and address information for the specific company
! as of a particular date and populates the data into the fields used
! by the hrhlxx.sqc and hrhpxx.sqc header files
!
! IMPORTANT:
!
! If calling this function from an SQR that uses From-Thru dates, make
! sure you set $AsOfDate to the appropriate value (usually $ThruDate)
! prior to calling this
!----------------------------------------------------------------------

Begin-Procedure Get-Company-Info

#IFDEF DEBUGZ
  DISPLAY 'FLOW: Get-Company-Info'
#ENDIF

BEGIN-SELECT
UU.DESCR
UU.ADDRESS1
UU.ADDRESS2
UU.ADDRESS3
UU.ADDRESS4
UU.NUM1
UU.NUM2
UU.CITY
UU.STATE
UU.POSTAL
UU.COUNTRY
UU.IN_CITY_LIMIT
UU.GEO_CODE
UU.HOUSE_TYPE

    LET $NAME = &UU.DESCR
    LET $ADDRESS1 = &UU.ADDRESS1
    LET $ADDRESS2 = &UU.ADDRESS2
    LET $ADDRESS3 = &UU.ADDRESS3
    LET $ADDRESS4 = &UU.ADDRESS4
    LET $NUM1 = &UU.NUM1
    LET $NUM2 = &UU.NUM2
    LET $HOUSE_TYE = &UU.HOUSE_TYPE
    LET $CITY = &UU.CITY
    LET $COUNTRY = &UU.COUNTRY
    LET $STATE = &UU.STATE
    LET $POSTAL = &UU.POSTAL
    LET $GEO_CODE = &UU.GEO_CODE
    LET $IN_CITY_LIMIT = &UU.IN_CITY_LIMIT

FROM PS_COMPANY_TBL UU
WHERE UU.COMPANY = $Company
  AND UU.EFFDT = (SELECT MAX(UU1.EFFDT)
                  FROM PS_COMPANY_TBL UU1
                  WHERE UU1.COMPANY = UU.COMPANY
                    AND UU1.EFF_STATUS = 'A'
                    AND UU1.EFFDT <= $AsOfDate)
END-SELECT

End-Procedure Get-Company-Info


!----------------------------------------------------------------------
!---------Get-Establishment-Info---------------------------------------
!----------------------------------------------------------------------
! Retrieves name and address information for a specific Establishment
! as of a particular date and populates the data into the fields used
! by the hrhlxx.sqc and hrhpxx.sqc header files
!
! IMPORTANT:
!
! If calling this function from an SQR that uses From-Thru dates, make
! sure you set $AsOfDate to the appropriate value (usually $ThruDate)
! prior to calling this
!----------------------------------------------------------------------

Begin-Procedure Get-Establishment-Info
DISPLAY 'FLOW: Get-Establishment-Info'


BEGIN-SELECT
QQ.DESCR
QQ.ADDRESS1
QQ.ADDRESS2
QQ.ADDRESS3
QQ.ADDRESS4
QQ.NUM1
QQ.NUM2
QQ.CITY
QQ.STATE
QQ.POSTAL
QQ.COUNTRY
QQ.IN_CITY_LIMIT
QQ.GEO_CODE
QQ.HOUSE_TYPE
QQ.REG_REGION

    LET $NAME = &QQ.DESCR
    LET $ADDRESS1 = &QQ.ADDRESS1
    LET $ADDRESS2 = &QQ.ADDRESS2
    LET $ADDRESS3 = &QQ.ADDRESS3
    LET $ADDRESS4 = &QQ.ADDRESS4
    LET $NUM1 = &QQ.NUM1
    LET $NUM2 = &QQ.NUM2
    LET $HOUSE_TYE = &QQ.HOUSE_TYPE
    LET $CITY = &QQ.CITY
    LET $COUNTRY = &QQ.COUNTRY
    LET $STATE = &QQ.STATE
    LET $POSTAL = &QQ.POSTAL
    LET $GEO_CODE = &QQ.GEO_CODE
    LET $IN_CITY_LIMIT = &QQ.IN_CITY_LIMIT
    LET $REG_REGION = &QQ.REG_REGION

FROM PS_ESTAB_TBL QQ
WHERE QQ.ESTABID = $Estab
  AND QQ.EFFDT = (SELECT MAX(QQ1.EFFDT)
                  FROM PS_ESTAB_TBL QQ1
                  WHERE QQ1.ESTABID = QQ.ESTABID
                    AND QQ1.EFF_STATUS = 'A'
                    AND QQ1.EFFDT <= $AsOfDate)

END-SELECT
End-Procedure Get-Establishment-Info

!----------------------------------------------------------------------
!---------Init-Unclassified-Audit--------------------------------------
!----------------------------------------------------------------------
! This routine must be called if you intend to detect and log
! employees with unclassified race or gender.
!----------------------------------------------------------------------
Begin-Procedure Init-Unclassified-Audit
DISPLAY 'HERE'

LET #MAX_EES = 10000
LET #Audit_Num_Gender = 0
LET #Audit_Num_Race = 0
LET $CR-LF = CHR(13) || CHR(10) ! DOS-safe, Unix-Style EOL
LET $TAB = CHR(9)

CREATE-ARRAY NAME=Unclassified  SIZE=10000 FIELD=gender:char FIELD=race:char


DISPLAY #MAX_EES

End-Procedure Init-Unclassified-Audit


!----------------------------------------------------------------------
!---------Log-Unclassified-Employee------------------------------------
!----------------------------------------------------------------------
! This routine should be called to add employees with unclassified
! race or gender. $emplid should contain their EMPLID value (rtrimmed)
! and $type should be one of two values:
!
!         'RACE'   if the employee's race is unknown or unclassified
!         'SEX'    if the employee's gender is unknown or unclassified
!----------------------------------------------------------------------
Begin-Procedure Log-Unclassified-Employee($emplid, $type)


EVALUATE $type
   WHEN = 'RACE'
      IF #_Audit_Num_Race > (#_MAX_EES - 1)
         DISPLAY 'EXCEEDED AUDIT STORAGE'
      ELSE
         PUT $emplid into Unclassified(#_Audit_Num_Race)  race
         ADD 1 to #_Audit_Num_Race
      END-IF
      BREAK
   WHEN = 'SEX'
       IF #_Audit_Num_Gender > (#_MAX_EES - 1)
         DISPLAY 'EXCEEDED AUDIT STORAGE'
      ELSE
         PUT $emplid into Unclassified(#_Audit_Num_Gender)  gender
         ADD 1 to #_Audit_Num_Gender
      END-IF
      BREAK
   WHEN-OTHER
      DISPLAY 'Unclassified Audit: Attempt to Register Invalid Unclassified Employee Type'
      BREAK
END-EVALUATE

End-Procedure Log-Unclassified-Employee

!----------------------------------------------------------------------
!---------Print-Unclassified-Audit--------------------------------------
!----------------------------------------------------------------------
! This routine will create a text file that lists all the unknown or
! unclassified employees reported through Log-Unclassified-Employee
! and also put a note in the log.
!----------------------------------------------------------------------
Begin-Procedure Print-Unclassified-Audit

LET $FileName = '{IMPORTPREFIX}' || RTrim($ReportID,' ') || '_AUDIT.TXT'
Open $FileName As 1
   For-Writing
   Record=750:Vary
   Status=#FileStatus

IF #FileStatus = -1
   SHOW '    WARNING: Cannot Open File: ' $FileName
   STOP QUIET
END-IF

LET $Output = RTrim($ReportID, ' ') || ' Unclassified Employees' || $CR-LF || $CR-LF || 'EMPLOYEES WITH UNKNOWN RACE'


WRITE 1 from $Output
             Status=#FileStatus

IF #FileStatus != 0
   DISPLAY '    WARNING: Error writing file record'
   STOP QUIET
ELSE
   DISPLAY $Output
END-IF


LET #COUNT = 0
WHILE #COUNT <= #Audit_Num_Race
   GET $Output FROM Unclassified(#COUNT) race
   LET $Output = $TAB ||  $Output
   WRITE 1 from $Output
             Status=#FileStatus

   IF #FileStatus != 0
       DISPLAY '    WARNING: Error writing file record'
       STOP QUIET
   ELSE
      DISPLAY $Output
   END-IF

   ADD 1 to #COUNT
END-WHILE

LET $Output = $CR-LF || $CR-LF || 'EMPLOYEES WITH UNKNOWN GENDER'
WRITE 1 from $Output
             Status=#FileStatus

IF #FileStatus != 0
   DISPLAY '    WARNING: Error writing file record'
   STOP QUIET
ELSE
   DISPLAY $Output
END-IF

LET #COUNT = 0
WHILE #COUNT <= #Audit_Num_Gender
  GET $Output FROM Unclassified(#COUNT) gender
   LET $Output = $TAB || $Output
   WRITE 1 from $Output
             Status=#FileStatus

   IF #FileStatus != 0
       DISPLAY '    WARNING: Error writing file record'
       STOP QUIET
   ELSE
      DISPLAY $Output
   END-IF
   ADD 1 to #COUNT
END-WHILE

End-Procedure Print-Unclassified-Audit
