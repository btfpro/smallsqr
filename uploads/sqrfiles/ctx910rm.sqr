
!***********************************************************************
!  CTX910RM: CANADA Magnetic Media Reporting - RL-1 XML                *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2012/12/24:12:42:14                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885414                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment

#Include 'setup32.sqc'  !printer and page-size init
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure

begin-report
  do Init-Report

  do Process-Main

  close 10

 #ifdef PRCSSCHD
  do StdAPI-Term
 #endif
end-report


begin-heading 3
  #Include 'stdhdg01.sqc'
  print $CalYear           (3,,)      center
end-heading


begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

 #ifdef PRCSSCHD
  do StdAPI-Init
 #endif


  move 'CTX910RM' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.
  do Initialization


  display ''
  display 'Creating File for RL-1 Reporting'

end-procedure


begin-procedure Initialization

  do Get-Current-DateTime
  move ' ' to $TaxYear
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move ' '  to $PriorCompany

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  do Get-Can-Tax-Processing-Params

  move $CTX910RM_Report_Title to $ReportTitle
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  #ifdef PRCSSCHD
    do Select-Canadian-YrEnd-Parameters
    do Convert-Parameters
  #endif

  do Open-File

  do Initialize-Detail
  do Initialize-Summary

  do Array-Create
  do Initialize-OtherInfo-Array

  let $xml_cntrl_begin = '<'
  let $xml_cntrl_end   = '>'
  let $xml_text_delim  = '"'
  let $xml_tag_end     = '/'
  let $xml_tag         = ''
  let $xml_content     = ''
  let $xml_output_line = ''

end-procedure

begin-procedure Array-Create

   create-array name=OtherInfo size=60   -
      field=OtherInfo_Box_Num:char       -
      field=OtherInfo_Box_Amt:number

end-procedure


begin-procedure Initialize-OtherInfo-Array

   move 0 to #load
   move 0 to #loadamt
   move ' ' to $loadspace

   move 60 to #MaxOtherInfo

   while #load < #MaxOtherInfo

      put $loadspace #loadamt into OtherInfo(#load)
          OtherInfo_Box_Num OtherInfo_Box_Amt

      add 1 to #load

   end-while

end-procedure


begin-procedure Report-Translation

  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('CTX910RM', 'REPORT_TITLE'      , $CTX910RM_Report_Title , #dummy_width)
  do Get_Field_Information ('CTX910RM', 'NEGATIVE_VALUE_FND', $CTX910RM_negative_value_fnd , #dummy_width)
  do Get_Field_Information ('CTX910RM', 'NO_RL1_REC_CREATED', $CTX910RM_no_rl1_rec_created , #dummy_width)

end-procedure


begin-procedure Open-File

#ifdef MPE
  let $feq='FILE CTXRM.DAT; REC=-200,,F,ASCII'
  call system using $feq #status
  open 'CTXRM.DAT' as 10 for-writing record=200:vary
#else
  open '{IMPORTPREFIX}CTXRM{IMPORTSUFFIX}' as 10 for-writing record=200:vary
#endif

end-procedure


begin-procedure Process-Main

  do Check-RL-Slip-Exists

  if $RL-Slip-Exists = 'Y'
    do Write-Transmitter-Record
    do Process-Year-End-Records
    let $xml_tag = 'Transmission'
    do Process-XML-Tag-End
  else
    display 'No slips processed'
    display ''
  end-if

end-procedure


begin-procedure Process-Year-End-Records

begin-SELECT
S.COMPANY
S.REPORTING_ID   () on-break print=never after=Write-Summary-Record
S.WAGE_LOSS_PLAN
S.PROVINCE
S.SEQUENCE_NUMBER
S.TAXFORM_ID
S.CALENDAR_YEAR
S.RELEVE_SLIP_NO
S.EMPLID
S.CAN_YE_SLIP_SEQ
E.EMPLID         () on-break print=never after=Reset-Flag
E.SIN
E.SLIP_SURNAME
E.SLIP_FIRST_NAME
E.SLIP_INITIAL
E.ADDRESS1
E.ADDRESS2
E.CITY
E.PROVINCE
E.COUNTRY
E.POSTAL
E.DECEASED

 if $Proc_Amend_Cancel = 'Y'
  do Check-Status
 end-if

 if $StatusOpen = 'Y'

     do Save-Employee-Data
     let $FoundNegative = 'N'
     if $Proc_Type = 'O' or $Proc_Type = 'A'
       do Check-For-Negative-Amt

       if $FoundNegative = 'N'
         do Get-Detail-Data
         if $Proc_Type = 'O'
           do Write-Releve1-Record
           let $xml_tag      = $TypeData
           do Process-XML-Tag-End
         else
           if $Proc_Type = 'A'
             do Write-RL-1-Data-Amend
           end-if
         end-if
       else
         do Error-Report
         move 'N' to $FoundNegative
       end-if

     else
       if $Proc_Type = 'C'
         do Write-RL-1-Data-Cancel
       end-if
     end-if

     do Initialize-Detail

 end-if

FROM PS_CAN_YE_EMPL  E,
     PS_CAN_YE_SLIP  S
WHERE E.CALENDAR_YEAR = &TX.Balance_Year
  AND S.CALENDAR_YEAR = &TX.Balance_Year
  AND S.TAXFORM_ID = 'R'
  AND S.COMPANY = E.COMPANY
  AND E.EMPLID = S.EMPLID
  AND E.SEQUENCE_NUMBER = S.SEQUENCE_NUMBER
  AND S.SEQUENCE_NUMBER = (SELECT MAX(S1.SEQUENCE_NUMBER)
               FROM PS_CAN_YE_SLIP S1
               WHERE S1.COMPANY = S.COMPANY
                 AND S1.EMPLID  = S.EMPLID
                 AND S1.CALENDAR_YEAR = S.CALENDAR_YEAR
                 AND S1.TAXFORM_ID    = S.TAXFORM_ID
#ifdef MVS
  \$seq_number\
#else
  [$seq_number]
#endif
#ifdef MVS
  \$ye_slip_process\
#else
  [$ye_slip_process]
#endif

ORDER by S.REPORTING_ID ASC, S.COMPANY ASC, E.SLIP_SURNAME ASC,
        E.SLIP_FIRST_NAME ASC, E.EMPLID ASC, S.CAN_YE_SLIP_SEQ ASC
end-SELECT

 if $Proc_Type = 'O' and $BegSlipNo_Found = 'Y'
   do Write-Releve-Serial-End
 else
   if $Proc_Type = 'A' and $EndSlipNo_Found = 'Y'
     do Write-Releve-Serial-End-Amend
   end-if
 end-if

end-procedure


begin-procedure Save-Employee-Data

  if &S.Company <> $PriorCompany

          if $Proc_Type = 'O'
            if $PriorCompany <> ' '    ! first time through, no serial end yet
              and $BegSlipNo_Found = 'Y'
                do Write-Releve-Serial-End
            end-if
          end-if

          if $Proc_Type = 'A'
            if $PriorCompany <> ' '    ! first time through, no serial end yet
              and $EndSlipNo_Found = 'Y'
                do Write-Releve-Serial-End-Amend
            end-if
          end-if

          if $Proc_Type = 'O'
            do Get-Begin-Releve-Slip-No
          else
            if $Proc_Type = 'A'
              do Get-End-Releve-Slip-No
            end-if
          end-if



     move &S.Company to $Company
     move &S.Company to $PriorCompany
     do Get-Company-Data
     move &CT.Descr to $CompanyName
  end-if

 if rtrim(&S.Reporting_ID, ' ') <> rtrim($PriorReporting_ID, ' ')
   let $PrintGroupe = 'Y'
 end-if
 move &S.Reporting_ID          to $PriorReporting_ID

 move &S.Reporting_ID          to $ReportingID
 move &E.SLIP_Surname          to $E_LastName
 move &E.SLIP_First_Name       to $E_FirstName
 move &E.SLIP_Initial          to $E_Initial
 move &E.Address1              to $E_AddrLine1
 move &E.Address2              to $E_AddrLine2
 move &E.City                  to $E_City
 let $E_Province = rtrim(&E.Province,' ')
 move &E.Postal                to $E_PostalCode
 move &E.EmplID                to $EmplID
 move &E.SIN                   to $E_SIN
 if  rtrim($E_SIN, ' ') = '' OR
     rtrim($E_SIN, ' ') = '999999999'
      move ' ' to $E_SIN
 end-if
 move &E.COUNTRY               to $E_Country
 if $E_Province = 'ZZ' and $E_Country <> 'CAN' and $E_Country <> 'USA'
    do Get-Country-Name
 end-if

 if $Proc_Type = 'O' or $Proc_Type = 'A'
   do Update-Slip-Detail
 end-if

 if $Proc_Type = 'C'
   move &S.Releve_Slip_No      to #Releve_Slip_No
 end-if

 do Format-Number(#Releve_Slip_No,$ReleveSlipNo,'099999999')

  if $E_Country = 'CAN'
     move &E.Postal to $PostalCd
     do Check-Postal-Code
     move $PostalCd to $E_PostalCode
     let $E_PostalCode = substr($E_PostalCode, 1,6)
  else
     if $E_Country = 'USA'
       move &E.Postal to $PostalCd
       do Check-Zip-Code
       move $ZipCode to $E_PostalCode
       let $E_PostalCode = substr($E_PostalCode, 1,6)
     else
       move &E.Postal to $E_PostalCode
       let $E_PostalCode = substr($E_PostalCode, 1,6)
     end-if
  end-if

end-procedure


begin-procedure Get-Begin-Releve-Slip-No

move 7 to #CheckDigit_Calc_Value ! as per Quebec guidelines

let $BegSlipNo_Found = 'N'

begin-SELECT
T.RELEVE_SERIAL_BEG
T.COMPANY
T.EFFDT

  let $BegSlipNo_Found = 'Y'

FROM  PS_PQ_REPTNG_TBL T
 WHERE &S.Company = T.COMPANY
AND   T.EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_PQ_REPTNG_TBL
      WHERE EFFDT <= $AsOfDate
        AND COMPANY = &S.Company)
end-SELECT

 move &T.Releve_Serial_Beg to #Releve_Serial_No

end-procedure

begin-procedure Get-Country-Name

move ' ' to $Country_name

begin-SELECT
CN.DESCR,
CN.DESCRSHORT

 move &CN.DESCR to $Country_name

 FROM  PS_COUNTRY_TBL CN
 WHERE CN.COUNTRY = $E_Country
end-SELECT

let  $E_Province = substr($Country_name, 1, 20)

if  $E_Province = ' '
    move $E_Country to $E_Province
end-if

end-procedure

begin-procedure Get-End-Releve-Slip-No

move 7 to #CheckDigit_Calc_Value ! as per Quebec guidelines

let $EndSlipNo_Found = 'N'

begin-SELECT
TE.RELEVE_SERIAL_END
TE.COMPANY
TE.EFFDT

  let $EndSlipNo_Found = 'Y'

FROM  PS_PQ_REPTNG_TBL TE
 WHERE &S.Company = TE.COMPANY
AND   TE.EFFDT = (SELECT
      MAX(TE1.EFFDT)
      FROM PS_PQ_REPTNG_TBL TE1
      WHERE TE1.EFFDT <= $AsOfDate
        AND TE1.COMPANY = &S.Company)
end-SELECT

 move &TE.Releve_Serial_End to #Releve_Serial_No
 let #Releve_Serial_No = #Releve_Serial_No / 10
 let #Releve_Serial_No = trunc (#Releve_Serial_No,0)

 add 1 to #Releve_Serial_No

end-procedure


begin-procedure Update-Slip-Detail

do Calculate-Releve-Slip-No

begin-sql
UPDATE PS_CAN_YE_SLIP
SET RELEVE_SLIP_NO = $Releve_Slip_No
WHERE COMPANY         = &S.COMPANY
AND   EMPLID          = &S.EMPLID
AND   CALENDAR_YEAR   = &TX.BALANCE_YEAR
AND   TAXFORM_ID      = 'R'
AND   WAGE_LOSS_PLAN  = &S.WAGE_LOSS_PLAN
AND   PROVINCE        = &S.PROVINCE
AND   SEQUENCE_NUMBER = &S.SEQUENCE_NUMBER
AND   CAN_YE_SLIP_SEQ = &S.CAN_YE_SLIP_SEQ
end-SQL

end-procedure

begin-procedure Calculate-Releve-Slip-No

let #Releve_Add_Value = mod(#Releve_Serial_No,#CheckDigit_Calc_Value)

do Format-Number (#Releve_Serial_No,$Releve_Serial_No,'09999999')
do Format-Number (#Releve_Add_Value,$Releve_Add_Value,'9')

let $Releve_Slip_No = $Releve_Serial_No || $Releve_Add_Value

let #Releve_Slip_No = $Releve_Slip_No

add 1 to #Releve_Serial_No

end-procedure

begin-procedure Write-Releve-Serial-End

begin-sql
UPDATE PS_PQ_REPTNG_TBL
SET  RELEVE_SERIAL_END = #Releve_Slip_No
WHERE COMPANY = &T.Company
AND   EFFDT = &T.Effdt
end-SQL

 move 0 to #Releve_Slip_No

end-procedure


begin-procedure Write-Releve-Serial-End-Amend

begin-sql
UPDATE PS_PQ_REPTNG_TBL
SET  RELEVE_SERIAL_END = #Releve_Slip_No
WHERE COMPANY = &TE.Company
AND   EFFDT = &TE.Effdt
end-SQL

 move 0 to #Releve_Slip_No

end-procedure


begin-procedure Check-For-Negative-Amt

begin-SELECT
NA.BOX
NA.CAN_YE_BOX_AMT

  if &NA.CAN_YE_BOX_AMT < 0
    move 'Y' to $FoundNegative
  end-if

FROM PS_CAN_YE_DETAIL  NA
WHERE NA.COMPANY = &S.Company
  AND NA.EMPLID  = &E.EmplID
  AND NA.CALENDAR_YEAR = &TX.Balance_Year
  AND NA.TAXFORM_ID = &S.Taxform_ID
  AND NA.WAGE_LOSS_PLAN = &S.Wage_Loss_Plan
  AND NA.PROVINCE = &S.Province
  AND NA.SEQUENCE_NUMBER = &S.Sequence_Number
  AND NA.CAN_YE_SLIP_SEQ = &S.Can_YE_Slip_Seq

end-SELECT

end-procedure


begin-procedure Get-Detail-Data

   let #OtherInfoBoxCount = 0
   let #OtherInfo_i       = 0

begin-SELECT
D.BOX
D.CAN_YE_BOX_TEXT
D.CAN_YE_BOX_AMT

  do Save-Detail-Data

FROM PS_CAN_YE_DETAIL  D
WHERE D.COMPANY = &S.Company
  AND D.EMPLID  = &E.EmplID
  AND D.CALENDAR_YEAR = &TX.Balance_Year
  AND D.TAXFORM_ID = &S.Taxform_ID
  AND D.WAGE_LOSS_PLAN = &S.Wage_Loss_Plan
  AND D.PROVINCE = &S.Province
  AND D.SEQUENCE_NUMBER = &S.Sequence_Number
  AND D.CAN_YE_SLIP_SEQ = &S.Can_YE_Slip_Seq
ORDER by D.BOX ASC

end-SELECT

end-procedure

begin-procedure Save-Detail-Data

  let $Box = RTRIM(&D.Box, ' ')

  let #BoxAmt = &D.CAN_YE_Box_Amt

  if #BoxAmt >= 0 and $FoundNegative = 'N'

    evaluate $Box

       when = 'A'
          do Format-Number(#BoxAmt, $EmplIncome, '9999999.99')
          let #BoxA = #BoxAmt

       when = 'B'
          do Format-Number(#BoxAmt, $QPPContrib,  '9999999.99')
          let #BoxB = #BoxAmt

       when = 'B01'
       when = 'B-1'
          do Format-Number(#BoxAmt, $CPPContrib,  '9999999.99')

       when = 'C'
          do Format-Number(#BoxAmt, $UICPremiums, '9999999.99')

       when = 'D'
          do Format-Number(#BoxAmt, $RRPContrib,  '9999999.99')

       when = 'E'
          do Format-Number(#BoxAmt, $QITWithheldSource, '9999999.99')

       when = 'F'
          do Format-Number(#BoxAmt, $UnionDues, '9999999.99')

       when = 'G'
          do Format-Number(#BoxAmt, $QPPPensEarns, '9999999.99')

       when = 'H'
          do Format-Number(#BoxAmt, $QPIPPrem, '9999999.99')

       when = 'I'
          do Format-Number(#BoxAmt, $QPIPEarns, '9999999.99')

       when = 'J'
          do Format-Number(#BoxAmt, $HealthServPlan, '9999999.99')

       when = 'K'
          do Format-Number(#BoxAmt, $TripsToRemoteAreas , '9999999.99')

      when = 'L'
          do Format-Number(#BoxAmt, $OtherBenefits , '9999999.99')

       when = 'M'
          do Format-Number(#BoxAmt, $Commissions , '9999999.99')

       when = 'N'
          do Format-Number(#BoxAmt, $CharitableDonatns, '9999999.99')

       when = 'O'
          do Format-Number(#BoxAmt, $OtherTaxIncome, '9999999.99')

       when = 'P'
          do Format-Number(#BoxAmt, $ContribMEInsPlan, '9999999.99')

       when = 'Q'
          do Format-Number(#BoxAmt, $DefrdSalaryWages, '9999999.99')

       when = 'R'
          do Format-Number(#BoxAmt, $Indian, '9999999.99')

       when = 'S'
          do Format-Number(#BoxAmt, $Tip, '9999999.99')

       when = 'T'
          do Format-Number(#BoxAmt, $TipsAllocated, '9999999.99')

       when = 'U'
          do Format-Number(#BoxAmt, $PhasedRetire, '9999999.99')

       when = 'V'
          do Format-Number(#BoxAmt, $MealsAndAccom, '9999999.99')

       when = 'W'
          do Format-Number(#BoxAmt, $AutoUse, '9999999.99')

       when = 'A-1'
       when = 'A-2'
       when = 'A-3'
       when = 'A-4'
       when = 'A-5'
       when = 'A-6'
       when = 'A-7'
       when = 'A-8'
       when = 'A-9'
       when = 'A-10'
       when = 'A-11'
       when = 'A-12'
       when = 'A-13'
       when = 'A-14'
       when = 'B-1'
       when = 'D-1'
       when = 'D-2'
       when = 'D-3'
       when = 'G-1'
       when = 'G-2'
       when = 'K-1'
       when = 'L-2'
       when = 'L-3'
       when = 'L-4'
       when = 'L-5'
       when = 'L-6'
       when = 'L-7'
       when = 'L-8'
       when = 'O-2'
       when = 'O-3'
       when = 'O-4'
       when = 'R-1'
       when = 'V-1'
       when = '201'
       when = '211'
       when = '235'
       when = 'CA'
       when = 'CB'
       when = 'CC'
       when = 'RA'
       when = 'RB'
       when = 'RC'
       when = 'RD'
       when = 'RG'
       when = 'RH'
       when = 'RI'
       when = 'RJ'
       when = 'RK'
       when = 'RL'
       when = 'RM'
       when = 'RN'
       when = 'RO'
       when = 'RP'
       when = 'RQ'
       when = 'RR'
       when = 'RS'
       when = 'RT'
       when = 'RU'
       when = 'RV'
       when = 'RX'          
          do Save-RL1_Other_Info
          move #OtherInfo_i to #OtherInfoBoxCount

    end-evaluate
  end-if

  if $Box = 'G' and #BoxAmt = 0 and #BoxB = 0
    do Format-Number(#BoxAmt, $QPPPensEarns, '9999999.99')
  end-if

  if $Box = 'CDO'
    move &D.CAN_YE_BOX_TEXT to $Code
  end-if

end-procedure


begin-procedure Save-RL1_Other_Info

   put $Box #BoxAmt into OtherInfo(#OtherInfo_i)
       OtherInfo_Box_Num OtherInfo_Box_Amt

   add 1 to #OtherInfo_i

end-procedure


begin-Procedure Write-Transmitter-Record
  move &TX.Rlv_Company       to $Company  !TX.Rlv_Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

  do Get-Company-Data                           !Transmitter identifying data

  move &TX.Rlv_Transm_ID                        to $TransmitterID

  move &TX.Balance_Year                         to $TaxYear

  move &TX.Rlv_Tech_Res_Name                    to $Name
  do Rotate-Name
  do Rotate-Name-for-Mag-Media

  if $SuffixFound <> 'Y'
   let $Name = SUBSTR($LastName,1,LENGTH($LastName) - 1) || ' ' || $FirstName
  else
     let $Name = $LastName || ' ' || $FirstName
  end-if

  let $TechResourceName = substr($Name,1,30)

  move &TX.Rlv_Tech_Res_ACode                   to #TechResourceAreaCode
  do format-number(#TechResourceAreaCode, $TechResourceAreaCode, '999')

  move &TX.Rlv_Tech_Res_Phone                   to #TechResourcePhone
  do format-number(#TechResourcePhone, $TechResourcePhone, '9999999')

  move &TX.Rlv_Tech_Res_Ext                     to #TechResourceExtNo

  do format-number(#TechResourceExtNo, $TechResourceExtNo, '9999999')

  move &TX.Rlv_Tech_Res_Lang                    to $TechResourceLanguage
  move &TX.Rlv_Acct_Res_Name                    to $Name
  do Rotate-Name
  do Rotate-Name-for-Mag-Media
  if $SuffixFound <> 'Y'
    let $Name = SUBSTR($LastName,1,LENGTH($LastName) - 1) || ' ' || $FirstName
  else
    let $Name = $LastName || ' ' || $FirstName
  end-if

  let $AcctingResourceName = substr($Name,1,30)

  move &TX.Rlv_Acct_Res_ACode                   to #AcctingResourceAreaCode
  do format-number(#AcctingResourceAreaCode, $AcctingResourceAreaCode , '999')

  move &TX.Rlv_Acct_Res_Phone                   to #AcctingResourcePhone
  do format-number(#AcctingResourcePhone, $AcctingResourcePhone, '9999999')

  move &TX.Rlv_Acct_Res_Ext                     to #AcctingResourceExtNo

  do format-number(#AcctingResourceExtNo, $AcctingResourceExtNo, '9999999')

  move &TX.Rlv_Acct_Res_Lang                    to $AcctingResourceLanguage
  move &TX.Rlv_Package_Type                     to $PackageType
  move &TX.Rlv_Transm_Type                      to $TransmitterType
  move &TX.Rlv_Source                           to $ReleveSource

  If $CO_FOUND = 'Y'
        move &CT.Descr to $CompanyName
        move $CompanyName                            to $TransmitterNameLine1
        move $CompnyAdd1                             to $TransmitterAddrLine1
        move $CompnyADD2                             to $TransmitterAddrLine2
        move $CompnyCity                             to $TransmitterCity
        let $TransmitterProvince = rtrim(&CT.State, ' ')

        if &CT.Country = 'CAN'
                move &CT.Postal to $PostalCd
                do Check-Postal-Code
                move $PostalCd to $TransmitterPostalCode
                let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
        else
          if &CT.Country = 'USA'
                move &CT.Postal to $PostalCd
                do Check-Zip-Code
                move $ZipCode to $TransmitterPostalCode
                let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
          else
                move &CT.Postal to $TransmitterPostalCode
                let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
          end-if
        end-if
  else

        move &TX.Descr        to  $TransmitterNameLine1
        move &TX.Address1     to  $TransmitterAddrLine1
        move &TX.Address2     to  $TransmitterAddrLine2
        move &TX.City         to  $TransmitterCity

        let $TransmitterProvince = rtrim(&TX.Province, ' ')
        move &TX.Country      to $TransmitterCountry
        if &TX.Country = 'CAN'
           move &TX.Postal to $PostalCd
           do Check-Postal-Code
           move $PostalCd to $TransmitterPostalCode
           let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
        else
          if &TX.Country = 'USA'
            move &TX.Postal to $PostalCd
            do Check-Zip-Code
            move $ZipCode to $TransmitterPostalCode
            let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
          else
            move &TX.Postal to $TransmitterPostalCode
            let $TransmitterPostalCode = substr($TransmitterPostalCode, 1,6)
          end-if
        end-if
  end-if

  do Count-ReportingID-Numbers

  do format-number(#SummaryCounter, $SummaryCounter, '999999')
  display ' '
  display 'Total number of RL-1 summary is : ' noline
  display $SummaryCounter
  display ' '


   write 10 from '<?xml version="1.0" encoding="iso-8859-1"?>'

   write 10 from '<Transmission VersionSchema="2012.1" xmlns="http://www.mrq.gouv.qc.ca/T5">'

   let $xml_tag      = 'P'
   do Process-XML-Tag-Beg

   if rtrim($TaxYear, ' ') <> ''
     let $xml_tag      = 'Annee'
     let $xml_content  = $TaxYear
     do Process-XML-Tag-Content
   end-if

   if rtrim($PackageType, ' ') <> ''
     let $xml_tag      = 'TypeEnvoi'
     let $xml_content  = $PackageType
     do Process-XML-Tag-Content
   end-if

   if rtrim($ReleveSource, ' ') <> ''
     let $xml_tag      = 'Provenance'
     let $xml_content  = $ReleveSource
     do Process-XML-Tag-Content
   end-if

   let $xml_tag      = 'Preparateur'
   do Process-XML-Tag-Beg

   if rtrim($TransmitterID, ' ') <> ''
     let $xml_tag      = 'No'
     let $xml_content  = rtrim($TransmitterID, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterType, ' ') <> ''
     let $xml_tag      = 'Type'
     let $xml_content  = rtrim($TransmitterType, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterNameLine1, ' ') <> ''
     let $xml_tag      = 'Nom1'
     let $TransmitterNameLine1 =  substr($TransmitterNameLine1, 1, 30)
     let $xml_content  = rtrim($TransmitterNameLine1, ' ')
     do Process-XML-Tag-Content
   end-if

   let $xml_tag      = 'Adresse'
   do Process-XML-Tag-Beg

   if rtrim($TransmitterAddrLine1, ' ') <> ''
     let $xml_tag      = 'Ligne1'
     let $TransmitterAddrLine1 =  substr($TransmitterAddrLine1, 1, 30)
     let $xml_content  = rtrim($TransmitterAddrLine1, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterAddrLine2, ' ') <> ''
     let $xml_tag      = 'Ligne2'
     let $TransmitterAddrLine2 = substr($TransmitterAddrLine2, 1, 30)
     let $xml_content  = rtrim($TransmitterAddrLine2, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterCity, ' ') <> ''
     let $xml_tag      = 'Ville'
     let $TransmitterCity =  substr($TransmitterCity, 1, 30)
     let $xml_content  = rtrim($TransmitterCity, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterProvince, ' ') <> ''
     let $xml_tag      = 'Province'
     let $xml_content  = rtrim($TransmitterProvince, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TransmitterPostalCode, ' ') <> ''
     let $xml_tag      = 'CodePostal'
     let $xml_content  = rtrim($TransmitterPostalCode, ' ')
     do Process-XML-Tag-Content
   end-if

   let $xml_tag      = 'Adresse'
   do Process-XML-Tag-End

   let $xml_tag      = 'Preparateur'
   do Process-XML-Tag-End


   if rtrim($TechResourceName, ' ') <> ''      or
      ltrim($TechResourceAreaCode, ' ') <> '0' or
      ltrim($TechResourcePhone, ' ') <> '0'    or
      ltrim($TechResourceExtNo, ' ') <> '0'    or
      rtrim($TechResourceLanguage, ' ') <> ''

     let $xml_tag      = 'Informatique'
     do Process-XML-Tag-Beg
   end-if

   if rtrim($TechResourceName, ' ') <> ''
     let $xml_tag      = 'Nom'
     let $xml_content  = rtrim($TechResourceName, ' ')
     do Process-XML-Tag-Content
   end-if

   if ltrim($TechResourceAreaCode, ' ') <> '0'
     let $xml_tag      = 'IndRegional'
     let $xml_content  = ltrim($TechResourceAreaCode, ' ')
     do Process-XML-Tag-Content
   end-if

   if ltrim($TechResourcePhone, ' ') <> '0'
     let $xml_tag      = 'Tel'
     let $xml_content = edit($TechResourcePhone,'xxx-xxxx')
     do Process-XML-Tag-Content
   end-if

   if ltrim($TechResourceExtNo, ' ') <> '0'
     let $xml_tag      = 'PosteTel'
     let $xml_content  = ltrim($TechResourceExtNo, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($TechResourceLanguage, ' ') <> ''
     let $xml_tag      = 'Langue'
     let $xml_content  = $TechResourceLanguage
     do Process-XML-Tag-Content
   end-if


   if rtrim($TechResourceName, ' ') <> ''      or
      ltrim($TechResourceAreaCode, ' ') <> '0' or
      ltrim($TechResourcePhone, ' ') <> '0'    or
      ltrim($TechResourceExtNo, ' ') <> '0'    or
      rtrim($TechResourceLanguage, ' ') <> ''

     let $xml_tag      = 'Informatique'
     do Process-XML-Tag-End
   end-if


   if rtrim($AcctingResourceName, ' ') <> ''      or
      ltrim($AcctingResourceAreaCode, ' ') <> '0' or
      ltrim($AcctingResourcePhone, ' ') <> '0'    or
      ltrim($AcctingResourceExtNo, ' ') <> '0'    or
      rtrim($AcctingResourceLanguage, ' ') <> ''

     let $xml_tag      = 'Comptabilite'
     do Process-XML-Tag-Beg
   end-if


   if rtrim($AcctingResourceName, ' ') <> ''
     let $xml_tag      = 'Nom'
     let $xml_content  = rtrim($AcctingResourceName, ' ')
     do Process-XML-Tag-Content
   end-if

   if ltrim($AcctingResourceAreaCode, ' ') <> '0'
     let $xml_tag      = 'IndRegional'
     let $xml_content  = ltrim($AcctingResourceAreaCode, ' ')
     do Process-XML-Tag-Content
   end-if

   if ltrim($AcctingResourcePhone, ' ') <> '0'
     let $xml_tag      = 'Tel'
     let $xml_content = edit($AcctingResourcePhone,'xxx-xxxx')
     do Process-XML-Tag-Content
   end-if

   if ltrim($AcctingResourceExtNo, ' ') <> '0'
     let $xml_tag      = 'PosteTel'
     let $xml_content  = ltrim($AcctingResourceExtNo, ' ')
     do Process-XML-Tag-Content
   end-if

   if rtrim($AcctingResourceLanguage, ' ') <> ''
     let $xml_tag      = 'Langue'
     let $xml_content  = $AcctingResourceLanguage
     do Process-XML-Tag-Content
   end-if

   if rtrim($AcctingResourceName, ' ') <> ''      or
      ltrim($AcctingResourceAreaCode, ' ') <> '0' or
      ltrim($AcctingResourcePhone, ' ') <> '0'    or
      ltrim($AcctingResourceExtNo, ' ') <> '0'    or
      rtrim($AcctingResourceLanguage, ' ') <> ''

     let $xml_tag      = 'Comptabilite'
     do Process-XML-Tag-End
   end-if


   let $RL1ApprovalNum = 'RQ-12-01-095'
   if rtrim($RL1ApprovalNum, ' ') <> ''
     let $xml_tag      = 'NoCertification'
     let $xml_content  = ltrim($RL1ApprovalNum, ' ')
     do Process-XML-Tag-Content
   end-if

   let $xml_tag      = 'P'
   do Process-XML-Tag-End

end-procedure


begin-procedure Write-Releve1-Record

  add 1 to #RV1Count

  if $PrintGroupe = 'Y'
    let $xml_tag = 'Groupe01'
    do Process-XML-Tag-Beg
    let $PrintGroupe = 'N'
  end-if

  let $xml_tag      = $TypeData
  do Process-XML-Tag-Beg

  let $xml_tag      = 'Annee'
  let $xml_content  = $TaxYear
  do Process-XML-Tag-Content

  if ltrim($ReleveSlipNo, ' ') <> ''
    let $xml_tag      = 'NoReleve'
    let $xml_content  = ltrim($ReleveSlipNo,' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Identification'
  do Process-XML-Tag-Beg

  let $xml_tag      = 'Employe'
  do Process-XML-Tag-Beg

  let $xml_tag      = 'NAS'
  let $xml_content  = rtrim($E_SIN, ' ')
  do Process-XML-Tag-Content

  if rtrim($EmplID, ' ') <> ''
    let $xml_tag      = 'No'
    let $xml_content  = rtrim($EmplID, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'NomFamille'
  let $E_LastName   = substr($E_LastName, 1, 30)
  let $xml_content  = rtrim($E_LastName, ' ')
  do Process-XML-Tag-Content

  let $xml_tag      = 'Prenom'
  let $E_FirstName  = substr($E_FirstName, 1, 30)
  let $xml_content  = rtrim($E_FirstName, ' ')
  do Process-XML-Tag-Content

  if rtrim($E_Initial, ' ') <> ''
    let $xml_tag      = 'Initiale'
    let $xml_content  = rtrim($E_Initial, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Employe'
  do Process-XML-Tag-End

  let $xml_tag      = 'Identification'
  do Process-XML-Tag-End

  let $xml_tag      = 'Adresse'
  do Process-XML-Tag-Beg

  if rtrim($E_AddrLine1, ' ') <> ''
    let $xml_tag      = 'Ligne1'
    let $E_AddrLine1  = substr($E_AddrLine1, 1, 30)
    let $xml_content  = rtrim($E_AddrLine1, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_AddrLine2, ' ') <> ''
    let $xml_tag      = 'Ligne2'
    let $E_AddrLine2  = substr($E_AddrLine2, 1, 30)
    let $xml_content  = rtrim($E_AddrLine2, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_City, ' ') <> ''
    let $xml_tag      = 'Ville'
    let $E_City       = substr($E_City, 1, 30)
    let $xml_content  = rtrim($E_City, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_Province, ' ') <> ''
    let $xml_tag      = 'Province'
    let $xml_content  = rtrim($E_Province, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_PostalCode, ' ') <> ''
    let $xml_tag      = 'CodePostal'
    let $xml_content  = rtrim($E_PostalCode, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Adresse'
  do Process-XML-Tag-End

  let $xml_tag      = 'Montants'
  do Process-XML-Tag-Beg

  if ltrim($EmplIncome, ' ') <> ''
    let $xml_tag      = 'A_RevenuEmploi'
    let $xml_content  = ltrim($EmplIncome, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($QPPContrib, ' ') <> ''
    let $xml_tag      = 'B_CotisationRRQ'
    let $xml_content  = ltrim($QPPContrib, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($UICPremiums, ' ') <> ''
    let $xml_tag      = 'C_CotisationAssEmploi'
    let $xml_content  = ltrim($UICPremiums, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($RRPContrib, ' ') <> ''
    let $xml_tag      = 'D_CotisationRPA'
    let $xml_content  = ltrim($RRPContrib, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($QITWithheldSource, ' ') <> ''
    let $xml_tag      = 'E_ImpotQue'
    let $xml_content  = ltrim($QITWithheldSource, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($UnionDues, ' ') <> ''
    let $xml_tag      = 'F_CotisationSyndicale'
    let $xml_content  = ltrim($UnionDues, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($QPPPensEarns, ' ') <> ''
    let $xml_tag      = 'G_SalaireAdmisRRQ'
    let $xml_content  = ltrim($QPPPensEarns, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($QPIPPrem, ' ') <> ''
    let $xml_tag      = 'H_CotisationRQAP'
    let $xml_content  = ltrim($QPIPPrem, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($QPIPEarns, ' ') <> ''
    let $xml_tag      = 'I_SalaireAdmisRQAP'
    let $xml_content  = ltrim($QPIPEarns, ' ')
    do Process-XML-Tag-Content
  else
    let #BoxAmt = 0
    do Format-Number(#BoxAmt, $QPIPEarns, '9999999.99')
    let $xml_tag      = 'I_SalaireAdmisRQAP'
    let $xml_content  = ltrim($QPIPEarns, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($HealthServPlan, ' ') <> ''
    let $xml_tag      = 'J_RegimeAssMaladie'
    let $xml_content  = ltrim($HealthServPlan, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($TripsToRemoteAreas, ' ') <> ''
    let $xml_tag      = 'K_Voyage'
    let $xml_content  = ltrim($TripsToRemoteAreas, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($OtherBenefits, ' ') <> ''
    let $xml_tag      = 'L_AutreAvantage'
    let $xml_content  = ltrim($OtherBenefits, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($Commissions, ' ') <> ''
    let $xml_tag      = 'M_Commission'
    let $xml_content  = ltrim($Commissions, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($CharitableDonatns, ' ') <> ''
    let $xml_tag      = 'N_DonBienfaisance'
    let $xml_content  = ltrim($CharitableDonatns, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($OtherTaxIncome, ' ') <> '' and  rtrim($Code, ' ') <> ''
    let $xml_tag      = 'O_AutreRevenu'
    do Process-XML-Tag-Beg

    let $xml_tag      = 'MontantCaseO'
    let $xml_content  = ltrim($OtherTaxIncome, ' ')
    do Process-XML-Tag-Content

    let $xml_tag      = 'SourceCaseO'
    let $xml_content  = rtrim($Code, ' ')
    do Process-XML-Tag-Content

    let $xml_tag = 'O_AutreRevenu'
    do Process-XML-Tag-End
  end-if

  if ltrim($ContribMEInsPlan, ' ') <> ''
    let $xml_tag      = 'P_RegimeAssInterEntr'
    let $xml_content  = ltrim($ContribMEInsPlan, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($DefrdSalaryWages, ' ') <> ''
    let $xml_tag      = 'Q_SalaireDiffere'
    let $xml_content  = ltrim($DefrdSalaryWages, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($Indian, ' ') <> ''
    let $xml_tag      = 'R_RevenuIndien'
    let $xml_content  = ltrim($Indian, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($Tip, ' ') <> ''
    let $xml_tag      = 'S_PourboireRecu'
    let $xml_content  = ltrim($Tip, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($TipsAllocated, ' ') <> ''
    let $xml_tag      = 'T_PourboireAttribue'
    let $xml_content  = ltrim($TipsAllocated, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($PhasedRetire, ' ') <> ''
    let $xml_tag      = 'U_RetraiteProgressive'
    let $xml_content  = ltrim($PhasedRetire, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($MealsAndAccom, ' ') <> ''
    let $xml_tag      = 'V_NourritureLogement'
    let $xml_content  = ltrim($MealsAndAccom, ' ')
    do Process-XML-Tag-Content
  end-if

  if ltrim($AutoUse, ' ') <> ''
    let $xml_tag      = 'W_Vehicule'
    let $xml_content  = ltrim($AutoUse, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Montants'
  do Process-XML-Tag-End

  if #OtherInfoBoxCount > 0
    do Write_Other_Info
  end-if

end-procedure


begin-procedure Write_Other_Info


   let #j = 0
   while #j < #OtherInfoBoxCount
      get $OtherInfo_Box_Num #OtherInfo_Box_Amt from OtherInfo(#j)
        OtherInfo_Box_Num OtherInfo_Box_Amt

        let $xml_tag      = 'CaseRensCompl'
        do Process-XML-Tag-Beg

        let $xml_tag      = 'CodeRensCompl'
        let $xml_content  = ltrim($OtherInfo_Box_Num, ' ')
        do Process-XML-Tag-Content

        let $OI_Amt = 0
        do Format-Number(#OtherInfo_Box_Amt, $OI_Amt, '9999999.99')

        let $xml_tag      = 'DonneeRensCompl'
        let $xml_content  = $OI_Amt
        do Process-XML-Tag-Content

        let $xml_tag      = 'CaseRensCompl'
        do Process-XML-Tag-End

      add 1 to #j
   end-while

end-procedure


begin-procedure Initialize-Detail

  move ' '         to $EmplIncome
  move ' '         to $QPPContrib
  move ' '         to $CPPContrib
  move ' '         to $UICPremiums
  move ' '         to $RRPContrib
  move ' '         to $QITWithheldSource
  move ' '         to $UnionDues
  move ' '         to $MealsAndAccom
  move ' '         to $AutoUse
  move ' '         to $HealthServPlan
  move ' '         to $TripsToRemoteAreas
  move ' '         to $OtherBenefits
  move ' '         to $Commissions
  move ' '         to $CharitableDonatns
  move ' '         to $OtherTaxIncome
  move ' '         to $ContribMEInsPlan
  move ' '         to $DefrdSalaryWages
  move ' '         to $Indian
  move ' '         to $Tip
  move ' '         to $TipsAllocated
  move ' '         to $PhasedRetire
  move ' '         to $QPIPPrem
  move ' '         to $QPIPEarns
  move ' '         to $DedForce

  move ' '         to $ReleveSlipNo
  move ' '         to $LastTransSlipNo
  move ' '         to $E_SIN
  move ' '         to $E_LastName
  move ' '         to $E_FirstName
  move ' '         to $E_Initial
  move ' '         to $E_AddrLine1
  move ' '         to $E_AddrLine2
  move ' '         to $E_City
  move ' '         to $E_Province
  move ' '         to $E_PostalCode
  move ' '         to $EmplID
  move ' '         to $QPPPensEarns
  move ' '         to $TipInd

  move 0           to #BoxA
  move 0           to #BoxB
  move 0           to #DedForce

end-procedure


begin-procedure Write-RL-1-Data-Cancel

  add 1 to #RV1Count

  if $PrintGroupe = 'Y'
    let $xml_tag = 'Groupe01'
    do Process-XML-Tag-Beg
    let $PrintGroupe = 'N'
  end-if

  let $xml_tag      = $TypeData
  do Process-XML-Tag-Beg

  let $xml_tag      = 'Annee'
  let $xml_content  = $TaxYear
  do Process-XML-Tag-Content

  if rtrim($ReleveSlipNo, ' ') <> ''
    let $xml_tag      = 'NoReleve'
    let $xml_content  = $ReleveSlipNo
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Identification'
  do Process-XML-Tag-Beg

  let $xml_tag      = 'Employe'
  do Process-XML-Tag-Beg

  if rtrim($E_SIN, ' ') <> ''
    let $xml_tag      = 'NAS'
    let $xml_content  = $E_SIN
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_LastName, ' ') <> ''
    let $xml_tag      = 'NomFamille'
    let $E_LastName   = substr($E_LastName,1,30)
    let $xml_content  = rtrim($E_LastName, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($E_FirstName, ' ') <> ''
    let $xml_tag      = 'Prenom'
    let $E_FirstName  = substr($E_FirstName,1,30)
    let $xml_content  = rtrim($E_FirstName, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Employe'
  do Process-XML-Tag-End

  let $xml_tag      = 'Identification'
  do Process-XML-Tag-End

  let $xml_tag      = $TypeData
  do Process-XML-Tag-End

end-procedure


begin-procedure Write-RL-1-Data-Amend

  do Get-Original-Slip-No

  do Write-Releve1-Record

  if rtrim($LastTransSlipNo, ' ') <> ''
    let $xml_tag      = 'NoReleveDerniereTrans'
    let $xml_content  = rtrim($LastTransSlipNo, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = $TypeData
  do Process-XML-Tag-End

end-procedure


begin-procedure Write-Summary-Record

 if #RV1Count > 0

  do Format-Number(#RV1Count, $RV1Count, '999999999')

  move &CT.Descr to $CompanyName
  move $CompnyAdd1 to $C_Street1
  move $CompnyADD2 to $C_Street2
  move $CompnyCity to $C_City
  let $C_Province = rtrim(&CT.State, ' ')
  move &CT.Country to $C_Country

  if $C_Country = 'CAN'
  move &CT.Postal to $PostalCd
  do Check-Postal-Code
  move $PostalCd to $C_PostalCode
    let $C_PostalCode  = substr($C_PostalCode, 1, 6)
  else
    if $C_Country = 'USA'
      move &CT.Postal to $PostalCd
      do Check-Zip-Code
      move $ZipCode to $C_PostalCode
      let $C_PostalCode  = substr($C_PostalCode, 1, 6)
    else
      move &CT.Postal to $C_PostalCode
      let $C_PostalCode  = substr($C_PostalCode, 1, 6)
    end-if
  end-if

  let $ID_Employer       = substr($ReportingID, 1, 10)
  let $File_Num_Employer = substr($ReportingID, 13, 4)


  let $xml_tag      = 'T'
  do Process-XML-Tag-Beg

  let $xml_tag      = 'Annee'
  let $xml_content  = $TaxYear
  do Process-XML-Tag-Content

  let $xml_tag      = 'NbReleves'
  let $xml_content  = ltrim($RV1Count, ' ')
  do Process-XML-Tag-Content

  let $xml_tag      = 'Employeur'
  do Process-XML-Tag-Beg

  if rtrim($ID_Employer, ' ') <> ''
    let $xml_tag      = 'NoId'
    let $xml_content  = rtrim($ID_Employer, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'TypeDossier'
  let $xml_content  = 'RS'
  do Process-XML-Tag-Content

  if rtrim($File_Num_Employer, ' ') <> ''
    let $xml_tag      = 'NoDossier'
    let $xml_content  = rtrim($File_Num_Employer, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($NEQ, ' ') <> ''
    let $xml_tag      = 'NEQ'
    let $xml_content  = rtrim($NEQ, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($CompanyName, ' ') <> ''
    let $xml_tag      = 'Nom1'
    let $CompanyName  = substr($CompanyName, 1, 30)
    let $xml_content  = rtrim($CompanyName, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Adresse'
  do Process-XML-Tag-Beg

  if rtrim($C_Street1, ' ') <> ''
    let $xml_tag      = 'Ligne1'
    let $C_Street1    = substr($C_Street1, 1, 30)
    let $xml_content  = rtrim($C_Street1, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($C_Street2, ' ') <> ''
    let $xml_tag      = 'Ligne2'
    let $C_Street2    = substr($C_Street2, 1, 30)
    let $xml_content  = rtrim($C_Street2, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($C_City, ' ') <> ''
    let $xml_tag      = 'Ville'
    let $C_City       = substr($C_City, 1, 30)
    let $xml_content  = rtrim($C_City, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($C_Province, ' ') <> ''
    let $xml_tag      = 'Province'
    let $xml_content  = rtrim($C_Province, ' ')
    do Process-XML-Tag-Content
  end-if

  if rtrim($C_PostalCode, ' ') <> ''
    let $xml_tag      = 'CodePostal'
    let $xml_content  = rtrim($C_PostalCode, ' ')
    do Process-XML-Tag-Content
  end-if

  let $xml_tag      = 'Adresse'
  do Process-XML-Tag-End

  let $xml_tag      = 'Employeur'
  do Process-XML-Tag-End

  let $xml_tag      = 'T'
  do Process-XML-Tag-End

  let $xml_tag      = 'Groupe01'
  do Process-XML-Tag-End

  do Initialize-Summary
  let $Error-Report = 'N'

 end-if

end-procedure


begin-procedure Initialize-Summary

   move 0  to #RV1Count

   move ' ' to $ReportingID
   move ' ' to $RV1Count
   move ' ' to $CompanyName
   move ' ' to $C_Street1
   move ' ' to $C_Street2
   move ' ' to $C_City
   move ' ' to $C_Province
   move ' ' to $C_Country
   move ' ' to $C_PostalCode
   move ' ' to $NEQ
   move ' ' to $ID_Employer
   move ' ' to $File_Num_Employer

end-procedure


begin-procedure Get-Original-Slip-No

begin-SELECT

OS.RELEVE_SLIP_NO

  move &OS.Releve_Slip_No to $LastTransSlipNo

FROM PS_CAN_YE_SLIP OS
WHERE OS.COMPANY         = &S.COMPANY
  AND OS.EMPLID          = &S.EMPLID
  AND OS.CALENDAR_YEAR   = &S.CALENDAR_YEAR
  AND OS.TAXFORM_ID      = &S.TAXFORM_ID
  AND OS.YE_SLIP_PROCESS <> 'D'
  AND OS.CAN_YE_SLIP_SEQ = &S.CAN_YE_SLIP_SEQ
  AND OS.SEQUENCE_NUMBER =
      (SELECT MAX(OS1.SEQUENCE_NUMBER)
         FROM PS_CAN_YE_SLIP OS1
         WHERE OS1.COMPANY = OS.COMPANY
           AND OS1.EMPLID  = OS.EMPLID
           AND OS1.CALENDAR_YEAR = OS.CALENDAR_YEAR
           AND OS1.TAXFORM_ID    = OS.TAXFORM_ID
           AND OS1.YE_SLIP_PROCESS <> 'D'
           AND OS1.CAN_YE_SLIP_SEQ = OS.CAN_YE_SLIP_SEQ
           AND OS1.SEQUENCE_NUMBER < &S.SEQUENCE_NUMBER)

end-SELECT

end-procedure


begin-procedure Process-XML-Tag-Content

   let $xml_content   = replace($xml_content, '&',  '&amp;')
   let $xml_content   = replace($xml_content, '"',  '&quot;')
   let $xml_content   = replace($xml_content, '<',  '&lt;')
   let $xml_content   = replace($xml_content, '>',  '&gt;')
   let $xml_content   = replace($xml_content, '''', '&apos;')


   let $xml_content   = ltrim($xml_content, ' ')
   let $xml_content   = rtrim($xml_content, ' ')

   let $xml_output_line = ''
   let $xml_output_line = $xml_cntrl_begin || $xml_tag || $xml_cntrl_end  || $xml_content
                || $xml_cntrl_begin || $xml_tag_end || $xml_tag || $xml_cntrl_end
   write 10 from $xml_output_line

end-procedure


begin-procedure Process-XML-Tag-Beg

   let $xml_output_line = ''
   let $xml_output_line = $xml_cntrl_begin || $xml_tag|| $xml_cntrl_end
   write 10 from $xml_output_line

end-procedure


begin-procedure Process-XML-Tag-End

  let $xml_output_line = ''
  let $xml_output_line = $xml_cntrl_begin || $xml_tag_end || $xml_tag|| $xml_cntrl_end
  write 10 from $xml_output_line


end-procedure


begin-procedure Check-RL-Slip-Exists

  let $RL-Slip-Exists = 'N'

begin-SELECT
'X'

  let $RL-Slip-Exists = 'Y'
  exit-SELECT

FROM PS_CAN_YE_SLIP C
WHERE C.CALENDAR_YEAR = &TX.Balance_Year
AND   C.TAXFORM_ID = 'R'
AND   C.SEQUENCE_NUMBER = (SELECT MAX(C1.SEQUENCE_NUMBER)
                            FROM PS_CAN_YE_SLIP C1
                            WHERE C1.COMPANY         = C.COMPANY
                              AND C1.EMPLID          = C.EMPLID
                              AND C1.CALENDAR_YEAR   = C.CALENDAR_YEAR
                              AND C1.YE_SLIP_PROCESS = C.YE_SLIP_PROCESS)
AND C.YE_SLIP_PROCESS = $Proc_Type

end-SELECT
end-procedure


begin-procedure Count-ReportingID-Numbers

  move 0     to #SummaryCounter
  move 'xxx' to $PriorID

begin-SELECT

SL.REPORTING_ID

  if rtrim(&SL.Reporting_ID, ' ') <> rtrim($PriorID, ' ')
     add 1 to #SummaryCounter
     move &SL.Reporting_ID to $PriorID
  end-if

FROM PS_CAN_YE_SLIP SL
WHERE SL.TAXFORM_ID = 'R'
AND   SL.CALENDAR_YEAR = &TX.Balance_Year
AND   SL.SEQUENCE_NUMBER = (SELECT MAX(SL1.SEQUENCE_NUMBER)
               FROM PS_CAN_YE_SLIP SL1
               WHERE SL1.COMPANY       = SL.COMPANY
                 AND SL1.EMPLID        = SL.EMPLID
                 AND SL1.CALENDAR_YEAR = SL.CALENDAR_YEAR
#ifdef MVS
  \$seq_number2\
#else
  [$seq_number2]
#endif
#ifdef MVS
  \$ye_slip_process2\
#else
  [$ye_slip_process2]
#endif
ORDER BY SL.REPORTING_ID ASC

end-SELECT

end-procedure


begin-procedure Convert-Parameters

  move $RC_CAN_YE.RL1_File_Proc_Type     to $Proc_Type

  if &TX.Balance_Year <> #saveAsOfYear and &TX.Balance_Year <> #AsOfYear
     display ' '
     display 'Reporting Year = ' noline
     display &TX.Balance_Year noline
     display '.  An invalid file may be produced as it may not match RQ''s current schema for file validation.'
  end-if

  evaluate $Proc_Type
  when = 'A'
    let $ye_slip_process = ' AND S.YE_SLIP_PROCESS = ''A'' '
    let $ye_slip_process2 = ' AND SL.YE_SLIP_PROCESS = ''A'' '
    let $seq_number      = ')'
    let $seq_number2     = ')'
    let $TypeData        = 'A'
    break
  when = 'C'
    let $ye_slip_process = ' AND S.YE_SLIP_PROCESS = ''C'' '
    let $ye_slip_process2 = ' AND SL.YE_SLIP_PROCESS = ''C'' '
    let $seq_number      = ')'
    let $seq_number2     = ')'
    let $TypeData        = 'D'
    break
  when = 'O'
    let $ye_slip_process = ' AND S.YE_SLIP_PROCESS = ''O'' '
    let $ye_slip_process2 = ' AND SL.YE_SLIP_PROCESS = ''O'' '
    let $seq_number      = ' AND S1.YE_SLIP_PROCESS = S.YE_SLIP_PROCESS) '
    let $seq_number2     = ' AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    let $TypeData        = 'R'
    break
  end-evaluate

  if $Proc_Type = 'A' or $Proc_Type = 'C'
    let $Proc_Amend_Cancel = 'Y'
  else
    let $StatusOpen = 'Y'
  end-if

end-procedure


begin-procedure Check-Postal-Code

  find ' ' in $PostalCd 0 #space_loc
  if #space_loc > 0 and #space_loc < 5
     let $Postal1 = substr($PostalCd, 1, #space_loc)
     let #start = #space_loc + 2
     let $Postal2 = substr($PostalCd, #start, 3)
     let $PostalCd = $Postal1 || $Postal2
  end-if

end-procedure

begin-procedure Check-Zip-Code

  find '-' in $PostalCd 0 #dash_loc
  if #dash_loc  > 0
     let $Zip1 = substr($PostalCd, 1, #dash_loc)
     let #start = #dash_loc + 2
     let $Zip2 = substr($PostalCd, #start, 1)
     let $ZipCode = $Zip1 || $Zip2
  else
     let $ZipCode = $PostalCd
  end-if

end-procedure
begin-procedure Check-Status

  move 'N' to $StatusOpen

begin-SELECT
CS.EMPLID

  move 'Y' to $StatusOpen

FROM PS_CAN_AMEND_RL1_S CS
WHERE CS.COMPANY         = &S.COMPANY
  AND CS.EMPLID          = &S.EMPLID
  AND CS.CALENDAR_YEAR   = &S.CALENDAR_YEAR
  AND CS.SEQUENCE_NUMBER = &S.SEQUENCE_NUMBER
  AND CS.WAGE_LOSS_PLAN  = &S.WAGE_LOSS_PLAN
  AND CS.PROVINCE        = &S.PROVINCE
  AND CS.CAN_YE_SLIP_SEQ = &S.CAN_YE_SLIP_SEQ
  AND CS.AMEND_STATUS    = 'O'

end-SELECT

end-procedure


begin-procedure Error-Report

  let $EmployeeId = rtrim(&E.Emplid, ' ')
  print $CTX910RM_negative_value_fnd           (+2,1)
  print $EmployeeId                            (0,+1)
  print $CTX910RM_no_rl1_rec_created           (0,+1)

  let $Error-Report = 'Y'
end-procedure


begin-procedure Rotate-Name-for-Mag-Media
  move '' to $Suffix
  move 'N' to $SuffixFound

  let $SuffixString =
    'JR.,JR,SR.,SR,III,II,I,IV,MD,M.D.,CPA,C.P.A.,ESQ.,ESQ,' ||
    '2ND.,2ND,SECOND,3RD.,3RD,THIRD,4TH.,4TH,FOURTH'

  let $Name = rtrim($Name,' ')
  find ',' in $Name 0 #locn
  let $LastName = SUBSTR($Name,1,#locn + 1)
  find ' ' in $LastName 0 #locnblank
  if #locnblank <> -1
    let #i = 1
    while INSTR($SuffixString,',',#i) > 0
      let #j = INSTR($SuffixString,',',#i)
      let $Suffix = SUBSTR($SuffixString,#i,#j - #i)

      let #locnsuffix = INSTR($LastName, $Suffix || ',', 1)
      if #locnsuffix > 0
        let $LastName = SUBSTR($LastName,1,#locnsuffix - 2)
        move 'Y' to $SuffixFound
      end-if
  let #i = #j + 1
      if $SuffixFound = 'Y'
        break
      end-if
    end-while
  end-if

  add 1 to #locn
  extract $FirstName from $Name #locn 40  !40 is the maximum length of Name

  if $Remove_Blanks_From_Surname = 'Y'
    while INSTR($LastName,' ',1)
      let #locnblank = INSTR($LastName,' ',1)
      let $LastName = SUBSTR($LastName,1,#locnblank - 1)   ||
                      SUBSTR($LastName,#locnblank + 1,40)
    end-while
    while INSTR($LastName,'-',1)
      let #locndash = INSTR($LastName,'-',1)
      let $LastName = SUBSTR($LastName,1,#locndash - 1)   ||
                      SUBSTR($LastName,#locndash + 1,40)
    end-while
    while INSTR($LastName,'.',1)
      let #locnper = INSTR($LastName,'.',1)
      let $LastName = SUBSTR($LastName,1,#locnper - 1)   ||
                      SUBSTR($LastName,#locnper + 1,40)
    end-while
    while INSTR($LastName,'''',1)
      let #locnhyphen = INSTR($LastName,'''',1)
      let $LastName = SUBSTR($LastName,1,#locnhyphen - 1)   ||
                      SUBSTR($LastName,#locnhyphen + 1,40)
    end-while
  end-if

  if $SuffixFound <> 'Y'

   let $Name = SUBSTR($LastName,1,LENGTH($LastName) - 1) || '  ' || $FirstName
  else
     let $Name = $LastName || '  ' || $FirstName
 end-if
end-procedure


begin-procedure Rotate-Name
  move '' to $Suffix
  move 'N' to $SuffixFound

  let $SuffixString =
    'JR.,JR,SR.,SR,III,II,I,IV,MD,M.D.,CPA,C.P.A.,ESQ.,ESQ,' ||
    '2ND.,2ND,SECOND,3RD.,3RD,THIRD,4TH.,4TH,FOURTH,PHD,PHD.,P.H.D.'

  let $Name = rtrim($Name,' ')
  let $Sufsw = 'N'
  Unstring $Name by ' ' into $LastN $MidI $FirstN $Suf1 $Suf2
  let $CommaFound = 'N'
  let #k = 1
  while INSTR($MidI,',',#k) > 0
    let #l = INSTR($MidI,',',#k)
    move 'Y' to $CommaFound
    let #k = #l + 1
  end-while

  if $CommaFound = 'Y'
    Unstring $Name by ' ' into $LastN $FirstN $Suf1 $Suf2
  end-if

  if $Suf2 <> ''
     let $Suftest = $Suf2
     let $Sufsw = 'Y'
     do Test-Suffix
     let $Suf2 = $Suftest
  end-if

  if $Suf1 <> '' and $Sufsw = 'N'
     let $Suftest = $Suf1
     let $Sufsw = 'Y'
     do Test-Suffix
     let $Suf1 = $Suftest
  end-if

  if $LastN <> '' and $Sufsw = 'N'
     let $Suftest = $LastN
     let $Sufsw = 'Y'
     do Test-Suffix
     let $LastN = $Suftest
  end-if

  String $LastN $FirstN  by '  ' into $Name
end-procedure

begin-procedure Test-Suffix
  let #i = 1
  while INSTR($SuffixString,',',#i) > 0
    let #j = INSTR($SuffixString,',',#i)
    let $Suffix = SUBSTR($SuffixString,#i,#j - #i)
    let #locnsuffix = INSTR($SufTest, $Suffix, 1)

    if #locnsuffix > 0
      if $SufTest = $Suffix
         move ' ' to $SufTest
         move 'Y' to $SuffixFound
      end-if
    end-if

    let #i = #j + 1
    if $SuffixFound = 'Y'
       break
    end-if
  end-while
end-procedure

begin-procedure Reset-Flag

  move ' '         to $Code

end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'  !Get-Canadian-Year-End Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the Report language
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#endif

