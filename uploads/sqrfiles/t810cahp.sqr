!***********************************************************************
!  TAX810CAHP:  Qtrly Wage List - CALIFORNIA                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-2002 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  03/06/2013 RSI-HCM101552  v1.0                                      *
!  Descr: Program revisions for XML file output                        *
!                                                                      *
!  04/26/2013 RSI-HCM103381  V1.1                                      *
!  Descr: Additional program revisions for XML file output             *
!                                                                      *
!  05/23/2013 RSI-HCM103397  V1.2                                      *
!  Descr: Correct first name and last name field length issue          *
!         - Add show message on the log file if first and last name    *
!           exceeds 16 and 30 characters                               *
!         - Read company from run control parameters                   *
!                                                                      *
!  09/27/2013 RSI-HCM103464  V2.0                                      *
!  Descr: Show actual filename in log and output file                  *
!                                                                      *
!  01/08/2014 RSI-HCM103869  V3.0                                      *
!  Descr: Define filename array as variable                            * 
!                                                                      *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization
#include 'usarpt.sqc'   ! NID_COUNTRY defined
#include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver       '3.0'
  #Define Max_Rows       500000
  #Define Max_Files      20  
  #Define READABLE_XML   !formatted with tabs ($XML_Tab)
  !#Define DebugD         !Show Processing Data
  #Define TagBeg         '<'
  #Define TagEnd         '>'
  #Define EndChr         '/'
  #Define FileNum        20
  #Define Dyn-S          [
  #Define Dyn-E          ]

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {RSI_APP_REL} < 8.81
      #Define FILESUFFIX       .XML
  #Else
      #Define IMPORTSUFFIX     .XML
  #EndIf
  #Define DefFileNames_Array Y
End-Setup

!***********************************************************************
! Procedure Begin-Report
!***********************************************************************
Begin-Report

  do Init-Report
  If $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  Else
     do Company-Run-Control
  End-If  

  If $RecordWritten = 'Y'
     Show '-------------------------------------------------------------------------------------'
     show ''
     show 'Upon successful conclusion of this program, '
     show 'one or more files will have been created, using the '
     show 'location and naming convention "<Company>_TAX810CA.XML" as follows:'
     show ''     
      let #I = 0
     While #I < #II
      GET $FileNames
      FROM FileNames_Array(#I)
      add 1 to #I
      Show $FileNames
     End-While
    let #II = 0
    Clear-Array NAME=FileNames_Array
     show ''
     show 'Each file created, starting with company "XXX"'         
     Show 'contains 275-character records in the XML format required'
     Show 'for submission of quarterly wages to the California'
     Show 'Employment Development Department.'
     Show ''
     Show 'Follow the instructions from the department for preparing and'
     Show 'submitting the file electronically.'
     Show ''
     Show '-------------------------------------------------------------------------------------'
  Else
     do Print-Summary-Data('NoData')
  End-If

  do Get-Current-DateTime
  Show ' '
  Show 'Report Ended at : ' $SysDateTime
  Show '**************************************************'

  do Stdapi-Term

End-Report

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-EandG


  move 'T810CAHP' to $ReportID
  move 'California Quarterly UI Wage Report' to $ReportTitle

  Show 'T810CAHP.SQR - Version '  {Prgm_Ver}
  Show '**************************************************'
  Show $ReportTitle
  Show ''
  Show 'Report Started at : ' $SysDateTime
  Show ''


  do Initialization

End-Procedure Init-Report

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization
  move 'CA' to $State

  #IfDef DebugD
     move {RSI_APP_REL} to $AppRel '9.9B'
     Show 'RSI Application Release '  $AppRel
     Show ''
  #EndIf

  do Get-Tax-Reporting-Run-Controls
  move &TX.BALANCE_YEAR to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move &TX.COMPANY to $Company

  If rtrim($Company,' ') = ''
     Show '*** Company field blank on Tax Run Control Record ***'
     Show '***************** Processing STOPped ****************'
     STOP
  End-If

  If isblank($PeriodBegDate)
     move &TX.BALANCE_YEAR to $RptYear 9999
     let #QtrBegMonth = #QtrEndMonth - 2
     let $PeriodBegDate = $RptYear || '-' || edit(#QtrBegMonth,'09') || '-01'
     move '1' to $Year4
     move '-' to $DDelimiter
     do Format-DateTime($PeriodBegDate, $PeriodBegDate, {DEFYMD}, '', 'native')
  End-If

  Show ' '
  Show 'Processing balances for '   noline
  Show $RptQtrYr

  move &TX.BALANCE_YEAR  to $Balance_Year     0999
  let $ReportingPeriod = $QtrEndMonth || $Balance_Year
  move &TX.BALANCE_QTR   to $RptQtr

  let $XML_Tab = chr(09)

  #IfDef READABLE_XML
     let $Tab0    = ''
     let $Tab1    = $XML_Tab
     let $Tab2    = $XML_Tab || $XML_Tab
     let $Tab3    = $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab4    = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab5    = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab6    = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
  #EndIf

  do Setup-SQL
  do Setup-Array
  do Delete-Work-File

End-Procedure Initialization

!***********************************************************************
! Procedure Open-XML-File
!***********************************************************************
Begin-Procedure Open-XML-File
  #IfDef HAS
     let $FileID = $g_file_path_out || $Company ||'_TAX810CA' || '{FILESUFFIX}'
  #Else
     #If {RSI_APP_REL} < 8.81
         let $FileID = '{FILEPREFIX}'  || $Company ||'_TAX810CA' || '{FILESUFFIX}'
     #Else
         let $FileID = '{IMPORTPREFIX}' || $Company ||'_TAX810CA' || '{IMPORTSUFFIX}'
     #EndIf
  #EndIf
  open $FileID as {FileNum} for-writing record=275:vary   Status=#FileStatus

  If #FileStatus <> 0
     Show 'Error Opening Output XML File.  ' $FileID
  Else
    #IfDef DebugD
       Show $FileID ' output file has been opened for writing.'
       Show ''
    #EndIf
     let $FileOpen = 'Y'
  End-If
  
  If #II < {Max_Files}
     put $FileID into FileNames_Array(#II)
     add 1 to #II
  Else
     Show 'Cache capacity exceeded for FileNames Data, check Max_Rows'
     STOP
  End-If
  
End-Procedure Open-XML-File

!***********************************************************************
! Procedure Setup-SQL
!***********************************************************************
Begin-Procedure Setup-SQL

  #IfDef RSI_TOOLS_7.5
       let $Taxbalance_Person  = ' PS_TAX_BALANCE RC, PS_PERSONAL_DATA RD'
       let $And_Emplid         = ' AND RD.EMPLID        = RC.EMPLID'
       let $And_PerStatus      = ' AND RD.PER_STATUS    = ''E'''
       let $Taxbalance_Person2 = ' PS_R_TAX810CA C, PS_PERSONAL_DATA D, PS_PERS_NID D1'
  #Else
       let $Taxbalance_Person  = ' PS_TAX_BALANCE RC'
       let $And_Emplid         = ''
       let $And_PerStatus      = ''
       let $Taxbalance_Person2 = ' PS_R_TAX810CA C, PS_PERSON_NAME D, PS_PERS_NID D1'
  #EndIf

  #IfDef DebugD
     Show '    $Taxbalance_Person:        ' $Taxbalance_Person
     Show '    $And_Emplid                ' $And_Emplid
     Show '    $And_PerStatus:            ' $And_PerStatus
     Show '    $Taxbalance_Person2:       ' $Taxbalance_Person2
  #EndIf

End-Procedure Setup-SQL

!***********************************************************************
! Procedure Setup-Array
!***********************************************************************
Begin-Procedure Setup-Array

  Create-Array
    Name=EMPLOYEES
    Size={Max_Rows}
    Field=SSN:char
    Field=FIRSTNAME:char
    Field=MIDDLENAME:char
    Field=LASTNAME:char
    Field=TOTALWAGES:char
    Field=TAXABLEWAGES:char
    Field=TAXWITHHELD:char
    Field=WAGEPLAN:char
    
  Create-array 
    NAME=FileNames_Array 
    size= {Max_Files}
    Field=FileNames:Char    

End-Procedure Setup-Array

!***********************************************************************
! Procedure Process-Main
!***********************************************************************
Begin-Procedure Process-Main

  If rtrim($Company,' ') = ''
     Show '*** Company field blank on Tax Run Control Record ***'
     Show '***************** Processing STOPped ****************'
     STOP
  End-If
  do Get-Company-Data

BEGIN-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
END-SELECT

BEGIN-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAX_REPORT_TYPE

  move ''         to $priorEmplID
  move 'N'        to $Process_Company
  do Read-Employee-Data

  If $Process_Company = 'Y'
     do Generate-File-Data
     do Delete-Work-File
  End-If

FROM PS_COMPANY_TBL A
WHERE A.EFF_STATUS       = 'A'
  AND A.TAX_REPORT_TYPE IN ('2', 'R')
  AND A.EFFDT            = (SELECT MAX(A1.EFFDT)
                              FROM PS_COMPANY_TBL A1
                             WHERE A1.COMPANY = A.COMPANY
                               AND A1.EFFDT  <= $AsOfDate)
  AND A.COMPANY = $Company                               
ORDER BY A.COMPANY
END-SELECT

End-Procedure Process-Main

!***********************************************************************
! Procedure Read-Employee-Data
!***********************************************************************
Begin-Procedure Read-Employee-Data

BEGIN-SELECT
RC.COMPANY   () on-Break level=1 print=never before=Get-Company-Info
RC.TAX_CLASS
RC.EMPLID    () on-Break level=2 print=never before=Reset-Dis-Ind
                                             after=Process-SWT
RC.STATE
RC.LOCALITY
RC.TXGRS_QTD       &RC.TXGRS_QTD=number
RC.NLGRS_QTD       &RC.NLGRS_QTD=number
RC.TAX_QTD         &RC.TAX_QTD=number

  move 'Y' to $Process_Company
  move &RC.COMPANY   to $Company
  move &RC.TAX_CLASS to $Tax_Class
  move &RC.STATE     to $State
  move &RC.EMPLID    to $Emplid
  move &RC.LOCALITY  to $Locality
  
  If $Sep_Tax_Rpt = 'N'
     If &RC.TAX_CLASS = 'U'
        move $Sel_Employer_ID to $Employer_ID
        move &RC.TXGRS_QTD    to #TxGrs_QTD
        move &RC.NLGRS_QTD    to #NlGrs_QTD
        move &RC.TAX_QTD      to #Tax_QTD
        do Insert-Work-Record
     Else
        If &RC.TAX_CLASS = 'H' or &RC.TAX_CLASS = 'A'
           add &RC.TXGRS_QTD to #SWT_TxGrs_QTD
           add &RC.NLGRS_QTD to #SWT_NlGrs_QTD
           add &RC.TAX_QTD   to #SWT_Tax_QTD
        End-If
     End-If
  Else
     If &RC.TAX_CLASS = 'U'
        move &EMPLOYER_ID_SUT    to $Employer_ID
        move 0                   to #TxGrs_QTD
        move &RC.NLGRS_QTD       to #NlGrs_QTD
        move 0                   to #Tax_QTD
        do Insert-Work-Record
     Else

        If ((&RC.TAX_CLASS = 'D' and $Dis_Found = 'N') or
            (&RC.TAX_CLASS = 'E' and $Dis_Found = 'N'))
           move &EMPLOYER_ID_DIS    to $Employer_ID
           move 0                   to #TxGrs_QTD
           move &RC.NLGRS_QTD       to #NlGrs_QTD
           move 0                   to #Tax_QTD
           let $Dis_Found = 'Y'
           let $Tax_Class = 'E'
           do Insert-Work-Record
        Else

           If &RC.TAX_CLASS = 'H' or
              &RC.TAX_CLASS = 'A'
              add &RC.TXGRS_QTD     to #SWT_TxGrs_QTD
              add &RC.TAX_QTD       to #SWT_Tax_QTD
           Else
              move &EMPLOYER_ID_SWT to $Employer_ID
              move &RC.TXGRS_QTD    to #TxGrs_QTD
              move 0                to #NlGrs_QTD
              move &RC.TAX_QTD      to #Tax_QTD
              do Insert-Work-Record
           End-If
        End-If
     End-If
  End-If

FROM {Dyn-S}$Taxbalance_Person{Dyn-E}
WHERE RC.COMPANY        = &A.COMPANY
  {Dyn-S}$And_Emplid{Dyn-E}
  {Dyn-S}$And_PerStatus{Dyn-E}
  AND RC.TAX_CLASS     IN ('H','A','U','E','D')
  AND RC.BALANCE_ID     = $Calendar_Year_Id
  AND RC.BALANCE_YEAR   = &TX.BALANCE_YEAR
  AND RC.BALANCE_QTR    = &TX.BALANCE_QTR
  AND RC.STATE          = 'CA'
  AND RC.LOCALITY       = ' '
  AND RC.BALANCE_PERIOD = (SELECT MAX(RC1.BALANCE_PERIOD)
                           FROM PS_TAX_BALANCE RC1
                            WHERE RC1.EMPLID       = RC.EMPLID
                              AND RC1.COMPANY      = RC.COMPANY
                              AND RC1.BALANCE_ID   = RC.BALANCE_ID
                              AND RC1.BALANCE_YEAR = RC.BALANCE_YEAR
                              AND RC1.BALANCE_QTR  = RC.BALANCE_QTR
                              AND RC1.STATE        = RC.STATE
                              AND RC1.LOCALITY     = ' '
                              AND RC1.TAX_CLASS    = RC.TAX_CLASS)
  AND ((RC.NLGRS_QTD <> 0
        AND &A.TAX_REPORT_TYPE = '2')
       OR (RC.TAX_QTD <> 0)
       OR (RC.TXGRS_QTD <> 0
           AND &A.TAX_REPORT_TYPE = '2'))
END-SELECT

End-Procedure Read-Employee-Data

!***********************************************************************
! Procedure Generate-File-Data
!***********************************************************************
Begin-Procedure Generate-File-Data

BEGIN-SELECT
C.COMPANY       () on-Break level=1 print=never Before=Before-Company
                                                After=After-Company
C.EMPLOYER_ID   () on-Break level=2 print=never Before=Employer-ID-Chg
                                                After=After-Employer-ID
D1.NATIONAL_ID  () on-Break level=3 print=never Before=Before-SSN
C.EMPLID        () on-Break level=4 print=never Before=Before-Emplid
                                                After=After-Emplid
C.TAX_CLASS     () on-Break level=5 print=never Before=Before-Tax-Class
C.STATE
C.LOCALITY
C.TXGRS_QTD     &C.TXGRS_QTD=number
C.NLGRS_QTD     &C.NLGRS_QTD=number
C.TAX_QTD       &C.TAX_QTD=number
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  move &C.EMPLOYER_ID  to $Employer_ID
  move &C.TAX_CLASS    to $Tax_Class
  move &C.TAX_QTD to #Tax_QTD
  
  If &C.TAX_CLASS = 'H' and &C.TAX_QTD < 0
     move 'CA QTD Tax Withheld Negative' to $ErMsg
     move &C.TAX_QTD to #Neg_Tax_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess1
  End-If

  If &C.TAX_CLASS = 'H' and (&C.TAX_QTD = 0 or &C.TAX_QTD > 0)
     move '' to $DoNotProcess1
  End-If

  If &C.TAX_CLASS = 'H' and &C.TXGRS_QTD < 0
     move 'CA QTD PIT Wages Negative' to $ErMsg
     move &C.TXGRS_QTD to #Neg_TxGrs_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess2
  End-If

  If &C.TAX_CLASS = 'H' and (&C.TXGRS_QTD = 0 or &C.TXGRS_QTD > 0)
     move '' to $DoNotProcess2
  End-If

  If &C.TAX_CLASS = 'U' and &C.NLGRS_QTD < 0
     move 'CA QTD SUI Wages Negative' to $ErMsg
     move &C.NLGRS_QTD to #Neg_NlGrs_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess3
  End-If

  If &C.TAX_CLASS = 'U' and (&C.NLGRS_QTD = 0 or &C.NLGRS_QTD > 0)
     move '' to $DoNotProcess3
  End-If

  If &C.TAX_CLASS = 'E' and &C.NLGRS_QTD < 0
     move 'CA QTD DIS Wages Negative' to $ErMsg
     move &C.NLGRS_QTD to #Neg_Dis_NlGrs_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess4
  End-If

  If &C.TAX_CLASS = 'E' and (&C.NLGRS_QTD = 0 or &C.NLGRS_QTD > 0)
     move '' to $DoNotProcess4
  End-If

FROM {Dyn-S}$Taxbalance_Person2{Dyn-E}
WHERE C.COMPANY           = &A.COMPANY
  AND (C.NLGRS_QTD    <> 0
       or C.TAX_QTD   <> 0
       or C.TXGRS_QTD <> 0)
  AND D.EMPLID            = C.EMPLID
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY C.EMPLOYER_ID, D1.NATIONAL_ID, C.EMPLID, C.TAX_CLASS
END-SELECT

End-Procedure Generate-File-Data

!***********************************************************************
! Procedure Before-SSN
!***********************************************************************
Begin-Procedure Before-SSN

  move &D1.NATIONAL_ID to $S123 xxx

  If $S123 = &TEMP_SSN_MASK or rtrim(&D1.NATIONAL_ID, ' ') = ''
     move 'I' to $National_Id
  Else
     move &D1.NATIONAL_ID to $National_Id
  End-If

End-Procedure

!***********************************************************************
! Procedure Before-Emplid
!***********************************************************************
Begin-Procedure Before-Emplid
  move &C.EMPLID to $ErrEmplid
  let $EmplFirstName = ltrim(rtrim(&D.FIRST_NAME, ' '),' ')
  If length($EmplFirstName) > 16
    let $FirstName = substr($EmplFirstName,1,16)
    let $Message = 'Emplid ' || rtrim($ErrEmplid,' ') || ' First name length was greater than the allowed 16 characters 
        by the State of California. ' || $EmplFirstName  || ' was reported as ' || $FirstName  || '.' 
    show $Message
  else
    let $FirstName = ltrim(rtrim(&D.FIRST_NAME, ' '),' ')
  end-if

  let $LastName = ltrim(rtrim(&D.LAST_NAME, ' '),' ')
  
  let $MiddleName = substr(&D.MIDDLE_NAME,1,1)

  do Get-Wage-Plan-Cd

  move 0  to #NlGrs_QTD
  move 0  to #TxGrs_QTD
  move 0  to #STW_QTD

  move '' to $DoNotProcess1
  move '' to $DoNotProcess2
  move '' to $DoNotProcess3
  move '' to $DoNotProcess4

End-Procedure Before-Emplid

!***********************************************************************
! Procedure After-Emplid
!***********************************************************************
Begin-Procedure After-Emplid

  If &A.TAX_REPORT_TYPE = 'R'
     move 0 to #NlGrs_QTD
     move 0 to #TxGrs_QTD
     move 0 to #Temp_Co_NlGrs_QTD
     move 0 to #Temp_Co_NlGrs_TRec
     move 0 to #Temp_Co_TxGrs_QTD
     move 0 to #Temp_Co_TxGrs_TRec
     move 0 to #Temp_Co_Dis_NlGrs_QTD
     move 0 to #Temp_Co_Dis_NlGrs_TRec
  End-If

  If ($DoNotProcess1 = '' and $DoNotProcess2 = '' and
      $DoNotProcess3 = '' and $DoNotProcess4 = '')

     move #NlGrs_QTD to $NlGrs_QTD  899999999999.99
     move #TxGrs_QTD to $TxGrs_QTD  899999999999.99
     move #Stw_QTD to $Stw_QTD      899999999999.99

     do Save-Employee-Record
     add 1 to #Count_ID

     add #Temp_Co_Dis_NlGrs_QTD  to #ID_Dis_NlGrs_QTD
     add #Temp_Co_Dis_NlGrs_TRec to #ID_Dis_NlGrs_TRec
     add #Temp_Co_NlGrs_QTD      to #ID_NlGrs_QTD
     add #Temp_Co_NlGrs_TRec     to #ID_NlGrs_TRec
     add #Temp_Co_TxGrs_QTD      to #ID_TxGrs_QTD
     add #Temp_Co_TxGrs_TRec     to #ID_TxGrs_TRec
     add #Temp_Co_STW_QTD        to #ID_Stw_QTD
     add #Temp_Co_STW_TRec       to #ID_Stw_TRec
  End-If

    move 0 to #Temp_Co_Dis_NlGrs_QTD
    move 0 to #Temp_Co_Dis_NlGrs_TRec
    move 0 to #Temp_Co_NlGrs_QTD
    move 0 to #Temp_Co_NlGrs_TRec
    move 0 to #Temp_Co_TxGrs_QTD
    move 0 to #Temp_Co_TxGrs_TRec
    move 0 to #Temp_Co_STW_QTD
    move 0 to #Temp_Co_STW_TRec

End-Procedure After-Emplid

!***********************************************************************
! Procedure Before-Tax-Class
!***********************************************************************
Begin-Procedure Before-Tax-Class

  If &C.TAX_CLASS = 'E' and &C.NLGRS_QTD > 0
     move &C.NLGRS_QTD to #NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_Dis_NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_Dis_NlGrs_TRec
  End-If

  If &C.TAX_CLASS = 'U' and &C.NLGRS_QTD > 0
     move &C.NLGRS_QTD to #NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_NlGrs_TRec
  End-If

  If &C.TAX_CLASS = 'H' and &C.TAX_QTD > 0
     move &C.TAX_QTD to #Stw_QTD
     add #Stw_QTD to #Temp_Co_STW_QTD
     add #Stw_QTD to #Temp_Co_STW_TRec
  End-If

  If &C.TAX_CLASS = 'H' and &C.TXGRS_QTD > 0
     move &C.TXGRS_QTD to #TxGrs_QTD
     add #TxGrs_QTD to #Temp_Co_TxGrs_QTD
     add #TxGrs_QTD to #Temp_Co_TxGrs_TRec
  End-If

End-Procedure Before-Tax-Class

!***********************************************************************
! Procedure Get-Wage-Plan-Cd
!***********************************************************************
Begin-Procedure Get-Wage-Plan-Cd

BEGIN-SELECT loops=1
S.WAGE_PLAN_CD
S.EFFDT
FROM PS_STATE_TAX_DATA S
WHERE S.EMPLID  = &C.EMPLID
  AND S.COMPANY = &A.COMPANY
  AND S.STATE   = 'CA'
  AND S.EFFDT  <= $PeriodEndDate
ORDER BY S.EFFDT DESC
END-SELECT

  If $Sep_Tax_Rpt = 'Y'
     If &C.TAX_CLASS = 'E'
        let $Wage_Plan_Cd = 'J'
     Else
        If &C.TAX_CLASS = 'U'
           let $Wage_Plan_Cd = 'A'
        Else
           let $Wage_Plan_Cd = 'P'
        End-If
     End-If
  Else
     move &S.WAGE_PLAN_CD to $Wage_Plan_Cd
  End-If

End-Procedure Get-Wage-Plan-Cd

!***********************************************************************
! Procedure Get-Company-Info
!***********************************************************************
Begin-Procedure Get-Company-Info

  do Get-Company-Data
  move 'CA' to $State
  let $CT.Fein = edit(&CT.FEDERAL_EIN, '999999999')
  do Get-State-Tax-Data

  If $Sep_Tax_Rpt = 'N'
     If rtrim(&EMPLOYER_ID_SUT,' ') = ''
        Show '*** State Unemployment ID missing in Company State Tax Table ***'
        Show '*** Company: '   noline
        Show $Company
        Show '*** State  : '   noline
        Show $State
        Show '*********************** Processing STOPped *********************'
        STOP
     End-If
     let $Sel_Employer_ID = &EMPLOYER_ID_SUT
  Else
     let $Tmp_Employer_ID_SUT = rtrim(&EMPLOYER_ID_SUT, ' ')
     let $Tmp_Employer_ID_SWT = rtrim(&EMPLOYER_ID_SWT, ' ')
     let $Tmp_Employer_ID_DIS = rtrim(&EMPLOYER_ID_DIS, ' ')

     If $Tmp_Employer_ID_SUT = ''
        Show '*** Missing Employer ID (SUT) ***'
        Show '****** Processing STOPped *******'
        STOP
     End-If

     If $Tmp_Employer_ID_SWT = ''
        Show '*** Missing Employer ID (SWT) ***'
        Show '****** Processing STOPped *******'
        STOP
     End-If

     If $Tmp_Employer_ID_DIS = ''
        Show '*** Missing Employer ID (DIS) ***'
        Show '****** Processing STOPped *******'
        STOP
     End-If

     If $Tmp_Employer_ID_SUT = $Tmp_Employer_ID_SWT or
        $Tmp_Employer_ID_SUT = $Tmp_Employer_ID_DIS or
        $Tmp_Employer_ID_SWT = $Tmp_Employer_ID_DIS
        Show '*** Duplicate Employer ID with Separate Tax Report Opt ***'
        Show '******************* Processing STOPped *******************'
        STOP
     End-If
  End-If

End-Procedure Get-Company-Info

!***********************************************************************
! Procedure Reset-Dis-Ind
!***********************************************************************
Begin-Procedure Reset-Dis-Ind

  move 0 to #SWT_TxGrs_QTD
  move 0 to #SWT_NlGrs_QTD
  move 0 to #SWT_Tax_QTD

  let $Dis_Found = 'N'

End-Procedure Reset-Dis-Ind

!***********************************************************************
! Procedure Process-SWT
!***********************************************************************
Begin-Procedure Process-SWT

  If #SWT_TxGrs_QTD <> 0 or #SWT_NlGrs_QTD <> 0 or #SWT_Tax_QTD <> 0
     If $Sep_Tax_Rpt = 'N'
        move $Sel_Employer_ID to $Employer_ID
     Else
        move &EMPLOYER_ID_SWT to $Employer_ID
     End-If

     move 'H'            to $Tax_Class
     move #Swt_Txgrs_QTD to #TxGrs_QTD
     move #Swt_Nlgrs_QTD to #NlGrs_QTD
     move #Swt_Tax_QTD   to #Tax_QTD
     do Insert-Work-Record
  End-If

End-Procedure Process-SWT

!***********************************************************************
! Procedure Employer-ID-Chg
!***********************************************************************
Begin-Procedure Employer-ID-Chg

  let $StateEIN = rtrim(&C.EMPLOYER_ID,' ')
  let $StateEIN = translate($StateEIN,'-','')
  let $StateEIN = translate($StateEIN,' ','')
  let $StateEIN = lpad($StateEIN,8,'0')

 If $StateEIN <> $PrevStateEIN 
  If $FileOpen <> 'Y'
     move $StateEIN to $PrevStateEIN   
     do Open-XML-File
     do Write-File-ReturnData
  End-If
 End-if          

  do Format-Employer-Record
  do Write-Employer-ReturnHeader

End-Procedure Employer-ID-Chg

!***********************************************************************
! Procedure After-Employer-ID
!***********************************************************************
Begin-Procedure After-Employer-ID

  If #Count_ID > 0
     If $Sep_Tax_Rpt = 'N' or $Tax_Class = 'U'
        let $Prt_Cnt_Opt = 'Y'
     Else
        let $Prt_Cnt_Opt = 'N'
     End-If

     do Print-Summary-Data('AcctTotal')
     do Format-Number(#ID_STW_TRec,  $ID_STW_TRec,  '899999999999.99')
     add #ID_Dis_NlGrs_TRec to #ID_NlGrs_TRec
     do Format-Number(#ID_NlGrs_TRec,  $ID_NlGrs_TRec,  '899999999999.99')
     do Format-Number(#ID_TxGrs_TRec,  $ID_TxGrs_TRec,  '899999999999.99')

     move 0 to $Month1CountDisp 8999999
     move 0 to $Month2CountDisp 8999999
     move 0 to $Month3CountDisp 8999999

     If $Sep_Tax_Rpt = 'N' or $Tax_Class = 'U'
        move $Month1Count  to $Month1CountDisp
        move $Month2Count  to $Month2CountDisp
        move $Month3Count  to $Month3CountDisp
     End-If

     move #Count_ID   to $Count_S  '8999999'
     do Write-Employee-StateReturn

     add #ID_Stw_QTD       to #Co_STW_QTD
     add #ID_Dis_NlGrs_QTD to #Co_Dis_NlGrs_QTD
     add #ID_NlGrs_QTD     to #Co_NlGrs_QTD
     add #ID_TxGrs_QTD     to #Co_TxGrs_QTD
     add #Count_ID to #Count_S

     new-page
     do Reset-Er-Total
  End-If

End-Procedure After-Employer-ID

!***********************************************************************
! Procedure Reset-Er-Total
!***********************************************************************
Begin-Procedure Reset-Er-Total

  move 0  to #ID_STW_QTD
  move 0  to #ID_Dis_NlGrs_QTD
  move 0  to #ID_NlGrs_QTD
  move 0  to #ID_TxGrs_QTD
  move 0  to #Count_ID
  move 0  to $CountID
  move '' to $ID_NlGrs_TRec
  move 0  to #ID_NlGrs_TRec
  move 0  to #ID_Dis_NlGrs_TRec
  move '' to $ID_TxGrs_TRec
  move 0  to #ID_TxGrs_TRec
  move '' to $ID_STW_TRec
  move 0  to #ID_STW_TRec
  move 0  to $Month1CountDisp 0999999
  move 0  to $Month2CountDisp 0999999
  move 0  to $Month3CountDisp 0999999

End-Procedure Reset-Er-Total

!***********************************************************************
! Procedure Before-Company
!***********************************************************************
Begin-Procedure Before-Company

  do Get-Company-Data
  move 'CA' to $State
  let $CT.Fein = edit(&CT.FEDERAL_EIN, '999999999')
  do Get-State-Tax-Data

End-Procedure Before-Company

!***********************************************************************
! Procedure After-Company
!***********************************************************************
Begin-Procedure After-Company

  If #Count_S > 0
     do Print-Summary-Data('CoAmt')

     add #Co_STW_QTD       to #Tot_STW_QTD
     add #Co_Dis_NlGrs_QTD to #Tot_Dis_NlGrs_QTD
     add #Co_NlGrs_QTD     to #Tot_NlGrs_QTD
     add #Co_TxGrs_QTD     to #Tot_TxGrs_QTD
     add #Count_S          to #Count_F
     add #Count_R          to #Count_R_Total

     move 0 to #Co_STW_QTD
     move 0 to #Co_Dis_NlGrs_QTD
     move 0 to #Co_NlGrs_QTD
     move 0 to #Co_TxGrs_QTD
     move 0 to #Count_S
     move 0 to #Count_R
     new-page
  End-If

  If $FileOpen = 'Y'
     do Write-XML-Line($Tab0, 'ReturnData', '', 'End')
     close {FileNum}
     let $FileOpen = 'N'
    End-If
  let $PrevStateEIN = ' '

End-Procedure

!***********************************************************************
! Procedure Save-Employee-Record
!***********************************************************************
Begin-Procedure Save-Employee-Record

  let $National_Id = substr($National_Id, 1, 9)

  If #EE < {Max_Rows}
     PUT  $National_Id
          $FirstName
          $MiddleName
          $LastName
          $NlGrs_QTD
          $TxGrs_QTD
          $STW_QTD
          $Wage_Plan_Cd
     INTO EMPLOYEES(#EE)
     add 1 to #EE
  Else
     Show 'Cache capacity exceeded for Employee Data, check Max_Rows'
     STOP
  End-If

  move 0   to #NlGrs_QTD
  move ' ' to $NlGrs_QTD
  move 0   to #TxGrs_QTD
  move ' ' to $TxGrs_QTD
  move 0   to #Stw_QTD
  move ' ' to $STW_QTD

End-Procedure Save-Employee-Record

!***********************************************************************
! Procedure Format-Employer-Record
!***********************************************************************
Begin-Procedure Format-Employer-Record

  do Get-Company-Phone

  move &A.DESCR    to $CompanyName
  move &A.ADDRESS1 to $CompanyAddr1
  move &A.CITY     to $CompanyCity
  move &A.STATE    to $StateCd

  let $Zip   = translate(&A.POSTAL,' -','')
  let $Phone = translate($Company_Phone,'@#$%^&*()_-+=[]\?/|<>:;., ','')

  do Format-DateTime($PeriodBegDate, $out, {DEFCMP},'','')
  let $xml_PeriodBegDate = edit($out, 'YYYY-MM-DD')
  do Format-DateTime($PeriodEndDate, $out, {DEFCMP},'','')
  let $xml_PeriodEndDate = edit($out, 'YYYY-MM-DD')

  do XML-Special-Chars ($Company, $XCompany)

  do XML-Special-Chars ($CompanyName, $XCompanyName)

  do XML-Special-Chars ($CompanyAddr1, $XCompanyAddr1)

  do XML-Special-Chars ($CompanyCity, $XCompanyCity)

  do XML-Special-Chars ($StateCd, $XCompanyState)

  do XML-Special-Chars ($Zip, $XCompanyZip)

  do XML-Special-Chars ($Phone, $XCompanyPhone)

End-Procedure Format-Employer-Record

!***********************************************************************
! Procedure Get-Company-Phone
!***********************************************************************
Begin-Procedure Get-Company-Phone

  let $Company_Phone = ''

BEGIN-SELECT
COMP_PHONE.PHONE

  let $Company_Phone = &COMP_PHONE.PHONE

FROM PS_COMP_PHONE_TBL COMP_PHONE
WHERE COMP_PHONE.COMPANY    = &A.COMPANY
  AND COMP_PHONE.PHONE_TYPE = 'MAIN'
  AND COMP_PHONE.EFFDT      = (SELECT MAX(CP1.EFFDT)
                                 FROM PS_COMP_PHONE_TBL CP1
                                WHERE CP1.COMPANY    = COMP_PHONE.COMPANY
                                  AND CP1.PHONE_TYPE = COMP_PHONE.PHONE_TYPE
                                  AND CP1.EFFDT     <= $AsOfDate)
END-SELECT

End-Procedure Get-Company-Phone

!***********************************************************************
! Procedure XML-Special-Chars  do XML-Special-Chars (FIELD, $Rtrn_Value)
!***********************************************************************
Begin-Procedure XML-Special-Chars ($Test_String, :$Return_Value)

  let $Before_String = $Test_String
  let $Test_String   = replace($Test_String, '&',  '&amp;')
  let $Test_String   = replace($Test_String, '"',  '&quot;')
  let $Test_String   = replace($Test_String, '<',  '&lt;')
  let $Test_String   = replace($Test_String, '>',  '&gt;')
  let $Test_String   = replace($Test_String, '''', '&apos;')

  #IfDef DebugD
     If $Before_String <> $Test_String
        Show 'XML-Special-Chars:  ' $Before_String ' changed to XML format ' $Test_String
     End-If
  #EndIf

  let $Return_Value = rtrim($Test_String,' ')

End-Procedure XML-Special-Chars

!***********************************************************************
! Procedure Write-File-ReturnData
!***********************************************************************
Begin-Procedure Write-File-ReturnData

  do Write-XML-Line($Tab0, '<?xml version="1.0" encoding="utf-8"?>'                            , '' , 'Write')
  do Write-XML-Line($Tab0, '<ReturnData documentCount="2"'                                     , '' , 'Write')
  do Write-XML-Line($Tab0, 'xsi:schemaLocation="http://www.irs.gov/efile ReturnDataState.xsd"' , '' , 'Write')
  do Write-XML-Line($Tab0, 'xmlns="http://www.irs.gov/efile"'                                  , '' , 'Write')
  do Write-XML-Line($Tab0, 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'            , '' , 'Write')

End-Procedure Write-File-ReturnData

!***********************************************************************
! Procedure Write-Employer-ReturnHeader
! Document 1 Employer data, for each company
!***********************************************************************
Begin-Procedure Write-Employer-ReturnHeader

  let $ContentLocation = 'DE9C' || datetostr(datenow(),'-MMDDYY-HHMISS-') || $XCompany
  let $ReturnHeader    = '<ReturnHeaderState documentId="A">'

  do Write-XML-Line($Tab1, 'ContentLocation'      , $ContentLocation       , 'Content')
  do Write-XML-Line($Tab1, $ReturnHeader          , ''                     , 'Write')
  do Write-XML-Line($Tab2, 'TaxPeriodBeginDate'   , $xml_PeriodBegDate     , 'Content')
  do Write-XML-Line($Tab2, 'TaxPeriodEndDate'     , $xml_PeriodEndDate     , 'Content')
  do Write-XML-Line($Tab2, 'ReturnQuarter'        , $RptQtr                , 'Content')
  do Write-XML-Line($Tab2, 'Taxyear'              , $Balance_Year          , 'Content')
  do Write-XML-Line($Tab2, 'ReturnType'           , 'StateCombined'        , 'Content')
  do Write-XML-Line($Tab2, 'Form'                 , 'DE9C'                 , 'Content')
  do Write-XML-Line($Tab2, 'FilingAction'         ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'Action'               , 'Original'             , 'Content')
  do Write-XML-Line($Tab2, 'FilingAction'         ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'TIN'                  ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'TypeTIN'              , 'FEIN'                 , 'Content')
  do Write-XML-Line($Tab3, 'TINTypeValue'         , $CT.Fein               , 'Content')
  do Write-XML-Line($Tab2, 'TIN'                  ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'StateEIN'             ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'TypeStateEIN'         , 'WithholdingAccountNo' , 'Content')
  do Write-XML-Line($Tab3, 'StateEINValue'        , $StateEIN              , 'Content')
  do Write-XML-Line($Tab2, 'StateEIN'             ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'StateCode'            , 'CA'                   , 'Content')
  do Write-XML-Line($Tab2, 'BusinessAddress'      ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'BusinessName'         , $XCompanyName          , 'Content')
  do Write-XML-Line($Tab3, 'AddressLine'          , $XCompanyAddr1         , 'Content')
  do Write-XML-Line($Tab3, 'City'                 , $XCompanyCity          , 'Content')
  do Write-XML-Line($Tab3, 'StateOrProvince'      , $XCompanyState         , 'Content')
  do Write-XML-Line($Tab3, 'ZipCode'              , $XCompanyZip           , 'Content')
  do Write-XML-Line($Tab3, 'PhoneNumber'          , $XCompanyPhone         , 'Content')
  do Write-XML-Line($Tab2, 'BusinessAddress'      ,  ''                    , 'End')
  do Write-XML-Line($Tab1, 'ReturnHeaderState'    ,  ''                    , 'End')

  move 'Y' to $RecordWritten

End-Procedure Write-Employer-ReturnHeader

!***********************************************************************
! Procedure Write-Employee-StateReturn
! Document 2 Payroll summary and employee data
!***********************************************************************
Begin-Procedure Write-Employee-StateReturn

  let $xml_StateCombine   = '<StateCombined documentId="-">'

  do Write-XML-Line($Tab1, 'StateReturn'            , ''                 , 'Begin')
  do Write-XML-Line($Tab2, $xml_StateCombine        , ''                 , 'Write')
  do Write-XML-Line($Tab3, 'NumberOfEmployees'      , $Count_S           , 'Content')
  do Write-XML-Line($Tab3, 'WHTotalWages'           , $ID_NlGrs_TRec     , 'Content')
  do Write-XML-Line($Tab3, 'TotalIncomeTaxWithheld' , $ID_STW_TRec       , 'Content')
  do Write-XML-Line($Tab3, 'WHTaxableWages'         , $ID_TxGrs_TRec     , 'Content')
  do Write-XML-Line($Tab3, 'PayRoll'                , ''                 , 'Begin')

  do Get-Employee-Detail

  do Write-XML-Line($Tab3, 'PayRoll'                , ''                 , 'End')
  do Write-XML-Line($Tab3, 'Month1Employees'        , $Month1CountDisp   , 'Content')
  do Write-XML-Line($Tab3, 'Month2Employees'        , $Month2CountDisp   , 'Content')
  do Write-XML-Line($Tab3, 'Month3Employees'        , $Month3CountDisp   , 'Content')
  do Write-XML-Line($Tab2, 'StateCombined'          , ''                 , 'End')
  do Write-XML-Line($Tab1, 'StateReturn'            , ''                 , 'End')

End-Procedure Write-Employee-StateReturn

!***********************************************************************
! Procedure Get-Employee-Detail
!***********************************************************************
Begin-Procedure Get-Employee-Detail

  let #E = 0

  While #E < #EE
    GET $Ssn
        $FirstName
        $MiddleName
        $LastName
        $TotalWages
        $TaxableWages
        $TaxWithheld
        $WagePlan
    FROM EMPLOYEES(#E)
    add 1 to #E

    do XML-Special-Chars($Ssn, $Xssn)
    do XML-Special-Chars($FirstName, $XFirstName)
    do XML-Special-Chars($MiddleName, $XMiddleName)
    do XML-Special-Chars($LastName, $XLastName)
    do Write-Employee-Detail
  End-While

  let #EE = 0
  Clear-Array NAME=EMPLOYEES

End-Procedure Get-Employee-Detail

!***********************************************************************
! Procedure Write-Employee-Detail
!***********************************************************************
Begin-Procedure Write-Employee-Detail

  do Write-XML-Line ($Tab4, 'Employee'    , ''             , 'Begin')
  do Write-XML-Line ($Tab5, 'SSN'         , $Xssn          , 'Content')
  do Write-XML-Line ($Tab5, 'Employee'    , ''             , 'Begin')
  do Write-XML-Line ($Tab6, 'FirstName'   , $XFirstName    , 'Content')

  If rtrim($XMiddleName,' ') <> ''
     do Write-XML-Line ($Tab6, 'MiddleName'  , $XMiddleName   , 'Content')
  End-If

  do Write-XML-Line ($Tab6, 'LastName'    , $XLastName     , 'Content')
  do Write-XML-Line ($Tab5, 'Employee'    , ''             , 'End')
  do Write-XML-Line ($Tab5, 'TotalWages'  , $TotalWages    , 'Content')
  do Write-XML-Line ($Tab5, 'TaxableWages', $TaxableWages  , 'Content')
  do Write-XML-Line ($Tab5, 'TaxWithheld' , $TaxWithheld   , 'Content')
  do Write-XML-Line ($Tab5, 'WagePlan'    , $WagePlan      , 'Content')
  do Write-XML-Line ($Tab4, 'Employee'    , ''             , 'End')

End-Procedure Write-Employee-Detail

!***********************************************************************
! Procedure Write-XML-Line
! Write 1 of 4 Tag Types <Begin></End>Data or only the $Tag variable
!***********************************************************************
Begin-Procedure Write-XML-Line($Tab, $Tag, $Content, $Tag_Type)

  let $XMLcontent = ''

  If isblank($Content)
     let $Content = ' '
  End-If

  Evaluate $Tag_Type
    When = 'Begin'
        let $XMLcontent = {TagBeg} || $Tag     || {TagEnd}
        Break
    When = 'End'
        let $XMLcontent = {TagBeg} || {EndChr} || $Tag || {TagEnd}
        Break
    When = 'Content'
        let $XMLcontent = {TagBeg} || $Tag     || {TagEnd} || $Content
                       || {TagBeg} || {EndChr} || $Tag    || {TagEnd}
        Break
    When = 'Write'
        let $XMLcontent = $Tag
        Break
    When-Other
        Show 'Invalid tag type passed to Write-XML-Line:  ' $Tag_Type '  Tag: ' $Tag '  ' $Content
  End-Evaluate

  If $XMLcontent <> ''
     let $XMLcontent = $Tab || $XMLcontent
     Write {FileNum} From $XMLcontent
  End-If

End-Procedure Write-XML-Line

!***********************************************************************
! Procedure Employer-Prompts
!***********************************************************************
Begin-Procedure Employer-Prompts

  Show ' '
  Show 'Enter quarterly data for ' noline
  Show $Company noline
  Show ':'
  Show '(Numbers should not include commas)'
  input $Company         '   Company               '
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  While $Sep_Tax_Rpt = ' '
    input $Sep_Tax_Rpt 'Enter Separate Tax Report Option (Y/N)'
    uppercase $Sep_Tax_Rpt

    If instr('YN',$Sep_Tax_Rpt,1) = 0
       Show ' '
       Show '***** Enter Y or N *****'
       Show ' '
    End-If
  End-While

End-Procedure Employer-Prompts

!***********************************************************************
! Procedure Company-Run-Control
!***********************************************************************
Begin-Procedure Company-Run-Control
  move ' ' to $Company
  let $RunCtl_Found = 'N'
  let #Month1Count  =  0
  let #Month2Count  =  0
  let #Month3Count  =  0
  let $Sep_Tax_Rpt  = 'N'

BEGIN-SELECT
CA.COMPANY
CA.CA_MONTH1_COUNT
CA.CA_MONTH2_COUNT
CA.CA_MONTH3_COUNT
CA.SEP_TAX_RPT

     move &CA.COMPANY to $Company
     move &CA.CA_MONTH1_COUNT to #Month1Count
     move &CA.CA_MONTH2_COUNT to #Month2Count
     move &CA.CA_MONTH3_COUNT to #Month3Count
     move &CA.SEP_TAX_RPT     to $Sep_Tax_Rpt

  move #Month1Count to $Month1Count '8999999'
  move #Month2Count to $Month2Count '8999999'
  move #Month3Count to $Month3Count '8999999'  
  do Process-Main
  
FROM PS_RC_TAX810CA CA
WHERE CA.OPRID       = $Prcs_OprID
  AND CA.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

  If #Count_F > 0
     do Print-Summary-Data('FileTotal')
  End-If

End-Procedure Company-Run-Control

!***********************************************************************
! Procedure Insert-Work-Record
!***********************************************************************
Begin-Procedure Insert-Work-Record

  let $Txgrs_QTD = #Txgrs_QTD
  let $Nlgrs_QTD = #Nlgrs_QTD
  let $Tax_QTD   = #Tax_QTD

  let $err-statement1 = 'TAX810CA, Insert-Error - INSERT-WORK-RECORD'
  let $err-statement2 = 'Key Values: TABLE PS_R_TAX810CA' ||
                        ', COMPANY ' || $Company ||
                        ', EMPLOYER_ID ' || $Employer_ID ||
                        ', STATE ' || $State ||
                        ', EMPLID ' || $Emplid ||
                        ', TAX_CLASS ' || $Tax_Class ||
                        ', LOCALITY ' || $Locality ||
                        ', TXGRS_QTD ' || $Txgrs_QTD ||
                        ', NLGRS_QTD ' || $Nlgrs_QYD ||
                        ', TAX_QTD ' || $Tax_QTD

BEGIN-SQL on-error=Error-Display
  INSERT INTO PS_R_TAX810CA
        (COMPANY,
         EMPLOYER_ID,
         STATE,
         EMPLID,
         TAX_CLASS,
         LOCALITY,
         TXGRS_QTD,
         NLGRS_QTD,
         TAX_QTD)
 VALUES ($Company,
         $Employer_ID,
         $State,
         $EmplID,
         $Tax_Class,
         $Locality,
         #Txgrs_QTD,
         #Nlgrs_QTD,
         #Tax_QTD)
END-SQL

End-Procedure Insert-Work-Record

!***********************************************************************
! Procedure Delete-Work-File
!***********************************************************************
Begin-Procedure Delete-Work-File

  let $err-statement1 = 'TAX810CA, Delete-Error - DELETE-WORK-FILE'
  let $err-statement2 = ' '

BEGIN-SQL On-Error=Error-Display
DELETE FROM PS_R_TAX810CA
END-SQL

End-Procedure Delete-Work-File

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'geteandg.sqc'  !Get-EandG procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rptsmmca.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'stderror.sqc'  !Routine for error Show
