!***********************************************************************
!  FPA2050:           CA Counters update                                *
!                                                                      *
!***********************************************************************
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:36:05                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment
#include 'setup01.sqc'        ! Printer and page-size initialization


BEGIN-REPORT

Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
Do Init-Report
Do Main-Process
do Stdapi-Term

END-REPORT


!***************************************************************
!
!
!       Init-Report
!
!
!***************************************************************

BEGIN-PROCEDURE  Init-Report
move 'FPA1200' to  $ReportID

do Stdapi-Init

If $prcs_process_instance = ''

        INPUT $stfbdg_lvl1  'Enter the Section '
        INPUT $fl_id  'Enter the Finance Act Id'
        INPUT $AsOfDate  'Enter the process date  (MM/DD/YY) '
        INPUT $param_setid     'Enter the CAEC SetId'
        INPUT $param_ca_catg   'Enter the CAEC Id'

        !Do Ask-From-Thru-Date

        !INPUT $E_Service 'Enter the Dept Id'
        !Let $E_Service = rtrim($E_Service,' ')

        let   $stfbdg_lvl1 = rtrim($param_stfbdg1,' ')
        let   $fl_id   = rtrim($param_flid,' ')
        let   $setid = rtrim($param_setid, ' ')
        let   $ca_catg = rtrim($param_ca_catg, ' ')

else
        Do FP-Select-Parameters

        Do Select-Parameters
End-if

END-PROCEDURE Init-Report


!***************************************************************
!
!
!       Get-Values
!
!
!***************************************************************
BEGIN-PROCEDURE  Get-Values

        Do FP-Get-As-Of-Date

 END-PROCEDURE



!*********************************
BEGIN-PROCEDURE Main-Process
!*********************************

    #ifdef debugi
        display 'main-process'
    #endif

    do Init-Var

    #ifdef debugi
        display  $AsOfDate
    #endif

let $sql-statement = 'FPA2050.SQR, Main-Process,select,FPM_CA_HDCT'
BEGIN-SELECT
HD.FP_STFBDG_LVL1                           &HD.STFBDG_LVL1
HD.FP_FINANC_LAW_ID                         &HD.FL_ID
{DATEOUT-PREFIX}HD.EFFDT{DATEOUT-SUFFIX}    &HD.EFFDT
HD.EFFSEQ                                   &HD.EFFSEQ
HD.SETID                                    &HD.SETID
HD.FP_CA_CATG_ID                            &HD.CA_CATG_ID


    do Init-Var2

    !*-*-*-*-* The initial status being Booked and Stamped ("V"), it becomes Active ("A")
        !if the allocation date is later than process date
    !*-*-*-*-* The initial status being Deallocated and Stamped ("W"), it becomes Effective Deallocated ("L")
        !if the deallocation date is later than process date


    do Update-CA-status($stfbdg_lvl1,$AsOfDate,$setid, $ca_catg)

    !*-*-*-*-* Count Booked and not Stamped CAE
    Do Calc_booked($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #booked)
    #ifdef debugi
        display 'booked'
        display #booked
    #endif

    !*-*-*-*-* Count Booked and Stamped CAE
    Do Calc_stamped_booked($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #stamped_booked)
    #ifdef debugi
        display 'stamped booked'
        display #stamped_booked
    #endif

    !*-*-*-*-* Count Active CAE
    Do Calc_active($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #active)
    #ifdef debugi
        display 'active'
        display #active
    #endif

    !*-*-*-*-*  Count existing physical CAE
    Do Calc_phys($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #phys)
    #ifdef debugi
        display 'physical hdcnt'
        display #phys
    #endif

    !*-*-*-*-*  Count CAE to be Deallocated not Stamped
    Do Calc_discharged($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #unst_dischg)
    #ifdef debugi
        display 'deallocated and not stamped'
        display #unst_dischg
    #endif

    !*-*-*-*-* Count CAE to be Deallocated and Stamped
    Do Calc_stmp_disch($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #stmp_dischg)
    #ifdef debugi
        display 'deallocated and stamped'
        display #stmp_dischg
    #endif

    !*-*-*-*-* Count CAE Booked in advance
    Do Calc_linked($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #linked)
    #ifdef debugi
        display 'linked'
        display #linked
    #endif

    !*-*-*-*-* Count locked in CAE supported by the CAEC
    Do Calc_locked($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #locked)
    #ifdef debugi
        display 'locked in'
        display #locked
    #endif

    !*-*-*-*-* Count Overstaffing
    Do Calc_ovfl($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #overflow)
    #ifdef debugi
        display 'overstaffing'
        display #overflow
    #endif


    !*-*-*-*-* Count Booked overdue not Stamped CAE
    Do Calc_warn1($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #warning1)
    #ifdef debugi
        display 'warning1'
        display #warning1
    #endif

    !*-*-*-*-* Count Deallocated overdue not Stamped CAE
    Do Calc_warn2($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #warning2)
    #ifdef debugi
        display 'warning2'
        display #warning2
    #endif

    !*-*-*-*-* Count Freeze CAE when Deallocating
    Do Calc_frozen($stfbdg_lvl1,$setid, $ca_catg, $AsOfDate, #frozen)
    #ifdef debugi
        display 'frozen'
        display #frozen
    #endif

    !*-*-*-*-* Booked and not Stamped CAE = Booked CAE - Booked in Advance CAE
    let #booked_nolinked = #booked -  #linked


    !*-*-*-*-* Update Counters
    do Update-FPCOMMACNT($stfbdg_lvl1, $fl_id, $effdt,#effseq,$setid, $ca_catg,#booked_nolinked,#stamped_booked,#active,
                #unst_dischg,#stmp_dischg,#locked,#overflow,#warning1,#warning2,#frozen)

from PS_FPM_CA_HDCT HD, PS_FPM_CA_FINLAW FL

where FL.FP_STFBDG_LVL1 = $stfbdg_lvl1
and FL.FP_FINANC_LAW_ID = $fl_id
and FL.FP_FL_STATUS = 'V'
and FL.FP_STFBDG_LVL1 = HD.FP_STFBDG_LVL1
and FL.FP_FINANC_LAW_ID = HD.FP_FINANC_LAW_ID
and FL.EFFDT = HD.EFFDT
and FL.EFFSEQ = HD.EFFSEQ
and FL.EFFDT = (select max(FL1.EFFDT)
                    from  PS_FPM_CA_FINLAW FL1
                    where FL1.FP_STFBDG_LVL1 = FL.FP_STFBDG_LVL1
                    and FL1.FP_FINANC_LAW_ID = FL.FP_FINANC_LAW_ID
                    and FL1.FP_FL_STATUS = 'V'
                    and FL1.EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX})
and FL.EFFSEQ = (select max(FL2.EFFSEQ)
                  from  PS_FPM_CA_FINLAW FL2
                  where FL2.FP_STFBDG_LVL1 = FL.FP_STFBDG_LVL1
                    and FL2.FP_FINANC_LAW_ID = FL.FP_FINANC_LAW_ID
                    and FL2.FP_FL_STATUS = 'V'
                    and FL2.EFFDT = FL.EFFDT)
[$var_where]

END-SELECT

END-PROCEDURE Main-Process



!*********************************
BEGIN-PROCEDURE Init-Var
!*********************************

if  $fl_id = ''
    let $stfbdg_lvl1 = rtrim(&RUN_CNTL_HR.FP_STFBDG_LVL1,' ')
    let $fl_id   = rtrim(&RUN_CNTL_HR.FP_FINANC_LAW_ID,' ')
end-if

let $param_setid = rtrim(&RUN_CNTL_HR.SETID, ' ')
let $param_ca_catg = rtrim(&RUN_CNTL_HR.FP_CA_CATG_ID, ' ')
let $var_where = ''

if  $param_ca_catg <> ''
    let $var_where = ' and  HD.SETID = ''' || $param_setid || ''' and HD.FP_CA_CATG_ID =  ''' || $param_ca_catg || ''''
end-if

display $stfbdg_lvl1
display $fl_id
display $var_where

END-PROCEDURE Init-Var



!*********************************
BEGIN-PROCEDURE Init-Var2
!*********************************
!initialize variables

        let $effdt = &HD.EFFDT
        let #effseq = &HD.EFFSEQ
        let $setid = rtrim(&HD.SETID, ' ')
        let $ca_catg = rtrim(&HD.CA_CATG_ID, ' ')
        display $setid
        display $ca_catg

END-PROCEDURE Init-Var2



!*********************************
BEGIN-PROCEDURE Calc_booked($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Booked and not Stamped CAE
let $sql-statement = 'FPA2050.SQR, Calc_booked,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA
WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'R'
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_booked



!*********************************
BEGIN-PROCEDURE Calc_stamped_booked($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Booked and Stamped CAE
let $sql-statement = 'FPA2050.SQR, Calc_stamped_booked,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'V'
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_stamped_booked



!*********************************
BEGIN-PROCEDURE Calc_active($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Active CAE
let $sql-statement = 'FPA2050.SQR, Calc_active,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and (CA.FP_CA_STATUS = 'A' or  CA.FP_CA_STATUS = 'P' or CA.FP_CA_STATUS = 'W')
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_active



!*********************************
BEGIN-PROCEDURE Calc_phys($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Physical Hdcnt,  Count CAE (with Proration Ratio = 1)
let $sql-statement = 'FPA2050.SQR, Calc_phys,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

count(*)    &sum

    display &sum
    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and (CA.FP_CA_STATUS = 'A' or  CA.FP_CA_STATUS = 'P' or CA.FP_CA_STATUS = 'W')
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_phys



!*********************************
BEGIN-PROCEDURE Calc_discharged($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count CAE to be Deallocated not Stamped
let $sql-statement = 'FPA2050.SQR, Calc_discharged,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'P'
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_discharged



!*********************************
BEGIN-PROCEDURE Calc_frozen($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Frozen CAE when Deallocating
let $sql-statement = 'FPA2050.SQR, Calc_frozen,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT*CA.FP_FROZEN/100)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'L'
and CA.FP_FROZEN <> 0
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_frozen



!*********************************
BEGIN-PROCEDURE Calc_stmp_disch($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Deallocated and Stamped CAE
let $sql-statement = 'FPA2050.SQR, Calc_stmp_disch,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

    let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'W'
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_stmp_disch



!*********************************
BEGIN-PROCEDURE Calc_linked($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count CAE Booked in Advance
let $sql-statement = 'FPA2050.SQR, Calc_linked,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

     let #count = &sum

FROM PS_FPA_CA_TBL CA, PS_FPA_CA_TBL LK

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CM_ACT_LKB_ID <> ' '
and LK.SETID = CA.SETID
and LK.FP_COMM_ACNT_ID = CA.FP_CM_ACT_LKB_ID
and LK.FP_CA_STATUS in ('R', 'V', 'A', 'P','W')
and CA.FP_CA_STATUS = 'R'
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_linked



!*********************************
BEGIN-PROCEDURE Calc_locked($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count CAE depending on lock in CAEC
let $sql-statement = 'FPA2050.SQR, Calc_locked,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

     let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_LOCKED_ID= $ca_catg_id
and (CA.FP_CA_LCK_END_DT is null
or CA.FP_CA_LCK_END_DT >= {DATEIN-PREFIX}$date{DATEIN-SUFFIX} )
and CA.FP_CA_STATUS in ('R', 'V', 'A', 'P','W')
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_locked



!*********************************
BEGIN-PROCEDURE Calc_ovfl($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count Overstaffing
let $sql-statement = 'FPA2050.SQR, Calc_ovfl,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

     let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_LOCKED_ID <> ' '
and (CA.FP_CA_LCK_END_DT is null
or CA.FP_CA_LCK_END_DT >= {DATEIN-PREFIX}$date{DATEIN-SUFFIX} )
and CA.FP_CA_STATUS in ('R', 'V', 'A', 'P','W')
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_ovfl



!*********************************
BEGIN-PROCEDURE Calc_warn1($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count wrong CAE : Booked overdue and not Stamped
let $sql-statement = 'FPA2050.SQR, Calc_warn1,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

     let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'R'
and CA.FP_APPL_DT <= {DATEIN-PREFIX}$date{DATEIN-SUFFIX}
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_warn1



!*********************************
BEGIN-PROCEDURE Calc_warn2($stfbdg,$set_id, $ca_catg_id, $date, :#count)
!*********************************

!**> Count wrong CAE : Deallocated overdue and not Stamped
let $sql-statement = 'FPA2050.SQR, Calc_warn2,select,FPA_CA_TBL'
BEGIN-Select On-Error=SQL-Error

sum(CA.FP_SHR_TM_RT)    &sum

     let #count = &sum

FROM PS_FPA_CA_TBL CA

WHERE CA.SETID = $set_id
and CA.FP_CA_CATG_ID = $ca_catg_id
and CA.FP_CA_STATUS = 'P'
and CA.FP_END_DT < {DATEIN-PREFIX}$date{DATEIN-SUFFIX}
and CA.FP_STFBDG_LVL1 = $stfbdg

END-select

END-PROCEDURE Calc_warn2



!*********************************
BEGIN-PROCEDURE Update-CA-status($stfbdg,$date,$set_id,$ca_catg_id)
!*********************************

display 'Update-CA-status'
display $date

!Update CAE status to Active if allocation date is later than process date
Let $sql-statement = 'FPA2050.SQR, Update-CA-status ,Update,PS_FPA_CA_TBL'
BEGIN-SQL   On-Error=SQL-Error

UPDATE PS_FPA_CA_TBL
SET FP_CA_STATUS = 'A'
WHERE FP_APPL_DT <= {DATEIN-PREFIX}$date{DATEIN-SUFFIX}
and (FP_END_DT is null
    or FP_END_DT >= {DATEIN-PREFIX}$date{DATEIN-SUFFIX})
and FP_CA_STATUS = 'V'
and FP_STFBDG_LVL1 = $stfbdg
and SETID = $set_id
and FP_CA_CATG_ID = $ca_catg_id

END-SQL


!Update status to Deallocated if deallocation date is later than process date
BEGIN-SQL   On-Error=SQL-Error

UPDATE PS_FPA_CA_TBL
SET FP_CA_STATUS = 'L'
WHERE FP_END_DT < {DATEIN-PREFIX}$date{DATEIN-SUFFIX}
and FP_CA_STATUS = 'W'
and FP_STFBDG_LVL1 = $stfbdg
and SETID = $set_id
and FP_CA_CATG_ID = $ca_catg_id

END-SQL

END-PROCEDURE Update-CA-status



!*********************************
BEGIN-PROCEDURE Update-FPCOMMACNT($stfbdg_lvl,$finlaw_id,$date,#seq,$set_id,$ca_catg_id,
                                    #res,#stamp_res,#act,#dsch,#stamp_dsch,#lckd,#ovfl,#warn1,#warn2,#froz)
!*********************************

!Update Counters

!BEGIN-Select

!CH.FP_FINANC_LAW_ID     &ch.financ_law
!{DATEOUT-PREFIX}CH.EFFDT{DATEOUT-SUFFIX}    &ch.effdt
!CH.EFFSEQ   &ch.effseq

!from PS_FPM_CA_HDCT CH
!where  CH.EFFDT = (select max(CH1.EFFDT)
!                    from  PS_FPM_CA_HDCT CH1
!                    where CH1.EFFDT <= {DATEIN-PREFIX}$date{DATEIN-SUFFIX})
!and CH.EFFSEQ = (select max(CH2.EFFSEQ)
!                  from  PS_FPM_CA_HDCT CH2
!                  where CH2.EFFDT = CH.EFFDT)

!End-select

!isplay $date
!isplay &ch.financ_law
!isplay &ch.effdt
!isplay &ch.effseq



Let $sql-statement = 'FPA2050.SQR, Update-CA-status ,Update,PS_FPM_CA_HDCT'
BEGIN-SQL   On-Error=SQL-Error

UPDATE PS_FPM_CA_HDCT
SET FP_USED_HDCNT = #act,
FP_BK_UNST_HDCNT = #res,
FP_BK_STMP_HDCNT = #stamp_res,
FP_DSCH_UNST_HDCNT = #dsch,
FP_DSCH_STMP_HDCNT = #stamp_dsch,
FP_LOCKED_HDCNT = #lckd,
FP_COMM_PHYSIC = #phys,
FP_LOCK_OVFL_HDCNT = #ovfl,
FP_WARN1_HDCNT = #warn1,
FP_WARN2_HDCNT = #warn2,
FP_FROZ_HDCNT = #froz

WHERE FP_STFBDG_LVL1 = $stfbdg_lvl
and FP_FINANC_LAW_ID = $finlaw_id
and EFFDT = {DATEIN-PREFIX}$date{DATEIN-SUFFIX}
and EFFSEQ =  #seq
and SETID = $set_id
and FP_CA_CATG_ID = $ca_catg_id

END-SQL

END-PROCEDURE Update-FPCOMMACNT







!#include 'datetime.sqc'         ! Routines for date and time formatting
#include 'curdttim.sqc'         ! Get-Current-DateTime procedure
#include 'stdapi.sqc'           ! Routines to update run status
#Include 'hrrnctl1.sqc'         ! Get run control parameter values
#Include 'hrgetval.sqc'         ! Get values mask routines
#Include 'fprnctl1.sqc'         ! Get run control parameter values
#Include 'fpgetval.sqc'         ! Get values mask routines
#include 'askftd.sqc'           ! From Thru Date input
#include 'number.sqc'           ! Routines for date and time formatting
!#Include 'datemath.sqc'         ! Routines for date arithmetic
#Include 'fptestdt.sqc'
