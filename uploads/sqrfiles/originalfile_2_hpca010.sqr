!***********************************************************************
! HPCA010.SQR:  Predistribution Audit Report                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/01/31:14:12:14                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector                   *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup31.sqc'  !printer and page-size initialization


Begin-REPORT

  do Housekeeping
  do Mainline
  print 'End Of Report' (+1,1)
  do Stdapi-Term

End-REPORT


!***********************************************************************
! HOUSEKEEPING
!***********************************************************************
Begin-Procedure Housekeeping


  move 'HPCA010' to $ReportID
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  move $HPCA010_ReportTitle to $ReportTitle

  do Init-DateTime
  do Init-Number
  do get-current-datetime
  do select-parameters

  Let $AuditLevel = &HP_RC_PDAUDIT.HP_AUDIT_LEVEL

  do Get-Installation
  do Create-Arrays
  let $CompErrExist = 'N'

End-Procedure

begin-procedure Report-Translation
! Read from HPCA010 program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('HPCA010', 'REPORT_TITLE', $Hpca010_ReportTitle, #dummy_width)
   do Get_Field_Information ('HPCA010', 'RUN_ID',       $Hpca010_Run_ID,      #dummy_width)
   do Get_Field_Information ('HPCA010', 'OFF',          $Hpca010_Off,         #dummy_width)
   do Get_Field_Information ('HPCA010', 'PAYGROUP',     $Hpca010_Paygroup,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'CYCLE',        $Hpca010_Cycle,       #dummy_width)
   do Get_Field_Information ('HPCA010', 'PAGE',         $Hpca010_Page,        #dummy_width)
   do Get_Field_Information ('HPCA010', 'LINE',         $Hpca010_Line,        #dummy_width)
   do Get_Field_Information ('HPCA010', 'DESCRIPTION',  $Hpca010_Description, #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG1',      $Hpca010_ErrMsg1,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG2',      $Hpca010_ErrMsg2,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG3',      $Hpca010_ErrMsg3,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG4',      $Hpca010_ErrMsg4,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG5',      $Hpca010_ErrMsg5,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG6',      $Hpca010_ErrMsg6,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG7',      $Hpca010_ErrMsg7,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG8',      $Hpca010_ErrMsg8,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG9',      $Hpca010_ErrMsg9,     #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG10',     $Hpca010_ErrMsg10,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG11',     $Hpca010_ErrMsg11,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG12',     $Hpca010_ErrMsg12,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG13',     $Hpca010_ErrMsg13,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG14',     $Hpca010_ErrMsg14,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG15',     $Hpca010_ErrMsg15,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG16',     $Hpca010_ErrMsg16,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG17',     $Hpca010_ErrMsg17,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG18',     $Hpca010_ErrMsg18,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG19',     $Hpca010_ErrMsg19,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG20',     $Hpca010_ErrMsg20,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG21',     $Hpca010_ErrMsg21,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG22',     $Hpca010_ErrMsg22,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG23',     $Hpca010_ErrMsg23,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG24',     $Hpca010_ErrMsg24,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG25',     $Hpca010_ErrMsg25,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG26',     $Hpca010_ErrMsg26,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG27',     $Hpca010_ErrMsg27,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG28',     $Hpca010_ErrMsg28,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG29',     $Hpca010_ErrMsg29,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG30',     $Hpca010_ErrMsg30,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG31',     $Hpca010_ErrMsg31,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG32',     $Hpca010_ErrMsg32,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG33',     $Hpca010_ErrMsg33,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG34',     $Hpca010_ErrMsg34,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG35',     $Hpca010_ErrMsg35,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG36',     $Hpca010_ErrMsg36,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG37',     $Hpca010_ErrMsg37,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG38',     $Hpca010_ErrMsg38,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG39',     $Hpca010_ErrMsg39,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG40',     $Hpca010_ErrMsg40,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG41',     $Hpca010_ErrMsg41,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG42',     $Hpca010_ErrMsg42,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG43',     $Hpca010_ErrMsg43,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG44',     $Hpca010_ErrMsg44,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG45',     $Hpca010_ErrMsg45,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG46',     $Hpca010_ErrMsg46,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG47',     $Hpca010_ErrMsg47,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG48',     $Hpca010_ErrMsg48,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG49',     $Hpca010_ErrMsg49,    #dummy_width)
   do Get_Field_Information ('HPCA010', 'ERRMSG50',     $Hpca010_ErrMsg50,    #dummy_width)
end-procedure


begin-heading 9
#include 'stdhtr04.sqc'

  print  $Hpca010_Run_ID                 (+1,1)
  print  $HP_RC_PDAUDIT.RUN_ID           (0,13)

  print  $Hpca010_Off                    (+2,11)

  print  $Hpca010_Paygroup               (+1,1)
  print  $Hpca010_Cycle                  (0,10)
  print  $Hpca010_Page                   (0,17)
  print  $Hpca010_Line                   (0,22)
  print  $Hpca010_Description            (0,27)

  print '--------'                       (+1,1)
  print '------'                         (0,10)
  print '----'                           (0,17)
  print '----'                           (0,22)
  print '--------------------------------------------------------------' (0,27)
  print '--------------------------------' (0,89)
end-heading


begin-procedure PrintLine1

     print $PayGroup   (+2,1)
     print $ErrDescr1  (0,27)
     let   $CompErrExist = 'Y'

End-procedure


begin-procedure PrintLine2

     print $PayGroup       (+2,1)
     print &PAY.OFF_CYCLE  (0,12)
     print &PAY.PAGE_NUM   (0,17)  edit 9999
     print &PAY.LINE_NUM   (0,24)  edit 99
     print $ErrDescr1      (0,27)
     If $ErrDescr2 <> ''
        print $ErrDescr2      (+1,27)
        Let $ErrDescr2 = ''
     End-if
     If $ErrDescr3 <> ''
        print $ErrDescr3      (+1,27)
        Let $ErrDescr3 = ''
     End-if
     let   $CompErrExist = 'Y'
End-procedure


!******************************************************************************
! CREATE-ARRAYS
! Sets up the storage arrays used during processing
!******************************************************************************
begin-procedure CREATE-ARRAYS

   Create-array name=ErnAcctPriority  Size = 10
        field=FieldName:Char
        field=FieldPriority:Number
        field=FieldLength:Number

   Create-array name=ErnAcctArray  Size = 1000
        field=Setid:Char
        field=Account:Char
        field=EmplType:Char
        field=EmplClass:Char
        field=RegTemp:Char
        field=FullPart:Char
        field=Paygroup:Char
        field=BusinessUnit:Char
        field=SetidJobcode:Char
        field=Jobcode:Char
        field=SetidSalPlan:Char
        field=SalAdminPlan:Char
        field=Erncd:Char

   Create-array name=DedAcctPriority  Size = 10
        field=FieldName:Char
        field=FieldPriority:Number
        field=FieldLength:Number

   Create-array name=DedAcctArray  Size = 1000
        field=Setid:Char
        field=Account:Char
        field=PlanType:Char
        field=BenefitPlan:Char
        field=Dedcd:Char
        field=DedClass:Char

   Create-array name=AcctPrdArray Size = 10
        field=AcctPrdBeginDt:Date
        field=AcctPrdEndDt:Date
        field=AcctPrdFiscalYr:Number
        field=AcctPrdSetID:Char

end-procedure


!***********************************************************************
! LOAD-ARRAYS
!***********************************************************************
begin-procedure Load-Arrays

  Let $ArraysOK = 'Y'

  do Load-Ern-Acct-Priority

  If $ArraysOK = 'Y'
     do Load-Ern-Acct-Array
  End-if

  If $ArraysOK = 'Y'
     do Load-Ded-Acct-Priority
  End-if

  If $ArraysOK = 'Y'
     do Load-Ded-Acct-Array
  End-if

end-procedure


!***********************************************************************
! LOAD-ERN-ACCT-PRIORITY
!***********************************************************************
begin-procedure Load-Ern-Acct-Priority

  Let $ErnTmplFound = 'N'

begin-SELECT
ETMPL.EFFDT,
ETMPL.SETID,
ETMPL.ACCOUNT

  Let $ErnTmplFound = 'Y'

 FROM PS_HP_ERN_ACC_TMPL ETMPL
WHERE ETMPL.EFFDT = (SELECT MAX(ETMPL2.EFFDT)
                       FROM PS_HP_ERN_ACC_TMPL ETMPL2
                      WHERE ETMPL2.EFFDT <= $PayEndDate)
end-SELECT

  If $ErnTmplFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg1
     do PrintLine1

  Else

     do Get-Ern-Acct-Rule

  End-if

end-procedure


!***********************************************************************
! GET-ERN-ACCT-RULE
!***********************************************************************
begin-procedure Get-Ern-Acct-Rule

  Let #ErnPriorityMax     = 0
  Let #ErnPriorityIdx     = 1
  Let #HighestErnPriority = 0

begin-SELECT
ERULE.HP_FLDNAME,
ERULE.HP_FLDPRIORITY,
FL.LENGTH

  If #ErnPriorityIdx > 10
     Let $ErrDescr1 = $Hpca010_ErrMsg2
     do PrintLine1
     Let $ArraysOK = 'N'

  Else

     Put  &ERULE.HP_FLDNAME
          &ERULE.HP_FLDPRIORITY
          &FL.LENGTH
     Into ErnAcctPriority(#ErnPriorityIdx)
          FieldName
          FieldPriority
          FieldLength

     If &ERULE.HP_FLDPRIORITY > #HighestErnPriority
        Let #HighestErnPriority = &ERULE.HP_FLDPRIORITY
     End-if

     Let #ErnPriorityMax = #ErnPriorityIdx
     add 1 to  #ErnPriorityIdx

  End-if

 FROM PS_HP_ERN_ACC_RULE ERULE, PSDBFIELD FL
WHERE ERULE.HP_FLDUSED = 'Y'
  AND ERULE.HP_FLDNAME = FL.FIELDNAME
  AND ERULE.EFFDT      = &ETMPL.EFFDT
ORDER BY ERULE.HP_FLDPRIORITY ASC
end-SELECT

end-procedure


!***********************************************************************
! LOAD-ERN-ACCT-ARRAY
!***********************************************************************
begin-procedure Load-Ern-Acct-Array

  Let $ErnAcctFound = 'N'
  Let #ErnAcctMax   = 0
  Let #ErnAcctIdx   = 1

begin-SELECT
EACCT.SETID,
EACCT.ACCOUNT,
EACCT.EFFDT

  Let $ErnAcctFound = 'Y'
  do Get-Ern-Acct-Map

FROM PS_HP_ERN_ACCT EACCT
WHERE EACCT.EFFDT= (SELECT MAX(EACCT1.EFFDT)
       FROM PS_HP_ERN_ACCT EACCT1
      WHERE EACCT1.SETID   = EACCT.SETID
        AND EACCT1.ACCOUNT = EACCT.ACCOUNT
        AND EACCT1.EFFDT  <= $PayEndDate)
  AND EACCT.EFF_STATUS='A'
end-SELECT

  If $ErnAcctFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg3
     do PrintLine1
  End-if

end-procedure


!***********************************************************************
! GET-ERN-ACCT-MAP
!***********************************************************************
begin-procedure Get-Ern-Acct-Map

begin-SELECT
EMAP.EMPL_TYPE,
EMAP.EMPL_CLASS,
EMAP.REG_TEMP,
EMAP.FULL_PART_TIME,
EMAP.PAYGROUP,
EMAP.BUSINESS_UNIT,
EMAP.SETID_JOBCODE,
EMAP.JOBCODE,
EMAP.SETID_SALARY,
EMAP.SAL_ADMIN_PLAN,
EMAP.ERNCD

  If #ErnAcctIdx > 1000
     Let $ErrDescr1 = $Hpca010_ErrMsg4
     do PrintLine1
     Let $ArraysOK = 'N'

  Else

     Put  &EACCT.SETID
          &EACCT.ACCOUNT
          &EMAP.EMPL_TYPE
          &EMAP.EMPL_CLASS
          &EMAP.REG_TEMP
          &EMAP.FULL_PART_TIME
          &EMAP.PAYGROUP
          &EMAP.BUSINESS_UNIT
          &EMAP.SETID_JOBCODE
          &EMAP.JOBCODE
          &EMAP.SETID_SALARY
          &EMAP.SAL_ADMIN_PLAN
          &EMAP.ERNCD
     Into ErnAcctArray(#ErnAcctIdx)
          Setid
          Account
          EmplType
          EmplClass
          RegTemp
          FullPart
          PayGroup
          BusinessUnit
          SetidJobcode
          Jobcode
          SetidSalPlan
          SalAdminPlan
          Erncd

     Let #ErnAcctMax = #ErnAcctIdx
     add 1 to  #ErnAcctIdx

  End-if

 FROM PS_HP_ERN_ACCT_MAP EMAP
WHERE EMAP.EFFDT   = &EACCT.EFFDT
  AND EMAP.SETID   = &EACCT.SETID
  AND EMAP.ACCOUNT = &EACCT.ACCOUNT
end-SELECT

end-procedure


!***********************************************************************
! LOAD-DED-ACCT-PRIORITY
!***********************************************************************
begin-procedure Load-Ded-Acct-Priority

  Let $DedTmplFound = 'N'

begin-SELECT
DTMPL.EFFDT,
DTMPL.SETID,
DTMPL.ACCOUNT

  Let $DedTmplFound = 'Y'

 FROM PS_HP_DED_ACC_TMPL DTMPL
WHERE DTMPL.EFFDT = (SELECT MAX(DTMPL2.EFFDT)
                       FROM PS_HP_DED_ACC_TMPL DTMPL2
                      WHERE DTMPL2.EFFDT <= $PayEndDate)
end-SELECT

  If $DedTmplFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg5
     do PrintLine1

  Else

     do Get-Ded-Acct-Rule

  End-if

end-procedure


!***********************************************************************
! GET-DED-ACCT-RULE
!***********************************************************************
begin-procedure Get-Ded-Acct-Rule

  Let #DedPriorityMax     = 0
  Let #DedPriorityIdx     = 1
  Let #HighestDedPriority = 0

begin-SELECT
DRULE.HP_FLDNAME,
DRULE.HP_FLDPRIORITY,
FL2.LENGTH

  If #DedPriorityIdx > 10
     Let $ErrDescr1 = $Hpca010_ErrMsg6
     do PrintLine1
     Let $ArraysOK = 'N'

  Else

     Put  &DRULE.HP_FLDNAME
          &DRULE.HP_FLDPRIORITY
          &FL2.LENGTH
     Into DedAcctPriority(#DedPriorityIdx)
          FieldName
          FieldPriority
          FieldLength

     If &DRULE.HP_FLDPRIORITY > #HighestDedPriority
        Let #HighestDedPriority = &DRULE.HP_FLDPRIORITY
     End-if

     Let #DedPriorityMax = #DedPriorityIdx
     add 1 to  #DedPriorityIdx

  End-if

 FROM PS_HP_DED_ACC_RULE DRULE, PSDBFIELD FL2
WHERE DRULE.HP_FLDUSED = 'Y'
  AND DRULE.HP_FLDNAME = FL2.FIELDNAME
  AND DRULE.EFFDT      = &DTMPL.EFFDT
ORDER BY DRULE.HP_FLDPRIORITY ASC
end-SELECT

end-procedure


!***********************************************************************
! LOAD-DED-ACCT-ARRAY
!***********************************************************************
begin-procedure Load-Ded-Acct-Array

  Let $DedAcctFound = 'N'
  Let #DedAcctMax   = 0
  Let #DedAcctIdx   = 1

begin-SELECT
DACCT.SETID,
DACCT.ACCOUNT,
DACCT.EFFDT

  Let $DedAcctFound = 'Y'
  do Get-Ded-Acct-Map

FROM PS_HP_DED_ACCT DACCT
WHERE DACCT.EFFDT= (SELECT MAX(DACCT1.EFFDT)
       FROM PS_HP_DED_ACCT DACCT1
      WHERE DACCT1.SETID   = DACCT.SETID
        AND DACCT1.ACCOUNT = DACCT.ACCOUNT
        AND DACCT1.EFFDT  <= $PayEndDate)
  AND DACCT.EFF_STATUS='A'
end-SELECT

  If $DedAcctFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg7
     do PrintLine1
  End-if

end-procedure


!***********************************************************************
! GET-DED-ACCT-MAP
!***********************************************************************
begin-procedure Get-Ded-Acct-Map

begin-SELECT
DMAP.PLAN_TYPE,
DMAP.BENEFIT_PLAN,
DMAP.DEDCD,
DMAP.DED_CLASS

  If #DedAcctIdx > 1000
     Let $ErrDescr1 = $Hpca010_ErrMsg8
     do PrintLine1
     Let $ArraysOK = 'N'

  Else

     Put  &DACCT.SETID
          &DACCT.ACCOUNT
          &DMAP.PLAN_TYPE
          &DMAP.BENEFIT_PLAN
          &DMAP.DEDCD
          &DMAP.DED_CLASS
     Into DedAcctArray(#DedAcctIdx)
          Setid
          Account
          PlanType
          BenefitPlan
          Dedcd
          DedClass

     Let #DedAcctMax = #DedAcctIdx
     add 1 to  #DedAcctIdx

  End-if

 FROM PS_HP_DED_ACCT_MAP DMAP
WHERE DMAP.EFFDT   = &DACCT.EFFDT
  AND DMAP.SETID   = &DACCT.SETID
  AND DMAP.ACCOUNT = &DACCT.ACCOUNT
end-SELECT

end-procedure


!***********************************************************************
! MAINLINE
! This is the main driver. Select and process each Pay Calendar for the
! Run ID
!***********************************************************************
begin-procedure Mainline

begin-SELECT
A.COMPANY,
A.PAYGROUP,
A.PAY_END_DT,
A.PAY_BEGIN_DT
A.PAY_CALC_RUN

  if &A.Company <> $priorCompany

    if $CompErrExist = 'Y'
        new-page
        let $CompErrExist = 'N'
    end-if

    move &A.Company    to $Company
    do Get-Company-Data
    move $Company to $priorCompany
    move $CompanyName to $priorCompanyName
  end-if

  move &A.PayGroup     to $PayGroup
  move &A.Pay_End_Dt   to $AsOfDate
  move &A.Pay_End_Dt   to $PayEndDate
  move &A.Pay_Begin_Dt to $PayBeginDate
  move ' '             to $PrevBU

  do Find-PaySheet
  if $PaySheetExist = 'Y'
      do Main-Processing
  end-if

FROM  PS_PAY_CALENDAR A
WHERE A.RUN_ID         = $HP_RC_PDAUDIT.RUN_ID
  AND A.POSN_FUND_RUN  IN ('N','P')
ORDER BY A.COMPANY, A.PAY_END_DT, A.PAYGROUP
end-SELECT

end-procedure


!***********************************************************************
! FIND-PAYSHEET
!***********************************************************************
begin-procedure Find-PaySheet

  let $PaySheetExist = 'N'

begin-select loops=1
COMPANY

  let $PaySheetExist = 'Y'

from PS_PAY_EARNINGS
where COMPANY    = $Company
and   PAYGROUP   = $PayGroup
and   PAY_END_DT = $PayEndDate
and   OK_TO_PAY  = 'Y'
end-select

end-procedure


!***********************************************************************
! MAIN-PROCESSING
! For each Pay Calendar, call routines to verify the GL Business Unit
! and Accounting Periods. If they are OK then continue to process
! the related PAY_EARNIGNS. If not then move on to next Pay Calendar.
!***********************************************************************
begin-procedure Main-Processing

  move 'Y' to $GLBusUnitAcctPrdOK
  do Verify-GL-Business-Unit


  If $GLBusUnitAcctPrdOK = 'Y'

     do Load-Arrays
     If $ArraysOK = 'Y'
        do Get-Earnings
     End-if
  End-if

end-procedure


!***********************************************************************
! VERIFY-GL-BUSINESS-UNIT
! Select all Distinct Business Units from PAY_EARNINGS then look for
! matching GL Business Units
!***********************************************************************
begin-procedure Verify-GL-Business-Unit

begin-SELECT DISTINCT
PE.BUSINESS_UNIT

  move &PE.BUSINESS_UNIT  to $BusinessUnit
  do Get-GL-Business-Unit-Record

 FROM PS_PAY_EARNINGS PE
WHERE PE.COMPANY       = $Company
  AND PE.PAYGROUP      = $PayGroup
  AND PE.PAY_END_DT    = $PayEndDate
ORDER BY PE.BUSINESS_UNIT     ASC
end-SELECT

end-procedure


!***********************************************************************
! GET-GL-BUSINESS-UNIT-RECORD
! Find the Business Unit GL value. If it is blank then report error,
! otherwise continue to find Accounting Periods.
!***********************************************************************
begin-procedure Get-GL-Business-Unit-Record

  Move 'N' to $GLBusUnitFound

begin-SELECT
BU.BUSINESS_UNIT_GL

  Let $BusinessUnitGL = RTRIM(&BU.BUSINESS_UNIT_GL, ' ')
  If $BusinessUnitGL <> ''
     Move 'Y' to $GLBusUnitFound
  End-if

 FROM PS_BUS_UNIT_TBL_HR BU
WHERE BU.BUSINESS_UNIT = $BusinessUnit
end-SELECT


  if $GLBusUnitFound = 'Y'
     do Get-Accounting-Periods
  else
     Let $ErrDescr1 = $Hpca010_ErrMsg9||$BusinessUnit
     do PrintLine1
     move 'N' to $GLBusUnitAcctPrdOK
  end-if

end-procedure


!***********************************************************************
! GET-ACCOUNTING-PERIODS
! Check to see that there is at least 1 accounting period defined for
! the current Business Unit GL, for the current pay begin/end date range.
!***********************************************************************
begin-procedure Get-Accounting-Periods

  Let $AcctPrdFound = 'N'

begin-SELECT
'X'

  Let $AcctPrdFound = 'Y'

 FROM PS_GL_JRNL_TMPLT GL,PS_CAL_DETP_TBL  CA, PS_SET_CNTRL_REC SC
WHERE GL.BUSINESS_UNIT_GL = $BusinessUnitGL
  AND SC.SETCNTRLVALUE    = GL.BUSINESS_UNIT_GL
  AND SC.REC_GROUP_ID     = 'FS_02'
  AND SC.RECNAME          = 'CAL_DETP_TBL'
  AND CA.SETID            = SC.SETID
  AND CA.CALENDAR_ID      = GL.CALENDAR_ID
  AND     (CA.BEGIN_DT BETWEEN $PayBeginDate AND $PayEndDate
      OR   CA.END_DT   BETWEEN $PayBeginDate AND $PayEndDate
      OR       (CA.BEGIN_DT >= $PayBeginDate
           AND  CA.END_DT   <= $PayEndDate)
      OR       (CA.BEGIN_DT <= $PayBeginDate
           AND  CA.END_DT   >= $PayEndDate))
end-SELECT

  If $AcctPrdFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg10||$BusinessUnit
     do PrintLine1
     move 'N' to $GLBusUnitAcctPrdOK
  End-if

end-procedure


!***********************************************************************
! GET-EARNINGS
! Read and process all PAY_EARNINGS for the current Pay Calendar.
!***********************************************************************
begin-procedure Get-Earnings
begin-SELECT
PAY.PAGE_NUM,
PAY.LINE_NUM,
PAY.OFF_CYCLE,
PAY.SEPCHK,
PAY.EMPLID,
PAY.EMPL_RCD,
PAY.POSITION_NBR,
PAY.JOBCODE,
PAY.DEPTID,
PAY.ACCT_CD,
PAY.BUSINESS_UNIT,
PAY.ERNCD_REG_HRS,
PAY.REG_HRS,
PAY.REG_HRLY_EARNS,
PAY.ERNCD_OT_HRS,
PAY.OT_HRS,
PAY.OT_HRLY_EARNS,
PAY.ERNCD_REG_EARNS,
PAY.REG_EARN_HRS,
PAY.REG_EARNS,
PAY.ADDL_NBR,
PAY.EARNS_END_DT,
PAY.EARNS_BEGIN_DT,
DEPT.TL_DISTRIB_INFO,
PAY.TL_SOURCE,
PAY.XREF_NUM,
DEPT.BUDGET_DEPTID,
DEPT.SETID,
JOB.ACCT_CD,
JOB.BUSINESS_UNIT,
JOB.EMPL_TYPE,
JOB.CLASS_INDC,
JOB.REG_TEMP,
JOB.FULL_PART_TIME,
JOB.SETID_SALARY,
JOB.SAL_ADMIN_PLAN,
PAY.ORIG_PAYGROUP


  Let $PAY.ACCT_CD = RTRIM(&PAY.ACCT_CD, ' ')
  Let $JOB.ACCT_CD = RTRIM(&JOB.ACCT_CD, ' ')
  Let $PAY.JOBCODE = RTRIM(&PAY.JOBCODE, ' ')
  Let $OrigPaygroup = RTRIM(&PAY.ORIG_PAYGROUP, ' ')

  If $PAY.JOBCODE = ''
     Let $ErrDescr1 = $Hpca010_ErrMsg11
     do PrintLine2
  Else
      do Verify-Jobcode
  End-if

  If $JobcodeFound = 'Y'
     Let $PAY.POSITION_NBR = RTRIM(&PAY.POSITION_NBR, ' ')
     If $PAY.POSITION_NBR = ''
        Let $PositionPoolId = ''
        do Process-Each-AcctPrd
     Else
        do Verify-Position-Nbr
        If $PositionNbrFound = 'Y'
           do Process-Each-AcctPrd
        End-if
     End-if
  End-if

 FROM PS_PAY_EARNINGS PAY, PS_DEPT_TBL DEPT, PS_JOB JOB, PS_PAY_CHECK CHK
WHERE PAY.COMPANY    = $Company
  AND PAY.PAYGROUP   = $PayGroup
  AND PAY.PAY_END_DT = $PayEndDate
  AND PAY.COMPANY    = CHK.COMPANY
  AND PAY.PAYGROUP   = CHK.PAYGROUP
  AND PAY.PAY_END_DT = CHK.PAY_END_DT
  AND PAY.OFF_CYCLE  = CHK.OFF_CYCLE
  AND PAY.PAGE_NUM   = CHK.PAGE_NUM
  AND PAY.LINE_NUM   = CHK.LINE_NUM
  AND PAY.SEPCHK     = CHK.SEPCHK
  AND PAY.SINGLE_CHECK_USE IN ('N', 'C')
  AND CHK.PAYCHECK_OPTION <> 'R'
  AND DEPT.DEPTID = PAY.DEPTID
  AND DEPT.USE_DISTRIBUTION = 'Y'
  AND DEPT.SETID =
     (SELECT STCT.SETID
        FROM PS_SET_CNTRL_REC STCT
       WHERE STCT.SETCNTRLVALUE = PAY.BUSINESS_UNIT
         AND STCT.REC_GROUP_ID  = 'HR_01'
         AND STCT.RECNAME       = 'DEPT_TBL')
  AND DEPT.EFFDT=
     (SELECT MAX(DEPTDT.EFFDT)
        FROM PS_DEPT_TBL DEPTDT
       WHERE DEPTDT.SETID  = DEPT.SETID
         AND DEPTDT.DEPTID = DEPT.DEPTID
         AND DEPTDT.EFFDT <= PAY.PAY_END_DT)
  AND JOB.EMPLID   = PAY.EMPLID
  AND JOB.EMPL_RCD = PAY.EMPL_RCD
  AND JOB.EFFDT  = (SELECT MAX(JOB2.EFFDT)
                      FROM PS_JOB JOB2
                     WHERE JOB2.EMPLID   = JOB.EMPLID
                       AND JOB2.EMPL_RCD = JOB.EMPL_RCD
                       AND JOB2.EFFDT   <= $PayEndDate)
  AND JOB.EFFSEQ = (SELECT MAX(JOB3.EFFSEQ)
                      FROM PS_JOB JOB3
                     WHERE JOB3.EMPLID   = JOB.EMPLID
                       AND JOB3.EMPL_RCD = JOB.EMPL_RCD
                       AND JOB3.EFFDT    = JOB.EFFDT)
  ORDER BY PAY.DEPTID, PAY.OFF_CYCLE, PAY.PAGE_NUM, PAY.LINE_NUM
end-SELECT

end-procedure


!***********************************************************************
! VERIFY-JOBCODE
! Verify that there is a current active Jobcode Table record defined.
!***********************************************************************
begin-procedure Verify-Jobcode

  Let $JobcodeFound = 'N'

begin-SELECT
J.POSN_MGMT_INDC,
J.SETID,

  Let $JobcodeFound = 'Y'

 FROM PS_JOBCODE_TBL J
WHERE J.JOBCODE = $PAY.JOBCODE
  AND J.EFF_STATUS = 'A'
  AND J.SETID =
     (SELECT STCT.SETID
        FROM PS_SET_CNTRL_REC STCT
       WHERE STCT.SETCNTRLVALUE = &PAY.BUSINESS_UNIT
         AND STCT.REC_GROUP_ID  = 'HR_02'
         AND STCT.RECNAME       = 'JOBCODE_TBL')
AND J.EFFDT=
      (SELECT MAX(J1.EFFDT)
         FROM PS_JOBCODE_TBL J1
        WHERE J1.SETID   = J.SETID
          AND J1.JOBCODE = J.JOBCODE
          AND J1.EFFDT  <= $PayEndDate)

end-SELECT

  If $JobcodeFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg12 || $PAY.JOBCODE
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! VERIFY-POSITION-NBR
! Verify that there is a current active Postion Data record defined.
!***********************************************************************
begin-procedure Verify-Position-Nbr

  Let $PositionNbrFound = 'N'

begin-SELECT
PD.POSITION_POOL_ID

  Let $PositionNbrFound = 'Y'
  Let $PositionPoolId = RTRIM(&PD.POSITION_POOL_ID,' ')

 FROM PS_POSITION_DATA PD
WHERE PD.POSITION_NBR = $PAY.POSITION_NBR
  AND PD.EFF_STATUS = 'A'
  AND PD.EFFDT=
      (SELECT MAX(PD1.EFFDT)
         FROM PS_POSITION_DATA PD1
        WHERE PD1.POSITION_NBR = PD.POSITION_NBR
          AND PD1.EFFDT       <= $PayEndDate)

end-SELECT

  If $PositionNbrFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg13 || $PAY.POSITION_NBR
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! PROCESS-EACH-ACCTPRD
! For each PAY_EARNINGS record, process for each Accounting Period that
! the current Pay Begin/End date range 'touches'.
!***********************************************************************
begin-procedure Process-Each-AcctPrd

  If $Company       <> $SaveCompany    or
     $Paygroup      <> $SavePaygroup   or
     $PayEndDate    <> $SavePayEndDate or
     &PAY.OFF_CYCLE <> $SaveOffCycle   or
     &PAY.PAGE_NUM  <> #SavePageNum    or
     &PAY.LINE_NUM  <> #SaveLineNum    or
     &PAY.SEPCHK    <> #SaveSepchk

     Let $SaveCompany    = $Company
     Let $SavePaygroup   = $Paygroup
     Let $SavePayEndDate = $PayEndDate
     Let $SaveOffCycle   = &PAY.OFF_CYCLE
     Let #SavePageNum    = &PAY.PAGE_NUM
     Let #SaveLineNum    = &PAY.LINE_NUM
     Let #SaveSepchk     = &PAY.SEPCHK

     Let $PayKeyChange = 'Y'
  Else
     Let $PayKeyChange = 'N'
  End-if

  If $PrevBu <> &PAY.BUSINESS_UNIT
      Clear-Array Name=AcctPrdArray
      let #AcctPrdCnt = 0
      let $PrevBu = &PAY.BUSINESS_UNIT

      do Load-AcctPrdArray
  End-if

  do Format-Datetime(&PAY.EARNS_BEGIN_DT, $Cmp_PAY_EarnsBeginDt, {DEFCMP}, '', '')
  do Format-Datetime(&PAY.EARNS_END_DT,   $Cmp_PAY_EarnsEndDt,   {DEFCMP}, '', '')

  if $Cmp_PAY_EarnsEndDt < $ProcAPBeginDt

      let #AcctPrdIdx = 0
      get  $CA_BeginDt $CA_EndDt #CA2_FISCAL_YEAR $CA2_SETID
      from AcctPrdArray (#AcctPrdIdx) AcctPrdBeginDt AcctPrdEndDt AcctPrdFiscalYr AcctPrdSetID

      let $PeriodEndDate = $CA_EndDt
      do Get-Budget-DeptID
      Let $BudgetDeptID  = &D.BUDGET_DEPTID

      do Process-AcctPrd-Details
  else
      if $Cmp_PAY_EarnsBeginDt > $ProcAPEndDt

          let #AcctPrdIdx = #AcctPrdCnt - 1
          get  $CA_BeginDt $CA_EndDt #CA2_FISCAL_YEAR $CA2_SETID
          from AcctPrdArray (#AcctPrdIdx) AcctPrdBeginDt AcctPrdEndDt AcctPrdFiscalYr AcctPrdSetID

          let $PeriodEndDate = $CA_EndDt
          do Get-Budget-DeptID
          Let $BudgetDeptID  = &D.BUDGET_DEPTID

          do Process-AcctPrd-Details
      else
          let #AcctPrdIdx = 0
          while #AcctPrdIdx < #AcctPrdCnt

              get  $CA_BeginDt $CA_EndDt #CA2_FISCAL_YEAR $CA2_SETID
              from AcctPrdArray (#AcctPrdIdx) AcctPrdBeginDt AcctPrdEndDt AcctPrdFiscalYr AcctPrdSetID

              do Format-Datetime($CA_BeginDt, $Cmp_CA_BeginDt, {DEFCMP}, '', '')
              do Format-Datetime($CA_EndDt,   $Cmp_CA_EndDt,   {DEFCMP}, '', '')

              if ($Cmp_PAY_EarnsEndDt   < $Cmp_CA_BeginDt or
                  $Cmp_PAY_EarnsBeginDt > $Cmp_CA_EndDt)
              else
                  if $Cmp_PAY_EarnsEndDt > $Cmp_CA_EndDt
                      let $PeriodEndDate = $CA_EndDt
                      do Get-Budget-DeptID
                      Let $BudgetDeptID  = &D.BUDGET_DEPTID
                  else
                      Let $PeriodEndDate = &PAY.EARNS_END_DT
                      Let $BudgetDeptID  = &DEPT.BUDGET_DEPTID
                  end-if

                  do Process-AcctPrd-Details
              end-if

              let #AcctPrdIdx = #AcctPrdIdx + 1
          end-while
      end-if
  end-if

end-procedure

!***********************************************************************
! LOAD-ACCTPRDARRAY
!***********************************************************************
begin-procedure Load-AcctPrdArray

begin-SELECT
CA2.FISCAL_YEAR
CA2.BEGIN_DT
CA2.END_DT
CA2.SETID

  put  &CA2.BEGIN_DT &CA2.END_DT &CA2.FISCAL_YEAR &CA2.SETID
  into AcctPrdArray (#AcctPrdCnt) AcctPrdBeginDt AcctPrdEndDt AcctPrdFiscalYr AcctPrdSetID

  let #AcctPrdCnt = #AcctPrdCnt + 1

FROM PS_GL_JRNL_TMPLT GL2,PS_CAL_DETP_TBL CA2, PS_SET_CNTRL_REC SC2, PS_BUS_UNIT_TBL_HR BU2
WHERE BU2.BUSINESS_UNIT    = &PAY.BUSINESS_UNIT
  AND GL2.BUSINESS_UNIT_GL = BU2.BUSINESS_UNIT_GL
  AND SC2.SETCNTRLVALUE    = GL2.BUSINESS_UNIT_GL
  AND SC2.REC_GROUP_ID     = 'FS_02'
  AND SC2.RECNAME          = 'CAL_DETP_TBL'
  AND CA2.SETID            = SC2.SETID
  AND CA2.CALENDAR_ID      = GL2.CALENDAR_ID
  AND     (CA2.BEGIN_DT BETWEEN $PayBeginDate AND $PayEndDate
      OR   CA2.END_DT   BETWEEN $PayBeginDate AND $PayEndDate
      OR       (CA2.BEGIN_DT >= $PayBeginDate
           AND  CA2.END_DT   <= $PayEndDate)
      OR       (CA2.BEGIN_DT <= $PayBeginDate
           AND  CA2.END_DT   >= $PayEndDate))
Order by CA2.FISCAL_YEAR, CA2.BEGIN_DT asc
end-SELECT

  let #AcctPrdIdx = 0
  get $CA_BeginDt from AcctPrdArray (#AcctPrdIdx) AcctPrdBeginDt

  let #AcctPrdIdx = #AcctPrdCnt - 1
  get $CA_EndDt from AcctPrdArray (#AcctPrdIdx) AcctPrdEndDt

  do Format-Datetime($CA_BeginDt, $ProcAPBeginDt, {DEFCMP}, '', '')
  do Format-Datetime($CA_EndDt,   $ProcAPEndDt,   {DEFCMP}, '', '')

end-procedure

!***********************************************************************
! PROCESS-ACCTPRD-DETAILS
!***********************************************************************
begin-procedure Process-AcctPrd-Details

  move $PeriodEndDate   to $AsOfDate

  do Format-DateTime($PeriodEndDate, $PrintPeriodEndDate, {DEFDATE}, '', '')

  If $BudgetDeptid    <> $SaveBudgetDeptid or
     #CA2_FISCAL_YEAR <> #SaveFiscalYear

     do Get-Dept-Budget-Date
     Let $SaveBudgetDeptid = $BudgetDeptid
     Let #SaveFiscalYear   = #CA2_FISCAL_YEAR
  End-if

  If $DeptBudgetDtFound = 'Y'
     do Process-Details
  End-if

end-procedure

!***********************************************************************
! PROCESS-DETAILS
!***********************************************************************
begin-procedure Process-Details

! Process the Pay Earnings record. If it looks like there is a T&L record then lookup
! the AcctCd from the TL tables. Othewise, if the Acct_cd is blank then look for a Department
! Earnings budget record. If not then verify the Acct_cd.

  If $TL = 'Y' and
     &DEPT.TL_DISTRIB_INFO = 'Y' and
     &PAY.XREF_NUM <> 0

     Let $BudgetLevel   = 'DoLookup'
     Let #LookupXrefNum = &PAY.XREF_NUM
     Let $LookupErncd   = RTRIM(&PAY.ERNCD_REG_HRS, ' ')
     do  Get-Payable-Time
  Else
     If $PAY.ACCT_CD = '' or &BUD_DT.HP_ERN_ACCT = 'Y'
        do Get-Earnings-Budget
     Else
        Let $LookupAcctCd = $PAY.ACCT_CD
        Let $LookupDate   = $PeriodEndDate
        Let $AcctType     = 'None'
        Let $LookupErncd  = ''
        do Verify-AcctCd
        Let $BudgetLevel = 'DoLookup'
     End-if
  End-if

! If it looks like this may be a T&L Other Earnings record then try to lookup
! the Acct_cd from the TL tables. If not T&L and the Acct_cd is blank, then lookup
! the Department Earnings budget record using the ERNCD from Pay Other Earns.

  If $BudgetLevel <> 'X'

     If $BudgetLevel = 'DoLookup'
        do Get-Dept-Budget-Level
     End-if

     If $BudgetLevel <> 'X'
        If $TL = 'Y' and
           &DEPT.TL_DISTRIB_INFO = 'Y' and
           &PAY.TL_SOURCE = 'T'
           do Get-TL-Pay-Oth-Earns
        Else
           If $PAY.ACCT_CD = ''
              do Get-Pay-Oth-Earns
           End-if
        End-if
     End-if

  End-if

  If $BudgetLevel <> 'X' and &A.PAY_CALC_RUN = 'Y' and $PayKeyChange = 'Y'

     Let $ValidatedJobAcctcd = 'N'

     If &BUD_DT.DEFAULT_FUND_OPTN = 'A'
        do Get-Deduction-Budget
     Else
        If $JOB.ACCT_CD = ''  or &BUD_DT.HP_DED_ACCT = 'Y'
           do Get-Deduction-Budget
        Else
           Let $LookupAcctCd = $JOB.ACCT_CD
           Let $LookupDate   = $PeriodEndDate
           Let $AcctType     = 'None'
           do Verify-AcctCd
           Let $ValidatedJobAcctcd = 'Y'
        End-if
     End-if

     If $BudgetLevel <> 'X'

        If &BUD_DT.DEFAULT_FUND_OPTN = 'A'
           do Get-Tax-Budget
        Else
           If $JOB.ACCT_CD = '' or &BUD_DT.HP_TAX_ACCT = 'Y'
              do Get-Tax-Budget
           Else
              If $ValidatedJobAcctcd = 'N'
                 Let $LookupAcctCd = $JOB.ACCT_CD
                 Let $LookupDate   = $PeriodEndDate
                 Let $AcctType     = 'None'
                 do Verify-AcctCd
                 Let $ValidatedJobAcctcd = 'Y'
              End-if
           End-if
        End-if

        If $BudgetLevel <> 'X'

           If &BUD_DT.DEFAULT_FUND_OPTN = 'A'
              do Get-CTX-Budget
           Else
              If $JOB.ACCT_CD = '' or &BUD_DT.HP_CTX_ACCT = 'Y'
                 do Get-CTX-Budget
              Else
                 If $ValidatedJobAcctcd = 'N'
                    Let $LookupAcctCd = $JOB.ACCT_CD
                    Let $LookupDate   = $PeriodEndDate
                    Let $AcctType     = 'None'
                    do Verify-AcctCd
                 End-if
              End-if
           End-if

        End-if

     End-if

  End-if
end-procedure


!***********************************************************************
! GET-BUDGET-DEPTID
! Get the Budget DeptID if the Pay End date is not in the current
! accounting periold.
!***********************************************************************
begin-procedure Get-Budget-DeptID

begin-SELECT
D.BUDGET_DEPTID

 FROM PS_DEPT_TBL D
WHERE D.DEPTID = &PAY.DEPTID
  AND D.SETID =
     (SELECT STCT2.SETID
        FROM PS_SET_CNTRL_REC STCT2
       WHERE STCT2.SETCNTRLVALUE = &PAY.BUSINESS_UNIT
         AND STCT2.REC_GROUP_ID  = 'HR_01'
         AND STCT2.RECNAME       = 'DEPT_TBL')
AND D.EFFDT=
      (SELECT MAX(D1.EFFDT)
         FROM PS_DEPT_TBL D1
        WHERE D1.SETID  = D.SETID
          AND D1.DEPTID = D.DEPTID
          AND D1.EFFDT <= $PeriodEndDate)

end-SELECT
end-procedure

!***********************************************************************
! GET-EARNINGS-BUDGET
! Get the Department Earnings Budget
!***********************************************************************
begin-procedure Get-Earnings-Budget

  do Get-Dept-Budget-Level

  If $BudgetLevel <> 'X'
     If &PAY.REG_HRLY_EARNS <> 0
        Let $LookupErncd = &PAY.ERNCD_REG_HRS
        If $AuditLevel = 'G'
           do Lookup-General-Earnings-Budget
        Else
           do Lookup-Specific-Earnings-Budget
        End-if
     End-if

     If (&PAY.REG_EARNS <> 0) OR (&PAY.REG_EARNS = 0 AND &PAY.REG_HRLY_EARNS = 0)
        Let $LookupErncd = &PAY.ERNCD_REG_EARNS
        If $AuditLevel = 'G'
           do Lookup-General-Earnings-Budget
        Else
           do Lookup-Specific-Earnings-Budget
        End-if
     End-if

     If &PAY.OT_HRLY_EARNS <> 0
        Let $LookupErncd = &PAY.ERNCD_OT_HRS
        If $AuditLevel = 'G'
           do Lookup-General-Earnings-Budget
        Else
           do Lookup-Specific-Earnings-Budget
        End-if
     End-if
  End-if

end-procedure


!***********************************************************************
! GET-DEPT-BUDGET-LEVEL
! Get the current Department Budget Record. Try to read the Dept_Budget
! record at each budget level until found. If it is not found then report
! error.
!***********************************************************************
begin-procedure Get-Dept-Budget-Level


  Let $BudgetLevel    = 'X'  !Initialize to 'Not Found'
  Let $LookupDeptid   = $BudgetDeptid
  Let $LookupSetid    = &DEPT.SETID
  Let #LookupFiscalYr = #CA2_FISCAL_YEAR

  Let $LookupEmplid       = &PAY.EMPLID
  Let #LookupEmpl_Rcd     = &PAY.EMPL_RCD
  Let $LookupPosNbr       = ' '
  Let $LookupSetidJobcode = ' '
  Let $LookupJobcode      = ' '
  Let $LookupPosPoolId    = ' '
  Let $BudgetErr          = $Hpca010_ErrMsg14 || $PrintPeriodEndDate || '  ' || $Hpca010_ErrMsg15 || $LookupEmplid
  do Lookup-Budget-Level

  If $BudgetLevel = 'X' and $PAY.POSITION_NBR = '' and &J.POSN_MGMT_INDC = 'N'
     Let $LookupEmplid       = ' '
     Let #LookupEmpl_Rcd     = 0
     Let $LookupPosNbr       = ' '
     Let $LookupSetidJobcode = &J.SETID
     Let $LookupJobcode      = $PAY.JOBCODE
     Let $LookupPosPoolId    = ' '
     Let $BudgetErr          = $Hpca010_ErrMsg14 || $PrintPeriodEndDate || '  ' || $Hpca010_ErrMsg16 || $LookupSetidJobcode || '-' || $LookupJobcode
     do Lookup-Budget-Level
  End-if

  If $BudgetLevel = 'X' and $PAY.POSITION_NBR <> ''
     Let $LookupEmplid       = ' '
     Let #LookupEmpl_Rcd     = 0
     Let $LookupPosNbr       = $PAY.POSITION_NBR
     Let $LookupSetidJobcode = ' '
     Let $LookupJobcode      = ' '
     Let $LookupPosPoolId    = ' '
     Let $BudgetErr          = $Hpca010_ErrMsg14 || $PrintPeriodEndDate ||'  ' || $Hpca010_ErrMsg17 || $LookupPosNbr
     do Lookup-Budget-Level

     If $BudgetLevel = 'X' and $PositionPoolID <> ''
        Let $LookupEmplid       = ' '
        Let #LookupEmpl_Rcd     = 0
        Let $LookupPosNbr       = ' '
        Let $LookupSetidJobcode = ' '
        Let $LookupJobcode      = ' '
        Let $LookupPosPoolId    = $PositionPoolID
        Let $BudgetErr          = $Hpca010_ErrMsg14 || $PrintPeriodEndDate || '  ' || $Hpca010_ErrMsg18 || $LookupPosPoolId
        do Lookup-Budget-Level
     End-if
  End-if

  If $BudgetLevel = 'X'
     Let $LookupEmplid       = ' '
     Let #LookupEmpl_Rcd     = 0
     Let $LookupPosNbr       = ' '
     Let $LookupSetidJobcode = ' '
     Let $LookupJobcode      = ' '
     Let $LookupPosPoolId    = ' '
     Let $BudgetErr          = $Hpca010_ErrMsg14 || $PrintPeriodEndDate || '  ' || $Hpca010_ErrMsg19 || $BudgetDeptid
     do Lookup-Budget-Level
  End-if

  If $BudgetLevel = 'X'
     Let $FiscalYear = #LookupFiscalYr
     Let $ErrDescr1 = $Hpca010_ErrMsg20
     Let $ErrDescr2 = $Hpca010_ErrMsg21 || $BudgetDeptid || '  ' || $Hpca010_ErrMsg22 || $FiscalYear
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! LOOKUP-BUDGET-LEVEL
! Read the DEPT_BUDGET record using the passed in paramenters.
!***********************************************************************
begin-procedure Lookup-Budget-Level

  Let $BudgetLevelFound = 'N'

begin-SELECT
DB.SETID,
DB.DEPTID,
DB.POSITION_POOL_ID,
DB.SETID_JOBCODE,
DB.JOBCODE,
DB.POSITION_NBR,
DB.EMPLID,
DB.EMPL_RCD,
DB.EFFDT,
DB.BUDGET_LEVEL_INDC

  Let $BudgetLevelFound = 'Y'

 FROM PS_DEPT_BUDGET DB
WHERE DB.EMPLID           = $LookupEmplid
  AND DB.EMPL_RCD         = #LookupEmpl_Rcd
  AND DB.SETID            = $LookupSetid
  AND DB.DEPTID           = $LookupDeptid
  AND DB.FISCAL_YEAR      = #LookupFiscalYr
  AND DB.POSITION_NBR     = $LookupPosNbr
  AND DB.SETID_JOBCODE    = $LookupSetidJobcode
  AND DB.JOBCODE          = $LookupJobcode
  AND DB.POSITION_POOL_ID = $LookupPosPoolId
  AND DB.EFFDT = (SELECT MAX(DB2.EFFDT)
     FROM  PS_DEPT_BUDGET DB2
     WHERE DB2.SETID            = DB.SETID
       AND DB2.DEPTID           = $LookupDeptid
       AND DB2.FISCAL_YEAR      = DB.FISCAL_YEAR
       AND DB2.POSITION_POOL_ID = DB.POSITION_POOL_ID
       AND DB2.SETID_JOBCODE    = DB.SETID_JOBCODE
       AND DB2.JOBCODE          = DB.JOBCODE
       AND DB2.POSITION_NBR     = DB.POSITION_NBR
       AND DB2.EMPLID           = DB.EMPLID
       AND DB2.EMPL_RCD         = DB.EMPL_RCD
       AND DB2.EFFDT           <= $PeriodEndDate)
  AND DB.EFFSEQ = (SELECT MAX(DB3.EFFSEQ)
     FROM  PS_DEPT_BUDGET DB3
     WHERE DB3.SETID            = DB.SETID
       AND DB3.DEPTID           = DB.DEPTID
       AND DB3.FISCAL_YEAR      = DB.FISCAL_YEAR
       AND DB3.POSITION_POOL_ID = DB.POSITION_POOL_ID
       AND DB3.SETID_JOBCODE    = DB.SETID_JOBCODE
       AND DB3.JOBCODE          = DB.JOBCODE
       AND DB3.POSITION_NBR     = DB.POSITION_NBR
       AND DB3.EMPLID           = DB.EMPLID
       AND DB3.EMPL_RCD         = DB.EMPL_RCD
       AND DB3.EFFDT            = DB.EFFDT)
  AND DB.EFF_STATUS = 'A'
end-SELECT

  If $BudgetLevelFound = 'Y'
     Let $BudgetLevel = &DB.BUDGET_LEVEL_INDC
  End-if

end-procedure


!***********************************************************************
! GET-DEPT-BUDGET-DATE
! Read the Dept_Budget_Dt table and retreive the OffSet Group. If found then
! verify that there is a current active Department Offset Group defined
!***********************************************************************
begin-procedure Get-Dept-Budget-Date

  Let $DeptBudgetDtFound = 'N'

begin-SELECT
BUD_DT.DEPT_OFFSET_GRP,
BUD_DT.SETID,
BUD_DT.DEFAULT_FUND_OPTN,
BUD_DT.HP_ERN_ACCT,
BUD_DT.HP_DED_ACCT,
BUD_DT.HP_TAX_ACCT,
BUD_DT.HP_CTX_ACCT

  Let $DeptBudgetDtFound = 'Y'

FROM PS_DEPT_BUDGET_DT  BUD_DT

WHERE BUD_DT.SETID =
     (SELECT STCT3.SETID
        FROM PS_SET_CNTRL_REC STCT3
       WHERE STCT3.SETCNTRLVALUE = &PAY.BUSINESS_UNIT
         AND STCT3.REC_GROUP_ID  = 'HR_01'
         AND STCT3.RECNAME       = 'DEPT_TBL')
  AND BUD_DT.DEPTID      = $BudgetDeptid
  AND BUD_DT.FISCAL_YEAR = #CA2_FISCAL_YEAR
end-SELECT

  If $DeptBudgetDtFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg23 || $BudgetDeptid
     do PrintLine2
  Else
     Let $OffSet_Group = RTRIM(&BUD_DT.DEPT_OFFSET_GRP, ' ')
     If $OffSet_Group = ''
        Let $ErrDescr1 = $Hpca010_ErrMsg24 || $BudgetDeptid
        do PrintLine2
      Else
        do Get-Dept-Offset-Group
     End-if
  End-if

end-procedure

!***********************************************************************
! GET-DEPT-OFFSET-GROUP
! Verify that there is a current active Department Offset Group defined
! If so, then check that all Payroll Activities are defined for the
! Offset Group. Otherwise, report error.
!***********************************************************************
begin-procedure Get-Dept-Offset-Group

  Let $DeptOffsetGrpFound = 'N'

begin-SELECT
DOG.DEPT_OFFSET_GRP

 Let $DeptOffsetGrpFound = 'Y'

FROM PS_DEPT_OFFSET_GRP DOG

WHERE DOG.DEPT_OFFSET_GRP = $OffSet_Group
  AND DOG.EFFDT =
      (SELECT MAX(DOG2.EFFDT) FROM PS_DEPT_OFFSET_GRP DOG2
        WHERE DOG2.DEPT_OFFSET_GRP = DOG.DEPT_OFFSET_GRP
          AND DOG2.EFFDT            <= $PeriodEndDate)
end-SELECT

  If $DeptOffsetGrpFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg25 || $Offset_Group
     do PrintLine2
  Else
     If $SaveOffSet_Group <> $Offset_Group
        do Verify-Payroll-Activities
        Let $SaveOffSet_Group = $Offset_Group
     End-if
  End-if

end-procedure


!***********************************************************************
! VERIFY-PAYROLL-ACTIVITIES
! Verify that all Payroll Activities are defined for the Offset Group.
!***********************************************************************
begin-procedure Verify-Payroll-Activities

begin-SELECT
X.FIELDNAME
X.FIELDVALUE

  let $FieldName = &X.FIELDNAME
  let $FieldValue = &X.FIELDVALUE
  do Read-Translate-Table
  Let $ErrDescr1 = $Hpca010_ErrMsg26 || $XlatShortName || ' ' || $Hpca010_ErrMsg27 || $OffSet_Group
  do PrintLine1

 FROM PSXLATITEM X
WHERE X.EFF_STATUS  = 'A'
  AND X.FIELDNAME   = 'ACTIVITY'
  AND X.EFFDT       = (SELECT MAX(Y.EFFDT) FROM PSXLATITEM Y
                        WHERE Y.EFFDT <= $PayEndDat
                          AND Y.FIELDNAME   = X.FIELDNAME
                          AND Y.FIELDVALUE  = X.FIELDVALUE)
  AND X.FIELDVALUE  NOT IN
  (SELECT DA.ACTIVITY FROM PS_DEPT_ACTIVITY DA
    WHERE DA.DEPT_OFFSET_GRP = $OffSet_Group
      AND DA.EFFDT = (SELECT MAX(DA2.EFFDT) FROM PS_DEPT_ACTIVITY DA2
                      WHERE DA2.DEPT_OFFSET_GRP  = DA.DEPT_OFFSET_GRP
                        AND DA2.EFFDT <= $PayEndDate))
end-SELECT

end-procedure



!***********************************************************************
! GET-PAY-OTH-EARNS
! Read all of the child PAY_OTH_EARNS records for the current
! PAY_EARNINGS record
!***********************************************************************
begin-procedure Get-Pay-Oth-Earns


begin-SELECT
OTH.ERNCD,
OTH.OTH_HRS,
OTH.OTH_EARNS,
OTH.XREF_NUM,
!OTH.EX_DOC_ID,
!OTH.EX_DOC_TYPE,
OTH.EX_LINE_NBR

  Let $LookupErncd = &OTH.ERNCD
  If $AuditLevel = 'G'
     do Lookup-General-Earnings-Budget
  Else
     do Lookup-Specific-Earnings-Budget
  End-if


FROM PS_PAY_OTH_EARNS OTH
WHERE OTH.COMPANY    = $Company
  AND OTH.PAYGROUP   = $Paygroup
  AND OTH.PAY_END_DT = $PayEndDate
  AND OTH.PAGE_NUM   = &PAY.PAGE_NUM
  AND OTH.LINE_NUM   = &PAY.LINE_NUM
  AND OTH.OFF_CYCLE  = &PAY.OFF_CYCLE
  AND OTH.ADDL_NBR   = &PAY.ADDL_NBR
end-SELECT

end-procedure


!***********************************************************************
! GET-TL-PAY-OTH-EARNS
! Read all of the child PAY_OTH_EARNS records for the current
! PAY_EARNINGS record. Then look up the associated TL Records.
!***********************************************************************
begin-procedure Get-TL-Pay-Oth-Earns

begin-SELECT
OTH2.ERNCD,
OTH2.OTH_HRS,
OTH2.OTH_EARNS,
OTH2.XREF_NUM

  Let $LookupErncd   = RTRIM(&OTH2.ERNCD, ' ')
  Let #LookupXrefNum = &OTH2.XREF_NUM


  If #LookupXrefNum  <> 0
     do Get-Payable-Time
  End-if

FROM PS_PAY_OTH_EARNS OTH2
WHERE OTH2.COMPANY    = $Company
  AND OTH2.PAYGROUP   = $Paygroup
  AND OTH2.PAY_END_DT = $PayEndDate
  AND OTH2.PAGE_NUM   = &PAY.PAGE_NUM
  AND OTH2.LINE_NUM   = &PAY.LINE_NUM
  AND OTH2.OFF_CYCLE  = &PAY.OFF_CYCLE
  AND OTH2.ADDL_NBR   = &PAY.ADDL_NBR
end-SELECT

end-procedure


!***********************************************************************
! LOOKUP-GENERAL-EARNINGS-BUDGET
! Get the current Department Earnings Budget Record. Select the row if
! either the Lookup Earnings Code matches OR there is no matching
! Earnings Code but there is a blank earnings code.
!***********************************************************************
begin-procedure Lookup-General-Earnings-Budget

  Let $GeneralEarningsBudgetFound = 'N'


begin-SELECT
ERN.ACCT_CD,
ERN.HP_FRINGE_GROUP,
ERN.HP_REDIRECT_ACCT

  Let $GeneralEarningsBudgetFound = 'Y'
  Let $LookupAcctcd = &ERN.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'E'
  do  Verify-Acctcd

  If &BUD_DT.DEFAULT_FUND_OPTN = 'A' or &BUD_DT.DEFAULT_FUND_OPTN = 'E'
     Let $FringeGroup = rtrim(&ERN.HP_FRINGE_GROUP,' ')
     If $FringeGroup <> ''
        do Verify-Fringe-Group
     End-if

     If rtrim(&ERN.HP_REDIRECT_ACCT,' ') <> ''
        Let $LookupAcctcd = &ERN.HP_REDIRECT_ACCT
        Let $LookupDate   = $PeriodEndDate
        Let $AcctType     = 'None'
        Let $ErrDescr2    = $Hpca010_ErrMsg28 || $BudgetDeptid
        Let $ErrDescr3    = $BudgetErr || '   ' || $Hpca010_ErrMsg29 || $LookupErncd
        do  Verify-Acctcd
     End-if
  End-if

 FROM PS_DEPT_BUDGET_ERN ERN
WHERE ERN.SETID            = $LookupSetid
  AND ERN.DEPTID           = $LookupDeptid
  AND ERN.FISCAL_YEAR      = #LookupFiscalYr
  AND ERN.POSITION_POOL_ID = $LookupPosPoolId
  AND ERN.SETID_JOBCODE    = $LookupSetidJobcode
  AND ERN.JOBCODE          = $LookupJobcode
  AND ERN.POSITION_NBR     = $LookupPosNbr
  AND ERN.EMPLID           = $LookupEmplid
  AND ERN.EMPL_RCD         = #LookupEmpl_Rcd
  AND (ERN.ERNCD           = $LookupErncd
    OR (ERN.ERNCD = ' '
        AND NOT EXISTS
        (SELECT 'X'
          FROM PS_DEPT_BUDGET_ERN ERN2
         WHERE ERN2.SETID            = $LookupSetid
           AND ERN2.DEPTID           = $LookupDeptid
           AND ERN2.FISCAL_YEAR      = #LookupFiscalYr
           AND ERN2.POSITION_POOL_ID = $LookupPosPoolId
           AND ERN2.SETID_JOBCODE    = $LookupSetidJobcode
           AND ERN2.JOBCODE          = $LookupJobcode
           AND ERN2.POSITION_NBR     = $LookupPosNbr
           AND ERN2.EMPLID           = $LookupEmplid
           AND ERN2.EMPL_RCD         = #LookupEmpl_Rcd
           AND ERN2.ERNCD            = $LookupErncd
           AND ERN2.EFFDT            = &DB.EFFDT
           AND ERN2.EFFSEQ = (SELECT MAX(ERN2B.EFFSEQ)
                                FROM PS_DEPT_BUDGET_ERN ERN2B
                               WHERE ERN2B.SETID            = ERN2.SETID
                                 AND ERN2B.DEPTID           = ERN2.DEPTID
                                 AND ERN2B.FISCAL_YEAR      = ERN2.FISCAL_YEAR
                                 AND ERN2B.POSITION_POOL_ID = ERN2.POSITION_POOL_ID
                                 AND ERN2B.SETID_JOBCODE    = ERN2.SETID_JOBCODE
                                 AND ERN2B.JOBCODE          = ERN2.JOBCODE
                                 AND ERN2B.POSITION_NBR     = ERN2.POSITION_NBR
                                 AND ERN2B.EMPLID           = ERN2.EMPLID
                                 AND ERN2B.EMPL_RCD         = ERN2.EMPL_RCD
                                 AND ERN2B.ERNCD            = ERN2.ERNCD
                                 AND ERN2B.EFFDT            = ERN2.EFFDT)
        )
       )
      )
 AND ERN.EFFDT  = &DB.EFFDT
 AND ERN.EFFSEQ = (SELECT MAX(EFFSEQ)
                     FROM PS_DEPT_BUDGET_ERN ERN2C
                    WHERE ERN2C.SETID            = ERN.SETID
                      AND ERN2C.DEPTID           = ERN.DEPTID
                      AND ERN2C.FISCAL_YEAR      = ERN.FISCAL_YEAR
                      AND ERN2C.POSITION_POOL_ID = ERN.POSITION_POOL_ID
                      AND ERN2C.SETID_JOBCODE    = ERN.SETID_JOBCODE
                      AND ERN2C.JOBCODE          = ERN.JOBCODE
                      AND ERN2C.POSITION_NBR     = ERN.POSITION_NBR
                      AND ERN2C.EMPLID           = ERN.EMPLID
                      AND ERN2C.EMPL_RCD         = ERN.EMPL_RCD
                      AND ERN2C.ERNCD            = ERN.ERNCD
                      AND ERN2C.EFFDT            = ERN.EFFDT)
 AND (ERN.FUNDING_END_DT IS NULL
      OR ERN.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT


  If $GeneralEarningsBudgetFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg30 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr || '   ' || $Hpca010_ErrMsg29 || $LookupErncd
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! LOOKUP-SPECIFIC-EARNINGS-BUDGET
! Get the current Department Earnings Budget Record. Select the row if
! the Lookup Earnings Code matches record earnings code.
!***********************************************************************
begin-procedure Lookup-Specific-Earnings-Budget


  Let $SpecificEarningsBudgetFound = 'N'

begin-SELECT
ERN3.ACCT_CD,
ERN3.HP_FRINGE_GROUP,
ERN3.HP_REDIRECT_ACCT

  Let $LookupAcctcd = &ERN3.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'E'
  do  Verify-Acctcd
  Let $SpecificEarningsBudgetFound = 'Y'

  If &BUD_DT.DEFAULT_FUND_OPTN = 'A' or &BUD_DT.DEFAULT_FUND_OPTN = 'E'

     Let $FringeGroup = rtrim(&ERN3.HP_FRINGE_GROUP,' ')
     If $FringeGroup <> ''
        do Verify-Fringe-Group
     End-if

     If rtrim(&ERN3.HP_REDIRECT_ACCT,' ') <> ''
        Let $LookupAcctcd = &ERN3.HP_REDIRECT_ACCT
        Let $LookupDate   = $PeriodEndDate
        Let $AcctType     = 'None'
        Let $ErrDescr2    = $Hpca010_ErrMsg31 || $BudgetDeptid
        Let $ErrDescr3    = $BudgetErr || '   ' || $Hpca010_ErrMsg29 || $LookupErncd
        do  Verify-Acctcd
     End-if
  End-if


 FROM PS_DEPT_BUDGET_ERN ERN3
WHERE ERN3.SETID            = $LookupSetid
  AND ERN3.DEPTID           = $LookupDeptid
  AND ERN3.FISCAL_YEAR      = #LookupFiscalYr
  AND ERN3.POSITION_POOL_ID = $LookupPosPoolId
  AND ERN3.SETID_JOBCODE    = $LookupSetidJobcode
  AND ERN3.JOBCODE          = $LookupJobcode
  AND ERN3.POSITION_NBR     = $LookupPosNbr
  AND ERN3.EMPLID           = $LookupEmplid
  AND ERN3.EMPL_RCD         = #LookupEmpl_Rcd
  AND ERN3.ERNCD            = $LookupErncd
  AND ERN3.EFFDT = &DB.EFFDT
  AND ERN3.EFFSEQ = (SELECT MAX(EFFSEQ)
                       FROM PS_DEPT_BUDGET_ERN ERN3A
                      WHERE ERN3A.SETID            = ERN3.SETID
                        AND ERN3A.DEPTID           = ERN3.DEPTID
                        AND ERN3A.FISCAL_YEAR      = ERN3.FISCAL_YEAR
                        AND ERN3A.POSITION_POOL_ID = ERN3.POSITION_POOL_ID
                        AND ERN3A.SETID_JOBCODE    = ERN3.SETID_JOBCODE
                        AND ERN3A.JOBCODE          = ERN3.JOBCODE
                        AND ERN3A.POSITION_NBR     = ERN3.POSITION_NBR
                        AND ERN3A.EMPLID           = ERN3.EMPLID
                        AND ERN3A.EMPL_RCD         = ERN3.EMPL_RCD
                        AND ERN3A.ERNCD            = ERN3.ERNCD
                        AND ERN3A.EFFDT            = ERN3.EFFDT)
  AND (ERN3.FUNDING_END_DT IS NULL
    OR ERN3.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $SpecificEarningsBudgetFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg30 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr || '  ' || $Hpca010_ErrMsg29 || $LookupErncd
     do PrintLine2
  End-if


end-procedure


!***********************************************************************
! GET-DEDUCTION-BUDGET
! Read the PAY_DEDUCTION record for the current earnings record.
!***********************************************************************
begin-procedure Get-Deduction-Budget

Begin-SELECT
PDED.PLAN_TYPE,
PDED.BENEFIT_PLAN,
PDED.DEDCD,
PDED.DED_CLASS,
PDED.DED_SLSTX_CLASS,
PDED.DED_CUR

  If $BudgetLevel = 'DoLookup'
     do Get-Dept-Budget-Level
  End-if

  If $BudgetLevel <> 'X'

     If $AuditLevel = 'G'
        do Lookup-General-Deduction-Budget
     Else
        do Lookup-Specific-Deduction-Budget
     End-if

  End-if

FROM PS_PAY_DEDUCTION PDED, PS_PAYGROUP_TBL PG
WHERE PDED.COMPANY    = $Company
  AND PDED.PAYGROUP   = $Paygroup
  AND PDED.PAY_END_DT = $PayEndDate
  AND PDED.OFF_CYCLE  = &PAY.OFF_CYCLE
  AND PDED.PAGE_NUM   = &PAY.PAGE_NUM
  AND PDED.LINE_NUM   = &PAY.LINE_NUM
  AND PDED.SEPCHK     = &PAY.SEPCHK
  AND PDED.DED_CLASS >= 'L'
  AND PG.COMPANY      = PDED.COMPANY
  AND PG.PAYGROUP     = PDED.PAYGROUP
  AND PG.EFFDT =
      (SELECT MAX(PG1.EFFDT)
       FROM  PS_PAYGROUP_TBL PG1
       WHERE PG1.COMPANY  = PG.COMPANY
       AND   PG1.PAYGROUP = PG.PAYGROUP
       AND   PG1.EFFDT   <= PDED.PAY_END_DT)
  AND NOT
      (PDED.DED_CLASS     = 'T'
      AND ((PDED.PLAN_TYPE >= '20' AND PDED.PLAN_TYPE <= '29')
       OR  (PDED.PLAN_TYPE >= '2A' AND PDED.PLAN_TYPE <= '2Z'))
      AND PG.COUNTRY      = 'USA')
end-SELECT

end-procedure


!***********************************************************************
! LOOKUP-GENERAL-DEDUCTION-BUDGET
! Get the current Department Deduction Budget Record.
!***********************************************************************
begin-procedure Lookup-General-Deduction-Budget

  Let $GeneralDeductionBudgetFound = 'N'


begin-SELECT
DED.BUDGET_SEQ,
DED.ACCT_CD,
DED.GL_PAY_TYPE,
DED.BUDGET_AMT,
DED.DIST_PCT,
DED.OVERRIDE_IND

  Let $GeneralDeductionBudgetFound = 'Y'

  If (&DED.OVERRIDE_IND = 'Y' and &BUD_DT.DEFAULT_FUND_OPTN = 'A') or
      &BUD_DT.DEFAULT_FUND_OPTN <> 'A'

     Let $LookupAcctcd = &DED.ACCT_CD
     Let $LookupDate   = $PeriodEndDate
     Let $AcctType     = 'D'
     do  Verify-Acctcd
  End-if


FROM PS_DEPT_BUDGET_DED DED
WHERE DED.SETID            = $LookupSetid
  AND DED.DEPTID           = $LookupDeptid
  AND DED.FISCAL_YEAR      = #LookupFiscalYr
  AND DED.POSITION_POOL_ID = $LookupPosPoolId
  AND DED.SETID_JOBCODE    = $LookupSetidJobcode
  AND DED.JOBCODE          = $LookupJobcode
  AND DED.POSITION_NBR     = $LookupPosNbr
  AND DED.EMPLID           = $LookupEmplid
  AND DED.EMPL_RCD         = #LookupEmpl_Rcd
  AND (  (DED.PLAN_TYPE        = &PDED.PLAN_TYPE
         AND DED.BENEFIT_PLAN  = &PDED.BENEFIT_PLAN
         AND DED.DEDCD         = &PDED.DEDCD
         AND DED.DED_CLASS     = &PDED.DED_CLASS)
     OR ((DED.PLAN_TYPE        = &PDED.PLAN_TYPE
          AND DED.BENEFIT_PLAN = ' '
          AND DED.DEDCD        = ' '
          AND DED.DED_CLASS    = ' ')
        AND NOT EXISTS
        (SELECT 'X'
         FROM PS_DEPT_BUDGET_DED DED2
         WHERE DED2.SETID           = $LookupSetid
          AND DED2.DEPTID           = $LookupDeptid
          AND DED2.FISCAL_YEAR      = #LookupFiscalYr
          AND DED2.POSITION_POOL_ID = $LookupPosPoolId
          AND DED2.SETID_JOBCODE    = $LookupSetidJobcode
          AND DED2.JOBCODE          = $LookupJobcode
          AND DED2.POSITION_NBR     = $LookupPosNbr
          AND DED2.EMPLID           = $LookupEmplid
          AND DED2.EMPL_RCD         = #LookupEmpl_Rcd
          AND DED2.PLAN_TYPE        = &PDED.PLAN_TYPE
          AND DED2.BENEFIT_PLAN     = &PDED.BENEFIT_PLAN
          AND DED2.DEDCD            = &PDED.DEDCD
          AND DED2.DED_CLASS        = &PDED.DED_CLASS
          AND DED2.EFFDT            = &DB.EFFDT
          AND DED2.EFFSEQ =
              (SELECT MAX(DED6.EFFSEQ)
                 FROM PS_DEPT_BUDGET_DED DED6
                WHERE DED6.SETID            = DED2.SETID
                  AND DED6.DEPTID           = DED2.DEPTID
                  AND DED6.FISCAL_YEAR      = DED2.FISCAL_YEAR
                  AND DED6.POSITION_POOL_ID = DED2.POSITION_POOL_ID
                  AND DED6.SETID_JOBCODE    = DED2.SETID_JOBCODE
                  AND DED6.JOBCODE          = DED2.JOBCODE
                  AND DED6.POSITION_NBR     = DED2.POSITION_NBR
                  AND DED6.EMPLID           = DED2.EMPLID
                  AND DED6.EMPL_RCD         = DED2.EMPL_RCD
                  AND DED6.PLAN_TYPE        = DED2.PLAN_TYPE
                  AND DED6.BENEFIT_PLAN     = DED2.BENEFIT_PLAN
                  AND DED6.DEDCD            = DED2.DEDCD
                  AND DED6.DED_CLASS        = DED2.DED_CLASS
                  AND DED6.EFFDT            = DED2.EFFDT)
         )
        )
     OR ((DED.PLAN_TYPE        = ' '
          AND DED.BENEFIT_PLAN = ' '
          AND DED.DEDCD        = ' '
          AND DED.DED_CLASS    = ' ')
        AND NOT EXISTS
        (SELECT 'X'
         FROM PS_DEPT_BUDGET_DED DED3
         WHERE DED3.SETID           = $LookupSetid
          AND DED3.DEPTID           = $LookupDeptid
          AND DED3.FISCAL_YEAR      = #LookupFiscalYr
          AND DED3.POSITION_POOL_ID = $LookupPosPoolId
          AND DED3.SETID_JOBCODE    = $LookupSetidJobcode
          AND DED3.JOBCODE          = $LookupJobcode
          AND DED3.POSITION_NBR     = $LookupPosNbr
          AND DED3.EMPLID           = $LookupEmplid
          AND DED3.EMPL_RCD         = #LookupEmpl_Rcd
          AND DED3.PLAN_TYPE        = &PDED.PLAN_TYPE
          AND DED3.BENEFIT_PLAN     = &PDED.BENEFIT_PLAN
          AND DED3.DEDCD            = &PDED.DEDCD
          AND DED3.DED_CLASS        = &PDED.DED_CLASS
          AND DED3.EFFDT            = &DB.EFFDT
          AND DED3.EFFSEQ =
              (SELECT MAX(DED7.EFFSEQ)
                 FROM PS_DEPT_BUDGET_DED DED7
                WHERE DED7.SETID            = DED3.SETID
                  AND DED7.DEPTID           = DED3.DEPTID
                  AND DED7.FISCAL_YEAR      = DED3.FISCAL_YEAR
                  AND DED7.POSITION_POOL_ID = DED3.POSITION_POOL_ID
                  AND DED7.SETID_JOBCODE    = DED3.SETID_JOBCODE
                  AND DED7.JOBCODE          = DED3.JOBCODE
                  AND DED7.POSITION_NBR     = DED3.POSITION_NBR
                  AND DED7.EMPLID           = DED3.EMPLID
                  AND DED7.EMPL_RCD         = DED3.EMPL_RCD
                  AND DED7.PLAN_TYPE        = DED3.PLAN_TYPE
                  AND DED7.BENEFIT_PLAN     = DED3.BENEFIT_PLAN
                  AND DED7.DEDCD            = DED3.DEDCD
                  AND DED7.DED_CLASS        = DED3.DED_CLASS
                  AND DED7.EFFDT            = DED3.EFFDT)
        )
        AND NOT EXISTS
        (SELECT 'X'
         FROM PS_DEPT_BUDGET_DED DED4
         WHERE DED4.SETID           = $LookupSetid
          AND DED4.DEPTID           = $LookupDeptid
          AND DED4.FISCAL_YEAR      = #LookupFiscalYr
          AND DED4.POSITION_POOL_ID = $LookupPosPoolId
          AND DED4.SETID_JOBCODE    = $LookupSetidJobcode
          AND DED4.JOBCODE          = $LookupJobcode
          AND DED4.POSITION_NBR     = $LookupPosNbr
          AND DED4.EMPLID           = $LookupEmplid
          AND DED4.EMPL_RCD         = #LookupEmpl_Rcd
          AND DED4.PLAN_TYPE        = &PDED.PLAN_TYPE
          AND DED4.BENEFIT_PLAN     = ' '
          AND DED4.DEDCD            = ' '
          AND DED4.DED_CLASS        = ' '
          AND DED4.EFFDT            = &DB.EFFDT
          AND DED4.EFFSEQ =
              (SELECT MAX(DED8.EFFSEQ)
                 FROM PS_DEPT_BUDGET_DED DED8
                WHERE DED8.SETID            = DED4.SETID
                  AND DED8.DEPTID           = DED4.DEPTID
                  AND DED8.FISCAL_YEAR      = DED4.FISCAL_YEAR
                  AND DED8.POSITION_POOL_ID = DED4.POSITION_POOL_ID
                  AND DED8.SETID_JOBCODE    = DED4.SETID_JOBCODE
                  AND DED8.JOBCODE          = DED4.JOBCODE
                  AND DED8.POSITION_NBR     = DED4.POSITION_NBR
                  AND DED8.EMPLID           = DED4.EMPLID
                  AND DED8.EMPL_RCD         = DED4.EMPL_RCD
                  AND DED8.PLAN_TYPE        = DED4.PLAN_TYPE
                  AND DED8.BENEFIT_PLAN     = DED4.BENEFIT_PLAN
                  AND DED8.DEDCD            = DED4.DEDCD
                  AND DED8.DED_CLASS        = DED4.DED_CLASS
                  AND DED8.EFFDT            = DED4.EFFDT)
        )
        )
     )
 AND DED.EFFDT  = &DB.EFFDT
 AND DED.EFFSEQ =
              (SELECT MAX(DED9.EFFSEQ)
                 FROM PS_DEPT_BUDGET_DED DED9
                WHERE DED9.SETID            = DED.SETID
                  AND DED9.DEPTID           = DED.DEPTID
                  AND DED9.FISCAL_YEAR      = DED.FISCAL_YEAR
                  AND DED9.POSITION_POOL_ID = DED.POSITION_POOL_ID
                  AND DED9.SETID_JOBCODE    = DED.SETID_JOBCODE
                  AND DED9.JOBCODE          = DED.JOBCODE
                  AND DED9.POSITION_NBR     = DED.POSITION_NBR
                  AND DED9.EMPLID           = DED.EMPLID
                  AND DED9.EMPL_RCD         = DED.EMPL_RCD
                  AND DED9.PLAN_TYPE        = DED.PLAN_TYPE
                  AND DED9.BENEFIT_PLAN     = DED.BENEFIT_PLAN
                  AND DED9.DEDCD            = DED.DEDCD
                  AND DED9.DED_CLASS        = DED.DED_CLASS
                  AND DED9.EFFDT            = DED.EFFDT)
 AND (DED.FUNDING_END_DT IS NULL
     OR DED.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $GeneralDeductionBudgetFound = 'N'

     move 'PLAN_TYPE'     to $FieldName
     move &PDED.PLAN_TYPE to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $PlanType

     move 'DED_CLASS'     to $FieldName
     move &PDED.DED_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $DedClass

     Let $ErrDescr1 = $Hpca010_ErrMsg32 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg33 || $PlanType || '  ' || $Hpca010_ErrMsg34 || &PDED.BENEFIT_PLAN
     Let $ErrDescr3 = $ErrDescr3 || '  ' || $Hpca010_ErrMsg35 || &PDED.DEDCD || '  ' || $Hpca010_ErrMsg36 || $DedClass
     do PrintLine2
  End-if

end-procedure

!***********************************************************************
! LOOKUP-SPECIFIC-DEDUCTION-BUDGET
! Get the current Department Deduction Budget Record.
!***********************************************************************
begin-procedure Lookup-Specific-Deduction-Budget

  Let $SpecificDeductionBudgetFound = 'N'


begin-SELECT
SDED.BUDGET_SEQ,
SDED.ACCT_CD,
SDED.GL_PAY_TYPE,
SDED.BUDGET_AMT,
SDED.DIST_PCT,
SDED.OVERRIDE_IND

  Let $SpecificDeductionBudgetFound = 'Y'

  If (&DED.OVERRIDE_IND = 'Y' and &BUD_DT.DEFAULT_FUND_OPTN = 'A') or
      &BUD_DT.DEFAULT_FUND_OPTN <> 'A'

     Let $LookupAcctcd = &SDED.ACCT_CD
     Let $LookupDate   = $PeriodEndDate
     Let $AcctType     = 'D'
     do  Verify-Acctcd
  End-if

FROM PS_DEPT_BUDGET_DED SDED
WHERE SDED.SETID            = $LookupSetid
  AND SDED.DEPTID           = $LookupDeptid
  AND SDED.FISCAL_YEAR      = #LookupFiscalYr
  AND SDED.POSITION_POOL_ID = $LookupPosPoolId
  AND SDED.SETID_JOBCODE    = $LookupSetidJobcode
  AND SDED.JOBCODE          = $LookupJobcode
  AND SDED.POSITION_NBR     = $LookupPosNbr
  AND SDED.EMPLID           = $LookupEmplid
  AND SDED.EMPL_RCD         = #LookupEmpl_Rcd
  AND SDED.PLAN_TYPE        = &PDED.PLAN_TYPE
  AND SDED.BENEFIT_PLAN     = &PDED.BENEFIT_PLAN
  AND SDED.DEDCD            = &PDED.DEDCD
  AND SDED.DED_CLASS        = &PDED.DED_CLASS
  AND SDED.EFFDT            = &DB.EFFDT
  AND SDED.EFFSEQ =
              (SELECT MAX(SDED2.EFFSEQ)
                 FROM PS_DEPT_BUDGET_DED SDED2
                WHERE SDED2.SETID            = SDED.SETID
                  AND SDED2.DEPTID           = SDED.DEPTID
                  AND SDED2.FISCAL_YEAR      = SDED.FISCAL_YEAR
                  AND SDED2.POSITION_POOL_ID = SDED.POSITION_POOL_ID
                  AND SDED2.SETID_JOBCODE    = SDED.SETID_JOBCODE
                  AND SDED2.JOBCODE          = SDED.JOBCODE
                  AND SDED2.POSITION_NBR     = SDED.POSITION_NBR
                  AND SDED2.EMPLID           = SDED.EMPLID
                  AND SDED2.EMPL_RCD         = SDED.EMPL_RCD
                  AND SDED2.PLAN_TYPE        = SDED.PLAN_TYPE
                  AND SDED2.BENEFIT_PLAN     = SDED.BENEFIT_PLAN
                  AND SDED2.DEDCD            = SDED.DEDCD
                  AND SDED2.DED_CLASS        = SDED.DED_CLASS
                  AND SDED2.EFFDT            = SDED.EFFDT)
  AND (SDED.FUNDING_END_DT IS NULL
    OR SDED.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $SpecificDeductionBudgetFound = 'N'

     move 'PLAN_TYPE'     to $FieldName
     move &PDED.PLAN_TYPE to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $PlanType

     move 'DED_CLASS'     to $FieldName
     move &PDED.DED_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $DedClass

     Let $ErrDescr1 = $Hpca010_ErrMsg32 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg33 || $PlanType || '  ' || $Hpca010_ErrMsg34 || &PDED.BENEFIT_PLAN
     Let $ErrDescr3 = $ErrDescr3 || '  ' || $Hpca010_ErrMsg35 || &PDED.DEDCD || '  ' || $Hpca010_ErrMsg36 || $DedClass
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! GET-CTX-BUDGET
! Read the PAY_TAX_CAN record for the current earnings record.
!***********************************************************************
begin-procedure Get-Ctx-Budget

Begin-SELECT
PCTX.PROVINCE,
PCTX.TAX_CLASS_CAN,
PCTX.WAGE_LOSS_PLAN


  If $BudgetLevel = 'DoLookup'
     do Get-Dept-Budget-Level
  End-if

  If $BudgetLevel <> 'X'

     If $AuditLevel = 'G'
        do Lookup-General-CTX-Budget
     Else
        do Lookup-Specific-CTX-Budget
     End-if

  End-if

FROM PS_PAY_TAX_CAN PCTX
WHERE PCTX.COMPANY    = $Company
  AND PCTX.PAYGROUP   = $Paygroup
  AND PCTX.TAX_CLASS_CAN IN ('CPR', 'EIR', 'QPR', 'HTX', 'QIR')
  AND PCTX.PAY_END_DT = $PayEndDate
  AND PCTX.OFF_CYCLE  = &PAY.OFF_CYCLE
  AND PCTX.PAGE_NUM   = &PAY.PAGE_NUM
  AND PCTX.LINE_NUM   = &PAY.LINE_NUM
  AND PCTX.SEPCHK     = &PAY.SEPCHK
end-SELECT

end-procedure


!***********************************************************************
! LOOKUP-GENERAL-CTX-BUDGET
! Get the current Department CTX Budget Record.
!***********************************************************************
begin-procedure Lookup-General-CTX-Budget

  Let $GeneralCTXBudgetFound = 'N'


begin-SELECT
CTX.BUDGET_SEQ,
CTX.ACCT_CD,
CTX.GL_PAY_TYPE,
CTX.BUDGET_AMT,
CTX.DIST_PCT

  Let $GeneralCTXBudgetFound = 'Y'
  Let $LookupAcctcd = &CTX.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'C'
  do  Verify-Acctcd

 FROM PS_DEPT_BUDGET_CTX CTX
WHERE CTX.SETID            = $LookupSetid
  AND CTX.DEPTID           = $LookupDeptid
  AND CTX.FISCAL_YEAR      = #LookupFiscalYr
  AND CTX.POSITION_POOL_ID = $LookupPosPoolId
  AND CTX.SETID_JOBCODE    = $LookupSetidJobcode
  AND CTX.JOBCODE          = $LookupJobcode
  AND CTX.POSITION_NBR     = $LookupPosNbr
  AND CTX.EMPLID           = $LookupEmplid
  AND CTX.EMPL_RCD         = #LookupEmpl_Rcd
  AND (  (CTX.PROVINCE          = &PCTX.PROVINCE
          AND CTX.TAX_CLASS_CAN = &PCTX.TAX_CLASS_CAN)
     OR ((CTX.PROVINCE         = ' '
          AND CTX.TAX_CLASS_CAN = ' ' )
        AND NOT EXISTS
        (SELECT 'X'
          FROM PS_DEPT_BUDGET_CTX CTX2
         WHERE CTX2.SETID            = $LookupSetid
           AND CTX2.DEPTID           = $LookupDeptid
           AND CTX2.FISCAL_YEAR      = #LookupFiscalYr
           AND CTX2.POSITION_POOL_ID = $LookupPosPoolId
           AND CTX2.SETID_JOBCODE    = $LookupSetidJobcode
           AND CTX2.JOBCODE          = $LookupJobcode
           AND CTX2.POSITION_NBR     = $LookupPosNbr
           AND CTX2.EMPLID           = $LookupEmplid
           AND CTX2.EMPL_RCD         = #LookupEmpl_Rcd
           AND CTX2.PROVINCE         = &PCTX.PROVINCE
           AND CTX2.TAX_CLASS_CAN    = &PCTX.TAX_CLASS_CAN
           AND CTX2.EFFDT            = &DB.EFFDT
           AND CTX2.EFFSEQ =
            (SELECT MAX(CTX3.EFFSEQ)
               FROM PS_DEPT_BUDGET_CTX CTX3
              WHERE CTX3.SETID            = CTX2.SETID
                AND CTX3.DEPTID           = CTX2.DEPTID
                AND CTX3.FISCAL_YEAR      = CTX2.FISCAL_YEAR
                AND CTX3.POSITION_POOL_ID = CTX2.POSITION_POOL_ID
                AND CTX3.SETID_JOBCODE    = CTX2.SETID_JOBCODE
                AND CTX3.JOBCODE          = CTX2.JOBCODE
                AND CTX3.POSITION_NBR     = CTX2.POSITION_NBR
                AND CTX3.EMPLID           = CTX2.EMPLID
                AND CTX3.EMPL_RCD         = CTX2.EMPL_RCD
                AND CTX3.PROVINCE         = CTX2.PROVINCE
                AND CTX3.TAX_CLASS_CAN    = CTX2.TAX_CLASS_CAN
                AND CTX3.EFFDT            = CTX2.EFFDT)
           )   )
     )
 AND CTX.EFFDT  = &DB.EFFDT
 AND CTX.EFFSEQ =
            (SELECT MAX(CTX4.EFFSEQ)
               FROM PS_DEPT_BUDGET_CTX CTX4
              WHERE CTX4.SETID            = CTX.SETID
                AND CTX4.DEPTID           = CTX.DEPTID
                AND CTX4.FISCAL_YEAR      = CTX.FISCAL_YEAR
                AND CTX4.POSITION_POOL_ID = CTX.POSITION_POOL_ID
                AND CTX4.SETID_JOBCODE    = CTX.SETID_JOBCODE
                AND CTX4.JOBCODE          = CTX.JOBCODE
                AND CTX4.POSITION_NBR     = CTX.POSITION_NBR
                AND CTX4.EMPLID           = CTX.EMPLID
                AND CTX4.EMPL_RCD         = CTX.EMPL_RCD
                AND CTX4.PROVINCE         = CTX.PROVINCE
                AND CTX4.TAX_CLASS_CAN    = CTX.TAX_CLASS_CAN
                AND CTX4.EFFDT            = CTX.EFFDT)
 AND (CTX.FUNDING_END_DT IS NULL
     OR CTX.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $GeneralCTXBudgetFound = 'N'

     move 'TAX_CLASS_CAN'     to $FieldName
     move &PCTX.TAX_CLASS_CAN to $FieldValue
     do Read-Translate-Table
     move $XlatShortName      to $TaxClassCan

     Let $ErrDescr1 = $Hpca010_ErrMsg37 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg38 || &PCTX.PROVINCE  || '  ' || $Hpca010_ErrMsg39 || $TaxClassCan
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! LOOKUP-SPECIFIC-CTX-BUDGET
! Get the current Department CTX Budget Record.
!***********************************************************************
begin-procedure Lookup-Specific-CTX-Budget

  Let $SpecificCTXBudgetFound = 'N'


begin-SELECT
CTX6.BUDGET_SEQ,
CTX6.ACCT_CD,
CTX6.GL_PAY_TYPE,
CTX6.BUDGET_AMT,
CTX6.DIST_PCT

  Let $SpecificCTXBudgetFound = 'Y'
  Let $LookupAcctcd = &CTX6.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'C'
  do  Verify-Acctcd


 FROM PS_DEPT_BUDGET_CTX CTX6
WHERE CTX6.SETID            = $LookupSetid
  AND CTX6.DEPTID           = $LookupDeptid
  AND CTX6.FISCAL_YEAR      = #LookupFiscalYr
  AND CTX6.POSITION_POOL_ID = $LookupPosPoolId
  AND CTX6.SETID_JOBCODE    = $LookupSetidJobcode
  AND CTX6.JOBCODE          = $LookupJobcode
  AND CTX6.POSITION_NBR     = $LookupPosNbr
  AND CTX6.EMPLID           = $LookupEmplid
  AND CTX6.EMPL_RCD         = #LookupEmpl_Rcd
  AND CTX6.PROVINCE         = &PCTX.PROVINCE
  AND CTX6.TAX_CLASS_CAN    = &PCTX.TAX_CLASS_CAN
  AND CTX6.EFFDT            = &DB.EFFDT
  AND CTX6.EFFSEQ =
            (SELECT MAX(CTX7.EFFSEQ)
               FROM PS_DEPT_BUDGET_CTX CTX7
              WHERE CTX7.SETID            = CTX6.SETID
                AND CTX7.DEPTID           = CTX6.DEPTID
                AND CTX7.FISCAL_YEAR      = CTX6.FISCAL_YEAR
                AND CTX7.POSITION_POOL_ID = CTX6.POSITION_POOL_ID
                AND CTX7.SETID_JOBCODE    = CTX6.SETID_JOBCODE
                AND CTX7.JOBCODE          = CTX6.JOBCODE
                AND CTX7.POSITION_NBR     = CTX6.POSITION_NBR
                AND CTX7.EMPLID           = CTX6.EMPLID
                AND CTX7.EMPL_RCD         = CTX6.EMPL_RCD
                AND CTX7.PROVINCE         = CTX6.PROVINCE
                AND CTX7.TAX_CLASS_CAN    = CTX6.TAX_CLASS_CAN
                AND CTX7.EFFDT            = CTX6.EFFDT)
  AND (CTX6.FUNDING_END_DT IS NULL
       OR CTX6.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $SpecificCTXBudgetFound = 'N'

     move 'TAX_CLASS_CAN'     to $FieldName
     move &PCTX.TAX_CLASS_CAN to $FieldValue
     do Read-Translate-Table
     move $XlatShortName      to $TaxClassCan

     Let $ErrDescr1 = $Hpca010_ErrMsg37 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg38 || &PCTX.PROVINCE  || '  ' || $Hpca010_ErrMsg39 || $TaxClassCan
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! GET-TAX-BUDGET
! Read the PAY_TAX record for the current earnings record.
!***********************************************************************
begin-procedure Get-Tax-Budget

Begin-SELECT
PTAX.STATE,
PTAX.LOCALITY,
PTAX.TAX_CLASS

  If $BudgetLevel = 'DoLookup'
     do Get-Dept-Budget-Level
  End-if

  If $BudgetLevel <> 'X'

     If $AuditLevel = 'G'
        do Lookup-General-Tax-Budget
     Else
        do Lookup-Specific-Tax-Budget
     End-if

  End-if

FROM PS_PAY_TAX PTAX
WHERE PTAX.COMPANY    = $Company
  AND PTAX.PAYGROUP   = $Paygroup
  AND PTAX.TAX_CLASS IN ('U', 'S', 'E', 'B', 'R', 'J', 'Q', 'X', 'Z')
  AND PTAX.PAY_END_DT = $PayEndDate
  AND PTAX.OFF_CYCLE  = &PAY.OFF_CYCLE
  AND PTAX.PAGE_NUM   = &PAY.PAGE_NUM
  AND PTAX.LINE_NUM   = &PAY.LINE_NUM
  AND PTAX.SEPCHK     = &PAY.SEPCHK
end-SELECT

end-procedure


!***********************************************************************
! LOOKUP-GENERAL-TAX-BUDGET
! Get the current Department Tax Budget Record.
!***********************************************************************
begin-procedure Lookup-General-Tax-Budget

  Let $GeneralTaxBudgetFound = 'N'


begin-SELECT
TAX.BUDGET_SEQ,
TAX.ACCT_CD,
TAX.GL_PAY_TYPE,
TAX.BUDGET_AMT,
TAX.DIST_PCT

  Let $GeneralTaxBudgetFound = 'Y'
  Let $LookupAcctcd = &TAX.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'T'
  do  Verify-Acctcd


 FROM PS_DEPT_BUDGET_TAX TAX
WHERE TAX.SETID            = $LookupSetid
  AND TAX.DEPTID           = $LookupDeptid
  AND TAX.FISCAL_YEAR      = #LookupFiscalYr
  AND TAX.POSITION_POOL_ID = $LookupPosPoolId
  AND TAX.SETID_JOBCODE    = $LookupSetidJobcode
  AND TAX.JOBCODE          = $LookupJobcode
  AND TAX.POSITION_NBR     = $LookupPosNbr
  AND TAX.EMPLID           = $LookupEmplid
  AND TAX.EMPL_RCD         = #LookupEmpl_Rcd
  AND (  (TAX.STATE         = &PTAX.STATE
          AND TAX.LOCALITY  = &PTAX.LOCALITY
          AND TAX.TAX_CLASS = &PTAX.TAX_CLASS)
     OR ((TAX.STATE         = ' '
          AND TAX.LOCALITY  = ' '
          AND TAX.TAX_CLASS = ' ' )
        AND NOT EXISTS
        (SELECT 'X'
          FROM PS_DEPT_BUDGET_TAX TAX2
         WHERE TAX2.SETID            = $LookupSetid
           AND TAX2.DEPTID           = $LookupDeptid
           AND TAX2.FISCAL_YEAR      = #LookupFiscalYr
           AND TAX2.POSITION_POOL_ID = $LookupPosPoolId
           AND TAX2.SETID_JOBCODE    = $LookupSetidJobcode
           AND TAX2.JOBCODE          = $LookupJobcode
           AND TAX2.POSITION_NBR     = $LookupPosNbr
           AND TAX2.EMPLID           = $LookupEmplid
           AND TAX2.EMPL_RCD         = #LookupEmpl_Rcd
           AND TAX2.STATE            = &PTAX.STATE
           AND TAX2.LOCALITY         = &PTAX.LOCALITY
           AND TAX2.TAX_CLASS        = &PTAX.TAX_CLASS
           AND TAX2.EFFDT            = &DB.EFFDT
           AND TAX2.EFFSEQ =
            (SELECT MAX(TAX3.EFFSEQ)
               FROM PS_DEPT_BUDGET_TAX TAX3
              WHERE TAX3.SETID            = TAX2.SETID
                AND TAX3.DEPTID           = TAX2.DEPTID
                AND TAX3.FISCAL_YEAR      = TAX2.FISCAL_YEAR
                AND TAX3.POSITION_POOL_ID = TAX2.POSITION_POOL_ID
                AND TAX3.SETID_JOBCODE    = TAX2.SETID_JOBCODE
                AND TAX3.JOBCODE          = TAX2.JOBCODE
                AND TAX3.POSITION_NBR     = TAX2.POSITION_NBR
                AND TAX3.EMPLID           = TAX2.EMPLID
                AND TAX3.EMPL_RCD         = TAX2.EMPL_RCD
                AND TAX3.STATE            = TAX2.STATE
                AND TAX3.LOCALITY         = TAX2.LOCALITY
                AND TAX3.TAX_CLASS        = TAX2.TAX_CLASS
                AND TAX3.EFFDT            = TAX2.EFFDT)
     )   )
     )
 AND TAX.EFFDT  = &DB.EFFDT
 AND TAX.EFFSEQ =
            (SELECT MAX(TAX4.EFFSEQ)
               FROM PS_DEPT_BUDGET_TAX TAX4
              WHERE TAX4.SETID            = TAX.SETID
                AND TAX4.DEPTID           = TAX.DEPTID
                AND TAX4.FISCAL_YEAR      = TAX.FISCAL_YEAR
                AND TAX4.POSITION_POOL_ID = TAX.POSITION_POOL_ID
                AND TAX4.SETID_JOBCODE    = TAX.SETID_JOBCODE
                AND TAX4.JOBCODE          = TAX.JOBCODE
                AND TAX4.POSITION_NBR     = TAX.POSITION_NBR
                AND TAX4.EMPLID           = TAX.EMPLID
                AND TAX4.EMPL_RCD         = TAX.EMPL_RCD
                AND TAX4.STATE            = TAX.STATE
                AND TAX4.LOCALITY         = TAX.LOCALITY
                AND TAX4.TAX_CLASS        = TAX.TAX_CLASS
                AND TAX4.EFFDT            = TAX.EFFDT)
 AND (TAX.FUNDING_END_DT IS NULL
     OR TAX.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $GeneralTaxBudgetFound = 'N'

     move 'TAX_CLASS'     to $FieldName
     move &PTAX.TAX_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $TaxClass

     Let $ErrDescr1 = $Hpca010_ErrMsg37 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg40 || &PTAX.STATE || '  ' || $Hpca010_ErrMsg41 || &PTAX.LOCALITY || '  ' || $Hpca010_ErrMsg39 || $TaxClass
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! LOOKUP-SPECIFIC-TAX-BUDGET
! Get the current Department Tax Budget Record.
!***********************************************************************
begin-procedure Lookup-Specific-Tax-Budget

  Let $SpecificTaxBudgetFound = 'N'


begin-SELECT
TAX6.BUDGET_SEQ,
TAX6.ACCT_CD,
TAX6.GL_PAY_TYPE,
TAX6.BUDGET_AMT,
TAX6.DIST_PCT

  Let $SpecificTaxBudgetFound = 'Y'
  Let $LookupAcctcd = &TAX6.ACCT_CD
  Let $LookupDate   = $PeriodEndDate
  Let $AcctType     = 'T'
  do  Verify-Acctcd


 FROM PS_DEPT_BUDGET_TAX TAX6
WHERE TAX6.SETID            = $LookupSetid
  AND TAX6.DEPTID           = $LookupDeptid
  AND TAX6.FISCAL_YEAR      = #LookupFiscalYr
  AND TAX6.POSITION_POOL_ID = $LookupPosPoolId
  AND TAX6.SETID_JOBCODE    = $LookupSetidJobcode
  AND TAX6.JOBCODE          = $LookupJobcode
  AND TAX6.POSITION_NBR     = $LookupPosNbr
  AND TAX6.EMPLID           = $LookupEmplid
  AND TAX6.EMPL_RCD         = #LookupEmpl_Rcd
  AND TAX6.STATE            = &PTAX.STATE
  AND TAX6.LOCALITY         = &PTAX.LOCALITY
  AND TAX6.TAX_CLASS        = &PTAX.TAX_CLASS
  AND TAX6.EFFDT            = &DB.EFFDT
  AND TAX6.EFFSEQ =
            (SELECT MAX(TAX7.EFFSEQ)
               FROM PS_DEPT_BUDGET_TAX TAX7
              WHERE TAX7.SETID            = TAX6.SETID
                AND TAX7.DEPTID           = TAX6.DEPTID
                AND TAX7.FISCAL_YEAR      = TAX6.FISCAL_YEAR
                AND TAX7.POSITION_POOL_ID = TAX6.POSITION_POOL_ID
                AND TAX7.SETID_JOBCODE    = TAX6.SETID_JOBCODE
                AND TAX7.JOBCODE          = TAX6.JOBCODE
                AND TAX7.POSITION_NBR     = TAX6.POSITION_NBR
                AND TAX7.EMPLID           = TAX6.EMPLID
                AND TAX7.EMPL_RCD         = TAX6.EMPL_RCD
                AND TAX7.STATE            = TAX6.STATE
                AND TAX7.LOCALITY         = TAX6.LOCALITY
                AND TAX7.TAX_CLASS        = TAX6.TAX_CLASS
                AND TAX7.EFFDT            = TAX6.EFFDT)
  AND (TAX6.FUNDING_END_DT IS NULL
       OR TAX6.FUNDING_END_DT >= $PeriodEndDate)
end-SELECT

  If $SpecificTaxBudgetFound = 'N'

     move 'TAX_CLASS'     to $FieldName
     move &PTAX.TAX_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $TaxClass

     Let $ErrDescr1 = $Hpca010_ErrMsg37 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg40 || &PTAX.STATE || '  ' || $Hpca010_ErrMsg41 || &PTAX.LOCALITY || '  ' || $Hpca010_ErrMsg39 || $TaxClass
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! VERIFY-ACCTCD
! Verify that there is a current active AcctCd record.
!***********************************************************************
begin-procedure Verify-AcctCd

  Let $AcctCdFound = 'N'

begin-SELECT
ACCT.ACCT_CD,
ACCT.PROJECT_ID,

  Let $AcctCdFound = 'Y'

  If $HP_RC_PDAUDIT.HP_AUDIT_PROJECT = 'Y'

     Let $ACCT.PROJECT_ID = RTRIM(&ACCT.PROJECT_ID, ' ')

     If $ACCT.PROJECT_ID <> ''
        do Verify-Project
     End-if
  End-if

 FROM PS_ACCT_CD_TBL ACCT
WHERE ACCT_CD = $LookupAcctCd
end-SELECT

  If $AcctCdFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg43 || $LookupAcctCd
     do PrintLine2
  Else
     Let $ErrDescr3 = ''
     do Validate-Account-Mapping
  End-if
end-procedure

!***********************************************************************
! VALIDATE-ACCOUNT-MAPPING
! Verify the mapping setup.
!***********************************************************************
begin-procedure Validate-Account-Mapping

  If $AcctType = 'E' and &BUD_DT.HP_ERN_ACCT = 'Y'
     do Check-Earnings-Mapping
  End-if

  If $AcctType = 'D' and &BUD_DT.HP_DED_ACCT = 'Y'
     do Check-Deduction-Mapping
  End-if

  If $AcctType = 'T' and &BUD_DT.HP_TAX_ACCT = 'Y'
     do Check-Tax-Mapping
  End-if

  If $AcctType = 'C' and &BUD_DT.HP_CTX_ACCT = 'Y'
     do Check-CTX-Mapping
  End-if

end-procedure

!***********************************************************************
! CHECK-EARNINGS-MAPPING
!***********************************************************************
begin-procedure Check-Earnings-Mapping

  Let $FoundErn   = 'N'
  Let #RetryCount = 1

  While #RetryCount <= (#HighestErnPriority + 1) and $FoundErn = 'N'

        Let $SrchEmplType     = &JOB.EMPL_TYPE
        Let $SrchEmplClass    = &JOB.CLASS_INDC
        Let $SrchRegTemp      = &JOB.REG_TEMP
        Let $SrchFullPart     = &JOB.FULL_PART_TIME
        if $OrigPaygroup = ''
           Let $SrchPaygroup  = $Paygroup
        else
           Let $SrchPaygroup  = $OrigPaygroup
        end-if
        Let $SrchBusinessUnit = &JOB.BUSINESS_UNIT
        Let $SrchSetidJobcode = &J.SETID
        Let $SrchJobcode      = &PAY.JOBCODE
        Let $SrchSetidSalPlan = &JOB.SETID_SALARY
        Let $SrchSalAdminPlan = &JOB.SAL_ADMIN_PLAN
        Let $SrchErncd        = $LookupErncd
        do Build-Ern-Search-Key
        Let $EmplSearchKey =  $SearchKey

        Let #ErnAcctIdx = 1
        While #ErnAcctIdx <= #ErnAcctMax and $FoundErn = 'N'
              Get  $SrchSetid
                   $SrchEmplType
                   $SrchEmplClass
                   $SrchRegTemp
                   $SrchFullPart
                   $SrchPaygroup
                   $SrchBusinessUnit
                   $SrchSetidJobcode
                   $SrchJobcode
                   $SrchSetidSalPlan
                   $SrchSalAdminPlan
                   $SrchErncd
              From ErnAcctArray(#ErnAcctIdx)
                   Setid
                   EmplType
                   EmplClass
                   RegTemp
                   FullPart
                   Paygroup
                   BusinessUnit
                   SetidJobcode
                   Jobcode
                   SetidSalPlan
                   SalAdminPlan
                   Erncd
              do Build-Ern-Search-Key
              Let $ErnAcctKey = $SearchKey
              If $EmplSearchKey = $ErnAcctKey
                 Let $FoundErn = 'Y'
              Else
                 Add 1 to #ErnAcctIdx
              End-if
        End-While
        Add 1 to #RetryCount
  End-While

  If $FoundErn = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg44 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr || '  ' || $Hpca010_ErrMsg29 || $LookupErncd
     do PrintLine2
  End-if


end-procedure


!***********************************************************************
! BUILD-ERN-SEARCH-KEY
!***********************************************************************

begin-procedure Build-Ern-Search-Key

  Let $SearchKey = Rpad($Setid,5,' ')

  Let #ErnPriorityIdx = 1
  While #ErnPriorityIdx <= #ErnPriorityMax

        Get  $EAPFieldname
             #EAPFieldPriority
             #EAPFieldLength
        From ErnAcctPriority(#ErnPriorityIdx)
             FieldName
             FieldPriority
             FieldLength

        If  Rtrim($EAPFieldname,' ')     = 'EMPL_TYPE' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchEmplType,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'EMPL_CLASS' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchEmplClass,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'REG_TEMP' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchRegTemp,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'FULL_PART_TIME' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchFullPart,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'PAYGROUP' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchPaygroup,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'BUSINESS_UNIT' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchBusinessUnit,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'JOBCODE' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchSetidJobcode,#EAPFieldLength,' ') || Rpad($SrchJobcode,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'SAL_ADMIN_PLAN' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchSetidSalPlan,#EAPFieldLength,' ') || Rpad($SrchSalAdminPlan,#EAPFieldLength,' ')
        End-if

        If  Rtrim($EAPFieldname,' ')     = 'ERNCD' and
           (#EAPFieldPriority = 0 Or #EAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchErncd,#EAPFieldLength,' ')
        End-if


        add 1 to #ErnPriorityIdx
  End-While

end-procedure


!***********************************************************************
! CHECK-DEDUCTION-MAPPING
!***********************************************************************
begin-procedure Check-Deduction-Mapping

  Let $FoundDed   = 'N'
  Let #RetryCount = 1

  While #RetryCount <= (#HighestDedPriority + 1) and $FoundDed = 'N'

        Let $SrchPlanType    = &PDED.PLAN_TYPE
        Let $SrchBenefitPlan = &PDED.BENEFIT_PLAN
        Let $SrchDedcd       = &PDED.DEDCD
        Let $SrchDedClass    = &PDED.DED_CLASS
        do Build-Ded-Search-Key
        Let $EmplSearchKey =  $SearchKey

        Let #DedAcctIdx = 1
        While #DedAcctIdx <= #DedAcctMax and $FoundDed = 'N'

              Get  $SrchPlanType
                   $SrchBenefitPlan
                   $SrchDedcd
                   $SrchDedClass
              From DedAcctArray(#DedAcctIdx)
                   PlanType
                   BenefitPlan
                   Dedcd
                   DedClass

              do Build-Ded-Search-Key
              Let $DedAcctKey = $SearchKey

              If $EmplSearchKey = $DedAcctKey
                 Let $FoundDed = 'Y'
              Else
                 Add 1 to #DedAcctIdx
              End-if
        End-While
        Add 1 to #RetryCount
  End-While

  If $FoundDed = 'N'

     move 'PLAN_TYPE'     to $FieldName
     move &PDED.PLAN_TYPE to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $PlanType

     move 'DED_CLASS'     to $FieldName
     move &PDED.DED_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $DedClass

     Let $ErrDescr1 = $Hpca010_ErrMsg45 || $BudgetDeptid
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg33 || $PlanType || '  ' || $Hpca010_ErrMsg34 || &PDED.BENEFIT_PLAN
     Let $ErrDescr3 = $ErrDescr3 || '  ' || $Hpca010_ErrMsg35 || &PDED.DEDCD || '  ' || $Hpca010_ErrMsg36 || $DedClass
     do PrintLine2
  End-if

end-procedure

!***********************************************************************
! BUILD-DED-SEARCH-KEY
!***********************************************************************
begin-procedure Build-Ded-Search-Key

  Let $SearchKey = Rpad($Setid,5,' ')

  Let #DedPriorityIdx = 1
  While #DedPriorityIdx <= #DedPriorityMax

        Get  $DAPFieldname
             #DAPFieldPriority
             #DAPFieldLength
        From DedAcctPriority(#DedPriorityIdx)
             FieldName
             FieldPriority
             FieldLength

        If  Rtrim($DAPFieldname,' ')     = 'PLAN_TYPE' and
           (#DAPFieldPriority = 0 Or #DAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchPlanType,#DAPFieldLength,' ')
        End-if

        If  Rtrim($DAPFieldname,' ')     = 'BENEFIT_PLAN' and
           (#DAPFieldPriority = 0 Or #DAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchBenefitPlan,#DAPFieldLength,' ')
        End-if

        If  Rtrim($DAPFieldname,' ')     = 'DEDCD' and
           (#DAPFieldPriority = 0 Or #DAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchDedcd,#DAPFieldLength,' ')
        End-if

        If  Rtrim($DAPFieldname,' ')     = 'DED_CLASS' and
           (#DAPFieldPriority = 0 Or #DAPFieldPriority = #RetryCount)
           Let $SearchKey = $SearchKey || Rpad($SrchDedClass,#DAPFieldLength,' ')
        End-if
        add 1 to #DedPriorityIdx
  End-While

end-procedure


!***********************************************************************
! CHECK-TAX-MAPPING
!***********************************************************************
begin-procedure Check-Tax-Mapping

  Let $TaxMapFound = 'N'

begin-SELECT
TAD.ACCOUNT

  Let $TaxMapFound = 'Y'

 FROM PS_HP_TAX_ACCT_DTL TAD
WHERE TAD.COMPANY    = $Company
  AND TAD.TAX_CLASS  = &PTAX.TAX_CLASS
  AND TAD.EFFDT = (SELECT MAX(TAD2.EFFDT)
                     FROM PS_HP_TAX_ACCT_DTL TAD2
                    WHERE TAD2.COMPANY   = TAD.COMPANY
                      AND TAD2.TAX_CLASS = TAD.TAX_CLASS
                      AND TAD2.EFFDT <= $PeriodEndDate)
end-SELECT

  If $TaxMapFound = 'N'

     move 'TAX_CLASS'     to $FieldName
     move &PTAX.TAX_CLASS to $FieldValue
     do Read-Translate-Table
     move $XlatShortName  to $TaxClass

     Let $ErrDescr1 = $Hpca010_ErrMsg46 || $Company || '   ' || $Hpca010_ErrMsg39 || $TaxClass
     Let $ErrDescr2 = $BudgetErr
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! CHECK-CTX-MAPPING
!***********************************************************************
begin-procedure Check-CTX-Mapping

  Let $CTXMapFound = 'N'

begin-SELECT
CTAD.ACCOUNT

  Let $CTXMapFound = 'Y'

 FROM PS_HP_CTX_ACCT_DTL CTAD
WHERE CTAD.COMPANY        = $Company
  AND CTAD.WAGE_LOSS_PLAN = &PCTX.WAGE_LOSS_PLAN
  AND CTAD.TAX_CLASS_CAN  = &PCTX.TAX_CLASS_CAN
  AND CTAD.EFFDT = (SELECT MAX(CTAD2.EFFDT)
                     FROM PS_HP_CTX_ACCT_DTL CTAD2
                    WHERE CTAD2.COMPANY        = CTAD.COMPANY
                      AND CTAD2.WAGE_LOSS_PLAN = CTAD.WAGE_LOSS_PLAN
                      AND CTAD2.TAX_CLASS_CAN  = CTAD.TAX_CLASS_CAN
                      AND CTAD2.EFFDT         <= $PeriodEndDate)
end-SELECT

  If $CTXMapFound = 'N'

     move 'TAX_CLASS_CAN'     to $FieldName
     move &PCTX.TAX_CLASS_CAN to $FieldValue
     do Read-Translate-Table
     move $XlatShortName      to $TaxClassCan

     Let $ErrDescr1 = $Hpca010_ErrMsg46 || $Company
     Let $ErrDescr2 = $BudgetErr
     Let $ErrDescr3 = $Hpca010_ErrMsg47 || &PCTX.WAGE_LOSS_PLAN || '   ' || $Hpca010_ErrMsg39 || $TaxClassCan
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! VERIFY-PROJECT
! Verify that there is a current active Project record.
!***********************************************************************
begin-procedure Verify-Project

  Let $ProjectFound = 'N'

begin-SELECT
PROJ.PROJECT_ID

  Let $ProjectFound = 'Y'

 FROM PS_PROJECT PROJ
WHERE PROJ.BUSINESS_UNIT = &PAY.BUSINESS_UNIT
  AND PROJ.PROJECT_ID    = $ACCT.PROJECT_ID
  AND PROJ.EFF_STATUS    = 'A'

end-SELECT

  If $ProjectFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg42 || $ACCT.PROJECT_ID
     Let $ErrDescr2 = $Hpca010_ErrMsg48 || $LookupAcctCd
     do PrintLine2
  End-if
end-procedure


!***********************************************************************
! GET-JOBCODE-SETID
! Get the Setid for the Jobcode.
!***********************************************************************
begin-procedure Get-Jobcode-Setid

  Let $JobcodeSetidFound = 'N'

begin-SELECT
JS.SETID

  Let $JobcodeSetidFound = 'Y'

 FROM PS_SET_CNTRL_REC JS
WHERE JS.SETCNTRLVALUE = &PAY.BUSINESS_UNIT
  AND JS.REC_GROUP_ID  = 'HR_02'
  AND JS.RECNAME       = 'JOBCODE_TBL'
end-SELECT
end-procedure


!***********************************************************************
! GET-PAYABLE-TIME
! Get the TL_PAYABLE_TIME record.
!***********************************************************************
begin-procedure Get-Payable-Time

  Let $FirstPayableTime = 'Y'

begin-SELECT
PT.ACCT_CD,
PT.TASKGROUP

  Let $PT.TASKGROUP = RTRIM(&PT.TASKGROUP, ' ')

  If $PT.TASKGROUP = ''
     let $LookupAcctcd = RTRIM(&PT.ACCT_CD, ' ')
  Else
     do Get-Template
     If $TemplateFound = 'Y'
        Let $LookupAcctcd = RTRIM(&PT.ACCT_CD, ' ')
     Else
        Let $LookupAcctcd = RTRIM(&PAY.ACCT_CD, ' ')
     End-if
  End-if

  If $LookupAcctcd = ''
     If $FirstPayableTime = 'Y'
        Let $FirstPayableTime = 'N'

        If $BudgetLevel = 'DoLookup'
           do Get-Dept-Budget-Level
        End-if

        If $BudgetLevel <> 'X'

           If $AuditLevel = 'G'
              do Lookup-General-Earnings-Budget
           Else
              do Lookup-Specific-Earnings-Budget
           End-if

        End-if

     End-if
  Else
    Let $LookupDate = $PeriodEndDate
    Let $AcctType     = 'E'
    do  Verify-Acctcd
  End-if

 FROM PS_TL_PAYABLE_TIME PT, PS_TL_XREF_TBL XRF
WHERE XRF.XREF_NUM     = #LookupXrefNum
  AND PT.SEQ_NBR       = XRF.SEQ_NBR
  AND PT.LBR_DIST_AMT  <> 0
  AND PT.PAY_SYSTEM    = 'NA'
  AND PT.PAY_SYSTEM    = XRF.PAY_SYSTEM
end-SELECT

end-procedure


!***********************************************************************
! GET-TEMPLATE
!***********************************************************************
begin-procedure Get-Template

  Let $TemplateFound = 'N'

begin-SELECT
TSK.TASKGROUP

  Let $TemplateFound = 'Y'

 FROM PS_TL_TASKGRP_TBL TSK
WHERE TSK.TASKGROUP        = $PT.TASKGROUP
  AND TSK.COMMIT_ACCTG_FLG = 'Y'
  AND TSK.EFF_STATUS       = 'A'
  AND TSK.EFFDT = (SELECT MAX(T2.EFFDT)
                     FROM PS_TL_TASKGRP_TBL T2
                    WHERE T2.TASKGROUP = TSK.TASKGROUP
                      AND T2.EFFDT    <= $PayEndDate)
end-SELECT

end-procedure

!***********************************************************************
! VERIFY-FRINGE-GROUP
!***********************************************************************
begin-procedure Verify-Fringe-Group

  Let $FringeGroupFound = 'N'

begin-SELECT
FG.HP_FRINGE_GROUP

  Let $FringeGroupFound = 'Y'

 FROM PS_HP_FRINGE_GROUP FG
WHERE FG.HP_FRINGE_GROUP        = $FringeGroup
  AND FG.EFFDT = (SELECT MAX(FG2.EFFDT)
                     FROM PS_HP_FRINGE_GROUP FG2
                    WHERE FG2.HP_FRINGE_GROUP = FG.HP_FRINGE_GROUP
                      AND FG2.EFFDT    <= $PeriodEndDate)
end-SELECT

  If $FringeGroupFound = 'N'
     Let $ErrDescr1 = $Hpca010_ErrMsg49 || $FringeGroup
     Let $ErrDescr2 = $Hpca010_ErrMsg50 || $BudgetDeptid
     Let $ErrDescr3 = $BudgetErr || '  ' || $Hpca010_ErrMsg29 || $LookupErncd
     do PrintLine2
  End-if

end-procedure


!***********************************************************************
! GET-INSTALLATION
! Get the INSTALLATION record.
!***********************************************************************
begin-procedure Get-Installation

begin-SELECT
I.TL

  Let $TL = RTRIM(&I.TL, ' ')

FROM PS_INSTALLATION I
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Ignore
! dummy procedure to avoid SQL error message
end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'stdapi.sqc'    !Update Process API
#Include 'hpcarctl.sqc'  !Get-Run-Control procedure
