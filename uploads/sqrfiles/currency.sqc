!***********************************************************************
! CURRENCY.SQC: Recalculate compensation rate using new currency rates *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:39:05                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!  Last Modified : Jun 19  - Platform Test - DB2 invlaid count operand *
!***********************************************************************
!**********************************************************************************************
BEGIN-PROCEDURE Recalc-Job-Comprate($emplid,#empl_rcd,$job_effdt,#job_effseq,$job_currency,
                                    $job_frequency,#job_std_hours,$job_std_hrs_freq,#job_fte,
                                    $exchg_effdt,:#job_comprate,:$diff_curr)
!
! This procedure returns a newly calculated JOB comprate expressed in the JOB currency and
! frequency and using currency exchange rates based on the $exchg_effdt input parameter.
!
! Input parameters: $EMPLID - Employee ID
!                   #EMPL_RCD - Employee Record #
!                   $JOB_EFFDT - JOB Effective Date
!                   #JOB_EFFSEQ - JOB Effective Sequence
!                   $JOB_CURRENCY - JOB Currency Code
!                   $JOB_FREQUENCY - JOB Compensation Frequency
!                   #JOB_STD_HOURS - JOB Standard Hours
!                   $JOB_STD_HRS_FREQ - JOB Standard Work Period
!                   #JOB_FTE - JOB FTE
!                   $EXCHG_EFFDT - Date used to recalculate currency amounts
! Output parameters: #JOB_COMPRATE - Recalculated JOB Comprate
!                    $DIFF_CURR - Different currency flag
!
! Note: Depending on the calling SQR, #JOB_STD_HOURS and $JOB_STD_HRS_FREQ could also be
!       PAID_HOURS and PAID_HRS_FREQ if the Country of the JOB.REG_REGION is 'FRA'.
!**********************************************************************************************
  #ifdef debugx
    display 'Entering CURRENCY.SQC: Recalc-Job-Comprate'
    #ifdef debugy
       display ' Input $emplid: ' noline
       display $emplid
       display ' Input #empl_rcd: ' noline
       display #empl_rcd 99
       display ' Input $job_effdt: ' noline
       display $job_effdt
       display ' Input #job_effseq: ' noline
       display #job_effseq 99
       display ' Input $job_currency: ' noline
       display $job_currency
       display ' Input $job_frequency: ' noline
       display $job_frequency
       display ' Input #job_std_hours: ' noline
       display #job_std_hours
       display ' Input $job_std_hrs_freq: ' noline
       display $job_std_hrs_freq
       display ' Input #job_fte: ' noline
       display #job_fte
       display ' Input $exchg_effdt: ' noline
       display $exchg_effdt
    #end-if
  #end-if
  let $diff_curr = 'N'
  let #comp_row = 0

! Determine if rate code groups are used
  do Get-Ratecd-Group-SW($use_rtcd_group_sw)
! Select the number of base pay COMPENSATION rows
  do Get-Base-Pay-Count($emplid,#empl_rcd,$job_effdt,#job_effseq,#base_pay_count)

  #define array_size 50
  #ifdef debugx
    #ifdef debugy
       display ' #base_pay_count: ' noline
       display #base_pay_count 99
    #end-if
  #end-if

! Create array to hold base pay converted comprates
  create-array name=Comprates size={array_size}
     field=rate_type:char=' '
     field=rate_code_group:char=' '
     field=comp_pct:float=0
     field=convert_comprate:float=0

begin-SELECT
COMP.COMP_RATECD
  let $comp_ratecd = &COMP.COMP_RATECD
COMP.COMP_RATE_POINTS
COMP.COMPRATE
  let #comprate = &COMP.COMPRATE
COMP.COMP_PCT
  let #comp_pct = &COMP.COMP_PCT
COMP.COMP_FREQUENCY
  let $comp_frequency = &COMP.COMP_FREQUENCY
COMP.CURRENCY_CD
  let $comp_currency = &COMP.CURRENCY_CD
COMP.RATE_CODE_GROUP
  let $rate_code_group = &COMP.RATE_CODE_GROUP
COMP.FTE_INDICATOR
  let $fte_indicator = &COMP.FTE_INDICATOR

  ! Determine if this COMPENSATION rate code is part of base pay
  do Get-Comp-Base-Pay-SW($comp_ratecd,$job_effdt,$comp_base_pay_sw,$comp_rate_type)

  ! Only base pay COMPENSATION rows are included
  if $comp_base_pay_sw = 'Y'

     ! Convert comprate for rate types that are not percentage first
     if $comp_rate_type <> 'PC'

        ! Convert COMPRATE to the JOB currency if required
        if $comp_currency <> $job_currency
           do ConvertCurrency(#comprate,$comp_currency,$job_currency,$_BaseRtType,$exchg_effdt,
                              #curr_comprate,'W')
           let $diff_curr = 'Y'
        else
           let #curr_comprate = #comprate
        end-if

        ! Convert COMPRATE to the JOB frequency if required
        if $comp_frequency <> $job_frequency
           do Convert-Frequency($job_effdt,#curr_comprate,$comp_frequency,$job_frequency,
                                #job_std_hours,$job_std_hrs_freq,#freq_comprate)
        else
           let #freq_comprate = #curr_comprate
        end-if

       ! Convert COMPRATE using JOB FTE if indicated
       if $fte_indicator = 'Y'
           let #convert_comprate = #freq_comprate * #job_fte
        else
           let #convert_comprate = #freq_comprate
        end-if

        #ifdef debugx
           #ifdef debugy
              display ' #comp_row: ' noline
              display #comp_row 99
              display ' #comprate: ' noline
              display #comprate
              display ' #curr_comprate: ' noline
              display #curr_comprate
              display ' #freq_comprate: ' noline
              display #freq_comprate
              display ' #convert_comprate: ' noline
              display #convert_comprate
           #end-if
        #end-if

        ! Load variables into array
        put $comp_rate_type $rate_code_group #convert_comprate
            into Comprates(#comp_row) rate_type rate_code_group convert_comprate
     else
        put $comp_rate_type $rate_code_group #comp_pct
            into Comprates(#comp_row) rate_type rate_code_group comp_pct
     end-if

     let #comp_row = #comp_row + 1
     if #comp_row = #base_pay_count
        let #job_comprate = 0
        let #i = 0
        while #i < #base_pay_count

           ! Get all variables from Comprates array
           get $rate_type $rate_group #pct #convert_comprate from Comprates(#i)
                rate_type rate_code_group comp_pct convert_comprate

           ! If rate type is percentage, loop through the Comprates array again to sum up
           ! the #conv_comprate amounts for non-percentage rate codes for the rate code group.
           ! If $rate_group is blank, the percentage applies to all non-percentage rate codes
           ! regardless of rate code group.
           if $rate_type = 'PC'
              let #nonpct_comprate = 0
              let #j = 0
              while #j < #base_pay_count
                 get $rate_type2 $rate_group2 #conv_comprate from Comprates(#j)
                      rate_type rate_code_group convert_comprate
                 if $rate_type2 <> 'PC'
                    if isblank($rate_group)
                       let #nonpct_comprate = #nonpct_comprate + #conv_comprate
                    else
                       if $use_rtcd_group_sw = 'Y' and $rate_group2 = $rate_group
                          let #nonpct_comprate = #nonpct_comprate + #conv_comprate
                       end-if
                    end-if
                 end-if
                 let #j = #j + 1
              end-while

              ! Multiply the sum of #conv_comprate values for the rate code group by the
              ! percentage value for that group
              let #convert_comprate = #nonpct_comprate * (#pct / 100)
              put #convert_comprate into Comprates(#i) convert_comprate

           end-if
           let #job_comprate = #job_comprate + #convert_comprate

           #ifdef debugx
              #ifdef debugy
                 display ' #i: ' noline
                 display #i
                 display ' $rate_type: ' noline
                 display $rate_type
                 display ' #nonpct_comprate: ' noline
                 display #nonpct_comprate
                 display ' #convert_comprate: ' noline
                 display #convert_comprate
              #end-if
           #end-if
           let #i = #i + 1
        end-while
        #ifdef debugx
           #ifdef debugy
              display ' #job_comprate: ' noline
              display #job_comprate
              display ' $diff_curr: ' noline
              display $diff_curr
           #end-if
        #end-if
     end-if
  end-if

FROM PS_COMPENSATION COMP
WHERE COMP.EMPLID     = $emplid
  AND COMP.EMPL_RCD  = #empl_rcd
  AND COMP.EFFDT      = $job_effdt
  AND COMP.EFFSEQ     = #job_effseq
end-SELECT

#ifdef debugx
  display 'Exiting CURRENCY.SQC: Recalc-Job-Comprate'
#end-if

END-PROCEDURE Recalc-Job-Comprate

!**********************************************************************************************
BEGIN-PROCEDURE Get-Ratecd-Group-SW(:$use_rtcd_group_sw)
!
! This procedure determines if compensation rate code groups are being used.
!
! Output parameters: $USE_RTCD_GROUP_SW - Rate code group flag
!**********************************************************************************************
#ifdef debugx
  display 'Entering CURRENCY.SQC: Get-Ratecd-Group-SW'
#end-if

begin-SELECT
USE_RTCD_GROUP_SW
  let $use_rtcd_group_sw = &USE_RTCD_GROUP_SW

FROM PS_INSTALLATION
end-SELECT

#ifdef debugx
  display 'Exiting CURRENCY.SQC: Get-Ratecd-Group-SW'
#end-if

END-PROCEDURE Get-Ratecd-Group-SW

!**********************************************************************************************
BEGIN-PROCEDURE Get-Base-Pay-Count($emplid,#empl_rcd,$job_effdt,#job_effseq,:#base_pay_count)
!
! This procedure counts the number of base pay COMPENSATION rows for the given emplid,
! empl_rcd, job_effdt, and job_effseq.
!
! Input parameters: $EMPLID - Employee ID
!                   #EMPL_RCD - Employee Record #
!                   $JOB_EFFDT - JOB Effective Date
!                   #JOB_EFFSEQ - JOB Effective Sequence
! Output parameters: #BASE_PAY_COUNT - Count of base pay compensation rows
!**********************************************************************************************
#ifdef debugx
  display 'Entering CURRENCY.SQC: Get-Base-Pay-Count'
#end-if

begin-SELECT
COUNT(*) &COUNT
  let #base_pay_count = &COUNT

FROM PS_COMPENSATION C, PS_COMP_RATECD_TBL R
WHERE C.EMPLID           = $emplid
  AND C.EMPL_RCD        = #empl_rcd
  AND C.EFFDT            = $job_effdt
  AND C.EFFSEQ           = #job_effseq
  AND C.COMP_RATECD      = R.COMP_RATECD
  AND R.COMP_BASE_PAY_SW = 'Y'
end-SELECT

#ifdef debugx
  display 'Exiting CURRENCY.SQC: Get-Base-Pay-Count'
#end-if

END-PROCEDURE Get-Base-Pay-Count

!**********************************************************************************************
BEGIN-PROCEDURE Get-Comp-Base-Pay-SW($comp_ratecd,$job_effdt,:$comp_base_pay_sw,:$comp_rate_type)
!
! This procedure returns
! using currency exchange rates based on the $exchg_effdt input parameter.
!
! Input parameters: $COMP_RATECD - Rate Code
!                   $JOB_EFFDT - Effective Date
! Output parameters: $COMP_BASE_PAY_SW - Base Pay flag
!                    $COMP_RATE_TYPE - Rate Type
!**********************************************************************************************
#ifdef debugx
  display 'Entering CURRENCY.SQC: Get-Comp-Base-Pay-SW'
#end-if

begin-SELECT
RATECD.COMP_RATECD
RATECD.EFFDT
RATECD.COMP_BASE_PAY_SW
  let $comp_base_pay_sw = &RATECD.COMP_BASE_PAY_SW
RATECD.COMP_RATE_TYPE
  let $comp_rate_type = &RATECD.COMP_RATE_TYPE

FROM PS_COMP_RATECD_TBL RATECD
WHERE RATECD.COMP_RATECD = $comp_ratecd
  AND RATECD.EFFDT       = (SELECT MAX(EFFDT) FROM PS_COMP_RATECD_TBL
                         WHERE RATECD.COMP_RATECD = COMP_RATECD
                           AND EFFDT <= $job_effdt)
  AND RATECD.EFF_STATUS  = 'A'
end-SELECT

#ifdef debugx
  display 'Exiting CURRENCY.SQC: Get-Comp-Base-Pay-SW'
#end-if

END-PROCEDURE Get-Comp-Base-Pay-SW

#include 'number.sqc'
#include 'frquency.sqc'
