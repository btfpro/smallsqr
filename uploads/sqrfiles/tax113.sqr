!***********************************************************************
!  TAX113   :  Reset W-5 EIC Report/Update                             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/06/08:12:44:27                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  702214                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP99998       E&G 7.51 AU Merge                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup32.sqc' !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX113' to $ReportID
  move 'TAX113' to $Program
  move 'Reset W-5 EIC Employees - Report/Update Report' to $ReportTitle
  display ''
  display 'TAX113 Report'

  do Init-DateTime
  do Init-Number
  do Get-EandG                                                          !HP99999
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-Current-DateTime
  do Initialization
end-procedure

begin-procedure Initialization
create-array name=EMPDATA size=100    field=EMPLID:char
                                      field=EFFDT:char
                                      field=DATE_OF_ENTRY:char
                                      field=COMPANY:char
                                      field=SPECIAL_FWT_STATUS:char
                                      field=FWT_MAR_STATUS:char
                                      field=FWT_ALLOWANCES:number
                                      field=FWT_ADDL_AMT:number
                                      field=FWT_ADDL_PCT:number
                                      field=FUT_EXEMPT:char
                                      field=EIC_STATUS:char
                                      field=STATUTORY_EE:char
                                      field=DECEASED:char
                                      field=PENSION_PLAN:char
                                      field=LEGAL_REP:char
                                      field=DEFERRED_COMP:char
                                      field=USE_TOTAL_WAGE:char
                                      field=W4_PRCSS:char
                                      field=W5_PRCSS:char
                                      field=LOCK_IN_RECVD:char
                                      field=LOCK_IN_LIMIT:number
                                      field=COUNTRY:char
                                      field=TREATY_ID:char
                                      field=TREATY_EXP_DT:char
                                      field=FORM_1001_RECD:char
                                      field=FORM_1001_SUBMT_DT:char
                                      field=FORM_1001_EXP_DT:char
                                      field=FORM_8233_RECD:char
                                      field=FORM_8233_SUBMT_DT:char
                                      field=FORM_8233_EXP_DT:char
                                      field=TAXPAYER_ID_NO:char
                                      field=FORM_1078_RECD:char
                                      field=FORM_1078_SUBMT_DT:char
                                      field=THIRDPARTY_SICKPAY:char
                                      field=MARRIED_FILE_SINGL:char
                                      field=NRA_EXEMPT_WHRULE:char
                                      field=NQDC_W2_RPTG:char

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     let $Udate    = $RC_PAY.ThruDate
     let $A        = ''''
     let $UdateA   = $A || $Udate || $A
     let $Duedt  = $RC_PAY.AsOfDate
     do Format-DateTime($Duedt, $DueDate, {DEFYMD}, '', '')
     let $Scompany = $RC_PAY.Company
     let $Scope    = $RC_PAY.Reporting_Medium
     let $Mode     = $RC_PAY.Which_Date
  end-if

!--- GET A JAN-01 DATE FOR THE YEAR
let $Jan01dt  = ''
let $Jan01dt_in  = ''

do Convert-To-DTU-Date($Duedt, $Duedt_out)
do DTU-PARSE-DATE($Duedt_out, #due_year, #due_mm, #due_dd)
let #due_year = #due_year - 1
do dtu-format-date (#due_year, 01, 01, $Jan01dt_in)
do Convert-From-DTU-Date($Jan01dt_in, $Jan01dt)

display $Jan01dt

move ' ' to $PEMPLID
move 0 to #I
move 'Y' to $Notify
move 'EIC_STATUS' to $Fieldname
move 'N' to $Fieldvalue
do Read-Translate-Table
move $XlatLongName to $Nonestatus
end-procedure

begin-heading 9
  #Include 'stdhdg01.sqc'
end-heading

begin-procedure Process-Main
Do TAX113-Headings
if $Scope='A' or $Scope ='D'
   do All-Employees
else
   do By-Company
end-if
end-procedure

begin-procedure All-Employees

  do Get-Fed-Tax-Data

  do EMPLID-Check-A
  if $Notify='Y'
    do Print-Rows
  end-if

end-procedure

begin-procedure By-Company
if RTRIM($SCompany,' ')=''
   print 'Error: Scope selected is By Company, but no company was entered' (+1,3)
   Stop Quiet
end-if

do Select-FED-Data-B

do Emplid-Check-B
if $notify='Y'
   do Print-Rows
end-if

end-procedure

begin-procedure Emplid-Check-A
if $PEMPLID <> &A.EMPLID
   or  $PCOMPANY <> &A.COMPANY
   if $Notify='Y' and $PEMPLID <> ''
       do Store-Row
       do Print-Rows
   end-if
   let $Notify='Y'
else
   if $Notify='Y'
       do Store-row
   end-if
end-if

let $PEMPLID            = &A.EMPLID
let $PEFFDT             = &A.EFFDT
let $PDATE_OF_ENTRY     = &A.DATE_OF_ENTRY
let $PCOMPANY           = &A.COMPANY
let $PFWTSTATUS         = &A.SPECIAL_FWT_STATUS
let $PMARSTATUS         = &A.FWT_MAR_STATUS
let #PFWTALLW           = &A.FWT_ALLOWANCES
let #PFWTAMT            = &A.FWT_ADDL_AMT
let #PFWTPCT            = &A.FWT_ADDL_PCT
let $PFUT_EXEMPT        = &A.FUT_EXEMPT
let $PEIC_STATUS        = &A.EIC_STATUS
let $PSTATUTORY_EE      = &A.STATUTORY_EE
let $PDECEASED          = &A.DECEASED
let $PPENSION_PLAN      = &A.PENSION_PLAN
let $PLEGAL_REP         = &A.LEGAL_REP
let $PDEFERRED_COMP     = &A.DEFERRED_COMP
let $PUSE_TOTAL_WAGE    = &A.USE_TOTAL_WAGE
let $PW4PRCSS           = &A.W4_PRCSS
let $PW5PRCSS           = &A.W5_PRCSS
let $PLOCK_IN_RECVD     = &A.LOCK_IN_RECVD
let #PLOCK_IN_LIMIT     = &A.LOCK_IN_LIMIT
let $PCOUNTRY           = &A.COUNTRY
let $PTREATY_ID         = &A.TREATY_ID
let $PTREATY_EXP_DT     = &A.TREATY_EXP_DT
let $PFORM_1001_RECD    = &A.FORM_1001_RECD
let $PFORM_1001_SUBMT   = &A.FORM_1001_SUBMT_DT
let $PFORM_1001_EXP_DT  = &A.FORM_1001_EXP_DT
let $PFORM_8233_RECD    = &A.FORM_8233_RECD
let $PFORM_8233_SUBMT   = &A.FORM_8233_SUBMT_DT
let $PFORM_8233_EXP_DT  = &A.FORM_8233_EXP_DT
let $PTAXPAYER_ID_NO    = &A.TAXPAYER_ID_NO
let $PFORM_1078_RECD    = &A.FORM_1078_RECD
let $PFORM_1078_SUBMT   = &A.FORM_1078_SUBMT_DT
let $PTHIRDPARTY_SICKPAY = &A.THIRDPARTY_SICKPAY
let $PMARRIED_FILE_SINGL = &A.MARRIED_FILE_SINGL
let $PNRA_EXEMPT_WHRULE  = &A.NRA_EXEMPT_WHRULE
let $PNQDC_W2_RPTG       = &A.NQDC_W2_RPTG

end-procedure

begin-procedure Emplid-Check-B

if $PEMPLID <> &B.EMPLID
   if $Notify='Y' and $PEMPLID <> ''
       do Store-Row
       do Print-Rows
   end-if
   let $Notify='Y'
end-if
if $PEMPLID = &B.EMPLID
   if $Notify='Y'
       do Store-row
   end-if
end-if

let $PEMPLID            = &B.EMPLID
let $PEFFDT             = &B.EFFDT
let $PDATE_OF_ENTRY     = &B.DATE_OF_ENTRY
let $PCOMPANY           = &B.COMPANY
let $PFWTSTATUS         = &B.SPECIAL_FWT_STATUS
let $PMARSTATUS         = &B.FWT_MAR_STATUS
let #PFWTALLW           = &B.FWT_ALLOWANCES
let #PFWTAMT            = &B.FWT_ADDL_AMT
let #PFWTPCT            = &B.FWT_ADDL_PCT
let $PFUT_EXEMPT        = &B.FUT_EXEMPT
let $PEIC_STATUS        = &B.EIC_STATUS
let $PSTATUTORY_EE      = &B.STATUTORY_EE
let $PDECEASED          = &B.DECEASED
let $PPENSION_PLAN      = &B.PENSION_PLAN
let $PLEGAL_REP         = &B.LEGAL_REP
let $PDEFERRED_COMP     = &B.DEFERRED_COMP
let $PUSE_TOTAL_WAGE    = &B.USE_TOTAL_WAGE
let $PW4PRCSS           = &B.W4_PRCSS
let $PW5PRCSS           = &B.W5_PRCSS
let $PLOCK_IN_RECVD     = &B.LOCK_IN_RECVD
let #PLOCK_IN_LIMIT     = &B.LOCK_IN_LIMIT
let $PCOUNTRY           = &B.COUNTRY
let $PTREATY_ID         = &B.TREATY_ID
let $PTREATY_EXP_DT     = &B.TREATY_EXP_DT
let $PFORM_1001_RECD    = &B.FORM_1001_RECD
let $PFORM_1001_SUBMT   = &B.FORM_1001_SUBMT_DT
let $PFORM_1001_EXP_DT  = &B.FORM_1001_EXP_DT
let $PFORM_8233_RECD    = &B.FORM_8233_RECD
let $PFORM_8233_SUBMT   = &B.FORM_8233_SUBMT_DT
let $PFORM_8233_EXP_DT  = &B.FORM_8233_EXP_DT
let $PTAXPAYER_ID_NO    = &B.TAXPAYER_ID_NO
let $PFORM_1078_RECD    = &B.FORM_1078_RECD
let $PFORM_1078_SUBMT   = &B.FORM_1078_SUBMT_DT
let $PTHIRDPARTY_SICKPAY = &B.THIRDPARTY_SICKPAY
let $PMARRIED_FILE_SINGL = &B.MARRIED_FILE_SINGL
let $PNRA_EXEMPT_WHRULE  = &B.NRA_EXEMPT_WHRULE
let $PNQDC_W2_RPTG       = &B.NQDC_W2_RPTG

end-procedure

begin-procedure Print-Rows
if #I > 0  and $Notify='Y'
    let #G=1
    Let #S=0
    while #G <= #I
           GET $GEMPLID
               $GEFFDT
               $GDATE_OF_ENTRY
               $GCOMPANY
               $GFWTSTATUS
               $GMARSTATUS
               #GFWTALLW
               #GFWTAMT
               #GFWTPCT
               $GFUT_EXEMPT
               $GEIC_STATUS
               $GSTATUTORY_EE
               $GDECEASED
               $GPENSION_PLAN
               $GLEGAL_REP
               $GDEFERRED_COMP
               $GUSE_TOTAL_WAGE
               $GW4PRCSS
               $GW5PRCSS
               $GLOCK_IN_RECVD
               #GLOCK_IN_LIMIT
               $GCOUNTRY
               $GTREATY_ID
               $GTREATY_EXP_DT
               $GFORM_1001_RECD
               $GFORM_1001_SUBMT
               $GFORM_1001_EXP_DT
               $GFORM_8233_RECD
               $GFORM_8233_SUBMT
               $GFORM_8233_EXP_DT
               $GTAXPAYER_ID_NO
               $GFORM_1078_RECD
               $GFORM_1078_SUBMT
               $GTHIRDPARTY_SICKPAY
               $GMARRIED_FILE_SINGL
               $GNRA_EXEMPT_WHRULE
               $GNQDC_W2_RPTG
           from EMPDATA(#G)
                do Format-DateTime($GEFFDT, $GEFFDT, {DEFYMD}, '', '')
                if $GEFFDT < $Duedate
                  if $GEIC_STATUS<>'N'and $GW5PRCSS='S'
                     let #S=#G
                  end-if
                  let #G=#G+1
               else
                  let #G=#I+1
               end-if
    end-while
  if #S > 0
     GET $GEMPLID
         $GEFFDT
         $GDATE_OF_ENTRY
         $GCOMPANY
         $GFWTSTATUS
         $GMARSTATUS
         #GFWTALLW
         #GFWTAMT
         #GFWTPCT
         $GFUT_EXEMPT
         $GEIC_STATUS
         $GSTATUTORY_EE
         $GDECEASED
         $GPENSION_PLAN
         $GLEGAL_REP
         $GDEFERRED_COMP
         $GUSE_TOTAL_WAGE
         $GW4PRCSS
         $GW5PRCSS
         $GLOCK_IN_RECVD
         #GLOCK_IN_LIMIT
         $GCOUNTRY
         $GTREATY_ID
         $GTREATY_EXP_DT
         $GFORM_1001_RECD
         $GFORM_1001_SUBMT
         $GFORM_1001_EXP_DT
         $GFORM_8233_RECD
         $GFORM_8233_SUBMT
         $GFORM_8233_EXP_DT
         $GTAXPAYER_ID_NO
         $GFORM_1078_RECD
         $GFORM_1078_SUBMT
         $GTHIRDPARTY_SICKPAY
         $GMARRIED_FILE_SINGL
         $GNRA_EXEMPT_WHRULE
         $GNQDC_W2_RPTG
    from EMPDATA(#S)
    do Format-DateTime($Udate, $UEFFDT, {DEFMDY}, '', '')
    print 'New row required:'      (+2,1)
    print $GEMPLID                 (,31)
    print $GCOMPANY                (,46)
    print $UEFFDT                  (,57)
    if $Mode='U' or $Mode='B'
    and $GEMPLID <> ' '
         do Insert-New-Fed-Row-ALL
         do Get-State-Tax-Data
         do Get-Local-Tax-Data
    end-if

    let #G=#S+1
    while #G <= #I
     GET $GEMPLID
         $GEFFDT
         $GDATE_OF_ENTRY
         $GCOMPANY
         $GFWTSTATUS
         $GMARSTATUS
         #GFWTALLW
         #GFWTAMT
         #GFWTPCT
         $GFUT_EXEMPT
         $GEIC_STATUS
         $GSTATUTORY_EE
         $GDECEASED
         $GPENSION_PLAN
         $GLEGAL_REP
         $GDEFERRED_COMP
         $GUSE_TOTAL_WAGE
         $GW4PRCSS
         $GW5PRCSS
         $GLOCK_IN_RECVD
         #GLOCK_IN_LIMIT
         $GCOUNTRY
         $GTREATY_ID
         $GTREATY_EXP_DT
         $GFORM_1001_RECD
         $GFORM_1001_SUBMT
         $GFORM_1001_EXP_DT
         $GFORM_8233_RECD
         $GFORM_8233_SUBMT
         $GFORM_8233_EXP_DT
         $GTAXPAYER_ID_NO
         $GFORM_1078_RECD
         $GFORM_1078_SUBMT
         $GTHIRDPARTY_SICKPAY
         $GMARRIED_FILE_SINGL
         $GNRA_EXEMPT_WHRULE
         $GNQDC_W2_RPTG
       from EMPDATA(#G)
           do Format-DateTime($GEFFDT, $UPEFFDT, {DEFMDY}, '', '')
           if $GEIC_STATUS<>'N'
                print 'Update existing future row:' (+1,1)
                print $GEMPLID                     (,31)
                print $GCOMPANY                    (,46)
                print $UPEFFDT                     (,57)
                move $GEIC_STATUS to $Fieldvalue
                do Read-Translate-Table
                print $XlatLongName                (,75)
                if $Mode='U' or $Mode='B'
                and $GEMPLID <> ' '
                    do Update-Row
                end-if
                let #G=#G+1
           else
                LET #G=#I+1
           end-if
    end-while
    print ' ' (+1,0)
  end-if
end-if
CLEAR-ARRAY name=EMPDATA
let #I=0
end-Procedure

begin-procedure Store-Row
if $PEFFDT = ''
else
    do Get-CurrJob-Effdt
    IF $PEFFDT >= &J.EFFDT
        let #I = #I + 1
        PUT
        $PEMPLID
        $PEFFDT
        $PDATE_OF_ENTRY
        $PCOMPANY
        $PFWTSTATUS
        $PMARSTATUS
        #PFWTALLW
        #PFWTAMT
        #PFWTPCT
        $PFUT_EXEMPT
        $PEIC_STATUS
        $PSTATUTORY_EE
        $PDECEASED
        $PPENSION_PLAN
        $PLEGAL_REP
        $PDEFERRED_COMP
        $PUSE_TOTAL_WAGE
        $PW4PRCSS
        $PW5PRCSS
        $PLOCK_IN_RECVD
        #PLOCK_IN_LIMIT
        $PCOUNTRY
        $PTREATY_ID
        $PTREATY_EXP_DT
        $PFORM_1001_RECD
        $PFORM_1001_SUBMT
        $PFORM_1001_EXP_DT
        $PFORM_8233_RECD
        $PFORM_8233_SUBMT
        $PFORM_8233_EXP_DT
        $PTAXPAYER_ID_NO
        $PFORM_1078_RECD
        $PFORM_1078_SUBMT
        $PTHIRDPARTY_SICKPAY
        $PMARRIED_FILE_SINGL
        $PNRA_EXEMPT_WHRULE
        $PNQDC_W2_RPTG
        INTO EMPDATA(#I)
    end-if
end-if
end-procedure

begin-procedure Get-CurrJob-Effdt
begin-SELECT
J.EFFDT
FROM PS_JOB J
WHERE J.EMPLID  = $W_EMPLID
AND   J.COMPANY = $W_COMPANY
AND J.EFFDT=
          (SELECT MAX(G.EFFDT)
               FROM PS_JOB G
               WHERE G.EMPLID=J.EMPLID
                 AND G.EMPL_RCD = J.EMPL_RCD
                 AND G.COMPANY= J.COMPANY)
AND J.EFFSEQ=
              (SELECT MAX(H.EFFSEQ)
               FROM PS_JOB H
               WHERE H.EMPLID=J.EMPLID
                 AND H.EMPL_RCD = J.EMPL_RCD
                 AND H.EFFDT=J.EFFDT)
end-SELECT
end-procedure

begin-procedure Insert-New-Fed-Row-ALL

  do Insert-New-Fed-Row

print 'Row inserted' (+1,1)
print $GEMPLID                   (,31)
print $GCOMPANY                  (,46)
do Format-DateTime($Udate, $IEFFDT, {DEFMDY}, '', '')
print $IEFFDT                    (,57)
print $Nonestatus                (,75)
end-procedure

begin-procedure Update-Row
begin-SQL
UPDATE PS_FED_TAX_DATA
SET EIC_STATUS='N',
    W5_PRCSS='N',
    LAST_ACTION='C',
    LAST_UPDATE_DATE=$AsOfToday
WHERE EMPLID=$PEMPLID
AND COMPANY=$GCOMPANY
AND EFFDT=$GEFFDT
end-SQL
print 'Row Updated' (+1,1)
print $GEMPLID                   (,31)
print $GCOMPANY                  (,46)
do Format-DateTime($GEFFDT, $UPDEFFDT, {DEFMDY}, '', '')
print $UPDEFFDT                  (,57)
print $Nonestatus                (,75)
end-procedure

begin-procedure Prompts
while $Duedt = ''
    input $Duedt 'Enter deadline date for new W-5 forms ({Prompt-Date})' type=char
    if RTRIM($Duedt, ' ') = ''
      break
    end-if
    do Format-DateTime($Duedt, $Duedt, {Prompt-Mask},'','Native')
end-while
while $Scope = ''
    display 'Enter scope for this run.'
    input $Scope ' C = By specified Company  A= All employees in all companies'
    uppercase $Scope
    if $Scope = 'A' or $Scope='C'
    else
        let $Scope = ''
    end-if
end-while
if $Scope='C'
    while $SCompany = ''
       input $SCompany 'Enter Company Code'
       uppercase $SCompany
    end-while
end-if
while $Mode = ''
input $Mode 'Enter mode for this run. R= Report only   U= Update'
uppercase $Mode
if $Mode ='R' or $Mode ='U'
else
    let $Mode= ''
end-if
end-while
while $Udate = ''
   input $Udate 'Enter date to be used for Effective date on inserted rows ({Prompt-Date})' type=char
   if RTRIM($Udate, ' ') = ''
     break
   end-if
   do Format-DateTime($Udate, $Udate, {Prompt-Mask},'','Native')
end-while
end-procedure

!*********************************************************************************************
Begin-Procedure TAX113-Headings
if $Mode='R' or $Mode='A'
   print 'REPORT MODE: Identify employees that need to have their federal tax records modified to set EIC status to None'   (+1,1)
   print '             because they failed to file a new W-5 form by a user-specified date.'                           (+1,1)
else
   print 'UPDATE MODE: Update the Federal Tax records of those employees who failed to file a new W-5 form by a user-specified date. Report lists'   (+1,1)
   print '             before and after image of rows modified.'                        (+1,1)
end-if
if $Scope='C'
   print 'SCOPE: By Company'    (+2,1)
else
   print 'SCOPE: All Employees' (+2,1)
end-if
print 'Employee ID'             (+3,31)
print 'Company'                 (,46)
print 'Effective Date'          (,57)
print 'EIC Status'              (,75)
End-Procedure


begin-procedure Found-Future
!  Dummy Procedure
end-procedure


begin-procedure Fed-State-Sync
!  Dummy Procedure
end-procedure


begin-procedure Percent-Not-Found
!  Dummy Procedure
end-procedure


begin-procedure AlreadyUpdated
!  Dummy Procedure
end-procedure


begin-procedure Effdt-is-Today
!  Dummy Procedure
end-procedure


begin-procedure Process-State
!  Dummy Procedure
end-procedure


#Include 'payrctl2.sqc'  !Select-Parameters procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'geteandg.sqc'  !Get-EandG procedure                           !HP99999
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date calculation and formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'readxlat.sqc'  !Read XLAT values
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#include 'gettxdta.sqc'  !Get Employee Tax Data for Update
