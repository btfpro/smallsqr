!******************************************************
! Report Name: BEN041.SQR - Delinquent Accounts Report
!******************************************************
!***********************************************************************
!                                                                      *
! Confidentiality Information:                                         *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/24:23:33:46                                 
!       $Release:  HR9                                                 
!      $Revision:  103                                                 
!                                                                      *
!***********************************************************************


#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define col_emplid              1
#define col_name               13
#define col_bill_reason        20
#define col_bill_period        31
#define col_bill_period_dta    32
#define col_ben_prog           41
#define col_plan_type          47
#define col_plan_type_dta      48
#define col_plan_desc          54
#define col_ben_plan           68
#define col_ben_desc           78
#define col_cov_code          110
#define col_cov_code_dta      112
#define col_chrg_amt          118
#define col_chrg_amt_dsc      122
#define col_pay_amt           131
#define col_pay_amt_dsc       135
#define col_pay_due_dt        145
#define col_due_days          156
#define col_due_days_dta      158
#define col_delin_amt         166


!************
Begin-Program
!************

  do Init-Report

  display 'Report Begin at ' noline
  do Display-time

  do Process-Main

  display 'Report Ended at ' noline
  do Display-time

  do Reset
  do StdAPI-Term

End-Program


!***************************
Begin-Procedure Init-Report
!***************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  let $ReportID    = 'BEN041'

  do StdAPI-Init

  If $prcs_process_instance = ''
    Do Ask-Values
  else
    Do Get-Values
  end-if

  do Get-Report-Language
  let $ReportTitle  = $BEN041-REPORTTITLE
  let $Delinquent_Date = $AsOfDate

  display $ReportID   NoLine
  display ': '        NoLine
  display $ReportTitle
  display ' '

  ! Initialize variables
  create-array name=Totals size=8 -
     field=Total_cnt:number:3 field=Total_amt:number:6

  ! First four rows are for sub totals and the remaining for Grand totals.
  let #i = 0
  while #i < 8
    put 0 0 into Totals(#i)
    let #i = #i + 1
  end-while

End-Procedure

!**********************************
! This procedure is used to read language-dependent text from the database.
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN041 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN041', 'REPORT_TITLE',  $BEN041-REPORTTITLE,  #CW)
  do Get_Field_Information ('BEN041', 'CHARGE',        $BEN041-CHARGE,       #CW)
  do Get_Field_Information ('BEN041', 'DELINQUENT',    $BEN041-DELINQUENT,   #CW)
  do Get_Field_Information ('BEN041', 'PAID',          $BEN041-PAID,         #CW)
  do Get_Field_Information ('BEN041', 'OVERDUE',       $BEN041-OVERDUE,      #CW)
  do Get_Field_Information ('BEN041', 'LAST_PAYM_DT',  $BEN041-LAST-PAYM-DT, #CW)
  do Get_Field_Information ('BEN041', 'LAST_PAYM_AMT', $BEN041-LAST-PAYM-AMT,#CW)
  do Get_Field_Information ('BEN041', 'CHARGES',       $BEN041-CHARGES,      #CW)
  do Get_Field_Information ('BEN041', 'DAYS',          $BEN041-DAYS,         #CW)
  do Get_Field_Information ('BEN041', 'TOT_L01',       $BEN041-TOT-L01,      #CW)
  do Get_Field_Information ('BEN041', 'TOT_L02',       $BEN041-TOT-L02,      #CW)
  do Get_Field_Information ('BEN041', 'TOT_L03',       $BEN041-TOT-L03,      #CW)
  do Get_Field_Information ('BEN041', 'TOT_L04',       $BEN041-TOT-L04 ,     #CW)

  do Get_Field_Information ('BEN1',   'REASON',        $BEN1-REASON,      #CW)
  do Get_Field_Information ('BEN1',   'PERIOD',        $BEN1-PERIOD,      #CW)
  do Get_Field_Information ('BEN1',   'PGM',           $BEN1-PGM,         #CW)
  do Get_Field_Information ('BEN1',   'TYPE',          $BEN1-TYPE,        #CW)
  do Get_Field_Information ('BEN1',   'DATE',          $BEN1-DATE,        #CW)
  do Get_Field_Information ('BEN1',   'DESCR',         $BEN1-DESCRIPTION, #CW)
  do Get_Field_Information ('BEN1',   'PLAN',          $BEN1-PLAN,        #CW)
  do Get_Field_Information ('BEN1',   'AMT',           $BEN1-AMT,         #CW)
  do Get_Field_Information ('BEN1',   'CODE',          $BEN1-CODE,        #CW)
  do Get_Field_Information ('BEN1',   'BILLING',       $BEN1-BILLING,     #CW)
  do Get_Field_Information ('BEN1',   'BEN',           $BEN1-BEN,         #CW)
  do Get_Field_Information ('BEN1',   'PLAN',          $BEN1-PLAN,        #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',       $BEN1-BENEFIT,     #CW)
  do Get_Field_Information ('BEN1',   'COVERAGE',      $BEN1-COVERAGE,    #CW)

End-Procedure

!**************************
Begin-Procedure Ask-Values
!**************************

  do Ask-As-Of-Date

End-Procedure


!**************************
Begin-Procedure Get-Values
!**************************

  do Select-Parameters
  do Get-As-Of-Date

End-Procedure


!***************
Begin-Heading 7
!***************

#Include 'stdhtr03.sqc'

  print $BEN1-BILLING                  (+3,{col_bill_reason})
  print $BEN1-BILLING                  (0,{col_bill_period})
  print $BEN1-BEN                      (0,{col_ben_prog})
  print $BEN1-PLAN                     (0,{col_plan_type})
  print $BEN1-BENEFIT                  (0,{col_ben_plan})
  print $BEN1-COVERAGE                 (0,{col_cov_code})
  print $BEN041-CHARGE                 (0,{col_chrg_amt_dsc})
  print $BEN1-AMT                      (0,{col_pay_amt_dsc})
  print $BEN1-DATE                     (0,{col_pay_due_dt})
  print $BEN041-DAYS                   (0,{col_due_days})
  print $BEN041-DELINQUENT             (0,{col_delin_amt})

  print $BEN1-REASON                   (+1,{col_bill_reason})
  print $BEN1-PERIOD                   (0,{col_bill_period})
  print $BEN1-PGM                      (0,{col_ben_prog})
  print $BEN1-TYPE                     (0,{col_plan_type})
  print $BEN1-DESCRIPTION              (0,{col_plan_desc})
  print $BEN1-PLAN                     (0,{col_ben_plan})
  print $BEN1-DESCRIPTION              (0,{col_ben_desc})
  print $BEN1-CODE                     (0,{col_cov_code})
  print $BEN1-AMT                      (0,{col_chrg_amt_dsc})
  print $BEN041-PAID                   (0,{col_pay_amt_dsc})
  print $BEN041-OVERDUE                (0,{col_pay_due_dt})
  print $BEN041-OVERDUE                (0,{col_due_days})
  print $BEN1-AMT                      (0,{col_delin_amt})

End-Heading


!****************************
Begin-Procedure Process-Main
!****************************

  let $FirstTime = 'Y'

Begin-Select
A.EMPLID          () On-Break Print=Never
                     Before=New-Emp-Info
                     After=Emp-Total

A.BILLING_REASON
A.BILL_PER_CD
A.BENEFIT_PROGRAM
A.PLAN_TYPE
A.BENEFIT_PLAN
A.COVRG_CD
A.DED_SLSTX_CLASS
A.TOTAL_CHARGE
A.DATE_OVERDUE
A.AMOUNT_PAID
A.PMT_ADJUST
A.AMOUNT_DUE
Z.PERIOD_END_DT

    do Process-Record

From  PS_BEN_BI_CHG_VW   A,
      PS_BEN_BI_CALENDAR Z
Where A.AMOUNT_DUE > 0
And   A.DATE_OVERDUE <= $Delinquent_Date
And   A.BILL_PER_CD = Z.BILL_PER_CD
Order By A.EMPLID,
A.DATE_OVERDUE DESC

End-Select

  do Print-Grand-Totals

End-Procedure


!****************************
Begin-Procedure New-Emp-Info
!****************************

  do Get-Empl-Name
  do Get-Last-Pay-Info
  do Format-Datetime(&C.Posting_Date, $Out, {DEFDATE}, '', '')

  print &A.EMPLID                      (+2,{col_emplid},11)
  print &B.NAME                        (0,{col_name},22)
  print $BEN041-LAST-PAYM-DT           (0,36,20)
  print $Out                           ()
  print $BEN041-LAST-PAYM-AMT          (0,70,20)
  print &C.Actual_Payment              () edit $$$,$$9.99
  print ''                             (+1,0)

  let #i = 0
  while #i < 4
        put 0 0 into Totals(#i)
        let #i = #i + 1
  end-while

  let $FirstTime = 'Y'

End-Procedure


!*****************************
Begin-Procedure Get-Empl-Name
!*****************************

Begin-Select
B.NAME
From  PS_PERSON_NAME B
Where B.EMPLID = &A.Emplid
End-Select

End-Procedure


!*********************************
Begin-Procedure Get-Last-Pay-Info
!*********************************

Begin-Select
C.POSTING_DATE
C.ACTUAL_PAYMENT
From  PS_BEN_BI_PAY_VW C
Where C.EMPLID = &A.Emplid
And   C.POSTING_DATE =
         (Select MAX(CC.POSTING_DATE)
          From  PS_BEN_BI_PAY_VW CC
          Where CC.EMPLID = C.EMPLID)
End-Select

End-Procedure


!******************************
Begin-Procedure Process-Record
!******************************
    
  do Convert-To-DTU-Date(&A.Date_Overdue, $Date1)
  do Convert-To-DTU-Date($Delinquent_Date, $Date2)
  do Dtu-Diff-Days($Date1,$Date2, #Days_Overdue)

  evaluate #Days_Overdue
    when < 31
      let #curr_grp = 0
      break
    when < 61
      let #curr_grp = 1
      break
    when < 91
      let #curr_grp = 2
      break
    when-other
      let #curr_grp = 3
      break
  end-evaluate

  array-add 1 to Totals(#curr_grp) Total_cnt
  array-add &A.AMOUNT_DUE to Totals(#curr_grp) Total_amt

  let #tot_grp = #curr_grp + 4
  array-add 1 to Totals(#tot_grp) Total_cnt
  array-add &A.AMOUNT_DUE to Totals(#tot_grp) Total_amt

  if $FirstTime = 'Y'
     let #old_grp = #curr_grp
     let $FirstTime = 'N'
  end-if

  if #curr_grp <> #old_grp

    do Print-Totals

    let #old_grp = #curr_grp

  end-if

  move 'BILLING_REASON' to $Fieldname
  move &A.Billing_Reason to $Fieldvalue
  move &Z.Period_End_Dt to $AsOfDate
  do Read-Translate-Table
  move $XlatShortName to $Reason_Desc

  move 'PLAN_TYPE' to $Fieldname
  move &A.Plan_Type to $Fieldvalue
  move &Z.Period_End_Dt to $AsOfDate
  do Read-Translate-Table
  move $XlatShortName to $Plan_Type_Desc

  if &A.Benefit_Plan <> ' '
    move &A.Benefit_Plan to $Benefit_Plan
    move &A.Plan_Type to $Plan_Type
    move &Z.Period_End_Dt to $AsOfDate
    do Get-Benefit-Name
    move $BenefitName to $Plan_Descr
  else
    move ' ' to $Plan_Descr
  end-if


! Initialize the Coverage Code Field being used for
! Coverage Code and Deduction Sales Tax Class display.
!
  move ' ' to $Covrg_Cd_fld


! Get Deduction Sales Tax Description if value exist.
!
  if &A.Ded_Slstx_Class <> ' ' and &A.Ded_Slstx_Class <> 'B'
      move 'DED_SLSTX_CLASS' to $Fieldname
      move &A.Ded_Slstx_Class to $Fieldvalue
      move &Z.Period_End_Dt to $AsOfDate
      do Read-Translate-Table
      move $XlatShortName to $Covrg_Cd_fld
  end-if


! Override the Deduction Sales Tax Description with the
! Coverage Code Value if Coverage Code exist.
!
  if &A.Covrg_Cd <> ' '
    move  &A.Covrg_Cd to $Covrg_Cd_fld
  end-if

  let $AsofDate = $Delinquent_Date

  do Format-Datetime(&A.DATE_OVERDUE, $Date_OverDue, {DEFDATE}, '', '')

  let #Total_Payment = &A.Amount_Paid + &A.Pmt_Adjust

  print $Reason_Desc                   (+1,{col_bill_reason},10)
  print &A.Bill_Per_Cd                 (0,{col_bill_period_dta},4)
  print &A.Benefit_Program             (0,{col_ben_prog},5)
  print &A.Plan_Type                   (0,{col_plan_type_dta},2)
  print $Plan_Type_Desc                (0,{col_plan_desc},13)
  print &A.Benefit_Plan                (0,{col_ben_plan},9)
  print $Plan_Descr                    (0,{col_ben_desc},30)
  print $Covrg_Cd_fld                  (0,{col_cov_code_dta},2)
  print &A.Total_Charge                (0,{col_chrg_amt})     edit 999,999.99
  print $Date_OverDue                  (0,{col_pay_due_dt})
  print #days_overdue                  (0,{col_due_days_dta}) edit 99999
  print #Total_Payment                 (0,{col_pay_amt})      edit 999,999.99
  print &A.AMOUNT_DUE                  (0,{col_delin_amt})    edit 999,999.99

End-Procedure


!*************************
Begin-Procedure Emp-Total
!*************************

  do Print-Totals

  let #old_grp = 9
  let #i = 0
  while #i < 4
      put 0 0 into Totals(#i)
      let #i = #i + 1
  end-while

End-Procedure


!****************************
Begin-Procedure Print-Totals
!****************************

  evaluate #old_grp
    when = 0
      move  $BEN041-TOT-L01 to $mesg
      get #sub_total from Totals(0) Total_cnt
      get #sub_amt from Totals(0) Total_amt
      break
    when = 1
      move  $BEN041-TOT-L02 to $mesg
      get #sub_total from Totals(1) Total_cnt
      get #sub_amt from Totals(1) Total_amt
      break
    when = 2
      move  $BEN041-TOT-L03 to $mesg
      get #sub_total from Totals(2) Total_cnt
      get #sub_amt from Totals(2) Total_amt
      break
    when = 3
      move  $BEN041-TOT-L04 to $mesg
      get #sub_total from Totals(3) Total_cnt
      get #sub_amt from Totals(3) Total_amt
      break
  end-evaluate

  if #sub_total > 0
     print $mesg              (+2,{col_bill_reason},30)
     print #sub_total         (0,+5)                 edit 999
     print $BEN041-CHARGES    (0,+2)
     print #sub_amt           (0,{col_delin_amt})    edit $$$,$$9.99
     print ' '                (+1,0)
  end-if

End-Procedure


!**********************************
Begin-Procedure Print-Grand-Totals
!**********************************
  get #total_cnt from Totals(4) Total_cnt
  get #total_amt from Totals(4) Total_amt
!--print 'Totals for 30 days and less '    (+2,51)
  print $BEN041-TOT-L01                   (+2,51,27)
  print #total_cnt                        (0,85)             edit 999
  print $BEN041-CHARGES                   (0,90,15)
  print #total_amt                        (0,{col_chrg_amt}) edit $$$,$$9.99

  get #total_cnt from Totals(5) Total_cnt
  get #total_amt from Totals(5) Total_amt
!--print 'Totals for 31 - 60 days due '    (+1,51)
  print $BEN041-TOT-L02                   (+1,51,27)
  print #total_cnt                        (0,85)             edit 999
  print $BEN041-CHARGES                   (0,90,15)
  print #total_amt                        (0,{col_chrg_amt}) edit $$$,$$9.99

  get #total_cnt from Totals(6) Total_cnt
  get #total_amt from Totals(6) Total_amt
!--print 'Totals for 61 - 90 days due '    (+1,51)
  print $BEN041-TOT-L03                   (+1,51,27)
  print #total_cnt                        (0,85)             edit 999
  print $BEN041-CHARGES                   (0,90,15)
  print #total_amt                        (0,{col_chrg_amt}) edit $$$,$$9.99


  get #total_cnt from Totals(7) Total_cnt
  get #total_amt from Totals(7) Total_amt
!--print 'Totals for over 90 days due '    (+1,51)
  print $BEN041-TOT-L04                   (+1,51,27)
  print #total_cnt                        (0,85)             edit 999
  print $BEN041-CHARGES                   (0,90,15)
  print #total_amt                        (0,{col_chrg_amt}) edit $$$,$$9.99

End-Procedure


!****************************
Begin-Procedure Display-Time
!****************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure


!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime procedures
#include 'benasof.sqc'   !Get-As-Of-Date procedure
#include 'getbennm.sqc'  !Get-Benefit-Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'number.sqc'    !Format-Number procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datemath.sqc'  !Date-Math procedures

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!******************************* End of Report *******************************
