!***********************************************************************
! BEN110:  Sample Premium Report (Using BN_SNAP_XXX Tables)            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/04:17:52:34                           
!             $Release:  HR9                                           
!            $Revision:  104                                           
!                                                                      *
!***********************************************************************
!                                                                      *
! This is a SAMPLE Premium Report program for "rate-based" plan types.
! Although this program is fully functional, it is expected that the
! user will use this program as a guide to develop custom premium
! reports based upon their own provider agreements.
!
! Note that premiums are calculated by the BEN110 Application Engine
! program, because of the complexity of the Rate architecture.  These
! premiums are stored back into the BN_SNAP_PLAN table where they are
! available to this BEN110 reporting program.
!
! When calculating premiums for plans based upon the employee's salary,
! you must have created the snapshot with the "Calculate Coverage"
! option turned on. If "Calculate Coverage" was not turned on, then
! the Premium Report will display a zero premium for all STD and LTD
! plans, as well as Life/AD&D plans that have coverage based on salary.
!
! A Summary listing the total premium due to the vendor, by plan type,
! is included at the end of the report.
!
!**********************************************************************

#Include 'setenv.sqc' !Set environment

!********************************************
Begin-Setup
!********************************************

  #Include 'ptpsp125.sqc'
  ! Common Cache Tables
  #Include 'bencrtbl.sqc'

End-Setup

!********************************************
Begin-Program
!********************************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do StdAPI-Term

End-Program

!********************************************
Begin-Procedure Init-Report
!********************************************

 Let #EnrollmentCount = 0
 Let #PlanTotalIdx = 0
 Let $ReportSection = 'DETAIL'

 #Define col_sep           2
 #Define col_vendor_id     20
 #Define col_vendor_policy 20
 #Define col_plan_type     20
 #Define col_benefit_plan  40
 #Define col_emplid        12
 #Define col_name          30
 #Define col_birthdate     10
 #Define col_sex           5
 #Define col_smoker        6
 #Define col_covrg_cd      10
 #Define col_coverage      16
 #Define col_premium       14
 #Define col_plan_type     12

 #Define PlanTotalMax     100

 ! Array of Plan Totals for Summary Page
 Create-Array Name = PlanTotal  Size = {PlanTotalMax}
  Field=PlanType:char
  Field=BenefitPlan:char
  Field=TotalPremium:number

 Move 'BEN110' to $ReportID
 Move 'Sample Premium Report' to $ReportTitle
 Display $ReportTitle
 Display ' '

 Do StdAPI-Init

 If $prcs_process_instance = ''
   Do Ask-Values
 Else
   Do Get-Values
 End-If

 Let $VendorId =  Upper($VendorId)

 ! Initialize Dates
 Move ' ' to $AsOfDate
 Let $LastRunDate_YMD = ' '

 Do Get-Snapshot-As-Of-Date($AsOfDate)
 Do Format-DateTime($AsOfDate, $ThisSnapAsOfDate_RPT, {DEFDATE}, '', '')

 Let $ThisSnapRunDate_YMD = ' '
 Let $PrevSnapRunDate_YMD = ' '
 Do Get-Snapshot-Run-Dates($ThisSnapRunDate_YMD, $PrevSnapRunDate_YMD)

 ! Truncate the Time from the "As Of" date
 Do Format-DateTime($AsOfDate, $DateOut, {DEFCMP},'','')
 Do Format-DateTime($DateOut, $AsOfDate, {DEFCMP},'','native')

 Move $AsOfToday  to  $RunDate

 let $Fieldname = 'PAY_FREQUENCY'
 let $Fieldvalue = rtrim($Premium_Freq,' ')
 do Read-Translate-Table
 let $Premium_Freq_Descr = $Xlatshortname

End-Procedure

!***************
Begin-Heading 10
!***************

 #Include 'stdhdg01.sqc'

 Do Get-Plan-Name($BreakPlanType, $BreakPlan, $PlanName, $PlanNameShort)
 Let $PlanName = Rtrim($BreakPlan,' ') || ' - ' || Rtrim($PlanName,' ')

 Do Get-Vendor-Policy($SetId, $VendorId, $BreakGroupNbr, $PolicyNbr)

 Let $Subtitle = 'Data as of: ' || $ThisSnapAsOfDate_RPT

 Let $PlanSeries = Substr($BreakPlanType,1,1)

 Print   $Subtitle                  (+0,1) CENTER

 Print   '   Vendor: '              (+0,1)
 Print   $VendorId                  (+0,+0)

 If $ReportSection = 'DETAIL'
    Print   '   Policy: '           (+1,1)
    Print   $PolicyNbr              (+0,+0)
    Print   'Plan Type: '           (+1,1)
    Print   $BreakPlanType          (+0,+0)
    Print   '     Plan: '           (+1,1)
    Print   $PlanName               (+0,+0)
 Else
    Print ' '                       (+1,1)
    Print ' '                       (+1,1)
    Print ' '                       (+1,1)
 End-If
 Print   'Frequency: '              (+1,1)
 Print   $Premium_Freq_Descr        (+0,+0)

 If $ReportSection = 'DETAIL'
    Print   'Name'                     (+2,1,{col_name})
    Print   'Emplid'                   (+0,+{col_sep},{col_emplid})
    If $PlanSeries = '1'
       Print   'Coverage'              (+0,+{col_sep},{col_covrg_cd})
    End-If
    If $PlanSeries = '2'
       Print   'Birthdate'              (+0,+{col_sep},{col_birthdate})
       Print   'Sex'                    (+0,+{col_sep},{col_sex})
       Print   'Smoker'                 (+0,+{col_sep},{col_smoker})
    End-If
    If $PlanSeries = '2' Or $PlanSeries = '3'
       Print   'Coverage Amount'       (+0,+{col_sep},{col_coverage})
    End-If
    Print   'Premium'                  (+0,+{col_sep},{col_premium})

    Print   '='                        (+1,1,{col_name})                  Fill
    Print   '='                        (+0,+{col_sep},{col_emplid})       Fill
    If $PlanSeries = '1'
       Print   '='                     (+0,+{col_sep},{col_covrg_cd})     Fill
    End-If
    If $PlanSeries = '2'
       Print   '='                     (+0,+{col_sep},{col_birthdate})    Fill
       Print   '='                     (+0,+{col_sep},{col_sex})          Fill
       Print   '='                     (+0,+{col_sep},{col_smoker})       Fill
    End-If
    If $PlanSeries = '2' Or $PlanSeries = '3'
       Print   '='                     (+0,+{col_sep},{col_coverage})     Fill
    End-If
    Print   '='                        (+0,+{col_sep},{col_premium})      Fill

 Else
    Print 'Plan Type'                  (+2,1,{col_plan_type})
    Print 'Benefit Plan'               (+0,+{col_sep},{col_benefit_plan})
    Print 'Total Premium'              (+0,+{col_sep},{col_premium})

    Print '='                          (+1,1,{col_plan_type})             Fill
    Print '='                          (+0,+{col_sep},{col_benefit_plan}) Fill
    Print '='                          (+0,+{col_sep},{col_premium})      Fill
 End-If
End-Heading

!********************************************
Begin-Procedure Ask-Values
!********************************************

 Display '  '
 Let $SetId = ''
 While $SetId = ''
    Input $SetId 'Enter Vendor SetId > ' type=char
 End-While

 Display '  '
 Let $VendorId = ''
 While $VendorId = ''
    Input $VendorId 'Enter Vendor Id > ' type=char
 End-While

 Display '  '
 Let $PlanType = ''
 Input $PlanType 'Enter Plan Type (or <Return> to process all) > ' type=char

 Display '  '
 Let $Premium_Freq = ''
 While $Premium_Freq = ''
    Input $Premium_Freq 'Enter Premium Frequency (W,B,S,M,A) > ' type=char
    Let #ValidFreq = InStr('WBSMA', $Premium_Freq, 1)
    If Not (#ValidFreq)
       Let $Premium_Freq = ''
    End-if
 End-While

 Display ' '
 Display 'Processing...'

End-Procedure

!********************************************
begin-procedure Get-Values
!********************************************

   do Select-Parameters
   do Get-Provider
   do Get-Plan-Type
   do Get-Premium-Freq

   Move $Provider  to  $VendorId
   Move $Plan_Type  to  $PlanType

end-procedure

!********************************************
Begin-Procedure Process-Main
!********************************************

 Do Load-Reporting-Cache
 Do Load-Rate-Cache($SetId, $VendorId, $PlanType, $AsOfDate)
 Do Process-Enrollments
 Do Display-Run-Details

End-Procedure

!********************************************
Begin-Procedure Process-Enrollments
!********************************************
! Note: As delivered, this code selects only active enrollments as of the
!       Snapshot date.  We report active enrollments as if they have been
!       in effect the entire period.
!       You will need to modify this code if you want to report enrollments
!       that were terminated/waived as of the Snapshot date, but active
!       earlier in the period. This is relatively simple to do, since the
!       "Termination" rows in BN_SNAP_PLAN contain basically the same info
!       and the "Election" rows.
!       In addition - no pro-rating of premiums occurs in this code. If an
!       enrollment is active as of the Snapshot date, then we report a full
!       period premium.

 Let $BreakPlanType = ''
 Let $BreakPlan = ''

 Let $WhereString = ''
 If Not IsBlank($PlanType)
    Let $WhereString = ' AND A.PLAN_TYPE = ''' || $PlanType || ''' '
 End-if

Begin-SELECT
A.EMPLID
A.COBRA_EVENT_ID             ! Health
A.BENEFIT_RCD_NBR
A.DEPENDENT_BENEF            ! Blank for employee-level
A.PLAN_TYPE
A.COVERAGE_ELECT             ! (E)nroll, (T)erminate
A.BENEFIT_PLAN
A.COVRG_CD                   ! Health
A.COVERAGE_ELECT_DT
A.COVERAGE_BEGIN_DT
A.DEDUCTION_BEGIN_DT
A.ENROLLMENT_DT
A.GROUP_NBR
A.FLAT_AMOUNT                ! Life/AD&D
A.FACTOR_XSALARY             ! Life/AD&D
A.DED_CUR                    ! Last Deduction Taken - only if Include_Ded = "Y"
A.PAY_END_DT                 ! Last Deduction Taken - only if Include_Ded = "Y"
A.CALCULATED_BASE            ! Life/AD&D, Disability - only if Include_Calc = "Y"
A.PREMIUM_BASE               ! Life/AD&D, Disability - only if Include_Calc = "Y"
A.BN_PREMIUM_AMT             ! Calculated by AppEngine BEN110
B.LAST_NAME
B.FIRST_NAME
B.NAME_PREFIX
B.NATIONAL_ID
B.RELATIONSHIP
B.COVERED_PERSON_TYP
B.ADDRESS1
B.ADDRESS2
B.CITY
B.STATE
B.POSTAL
B.COUNTRY
B.SEX
B.BIRTHDATE
B.SMOKER
J.BENEFIT_PROGRAM
J.COMPANY                    ! From employee's Primary Job
J.PAYGROUP                   ! From employee's Primary Job
J.EMPL_RCD                   ! From employee's Primary Job
J.SERVICE_DT                 ! From employee's Primary Job

  Add 1  to  #EnrollmentCount

  ! Get any Descriptions or other cached info that may be needed on the
  ! Premium Report.
  Do Lookup-Cached-Info

  ! Apply any code mappings that may be required
  Do Map-Codes

  ! Print the Report Line
  Do Print-Report-Line

FROM   PS_BN_SNAP_JOB J,
       PS_BN_SNAP_PER B,
       PS_BN_SNAP_PLAN A
WHERE J.EMPLID = A.EMPLID
  AND J.BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
  AND J.COBRA_EVENT_ID = A.COBRA_EVENT_ID
  AND B.EMPLID = A.EMPLID
  AND B.DEPENDENT_BENEF = A.DEPENDENT_BENEF
  AND A.SETID     = $SetID
  AND A.VENDOR_ID = $VendorId
  AND A.COVERAGE_ELECT = 'E'
[$WhereString]
  AND A.DEPENDENT_BENEF = ' '
  AND (A.PLAN_TYPE Like 'A%'
   OR  A.PLAN_TYPE Like '1%'
   OR  A.PLAN_TYPE Like '2%'
   OR  A.PLAN_TYPE Like '3%')
ORDER BY A.PLAN_TYPE, A.BENEFIT_PLAN, B.LAST_NAME, B.FIRST_NAME

END-SELECT

 Do Print-Plan-Total
 Do Update-Summary-Totals
 Do Print-Summary-Totals

End-Procedure


!*********************************
Begin-Procedure Lookup-Cached-Info
!*********************************
! Be sure to comment out any of these that you don't need.

 ! Do Get-Covrg-Cd-Descr(&A.COVRG_CD, $CovrgCdDescr, $CovrgCdDescrShort)
 ! Do Get-Relationship-Descr(&B.RELATIONSHIP, $RelationDescr, $RelationDescrShort)

End-Procedure


!************************
Begin-Procedure Map-Codes
!************************
! Customize this procedure to do any mapping of PeopleSoft codes to the Vendor's code set.


End-Procedure


!********************************
Begin-Procedure Print-Report-Line
!********************************

  Let $LastName = Rtrim(&B.LAST_NAME,' ')
  Let $FirstName = Rtrim(&B.FIRST_NAME,' ')
  Let $Name = $LastName || ', ' || $FirstName

  Do Convert-Premium-Frequency
  Move #Premium to $Premium 999,999,999.99
  Move &A.PREMIUM_BASE   to $PremiumBase 999,999,999

  If $BreakPlanType <> ''
     If &A.PLAN_TYPE <> $BreakPlanType
        Do Print-Plan-Total
        Do Update-Summary-Totals
        NEW-PAGE
        Move &A.PLAN_TYPE to $BreakPlanType
        Move &A.BENEFIT_PLAN to $BreakPlan
        Move &A.GROUP_NBR    to $BreakGroupNbr
        Let #TotalPremium = 0
     Else
        If &A.BENEFIT_PLAN <> $BreakPlan
          Do Print-Plan-Total
          Do Update-Summary-Totals
          NEW-PAGE
          Move &A.BENEFIT_PLAN to $BreakPlan
          Move &A.GROUP_NBR    to $BreakGroupNbr
          Let #TotalPremium = 0
        End-If
     End-If
  Else
     Move &A.PLAN_TYPE    to $BreakPlanType
     Move &A.BENEFIT_PLAN to $BreakPlan
     Move &A.GROUP_NBR    to $BreakGroupNbr
  End-If

  Let $PlanSeries = Substr(&A.PLAN_TYPE,1,1)

  Print   $Name                      (+1,1,{col_name})
  Print   &A.EMPLID                  (+0,+{col_sep},{col_emplid})
  If $PlanSeries = '1'
     Do Get-Covrg-Cd-Descr(&A.COVRG_CD, $CovrgCdDescr, $CovrgCdDescrShort)
     Print   $CovrgCdDescrShort      (+0,+{col_sep},{col_covrg_cd})
  End-If
  If $PlanSeries = '2'
     Do Format-DateTime(&B.BIRTHDATE, $Birthdate_RPT, {DEFDATE}, '', '')
     Print   $Birthdate_RPT          (+0,+{col_sep},{col_birthdate})
     Print   &B.SEX                  (+0,+{col_sep},{col_sex})
     Print   &B.SMOKER               (+0,+{col_sep},{col_smoker})
  End-If
  If $PlanSeries = '2' Or $PlanSeries = '3'
     Print   $PremiumBase            (+0,+{col_sep},{col_coverage})
  End-If
  Print   $Premium                   (+0,+{col_sep},{col_premium})

  Add #Premium to #TotalPremium

End-Procedure

!********************************
 Begin-Procedure Convert-Premium-Frequency
!********************************

  Evaluate $Premium_Freq
     When = 'W'
        Let #Premium = &A.BN_PREMIUM_AMT / 52.00
        Break
     When = 'B'
        Let #Premium = &A.BN_PREMIUM_AMT / 26.00
        Break
     When = 'S'
        Let #Premium = &A.BN_PREMIUM_AMT / 24.00
        Break
     When = 'M'
        Let #Premium = &A.BN_PREMIUM_AMT / 12.00
        Break
     When = 'A'
        Let #Premium = &A.BN_PREMIUM_AMT
        Break
     When-Other
        Let #Premium = 0
        Break
  End-Evaluate

End-Procedure

!********************************
 Begin-Procedure Print-Plan-Total
!********************************

  Move #TotalPremium to $TotalPremium 999,999,999.99
  Let $BreakPlanSeries = Substr($BreakPlanType,1,1)

  Print   '-'                        (+1,1,{col_name})            Fill
  Print   ' '                        (+0,+{col_sep},{col_emplid})
  If $BreakPlanSeries = '1'
     Print   ' '                     (+0,+{col_sep},{col_covrg_cd})
  End-If
  If $BreakPlanSeries = '2'
     Print   ' '                     (+0,+{col_sep},{col_birthdate})
     Print   ' '                     (+0,+{col_sep},{col_sex})
     Print   ' '                     (+0,+{col_sep},{col_smoker})
  End-If
  If $BreakPlanSeries = '2' Or $PlanSeries = '3'
     Print   ' '                     (+0,+{col_sep},{col_coverage})
  End-If
  Print   '-'                        (+0,+{col_sep},{col_premium}) Fill

  Print   'Plan Total'               (+1,1,{col_name})
  Print   ' '                        (+0,+{col_sep},{col_emplid})
  If $BreakPlanSeries = '1'
     Print   ' '                     (+0,+{col_sep},{col_covrg_cd})
  End-If
  If $BreakPlanSeries = '2'
     Print   ' '                     (+0,+{col_sep},{col_birthdate})
     Print   ' '                     (+0,+{col_sep},{col_sex})
     Print   ' '                     (+0,+{col_sep},{col_smoker})
  End-If
  If $BreakPlanSeries = '2' Or $PlanSeries = '3'
     Print   ' '                     (+0,+{col_sep},{col_coverage})
  End-If
  Print   $TotalPremium              (+0,+{col_sep},{col_premium})
End-Procedure


!*************************************
 Begin-Procedure Update-Summary-Totals
!*************************************

 Add 1  to #PlanTotalIdx

 If #PlanTotalIdx < {PlanTotalMax}
    Put $BreakPlanType  into PlanTotal(#PlanTotalIdx) PlanType
    Put $BreakPlan      into PlanTotal(#PlanTotalIdx) BenefitPlan
    Put #TotalPremium  into PlanTotal(#PlanTotalIdx) TotalPremium
 Else
    DISPLAY 'Plan Total Array Exceeded'
    STOP
 End-If
 End-Procedure

!*************************************
 Begin-Procedure Print-Summary-Totals
!*************************************

 Let #PlanTotalEntries = #PlanTotalIdx
 Let #PlanTotalIdx = 1
 Let #VendorPremium = 0

 NEW-PAGE
 Let $ReportSection = 'SUMMARY'
 Let $BreakPlanType = ' '
 Let $BreakPlan = ' '

 While #PlanTotalIdx <= #PlanTotalEntries
    Get $PlanType  from PlanTotal(#PlanTotalIdx) PlanType
    Get $BenefitPlan  from PlanTotal(#PlanTotalIdx) BenefitPlan
    Get #TotalPremium  from PlanTotal(#PlanTotalIdx) TotalPremium
    Move #TotalPremium  to  $TotalPremium 999,999,999.99
    Print $PlanType          (+1,1,{col_plan_type})
    Print $BenefitPlan       (+0,+{col_sep},{col_benefit_plan})
    Print $TotalPremium      (+0,+{col_sep},{col_premium})
    Add #TotalPremium  to  #VendorPremium
    Add 1  to  #PlanTotalIdx
 End-While

 Move #VendorPremium  to  $TotalPremium 999,999,999.99
 Print '-'                (+1,1,{col_plan_type})               Fill
 Print ' '                (+0,+{col_sep},{col_benefit_plan})
 Print '-'                (+0,+{col_sep},{col_premium})        Fill
 Print 'Vendor Total'     (+1,1,{col_plan_type})
 Print ' '                (+0,+{col_sep},{col_benefit_plan})
 Print $TotalPremium      (+0,+{col_sep},{col_premium})

 End-Procedure

!**************************************
Begin-Procedure Check-Term-Already-Sent
!**************************************
! Send Terminations only once. This looks at the Coverage_Elect_Dt
! to see if it was posted to the database since the previous
! snapshot was created, or if it has an Effective date or Coverage Begin date is greater
! than the "As Of" date from the previous interface created for this vendor.

 Let $TermAlreadySent = 'Y'

 Do Get-Last-Interface-Date($SetId, $Vendor_Id, &A.PLAN_TYPE, $LastAsOfDate_YMD)
 Move &A.COVERAGE_ELECT_DT  to  $Dt
 Do Format-Datetime($Dt, $ElectDt_YMD,{DEFCMP},'','')
 Move &A.COVERAGE_BEGIN_DT  to  $Dt
 Do Format-Datetime($Dt, $CvgBeginDt_YMD,{DEFCMP},'','')
 Move &A.DEDUCTION_BEGIN_DT  to  $Dt
 Do Format-Datetime($Dt, $DedBeginDt_YMD,{DEFCMP},'','')

 If ($ElectDt_YMD    >= $PrevSnapRunDate_YMD)  Or
    ($CvgBeginDt_YMD >= $LastAsOfDate_YMD) Or
    ($DedBeginDt_YMD >= $LastAsOfDate_YMD)
        Let $TermAlreadySent = 'N'
 End-If

End-Procedure

!**********************************
Begin-Procedure Display-Run-Details
!**********************************

 Display ' '
 Display 'Run Details...'
 Display '                            SetId: ' noline
 Display $SetId
 Display '                         VendorId: ' noline
 Display $VendorId
 Display '                        Plan Type: ' noline
 If IsBlank($Plan_Type)
    Display '<all>'
 Else
    Display $Plan_Type
 End-If
 Display '                Premium Frequency: ' noline
 Display $Premium_Freq_Descr
 Display '                Snapshot Run Date: ' noline
 Do Convert-YMD-To-RPT($ThisSnapRunDate_YMD,$ThisSnapRunDate_RPT)
 Display $ThisSnapRunDate_RPT
 Display '             Current "As of" Date: ' noline
 Display $AsOfDate
 Display '            Enrollments Processed: ' noline
 Display #EnrollmentCount 9,999,999

End-Procedure

!****************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'bencrfnc.sqc'  !Carrier Interface utilities
#Include 'readxlat.sqc'  !get translates for fieldname, value

!************************** End of Report ******************************
