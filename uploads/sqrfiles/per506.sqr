!***********************************************************************
!  PER506: Department Table and Departmental Security Tree Audit       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:06:17                                 
!       $Release:  HR9                                                 
!      $Revision:  103                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup
begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-HEADING 7
do Get_Field_Information ('PER506',     'REPORT_TITLE', $REPORTTITLE,   #DW)
  #Include 'stdhdgtr.sqc'
do Get_Field_Information ('PER506',     'LOC_CD1',      $LOC1,          #DW)
do Get_Field_Information ('PER506',     'LOC_CD2',      $LOC2,          #DW)
do Get_Field_Information ('PER506',     'MANAGER_ID',   $MANAGER,       #DW)


do Get_Field_Information ('HR',         'SETID',        $SETID,         #DW)
do Get_Field_Information ('HR',         'DEPTID',       $DEPTID,        #DW)
do Get_Field_Information ('HR',         'EFFDT1',       $EFFDT1,        #DW)
do Get_Field_Information ('HR',         'EFFDT2',       $EFFDT2,        #DW)
do Get_Field_Information ('HR',         'DEPARTMENT',   $DEPTNM,        #DW)
do Get_Field_Information ('HR',         'STATUS',       $STATUS,        #DW)

do Get_Field_Information ('STDHDGHR',   'ASOFDATE',     $ASOFDT,        #DW)

print $ASOFDT    (-1,1)
print $RunDT (0,+1)

if $report1 = 'Y'
   print $AUDIT1 (+2,1)
else
   print $AUDIT2  (+2,1)
end-if

PRINT   $EFFDT1                 (+2,26,44) bold
if $report1 = 'Y'
   PRINT   $LOC1                   (0,89,15)  bold
end-if
PRINT   $DEPTID                 (+1,1,11)  bold
PRINT   $SETID                  (0,13,12)  bold
PRINT   $EFFDT2                 (0,26,12)  bold

if $report1 = 'Y'
   PRINT   $STATUS                 (0,39,15)  bold
   PRINT   $DEPTNM                 (0,56,31)  bold
   PRINT   $LOC2                   (0,89,15)  bold
   PRINT   $MANAGER                (0,107,20) bold
end-if

print '_'      (0,1,126) fill bold
end-HEADING

begin-procedure Init-Report
  move 'PER506' to $ReportID
  concat 'PER506' with $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  do Append_Report_Translation ('STDHDGHR')

end-procedure

begin-procedure Get-Values
let $language_cd = $PRCS_LANGUAGE_CD
if rtrim(&RUN_CNTL_HR.ASOFDATE, ' ') <> ''
   let $RunContolDate = &RUN_CNTL_HR.ASOFDATE
else
   let $RunContolDate = $AsOfToday
end-if
do Format-DateTime($RunContolDate, $RunDT, {DEFDATE}, '', '')
end-procedure

begin-procedure Process-Main
  let $report1 = 'Y'
  do Audit-In-Dept-Not-Tree
  do Audit-In-Tree-Not-Dept

end-procedure

begin-procedure Audit-In-Dept-Not-Tree
do Get_Field_Information ('PER506',    'AUDIT1',       $AUDIT1,        #DW)
let $DataPrinted = 'N'
let $PrintInfo = 'Y'
let $Dept_tmp = ''
let $SetID_tmp = ''
let $EffDt_tmp = ''

BEGIN-SELECT
B.DEPTID                        
B.SETID                         
B.EFFDT  
B.EFF_STATUS  
B.DESCR                         
B.LOCATION                     
B.MANAGER_ID                   

  move 'EFF_STATUS'  to $FieldName
  move &B.EFF_STATUS to $FieldValue
  do Read-Translate-Table

  let $Eff_Status_Descr = rtrim(ltrim($XlatShortName,' '),' ')

  print &B.DEPTID (+1,1,10)
  print &B.SETID  (0,+2,5)
  do Format-DateTime(&B.EffDt, $out, {DEFDATE}, '', '')
  print $out                       (0,+8,10)
  print $Eff_Status_Descr (0,39,15)
  print &B.DESCR     (0,56,30)
  print &B.LOCATION  (0,89)
  print &B.MANAGER_ID (0,107)


  let $DataPrinted = 'Y'
  
FROM PS_DEPT_TBL B
where B.EFFDT = (select max(B1.EFFDT) FROM PS_DEPT_TBL B1
      where B1.SETID = B.SETID and B1.DEPTID = B.DEPTID and 
      B1.EFFDT <= $RunContolDate)
AND NOT EXISTS
      (SELECT 'x'
         FROM PSTREENODE C
        WHERE C.TREE_NODE = B.DEPTID
          AND C.SETID = B.SETID
          AND C.TREE_NAME = 'DEPT_SECURITY'
          AND C.EFFDT = (select max(C1.EFFDT) FROM PSTREENODE C1
              where C1.TREE_NODE = C.TREE_NODE
          AND C1.SETID = C.SETID
          AND C1.TREE_NAME = C.TREE_NAME
          AND C1.EFFDT <= $RunContolDate))
ORDER BY B.DEPTID, B.SETID, B.EFFDT DESC
END-SELECT
end-procedure

begin-procedure Audit-In-Tree-Not-Dept

do Get_Field_Information ('PER506',    'AUDIT2',       $AUDIT2,        #DW)


BEGIN-SELECT
D.TREE_NODE
D.SETID
D.EFFDT
  if $report1 = 'Y' and $DataPrinted = 'Y'
     new-page
  end-if
  let $report1 = 'N'
  print &D.TREE_NODE  (+1,1,10)
  print &D.SETID                            (0,+2,5)
  do Format-DateTime(&D.EffDt, $out, {DEFDATE}, '', '')
  print $out                       (0,+8,10)

FROM PSTREENODE D
WHERE D.TREE_NAME = 'DEPT_SECURITY' and 
      D.EFFDT = (select max(D1.EFFDT) FROM PSTREENODE D1
              where D1.TREE_NODE = D.TREE_NODE
                AND D1.SETID = D.SETID
                AND D1.TREE_NAME = D.TREE_NAME
                AND D1.EFFDT <= $RunContolDate)
      AND NOT EXISTS (SELECT 'x'
          FROM PS_DEPT_TBL E
          WHERE E.DEPTID = D.TREE_NODE
            AND E.SETID = D.SETID
            AND E.EFFDT = (select max(E1.EFFDT) FROM PS_DEPT_TBL E1
                     where E1.SETID = E.SETID and E1.DEPTID = E.DEPTID and 
                           E1.EFFDT <= $RunContolDate))

ORDER BY D.TREE_NODE,D.SETID,D.EFFDT desc
END-SELECT
end-procedure


#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'readxlat.sqc'  !read-translate-table procedure
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
