!***********************************************************************
!  GPUSPS07: Global Payroll Payslips -  Static USA Deductions          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/28:17:56:58                                 *
!       $Release:  HR9                                                 *
!      $Revision:  102                                                 *
!                                                                      *
!***********************************************************************
#Define PS07_EmplDedArrSize 99
begin-setup

!  Occurence 0 = Before Tax Deduction
!            1 = After Tax Deduction
!            2 = Employer Paid Benefits

    create-array Name=PS07_EmplDedArr Size=3
        Field=EmplDedArrLast:Integer
        Field=DeductionNm:Char:{PS07_EmplDedArrSize}
        Field=UserKey2:Char:{PS07_EmplDedArrSize}
        Field=PslpElnCat:Char:{PS07_EmplDedArrSize}
        Field=CurrAmt:Decimal:{PS07_EmplDedArrSize}
        Field=YtdAmt:Decimal:{PS07_EmplDedArrSize}

    create-array Name=PS07_PrintSetup Size=2
        Field=Report_Col1:Integer
        Field=Report_Col2:Integer
        Field=Report_Col3:Integer
        Field=Report_Col4:Integer
        Field=Report_Col5:Integer
        Field=Report_Col6:Integer
        Field=Report_Col7:Integer
        Field=Report_Col8:Integer
        Field=Report_Col9:Integer
        Field=DedDescr:Char
        Field=DedDescrLen:Integer
        Field=DedTitle:Char
        Field=DedTitleLen:Integer
        Field=CurDedTitle:Char
        Field=CurDedTitleLen:Integer
        Field=YtdDedTitle:Char
        Field=YtdDedTitleLen:Integer
        Field=TotalTitle:Char
        Field=TotalTitleLen:Integer
        Field=TaxableTitle:Char
        Field=TaxableTitleLen:Integer
        Field=CurDedTitleMask:Char
        Field=YtdDedTitleMask:Char
        Field=BefTaxDescr:Char
        Field=BefTaxDescrLen:Char
        Field=AftTaxDescr:Char
        Field=AftTaxDescrLen:Char
        Field=ErPaidDescr:Char
        Field=ErPaidDescrLen:Char
        Field=OtherDescr:Char
        Field=OtherDescrLen:Char
        Field=TotalCurrAmt:Decimal:3
        Field=TotalYtdAmt:Decimal:3
        Field=NonPrtCurrAmt:Decimal:3
        Field=NonPrtYtdAmt:Decimal:3


end-setup

!***********************************************************************
!                                                                      *
begin-procedure Get_Static_Deductions_USA
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section GPUSPS07.SQC ')
#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure Get_Static_Deductions_USA')

    let $ReportID = 'GP00PSLP'
    let $Element_Cat = 'AND A.GPUS_PSLP_ELN_CAT IN ('
    let $Element_Cat =  $Element_Cat || '''30'','
    let $Element_Cat =  $Element_Cat || '''40'','
    let $Element_Cat =  $Element_Cat || '''50'','
    let $Element_Cat =  $Element_Cat || '''52'''
    let $Element_Cat =  $Element_Cat || ')'

    do PS07_Prepare_Static_EE_Deductions_USA ($ReportID,$Element_Cat,'SED')

end-procedure ! Get_Static_Deductions_USA

!***********************************************************************
!                                                                      *
begin-procedure PS07_Prepare_Static_EE_Deductions_USA ($ReportID,
                                                       $Element_Cat,
                                                       $Caller)
!                                                                      *
!   $Caller = SED   -> Static Employee Paid Deductions                 *
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Prepare_Static_EE_Deductions_USA')

    let #TotalCurrAmt   = 0
    let #TotalYtdAmt    = 0
    let #NonPrtCurrAmt  = 0
    let #NonPrtYtdAmt   = 0
    let #DedCnt         = 0
    let $section_printed = 'n'

    clear-array  name = PS07_EmplDedArr
    clear-array  name = PS07_PrintSetup

    while ($section_printed = 'n')
        do get_start_page_line_number(#_current-line, #page-count,
                                      #start-section-line-number,
                                      #start-section-page-number)
        do evaluate_space(#start-section-line-number,$space_left)
        if $space_left = 'n'
            if $gbl_Paycheck_To_Do = 'y'
                Do print_check_usa
                #debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Back in Procedure PS07_Prepare_Static_EE_Deductions_USA')
                Add 2 to #start-section-line-number
                move 'n' to $check_collision
                move 'n' to $gbl_Paycheck_To_Do
            else
                new-page
                Move 1 to #_gbl_curr_Section_Start_Line
                Move 1 to #start-section-line-number
                do PS07_Print_Static_EE_Deductions_USA ($ReportID,$Element_Cat,
                                                        $Caller,
                                                        #start-section-line-number)
                #debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Back in Procedure PS07_Prepare_Static_EE_Deductions_USA')
                move 'y' to $section_printed
                break
            end-if
        end-if
        if $space_left = 'y'
            if $gbl_Paycheck_To_Do = 'y'
                do evaluate_bankdraft_collision(#start-section-line-number,
                                                $check_collision)
                if $check_collision = 'y'

                    Do print_check_usa
                    #debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Back in Procedure PS07_Prepare_Static_EE_Deductions_USA')
                    Add 2 to #start-section-line-number
                    move 'n' to $check_collision
                    move 'n' to $gbl_Paycheck_To_Do
                else
                    do PS07_Print_Static_EE_Deductions_USA ($ReportID,
                                                            $Element_Cat,
                                                            $Caller,
                                                            #start-section-line-number)
                    #debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Back in Procedure PS07_Prepare_Static_EE_Deductions_USA')
                    move 'y' to $section_printed
                    break
                end-if
            else
                do PS07_Print_Static_EE_Deductions_USA ($ReportID,$Element_Cat,
                                                        $Caller,
                                                        #start-section-line-number)
                #debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Back in Procedure PS07_Prepare_Static_EE_Deductions_USA')
                move 'y' to $section_printed
                break
            end-if
        end-if
    end-while

end-procedure ! PS07_Prepare_Static_EE_Deductions_USA

!***********************************************************************
!                                                                      *
begin-procedure PS07_Print_Static_EE_Deductions_USA ($ReportID,
                                                     $Element_Cat,
                                                     $Caller,
                                                     #start-section-line-number)
!                                                                      *
!   $Caller = SED   -> Static Employee Paid Deductions                 *
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Print_Static_EE_Deductions_USA')
#debug1 show '** USA STATIC DEDUCTION section:        $_gbl_tgt_Emplid:= ' $_gbl_tgt_Emplid

Begin-SELECT
MAX(AA.SLICE_END_DT)    &AA.SLICE_END_DT
    let $max_slice_end_dt   = &AA.SLICE_END_DT
FROM PS_GPUS_PSLP_RSLT AA
WHERE AA.JOBINSTANCE  = #_gbl_job_instance
AND AA.CAL_RUN_ID        = $_gbl_rc_Calendar_Group
AND AA.EMPLID            = $_gbl_tgt_Emplid
AND AA.PMT_GRP_ID        = #_gbl_tgt_Grp_ID
AND AA.GP_CNTRY_PSLP_ELN = $_gbl_GP_CNTRY_PSLP_ELN
AND AA.GP_ELN_SET        = $_gbl_GP_ELN_SET
End-SELECT

    let #Line_counter   = #start-section-line-number
Begin-SELECT
A.GP_PSLP_ORDER
A.PIN_NUM               &A.PIN_NUM
A.CALC_RSLT_VAL         &A.DED_AMT
A.GPUS_PSLP_CURR_YTD    &A.GPUS_PSLP_CURR_YTD
A.GPUS_PSLP_ELN_CAT     &A.GPUS_PSLP_ELN_CAT
A.GPUS_PSLP_RES_DTL     &A.GPUS_PSLP_RES_DTL
A.GPUS_PSLP_TITLEOPT    &A.GPUS_PSLP_TITLEOPT
A.GPUS_PSLP_TITLE       &A.GPUS_PSLP_TITLE
A.PIN_CATEGORY          &A.PIN_CATEGORY
A.USER_KEY1             &A.USER_KEY1
A.USER_KEY2             &A.USER_KEY2
A.USER_KEY3             &A.USER_KEY3
A.USER_KEY4             &A.USER_KEY4
A.USER_KEY5             &A.USER_KEY5
A.USER_KEY6             &A.USER_KEY6
A.INSTANCE              &A.INSTANCE
A.SLICE_END_DT          &A.SLICE_END_DT       
    let #PinNum         = &A.PIN_NUM
    let #DedAmt         = &A.DED_AMT
    let #PSLP_Curr_Ytd  = &A.GPUS_PSLP_CURR_YTD
    let $PslpElnCat     = &A.GPUS_PSLP_ELN_CAT
    let $PslpResDtl     = &A.GPUS_PSLP_RES_DTL
    let $PinCategory    = &A.PIN_CATEGORY
    let $PslpTitleOpt   = &A.GPUS_PSLP_TITLEOPT
    let $PslpTitle      = &A.GPUS_PSLP_TITLE
    let $UserKey1       = &A.USER_KEY1
    let $UserKey2       = &A.USER_KEY2
    let $UserKey3       = &A.USER_KEY3
    let $UserKey4       = &A.USER_KEY4
    let $UserKey5       = &A.USER_KEY5
    let $UserKey6       = &A.USER_KEY6
    let #Instance       = &A.INSTANCE
    let $slice_end_dt   = &A.SLICE_END_DT
    Do get_pin_name(&A.PIN_NUM, $DeductionNm)
    do PS07_UpdDedArr (#PinNum,$DeductionNm,#DedAmt,#PSLP_Curr_Ytd,$PslpElnCat,$PslpResDtl,$PinCategory,$PslpTitleOpt,
                       $PslpTitle,$UserKey1, $UserKey2,#Instance,$slice_end_dt,$max_slice_end_dt)
FROM PS_GPUS_PSLP_RSLT A
     WHERE A.JOBINSTANCE  = #_gbl_job_instance
    AND A.CAL_RUN_ID        = $_gbl_rc_Calendar_Group
    AND A.EMPLID            = $_gbl_tgt_Emplid
    AND A.PMT_GRP_ID        = #_gbl_tgt_Grp_ID
    AND A.GP_CNTRY_PSLP_ELN = $_gbl_GP_CNTRY_PSLP_ELN
    AND A.GP_ELN_SET        = $_gbl_GP_ELN_SET
   [$Element_Cat]
    GROUP BY A.PIN_NUM, A.GP_PSLP_ORDER,A.RSLT_SEG_NUM,A.SEQ_NUM,A.GPUS_PSLP_CURR_YTD, A.GPUS_PSLP_ELN_CAT, 
             A.GPUS_PSLP_RES_DTL, A.GPUS_PSLP_TITLEOPT,A.GPUS_PSLP_TITLE, A.PIN_CATEGORY, A.CALC_RSLT_VAL,
             A.USER_KEY1, A.USER_KEY2, A.USER_KEY3, A.USER_KEY4, A.USER_KEY5, A.USER_KEY6,
             A.INSTANCE,A.SLICE_END_DT           
    ORDER BY A.GP_PSLP_ORDER,A.RSLT_SEG_NUM,A.SEQ_NUM,A.GPUS_PSLP_CURR_YTD
End-SELECT

    do PS07_PrintDedArr ($ReportID,$Caller,#Line_counter)

    let #_gbl_Line_Ctr = #Line_counter

end-procedure ! PS07_Print_Static_EE_Deductions_USA

!***********************************************************************
!                                                                      *
begin-procedure PS07_GetTranslatedDescr (#PinNum,:$DeductionNm)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_GetTranslatedDescr ')

Begin-SELECT on-error=SQL-Error
DESCR       &DESCR_PIN_LNG

    let $DeductionNm = &DESCR_PIN_LNG

FROM PS_GP_PIN_LANG
WHERE PIN_NUM     = #PinNum
  AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT

end-procedure ! PS07_GetTranslatedDescr

!***********************************************************************
!                                                                      *
begin-procedure PS07_UpdDedArr (#PinNum,$DeductionNm,#DedAmt,:#PSLP_Curr_Ytd,
                                $PslpElnCat, $PslpResDtl,$PinCategory,
                                $PslpTitleOpt,$PslpTitle,$UserKey1,$UserKey2,#Instance,$slice_end_dt,$max_slice_end_dt)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_UpdDedArr ')

#debug1 show '** USA STATIC DEDUCTION section:        $DeductionNm = ' $DeductionNm ' #DedAmt = '#DedAmt
Do get_appropriate_description(#PinNum, $PslpTitleOpt,$PslpTitle,$PinCategory,$UserKey1, $UserKey2,$DeductionNm)
    Evaluate $PslpElnCat

        When = '30'

            let #PslpElnCat = 0
            Break

        When = '40'

            let #PslpElnCat = 1
            Break

        When = '50'
            let #PslpElnCat = 2
            Break

        When = '52'

            let #PslpElnCat = 2
            let $DeductionNm =  Rtrim($DeductionNm,' ') || ' *'
            Break

        When-Other
            Break
    End-Evaluate
    let #i=1

    while #i <= PS07_EmplDedArr.EmplDedArrLast(#PslpElnCat)
      !if $PslpResDtl = 'N'
#debug2 Show '** USA STATIC DEDUCTION section:        Empl Deduction Array counter = ' #i 
#debug2 show '** USA STATIC DEDUCTION section:        $PslpResDtl = ' $PslpResDtl 
#debug2 show '** USA STATIC DEDUCTION section:        $DeductionNm = ' $DeductionNm ' $UserKey2 = ' $UserKey2
let $tempARR1 = Rtrim(PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i),' ')
let $tempArr2 = Rtrim(PS07_EmplDedArr.UserKey2(#PslpElnCat,#i),' ')
let $var1 = Rtrim($DeductionNm,' ')
let $var2 = Rtrim($UserKey2,' ')
        if Rtrim(PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i),' ') = Rtrim($DeductionNm,' ')
          if Rtrim(PS07_EmplDedArr.UserKey2(#PslpElnCat,#i),' ') = Rtrim($UserKey2,' ')
            if #PSLP_Curr_Ytd = 20  ! YTD Amount
               if $slice_end_dt = $max_slice_end_dt
                  Array-Add #DedAmt to PS07_EmplDedArr (#PslpElnCat) YtdAmt (#i)
               end-if
            else

               Array-Add #DedAmt to PS07_EmplDedArr (#PslpElnCat) CurrAmt (#i)
            end-if

            Break
          end-if
        end-if
       !end-if
        let #i = #i + 1
    end-while

   if $PslpResDtl = 'N'
    if #i > PS07_EmplDedArr.EmplDedArrLast(#PslpElnCat)  !Deduction not found

        let PS07_EmplDedArr.PslpElnCat (#PslpElnCat,#i) = $PslpElnCat
        let PS07_EmplDedArr.UserKey2 (#PslpElnCat,#i) = $UserKey2
        if $PslpElnCat = '52'

            let PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i) = Rtrim($DeductionNm,' ') || ' *'
        else
            let PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i) = Rtrim($DeductionNm,' ')
        end-if
        if #PSLP_Curr_Ytd = 20  ! YTD Amount
           if $slice_end_dt = $max_slice_end_dt
              let PS07_EmplDedArr.YtdAmt (#PslpElnCat,#i)     = #DedAmt
           end-if
        else
           let PS07_EmplDedArr.CurrAmt(#PslpElnCat,#i)     = #DedAmt
        end-if
        let PS07_EmplDedArr.EmplDedArrLast(#PslpElnCat) = #i
    end-if
end-if
 
if $PslpResDtl = 'Y'
  if #i > PS07_EmplDedArr.EmplDedArrLast(#PslpElnCat)  !Deduction not found
       let PS07_EmplDedArr.PslpElnCat (#PslpElnCat,#i) = $PslpElnCat
       let PS07_EmplDedArr.UserKey2 (#PslpElnCat,#i) = $UserKey2
        #debug1 sHOW '** USA STATIC DEDUCTION section:        DETAILS OF THE DEDUCTION: $Deduction Name = ' $DeductionNm
        #debug1 sHOW '** USA STATIC DEDUCTION section:                                  $ELN Category = '$PslpElnCat ' PIN Num = '#PinNum ' PIN Category = '$PinCategory                                 
        #debug1 sHOW '** USA STATIC DEDUCTION section:                                  Title Option = '$PslpTitleOpt ' Title = '$PslpTitle
        #debug1 sHOW '** USA STATIC DEDUCTION section:                                  User Key 1 = '$UserKey1 ' User Key 2 = ' $UserKey2
         !Do get_appropriate_description(#PinNum, $PslpTitleOpt,$PslpTitle,$PinCategory,$UserKey1, $UserKey2,$DeductionNm)
        
        if $PslpElnCat = '52'

            let PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i) = Rtrim($DeductionNm,' ') || ' *'
        else
            let PS07_EmplDedArr.DeductionNm(#PslpElnCat,#i) = Rtrim($DeductionNm,' ')
        end-if
        if #PSLP_Curr_Ytd = 20  ! YTD Amount
           if $slice_end_dt = $max_slice_end_dt
              let PS07_EmplDedArr.YtdAmt (#PslpElnCat,#i)     = #DedAmt
           end-if
        else
           let PS07_EmplDedArr.CurrAmt(#PslpElnCat,#i)     = #DedAmt
        end-if
        let PS07_EmplDedArr.EmplDedArrLast(#PslpElnCat) = #i

  end-if
end-if
 
end-procedure ! PS07_UpdDedArr

!***********************************************************************
!                                                                      *
begin-procedure PS07_PrintDedArr ($ReportID,$Caller,:#Line_counter)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_PrintDedArr')

    let #BoxStartCol = 1
    let #BoxWidth    = 126

    let $PrintHeading = 'Y'
    let #i=1

    while #i < {PS07_EmplDedArrSize}

        if Rtrim(PS07_EmplDedArr.PslpElnCat(0,#i),' ') = '' and
           Rtrim(PS07_EmplDedArr.PslpElnCat(1,#i),' ') = '' and
           Rtrim(PS07_EmplDedArr.PslpElnCat(2,#i),' ') = ''

           Break
        end-if

        if $PrintHeading = 'Y'
            do PS07_Print_Headings ($ReportID,$Caller,#BoxStartCol,
                                    #BoxWidth,#Line_counter)
            let $PrintHeading = 'N'
        end-if

        if $gbl_Paycheck_To_Do = 'Y'

            if #Line_counter >= (#_gbl_Paycheck_Start_Line - 2)

                Do print_check_usa
                let $_gbl_Paycheck_To_Do = 'N'
                let #Line_counter = #_gbl_curr_Section_Start_Line
                new-page
                do PS07_Print_Headings ($ReportID,$Caller,#BoxStartCol,
                                        #BoxWidth,#Line_counter)
            end-if
        end-if

        do PS07_Print_Empl_Deductions (#Line_counter,#i,#BoxStartCol,
                                       #BoxWidth)

        let #i = #i + 1
    end-while

    if $PrintHeading = 'Y'
        do PS07_Print_Headings ($ReportID,$Caller,#BoxStartCol,
                                #BoxWidth,#Line_counter)
        let $PrintHeading = 'N'
    end-if

    do PS07_Print_Ded_Totals ($Caller,#Line_counter,#BoxStartCol,#BoxWidth)

end-procedure ! PS07_PrintDedArr

!***********************************************************************
!                                                                      *
begin-procedure PS07_Print_Headings ($ReportID,$Caller,#BoxStartCol,
                                     #BoxWidth,:#Line_counter)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Print_Headings')


    do PS07_Report_Setup ($ReportID,$Caller,#BoxStartCol)

    columns 3

    if #_gbl_curr_Section_Nbr_Lines > #_gbl_curr_Section_Dtl_Lines

        Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box #_gbl_curr_Section_Nbr_Lines #_BoxThickness

        let #VertLineBegin =  #Line_Counter - 1

        if (#_gbl_curr_Section_Nbr_Lines - #_gbl_curr_Section_Dtl_Lines) > 0

            Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box 1 #_BoxThickness  12

!           Block Title

            let $BefTaxDescr       = PS07_PrintSetup.BefTaxDescr(1)
            let #Col_Begin         = PS07_PrintSetup.Report_Col1(1)
            let #Col_End           = PS07_PrintSetup.Report_Col4(1)
            let #BefTaxDescrLen    = length($BefTaxDescr)
            let #Report_Col        = (trunc((#Col_End - #Col_Begin - #BefTaxDescrLen) / 2,0)) + #Col_Begin
            Print $BefTaxDescr   (#Line_counter,#Report_Col,#BefTaxDescrLen) Bold

            let $AftTaxDescr       = PS07_PrintSetup.AftTaxDescr(1)
            let #Col_Begin         = PS07_PrintSetup.Report_Col4(1)
            let #Col_End           = PS07_PrintSetup.Report_Col7(1)
            let #AftTaxDescrLen    = length($AftTaxDescr)
            let #Report_Col        = (trunc((#Col_End - #Col_Begin - #AftTaxDescrLen) / 2,0)) + #Col_Begin
            Print $AftTaxDescr   (#Line_counter,#Report_Col,#AftTaxDescrLen) Bold

            let $ErPaidDescr       = PS07_PrintSetup.ErPaidDescr(1)
            let #Col_Begin         = PS07_PrintSetup.Report_Col7(1)
            let #Col_End           = #BoxWidth
            let #ErPaidDescrLen    = length($ErPaidDescr)
            let #Report_Col        = (trunc((#Col_End - #Col_Begin - #ErPaidDescrLen) / 2,0)) + #Col_Begin
            Print $ErPaidDescr   (#Line_counter,#Report_Col,#ErPaidDescrLen) Bold
        End-if

        let #Report_col = PS07_PrintSetup.Report_Col4(1) - 1
        Graphic (#VertLineBegin,#Report_col,#_gbl_curr_Section_Nbr_Lines) Vert-Line #_BoxThickness
        let #Report_col = PS07_PrintSetup.Report_Col7(1) - 1
        Graphic (#VertLineBegin,#Report_col,#_gbl_curr_Section_Nbr_Lines) Vert-Line #_BoxThickness

        if (#_gbl_curr_Section_Nbr_Lines - #_gbl_curr_Section_Dtl_Lines) > 1

            let #Line_counter = #Line_counter + 1
            Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box 1 #_BoxThickness

!           Block 1 - Before-Tax Deductions

            let $DedDescr       = PS07_PrintSetup.DedDescr(1)
            let #Report_Col     = PS07_PrintSetup.Report_Col1(1)
            let #DedDescrLen    = PS07_PrintSetup.DedDescrLen(1)
            Print $DedDescr   (#Line_counter,#Report_Col,#DedDescrLen)
            let $CurDedTitle    = PS07_PrintSetup.CurDedTitle(1)
            let #Report_Col     = PS07_PrintSetup.Report_Col2(1)
            let #CurDedTitleLen = PS07_PrintSetup.CurDedTitleLen(1)
            let $CurDedTitle    = lpad($CurDedTitle,#CurDedTitleLen,' ')
            Print $CurDedTitle   (#Line_counter,#Report_Col,#CurDedTitleLen)
            let $YtdDedTitle    = PS07_PrintSetup.YtdDedTitle(1)
            let #Report_Col     = PS07_PrintSetup.Report_Col3(1)
            let #YtdDedTitleLen = PS07_PrintSetup.YtdDedTitleLen(1)
            let $YtdDedTitle    = lpad($YtdDedTitle,#YtdDedTitleLen,' ')
            Print $YtdDedTitle   (#Line_counter,#Report_Col,#YtdDedTitleLen)

!           Block 2 - After-Tax Deductions

            let #Report_Col     = PS07_PrintSetup.Report_Col4(1)
            Print $DedDescr   (#Line_counter,#Report_Col,#DedDescrLen)
            let #Report_Col     = PS07_PrintSetup.Report_Col5(1)
            Print $CurDedTitle   (#Line_counter,#Report_Col,#CurDedTitleLen)
            let #Report_Col     = PS07_PrintSetup.Report_Col6(1)
            Print $YtdDedTitle   (#Line_counter,#Report_Col,#YtdDedTitleLen)

!           Block 3 - Er-Paid Deductions

            let #Report_Col     = PS07_PrintSetup.Report_Col7(1)
            Print $DedDescr   (#Line_counter,#Report_Col,#DedDescrLen)
            let #Report_Col     = PS07_PrintSetup.Report_Col8(1)
            Print $CurDedTitle   (#Line_counter,#Report_Col,#CurDedTitleLen)
            let #Report_Col     = PS07_PrintSetup.Report_Col9(1)
            Print $YtdDedTitle   (#Line_counter,#Report_Col,#YtdDedTitleLen)
        End-if
    else
        let #Line_counter = #Line_counter - 1
    End-if

end-procedure ! PS07_Print_Headings

!***********************************************************************
!                                                                      *
begin-procedure PS07_Report_Setup ($ReportID,$Caller,#BoxStartCol)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Report_Setup')

    do Init_Report_Translation ($ReportID, $_gbl_tgt_lang_cd)

    Evaluate $Caller
        when = 'SED'
            do Get_Field_Information ($ReportID, 'DEDTITLE', $DedTitle,
                                      #DedTitleLen)
            let #DedTitleLen                   = 18
            let PS07_PrintSetup.DedTitle(1)    = $DedTitle
            let PS07_PrintSetup.DedTitleLen(1) = #DedTitleLen
            Break

        When-Other
            Break
    End-Evaluate

!   3 blocks must be printed.  Each block has its own title

!   Block 1 - Before-Tax Deductions

    do Get_Field_Information ($ReportID, 'BEFTAXDEDDESCR', $BTDescr,
                              #BTDescrLen)
    let #BTDescrLen                          = 30
    let PS07_PrintSetup.BefTaxDescr(1)       = $BTDescr
    let PS07_PrintSetup.BefTaxDescrLen(1)    = #BTDescrLen

!   Block 2 - After-Tax Deductions

    do Get_Field_Information ($ReportID, 'AFTTAXDEDDESCR', $ATDescr,
                              #ATDescrLen)
    let #ATDescrLen                          = 30
    let PS07_PrintSetup.AftTaxDescr(1)       = $ATDescr
    let PS07_PrintSetup.AftTaxDescrLen(1)    = #ATDescrLen

!   Block 3 - Er-Paid Deductions

    do Get_Field_Information ($ReportID, 'ERPAIDDEDDESCR', $EPDescr,
                              #EPDescrLen)
    let #EPDescrLen                          = 30
    let PS07_PrintSetup.ErPaidDescr(1)       = $EPDescr
    let PS07_PrintSetup.ErPaidDescrLen(1)    = #EPDescrLen

!   Get Column Description

    do Get_Field_Information ($ReportID, 'DESCR_LBL', $DedDescr,
                              #DedDescrLen)
    let #DedDescrLen                         = 20
    let PS07_PrintSetup.DedDescr(1)          = $DedDescr
    let PS07_PrintSetup.DedDescrLen(1)       = #DedDescrLen
    do Get_Field_Information ($ReportID, 'CUR_LBL', $CurDedTitle,
                              #CurDedTitleLen)
    let #CurDedTitleLen                      = 10
    let PS07_PrintSetup.CurDedTitle(1)       = $CurDedTitle
    let PS07_PrintSetup.CurDedTitleLen(1)    = #CurDedTitleLen
    do Get_Field_Information ($ReportID, 'YTD_LBL', $YTDDedTitle,
                              #YTDDedTitleLen)
    let #YTDDedTitleLen                      = 10
    let PS07_PrintSetup.YtdDedTitle(1)       = $YTDDedTitle
    let PS07_PrintSetup.YtdDedTitleLen(1)    = #YTDDedTitleLen

    do Get_Field_Information ($ReportID, 'TOTAL_LBL', $TotalTitle,
                              #TotalTitleLen)
    let #TotalTitleLen                       = 20
    let PS07_PrintSetup.TotalTitle(1)        = $TotalTitle
    let PS07_PrintSetup.TotalTitleLen(1)     = #TotalTitleLen
    do Get_Field_Information ($ReportID, 'TAXABLETITLE', $TaxableTitle,
                              #TaxableTitleLen)
    let #TaxableTitleLen                       = 20
    let PS07_PrintSetup.TaxableTitle(1)      = $TaxableTitle
    let PS07_PrintSetup.TaxableTitleLen(1)   = #TaxableTitleLen

    do Get_Field_Information ($ReportID, 'OTHER_LBL', $OthDescr,
                              #OthDescrLen)
    let #OthDescrLen                        = 30
    let PS07_PrintSetup.OtherDescr(1)       = $OthDescr
    let PS07_PrintSetup.OtherDescrLen(1)    = #OthDescrLen

!   Block 1 - Before-Tax Deductions

    let #Report_Col1                    = #BoxStartCol + 1
    let PS07_PrintSetup.Report_Col1(1)       = #Report_Col1

    let #Report_Col2                    = #Report_Col1 + #DedDescrLen
    let PS07_PrintSetup.Report_Col2(1)       = #Report_Col2

    let #Report_Col3                    = #Report_Col2 + #CurDedTitleLen
    let PS07_PrintSetup.Report_Col3(1)       = #Report_Col3

!   Block 2 - After-Tax Deductions

    let #Report_Col4                    = #Report_Col3 + #YTDDedTitleLen + 2
    let PS07_PrintSetup.Report_Col4(1)       = #Report_Col4

    let #Report_Col5                    = #Report_Col4 + #DedDescrLen
    let PS07_PrintSetup.Report_Col5(1)       = #Report_Col5

    let #Report_Col6                    = #Report_Col5 + #CurDedTitleLen
    let PS07_PrintSetup.Report_Col6(1)       = #Report_Col6

!   Block 3 - Er-Paid Deductions

    let #Report_Col7                    = #Report_Col6 + #YTDDedTitleLen + 2
    let PS07_PrintSetup.Report_Col7(1)       = #Report_Col7

    let #Report_Col8                    = #Report_Col7 + #DedDescrLen
    let PS07_PrintSetup.Report_Col8(1)       = #Report_Col8

    let #Report_Col9                    = #Report_Col8 + #CurDedTitleLen
    let PS07_PrintSetup.Report_Col9(1)       = #Report_Col9

    do PS07_PrepareMask(#CurDedTitleLen,'Y',$CurDedTitleMask)
    let PS07_PrintSetup.CurDedTitleMask(1)   = $CurDedTitleMask
    do PS07_PrepareMask(#YTDDedTitleLen,'Y',$YTDDedTitleMask)
    let PS07_PrintSetup.YtdDedTitleMask(1)   = $YTDDedTitleMask

!   Need to reset some Global Parameters

    if #_gbl_curr_Section_Dtl_Lines < (#_gbl_curr_Section_Nbr_Lines - 2)

        let #_gbl_curr_Section_Nbr_Lines = #_gbl_curr_Section_Dtl_Lines + 2
    end-if

end-procedure ! PS07_Report_Setup

!***********************************************************************
!                                                                      *
begin-procedure PS07_Print_Empl_Deductions (:#Line_counter,#RowNum,
                                            #BoxStartCol,#BoxWidth)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Print_Empl_Deductions')

    let $Incr_Line_ctr    = 'N'
    let $DeductionNm      = PS07_EmplDedArr.DeductionNm(0,#RowNum)
    if Rtrim($DeductionNm,' ') <> ''

        let #CurrAmt          = PS07_EmplDedArr.CurrAmt(0,#RowNum)
        let #YtdAmt           = PS07_EmplDedArr.YtdAmt(0,#RowNum)

        let #Elements = PS07_EmplDedArr.EmplDedArrLast(0)

        if #RowNum < (#_gbl_curr_Section_Dtl_Lines - 1)
            or #Elements = (#_gbl_curr_Section_Dtl_Lines - 1)

            let #Line_counter     = #Line_counter + 1
            let $Incr_Line_ctr    = 'Y'

            let #Report_Col       = PS07_PrintSetup.Report_Col1    (1)
            let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
            Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

            let #Report_Col       = PS07_PrintSetup.Report_Col2    (1)
            let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen (1)
            let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
            Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                                  Edit :$CurDedTitleMask

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (0)

            let #Report_Col       = PS07_PrintSetup.Report_Col3    (1)
            let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen (1)
            let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
            Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                  Edit :$YTDDedTitleMask

            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (0)
        else

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (0)
            Array-Add #CurrAmt to PS07_PrintSetup(1) NonPrtCurrAmt (0)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (0)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) NonPrtYtdAmt  (0)
        end-if
    end-if

    let $DeductionNm      = PS07_EmplDedArr.DeductionNm(1,#RowNum)
    if Rtrim($DeductionNm,' ') <> ''

        let #CurrAmt          = PS07_EmplDedArr.CurrAmt(1,#RowNum)
        let #YtdAmt           = PS07_EmplDedArr.YtdAmt(1,#RowNum)

        let #Elements = PS07_EmplDedArr.EmplDedArrLast(1)

        if #RowNum < (#_gbl_curr_Section_Dtl_Lines - 1)
            or #Elements = (#_gbl_curr_Section_Dtl_Lines - 1)

            if $Incr_Line_ctr = 'N'
                let #Line_counter     = #Line_counter + 1
                let $Incr_Line_ctr    = 'Y'
            end-if

            let #Report_Col       = PS07_PrintSetup.Report_Col4    (1)
            let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
            Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

            let #Report_Col       = PS07_PrintSetup.Report_Col5    (1)
            let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen (1)
            let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
            Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                                  Edit :$CurDedTitleMask

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (1)

            let #Report_Col       = PS07_PrintSetup.Report_Col6    (1)
            let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen (1)
            let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
            Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                  Edit :$YTDDedTitleMask

            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (1)
        else

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (1)
            Array-Add #CurrAmt to PS07_PrintSetup(1) NonPrtCurrAmt (1)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (1)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) NonPrtYtdAmt  (1)
        end-if
    end-if

    let $DeductionNm      = PS07_EmplDedArr.DeductionNm(2,#RowNum)
    if Rtrim($DeductionNm,' ') <> ''

        let #CurrAmt          = PS07_EmplDedArr.CurrAmt(2,#RowNum)
        let #YtdAmt           = PS07_EmplDedArr.YtdAmt(2,#RowNum)

        let #Elements = PS07_EmplDedArr.EmplDedArrLast(2)

        if #RowNum < (#_gbl_curr_Section_Dtl_Lines - 1)
            or #Elements = (#_gbl_curr_Section_Dtl_Lines - 1)

            if $Incr_Line_ctr = 'N'
                let #Line_counter     = #Line_counter + 1
                let $Incr_Line_ctr    = 'Y'
            end-if

            let #Report_Col       = PS07_PrintSetup.Report_Col7    (1)
            let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
            Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

            let #Report_Col       = PS07_PrintSetup.Report_Col8    (1)
            let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen (1)
            let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
            Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                                  Edit :$CurDedTitleMask

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (2)

            let #Report_Col       = PS07_PrintSetup.Report_Col9    (1)
            let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen (1)
            let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
            Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                  Edit :$YTDDedTitleMask

            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (2)
        else

            Array-Add #CurrAmt to PS07_PrintSetup(1) TotalCurrAmt (2)
            Array-Add #CurrAmt to PS07_PrintSetup(1) NonPrtCurrAmt (2)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) TotalYtdAmt  (2)
            Array-Add #YtdAmt  to PS07_PrintSetup(1) NonPrtYtdAmt  (2)
        end-if
    end-if

end-procedure ! PS07_Print_Empl_Deductions

!***********************************************************************
!                                                                      *
begin-procedure PS07_Print_Ded_Totals ($Caller,:#Line_counter,
                                       #BoxStartCol,#BoxWidth)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('USA STATIC DEDUCTION section: Procedure PS07_Print_Ded_Totals')

    let #NonPrtCurrAmt0   = PS07_PrintSetup.NonPrtCurrAmt(1,0)
    let #NonPrtYtdAmt0    = PS07_PrintSetup.NonPrtYtdAmt (1,0)
    let #NonPrtCurrAmt1   = PS07_PrintSetup.NonPrtCurrAmt(1,1)
    let #NonPrtYtdAmt1    = PS07_PrintSetup.NonPrtYtdAmt (1,1)
    let #NonPrtCurrAmt2   = PS07_PrintSetup.NonPrtCurrAmt(1,2)
    let #NonPrtYtdAmt2    = PS07_PrintSetup.NonPrtYtdAmt (1,2)

    if #NonPrtCurrAmt0  <> 0 or
       #NonPrtYtdAmt0   <> 0 or
       #NonPrtCurrAmt1  <> 0 or
       #NonPrtYtdAmt1   <> 0 or
       #NonPrtCurrAmt2  <> 0 or
       #NonPrtYtdAmt2   <> 0

        if (#_gbl_curr_Section_Dtl_Lines - 1) > 0

            let #Line_counter     = #_gbl_curr_Section_Start_Line + #_gbl_curr_Section_Nbr_Lines - 1

            if #NonPrtCurrAmt0  <> 0 or
               #NonPrtYtdAmt0   <> 0

                let $DeductionNm      = PS07_PrintSetup.OtherDescr     (1)
                let #Report_Col       = PS07_PrintSetup.Report_Col1    (1)
                let #DedDescrLen      = PS07_PrintSetup.OtherDescrLen  (1)
                Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

                let #Report_Col       = PS07_PrintSetup.Report_Col2(1)
                let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen(1)
                let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
                Print #NonPrtCurrAmt0  (#Line_counter,#Report_Col,#CurDedTitleLen)
                                       Edit :$CurDedTitleMask

                let #Report_Col       = PS07_PrintSetup.Report_Col3(1)
                let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen(1)
                let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
                Print #NonPrtYtdAmt0   (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                       Edit :$YTDDedTitleMask
            end-if

            if #NonPrtCurrAmt1  <> 0 or
               #NonPrtYtdAmt1   <> 0

                let $DeductionNm      = PS07_PrintSetup.OtherDescr     (1)
                let #Report_Col       = PS07_PrintSetup.Report_Col4    (1)
                let #DedDescrLen      = PS07_PrintSetup.OtherDescrLen  (1)
                Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

                let #Report_Col       = PS07_PrintSetup.Report_Col5(1)
                let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen(1)
                let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
                Print #NonPrtCurrAmt1  (#Line_counter,#Report_Col,#CurDedTitleLen)
                                       Edit :$CurDedTitleMask

                let #Report_Col       = PS07_PrintSetup.Report_Col6(1)
                let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen(1)
                let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
                Print #NonPrtYtdAmt1   (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                       Edit :$YTDDedTitleMask
            end-if

            if #NonPrtCurrAmt2  <> 0 or
               #NonPrtYtdAmt2   <> 0

                let $DeductionNm      = PS07_PrintSetup.OtherDescr     (1)
                let #Report_Col       = PS07_PrintSetup.Report_Col7    (1)
                let #DedDescrLen      = PS07_PrintSetup.OtherDescrLen  (1)
                Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

                let #Report_Col       = PS07_PrintSetup.Report_Col8(1)
                let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen(1)
                let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
                Print #NonPrtCurrAmt2  (#Line_counter,#Report_Col,#CurDedTitleLen)
                                       Edit :$CurDedTitleMask

                let #Report_Col       = PS07_PrintSetup.Report_Col9(1)
                let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen(1)
                let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
                Print #NonPrtYtdAmt2   (#Line_counter,#Report_Col,#YTDDedTitleLen)
                                       Edit :$YTDDedTitleMask
            end-if
        end-if
    end-if

    let #Line_counter     = #_gbl_curr_Section_Start_Line + #_gbl_curr_Section_Nbr_Lines !- 1

    if #_gbl_curr_Section_Nbr_Lines > #_gbl_curr_Section_Dtl_Lines
        Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box 1 #_BoxThickness
    End-if

    let #CurrAmt          = PS07_PrintSetup.TotalCurrAmt   (1,0)
    let #YtdAmt           = PS07_PrintSetup.TotalYtdAmt    (1,0)

    let $DeductionNm      = PS07_PrintSetup.TotalTitle     (1)
    let #Report_Col       = PS07_PrintSetup.Report_Col1    (1)
    let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
    Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

    let #Report_Col       = PS07_PrintSetup.Report_Col2    (1)
    let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen (1)
    let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
    Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                          Edit :$CurDedTitleMask

    let #Report_Col       = PS07_PrintSetup.Report_Col3    (1)
    let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen (1)
    let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
    Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                              Edit :$YTDDedTitleMask

    let #CurrAmt          = PS07_PrintSetup.TotalCurrAmt   (1,1)
    let #YtdAmt           = PS07_PrintSetup.TotalYtdAmt    (1,1)

    let $DeductionNm      = PS07_PrintSetup.TotalTitle     (1)
    let #Report_Col       = PS07_PrintSetup.Report_Col4    (1)
    let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
    Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

    let #Report_Col       = PS07_PrintSetup.Report_Col5    (1)
    let #CurDedTitleLen   = PS07_PrintSetup.CurDedTitleLen (1)
    let $CurDedTitleMask  = PS07_PrintSetup.CurDedTitleMask(1)
    Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                          Edit :$CurDedTitleMask

    let #Report_Col       = PS07_PrintSetup.Report_Col6    (1)
    let #YTDDedTitleLen   = PS07_PrintSetup.YtdDedTitleLen (1)
    let $YTDDedTitleMask  = PS07_PrintSetup.YtdDedTitleMask(1)
    Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                          Edit :$YTDDedTitleMask

    let $DeductionNm      = PS07_PrintSetup.TaxableTitle   (1)
    let #Report_Col       = PS07_PrintSetup.Report_Col7    (1)
    let #DedDescrLen      = PS07_PrintSetup.DedDescrLen    (1)
    Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

end-procedure ! PS07_Print_Ded_Totals

!***********************************************************************
!                                                                      *
begin-procedure PS07_PrepareMask(#FieldLen,$IncludeDec,:$Mask)
!                                                                      *
!***********************************************************************

!   $DecPos will carry the number of positions required for the decimal

    let $Mask = ''
    let #MaskPos = 0

    if $IncludeDec = 'Y'
        let #DecPos = 3
    else
        let #DecPos = 0
    end-if

    if #FieldLen <= #DecPos

        if #FieldLen = 1

            let $Mask = '9'
        else
            if #FieldLen = 2

                let $Mask = '.9'
            else

                if #FieldLen = 3

                    let $Mask = '.99'
                end-if
            end-if
        end-if
    end-if

    While #MaskPos < (#FieldLen - #DecPos)

        let #MaskPos = #MaskPos + 1
!       if #MaskPos = 1
!           let $Mask = 'B'
!       else
            let $Mask = $Mask || '9'
!       end-if
    End-While

    let $Mask = $Mask || '.99'

end-procedure ! PS07_Print_Ded_Totals


