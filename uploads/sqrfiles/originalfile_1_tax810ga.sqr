!***********************************************************************
!  TAX810GA:  Qtrly Wage List - Tape - GEORGIA                         *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/23:13:15:23                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#Include 'usarpt.sqc' !USA-specific variables

begin-heading 6
  #Include 'stdhdg01.sqc'
  print 'Company'          (3,1,11)
  print $Company           (0,13,3)
  print $CompanyName       (0,17)
  print $RptQtrYr          (3,,)      center

  print ' '                         (+3,1,13)
  print '     QTD     '             (0,+44,13)
  print '     QTD      '            (0,+4)
  print 'QTD'                       (0,+11)
  print 'EmplID'                    (+1,1,11)
  print 'Taxable Gross'             (0,+46,13)
  print 'No Limit Gross'            (0,+4)
  print 'Non Taxable Gross'         (0,+4)
  position (+2)

end-heading

begin-report
  do Init-Report

  do Process-Main
!  close 40

  if $RecordWritten = 'Y'
  
     display ''
     display 'Upon successful conclusion of this program, the following'
     display 'file will have been created:'
     display ''
     display '  WTAX810GA.WGS                                          '
     display ''
     display '            contains 80-character records in the GDOL format'
     display '            required for media submission to the Georgia'
     display '            Department of Labor.'
     display ''
     display 'Follow the instructions from the department for preparing'
     display 'and submitting the electronic file.'
     display ''
  
  else
    let $Type = 'NoData'
    do Print-Summary-Data
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810GA' to $ReportID

  move 'Georgia Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating File for Georgia UI Wage Reporting'

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'GA'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 80 to #RecordLength
  move '000000000000000' to $Zf  !for "write" statements -- zero fill

  if $Prcs_Process_Instance = ''
     ! do Get-Diskette-Format
  else
     do Select-Parameters
     ! do Convert-Parameters
  end-if

  do Open-Company-File
  do Open-Employee-File
! do Open-File-Names

  move &TX.Balance_Qtr to $Qtr

end-procedure

!begin-procedure Open-File-Names
!
!   let $FileNBegin = 'FILENAMS'
!   let $FileNExtension = 'DAT'
!
!
!   #ifdef OS400
!       let $FileExtension = '(D' || $FileNExtension || ')'
!       let $FileNID = $FileNBegin || $FileNExtension
!   #else
!       let $FileNID = $FileNBegin || '.' || $FileNExtension
!   #endif
!
!   let $FileNID = '{IMPORTPREFIX}' || $FileNID
!   open $FileNID as 40 for-writing record=80:fixed
!
!end-procedure


begin-procedure Open-Company-File

  #ifdef MVS
  open '{IMPORTPREFIX}TEMPCOMP{IMPORTSUFFIX}' as 20 for-writing record=86:fixed_nolf
  #else
  open '{IMPORTPREFIX}TEMPCOMP{IMPORTSUFFIX}' as 20 for-writing record=86:fixed
  #endif

end-procedure

begin-procedure Open-Employee-File

  #ifdef MVS
  open '{IMPORTPREFIX}TEMPEMPL{IMPORTSUFFIX}' as 30 for-writing record=80:fixed_nolf
  #else
  open '{IMPORTPREFIX}TEMPEMPL{IMPORTSUFFIX}' as 30 for-writing record=80:fixed
  #endif

end-procedure

begin-procedure Open-File

   move 0 to #RecordCount
 ! if #File-Count <> 0
 !    close 10
 ! end-if
 ! if $PriorCompanyID <> $CompanyID
 !    add 1 to #File-Count
 ! else
 
      move 1 to #File-Count
   
 ! end-if

   move #File-Count to $File-Count  009

   let $Prefix_File_Nm = 'W'
  !move $CompanyID to $FileTBegin 09999999
  
   move 'TAX810GA' to $FileTBegin
   let $FileBegin =  $Prefix_File_Nm || $FileTBegin

   let $CompFileExt = 'WGS'

   #ifdef OS400
       let $FileExtension = '(D' || $CompFileExt || ')'
       let $FileID = $FileBegin || $CompFileExt
   #else
       let $FileID = $FileBegin || '.' || $CompFileExt
   #endif

   let $FileName = $FileID
   let $FileID = '{IMPORTPREFIX}' || $FileID

   #ifdef MVS
   open $FileID as 10 for-writing record=80:fixed_nolf
   #else
   open $FileID as 10 for-writing record=80:fixed
   #endif
   Move $CompanyID to $PriorComapnyID

end-procedure


begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
M.COMPANY
M.FEDERAL_EIN
M.DESCR
M.ADDRESS1
M.CITY
M.STATE
M.POSTAL
L.REMITT_AMT
L.MONTH1_COUNT
L.MONTH2_COUNT
L.MONTH3_COUNT

  move &M.Company       to $Company
  move &M.Descr         to $CompanyName
  move &L.REMITT_AMT    to #RemittAmt
  move &L.MONTH1_COUNT  to #Month1Cnt
  move &L.MONTH2_COUNT  to #Month2Cnt
  move &L.MONTH3_COUNT  to #Month3Cnt

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_RC_TAX811GA L, PS_COMPANY_TBL M
WHERE L.OPRID           = $Prcs_OprID
  AND L.RUN_CNTL_ID     = $Prcs_run_cntl_ID
  AND L.COMPANY         = M.COMPANY
  AND M.EFF_STATUS      = 'A'
  AND M.TAX_REPORT_TYPE = '2'
  AND M.EFFDT =
  (SELECT MAX(N.EFFDT)
     FROM PS_COMPANY_TBL N
     WHERE  N.COMPANY = M.COMPANY
       AND  N.EFFDT  <= $AsOfDate)
ORDER BY M.COMPANY
end-SELECT
  let $Company     = ' '
  let $CompanyName = ' '
  if #Count_F > 0
    let $Type = 'FileTotal'
    do Print-Summary-Data
    do Create-Output
  end-if
end-procedure

begin-procedure Read-Employee-Data

begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
PN.NAME

  move &C.EMPLID    to $EmplID
  move &PN.NAME     to $EmplName
  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TXGRS_QTD to #TxGrs_QTD

  if &C.NlGrs_QTD > 0
    do Process-Employee
  end-if

  if $RC_QTR_UI.Rpt_Totals_Only = 'N'
      let $Type = 'Detl'
      do Print-Summary-Data
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES PN, PS_PERS_NID D1
WHERE C.COMPANY       = &M.Company AND D1.EMPLID = C.EMPLID AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.EMPLID       = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'GA'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND PN.NAME_TYPE = 'PRI'
  AND PN.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = PN.EMPLID
         AND  PX.NAME_TYPE = PN.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
ORDER BY D1.NATIONAL_ID
end-SELECT

end-procedure
begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'   to $SSN
  else
    move &D1.NATIONAL_ID        to $SSN
  end-if
  move $EmplName       to $Name
  uppercase $Name
  do Rotate-Name

 ! Remove Punctuation from Name

  while INSTR($LastName,'.',1)
    let #locnper = INSTR($LastName,'.',1)
    let $LastName = SUBSTR($LastName,1,#locnper - 1)   ||
                    SUBSTR($LastName,#locnper + 1,40)
  end-while

  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999999')

  do Write-Employee-Record

  add #TxGrs_QTD to #Co_TxGrs_QTD
end-procedure

begin-procedure Before-Company

#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'GA'              to $State
#endif
  do Get-Company-Data
  do Get-State-Tax-Data             !Employer ID

  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    stop
  end-if

  !*** remove blanks and dash from employer ID ***
  let $Employer_ID_SUT = &Employer_ID_SUT
  let $Edited_SUT = &Employer_ID_SUT
  let $Edited_SUT = translate($Edited_SUT, ' ' , '')
  let $Edited_SUT = translate($Edited_SUT, '-' , '')
  move $Edited_SUT to $StateEIN 09999999  

  move &SUT_Experience_Rt to #Experience_Rt
  multiply 100 times #Experience_Rt
  move #Experience_Rt to $Rate 999


end-procedure

begin-procedure After-Company

  if #Count_S > 0
    let $Type = 'CoTotal'
    do Print-Summary-Data

    do Write-Header-Record

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Count_S to #Count_F

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD
    move 0 to #Count_S
    new-page
  end-if

end-procedure

begin-procedure Write-Header-Record

  move &M.Federal_EIN  to $FedEIN 099999999
  move &M.Descr        to $ErName
  move &M.Address1     to $ErAddress
  move &M.City         to $ErCity
  let $ErState = rtrim(&M.State, ' ')
  move &M.Postal       to $Zip

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  move #Co_NlGrs_QTD to #TEMP
  multiply 100 times #TEMP
  do Format-Number (#TEMP,  $B_NlGrs,  '09999999999')
  move #Co_TxGrs_QTD to #TEMP
  multiply 100 times #TEMP
  do Format-Number (#TEMP,  $B_TxGrs,  '09999999999')
  let #TEMP = #Co_NlGrs_QTD - #Co_TxGrs_QTD
  multiply 100 times #TEMP
  do Format-Number (#TEMP,  $B_NtGrs,  '09999999999')

  !if #Count_S > #MaxRecordsPerDiskette
  !    do Disk-Overflow
  !else
      move #Count_S to $B_Count 099999
  !end-if

  move #RemittAmt   to #TEMP
  multiply 100 times #TEMP
  do Format-Number (#TEMP,  $B_RemittAmt,  '099999999')
  move #Month1Cnt   to $B_Month1Cnt 09999
  move #Month2Cnt   to $B_Month2Cnt 09999
  move #Month3Cnt   to $B_Month3Cnt 09999

  write 20 from     'N':1
              $StateEIN:8
                   $Qtr:1
               $RptYear:4
           $B_Month1Cnt:5
           $B_Month2Cnt:5
           $B_Month3Cnt:5
               $B_NlGrs:11
               $B_NtGrs:11
               $B_TxGrs:11
           $B_RemittAmt:9
                    $Sp:9
               $B_Count:6

  add 1 to #RecordCount
  move 'Y' to $RecordWritten
  move ' ' to $CompanySplit

end-procedure

begin-procedure Write-Employee-Record

  do Format-Number (#NlGrs_QTD,  $NlGrs_QTD,  '099999999')
  do Write-Record

end-procedure

begin-procedure Write-Record

 write 30 from      'Y':1
              $StateEIN:8
               $RptYear:4
                   $Qtr:1
                   $SSN:9
              $LastName:12
          $FirstInitial:1
         $SecondInitial:1
             $NlGrs_QTD:9
                    $Sp:31
                  '006':3

  add 1 to #RecordCount
  add 1 to #Count_S
end-procedure

begin-procedure Ignore
end-procedure

!begin-procedure Convert-Parameters
!
!
!  move $RC_QTR_UI.Diskette_Type    to $DisketteType
!  move 'D' to $FileType
!  evaluate $DisketteType
!    when = '1'
!      move 18000 to #MaxRecordsPerDiskette
!    when = '2'
!      move 9000 to #MaxRecordsPerDiskette
!    when = '3'
!      move 15000 to #MaxRecordsPerDiskette
!    when = '4'
!      move 4500 to #MaxRecordsPerDiskette
!  end-evaluate
!end-procedure
!
!begin-procedure Get-Diskette-Format
!  display 'Enter number corresponding to diskette type:'
!  display '  1  =  3 1/2 High   Density (1.4 MB)'
!  display '  2  =  3 1/2 Double Density (720 KB)'
!  display '  3  =  5 1/4 High   Density (1.2 MB)'
!  display '  4  =  5 1/4 Double Density (360 KB)'
!  display ''
!  while $DisketteType = ''
!    input $DisketteType 'Enter diskette type (1, 2, 3, 4, or Q to quit)'
!    uppercase $DisketteType
!    if INSTR('1234Q',$DisketteType,1) = 0
!      display ' '
!      display '***** Enter 1, 2, 3, 4, or Q *****'
!      display ' '
!      move '' to $DisketteType
!    else
!      evaluate $DisketteType
!        when = 'Q'
!          stop
!        when = '1'
!          move 18000 to #MaxRecordsPerDiskette
!        when = '2'
!          move 9000 to #MaxRecordsPerDiskette
!        when = '3'
!          move 15000 to #MaxRecordsPerDiskette
!        when = '4'
!          move 4500 to #MaxRecordsPerDiskette
!      end-evaluate
!    end-if
!  end-while
!
!end-procedure

begin-procedure Create-Output

  close 20
  close 30

  #ifdef MVS
  open '{IMPORTPREFIX}TEMPCOMP{IMPORTSUFFIX}' as 20 for-reading record=86:fixed_nolf
  open '{IMPORTPREFIX}TEMPEMPL{IMPORTSUFFIX}' as 30 for-reading record=80:fixed_nolf
  #else
  open '{IMPORTPREFIX}TEMPCOMP{IMPORTSUFFIX}' as 20 for-reading record=86:fixed
  open '{IMPORTPREFIX}TEMPEMPL{IMPORTSUFFIX}' as 30 for-reading record=80:fixed
  #endif

  move '        ' to $EmplCompID
  move ' ' to $PriorCompanyID

  do Open-File

  while 1
    read 20 into $FirstPart:1 $CompanyID:8 $LastPart:71 $RecCount:6
   
    if #End-File
      break
    end-if
   ! 
   ! if $PriorCompanyID <> $CompanyID
   !   do Open-File
   !   do Write-File-Names
   ! end-if
   !
    let #RecCount = $RecCount
    add #RecCount to #TotRecs
   ! 
   ! if #TotRecs >= #MaxRecordsPerDiskette
   !    do Open-File
   !    move 0 to #TotRecs
   !    add #RecCount to #TotRecs
   ! end-if
   !
    do Write-Output-Header-Rec
    
    if $EmplCompID <> '        '
       do Write-Output-Employee-Rec
    end-if
    while 1
      read 30 into $EmplPart1:1 $EmplCompID:8 $EmplPart2:71
      if #end-file
         break
      end-if
      if $EmplCompID = $CompanyID
         do Write-Output-Employee-Rec
      else
         break
      end-if
    end-while
  end-while
end-procedure

!begin-procedure Write-File-Names
!   write 40 from $FileName:12
!                 $sp:68
!end-procedure

begin-procedure Write-Output-Header-Rec

   write 10 from $FirstPart:1
                 $CompanyID:8
                 $LastPart:71

end-procedure

begin-procedure Write-Output-Employee-Rec

  write 10 from $EmplPart1:1
                $EmplCompID:8
                $EmplPart2:71

end-procedure

begin-procedure Print-Summary-Data

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TXGRS_QTD to #TxGrs_QTD
    evaluate $Type
        when = 'Detl'
            print $EmplID          (+1,1,14)
            print $EmplName        (0,+1,40)
            print #TxGrs_QTD       (0,58) edit 99,999,999.99mi
            print #NlGrs_QTD       (0,76) edit 99,999,999.99mi
            let #NonTxGrs_QTD   = #NlGrs_QTD - #TxGrs_QTD
            print #NonTxGrs_QTD    (0,97) edit 99,999,999.99mi
            if #NlGrs_QTD < 0
                print '****'       (0,112)
            end-if

        when = 'CoTotal'
            print 'Company Total'  (+2,1,14)
            print #Co_TxGrs_QTD    (0,58) edit 99,999,999.99mi
            print #Co_NlGrs_QTD    (0,76) edit 99,999,999.99mi
            let #NonTxGrs_QTD   = #Co_NlGrs_QTD - #Co_TxGrs_QTD
            print #NonTxGrs_QTD    (0,97) edit 99,999,999.99mi

            print 'Employer ID'    (+2,1,14)
            print $Employer_ID_SUT (0,21)
            print 'Employee Count' (+2,1)
            print 'Month 1'        (0,24)
            print 'Month 2'        (0,42)
            print 'Month 3'        (0,63)
            print #Month1Cnt       (+1,25) edit 99,999
            print #Month2Cnt       (0,43)  edit 99,999
            print #Month3Cnt       (0,64)  edit 99,999
            print 'Remittance Amount' (+1,1,17)
            print #RemittAmt       (0,19)  edit 9,999,999.99mi

        when = 'FileTotal'
            print 'Total *******'  (+2,1,14)
            print #Tot_TxGrs_QTD    (0,58) edit 99,999,999.99mi
            print #Tot_NlGrs_QTD    (0,76) edit 99,999,999.99mi
            let #NonTxGrs_QTD   = #Tot_NlGrs_QTD - #Tot_TxGrs_QTD
            print #NonTxGrs_QTD    (0,97) edit 99,999,999.99mi

        when = 'NoData'
            move '' to $_LastCompany
            move '' to $_LastCompanyName
            print '******  No Data Selected  ******'  (+2,) center

    end-evaluate

end-procedure

begin-procedure Company-Overflow

  display '  PROGRAM  ABORTING  BECAUSE  OF  COMPANY  OVERFLOW         '
  display ''
  display 'There are more than 9,999 employee wage records for one company'
  display 'The header record in this system is limited to reporting 9,999'
  display 'records.  You may report your quarterly wage data via magnetic'
  display 'tape.'
  display ''
  display '  PROGRAM  ABORTING  BECAUSE  OF  COMPANY  OVERFLOW         '

end-procedure

begin-procedure Disk-Overflow

  display '  PROGRAM  ABORTING  BECAUSE  OF  DISK  OVERFLOW         '
  display ''
  display 'There are too many records to report on one diskette.  GA will not'
  display 'allow multiple diskette files.  You may wish to report your '
  display 'quarterly wage data via magnetic tape.'
  display ''
  display '  PROGRAM  ABORTING  BECAUSE  OF  DISK  OVERFLOW         '

end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rotname2.sqc'  !Rotate-Name procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure

