!*************************************************************************
!  CTX900:  CANADA To Date Tax Summary , PIER and Misc. Edit Report
! Report can be formatted by inputted month and year  or month year-to-date.
! Report contains summary information on employer contributions to date
! and employees contributions to date as well as PIER edits and associated
! edits previously contained in earlier releases of CTX900GN.SQR, CTX900DT.SQR,
! CTX910ER.SQR for items such as SIN validation, Account numbers, QIT numbers,
! negative employee contribution amounts and QPP/CPP/EI contribution edits .
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:27:03                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init
#Include 'canrpt.sqc' !Canada-specific variables
#include 'ctxrnctl.sqc'   ! Get-Tax-Reporting-Run-Controls procedure

begin-report
  do Init-Report
#ifdef PRCSSCHD
  do StdAPI-Term
#endif
end-report

begin-procedure Init-Report

  display ''
  display 'CANADA To Date Tax Summary , PIER and Misc. Edit Report'
  display ''

  date-time () hh:mi:ss &t1
  display &t1
  display ''

 do Init-DateTime
 do Init-Number
 do Get-Calendar-Year-Id

 #ifdef PRCSSCHD
  do StdAPI-Init
#endif

   do Initialization

  do Report-File-Create
  date-time () hh:mi:ss &t2
  display &t2
  display ''

end-procedure

begin-procedure Initialization

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear
  do Get-Can-Tax-Processing-Params

  move &TX.Balance_Year to #NoYear
  move &TX.Balance_Year to $NoYear  9999
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

   if $PRCS_Process_Instance = ''
     do Prompts
   else
        #ifdef PRCSSCHD
            do Select-Canadian-YrEnd-Parameters
            do Convert-Parameters
         #endif
   end-if

 move 'CTX900' to $ReportID

 do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.


  move 'Y' to $JobBegin

  do Array-Create
  do Initialize-Month-Array
  do Initialize-Error-Array
  do Initialize-MTDTotals-Array
  do Initialize-Totals

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from CTX900  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('CTX900', 'TITLE_YTD_TAX_SUM'  , $Ctx900_Title_Ytd_tax_sum  , #dummy_width)
   do Get_Field_Information ('CTX900', 'TITLE_PIER_MISC_ED' , $Ctx900_Title_Pier_misc_ed , #dummy_width)
   do Get_Field_Information ('CTX900', 'JANUARY'            , $Ctx900_January            , #dummy_width)
   do Get_Field_Information ('CTX900', 'FEBRUARY'           , $Ctx900_February           , #dummy_width)
   do Get_Field_Information ('CTX900', 'MARCH'              , $Ctx900_March              , #dummy_width)
   do Get_Field_Information ('CTX900', 'APRIL'              , $Ctx900_April              , #dummy_width)
   do Get_Field_Information ('CTX900', 'MAY'                , $Ctx900_May                , #dummy_width)
   do Get_Field_Information ('CTX900', 'JUNE'               , $Ctx900_June               , #dummy_width)
   do Get_Field_Information ('CTX900', 'JULY'               , $Ctx900_July               , #dummy_width)
   do Get_Field_Information ('CTX900', 'AUGUST'             , $Ctx900_August             , #dummy_width)
   do Get_Field_Information ('CTX900', 'SEPTEMBER'          , $Ctx900_September          , #dummy_width)
   do Get_Field_Information ('CTX900', 'OCTOBER'            , $Ctx900_October            , #dummy_width)
   do Get_Field_Information ('CTX900', 'NOVEMBER'           , $Ctx900_November           , #dummy_width)
   do Get_Field_Information ('CTX900', 'DECEMBER'           , $Ctx900_December           , #dummy_width)
   do Get_Field_Information ('CTX900', 'WARN_QC_ID'         , $Ctx900_Warn_qc_id         , #dummy_width)
   do Get_Field_Information ('CTX900', 'WARN_FILING'        , $Ctx900_Warn_filing        , #dummy_width)
   do Get_Field_Information ('CTX900', 'WARN_INV_ACCT'      , $Ctx900_Warn_inv_acct      , #dummy_width)
   do Get_Field_Information ('CTX900', 'AND_WAGE_PLAN'      , $Ctx900_And_wage_plan      , #dummy_width)
   do Get_Field_Information ('CTX900', 'WARN_DUP_ACCT'      , $Ctx900_Warn_dup_acct      , #dummy_width)
   do Get_Field_Information ('CTX900', 'PLAN_NUMBER'        , $Ctx900_Plan_number        , #dummy_width)
   do Get_Field_Information ('CTX900', 'BEN_PLAN'           , $Ctx900_Ben_plan           , #dummy_width)
   do Get_Field_Information ('CTX900', 'MISSING'            , $Ctx900_Missing            , #dummy_width)
   do Get_Field_Information ('CTX900', 'ERR_DEC_EMPL'       , $Ctx900_Err_dec_empl       , #dummy_width)
   do Get_Field_Information ('CTX900', 'MISSING_SIN'        , $Ctx900_Missing_sin        , #dummy_width)
   do Get_Field_Information ('CTX900', 'INVALID_SIN'        , $Ctx900_Invalid_sin        , #dummy_width)
   do Get_Field_Information ('CTX900', 'INCORRECT_SIN'      , $Ctx900_Incorrect_sin      , #dummy_width)
   do Get_Field_Information ('CTX900', 'COMPANY'            , $Ctx900_Company            , #dummy_width)
   do Get_Field_Information ('CTX900', 'TOTALS'             , $Ctx900_Totals             , #dummy_width)
   do Get_Field_Information ('CTX900', 'YTD_TOTALS_FOR'     , $Ctx900_Ytd_totals_for     , #dummy_width)
   do Get_Field_Information ('CTX900', 'GRAND_TOTALS'       , $Ctx900_Grand_totals       , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_CPP_EARN'       , $Ctx900_Neg_cpp_earn       , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_CPP_GROSS'      , $Ctx900_Neg_cpp_gross      , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_CPP_CONTR'      , $Ctx900_Neg_cpp_contr      , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_EI_EARN'        , $Ctx900_Neg_ei_earn        , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_EI_PREM'        , $Ctx900_Neg_ei_prem        , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_CIT_GROSS'      , $Ctx900_Neg_cit_gross      , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_CIT_DEDUCT'     , $Ctx900_Neg_cit_deduct     , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_PENS_ADJ'       , $Ctx900_Neg_pens_adj       , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_T4A_TAXABLE'    , $Ctx900_Neg_t4a_taxable    , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_T4A_TAX'        , $Ctx900_Neg_t4a_tax        , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_TRUE_T4'        , $Ctx900_Neg_true_t4        , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_QPP_EARN'       , $Ctx900_Neg_qpp_earn       , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_QPP_GROSS'      , $Ctx900_Neg_qpp_gross      , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_QPP_CONTR'      , $Ctx900_Neg_qpp_contr      , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_QIT_TAXABLE'    , $Ctx900_Neg_qit_taxable    , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_QIT_DEDUCT'     , $Ctx900_Neg_qit_deduct     , #dummy_width)
   do Get_Field_Information ('CTX900', 'NEG_TRUE_RV'        , $Ctx900_Neg_true_rv        , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_QPP_EARN'   , $Ctx900_Nonzero_qpp_earn   , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_QPP_GROSS'  , $Ctx900_Nonzero_qpp_gross  , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_QPP_CONTR'  , $Ctx900_Nonzero_qpp_contr  , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_QIT_TAX'    , $Ctx900_Nonzero_qit_tax    , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_QIT_DED'    , $Ctx900_Nonzero_qit_ded    , #dummy_width)
   do Get_Field_Information ('CTX900', 'NONZERO_TRUE_RV'    , $Ctx900_Nonzero_true_rv    , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_CONTR_AMT'      , $Ctx900_cpp_contr_amt      , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_CONTR_AMT'      , $Ctx900_qpp_contr_amt      , #dummy_width)
   do Get_Field_Information ('CTX900', 'GREATER_ZERO'       , $Ctx900_greater_zero       , #dummy_width)
   do Get_Field_Information ('CTX900', 'EXCEEDS'            , $Ctx900_exceeds            , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_YTD_AMT'        , $Ctx900_cpp_ytd_amt        , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_YTD_AMT'        , $Ctx900_qpp_ytd_amt        , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_YTD_OF'         , $Ctx900_cpp_ytd_of         , #dummy_width)
   do Get_Field_Information ('CTX900', 'IS_NOT'             , $Ctx900_is_not             , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_OF_CPP_YTD'    , $Ctx900_perc_of_cpp_ytd    , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_YTD_OF'         , $Ctx900_qpp_ytd_of         , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_OF_QPP_YTD'    , $Ctx900_perc_of_qpp_ytd    , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_MTH_MSG1'       , $Ctx900_cpp_mth_msg1       , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_MTH_MSG2'       , $Ctx900_cpp_mth_msg2       , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_MTH_MSG3'       , $Ctx900_cpp_mth_msg3       , #dummy_width)
   do Get_Field_Information ('CTX900', 'MUST_BE_BLANK'      , $Ctx900_must_be_blank      , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI_PREM_YTD'        , $Ctx900_ei_prem_ytd        , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI_INS_AMT'         , $Ctx900_ei_ins_amt         , #dummy_width)
   do Get_Field_Information ('CTX900', 'EMPL_EI_AMT'        , $Ctx900_empl_ei_amt        , #dummy_width)
   do Get_Field_Information ('CTX900', 'EXCEED_MAX_PREM'    , $Ctx900_exceed_max_prem    , #dummy_width)
   do Get_Field_Information ('CTX900', 'EXCEED_MAX_EARN'    , $Ctx900_exceed_max_earn    , #dummy_width)
   do Get_Field_Information ('CTX900', 'NOT'                , $Ctx900_not                , #dummy_width)
   do Get_Field_Information ('CTX900', 'PREM_BY'            , $Ctx900_prem_by            , #dummy_width)
   do Get_Field_Information ('CTX900', 'ADJUST_EARN'        , $Ctx900_adjust_earn        , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_EI_INS_EARN'   , $Ctx900_perc_ei_ins_earn   , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_EMPL_INCOME'   , $Ctx900_perc_empl_income   , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI_EARN_BLANK'      , $Ctx900_ei_earn_blank      , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI_EXEMP_PREM'      , $Ctx900_ei_exemp_prem      , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI_EXEMP_EARN'      , $Ctx900_ei_exemp_earn      , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_OF_CPP_GROSS'  , $Ctx900_perc_of_cpp_gross  , #dummy_width)
   do Get_Field_Information ('CTX900', 'MINUS_EXEMP'        , $Ctx900_minus_exemp        , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_YTD_AMT_OF'     , $Ctx900_qpp_ytd_amt_of     , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_YTD_AMT_OF'     , $Ctx900_cpp_ytd_amt_of     , #dummy_width)
   do Get_Field_Information ('CTX900', 'PERC_OF_QPP_GROSS'  , $Ctx900_perc_of_qpp_gross  , #dummy_width)
   do Get_Field_Information ('CTX900', 'COMPANY_TOT'        , $Ctx900_company_tot        , #dummy_width)
   do Get_Field_Information ('CTX900', 'WAGE_LOSS_PLAN'     , $Ctx900_wage_loss_plan     , #dummy_width)
   do Get_Field_Information ('CTX900', 'PIER_MISC_EDITS'    , $Ctx900_pier_misc_edits    , #dummy_width)
   do Get_Field_Information ('CTX900', 'ERROR_MSG'          , $Ctx900_error_msg          , #dummy_width)
   do Get_Field_Information ('CTX900', 'YTD_TO'             , $Ctx900_ytd_to             , #dummy_width)
   do Get_Field_Information ('CTX900', 'MONTH_TOTAL'        , $Ctx900_month_total        , #dummy_width)
   do Get_Field_Information ('CTX900', 'YTD_TOTALS_INCL'    , $Ctx900_ytd_totals_incl    , #dummy_width)
   do Get_Field_Information ('CTX900', 'CIT'                , $Ctx900_cit                , #dummy_width)
   do Get_Field_Information ('CTX900', 'T4A_TXBL'           , $Ctx900_t4a_txbl           , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP'                , $Ctx900_cpp                , #dummy_width)
   do Get_Field_Information ('CTX900', 'EI'                 , $Ctx900_ei                 , #dummy_width)
   do Get_Field_Information ('CTX900', 'RELEVE_1'           , $Ctx900_releve_1           , #dummy_width)
   do Get_Field_Information ('CTX900', 'RELEVE_2'           , $Ctx900_releve_2           , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP'                , $Ctx900_qpp                , #dummy_width)
   do Get_Field_Information ('CTX900', 'TRUE_T4'            , $Ctx900_true_t4            , #dummy_width)
   do Get_Field_Information ('CTX900', 'EARNINGS'           , $Ctx900_earnings           , #dummy_width)
   do Get_Field_Information ('CTX900', 'T4A'                , $Ctx900_t4a                , #dummy_width)
   do Get_Field_Information ('CTX900', 'TAX'                , $Ctx900_tax                , #dummy_width)
   do Get_Field_Information ('CTX900', 'TRUE_RV'            , $Ctx900_true_rv            , #dummy_width)
   do Get_Field_Information ('CTX900', 'PREMIUMS'           , $Ctx900_premiums           , #dummy_width)
   do Get_Field_Information ('CTX900', 'EMPL_ID'            , $Ctx900_empl_id            , #dummy_width)
   do Get_Field_Information ('CTX900', 'EMPL_NAME'          , $Ctx900_empl_name          , #dummy_width)
   do Get_Field_Information ('CTX900', 'MONTH'              , $Ctx900_month              , #dummy_width)
   do Get_Field_Information ('CTX900', 'SIN'                , $Ctx900_sin                , #dummy_width)
   do Get_Field_Information ('CTX900', 'QIT'                , $Ctx900_qit                , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_NLG'            , $Ctx900_cpp_nlg            , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_EXCD_ERN_MAX'   , $Ctx900_cpp_excd_ern_max   , #dummy_width)
   do Get_Field_Information ('CTX900', 'NOT_MAX'            , $Ctx900_not_max            , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_LESS_EXEMPT'    , $Ctx900_cpp_less_exempt    , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_NOT_EQ_TXGRS'   , $Ctx900_cpp_not_eq_txgrs   , #dummy_width)
   do Get_Field_Information ('CTX900', 'CPP_TXGRS'          , $Ctx900_cpp_txgrs          , #dummy_width)
   do Get_Field_Information ('CTX900', 'CHK_TAX_BAL'        , $Ctx900_chk_tax_bal        , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_NLG'            , $Ctx900_qpp_nlg            , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_EXCD_ERN_MAX'   , $Ctx900_qpp_excd_ern_max   , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_LESS_EXEMPT'    , $Ctx900_qpp_less_exempt    , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_NOT_EQ_TXGRS'   , $Ctx900_qpp_not_eq_txgrs   , #dummy_width)
   do Get_Field_Information ('CTX900', 'QPP_TXGRS'          , $Ctx900_qpp_txgrs          , #dummy_width)

end-procedure

begin-heading 8

  #Include 'stdhdgtr.sqc'

   print $Ctx900_Title_Ytd_tax_sum     (+3,70)
   print $Ctx900_Title_Pier_misc_ed    (+1,69)

end-heading

begin-procedure Array-Create

   create-array name=MonthInfo size=13
         field=MonthName:char

   create-array name=ErrorLine size=500
         field=Company:char
         field=EmplID:char
         field=EmployeeName:char
         field=Month:char
         field=SIN:number
         field=Wage_Loss_Plan:char
         field=ErrorMsg:char

   create-array name=MtdTotals size=13
         field=Company:char
         field=Month:char
         field=Wage_Loss_Plan:char
         field=CIT_Taxgrs_MTD:number
         field=CIT_Tax_MTD:number
         field=T4A_Txgrs_MTD:number
         field=T4A_Tax_MTD:number
         field=QIT_Txgrs_Mtd:number
         field=QIT_Tax_MTD:number
         field=RV2_Txgrs_MTD:number
         field=RV2_Tax_MTD:number
         field=CPP_Earns_MTD:number
         field=QPP_Earns_MTD:number
         field=CPP_Contrib_MTD:number
         field=QPP_Contrib_MTD:number
         field=UI_EE_Premium_MTD:number
         field=UI_Earns_MTD:number
         field=True_T4_Txgrs_MTD:number
         field=True_RV_Txgrs_MTD:number


end-procedure

begin-procedure Prompts

  let $OneMonth = 'N'
  let $AllMonth = 'N'
  let $YTDOnly  = 'N'

! EDIT INPUT VALUES FOR MONTH AND YEAR OR YEAR TO DATE BASED ON MONTH
  display ''
  display 'Please choose the following:'
  display ''
  display '1 - Single Month Inquiry on one month e.g. July'
  display ' '
  display '2 - Year to Date Inquiry on month UP TO AND INCLUDING'
  display '    the month requested - e.g. July (will include'
  display '    all months up to and including July)'
  display ' '
  display '3 - Year to Date Totals Only Inquiry - this will print YTD Totals'
  display '    but not the Monthly Totals '
  display ''
  display 'Q - Quit inquiry'
  display ''
  display ' NOTE: Options 2 and 3 will take a little longer..'
  display ''

while $NoChoice = ''
 input $NoChoice 'Enter Value : 1 - MTH, 2 - YTD, 3 - YTD Totals only, or Q to quit'

     evaluate $NoChoice
       when = '1'
                let $OneMonth = 'Y'
       when = '2'
                let $AllMonth = 'Y'
       when = '3'
                let $YTDOnly  = 'Y'
       when = 'Q'
       when = 'q'
         stop
  end-evaluate
  end-while


 if $NoChoice <> '3'
! VALIDATE INPUT MONTH
  display ''
  display 'ENTER the # of the month for the inquiry:  eg. 1 - January ' noline
  display ' '
  display 'Valid number is from 1 to 12 .'
  display ''
  while $NoMonth = ''
   input $NoMonth 'Please Enter Number: 1 to 12 (eg. 1 - January) or Q to quit'
     evaluate $NoMonth
       when = '1'
       when = '2'
       when = '3'
       when = '4'
       when = '5'
       when = '6'
       when = '7'
       when = '8'
       when = '9'
       when = '10'
       when = '11'
       when = '12'
       when = 'Q'
       when = 'q'
         break

       when-other
         display ' '
         display '  ****  Enter 1,2,3,4,5,6,7,8,9,10,11,12 or Q  **** '
         display ' '
         move '' to $NoMonth
    end-evaluate
  end-while
 end-if

  evaluate $NoMonth
     when = 'Q'
     when = 'q'
        stop

     when-other
        move $NoMonth to #NoMonth
        move #NoMonth to $NoMonth 09
  end-evaluate

end-procedure

begin-procedure Initialize-Month-Array

  put $Ctx900_January    into MonthInfo(1) MonthName
  put $Ctx900_February   into MonthInfo(2) MonthName
  put $Ctx900_March      into MonthInfo(3) MonthName
  put $Ctx900_April      into MonthInfo(4) MonthName
  put $Ctx900_May        into MonthInfo(5) MonthName
  put $Ctx900_June       into MonthInfo(6) MonthName
  put $Ctx900_July       into MonthInfo(7) MonthName
  put $Ctx900_August     into MonthInfo(8) MonthName
  put $Ctx900_September  into MonthInfo(9) MonthName
  put $Ctx900_October    into MonthInfo(10) MonthName
  put $Ctx900_November   into MonthInfo(11) MonthName
  put $Ctx900_December   into MonthInfo(12) MonthName

end-procedure

begin-procedure Initialize-Error-Array


    move 0           to #i
    move 500         to #max_errors
    move 0           to #init_value
    move ''          to $init_text

    while #i  <  #max_errors
         put $init_text into ErrorLine(#i)  EmployeeName
         put $init_text into ErrorLine(#i)  ErrorMsg
         put $init_text into ErrorLine(#i)  Month
         put $init_text into ErrorLine(#i)  EmplID
         put #init_value into ErrorLine(#i) SIN
         add 1 to #i
     end-while

end-procedure


begin-procedure Initialize-MTDTotals-Array

    move 0          to #k
    move 13         to #max_MTDTotals_Row
    move 0          to #init_value
    move ''         to $init_text

    while #k   <  #max_MTDTotals_Row
         put $init_text   into MtdTotals(#k)  Company
         put $init_text   into MtdTotals(#K)  Month
         put $init_text   into MtdTotals(#k)  Wage_Loss_Plan
         put #init_value  into MtdTotals(#k)  CIT_Taxgrs_MTD
         put #init_value  into MtdTotals(#k)  CIT_Tax_MTD
         put #init_value  into MtdTotals(#k)  T4A_Txgrs_MTD
         put #init_value  into MtdTotals(#k)  T4A_Tax_MTD
         put #init_value  into MtdTotals(#k)  QIT_Txgrs_Mtd
         put #init_value  into MtdTotals(#k)  QIT_Tax_MTD
         put #init_value  into MtdTotals(#k)  RV2_Txgrs_MTD
         put #init_value  into MtdTotals(#k)  RV2_Tax_MTD
         put #init_value  into MtdTotals(#k)  CPP_Earns_MTD
         put #init_value  into MtdTotals(#k)  QPP_Earns_MTD
         put #init_value  into MtdTotals(#K)  CPP_Contrib_MTD
         put #init_value  into MtdTotals(#k)  QPP_Contrib_MTD
         put #init_value  into MtdTotals(#k)  UI_EE_Premium_MTD
         put #init_value  into MtdTotals(#k)  UI_Earns_MTD
         put #init_value  into MtdTotals(#k)  True_T4_Txgrs_MTD
         put #init_value  into MtdTotals(#k)  True_RV_Txgrs_MTD


         add 1 to #k
     end-while

end-procedure

begin-procedure Initialize-Totals

move 0.00       to   #cit-taxgrs-ytd
move 0.00       to   #cit-taxgrs-mtd

move 0.00       to   #cit-tax-ytd
move 0.00       to   #cit-tax-mtd

move 0.00       to   #t4a-txgrs-ytd
move 0.00       to   #t4a-txgrs-mtd

move 0.00       to   #t4a-tax-ytd
move 0.00       to   #t4a-tax-mtd

move 0.00       to   #qit-txgrs-ytd
move 0.00       to   #qit-txgrs-mtd

move 0.00       to   #qit-tax-ytd
move 0.00       to   #qit-tax-mtd

move 0.00       to   #rv2-txgrs-ytd
move 0.00       to   #rv2-txgrs-mtd

move 0.00       to   #rv2-tax-ytd
move 0.00       to   #rv2-tax-mtd

move 0.00       to   #cpp-earns-ytd
move 0.00       to   #cpp-earns-mtd

move 0.00       to   #qpp-earns-ytd
move 0.00       to   #qpp-earns-mtd

move 0.00       to   #cpp-contrib-ytd
move 0.00       to   #cpp-contrib-mtd

move 0.00       to   #qpp-contrib-ytd
move 0.00       to   #qpp-contrib-mtd

move 0.00       to   #ui-ee-premium-mtd
move 0.00       to   #ui-ee-premium-ytd

move 0.00       to   #ui-earns-ytd
move 0.00       to   #ui-earns-mtd

move 0.00       to   #true-t4-txgrs-ytd
move 0.00       to   #true-t4-txgrs-mtd

move 0.00       to   #true-RV-txgrs-ytd
move 0.00       to   #true-RV-txgrs-mtd

move  0         to   #no_errs

move  0         to   #NoMtdPrinted

end-procedure

begin-procedure Initialize-Err-Rpt-Fields

move 0    to  #ErrYr
move 0    to  #SIN

move ''   to  $EName
move ''   to  $Err_ErrorMsg
move ''   to  $EMonth
move ''   to  $Emplid
move ''   to  $priorEmplid

end-procedure

begin-procedure Reset-MTD-Totals

move 0.00   to   #cit-taxgrs-mtd-accum

move 0.00   to   #cit-tax-mtd-accum

move 0.00   to   #t4a-txgrs-mtd-accum

move 0.00   to   #t4a-tax-mtd-accum

move 0.00   to   #qit-txgrs-mtd-accum

move 0.00   to   #qit-tax-mtd-accum

move 0.00   to   #rv2-txgrs-mtd-accum

move 0.00   to   #rv2-tax-mtd-accum

move 0.00   to   #cpp-earns-mtd-accum

move 0.00   to   #cpp-contrib-mtd-accum

move 0.00   to   #qpp-earns-mtd-accum

move 0.00   to   #qpp-contrib-mtd-accum

move 0.00   to   #ui-ee-premium-mtd-accum

move 0.00   to   #ui-earns-mtd-accum

move 0.00   to   #true-t4-txgrs-mtd-accum

move 0.00   to   #true-rv-txgrs-mtd-accum

end-procedure


begin-procedure Report-File-Create

move ''       to    $Month
move ''       to    $Comp
move ''       to    $Wage_LP
move 0        to    #MthCd
move 0        to    #Month
move ''       to    $Eqsign
move 'N'      to    $MiscEditError
move ''       to    $RecFound
move ''       to    $Var

if ($OneMonth = 'Y') and ($AllMonth = 'Y')
        display 'Error in inquiry selection'
        stop
end-if

if $OneMonth = 'Y'
         let $Eqsign = '='           ! set up select parameter
end-if

if $AllMonth = 'Y'
        let $Eqsign = '<='           ! set up select parameter
end-if

if $YTDOnly = 'Y'
        let $Eqsign = '<='           ! set up select parameter
        let #NoMonth = 12            ! do for whole year
end-if

move 'AND CB1.BALANCE_PERIOD ' to $Var
concat $EQSIGN with $Var
concat ' ' with $Var
concat #NoMonth with $Var
concat ')' with $Var


begin-SELECT
CB.COMPANY
CB.EMPLID
CB.PROVINCE
CB.WAGE_LOSS_PLAN
CB.BALANCE_PERIOD
CB.TAX_CLASS_CAN
CB.NLGRS_YTD
CB.NLGRS_MTD
CB.TXGRS_YTD
CB.TXGRS_MTD
CB.TAX_YTD
CB.TAX_MTD


   move &CB.BALANCE_PERIOD   to #AsOfMthCd

   if $JobBegin = 'Y'

       move 'Y'                               to    $RecFound
       move 'N'                               to    $JobBegin
       move &CB.Company                       to    $Comp
       move &CB.Company                       to    $Company
       move &CB.Wage_Loss_Plan                to    $Wage_LP
       do Save-Employee-Info
       do Print-Rpt-Heading
       do Print-Rpt-Heading-Totals
       do Process-Company-Edits


   else

       if &CB.Company <> $Comp

           do Main-Edits
           let $ChangeComp = 'Y'
           do Process-MTD-All-Mth
           do Process-MTD-Totals
           do Process-YTD-Totals
           do Process-Company-YTD-Totals
           do Initialize-Company-YTD-Totals
           move &CB.Company to $Company
           move &CB.Company to $Comp
           do Process-New-Page
           move &CB.Wage_Loss_Plan to $Wage_LP

           do Initialize-Err-Rpt-Fields
           do Process-Company-Edits


       else
           if  &CB.Wage_Loss_Plan <> $Wage_LP

             do Main-Edits
             let $ChangeWLP = 'Y'
             do Process-MTD-All-Mth
             do Process-MTD-Totals
             do Process-YTD-Totals
             do Process-New-Page
             move &CB.Wage_Loss_Plan to $Wage_LP

           end-if

       end-if


      do Process-Employee
   end-if

   do Add-To-Totals

   do Process-MTD-Single-Mth

   let $Empl-data-found = 'Y'
   let $TaxClass  = rtrim(&CB.TAX_CLASS_CAN, ' ')
   let $NLGRS_YTD = &CB.NLGRS_YTD
   let $TXGRS_YTD = &CB.TXGRS_YTD
   let $TAX_YTD   = &CB.TAX_YTD
   let #MthCd     = &CB.BALANCE_PERIOD

FROM  PS_CAN_TAX_BALANCE  CB
WHERE BALANCE_YEAR = #NoYear
AND BALANCE_ID = $Calendar_Year_Id
AND   BALANCE_PERIOD =
 (SELECT MAX(CB1.BALANCE_PERIOD)
  FROM  PS_CAN_TAX_BALANCE CB1
  WHERE CB1.EMPLID         = CB.EMPLID
    AND CB1.COMPANY        = CB.COMPANY
    AND CB1.BALANCE_YEAR  = CB.BALANCE_YEAR
    AND CB1.BALANCE_ID  = CB.BALANCE_ID
    AND CB1.WAGE_LOSS_PLAN = CB.WAGE_LOSS_PLAN
    AND CB1.TAX_CLASS_CAN  = CB.TAX_CLASS_CAN
    AND CB1.PROVINCE       = CB.PROVINCE
#ifdef MVS
    \$Var\
#else
    [$Var]
#endif

ORDER BY CB.COMPANY ASC, CB.WAGE_LOSS_PLAN  ASC, CB.BALANCE_PERIOD ASC,
CB.EMPLID ASC, CB.PROVINCE ASC, CB.TAX_CLASS_CAN ASC
end-SELECT

if $RecFound <> 'Y'   ! no records found on a select but we need headings
        do Print-Rpt-Heading
        do Print-Rpt-Heading-Totals
end-if

if $Empl-data-found = 'Y'
  do Main-Edits
end-if
do Process-MTD-All-Mth
do Process-MTD-Totals
do Process-YTD-Totals
do Process-Company-YTD-Totals
do Process-Grand-YTD-Totals


display ''
display 'Processing Complete.'

end-procedure



begin-procedure Process-MTD-Single-Mth

  if $OneMonth = 'Y'
    do Add-To-Mtd-Totals
  end-if

end-procedure


begin-procedure Process-MTD-All-Mth

  if $AllMonth = 'Y'
    let #processMth = 1

    while #processMth <= #NoMonth

      let #AsOfMthCd = #processMth
      do Get-Tax-Info-Mtd
      do Update-MTDTotals-Array
      add 1 to #processMth

    end-while

  end-if

end-procedure



begin-procedure Get-Tax-Info-Mtd

  do format-Number(#AsOfMthCd, $MnthCd, '00')

BEGIN-SELECT
CB2.COMPANY
CB2.WAGE_LOSS_PLAN
CB2.BALANCE_PERIOD
CB2.TAX_CLASS_CAN
SUM(CB2.TXGRS_MTD)    &CB2.TXGRS_MTD
SUM(CB2.TAX_MTD)      &CB2.TAX_MTD


    let $TaxClass = RTRIM(&CB2.TAX_CLASS_CAN, ' ')

    evaluate $TaxClass

      when = 'CIT'
        move &CB2.TXGRS_MTD        to      #cit-taxgrs-mtd
        move &CB2.TAX_MTD          to      #cit-tax-mtd
        break
      when = 'T4A'
        move &CB2.TXGRS_MTD        to      #t4a-txgrs-mtd
        move &CB2.TAX_MTD          to      #t4a-tax-mtd
        break
      when = 'QIT'
        move &CB2.TXGRS_MTD        to      #qit-txgrs-mtd
        move &CB2.TAX_MTD          to      #qit-tax-mtd
        break
      when = 'RV2'
        move &CB2.TXGRS_MTD        to      #rv2-txgrs-mtd
        move &CB2.TAX_MTD          to      #rv2-tax-mtd
        break
      when = 'CPP'
        move &CB2.TXGRS_MTD        to      #cpp-earns-mtd
        move &CB2.TAX_MTD          to      #cpp-contrib-mtd
        break
      when = 'QPP'
        move &CB2.TXGRS_MTD        to      #qpp-earns-mtd
        move &CB2.TAX_MTD          to      #qpp-contrib-mtd
        break
      when = 'EIE'
        move &CB2.TXGRS_MTD        to      #ui-earns-mtd
        move &CB2.TAX_MTD          to      #ui-ee-premium-mtd
        break
      when = 'TT4'
        move &CB2.TXGRS_MTD        to      #true-t4-txgrs-mtd
        break
      when = 'TRV'
        move &CB2.TXGRS_MTD        to      #true-rv-txgrs-mtd
        break
      when-other
        break
    end-evaluate

FROM  PS_CAN_TAX_BALANCE  CB2
WHERE CB2.BALANCE_YEAR   = #NoYear
AND   CB2.BALANCE_ID     = $Calendar_Year_Id
AND   CB2.COMPANY        = $Comp
AND   CB2.WAGE_LOSS_PLAN = $Wage_LP
AND   CB2.BALANCE_PERIOD = #AsOfMthCd
GROUP BY CB2.COMPANY, CB2.WAGE_LOSS_PLAN, CB2.BALANCE_PERIOD,
         CB2.TAX_CLASS_CAN
ORDER BY CB2.COMPANY ASC, CB2.WAGE_LOSS_PLAN ASC, CB2.BALANCE_PERIOD ASC,
         CB2.TAX_CLASS_CAN ASC


END-SELECT

end-procedure


begin-procedure Reset-Mtd-Values

  move 0 to #cit-taxgrs-mtd
  move 0 to #cit-tax-mtd
  move 0 to #t4a-txgrs-mtd
  move 0 to #t4a-tax-mtd
  move 0 to #qit-txgrs-mtd
  move 0 to #qit-tax-mtd
  move 0 to #rv2-txgrs-mtd
  move 0 to #rv2-tax-mtd
  move 0 to #cpp-earns-mtd
  move 0 to #cpp-contrib-mtd
  move 0 to #qpp-earns-mtd
  move 0 to #qpp-contrib-mtd
  move 0 to #ui-earns-mtd
  move 0 to #ui-ee-premium-mtd
  move 0 to #true-t4-txgrs-mtd
  move 0 to #true-rv-txgrs-mtd

end-procedure


begin-procedure Process-Company-Edits

move '' to $PriorErrEmplID

do Process-SIN-Dec-Empl-Edits-by-Company

begin-select
PQ.QUEBEC_ID_NO
PQ.RELEVE_SERIAL_BEG

  let $PQ_Reporting = 'Y'
  let $Releve-Serial = RTRIM (&PQ.Quebec_Id_No, ' ')
  if $Releve-Serial = ''
                 let $MiscEditError = 'Y'
        let $ErrorMsg = $Ctx900_Warn_qc_id
        do Add-To-Errors
  else
    if  &PQ.Releve_Serial_Beg = 0
   let $MiscEditError='Y'
   let $ErrorMsg = $Ctx900_Warn_filing
         do Add-To-Errors
    end-if
  end-if


FROM PS_PQ_REPTNG_TBL PQ
WHERE PQ.COMPANY = &CB.COMPANY
  AND PQ.EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_PQ_REPTNG_TBL
                 WHERE COMPANY = &CB.COMPANY)
end-select

begin-select
WP.COMPANY
WP.WAGE_LOSS_PLAN
WP.EFF_TAX_YR
WP.CANADA_BN                                               !NPAXXX

  let $Canada-BN = RTRIM(&WP.Canada_BN, ' ')                !NPAXXX

  if $Canada-BN = ''                                       !NPAXXX

    let $RCTErrComp = &WP.Company
    let $RCTErrWLP    = &WP.Wage_Loss_Plan

    let $MiscEditError = 'Y'
    let $ErrorMsg =  $Ctx900_Warn_inv_acct
        ||$RCTERRCOMP||$Ctx900_And_wage_plan ||$RCTErrWLP||''
    do Add-To-Errors
  end-if                                                   !NPAXXX

  if instr($Prev-Numbers,$Canada-BN,1) <> 0
    let $MiscEditError = 'Y'
    let $ErrorMsg = $Ctx900_Warn_dup_acct
    do Add-To-Errors
  else
    STRING $Prev-Numbers $Canada-BN by '-' INTO $All-Numbers
    let $Prev-numbers = $All-Numbers
  end-if                                                   !NPAXXX

FROM PS_WAGELS_PLAN_TBL WP
 WHERE WP.COMPANY = &CB.COMPANY
   AND WP.EFFDT = (SELECT MAX(WP1.EFFDT)
                      FROM PS_WAGELS_PLAN_TBL WP1
                      WHERE  WP1.WAGE_LOSS_PLAN = WP.WAGE_LOSS_PLAN
                        AND  WP1.COMPANY        = WP.COMPANY)

end-select

begin-select
RD.DEDCD
RD.PLAN_TYPE
RP.PLAN_REG_NO
RB.BENEFIT_PLAN

  let $PlanRegNo = RTRIM(&RP.Plan_Reg_No, ' ')

 if $PlanRegNo = ''
      let $RD.Plan_Type = &RD.Plan_Type
      let $RD.DEDCD = &RD.DEDCD
      let $MiscEditError = 'Y'
      let $ErrorMsg = $Ctx900_Plan_number
       ||$RD.PLAN_TYPE|| $Ctx900_Ben_plan ||$RD.DEDCD||$Ctx900_Missing
     do Add-To-Errors
 end-if


FROM PS_TAXFORM_DED RD, PS_BENEF_PLAN_TBL RB, PS_PENSION_PLN_TBL RP
 WHERE (RD.TAXFORM_ID = 'T' AND RD.BOX = '50'
        OR RD.TAXFORM_ID = 'A' AND RD.BOX = '36')
   AND RD.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_TAXFORM_DED
                   WHERE TAXFORM_ID = RD.TAXFORM_ID)
   AND RB.PLAN_TYPE = RD.PLAN_TYPE
   AND RB.DEDCD = RD.DEDCD
   AND RB.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_BENEF_PLAN_TBL
                   WHERE PLAN_TYPE = RB.PLAN_TYPE
                     AND DEDCD = RB.DEDCD)
   AND RP.PLAN_TYPE = RB.PLAN_TYPE
   AND RP.BENEFIT_PLAN = RB.BENEFIT_PLAN
   AND RP.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_PENSION_PLN_TBL
                   WHERE PLAN_TYPE = RP.PLAN_TYPE
                     AND BENEFIT_PLAN = RP.BENEFIT_PLAN)
end-select

let $MiscEditError = 'N'

end-procedure

begin-procedure Process-SIN-Dec-Empl-Edits-by-Company

begin-SELECT
PD.BIRTHDATE
PD1.NATIONAL_ID
PN.NAME
PD.EMPLID
PD.DT_OF_DEATH

  let $NationalID = RTRIM(&PD1.NATIONAL_ID, ' ')
  move $NATIONALID to $TempSIN                     ! for possible error reporting..
  move &PN.Name to $TempName
  move &PD.EmplId to $TempEmplId

  let $Dt_of_Death  = ''
  let $SINDecInd  = ''

  if  &PD.Dt_of_Death <> ''
        move 'Y' to $SINDecInd
        let $Dt_of_Death = &PD.Dt_of_Death
        let $ErrorMsg =  $Ctx900_Err_dec_empl
        do Check-for-Dup-Errors
  end-if

  let #tempSIN = TO_NUMBER($NATIONALID)                    !Verify SIN is numeric
  let $SIN = EDIT(TO_CHAR(#tempSIN),'099999999')
  if #tempSIN = 0
         move 'Y' to $SINDecInd
        let $ErrorMsg = $Ctx900_Missing_sin
        do Check-for-Dup-Errors

  end-if

  if $SIN <> $NationalID
         move 'Y' to $SINDecInd
        let $ErrorMsg = $Ctx900_Invalid_sin
        do Check-for-Dup-Errors
 end-if
         !Check for invalid #'s

  do Validate-Sin

 if $Invalid_Sin = 'Y'
                move 'Y' to $SINDecInd
                let $ErrorMsg =  $Ctx900_Incorrect_sin
                do Check-for-Dup-Errors
 end-if

FROM  PS_PERSON PD, PS_PERSON_NAME PN, PS_CAN_TAX_BALANCE TB, PS_PERS_NID PD1
WHERE PD.EMPLID = TB.EMPLID
AND PN.EMPLID = PD.EMPLID
AND PD1.EMPLID = PD.EMPLID
AND PD1.COUNTRY = {NID_Country}
AND PD1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
AND TB.BALANCE_YEAR = #NoYear
AND TB.BALANCE_ID   = $Calendar_Year_Id
AND TB.COMPANY = $Comp
ORDER BY  PD1.NATIONAL_ID ASC
end-SELECT

  !^^^^^^
  ! process employees who have tax balance info PER
  ! company - so that this error info is not displayed over and over by month..



end-procedure

begin-procedure Check-for-Dup-Errors


if &PD.Emplid <> $PriorErrEmplId

  do Add-to-Errors
  move &PD.Emplid to $PriorErrEmplID
end-if

end-procedure


begin-procedure Process-MTD-Totals

if $OneMonth = 'Y'
  do Print-MTD-Totals
  do Reset-MTD-Totals
else
  if $AllMonth = 'Y'
    do Get-MTDTotals
    do Initialize-MTDTotals-Array
    do Reset-MTD-Totals
  end-if
end-if

end-procedure


begin-procedure Get-MTDTotals

  move 0 to #i

  while #i < #max_MTDTotals_Row

    get  $iMonth
         $iWage_Loss_Plan
         #iCIT_Taxgrs_MTD
         #iCIT_Tax_MTD
         #iT4A_Txgrs_MTD
         #iT4A_Tax_MTD
         #iQIT_Txgrs_MTD
         #iQIT_Tax_MTD
         #iRV2_Txgrs_MTD
         #iRV2_Tax_MTD
         #iCPP_Earns_MTD
         #iQPP_Earns_MTD
         #iCPP_Contrib_MTD
         #iQPP_Contrib_MTD
         #iUI_EE_Premium_MTD
         #iUI_Earns_MTD
         #iTrue_T4_Txgrs_MTD
         #iTrue_RV_Txgrs_MTD
    from MtdTotals(#i)
         Month
         Wage_Loss_Plan
         CIT_Taxgrs_MTD
         CIT_Tax_MTD
         T4A_Txgrs_MTD
         T4A_Tax_MTD
         QIT_Txgrs_MTD
         QIT_Tax_MTD
         RV2_Txgrs_MTD
         RV2_Tax_MTD
         CPP_Earns_MTD
         QPP_Earns_MTD
         CPP_Contrib_MTD
         QPP_Contrib_MTD
         UI_EE_Premium_MTD
         UI_Earns_MTD
         True_T4_Txgrs_MTD
         True_RV_Txgrs_MTD

    if rtrim($iMonth,' ')= ''
      break                       !exit the while
    else

      let #MtdTotals-Mth = LTRIM($iMonth, '0')

      move $iWage_Loss_Plan     to $AllMonth-Wage-LP
      move #iCIT_Taxgrs_MTD     to #cit-taxgrs-mtd-accum
      move #iCIT_Tax_MTD        to #cit-tax-mtd-accum
      move #iT4A_Txgrs_MTD      to #t4a-txgrs-mtd-accum
      move #iT4A_Tax_MTD        to #t4a-tax-mtd-accum
      move #iQIT_Txgrs_MTD      to #qit-txgrs-mtd-accum
      move #iQIT_Tax_MTD        to #qit-tax-mtd-accum
      move #iRV2_Txgrs_MTD      to #rv2-txgrs-mtd-accum
      move #iRV2_Tax_MTD        to #rv2-tax-mtd-accum
      move #iCPP_Earns_MTD      to #cpp-earns-mtd-accum
      move #iQPP_Earns_MTD      to #qpp-earns-mtd-accum
      move #iCPP_Contrib_MTD    to #cpp-contrib-mtd-accum
      move #iQPP_Contrib_MTD    to #qpp-contrib-mtd-accum
      move #iUI_EE_Premium_MTD  to #ui-ee-premium-mtd-accum
      move #iUI_Earns_MTD       to #ui-earns-mtd-accum
      move #iTrue_T4_Txgrs_MTD  to #true-t4-txgrs-mtd-accum
      move #iTrue_RV_Txgrs_MTD  to #true-rv-txgrs-mtd-accum


      let $Get-MTDTotals  = 'Y'

      do Print-MTD-Totals

      let $Get-MTDTotals  = 'N'

    end-if

    add 1 to #i
  end-while

end-procedure


begin-procedure Update-MTDTotals-Array

  move 0 to #i

  while #i <= #max_MTDTotals_Row

    get $iCompany $iMonth $iWage_Loss_Plan from MtdTotals(#i) Company Month Wage_Loss_Plan
    if rtrim($iCompany,' ') = ''         !if array entry is null
      put $Comp $MnthCd $Wage_LP  into MtdTotals(#i) Company Month Wage_Loss_Plan
      do Accumulate-MTDTotals
      break                              !exit the while
    else
      if $Comp          = $iCompany and  !if array entry match
         $MnthCd        = $iMonth   and
         $Wage_LP       = $iWage_Loss_Plan
         do Accumulate-MTDTotals
         break                           !exit the while
      end-if
    end-if

    add 1 to #i
  end-while

end-procedure


begin-procedure Accumulate-MTDTotals

   array-add #cit-taxgrs-mtd    to MtdTotals(#i)  CIT_Taxgrs_MTD
   array-add #cit-tax-mtd       to MtdTotals(#i)  CIT_Tax_MTD
   array-add #t4a-txgrs-mtd     to MtdTotals(#i)  T4A_Txgrs_MTD
   array-add #t4a-tax-mtd       to MtdTotals(#i)  T4A_Tax_MTD
   array-add #qit-txgrs-mtd     to MtdTotals(#i)  QIT_Txgrs_Mtd
   array-add #qit-tax-mtd       to MtdTotals(#i)  QIT_Tax_MTD
   array-add #rv2-txgrs-mtd     to MtdTotals(#i)  RV2_Txgrs_MTD
   array-add #rv2-tax-mtd       to MtdTotals(#i)  RV2_Tax_MTD
   array-add #cpp-earns-mtd     to MtdTotals(#i)  CPP_Earns_MTD
   array-add #qpp-earns-mtd     to MtdTotals(#i)  QPP_Earns_MTD
   array-add #cpp-contrib-mtd   to MtdTotals(#i)  CPP_Contrib_MTD
   array-add #qpp-contrib-mtd   to MtdTotals(#i)  QPP_Contrib_MTD
   array-add #ui-ee-premium-mtd to MtdTotals(#i)  UI_EE_Premium_MTD
   array-add #ui-earns-mtd      to MtdTotals(#i)  UI_Earns_MTD
   array-add #true-t4-txgrs-mtd to MtdTotals(#i)  True_T4_Txgrs_MTD
   array-add #true-rv-txgrs-mtd to MtdTotals(#i)  True_RV_Txgrs_MTD

   do Reset-Mtd-Values

end-procedure


begin-procedure Process-YTD-Totals

if $AllMonth = 'Y' or $YTDOnly = 'Y'
  do Print-YTD-Totals
end-if

if #no_errs <> 0
    do Print-Errors
end-if

if $YTDOnly = 'Y'
  do Add-To-Company-Totals
  do Add-to-Grand-YTD-Totals
end-if

do Initialize-Totals

end-procedure


begin-procedure Add-To-Totals

  let $TaxClass = RTRIM(&CB.TAX_CLASS_CAN, ' ')

  evaluate $TaxClass

  when = 'CIT'
    add &CB.TXGRS_YTD        to      #cit-taxgrs-ytd
    add &CB.TAX_YTD          to      #cit-tax-ytd
  when = 'T4A'
    add &CB.TXGRS_YTD        to      #t4a-txgrs-ytd
    add &CB.TAX_YTD          to      #t4a-tax-ytd
  when = 'QIT'
    add &CB.TXGRS_YTD        to      #qit-txgrs-ytd
    add &CB.TAX_YTD          to      #qit-tax-ytd
  when = 'RV2'
    add &CB.TXGRS_YTD        to      #rv2-txgrs-ytd
    add &CB.TAX_YTD          to      #rv2-tax-ytd
  when = 'CPP'
    add &CB.TXGRS_YTD        to      #cpp-earns-ytd
    add &CB.TAX_YTD          to      #cpp-contrib-ytd
  when = 'QPP'
    add &CB.TXGRS_YTD        to      #qpp-earns-ytd
    add &CB.TAX_YTD          to      #qpp-contrib-ytd
  when = 'EIE'
    add &CB.TXGRS_YTD        to      #ui-earns-ytd
    add &CB.TAX_YTD          to      #ui-ee-premium-ytd
  when = 'TT4'
    add &CB.TXGRS_YTD        to      #true-t4-txgrs-ytd
  when = 'TRV'
    add &CB.TXGRS_YTD        to      #true-rv-txgrs-ytd
  when-other
    break
  end-evaluate

end-procedure


begin-procedure Process-Employee

  if rtrim(&CB.Emplid, ' ') <> $EE_Emplid
    or ((rtrim(&CB.Emplid, ' ') = $EE_Emplid) and (rtrim(&CB.Province, ' ') <> $EE_Province))
    or ((rtrim(&CB.Emplid, ' ') = $EE_Emplid) and (rtrim(&CB.Wage_Loss_Plan, ' ') <> $EE_Wage_LP))
    or ((rtrim(&CB.Emplid, ' ') = $EE_Emplid) and (rtrim(&CB.Company, ' ') <> $EE_Company))

      do Save-Empl-YTD-Data

      if $ChangeWLP <> 'Y' and $ChangeComp <> 'Y'
        do Main-Edits
      end-if

      do Reset-Employee-Save-Data
      do Save-Employee-Info
  else
      do Save-Empl-YTD-Data
  end-if

  let $ChangeWLP  = ' '
  let $ChangeComp = ' '

end-procedure


begin-procedure Save-Employee-Info

  let $EE_Company  =  rtrim(&CB.Company, ' ')
  let $EE_Wage_LP  =  rtrim(&CB.Wage_Loss_Plan, ' ')
  let $EE_Province =  rtrim(&CB.Province, ' ')
  let $EE_Emplid   =  rtrim(&CB.Emplid, ' ')

end-procedure


begin-procedure Save-Empl-YTD-Data

  evaluate $TaxClass
    when = 'CIT'
      let #CB.CIT_Txgrs_YTD     =       $TXGRS_YTD
      let #CB.CIT_Tax_YTD       =       $TAX_YTD
    when = 'T4A'
      let #CB.T4A_Txgrs_YTD     =       $TXGRS_YTD
      let #CB.T4A_Tax_YTD       =       $TAX_YTD
    when = 'QIT'
      let #CB.QIT_Txgrs_YTD     =       $TXGRS_YTD
      let #CB.QIT_Tax_YTD       =       $TAX_YTD
    when = 'RV2'
      let #CB.RV2_Txgrs_YTD     =       $TXGRS_YTD
      let #CB.RV2_Tax_YTD       =       $TAX_YTD
    when = 'CPP'
      let #CB.CPP_Nlgrs_YTD     =       $NLGRS_YTD
      let #CB.CPP_Earns_YTD     =       $TXGRS_YTD
      let #CB.CPP_Contrib_YTD   =       $TAX_YTD
    when = 'QPP'
      let #CB.QPP_Nlgrs_YTD     =       $NLGRS_YTD
      let #CB.QPP_Earns_YTD     =       $TXGRS_YTD
      let #CB.QPP_Contrib_YTD   =       $TAX_YTD
    when = 'EIE'
      let #CB.UI_Earns_YTD      =       $TXGRS_YTD
      let #CB.UI_EE_Premium_YTD =       $TAX_YTD
    when = 'TT4'
      let #CB.True_T4_Txgrs_YTD =       $TXGRS_YTD
    when = 'TRV'
      let #CB.True_RV_Txgrs_YTD =       $TXGRS_YTD
    when = 'CPA'
      let #CB.Pension_Adj_YTD   =       $TAX_YTD
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Reset-Employee-Save-Data

  move 0 to #CB.CIT_Txgrs_YTD
  move 0 to #CB.CIT_Tax_YTD
  move 0 to #CB.T4A_Txgrs_YTD
  move 0 to #CB.T4A_Tax_YTD
  move 0 to #CB.QIT_Txgrs_YTD
  move 0 to #CB.QIT_Tax_YTD
  move 0 to #CB.RV2_Txgrs_YTD
  move 0 to #CB.RV2_Tax_YTD
  move 0 to #CB.CPP_Nlgrs_YTD
  move 0 to #CB.CPP_Earns_YTD
  move 0 to #CB.CPP_Contrib_YTD
  move 0 to #CB.QPP_Nlgrs_YTD
  move 0 to #CB.QPP_Earns_YTD
  move 0 to #CB.QPP_Contrib_YTD
  move 0 to #CB.UI_Earns_YTD
  move 0 to #CB.UI_EE_Premium_YTD
  move 0 to #CB.True_T4_Txgrs_YTD
  move 0 to #CB.True_RV_Txgrs_YTD
  move 0 to #CB.Pension_Adj_YTD
  move 0 to #MthCd

end-procedure


begin-procedure Add-To-Mtd-Totals


  let $TaxClass = RTRIM(&CB.TAX_CLASS_CAN, ' ')

  evaluate $TaxClass

    when = 'CIT'
      add &CB.TXGRS_MTD        to      #cit-taxgrs-mtd-accum
      add &CB.TAX_MTD          to      #cit-tax-mtd-accum
    when = 'T4A'
      add &CB.TXGRS_MTD        to      #t4a-txgrs-mtd-accum
      add &CB.TAX_MTD          to      #t4a-tax-mtd-accum
    when = 'QIT'
      add &CB.TXGRS_MTD        to      #qit-txgrs-mtd-accum
      add &CB.TAX_MTD          to      #qit-tax-mtd-accum
    when = 'RV2'
      add &CB.TXGRS_MTD        to      #rv2-txgrs-mtd-accum
      add &CB.TAX_MTD          to      #rv2-tax-mtd-accum
    when = 'CPP'
      add &CB.TXGRS_MTD        to      #cpp-earns-mtd-accum
      add &CB.TAX_MTD          to      #cpp-contrib-mtd-accum
    when = 'QPP'
      add &CB.TXGRS_MTD        to      #qpp-earns-mtd-accum
      add &CB.TAX_MTD          to      #qpp-contrib-mtd-accum
    when = 'EIE'
      add &CB.TXGRS_MTD        to      #ui-earns-mtd-accum
      add &CB.TAX_MTD          to      #ui-ee-premium-mtd-accum
    when = 'TT4'
      add &CB.TXGRS_MTD        to      #true-t4-txgrs-mtd-accum
    when = 'TRV'
      add &CB.TXGRS_MTD        to      #true-rv-txgrs-mtd-accum
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Add-To-Company-Totals

  add #cit-taxgrs-ytd      to #company-cit-taxgrs-ytd
  add #t4a-txgrs-ytd       to #company-t4a-txgrs-ytd
  add #cpp-earns-ytd       to #company-cpp-earns-ytd
  add #ui-earns-ytd        to #company-ui-earns-ytd
  add #qit-txgrs-ytd       to #company-qit-txgrs-ytd
  add #rv2-txgrs-ytd       to #company-rv2-txgrs-ytd
  add #qpp-earns-ytd       to #company-qpp-earns-ytd
  add #cit-tax-ytd         to #company-cit-tax-ytd
  add #t4a-tax-ytd         to #company-t4a-tax-ytd
  add #cpp-contrib-ytd     to #company-cpp-contrib-ytd
  add #ui-ee-premium-ytd   to #company-ui-ee-premium-ytd
  add #qit-tax-ytd         to #company-qit-tax-ytd
  add #rv2-tax-ytd         to #company-rv2-tax-ytd
  add #qpp-contrib-ytd     to #company-qpp-contrib-ytd
  add #true-t4-txgrs-ytd   to #company-true-t4-txgrs-ytd
  add #true-RV-txgrs-ytd   to #company-true-RV-txgrs-ytd

end-procedure


begin-procedure Process-Company-YTD-Totals

  if $YTDOnly = 'Y'

    new-page
    print $Ctx900_Company            (+2,1)
    print $Comp                      (0,+1)
    print $Ctx900_Totals             (0,+1)
    print $Ctx900_Ytd_totals_for     (+2,1)
    print $NoYear                    (0,+1)

    do Print-Rpt-Heading-Totals

    print #company-cit-taxgrs-ytd     (+1,07)    edit 99,999,999,999.99
    print #company-t4a-txgrs-ytd      (0,27)     edit 99,999,999,999.99
    print #company-cpp-earns-ytd      (0,48)     edit    999,999,999.99
    print #company-ui-earns-ytd       (0,68)     edit    999,999,999.99
    print #company-qit-txgrs-ytd      (0,88)     edit    999,999,999.99
    print #company-rv2-txgrs-ytd      (0,108)    edit    999,999,999.99
    print #company-qpp-earns-ytd      (0,128)    edit    999,999,999.99
    print #company-true-t4-txgrs-ytd  (0,145)    edit 99,999,999,999.99

    print #company-cit-tax-ytd        (+1,07)    edit 99,999,999,999.99
    print #company-t4a-tax-ytd        (0,27)     edit 99,999,999,999.99
    print #company-cpp-contrib-ytd    (0,48)     edit    999,999,999.99
    print #company-ui-ee-premium-ytd  (0,68)     edit    999,999,999.99
    print #company-qit-tax-ytd        (0,88)     edit    999,999,999.99
    print #company-rv2-tax-ytd        (0,108)    edit    999,999,999.99
    print #company-qpp-contrib-ytd    (0,128)    edit    999,999,999.99
    print #company-true-RV-txgrs-ytd  (0,145)    edit 99,999,999,999.99


  end-if

end-procedure


begin-procedure Initialize-Company-YTD-Totals

  if $YTDOnly = 'Y'
    move 0 to #company-cit-taxgrs-ytd
    move 0 to #company-t4a-txgrs-ytd
    move 0 to #company-cpp-earns-ytd
    move 0 to #company-ui-earns-ytd
    move 0 to #company-qit-txgrs-ytd
    move 0 to #company-rv2-txgrs-ytd
    move 0 to #company-qpp-earns-ytd
    move 0 to #company-cit-tax-ytd
    move 0 to #company-t4a-tax-ytd
    move 0 to #company-cpp-contrib-ytd
    move 0 to #company-ui-ee-premium-ytd
    move 0 to #company-qit-tax-ytd
    move 0 to #company-rv2-tax-ytd
    move 0 to #company-qpp-contrib-ytd
    move 0 to #company-true-t4-txgrs-ytd
    move 0 to #company-true-RV-txgrs-ytd
  end-if

end-procedure


begin-procedure Process-Grand-YTD-Totals

  if $YTDOnly = 'Y'

    new-page
    print $Ctx900_Grand_totals       (+2,1)
    print $Ctx900_Ytd_totals_for     (+2,1)
    print $NoYear                    (0,+1)

    do Print-Rpt-Heading-Totals

    print #grand-cit-taxgrs-ytd     (+1,07)    edit 99,999,999,999.99
    print #grand-t4a-txgrs-ytd      (0,27)     edit 99,999,999,999.99
    print #grand-cpp-earns-ytd      (0,48)     edit    999,999,999.99
    print #grand-ui-earns-ytd       (0,68)     edit    999,999,999.99
    print #grand-qit-txgrs-ytd      (0,88)     edit    999,999,999.99
    print #grand-rv2-txgrs-ytd      (0,108)    edit    999,999,999.99
    print #grand-qpp-earns-ytd      (0,128)    edit    999,999,999.99
    print #grand-true-t4-txgrs-ytd  (0,145)    edit 99,999,999,999.99

    print #grand-cit-tax-ytd        (+1,07)    edit 99,999,999,999.99
    print #grand-t4a-tax-ytd        (0,27)     edit 99,999,999,999.99
    print #grand-cpp-contrib-ytd    (0,48)     edit    999,999,999.99
    print #grand-ui-ee-premium-ytd  (0,68)     edit    999,999,999.99
    print #grand-qit-tax-ytd        (0,88)     edit    999,999,999.99
    print #grand-rv2-tax-ytd        (0,108)    edit    999,999,999.99
    print #grand-qpp-contrib-ytd    (0,128)    edit    999,999,999.99
    print #grand-true-RV-txgrs-ytd  (0,145)    edit 99,999,999,999.99

  end-if

end-procedure


begin-procedure Add-to-Grand-YTD-Totals

  add #cit-taxgrs-ytd    to #grand-cit-taxgrs-ytd
  add #t4a-txgrs-ytd     to #grand-t4a-txgrs-ytd
  add #cpp-earns-ytd     to #grand-cpp-earns-ytd
  add #ui-earns-ytd      to #grand-ui-earns-ytd
  add #qit-txgrs-ytd     to #grand-qit-txgrs-ytd
  add #rv2-txgrs-ytd     to #grand-rv2-txgrs-ytd
  add #qpp-earns-ytd     to #grand-qpp-earns-ytd
  add #cit-tax-ytd       to #grand-cit-tax-ytd
  add #t4a-tax-ytd       to #grand-t4a-tax-ytd
  add #cpp-contrib-ytd   to #grand-cpp-contrib-ytd
  add #ui-ee-premium-ytd to #grand-ui-ee-premium-ytd
  add #qit-tax-ytd       to #grand-qit-tax-ytd
  add #rv2-tax-ytd       to #grand-rv2-tax-ytd
  add #qpp-contrib-ytd   to #grand-qpp-contrib-ytd
  add #true-t4-txgrs-ytd to #grand-true-t4-txgrs-ytd
  add #true-RV-txgrs-ytd to #grand-true-RV-txgrs-ytd

end-procedure


begin-procedure Main-Edits

do Get-Data-For-Editting

do Format-Numbers

do Validate-Employee-Contributions

do Validate-UI-CPP-Contribs

let $Empl-data-found = 'N'

end-procedure


begin-procedure Get-Data-For-Editting

move ''  to  $TempYr

let $TempYr = $CalYear || '1231'
do Format-DateTime($TempYr, $TempYr, {DEFCMP}, '', 'native')

begin-SELECT
P1.NATIONAL_ID
PN1.NAME
P.EMPLID
P.BIRTHDATE

 move &P1.NATIONAL_ID to $TempSIN                 ! for possible error reporting ....
 move &PN1.Name to $TempName
 move &P.EmplId to $TempEmplId

FROM  PS_PERSON P, PS_PERSON_NAME PN1, PS_PERS_NID P1
WHERE P.EMPLID = $EE_EMPLID AND PN1.EMPLID = P.EMPLID AND P1.EMPLID = $EE_EMPLID AND P1.COUNTRY = {NID_Country}
AND P1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
end-SELECT

begin-SELECT
TT.CPP_BASIC_EXEM
TT.CPP_EE_PCT
TT.CPP_MAX_EARNS
TT.CPP_MIN_AGE
TT.CPP_MAX_AGE
TT.QPP_BASIC_EXEM
TT.QPP_EE_PCT
TT.QPP_MAX_EARNS
TT.QPP_MIN_AGE
TT.QPP_MAX_AGE
TT.UI_EE_PREMIUM_PCT
TT.UI_MAX_ANNL_EARNS
TT.UI_PCT_MAX_EARNS
TT.EFFDT

 FROM  PS_CAN_TAX_TBL  TT
WHERE TT.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_CAN_TAX_TBL
                   WHERE EFFDT <= $TempYr)
end-SELECT

begin-SELECT
TD.CPP_SUBJECT_MONTHS
TD.UI_EXEMPT
TD.EMPLID
TD.COMPANY
TD1.WAGE_LOSS_PLAN

FROM   PS_CAN_TAX_DATA    TD,
       PS_EMPL_WAGELS_CAN TD1
WHERE TD.EMPLID = $EE_EMPLID
AND TD.COMPANY  = $EE_COMPANY
AND TD.EMPLID   = TD1.EMPLID
AND TD.COMPANY  = TD1.COMPANY
AND TD.EFFDT    = TD1.EFFDT
AND TD1.WAGE_LOSS_PLAN  = $EE_Wage_LP
AND TD1.EFFDT    =
        (SELECT MAX(EFFDT)
         FROM PS_EMPL_WAGELS_CAN
         WHERE EFFDT <= $AsOfDate
           AND EMPLID   = TD1.EMPLID
           AND COMPANY  = TD1.COMPANY
           AND WAGE_LOSS_PLAN = TD1.WAGE_LOSS_PLAN)
AND TD1.EMPL_RCD =
        (SELECT MIN(EMPL_RCD)
         FROM PS_EMPL_WAGELS_CAN
         WHERE EMPLID          = TD.EMPLID
           AND COMPANY         = TD.COMPANY
           AND WAGE_LOSS_PLAN  = TD1.WAGE_LOSS_PLAN
           AND EFFDT           = TD.EFFDT)
end-SELECT

end-procedure


begin-procedure Format-Numbers

  do Format-Number (#CB.CPP_Nlgrs_YTD,$CB.CPP_Nlgrs_YTD, '99999999.99')
  do Format-Number (#CB.QPP_Nlgrs_YTD,$CB.QPP_Nlgrs_YTD, '99999999.99')
  do Format-Number (#CB.CIT_Txgrs_YTD, $CB.CIT_Txgrs_YTD, '9999999999.99')
  do Format-Number (#CB.CIT_TAX_YTD, $CB.CIT_TAX_YTD, '9999999999.99')
  do Format-Number (#CB.QIT_Txgrs_YTD, $CB.QIT_Txgrs_YTD, '9999999999.99')
  do Format-Number (#CB.QIT_TAX_YTD, $CB.QIT_TAX_YTD, '9999999999.99')
  do Format-Number (#CB.T4A_Txgrs_YTD, $CB.T4A_Txgrs_YTD, '9999999999.99')
  do Format-Number (#CB.T4A_TAX_YTD, $CB.T4A_TAX_YTD, '9999999999.99')
  do Format-Number (#CB.CPP_Contrib_YTD, $CB.CPP_Contrib_YTD, '999999.99')
  do Format-Number (#CB.QPP_Contrib_YTD, $CB.QPP_Contrib_YTD, '999999.99')
  do Format-Number (#CB.UI_EE_Premium_YTD, $CB.UI_EE_Premium_YTD, '999999.99')
  do Format-Number (#CB.UI_Earns_YTD,$CB.UI_Earns_YTD, '99999999.99')
  do Format-Number (#CB.CPP_Earns_YTD, $CB.CPP_Earns_YTD, '99999999.99')
  do Format-Number (#CB.QPP_Earns_YTD, $CB.QPP_Earns_YTD, '99999999.99')
  do Format-Number (&TD.CPP_Subject_Months,$CPP_Subject_Months, '99')
  do Format-Number (&TT.CPP_EE_Pct,$TT.CPP_EE_Pct,'99.999')
  do Format-Number (&TT.QPP_EE_Pct,$QPP_EE_Pct,'99.999')
  do Format-Number (&TT.UI_EE_Premium_Pct,$TT.UI_EE_Premium_Pct,'99.99')
  do Format-Number (#CB.Pension_Adj_YTD,$CB.Pension_Adj_YTD, '999999999.99')
  do Format-Number (#CB.True_T4_Txgrs_YTD, $CB.True_T4_Txgrs_YTD, '99999999.99')
  do Format-Number (#CB.True_RV_Txgrs_YTD, $CB.True_RV_Txgrs_YTD, '99999999.99')

end-procedure


begin-procedure Validate-SIN

  let $SIN1 = substr(&PD1.NATIONAL_ID,1,1)
  let $SIN2 = substr(&PD1.NATIONAL_ID,2,1)
  let $SIN3 = substr(&PD1.NATIONAL_ID,3,1)
  let $SIN4 = substr(&PD1.NATIONAL_ID,4,1)
  let $SIN5 = substr(&PD1.NATIONAL_ID,5,1)
  let $SIN6 = substr(&PD1.NATIONAL_ID,6,1)
  let $SIN7 = substr(&PD1.NATIONAL_ID,7,1)
  let $SIN8 = substr(&PD1.NATIONAL_ID,8,1)
  let $SIN9 = substr(&PD1.NATIONAL_ID,9,1)

  move $SIN1 to #SIN1
  move $SIN2 to #SIN2
  move $SIN3 to #SIN3
  move $SIN4 to #SIN4
  move $SIN5 to #SIN5
  move $SIN6 to #SIN6
  move $SIN7 to #SIN7
  move $SIN8 to #SIN8
  move $SIN9 to #SIN9

  let #SIN2 = #SIN2 * 2
  let #SIN4 = #SIN4 * 2
  let #SIN6 = #SIN6 * 2
  let #SIN8 = #SIN8 * 2

  move #SIN2 to $SIN2 99
  move #SIN4 to $SIN4 99
  move #SIN6 to $SIN6 99
  move #SIN8 to $SIN8 99

  let $SIN2a = substr($SIN2,1,1)
  let $SIN2b = substr($SIN2,2,1)
  move $SIN2a to #SIN2a
  move $SIN2b to #SIN2b

  let $SIN4a = substr($SIN4,1,1)
  let $SIN4b = substr($SIN4,2,1)
  move $SIN4a to #SIN4a
  move $SIN4b to #SIN4b

  let $SIN6a = substr($SIN6,1,1)
  let $SIN6b = substr($SIN6,2,1)
  move $SIN6a to #SIN6a
  move $SIN6b to #SIN6b

  let $SIN8a = substr($SIN8,1,1)
  let $SIN8b = substr($SIN8,2,1)
  move $SIN8a to #SIN8a
  move $SIN8b to #SIN8b

  let #SIN2468    = #SIN2a + #SIN2b + #SIN4a + #SIN4b +
        #SIN6a + #SIN6b + #SIN8a + #SIN8b

  let #SIN1357    = #SIN1  + #SIN3  + #SIN5  + #SIN7

  let #SINALL     = #SIN1357 + #SIN2468

  let #Sin_mod = trunc((#SINALL / 10),0) * 10 + 10
  let #Check_digit = mod((#Sin_mod - #SINALL), 10)

  if #Check_digit = #Sin9
    let $Invalid_Sin = 'N'
  else
    let $Invalid_Sin = 'Y'
  end-if

end-procedure


begin-procedure Validate-Employee-Contributions

  if #CB.CPP_Earns_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_cpp_earn ||$CB.CPP_Earns_YTD||''
    do Add-To-Errors
  end-if

  if #CB.CPP_NLGrs_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_cpp_gross ||$CB.CPP_NLGrs_YTD||''
    do Add-To-Errors
  end-if

  if #CB.CPP_Contrib_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_cpp_contr ||$CB.CPP_Contrib_YTD||''
    do Add-To-Errors
  end-if

  if #CB.UI_Earns_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_ei_earn ||$CB.UI_Earns_YTD||''
    do Add-To-Errors
  end-if

  if #CB.UI_Ee_Premium_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_ei_prem ||$CB.UI_Ee_Premium_YTD ||''
    do Add-To-Errors
  end-if

  if #CB.CIT_TxGrs_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_cit_gross ||$CB.CIT_TxGrs_YTD||''
    do Add-To-Errors
  end-if

  if #CB.CIT_Tax_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_cit_deduct ||$CB.CIT_Tax_YTD||''
    do Add-To-Errors
  end-if

  if #CB.Pension_Adj_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_pens_adj ||$CB.Pension_Adj_YTD||''
    do Add-To-Errors
  end-if

  if #CB.T4A_TxGrs_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_t4a_taxable ||$CB.T4A_TxGrs_YTD||''
    do Add-To-Errors
  end-if

  if #CB.T4A_Tax_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_t4a_tax ||$CB.T4A_Tax_YTD||''
    do Add-To-Errors
  end-if

  if #CB.True_T4_Txgrs_YTD < 0
    let $ErrorMsg = $Ctx900_Neg_true_t4 ||$CB.True_T4_TxGrs_YTD||''
    do Add-To-Errors
  end-if

  if (rtrim($EE_Province, ' ')) = 'QC'
    if #CB.QPP_Earns_YTD < 0
     let $ErrorMsg = $Ctx900_Neg_qpp_earn ||$CB.QPP_Earns_YTD||''
     do Add-To-Errors
    end-if
    if #CB.QPP_NLGrs_YTD < 0
      let $ErrorMsg = $Ctx900_Neg_qpp_gross ||$CB.QPP_NLGrs_YTD||''
      do Add-To-Errors
    end-if
    if #CB.QPP_Contrib_YTD < 0
      let $ErrorMsg = $Ctx900_Neg_qpp_contr ||$CB.QPP_Contrib_YTD||''
      do Add-To-Errors
    end-if
    if #CB.QIT_TxGrs_YTD < 0
      let $ErrorMsg = $Ctx900_Neg_qit_taxable ||$CB.QIT_TxGrs_YTD||''
      do Add-To-Errors
    end-if
    if #CB.QIT_Tax_YTD < 0
      let $ErrorMsg = $Ctx900_Neg_qit_deduct ||$CB.QIT_Tax_YTD||''
      do Add-To-Errors
    end-if
    if #CB.True_RV_TxGrs_YTD < 0
      let $ErrorMsg = $Ctx900_Neg_true_rv ||$CB.True_RV_TxGrs_YTD||''
      do Add-To-Errors
    end-if
  else
    if #CB.QPP_Earns_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_qpp_earn
      do Add-To-Errors
    end-if
    if #CB.QPP_NLGrs_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_qpp_gross
      do Add-To-Errors
    end-if
    if #CB.QPP_Contrib_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_qpp_contr
      do Add-To-Errors
    end-if
    if #CB.QIT_TxGrs_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_qit_tax
      do Add-To-Errors
    end-if
    if #CB.QIT_Tax_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_qit_ded
      do Add-To-Errors
    end-if
    if #CB.True_RV_TxGrs_YTD <> 0
      let $ErrorMsg = $Ctx900_Nonzero_true_rv
      do Add-To-Errors
    end-if
  end-if

end-procedure


begin-procedure Validate-UI-CPP-Contribs

do Format-DateTime(&P.BirthDate, $BirthDate, {DEFCMP}, '', '')
let $BirthYear  = substr($BirthDate, 1, 4)
let $BirthMonth = substr($BirthDate, 5, 2)
move $BirthYear  to #BirthYear
move $BirthMonth to #BirthMonth
let #Empl_Age = (&TX.Balance_Year - #BirthYear)
move &TT.CPP_Basic_Exem to #CPPExemption
move &TT.QPP_Basic_Exem to #QPPExemption
move &TD.CPP_Subject_Months to #Subject_Months
move &TD.CPP_Subject_Months to #QPP_Subject_Months

if #Empl_Age = &TT.CPP_MIN_AGE
      let #Subject_Months = 12 - #BirthMonth
end-if

if #Empl_Age = &TT.CPP_MAX_AGE
      let #Subject_Months = #BirthMonth
end-if

if #Empl_Age = &TT.QPP_MIN_AGE
      let #QPP_Subject_Months = 12 - #BirthMonth
end-if

if #Empl_Age = &TT.QPP_MAX_AGE
      let #QPP_Subject_Months = #BirthMonth
end-if

do Format-Number (#CPPExemption,$CPPExemption, '999999.99')
do Format-Number (#QPPExemption,$QPPExemption, '999999.99')

if #CB.CPP_Contrib_YTD > 0 and #CB.QPP_Contrib_YTD > 0
     let $ErrorMsg = $Ctx900_cpp_contr_amt || $CB.CPP_Contrib_YTD ||
         $Ctx900_qpp_contr_amt
         || $CB.QPP_Contrib_YTD || $Ctx900_greater_zero
    do Add-to-Errors
end-if


let #MaxCPPContrib = (&TT.CPP_Max_Earns - &TT.CPP_Basic_Exem) *  (&TT.CPP_EE_Pct/100) *
                      #Subject_Months / 12

do PS_SQR_Round(#MaxCPPContrib, 2, #MaxCPPContrib)
do PS_SQR_Round(#CB.CPP_Contrib_YTD, 2, #CB.CPP_Contrib_YTD)

do Format-Number (#MaxCPPContrib, $MaxCPPContrib, '9999.99')

if #CB.CPP_Contrib_YTD >  #MaxCPPContrib
      let $ErrorMsg = $Ctx900_cpp_ytd_amt
    || $CB.CPP_Contrib_YTD || $Ctx900_exceeds ||$MaxCPPContrib||')'
      do Add-to-Errors
end-if


let #MaxQPPContrib = (&TT.QPP_Max_Earns - &TT.QPP_Basic_Exem) *  (&TT.QPP_EE_Pct/100) *
                        #QPP_Subject_Months / 12

do PS_SQR_Round(#MaxQPPContrib, 2, #MaxQPPContrib)
do PS_SQR_Round(#CB.QPP_Contrib_YTD, 2, #CB.QPP_Contrib_YTD)

do Format-Number (#MaxQPPContrib, $MaxQPPContrib, '9999.99')

if #CB.QPP_Contrib_YTD > #MaxQPPContrib
      let $ErrorMsg = $Ctx900_qpp_ytd_amt || $CB.QPP_Contrib_YTD||
      $Ctx900_exceeds ||$MaxQPPContrib||')'
     do Add-to-Errors
end-if

if rtrim($EE_Province, ' ') <> 'QC'

   if (#NoMonth = 12) and ($AllMonth = 'Y') and ($RC_CAN_YE.CPP_QPP_Nlgrs_Edit = 'Y')
     do Edit-CPP-Txgrs
   end-if

   if (#CB.CPP_Contrib_YTD <= #MaxCPPContrib) and (#CB.CPP_Contrib_YTD > 0)

         if #CB.CPP_Earns_YTD <> 0
            let #Box_Dif = #CB.CPP_Contrib_YTD
                - ((&TT.CPP_EE_Pct/100)*(#CB.CPP_Earns_YTD))

            if #Box_Dif < 0
                 let #Box_Dif = #Box_Dif * -1
            end-if

            if  #Box_Dif > 1.00
     let $ErrorMsg = $Ctx900_cpp_ytd_of || $CB.CPP_Contrib_YTD ||
       $Ctx900_is_not ||$TT.CPP_EE_Pct|| $Ctx900_perc_of_cpp_ytd
        ||$CB.CPP_Earns_YTD|| ')'
                 do Add-to-Errors
            end-if

         else
             let $CPP-Passed = 'N'

             do Edit-CPP-Contrib

             if $CPP-Passed = 'N'
                  do Add-to-Errors
             end-if

         end-if

           end-if

else   ! QPP

    if (#NoMonth = 12) and ($AllMonth = 'Y') and ($RC_CAN_YE.CPP_QPP_Nlgrs_Edit = 'Y')
      do Edit-QPP-Txgrs
    end-if

    if #CB.QPP_Contrib_YTD <= #MaxQPPContrib and  #CB.QPP_Contrib_YTD > 0

        if #CB.QPP_Earns_YTD <> 0
           let #Box_Dif = #CB.QPP_Contrib_YTD - ((&TT.QPP_EE_Pct/100) *
             (#CB.QPP_Earns_YTD))

           if #Box_Dif < 0
              let #Box_Dif = #Box_Dif * -1
           end-if

           if #Box_Dif > 1.00
                         let $ErrorMsg = $Ctx900_qpp_ytd_of
                       || $CB.QPP_Contrib_YTD || $Ctx900_is_not ||$QPP_Ee_Pct||
                       $Ctx900_perc_of_qpp_ytd ||$CB.QPP_Earns_YTD||')'
                do Add-to-Errors
           end-if
        else
           let $QPP-Passed = 'N'
           do Edit-QPP-Contrib

           if $QPP-Passed = 'N'
                do Add-to-Errors
           end-if
        end-if
    end-if
end-if

if RTRIM($CPP_Subject_Months, ' ') = '' or
   LTRIM($CPP_subject_Months, ' ') = '0'

        if #CB.CPP_Contrib_YTD <> 0
 let $ErrorMsg = $Ctx900_cpp_mth_msg1
         || $CB.CPP_Contrib_YTD || $Ctx900_must_be_blank
           do Add-to-Errors
        end-if

        if #CB.QPP_Contrib_YTD <> 0
 let $ErrorMsg = $Ctx900_cpp_mth_msg2
      || $CB.QPP_Contrib_YTD || $Ctx900_must_be_blank
                do Add-to-Errors
        end-if

        if #CB.CPP_Earns_YTD <> 0
         let $ErrorMsg = $Ctx900_cpp_mth_msg3
                 || $CB.CPP_Earns_YTD|| $Ctx900_must_be_blank
                do Add-to-Errors
        end-if
end-if

let #MaxUIEarnings = &TT.UI_Max_Annl_Earns
let #MaxUIPrem = #MaxUIEarnings * &TT.UI_EE_Premium_Pct / 100

do Format-Number (#MaxUIEarnings, $MaxUIEarnings, '999999.99')
do Format-Number (#MaxUIPrem, $MaxUIPrem, '9999.99')

if #CB.UI_EE_Premium_YTD > #MaxUIPrem
      let $ErrorMsg = $Ctx900_ei_prem_ytd || $CB.UI_Ee_Premium_YTD ||
       $Ctx900_exceed_max_prem || $MaxUIPrem || ')'
     do Add-to-Errors
end-if

if #CB.UI_Earns_YTD > #MaxUIEarnings
      let $ErrorMsg = $Ctx900_ei_ins_amt || $CB.UI_Earns_YTD ||
   $Ctx900_exceed_max_earn || $MaxUIEarnings ||')'
   do Add-to-Errors
end-if

if #CB.UI_Earns_YTD <> 0
      let #Box_Dif = #CB.UI_EE_Premium_YTD - ((&TT.UI_EE_Premium_Pct /100) *
              #CB.UI_Earns_YTD)

     let #Premium_Adj = #Box_Dif * -1

     if #Box_Dif <  0
        let #Box_Dif = #Box_Dif * -1
     end-if

    if #Box_Dif  > 1.00
        let #UI_Adj = (#CB.UI_EE_PREMIUM_YTD / (&TT.UI_EE_PREMIUM_PCT * .01)) - #CB.UI_EARNS_YTD
        do Format-Number (#UI_adj, $UI_Adj, '99999999.99')

        do Format-Number (#Premium_Adj, $Premium_Adj, '99999999.99')

        let $ErrorMsg = $Ctx900_empl_ei_amt
        || $CB.UI_EE_Premium_YTD ||
         $Ctx900_not ||$TT.UI_EE_Premium_Pct|| $Ctx900_perc_ei_ins_earn
              || $CB.UI_Earns_YTD || $Ctx900_adjust_earn
        || $UI_Adj || $Ctx900_prem_by || $Premium_Adj || ')'
          do Add-to-Errors
    end-if

end-if


if #CB.UI_Earns_YTD = 0
      and #CB.UI_EE_Premium_YTD > 0

     let #Box_Dif = #CB.UI_EE_Premium_YTD - ((&TT.UI_EE_Premium_Pct/100) *
        #CB.CIT_Txgrs_YTD)

     if #Box_Dif <  0
            let #Box_Dif = #Box_Dif * -1
     end-if

     if #Box_Dif  > 1.00
       let $ErrorMsg = $Ctx900_ei_earn_blank
       ||$TT.UI_EE_Premium_Pct||$Ctx900_perc_empl_income
         do Add-to-Errors
     end-if

end-if

if &TD.UI_Exempt = 'Y'

     if #CB.UI_EE_Premium_YTD <> 0
      let $ErrorMsg = $Ctx900_ei_exemp_prem
 || $CB.UI_Ee_Premium_YTD|| $Ctx900_must_be_blank
            do Add-to-Errors
     end-if

     if #CB.UI_Earns_YTD <> 0
          let $ErrorMsg = $Ctx900_ei_exemp_earn
         || $CB.UI_Earns_YTD || $Ctx900_must_be_blank
          do Add-to-Errors
     end-if

end-if

end-procedure


begin-procedure Edit-CPP-Contrib

let #ExemptAmt = #CB.CPP_NlGrs_YTD - #CB.CPP_Earns_YTD

let #Box_Dif = #CB.CPP_Contrib_YTD - ((&TT.CPP_EE_Pct/100) * (#CB.CPP_NlGrs_YTD
      - #ExemptAmt))

if #Box_Dif < 0
       let #Box_Dif = #Box_Dif * -1
end-if

if #Box_Dif > 1.00

         do format-number(#ExemptAmt, $ExemptAmt, '9999.99')
         let $ErrorMsg = $Ctx900_cpp_ytd_amt_of
          || $CB.CPP_Contrib_YTD ||
          $Ctx900_is_not ||$TT.CPP_EE_Pct||$Ctx900_perc_of_cpp_gross
          || $CB.CPP_Nlgrs_YTD ||
          $Ctx900_minus_exemp || $ExemptAmt || '.)'
        let $CPP-Passed = 'N'
else
         let $CPP-Passed = 'Y'

end-if

end-procedure


begin-procedure Edit-QPP-Contrib

let #ExemptAmt = #CB.QPP_NlGrs_YTD - #CB.QPP_Earns_YTD

let #Box_Dif = #CB.QPP_Contrib_YTD - ((&TT.QPP_EE_Pct/100) * (#CB.QPP_NlGrs_YTD
   - #ExemptAmt))

if #Box_Dif < 0
       let #Box_Dif = #Box_Dif * -1
end-if

if #Box_Dif > 1.00

      do format-number(#ExemptAmt, $ExemptAmt, '9999.99')
  let $ErrorMsg = $Ctx900_qpp_ytd_amt_of || $CB.QPP_Contrib_YTD ||
 $Ctx900_is_not ||$QPP_EE_Pct||$Ctx900_perc_of_qpp_gross
 || $CB.QPP_NlGrs_YTD || $Ctx900_minus_exemp || $ExemptAmt || ')'

      let $QPP-Passed = 'N'
else
      let $QPP-Passed = 'Y'

end-if

end-procedure


begin-procedure Edit-CPP-Txgrs

let #MaxCPPEarns         = 0
let #MaxCPPTxgrs         = 0
let #Max_CPP_Exempt      = 0
let #CPP_Nlg_less_Txgrs  = 0
let #Diff                = 0

if #CB.CPP_Nlgrs_YTD > 0


  let #MaxCPPEarns = &TT.CPP_Max_Earns * #Subject_Months / 12
  do PS_SQR_Round(#MaxCPPEarns, 2, #MaxCPPEarns)
  do Format-Number (#MaxCPPEarns, $MaxCPPEarns, '99999999.99')

  let #MaxCPPTxgrs = (&TT.CPP_Max_Earns - &TT.CPP_Basic_Exem) * #Subject_Months / 12
  do PS_SQR_Round(#MaxCPPTxgrs, 2, #MaxCPPTxgrs)
  do Format-Number (#MaxCPPTxgrs, $MaxCPPTxgrs, '99999999.99')

  let #Max_CPP_Exempt = #CPPExemption * #Subject_Months / 12
  do PS_SQR_Round(#Max_CPP_Exempt, 2, #Max_CPP_Exempt)
  do Format-Number (#Max_CPP_Exempt, $Max_CPP_Exempt, '99999999.99')

  ! CPP NLG exceeds max CPP earns, CPP Txgrs should be at max minus exempt

  if #CB.CPP_Nlgrs_YTD   >= #MaxCPPEarns
    if #CB.CPP_Earns_YTD < #MaxCPPTxgrs
      let $ErrorMsg = $Ctx900_cpp_nlg || $CB.CPP_Nlgrs_YTD || $Ctx900_cpp_excd_ern_max ||  $MaxCPPEarns ||
                      $Ctx900_cpp_txgrs || $CB.CPP_Earns_YTD || $Ctx900_not_max || $MaxCPPTxgrs || $Ctx900_chk_tax_bal
      do Add-To-Errors
    end-if

  else
    let #CPP_Nlg_less_Txgrs = #CB.CPP_Nlgrs_YTD  - #CB.CPP_Earns_YTD
    do PS_SQR_Round(#CPP_Nlg_less_Txgrs, 2, #CPP_Nlg_less_Txgrs)
    let #Diff =  #CPP_Nlg_less_Txgrs - #Max_CPP_Exempt

    ! CPP NLG minus CPP Txgrs equals CPP exemption

    if #Diff > 1.0
      let $ErrorMsg = $Ctx900_cpp_nlg || $CB.CPP_Nlgrs_YTD || $Ctx900_cpp_less_exempt || $Max_CPP_Exempt ||
                      $Ctx900_cpp_not_eq_txgrs || $CB.CPP_Earns_YTD ||$Ctx900_chk_tax_bal
      do Add-To-Errors
    end-if
  end-if

end-if
end-procedure Edit-CPP-Txgrs


begin-procedure Edit-QPP-Txgrs

let #MaxQPPEarns         = 0
let #MaxQPPTxgrs         = 0
let #Max_QPP_Exempt      = 0
let #QPP_Nlg_less_Txgrs  = 0
let #Diff                = 0

if #CB.QPP_Nlgrs_YTD > 0

  let #MaxQPPEarns = &TT.QPP_Max_Earns * #QPP_Subject_Months / 12
  do PS_SQR_Round(#MaxQPPEarns, 2, #MaxQPPEarns)
  do Format-Number (#MaxQPPEarns, $MaxQPPEarns, '99999999.99')

  let #MaxQPPTxgrs = (&TT.QPP_Max_Earns - &TT.QPP_Basic_Exem) * #QPP_Subject_Months / 12
  do PS_SQR_Round(#MaxQPPTxgrs, 2, #MaxQPPTxgrs)
  do Format-Number (#MaxQPPTxgrs, $MaxQPPTxgrs, '99999999.99')

  let #Max_QPP_Exempt = #QPPExemption * #Subject_Months / 12
  do PS_SQR_Round(#Max_QPP_Exempt, 2, #Max_QPP_Exempt)
  do Format-Number (#Max_QPP_Exempt, $Max_QPP_Exempt, '99999999.99')

  ! QPP NLG exceeds max QPP earns, QPP Txgrs should be at max minus exempt

  if #CB.QPP_Nlgrs_YTD   >= #MaxQPPEarns
    if #CB.QPP_Earns_YTD <  #MaxQPPTxgrs
      let $ErrorMsg = $Ctx900_qpp_nlg || $CB.QPP_Nlgrs_YTD || $Ctx900_qpp_excd_ern_max  ||  $MaxQPPEarns ||
                      $Ctx900_qpp_txgrs || $CB.QPP_Earns_YTD ||$Ctx900_not_max  || $MaxQPPTxgrs || $Ctx900_chk_tax_bal
      do Add-To-Errors
    end-if

  else
    let #QPP_Nlg_less_Txgrs = #CB.QPP_Nlgrs_YTD  - #CB.QPP_Earns_YTD
    do PS_SQR_Round(#QPP_Nlg_less_Txgrs, 2, #QPP_Nlg_less_Txgrs)
    let #Diff =  #QPP_Nlg_less_Txgrs - #Max_QPP_Exempt

    ! QPP NLG minus QPP Txgrs equals QPP exemption

    if #Diff > 1.0
      let $ErrorMsg = $Ctx900_qpp_nlg || $CB.QPP_Nlgrs_YTD || $Ctx900_qpp_less_exempt || $Max_QPP_Exempt ||
                      $Ctx900_qpp_not_eq_txgrs || $CB.QPP_Earns_YTD  || $Ctx900_chk_tax_bal
      do Add-To-Errors
    end-if
  end-if

end-if
end-procedure Edit-QPP-Txgrs


begin-procedure Add-to-Errors

move ''            to $EMonth
move 0             to #SIN
move ''            to $Emplid

if $SINDecInd <> 'Y'
        get $EMonth from  MonthInfo (#MthCd) MonthName
end-if

let #ErrYr  = &TX.Balance_Year

move $TempSIN      to #SIN
move $TempEmplId   to $Emplid

if  #no_errs =  #max_errors
display  'Errors exceeds maximum allowed in error array - increase array size '
display  'Array size'
display  #max_errors
stop
end-if

if $MiscEditError <> 'Y'

        put $Emplid              into  ErrorLine(#no_errs) EmplID
        put $TempName            into  ErrorLine(#no_errs) EmployeeName
        put $EMonth              into  ErrorLine(#no_errs) Month
        put #SIN                 into  ErrorLine(#no_errs) SIN

end-if

move 'N' to $MiscEditError

put $ErrorMsg                   into  ErrorLine(#no_errs) ErrorMsg

add  1   to   #no_errs

end-procedure


begin-procedure  Print-Errors

do Initialize-Err-Rpt-Fields

new-page

get $Month from  MonthInfo (#NoMonth) MonthName

let #ErrYr  = &TX.Balance_Year

print $Ctx900_company_tot        (+1,1)
print $Comp                      (0,+2)
print $Ctx900_wage_loss_plan     (0,+10)
print $Wage_LP                   (0,+2)

print ''                         (+1,1)

print ''                         (+1,1)
print '***********************'  (+1,1)
print $Ctx900_pier_misc_edits    (+1,1)
print '***********************'  (+1,1)

move 0     to     #j

while #j < #no_errs

       get $Emplid                     from   ErrorLine(#j) EmplID
       get $EName                      from   ErrorLine(#j) EmployeeName
       get $EMonth                     from   ErrorLine(#j) Month
       get #SIN                        from   ErrorLine(#j) SIN
       get $Err_ErrorMsg               from   ErrorLine(#j) ErrorMsg

       let $EName = RTRIM($EName,'')

       if  ((rtrim($EmplID, ' ')  <> rtrim($priorEmplID, ' ')) and (rtrim($Emplid, ' ') <>'')) or
            (rtrim($EMonth, ' ') <> rtrim($PriorMonth, ' '))
              next-listing need=4
               print ''                             (+1,1)
               print $Ctx900_empl_id                (+1,1)
               print $Ctx900_empl_name              (0,+1)
               print $Ctx900_month                  (0,60)
               print $Ctx900_sin                    (0,75)
               print $EmplID                        (+1,1)
               print $EName                         (0,+10)
               print $EMonth                        (0,60)
               print #SIN                           (0,75) edit xxx-xxx-xxx
               move $EmplID  to $priorEmplID
               move $EMonth to $PriorMonth

       end-if

       next-listing need=4
       print ''                                     (+1,1)
       print $Ctx900_error_msg                      (+1,5)
       print $Err_ErrorMsg                          (+1,5)

       add 1 to #j

end-while

do Initialize-Error-Array

let $priorEmplID = ' '
let $PriorMonth  = ' '

end-procedure


begin-procedure Print-MTD-Totals

print ''         (+1,1)

if #NoMtdPrinted = 6
        do Process-New-Page
end-if

next-listing need=4

if $OneMonth = 'Y'
        get $Month from Monthinfo (#NoMonth) Monthname
else
        get $Month from Monthinfo (#MtdTotals-Mth) Monthname
end-if

print   $Month (+1,1)

display ''
display 'Printing Month Totals for'
display $Month
display #NoYear 9999

print   #cit-taxgrs-mtd-accum (+1,07)   edit 99,999,999,999.99
print   #t4a-txgrs-mtd-accum  (0,27)    edit 99,999,999,999.99
print   #cpp-earns-mtd-accum  (0,48)    edit    999,999,999.99
print   #ui-earns-mtd-accum   (0,68)    edit    999,999,999.99
print   #qit-txgrs-mtd-accum  (0,88)    edit    999,999,999.99
print   #rv2-txgrs-mtd-accum  (0,108)   edit    999,999,999.99
print   #qpp-earns-mtd-accum  (0,128)   edit    999,999,999.99
print   #true-t4-txgrs-mtd-accum (0,145)  edit 99,999,999,999.99

print   #cit-tax-mtd-accum    (+1,07)   edit 99,999,999,999.99
print   #t4a-tax-mtd-accum    (0,27)    edit 99,999,999,999.99
print   #cpp-contrib-mtd-accum (0,48)   edit    999,999,999.99
print   #ui-ee-premium-mtd-accum (0,68) edit    999,999,999.99
print   #qit-tax-mtd-accum    (0,88)    edit    999,999,999.99
print   #rv2-tax-mtd-accum    (0,108)   edit    999,999,999.99
print   #qpp-contrib-mtd-accum (0,128)  edit    999,999,999.99
print   #true-rv-txgrs-mtd-accum (0,145)  edit 99,999,999,999.99

add 1 to #NoMtdPrinted

end-procedure


begin-procedure Print-YTD-Totals

move '' to $TempCo
move '' to $TempWLP

let $TempCo = $Comp
let $TempWLP = $Wage_LP

if $AllMonth = 'Y'  ! user has requested all months up to including
                    ! the month entered

next-listing need=4

print ''                  (+1,1)
print $Ctx900_ytd_to      (+1,1)

get     $Month from  MonthInfo (#NoMonth) MonthName
print   $Month (+1,1)

display ''
display 'Printing YTD totals up to '
display $Month
display #NoYear 9999
display ' '
display 'Company :'
display $Comp
display 'Wage Loss Plan: '
display $Wage_LP

else
    if $YTDOnly = 'Y'  ! user has requested YTD totals only

      next-listing need=4

      display 'Printing YTD totals only '
      display #NoYear 9999
      display ' '
      display 'Company :'
      display $Comp
      display 'Wage Loss Plan: '
      display $Wage_LP

    end-if
end-if

print   #cit-taxgrs-ytd     (+1,07)    edit 99,999,999,999.99
print   #t4a-txgrs-ytd      (0,27)     edit 99,999,999,999.99
print   #cpp-earns-ytd      (0,48)     edit    999,999,999.99
print   #ui-earns-ytd       (0,68)     edit    999,999,999.99
print   #qit-txgrs-ytd      (0,88)     edit    999,999,999.99
print   #rv2-txgrs-ytd      (0,108)    edit    999,999,999.99
print   #qpp-earns-ytd      (0,128)    edit    999,999,999.99
print   #true-t4-txgrs-ytd  (0,145)    edit 99,999,999,999.99

print   #cit-tax-ytd        (+1,07)    edit 99,999,999,999.99
print   #t4a-tax-ytd        (0,27)     edit 99,999,999,999.99
print   #cpp-contrib-ytd    (0,48)     edit    999,999,999.99
print   #ui-ee-premium-ytd  (0,68)     edit    999,999,999.99
print   #qit-tax-ytd        (0,88)     edit    999,999,999.99
print   #rv2-tax-ytd        (0,108)    edit    999,999,999.99
print   #qpp-contrib-ytd    (0,128)    edit    999,999,999.99
print   #true-rv-txgrs-ytd  (0,145)    edit 99,999,999,999.99


end-procedure


begin-procedure Process-New-Page

new-page
do Print-Rpt-Heading
do Print-Rpt-Heading-Totals

end-procedure


begin-procedure Print-Rpt-Heading

print $Ctx900_company_tot                            (+1,1)
print $Company                                       (0,+2)
print $Ctx900_wage_loss_plan                         (0,+10)

if $AllMonth = 'Y' and $Get-MTDTotals = 'Y'
  print $AllMonth-Wage-LP                            (0,+2)
else
  print &CB.Wage_Loss_Plan                           (0,+2)
end-if


print ''                                             (+1,1)

if $OneMonth = 'Y'
        print $Ctx900_month_total      (+1,1)
else
    if $AllMonth = 'Y'
        print $Ctx900_ytd_totals_incl     (+1,1)
    else
        print $Ctx900_Ytd_totals_for      (+1,1)
    end-if
end-if

get     $Month from  MonthInfo (#NoMonth) MonthName

if $OneMonth = 'Y' or $AllMonth = 'Y'
    print   $Month                                 (0,+2)
end-if

print   $NoYear                                (0,+1)

end-procedure


begin-procedure Print-Rpt-Heading-Totals

print $Ctx900_cit        (+2,21)
print $Ctx900_t4a_txbl   (0,36)
print $Ctx900_cpp        (0,59)
print $Ctx900_ei         (0,80)
print $Ctx900_qit        (0,99)
print $Ctx900_releve_2   (0,118)
print $Ctx900_qpp        (0,139)
print $Ctx900_true_t4    (0,154)

print $Ctx900_earnings   (+1,16)
print $Ctx900_earnings   (0,36)
print $Ctx900_earnings   (0,54)
print $Ctx900_earnings   (0,74)
print $Ctx900_earnings   (0,94)
print $Ctx900_earnings   (0,114)
print $Ctx900_earnings   (0,134)
print $Ctx900_earnings   (0,153)

print ''             (+1,1)

print $Ctx900_cit        (+1,21)
print $Ctx900_t4a        (0,41)
print $Ctx900_cpp        (0,59)
print $Ctx900_ei         (0,80)
print $Ctx900_qit        (0,99)
print $Ctx900_releve_2   (0,118)
print $Ctx900_qpp        (0,139)
print $Ctx900_true_rv    (0,154)

print $Ctx900_tax        (+1,21)
print $Ctx900_tax        (0,41)
print $Ctx900_premiums   (0,54)
print $Ctx900_premiums   (0,74)
print $Ctx900_tax        (0,99)
print $Ctx900_tax        (0,119)
print $Ctx900_premiums   (0,134)
print $Ctx900_earnings   (0,153)

print ''          (+1,1)

end-procedure


begin-procedure Convert-Parameters

     move #RC_CAN_YE.Inquiry_Month to #NoMonth
     move #NoMonth to $NoMonth 09

     if  $RC_CAN_YE.Inquiry_Type   = 'M'
        let $OneMonth = 'Y'
     end-if

     if $RC_CAN_YE.Inquiry_Type  = 'Y'
        let $AllMonth = 'Y'
     end-if

      if $RC_CAN_YE.Inquiry_Type  = 'T'
        let $YTDOnly = 'Y'
     end-if

end-procedure


#Include 'curdttim.sqc'   !Get-Current-DateTime procedure
#Include 'datetime.sqc'   !Routines for date and time formatting
#Include 'number.sqc'     !Routines to format numbers
#Include 'rotname1.sqc'   !Rotate-Name procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'  !Select-Canadian-YrEnd-Parameters
#Include 'stdapi.sqc'    !Update Process API
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
