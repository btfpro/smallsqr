!***********************************************************************
!  TAX002MN:  Qtrly State Employee Wage List - MINNESOTA               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:54:34                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP00001       Release 8 Technical Merge Select Installation Table    *
!            ** Please note - This SQR has a cloned version for        *
!               Education and Government.  The SQR name is T002MNHP.   *
!               If you are making changes to this SQR, please check SQR*
!               T002MNHP to see if changes need to be made there too.  *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002a.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report

  do Process-Main

  if #Employees_On_Page > 0 and #Employees_On_Page < 17
    do Page-Complete
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  display 'Quarterly Employee Wage List - Minnesota'

  do Init-DateTime
  do Init-Number

  do Get-Tax-Reporting-Run-Controls
  move $PeriodEndDate to $AsOfDate  !for included procedures
  do Get-Calendar-Year-Id
  do Stdapi-Init

  if $prcs_process_instance = ''
    input $ReportDueDate  'Enter Report Due Date ({Prompt-Date})' type=char
    move '1' to $MMLZero
    do Format-DateTime($ReportDueDate, $out, {Prompt-Mask}, '', '')
    input $Phone  'Enter Employer''s Phone Number'
  else
    do Select-Parameters
    move $RC_QTR_UI.Report_Due_Date to $out
    move '0' to $Year4
    do Format-DateTime($out,$ReportDueDate, {DEFMDY}, '', '')
    move $RC_QTR_UI.Phone           to $Phone
  end-if

  do Initialize
end-procedure

begin-procedure Initialize
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'MN' to $State
#endif
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure

begin-heading 21
  do Format-Number(#PAGE_NUM, $out, '999')
  print $out                      (3,9)
  do Format-Number(#TotalPages, $out, '999')
  print $out                      (0,+2)
  if RTRIM(&Employer_ID_SUT, ' ') <> ''
    print &Employer_ID_SUT        (7,3)
  else
    print &Employer_ID_SWT        (7,3)
  end-if
  uppercase $CompanyName
  print $CompanyName              (12,3)
  move $Compnyadd1 to $CoAddress
  uppercase $CoAddress
  print $CoAddress                (+1,3)
  let $field = RTRIM($Compnycity, ' ')
  uppercase $field
  print $field                    (+1,3)
  print &CT.State                 ()      edit ,bxx
  move  &CT.Postal                 to $Zip
  move  &CT.Postal                 to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
      let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  print $Zip                       (0,+2)
  print &TX.Balance_Qtr                 (12,34)
  print &TX.Balance_Year         (,+3)
  print $ReportDueDate            (,+4)
  print $Phone                    (16,34)
  do Format-Number(#PageTotal, $out, '99999999.99')
  print $out                      (58,60)

end-heading

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  Show 'Calendar Year: ' $Calendar_Year_Id
  Show 'Balance  Year: ' &TX.Balance_Year
  Show 'Balance  Qtr:  ' &TX.Balance_Qtr
  Show 'Asofdate:      ' $Asofdate

begin-SELECT
C.COMPANY        () on-break print=never level=1 before=Company-Change
C.STATE
C.EMPLID         () on-break print=never level=2 after=EmplID-Change
C.TAX_CLASS
C.LOCALITY
C.TXGRS_QTD
C.NLGRS_QTD

D1.NATIONAL_ID   () on-break print=never level=2 save=$SSN
PN.NAME           () on-break print=never level=2
PN.LAST_NAME
PN.FIRST_NAME
PN.MIDDLE_NAME

  move &C.Company to $Company
  move &C.EmplID  to $EmplID
  let $LastName   = rtrim(&PN.LAST_NAME, ' ')
  let $FirstName  = rtrim(&PN.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&PN.MIDDLE_NAME,1,1)

  do Process-Tax-Balance

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME PN, PS_PERS_NID D1, PS_COMPANY_TBL A
WHERE D1.EMPLID           = C.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.EMPLID           = C.EMPLID
#ifdef TAXTEST
  AND C.STATE             = 'CA'
#else
  AND C.STATE             = 'MN'
#endif
  AND C.LOCALITY          = ' '
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND C1.BALANCE_ID     = C.BALANCE_ID
         AND C1.BALANCE_YEAR   = C.BALANCE_YEAR
         AND C1.BALANCE_QTR    = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD > 0
  AND A.COMPANY = C.COMPANY
  AND A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY C.COMPANY, D1.NATIONAL_ID, C.STATE, C.LOCALITY, C.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Tax-Balance
  do Format-Number(&C.NLGrs_QTD, $NLGrs_QTD, '99999999.99')
  add &C.NLGrs_QTD to #PageTotal
  move &C.EmplID to $EmplID

  move 'PS_RC_TAX810MN D'  to $TAX810X1
  move 'PS_RC_TAX810MN D1' to $TAX810X2
  move 'PS_RC_TAX810MN D2' to $TAX810X3
  move 'PS_RC_TAX810MN D3' to $TAX810X4

  do Get-Hours
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if
end-procedure

begin-procedure EmplID-Change
  move $SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM($SSN, ' ') = ''
    print ' '           (+2,4)
  else
    print $SSN          (+2,4) edit xxxxxxxxx
  end-if

  uppercase $LastName
  print $LastName           (0,20,12)
  uppercase $FirstName
  print $FirstName          (0,41,8)
  print $MidInitial         (0,55)

  print $NLGrs_QTD          (0,60)
  print $Hours              (0,75)

  move '' to $NLGrs_QTD
  move '' to $Hours

  do Get-Officer-Code
  print $Officer_Cd         (0,80)

  add 1 to #Employees_On_Page

  if #Employees_On_Page = 17
    do Page-Complete
  end-if
end-procedure

begin-procedure Get-Total
begin-SELECT

COUNT(*)          &EmplCount

FROM  PS_TAX_BALANCE TB, PS_COMPANY_TBL A2
WHERE TB.COMPANY       = &C.Company
#ifdef TAXTEST
  AND TB.STATE         = 'CA'
#else
  AND TB.STATE         = 'MN'
#endif
  AND TB.LOCALITY      = ' '
  AND TB.TAX_CLASS     = 'U'                 ! Unemployment
  AND TB.BALANCE_ID    = $Calendar_Year_Id
  AND TB.BALANCE_YEAR  = &TX.Balance_Year
  AND TB.BALANCE_QTR   = &TX.Balance_Qtr
  AND TB.NLGRS_QTD     > 0
  AND TB.BALANCE_PERIOD       =
      (SELECT MAX(C2.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C2
       WHERE  C2.EMPLID        = TB.EMPLID
         AND  C2.COMPANY       = TB.COMPANY
         AND C2.BALANCE_ID    = TB.BALANCE_ID
         AND C2.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND C2.BALANCE_QTR   = TB.BALANCE_QTR
         AND  C2.STATE         = TB.STATE
         AND  C2.LOCALITY      = TB.LOCALITY
         AND  C2.TAX_CLASS     = TB.TAX_CLASS)
  AND A2.COMPANY = TB.COMPANY
  AND A2.EFF_STATUS = 'A'
  AND A2.TAX_REPORT_TYPE = '2'
  AND A2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A2.COMPANY
         AND  EFFDT  <= $AsOfDate)
GROUP BY TB.COMPANY, TB.STATE
end-SELECT
  let #TotalPages = CEIL(&EmplCount/17)
end-procedure

begin-procedure Get-Officer-Code
  move ' ' to $Officer_Cd
begin-select
J.OFFICER_CD
  if &J.Officer_Cd <> 'N'
    move 'X' to $Officer_Cd
  end-if
 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID
  AND J.COMPANY  = $Company
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select
end-procedure

begin-procedure Page-Complete
  add 1 to #PAGE_NUM
  new-page
  move 0 to #PageTotal
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Company-Change
  if #Employees_On_Page < 17 and #Employees_On_Page > 0
    do Page-Complete
  end-if
  move 0 to #PAGE_NUM
  move &C.Company to $Company
  do Get-Company-Data
  do Get-State-Tax-Data             !Employer ID
  do Get-Total
end-procedure

begin-procedure Ignore
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'gethours.sqc'  !Get-Hours procedure
#Include 'datemath.sqc'  !Date math procedures

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get Run Controls for Process Scheduler
