!*******************************************
!  TAX012:  Ohio Local Tax Reconciliation  *
!*******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:06:13:37                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX012' to $ReportID
  move 'Ohio Local Tax Reconciliation' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize
  if $prcs_process_instance = ''
    do Prompt
  else
    do Select-Parameters
    do Process-Run-Control
  end-if

  create-array name=WorkTaxes size=100 -
    field=Locality:char field=Amount:number:9
end-procedure

begin-procedure Prompt
  input $RptYear  maxlen=4 'Enter Year  (1990,1991,etc)'
  move $RptYear to #RptYear
  do Get-Reporting-Period
  if $RptPeriod = 'Q'
    input $RptQtr   maxlen=1 'Enter Quarter (1,2,3 or 4)'
    evaluate $RptQtr
      when = '1'
        move '03' to $RptMonth
        move '1st Quarter' to $Period
      when = '2'
        move '06' to $RptMonth
        move '2nd Quarter' to $Period
      when = '3'
        move '09' to $RptMonth
        move '3rd Quarter' to $Period
      when = '4'
        move '12' to $RptMonth
        move '4th Quarter' to $Period
    end-evaluate
    move 'A1.BALANCE_QTR = ' to $SlctPeriod_A
    concat $RptQtr with $SlctPeriod_A
    move 'D1.BALANCE_QTR = ' to $SlctPeriod_D
    concat $RptQtr with $SlctPeriod_D
  else
    input $RptMonth maxlen=2 'Enter Month (1,2,etc)'
    evaluate $RptMonth
      when = '1'
        move '01' to $RptMonth
      when = '2'
        move '02' to $RptMonth
      when = '3'
        move '03' to $RptMonth
      when = '4'
        move '04' to $RptMonth
      when = '5'
        move '05' to $RptMonth
      when = '6'
        move '06' to $RptMonth
      when = '7'
        move '07' to $RptMonth
      when = '8'
        move '08' to $RptMonth
      when = '9'
        move '09' to $RptMonth
      when = '10'
        move '10' to $RptMonth
      when = '11'
        move '11' to $RptMonth
      when = '12'
        move '12' to $RptMonth
    end-evaluate
    evaluate $RptMonth
      when = '01'
        move 'January' to $Period
      when = '02'
        move 'February' to $Period
      when = '03'
        move 'March' to $Period
      when = '04'
        move 'April' to $Period
      when = '05'
        move 'May' to $Period
      when = '06'
        move 'June' to $Period
      when = '07'
        move 'July' to $Period
      when = '08'
        move 'August' to $Period
      when = '09'
        move 'September' to $Period
      when = '10'
        move 'October' to $Period
      when = '11'
        move 'November' to $Period
      when = '12'
        move 'December' to $Period
    end-evaluate
    move 'A1.BALANCE_PERIOD = ' to $SlctPeriod_A
    concat $RptMonth with $SlctPeriod_A
    move 'D1.BALANCE_PERIOD = ' to $SlctPeriod_D
    concat $RptMonth with $SlctPeriod_D
  end-if
  let $AsOfDate = $RptYear || $RptMonth || '01'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
end-procedure

begin-procedure Process-Run-Control
  move #RC_PAY.Balance_Year  to $RptYear 9999
  move $RptYear to #RptYear
  move #RC_PAY.Balance_Qtr         to $RptQtr 9
  if RTRIM($RptQtr,' ') <> '0'
    move 'Quarterly ' to $ReportTitlePeriod
    evaluate $RptQtr
      when = '1'
        move '03' to $RptMonth
        move '1st Quarter' to $Period
      when = '2'
        move '06' to $RptMonth
        move '2nd Quarter' to $Period
      when = '3'
        move '09' to $RptMonth
        move '3rd Quarter' to $Period
      when = '4'
        move '12' to $RptMonth
        move '4th Quarter' to $Period
    end-evaluate
    move 'A1.BALANCE_QTR = ' to $SlctPeriod_A
    concat $RptQtr with $SlctPeriod_A
    move 'D1.BALANCE_QTR = ' to $SlctPeriod_D
    concat $RptQtr with $SlctPeriod_D
  else
    move #RC_PAY.Balance_Period to #MonthCd
    move #MonthCd to $RptMonth 09
    move 'Monthly ' to $ReportTitlePeriod
    evaluate $RptMonth
      when = '1'
        move '01' to $RptMonth
      when = '2'
        move '02' to $RptMonth
      when = '3'
        move '03' to $RptMonth
      when = '4'
        move '04' to $RptMonth
      when = '5'
        move '05' to $RptMonth
      when = '6'
        move '06' to $RptMonth
      when = '7'
        move '07' to $RptMonth
      when = '8'
        move '08' to $RptMonth
      when = '9'
        move '09' to $RptMonth
      when = '10'
        move '10' to $RptMonth
      when = '11'
        move '11' to $RptMonth
      when = '12'
        move '12' to $RptMonth
    end-evaluate
    evaluate $RptMonth
      when = '01'
        move 'January' to $Period
      when = '02'
        move 'February' to $Period
      when = '03'
        move 'March' to $Period
      when = '04'
        move 'April' to $Period
      when = '05'
        move 'May' to $Period
      when = '06'
        move 'June' to $Period
      when = '07'
        move 'July' to $Period
      when = '08'
        move 'August' to $Period
      when = '09'
        move 'September' to $Period
      when = '10'
        move 'October' to $Period
      when = '11'
        move 'November' to $Period
      when = '12'
        move 'December' to $Period
    end-evaluate
    move 'A1.BALANCE_PERIOD = ' to $SlctPeriod_A
    concat $RptMonth with $SlctPeriod_A
    move 'D1.BALANCE_PERIOD = ' to $SlctPeriod_D
    concat $RptMonth with $SlctPeriod_D
  end-if
  let $AsOfDate = $RptYear || $RptMonth || '01'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  concat $ReportTitle with $ReportTitlePeriod
  move $ReportTitlePeriod to $ReportTitle
end-procedure

begin-heading 7
  #Include 'stdhdg02.sqc'
  print $Period                                             (+0,80)
  print $RptYear                                            (+0,92)
  print 'Code    Locality Name       '                      (+3,1)
  print ' <---------- RESIDENT ------------>'               ()
  print ' <--------- NON-RESIDENT --------->'               ()
  print ' <------------ TOTAL ------------->'               ()
  print ' <------- RESIDENT WORK TAX CREDIT ------->'       ()
  print 'Rate    Locality EIN        '                      (+1,1)
  print '  Count  Taxable Gross         Tax '               ()
  print '  Count  Taxable Gross         Tax '               ()
  print '  Count  Taxable Gross         Tax '               ()
  print '  Locality Name         Rate           Tax '       ()
end-heading

begin-procedure Report
begin-SELECT
A.COMPANY    () on-break print=never level=1 procedure=Company-Change
C.STATE
C.LOCALITY   () on-break print=never level=2 procedure=Local-Change
B.EMPLID
C.RESIDENT
C.TXGRS_CUR
C.TAX_CUR

  if &A.Company <> $priorCompany
    move &A.Company to $Company
    move &A.Company to $priorCompany
    do Get-Company-Data
  end-if
  let $State = rtrim(&C.State, ' ')
  move &C.Locality    to $Locality
                                       !only count employee once/loc
                                       !regardless of # of checks
  if &B.EmplID <> $PriorEmplID or &C.Locality <> $PriorLocality
    if &C.Resident = 'Y'
      add 1 to #ResCount
    else
      add 1 to #NResCount
    end-if
    move &B.EmplID   to $PriorEmplID
    move &C.Locality to $PriorLocality
  end-if

  if &C.Resident = 'Y'
    add &C.TxGrs_Cur to #ResTxGrs_Cur
    add &C.Tax_Cur   to #ResTax_Cur
  else
    add &C.TxGrs_Cur to #NResTxGrs_Cur
    add &C.Tax_Cur   to #NResTax_Cur
  end-if
  move 'Y' to $RecordSelected
FROM  PS_PAY_CALENDAR A, PS_PAY_CAL_BAL_ID A1, PS_PAY_CHECK B, PS_PAY_TAX C
WHERE A.COMPANY = A1.COMPANY AND A.PAYGROUP = A1.PAYGROUP
  AND A.PAY_END_DT = A1.PAY_END_DT AND A1.BALANCE_ID = $Calendar_Year_Id
  AND A1.BALANCE_YEAR       = #RptYear
  AND [$SlctPeriod_A]
  AND A.COMPANY             = B.COMPANY
  AND A.PAYGROUP            = B.PAYGROUP
  AND B.PAY_END_DT          = A.PAY_END_DT
  AND C.COMPANY             = A.COMPANY
  AND C.PAYGROUP            = B.PAYGROUP
  AND C.PAY_END_DT          = B.PAY_END_DT
  AND C.OFF_CYCLE           = B.OFF_CYCLE
  AND C.PAGE_NUM               = B.PAGE_NUM
  AND C.LINE_NUM               = B.LINE_NUM
  AND C.SEPCHK              = B.SEPCHK
  AND C.TAX_CLASS           = 'H'
  AND C.STATE               = 'OH'
  AND C.LOCALITY           <> ' '
ORDER BY A.COMPANY, C.STATE, C.LOCALITY, C.RESIDENT DESC, B.EMPLID
end-SELECT
  if $RecordSelected = 'Y'
    move 1 to #changeLevel
    move 'Y' to $End
    do Local-Change
  else
    display 'No records selected'
    print 'No records selected'       (+5,) center
  end-if
  do Reset
end-procedure

begin-procedure Company-Change
  move 2 to #changeLevel
  do Local-Change
  new-page
end-procedure

begin-procedure Local-Change
  if #current-line > 54  !ensure enough lines for the tax authority
    new-page
  end-if
  print $Locality            (+1,1)

  do Get-Local-Tax-Data
  print &A.Resident_Tax_Rt     (+1,1)   edit 0.99999
  position (-2)
  print $Localname           (+1,9)
  print &Employer_ID_LWT     (+1,9)
  move &A.Resident_Tax_Rt to #Resident_Tax_Rt
  position (-2)

  do Format-Number(#ResCount, $out, '999999')
  print $out           (+1,30)
  do Format-Number(#ResTxGrs_Cur, $out, 'b9,999,999.99mi')
  print $out           (0,37)
  do Format-Number(#ResTax_Cur, $out, 'b999,999.99mi')
  print $out           (0,52)
  do Format-Number(#NResCount, $out, '999999')
  print $out           (0,65)
  do Format-Number(#NResTxGrs_Cur, $out, 'b9,999,999.99mi')
  print $out           (0,72)
  do Format-Number(#NResTax_Cur, $out, 'b999,999.99mi')
  print $out           (0,87)

  add #ResCount      to #TotalCount
  add #ResTxGrs_Cur  to #TotalGrs
  add #ResTax_Cur    to #TotalTax
  add #NResCount     to #TotalCount
  add #NResTxGrs_Cur to #TotalGrs
  add #NResTax_Cur   to #TotalTax

  do Format-Number(#TotalCount, $out, '999999')
  print $out           (0,100)
  do Format-Number(#TotalGrs, $out, 'b9,999,999.99mi')
  print $out           (0,107)
  do Format-Number(#TotalTax, $out, 'b999,999.99mi')
  print $out           (0,122)

  do Get-Work-Taxes-Paid
  if #NumWorkLocs > 0
    position (+1)
  else
    position (+2)
  end-if
  print 'Summary:'            (0,17)
  print '  Taxable Gross -> ' ()
  do Format-Number(#TotalGrs, $out, 'b9,999,999.99mi')
  print $out          ()
  print '  Calc''d Tax -> '   ()
  move #TotalGrs to #CalcTax
  multiply #Resident_Tax_Rt times #CalcTax
  do Format-Number(#CalcTax, $out, 'b,999,999.99mi')
  print $out          ()
  print '  Actual Tax -> '    ()
  do Format-Number(#TotalTax, $out, 'b,999,999.99mi')
  print $out          ()
  print '  Credits -> '       ()
  do Format-Number(#TotalWorkTax, $out, 'b,999,999.99mi')
  print $out          ()
  add #TotalWorkTax to #TotalTax
  print 'Actual + Credit -> ' ()
  do Format-Number(#TotalTax, $out, 'b,999,999.99mi')
  print $out          ()
  position (+2)

  move 0 to #ResCount
  move 0 to #NResCount
  move 0 to #ResTxGrs_Cur
  move 0 to #NResTxGrs_Cur
  move 0 to #ResTax_Cur
  move 0 to #NResTax_Cur
  move 0 to #TotalCount
  move 0 to #TotalGrs
  move 0 to #TotalTax
  move 0 to #TotalWorkTax
  move 0 to #NumWorkLocs
end-procedure

begin-procedure Get-Work-Taxes-Paid
begin-SELECT
F.LOCALITY
#ifdef DB2ALL
DECIMAL(SUM(F.TAX_CUR),15,3) &SumWorkTax
#else
SUM(F.TAX_CUR) &SumWorkTax
#endif
  move &SumWorkTax to #Tax_Credit
  move &F.Locality to $Locality
  do Get-Local-Tax-Data
  print $Localname         (0,136)
  if &A.NonResident_Tax_Rt > #Resident_Tax_Rt   ! Work tax higher
    move #Resident_Tax_Rt to #Credit_Rt
    move &SumWorkTax to #Tax_Credit
    divide &A.NonResident_Tax_Rt into #Tax_Credit
    multiply #Credit_Rt times #Tax_Credit
    move '*' to $Note
  else
    move &A.NonResident_Tax_Rt to #Credit_Rt
    move ''  to $Note
  end-if
  do Format-Number(#Credit_Rt, $out, '0.99999')
  print $out           (0,157)
  print $Note                  ()
  do Format-Number(#Tax_Credit, $out, 'b999,999.99mi')
  print $out           (0,165)
  POSITION (+1)
  add #Tax_Credit to #TotalWorkTax
  add 1 to #NumWorkLocs
FROM  PS_PAY_CALENDAR D, PS_PAY_CAL_BAL_ID D1, PS_PAY_TAX E, PS_PAY_TAX F
WHERE D.COMPANY = D1.COMPANY AND D.PAYGROUP = D1.PAYGROUP
  AND D.PAY_END_DT = D1.PAY_END_DT AND D1.BALANCE_ID = $Calendar_Year_Id
  AND D1.BALANCE_YEAR = #RptYear
  AND [$SlctPeriod_D]
  AND D.COMPANY    = $Company
  AND D.COMPANY    = E.COMPANY
  AND D.PAYGROUP   = E.PAYGROUP
  AND D.PAY_END_DT = E.PAY_END_DT
  AND E.COMPANY    = F.COMPANY
  AND E.PAYGROUP   = F.PAYGROUP
  AND E.PAY_END_DT = F.PAY_END_DT
  AND E.OFF_CYCLE  = F.OFF_CYCLE
  AND E.PAGE_NUM      = F.PAGE_NUM
  AND E.LINE_NUM      = F.LINE_NUM
  AND E.SEPCHK     = F.SEPCHK
  AND E.STATE      = 'OH'
  AND E.STATE      = F.STATE
  AND E.TAX_CLASS  = F.TAX_CLASS
  AND E.LOCALITY   = $Locality
  AND E.RESIDENT   = 'Y'
  AND F.RESIDENT   = ' '
  AND F.LOCALITY  <> $Locality
  AND F.LOCALITY  <> ' '
  AND NOT EXISTS
      (SELECT 'x'
         FROM PS_LOCTX_RECIP_TBL L
        WHERE L.STATE_RESIDENCE     = 'OH'
          AND L.LOCALITY_RESIDENCE  = E.LOCALITY
          AND L.RECIPROCITY_RULE    = 'B')
GROUP BY F.LOCALITY
ORDER BY F.LOCALITY
end-SELECT
end-procedure

!******************************************************
!  RESET.SQC: Reset printer, print 'End of Report'    *
!         Note: Uncomment ENCODE statement to force   *
!               a printer reset at end of report      *
!******************************************************

begin-procedure Reset
  move 'Y' to $End_of_Report
end-procedure

begin-footing 1
  print '* Work tax rate higher than residence; ' (1,1)
  print 'Credit based on residence rate'          ()
  if $End_of_Report = 'Y'
    print 'End of Report' (+0,1) center
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if
end-footing

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'stdinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
