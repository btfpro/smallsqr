!***********************************************************************
!  CTX912R:    PRINT RL-1 Magnetic Media XML Audit Report              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2012/12/24:12:42:01                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885414                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#define TAXFORM_BOX
#include 'rellang.sqc'

begin-heading 5
  #Include 'stdhdgtr.sqc'
  print $TaxYear   (3,,)      center
end-heading

begin-report

  do Init-Report

  do Process-Main

  close 10

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report

begin-procedure Init-Report

  do Init-DateTime
  #ifdef PRCSSCHD
    do StdAPI-Init
  #endif

 do Initialization

end-procedure

begin-procedure Initialization

  #define ColR 120

  move 'N' to $FileAtEnd

  do Get-Current-DateTime

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfToday, $AsOfDateYMD, {DEFYMD},'','')
  move $AsOfDateYMD to $AsOfYear xxxx

  move $AsOfYear  to #AsOfYear
  subtract 1 from #AsOfYear

  do Get-Can-Tax-Processing-Params

  move &TX.Balance_Year to #TaxYear
  move #TaxYear to $TaxYear 9999

  let $AsOfDate = $TaxYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP},'','native')

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer

    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Open-Files

  do Array-Create
  do Load-Box-Arrays

  move 'CTX912R' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Ctx912r_Title_rv1_audit to $ReportTitle
  display 'PRINTING RL-1 MAGNETIC MEDIA XML AUDIT REPORT'

  do Initialize-Transmitter
  do Initialize-Detail
  do Initialize-Totals

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from CTX912R  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('CTX912R', 'TITLE_RV1_AUDIT' , $Ctx912r_Title_rv1_audit , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_REC'       , $Ctx912r_Trans_rec       , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TAXATION_YEAR'   , $Ctx912r_Taxation_year   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_NAME'      , $Ctx912r_Trans_name      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_ADDR1'     , $Ctx912r_Trans_addr1     , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_ADDR2'     , $Ctx912r_Trans_addr2     , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_CITY'      , $Ctx912r_Trans_city      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_PROV'      , $Ctx912r_Trans_prov      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_NUMBER'    , $Ctx912r_Trans_number    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_POST_CODE' , $Ctx912r_Trans_post_code , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TECH_RES_NAME'   , $Ctx912r_Tech_res_name   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TECH_RES_AREA'   , $Ctx912r_Tech_res_area   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TECH_RES_PHNE'   , $Ctx912r_Tech_res_phne   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TECH_RES_EXT'    , $Ctx912r_Tech_res_ext    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TECH_RES_LANG'   , $Ctx912r_Tech_res_lang   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ACCT_RES_NAME'   , $Ctx912r_Acct_res_name   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ACCT_RES_AREA'   , $Ctx912r_Acct_res_area   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ACCT_RES_PHNE'   , $Ctx912r_Acct_res_phne   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ACCT_RES_EXT'    , $Ctx912r_Acct_res_ext    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ACCT_RES_LANG'   , $Ctx912r_Acct_res_lang   , #dummy_width)
   do Get_Field_Information ('CTX912R', 'PACK_TYPE'       , $Ctx912r_Pack_type       , #dummy_width)
   do Get_Field_Information ('CTX912R', 'PACK_TYPE1'      , $Ctx912r_Pack_type1      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TRANS_TYPE'      , $Ctx912r_Trans_type      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'RELEVE_SOURCE1'  , $Ctx912r_Releve_source1  , #dummy_width)
   do Get_Field_Information ('CTX912R', 'RELEVE_SOURCE2'  , $Ctx912r_Releve_source2  , #dummy_width)
   do Get_Field_Information ('CTX912R', 'SIN'             , $Ctx912r_Sin             , #dummy_width)
   do Get_Field_Information ('CTX912R', 'EMPLID'          , $Ctx912r_Emplid          , #dummy_width)
   do Get_Field_Information ('CTX912R', 'RV1_BOX_DATA'    , $Ctx912r_Rv1_box_data    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'SUMM_MSG'        , $Ctx912r_Summ_msg        , #dummy_width)
   do Get_Field_Information ('CTX912R', 'SUMM_REC'        , $Ctx912r_Summ_rec        , #dummy_width)
   do Get_Field_Information ('CTX912R', 'REPORTING_ID'    , $Ctx912r_Reporting_id    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'EMPLER_NAME'     , $Ctx912r_Empler_name     , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ADDRESS'         , $Ctx912r_Address         , #dummy_width)
   do Get_Field_Information ('CTX912R', 'ADDRESS2'        , $Ctx912r_Address2        , #dummy_width)
   do Get_Field_Information ('CTX912R', 'CITY'            , $Ctx912r_City            , #dummy_width)
   do Get_Field_Information ('CTX912R', 'PROVINCE'        , $Ctx912r_Province        , #dummy_width)
   do Get_Field_Information ('CTX912R', 'POSTAL_CODE'     , $Ctx912r_Postal_code     , #dummy_width)
   do Get_Field_Information ('CTX912R', 'NEQ'             , $Ctx912r_NEQ             , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TAX_YEAR'        , $Ctx912r_Tax_year        , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TOTAL_RV1_RECS'  , $Ctx912r_Total_rv1_recs  , #dummy_width)
   do Get_Field_Information ('CTX912R', 'SLIP_NO'         , $Ctx912r_Slip_No         , #dummy_width)
   do Get_Field_Information ('CTX912R', 'LAST_TRANS_SLIP#' , $Ctx912r_LastTrans_SlipNo , #dummy_width)
   do Get_Field_Information ('CTX912R', 'TYPE_OF_DATA'    , $Ctx912r_TypeOfData      , #dummy_width)
   do Get_Field_Information ('CTX912R', 'APPROVAL_NUM'    , $Ctx912r_Approval_Num    , #dummy_width)
   do Get_Field_Information ('CTX912R', 'DED_FORCE'       , $Ctx912r_Ded_Force       , #dummy_width)

end-procedure

begin-procedure Open-Files

#ifdef MPE
    open 'CTXRM.DAT' as 10 for-reading record=200
#else
    open '{IMPORTPREFIX}CTXRM{IMPORTSUFFIX}' as 10 for-reading record=200
#endif

end-procedure

begin-procedure Array-Create

  create-array name=PrR1_Area size=200 -
    field=PR1_Box:char                 -
    field=PR1_Descr:char

  create-array name=OI-Array  size=60 -
    field=OIBox:char                  -  
    field=OIAmt:char             

end-procedure

begin-procedure Load-Box-Arrays

    move 0 to #i

begin-SELECT
M.TAXFORM_ID
M.BOX
M.DESCR
M.EFFDT

   let $M.BOX = RTRIM(&M.BOX, ' ')
   let $TAXFORM_BOX-DESCR = &M.DESCR

   do Get_Related_TAXFORM_BOX(&M.BOX,&M.EFFDT,&M.TAXFORM_ID)

   put $M.Box $TAXFORM_BOX-DESCR into PrR1_Area(#i)
         PR1_Box PR1_Descr
       add 1 to #i
       move #i to #max_R1boxes


FROM PS_TAXFORM_BOX M
WHERE TAXFORM_ID = 'R' AND
      EFFDT = (SELECT MAX(EFFDT)
               FROM PS_TAXFORM_BOX
               WHERE TAXFORM_ID = 'R'
                 AND EFFDT <= $AsOfDate)
ORDER BY M.BOX ASC
end-SELECT

end-procedure


begin-procedure Process-Main

  let $Transmitter_rec = 'N'
  let $Detail_rec      = 'N'

  while 1 = 1

   if $FileAtEnd = 'Y'
       break
    else
      do Read-File
      if $FileAtEnd = 'Y'
        break
      else
        let $RV1Data_Full_Rec = ltrim($RV1Data, ' ')
        let $RV1Data_Full_Rec = rtrim($RV1Data, ' ')

        evaluate $RV1Data_Full_Rec
        when = '<P>'
          let $TypeOfData = 'P'
          let $Transmitter_rec = 'Y'
          break
        when = '<A>'
          let $Detail_rec = 'Y'
          let $TypeOfData = 'A'
          break
        when = '<R>'
          let $Detail_rec = 'Y'
          let $TypeOfData = 'R'
          break
        when = '<D>'
          let $Detail_rec = 'Y'
          let $TypeOfData = 'D'
          break
        when-other
          break
        end-evaluate

        do Process-RL1-XML-Records

      end-if
   end-if
  end-while

end-procedure


begin-procedure Read-File

  read 10 into $RV1Data:200

    if #end-file = 1
      move 'Y' to $FileAtEnd
    end-if

end-procedure


begin-procedure Process-RL1-XML-Records

  do Parse-XML
  if rtrim($Element, ' ') <> ''
    if $Transmitter_rec = 'Y'
      do Extract-Transmitter-Data
    else
      if $Detail_rec = 'Y'
        do Extract-EE-Detail-Data
      else
        do Extract-Totals-Data
      end-if
    end-if
  end-if

  evaluate $RV1Data_Full_Rec
  when = '</P>'
    do Print-Transmittal-Record
    do Initialize-Transmitter
    let $Transmitter_rec = 'N'
    let $Group_Tag =  ' '
    new-page
    break
  when = '</R>'
  when = '</A>'
    do Print-Detail
    do Initialize-Detail
    let $Detail_rec = 'N'
    let $Group_Tag  = ' '
    break
  when = '</D>'
    do Print-Detail-Cancelled
    do Initialize-Detail
    let $Detail_rec = 'N'
    let $Group_Tag  = ' '
    break
  when = '</T>'
    new-page
    do Print-Summary
    new-page
    do Initialize-Totals
    break
  when-other
    break
  end-evaluate

end-procedure


begin-procedure Parse-XML

  let #RecLength           = 0
  let #BeginTagPosition    = 0
  let #EndTagPosition      = 0
  let #TagLength           = 0
  let #TagSlashPosition    = 0
  let $Tag                 = ' '
  let $Element_Tag         = ' '
  let $Element             = ' '

  let #RecLength = length($RV1Data_Full_Rec)

  while  instr ($RV1Data_Full_Rec , '<', 1) <> 0
    let #BeginTagPosition  = instr ($RV1Data_Full_Rec , '<', 1)

    while instr($RV1Data_Full_Rec , '>', 1)   <> 0
      let #EndTagPosition = instr($RV1Data_Full_Rec , '>', 1)

      if #RecLength =  #EndTagPosition        !No element found!
        let $Group_Tag = rtrim($RV1Data_Full_Rec , ' ')
        break
      else
        let #TagLength = (#EndTagPosition - #BeginTagPosition) + 1
        let $Tag = substr($RV1Data_Full_Rec , #BeginTagPosition, #TagLength)
        let #TagSlashPosition = instr($Tag, '/', 1)

        if #TagSlashPosition <> 2
          let $Element_Tag = $Tag
        end-if

        let $RV1Data_Full_Rec = ltrim (replace($RV1Data_Full_Rec , $Tag, ' '),' ')

        if instr($RV1Data_Full_Rec , '<',1) = 0
          let $Element = $RV1Data_Full_Rec    !Element left after tags removed!
        end-if
        break

      end-if

    end-while

    if #RecLength =  #EndTagPosition          !No element found!
      break
    end-if

  end-while

  let $Element = replace($Element, '&amp;'  , '&')
  let $Element = replace($Element, '&lt;'   , '<')
  let $Element = replace($Element, '&quot;' , '"')
  let $Element = replace($Element, '&gt; '  , '>')
  let $Element = replace($Element, '&apos;' , '''')

end-procedure


begin-procedure Extract-Transmitter-Data

  let $Element_Tag = replace($Element_Tag, '<', ' ')
  let $Element_Tag = replace($Element_Tag, '>', ' ')
  let $Element_Tag = ltrim($Element_Tag, ' ')
  let $Element_Tag = rtrim($Element_Tag, ' ')

  evaluate $Element_Tag
    when = 'Annee'
      let $TaxYear                     = $Element
      break
    when = 'TypeEnvoi'
      let $PackageType                 = $Element
      break
    when = 'Provenance'
      let $ReleveSource                = $Element
      break
    when = 'No'
      let $TransmitterNumber           = $Element
      break
    when = 'Type'
      let $TransmitterType             = $Element
      break
    when = 'Nom1'
      let $TransmitterNameLine1        = $Element
      break
    when = 'Ligne1'
      let $TransmitterAddrLine1        = $Element
      break
    when = 'Ligne2'
      let $TransmitterAddrLine2        = $Element
      break
    when = 'Ville'
      let $TransmitterCity             = $Element
      break
    when = 'Province'
      let $TransmitterProvince         = $Element
      break
    when = 'CodePostal'
      let $TransmitterPostalCode       = $Element
      break
    when = 'Nom'
      if $Group_Tag = '<Informatique>'
        let $TechResourceName          = $Element
      else
        if $Group_Tag = '<Comptabilite>'
          let $AcctingResourceName     = $Element
        end-if
      end-if
      break
    when = 'IndRegional'
      if $Group_Tag = '<Informatique>'
        let $TechResourceAreaCode      = $Element
      else
        if $Group_Tag = '<Comptabilite>'
          let $AcctingResourceAreaCode = $Element
        end-if
      end-if
      break
    when = 'Tel'
      if $Group_Tag = '<Informatique>'
        let $TechResourcePhone         = $Element
      else
        if $Group_Tag = '<Comptabilite>'
          let $AcctingResourcePhone    = $Element
        end-if
      end-if
      break
    when = 'PosteTel'
      if $Group_Tag = '<Informatique>'
        let $TechResourceExtNo         = $Element
      else
        if $Group_Tag = '<Comptabilite>'
          let $AcctingResourceExtNo    = $Element
        end-if
      end-if
      break
    when = 'Langue'
      if $Group_Tag = '<Informatique>'
        let $TechResourceLanguage      = $Element
      else
        if $Group_Tag = '<Comptabilite>'
          let $AcctingResourceLanguage = $Element
        end-if
      end-if
      break
    when = 'NoCertification'
      let $RL1ApprovalNum              = $Element
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Initialize-Transmitter

  let $TaxYear                     =  ' '
  let $PackageType                 =  ' '
  let $ReleveSource                =  ' '
  let $TransmitterNumber           =  ' '
  let $TransmitterType             =  ' '
  let $TransmitterNameLine1        =  ' '
  let $TransmitterAddrLine1        =  ' '
  let $TransmitterAddrLine2        =  ' '
  let $TransmitterCity             =  ' '
  let $TransmitterProvince         =  ' '
  let $TransmitterPostalCode       =  ' '
  let $TechResourceName            =  ' '
  let $AcctingResourceName         =  ' '
  let $TechResourceAreaCode        =  ' '
  let $AcctingResourceAreaCode     =  ' '
  let $TechResourcePhone           =  ' '
  let $AcctingResourcePhone        =  ' '
  let $TechResourceExtNo           =  ' '
  let $AcctingResourceExtNo        =  ' '
  let $TechResourceLanguage        =  ' '
  let $AcctingResourceLanguage     =  ' '
  let $RL1ApprovalNum              =  ' '

end-procedure


begin-procedure Extract-EE-Detail-Data

  let $Element_Tag = replace($Element_Tag, '<', ' ')
  let $Element_Tag = replace($Element_Tag, '>', ' ')
  let $Element_Tag = ltrim($Element_Tag, ' ')
  let $Element_Tag = rtrim($Element_Tag, ' ')

  evaluate $Element_Tag
    when = 'Annee'
      let $TaxYear                     = $Element
      break
    when = 'NoReleve'
      let $ReleveSlipNo                = $Element
      break
    when = 'NAS'
      let $E_SIN                       = $Element
      break
    when = 'No'
      let $EmplID                      = $Element
      break
    when = 'NomFamille'
      let $E_LastName                  = $Element
      break
    when = 'Prenom'
      let $E_FirstName                 = $Element
      break
    when = 'Initiale'
      let $E_Initial                   = $Element
      break
    when = 'Ligne1'
      let $E_AddrLine1                 = $Element
      break
    when = 'Ligne2'
      let $E_AddrLine2                 = $Element
      break
    when = 'Ville'
      let $E_City                      = $Element
      break
    when = 'Province'
      let $E_Province                  = $Element
      break
    when = 'CodePostal'
      let $E_PostalCode                = $Element
      break
    when = 'A_RevenuEmploi'
      let $BoxA                        = $Element
      break
    when = 'B_CotisationRRQ'
      let $BoxB                        = $Element
      break
    when = 'C_CotisationAssEmploi'
      let $BoxC                        = $Element
      break
    when = 'D_CotisationRPA'
      let $BoxD                        = $Element
      break
    when = 'E_ImpotQue'
      let $BoxE                        = $Element
      break
    when = 'F_CotisationSyndicale'
      let $BoxF                        = $Element
      break
    when = 'G_SalaireAdmisRRQ'
      let $BoxG                        = $Element
      break
    when = 'H_CotisationRQAP'
      let $BoxH                        = $Element
      break
    when = 'I_SalaireAdmisRQAP'
      let $BoxI                        = $Element
      break
    when = 'J_RegimeAssMaladie'
      let $BoxJ                        = $Element
      break
    when = 'K_Voyage'
      let $BoxK                        = $Element
      break
    when = 'L_AutreAvantage'
      let $BoxL                        = $Element
      break
    when = 'M_Commission'
      let $BoxM                        = $Element
      break
    when = 'N_DonBienfaisance'
      let $BoxN                        = $Element
      break
    when = 'MontantCaseO'
      let $BoxO                        = $Element
      break
    when = 'SourceCaseO'
      let $BoxCode                     = $Element
      break
    when = 'P_RegimeAssInterEntr'
      let $BoxP                        = $Element
      break
    when = 'Q_SalaireDiffere'
      let $BoxQ                        = $Element
      break
    when = 'R_RevenuIndien'
      let $BoxR                        = $Element
      break
    when = 'S_PourboireRecu'
      let $BoxS                        = $Element
      break
    when = 'T_PourboireAttribue'
      let $BoxT                        = $Element
      break
    when = 'U_RetraiteProgressive'
      let $BoxU                        = $Element
      break
    when = 'V_NourritureLogement'
      let $BoxV                        = $Element
      break
    when = 'W_Vehicule'
      let $BoxW                        = $Element
      break
    when = 'CodeRensCompl'
      let $OtherInfoBox                = $Element
      do Save-OI-Box
      break
    when = 'DonneeRensCompl'
      let $OtherInfoAmt                = $Element
      do Save-OI-Amt      
      break
    when = 'CotisationRPC'
      let $BoxB01                      = $Element
      break
    when = 'DeductionForce'
      let $DeductionForce              = $Element
      break
    when = 'NoReleveDerniereTrans'
      let $LastTransSlipNo             = $Element
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Save-OI-Box

  if rtrim ($OtherInfoBox, ' ') <> ''

    put $OtherInfoBox into OI-Array(#OI_Box_Idx) OIBox

    add 1 to #OI_Box_Idx

  end-if

end-procedure


begin-procedure Save-OI-Amt

  if rtrim ($OtherInfoAmt, ' ') <> ''

    put $OtherInfoAmt into OI-Array(#OI_Amt_Idx) OIAmt

    add 1 to #OI_Amt_Idx

  end-if

end-procedure


begin-procedure Initialize-Detail

  let $TaxYear        = ' '
  let $ReleveSlipNo   = ' '
  let $E_SIN          = ' '
  let $EmplID         = ' '
  let $E_LastName     = ' '
  let $E_FirstName    = ' '
  let $E_Initial      = ' '
  let $E_AddrLine1    = ' '
  let $E_AddrLine2    = ' '
  let $E_City         = ' '
  let $E_Province     = ' '
  let $E_PostalCode   = ' '
  let $BoxA           = ' '
  let $BoxB           = ' '
  let $BoxC           = ' '
  let $BoxD           = ' '
  let $BoxE           = ' '
  let $BoxF           = ' '
  let $BoxG           = ' '
  let $BoxH           = ' '
  let $BoxI           = ' '
  let $BoxJ           = ' '
  let $BoxK           = ' '
  let $BoxL           = ' '
  let $BoxM           = ' '
  let $BoxN           = ' '
  let $BoxO           = ' '
  let $BoxCode        = ' '
  let $BoxP           = ' '
  let $BoxQ           = ' '
  let $BoxR           = ' '
  let $BoxS           = ' '
  let $BoxT           = ' '
  let $BoxU           = ' '
  let $BoxV           = ' '
  let $BoxW           = ' '
  let $BoxB01         = ' '
  let $LastTransSlipNo = ' '

  move 0 to #OI_Box_Idx
  move 0 to #OI_Amt_Idx
  move 0 to #oi
  let $space = ''

  while #oi < 4

    put $space $space into OI-Array(#oi) OIBox OIAmt
    add 1 to #oi

  end-while

end-procedure


begin-procedure Extract-Totals-Data

  let $Element_Tag = replace($Element_Tag, '<', ' ')
  let $Element_Tag = replace($Element_Tag, '>', ' ')
  let $Element_Tag = ltrim($Element_Tag, ' ')
  let $Element_Tag = rtrim($Element_Tag, ' ')

  evaluate $Element_Tag
    when = 'Annee'
      let $TaxYear                     = $Element
      break
    when = 'NbReleves'
      let $RV1Count                    = $Element
      break
    when = 'NoId'
      let $ReportingId                 = $Element
      break
    when = 'TypeDossier'
      let $ReportingId                 = rtrim($ReportingId, ' ') || $Element
      break
    when = 'NoDossier'
      let $ReportingId                 = rtrim($ReportingId, ' ') || $Element
      break
    when = 'NEQ'
      let $NEQ                         = $Element
      break
    when = 'Nom1'
      let $CompanyName                 = $Element
      break
    when = 'Ligne1'
      let $C_Street1                   = $Element
      break
    when = 'Ligne2'
      let $C_Street2                   = $Element
      break
    when = 'Ville'
      let $C_City                      = $Element
      break
    when = 'Province'
      let $C_Province                  = $Element
      break
    when = 'CodePostal'
      let $C_PostalCode                = $Element
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Initialize-Totals

  let $TaxYear           = ' '
  let $RV1Count          = ' '
  let $ReportingId       = ' '
  let $NEQ               = ' '
  let $CompanyName       = ' '
  let $C_Street1         = ' '
  let $C_Street2         = ' '
  let $C_City            = ' '
  let $C_Province        = ' '
  let $C_PostalCode      = ' '

end-procedure


begin-procedure Print-Transmittal-Record

   print $Ctx912r_Trans_rec              (+2,3)
   print $Ctx912r_Trans_number           (+2,3)
   print $TransmitterNumber              (0,60)
   print $Ctx912r_Taxation_year          (+2,3)
   print $TaxYear                        (0,60)
   print $Ctx912r_Trans_name             (+2,3)
   print $TransmitterNameLine1           (0,60)
   print $Ctx912r_Trans_addr1            (+1,3)
   print $TransmitterAddrLine1           (0,60)
   print $Ctx912r_Trans_addr2            (+1,3)
   print $TransmitterAddrLine2           (0,60)
   print $Ctx912r_Trans_city             (+1,3)
   print $TransmitterCity                (0,60)
   print $Ctx912r_Trans_prov             (+1,3)
   print $TransmitterProvince            (0,60)
   print $Ctx912r_Trans_post_code        (+1,3)
   print $TransmitterPostalCode          (0,60)
   print $Ctx912r_Tech_res_name          (+2,3)
   print $TechResourceName               (0,60)
   print $Ctx912r_Tech_res_area          (+1,3)
   print $TechResourceAreaCode           (0,60)
   print $Ctx912r_Tech_res_phne          (+1,3)
   print $TechResourcePhone              (0,60)
   print $Ctx912r_Tech_res_ext           (+1,3)
   if rtrim($TechResourceExtNo, ' ') <> ''
     print $TechResourceExtNo            (0,60)
   end-if
   print $Ctx912r_Tech_res_lang          (+1,3)
   print $TechResourceLanguage           (0,60)
   print $Ctx912r_Acct_res_name          (+2,3)
   print $AcctingResourceName            (0,60)
   print $Ctx912r_Acct_res_area          (+1,3)
   print $AcctingResourceAreaCode        (0,60)
   print $Ctx912r_Acct_res_phne          (+1,3)
   print $AcctingResourcePhone           (0,60)
   print $Ctx912r_Acct_res_ext           (+1,3)
   if rtrim($AcctingResourceExtNo, ' ') <> ''
     print $AcctingResourceExtNo         (0,60)
   end-if
   print $Ctx912r_Acct_res_lang          (+1,3)
   print $AcctingResourceLanguage        (0,60)

   if rtrim($RL1ApprovalNum, ' ') <> ''
     print $Ctx912r_Approval_Num         (+2,3)
     print $RL1ApprovalNum               (0,60)
   end-if

   print $Ctx912r_Pack_type              (+2,3)
   print $Ctx912r_Pack_type1             (0,+1)

   print $PackageType                    (0,+1)
   print $Ctx912r_Trans_type             (+1,3)
   print $TransmitterType                (0,80)
   print $Ctx912r_Releve_source1         (+1,3)
   print $Ctx912r_Releve_source2         ()
   print $ReleveSource                   (0,+2)



end-procedure

begin-procedure Print-Detail

  next-listing need=7

  let $Surname = RTRIM($E_LastName, ' ')
  print $Surname (+3,3)
  print ',' (0,0)
  let $FirstName = RTRIM($E_FirstName, ' ')
  print $FirstName (0,+1)
  print $E_Initial (0,+1)
  print $Ctx912r_Sin    (0,40)
  print $E_SIN (0,46) edit xxx-xxx-xxx
  print $Ctx912r_Emplid (0,61)
  print $EmplID (0,70)

  print $Ctx912r_Slip_No (0,85)
  print $ReleveSlipNo (0,101)

  print $Ctx912r_TypeOfData (0,122)
  print $TypeOfData (0,137)

  if $TypeOfData = 'A'
    print $Ctx912r_LastTrans_SlipNo (+1,122)
    print $LastTransSlipNo      (0,151)
  end-if

  add 1 to #RV1PrintCount

  move 'Y' to $PrintAmount

  do Get-Box-Descr

  print $Ctx912r_Rv1_box_data   (+2,1)
  print ' '                     (+1,1)
  let #BoxAmt = $BoxA
  add 1 to #BoxCount
  let $Message = $MsgA
  add #BoxAmt to #AccumEmplIncome
  do Print-Box

  let #BoxAmt = $BoxB
  add 1 to #BoxCount
  let $Message = $MsgB
  add #BoxAmt to #AccumQPPContrib
  do Print-Box

  let #BoxAmt = $BoxC
  add 1 to #BoxCount
  let $Message = $MsgC
  add #BoxAmt to #AccumUIPrem
  do Print-Box

  let #BoxAmt = $BoxD
  add 1 to #BoxCount
  let $Message = $MsgD
  add #BoxAmt to #AccumRRPContrib
  do Print-Box

  let #BoxAmt = $BoxE
  add 1 to #BoxCount
  let $Message = $MsgE
  add #BoxAmt to #AccumQITWheldSource
  do Print-Box

  let #BoxAmt = $BoxF
  add 1 to #BoxCount
  let $Message = $MsgF
  add #BoxAmt to #AccumUnionDues
  do Print-Box

  let #BoxAmt = $BoxG
  add 1 to #BoxCount
  let $Message = $MsgG
  add #BoxAmt to #AccumQPPPEarns
  do Print-Box

  let #BoxAmt = $BoxH
  add 1 to #BoxCount
  let $Message = $MsgH
  add #BoxAmt to #AccumQPIPPrem
  do Print-Box

  let #BoxAmt = $BoxI
  add 1 to #BoxCount
  let $Message = $MsgI
  add #BoxAmt to #AccumQPIPEarns
  do Print-Box

  let #BoxAmt = $BoxJ
  add 1 to #BoxCount
  let $Message = $MsgJ
  add #BoxAmt to #AccumPrivHPlan
  do Print-Box

  let #BoxAmt = $BoxK
  add 1 to #BoxCount
  let $Message = $MsgK
  add #BoxAmt to #AccumTripsRem
  do Print-Box

  let #BoxAmt = $BoxL
  add 1 to #BoxCount
  let $Message = $MsgL
  add #BoxAmt to #AccumOtherB
  do Print-Box

  let #BoxAmt = $BoxM
  add 1 to #BoxCount
  let $Message = $MsgM
  add #BoxAmt to #AccumComm
  do Print-Box

  let #BoxAmt = $BoxN
  add 1 to #BoxCount
  let $Message = $MsgN
  add #BoxAmt to #AccumCharDon
  do Print-Box

  let #BoxAmt = $BoxO
  add 1 to #BoxCount
  let $Message = $MsgO
  add #BoxAmt to #AccumOthTaxInc
  do Print-Box

  let #BoxAmt = $BoxP
  add 1 to #BoxCount
  let $Message = $MsgP
  add #BoxAmt to #AccumContribMEIP
  do Print-Box

  let #BoxAmt = $BoxQ
  add 1 to #BoxCount
  let $Message = $MsgQ
  add #BoxAmt to #AccumDefWage
  do Print-Box

  let #BoxAmt = $BoxR
  add 1 to #BoxCount
  let $Message = $MsgR
  add #BoxAmt to #AccumIndian
  do Print-Box

  let #BoxAmt = $BoxS
  add 1 to #BoxCount
  let $Message = $MsgS
  add #BoxAmt to #AccumTip
  do Print-Box

  let #BoxAmt = $BoxT
  add 1 to #BoxCount
  let $Message = $MsgT
  add #BoxAmt to #AccumTipsAllocated
  do Print-Box

  let #BoxAmt = $BoxU
  add 1 to #BoxCount
  let $Message = $MsgU
  add #BoxAmt to #AccumPhasedRetire
  do Print-Box

  let #BoxAmt = $BoxV
  add 1 to #BoxCount
  let $Message = $MsgV
  add #BoxAmt to #AccumMealsAccom
  do Print-Box

  let #BoxAmt = $BoxW
  add 1 to #BoxCount
  let $Message = $MsgW
  add #BoxAmt to #AccumEmployAuto
  do Print-Box

  move 0 to #OI_Idx
  while #OI_Idx < 4
    get $OIBox $OIAmt from OI-Array(#OI_Idx) OIBox OIAmt

    let #BoxAmt = $OIAmt
    add 1 to #BoxCount
    do Get-OI-Box-Descr
    let $Message = $MsgOI
    if #BoxAmt > 0
      add #BoxAmt to #AccumOtherInfAmt
      do Print-Box
    end-if
    add 1 to #OI_Idx
  end-while

  let $Message = $MsgCDO
  print $Message (+1,5)
  print $BoxCode (0,74)

  let #BoxAmt = $BoxB01
  add 1 to #BoxCount
  let $Message = $MsgB01
  add #BoxAmt to #AccumCPPContrib
  do Print-Box

  let #BoxAmt = $DeductionForce
  add 1 to #BoxCount
  let $Message = $MsgDedForce
  add #BoxAmt to #AccumDedForce
  do Print-Box

end-procedure


begin-procedure Print-Detail-Cancelled

  do Get-Box-Descr

  next-listing need=7

  let $Surname = RTRIM($E_LastName, ' ')
  print $Surname (+2,3)
  print ',' (0,0)
  let $FirstName = RTRIM($E_FirstName, ' ')
  print $FirstName (0,+1)
  print $E_Initial (0,+1)
  print $Ctx912r_Sin    (0,40)
  print $E_SIN (0,46) edit xxx-xxx-xxx

  print $Ctx912r_Slip_No (+1,3)
  print $ReleveSlipNo (0,+1)

  print $Ctx912r_TypeOfData (0,40)
  print $TypeOfData (0,+1)

  add 1 to #RV1PrintCount

end-procedure


begin-procedure Print-Box

   print $Message (+1,5)
   print #BoxAmt (0,65) edit 99999999.99

end-procedure


begin-procedure Print-Summary

     print $Ctx912r_Summ_msg               (+2,1)


     print    $Ctx912r_Summ_rec            (+2,3)
     print    $Ctx912r_Reporting_id        (+2,3)
     print    $ReportingId                 (0,60)
     print    $Ctx912r_Empler_name         (+1,3)
     print    $CompanyName                 (0,60)
     print    $Ctx912r_Address             (+1,3)
     print    $C_Street1                   (0,60)
     print    $Ctx912r_Address2            (+1,3)
     print    $C_Street2                   (0,60)
     print    $Ctx912r_City                (+1,3)
     print    $C_City                      (0,60)
     print    $Ctx912r_Province            (+1,3)
     print    $C_Province                  (0,60)
     print    $Ctx912r_Postal_code         (+1,3)
     print    $C_PostalCode                (0,60)
     print    $Ctx912r_NEQ                 (+2,3)
     print    $NEQ                         (0,60)
     print    $Ctx912r_Tax_year            (+2,3)
     print    $TaxYear                     (0,60)
     print    $Ctx912r_Total_rv1_recs      (+2,3)
     let #RV1Count = $RV1Count
     print    #RV1Count   (0,60)  edit 9999999

end-procedure


begin-procedure Get-Box-Descr

  move 0 to #i

  while #i <= #max_R1boxes

        get $PrBox $PrDescr from PrR1_Area(#i)
                   PR1_Box PR1_Descr
        let $MsgBox = RTRIM($PrBox, ' ')
        let $MsgDescr = RTRIM($PrDescr, ' ') || ' (Box ' || RTRIM($PrBox, ' ') || ')'
        let $MsgSum   = RTRIM($PrDescr, ' ')

        evaluate $MsgBox
        when = 'A'
           let $MsgA = $MsgDescr
           break
        when = 'B'
           let $MsgB = $MsgDescr
           break
        when = 'C'
           let $MsgC = $MsgDescr
           break
        when = 'D'
           let $MsgD = $MsgDescr
           break
        when = 'E'
           let $MsgE = $MsgDescr
           break
        when = 'F'
           let $MsgF = $MsgDescr
           break
        when = 'G'
           let $MsgG = $MsgDescr
           break
        when = 'H'
           let $MsgH = $MsgDescr
           break
        when = 'I'
           let $MsgI = $MsgDescr
           break
        when = 'J'
           let $MsgJ = $MsgDescr
           break
        when = 'K'
           let $MsgK = $MsgDescr
           break
        when = 'L'
           let $MsgL = $MsgDescr
           break
        when = 'M'
           let $MsgM = $MsgDescr
           break
        when = 'N'
           let $MsgN = $MsgDescr
           break
        when = 'O'
           let $MsgO = $MsgDescr
           break
        when = 'P'
           let $MsgP = $MsgDescr
           break
        when = 'Q'
           let $MsgQ = $MsgDescr
           break
        when = 'R'
           let $MsgR = $MsgDescr
           break
        when = 'S'
           let $MsgS = $MsgDescr
           break
        when = 'T'
           let $MsgT = $MsgDescr
           break
        when = 'U'
           let $MsgU = $MsgDescr
           break
        when = 'V'
           let $MsgV = $MsgDescr
           break
        when = 'W'
           let $MsgW = $MsgDescr
           break
        when = 'CDO'
           let $MsgCDO = RTRIM($PrDescr, ' ')
           break
        when = 'B01'
        when = 'B-1'
           let $MsgB01 = RTRIM($PrDescr, ' ')
           break
        when = 'A43'
        when = 'A44'
        when = 'A-7'
        when = 'A-8'
           let $MsgDedForce = $Ctx912r_Ded_Force
           break
        when-other
           break

        end-evaluate

        add 1 to #i

  end-while

end-procedure


begin-procedure Get-OI-Box-Descr

move 0 to #i

   while #i <= #max_R1boxes

        get $PrBox $PrDescr from PrR1_Area(#i)
                   PR1_Box PR1_Descr

        let $MsgBox = RTRIM($PrBox, ' ')
        let $OIBox  = RTRIM($OIBox , ' ')

        if $MsgBox = $OIBox 
           let $MsgDescr = RTRIM($PrDescr, ' ') || ' (Box ' || RTRIM($PrBox, ' ') || ')'
           let $MsgOI    = $MsgDescr
           let $MsgSum   = RTRIM($PrDescr, ' ')
           break
        end-if

        add 1 to #i

   end-while

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
!#Include 'getcodta.sqc' !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getdptnm.sqc'  !Get-Department-Name
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'  !Select-Canadian-YrEnd-Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
