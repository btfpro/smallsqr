!***********************************************************************
! BEN713: Benefit Program Base Benefits
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/25:05:26:26                           !
!             $Release:  HR9                                           !
!            $Revision:  102                                           !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

#define MAX_LINES               79   !Maximum print lines for portrait mode

#define col_sep                  1   !Column Separator
#define col_dvdr                 1   !Column Devider

#define col_line                26   !'-'
#define col_line2                8   !'-'
#define col_opt_info            46   !Option Information

#define col_plan_type           13   !Plan Type
#define col_optn_cd              4   !Optn CD
#define col_ben_plan_descr      35   !Benefits Plan Description
#define col_cover_code          13   !Coverage Code
#define col_ded_code            17   !Deduction Code
#define col_rate_type           12   !Rate Type
#define col_rate_table           5   !Rate Table
#define col_calc_rules           5   !Calc Rules


!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number

  do StdAPI-Init

  if IsBlank($prcs_process_instance)
    do Ask-Values
  else
    do Get-Values
  end-if

  let $ReportID    = 'BEN713'
  do Get-Report-Language
  let $ReportTitle  = $BEN713-REPORTTITLE
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  let #CurRptLine    = {MAX_LINES} + 1
  let $FirstPageFlag = 'YES'
  let $FirstPgmPage = 'YES'
  let $PriorPlanType = ''

  do Setup-Lookups

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  do Ask-As-Of-Date
  !We will need to manipulate $AsOfDate to control other std procedures such
  !as Read-Translate-Table, Get-Benefit-Name, and Get-Deduction-Name.
  !Therefore we will copy this into $UserAsOfDate for safekeeping...
  let $UserAsOfDate = $AsOfDate

  do Ask-Benefit-Program

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-As-Of-Date
  let $UserAsOfDate = $AsOfDate

  do Get-Benefit-Program

End-Procedure

!***************************************
Begin-Procedure Ask-Benefit-Program
!***************************************

  display ''
  input $Benefit_Program
     'Enter Benefit Program to report (or leave blank for ALL Programs)'
  let $Benefit_Program = UPPER(RTRIM($Benefit_Program, ' '))

  if IsBlank($Benefit_Program)
    let $Benefit_Program = '%'
  end-if

End-Procedure

!******************************************************
Begin-Procedure Make_Where_For_XLAT($KeyField, :$Where)
!******************************************************

  let $Where = 'FIELDNAME=''' || $KeyField || ''' '

  if Not IsBlank($_Language_Cd) And RTrim($_Language_Cd,' ') <> RTrim($_SQR_Default_Language, ' ')

    let $Where = $Where || 'And FIELDVALUE Not In '
    let $Where = $Where || '(Select FIELDVALUE '
    let $Where = $Where || ' From PSXLATITEMLANG '
    let $Where = $Where || ' Where FIELDNAME=''' || $KeyField || ''' '
    let $Where = $Where || ' And LANGUAGE_CD=''' || $_Language_Cd || ''') '
    let $Where = $Where || 'UNION '
    let $Where = $Where || 'Select Distinct FIELDVALUE, XLATSHORTNAME '
    let $Where = $Where || 'From PSXLATITEMLANG '
    let $Where = $Where || 'Where FIELDNAME=''' || $KeyField || ''' '
    let $Where = $Where || 'And LANGUAGE_CD=''' || $_Language_Cd || ''' '

  end-if

End-Procedure

!***************************************
Begin-Procedure Setup-Lookups
!***************************************

  do Make_Where_For_XLAT('PLAN_TYPE', $load_where)
  load-lookup name=TblPlanTypes
              rows=50
              table=PSXLATITEM
              key=FIELDVALUE
              return_value=XLATSHORTNAME
              where=$load_where
              quiet

  do Make_Where_For_XLAT('RATE_TYPE', $load_where)
  load-lookup name=TblRateTypes
              rows=10
              table=PSXLATITEM
              key=FIELDVALUE
              return_value=XLATSHORTNAME
              where=$load_where
              quiet

End-Procedure


!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN713 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN713','REPORT_TITLE',     $BEN713-REPORTTITLE,   #CW)
  do Get_Field_Information ('BEN713','PRG_DEF_AS_OF',    $BEN713-PRG-DEF-AS-OF, #CW)
  do Get_Field_Information ('BEN713','BEN_DED_PGM',      $BEN713-BEN-DED-PGM,   #CW)
  do Get_Field_Information ('BEN713','PGM_EFF_DATE',     $BEN713-PGM-EFF-DATE,  #CW)
  do Get_Field_Information ('BEN713','PGM_TYPE',         $BEN713-PGM-TYPE,      #CW)
  do Get_Field_Information ('BEN713','STATUS',           $BEN713-STATUS,        #CW)
  do Get_Field_Information ('BEN713','PLAN_INFO',        $BEN713-PLAN-INFO,     #CW)
  do Get_Field_Information ('BEN713','OPT_INFO',         $BEN713-OPT-INFO,      #CW)
  do Get_Field_Information ('BEN713','CALC',             $BEN713-CALC,          #CW)
  do Get_Field_Information ('BEN713','BEN_PLAN_DESCR',   $BEN713-BEN-PLAN-DESCR,#CW)
  do Get_Field_Information ('BEN713','RATE_TYPE',        $BEN713-RATE-TYPE,     #CW)
  do Get_Field_Information ('BEN713','GEN_PGM_INFO',     $BEN713-GEN-PGM-INFO,  #CW)
  do Get_Field_Information ('BEN713','FSA_ADMIN_INFO',   $BEN713-FSA-ADMIN-INFO,#CW)
  do Get_Field_Information ('BEN713','PGM_CURR_CD',      $BEN713-PGM-CURR-CD,   #CW)
  do Get_Field_Information ('BEN713','FSA_ADMIN_RUN_ID', $BEN713-FSA-ADMIN-RUN-ID,#CW)
  do Get_Field_Information ('BEN713','COBRA_SURCHRG',    $BEN713-COBRA-SURCHRG, #CW)
  do Get_Field_Information ('BEN713','MIN_CHECK_AMT',    $BEN713-MIN-CHECK-AMT, #CW)
  do Get_Field_Information ('BEN713','COBRA_DISD_SUR',   $BEN713-COBRA-DISD-SUR,#CW)
  do Get_Field_Information ('BEN713','MAX_ANNUAL_PLG',   $BEN713-MAX-ANNUAL-PLG,#CW)
  do Get_Field_Information ('BEN713','STUDENT_AGE_LIM',  $BEN713-STUDENT-AGE-LIM,#CW)
  do Get_Field_Information ('BEN713','DEP_AGE_LIM',      $BEN713-DEP-AGE-LIM,   #CW)
  do Get_Field_Information ('BEN713','EXCL_DISBLD_DEPS', $BEN713-EXCL-DISBLD-DEPS,#CW)
  do Get_Field_Information ('BEN713','MARRD_DEPS_INELIG',$BEN713-MARRD-DEPS-INELIG,#CW)
  do Get_Field_Information ('BEN713','FMLA_PLAN_ID',     $BEN713-FMLA-PLAN-ID,  #CW)
  do Get_Field_Information ('BEN713','WAIVE',            $BEN713-WAIVE,         #CW)
  do Get_Field_Information ('BEN713','GENERAL_DEDUCT',   $BEN713-GENERAL-DEDUCT,#CW)

  do Get_Field_Information ('BEN1',  'OPTN',             $BEN1-OPTN,            #CW)
  do Get_Field_Information ('BEN1',  'PLAN_TYPE',        $BEN1-PLAN-TYPE,       #CW)
  do Get_Field_Information ('BEN1',  'RATE',             $BEN1-RATE,            #CW)
  do Get_Field_Information ('BEN1',  'CODE',             $BEN1-CODE,            #CW)
  do Get_Field_Information ('BEN1',  'COVER_CD2',        $BEN1-COVER-CD2,       #CW)
  do Get_Field_Information ('BEN1',  'RULES',            $BEN1-RULES,           #CW)
  do Get_Field_Information ('BEN1',  'TABLE',            $BEN1-TABLE,           #CW)
  do Get_Field_Information ('BEN1',  'DED_CD2',          $BEN1-DED-CD2,         #CW)

End-Procedure


!***************************************
Begin-Procedure Print-Main-Heading
!***************************************

if ($FirstPageFlag <> 'YES')
  new-page
end-if
let $FirstPageFlag = 'NO'

#Include 'stdhdgtr.sqc'     !Standard Report header

  let #CurRptLine = 5

!** Program Definition as of:
  print $BEN713-PRG-DEF-AS-OF      (+1,1,27)
  do Format-DateTime($UserAsOfDate, $OutDt, {DEFDATE}, '', '')
  print $OutDt                     (0,+1,10)

!** Benefit/Deduction Program:
  print $BEN713-BEN-DED-PGM        (+2,1,28)
  print &P.BENEFIT_PROGRAM         (0,+1,3)
  print ' - '                      (0,0,3)
  print $BenefitProgramName        ()

!** (Program Type:
  print $BEN713-PGM-TYPE           (0,+2,15)
  print $ProgramType               (0,+1)
  print ')'                        (0,0,1)

!** Program Effective Date:
  print $BEN713-PGM-EFF-DATE       (+1,1,27)
  print $ProgramEffDt              (0,+1,10)

!** (Status:
  print $BEN713-STATUS             (0,+2,9)
  print &P.EFF_STATUS              (0,+1,1)
  print ')'                        (0,+1,1)

  add 4 to #CurRptLine

  if ($FirstPgmPage = 'YES')
    do Print-Program-Info
  else
    print ' '                      (+1,1,1)
  end-if

!Column Heading line 1
  print '|'                        (+1,1,{col_dvdr})
  print $BEN713-PLAN-INFO          (0,0,{col_plan_type})
  print '|'                        (0,0,{col_dvdr})
  print '-'                        (0,0,{col_line})            FILL
  print $BEN713-OPT-INFO           (0,0,{col_opt_info})
  print '-'                        (0,0,{col_line})            FILL
  print '|'                        (0,0,{col_dvdr})

!Column Heading line 2
  print '|'                        (+1,1,{col_dvdr})
  print ''                         (0,0,{col_plan_type})
  print '|'                        (0,0,{col_dvdr})
  print $BEN1-OPTN                 (0,+{col_sep},{col_optn_cd})
  print ''                         (0,+{col_sep},{col_ben_plan_descr})
  print ''                         (0,+{col_sep},{col_cover_code})
  print ''                         (0,+{col_sep},{col_ded_code})
  print ''                         (0,+{col_sep},{col_rate_type})
  print $BEN1-RATE                 (0,+{col_sep},{col_rate_table})
  print $BEN713-CALC               (0,+{col_sep},{col_calc_rules})
  print '|'                        (0,0,{col_dvdr})

!Column Heading line 3
  print '|'                        (+1,1,{col_dvdr})
  print $BEN1-PLAN-TYPE            (0,0,{col_plan_type})
  print '|'                        (0,0,{col_dvdr})
  print $BEN1-CODE                 (0,+{col_sep},{col_optn_cd})
  print $BEN713-BEN-PLAN-DESCR     (0,+{col_sep},{col_ben_plan_descr})
  print $BEN1-COVER-CD2            (0,+{col_sep},{col_cover_code})
  print $BEN1-DED-CD2              (0,+{col_sep},{col_ded_code})
  print $BEN713-RATE-TYPE          (0,+{col_sep},{col_rate_type})
  print $BEN1-TABLE                (0,+{col_sep},{col_rate_table})
  print $BEN1-RULES                (0,+{col_sep},{col_calc_rules})
  print '|'                        (0,0,{col_dvdr})

!Column Heading line 4
  print '|'                        (+1,1,{col_dvdr})
  print '='                        (0,0,{col_plan_type})               FILL
  print '|'                        (0,0,{col_dvdr})
  print '='                        (0,+{col_sep},{col_optn_cd})        FILL
  print '='                        (0,+{col_sep},{col_ben_plan_descr}) FILL
  print '='                        (0,+{col_sep},{col_cover_code})     FILL
  print '='                        (0,+{col_sep},{col_ded_code})       FILL
  print '='                        (0,+{col_sep},{col_rate_type})      FILL
  print '='                        (0,+{col_sep},{col_rate_table})     FILL
  print '='                        (0,+{col_sep},{col_calc_rules})     FILL
  print '|'                        (0,0,{col_dvdr})

  add 5 to #CurRptLine
  let $FirstPgmPage     = 'NO'

End-Procedure

!***************************************
Begin-Procedure Print-Program-Info
!***************************************

  print '-'                        (+2,5,{col_line2})            FILL
!**  General Program Information
  print $BEN713-GEN-PGM-INFO       (0,+1,27)
  print '-'                        (0,+1,{col_line2})            FILL
  print '-'                        (0,65,{col_line2})            FILL
!** FSA Administration Information:
  print $BEN713-FSA-ADMIN-INFO     (0,+1,30)
  print '-'                        (0,+1,{col_line2})            FILL

!** Program Currency Code:
  print $BEN713-PGM-CURR-CD        (+1,5,28)
  print &P.CURRENCY_CD             (0,+1,3)
!** FSA Admin Run ID:
  print $BEN713-FSA-ADMIN-RUN-ID   (0,65,23)
  print &P.FSA_RUN_ID              (0,+1,3)
  print '-'                        (0,+1,1)
  print &F.DESCR                   (0,+1,30)

!** COBRA Surcharge:
  print $BEN713-COBRA-SURCHRG      (+1,5,28)
  print &P.COBRA_SURCHARGE         (0,+1,3)  edit 999

!** COBRA Disabled Surcharge:
  print $BEN713-COBRA-DISD-SUR     (+1,5,28)
  print &P.COBRA_DISABL_SURCG      (0,+1,3)  edit 999
!** Maximum Annual Pledge:
  print $BEN713-MAX-ANNUAL-PLG     (0,65,23)
  print $FSA_MaxAnnlPldg           (0,+1,10)

!** Student Age Limit:
  print $BEN713-STUDENT-AGE-LIM    (+1,5,28)
  print &P.Student_Age_Limit       (0,+1,2)  edit 99
!** Dep Age Limit:
  print $BEN713-DEP-AGE-LIM        (0,+4,15)
  print &P.Dep_Age_Limit           (0,+1,2)  edit 99

!** Exclude Disabled Deps:
  print $BEN713-EXCL-DISBLD-DEPS   (+1,5,28)
  print &P.Excl_Disabled_Age       (0,+1,1)
!** Married Deps Ineligible:
  print $BEN713-MARRD-DEPS-INELIG  (+1,5,28)
  print &P.Dependent_Marriage      (0,+1,1)

!** FMLA Plan ID:
  print $BEN713-FMLA-PLAN-ID       (+1,5,28)
  print &P.FMLA_PLAN_ID            (0,0,3)
  print '-'                        (0,+1,1)
  print &L.DESCR                   (0,+1,20)

  print ' '                        (+1,1,1)

  add 6 to #CurRptLine

End-Procedure

!***************************************
Begin-Procedure Process-Main
!***************************************

Begin-Select

P.BENEFIT_PROGRAM
  let $FirstPgmPage = 'YES'
P.EFFDT
  do Format-DateTime(&P.EFFDT, $ProgramEffDt, {DEFDATE}, '', '')
  !This sets the effective date for fetching from PSXLATITEM and other
  !supporting tables...
  let $AsOfDate = &P.EFFDT
P.DESCR
  let $BenefitProgramName = RTRIM(&P.DESCR, ' ')
  let $BenProgram = &P.BENEFIT_PROGRAM
  let $EffDate = &P.EFFDT
  do Get-Benefit-Program-Name-Lang !Returns $BenefitProgramName

P.PROGRAM_TYPE
  move 'PROGRAM_TYPE'  to $FieldName
  move &P.PROGRAM_TYPE to $FieldValue
  do Read-Translate-Table
  let $ProgramType = RTRIM($XlatShortName, ' ')
P.FSA_MAX_ANNL_PLDG
  do Format-Number(&P.FSA_MAX_ANNL_PLDG, $FSA_MaxAnnlPldg, '$999999.99')
P.FSA_RUN_ID
  do Get-FSA-Run-ID-Name
P.CURRENCY_CD
P.EFF_STATUS
P.COBRA_SURCHARGE
P.COBRA_DISABL_SURCG
P.STUDENT_AGE_LIMIT
P.DEP_AGE_LIMIT
P.DEPENDENT_MARRIAGE
P.EXCL_DISABLED_AGE
P.FMLA_PLAN_ID
  do Get-FMLA-Plan-Name

  do Print-Main-Heading
  do Process-Plans

FROM  PS_BEN_DEFN_PGM P
WHERE P.BENEFIT_PROGRAM LIKE $Benefit_Program
  AND P.EFF_STATUS = 'A'
  AND P.EFFDT      = (SELECT MAX(EFFDT)
                        FROM PS_BEN_DEFN_PGM
                       WHERE BENEFIT_PROGRAM = P.BENEFIT_PROGRAM
                         AND EFF_STATUS      = 'A'
                         AND EFFDT          <= $UserAsOfDate)

ORDER BY P.BENEFIT_PROGRAM ASC, P.EFFDT DESC

End-Select
End-Procedure


!***************************************
Begin-Procedure Process-Plans
!***************************************

Begin-Select

PL.BENEFIT_PROGRAM
PL.EFFDT
PL.PLAN_TYPE
  let $LookupVal = &PL.PLAN_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&PL.PLAN_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&PL.PLAN_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLPLANTYPES $LookupVal $Out
  let $PlanDescr = &PL.PLAN_TYPE
  if Not IsBlank($Out)
     let $PlanDescr = &PL.PLAN_TYPE || '-' || $Out
  end-if
PL.DISPLAY_PLN_SEQ
PL.MIN_ANNUAL_CONTRIB
  do Format-Number(&PL.MIN_ANNUAL_CONTRIB, $MinAnnContrib, '$9999.99')
PL.MAX_ANNUAL_CONTRIB
  do Format-Number(&PL.MAX_ANNUAL_CONTRIB, $MaxAnnContrib, '$99999999.99')
PL.WAIVE_COVERAGE
PL.RESTRICT_ENTRY_MM
PL.EVENT_RULES_ID

  do Process-Options

FROM  PS_BEN_DEFN_PLAN PL
WHERE PL.BENEFIT_PROGRAM = &P.BENEFIT_PROGRAM
  AND PL.EFFDT           = &P.EFFDT
  AND PL.PLAN_TYPE      <> '01'
  AND PL.PLAN_TYPE      <> '00'
ORDER BY PL.DISPLAY_PLN_SEQ ASC

End-Select
End-Procedure


!***************************************
Begin-Procedure Process-Options
!***************************************

Begin-Select

O.BENEFIT_PROGRAM
O.EFFDT
O.PLAN_TYPE
O.OPTION_ID
O.OPTION_TYPE
O.OPTION_CD
O.BENEFIT_PLAN
  move &O.BENEFIT_PLAN to $Benefit_Plan
  move &O.PLAN_TYPE    to $Plan_Type
  do Get-Benefit-Name                   !Returns $BenefitName
O.COVRG_CD
  let $CovrgCd = &O.COVRG_CD
  let $CovrgEffdt = $UserAsOfDate
  do Get-Covrg-Code-Descr
  let $CovrgCode = $CovrgDescrShort     !Returns  $CovrgDescrShort
O.DEDCD
  move &O.PLAN_TYPE to $PlanType
  move &O.DEDCD     to $DedCd
  do Get-Deduction-Name                 !Returns  $DeductionAbbrv
O.DISPLAY_OPT_SEQ

O.OPTION_LVL
O.DFLT_OPTION_IND
O.ELIG_RULES_ID
O.LOCATION_TBL_ID

  do Print-Coverage-Info
  do Process-Costs
  if ($FirstCostFlag = 'YES')   !No costs associated with this option.
    add 1 to #CurRptLine
  end-if

FROM  PS_BEN_DEFN_OPTN O
WHERE O.BENEFIT_PROGRAM  = &PL.BENEFIT_PROGRAM
  AND O.EFFDT            = &PL.EFFDT
  AND O.PLAN_TYPE        = &PL.PLAN_TYPE
  AND O.OPTION_TYPE     IN ('D','W','O')
ORDER BY O.DISPLAY_OPT_SEQ ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Print-Coverage-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES}-2)
    do Print-Main-Heading
  end-if

  if ($PriorPlanType <> &PL.PLAN_TYPE)
    print ' '  (+1,1)
    add 1 to #CurRptLine
    let $PriorPlanType = &PL.PLAN_TYPE
  end-if

  print $PlanDescr                 (+1,2,13)

  print &O.OPTION_CD               (0,+3,2)
  if &O.OPTION_TYPE = 'W'
!** (Waive)
    print $BEN713-WAIVE            (0,+2,35)
  else
  if &O.OPTION_TYPE = 'D'
!**(General Deduction)
    print $BEN713-GENERAL-DEDUCT   (0,+2,35)
  else
    print &O.BENEFIT_PLAN          (0,+2,6)
    print '-'                      (0,0,1)
    print $BenefitName             (0,0,28)
  end-if
  end-if

  print &O.COVRG_CD                (0,+1,2)
  if Not IsBlank($CovrgCode)
    print '-'                      (0,0,1)
    print $CovrgCode               (0,0,10)
  else
    print ' '                      (0,0,11)
  end-if

  print &O.DEDCD                   (0,+2,6)
  if Not IsBlank($DeductionAbbrv)
    print '-'                      (0,0,1)
    print $DeductionAbbrv          (0,0,10)
  else
    print ' '                      (0,0,11)
  end-if

  let $FirstCostFlag = 'YES'
  let $PlanDescr = ''

End-Procedure

!***************************************
Begin-Procedure Process-Costs
!***************************************

Begin-Select

C.BENEFIT_PROGRAM
C.EFFDT
C.PLAN_TYPE
C.OPTION_ID
C.COST_ID
C.RATE_TYPE
  let $LookupVal = &C.RATE_TYPE
#ifdef MICROSOFT
  let $LookupVal = Edit(&C.RATE_TYPE, 'XXXX')
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    let $LookupVal = Edit(&C.RATE_TYPE, 'XXXX')
  end-if
#endif
  LOOKUP TBLRATETYPES $LookupVal $RateType
C.RATE_TBL_ID
C.CALC_RULES_ID

  do Print-Cost-Info

FROM  PS_BEN_DEFN_COST C

WHERE C.BENEFIT_PROGRAM = &O.BENEFIT_PROGRAM
  AND C.EFFDT           = &O.EFFDT
  AND C.PLAN_TYPE       = &O.PLAN_TYPE
  AND C.OPTION_ID       = &O.OPTION_ID
  AND C.COST_TYPE       = 'P'
ORDER BY C.COST_ID ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Print-Cost-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES})
    do Print-Main-Heading
  end-if

  if ($FirstCostFlag = 'YES')
    print &C.RATE_TYPE             (0,89,2)  edit 99
  else
    print &C.RATE_TYPE             (+1,89,2) edit 99
  end-if
  print '-'                        (0,0,1)
  print $RateType                  (0,0,10)
  print &C.RATE_TBL_ID             (0,+1,4)
  print &C.CALC_RULES_ID           (0,+2,4)

  let $FirstCostFlag = 'NO'
  add 1 to #CurRptLine

End-Procedure

!***************************************
Begin-Procedure  Get-FSA-Run-ID-Name
!***************************************

Begin-Select

F.FSA_RUN_ID
F.DESCR

FROM PS_FSA_RUN_TBL F
WHERE F.FSA_RUN_ID = &P.FSA_RUN_ID

End-Select
End-Procedure

!***************************************
Begin-Procedure  Get-FMLA-Plan-Name
!***************************************

Begin-Select

L.FMLA_PLAN_ID
L.DESCR

FROM PS_FMLA_PLAN_TBL L
WHERE L.FMLA_PLAN_ID = &P.FMLA_PLAN_ID
AND   L.EFFDT =
        (SELECT MAX(L1.EFFDT)
         FROM   PS_FMLA_PLAN_TBL L1
         WHERE  L1.FMLA_PLAN_ID = L.FMLA_PLAN_ID
         AND    L1.EFFDT       <= &P.EFFDT)
End-Select
End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'reset1.sqc'     !Reset printer procedure

#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'getpgmnm.sqc'  !Get-Benefit-Program-Name procedure
#Include 'getbennm.sqc'  !Get-Benefit-Name procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!************************ End Of Report *****************************
