!*********************************************
!  REG002FR:  Personnal Register (FRA)       *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/06:21:12:40                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define JOBCODE_TBL
#define ESTAB_TBL
#define PERSONAL_DT_FST
#define CONTRACT_TYPE
#define COUNTRY_TBL
#include 'rellang.sqc'

#define ENTRY 'Entry'
#define LEAVE 'Leave'

#define C01   1
#define C02   9
#define C03  41
#define C04  54
#define C05  59
#define C06  71
#define C07 108
#define C08 117
#define C09 155
#define C10 167

!***********************************************************************

begin-program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-program

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 6
  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

   move 'REG002FR' to $ReportID

   do Stdapi-Init

   let $language_cd = $CURR_LANGUAGE_CD

   do Init_Report_Translation($ReportID, $language_cd)
   do Append_Report_Translation($ReportID)

   do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

   if $prcs_process_instance = ''
     !No Prompt
   else
      do Select-Parameters-FRA
   end-if
   do Init_Printer

end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
   do GET-REG002-FRA-PARM
end-procedure

!***********************************************************************
!  Main: Creates the Personal Register Report
!***********************************************************************

begin-procedure Process-Main

   let $RegRegion = 'FRA'

   do Get-Translat-Info     ! Global

   do Print-Search-Period   ! Search Period

   print $TITLE1_LBL (+2,1)
   do Establishment-Retrieve       ! Estab Identity

   print $TITLE2_LBL (+2,1)
   do Print-Banner
   do get-action-grp
   do Personal-Register-Retrieve

end-procedure

!***********************************************************************
!  Prints table banner
!***********************************************************************

begin-procedure Print-Banner

   print $BIRTHDATE1_LBL      (+2,{C05},48)
   print $EE_CATEGORY1_LBL    (,{C07},8)
   print $ADD_INFO1_LBL       (,{C08})

   print $ORDER_LBL           (+1,{C01},7)
   print $NAME_LBL            (,{C02},31)
   print $CITIZENSHIP_LBL     (,{C03},12)
   print $SEX_LBL             (,{C04},4)
   print $BIRTHDATE2_LBL      (,{C05},11)
   print $JOB_LBL             (,{C06},36)
   print $EE_CATEGORY2_LBL    (,{C07},8)
   print $ADD_INFO2_LBL       (,{C08},37)
   print $ENTRY_LBL           (,{C09},11)
   print $LEAVE_LBL           (,{C10})
   print ''                   (+1,{C01})  !Jump a line

end-procedure Print-Banner

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

   do Get_Field_Information($ReportID, 'TITLE1'        , $TITLE1_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE2'        , $TITLE2_LBL        , #DW)

   do Get_Field_Information($ReportID, 'SIRET_CD'      , $SIRET_CD_LBL      , #DW)
   do Get_Field_Information($ReportID, 'APE_CD'        , $APE_CD_LBL        , #DW)
   do Get_Field_Information($ReportID, 'ESTAB_NAME'    , $ESTAB_NAME_LBL    , #DW)
   do Get_Field_Information($ReportID, 'ADDRESS'       , $ADDRESS_LBL       , #DW)
   do Get_Field_Information($ReportID, 'POSTAL'        , $POSTAL_LBL        , #DW)
   do Get_Field_Information($ReportID, 'CITY'          , $CITY_LBL          , #DW)
   do Get_Field_Information($ReportID, 'STARTDT'       , $STARTDT_LBL       , #DW)
   do Get_Field_Information($ReportID, 'ENDDT'         , $ENDDT_LBL         , #DW)

   do Get_Field_Information($ReportID, 'ORDER'         , $ORDER_LBL         , #DW)
   do Get_Field_Information($ReportID, 'NAME'          , $NAME_LBL          , #DW)
   do Get_Field_Information($ReportID, 'CITIZENSHIP'   , $CITIZENSHIP_LBL   , #DW)
   do Get_Field_Information($ReportID, 'SEX'           , $SEX_LBL           , #DW)
   do Get_Field_Information($ReportID, 'BIRTHDATE1'    , $BIRTHDATE1_LBL    , #DW)
   do Get_Field_Information($ReportID, 'BIRTHDATE2'    , $BIRTHDATE2_LBL    , #DW)
   do Get_Field_Information($ReportID, 'JOB'           , $JOB_LBL           , #DW)
   do Get_Field_Information($ReportID, 'EE_CATEGORY1'  , $EE_CATEGORY1_LBL  , #DW)
   do Get_Field_Information($ReportID, 'EE_CATEGORY2'  , $EE_CATEGORY2_LBL  , #DW)
   do Get_Field_Information($ReportID, 'ENTRY'         , $ENTRY_LBL         , #DW)
   do Get_Field_Information($ReportID, 'LEAVE'         , $LEAVE_LBL         , #DW)
   do Get_Field_Information($ReportID, 'ADD_INFO1'     , $ADD_INFO1_LBL     , #DW)
   do Get_Field_Information($ReportID, 'ADD_INFO2'     , $ADD_INFO2_LBL     , #DW)

   do Get_Field_Information($ReportID, 'NO_CONTRACT'   , $NO_CONTRACT_LBL     , #DW)

end-procedure Get-Translat-Info

!***********************************************************************
!  Prints the Search Period of the report
!***********************************************************************

begin-procedure Print-Search-Period

   if not IsNull($STARTDT)
      do Format-DateTime($STARTDT, $StartDate, {DEFDMY},'','')
   end-if
   if not IsNull($ENDDT)
      do Format-DateTime($ENDDT, $EndDate, {DEFDMY},'','')
   end-if

   print $STARTDT_LBL                 (+1,1)
   print $StartDate                   (,+2)
   print $ENDDT_LBL                   (,+10)
   print $EndDate                     (,+2)

end-procedure Print-Search-Period

!***********************************************************************
!  Header: Retrieves Establishment Data
!***********************************************************************

begin-procedure Establishment-Retrieve

begin-SELECT ON-ERROR=SQL-Error
AA.SIREN_CD_FRA       &SIREN_CD_FRA
AA.NIC_CODE_FRA       &NIC_CD
AA.APE_INDSTRY_CD_FRA &APE_INDSTRY_CD_FRA
A.POSTAL             &POSTAL

A.ESTABID             &ESTABID
{DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX} &EFFDT

A.ADDRESS1            &ADDRESS1
A.ADDRESS2            &ADDRESS2
A.ADDRESS3            &ADDRESS3
A.ADDRESS4            &ADDRESS4
A.CITY                &CITY
A.DESCR               &ESTAB_NAME

   let $ESTAB_TBL-ADDRESS1 = &ADDRESS1
   let $ESTAB_TBL-ADDRESS2 = &ADDRESS2
   let $ESTAB_TBL-ADDRESS3 = &ADDRESS3
   let $ESTAB_TBL-ADDRESS4 = &ADDRESS4
   let $ESTAB_TBL-CITY = &CITY
   let $ESTAB_TBL-DESCR = &ESTAB_NAME

   do Get_Related_ESTAB_TBL(&EFFDT, &ESTABID)

   let $Addr1 = $ESTAB_TBL-ADDRESS1
   let $Addr2 = $ESTAB_TBL-ADDRESS2
   let $Addr3 = $ESTAB_TBL-ADDRESS3
   let $Addr4 = $ESTAB_TBL-ADDRESS4
   let $City = $ESTAB_TBL-CITY
   let $EstabName = $ESTAB_TBL-DESCR

   do Establishment-Print

from PS_ESTAB_TBL A, PS_REG_REGION_TBL R, PS_ESTAB_TBL_FRA AA
where A.ESTABID=$ESTABID
and AA.ESTABID = A.ESTABID
and A.REG_REGION = R.REG_REGION
and R.COUNTRY = $RegRegion
and A.EFFDT =
(
 select MAX(EFFDT)
 from PS_ESTAB_TBL B
 where B.ESTABID = A.ESTABID
 and B.REG_REGION = R.REG_REGION
 and R.COUNTRY = $RegRegion
 and B.EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
)
and A.EFF_STATUS = 'A'
and AA.EFFDT = A.EFFDT

end-SELECT

end-procedure Establishment-Retrieve

!***********************************************************************
!  Prints Establishement data
!***********************************************************************

begin-procedure Establishment-Print

   print $SIRET_CD_LBL                 (+2,1)
   let $SIRET_CODE = &SIREN_CD_FRA||&NIC_CD
   print &SIREN_CD_FRA                 (,+2)
   print $APE_CD_LBL                   (,+10)
   print &APE_INDSTRY_CD_FRA           (,+2)
   print $ESTAB_NAME_LBL               (+1,1)
   print $EstabName                    (,+2)
   print $ADDRESS_LBL                  (+1,1)
   if rtrim($Addr1, ' ') <> ''
      print $Addr1                  (+1,1)
        end-if
   if rtrim($Addr2, ' ') <> ''
      print $Addr2                  (+1,1)
        end-if
   if rtrim($Addr3, ' ') <> ''
      print $Addr3                  (+1,1)
        end-if
   if rtrim($Addr4, ' ') <> ''
      print $Addr4                  (+1,1)
        end-if
   print $POSTAL_LBL                   (+1,1)
   print &POSTAL                       (,+2)
   print $CITY_LBL                     (,+10)
   print $City                         (,+2)

end-procedure Establishment-Print

!***********************************************************************
!  Retrieves Personal Register
!***********************************************************************

begin-procedure Personal-Register-Retrieve

Move 0 to #Counter

let $LastEmplid = ''
let $LastAction = ''
let $LastActionDt = ''

do Define-PrimJob-Clause('C', $ENDDT, $PRIM_JOB_CLAUSE)

BEGIN-SELECT ON-ERROR=SQL-Error
B.EMPLID                                              &B.EMPLID
C.EMPL_RCD                                            &C.EMPL_RCD
B.SEX                                                 &B.SEX
{DATEOUT-PREFIX}B.BIRTHDATE{DATEOUT-SUFFIX}   &B.BIRTHDATE
C.ACTION                                              &C.ACTION
{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX}       &C.EFFDT
F.EMP_CATEGRY_FRA                                     &F.EMP_CATEGRY_FRA
C.EMPL_CLASS                                          &C.EMPL_CLASS
C.REG_REGION                                          &C.REG_REGION
C.FULL_PART_TIME                                      &C.FULL_PART_TIME
C.REG_TEMP                                            &C.REG_TEMP
B.NAME                                                &B.NAME
F.SETID                                               &F.SETID
F.JOBCODE                                             &F.JOBCODE
{DATEOUT-PREFIX}F.EFFDT{DATEOUT-SUFFIX}              &F.EFFDT
F.DESCR                                               &F.DESCR

   let $Name = &B.NAME
   let $JOBCODE_TBL-DESCR = &F.DESCR
   do Get_Related_JOBCODE_TBL(&F.EFFDT, &F.JOBCODE, &F.SETID)
   let $JobDescr = $JOBCODE_TBL-DESCR

   let $Sex = &B.SEX
   let $EECat = &F.EMP_CATEGRY_FRA

   do Construct-Add-Info

   if $LastEmplid <> &B.EMPLID
      if $LastAction = {ENTRY}
         Do LookForTransfers($LastEmplid, $LastActionDt, $ENDDT, $XfrEstab, $DateXfr)
         if not IsNull($DateXfr)
            if $XfrEstab <> $ESTABID   ! Leaves this Establishment
                  do Format-DateTime($DateXfr, $LeaveDate, {DEFDMY},'','')
               do Print-Leave-Info
            end-if
         end-if
      end-if
      ! Reinit
      let $LastAction = ''
   end-if

   if not IsNull(&B.BIRTHDATE)
      do Format-DateTime(&B.BIRTHDATE, $BirthDate, {DEFDMY},'','')
   end-if

   if &C.ACTION = 'HIR' OR &C.ACTION = 'REH' OR &C.ACTION = 'XFR'
      if not IsNull(&C.EFFDT)
         do Format-DateTime(&C.EFFDT, $EntryDate, {DEFDMY},'','')
      end-if
      let $ThisAction = {ENTRY}
      if $LastEmplid = &B.EMPLID
         if $LastAction = {ENTRY}
            Do LookForTransfers(&B.EMPLID, $LastActionDt, &C.EFFDT, $XfrEstab, $DateXfr)
            if not IsNull($DateXfr)
               if $XfrEstab <> $ESTABID   ! Leaves this Establishment
                     do Format-DateTime($DateXfr, $LeaveDate, {DEFDMY},'','')
                  do Print-Leave-Info
               end-if
            end-if
         end-if
      end-if
      do Citizenship-Retrieve(&B.EMPLID, $Country)
      do Print-Common-Info
      do Print-Entry-Info
   end-if

   if &C.ACTION = 'TER' OR &C.ACTION = 'RET' OR &C.ACTION = 'RWP' OR &C.ACTION = 'TWB' OR &C.ACTION = 'TWP'
      if not IsNull(&C.EFFDT)
         do Format-DateTime(&C.EFFDT, $LeaveDate, {DEFDMY},'','')
      end-if
      let $ThisAction = {LEAVE}
      if $LastEmplid <> &B.EMPLID
         if $LastAction = {LEAVE}
            print 'Error two Leaves for the same EMPLID detected' (+5,10)
         end-if
         do Citizenship-Retrieve(&B.EMPLID, $Country)
            do Print-Common-Info
         end-if
      do Print-Leave-Info
   end-if

   add 1 to #Counter

   let $LastAction = $ThisAction
   let $LastEmplid = &B.EMPLID
   let $LastActionDt = &C.EFFDT

FROM
PS_PERSONAL_DT_FST B
,PS_JOB C
,PS_JOBCODE_TBL F
,PS_REG_REGION_TBL R
WHERE
C.EMPLID = B.EMPLID
AND C.EMPL_RCD = [$PRIM_JOB_CLAUSE]
AND C.ESTABID = $ESTABID               ! EstabId
AND F.SETID = C.SETID_JOBCODE
AND F.JOBCODE = C.JOBCODE
AND C.ACTION IN ([$ACTIONSTRING])
AND C.REG_REGION = R.REG_REGION
AND R.COUNTRY = $RegRegion             ! RegRegion
AND F.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOBCODE_TBL
 WHERE EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}                 ! EndPeriod
   AND SETID = F.SETID
   AND JOBCODE = F.JOBCODE
)
AND F.EFF_STATUS = 'A'
AND
(
 C.EFFDT >=
 (
  SELECT MAX(C1.EFFDT)
  FROM PS_JOB C1
  WHERE C1.EMPLID = C.EMPLID
    AND C1.EMPL_RCD = C.EMPL_RCD
    AND C1.EFFDT < {DATEIN-PREFIX}$STARTDT{DATEIN-SUFFIX}
 )
 OR C.EFFDT >= {DATEIN-PREFIX}$STARTDT{DATEIN-SUFFIX}
)
AND C.EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}                  ! EndPeriod
ORDER BY B.EMPLID,C.EFFDT ASC
END-SELECT

   if $LastAction = {ENTRY}
      Do LookForTransfers($LastEmplid, $LastActionDt, $ENDDT, $XfrEstab, $DateXfr)
      if not IsNull($DateXfr)
         if $XfrEstab <> $ESTABID   ! Leaves this Establishment
            do Format-DateTime($DateXfr, $LeaveDate, {DEFDMY},'','')
            do Print-Leave-Info
         end-if
      end-if
   end-if

end-procedure Personal-Register-Retrieve

!***********************************************************************
!  Constructs a string with Additonal Info
!***********************************************************************

begin-procedure Construct-Add-Info

   let $AddInfo = ''

   if &C.REG_TEMP = 'T'    ! Temp
      let $FieldName = 'REG_TEMP'
      let $FieldValue = &C.REG_TEMP
      do Read-Translate-Table
        let $XlatShortName = RTRIM($XlatShortName, ' ')
      if $XlatShortName <> ''
         let $AddInfo = $AddInfo || ' ' || $XlatShortName
      end-if
   end-if

   if &C.FULL_PART_TIME = 'P'  ! Part Time
      let $FieldName = 'FULL_PART_TIME'
      let $FieldValue = &C.FULL_PART_TIME
      do Read-Translate-Table
        let $XlatShortName = RTRIM($XlatShortName, ' ')
      if $XlatShortName <> ''
         let $AddInfo = $AddInfo || ' ' || $XlatShortName
      end-if
   end-if

   if &C.EMPL_CLASS = 'G' OR &C.EMPL_CLASS = 'P'      ! Agency/Temp Trainee
      let $Empl_Class = &C.EMPL_CLASS
      let $Reg_Region = &C.REG_REGION
      ! input: $Reg_Region, $Empl_Class; output: $Empl_Class_Abbrev
      do Get-Empl-Class-Name
      if $Empl_Class_Abbrev <> ''
         let $AddInfo = $AddInfo || ' ' || $Empl_Class_Abbrev
      end-if
   end-if

   do Get-Contract-Type(&B.EMPLID, &C.EMPL_RCD, &C.EFFDT, $ContractType)
        let $ContractType = RTRIM($ContractType, ' ')
   if $ContractType = ''
      let $AddInfo = $AddInfo || ' ' || $NO_CONTRACT_LBL
   else
      do Get-Descr-Contract-In-Group($ReportID, $ContractType, &C.EFFDT, $Result)
        let $Result = RTRIM($Result, ' ')
      if $Result <> ''
         let $AddInfo = $AddInfo || ' ' || $Result
      end-if
   end-if

end-procedure Construct-Add-Info

!***********************************************************************
!  Retrieves the description of a contract type if in the group searched
!***********************************************************************

begin-procedure Get-Descr-Contract-In-Group($ReportID, $ContractType, $EndDate,:$Result)

BEGIN-SELECT ON-ERROR=SQL-Error
C.SETID                                            &SETID
C.CONTRACT_TYPE                                    &CONTRACT_TYPE
{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX}            &EFFDT
C.DESCR                                            &CONTRACT_DESCR

   let $Result = &CONTRACT_DESCR

FROM
PS_CNTRCT_TYPE_GRP B
,PS_CNTRCT_TYPE_DEF D
,PS_PERS_CNTRCT_TYP C
WHERE B.GROUP_NAME = $ReportID
AND B.GROUP_NAME = D.GROUP_NAME
AND B.CONTRACT_TYPE = $ContractType
AND C.CONTRACT_TYPE = B.CONTRACT_TYPE
AND B.EFFDT = D.EFFDT
AND D.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_CNTRCT_TYPE_DEF
 WHERE EFFDT <= {DATEIN-PREFIX}$EndDate{DATEIN-SUFFIX}
   AND GROUP_NAME = D.GROUP_NAME
)
AND D.EFF_STATUS = 'A'
END-SELECT

end-procedure Get-Descr-Contract-In-Group

!***********************************************************************
!  Retrieves the contract type of an employee
!***********************************************************************

begin-procedure Get-Contract-Type($EmplID, #EmplRCD, $EndDate, :$ContractType)

let $ContractType = ''

BEGIN-SELECT ON-ERROR=SQL-Error
A.CONTRACT_TYPE   &A.CONTRACT_TYPE

   let $ContractType = &A.CONTRACT_TYPE

FROM
PS_CNT_ACTIVE_VW A
,PS_JOB B
WHERE A.EMPLID = $EmplID
AND B.EMPLID = A.EMPLID
AND B.EMPL_RCD = #EmplRCD
AND B.CONTRACT_NUM = A.CONTRACT_NUM
AND B.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$EndDate{DATEIN-SUFFIX}               ! End Period
   AND EMPLID = B.EMPLID
   AND EMPL_RCD = B.EMPL_RCD
)
AND B.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT <= B.EFFDT
   AND EMPLID = B.EMPLID
   AND EMPL_RCD = B.EMPL_RCD
)
END-SELECT

end-procedure Get-Contract-Type

!***********************************************************************
!  Prints common information
!***********************************************************************

begin-procedure Print-Common-Info

   let $FieldName = 'EMP_CATEGRY_FRA'
   let $FieldValue = $EECat
   do Read-Translate-Table

   do Find-Country-Descr($Country, $CountryDescr)

   print #Counter             (+1,{C01},7)  EDIT 999999
   print $Name                (,{C02},30)
   print $CountryDescr        (,{C03},12)
   print $Sex                 (,{C04},4)
   print $BirthDate           (,{C05},11)
   print $JobDescr            (,{C06},36)
   print $XlatShortName       (,{C07},8)
   print $AddInfo             (,{C08},36)
end-procedure Print-Common-Info

!***********************************************************************
!  Finds Country Descr
!***********************************************************************

begin-procedure Find-Country-Descr($Country, :$CountryDescr)

BEGIN-SELECT ON-ERROR=SQL-Error
COUNTRY        &COUNTRY
DESCRSHORT     &DESCRSHORT

   let $COUNTRY_TBL-DESCRSHORT = &DESCRSHORT
   do Get_Related_COUNTRY_TBL(&COUNTRY)
   let $CountryDescr = $COUNTRY_TBL-DESCRSHORT

FROM
PS_COUNTRY_TBL
WHERE COUNTRY = $Country
END-SELECT

end-procedure Find-Country-Descr

!***********************************************************************
!  Prints Entry Info
!***********************************************************************

begin-procedure Print-Entry-Info
   print $EntryDate                  (,{C09},11)     !Entry
end-procedure Print-Entry-Info

!***********************************************************************
!  Prints Leave Info
!***********************************************************************

begin-procedure Print-Leave-Info
   print $LeaveDate                  (,{C10})     !Leave
end-procedure Print-Leave-Info

!***********************************************************************
!  Retrieves Employee Transfers
!***********************************************************************

begin-procedure LookForTransfers($Emplid, $StartDate, $EndDate, :$XfrEstab, :$Date)

let $XfrEstab = ''
let $Date = ''

BEGIN-SELECT ON-ERROR=SQL-Error
C.DEPTID                                           &Find.DEPTID
C.SETID_DEPT                                       &Find.SETID_DEPT
{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX}            &Find.EFFDT

   let $Date = &Find.EFFDT
   do Find-Establishment(&Find.SETID_DEPT, &Find.DEPTID, $XfrEstab)

FROM
PS_PERSONAL_DT_FST B
,PS_JOB C
WHERE
B.EMPLID = $Emplid
AND C.EMPLID = B.EMPLID
AND C.EMPL_RCD =
(
 SELECT MIN(EMPL_RCD)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$EndDate{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
)
AND C.ACTION = 'XFR'
AND C.EFFDT > {DATEIN-PREFIX}$StartDate{DATEIN-SUFFIX}
AND C.EFFDT < {DATEIN-PREFIX}$EndDate{DATEIN-SUFFIX}
END-SELECT

end-procedure LookForTransfers

!***********************************************************************
!  Finds the ESTABID of a department
!***********************************************************************

begin-procedure Find-Establishment($SetID, $DeptID, :$XfrEstab)

BEGIN-SELECT ON-ERROR=SQL-Error
E.ESTABID      &F.ESTABID

   let $XfrEstab = &F.ESTABID

FROM
PS_DEPT_TBL E
,PS_ESTAB_TBL F
,PS_REG_REGION_TBL R
WHERE E.DEPTID = $DeptID
AND E.SETID = $SetID
AND F.ESTABID = E.ESTABID
AND F.REG_REGION = R.REG_REGION
AND R.COUNTRY = $RegRegion
AND E.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_DEPT_TBL
 WHERE EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
 AND SETID = E.SETID
 AND DEPTID = E.DEPTID
)
AND E.EFF_STATUS = 'A'
AND F.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_ESTAB_TBL
 WHERE EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
 AND ESTABID = F.ESTABID
)
AND F.EFF_STATUS = 'A'
END-SELECT

end-procedure Find-Establishment

!***********************************************************************
!  Retrieves Citizenship of an Employee
!***********************************************************************

begin-procedure Citizenship-Retrieve($Emplid, :$Country)

BEGIN-SELECT ON-ERROR=SQL-Error
Z.COUNTRY               &Z.COUNTRY
Z.CITIZENSHIP_STATUS    &Z.CITIZENSHIP_STATUS

   let $Country_tmp = &Z.COUNTRY
   let $Citizenship_status = &Z.CITIZENSHIP_STATUS

   if  $Country_tmp = 'FRA'
      if $Citizenship_status = '1' or $Citizenship_status = '5' or $Citizenship_status = ''
         let $Country = $Country_tmp      ! French citizenship
      end-if
   end-if

   if  $Country_tmp <> 'FRA' and $Country <> 'FRA'
      let $Country = $Country_tmp
   end-if

FROM
PS_CITIZENSHIP Z
WHERE Z.EMPLID = $Emplid
END-SELECT

end-procedure Citizenship-Retrieve

!***********************************************************************
!  Gets the actions for selects in this report
!***********************************************************************


begin-procedure get-action-grp

move '''' to $ActionString

BEGIN-SELECT

A.ACTION 

    move &A.ACTION to $Action
    do Build-action-string
FROM
PS_ACTION_DTL_FRA A
WHERE GROUP_ID = 'REG02'
END-SELECT
   
   concat '''' with $ActionString




end-procedure get-action-grp

begin-procedure Build-action-string
  if $ActionString  <> ''''
    concat ''',''' with $ActionString
  end-if
  concat $Action with $ActionString

end-procedure

!***********************************************************************

#include 'hrctlfra.sqc'  !Get run control parameter values
#include 'hrgetfra.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'
#Include 'getprimj.sqc'  !Routines for selecting EE's primary job
#Include 'getempcl.sqc'  !Get Employee Class Name
