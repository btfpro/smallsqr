!***********************************************************************
!  TRN010:  Active Scenario Summary                                    *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:42:03                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!                                                                      *
! This SQR create a report with total cost per department and          *
! employees approved per demand for the active scenario and a given    *
! budget period                                                        *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
!--ADDED FOR FIX 302027 STARTS
  do Find-Date-Format
!--ADDED FOR FIX 302027 ENDS
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-Heading 7

do Get_Field_Information ('TRN010',     'REPORT_TITLE',       $REPORTTITLE,     #DW)
do Get_Field_Information ('TRN010',     'BUDGET_PERIOD',      $BUDGETPERIODTXT,     #DW)
do Get_Field_Information ('TRN010',     'BASE_CURRENCY',      $BASECURRENCYTXT,     #DW)
do Get_Field_Information ('TRN010',     'DEPT',               $DEPTTXT,     #DW)
do Get_Field_Information ('TRN010',     'APPROVED',           $APPROVEDTXT,     #DW)
do Get_Field_Information ('TRN010',     'BUDGET',             $BUDGETTXT,     #DW)
do Get_Field_Information ('TRN010',     'RATIO',              $RATIOTXT,     #DW)
do Get_Field_Information ('TRN010',     'COST',               $COSTTXT,     #DW)
do Get_Field_Information ('TRN010',     'DEMAND_ID',          $DEMANDIDTXT,     #DW)
do Get_Field_Information ('TRN010',     'DEMANDS',            $DEMANDSTXT,     #DW)
do Get_Field_Information ('HR',         'BUS_UNIT',           $BUSUNITTXT,     #DW)
!--COMMENTED FOR FIX 302027 STARTS
!  #Include 'stdhdgtr.sqc'
!--COMMENTED FOR FIX 302027 ENDS
!--ADDED FOR FIX 302027 STARTS
  do Append_Report_Translation ('STDHDGTR')
  if $Program_Read = 'Y'
    do Get_Field_Information ('STDHDGTR', 'STDHDG_CO_NM',   $stdhdg_co_nm,   #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_REP_ID',  $stdhdg_rep_id,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_PAGE_NO', $stdhdg_page_no, #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_RUN_DT',  $stdhdg_run_dt,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_RUN_TM',  $stdhdg_run_tm,  #dummy_width)
    do Get_Field_Information ('STDHDGTR', 'STDHDG_END_REP', $stdhdg_end_rep, #dummy_width)
  end-if

  print '            '    (1,1)
  print $stdhdg_co_nm     ()          center
  print $stdhdg_rep_id    (+1,1)
  print $ReportID         (0,+2)
!***********************************************************************
! T-MBOWDEN-5: not to uppercase due to languages other than English    *
!***********************************************************************
! uppercase $ReportTitle                                               *
  print $ReportTitle      ()          center
  let #RptCol = {ColR} - 2
  print $stdhdg_page_no   (0,#RptCol)
  print #page-count       (0,+2)      edit 88888888
  print $stdhdg_run_dt    (+1,#RptCol)
  let $RepDate = StrToDate($ReportDate,{PTRPTDATE})
    evaluate $DT_FMT
     when = 'M'
          do Format-DateTime($RepDate,$Rep_dt,{DEFMDY},'','')
          break
     when = 'D'
          do Format-DateTime($RepDate,$Rep_dt,{DEFDMY},'','')
          break
     when-Other
          do Format-DateTime($RepDate,$Rep_dt,{DEFYMD},'','')
          break
     end-evaluate
  print $Rep_dt           (0,+1) 
  print $stdhdg_run_tm    (+1,#RptCol)
  print $ReportTime       (0,+1)
!--ADDED FOR FIX 302027 ENDS

  let $BudgetBusUnit = upper($BudgetBusUnit)
  let $REPORTTITLE = upper($REPORTTITLE)
  let $BUSUNITTXT = rtrim($BUSUNITTXT,' ') || ':'
  print $BUDGETPERIODTXT (+1, 2)
  print $BudgetPeriod    (, +2)
  print $BUSUNITTXT      (, +4)
  print $BudgetBusUnit   (, +2)
  print $BASECURRENCYTXT (, +4)
  print $BaseCurrency    (, +2)

if #HeaderType = 1
  print $DEPTTXT         (+2, 2)
  print $APPROVEDTXT     (, 46)
  print $BUDGETTXT       (, 69)
  print $RATIOTXT        (, 80)
  print $COSTTXT         (, 103)
else
  print $DEMANDIDTXT     (+2, 3)
  print $APPROVEDTXT     (, 48)
  print $DEMANDSTXT      (, 60)
end-if
  print '-'                (+1, 1, 108) fill
end-Heading

begin-procedure Init-Report
  move 'TRN010' to $ReportID
  move 'W' to $ReportMsgType  !Warning
  move 'Y' to $ReadyForPlan

  let #HeaderType = 1

! Process Scheduler setup
  do Stdapi-Init
  if $prcs_process_instance = ''
    !No Prompt
  else
     do Select-Parameters
  end-if

  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')

end-procedure

!--ADDED FOR FIX 302027 STARTS
begin-procedure Find-Date-Format

let $REC_FOUND = 'N'
begin-SELECT
A.USER_OPTION_VALUE
  let $REC_FOUND = 'Y'
FROM PSUSERPRSNLOPTN A

WHERE A.OPRID = $prcs_oprid
  AND A.USEROPTN = 'DFRMT'
end-SELECT

IF $REC_FOUND = 'N'
  let $DT_FMT = 'M'
ELSE
  LET $DT_FMT = &A.USER_OPTION_VALUE
  LET $DT_FMT = RTRIM($DT_FMT,' ')
END-If
 
end-procedure !Find-Date-Format
!--ADDED FOR FIX 302027 ENDS

begin-procedure Get-Values
  let $language_cd = $prcs_language_cd
  do Get-As-Of-Date
  do Get-TRN010-Param
end-procedure


begin-procedure Process-Main

! Base Currency
begin-SELECT
BASE_CURRENCY  &BaseCurr
  move &BaseCurr to $ReportCurr
  move &BaseCurr to $BaseCurrency
CUR_RT_TYPE    &BaseRtType
  move &BaseRtType to $ReportRtType
FROM PS_TRN_BASE_CUR
end-SELECT

! Department List
let #TotalApproved = 0
let #TotalBudget = 0
let #TotalCost = 0
begin-SELECT
EFFDT &BaseEffDt
FROM PS_BUDGET_PERIOD
WHERE BUDGET_PERIOD = $BudgetPeriod
end-SELECT
let $BaseEffDt = &BaseEffDt
begin-SELECT
A.DEPTID                            (+1, 2)
  do Print-Department
A.SCENARIO
SUM(B.DEMAND_APPROVED) &SumApproved (, 48) EDIT 999999
  let #TotalApproved = #TotalApproved + &SumApproved
  do Get-Department-Budget
  do Compute-Cost
FROM PS_TRN_SCENARIO A, PS_TRN_SIMULATION B
WHERE A.BUDGET_PERIOD = $BudgetPeriod
AND A.BUSINESS_UNIT = $BudgetBusUnit
AND SCENARIO_STATUS = 'A'
AND A.BUDGET_PERIOD = B.BUDGET_PERIOD
AND A.DEPTID = B.DEPTID
AND A.SCENARIO = B.SCENARIO
AND A.BUSINESS_UNIT = B.BUSINESS_UNIT
GROUP BY A.DEPTID, A.SCENARIO
end-SELECT
do Print-Tail

new-page

! Demand List
let #HeaderType = 2
let #TotalApproved = 0
let #TotalDemand = 0
begin-SELECT
C.EE_DEMAND_SW
  do Print-Demand-Type
B.DEMAND_ID                          (, 3)
C.DESCR                              (, +2)
SUM(B.DEMAND_APPROVED) &SumApproved2 (, 50) EDIT 999999
MAX(C.TOTAL_DEMAND)    &SumDemand    (, 61) EDIT 999999
  let #TotalApproved = #TotalApproved + &SumApproved2
  let #TotalDemand = #TotalDemand + &SumDemand
FROM PS_TRN_SCENARIO A,
PS_TRN_SIMULATION B,
PS_TRN_DEMAND C
WHERE A.BUDGET_PERIOD = $BudgetPeriod
AND A.BUSINESS_UNIT = $BudgetBusUnit
AND SCENARIO_STATUS = 'A'
AND A.BUDGET_PERIOD = B.BUDGET_PERIOD
AND A.BUSINESS_UNIT = B.BUSINESS_UNIT
AND A.DEPTID = B.DEPTID
AND A.SCENARIO = B.SCENARIO
AND B.BUDGET_PERIOD = C.BUDGET_PERIOD
AND B.BUSINESS_UNIT = C.BUSINESS_UNIT
AND B.DEMAND_ID = C.DEMAND_ID
GROUP BY C.EE_DEMAND_SW, B.DEMAND_ID, C.DESCR
end-SELECT
do Print-Tail
end-procedure

#include 'hrtrnrpt.sqc'  !Get User procedure

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines

#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'

