!***********************************************************************
!  RSISTCD: State Specific Code used by the TAX960ST.sqr program       *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  06/21/2010 RSI-HCM101507  v1.0                                      *
!  Descr: Create new EF W-2 Reporting Program                          *
!                                                                      *
!  10/21/2010 RSI-HCM101705  v2.0                                      *
!  Descr: 2010 state annual reporting requirements updates, fixes,     *
!         and enhancements.                                            *
!                                                                      *
!  12/16/2010 RSI-HCM101916  v2.2                                      *
!  Descr: Modified code to correct state EIN.                          *
!                                                                      *
!  02/14/2011 RSI-HCM102059  v3.0                                      *
!  Descr: Combined TAX962ST reporting functionality into this program. *
!         Replaced and/or removed deprecated code.                     *
!         Corrections to variables, syntax, and code as necessary.     *
!         Modified Reporting Medium functionality commensurate with    *
!         run control page changes.                                    *
!         Corrected Common Paymaster functionality.                    *
!         State W-2 TAX960ST changes for multiple states.              *
!                                                                      *
!  12/07/2011 RSI-HCM102478  v3.1                                      *
!  Descr: 2011 state annual reporting requirements updates, fixes,     *
!         and enhancements.                                            *
!                                                                      *
!  01/05/2012 RSI-HCM102299  v4.0                                      *
!  Descr: Enhanced to include 7.x support and file changes for Indiana.*
!                                                                      *
!  07/19/2012 RSI-HCM102863  v4.1                                      *
!  Descr: Resolved the MD missing MW508 information error log issue.   *
!                                                                      *
!  12/07/2012 RSI-HCM103042  v4.2                                      *
!  Descr: 2012 state annual reporting requirements updates, fixes,     *
!         and enhancements.   Added .txt to Utah file extension.       *
!         Removed obsolete logic related to file name and location.    *
!                                                                      *
!  01/22/2013 RSI-HCM103228  v4.3                                      *
!  Descr: 2012 Electronic Filing Specifications for West Virginia      *
!         and Kentucky.                                                *
!         Added Employer Healthcare Coverage Amount for Reporting      *
!         on RW and RT Records.                                        *
!         Added Program Version for RSI Modification History.          *
!                                                                      *
!  02/11/2013 RSI-HCM103305  v4.4                                      *
!  Descr: 2012 Electronic Filing Specification changes for Colorado,   *
!         Indiana, Maine, Mississippi, and New Mexico.                 *
!         Misc. updates to remove unnecessary code, correct variable   *
!         names, trim trailing spaces, etc. as needed.                 *
!                                                                      *
!  10/15/2013 RSI-HCM103695  v5.0                                      *
!  Descr: 2013 Electronic Filing Specification changes for NJ          *
!                                                                      *
!  12/06/2013 RSI-HCM103765  v6.0                                      *
!  Descr: 2013 W-2 Electronic Filing specifiation changes.             *
!         Added Employer Contact Name, Contact Phone, Extension, Fax   *
!         and Contact Email Address to RE Record for Maryland.         *
!         Removed State Account Nbr in RE Record for Maryland.         *
!                                                                      *
!  02/26/2014 RSI-HCM103955  v7.0                                      *
!  Descr: Corrected EIN validation for AL and MS.                      *
!                                                                      *
!  04/01/2014 RSI-HCM103910  v8.1                                      *
!  Descr: Removed validation of all State EINs.                        *
!                                                                      *
!  08/27/2014 RSI-HCM104244  v9.0                                      *
!  Descr: 2014 W-2 Electronic Filing specifiation changes.             *
!         Added Partial W2 File indicator,Partial 1099 File indicator  *
!         and NAICS code in RV Record for Maryland.                    *
!                                                                      *
!  02/10/2015 RSI-HCM104700  v10.1                                     *
!  Descr: Corrected Maine missing RE Record issue.                     *
!         Corrected Alabama invalid State EIN on the RS Record.        *
!         Corrected Nebraska invalid State EIN on the RS Record.       *
!                                                                      *
!  08/25/2015 RSI-HCM104869  v11.0                                     *
!  Descr: Add code to limit Pennsylvania file size to 6800 lines.      *
!         Fix output report error for Ohio Employees with Local Taxes  *
!                                                                      *
!  12/07/2015 RSI-HCM105389  v12.1                                     *
!  Descr: Changed Tax Type Code to space in SC RS Record.              *
!         Modified to print employee address in NC RS and RW Records.  *
!                                                                      *
!  01/25/2016 RSI-HCM105541  v13.0                                     *
!  Descr: Add code to fix RT record totals for Pennsylvania            *
!                                                                      *
!  10/17/2016 RSI-HCM105840  v14.2                                     *
!  Descr: Add Iowa specific code.                                      *
!                                                                      *
!  12/20/2016 RSI-HCM106116  v15.0                                     *
!  Descr: Correct reporting of IN state wages and taxes when EE has    *
!         multiple locality wages and taxes.                           *
!                                                                      *
!***********************************************************************

!Alabama State Specific Code
!***********************************************************************
! Procedure AL-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure AL-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      open $_FileID as 10 for-writing record=512:fixed_nolf
      Break
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'
      !No RA Record is required for this state.
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      !No RE Record is required for this state.
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      do RS-CommonClear

      move #_Fed_Tax  to $_Fed_Tax_AL     0999999999
      move $_Sp2      to $_StateNumCdA
      let  $_ALStateEIN = ltrim(rtrim($_StateEIN,' '),' ')
      let  $_ALStateEIN = lpad($_ALStateEIN,10,'0')

      move $_Sp22     to $_Zero22
      move #_Local_Wages to $_Local_Wages    09999999999
      move #_Local_Tax   to $_Local_Taxes    09999999999

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do Write-RS-Record-for-AL
      do After-RS-Record
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      add #_Count_S to #_StateW2Cnt
      do Print-State-Totals
      !No RT Record is required for this state.
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure AL-Specific

!Arkansas State Specific Code
!***********************************************************************
! Procedure AR-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure AR-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4      to $_Local_Wages
      move $_Sp4      to $_Local_Taxes
      move $_FedEIN   to $_SupplData1  099999999
      let $_SupplData1 = rpad($_SupplData1,75,' ')
      let $_SupplData2 = $_StateEIN
      let $_SupplData2 = rpad($_SupplData2,75,' ')

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
  End-Evaluate

End-Procedure AR-Specific

!Arizona State Specific Code
!***********************************************************************
! Procedure AZ-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure AZ-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If

      do Clear-Space-Fields
      Break
  End-Evaluate

End-Procedure AZ-Specific

!Colorado State Specific Code
!***********************************************************************
! Procedure CO-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure CO-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-Transmitter-Records'--------------------------------
    When = 'Write-Transmitter-Records'
      let $_Hold_TLcn            = $_TLcn
      let $_Hold_Co_Dta_Address1 = $_Co_Dta_Address1
      let $_Hold_US_ZipXtnsn     = $_US_ZipXtnsn
      let $_Hold_Frgn_State      = $_Frgn_State
      let $_Hold_Frgn_Zip        = $_Frgn_Zip
      let $_Hold_Country_2Char   = $_Country_2Char

      If rtrim($_TLcn,' ') = ''
         let $_TLcn = $_Sp6
      End-If

      If rtrim($_Co_Dta_Address1,' ') = ''
         let $_Co_Dta_Address1 = $_Sp22
      End-If

      If rtrim($_US_ZipXtnsn,' ') = ''
         let $_US_ZipXtnsn = $_Sp4
      End-If

      If rtrim($_Frgn_State,' ') = ''
         let $_Frgn_State = $_Sp23
      End-If

      If rtrim($_Frgn_Zip,' ') = ''
         let $_Frgn_Zip = $_Sp15
      End-If

      If rtrim($_Country_2Char,' ') = ''
         let $_Country_2Char = $_Sp2
      End-If

      let $_Software_vendor = '1414'
      let $_PreparerCd = 'L'
      do Write-RA-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      let $_Co_Dta_Address1 = $_Hold_Co_Dta_Address1
      let $_US_ZipXtnsn     = $_Hold_US_ZipXtnsn
      let $_Frgn_State      = $_Hold_Frgn_State
      let $_Frgn_Zip        = $_Hold_Frgn_Zip
      let $_Country_2Char   = $_Hold_Country_2Char
      do Print-RA-Record
      let $_TLcn            = $_Hold_TLcn
      Break
!From Procedure 'Foreign-Address-Test'----------------------------------
    When = 'Foreign-Address-Test'
      If $_Country = 'PRI' or
         $_Country = 'GUM' or
         $_Country = 'VIR' or
         $_Country = 'ASM' or
         $_Country = 'MNP'
         let  $_Country_2Char    = $_Sp2
         move &_C.COUNTRY_2CHAR to $_StateCode
      End-If
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      If $_Country = 'PRI' or
         $_Country = 'GUM' or
         $_Country = 'VIR' or
         $_Country = 'ASM' or
         $_Country = 'MNP'
         let $_ErUS_State      = $_StateCode
         let $_ErUS_Zip        = $_Zip
         let $_ErUS_ZipXtnsn   = $_ZipExtsn
         let $_ErFrgn_Zip      = $_Sp1
         let $_ErFrgn_State    = $_Sp1
         let $_ErCountry_2Char = $_Sp1
      End-If

      let $_Sp4a = $_Zero4

      let $_Hold_Tax_Jurisdiction = $_Tax_Jurisdiction
      let $_Tax_Jurisdiction      = $_Zero1

      do Write-RE-Record

      let $_Sp4a = rpad('',4,' ')
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do Print-RE-Record
      let $_Sp4              = rpad('',4,' ')
      let $_Tax_Jurisdiction = $_Hold_Tax_Jurisdiction
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4             to $_Local_Wages
      move $_Sp4             to $_Local_Taxes
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_RptgPeriod       = '12' || $_RptgPeriod

      let $_TaxingEntityCd     = $_Zero5
      let $_Sp2                = $_Zero2
      let $_WorkWeeks          = $_Zero2
      let $_EmployDate         = $_Zero8
      let $_SepDate            = $_Zero8
      let $_OtherStateData     = $_Zero10
      let $_Tax_Type_Cd        = $_Zero1
      let $_Local_Wages        = $_Zero11
      let $_Local_Taxes        = $_Zero11
      let $_StateControlNumber = $_Zero7
      let $_SupplData1         = rpad('',75,'0')
      let $_SupplData2         = rpad('',75,'0')

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      let  $_Sp2  = rpad('',2,' ')
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes
      Break
!From Procedure 'Populate-EE-Address'-----------------------------------
    When = 'Populate-EE-Address'
      If $_Country = 'PRI' or
         $_Country = 'GUM' or
         $_Country = 'VIR' or
         $_Country = 'ASM' or
         $_Country = 'MNP'
         let $_US_State    = $_StateCode
         let $_US_Zip      = $_Zip
         let $_US_ZipXtnsn = $_ZipExtsn
         let $_Frgn_Zip    = $_Sp1
         let $_Frgn_State  = $_Sp1
      End-If
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
  End-Evaluate

End-Procedure CO-Specific

!Connecticut State Specific Code
!***********************************************************************
! Procedure CT-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure CT-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      do Blank-T-Record

      move #_Count_S       to #_Count_T
      move #_Count_T       to $_Count_T         0999999
      add  #_Count_T       to #_Count_F
      move #_State_Wages_T to $_State_Wages_T   099999999999999
      move #_State_Tax_T   to $_State_Tax_T     099999999999999
      add  1               to #_Tot_Record_Count

      do Write-RT-Record-for-CT

      do Zero-S-Record
      move 0 to #_SS_Med_T
      move 0 to #_FRMALOC_Retire_Fund_T
      move 0 to #_MA_Fed_Wages_T
      move 0 to #_Count_S

      add #_Count_T to #_StateW2Cnt
      do Print-State-Totals
      Break
!From Procedure 'Write-F-Record'----------------------------------------
    When = 'Write-F-Record'
      move #_Count_F       to $_Count_F        099999999
      move #_State_Wages_F to $_State_Wages_F  0999999999999999
      move #_State_Tax_F   to $_State_Tax_F    0999999999999999

      do Write-RF-Record-for-CT
      Break
  End-Evaluate

End-Procedure CT-Specific

!Washington DC State Specific Code
!***********************************************************************
! Procedure DC-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure DC-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      move $_StateEIN to $_StateEIN 00000000000099999999

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4             to $_Local_Wages
      move $_Sp4             to $_Local_Taxes
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_RptgPeriod       = '12' || $_RptgPeriod
      move $_Sp22            to $_Zero22

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
   End-If
      let $_Zero22 = rpad('',22,'0')
      Break
  End-Evaluate

End-Procedure DC-Specific

!Delaware State Specific Code
!***********************************************************************
! Procedure DE-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure DE-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      move $_Sp8 to $_StateEIN

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4     to $_Local_Wages
      move $_Sp4     to $_Local_Taxes

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      move $_FedEIN to $_StateEIN
      move $_FedEIN to $_RptStateEIN

      add #_Count_S to #_StateW2Cnt
      do Print-State-Totals
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
  End-Evaluate

End-Procedure DE-Specific

!Georgia State Specific Code
!***********************************************************************
! Procedure GA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_StateEIN)
!***********************************************************************
Begin-Procedure GA-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      let $_StateEmplIN = $_StateEIN

      If $_Filetype = 'D'
         If #_RecordCount >= #_MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If
      do Write-RE-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4             to $_Local_Wages
      move $_Sp4             to $_Local_Taxes
      move $_Sp6             to $_StateEIN
      move $_StateEmplIN     to $_StateControlNumber
      move &_TX.BALANCE_YEAR to $_RptgPeriodYr
      let  $_OtherStateData   = '12/31/' || $_RptgPeriodYr
      move $_Sp6              to $_RptgPeriod
      move $_Sp22             to $_Zero22
      move $_Sp2              to $_WorkWeeks
      move $_Sp8              to $_EmployDate
      move $_Sp8              to $_SepDate
      move $_Sp20             to $_StateEIN

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do Write-RS-Record-for-GA
      do After-RS-Record
      Break
  End-Evaluate

End-Procedure GA-Specific

!Iowa State Specific Code
!***********************************************************************
! Procedure IA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure IA-Specific($Proc_Name)

  Evaluate $Proc_Name
    When = 'Write-S-Record'
      do Write-RS-Record-for-IA
      do After-RS-Record
      Break
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      move #_Count_S       to $_Count_S         0999999
      move #_State_Tax_T   to $_State_Tax_T     099999999999999
      move #_State_Wages_T to $_State_Wages_T   099999999999999

      do Write-RV-Record-for-IA
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-State-Totals
      do IA-Specific-Addl1   !Print-RV-Record-for-IA
      Break
  End-Evaluate

End-Procedure IA-Specific

!***********************************************************************
! Procedure IA-Specific-Addl1  !Print-RV-Record-for-IA
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure IA-Specific-Addl1

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Total Number of RS records      : ' (+2,5)
  move   $Count_S to #out
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Taxable Wages       : ' (+1,5)
  move   $State_Wages_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Income Tax Withheld : ' (+1,5)
  move   $State_Tax_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  let    $Separator = rpad('',48,'-')
  print  $Separator                          (+1,5)

  let $Column_Hdr = ' '

End-Procedure IA-Specific-Addl1

!Idaho State Specific Code
!***********************************************************************
! Procedure ID-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure ID-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      move $_StateEIN to $_StateEIN  99999999999999999999

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp22 to $_Zero22
      move $_Sp6  to $_RptgPeriod

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_TaxPeriod        = '12' || $_RptgPeriod
      do Print-State-Totals
      do ID-Specific-Addl1
      do Write-RV-Record-for-ID
      add 1 to #_Tot_Record_Count
      do ID-Specific-Addl2  !Print-RV-Record-for-ID
      Break
  End-Evaluate

End-Procedure ID-Specific

!***********************************************************************
! Procedure ID-Specific-Addl1
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure ID-Specific-Addl1

Begin-Select
ID.DATE_FILED
ID.DATE_DUE
ID.RSI_BALNCE_PENALTY
ID.RSI_LATE_PENLTY_W2
ID.RSI_MAX_BAL_PENLTY
ID.RSI_MAX_LATE_PNLTY
ID.RSI_MIN_BAL_PENLTY
ID.RSI_MIN_LATE_PNLTY
ID.RSI_DAILY_INT_RATE
ID.RSI_FILING_CYCLE
ID.RSI_ID967_LINE3B
ID.RSI_ID967_LINE3C
ID.TOTAL_TAXES_YTD

FROM PS_RC_TAX960ID_RSI ID
WHERE ID.OPRID       = $Prcs_OprID
  AND ID.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND ID.COMPANY     = $Company
End-Select

  let #InterestRate   = &ID.RSI_DAILY_INT_RATE
  let #TaxesPaid      = &ID.TOTAL_TAXES_YTD
  let #LatePenaltyW2  = &ID.RSI_LATE_PENLTY_W2
  let #TaxWithld      = round((#State_Tax_T / 100),0)
  let #TaxDue         = round((#TaxWithld - #TaxesPaid),0)
  let #MaxPenalty     = (&ID.RSI_MAX_BAL_PENLTY * #Taxdue)
  let #MinPenalty     = &ID.RSI_MIN_BAL_PENLTY
  let #BalancePenalty = &ID.RSI_BALNCE_PENALTY
  let $FilingCycle    = &ID.RSI_FILING_CYCLE

  Evaluate $FilingCycle
    When = 'B'
      move &ID.RSI_ID967_LINE3B to $MonthlyTax
      move &ID.RSI_ID967_LINE3C to $YTDtax
      let $MonthlyTax            = lpad($MonthlyTax,11,'0')
      let $YTDtax                = lpad($YTDtax,11,'0')
    When-Other
      let $MonthlyTax = $Sp1
      let $YTDtax     = $Sp1
  End-Evaluate

  let  $NameCntrl          = substr(rtrim($ErName,' '),1,4)
  let  #StateEIN_RV        = $StateEIN
  let  $StateEIN_RV        = #StateEIN_RV
  let  $SWT_ID_Numeric     = substr($StateEIN_RV, 1, 9)
  move $SWT_ID_Numeric    to $StateEIN_RV                           099999999
  let  $StateEIN           = $StateEIN_RV
  let  #State_Wages_T_out  = round((#State_Wages_T / 100),0) * 100
  let  #State_Tax_T_out    = round((#State_Tax_T / 100),0) * 100
  move #State_Wages_T_out to $State_Wages_T                         09999999999
  move #State_Tax_T_out   to $State_Tax_T                           09999999999
  let  #TaxesPaid          = round(#TaxesPaid,0) * 100
  move #TaxesPaid         to $TaxesPaid                             09999999999
  move $Sp1               to $SpltMnthly
  move $Sp1               to $CalPymnts
  move $Sp1               to $Total1099                             0999999
  move $Zero1             to $FedState1099
  move #Count_S           to $TotalStatements                       0999999
  move #Count_S           to $TotalW2s                              0999999

  If #TaxDue = 0
     move 0          to #BalancePenalty
     move 0          to #BalanceInterest
     let  #TaxDueOut  = #TaxDue * 100
     move #TaxDueOut to $TaxDue                       09999999999
  End-If

  If #TaxDue < 0
     let  #TaxDueOut  = ((#TaxDue * (-1)) * 100)
     move #TaxDueOut to $TaxDue                       09999999999
     let  $TaxDueSign = '-'
     move 0          to #BalancePenalty
     move 0          to #BalanceInterest
  Else
     If #TaxDue > 0
        let  #TaxDueOut  = #TaxDue * 100
        move #TaxDueOut to $TaxDue                    09999999999
        let  $TaxDueSign = $Sp1

        If #BalancePenalty > #MaxPenalty
           let #BalancePenalty = #MaxPenalty
        Else
           If #BalancePenalty < #MinPenalty
              let #BalancePenalty = #MinPenalty
           End-If
        End-If
        let #DaysLate = datediff(&ID.DATE_FILED,&ID.DATE_DUE,'DAY')

        If #DaysLate > 0
           let #BalanceInterest = round(((#TaxDue * #InterestRate) * #DaysLate),0)
        Else
           let #BalanceInterest = 0
        End-If
     End-If
  End-If

  let  #BalanceInterestOut  = #BalanceInterest * 100
  move #BalanceInterestOut to $BalanceInterest       09999999999
  let  #BalancePenalty      = round(#BalancePenalty,0)
  let  #BalancePenaltyOut   = #BalancePenalty * 100
  move #BalancePenaltyOut  to $BalancePenalty         09999999999
  let  #TotalAmtDue         = (#TaxDue + #BalancePenalty + #BalanceInterest)

  If sign(#TotalAmtDue) = (-1)
     let  #TotalAmtOut  = ((#TotalAmtDue)*(-1) * 100)
     move #TotalAmtOut to $TotalAmtDue                09999999999
     let  $TotalAmtSign = '-'
  Else
     let  #TotalAmtOut  = (#TotalAmtDue * 100)
     move #TotalAmtOut to $TotalAmtDue                09999999999
     let  $TotalAmtSign = $Sp1
  End-If

  let #M_late1 = datediff(&ID.DATE_FILED,&ID.DATE_DUE,'MONTH')
  let #M_late2 = trunc(datediff(&ID.DATE_FILED,&ID.DATE_DUE,'MONTH'),0)

  If (#M_late1 - #M_late2) > 0
     let #MonthsLate = (#M_late2 + 1)
  Else
     let #MonthsLate = #M_late2
  End-If

  If #MonthsLate > 0
     let #LatePenalty = (#LatePenaltyW2 * #Count_S * #MonthsLate)

     If #LatePenalty < (&ID.RSI_MIN_LATE_PNLTY)
        let #LatePenalty = (&ID.RSI_MIN_LATE_PNLTY)
     Else
        If #LatePenalty > (&ID.RSI_MAX_LATE_PNLTY)
           let #LatePenalty = (&ID.RSI_MAX_LATE_PNLTY)
        End-If
     End-If
  Else
     let #LatePenalty = 0
  End-If

  let  #LatePenaltyOut  = (round(#LatePenalty,0) * 100)
  move #LatePenaltyOut to $LatePenalty               09999999999

  let #TotalTaxDue = (#TotalAmtDue + #LatePenalty)

  If sign(#TotalTaxDue) = (-1)
     let #TotalTaxDue  = (#TotalTaxDue * (-1))
     let $TotalDueSign = '-'
  Else
     let $TotalDueSign = $Sp1
  End-If

  let  #TotalTaxdueOut  = (#TotalTaxDue * 100)
  move #TotalTaxDueOut to $TotalDue                  09999999999

End-Procedure ID-Specific-Addl1

!***********************************************************************
! Procedure ID-Specific-Addl2  !Print-RV-Record-for-ID
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure ID-Specific-Addl2

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Tax Period        : ' (+2,5)
  print  $TaxPeriod            ()
  print 'Federal EIN       : ' (+1,5)
  print  $FedEIN               ()
  print 'Name Control      : ' (+1,5)
  print  $NameCntrl            ()
  print 'StateAccountNumber: ' (+1,5)
  print  $StateEIN             ()
  print 'Filing Cycle      : ' (+1,5)
  print  $FilingCycle          ()
  let    $Separator = rpad('',86,'-')
  print  $Separator            (+1,5)
  print 'Idaho Form 967'       (+1,5
  let    $Separator = rpad('',86,'-')
  print  $Separator            (+1,5)
  print 'Total Idaho Taxable Wages.                                      Line 1: ' (+1,5)
  let    #State_Wages_T_out = #State_Wages_T_out /100
  print  #State_Wages_T_out                                                        (,77)  edit 99,999,999,999
  print 'Total Idaho Tax withheld on W-2s.                               Line 2: ' (+1,5)
  let    #State_Tax_T_out = #State_Tax_T_out /100
  print  #State_Tax_T_out                                                          (,77)  edit 99,999,999,999
  print 'Total withholding payments during the year, or Split'                     (+1,5)
  print 'Monthly Filing: Payments 1/16 this year to 1/15 new year.    Line 3/3b: ' (+1,5)
  let    #TaxesPaid = #TaxesPaid /100
  print  #TaxesPaid                                                                (,77)  edit 99,999,999,999
  print 'Split Monthly Filing, Payments 1/1 to 1/15 of new year.        Line 3c: ' (+1,5)
  move   $MonthlyTax to #out
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Split Monthly Filing, Calendar year payments.                  Line 3d: ' (+1,5)
  move   $YTDtax to #out
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Remaining Tax due.                                              Line 4: ' (+1,5)

  If $TaxDueSign = '-'
     let $TaxDue = '-' || $TaxDue
  End-If
  move   $TaxDue to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Penalty on balance due.                                         Line 5: ' (+1,5)
  move   $BalancePenalty to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Interest on balance due.                                        Line 6: ' (+1,5)
  move   $BalanceInterest to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Total amounts due.                                              Line 7: ' (+1,5)

  If $TotalAmtSign = '-'
     let $TotalAmtDue = '-' || $TotalAmtDue
  End-If
  move   $TotalAmtDue to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Total number of Idaho W-2s.                                     Line 8: ' (+1,5)
  move   $TotalW2s to #out
  print  #out                                                                      (,82)  edit 9,999,999
  print 'Total number of 1099s.                                          Line 9: ' (+1,5)
  move   $Total1099 to #out
  print  #out                                                                      (,82)  edit 9,999,999
  print 'Total number of statements.                                    Line 10: ' (+1,5)
  move   $TotalStatements to #out
  print  #out                                                                      (,82)  edit 9,999,999
  print 'Penalty for late filing.                                       Line 11: ' (+1,5)
  move   $LatePenalty to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  print 'Total due.                                                     Line 12: ' (+1,5)

  If $TotalDueSign = '-'
     let $TotalDue = '-' || $TotalDue
  End-If
  move   $TotalDue to #out
  let    #out = #out /100
  print  #out                                                                      (,77)  edit 99,999,999,999
  let    $Separator = rpad('',86,'-')
  print  $Separator                                                                (+1,5)
  print 'Fed/State combined 1099 participant? (1=Yes 0=No)'                        (+1,5)
  print  $FedState1099                                                             (,90)
  let    $Separator = rpad('',86,'-')
  print  $Separator                                                                (+1,5)

  let $Column_Hdr = ' '

End-Procedure ID-Specific-Addl2

!Illinois State Specific Code
!***********************************************************************
! Procedure IL-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure IL-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'
      do Write-Header-Record-for-IL
      let $_Software_Vendor = '1414'
      let $_PreparerCd = 'L'
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      do Write-RA-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-RA-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes
      let $_Zero22 = rpad('',22,'0')
      move $_Sp6 to $_RptgPeriod

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      move #_Count_S       to $_Count_S         0999999
      move #_State_Tax_T   to $_State_Tax_T     099999999999999
      move #_State_Wages_T to $_State_Wages_T   099999999999999

      do Write-RV-Record-for-IL
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-State-Totals
      do IL-Specific-Addl1   !Print-RV-Record-for-IL
      Break
  End-Evaluate

End-Procedure IL-Specific

!***********************************************************************
! Procedure IL-Specific-Addl1  !Print-RV-Record-for-IL
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure IL-Specific-Addl1

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Total Number of RS records      : ' (+2,5)
  move   $Count_S to #out
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Taxable Wages       : ' (+1,5)
  move   $State_Wages_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Income Tax Withheld : ' (+1,5)
  move   $State_Tax_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  let    $Separator = rpad('',48,'-')
  print  $Separator                          (+1,5)

  let $Column_Hdr = ' '

End-Procedure IL-Specific-Addl1

!Indiana State Specific Code
!***********************************************************************
! Procedure IN-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure IN-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      let $_StateEmplIN  = substr($_StateEIN, 1, 10)
      let $_Empl_TID_Loc = substr($_StateEIN, 11, 13)

      do Write-RE-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      !State requires local, county, and/or district wages and/or taxes
      do Load-Local-Amounts
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      If $_LocalReportable <> 'Y'
         move #_Local_Wages       to $_Local_Wages                  09999999999
         move #_Local_Tax         to $_Local_Taxes                  09999999999
         let  $_StateControlNumber = substr($_StateEIN,1,10)
         let  $_Empl_TID_Loc       = substr($_StateEIN,11,3)
         move $_Loc_Mag_CD        to $_OtherStateData x~
         let  $_OtherStateData     = lpad($_OtherStateData,10, ' ')

         If $_State_Reportable = 'Y'
            do Write-W-Record
            do Write-S-Record
         End-If
      End-If

      If $_State_Reportable = 'Y'
         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
!From Procedure 'Load-Local-Amounts'------------------------------------
    When = 'Load-Local-Amounts'
      If $_Lcl_Locality = '99990'
         add  #_Amount to #_State_Eic
         move 0        to #_Local_Wages
         add  #_Amount to #_Local_Tax
      Else
         Evaluate $_Lcl_Box
           When = $_YE_Local_Wages
             add  #_Amount to #_Local_Wages
             Break
           When = $_YE_Local_Tax
             add  #_Amount to #_Local_Tax
             Break
         End-Evaluate
      End-If
      Break
!From Procedure 'Report-Local-Amounts'----------------------------------
    When = 'Report-Local-Amounts'
      do Get-Locality-Mag-CD
      let $_Loc_Tax_Cd = rtrim($_Loc_Tax_Cd,' ')

      If $_Loc_Tax_Cd <> ''
        let $_LocalReportable = 'Y'
        let $_State_Reportable = 'Y'
        do Update-Report-Table
        let $_Local_Save = $_Locality
        move $_Loc_Tax_Cd to $_Loc_Mag_Cd xx
        do Write-S-Record-from-Local
      Else

         If $_Locality = '99990'
            do Update-Report-Table
         End-If
         move 0 to #_Local_Wages
         move 0 to #_Local_Tax
      End-If
      Break
!From Procedure 'Write-S-Record-from-Local'-----------------------------
    When = 'Write-S-Record-from-Local'
      move #_Local_Wages       to $_Local_Wages    09999999999
      move #_Local_Tax         to $_Local_Taxes    09999999999
      let  $_StateControlNumber = substr($_StateEIN,1,10)
      let  $_Empl_TID_Loc       = substr($_StateEIN,11,3)
      do Write-W-Record
      do Write-S-Record
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      move #_Adv_EIC   to $_Fed_EIC          09999999999
      move #_State_EIC to $_State_EIC        09999999999
      move 'D'         to $_Tax_Type_Cd

      If #_State_EIC = 0
        move $_Sp5 to $_Inadv
      else
        move 'INADV' to $_Inadv
      End-If

      If rtrim($_Loc_Mag_Cd, ' ') = ''
         let $_Loc_Mag_Cd = '00'
      End-If

      do Write-RS-Record-for-IN
      add #_State_EIC   to #_State_EIC_T
      add #_State_Wages to #_State_Wages_T
      add #_State_Tax   to #_State_Tax_T
      add #_Local_Wages to #_Local_Wages_T
      add #_Local_Tax   to #_Local_Tax_T
      add #_State_Wages to #_State_Wages_F
      add #_State_Tax   to #_State_Tax_F
      add #_Local_Wages to #_Local_Wages_F
      add #_Local_Tax   to #_Local_Tax_F
      add 1             to #_Count_S
      add 1             to #_S_Count_F
      add 1             to #_RecordCount
      add 1             to #_Tot_Record_Count
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_S <> 0
         let #_Count_T = #_Count_S
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_S to #_StateW2Cnt
      End-If

      move $_StateEmplIN to $_StateEIN
      move #_Count_S     to $_Count_S              0999999999999
      move #_State_Tax_T to $_State_Tax_T          0999999999999
      move #_Local_Tax_T to $_Local_Tax_T          0999999999999
      move #_State_EIC_T to $_State_EIC_T          0999999999999

      add 1  to #_RecordCount
      add 1  to #_Tot_Record_Count
      do Print-Local
      do Print-State-Totals
      move 0 to #_State_EIC_T
      Break
!From Procedure 'Print-Local'-------------------------------------------
    When = 'Print-Local'
      let $_Local_Desc1 = 'Local Wages & Taxes by County'
      let $_Local_Desc2 = '  TOTAL ALL COUNTIES:'
      Break
  End-Evaluate

End-Procedure IN-Specific

!Kansas State Specific Code
!***********************************************************************
! Procedure KS-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure KS-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4    to $_Local_Wages
      move $_Sp4    to $_Local_Taxes
      move $_Zero11 to $_SupplData1
      move $_Sp22   to $_Zero22

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
  End-Evaluate

End-Procedure KS-Specific

!Kentucky State Specific Code
!***********************************************************************
! Procedure KY-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure KY-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      !State requires local, county, and/or district wages and/or taxes
      do KY-Specific-Addl
      Break
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      move $_StateEIN to $_StateEIN      00000000000000999999

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
     If $_LocalReportable <> 'Y'
         move $_Sp4       to $_Local_Wages
         move $_Sp4       to $_Local_Taxes
         move $_Zero10    to $_OtherStateData
         move #_Ky_Kreda  to $_Ky_Kreda               09999999999
         move #_Ky_Kjda   to $_Ky_Kjda                09999999999
         move #_Ky_Kira   to $_Ky_Kira                09999999999
         move #_Ky_Kida   to $_Ky_Kida                09999999999
         let  #_TotalKYTax = #_Ky_Kreda + #_Ky_Kjda + #_Ky_Kira + #_Ky_Kida
         let  #_State_Tax  = #_State_Tax - #_TotalKYTax
         let  $_SupplData1 = rpad('',75,' ')
         let  $_SupplData2 = rpad('',75,' ')

         If $_State_Reportable = 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      Evaluate $_Agency
        When = 'LJCKY'
          let $_State_Wages = $_Sp1
          let $_State_Tax   = $_Sp1
          Break
        When-other
          move #_State_Wages to $_State_Wages    09999999999
          move #_State_Tax   to $_State_Tax      09999999999
          Break
      End-Evaluate

        do Write-RS-Record-for-KY
        do After-RS-Record
      Break
  End-Evaluate

End-Procedure KY-Specific

!***********************************************************************
! Procedure KY-Specific-Addl
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure KY-Specific-Addl

Begin-Select
KY.W2_AMOUNT
KY.LOCALITY
KY1.KEDFA_CD

  let #Amount      = &KY.W2_AMOUNT * 100
  let $KY_Locality = rtrim(&KY.LOCALITY, ' ')
  let $Kedfa_Cd    = rtrim(&KY1.KEDFA_CD, ' ')

  If $KY_Locality <> ''
    Evaluate $Kedfa_Cd
      When = '1'
        add  #Amount to #Ky_Kreda
        Break
      When = '2'
        add  #Amount to #Ky_Kjda
        Break
      When = '3'
        add  #Amount to #Ky_Kira
        Break
      When = '4'
        add  #Amount to #Ky_Kida
        Break
    End-Evaluate
  End-If

FROM  PS_YE_AMOUNTS KY, PS_RC_TAX960KY KY1
WHERE KY.COMPANY         = $Company
  AND KY.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND KY.EMPLID          = $Emplid
  AND KY.TAXFORM_ID      = $TaxForm_ID
  AND KY.SEQUENCE_NUMBER = #Sequence_Number
  AND KY.STATE           = 'KY'
  AND KY.BOX             = '17'
  AND KY.LOCALITY        = KY1.LOCALITY
End-Select

End-Procedure KY-Specific-Addl

!Louisiana State Specific Code
!***********************************************************************
! Procedure LA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure LA-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp2 to $_StateNumCd
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure LA-Specific

!Massachussetts State Specific Code
!***********************************************************************
! Procedure MA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MA-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'

      let $_Hold_EmprPIN         = $_EmprPIN
      let $_Hold_Software_Vendor = $_Software_Vendor
      let $_Hold_TLcn            = $_TLcn
      let $_Hold_SoftwareCD      = $_SoftwareCD
      let $_Hold_Notify_Method   = $_Notify_Method
      let $_Hold_PreparerCd      = $_PreparerCd

      let $_EmprPIN         = $_Sp8
      let $_Software_Vendor = $_Sp4
      let $_TLcn            = $_Sp6
      let $_SoftwareCD      = $_Sp2
      let $_PreparerCd      = $_Sp1

      do Write-RA-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      let $_EmprPIN = 'n/a'
      do Print-RA-Record

      let $_EmprPIN         = $_Hold_EmprPIN
      let $_Software_Vendor = $_Hold_Software_Vendor
      let $_TLcn            = $_Hold_TLcn
      let $_SoftwareCD      = $_Hold_SoftwareCD
      let $_Notify_Method   = $_Hold_Notify_Method
      let $_PreparerCd      = $_Hold_PreparerCd
      Break
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      move 0 to #_FRMALOC_Retire_Fund
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      let $_Tax_Jurisdiction = $_Sp1
      let $_Thrd_Pty_Sick    = $_Sp1

      do Write-RE-Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      let $_Tax_Jurisdiction = 'n/a'
      let $_Thrd_Pty_Sick    = 'n/a'

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do Print-RE-Record
      let $_Tax_Jurisdiction = $_Sp1
      let $_Thrd_Pty_Sick    = $_Sp1
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp6                 to $_StateEIN
      move $_Sp4                 to $_Local_Wages
      move $_Sp4                 to $_Local_Taxes
      move #_FRMALOC_Retire_Fund to $_FRMALOC_Retire_Fund           09999999999
      move #_Fed_Wages           to $_MA_Fed_Wages                  09999999999
      let  #_TempHold             = #_SS_Tax + #_Med_Tax
      move #_TempHold            to $_TempHold                      09999999999
      let  $_Suppldata1           = ''
      move $_Sp22                to $_Zero22
      add  #_TempHold            to #_SS_Med_T
      add  #_FRMALOC_Retire_Fund to #_FRMALOC_Retire_Fund_T
      add  #_Fed_Wages           to #_MA_Fed_Wages_T

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      do Blank-T-Record

      move #_Count_S               to #_Count_T
      move #_Count_T               to $_Count_T       0999999
      add  #_Count_T               to #_Count_F
      move #_State_Wages_T         to $_State_Wages_T 099999999999999
      move #_State_Tax_T           to $_State_Tax_T   099999999999999
      move #_FRMALOC_Retire_Fund_T to $_SS_Tips_T     099999999999999
      move #_MA_Fed_Wages_T        to $_Adv_EIC_T     099999999999999
      move #_SS_Med_T              to $_Med_Tax_T     099999999999999

      do Write-RT-Record-For-MA

      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      do Zero-S-Record
      move 0 to #_SS_Med_T
      move 0 to #_FRMALOC_Retire_Fund_T
      move 0 to #_MA_Fed_Wages_T

      add #_Count_T to #_StateW2Cnt
      do Print-State-Totals
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure MA-Specific

!Maryland State Specific Code
!***********************************************************************
! Procedure MD-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MD-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      !State requires local, county, and/or district wages and/or taxes
      do Gather-Local-Amounts
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      let $_StateEIN = rtrim(ltrim($_StateEIN, ' '),' ')
      move $_StateEIN to $_StateAccountNumber  09999999
      move $_Sp1   to $_AgentID
      move $_Sp9   to $_AgentEIN
      move $_Zero1 to $_Thrd_Pty_Sick
      do Format-DateTime($_AsOfToday,$_DateSent, {DEFYMD},'','')
      let $_DateSent = substr($_DateSent,1,4)||
                       substr($_DateSent,6,2)||
                       substr($_DateSent,9,2)
      let $_TimeSent = substr($_AsOfNow,1,2) ||
                       substr($_AsOfNow,4,2) ||
                       substr($_AsOfNow,7,2) || '00'

      If $_Filetype = 'D'
         If #_RecordCount >= #_MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If
      do Write-RE-Record-for-MD
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do MD-Specific-Addl3  !Print-RE-Record-for-MD
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'

      do MD-Specific-Addl1

      move $_Sp2        to $_StateNumCdA
      move $_Sp4        to $_Local_Wages
      move $_Sp4        to $_Local_Taxes
      move $_Zero10     to $_OtherStateData
      add  #_Local_Tax  to #_State_Tax
      move #_Fed_Wages  to $_Fed_Wages            09999999999
      move #_Fed_Tax    to $_Fed_Tax              09999999999
      move #_Allowances to $_Allowances           09
      move $_Sp1        to $_StateEin

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do Write-RS-Record-for-MD
      do After-RS-Record
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      add #_Count_S to #_StateW2Cnt
      do MD-Specific-Addl2
      do Write-T-Record
      do Print-State-Totals
      do MD-Specific-Addl4      ! Print-RV-Record-for-MD
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      If rtrim($_ERaddress1,' ') = ''
         move $_ERaddress2 to $_ERaddress1
         move $_Sp1        to $_ERaddress2
      End-If

      move #_State_Wages_T to $_MD2_TotalPayroll  099999999999
      let $_StateCd_MA        = '24'
      let $_StateRcd          = 'MW508'
      let $_Partial_File_W2   = 'N'
      let $_Partial_File_1099 = 'N'
      let $_NAICS_Code        = '000000'
      let $_Sp158             = rpad('',158,' ')
      do Write-RV-Record-for-MD ! Write RV Record instead of RT Record
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure MD-Specific

!***********************************************************************
! Procedure MD-Specific-Addl1
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure MD-Specific-Addl1

  move 0 to #Allowances

Begin-Select
MD1.FWT_ALLOWANCES

  move &MD1.FWT_ALLOWANCES to #Allowances

FROM PS_FED_TAX_DATA MD1
WHERE MD1.COMPANY = $Company
  AND MD1.EMPLID  = $Emplid
  AND MD1.EFFDT   = (SELECT MAX(MDA.EFFDT)
                     FROM PS_FED_TAX_DATA MDA
                     WHERE MD1.COMPANY = MDA.COMPANY
                       AND MD1.EMPLID  = MDA.EMPLID
                       AND MDA.EFFDT  <= $AsOfDate)
End-Select

End-Procedure MD-Specific-Addl1

!***********************************************************************
! Procedure MD-Specific-Addl2
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure MD-Specific-Addl2

   let $MD2_Found = 'N'

Begin-Select
MD2.EMPL_CNT
MD2.RSI_WITHHOLD_TAX
MD2.RSI_TOTAL_TAX
MD2.RSI_WH_TAX_PAID
MD2.RSI_CREDITS
MD2.RSI_WITHHOLD_DUE
MD2.RSI_OVER_PAYMENT
MD2.RSI_OVPYMT_CREDIT
MD2.RSI_REFUND
MD2.RSI_TOTAL_FILE_IND
MD2.CONTACT_PERSON
MD2.CONTACT_PHONE
MD2.CONTACT_SIG_TITLE
MD2.DATE_FILED

   move &MD2.EMPL_CNT    to $MD2_EmplCnt                      099999
   let  $MD2_Found        = 'Y'
   let  $MD2_TotalTax     = edit(&MD2.RSI_TOTAL_TAX     * 100,'099999999999')
   let  $MD2_WH_Tax_Paid  = edit(&MD2.RSI_WH_TAX_PAID   * 100,'099999999999')
   let  $MD2_WHTax        = edit(&MD2.RSI_WITHHOLD_TAX  * 100,'099999999999')
   let  $MD2_Credits      = edit(&MD2.RSI_CREDITS       * 100,'099999999999')
   let  $MD2_WHDue        = edit(&MD2.RSI_WITHHOLD_DUE  * 100,'099999999999')
   let  $MD2_Overpayment  = edit(&MD2.RSI_OVER_PAYMENT  * 100,'099999999999')
   let  $MD2_OvpymtCredit = edit(&MD2.RSI_OVPYMT_CREDIT * 100,'099999999999')
   let  $MD2_Refund       = edit(&MD2.RSI_REFUND        * 100,'099999999999')
   let  $MD2_Rep          = rtrim(&MD2.CONTACT_PERSON,' ')
   let  $MD2_Rep_Title    = rtrim(&MD2.CONTACT_SIG_TITLE,' ')
   let  $MD2_Rep_Ph       = &MD2.CONTACT_PHONE
   let  $MD2_Rep_Ph       = translate($MD2_Rep_Ph,'-','')
   let  $MD2_Rep_Ph       = translate($MD2_Rep_Ph,'/','')
   let  $MD2_Rep_Date     = &MD2.DATE_FILED
   do Format-DateTime($MD2_Rep_Date, $Out, {DEFCMP}, '', '')
   let  $MD2_Rep_Date     = substr($Out, 1, 4) || substr($Out, 5, 2) || substr($Out, 7, 2)
   let  $MD2_TotalFileInd = &MD2.RSI_TOTAL_FILE_IND

FROM PS_RC_TAX960MD_RSI MD2
WHERE MD2.OPRID       = $Prcs_OprID
  AND MD2.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND MD2.COMPANY     = $Company
End-Select

   If $MD2_Found = 'N'
      let $Errors_Found = 'Y'
      let $Err_Msg      = $Company || ' is missing MW508 Information.'
      do Open-ErrorFile
   End-If
End-Procedure MD-Specific-Addl2

!***********************************************************************
! Procedure MD-Specific-Addl3  !Print-RE-Record-for-MD
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure MD-Specific-Addl3

  If $NewPage = 'Y'
     let $Column_Hdr = 'RE Record'
     new-page
     do Print-Columns
     let $NewPage_Written = 'Y'
  End-If

  print 'Payment Year      : ' (+2,5)
  print  $CalYear              ()
  print 'Federal EIN       : ' (+1,5)
  print  $FedEIN               ()
  print 'Employer Name     : ' (+1,5)
  print  $ErName               ()
  print 'Location Address  : ' (+1,5)
  print  $ErAddress1           ()
  print 'Delivery Address  : ' (+1,5)
  print  $ErAddress2           ()
  print 'City              : ' (+1,5)
  print  $ErCity               ()
  print 'State             : ' (+1,5)
  print  $ErUS_State           ()
  print 'Zip               : ' (+1,5)
  print  $ErUS_Zip             ()
  print 'Zip Extension     : ' (+1,5)
  print  $ErUS_ZipXtnsn        ()
  print 'Foreign State     : ' (+1,5)
  print  $ErFrgn_State         ()
  print 'Foreign Zip       : ' (+1,5)
  print  $ErFrgn_Zip           ()
  print 'Country Code      : ' (+1,5)
  print  $ErCountry_2Char      ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Contact Name     : '  (+1,5)
  print  $Contact_Name_Ssa     ()
  print 'Contact Phone    : '  (+1,5)
  print  $Telephone_Nbr        ()
  print 'Contact Extension: '  (+1,5)
  print  $Phone_Extn           ()
  print 'Contact Fax      : '  (+1,5)
  print  $Contact_Fax          ()
  print 'Contact E-Mail   : '  (+1,5)
  print  $Email_Addr           ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Other EIN         : ' (+1,5)
  print  $OtherEIN             ()
  print 'Tax Jurisdiction  : ' (+1,5)
  print  $TaxJurisdiction      ()
  print 'Date Sent         : ' (+1,5)
  print  $DateSent             ()
  print 'Time Sent         : ' (+1,5)
  print  $TimeSent             ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)

  let $Column_Hdr = ' '
  If $Print_Detail = 'Y'
     new-page
  End-If

End-Procedure MD-Specific-Addl3

!***********************************************************************
! Procedure MD-Specific-Addl4  !Print-RV-Record-for-MD
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure MD-Specific-Addl4

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Tax Period                     : ' (+2,5)
  print  $CalYear                           ()
  print 'Employer Identification Number : ' (+1,5)
  print  $FedEIN                            ()
  print 'Central Registration Number    : ' (+1,5)
  print  $StateAccountNumber                ()
  print 'Employer Name                  : ' (+1,5)
  print  $ErName                            ()
  print 'Employer Street Address        : ' (+1,5)
  print  $ErAddress1                        ()
  print 'Employer City                  : ' (+1,5)
  print  $ErCity                            ()
  print 'Employer State                 : ' (+1,5)
  print  $ErUS_State                        ()
  print 'Employer Zip Code              : ' (+1,5)
  print  $ErUS_Zip                          ()
  print 'Employer Zip Code Extension    : ' (+1,5)
  print  $ErUS_ZipXtnsn                     ()
  print 'Employer Representative Name   : ' (+1,5)
  print  $MD2_Rep                           ()
  print 'Employer Representative Title  : ' (+1,5)
  print  $MD2_Rep_Title                     ()
  print 'Employer Representative Phone  : ' (+1,5)
  print  $MD2_Rep_Ph                        ()
  print 'Employer Representative Date   : ' (+1,5)
  print  $MD2_Rep_Date                      ()
  print 'Employer Total File Indicator  : ' (+1,5)
  print  $MD2_TotalFileInd                  ()
  print 'Date Sent (YYYYMMDD)           : ' (+1,5)
  print  $DateSent                          ()
  print 'Time Sent (24HHMMSS)           : ' (+1,5)
  print  $TimeSent                          ()
  let    $Separator = rpad('',79,'-')
  print  $Separator                         (+1,5)
  print 'FORM MW508 Parameters:'            (+1,5)
  let    $Separator = rpad('',79,'-')
  print  $Separator                         (+1,5)
  print 'Total number of W-2 forms.                            Line 1: ' (+1,5)
  move   $MD2_EmplCnt to #MD2_EmplCnt
  do Format-Number(#MD2_EmplCnt, $Out, 'B999,999')
  print  $Out                                                            (,76)
  print 'Total Maryland withholding tax reported for the year. Line 2: ' (+1,5)
  move   $MD2_WHTax to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Total state/local tax shown on W-2 forms.             Line 3: ' (+1,5)
  move   $MD2_TotalTax to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Total amount of withholding tax paid this year.      Line 3a: ' (+1,5)
  move   $MD2_WH_Tax_Paid to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Total eligible business tax credits.                 Line 3b: ' (+1,5)
  move   $MD2_Credits to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Amount of withholding tax due.                        Line 4: ' (+1,5)
  move   $MD2_WHDue to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Overpayment.                                          Line 5: ' (+1,5)
  move   $MD2_Overpayment to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Amount of overpayment to be applied as a credit.      Line 6: ' (+1,5)
  move   $MD2_OvpymtCredit to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  print 'Amount of overpayment to be refunded.                 Line 7: ' (+1,5)
  move   $MD2_Refund to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  let    $Separator = rpad('',79,'-')
  print  $Separator                                                      (+1,5)
  print 'Total gross Maryland payroll for the calendar year          : ' (+1,5)
  move   $MD2_TotalPayroll to #Out
  let    #Out = #Out / 100
  do Format-Number(#Out, $Out,'99,999,999,999.99')
  print  $Out                                                            (,67)
  let    $Separator = rpad('',79,'-')
  print  $Separator                                                      (+1,5)

  let $Column_Hdr = ' '

End-Procedure MD-Specific-Addl4

!Maine State Specific Code
!***********************************************************************
! Procedure ME-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure ME-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      let $_FileID = $_FileOutputPath || $_ReportID2 || '.txt'
      let $_FileID = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      let $_StateAccountNumber = rtrim(ltrim($_StateEIN,' '),' ')
      let $_SWT_ID_Numeric     = substr($_StateAccountNumber, 10, 2)

      If rtrim(ltrim($_SWT_ID_Numeric,' '),' ') = ''
         let $_StateAccountNumber = rtrim($_StateAccountNumber, ' ') || '00'
      End-If

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_RptgPeriod       = '12' || $_RptgPeriod
      move #_Local_Wages     to $_Local_Wages    09999999999
      move #_Local_Tax       to $_Local_Taxes    09999999999

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'

       do ME-Specific-Addl
      Move #_MEPERS to $_MEPERS    0999999999

      do Write-RS-Record-for-ME
      do After-RS-Record
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
  End-Evaluate

End-Procedure ME-Specific

!***********************************************************************
! Procedure ME-Specific-Addl
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure ME-Specific-Addl

  move 0      to #MEPERS

Begin-Select
MEPERS.W2_AMOUNT

  let #MEPERS = &MEPERS.W2_AMOUNT * 100

FROM  PS_YE_AMOUNTS MEPERS
WHERE MEPERS.COMPANY         = $Company
  AND MEPERS.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND MEPERS.EMPLID          = $Emplid
  AND MEPERS.TAXFORM_ID      = $TaxForm_ID
  AND MEPERS.BOX             = '14YK'
End-Select

End-Procedure ME-Specific-Addl

!Michigan State Specific Code
!***********************************************************************
! Procedure MI-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MI-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp2  to $_StateNumCd
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp22 to $_Zero22

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      Evaluate $_Agency
        When = 'HURON'
          let $_State_Wages = $_Sp1
          let $_State_Tax   = $_Sp1
          Break
        When-other
          move #_State_Wages to $_State_Wages    09999999999
          move #_State_Tax   to $_State_Tax      09999999999
          Break
      End-Evaluate

        do Write-RS-Record
        do After-RS-Record
      Break
  End-Evaluate

End-Procedure MI-Specific

!Minnesota State Specific Code
!***********************************************************************
! Procedure MN-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MN-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp6  to $_RptgPeriod
      move $_Sp22 to $_Zero22
      move $_Sp2  to $_WorkWeeks
      move $_Sp8  to $_EmployDate
      move $_Sp8  to $_SepDate

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
  End-Evaluate

End-Procedure MN-Specific

!Missouri State Specific Code
!***********************************************************************
! Procedure MO-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MO-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp6  to $_RptgPeriod
      move $_Sp22 to $_Zero22
      move $_Sp2  to $_WorkWeeks
      move $_Sp8  to $_EmployDate
      move $_Sp8  to $_SepDate
      move $_Sp2  to $_StateNumCd

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      Evaluate $_Agency
        When = 'STLTA'
          move #_State_Wages to $_State_Wages    09999999999
          let  $_State_Tax    = $_Sp1
          Break
        When-other
          move #_State_Wages to $_State_Wages    09999999999
          move #_State_Tax   to $_State_Tax      09999999999
          Break
      End-Evaluate

        do Write-RS-Record
        do After-RS-Record
      Break
  End-Evaluate

End-Procedure MO-Specific

!Mississippi State Specific Code
!***********************************************************************
! Procedure MS-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MS-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      let $_FileID = $_FileOutputPath || $_ReportID2 || '.txt'
      let $_FileID = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      let $_StateEIN = rpad($_StateEIN,10,'0')

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4   to $_Local_Wages
      move $_Sp4   to $_Local_Taxes
      move #_Sp10  to $_OtherStateData 0999999999

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do Write-RS-Record-for-MS
      do After-RS-Record
      Break
  End-Evaluate

End-Procedure MS-Specific

!Montana State Specific Code
!***********************************************************************
! Procedure MT-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure MT-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_RptgPeriod       = '12' || $_RptgPeriod
      move #_Local_Wages     to $_Local_Wages    09999999999
      move #_Local_Tax       to $_Local_Taxes    09999999999

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
  End-Evaluate

End-Procedure MT-Specific

!North Carlina State Specific Code
!***********************************************************************
! Procedure NC-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure NC-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'
      !No RA Record is required for this state.

      let $_NewPage_Written = 'Y'
      let $_Column_Hdr      = 'RE Record'
      do Print-Columns
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      do RE-CommonClear
      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_zero11      to #_SS_Wages
      move $_zero11      to #_SS_Tax
      move $_zero11      to #_Med_Wages
      move $_zero11      to #_Med_Tax
      move $_zero11      to #_SS_Tips
      move $_zero11      to #_Adv_EIC
      move $_zero11      to #_Dep_Care
      move $_zero11      to #_401K
      move $_zero11      to #_403B
      move $_zero11      to #_408K6
      move $_zero11      to #_457B
      move $_zero11      to #_501C18D
      move $_zero11      to #_Non_Qual_457_Y
      move $_zero11      to #_Non_Qual_457_N
      move $_zero11      to #_Group_Term_ER_Cost
      move $_zero11      to #_Nonstatutory_Stock_Options
      move $_zero11      to #_HSA_Employer_Contrib
      move $_zero11      to #_NonTaxable_Combat_Pay
      move $_zero11      to #_Non_Qual_409A_Deferral
      move $_zero11      to #_Non_Qual_409A_Income
      move $_zero11      to #_Roth_401k
      move $_zero11      to #_Roth_403b
      move $_zero11      to #_Er_Hlth_Cvg
      move $_Sp1         to $_StatutoryEe
      move $_zero1       to #_RetirePlan
      move $_zero1       to #_Third_Party_Sick_Ind
      move $_Sp1         to $_Tax_Type_Cd
      move #_Local_Wages to $_Local_Wages    09999999999
      move #_Local_Tax   to $_Local_Taxes    09999999999
      move $_Sp22        to $_Zero22
      move $_Sp2         to $_WorkWeeks
      move $_Sp8         to $_EmployDate
      move $_Sp8         to $_SepDate

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'Write-S-Record-from-Local'-----------------------------
    When = 'Write-S-Record-from-Local'
      If $_FirstTime = 'Y'
         do Write-W-Record
         let $_FirstTime = 'N'
      End-If

      do Write-S-Record
      move 0 to #_Fed_Wages
      move 0 to #_Fed_Tax
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure NC-Specific

!North Dakota State Specific Code
!***********************************************************************
! Procedure ND-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure ND-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
  End-Evaluate

End-Procedure ND-Specific

!Nebraska State Specific Code
!***********************************************************************
! Procedure NE-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure NE-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      let $_StateEIN = lpad(rtrim($_StateEIN,' '),20,'0')

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp1  to $_Tax_Type_Cd
      move $_Sp22 to $_Zero22

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      move #_Count_S       to $_Count_T                    0999999
      move #_State_Wages_T to $_State_Wages_T              099999999999999
      move #_State_Tax_T   to $_State_Tax_T                099999999999999

      do Write-RV-Record-for-NE
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-State-Totals
      do NE-Specific-Addl1  !Print-RV-Record-for-NE
     Break
  End-Evaluate

End-Procedure NE-Specific

!***********************************************************************
! Procedure NE-Specific-Addl1  !Print-RV-Record-for-NE
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure NE-Specific-Addl1

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Total Number of RS records      : ' (+2,5)
  move   $Count_T to #out
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Taxable Wages       : ' (+1,5)
  move   $State_Wages_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Income Tax Withheld : ' (+1,5)
  move   $State_Tax_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  let    $Separator = rpad('',48,'-')
  print  $Separator                          (+1,5)

  let $Column_Hdr = ' '

End-Procedure NE-Specific-Addl1

!New Jersey State Specific Code
!***********************************************************************
! Procedure NJ-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure NJ-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Get-State-Parameters'---------------------------------
    When = 'Get-State-Parameters'
      if $_Test_File = 'Y'
         let $_Prod_Test_File  = rpad(rtrim('T',' '),4,' ')
         let $_File_Type_Title = 'TEST '
      else
         let $_Prod_Test_File  = rpad(rtrim('P',' '),4,' ')
         let $_File_Type_Title = 'PRODUCTION '
      end-if
      Break
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      !State requires local, county, and/or district wages and/or taxes
      do Gather-Local-Amounts
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp2 to $_StateNumCd
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes
      move $_Sp1 to $_Tax_Type_Cd

      #IfDef R_NJFLI
        Do NJ-Specific-R-FLI
      #EndIf

      #IfDef O_NJFLI
        Do NJ-Specific-O-FLI
      #EndIf

      If &_E.PENSION_PLAN = 'Y'
         move 'P' to $_Ppi
      Else
         move $_Sp1 to $_Ppi
      End-If
      let #_Dca = #_401k

      If #_Dca > 0
         move 'D' to $_Dci
      Else
         move $_Sp1 to $_Dci
      End-If
      move #_Dca to $_Dca  099999999
      do Write-W-Record
      do Write-S-Record

      If $_Print_Detail = 'Y'
         do Print-Employee-Detail
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do Write-RS-Record-for-NJ
      do After-RS-Record
      Break
  End-Evaluate

End-Procedure NJ-Specific

!***********************************************************************
! Procedure NJ-Specific-R-FLI
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-R-FLI
  move 0      to #OtherD
  move 0      to #OtherE_G
  move 0      to #OtherYL
  move $zero5 to $Njd
  move $zero5 to $Diw
  move $zero5 to $FLI_Withheld
  move $Sp1  to $Dptc
  move $Sp14 to $Pdpn
  let  $FLI_Plan_Type_Cd = $Sp1
  let  $FLI_Plan_Num     = rpad('', 14, ' ')

  do NJ-Specific-R-FLI-Addl1
  do NJ-Specific-R-FLI-Addl2

  move #Local_Tax to $Local_Taxes   09999999999
  move #OtherD    to $Njd           09999
  move #OtherE_G  to $Diw           09999
  move #OtherYL   to $FLI_Withheld  09999

End-Procedure NJ-Specific-R-FLI

!***********************************************************************
! Procedure NJ-Specific-R-FLI-Addl1
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-R-FLI-Addl1

Begin-Select
NJ.VDI_PLAN
NJ.VDI_PLAN_NBR

     move 'P' to $Dptc
     let $Pdpn = rpad(rtrim(&NJ.VDI_PLAN_NBR, ' '),14,' ')

FROM  PS_CO_STATETAX_TBL NJ
WHERE NJ.COMPANY  = $Company
  AND NJ.STATE    = 'NJ'
  AND NJ.VDI_PLAN = 'Y'
  AND NJ.EFFDT    = (SELECT MAX(NJ1.EFFDT)
                     FROM PS_CO_STATETAX_TBL NJ1
                     WHERE NJ1.COMPANY = NJ.COMPANY
                       AND NJ1.STATE   = NJ.STATE
                       AND NJ1.EFFDT  <= $AsOfDate)
End-Select

End-Procedure NJ-Specific-R-FLI-Addl1

!***********************************************************************
! Procedure NJ-Specific-R-FLI-Addl2
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-R-FLI-Addl2

Begin-Select
NG.BOX
NG.W2_AMOUNT

  let #Amount = &NG.W2_AMOUNT * 100
  let $NG_Box = rtrim(&NG.BOX,' ')

  Evaluate $NG_Box
    When = $YE_OtherD
      add #Amount to #OtherD
      Break
    When = $YE_OtherE
      add #Amount to #OtherE_G
      Break
    When = $YE_OtherG
      add  #Amount to #OtherE_G
      break
    When = $YE_OtherYL
      add  #Amount to #OtherYL
      break
  End-Evaluate

FROM  PS_YE_AMOUNTS NG
WHERE NG.COMPANY         = $Company
  AND NG.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND NG.EMPLID          = $Emplid
  AND NG.TAXFORM_ID      = $TaxForm_ID
  AND NG.SEQUENCE_NUMBER = #Sequence_Number
  AND NG.BOX            IN ('14D','14E','14G','14YL')
End-Select

End-Procedure NJ-Specific-R-FLI-Addl2

!***********************************************************************
! Procedure NJ-Specific-O-FLI
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-O-FLI
  move 0       to #OtherD
  move 0       to #OtherE_G
  move 0       to #OtherC_H
  let $Pflpnbr  = $Sp14
  let $Pdpnbr   = $Sp14
  let $Pflpn    = $Sp14
  let $Pdpn     = $Sp14
  let $Flptcd   = $Sp1
  let $Dptcd    = $Sp1
  let $Flptc    = $Sp1
  let $Dptc     = $Sp1

  do NJ-Specific-O-FLI-Addl1
  do NJ-Specific-O-FLI-Addl2

  move #OtherD         to $Njd   09999
  move #OtherE_G       to $Diw   09999
  move #OtherC_H       to $Fliw  09999
  let $FLI_Plan_Type_Cd = $Flptc
  let $FLI_Plan_Num     = $Pflpn
  let $FLI_Withheld     = $Fliw

End-Procedure NJ-Specific-O-FLI

!***********************************************************************
! Procedure NJ-Specific-O-FLI-Addl1
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-O-FLI-Addl1

Begin-Select
NJ3.VDI_PLAN
NJ3.VDI_PLAN_NBR
#IfDef O_NJFLI
NJ3.PNA_FLI_PLAN
NJ3.PNA_FLI_PLAN_NBR
#EndIf

  If &NJ3.VDI_PLAN = 'Y'
    move 'P'    to $Dptcd
    let  $Pdpnbr = rpad(rtrim(&NJ3.VDI_PLAN_NBR,' '),14,' ')
  End-If

#IfDef O_NJFLI
  If &NJ3.PNA_FLI_PLAN = 'Y'
    move 'P'     to $Flptcd
    let  $Pflpnbr = rpad(rtrim(&NJ3.PNA_FLI_PLAN_NBR,' '),14,' ')
  End-If
#EndIf

FROM PS_CO_STATETAX_TBL NJ3
WHERE NJ3.COMPANY = $Company
  AND NJ3.STATE   = $W2_State
  AND NJ3.EFFDT   = (SELECT MAX(NJ4.EFFDT)
                    FROM PS_CO_STATETAX_TBL NJ4
                    WHERE NJ4.COMPANY = NJ3.COMPANY
                      AND NJ4.STATE   = NJ3.STATE
                      AND NJ4.EFFDT  <= $AsOfDate)
End-Select

End-Procedure NJ-Specific-O-FLI-Addl1

!***********************************************************************
! Procedure NJ-Specific-O-FLI-Addl2
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure NJ-Specific-O-FLI-Addl2

Begin-Select
NG1.BOX
NG1.W2_AMOUNT

  let #Amount = &NG1.W2_AMOUNT
  let #Amount = #Amount * 100
  let $NG_Box = rtrim(&NG1.BOX,' ')

  evaluate $NG_Box
      when = $YE_OtherD
        add  #Amount to #OtherD
        break
      when = $YE_OtherE
        add  #Amount to #OtherE_G
        break
      when = $YE_OtherG
        move $Dptcd  to $Dptc
        move $Pdpnbr to $Pdpn
        add  #Amount to #OtherE_G
        break
      when = $YE_OtherC
        add  #Amount to #OtherC_H
        break
      when = $YE_OtherH
        move $Flptcd  to $Flptc
        move $Pflpnbr to $Pflpn
        add  #Amount  to #OtherC_H
        break
  end-evaluate

FROM  PS_YE_AMOUNTS NG1
WHERE NG1.COMPANY         = $Company
  AND NG1.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND NG1.EMPLID          = $Emplid
  AND NG1.TAXFORM_ID      = $TaxForm_ID
  AND NG1.SEQUENCE_NUMBER = #Sequence_Number
  AND NG1.BOX IN ('14C','14D','14E','14G','14H')
End-Select

End-Procedure NJ-Specific-O-FLI-Addl2

!New Mexico State Specific Code
!***********************************************************************
! Procedure NM-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_StateEIN)
!***********************************************************************
Begin-Procedure NM-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-E-Record'------------------------------------------
    When = 'Write-E-Record'
      let $_StateEIN = substr($_StateEIN, 1, 10)

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes

      If $_State_Reportable = 'Y'
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      move $_StateEIN to $_OtherStateData
      do Write-RS-Record
      do After-RS-Record
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure NM-Specific

!Ohio State Specific Code
!***********************************************************************
! Procedure OH-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure OH-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Process-State-EE-Data'---------------------------------
    When = 'Process-State-EE-Data'
      !State requires local, county, and/or district wages and/or taxes
      do Load-Local-Amounts
      Break
!From Procedure 'Load-Local-Amounts'------------------------------------
    When = 'Load-Local-Amounts'
      Evaluate $_Lcl_Box
        When = $_YE_Local_Wages
          add  #_Amount to #_Local_Wages
          Break
        When = $_YE_Local_Tax
          add  #_Amount to #_Local_Tax
          Break
      End-Evaluate
    Break
!From Procedure 'Report-Local-Amounts'----------------------------------
    When = 'Report-Local-Amounts'
      If (length($_Locality)) = 4
         do Get-Locality-Mag-CD
         let $_Loc_Tax_Cd = rtrim($_Loc_Tax_Cd,' ')
      End-If

      If $_Loc_Tax_Cd <> ''
        let $_LocalReportable  = 'Y'
        let $_State_Reportable = 'Y'
        do Update-Report-Table

        let $_Local_Save = $_Locality
        let $_Loc_Mag_Cd = $_Loc_Tax_Cd
        do Write-S-Record-from-Local
      Else
         If $_Locality = '99990'
           do Update-Report-Table
         End-If
         move 0 to #_Local_Wages
         move 0 to #_Local_Tax
      End-If
      Break
!From Procedure 'Write-S-Record-from-Local'-----------------------------
    When = 'Write-S-Record-from-Local'
      move #_Fed_Wages         to $_OtherStateData     0999999999
      move $_Loc_Mag_CD        to $_StateControlNumber
      let  $_StateControlNumber = lpad($_StateControlNumber,7, ' ')
      let  $_Local_Tax_Cd       = rtrim($_Loc_Tax_Cd,' ')

      If $_Local_Tax_Cd <> ''
         move #_Local_Wages to $_Local_Wages    09999999999
         move #_Local_Tax   to $_Local_Taxes    09999999999
      Else
         move 0 to $_Local_Wages    09999999999
         move 0 to $_Local_Taxes    09999999999
         move 0 to #_Local_Wages
         move 0 to #_Local_Tax
      End-If

      If #_Local_Wages = 0 and #_Local_Tax = 0
         move 'F' to $_Tax_Type_Cd
      Else
         move 'E' to $_Tax_Type_Cd
      End-If

      If $_FirstTime = 'Y'
         do Write-W-Record
         let $_FirstTime = 'N'
      End-If
      do Write-S-Record
      move 0 to #_Fed_Wages
      Break
!From Procedure 'Insert-Report-Table-Error'------------------------------------------
    When = 'Insert-Report-Table-Error'
      let $_Errors_Found = 'Y'
      let $_Err_Msg      = 'Error on Report Table Insert. Ohio School District requires '
      let $_Err_Msg      = $_Err_Msg || 'Mag Media code. It may be blank. '
      let $_Err_Msg      = $_Err_Msg || 'Data: State = ' || $_W2_State
      let $_Err_Msg      = $_Err_Msg || ', Locality = ' || $_Locality
      let $_Err_Msg      = $_Err_Msg || ', W2_Mag_Code = ' || $_Loc_Tax_Cd
      let $_Err_Msg      = $_Err_Msg || ', Locality_Name = ' || $_Locality_Name
      let $_Err_Msg      = $_Err_Msg || ', Emplid = ' || $Emplid
      let $_Err_Msg      = $_Err_Msg || '.'
      do Open-ErrorFile
      let #_Error_Count = #_Error_Count + 1

      If #_Error_Count = #_Max_Errors
         STOP
      End-If
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            move #_Fed_Wages         to $_OtherStateData 0999999999
            move $_Loc_Mag_CD        to $_StateControlNumber
            let  $_StateControlNumber = lpad($_StateControlNumber,7, ' ')
            let  $_Local_Tax_Cd       = rtrim($_Loc_Tax_Cd,' ')

            If $_Local_Tax_Cd <> ''
               move #_Local_Wages to $_Local_Wages    09999999999
               move #_Local_Tax   to $_Local_Taxes    09999999999
            Else
               move 0 to $_Local_Wages    09999999999
               move 0 to $_Local_Taxes    09999999999
               move 0 to #_Local_Wages
               move 0 to #_Local_Tax
            End-If

            If #_Local_Wages = 0 and #_Local_Tax = 0
               move 'F' to $_Tax_Type_Cd
            Else
               move 'E' to $_Tax_Type_Cd
            End-If

            do Write-W-Record
            do Write-S-Record
         End-If

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      Evaluate $_Agency
        When = 'SIDNE'
        When = 'CCA'
        When = 'JOHNS'
        When = 'MORAI'
          let $_State_Wages = $_Sp1
          let $_State_Tax   = $_Sp1
          Break
        When-other
          move #_State_Wages to $_State_Wages    09999999999
          move #_State_Tax   to $_State_Tax      09999999999
          Break
      End-Evaluate

        do Write-RS-Record
        do After-RS-Record
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      do Print-Local
      do Print-State-Totals
      Break
!From Procedure 'Print-Local'-----------------------------
    When = 'Print-Local'
      let $_Local_Desc1 = 'Local Wages & Taxes by School District'
      let $_Local_Desc2 = '   TOTAL SCHOOL DIST:'
      Break
  End-Evaluate

End-Procedure OH-Specific

!Oklahoma State Specific Code
!***********************************************************************
! Procedure OK-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure OK-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      let $_TaxingEntityCd  = $Sp5
      let $_Tax_Type_Cd     = 'F'
      let $TempEIN          = lpad(ltrim(rtrim($_StateEIN, ' '), ' '), 10, '0')
      let $_OK_WTH_Acct     = 'WTH-' || substr($TempEIN, 1, 8) || '-' || substr($TempEIN, 9, 2)
      do Write-RS-Record-for-OK
      do After-RS-Record
      Break
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      move #_Count_S       to $_Count_S         0999999
      move #_State_Tax_T   to $_State_Tax_T     099999999999999
      move #_State_Wages_T to $_State_Wages_T   099999999999999
      let $_FedEIN9 = lpad(ltrim(rtrim($_FedEIN, ' '), ' '), 9, '0')

      do Write-RV-Record-for-OK
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-State-Totals
      do OK-Specific-Addl1   !Print-RV-Record-for-OK
      Break
  End-Evaluate

End-Procedure OK-Specific

!***********************************************************************
! Procedure OK-Specific-Addl1  !Print-RV-Record-for-OK
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure OK-Specific-Addl1

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Total Number of RS records      : ' (+2,5)
  move   $Count_S to #out
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Taxable Wages       : ' (+1,5)
  move   $State_Wages_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Income Tax Withheld : ' (+1,5)
  move   $State_Tax_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  let    $Separator = rpad('',48,'-')
  print  $Separator                          (+1,5)

  let $Column_Hdr = ' '

End-Procedure OK-Specific-Addl1

!Oregon State Specific Code
!***********************************************************************
! Procedure OR-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure OR-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      let $_FileID = $_FileOutputPath || $_ReportID2 || '.txt'
      let $_FileID = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'Write-E-Record'---------------------------------------
    When = 'Write-E-Record'
      move $_SWT_ID_Test to $_StateEIN    09999999999999999999

      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      do OR-Specific-Addl1

      do Format-DateTime(&_A.HIRE_DT,$_HireDate, {DEFCMP},'','')
      let $_DateFirstEmployed = substr($_HireDate, 5, 2) ||
                                substr($_HireDate, 7, 2) ||
                                substr($_HireDate, 1, 4)

      do Format-DateTime(&_A.TERMINATION_DT,$_TermDate, {DEFCMP},'','')
      let $_DateOfSeparation = substr($_TermDate, 5, 2) ||
                               substr($_TermDate, 7, 2) ||
                               substr($_TermDate, 1, 4)

      If ltrim($_DateOfSeparation, ' ') = ''
         let $_DateOfSeparation = $_Zero8
      End-If

      let #_ttl = length(ltrim(rtrim($_E_Ssn, ' '), ' ') )

      If #_ttl = 0
         let $_NewSsn = $_Zero9
      Else
         let $_NewSsn = $_E_Ssn
      End-If

      do Write-RS-Record-for-OR
      do After-RS-Record
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_W <> 0
         let #_Count_T = #_Count_W
         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_W to #_StateW2Cnt
      Else
         If #_Count_S <> 0
            let #_Count_T = #_Count_S
            do Write-T-Record
            add #_Count_T to #_Count_F
            add #_Count_S to #_StateW2Cnt
         End-If
      End-If

      move #_Count_S       to $_Count_S           0999999
      move #_State_Tax_T   to $_State_Tax_T       099999999999999
      move #_State_Wages_T to $_State_Wages_T     099999999999999

      do Write-RV-Record-for-OR
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      do Print-State-Totals
      do OR-Specific-Addl2  !Print-RV-Record-for-OR
      Break
  End-Evaluate

End-Procedure OR-Specific

!***********************************************************************
! Procedure OR-Specific-Addl1
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure OR-Specific-Addl1

  let $Employment_Where_Clause = ''

  #IfDef RSI_TOOLS_7.5   ! 7.5 Tools Support
     let $Employment_Where_Clause = ' AND A.EMPL_RCD# = (SELECT MAX(B.EMPL_RCD#) '
                                  ||' FROM PS_EMPLOYMENT B WHERE A.EMPLID = B.EMPLID) '
  #Else                  ! 8.2 and 8.4 Tools Support
     let $Employment_Where_Clause = ' AND A.EMPL_RCD = (SELECT MAX(B.EMPL_RCD) '
                                  ||' FROM PS_EMPLOYMENT B WHERE A.EMPLID = B.EMPLID) '
  #EndIf

Begin-Select
A.EMPLID
A.HIRE_DT
A.TERMINATION_DT

FROM PS_EMPLOYMENT A
WHERE A.EMPLID = $Emplid
AND A.HIRE_DT <= $AsOfDate
[$Employment_Where_Clause]
End-Select

End-Procedure OR-Specific-Addl1

!***********************************************************************
! Procedure OR-Specific-Addl2  !Print-RV-Record-for-OR
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure OR-Specific-Addl2

  let $Column_Hdr = 'RV Record'
  new-page
  do Print-Columns

  print 'Total Number of RS records      : ' (+2,5)
  move   $Count_S to #out
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Taxable Wages       : ' (+1,5)
  move   $State_Wages_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  print 'Total State Income Tax Withheld : ' (+1,5)
  move   $State_Tax_T to #out
  let    #out = #out /100
  print  #out                                (,39)  edit 99,999,999,999
  let    $Separator = rpad('',48,'-')
  print  $Separator                          (+1,5)

  let $Column_Hdr = ' '

End-Procedure OR-Specific-Addl2

!Pennsylvania State Specific Code
!***********************************************************************
! Procedure PA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure PA-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      add 1 to #FileSeq
      move #FileSeq to $FileSeq 09
      let $_FileID  = $_FileOutputPath || $_ReportID2 || '_' ||  $FileSeq
      let $FileName = $_ReportID2 || '_' ||  $FileSeq
      let $_FileID  = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'Create-FileNames-Array'--------------------------------
    When = 'Create-FileNames-Array'
      Create-Array
      NAME  = PA_FILENAMES
      Size  = 10
      Field = FILEPATH:Char
      Field = FILENAME:Char
      Field = COUNT:Number
      Break
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'
      do Write-RA-Record-for-PA
      do PA-Specific-Addl1  !Print-RA-Record-for-PA
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      Break
!From Procedure 'Write-E-Record'----------------------------------------
    When = 'Write-E-Record'
      do RE-CommonClear
      let $_StateEIN = substr($_StateEIN,1,8)
      move $_Sp1 to $_OtherEIN

      If $_Filetype = 'D'
         If #_RecordCount >= #_MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If
      do Write-RE-Record-for-PA
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count

      If $_NewPage_Written = 'Y'
         let $_NewPage = 'N'
      Else
         let $_NewPage = 'Y'
      End-If
      do PA-Specific-Addl2  !Print-RE-Record-for-PA
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4   to $_Local_Wages
      move $_Sp4   to $_Local_Taxes
      move $_Sp1   to $_StateEIN
      move $_Sp1   to $_StateNumCd

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            let #RS_Count = #RS_Count + 1

            If #RS_Count <= #_MaxLines
               do Write-S-Record
            Else
               add #RS_Count to #_StateW2Cnt
               do Write-S-Record
               do Write-T-Record
               do Write-F-Record
               do Close-stFile
               let #RS_Count           = 0
               do Open-stFile
               do Write-RA-Record-for-PA
               do Write-RE-Record-for-PA
               add 1 to #_Tot_Record_Count
            End-If

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-S-Record'----------------------------------------
    When = 'Write-S-Record'
      Evaluate $_Agency
        When = 'CTCB'
        When = 'WSTRV'
          let $_State_Wages =  $_Sp1
          let $_State_Tax   =  $_Sp1
          Break
        When = 'LCTCB'
          move #_State_Wages to $_State_Wages    09999999999
          let  $_State_Tax    = $_Sp1
          Break
        When-other
          move #_State_Wages to $_State_Wages    09999999999
          move #_State_Tax   to $_State_Tax      09999999999
          Break
      End-Evaluate

        do Write-RS-Record
        do After-RS-Record
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      do Write-T-Record
      add  #_Count_T to #_Count_F

      add #_Count_S to #_StateW2Cnt
      do Print-State-Totals
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      do Blank-T-Record
      move #_Count_S       to $_Count_T_PA      0000009
      move #_State_Wages_T to $_State_Wages_T   099999999999999
      move #_State_Tax_T   to $_State_Tax_T     099999999999999

      move #_Count_S_PA       to $_Count_TPA          0000009
      move #_State_Wages_T_PA to $_State_Wages_T_PA   099999999999999
      move #_State_Tax_T_PA   to $_State_Tax_T_PA     099999999999999

      do Write-RT-Record-for-PA
      let #_Count_S_PA        = 0
      let #_State_Wages_T_PA  = 0
      let #_State_Tax_T_PA    = 0
      add 1 to #_RecordCount
      add 1 to #_Tot_Record_Count
      Break
!From Procedure 'Write-F-Record'----------------------------------------
    When = 'Write-F-Record'
      move #_S_Count_F     to $_S_Count_F       0999999
      move #_State_Wages_F to $_State_Wages_F   099999999999999
      move #_State_Tax_F   to $_State_Tax_F     099999999999999

      move #_S_Count_F_PA     to $_S_Count_F_PA       0999999
      move #_State_Wages_F_PA to $_State_Wages_F_PA   099999999999999
      move #_State_Tax_F_PA   to $_State_Tax_F_PA     099999999999999

      do Write-RF-Record-for-PA
      let #_S_Count_F_PA      = 0
      let #_State_Wages_F_PA  = 0
      let #_State_Tax_F_PA    = 0
      put $_FileID
          $FileName
          #_Tot_Record_Count
      into PA_FILENAMES(#File_Count)
      add 1 to #File_Count
      let #_Tot_Record_Count = 0
      Break
!From Procedure 'Write-F-Record'----------------------------------------
    When = 'Print-Totals'
      let #Total = 0
      While #Total < #File_Count
         get $File
             #FileCount
         from PA_FILENAMES(#Total)
              FILENAME
              COUNT
         add 1 to #Total
         do Format-Number (#FileCount, $out, '99999')
         let $Total_Print = 'Total Record Count on File ' ||  $File  || ': '
         print $Total_Print (+1,1)
         print $out         (,40)
         move 0 to #_Tot_Record_Count
      End-While
      Clear-Array Name = PA_FILENAMES
      Break
    When = 'State-End-Totals'
      Show 'The following W-2 file(s) have been created:'
      let #Total = 0
      While #Total < #File_Count
         get $Filepath
         from PA_FILENAMES(#Total)
              FILEPATH
         add 1 to #Total
         Show $Filepath
      End-While
  End-Evaluate

End-Procedure PA-Specific

!***********************************************************************
! Procedure PA-Specific-Addl1  !Print-RA-Record-for-PA
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure PA-Specific-Addl1

  let $Column_Hdr = 'RA Record'
  do Print-Columns

  print 'Submitter EIN    : '  (+2,5)
  print  $FedEIN               ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Submitter Name   : '  (+1,5)
  print  $Xmitr_Name           ()
  print 'Location Address : '  (+1,5)
  print  $Co_Dta_Address1      ()
  print 'Delivery Address : '  (+1,5)
  print  $Co_Dta_Address2      ()
  print 'City             : '  (+1,5)
  print  $City                 ()
  print 'State            : '  (+1,5)
  print  $US_State             ()
  print 'Zip              : '  (+1,5)
  print  $US_Zip               ()
  print 'Zip Extension    : '  (+1,5)
  print  $US_ZipXtnsn          ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Contact Name     : '  (+1,5)
  print  $Contact_name_ssa     ()
  print 'Contact Phone    : '  (+1,5)
  print  $Telephone_Nbr        ()
  print 'Contact Extension: '  (+1,5)
  print  $Phone_Extn           ()
  print 'Contact E-Mail   : '  (+1,5)
  print  $Email_addr           ()
  print 'Contact Fax      : '  (+1,5)
  print  $Contact_Fax          ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)

  let $NewPage_Written = 'Y'
  let $Column_Hdr      = 'RE Record'
  new-page
  do Print-Columns

End-Procedure PA-Specific-Addl1

!***********************************************************************
! Procedure PA-Specific-Addl2  !Print-RE-Record-for-PA
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Emplid)
!***********************************************************************
Begin-Procedure PA-Specific-Addl2

  If $NewPage = 'Y'
     let $Column_Hdr = 'RE Record'
     new-page
     do Print-Columns
     let $NewPage_Written = 'Y'
  End-If

  print 'Payment Year     : ' (+2,5)
  print  $CalYear             ()
  print 'Federal EIN      : ' (+1,5)
  print  $FedEIN              ()
  print 'Employer Name    : ' (+1,5)
  print  $ErName              ()
  print 'Location Address : ' (+1,5)
  print  $ErAddress1          ()
  print 'Delivery Address : ' (+1,5)
  print  $ErAddress2          ()
  print 'City             : ' (+1,5)
  print  $ErCity              ()
  print 'State            : ' (+1,5)
  print  $ErUS_State          ()
  print 'Zip              : ' (+1,5)
  print  $ErUS_Zip            ()
  print 'Zip Extension    : ' (+1,5)
  print  $ErUS_ZipXtnsn       ()
  print 'Foreign State    : ' (+1,5)
  print  $ErFrgn_State        ()
  print 'Foreign Zip      : ' (+1,5)
  print  $ErFrgn_Zip          ()
  print 'Country Code     : ' (+1,5)
  print  $ErCountry_2Char     ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)
  print 'Employment Code  : ' (+1,5)
  print  $Empl_Type           ()
  print 'Other EIN        : ' (+1,5)
  print  $OtherEIN            ()
  print 'Tax Jurisdiction : ' (+1,5)
  print  $TaxJurisdiction     ()
  print 'State EIN        : ' (+1,5)
  print  $StateEIN            ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)

  let $Column_Hdr = ' '
  If $Print_Detail = 'Y'
     new-page
  End-If

End-Procedure PA-Specific-Addl2

!Rhode Island State Specific Code
!***********************************************************************
! Procedure RI-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure RI-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4 to $_Local_Wages
      move $_Sp4 to $_Local_Taxes

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'After-W2-Reporting-Co-Chg'-----------------------------
    When = 'After-W2-Reporting-Co-Chg'
      If #_Count_S <> 0
         do Blank-T-Record
         let #_Count_T = #_Count_S

         do Write-T-Record
         add #_Count_T to #_Count_F
         add #_Count_S to #_StateW2Cnt
      End-If

      do Print-State-Totals
      do Zero-S-Record
      move 0 to #_SS_Med_T
      move 0 to #_FRMALOC_Retire_Fund_T
      move 0 to #_MA_Fed_Wages_T
      move 0 to #_Count_S
      Break
!From Procedure 'Before-RT-Record'-----------------------------
    When = 'Before-RT-Record'
      move #_State_Wages_T to $_SS_Wages_T   099999999999999
      move #_State_Tax_T   to $_SS_Tips_T    099999999999999
      move $_Sp15          to $_Fed_Wages_T
      move $_Sp15          to $_Fed_Tax_T
      move $_Sp15          to $_Med_Wages_T
      move $_Sp15          to $_Med_Tax_T
      move $_Sp15          to $_SS_Tax_T
      move $_Sp15          to $_Adv_EIC_T
      move $_Sp15          to $_Dep_Care_T
      move $_Sp15          to $_401K_T
      move $_Sp15          to $_403B_T
      move $_Sp15          to $_408K6_T
      move $_Sp15          to $_457B_T
      move $_Sp15          to $_501C18D_T
      move $_Sp15          to $_Non_Qual_457_Y_T
      move $_Sp15          to $_HSA_Employer_Contrib_T
      move $_Sp15          to $_Non_Qual_457_N_T
      move $_Sp15          to $_Combat_Pay_T
      move $_Sp15          to $_Group_Term_ER_Cost_T
      move $_Sp15          to $_Third_party_tax
      move $_Sp15          to $_Nonstatutory_Stock_Options_T
      move $_Sp15          to $_409A_Def_NQ_Def_Comp_T
      move $_Sp15          to $_Roth_401K_T
      move $_Sp15          to $_Roth_403B_T
      Break
  End-Evaluate

End-Procedure RI-Specific

!South Carolina State Specific Code
!***********************************************************************
! Procedure SC-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure SC-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move &_TX.BALANCE_YEAR to $_RptgPeriod
      let  $_RptgPeriod  = '12' || $_RptgPeriod
      move $_Zero8      to $_EmployDate
      move $_Zero8      to $_SepDate
      move $_Zero1      to $_Tax_Type_Cd
      move $_Sp4        to $_Local_Wages
      move $_Sp4        to $_Local_Taxes
      move $_Sp1        to $_Tax_Type_Cd
      move $_Zero7      to $_StateControlNumber
      let  $_SupplData1  = rpad($_SupplData1,75,'0')
      let  $_SupplData2  = rpad($_SupplData2,75,'0')
      let  $_Zero22      = rpad('',22,'0')

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
  End-Evaluate

End-Procedure SC-Specific

!Utah State Specific Code
!***********************************************************************
! Procedure UT-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure UT-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      let $_FileID = $_FileOutputPath || $_ReportID2 || '.txt'
      let $_FileID = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp22 to $_Zero22

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If

      let $_Zero22  = rpad('',22,'0')

      Break
  End-Evaluate

End-Procedure UT-Specific

!Virginia State Specific Code
!***********************************************************************
! Procedure VA-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure VA-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Write-Transmitter-Records'-----------------------------
    When = 'Write-Transmitter-Records'
      !No RA Record is required for this state.

      let $_NewPage_Written = 'Y'
      let $_Column_Hdr      = 'RE Record'
      do Print-Columns
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4     to $_Local_Wages
      move $_Sp4     to $_Local_Taxes
      let  $_StateEIN = rtrim(ltrim($_StateEIN, ' '), ' ')
      let  $_StateEIN = rpad($_StateEIN,20,' ')

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure VA-Specific

!Vermont State Specific Code
!***********************************************************************
! Procedure VT-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure VT-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Zero11  to $_Local_Wages
      move $_Zero11  to $_Local_Taxes
      move $_Sp22    to $_Zero22

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If

      let $_Zero22 = rpad('',22,'0')
      Break
  End-Evaluate

End-Procedure VT-Specific

!Wisconsin State Specific Code
!***********************************************************************
! Procedure WI-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure WI-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      do WI-Specific-Addl

      let  $_OtherStateData = $Sp10
      let  $_SupplData1  = rpad($_SupplData1,75,' ')
      let  $_SupplData2  = rpad($_SupplData2,75,' ')
      move $_Sp4        to $_Local_Wages
      move $_Sp4        to $_Local_Taxes
      let  $_Zero22      = rpad('',22,'0')
      let  $Tax_Type_Cd  = ' '
      let  $StateControlNumber = ' '

      If $_State_Reportable = 'Y'
         If $_LocalReportable <> 'Y'
            do Write-W-Record
            do Write-S-Record

            If $_Print_Detail = 'Y'
               do Print-Employee-Detail
            End-If
         End-If
      End-If
      Break
!From Procedure 'Write-T-Record'----------------------------------------
    When = 'Write-T-Record'
      !No RT Record is required for this state.
      Break
  End-Evaluate

End-Procedure WI-Specific

!***********************************************************************
! Procedure WI-Specific-Addl
! Note: Because this is a GLOBAL procedure, all global variable names
!       DO NOT need an underscore. (i.e. $Company)
!***********************************************************************
Begin-Procedure WI-Specific-Addl

Begin-Select
WI.BOX
WI.W2_AMOUNT

FROM PS_YE_AMOUNTS WI
WHERE WI.COMPANY         = $Company
  AND WI.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND WI.EMPLID          = $Emplid
  AND WI.TAXFORM_ID      = $TaxForm_ID
  AND WI.SEQUENCE_NUMBER = #Sequence_Number
  AND WI.STATE           = $W2_State
  AND WI.BOX             = '14YM'
End-Select

End-Procedure WI-Specific-Addl

!West Virginia State Specific Code
!***********************************************************************
! Procedure WV-Specific
! Note: Because this is a LOCAL procedure, all global variable names
!       should have an underscore. (i.e. $_Filetype)
!***********************************************************************
Begin-Procedure WV-Specific($Proc_Name)

  Evaluate $Proc_Name
!From Procedure 'Open-stFile'-------------------------------------------
    When = 'Open-stFile'
      let $_FileID = $_FileOutputPath || $_ReportID2 || '.txt'
      let $_FileID = rtrim(ltrim($_FileID, ' '), ' ')
      open $_FileID as 10 for-writing record=512:fixed
      Break
!From Procedure 'After-Emplid'------------------------------------------
    When = 'After-Emplid'
      move $_Sp4  to $_Local_Wages
      move $_Sp4  to $_Local_Taxes
      move $_Sp22 to $_Zero22

      If $_State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $_Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      let $_Zero22 = rpad('',22,'0')
      Break
!From Procedure 'After-State'-------------------------------------------
    When = 'After-State'
      !No RF Record is required for this state.
      Break
  End-Evaluate

End-Procedure WV-Specific
