!***********************************
!  PER008:  Employee Review Audit  *
!***********************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/09/06:00:53:47                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
! Implements row-level security via PS_FAST_SQR_SEC_VW in hrsecty.sqc  *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization

!#Include 'ptpsl177.sqc'   !Printer and page-size initialization

end-setup

#define COMPETENCY_TBL
#define MERIT_SCALE_TBL
#define REVIEW_BAND_TBL
#define REVIEW_GOALS
#define REVIEW_REVIEWER
#define REVW_REVWER_CMP
#define REVW_RATING_TBL
#define REVW_SCALE_TBL
#define RATING_MDL_TBL
#include 'rellang.sqc'


!***********************************************************************
begin-report
!***********************************************************************
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $prcs_oprid=''
  goto last2
 end-if

  do Process-Main

  do Reset
  do Stdapi-Term
last2:
end-report



!***********************************************************************
begin-heading 5
!***********************************************************************

  #Include 'stdhdg01.sqc'

  print $Group_Id_Lbl     (  4,  1)
  print $Group            (  0, +3)

end-heading



!***********************************************************************
! Procedure Init-Report
!
!***********************************************************************
begin-procedure Init-Report
!***********************************************************************

  move 'PER008' to $ReportID
  do Stdapi-Init

  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if


  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  do Append_Report_Translation ('PER008')

  do Get-Labels
last1:
end-procedure Init-Report



!***********************************************************************
! Procedure Get-Values
!
!***********************************************************************
begin-procedure Get-Values
!***********************************************************************

let $Group = &RUN_CNTL_HR.GB_GROUP_ID
let $language_cd = $PRCS_LANGUAGE_CD

end-procedure Get-Values



!***********************************************************************
! Procedure Get-Labels
! Get the field labels for the report
!***********************************************************************
begin-procedure Get-Labels
!***********************************************************************

  do Get_Field_Information ('PER008',   'REPORT_TITLE',    $REPORTTITLE,         #DW)
  do Get_Field_Information ('PER008',   'ACT_COMP_DT1',    $Act_Comp_Dt1_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'ACT_COMP_DT2',    $Act_Comp_Dt2_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'COMPETENCIES',    $Competencies_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'COMPETENCY',      $Competency_Lbl,      #DW)
  do Get_Field_Information ('PER008',   'EE_NOT_FOUND',    $EE_Not_Found_Msg,    #DW)
  do Get_Field_Information ('PER008',   'EFFDT',           $Effdt_Lbl,           #DW)
  do Get_Field_Information ('PER008',   'EMPLID',          $Emplid_Lbl,          #DW)
  do Get_Field_Information ('PER008',   'EMPL_INFO',       $Empl_Info_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'EMPL_RCD',        $Empl_Rcd_Lbl,        #DW)
  do Get_Field_Information ('PER008',   'EVAL_TYPE',       $Eval_Type_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'FACTOR_WEIGHT',   $Factor_Weight_Lbl,   #DW)
  do Get_Field_Information ('PER008',   'FACTOR_WEIGHT1',  $Factor_Weight1_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'FACTOR_WEIGHT2',  $Factor_Weight2_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'FINAL_REVW_BAND', $Final_Revw_Band_Lbl, #DW)
  do Get_Field_Information ('PER008',   'FPS_RATING',      $FPS_Rating_Lbl,      #DW)
  do Get_Field_Information ('PER008',   'FPS_RATING1',     $FPS_Rating1_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'FPS_RATING2',     $FPS_Rating2_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'FPS_UPDATED',     $FPS_Updated_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'FROM_DATE',       $From_Date_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'GOAL',            $Goal_Lbl,            #DW)
  do Get_Field_Information ('PER008',   'GOAL_NBR1',       $Goal_Nbr1_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'GOAL_NBR2',       $Goal_Nbr2_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'GROUP_ID',        $Group_Id_Lbl,        #DW)
  do Get_Field_Information ('PER008',   'JPN_REVW_ID',     $JPN_Revw_Id_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'LOADED_TO_JOB',   $Loaded_To_Job_Lbl,   #DW)
  do Get_Field_Information ('PER008',   'MERIT_SCALE',     $Merit_Scale_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'NAME',            $Name_Lbl,            #DW)
  do Get_Field_Information ('PER008',   'NEXT_REVW_DT',    $Next_Revw_Dt_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'NO',              $No_Val,              #DW)
  do Get_Field_Information ('PER008',   'NONE',            $None_Val,            #DW)
  do Get_Field_Information ('PER008',   'NOT_FOUND',       $Not_Found_Msg,       #DW)
  do Get_Field_Information ('PER008',   'PERCENT',         $Percent_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'RATE_CODE',       $Rate_Code_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'RATE_TYPE',       $Rate_Type_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'RATING_MODEL',    $Rating_Model_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'RATING_SCALE',    $Rating_Scale_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'RES_REVW_BAND',   $Res_Revw_Band_Lbl,   #DW)
  do Get_Field_Information ('PER008',   'REVWER_COMMENT',  $Revwer_Comment_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'REVWER_ID',       $Revwer_Id_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'REVWER_RATINGS',  $Revwer_Ratings_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'REVW_COMMENTS1',  $Revw_Comments1_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'REVW_COMMENTS2',  $Revw_Comments2_Lbl,  #DW)
  do Get_Field_Information ('PER008',   'REVW_DETAILS',    $Revw_Details_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_GOAL',       $Revw_Goal_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'REVW_NOT_FOUND',  $Revw_Not_Found_Msg,  #DW)
  do Get_Field_Information ('PER008',   'REVW_POINTS1',    $Revw_Points1_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_POINTS2',    $Revw_Points2_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_RATING',     $Revw_Rating_Lbl,     #DW)
  do Get_Field_Information ('PER008',   'REVW_RATING1',    $Revw_Rating1_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_RATING2',    $Revw_Rating2_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_RESULTS',    $Revw_Results_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'REVW_TYPE',       $Revw_Type_Lbl,       #DW)
  do Get_Field_Information ('PER008',   'SCALE_TYPE',      $Scale_Type_Lbl,      #DW)
  do Get_Field_Information ('PER008',   'SEQ_NR1',         $Seq_Nr1_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'SEQ_NR2',         $Seq_Nr2_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'STATUS1',         $Status1_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'STATUS2',         $Status2_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'TOTAL_AMOUNT',    $Total_Amount_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'TOTAL_PERCENT',   $Total_Percent_Lbl,   #DW)
  do Get_Field_Information ('PER008',   'TOTAL_POINTS',    $Total_Points_Lbl,    #DW)
  do Get_Field_Information ('PER008',   'TOTAL_SAL_PTS',   $Total_Sal_Pts_Lbl,   #DW)
  do Get_Field_Information ('PER008',   'TO_DATE',         $To_Date_Lbl,         #DW)
  do Get_Field_Information ('PER008',   'YES',             $Yes_Val,             #DW)

end-procedure Get-Labels



!***********************************************************************
! Procedure Process-Main
!
!***********************************************************************
begin-procedure Process-Main
!***********************************************************************

!***************
! Get JPN Flag *
!***************
do Get-JPN-Flag

!***************
! Get FPS Flag *
!***************
do Get-FPS-Flag

!************************
! Get the Group Version *
!************************
do Get-Group-Version

!**********************
! Reset Group Counter *
!**********************
let #Group_Counter = 0

!Setup for row-level security...
let $_TableAlias = 'GB'
do Security-Param

begin-SELECT DISTINCT
GB.EMPLID
GB.EMPL_RCD
PN.NAME

  !**************************
  ! Increment Group Counter *
  !**************************
  Add 1 to #Group_Counter

  !*******************************************
  ! Get all Employee Reviews of the employee *
  !*******************************************
  do Get-Employee-Reviews

  !***************************************
  ! Start a new page after each employee *
  !***************************************
  do Page-Break

FROM  PS_GB_GRP_RES_TBL GB,
      PS_PERSON_NAME PN

WHERE GB.GB_GROUP_ID = $Group
  AND GB.VERSIONGBQDM = #Version
  AND GB.JOB_EFFDT = (SELECT MAX(GB1.JOB_EFFDT)
                      FROM   PS_GB_GRP_RES_TBL GB1
                      WHERE  GB1.EMPLID = GB.EMPLID
                      AND    GB1.EMPL_RCD = GB.EMPL_RCD)
  AND GB.JOB_EFFSEQ = (SELECT MAX(GB2.JOB_EFFSEQ)
                       FROM   PS_GB_GRP_RES_TBL GB2
                       WHERE  GB2.EMPLID = GB.EMPLID
                       AND    GB2.EMPL_RCD = GB.EMPL_RCD
                       AND    GB2.JOB_EFFDT = GB.JOB_EFFDT)
  [$SecurityClauseWithERN]
  AND PN.EMPLID = GB.EMPLID

ORDER BY GB.EMPLID, GB.EMPL_RCD

end-SELECT

!**************************************************
! If no Group member found, print warning message *
!**************************************************
if #Group_Counter = 0
   print $EE_Not_Found_Msg       (+1, 0)
end-if

end-procedure Process-Main



!***********************************************************************
! Procedure Get-JPN-Flag
! Get the Japan (JPN) Flag from Installation Table
!***********************************************************************
begin-procedure Get-JPN-Flag
!***********************************************************************

let $JPN_Flag = 'N'

begin-SELECT
IT1.JPN

   let $JPN_Flag = rtrim(&IT1.JPN, ' ')

FROM PS_INSTALLATION IT1
End-select

end-procedure Get-JPN-Flag



!***********************************************************************
! Procedure Get-FPS-Flag
! Get the French Public Sector (FPS) Flag from Installation Table
!***********************************************************************
begin-procedure Get-FPS-Flag
!***********************************************************************

let $FPS_Flag = 'N'

begin-SELECT
IT2.FP_FLAG

   let $FPS_Flag = rtrim(&IT2.FP_FLAG, ' ')

FROM PS_INSTALLATION IT2
End-select

end-procedure Get-FPS-Flag



!***********************************************************************
! Procedure Get-Group-Version
! Get the maximum Version number of the Group 
! from the Salary Planning - Group Result Table
!***********************************************************************
begin-procedure Get-Group-Version
!***********************************************************************

let #Version = 0

begin-SELECT
MAX(SP_RES.VERSIONGBQDM)  &sp_maxver
  move &sp_maxver to #Version
FROM
     PS_SAL_PLN_GRP_RES SP_RES
WHERE
     SP_RES.GB_GROUP_ID = $Group
End-select

if #Version = 0
  do Get-GB-Group-Version
end-if

end-procedure Get-Group-Version



!***********************************************************************
! Procedure Get-GB-Group-Version
! Get the maximum Version number of the Group 
! from the GB Group Result Table
!***********************************************************************
begin-procedure Get-GB-Group-Version
!***********************************************************************

begin-SELECT
MAX(GB_RES.VERSIONGBQDM)  &gb_maxver
  move &gb_maxver to #Version
FROM
     PS_GB_GRP_RES_TBL GB_RES
WHERE
     GB_RES.GB_GROUP_ID = $Group
End-select

end-procedure Get-GB-Group-Version



!***********************************************************************
! Procedure Get-Employee-Reviews
! Get all Employee Reviews for an employee
!***********************************************************************
begin-procedure Get-Employee-Reviews
!***********************************************************************

!***********************
! Reset Review Counter *
!***********************
let #Review_Counter = 0

begin-SELECT
ER.EMPLID
ER.EMPL_RCD
ER.EFFDT                   () ON-BREAK PRINT=NEVER PROCEDURE=Page-Break
ER.NEXT_REVIEW_DT
ER.REVIEW_FROM_DT
ER.REVIEW_THRU_DT
ER.REVIEW_TYPE
ER.RATING_SCALE
ER.REVIEW_RATING
ER.TOTAL_EE_POINTS
ER.TOTAL_EE_AMOUNT
ER.TOTAL_EE_PERCENT
ER.TOTAL_EE_SAL_PTS
ER.EMPL_REVW_STATUS
ER.LOADED_TO_JOB
ER.RES_RVW_BAND_CD
ER.FINAL_RVW_BAND_CD
ER.FP_REV_RATING
ER.LAST_UPDATE_DATE

  !***************************
  ! Increment Review Counter *
  !***************************
  Add 1 to #Review_Counter

  !*************************************
  ! Get values related to Rating Scale *
  !*************************************
  do Get-Rating-Scale

  !*****************************
  ! Print Employee Information *
  !*****************************
  do Print-Employee-Information

  !***********************
  ! Print Review Details *
  !***********************
  do Print-Review-Details

  !***********************
  ! Print Review Results *
  !***********************
  do Print-Review-Results

  !***************************
  ! Print Reviewers' Ratings *
  !***************************
  do Print-Reviewer-Ratings

  !*********************
  ! Print Review Goals *
  !*********************
  do Print-Review-Goals

FROM  PS_EMPLOYEE_REVIEW ER

WHERE ER.EMPLID = &GB.EMPLID
  AND ER.EMPL_RCD = &GB.EMPL_RCD

end-SELECT

!********************************************
! If no Review found, print warning message *
!********************************************
if #Review_Counter = 0

  !*****************************
  ! Print Employee Information *
  !*****************************
  do Print-Employee-Information

  print $Revw_Not_Found_Msg       (+1, 0)
  new-page

end-if

end-procedure Get-Employee-Reviews



!***********************************************************************
! Procedure Print-Employee-Information
! Print the Employee Information of an Employee Review
!***********************************************************************
begin-procedure Print-Employee-Information
!***********************************************************************

  print $Empl_Info_Lbl        (  2,  1)
  print $Emplid_Lbl           ( +2,  1)
  print &GB.EMPLID            (  0, +3)
  print $Empl_Rcd_Lbl         (  0, 28)
  print &GB.EMPL_RCD          (  0, +3) edit '999'
  print $Name_Lbl             (  0, 49)
  print &PN.NAME              (  0, 66)
  print '_'                   ( +1,  1,125) fill

end-procedure Print-Employee-Information



!***********************************************************************
! Procedure Print-Review-Details
! Print the Review Details of an Employee Review
!***********************************************************************
begin-procedure Print-Review-Details
!***********************************************************************

  print $Revw_Details_Lbl     ( +2,  1)

  !***********************
  ! Print Effective Date *
  !***********************
  do Format-DateTime(&ER.EFFDT, $out, {DEFDATE}, '', '')
  print $Effdt_Lbl            ( +2,  1)
  print $out                  (  0, 22)

  !********************
  ! Print Review Type *
  !********************
  move 'REVIEW_TYPE' to $FieldName
  move &ER.REVIEW_TYPE to $FieldValue
  do Read-Translate-Table
  print $Revw_Type_Lbl        (  0, 49)
  print $XlatLongName         (  0, 66)

  !*************************
  ! Print Review From Date *
  !*************************
  do Format-DateTime(&ER.REVIEW_FROM_DT, $out, {DEFDATE}, '', '')
  print $From_Date_Lbl        ( +1,  1)
  print $out                  (  0, 22)

  !*********************
  ! Print Rating Scale *
  !*********************
  if rtrim($Rating_Scale_Descr, ' ') = ''
    let $Rating_Scale_Descr = &ER.RATING_SCALE
  end-if
  print $Rating_Scale_Lbl     (  0, 49)
  print $Rating_Scale_Descr   (  0, 66)

  !***********************
  ! Print Review To Date *
  !***********************
  do Format-DateTime(&ER.REVIEW_THRU_DT, $out, {DEFDATE}, '', '')
  print $To_Date_Lbl          ( +1,  1)
  print $out                  (  0, 22)

  !**************************
  ! Print Rating Scale Type *
  !**************************
  if rtrim ($Scale_Type_Descr, ' ') = ''
    let $Scale_Type_Descr = $None_Val
  end-if
  print $Scale_Type_Lbl       (  0, 49)
  print $Scale_Type_Descr     (  0, 66)

  !*************************
  ! Print Next Review Date *
  !*************************
  do Format-DateTime(&ER.NEXT_REVIEW_DT, $out, {DEFDATE}, '', '')
  print $Next_Revw_Dt_Lbl     ( +1,  1)
  print $out                  (  0, 22)

  !*********************
  ! Print Rating Model *
  !*********************
  if rtrim ($Rating_Model_Descr, ' ') = ''
    let $Rating_Model_Descr = $None_Val
  end-if
  print $Rating_Model_Lbl     (  0, 49)
  print $Rating_Model_Descr   (  0, 66)

  !********************
  ! Print Merit Scale *
  !********************
  if rtrim ($Merit_Scale, ' ') <> ''
    print $Merit_Scale_Lbl     ( +1, 49)
    if rtrim ($Merit_Scale_Descr, ' ') <> ''
      print $Merit_Scale_Descr    (  0, 66)
    else
      print $Merit_Scale          (  0, 66)
    end-if
  end-if
  
  !************************
  ! Print (JPN) Review ID *
  !************************
  if $JPN_Flag = 'Y'
    do ConvertToComponents(&ER.EFFDT, $yyyy, $mm, $dd)
    let $Review_Id = $yyyy || $mm || $dd

    !****************************
    ! Check if Review ID exists *
    !****************************
    do Check-Review-ID($Review_Id, $Exist_Flag)
    if $Exist_Flag = 'Y'
      print $JPN_Revw_Id_Lbl  ( +2,  1)
      print $Review_Id        (  0, 22)
    end-if
  end-if

  print '_'                   ( +1,  1,125) fill

end-procedure Print-Review-Details



!***********************************************************************
! Procedure Print-Review-Results
! Print the Review Results of an Employee Review
!***********************************************************************
begin-procedure Print-Review-Results
!***********************************************************************

  print $Revw_Results_Lbl     ( +2,  1)

  Evaluate &RS.REVW_SCALE_TYPE

    !*****************
    ! When 'Average' *
    !*****************
    When = 'A'
      
      !**********************
      ! Print Review Rating *
      !**********************
      let $Review_Rating = &ER.REVIEW_RATING
      do Get-Review-Rating
      if rtrim($Review_Rating_Descr, ' ') = ''
        let $Review_Rating_Descr = &ER.REVIEW_RATING
      end-if
      if rtrim($Review_Rating_Descr, ' ') = ''
        let $Review_Rating_Descr = $None_Val
      end-if
      print $Revw_Rating_Lbl  ( +2,  1)
      print $Review_Rating_Descr       (  0, +3)

      break

    !*******************
    ! When 'Summation' *
    !*******************
    When = 'S'

      !******************
      ! Print Rate Code *
      !******************
      print $Rate_Code_Lbl         ( +2,  1)
      if rtrim(&RS.COMP_RATECD, ' ') <> ''
        print &RS.COMP_RATECD      (  0, 24)
      else
        print $None_Val            (  0, 24)
      end-if

      !***********************
      ! Print Rate Code Type *
      !***********************
      print $Rate_Type_Lbl         (  0, 49)
      print $Rate_Type_Descr       (  0, 75)

      !***********************
      ! Print Review Points  *
      !***********************
      print $Total_Points_Lbl      ( +1,  1)
      print &ER.TOTAL_EE_POINTS    (  0, 24) edit 99999

      !*************************************************
      ! Print Total Review Amount, Currency, Frequency *
      !*************************************************
      if $Rate_Code_Type = 'FA' or $Rate_Code_Type = 'HR' or $Rate_Code_Type = 'HF'
        print $Total_Amount_Lbl      (  0, 49)
        print &ER.TOTAL_EE_AMOUNT    (  0, 75) edit 999,999,999,999.999999

        if $Merit_Scale <> ''
          let $Currency_cd = $Merit_Group_Curr
        else
          let $Currency_Cd = rtrim(&RS.CURRENCY_CD, ' ')
        end-if 
        print $Currency_cd           (  0, +1)

        do Get-Freq-Type-Descr(&RS.COMP_FREQUENCY, &RS.EFFDT, $Freq_Type_Descr)
        print $Freq_Type_Descr       (  0, +1)
      end-if

      !*****************************
      ! Print Total Review Percent *
      !*****************************
      if $Rate_Code_Type = 'PC'
        print $Total_Percent_Lbl      (  0, 49)
        print &ER.TOTAL_EE_PERCENT    (  0, 75) edit 999.999
      end-if

      !****************************
      ! Print Total Salary Points *
      !****************************
      if $Rate_Code_Type = 'PT'
        print $Total_Points_Lbl      (  0, 49)
        print &ER.TOTAL_EE_SAL_PTS   (  0, 75) edit 99999

        do Get-Freq-Type-Descr(&RS.COMP_FREQUENCY, &RS.EFFDT, $Freq_Type_Descr)
        print $Freq_Type_Descr       (  0, +1)
      end-if

      !***************************
      ! Print Loaded to Job flag *
      !***************************
      print $Loaded_To_Job_Lbl       ( +1,  1)
      if rtrim(&ER.LOADED_TO_JOB, ' ') = 'Y'
        print $Yes_Val               (  0, 24)
      else 
        print $No_Val                (  0, 24)
      end-if

      !**********************
      ! Print Review Status *
      !**********************
      print $Status1_Lbl             (  0, 49)
      move 'EMPL_REVW_STATUS' to $FieldName
      move &ER.EMPL_REVW_STATUS to $FieldValue
      do Read-Translate-Table
      print $XlatLongName            (  0, 75)

      break

    !*********************
    ! When 'Review Band' *
    !*********************
    When = 'R'

      !**********************
      ! Print Review Points *
      !**********************
      print $Total_Points_Lbl  ( +2,  1)
      print &ER.TOTAL_EE_POINTS (  0, 24) edit 99999

      !******************************
      ! Print Resulting Review Band *
      !******************************
      let $Review_Band = &ER.RES_RVW_BAND_CD
      let $Effdt = &ER.EFFDT
      do Get-Review-Band
      if rtrim($Review_Band_Descr, ' ') = ''
        let $Review_Band_Descr = $Review_Band
      end-if
      print $Res_Revw_Band_Lbl  (  0, 49)
      print $Review_Band_Descr       (  0, 76)

      !**************************
      ! Print Final Review Band *
      !**************************
      let $Review_Band = &ER.FINAL_RVW_BAND_CD
      let $Effdt = &ER.EFFDT
      do Get-Review-Band
      if rtrim($Review_Band_Descr, ' ') = ''
        let $Review_Band_Descr = $Review_Band
      end-if
      print $Final_Revw_Band_Lbl ( +1, 49)
      print $Review_Band_Descr       (  0, 76)

      break

    !*************
    ! When Other *
    !*************
    When-Other

      !**********************
      ! Print Review Rating *
      !**********************
      let $Review_Rating = &ER.REVIEW_RATING
      do Get-Review-Rating
      if rtrim($Review_Rating_Descr, ' ') = ''
        let $Review_Rating_Descr = &ER.REVIEW_RATING
      end-if
      if rtrim($Review_Rating_Descr, ' ') = ''
        let $Review_Rating_Descr = $None_Val
      end-if
      print $Revw_Rating_Lbl  ( +2,  1)
      print $Review_Rating_Descr       (  0, +3)

      !******************************
      ! Print Resulting Review Band *
      !******************************
      let $Review_Band = &ER.RES_RVW_BAND_CD
      let $Effdt = &ER.EFFDT
      do Get-Review-Band
      if rtrim($Review_Band_Descr, ' ') = ''
        let $Review_Band_Descr = $Review_Band
      end-if
      print $Res_Revw_Band_Lbl  (  0, 49)
      print $Review_Band_Descr       (  0, 76)

      !**********************
      ! Print Review Points *
      !**********************
      print $Total_Points_Lbl  ( +1,  1)
      print &ER.TOTAL_EE_POINTS (  0, 24) edit 99999

      !**************************
      ! Print Final Review Band *
      !**************************
      let $Review_Band = &ER.FINAL_RVW_BAND_CD
      let $Effdt = &ER.EFFDT
      do Get-Review-Band
      if rtrim($Review_Band_Descr, ' ') = ''
        let $Review_Band_Descr = $Review_Band
      end-if
      print $Final_Revw_Band_Lbl ( 0, 49)
      print $Review_Band_Descr       (  0, 76)

      break

  End-Evaluate

  !*******************
  ! Print FPS fields *
  !*******************
  if $FPS_Flag = 'Y'
    print $FPS_Rating_Lbl        ( +2,  1)
    print &ER.FP_REV_RATING      (  0, 24) edit 999.99

    print $FPS_Updated_Lbl       (  0, 49)
    do Format-DateTime(&ER.LAST_UPDATE_DATE, $out, {DEFDATE}, '', '')
    print $out                   (  0, 76)
        
  end-if

  print '_'                   ( +1,  1,125) fill

end-procedure Print-Review-Results



!***********************************************************************
! Procedure Print-Reviewer-Ratings
! Print the Reviewer's Ratings of an Employee Review
!***********************************************************************
begin-procedure Print-Reviewer-Ratings
!***********************************************************************

begin-SELECT
RV.EMPLID
RV.EMPL_RCD
RV.EFFDT
RV.EVALUATION_TYPE
RV.REVIEWER_ID
PERS_N.NAME
RV.FACTOR_WEIGHT
RV.TOTAL_EE_POINTS
RV.FINAL_RVW_BAND_CD
RV.COMMENTS

  !********************************
  ! Print Reviewer Ratings Header *
  !********************************
  print $Revwer_Ratings_Lbl     ( +2,  1)
  
  !************************
  ! Print Evaluation Type *
  !************************
  print $Eval_Type_Lbl          ( +2,  1)
  move 'EVALUATION_TYPE' to $FieldName
  move &RV.EVALUATION_TYPE to $FieldValue
  do Read-Translate-Table
  print $XlatShortName          (  0, 18)

  !********************
  ! Print Reviewer ID *
  !********************
  print $Revwer_Id_Lbl          (  0, 49)
  print &RV.REVIEWER_ID         (  0, 66)

  !**********************
  ! Print Factor Weight *
  !**********************
  print $Factor_Weight_Lbl      ( +1,  1)
  print &RV.FACTOR_WEIGHT       (  0, 18) edit 999
  print $Percent_Lbl            (  0, +1)

  !************************
  ! Print Reviewer's Name *
  !************************
  print $Name_Lbl               (  0, 49)
  print &PERS_N.NAME            (  0, 66)

  !*****************************************
  ! Print Competency Rating Column Headers *
  !*****************************************
  print $Competencies_Lbl         ( +2,  6)
  print $Seq_Nr1_Lbl              ( +2,  6,  3)
  print $Competency_Lbl           (  0, 13, 30)
  print $Revw_Rating1_Lbl         (  0, 47, 10)
  If &RS.REVW_SCALE_TYPE <> 'A'
    print $Revw_Points1_Lbl       (  0, +4,  6)
  end-if
  If &RS.REVW_SCALE_TYPE = 'A'
    print $Factor_Weight1_Lbl     (  0, +4, 14)
  end-if
  if $FPS_Flag = 'Y'
    print $FPS_Rating1_Lbl        (  0, +4,  6)
  end-if
  print $Revw_Comments1_Lbl       (  0, +4)

  print $Seq_Nr2_Lbl              ( +1,  6)
  print $Revw_Rating2_Lbl         (  0, 47, 10)
  If &RS.REVW_SCALE_TYPE <> 'A'
    print $Revw_Points2_Lbl       (  0, +4,  6)
  end-if
  If &RS.REVW_SCALE_TYPE = 'A'
    print $Factor_Weight2_Lbl     (  0, +4, 14)
  end-if
  if $FPS_Flag = 'Y'
    print $FPS_Rating2_Lbl        (  0, +4,  6)
  end-if
  print $Revw_Comments2_Lbl       (  0, +4)

  !******************************
  ! Print Reviewer Competencies *
  !******************************
  do Print-Reviewer-Competencies

  !**************************
  ! Print Reviewer Comments *
  !**************************
  print $Revwer_Comment_Lbl             ( +2,  1)
  let $REVIEW_REVIEWER-COMMENTS = rtrim(&RV.COMMENTS, ' ')
  do Get_Related_REVIEW_REVIEWER(&RV.EFFDT, &RV.EMPLID, &RV.EMPL_RCD, &RV.EVALUATION_TYPE, &RV.REVIEWER_ID)
  if rtrim ($REVIEW_REVIEWER-COMMENTS, ' ') = ''
    let $REVIEW_REVIEWER-COMMENTS = $None_Val
  end-if
  print $REVIEW_REVIEWER-COMMENTS       (  0, 23,108)

  print '_'                   ( +1,  1,125) fill

FROM PS_REVIEW_REVIEWER RV,
     PS_PERSON_NAME PERS_N

WHERE RV.EMPLID = &ER.EMPLID
AND   RV.EMPL_RCD = &ER.EMPL_RCD
AND   RV.EFFDT = &ER.EFFDT
AND   PERS_N.EMPLID = RV.REVIEWER_ID

end-SELECT

end-procedure Print-Reviewer-Ratings



!***********************************************************************
! Procedure Print-Reviewer-Competencies
! Print the Reviewer's Competency Ratings of an Employee Review
!***********************************************************************
begin-procedure Print-Reviewer-Competencies
!***********************************************************************

!***************************
! Reset Competency Counter *
!***************************
let #Competency_Counter = 0

begin-SELECT
RC.EMPLID
RC.EMPL_RCD
RC.EFFDT
RC.EVALUATION_TYPE
RC.REVIEWER_ID
RC.SEQ_NUM
RC.COMPETENCY
RC.FACTOR_WEIGHT
RC.REVIEW_RATING
RC.TOTAL_EE_POINTS
RC.FP_REV_RATING
RC.COMMENTS

  Add 1 to #Competency_Counter

  !************************
  ! Print Sequence Number *
  !************************
  print &RC.SEQ_NUM                     ( +1,  6) edit 999

  !*******************
  ! Print Competency *
  !*******************
  do Get-Competency
  if rtrim($Competency_Descr, ' ') = ''
    let $Competency_Descr = &RC.COMPETENCY
  end-if
  print $Competency_Descr               (  0, 13, 30)

  !**********************
  ! Print Review Rating *
  !**********************
  let $Review_Rating = &RC.REVIEW_RATING
  do Get-Review-Rating
  if rtrim($Review_Rating_Descrshort, ' ') = ''
    let $Review_Rating_Descrshort = &ER.REVIEW_RATING
  end-if
  print $Review_Rating_Descrshort       (  0, 47, 10)

  !**********************
  ! Print Review Points *
  !**********************
  if &RS.REVW_SCALE_TYPE <> 'A'
    print &RC.TOTAL_EE_POINTS           (  0, +4, 3) edit 999
    position                            (  0, +3)
  end-if

  !**********************
  ! Print Factor Weight *
  !**********************
  if &RS.REVW_SCALE_TYPE = 'A'
    print &RC.FACTOR_WEIGHT             (  0, +4,  3) edit 999
    print $Percent_Lbl                  (  0, +1, 10)
  end-if

  !*********************
  ! Print (FPS) Rating *
  !*********************
  if $FPS_Flag = 'Y'
    print &RC.FP_REV_RATING             (  0, +4, 6) edit 999.99
  end-if

  !************************
  ! Print Review Comments *
  !************************
  let $REVW_REVWER_CMP-COMMENTS = rtrim(&RC.COMMENTS, ' ')
  do Get_Related_REVW_REVWER_CMP(&RC.COMPETENCY, &RC.EFFDT, &RC.EMPLID, &RC.EMPL_RCD, &RC.EVALUATION_TYPE, &RC.REVIEWER_ID, &RC.SEQ_NUM)
  print $REVW_REVWER_CMP-COMMENTS       (  0, +4, 50)

FROM PS_REVW_REVWER_CMP RC

WHERE RC.EMPLID = &RV.EMPLID
AND   RC.EMPL_RCD = &RV.EMPL_RCD
AND   RC.EFFDT = &RV.EFFDT
AND   RC.EVALUATION_TYPE = &RV.EVALUATION_TYPE
AND   RC.REVIEWER_ID = &RV.REVIEWER_ID

end-SELECT

if #Competency_Counter = 0
  print $None_Val                       ( +1, 13)
end-if

end-procedure Print-Reviewer-Competencies



!***********************************************************************
! Procedure Print-Review-Goals
! Print the Review Goals of an Employee Review
!***********************************************************************
begin-procedure Print-Review-Goals
!***********************************************************************

let #Goal_Counter = 0

begin-SELECT
RG.EMPLID
RG.EMPL_RCD
RG.EFFDT
RG.GOAL_NBR
RG.CAREER_GOAL
RG.GOAL_STATUS
RG.ACT_COMPLETION_DT

  Add 1 to #Goal_Counter

  !************************************
  ! Print Review Goals Column Headers *
  !************************************
  If #Goal_Counter = 1
    print $Revw_Goal_Lbl      ( +2,  1)
    print $Goal_Nbr1_Lbl      ( +2,  1)
    print $Goal_Lbl           (  0,  9)
    print $Status2_Lbl        (  0, 53)
    print $Act_Comp_Dt1_Lbl   (  0, 67)
    print $Goal_Nbr2_Lbl      ( +1,  1)
    print $Act_Comp_Dt2_Lbl   (  0, 67)
  end-if

  !********************
  ! Print Goal Number *
  !********************
  print &RG.GOAL_NBR          ( +1,  1) edit 999

  !********************
  ! Print Career Goal *
  !********************
  let $REVIEW_GOALS-CAREER_GOAL = rtrim(&RG.CAREER_GOAL, ' ')
  do Get_Related_REVIEW_GOALS(&RG.EFFDT, &RG.EMPLID, &RG.EMPL_RCD, &RG.GOAL_NBR)
  let $Career_Goal = $REVIEW_GOALS-CAREER_GOAL
  print $Career_Goal          (  0,  9)

  !********************
  ! Print Goal Status *
  !********************
  move 'GOAL_STATUS' to $FieldName
  move &RG.GOAL_STATUS to $FieldValue
  do Read-Translate-Table
  print $XlatShortName        (  0, 53)

  !*******************************
  ! Print Actual Completion Date *
  !*******************************
  do Format-DateTime(&RG.ACT_COMPLETION_DT, $out, {DEFDATE}, '', '')
  print $out                  (  0, 67)

FROM PS_REVIEW_GOALS RG

WHERE RG.EMPLID = &ER.EMPLID
AND   RG.EMPL_RCD = &ER.EMPL_RCD
AND   RG.EFFDT = &ER.EFFDT

end-SELECT

if #Goal_Counter <> 0
  print '_'                   ( +1,  1,125) fill
end-if

end-procedure Print-Review-Goals



!***********************************************************************
! Procedure Get-Rating-Scale
! Get various values from the Rating Scale Table for an Employee Review
!***********************************************************************
begin-procedure Get-Rating-Scale
!***********************************************************************

let $Rating_Scale_Descr = ''
let $Revw_Scale_Type = ''
let $Scale_Type_Descr = ''
let $Rating_Model = ''
let $Merit_Scale = ''

begin-SELECT
RS.RATING_SCALE
RS.EFFDT
RS.DESCR
RS.DESCRSHORT
RS.REVW_SCALE_TYPE
RS.RATING_MODEL
RS.COMP_RATECD
RS.CURRENCY_CD
RS.COMP_FREQUENCY
RS.MERIT_SCALE
  
  !******************
  ! Get Description *
  !******************
  let $REVW_SCALE_TBL-DESCR = rtrim(&RS.DESCR, ' ')
  do Get_Related_REVW_SCALE_TBL(&RS.EFFDT, &RS.RATING_SCALE)
  let $Rating_Scale_Descr = $REVW_SCALE_TBL-DESCR

  !************************
  ! Get Review Scale Type *
  !************************
  move 'REVW_SCALE_TYPE' to $FieldName
  move &RS.REVW_SCALE_TYPE to $FieldValue
  do Read-Translate-Table
  let $Scale_Type_Descr = $XlatLongName

  !*************************************
  ! Get values related to Rating Model *
  !*************************************
  let $Rating_Model = &RS.RATING_MODEL
  do Get-Rating-Model

  !************************************
  ! Get values related to Merit Scale *
  !************************************
  let $Merit_Scale = rtrim(&RS.MERIT_SCALE, ' ')
  do Get-Merit-Scale

  !*************************
  ! Get the Rate Code Type *
  !*************************
  if &RS.REVW_SCALE_TYPE = 'S'
    do Get-Rate-Code-Type
    move 'COMP_RATE_TYPE' to $FieldName
    move $Rate_Code_Type to $FieldValue
    do Read-Translate-Table
    let $Rate_Type_Descr = $XlatLongName
    if rtrim($Rate_Type_Descr, ' ') = ''
      let $Rate_Type_Descr = $Not_Found_Msg
    end-if
  end-if

FROM  PS_REVW_SCALE_TBL RS

WHERE RS.RATING_SCALE = &ER.RATING_SCALE
AND   RS.EFFDT = (SELECT MAX(RS1.EFFDT)
                  FROM   PS_REVW_SCALE_TBL RS1
                  WHERE  RS1.RATING_SCALE = &ER.RATING_SCALE
                  AND    RS1.EFFDT <= &ER.EFFDT)
AND   RS.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Rating-Scale



!***********************************************************************
! Procedure Get-Rating-Model
! Get various values from the Rating Model Table for an Employee Review
!***********************************************************************
begin-procedure Get-Rating-Model
!***********************************************************************

let $Rating_Model_Effdt = ''
let $Rating_Model_Descr = ''

begin-SELECT
RM.RATING_MODEL
RM.EFFDT
RM.DESCR
RM.DESCRSHORT

  !******************
  ! Get Description *
  !******************
  let $RATING_MDL_TBL-DESCR = rtrim(&RM.DESCR, ' ')
  do Get_Related_RATING_MDL_TBL(&RS.EFFDT, &RM.RATING_MODEL)
  let $Rating_Model_Descr = $RATING_MDL_TBL-DESCR

  let $Rating_Model_Effdt = &RM.EFFDT

FROM  PS_RATING_MDL_TBL RM

WHERE RM.RATING_MODEL = &RS.RATING_MODEL
AND   RM.EFFDT = (SELECT MAX(RM1.EFFDT)
                  FROM   PS_RATING_MDL_TBL RM1
                  WHERE  RM1.RATING_MODEL = &RS.RATING_MODEL
                  AND    RM1.EFFDT <= &RS.EFFDT)
AND   RM.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Rating-Model



!***********************************************************************
! Procedure Get-Merit-Scale
! Get various values from the Merit Scale Table for an Employee Review
!***********************************************************************
begin-procedure Get-Merit-Scale
!***********************************************************************

let $Merit_Scale_Effdt = ''
let $Merit_Scale_Descr = ''
let $Merit_Group = ''
let $Merit_Group_Curr = ''

begin-SELECT
MS.MERIT_SCALE
MS.EFFDT
MS.DESCR
MS.DESCRSHORT

  !******************
  ! Get Description *
  !******************
  let $MERIT_SCALE_TBL-DESCR = rtrim(&MS.DESCR, ' ')
  do Get_Related_MERIT_SCALE_TBL(&MS.EFFDT, &MS.MERIT_SCALE)
  let $Merit_Scale_Descr = $MERIT_SCALE_TBL-DESCR

  let $Merit_Scale_Effdt = &MS.EFFDT

  !******************
  ! Get Merit Group *
  !******************
  do Get-Merit-Group

FROM  PS_MERIT_SCALE_TBL MS

WHERE MS.MERIT_SCALE = &RS.MERIT_SCALE
AND   MS.EFFDT = (SELECT MAX(MS1.EFFDT)
                  FROM   PS_MERIT_SCALE_TBL MS1
                  WHERE  MS1.MERIT_SCALE = &RS.MERIT_SCALE
                  AND    MS1.EFFDT <= &RS.EFFDT)
AND   MS.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Merit-Scale



!***********************************************************************
! Procedure Get-Merit-Group
! Get various values from the Merit Group Table for an Employee Review
!***********************************************************************
begin-procedure Get-Merit-Group
!***********************************************************************

begin-SELECT
MG.MERIT_GROUP
MG.CURRENCY_CD 

  let $Merit_Group = rtrim(&MG.MERIT_GROUP, ' ')
  let $Merit_Group_Curr = rtrim(&MG.CURRENCY_CD, ' ')

FROM  PS_MERIT_GROUP_TBL MG

WHERE MG.MERIT_SCALE = &MS.MERIT_SCALE
  AND MG.EFFDT = &MS.EFFDT
  AND MG.MERIT_GROUP = (SELECT MAX(MG1.MERIT_GROUP)
                        FROM   PS_MERIT_GROUP_TBL MG1
                        WHERE  MG1.MERIT_SCALE = &MS.MERIT_SCALE
                        AND    MG1.EFFDT = &MS.EFFDT
                        AND    MG1.FROM_POINTS <= &ER.TOTAL_EE_POINTS
                       AND     MG1.TO_POINTS >= &ER.TOTAL_EE_POINTS)

end-SELECT

end-procedure Get-Merit-Group



!***********************************************************************
! Procedure Get-Rate-Code-Type
! Get the Rate Code Type from the Comp Rate Code Table 
! for the Rating Scale of Scale Type 'Summation'
!***********************************************************************
begin-procedure Get-Rate-Code-Type
!***********************************************************************

let $Rate_Code_Type = ''

begin-SELECT
CRC.COMP_RATE_TYPE

  let $Rate_Code_Type = rtrim(&CRC.COMP_RATE_TYPE, ' ')

FROM  PS_COMP_RATECD_TBL CRC

WHERE CRC.COMP_RATECD = &RS.COMP_RATECD
AND   CRC.EFFDT = (SELECT MAX(CRC1.EFFDT)
                   FROM   PS_COMP_RATECD_TBL CRC1
                   WHERE  CRC1.COMP_RATECD = &RS.COMP_RATECD
                   AND    CRC1.EFFDT <= &RS.EFFDT)
AND   CRC.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Rate-Code-Type



!***********************************************************************
! Procedure Check-Review-ID
! Check if a given Review ID exists
!***********************************************************************
begin-procedure Check-Review-ID($EP_Review_Id,:$Exist_Flag)
!***********************************************************************

let $Exist_Flag = 'N'

begin-SELECT DISTINCT
RD.EP_REVIEW_ID

  let $Exist_Flag = 'Y'

FROM  PS_REV_DEF_TBL_JPN RD

WHERE RD.EP_REVIEW_ID = $EP_Review_Id

end-SELECT

end-procedure Check-Review-ID



!***********************************************************************
! Procedure Get-Review-Rating
! Get description of the Review Rating of an Employee Review
!***********************************************************************
begin-procedure Get-Review-Rating
!***********************************************************************

let $Review_Rating_Descr = ''

begin-SELECT
RR.RATING_MODEL
RR.EFFDT
RR.REVIEW_RATING
RR.DESCR
RR.DESCRSHORT

  !******************
  ! Get Description *
  !******************
  let $REVW_RATING_TBL-DESCR = rtrim(&RR.DESCR, ' ')
  do Get_Related_REVW_RATING_TBL(&RR.EFFDT, &RR.RATING_MODEL, &RR.REVIEW_RATING)
  let $Review_Rating_Descr = $REVW_RATING_TBL-DESCR

  !************************
  ! Get Short Description *
  !************************
  let $REVW_RATING_TBL-DESCRSHORT = rtrim(&RR.DESCRSHORT, ' ')
  do Get_Related_REVW_RATING_TBL(&RR.EFFDT, &RR.RATING_MODEL, &RR.REVIEW_RATING)
  let $Review_Rating_Descrshort = $REVW_RATING_TBL-DESCRSHORT

FROM  PS_REVW_RATING_TBL RR

WHERE RR.RATING_MODEL = $Rating_Model
AND   RR.EFFDT = $Rating_Model_Effdt
AND   RR.REVIEW_RATING = $Review_Rating

end-SELECT

end-procedure Get-Review-Rating



!***********************************************************************
! Procedure Get-Freq-Type-Descr
! Get description of the Review Rating of an Employee Review
!***********************************************************************
begin-procedure Get-Freq-Type-Descr($Frequency_Id, $Freq_Effdt, :$Freq_Type_Descr)
!***********************************************************************

let $Freq_Type_Descr = ''

begin-SELECT
FT.FREQUENCY_TYPE

    move 'FREQUENCY_TYPE' to $FieldName
    move &FT.FREQUENCY_TYPE to $FieldValue
    do Read-Translate-Table
    let $Freq_Type_Descr = $XlatLongName

FROM  PS_FREQUENCY_TBL FT

WHERE FT.FREQUENCY_ID = $Frequency_Id
AND   FT.EFFDT = (SELECT MAX(FT1.EFFDT)
                  FROM   PS_FREQUENCY_TBL FT1
                  WHERE  FT1.FREQUENCY_ID = $Frequency_Id
                  AND    FT1.EFFDT <= $Freq_Effdt)
AND   FT.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Freq-Type-Descr



!***********************************************************************
! Procedure Get-Review-Band
! Get the Review Band description from the Review Band Table
! for an Employee Review
!***********************************************************************
begin-procedure Get-Review-Band
!***********************************************************************

let $Review_Band_Descr = ''

begin-SELECT
RB.REVIEW_BAND_CD
RB.EFFDT
RB.DESCR50
RB.DESCRSHORT

  !******************
  ! Get Description *
  !******************
  let $Review_Band_TBL-DESCR50 = rtrim(&RB.DESCR50, ' ')
  do Get_Related_REVIEW_BAND_TBL(&RB.EFFDT, &RB.REVIEW_BAND_CD)
  let $Review_Band_Descr = $Review_Band_TBL-DESCR50

FROM  PS_REVIEW_BAND_TBL RB

WHERE RB.REVIEW_BAND_CD = $Review_Band
AND   RB.EFFDT = (SELECT MAX(RB1.EFFDT)
                  FROM   PS_REVIEW_BAND_TBL RB1
                  WHERE  RB1.REVIEW_BAND_CD = $Review_Band
                  AND    RB1.EFFDT <= $Effdt)
AND   RB.EFF_STATUS = 'A'

end-SELECT

end-procedure Get-Review-Band



!***********************************************************************
! Procedure Get-Competency
! Get the Competency description from the Competency Table
! for an Employee Review
!***********************************************************************
begin-procedure Get-Competency
!***********************************************************************

let $Competency_Descr = ''

begin-SELECT
CT.COMPETENCY
CT.DESCR
CT.DESCRSHORT

  !******************
  ! Get Description *
  !******************
  let $COMPETENCY_TBL-DESCR = rtrim(&CT.DESCR, ' ')
  do Get_Related_COMPETENCY_TBL(&CT.COMPETENCY)
  let $Competency_Descr = $COMPETENCY_TBL-DESCR

FROM  PS_COMPETENCY_TBL CT

WHERE CT.COMPETENCY = &RC.COMPETENCY

end-SELECT

end-procedure Get-Competency



!***********************************************************************
! Procedure Page-Break
! Start a new page for the next Employee Review
!***********************************************************************
begin-procedure Page-Break
!***********************************************************************

NEW-PAGE

end-procedure Page-Break


!***********************************************************************
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status
#include 'hrsecty.sqc'   !Get SQR Security parameters

#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'validdt.sqc'   !validate date routine
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
