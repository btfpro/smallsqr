!***********************************************************************
!  FPA300:  Expected Tenure date calculation                           *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:12:37:49                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment

BEGIN-REPORT

Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
Do Init-Report
Do Proc-Main
do Stdapi-Term

END-REPORT

#include 'setup01.sqc'

begin-heading 7

    #include 'stdhdg01.sqc'

   do Get_Field_Information($ReportID, 'EMPLID' ,       $EMPLID_LBL ,       #DW)
   do Get_Field_Information($ReportID, 'EMPL_RCD' ,     $EMPL_RCD_LBL ,     #DW)
   do Get_Field_Information($ReportID, 'GRADE' ,        $GRADE_LBL ,        #DW)
   do Get_Field_Information($ReportID, 'STEP' ,         $STEP_LBL ,         #DW)
   do Get_Field_Information($ReportID, 'EFFDT' ,        $EFFDT_LBL ,        #DW)
   do Get_Field_Information($ReportID, 'EFFSEQ' ,       $EFFSEQ_LBL ,       #DW)
   do Get_Field_Information($ReportID, 'TENURE_DT' ,    $TENURE_DT_LBL ,    #DW)

    Print $EMPLID_LBL               (+4,1,9)
    Print $EMPL_RCD_LBL             (,+3,14)
    Print $GRADE_LBL                (,+3,5)
    Print $STEP_LBL                 (,+3,3)
    Print $EFFDT_LBL                (,+3,10)
    Print $EFFSEQ_LBL               (,+3,3)
    Print $TENURE_DT_LBL            (,+3,18)

end-heading



!***************************************************************
!
!
!       Init-Report
!
!
!***************************************************************
BEGIN-PROCEDURE  Init-Report

move 'FPA300' to $ReportID

do Stdapi-Init

let $language_cd = $CURR_LANGUAGE_CD

do Init_Report_Translation($ReportID, $language_cd)
do Append_Report_Translation($ReportID)

do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)
display $ReportTitle

do Security-Param       !SQR security
if $prcs_process_instance = ''

    INPUT $Emplid 'EMPLID'
    let $Emplid = rtrim($Emplid,' ')

    INPUT $Empl_rcd 'Empl Rcd Nb'
    let $Empl_rcd = rtrim($Empl_rcd,' ')

else

    do FP-Select-Parameters
    do Select-Parameters

end-if

END-PROCEDURE Init-Report



!***************************************************************
!
!
!       Get-Values
!
!
!***************************************************************
BEGIN-PROCEDURE  Get-Values

    do Get-Emplid
    do Get-EmplRcd

END-PROCEDURE Get-Values



!***************************************************************
!
!
!       Proc-Main
!
!
!***************************************************************
BEGIN-PROCEDURE Proc-Main

!Select Trainees
!--------------------------------------------------------------

! Dynamic 'Where' building
!---------------------------------------------

let $select-where =


        'E.EMPLID        = D.EMPLID
        and   E.EMPL_RCD     = D.EMPL_RCD
        and   E.FP_TENURE_OK <> ''N''                           !Rejected
        and   E.FP_TENURE_OK <> ''Y''                           !Validated
        and   E.EFFDT         = '||
             '(select max(EFFDT) from PS_FPAEESTATUS
               where  EMPLID    = D.EMPLID
               and    EMPL_RCD = D.EMPL_RCD
               and    EFFDT    <= D.EFFDT)
        and   E.FP_STATUSEE_CD  = F.FP_STATUSEE_CD
        and   F.EFF_STATUS = ''A''
        and   F.FP_TRNE_SVT_CD =''S''
        and   F.EFFDT          = '||
             '(select max(EFFDT) from PS_FPMSTATUSEE_TBL
                where  FP_STATUSEE_CD  = E.FP_STATUSEE_CD
                and   F.FP_TRNE_SVT_CD =''S''
                and    EFFDT          <= E.EFFDT) '


! Select Empl Rcd Nb
!-------------------
if $Empl_rcd != ''
        let $select-where =   $select-where ||
        ' and   D.EMPL_RCD  = ' || $Empl_rcd
end-if


if $Emplid   != ''
        let $select-where =   $select-where ||
       ' and   D.EMPLID  = ''' || $Emplid  || ''''
end-if


! Variables initialization from previous instance
!-------------------------------------------------
Let $Emplid-Pre = ' '                                !Emplid in previous instance
Let #Empl_rcd-pre = 0                                !Empl Rcd Nb in previous instance

do Get-Cal-Thirtieth ($Cal-Thirtieth,$Termdt-cd)     !Thirtieth or Calendar

#IFDEF DEBUGI
    Display 'Thirtieth or Calendar: ' noline
    Display $Cal-Thirtieth
    display 'dynamyc where'
    display $select-where
#ENDIF

let $sql-statement = 'FPA300.SQR,Select,Proc-Main'
BEGIN-SELECT On-Error=SQL-Error

D.EMPLID                                            &Emplid
D.EMPL_RCD                                          &Empl_rcd
D.FP_SETID_RANK                                     &Setid
D.FP_RANK_CD                                        &Rank
D.FP_STEP_CD                                        &Step
{DATEOUT-PREFIX}D.EFFDT{DATEOUT-SUFFIX}             &StepBeg_dt
D.EFFSEQ                                            &Sequence
{DATEOUT-PREFIX}D.FP_STEP_END_DT{DATEOUT-SUFFIX}    &StepEnd_dt
E.FP_TENURE_OK                                      &TENURE_OK
E.FP_TENURE_NO                                      &TENURE_NO
E.FP_TRN_PD2                                        &Dur_Train_Mn2      ! Length of the Prob Pd Renewal (Month)

        ! variables
        !----------
        do Convert-To-DTU-Date(&StepBeg_dt,$StepBeg_dt)
        let $Emplid = rtrim(&Emplid,' ')
        let #Empl_rcd = &Empl_rcd
        let $Setid = rtrim(&Setid,' ')
        let $rank = rtrim(&Rank,' ')
        let $step = rtrim(&Step,' ')
        let $tenure_ok = rtrim(&TENURE_OK,' ')

        #IFDEF DEBUGI
            display  '****************************************************************'
            display  'Proc-Main Emplid :' noline
            display  &Emplid
            display  'Proc-Main Grade :' noline
            display  &Rank
            display  'Proc-Main Step :' noline
            display  &Step
            display  'Proc-Main Step start date:' noline
            display  &StepBeg_dt
            display  'Proc-Main (Sub)Step Actual End Date :' noline
            display  &StepEnd_dt
        #ENDIF

        print $Emplid     (+1,1,9)
        print #Empl_rcd   (0,+3,14)
        print $rank       (0,+3,5)
        print $step       (0,+3,3)
        print $StepBeg_dt (0,+3,10)
        print #Sequence   (0,+3,3)

        !----------------------------------------------------------------------------------
        ! Expected Tenure date calculation only on the first row
        ! for each Emplid and Empl Rcd Nb
        !----------------------------------------------------------------------------------
        if $Emplid != $Emplid-Pre or #Empl_rcd != #Empl_rcd-Pre

            do Va-Init                     !Reinit variables for each employee
            do Get-Dur-Tenure              !Select length in tenure period
            do Search-Pos-Stat             !Search for civil service position and career increment


            !---------------------------------------------
            ! Expected Tenure date calculation
            !---------------------------------------------
            IF $Promo = 'N'

                #IFDEF DEBUGI
                    display  'Expected Tenure date calculation'
                #ENDIF

                Let #Coeff=100

                IF #i = 0
                    do dtu-add-days ($Posit-End,1,$Calc-Beg-dt) !Position start date
                    let #Anc-Dy-Last = #Anc-Dy                  !Previous position
                    let #Anc-Mn-Last = #Anc-Mn
                    let #Anc-Yr-Last = #Anc-Yr
                end-if

                do Calc-Prom                !Expected Tenure date calculation

            end-if

            Let $Emplid-Pre = $Emplid       !Emplid in previous instance
            Let #Empl_rcd-pre = #Empl_rcd   !Empl Rcd Nb in previous instance

            print $Promo-dt    (0,+11,10)

        else

            !------------------------------------------------------------------------------
            ! Check if Step start date < Expected Tenure date else error
            !------------------------------------------------------------------------------
            if $Promo-dt < $StepBeg_dt

                #IFDEF DEBUGI
                    display 'Error : Step start date < Expected Tenure date'
                #ENDIF

                let $mes_erreur = 'error for the Emplid ' || $Emplid || ' : Step start date < Expected Tenure date'
                print $mes_erreur     (+1,1,90)

            else

                print $Promo-dt    (0,+11,10)

            end-if

        end-if

from  PS_FPAEECAREER  D, PS_FPAEESTATUS E, PS_FPMSTATUSEE_TBL F
     ,PS_FPFAST_PERS_VW2 SCRTY  !SQR security

where [$select-where]

and E.EMPLID = SCRTY.EMPLID      !
and E.EMPL_RCD = SCRTY.EMPL_RCD  !SQR security
    [$SecurityClause]            !

order by D.EFFDT,D.EFFSEQ       ! Order by effdt and effecive sequence

END-SELECT

END-PROCEDURE  Proc-Main



!***************************************************************
!
!
!       Get-Dur-Tenure
!       Select length in tenure period (in the grade)
!
!***************************************************************
BEGIN-PROCEDURE Get-Dur-Tenure

#IFDEF DEBUGI
    display 'Get-Dur-Tenure'
#ENDIF

let $sql-statement = 'FPA300.SQR,,Select,Get-Dur-Tenure'
BEGIN-SELECT On-Error=SQL-Error

A.FP_TEN_TRN_PD       &Dur_Train_Mn         ! Tenure Period (Month)

    let #DurTrainYr =  0
    let #DurTrainDy  = 0


    ! Tenure period renewal
    !----------------------
    if $tenure_ok = 'R'                     ! Tenure period is doubled
        let #DurTrainMn = &Dur_Train_Mn + &Dur_Train_Mn2
    else
        let #DurTrainMn = &Dur_Train_Mn
    end-if

    While #DurTrainDy >= 30
        let #DurTrainMn = #DurTrainMn + 1
        let #DurTrainDy = #DurTrainDy - 30
    End-While

    While #DurTrainMn >= 12
        let #DurTrainYr = #DurTrainYr + 1
        let #DurTrainMn = #DurTrainMn - 12
    End-While

    do Change-Char (#DurTrainYr, #DurTrainMn, #DurTrainDy, $Dur_Train)

    #IFDEF DEBUGI
        display   'Get-Dur-Tenure Dur Train : a/m/j'
        display $Dur_Train
    #ENDIF

from PS_FPMRANK_TBL A

where A.FP_RANK_CD = &Rank
and   A.SETID      = &Setid
and   A.EFF_STATUS = 'A'
and   A.EFFDT  =
            (select max(B.EFFDT) from PS_FPMRANK_TBL B
                where  B.FP_RANK_CD = &Rank
                and    B.SETID      = &Setid
                and    B.EFFDT    <= {DATEIN-PREFIX}&StepBeg_dt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Dur-Tenure



!***************************************************************
!
! Calc-Prom: Expected Tenure date calculation
!
!***************************************************************
BEGIN-PROCEDURE Calc-Prom

let $Promo ='Y'

#IFDEF DEBUGI
    display 'Calc-Prom start'
#ENDIF

Do Calc-Compl   !Calculate the remaining duration in the probation period to achieve the legal duration

#IFDEF DEBUGI
    Display '$Calc-Beg-dt :' noline
    Display $Calc-Beg-dt
#ENDIF

!Thirtieth or Calendar
!---------------------

if $Cal-Thirtieth = 'T' !Thirtieth

        let #day-Number=30
        do Dtu-Parse-Date($Calc-Beg-dt,#Calc-Beg-An,#Calc-Beg-Mn,#Calc-Beg-Jr)

        let #Calc-Beg-An = #Calc-Beg-An + #Compl-An
        let #Calc-Beg-Mn = #Calc-Beg-Mn + #Compl-Mn
        let #Calc-Beg-Jr = #Calc-Beg-Jr + #Compl-Jr

        While #Calc-Beg-Jr > #Days-Number
                 let #Calc-Beg-Mn = #Calc-Beg-Mn + 1
                 let #Calc-Beg-Jr = #Calc-Beg-Jr - #Days-Number
        End-While

        While #Calc-Beg-Mn > 12
                 let #Calc-Beg-An = #Calc-Beg-An + 1
                 let #Calc-Beg-Mn = #Calc-Beg-Mn - 12
        End-While

        #IFDEF DEBUGI
            display '#Calc-Beg-An'
            display #Calc-Beg-An
            display '#Calc-Beg-Mn'
            display #Calc-Beg-Mn
            display '#Calc-Beg-Jr'
            display ##Calc-Beg-Jr
        #ENDIF

        do Dtu-format-Date (#Calc-Beg-An ,#Calc-Beg-Mn ,#Calc-Beg-Jr,$Promo-dt)

        If #Calc-Beg-Mn = 2 and (#Calc-Beg-Jr = 29 or #Calc-Beg-Jr = 30)
                 do dtu-month-end($Prom-dt,$Prom-dt)
        end-if

else                    !Calendar

        do Add-Date($Calc-Beg-dt,#Compl-An,#Compl-Mn,#Compl-Jr,$Promo-dt )

end-if

do dtu-subtract-days($Promo-dt,1,$End-Train-dt)

#IFDEF DEBUGI
    display 'Expected Tenure date calculation'  noline
    display $Promo-dt
#ENDIF

do Updt-Contrat !update PS_FPAEESTATUS: Expected Tenure date

END-PROCEDURE Calc-Prom



!***************************************************************
!
!
!   Updt-Contrat : update PS_FPAEESTATUS record
!
!
!***************************************************************
BEGIN-PROCEDURE  Updt-Contrat

#IFDEF DEBUGI
    display 'update PS_FPAEESTATUS record'
#ENDIF

do convert-from-DTU-Date($End-Train-dt,$End-Train-nat)
do convert-from-DTU-Date($Promo-dt,$Promo-nat)

! Reinit Tenure code
!-------------------
Evaluate &TENURE_OK

When = 'B'
        Let $Promo_OK='B'
When = 'O'
        Let $Promo_OK='R'
When = 'R'
        Let $Promo_OK='R'
When = 'T'
        IF &TENURE_NO='O'
             Let $Promo_OK='R'
        else
             Let $Promo_OK='B'
        end-if
When = 'V'
        Let $Promo_OK='B'

End-Evaluate

let $sql-statement = 'FPA300.SQR,Update,Updt-Contrat'
BEGIN-SQL ON-ERROR = SQL-Error

update  PS_FPAEESTATUS
set
        FP_TENURE_DT={DATEIN-PREFIX}$Promo-nat{DATEIN-SUFFIX},
        FP_TENURE_OK=$Promo_OK,
        LAST_UPDATE_DATE={DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}

where EMPLID=&Emplid
and   EMPL_RCD=&Empl_rcd
and   EFFDT={DATEIN-PREFIX}&StepBeg_dt{DATEIN-SUFFIX}

END-SQL

END-PROCEDURE Updt-Contrat



#Include 'fptestdt.sqc'     ! Routines for date and time formatting (FPS)
#Include 'fpparam.sqc'        ! Routines for  Parameters Tables (FPS)
#Include 'fptrain.sqc'        ! Routines for FPA300 et FPA305 (FPS)
#include 'curdttim.sqc'       ! Get-Current-DateTime procedure
#include 'stdapi.sqc'         ! Routines to update run status
#Include 'hrrnctl1.sqc'       ! Get run control parameter values
#Include 'hrgetval.sqc'       ! Get values mask routines
#Include 'fprnctl1.sqc'       ! Get run control parameter values (FPS)
#Include 'fpgetval.sqc'       ! Get values mask routines (FPS)
#Include 'number.sqc'         ! Routines to format numbers
#Include 'hrsecty.sqc'        ! Get SQR Security parameters
#include 'sqrtrans.sqc'       ! Translate SQR strings to given language
