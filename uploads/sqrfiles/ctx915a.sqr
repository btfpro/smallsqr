!***********************************************************************
!  CTX915A:    PRINT T4A Summary Report                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2011/09/02:14:07:53                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860824                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#define TAXFORM_BOX
#include 'rellang.sqc'

begin-heading 5
  #Include 'stdhdgtr.sqc'
  print $Ctx915a_Company   (3,1)
  print $PrintCompany      (0,13)
  print $TaxYear           (3,,)      center
end-heading

begin-report

  do Init-Report

  do Process-Main

  close 4

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report

begin-procedure Init-Report

  do Init-DateTime
#ifdef PRCSSCHD
  do StdAPI-Init
#endif

  do Initialization

end-procedure

begin-procedure Initialization

#define ColR 120

  move 'N' to $SummaryAtEnd

  do Get-Current-DateTime

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfToday, $AsOfDateYMD, {DEFYMD},'','')
  move $AsOfDateYMD to $AsOfYear xxxx

  move $AsOfYear  to #AsOfYear
  subtract 1 from #AsOfYear

  do Get-Can-Tax-Processing-Params

  move &TX.Balance_Year to #TaxYear
  move #TaxYear to $TaxYear 9999

  let $AsOfDate = $TaxYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP},'','native')

   if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer

    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Open-Files

   if $PRCS_Process_Instance = ''
     do Prompts
   else
#ifdef PRCSSCHD
       do Select-Canadian-YrEnd-Parameters
       do Convert-Parameters
#endif
   end-if

  move 'CTX915A' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  if $Rpts = 'S'
     move $Ctx915a_Title_Summ_rpt to $ReportTitle
     display 'PRINTING T4A SUMMARY DATA '
  end-if

  do Array-Create
  do Load-Box-Arrays
  do Delete-Work-Table
  do Load-Work-Table

  do Format-Messages


end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from CTX915A  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('CTX915A', 'TITLE_SUMM_RPT'     , $Ctx915a_Title_Summ_rpt     , #dummy_width)
   do Get_Field_Information ('CTX915A', 'COMPANY'            , $Ctx915a_Company            , #dummy_width)
   do Get_Field_Information ('CTX915A', 'T4A_SUM_DATA'       , $Ctx915a_T4a_sum_data       , #dummy_width)
   do Get_Field_Information ('CTX915A', 'BUS_NUMBER'         , $Ctx915a_Bus_number         , #dummy_width)
   do Get_Field_Information ('CTX915A', 'TYPE_CODE'          , $Ctx915a_Type_code          , #dummy_width)
   do Get_Field_Information ('CTX915A', 'WAGELS_PLAN'        , $Ctx915a_Wagels_plan        , #dummy_width)
   do Get_Field_Information ('CTX915A', 'TOT_SUPPL'          , $Ctx915a_Tot_suppl          , #dummy_width)
   do Get_Field_Information ('CTX915A', 'USA_EMPL'           , $Ctx915a_Usa_empl           , #dummy_width)
   do Get_Field_Information ('CTX915A', 'PEN_PLAN1'          , $Ctx915a_pen_planA          , #dummy_width)
   do Get_Field_Information ('CTX915A', 'PEN_PLAN2'          , $Ctx915a_pen_planB          , #dummy_width)
   do Get_Field_Information ('CTX915A', 'PEN_PLAN3'          , $Ctx915a_pen_planC          , #dummy_width)

end-procedure

begin-procedure Open-Files

#ifdef MPE
    open 'CTX910A1.DAT' as 4 for-reading record=253:fixed
#else
    open '{IMPORTPREFIX}CTX910A1{IMPORTSUFFIX}' as 4 for-reading record=253:fixed
#endif

end-procedure


begin-procedure Prompts

  display '  '
  display 'Select the report(s) you wish to print.'
  display '   For SUMMARY reports only,  enter:  S '
  display '   For both SUMMARY and SEGMENT reports, enter:  X '
  display '        To  Quit,  enter:  Q '
  display 'Note that data for SEGMENT reports was generated only if you '
  display 'printed your forms in the government reporting sequence.'
  display '  '

  while $Rpts = ''
    input $Rpts 'S (Summary), X (Summary and Segment), or Q to quit'
    uppercase $Rpts
    if INSTR('SXQ',$Rpts, 1) = 0
      display ' '
      display '***** Enter S, X, or Q *****'
      display ' '
      move '' to $Rpts
    end-if
  end-while

  if $Rpts = 'Q'
     stop
  end-if

end-procedure


begin-procedure Array-Create

  create-array name=PrT4A_Area size=60 -
    field=PT4A_Box:char                -
    field=PT4A_Descr:char

end-procedure

begin-procedure Delete-Work-Table

begin-SQL  on-error=Ignore
  DELETE FROM PS_R_CTX915A_SORT;
end-SQL

end-procedure

begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
end-procedure

begin-procedure Load-Work-Table

  let #seqno = 0

  while 1 = 1

    do Read-Summary

    if $SummaryAtEnd = 'Y'
        break
    else

        move $T4ACount              to #T4ACount
        move $TotPensionAnnuity     to #TotPensionAnnuity
        move $TotLumpSumPayment     to #TotLumpSumPayment
        move $TotCommissions        to #TotCommissions
        move $TotPatronageAlloc     to #TotPatronageAlloc
        move $TotPastPension        to #TotPastPension
        move $TotAnnuities          to #TotAnnuities
        move $TotOtherIncome        to #TotOtherIncome
        move $TotIncomeTax          to #TotIncomeTax
        move $TotPensionAdj         to #TotPensionAdj
        move $USACount              to #USACount
        move $TotRESPIncome         to #TotRESPIncome
        move $TotRESPAssistPay      to #TotRESPAssistPay
        move $TotFeesServices       to #TotFeesServices


        begin-SQL  on-error=SQL-ERROR
        INSERT INTO PS_R_CTX915A_SORT (SEQNO,
                             CTX_TYPE_CODE,
                             WAGE_LOSS_PLAN,
                             TOT_SUPPLEMENTARY,
                             TOT_PENS_ANNUT,
                             TOT_LUMP_SUM,
                             TOT_COMMISSIONS,
                             TOT_PATRON_ALLOC,
                             TOT_PAST_PENS,
                             TOT_ANNUITIES,
                             TOT_OTH_INCOME,
                             TOT_INCOME_TAX,
                             TOT_PENS_ADJ,
                             CTX_SORT_CODE,
                             REPORTING_ID,
                             COMPANY,
                             TOT_USA_COUNT,
                             CTX_PLAN_A,
                             CTX_PLAN_B,
                             CTX_PLAN_C,
                             TOT_RESP_INCOME,
                             TOT_RESP_ASSTPAY,
                             TOT_FEES_SERVICES)
                     VALUES (#seqno,
                             $TypeCode,
                             $WageLossPlan,
                             #T4ACount,
                             #TotPensionAnnuity,
                             #TotLumpSumPayment,
                             #TotCommissions,
                             #TotPatronageAlloc,
                             #TotPastPension,
                             #TotAnnuities,
                             #TotOtherIncome,
                             #TotIncomeTax,
                             #TotPensionAdj,
                             $SortCode,
                             $ReportingID,
                             $Company,
                             #USACount,
                             $PlanA,
                             $PlanB,
                             $PlanC,
                             #TotRESPIncome,
                             #TotRESPAssistPay,
                             #TotFeesServices);

        End-SQL

        let #seqno = #seqno + 1

    end-if

  end-while

end-procedure

begin-procedure Load-Box-Arrays

    move 0 to #i

begin-SELECT
M.TAXFORM_ID
M.BOX
M.DESCR
M.EFFDT

   let $M.BOX = RTRIM(&M.BOX, ' ')
   let $TAXFORM_BOX-DESCR = &M.DESCR

   do Get_Related_TAXFORM_BOX(&M.BOX,&M.EFFDT,&M.TAXFORM_ID)

   put $M.Box $TAXFORM_BOX-DESCR into PrT4A_Area(#i)
         PT4A_Box PT4A_Descr
       add 1 to #i
       move #i to #max_T4Aboxes



FROM PS_TAXFORM_BOX M
WHERE TAXFORM_ID = 'A' AND
      EFFDT = (SELECT MAX(EFFDT)
               FROM PS_TAXFORM_BOX
               WHERE TAXFORM_ID = 'A'
                 AND EFFDT <= $AsOfDate)
ORDER BY M.BOX ASC
end-SELECT

end-procedure

begin-procedure Format-Messages

  move 0 to #i

  while #i < #max_T4Aboxes

        get $PrBox $PrDescr from PrT4A_Area(#i)
                   PT4A_Box PT4A_Descr
        let $MsgBox = RTRIM($PrBox, ' ')
        let $MsgSum   = RTRIM($PrDescr, ' ')

        evaluate $MsgBox
        when = '016'
           let $Sum16 = $MsgSum
           break
        when = '018'
           let $Sum18 = $MsgSum
           break
        when = '020'
           let $Sum20 = $MsgSum
           break
        when = '022'
           let $Sum22 = $MsgSum
           break
        when = '024'
           let $Sum24 = $MsgSum
           break
        when = '028'
           let $Sum28 = $MsgSum
           break
        when = '030'
           let $Sum30 = $MsgSum
           break
        when = '032'
           let $Sum32 = $MsgSum
           break
        when = '034'
           let $Sum34 = $MsgSum
           break
        when = '040'
           let $Sum40 = $MsgSum
           break
        when = '042'
           let $Sum42 = $MsgSum
           break
        when = '048'
           let $Sum48 = $MsgSum
           break
        when-other
           break

        end-evaluate

        add 1 to #i

  end-while

end-procedure


begin-procedure Process-Main

  move 'N' to $PrintSeg

  do Process-Summary

end-procedure

begin-procedure Process-Summary

begin-SELECT
W.CTX_TYPE_CODE
W.WAGE_LOSS_PLAN
W.CTX_SORT_CODE
W.REPORTING_ID
W.COMPANY

#ifdef DB2ALL
DECIMAL(SUM(W.TOT_SUPPLEMENTARY),15,3) &Tot_supplemt
DECIMAL(SUM(W.TOT_PENS_ANNUT),15,3)    &Tot_pens_annut
DECIMAL(SUM(W.TOT_LUMP_SUM),15,3)      &Tot_lump_sum
DECIMAL(SUM(W.TOT_COMMISSIONS),15,3)   &Tot_commissions
DECIMAL(SUM(W.TOT_PATRON_ALLOC),15,3)  &Tot_patron_alloc
DECIMAL(SUM(W.TOT_PAST_PENS),15,3)     &Tot_past_pens
DECIMAL(SUM(W.TOT_ANNUITIES),15,3)     &Tot_annuities
DECIMAL(SUM(W.TOT_OTH_INCOME),15,3)    &Tot_oth_income
DECIMAL(SUM(W.TOT_INCOME_TAX),15,3)    &Tot_income_tax
DECIMAL(SUM(W.TOT_PENS_ADJ),15,3)      &Tot_pens_adj
DECIMAL(SUM(W.TOT_USA_COUNT),15,3)     &Tot_usa_count
DECIMAL(SUM(W.TOT_RESP_INCOME),15,3)   &Tot_resp_income
DECIMAL(SUM(W.TOT_RESP_ASSTPAY),15,3)  &Tot_resp_asstpay
DECIMAL(SUM(W.TOT_FEES_SERVICES),15,3) &Tot_fees_services

#else
SUM(W.TOT_SUPPLEMENTARY)  &Tot_supplemt
SUM(W.TOT_PENS_ANNUT)     &Tot_pens_annut
SUM(W.TOT_LUMP_SUM)       &Tot_lump_sum
SUM(W.TOT_COMMISSIONS)    &Tot_commissions
SUM(W.TOT_PATRON_ALLOC)   &Tot_patron_alloc
SUM(W.TOT_PAST_PENS)      &Tot_past_pens
SUM(W.TOT_ANNUITIES)      &Tot_annuities
SUM(W.TOT_OTH_INCOME)     &Tot_oth_income
SUM(W.TOT_INCOME_TAX)     &Tot_income_tax
SUM(W.TOT_PENS_ADJ)       &Tot_pens_adj
SUM(W.TOT_USA_COUNT)      &Tot_usa_count
SUM(W.TOT_RESP_INCOME)    &Tot_resp_income
SUM(W.TOT_RESP_ASSTPAY)   &Tot_resp_asstpay
SUM(W.TOT_FEES_SERVICES)  &Tot_fees_services

#end-if

    move &W.Ctx_type_code to $TypeCode
    move &W.Wage_loss_plan to $WageLossPlan
    move &Tot_supplemt to #T4ACount
    move &Tot_pens_annut to #TotPensionAnnuity
    move &Tot_lump_sum to #TotLumpSumPayment
    move &Tot_commissions to #TotCommissions
    move &Tot_patron_alloc to #TotPatronageAlloc
    move &Tot_past_pens to #TotPastPension
    move &Tot_annuities to #TotAnnuities
    move &Tot_oth_income to #TotOtherIncome
    move &Tot_income_tax to #TotIncomeTax
    move &Tot_pens_adj to #TotPensionAdj
    move &W.Ctx_sort_code to $SortCode
    move &W.Reporting_id to $ReportingID
    move &W.Company to $Company
    move &Tot_usa_count to #USACount
    move &Tot_resp_income to #TotRESPIncome
    move &Tot_resp_asstpay to #TotRESPAssistPay
    move &Tot_fees_services to #TotFeesServices


    move $ReportingID to $SummaryID

    move '' to $PlanA
    move '' to $PlanB
    move '' to $PlanC

    do Get-RPP-number-text

    move $Company to $PrintCompany
    do Print-Summary

FROM PS_R_CTX915A_SORT W
GROUP BY W.COMPANY, W.REPORTING_ID, W.WAGE_LOSS_PLAN, W.CTX_TYPE_CODE, W.CTX_SORT_CODE
ORDER BY W.COMPANY, W.REPORTING_ID, W.WAGE_LOSS_PLAN ASC
end-SELECT


end-procedure


begin-procedure Get-RPP-number-text

begin-SELECT DISTINCT
W1.CTX_PLAN_A
W1.CTX_PLAN_B
W1.CTX_PLAN_C


    if rtrim(&W1.Ctx_plan_a, ' ') <> ''
       move &W1.Ctx_plan_a to $PlanA
    end-if
    if rtrim(&W1.Ctx_plan_b, ' ') <> ''
       move &W1.Ctx_plan_b to $PlanB
    end-if
    if rtrim(&W1.Ctx_plan_c, ' ') <> ''
       move &W1.Ctx_plan_c to $PlanC
    end-if



FROM PS_R_CTX915A_SORT W1
WHERE W1.COMPANY = $Company
  AND W1.REPORTING_ID = $ReportingID
  AND W1.WAGE_LOSS_PLAN = $WageLossPlan

end-SELECT

end-procedure


begin-procedure Read-Summary

    read 4 into $SumInput:253

    if #end-file = 1
      move 'Y' to $SummaryAtEnd
    else
      let $TypeCode             = substr($SumInput,1,3)     !   1-3
      let $WageLossPlan         = substr($SumInput,4,3)     !   4-6
      let $T4ACount             = substr($SumInput,7,7)     !   7-13
      let $TotPensionAnnuity    = substr($SumInput,14,16)   !  14-29
      let $TotLumpSumPayment    = substr($SumInput,30,16)   !  30-45
      let $TotCommissions       = substr($SumInput,46,16)   !  46-61
      let $TotPatronageAlloc    = substr($SumInput,62,16)   !  62-77
      let $TotPastPension       = substr($SumInput,78,16)   !  78-93
      let $TotAnnuities         = substr($SumInput,94,16)   !  94-109
      let $TotOtherIncome       = substr($SumInput,110,16)  ! 110-125
      let $TotFeesServices      = substr($SumInput,126,16)  ! 126-141
      let $TotIncomeTax         = substr($SumInput,142,16)  ! 142-157
      let $TotPensionAdj        = substr($SumInput,158,16)  ! 158-173
      let $SortCode             = substr($SumInput,174,1)   ! 174
      let $ReportingID          = substr($SumInput,175,16)  ! 175-190
      let $Company              = substr($SumInput,191,3)   ! 191-193
      let $USACount             = substr($SumInput,194,7)   ! 194-200
      let $PlanA                = substr($SumInput,201,7)   ! 201-207
      let $PlanB                = substr($SumInput,208,7)   ! 208-214
      let $PlanC                = substr($SumInput,215,7)   ! 215-221
      let $TotRESPIncome        = substr($SumInput,222,16)  ! 222-237
      let $TotRESPAssistPay     = substr($SumInput,238,16)  ! 238-253

    end-if

end-procedure


begin-procedure Print-Summary

     print    $Ctx915a_T4a_sum_data        (+1,1)
     print    $Ctx915a_Bus_number          (+1,1)
     print    $ReportingID                 (0,35)
     print    $Ctx915a_Type_code           (+2,1)
     print    $TypeCode                    (0,35)
     print    $Ctx915a_Wagels_plan         (+1,1)
     print    $WageLossPlan                (0,35)
     print    $Ctx915a_Tot_suppl           (+1,1)
     print    #T4ACount                    (0,35)  edit 9999999
     print    $Ctx915a_Usa_empl            (+1,1)
     print    #USACount                    (0,35)  edit 9999999
     print    $Sum16                       (+1,1)
     print    #TotPensionAnnuity           (0,35)  edit 9999999999999.99
     print    $Sum18                       (+1,1)
     print    #TotLumpSumPayment           (0,35)  edit 9999999999999.99
     print    $Sum20                       (+1,1)
     print    #TotCommissions              (0,35)  edit 9999999999999.99
     print    $Sum22                       (+1,1)
     print    #TotIncomeTax                (0,35)  edit 9999999999999.99
     print    $Sum24                       (+1,1)
     print    #TotAnnuities                (0,35)  edit 9999999999999.99
     print    $Sum28                       (+1,1)
     print    #TotOtherIncome              (0,35)  edit 9999999999999.99
     print    $Sum30                       (+1,1)
     print    #TotPatronageAlloc           (0,35)  edit 9999999999999.99
     print    $Sum32                       (+1,1)
     print    #TotPastPension              (0,35)  edit 9999999999999.99
     print    $Sum34                       (+1,1)
     print    #TotPensionAdj               (0,35)  edit 9999999999999.99
     print $Sum40                          (+1,1)
     print    #TotRESPIncome               (0,35)  edit 9999999999999.99
     print $Sum42                          (+1,1)
     print    #TotRESPAssistPay            (0,35)  edit 9999999999999.99
     print    $Sum48                       (+1,1)
     print    #TotFeesServices             (0,35)  edit 9999999999999.99
     print    $Ctx915a_pen_planA           (+1,1)
     print $PlanA                           (0,35)
     print    $Ctx915a_pen_planB           (+1,1)
     print $PlanB                           (0,35)
     print    $Ctx915a_pen_planC            (+1,1)
     print $PlanC                           (0,35)

     new-page

end-procedure


begin-procedure Convert-Parameters

if $RC_CAN_YE.T4A_Summ_or_Segmt   = 'S'  or
   $RC_CAN_YE.T4A_Summ_or_Segmt   = 'X'
       let $Rpts = 'S'
end-if

end-procedure



#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getdptnm.sqc'  !Get-Department-Name
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'   !Get-Can-Tax YE Report Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
