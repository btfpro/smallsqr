!***********************************************************************
! BEN021: FMLA Payroll Audit Report
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:08:42:00                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define FOREVER 1=1

!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  let $ReportID    = 'BEN021'
  let $ReportTitle = 'FMLA Payroll Audit Report'

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  do Init-DateTime
  do Get-Current-DateTime
  let $ReportYear4 = 1

  do StdAPI-Init
  if ($PRCS_Process_Instance = '')
    do Ask-Values
  else
    do Get-Values
  end-if

  !Calculate the cutoff date for Leave History...
  do Convert-To-DTU-Date($FromDate, $DtuFrom)
  do DTU-Add-Weeks($DtuFrom, -1, $DtuFrom)
  do Convert-From-DTU-Date($DtuFrom, $CutOffDate)

  !This is used to avoid splitting detail across pages...
  Add 2 to #ErnCdCnt

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  do Ask-From-Thru-Date
  do Ask-FMLA-Plan-ID
  do Ask-ErnCd-List

End-Procedure

!***************************************
Begin-Procedure Ask-From-Thru-Date
!***************************************

  let $DateOK = ''
  While ($DateOK <> 'Y')
    Evaluate $DateOK
    When = ''
      input $FromDate 'Enter report FROM Date as {Prompt-Date}'
      Break
    When = 'N'
      input $FromDate '[Invalid Date] Enter FROM Date as {Prompt-Date}'
    End-Evaluate

    let $FromDate = RTRIM($FromDate, ' ')
    move {PDelimiter} to $DDelimiter
    do Format-DateTime($FromDate, $FromDate, {Prompt-Mask}, '', 'native')
    do Validate-Native-Date($FromDate, $DateOK)
  End-While

  let $DateOK = ''
  While ($DateOK <> 'Y')
    Evaluate $DateOK
    When = ''
      input $ThruDate -
        'Enter report THRU Date as {Prompt-Date}. (Leave blank for Today''s date)'
      Break
    When = 'N'
      input $ThruDate '[Invalid Date] Enter THRU Date as {Prompt-Date}'
      Break
    When = 'V'
      input $ThruDate -
          '[THRU Date must be greater than FROM Date] Enter THRU Date as {Prompt-Date}'
    End-Evaluate

    let $ThruDate = RTRIM($ThruDate, ' ')
    if ($ThruDate = '')
      move $AsOfToday to $ThruDate
    else
      move {PDelimiter} to $DDelimiter
      do Format-DateTime($ThruDate, $ThruDate, {Prompt-Mask}, '', 'native')
    end-if
    do Validate-Native-Date($ThruDate, $DateOK)

    if ($DateOK = 'Y')
      do Format-DateTime($FromDate, $CmpFrom, {DEFCMP}, '', '')
      do Format-DateTime($ThruDate, $CmpThru, {DEFCMP}, '', '')
      if ($CmpThru <= $CmpFrom)
        let $DateOK = 'V'
      end-if
    end-if
  End-While

End-Procedure

!***************************************
Begin-Procedure Ask-FMLA-Plan-ID
!***************************************

  input $FMLA_Plan_ID 'Enter FMLA Plan ID (Leave blank for ALL Plans)'
  let $FMLA_Plan_ID = RTRIM(UPPER($FMLA_Plan_ID), ' ')
  if ($FMLA_Plan_ID = '')
    let $FMLA_Plan_ID = '%'
  end-if

End-Procedure

!***************************************
Begin-Procedure Ask-ErnCd-List
!***************************************

  let #ErnCdCnt = 0

  While {FOREVER}

    input $ErnCd 'Enter ErnCd to audit (press ENTER when done)'
    let $ErnCd = RTRIM(UPPER($ErnCd), ' ')
    if ($ErnCd = '')
      break
    end-if

    if ($Where = '')
      let $Where = ' (''' || $ErnCd || ''''
    else
      let $Where = $Where || ',''' || $ErnCd || ''''
    end-if

    Add 1 to #ErnCdCnt

  End-While

  let $Where = $Where || ') '

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-From-Thru-Date
  do Get-FMLA-Plan-ID

  let $Where = '(SELECT ERNCD FROM PS_FMLA_PAY_AUDIT WHERE OPRID = ''' || -
               $PRCS_OprID || ''' AND RUN_CNTL_ID = ''' || -
               $PRCS_Run_Cntl_ID || ''') '

Begin-Select
COUNT(*)    &ErnCdCnt
FROM PS_FMLA_PAY_AUDIT
WHERE OPRID       = $PRCS_OprID
AND   RUN_CNTL_ID = $PRCS_Run_Cntl_ID
End-Select
let #ErnCdCnt = &ErnCdCnt

End-Procedure

!***************************************
Begin-Heading 9
!***************************************

#Include 'stdhdg08.sqc'     !Standard Report header with From/Thru Date

  print 'FMLA Plan ID: ' (+1,1)
  print &F.FMLA_PLAN_ID  ()
  print ' ('             ()
  print &F.DESCRSHORT    ()
  print ')'              ()

  print '                                                 '     (+2,1)
  print '----------FMLA Leave Status----------  Job     '       ()
  print '---------Payroll Earnings During Period--------  '     ()
  print '--FMLA Taken--    Difference'                          ()

  print 'Employee ID and Name                             '     (+1,1)
  print 'Req# Begin-Date Return-Date            Status  '       ()
  print 'Earnings-Type  Earn-Begin-Dt Earn-End-Dt Hours   '     ()
  print 'Paid     UnPaid   (FMLA-Pay)'                             ()

  print '===============================================  '     (+1,1)
  print '==== ========== =====================  ======  '       ()
  print '============== ============= =========== ======  '     ()
  print '=======  =======  =========='                          ()

End-Heading

!***************************************
Begin-Procedure Process-Main
!***************************************

Begin-Select

F.FMLA_PLAN_ID
F.DESCRSHORT

  if ($PageBreak = 'Y')
    New-Page
  end-if
  let $PageBreak = 'Y'

  do Pay-Audit

FROM  PS_FMLA_PLAN_TBL F
WHERE F.FMLA_PLAN_ID LIKE $FMLA_Plan_ID
AND   F.EFFDT =
        (SELECT MAX(EFFDT)
           FROM PS_FMLA_PLAN_TBL
          WHERE FMLA_PLAN_ID = F.FMLA_PLAN_ID
            AND EFFDT       <= $ThruDate)
AND   F.EFF_STATUS = 'A'
ORDER BY F.FMLA_PLAN_ID
End-Select

  do Reset
  New-Page

End-Procedure

!***************************************
Begin-Procedure Pay-Audit
!***************************************

Begin-Select

  Next-Listing No-Advance Need=#ErnCdCnt

PD.EMPLID                            (+1,1,11)
PD.NAME                              (0,+1,35)
RQ.EMPLID
RQ.FMLA_REQUEST_ID                   (0,+2,4)
RQ.BEGIN_DT
  do Format-DateTime(&RQ.BEGIN_DT, $OutDt, {DEFDATE}, '', '')
  print $OutDt                       (0,+1,10)
RQ.RETURN_DT
  do Format-DateTime(&RQ.RETURN_DT, $OutDt, {DEFDATE}, '', '')
  print $OutDt                       (0,+1,10)
RQ.LEAVE_STATUS
  move 'LEAVE_STATUS'  to $FieldName
  move &RQ.LEAVE_STATUS to $FieldValue
  do Read-Translate-Table
  let $Temp = '(' || RTRIM($XlatShortName,' ') || ')'
  print $Temp                        (0,+1,10)

  do Get-Empl-Status
  print $EmplStatus                  (0,+2,6)

  do Get-Pay-Earnings

  do Get-Leave-Totals
  print #FMLA_Paid                   (0,+2,4) Edit 9999
  print 'hrs'                        ()
  print #FMLA_Unpaid                 (0,+2,4) Edit 9999
  print 'hrs'                        ()

  let #Difference = #FMLA_Paid - #TotalPayHrs
  if (#Difference <> 0)
    print #Difference                (0,+4,4) Edit 9999
    print 'hrs'                      ()
  else
    print '-'                        (0,+7)
  end-if

FROM PS_FMLA_LV_REQUEST RQ,
     PS_PERSON_NAME     PD
WHERE RQ.FMLA_PLAN_ID     = &F.FMLA_PLAN_ID
  AND RQ.BEGIN_DT        <= $ThruDate
  AND RQ.RETURN_DT       >= $FromDate
  AND RQ.FMLA_LV_APPROVED = 'A'
  AND RQ.LEAVE_CANCELLED_DT IS NULL
  AND PD.EMPLID           = RQ.EMPLID
ORDER BY RQ.EMPLID ASC, RQ.FMLA_REQUEST_ID ASC
End-Select
End-Procedure

!***************************************
Begin-Procedure Get-Leave-Totals
!***************************************

  let #FMLA_Paid   = 0
  let #FMLA_Unpaid = 0
  do Convert-To-DTU-Date($FromDate, $DtuFrom)
  do Convert-To-DTU-Date($ThruDate, $DtuThru)

Begin-Select
LV.EMPLID
LV.FMLA_REQUEST_ID
LV.WEEK_BEGIN_DT

  do Convert-To-DTU-Date(&LV.WEEK_BEGIN_DT, $DtuWkDt)
  if ($DtuWkDt < $DtuFrom)
    do DTU-DayOfWeek#($DtuFrom, #StartDay)
    let #EndDay = 7
  else
    let #StartDay = 1
    do DTU-Diff-Days($DtuWkDt, $DtuThru, #EndDay)
    Add 1 to #EndDay
    if (#EndDay > 7)
      let #EndDay = 7
    end-if
  end-if

LV.SUN_HRS
LV.SUN_PAID
LV.MON_HRS
LV.MON_PAID
LV.TUES_HRS
LV.TUES_PAID
LV.WED_HRS
LV.WED_PAID
LV.THURS_HRS
LV.THURS_PAID
LV.FRI_HRS
LV.FRI_PAID
LV.SAT_HRS
LV.SAT_PAID

  let #Day = #StartDay
  While (#Day <= #EndDay)
    evaluate #Day
    when = 1
      if (&LV.SUN_PAID = 'Y')
        Add &LV.SUN_HRS to #FMLA_Paid
      else
        Add &LV.SUN_HRS to #FMLA_Unpaid
      end-if
    when = 2
      if (&LV.MON_PAID = 'Y')
        Add &LV.MON_HRS to #FMLA_Paid
      else
        Add &LV.MON_HRS to #FMLA_Unpaid
      end-if
    when = 3
      if (&LV.TUES_PAID = 'Y')
        Add &LV.TUES_HRS to #FMLA_Paid
      else
        Add &LV.TUES_HRS to #FMLA_Unpaid
      end-if
    when = 4
      if (&LV.WED_PAID = 'Y')
        Add &LV.WED_HRS to #FMLA_Paid
      else
        Add &LV.WED_HRS to #FMLA_Unpaid
      end-if
    when = 5
      if (&LV.THURS_PAID = 'Y')
        Add &LV.THURS_HRS to #FMLA_Paid
      else
        Add &LV.THURS_HRS to #FMLA_Unpaid
      end-if
    when = 6
      if (&LV.FRI_PAID = 'Y')
        Add &LV.FRI_HRS to #FMLA_Paid
      else
        Add &LV.FRI_HRS to #FMLA_Unpaid
      end-if
    when = 7
      if (&LV.SAT_PAID = 'Y')
        Add &LV.SAT_HRS to #FMLA_Paid
      else
        Add &LV.SAT_HRS to #FMLA_Unpaid
      end-if
    end-evaluate
    Add 1 to #Day
  End-While

FROM  PS_FMLA_LV_HISTORY LV
WHERE LV.EMPLID          = &PD.EMPLID
  AND LV.FMLA_REQUEST_ID = &RQ.FMLA_REQUEST_ID
  AND LV.WEEK_BEGIN_DT  >= $CutOffDate
  AND LV.WEEK_BEGIN_DT  <= $ThruDate
ORDER BY LV.EMPLID ASC, LV.FMLA_REQUEST_ID ASC, LV.WEEK_BEGIN_DT ASC
End-Select
End-Procedure

!***************************************
Begin-Procedure Get-Pay-Earnings
!***************************************

  let #TotalPayHrs = 0
  let #ColPos = #Current-Column + 2
  let #LineAdj = 0

Begin-Select
PY.EMPLID
OE.ERNCD
SUM(OE.OTH_HRS)           &PayHrs
MIN(PY.EARNS_BEGIN_DT)    &EarnBeginDt
MAX(PY.EARNS_END_DT)      &EarnEndDt

  let $ErnCd = &OE.ERNCD
  let $AsOfDate = &EarnEndDt
  do Get-Earnings-Name

  print &OE.ERNCD                    (+#LineAdj,#ColPos,3)
  print '-'                          ()
  print $EarningsAbbrv               (0,0,10)
  do Format-DateTime(&EarnBeginDt, $OutDt, {DEFDATE}, '', '')
  print $OutDt                       (0,+1,13)
  do Format-DateTime(&EarnEndDt, $OutDt, {DEFDATE}, '', '')
  print $OutDt                       (0,+1,11)
  print &PayHrs                      (0,+1,4) Edit 9999
  print 'hrs'                        ()

  Add &PayHrs to #TotalPayHrs
  let #LineAdj = 1

FROM PS_PAY_EARNINGS  PY,
     PS_PAY_OTH_EARNS OE
WHERE PY.EMPLID = &PD.EMPLID
AND ((PY.EARNS_BEGIN_DT >= $FromDate AND
      PY.EARNS_BEGIN_DT <= $ThruDate)
   OR
     (PY.EARNS_END_DT >= $FromDate AND
      PY.EARNS_END_DT <= $ThruDate))
AND OE.COMPANY    = PY.COMPANY
AND OE.PAYGROUP   = PY.PAYGROUP
AND OE.PAY_END_DT = PY.PAY_END_DT
AND OE.OFF_CYCLE  = PY.OFF_CYCLE
AND OE.PAGE_NUM      = PY.PAGE_NUM
AND OE.LINE_NUM      = PY.LINE_NUM
AND OE.ADDL_NBR      = PY.ADDL_NBR
AND OE.ERNCD      IN [$Where]
GROUP BY PY.EMPLID, OE.ERNCD
End-Select

  let #ColPos = #ColPos + 26
  print '               ------'      (+1,#ColPos)
  print 'Total Pay Hrs:'             (+1,#ColPos)
  print #TotalPayHrs                 (0,+1,4) Edit 9999
  print 'hrs'                        ()

End-Procedure

!***************************************
Begin-Procedure Get-Empl-Status
!***************************************

  let $EmplStatus = ''

Begin-Select
J.EMPLID
J.EMPL_RCD
J.EFFDT
J.EMPL_STATUS
  let $EmplStatus = $EmplStatus || &J.EMPL_STATUS

FROM PS_PER_ORG_ASGN E,
     PS_JOB J
WHERE E.EMPLID = &PD.EMPLID
  AND J.EMPLID = E.EMPLID
  AND J.EMPL_RCD = E.EMPL_RCD
  AND J.EFFDT =
        (SELECT MAX(J1.EFFDT)
           FROM PS_JOB J1
          WHERE J1.EMPLID = J.EMPLID
            AND J1.EMPL_RCD = J.EMPL_RCD
            AND J1.EFFDT <= $ThruDate)
  AND J.PER_ORG = 'EMP'
ORDER BY J.EMPLID ASC, J.EMPL_RCD ASC, J.EFFDT DESC
End-Select
End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Date math routines
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'readxlat.sqc'  !Read the Translate Table
#Include 'geternnm.sqc'  !Get Earnings Code descr
#Include 'reset.sqc'     !Reset printer procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

!****************************** End Of Report *******************************

