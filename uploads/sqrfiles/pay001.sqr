!*********************************
!  PAY001:  Deductions Register  *
!*********************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:23:46                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY001' to $ReportID
  move 'Deductions Register' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Calendar-Year-Id
  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

begin-procedure Array-Initialization
  create-array name=Totals size=7 field=TotalName:char field=total:number:7
  put 'Grand Total'      into Totals(1) TotalName
  put 'Company Total'    into Totals(2) TotalName
  put 'Pay Period Total' into Totals(3) TotalName
  put 'Pay Group Total'  into Totals(4) TotalName
  put 'Deduction Total'  into Totals(5) TotalName
end-procedure

begin-heading 11
  #Include 'stdhdgpi.sqc'
  #Include 'stdhdg06.sqc'

  print 'Deduction'      (+2,1)
  print $DedCd           (0,13)
  print $DeductionName   (0,20)
  print 'Type'           (+1,1)
  print $XlatLongName    (0,13)

  print 'Ben'            (+2,38)
  print 'Current'        (0,49)
  print 'Refund'         (0,63)
  print 'Amt. From'      (0,74)
  print 'Amount'         (0,87)
  print 'Reason'         (0,99)
  print 'Month'          (0,118)
  print 'Quarter'        (0,130)
  print 'Year'           (0,144)
  print 'Goal'           (0,157)

  print 'Employee ID'    (+1,1)
  print 'Name'           (0,14)
  print 'Rcd'            (0,38)
  print 'Amount'         (0,50)
  print 'Amount'         (0,63)
  print 'Arrears'        (0,75)
  print 'Not Taken'      (0,86)
  print 'Not Taken'      (0,98)
  print 'To-Date'        (0,117)
  print 'To-Date'        (0,130)
  print 'To-Date'        (0,143)
  print 'Amount'         (0,156)

end-heading


begin-procedure Report
  let $val_emplid    = ' '
  let $val_dedcd     = ' '
  let $val_ded_class = ' '
  let $val_ded_slstx = ' '
  let $val_py_status = ' '
  let #val_ben_rcd   = 0
begin-SELECT
A.COMPANY      () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT   () on-break print=never level=2 procedure=PayEndDate-Change
A.PAYGROUP     () on-break print=never level=3 procedure=PayGroup-Change
C.PLAN_TYPE    () on-break print=never level=4 procedure=Deduction-Change
C.DEDCD        () on-break print=never level=4 procedure=Deduction-Change
C.BENEFIT_RCD_NBR
A.CHECK_DT
C.OFF_CYCLE
C.DED_CLASS
C.DED_SLSTX_CLASS
B.EMPLID          (+1,1)
B.EMPL_RCD
B.NAME            (0,14,20)
C.DED_CUR
C.DED_CUR_REFUND
C.DED_CUR_PAYBK
C.DED_NOT_TAKEN
C.REASON_NOT_TAKEN
B.PAYCHECK_STATUS

  do Format-Number(&C.BENEFIT_RCD_NBR, $out, '999')
  print $out (0,38)

  do Format-Number(&C.Ded_Cur, $out, '99999,999.99mi')
  print $out   (0,44)

  if &C.Off_Cycle = 'Y'
    print '*'     (0,57)
  end-if

  do Format-Number(&C.Ded_Cur_Refund, $out, 'B999,999.99')
  print $out   (0,58)
  do Format-Number(&C.Ded_Cur_PayBk, $out, 'B9999,999.99')
  print $out   (0,70)
  do Format-Number(&C.Ded_Not_Taken, $out, 'B9999,999.99')
  print $out   (0,83)

  if &C.Ded_Not_Taken > 0

    move 'REASON_NOT_TAKEN' to $FieldName
    move &C.Reason_Not_Taken to $FieldValue
    do Read-Translate-Table

    let $Reason_Not_Taken = &C.Reason_Not_Taken || ' ' || $XlatShortName
    print $Reason_Not_Taken  (0,98)

  end-if

  move &A.Check_Dt      to $AsOfDate  !for included procedures
  move &A.Company       to $Company
  move &A.PayGroup      to $PayGroup
  do Get-Company-Data
  do Get-PayGroup-Data

  move $PayGroupCountry to $Country
  move &A.Pay_End_Dt  to $PayEndDate
  do Get-Date-Codes                   !for Get-Deduction-Balances
  move &B.EmplID        to $EmplID

  move &C.Plan_Type     to $PlanType
  move &C.DedCd         to $DedCd

  do Get-Deduction-Name
  move 'PLAN_TYPE' to $FieldName
  move $PlanType   to $FieldValue
  do Read-Translate-Table

  move &C.Benefit_rcd_nbr to #Benefit-Rcd-Nbr
  move &C.Ded_Class       to $DedClass
  move &C.Ded_SlsTx_Class to $DedSlsTxClass
  let $var_emplid    = rtrim(&B.EMPLID,' ')
  let $var_dedcd     = rtrim(&C.DEDCD,' ')
  let $var_ded_class = rtrim(&C.DED_CLASS,' ')
  let $var_ded_slstx = rtrim(&C.DED_SLSTX_CLASS,' ')
  let $var_py_status = rtrim(&B.PAYCHECK_STATUS,' ')
  let #var_ben_rcd   = &C.BENEFIT_RCD_NBR

  if $val_emplid = $var_emplid  and $val_dedcd = $var_dedcd  and $val_ded_class = $var_ded_class and $val_ded_slstx = $var_ded_slstx and $val_py_status = $var_py_status  and #val_ben_rcd = #var_ben_rcd
    let #DedMTD = 0
    let #DedQTD = 0 
    let #DedYTD = 0 
  else
    do Get-Deduction-Balances
    do Format-Number(#DedMTD, $out, 'B9999,999.99mi')
    print $out   (0,112)
    do Format-Number(#DedQTD, $out, 'B9999,999.99mi')
    print $out   (0,125)
    do Format-Number(#DedYTD, $out, 'B9999,999.99mi')
    print $out   (0,138)
    let $val_emplid    = $var_emplid  
    let $val_dedcd     = $var_dedcd  
    let $val_ded_class = $var_ded_class
    let $val_ded_slstx = $var_ded_slstx
    let $val_py_status = $var_py_status
    let #val_ben_rcd   = #var_ben_rcd
  end-if

  if $PlanType = '00'
    do Get-General-Deductions
    do Format-Number(#Goal_Amt, $out, 'B9999,999.99mi')
    print $out (0,151)
    let #Goal_Amt = 0
  end-if

  ARRAY-ADD &C.Ded_Cur        -
            &C.Ded_Cur_Refund -
            &C.Ded_Cur_PayBk  -
            &C.Ded_Not_Taken  -
            #DedMTD           -
            #DedQTD           -
            #DedYTD           -
    to Totals(5) total(0)     -
               TOTAL(1)       -
               TOTAL(2)       -
               TOTAL(3)       -
               TOTAL(4)       -
               TOTAL(5)       -
               TOTAL(6)

FROM  PS_PAY_CALENDAR  A,
      PS_PAY_DEDUCTION C,
      PS_PAY_CHECK     B
WHERE
  #ifdef MVS
    \$SlctCalendar\
  #else
    [$SlctCalendar]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND C.COMPANY    = A.COMPANY
  AND C.PAYGROUP   = B.PAYGROUP
  AND C.PAY_END_DT = B.PAY_END_DT
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.SEPCHK     = B.SEPCHK
  AND C.DED_CLASS <= 'K'
ORDER BY A.COMPANY ASC,
         A.PAY_END_DT ASC,
         A.PAYGROUP ASC,
         C.PLAN_TYPE ASC,
         C.DEDCD ASC,
         B.NAME ASC,
         B.EMPLID ASC,
         A.CHECK_DT ASC,
         C.DED_CLASS,
         C.DED_SLSTX_CLASS
end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals

end-procedure


begin-procedure Get-General-Deductions

begin-SELECT
GD.GOAL_AMT

    move &GD.Goal_Amt to #Goal_Amt

FROM  PS_GENL_DEDUCTION GD
WHERE GD.EMPLID     = &B.EmplID
  AND GD.COMPANY    = &A.Company
  AND GD.DEDCD      = &C.DedCd
  AND GD.EFFDT =
      (SELECT MAX(GD1.EFFDT)
       FROM PS_GENL_DEDUCTION GD1
       WHERE GD1.EMPLID    = GD.EMPLID
       AND   GD1.COMPANY   = GD.COMPANY
       AND   GD1.DEDCD     = GD.DEDCD
       AND   GD1.EFFDT    <= &A.PAY_END_DT)
end-SELECT

end-procedure

begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Deduction-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals

  move 5 to #totalRow

  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,14)
    move 44 to #startCol
    move 0 to #i

    while #i <= 6
      get #total from Totals(#totalRow) total(#i)
      do Format-Number(#total, $out, '99999,999.99mi')
      print $out (0,#startCol)
      if #i = 3
         add 29 to #startCol
      else
         add 13 to #startCol
      end-if
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    do Reset
  end-if

  new-page

end-procedure


begin-procedure Reset
  move 'Y' to $End_of_Report
  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if
end-procedure

begin-footing 2
  print 'Note - an * indicates off cycle ' (+0,1)

  if $End_of_Report = 'Y'
    print 'End of Report' (+1,1) center
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if
end-footing


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getdedb2.sqc'  !Get-Deduction-Balances procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
