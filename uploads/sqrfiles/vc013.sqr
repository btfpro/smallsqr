!***********************************************************************
!  VC013:  Variable Compensation - Subscription Error report           *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:56:55                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
!                                                                      *
! HP99999       Release 8                                              *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

#define GB_GROUP_TBL
#define VC_PLAN_TBL

#Include 'rellang.sqc'

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report

  if $start-error <> 'Y'
    do Report
  end-if
  do Stdapi-Term
  do Reset
end-report

!********************************************
begin-procedure Init-Report
  move 'VCREPS' to $ReportID
  move 'Subscription Error Report' to $ReportTitle
  display $ReportTitle
  display ' '
  do Stdapi-init
  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  display $reportid
  display 'lang - '
  display $language_cd

  if $prcs_process_instance = ''
     display 'This process cannot be run outside the Process scheduler'
     let $start_error = 'Y'
  else
     let $start_error = 'N'
     do Select-Parameters
  end-if
end-procedure

!*********************************************************************
begin-procedure select-parameters

BEGIN-SELECT
A.OPRID
A.RUN_CNTL_ID
A.VC_PLAN_ID
A.VC_PAYOUT_PRD_ID
A.PRD_END_DT
A.TREE_NAME
A.VC_TREE_DT
A.VC_REPORT_TYPE
A.VC_PLAN_MEM_CRIT

  move &A.PRD_END_DT to $prd_end_dt_native
  do Convert-To-DTU-Date($prd_end_dt_native, $prd_end_dt_dtu)
  do Convert-From-DTU-Date($prd_end_dt_dtu, $prd_end_dt_native2)

  if rtrim(&A.VC_PLAN_MEM_CRIT,' ') = 'E' or rtrim(&A.VC_PLAN_MEM_CRIT,' ') = 'A'
     let $grp_flag = 'N'
     let $sec_from = ''
     let $sec_where = ''
     let $sec_list = ''
  else
     let $grp_flag = 'Y'
     let $sec_from = ',PS_GB_GROUP_TBL    GT, PS_GB_SECGRPOPR_TB GS'
     let $sec_where = 'AND VA.GB_GROUP_ID = GT.GB_GROUP_ID AND GT.EFFDT =
                        (SELECT MAX(G2.EFFDT) FROM PS_GB_GROUP_TBL G2
                        Where G2.GB_GROUP_ID = GT.GB_GROUP_ID AND
                              G2.EFFDT <= ''' || &A.prd_end_dt || ''') AND GT.GB_GROUP_ID = GS.GB_GROUP_ID AND GS.GB_OPRID = '''||$prcs_oprid||''''
     let $sec_list = 'GT.DESCR '
  end-if
  do get-plan-type

from PS_RC_VC_REPORTS A
where A.OPRID       = $prcs_oprid and
      A.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

#DEBUGx show $sec_where
#DEBUGx show $sec_from

end-procedure

!**************************************************************************
!    Report procedure
!**************************************************************************
begin-procedure Report
 Position (1,1)

 let $init_group = ''

Begin-Select
VA.VC_PLAN_ID
VT.DESCR50
VA.VC_PAYOUT_PRD_ID
VA.GB_GROUP_ID
VA.EMPLID
VA.EMPL_RCD
VA.CURRENCY_CD
VA.VC_AWARD_VALUE
VA.REJECTED_REASON
XT.FIELDNAME
XT.FIELDVALUE
PD.NAME
[$sec_list] &GT_DESCR=char

  do getrellang
  let $FieldName = &XT.FIELDNAME
  let $FieldValue = &XT.FIELDVALUE
  do Read-Translate-Table
  move $XlatShortName to $AWDSXlatShortName
  if &VA.GB_GROUP_ID <> $init_group and $grp_flag = 'Y'
     if $init_group <> ''
        !print group totals
        do getchild

     end-if
     position (+1)
     Print $group (,1)
     Print &VA.GB_GROUP_ID (,9)
     Print $GT_DESCR (,25)
     position (+1,)
     let $init_group = &VA.GB_GROUP_ID
  end-if

  if $STOCK_PLAN = 'N'
     let $FieldName = 'REJECTED_REASON'
     let $FieldValue = &VA.REJECTED_REASON
     do Read-Translate-Table
     move $XlatShortName to $RRXlatShortName
  end-if

  do printrow

From    PS_VC_PLAN_TBL     VT,
        PS_VC_AWARD        VA,
        PS_PERSON_NAME     PD,
        PSXLATITEM         XT
        [$sec_from]
Where   VA.VC_PLAN_ID = &A.VC_PLAN_ID AND
        VA.VC_PLAN_ID = VT.VC_PLAN_ID AND
        VA.VC_PAYOUT_PRD_ID = &A.VC_PAYOUT_PRD_ID AND
        VA.VC_AWARD_STATUS IN ('E','J') AND
        VA.EMPLID = PD.EMPLID AND
        XT.FIELDNAME = 'VC_AWARD_STATUS' AND
        XT.FIELDVALUE = VA.VC_AWARD_STATUS AND
        XT.EFFDT     = (SELECT MAX(XX.EFFDT)
                     from PSXLATITEM XX
                     where  XX.FIELDNAME  = XT.FIELDNAME
                       and  XX.FIELDVALUE = XT.FIELDVALUE
                       and  XX.EFFDT     <= $AsOfDate)
        AND XT.EFF_STATUS = 'A'
        [$sec_where]
Order By VA.GB_GROUP_ID
End-Select

if  $grp_flag = 'Y'
  do getchild
end-if

end-procedure

!********************************************************
Begin-procedure getrellang

if rtrim(&A.VC_PLAN_MEM_CRIT,' ') = 'G' or rtrim(&A.VC_PLAN_MEM_CRIT,' ') = 'T'

begin-select
MAX(G2.EFFDT)  &G2_EFFDT=char
FROM PS_GB_GROUP_TBL G2
WHERE G2.GB_GROUP_ID = &VA.GB_GROUP_ID
AND   G2.EFFDT <= &A.PRD_END_DT
end-select

! Get Related Language info for PS_GB_GROUP_TBL
  move &GT_DESCR to $GB_GROUP_TBL-DESCR
  do Get_Related_GB_GROUP_TBL(&G2_EFFDT,&VA.GB_GROUP_ID)
  move $GB_GROUP_TBL-DESCR to $GT_DESCR

end-if

! Get Related Language info for PS_VC_PLAN_TBL
  move &VT.DESCR50 to $VC_PLAN_TBL-DESCR50
  do Get_Related_VC_PLAN_TBL(&A.VC_PLAN_ID)
  move  $VC_PLAN_TBL-DESCR50 to $VT_DESCR50

end-procedure
!********************************************************

Begin-procedure getchild

begin-select
TG.GB_CHILD_GROUP_ID
  let $child_group = &TG.GB_CHILD_GROUP_ID
  print $child_group (,8)

from PS_VC_TREE_GRP_VW TG
where TG.TREE_NAME = &A.TREE_NAME AND
      TG.TREE_EFFDT = &A.VC_TREE_DT AND
      TG.GB_GROUP_ID = &VA.GB_GROUP_ID
end-select
end-procedure

!********************************************************
Begin-procedure get-plan-type
begin-select
VP.VC_PLAN_TYPE

  evaluate &VP.VC_PLAN_TYPE
    when = 'I'
    when = 'Q'
    when = 'S'
    when = 'K'
    when = 'R'
      let $STOCK_PLAN = 'Y'
    when-Other
      let $STOCK_PLAN = 'N'
  end-evaluate

FROM PS_VC_PLAN_TBL VP
WHERE VC_PLAN_ID = &A.VC_PLAN_ID
end-select
end-procedure

!********************************************************
Begin-procedure PrintRow
  print &VA.EMPLID (,8)
  print &VA.EMPL_RCD (,21)
  print &PD.NAME (,27)
  print &VA.VC_AWARD_VALUE   (,54)
  print $AWDSXlatShortName   (,72)
  if $STOCK_PLAN = 'N'
      print $RRXlatShortName (,82)
  end-if
  position (+1,)
end-procedure

!********************************************************
Begin-Heading 10
 Print $current-date (2,90) edit 'MM/DD/YYYY'
 Page-Number (1,100)
 Print $plan_id (4,2)
 let $plan_info =  &VA.VC_PLAN_ID || ' ' || $VT_DESCR50
 Print $plan_info (4,22)
 Print $PAYOUT_PRD_ID (5,2)
 Print &VA.VC_PAYOUT_PRD_ID (5,22)
 Print $curr_cd (6,2)
 Print &VA.Currency_CD (6,22)

 Print $reportname (2,30)

 Print $emplid (8,8)
 Print $empl_rcd (8,21) wrap 4 2
 Print $name (8,27)
 Print $award_value (8,54)
 Print $status (8,72)
 if $STOCK_PLAN = 'N'
   Print $rejected_reason (8,82)
 end-if
End-Heading

!**************************************************************************
begin-procedure report-translation
!**************************************************************************
do Init_Report_Translation($ReportID,$Language_Cd)

do Get_Field_Information ('VCREPS','ACTUAL_AWARD',$actual_award,#DW)
do Get_Field_Information ('VCREPS','ACTUAL_FUNDING',$actual_funding,#DW)
do Get_Field_Information ('VCREPS','ANNUAL_RATE',$annual_rate,#DW)
do Get_Field_Information ('VCREPS','ATTAINED',$attained,#DW)
do Get_Field_Information ('VCREPS','CARRYOVER_BAL',$carryover_balance,#DW)
do Get_Field_Information ('VCREPS','EMPLID',$emplid,#dw)
do Get_Field_Information ('VCREPS','EMPL_RCD',$empl_rcd,#DW)
do Get_Field_Information ('VCREPS','GROUP',$group,#DW)
do Get_Field_Information ('VCREPS','GROUP_GOALS',$group_goals,#DW)
do Get_Field_Information ('VCREPS','GUARANTEE',$guarantee,#DW)
do Get_Field_Information ('VCREPS','HIRE_DATE',$hire_date,#DW)
do Get_Field_Information ('VCREPS','JOB_CODE',$job_code,#DW)
do Get_Field_Information ('VCREPS','MAX_AWARD',$max_award,#DW)
do Get_Field_Information ('VCREPS','MIN/MAX',$minmax,#DW)
do Get_Field_Information ('VCREPS','MIN_AWARD',$min_award,#DW)
do Get_Field_Information ('VCREPS','NAME',$name,#DW)
do Get_Field_Information ('VCREPS','OVERALL_PERF_FACT',$overall_perf_factor,#DW)
do Get_Field_Information ('VCREPS','PAYOUT_PRD_ID',$payout_prd_id,#DW)
do Get_Field_Information ('VCREPS','PERFORMACE_FACTOR',$parf_factor,#DW)
do Get_Field_Information ('VCREPS','PLAN ID',$plan_id,#DW)
do Get_Field_Information ('VCREPS','PLAN DESCR',$plan_descr,#DW)
do Get_Field_Information ('VCREPS','PROJECTED_PAYOUT',$projected_payout,#DW)
do Get_Field_Information ('VCREPS','TARGET_AWARD',$target_award,#DW)
do Get_Field_Information ('VCREPS','TARGET_VALUE',$target_value,#DW)
do Get_Field_Information ('VCREPS','TOTAL_PLAN',$total_plan,#DW)
do Get_Field_Information ('VCREPS','TOTAL_GROUP',$total_group,#DW)
do Get_Field_Information ('VCREPS','UNALLOCATED_BAL',$unallocated_balance,#DW)
do Get_Field_Information ('VCREPS','VALUATION',$valuation,#DW)
do Get_Field_Information ('VCREPS','VARIANCE',$variance,#DW)
do Get_Field_Information ('VCREPS','WEIGHTING',$weighting,#DW)
do Get_Field_Information ('VCREPS','DETAIL',$detail,#DW)
do Get_Field_Information ('VCREPS','SUMMARY',$summary,#DW)
do Get_Field_Information ('VCREPS','CURR_CD',$curr_cd,#DW)
do Get_Field_Information ('VCREPS','AWARD_VALUE',$award_value,#DW)
do Get_Field_Information ('VCREPS','STATUS',$status,#DW)
do Get_Field_Information ('VCREPS','REJECTED_REASON',$rejected_reason,#DW)
do Get_Field_Information ('VCREPS','VC013',$reportname,#DW)

let $group = $group||' :'

end-procedure

!*****************************************************************
#include 'stdapi.sqc'    !Routine to update run Status
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datemath.sqc'
#include 'sqrtrans.sqc'
#Include 'getrplng.sqc'  !Get the report language
