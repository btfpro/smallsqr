!***********************************************************************
!  HPH901CN.SQR:  Load Data into the FT Academic Teaching Survey Tbl   *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:19:24                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!                                                                      *
! Description: This sqr will populate the Full-Time Academic Survey    *
! Table (HP_FT_SURVEY).                                                *
!                                                                      *
!  Last Modified Oct 27 Platform Testing Issue                         *
!                Eliminate use of || for OS390                         *
!                                                                      *
!***********************************************************************
! This program is specific to HRMS Education & Government product      *
! line.                                                                *
!***********************************************************************
! This program is a result of F-CCONLEY-3                              *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Landscape Setup


!***********************************************************************
! REPORT
! Begins a program or a report.
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report


!***********************************************************************
! HEADING
! Begins a heading section.
!***********************************************************************
begin-heading 8

  ! Print top page heading
  #include 'stdhdg03.sqc'         ! for standard heading and AsOfDate
  print $ReportTitle2             (+1) center
  print $Year_Head                (+1) center
  print $Date_Head                (+1) center
  print 'Employee Id'             (+2,1,18)
  print 'Empl_Rcd'                (,20,14)
  print 'Process Type'            (,35,19)
  print 'Employee Name'           (,55,29)
  print 'Message Text'            (,85,)
  print ''                        (+1,1)

end-heading


!***********************************************************************
! HOUSEKEEPING
! Performs the application initializations.  Formats variables for use.
! Calls the procedures to get input parameters.
!***********************************************************************
begin-procedure HOUSEKEEPING

  move 'HPH901CN' to $ReportID

  do INIT-DATETIME
  do GET-CURRENT-DATETIME

  display 'Report Began: ' noline
  display &SysDateTime
  display ''

  do STDAPI-INIT
  do SELECT-PARAMETERS               ! Get E&G parameters
  do SELECT-REPORT-PARAMETERS        ! Get StatsCan parameters

  move 'Full-Time Academic Teaching Survey Data Load' to $ReportTitle
  move 'Exception Report' to $ReportTitle2
  move 'HPH901CN' to $ReportId

  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display ''
  display $ReportTitle2

  do CREATE-ARRAYS

  let $SrchStr = 'DQRSTUVX'           ! Employee Status Search String

end-procedure HOUSEKEEPING


!***********************************************************************
! CREATE-ARRAYS
! Creates an array for storing specific employee and job data.
!***********************************************************************
begin-procedure CREATE-ARRAYS

create-array name=RJA size=200
   field=R_EmplRcd:number        -
   field=R_JobEffdt:char         -
   field=R_ApptEnd_Dt:char       -
   field=R_EmplStat:char         -
   field=R_Action:char           -
   field=R_Reason:char           -
   field=R_Rank:char             -
   field=R_JobCd_Duties:char     -
   field=R_EarnsDistTyp:char     -
   field=R_Prorate:char          -
   field=R_JobCd_StdHrs:number   -
   field=R_JC_StdHrs_Freq:char   -
   field=R_StdHrs:number         -
   field=R_StdHrs_Freq:char      -
   field=R_CompFreq:char         -
   field=R_CompRate:number       -
   field=R_HrlyRt:number         -
   field=R_MnthlyRt:number       -
   field=R_AnnualRt:number       -
   field=R_NewEffdt:char

create-array name=CA size=50
   field=C_Cont_Beg_Dt:char      -
   field=C_Cont_End_Dt:char

create-array name=MONTHS size=5
   field=M_Months:number

end-procedure CREATE-ARRAYS


!***********************************************************************
! MAINLINE
! This is the main procedure.
!
! Refreshes the survey table and selects the employees that exists in
! Personal Data, Job Data and Faculty Member tables.
!
! Validates the employee's gender, birth date and jobcode, and that
! employee had no breaks in employment (no termination and re-hire
! within the reportable job or empl_rcd).
!
! If the employee is valid, this routine will call the procedure that
! populates the array tables. Once all of the employee's job data rows
! have been read and stored in the array table, this routine will call the
! procedure to process the array. In other words, it will populate and
! process the array one-employee-at-a-time.
!***********************************************************************
begin-procedure MAINLINE


  !-------------------------------------------------------------
  ! Build the WHERE clause and delete the existing survey record
  !-------------------------------------------------------------
  if not IsBlank($Run_Emplid)

     let $WhereClause = 'PD.EMPLID = ''' || $Run_Emplid ||
                      ''' AND FM.EMPLID = PD.EMPLID'

     do DELETE-EMPLOYEE-SURVEY

  else

     let $WhereClause = 'PD.EMPLID = FM.EMPLID'

     do DELETE-ALL-SURVEYS

  end-if

  !--------------------
  ! Intialize variables
  !--------------------
  do INITIALIZE-RUNNING-TOTALS

  let $J_Prev_Emplid     = ''
  let #J_Prev_EmplRcd    = 0
  let $J_Prev_JobEffdt   = ''
  let #J_Prev_TermRow    = 0
  let $J_Prev_JobCode    = ''
  let $J_Prev_BusUnit    = ''
  let $J_Prev_Cont_Effdt = ''

  let #J_BirthYr   = 0
  let $J_BirthDt   = ''
  let $J_Gender    = ''
  let $J_Company   = ''
  let $J_DeptId    = ''
  let $J_PrevEmplt = ''
  let $J_Province  = ''
  let $J_Country   = ''
  let $J_Ctzen     = ''

  let $Msg1 = ''
  let $Msg2 = ''
  let $Msg3 = ''

  let $Process_Type = 'J'
  let $Process_Text = 'Reportable Job'
  let $Cont_Selected = 0
  let $RegJob_Selected = 0
  let #J_Array = 0
  let #C_Array = 0
  let #J_Select = 1
  let #J_Oct_1 = 999
  let #C_Oct_1 = 999
  let #C_Loaded = 0
  let #MnthlyRt_Oct_1 = 0
  let #Total_Emps_Proc = 0

  !--------------------------------------------------
  ! Select records from Faculty Member and Job tables
  !--------------------------------------------------

  move #CurrRpt_Yr to $CurrRpt_Yr

  let $err-statement1 = 'HPH901CN, Select Error - MAINLINE'
  let $err-statement2 = 'Bind Variables: $RUN_EMPLID: '
  concat $Run_Emplid with $err-statement2
  concat ', $FT_RPT_START_DT: ' with $err-statement2
  concat $FT_Rpt_Start_Dt with $err-statement2
  concat ', $FT_RPT_END_DT: ' with $err-statement2
  concat $FT_Rpt_End_Dt with $err-statement2
  concat ', $FT_Oct_1_Dt: ' with $err-statement2
  concat $FT_Oct_1_Dt with $err-statement2
  concat ', WhereClause: ' with $err-statement2
  concat $WhereClause with $err-statement2
  concat ', $CurrRpt_Yr: ' with $err-statement2
  concat $CurrRpt_Yr with $err-statement2


begin-SELECT on-error=Error-Display
JB.EMPLID                   &JB_EMPLID
JB.EMPL_RCD                 &JB_EMPL_RCD
JB.EFFDT                    &JB_EFFDT
JB.DEPTID                   &JB_DEPTID
JB.JOBCODE                  &JB_JOBCODE
JB.SETID_DEPT               &JB_SETID_DEPT
JB.SETID_JOBCODE            &JB_SETID_JOBCODE
JB.EMPL_STATUS              &JB_EMPL_STATUS
JB.ACTION                   &JB_ACTION
JB.ACTION_REASON            &JB_ACTION_REASON
JB.BUSINESS_UNIT            &JB_BUSINESS_UNIT
JB.COMPANY                  &JB_COMPANY
JB.STD_HOURS                &JB_STD_HOURS
JB.STD_HRS_FREQUENCY        &JB_STDHRS_FREQ
JB.EARNS_DIST_TYPE          &JB_EARNS_DIST_TYPE
JB.COMP_FREQUENCY           &JB_COMP_FREQUENCY
JB.COMPRATE                 &JB_COMPRATE
JB.CHANGE_AMT               &JB_CHANGE_AMT
JB.ANNUAL_RT                &JB_ANNUAL_RT
JB.MONTHLY_RT               &JB_MONTHLY_RT
JB.HOURLY_RT                &JB_HOURLY_RT
JB.PRORATE_CNT_AMT          &JB_PRORATE_CNT_AMT
PD.NAME                     &PD_NAME
PD.SEX                      &PD_SEX
PD.BIRTHDATE                &PD_BIRTHDATE
FM.HP_RESIDENT_STATUS       &FM_HP_RESIDENT_STATUS
FM.HP_VISITING_FLAG         &FM_HP_VISITING_FLAG
FM.HP_PREV_EMPLYMNT         &FM_HP_PREV_EMPLYMNT
FM.PROVINCE                 &FM_PROVINCE
FM.COUNTRY                  &FM_COUNTRY
FM.HP_SALARY_STATUS         &FM_HP_SALARY_STATUS

  let $J_Emplid     = &JB_EMPLID
  let #J_EmplRcd    = &JB_EMPL_RCD
  let $J_JobEffdt   = &JB_EFFDT
  let $J_JobCode    = &JB_JOBCODE
  let $J_Setid_JC   = &JB_SETID_JOBCODE
  let $J_Setid_Dept = &JB_SETID_DEPT

  if $J_Prev_Emplid <> $J_Emplid

     if #J_Oct_1 <> 999

        do PROCESS-THE-ARRAY

     end-if

     let #Total_Emps_Proc = #Total_Emps_Proc + 1

     let $Process_Type = 'J'
     let $Process_Text = 'Reportable Job'

     clear-array name=RJA
     clear-array name=CA

     let #J_Oct_1 = 999
     let #C_Oct_1 = 999
     let #MnthlyRt_Oct_1 = 0
     let #C_Loaded = 0
     let #Cont_Found = 0

     let $J_Emplid     = &JB_EMPLID
     let #J_EmplRcd    = &JB_EMPL_RCD
     let $J_JobEffdt   = &JB_EFFDT
     let $J_JobCode    = &JB_JOBCODE
     let $J_Setid_JC   = &JB_SETID_JOBCODE
     let $J_Setid_Dept = &JB_SETID_DEPT

     let #J_Array  = 0
     let #C_Array  = 0
     let #J_Select = 1
     let #Cont_Selected = 0
     let #RegJob_Selected = 0

     let $J_Prev_JobCode = ''
     let $J_Prev_BusUnit = ''

     let $Save_Emplid = $J_Emplid
     let $Save_Name = rtrim(&PD_NAME,' ')
     let $Save_EmplRcd = edit(#J_EmplRcd,'999')
     move #J_EmplRcd to #Save_Mbr_EmplRcd
     let $Save_Mbr_CompFreq = rtrim(&JB_COMP_FREQUENCY,' ')
     move $J_Setid_JC to $Save_Setid_JC

     if &PD_SEX = 'U'

        let #J_Select = 0

        let $Msg1 = 'Gender is unknown. Employee skipped.'
        do PRINT-ERROR

     else

        let $J_BirthDt = &PD_BIRTHDATE
        do CONVERT-TO-DTU-DATE($J_BirthDt,$Birth_Dtu_Dt)
        do DTU-PARSE-DATE($Birth_Dtu_Dt,#J_BirthYr,#J_BirthMo,#J_BirthDay)

        if #J_BirthYr = 0

           let #J_BirthYr = 9999

        else

           if #J_BirthYr >= #CurrRpt_Yr - 21

              let #J_Select = 0

              move #J_BirthYr to $J_BirthYr
              let $Msg1 = 'Birth date year is less than 21 years before reporting year. Employee skipped.'
              let $Msg2 = 'Birth year: ' || $J_BirthYr || ', Report year: ' || $CurrRpt_Yr
              do PRINT-ERROR

           end-if

        end-if

        let $J_PrevEmplt = &FM_HP_PREV_EMPLYMNT
        let $J_Province  = &FM_PROVINCE
        let $J_Country   = &FM_COUNTRY
        let $J_Visiting  = &FM_HP_VISITING_FLAG
        let $J_Company   = &JB_COMPANY
        let $J_DeptId    = &JB_DEPTID
        let $J_Gender    = &PD_SEX
        let $J_SalStat   = &FM_HP_SALARY_STATUS
        let $J_Resident  = &FM_HP_RESIDENT_STATUS

        do GET-EMPLOYMENT-DATA

        let $Company = $J_Company
        do GET-COMPANY-DATA
        let $Company_Province = &CT.STATE

     end-if

  end-if

  do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')

  if $CMP_J_JobEffdt > $CMP_FT_Oct_1_Dt and #J_Array = 0

     let #J_Select = 0

  end-if

  if #J_Select

     let $J_BusUnit   = rtrim(&JB_BUSINESS_UNIT,' ')
     let $J_EmplStat  = rtrim(&JB_EMPL_STATUS,' ')
     let $J_Action    = rtrim(&JB_ACTION,' ')
     let $J_Reason    = rtrim(&JB_ACTION_REASON,' ')
     let $J_EarnsDist = rtrim(&JB_EARNS_DIST_TYPE,' ')
     let $J_Prorate   = rtrim(&JB_PRORATE_CNT_AMT,' ')
     let #J_StdHrs    = &JB_STD_HOURS
     let $J_StdHrs_Freq = rtrim(&JB_STDHRS_FREQ,' ')
     let $J_CompFreq  = rtrim(&JB_COMP_FREQUENCY,' ')
     let $J_JobCode   = &JB_JOBCODE
     let #J_CompRate  = &JB_COMPRATE
     let #J_HrlyRt    = &JB_HOURLY_RT
     let #J_MnthlyRt  = &JB_MONTHLY_RT
     let #J_AnnualRt  = &JB_ANNUAL_RT

     if $J_Prev_BusUnit <> $J_BusUnit or $J_Prev_JobCode <> $J_JobCode
        do VERIFY-JOBCODE                         ! Is jobcode reportable ?
     end-if

     if $J_Prev_Emplid <> $J_Emplid
        do GET-EMPLOYMENT-TEACHING-RECORD         ! Check for overrides
     end-if

     if instr($SrchStr,$J_EmplStat,1) > 0 and $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

        let #J_TermRow = 1

        if #J_Array > 0

           let #J_Select = 0

           let $Msg1 = 'Break in employment was detected.'
           let $Msg2 = 'Job effective date: ' || $J_JobEffdt || ',Employee status: ' ||
                       $J_EmplStat || ', Action code: ' || $J_Action || ', Reason code: ' || $J_Reason
           do PRINT-ERROR

        end-if

     else

        let #J_TermRow = 0

        if #J_Select

           if #Emplt_Teach

              if $Emplt_Collapse = 'N'

                 if $Emplt_Rpt_Flag = 'F' or $Emplt_Rpt_Flag = 'B'

                    if not #JobCode_Rpt_Flag and $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

                       let $Msg1 = 'FYI Only: The Job Code StatsCan report flag is set to part-time or not-applicable'
                       let $Msg2 = 'in the Job Code table but was overwritten in the Employment Teaching table.'
                       let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
                       do PRINT-ERROR

                    end-if

                    do POPULATE-ARRAY-TABLE

                 else

                    if $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

                       if #JobCode_Rpt_Flag

                          let $Msg1 = 'The Job Code StatCan report flag was overwritten to part-time or not-applicable '
                          let $Msg2 = 'in the Employment Teaching table.'
                          let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
                          do PRINT-ERROR

                       else

                          let $Msg1 = 'The Job Code StatCan report flag in Jobcode table is set to part-time ' ||
                                      'or not-applicable in the'
                          let $Msg2 = 'Job Code table and Employment Teaching table.'
                          let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
                          do PRINT-ERROR

                       end-if

                    end-if

                 end-if

              else

                 let #J_Select = 0

                 if $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

                    let $Msg1 = 'Collapsable indicator is set to Y in the Employment Teaching table.'
                    let $Msg2 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
                    do PRINT-ERROR

                 end-if

              end-if

           else

              if #JobCode_Rpt_Flag

                 do POPULATE-ARRAY-TABLE

              else

                 if $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

                    let $Msg1 = 'The Job Code StatCan report flag in Job Code table is set to part-tiime or '
                    let $Msg2 = 'or not-applicable and Employment Teaching record does not exists.'
                    let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
                    do PRINT-ERROR

                 end-if

              end-if

           end-if

        end-if

     end-if

  end-if

  let $J_Prev_Emplid   = $J_Emplid
  let #J_Prev_EmplRcd  = #J_EmplRcd
  let $J_Prev_JobEffdt = $J_JobEffdt
  let #J_Prev_TermRow  = #J_TermRow
  let $J_Prev_JobCode  = $J_JobCode
  let $J_Prev_BusUnit  = $J_BusUnit

  FROM PS_PERSONAL_DT_FST PD, PS_HP_STATS_FT_MBR FM,
       PS_JOB JB
 WHERE [$WhereClause]
   AND FM.HP_STATS_CAN_YR = #CurrRpt_Yr
   AND JB.EMPLID = FM.EMPLID
   AND JB.EMPL_RCD = FM.EMPL_RCD
   AND (JB.EFFDT =
         (SELECT MAX(JB1.EFFDT)
          FROM PS_JOB JB1
         WHERE JB1.EMPLID = JB.EMPLID
           AND JB1.EMPL_RCD = JB.EMPL_RCD
           AND JB1.EFFDT <= $FT_Rpt_Start_Dt)
        OR (JB.EFFDT >= $FT_Rpt_Start_Dt AND JB.EFFDT <= $FT_Rpt_End_Dt))
  AND JB.EFFSEQ =
      (SELECT MAX(JB2.EFFSEQ)
         FROM PS_JOB JB2
        WHERE JB2.EMPLID = JB.EMPLID
          AND JB2.EMPL_RCD = JB.EMPL_RCD
          AND JB2.EFFDT = JB.EFFDT)
ORDER BY JB.EMPLID,JB.EMPL_RCD,JB.EFFDT ASC
end-SELECT

  if #Total_Emps_Proc > 0

     if #J_Oct_1 <> 999

        do PROCESS-THE-ARRAY

     end-if

     display 'Number of employees selected to process: ' noline
     display #Total_Emps_Proc
     display ' '

  else

     display 'No employees were selected to process'
     display ' '

  end-if

end-procedure MAINLINE


!***********************************************************************
! DELETE-EMPLOYEE-SURVEY
! Delete employee's FT Survey record.
!***********************************************************************
begin-procedure DELETE-EMPLOYEE-SURVEY

begin-SQL
DELETE FROM PS_HP_FT_SURVEY
 WHERE EMPLID = $Run_Emplid
   AND HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

end-procedure DELETE-EMPLOYEE-SURVEY


begin-procedure DELETE-ALL-SURVEYS

begin-SQL
DELETE FROM PS_HP_FT_SURVEY
 WHERE HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

end-procedure DELETE-ALL-SURVEYS


!***********************************************************************
! DELETE-ALL-SURVEYS
! Delete all records in the FT Survey table.
!***********************************************************************
begin-procedure INITIALIZE-RUNNING-TOTALS

  let #J_Total_Actual = 0
  let #C_Total_Actual = 0

  let #J_Total_Annual = 0
  let #C_Total_Annual = 0

  let #J_Total_Stipends = 0
  let #C_Total_Stipends = 0

  let #J_Total_NonOp_Funds = 0
  let #C_Total_NonOp_Funds = 0

  let #J_Total_NonOp_Stip = 0
  let #C_Total_NonOp_Stip = 0

  let #Total_Active_MM = 0
  let #Total_UnPaid_MM = 0
  let #Total_Sabbat_MM = 0
  let #Total_OthrLv_MM = 0
  let #Total_Workload  = 0

end-procedure INITIALIZE-RUNNING-TOTALS


!***********************************************************************
! PROCESS THE ARRAY
! Checks if the array contains only one termination job row. If so, it
! ignores the array and prints an error on the report.
!
! Calls the routine that processes the array table containing the
! employee's reportable job (main job).
!
! After the processing of the array table is complete and successful,
! it clears the array. Next, it calls the routine that retrieves
! jobs that are collapsable into the reportable job.
!
! After the collapsable jobs rows are selected and processed, it calls
! the routines that creates the Academic Teaching record.
!***********************************************************************
begin-procedure PROCESS-THE-ARRAY

  if #J_Array > 0

     if #J_Array = 1 and #J_Prev_TermRow

        let $Msg1 = 'Job has a termination status.'
        let $Msg2 = 'Job effective Date: ' || $J_Prev_JobEffdt || ', Job code: ' || $J_Prev_JobCode
        let $Msg3 = 'Employee status: ' || $J_EmplStat || ', Action code: ' || $J_Action ||
                      ', Reason code: ' || $J_Reason
        do PRINT-ERROR

     else

        let #Last_Array = #J_Array - 1
        get $Save_JobCode_Rank from RJA(#Last_Array) R_Rank
        get $Save_JobCd_Duties from RJA(#Last_Array) R_JobCd_Duties

        do PROCESS-RJA

        if #J_Select

           let #J_Total_Actual = #Total_Actual
           let #J_Total_Annual = #Total_Annual

           if #RegJob_Selected

              let #J_Total_Stipends = #Total_Stipends
              let #J_Total_NonOp_Funds = #Total_NonOp_Funds
              let #J_Total_NonOp_Stip = #Total_NonOp_Stip

           end-if

           let $Process_Type = 'C'
           let $Process_Text = 'Collapsable Job'

           clear-array name=RJA
           clear-array name=CA

           let #J_Oct_1 = 999
           let #C_Oct_1 = 999
           let #MnthlyRt_Oct_1 = 0
           let #C_Loaded = 0
           let #Cont_Found = 0

           do PROCESS-CJA

           let #Grand_T_Actual = #J_Total_Actual + #C_Total_Actual
           let #Grand_T_Annual = #J_Total_Annual + #C_Total_Annual
           let #Grand_T_Stipends = #J_Total_Stipends + #C_Total_Stipends
           let #Grand_T_NonOp_Funds = #J_Total_NonOp_Funds + #C_Total_NonOp_Funds
           let #Grand_T_NonOp_Stip = #J_Total_NonOp_Stip + #C_Total_NonOp_Stip

           let $Process_Text = 'Reportable Job'
           do CREATE-SURVEY-RECORD
           do INSERT-FT-SURVEY-RECORD
           do INITIALIZE-RUNNING-TOTALS

        end-if

     end-if

  end-if

end-procedure PROCESS-THE-ARRAY


!***********************************************************************
! GET-EMPLOYMENT-DATA
!***********************************************************************
begin-procedure GET-EMPLOYMENT-DATA

  let $err-statement1 = 'HPH901CN, Select Error - GET-EMPLOYMENT-DATA'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '
  concat $J_Emplid with $err-statement2
  concat ', #J_EMPLRCD: ' with $err-statement2
  concat #J_EmplRcd with $err-statement2 '0'

begin-SELECT on-error=Error-Display
POAH.APPOINT_END_DT

   let $J_ApptEnd_Dt     = &POAH.APPOINT_END_DT

 FROM PS_PER_ORG_ASG_HP POAH
WHERE POAH.EMPLID = $J_Emplid
  AND POAH.EMPL_RCD = #J_EmplRcd
end-SELECT

end-procedure GET-EMPLOYMENT-DATA


!***********************************************************************
! VERIFY-JOBCODE
! Verifies if the employee's jobcode is "reportable" on the survey
!***********************************************************************
begin-procedure VERIFY-JOBCODE

  let #JobCode_Rpt_Flag = 0
  let #JobCode_StdHrs   = 0
  let $JC_StdHrs_Freq = ''
  let $JobCode_Rank = ''
  let $JobCd_Duties = ''
  let $Setid = $J_Setid_JC

  let $err-statement1 = 'HPH901CN, Select Error - VERIFY-JOBCODE'
  let $err-statement2 = 'Bind Variables: $SETID: '
  concat $SetId with $err-statement2
  concat ', $J_JOBCODE: ' with $err-statement2
  concat $J_JobCode with $err-statement2
  concat ', $ASOFTODAY: ' with $err-statement2
  concat $AsOfToday with $err-statement2


begin-SELECT on-error=Error-Display
JC.EG_ACADEMIC_RANK
JC.HP_STATS_RPT_FLAG
JC.STD_HOURS
JC.STD_HRS_FREQUENCY
JC.HP_STATS_DUTIES

   If rtrim(&JC.HP_STATS_RPT_FLAG,' ') = 'F' or rtrim(&JC.HP_STATS_RPT_FLAG,' ') = 'B'
      let #Jobcode_Rpt_Flag = 1
   end-if

   let $JobCode_Rank = &JC.EG_ACADEMIC_RANK
   let #JobCode_StdHrs = &JC.STD_HOURS
   let $JC_StdHrs_Freq = &JC.STD_HRS_FREQUENCY
   let $JobCd_Duties = &JC.HP_STATS_DUTIES

 FROM PS_JOBCODE_TBL JC
WHERE JC.SETID = $SetId
  AND JC.JOBCODE = $J_JobCode
  AND JC.EFFDT =
      (SELECT MAX(JC1.EFFDT)
         FROM PS_JOBCODE_TBL JC1
        WHERE JC1.SETID = JC.SETID
          AND JC1.JOBCODE = JC.JOBCODE
          AND JC1.EFFDT <= $AsOfToday)
 AND JC.EFF_STATUS = 'A'
end-SELECT

end-procedure VERIFY-JOBCODE


!***********************************************************************
! GET-EMPLOYMENT-TEACHING-RECORD
! Gets the Employee Teaching record for the emplid, empl_rcd.
!***********************************************************************
begin-procedure GET-EMPLOYMENT-TEACHING-RECORD

  let #Emplt_Teach = 0
  let $Emplt_Collapse = ''
  let $Emplt_Rpt_Flag = ''

  let $J_Subject = '99999'
  let $J_Duties = ''

  let $err-statement1 = 'HPH901CN, Select Error - GET-EMPLOYMENT-TEACHING-RECORD'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '
  concat $J_Emplid with $err-statement2
  concat ', #J_EMPLRCD: ' with $err-statement2
  concat #J_EmplRcd with $err-statement2 '0'
  concat ', $FT_OCT_1_DT: ' with $err-statement2
  concat $FT_Oct_1_Dt with $err-statement2

begin-SELECT on-error=Error-Display
ET.HP_STATS_RPT_FLAG
ET.HP_STATS_SUBJ_CD
ET.HP_STATS_DUTIES
ET.HP_COLLAPSE_INDC

   let #Emplt_Teach = 1
   let $Emplt_Rpt_Flag = &ET.HP_STATS_RPT_FLAG
   let $Emplt_Collapse = &ET.HP_COLLAPSE_INDC
   let $J_Subject = &ET.HP_STATS_SUBJ_CD
   let $J_Duties = &ET.HP_STATS_DUTIES

FROM PS_HP_EMPLT_TEACH ET
WHERE ET.EMPLID = $J_Emplid
  AND ET.EMPL_RCD = #J_EmplRcd
  AND ET.DATA_KEY1_DT =
      (SELECT MAX(ET1.DATA_KEY1_DT)
         FROM PS_HP_EMPLT_TEACH ET1
        WHERE ET1.EMPLID = ET.EMPLID
          AND ET1.EMPL_RCD = ET.EMPL_RCD
          AND ET1.DATA_KEY1_DT <= $FT_Oct_1_Dt)
end-SELECT

end-procedure GET-EMPLOYMENT-TEACHING-RECORD


!***********************************************************************
! POPULATE-ARRAY-TABLE
! Populates the array table with employee and job data.
!***********************************************************************
begin-procedure POPULATE-ARRAY-TABLE

  if rtrim($J_CompFreq,' ') = 'C'

     if #C_Loaded = 0

        do GET-CONTRACT-INFO
        let #C_Loaded = 1

     end-if

     if #Cont_Found = 0 and #Cont_Selected = 0 and
        ($Process_Type = 'C' or ($Process_Type = 'J' and $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt))

        let $Msg1 = 'No contract pay data found for reporting period. Job row skipped.'
        let $Msg2 = 'Job effective date: ' || $J_JobEffdt
        do PRINT-ERROR

        let #J_Select = 0

     else

        if #RegJob_Selected

           if rtrim($Process_Type,' ') <> 'C'

              if #Cont_Selected = 0 and $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

                 let $Msg1 = 'Employee has more than 1 appointment in the reporting period and at'
                 let $Msg2 = 'least 1 is contract. Employee skipped.'
                 do PRINT-ERROR

              end-if

              let #J_Select = 0

           end-if

        else

           if #C_Array > 0 and rtrim($Process_Type,' ') <> 'C' and #Cont_Selected = 0

              let $Msg1 = 'Employee has more than 1 contract appointment within the reporting period.'
              let $Msg2 = 'Employee skipped.'
              do PRINT-ERROR

              let #J_Select = 0

           end-if

        end-if

        let #Cont_Selected = 1

     end-if

  else

     if #Cont_Selected and rtrim($Process_Type,' ') <> 'C'

        if #RegJob_Selected = 0 and $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

           let $Msg1 = 'Employee has more than 1 appointment in the reporting period and at'
           let $Msg2 = 'least 1 is contract. Employee skipped.'
           do PRINT-ERROR

        end-if

        let #J_Select = 0

     end-if

     let #RegJob_Selected = 1
     let #C_Loaded = 0

  end-if

  if #J_Select

     put #J_EmplRcd      into RJA(#J_Array) R_EmplRcd
     put $J_JobEffdt     into RJA(#J_Array) R_JobEffdt
     put $J_ApptEnd_Dt   into RJA(#J_Array) R_ApptEnd_Dt
     put $J_EmplStat     into RJA(#J_Array) R_EmplStat
     put $J_Action       into RJA(#J_Array) R_Action
     put $J_Reason       into RJA(#J_Array) R_Reason
     put $JobCode_Rank   into RJA(#J_Array) R_Rank
     put $JobCd_Duties   into RJA(#J_Array) R_JobCd_Duties
     put $J_EarnsDist    into RJA(#J_Array) R_EarnsDistTyp
     put $J_Prorate      into RJA(#J_Array) R_Prorate
     put #JobCode_StdHrs into RJA(#J_Array) R_JobCd_StdHrs
     put $JC_StdHrs_Freq into RJA(#J_Array) R_JC_StdHrs_Freq
     put #J_StdHrs       into RJA(#J_Array) R_StdHrs
     put $J_StdHrs_Freq  into RJA(#J_Array) R_StdHrs_Freq

     put $J_CompFreq  into RJA(#J_Array) R_CompFreq
     put #J_CompRate  into RJA(#J_Array) R_CompRate
     put #J_HrlyRt    into RJA(#J_Array) R_HrlyRt
     put #J_MnthlyRt  into RJA(#J_Array) R_MnthlyRt
     put #J_AnnualRt  into RJA(#J_Array) R_AnnualRt

     let $J_Prev_JobEffdt  = $J_JobEffdt
     let $J_Prev_CompFreq  = $J_CompFreq
     let #J_Prev_CompRate  = #J_CompRate
     let #J_Prev_HrlyRt    = #J_HrlyRt
     let #J_Prev_MnthlyRt  = #J_MnthlyRt
     let #J_Prev_AnnualRt  = #J_AnnualRt

     if $CMP_J_JobEffdt <= $CMP_FT_Oct_1_Dt

        let #J_Oct_1 = #J_Array
        let #MnthlyRt_Oct_1 = #J_MnthlyRt

     end-if

     let #J_Array = #J_Array + 1

  end-if

end-procedure POPULATE-ARRAY-TABLE


!***********************************************************************
! GET-CONTRACT-INFO
!***********************************************************************
begin-procedure GET-CONTRACT-INFO

  let $J_Prev_Cont_End_Dt = ''
  do FORMAT-DATETIME($J_Prev_Cont_End_Dt,$CMP_J_Prev_Cont_End_Dt,{DEFCMP},'','')

  let $err-statement1 = 'HPH901CN, Select Error - GET-CONTRACT-INFO'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '
  concat $J_Emplid with $err-statement2
  concat ', #J_EMPLRCD: ' with $err-statement2
  concat #J_EmplRcd with $err-statement2 '0'
  concat ', $J_JOBEFFDT: ' with $err-statement2
  concat $J_JobEffdt with $err-statement2

begin-SELECT on-error=Error-Display
CONT.EFFDT
CONT.CONTRACT_BEGIN_DT
CONT.CONTRACT_END_DT

   let $J_Cont_Beg_Dt = &CONT.CONTRACT_BEGIN_DT
   let $J_Cont_End_Dt = &CONT.CONTRACT_END_DT

   do FORMAT-DATETIME($J_Cont_Beg_Dt,$CMP_J_Cont_Beg_Dt,{DEFCMP},'','')
   do FORMAT-DATETIME($J_Cont_End_Dt,$CMP_J_Cont_End_Dt,{DEFCMP},'','')

   if #Cont_Found and $CMP_J_Cont_Beg_Dt > $CMP_J_Prev_Cont_End_Dt

      let #C_Array = #C_Array + 1

   end-if

   put $J_Cont_Beg_Dt  into CA(#C_Array) C_Cont_Beg_Dt
   put $J_Cont_End_Dt  into CA(#C_Array) C_Cont_End_Dt
   let $CMP_J_Prev_Cont_End_Dt = $CMP_J_Cont_End_Dt

   if $CMP_J_Cont_Beg_Dt <= $CMP_FT_Oct_1_Dt

      let #C_Oct_1 = #C_Array
      let #Cont_Found = 1

   end-if

   let #C_Loaded = 1

 FROM PS_CONTRACT CONT
WHERE CONT.EMPLID = $J_Emplid
  AND CONT.EMPL_RCD = #J_EmplRcd
  AND CONT.CONTRACT_END_DT > $FT_Rpt_Start_Dt
  AND CONT.CONTRACT_BEGIN_DT < $FT_Rpt_End_Dt
ORDER BY CONT.EFFDT ASC
end-SELECT

end-procedure GET-CONTRACT-INFO


!***********************************************************************
! PROCESS-RJA
! Reads all the records in the array.  Calculates the duration of the
! job and the salary paid or unpaid.
!***********************************************************************
begin-procedure PROCESS-RJA

  let #J_Prev_FullPart = ''
  let $J_Prev_CompFreq = ''
  let $J_Prev_CompRate = 0
  let $J_Prev_Union = ''
  let $J_Prev_Cont_Effdt = ''
  let $J_Prev_Cont_End_Dt = ''

  let $J_Next_CompFreq = 0
  let $J_Next_Cont_Effdt = ''

  let #Total_Duration = 0
  let #Total_Cont_Paid = 0

  let #Total_Actual = 0
  let #Total_Annual = 0
  let #Total_Stipends = 0
  let #Total_NonOp_Funds = 0
  let #Total_NonOp_Stip = 0
  let $Reduced_Wrkld = 'N'

  let #Last_Array = #J_Array - 1
  let #J_Array = 0
  let #J_Select = 1

  if #C_Loaded

     let #C_Last_Array = #C_Oct_1
     let #C_Array = #C_Oct_1

  end-if

  let #Cont_Found = 0

  while #J_Array <= #Last_Array

     do GET-APPT-DATA-FROM-ARRAY

     if rtrim($J_CompFreq,' ') = 'C'

        if #Cont_Found

           do CALCULATE-CONTRACT

           let #J_Array = #Last_Array

        end-if

     else

        do CALCULATE-JOB-SALARY

     end-if

     let #J_Prev_EmplRcd  = #J_EmplRcd
     let #J_Prev_JobEffdt = $J_JobEffdt
     let #J_Prev_TermRow  = #J_TermRow
     let $J_Prev_FullPart = $J_FullPart
     let $J_Prev_Union    = $J_Union
     let $J_Prev_CompFreq = $J_CompFreq

     let #J_Array = #J_Array + 1

  end-while

  if #J_Select

     if #Cont_Selected

        let #Total_Actual = #Total_Actual + #Total_Cont_Paid
        let #Total_Annual = #Total_Annual + #Total_Cont_Paid

        if $Process_Type = 'J'

           let #Total_Active_MM = ROUND(#Actual_Months,0)
           let #Total_Unpaid_MM = 12 - #Total_Active_MM

        end-if

     else

        if #RegJob_Selected and $Process_Type = 'J'

           do SUMMARIZE-MONTHS

           if #Total_Months < 12

              let $Msg1 = 'Total duration of appointment is less than 12 months.'
              let $Msg2 = 'Job effective date: ' || $J_JobStart_Dt || ', Job end date: ' || $J_JobEnd_Dt
              do PRINT-ERROR

              let #J_Select = 0

           end-if

        end-if

     end-if

  end-if

end-procedure PROCESS-RJA


!***********************************************************************
! GET-APPT-DATA-FROM-ARRAY
!***********************************************************************
begin-procedure GET-APPT-DATA-FROM-ARRAY

  get #J_EmplRcd      from RJA(#J_Array) R_EmplRcd
  get $J_JobEffdt     from RJA(#J_Array) R_JobEffdt
  get $J_ApptEndDt    from RJA(#J_Array) R_ApptEnd_Dt
  get $J_EmplStat     from RJA(#J_Array) R_EmplStat
  get $J_Action       from RJA(#J_Array) R_Action
  get $J_Reason       from RJA(#J_Array) R_Reason
  get $JobCode_Rank   from RJA(#J_Array) R_Rank
  get $JobCd_Duties   from RJA(#J_Array) R_JobCd_Duties
  get $J_EarnsDist    from RJA(#J_Array) R_EarnsDistTyp
  get $J_Prorate      from RJA(#J_Array) R_Prorate
  get #JobCode_StdHrs from RJA(#J_Array) R_JobCd_StdHrs
  get $JC_StdHrs_Freq from RJA(#J_Array) R_JC_StdHrs_Freq
  get #J_StdHrs       from RJA(#J_Array) R_StdHrs
  get $J_StdHrs_Freq  from RJA(#J_Array) R_StdHrs_Freq
  get $J_CompFreq     from RJA(#J_Array) R_CompFreq
  get #J_CompRate     from RJA(#J_Array) R_CompRate
  get #J_HrlyRt       from RJA(#J_Array) R_HrlyRt
  get #J_MnthlyRt     from RJA(#J_Array) R_MnthlyRt
  get #J_AnnualRt     from RJA(#J_Array) R_AnnualRt
  get $J_NewEffdt     from RJA(#J_Array) R_NewEffdt

  do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')

  if rtrim($J_CompFreq,' ') = 'C' and #C_Loaded

     let #Cont_Found = 0
     let #Job_Found  = 0

     if instr($SrchStr,$J_EmplStat,1) > 0

        let #Active = 0

     else

        let #Active = 1

     end-if

     while (#Cont_Found = 0 and #C_Array <= #C_Last_Array and #Active)

        get $J_Cont_Beg_Dt from CA(#C_Array) C_Cont_Beg_Dt
        get $J_Cont_End_Dt from CA(#C_Array) C_Cont_End_Dt

        do FORMAT-DATETIME($J_Cont_End_Dt,$CMP_J_Cont_End_Dt,{DEFCMP},'','')

        if $CMP_J_JobEffdt < $CMP_J_Cont_End_Dt

           let #Cont_Found = 1

        end-if

        let #C_Array = #C_Array + 1

     end-while

     if #Cont_Found

        let $T_Cont_End_Dt = $J_Cont_End_Dt

        do GET-DATE-DIFF($J_Cont_End_Dt,$J_Cont_Beg_Dt,#Cont_Months)

        while (#J_Array < #Last_Array and #Job_Found = 0)

           let #J_Next = #J_Array + 1
           get $J_Next_JobEffdt from RJA(#J_Next) R_JobEffdt

           do FORMAT-DATETIME($J_Next_JobEffdt,$CMP_J_Next_JobEffdt,{DEFCMP},'','')

           if $CMP_J_Next_JobEffdt <= $CMP_J_Cont_End_Dt

              let #J_Array = #J_Next
              get #J_EmplRcd      from RJA(#J_Array) R_EmplRcd
              get $J_JobEffdt     from RJA(#J_Array) R_JobEffdt
              get $J_ApptEndDt    from RJA(#J_Array) R_ApptEnd_Dt
              get $J_EmplStat     from RJA(#J_Array) R_EmplStat
              get $J_Action       from RJA(#J_Array) R_Action
              get $J_Reason       from RJA(#J_Array) R_Reason
              get $JobCode_Rank   from RJA(#J_Array) R_Rank
              get $JobCd_Duties   from RJA(#J_Array) R_JobCd_Duties
              get $J_EarnsDist    from RJA(#J_Array) R_EarnsDistTyp
              get $J_Prorate      from RJA(#J_Array) R_Prorate
              get #JobCode_StdHrs from RJA(#J_Array) R_JobCd_StdHrs
              get $JC_StdHrs_Freq from RJA(#J_Array) R_JC_StdHrs_Freq
              get #J_StdHrs       from RJA(#J_Array) R_StdHrs
              get $J_StdHrs_Freq  from RJA(#J_Array) R_StdHrs_Freq
              get $J_CompFreq     from RJA(#J_Array) R_CompFreq
              get #J_CompRate     from RJA(#J_Array) R_CompRate
              get #J_HrlyRt       from RJA(#J_Array) R_HrlyRt
              get #J_MnthlyRt     from RJA(#J_Array) R_MnthlyRt
              get #J_AnnualRt     from RJA(#J_Array) R_AnnualRt
              get $J_NewEffdt     from RJA(#J_Array) R_NewEffdt

              if instr($SrchStr,$J_EmplStat,1) > 0 and rtrim($J_CompFreq,' ') = 'C'

                 do CONVERT-TO-DTU-DATE($J_JobEffdt,$Temp1_Dt)
                 do DTU-SUBTRACT-DAYS($Temp1_Dt,1,$Temp_Dt2)
                 do CONVERT-FROM-DTU-DATE($Temp_Dt2,$T_Cont_End_Dt)
                 do GET-DATE-DIFF($T_Cont_End_Dt,$J_Cont_Beg_Dt,#Actual_Months)

                 let #J_CompRate = #Actual_Months / #Cont_Months * #J_CompRate
                 let #Job_Found = 1

              end-if

           else

              let #Job_Found = 1

           end-if

        end-while

        let #Job_Found = 1

     end-if

  end-if

  if #J_Array = 0

     let $J_JobStart_Dt = $J_JobEffdt
     do FORMAT-DATETIME($J_JobStart_Dt,$CMP_J_JobStart_Dt,{DEFCMP},'','')

  end-if

  if #J_Array = #Last_Array

     if $J_ApptEnd_Dt > ''

        do FORMAT-DATETIME($J_JobEnd_Dt,$CMP_J_JobEnd_Dt,{DEFCMP},'','')
        do FORMAT-DATETIME($J_ApptEnd_Dt,$CMP_J_ApptEnd_Dt,{DEFCMP},'','')

        if $CMP_J_ApptEnd_Dt > $CMP_FT_Rpt_End_Dt

           let $J_JobEnd_Dt = $FT_Rpt_End_Dt

        else

           let $J_JobEnd_Dt = $J_ApptEnd_Dt

        end-if

     else

        let $J_JobEnd_Dt = $FT_Rpt_End_Dt

     end-if

     do CONVERT-TO-DTU-DATE($J_JobEnd_Dt,$Temp1_Dt)
     do DTU-ADD-DAYS($Temp1_Dt,1,$Temp_Dt2)
     do CONVERT-FROM-DTU-DATE($Temp_Dt2,$J_Start_Oct_1)

  else

     let #J_Next = #J_Array + 1
     get $J_JobEnd_Dt from RJA(#J_Next) R_JobEffdt
     let $J_Start_Oct_1 = $J_JobEnd_Dt

     do CONVERT-TO-DTU-DATE($J_JobEnd_Dt,$Temp1_Dt)
     do DTU-SUBTRACT-DAYS($Temp1_Dt,1,$Temp_Dt2)
     do CONVERT-FROM-DTU-DATE($Temp_Dt2,$J_JobEnd_Dt)

  end-if

  do FORMAT-DATETIME($J_Start_Oct_1,$CMP_J_Start_Oct_1,{DEFCMP},'','')

  if #J_Array = #J_Oct_1 and $CMP_J_Start_Oct_1 <= $CMP_FT_Rpt_End_Dt

     let $J_End_Oct_1   = $FT_Rpt_End_Dt

  else

     let $J_Start_Oct_1 = ''
     let $J_End_Oct_1   = ''

  end-if

  do FORMAT-DATETIME($J_JobEnd_Dt,$CMP_J_ApptEnd_Dt,{DEFCMP},'','')
  do FORMAT-DATETIME($J_JobEnd_Dt,$CMP_J_JobEnd_Dt,{DEFCMP},'','')

end-procedure GET-APPT-DATA-FROM-ARRAY


!***********************************************************************
! CALCULATE-JOB-SALARY
! Gets job earnings distribution rows for non-contract employees and
! calculates the salary information
!***********************************************************************
begin-procedure CALCULATE-JOB-SALARY

  do GET-MONTHS-TO-BE-PAID-OR-UNPAID
  do DETERMINE-HR-ACTION
  move 0 to #EarnsDist_Fnd

  if rtrim($J_EarnsDist,' ') <> 'N'

     do GET-EARNS-DISTRBTN

     if not #EarnsDist_Fnd

        if $Action_Cat <> ''

           let $Msg1 = 'FYI: Employee is on leave or workload reduction but does not have job earnings'
           let $Msg2 = 'distribution rows. Normal base salary was calculated.'
           let $Msg3 = 'Job effective date: ' || $J_JobEffdt
           do PRINT-ERROR

        end-if

        do CALCULATE-BASE-SALARY-PAID

     end-if

  else

     do CALCULATE-BASE-SALARY-PAID

  end-if

  if $Action_Cat = $Runctl_Workload and #EarnsDist_Fnd

        let #Reduced_Not_Paid = (#J_MnthlyRt * #Paid_Months) - #Dist_Paid_Amt
        let #Total_Annual = #Total_Annual + #Reduced_Not_Paid

  end-if

  if $Process_Type = 'J'

     evaluate $Action_Cat

        when = $Runctl_Sabbatical

           let #Total_Sabbat_MM = #Total_Sabbat_MM + #Paid_Months

        when = $Runctl_Workload

           let $Reduced_Wrkld = 'Y'
           let #Total_Active_MM = #Total_Active_MM + #Paid_Months

           move $J_StdHrs_Freq to $StdHrs_Freq
           do GET-FREQ-ANNL-FACTOR
           let #J_Freq_Annl_Factor = #Freq_Annl_Factor

           move $JC_StdHrs_Freq to $StdHrs_Freq
           do GET-FREQ-ANNL-FACTOR
           let #JC_Freq_Annl_Factor = #Freq_Annl_Factor

           let #Reduced_Workload = ((#J_StdHrs * #J_Freq_Annl_Factor) / (#JobCode_StdHrs * #JC_Freq_Annl_Factor))
                                        * (#Paid_Months / 12)
           let #Total_Workload = #Total_Workload + #Reduced_Workload

        when = $Runctl_OtherLeave

           let #Total_OthrLv_MM = #Total_OthrLv_MM + #Paid_Months

        when = $Runctl_Unpaid

           let #Total_UnPaid_MM = #Total_Unpaid_MM + #Paid_Months

        when-other

           let #Total_Active_MM = #Total_Active_MM + #Paid_Months
           let #Total_Workload = #Total_Workload + (#Paid_Months / 12)

     end-evaluate

  end-if

end-procedure CALCULATE-JOB-SALARY


!***********************************************************************
! GET-MONTHS-TO-BE-PAID-OR-UNPAID
! Gets the number of months a job is to be paid or unpaid for
! non-contract jobs only
!***********************************************************************
begin-procedure GET-MONTHS-TO-BE-PAID-OR-UNPAID

  let #Paid_Months = 0
  let #UnPaid_Months = 0
  let #Months_Oct_1 = 0

  if #J_Array = 0

     if $CMP_J_JobEffdt > $CMP_FT_Rpt_Start_Dt

        !----------------------
        ! Calculate unpaid time
        !----------------------

        do CONVERT-TO-DTU-DATE($J_JobEffdt,$Temp1_Dt)
        do DTU-SUBTRACT-DAYS($Temp1_Dt,1,$Temp_Dt2)
        do CONVERT-FROM-DTU-DATE($Temp_Dt2,$Date1)
        let $Date2 = $FT_Rpt_Start_Dt
        do GET-DATE-DIFF($Date1,$Date2,#UnPaid_Months)

        let #Total_Unpaid_MM = #Total_UnPaid_MM + #UnPaid_Months

        !--------------------
        ! Calculate paid time
        !--------------------

        let $Date1 = $J_JobEnd_Dt
        let $Date2 = $J_JobEffdt
        do GET-DATE-DIFF($Date1,$Date2,#Paid_Months)

     else

        let $Date1 = $J_JobEnd_Dt
        let $Date2 = $FT_Rpt_Start_Dt
        do GET-DATE-DIFF($Date1,$Date2,#Paid_Months)

     end-if

  else

     !--------------------
     ! Calculate paid time
     !--------------------

     let $Date1 = $J_JobEnd_Dt
     let $Date2 = $J_JobEffdt
     do GET-DATE-DIFF($Date1,$Date2,#Paid_Months)

  end-if

  if #J_Array = #J_Oct_1

     do FORMAT-DATETIME($J_End_Oct_1,$Date1,{DEFCMP},'','')
     do FORMAT-DATETIME($J_Start_Oct_1,$Date2,{DEFCMP},'','')

     if $Date1 <> $Date2

        let $Date1 = $J_End_Oct_1
        let $Date2 = $J_Start_Oct_1
        do GET-DATE-DIFF($Date1,$Date2,#Months_Oct_1)

     end-if

  end-if

  if instr($SrchStr,$J_EmplStat,1) > 0

     let #UnPaid_Months = #UnPaid_Months + #Paid_Months
     let #Paid_Months = 0

  end-if

end-procedure GET-MONTHS-TO-BE-PAID-OR-UNPAID


!***********************************************************************
! GET-DATE-DIFF
! Calculates the difference between two dates and returns the results in
! number of months.
!***********************************************************************
begin-procedure GET-DATE-DIFF($Date1,$Date2,:#Months)

  do Diff-DateElapsed($Date1,$Date2,#Year,#Months,#Days)

  if #Year > 0

     let #Months = 12
     let #Days = 0

  else

     do CONVERT-TO-DTU-DATE($Date2,$InDtu_Dt)
     do Dtu-Month-End($InDtu_Dt,$OutDtu_Dt)
     do DTU-PARSE-DATE($OutDtu_Dt,#Year2,#Months2,#Days2)

     let #Days = #Days + 1

     if #Days > 0

        let #Additional_Months = #Days / #Days2

     else

        let #Additional_Months = 0

     end-if

     let #Months = #Months + #Additional_Months

  end-if

end-procedure GET-DATE-DIFF


!***********************************************************************
! DETERMINE-HR-ACTION
! Gets the HR/Action category.
!***********************************************************************
begin-procedure DETERMINE-HR-ACTION

  let $Action_Cat = ''
  let $In_Clause = '(''' || $Runctl_Sabbatical || ''',''' || $Runctl_Workload || ''',''' || $Runctl_OtherLeave ||
                    ''',''' || $Runctl_Unpaid || ''')'

  let $err-statement1 = 'HPH901CN, Select Error - DETERMINE-HR-ACTION'
  let $err-statement2 = 'Bind Variables: '
  concat ', $J_ACTION: ' with $err-statement2
  concat $J_Action with $err-statement2
  concat ', $J_REASON: ' with $err-statement2
  concat $J_Reason with $err-statement2
  concat ', $FT_RPT_END_DT: ' with $err-statement2
  concat $FT_Rpt_End_Dt with $err-statement2
  concat ', $RUNCTL_SABBATICAL: ' with $err-statement2
  concat $Runctl_Sabbatical with $err-statement2
  concat ', $RUNCTL_WORKLOAD: ' with $err-statement2
  concat $Runctl_Workload with $err-statement2
  concat ', $RUNCTL_OTHERLEAVE: ' with $err-statement2
  concat $Runctl_OtherLeave with $err-statement2
  concat ', $RUNCTL_UNPAID: ' with $err-statement2
  concat $Runctl_Unpaid with $err-statement2

begin-SELECT on-error=Error-Display
HA.CATEGORY

   let $Action_Cat = &HA.CATEGORY

 FROM PS_EG_HR_ACTION HA
WHERE HA.CATEGORY IN [$In_Clause]
  AND HA.EFFDT =
      (SELECT MAX(HA1.EFFDT)
         FROM PS_EG_HR_ACTION HA1
        WHERE HA1.CATEGORY = HA.CATEGORY
          AND HA1.EFFDT <= $FT_Rpt_End_Dt)
  AND HA.ACTION = $J_Action
  AND ((HA.ACTION_REASON = $J_Reason
        AND HA.ALL_REASONS = 'N')
         OR HA.ALL_REASONS = 'Y')
end-SELECT

end-procedure DETERMINE-HR-ACTION


!***********************************************************************
! GET-EARNS-DISTRBTN
!***********************************************************************
begin-procedure GET-EARNS-DISTRBTN

  if $J_NewEffdt > ''
     let $Temp_JobEffdt = $J_NewEffdt
  else
     let $Temp_JobEffdt = $J_JobEffdt
  end-if

  let #EarnsDist_Fnd = 0
  let #Dist_Paid_Amt = 0

  let $err-statement1 = 'HPH901CN, Select Error - GET-EARNS-DISTRBTN'
  let $err-statement2 = 'Bind Variables: '
  concat ', $J_PREV_EMPLID: ' with $err-statement2
  concat $J_Prev_Emplid with $err-statement2
  concat ', #J_PREV_EMPLRCD: ' with $err-statement2
  concat #J_Prev_EmplRcd with $err-statement2 '0'
  concat ', $TEMP_JOBEFFDT: ' with $err-statement2
  concat $Temp_JobEffdt with $err-statement2

begin-SELECT on-error=Error-Display
JED.ERNCD
JED.COMPRATE
JED.DIST_PCT
JED.STD_HOURS
JED.ACCT_CD

   let #EarnsDist_Fnd = 1
   let $JED_Erncd     = &JED.ERNCD

   do GET-EARNINGS-TABLE-DATA

   evaluate $J_EarnsDist
      when = 'A'
         let #New_CompRate = ROUND((&JED.COMPRATE * #MultFactor),3)
         Break
      when = 'H'
         let #New_CompRate = ROUND((&JED.STD_HOURS/#J_StdHrs) * #J_CompRate,3)
         Break
      when = 'P'
         let #New_CompRate = ROUND((&JED.DIST_PCT * #J_CompRate)/100,3)
         Break
   end-evaluate

   do CALCULATE-NEW-MONTHLY-RATE

   let #Paid_Amt = ROUND(#New_MnthlyRt * #Paid_Months,3)
   let #UnPaid_Amt = ROUND(#New_MnthlyRt * #UnPaid_Months,3)
   let #Amt_Oct_1 = ROUND(#New_MnthlyRt * #Months_Oct_1, 3)

   if rtrim($AddGross,' ') = 'N' and rtrim($Stip_Flag,' ') = 'N'

      if #J_Oct_1 = 999 or #J_Array <= #J_Oct_1

         let #Total_Annual = #Total_Annual + #Paid_Amt + #UnPaid_Amt + #Amt_Oct_1

      end-if

      let #Dist_Paid_Amt = #Dist_Paid_Amt + #Paid_Amt

   end-if

   if rtrim($AddGross,' ') = 'Y' and rtrim($Stip_Flag,' ') = 'N'

      if #J_Oct_1 = 999 or #J_Array <= #J_Oct_1

         let #Total_Annual = #Total_Annual + #Paid_Amt + #UnPaid_Amt + #Amt_Oct_1
         let #Total_Actual = #Total_Actual + #Paid_Amt

      else

         let #Amt_Oct_1 = ROUND(#MnthlyRt_Oct_1 * #Paid_Months, 3)
         let #Total_Actual = #Total_Actual + #Amt_Oct_1

      end-if

      let #Dist_Paid_Amt = #Dist_Paid_Amt + #Paid_Amt

      if #NonOp

         let #Total_NonOp_Funds = #Total_NonOp_Funds + #Paid_Amt

      end-if

   end-if

   if rtrim($AddGross,' ') = 'Y' and rtrim($Stip_Flag,' ') = 'Y'

      let #Total_Stipends = #Total_Stipends + #Paid_Amt

      if #NonOp

         let #Total_NonOp_Stip = #Total_NonOp_Stip + #Paid_Amt

      end-if

   end-if

 FROM PS_JOB_EARNS_DIST JED
WHERE JED.EMPLID = $J_Prev_Emplid
  AND JED.EMPL_RCD = #J_EmplRcd
  AND JED.EFFDT = $Temp_JobEffdt
end-SELECT

end-procedure GET-EARNS-DISTRBTN


!***********************************************************************
! GET-EARNINGS-TABLE-DATA
!***********************************************************************
begin-procedure GET-EARNINGS-TABLE-DATA

  let $AddGross = ''
  let #MultFactor = 0
  let $Stip_Flag = ''
  let #NonOp = 0

 let $err-statement1 = 'HPH901CN, Select Error GET-EARNINGS-TABLE-DATA'
 let $err-statement2 = 'Bind Variables: '
 concat '$JED_ERNCD: ' with $err-statement2
 concat $JED_Erncd with $err-statement2
 concat ', $FT_RPT_END_DT: ' with $err-statement2
 concat $FT_Rpt_End_Dt with $err-statement2


begin-SELECT on-error=Error-Display
ETD.ADD_GROSS
ETD.FACTOR_MULT
ETD.HP_ADMINSTIP_FLAG

   let $AddGross   = &ETD.ADD_GROSS
   let #MultFactor = &ETD.FACTOR_MULT
   let $Stip_Flag  = &ETD.HP_ADMINSTIP_FLAG

   if rtrim($Company_Province,' ') = 'ON'

      do GET-NONOP-FUND-ACCT

   end-if

 FROM PS_EARNINGS_TBL ETD
WHERE ETD.ERNCD = $JED_Erncd
  AND ETD.EFFDT =
      (SELECT MAX(ETD1.EFFDT)
         FROM PS_EARNINGS_TBL ETD1
        WHERE ETD1.ERNCD = ETD.ERNCD
          AND ETD1.EFFDT <= $FT_Rpt_End_Dt)
end-SELECT

end-procedure GET-EARNINGS-TABLE-DATA


!***********************************************************************
! GET-NONOP-FUND-ACCT
!***********************************************************************
begin-procedure GET-NONOP-FUND-ACCT

  let $err-statement1 = 'HPH901CN, Select Error - GET-NONOP-FUND-ACCT'
  let $err-statement2 = 'Bind Variable: &JED.ACCT_CD: '
  concat &JED.ACCT_CD with $err-statement2

begin-SELECT on-error=Error-Display
NF.ACCT_CD

   let #NonOp = 1

 FROM PS_HP_NON_OP_FUNDS NF
WHERE NF.ACCT_CD = &JED.ACCT_CD
  AND NF.STATUS = 'A'
end-SELECT

end-procedure GET-NONOP-FUND-ACCT


!***********************************************************************
! CALCULATE-NEW-MONTHLY-RATE
! Calculates a new monthly rate using the rates derived from the job
! earnings distribution record.
!***********************************************************************
begin-procedure CALCULATE-NEW-MONTHLY-RATE

  let $J_CompFreq = rtrim($J_CompFreq,' ')

  evaluate $J_CompFreq
     when = 'H'
        move $J_StdHrs_Freq to $StdHrs_Freq
        do GET-FREQ-ANNL-FACTOR
        let #New_AnnualRt = ROUND(#New_CompRate * #J_StdHrs * #Freq_Annl_Factor,3)
        Break
     when = 'D'
        let #New_AnnualRt = ROUND(#New_CompRate * 365,3)
        Break
     when = 'W'
        let #New_AnnualRt = ROUND(#New_CompRate * 52,3)
        Break
     when = 'B'
        let #New_AnnualRt = ROUND(#New_CompRate * 26,3)
        Break
     when = 'S'
        let #New_AnnualRt = ROUND(#New_CompRate * 24,3)
        Break
     when = 'M'
        let #New_AnnualRt = ROUND(#New_CompRate * 12,3)
        Break
     when = 'Q'
        let #New_AnnualRt = ROUND(#New_CompRate * 4,3)
        Break
     when = 'A'
        let #New_AnnualRt = #New_CompRate
        Break
     when-other
        let #New_AnnualRt = 0
  end-evaluate

  let #New_MnthlyRt = ROUND(#New_AnnualRt/12,3)

end-procedure CALCULATE-NEW-MONTHLY-RATE


!***********************************************************************
! GET-FREQ-ANNL-FACTOR
! Determine the annual factor for the standard hours frequency type
!***********************************************************************
begin-procedure GET-FREQ-ANNL-FACTOR

  let #Freq_Annl_Factor = 0

  let $err-statement1 = 'HPH901CN, Select Error - GET-FREQ-ANNL-FACTOR'
  let $err-statement2 = 'Bind Variable: $StdHrs_Freq: '
  concat $StdHrs_Freq with $err-statement2

begin-SELECT on-error=Error-Display
FR.FREQ_ANNUAL_FACTOR

   let #Freq_Annl_Factor = &FR.FREQ_ANNUAL_FACTOR

 FROM PS_FREQUENCY_TBL FR
WHERE FR.FREQUENCY_ID = $StdHrs_Freq
  AND FR.EFFDT = (SELECT max(FR1.EFFDT) FROM PS_FREQUENCY_TBL FR1
                   WHERE FR1.FREQUENCY_ID = FR.FREQUENCY_ID
                     AND FR1.EFFDT <= $Ft_Oct_1_Dt)
end-SELECT

end-procedure GET-FREQ-ANNL-FACTOR



!**********************************************************************
! CALCULATE-BASE-SALARY-PAID
! Calculates actual & annual salary with the rates from job row.
!**********************************************************************
begin-procedure CALCULATE-BASE-SALARY-PAID

  if $Action_Cat <> $Runctl_Sabbatical and
     $Action_Cat <> $Runctl_Workload and
     $Action_Cat <> $Runctl_Unpaid

     if #J_Oct_1 = 999 or #J_Array <= #J_Oct_1

        let #Total_Actual = #Total_Actual + (#J_MnthlyRt * #Paid_Months)

     else

        let #Total_Actual = #Total_Actual + (#MnthlyRt_Oct_1 * #Paid_Months)

     end-if

  end-if

  if #J_Oct_1 = 999 or #J_Array <= #J_Oct_1

     let #Total_Annual = #Total_Annual + (#J_MnthlyRt * #Paid_Months) +
                        (#J_MnthlyRt * #UnPaid_Months) +
                        (#J_MnthlyRt * #Months_Oct_1)

  end-if

end-procedure CALCULATE-BASE-SALARY-PAID


!***********************************************************************
! CALCULATE-CONTRACT
! Calculates the salary for a contracted employee
!***********************************************************************
begin-procedure CALCULATE-CONTRACT

  do FORMAT-DATETIME($J_Cont_Beg_Dt,$CMP_J_Cont_Beg_Dt,{DEFCMP},'','')
  do FORMAT-DATETIME($T_Cont_End_Dt,$CMP_T_Cont_End_Dt,{DEFCMP},'','')

  if $CMP_FT_Rpt_Start_Dt < $CMP_J_Cont_Beg_Dt

     let $C_Pay_Beg_Dt = $J_Cont_Beg_Dt

  else

     let $C_Pay_Beg_Dt = $FT_Rpt_Start_Dt

  end-if

  if $CMP_FT_Rpt_End_Dt < $CMP_T_Cont_End_Dt

     let $C_Pay_End_Dt = $FT_Rpt_End_Dt

  else

     let $C_Pay_End_Dt = $T_Cont_End_Dt

  end-if

  do GET-DATE-DIFF($T_Cont_End_Dt,$J_Cont_Beg_Dt,#Cont_Months)
  do GET-DATE-DIFF($C_Pay_End_Dt,$C_Pay_Beg_Dt,#Actual_Months)

  let #Cont_Paid = #Actual_Months / #Cont_Months * #J_CompRate
  let #Total_Cont_Paid = #Total_Cont_Paid + #Cont_Paid

end-procedure CALCULATE-CONTRACT


!***********************************************************************
! PROCESS-CJA
! Gets the jobs rows that are collapsable into the FT reportable job.
!***********************************************************************
begin-procedure PROCESS-CJA

  let $err-statement1 = 'HPH901CN, Select Error - PROCESS-CJA'
  let $err-statement2 = 'Bind Variables: '
  concat '$J_PREV_EMPLID: ' with $err-statement2
  concat $J_Prev_Emplid with $err-statement2
  concat ', #J_PREV_EMPLRCD: ' with $err-statement2
  concat #J_Prev_EmplRcd with $err-statement2 '0'
  concat ', $FT_OCT_1_DT: ' with $err-statement2
  concat $FT_Oct_1_Dt  with $err-statement2

begin-SELECT on-error=Error-Display
EMPLT.EMPLID
EMPLT.EMPL_RCD
EMPLT.HP_STATS_RPT_FLAG
EMPLT.HP_STATS_SUBJ_CD
EMPLT.HP_STATS_DUTIES
EMPLT.HP_COLLAPSE_INDC

   let #J_Select = 1
   let #J_TermRow = 0
   let #J_Array = 0
   let #C_Array = 0
   let #J_Oct_1 = 999
   let #C_Oct_1 = 999
   let #C_Loaded = 0
   let #Cont_Found = 0
   clear-array name=RJA
   clear-array name=CA
   let #Cont_Selected = 0
   let #RegJob_Selected = 0

   let $Save_EmplRcd = edit(&EMPLT.EMPL_RCD,'999')

   let $Emplt_Rpt_Flag = &EMPLT.HP_STATS_RPT_FLAG

   do GET-COLLAPSABLE-JOBS

   if #J_Array > 0 and #J_Select

      if #J_Array = 1 and #J_Prev_TermRow

         let $Msg1 = 'Job has a termination status. Job skipped.'
         let $Msg2 = 'Job effective Date: ' || $J_Prev_JobEffdt || ' Job code: ' || $J_Prev_JobCode
         let $Msg3 = 'Employee status: ' || $J_EmplStat || ', Action code: ' || $J_Action ||
                     ', Reason code: ' || $J_Reason
         do PRINT-ERROR

      else

         let $J_Emplid  = &EMPLT.EMPLID
         let #J_EmplRcd = &EMPLT.EMPL_RCD

         do PROCESS-RJA

         if #J_Select

            let #C_Total_Actual = #C_Total_Actual + #Total_Actual
            let #C_Total_Annual = #C_Total_Annual + #Total_Annual

            if #RegJob_Selected

               let #C_Total_Stipends = #C_Total_Stipends + #Total_Stipends
               let #C_Total_NonOp_Funds = #C_Total_NonOp_Funds + #Total_NonOp_Funds
               let #C_Total_NonOp_Stip = #C_Total_NonOp_Stip + #Total_NonOp_Stip

            end-if

         end-if

      end-if

   end-if

 FROM PS_HP_EMPLT_TEACH EMPLT
WHERE EMPLT.EMPLID = $J_Prev_Emplid
  AND EMPLT.EMPL_RCD <> #J_Prev_EmplRcd
  AND EMPLT.DATA_KEY1_DT =
      (SELECT MAX(EMPLT1.DATA_KEY1_DT)
         FROM PS_HP_EMPLT_TEACH EMPLT1
        WHERE EMPLT1.EMPLID = EMPLT.EMPLID
          AND EMPLT1.EMPL_RCD = EMPLT.EMPL_RCD
          AND EMPLT1.DATA_KEY1_DT <= $FT_Oct_1_Dt)
  AND EMPLT.HP_COLLAPSE_INDC = 'Y'
ORDER BY EMPLT.EMPL_RCD DESC
end-SELECT

end-procedure PROCESS-CJA


!***********************************************************************
! GET-COLLAPSABLE-JOBS
! Get the collapsable job from the Employement Teaching table
! and Job Data table and then validates the job.
!***********************************************************************
begin-procedure GET-COLLAPSABLE-JOBS

  let #J_Prev_TermRow = 0

  let $err-statement1 = 'HPH901CN, Select Error - GET-COLLAPSABLE-JOBS'
  let $err-statement2 = 'Bind Variables: '

  concat '&EMPLT.EMPLID: ' with $err-statement2
  concat &EMPLT.EMPLID with $err-statement2
  concat ', &EMPLT.EMPL_RCD: ' with $err-statement2
  concat &EMPLT.EMPL_RCD with $err-statement2 '0'
  concat ', $FT_RPT_START_DT: ' with $err-statement2
  concat $FT_Rpt_Start_Dt with $err-statement2
  concat ', $FT_RPT_END_DT: ' with $err-statement2
  concat $FT_Rpt_End_Dt with $err-statement2

begin-SELECT on-error=Error-Display
COLLAPSED.EMPLID
COLLAPSED.EMPL_RCD
COLLAPSED.EFFDT
COLLAPSED.JOBCODE
COLLAPSED.EMPL_STATUS
COLLAPSED.ACTION
COLLAPSED.ACTION_REASON
COLLAPSED.BUSINESS_UNIT
COLLAPSED.STD_HOURS
COLLAPSED.EARNS_DIST_TYPE
COLLAPSED.COMP_FREQUENCY
COLLAPSED.COMPRATE
COLLAPSED.ANNUAL_RT
COLLAPSED.MONTHLY_RT
COLLAPSED.HOURLY_RT
COLLAPSED.PRORATE_CNT_AMT

  let $J_Emplid    = &COLLAPSED.EMPLID
  let #J_EmplRcd   = &COLLAPSED.EMPL_RCD
  let $J_JobEffdt  = &COLLAPSED.EFFDT
  let $J_JobCode   = &COLLAPSED.JOBCODE
  let $J_BusUnit   = &COLLAPSED.BUSINESS_UNIT
  let $J_EmplStat  = &COLLAPSED.EMPL_STATUS
  let $J_Action    = &COLLAPSED.ACTION
  let $J_Reason    = &COLLAPSED.ACTION_REASON
  let $J_EarnsDist = &COLLAPSED.EARNS_DIST_TYPE
  let $J_Prorate   = &COLLAPSED.PRORATE_CNT_AMT
  let #J_StdHrs    = &COLLAPSED.STD_HOURS
  let $J_CompFreq  = &COLLAPSED.COMP_FREQUENCY
  let #J_CompRate  = &COLLAPSED.COMPRATE
  let #J_HrlyRt    = &COLLAPSED.HOURLY_RT
  let #J_MnthlyRt  = &COLLAPSED.MONTHLY_RT
  let #J_AnnualRt  = &COLLAPSED.ANNUAL_RT

  do VERIFY-JOBCODE                        ! Is jobcode reportable ?

  if rtrim($Emplt_Rpt_Flag,' ') = 'P' or rtrim($Emplt_Rpt_Flag,' ') = 'N'

     let #J_Select = 0

     if #JobCode_Rpt_Flag

        let $Msg1 = 'Jobcode StatCan report flag was overwritten as part-time or not applicable'
        let $Msg2 = 'in the Employment Teaching table. Job row skipped.'
        let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
        do PRINT-ERROR

     else

        let $Msg1 = 'Jobcode StatCan report flag in jobcode table and Employment Teaching Table'
        let $Msg2 = 'is set to part-time or not applicable. Job row skipped.'
        let $Msg3 = 'Job effective date: ' || $J_JobEffdt || ', Job code: ' || $J_JobCode
        do PRINT-ERROR

     end-if

  else

     if instr($SrchStr,$J_EmplStat,1) > 0

        let #J_TermRow = 1

        if #J_Array > 0

           let $Msg1 = 'Break in employment was detected.'
           let $Msg2 = 'Job effective date: ' || $J_JobEffdt || ', Job Code: ' || $J_JobCode
           do PRINT-ERROR

        end-if

     else

        let #J_TermRow = 0

     end-if

     do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')
     do POPULATE-ARRAY-TABLE

  end-if

  let #J_Prev_TermRow = #J_TermRow

 FROM PS_JOB COLLAPSED
WHERE COLLAPSED.EMPLID = &EMPLT.EMPLID
  AND COLLAPSED.EMPL_RCD = &EMPLT.EMPL_RCD
  AND (COLLAPSED.EFFDT =
       (SELECT MAX(COLLAPSED1.EFFDT)
          FROM PS_JOB COLLAPSED1
         WHERE COLLAPSED1.EMPLID = COLLAPSED.EMPLID
           AND COLLAPSED1.EMPL_RCD = COLLAPSED.EMPL_RCD
           AND COLLAPSED1.EFFDT <= $FT_Rpt_Start_Dt) OR
      (COLLAPSED.EFFDT >= $FT_Rpt_Start_Dt AND COLLAPSED.EFFDT <= $FT_Rpt_End_Dt))
  AND COLLAPSED.EFFSEQ =
      (SELECT MAX(COLLAPSED2.EFFSEQ)
         FROM PS_JOB COLLAPSED2
        WHERE COLLAPSED2.EMPLID = COLLAPSED.EMPLID
          AND COLLAPSED2.EMPL_RCD = COLLAPSED.EMPL_RCD
          AND COLLAPSED2.EFFDT = COLLAPSED.EFFDT)
ORDER BY COLLAPSED.EFFDT ASC
end-SELECT

end-procedure GET-COLLAPSABLE-JOBS


!***********************************************************************
! SUMMARIZE-MONTHS
! Adds up all the numbers of months the employee was working.
!***********************************************************************
begin-procedure SUMMARIZE-MONTHS

  clear-array name=MONTHS

  put #Total_Active_MM into MONTHS(0) M_Months
  put #Total_Unpaid_MM into MONTHS(1) M_Months
  put #Total_OthrLv_MM into MONTHS(2) M_Months
  put #Total_Sabbat_MM into MONTHS(3) M_Months

  let #x = 0
  let #Total_Months = 0
  let #Max = 0

  while #x <= 3

     if #Max

        put 0 into MONTHS(#x) M_Months

     else

        get #MonVal from MONTHS(#x) M_Months
        let #MonVal = ROUND(#MonVal,0)

        let #Total_Months = #Total_Months + #MonVal

        if #Total_Months > 12

           let #NewVal = #MonVal - (#Total_Months - 12)
           put #NewVal into MONTHS(#x) M_Months
           let #Max = 1

        else

           put #MonVal into MONTHS(#x) M_Months

        end-if

     end-if

     let #x = #x + 1

  end-while

  get #Total_Active_MM from MONTHS(0) M_Months
  get #Total_Unpaid_MM from MONTHS(1) M_Months
  get #Total_OthrLv_MM from MONTHS(2) M_Months
  get #Total_Sabbat_MM from MONTHS(3) M_Months

end-procedure SUMMARIZE-MONTHS


!***********************************************************************
! CREATE-SURVEY-RECORD
! Sets up or initialiazes all the survey record data elements.
!***********************************************************************
begin-procedure CREATE-SURVEY-RECORD

  !------------------------------
  ! Get Reporting Insitution Code
  !------------------------------

  let #J_Instn = &CT.HP_STATS_INSTN_CD

  if #J_Instn = 0
     let $Msg1 = 'The Stats Reporting Institution code is zero for company ' || $J_Company
     let $Msg2 = '- set up a valid code on the Company Table.'
     let $Msg3 = ' '
     do PRINT-ERROR
  end-if

  !---------------------------------
  ! Get StatsCan Dept & Faculty Code
  !---------------------------------

  let $DeptId = $J_DeptId
  let $SetId = $J_Setid_Dept

  do GET-DEPARTMENT-NAME-WITH-SETID

  let $J_StatsDept = &X1.HP_STATS_DEPT_CD
  let $J_FacultyCd = &X1.HP_STATS_FACULTY

  let $J_StatsDept = nvl($J_StatsDept,' ')

  do GET-MEDICAL-DENTAL-CATEGORY

  !-------------------------------------
  ! Get and evaluate year of appointment
  !-------------------------------------

  do FIND-PRIOR-YEAR-SURVEY-RECORD

  if #Prior_Survey

     let #J_ApptYr_To_Instn = &FS.HP_YEAR_OF_APPTMNT

  else

     let #J_ApptYr_To_Instn = #CurrRpt_Yr

  end-if

  !----------------------------------------------
  ! Get and evaluate previous employment location
  !----------------------------------------------

  let $J_Prev_EmpltLoc = '99999'

  let $Country = $J_Country
  let $Province = $J_Province

  do GET-PROVINCE-COUNTRY-LOC

  let $J_Prev_EmpltLoc = $Prov_Country_Loc

  !-----------------------------------------------
  ! Get Citizenship Status and Citizenship Country
  !-----------------------------------------------

  do GET-CITIZENSHIP-COUNTRY

  !-------------------------------------------
  ! Get StatsCan Location based on Citizenship
  !-------------------------------------------

  if (rtrim($J_Country,' ') = 'CAN' and rtrim($J_Ctzen,' ') = '7') or
     rtrim($J_Ctzen,' ') = '5' or rtrim($J_Ctzen,' ') = '6'

     let $Country = $J_Country
     do GET-COUNTRY-LOCATION
     let $J_Loc = $Prov_Country_Loc

  else

     let $J_Loc = '99999'

  end-if

  !---------------------------------------------------
  ! Get and evaluate first and highest degree year and
  ! highest degree accomplishment level
  !---------------------------------------------------

  do GET-FIRST-HIGHEST-DEGREE

  do GET-EMPLOYMENT-DATA2

  do GET-ACADEMIC-RANK

  do GET-RESPONSIBILITY

  !------------------------
  ! Get type of appointment
  !------------------------

  do GET-TENURE-DATA

  move $Save_Mbr_CompFreq to $J_CompFreq

  move '5' to $J_Appt_Type

  evaluate $J_Visiting

     when = 'N'

        if rtrim($Tenure_Status,' ') = 'TEN'

           let $J_Appt_Type = '1'

        else

           if rtrim($Tenure_Status,' ') = 'NTK'

              let $J_Appt_Type = '2'

           else

              if &POAH.APPOINT_END_DT > '' or rtrim($J_CompFreq,' ') = 'C'

                 let $J_Appt_Type = '3'

              end-if

           end-if

        end-if

        Break

     when = 'Y'

        let $J_Appt_Type = '4'
        Break

     when-other
        let $J_Appt_Type = '5'

  end-evaluate

  do GET-RANK-EFFECTIVE-DATE

  if #J_ApptYr_To_Rank < #J_ApptYr_To_Instn

     let #J_ApptYr_To_Rank = #J_ApptYr_To_Instn

  end-if

  let #Total_Workload = round(#Total_Workload * 100,0)
  if #Total_Workload < 10 or #Total_Workload > 95 or $Reduced_Wrkld = 'N'
     let #Total_Workload = 0
  end-if

  move '00' to $J_Ont_Salary
  let #J_Ont_Salary = 0
  let #J_Ont_Final_Salary = 0

  if rtrim($Company_Province,' ') = 'ON'

     if #Grand_T_NonOp_Funds > 0

        if #Grand_T_NonOp_Funds = #Grand_T_Actual
           let $J_Ont_Salary = '99'
        else
           let #J_Ont_Salary = ROUND(((#Grand_T_Actual - #Grand_T_NonOp_Funds)/#Grand_T_Actual) * 100 ,0)
           let $J_Ont_Salary = edit(#J_Ont_Salary,'00')
        end-if

     end-if

     let #J_Ont_Final_Salary = #Grand_T_Annual + #Grand_T_Stipends

  end-if

end-procedure CREATE-SURVEY-RECORD


!***********************************************************************
! GET-MEDICAL-DENTAL-CATEGORY
!***********************************************************************
begin-procedure GET-MEDICAL-DENTAL-CATEGORY

  let $J_MedDental = ' '

  let $err-statement1 = 'HPH901CN, Select Error - GET-MEDICAL-DENTAL-CATEGORY'
  let $err-statement2 = 'Bind Variable: $J_FACULTYCD: '
  concat $J_FacultyCd  with $err-statement2

begin-SELECT
FT.HP_MED_DENT_CAT

   let $J_MedDental = &FT.HP_MED_DENT_CAT

 FROM PS_HP_STATS_FACLTY FT
WHERE FT.HP_STATS_FACULTY = $J_FacultyCd
end-SELECT

end-procedure GET-MEDICAL-DENTAL-CATEGORY


!***********************************************************************
! FIND-PRIOR-YEAR-SURVEY-RECORD
! Determines if a prior year survey exists for the employee being
! processed.
!***********************************************************************
begin-procedure FIND-PRIOR-YEAR-SURVEY-RECORD

  let #Prior_Survey = 0

  let $err-statement1 = 'HPH901CN, Select Error - FIND-PRIOR-YEAR-SURVEY-RECORD'
  let $err-statement2 = 'Bind Variables: '
  concat '$J_PREV_EMPLID: ' with $err-statement2
  concat $J_Prev_Emplid with $err-statement2
  concat ', #CURRRPT_YR: ' with $err-statement2
  concat #CurrRpt_Yr with $err-statement2 '0000'

begin-SELECT on-error=Error-Display
FS.HP_YEAR_OF_APPTMNT
FS.HP_STATS_CAN_YR

   let #Prior_Survey_Yr = &FS.HP_STATS_CAN_YR

   if #Prior_Survey_Yr = #CurrRpt_Yr - 1
     let #Prior_Survey = 1
   end-if

FROM PS_HP_FT_SURVEY FS
WHERE FS.EMPLID = $J_Prev_Emplid
  AND FS.HP_STATS_CAN_YR =
     (SELECT MAX(FS1.HP_STATS_CAN_YR)
        FROM PS_HP_FT_SURVEY FS1
       WHERE FS1.EMPLID = FS.EMPLID
         AND FS1.HP_STATS_CAN_YR < #CurrRpt_Yr)
end-SELECT

end-procedure FIND-PRIOR-YEAR-SURVEY-RECORD


!***********************************************************************
! GET-FIRST-HIGHEST-DEGREE
!***********************************************************************
begin-procedure GET-FIRST-HIGHEST-DEGREE

  let #First = 1
  let #J_1STDeg_Yr = 9998
  let #J_HighDeg_Yr = 9998
  let $J_HighDeg_Accomp = '999'

  !-------------------------------------------------------------
  ! Get first and highest degree year and highest accomplishment
  !-------------------------------------------------------------

  let $err-statement1 = 'HPH901CN, Select Error - GET-FIRST-HIGHEST-DEGREE'
  let $err-statement2 = 'Bind Variable: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2

begin-SELECT on-error=Error-Display
A.ACCOMPLISHMENT
A.DT_ISSUED
A.COUNTRY_OTHER
A.STATE_OTHER
ACCTBL.HP_STATS_DEG_LVL

   let $Dt_Issued = &A.DT_ISSUED
   do FORMAT-DATETIME($Dt_Issued,$CMP_Dt_Issued, {DEFCMP},'','')

   if $CMP_Dt_Issued = ''
      let #J_1STDeg_Yr = 9999
   else
      if #First
         let #J_1STDeg_Yr = to_number(substr($CMP_Dt_Issued,1,4))
      end-if
   end-if

   if #First
      let $1STDeg_Country = &A.Country_Other
      let $1STDeg_Province = &A.State_Other
      let #First = 0
   end-if

   if rtrim(&ACCTBL.HP_STATS_DEG_LVL,' ') = ''
      let $Degree_Lvl = '99'
   else
      let $Degree_Lvl = &ACCTBL.HP_STATS_DEG_LVL
   end-if

   if rtrim($Degree_Lvl,' ') < $J_HighDeg_Accomp
      let $J_HighDeg_Accomp = $Degree_Lvl
      let $HighDeg_Country = &A.Country_Other
      let $HighDeg_Province = &A.State_Other
      if $CMP_Dt_Issued = ''
         let #J_HighDeg_Yr = 9999
      else
         let #J_HighDeg_Yr = to_number(substr($CMP_Dt_Issued,1,4))
      end-if
   end-if

 FROM PS_ACCOMPLISHMENTS A, PS_ACCOMP_TBL ACCTBL
WHERE A.EMPLID = $J_Prev_Emplid
  AND ACCTBL.ACCOMPLISHMENT = A.ACCOMPLISHMENT
  AND ACCTBL.ACCOMP_CATEGORY = 'DEG'
ORDER BY A.DT_ISSUED
end-SELECT

  !----------------------------------------
  ! Get highest degree accomplishment level
  !----------------------------------------

  if rtrim($J_HighDeg_Accomp,' ') = '999'            ! no degrees

     let $J_HighDeg_Accomp = '08'

  end-if


  if rtrim($J_HighDeg_Accomp,' ') = '08'

     let #J_HighDeg_Yr = 9998

  end-if


  !---------------------------------------
  ! Get province of 1st and highest degree
  !---------------------------------------

  if #J_1STDeg_Yr = 9998

     let $J_1STDeg_Prov = '99899'

  else

     let $Country = $1STDeg_Country
     let $Province = $1STDeg_Province

     do GET-PROVINCE-COUNTRY-LOC

     let $J_1STDeg_Prov = $Prov_Country_Loc

  end-if

  if #J_HighDeg_Yr = 9998

     let $J_HighDeg_Prov = '99899'

  else

     let $Country = $HighDeg_Country
     let $Province = $HighDeg_Province

     do GET-PROVINCE-COUNTRY-LOC

     let $J_HighDeg_Prov = $Prov_Country_Loc

  end-if

end-procedure GET-FIRST-HIGHEST-YEAR



!***********************************************************************
! GET-PROVINCE-COUNTRY-LOC
! Gets the Stats Can Province Code if $Country is Canada, otherwise gets
! the Stats Can Country Code
!***********************************************************************
begin-procedure GET-PROVINCE-COUNTRY-LOC

  if rtrim($Country,' ') = 'CAN' and rtrim($Province,' ') > ''

     do GET-PROVINCE-LOCATION

  else

     do GET-COUNTRY-LOCATION

  end-if

 end-procedure GET-PROVINCE-COUNTRY-LOC


!***********************************************************************
! GET-PROVINCE-LOCATION
! Gets the Stats Location Code from the PS_CAN_TAX_PROV table
!***********************************************************************
begin-procedure GET-PROVINCE-LOCATION

  let $err-statement1 = 'HPH901CN, Select Error - GET-PROVINCE-LOCATION'
  let $err-statement2 = 'Bind Variables: $FT_RPT_END_DT: '
  concat $FT_Rpt_End_Dt with $err-statement2
  concat ', $PROVINCE: ' with $err-statement2
  concat $Province with $err-statement2

  let $Prov_Country_Loc = '99999'

begin-SELECT
TP.HP_STATS_PROV_CD

   let $Prov_Country_Loc = &TP.HP_STATS_PROV_CD

 FROM PS_CAN_TAX_PROV TP
WHERE TP.EFFDT =
      (SELECT MAX(TP1.EFFDT)
         FROM PS_CAN_TAX_PROV TP1
        WHERE TP1.EFFDT <= $FT_Rpt_End_Dt
          AND TP1.PROVINCE = TP.PROVINCE)
  AND TP.PROVINCE = $Province
end-SELECT

end-procedure GET-PROVINCE-LOCATION


!***********************************************************************
! GET-COUNTRY-LOCATION
! Get Stats Location Code from PS_CNTRY_1042_TBL
!***********************************************************************
begin-procedure GET-COUNTRY-LOCATION

  let $err-statement1 = 'HPH901CN, Select Error - GET-COUNTRY-LOCATION'
  let $err-statement2 = 'Bind Variable: $COUNTRY: '
  concat $Country  with $err-statement2


  let $Prov_Country_Loc = '99999'

begin-SELECT on-error=Error-Display
CT.HP_STATS_LOC_CD

   let $Prov_Country_Loc = &CT.HP_STATS_LOC_CD

 FROM PS_CNTRY_1042_TBL CT
WHERE CT.COUNTRY = $Country
end-SELECT

end-procedure GET-COUNTRY-LOCATION


!***********************************************************************
! This is the routine that gets the citizenship country
!***********************************************************************
begin-procedure GET-CITIZENSHIP-COUNTRY

  move '9' to $J_Ctzen
  move '' to $J_Country

  let $err-statement1 = 'HPH901CN, Select Error - GET-CITIZENSHIP-COUNTRY'
  let $err-statement2 = 'Bind Variable: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2


begin-SELECT on-error=Error-Display
C.CITIZENSHIP_STATUS
C.COUNTRY

   let $J_Country = &C.COUNTRY
   let $J_Ctzen = &C.CITIZENSHIP_STATUS

 FROM PS_CITIZENSHIP C
WHERE C.EMPLID = $J_Prev_Emplid
  AND C.DEPENDENT_ID = ' '
end-SELECT

end-procedure GET-CITIZENSHIP-COUNTRY


!***********************************************************************
! GET-EMPLOYMENT-DATA2
!***********************************************************************
begin-procedure GET-EMPLOYMENT-DATA2

  let $J_Immigrant = '9'

  let $err-statement1 = 'HPH901CN, Select Error - GET-EMPLOYMENT-DATA'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2
  concat ', #Save_Mbr_EmplRcd: ' with $err-statement2
  concat #Save_Mbr_EmplRcd with $err-statement2 '0'


begin-SELECT on-error=Error-Display
E2.HIRE_DT
E2.REHIRE_DT

   let $J_HireDt = &E2.HIRE_DT
   let $J_ReHireDt = &E2.REHIRE_DT

   do FORMAT-DATETIME($J_HireDt,$CMP_HireDt,{DEFCMP},'','')
   do FORMAT-DATETIME($J_ReHireDt,$CMP_ReHireDt,{DEFCMP},'','')

   evaluate $J_Ctzen

      when = '7'

         let $J_Immigrant = '5'
         Break

      when = '6'

         let $J_Immigrant = '3'
         Break

      when = 'N'

         let $J_Immigrant = '9'
         Break

      when = '5'

         if (#Prior_Survey)

            let $J_Immigrant = '1'

         else

            if $CMP_HireDt > $CMP_LastYr_Oct_1_Dt or
               $CMP_ReHireDt > $CMP_LastYr_Oct_1_Dt

               if rtrim($J_Resident,' ') = 'Y'

                  let $J_Immigrant = '1'

               else

                  let $J_Immigrant = '2'

               end-if

            else

                let $J_Immigrant = '1'

            end-if
         end-if

         Break

      when-other

         let $J_Immigrant = '9'

   end-evaluate

 FROM PS_EMPLOYMENT E2
WHERE E2.EMPLID = $J_Prev_Emplid
  AND E2.EMPL_RCD = #Save_Mbr_EmplRcd
end-SELECT

end-procedure GET-EMPLOYMENT-DATA2


!***********************************************************************
! GET-ACADEMIC-RANK
!***********************************************************************
begin-procedure GET-ACADEMIC-RANK

  let $J_Rank = '6'

  let $R_Rank = $Save_JobCode_Rank

  let $err-statement1 = 'HPH901CN, Select Error - GET-ACADEMIC-RANK'
  let $err-statement2 = 'Bind Variables: $R_RANK: '
  concat $R_Rank with $err-statement2
  concat ', $ASOFTODAY: ' with $err-statement2
  concat $AsOfToday with $err-statement2

begin-SELECT on-error=Error-Display
RT.HP_STATS_RANK_CD

   let $J_Rank = &RT.HP_STATS_RANK_CD

 FROM PS_EG_RANK_TBL RT
WHERE RT.EG_ACADEMIC_RANK = $R_Rank
  AND RT.EFFDT =
      (SELECT MAX(RT1.EFFDT)
         FROM PS_EG_RANK_TBL RT1
        WHERE RT1.EG_ACADEMIC_RANK = RT.EG_ACADEMIC_RANK
          AND RT1.EFFDT <= $AsOfToday)
end-SELECT

end-procedure GET-ACADEMIC-RANK


!***********************************************************************
! GET-RESPONSIBILITY
!***********************************************************************
begin-procedure GET-RESPONSIBILITY

  let $J_Resp = ' '

  let $err-statement1 = 'HPH901CN, Select Error - GET-RESPONSIBILITY'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2
  concat ', $FT_RPT_START_DT: ' with $err-statement2
  concat $Ft_Rpt_Start_Dt with $err-statement2
  concat ', $FT_RPT_END_DT: ' with $err-statement2
  concat $FT_Rpt_End_Dt with $err-statement2

begin-SELECT on-error=Error-Display
AP2.HP_STATS_RESP_CD

   let $J_Resp = &AP2.HP_STATS_RESP_CD

FROM PS_EG_ADMIN_POSTS AP, PS_EG_ADM_POST_TBL AP2
WHERE AP.EMPLID = $J_Prev_Emplid
  AND ((AP.END_DATE > $FT_Rpt_Start_Dt) OR
       (AP.END_DATE IS NULL) OR
       (AP.REVISION_DT > $FT_Rpt_Start_Dt))
  AND AP2.ADMIN_POST = AP.ADMIN_POST
  AND AP2.HP_STATS_RESP_CD > ' '
ORDER BY AP2.HP_STATS_RESP_CD DESC
end-SELECT

  if rtrim($J_Resp,' ') = ''

     if rtrim($J_Duties,' ') = ''
        let $J_Duties = $Save_JobCd_Duties
     end-if

     evaluate $J_Duties

        when = '10'

           if rtrim($J_Visiting,' ') = 'Y'

              let $J_Resp = '6'

           else

              let $J_Resp = '0'

           end-if

           Break

        when = '30'

           if rtrim($J_Visting,' ') = 'Y'

              let $J_Resp = '8'

           else

              let $J_Resp = '7'

           end-if

           Break

        when-other

           let $J_Resp = '9'
           Break

     end-evaluate
  end-if

end-procedure GET-RESPONSIBILITY


!***********************************************************************
! GET-RANK-EFFECTIVE-DATE
!***********************************************************************
begin-procedure GET-RANK-EFFECTIVE-DATE

  let #J_ApptYr_To_Rank = 9999
  let $Job_Entry_Dt = ''
  let $JobCode_Effdt = ''
  let $SetId = $Save_Setid_JC
  move 0 to #Rank_Change

  let $err-statement1 = 'HPH901CN, Select Error - GET-RANK-EFFECTIVE-DATE'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '

  concat $J_Prev_Emplid with $err-statement2
  concat ', #Save_Mbr_EmplRcd: ' with $err-statement2
  concat #Save_Mbr_EmplRcd with $err-statement2 '000'
  concat ', $SETID: ' with $err-statement2
  concat $SetId with $err-statement2
  concat ', $FT_OCT_1_DT: ' with $err-statement2
  concat $Ft_Oct_1_Dt with $err-statement2

begin-SELECT on-error=Error-Display
JCR.EG_ACADEMIC_RANK
JCR.EFFDT
JR.EFFDT
JR.JOB_ENTRY_DT

   if rtrim(&JCR.EG_ACADEMIC_RANK,' ') = rtrim($Save_JobCode_Rank,' ') and #Rank_Change = 0
      move &JCR.EFFDT to $JobCode_EffDt
      if &JR.JOB_ENTRY_DT > ''
         move &JR.JOB_ENTRY_DT to $Job_Entry_Dt
      else
         move &JR.EFFDT to $Job_Entry_Dt
      end-if
   else
      move 1 to #Rank_Change
   end-if

 FROM PS_JOB JR, PS_JOBCODE_TBL JCR
WHERE JR.EMPLID = $J_Prev_Emplid
  AND JR.EMPL_RCD = #Save_Mbr_EmplRcd
  AND JR.EFFDT <= $FT_Oct_1_Dt
  AND JR.JOBCODE = JCR.JOBCODE
  AND JCR.SETID = $SetId
  AND JCR.EFFDT <= $FT_Oct_1_Dt
ORDER BY JR.EFFDT DESC, JCR.EFFDT DESC
end-SELECT

  if $Job_Entry_Dt > ''

     do FORMAT-DATETIME($Job_Entry_Dt,$CMP_Job_Entry_Dt,{DEFCMP},'','')
     do FORMAT-DATETIME($JobCode_EffDt,$CMP_JobCode_EffDt,{DEFCMP},'','')

     if $CMP_JobCode_Effdt > $CMP_Job_Entry_Dt
        let #J_ApptYr_To_Rank = to_number(substr($CMP_JobCode_EffDt,1,4))
     else
        let #J_ApptYr_To_Rank = to_number(substr($CMP_Job_Entry_Dt,1,4))
     end-if

  end-if

end-procedure GET-RANK-EFFECTIVE-DATE


!***********************************************************************
! GET-TENURE-DATA
!***********************************************************************
begin-procedure GET-TENURE-DATA

  let $Tenure_Status = ''

  let $err-statement1 = 'HPH901CN, Select Error - GET-TENURE-DATA'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2
  concat ', $FT_OCT_1_DT: ' with $err-statement2
  concat $Ft_Oct_1_Dt with $err-statement2

begin-SELECT on-error=Error-Display
ETD.TENURE_STATUS

   let $Tenure_Status = &ETD.TENURE_STATUS

 FROM PS_EG_TENURE_DATA ETD
WHERE ETD.EMPLID = $J_Prev_Emplid
  AND ETD.EG_TRACK_HIRE_DT =
      (SELECT MAX(ETD1.EG_TRACK_HIRE_DT)
         FROM PS_EG_TENURE_DATA ETD1
        WHERE ETD1.EMPLID = ETD.EMPLID
          AND ETD1.EG_TRACK_HIRE_DT <= $FT_Oct_1_Dt)
end-SELECT

end-procedure GET-TENURE-DATA


!***********************************************************************
! GET-PARAMETER-VALUES
! Gets the run control parameters.
!***********************************************************************
begin-procedure GET-PARAMETER-VALUES

  do FORMAT-DATETIME($FT_Rpt_Start_Dt,$CMP_FT_Rpt_Start_Dt,{DEFCMP},'','')
  do FORMAT-DATETIME($FT_Rpt_End_Dt,$CMP_FT_Rpt_End_Dt,{DEFCMP},'','')

  do CONVERT-TO-DTU-DATE($FT_Rpt_Start_Dt,$FT_Start_Dtu_Dt)
  do CONVERT-TO-DTU-DATE($FT_Rpt_End_Dt,$FT_End_Dtu_Dt)

  do DTU-ADD-DAYS($FT_End_Dtu_Dt,1,$Temp_Dt)
  do CONVERT-FROM-DTU-DATE($Temp_Dt,$FT_Rpt_End_Dt_Plus_1)

  do DTU-PARSE-DATE($FT_Start_Dtu_Dt,#dtu_yr, #dtu_mo, #dtu_da)
  let #dtu_yr2 = #dtu_yr - 1
  do Dtu-Format-Date(#dtu_yr,10,1,$FT_Oct_1_Dtu_Dt)

  do Dtu-Format-Date(#dtu_yr2,10,1,$LastYr_Oct_1_Dtu_Dt)

  do CONVERT-FROM-DTU-DATE($FT_Oct_1_Dtu_Dt,$FT_Oct_1_Dt)
  do CONVERT-FROM-DTU-DATE($LastYr_Oct_1_Dtu_Dt,$LastYr_Oct_1_Dt)

  do FORMAT-DATETIME($FT_Oct_1_Dt,$CMP_FT_Oct_1_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($LastYr_Oct_1_Dt,$CMP_LastYr_Oct_1_Dt, {DEFCMP},'','')

  do Dtu-Subtract-Days($FT_Start_Dtu_Dt,1,$FT_DayPrior_Dtu_Dt)

  do CONVERT-FROM-DTU-DATE($FT_DayPrior_Dtu_Dt,$FT_DayPrior_To_Start)

  do FORMAT-DATETIME($FT_DayPrior_To_Start,$CMP_FT_DayPrior_To_Start,{DEFCMP},'','')

  let #CurrRpt_Yr = #dtu_yr
  let $Year_Head = 'Reporting Year ' || edit(#dtu_yr,'0000')
  let $Date_Head = 'From ' || $FT_Start_Dtu_Dt || ' To ' || $FT_End_Dtu_Dt

  let $Run_Emplid = rtrim(&RUN_CNTL_EG.EMPLID,' ')

end-procedure GET-PARAMETER-VALUES


!***********************************************************************
! GET-VALUES
!***********************************************************************
begin-procedure GET-VALUES

end-procedure GET-VALUES


!***********************************************************************
! INSERT-FT-SURVEY-RECORD
!***********************************************************************
begin-procedure INSERT-FT-SURVEY-RECORD

  let $err-statement1 = 'HPH901CN, Insert Error - INSERT-FT-SURVEY-RECORD'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '
  concat $J_Prev_Emplid with $err-statement2
  concat ', #CURRRPT_YR: ' with $err-statement2
  concat #CurrRpt_Yr with $err-statement2 '0000'
  concat ', #J_INSTN: ' with $err-statement2
  concat #J_Instn with $err-statement2 '000000'
  concat ', $J_STATSDEPT: ' with $err-statement2
  concat $J_StatsDept with $err-statement2
  concat ', $J_SUBJECT: ' with $err-statement2
  concat $J_Subject with $err-statement2
  concat ', $J_GENDER: ' with $err-statement2
  concat $J_Gender with $err-statement2
  concat ', #J_BIRTHYR: ' with $err-statement2
  concat #J_BirthYr with $err-statement2 '0000'
  concat ', #J_APPTYR_TO_INSTN: ' with $err-statement2
  concat #J_ApptYr_To_Instn with $err-statement2 '0000'
  concat ', $J_PREVEMPLT: ' with $err-statement2
  concat $J_PrevEmplt with $err-statement2 '000000'
  concat ', $J_PREV_EMPLTLOC: ' with $err-statement2
  concat $J_Prev_EmpltLoc with $err-statement2
  concat ', #J_1STDEG_YR: ' with $err-statement2
  concat #J_1STDeg_Yr with $err-statement2 '0000'
  concat ', $J_1STDEG_PROV: ' with $err-statement2
  concat $J_1STDeg_Prov with $err-statement2
  concat ', $J_HIGHDEG_ACCOMP: ' with $err-statement2
  concat $J_HighDeg_Accomp with $err-statement2 '0000'
  concat ', #J_HIGHDEG_YR: ' with $err-statement2
  concat #J_HighDeg_Yr with $err-statement2 '0000'
  concat ', $J_HIGHDEG_PROV: ' with $err-statement2
  concat $J_HighDeg_Prov with $err-statement2
  concat ', $J_LOC: ' with $err-statement2
  concat $J_Loc with $err-statement2 '000000'
  concat ', $J_IMMIGRANT: ' with $err-statement2
  concat $J_Immigrant with $err-statement2
  concat ', $J_RANK: ' with $err-statement2
  concat  $J_Rank with $err-statement2 '0000'
  concat ', $J_RESP: ' with $err-statement2
  concat $J_Resp with $err-statement2
  concat ', #J_APPTYR_TO_RANK: ' with $err-statement2
  concat #J_ApptYr_To_Rank with $err-statement2 '0000'
  concat ', $J_MEDDENTAL: ' with $err-statement2
  concat $J_MedDental with $err-statement2
  concat ', $J_APPT_TYPE: ' with $err-statement2
  concat $J_Appt_Type with $err-statement2 '0000'
  concat ', $J_SALSTAT: ' with $err-statement2
  concat $J_SalStat with $err-statement2
  concat ', #GRAND_T_ACTUAL: ' with $err-statement2
  concat #Grand_T_Actual with $err-statement2 '000000'
  concat ', #GRAND_T_ANNUAL: ' with $err-statement2
  concat #Grand_T_Annual, with $err-statement2 '000000'
  concat ', #GRAND_T_STIPENDS: ' with $err-statement2
  concat  #Grand_T_Stipends with $err-statement2 '000000'
  concat ', #TOTAL_ACTIVE_MM: ' with $err-statement2
  concat #Total_Active_MM with $err-statement2 '00'
  concat  ', #TOTAL_SABBAT_MM: ' with $err-statement2
  concat #Total_Sabbat_MM with $err-statement2 '00'
  concat ', #TOTAL_OTHRLV_MM: ' with $err-statement2
  concat #Total_OthrLv_MM with $err-statement2 '00'
  concat ', #TOTAL_UNPAID_MM: '  with $err-statement2
  concat #Total_Unpaid_MM with $err-statement2 '00'
  concat ', #TOTAL_WORKLOAD: ' with $err-statement2
  concat #Total_WorkLoad with $err-statement2 '00'
  concat ', $J_ONT_SALARY: ' with $err-statement2
  concat  $J_Ont_Salary with $err-statement2
  concat ', #J_ONT_FINAL_SALARY: ' with $err-statement2
  concat #J_Ont_Final_Salary with $err-statement2 '000000'
  concat  ', $ASOFTODAY: ' with $err-statement2
  concat $AsOfToday  with $err-statement2


begin-SQL on-error=Error-Display
INSERT INTO PS_HP_FT_SURVEY
(EMPLID,
HP_STATS_CAN_YR,
HP_STATS_INSTN_CD,
HP_STATS_DEPT_CD,
HP_STATS_SUBJ_CD,
SEX,
HP_YEAR_OF_BIRTH,
HP_YEAR_OF_APPTMNT,
HP_PREV_EMPLYMNT,
HP_PREV_EMPLT_LOC,
HP_FIRST_DEGREE_YR,
HP_FIRST_DEG_PROV,
HP_STATS_DEG_LVL,
HP_HIGHEST_DEG_YR,
HP_HIGH_DEG_PROV,
HP_STATS_LOC_CD,
HP_IMMIGRTN_STATUS,
HP_STATS_RANK_CD,
HP_STATS_RESP_CD,
HP_APPT_TO_RANK_YR,
HP_MED_DENT_CAT,
HP_FT_APPTMNT_TYPE,
HP_SALARY_STATUS,
HP_ACTUAL_SALARY,
HP_ANNUAL_SALARY,
HP_ADMIN_STIPENDS,
HP_MM_NOT_ON_LEAVE,
HP_MM_ON_SABBATICL,
HP_MM_ON_OTHER_PD,
HP_MM_ON_UNPAID_LV,
HP_REDUCED_LOAD,
HP_ONT_SALARY_SRCE,
HP_ONT_FINAL_SALRY,
HP_LAST_DT_CHNGD,
HP_LAST_DT_RPRTED,
HP_LAST_LOAD_DT)
VALUES
($J_Prev_Emplid,
#CurrRpt_Yr,
#J_Instn,
$J_StatsDept,
$J_Subject,
$J_Gender,
#J_BirthYr,
#J_ApptYr_To_Instn,
$J_PrevEmplt,
$J_Prev_EmpltLoc,
#J_1STDeg_Yr,
$J_1STDeg_Prov,
$J_HighDeg_Accomp,
#J_HighDeg_Yr,
$J_HighDeg_Prov,
$J_Loc,
$J_Immigrant,
$J_Rank,
$J_Resp,
#J_ApptYr_To_Rank,
$J_MedDental,
$J_Appt_Type,
$J_SalStat,
#Grand_T_Actual,
#Grand_T_Annual,
#Grand_T_Stipends,
#Total_Active_MM,
#Total_Sabbat_MM,
#Total_OthrLv_MM,
#Total_Unpaid_MM,
#Total_WorkLoad,
$J_Ont_Salary,
#J_Ont_Final_Salary,
NULL,
NULL,
$AsOfToday)
end-SQL

end-procedure  INSERT-FT-SURVEY-RECORD


!***********************************************************************
! PRINT-ERROR
! Prints the detail line on the exception report.
!***********************************************************************
begin-procedure PRINT-ERROR

  print $Save_Emplid          (+1,1,18)
  print $Save_EmplRcd         (,20,14)
  print $Process_Text         (,35,19)
  print $Save_Name            (,55,28)
  print $Msg1                 (,85,)
  if $Msg2 > ''
     print $Msg2              (+1,85)
  end-if
  if $Msg3 > ''
     print $Msg3              (+1,85)
  end-if
  print ''                    (+1,85)

  let $Msg1 = ''
  let $Msg2 = ''
  let $Msg3 = ''

end-procedure PRINT-ERROR


!***********************************************************************
! WRAPUP
! Updates the reporting period table and ends the report.
!***********************************************************************
begin-procedure WRAPUP

  do UPDATE-RPTNG-PERIOD-TABLE
  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM
  do GET-CURRENT-DATETIME

  display 'Report ended at: ' NoLine
  display &SysDateTime
  display ''

end-procedure WRAPUP


!***********************************************************************
! DELETE RUN CONTROL                                                   *
! Deletes run control information from run control table.              *
!***********************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'HPH901CN, Delete Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Bind Variables: $PRCS_OPRID: '
  concat $Prcs_OprID with $err-statement2
  concat ', $PRCS_RUN_CNTL_ID: ' with $err-statement2
  concat $Prcs_Run_Cntl_ID with $err-statement2

begin-SQL On-Error=Error-Display

DELETE FROM PS_RUN_CNTL_EG
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure DELETE-RUN-CONTROL


!***********************************************************************
! SQCs
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date math routine
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'stdapi.sqc'    !Update Process API
#Include 'getsetid.sqc'  !Get SetId routine
#Include 'getcodta.sqc'  !Get Company Data routine
#Include 'getdptnm.sqc'  !Get Department
#Include 'egrnctl1.sqc'  !Get E&G run control parameters
#Include 'hprnctl1.sqc'  !Get Statistics Canada run parameters
#Include 'stderror.sqc'  !Routine for error display
