!*************************************
!  DDP002:  Direct Deposit Register  *
!*************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2011/08/08:17:02:25                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860812                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup31.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'DDP002' to $ReportID

  do Init-DateTime
  do Init-Number
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Ddp002_ReportTitle to $ReportTitle

  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation

! Read from DDP002 program id
  do Init_Report_Translation($ReportID,$Curr_Language_Cd)
  do Append_Report_Translation('HR')

  if $Program_Read = 'Y'
    do Get_Field_Information ('DDP002', 'REPORT_TITLE',    $Ddp002_ReportTitle,    #dummy_width)
    do Get_Field_Information ('DDP002', 'GR_TOT',          $Ddp002_Gr_Tot,         #dummy_width)
    do Get_Field_Information ('DDP002', 'COMP_TOT',        $Ddp002_Comp_Tot,       #dummy_width)
    do Get_Field_Information ('DDP002', 'PAYPER_TOT',      $Ddp002_PayPer_Tot,     #dummy_width)
    do Get_Field_Information ('DDP002', 'PAYGRP_TOT',      $Ddp002_PayGrp_Tot,     #dummy_width)
    do Get_Field_Information ('DDP002', 'DEPT_TOT',        $Ddp002_Dept_Tot,       #dummy_width)
    do Get_Field_Information ('DDP002', 'EMP_NAME',        $Ddp002_Emp_Name,       #dummy_width)
    do Get_Field_Information ('DDP002', 'DEPT_ID',         $Ddp002_Dept_Id,        #dummy_width)
    do Get_Field_Information ('DDP002', 'CHECK_AMT1',      $Ddp002_Check_Amt1,     #dummy_width)
    do Get_Field_Information ('DDP002', 'DEPOSIT_DETAIL ', $Ddp002_Deposit_Detail, #dummy_width)
    do Get_Field_Information ('DDP002', 'EMP_ID',          $Ddp002_Emp_Id,         #dummy_width)
    do Get_Field_Information ('DDP002', 'CHECK_DATE',      $Ddp002_Check_Date,     #dummy_width)
    do Get_Field_Information ('DDP002', 'ADVICE_NO',       $Ddp002_Advice_No,      #dummy_width)
    do Get_Field_Information ('DDP002', 'SOURCE',          $Ddp002_Source,         #dummy_width)
    do Get_Field_Information ('DDP002', 'NET_PAY',         $Ddp002_Net_Pay,        #dummy_width)
    do Get_Field_Information ('DDP002', 'CHECK_AMT2',      $Ddp002_Check_Amt2,     #dummy_width)
    do Get_Field_Information ('DDP002', 'TYPE',            $Ddp002_Type,           #dummy_width)
    do Get_Field_Information ('DDP002', 'TRANSIT',         $Ddp002_Transit,        #dummy_width)
    do Get_Field_Information ('DDP002', 'ACC_NO',          $Ddp002_Acc_No,         #dummy_width)
    do Get_Field_Information ('DDP002', 'AMOUNT',          $Ddp002_Amount,         #dummy_width)
    do Get_Field_Information ('DDP002', 'LEGEND',          $Ddp002_Legend,         #dummy_width)
    do Get_Field_Information ('DDP002', 'REVERSALS_NOTE',  $Ddp002_Reversals_Note, #dummy_width)
    do Get_Field_Information ('DDP002', 'IAT',             $Ddp002_IAT,            #dummy_width)

    do Get_Field_Information ('HR',     'BUS_UNIT',        $HR_Bus_Unit,            #dummy_width)

    let $Ddp002_Net_Pay = lpad($Ddp002_Net_Pay,8,' ')
    let $Ddp002_Amount  = lpad($Ddp002_Amount,7,' ')
  end-if

end-procedure

begin-procedure Array-Initialization
  move 11 to #lastDDPindex    !Index of last entry - Direct Deposit array
  create-array name=DDParray size=10 field=ACCOUNT_NUM:char -
    field=TRANSIT_NUM:char field=Account_Type:char -
    field=Deposit_Amount:number  field=IAT_TRAN:char

  create-array name=Totals size=6 -
    field=TotalName:char field=total:number:3 field=startCol:number:3

  put $Ddp002_Gr_Tot      into Totals(1) TotalName
  put $Ddp002_Comp_Tot    into Totals(2) TotalName
  put $Ddp002_PayPer_Tot  into Totals(3) TotalName
  put $Ddp002_PayGrp_Tot  into Totals(4) TotalName
  put $Ddp002_Dept_Tot    into Totals(5) TotalName

  put  41 into Totals(0) startCol(0)
  put  55 into Totals(0) startCol(1)
  put 106 into Totals(0) startCol(2)
end-procedure

begin-heading 8

  #Include 'stdhtr06.sqc'
  print $Ddp002_Emp_Name              (+2,1)
  print $Ddp002_Dept_Id               (0,27)
  print $Ddp002_Check_Amt1            (0,63)
  print $Ddp002_Deposit_Detail        (0,71)
  print $Ddp002_Emp_Id                (+1,1)
  print $Ddp002_Check_Date            (0,15)
  print $Ddp002_Advice_No             (0,27)
  print $Ddp002_Source                (0,41)
  print $Ddp002_Net_Pay               (0,47)
  print $Ddp002_Check_Amt2            (0,63)
  print $Ddp002_Type                  (0,71)
  print $Ddp002_Transit               (0,80)
  print $Ddp002_Acc_No                (0,92)
  print $Ddp002_IAT                   (0,109)
  print $Ddp002_Amount                (0,116)
  print $HR_Bus_Unit                  (+1,1)



end-heading


begin-procedure Report

begin-SELECT
A.COMPANY    () on-break print=never  level=1 procedure=Company-Change
A.PAY_END_DT () on-break print=never  level=2 procedure=PayEndDate-Change
A.PAYGROUP   () on-break print=never  level=3 procedure=PayGroup-Change
B.DEPTID (3,26) on-break print=always level=4 procedure=Department-Change
B.NAME                 (3,1,23)
B.EMPLID               (4,1)
A.CHECK_DT
B.CHECK_DT
B.PAYCHECK_OPTION
B.PAYCHECK_NBR
B.NET_PAY
B.OFF_CYCLE,B.PAGE_NUM,B.LINE_NUM,B.SEPCHK
B.PAY_SHEET_SRC
B.BUSINESS_UNIT

  if not IsNULL(&B.Check_Dt)
    do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
    print $out  (4,14)
  end-if

  if &B.Pay_Sheet_Src = 'O' or &B.Pay_Sheet_Src = 'K' or &B.Pay_Sheet_Src = 'L'
     print &B.Pay_Sheet_Src  (4,42)
  end-if

  do Format-Number(&B.Net_Pay, $out, '99,999,999.99')
  print $out    (3,43)
  move &A.Company    to $Company
  move &A.PayGroup   to $PayGroup
  move &B.Emplid     to $Emplid

  move &A.Pay_End_Dt to $PayEndDate
  move &A.Check_Dt   to $AsOfDate  !for included procedures
  do Get-Pay-Distribution
  move &B.Net_Pay to #Check_Amount
  subtract #Deposit_Total from #Check_Amount
  do Format-Number(#Advice#, $out, '099999999999999')
  print $out    (4,26)

  if &B.PAYCHECK_NBR <> #Advice#
    print 'C'           (5,25)
    print &B.PAYCHECK_NBR     (5,26)  edit 099999999999999
  end-if

  do Format-Number(#Check_Amount, $out, '9,999,999.99')
  print $out    (3,57)

  print &B.BUSINESS_UNIT  (5,1)

  ARRAY-ADD         &B.Net_Pay     -
                    #Check_Amount  -
                    #Deposit_Total -
    to Totals(5)    total(0)       -
                    TOTAL(1)       -
                    TOTAL(2)

  do Print-Detail
  NEXT-LISTING NEED=4

FROM  PS_PAY_CALENDAR A,
      PS_PAY_CHECK    B
WHERE [$SlctCalendar]
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND B.PAYCHECK_OPTION IN ('A','&','R')
  AND EXISTS (SELECT 'X' FROM PS_PAY_CHECK C
                WHERE C.COMPANY         = B.COMPANY
                  AND C.PAYGROUP        = B.PAYGROUP
                  AND C.PAY_END_DT      = B.PAY_END_DT
                  AND C.FORM_ID         = B.FORM_ID
                  AND C.PAYCHECK_NBR    = B.PAYCHECK_NBR
                  AND C.PAYCHECK_OPTION IN ('A','&'))
ORDER BY A.COMPANY,
         A.PAY_END_DT,
         A.PAYGROUP,
         B.DEPTID,
         B.NAME,
         B.EMPLID,
         B.PAGE_NUM,
         B.LINE_NUM,
         B.SEPCHK
end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals
end-procedure


begin-procedure Print-Detail
  position (2)
    move 0 to #i
    while #i <= #lastDDPindex
      get $Account_Type              -
          $ACCOUNT_NUM               -
          $TRANSIT_NUM               -
          #Deposit_Amount            -
          $IAT                       -
      from DDParray(#i)              -
          Account_Type               -
          ACCOUNT_NUM                -
          TRANSIT_NUM                -
          Deposit_Amount             -
          IAT_TRAN

      print $Account_Type    (+1,71)
      print $TRANSIT_NUM        (+0,80)
      print $ACCOUNT_NUM        (+0,92)
      print $IAT                (+0,110)
      do Format-Number(#Deposit_Amount, $out, '99,999,999.99')
      print $out  (+0,111)

      add 1 to #i
    end-while
end-procedure


begin-procedure Get-Pay-Distribution

  move -1 to #lastDDPindex
  move 0 to #Deposit_Total

begin-SELECT

PD.ACCOUNT_NUM
PD.BANK_CD
PD.BRANCH_EC_CD
PD.ACCOUNT_TYPE
PD.DEPOSIT_AMOUNT
PD.PAYCHECK_NBR
PD.PRIORITY
  move 'ACCOUNT_TYPE' to $FieldName
  move &PD.Account_Type to $FieldValue
  do Read-Translate-Table

  do Get-IAT-indicator

  if &PD.Account_Type <> '$'
    add 1 to #lastDDPindex
    let $TransNum = rtrim(&PD.BANK_CD, ' ')
    concat ' ' with $TransNum
    let $temptrim = rtrim(&PD.BRANCH_EC_CD, ' ')
    concat $temptrim with $TransNum
    if  $DD1.IAT_ind = 'Y'
      move 'Y' to $IAT
    else
      move 'N' to $IAT
    end-if

    PUT &PD.ACCOUNT_NUM               -
        $TransNum                  -
        $XlatShortName             -
        &PD.Deposit_Amount         -
        $IAT                       -
    INTO DDPARRAY(#LASTDDPINDEX)   -
        ACCOUNT_NUM                   -
        TRANSIT_NUM                   -
        ACCOUNT_TYPE               -
        DEPOSIT_AMOUNT             -
        IAT_TRAN

    add &PD.Deposit_Amount to #Deposit_Total
  end-if

  if &PD.PAYCHECK_NBR <> &B.PAYCHECK_NBR or &B.PayCheck_Option = 'A'
    move &PD.PAYCHECK_NBR to #Advice#
  end-if

FROM  PS_PAY_DISTRIBUTN PD
WHERE PD.COMPANY         = &A.Company
  AND PD.PAYGROUP        = &A.PayGroup
  AND PD.PAY_END_DT      = &A.Pay_End_Dt
  AND PD.OFF_CYCLE       = &B.Off_Cycle
  AND PD.PAGE_NUM        = &B.PAGE_NUM
  AND PD.LINE_NUM        = &B.LINE_NUM
  AND PD.SEPCHK          = &B.SepChk
end-SELECT
end-procedure

begin-procedure Get-IAT-indicator

    move 'N' to $DD1.IAT_ind
    move 'USA' to $DD1.Country_cd

begin-SELECT
DD1.IAT_IND
DD1.COUNTRY_CD

   move &DD1.IAT_IND to $DD1.IAT_ind
   move &DD1.COUNTRY_CD to $DD1.Country_cd

 FROM PS_DIR_DEP_DISTRIB DD1
WHERE  DD1.EMPLID        = $Emplid
   AND DD1.ACCOUNT_NUM   = &PD.Account_num
   AND DD1.ACCOUNT_TYPE  = &PD.Account_type
   AND DD1.BANK_CD       = &PD.Bank_cd
   AND DD1.PRIORITY      = &PD.Priority
   AND DD1.EFFDT         = (SELECT MAX(DD1D.EFFDT)
                            FROM PS_DIR_DEP_DISTRIB DD1D
                            WHERE DD1D.EMPLID = DD1.EMPLID
                              AND DD1D.ACCOUNT_NUM = DD1.ACCOUNT_NUM
                              AND DD1D.ACCOUNT_TYPE = DD1.ACCOUNT_TYPE
                              AND DD1D.BANK_CD      = DD1.BANK_CD
                              AND DD1D.PRIORITY     = DD1.PRIORITY)
end-SELECT


end-procedure


begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Department-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals

  move 5 to #totalRow

  while #totalRow >= #changeLevel

    if #current-line > 55  !don't split a total series across pages
      new-page
    end-if

    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,18)
    position (+1)
    move -1 to #posn
    move 2 to #i

    while #i <= 2
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999,999,999,999.99mi')
      print $out (+#posn,#startCol)
      multiply -1 times #posn
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow

  end-while

  if #changeLevel = 5  !skip page except on Department change
    position (+1)
    next-listing need=4
  else
    new-page
  end-if

  if $End = 'Y'
    do Reset
  end-if

end-procedure

!******************************************************
!  RESET: Reset printer, print 'End of Report'        *
!         Note: Uncomment ENCODE statement to force   *
!               a printer reset at end of report      *
!******************************************************

begin-procedure Reset
  move 'Y' to $End_of_Report
  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if
end-procedure

begin-footing 3
  print $Ddp002_Legend         (1,1)
  print $Ddp002_Reversals_Note (+1,1)
  if $End_of_Report = 'Y'
    !*******************************************************************
    !  Use a globalized string if one was gotten from stdhdgtr         *
    !*******************************************************************
    if $stdhdg_end_rep = ''
      print 'End of Report' (+1,1) center
    else
      print $stdhdg_end_rep (+1,1) center
    end-if
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if
end-footing

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to a given language
#Include 'getrplng.sqc'  !Gets the report language
