!*****************************************************
!  PAY034.SQR: DATABASE AUDIT PRIOR TO PAYSHEET      *
!*****************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!
!                                                                      *
!          $Date:  2013/02/04:11:32:42                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885420                                              !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'    !Set Database Environment


begin-report

  move 'PAY034' to $ReportID
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  do Get-Calendar-Year-Id
  move $Pay034_ReportTitle to $ReportTitle
  do Get-Run-ID
  display $ReportTitle
  display ''
  do Init-DateTime
  do Get-Current-DateTime
  let $InDt = '19000101'
  do Format-DateTime($InDt, $BeginDt, {DEFCMP}, '', 'NATIVE')
  move $AsOfToday to $AsOfDate
  do Get-Date-Codes
  move $AsOfYYYY to #AsOfYYYY
  display 'Report Began: ' noline
  display $AsOfToday noline
  display ':' noline
  display $AsOfNow
  display ''
  do Delete-Temp-Table
  if $ReportOption = 'R'
    do Extract-On-RUNID
  else
    do Extract-All-Empls
  end-if
  do Check-Genl-Tables
  do Check-Personal-Data
  do Check-Employment
  do Check-Job
  do Check-US-Taxes
  do Check-Can-Taxes
  do Check-Deductions
  do Check-Addl-Pay
  do Check-Balances
  do Check-Comp-Codes
  do Get-Current-DateTime
  display ''
  display 'Report Ended: ' noline
  display $AsOfNow
  display 'Error Records: ' noline
  display #Records 999,999
  print 'Error Records: ' (+2,10)
  print #Records          (0,25) edit 999,999
  do Stdapi-Term
end-report

begin-procedure Report-Translation
! Read from PAY034 program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY034', 'REPORT_TITLE', $Pay034_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY034', 'COMP',         $Pay034_Comp,        #dummy_width)
   do Get_Field_Information ('PAY034', 'EMPID',        $Pay034_EmpId,       #dummy_width)
   do Get_Field_Information ('PAY034', 'EMP_RCDNO',    $Pay034_Emp_RcdNo,   #dummy_width)
   do Get_Field_Information ('PAY034', 'MSG',          $Pay034_Msg,         #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG1',      $Pay034_ErrMsg1,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG2',      $Pay034_ErrMsg2,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG3',      $Pay034_ErrMsg3,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG4',      $Pay034_ErrMsg4,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG5',      $Pay034_ErrMsg5,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG6',      $Pay034_ErrMsg6,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG8',      $Pay034_ErrMsg8,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG9',      $Pay034_ErrMsg9,     #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG10',     $Pay034_ErrMsg10,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG11',     $Pay034_ErrMsg11,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG12',     $Pay034_ErrMsg12,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG13',     $Pay034_ErrMsg13,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG14',     $Pay034_ErrMsg14,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG15',     $Pay034_ErrMsg15,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG16',     $Pay034_ErrMsg16,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG17',     $Pay034_ErrMsg17,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG18',     $Pay034_ErrMsg18,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG19',     $Pay034_ErrMsg19,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG20',     $Pay034_ErrMsg20,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG21',     $Pay034_ErrMsg21,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG22',     $Pay034_ErrMsg22,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG23',     $Pay034_ErrMsg23,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG24',     $Pay034_ErrMsg24,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG25',     $Pay034_ErrMsg25,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG26',     $Pay034_ErrMsg26,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG27',     $Pay034_ErrMsg27,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG28',     $Pay034_ErrMsg28,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG29',     $Pay034_ErrMsg29,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG30',     $Pay034_ErrMsg30,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG31',     $Pay034_ErrMsg31,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG32',     $Pay034_ErrMsg32,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG33',     $Pay034_ErrMsg33,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG34',     $Pay034_ErrMsg34,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG35',     $Pay034_ErrMsg35,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG36',     $Pay034_ErrMsg36,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG37',     $Pay034_ErrMsg37,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG38',     $Pay034_ErrMsg38,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG39',     $Pay034_ErrMsg39,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG40',     $Pay034_ErrMsg40,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG41',     $Pay034_ErrMsg41,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG42',     $Pay034_ErrMsg42,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG43',     $Pay034_ErrMsg43,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG44',     $Pay034_ErrMsg44,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG45',     $Pay034_ErrMsg45,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG46',     $Pay034_ErrMsg46,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG47',     $Pay034_ErrMsg47,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG48',     $Pay034_ErrMsg48,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG49',     $Pay034_ErrMsg49,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG50',     $Pay034_ErrMsg50,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG51',     $Pay034_ErrMsg51,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG52',     $Pay034_ErrMsg52,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG53',     $Pay034_ErrMsg53,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG54',     $Pay034_ErrMsg54,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG55',     $Pay034_ErrMsg55,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG56',     $Pay034_ErrMsg56,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG57',     $Pay034_ErrMsg57,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG58',     $Pay034_ErrMsg58,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG59',     $Pay034_ErrMsg59,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG60',     $Pay034_ErrMsg60,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG61',     $Pay034_ErrMsg61,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG62',     $Pay034_ErrMsg62,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG63',     $Pay034_ErrMsg63,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG64',     $Pay034_ErrMsg64,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG65',     $Pay034_ErrMsg65,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG66',     $Pay034_ErrMsg66,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG67',     $Pay034_ErrMsg67,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG68',     $Pay034_ErrMsg68,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG69',     $Pay034_ErrMsg69,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG70',     $Pay034_ErrMsg70,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG71',     $Pay034_ErrMsg71,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG72',     $Pay034_ErrMsg72,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG73',     $Pay034_ErrMsg73,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG74',     $Pay034_ErrMsg74,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG75',     $Pay034_ErrMsg75,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG76',     $Pay034_ErrMsg76,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG77',     $Pay034_ErrMsg77,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG78',     $Pay034_ErrMsg78,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG79',     $Pay034_ErrMsg79,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG80',     $Pay034_ErrMsg80,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG81',     $Pay034_ErrMsg81,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG82',     $Pay034_ErrMsg82,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG83',     $Pay034_ErrMsg83,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG84',     $Pay034_ErrMsg84,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG85',     $Pay034_ErrMsg85,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG86',     $Pay034_ErrMsg86,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG87',     $Pay034_ErrMsg87,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG88',     $Pay034_ErrMsg88,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG89',     $Pay034_ErrMsg89,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG90',     $Pay034_ErrMsg90,    #dummy_width)
   do Get_Field_Information ('PAY034', 'ERRMSG91',     $Pay034_ErrMsg91,    #dummy_width)
end-procedure

#include 'setup31.sqc'   !Printer and page-size initialization


begin-heading 7

  #include 'stdhdgtr.sqc'
  if $ReportOption = 'R'
    print  'Run ID: '           (+0,1)
    print  $RunID               (0,13)
  end-if
  print $Pay034_Comp             (+3,1)
  print $Pay034_EmpId            (0,9)
  print $Pay034_Emp_RcdNo        (0,17)
  print $Pay034_Msg              (0,28) ! Changed from 30 to 28 to give more
                                        ! space for French.
end-heading

begin-procedure Get-Run-ID
  if $Prcs_Process_Instance = ''
    do Process-Run-ID
  else
    do Select-Parameters
    move $RC_PAY.RUN_ID  to  $RunID
    move $RC_PAY.REPORT_OPTION  to  $ReportOption
  end-if
end-procedure

begin-procedure Process-Run-ID
  move 0 to #Found
  while #Found = 0
    input $RunID 'Enter Pay Run ID'
    uppercase $RunID
    display $RUNID
    if $RunID = ''
      stop
    else
      do Edit-Run-ID
      if #Found = 1
        break
      else
        display 'Error --  Run ID not valid for any Pay Calendar.'
        move '' to $RunID
      end-if
    end-if
  end-while
  move 0 to #Found
  while #Found = 0
    input $ReportOption 'Enter Report Option ("F" for Full, "R" for RunID)'
    uppercase $ReportOption

      if $ReportOption = ''
        stop
    else
    if $ReportOption  = 'F'
      break
    else
    if $ReportOption  = 'R'
      break
    else
      display 'Error --  Report Option not valid.'
      move '' to $ReportOption
    end-if
    end-if
    end-if
  end-while
end-procedure


begin-procedure Edit-Run-ID
begin-SELECT
'X'
  move 1 to #Found
FROM  PS_PAY_CALENDAR
WHERE RUN_ID = $RunID
end-SELECT
end-procedure


!********************************************************************
!  Create temporary table to select Active Employee Records for the
!  selected RUN ID.
!********************************************************************
begin-procedure Extract-On-RUNID

begin-SELECT
A1.EMPLID
A1.EMPL_RCD
A1.EFFDT

  move &A1.EMPLID         to $EMPLID
  move &A1.EMPL_RCD       to #EMPL_RCD
  move &A1.EFFDT          to $EFFDT
  do Insert-Active-Empl

FROM  PS_JOB          A1,
      PS_PAY_CALENDAR MS2

WHERE  A1.EMPL_STATUS <> 'T'
  AND  A1.PER_ORG   = 'EMP'
  AND  A1.COMPANY   = MS2.COMPANY
  AND  A1.PAYGROUP  = MS2.PAYGROUP
  AND MS2.RUN_ID    = $RunID
  AND  A1.EFFDT =
         (SELECT MAX (EFFDT)
          FROM   PS_JOB MS4
          WHERE  A1.EMPLID   = MS4.EMPLID
            AND  A1.EMPL_RCD = MS4.EMPL_RCD
            AND MS4.EFFDT   <= MS2.PAY_BEGIN_DT)

  AND  A1.EFFSEQ =
         (SELECT MAX(EFFSEQ)
          FROM   PS_JOB
          WHERE  A1.EMPLID   = EMPLID
            AND  A1.EMPL_RCD = EMPL_RCD
            AND  A1.EFFDT    = EFFDT)

end-Select
end-procedure

!********************************************************************
!  Create temporary table to select All Employee Records for the
!  database.
!********************************************************************
begin-procedure Extract-All-Empls

begin-SELECT
AF1.EMPLID
AF1.EMPL_RCD
AF1.EFFDT

  move &AF1.EMPLID           to $EMPLID
  move &AF1.EMPL_RCD         to #EMPL_RCD
  move &AF1.EFFDT            to $EFFDT
  do Insert-Active-Empl

FROM  PS_JOB  AF1

WHERE AF1.PER_ORG    = 'EMP'
  AND AF1.EMPL_STATUS <> 'T'
  AND AF1.EFFDT =
         (SELECT MAX (EFFDT)
          FROM  PS_JOB MS4
          WHERE AF1.EMPLID   = MS4.EMPLID
            AND AF1.EMPL_RCD = MS4.EMPL_RCD
            AND MS4.EFFDT   <= $AsOfDate)

  AND AF1.EFFSEQ =
         (SELECT MAX(EFFSEQ)
          FROM  PS_JOB
          WHERE AF1.EMPLID   = EMPLID
            AND AF1.EMPL_RCD = EMPL_RCD
            AND AF1.EFFDT    = EFFDT)

end-Select
end-procedure

!*********************************************************************
! General Tables Data Edits
!*********************************************************************

begin-procedure Check-Genl-Tables

!*********************************************************************
! Installation Record Edits
!*********************************************************************

  display 'Checking Installation. . . '

!*********************************************************************
! FIND RECORDS WITHOUT NA PAYROLL INSTALLED
!*********************************************************************

  move 'Y'                to $Install_PY

begin-SELECT

I1.INSTALLED_PAY_NA

  move ''                   to $Company
  move ''                   to $Emplid
  move ''                   to #EMPL_RCD
  move ''                   to $Install_PY
  move &I1.INSTALLED_PAY_NA to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg1      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_INSTALLATION I1

WHERE I1.INSTALLED_PAY_NA <> 'Y'

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow

  display 'Checking Other Tables . . . '

!*********************************************************************
!  DEDUCTION TABLE
!**********************************************************************

!**********************************************************************
! CHECK FOR GENERAL DEDUCTIONS NOT SET UP ON DEDUCTION TABLE
!**********************************************************************

begin-SELECT

GT1.DEDCD

  move ''                   to $Company
  move ''                   to $Emplid
  move ''                   to #EMPL_RCD
  move &GT1.DedCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg2      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_GENL_DED_TBL GT1

WHERE NOT EXISTS
     (SELECT 'X'
      FROM  PS_DEDUCTION_TBL
      WHERE DEDCD = GT1.DEDCD)

ORDER BY GT1.DEDCD ASC

end-SELECT

!*********************************************************************
! CHECK FOR DEDUCTIONS NOT SET UP ON GENERAL DEDUCTION TABLE
!*********************************************************************

begin-SELECT

GT2.PLAN_TYPE
GT2.DEDCD

  move ''                   to $Company
  move ''                   to $Emplid
  move ''                   to #EMPL_RCD
  move &GT2.Plan_Type       to $Message-Data1
  move &GT2.DedCd           to $Message-Data2
  move $Pay034_ErrMsg3      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_DEDUCTION_TBL GT2

WHERE PLAN_TYPE = '00'

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_GENL_DED_TBL
      WHERE DEDCD = GT2.DEDCD)

ORDER BY GT2.PLAN_TYPE ASC, GT2.DEDCD ASC

end-SELECT

!**********************************************************************
!  PAYGROUP TABLE
!**********************************************************************

!**********************************************************************
! Check for Earnings Codes used for paygroup not on Earnings Table
! ErnCd_Reg_Hrs
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC3 ' to $SelPayCal
   move 'AND PC3.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND PC3.COMPANY=GT3.COMPANY  AND PC3.PAYGROUP=GT3.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT3.COMPANY
GT3.PAYGROUP
GT3.ERNCD_REG_HRS

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &GT3.ERNCD_REG_HRS

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'
      move ''                   to $Company
      move ''                   to $Emplid
      move ''                   to #EMPL_RCD
      move &GT3.Paygroup        to $Message-Data1
      move &GT3.ErnCd_Reg_Hrs   to $Message-Data2
      move $Pay034_ErrMsg4      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT3
[$SelPayCal]

WHERE GT3.EFFDT = (SELECT MAX(GT3A.EFFDT)
                   FROM  PS_PAYGROUP_TBL GT3A
                   WHERE GT3A.COMPANY  = GT3.COMPANY
                     AND GT3A.PAYGROUP = GT3.PAYGROUP
                     AND GT3A.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT3.PAYGROUP ASC

end-SELECT

!**********************************************************************
! Check for Earnings Codes used for paygroup not on Earnings Table
! ErnCd_Reg_Earns
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC4 ' to $SelPayCal
   move 'AND PC4.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND PC4.COMPANY=GT4.COMPANY  AND PC4.PAYGROUP=GT4.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT4.COMPANY
GT4.PAYGROUP
GT4.ERNCD_REG_EARNS

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &GT4.ERNCD_REG_EARNS

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'

      move ''                   to $Company
      move ''                   to $Emplid
      move ''                   to #EMPL_RCD
      move &GT4.Paygroup        to $Message-Data1
      move &GT4.ErnCd_Reg_Earns to $Message-Data2
      move $Pay034_ErrMsg5      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT4
[$SelPayCal]

WHERE GT4.EFFDT = (SELECT MAX(GT4A.EFFDT)
                   FROM  PS_PAYGROUP_TBL GT4A
                   WHERE GT4A.COMPANY  = GT4.COMPANY
                     AND GT4A.PAYGROUP = GT4.PAYGROUP
                     AND GT4A.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT4.PAYGROUP ASC

end-SELECT

!**********************************************************************
! Check for Earnings Codes used for paygroup not on Earnings Table
! ErnCd_OT_Hrs
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC5 ' to $SelPayCal
   move 'AND PC5.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND PC5.COMPANY=GT5.COMPANY  AND PC5.PAYGROUP=GT5.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT5.COMPANY
GT5.PAYGROUP
GT5.ERNCD_OT_HRS

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &GT5.ERNCD_OT_HRS

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'

      move ''                   to $Company
      move ''                   to $Emplid
      move ''                   to #EMPL_RCD
      move &GT5.Paygroup        to $Message-Data1
      move &GT5.ErnCd_OT_hrs    to $Message-Data2
      move $Pay034_ErrMsg6      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT5
[$SelPayCal]

WHERE  GT5.EFFDT = (SELECT MAX(GT5A.EFFDT)
                    FROM PS_PAYGROUP_TBL GT5A
                    WHERE GT5A.COMPANY  = GT5.COMPANY
                      AND GT5A.PAYGROUP = GT5.PAYGROUP
                      AND GT5A.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT5.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Earnings Codes used for paygroup not on Earnings Table
! ErnCd_Holiday
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC7 ' to $SelPayCal
   move 'AND PC7.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND PC7.COMPANY=GT7.COMPANY  AND PC7.PAYGROUP=GT7.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT7.COMPANY
GT7.PAYGROUP
GT7.ERNCD_HOLIDAY

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &GT7.ERNCD_HOLIDAY

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'

      move ''                   to $Company
      move ''                   to $Emplid
      move ''                   to #EMPL_RCD
      move &GT7.Paygroup        to $Message-Data1
      move &GT7.ErnCd_Holiday   to $Message-Data2
      move $Pay034_ErrMsg8      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT7
[$SelPayCal]

WHERE GT7.EFFDT = (SELECT MAX(GT7A.EFFDT)
                   FROM  PS_PAYGROUP_TBL GT7A
                   WHERE GT7A.COMPANY  = GT7.COMPANY
                     AND GT7A.PAYGROUP = GT7.PAYGROUP
                     AND GT7A.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT7.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Earnings Codes used for paygroup not on Earnings Table
! ErnCd_Hol_NonStat
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC8 ' to $SelPayCal
   move 'AND PC8.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND CT8.COMPANY=PC8.COMPANY AND PC8.COMPANY=GT8.COMPANY AND PC8.PAYGROUP=GT8.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT8.COMPANY
GT8.PAYGROUP
GT8.ERNCD_HOL_NONSTAT

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &GT8.ERNCD_HOL_NONSTAT

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'

      move ''                     to $Company
      move ''                     to $Emplid
      move ''                     to #Empl_Rcd
      move &GT8.Paygroup          to $Message-Data1
      move &GT8.ErnCd_Hol_NonStat to $Message-Data2
      move $Pay034_ErrMsg9        to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT8,
      PS_COMPANY_TBL  CT8
[$SelPayCal]

WHERE GT8.EFFDT   = (SELECT MAX(GT8A.EFFDT)
                     FROM  PS_PAYGROUP_TBL GT8A
                     WHERE GT8A.COMPANY  = GT8.COMPANY
                       AND GT8A.PAYGROUP = GT8.PAYGROUP
                       AND GT8A.EFFDT   <= $AsOfToday)

  AND CT8.COMPANY = GT8.COMPANY
  AND CT8.COUNTRY = 'CAN'

[$SelRunID]

ORDER BY GT8.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Earnings Table used for paygroup
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC9 ' to $SelPayCal
   move 'AND PC9.RUN_ID='        to $SelRunID
   concat ''''                 with $SelRunID
   concat $RunID               with $SelRunID
   concat ''''                 with $SelRunID
   move ' AND PC9.COMPANY=GT9.COMPANY  AND PC9.PAYGROUP=GT9.PAYGROUP ' to $RunIDParms
   concat $RunIDParms          with $SelRunID
else
   move ''                       to $SelPayCal
   move ''                       to $SelRunID
end-if


begin-SELECT

GT9.COMPANY
GT9.PAYGROUP
GT9.ERN_PROGRAM

   let $ERN_PGM_ERROR = 'Y'
   let $CHECK_ERN_PROGRAM = &GT9.ERN_PROGRAM

   do Check-Earn-Program

   if $ERN_PGM_ERROR = 'Y'
      move ''                 to $Company
      move ''                 to $Emplid
      move ''                 to #EMPL_RCD
      move &GT9.Paygroup      to $Message-Data1
      move &GT9.Ern_Program   to $Message-Data2
      move $Pay034_ErrMsg10   to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT9
[$SelPayCal]

WHERE GT9.EFFDT = (SELECT MAX(GT9AA.EFFDT)
                   FROM PS_PAYGROUP_TBL GT9AA
                   WHERE GT9AA.COMPANY  = GT9.COMPANY
                     AND GT9AA.PAYGROUP = GT9.PAYGROUP
                     AND GT9AA.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT9.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Earnings not in Earnings Program used for paygroup
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC9A ' to $SelPayCal
   move 'AND PC9A.RUN_ID='        to $SelRunID
   concat ''''                  with $SelRunID
   concat $RunID                with $SelRunID
   concat ''''                  with $SelRunID
   move ' AND PC9A.COMPANY=GT9A.COMPANY  AND PC9A.PAYGROUP=GT9A.PAYGROUP ' to $RunIDParms
   concat $RunIDParms           with $SelRunID
else
   move ''                        to $SelPayCal
   move ''                        to $SelRunID
end-if


begin-SELECT DISTINCT

GT9A.PAYGROUP
GT9A.ERN_PROGRAM

   let $CHECK_ERN_PROGRAM = &GT9A.ERN_PROGRAM

   do Check-Earn-Program-Erncd

   if $ERN_PGM_ERN_ERROR = 'Y'
      move ''                    to $Company
      move ''                    to $Emplid
      move ''                    to #Empl_Rcd
      move &GT9A.Paygroup        to $Message-Data1
      move &GT9A.Ern_Program     to $Message-Data2
      move $Pay034_ErrMsg91      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_PAYGROUP_TBL GT9A
[$SelPayCal]

  WHERE GT9A.EFFDT = (SELECT MAX(GT9B.EFFDT)
                      FROM  PS_PAYGROUP_TBL GT9B
                      WHERE GT9B.COMPANY  = GT9A.COMPANY
                        AND GT9B.PAYGROUP = GT9A.PAYGROUP
                        AND GT9B.EFFDT   <= $AsOfToday)
[$SelRunID]

ORDER BY GT9A.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Holiday Schedule used for paygroup
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC10 ' to $SelPayCal
   move 'AND PC10.RUN_ID='        to $SelRunID
   concat ''''                  with $SelRunID
   concat $RunID                with $SelRunID
   concat ''''                  with $SelRunID
   move ' AND PC10.COMPANY=GT10.COMPANY  AND PC10.PAYGROUP=GT10.PAYGROUP ' to $RunIDParms
   concat $RunIDParms           with $SelRunID
else
   move ''                        to $SelPayCal
   move ''                        to $SelRunID
end-if


begin-SELECT

GT10.COMPANY
GT10.PAYGROUP
GT10.HOLIDAY_SCHEDULE

  move ''                       to $Company
  move ''                       to $Emplid
  move ''                       to #EMPL_RCD
  move &GT10.Paygroup           to $Message-Data1
  move &GT10.Holiday_Schedule   to $Message-Data2
  move $Pay034_ErrMsg11         to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAYGROUP_TBL GT10
[$SelPayCal]

WHERE GT10.EFFDT = (SELECT MAX(GT10A.EFFDT)
                    FROM PS_PAYGROUP_TBL GT10A
                    WHERE GT10A.COMPANY  = GT10.COMPANY
                      AND GT10A.PAYGROUP = GT10.PAYGROUP
                      AND GT10A.EFFDT   <= $AsOfToday)
[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_HOLIDAY_TBL
      WHERE HOLIDAY_SCHEDULE = GT10.HOLIDAY_SCHEDULE)

ORDER BY GT10.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Advice Form ID used for paygroup
!**********************************************************************
if $INSTALL_PY = 'Y'
   if $RunID > ''
      move ', PS_PAY_CALENDAR PC11 ' to $SelPayCal
      move 'AND PC11.RUN_ID='        to $SelRunID
      concat ''''                  with $SelRunID
      concat $RunID                with $SelRunID
      concat ''''                  with $SelRunID
      move ' AND PC11.COMPANY=GT11.COMPANY  AND PC11.PAYGROUP=GT11.PAYGROUP ' to $RunIDParms
      concat $RunIDParms           with $SelRunID
   else
      move ''                        to $SelPayCal
      move ''                        to $SelRunID
   end-if


begin-SELECT

GT11.COMPANY
GT11.PAYGROUP
SBT1.FORM_ID_ADVICE

  move ''                      to $Company
  move ''                      to $Emplid
  move ''                      to #EMPL_RCD
  move &GT11.Paygroup          to $Message-Data1
  move &SBT1.Form_ID_Advice    to $Message-Data2
  move $Pay034_ErrMsg12        to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAYGROUP_TBL GT11,
      PS_SRC_BANK     SBT1
[$SelPayCal]

WHERE GT11.EFFDT = (SELECT MAX(GT11AA.EFFDT)
                    FROM  PS_PAYGROUP_TBL GT11AA
                    WHERE GT11AA.COMPANY  = GT11.COMPANY
                      AND GT11AA.PAYGROUP = GT11.PAYGROUP
                      AND GT11AA.EFFDT   <= $AsOfToday)
  AND GT11.SRC_BANK_ID = SBT1.SRC_BANK_ID

[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_PAY_FORM_TBL
      WHERE FORM_ID = SBT1.FORM_ID_ADVICE)

ORDER BY GT11.PAYGROUP ASC

end-SELECT

   if $RunID > ''
      move ', PS_PAY_CALENDAR PC11A ' to $SelPayCal
      move 'AND PC11A.RUN_ID='        to $SelRunID
      concat ''''                   with $SelRunID
      concat $RunID                 with $SelRunID
      concat ''''                   with $SelRunID
      move ' AND PC11A.COMPANY=GT11A.COMPANY  AND PC11A.PAYGROUP=GT11A.PAYGROUP ' to $RunIDParms
      concat $RunIDParms            with $SelRunID
   else
      move ''                         to $SelPayCal
      move ''                         to $SelRunID
   end-if


begin-SELECT

GT11A.COMPANY
GT11A.PAYGROUP
SBT1A.FORM_ID_ADVICE

  move ''                      to $Company
  move ''                      to $Emplid
  move ''                      to #EMPL_RCD
  move &GT11A.Paygroup         to $Message-Data1
  move &SBT1A.Form_ID_Advice   to $Message-Data2
  move $Pay034_ErrMsg12        to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAYGROUP_TBL GT11A,
      PS_SRC_BANK     SBT1A
[$SelPayCal]

WHERE GT11A.EFFDT = (SELECT MAX(GT11B.EFFDT)
                     FROM PS_PAYGROUP_TBL GT11B
                     WHERE GT11B.COMPANY  = GT11A.COMPANY
                       AND GT11B.PAYGROUP = GT11A.PAYGROUP
                       AND GT11B.EFFDT   <= $AsOfToday)
  AND GT11A.DD_SRC_BANK_ID <> ' '
  AND GT11A.DD_SRC_BANK_ID = SBT1A.SRC_BANK_ID

[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_PAY_FORM_TBL
      WHERE FORM_ID = SBT1A.FORM_ID_ADVICE)

ORDER BY GT11A.PAYGROUP ASC

end-SELECT


!**********************************************************************
! Check for Check Form ID used for paygroup
!**********************************************************************

   if $RunID > ''
      move ', PS_PAY_CALENDAR PC12 ' to $SelPayCal
      move 'AND PC12.RUN_ID='        to $SelRunID
      concat ''''                  with $SelRunID
      concat $RunID                with $SelRunID
      concat ''''                  with $SelRunID
      move ' AND PC12.COMPANY=GT12.COMPANY  AND PC12.PAYGROUP=GT12.PAYGROUP ' to $RunIDParms
      concat $RunIDParms           with $SelRunID
   else
      move ''                        to $SelPayCal
      move ''                        to $SelRunID
   end-if


begin-SELECT

GT12.COMPANY
GT12.PAYGROUP
SBT2.FORM_ID_CHECK

  move ''                     to $Company
  move ''                     to $Emplid
  move ''                     to #EMPL_RCD
  move &GT12.Paygroup         to $Message-Data1
  move &SBT2.Form_ID_Check    to $Message-Data2
  move $Pay034_ErrMsg13       to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAYGROUP_TBL GT12,
      PS_SRC_BANK     SBT2
[$SelPayCal]

WHERE GT12.EFFDT = (SELECT MAX(GT12A.EFFDT)
                    FROM PS_PAYGROUP_TBL GT12A
                    WHERE GT12A.COMPANY  = GT12.COMPANY
                      AND GT12A.PAYGROUP = GT12.PAYGROUP
                      AND GT12A.EFFDT   <= $AsOfToday)
  AND GT12.SRC_BANK_ID = SBT2.SRC_BANK_ID

[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_PAY_FORM_TBL
      WHERE FORM_ID = SBT2.FORM_ID_CHECK)

ORDER BY GT12.PAYGROUP ASC

end-SELECT
end-if


!**********************************************************************
! Earnings Program Table
!**********************************************************************

!**********************************************************************
! Check for invalid Earnings codes in Earnings Program Table
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC13, PS_PAYGROUP_TBL PG13 ' to $SelPayCal
   move 'AND PC13.RUN_ID='                              to $SelRunID
   concat ''''                                        with $SelRunID
   concat $RunID                                      with $SelRunID
   concat ''''                                        with $SelRunID
   move ' AND PC13.COMPANY=PG13.COMPANY  AND PC13.PAYGROUP=PG13.PAYGROUP '    to $RunIDParms1
   move 'AND PG13.EFFDT=(SELECT MAX(PG13A.EFFDT) FROM PS_PAYGROUP_TBL PG13A ' to $RunIDParms2
   move 'WHERE PG13A.COMPANY=PG13.COMPANY AND PG13A.PAYGROUP=PG13.PAYGROUP '  to $RunIDParms3
   move 'AND PG13A.EFFDT <= '                                                 to $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat $AsOfToday                                  with $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat ') '                                        with $RunIDParms4
   move 'AND GT13.ERN_PROGRAM=PG13.ERN_PROGRAM '                              to $RunIDParms5
   concat $RunIDParms1                                with $SelRunID
   concat $RunIDParms2                                with $SelRunID
   concat $RunIDParms3                                with $SelRunID
   concat $RunIDParms4                                with $SelRunID
   concat $RunIDParms5                                with $SelRunID
else
   move ''                                              to $SelPayCal
   move ''                                              to $SelRunID
end-if


begin-SELECT

GT13.ERN_PROGRAM
GT13.ERNCD

  let $ERN_CODE_ERROR = 'Y'
  let $CHECK_ERN_CODE = &GT13.ERNCD

  do Check-Earn-Code

  if $ERN_CODE_ERROR = 'Y'
     move ''                     to $Company
     move ''                     to $Emplid
     move ''                     to #EMPL_RCD
     move &GT13.Ern_Program      to $Message-Data1
     move &GT13.ErnCd            to $Message-Data2
     move $Pay034_ErrMsg14       to $Message
     do Print-Error-Message
     add 1 to #Records
  end-if

FROM  PS_ERN_PROGRAM_DEF GT13
[$SelPayCal]

WHERE GT13.EFFDT = (SELECT MAX(EFFDT)
                    FROM  PS_ERN_PROGRAM_TBL
                    WHERE ERN_PROGRAM = GT13.ERN_PROGRAM
                      AND EFFDT      <= $AsOfToday)
[$SelRunID]

ORDER BY GT13.ERN_PROGRAM ASC, GT13.ERNCD ASC

end-SELECT


!**********************************************************************
! Benefit Program Table
!**********************************************************************

!**********************************************************************
! Check for invalid Deduction codes in Benefit Program Table
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC14, PS_PAYGROUP_TBL PG14 ' to $SelPayCal
   move 'AND PC14.RUN_ID='                              to $SelRunID
   concat ''''                                        with $SelRunID
   concat $RunID                                      with $SelRunID
   concat ''''                                        with $SelRunID
   move ' AND PC14.COMPANY=PG14.COMPANY  AND PC14.PAYGROUP=PG14.PAYGROUP '    to $RunIDParms1
   move 'AND PG14.EFFDT=(SELECT MAX(PG14A.EFFDT) FROM PS_PAYGROUP_TBL PG14A ' to $RunIDParms2
   move 'WHERE PG14A.COMPANY=PG14.COMPANY AND PG14A.PAYGROUP=PG14.PAYGROUP '  to $RunIDParms3
   move 'AND PG14A.EFFDT <= '                                                 to $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat $AsOfToday                                  with $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat ') '                                        with $RunIDParms4
   move 'AND GT14.BENEFIT_PROGRAM=PG14.DFLT_BEN_PROGRAM '                     to $RunIDParms5
   concat $RunIDParms1                                with $SelRunID
   concat $RunIDParms2                                with $SelRunID
   concat $RunIDParms3                                with $SelRunID
   concat $RunIDParms4                                with $SelRunID
   concat $RunIDParms5                                with $SelRunID
else
   move ''                                              to $SelPayCal
   move ''                                              to $SelRunID
end-if


begin-SELECT DISTINCT

GT14.BENEFIT_PROGRAM
GT14.DEDCD

  move ''                     to $Company
  move ''                     to $Emplid
  move ''                     to #EMPL_RCD
  move &GT14.Benefit_Program  to $Message-Data1
  move &GT14.DedCd            to $Message-Data2
  move $Pay034_ErrMsg15       to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_BEN_DEFN_OPTN GT14
[$SelPayCal]

WHERE GT14.OPTION_TYPE NOT IN ('P', 'W')
  AND GT14.PLAN_TYPE NOT LIKE '5%'
  AND GT14.EFFDT = (SELECT MAX(EFFDT)
                    FROM  PS_BEN_DEFN_PGM
                    WHERE BENEFIT_PROGRAM = GT14.BENEFIT_PROGRAM
                      AND EFFDT          <= $AsOfToday)
[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_DEDUCTION_TBL
      WHERE DEDCD = GT14.DEDCD)

ORDER BY GT14.BENEFIT_PROGRAM ASC, GT14.DEDCD ASC

end-SELECT

!**********************************************************************
! Check for invalid Benefit Plans in Benefit Program Table
!**********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC15, PS_PAYGROUP_TBL PG15 ' to $SelPayCal
   move 'AND PC15.RUN_ID='                              to $SelRunID
   concat ''''                                        with $SelRunID
   concat $RunID                                      with $SelRunID
   concat ''''                                        with $SelRunID
   move ' AND PC15.COMPANY=PG15.COMPANY  AND PC15.PAYGROUP=PG15.PAYGROUP '    to $RunIDParms1
   move 'AND PG15.EFFDT=(SELECT MAX(PG15A.EFFDT) FROM PS_PAYGROUP_TBL PG15A ' to $RunIDParms2
   move 'WHERE PG15A.COMPANY=PG15.COMPANY AND PG15A.PAYGROUP=PG15.PAYGROUP '  to $RunIDParms3
   move 'AND PG15A.EFFDT <= '                                                 to $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat $AsOfToday                                  with $RunIDParms4
   concat ''''                                        with $RunIDParms4
   concat ') '                                        with $RunIDParms4
   move 'AND GT15.BENEFIT_PROGRAM=PG15.DFLT_BEN_PROGRAM '                     to $RunIDParms5
   concat $RunIDParms1                                with $SelRunID
   concat $RunIDParms2                                with $SelRunID
   concat $RunIDParms3                                with $SelRunID
   concat $RunIDParms4                                with $SelRunID
   concat $RunIDParms5                                with $SelRunID
else
   move ''                                              to $SelPayCal
   move ''                                              to $SelRunID
end-if


begin-SELECT DISTINCT

GT15.BENEFIT_PROGRAM
GT15.BENEFIT_PLAN

  move ''                      to $Company
  move ''                      to $Emplid
  move ''                      to #EMPL_RCD
  move &GT15.Benefit_Program   to $Message-Data1
  move &GT15.Benefit_Plan      to $Message-Data2
  move $Pay034_ErrMsg16        to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_BEN_DEFN_OPTN GT15
[$SelPayCal]

WHERE GT15.OPTION_TYPE NOT IN ('P', 'W')
  AND GT15.BENEFIT_PLAN <> ' '

  AND GT15.EFFDT = (SELECT MAX(EFFDT)
                    FROM  PS_BEN_DEFN_OPTN
                    WHERE BENEFIT_PROGRAM = GT15.BENEFIT_PROGRAM
                      AND EFFDT          <= $AsOfToday)
[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_BENEF_PLAN_TBL
      WHERE BENEFIT_PLAN = GT15.BENEFIT_PLAN)

ORDER BY GT15.BENEFIT_PROGRAM ASC, GT15.BENEFIT_PLAN ASC

end-SELECT

!*********************************************************************
! Check for Employee level General Deduction/Company inconsistencies
!*********************************************************************
begin-SELECT DISTINCT

GT16.EMPLID
GT16.COMPANY
GT16.DEDCD

  move &GT16.Company         to $Company
  move &GT16.EmplID          to $Emplid
  move ''                    to #Empl_Rcd
  move ''                    to $Message-Data1
  move &GT16.DedCD           to $Message-Data2
  move $Pay034_ErrMsg90      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z1,
      PS_GENL_DEDUCTION  GT16

WHERE GT16.EMPLID = Z1.EMPLID
  AND GT16.EFFDT  = (SELECT MAX(EFFDT)
                     FROM  PS_GENL_DEDUCTION
                     WHERE EMPLID  = GT16.EMPLID
                       AND COMPANY = GT16.COMPANY
                       AND DEDCD   = GT16.DEDCD
                       AND EFFDT  <= $AsOfToday)

  AND GT16.DEDUCTION_END_DT IS NULL

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_GDED_COM_DEF GD16
                  WHERE GD16.COMPANY = GT16.COMPANY
                    AND GD16.DEDCD   = GT16.DEDCD
                    AND GD16.EFFDT   = (SELECT MAX(GD16A.EFFDT)
                                        FROM  PS_GDED_COM_DEF GD16A
                                        WHERE GD16A.COMPANY = GD16.COMPANY
                                          AND GD16A.DEDCD   = GD16.DEDCD
                                          AND GD16A.EFFDT  <= $AsOfToday))
ORDER BY GT16.EMPLID ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! Personal Data Edits
!*********************************************************************

begin-procedure Check-Personal-Data
  display 'Checking Personal Data . . . '

!*********************************************************************
! CHECK FOR EMPLOYEES WITHOUT PERSON ROWS
!*********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PAYC, PS_PAYGROUP_TBL PAYG ' to $SelPayCal
   move 'AND PAYC.RUN_ID='                              to $SelRunID
   concat ''''                                        with $SelRunID
   concat $RunID                                      with $SelRunID
   concat ''''                                        with $SelRunID
   move ' AND PAYC.COMPANY=JB1.COMPANY  AND PAYC.PAYGROUP=JB1.PAYGROUP '      to $RunIDParms1
   move 'AND PAYG.COMPANY=PAYC.COMPANY  AND PAYG.PAYGROUP=PAYC.PAYGROUP '     to $RunIDParms2
   move 'AND PAYG.EFFDT=(SELECT MAX(PAYGA.EFFDT) FROM PS_PAYGROUP_TBL PAYGA ' to $RunIDParms3
   move 'WHERE PAYGA.COMPANY=PAYG.COMPANY AND PAYGA.PAYGROUP=PAYG.PAYGROUP '  to $RunIDParms4
   move 'AND PAYGA.EFFDT <= '                                                 to $RunIDParms5
   concat ''''                                        with $RunIDParms5
   concat $AsOfToday                                  with $RunIDParms5
   concat ''''                                        with $RunIDParms5
   concat ') '                                        with $RunIDParms5
   concat $RunIDParms1                                with $SelRunID
   concat $RunIDParms2                                with $SelRunID
   concat $RunIDParms3                                with $SelRunID
   concat $RunIDParms4                                with $SelRunID
   concat $RunIDParms5                                with $SelRunID
else
   move ''                                              to $SelPayCal
   move ''                                              to $SelRunID
end-if


begin-SELECT

JB1.COMPANY
JB1.EMPLID

  move &JB1.Company       to $Company
  move &JB1.EmplID        to $Emplid
  move ''                 to #Empl_Rcd
  move ''                 to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg17   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_JOB JB1
[$SelPayCal]

WHERE JB1.EMPL_STATUS <> 'T'
  AND JB1.EFFDT  = (SELECT MAX (JB2.EFFDT)
                    FROM PS_JOB JB2
                    WHERE JB2.EMPLID   = JB1.EMPLID
                      AND JB2.EMPL_RCD = JB1.EMPL_RCD
                      AND JB2.EFFDT   <= $AsOfDate)
  AND JB1.EFFSEQ = (SELECT MAX(JB3.EFFSEQ)
                    FROM PS_JOB JB3
                    WHERE JB3.EMPLID   = JB1.EMPLID
                      AND JB3.EMPL_RCD = JB1.EMPL_RCD
                      AND JB3.EFFDT    = JB1.EFFDT)
[$SelRunID]

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_PERSON
      WHERE EMPLID = JB1.EMPLID)

ORDER BY JB1.COMPANY ASC, JB1.EMPLID ASC

end-SELECT

!*********************************************************************
! CHECK SEX CODE
!*********************************************************************

begin-SELECT

PD2.EMPLID
PD2.SEX

  move ''                 to $Company
  move &PD2.EmplID        to $Emplid
  move ''                 to #EMPL_RCD
  move &PD2.Sex           to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg18   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034       Z2,
      PS_PERS_DATA_MAX  PD2

WHERE PD2.EMPLID = Z2.EMPLID
  AND PD2.SEX NOT IN
     (SELECT (X2.FIELDVALUE)
      FROM PSXLATITEM X2
      WHERE X2.FIELDNAME  = 'SEX'
        AND X2.EFF_STATUS = 'A'
        AND X2.EFFDT =
           (SELECT MAX(XM.EFFDT)
            FROM PSXLATITEM XM
            WHERE XM.FIELDNAME  = X2.FIELDNAME
              AND XM.FIELDVALUE = X2.FIELDVALUE
              AND XM.EFFDT     <= $AsOfToday))

ORDER BY PD2.EMPLID ASC

end-SELECT

!*********************************************************************
! CHECK BIRTH DATE (IF ENTERED)
!*********************************************************************

begin-SELECT

PD3.EMPLID
PD3.BIRTHDATE

  move ''                 to $Company
  move &PD3.EmplID        to $Emplid
  move ''                 to #EMPL_RCD
  move &PD3.BirthDate     to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg19   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z3,
      PS_PERSON    PD3

WHERE PD3.EMPLID = Z3.EMPLID
  AND PD3.BIRTHDATE IS NOT NULL
  AND (PD3.BIRTHDATE > $AsOfToday
       OR PD3.BIRTHDATE < $BeginDt)

ORDER BY PD3.EMPLID ASC

end-SELECT

!*********************************************************************
! CHECK IF BIRTH DATE IS NULL (BIRTH DATE SHOULD BE ENTERED)
!*********************************************************************

begin-SELECT

PD4.EMPLID

  move ''                 to $Company
  move &PD4.EmplID        to $Emplid
  move ''                 to #EMPL_RCD
  move ''                 to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg20   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z4,
      PS_PERSON    PD4

WHERE PD4.EMPLID = Z4.EMPLID
  AND PD4.BIRTHDATE IS NULL

ORDER BY PD4.EMPLID ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure

!*********************************************************************
! Employment Data  Edits
!*********************************************************************

begin-procedure Check-Employment
  display 'Checking Employment . . . '

!*********************************************************************
! FIND EMPLOYEES WITHOUT EMPLOYMENT ROWS
!*********************************************************************

begin-SELECT

E1.EMPLID
E1.EMPL_RCD

  move ''                 to $Company
  move &E1.EmplID         to $Emplid
  move &E1.EMPL_RCD       to #EMPL_RCD
  move ''                 to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg21   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034 E1

WHERE NOT EXISTS
     (SELECT 'X'
      FROM  PS_EMPLOYMENT
      WHERE EMPLID   = E1.EMPLID
        AND EMPL_RCD = E1.EMPL_RCD)

ORDER BY E1.EMPLID ASC, E1.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK SERVICE DATE
!*********************************************************************

begin-SELECT

E2.EMPLID
E2.EMPL_RCD
E2.SERVICE_DT

  move ''                 to $Company
  move &E2.EmplID         to $Emplid
  move &E2.EMPL_RCD       to #EMPL_RCD
  move &E2.Service_Dt     to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg22   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034    Z5,
      PS_EMPLOYMENT  E2

WHERE E2.EMPLID   = Z5.EMPLID
  AND E2.EMPL_RCD = Z5.EMPL_RCD
  AND E2.SERVICE_DT IS NOT NULL
  AND (E2.SERVICE_DT > $AsOfToday
       OR E2.SERVICE_DT < $BeginDt)

ORDER BY E2.EMPLID ASC, E2.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK SERVICE DATE FOR NULL (SERVICE DATE SHOULD BE ENTERED)
!*********************************************************************

begin-SELECT

E3.EMPLID
E3.EMPL_RCD

  move ''                 to $Company
  move &E3.EmplID         to $Emplid
  move &E3.EMPL_RCD       to #EMPL_RCD
  move ''                 to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg23   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034    Z5,
      PS_EMPLOYMENT  E3

WHERE E3.EMPLID   = Z5.EMPLID
  AND E3.EMPL_RCD = Z5.EMPL_RCD
  AND E3.SERVICE_DT IS NULL

ORDER BY E3.EMPLID ASC, E3.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK PAYROLL DEDUCTION TAKEN STATUS
!*********************************************************************

begin-SELECT

E4.EMPLID
E4.EMPL_RCD
E4.DED_TAKEN

  move ''                 to $Company
  move &E4.EmplID         to $Emplid
  move &E4.EMPL_RCD       to #EMPL_RCD
  move ''                 to $Message-Data1
  move &E4.Ded_Taken      to $Message-Data2
  move $Pay034_ErrMsg24   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z7,
      PS_DED_NA    E4

WHERE E4.EMPLID   = Z7.EMPLID
  AND E4.EMPL_RCD = Z7.EMPL_RCD

  AND E4.DED_TAKEN NOT IN
     (SELECT (X4.FIELDVALUE)
      FROM PSXLATITEM X4
      WHERE X4.FIELDNAME  = 'DED_TAKEN'
        AND X4.EFF_STATUS = 'A'
        AND X4.EFFDT =
           (SELECT MAX(XM.EFFDT)
            FROM PSXLATITEM XM
            WHERE XM.FIELDNAME  = X4.FIELDNAME
              AND XM.FIELDVALUE = X4.FIELDVALUE
              AND XM.EFFDT     <= $AsOfToday))

ORDER BY E4.EMPLID ASC, E4.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! Report all employees with Payroll Deduction Taken Status set to none
!*********************************************************************

begin-SELECT

E5.EMPLID
E5.EMPL_RCD
E5.DED_TAKEN

  move ''                 to $Company
  move &E5.EmplID         to $Emplid
  move &E5.EMPL_RCD       to #EMPL_RCD
  move ''                 to $Message-Data1
  move &E5.Ded_Taken      to $Message-Data2
  move $Pay034_ErrMsg25   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z8,
      PS_DED_NA    E5

WHERE E5.EMPLID    = Z8.EMPLID
  AND E5.EMPL_RCD  = Z8.EMPL_RCD
  AND E5.DED_TAKEN = 'N'

ORDER BY E5.EMPLID ASC, E5.EMPL_RCD ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! Job Data Edits
!*********************************************************************

begin-procedure Check-Job
  display 'Checking Job Records . . . '

!*********************************************************************
! FIND EMPLOYEES WITHOUT A VALID/ACTIVE DEPARTMENT CODE
!*********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC17, PS_PAYGROUP_TBL PG17 '                    to $SelPayCal
   move ' AND PG17.COMPANY=J1.COMPANY  AND PG17.PAYGROUP=J1.PAYGROUP '     to $SelRunID
   move ' AND PC17.COMPANY=PG17.COMPANY  AND PC17.PAYGROUP=PG17.PAYGROUP ' to $RunIDParms1
   move ' AND PC17.RUN_ID='                                                to $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunID                         with $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunIDParms1                   with $SelRunID
   concat $RunIDParms2                   with $SelRunID
   move ' AND EFFDT <= PC17.PAY_END_DT))) '                                to $SelEffDt
else
   move ''                                 to $SelPayCal
   move ''                                 to $SelRunID
   move ''                                 to $EffDtParms
   move ' AND EFFDT <= '                   to $SelEffDt
   concat ''''                           with $EffDtParms
   concat $AsOfToday                     with $EffDtParms
   concat ''''                           with $EffDtParms
   concat '))) '                         with $EffDtParms
   concat $EffDtParms                    with $SelEffDt
end-if


begin-SELECT

J1.COMPANY
J1.EMPLID
J1.EMPL_RCD
J1.DEPTID
J1.SETID_DEPT

  move &J1.Company        to $Company
  move &J1.EmplID         to $Emplid
  move &J1.EMPL_RCD       to #EMPL_RCD
  move &J1.DeptID         to $Message-Data1
  move &J1.SETID_DEPT     to $Message-Data2
  move $Pay034_ErrMsg26   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z9,
      PS_JOB       J1
[$SelPayCal]

WHERE J1.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J1.EMPLID      = Z9.EMPLID
  AND J1.EMPL_RCD    = Z9.EMPL_RCD
  AND J1.EFFDT       = Z9.EFFDT
  AND J1.EFFSEQ      = (SELECT MAX(EFFSEQ)
                        FROM  PS_JOB
                        WHERE EMPLID   = J1.EMPLID
                          AND EMPL_RCD = J1.EMPL_RCD
                          AND EFFDT    = J1.EFFDT)
[$SelRunID]

  AND (NOT EXISTS (SELECT 'X'
                   FROM  PS_DEPT_TBL
                   WHERE DEPTID = J1.DEPTID
                     AND SETID  = J1.SETID_DEPT
                     AND EFFDT <= J1.EFFDT)

        OR EXISTS (SELECT 'Y'
                   FROM  PS_DEPT_TBL
                   WHERE DEPTID     = J1.DEPTID
                     AND SETID      = J1.SETID_DEPT
                     AND EFF_STATUS = 'I'
                     AND EFFDT      = (SELECT MAX(EFFDT)
                                       FROM  PS_DEPT_TBL
                                       WHERE DEPTID = J1.DEPTID
                                         AND SETID  = J1.SETID_DEPT
[$SelEffDt]

ORDER BY J1.COMPANY ASC, J1.EMPLID ASC, J1.EMPL_RCD ASC, J1.DEPTID ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEES WITHOUT A VALID/ACTIVE JOB CODE
!*********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC18, PS_PAYGROUP_TBL PG18 '                    to $SelPayCal
   move ' AND PG18.COMPANY=J2.COMPANY  AND PG18.PAYGROUP=J2.PAYGROUP '     to $SelRunID
   move ' AND PC18.COMPANY=PG18.COMPANY  AND PC18.PAYGROUP=PG18.PAYGROUP ' to $RunIDParms1
   move ' AND PC18.RUN_ID='                                                to $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunID                         with $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunIDParms1                   with $SelRunID
   concat $RunIDParms2                   with $SelRunID
   move ' AND EFFDT <= PC18.PAY_END_DT))) '                                to $SelEffDt
else
   move ''                                 to $SelPayCal
   move ''                                 to $SelRunID
   move ''                                 to $EffDtParms
   move ' AND EFFDT <= '                   to $SelEffDt
   concat ''''                           with $EffDtParms
   concat $AsOfToday                     with $EffDtParms
   concat ''''                           with $EffDtParms
   concat '))) '                         with $EffDtParms
   concat $EffDtParms                    with $SelEffDt
end-if


begin-SELECT

J2.COMPANY
J2.EMPLID
J2.EMPL_RCD
J2.JOBCODE
J2.SETID_JOBCODE

  move &J2.Company         to $Company
  move &J2.EmplID          to $Emplid
  move &J2.EMPL_RCD        to #EMPL_RCD
  move &J2.JobCode         to $Message-Data1
  move &J2.SETID_JOBCODE   to $Message-Data2
  move $Pay034_ErrMsg27    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z10,
      PS_JOB       J2
[$SelPayCal]

WHERE J2.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J2.EMPLID      = Z10.EMPLID
  AND J2.EMPL_RCD    = Z10.EMPL_RCD
  AND J2.EFFDT       = Z10.EFFDT
  AND J2.EFFSEQ      = (SELECT MAX(EFFSEQ)
                        FROM  PS_JOB
                        WHERE EMPLID   = J2.EMPLID
                          AND EMPL_RCD = J2.EMPL_RCD
                          AND EFFDT    = J2.EFFDT)
[$SelRunID]

  AND (NOT EXISTS (SELECT 'X'
                   FROM  PS_JOBCODE_TBL
                   WHERE SETID   = J2.SETID_JOBCODE
                     AND JOBCODE = J2.JOBCODE
                     AND EFFDT  <= J2.EFFDT)

        OR EXISTS (SELECT 'Y'
                   FROM  PS_JOBCODE_TBL
                   WHERE SETID      = J2.SETID_JOBCODE
                     AND JOBCODE    = J2.JOBCODE
                     AND EFF_STATUS = 'I'
                     AND EFFDT      = (SELECT MAX(EFFDT)
                                       FROM  PS_JOBCODE_TBL
                                       WHERE SETID   = J2.SETID_JOBCODE
                                         AND JOBCODE = J2.JOBCODE
[$SelEffDt]

ORDER BY J2.COMPANY ASC, J2.EMPLID ASC, J2.EMPL_RCD ASC, J2.JOBCODE ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEES WITHOUT A VALID/ACTIVE PAY GROUP CODE
!*********************************************************************

begin-SELECT

J3.COMPANY
J3.EMPLID
J3.EMPL_RCD
J3.PAYGROUP

  move &J3.Company        to $Company
  move &J3.EmplID         to $Emplid
  move &J3.EMPL_RCD       to #EMPL_RCD
  move &J3.Paygroup       to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg28   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z11,
      PS_JOB       J3

WHERE J3.EMPLID   = Z11.EMPLID
  AND J3.EMPL_RCD = Z11.EMPL_RCD
  AND J3.EFFDT    = Z11.EFFDT
  AND J3.EMPL_STATUS <> 'T'
  AND J3.EFFSEQ   = (SELECT MAX(EFFSEQ)
                     FROM    PS_JOB
                     WHERE   EMPLID      = J3.EMPLID
                       AND   EMPL_RCD    = J3.EMPL_RCD
                       AND   EFFDT       = J3.EFFDT)
  AND (NOT EXISTS (SELECT 'X'
                   FROM  PS_PAYGROUP_TBL
                   WHERE COMPANY  = J3.COMPANY
                     AND PAYGROUP = J3.PAYGROUP
                     AND EFFDT   <= J3.EFFDT)

        OR EXISTS (SELECT 'Y'
                   FROM PS_PAYGROUP_TBL
                   WHERE COMPANY    = J3.COMPANY
                     AND PAYGROUP   = J3.PAYGROUP
                     AND EFF_STATUS = 'I'
                     AND EFFDT      = (SELECT MAX(EFFDT)
                                       FROM PS_PAYGROUP_TBL
                                       WHERE COMPANY   = J3.COMPANY
                                         AND PAYGROUP  = J3.PAYGROUP
                                         AND EFFDT    <= $AsOfToday)))

ORDER BY J3.COMPANY ASC, J3.EMPLID ASC, J3.EMPL_RCD ASC, J3.PAYGROUP ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEES WITHOUT VALID PAY GROUP EMPLOYEE TYPE
!*********************************************************************

begin-SELECT

J4.COMPANY
J4.EMPLID
J4.EMPL_RCD
J4.EMPL_TYPE
J4.PAYGROUP

  move &J4.Company        to $Company
  move &J4.EmplID         to $Emplid
  move &J4.EMPL_RCD       to #EMPL_RCD
  move &J4.Empl_Type      to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg29   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z12,
      PS_JOB       J4

WHERE J4.EMPLID   = Z12.EMPLID
  AND J4.EMPL_RCD = Z12.EMPL_RCD
  AND J4.EFFDT    = Z12.EFFDT
  AND J4.EMPL_STATUS <> 'T'
  AND J4.EFFSEQ   = (SELECT MAX(EFFSEQ)
                     FROM    PS_JOB
                     WHERE   EMPLID      = J4.EMPLID
                       AND   EMPL_RCD    = J4.EMPL_RCD
                       AND   EFFDT       = J4.EFFDT)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_PAYGRP_EMPLTYPE
      WHERE COMPANY   = J4.COMPANY
        AND PAYGROUP  = J4.PAYGROUP
        AND EMPL_TYPE = J4.EMPL_TYPE
        AND EFFDT    <= J4.EFFDT)

ORDER BY J4.COMPANY ASC, J4.PAYGROUP ASC, J4.EMPLID ASC,
         J4.EMPL_RCD ASC, J4.EMPL_TYPE ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEES WITHOUT A VALID/ACTIVE COMPANY CODE
!*********************************************************************

begin-SELECT

J5.COMPANY
J5.EMPLID
J5.EMPL_RCD
J5.PAYGROUP

  move &J5.Company        to $Company
  move &J5.EmplID         to $Emplid
  move &J5.EMPL_RCD       to #EMPL_RCD
  move &J5.Company        to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg30   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z13,
      PS_JOB       J5

WHERE J5.EMPLID   = Z13.EMPLID
  AND J5.EMPL_RCD = Z13.EMPL_RCD
  AND J5.EFFDT    = Z13.EFFDT
  AND J5.EMPL_STATUS <> 'T'
  AND J5.EFFSEQ   = (SELECT MAX(EFFSEQ)
                     FROM    PS_JOB
                     WHERE   EMPLID      = J5.EMPLID
                       AND   EMPL_RCD    = J5.EMPL_RCD
                       AND   EFFDT       = J5.EFFDT)

AND (NOT EXISTS (SELECT 'X'
                 FROM  PS_COMPANY_TBL
                 WHERE COMPANY  = J5.COMPANY
                   AND EFFDT   <= J5.EFFDT)

      OR EXISTS (SELECT 'Y'
                 FROM PS_COMPANY_TBL
                 WHERE COMPANY    = J5.COMPANY
                   AND EFF_STATUS = 'I'
                   AND EFFDT      = (SELECT MAX(EFFDT)
                                     FROM PS_COMPANY_TBL
                                     WHERE COMPANY  = J5.COMPANY
                                       AND EFFDT   <= $AsOfToday)))

ORDER BY J5.EMPLID ASC, J5.EMPL_RCD ASC, J5.COMPANY ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEES WITHOUT A VALID/ACTIVE LOCATION CODE
!*********************************************************************
if $RunID > ''
   move ', PS_PAY_CALENDAR PC19, PS_PAYGROUP_TBL PG19 '                    to $SelPayCal
   move ' AND PG19.COMPANY=J6.COMPANY  AND PG19.PAYGROUP=J6.PAYGROUP '     to $SelRunID
   move ' AND PC19.COMPANY=PG19.COMPANY  AND PC19.PAYGROUP=PG19.PAYGROUP ' to $RunIDParms1
   move ' AND PC19.RUN_ID='                                                to $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunID                         with $RunIDParms2
   concat ''''                           with $RunIDParms2
   concat $RunIDParms1                   with $SelRunID
   concat $RunIDParms2                   with $SelRunID
   move ' AND EFFDT <= PC19.PAY_END_DT))) '                                to $SelEffDt
else
   move ''                                 to $SelPayCal
   move ''                                 to $SelRunID
   move ''                                 to $EffDtParms
   move ' AND EFFDT <= '                   to $SelEffDt
   concat ''''                           with $EffDtParms
   concat $AsOfToday                     with $EffDtParms
   concat ''''                           with $EffDtParms
   concat '))) '                         with $EffDtParms
   concat $EffDtParms                    with $SelEffDt
end-if


begin-SELECT

J6.COMPANY
J6.EMPLID
J6.EMPL_RCD
J6.LOCATION

  move &J6.Company        to $Company
  move &J6.EmplID         to $Emplid
  move &J6.EMPL_RCD       to #EMPL_RCD
  move &J6.Location       to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg31   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z14,
      PS_JOB       J6
[$SelPayCal]

WHERE J6.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J6.EMPLID      = Z14.EMPLID
  AND J6.EMPL_RCD    = Z14.EMPL_RCD
  AND J6.EFFDT       = Z14.EFFDT
  AND J6.EMPL_STATUS <> 'T'
  AND J6.EFFSEQ      = (SELECT MAX(EFFSEQ)
                        FROM  PS_JOB
                        WHERE EMPLID   = J6.EMPLID
                          AND EMPL_RCD = J6.EMPL_RCD
                          AND EFFDT    = J6.EFFDT)
[$SelRunID]

  AND (NOT EXISTS (SELECT 'X'
                   FROM  PS_SET_CNTRL_REC J6B, PS_LOCATION_TBL J6C
                   WHERE J6B.SETCNTRLVALUE = J6.BUSINESS_UNIT
                     AND J6B.RECNAME       = 'LOCATION_TBL'
                     AND J6C.SETID         = J6B.SETID
                     AND J6C.LOCATION      = J6.LOCATION
                     AND J6C.EFFDT        <= J6.EFFDT)

        OR EXISTS (SELECT 'Y'
                   FROM  PS_SET_CNTRL_REC J6B, PS_LOCATION_TBL J6C
                   WHERE J6B.SETCNTRLVALUE = J6.BUSINESS_UNIT
                     AND J6B.RECNAME       = 'LOCATION_TBL'
                     AND J6C.SETID         = J6B.SETID
                     AND J6C.LOCATION      = J6.LOCATION
                     AND J6C.EFF_STATUS    = 'I'
                     AND J6C.EFFDT         = (SELECT MAX(EFFDT)
                                              FROM  PS_LOCATION_TBL
                                              WHERE SETID    = J6C.SETID
                                                AND LOCATION = J6C.LOCATION
[$SelEffDt]

ORDER BY J6.EMPLID ASC, J6.EMPL_RCD ASC, J6.LOCATION ASC
end-SELECT


!*********************************************************************
! FIND EMPLOYEES WITHOUT TAX DISTRIBUTION RECORDS
!*********************************************************************

begin-SELECT

J6A.COMPANY
J6A.EMPLID
J6A.EMPL_RCD

  move &J6A.Company       to $Company
  move &J6A.EmplID        to $Emplid
  move &J6A.EMPL_RCD      to #EMPL_RCD
  move ''                 to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg32   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z15,
      PS_JOB       J6A

WHERE J6A.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J6A.EMPLID      = Z15.EMPLID
  AND J6A.EMPL_RCD    = Z15.EMPL_RCD
  AND J6A.EFFDT       = Z15.EFFDT
  AND J6A.EMPL_STATUS <> 'T'
  AND J6A.EFFSEQ      = (SELECT MAX(EFFSEQ)
                         FROM  PS_JOB
                         WHERE EMPLID   = J6A.EMPLID
                           AND EMPL_RCD = J6A.EMPL_RCD
                           AND EFFDT    = J6A.EFFDT)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_TAX_DISTRIB
      WHERE EMPLID   = J6A.EMPLID
        AND EMPL_RCD = J6A.EMPL_RCD
        AND EFFDT   <= J6A.EFFDT)

ORDER BY J6A.EMPLID ASC, J6A.EMPL_RCD ASC

end-SELECT


!*********************************************************************
! CHECK EMPLOYEE TYPE
!*********************************************************************

begin-SELECT

J7.COMPANY
J7.EMPLID
J7.EMPL_RCD
J7.EMPL_TYPE

  move &J7.Company       to $Company
  move &J7.EmplID        to $Emplid
  move &J7.EMPL_RCD      to #EMPL_RCD
  move &J7.Empl_Type     to $Message-Data1
  move ''                to $Message-Data2
  move $Pay034_ErrMsg33  to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z17,
      PS_JOB       J7

WHERE J7.EMPLID   = Z17.EMPLID
  AND J7.EMPL_RCD = Z17.EMPL_RCD
  AND J7.EFFDT    = Z17.EFFDT
  AND J7.EMPL_STATUS <> 'T'

  AND J7.EMPL_TYPE NOT IN
     (SELECT (X7.FIELDVALUE)
      FROM PSXLATITEM X7
      WHERE X7.FIELDNAME  = 'EMPL_TYPE'
        AND X7.EFF_STATUS = 'A'
        AND X7.EFFDT =
           (SELECT MAX(XM.EFFDT)
            FROM PSXLATITEM XM
            WHERE XM.FIELDNAME  = X7.FIELDNAME
              AND XM.FIELDVALUE = X7.FIELDVALUE
              AND XM.EFFDT     <= $AsOfToday))

ORDER BY J7.COMPANY ASC, J7.EMPLID ASC, J7.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK EMPLOYEE STATUS
!*********************************************************************

begin-SELECT

J8.COMPANY
J8.EMPLID
J8.EMPL_RCD
J8.EMPL_STATUS

  move &J8.Company        to $Company
  move &J8.EmplID         to $Emplid
  move &J8.EMPL_RCD       to #EMPL_RCD
  move &J8.Empl_Status    to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg34   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z18,
      PS_JOB       J8

WHERE J8.EMPLID   = Z18.EMPLID
  AND J8.EMPL_RCD = Z18.EMPL_RCD
  AND J8.EFFDT    = Z18.EFFDT

  AND J8.EMPL_STATUS NOT IN
     (SELECT (X8.FIELDVALUE)
      FROM PSXLATITEM X8
      WHERE X8.FIELDNAME  = 'EMPL_STATUS'
        AND X8.EFF_STATUS = 'A'
        AND X8.EFFDT =
           (SELECT MAX(XM.EFFDT)
            FROM PSXLATITEM XM
            WHERE XM.FIELDNAME  = X8.FIELDNAME
              AND XM.FIELDVALUE = X8.FIELDVALUE
              AND XM.EFFDT     <= $AsOfToday))

ORDER BY J8.COMPANY ASC, J8.EMPLID ASC, J8.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK STANDARD HOURS
!*********************************************************************

begin-SELECT

J9.COMPANY
J9.EMPLID
J9.EMPL_RCD

  move &J9.Company       to $Company
  move &J9.EmplID        to $Emplid
  move &J9.EMPL_RCD      to #EMPL_RCD
  move ''                to $Message-Data1
  move ''                to $Message-Data2
  move $Pay034_ErrMsg35  to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z19,
      PS_JOB       J9

WHERE J9.EMPLID   = Z19.EMPLID
  AND J9.EMPL_RCD = Z19.EMPL_RCD
  AND J9.EFFDT    = Z19.EFFDT
  AND J9.EMPL_STATUS <> 'T'
  AND J9.EFFSEQ   = (SELECT MAX(EFFSEQ)
                     FROM  PS_JOB
                     WHERE EMPLID   = J9.EMPLID
                       AND EMPL_RCD = J9.EMPL_RCD
                       AND EFFDT    = J9.EFFDT)

  AND J9.STD_HOURS < 1

ORDER BY J9.COMPANY ASC, J9.EMPLID ASC, J9.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK COMP FREQUENCY
!*********************************************************************

begin-SELECT

J10.COMPANY
J10.EMPLID
J10.EMPL_RCD
F.FREQUENCY_TYPE

  move &J10.Company          to $Company
  move &J10.EmplID           to $Emplid
  move &J10.EMPL_RCD         to #EMPL_RCD
  move &F.Frequency_Type     to $Message-Data1
  move ''                    to $Message-Data2
  move $Pay034_ErrMsg36      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM   PS_R_PAY034  Z20,
       PS_JOB       J10,
       PS_FREQUENCY_TBL F

WHERE J10.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J10.EMPLID = Z20.EMPLID
  AND J10.EFFDT  = Z20.EFFDT
  AND J10.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM    PS_JOB
                   WHERE   EMPLID   = J10.EMPLID
                     AND   EMPL_RCD = J10.EMPL_RCD
                     AND   EFFDT    = J10.EFFDT)
  AND J10.COMP_FREQUENCY = F.FREQUENCY_ID

  AND F.EFF_STATUS       = 'A'
  AND F.EFFDT            =
     (SELECT MAX(F1.EFFDT)
      FROM PS_FREQUENCY_TBL F1
      WHERE F1.FREQUENCY_ID = F.FREQUENCY_ID
        AND F1.EFF_STATUS   = F.EFF_STATUS
        AND F1.EFFDT       <= $AsOfToday)

  AND F.FREQUENCY_TYPE NOT IN
     (SELECT (X10.FIELDVALUE)
      FROM PSXLATITEM X10
      WHERE X10.FIELDNAME  = 'FREQUENCY_TYPE'
        AND X10.EFF_STATUS = 'A'
        AND X10.EFFDT =
           (SELECT MAX(XM.EFFDT)
            FROM PSXLATITEM XM
            WHERE XM.FIELDNAME  = X10.FIELDNAME
              AND XM.FIELDVALUE = X10.FIELDVALUE
              AND XM.EFFDT     <= $AsOfToday))

ORDER BY J10.COMPANY ASC, J10.EMPLID ASC, J10.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK COMP RATE
!*********************************************************************

begin-SELECT

J11.COMPANY
J11.EMPLID
J11.EMPL_RCD
J11.COMPRATE

  move &J11.Company        to $Company
  move &J11.EmplID         to $Emplid
  move &J11.EMPL_RCD       to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg37    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034  Z21,
      PS_JOB       J11

WHERE J11.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND J11.EMPLID   = Z21.EMPLID
  AND J11.EMPL_RCD = Z21.EMPL_RCD
  AND J11.EFFDT    = Z21.EFFDT
  AND J11.EFFSEQ   = (SELECT MAX(EFFSEQ)
                      FROM  PS_JOB
                      WHERE EMPLID   = J11.EMPLID
                        AND EMPL_RCD = J11.EMPL_RCD
                        AND EFFDT    = J11.EFFDT)
  AND J11.COMPRATE < 1

ORDER BY J11.COMPANY ASC, J11.EMPLID ASC, J11.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK FOR EMPLOYEE TABLE INCONSISTENCIES
! FIND EMPLOYEES WITHOUT JOB HIRE ROWS
!*********************************************************************

! begin-SELECT
!
! J12.Company
! J12.EmplID
! J12.EMPL_RCD
!
!   move &J12.Company        to $Company
!   move &J12.EmplID         to $Emplid
!   move &J12.EMPL_RCD      to #EMPL_RCD
!   move ''                  to $Message-Data1
!   move ''                  to $Message-Data2
!   move 'Hire Record is missing' to $Message
!   do Print-Error-Message
!   add 1 to #Records
!
! FROM  PS_R_PAY034 Z22
!      ,PS_JOB J12
!WHERE  J12.EMPLID = Z22.EMPLID
!  AND  J12.EMPL_RCD = Z22.EMPL_RCD
!  AND  J12.EMPL_STATUS <> 'T'
!  AND  J12.EFFDT =
!   (SELECT MIN(JM12.EFFDT)
!    FROM  PS_JOB JM12
!    WHERE JM12.EMPLID   = J12.EMPLID
!      AND JM12.EMPL_RCD = J12.EMPL_RCD
!      AND JM12.EFFDT    = J12.EFFDT
!      AND JM12.EFFSEQ   = J12.EFFSEQ
!      AND JM12.ACTION    <> 'HIR' )
! ORDER BY J12.EMPLID
!
! end-SELECT

!*********************************************************************
! Multi-Job Data Edits
!*********************************************************************

!*********************************************************************
! CHECK FOR VALID EMPLOYEE TABLE SEQUENCES
!    THIS SCRIPT IS NOT FOR CUSTOMERS THAT ARE USING MULTIPLE JOBS
!*********************************************************************

! begin-SELECT

! J13.Company
! J13.EMPLID
! J13.EMPL_RCD
! E13.EMPL_RCD
! E13.BENEFIT_RCD_NBR
!
!   move &J13.Company        to $Company
!   move &J13.EmplID         to $Emplid
!   move &J13.EMPL_RCD      to #EMPL_RCD
!   move &E13.EMPL_RCD      to $Message-Data1
!   move &E13.BENEFIT_RCD_NBR   to $Message-Data2
!   move 'Empl Record Number is not zero' to $Message
!   do Print-Error-Message
!   add 1 to #Records
!
! FROM  PS_R_PAY034 Z23
!      ,PS_JOB J13
!      ,PS_EMPLOYMENT E13
! WHERE J13.EMPLID = Z23.EMPLID
!   AND J13.EMPL_RCD = Z23.EMPL_RCD
!   AND J13.EFFDT    = Z23.EFFDT
!   AND J13.EMPL_STATUS <> 'T'
!   AND J13.EFFSEQ =
!     (SELECT MAX(EFFSEQ)
!     FROM PS_JOB
!     WHERE EMPLID     = J13.EMPLID
!       AND EMPL_RCD   = J13.EMPL_RCD
!       AND EFFDT      = J13.EFFDT)
!   AND J13.EMPL_RCD <> 0
!   AND J13.EMPLID = E13.EMPLID
!    OR E13.EMPL_RCD <> 0
!    OR E13.BENEFIT_RCD_NBR <> 0
! ORDER BY J13.COMPANY, J13.EMPLID, J13.EMPL_RCD,
!          E13.EMPL_RCD, E13.BENEFIT_RCD_NBR
! ORDER BY J13.Company, J13.EMPLID, J13.EMPL_RCD,
!          E13.EMPL_RCD, E13.BENEFIT_RCD_NBR
!
! end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! US Tax Data Edits
!*********************************************************************

begin-procedure Check-US-Taxes
  display 'Checking US Tax Records . . . '

!*********************************************************************
! Find employees with Fed tax data WITHOUT matching State tax data
!*********************************************************************

begin-SELECT

FT1.COMPANY
FT1.EMPLID
FT1.EFFDT

  move &FT1.Company        to $Company
  move &FT1.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg38    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z24,
      PS_FED_TAX_DATA  FT1

WHERE FT1.EMPLID = Z24.EMPLID

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_STATE_TAX_DATA
      WHERE EMPLID  = FT1.EMPLID
        AND COMPANY = FT1.COMPANY
        AND EFFDT   = FT1.EFFDT)

ORDER BY FT1.EMPLID ASC, FT1.COMPANY ASC, FT1.EFFDT ASC

end-SELECT

!*********************************************************************
! Find employees with State Tax data WITHOUT MATCHING Federal tax data
!*********************************************************************

begin-SELECT

FT2.COMPANY
FT2.EMPLID
FT2.STATE
FT2.EFFDT

  move &FT2.Company        to $Company
  move &FT2.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg39    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z25,
      PS_STATE_TAX_DATA  FT2

WHERE FT2.EMPLID = Z25.EMPLID

AND NOT EXISTS
   (SELECT 'X'
    FROM  PS_FED_TAX_DATA
    WHERE EMPLID  = FT2.EMPLID
      AND COMPANY = FT2.COMPANY
      AND EFFDT   = FT2.EFFDT)

ORDER BY FT2.EMPLID ASC, FT2.COMPANY ASC, FT2.EFFDT ASC, FT2.STATE ASC

end-SELECT

!*********************************************************************
! find employees with state not on company tax table
!*********************************************************************

begin-SELECT

FT3.COMPANY
FT3.EMPLID
FT3.STATE
FT3.EFFDT

  move &FT3.Company        to $Company
  move &FT3.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move &FT3.State          to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg40    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z26,
      PS_STATE_TAX_DATA  FT3

WHERE FT3.EMPLID = Z26.EMPLID

AND NOT EXISTS
   (SELECT 'X'
    FROM  PS_CO_STATETAX_TBL
    WHERE COMPANY = FT3.COMPANY
      AND STATE   = FT3.STATE
      AND EFFDT  <= FT3.EFFDT)

ORDER BY FT3.EMPLID ASC, FT3.COMPANY ASC, FT3.EFFDT ASC, FT3.STATE ASC

end-SELECT

!*********************************************************************
! find employees with local tax data without matching state tax data
!*********************************************************************

begin-SELECT

FT4.COMPANY
FT4.EMPLID
FT4.STATE
FT4.LOCALITY

  move &FT4.Company        to $Company
  move &FT4.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move &FT4.State          to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg41    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z27,
      PS_LOCAL_TAX_DATA  FT4

WHERE FT4.EMPLID = Z27.EMPLID

  AND FT4.EFFDT  = (SELECT MAX(EFFDT)
                    FROM PS_LOCAL_TAX_DATA
                    WHERE EMPLID   = FT4.EMPLID
                      AND COMPANY  = FT4.COMPANY
                      AND STATE    = FT4.STATE
                      AND LOCALITY = FT4.LOCALITY
                      AND EFFDT   <= $AsOfToday)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_STATE_TAX_DATA
      WHERE EMPLID  = FT4.EMPLID
        AND COMPANY = FT4.COMPANY
        AND STATE   = FT4.STATE
        AND EFFDT   = FT4.EFFDT)

ORDER BY FT4.EMPLID ASC, FT4.COMPANY ASC, FT4.STATE ASC,
         FT4.LOCALITY ASC

end-SELECT

!*********************************************************************
! find local resident rows without matching state resident row
!*********************************************************************

begin-SELECT

FT5.COMPANY
FT5.EMPLID
FT5.STATE
FT5.LOCALITY
FT5.EFFDT

  move &FT5.Company        to $Company
  move &FT5.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move &FT5.State          to $Message-Data1
  move &FT5.Locality       to $Message-Data2
  move $Pay034_ErrMsg42    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z28,
      PS_LOCAL_TAX_DATA  FT5

WHERE FT5.EMPLID = Z28.EMPLID
  AND FT5.EFFDT  = (SELECT MAX(EFFDT)
                    FROM PS_LOCAL_TAX_DATA
                    WHERE EMPLID   = FT5.EMPLID
                      AND COMPANY  = FT5.COMPANY
                      AND STATE    = FT5.STATE
                      AND LOCALITY = FT5.LOCALITY
                      AND EFFDT   <= $AsOfToday)

  AND FT5.RESIDENT = 'Y'

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_STATE_TAX_DATA
      WHERE EMPLID   = FT5.EMPLID
        AND COMPANY  = FT5.COMPANY
        AND STATE    = FT5.STATE
        AND EFFDT    = FT5.EFFDT
        AND RESIDENT = 'Y')

ORDER BY FT5.EMPLID ASC, FT5.COMPANY ASC, FT5.EFFDT ASC, FT5.STATE ASC,
         FT5.LOCALITY ASC

end-SELECT

!*********************************************************************
! FIND EMPLOYEE LOCAL TAX DATA WITHOUT VALID COMPANY TAX TABLE
!*********************************************************************

begin-SELECT

FT6.COMPANY
FT6.EMPLID
FT6.STATE
FT6.LOCALITY

  move &FT6.Company        to $Company
  move &FT6.EmplID         to $Emplid
  move ''                  to #EMPL_RCD
  move &FT6.State          to $Message-Data1
  move &FT6.Locality       to $Message-Data2
  move $Pay034_ErrMsg43    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z29,
      PS_LOCAL_TAX_DATA  FT6

WHERE FT6.EMPLID = Z29.EMPLID
  AND FT6.EFFDT  = (SELECT MAX(EFFDT)
                    FROM  PS_LOCAL_TAX_DATA
                    WHERE EMPLID   = FT6.EMPLID
                      AND COMPANY  = FT6.COMPANY
                      AND STATE    = FT6.STATE
                      AND LOCALITY = FT6.LOCALITY
                      AND EFFDT   <= $AsOfToday)

AND NOT EXISTS
   (SELECT 'X'
    FROM  PS_CO_LOCALTAX_TBL
    WHERE COMPANY  = FT6.COMPANY
      AND STATE    = FT6.STATE
      AND LOCALITY = FT6.LOCALITY
      AND EFFDT   <= FT6.EFFDT)

ORDER BY FT6.EMPLID ASC, FT6.COMPANY ASC, FT6.STATE ASC,
         FT6.LOCALITY ASC

end-SELECT

!*********************************************************************
! find employees without US Fed Tax Data
!*********************************************************************

begin-SELECT

FT7.COMPANY
FT7.PAYGROUP
FT7.EMPLID
FT7.EMPL_RCD

  move &FT7.Company        to $Company
  move &FT7.EmplID         to $Emplid
  move &FT7.EMPL_RCD       to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg44    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z30,
      PS_JOB           FT7,
      PS_PAYGROUP_TBL  C7

WHERE FT7.EMPL_STATUS IN ('A', 'P', 'Q', 'U')
  AND FT7.EMPLID   = Z30.EMPLID
  AND FT7.EMPL_RCD = Z30.EMPL_RCD
  AND FT7.EFFDT    = Z30.EFFDT
  AND FT7.EFFSEQ   = (SELECT MAX(EFFSEQ)
                      FROM  PS_JOB
                      WHERE EMPLID   = FT7.EMPLID
                        AND EMPL_RCD = FT7.EMPL_RCD
                        AND EFFDT    = FT7.EFFDT)

  AND C7.COMPANY   = FT7.COMPANY
  AND C7.PAYGROUP  = FT7.PAYGROUP
  AND C7.COUNTRY   = 'USA'
  AND C7.EFFDT     = (SELECT MAX(EFFDT)
                      FROM  PS_PAYGROUP_TBL
                      WHERE COMPANY  = C7.COMPANY
                        AND PAYGROUP = C7.PAYGROUP
                        AND EFFDT   <= $AsOfToday)
  AND C7.EFF_STATUS = 'A'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_FED_TAX_DATA
                  WHERE EMPLID  = FT7.EMPLID
                    AND COMPANY = FT7.COMPANY
                    AND EFFDT  <= $AsOfToday)

ORDER BY FT7.COMPANY ASC, FT7.EMPLID ASC, FT7.EMPL_RCD ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! Canadian Tax Data Edits
!*********************************************************************

begin-procedure Check-Can-Taxes
  display 'Checking Canadian Tax Records . . . '

!*********************************************************************
! FIND EMPLOYEES WITHOUT Canadian Tax Data
!*********************************************************************

begin-SELECT

CT1.COMPANY
CT1.PAYGROUP
CT1.EMPLID
CT1.EMPL_RCD

  move &CT1.Company        to $Company
  move &CT1.EmplID         to $Emplid
  move &CT1.EMPL_RCD       to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg45    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z31,
      PS_JOB           CT1,
      PS_PAYGROUP_TBL  C1

WHERE CT1.EMPLID   = Z31.EMPLID
  AND CT1.EMPL_RCD = Z31.EMPL_RCD
  AND CT1.EFFDT    = Z31.EFFDT
  AND CT1.EFFSEQ   = (SELECT MAX(EFFSEQ)
                      FROM  PS_JOB
                      WHERE EMPLID   = CT1.EMPLID
                        AND EMPL_RCD = CT1.EMPL_RCD
                        AND EFFDT    = CT1.EFFDT)

  AND C1.COMPANY   = CT1.COMPANY
  AND C1.PAYGROUP  = CT1.PAYGROUP
  AND C1.COUNTRY   = 'CAN'
  AND C1.EFFDT     = (SELECT MAX(EFFDT)
                      FROM  PS_PAYGROUP_TBL
                      WHERE COMPANY  = C1.COMPANY
                        AND PAYGROUP = C1.PAYGROUP
                        AND EFFDT   <= $AsOfToday)
  AND C1.EFF_STATUS = 'A'

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_CAN_TAX_DATA
      WHERE EMPLID  = CT1.EMPLID
        AND COMPANY = CT1.COMPANY
        AND EFFDT   <= $AsOfToday)

ORDER BY CT1.COMPANY ASC, CT1.EMPLID ASC, CT1.EMPL_RCD ASC

end-SELECT


!*********************************************************************
! FIND EMPLOYEES WITH CAN Tax Data but without Wage Loss Plan.       *
!*********************************************************************

begin-SELECT

CT2.COMPANY
CT2.EMPLID
CT2.EMPL_RCD

  move &CT2.Company                     to $Company
  move &CT2.EmplID                      to $Emplid
  move &CT2.EMPL_RCD                    to #EMPL_RCD
  move ''                               to $Message-Data1
  move ''                               to $Message-Data2
  move 'CAN Wage Loss Plan is missing'  to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z32,
      PS_JOB           CT2,
      PS_CAN_TAX_DATA  CTX1,
      PS_COMPANY_TBL   C2

WHERE CT2.EMPLID   = Z32.EMPLID
  AND CT2.EMPL_RCD = Z32.EMPL_RCD
  AND CT2.EFFDT    = Z32.EFFDT

  AND CT2.EFFSEQ   = (SELECT MAX(EFFSEQ)
                      FROM  PS_JOB
                      WHERE EMPLID   = CT2.EMPLID
                        AND COMPANY  = CT2.COMPANY
                        AND EMPL_RCD = CT2.EMPL_RCD
                        AND EFFDT    = CT2.EFFDT)

  AND C2.COMPANY   = CT2.COMPANY
  AND C2.COUNTRY   = 'CAN'
  AND CTX1.EMPLID  = CT2.EMPLID
  AND CTX1.COMPANY = CT2.COMPANY
  AND CTX1.EFFDT   = (SELECT MAX(CTX2.EFFDT)
                      FROM  PS_CAN_TAX_DATA CTX2
                      WHERE CTX2.EMPLID  = CTX1.EMPLID
                        AND CTX2.COMPANY = CTX1.COMPANY
                        AND CTX2.EFFDT  <= $AsOfToday)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_EMPL_WAGELS_CAN
      WHERE EMPLID   = CT2.EMPLID
        AND EMPL_RCD = CT2.EMPL_RCD
        AND COMPANY  = CT2.COMPANY
        AND EFFDT    = CTX1.EFFDT)

ORDER BY CT2.COMPANY ASC, CT2.EMPLID ASC, CT2.EMPL_RCD ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! Deduction Edits
!*********************************************************************

begin-procedure Check-Deductions
  display 'Checking Deduction Records . . . '

!*********************************************************************
! EMPLOYEE BENEFIT PROGRAM PARTICIPATION TABLE
! CHECK FOR EMPLOYEE LEVEL BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

!*********************************************************************
! CHECK FOR EMPLOYEES WITHOUT BEN_PROG_PARTIC ROWS
!*********************************************************************

begin-SELECT

D1.COMPANY
D1.EMPLID
D1.EMPL_RCD

  move &D1.Company         to $Company
  move &D1.EmplID          to $Emplid
  move &D1.EMPL_RCD        to #EMPL_RCD
  move ''                  to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg46    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z33,
      PS_JOB           D1,
      PS_PER_ORG_ASGN  POA

WHERE D1.EMPLID    = Z33.EMPLID
  AND D1.EMPL_RCD  = Z33.EMPL_RCD
  AND D1.EFFDT     = Z33.EFFDT
  AND POA.EMPLID   = D1.EMPLID
  AND POA.EMPL_RCD = D1.EMPL_RCD

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_BEN_PROG_PARTIC
      WHERE EMPLID   = POA.EMPLID
        AND EMPL_RCD = POA.BENEFIT_RCD_NBR)

ORDER BY D1.COMPANY ASC, D1.EMPLID ASC, D1.EMPL_RCD ASC

end-SELECT

!*********************************************************************
! CHECK FOR HEALTH BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D2.EMPLID
D2.EMPL_RCD
D2.BENEFIT_PROGRAM
HB2.PLAN_TYPE
HB2.BENEFIT_PLAN

  move ' '                   to $Company
  move &D2.EmplID            to $Emplid
  move &D2.EMPL_RCD          to #EMPL_RCD
  move &D2.Benefit_Program   to $Message-Data1
  move &HB2.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg47      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z34,
      PS_BEN_PROG_PARTIC  D2,
      PS_HEALTH_BENEFIT   HB2

WHERE D2.EMPLID   = Z34.EMPLID
  AND D2.EMPL_RCD = Z34.EMPL_RCD
  AND D2.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D2.EMPLID
                       AND C.EMPL_RCD       = D2.EMPL_RCD
                       AND C.COBRA_EVENT_ID = D2.COBRA_EVENT_ID
                       AND C.EFFDT         <= $AsOfToday)

  AND HB2.EMPLID         = D2.EMPLID
  AND HB2.EMPL_RCD       = D2.EMPL_RCD
  AND HB2.COBRA_EVENT_ID = D2.COBRA_EVENT_ID
  AND HB2.EFFDT          = (SELECT MAX(D.EFFDT)
                            FROM PS_HEALTH_BENEFIT D
                            WHERE D.EMPLID         = HB2.EMPLID
                              AND D.EMPL_RCD       = HB2.EMPL_RCD
                              AND D.COBRA_EVENT_ID = HB2.COBRA_EVENT_ID
                              AND D.PLAN_TYPE      = HB2.PLAN_TYPE
                              AND D.BENEFIT_NBR    = HB2.BENEFIT_NBR
                              AND D.EFFDT         <= $AsOfToday)
  AND HB2.DEDUCTION_END_DT IS NULL
  AND HB2.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X' FROM PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D2.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = HB2.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = HB2.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D2.EMPLID ASC, HB2.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECK FOR LIFE/ADD BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D3.EMPLID
D3.EMPL_RCD
D3.BENEFIT_PROGRAM
LB3.PLAN_TYPE
LB3.BENEFIT_PLAN

  move ' '                   to $Company
  move &D3.EmplID            to $Emplid
  move &D3.EMPL_RCD          to #EMPL_RCD
  move &D3.Benefit_Program   to $Message-Data1
  move &LB3.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg48      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z35,
      PS_BEN_PROG_PARTIC  D3,
      PS_LIFE_ADD_BEN     LB3

WHERE D3.EMPLID   = Z35.EMPLID
  AND D3.EMPL_RCD = Z35.EMPL_RCD
  AND D3.EMPLID   = LB3.EMPLID
  AND D3.EMPL_RCD = LB3.EMPL_RCD

  AND D3.EFFDT  = (SELECT MAX(C.EFFDT)
                   FROM PS_BEN_PROG_PARTIC C
                   WHERE C.EMPLID         = D3.EMPLID
                     AND C.EMPL_RCD       = D3.EMPL_RCD
                     AND C.EFFDT         <= $AsOfToday)

  AND LB3.EFFDT = (SELECT MAX(D.EFFDT)
                    FROM PS_LIFE_ADD_BEN D
                    WHERE D.EMPLID      = LB3.EMPLID
                      AND D.EMPL_RCD    = LB3.EMPL_RCD
                      AND D.PLAN_TYPE   = LB3.PLAN_TYPE
                      AND D.BENEFIT_NBR = LB3.BENEFIT_NBR
                      AND D.EFFDT      <= $AsOfToday)
  AND LB3.DEDUCTION_END_DT IS NULL
  AND LB3.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D3.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = LB3.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = LB3.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D3.EMPLID ASC, LB3.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR DISABILITY BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D4.EMPLID
D4.EMPL_RCD
D4.BENEFIT_PROGRAM
DB4.PLAN_TYPE
DB4.BENEFIT_PLAN

  move ' '                   to $Company
  move &D4.EmplID            to $Emplid
  move &D4.EMPL_RCD          to #EMPL_RCD
  move &D4.Benefit_Program   to $Message-Data1
  move &DB4.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg49      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z36,
      PS_BEN_PROG_PARTIC  D4,
      PS_DISABILITY_BEN   DB4

WHERE D4.EMPLID   = Z36.EMPLID
  AND D4.EMPL_RCD = Z36.EMPL_RCD
  AND D4.EMPLID   = DB4.EMPLID
  AND D4.EMPL_RCD = DB4.EMPL_RCD

  AND D4.EFFDT  = (SELECT MAX(C.EFFDT)
                   FROM  PS_BEN_PROG_PARTIC C
                   WHERE C.EMPLID         = D4.EMPLID
                     AND C.EMPL_RCD       = D4.EMPL_RCD
                     AND C.EFFDT         <= $AsOfToday)

  AND DB4.EFFDT = (SELECT MAX(D.EFFDT)
                   FROM  PS_DISABILITY_BEN D
                   WHERE D.EMPLID      = DB4.EMPLID
                     AND D.EMPL_RCD    = DB4.EMPL_RCD
                     AND D.PLAN_TYPE   = DB4.PLAN_TYPE
                     AND D.BENEFIT_NBR = DB4.BENEFIT_NBR
                     AND D.EFFDT      <= $AsOfToday)
  AND DB4.DEDUCTION_END_DT IS NULL
  AND DB4.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D4.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = DB4.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = DB4.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D4.EMPLID ASC, DB4.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR SAVINGS PLAN BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D5.EMPLID
D5.EMPL_RCD
D5.BENEFIT_PROGRAM
S5.PLAN_TYPE
S5.BENEFIT_PLAN

  move ' '                   to $Company
  move &D5.EmplID            to $Emplid
  move &D5.EMPL_RCD          to #EMPL_RCD
  move &D5.Benefit_Program   to $Message-Data1
  move &S5.Benefit_Plan      to $Message-Data2
  move $Pay034_ErrMsg50      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z37,
      PS_BEN_PROG_PARTIC  D5,
      PS_SAVINGS_PLAN     S5

WHERE D5.EMPLID   = Z37.EMPLID
  AND D5.EMPL_RCD = Z37.EMPL_RCD
  AND D5.EMPLID   = S5.EMPLID
  AND D5.EMPL_RCD = S5.EMPL_RCD

  AND D5.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM  PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D5.EMPLID
                       AND C.EMPL_RCD       = D5.EMPL_RCD
                       AND C.EFFDT         <= $AsOfToday)

  AND S5.EFFDT    = (SELECT MAX(D.EFFDT)
                     FROM  PS_SAVINGS_PLAN D
                     WHERE D.EMPLID      = S5.EMPLID
                       AND D.EMPL_RCD    = S5.EMPL_RCD
                       AND D.PLAN_TYPE   = S5.PLAN_TYPE
                       AND D.BENEFIT_NBR = S5.BENEFIT_NBR
                       AND D.EFFDT      <= $AsOfToday)
  AND S5.DEDUCTION_END_DT IS NULL
  AND S5.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D5.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = S5.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = S5.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D5.EMPLID ASC, S5.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR LEAVE PLAN BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D6.EMPLID
D6.EMPL_RCD
D6.BENEFIT_PROGRAM
LP6.PLAN_TYPE
LP6.BENEFIT_PLAN

  move ' '                   to $Company
  move &D6.EmplID            to $Emplid
  move &D6.EMPL_RCD          to #EMPL_RCD
  move &D6.Benefit_Program   to $Message-Data1
  move &LP6.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg51      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z38,
      PS_BEN_PROG_PARTIC  D6,
      PS_LEAVE_PLAN       LP6

WHERE D6.EMPLID   = Z38.EMPLID
  AND D6.EMPL_RCD = Z38.EMPL_RCD
  AND D6.EMPLID   = LP6.EMPLID
  AND D6.EMPL_RCD = LP6.EMPL_RCD

  AND D6.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM  PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D6.EMPLID
                       AND C.EMPL_RCD       = D6.EMPL_RCD
                       AND C.EFFDT         <= $AsOfToday)

  AND LP6.EFFDT   = (SELECT MAX(D.EFFDT)
                     FROM  PS_LEAVE_PLAN D
                     WHERE D.EMPLID      = LP6.EMPLID
                       AND D.EMPL_RCD    = LP6.EMPL_RCD
                       AND D.PLAN_TYPE   = LP6.PLAN_TYPE
                       AND D.BENEFIT_NBR = LP6.BENEFIT_NBR
                       AND D.EFFDT      <= $AsOfToday)
  AND LP6.DEDUCTION_END_DT IS NULL
  AND LP6.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D6.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = LP6.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = LP6.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D6.EMPLID ASC, LP6.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR RETIREMENT PLAN BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D7.EMPLID
D7.EMPL_RCD
D7.BENEFIT_PROGRAM
R7.PLAN_TYPE
R7.BENEFIT_PLAN

  move ' '                   to $Company
  move &D7.EmplID            to $Emplid
  move &D7.EMPL_RCD          to #EMPL_RCD
  move &D7.Benefit_Program   to $Message-Data1
  move &R7.Benefit_Plan      to $Message-Data2
  move $Pay034_ErrMsg52      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z39,
      PS_BEN_PROG_PARTIC  D7,
      PS_RTRMNT_PLAN      R7

WHERE D7.EMPLID   = Z39.EMPLID
  AND D7.EMPL_RCD = Z39.EMPL_RCD
  AND D7.EMPLID   = R7.EMPLID
  AND D7.EMPL_RCD = R7.EMPL_RCD

  AND D7.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM  PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D7.EMPLID
                       AND C.EMPL_RCD       = D7.EMPL_RCD
                       AND C.EFFDT         <= $AsOfToday)

  AND R7.EFFDT    = (SELECT MAX(D.EFFDT)
                     FROM  PS_RTRMNT_PLAN D
                     WHERE D.EMPLID      = R7.EMPLID
                       AND D.EMPL_RCD    = R7.EMPL_RCD
                       AND D.PLAN_TYPE   = R7.PLAN_TYPE
                       AND D.BENEFIT_NBR = R7.BENEFIT_NBR
                       AND D.EFFDT      <= $AsOfToday)
  AND R7.DEDUCTION_END_DT IS NULL
  AND R7.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D7.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = R7.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = R7.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D7.EMPLID ASC, R7.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR PENSION PLAN BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D8.EMPLID
D8.EMPL_RCD
D8.BENEFIT_PROGRAM
PB8.PLAN_TYPE
PB8.BENEFIT_PLAN

  move ' '                   to $Company
  move &D8.EmplID            to $Emplid
  move &D8.EMPL_RCD          to #EMPL_RCD
  move &D8.Benefit_Program   to $Message-Data1
  move &PB8.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg53      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z40,
      PS_BEN_PROG_PARTIC  D8,
      PS_PENSION_PLAN     PB8

WHERE D8.EMPLID   = Z40.EMPLID
  AND D8.EMPL_RCD = Z40.EMPL_RCD
  AND D8.EMPLID   = PB8.EMPLID
  AND D8.EMPL_RCD = PB8.EMPL_RCD

  AND D8.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM  PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D8.EMPLID
                       AND C.EMPL_RCD       = D8.EMPL_RCD
                       AND C.EFFDT         <= $AsOfToday)

  AND PB8.EFFDT   = (SELECT MAX(D.EFFDT)
                     FROM  PS_PENSION_PLAN D
                     WHERE D.EMPLID      = PB8.EMPLID
                       AND D.EMPL_RCD    = PB8.EMPL_RCD
                       AND D.PLAN_TYPE   = PB8.PLAN_TYPE
                       AND D.BENEFIT_NBR = PB8.BENEFIT_NBR
                       AND D.EFFDT      <= $AsOfToday)
  AND PB8.DEDUCTION_END_DT IS NULL
  AND PB8.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D8.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = PB8.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = PB8.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM  PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D8.EMPLID ASC, PB8.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR Vacation buy/sell BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D9.EMPLID
D9.EMPL_RCD
D9.BENEFIT_PROGRAM
VB9.PLAN_TYPE
VB9.BENEFIT_PLAN

  move ' '                   to $Company
  move &D9.EmplID            to $Emplid
  move &D9.EMPL_RCD          to #EMPL_RCD
  move &D9.Benefit_Program   to $Message-Data1
  move &VB9.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg54      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z41,
      PS_BEN_PROG_PARTIC  D9,
      PS_VACATION_BEN     VB9

WHERE D9.EMPLID   = Z41.EMPLID
  AND D9.EMPL_RCD = Z41.EMPL_RCD
  AND D9.EMPLID   = VB9.EMPLID
  AND D9.EMPL_RCD = VB9.EMPL_RCD

  AND D9.EFFDT    = (SELECT MAX(C.EFFDT)
                     FROM  PS_BEN_PROG_PARTIC C
                     WHERE C.EMPLID         = D9.EMPLID
                       AND C.EMPL_RCD       = D9.EMPL_RCD
                       AND C.EFFDT         <= $AsOfToday)

  AND VB9.EFFDT   = (SELECT MAX(D.EFFDT)
                     FROM  PS_VACATION_BEN D
                     WHERE D.EMPLID      = VB9.EMPLID
                       AND D.EMPL_RCD    = VB9.EMPL_RCD
                       AND D.PLAN_TYPE   = VB9.PLAN_TYPE
                       AND D.BENEFIT_NBR = VB9.BENEFIT_NBR
                       AND D.EFFDT      <= $AsOfToday)
  AND VB9.DEDUCTION_END_DT IS NULL
  AND VB9.COVERAGE_ELECT = 'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D9.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = VB9.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = VB9.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM PS_BEN_DEFN_OPTN F
                                             WHERE F.BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                                               AND F.PLAN_TYPE       = E.PLAN_TYPE
                                               AND F.OPTION_ID       = E.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D9.EMPLID ASC, VB9.PLAN_TYPE ASC

end-SELECT

!*********************************************************************
! CHECKING FOR FSA BENEFIT PROGRAM/PLAN INCONSISTENCIES
!*********************************************************************

begin-SELECT

D10.EMPLID
D10.EMPL_RCD
D10.BENEFIT_PROGRAM
FS10.PLAN_TYPE
FS10.BENEFIT_PLAN

  move ' '                    to $Company
  move &D10.EmplID            to $Emplid
  move &D10.EMPL_RCD          to #EMPL_RCD
  move &D10.Benefit_Program   to $Message-Data1
  move &FS10.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg55       to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z42,
      PS_BEN_PROG_PARTIC  D10,
      PS_FSA_BENEFIT      FS10

WHERE D10.EMPLID   = Z42.EMPLID
  AND D10.EMPL_RCD = Z42.EMPL_RCD
  AND D10.EFFDT    = (SELECT MAX(C.EFFDT)
                      FROM  PS_BEN_PROG_PARTIC C
                      WHERE C.EMPLID         = D10.EMPLID
                        AND C.EMPL_RCD       = D10.EMPL_RCD
                        AND C.COBRA_EVENT_ID = D10.COBRA_EVENT_ID
                        AND C.EFFDT         <= $AsOfToday)

  AND FS10.EMPLID         = D10.EMPLID
  AND FS10.EMPL_RCD       = D10.EMPL_RCD
  AND FS10.COBRA_EVENT_ID = D10.COBRA_EVENT_ID
  AND FS10.EFFDT   = (SELECT MAX(D.EFFDT)
                      FROM  PS_FSA_BENEFIT D
                      WHERE D.EMPLID         = FS10.EMPLID
                        AND D.EMPL_RCD       = FS10.EMPL_RCD
                        AND D.COBRA_EVENT_ID = FS10.COBRA_EVENT_ID
                        AND D.PLAN_TYPE      = FS10.PLAN_TYPE
                        AND D.BENEFIT_NBR    = FS10.BENEFIT_NBR
                        AND D.EFFDT         <= $AsOfToday)
  AND FS10.DEDUCTION_END_DT IS NULL
  AND FS10.COVERAGE_ELECT =  'E'

  AND NOT EXISTS (SELECT 'X'
                  FROM  PS_BEN_DEFN_OPTN E
                  WHERE E.BENEFIT_PROGRAM = D10.BENEFIT_PROGRAM
                    AND E.PLAN_TYPE       = FS10.PLAN_TYPE
                    AND E.BENEFIT_PLAN    = FS10.BENEFIT_PLAN
                    AND E.OPTION_TYPE NOT IN ('P', 'W')
                    AND E.EFFDT           = (SELECT MAX(F.EFFDT)
                                             FROM PS_BEN_DEFN_OPTN F
                                             WHERE E.BENEFIT_PROGRAM = F.BENEFIT_PROGRAM
                                               AND E.PLAN_TYPE       = F.PLAN_TYPE
                                               AND E.OPTION_ID       = F.OPTION_ID
                                               AND F.EFFDT          <= $AsOfToday))

ORDER BY D10.EMPLID ASC, FS10.PLAN_TYPE ASC

end-SELECT


!*********************************************************************
! EMPLOYEE GENERAL DEDUCTION TABLE
!*********************************************************************
! CHECK FOR EMPLOYEE LEVEL GENERAL DEDUCTION INCONSISTENCIES
!*********************************************************************

!*********************************************************************
! LOOK FOR GENERAL DEDUCTION DETAIL WITHOUT HEADER
!*********************************************************************

begin-SELECT

D11.EMPLID
D11.COMPANY
D11.DEDCD

  move &D11.Company         to $Company
  move &D11.EmplID          to $Emplid
  move ''                   to #EMPL_RCD
  move &D11.DedCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg57     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z43,
      PS_GENL_DEDUCTION  D11

WHERE D11.EMPLID = Z43.EMPLID

  AND D11.EFFDT  = (SELECT MAX(EFFDT)
                    FROM  PS_GENL_DEDUCTION
                    WHERE EMPLID  = D11.EMPLID
                      AND COMPANY = D11.COMPANY
                      AND DEDCD   = D11.DEDCD)
  AND D11.DEDUCTION_END_DT IS NULL

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_GENL_DED_CD
      WHERE EMPLID = D11.EMPLID
        AND DEDCD  = D11.DEDCD)

ORDER BY D11.EMPLID ASC, D11.DEDCD ASC

end-SELECT

!*********************************************************************
! LOOK FOR GENERAL DEDUCTION HEADERS WITHOUT DETAIL
!*********************************************************************

begin-SELECT

D12.EMPLID
D12.COMPANY
D12.DEDCD

  move &D12.Company         to $Company
  move &D12.EmplID          to $Emplid
  move ''                   to #EMPL_RCD
  move &D12.DedCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg56     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z44,
      PS_GENL_DED_CD      D12,
      PS_GENL_DEDUCTION   D12A

WHERE D12.EMPLID  = Z44.EMPLID
  AND D12.EMPLID  = D12A.EMPLID
  AND D12.COMPANY = D12A.COMPANY
  AND D12A.DEDUCTION_END_DT IS NULL

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_GENL_DEDUCTION
      WHERE EMPLID = D12.EMPLID
        AND DEDCD  = D12.DEDCD)

ORDER BY D12.EMPLID ASC, D12.DEDCD ASC

end-SELECT

!*********************************************************************
! EMPLOYEES WITHOUT VALID GENERAL DEDUCTION CODES
!*********************************************************************

begin-SELECT DISTINCT

D13.EMPLID
D13.COMPANY
D13.DEDCD

  move &D13.Company         to $Company
  move &D13.EmplID          to $Emplid
  move ''                   to #EMPL_RCD
  move &D13.DedCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg58     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z45,
      PS_GENL_DEDUCTION  D13,
      PS_JOB             DJ13,
      PS_COMPANY_TBL     CT13

WHERE D13.EMPLID    = Z45.EMPLID
  AND D13.DEDUCTION_END_DT IS NULL
  AND DJ13.EMPL_RCD = Z45.EMPL_RCD
  AND DJ13.EMPLID   = D13.EMPLID
  AND DJ13.COMPANY  = D13.COMPANY

  AND DJ13.EFFDT    = (SELECT MAX(EFFDT)
                       FROM  PS_JOB
                       WHERE EMPLID  = D13.EMPLID
                         AND COMPANY = D13.COMPANY)

  AND DJ13.EFFSEQ   = (SELECT MAX(EFFSEQ)
                       FROM  PS_JOB
                       WHERE EMPLID   = DJ13.EMPLID
                         AND EMPL_RCD = DJ13.EMPL_RCD
                         AND EFFDT    = DJ13.EFFDT)

  AND CT13.COMPANY  = DJ13.COMPANY
  AND CT13.EFFDT    = (SELECT MAX(EFFDT)
                       FROM  PS_COMPANY_TBL
                       WHERE COMPANY = DJ13.COMPANY
                       AND EFFDT    <= $AsOfToday)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_GENL_DED_TBL
      WHERE DEDCD = D13.DEDCD)

ORDER BY D13.EMPLID ASC, D13.DEDCD ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure

!*********************************************************************
! Additional Pay Tax Data Edits
!*********************************************************************

begin-procedure Check-Addl-Pay
  display 'Checking Additional Pay Records . . . '

!*********************************************************************
! EMPLOYEE ADDITIONAL PAY TABLE
!*********************************************************************

!*********************************************************************
! Look for detail records without Effdt record
!*********************************************************************

begin-SELECT

AP1.EMPLID
AP1.EMPL_RCD
AP1.ERNCD

  move ''                  to $Company
  move &AP1.EmplID         to $Emplid
  move &AP1.EMPL_RCD       to #EMPL_RCD
  move &AP1.ErnCd          to $Message-Data1
  move ''                  to $Message-Data2
  move $Pay034_ErrMsg59    to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034       Z46,
      PS_ADDL_PAY_DATA  AP1

WHERE AP1.EMPLID   = Z46.EMPLID
  AND AP1.EMPL_RCD = Z46.EMPL_RCD
  AND AP1.EFFDT    = (SELECT MAX(EFFDT)
                      FROM  PS_ADDL_PAY_DATA X
                      WHERE X.EMPLID   = AP1.EMPLID
                        AND X.EMPL_RCD = AP1.EMPL_RCD
                        AND X.ERNCD    = AP1.ERNCD
                        AND X.ADDL_SEQ = AP1.ADDL_SEQ)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_EFFDT
      WHERE EMPLID   = AP1.EMPLID
        AND EMPL_RCD = AP1.EMPL_RCD
        AND ERNCD    = AP1.ERNCD)

ORDER BY AP1.EMPLID ASC, AP1.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for detail records without ErnCd record
!*********************************************************************

begin-SELECT

AP2.EMPLID
AP2.EMPL_RCD
AP2.ERNCD

  move ''                   to $Company
  move &AP2.EmplID          to $Emplid
  move &AP2.EMPL_RCD        to #EMPL_RCD
  move &AP2.ErnCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg60     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034       Z47,
      PS_ADDL_PAY_DATA  AP2

WHERE AP2.EMPLID   = Z47.EMPLID
  AND AP2.EMPL_RCD = Z47.EMPL_RCD
  AND AP2.EFFDT    = (SELECT MAX(EFFDT)
                      FROM PS_ADDL_PAY_DATA X
                      WHERE X.EMPLID = AP2.EMPLID
                        AND X.EMPL_RCD = AP2.EMPL_RCD
                        AND X.ERNCD  = AP2.ERNCD
                        AND X.ADDL_SEQ = AP2.ADDL_SEQ)

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_ERNCD
      WHERE EMPLID   = AP2.EMPLID
        AND EMPL_RCD = AP2.EMPL_RCD
        AND ERNCD    = AP2.ERNCD)

ORDER BY AP2.EMPLID ASC, AP2.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for ErnCd records without EffDt record
!*********************************************************************

begin-SELECT

AP3.EMPLID
AP3.EMPL_RCD
AP3.ERNCD

  move ''                   to $Company
  move &AP3.EmplID          to $Emplid
  move &AP3.EMPL_RCD        to #EMPL_RCD
  move &AP3.ErnCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg61     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z48,
      PS_ADDL_PAY_ERNCD  AP3

WHERE AP3.EMPLID   = Z48.EMPLID
  AND AP3.EMPL_RCD = Z48.EMPL_RCD

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_EFFDT
      WHERE EMPLID   = AP3.EMPLID
        AND EMPL_RCD = AP3.EMPL_RCD
        AND ERNCD    = AP3.ERNCD)

ORDER BY AP3.EMPLID ASC, AP3.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for ErnCd records without Detail record
!*********************************************************************

begin-SELECT

AP4.EMPLID
AP4.EMPL_RCD
AP4.ERNCD

  move ''                   to $Company
  move &AP4.EmplID          to $Emplid
  move &AP4.EMPL_RCD        to #EMPL_RCD
  move &AP4.ErnCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg62     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z49,
      PS_ADDL_PAY_ERNCD  AP4

WHERE AP4.EMPLID   = Z49.EMPLID
  AND AP4.EMPL_RCD = Z49.EMPL_RCD

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_DATA
      WHERE EMPLID   = AP4.EMPLID
        AND EMPL_RCD = AP4.EMPL_RCD
        AND ERNCD    = AP4.ERNCD)

ORDER BY AP4.EMPLID ASC, AP4.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for EffDt records without ErnCd record
!*********************************************************************

begin-SELECT

AP5.EMPLID
AP5.EMPL_RCD
AP5.ERNCD

  move ''                   to $Company
  move &AP5.EmplID          to $Emplid
  move &AP5.EMPL_RCD        to #EMPL_RCD
  move &AP5.ErnCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg63     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z50,
      PS_ADDL_PAY_EFFDT  AP5

WHERE AP5.EMPLID   = Z50.EMPLID
  AND AP5.EMPL_RCD = Z50.EMPL_RCD

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_ERNCD
      WHERE EMPLID   = AP5.EMPLID
        AND EMPL_RCD = AP5.EMPL_RCD
        AND ERNCD    = AP5.ERNCD)

ORDER BY AP5.EMPLID ASC, AP5.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for EffDt records without Detail record
!*********************************************************************

begin-SELECT

AP6.EMPLID
AP6.EMPL_RCD
AP6.ERNCD

  move ''                   to $Company
  move &AP6.EmplID          to $Emplid
  move &AP6.EMPL_RCD        to #EMPL_RCD
  move &AP6.ErnCd           to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg64     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034        Z51,
      PS_ADDL_PAY_EFFDT  AP6

WHERE AP6.EMPLID   = Z51.EMPLID
  AND AP6.EMPL_RCD = Z51.EMPL_RCD

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_ADDL_PAY_DATA
      WHERE EMPLID   = AP6.EMPLID
        AND EMPL_RCD = AP6.EMPL_RCD
        AND ERNCD    = AP6.ERNCD)

ORDER BY AP6.EMPLID ASC, AP6.ERNCD ASC

end-SELECT

!*********************************************************************
! Look for ErnCd records ErnCd not on Earnings Table
!*********************************************************************

begin-SELECT

AP7.EMPLID
AP7.EMPL_RCD
AP7.ERNCD

  move ''                 to $Company
  move &AP7.EmplID        to $Emplid
  move &AP7.EMPL_RCD      to #EMPL_RCD
  move &AP7.ErnCd         to $Message-Data1
  move ''                 to $Message-Data2
  move $Pay034_ErrMsg65   to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z52,
      PS_ADDL_PAY_DATA AP7

WHERE AP7.EMPLID   = Z52.EMPLID
  AND AP7.EMPL_RCD = Z52.EMPL_RCD
  AND AP7.EFFDT    = (SELECT MAX(EFFDT)
                      FROM  PS_ADDL_PAY_DATA
                      WHERE EMPLID   = AP7.EMPLID
                        AND EMPL_RCD = AP7.EMPL_RCD
                        AND ERNCD    = AP7.ERNCD
                        AND EFFDT   <= $AsOfToday)
  AND AP7.EARNINGS_END_DT IS NULL

  AND (NOT EXISTS (SELECT 'X'
                   FROM  PS_EARNINGS_TBL
                   WHERE ERNCD = AP7.ERNCD)

        OR EXISTS (SELECT 'Y'
                   FROM  PS_EARNINGS_TBL
                   WHERE ERNCD      = AP7.ERNCD
                     AND EFF_STATUS = 'I'
                     AND EFFDT      = (SELECT MAX(EFFDT)
                                       FROM  PS_EARNINGS_TBL
                                       WHERE ERNCD  = AP7.ERNCD
                                         AND EFFDT <= $AsOfToday))
        OR EXISTS (SELECT 'Z'
                   FROM  PS_EARNINGS_TBL
                   WHERE ERNCD      = AP7.ERNCD
                     AND EFF_STATUS = 'I'
                     AND EFFDT      = (SELECT MAX(EFFDT)
                                       FROM  PS_EARNINGS_TBL
                                       WHERE ERNCD  = AP7.ERNCD
                                         AND EFFDT <= AP7.EARNINGS_END_DT)))

ORDER BY AP7.EMPLID ASC, AP7.ERNCD ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


!*********************************************************************
! Check Balances
!*********************************************************************

begin-procedure Check-Balances
  display 'Checking Balance Records . . . '

!*********************************************************************
! Ensure Earnings Code on Balance is on Earnings Table
! US Balance
!*********************************************************************

begin-SELECT DISTINCT

B1.COMPANY
B1.EMPLID
B1.ERNCD

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &B1.ERNCD

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'
      move &B1.Company          to $Company
      move &B1.EmplID           to $Emplid
      move ''                   to #EMPL_RCD
      move &B1.ErnCd            to $Message-Data1
      move ''                   to $Message-Data2
      move $Pay034_ErrMsg66     to $Message
      do Print-Error-Message
      add 1 to #Records
  end-if

FROM  PS_R_PAY034      Z53,
      PS_EARNINGS_BAL  B1

WHERE B1.EMPLID       = Z53.EMPLID
  AND B1.SPCL_BALANCE = 'N'
  AND B1.BALANCE_YEAR = #AsOfYYYY

ORDER BY B1.COMPANY ASC, B1.EMPLID ASC, B1.ERNCD ASC

end-SELECT

!*********************************************************************
! Ensure Deduction Code on Balance is on Deduction Table
! US Balance
!*********************************************************************

begin-SELECT DISTINCT

B2.COMPANY
B2.EMPLID
B2.PLAN_TYPE
B2.DEDCD

  move &B2.Company          to $Company
  move &B2.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B2.Plan_Type        to $Message-Data1
  move &B2.DedCd            to $Message-Data2
  move $Pay034_ErrMsg67     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034       Z54,
      PS_DEDUCTION_BAL  B2

WHERE B2.EMPLID       = Z54.EMPLID
  AND B2.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_DEDUCTION_TBL
      WHERE PLAN_TYPE = B2.PLAN_TYPE
        AND DEDCD     = B2.DEDCD)

ORDER BY B2.COMPANY ASC, B2.EMPLID ASC, B2.PLAN_TYPE ASC, B2.DEDCD ASC

end-SELECT

!***********************************************************************
! Ensure Benefit Plan Code on Deduction Balance is on Benefit Plan Table
! US Balance
!***********************************************************************

begin-SELECT DISTINCT

B3.COMPANY
B3.EMPLID
B3.PLAN_TYPE
B3.BENEFIT_PLAN

  move &B3.Company          to $Company
  move &B3.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B3.Plan_Type        to $Message-Data1
  move &B3.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg68     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034       Z55,
      PS_DEDUCTION_BAL  B3

WHERE B3.EMPLID       = Z55.EMPLID
  AND B3.BENEFIT_PLAN <> ' '
  AND B3.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_BENEF_PLAN_TBL
      WHERE PLAN_TYPE    = B3.PLAN_TYPE
        AND BENEFIT_PLAN = B3.BENEFIT_PLAN)

ORDER BY B3.COMPANY ASC, B3.EMPLID ASC, B3.PLAN_TYPE ASC,
         B3.BENEFIT_PLAN ASC

end-SELECT

!*********************************************************************
! Ensure Deduction Code on Garnisment Balance is on Deduction Table
! US/Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B4.COMPANY
B4.EMPLID
B4.PLAN_TYPE
B4.DEDCD

  move &B4.Company          to $Company
  move &B4.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B4.Plan_Type        to $Message-Data1
  move &B4.DedCd            to $Message-Data2
  move $Pay034_ErrMsg69 to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z56,
      PS_GARN_BALANCE  B4

WHERE B4.EMPLID       = Z56.EMPLID
  AND B4.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_DEDUCTION_TBL
      WHERE PLAN_TYPE = B4.PLAN_TYPE
        AND DEDCD     = B4.DEDCD)

ORDER BY B4.COMPANY ASC, B4.EMPLID ASC, B4.PLAN_TYPE ASC, B4.DEDCD ASC

end-SELECT

!************************************************************************
! Ensure Benefit Plan Code on Garnishment Balance is a general deduction
! US/Can Balance
!************************************************************************

begin-SELECT DISTINCT

B5.COMPANY
B5.EMPLID
B5.PLAN_TYPE
B5.BENEFIT_PLAN

  move &B5.Company          to $Company
  move &B5.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B5.Plan_Type        to $Message-Data1
  move &B5.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg70     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034      Z57,
      PS_GARN_BALANCE  B5

WHERE B5.EMPLID       = Z57.EMPLID
  AND B5.BENEFIT_PLAN <> ' '
  AND B5.BALANCE_YEAR = #AsOfYYYY

ORDER BY B5.COMPANY ASC, B5.EMPLID ASC, B5.PLAN_TYPE ASC,
         B5.BENEFIT_PLAN ASC

end-SELECT

!*********************************************************************
! Ensure State Code on Tax Balance is on Company Tax Table
! US Balance
!*********************************************************************

begin-SELECT DISTINCT

B6.COMPANY
B6.EMPLID
B6.STATE

  move &B6.Company          to $Company
  move &B6.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B6.State            to $Message-Data1
  move ''                   to $Message-Data2
  move $Pay034_ErrMsg71     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034     Z58,
      PS_TAX_BALANCE  B6

WHERE B6.EMPLID       = Z58.EMPLID
  AND B6.STATE NOT LIKE '$U%'
  AND B6.STATE NOT LIKE '$E%'
  AND B6.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_CO_STATETAX_TBL
      WHERE COMPANY = B6.COMPANY
        AND STATE   = B6.STATE)

ORDER BY B6.COMPANY ASC, B6.EMPLID ASC, B6.STATE ASC

end-SELECT

!*********************************************************************
! Ensure Local Code on Tax Balance is on Company Tax Table
! US Balance
!*********************************************************************

begin-SELECT DISTINCT

B7.COMPANY
B7.EMPLID
B7.STATE
B7.LOCALITY

  move &B7.Company          to $Company
  move &B7.EmplID           to $Emplid
  move ''                   to #EMPL_RCD
  move &B7.State            to $Message-Data1
  move &B7.Locality         to $Message-Data2
  move $Pay034_ErrMsg72     to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034     Z59,
      PS_TAX_BALANCE  B7

WHERE B7.EMPLID       = Z59.EMPLID
  AND B7.LOCALITY <> ' '
  AND B7.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_CO_LOCALTAX_TBL
      WHERE COMPANY  = B7.COMPANY
        AND LOCALITY = B7.LOCALITY)

ORDER BY B7.COMPANY ASC, B7.EMPLID ASC, B7.STATE ASC, B7.LOCALITY ASC

end-SELECT

!*********************************************************************
! Ensure Check YTD Balance actually balances
! US Balance
!*********************************************************************

begin-SELECT

B8.COMPANY          &USCompany
B8.EMPLID           &USEmplID
B8.TOTAL_GROSS_YTD  &USGross
B8.TOTAL_TAXES_YTD  &USTaxes
B8.TOTAL_DEDNS_YTD  &USDedns
B8.NET_PAY_YTD      &USNet

  move &USGross to #USGrossTemp
  let #USGross = round(#USGrossTemp,2)

  move &USTaxes to #USTaxes
  move &USDedns to #USDedns
  move &USNet   to #USNet

  let #BalTemp = (#USTaxes + #USDedns + #USNet)
  let #Balance = round(#BalTemp,2)

  if #USGross <> #Balance

    move &USCompany           to $Company
    move &USEmplID            to $Emplid
    move ''                   to #EMPL_RCD
    move #USGross             to $Message-Data1  99999999.99
    move #Balance             to $Message-Data2  99999999.99
    move $Pay034_ErrMsg73     to $Message
    do Print-Error-Message
    add 1 to #Records
  end-if

FROM  PS_R_PAY034   Z60,
      PS_CHECK_YTD  B8

WHERE B8.EMPLID         = Z60.EMPLID
  AND B8.BALANCE_ID     = $Calendar_Year_Id
  AND B8.BALANCE_YEAR   = #AsOfYYYY

  AND B8.BALANCE_PERIOD =
     (SELECT MAX(BMM8.BALANCE_PERIOD)
      FROM  PS_CHECK_YTD BMM8
      WHERE BMM8.EMPLID       = B8.EMPLID
        AND BMM8.COMPANY      = B8.COMPANY
        AND BMM8.BALANCE_YEAR = B8.BALANCE_YEAR
        AND BMM8.BALANCE_ID   = B8.BALANCE_ID)

ORDER BY B8.COMPANY ASC, B8.EMPLID ASC

end-SELECT

!*********************************************************************
! Ensure Special Accumulator Code on Balance is on Spec Accum Table
! US Balance
!*********************************************************************

begin-SELECT DISTINCT

B9.COMPANY
B9.EMPLID
B9.ERNCD

   let $ERNCD_SPCL_ERROR = 'Y'
   let $CHECK_ERNCD_SPCL = &B9.ERNCD

   do Check-EarnCD-Spcl

   if $ERNCD_SPCL_ERROR = 'Y'
      move &B9.Company          to $Company
      move &B9.EmplID           to $Emplid
      move ''                   to #EMPL_RCD
      move &B9.ErnCd            to $Message-Data1
      move ''                   to $Message-Data2
      move $Pay034_ErrMsg74     to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_R_PAY034      Z61,
      PS_EARNINGS_BAL  B9

WHERE B9.EMPLID       = Z61.EMPLID
  AND B9.SPCL_BALANCE = 'Y'
  AND B9.BALANCE_YEAR = #AsOfYYYY

ORDER BY B9.COMPANY ASC, B9.EMPLID ASC, B9.ERNCD ASC

end-SELECT

!*********************************************************************
! Ensure Earnings Code on Balance is on Earnings Table
! Can Balance
!*********************************************************************

begin-SELECT  DISTINCT

B10.COMPANY
B10.EMPLID
B10.ERNCD

   let $ERN_CODE_ERROR = 'Y'
   let $CHECK_ERN_CODE = &B10.ERNCD

   do Check-Earn-Code

   if $ERN_CODE_ERROR = 'Y'
      move &B10.COMPANY          to $Company
      move &B10.EmplID           to $Emplid
      move ''                    to #EMPL_RCD
      move &B10.ErnCd            to $Message-Data1
      move ''                    to $Message-Data2
      move $Pay034_ErrMsg75      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_R_PAY034         Z62,
      PS_CAN_ERN_BALANCE  B10

WHERE B10.EMPLID       = Z62.EMPLID
  AND B10.SPCL_BALANCE = 'N'
  AND B10.BALANCE_YEAR = #AsOfYYYY

ORDER BY B10.COMPANY ASC, B10.EMPLID ASC, B10.ERNCD ASC

end-SELECT

!*********************************************************************
! Ensure Special Accumulator Code on Balance is on Spec Accum Table
! Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B11.COMPANY
B11.EMPLID
B11.ERNCD

   let $ERNCD_SPCL_ERROR = 'Y'
   let $CHECK_ERNCD_SPCL = &B11.ERNCD

   do Check-EarnCD-Spcl

   if $ERNCD_SPCL_ERROR = 'Y'
      move &B11.Company          to $Company
      move &B11.EmplID           to $Emplid
      move ''                    to #EMPL_RCD
      move &B11.ErnCd            to $Message-Data1
      move ''                    to $Message-Data2
      move $Pay034_ErrMsg76      to $Message
      do Print-Error-Message
      add 1 to #Records
   end-if

FROM  PS_R_PAY034         Z63,
      PS_CAN_ERN_BALANCE  B11

WHERE B11.EMPLID       = Z63.EMPLID
  AND B11.BALANCE_YEAR = #AsOfYYYY
  AND B11.SPCL_BALANCE = 'Y'

ORDER BY B11.COMPANY ASC, B11.EMPLID ASC, B11.ERNCD ASC

end-SELECT

!*********************************************************************
! Ensure Deduction Code on Balance is on Deduction Table
! Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B12.COMPANY
B12.EMPLID
B12.PLAN_TYPE
B12.DEDCD

  move &B12.Company          to $Company
  move &B12.EmplID           to $Emplid
  move ''                    to #EMPL_RCD
  move &B12.Plan_Type        to $Message-Data1
  move &B12.DedCd            to $Message-Data2
  move $Pay034_ErrMsg77      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z64,
      PS_CAN_DED_BALANCE  B12

WHERE B12.EMPLID       = Z64.EMPLID
  AND B12.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
         (SELECT 'X'
          FROM  PS_DEDUCTION_TBL
          WHERE PLAN_TYPE = B12.PLAN_TYPE
            AND DEDCD     = B12.DEDCD)

ORDER BY B12.COMPANY ASC, B12.EMPLID ASC, B12.PLAN_TYPE ASC,
         B12.DEDCD ASC

end-SELECT

!*********************************************************************
! Ensure Benefit Plan Code on Deduction Balance is on Benefit Plan Table
! Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B13.COMPANY
B13.EMPLID
B13.PLAN_TYPE
B13.BENEFIT_PLAN

  move &B13.Company          to $Company
  move &B13.EmplID           to $Emplid
  move ''                    to #EMPL_RCD
  move &B13.Plan_Type        to $Message-Data1
  move &B13.Benefit_Plan     to $Message-Data2
  move $Pay034_ErrMsg78      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z65,
      PS_CAN_DED_BALANCE  B13

WHERE B13.EMPLID       = Z65.EMPLID
  AND B13.BENEFIT_PLAN <> ' '
  AND B13.BALANCE_YEAR = #AsOfYYYY

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_BENEF_PLAN_TBL
      WHERE PLAN_TYPE    = B13.PLAN_TYPE
        AND BENEFIT_PLAN = B13.BENEFIT_PLAN)

ORDER BY B13.COMPANY ASC, B13.EMPLID ASC,
         B13.PLAN_TYPE ASC, B13.BENEFIT_PLAN ASC

end-SELECT

!*********************************************************************
! Ensure Province Code on Tax Balance is on Canada Provincial Tax
! Parameters Table
! Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B16.COMPANY
B16.EMPLID
B16.PROVINCE

  move &B16.Company          to $Company
  move &B16.EmplID           to $Emplid
  move ''                    to #EMPL_RCD
  move &B16.Province         to $Message-Data1
  move ''                    to $Message-Data2
  move $Pay034_ErrMsg79      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z66,
      PS_CAN_TAX_BALANCE  B16

WHERE B16.EMPLID = Z66.EMPLID

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_CAN_TAX_PROV
      WHERE PROVINCE = B16.PROVINCE)

ORDER BY B16.COMPANY ASC, B16.EMPLID ASC, B16.PROVINCE ASC

end-SELECT

!*********************************************************************
! Ensure Wage Loss Plan on Tax Balance is valid
! Can Balance
!*********************************************************************

begin-SELECT DISTINCT

B17.COMPANY
B17.EMPLID
B17.WAGE_LOSS_PLAN

  move &B17.Company          to $Company
  move &B17.EmplID           to $Emplid
  move ''                    to #EMPL_RCD
  move &B17.Wage_Loss_Plan   to $Message-Data1
  move ''                    to $Message-Data2
  move $Pay034_ErrMsg80      to $Message
  do Print-Error-Message
  add 1 to #Records

FROM  PS_R_PAY034         Z67,
      PS_CAN_TAX_BALANCE  B17

WHERE B17.EMPLID = Z67.EMPLID

  AND NOT EXISTS
     (SELECT 'X'
      FROM  PS_WAGELS_PLAN_TBL
      WHERE COMPANY = B17.COMPANY
        AND WAGE_LOSS_PLAN = B17.WAGE_LOSS_PLAN)

ORDER BY B17.COMPANY ASC, B17.EMPLID ASC, B17.WAGE_LOSS_PLAN ASC

end-SELECT

!*********************************************************************
! Ensure Check YTD Balance actually balances
! Can Balance
!*********************************************************************

begin-SELECT

B18.COMPANY          &CanCompany
B18.EMPLID           &CanEmplID
B18.TOTAL_GROSS_YTD  &canGross
B18.TOTAL_TAXES_YTD  &canTaxes
B18.TOTAL_DEDNS_YTD  &canDedns
B18.NET_PAY_YTD      &canNet

  move &CanGross to #CanGrossTemp
  let #canGross = round(#CanGrossTemp,2)

  move &CanTaxes to #CanTaxes
  move &CanDedns to #CanDedns
  move &CanNet   to #CanNet

  let #BalTemp = (#canTaxes + #canDedns + #canNet)
  let #Balance = round(#BalTemp,2)

  if #canGross <> #Balance

    move &CanCompany           to $Company
    move &CanEmplID            to $Emplid
    move ''                    to #EMPL_RCD
    move #canGross             to $Message-Data1  99999999.99
    move #Balance              to $Message-Data2  99999999.99
    move $Pay034_ErrMsg81 to $Message
    do Print-Error-Message
    add 1 to #Records
  end-if

FROM  PS_R_PAY034       Z68,
      PS_CAN_CHECK_YTD  B18

WHERE B18.EMPLID         = Z68.EMPLID
  AND B18.BALANCE_ID     = $Calendar_Year_Id
  AND B18.BALANCE_YEAR   = #AsOfYYYY

  AND B18.BALANCE_PERIOD =
     (SELECT MAX(BMM18.BALANCE_PERIOD)
      FROM  PS_CAN_CHECK_YTD BMM18
      WHERE BMM18.EMPLID       = B18.EMPLID
        AND BMM18.COMPANY      = B18.COMPANY
        AND BMM18.BALANCE_YEAR = B18.BALANCE_YEAR
        AND BMM18.BALANCE_ID   = B18.BALANCE_ID)

ORDER BY B18.COMPANY ASC, B18.EMPLID ASC

end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


begin-procedure Check-Comp-Codes
  display 'Checking Compensation Rate Code Records . . . '

!*********************************************************************
! Ensure Rate Codes Used in Jobcd_Comp_rate is Defined in
! Comp Rate Code Table
!*********************************************************************

begin-SELECT DISTINCT

B19.SETID
B19.COMP_RATECD

  if RTRIM(&B19.COMP_RATECD,' ') <> ''
     move ''                    to $Company
     move ''                    to $Emplid
     move ''                    to #EMPL_RCD
     move &B19.COMP_RATECD      to $Message-Data1
     move &B19.SETID            to $Message-Data2
     move $Pay034_ErrMsg82      to $Message
     do Print-Error-Message
     add 1 to #Records
  end-if

FROM  PS_JOBCD_COMP_RATE B19

WHERE NOT EXISTS
     (SELECT 'X'
      FROM  PS_COMP_RATECD_TBL B19A
      WHERE B19A.COMP_RATECD = B19.COMP_RATECD)

end-SELECT

!*********************************************************************
! Ensure Rate Code Group Used in Jobcd_Comp_rate is Defined in
! Comp Rate Group Table
!*********************************************************************

begin-SELECT DISTINCT

B20.SETID
B20.RATE_CODE_GROUP

  if RTRIM(&B20.RATE_CODE_GROUP,' ') <> ''
     move ''                    to $Company
     move ''                    to $Emplid
     move ''                    to #EMPL_RCD
     move &B20.RATE_CODE_GROUP  to $Message-Data1
     move &B20.SETID            to $Message-Data2
     move $Pay034_ErrMsg83      to $Message
     do Print-Error-Message
     add 1 to #Records
  end-if

FROM  PS_JOBCD_COMP_RATE B20

WHERE NOT EXISTS
     (SELECT 'X'
      FROM  PS_COMPRT_GRP_TBL B20A
      WHERE B20A.RATE_CODE_GROUP = B20.RATE_CODE_GROUP)

end-SELECT

!*********************************************************************
! Ensure Rate Code Used in Compensation is Defined in
! Comp Rate Code Table
!*********************************************************************

begin-SELECT DISTINCT

B21.EMPLID
B21.EMPL_RCD
B21.COMP_RATECD

  if RTRIM(&B21.COMP_RATECD,' ') <> ''
     move ''                    to $Company
     move &B21.EMPLID           to $Emplid
     move &B21.EMPL_RCD         to #EMPL_RCD
     move &B21.COMP_RATECD      to $Message-Data1
     move ''                    to $Message-Data2
     move $Pay034_ErrMsg84      to $Message
     do Print-Error-Message
     add 1 to #Records
  end-if

FROM  PS_R_PAY034      Z70,
      PS_COMPENSATION  B21

WHERE Z70.EMPLID = B21.EMPLID

  AND NOT EXISTS
         (SELECT 'X'
          FROM PS_COMP_RATECD_TBL B21A
          WHERE B21A.COMP_RATECD = B21.COMP_RATECD)

end-SELECT

!************************************************************************
! Ensure Rate Codes Used in ADDL_PAY_DATA is Defined in Comp Rate
! Code Table as North American Non-Base Component and is not Points Type
!************************************************************************

begin-SELECT

B26.EMPLID
B26.EMPL_RCD
B26.ERNCD
B26.COMP_RATECD

  if RTRIM(&B26.COMP_RATECD,' ') <> ''
     move ''                    to $Company
     move &B26.EMPLID           to $Emplid
     move &B26.EMPL_RCD         to #EMPL_RCD
     move &B26.COMP_RATECD      to $Message-Data1
     move &B26.ERNCD            to $Message-Data2
     move $Pay034_ErrMsg89      to $Message
     do Print-Error-Message
     add 1 to #Records
  end-If

FROM  PS_R_PAY034       Z71,
      PS_ADDL_PAY_DATA  B26

WHERE Z71.EMPLID = B26.EMPLID

  AND NOT EXISTS
         (SELECT 'X'
          FROM PS_COMP_RATECD_TBL B26A
          WHERE B26A.COMP_RATECD      = B26.COMP_RATECD
            AND B26A.COMP_RATE_TYPE   <> 'PT'
            AND B26A.COMP_BASE_PAY_SW = 'N')
end-SELECT

  do Get-Current-DateTime
  display 'Done at ' noline
  display $AsOfNow
end-procedure


begin-procedure Delete-Temp-Table

begin-SQL on-error=Ignore
    DELETE FROM PS_R_PAY034
end-SQL
end-procedure


begin-procedure Insert-Active-Empl

begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_PAY034      (EMPLID, EMPL_RCD,EFFDT)
                        VALUES ($EMPLID, #EMPL_RCD, $EFFDT)
end-SQL
end-procedure


!*********************************************************************
begin-procedure Check-Earn-Code

let $ERN_CODE_ERROR = 'Y'

begin-SELECT
ERN.EFF_STATUS

   ! flag ern code error, ern code is found but status is inactive
   if &ERN.EFF_STATUS = 'I'
      let $ERN_CODE_ERROR = 'Y'
   else
      let $ERN_CODE_ERROR = 'N'
   end-if

FROM PS_EARNINGS_TBL ERN
WHERE ERNCD = $CHECK_ERN_CODE
  AND EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_EARNINGS_TBL ERN2
                WHERE ERN2.ERNCD  = $CHECK_ERN_CODE
                  AND ERN2.EFFDT <= $AsOfToday)
end-SELECT
end-procedure


!*********************************************************************
begin-procedure Check-Earn-Program

let $ERN_PGM_ERROR = 'Y'

begin-select
EPGM.EFF_STATUS

   ! flag ern pgm error, ern pgm found but status is inactive
   if &EPGM.EFF_STATUS = 'I'
      let $ERN_PGM_ERROR = 'Y'
   else
      let $ERN_PGM_ERROR = 'N'
   end-if


FROM PS_ERN_PROGRAM_TBL EPGM
WHERE ERN_PROGRAM = $CHECK_ERN_PROGRAM
  AND EFFDT       = (SELECT MAX(EFFDT)
                       FROM PS_ERN_PROGRAM_TBL EPGM2
                      WHERE EPGM2.ERN_PROGRAM = $CHECK_ERN_PROGRAM
                        AND EFFDT      <= $AsOfToday)
end-select
end-procedure

!*********************************************************************
begin-procedure Check-Earn-Program-Erncd

let $ERN_PGM_ERN_ERROR = 'Y'

begin-select DISTINCT
GT9D.ERN_PROGRAM
GT9F.EFF_STATUS

   ! flag ern pgm error, ern pgm found but status is inactive
   if &GT9F.EFF_STATUS = 'I'
      let $ERN_PGM_ERN_ERROR = 'Y'
   else
      let $ERN_PGM_ERN_ERROR = 'N'
   end-if

FROM PS_ERN_PROGRAM_DEF GT9D,
     PS_EARNINGS_TBL    GT9E,
     PS_ERN_PROGRAM_TBL GT9F
WHERE GT9D.ERN_PROGRAM = $CHECK_ERN_PROGRAM
  AND GT9D.ERNCD         = GT9E.ERNCD
  AND GT9F.ERN_PROGRAM   = GT9D.ERN_PROGRAM
  AND GT9F.EFFDT         = (SELECT MAX(EFFDT)
                            FROM PS_ERN_PROGRAM_TBL GT9G
                            WHERE GT9G.ERN_PROGRAM = $CHECK_ERN_PROGRAM
                            AND   GT9G.EFFDT      <= $AsOfToday)
end-select

end-procedure

!*********************************************************************
begin-procedure Check-EarnCd-Spcl

let $ERNCD_SPCL_ERROR = 'Y'

begin-select
SPCL.EFF_STATUS

   ! flag spcl erncd error, spcl erncd found but status is inactive
   if &SPCL.EFF_STATUS = 'I'
      let $ERNCD_SPCL_ERROR = 'Y'
   else
      let $ERNCD_SPCL_ERROR = 'N'
   end-if

FROM  PS_SPCL_EARNS_TBL SPCL
WHERE ERNCD_SPCL = $CHECK_ERNCD_SPCL
  AND EFFDT      = (SELECT MAX(EFFDT)
                      FROM  PS_SPCL_EARNS_TBL
                     WHERE ERNCD_SPCL = $CHECK_ERNCD_SPCL
                       AND EFFDT     <= $AsOfToday)
end-select
end-procedure



!********************************************************************

begin-procedure Ignore
!  dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure Insert-Error
   display ' Error on insert of employee  ' noline
   display $EMPLID
end-procedure


!********************************************************************
! Error Routine
!*********************************************************************

begin-procedure Print-Error-Message
  print $Company                (+1,1)
  print $Emplid                 (0,7)
  print #EMPL_RCD               (0,20)  edit 99999
  print $Message                (0,28) ! Changed to match heading start posn
  print $Message-Data1          (0,90)
  print $Message-Data2          (0,105)
end-procedure


!********************************************************************
! Copied Routines
!*********************************************************************

#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#include 'payrctl2.sqc'  !Select Run Control Parameters
