!***********************************************************************
!  PAY751: Final Check Program Report                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:06:48                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!***********************************************************************
!  Function:                                                           *
!     This report prints the Final Check Program definitions.  Each    *
!     program id will contain definitions for Earnings,                *
!     Leave Accruals, and Deductions.                                  *
!***********************************************************************

#Include 'setenv.sqc'                  ! Set environment
#Include 'setup32.sqc'                 ! Init printer and page size

BEGIN-REPORT

  DO INIT-REPORT
  DO PROCESS-MAIN
  DO RESET
  DO STDAPI-TERM

END-REPORT

! ********************************************************************************
! *     DEFINE COLUMNS                                                           *
! ********************************************************************************

#DEFINE  PAY751a_C_ERNCD        010     ! Earnings Def Earnings Code
#DEFINE  PAY751a_C_INACTIVE     030     ! Earnings Def Inactive
#DEFINE  PAY751a_C_NOT_EXIST    045     ! Earnings Def Not Exist
#DEFINE  PAY751a_C_DESCR        060     ! Earnings Def Earnings Description
#DEFINE  PAY751a_C_OVRD_LMT     095     ! Earnings Def Amount Override Limit
#DEFINE  PAY751a_C_PAYOUT_OPT   115     ! Earnings Def Payout Option
#DEFINE  PAY751b_C_PLAN_TYPE    001     ! Leave Accrual Def Plan Type
#DEFINE  PAY751b_C_BEN_PLAN     011     ! Leave Accrual Def Benefit Plan
#DEFINE  PAY751b_C_NOT_EXIST    024     ! Leave Accrual Def Not Exist
#DEFINE  PAY751b_C_DESCR        030     ! Leave Accrual Def Benefit Plan Description
#DEFINE  PAY751b_C_HRS_OVRD_LMT 062     ! Leave Accrual Def Hrs Override Limit
#DEFINE  PAY751b_C_ACCR_ERNCD   081     ! Leave Accrual Def Accrued Earn Code
#DEFINE  PAY751b_C_PRCS_NEG     095     ! Leave Accrual Def Process Negative
#DEFINE  PAY751b_C_PROR_ACCR    107     ! Leave Accrual Def Prorate Accruals
#DEFINE  PAY751b_C_PROR_ERNCD   115     ! Leave Accrual Def Prorated Earn Code
#DEFINE  PAY751b_C_ACCR_DTL     130     ! Leave Accrual Def Accrual Proration Details
#DEFINE  PAY751b_C_SVC_LENGTH   130     ! Leave Accrual Def Length of Service
#DEFINE  PAY751b_C_SVC_HRS      148     ! Leave Accrual Def Hrs of Service
#DEFINE  PAY751b_C_HRS_TO_PAY   163     ! Leave Accrual Def Hrs to Pay
#DEFINE  PAY751c_C_PLAN_TYPE    010     ! Deduction Def Plan Type
#DEFINE  PAY751c_C_DEDCD        030     ! Deduction Def Deduction Code
#DEFINE  PAY751c_C_NOT_EXIST    050     ! Deduction Def Not Exist
#DEFINE  PAY751c_C_DESCR        065     ! Deduction Def Deduction Description
#DEFINE  PAY751c_C_OVRD_LMT     100     ! Deduction Def Amount Override Limit
#DEFINE  PAY751c_C_PROC_RULE    125     ! Deduction Def Processing Rule


BEGIN-PROCEDURE INIT-REPORT

  MOVE 'PAY751' TO $ReportId


  DO INIT-DATETIME                     ! Perform Date/Time Proc
  DO INIT-NUMBER                       ! Initialize Number
  DO STDAPI-INIT                       ! Standard Initialize
  DO GET-REPORT-LANGUAGE               ! Procedure that decides the report language
                                       ! and then calls 'Report-Translation' procedure

  MOVE $PAY751_Report_Title to $ReportTitle

  DISPLAY $ReportId
  DISPLAY $ReportTitle

  If $Prcs_Process_Instance = ''
    DO ASK-PROGRAM-VALUES
  Else
    DO SELECT-TERM-PGM-ID-PARAMETERS
    If RTRIM($term_pgmid,' ') <> ''
      Let $term_pgmid_sel = ' AND A.TERM_PGM_ID = ''' || $term_pgmid || ''''
    End-if
  End-if

  DO GET-CURRENT-DATETIME              ! Get Source Database Information

END-PROCEDURE                          ! End the Init-Report Procedure


BEGIN-PROCEDURE Report-Translation

! This procedure is used to read language-dependent text from the database.
! Read from PAY751 program ids

  do Init_Report_Translation($ReportID,$language_cd)

  do Get_Field_Information ('PAY751', 'REPORT_TITLE',   $PAY751_Report_Title, #dummy_width)
  do Get_Field_Information ('PAY751', 'ASOFDATE',       $PAY751_AsofDate,     #dummy_width)
  do Get_Field_Information ('PAY751', 'TERM_PGM_ID',    $PAY751_Term_Pgm_Id,  #dummy_width)
  do Get_Field_Information ('PAY751', 'DESCR',          $PAY751_Descr,        #dummy_width)
  do Get_Field_Information ('PAY751', 'EFFDT',          $PAY751_Effdt,        #dummy_width)
  do Get_Field_Information ('PAY751', 'FC_ERN_DEF',     $PAY751_FC_Ern_Def,   #dummy_width)
  do Get_Field_Information ('PAY751', 'ERNCD',          $PAY751_Erncd,        #dummy_width)
  do Get_Field_Information ('PAY751', 'INACTIVE',       $PAY751_Inactive,     #dummy_width)
  do Get_Field_Information ('PAY751', 'NOT_EXIST',      $PAY751_Not_Exist,    #dummy_width)
  do Get_Field_Information ('PAY751', 'AMT_OVRD_LIMIT', $PAY751_Amt_Ovrd_Lmt, #dummy_width)
  do Get_Field_Information ('PAY751', 'PAYOUT_OPTION',  $PAY751_Payout_Op,    #dummy_width)
  do Get_Field_Information ('PAY751', 'FC_LVE_DEF',     $PAY751_FC_Lve_Def,   #dummy_width)
  do Get_Field_Information ('PAY751', 'NOT',            $PAY751_Not,          #dummy_width)
  do Get_Field_Information ('PAY751', 'EXIST',          $PAY751_Exist,        #dummy_width)
  do Get_Field_Information ('PAY751', 'PLAN_TYPE',      $PAY751_Plan_Type,    #dummy_width)
  do Get_Field_Information ('PAY751', 'BENEFIT_PLAN',   $PAY751_Benefit_Plan, #dummy_width)
  do Get_Field_Information ('PAY751', 'HRS_OVRD_LIMIT', $PAY751_Hrs_Ovrd_Lmt, #dummy_width)
  do Get_Field_Information ('PAY751', 'ACCRUED_ERNCD',  $PAY751_Accrued_Erncd,#dummy_width)
  do Get_Field_Information ('PAY751', 'PRCS_ON_NEG',    $PAY751_Prcs_on_Neg,  #dummy_width)
  do Get_Field_Information ('PAY751', 'PRORT_ACCRUALS', $PAY751_Prort_Accrls, #dummy_width)
  do Get_Field_Information ('PAY751', 'PRORT_ERNCD',    $PAY751_Prort_Erncd,  #dummy_width)
  do Get_Field_Information ('PAY751', 'ACCR_PROR_DTL',  $PAY751_Accr_Pror_Dtl,#dummy_width)
  do Get_Field_Information ('PAY751', 'SRVC_LENGTH',    $PAY751_Srvc_Length,  #dummy_width)
  do Get_Field_Information ('PAY751', 'SRVC_HRS',       $PAY751_Srvc_Hrs,     #dummy_width)
  do Get_Field_Information ('PAY751', 'HRS_TO_PAY',     $PAY751_Hrs_to_Pay,   #dummy_width)
  do Get_Field_Information ('PAY751', 'FC_DED_DEF',     $PAY751_FC_Ded_Def,   #dummy_width)
  do Get_Field_Information ('PAY751', 'DEDCD',          $PAY751_Dedcd,        #dummy_width)
  do Get_Field_Information ('PAY751', 'PROC_RULE',      $PAY751_Proc_Rule,    #dummy_width)
  do Get_Field_Information ('PAY751', 'NO_EARNS_DEF',   $PAY751_No_Earns_Def, #dummy_width)
  do Get_Field_Information ('PAY751', 'NO_LVE_DEF',     $PAY751_No_Lve_Def,   #dummy_width)
  do Get_Field_Information ('PAY751', 'NO_DED_DEF',     $PAY751_No_Ded_Def,   #dummy_width)

END-PROCEDURE           !End procedure Report-Translation


! *******************************************************************
! ** Ask-Program-Values
! **    This procedure retrieves the Runcontrols for the report
! **    through SQRW
! *******************************************************************

BEGIN-PROCEDURE ASK-PROGRAM-VALUES

  MOVE 'N' TO $DataOK

  WHILE $PgmOK <> 'Y'

    DISPLAY 'Press Enter For All'
    INPUT $term_pgmid MAXLEN=3 'Enter Final Check Program ID'
    uppercase $term_pgmid
    If RTRIM($term_pgmid,' ') <> ''
      DO CHECK-PGM-EXISTS
      Let $term_pgmid_sel = ' AND A.TERM_PGM_ID = ''' || $term_pgmid || ''''
    End-if

  END-WHILE
    DO Get-As-Of-Date

END-PROCEDURE           ! End procedure Ask-Program-Values

! *******************************************************************
! ** Check-Pgm-Exists
! **    This procedure checks if the Final Check Program ID entered
! **    exists.
! *******************************************************************

BEGIN-PROCEDURE CHECK-PGM-EXISTS

   LET $Pgm_Exists = 'N'

BEGIN-SELECT
'Y'
   MOVE 'Y' TO $Pgm_Exists
   MOVE 'Y' TO $PgmOK
FROM PS_TERM_PGM_TBL TPT
WHERE $term_pgmid = TPT.TERM_PGM_ID
END-SELECT

   IF $Pgm_Exists = 'N'
     DISPLAY ' '
     DISPLAY 'The Final Check Program ID entered...'
     DISPLAY '   ' NoLine
     DISPLAY $term_pgmid
     DISPLAY '   ' NoLine
     DISPLAY 'does not exist.'
     DISPLAY ' '
   END-IF

END-PROCEDURE           ! End procedure Check-Pgm-Exists


! *******************************************************************
! ** Select-Term-Pgm-Id-Parameters
! **    This procedure retrieves the Runcontrols for the report
! **
! *******************************************************************

BEGIN-PROCEDURE SELECT-TERM-PGM-ID-PARAMETERS

BEGIN-SELECT

RC_PAY.TERM_PGM_ID
RC_PAY.ASOFDATE

FROM PS_RC_PAY RC_PAY
WHERE RC_PAY.OPRID = $Prcs_OprID
AND RC_PAY.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

END-SELECT

  MOVE &RC_PAY.TERM_PGM_ID TO $term_pgmid
  MOVE &RC_PAY.ASOFDATE TO $AsOfDate

END-PROCEDURE           ! End procedure Get-Term-Pgm-ID-Parameters

BEGIN-HEADING 11

#Include 'stdhdgtr.sqc'

    PRINT $PAY751_AsofDate      (3,1)
    DO Format-DateTime($AsOfDate, $out, {DEFDATE}, '', '')
    PRINT $out                  (0,13)
    PRINT $PAY751_Term_Pgm_Id   (4,1)
    PRINT $Term_Pgm_Id          (0,14)
    PRINT $Term_Pgm_Descr       (0,18)
    PRINT $PAY751_Effdt         (5,1)
    PRINT $Term_Pgm_Effdt       (0,18)

  If $rptcde = 'A'
    PRINT $PAY751_FC_Ern_Def    (6) center
    PRINT $PAY751_Erncd         (9,{PAY751a_C_ERNCD},)
    PRINT $PAY751_Inactive      (0,{PAY751a_C_INACTIVE},)
    PRINT $PAY751_Not_Exist     (0,{PAY751a_C_NOT_EXIST},)
    PRINT $PAY751_Descr         (0,{PAY751a_C_DESCR},)
    PRINT $PAY751_Amt_Ovrd_Lmt  (0,{PAY751a_C_OVRD_LMT},)
    PRINT $PAY751_Payout_Op     (0,{PAY751a_C_PAYOUT_OPT},)
    PRINT '-------------'       (10,{PAY751a_C_ERNCD},)
    PRINT '--------'            (0,{PAY751a_C_INACTIVE},)
    PRINT '---------'           (0,{PAY751a_C_NOT_EXIST},)
    PRINT '------------------------------' (0,{PAY751a_C_DESCR},)
    PRINT '--------------'      (0,{PAY751a_C_OVRD_LMT},)
    PRINT '---------------'     (0,{PAY751a_C_PAYOUT_OPT},)
  End-if

  If $rptcde = 'B'
    PRINT $PAY751_FC_Lve_Def    (6) center
    PRINT $PAY751_Not           (8,{PAY751b_C_NOT_EXIST},)
    PRINT $PAY751_Accr_Pror_Dtl (0,{PAY751b_C_ACCR_DTL},)
    PRINT $PAY751_Plan_Type     (9,{PAY751b_C_PLAN_TYPE},)
    PRINT $PAY751_Benefit_Plan  (0,{PAY751b_C_BEN_PLAN},)
    PRINT $PAY751_Exist         (0,{PAY751b_C_NOT_EXIST},)
    PRINT $PAY751_Descr         (0,{PAY751b_C_DESCR},)
    PRINT $PAY751_Hrs_Ovrd_Lmt  (0,{PAY751b_C_HRS_OVRD_LMT},)
    PRINT $PAY751_Accrued_Erncd (0,{PAY751b_C_ACCR_ERNCD},)
    PRINT $PAY751_Prcs_on_Neg   (0,{PAY751b_C_PRCS_NEG},)
    PRINT $PAY751_Prort_Accrls  (0,{PAY751b_C_PROR_ACCR},)
    PRINT $PAY751_Prort_Erncd   (0,{PAY751b_C_PROR_ERNCD},)
    PRINT $PAY751_Srvc_Length   (0,{PAY751b_C_SVC_LENGTH},)
    PRINT $PAY751_Srvc_Hrs      (0,{PAY751b_C_SVC_HRS},)
    PRINT $PAY751_Hrs_to_Pay    (0,{PAY751b_C_HRS_TO_PAY},)
    PRINT '---------'           (10,{PAY751b_C_PLAN_TYPE},)
    PRINT '------------'        (0,{PAY751b_C_BEN_PLAN},)
    PRINT '-----'               (0,{PAY751b_C_NOT_EXIST},)
    PRINT '-------------------------' (0,{PAY751b_C_DESCR},)
    PRINT '------------------'  (0,{PAY751b_C_HRS_OVRD_LMT},)
    PRINT '-------------'       (0,{PAY751b_C_ACCR_ERNCD},)
    PRINT '--------'            (0,{PAY751b_C_PRCS_NEG},)
    PRINT '-------'             (0,{PAY751b_C_PROR_ACCR},)
    PRINT '--------------'      (0,{PAY751b_C_PROR_ERNCD},)
    PRINT '-----------------'   (0,{PAY751b_C_SVC_LENGTH},)
    PRINT '--------------'      (0,{PAY751b_C_SVC_HRS},)
    PRINT '----------'          (0,{PAY751b_C_HRS_TO_PAY},)
  End-if

  If $rptcde = 'C'
    PRINT $PAY751_FC_Ded_Def    (6) center
    PRINT $PAY751_Plan_Type     (9,{PAY751c_C_PLAN_TYPE},)
    PRINT $PAY751_Dedcd         (0,{PAY751c_C_DEDCD},)
    PRINT $PAY751_Not_Exist     (0,{PAY751c_C_NOT_EXIST},)
    PRINT $PAY751_Descr         (0,{PAY751c_C_DESCR},)
    PRINT $PAY751_Amt_Ovrd_Lmt  (0,{PAY751c_C_OVRD_LMT},)
    PRINT $PAY751_Proc_Rule     (0,{PAY751c_C_PROC_RULE},)
    PRINT '---------'           (10,{PAY751c_C_PLAN_TYPE},)
    PRINT '--------------'      (0,{PAY751c_C_DEDCD},)
    PRINT '---------'           (0,{PAY751c_C_NOT_EXIST},)
    PRINT '------------------------------' (0,{PAY751c_C_DESCR},)
    PRINT '--------------'      (0,{PAY751c_C_OVRD_LMT},)
    PRINT '---------------'     (0,{PAY751c_C_PROC_RULE},)
  End-if

END-HEADING

! *******************************************************************
! ** Process-Main
! **    This procedure selects the most current, effective
! **    Final Checks Program Id
! **
! *******************************************************************

BEGIN-PROCEDURE Process-Main

BEGIN-SELECT

A.TERM_PGM_ID   ()  on-break print=never  level=1 procedure=page_break
  MOVE &A.TERM_PGM_ID TO $Term_Pgm_Id
A.DESCR         ()  on-break print=never  level=2 procedure=page_break
  MOVE &A.DESCR TO $Term_Pgm_Descr
A.EFFDT         ()  on-break print=never  level=3 procedure=page_break
  DO Format-DateTime(&A.EFFDT, $out, {DEFDATE}, '', '')
  MOVE $out TO $Term_Pgm_Effdt
A.EFF_STATUS

  MOVE 'A' TO $rptcde
  DO Erndef-Select

  MOVE 'B' TO $rptcde
  DO Lvedef-Select

  MOVE 'C' TO $rptcde
  DO Deddef-Select

FROM PS_TERM_PGM_TBL A

WHERE A.EFF_STATUS = 'A'
  [$term_pgmid_sel]
  AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                FROM PS_TERM_PGM_TBL A1
                WHERE A1.TERM_PGM_ID = A.TERM_PGM_ID
                AND A1.EFF_STATUS = 'A'
                AND A1.EFFDT <= $AsOfDate)

ORDER BY A.TERM_PGM_ID, A.DESCR, A.EFFDT

END-SELECT

END-PROCEDURE           ! End procedure Process-Main

! *******************************************************************
! **Erndef-Select
! **    This procedure selects the Final Checks Earnings Definitions
! **
! *******************************************************************

BEGIN-PROCEDURE Erndef-select

LET $Ernfound = 'N'

BEGIN-SELECT

B.ERNCD         (1,{PAY751a_C_ERNCD},)
  DO Get-Earnings-Descr
B.AMT_OVRD_LIMIT
B.PAYOUT_OPTION

  IF $Ernmatchfound = 'Y'               ! *** If the erncd exists in earnings table
     IF $EffStatus = 'Y'                ! *** and if erncd is active, then print values.
       PRINT &C1.DESCR          (0,{PAY751a_C_DESCR},)
!       PRINT &B.AMT_OVRD_LIMIT  (0,{PAY751a_C_OVRD_LMT},)   edit $$$,$$$,999.99
       PRINT &B.AMT_OVRD_LIMIT  (0,{PAY751a_C_OVRD_LMT},)    edit 999,999,999.99
       MOVE 'PAYOUT_OPTION' TO $FieldName
       MOVE &B.PAYOUT_OPTION TO $FieldValue
       DO Read-Translate-Table
       PRINT $XLATLONGNAME      (0,{PAY751a_C_PAYOUT_OPT},)
     ELSE                                                ! X here means that the erncd is
       PRINT 'X'                (0,{PAY751a_C_INACTIVE},)! inactive in earnings table for
     END-IF                                              ! that term pgm id's effective date.
  ELSE
     PRINT 'X'  (0,{PAY751a_C_NOT_EXIST},)               ! X here means that the erncd
  END-IF                                                 ! doesn't exist in earnings table.

  MOVE 'Y' TO $Ernfound
  NEXT-LISTING

FROM PS_TERM_PGM_DEFERN B

WHERE B.TERM_PGM_ID = &A.TERM_PGM_ID
  AND B.EFFDT = &A.EFFDT

ORDER BY B.ERNCD

END-SELECT

If $Ernfound = 'N'
  PRINT $PAY751_No_Earns_Def    (1,{PAY751a_C_ERNCD},)
End-if

NEW-PAGE

END-PROCEDURE           ! End procedure Erndef-select

! *******************************************************************
! ** Get-Earnings-Descr
! **    This procedure retrieves the Earnings Code Description
! **
! *******************************************************************

BEGIN-PROCEDURE Get-Earnings-Descr

LET $Ernmatchfound = 'N'

BEGIN-SELECT

C.ERNCD
  DO Check-Eff-Status
  MOVE 'Y' TO $Ernmatchfound

FROM PS_EARNINGS_TBL C
WHERE C.ERNCD = &B.ERNCD

END-SELECT

END-PROCEDURE           !End procedure Get-Earnings-Descr

! *******************************************************************
! ** Check-Eff-Status
! **    This procedure checks if the erncd is active in the
! **    earnings table.
! *******************************************************************


BEGIN-PROCEDURE Check-Eff-Status

LET $EffStatus = 'N'

BEGIN-SELECT

C1.DESCR
C1.EFF_STATUS
  MOVE 'Y' TO $EffStatus

FROM PS_EARNINGS_TBL C1                 ! *** selects the active description with
WHERE C1.ERNCD = &C.ERNCD               ! the effective date that is less
  AND C1.EFF_STATUS = 'A'               ! than or equal to the term pgm id
  AND C1.EFFDT = (SELECT MAX(C2.EFFDT)  ! effective date.
                 FROM PS_EARNINGS_TBL C2
                 WHERE C2.ERNCD = C1.ERNCD
                 AND C2.EFF_STATUS = 'A'
                 AND C2.EFFDT <= &A.EFFDT)
END-SELECT

END-PROCEDURE           ! End procedure Check-Eff-Status

! ***********************************************************************
! ** Lvedef-select
! **    This procedure selects the Final Checks Leave Accrual Definitions
! **
! ***********************************************************************

BEGIN-PROCEDURE Lvedef-select

LET $Lvefound = 'N'

BEGIN-SELECT

D.PLAN_TYPE     (1,{PAY751b_C_PLAN_TYPE},)
D.BENEFIT_PLAN  (0,{PAY751b_C_BEN_PLAN},)
  DO Get-Benef-Plan-Descr
D.HRS_OVRD_LIMIT
D.ERNCD_TO_PAY_ACCR
D.PRCS_ON_NEGATIVE
D.PRORATE_ACCRUALS
D.ERNCD_TO_PAY_PRORT

  IF $Bendescrfound = 'Y'
    PRINT &D.HRS_OVRD_LIMIT     (0,{PAY751b_C_HRS_OVRD_LMT},)   edit 9999.99
    PRINT &D.ERNCD_TO_PAY_ACCR  (0,{PAY751b_C_ACCR_ERNCD},)
    PRINT &D.PRCS_ON_NEGATIVE   (0,{PAY751b_C_PRCS_NEG},)
    PRINT &D.PRORATE_ACCRUALS   (0,{PAY751b_C_PROR_ACCR},)
    PRINT &D.ERNCD_TO_PAY_PRORT (0,{PAY751b_C_PROR_ERNCD},)
    If &D.PRORATE_ACCRUALS = 'Y'
      DO Get-Term-Prort-Accr-Details
    Else
      NEXT-LISTING
    End-if
  ELSE                                        ! *** X means that the plan type and
    PRINT 'X'   (0,{PAY751b_C_NOT_EXIST},)    ! benefit plan combination do not exist
    NEXT-LISTING                              ! in the benefit plan table. (benef_plan_tbl)
  END-IF

  MOVE 'Y' TO $Lvefound
  NEXT-LISTING

FROM PS_TERM_PGM_DEFLVE D

WHERE D.TERM_PGM_ID = &A.TERM_PGM_ID
  AND D.EFFDT = &A.EFFDT

ORDER BY D.PLAN_TYPE, D.BENEFIT_PLAN

END-SELECT

If $Lvefound = 'N'
  PRINT $PAY751_No_Lve_Def      (1,{PAY751b_C_PLAN_TYPE},)
End-if

NEW-PAGE

END-PROCEDURE           !End procedure Lvedef-select

! *******************************************************************
! ** Get-Benef-Plan-Descr
! **    This procedure retrieves the Benefit Plan Description
! **
! *******************************************************************

BEGIN-PROCEDURE Get-Benef-Plan-Descr

LET $Bendescrfound = 'N'

BEGIN-SELECT
E.DESCR         (0,{PAY751b_C_DESCR},)

  MOVE 'Y' TO $Bendescrfound

FROM PS_BENEF_PLAN_TBL E                ! *** selects the description
WHERE E.BENEFIT_PLAN = &D.BENEFIT_PLAN  ! with the effective date
  AND E.PLAN_TYPE = &D.PLAN_TYPE        ! that is less than or equal to
  AND E.EFFDT = (SELECT MAX(E1.EFFDT)   ! the term pgm id effective date
                  FROM PS_BENEF_PLAN_TBL E1
                  WHERE E1.BENEFIT_PLAN = E.BENEFIT_PLAN
                  AND E1.PLAN_TYPE = E.PLAN_TYPE
                  AND E1.EFFDT <= &A.EFFDT)

END-SELECT

END-PROCEDURE           ! End procedure Get-Benef-Plan-Descr

! *******************************************************************
! ** Get-Term-Prort-Accr-Details
! **    This procedure retrieves the Accruals Proration Details
! **
! *******************************************************************

BEGIN-PROCEDURE Get-Term-Prort-Accr-Details

BEGIN-SELECT

F.SERVICE_LENGTH        (0,{PAY751b_C_SVC_LENGTH},)     edit 999,999.999
F.SERVICE_HRS           (0,{PAY751b_C_SVC_HRS},)        edit 999,999.999
F.HRS_TO_PAY            (0,{PAY751b_C_HRS_TO_PAY},)     edit 999,999.999

  NEXT-LISTING

FROM PS_TERM_PRORT_ACCR F
  WHERE F.TERM_PGM_ID = &A.TERM_PGM_ID
    AND F.EFFDT = &A.EFFDT
    AND F.PLAN_TYPE = &D.PLAN_TYPE
    AND F.BENEFIT_PLAN = &D.BENEFIT_PLAN

END-SELECT

END-PROCEDURE           !End procedure Get-Term-Prort-Accr-Details

! ***********************************************************************
! ** Deddef-select
! **    This procedure selects the Final Checks Deductions Definitions
! **
! ***********************************************************************

BEGIN-PROCEDURE Deddef-select

LET $Dedfound = 'N'

BEGIN-SELECT

G.PLAN_TYPE     (1,{PAY751c_C_PLAN_TYPE},)
G.DEDCD         (0,{PAY751c_C_DEDCD},)
  DO Get-Deduction-Descr
G.AMT_OVRD_LIMIT
G.TERM_PROC_RULE

  IF $Deddescrfound = 'Y'
!    PRINT &G.AMT_OVRD_LIMIT     (0,{PAY751c_C_OVRD_LMT},)       edit $$$,$$$,999.99
  PRINT &G.AMT_OVRD_LIMIT     (0,{PAY751c_C_OVRD_LMT},)    edit 999,999,999.99   
    MOVE 'TERM_PROC_RULE' TO $FieldName
    MOVE &G.TERM_PROC_RULE TO $FieldValue
    DO Read-Translate-Table
    PRINT $XLATLONGNAME (0,{PAY751c_C_PROC_RULE},)
  ELSE                                              ! *** X means that the plan type &
    PRINT 'X'           (0,{PAY751c_C_NOT_EXIST},)  ! deduction code combination do not
  END-IF                                            ! exist in the deduction table.

  MOVE 'Y' TO $Dedfound
  NEXT-LISTING

FROM PS_TERM_PGM_DEFDED G

WHERE G.TERM_PGM_ID = &A.TERM_PGM_ID
  AND G.EFFDT = &A.EFFDT

ORDER BY G.PLAN_TYPE, G.DEDCD

END-SELECT

If $Dedfound = 'N'
  PRINT $PAY751_No_Ded_Def      (1,{PAY751c_C_PLAN_TYPE},)
End-if


END-PROCEDURE           ! End procedure Deddef-select


! *******************************************************************
! ** Get-Deduction-Descr
! **    This procedure retrieves the Benefit Plan Description
! **
! *******************************************************************

BEGIN-PROCEDURE Get-Deduction-Descr

LET $Deddescrfound = 'N'

BEGIN-SELECT

H.DESCR         (0,{PAY751c_C_DESCR},)

  MOVE 'Y' TO $Deddescrfound

FROM PS_DEDUCTION_TBL H
WHERE H.DEDCD = &G.DEDCD                        ! *** selects the description
  AND H.PLAN_TYPE = &G.PLAN_TYPE                ! with the effective date that
  AND H.EFFDT = (SELECT MAX(H1.EFFDT)           ! is less than or equal to the
                  FROM PS_DEDUCTION_TBL H1      ! term pgm id effective date.
                  WHERE H1.DEDCD = H.DEDCD
                  AND H1.PLAN_TYPE = H.PLAN_TYPE
                  AND H1.EFFDT <= &A.EFFDT)

END-SELECT

END-PROCEDURE           ! End procedure Get-Deductions-Descr


BEGIN-PROCEDURE page_break
  NEW-PAGE
END-PROCEDURE           ! End procedure page_break

! *******************************************************************
! *  Include Section
! *******************************************************************

#Include 'stdapi.sqc'    ! Standard API Procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'getasodt.sqc'  ! Get-As-Of-Date procedure
#Include 'number.sqc'    ! Routines to format numbers
#Include 'reset.sqc'     ! Reset Printer Procedure
#Include 'sqrtrans.sqc'  ! Translate SQR strings to a given language
#Include 'getrplng.sqc'  ! Gets the report language
#Include 'readxlat.sqc'  ! Routine to read the Translate Table

! *******************************************************************
!                   <<<   END OF FILE   >>>
! *******************************************************************
