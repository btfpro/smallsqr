
!***********************************************************************
!  CTX910LD:  Load Canadian Year-End Tax Data                          *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2013/02/13:16:28:52                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885420                                              !
!                                                                      *
!***********************************************************************
!***********************************************************************
! If you wish to load only a certain few employees, you must enter the *
! employee numbers into the panel "Employee Tax Reload Data" in the    *
! "Balances" menu of "Employee Payroll Data Canada".  When CTX910LD    *
! is run, it checks for entries in a table and processes those         *
! employees.  If there are no entries in the table, all employees are  *
! processed.                                                           *
!***********************************************************************
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init
#Include 'canrpt.sqc' !Canada-specific variables
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure

!**************************************
begin-report
!**************************************
  do Init-Report
  do Get-Load-Type

  If $None-loaded = 'N'
     do Process-Companies
  else
     print $Ctx910ld_Error_Load       (+1,15)
  end-if

  do Get-Current-DateTime
  display $SysDateTime

  do Delete-Reload-Options

#ifdef PRCSSCHD
  do StdAPI-Term
#endif
end-report

!**************************************
begin-procedure Init-Report
!**************************************
  display ''
  display 'Loading Canadian YearEnd Data Records'
  do Get-Calendar-Year-Id
  do Init-DateTime
  do Init-Number
#ifdef PRCSSCHD
  do StdAPI-Init
#endif

  move 'CTX910LD' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Ctx910ld_Title_Data_Excptn to $ReportTitle

  do Initialization

end-procedure

!**************************************
begin-procedure Report-Translation
!**************************************
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('CTX910LD', 'TITLE_DATA_EXCPTN' , $Ctx910ld_Title_Data_Excptn, #dummy_width)
  do Get_Field_Information ('CTX910LD', 'COMPANY'           , $Ctx910ld_Company          , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'TAX_YEAR'          , $Ctx910ld_Tax_year         , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'EMPL_ID'           , $Ctx910ld_Empl_id          , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'EMPL_NAME'         , $Ctx910ld_Empl_name        , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'SIN'               , $Ctx910ld_Sin              , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'FORM'              , $Ctx910ld_Form             , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'WLP'               , $Ctx910ld_Wlp              , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'PROV'              , $Ctx910ld_Prov             , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'REPORTING_ID'      , $Ctx910ld_Reporting_id     , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'BOX'               , $Ctx910ld_Box              , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'BOX_AMT'           , $Ctx910ld_Box_amt          , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'BOX_TXT'           , $Ctx910ld_Box_txt          , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'MESSAGE'           , $Ctx910ld_Message          , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'ERROR_EMPL'        , $Ctx910ld_Error_Empl       , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'ERROR_SLIP'        , $Ctx910ld_Error_Slip       , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'ERROR_DETAIL'      , $Ctx910ld_Error_Detail     , #dummy_width)
  do Get_Field_Information ('CTX910LD', 'ERROR_LOAD'        , $Ctx910ld_Error_Load       , #dummy_width)

end-procedure

!**************************************
begin-procedure Initialization
!**************************************
  do Get-Current-DateTime
  display $SysDateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear
  do Get-Can-Tax-Processing-Params
  move &TX.Balance_Year to $CalendarYear
  move &TX.Balance_Year to #CalendarYear
  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if
  move &TX.Balance_Year to #TaxYear
  move &TX.Balance_Year to $CalYear 9999
  extract $CalYr from $CalYear 2 2
  let $AsOfDate = $CalYear || '1231'
  let $BeginDate= $CalYear || '0101'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  do Format-DateTime($BeginDate, $BeginDate, {DEFCMP}, '', 'native')
  display 'As of Date is  ' noline
  display $AsOfDate

  move 0 to #Pension_Cntrb_Max
  do Array-Create
  do Array-Init-Pension
  do Initialize-T4-Array

  move ' ' to $ReleveSlipNo
  move ' ' to $Releve2SlipNo
  do Initialize-Employee-Data
  do Initialize-Slip-Data
  do Initialize-Detail-Data

  do Initialize-Can-Ye-Slip-Array
  do Initialize-Can-Ye-Detail-Array
  do Initialize-OI-Array
  do Initialize-Box26-Array

  move 0            to  #T4_Count
  move 0            to  #T4A_Count
  move 0            to  #RV1_Count
  move 0            to  #RV2_Count
  move 0            to  #TotalT4
  move 0            to  #TotalT4A
  move 0            to  #TotalRLV1
  move 0            to  #TotalRLV2
  move 0            to  #Total_Box26
  move 0            to  #p
  move 0            to  #G_Total
  move 0            to  #G2_Total

  do Load-Boxes
  do Load-CommonDed-Array
  do Get-Tax-Tbl-Info

  move 'Y' to $ErrorStart
  move 'N' to $QC_Yes
  move 'N' to $Cap_Yes

end-procedure

!**************************************
begin-heading 6
!**************************************
  #Include 'stdhdgtr.sqc'

 If $None-loaded = 'N'
  print $Ctx910ld_Company                   (3,1)
  print $priorCompany                       (0,+2)
  print $CompanyName                        (0,+2)
  let $TaxYear = $Ctx910ld_Tax_year || ' ' || $CalYear
  print $TaxYear                            (3,)  center
  print $Ctx910ld_Empl_id                   (6,1)
  print $Ctx910ld_Empl_name                 (0,15)
  print $Ctx910ld_Sin                       (0,65)
  print $Ctx910ld_Form                      (0,78)
  print $Ctx910ld_Wlp                       (0,88)
  print $Ctx910ld_Prov                      (0,95)
  print $Ctx910ld_Reporting_id              (0,106)
  print $Ctx910ld_Box                       (0,124)
  print $Ctx910ld_Box_amt                   (0,130)
  print $Ctx910ld_Box_txt                   (0,142)
  print $Ctx910ld_Message                   (0,153)
 end-if
end-heading

!**************************************
begin-procedure Array-Create
!**************************************

  create-array name=T4Box_Data size=253  -
    field=T4_Box:char                 -
    field=T4_ErnCd:char               -
    field=T4_ErnAmt:number            -
    field=T4_DedCd:char               -
    field=T4_DedClass:char            -
    field=T4_DedSlsTxClass:char       -
    field=T4_DedAmt:number            -
    field=T4_PlanType:char            -
    field=T4_BenPlan:char

  create-array name=T4ABox_Data size=220  -
    field=T4A_Box:char                 -
    field=T4A_ErnCd:char               -
    field=T4A_ErnAmt:number            -
    field=T4A_DedCd:char               -
    field=T4A_DedClass:char            -
    field=T4A_DedSlsTxClass:char       -
    field=T4A_DedAmt:number            -
    field=T4A_PlanType:char            -
    field=T4A_BenPlan:char

  create-array name=RV1Box_Data size=302  -
    field=RV1_Box:char                 -
    field=RV1_ErnCd:char               -
    field=RV1_ErnAmt:number            -
    field=RV1_DedCd:char               -
    field=RV1_DedClass:char            -
    field=RV1_DedSlsTxClass:char       -
    field=RV1_DedAmt:number            -
    field=RV1_PlanType:char

  create-array name=RV2Box_Data size=220 -
    field=RV2_Box:char                 -
    field=RV2_ErnCd:char               -
    field=RV2_ErnAmt:number            -
    field=RV2_DedCd:char               -
    field=RV2_DedClass:char            -
    field=RV2_DedSlsTxClass:char       -
    field=RV2_DedAmt:number            -
    field=RV2_PlanType:char            -
    field=RV2_BenPlan:char

  create-array name=Pension_Cntrb size=100   -
    field=PLAN_TYPE:char                     -
    field=Benefit_Plan:char                  -
    field=DEDCD:char                         -
    field=DED_CLASS:char                     -
    field=DED_SLSTX_CLASS:char               -
    field=YTD_Deds:number

  create-array name=Common_Dedcd size=130    -
    field=Ded_PlanType:char                  -
    field=Ded_Code:char                      -
    field=T4A_Box_Num:char

  create-array name=T4_Boxes size=133        -
    field=T4_Box_Num:char                    -
    field=T4_Box_Amt:number                  -
    field=T4_Box_Text:char

  create-array name=Can_Ye_Slip size = 10    -
    field=S_Company:char                     -
    field=S_Emplid:char                      -
    field=S_Cal_Yr:number                    -
    field=S_Taxform_id:char                  -
    field=S_WLP:char                         -
    field=S_Prov:char                        -
    field=S_Seq_No:number                    -
    field=S_Can_YE_Slip_Seq:number           -
    field=S_FN_Cnt:number                    -
    field=S_Rpt_ID:char                      -
    field=S_UI_Exempt:char                   -
    field=S_Proc_Flag:char                   -
    field=S_RL_Slip_No:char                  -
    field=S_CIT_To_T4A_Grs:number            -
    field=S_CIT_To_T4A_Tax:number            -
    field=S_Provenance:char                  -
    field=S_Provenance2:char                 -
    field=S_RL2_Slip_No:char

  create-array name=Can_Ye_Detail size = 200 -
    field=Company:char                       -
    field=Emplid:char                        -
    field=Cal_Yr:number                      -
    field=Taxform_id:char                    -
    field=WLP:char                           -
    field=Prov:char                          -
    field=Seq_No:number                      -
    field=Can_YE_Slip_Seq:number             -
    field=Box:char                           -
    field=Can_Ye_Box_Txt:char                -
    field=Can_Ye_Box_Amt:number

  create-array name=RL1OtherInfo size = 70 -
    field=RL1_OI_Box:char                  -
    field=RL1_OI_Amt:number

  create-array name=RL2OtherInfo size = 30 -
    field=RL2_OI_Box:char                  -
    field=RL2_OI_Amt:number

  create-array name=Prov_Box_26 size = 10    -
    field=P_Company:char                     -
    field=P_Emplid:char                      -
    field=P_Province:char                    -
    field=P_Cal_Yr:number                    -
    field=P_WLP:char                         -
    field=P_Balance_Period:number            -
    field=P_Box26_Amt:number                 -
    field=P_CPP_Contr:number                 -
    field=P_Update_Flag:char    

end-procedure

!**************************************
begin-procedure Load-Boxes
!**************************************

  move 0 to #t
  move 0 to #a
  move 0 to #r
  move 0 to #V
  move 0 to #TblErnAmt
  move 0 to #TblDedAmt

begin-SELECT
BL.BOX
BL.TAXFORM_ID
BL.EFFDT


  move 'N' to $ErnCdFound
  move 'N' to $DedCdFound

  do Get-Earnings-Numbers
  do Get-Deduction-Numbers

  if $ErnCdFound = 'N' and
     $DedCdFound = 'N'
       move ' ' to $TblErnCd
       move ' ' to $TblDedCd
       move ' ' to $TblDedClass
       move ' ' to $TblDedSlsTxClass
       move ' ' to $TblPlanType
       if &BL.Taxform_ID = 'T'
          do Load-T4-Boxes
       end-if
       if &BL.Taxform_ID = 'A'
          do Load-T4A-Boxes
       end-if
       if &BL.Taxform_ID = 'R'
          do Load-RV1-Boxes
       end-if
       if &BL.Taxform_ID = 'V'
          do Load-RV2-Boxes
       end-if
   end-if

FROM PS_TAXFORM_TBL TL,
     PS_TAXFORM_BOX BL
WHERE (BL.TAXFORM_ID = 'T' OR
       BL.TAXFORM_ID = 'A' OR
       BL.TAXFORM_ID = 'R' OR
       BL.TAXFORM_ID = 'V')
  AND TL.TAXFORM_ID = BL.TAXFORM_ID
  AND TL.EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_TAXFORM_TBL
      WHERE EFFDT <= $AsOfDate
        AND TAXFORM_ID = BL.TAXFORM_ID)
  AND TL.EFFDT = BL.EFFDT
ORDER BY BL.BOX ASC
end-SELECT

  display 'Records loaded to T4 Data Array = '   noline
  let $T4Rec = #max_t
  display $T4Rec

  display 'Records loaded to T4A Data Array = '   noline
  let $T4ARec = #max_a
  display $T4ARec

  display 'Records loaded to RL-1 Data Array = '   noline
  let $RV1Rec = #max_r
  display $RV1Rec

  display 'Records loaded to RL-2 Data Array = '   noline
  let $RV2Rec = #max_v
  display $RV2Rec

end-procedure


!**************************************
begin-procedure Get-Tax-Tbl-Info
!**************************************

  move 0 to #CPP_Max_Earns
  move 0 to #CPP_Exemption
  move 0 to #CPP_Min_Age
  move 0 to #CPP_Max_Age
  move 0 to #QPP_Max_Earns
  move 0 to #QPP_Exemption
  move 0 to #QPP_Min_Age
  move 0 to #QPP_Max_Age
  move 0 to #QPIP_Max_Earns

begin-SELECT
TT.CPP_MAX_EARNS
TT.CPP_BASIC_EXEM
TT.CPP_MIN_AGE
TT.CPP_MAX_AGE
TT.QPP_MAX_EARNS
TT.QPP_BASIC_EXEM
TT.QPP_MIN_AGE
TT.QPP_MAX_AGE
TT.QPP_EE_PCT
TT.UI_MAX_ANNL_EARNS
TT.QEI_MAX_ANNL_EARNS
TT.QPIP_MAX_ANNL_EARN

  move &TT.CPP_Max_Earns  to #CPP_Max_Earns
  move &TT.CPP_Basic_Exem to #CPP_Exemption
  move &TT.CPP_Min_Age    to #CPP_Min_Age
  move &TT.CPP_Max_Age    to #CPP_Max_Age
  move &TT.QPP_Max_Earns  to #QPP_Max_Earns
  move &TT.QPP_Basic_Exem to #QPP_Exemption
  move &TT.QPP_Min_Age    to #QPP_Min_Age
  move &TT.QPP_Max_Age    to #QPP_Max_Age
  move &TT.UI_Max_Annl_Earns  to #UI_Max_Annl_Earns
  move &TT.QEI_Max_Annl_Earns to #QC_UI_Max_Annl_Earns
  move &TT.QPIP_MAX_ANNL_EARN to #QPIP_Max_Earns

FROM PS_CAN_TAX_TBL TT
WHERE TT.EFFDT = (SELECT MAX(TT1.EFFDT)
                  FROM PS_CAN_TAX_TBL TT1
                  WHERE TT1.EFFDT <= $AsOfDate)
end-SELECT

  if ((#CPP_Max_Earns = 0) and
      (#CPP_Exemption = 0) and
      (#CPP_Min_Age   = 0) and
      (#CPP_Max_Age   = 0))

    display 'No Canadian Tax Table Information Found.   '
    display 'Ensure Tax Table Information is entered and'
    display 'then rerun the load program                '

  end-if

end-procedure

!**************************************
begin-procedure Get-Earnings-Numbers
!**************************************

begin-SELECT
EL.ERNCD

   move 'Y' to $ErnCdFound
   move &EL.ErnCd to $TblErnCd
   move ' ' to $TblDedCd
   move ' ' to $TblDedClass
   move ' ' to $TblDedSlsTxClass
   move ' ' to $TblPlanType
   if &BL.Taxform_ID = 'T'
      do Load-T4-Boxes
   end-if
   if &BL.Taxform_ID = 'A'
      do Load-T4A-Boxes
   end-if
   if &BL.Taxform_ID = 'R'
      do Load-RV1-Boxes
   end-if
   if &BL.Taxform_ID = 'V'
      do Load-RV2-Boxes
   end-if

FROM  PS_TAXFORM_ERN EL
WHERE EL.TAXFORM_ID = &BL.TAXFORM_ID
  AND EL.BOX        = &BL.BOX
  AND EL.EFFDT      = &BL.EFFDT

end-SELECT

end-procedure

!**************************************
begin-procedure Get-Deduction-Numbers
!**************************************

begin-SELECT
DL.PLAN_TYPE
DL.DEDCD
DL.DED_CLASS
DL.DED_SLSTX_CLASS

   move 'Y' to $DedCdFound
   move ' ' to $TblErnCd
   move &DL.DedCd to $TblDedCd
   move &DL.Ded_Class to $TblDedClass
   move &DL.Ded_SlsTx_Class to $TblDedSlsTxClass
   move &DL.Plan_Type to $TblPlanType

   if &BL.Taxform_ID = 'T'
      do Load-T4-Boxes
   end-if
   if &BL.Taxform_ID = 'A'
      do Load-T4A-Boxes
   end-if
   if &BL.Taxform_ID = 'R'
      do Load-RV1-Boxes
   end-if
   if &BL.Taxform_ID = 'V'
      do Load-RV2-Boxes
   end-if

FROM PS_TAXFORM_DED DL
WHERE DL.TAXFORM_ID = &BL.TAXFORM_ID
  AND DL.BOX        = &BL.BOX
  AND DL.EFFDT      = &BL.EFFDT
end-SELECT

end-procedure


!**************************************
begin-procedure Load-T4-Boxes
!**************************************

   put &BL.Box $TblErnCd #TblErnAmt $TblDedCd $TblDedClass $TblDedSlsTxClass #TblDedAmt
      $TblPlanType into T4Box_Data(#t) T4_Box T4_ErnCd T4_ErnAmt
      T4_DedCd T4_DedClass T4_DedSlsTxClass T4_DedAmt T4_PlanType

   move #t to #max_t
   add 1 to #t

end-procedure

!**************************************
begin-procedure Load-T4A-Boxes
!**************************************

   put &BL.Box $TblErnCd #TblErnAmt $TblDedCd $TblDedClass $TblDedSlsTxClass #TblDedAmt
      $TblPlanType into T4ABox_Data(#a) T4A_Box T4A_ErnCd T4A_ErnAmt
      T4A_DedCd T4A_DedClass T4A_DedSlsTxClass T4A_DedAmt T4A_PlanType

   move #a to #max_a
   add 1 to #a

end-procedure

!**************************************
begin-procedure Load-RV1-Boxes
!**************************************

   put &BL.Box $TblErnCd #TblErnAmt $TblDedCd $TblDedClass $TblDedSlsTxClass #TblDedAmt
      $TblPlanType into RV1Box_Data(#r) RV1_Box RV1_ErnCd RV1_ErnAmt
      RV1_DedCd RV1_DedClass RV1_DedSlsTxClass RV1_DedAmt RV1_PlanType

   move #r to #max_r
   add 1 to #r

end-procedure

!**************************************
begin-procedure Load-RV2-Boxes
!**************************************

   put &BL.Box $TblErnCd #TblErnAmt $TblDedCd $TblDedClass $TblDedSlsTxClass #TblDedAmt
      $TblPlanType into RV2Box_Data(#v) RV2_Box RV2_ErnCd RV2_ErnAmt
      RV2_DedCd RV2_DedClass RV2_DedSlsTxClass RV2_DedAmt RV2_PlanType

   move #v to #max_v
   add 1 to #v

end-procedure

!**************************************
begin-procedure Load-CommonDed-Array
!**************************************

begin-SELECT
DA.BOX
DT.PLAN_TYPE
DT.DEDCD

  move 0 to #i
  WHILE #i <= 130
     GET $TempType $TempCode from COMMON_DEDCD(#I)
                             DED_PLANTYPE DED_CODE
     if $TempType = &DT.Plan_Type and
        $TempCode = &DT.Dedcd
        break
     else
       if $TempType = ' ' or $TempType = ''
           PUT &DT.Plan_Type &DT.Dedcd &DA.Box INTO COMMON_DEDCD(#I)
                             DED_PLANTYPE DED_CODE T4A_BOX_NUM
        add 1 to #i
        move #i to #max_i
        break
       else
          add 1 to #i
        end-if
     end-if
   END-WHILE

FROM PS_TAXFORM_DED DT,
     PS_TAXFORM_DED DA
WHERE DT.TAXFORM_ID = 'T'
  AND DA.TAXFORM_ID = 'A'
  AND DT.DEDCD = DA.DEDCD
  AND (((DT.DED_CLASS = 'T' AND
       DT.DED_SLSTX_CLASS = 'B' AND
       DT.BOX > '29  '  AND
       DT.BOX < '43  ') AND
       (DA.DED_CLASS = 'T' AND
       DA.DED_SLSTX_CLASS = 'B' AND
       DA.BOX > '027 ' AND DA.BOX < '029 ')) OR
       (DT.BOX = DA.BOX AND
       (DT.DED_CLASS = 'A' AND
       DT.DED_SLSTX_CLASS = 'B' AND
       DT.BOX > '45  ' AND DT.BOX < '47  ') AND
       (DA.DED_CLASS = 'A' AND
       DA.DED_SLSTX_CLASS = 'B' AND
       DA.BOX > '045 ' AND DA.BOX < '047 ')) OR
       (DT.BOX = DA.BOX AND
       (DT.DED_CLASS = 'B' AND
       DT.DED_SLSTX_CLASS = 'B' AND
       DT.BOX > '45  ' AND DT.BOX < '47  ') AND
       (DA.DED_CLASS = 'B' AND
       DA.DED_SLSTX_CLASS = 'B' AND
       DA.BOX > '045 ' AND DA.BOX < '047 ')))
  AND DT.PLAN_TYPE = DA.PLAN_TYPE
  AND DT.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL DW
       WHERE  DW.TAXFORM_ID = DT.TAXFORM_ID
         AND  DW.EFFDT  <= $AsOfDate)
  AND DA.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL DX
       WHERE  DX.TAXFORM_ID = DA.TAXFORM_ID
         AND  DX.EFFDT  <= $AsOfDate)
  end-SELECT

  let #max_commonded = #i + 1
  move #max_commonded to $MaxCommonDed

end-procedure

!**************************************
begin-procedure Process-Companies
!**************************************

begin-SELECT
A.COMPANY   () on-break print=never after=After-Company

  move &A.Company   to $Company

  if $Reload-ind = 'A'
    do Delete-Data
  else
    do Delete-Reload-YE-Data
  end-if

  do Get-RV1-ReportingID
  move 'Y' to $JobBegin
  do Process-Each-Employee

  if $Reload-ind = 'A'
    do Find-EE-Ern-Ded-Bal
  else
    if $Reload-ind = 'E' or $Reload-ind = 'G'
      do Find-Ern-Ded-Bal-By-EE
    end-if
  end-if

FROM  PS_COMPANY_TBL A
WHERE EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
  AND  EFFDT  <= $AsOfDate)
end-SELECT

  display ' '
  display 'Final Grand Totals: '
  display 'Total T4 forms created  -  ' noline
  display #TotalT4
  display 'Total T4A forms created  -  ' noline
  display #TotalT4A
  display 'Total RL-1 forms created  -  ' noline
  display #TotalRLV1
  display 'Total RL-2 forms created  -  ' noline
  display #TotalRLV2

end-procedure

!**************************************
begin-procedure Get-RV1-ReportingID
!**************************************

  move ' ' to $Quebec_ID

begin-SELECT
RV.QUEBEC_ID_NO

   move &RV.Quebec_ID_No to $Quebec_ID

FROM PS_PQ_REPTNG_TBL RV
WHERE COMPANY = &A.COMPANY
  AND EFFDT = (SELECT MAX(EFFDT)
       FROM   PS_PQ_REPTNG_TBL
       WHERE  COMPANY = &A.COMPANY
         AND  EFFDT  <= $AsOfDate)
end-SELECT

end-procedure

!**************************************
begin-procedure After-Company
!**************************************

  display ''
  display ' Company Totals follow for Company  ' noline
  display $Company
  display ' Company T4 count = ' noline
  display #T4_Count
  display ' Company T4A count = ' noline
  display #T4A_Count
  display ' Company Releve1 count = ' noline
  display #RLV1_Count
  display ' Company Releve2 count = ' noline
  display #RV2_Count

  add #T4_Count to #TotalT4
  add #T4A_Count to #TotalT4A
  add #RLV1_Count to #TotalRLV1
  add #RV2_Count to #TotalRLV2
  move 0 to #T4_Count
  move 0 to #T4A_Count
  move 0 to #RLV1_Count
  move 0 to #RV2_Count
  move 0 to #SequenceNo
  move  ' ' to $SequenceNo

end-procedure

!**************************************
begin-procedure Process-Each-Employee
!**************************************

begin-SELECT
C.EMPLID
C.PROVINCE
C.WAGE_LOSS_PLAN
C.NLGRS_YTD
C.TXGRS_YTD
C.TAX_YTD
C.TAX_CLASS_CAN
C.BALANCE_PERIOD
W.CANADA_BN

  if $JobBegin = 'Y'
    move 'N' to $JobBegin
    do Save-Employee-Info

  else

    if RTRIM(&C.Emplid, ' ') <> $EmplID
     or ((RTRIM(&C.Emplid, ' ') = $EmplID) and (RTRIM(&C.Province, ' ') <> $Province))
     or ((RTRIM(&C.Emplid, ' ') = $EmplID) and (RTRIM(&C.Wage_Loss_Plan, ' ') <> $WageLossPlan))

       do Save-Empl-YTD-Data
       do Process-Empl-YTD-Data

       if (RTRIM(&C.Emplid, ' ') = $EmplID) and (RTRIM(&C.Province, ' ') <> $Province)
        or ((RTRIM(&C.Emplid, ' ') = $EmplID) and (RTRIM(&C.Wage_Loss_Plan, ' ') <> $WageLossPlan))
           do Load-Box26
       end-if         
            
       if RTRIM(&C.Emplid, ' ') <> $EmplID
          do Load-Box26  
          if #P > 0
            if #Total_Box26  > #CPP_Max_Earns              
              do Process-Box26
            end-if
          end-if

          if $QC_Yes = 'Y'
             do Process-BoxG2
          end-if
          do Process-RL-Records
          do After-Empl-Break
       end-if

       do Reset-Empl-YTD-Data
       do Save-Employee-Info
    else

       do Save-Empl-YTD-Data
    end-if
  end-if

  let $Empl-data-found = 'Y'
  let $TaxClass  = rtrim(&C.TAX_CLASS_CAN, ' ')
  let $NLGRS_YTD = &C.NLGRS_YTD
  let $TXGRS_YTD = &C.TXGRS_YTD
  let $TAX_YTD   = &C.TAX_YTD

FROM  PS_CAN_TAX_BALANCE C,
      PS_WAGELS_PLAN_TBL W
#ifdef MVS
  \$SLCTFROM\
#else
  [$SLCTFROM]
#endif
WHERE C.COMPANY         = &A.COMPANY
  AND C.BALANCE_ID   = $Calendar_Year_Id
  AND C.BALANCE_YEAR   = &TX.BALANCE_YEAR
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! If you are loading only selected employees, enter their employee numbers   x
! in the line(s) below and space out the exclamation point (!) in column 1   x
! of the lines containing the needed employee numbers.  Add a line for each  x
! employee number to be processed.  If only one employee is to be processed, x
! replace the word "or" with a right parenthesis ")" on the first line shown x
! below and remove the "!" from only that line.                              x
!
!REMEMBER to modify the DELETE paragraph or you will delete all of your data!x
!
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! AND (C.EmplID = 'aaaaaaaaaaaa' or
!      C.EmplID = 'bbbbbbbbbbbb' or
!      C.EmplID = 'cccccccccccc')
#ifdef MVS
  \$SELECT\
#else
  [$SELECT]
#endif
  AND C.BALANCE_PERIOD         =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  PROVINCE      = C.PROVINCE
         AND  WAGE_LOSS_PLAN = C.WAGE_LOSS_PLAN
         AND  TAX_CLASS_CAN = C.TAX_CLASS_CAN)
  AND W.WAGE_LOSS_PLAN  = C.WAGE_LOSS_PLAN
  AND W.COMPANY         = C.COMPANY
  AND W.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_WAGELS_PLAN_TBL
       WHERE  WAGE_LOSS_PLAN    = C.WAGE_LOSS_PLAN
         AND  COMPANY           = C.COMPANY
         AND  EFFDT            <= $AsOfDate)

ORDER BY C.EMPLID ASC , C.WAGE_LOSS_PLAN ASC , C.PROVINCE ASC
end-SELECT

  if $Empl-data-found = 'Y'
    do Save-Empl-YTD-Data
    do Process-Empl-YTD-Data
    do Load-Box26  
    if #P > 0
      if #Total_Box26  > #CPP_Max_Earns        
         do Process-Box26
      end-if
    end-if

    if $QC_Yes = 'Y'
       do Process-BoxG2
    end-if
    do Process-RL-Records
    do After-Empl-Break
    do Reset-Empl-YTD-Data
  end-if

end-procedure


!**************************************
begin-procedure Save-Employee-Info
!**************************************

  let $EmplID  = rtrim(&C.EmplID, ' ')

  let $BN = rtrim(&W.Canada_BN, ' ')
  if $BN <> ''
    move $BN to $Reporting_ID
  end-if

  let $Province = rtrim(&C.Province, ' ')
  if $Province = ''
    move ' ' to $Province
  end-if

  let $WageLossPlan = rtrim(&C.Wage_Loss_Plan, ' ')
  let #Balance_Period = &C.BALANCE_PERIOD

end-procedure


!**************************************
begin-procedure Process-Empl-YTD-Data
!**************************************

  do Initialize-Employee-T4-Data
  do Initialize-Employee-T4A-Data
  if rtrim($Province, ' ') = 'QC'
     do Initialize-Employee-RV1-Data
     do Initialize-Employee-RV2-Data
  end-if

  move #C.T4A_TxGrs_YTD to $T4agrs
  move #C.T4A_Tax_YTD to $T4atax
  if #C.T4A_TxGrs_YTD = 0 and
     #C.T4A_Tax_YTD = 0
        move 'N' to $T4A_Will_Process
  else
        move 'Y' to $T4A_Will_Process
  end-if

  move 'N' to $RV2_Will_Process

  do Load-Employee-Earnings
  do Load-Employee-Deductions

  do Process-T4-Data
  do Array-Init-Pension

  if $T4A_Will_Process = 'Y'
     do Process-T4A-Data
  end-if

  if rtrim($Province, ' ') = 'QC'
    do Process-Releve1-Data

    move #C.RV2_TxGrs_YTD to $RV2grs
    move #C.RV2_Tax_YTD to $RV2tax
    if #C.RV2_TxGrs_YTD <> 0 or
       #C.RV2_Tax_YTD <> 0
          move 'Y' to $RV2_Will_Process
    else
       if $EE_Ern_Fnd = 'Y' or $EE_Ded_Fnd = 'Y'
         move 'Y' to $RV2_Will_Process
       end-if
    end-if

    if $RV2_Will_Process = 'Y'
       do Process-RV2-Data
    end-if
  end-if

  do Array-Init-Pension

  let $Empl-data-found = 'N'

end-procedure


!**************************************
begin-procedure Load-box26
!**************************************

    let $Loadspace = ' '
    put &A.COMPANY $EmplID $Province &TX.BALANCE_YEAR $WageLossPlan #Balance_Period  
        #Save_Box26 #CPP_Contr $Loadspace into Prov_Box_26 (#p) P_Company P_Emplid P_Province 
        P_Cal_Yr P_WLP P_Balance_Period P_Box26_Amt P_CPP_Contr P_Update_Flag 

    if $Province = 'QC'
       add #Save_Box26 to #G_Total
       move 'Y' to $QC_Yes     
    else
       add #Save_Box26 to #G2_Total       
    end-if 

    move #p to #max_p
    add   1 to #p   
       
end-procedure


!**************************************
begin-procedure Save-Empl-YTD-Data
!**************************************

   evaluate $TaxClass
     when = 'CIT'
       let #C.CIT_Txgrs_YTD      =       $TXGRS_YTD
       let #C.CIT_Tax_YTD        =       $TAX_YTD
       break
     when = 'T4A'
       let #C.T4A_TxGrs_YTD      =       $TXGRS_YTD
       let #C.T4A_Tax_YTD        =       $TAX_YTD
       break
     when = 'QIT'
       let #C.QIT_Txgrs_YTD      =       $TXGRS_YTD
       let #C.QIT_Tax_YTD        =       $TAX_YTD
       break
     when = 'RV2'
       let #C.RV2_TxGrs_YTD      =       $TXGRS_YTD
       let #C.RV2_Tax_YTD        =       $TAX_YTD
       break
     when = 'CPP'
       let #C.CPP_NLGrs_YTD      =       $NLGRS_YTD
       let #C.CPP_Earns_YTD      =       $TXGRS_YTD
       let #C.CPP_Contrib_YTD    =       $TAX_YTD
       break
     when = 'QPP'
       let #C.QPP_NLGrs_YTD      =       $NLGRS_YTD
       let #C.QPP_Earns_YTD      =       $TXGRS_YTD
       let #C.QPP_Contrib_YTD    =       $TAX_YTD
       break
     when = 'EIE'
       let #C.UI_Earns_YTD       =       $TXGRS_YTD
       let #C.UI_Ee_Premium_YTD  =       $TAX_YTD
       break
     when = 'CPA'
       let #C.Pension_Adj_YTD    =       $TAX_YTD
       break
     when = 'QIE'
       let #PPIP_Earns_YTD       =       $TXGRS_YTD
       let #PPIP_Ee_Premium_YTD  =       $TAX_YTD
       let #QPIP_NLGrs_YTD       =       $NLGRS_YTD
       break
     when-other
       break
     end-evaluate

end-procedure


!**************************************
begin-procedure Reset-Empl-YTD-Data
!**************************************

  let #C.CIT_Txgrs_YTD      = 0
  let #C.CIT_Tax_YTD        = 0
  let #C.T4A_TxGrs_YTD      = 0
  let #C.T4A_Tax_YTD        = 0
  let #C.QIT_Txgrs_YTD      = 0
  let #C.QIT_Tax_YTD        = 0
  let #C.RV2_TxGrs_YTD      = 0
  let #C.RV2_Tax_YTD        = 0
  let #C.CPP_NLGrs_YTD      = 0
  let #C.CPP_Earns_YTD      = 0
  let #C.CPP_Contrib_YTD    = 0
  let #C.QPP_NLGrs_YTD      = 0
  let #C.QPP_Earns_YTD      = 0
  let #C.QPP_Contrib_YTD    = 0
  let #C.UI_Earns_YTD       = 0
  let #C.UI_Ee_Premium_YTD  = 0
  let #C.Pension_Adj_YTD    = 0
  let #PPIP_Earns_YTD       = 0
  let #PPIP_Ee_Premium_YTD  = 0
  let #QPIP_NLGrs_YTD       = 0

end-procedure


!**********************************
begin-procedure Process-Box26
!**********************************

    move 'Y' TO $Cap_Yes

                                             ! sorting array by balance period
   move 0 to #sorted
   while not #sorted
      move 0 to #moves
      move 0 to #low_idx
      while #low_idx < #max_p
         let #high_idx = #low_idx + 1
         get $Low_Company $Low_Emplid $Low_Province #Low_Cal_Yr $Low_WLP
             #Low_Balance_Period #Low_Box_26_Amt #Low_CPP_Contr $Low_Update_Flag
            from Prov_Box_26 (#low_idx) P_Company P_Emplid P_Province 
                                         P_Cal_Yr  P_WLP P_Balance_Period
                                         P_Box26_Amt P_CPP_Contr P_Update_Flag
         get $High_Company $High_Emplid $High_Province #High_Cal_Yr $High_WLP
              #High_Balance_Period #High_Box_26_Amt #High_CPP_Contr $High_Update_Flag
            from Prov_Box_26 (#high_idx) P_Company P_Emplid P_Province
                                         P_Cal_Yr  P_WLP P_Balance_Period
                                         P_Box26_Amt P_CPP_Contr P_Update_Flag

         if #Low_Balance_Period > #High_Balance_Period 
            put $Low_Company $Low_Emplid $Low_Province #Low_Cal_Yr $Low_WLP
                #Low_Balance_Period #Low_Box_26_Amt #Low_CPP_Contr $Low_Update_Flag
            into Prov_Box_26 (#high_idx) P_Company P_Emplid P_Province
                                         P_Cal_Yr  P_WLP P_Balance_Period
                                         P_Box26_Amt P_CPP_Contr P_Update_Flag
            put $High_Company $High_Emplid $High_Province #High_Cal_Yr $High_WLP  
                #High_Balance_Period #High_Box_26_Amt #High_CPP_Contr $High_Update_Flag
            into Prov_Box_26 (#low_idx) P_Company P_Emplid P_Province
                                         P_Cal_Yr  P_WLP P_Balance_Period
                                         P_Box26_Amt P_CPP_Contr P_Update_Flag
            add 1 to #moves
          end-if
          add 1 to #low_idx
      end-while
      if #moves = 0
         move 1 to #sorted
      end-if
   end-while

                                               ! capping box 26 in the array
   move 0 to #Tot_Pens_Earns
   move 0 TO #p

   while #p <= #max_p
    get #Prov_Box_26 #CPP_Contr from Prov_Box_26 (#p) P_Box26_Amt P_CPP_Contr
      if #CPP_Contr > 0    
        add #Prov_Box_26 to #Tot_Pens_Earns
        if #Tot_Pens_Earns > #CPP_Max_Earns
          let #Tot_Pens_Earns = #Tot_Pens_Earns - #Prov_Box_26 
          let #Prov_Box_26 = #CPP_Max_Earns - #Tot_Pens_Earns 
          add #Prov_Box_26 to #Tot_Pens_Earns
          let $LoadY = 'Y'
          if #Prov_Box_26 >=0 
            put #Prov_Box_26 $LoadY into Prov_Box_26 (#p) P_Box26_Amt P_Update_Flag
          end-if 
        end-if
      else 
        if #CPP_Contr = 0
          let $LoadY = 'Y'
          let #Prov_Box_26 = 0
          put #Prov_Box_26 $LoadY into Prov_Box_26 (#p) P_Box26_Amt P_Update_Flag
        end-if
      end-if

    add 1 to #p
   end-while

                                               ! updating box 26 in CAN_YE_DETAIL with array

    move 0 TO #p
    move 0 to #G_Total
    move 0 to #G2_Total
    while #p <= #max_p
       get $Company $EmplID $Province #CalendarYear $WLP #Box26_Amt #CPP_Contr $Update_Flag
           from Prov_Box_26(#p) P_Company P_Emplid P_Province P_Cal_Yr P_WLP 
           P_Box26_Amt P_CPP_Contr P_Update_Flag

       if $Update_Flag = 'Y'
          do Update-Slip-Detail-Record
       end-if

       if $Province = 'QC'
         add #Box26_Amt to #G_Total
       else
         add #Box26_Amt to #G2_Total
       end-if
       add 1 to #p
    end-while
            
end-procedure


!**************************************
begin-procedure After-Empl-Break
!**************************************

  if $EmplDataNeeded = 'Y'
        do Select-Employee-Data
        do Write-Employee-Data
        move 'N' to $EmplDataNeeded
  end-if

  move 'N'           to $QC_Yes
  move 'N'           to $Cap_Yes
  move 0             to #Total_Box26
  move 0             to #p
  move 0             to #G_Total
  move 0             to #G2_Total
  move 0             to #CPP_Contr

  do Initialize-Box26-Array

end-procedure


!**************************************
begin-procedure Process-RL-Records
!**************************************

  move 0 to #SlipSeqNo

  move 0 to #Num_Of_RL_Slip
  move 0 to #Num_Of_RL2_Slip

  move 0 to #RL1_OI_Idx
  move 0 to #RL2_OI_Idx

  let #Max_RL_Box_Amt = 9999999.99
  let $Additional_RL_Slip = 'Y'

  move 0 to #detail_idx
  while #detail_idx < #max_d

    get $iBox from Can_Ye_Detail(#detail_idx) Box

    if rtrim($iBox, ' ') = ''
      break
    else
      get $Company $EmplID #CalendarYear $TaxFormID $WageLossPlan $Province #SequenceNo #SlipSeqNo $Tbl_Box_Num $BoxText #BoxAmt
          from Can_Ye_Detail(#detail_idx)

    end-if

    add 1 to #detail_idx
  end-while


  move 0 to #detail_idx
  while #detail_idx < #max_d

    let #OverFlow_BoxAmt = 0

    get $iBox from Can_Ye_Detail(#detail_idx) Box

    if rtrim($iBox, ' ') = ''
      break
    else
      get $Company $EmplID #CalendarYear $TaxFormID $WageLossPlan $Province #SequenceNo #SlipSeqNo $Tbl_Box_Num $BoxText #BoxAmt
          from Can_Ye_Detail(#detail_idx)

        if rtrim($TaxFormID, ' ') = 'V' and rtrim($Tbl_Box_Num, ' ') = 'C' and
         (#BoxLExcess > 0 or #BoxOExcess > 0)
          let $BoxLOExcess_Processed = 'Y'
          add #BoxLExcess to #BoxAmt
          add #BoxOExcess to #BoxAmt
          let #BoxAmt = round(#BoxAmt, 2)
        end-if

        let $OI_Found = 'N'
        let $G_2_Zero = 'N'

        if rtrim($TaxFormID, ' ') = 'R'                  ! Save any RL-1 Other Info boxes
          let $Tbl_Box_Num = rtrim($Tbl_Box_Num, ' ')
          evaluate $Tbl_Box_Num          
            when = 'A-1'
            when = 'A-2'
            when = 'A-3'
            when = 'A-4'
            when = 'A-5'
            when = 'A-6'
            when = 'A-7'
            when = 'A-8'
            when = 'A-9'
            when = 'A-10'
            when = 'A-11'
            when = 'A-12'
            when = 'A-13'
            when = 'A-14'
            when = 'B-1'
            when = 'D-1'
            when = 'D-2'
            when = 'D-3'
            when = 'G-1'
            when = 'K-1'
            when = 'L-2'
            when = 'L-3'
            when = 'L-4'
            when = 'L-5'
            when = 'L-6'
            when = 'L-7'
            when = 'L-8'
            when = 'O-2'
            when = 'O-3'
            when = 'O-4'
            when = 'R-1'
            when = 'V-1'
            when = '201'
            when = '211'
            when = '235'
            when = 'CA'
            when = 'CB'
            when = 'CC'
            when = 'RA'
            when = 'RB'
            when = 'RC'
            when = 'RD'
            when = 'RG'
            when = 'RH'
            when = 'RI'
            when = 'RJ'
            when = 'RK'
            when = 'RL'
            when = 'RM'
            when = 'RN'
            when = 'RO'
            when = 'RP'
            when = 'RQ'
            when = 'RR'
            when = 'RS'
            when = 'RT'
            when = 'RU'
            when = 'RV'
            when = 'RX'

              put $Tbl_Box_Num #BoxAmt into RL1OtherInfo(#RL1_OI_Idx) RL1_OI_Box RL1_OI_Amt

              add 1 to #RL1_OI_Idx
              let $OI_Found = 'Y'

            when = 'G-2'

              if #BoxAmt > 0
                 put $Tbl_Box_Num #BoxAmt into RL1OtherInfo(#RL1_OI_Idx) RL1_OI_Box RL1_OI_Amt

                 add 1 to #RL1_OI_Idx
                 let $OI_Found = 'Y'
              else
                 let $G_2_Zero = 'Y'
              end-if

            when-other
              break
          end-evaluate
        end-if

        if rtrim($TaxFormID, ' ') = 'R' and rtrim($Tbl_Box_Num, ' ') = 'G' 
          if $Cap_Yes = 'Y'
            if #G_Total > #QPP_Max_Earns
              let #G_Total = #QPP_Max_Earns
            end-if 
            let #BoxAmt = #G_Total
          end-if
          if #G2_Total = #CPP_Max_Earns
            let #BoxAmt = 695.52
          end-if 
        end-if


        if rtrim($TaxFormID, ' ') = 'V'                  ! Save any RL-2 Other Info boxes
          let $Tbl_Box_Num = rtrim($Tbl_Box_Num, ' ')
          evaluate $Tbl_Box_Num          
            when = 'B-1'
            when = 'B-2'
            when = 'B-3'
            when = 'B-4'
            when = 'C-1'
            when = 'C-2'
            when = 'C-3'
            when = 'C-4A'
            when = 'C-4B'
            when = 'C-4C'
            when = 'C-4D'
            when = 'C-4E'
            when = 'C-4F'
            when = 'C-9'
            when = '210'
            when = '235'

              put $Tbl_Box_Num #BoxAmt into RL2OtherInfo(#RL2_OI_Idx) RL2_OI_Box RL2_OI_Amt

              add 1 to #RL2_OI_Idx
              let $OI_Found = 'Y'

            when-other
              break
          end-evaluate
        end-if

        if #BoxAmt > #Max_RL_Box_Amt       ! Test for overflow of RL box amount on 1 slip
          let $Additional_RL_Slip = 'Y'
          let #OverFlow_BoxAmt = #BoxAmt

          while #OverFlow_BoxAmt > 0
            if #OverFlow_BoxAmt >= #Max_RL_Box_Amt
              let #BoxAmt = #Max_RL_Box_Amt
            else
              let #BoxAmt = #OverFlow_BoxAmt
            end-if
            do Insert-SLIP-Detail-Record

            let #OverFlow_BoxAmt = #OverFlow_BoxAmt - #Max_RL_Box_Amt

            if rtrim($TaxFormID, ' ') = 'R'
              if #SlipSeqNo > #Num_Of_RL_Slip
                let #Num_Of_RL_Slip = #SlipSeqNo   ! Track the number of slip to insert later
              end-if
            else
              if rtrim($TaxFormID, ' ') = 'V'
                if #SlipSeqNo > #Num_Of_RL2_Slip
                  let #Num_Of_RL2_Slip = #SlipSeqNo
                end-if
              end-if
            end-if

            add 1 to #SlipSeqNo
          end-while

          do Initialize-Detail-Data
          let #OverFlow_BoxAmt = 0
          let #SlipSeqNo = 0

        else

          if $OI_Found = 'N'
             if rtrim($Tbl_Box_Num, ' ') = 'G-2'
               if $G_2_Zero = 'N' 
                  do Insert-SLIP-Detail-Record
                  do Initialize-Detail-Data
               end-if
             else
               do Insert-SLIP-Detail-Record
               do Initialize-Detail-Data                 
             end-if
          end-if  
        end-if
    end-if

    add 1 to #detail_idx
  end-while


  if (#BoxLExcess > 0 or #BoxOExcess > 0) and $BoxLOExcess_Processed <> 'Y'
    let $TaxFormID   = 'V'
    let $Tbl_Box_Num = 'C'
    let #BoxAmt =  #BoxLExcess + #BoxOExcess
    let #BoxAmt = round(#BoxAmt, 2)
    if #BoxAmt > #Max_RL_Box_Amt       ! Test for overflow of RL box amount on 1 slip
      let $Additional_RL_Slip = 'Y'
      let #OverFlow_BoxAmt = #BoxAmt

      while #OverFlow_BoxAmt > 0
        if #OverFlow_BoxAmt >= #Max_RL_Box_Amt
          let #BoxAmt = #Max_RL_Box_Amt
        else
          let #BoxAmt = #OverFlow_BoxAmt
        end-if
        do Insert-SLIP-Detail-Record

        let #OverFlow_BoxAmt = #OverFlow_BoxAmt - #Max_RL_Box_Amt
        if #SlipSeqNo > #Num_Of_RL2_Slip
          let #Num_Of_RL2_Slip = #SlipSeqNo
        end-if

        add 1 to #SlipSeqNo
      end-while

      do Initialize-Detail-Data
      let #OverFlow_BoxAmt = 0
      let #SlipSeqNo = 0

    else
      do Insert-SLIP-Detail-Record
      do Initialize-Detail-Data
    end-if

  end-if

  let $BoxLOExcess_Processed = 'N'
  let #BoxLExcess = 0
  let #BoxOExcess = 0

  move 0 to #RL1_OI_Idx
  move 0 to #RL1_OI_Count

  while #RL1_OI_Idx < #Max_RL1_OI                ! Determine slipseqno and Write RL-1 detail 

    get $RL1_OI_Box #RL1_OI_Amt from RL1OtherInfo(#RL1_OI_Idx) RL1_OI_Box RL1_OI_Amt

    if rtrim($RL1_OI_Box, ' ') = ''
      break
    else
      add 1 to #RL1_OI_Count
    end-if

    evaluate #RL1_OI_Count
      when = 1
      when = 2
      when = 3
      when = 4
        let #SlipSeqNo = 0
      when = 5
      when = 6
      when = 7
      when = 8
        let #SlipSeqNo = 1
      when = 9
      when = 10
      when = 11
      when = 12
        let #SlipSeqNo = 2
      when = 13
      when = 14
      when = 15
      when = 16
        let #SlipSeqNo = 3
      when = 17
      when = 18
      when = 19
      when = 20
        let #SlipSeqNo = 4
      when = 21
      when = 22
      when = 23
      when = 24
        let #SlipSeqNo = 5
      when = 25
      when = 26
      when = 27
      when = 28
        let #SlipSeqNo = 6
      when = 29
      when = 30
      when = 31
      when = 32
        let #SlipSeqNo = 7
      when = 33
      when = 34
      when = 35
      when = 36
        let #SlipSeqNo = 8
      when = 37
      when = 38
      when = 39
      when = 40
        let #SlipSeqNo = 9
      when = 41
      when = 42
      when = 43
      when = 44
        let #SlipSeqNo = 10
      when = 45
      when = 46
      when = 47
      when = 48
        let #SlipSeqNo = 11
      when = 49
      when = 50
      when = 51
      when = 52
        let #SlipSeqNo = 12
      when = 53
      when = 54
      when = 55
      when = 56
        let #SlipSeqNo = 13
      when = 57
      when = 58
      when = 59
      when = 60
        let #SlipSeqNo = 14
      when-other
        break
    end-evaluate

    if #SlipSeqNo > #Num_Of_RL_Slip
      let #Num_Of_RL_Slip = #SlipSeqNo
    end-if
   
    let $Province = 'QC'
    let $TaxformID = 'R'
    let $Tbl_Box_Num = $RL1_OI_Box
    let #BoxAmt = #RL1_OI_Amt

    do Insert-SLIP-Detail-Record
    do Initialize-Detail-Data

    let #SlipSeqNo = 0

    add 1 to #RL1_OI_Idx

  end-while

  move 0 to #RL2_OI_Idx
  move 0 to #RL2_OI_Count

  while #RL2_OI_Idx < #Max_RL2_OI                 ! Write RL-2 detail and which slip to write to

    get $RL2_OI_Box #RL2_OI_Amt from RL2OtherInfo(#RL2_OI_Idx) RL2_OI_Box RL2_OI_Amt

    if rtrim($RL2_OI_Box, ' ') = ''
      break
    else
      add 1 to #RL2_OI_Count
    end-if

    evaluate #RL2_OI_Count
      when = 1
      when = 2
      when = 3
      when = 4
        let #SlipSeqNo = 0
      when = 5
      when = 6
      when = 7
      when = 8
        let #SlipSeqNo = 1
      when = 9
      when = 10
      when = 11
      when = 12
        let #SlipSeqNo = 2
      when = 13
      when = 14
      when = 15
      when = 16
        let #SlipSeqNo = 3
      when = 17
      when = 18
      when = 19
      when = 20
        let #SlipSeqNo = 4
      when = 21
      when = 22
      when = 23
      when = 24
        let #SlipSeqNo = 5
      when-other
        break
    end-evaluate

    if #SlipSeqNo > #Num_Of_RL2_Slip
      let #Num_Of_RL2_Slip = #SlipSeqNo
    end-if

    let $TaxformID = 'V'
    let $Tbl_Box_Num = $RL2_OI_Box
    let #BoxAmt = #RL2_OI_Amt

    do Insert-SLIP-Detail-Record
    do Initialize-Detail-Data

    let #SlipSeqNo = 0

    add 1 to #RL2_OI_Idx

  end-while

  move 0 to #slip_idx
  while #slip_idx < #max_s

    get $iS_TaxFormID from Can_Ye_Slip(#slip_idx) S_Taxform_id

    if rtrim($iS_TaxFormID, ' ') = ''
      break
    else
      get $Company $EmplID #CalendarYear $TaxFormID $WageLossPlan $Province #SequenceNo #SlipSeqNo #FootnoteCount $Reporting_ID
         $UIExempt $ProcessFlag $ReleveSlipNo #Save_T4A_Grs #Save_T4A_Tax $Releve2_Provenance
         $Releve2_Provenance2 $Releve2SlipNo from Can_Ye_Slip(#slip_idx)

        do Insert-SLIP-ID-Record

        if $Additional_RL_Slip = 'Y'         !Insert additional slip for box amount overflow

          let #FootnoteCount = 0
          let $TaxFormID = rtrim($TaxFormID, ' ')
          evaluate $TaxFormID
          when = 'R'
            while #Num_Of_RL_Slip > 0
              let #SlipSeqNo = #Num_Of_RL_Slip
              do Insert-SLIP-ID-Record

              let #Num_Of_RL_Slip = #Num_Of_RL_Slip - 1
              add 1 to #RLV1_Count
            end-while
            break
          when = 'V'
            while #Num_Of_RL2_Slip > 0
              let #SlipSeqNo = #Num_Of_RL2_Slip
              do Insert-SLIP-ID-Record

              let #Num_Of_RL2_Slip = #Num_Of_RL2_Slip - 1
              add 1 to #RV2_Count
            end-while
            break
          end-evaluate
        end-if

        do Initialize-Slip-Data

        let $TaxFormID = rtrim($TaxFormID, ' ')
        evaluate $TaxFormID
        when = 'R'
           add 1 to #RLV1_Count
        when = 'V'
           add 1 to #RV2_Count
        when-other
           break
        end-evaluate

    end-if

   add 1 to #slip_idx
  end-while

  if #Can_Ye_Slip_Count   > 0
    do Initialize-Can-Ye-Slip-Array
  end-if

  if #Can_Ye_Detail_Count > 0
    do Initialize-Can-Ye-Detail-Array
  end-if

  do Initialize-OI-Array

end-procedure


!**************************************
begin-procedure Process-T4-Data
!**************************************

  do Initialize-T4-Array
  move 0 to #load

  move 'N' to $T4_Needed
  move 'C' to $ProcessFlag
  move 'T' to $TaxFormID
  move 'N' to $CPPExempt
  do Get-Can-Tax-Data
  do Get-Age-Birthday
  do Process-Tax-Balances
  do Process-T4-Boxes
  do Pensionable-Earnings
  move 0   to #PA_Dollars
  move ' ' to $PA_Reg_No
  move ' ' to $T4A_PA_Needed

  if #C.Pension_Adj_YTD <> 0
    let #PA_Dollars = #C.Pension_Adj_YTD
    do Get-PA-Reg-No
  end-if

  do Get-Plan-Reg-No
    if $Plan_Reg_No <> ' ' and
       $Plan_Reg_No <> ''
        move $Plan_Reg_No to $Array_Text
        move 0 to #BoxAmt
        let $Tbl_Box_Num   = '50A'
        do Load-T4-Array
        move ' ' to $Plan_Reg_No
     end-if
  do UI-Earnings
  do Pension-Adjustment

  if $T4_Needed = 'Y'
     do Unload-T4-Array

     if $T4_Needed = 'Y'   
        do Write-SLIP-ID-Data
     end-if
  end-if


end-procedure


!**************************************
begin-procedure Get-Can-Tax-Data
!**************************************
  move 'N' to $Can_Tax_Data_Found
  move 'N' to $Status_Indian_Ind

begin-SELECT
F.CPP_SUBJECT_MONTHS
F.UI_EXEMPT
F1.EMPL_RCD
F.STATUS_INDIAN
F.QPIP_EXEMPT
F.HIST_QPE_TAX_YTD
F.HIST_QPE_TXGRS_YTD
F.HIST_QPP_TAX_YTD
F.HIST_QPP_TXGRS_YTD


  move 'Y' to $Can_Tax_Data_Found
  move &F.Status_Indian to $Status_Indian_Ind

FROM  PS_CAN_TAX_DATA    F,
      PS_EMPL_WAGELS_CAN F1
WHERE F.EMPLID          = $EMPLID
  AND F.COMPANY         = &A.COMPANY
  AND F.EMPLID          = F1.EMPLID
  AND F.COMPANY         = F1.COMPANY
  AND F1.WAGE_LOSS_PLAN = $WAGELOSSPLAN
  AND F1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_EMPL_WAGELS_CAN
       WHERE  EMPLID  = F1.EMPLID
         AND  COMPANY = F1.COMPANY
         AND  WAGE_LOSS_PLAN = F1.WAGE_LOSS_PLAN
         AND  EFFDT  <= $AsOfDate)
  AND F.EFFDT           = F1.EFFDT
  AND F1.EMPL_RCD =
      (SELECT MIN(EMPL_RCD)
       FROM   PS_EMPL_WAGELS_CAN
       WHERE  EMPLID  = F.EMPLID
         AND  COMPANY = F.COMPANY
         AND  WAGE_LOSS_PLAN = F1.WAGE_LOSS_PLAN
         AND  EFFDT          = F.EFFDT)
end-SELECT

end-procedure

!**************************************
begin-procedure Process-Tax-Balances
!**************************************


  move #C.CPP_NLGrs_YTD to #Pension_NLGrs
  move #C.CPP_Earns_YTD to #Pensionable_Earns     ! Box 26

  move #C.Cit_TxGrs_YTD   to #Taxable_Gross       ! Box 14

  move #C.Cit_Tax_YTD   to #Income_Tax            ! Box 22
     let #BoxAmt = #Income_Tax
     let $Tbl_Box_Num = '22'
     let $Array_Text = ' '
     move #Income_Tax to #Save_T4A_Tax
     if #Income_Tax <> 0
        do Load-T4-Array
 !      if $T4A_Will_Process = 'N'
           move 'Y' to $T4_Needed
 !      end-if
     end-if


  if #C.CPP_Contrib_YTD <> 0
     let #BoxAmt = #C.CPP_Contrib_YTD
     let $Tbl_Box_Num = '16'
     let $Array_Text = ' '
     move 'Y' to $T4_Needed
     do Load-T4-Array
  end-if

  if #C.QPP_Contrib_YTD <> 0
    let #BoxAmt =  #C.QPP_Contrib_YTD
     let $Tbl_Box_Num = '17'
     let $Array_Text = ' '
     move 'Y' to $T4_Needed
     do Load-T4-Array
  end-if


  move #C.UI_Ee_Premium_YTD to #UI_Contrib        ! Box 18
  if #UI_Contrib <> 0
    let #BoxAmt =  #UI_Contrib
     let $Tbl_Box_Num = '18'
     let $Array_Text = ' '
     move 'Y' to $T4_Needed
     do Load-T4-Array
  end-if

  if $Can_Tax_Data_Found = 'Y'                    ! Box 28c
    if &F.CPP_Subject_Months = 0
            and #C.CPP_Contrib_YTD = 0            !from box 16
            and #Pensionable_Earns = 0   !Pensionable_Earns from Box 26

      move 'Y' to $CPPExempt

      if #Empl_Age > 64              and 
         #Empl_Age < 70              and
         &F.CPP_Subject_Months = 0   and
         rtrim($Province, ' ') <> 'QC'
         let $BoxText  = ' '
         let $Array_Text  = ' '
      else
         let $BoxText  = 'X'
         let $Array_Text  = 'X'
      end-if

      let #BoxAmt = 0
      let $Box28c =  $BoxText
      let $Tbl_Box_Num   = '28C'
      do Load-T4-Array
    end-if
  end-if


  if $Can_Tax_Data_Found = 'Y'           ! Box 28u
    if &F.UI_Exempt  = 'Y'
            and #UI_Contrib = 0          ! #UI_Contrib from Box 18
            and #C.UI_Earns_YTD = 0      ! Box 24

      move 'Y' to $UIExempt
      let $BoxText = 'X'
      let $Array_Text  = 'X'
      let #BoxAmt = 0
      let $Box28u =  $BoxText
      let $Tbl_Box_Num   = '28U'
      do Load-T4-Array
    else
      move 'N' to $UIExempt
      let $BoxText  = ' '
      let #BoxAmt = 0
    end-if
  else
    move 'N' to $UIExempt
  end-if

  if $Can_Tax_Data_Found = 'Y'                    ! Box 28P
    if &F.QPIP_EXEMPT = 'Y' and rtrim($Province, ' ') = 'QC'
            and #PPIP_Ee_Premium_YTD  = 0         !from box 55
            and #PPIP_Earns_YTD = 0               !from Box 56

      move 'Y' to $PPIPExempt
      let $BoxText  = 'X'
      let $Array_Text  = 'X'
      let #BoxAmt = 0
      let $Box28p =  $BoxText
      let $Tbl_Box_Num   = '28P'
      do Load-T4-Array
    else
      move 'N' to $PPIPExempt
      let $BoxText  = ' '
      let #BoxAmt = 0
    end-if
  else
    move 'N' to $PPIPExempt
  end-if


  if #PPIP_Ee_Premium_YTD <> 0                    ! Box 55
    let #BoxAmt = #PPIP_Ee_Premium_YTD
    let $Tbl_Box_Num = '55'
    let $Array_Text  = ' '
    move 'Y' to $T4_Needed
    do Load-T4-Array
  end-if

  if #PPIP_Earns_YTD <> 0
    let #BoxAmt = #PPIP_Earns_YTD                 ! Box 56
    let $Tbl_Box_Num = '56'
    let $Array_Text  = ' '
    move 'Y' to $T4_Needed
    do Load-T4-Array
  end-if

  if #BoxAmt < -.00001
     if $Tbl_Box_Num <> '50' and $Tbl_Box_Num <> '50A'
        move 'V' to $ProcessFlag
     end-if
  end-if


end-procedure

!**************************************
begin-procedure Process-T4-Boxes
!**************************************

  move ' ' to $PriorBox
  move 0 to #t
  move 0 to #Box_Value
  move 0 to #Save_StatusInd_Amt
  move 0 to #Save_Box71_Amt
  move 0 to #Save_Box81_Amt
  move 0 to #Box71_Amt
  move 0 to #Save_Box14_Amt
  move 0 to #Save_Box66_Amt
  move 0 to #Save_Box67_Amt
  move 0 to #Box14_Amt


  while #t <= #max_t
    get $T4Box #T4ErnAmt #T4DedAmt from T4Box_Data(#t) T4_Box
                                           T4_ErnAmt T4_DedAmt

    if $T4Box = ' '
       do Distribute-Box-Process-T4
    else
       if $T4Box > $PriorBox and
          $PriorBox <> ' '
          do Distribute-Box-Process-T4
       end-if
       move $T4Box to $PriorBox
       add #T4ErnAmt to #Box_Value
       add #T4DedAmt to #Box_Value

!       if $T4Box = '20' and
        if RTRIM($T4Box, ' ') = '50' and
           #T4DedAmt <> 0
           get $PenDedCd $PenDedClass $PenDedSlsTxClass $PenPlanType $PenBenPlan from
              T4Box_Data(#t) T4_DedCd T4_DedClass T4_DedSlsTxClass T4_PlanType T4_BenPlan
           move #T4DedAmt to #PenAmt
      if #Pension_Cntrb_Idx > 99
         display 'Pension table overflow for employee ' noline
         display $EmplID  noline
         display '  for taxform ID  T  and box ' noline
         display $T4Box
      end-if
           do Save-Pension-Data
        end-if
       add 1 to #t
    end-if
  end-while

  if $PriorBox <> ' '
    do Distribute-Box-Process-T4
  end-if

  let #Box71_Amt = #Save_Box71_Amt + #Save_StatusInd_Amt
  if  #Box71_Amt > 0
    move #Box71_Amt to #BoxAmt
    move '71'       to $Tbl_Box_Num
    do Load-T4-Array
    move 'Y' to $T4_Needed
  end-if


  let #Box14_Amt = #Save_Box14_Amt - (#Save_Box67_Amt + #Save_Box66_Amt)
  if  #Box14_Amt > 0
    move #Box14_Amt       to #BoxAmt
    move '14'             to $Tbl_Box_Num
    do Load-T4-Array
    move 'Y' to $T4_Needed
  end-if



end-procedure

!**************************************
begin-procedure Distribute-Box-Process-T4
!**************************************


  let  $Tbl_Box_Num = RTRIM($PriorBox, ' ')

  evaluate $Tbl_Box_Num

    when = '10'        ! These boxes contain either totals from tax
    when = '12'        ! tables or identifying, non-monetary data from
    when = '16'        ! other sources.  Earnings and Deductions are
    when = '17'        ! not to be accumulated for these boxes.
    when = '18'
    when = '22'
    when = '24'
    when = '26'
    when = '28C'
    when = '28c'
    when = '28U'
    when = '28u'
    when = '28P'
!   when = '50'
    when = '52'
    when = '54'
    when = '55'
    when = '56'

       break

    when = '14'

! Taxable_Gross from Can Tax Balance is reduced by various
! amounts which may be added back in here

      add #Taxable_Gross to #Box_Value
      let #Box14 = #Box_Value
      let #Taxable_Income = #Box_Value

      if #Box_Value > 0
        if $Status_Indian_Ind  = 'Y'
          let #Save_StatusInd_Amt = #Box_Value
        else
          let #Taxable_Income = #Box_Value
          move #Box_Value to #BoxAmt
          move #Box_Value to #Save_T4A_Grs
        end-if

        move #BoxAmt to #Save_Box14_Amt
      end-if
      break

   when = '39'
   when = '41'


     let #Box_Value = .5 * #Box_Value
     let #Box_Value = Round(#Box_Value,2)

      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Load-T4-Array
        move 'Y' to $T4_Needed
      end-if
      break

   when = '66'
      let #Save_Box66_Amt =  #Box_Value
      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Load-T4-Array
        move 'Y' to $T4_Needed
      end-if
      break

   when = '67'
      let #Save_Box67_Amt =  #Box_Value
      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Load-T4-Array
        move 'Y' to $T4_Needed
      end-if
      break


   when = '71'

      let #Save_Box71_Amt =  #Box_Value
      break

   when = '81'
      let #Save_Box81_Amt =  #Box_Value

      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Load-T4-Array
        move 'Y' to $T4_Needed
      end-if
      break

   when-other

      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Load-T4-Array
        move 'Y' to $T4_Needed
      end-if

  end-evaluate

  if #Box_Value < -.00001
     if $Tbl_Box_Num <> '50' and $Tbl_Box_Num <> '50A'
        move 'V' to $ProcessFlag
     end-if
  end-if

  move 0 to #Box_Value
  move 0 to #BoxAmt
  move ' ' to $BoxText

end-procedure

!**************************************
begin-procedure Pensionable-Earnings
!**************************************

  let #Taxable_Income = Round(#Taxable_Income,2)           !npa 1

  do Get-Age-Birthday

  if rtrim($Province, ' ') = 'QC'

    if ((($CPPExempt = 'N') and
         (#C.QPP_Contrib_YTD = 0)) and
        ((#Empl_Age < #QPP_Min_Age) or
         (#Empl_Age > #QPP_Max_Age)))
      move 'Y' to $CPPExempt

      if #Empl_Age > 64              and 
         #Empl_Age < 70              and
         &F.CPP_Subject_Months = 0   and
         rtrim($Province, ' ') <> 'QC'
         let $BoxText  = ' '
         let $Array_Text  = ' '
      else
         let $BoxText  = 'X'
         let $Array_Text  = 'X'
      end-if

      let #BoxAmt = 0
      let $Box28c =  $BoxText
      let $Tbl_Box_Num   = '28C'
      do Load-T4-Array

      move ' ' to $BoxText
      move 0 to #BoxAmt
      let #Box26 = 0
      let $Box26 = $BoxText
      let $Tbl_Box_Num   = '26'
      do Load-T4-Array

    end-if

    move #QPP_Min_Age to #Min_Age
    move #QPP_Max_Age to #Max_age

    if #Empl_Age = #QPP_Min_Age or #Empl_Age = #QPP_Max_Age !Box 26

      move #C.QPP_NLGrs_YTD to #Pension_NLGrs
      let #Pensionable_Earns = Round(#Pension_NLGrs, 2)

      if #Empl_Age = #QPP_Min_Age
        let #BirthMonth = 12 - #BirthMonth
      end-if
      let #Prorated_Max_Earns = #QPP_Max_Earns * (#BirthMonth/12)
      let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)

      do Box26-Min-Max-Age

    else

      let #tempBox26 = Round(#C.QPP_NLGrs_YTD,2)

      let #Prorated_Max_Earns = #QPP_Max_Earns * (&F.CPP_Subject_Months/12)
      let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)

      do Process-CPP-Earns-Subject-Mon
    end-if
  else

    if ((($CPPExempt = 'N') and
         (#C.CPP_Contrib_YTD = 0)) and
        ((#Empl_Age < #CPP_Min_Age) or
         (#Empl_Age > #CPP_Max_Age)))
      move 'Y' to $CPPExempt

      if #Empl_Age > 64              and 
         #Empl_Age < 70              and
         &F.CPP_Subject_Months = 0   and
         rtrim($Province, ' ') <> 'QC'
         let $BoxText  = ' '
         let $Array_Text  = ' '
      else
         let $BoxText  = 'X'
         let $Array_Text  = 'X'
      end-if

      let #BoxAmt = 0
      let $Box28c =  $BoxText
      let $Tbl_Box_Num   = '28C'
      do Load-T4-Array

      move ' ' to $BoxText
      move 0 to #BoxAmt
      let #Box26 = 0
      let $Box26 = $BoxText
      let $Tbl_Box_Num   = '26'
      do Load-T4-Array

    end-if

    move #CPP_Min_Age to #Min_Age
    move #CPP_Max_Age to #Max_age

    if #Empl_Age = #CPP_Min_Age or #Empl_Age = #CPP_Max_Age !Box 26

      let #Pensionable_Earns = Round(#Pension_NLGrs, 2)

      if #Empl_Age = #CPP_Min_Age
        let #BirthMonth = 12 - #BirthMonth
      end-if
      let #Prorated_Max_Earns = #CPP_Max_Earns * (#BirthMonth/12)
      let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)

      do Box26-Min-Max-Age
    else

      let #tempBox26 = Round(#C.CPP_NLGrs_YTD,2)

      let #Prorated_Max_Earns = #CPP_Max_Earns * (&F.CPP_Subject_Months/12)
      let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)

      do Process-CPP-Earns-Subject-Mon
    end-if
  end-if

end-procedure


!**************************************
begin-procedure Process-CPP-Earns-Subject-Mon
!**************************************

  let #tempBox26 =  Round(#tempBox26,2)
  let #Taxable_Income = Round(#Taxable_Income,2)

  if &F.CPP_Subject_Months = 12

    if ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 <> #Taxable_Income) and
      (#tempBox26 >= 0.00)) or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      ($Status_Indian_Ind  = 'Y') and
      (#tempBox26 >= 0.00)) or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 = #Taxable_Income) and
      (#tempBox26 >= 0.00) and #Save_Box81_Amt > 0)  or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 = #Taxable_Income) and
      (#tempBox26 >= 0.00) and #Save_Box67_Amt > 0)  or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 = #Taxable_Income) and
      (#tempBox26 >= 0.00) and #Save_Box66_Amt > 0)  or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 = #Taxable_Income) and
      (#tempBox26 >= 0.00) and #C.CPP_Contrib_YTD >= 0)  or

      ((#Empl_Age > #Min_Age) and
      (#Empl_Age < #Max_Age) and
      (#tempBox26 = #Taxable_Income) and
      (#tempBox26 >= 0.00) and #C.QPP_Contrib_YTD >= 0)

       if rtrim($Province, ' ') <> 'QC'

        if #tempBox26 < #CPP_Max_Earns
           move ' ' to $BoxText
           if $CPPExempt = 'Y'
              move 0 to #BoxAmt
              let #Box26 = 0
           else
              move #tempBox26 to #BoxAmt
              let #Box26 = #tempBox26
           end-if
           let $Box26 = $BoxText
           let $Tbl_Box_Num   = '26'
           if #C.T4A_TxGrs_YTD = 0
              move 'Y' to $T4_Needed
           end-if

           do Load-T4-Array

        else
          if $Status_Indian_Ind = 'Y'
            let #BoxAmt = #CPP_Max_Earns
            let $Box26 = $BoxText
            let $Tbl_Box_Num   = '26'
            move 'Y' to $T4_Needed
            do Load-T4-Array
          end-if
        end-if
      else                                ! QC
         if #tempBox26 < #QPP_Max_Earns
           move ' ' to $BoxText
           if $CPPExempt = 'Y'
              move 0 to #BoxAmt
              let #Box26 = 0
           else
              move #tempBox26 to #BoxAmt
              let #Box26 = #tempBox26
           end-if
           let $Box26 = $BoxText
           let $Tbl_Box_Num   = '26'
           if #C.T4A_TxGrs_YTD = 0
              move 'Y' to $T4_Needed
           end-if
           do Load-T4-Array

         else
          if $Status_Indian_Ind = 'Y'
            let #BoxAmt = #QPP_Max_Earns
            let $Box26 = $BoxText
            let $Tbl_Box_Num   = '26'
            move 'Y' to $T4_Needed
            do Load-T4-Array
          end-if
        end-if
      end-if

      if #Taxable_Income >= 0       and
         $Status_Indian_Ind = 'N'
         if #tempBox26 > #CPP_Max_Earns
            let #BoxAmt = #CPP_Max_Earns
            let $Box26 = $BoxText
            let $Tbl_Box_Num   = '26'
            move 'Y' to $T4_Needed
            do Load-T4-Array
         end-if
      end-if
    end-if
  else
    if &F.CPP_Subject_Months > 0 and &F.CPP_Subject_Months < 12
      if (#Empl_Age > #Min_Age) and
        (#Empl_Age < #Max_Age)
            do CPP-Earns-LT-12-Mon
      end-if
    else

      move ' ' to $BoxText
      move 0 to #BoxAmt
      let #Box26 = 0
      let $Box26 = $BoxText
      let $Tbl_Box_Num   = '26'
      do Load-T4-Array
    end-if
  end-if

end-procedure


!**************************************
begin-procedure Get-Age-Birthday
!**************************************

begin-SELECT
PD.BIRTHDATE

FROM  PS_PERSON PD
WHERE PD.EMPLID = $EMPLID
end-SELECT

  do Format-DateTime(&PD.BirthDate, $BirthDate, {DEFCMP}, '', '')
  let $BirthYear  = substr($BirthDate, 1, 4)
  let $BirthMonth = substr($BirthDate, 5, 2)
  move $BirthYear  to #BirthYear
  move $BirthMonth to #BirthMonth
  let #Empl_Age = (#TaxYear - #BirthYear)

end-procedure


!**************************************
begin-procedure Box26-Min-Max-Age
!**************************************

  if #Empl_Age = #Max_Age

    if (#Pensionable_Earns >= 0.00)
      move ' ' to $BoxText
      if $CPPExempt = 'Y'
        move 0 to #BoxAmt
        let #Box26 = 0

        let $Box26 = $BoxText
        let $Tbl_Box_Num   = '26'
        if #C.T4A_TxGrs_YTD = 0
          move 'Y' to $T4_Needed
        end-if
        do Load-T4-Array
      else
        if (#Pensionable_Earns <> #Taxable_Income) or ($Status_Indian_Ind  = 'Y' and #Pensionable_Earns >= 0)
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Save_Box81_Amt > 0) )
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Save_Box67_Amt > 0) )
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Save_Box66_Amt > 0) )
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Pensionable_Earns >= 0) )

          if #Pensionable_Earns > #Prorated_Max_Earns
            let #Pensionable_Earns = #Prorated_Max_Earns
          end-if

          move #Pensionable_Earns to #BoxAmt
          let #Box26 = #Pensionable_Earns

          let $Box26 = $BoxText
          let $Tbl_Box_Num   = '26'
          if #C.T4A_TxGrs_YTD = 0
            move 'Y' to $T4_Needed
          end-if
          do Load-T4-Array
        end-if
      end-if

    end-if
  end-if

  if #Empl_Age = #Min_Age
    if (#Pensionable_Earns >= 0.00)
      move ' ' to $BoxText
      if $CPPExempt = 'Y'
        move 0 to #BoxAmt
        let #Box26 = 0

        let $Box26 = $BoxText
        let $Tbl_Box_Num   = '26'
        if #C.T4A_TxGrs_YTD = 0
          move 'Y' to $T4_Needed
        end-if
        do Load-T4-Array
      else
        if (#Pensionable_Earns <> #Taxable_Income) or ($Status_Indian_Ind  = 'Y' and #Pensionable_Earns >= 0)
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Save_Box81_Amt > 0) )
         or ( (#Pensionable_Earns = #Taxable_Income) and (#Pensionable_Earns >= 0) )

          if #Pensionable_Earns > #Prorated_Max_Earns
            let #Pensionable_Earns = #Prorated_Max_Earns
          end-if

          move #Pensionable_Earns to #BoxAmt
          let #Box26 = #Pensionable_Earns

          let $Box26 = $BoxText
          let $Tbl_Box_Num   = '26'
          if #C.T4A_TxGrs_YTD = 0
            move 'Y' to $T4_Needed
          end-if
          do Load-T4-Array
        end-if
      end-if

    else

      move 'Y' to $CPPExempt

      if #Empl_Age > 64              and 
         #Empl_Age < 70              and
         &F.CPP_Subject_Months = 0   and
         rtrim($Province, ' ') <> 'QC'
         let $BoxText  = ' '
         let $Array_Text  = ' '
      else
         let $BoxText  = 'X'
         let $Array_Text  = 'X'
      end-if

      let #BoxAmt = 0
      let $Box28c =  $BoxText
      let $Tbl_Box_Num   = '28C'
      do Load-T4-Array

      move ' ' to $BoxText
      move 0 to #BoxAmt
      let #Box26 = 0
      let $Box26 = $BoxText
      let $Tbl_Box_Num   = '26'
      do Load-T4-Array

    end-if
  end-if

end-procedure


!**************************************
begin-procedure CPP-Earns-LT-12-Mon
!**************************************

  move 'N' to $ProcessBox26
  if rtrim($Province, ' ') = 'QC'
    if #C.QPP_EARNS_YTD >= 0
      move 'Y' to $ProcessBox26
    end-if
  else
    if #C.CPP_EARNS_YTD >= 0
      move 'Y' to $ProcessBox26
   end-if
  end-if

  if (#tempBox26 >= 0.0) and ($ProcessBox26 = 'Y')

    move ' ' to $BoxText
    if $CPPExempt = 'Y'
      move 0                to #BoxAmt
    else
      if #tempBox26 > #Prorated_Max_Earns
       let #tempBox26 = #Prorated_Max_Earns
      end-if
      move #tempBox26       to #BoxAmt
    end-if
    let #Box26 = #BoxAmt
    let $Tbl_Box_Num   = '26'
    if #C.T4A_TxGrs_YTD = 0
      move 'Y' to $T4_Needed
    end-if
    do Load-T4-Array
  end-if

end-procedure


!**************************************
begin-procedure UI-Earnings
!**************************************

  move #C.UI_Earns_YTD  to #UI_Earns            ! Box 24
  let #UI_Earns       = round(#UI_Earns,2)
  let #Taxable_Income = round(#Taxable_Income,2)
  if (#UI_Earns <> #Taxable_Income and
      #UI_Earns >= 0) or
     ($Status_Indian_Ind  = 'Y' and #UI_Earns >= 0) or
     (#UI_Earns = #Taxable_Income and
      #UI_Earns >= 0 and #Save_Box81_Amt > 0) or
     (#UI_Earns = #Taxable_Income and
      #UI_Earns >= 0)

     if rtrim($Province, ' ') = 'QC'

       if #UI_Earns <  #QC_UI_Max_Annl_Earns
         move #UI_Earns to #Box24
         move #UI_Earns to #BoxAmt
       else
         move #QC_UI_Max_Annl_Earns  to #Box24
         move #QC_UI_Max_Annl_Earns  to #BoxAmt
       end-if

     else

       if #UI_Earns <  #UI_Max_Annl_Earns
         move #UI_Earns to #Box24
         move #UI_Earns to #BoxAmt
       else
         move #UI_Max_Annl_Earns to #Box24
         move #UI_Max_Annl_Earns to #BoxAmt
       end-if

     end-if

     let $Tbl_Box_Num = '24'
     move 'Y' to $T4_Needed
     do Load-T4-Array
  end-if


  if #UI_Earns < -.00001
     if $Tbl_Box_Num <> '50' and $Tbl_Box_Num <> '50A'
        move 'V' to $ProcessFlag
     end-if
  end-if

end-procedure


!**************************************
begin-procedure Load-T4-Array
!**************************************

  if $Tbl_Box_Num = '26' 
     let #Save_Box26 = #BoxAmt
     add #BoxAmt to #Total_Box26
  end-if

  if $Tbl_Box_Num = '16' or $Tbl_Box_Num = '17'
     move #BoxAmt to #CPP_Contr 
  end-if  

       put $Tbl_Box_Num #BoxAmt $Array_Text into T4_Boxes(#load)
             T4_Box_Num T4_Box_Amt T4_Box_Text
       add 1 to #load

       move ' ' to $Tbl_Box_Num
       move ' ' to $Array_Text
       move 0 to #BoxAmt

  move #load to #max_unload

end-procedure

!**************************************
begin-procedure Unload-T4-Array
!**************************************


  move 0 to #load
  move 0 to #unload

  move 'N' to $T4_needed
  while #unload <= #max_unload
     get $Tbl_Box_Num #BoxAmt $BoxText from T4_Boxes(#unload)
                          T4_Box_Num T4_Box_Amt T4_Box_Text

     if $Tbl_Box_Num = ' ' or $Tbl_Box_Num = ''
         break
     end-if
     if $Tbl_Box_Num <> '24' and $Tbl_Box_Num <> '26' and 
        $Tbl_Box_Num <> '28' and $Tbl_Box_Num <> '28C' and
        $Tbl_Box_Num <> '28U' and $Tbl_Box_Num <> '28P'
         move 'Y' to $T4_needed
         break
     end-if
     add 1 to #unload
  end-while
  move 0 to #unload

  if $t4_needed='Y' 
    while #unload <= #max_unload
       get $Tbl_Box_Num #BoxAmt $BoxText from T4_Boxes(#unload)
                            T4_Box_Num T4_Box_Amt T4_Box_Text
       if $Tbl_Box_Num = ' ' or $Tbl_Box_Num = ''
          break
       else
          if $Tbl_Box_Num <> '50' and $Tbl_Box_Num <> '14'
            if  $Tbl_Box_Num = '50A'
              move '50' to $Tbl_Box_Num
            end-if
            do Write-SLIP-Detail-Data
          end-if

          if $Tbl_Box_Num = '14' and  #Save_Box81_Amt = 0
            do Write-SLIP-Detail-Data
          end-if

          add 1 to #unload
       end-if
    end-while
  end-if

end-procedure

!**************************************
begin-procedure Initialize-T4-Array
!**************************************

   move 0 to #load
   move 0 to #loadamt
   move ' ' to $loadspace
   while #load < 133

       put $loadspace #loadamt $loadspace into T4_Boxes(#load)
             T4_Box_Num T4_Box_Amt T4_Box_Text
       add 1 to #load

   end-while

end-procedure

!**************************************
begin-procedure Process-T4A-Data
!**************************************


  move 'A' to $TaxFormID
  move 'C' to $ProcessFlag
  move 'N' to $T4A_Needed
  move 0   to #Box34Amt
  move 0   to #Box_Value

  if #C.T4A_TxGrs_YTD <> 0
     move 'Y' to $T4A_Needed
  end-if

  move #C.T4A_Tax_YTD   to #Income_Tax              ! Box 022

  if #Income_Tax <> 0
    move 'Y' to $T4A_Needed
    move #Income_Tax to #BoxAmt
    let $Tbl_Box_Num   = '022'
    do Write-SLIP-Detail-Data
  end-if

  if $T4A_PA_Needed = 'Y'                           ! Box 034
    move 'Y' to $T4A_Needed
    move #C.Pension_Adj_YTD to #BoxAmt
    move #C.Pension_Adj_YTD to #Box34Amt
    let #BoxAmt = round(#BoxAmt,0)
    let $Tbl_Box_Num   = '034'
    do Write-SLIP-Detail-Data
  end-if


  move ' ' to $PriorBox
  move 0 to #a

  while #a <= #max_a
    get $T4ABox #T4AErnAmt $T4ADedCd $T4APlan #T4ADedAmt from T4ABox_Data(#a)
                        T4A_Box T4A_ErnAmt T4A_DedCd T4A_PlanType T4A_DedAmt
    if $T4ABox = ' '
       do Distribute-Box-Process-T4A
       break
    else
       if $T4ABox > $PriorBox and
          $PriorBox <> ' '
          move #Box_Value to $T4ABoxAmt
          do Distribute-Box-Process-T4A
       end-if
       move $T4ABox to $PriorBox
       add #T4AErnAmt to #Box_Value
       add #T4ADedAmt to #Box_Value
       if $T4_Needed = 'Y' and
          #T4ADedAmt <> 0
          do Deduct-Common-Amts
       end-if
!      if $T4ABox = '34' and
       if $T4ABox = '036' and
           #T4ADedAmt <> 0
           get $PenDedCd $PenDedClass $PenDedSlsTxClass $PenPlanType $PenBenPlan from
              T4ABox_Data(#a) T4A_DedCd T4A_DedClass T4A_DedSlsTxClass T4A_PlanType T4A_BenPlan
           move #T4ADedAmt to #PenAmt
           do Save-Pension-Data
       end-if
       add 1 to #a
    end-if
  end-while

  if $PriorBox <> ' '
    do Distribute-Box-Process-T4A
  end-if

  if $T4A_Needed = 'Y'
    if #Box34Amt > 0
     move 0   to #PA_Dollars
     move ' ' to $PA_Reg_No
     do Get-Plan-Reg-No
     if $Plan_Reg_No <> ' ' and
        $Plan_Reg_No <> ''
        move $Plan_Reg_No to $BoxText
        move 0 to #BoxAmt
        let $Tbl_Box_Num   = '036'
        do Write-SLIP-Detail-Data
        move ' ' to $Plan_Reg_No
     else
       do Get-PA-Reg-No
       if $PA_Reg_No <> ' ' and
         $PA_Reg_No <> ''
         move $PA_Reg_No to $BoxText
         move 0 to #BoxAmt
         let $Tbl_Box_Num   = '036'
         do Write-SLIP-Detail-Data
         move ' ' to $PA_Reg_No
       end-if
     end-if
    end-if
    do Write-SLIP-ID-Data
  else
  end-if
end-procedure

!**************************************
begin-procedure Distribute-Box-Process-T4A
!**************************************


  let  $Tbl_Box_Num = RTRIM($PriorBox, ' ')

  evaluate $Tbl_Box_Num

    when = '022'   ! This box value comes from the tax table.
      break        ! No accumulation is to be done.


    when-other

      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        if $Tbl_Box_Num <> '036'
          do Write-SLIP-Detail-Data
        end-if

        if ($Tbl_Box_Num <> '036') or ($Tbl_Box_Num = '036' and $T4_Needed = 'N')
          move 'Y' to $T4A_Needed
        end-if
      end-if

  end-evaluate

  if #Box_Value < -.00001
     move 'V' to $ProcessFlag
  end-if

  move 0 to #Box_Value
end-procedure

!**************************************
begin-procedure Deduct-Common-Amts
!**************************************
  move 0 to #ck_ded
  while #ck_ded < #max_commonded

     get $CommonPlan $CommonDed
             from Common_Dedcd(#ck_ded) Ded_PlanType Ded_Code
     if $CommonPlan = $T4APlan and
        $CommonDed  = $T4ADedCd
          subtract  #T4ADedAmt  from #Box_Value
          break
     else
        add 1 to #ck_ded
     end-if
   end-while

end-procedure


!**************************************
begin-procedure Process-Releve1-Data
!**************************************


  move 'R' to $TaxFormID
  move 'C' to $ProcessFlag
  move 'N' to $RV1_Needed
  move 'N' to $BoxG_Not_Found

  move 0 to #Box_Value
  move 0 to #BoxAmt
  move 0 to #CodeCount
  move ' ' to $Code
  move ' ' to $BoxText

  move 0 to #BoxR_Amt
  move 0 to #Save_BoxR_Amt
  move 0 to #Save_StatusInd_Amt

  do Process-Tax-Balance-RV1

  move 0 to #Box_L-6_Amt

  move ' ' to $PriorBox
  move 0   to #PriorRV1ErnAmt
  move 0   to #PriorRV1DedAmt
  move 0 to #r

  while #r <= #max_r
    get $RV1Box #RV1ErnAmt $RV1DedCd $RV1Plan #RV1DedAmt from RV1Box_Data(#r)
                        RV1_Box RV1_ErnAmt RV1_DedCd RV1_PlanType RV1_DedAmt

    if $RV1Box = ' '
       do Distribute-Box-Process-RV1
       break
    else
       if $RV1Box <> $PriorBox and
          $PriorBox <> ' '
          do Distribute-Box-Process-RV1
       end-if
       do Assign-BoxO-Code
       move $RV1Box to $PriorBox
       move #RV1ErnAmt to  #PriorRV1ErnAmt
       move #RV1DedAmt to  #PriorRV1DedAmt
       add #RV1ErnAmt to #Box_Value
       add #RV1DedAmt to #Box_Value
       add 1 to #r
    end-if
  end-while

  if $PriorBox <> ' '
    do Distribute-Box-Process-RV1
  end-if

  let #BoxR_Amt = #Save_BoxR_Amt + #Save_StatusInd_Amt

  if  #BoxR_Amt > 0
    move #BoxR_Amt to #BoxAmt
    move 'R'       to $Tbl_Box_Num
    do Write-SLIP-Detail-Data
    move 'Y' to $RV1_Needed
  end-if

  if #Box_L-6_Amt > 0
    move #Box_L-6_Amt to #BoxAmt
    move 'L-6'       to $Tbl_Box_Num
    do Write-SLIP-Detail-Data
    move 'Y' to $RV1_Needed
  end-if

  do Pensionable-Earnings-RV1

  do Process-Code-Box-RV1
  do Process-Box-B-CPP-RV1
                                             ! Box I, single employer
  if &F.Hist_QPE_Tax_Ytd = 0 and &F.Hist_QPE_Txgrs_YTD = 0
    if (#QPIP_NLGrs_YTD = 0 and $RV1_Needed = 'Y') or (#QPIP_NLGrs_YTD > 0)
      if #QPIP_NLGrs_YTD >= #QPIP_Max_Earns
        move #QPIP_Max_Earns to #BoxAmt      ! QPIP max earnings
      else
        move #QPIP_NLGrs_YTD to #BoxAmt
      end-if
      move 'Y' to $RV1_Needed
      let $Tbl_Box_Num   = 'I'
      do Write-SLIP-Detail-Data
    end-if

  else
    if #PPIP_Ee_Premium_YTD = 0 and  #PPIP_Earns_YTD = 0
      if $RV1_Needed = 'Y'
        move 0.00 to #BoxAmt                ! Prior co. at QPIP max
        move 'Y' to $RV1_Needed
        let $Tbl_Box_Num   = 'I'
        do Write-SLIP-Detail-Data
      end-if

    else
      move #PPIP_Earns_YTD to #BoxAmt
      move 'Y' to $RV1_Needed
      let $Tbl_Box_Num   = 'I'
      do Write-SLIP-Detail-Data
    end-if
  end-if

  if $RV1_Needed = 'Y'
    do Write-SLIP-ID-Data
  end-if

  if $BoxG_Not_Found = 'Y'                  ! Print 0 for Box G anyway
    if $RV1_Needed = 'Y'
      move 0.00 to #BoxAmt
      let $Tbl_Box_Num   = 'G'
      do Write-SLIP-Detail-Data
    end-if
  end-if


end-procedure

!**************************************
begin-procedure Process-Tax-Balance-RV1
!**************************************

  move #C.Qit_TxGrs_YTD   to #Taxable_Gross     ! Box A

  let #QPP_Contrib_YTD = #C.QPP_Contrib_YTD

  if #QPP_Contrib_YTD <> 0       ! Box B
    move #QPP_Contrib_YTD to #BoxAmt
    let #BoxB = #QPP_Contrib_YTD
    move 'Y' to $RV1_Needed
    let $Tbl_Box_Num   = 'B'
    do Write-SLIP-Detail-Data
  end-if

  if #C.QPP_Contrib_YTD < -.00001         ! Box B
    move 'V' to $ProcessFlag
  end-if

  if #C.UI_Ee_Premium_YTD < -.00001                        ! Box C
    move 'V' to $ProcessFlag
  end-if

  move #C.UI_Ee_Premium_YTD to #UI_Contrib                 ! Box C

  if #UI_Contrib <> 0
    move #UI_Contrib to #BoxAmt
    let $Tbl_Box_Num   = 'C'
    move 'Y' to $RV1_Needed
    do Write-SLIP-Detail-Data
  end-if

          ! Box D  from taxform tbl

  move #C.Qit_Tax_YTD   to #Income_Tax     ! Box E

  if #C.Qit_Tax_YTD < -.00001
    move 'V' to $ProcessFlag
  end-if

  if #Income_Tax <> 0
     move #Income_Tax to #BoxAmt
     let $Tbl_Box_Num   = 'E'
     do Write-SLIP-Detail-Data
     move 'Y' to $RV1_Needed
  end-if

          ! Box F  from taxform tbl

  move #C.QPP_NLGrs_YTD to #Pension_NLGrs

                                          ! Box G, single employer
  if &F.Hist_QPP_Tax_Ytd = 0 and &F.Hist_QPP_Txgrs_YTD = 0
    move #C.QPP_NLGrs_YTD to #Pensionable_Earns
  else
    if #C.QPP_Contrib_YTD = 0 and #C.QPP_Earns_YTD = 0
      move 0.00 to #Pensionable_Earns   ! Prior co. at QPP max
    else
      move #C.QPP_Earns_YTD to #Pensionable_Earns
    end-if
  end-if


  if #PPIP_Ee_Premium_YTD < -.00001       ! Box H
    move 'V' to $ProcessFlag
  end-if

  if #PPIP_Ee_Premium_YTD <> 0            ! Box H
    move #PPIP_Ee_Premium_YTD to #BoxAmt
    move 'Y' to $RV1_Needed
    let $Tbl_Box_Num   = 'H'
    do Write-SLIP-Detail-Data
  end-if



end-procedure

!**************************************
begin-procedure Distribute-Box-Process-RV1
!**************************************

  let  $Tbl_Box_Num = RTRIM($PriorBox, ' ')

  evaluate $Tbl_Box_Num

    when = 'B'   ! Values for these boxes come from the tax tables.
    when = 'C'   ! No accumulation is to be done here.
    when = 'E'
    when = 'G'
    when = 'H'
    when = 'I'
      break

    when = 'A'

! Taxable_Gross from Can Tax Balance is reduced by various
! amounts which may be added back in here

      add #Taxable_Gross to #Box_Value
      let #BoxA = #Box_Value

      if #Box_Value > 0
        let #Taxable_Income = #Box_Value
        move #Box_Value to #BoxAmt

! Taxable_Gross have to be reduced by the amount in Box O (Other
! taxable income)

        move 0  to #RV1Index
        move 0  to #Box_O_Value
        while #RV1Index <= #max_r

          get $RV1Box# #RV1Ern #RV1Ded from RV1Box_Data(#RV1Index)
            RV1_Box RV1_ErnAmt RV1_DedAmt

            if RTRIM($RV1Box#, ' ') = 'O'
              add #RV1Ern  to #Box_O_Value
              add #RV1Ded  to #Box_O_Value
            end-if

          add 1 to #RV1Index
        end-while

        subtract #Box_O_Value from #BoxAmt
        let #BoxA = #BoxAmt

        if $Status_Indian_Ind  = 'Y'
          let #Save_StatusInd_Amt = #BoxAmt
        else
          move #BoxAmt to #Box_Value
          do Write-SLIP-Detail-Data
          move 'Y' to $RV1_Needed
        end-if
      end-if

      break

    when = 'R'

      let #Save_BoxR_Amt =  #Box_Value
      break

    when-other

      if $Status_Indian_Ind  = 'Y'
        extract $boxfootnote from $Tbl_Box_num 0 1
        if $boxfootnote = 'A'
          break
        end-if
      end-if

      if $Tbl_Box_Num = 'L22'                ! This will report the deductible
         let #Box_Value = .5 * #Box_Value    ! 50% portion of stock options on
         let #Box_Value = Round(#Box_Value,2)! the L22 footnote.
         add #Box_Value to #Box_L-6_Amt
         move 0 to #Box_Value
      end-if

      if $Tbl_Box_Num = 'L23'                ! This will report the deductible
         let #Box_Value = .375 * #Box_Value  ! 37.5% portion of stock options on
         let #Box_Value = Round(#Box_Value,2)! the L23 footnote.
         add #Box_Value to #Box_L-6_Amt
         move 0 to #Box_Value
      end-if

      if $Tbl_Box_Num = 'L24'                ! This will report the deductible
         let #Box_Value = .25 * #Box_Value   ! 25% portion of stock options on
         let #Box_Value = Round(#Box_Value,2)! the L24 footnote.
         add #Box_Value to #Box_L-6_Amt
         move 0 to #Box_Value
      end-if

      if $Tbl_Box_Num = 'Q'
         move #Box_Value to #BoxQ
      end-if

      if #Box_Value > 0
        move #Box_Value to #BoxAmt
        do Write-SLIP-Detail-Data
        move 'Y' to $RV1_Needed
      end-if

  end-evaluate

  if #Box_Value < -.00001
     move #Box_Value to #BoxAmt
     move 'V' to $ProcessFlag
     move 'Y' to $RV1_Needed
     do Write-SLIP-Detail-Data
  end-if

  move 0 to #Box_Value
  move 0 to #BoxAmt
  move '  ' to $BoxText

end-procedure


!**************************************
begin-procedure Assign-BoxO-Code
!**************************************

 let  $Tbl_Box_Num = RTRIM($PriorBox, ' ')

   evaluate $Tbl_Box_Num
    when = 'RA'
    when = 'RB'
    when = 'RC'
    when = 'RD'
    when = 'RG'
    when = 'RH'
    when = 'RI'
    when = 'RJ'
    when = 'RK'
    when = 'RL'
    when = 'RM'
    when = 'RN'
    when = 'RO'
    when = 'RP'
    when = 'RQ'
    when = 'RR'
    when = 'RS'
    when = 'RT'
    when = 'RU'
    when = 'RV'
    when = 'RX'
    when = 'CA'
    when = 'CB'
    when = 'CC'
      if (#PriorRV1ErnAmt > 0 or #PriorRV1DedAmt > 0)
        if $Tbl_Box_Num <> $Code
          let $Code      = $Tbl_Box_Num
          let #CodeCount = #CodeCount + 1
        end-if
        break
      end-if
      break
   end-evaluate

end-procedure


!**************************************
begin-procedure Pensionable-Earnings-RV1
!**************************************

  if &F.Hist_QPP_Tax_Ytd = 0 and &F.Hist_QPP_Txgrs_YTD = 0   ! single employer

    do Get-Age-Birthday

    if #Empl_Age = #QPP_Min_Age or #Empl_Age = #QPP_Max_Age

      let #Pensionable_Earns = Round(#C.QPP_NLGrs_YTD, 2)

      if #Empl_Age = #QPP_Min_Age
        let #BirthMonth = 12 - #BirthMonth
      end-if
      let #Prorated_Max_Earns = #QPP_Max_Earns * (#BirthMonth/12)
      let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)
      if #Pensionable_Earns > #Prorated_Max_Earns
        let #Pensionable_Earns = #Prorated_Max_Earns
      end-if

    else
      if #Empl_Age < #QPP_Min_Age or #Empl_Age > #QPP_Max_Age
         move 0 to #Pensionable_Earns
      else

         if &F.CPP_Subject_Months = 12
           let #Pensionable_Earns = Round(#C.QPP_NLGrs_YTD,2)
         else
           if &F.CPP_Subject_Months > 0 and &F.CPP_Subject_Months < 12
             let #Pensionable_Earns = Round(#C.QPP_NLGrs_YTD,2)
             let #Prorated_Max_Earns = #QPP_Max_Earns * (&F.CPP_Subject_Months/12)
             let #Prorated_Max_Earns = Round(#Prorated_Max_Earns, 2)
             if #Pensionable_Earns > #Prorated_Max_Earns
               let #Pensionable_Earns = #Prorated_Max_Earns
             end-if

           else
             let #Pensionable_Earns = 0
           end-if
         end-if

      end-if
    end-if

  end-if


    if &F.CPP_Subject_Months = 0 and
       #C.QPP_Earns_YTD = 0 and
       #C.QPP_Contrib_YTD = 0

       move 0 to #BoxAmt
       let $Tbl_Box_Num   = 'G'
       if $RV1_Needed = 'Y'
         do Write-SLIP-Detail-Data
       end-if
    else

      if #BoxQ > 0
         let #BoxAmt = #BoxQ + #BoxA
         if #BoxAmt > #QPP_Max_Earns
           let #BoxAmt = #QPP_Max_Earns
         end-if
         let $Tbl_Box_Num   = 'G'
         do Write-SLIP-Detail-Data
         move 'Y' to $RV1_Needed
      else

        if #Pensionable_Earns = 0    ! Box G
          move 'print "00"' to $BoxText
          move 0 to #BoxAmt
          let $Tbl_Box_Num   = 'G'
          if $RV1_Needed = 'Y'
             do Write-SLIP-Detail-Data
          else
             move ' ' to $BoxText
             let $BoxG_Not_Found = 'Y'
          end-if

        else

          let #Pensionable_Earns = round(#Pensionable_Earns, 2)
          let #BoxAmt = #Pensionable_Earns
          if #BoxAmt > #QPP_Max_Earns
            let #BoxAmt = #QPP_Max_Earns
          end-if
          let $Tbl_Box_Num   = 'G'
          if $RV1_Needed = 'Y'
             do Write-SLIP-Detail-Data
          end-if

        end-if
      end-if
    end-if


end-procedure


!**************************************
begin-procedure Process-Box-B-CPP-RV1
!**************************************

begin-SELECT

SUM(BB.TAX_YTD)       &BOX_16_Sum

 if &BOX_16_Sum > 0
    move &BOX_16_Sum to #BoxAmt
    let $Tbl_Box_Num = 'B-1'
    if $RV1_Needed = 'Y'
      do Write-SLIP-Detail-Data
    end-if
 end-if


FROM PS_CAN_TAX_BALANCE BB
WHERE BB.EMPLID     = $Emplid
  AND BB.COMPANY    = $Company
  AND BB.BALANCE_ID = $Calendar_Year_Id
  AND BB.BALANCE_YEAR = &TX.Balance_Year
  AND BB.PROVINCE       <> 'QC'
  AND BB.TAX_CLASS_CAN  = 'CPP'
  AND BB.BALANCE_PERIOD =
    (SELECT MAX(BB1.BALANCE_PERIOD)
       FROM PS_CAN_TAX_BALANCE BB1
       WHERE BB1.EMPLID          = BB.EMPLID
         AND BB1.COMPANY         = BB.COMPANY
         AND BB1.BALANCE_ID      = BB.BALANCE_ID
         AND BB1.BALANCE_YEAR    = BB.BALANCE_YEAR
         AND BB1.WAGE_LOSS_PLAN  = BB.WAGE_LOSS_PLAN
         AND BB1.PROVINCE        = BB.PROVINCE
         AND BB1.TAX_CLASS_CAN   = BB.TAX_CLASS_CAN)

end-SELECT

end-procedure

!**************************************
begin-procedure Process-Code-Box-RV1
!**************************************

 if #CodeCount = 1
   move 0     to #BoxAmt
   let $Tbl_Box_Num = 'CDO'
   move $Code to $BoxText
   do Write-SLIP-Detail-Data
   move 'Y' to $RV1_Needed
 else
   if #CodeCount > 1
     move 0     to #BoxAmt
     let $Tbl_Box_Num = 'CDO'
     move 'RZ'  to $BoxText
     do Write-SLIP-Detail-Data
     move 'Y' to $RV1_Needed
   end-if
 end-if

end-procedure


!**************************************
begin-procedure Process-BoxG2
!**************************************
   
   let $TaxFormID = 'R'
   let $Tbl_Box_Num = 'G-2'

   move #G2_Total to #BoxAmt
   if $RV1_Needed = 'Y'
      do Write-SLIP-Detail-Data
   end-if

end-procedure


!**************************************
begin-procedure Process-RV2-Data
!**************************************


  move 'V' to $TaxFormID
  move 'C' to $ProcessFlag
  move 'N' to $RV2_Needed
  let #BoxL_Excess  = 0
  let #RV2_BoxC_Amt = 0
  let #BoxO_Excess  = 0

  move 'RO' to $Releve2_Provenance
  move '  ' to $Releve2_Provenance2

  ! this is the default value that is being assigned to provenance
  ! if you want to change this value replace my default
  ! FERR-A - insured registered retirement income fund
  ! FERR-D - depositary registered retirement income fund
  ! FERR-F - trusteed registered retirement income fund
  ! RAP - for a Home Buyer's plan
  ! RE - income-averaging annuity
  ! REEP - lifelong learning plan
  ! REER-A - insured registered retirement savings plan
  ! REER-D - depositary registered retirement savings plan
  ! REER-F - trusteed registered retirement savings plan
  ! REPA - income-averaging annuity for artists
  ! RO - ordinary annuity
  ! RPA - registered pension plan
  ! RPDB - deferred profit sharing plan
  ! RPNA - unregistered pension plan
  ! RRQ - quebec pension plan
  ! RPC - canada pension plan



  if #C.RV2_TxGrs_YTD <> 0
     move 'Y' to $RV2_Needed
  end-if

  move #C.RV2_Tax_YTD   to #Income_Tax              ! Box J

  if #Income_Tax <> 0
    move 'Y' to $RV2_Needed
    move #Income_Tax to #BoxAmt
    let $Tbl_Box_Num   = 'J'
    do Write-SLIP-Detail-Data
  end-if

  move ' ' to $PriorBox
  move 0 to #v

  while #v <= #max_v
    get $RV2Box #RV2ErnAmt $RV2DedCd $RV2Plan #RV2DedAmt from RV2Box_Data(#v)
                        RV2_Box RV2_ErnAmt RV2_DedCd RV2_PlanType RV2_DedAmt
    if $RV2Box = ' '
       do Distribute-Box-Process-RV2
       break
    else
       if $RV2Box > $PriorBox and
          $PriorBox <> ' '
          move #Box_Value to $RV2BoxAmt
          do Distribute-Box-Process-RV2
       end-if
       move $RV2Box to $PriorBox
       add #RV2ErnAmt to #Box_Value
       add #RV2DedAmt to #Box_Value
       if $RV2_Needed = 'Y' and
          #RV2DedAmt <> 0
          do Deduct-Common-Amts
       end-if
!      if $T4ABox = '34' and
!          #T4ADedAmt <> 0
!          get $PenDedCd $PenDedClass $PenPlanType $PenBenPlan from
!             T4ABox_Data(#a) T4A_DedCd T4A_DedClass T4A_PlanType T4A_BenPlan
!          move #T4ADedAmt to #PenAmt
!          do Save-Pension-Data
!      end-if
       add 1 to #v
    end-if
  end-while

  if $PriorBox <> ' '
    do Distribute-Box-Process-RV2
  end-if

  if #RV2_BoxC_Amt > 0  or #BoxL_Excess > 0  or #BoxO_Excess > 0
    let #BoxAmt = #RV2_BoxC_Amt + #BoxL_Excess + #BoxO_Excess
    let $Tbl_Box_Num = 'C'
    do Write-SLIP-Detail-Data
    move 'Y' to $RV2_Needed
  end-if

  if $RV2_Needed = 'Y'
!   if #Box34Amt > 0
!    do Get-Plan-Reg-No
!    if $Plan_Reg_No <> ' ' and
!       $Plan_Reg_No <> ''
!       move $Plan_Reg_No to $BoxText
!       move 0 to #BoxAmt
!       let $Tbl_Box_Num   = '36'
!       do Write-SLIP-Detail-Data
!       move ' ' to $Plan_Reg_No
!    end-if
!   end-if
    do Write-SLIP-ID-Data
  else
  end-if
end-procedure

!**************************************
begin-procedure Distribute-Box-Process-RV2
!**************************************


  let  $Tbl_Box_Num = RTRIM($PriorBox, ' ')

  evaluate $Tbl_Box_Num

    when = 'J'    ! This box value comes from the tax table.
      break       ! No accumulation is to be done.

    when = 'L'
      if #Box_Value > 0
        if #Box_Value > 10000
          let #BoxAmt      = 10000
          let #BoxL_Excess =  #Box_Value - 10000
        else
          move #Box_Value to #BoxAmt
        end-if
        do Write-SLIP-Detail-Data
        move 'Y' to $RV2_Needed
      end-if
      break

    when = 'C'
      if #Box_Value > 0
        let #RV2_BoxC_Amt = #Box_Value
      end-if
      break

    when = 'N'
      break

    when = 'O'
      if #Box_Value > 0
        if #Box_Value > 20000
          let #BoxAmt      = 20000
          let #BoxO_Excess =  #Box_Value - 20000
        else
          move #Box_Value to #BoxAmt
        end-if
        do Write-SLIP-Detail-Data
        move 'Y' to $RV2_Needed
      end-if
      break

    when-other

      if #Box_Value <> 0
        move #Box_Value to #BoxAmt
        do Write-SLIP-Detail-Data
        move 'Y' to $RV2_Needed
      end-if

  end-evaluate

  if #Box_Value < -.00001
     move 'V' to $ProcessFlag
  end-if

  move 0 to #Box_Value
  move 0 to #BoxAmt
  move ' ' to $BoxText


end-procedure

!**************************************
begin-procedure Select-Employee-Data
!**************************************


begin-SELECT
D1.NATIONAL_ID
D.DT_OF_DEATH
MI.MIDDLE_NAME
MI.FIRST_NAME
MI.LAST_NAME

  move &D1.NATIONAL_ID to $SIN
  let $SIN  = rtrim($SIN, ' ')
  if $SIN = '999999999'
    move ' ' to $SIN
  end-if

  let $FirstName  = rtrim(&MI.First_Name, ' ')
  let $MiddleName = rtrim(&MI.Middle_Name, ' ')
  let $LastName   = rtrim(&MI.Last_Name, ' ')

  do Format-CAN-YE-EMPL-Name

  let $AddressType = 'MAIL'
  do Get-Employee-Address

  if $AddressFound = 'N'
     let $AddressType = 'HOME'
     do Get-Employee-Address
  end-if

  let $DateofDeath = &D.Dt_of_Death
  if $DateofDeath = ''
     let $Deceased = 'N'
  else
     let $Deceased = 'Y'
  end-if
  move 'Y' to $Employee_Data

FROM PS_PERSON  D, PS_PERS_NID D1, PS_PERSON_NAME MI
WHERE D.EMPLID = $Emplid
AND D1.EMPLID = D.EMPLID
AND D1.COUNTRY = {NID_Country}
AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
AND MI.EMPLID = D.EMPLID

end-SELECT


   move '' to $Department
   move '' to $Location
   move '' to $BusinessUnit
   let $Dept_Loc_Fnd = 'N'
   let $PrimaryJobFnd = 'N'
   move ' ' to $PrimaryJobLoc
   move ' ' to $PrimaryJobDept
   move ' ' to $PrimaryJobBusUnit


begin-SELECT
J.DEPTID
J.LOCATION
J.BUSINESS_UNIT
J.EMPL_STATUS
J.EMPL_RCD
J.COMPANY

   let $Location = rtrim(&J.Location, ' ')
   move &J.DeptID to $Department
   move &J.Business_Unit to $BusinessUnit

   if &J.EMPL_STATUS = 'D' or &J.EMPL_STATUS = 'Q' or &J.EMPL_STATUS = 'R' or &J.EMPL_STATUS = 'T' or
      &J.EMPL_STATUS = 'U' or &J.EMPL_STATUS = 'V' or &J.EMPL_STATUS = 'X'
     let $Dept_Loc_Fnd = 'N'

     let $PrimaryJobLoc      = $Location
     let $PrimaryJobDept     = $Department
     let $PrimaryJobBusUnit  = $BusinessUnit
   else
     let $Dept_Loc_Fnd = 'Y'
   end-if

   let $PrimaryJobFnd = 'Y'

FROM PS_JOB  J
WHERE J.EMPLID = $EMPLID
 AND J.COMPANY = $Company
 AND J.JOB_INDICATOR = 'P'
 AND J.EMPL_RCD =
      (SELECT MIN(EMPL_RCD)
       FROM PS_JOB
       WHERE EMPLID         = J.EMPLID
         AND COMPANY        = J.COMPANY
         AND JOB_INDICATOR  = J.JOB_INDICATOR)
  AND J.EFFDT  =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID        = J.EMPLID
         AND  COMPANY       = J.COMPANY
         AND  JOB_INDICATOR = J.JOB_INDICATOR
         AND  EMPL_RCD      = J.EMPL_RCD
         AND  EFFDT    <= $AsOfDate)
  AND J.EFFSEQ =
      (SELECT MAX(EFFSEQ)
       FROM PS_JOB
       WHERE EMPLID         = J.EMPLID
         AND COMPANY        = J.COMPANY
         AND JOB_INDICATOR  = J.JOB_INDICATOR
         AND EMPL_RCD       = J.EMPL_RCD
         AND EFFDT          = J.EFFDT)
end-SELECT

   if $Dept_Loc_Fnd = 'N'
     do Get-Dept-Loc-Multi-Primary-Job
     if $Dept_Loc_Fnd = 'N'
       do Check-Concurrent-Job

       if $Dept_Loc_Fnd = 'N'
         if $PrimaryJobFnd = 'N'
           do Check-LastActive-Sec-Job
         else
           move $PrimaryJobLoc     to $Location
           move $PrimaryJobDept    to $Department
           move $PrimaryJobBusUnit to $BusinessUnit
         end-if
       end-if

     end-if
   end-if

   move '' to $MailDrop

begin-SELECT
L.MAIL_DROP

   move &L.Mail_Drop to $MailDrop

FROM PS_PAYROLL_DATA  L
WHERE L.EMPLID  =  $EMPLID
  AND L.COMPANY =  $Company

end-SELECT
end-procedure


!**************************************
begin-procedure Check-Concurrent-Job
!**************************************

 begin-SELECT
CJ.DEPTID
CJ.LOCATION
CJ.BUSINESS_UNIT
CJ.EMPL_RCD
CJ.EMPL_STATUS

   let $Location = rtrim(&CJ.Location, ' ')
   move &CJ.DeptID to $Department
   move &CJ.Business_Unit to $BusinessUnit

   if &CJ.EMPL_STATUS = 'A' or &CJ.EMPL_STATUS = 'L' or &CJ.EMPL_STATUS = 'P' or
     &CJ.EMPL_STATUS = 'S' or &CJ.EMPL_STATUS = 'W'
     let $Dept_Loc_Fnd = 'Y'
   else
     let $Dept_Loc_Fnd = 'N'
   end-if

FROM PS_JOB  CJ
WHERE CJ.EMPLID    =  $EMPLID
 AND  CJ.COMPANY   =  $Company
 AND  CJ.JOB_INDICATOR  = 'S'
 AND  CJ.EFFDT  =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID        = CJ.EMPLID
         AND  COMPANY       = CJ.COMPANY
         AND  JOB_INDICATOR = CJ.JOB_INDICATOR
         AND  EMPL_RCD      = CJ.EMPL_RCD
         AND  EFFDT    <= $AsOfDate)
  AND CJ.EFFSEQ =
      (SELECT MAX(EFFSEQ)
       FROM PS_JOB
       WHERE EMPLID         = CJ.EMPLID
         AND COMPANY        = CJ.COMPANY
         AND JOB_INDICATOR  = CJ.JOB_INDICATOR
         AND EMPL_RCD       = CJ.EMPL_RCD
         AND EFFDT          = CJ.EFFDT)
  ORDER BY CJ.EMPL_RCD DESC
end-SELECT

end-procedure

!****************************************
begin-procedure Check-LastActive-Sec-Job
!****************************************

begin-SELECT
CIJ.DEPTID
CIJ.LOCATION
CIJ.BUSINESS_UNIT
CIJ.EMPL_RCD

   let $Location = rtrim(&CIJ.Location, ' ')
   move &CIJ.DeptID to $Department
   move &CIJ.Business_Unit to $BusinessUnit

FROM PS_JOB  CIJ
WHERE CIJ.EMPLID    =  $EMPLID
 AND  CIJ.COMPANY   =  $Company
 AND  CIJ.JOB_INDICATOR  = 'S'
 AND  CIJ.EMPL_RCD   <> &CJ.EMPL_RCD
 AND  CIJ.EFFDT  =
      (SELECT MAX(CIJ1.EFFDT)
       FROM   PS_JOB  CIJ1
       WHERE  CIJ1.EMPLID        = CIJ.EMPLID
         AND  CIJ1.COMPANY       = CIJ.COMPANY
         AND  CIJ1.JOB_INDICATOR = CIJ.JOB_INDICATOR
         AND  CIJ1.EMPL_RCD      = CIJ.EMPL_RCD
         AND  CIJ1.EFFDT        <= $AsOfDate)
 AND CIJ.EFFSEQ =
      (SELECT MAX(CIJ2.EFFSEQ)
       FROM PS_JOB CIJ2
       WHERE CIJ2.EMPLID         = CIJ.EMPLID
         AND CIJ2.COMPANY        = CIJ.COMPANY
         AND CIJ2.JOB_INDICATOR  = CIJ.JOB_INDICATOR
         AND CIJ2.EMPL_RCD       = CIJ.EMPL_RCD
         AND CIJ2.EFFDT          = CIJ.EFFDT)
 AND  CIJ.EMPL_STATUS IN ('A', 'L', 'P', 'S', 'W')
 ORDER BY CIJ.EMPL_RCD DESC
end-SELECT

end-procedure


!**************************************
begin-procedure Get-Dept-Loc-Multi-Primary-Job
!**************************************

begin-SELECT
TJ.DEPTID
TJ.LOCATION
TJ.BUSINESS_UNIT
TJ.EMPL_RCD

   let $Location = rtrim(&TJ.Location, ' ')
   move &TJ.DeptID to $Department
   move &TJ.Business_Unit to $BusinessUnit
   let $Dept_Loc_Fnd = 'Y'

   let $PrimaryJobFnd = 'Y'

FROM PS_JOB  TJ
WHERE TJ.EMPLID = $EMPLID
 AND TJ.COMPANY = $Company
 AND TJ.JOB_INDICATOR = 'P'
 AND TJ.EMPL_RCD <> &J.EMPL_RCD
 AND TJ.EFFDT  =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID        = TJ.EMPLID
         AND  COMPANY       = TJ.COMPANY
         AND  JOB_INDICATOR = TJ.JOB_INDICATOR
         AND  EMPL_RCD      = TJ.EMPL_RCD
         AND  EFFDT    <= $AsOfDate)
  AND TJ.EFFSEQ =
      (SELECT MAX(EFFSEQ)
       FROM PS_JOB
       WHERE EMPLID         = TJ.EMPLID
         AND COMPANY        = TJ.COMPANY
         AND JOB_INDICATOR  = TJ.JOB_INDICATOR
         AND EMPL_RCD       = TJ.EMPL_RCD
         AND EFFDT          = TJ.EFFDT)
  AND TJ.EMPL_STATUS IN ('A', 'L', 'P', 'S', 'W')
  ORDER BY TJ.EMPL_RCD DESC
end-SELECT

end-procedure


!**************************************
begin-procedure Delete-Reload-YE-Data
!**************************************

begin-SQL on-error=Ignore
  DELETE FROM PS_CAN_YE_EMPL
      WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
      AND COMPANY = $Company
      AND EMPLID IN (SELECT EMPLID FROM PS_CAN_YE_EMP_RELD);

  DELETE FROM PS_CAN_YE_DETAIL
      WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
      AND COMPANY = $Company
      AND EMPLID IN (SELECT EMPLID FROM PS_CAN_YE_EMP_RELD);

  DELETE FROM PS_CAN_YE_SLIP
      WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
      AND COMPANY = $Company
      AND EMPLID IN (SELECT EMPLID FROM PS_CAN_YE_EMP_RELD);
end-SQL
end-procedure


!**************************************
begin-procedure Delete-Data
!**************************************

begin-SQL  on-error=Ignore
  DELETE FROM PS_CAN_YE_EMPL
        WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
        AND   COMPANY = $Company ;

  DELETE FROM PS_CAN_YE_DETAIL
        WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
        AND   COMPANY = $Company ;

  DELETE FROM PS_CAN_YE_SLIP
        WHERE CALENDAR_YEAR = &TX.BALANCE_YEAR
        AND   COMPANY = $Company ;
end-SQL
end-procedure

!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! If you are loading only a select few employees, comment out the entire     x
! preceding paragraph by inserting the exclamation point (!) in position 1   x
! of each line.  Then delete the exclamation point from position one of each x
! line of the following paragraph (Delete-Data). Make sure that each line    x
! which starts with either the word "begin-" or the word "end-" begins in    x
! column 1 of the line.  Under EACH delete statement, enter the employee     x
! number (EmplID) of the employee whose data is to be loaded.  If you have   x
! more than one employee, add one line under each delete statement for each  x
! employee.  The last employee number entered must be followed by the right  x
! parenthesis and the semi-colon.                                            x
! The employee numbers entered here must match those entered in the SELECT   x
! statement earlier in the program, to correctly modify their data on the    x
! year-end tables.                                                           x
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
!
!begin-procedure Delete-Data
!begin-SQL  on-error=Ignore
!  DELETE FROM PS_CAN_YE_Empl
!        WHERE Calendar_Year = &TX.Balance_Year
!          AND (EmplID = 'aaaaaaaaaaaa' or
!               EmplID = 'bbbbbbbbbbbb' or
!               EmplID = 'cccccccccccc');
!
!  DELETE FROM PS_CAN_YE_Detail
!        WHERE Calendar_Year = &TX.Balance_Year
!          AND (EmplID = 'aaaaaaaaaaaa' or
!               EmplID = 'bbbbbbbbbbbb' or
!               EmplID = 'cccccccccccc');
!
!  DELETE FROM PS_CAN_YE_Slip
!        WHERE Calendar_Year = &TX.Balance_Year
!          AND (EmplID = 'aaaaaaaaaaaa' or
!               EmplID = 'bbbbbbbbbbbb' or
!               EmplID = 'cccccccccccc');
!end-SQL
!end-procedure

!**************************************
begin-procedure Ignore
!**************************************
  !Dummy procedure to avoid error if no records to delete
end-procedure

!**************************************
begin-procedure Write-Employee-Data
!**************************************


  move 'N' to $EmplLoadErr

  add 1 to #Employee_Count
  add 1 to #Total_Employees

  do Insert-Employee-Record

  do Initialize-Employee-Data

end-procedure

begin-procedure Insert-Employee-Record
begin-SQL  on-error=Error-Empl-Data
  INSERT INTO PS_CAN_YE_EMPL (COMPANY,
                              EMPLID,
                             CALENDAR_YEAR,
                             SEQUENCE_NUMBER,
                             SIN,
                             SLIP_SURNAME,
                             SLIP_FIRST_NAME,
                             SLIP_INITIAL,
                             ADDRESS1,
                             ADDRESS2,
                             CITY,
                             PROVINCE,
                             COUNTRY,
                             POSTAL,
                             LOCATION,
                             DEPTID,
                             MAIL_DROP,
                             DECEASED,
                             BUSINESS_UNIT,
                             DELETE_RECORD)
                     VALUES ($Company,
                             $EmplID,
                             &TX.Balance_Year,
                             #SequenceNo,
                             $SIN,
                             $LastName,
                             $FirstName,
                             $MidInitial,
                             $Street1,
                             $Street2,
                             $City,
                             $Prov,
                             $Country,
                             $PostalCode,
                             $Location,
                             $Department,
                             $MailDrop,
                             $Deceased,
                             $BusinessUnit,
                             'N');
end-SQL
end-procedure

!**************************************
begin-procedure Error-Empl-Data
!**************************************

  move 'Y' to $EmplLoadErr

  let $EmplLastName   =  substr($LastName, 1, 30)
  let $EmplLastName   =  rtrim($EmplLastName, ' ')
  let $EmplFirstName  =  substr($FirstName , 1, 12)
  let $EmplFirstName  =  rtrim($EmplFirstName, ' ')
  let $EmplMidInitial =  substr($MidInitial, 1, 1)
  let $EmplName = $EmplLastName || ',' || ' ' ||$EmplFirstName || ' ' ||  $EmplMidInitial

  move $Ctx910ld_Error_Empl to $ErrorMsg

  do Print-Error-Line

  move ' ' to  $EmplLastName
  move ' ' to  $EmplFirstName
  move ' ' to  $EmplMidInitial


end-procedure

!**************************************
begin-procedure Write-SLIP-ID-Data
!**************************************


  move 'N' to $IDLoadErr

  multiply 1 times #SequenceNo round=0
  multiply 1 times #FootnoteCount round=0
  move #FootnoteCount to $FootnoteCount

  move 0 to #SlipSeqNo

  move #Save_T4A_Grs to $GrsToT4A
  move #Save_T4A_Tax to $TaxToT4A

  let  $TaxformID = RTRIM($TaxFormID, ' ')
  if $TaxformID = 'R' or
     $TaxformID = 'V'
     move $Quebec_ID to $Reporting_ID
  end-if

  evaluate $TaxFormID

        when = 'T'
           add 1 to #T4_Count

        when = 'A'
           add 1 to #T4A_Count

  end-evaluate

  move 'Y' to $EmplDataNeeded

  if $TaxFormID = 'T' or $TaxFormID = 'A'
    do Insert-SLIP-ID-Record

    do Initialize-Slip-Data
  else

    do Update-Can-Ye-Slip-Array
    do Initialize-Slip-Data

  end-if

end-procedure


!**************************************
begin-procedure Update-Can-Ye-Slip-Array
!**************************************

  move 0 to #slip_idx

  while #slip_idx < #max_s

    get $iS_TaxFormID from Can_Ye_Slip(#slip_idx) S_Taxform_id

    if rtrim($iS_TaxFormID, ' ') = ''                                         !if array entry is empty
      put $Company $EmplID #CalendarYear $TaxFormID $SaveWLP $Province #SequenceNo #SlipSeqNo #FootnoteCount $Reporting_ID
          $UIExempt $ProcessFlag $ReleveSlipNo #Save_T4A_Grs #Save_T4A_Tax $Releve2_Provenance $Releve2_Provenance2
          $Releve2SlipNo
      into Can_Ye_Slip(#slip_idx)
      add 1 to #Can_Ye_Slip_Count
      break
    else
      if rtrim($TaxFormID, ' ') = rtrim($iS_TaxFormID, ' ')                    !if array entry match
        if #FootnoteCount > 0
          array-add #FootnoteCount to Can_Ye_Slip(#slip_idx) S_FN_Cnt
        end-if
        put $ProcessFlag into Can_Ye_Slip(#slip_idx) S_Proc_Flag

        break
      end-if

    end-if

    add 1 to #slip_idx
  end-while

end-procedure


!**************************************
begin-procedure Insert-SLIP-ID-Record
!**************************************

  do PS_SQR_ROUND(#Save_T4A_Grs, 2, #Save_T4A_Grs)
  do PS_SQR_ROUND(#Save_T4A_Tax, 2, #Save_T4A_Tax)

begin-SQL  on-error=Error-SLIP-ID-Data
  INSERT INTO PS_CAN_YE_SLIP (COMPANY,
                              EMPLID,
                              CALENDAR_YEAR,
                              TAXFORM_ID,
                              WAGE_LOSS_PLAN,
                              PROVINCE,
                              SEQUENCE_NUMBER,
                              CAN_YE_SLIP_SEQ,
                              FOOTNOTE_COUNT,
                              REPORTING_ID,
                              UI_EXEMPT,
                              PROCESS_FLAG,
                              RELEVE_SLIP_NO,
                              CIT_TO_T4A_GRS,
                              CIT_TO_T4A_TAX,
                              RELEVE2_SLIP_NO,
                              PROVENANCE,
                              PROVENANCE2,
                              EMPLOYMENT_CODE,
                              SIN_CONTRB_SPOUSE,
                              NAME_CONTRB_SPOUSE,
                              YE_SLIP_PROCESS)
                      VALUES ($Company,
                              $EmplID,
                              #CalendarYear,
                              $TaxFormID,
                              $WageLossPlan,
                              $Province,
                              #SequenceNo,
                              #SlipSeqNo,
                              #FootnoteCount,
                              $Reporting_ID,
                              $UIExempt,
                              $ProcessFlag,
                              $ReleveSlipNo,
                              #Save_T4A_Grs,
                              #Save_T4A_Tax,
                              $Releve2SlipNo,
                              $Releve2_Provenance,
                              $Releve2_Provenance2,
                              ' ',
                              ' ',
                              ' ',
                              'O');
end-SQL

end-procedure

!**************************************
begin-procedure Error-SLIP-ID-Data
!**************************************

  move 'Y' to $IDLoadErr

  move $Ctx910ld_Error_Slip to $ErrorMsg

  do Print-Error-Line

  let $TaxFormID = rtrim($TaxFormID, ' ')

  evaluate $TaxFormID
    when = 'T'
      subtract 1 from #T4_Count
    when = 'A'
      subtract 1 from #T4A_Count
    when = 'R'
      subtract 1 from #RLV1_Count
    when = 'V'
      subtract 1 from #RV2_Count
    when-other
      break
  end-evaluate

end-procedure

!**************************************
begin-procedure Write-SLIP-Detail-Data
!**************************************

begin-SELECT
K.BOX_NOTE_SEQ
K.BOX_NOTE_CD

  move &K.Box_Note_Seq to $BoxNoteSeq

  if $TaxformID = 'A'
     move &K.Box_Note_Cd to $BoxNoteCode
  else
     move '  ' to $BoxNoteCode
  end-if

FROM  PS_TAXFORM_NOTES K
WHERE BOX = $Tbl_Box_Num
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_NOTES
       WHERE  BOX = $Tbl_Box_Num
  AND  EFFDT  <= $AsOfDate)
end-SELECT

  multiply 1 times #BoxAmt round=2
  multiply 1 times #SequenceNo round=0

  extract $FN_Switch from $Tbl_Box_Num 2 1
  if $FN_Switch <> ' '
   if $FN_Switch <> ''
     add 1 to #FootnoteCount
     if $TaxformID = 'T' and
       ($Tbl_Box_Num = '28C' or
        $Tbl_Box_Num = '28U')
        subtract 1 from #FootnoteCount
     else
       if $TaxformID = 'R' and ($Tbl_Box_Num = 'CDO')
         subtract 1 from #FootnoteCount
       end-if
     end-if
   end-if
  end-if

  move ' ' to $FN_Switch

  move #BoxAmt to $BoxAmt
  move #SequenceNo to $SequenceNo

  move 0 to #SlipSeqNo


  if $TaxFormID = 'T' or $TaxFormID = 'A'

    do Insert-SLIP-Detail-Record

    do Initialize-Detail-Data
  else
    do Update-Can-Ye-Detail-Array
    do Initialize-Detail-Data

  end-if


end-procedure


!**************************************
begin-procedure Update-Can-Ye-Detail-Array
!**************************************

  move 0 to #Total_Box_Amt
  move 0 to #detail_idx

  while #detail_idx < #max_d

    get $iBox $iTaxFormID $iCan_Ye_Box_Txt #iBox_Amt from Can_Ye_Detail(#detail_idx)
        Box Taxform_id Can_Ye_Box_Txt Can_Ye_Box_Amt

    if rtrim($iBox, ' ') = ''                                         !if array entry is empty
      if #detail_idx = 0
        let $SaveWLP = rtrim($WageLossPlan, ' ')
      end-if
      put $Company $EmplID #CalendarYear $TaxFormID $SaveWLP $Province #SequenceNo #SlipSeqNo $Tbl_Box_Num $BoxText #BoxAmt
       into Can_Ye_Detail(#detail_idx)
      add 1 to #Can_Ye_Detail_Count
      break

    else

      if rtrim($Tbl_Box_Num, ' ')  = rtrim($iBox, ' ')                 !if array entry match
        and rtrim($TaxFormID, ' ') = rtrim($iTaxFormID, ' ')
          if rtrim($iBox, ' ') = 'CDO'
            if rtrim($BoxText, ' ') <> rtrim($iCan_Ye_Box_Txt, ' ')
              put 'RZ' into Can_Ye_Detail(#detail_idx) Can_Ye_Box_Txt
            end-if
          else

            if rtrim($Tbl_Box_Num, ' ')  = 'B01' or
               rtrim($Tbl_Box_Num, ' ')  = 'B-1'
              break
            end-if

            if rtrim($Tbl_Box_Num, ' ')  = 'L' and rtrim($TaxFormID, ' ') = 'V'
              if #BoxAmt + #iBox_Amt > 10000
                let #BoxLExcess = #BoxAmt + #iBox_Amt - 10000
                let #BoxAmt  = 10000 - #iBox_Amt
              end-if
            end-if

            if rtrim($Tbl_Box_Num, ' ')  = 'O' and rtrim($TaxFormID, ' ') = 'V'
              if #BoxAmt + #iBox_Amt > 20000
                let #BoxOExcess = #BoxAmt + #iBox_Amt - 20000
                let #BoxAmt  = 20000 - #iBox_Amt
              end-if
            end-if

            if rtrim($Tbl_Box_Num, ' ')  = 'I' and rtrim($TaxFormID, ' ') = 'R'
              if #BoxAmt + #iBox_Amt >= #QPIP_Max_Earns
                let #BoxAmt  = #QPIP_Max_Earns - #iBox_Amt
              end-if
            end-if

            if rtrim($Tbl_Box_Num, ' ')  = 'G' and rtrim($TaxFormID, ' ') = 'R'
              if #BoxAmt + #iBox_Amt >= #QPP_Max_Earns
                let #BoxAmt  = #QPP_Max_Earns - #iBox_Amt
              end-if
            end-if

            array-add #BoxAmt to Can_Ye_Detail(#detail_idx) Can_Ye_Box_Amt
            let #Total_Box_Amt = #iBox_Amt + #BoxAmt
            if #Total_Box_Amt < -.00001
              move 'V' to $ProcessFlag
            end-if
          end-if

          extract $FN_Ind from $Tbl_Box_Num 2 1
          if $FN_Ind <> '' and rtrim($Tbl_Box_Num, ' ') <> 'CDO'
            subtract 1 from #FootnoteCount
          end-if
        break
      end-if

    end-if

    add 1 to #detail_idx
  end-while

end-procedure


!**************************************
begin-procedure Insert-SLIP-Detail-Record
!**************************************

  do PS_SQR_Round(#BoxAmt, 2, #BoxAmt)

  move 'N' to $DetailLoadErr
begin-SQL  on-error=Error-SLIP-Detail-Data
  INSERT INTO PS_CAN_YE_DETAIL (COMPANY,
                                EMPLID,
                                CALENDAR_YEAR,
                                TAXFORM_ID,
                                WAGE_LOSS_PLAN,
                                PROVINCE,
                                SEQUENCE_NUMBER,
                                CAN_YE_SLIP_SEQ,
                                BOX,
                                CAN_YE_BOX_TEXT,
                                CAN_YE_BOX_AMT)
                        VALUES ($Company,
                                $EmplID,
                                #CalendarYear,
                                $TaxFormID,
                                $WageLossPlan,
                                $Province,
                                #SequenceNo,
                                #SlipSeqNo,
                                $Tbl_Box_Num,
                                $BoxText,
                                #BoxAmt);
end-SQL
end-procedure

!**************************************
begin-procedure Error-SLIP-Detail-Data
!**************************************

  move 'Y' to $DetailLoadErr

  move $Ctx910ld_Error_Detail to  $ErrorMsg

  do Print-Error-Line

end-procedure


!********************************************
begin-procedure Update-Slip-Detail-Record
!********************************************

begin-sql
  UPDATE PS_CAN_YE_DETAIL
  SET CAN_YE_BOX_AMT    = #Box26_Amt 
  WHERE COMPANY         = $Company
  AND   EMPLID          = $EmplID
  AND   CALENDAR_YEAR   = #CalendarYear
  AND   TAXFORM_ID      = 'T'
  AND   WAGE_LOSS_PLAN  = $WLP 
  AND   PROVINCE        = $Province
  AND   BOX             = '26'
end-sql

end-procedure


!**************************************
begin-procedure Initialize-Employee-Data
!**************************************

  move ' ' to $SIN
  move ' ' to $LastName
  move ' ' to $FirstName
  move ' ' to $MidInitial
  move ' ' to $Street1
  move ' ' to $Street2
  move ' ' to $City
  move ' ' to $Prov
  move ' ' to $Country
  move ' ' to $PostalCode
  move ' ' to $Location
  move ' ' to $Department
  move ' ' to $Deceased

end-procedure

!**************************************
begin-procedure Initialize-Slip-Data
!**************************************

  move 0 to #FootnoteCount
  move ' ' to $FootnoteCount
  move  'N' to $UIExempt
  move 0 to #Save_T4A_Grs
  move 0 to #Save_T4A_Tax

  move ' '  to $Releve2_Provenance
  move ' '  to $Releve2_Provenance2

end-procedure

!**************************************
begin-procedure Initialize-Detail-Data
!**************************************

  move ' ' to $Tbl_Box_Num
  move ' ' to $BoxNoteCode
  move ' ' to $BoxText
  move 0  to #BoxAmt
  move ' ' to $BoxNoteSeq

end-procedure

!**************************************
begin-procedure Array-Init-Pension
!**************************************
  let #i = 0

  while #i <= #Pension_Cntrb_Max

    put  ' '               -
         ' '               -
         ' '               -
         ' '               -
         0                 -
    into Pension_Cntrb(#i) -
         PLAN_TYPE         -
         DEDCD             -
         DED_CLASS         -
         DED_SLSTX_CLASS   -
         YTD_Deds

    add 1 to #i
  end-while

  move 0 to #Pension_Cntrb_Max
  move 0 to #Pension_Cntrb_Idx

end-procedure

!**************************************
begin-procedure Get-Plan-Reg-No
!**************************************


  move 0 to #Pension_Cntrb_Idx
  move 0.00 to #YTD_Max
  move ' ' to $Plan_Reg_No

  while #Pension_Cntrb_idx <= #Pension_Cntrb_Max

    get $PLAN_TYPE                         -
        $Benefit_Plan                      -
        $DEDCD                             -
        $DED_CLASS                         -
        $DED_SLSTX_CLASS                   -
        #YTD_Deds                          -
    from Pension_Cntrb(#Pension_Cntrb_Idx) -
         PLAN_TYPE                         -
         Benefit_Plan                      -
         DEDCD                             -
         DED_CLASS                         -
         DED_SLSTX_CLASS                   -
         YTD_Deds

    if #YTD_Deds > #YTD_Max
        move #YTD_Deds  to #YTD_Max
        move $Plan_Type  to $Plan_Type_For_Reg
        move $Benefit_Plan  to $Benefit_Plan_For_Reg
        move $DedCD  to $DedCD_For_Reg
        move $Ded_Class  to $Ded_CLASS_For_Reg
        move $Ded_SlsTx_Class  to $Ded_SlsTx_Class_For_Reg
        do Select-Plan-Reg-No
    end-if

    add  1 to #Pension_Cntrb_Idx
    end-while

    if ((#PA_Dollars > #YTD_Max) and
        (rtrim($PA_Reg_No,' ') <> ''))
       move $PA_Reg_No to $Plan_Reg_No
    end-if

!begin-SELECT
!PR.Ded_YTD
!PT.Plan_Reg_No

!  let $Test_Reg_No = RTRIM(&PT.Plan_Reg_No, ' ')
!  if (($Test_Reg_No <> ' ') and
!      ($Test_Reg_No <> ''))
!    let $Plan_Reg_No = $Test_Reg_no
!  end-if

!FROM  PS_Can_Ded_Balance PR,
!      PS_Pension_Pln_Tbl PT
!WHERE PR.Company = &A.Company
!  AND PR.EmplID = &C.EmplID
!  AND PR.Balance_Id = $Calendar_Year_Id
!  AND PR.Balance_Year = &TX.Balance_Year
!  AND PR.Wage_Loss_Plan = &C.Wage_Loss_Plan
!  AND PR.Province = &C.Province
!  AND PR.Balance_Period =
!      (SELECT MAX(Balance_Period)
!       FROM  PS_Can_Ded_Balance
!       WHERE EmplID = PR.EmplID
!         AND Company = PR.Company
!         AND Balance_Id = PR.Balance_Id
!         AND Balance_Year = PR.Balance_Year
!         AND Plan_Type = PR.Plan_Type
!         AND DedCd = PR.DedCd
!         AND Benefit_Plan = PR.Benefit_Plan
!         AND Ded_Class = PR.Ded_Class
!         AND Wage_Loss_Plan = PR.Wage_Loss_Plan
!         AND Province = PR.Province)
!  AND PR.Plan_Type like '8%'
!  AND PT.Plan_Type          = PR.Plan_Type
!  AND PT.Benefit_Plan       = PR.Benefit_Plan
!  AND PT.EffDt =
!      (SELECT MAX(EffDt)
!       FROM   PS_Pension_Pln_Tbl
!       WHERE  Plan_Type         = PT.Plan_Type
!         AND  Benefit_Plan      = PT.Benefit_Plan
!         AND  EffDt     <= $AsOfDate)
!ORDER by PR.Ded_YTD ASC
!end-SELECT

end-procedure


!**************************************
begin-procedure Select-Plan-Reg-No
!**************************************

begin-SELECT
PP.PLAN_REG_NO

  let $Plan_Reg_No = substr(&PP.Plan_Reg_No, 1, 7)

FROM  PS_PENSION_PLN_TBL PP
WHERE PP.PLAN_TYPE          = $Plan_Type_For_Reg
  AND PP.BENEFIT_PLAN       = $Benefit_Plan_For_Reg
  AND PP.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_PENSION_PLN_TBL
       WHERE  PLAN_TYPE         = PP.PLAN_TYPE
         AND  BENEFIT_PLAN      = PP.BENEFIT_PLAN
         AND  EFFDT     <= $AsOfDate)
end-SELECT

end-procedure


!**************************************
begin-procedure Get-PA-Reg-No
!**************************************

begin-SELECT
PP1.PLAN_TYPE
PP2.PLAN_REG_NO
PP1.EMPL_RCD
PP1.EMPLID
PP1.BENEFIT_NBR
PP1.EFFDT

  do Check-Plan-Status
  if rtrim($WaivedPriorPd, ' ') = 'N'
    let $PA_Reg_No = substr(&PP2.Plan_Reg_No, 1, 7)
  end-if

FROM  PS_PENSION_PLN_TBL PP2,
      PS_PENSION_PLAN PP1
WHERE PP1.EMPLID       = $EMPLID
  AND PP1.BENEFIT_PLAN <> ' '
  AND PP1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_PENSION_PLAN
       WHERE EMPLID    = PP1.EMPLID
         AND EMPL_RCD = PP1.EMPL_RCD
         AND PLAN_TYPE = PP1.PLAN_TYPE
         AND BENEFIT_NBR  = PP1.BENEFIT_NBR
         AND BENEFIT_PLAN =  PP1.BENEFIT_PLAN
         AND EFFDT    <= $AsOfDate)
  AND PP2.PLAN_TYPE          = PP1.PLAN_TYPE
  AND PP2.BENEFIT_PLAN       = PP1.BENEFIT_PLAN
  AND PP2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_PENSION_PLN_TBL
       WHERE  PLAN_TYPE         = PP2.PLAN_TYPE
         AND  BENEFIT_PLAN      = PP2.BENEFIT_PLAN
         AND  EFFDT     <= $AsOfDate)
ORDER BY PP1.PLAN_TYPE DESC, PP1.EFFDT ASC
end-SELECT

  if (($PA_Reg_No = '') or
      ($PA_Reg_No = ' '))
     move ' ' to $PA_Reg_No
  end-if


end-procedure

begin-procedure Check-Plan-Status

  let $WaivedPriorPd = 'N'

begin-SELECT
PP3.EMPLID

  let $WaivedPriorPd = 'Y'

FROM  PS_PENSION_PLAN PP3
WHERE PP3.EMPLID       = &PP1.EMPLID
  AND PP3.EMPL_RCD     = &PP1.EMPL_RCD
  AND PP3.PLAN_TYPE    = &PP1.PLAN_TYPE
  AND PP3.BENEFIT_NBR  = &PP1.BENEFIT_NBR
  AND PP3.COVERAGE_ELECT IN ('W', 'T')
  AND PP3.EFFDT =
      (SELECT MAX(PP4.EFFDT)
       FROM PS_PENSION_PLAN PP4
       WHERE PP4.EMPLID       = PP3.EMPLID
         AND PP4.EMPL_RCD     = PP3.EMPL_RCD
         AND PP4.PLAN_TYPE    = PP3.PLAN_TYPE
         AND PP4.BENEFIT_NBR  = PP3.BENEFIT_NBR
         AND PP4.BENEFIT_PLAN = PP3.BENEFIT_PLAN
         AND EFFDT    <= $AsOfDate)
  AND PP3.EFFDT <= $BeginDate
  AND PP3.EFFDT >= &PP1.EFFDT

end-SELECT

end-procedure


!**************************************
begin-procedure Pension-Adjustment
!**************************************

 if (#C.Pension_Adj_YTD > 0)
   if $T4_Needed = 'N'
     if $T4A_Will_Process = 'Y'
       move 'Y'  to $T4A_PA_Needed
     else
       move 'Y' to $T4_Needed
       move #C.Pension_Adj_YTD to #BoxAmt
       let #BoxAmt = round(#BoxAmt,0)
       let $Tbl_Box_Num   = '52'
       do Load-T4-Array
     end-if
   else
     move 'Y' to $T4_Needed
     move #C.Pension_Adj_YTD to #BoxAmt
     let #BoxAmt = round(#BoxAmt,0)
     let $Tbl_Box_Num   = '52'
     do Load-T4-Array
   end-if
 end-if

end-procedure


!**************************************
begin-procedure Format-CAN-YE-EMPL-Name
!**************************************

   let $MIFirstName = rtrim($FirstName, ' ')
   concat ' ' with $MIFirstName

   let #MIlen = length($MiddleName)

   find ' ' in $MiddleName 0 #spMI

   if #MIlen = 1
      extract $MidInitial from $MiddleName 0 1
   else
      if #MIlen = 0
         let $MidInitial = ' '
      end-if
   end-if

   if #MIlen > 1
      find ' ' in $MiddleName 0 #spMI

      let $MIchar_last  = ' '

      if #spMI > 0

         let #x = 0
         while #x < #MIlen
            extract $MIchar from $MiddleName #x 1
            if $MIchar_last = ' '
               concat $MIchar with $MIFirstName
            end-if
            move $MIchar to $MIchar_last
            add 1 to #x
         end-while
         let $FirstName = rtrim ($MIFirstName, ' ')
         let $MidInitial = ' '
      else
         extract $MIchar from $MiddleName 0 1
         let $MidInitial = rtrim ($MIchar, ' ')
      end-if
   end-if

   let $FirstName = substr($FirstName, 1, 12)
   let $MidInitial = substr($MidInitial, 1, 1)
   let $LastName = substr($LastName, 1, 30)

end-procedure


!**************************************
begin-procedure Get-Employee-Address
!**************************************

  let $AddressFound = 'N'
  let $Street1      = ''
  let $Street2      = ''
  let $City         = ''
  let $State        = ''
  let $Country      = ''
  let $Postal       = ''

begin-SELECT
PA.ADDRESS1
PA.ADDRESS2
PA.CITY
PA.STATE
PA.COUNTRY
PA.POSTAL

  let $AddressFound = 'Y'
  let $Street1      = &PA.Address1
  let $Street2      = &PA.Address2
  let $City         = &PA.City
  let $State        = &PA.State
  let $Country      = &PA.Country
  let $Postal       = &PA.Postal

FROM  PS_ADDRESSES  PA
WHERE PA.EMPLID       = $Emplid
AND   PA.ADDRESS_TYPE = $AddressType
AND   PA.EFF_STATUS   = 'A'
AND   PA.EFFDT = (SELECT MAX (PA1.EFFDT) FROM PS_ADDRESSES PA1
                        WHERE PA1.EMPLID = $Emplid
                          AND PA1.ADDRESS_TYPE = $AddressType
                          AND PA1.EFFDT <= {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX})
END-SELECT

  if $AddressFound = 'Y'
     move $Country to $Country
     let $Prov = rtrim($State, ' ')
     if $Prov = ''
        if $Country = 'CAN' or
           $Country = 'USA'
           move ' ' to $Prov
        end-if
     end-if

     if rtrim($Country, ' ') <> 'CAN' and
        rtrim($Country, ' ') <> 'USA'
        move 'ZZ' to $Prov
     end-if

     move $Postal to $PostalCode
  else
     let $Street1      = ' '
     let $Street2      = ' '
     let $City         = ' '
     let $State        = ' '
     let $Country      = ' '
     let $Postal       = ' '
  end-if

end-procedure

!**************************************
begin-procedure Initialize-Employee-T4-Data
!**************************************

  move 0 to #t
  while #t <= #max_t

     put #zero #zero $Sp into T4Box_Data(#t) T4_ErnAmt T4_DedAmt T4_BenPlan
     add 1 to #t

  end-while

end-procedure

!**************************************
begin-procedure Initialize-Employee-T4A-Data
!**************************************

  move 0 to #a
  while #a <= #max_a

    put #zero #zero $Sp into T4ABox_Data(#a) T4A_ErnAmt T4A_DedAmt T4A_BenPlan
     add 1 to #a

  end-while

end-procedure

!**************************************
begin-procedure Initialize-Employee-RV1-Data
!**************************************

  move 0 to #r
  while #r <= #max_r

    put #zero #zero into RV1Box_Data(#r) RV1_ErnAmt RV1_DedAmt
     add 1 to #r

  end-while

end-procedure

!**************************************
begin-procedure Initialize-Employee-RV2-Data
!**************************************

  move 0 to #v
  while #v <= #max_v

    put #zero #zero $Sp into RV2Box_Data(#v) RV2_ErnAmt RV2_DedAmt RV2_BenPlan
     add 1 to #v

  end-while

end-procedure

!**************************************
begin-procedure Initialize-Can-Ye-Slip-Array
!**************************************

  move 0   to #s
  move 10  to #max_s
  move ' ' to $Sp
  move 0   to #zero

  while #s < #max_s
    put $Sp $Sp #zero $Sp $Sp $Sp #zero #zero #zero $Sp $Sp $Sp $Sp #zero #zero $Sp $Sp $Sp into Can_Ye_Slip(#s)
      add 1 to #s

  end-while

  move 0   to #Can_Ye_Slip_Count

end-procedure

!**************************************
begin-procedure Initialize-Can-Ye-Detail-Array
!**************************************

  move 0   to #d
  move 200 to #max_d
  move ' ' to $Sp
  move 0   to #zero

  while #d < #max_d
    put $Sp $Sp #zero $Sp $Sp $Sp #zero #zero $Sp $Sp #zero into Can_Ye_Detail(#d)
      add 1 to #d

  end-while

  move 0 to #Can_Ye_Detail_Count
  move ' ' to $SaveWLP

end-procedure


!**************************************
begin-procedure Initialize-OI-Array
!**************************************

  move 0   to #d
  move 60 to #Max_RL1_OI
  move ' ' to $Sp
  move 0   to #zero

  while #d < #Max_RL1_OI
    put $Sp #zero into RL1OtherInfo(#d)
      add 1 to #d
  end-while

  move 0   to #d
  move 30 to #Max_RL2_OI

  while #d < #Max_RL2_OI
    put $Sp #zero into RL2OtherInfo(#d)
      add 1 to #d

  end-while


end-procedure


!**************************************
begin-procedure Initialize-Box26-Array
!**************************************

   move 0 to #load
   move 10 to #Max_Load
   move 0 to #loadzero
   move ' ' to $loadspace
   while #load < #Max_Load

       put $loadspace $loadspace $loadspace #loadzero $loadspace #loadzero 
           #loadzero #loadzero $loadspace into Prov_Box_26(#load)
           P_Company P_Emplid P_Province P_Cal_Yr P_WLP P_Balance_Period 
           P_Box26_Amt P_CPP_Contr P_Update_Flag
       add 1 to #load

   end-while
  
end-procedure


!**************************************
begin-procedure Load-Employee-Earnings
!**************************************

begin-SELECT

#ifdef DB2ALL
DECIMAL(SUM(ME.GRS_YTD),15,3)   &ME.Grs_YTD
#else
SUM(ME.GRS_YTD)         &ME.Grs_YTD
#endif

ME.ERNCD

   move 0 to #T4Search
   WHILE #T4Search <= #max_t
     GET $SearchErn from T4BOX_DATA(#T4SEARCH) T4_ERNCD
     if $SearchErn = &ME.ErnCd
        PUT &ME.Grs_YTD INTO T4BOX_DATA(#T4SEARCH) T4_ERNAMT
        add 1 to #T4Search
     else
        add 1 to #T4Search
     end-if
   END-WHILE

! if $T4A_Will_Process = 'Y'
   move 0 to #T4ASearch
   WHILE #T4ASearch <= #max_a
     GET $SearchErn from T4ABOX_DATA(#T4ASEARCH) T4A_ERNCD
     if $SearchErn = &ME.ErnCd
        PUT &ME.Grs_YTD INTO T4ABOX_DATA(#T4ASEARCH) T4A_ERNAMT
        if &ME.Grs_YTD <> 0
           move 'Y' to $T4A_Will_Process
        end-if
        add 1 to #T4ASearch
     else
        add 1 to #T4ASearch
     end-if
   END-WHILE
! end-if

   if rtrim($Province, ' ') = 'QC'
      move 0 to #RV1Search
      WHILE #RV1Search <= #max_r
        GET $SearchErn from RV1BOX_DATA(#RV1SEARCH) RV1_ERNCD
        if $SearchErn = &ME.ErnCd
           PUT &ME.Grs_YTD INTO RV1BOX_DATA(#RV1SEARCH) RV1_ERNAMT
           add 1 to #RV1Search
        else
           add 1 to #RV1Search
        end-if
      END-WHILE
      move 0 to #RV2Search
      WHILE #RV2Search <= #max_v
        GET $SearchErn from RV2BOX_DATA(#RV2SEARCH) RV2_ERNCD
        if $SearchErn = &ME.ErnCd
           PUT &ME.Grs_YTD INTO RV2BOX_DATA(#RV2SEARCH) RV2_ERNAMT
           if &ME.Grs_YTD <> 0
              move 'Y' to $RV2_Will_Process
           end-if
           add 1 to #RV2Search
        else
           add 1 to #RV2Search
        end-if
      END-WHILE
   end-if

FROM PS_CAN_ERN_BALANCE ME
WHERE ME.EMPLID = $EMPLID
  AND ME.COMPANY = &A.COMPANY
  AND ME.BALANCE_ID = $Calendar_Year_Id
  AND ME.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND ME.WAGE_LOSS_PLAN = $WAGELOSSPLAN
  AND ME.PROVINCE = $PROVINCE
  AND ME.SPCL_BALANCE = 'N'
  AND ME.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_CAN_ERN_BALANCE
       WHERE EMPLID = ME.EMPLID
         AND COMPANY = ME.COMPANY
         AND BALANCE_ID = ME.BALANCE_ID
         AND BALANCE_YEAR = ME.BALANCE_YEAR
         AND EMPL_RCD  = ME.EMPL_RCD
         AND SPCL_BALANCE = ME.SPCL_BALANCE
         AND ERNCD = ME.ERNCD
         AND WAGE_LOSS_PLAN = ME.WAGE_LOSS_PLAN
         AND PROVINCE = ME.PROVINCE)
GROUP BY ERNCD
ORDER BY ERNCD ASC
end-SELECT

end-procedure

!**************************************
begin-procedure Load-Employee-Deductions
!**************************************

  move 0 to #d

begin-SELECT
MD.BENEFIT_PLAN

#ifdef DB2ALL
DECIMAL(SUM(MD.DED_YTD),15,3)   &MD.Ded_YTD
#else
SUM(MD.DED_YTD)         &MD.Ded_YTD
#endif

MD.PLAN_TYPE
MD.DEDCD
MD.DED_CLASS
MD.DED_SLSTX_CLASS

   move 0 to #T4Look
   WHILE #T4Look <= #max_t
     GET $LookT4Box $LookDedCd $LookDedClass $LookDedSlsTxClass $LookPlanType from
              T4BOX_DATA(#T4LOOK) T4_BOX T4_DEDCD T4_DEDCLASS T4_DEDSLSTXCLASS T4_PLANTYPE
     if $LookDedCd = &MD.DedCd and
        $LookDedClass = &MD.Ded_Class and
        $LookDedSlsTxClass = &MD.Ded_SlsTx_Class and
        $LookPlanType = &MD.Plan_Type
           PUT &MD.Benefit_Plan INTO T4BOX_DATA(#T4LOOK) T4_BENPLAN
           ARRAY-ADD &MD.Ded_YTD to T4BOX_DATA(#T4LOOK) T4_DEDAMT
        if &MD.Ded_YTD > 0 and
           $T4A_Will_Process = 'Y'
               do Check-for-Common-Ded
        end-if
        add 1 to #T4Look
     else
        add 1 to #T4Look
     end-if
   END-WHILE

   move 0 to #T4ALook
   WHILE #T4ALook <= #max_a
     GET $LookT4ABox $LookDedCd $LookDedClass $LookDedSlsTxClass $LookPlanType from
            T4ABOX_DATA(#T4ALOOK) T4A_BOX T4A_DEDCD T4A_DEDCLASS T4A_DEDSLSTXCLASS T4A_PLANTYPE
     if $LookDedCd = &MD.DedCd and
        $LookDedClass = &MD.Ded_Class and
        $LookDedSlsTxClass = &MD.Ded_SlsTx_Class and
        $LookPlanType = &MD.Plan_Type
           PUT &MD.Benefit_Plan INTO T4ABOX_DATA(#T4ALOOK) T4A_BENPLAN
           ARRAY-ADD &MD.Ded_YTD to T4ABOX_DATA(#T4ALOOK) T4A_DEDAMT
        add 1 to #T4ALook
        if &MD.Ded_YTD <> 0
          move 'Y' to $T4A_Will_Process
        end-if
     else
        add 1 to #T4ALook
     end-if
   END-WHILE

   if rtrim($Province, ' ') = 'QC'
      move 0 to #RV1Look
      WHILE #RV1Look <= #max_r
        GET $LookRV1Box $LookDedCd $LookDedClass $LookDedSlsTxClass $LookPlanType from
           RV1BOX_DATA(#RV1LOOK) RV1_BOX RV1_DEDCD RV1_DEDCLASS RV1_DEDSLSTXCLASS RV1_PLANTYPE
        if $LookDedCd = &MD.DedCd and
           $LookDedClass = &MD.Ded_Class and
           $LookDedSlsTxClass = &MD.Ded_SlsTx_Class and
           $LookPlanType = &MD.Plan_Type
              ARRAY-ADD &MD.Ded_YTD to RV1BOX_DATA(#RV1LOOK) RV1_DEDAMT
              add 1 to #RV1Look
        else
           add 1 to #RV1Look
        end-if
      END-WHILE
      move 0 to #RV2Look
      WHILE #RV2Look <= #max_v
        GET $LookRV2Box $LookDedCd $LookDedClass $LookDedSlsTxClass $LookPlanType from
           RV2BOX_DATA(#RV2LOOK) RV2_BOX RV2_DEDCD RV2_DEDCLASS RV2_DEDSLSTXCLASS RV2_PLANTYPE
        if $LookDedCd = &MD.DedCd and
           $LookDedClass = &MD.Ded_Class and
           $LookDedSlsTxClass = &MD.Ded_SlsTx_Class and
           $LookPlanType = &MD.Plan_Type
              ARRAY-ADD &MD.Ded_YTD to RV2BOX_DATA(#RV2LOOK) RV2_DEDAMT
              add 1 to #RV2Look
              if &MD.Ded_YTD <> 0
                move 'Y' to $RV2_Will_Process
              end-if
        else
           add 1 to #RV2Look
        end-if
      END-WHILE
   end-if

FROM  PS_CAN_DED_BALANCE MD
WHERE MD.COMPANY = &A.COMPANY
  AND MD.EMPLID = $EMPLID
  AND MD.BALANCE_ID = $Calendar_Year_Id
  AND MD.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND MD.WAGE_LOSS_PLAN = $WAGELOSSPLAN
  AND MD.PROVINCE = $PROVINCE
  AND MD.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM  PS_CAN_DED_BALANCE
       WHERE EMPLID = MD.EMPLID
         AND COMPANY = MD.COMPANY
         AND BALANCE_ID = MD.BALANCE_ID
         AND BALANCE_YEAR = MD.BALANCE_YEAR
         AND PLAN_TYPE = MD.PLAN_TYPE
         AND BENEFIT_RCD_NBR = MD.BENEFIT_RCD_NBR
         AND DEDCD = MD.DEDCD
         AND BENEFIT_PLAN = MD.BENEFIT_PLAN
         AND DED_CLASS = MD.DED_CLASS
         AND DED_SLSTX_CLASS = MD.DED_SLSTX_CLASS
         AND WAGE_LOSS_PLAN = MD.WAGE_LOSS_PLAN
         AND PROVINCE = MD.PROVINCE)
GROUP BY MD.BENEFIT_PLAN, MD.PLAN_TYPE,MD.DEDCD,MD.DED_CLASS,MD.DED_SLSTX_CLASS
ORDER BY MD.DEDCD ASC
end-SELECT

end-procedure

!**************************************
begin-procedure Check-for-Common-Ded
!**************************************

  move 0 to #search_common
  while #search_common < #max_commonded
     get $Com_Dedcd $Com_PlanType from Common_Dedcd(#search_common)
            Ded_Code Ded_PlanType
     if $Com_Dedcd = &MD.Dedcd and
        $Com_PlanType = &MD.Plan_Type
           move 'Y' to $MatchFound
           break
     else
        add 1 to #search_common
     end-if
  end-while

end-procedure

!**************************************
begin-procedure Save-Pension-Data
!**************************************

             put  $PenPlanType        -
                  $PenBenPlan         -
                  $PenDedCd           -
                  $PenDedClass        -
                  $PenDedSlsTxClass   -
                  #PenAmt             -
             into Pension_Cntrb(#Pension_Cntrb_Idx) -
                  PLAN_TYPE          -
                  Benefit_Plan       -
                  DEDCD              -
                  DED_CLASS          -
                  DED_SLSTX_CLASS    -
                  YTD_Deds

             move #Pension_Cntrb_Idx to #Pension_Cntrb_Max
             add 1 to #Pension_Cntrb_Idx

end-procedure

!**************************************
begin-procedure Find-EE-Ern-Ded-Bal
!**************************************

  move ' ' to $EE_Ern_Fnd

begin-SELECT DISTINCT

EB.EMPLID           () on-break print=never after=EE-Change
EB.WAGE_LOSS_PLAN
EB.PROVINCE
WP5.CANADA_BN

  move &EB.Emplid          to $EMPLID
  move &EB.Wage_Loss_Plan  to $WAGELOSSPLAN
  move &EB.Province        to $PROVINCE
  move &WP5.CANADA_BN      to $Reporting_ID
  let  $Reporting_ID       = rtrim($Reporting_ID, ' ')
  move 'Y'                 to $T4A_Will_Process
  move 'Y'                 to $EE_Ern_Fnd

  do Process-Empl-YTD-Data

FROM PS_CAN_ERN_BALANCE EB,
     PS_WAGELS_PLAN_TBL WP5
  WHERE EB.BALANCE_ID = $Calendar_Year_Id
  AND EB.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND EB.COMPANY      = &A.COMPANY
  AND NOT EXISTS
  (SELECT 'X'
   FROM  PS_CAN_TAX_BALANCE CT3
   WHERE CT3.COMPANY       = EB.COMPANY
     AND CT3.EMPLID        = EB.EMPLID
     AND CT3.BALANCE_YEAR  = EB.BALANCE_YEAR
     AND CT3.BALANCE_ID    = EB.BALANCE_ID)
  AND WP5.WAGE_LOSS_PLAN   = EB.WAGE_LOSS_PLAN
  AND WP5.COMPANY          = EB.COMPANY
  AND WP5.EFFDT =
      (SELECT MAX(WP6.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL WP6
       WHERE  WP6.WAGE_LOSS_PLAN    = WP5.WAGE_LOSS_PLAN
         AND  WP6.COMPANY           = WP5.COMPANY
         AND  WP6.EFFDT            <= $AsOfDate)

end-SELECT


  move ' ' to $EE_Ded_Fnd

begin-SELECT DISTINCT

DB.EMPLID           () on-break print=never after=EE-Change
DB.WAGE_LOSS_PLAN
DB.PROVINCE
WP7.CANADA_BN

  move &DB.Emplid          to $EMPLID
  move &DB.Wage_Loss_Plan  to $WAGELOSSPLAN
  move &DB.Province        to $PROVINCE
  move &WP7.CANADA_BN      to $Reporting_ID
  let  $Reporting_ID       = rtrim($Reporting_ID, ' ')
  move 'Y'                 to $T4A_Will_Process
  move 'Y'                 to $EE_Ded_Fnd

  do Process-Empl-YTD-Data


FROM PS_CAN_DED_BALANCE DB,
     PS_WAGELS_PLAN_TBL WP7
  WHERE DB.BALANCE_ID = $Calendar_Year_Id
  AND DB.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND DB.COMPANY      = &A.COMPANY
  AND NOT EXISTS
  (SELECT 'X'
   FROM  PS_CAN_TAX_BALANCE CT4
   WHERE CT4.COMPANY       = DB.COMPANY
     AND CT4.EMPLID        = DB.EMPLID
     AND CT4.BALANCE_YEAR  = DB.BALANCE_YEAR
     AND CT4.BALANCE_ID    = DB.BALANCE_ID)
  AND NOT EXISTS
   (SELECT 'X'
    FROM PS_CAN_ERN_BALANCE CE3
    WHERE CE3.COMPANY       = DB.COMPANY
      AND CE3.BALANCE_ID    = DB.BALANCE_ID
      AND CE3.EMPLID        = DB.EMPLID
      AND CE3.BALANCE_YEAR  = DB.BALANCE_YEAR)
  AND WP7.WAGE_LOSS_PLAN    = DB.WAGE_LOSS_PLAN
  AND WP7.COMPANY           = DB.COMPANY
  AND WP7.EFFDT =
      (SELECT MAX(WP8.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL WP8
       WHERE  WP8.WAGE_LOSS_PLAN    = WP7.WAGE_LOSS_PLAN
         AND  WP8.COMPANY           = WP7.COMPANY
         AND  WP8.EFFDT            <= $AsOfDate)

end-SELECT

end-procedure


!**************************************
begin-procedure EE-Change
!**************************************

  do Process-RL-Records
  do After-Empl-Break

end-procedure


!**************************************
begin-procedure Find-Ern-Ded-Bal-By-EE
!**************************************

  move ' ' to $EE_Ern_Fnd

begin-SELECT DISTINCT

EB1.EMPLID           () on-break print=never after=EE-Change
EB1.WAGE_LOSS_PLAN
EB1.PROVINCE
WP.CANADA_BN

  move &EB1.Emplid          to $EMPLID
  move &EB1.Wage_Loss_Plan  to $WAGELOSSPLAN
  move &EB1.Province        to $PROVINCE
  move &WP.CANADA_BN        to $Reporting_ID
  let  $Reporting_ID        = rtrim($Reporting_ID, ' ')
  move 'Y'                  to $T4A_Will_Process
  move 'Y'                  to $EE_Ern_Fnd

  do Process-Empl-YTD-Data

FROM PS_CAN_ERN_BALANCE EB1,
     PS_CAN_YE_EMP_RELD RE,
     PS_WAGELS_PLAN_TBL WP

WHERE EB1.BALANCE_ID      = $Calendar_Year_Id
  AND EB1.BALANCE_YEAR    = &TX.BALANCE_YEAR
  AND EB1.COMPANY         = &A.COMPANY
  AND EB1.EMPLID          = RE.EMPLID
  AND NOT EXISTS
  (SELECT 'X'
   FROM  PS_CAN_TAX_BALANCE CT
   WHERE CT.COMPANY       = EB1.COMPANY
     AND CT.EMPLID        = EB1.EMPLID
     AND CT.BALANCE_YEAR  = EB1.BALANCE_YEAR
     AND CT.BALANCE_ID    = EB1.BALANCE_ID)

  AND WP.WAGE_LOSS_PLAN   = EB1.WAGE_LOSS_PLAN
  AND WP.COMPANY          = EB1.COMPANY
  AND WP.EFFDT =
      (SELECT MAX(WP1.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL WP1
       WHERE  WP1.WAGE_LOSS_PLAN    = WP.WAGE_LOSS_PLAN
         AND  WP1.COMPANY           = WP.COMPANY
         AND  WP1.EFFDT            <= $AsOfDate)

end-SELECT

  move ' ' to $EE_Ded_Fnd

begin-SELECT DISTINCT

DB1.EMPLID           () on-break print=never after=EE-Change
DB1.WAGE_LOSS_PLAN
DB1.PROVINCE
WP3.CANADA_BN

  move &DB1.Emplid          to $EMPLID
  move &DB1.Wage_Loss_Plan  to $WAGELOSSPLAN
  move &DB1.Province        to $PROVINCE
  move 'Y'                  to $T4A_Will_Process
  move 'Y'                  to $EE_Ded_Fnd
  move &WP3.CANADA_BN       to $Reporting_ID
  let  $Reporting_ID        = rtrim($Reporting_ID, ' ')

  do Process-Empl-YTD-Data

FROM PS_CAN_DED_BALANCE DB1,
     PS_CAN_YE_EMP_RELD RE1,
     PS_WAGELS_PLAN_TBL WP3

WHERE DB1.BALANCE_ID       = $Calendar_Year_Id
  AND DB1.BALANCE_YEAR     = &TX.BALANCE_YEAR
  AND DB1.COMPANY          = &A.COMPANY
  AND DB1.EMPLID           = RE1.EMPLID
  AND NOT EXISTS
  (SELECT 'X'
   FROM  PS_CAN_TAX_BALANCE CT1
   WHERE CT1.COMPANY       = DB1.COMPANY
     AND CT1.EMPLID        = DB1.EMPLID
     AND CT1.BALANCE_YEAR  = DB1.BALANCE_YEAR
     AND CT1.BALANCE_ID    = DB1.BALANCE_ID)
  AND NOT EXISTS
   (SELECT 'X'
    FROM PS_CAN_ERN_BALANCE CE
    WHERE CE.COMPANY       = DB1.COMPANY
      AND CE.BALANCE_ID    = DB1.BALANCE_ID
      AND CE.EMPLID        = DB1.EMPLID
      AND CE.BALANCE_YEAR  = DB1.BALANCE_YEAR)
  AND WP3.WAGE_LOSS_PLAN   = DB1.WAGE_LOSS_PLAN
  AND WP3.COMPANY          = DB1.COMPANY
  AND WP3.EFFDT =
      (SELECT MAX(WP4.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL WP4
       WHERE  WP4.WAGE_LOSS_PLAN    = WP3.WAGE_LOSS_PLAN
         AND  WP4.COMPANY           = WP3.COMPANY
         AND  WP4.EFFDT            <= $AsOfDate)

end-SELECT

end-procedure

!**************************************
begin-procedure Generate-Empl-Select
!**************************************

move ' ' to $Select_OPT
move ' ' to $Select_OPT2
move ' ' to $Select_OPT3
move 'N' to $Recs-Found
move 'Y' to $First-rec
move 'Y' to $First-group

begin-select
R1.COMPANY

  move 'Y' to $Recs-Found
  if $First-rec = 'Y'
     move 'N' to $First-rec
     move 'N' to $First-group
     move 'WHERE (' to $Select_OPT
     move 'WHERE (' to $Select_OPT2
     move 'WHERE (' to $Select_OPT3
  else
     concat ' OR '     with $Select_OPT
     concat ' OR '     with $Select_OPT2
     concat ' OR '     with $Select_OPT3
  end-if
  concat 'COMPANY = ''' with $Select_OPT
  concat &R1.Company    with $Select_OPT
  concat ''' '          with $Select_OPT

  concat 'EB3.COMPANY = ''' with $Select_OPT2
  concat &R1.Company    with $Select_OPT2
  concat ''' '          with $Select_OPT2

  concat 'DB3.COMPANY = ''' with $Select_OPT3
  concat &R1.Company    with $Select_OPT3
  concat ''' '          with $Select_OPT3


FROM PS_CAN_YE_CMP_RELD R1
end-select

  if $Recs-Found = 'Y'
     concat ')' with $Select_OPT
     concat ')' with $Select_OPT2
     concat ')' with $Select_OPT3
  end-if

move 'N' to $Recs-Found
move 'Y' to $First-rec

begin-select
R2.PROVINCE

  move 'Y' to $Recs-Found
  if $First-rec = 'Y'
     if $First-group = 'Y'
        move 'N' to $First-group
        move 'N' to $First-rec
        concat 'WHERE (' with $Select_OPT
        concat 'WHERE (' with $Select_OPT2
        concat 'WHERE (' with $Select_OPT3
     else
        move 'N' to $First-rec
        concat ' AND (' with $Select_OPT
        concat ' AND (' with $Select_OPT2
        concat ' AND (' with $Select_OPT3
     end-if
  else
     concat ' OR '     with $Select_OPT
     concat ' OR '     with $Select_OPT2
     concat ' OR '     with $Select_OPT3
  end-if
  concat 'PROVINCE = ''' with $Select_OPT
  concat &R2.PROVINCE    with $Select_OPT
  concat ''' '          with $Select_OPT

  concat 'EB3.PROVINCE = ''' with $Select_OPT2
  concat &R2.PROVINCE    with $Select_OPT2
  concat ''' '          with $Select_OPT2

  concat 'DB3.PROVINCE = ''' with $Select_OPT3
  concat &R2.PROVINCE    with $Select_OPT3
  concat ''' '          with $Select_OPT3

FROM PS_CAN_YE_PRV_RELD R2
end-select

  if $Recs-Found = 'Y'
     concat ')' with $Select_OPT
     concat ')' with $Select_OPT2
     concat ')' with $Select_OPT3
  end-if


end-procedure

!**************************************
begin-procedure Load-Employees
!**************************************

begin-sql on-error=Ignore
  DELETE FROM PS_CAN_YE_EMP_RELD
end-sql

begin-select DISTINCT
EMPLID

  move &Emplid to $load_empl
  do Insert-Emplid

FROM PS_CAN_TAX_BALANCE
#ifdef MVS
  \$SELECT_OPT\
#else
  [$SELECT_OPT]
#endif
  AND BALANCE_ID   = $Calendar_Year_Id
  AND BALANCE_YEAR = &TX.BALANCE_YEAR
end-select

end-procedure

begin-procedure Insert-Emplid

begin-sql On-Error=SQL-Error
INSERT INTO PS_CAN_YE_EMP_RELD (EMPLID) VALUES ($load_empl);
end-sql

end-procedure



!**************************************
begin-procedure Load-Employees-2nd-Pass
!**************************************

begin-select DISTINCT
EB3.EMPLID

  move &EB3.Emplid to $load_empl
  do Insert-Emplid

FROM PS_CAN_ERN_BALANCE EB3
#ifdef MVS
  \$SELECT_OPT2\
#else
  [$SELECT_OPT2]
#endif
  AND EB3.BALANCE_ID   = $Calendar_Year_Id
  AND EB3.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND NOT EXISTS
    (SELECT 'X'
    FROM PS_CAN_YE_EMP_RELD RG1
    WHERE RG1.EMPLID   = EB3.EMPLID)

end-select


begin-select DISTINCT
DB3.EMPLID

  move &DB3.Emplid to $load_empl
  do Insert-Emplid

FROM PS_CAN_DED_BALANCE DB3
#ifdef MVS
  \$SELECT_OPT3\
#else
  [$SELECT_OPT3]
#endif
  AND DB3.BALANCE_ID   = $Calendar_Year_Id
  AND DB3.BALANCE_YEAR = &TX.BALANCE_YEAR
  AND NOT EXISTS
    (SELECT 'X'
    FROM PS_CAN_YE_EMP_RELD RG2
    WHERE RG2.EMPLID   = DB3.EMPLID)

end-select

end-procedure


!**************************************
begin-procedure Get-Load-Type
!**************************************

let $None-loaded = 'N'
let $Select      = ' '
let $SLCTFROM    = ' '

begin-select
RC.SELECT_RELOAD_OPT

    let $Reload-ind = &RC.Select_reload_opt

FROM  PS_RC_CAN_YE  RC
WHERE RC.OPRID              = $Prcs_OprID
AND   RC.RUN_CNTL_ID        = $Prcs_Run_Cntl_ID
end-select

  if $Reload-ind = 'E'
        do Check-Reload-EE-Exist
        if $Reload_EE = 'N'
           let $None-loaded = 'Y'
        else
           move ', PS_CAN_YE_EMP_RELD RL '          to $SLCTFROM
           move 'AND C.EMPLID         = RL.EMPLID ' to $Select
        end-if
  else
     if $Reload-ind = 'G'
        do Generate-Empl-Select
        if $Select_OPT <> ' '
           do Load-Employees
           do Load-Employees-2nd-Pass
            move ', PS_CAN_YE_EMP_RELD RL '          to $SLCTFROM
            move 'AND C.EMPLID         = RL.EMPLID ' to $Select
        else
            move ' ' to $Select
            move ' ' to $SLCTFROM
            let $None-loaded = 'Y'
        end-if
     else
         move ' ' to $Select
         move ' ' to $SLCTFROM
     end-if
  end-if


end-procedure


!**************************************
begin-procedure Check-Reload-EE-Exist
!**************************************

  let $Reload_EE = 'N'

begin-SELECT
'X'

  move 'Y' to $Reload_EE

FROM PS_CAN_YE_EMP_RELD

end-SELECT

end-procedure

!**************************************
begin-procedure Delete-Reload-Options
!**************************************

begin-sql on-error=Ignore
  DELETE FROM PS_CAN_YE_EMP_RELD
end-sql

begin-sql on-error=Ignore
  DELETE FROM PS_CAN_YE_CMP_RELD
end-sql

begin-sql on-error=Ignore
  DELETE FROM PS_CAN_YE_PRV_RELD
end-sql

end-procedure


!**************************************
begin-procedure Print-Error-Line
!**************************************

  if rtrim($Company, ' ') <> rtrim($priorCompany, ' ')
    if $ErrorStart = 'N'
      NEW-PAGE
    end-if
    do Get-Company-Data
  end-if

  next-listing need=3

  if rtrim($Company, ' ') <> rtrim($priorCompany, ' ')
    move $Company to $priorCompany
  end-if

  print $EmplID           (+1,1)

  if $EmplLoadErr   = 'Y'
    print $EmplName       (0,15)
    print $SIN            (0,65)   edit xxx-xxx-xxx
    move 'N' to $EmplLoadErr
  end-if

  if $IDLoadErr     = 'Y'
    print $TaxFormID      (0,81)
    print $WageLossPlan   (0,88)
    print $Province       (0,95)
    print $Reporting_ID   (0,106)
    move 'N' to $IDLoadErr
  end-if

  if $DetailLoadErr = 'Y'
    print $TaxFormID      (0,81)
    print $WageLossPlan   (0,88)
    print $Province       (0,95)
    print $Tbl_Box_Num    (0,124)
    print #BoxAmt         (0,129)  edit b9999999.99
    print $BoxText        (0,142)
    move 'N' to $DetailLoadErr
  end-if

  print $ErrorMsg         (0,153)

  move 'N' to $ErrorStart

end-procedure


!******************************************************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#ifdef PRCSSCHD
#Include 'stdapi.sqc'    !Update Process API
!#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'getaddr.sqc'   !Get current person address

!******************************************************************************

