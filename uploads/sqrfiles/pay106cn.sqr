!***********************************************************************
!  PAY106CN:    Print ROE Web XML Audit Report                         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!Confidentiality Information:                                          *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/20:21:28:39                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  694792                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !printer and page-size init

#define col_PrintLang            69
#define col_Issue               121
#define col_ROE_Box               2
#define col_SN_ROE_Amended        2
#define col_Pay_Ref               2
#define col_CRABN                69
#define col_PP_Type              69
#define col_SIN                   2
#define col_EE_Info               2
#define col_EE_Name               4
#define col_EE_Address            4
#define col_First_Day_Wk          2
#define col_Last_Day_Pd          69
#define col_Final_PP_Dt           2
#define col_Occupation           69
#define col_Expect_Recall         2
#define col_Recall_Cd             4
#define col_DT_of_Recall         69
#define col_TotalInsHr            2
#define col_TotalInsEarns        69
#define col_Ins_Earns             2
#define col_PP_Nbr_col1           4
#define col_PP_Amt_col1          17
#define col_PP_Nbr_col2          29
#define col_PP_Amt_col2          43
#define col_PP_Nbr_col3          55
#define col_PP_Amt_col3          70
#define col_PP_Nbr_col4          82
#define col_PP_Amt_col4          95
#define col_PP_Nbr_col5         108
#define col_PP_Amt_col5         121
#define col_PP_Nbr_col6         133
#define col_PP_Amt_col6         146
#define col_Reason_Issue          2
#define col_Reason_Cd             4
#define col_Issue_Name           40
#define col_Phone                 4
#define col_VacPayAmt             2
#define col_StatHol               2
#define col_SH_Date_col1          4
#define col_SH_Amt_col1          23
#define col_SH_Date_col2         40
#define col_SH_Amt_col2          60
#define col_SH_Date_col3         77
#define col_SH_Amt_col3          97
#define col_Other_Monies          2
#define col_OM_Cd_col1            4
#define col_OM_Amt_col1          23
#define col_OM_Cd_col2           40
#define col_OM_Amt_col2          60
#define col_OM_Cd_col3           77
#define col_OM_Amt_col3          97
#define col_Comment               2
#define col_SP_Info               2
#define col_SP_Dt                 4
#define col_SP_Amt               40
#define col_SP_Period            77
#define col_SP_Lv_Type          121
#define col_Comm_Lang             2

begin-heading 3
  #Include 'stdhdgtr.sqc'
end-heading

begin-report

  do Init-Report

  do Process-Main

  close 10

  do Reset

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report

begin-procedure Init-Report

  do Init-DateTime
  #ifdef PRCSSCHD
    do StdAPI-Init
  #endif

 do Initialization

end-procedure

begin-procedure Initialization

  move 'N' to $FileAtEnd

  move 'PAY106CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  do Select-Parameters
  move $RC_PAY.ROE_EXPORT_FILE to $ROE_FileName
  let $ROE_FileName =  rtrim($ROE_FileName, ' ')
  let $ROE_FileName =  '{IMPORTPREFIX}' || $ROE_FileName

  do Open-File

  move $PAY106CN_Title to $ReportTitle
  display 'Print Web ROE XML Audit Report'


  create-array name=Box15C size=54            -
    field=PP_nbr:char                         -
    field=Amount:number

  create-array name=Box17B size=4             -
    field=HolidayPayDt:char                   -
    field=Amount:number

  create-array name=Box17C size=4             -
    field=OtherMoniesNum:char                 -
    field=OtherMoniesCd:char                  -
    field=Amount:number


  do Initialize-ROE-Details
  do Init-Arrays

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY106CN  program ids

  do Init_Report_Translation($ReportID,$Language_Cd)
  do Get_Field_Information ('PAY106CN', 'TITLE'           , $PAY106CN_Title            , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'PRINT_LANG'      , $PAY106CN_PrintLang        , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'ISSUE'           , $PAY106CN_Issue            , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SIN'             , $PAY106CN_SIN              , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'ROE_BOX_DATA'    , $PAY106CN_ROE_Box_Data     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SN_AMENDED'      , $PAY106CN_SN_Amended       , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'PAYROLL_REF#'    , $PAY106CN_PayrollRef       , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'CRABN'           , $PAY106CN_CRABN            , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'PAY_PERIOD_TYPE' , $PAY106CN_PayPeriodType    , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'EE_INFO'         , $PAY106CN_EE_Info          , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'NAME'            , $PAY106CN_Name             , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'ADDRESS'         , $PAY106CN_EE_Address       , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'FIRST_DAY_WK'    , $PAY106CN_FirstDayWk       , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'LAST_DAY_PAID'   , $PAY106CN_LastDayPd        , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'FINAL_PP_END_DT' , $PAY106CN_Final_PP_End_Dt  , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'EE_OCCUPATION'   , $PAY106CN_EE_Occupation    , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'EXPECT_RECALL_INFO' , $PAY106CN_Recall_Info   , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'RECALL_CD'       , $PAY106CN_Recall_Cd        , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'DATE_OF_RECALL'  , $PAY106CN_Dt_Of_Recall     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'TOTAL_INS_HOURS' , $PAY106CN_Total_Ins_Hr     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'TOTAL_INS_EARNS' , $PAY106CN_Total_Ins_Earns  , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'INS_EARNINGS'    , $PAY106CN_Ins_Earnings     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'PP_NBR'          , $PAY106CN_PP_Nbr           , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'AMOUNT'          , $PAY106CN_Amount           , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'REASON_ISSUE'    , $PAY106CN_Reason_Issue     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'REASON_CODE'     , $PAY106CN_Reason_Cd        , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'PHONE_NBR'       , $PAY106CN_Phone_Nbr        , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'VAC_PAY_AMT'     , $PAY106CN_Vac_Pay_Amt      , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'STAT_HOL_INFO'   , $PAY106CN_Stat_Hol_Info    , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'DATE'            , $PAY106CN_Date             , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'OTHER_MONIES'    , $PAY106CN_Other_Monies     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'CODE'            , $PAY106CN_Code             , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'COMMENT'         , $PAY106CN_Comment          , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SPEC_PAY_INFO'   , $PAY106CN_Spec_Pay_Info    , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SPEC_PAY_DATE'   , $PAY106CN_Spec_Pay_Date    , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SPEC_PAY_AMT'    , $PAY106CN_Spec_Pay_Amt     , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SPEC_PAY_PERIOD' , $PAY106CN_Spec_Pay_Period  , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'SPEC_PAY_LV_TYPE', $PAY106CN_Spec_Pay_Lv_Type  , #dummy_width)
  do Get_Field_Information ('PAY106CN', 'COM_LANG '       , $PAY106CN_Communicate_Lang , #dummy_width)

end-procedure

begin-procedure Open-File

  open $ROE_FileName as 10 for-reading record=200:vary status = #filestat

  if #filestat != 0              !file open error
    move #filestat to $filestat 99999
    show 'File Open Error, Status: ' $filestat
    show 'Input File Name: ' $ROE_FileName
      stop
    else
      show 'Reading File ' $ROE_FileName
  end-if

end-procedure


begin-procedure Process-Main

  while 1 = 1

   if $FileAtEnd = 'Y'
       break
   else
      do Read-File
      if $FileAtEnd = 'Y'
        break
      else
         let $ROEData_Full_Rec = ltrim($ROEData, ' ')
         let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')

         if $ROEData_Full_Rec  = '</Roe>'
           do Print-ROE-Details
           do Initialize-ROE-Details
           do Init-Arrays
         else
           do Process-ROE-XML-Records
         end-if

      end-if
   end-if
  end-while

end-procedure


begin-procedure Read-File

  read 10 into $ROEData:200

    if #end-file = 1
      move 'Y' to $FileAtEnd
    end-if

end-procedure


begin-procedure Process-ROE-XML-Records

  do Parse-XML
  if rtrim($Element, ' ') <> ''
    do Extract-ROE-Data
  else
    do Check-Group-Tag
  end-if

end-procedure


begin-procedure Parse-XML

  let #RecLength           = 0
  let #BeginTagPosition    = 0
  let #EndTagPosition      = 0
  let #TagLength           = 0
  let #TagSlashPosition    = 0
  let $Tag                 = ' '
  let $Element_Tag         = ' '
  let $Element             = ' '

  let #RecLength = length($ROEData_Full_Rec)

  while  instr ($ROEData_Full_Rec , '<', 1) <> 0
    let #BeginTagPosition  = instr ($ROEData_Full_Rec , '<', 1)

    while instr($ROEData_Full_Rec , '>', 1)   <> 0
      let #EndTagPosition = instr($ROEData_Full_Rec , '>', 1)

      if #RecLength =  #EndTagPosition        !No element found!
        let $Group_Tag = rtrim($ROEData_Full_Rec , ' ')
        break
      else
        let #TagLength = (#EndTagPosition - #BeginTagPosition) + 1
        let $Tag = substr($ROEData_Full_Rec , #BeginTagPosition, #TagLength)
        let #TagSlashPosition = instr($Tag, '/', 1)

        if #TagSlashPosition <> 2
          let $Element_Tag = $Tag
        end-if

        let $ROEData_Full_Rec = ltrim (replace($ROEData_Full_Rec , $Tag, ' '),' ')

        if instr($ROEData_Full_Rec , '<',1) = 0
          let $Element = $ROEData_Full_Rec    !Element left after tags removed!
        end-if
        break

      end-if

    end-while

    if #RecLength =  #EndTagPosition          !No element found!
      break
    end-if

  end-while

  let $Element = replace($Element, '&amp;'  , '&')
  let $Element = replace($Element, '&lt;'   , '<')
  let $Element = replace($Element, '&quot;' , '"')
  let $Element = replace($Element, '&gt;'   , '>')
  let $Element = replace($Element, '&apos;' , '''')

end-procedure


begin-procedure Extract-ROE-Data

  let $Element_Tag = replace($Element_Tag, '<', ' ')
  let $Element_Tag = replace($Element_Tag, '>', ' ')
  let $Element_Tag = ltrim($Element_Tag, ' ')
  let $Element_Tag = rtrim($Element_Tag, ' ')

  evaluate $Element_Tag
    when = 'B2'
      let $SN_ROE_Amended              = $Element
      break
    when = 'B3'
      let $PayrollRefNumber            = $Element
      break
    when = 'B5'
      let $CRABN                       = $Element
      break
    when = 'B6'
      let $PayPeriodType               = $Element
      break
    when = 'B8'
      let $SIN                         = $Element
      break
    when = 'FN'
      if $Group_Tag = '<B9>'
        let $EE_FirstName              = $Element
      else
        if $Group_Tag = '<B16>'
          let $ROE_Contact_FN          = $Element
        end-if
      end-if
      break
    when = 'MN'
      let $EE_MiddleName               = $Element
      break
    when = 'LN'
      if $Group_Tag = '<B9>'
        let $EE_LastName               = $Element
      else
        if $Group_Tag = '<B16>'
          let $ROE_Contact_LN          = $Element
        end-if
      end-if
      break
    when = 'A1'
      let $EE_Address1                 = $Element
      break
    when = 'A2'
      let $EE_Address2                 = $Element
      break
    when = 'A3'
      let $EE_Address3                 = $Element
      break
    when = 'B10'
      let $FirstDayWorked              = $Element
      break
    when = 'B11'
      let $LastDayPaid                 = $Element
      break
    when = 'B12'
      let $FinalPayPeriodEndDt         = $Element
      break
    when = 'B13'
      let $EE_Occupation               = $Element
      break
    when = 'CD'
      if $Group_Tag = '<B14>'
        let $ExpectRecallCd            = $Element
      else
        if $Group_Tag = '<B16>'
          let $ROE_IssueCd             = $Element
        else
          if $Box17C = 'Y'
            let $OtherMoniesCd         = $Element
            do Load-Box17C-Array
          end-if
        end-if
      end-if
      break
    when = 'DT'
      if $Group_Tag = '<B14>'
        let $ExpectRecallDt            = $Element
      else
        if $Group_Tag = '<B19>'
          let $SpecialPaymentDt        = $Element
        else
          if $Box17B = 'Y'
            let $StatHolPayDate        = $Element
            do Load-Box17B-Array
          end-if
        end-if
      end-if
      break
    when = 'B15A'
      let $TotalInsHr                  = $Element
      break
    when = 'B15B'
      let $TotalInsEarns               = $Element
      break
    when = 'AC'
      let $Contact_Phone_AreaCd        = $Element
      break
    when = 'TEL'
      let $Contact_Phone               = $Element
      break
    when = 'B17A'
      let $VacationPayAmt              = $Element
      break
    when = 'B18'
      let $Comment                     = $Element
      break
    when = 'AMT'
      if $Group_Tag = '<B19>'
        let $SpecialPayAmt             = $Element
      else
        if $Box15C = 'Y'
          move $Element to #Box15C_Amt
          do Load-Box15C-Array
        else
          if $Box17B = 'Y'
            move $Element to #Box17B_Amt
            do Load-Box17B-Array
          else
            if $Box17C = 'Y'
              move $Element to #Box17C_Amt
              do Load-Box17C-Array
            end-if
          end-if
        end-if
      end-if
      break
    when = 'Period'
      let $SpecialPayPeriod            = $Element
      break
    when = 'B20'
      let $CommunicateLangCd           = $Element
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Check-Group-Tag

  let $Group_Tag = ' '
  let $PP_Nbr    = ' '
  let $SH_Nbr    = ' '
  let $OM_Nbr    = ' '
  let $Box15C    = ' '
  let $Box17B    = ' '
  let $Box17C    = ' '


    let #String_Loc  = instr($ROEData_Full_Rec, 'PrintingLanguage', 1)
    if #String_Loc <> 0
      let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')
      do Find-Tag-Value
      let $PrintLang  = $TagValue

      let #EndTagLoc   = instr($ROEData_Full_Rec , '>', 1)
      if #EndTagLoc <> 0
        let #BegValuePos = #EndTagLoc - 2
        let $ProcMethod  = substr($ROEData_Full_Rec, #BegValuePos, 1)
      end-if

    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, 'PP nbr', 1)
    if #String_Loc <> 0
      let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')
      do Find-Tag-Value
      let $PP_Nbr    = $TagValue
      let $Box15C    = 'Y'
    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, 'SH nbr', 1)
    if #String_Loc <> 0
      let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')
      do Find-Tag-Value
      let $SH_Nbr    = $TagValue
      let $Box17B    = 'Y'
      let $StatHolPayDate = ' '
      let #Box17B_Amt     = 0
    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, 'OM nbr', 1)
    if #String_Loc <> 0
      let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')
      do Find-Tag-Value
      let $OM_Nbr    = $TagValue
      let $Box17C    = 'Y'
      let $OtherMoniesCd  = ' '
      let #Box17C_Amt     = 0
    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, 'SP cd', 1)
    if #String_Loc <> 0
      let $ROEData_Full_Rec = rtrim($ROEData_Full_Rec, ' ')
      do Find-Tag-Value
      let $SP_Type   = $TagValue
      let $Group_Tag = '<B19>'
    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, '<B9>', 1)
    if #String_Loc <> 0
      let $Group_Tag = '<B9>'
    end-if


    let #String_Loc  = instr($ROEData_Full_Rec, '<B14>', 1)
    if #String_Loc <> 0
      let $Group_Tag = '<B14>'
    end-if

    let #String_Loc  = instr($ROEData_Full_Rec, '<B16>', 1)
    if #String_Loc <> 0
      let $Group_Tag = '<B16>'
    end-if

end-procedure


begin-procedure Find-Tag-Value

  let #BegValuePos = 0
  let #EndValuePos = 0
  let #ValueLen    = 0
  let $TagValue    = ' '

  let #BegValuePos = (instr($ROEData_Full_Rec, '"', 1)) +1
  let #EndValuePos = (instr($ROEData_Full_Rec, '"', #BegValuePos)) - 1
  let #ValueLen    = #EndValuePos - #BegValuePos +1

  let $TagValue    = substr($ROEData_Full_Rec, #BegValuePos, #ValueLen)

end-procedure


begin-procedure Init-Arrays

  move 0 to #i
  while #i <= 53
  put ' '                 -
      000.00              -
    into Box15C(#i)       -
       PP_nbr             -
       Amount
    add 1 to #i
  end-while

  move 0 to #i
  while #i <= 3
  put ' '                 -
      000.00              -
    into Box17B(#i)       -
       HolidayPayDt       -
       Amount
    add 1 to #i
  end-while

  move 0 to #i
  while #i <= 3
  put ' '                 -
      000.00              -
    into Box17C(#i)       -
       OtherMoniesCd      -
       Amount
    add 1 to #i
  end-while

end-procedure


begin-procedure Initialize-ROE-Details

  let $PrintLang              = ' '
  let $ProcMethod             = ' '
  let $SN_ROE_Amended         = ' '
  let $PayrollRefNumber       = ' '
  let $CRABN                  = ' '
  let $PayPeriodType          = ' '
  let $SIN                    = ' '
  let $Group_Tag              = ' '
  let $EE_FirstName           = ' '
  let $ROE_Contact_FN         = ' '
  let $EE_MiddleName          = ' '
  let $EE_LastName            = ' '
  let $ROE_Contact_LN         = ' '
  let $EE_Address1            = ' '
  let $EE_Address2            = ' '
  let $EE_Address3            = ' '
  let $FirstDayWorked         = ' '
  let $LastDayPaid            = ' '
  let $FinalPayPeriodEndDt    = ' '
  let $EE_Occupation          = ' '
  let $ExpectRecallCd         = ' '
  let $ROE_IssueCd            = ' '
  let $OtherMoniesCd          = ' '
  let $ExpectRecallDt         = ' '
  let $SpecialPaymentDt       = ' '
  let $StatHolPayDate         = ' '
  let $TotalInsHr             = ' '
  let $TotalInsEarns          = ' '
  let $Contact_Phone_AreaCd   = ' '
  let $Contact_Phone          = ' '
  let $VacationPayAmt         = ' '
  let $Comment                = ' '
  let $SpecialPayAmt          = ' '
  let $Box15C                 = ' '
  let $Box17B                 = ' '
  let $Box17C                 = ' '
  let #Box15C_Amt             = 0
  let #Box17B_Amt             = 0
  let #Box17C_Amt             = 0
  let $SpecialPayPeriod       = ' '
  let $SP_Type                = ' '
  let $CommunicateLangCd      = ' '

end-procedure


begin-procedure Load-Box15C-Array

  let #i = $PP_Nbr

  put  $PP_Nbr            -
       #Box15C_Amt        -
    into Box15C(#i)       -
       PP_nbr             -
       Amount

end-procedure


begin-procedure Load-Box17B-Array

  let #i = $SH_Nbr

  put $StatHolPayDate     -
      #Box17B_Amt         -
    into Box17B(#i)       -
       HolidayPayDt       -
       Amount

end-procedure


begin-procedure Load-Box17C-Array

  let #i = $OM_Nbr

  put $OtherMoniesCd      -
      #Box17C_Amt         -
    into Box17C(#i)       -
       OtherMoniesCd      -
       Amount

end-procedure


begin-procedure Print-ROE-Details

  next-listing need=4

  print '**************************************' (+2,{col_SIN})

  print $PAY106CN_SIN              (+1,{col_SIN})
  if rtrim($SIN, ' ') <> ''
    print $SIN                     (0,+2)               edit xxx-xxx-xxx
  end-if

  print $PAY106CN_PrintLang        (0,{col_PrintLang})
  print $PrintLang                 (0,+2)
  print $PAY106CN_Issue            (0,{col_Issue})
  print $ProcMethod                (0,+2)

  print '**************************************' (+1,{col_SIN})

  print $PAY106CN_ROE_Box_Data     (+2,{col_ROE_Box})
  print $PAY106CN_SN_Amended       (+2,{col_SN_ROE_Amended})
  print $SN_ROE_Amended            (0,+2)
  print $PAY106CN_PayPeriodType    (0,{col_PP_Type})
  print $PayPeriodType             (0,+2)
  print $PAY106CN_PayrollRef       (+1,{col_Pay_Ref})
  print $PayrollRefNumber          (0,+2)
  print $PAY106CN_CRABN            (0,{col_CRABN})
  print $CRABN                     (0,+2)

  print $PAY106CN_EE_Info          (+1,{col_EE_Info})
  print $PAY106CN_Name             (+1,{col_EE_Name})
  let $EE_LastName    =  rtrim($EE_LastName,' ')
  if $EE_LastName <> ''
    print $EE_LastName               (0,14)
    print ','                        (0,0)
    let $EE_FirstName  =  rtrim($EE_FirstName, ' ')
    print $EE_FirstName              (0,+1)
    print $EE_MiddleName             (0,+1)
  end-if
  print $PAY106CN_EE_Address       (+1,{col_EE_Address})
  let $out = rtrim($EE_Address1, ' ')  || ',' || ' ' || rtrim($EE_Address2, ' ')
  print $out                       (0,14)
  if rtrim($EE_Address3, ' ') <> ''
    print $EE_Address3             (+1,14)
  end-if
  print $PAY106CN_FirstDayWk       (+1,{col_First_Day_Wk})
  if rtrim($FirstDayWorked, ' ') <> ''
    print $FirstDayWorked          (0,+2)                edit xx-xx-xxxx
  end-if
  print $PAY106CN_LastDayPd        (0,{col_Last_Day_Pd})
  if rtrim($LastDayPaid, ' ') <> ''
    print $LastDayPaid             (0,+2)                edit xx-xx-xxxx
  end-if
  print $PAY106CN_Final_PP_End_Dt  (+1,{col_Final_PP_Dt})
  if rtrim($FinalPayPeriodEndDt, ' ') <> ''
    print $FinalPayPeriodEndDt     (0,+2)                edit xx-xx-xxxx
  end-if
  print $PAY106CN_EE_Occupation    (0,{col_Occupation})
  print $EE_Occupation             (0,+2)
  print $PAY106CN_Recall_Info      (+1,{col_Expect_Recall})
  print $PAY106CN_Recall_Cd        (+1,{col_Recall_Cd})
  print $ExpectRecallCd            (0,+2)
  print $PAY106CN_Dt_Of_Recall     (0,{col_DT_of_Recall})
  if rtrim($ExpectRecallDt, ' ') <> ''
    print $ExpectRecallDt          (0,+2)                edit xx-xx-xxxx
  end-if
  print $PAY106CN_Total_Ins_Hr     (+1,{col_TotalInsHr})
  print $TotalInsHr                (0,+2)
  print $PAY106CN_Total_Ins_Earns  (0,{col_TotalInsEarns})
  print $TotalInsEarns             (0,+2)
  print $PAY106CN_Ins_Earnings     (+1,{col_Ins_Earns})

  do Print-Box15C

  print $PAY106CN_Reason_Issue     (+1,{col_Reason_Issue})
  print $PAY106CN_Reason_Cd        (+1,{col_Reason_Cd})
  print $ROE_IssueCd               (0,+2)
  print $PAY106CN_Name             (0,{col_Issue_Name})
  let $ROE_Contact_LN = rtrim($ROE_Contact_LN, ' ')
  if $ROE_Contact_LN <> ''
    print $ROE_Contact_LN            (0,+2)
    print ','                        (0,0)
    let $ROE_Contact_FN  =  rtrim($ROE_Contact_FN, ' ')
    print $ROE_Contact_FN            (0,+1)
  end-if
  print $PAY106CN_Phone_Nbr        (+1,{col_Phone})
  let $out = rtrim($Contact_Phone_AreaCd,' ') ||   rtrim($Contact_Phone, ' ')
  if rtrim($out, ' ') <> ''
    print $out                     (0,+2)                edit xxx-xxx-xxxx
  end-if
  print $PAY106CN_Vac_Pay_Amt      (+1,{col_VacPayAmt})
  print $VacationPayAmt            (0,+2)

  do Print-Box-17B

  do Print-Box-17C

  print $PAY106CN_Comment          (+1,{col_Comment})
  print $Comment                   (+1,4)              wrap 90 2
  print $PAY106CN_Spec_Pay_Info    (+1,{col_SP_Info})
  print $PAY106CN_Spec_Pay_Date    (+1,{col_SP_Dt})
  if rtrim($SpecialPaymentDt, ' ') <> ''
    print $SpecialPaymentDt        (0,+2)               edit xx-xx-xxxx
  end-if
  print $PAY106CN_Spec_Pay_Amt     (0,{col_SP_Amt})
  print $SpecialPayAmt             (0,+2)
  print $PAY106CN_Spec_Pay_Period  (0,{col_SP_Period})
  print $SpecialPayPeriod          (0,+2)
  print $PAY106CN_Spec_Pay_Lv_Type (0,{col_SP_Lv_Type})
  print $SP_Type                   (0, +2)
  print $PAY106CN_Communicate_Lang (+1,{col_Comm_Lang})
  print $CommunicateLangCd         (0,+2)

end-procedure


begin-procedure Print-Box15C

  print $PAY106CN_PP_Nbr           (+1,{col_PP_Nbr_col1})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col1})
  print $PAY106CN_PP_Nbr           (0,{col_PP_Nbr_col2})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col2})
  print $PAY106CN_PP_Nbr           (0,{col_PP_Nbr_col3})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col3})
  print $PAY106CN_PP_Nbr           (0,{col_PP_Nbr_col4})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col4})
  print $PAY106CN_PP_Nbr           (0,{col_PP_Nbr_col5})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col5})
  print $PAY106CN_PP_Nbr           (0,{col_PP_Nbr_col6})
  print $PAY106CN_Amount           (0,{col_PP_Amt_col6})

  let #j = 1
  while #j <= 53
    get               $Box15C_PP       -
                      #Box15C_amt      -
    from  Box15C(#j)  PP_nbr           -
                      Amount

    let $Box15C_PP = rtrim($Box15C_PP, ' ')

    evaluate $Box15C_PP
      when = '1'
      when = '7'
      when = '13'
      when = '19'
      when = '25'
      when = '31'
      when = '37'
      when = '43'
      when = '49'
        print $Box15C_PP           (+1,{col_PP_Nbr_col1})
        print #Box15C_amt          (0,14) edit 999999.99
        break
      when = '2'
      when = '8'
      when = '14'
      when = '20'
      when = '26'
      when = '32'
      when = '38'
      when = '44'
      when = '50'
        print $Box15C_PP           (0,{col_PP_Nbr_col2})
        print #Box15C_amt          (0,40) edit 999999.99
        break
      when = '3'
      when = '9'
      when = '15'
      when = '21'
      when = '27'
      when = '33'
      when = '39'
      when = '45'
      when = '51'
        print $Box15C_PP           (0,{col_PP_Nbr_col3})
        print #Box15C_amt          (0,67) edit 999999.99
        break
      when = '4'
      when = '10'
      when = '16'
      when = '22'
      when = '28'
      when = '34'
      when = '40'
      when = '46'
      when = '52'
        print $Box15C_PP           (0,{col_PP_Nbr_col4})
        print #Box15C_amt          (0,92) edit 999999.99
        break
      when = '5'
      when = '11'
      when = '17'
      when = '23'
      when = '29'
      when = '35'
      when = '41'
      when = '47'
      when = '53'
        print $Box15C_PP           (0,{col_PP_Nbr_col5})
        print #Box15C_amt          (0,118) edit 999999.99
        break
      when = '6'
      when = '12'
      when = '18'
      when = '24'
      when = '30'
      when = '36'
      when = '42'
      when = '48'
        print $Box15C_PP           (0,{col_PP_Nbr_col6})
        print #Box15C_amt          (0,143) edit 999999.99
        break
      when-other
        break
      end-evaluate

    let #j = #j +1
  end-while
end-procedure


begin-procedure Print-Box-17B

  print $PAY106CN_Stat_Hol_Info    (+1,{col_StatHol})
  print $PAY106CN_Date             (+1,{col_SH_Date_col1})
  print $PAY106CN_Amount           (0,{col_SH_Amt_col1})
  print $PAY106CN_Date             (0,{col_SH_Date_col2})
  print $PAY106CN_Amount           (0,{col_SH_Amt_col2})
  print $PAY106CN_Date             (0,{col_SH_Date_col3})
  print $PAY106CN_Amount           (0,{col_SH_Amt_col3})

  let #j = 1
  while #j <= 3
    get               $StatHolPayDate       -
                      #Box17B_Amt           -
    from  Box17B(#j)  HolidayPayDt          -
                      Amount

    evaluate #j
    when = 1
      if rtrim($StatHolPayDate, ' ') <> ''
        print $StatHolPayDate      (+1,4)   edit xx-xx-xxxx
        print #Box17B_Amt          (0,20)   edit 999999.99
      end-if
      break
    when = 2
      if rtrim($StatHolPayDate, ' ') <> ''
        print $StatHolPayDate      (0,40)   edit xx-xx-xxxx
        print #Box17B_Amt          (0,57)   edit 999999.99
      end-if
      break
    when = 3
      if rtrim($StatHolPayDate, ' ') <> ''
        print $StatHolPayDate      (0,77)   edit xx-xx-xxxx
        print #Box17B_Amt          (0,94)   edit 999999.99
      end-if
      break
    when-other
      break
    end-evaluate

    let #j = #j +1
  end-while

end-procedure


begin-procedure Print-Box-17C

  print $PAY106CN_Other_Monies    (+1,{col_Other_Monies})
  print $PAY106CN_Code            (+1,{col_OM_Cd_col1})
  print $PAY106CN_Amount          (0,{col_OM_Amt_col1})
  print $PAY106CN_Code            (0,{col_OM_Cd_col2})
  print $PAY106CN_Amount          (0,{col_OM_Amt_col2})
  print $PAY106CN_Code            (0,{col_OM_Cd_col3})
  print $PAY106CN_Amount          (0,{col_OM_Amt_col3})

  let #j = 1
  while #j <= 3
    get               $OtherMoniesCd       -
                      #Box17C_Amt          -
    from  Box17C(#j)  OtherMoniesCd        -
                      Amount

    evaluate #j
      when = 1
        if rtrim($OtherMoniesCd, ' ') <> ''
          print $OtherMoniesCd    (+1,4)
          print #Box17C_Amt       (0,20)   edit 999999.99
        end-if
        break
      when = 2
        if rtrim($OtherMoniesCd, ' ') <> ''
          print $OtherMoniesCd    (0,40)
          print #Box17C_Amt       (0,57)   edit 999999.99
        end-if
        break
      when = 3
        if rtrim($OtherMoniesCd, ' ') <> ''
          print $OtherMoniesCd    (0,77)
          print #Box17C_Amt       (0,94)   edit 999999.99
        end-if
        break
      when-other
        break
      end-evaluate

    let #j = #j +1
  end-while

end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'reset.sqc'     !Reset printer procedure
#Include 'number.sqc'    !Routines to format numbers
#ifdef PRCSSCHD
#Include 'stdapi.sqc'    !Update Process API
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
