!***********************************************************************
!  FGPY006:  IRR Financial Data Accumulation                           *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:03:40:18                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'      !Set environment

#define Year4      '1'   !Changing year to YYYY
#define DDelimiter '-'   !Changing date separator to dashes

Begin-Setup

#include 'setupdb.sqc'

End-Setup

Begin-Report

display 'begin report'
do Init-DateTime
do Init-Number
do Get-Current-DateTime
do Init-Report

do Process-Main
display 'delete run control'
do Delete-Run-Control
display 'commit'
do Commit-Transaction
display 'stdapi'
do Stdapi-Term

End-Report


!***********************************************************************
!                                                                      *
!  Function:     Init-Report                                           *
!                                                                      *
!  Description:  Initializes data for the beginning of the report      *
!                processing.                                           *
!                                                                      *
!***********************************************************************
Begin-Procedure Init-Report

move 'FGPY006'                to $ReportID
move 'IRR Financial Data Accumulation' to $ReportTitle
display $ReportTitle

do Stdapi-Init
let $first_page = 'Y'
let #insert_cnt = 0
let #update_cnt = 0

End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Process-Main                                          *
!                                                                      *
!  Description:  Performs the main processing of the program.          *
!                                                                      *
!***********************************************************************
Begin-Procedure Process-Main

create-array name=ee_data size=50
  field=ee_cd:char=''
  field=ee_plan:char=''
  field=ee_type:char=''
  field=ee_amt_hrs:char=''
  field=ee_amt:number=0
  field=ee_hrs:number=0
  field=ee_pct:number=0

if $prcs_process_instance = ''
  display '********************************'
  display 'Please enter the following data*'
  display '********************************'
  Input $run_company 'Company'
  Input #run_year 'Year'
  !let $deduct_where = ''
  !let $earn_where = ''
  do Select-Deductions
  do Select-Earnings
else
  do Select-Run-Control-Data
end-if

let $ins_line = 'Total records inserted: ' || to_char(#insert_cnt)
let $upd_line = 'Total records updated: '  || to_char(#update_cnt)
print $ins_line (1,1)
print $upd_line (2,1)


End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Run-Control-Data                               *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************

Begin-Procedure Select-Run-Control-Data

Begin-Select

RUN1.OPRID
RUN1.RUN_CNTL_ID
RUN1.COMPANY
RUN1.GVT_PAY_YEAR

  let $run_company = &run1.company
  let #run_year = &run1.gvt_pay_year
  do Select-Run-Control-EmplId
  if $empl_flag = 'N'
    do Select-Deductions
    do Select-Earnings
  end-if

from PS_GVT_FIN_RUNCTL RUN1
where RUN1.OPRID       = $prcs_oprid
and   RUN1.RUN_CNTL_ID = $prcs_run_cntl_id

End-Select


End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Run-Control-EmplId                             *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************

Begin-Procedure Select-Run-Control-EmplId

let $empl_flag = 'N'

Begin-Select

RUN2.OPRID
RUN2.RUN_CNTL_ID
RUN2.EMPLID
RUN2.EMPL_RCD

  let $empl_flag = 'Y'
  let $run_emplid = &run2.emplid
  let #run_empl_rcd = &run2.EMPL_RCD
  #ifdef INFORMIX
    let $deduct_where = 'AND B.EMPLID = ''' || $run_emplid || ''' AND B.EMPL_RCDN = ' || to_char(#run_empl_rcd)
    let $earn_where = 'AND A.EMPLID = ''' || $run_emplid || ''' AND A.EMPL_RCDN = ' || to_char(#run_empl_rcd)
  #else
    let $deduct_where = 'AND B.EMPLID = ''' || $run_emplid || ''' AND B.EMPL_RCD = ' || to_char(#run_empl_rcd)
    let $earn_where = 'AND A.EMPLID = ''' || $run_emplid || ''' AND A.EMPL_RCD = ' || to_char(#run_empl_rcd)
  #endif
  do Select-Deductions
  do Select-Earnings

from PS_GVT_FIN_RUNCTL2 RUN2
where RUN2.OPRID       = $prcs_oprid
and   RUN2.RUN_CNTL_ID = $prcs_run_cntl_id

End-Select


End-Procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Deductions                                     *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Deductions

Begin-Select

B.EMPLID
B.EMPL_RCD
A.GVT_PAY_YEAR
E.GVT_IRR_RET_FORM
C.DEDCD
MAX(E.EMPL_PCT) &empl_pct
SUM(C.DED_CUR) &tot_ded

  let $emplid = &b.emplid
  let #empl_rcd = &b.EMPL_RCD
  if &e.gvt_irr_ret_form = ''
    let $ee_plan = 'N'
  else
    let $ee_plan = &e.gvt_irr_ret_form
  end-if
  let $ee_cd = &c.dedcd
  let $ee_type = 'D'
  let $ee_amt_hrs = 'E'
  let #ee_amt = &tot_ded
  let #ee_pct = &empl_pct
  let #ee_cnt = 0
  put $ee_cd $ee_plan $ee_type $ee_amt_hrs #ee_amt #ee_pct into ee_data(#ee_cnt) ee_cd ee_plan ee_type ee_amt_hrs ee_amt ee_pct
  let $prev_emplid = $emplid
  let #prev_empl_rcd = #empl_rcd
  do Insert-Accumulator

FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B,
     PS_PAY_DEDUCTION C,
     PS_DEDUCTION_TBL D,
     PS_RTRMNT_PLAN_TBL E

WHERE
     A.COMPANY = $run_company
AND  A.GVT_PAY_YEAR = #run_year
AND  B.COMPANY = A.COMPANY
AND  B.PAYGROUP = A.PAYGROUP
AND  B.PAY_END_DT = A.PAY_END_DT
[$deduct_where]
AND  C.COMPANY = B.COMPANY
AND  C.PAYGROUP = B.PAYGROUP
AND  C.PAY_END_DT = B.PAY_END_DT
AND  C.PAGE_NUM = B.PAGE_NUM
AND  C.LINE_NUM = B.LINE_NUM
AND  C.SEPCHK = B.SEPCHK
AND  C.PLAN_TYPE = '70'
AND  C.DED_CLASS <= 'K'
AND  D.PLAN_TYPE = C.PLAN_TYPE
AND  D.DEDCD = C.DEDCD
AND  D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM PS_DEDUCTION_TBL D1
                WHERE D1.PLAN_TYPE=D.PLAN_TYPE
                AND   D1.DEDCD = D.DEDCD
                AND   D1.EFFDT <= C.PAY_END_DT)
AND  (D.GVT_REPORTING_CD = 'CS'
OR    D.GVT_REPORTING_CD = 'CO'
OR    D.GVT_REPORTING_CD = 'FE'
OR    D.GVT_REPORTING_CD = 'FH'
OR    D.GVT_REPORTING_CD = 'FO'
OR    D.GVT_REPORTING_CD = 'FR'
OR    D.GVT_REPORTING_CD = 'FS'
OR    D.GVT_REPORTING_CD = 'PR')
AND  C.PLAN_TYPE = E.PLAN_TYPE
AND  C.BENEFIT_PLAN = E.BENEFIT_PLAN
AND  E.EFFDT = (SELECT MAX(E1.EFFDT)
                FROM PS_RTRMNT_PLAN_TBL E1
                WHERE E1.PLAN_TYPE = C.PLAN_TYPE
                AND   E1.BENEFIT_PLAN = C.BENEFIT_PLAN
                AND   E1.EFFDT <= C.PAY_END_DT)
GROUP BY B.EMPLID, B.EMPL_RCD, A.GVT_PAY_YEAR, E.GVT_IRR_RET_FORM, C.DEDCD

End-Select


End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Earnings                                       *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Earnings

let $prev_emplid = ''
let #prev_empl_rcd = ''
let $first_emp = 'Y'
let #ee_cnt = -1
clear-array name=ee_data

Begin-Select

A.EMPLID
A.EMPL_RCD
A.PAYGROUP
A.PAY_END_DT
A.OFF_CYCLE
A.PAGE_NUM
A.LINE_NUM
A.SEPCHK
B.ADDL_NBR
B.ERNCD_REG_HRS  ! Hourly earning cd, hours, and amts
B.ERNCD_OT_HRS
B.REG_HRS
B.OT_HRS
B.REG_HRLY_EARNS
B.OT_HRLY_EARNS
B.ERNCD_REG_EARNS ! Salaried earning cd, hours, and amount
B.REG_EARNS
B.REG_EARN_HRS
D.GVT_IRR_RET_FORM

   let   $emplid = &a.emplid
   let   #empl_rcd = &a.EMPL_RCD
   let   $ern_paygroup=&a.paygroup
   let   $ern_pay_end_dt=&a.pay_end_dt
   let   $ern_off_cycle=&a.off_cycle
   let   #ern_page=&a.PAGE_NUM
   let   #ern_line=&a.LINE_NUM
   let   #ern_addl=&b.ADDL_NBR
   let   #ern_sepchk=&a.sepchk
   let   $ret_plan = &d.gvt_irr_ret_form
   if &d.gvt_irr_ret_form = ' '
      let $ret_plan = 'N'
   end-if

   if &a.emplid <> $prev_emplid or &a.EMPL_RCD <> #prev_empl_rcd
     if $first_emp = 'N'
       do Insert-Accumulator
       clear-array name=ee_data
       let #ee_cnt = -1
     end-if
     let $first_emp = 'N'
     let $prev_emplid = &a.emplid
     let #prev_empl_rcd = &a.EMPL_RCD
   end-if

   ! Only accumulate earning if EE did not have CSRS or FERS coverage at the time
   if $ret_plan <> 'C' and $ret_plan <> 'F'
     if &b.reg_earns <> 0 or &b.reg_earn_hrs <> 0
       let $erncd = &b.erncd_reg_earns
       let #ern_hrs = &b.reg_earn_hrs
       let #ern_amt = &b.reg_earns
       do Accumulate-Earnings
     end-if
     if &b.reg_hrs <> 0 or &b.reg_hrly_earns <> 0
       let $erncd = &b.erncd_reg_hrs
       let #ern_hrs = &b.reg_hrs
       let #ern_amt = &b.reg_hrly_earns
       do Accumulate-Earnings
     end-if
     if &b.ot_hrs <> 0 or &b.ot_hrly_earns <> 0
       let $erncd = &b.erncd_ot_hrs
       let #ern_hrs = &b.ot_hrs
       let #ern_amt = &b.ot_hrly_earns
       do Accumulate-Earnings
     end-if

   end-if

   do Select-Other-Earnings

FROM PS_PAY_CALENDAR PC,
     PS_PAY_CHECK A,
     PS_PAY_EARNINGS B,
     PS_GVT_JOB C,
     PS_RTRMNT_PLAN_TBL D


WHERE PC.COMPANY = $run_company
AND   PC.GVT_PAY_YEAR = #run_year
AND   PC.COMPANY = A.COMPANY
AND   PC.PAYGROUP = A.PAYGROUP
AND   PC.PAY_END_DT = A.PAY_END_DT
[$earn_where]
AND   A.COMPANY=B.COMPANY
AND   A.PAYGROUP=B.PAYGROUP
AND   A.PAY_END_DT=B.PAY_END_DT
AND   A.OFF_CYCLE=B.OFF_CYCLE
AND   A.PAGE_NUM=B.PAGE_NUM
AND   A.LINE_NUM=B.LINE_NUM
AND   A.SEPCHK=B.SEPCHK
AND   B.OK_TO_PAY='Y'
AND   A.EMPLID = C.EMPLID
AND   A.EMPL_RCD = C.EMPL_RCD
AND   C.EFFDT = (SELECT MAX(C1.EFFDT)
                 FROM PS_GVT_JOB C1
                 WHERE C1.EMPLID = A.EMPLID
                 AND   C1.EMPL_RCD = A.EMPL_RCD
                 AND   C1.EFFDT <= A.PAY_END_DT)
AND   C.EFFSEQ = (SELECT MAX(C2.EFFSEQ)
                  FROM PS_GVT_JOB C2
                  WHERE C2.EMPLID = A.EMPLID
                  AND   C2.EMPL_RCD = A.EMPL_RCD
                  AND   C2.EFFDT = C.EFFDT)
AND   C.GVT_RETIRE_PLAN      = D.BENEFIT_PLAN
and   D.PLAN_TYPE            = '70'
and   D.EFFDT                = (SELECT MAX(D1.EFFDT)
                                FROM PS_RTRMNT_PLAN_TBL D1
                                WHERE D1.BENEFIT_PLAN = C.GVT_RETIRE_PLAN
                                AND D1.PLAN_TYPE = '70'
                                AND D1.EFFDT <= C.EFFDT)

ORDER BY A.EMPLID, A.EMPL_RCD


End-Select

!get last one
if #ee_cnt > -1
  do Insert-Accumulator
end-if

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Select-Other-Earnings                                 *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************
Begin-Procedure Select-Other-Earnings

Begin-Select

OE.ERNCD
OE.OTH_HRS
OE.OTH_EARNS

  let $erncd = &oe.erncd
  let #ern_hrs = &oe.oth_hrs
  let #ern_amt = &oe.oth_earns
  do Accumulate-Earnings

FROM PS_PAY_OTH_EARNS OE

WHERE OE.COMPANY = $run_company
AND   OE.PAYGROUP=$ern_paygroup
AND   OE.PAY_END_DT=$ern_pay_end_dt
AND   OE.OFF_CYCLE=$ern_off_cycle
AND   OE.PAGE_NUM=#ern_page
AND   OE.LINE_NUM=#ern_line
AND   OE.ADDL_NBR=#ern_addl
AND   OE.SEPCHK=#ern_sepchk

End-Select

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Accumulate-Earnings                                    *
!                                                                      *
!  Description:                             *
!                                                                      *
!                                                                      *
!***********************************************************************
Begin-Procedure Accumulate-Earnings

let $basic_pay = 'N'
let $lwop_pay = 'N'

Begin-Select

ERN.GVT_IRR_REPORTABLE
ERN.GVT_IRR_LWOP

   let $basic_pay = &ern.gvt_irr_reportable
   let $lwop_pay = &ern.gvt_irr_lwop

FROM PS_EARNINGS_TBL ERN
WHERE ERN.ERNCD = $erncd
AND   ERN.EFFDT = (SELECT MAX(ERN1.EFFDT)
                  FROM PS_EARNINGS_TBL ERN1
                  WHERE ERN1.ERNCD = ERN.ERNCD
                  AND   ERN1.EFFDT <= $ern_pay_end_dt)

End-Select

let $found_ern = 'N'
let #i = 0
While #i <= #ee_cnt

  get $ee_cd $ee_plan from ee_data(#i)
  if $ee_cd = $erncd and $ee_plan = $ret_plan
    let $found_ern = 'Y'
    let #j = #i
    break
  end-if
  let #i = #i + 1
end-While

! Accumulate Basic Pay only if EE did not have CSRS or FERS coverage at the time
if $basic_pay = 'Y' and #ern_amt <> 0 and $ret_plan <> 'C' and $ret_plan <> 'F'
  if $found_ern = 'Y'
    array-add #ern_amt to ee_data(#j) ee_amt
  else
    let $ee_plan = $ret_plan
    let $ee_type = 'B'
    let $ee_amt_hrs = 'E'
    let #ee_cnt = #ee_cnt + 1
    put $erncd $ee_plan $ee_type $ee_amt_hrs #ern_amt into ee_data(#ee_cnt) ee_cd ee_plan ee_type ee_amt_hrs ee_amt
  end-if
end-if

! Accumulate Leave Without Pay
if $lwop_pay = 'Y' and #ern_hrs <> 0
  if $found_ern = 'Y'
    array-add #ern_hrs to ee_data(#j) ee_amt
  else
    let $ee_plan = $ret_plan
    let $ee_type = 'L'
    let $ee_amt_hrs = 'H'
    let #ee_cnt = #ee_cnt + 1
    put $erncd $ee_plan $ee_type $ee_amt_hrs #ern_hrs into ee_data(#ee_cnt) ee_cd ee_plan ee_type ee_amt_hrs ee_hrs
  end-if

end-if

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Insert-Accumulator                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!                                                                      *
!***********************************************************************
Begin-Procedure Insert-Accumulator

let #i = 0
While #i <= #ee_cnt
get $ee_cd $ee_plan $ee_type $ee_amt_hrs #ee_amt #ee_hrs #ee_pct from ee_data(#i) ee_cd ee_plan ee_type ee_amt_hrs ee_amt ee_hrs ee_pct

Begin-Select

COUNT(*) &fin_cnt

FROM PS_GVT_IRR_FIN_DTA F
WHERE F.EMPLID = $prev_emplid
AND   F.EMPL_RCD = #prev_empl_rcd
AND   F.GVT_YEAR = #run_year
AND   F.GVT_IRR_RET_FORM = $ee_plan
AND   F.GVT_IRR_FIN_CODE = $ee_cd

End-Select

if &fin_cnt = 0

Begin-SQL ON-ERROR = SQL-Error

INSERT INTO PS_GVT_IRR_FIN_DTA
  (EMPLID,
   EMPL_RCD,
   GVT_YEAR,
   GVT_IRR_RET_FORM,
   GVT_IRR_FIN_CODE,
   GVT_IRR_FIN_CD_TP,
   AMT_OR_HOURS,
   AMOUNT,
   HOURS_PER_YEAR,
   EMPL_PCT,
   GVT_AMOUNT_CHG,
   GVT_HRS_PER_YR_CHG,
   GVT_EMPL_PCT_CHG,
   REASON)
VALUES
  ($prev_emplid,
   #prev_empl_rcd,
   #run_year,
   $ee_plan,
   $ee_cd,
   $ee_type,
   $ee_amt_hrs,
   #ee_amt,
   #ee_hrs,
   #ee_pct,
   0.0,
   0.0,
   0.0,
   ' ')


End-SQL

let #insert_cnt = #insert_cnt + 1

else

Begin-SQL ON-ERROR = SQL-Error

UPDATE PS_GVT_IRR_FIN_DTA
SET GVT_IRR_FIN_CD_TP = $ee_type,
    AMT_OR_HOURS = $ee_amt_hrs,
    AMOUNT = #ee_amt,
    HOURS_PER_YEAR = #ee_hrs,
    EMPL_PCT = #ee_pct
WHERE EMPLID = $prev_emplid
AND   EMPL_RCD = #prev_empl_rcd
AND   GVT_YEAR = #run_year
AND   GVT_IRR_RET_FORM = $ee_plan
AND   GVT_IRR_FIN_CODE = $ee_cd

End-SQL
let #update_cnt = #update_cnt + 1

end-if
let #i = #i + 1

End-While

End-Procedure

!***********************************************************************
!                                                                      *
!  Function:     Delete-Run-Control                                    *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!                                                                      *
!***********************************************************************
begin-procedure delete-run-control

begin-sql  ON-ERROR = SQL-Error

DELETE
from PS_GVT_FIN_RUNCTL
where OPRID       = $prcs_oprid
and   RUN_CNTL_ID = $prcs_run_cntl_id

end-sql

begin-sql  ON-ERROR = SQL-Error

DELETE
from PS_GVT_FIN_RUNCTL2
where OPRID       = $prcs_oprid
and   RUN_CNTL_ID = $prcs_run_cntl_id

end-sql

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Routines for Platform portable commit



