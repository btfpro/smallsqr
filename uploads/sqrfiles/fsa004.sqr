!**********************************************************
!  FSA004:  Flexible Spending Account Check Register      *
!           Check Register program for checks created     *
!           by FSA003                                     *
!**********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/11:17:56:30                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set Database Environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define MAX_LINES    55
#define TOTALS_COL   74
#define MAX_TOTALS    5

!*************************************************
begin-heading 7
!*************************************************

  #Include 'stdhdg01.sqc'

  print $SubTitle             ( 0, 1)

  print 'Benefit'             (+2, 1, 7)
  print 'Benefit'             ( 0,+2, 7)
  print 'Benefit'             ( 0,+17,7)

  print 'Year'                (+1, 1, 7)
  print 'Program'             ( 0,+2, 7)
  print 'Plan Type'           ( 0,+2,13)
  print 'Plan'                ( 0,+2, 7)
  print 'Check No.'           ( 0,+2,17)
  print 'Check Date'          ( 0,+2,10)
  print '      Check Amount'  ( 0,+2,18)
  print 'Employee Name'       ( 0,+2,30)
  print 'Employee ID'         ( 0,+2,11)

end-heading


!*************************************************
begin-program
!*************************************************

  do Init-Report

  if ($FormID <> '')
    do Array-Initialization
    do Construct-Where-Clauses
    do Process-Main
    do StdAPI-Term
  end-if

end-program


!*************************************************
begin-procedure Init-Report
!*************************************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  move 'FSA004' to $ReportID
  move 'FSA Check Register' to $ReportTitle
  display $ReportTitle

  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

end-procedure


!*************************************************
begin-procedure Ask-Values
!*************************************************

  do Ask-FormID
  if ($FormID <> '')
    do Ask-Calendar-Year
    do Ask-Benefit-Program
    do Ask-Check-Date
  end-if

end-procedure


!*************************************************
begin-procedure Get-Values
!*************************************************

  do Select-Parameters
  do Get-FormID
  do Get-Calendar-Year
  do Get-Benefit-Program
  do Get-Check-Date

end-procedure


!*************************************************
begin-procedure Ask-FormID
!*************************************************

  while (1 = 1)

    if ($FormID = '')
      input $FormID MaxLen=6 'Enter Form Identifier'
    else
      input $FormID MaxLen=6 '(Invalid Entry) Please Re-enter Form Identifier'
    end-if
    let $FormID = UPPER(RTRIM($FormID, ' '))

    if $FormID = ''
      break
    end-if

    do Edit-FormID

    if Rtrim(&Z.Form_ID, ' ') = $FormID
      break
    end-if

  end-while

end-procedure


!*************************************************
begin-procedure Edit-FormID
!*************************************************

begin-SELECT
Z.FORM_ID
FROM  PS_PAY_FORM_TBL Z
WHERE FORM_ID = $FormID
end-SELECT
end-procedure


!***********************************
begin-procedure Ask-Calendar-Year
!***********************************

  input $Calendar_Year MaxLen=4
     'Enter Balance Year (Leave blank for ALL open Years)'

  let #Calendar_Year = $Calendar_Year

end-procedure


!***********************************
begin-procedure Ask-Benefit-Program
!***********************************

  input $Benefit_Program MaxLen=3
     'Enter Benefit Program (Leave blank for ALL Programs)'

  let $Benefit_Program = UPPER(RTRIM($Benefit_Program, ' '))

end-procedure


!**********************************
begin-procedure Ask-Check-Date
!**********************************

  move 'N' to $DataOK

  while ($DataOK <> 'Y')

    input $CheckDate
      'Enter ''On or After'' Check Date ({Prompt-Date}) (Leave blank for ALL Checks)'
    if Rtrim($CheckDate, ' ') = ''
      Break
    end-if

    move {PDelimiter} to $DDelimiter
    do Format-DateTime($CheckDate,$CheckDate,{Prompt-Mask},'','Native')
    do Validate-Native-Date($CheckDate,$DataOK)

  end-while

end-procedure


!*************************************************
begin-procedure Array-Initialization
!*************************************************

  create-array name=Totals              -
               size=6                   -
               field=TotalName:char     -
               field=total:number:12

  put 'Grand Total:'            into Totals(1) TotalName
  put 'Year Total:'             into Totals(2) TotalName
  put 'Benefit Program Total:'  into Totals(3) TotalName
  put 'Plan Type Total:'        into Totals(4) TotalName
  put 'Benefit Plan Total:'     into Totals(5) TotalName

end-procedure


!*************************************************
begin-procedure Construct-Where-Clauses
!*************************************************

  let $SubTitle = 'For: Form-ID ' || $FormID

  if (#Calendar_Year = 0)
    let $Calendar_Where = ''
  else
    let $Calendar_Year = edit(#Calendar_Year, '9999')
    let $Calendar_Where = 'AND B.CALENDAR_YEAR = ' || $Calendar_Year
    let $SubTitle = $SubTitle || ', and Calendar Year ' || $Calendar_Year
  end-if

  if ($Benefit_Program = '%') Or ($Benefit_Program = '')
    let $Program_Where = ''
  else
    let $Program_Where = 'AND G.BENEFIT_PROGRAM = ''' || $Benefit_Program || ''''
    let $SubTitle = $SubTitle || ', and Benefit Program ' || $Benefit_Program
  end-if

  if ($CheckDate = '')
    let $CheckDt_Where = ''
  else
    let $CheckDt_Where = 'AND G.CHECK_DT >= ''' || $CheckDate || ''''
    do Format-DateTime($CheckDate, $Check_Dt, {DEFDATE}, '', '')
    let $SubTitle = $SubTitle || ', and Checks on-or-after ' || $Check_Dt
  end-if

end-procedure


!*************************************************
begin-procedure Process-Main
!*************************************************

let $Page_Break = 'Y'

begin-SELECT
G.CALENDAR_YEAR   () on-break print=never  level=1 procedure=Year-Change
G.BENEFIT_PROGRAM () on-break print=never  level=2 procedure=Program-Change
G.PLAN_TYPE       () on-break print=never  level=3 procedure=Plan-Change
G.BENEFIT_PLAN    () on-break print=never  level=4 procedure=Benefit-Change
G.PAYCHECK_NBR
G.CHECK_DT
G.FSA_CHECK_AMT
G.EMPLID
G.FSA_PAYMENT_STATUS
L.NAME

  if &G.Plan_Type <> $Plan_Type
    move &G.Plan_Type to $Plan_Type
    move &G.Plan_Type to $FieldValue
    move 'PLAN_TYPE'  to $FieldName
    do Read-Translate-Table
    move  $XlatShortName to $Plan_Name
  end-if

  if (&G.FSA_Payment_Status = 'P')
    ARRAY-ADD &G.FSA_Check_Amt to Totals({MAX_TOTALS}) Total(0)
  end-if

  do Print-Check-Register

FROM  PS_FSA_RUNCTL    B,
      PS_FSA_PAYMENT   G,
      PS_PERSON_NAME   L
WHERE B.FORM_ID            = $FormID
  AND B.FSA_RUN_STATUS     = 'F'
  [$Calendar_Where]
  AND G.FORM_ID            = B.FORM_ID
  AND G.CALENDAR_YEAR      = B.CALENDAR_YEAR
  AND G.FSA_PAYMENT_STATUS IN ('P','V','X')       !Paid, Void, Reversed
  [$Program_Where]
  AND G.BENEFIT_PROGRAM IN
     (SELECT P.BENEFIT_PROGRAM
      FROM   PS_BEN_DEFN_PGM P
      WHERE  P.FSA_RUN_ID = B.FSA_RUN_ID)
  [$CheckDt_Where]
  AND L.EMPLID             = G.EMPLID
ORDER BY G.CALENDAR_YEAR,
         G.BENEFIT_PROGRAM,
         G.PLAN_TYPE,
         G.BENEFIT_PLAN,
         G.PAYCHECK_NBR
end-SELECT

  move 1 to #changeLevel
  do Print-Totals

end-procedure


!*************************************************
begin-procedure Print-Check-Register
!*************************************************

  if ($Page_Break = 'Y')
    print &G.Calendar_Year      (+1, 1, 7)
    print &G.Benefit_Program    ( 0,+2, 7)
    print &G.Plan_Type          ( 0,+2, 2)
    print $Plan_Name            ( 0,+1,10)
    print &G.Benefit_Plan       ( 0,+2, 7)
    let $Page_Break = 'N'
  else
    print ''                    (+1, 1,40)
  end-if

  do Format-Number(&G.PAYCHECK_NBR, $PAYCHECK_NBR, '099999999999999')
  print $PAYCHECK_NBR                 ( 0,+2, 17)

  do Format-DateTime(&G.Check_Dt, $Check_Dt, {DEFDATE}, '', '')
  print $Check_Dt               ( 0,+2,10)

  evaluate &G.FSA_Payment_Status
  when = 'P'
    do Format-Number(&G.FSA_Check_Amt, $NetPay, '$$$,$$$,$$$,$$9.99')
  when = 'V'
    let $NetPay = '****** VOID ******'
  when = 'X'
    let $NetPay = '**** REVERSED ****'
  end-evaluate
  print $NetPay                 ( 0,+2,18)

  if (&G.FSA_Payment_Status = 'P')
    let $Name = RTrim(&L.Name,' ')
    print $Name                   ( 0,+2,30)
    print &G.EmplID               ( 0,+2,11)
  end-if

end-procedure


!*************************************************
begin-procedure Year-Change
!*************************************************

  move 2 to #changeLevel
  do Print-Totals

end-procedure


!*************************************************
begin-procedure Program-Change
!*************************************************

  move 3 to #changeLevel
  do Print-Totals

end-procedure


!*************************************************
begin-procedure Plan-Change
!*************************************************

  move 4 to #changeLevel
  do Print-Totals

end-procedure


!*************************************************
begin-procedure Benefit-Change
!*************************************************

  move 5 to #changeLevel
  do Print-Totals

end-procedure


!*************************************************
begin-procedure Print-Totals
!*************************************************

  move {MAX_TOTALS} to #totalRow

  !Don't split a total series across pages
  if (#current-line > ({MAX_LINES} - {MAX_TOTALS}))
    new-page
  end-if

  print '=======================' (+2,1)
  print '=================='      ( 0,{TOTALS_COL})

  while #totalRow >= #changeLevel

    let #rollRow = #totalRow - 1
    get $TotalName from Totals(#totalRow) TotalName
    get #total     from Totals(#totalRow) Total(0)
    do Format-Number(#total, $out, '$$$,$$$,$$$,$$9.99')

    print $TotalName     (+1,1)
    print $out           ( 0,{TOTALS_COL})

    array-add #total to Totals(#rollRow) Total(0)
    put 0 into Totals(#totalRow) Total(0)
    subtract 1 from #totalRow

  end-while

  if (#changeLevel = 1)
    do Reset
  end-if

  new-page
  let $Page_Break = 'Y'

end-procedure

!*************************************************

#Include 'readxlat.sqc'
#Include 'curdttim.sqc'
#Include 'reset1.sqc'
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'validdt.sqc'   !Routines for validating dates
#Include 'number.sqc'    !Routines to format numbers

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

!**************************** End of Program ***************************

