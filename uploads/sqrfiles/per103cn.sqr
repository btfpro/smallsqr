!***********************************************************************
!  PER103CN: Designated Groups by Occupational Group
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:02:48                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
begin-setup
  #Include 'ptset01.sqc'   !Printer and page-size initialization
end-setup


#define MaxGroups  14
#define MaxAreas   5
#define ActiveEmp  ('A')
#define ArraySize  100

!***********************************************************************
! BEGIN-REPORT
!***********************************************************************
begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report
   do Report
   do Reset
   do Stdapi-Term
end-report


!***********************************************************************
! BEGIN-HEADING
!***********************************************************************
begin-heading 7
  #Include 'stdhdg08.sqc'
  print '                                                Aborignal      Visible'  (+2,1)
  print '      Disabled                 '                                         ()
  print '                                 ----Total---  --Persons---  -Minoriti'  (+1,1)
  print 'es-  --Persons---  ---Female---'                                         ()
  print 'Occupational Group               Start    End  Start    End  Start    '  (+1,1)
  print 'End  Start    End  Start    End'                                         ()
end-heading

!***********************************************************************
! BEGIN-PROCEDURE Init-Report
!***********************************************************************
begin-procedure Init-Report

   move 'PER103CN' to $ReportID
   move 'Designated Groups by Occupational Group' to $ReportTitle
   display $ReportTitle

   do Stdapi-Init

   if $prcs_process_instance = ''
      do Ask-From-Thru-Date
      do Ask-AreaCd($AreaList,#AreaCnt)
   else
      do Select-Parameters
   end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Values
!***********************************************************************
begin-procedure Get-Values

   do Get-From-Thru-Date
   do Get-Can-OEE-Parameters
   let #AreaCnt = 1

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Report
!***********************************************************************
begin-procedure Report
   create-array name=Values size={ArraySize} field=area:char
                                             field=Group:char
                                             field=total:number:4
                                             field=Aboriginal:number:4
                                             field=Minority:number:4
                                             field=Disabled:number:4
                                             field=Female:number:4

   create-array name=Salary-Grades size={ArraySize} field=MaxSalary:number
                                                    field=MinSalary:number
   do Get-Salary-Grades($AreaList,$FromDate)
   let #Rows = -1
   do Calculate-Totals($AreaList,$FromDate,#Rows)
   let #FirstSet = #Rows

      do Get-Salary-Grades($AreaList,$ThruDate)
      do Calculate-Totals($AreaList,$ThruDate,#Rows)

   do Print-Report(#FirstSet,#Rows)

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calculate-Totals
!***********************************************************************
begin-procedure Calculate-Totals($AreaList,$Date,:#Row)

   let #GradeRow = -1
begin-SELECT
E.CAN_OEE_AREACD
D.CAN_NOC_OCC_GROUP
A.ABORIGINAL
A.MINORITY
A.DISABLED
A.FEMALE
B.ANNUAL_RT &Annual

   if $Area <> &E.Can_OEE_AreaCd OR $Group <> &D.Can_NOC_Occ_Group
      add 1 to #Row
      add 1 to #GradeRow
      PUT &E.Can_OEE_AreaCd &D.Can_NOC_Occ_Group INTO Values(#Row)
      let $Area = &E.Can_OEE_AreaCd
      let $Group = &D.Can_NOC_Occ_Group
      GET #MaxSalary #MinSalary from SALARY-GRADES(#GRADEROW)
      let #Divn = (#MaxSalary - #MinSalary) / 4
      let #GroupA = #MinSalary + #Divn
      let #GroupB = #GroupA    + #Divn
      let #GroupC = #GroupB    + #Divn
      let #GroupD = #GroupC    + #Divn
   end-if

   if &Annual <= #GroupA
      let #OutRow = 0
   else
      if &Annual <= #GroupB
         let #OutRow = 1
      else
         if &Annual <= #GroupC
            let #OutRow = 2
         else
            let #OutRow = 3
         end-if
      end-if
   end-if
   ARRAY-ADD 1 to Values(#Row) TOTAL(#OUTROW)
   do Designated-Groups(#OutRow,&A.Aboriginal,&A.Minority,&A.Disabled,&A.Female,#Row)

FROM PS_CAN_OEE_SURVEY A,
     PS_JOB B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E

WHERE A.RECEIVEDT = (SELECT MAX(A1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY A1
   WHERE A1.EMPLID = A.EMPLID and A1.RECEIVEDT <= $Date)
   AND A.COMPLETED = 'Y'
   AND B.EMPLID = A.EMPLID
   AND B.HR_STATUS IN {ACTIVEEMP}
   AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM PS_JOB B1
       WHERE B1.EMPLID = B.EMPLID
         AND B1.EMPL_RCD = B.EMPL_RCD
         AND B1.EFFDT <= $Date)
   AND B.EFFSEQ = (SELECT MAX(B2.EFFSEQ) FROM PS_JOB B2
        WHERE B2.EMPLID = B.EMPLID
          AND B2.EFFDT = B.EFFDT)
   AND C.JOBCODE = B.JOBCODE
   AND C.SETID = B.SETID_JOBCODE
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
        WHERE C1.EFFDT <= $Date and C1.JOBCODE = C.JOBCODE
                                  and C1.SETID = C.SETID)
   AND D.CAN_NOC_CD = C.CAN_NOC_CD
   AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
        WHERE D1.EFFDT <= $Date and D1.CAN_NOC_CD = D.CAN_NOC_CD)
   AND E.LOCATION = B.LOCATION
   AND E.SETID = B.SETID_LOCATION
   AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
        WHERE E1.EFFDT <= $Date and E1.LOCATION = E.LOCATION
         AND E1.SETID = E.SETID)
   AND E.CAN_OEE_AREACD IN [$AreaList]

ORDER BY E.CAN_OEE_AREACD, D.CAN_NOC_OCC_GROUP

end-SELECT

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Designated-Groups
!***********************************************************************
begin-procedure Designated-Groups(#SalGrp,$Aboriginal,$Minority,$Disabled,
                                  $Female,#Row)

   if $Aboriginal = 'Y'
      array-add 1 to Values(#Row) Aboriginal(#SalGrp)
   end-if
   if $Minority = 'Y'
      array-add 1 to Values(#Row) Minority(#SalGrp)
   end-if
   if $Disabled = 'Y'
      array-add 1 to Values(#Row) Disabled(#SalGrp)
   end-if
   if $Female = 'Y'
      array-add 1 to Values(#Row) Female(#SalGrp)
   end-if

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Get-Salary-Grades
!***********************************************************************
begin-procedure Get-Salary-Grades($AreaList,$Date)

   let #Row = -1

begin-SELECT

E.CAN_OEE_AREACD
D.CAN_NOC_OCC_GROUP
MAX(B.ANNUAL_RT)    &MaxSalary
MIN(B.ANNUAL_RT)    &MinSalary

     add 1 to #Row
     PUT &MaxSalary &MinSalary INTO SALARY-GRADES(#ROW)

FROM PS_CAN_OEE_SURVEY A,
     PS_JOB B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E

WHERE RECEIVEDT = (SELECT MAX(A1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY A1
   WHERE A1.EMPLID = A.EMPLID and A1.RECEIVEDT <= $Date)
   AND A.COMPLETED = 'Y'
   AND B.EMPLID = A.EMPLID
   AND B.HR_STATUS IN {ACTIVEEMP}
   AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM PS_JOB B1
       WHERE B1.EMPLID = B.EMPLID
         AND B1.EMPL_RCD = B.EMPL_RCD
         AND B1.EFFDT <= $Date)
   AND B.EFFSEQ = (SELECT MAX(B2.EFFSEQ) FROM PS_JOB B2
        WHERE B2.EMPLID = B.EMPLID
          AND B2.EFFDT = B.EFFDT)
   AND C.JOBCODE = B.JOBCODE
   AND C.SETID = B.SETID_JOBCODE
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
        WHERE C1.EFFDT <= $Date and C1.JOBCODE = C.JOBCODE
                                  AND C1.SETID = C.SETID)
   AND C.CAN_NOC_CD = D.CAN_NOC_CD
   AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
        WHERE D1.EFFDT <= $Date and D1.CAN_NOC_CD = D.CAN_NOC_CD)
   AND E.LOCATION = B.LOCATION
   AND E.SETID = B.SETID_LOCATION
   AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
        WHERE E1.EFFDT <= $Date and E1.LOCATION = E.LOCATION
                                  AND E1.SETID = E.SETID)
   AND E.CAN_OEE_AREACD IN [$AreaList]

GROUP BY E.CAN_OEE_AREACD, D.CAN_NOC_OCC_GROUP
ORDER BY E.CAN_OEE_AREACD, D.CAN_NOC_OCC_GROUP
end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Print-Report
!***********************************************************************
begin-procedure Print-Report(#FirstSet,#SecndSet)

   let #Cnt2 = #FirstSet + 1
   while #Cnt1 <= #FirstSet OR #Cnt2 <= #SecndSet
      get $StArea $StGroup from Values(#Cnt1)
      get $EnArea $EnGroup from Values(#Cnt2)
      let $StChk = $StArea||$StGroup
      let $EnChk = $EnArea||$EnGroup
      if $StChk < $EnChk or isnull($EnChk)
         if $StArea <> $ChkArea
            let $_FieldName = 'CAN_OEE_AREACD'
            let $_FieldValue = $StArea
            do Read-Translate-Table
            print $_XlatLongName     (+2,1,30)
            let $ChkArea = $StArea
         end-if
         let $_FieldName = 'CAN_NOC_OCC_GROUP'
         let $_FieldValue = $StGroup
         do Read-Translate-Table
         print $StGroup              (+2,1,2)
         print $_XlatLongName        ( 0,4,30)
         let #SalCnt = 0
         while #SalCnt < 4
            get #Total #Aboriginal #Minority #Disabled #Female from Values(#Cnt1) -
                Total(#SalCnt) Aboriginal(#SalCnt) Minority(#SalCnt) -
                Disabled(#SalCnt) Female(#SalCnt)
            let $out = 'Salary Group ' || edit(to_Char(#SalCnt+1),'99')
            print $out                (+1,1,32)
            print #Total              (0,34,6) edit 99999
            print 0                   (0,41,6) edit 99999
            print #Aboriginal         (0,48,6) edit 99999
            print 0                   (0,55,6) edit 99999
            print #Minority           (0,62,6) edit 99999
            print 0                   (0,69,6) edit 99999
            print #Disability         (0,76,6) edit 99999
            print 0                   (0,83,6) edit 99999
            print #Female             (0,90,6) edit 99999
            print 0                   (0,97) edit 99999
            add 1 to #SalCnt
         end-while
         add 1 to #Cnt1
      else
         if $EnChk < $StChk or isnull($StChk)
            if $EnArea <> $ChkArea
               let $_FieldName = 'CAN_OEE_AREACD'
               let $_FieldValue = $EnArea
               do Read-Translate-Table
               print $_XlatLongName       (+2,1,30)
               let $ChkArea = $StArea
            end-if
            let $_FieldName = 'CAN_NOC_OCC_GROUP'
            let $_FieldValue = $EnGroup
            do Read-Translate-Table
            print $EnGroup                (+2,1,2)
            print $_XlatLongName          ( 0,4,30)
            let #SalCnt = 0
            while #SalCnt < 4
               get #Total #Aboriginal #Minority #Disabled #Female from Values(#Cnt2) -
                   Total(#SalCnt) Aboriginal(#SalCnt) Minority(#SalCnt) -
                   Disabled(#SalCnt) Female(#SalCnt)
               let $out = 'Salary Group ' || edit(to_Char(#SalCnt+1),'99')
               print $out                (+1,1,32)
               print 0                   (0,34,6) edit 99999
               print #Total              (0,41,6) edit 99999
               print 0                   (0,48,6) edit 99999
               print #Aboriginal         (0,55,6) edit 99999
               print 0                   (0,62,6) edit 99999
               print #Minority           (0,69,6) edit 99999
               print 0                   (0,76,6) edit 99999
               print #Disability         (0,83,6) edit 99999
               print 0                   (0,90,6) edit 99999
               print #Female             (0,97) edit 99999
               add 1 to #SalCnt
            end-while
            add 1 to #Cnt2
         else
            if $EnArea <> $ChkArea
               let $_FieldName = 'CAN_OEE_AREACD'
               let $_FieldValue = $EnArea
               do Read-Translate-Table
               print $_XlatLongName        (+2,1,30)
               let $ChkArea = $StArea
            end-if
            let $_FieldName = 'CAN_NOC_OCC_GROUP'
            let $_FieldValue = $EnGroup
            do Read-Translate-Table
            print $EnGroup                (+2,1,2)
            print $_XlatLongName          ( 0,4,30)
            let #SalCnt = 0
            while #SalCnt < 4
               get #Ttl1 #Abor1 #Min1 #Dis1 #Fem1 from Values(#Cnt1) -
                   Total(#SalCnt) Aboriginal(#SalCnt) Minority(#SalCnt) -
                   Disabled(#SalCnt) Female(#SalCnt)
               get #Ttl2 #Abor2 #Min2 #Dis2 #Fem2 from Values(#Cnt2) -
                   Total(#SalCnt) Aboriginal(#SalCnt) Minority(#SalCnt) -
                   Disabled(#SalCnt) Female(#SalCnt)
               let $out = 'Salary Group ' || edit(to_Char(#SalCnt+1),'99')
               print $out                (+1,1,32)
               print #Ttl1               (0,34,6) edit 99999
               print #Ttl2               (0,41,6) edit 99999
               print #Abor1              (0,48,6) edit 99999
               print #Abor2              (0,55,6) edit 99999
               print #Min1               (0,62,6) edit 99999
               print #Min2               (0,69,6) edit 99999
               print #Dis1               (0,76,6) edit 99999
               print #Dis2               (0,83,6) edit 99999
               print #Fem1               (0,90,6) edit 99999
               print #Fem2               (0,97) edit 99999
               add 1 to #SalCnt
            end-while
            add 1 to #Cnt1
            add 1 to #Cnt2
         end-if
      end-if
   end-while

end-procedure


#Include 'hrrnctl1.sqc'  !Get run control parameter values
#Include 'hrgetval.sqc'  !Get values mask routines

#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'askftd.sqc'    !Get-From-Thru Date procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'askarea.sqc'   !Get area code procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
