! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  timemath.sqc                                                        *
!  SQR time arithmetic procedures                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
!  Important formatting information:                                   *
!  The following "data types" are passed into the procedures in this   *
!  SQC.  All are represented via SQR string variables, but have the    *
!  following expected forms:                                           *
!    time value: the time values input to the procedures in this SQC   *
!       can be in either the native datetime format for the RDBMS or   *
!       in the time portion of that native datetime format.  Leading   *
!       blanks and underscores in this value will be tolerated and     *
!       ignored on input.  Also, date portions of the datetime value,  *
!       if provided, will be ignored.                                  *
!         Output time values will be returned in a format that matches *
!       the time portion of the native datetime format for the RDBMS,  *
!       with no leading or trailing characters.  The exception is that *
!       if the format includes AM or PM, a space will be used to       *
!       separate the time portion from the AM/PM indicator.            *
!         In the procedures used within this SQC, the time value format*
!       will be based on a 24-hour clock, and look like hh:mm:ss       *
!    duration:  duration values that are input to the procedures in    *
!       this SQC represent some number of hours, minutes, and seconds. *
!       On input, these do not need to be "proper" durations, in that  *
!       any value may be given for each component of the duration.     *
!       For example, two hours can be passed in as two hours, or as    *
!       120 minutes.                                                   *
!         On output, durations will be "properly" formatted, in that   *
!       the minute and second portions will never exceed 59.           *
!         Durations have the format hh:mm:ss on both input and output  *
!       and can be positive (implied) or negative (with a leading minus*
!       sign)                                                          *
!***********************************************************************


!***********************************************************************
!  Procedure: Build_Duration                                           *
!  Given a number of hours, minutes, and seconds, this procedure will  *
!  build a "proper" duration string from that.                         *
!  The signs of each component of the duration should match.  In other *
!  words, the hours, minutes, and seconds should all be positive       *
!  numbers or they should all be negative numbers.  The sign associated*
!  with the first non-zero component of the duration will be the sign  *
!  used for the duration.                                              *
!***********************************************************************
begin-procedure Build_Duration (#in_hours, #in_minutes, #in_seconds, :$out_duration)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Build_Duration'
  display ' Input #in_hours: ' noline
  display #in_hours
  display ' Input #in_minutes: ' noline
  display #in_minutes
  display ' Input #in_seconds: ' noline
  display #in_seconds
  #ifdef debugz
    if not(((#in_hours >= 0) and (#in_minutes >= 0) and (#in_seconds >= 0)) or
           ((#in_hours <= 0) and (#in_minutes <= 0) and (#in_seconds <= 0)))
      display '  Signs not consistent for hours, minutes, and seconds'
    end-if
  #end-if
#end-if

  let #seconds = abs(#in_seconds % 60)
  let #minutes = abs(#in_minutes + trunc((#in_seconds / 60), 0))
  let #hours   = abs(#in_hours + trunc((#minutes / 60), 0))
  let #minutes = #minutes % 60

  move #hours   to $hours   8888888889
  move #minutes to $minutes 8888888889
  move #seconds to $seconds 8888888889

  if length($hours) = 1
    let $hours = '0' || $hours
  end-if
  if length($minutes) = 1
    let $minutes = '0' || $minutes
  end-if
  if length($seconds) = 1
    let $seconds = '0' || $seconds
  end-if

  let $out_duration = $hours || ':' || $minutes || ':' || $seconds

  if ((#in_hours < 0) or
      ((#in_hours = 0) and (#in_minutes < 0)) or
      ((#in_hours = 0) and (#in_minutes = 0) and (#in_seconds < 0)))
    let $out_duration = '-' || $out_duration
  end-if

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Build_Duration'
  display ' Output $out_duration: ' noline
  display $out_duration
#end-if
end-procedure


!***********************************************************************
!  Procedure: Parse_Duration                                           *
!  Given a duration, return a number of hours, minutes, and seconds    *
!***********************************************************************
begin-procedure Parse_Duration ($in_duration, :#out_hours, :#out_minutes, :#out_seconds)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Parse_Duration'
  display ' Input $in_duration: ' noline
  display $in_duration
#end-if

  let $workduration = ltrim($in_duration,' ')
  if substr($workduration, 1, 1) = '-'
    let #mult = -1
    let #substrlen = length($workduration) - 1
    let $workduration = substr($workduration, 2, #substrlen)
  else
    let #mult = 1
  end-if

  unstring $workduration by ':' into $hours $minutes $seconds

  move $hours to #hours
  move $minutes to #minutes
  move $seconds to #seconds

  let #out_hours   = #mult * #hours
  let #out_minutes = #mult * #minutes
  let #out_seconds = #mult * #seconds

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Build_Duration'
  display ' Output #out_hours: ' noline
  display #out_hours
  display ' Output #out_minutes: ' noline
  display #out_minutes
  display ' Output #out_seconds: ' noline
  display #out_seconds
#end-if
end-procedure


!***********************************************************************
!  Procedure: Add_Time_Duration                                        *
!  Adds a duration to a time value, returning a time value and a       *
!  of "days" to carry as a result of the addition.                     *
!  For example, adding 2 hours to 11:00 PM will result in a returned   *
!  time value of 1:00 AM with a one day carry value.  Note that the    *
!  carry value may be negative, in the case of adding -2 hours to      *
!  1:00 AM.                                                            *
!  Accepts Native DateTime or Native Time only - returns native Time   *
!***********************************************************************
begin-procedure Add_Time_Duration ($in_time, $in_duration, :$out_time, :#carry_days)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Add_Time_Duration'
  display ' Input $in_time: ' noline
  display $in_time
  display ' Input $in_duration: ' noline
  display $in_duration
#end-if

  do Convert_Time_24hr ($in_time, $work_time)
  do Parse_Duration ($work_time, #timehr, #timemin, #timesec)
  do Parse_Duration ($in_duration, #durahr, #duramin, #durasec)

  let #result_sec = ((#timehr + #durahr) * 3600) +
                    ((#timemin + #duramin) * 60) +
                     (#timesec + #durasec)

  let #carry_days = 0
  if #result_sec < 0     ! with negative seconds, have to borrow days
    let #carry_adj = -1
    let #result_adj = -1 * (3600 * 24)
  else                   ! with positive seconds, have to carry days
    let #carry_adj = 1
    let #result_adj = 3600 * 24
  end-if

  while 1                ! loop until we get a valid time range
    if #carry_adj > 0
      if #result_sec < (3600 * 24)
        break
      end-if
    else
      if #result_sec > 0
        break
      end-if
    end-if
    let #result_sec = #result_sec - #result_adj
    let #carry_days = #carry_days + #carry_adj
  end-while

  do Build_Duration (0, 0, #result_sec, $work_duration)

  do Convert_Time_Output ($work_duration, $out_time)

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Add_Time_Duration'
  display ' Output $out_time: ' noline
  display $out_time
  display ' Output #carry_days: ' noline
  display #carry_days
#end-if
end-procedure


!***********************************************************************
!  Procedure: Subtract_Time_Duration                                   *
!  Subtracts a duration from a time value, returning a time value and  *
!  a number of "days" to borrow as a result of the subtraction.        *
!  For example, subtracting 2 hours from 1:00 AM will result in a      *
!  returned time value of 11:00 PM with a one day borrow value.  Note  *
!  that the borrow value may be negative, in the case of subtracting   *
!  -2 hours from 11:00 PM                                              *
!  Accepts Native DateTime or Native Time only - returns native Time   *
!***********************************************************************
begin-procedure Subtract_Time_Duration ($in_time, $in_duration, :$out_time, :#borrow_days)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Subtract_Time_Duration'
  display ' Input $in_time: ' noline
  display $in_time
  display ' Input $in_duration: ' noline
  display $in_duration
#end-if

  let $neg_duration = ltrim($in_duration, ' ')
  if substr($neg_duration, 1, 1) = '-'       ! already negative?
    let #substrlen = length($neg_duration) - 1
    let $neg_duration = substr($neg_duration, 2, #substrlen)
  else
    let $neg_duration = '-' || $neg_duration
  end-if

  do Add_Time_Duration ($in_time, $neg_duration, $out_time, #borrow_days)

  if #borrow_days <> 0                       ! Add returns carry days, negate for borrow
    multiply -1 times #borrow_days
  end-if

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Subtract_Time_Duration'
  display ' Output $out_time: ' noline
  display $out_time
  display ' Output #borrow_days: ' noline
  display #borrow_days
#end-if
end-procedure


!***********************************************************************
!  Procedure: Subtract_Time_Time                                       *
!  Subtracts one time value from another (time1 - time2), returning    *
!  a duration.                                                         *
!  Accepts Native DateTime or Native Time only                         *
!***********************************************************************
begin-procedure Subtract_Time_Time ($in_time1, $in_time2, :$out_duration)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Subtract_Time_Time'
  display ' Input $in_time1: ' noline
  display $in_time1
  display ' Input $in_time2: ' noline
  display $in_time2
#end-if

  do Convert_Time_24hr ($in_time1, $worktime1)
  do Convert_Time_24hr ($in_time2, $worktime2)

  ! Now that we have 24hour times, just treat them as durations

  do Subtract_Duration_Duration ($worktime1, $worktime2, $out_duration)

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Subtract_Time_Time'
  display ' Output $out_duration: ' noline
  display $out_duration
#end-if
end-procedure


!***********************************************************************
!  Procedure: Add_Duration_Duration                                    *
!  Adds two durations together, returning a duration.                  *
!***********************************************************************
begin-procedure Add_Duration_Duration ($in_duration1, $in_duration2, :$out_duration)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Add_Duration_Duration'
  display ' Input $in_duration1: ' noline
  display $in_duration1
  display ' Input $in_duration2: ' noline
  display $in_duration2
#end-if

  do Parse_Duration ($in_duration1, #durahr1, #duramin1, #durasec1)
  do Parse_Duration ($in_duration2, #durahr2, #duramin2, #durasec2)

  let #result_sec = ((#durahr1 + #durahr2) * 3600) +
                    ((#duramin1 + #duramin2) * 60) +
                     (#durasec1 + #durasec2)

  do Build_Duration (0, 0, #result_sec, $out_duration)

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Add_Duration_Duration'
  display ' Output $out_duration: ' noline
  display $out_duration
#end-if
end-procedure


!***********************************************************************
!  Procedure: Subtract_Duration_Duration                               *
!  Subtracts one duration from another (duration1 - duration2),        *
!  returning a duration.                                               *
!***********************************************************************
begin-procedure Subtract_Duration_Duration ($in_duration1, $in_duration2, :$out_duration)
#ifdef debugx
  display 'Entering TIMEMATH.SQC: Subtract_Duration_Duration'
  display ' Input $in_duration1: ' noline
  display $in_duration1
  display ' Input $in_duration2: ' noline
  display $in_duration2
#end-if

  let $neg_duration = ltrim($in_duration2, ' ')
  if substr($neg_duration, 1, 1) = '-'       ! already negative?
    let #substrlen = length($neg_duration) - 1
    let $neg_duration = substr($neg_duration, 2, #substrlen)
  else
    let $neg_duration = '-' || $neg_duration
  end-if

  do Add_Duration_Duration ($in_duration1, $neg_duration, $out_duration)

#ifdef debugx
  display 'Exiting TIMEMATH.SQC: Subtract_Duration_Duration'
  display ' Output $out_duration: ' noline
  display $out_duration
#end-if
end-procedure


!***********************************************************************
!  Procedure: Convert_Time_24hr                                        *
!  This procedure assumes that a Native DateTime value is being passed *
!  in or that the NativeTime portion of the Datetime is Being passed   *
!  in.  The result is the time portion in a 24hour format, hh:mm:ss    *
!***********************************************************************
begin-procedure Convert_Time_24hr ($in_DateTime, :$out_time24)

    declare-variable
        date    $wkDate
    end-declare

#ifdef debugx
  #ifdef debugy
    display 'Entering TIMEMATH.SQC: Convert_Time_24hr'
    display ' Input $in_DateTime: ' noline
    display $in_DateTime
  #end-if
#end-if

    let #len1 = length({Native-DateTimeMask})

    if length($in_DateTime) = #len1          ! If equal, then date being passed in full

        let $wkDate     = strtodate($in_DateTime,{Native-DateTimeMask})
        let $out_time24 = datetostr($wkDate,{PTHMS})
        let $_PStime24  = datetostr($wkDate,{PTHMS})

    else                                     ! Else, only Time Passed in

        if length($in_DateTime) = 8
            let $wkDate     = strtodate($in_DateTime,{Native-Time24Mask}) !This assumes no Milliseconds  
            let $out_time24 = datetostr($wkDate,{PTHMS})
            let $_PStime24  = datetostr($wkDate,{PTHMS})
        else
            let $wkDate     = strtodate($in_DateTime,{Native-TimeMask})   !This format allows for Milliseconds
            let $out_time24 = datetostr($wkDate,{PTHMS})
            let $_PStime24  = datetostr($wkDate,{PTHMS})
        end-if


    end-if

#ifdef debugx
    let #temp_length = length($out_time24)
    if #temp_length <> 8
      display '  Length of output time not as expected, something may go wrong'
      display '  Length is: ' noline
      display #temp_length
    end-if
    display 'Exiting TIMEMATH.SQC: Convert_Time_24hr'
    display ' Output $out_time24: ' noline
    display $out_time24
    display ' $_PSTime24        : ' noline
    display $_PSTime24
#end-if
end-procedure


!***********************************************************************
!  Procedure: Convert_Time_Output                                      *
!  Convert the input 24 hour time to the proper native time format     *
!   This assumes a format of HH:MM:SS                                  *
!***********************************************************************
begin-procedure Convert_Time_Output ($in_time24, :$out_time)
#ifdef debugx
  #ifdef debugy
    display 'Entering TIMEMATH.SQC: Convert_Time_Output'
    display ' Input $in_time24: ' noline
    display $in_time24
  #end-if
#end-if

  let #one = 1
  do FormatNativeTime ($in_Time24, $out_time, #one, #dum2, $dum1)

#ifdef debugx
  #ifdef debugy
    display 'Exiting TIMEMATH.SQC: Convert_Time_Output'
    display ' Output $out_time: ' noline
    display $out_time
  #end-if
#end-if
end-procedure
