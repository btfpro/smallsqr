!***********************************************************************
!  TAX930AU:  1099-R Audit Report - 1998 Tax Year                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:07:30:35                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  05/19/2016   RSI-HCM105651 v1.0                                     *
!  Descr:  Modification for year 2016 changes.                         *
!***********************************************************************

#Define Prgm_Ver       '1.0'   !Corresponds to Modification History above.                                             !RSI-HCM105651
#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#Include 'usarpt.sqc' !USA-specific variables

begin-report
                                                                                                                       !RSI-HCM105651 Begin
  Show 'TAX930AU.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
                                                                                                                       !RSI-HCM105651 End
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX930AU' to $ReportID
  move '1099-R Statements - Audit Report' to $ReportTitle
  display ''
  display '1099-R Audit Report'

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization
end-procedure

begin-procedure Initialization
  do Get-Current-DateTime

  move '1' to $Year4
  do Format-DateTime($AsOfToday, $AsOfYear, {DEFYMD}, '','')
  move $AsOfYear  to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1 from #AsOfYear

  do Get-Tax-Reporting-Run-Controls

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  move &TX.Balance_Year    to $AsOfDate
  let $AsOfDate = $AsOfDate || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  move &TX.Balance_Year to $CalYear 9999

  create-array name=StateTotals size=60 field=Count:number
                                        field=ControlTotal:number:10

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-US-Year-End-Parameters
     do Convert-Parameters
  end-if

end-procedure

begin-heading 9
  #Include 'stdhdg01.sqc'

  print 'Company '        (3,1)
  print &A.Company               (0,+2)
  print &A.Descr                 (0,+2)
  let $TaxYear = 'Tax Year ' || $CalYear
  print $TaxYear                 (3,)    center
  print 'Federal EIN '           (4,1)
  move &A.Federal_EIN to $A.Federal_EIN 099999999
  print $A.Federal_EIN           (,+2)   edit xx-xxxxxxx
  print 'Dist Code(s):'          (5,1)
  print $DistribCd               (,+2)
  print 'Earn Code(s):'          (6,1)
  print $HeaderEarns             (,+2)
  print '       Gross'           (+2,19)
  print ' Taxable'               (,40)
  print '     Tax'               (,57)
  print ' State/Local'           (,71)
  print ' '                      (,87)
                                                                                                                       !RSI-HCM105651 Begin
  print 'Amt Allocable to'       (,107)
  print '1st Year'               (,125)
                                                                                                                       !RSI-HCM105651 End

  print 'Distribution'           (+1,19)
  print '  Amount'               (,40)
  print 'Withheld'               (,57)
  print 'Distribution'           (,71)
  print 'Box 2b Information'     (,87)
                                                                                                                       !RSI-HCM105651 Begin
  print 'IRR within 5 yrs'       (,107)
  print 'Roth Contrib.'          (,125)
                                                                                                                       !RSI-HCM105651 End
end-heading

begin-procedure Process-Main
  move &TX.Company to $Company        !TX.Company is the Transmitter

  do Get-Company-Data                 !Transmitter identifying data
begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN

  move 'N' to $EmployeeFound

  do Read-Earnings-Data
  if $EmployeeFound = 'Y'
    NEW-PAGE
  end-if

FROM  PS_COMPANY_TBL A
#ifdef TAXTEST
WHERE TAX_REPORT_TYPE = '2'
#else
WHERE TAX_REPORT_TYPE = 'R'  !1099-R Reporting Company
#endif
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
end-procedure

begin-procedure Read-Earnings-Data

begin-SELECT
C.EMPLID
C1.NATIONAL_ID
C.NAME
EB.EMPLID
#ifdef DB2ALL
DECIMAL(SUM(EB.GRS_YTD),15,3) &EB.Grs_YTD
#else
SUM(EB.GRS_YTD) &EB.Grs_YTD
#endif

  do Select-1099R-Allocable-data                                                                                       !RSI-HCM105651
  do Select-1099R-Data
  move 'Y' to $EmployeeFound

FROM  PS_EARNINGS_BAL EB, PS_NAMES C, PS_PERS_NID C1
WHERE EB.COMPANY          = &A.Company
  AND C1.EMPLID           = C.EMPLID
  AND C1.COUNTRY          = {NID_Country}
  AND C1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND C.NAME_TYPE = 'PRI'
  AND C.EFFDT =
      (SELECT MAX(CX.EFFDT)
       FROM   PS_NAMES CX
       WHERE  CX.EMPLID    = C.EMPLID
         AND  CX.NAME_TYPE = C.NAME_TYPE
         AND  CX.EFFDT    <= $AsOfDate)
  AND EB.EMPLID            = C.EMPLID
  AND EB.ERNCD            IN [$SelectedEarns]
  AND EB.BALANCE_YEAR      = &TX.Balance_Year
  AND EB.BALANCE_ID        = $Calendar_Year_Id
  AND EB.GRS_YTD           > 0
  AND EB.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID            = EB.EMPLID
         AND  COMPANY           = EB.COMPANY
         AND  BALANCE_YEAR      = EB.BALANCE_YEAR
         AND  BALANCE_ID        = EB.BALANCE_ID
         AND  EMPL_RCD          = EB.EMPL_RCD
         AND  SPCL_BALANCE      = EB.SPCL_BALANCE
         AND  ERNCD             = EB.ERNCD)
GROUP BY EB.EMPLID, C.EMPLID, C1.NATIONAL_ID, C.NAME
ORDER BY C1.NATIONAL_ID
end-SELECT
end-procedure

                                                                                                                       !RSI-HCM105651 Begin
begin-procedure Select-1099R-Allocable-data

   move 0 to #rsi_amt_allocable
   move ' ' to $year_1099r

begin-SELECT
AZ.RSI_AMT_ALLOCABLE,
AZ.YEAR

   let #rsi_amt_allocable = &AZ.RSI_AMT_ALLOCABLE
   let $year_1099r = &AZ.YEAR

FROM PS_RSI_1099R_DATA AZ
WHERE AZ.EMPLID = &EB.EmplID
  AND AZ.EFFDT  =
  (SELECT MAX(EFFDT)
    FROM PS_RSI_1099R_DATA
     WHERE EMPLID = AZ.EMPLID
       AND EFFDT <= $AsOfToday)
end-SELECT

end-procedure
                                                                                                                       !RSI-HCM105651 End

begin-procedure Select-1099R-Data
  move 0 to #FedTxGrs_YTD
  move 0 to #FedTax_YTD
  move 0 to #StateTax_YTD
  move 0 to #LocalTax_YTD
  move 0 to #StateTxGrs_YTD
  move 0 to #LocalTxGrs_YTD

begin-SELECT
D.STATE
D.LOCALITY
D.TXGRS_YTD
D.TAX_YTD

  move &D.TxGrs_YTD   to #FedTxGrs_YTD
  move &D.Tax_YTD   to #FedTax_YTD

FROM  PS_TAX_BALANCE D
WHERE D.EMPLID        = &EB.EmplID
  AND D.COMPANY       = &A.Company
  AND D.TAX_CLASS     = 'H'   !Withholding
  AND D.BALANCE_YEAR = &TX.Balance_Year
  AND D.BALANCE_ID    = $Calendar_Year_Id
  AND D.STATE = '$U'
  AND D.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_TAX_BALANCE
        WHERE EMPLID        = D.EMPLID
          AND COMPANY       = D.COMPANY
          AND BALANCE_YEAR  = D.BALANCE_YEAR
          AND BALANCE_ID    = D.BALANCE_ID
          AND STATE         = D.STATE
          AND TAX_CLASS     = D.TAX_CLASS)
  AND (D.TXGRS_YTD > 0   OR   D.TAX_YTD > 0)
end-SELECT

  do Print-1099R-Data-Federal

begin-SELECT
D1.STATE
D1.LOCALITY
D1.TXGRS_YTD
D1.TAX_YTD

  if RTRIM(&D1.Locality,' ') = ''
    let $TaxState = rtrim(&D1.State, ' ')
    move &D1.TxGrs_YTD to #StateTxGrs_YTD
    move &D1.Tax_YTD to #StateTax_YTD
  else
    let $TaxState = rtrim(&D1.State, ' ')
    move &D1.Locality to $Locality
    do Get-Local-Tax-Data
    move &D1.TxGrs_YTD to #LocalTxGrs_YTD
    move &D1.Tax_YTD to #LocalTax_YTD
  end-if

  do Print-1099R-Data

FROM  PS_TAX_BALANCE D1
WHERE D1.EMPLID        = &EB.EmplID
  AND D1.COMPANY       = &A.Company
  AND D1.TAX_CLASS     = 'H'   !Withholding
  AND D1.BALANCE_YEAR  = &TX.Balance_Year
  AND D1.BALANCE_ID    = $Calendar_Year_Id
  AND D1.STATE         <> '$U'
  AND D1.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_TAX_BALANCE
        WHERE EMPLID        = D1.EMPLID
          AND COMPANY       = D1.COMPANY
          AND BALANCE_YEAR  = D1.BALANCE_YEAR
          AND BALANCE_ID    = D1.BALANCE_ID
          AND STATE         = D1.STATE
          AND LOCALITY      = D1.LOCALITY
          AND TAX_CLASS     = D1.TAX_CLASS)
  AND (D1.TXGRS_YTD > 0   OR   D1.TAX_YTD > 0)
ORDER BY D1.STATE
end-SELECT
end-procedure

begin-procedure Print-1099R-Data-Federal
  if &EB.EmplID <> $priorEmplID or &A.Company <> $priorCompany
    do Print-EE-Data
    move &EB.EmplID to $priorEmplID
    move &A.Company  to $priorCompany
  end-if

  print 'Federal'        (+2,1)
  do Format-Number(&EB.Grs_YTD, $out, 'b9999999.99')
  print $out             (,20)
  do Format-Number(#FedTxGrs_YTD, $out, 'b9999999.99')
  print $out             (,37)
  do Format-Number(#FedTax_YTD, $out, 'b9999999.99')
  print $out             (,54)

  if $TotalDistrib = 'Y'
    print 'Total Distribution'                  (,87)
  end-if

                                                                                                                       !RSI-HCM105651 Begin

   do Format-Number(#rsi_amt_allocable, $out, 'b9999999.99')
   print $out                  (,112)
   print $year_1099r           (,132)

                                                                                                                       !RSI-HCM105651 End

  move 0 to #FedTxGrs_YTD
  move 0 to #FedTax_YTD
end-procedure

begin-procedure Print-1099R-Data

  if #StateTax_YTD > 0 or #StateTxGrs_YTD > 0
    print $TaxState        (+2,1)
    do Format-Number(#StateTax_YTD, $out, 'b9999999.99')
    print $out             (,54)
    do Format-Number(#StateTxGrs_YTD, $out, 'b9999999.99')
    print $out             (,72)
  end-if

  if #LocalTax_YTD > 0 or #LocalTxGrs_YTD > 0
    print $TaxLocality     (+2,1)
    do Format-Number(#LocalTax_YTD,$out,'b9999999.99')
    print $out             (,54)
    do Format-Number(#LocalTxGrs_YTD,$out,'b9999999.99')
    print $out             (,72)
  end-if

  move '' to $TaxState
  move '' to $TaxLocality
  move 0 to #StateTax_YTD
  move 0 to #LocalTax_YTD
  move 0 to #StateTxGrs_YTD
  move 0 to #LocalTxGrs_YTD
end-procedure

begin-procedure Print-EE-Data
  next-listing  need=4
  print '****  '          (+1,1)
  print &C1.NATIONAL_ID           (,,9)
  print &C.Name           (,+2,30)
  print &EB.EmplID        (,+2)
  print '  ****'          (,)
end-procedure

begin-procedure Get-Local-Tax-Data
  Let $LocalityFound = 'N'
begin-SELECT
L.LOCALITY_ABBRV
  Let $LocalityFound = 'Y'
  move &L.Locality_Abbrv to $TaxLocality
FROM  PS_LOCAL_TAX_TBL2 L
WHERE L.STATE    = $TaxState
  AND L.LOCALITY = $Locality
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = $TaxState
         AND  LOCALITY = $Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT

If $LocalityFound = 'N'
begin-SELECT
L1.LOCALITY_NAME
  move &L1.Locality_Name to $TaxLocality
FROM  PS_LOCAL_TAX_TBL L1
WHERE L1.STATE    = $TaxState
  AND L1.LOCALITY = $Locality
  AND L1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = $TaxState
         AND  LOCALITY = $Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT
End-If
end-procedure

begin-procedure Prompts
  while $DistribCd = ''
    input $DistribCd 'Enter Distribution Code for this run'
    uppercase $DistribCd
  end-while

  while $TotalDistrib = ''
    input $TotalDistrib 'Should ''Total Distribution'' be marked? (Y/N)'
    uppercase $TotalDistrib
    if INSTR('YN',$TotalDistrib,1) = 0
      display 'Enter Y or N'
      move '' to $TotalDistrib
    end-if
  end-while

  display 'Enter Earnings Code or hit ENTER to stop selecting'
  move '(''' to $SelectedEarns
  move ' ' to $SelectedErnCd
  while $SelectedErnCd <> ''
    input $SelectedErnCd 'Enter Earnings Code or hit ENTER to stop selecting'
    uppercase $SelectedErnCd
    if $SelectedErnCd <> ''
      let $SelectedEarns = $SelectedEarns || $SelectedErnCd || ''','''
      let $HeaderEarns = $HeaderEarns || $SelectedErnCd || ','
    end-if
  end-while

  let $SelectedEarns = SUBSTR($SelectedEarns,1,LENGTH($SelectedEarns) - 2)
  let $HeaderEarns = SUBSTR($HeaderEarns,1,LENGTH($HeaderEarns) - 1)
  let $SelectedEarns = $SelectedEarns || ')'
  if $SelectedEarns = ')'
    display 'At least one earnings code must be entered'
    display 'Program ended'
    stop
  end-if
end-procedure

begin-procedure Convert-Parameters

  move $RC_US_YE.Distrib_Code       to $DistribCd
  move $RC_US_YE.Total_Distrib_Flag to $TotalDistrib

  do Read-Earnings-Codes
end-procedure

begin-procedure Read-Earnings-Codes

move '(''' to $SelectedEarns
move ' ' to $SelectedErnCd

begin-SELECT
C.ERNCD

  move &C.Erncd           to $SelectedErnCd

  let $SelectedEarns = $SelectedEarns || $SelectedErnCd || ''','''
  let $HeaderEarns = $HeaderEarns || $SelectedErnCd || ','

FROM  PS_RC_TAX930AU C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

 let $SelectedEarns = SUBSTR($SelectedEarns,1,LENGTH($SelectedEarns) - 2)
 let $HeaderEarns = SUBSTR($HeaderEarns,1,LENGTH($HeaderEarns) - 1)
 let $SelectedEarns = $SelectedEarns || ')'

end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
