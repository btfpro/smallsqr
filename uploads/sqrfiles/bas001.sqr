!********************************************
! BAS001: Eligible Participants Report
!********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:32:55                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set Database Environment

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

#define col_emplid             12       !Employee or Dependent Id
#define col_name               25       !Employee or Dependent Name
#define col_date               10       !Any Date Field
#define col_plan_type           4       !Plan Type
#define col_plan_descr         11       !Plan Short Description
#define col_opt_cd              4       !Option Code
#define col_benefit_plan        7       !Benefit Plan
#define col_coverage_cd         5       !Coverage Code
#define col_deduction_class     6       !Deduction Class

#define col_sep                 1       !Column Separator

!*************************************
Begin-Program
!*************************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Main-Report

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!*************************************
Begin-Procedure Init-Report
!*************************************

  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init

  let $ReportID    = 'BAS001'
  do Get-Report-Language
  let $ReportTitle = $BAS001-REPORTTITLE
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS001 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BAS001', 'REPORT_TITLE',   $BAS001-REPORTTITLE, #CW)
  do Get_Field_Information ('BAS001', 'COVRG',          $BAS001-COVRG,       #CW)
  do Get_Field_Information ('BAS001', 'DEDUCT',         $BAS001-DEDUCT,      #CW)
  do Get_Field_Information ('BAS001', 'PLAN_CREDIT',    $BAS001-PLAN-CREDIT, #CW)
  do Get_Field_Information ('BAS001', 'CUSTOM',         $BAS001-CUSTOM,      #CW)

  do Get_Field_Information ('BEN1',   'OPTN',           $BEN1-OPTN,          #CW)
  do Get_Field_Information ('BEN1',   'EFFECTIVE',      $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'PLAN',           $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',        $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',   'EMPLOYEE_ID',    $BEN1-EMPLOYEE-ID,   #CW)
  do Get_Field_Information ('BEN1',   'NAME',           $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',   'DATE',           $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'TYPE',           $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'DESCR',          $BEN1-DESCR,         #CW)
  do Get_Field_Information ('BEN1',   'CODE',           $BEN1-CODE,          #CW)
  do Get_Field_Information ('BEN1',   'CLASS',          $BEN1-CLASS,         #CW)
  do Get_Field_Information ('BEN1',   'TYPE',           $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'WAIVE',          $BEN1-WAIVE,         #CW)

End-Procedure


!*************************************
Begin-Procedure Ask-Values
!*************************************

  do Ask-Schedule-Id
  do Ask-Include-Options

End-procedure

!*************************************
Begin-Procedure Get-Values
!*************************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-Include-Options

End-Procedure

!*************************************
Begin-Procedure Ask-Include-Options
!*************************************

  While (($IncOptnDetail <> 'Y') And ($IncOptnDetail <> 'N'))

    input $IncOptnDetail 'Include Option-level detail on Report (Y/N)?'
    let $IncOptnDetail = RTRIM(UPPER($IncOptnDetail), ' ')

  End-While

End-Procedure

!*************************************
Begin-heading 8
!*************************************

#Include 'stdhtr12.sqc'

  print ' '                     (+2,1,{col_emplid})
  print ' '                     (0,+{col_sep},{col_name})
  print $BEN1-EFFECTIVE         (0,+{col_sep},{col_date})
  print $BEN1-PLAN              (0,+{col_sep},{col_plan_type})
  print $BEN1-PLAN              (0,+{col_sep},{col_plan_descr})

  if ($IncOptnDetail = 'Y')
    print $BEN1-OPTN            (0,+{col_sep},{col_opt_cd})
    print $BEN1-BENEFIT         (0,+{col_sep},{col_benefit_plan})
    print $BAS001-COVRG         (0,+{col_sep},{col_coverage_cd})
    print $BAS001-DEDUCT        (0,+{col_sep},{col_deduction_class})
  end-if

  print $BEN1-EMPLOYEE-ID       (+1,1,{col_emplid})
  print $BEN1-NAME              (0,+{col_sep},{col_name})
  print $BEN1-DATE              (0,+{col_sep},{col_date})
  print $BEN1-TYPE              (0,+{col_sep},{col_plan_type})
  print $BEN1-DESCR             (0,+{col_sep},{col_plan_descr})
  if ($IncOptnDetail = 'Y')
    print $BEN1-CODE            (0,+{col_sep},{col_opt_cd})
    print $BEN1-PLAN            (0,+{col_sep},{col_benefit_plan})
    print $BEN1-CODE            (0,+{col_sep},{col_coverage_cd})
    print $BEN1-CLASS           (0,+{col_sep},{col_deduction_class})
  end-if

  print '='                     (+1,1,{col_emplid})                  Fill
  print '='                     (0,+{col_sep},{col_name})            Fill
  print '='                     (0,+{col_sep},{col_date})            Fill
  print '='                     (0,+{col_sep},{col_plan_type})       Fill
  print '='                     (0,+{col_sep},{col_plan_descr})      Fill
  if ($IncOptnDetail = 'Y')
    print '='                   (0,+{col_sep},{col_opt_cd})          Fill
    print '='                   (0,+{col_sep},{col_benefit_plan})    Fill
    print '='                   (0,+{col_sep},{col_coverage_cd})     Fill
    print '='                   (0,+{col_sep},{col_deduction_class}) Fill
  end-if

End-Heading

!*************************************
Begin-Procedure Main-Report
!*************************************

  let #PlanOffset = {col_emplid} + {col_sep} + {col_name} + {col_sep} +
                    {col_date} + {col_sep} + 1
  let #OptnOffset = #PlanOffset + {col_plan_type} + {col_sep} +
                    {col_plan_descr} + {col_sep}

  let $PriorEmplid   = ''
  let $PriorEventDt  = ''
  let $PriorPlanType = ''
  let $FirstPlanFlag = 'Y'
  let $FirstOptnFlag = 'Y'

Begin-SELECT
A.SCHED_ID          () On-Break Print=Never Level=1 Procedure=Break-Change
  move &A.Sched_Id to $SchedId

A.BENEFIT_PROGRAM   () On-Break Print=Never Level=1 Procedure=Break-Change
  move &A.Benefit_Program to $BenProgram

A.EMPLID
A.BENEFIT_RCD_NBR
D.NAME
A.EVENT_DT

  if ($PriorEmplid <> &A.EmplId) Or ($PriorEventDt <> &A.Event_Dt)

    print &A.EmplID            (+1,1,{col_emplid})
    print &D.Name              (0,+{col_sep},{col_name})
    do Format-Datetime(&A.Event_Dt, $Out, {DEFDATE}, '', '')
    print $Out                 (0,+{col_sep},{col_date})

    let $PriorEmplId   = &A.EmplId
    let $PriorEventDt  = &A.Event_Dt
    let $EffDt         = &A.Event_Dt
    let $PriorPlanType = ''
    let $FirstPlanFlag = 'Y'
    let $FirstOptnFlag = 'Y'

  end-if

A.EVENT_ID
P.PLAN_TYPE

  if ($PriorPlanType <> &P.Plan_Type)

    if ($FirstPlanFlag = 'Y')
      print &P.Plan_Type         (0,+{col_sep},{col_plan_type})
    else
      print &P.Plan_Type         (+1,#PlanOffset,{col_plan_type})
    end-if
    let $PriorPlanType = &P.Plan_Type
    let $FirstPlanFlag = 'N'
    let $FirstOptnFlag = 'Y'

    move 'PLAN_TYPE' to $Fieldname
    move &P.Plan_Type to $Fieldvalue
    do Read-Translate-Table
    let $Xlatshortname = RTRIM($Xlatshortname, ' ')
    if ($Xlatshortname = '')
      let $Xlatshortname = '(' || $BAS001-CUSTOM || ')'
    end-if
    print $Xlatshortname         (0,+{col_sep},{col_plan_descr})

  end-if

O.OPTION_CD
O.OPTION_TYPE
O.BENEFIT_PLAN
O.COVRG_CD
O.DED_CLASS

  if ($IncOptnDetail = 'Y')
    if ($FirstOptnFlag = 'Y')
      print &O.Option_Cd         (0,+{col_sep},{col_opt_cd})
    else
      print &O.Option_Cd         (+1,#OptnOffset,{col_opt_cd})
    end-if
    let $FirstOptnFlag = 'N'

    if (&O.Option_type = 'O')
      let $BenPlan = &O.Benefit_Plan
    end-if
    if (&O.Option_type = 'G')
      let $BenPlan = '(' || $BAS001-PLAN-CREDIT || ')'
    end-if
    if (&O.Option_type = 'W')
      let $BenPlan = '(' || $BEN1-WAIVE || ')'
    end-if
    print $BenPlan               (0,+{col_sep},{col_benefit_plan})

    print &O.Covrg_Cd            (0,+{col_sep},{col_coverage_cd})
    print &O.Ded_Class           (0,+{col_sep},{col_deduction_class})

  end-if

FROM  PS_BAS_PARTIC      A,
      PS_BAS_PARTIC_PLAN P,
      PS_BAS_PARTIC_OPTN O,
      PS_PERSON_NAME   D

WHERE A.SCHED_ID LIKE $Sched_Id
AND   A.EVENT_STATUS  <> 'V'
AND   A.PROCESS_IND    = 'N'
AND   A.BAS_PROCESS_STATUS IN ('PR','NT','ET','EE','FE','RE')
AND   P.SCHED_ID       = A.SCHED_ID
AND   P.EMPLID         = A.EMPLID
AND   P.BENEFIT_RCD_NBR   = A.BENEFIT_RCD_NBR
AND   P.EVENT_ID       = A.EVENT_ID
AND   P.ELECT_ALLOWED  = 'Y'
AND   O.SCHED_ID       = A.SCHED_ID
AND   O.EMPLID         = A.EMPLID
AND   O.BENEFIT_RCD_NBR   = A.BENEFIT_RCD_NBR
AND   O.EVENT_ID       = A.EVENT_ID
AND   O.PLAN_TYPE      = P.PLAN_TYPE
AND   O.HISTORY_ONLY <> 'Y'
AND   D.EMPLID         = A.EMPLID

ORDER BY A.SCHED_ID ASC,
         A.BENEFIT_PROGRAM ASC,
         A.EMPLID ASC,
         A.BENEFIT_RCD_NBR ASC,
         A.EVENT_DT ASC,
         P.PLAN_TYPE ASC,
         O.BENEFIT_PLAN ASC,
         O.OPTION_TYPE ASC,
         O.COVRG_CD ASC
End-SELECT
End-Procedure

!*************************************
Begin-Procedure Break-Change
!*************************************

  New-Page

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime
#Include 'getpgmnm.sqc'  !Get-Benefit-Program-Name procedure
#Include 'getschnm.sqc'  !Get-SchedId-Name procedure
#Include 'getsched.sqc'  !Ask-Schedule-Id Procedure
#Include 'readxlat.sqc'  !Read-Translate-Table Procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!******************************* End Of Report *******************************
