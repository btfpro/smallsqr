!***********************************************************************
! FRQUENCY.SQC: Routines to convert comprate between frequencies       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:12:57:22                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!  Last Modified : Jun 28  - Platform Test - Invalid Field PAYGROUP    *
!***********************************************************************
!**********************************************************************************************
BEGIN-PROCEDURE Det-Annual-Rt($effdt,#comprate_in,$comp_frequency,#std_hours,$std_hrs_freq,
                              :#job_annual_rt)
!
! This procedure converts a compensation rate from a source frequency to an annual rate.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $COMP_FREQUENCY - source frequency id
!                   #STD_HOURS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #JOB_ANNUAL_RT - JOB annual rate
!
! Note: Depending on the calling SQR, #STD_HOURS and $STD_HRS_FREQ could also be
!       PAID_HOURS and PAID_HRS_FREQ if the Country of the JOB.REG_REGION is 'FRA'.
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Annual-Rt'
#end-if

! Simply annualize JOB comprate
if #std_hours <> 0
do Annualize-Comprate($effdt,#comprate_in,$comp_frequency,#std_hours,$std_hrs_freq,#job_annual_rt)
else
   let #job_annual_rt = 0
end-if

#ifdef debugx
  #ifdef debugy
     display ' #job_annual_rt: ' noline
     display #job_annual_rt
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Annual-Rt'
#end-if

END-PROCEDURE Det-Annual-Rt

!**********************************************************************************************
BEGIN-PROCEDURE Det-Monthly-Rt($effdt,#comprate_in,$comp_frequency,$freq_id_monthly,#std_hours,
                               $std_hrs_freq,:#job_monthly_rt)
!
! This procedure converts a compensation rate from a source frequency to a monthly rate.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $COMP_FREQUENCY - source frequency id
!                   $FREQ_ID_MONTHLY - paygroup monthly frequency id
!                   #STD_HOURS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #JOB_ANNUAL_RT - JOB annual rate
!
! Note: Depending on the calling SQR, #STD_HOURS and $STD_HRS_FREQ could also be
!       PAID_HOURS and PAID_HRS_FREQ if the Country of the JOB.REG_REGION is 'FRA'.
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Monthly-Rt'
#end-if

! Determine frequency type of $comp_frequency
do Det-Annual-Factor($comp_frequency,$effdt,$dummy1,$freq_type,#dummy2,$dummy3)

! For non-contract frequency types, convert the comprate using the monthly frequency id
! from the paygroup
if $freq_id_monthly <> ' ' or #std_hours <> 0
   do Convert-Frequency($effdt,#comprate_in,$comp_frequency,$freq_id_monthly,#std_hours,
                        $std_hrs_freq,#job_monthly_rt)
else
   let #job_monthly_rt = 0
end-if

#ifdef debugx
  #ifdef debugy
     display ' #job_monthly_rt: ' noline
     display #job_monthly_rt
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Monthly-Rt'
#end-if

END-PROCEDURE Det-Monthly-Rt

!**********************************************************************************************
BEGIN-PROCEDURE Det-Daily-Rt($effdt,#comprate_in,$comp_frequency,$freq_id_daily,#std_hours,
                             $std_hrs_freq,:#job_daily_rt)
!
! This procedure converts a compensation rate from a source frequency to a daily rate.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $COMP_FREQUENCY - source frequency id
!                   $FREQ_ID_DAILY - paygroup daily frequency id
!                   #STD_HOURS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #JOB_ANNUAL_RT - JOB annual rate
!
! Note: Depending on the calling SQR, #STD_HOURS and $STD_HRS_FREQ could also be
!       PAID_HOURS and PAID_HRS_FREQ if the Country of the JOB.REG_REGION is 'FRA'.
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Daily-Rt'
#end-if

! Determine frequency type of $comp_frequency
do Det-Annual-Factor($comp_frequency,$effdt,$dummy1,$freq_type,#dummy2,$dummy3)

! For non-contract frequency types, convert the comprate using the monthly frequency id
! from the paygroup
if $freq_id_monthly <> ' ' or #std_hours <> 0
   do Convert-Frequency($effdt,#comprate_in,$comp_frequency,$freq_id_daily,#std_hours,
                        $std_hrs_freq,#job_daily_rt)
else
   let #job_daily_rt = 0
end-if

#ifdef debugx
  #ifdef debugy
     display ' #job_daily_rt: ' noline
     display #job_daily_rt
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Daily-Rt'
#end-if

END-PROCEDURE Det-Daily-Rt

!**********************************************************************************************
BEGIN-PROCEDURE Det-Hourly-Rt($effdt,#comprate_in,$comp_frequency,#std_hours,$std_hrs_freq,
                              :#job_hourly_rt)
!
! This procedure converts a compensation rate from a source frequency to an hourly rate.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $COMP_FREQUENCY - source frequency id
!                   #STD_HOURS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #JOB_HOURLY_RT - JOB annual rate
!
! Note: Depending on the calling SQR, #STD_HOURS and $STD_HRS_FREQ could also be
!       PAID_HOURS and PAID_HRS_FREQ if the Country of the JOB.REG_REGION is 'FRA'.
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Hourly-Rt'
#end-if

! Determine frequency type of $comp_frequency
do Det-Annual-Factor($comp_frequency,$effdt,$dummy1,$freq_type,#dummy2,$dummy3)

! If frequency type is hourly, hourly rate = comprate
if $freq_type = 'H' or #std_hours = 0
   let #job_hourly_rt = #comprate_in
else
   ! Convert #comprate_in to hourly frequency
   if #std_hours <> 0 and $std_hrs_freq <> ' '
      do Convert-Frequency($effdt,#comprate_in,$comp_frequency,'H',#std_hours,$std_hrs_freq,
                           #job_hourly_rt)
   else
      let #job_hourly_rt = 0
   end-if
end-if

#ifdef debugx
  #ifdef debugy
     display ' #job_hourly_rt: ' noline
     display #job_hourly_rt
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Hourly-Rt'
#end-if

END-PROCEDURE Det-Hourly-Rt

!**********************************************************************************************
BEGIN-PROCEDURE Convert-Frequency($effdt,#comprate_in,$from_frequency,$to_frequency,#std_hours,
                                  $std_hrs_freq,:#comprate_out)
!
! This procedure converts a compensation rate from a source frequency
! into a compensation rate of a target frequency.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $FROM_FREQUENCY - source frequency id
!                   $TO_FREQUENCY - target frequency id
!                   #STD_HOURS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #COMPRATE_OUT - target compensation rate
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Convert-Frequency'
  #ifdef debugy
     display ' Input $effdt: ' noline
     display $effdt
     display ' Input #comprate_in: ' noline
     display #comprate_in
     display ' Input $from_frequency: ' noline
     display $from_frequency
     display ' Input $to_frequency: ' noline
     display $to_frequency
     display ' Input #std_hours: ' noline
     display #std_hours
     display ' Input $std_hrs_freq: ' noline
     display $std_hrs_freq
  #end-if
#end-if

let #comprate_tmp = 0

! annualize source comprate
do Annualize-Comprate($effdt,#comprate_in,$from_frequency,#std_hours,$std_hrs_freq,#comprate_tmp)

! deannualize into target comprate
do Deannualize-Comprate($effdt,#comprate_tmp,$to_frequency,#std_hours,$std_hrs_freq,#comprate_out)

#ifdef debugx
  #ifdef debugy
     display ' #comprate_out: ' noline
     display #comprate_out
  #end-if
  display 'Exiting FRQUENCY.SQC: Convert-Frequency'
#end-if

END-PROCEDURE Convert-Frequency

!**********************************************************************************************
BEGIN-PROCEDURE Annualize-Comprate($effdt,#comprate_in,$from_frequency,#std_hours,$std_hrs_freq,
                                   :#comprate_out)
!
! This procedure annualizes a compensation rate from a source frequency.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $FROM_FREQUENCY - source frequency id
!                   #STD_HRS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #COMPRATE_OUT - target compensation rate
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Annualize-Comprate'
  #ifdef debugy
     display ' Input $effdt: ' noline
     display $effdt
     display ' Input #comprate_in: ' noline
     display #comprate_in
     display ' Input $from_frequency: ' noline
     display $from_frequency
     display ' Input #std_hours: ' noline
     display #std_hours
     display ' Input $std_hrs_freq: ' noline
     display $std_hrs_freq
  #end-if
#end-if

! Get Frequency_Type, Freq_Annual_Factor, Use_Std_Hours_SW of $from_frequency
do Det-Annual-Factor($from_frequency,$effdt,$dummy1,$frequency_type,#freq_annual_factor,
                     $use_std_hours_sw)

! If Frequency_Type is Hourly, annualize with Standard Hours
if $frequency_type = 'H' and $use_std_hours_sw = 'Y'

! Get Freq_Annual_Factor of $std_hrs_freq and annualize using Standard Hours
   do Det-Annual-Factor($std_hrs_freq,$effdt,$dummy1,$dummy2,#stdhrs_freq_factor,$dummy3)
   let #comprate_out = #comprate_in * #std_hours * #stdhrs_freq_factor

! else Frequency_Type is not Hourly and annualized with Standard Hours
! Annualize using Freq Annual Factor
else
   let #comprate_out = #comprate_in * #freq_annual_factor
end-if

#ifdef debugx
  #ifdef debugy
     display ' #comprate_out: ' noline
     display #comprate_out
  #end-if
  display 'Exiting FRQUENCY.SQC: Annualize-Comprate'
#end-if

END-PROCEDURE Annualize-Comprate

!**********************************************************************************************
BEGIN-PROCEDURE Deannualize-Comprate($effdt,#comprate_in,$to_frequency,#std_hours,$std_hrs_freq,
                                     :#comprate_out)
!
! This procedure deannualizes an annualized compensation rate to a target frequency.
!
! Input parameters: $EFFDT - Effective Date
!                   #COMPRATE_IN - source compensation rate
!                   $TO_FREQUENCY - source frequency id
!                   #STD_HRS - standard hours
!                   $STD_HRS_FREQ - standard hours frequency id
! Output parameters: #COMPRATE_OUT - target compensation rate
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Deannualize-Comprate'
  #ifdef debugy
     display ' Input $effdt: ' noline
     display $effdt
     display ' Input #comprate_in: ' noline
     display #comprate_in
     display ' Input $to_frequency: ' noline
     display $to_frequency
     display ' Input #std_hours: ' noline
     display #std_hours
     display ' Input $std_hrs_freq: ' noline
     display $std_hrs_freq
  #end-if
#end-if

! Get Frequency_Type, Freq_Annual_Factor, Use_Std_Hours_SW of $to_frequency
do Det-Annual-Factor($to_frequency,$effdt,$dummy1,$frequency_type,#freq_annual_factor,
                     $use_std_hours_sw)

! If Frequency_Type is Hourly, deannualize with Standard Hours
if $frequency_type = 'H' and $use_std_hours_sw = 'Y'

! Get Freq_Annual_Factor of $std_hrs_freq and deannualize using Standard Hours
   do Det-Annual-Factor($std_hrs_freq,$effdt,$dummy1,$dummy2,#stdhrs_freq_factor,$dummy3)
   let #comprate_out = #comprate_in / (#std_hours * #stdhrs_freq_factor)

! else Frequency_Type is not Hourly and deannualized with Standard Hours
! Deannualize using Freq Annual Factor
else
   let #comprate_out = #comprate_in / #freq_annual_factor
end-if

#ifdef debugx
  #ifdef debugy
     display ' #comprate_out: ' noline
     display #comprate_out
  #end-if
  display 'Exiting FRQUENCY.SQC: Deannualize-Comprate'
#end-if

END-PROCEDURE Deannualize-Comprate

!**********************************************************************************************
BEGIN-PROCEDURE Det-Annual-Factor($frequency_id,$freq_effdt,:$freq_descrshort,:$frequency_type,
                                  :#freq_annual_factor,:$use_std_hours_sw)
!
! This procedure determines the Short Description, Frequency Type, Frequency Annualization Factor,
! and Use_Std_Hours_SW from the Frequency Table for the given Frequency ID.
!
! Input parameters: $FREQ_EFFDT - Effective Date
!                   $FREQUENCY_ID - Frequency ID
! Output parameters: $FREQ_DESCRSHORT - Short Description
!                    $FREQUENCY_TYPE - Frequency Type
!                    #FREQ_ANNUAL_FACTOR - Frequency Annualization Factor
!                    $USE_STD_HOURS_SW - Use_Std_Hours_SW
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Annual-Factor'
  #ifdef debugy
     display ' Input $frequency_id: ' noline
     display $frequency_id
     display ' Input $freq_effdt: ' noline
     display $freq_effdt
  #end-if
#end-if

begin-SELECT
FF.FREQUENCY_ID
FF.EFFDT
FF.DESCRSHORT
 Let $freq_descrshort = &FF.DESCRSHORT
FF.FREQUENCY_TYPE
 Let $frequency_type = &FF.FREQUENCY_TYPE
FF.FREQ_ANNUAL_FACTOR
 Let #freq_annual_factor = &FF.FREQ_ANNUAL_FACTOR
FF.USE_STD_HOURS_SW
 Let $use_std_hours_sw = &FF.USE_STD_HOURS_SW

FROM PS_FREQUENCY_TBL FF
WHERE FF.FREQUENCY_ID = $frequency_id
  AND FF.EFFDT        = (SELECT MAX(EFFDT) FROM PS_FREQUENCY_TBL
                         WHERE FF.FREQUENCY_ID = FREQUENCY_ID
                           AND EFFDT <= $freq_effdt)
  AND FF.EFF_STATUS   = 'A'
end-SELECT

   do Det-Annual-Factor-Lang($frequency_id, $freq_effdt, $freq_descrshort_lang)

   let $Chk_Frequency_Source = substr($Frequency_ID,1,2)
   if $Chk_Frequency_Source = '@@'
      let $Frequency_Type = 'D'
      let #Freq_Annual_Factor = to_number(substr($Frequency_ID,3,3))
      let $Use_Std_Hours_Sw = 'N'
      let $freq_descrshort = 'Cnt. Daily'
      do Det-Annual-Factor-Lang('D', $freq_effdt, $freq_descrshort_lang)
   end-if

   if $freq_descrshort_lang <> ''
      let $freq_descrshort = $freq_descrshort_lang
   end-if

#ifdef debugx
  #ifdef debugy
     display ' Output $freq_descrshort: ' noline
     display $freq_descrshort
     display ' Output $frequency_type: ' noline
     display $frequency_type
     display ' Output #freq_annual_factor: ' noline
     display #freq_annual_factor
     display ' Output $use_std_hours_sw: ' noline
     display $use_std_hours_sw
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Annual-Factor'
#end-if

END-PROCEDURE Det-Annual-Factor


!**********************************************************************************************
BEGIN-PROCEDURE Det-Annual-Factor-Lang($freq_id_lang,$freq_effdt_lang,:$freq_descrshort_lang)
!
! This procedure determines the Short Description from the Related Language Table
! of the Frequency Table for the given Frequency ID.
!
! Input parameters: $FREQ_EFFDT_LANG - Effective Date
!                   $FREQ_ID_LANG - Frequency ID
! Output parameters: $FREQ_DESCRSHORT_LANG - Short Description
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Det-Annual-Factor-Lang'
  #ifdef debugy
     display ' Input $freq_id_lang: ' noline
     display $freq_id_lang
     display ' Input $freq_effdt_lang: ' noline
     display $freq_effdt_lang
  #end-if
#end-if

  let $freq_descshort_lang = ''

  if $_Curr_Language_Cd = $_PSOptions_Language_Cd
    goto DetAnnFacLngExit
  end-if

  if Rtrim($freq_id_lang,' ') = '' or Rtrim ($freq_effdt_lang,' ') = ''
    goto DetAnnFacLngExit
  end-if

begin-SELECT
FFL.DESCR50
FFL.DESCRSHORT

  if rtrim(&FFL.DESCRSHORT,' ') <> ''
    let $freq_descrshort_lang = rtrim(&FFL.DESCRSHORT,' ')
  end-if

FROM PS_FREQ_TBL_LANG FFL
WHERE FFL.FREQUENCY_ID = $freq_id_lang
  AND FFL.LANGUAGE_CD  = $Curr_Language_Cd
  AND FFL.EFFDT        = (SELECT MAX(EFFDT)
                            FROM PS_FREQ_TBL_LANG
                           WHERE FREQUENCY_ID = $freq_id_lang
                             AND LANGUAGE_CD = $Curr_Language_Cd
                             AND EFFDT <= $freq_effdt_lang)
end-SELECT

DetAnnFacLngExit:

#ifdef debugx
  #ifdef debugy
     display ' Output $freq_descrshort_lang: ' noline
     display $freq_descrshort_lang
  #end-if
  display 'Exiting FRQUENCY.SQC: Det-Annual-Factor-Lang'
#end-if

END-PROCEDURE Det-Annual-Factor-Lang

!**********************************************************************************************
BEGIN-PROCEDURE Get-Paygroup-Freq-NA($company,$paygroup,$effdt,:$freq_id_monthly,:$freq_id_daily)
!
! This procedure determines the daily and monthly frequency ids from the PAYGROUP_TBL for the
! given company, paygroup, and effective date.  Used only for employees on North American payroll.
!
! Input parameters: $COMPANY - Company
!                   $PAYGROUP - Paygroup
!                   $EFFDT - Effective date
! Output parameters: $FREQ_ID_MONTHLY - Monthly frequency id
!                    $FREQ_ID_DAILY - Daily frequency id
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Get-Paygroup-Freq-NA'
  #ifdef debugy
     display ' Input $company: ' noline
     display $company
     display ' Input $paygroup: ' noline
     display $paygroup
     display ' Input $effdt: ' noline
     display $effdt
  #end-if
#end-if

begin-SELECT
PP.FREQ_ID_MONTHLY
  let $freq_id_monthly = &PP.FREQ_ID_MONTHLY
PP.FREQ_ID_DAILY
  let $freq_id_daily = &PP.FREQ_ID_DAILY

FROM PS_PAYGROUP_TBL PP
WHERE PP.COMPANY      = $company
  AND PP.PAYGROUP     = $paygroup
  AND PP.EFFDT        = (SELECT MAX(EFFDT) FROM PS_PAYGROUP_TBL
                         WHERE PP.COMPANY = COMPANY
                           AND PP.PAYGROUP = PAYGROUP
                           AND EFFDT <= $effdt)
  AND PP.EFF_STATUS   = 'A'
end-SELECT

#ifdef debugx
  #ifdef debugy
     display ' Output $freq_id_monthly: ' noline
     display $freq_id_monthly
     display ' Output $freq_id_daily: ' noline
     display $freq_id_daily
  #end-if
  display 'Exiting FRQUENCY.SQC: Get-Paygroup-Freq-NA'
#end-if

END-PROCEDURE Get-Paygroup-Freq-NA

!**********************************************************************************************
BEGIN-PROCEDURE Get-Paygroup-Freq-Global($gp_paygroup,$effdt,:$freq_id_monthly,:$freq_id_daily)
!
! This procedure determines the daily and monthly frequency ids from the GP_PYGRP_DTL table for the
! given paygroup and effective date.  Used only for employees on Global payroll.
!
! Input parameters: $GP_PAYGROUP - Paygroup
!                   $EFFDT - Effective date
! Output parameters: $FREQ_ID_MONTHLY - Monthly frequency id
!                    $FREQ_ID_DAILY - Daily frequency id
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Get-Paygroup-Freq-Global'
  #ifdef debugy
     display ' Input $gp_paygroup: ' noline
     display $gp_paygroup
     display ' Input $effdt: ' noline
     display $effdt
  #end-if
#end-if

begin-SELECT
GP.FREQ_ID_MONTHLY
  let $freq_id_monthly = &GP.FREQ_ID_MONTHLY
GP.FREQ_ID_DAILY
  let $freq_id_daily = &GP.FREQ_ID_DAILY

FROM PS_GP_PYGRP_DTL GP
WHERE GP.GP_PAYGROUP  = $gp_paygroup
  AND GP.EFFDT        = (SELECT MAX(EFFDT) FROM PS_GP_PYGRP_DTL
                         WHERE GP_PAYGROUP = GP.GP_PAYGROUP
                           AND EFFDT <= $effdt)
  AND GP.EFF_STATUS   = 'A'
end-SELECT

#ifdef debugx
  #ifdef debugy
     display ' Output $freq_id_monthly: ' noline
     display $freq_id_monthly
     display ' Output $freq_id_daily: ' noline
     display $freq_id_daily
  #end-if
  display 'Exiting FRQUENCY.SQC: Get-Paygroup-Freq-Global'
#end-if

END-PROCEDURE Get-Paygroup-Freq-Global

!**********************************************************************************************
BEGIN-PROCEDURE Get-Paygroup-Freq-Cnt($EmplID,#Empl_Rcd,$Effdt,:$freq_id_monthly,:$freq_id_daily)
!
! This procedure determines the daily and monthly frequency ids from PS_CONTRACT for a given
! employee job using parameters Emplid, Empl_Rcd, and effective date.  Used only for employees
! who are paid by Contract.
!
! Input parameters: $EmplID - Employee ID
!                   #Empl_Rcd - Employee Record No.
!                   $EFFDT - Effective date
!                   #Effseq - Effective Sequence No.
! Output parameters: $FREQ_ID_MONTHLY - Monthly frequency id
!                    $FREQ_ID_DAILY - Daily frequency id
!**********************************************************************************************
#ifdef debugx
  display 'Entering FRQUENCY.SQC: Get-Paygroup-Freq-Cnt'
  #ifdef debugy
     display ' Input $EmplID: ' noline
     display $EmplID
     display ' Input #Empl_Rcd: ' noline
     display #Empl_Rcd
     display ' Input $Effdt: ' noline
     display $Effdt
  #end-if
#end-if

begin-SELECT
CNTX.FREQ_ID_MONTHLY
CNTX.CONTRACT_BEGIN_DT
CNTX.CONTRACT_END_DT

   let $freq_id_monthly = &CNTX.FREQ_ID_MONTHLY
   let $Contract_Begin_Dt = &CNTX.CONTRACT_BEGIN_DT
   let $Contract_End_Dt = &CNTX.CONTRACT_END_DT

   do CONVERT-TO-DTU-DATE(&CNTX.CONTRACT_BEGIN_DT, $DTU_Cnt_Begin_Dt)
   do CONVERT-TO-DTU-DATE(&CNTX.CONTRACT_END_DT, $DTU_Cnt_End_Dt)
   do DTU-DIFF-DAYS($DTU_Cnt_Begin_Dt, $DTU_Cnt_End_Dt, #dtu_cnt_days)

   if #dtu_cnt_days < 0
      let #dtu_cnt_days = #dtu_cnt_days * -1
   end-if

   let $Contract_Duration = edit(#dtu_cnt_days,'009')
   let $freq_id_daily = '@@' || $Contract_Duration

FROM PS_CONTRACT CNTX
WHERE CNTX.EMPLID     = $EmplID
  AND CNTX.EMPL_RCD   = #Empl_Rcd
  AND CNTX.EFFDT      = (SELECT MAX(CNTX1.EFFDT)
                           FROM PS_CONTRACT CNTX1
                          WHERE CNTX1.EMPLID = CNTX.EMPLID
                            AND CNTX1.EMPL_RCD = CNTX.EMPL_RCD
                            AND CNTX1.EFFDT <= $Effdt)
end-SELECT

#ifdef debugx
  #ifdef debugy
     display ' Output $freq_id_monthly: ' noline
     display $freq_id_monthly
     display ' Output $freq_id_daily: ' noline
     display $freq_id_daily
  #end-if
  display 'Exiting FRQUENCY.SQC: Get-Paygroup-Freq-Cnt'
#end-if

END-PROCEDURE Get-Paygroup-Freq-Cnt

