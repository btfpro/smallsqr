!********************************************
!  PAY124CN:  Create Record of Employment   *
!             (ROE Mass Create)             *
!             Canadian Only                 *
!********************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2009, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2009/07/24:15:47:01                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  766829                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup31.sqc' !Init printer and page size

begin-report
  do Init-Report
  do Report
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'PAY124CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Pay124cn_ROE_Mass_Create to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime


  if $Prcs_Process_Instance = ''
    do Get-From-Thru-Dates
  else
    do Select-Parameters
    move $RC_PAY.FromDate to $FromDate
    move $RC_PAY.ThruDate to $ThruDate
    move $RC_PAY.ThruDate to $AsOfDate
  end-if

  display 'From Date: ' noline
  display $FromDate
  display 'AsOfDate : ' noline
  display $AsOfDate
end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY124CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY124CN', 'ROE_MASS_CREATE'   , $Pay124cn_ROE_Mass_Create , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'ROE_EXCEPT'        , $Pay124cn_Roe_except      , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'EMPL'              , $Pay124cn_Empl            , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'COMPANY'           , $Pay124cn_Company         , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'EMPLID'            , $Pay124cn_Emplid          , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'NAME'              , $Pay124cn_Name            , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'RCD#'              , $Pay124cn_Rcd#            , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'STAT'              , $Pay124cn_Stat            , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'ACTION'            , $Pay124cn_Action          , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'EFFDT'             , $Pay124cn_Effdt           , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'REASON'            , $Pay124cn_Reason          , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'MULT_PAY_PER'      , $Pay124cn_Mult_pay_per    , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'MULT_JOBS'         , $Pay124cn_Mult_jobs       , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'BOX_17C'           , $Pay124cn_Box_17C         , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'PAY_FREQUENCY_CHG' , $Pay124cn_Pay_Frequency_Chg , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'TO'                , $Pay124cn_To              , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'EFF_ENDING_DATE'   , $Pay124cn_Eff_Ending_Date , #dummy_width)
   do Get_Field_Information ('PAY124CN', 'UNCONFIRMED_CHEQUE', $Pay124cn_Unconfirmed_Cheque, #dummy_width)
   do Get_Field_Information ('PAY124CN', 'ROE_AMENDED'       , $Pay124cn_ROE_Amended_Created, #dummy_width)
   do Get_Field_Information ('PAY124CN', 'HIRE_TERM_DATE'    , $Pay124cn_Hire_Term_Date  , #dummy_width)

end-procedure

begin-heading 5
#include 'stdhdgtr.sqc'

  print '  '                     (3,1)
  print $Pay124cn_Roe_except     ()      center
  print '       '                (+1,1)
  print '       '                (0,9)
  print '       '                (0,18)
  print $Pay124cn_Empl           (0,36)
  print $Pay124cn_Empl           (0,42)
  print '       '                (0,48)
  print '       '                (0,56)
  print '       '                (0,71)

  print $Pay124cn_Company        (+1,1)
  print $Pay124cn_Emplid         (0,9)
  print $Pay124cn_Name           (0,18)
  print $Pay124cn_Rcd#           (0,36)
  print $Pay124cn_Stat           (0,42)
  print $Pay124cn_Action         (0,48)
  print $Pay124cn_Effdt          (0,56)
  print $Pay124cn_Reason         (0,71)

end-heading


begin-procedure Report

    do Amend-ROE
    do Create-ROE

    display ' '
    display ' Number of ROEs created ' noline
    display #ROECount 99,999


end-procedure


begin-procedure Amend-ROE
begin-SELECT
R.EMPLID
R.COMPANY
R.WAGE_LOSS_PLAN
R.UI_PAYABLE_DT
R.ROE_SEQ
R.ROE_PROCESS
R.ROE_NBR
R.ROE_NBR_REPL
R.ROE_DT
R.MULTIPLE_JOBS
R.PAYGROUP
R.JOBCODE
R.SETID_JOBCODE
R.ACTION
R.ACTION_REASON
R.ROE_ISSUER_ID
R.ROE_CONTACT_ID
R.FIRST_DATE_WORKED
R.LAST_DATE_WORKED
R.PD_LEAVE_START_DT
R.PD_LEAVE_INTERVAL
R.PD_LEAVE_AMT
R.PD_LEAVE_TYPE
R.EXPECTED_RETURN_DT
R.NOT_RETURNING
R.OVRD_HRS
R.COMMENTS
R.BUSINESS_UNIT
R.ROE_SERIAL_NUM
IB.UI_PERIOD_DT
IB.EARNS_END_DT

  do UpDate-Matching-Ins-Bal
  do Assure-Unique-Amend

  if $Roe_Inserted = 'N'
    do Insert-Amended-ROE
    do Create-Exceptions-Amend-ROE
    do Get-ROE-Future-Pay
  end-if

FROM PS_INS_EARNS_BAL IB,
     PS_ROE            R
WHERE IB.INS_EARNS_AMENDED = 'A'
   AND R.COMPANY          = IB.COMPANY
   AND R.EMPLID           = IB.EMPLID
   AND R.ROE_NBR             = IB.ROE_NBR
   AND R.ROE_SEQ          =
       (SELECT MAX(R1.ROE_SEQ)
          FROM PS_ROE  R1
          WHERE R1.COMPANY          = R.COMPANY
          AND   R1.EMPLID           = R.EMPLID
          AND   R1.ROE_NBR             = R.ROE_NBR)
ORDER BY R.EMPLID, 
         R.COMPANY, 
         R.WAGE_LOSS_PLAN,
         R.UI_PAYABLE_DT, 
         R.ROE_SEQ, 
         R.ROE_PROCESS, 
         R.ROE_NBR
end-SELECT

end-procedure


begin-procedure UpDate-Matching-Ins-Bal

begin-SQL

UPDATE PS_INS_EARNS_BAL
   SET ROE_NBR = ' ',
       INS_EARNS_AMENDED = 'R'
WHERE COMPANY          = &R.Company
  AND EMPLID           = &R.EmplID
  AND ROE_NBR             = &R.ROE_NBR

end-SQL

end-procedure


begin-procedure Assure-Unique-Amend

  move 'Y' to $Roe_Inserted

  if &R.EmplID         <>  $UpDated_EmplID
    move 'N' to $Roe_Inserted
  end-if

  if &R.Company        <>  $UpDated_Company
    move 'N' to $Roe_Inserted
  end-if

  if &R.Wage_Loss_Plan <>  $UpDated_Wage_Loss_Plan
    move 'N' to $Roe_Inserted
  end-if

  do Format-DateTime(&R.UI_Payable_Dt, $temp1, {DEFCMP}, '', '')
  do Format-DateTime($UpDated_UI_Payable_Dt, $temp2, {DEFCMP}, '', '')

  if $temp1 <>  $temp2
    move 'N' to $Roe_Inserted
  end-if

  if &R.ROE_Seq        <>  #UpDated_ROE_Seq
    move 'N' to $Roe_Inserted
  end-if

  if &R.ROE_Process    <>  $UpDated_ROE_Process
    move 'N' to $Roe_Inserted
  end-if

  if &R.ROE_NBR           <>  $UpDated_ROE_NBR
    move 'N' to $Roe_Inserted
  end-if

end-procedure

begin-procedure Get-Name

  let $Amended_EE_Name = ' '

begin-SELECT

PD.NAME

  move &PD.NAME to $Amended_EE_Name

FROM  PS_PERSON_NAME PD
WHERE PD.EMPLID           = &R.Emplid

end-SELECT
end-procedure

begin-procedure Insert-Amended-ROE

  move &R.ROE_Seq to #ROE_Seq
  add 1 to #ROE_Seq

begin-SQL

    INSERT INTO PS_ROE VALUES (&R.EmplID,
                               &R.Company,
                               &R.Wage_Loss_Plan,
                               &R.UI_Payable_Dt,
                               #ROE_Seq,
                               'H',                      !  ROE_Process
                               ' ',                       !  ROE_NBR,
                               &R.ROE_NBR,                  !  ROE_NBR_REPL,
                               $AsOfToday,               !  ROE_Dt,
                               &R.Multiple_Jobs,
                               &R.PayGroup,
                               &R.JobCode,
                               &R.Action,
                               &R.Action_Reason,
                               &R.ROE_Issuer_ID,
                               &R.ROE_Contact_ID,
                               &R.First_Date_Worked,
                               &R.Last_Date_Worked,
                               &R.PD_Leave_Start_Dt,
                               &R.PD_Leave_Interval,
                               &R.PD_Leave_Amt,
                               &R.Expected_Return_Dt,

#ifndef MICROSOFT
  #ifndef SYBASE
    #ifndef INFORMIX
                          &R.Not_Returning,
                          &R.OVRD_HRS,
                          &R.Business_unit,
                          &R.SetId_JobCode,
                          ' ',                           !Web ROE SN
                          &R.ROE_SERIAL_NUM,             !AMEND_ROE_SN
                          &R.PD_LEAVE_TYPE,
                          &R.Comments)
    #else
                          &R.Not_Returning,
                          &R.OVRD_HRS,
                          &R.Business_unit,
                          &R.SetId_JobCode,
                          ' ',                           !Web ROE SN
                          &R.ROE_SERIAL_NUM,             !AMEND_ROE_SN
                          &R.PD_LEAVE_TYPE,
                          NULL)
                          ! Text datatype not allowed in insert
    #endif
  #else
                          &R.Not_Returning,
                          &R.OVRD_HRS,
                          &R.Business_unit,
                          &R.SetId_JobCode,
                          ' ',                           !Web ROE SN
                          &R.ROE_SERIAL_NUM,             !AMEND_ROE_SN
                          &R.PD_LEAVE_TYPE,
                          '')
                          ! Text datatype not allowed in insert
  #endif
#else
                          &R.Not_Returning,
                          &R.OVRD_HRS,
                          &R.Business_unit,
                          &R.SetId_JobCode,
                          ' ',                           !Web ROE SN
                          &R.ROE_SERIAL_NUM,             !AMEND_ROE_SN
                          &R.PD_LEAVE_TYPE,
                          '')
                          ! Text datatype not allowed in insert
#endif

end-SQL

  move &R.EmplID         to  $UpDated_EmplID
  move &R.Company        to  $UpDated_Company
  move &R.Wage_Loss_Plan to  $UpDated_Wage_Loss_Plan
  move &R.UI_Payable_Dt  to  $UpDated_UI_Payable_Dt
  move &R.ROE_Seq        to  #UpDated_ROE_Seq
  move &R.ROE_Process    to  $UpDated_ROE_Process
  move &R.ROE_NBR           to  $UpDated_ROE_NBR

  add 1                  to  #ROECount

end-procedure


begin-procedure  Get-ROE-Future-Pay

begin-SELECT
FP.EMPLID
FP.COMPANY
FP.WAGE_LOSS_PLAN
FP.UI_PAYABLE_DT
FP.ROE_SEQ
FP.HOLIDAY
FP.ERNCD
FP.FUTURE_PAY_AMT

  do Insert-ROE-Future-Pay

FROM  PS_ROE_FUTURE_PAY   FP
WHERE FP.EMPLID         = &R.EmplID
  AND FP.COMPANY        = &R.Company
  AND FP.WAGE_LOSS_PLAN = &R.Wage_Loss_Plan
  AND FP.UI_PAYABLE_DT  = &R.UI_Payable_Dt
  AND FP.ROE_SEQ        = &R.ROE_Seq

end-SELECT

end-procedure


begin-procedure Insert-ROE-Future-Pay

begin-SQL

    INSERT INTO PS_ROE_FUTURE_PAY (EMPLID,
                                   COMPANY,
                                   WAGE_LOSS_PLAN,
                                   UI_PAYABLE_DT,
                                   ROE_SEQ,
                                   HOLIDAY,
                                   ERNCD,
                                   FUTURE_PAY_AMT)
                                  VALUES (&R.EmplID,
                                          &R.Company,
                                          &R.Wage_Loss_Plan,
                                          &R.UI_Payable_Dt,
                                          #ROE_Seq,
                                          &FP.Holiday,
                                          &FP.ErnCd,
                                          &FP.Future_Pay_Amt)

end-SQL

end-procedure


begin-procedure Create-ROE

  move 'N' to $Reject_Roe

begin-SELECT
A.COMPANY
A.EMPLID
A.EMPL_RCD
A.EMPL_STATUS
A.ACTION
A.ACTION_REASON
A.JOBCODE
A.SETID_JOBCODE
A.EFFDT
A.PAYGROUP
A.COMPRATE
A.ANNUAL_RT
A.BUSINESS_UNIT
B.HIRE_DT
B.REHIRE_DT
B.TERMINATION_DT
B.LAST_DATE_WORKED
B.EXPECTED_RETURN_DT
FT.FREQUENCY_TYPE
C.EMPL_TYPE
C.PAY_REF_NBR
C.ROE_ISSUER_ID
C.ROE_CONTACT_ID
D.BIRTHDATE
PN.NAME


  do Check-Future-Job

  do Format-DateTime(&A.EffDt, $Except_Effdt,{DEFDATE},'','')

  do Format-DateTime(&A.EffDt, $Work_Date, {DEFCMP}, '', '')
  move 1 to #Amount
  do Date-Subtract($Work_Date, $Last_Date_Worked, #Amount)

  do Format-DateTime($Return_Dt, $Work_Date, {DEFCMP}, '', '')
  move 7 to #Amount
  do Date-Subtract($Work_Date, $Date_Out, #Amount)

  if $Date_Out <= $Last_Date_Worked
    move 'Y' to $Reject_Roe
  end-if

  do Format-DateTime($Last_Date_Worked, $Last_Date_Worked, {DEFCMP}, '', 'native')

  if $Reject_Roe = 'N'
    do Get-Pay-Frequencies
    do Get-Last-Earns-End-Dt
    do Insured-Earnings

    if $Freq_Switch = 'Y'
      let $Exception_Reason = $Pay124cn_Pay_Frequency_Chg || ' ' || $Switch_PayGroup || $Pay124cn_To || ' ' ||
        $Previous_PayGroup  || $Pay124cn_Eff_Ending_Date || ' ' || $PF_Switch_Dt || '.'
      do Report-Create-Exceptions
      move 'Y' to $Reject_Roe
    end-if

    if $Earnings_Insured = 'Y'  and $Reject_Roe = 'N'
      do Check-Pay-Leave-Of-Absence
      if $First_Date_Worked = $Default_First_Date_Worked
        do Get-First-Date-Worked
      end-if

      do Format-DateTime($Last_Date_Worked,  $Work_Last_Date_Worked,  {DEFCMP}, '', '')
      do Format-DateTime($First_Date_Worked, $Work_First_Date_Worked, {DEFCMP}, '', '')
      if $Work_Last_Date_Worked < $Work_First_Date_Worked
        let $Exception_Reason = $Pay124cn_Hire_Term_Date
        do Report-Create-Exceptions
      else
        do Process-New-ROE
      end-if
    end-if

  end-if

  move 'N' to $Reject_Roe      ! reinit
  do Init-ROE-Fields

FROM PS_JOB           A,
     PS_EMPLOYMENT    B,
     PS_PAYGROUP_TBL  C,
     PS_PERSON        D,
     PS_PERSON_NAME   PN,
     PS_FREQUENCY_TBL FT
WHERE A.EMPL_STATUS NOT IN ('A', 'D')
  AND A.EFFDT  =
       (SELECT MAX(A1.EFFDT)
        FROM  PS_JOB A1
        WHERE A1.COMPANY = A.COMPANY
        AND   A1.EMPLID  = A.EMPLID
        AND   A1.EFFDT  >= $FROMDATE
        AND   A1.EFFDT  <= $ASOFDATE
        AND   A1.EMPL_STATUS = A.EMPL_STATUS)
  AND A.EFFSEQ =
       (SELECT MAX(EFFSEQ)
               FROM   PS_JOB
        WHERE  EMPLID    = A.EMPLID
          AND  EMPL_RCD = A.EMPL_RCD
          AND  EFFDT     = A.EFFDT)
  AND B.EMPLID      = A.EMPLID
  AND B.EMPL_RCD   = A.EMPL_RCD
  AND C.COMPANY     = A.COMPANY
  AND C.PAYGROUP    = A.PAYGROUP
  AND C.COUNTRY = 'CAN'
  AND C.EFFDT =
       (SELECT MAX(C1.EFFDT)
        FROM  PS_PAYGROUP_TBL C1
        WHERE C1.COMPANY    = C.COMPANY
        AND   C1.PAYGROUP   = C.PAYGROUP
        AND   C1.EFFDT     <= A.EFFDT
        AND   C1.EFF_STATUS = 'A')
  AND D.EMPLID      = A.EMPLID
  AND PN.EMPLID     = A.EMPLID
  AND C.PAY_FREQUENCY       =  FT.FREQUENCY_ID
  AND FT.EFF_STATUS         = 'A'
  AND FT.EFFDT              =
        (SELECT MAX(FT1.EFFDT)
         FROM   PS_FREQUENCY_TBL FT1
         WHERE  FT1.FREQUENCY_ID  = FT.FREQUENCY_ID
           AND  FT1.EFF_STATUS    = FT.EFF_STATUS
           AND  FT1.EFFDT        <= C.EFFDT)
ORDER BY A.COMPANY ASC, A.EMPLID ASC, A.EMPL_RCD ASC, A.EMPL_STATUS ASC
end-SELECT

end-procedure


begin-procedure Get-First-Date-Worked

  do Format-DateTime('19000101', $First_Date_Worked, {DEFCMP}, '', 'native')
  do Format-DateTime('19000101', $Default_First_Date_Worked, {DEFCMP}, '', 'native')

begin-SELECT
FD.EFFDT

  move &FD.EffDt to $First_Date_Worked

FROM PS_JOB FD
WHERE FD.EMPL_STATUS = 'A'
  AND FD.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_JOB
        WHERE  EMPLID  = &A.EmplID
          AND  EMPL_RCD = FD.EMPL_RCD
          AND  EMPL_STATUS = FD.EMPL_STATUS
          AND  ACTION IN ('HIR', 'REH', 'RFL', 'REC', 'RFD')
          AND  EFFDT < $First_Earns_End_Dt)
  AND FD.EMPLID = &A.EMPLID
end-SELECT

  if $First_Date_Worked = $Default_First_Date_Worked
    do Get-Hire-Date
  end-if

end-procedure


begin-procedure Check-Pay-Leave-Of-Absence

  do Format-DateTime('19000101', $First_Date_Worked, {DEFCMP}, '', 'native')
  do Format-DateTime('19000101', $Default_First_Date_Worked, {DEFCMP}, '', 'native')

begin-SELECT
LOA.EFFDT

  move &LOA.EffDt to $First_Date_Worked

FROM PS_JOB LOA
WHERE LOA.EMPL_STATUS = 'P'
  AND LOA.EMPLID      = &A.EMPLID
  AND LOA.EMPL_RCD   = &A.EMPL_RCD
  AND LOA.EFFDT =
       (SELECT MAX(LOA1.EFFDT)
        FROM   PS_JOB LOA1
        WHERE  LOA1.EMPLID    = LOA.EMPLID
          AND  LOA1.EMPL_RCD = LOA.EMPL_RCD
          AND  LOA1.EFFDT    < $First_Earns_End_Dt)

end-SELECT
end-procedure


begin-procedure Get-Hire-Date

begin-SELECT
HD.HIRE_DT

  if &HD.Hire_Dt <> ''
    move &HD.Hire_Dt to $First_Date_Worked
  end-if

FROM PS_EMPLOYMENT HD
WHERE HD.EMPLID     = &A.EmplID
  AND HD.EMPL_RCD  = &A.EMPL_RCD
end-SELECT

  if $First_Date_Worked = $Default_First_Date_Worked
    move 'No first date worked found.' to  $Exception_Reason
    do Report-Create-Exceptions
  end-if

end-procedure


begin-procedure Check-Future-Job

  do Format-DateTime('21000101', $Return_Dt, {DEFCMP}, '', 'native')

begin-SELECT
FJ.EFFDT

  move &FJ.EffDt to $Return_Dt

FROM PS_JOB          FJ
WHERE FJ.EMPL_STATUS = 'A'
  AND FJ.ACTION IN ('HIR', 'REH', 'RFL', 'REC', 'RFD')
  AND FJ.EFFDT =
       (SELECT MIN(EFFDT)
        FROM   PS_JOB
        WHERE  EMPLID    = &A.EmplID
          AND  EMPL_RCD = FJ.EMPL_RCD
          AND  ACTION    = FJ.ACTION
          AND  EFFDT > &A.EffDt)
  AND FJ.EMPLID = &A.EMPLID
end-SELECT
end-procedure


begin-procedure Get-Pay-Frequencies

  move  0 to #Most_Periods_Per_Year
  move  0 to #Previous_Periods
  move  0 to #Freq_Count
  move 'N' to $Multi_Pay_Periods

begin-SELECT
PFJ.EMPL_RCD
PFJ.EMPL_STATUS
PFJ.ACTION
PFJ.ACTION_REASON
PFJ.PAYGROUP
FQ.FREQUENCY_TYPE

  evaluate &FQ.FREQUENCY_TYPE
    when = 'W'              !Weekly
      move 52 to #Freq#
    when = 'B'              !BiWeekly
      move 26 to #Freq#
    when = 'S'              !SemiMonthly
      move 24 to #Freq#
    when = 'M'              !Monthly
      move 12 to #Freq#
    when-other              !Other
      display ' UNKNOWN PAY FREQUENCY IN GET PAY-FREQUENCIES '
  end-evaluate

  if #Freq# <> #Previous_Periods
    add 1 to #Freq_Count
    move #Freq# to #Previous_Periods
  end-if

  if #Freq# < #Least_Periods_Per_Year
    move #Freq# to #Least_Periods_Per_Year
  end-if

FROM PS_JOB           PFJ,
     PS_PAYGROUP_TBL  PFG,
     PS_FREQUENCY_TBL FQ
WHERE PFJ.EMPLID   = &A.EMPLID
  AND PFJ.EFFDT   =
       (SELECT MAX(EFFDT)
               FROM   PS_JOB
        WHERE  EMPLID    = PFJ.EMPLID
          AND  EMPL_RCD = PFJ.EMPL_RCD
          AND  EFFDT    <= &A.EffDt)
  AND PFJ.EFFSEQ  =
       (SELECT MAX(EFFSEQ)
               FROM   PS_JOB
        WHERE  EMPLID    = PFJ.EMPLID
          AND  EMPL_RCD = PFJ.EMPL_RCD
          AND  EFFDT     = PFJ.EFFDT)
  AND PFJ.COMPANY   = PFG.COMPANY
  AND PFJ.PAYGROUP  = PFG.PAYGROUP
  AND PFG.PAY_FREQUENCY  = FQ.FREQUENCY_ID
  AND FQ.EFF_STATUS      = 'A'
  AND FQ.EFFDT           =
      (SELECT MAX(FQ1.EFFDT)
              FROM PS_FREQUENCY_TBL FQ1
       WHERE  FQ1.FREQUENCY_ID = FQ.FREQUENCY_ID
         AND  FQ1.EFF_STATUS   = FQ.EFF_STATUS
         AND  FQ1.EFFDT       <= PFG.EFFDT)
end-SELECT

  if #Freq_Count > 1
    move 'Y' to $Multi_Pay_Periods
  end-if

end-procedure


begin-procedure Get-Last-Earns-End-Dt

begin-select
LED.PAY_END_DT

  move &LED.Pay_End_Dt to $Last_Earns_End_Dt
  move &LED.Pay_End_Dt to $FinalPayEndDt

FROM  PS_PAY_CALENDAR LED
WHERE LED.COMPANY          = &A.Company
  AND LED.PAYGROUP         = &A.PayGroup
  AND LED.PAY_END_DT       =
      (SELECT MIN(LED1.PAY_END_DT)
         FROM PS_PAY_CALENDAR LED1
         WHERE LED1.COMPANY   = LED.COMPANY
           AND LED1.PAYGROUP  = LED.PAYGROUP
           AND LED1.PAY_END_DT >= $Last_Date_Worked)
end-SELECT


end-procedure


begin-procedure Insured-Earnings

  move 'N' to $Earnings_Insured
  move 'Y' to $First_Row

  move 'N' to $Freq_Switch
  move 0   to #Previous_PP_Per_Yr
  move ''  to $Wage_Loss_Plan

begin-SELECT
IEB.WAGE_LOSS_PLAN
IEB.UI_PERIOD_DT
IEB.EARNS_END_DT
IEB.UI_EQUIV_WEEKS_CUR
IEB.UI_USE_WKLY
IEB.UI_PERIODS_PER_YR
IEB.UI_WKLY_EARNS
IEB.UI_WKLY_HOURS
IEB.UI_EARNS_CUR

  if $Multi_Pay_Periods = 'Y'
    if #Least_Periods_Per_Year > 0
      move #Least_Periods_Per_Year to #Periods_Per_Year
    else
      move &IEB.UI_Periods_Per_Yr to #Periods_Per_Year
    end-if
  else
    move &IEB.UI_Periods_Per_Yr to #Periods_Per_Year
  end-if

!  if &IEB.UI_Use_Wkly = 'N' or &IEB.UI_Equiv_Weeks_Cur > 0
  if &IEB.UI_WKLY_EARNS > 0 or &IEB.UI_WKLY_HOURS > 0
      move 'Y' to $Earnings_Insured
      move &IEB.Earns_End_Dt to $First_Earns_End_Dt
      if $First_Row = 'Y'
        let $First_Row = 'N'
        do Get-EarnsDate
        do Format-DateTime($EarnsDate, $EarnsDate, {DEFCMP}, '', '')
        move &IEB.WAGE_LOSS_PLAN to $Wage_Loss_Plan
      end-if
  end-if

  do Format-DateTime(&IEB.UI_PERIOD_DT, $CMP-PerDate, {DEFCMP}, '', '')


  if $CMP-PerDate >= $EarnsDate
    do Check-Pay-Frequencies
  end-if

FROM PS_INS_EARNS_BAL IEB
WHERE IEB.EMPLID         = &A.EmplID
  AND IEB.COMPANY        = &A.Company
  AND IEB.ROE_NBR           = ' '
  AND IEB.EARNS_END_DT  <= $Last_Earns_End_Dt
  AND INS_EARNS_AMENDED <> 'R'
ORDER BY IEB.EARNS_END_DT DESC
end-SELECT

  if $Last_Earns_End_Dt >= $Last_Date_Worked
    let $Last_Earns_End_Dt = $Last_Date_Worked
  end-if

end-procedure


begin-procedure Process-New-ROE

! Insure extra ROE's not issued to employees with multiple actions
  move 'N' to $Same_Action

  if    &A.COMPANY       =  $Prev_COMPANY
    if    &A.EMPLID        =  $Prev_EMPLID
        move 'Y' to $Same_Action
    end-if
  end-if

  if  $Same_Action = 'N'
    do Process-Unique-ROE
  end-if

  move  &A.COMPANY      to  $Prev_COMPANY
  move  &A.EMPLID       to  $Prev_EMPLID
  move  &A.EMPL_RCD    to  $Prev_EMPL_RCD
  move  &A.EMPL_STATUS  to  $Prev_EMPL_STATUS

end-procedure


begin-procedure Process-Unique-ROE

  move 'N'  to  $Not_Returning
  move ''   to  $PD_Leave_Start_Dt
  move  0   to  #Weekly_Rt
  move 'N'  to  $ROE_Needed
  move ''   to  $Ret_Dt
  move ' '  to  $PD_Leave_Type
  move ' '  to  $ROE_Serial_Num
  move ' '  to  $AMEND_ROE_SN

  do Prior-Job-Data
  move &A.Empl_Status to $Empl_Status

  evaluate $Empl_Status
    when = 'L'                                          ! LEAVE OF ABSENCE
      move &B.Expected_Return_Dt to  $Ret_Dt
      move 'Y' to  $ROE_Needed

    when = 'P'                                          ! LEAVE WITH PAY
      move &B.Expected_Return_Dt to  $Ret_Dt
      move 'Y' to $ROE_Needed

    when = 'S'                                          ! SUSPENDED
      move &B.Expected_Return_Dt to  $Ret_Dt
      move 'Y' to $ROE_Needed

    when = 'T'                                          ! TERMINATED
    when = 'R'                                          ! RETIRED
    when = 'Q'                                          ! RETIRED WITH PAY
    when = 'U'                                          ! TERMINATED WITH PAY
    when = 'V'                                          ! TERMINATED PENSION PAY OUT
    when = 'X'                                          ! RETIRED-PENSION ADMINISTRATION
      move 'Y' to $Not_Returning
      move 'Y' to $ROE_Needed

  end-evaluate

  if $ROE_Needed = 'Y'
    do Check-ROE-Exists
    do Assure-Unique-New

    if $Roe_Inserted = 'N' and $prev-roe-exists <> 'Y'

      if $Multi_Pay_Periods = 'Y'
        move $Pay124cn_Mult_pay_per to  $Exception_Reason
        move $Pay124cn_Mult_pay_per to  $Comment
        do Report-Create-Exceptions
      end-if

      do Get-Oth-Pay
      if  #17CEntries >3
        move $Pay124cn_Box_17C         to  $Exception_Reason
        do Report-Create-Exceptions
      end-if

      do Look-For-Cheques
      if $Unconfirmed_cheques = 'Y'
        move $Pay124cn_Unconfirmed_Cheque to  $Exception_Reason
        do Report-Create-Exceptions
      end-if

      do Insert-New-ROE

    end-if

    if $Multiple_Jobs = 'Y'
      move $Pay124cn_Mult_jobs  to  $Exception_Reason
      do Report-Create-Exceptions
    end-if

  end-if

end-procedure


begin-procedure Prior-Job-Data
  move 0 to #Job_Count
  move 0 to #Prior_Annual_Rt
begin-SELECT
J1.EMPLID
J1.EMPL_RCD
J1.EMPL_STATUS
J1.ANNUAL_RT
J1.EFFDT
J1.PAYGROUP
J1.COMPANY

  move &J1.Empl_Status to $Countable

  evaluate $Countable
    when = 'A'                      ! ACCTIVE
    when = 'L'                      ! LEAVE OF ABSENCE
    when = 'P'                      ! LEAVE WITH PAY
    when = 'S'                      ! SUSPENDED
    when=  'W'                      ! SHORT WORK BREAK                  !HP99999
      if &J1.EMPL_RCD <> &A.EMPL_RCD
        add 1 to #Job_count
      end-if
  end-evaluate

  if &J1.EMPL_Status  = 'A'
    add &J1.Annual_Rt to #Prior_Annual_Rt
  end-if

FROM PS_JOB J1
WHERE J1.EMPLID         = &A.EMPLID
  AND J1.COMPANY        = &A.COMPANY
  AND J1.EFFDT          =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J1.EMPLID
          AND EMPL_RCD = J1.EMPL_RCD
          AND COMPANY   = J1.COMPANY
          AND PAYGROUP = J1.PAYGROUP
          AND EFFDT     <= &A.EffDt)
  AND  J1.EFFSEQ =
       (SELECT MAX(EFFSEQ)
        FROM   PS_JOB
        WHERE  EMPLID       = J1.EMPLID
          AND  EMPL_RCD    = J1.EMPL_RCD
          AND  COMPANY      = J1.COMPANY
          AND  EFFDT        = J1.EFFDT)
end-SELECT

  if #Job_Count > 0
    move 'Y' to $Multiple_Jobs
  else
    move 'N' to $Multiple_Jobs
  end-if

end-procedure


begin-procedure Assure-Unique-New

  move 'Y' to $Roe_Inserted

  if &A.EmplID         <>  $UpDated_EmplID
    move 'N' to $Roe_Inserted
  end-if

  if &A.Company        <>  $UpDated_Company
    move 'N' to $Roe_Inserted
  end-if

  if $Wage_Loss_Plan   <>  $UpDated_Wage_Loss_Plan
    move 'N' to $Roe_Inserted
  end-if

  do Format-DateTime(&IEB.Earns_End_Dt, $temp1, {DEFCMP}, '', '')
  do Format-DateTime($UpDated_UI_Payable_Dt, $temp2, {DEFCMP}, '', '')

  if $temp1 <>  $temp2
    move 'N' to $Roe_Inserted
  end-if

  if 0                 <>  #UpDated_ROE_Seq
    move 'N' to $Roe_Inserted
  end-if

  if 'H'               <>  $UpDated_ROE_Process
    move 'N' to $Roe_Inserted
  end-if

  if ' '              <>  $UpDated_ROE_NBR
    move 'N' to $Roe_Inserted
  end-if

end-procedure


begin-procedure Insert-New-ROE

  if &A.ACTION_REASON = ''
    move ' ' to $Action_Reason
  else
    move &A.ACTION_REASON to $Action_Reason
  end-if

  if &A.EmplID                  = ''
     display '  A.EmplID        NULL '
  end-if

  if      &A.Company            = ''
     display '   A.Company      NULL '
  end-if

  if      $Wage_Loss_Plan       = ''
     display '  $Wage_Loss_Plan NULL '
  end-if

  if      $AsOfToday            = ''
     display ' AsOfToday        NULL '
  end-if

  if      $Multiple_Jobs        = ''
     display ' Multiple_Jobs   NULL '
     move ' ' to  $Multiple_Jobs
  end-if

  if      &A.PayGroup           = ''
     display '  A.PayGroup      NULL '
  end-if

  if      &A.JobCode            = ''
     display '  A.JobCode       NULL '
  end-if

  if      &A.Action             = ''
     display ' A.Action         NULL '
  end-if

  if      &A.Action_Reason      = ''
     display ' A.Action_Reason    NULL '
  end-if

  if      &C.ROE_Issuer_ID      = ''
     display ' C.ROE_Issuer_ID  NULL '
  end-if

  if      &C.ROE_Contact_ID     = ''
     display ' C.ROE_Contact_ID  NULL '
  end-if

  if      $First_Date_Worked    = ''
     display ' First_Date_Worked  NULL '
  end-if

  if      $Last_Date_Worked   = ''
    display '   Last_Date_Worked  NULL '
  end-if

  if      $PD_Leave_Start_Dt    = ''
    display ' PD_Leave_Start_Dt  NULL '
  end-if

  if #Weekly_Rt           >= 0
     display ' Weekly_Rt   ' noline
     display  #Weekly_Rt
  else
     display ' Weekly_Rt        NULL '
  end-if

  if      $Ret_Dt               = ''
    display ' Expected_Return_Dt NULL '
  end-if

  if      $Not_Returning        = ''
     display ' Not_Returning    NULL '
     move ' ' to $Not_Returning
  end-if

  if      &A.SetID_JobCode      = ''
     display ' SetID_JobCode    NULL '
  end-if

  if      $Comment              = ''
     display ' $Comment         NULL '
     move '   ' to $comment
  end-if

begin-SQL

    INSERT INTO PS_ROE VALUES (&A.EmplID,
                               &A.Company,
                               $Wage_Loss_Plan,
                               $Last_Earns_End_Dt,       !  UI_Payable_Dt,
                               0,                        !  ROE_Seq,
                               'H',                      !  ROE_Process
                               ' ',                      !  ROE_NBR,
                               ' ',                      !  ROE_NBR_REPL,
                               $AsOfToday,               !  ROE_Dt,
                               $Multiple_Jobs,
                               &A.PayGroup,
                               &A.JobCode,
                               &A.Action,
                               $Action_Reason,
                               &C.ROE_Issuer_ID,
                               &C.ROE_Contact_ID,
!                              $Alt_contact,            ! Alternate Contact ID
                               $First_Date_Worked,
                               $Last_Date_Worked,
                               $PD_Leave_Start_Dt,       !  PD_Leave_Start_Dt,
                               'D',                      !  PD_Leave_Interval,
                               #Weekly_Rt,               !  PD_Leave_Amt,
                               $Ret_Dt,                  !  Expected_Return_Dt,

#ifndef MICROSOFT
  #ifndef SYBASE
    #ifndef INFORMIX
                               $Not_Returning,
                               0,
                               &A.Business_unit,
                               &A.SetID_JobCode,
                               $ROE_Serial_Num,          !  Web ROE SN
                               $AMEND_ROE_SN,            !  Web ROE Amended SN
                               $PD_Leave_Type,           !  PD_Leave_Type
                               $Comment)
    #else
                               $Not_Returning,
                               0,
                               &A.Business_unit,
                               &A.SetID_JobCode,
                               $ROE_Serial_Num,          !  Web ROE SN
                               $AMEND_ROE_SN,            !  Web ROE Amended SN
                               $PD_Leave_Type,           !  PD_Leave_Type
                               NULL)
                               ! Text datatype not allowed in insert
    #endif
  #else
                               $Not_Returning,
                               0,
                               &A.Business_unit,
                               &A.SetID_JobCode,
                               $ROE_Serial_Num,          !  Web ROE SN
                               $AMEND_ROE_SN,            !  Web ROE Amended SN
                               $PD_Leave_Type,           !  PD_Leave_Type
                               '')
                               ! Text datatype not allowed in insert
  #endif
#else
                               $Not_Returning,
                               0,
                               &A.Business_unit,
                               &A.SetID_JobCode,
                               $ROE_Serial_Num,          !  Web ROE SN
                               $AMEND_ROE_SN,            !  Web ROE Amended SN
                               $PD_Leave_Type,           !  PD_Leave_Type
                               '')
                               ! Text datatype not allowed in insert
#endif

end-SQL

  move &A.EmplID           to  $UpDated_EmplID
  move &A.Company          to  $UpDated_Company
  move $Wage_Loss_Plan     to  $UpDated_Wage_Loss_Plan
  move $Last_Date_Worked   to  $UpDated_UI_Payable_Dt
  move 0                   to  #UpDated_ROE_Seq
  move 'H'                 to  $UpDated_ROE_Process
  move ' '                 to  $UpDated_ROE_NBR

  add 1                    to  #ROECount
end-procedure


begin-procedure Check-ROE-Exists
  move 'N' to $prev-roe-exists

begin-SELECT
UR.EMPLID
UR.ROE_NBR
UR.ROE_DT
UR.COMPANY
UR.UI_PAYABLE_DT
UR.WAGE_LOSS_PLAN
UR.PAYGROUP
UR.ROE_PROCESS

  if &UR.ROE_PROCESS = 'C' or
     &UR.ROE_PROCESS = 'X' or
     &UR.ROE_PROCESS = 'F' or
     &UR.ROE_PROCESS = 'R'
    let $prev-roe-exists = 'Y'
  else
    do Delete-Prev-ROE
    let $prev-roe-exists = 'N'
  end-if

FROM PS_ROE UR
WHERE UR.EMPLID         = &A.EMPLID
  AND UR.COMPANY        = &A.Company
  AND UR.WAGE_LOSS_PLAN = $Wage_Loss_Plan
  AND UR.UI_PAYABLE_DT  = $Last_Earns_End_Dt
  AND UR.ROE_SEQ        = 0


end-SELECT

end-procedure


begin-procedure Delete-Prev-ROE

begin-SQL on-error=Ignore

DELETE
FROM PS_ROE
  WHERE EMPLID         = &A.EmplID
  AND   COMPANY        = &A.Company
  AND   WAGE_LOSS_PLAN = $Wage_Loss_Plan
  AND   UI_PAYABLE_DT  = $Last_Earns_End_Dt
  AND   ROE_SEQ        = 0
  AND   ROE_PROCESS NOT IN ('C', 'X', 'R', 'F')
  AND   ROE_NBR           = ' '
end-SQL

end-procedure


begin-procedure Date-Subtract($Work_Date, :$Date_Out, #Amount)

  let #i = 1

  while #i <= #Amount
    do Decrement-Date($Work_Date, $Date_Out)
    move $Date_Out to $Work_Date
    let #i = #i + 1
  end-while

end-procedure


begin-procedure Decrement-Date($Date_In, :$Date_Out)

  do Date-BreakDown($Date_In, #Work_Year, #Work_Month, #Work_Day)

  move #Work_Month to #Save_Work_Month

  if #Work_Month = 1
    let #Work_Month = 12
  else
    let #Work_Month = #Work_Month - 1
  end-if

  do Month-Days(#Work_Month, #Work_Year, #Work_Month_Days)
  move #Work_Month_Days to  #Work_Prior_Month_Days
  move #Save_Work_Month to #Work_Month

  if #Work_Day - 1 < 1
    let #W_Day = #Work_Prior_Month_Days

    if #Work_Month = 1
      let #W_Month  = 12
      let #W_Year   = #Work_Year - 1
    else
      let #W_Month  = #Work_Month - 1
      let #W_Year   = #Work_Year
    end-if
  else
    let #W_Day      = #Work_Day - 1
    let #W_Month    = #Work_Month
    let #W_Year     = #Work_Year
  end-if

  do Format-Number(#W_Year,  $Work_Year,  '9999')

  let #W_Month = #W_Month + 100
  do Format-Number(#W_Month, $Temp_Month, '999')
  extract $Work_Month from $Temp_Month 1 2

  let #W_Day   = #W_Day   + 100
  do Format-Number(#W_Day,   $Temp_Day,   '999')
  extract $Work_Day   from $Temp_Day   1 2
  let $Date_Out = $Work_Year || $Work_Month || $Work_Day

end-procedure


begin-procedure Date-BreakDown($Date_In, :#Work_Year, :#Work_Month, :#Work_Day)

  let $Work_Year   = substr($Date_In, 1, 4)
  let $Work_Month  = substr($Date_In, 5, 2)
  let $Work_Day    = substr($Date_In, 7, 2)

  let #Work_Year   = $Work_Year
  let #Work_Month  = $Work_Month
  let #Work_Day    = $Work_Day

end-procedure


begin-procedure Month-Days(#Work_Month, #Work_Year, :#Work_Month-Ddays)

  evaluate #Work_Month

      when =  1
      when =  3
      when =  5
      when =  7
      when =  8
      when =  10
      when =  12
          move 31  to  #Work_Month-Ddays
      when =  2
          move 28  to  #Work_Month-Ddays
          do Leap-Days(#Work_Year, #Work_Leap_Days)
          let #Work_Month-Ddays =  #Work_Month-Ddays + #Work_Leap_Days
      when =  4
      when =  6
      when =  9
      when =  11
          move 30  to  #Work_Month-Ddays
      when-other
          move 00  to  #Work_Month-Ddays
  end-evaluate

end-procedure


begin-procedure Leap-Days(#Work_Year, :#work_leap_days)

  let #leap_check = mod(#Work_Year, 4)

  if #leap_check <>  0
      move 0  to  #work_leap_days
  else
    let #leap_check = mod(#Work_Year, 100)

      if #leap_check <>  0
          move 1  to  #Work_leap_days
      else
          let #leap_check = mod(#Work_Year, 400)

          if #leap_check <>  0
            move 0  to  #Work_leap_days
          else
            move 1  to  #Work_leap_days
          end-if
      end-if
  end-if

end-procedure


begin-procedure Report-Create-Exceptions

  print &A.COMPANY               (+1,1)
  print &A.EMPLID                (0,09)
  print &PN.Name                 (0,18,16)
  print &A.EMPL_RCD              (0,36)
  print &A.EMPL_STATUS           (0,42)
  print &A.ACTION                (0,48)
  print $Except_Effdt            (0,56)
  print $Exception_Reason        (0,71) wrap 52 4

end-procedure

begin-procedure Create-Exceptions-Amend-ROE

  print &R.COMPANY               (+1,1)
  print &R.EMPLID                (0,09)
  do Get-Name
  print $Amended_EE_Name         (0,18,16)
  print &R.ACTION                (0,48)
  print $Pay124cn_ROE_Amended_Created (0,71) wrap 52 4

end-procedure


begin-procedure Init-ROE-Fields
  move '   ' to $Comment
end-procedure


begin-procedure Ignore
! dummy procedure to avoid SQL error message
end-procedure


begin-procedure Get-Oth-Pay

 move 0  to #17CEntries
 do Get-FinalPayBeginDt

begin-SELECT
EB.BOX
EB.EFFDT
EB.TAXFORM_ID

  do Get-Oth-Erns

FROM PS_TAXFORM_TBL ET,
     PS_TAXFORM_BOX EB
WHERE ET.TAXFORM_ID = 'E'
  AND ET.EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_TAXFORM_TBL
      WHERE EFFDT <= $AsOfDate
        AND TAXFORM_ID = 'E')
  AND EB.TAXFORM_ID = ET.TAXFORM_ID
  AND EB.EFFDT      = ET.EFFDT
  AND EB.BOX        = '17C'
end-SELECT
end-procedure

begin-procedure Get-FinalPayBeginDt

begin-select
BD.PAY_BEGIN_DT

  move &BD.Pay_Begin_Dt to $FinalPayBeginDt

FROM  PS_PAY_CALENDAR BD
WHERE BD.COMPANY          = &A.Company
  AND BD.PAYGROUP         = &A.PayGroup
  AND BD.PAY_END_DT       = $FinalPayEndDt
ORDER BY BD.PAY_BEGIN_DT DESC
end-SELECT

end-procedure

begin-procedure Get-Oth-Erns

begin-SELECT
O.ERNCD

  add 1 to #17CEntries

FROM  PS_PAY_CHECK     PC,
      PS_PAY_OTH_EARNS  O,
      PS_TAXFORM_ERN   EE,
      PS_PAY_EARNINGS  PR
WHERE PC.COMPANY    = &A.Company
  AND PC.PAYGROUP   = &A.PayGroup
! AND PC.Pay_End_Dt = $FinalPayEndDt
  and PC.EMPLID     = &A.EmplID
  AND O.COMPANY     = PC.COMPANY
  AND O.PAYGROUP    = &A.PayGroup
  AND O.PAY_END_DT  = PC.PAY_END_DT
  AND O.OFF_CYCLE   = PC.OFF_CYCLE
  AND O.PAGE_NUM       = PC.PAGE_NUM
  AND O.LINE_NUM       = PC.LINE_NUM
  AND O.SEPCHK      = PC.SEPCHK
  AND PR.COMPANY    = O.COMPANY
  AND PR.PAYGROUP   = O.PAYGROUP
  AND PR.PAY_END_DT = O.PAY_END_DT
  AND PR.OFF_CYCLE  = O.OFF_CYCLE
  AND PR.PAGE_NUM      = O.PAGE_NUM
  AND PR.LINE_NUM      = O.LINE_NUM
  AND PR.ADDL_NBR      = O.ADDL_NBR
  AND PR.EARNS_BEGIN_DT >=  $FinalPayBeginDt
  AND PR.EARNS_END_DT <=  $FinalPayEndDt
  AND EE.ERNCD      = O.ERNCD
  AND EE.TAXFORM_ID = &EB.TAXFORM_ID
  AND EE.EFFDT      = &EB.EFFDT
  AND EE.BOX        = &EB.BOX
GROUP BY O.ERNCD
end-SELECT

end-procedure


begin-procedure Look-For-Cheques

 move 'N' to $Unconfirmed_cheques

begin-SELECT
UPC.EMPLID
UPC.PAY_END_DT
UPC.PAYGROUP
UPC.CHECK_DT
UPC.TOTAL_GROSS
UPC.NET_PAY

  move 'Y' to $Unconfirmed_cheques

FROM PS_PAY_CHECK UPC
WHERE UPC.EMPLID  =  &A.Emplid
  AND UPC.COMPANY =  &A.Company
  AND UPC.PAYCHECK_STATUS NOT IN ('F','R','A')
  AND UPC.TOTAL_GROSS > 0
end-SELECT

end-procedure

begin-procedure Check-Pay-Frequencies

 if (&IEB.UI_Periods_Per_Yr <> #Previous_PP_Per_Yr)

   evaluate &IEB.UI_Periods_Per_Yr
     when = 12
       move 'Monthly '          to $PayGroup
       break
     when = 24
       move 'Semi-Monthly '     to $PayGroup
       break
     when = 26
       move 'Bi-Weekly '        to $PayGroup
       break
     when = 52
       move 'Weekly '           to $PayGroup
       break
     when-other
       move 'Unknown '          to $PayGroup
   end-evaluate

   if #Previous_PP_Per_Yr <> 0 and $Freq_Switch = 'N'
     move $PayGroup             to $Switch_PayGroup
     do Format-DateTime($Previous_UI_Period_Dt, $PF_Switch_Dt ,{DEFDATE},'','')
     let $Freq_Switch = 'Y'
   end-if

 end-if

 if #Previous_PP_Per_Yr = 0
   move &IEB.UI_Periods_Per_Yr  to #Previous_PP_Per_Yr
   move $PayGroup               to $Previous_PayGroup
 end-if

 move &IEB.UI_PERIOD_DT         to $Previous_UI_Period_Dt

end-procedure


begin-procedure Get-EarnsDate

  evaluate &FT.FREQUENCY_TYPE
    when = 'M'
      let #PayPeriod-Required = 13
      do PayGroup-Pd-CutOff
      break
    when = 'S'
      let #PayPeriod-Required = 25
      do PayGroup-Pd-CutOff
      break
    when = 'W'
      let #PayPeriod-Required = 53
      do PayGroup-Pd-CutOff
      break
    when = 'B'
      let #PayPeriod-Required = 27
      do PayGroup-Pd-CutOff
      break
    when-other
      do Convert-To-DTU-Date($Last_Earns_End_Dt, $EndDate)
      do DTU-subtract-days($EndDate, 365, $EarnsDate)
      do Convert-From-DTU-Date($EarnsDate, $EarnsDate)
  end-evaluate

end-procedure


begin-procedure PayGroup-Pd-CutOff

  let #PayPeriod-Count  = 0

begin-SELECT
PDC.PAY_END_DT

  add 1 to #PayPeriod-Count

  if #PayPeriod-Count = #PayPeriod-Required
    let $EarnsDate    = &PDC.Pay_End_Dt

    EXIT-SELECT

  else
    let $EarnsDate    = &PDC.Pay_End_Dt

  end-if

FROM PS_PAY_CALENDAR PDC

WHERE PDC.COMPANY       = &A.COMPANY
  AND PDC.PAYGROUP      = &A.PAYGROUP
  AND PDC.PAY_END_DT   <= $FinalPayEndDt
ORDER BY PDC.PAY_END_DT DESC

end-SELECT

end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getftdts.sqc'  !Get FromDate and AsOfDate
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Routines for date comparisons
#Include 'reset.sqc'     !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
