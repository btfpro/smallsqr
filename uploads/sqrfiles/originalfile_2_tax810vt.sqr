!***********************************************************************
!  TAX810VT:  Qtrly Wage List - Tape - VERMONT                         *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/06/08:12:49:35                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  702214                                              !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, one or more'
    display 'files will have been created, as follows:'
    display ''
    display '  TAX810VT  contains 275-character records in the ICESA format'
    display '            required for cartridge tape submission to the Vermont'
    display '            Department of Employment and Training.'
    display ''
    display '     or '
    display '  TAX810VT.nnn  contains 275-character records in the ICESA'
    display '            format required for diskette reporting to the Vermont'
    display '            Department of Employment and Training, where "nnn" '
    display '            represents a volume number.'
    display ''
    display 'Follow instructions from the department for preparing and'
    display 'submitting the cartridge tape or diskette.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report


begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization
  move 'TAX810VT' to $ReportID

 if $FileType = 'D'
  move 'Vermont Quarterly UI Wage Report - Diskette' to $ReportTitle
  display ''
  display 'Creating Diskette File for Vermont UI Wage Reporting'
 else
  move 'Vermont Quarterly UI Wage Report - Cartridge Tape' to $ReportTitle
  display ''
  display 'Creating Cartridge Tape File for Vermont UI Wage Reporting'
 end-if

end-procedure


begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'VT'              to $State
#endif
  let $CompanyChange = 'Y'
  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year  to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move &TX.Balance_Qtr   to $QtrCode 09
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure


begin-procedure Open-File

if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810VT' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810VT.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=275:fixed
else
  open '{IMPORTPREFIX}TAX810VT{IMPORTSUFFIX}' as 10 for-writing record=275:fixed_nolf
end-if

end-procedure


begin-procedure Process-Main
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    display ' Company   ' noline
    display   $Company
    stop
  end-if

  do Get-Company-Data !Transmitter identifying data
  do Write-A-Record
  do Write-B-Record

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
M.COMPANY     () on-break print=never AFTER=AFTER-COMPANY-TBL
M.DESCR
M.FEDERAL_EIN
M.ADDRESS1
M.CITY
M.STATE
M.POSTAL
N.HEALTH_CARE_COV

  move &M.Company to $Company
  move &M.Descr   to $CompanyName
  if &M.Company <> $PriorCompany

     move &N.HEALTH_CARE_COV to $Health-Cov
     move &M.Company to $PriorCompany
  else
     if $Health-Cov = 'N' and &N.HEALTH_CARE_COV = 'Y'
       move &N.HEALTH_CARE_COV to $Health-Cov
     end-if
  end-if


FROM  PS_COMPANY_TBL M, PS_CO_STATETAX_TBL N
WHERE M.EFF_STATUS = 'A'
  AND M.TAX_REPORT_TYPE = '2'
  AND M.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = M.COMPANY
       AND  EFFDT  <= $AsOfDate)
   AND M.COMPANY = N.COMPANY
   AND N.STATE = 'VT'
   AND N.EFFDT = (SELECT MAX(N1.EFFDT)
                  FROM PS_CO_STATETAX_TBL N1
                  WHERE N1.COMPANY = N.COMPANY
                    AND N1.STATE   = N.STATE
                    AND N1.EFFDT   <= $AsOfDate
                    AND N1.EFFDT = (SELECT MAX(N2.EFFDT)
                                    FROM PS_CO_STATETAX_TBL N2
                                    WHERE N1.COMPANY = N2.COMPANY
                                      AND N1.STATE   = N2.STATE
                                      AND N2.EFFDT   <= $PeriodBegDate))
ORDER BY M.COMPANY
end-SELECT
  if #Count_F > 0
    do Write-F-Record
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure AFTER-COMPANY-TBL


  move '' to $priorEmplID
  do Read-Employee-Data

end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
C.STATE
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D.SEX

  move &C.EmplID to $EmplID

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSONAL_DT_FST D, PS_PERS_NID D1
WHERE C.COMPANY           = $Company
  AND D.EMPLID            = C.EMPLID
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'VT'
#endif
  AND C.LOCALITY          = ' '
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure


begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move '000000000'     to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID to $NATIONAL_ID
  end-if

  move &D.LAST_NAME            to $LastName
  move &D.FIRST_NAME           to $FirstName
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $FirstName
  uppercase $LastName
  uppercase $MidInitial

  move ' ' to $EmplType
  move 0   to #Hourly_Rt
  move ' ' to $Hire-Date

begin-select
J.EMPL_TYPE
J.HOURLY_RT
J.ACTION
J.EFFDT

  if (&J.EMPL_TYPE = 'E') or (&J.EMPL_TYPE = 'H')
    move 'H' to $EmplType
  else
    move 'S' to $EmplType
  end-if

  move &J.HOURLY_RT to #Hourly_Rt
  move &J.EFFDT to $JEffdt
  if &J.ACTION = 'HIR' and $JEffdt > $PeriodBegDate
    move &J.EFFDT to $Hire-Date
  end-if

 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID
  AND J.COMPANY  = $Company
  AND J.EMPL_RCD     =
      (SELECT MAX(EMPL_RCD)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND EMPL_RCD  = J.EMPL_RCD
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND EMPL_RCD  = J.EMPL_RCD
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select

  let $Hlth-Cov-Ind = ' '
  if $Hire-Date > ' '
     let $SelectBegDate = $Hire-Date
  else
     let $SelectBegDate = $PeriodBegDate
  end-if

begin-select
L.EFFDT
L.HLTH_COV_IND
L.EMPLID

  if $Hlth-Cov-Ind = ' '
    let $Hlth-Cov-Ind = &L.HLTH_COV_IND
  else
    if $Health-Cov = 'Y' and &L.HLTH_COV_IND = 'A'
      let $Hlth-Cov-Ind = &L.HLTH_COV_IND
    else
      if $Health-Cov = 'Y'  and  &L.HLTH_COV_IND = 'B'
                            and ($Hlth-Cov-Ind <> 'B'
                            and  $Hlth-Cov-Ind <> 'A')
          let $Hlth-Cov-Ind = &L.HLTH_COV_IND
      else
        if $Health-Cov = 'Y' and &L.HLTH_COV_IND = 'C'
                           and  $Hlth-Cov-Ind = 'D'
          let $Hlth-Cov-Ind = &L.HLTH_COV_IND
        end-if
      end-if
    end-if
  end-if

FROM PS_STATE_TAX_DATA L
WHERE L.EMPLID = $EmplID
  AND L.COMPANY = $Company
  AND L.EFFDT  IN (SELECT EFFDT
                  FROM PS_STATE_TAX_DATA
                    WHERE EMPLID  = L.EMPLID
                      AND COMPANY = L.COMPANY
                      AND EFFDT   <= $AsOfDate
                      AND EFFDT   >= (SELECT MAX(L1.EFFDT)
                  FROM PS_STATE_TAX_DATA L1
                    WHERE L1.EMPLID  = L.EMPLID
                      AND L1.COMPANY = L.COMPANY
                      AND L1.EFFDT   <= $SelectBegDate))

  AND L.STATE  = $State
  ORDER BY L.EFFDT DESC

END-SELECT

  let $Sex = RTRIM(&D.SEX,' ')
  if ($Sex <> 'F') and ($Sex <> 'M')
    move ' ' to $Sex
  end-if

#ifdef TAXTEST
  move 'CA' to $State
#endif

  move 'PS_RC_TAX810VT D'  to $TAX810X1
  move 'PS_RC_TAX810VT D1' to $TAX810X2
  move 'PS_RC_TAX810VT D2' to $TAX810X3
  move 'PS_RC_TAX810VT D3' to $TAX810X4
  do Get-Hours
  if #Hours > 520
     move 520 to #Hours
  end-if
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

  if $Health-Cov = 'N'
     if $Hlth-Cov-Ind <> 'S'
      move 'N' to $Hlth-Cov-Ind
     end-if
  end-if

  Evaluate $Hlth-Cov-Ind
    when = 'A'
      add #Hours to #HC-Elig
      let $Coverage-Message = 'A - Eligible and covered              '
      break
    when = 'B'
      add #Hours to #HC-Elig-Covered-Elsewhere
      let $Coverage-Message = 'B - Eligible, does not elect, has other coverage    '
      break
    when = 'C'
      add #Hours to #HC-Elig-Not-Covered
      let $Coverage-Message = 'C - Eligible, does not elect, no coverage            '
      break
    when = 'D'
      add #Hours to #HC-Not-Elig
      let $Coverage-Message = 'D - Not Eligible                                     '
      break
    when = 'S'
      add #Hours to #HC-Seasonal
      let $Coverage-Message = 'S - Seasonal                                       '
      break
    when = 'N'
      add #Hours to #HC-Not-Applicable
      let $Coverage-Message = 'N - Not Applicable                                 '
      break
  end-evaluate

  if $RC_QTR_UI.Rpt_Totals_Only = 'N'
    Let $FullName = rtrim($LastName, '  ') || ',' || rtrim($FirstName, ' ') || rtrim($MidInitial,' ')
    print $NATIONAL_ID                 (+2,1,11)
    print $FullName                     (0,17,40)
    print #Hours                        (,45) edit 999,999,999.99mi
    print $Coverage-Message             (0,67,60)
  end-if

  ADD #Hours TO #TOT_HOURS
  ADD #Hours TO #SUB_HOURS

  move &C.NlGrs_QTD  to #NlGrs_QTD
  add #NlGrs_QTD     to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD

  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  do Write-S-Record
  add 1 to #Count_R

end-procedure


begin-procedure Before-Company
  do Get-Company-Data
  let $CompanyChange = ' '

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  let $StateSUT = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateSUT,'-',1) <> 0
    let #Hyphen = INSTR($StateSUT,'-',1)
    if #Hyphen > 0
      let $StateSUT = SUBSTR($StateSUT,1,(#Hyphen - 1)) ||
                      SUBSTR($StateSUT,(#Hyphen + 1),7)
    end-if
  end-while
  while INSTR($StateSUT,' ',1) <> 0
    let #Spaces = INSTR($StateSUT,' ',1)
    if #Spaces > 0
      let $StateSUT = SUBSTR($StateSUT,1,(#Spaces - 1)) ||
                      SUBSTR($StateSUT,(#Spaces + 1),7)
    end-if
  end-while

  move $StateSUT to $StateSUT 0999999

  if $StateSUT = '*******'
    display '*** State Unemployment ID # too large in Company State Tax   ***'
    display '*** Table. Format is 0999999                                 ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  do Write-E-Record
end-procedure


begin-procedure After-Company

  do Print-Summary-Data('CoTotal')


  print '** NOTE: The QTD User-defined Hours represent hours for earnings codes specified on the Run Control Page.**'     (+2,27)

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Count_S to #Count_F

  if #Count_S > 0
    do Write-T-Record
  end-if

  add #Count_R to #Count_R_Total
  move 0 to #Co_NlGrs_QTD
  move 0 to #Count_S
  move 0 to #Count_R
  move 0 to #HC-Elig
  move 0 to #HC-Elig-Covered-Elsewhere
  move 0 to #HC-Elig-Not-Covered
  move 0 to #HC-Not-Elig
  move 0 to #HC-Seasonal
  move 0 to #HC-Not-Applicable
  new-page
end-procedure


begin-procedure Write-A-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  move $CompnyAdd1     to $TransmitterAddress
  move $CompnyCity     to $TransmitterCity
  move &CT.State       to $TransmitterState
  move &CT.Postal      to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  !Format date in MMDDYY format...
  do Format-Datetime($AsOfToday, $WorkDt, {DEFCMP}, '', '')
  let $TapeCreateDate = Substr($WorkDt, 5, 2) || Substr($WorkDt, 7, 2)
                     || Substr($WorkDt, 1, 4)

     write 10 from 'A':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
                'UTAX':4     !Col  15 -  18
                   $Sp:5     !Col  19 -  23
      $TransmitterName:50    !Col  24 -  73
   $TransmitterAddress:40    !Col  74 - 113
      $TransmitterCity:25    !Col 114 - 138
     $TransmitterState:2     !Col 139 - 140
                   $Sp:13    !Col 141 - 153
                  $Zip:5     !Col 154 - 158
             $ZipExtsn:5     !Col 159 - 163
   $TransmitterContact:30    !Col 164 - 193
     $TransmitterPhone:10    !Col 194 - 203
  $TransmitterPhoneExt:4     !Col 204 - 207
      $AuthorizationCd:6     !Col 208 - 213
                   $Sp:29    !Col 214 - 242
       $TapeCreateDate:8     !Col 243 - 250
                   $Sp:25    !Col 251 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Write-B-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

     write 10 from 'B':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
         $Computer_Mfr:8     !Col  15 -  22
           $Tape_Label:2     !Col  23 -  24
                   $Sp:1     !Col  25
              $Density:2     !Col  26 -  27
         $Recording_Cd:3     !Col  28 -  30
               $Tracks:2     !Col  31 -  32
      $Blocking_Factor:2     !Col  33 -  34
                'UTAX':4     !Col  35 -  38
                   $Sp:108   !Col  39 - 146
      $TransmitterName:44    !Col 147 - 190
   $TransmitterAddress:35    !Col 191 - 225
      $TransmitterCity:20    !Col 226 - 245
     $TransmitterState:2     !Col 246 - 247
                   $Sp:5     !Col 248 - 252
                  $Zip:5     !Col 253 - 257
             $ZipExtsn:5     !Col 258 - 262
                   $Sp:13    !Col 263 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Write-E-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompanyName    to $TransmitterName
  uppercase $TransmitterName

     write 10 from 'E':1     !Col   1
      &TX.Balance_Year:4     !Col   2 -   5
               $FedEIN:9     !Col   6 -  14
                   $Sp:9     !Col  15 -  23
      $TransmitterName:50    !Col  24 -  73
                   $Sp:93    !Col  74 - 166
                'UTAX':4     !Col 167 - 170
                  'VT':2     !Col 171 - 172
             $StateSUT:7     !Col 173 - 179
                   $Sp:8     !Col 180 - 187
          $QtrEndMonth:2     !Col 188 - 189
                   $Sp:86    !Col 190 - 275

     add 1 to #Count_E
  add 1 to #RecordCount

end-procedure


begin-procedure Write-S-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  multiply 100 times #Hourly_Rt
  move #Hourly_Rt   to $Hourly_Rt 099999

  if $EmplType <> 'H'
    move '000000' to $Hourly_Rt
  end-if

  write 10 from 'S':1        !Col   1
       $NATIONAL_ID:9        !Col   2 -  10
          $LastName:20       !Col  11 -  30
         $FirstName:12       !Col  31 -  42
        $MidInitial:1        !Col  43
               'VT':2        !Col  44 -  45
       $QtrEndMonth:2        !Col  46 -  47
           $RptYear:2        !Col  48 -  49
         $NlGrs_QTD:14       !Col  50 -  63
                $Sp:79       !Col  64 - 142
             'UTAX':4        !Col 143 - 146
                $Sp:8        !Col 147 - 154
          $StateSUT:7        !Col 155 - 161
                $Sp:71       !Col 162 - 232
          $EmplType:1        !Col 233
               $Sex:1        !Col 234
                $Sp:4        !Col 235 - 238
         $Hourly_Rt:6        !Col 239 - 244
                $Sp:31       !Col 245 - 275

  add 1 to #Count_S
  add 1 to #Tot_Count_S
  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  add 1 to #RecordCount

  move 'Y' to $RecordWritten

end-procedure


begin-procedure Write-T-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  move #Count_S      to $Count_S 0999999
  multiply 100 times    #Co_NlGrs_QTD
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999

  write 10 from 'T':1        !Col   1
           $Count_S:7        !Col   2 -   8
             'UTAX':4        !Col   9 -  12
      $Co_NlGrs_QTD:14       !Col  13 -  26
                $Sp:249      !Col  27 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Write-F-Record

  if ($FileType = 'D') and (#RecordCount >= #MaxRecordsPerDiskette)
       do Open-File
  end-if

  move #Tot_Count_S   to $Tot_Count_S 0999999999
  move #Count_E       to $Count_E 0999999999
  move #Tot_NlGrs_QTD to #F_NlGrs_QTD
  multiply 100 times     #F_NlGrs_QTD
  move #F_NlGrs_QTD   to $F_NlGrs_QTD 099999999999999

  write 10 from 'F':1        !Col   1
       $Tot_Count_S:10       !Col   2 -  11
           $Count_E:10       !Col  12 -  21
             'UTAX':4        !Col  22 -  25
       $F_NlGrs_QTD:15       !Col  26 -  40
                $Sp:235      !Col  41 - 275

  add 1 to #RecordCount

end-procedure


begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Cartridge or diskette file? (C, D or Q to quit)'
    uppercase $FileType
    if INSTR('DCQ',$FileType,1) = 0
      display ' '
      display '***** Enter D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while

  if $FileType = 'C'
    display 'Enter Transmitter Contact Information:'
    input $TransmitterContact  maxlen=30 '  Contact name (30 char max)'
    input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
    input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'
    input $AuthorizationCd     maxlen=6  '  Authorization Code'
  end-if

end-procedure


begin-procedure Convert-Parameters
  move $RC_QTR_UI.Contact_Person     to $TransmitterContact
  move $RC_QTR_UI.Contact_Phone      to $TransmitterPhone
  move $RC_QTR_UI.Contact_Phone_Ext  to $TransmitterPhoneExt

  unstring  $TransmitterPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $TransmitterPhone = $str1 || $str3 || $str4

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
  move #RC_QTR_UI.Remitter_Number  to $AuthorizationCd  099999
end-procedure


begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd      to $Recording_Cd
      break

    when = 'T'
      display ''
      display 'Select Diskette or Cartridge as Reporting Medium for State of Vermont.'
      display ''
      display '*** Invalid Tape Reporting Medium specified in the run control ***'
      display '************************ Processing stopped **********************'
      stop
      break

    when = 'C'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move &TX.Blocking_Factor   to $Blocking_Factor 09
      move 'MC'                  to $FilingType
      move '18'                  to $Tracks

end-evaluate
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'gethours.sqc'  !Get-Hours procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
