!***********************************************************************
!  PER040GR: Errechnung des Arbeits- und Pflichtplätze sowie           *
!            der zu zahlenden Ausgleichsabgabe                         *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!----------------------------------------------------------------------
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      
!          $Date:  2006/07/19:14:41:41                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

!----------------------------------------------------------------
begin-procedure Init-Layout

#define col0    1
#define col1    10
#define col2    20
#define col3    30
#define col4    40
#define col5    50
#define col6    60
#define col7    70
#define col8    80
#define col9    90
#define col10   100
#define col11   110
#define col12   120
#define col13   130
#define col14   140
#define col15   150
#define col16   160

end-procedure

!----------------------------------------------------------------
begin-heading 12

  #Include 'stdhdg01.sqc'

  print $Year        (0,0) center
  print 'Standort: ' (+1,{col0},1)
  print $Location    (0,+2,1)
  print $LocDescr    (0,+2)

  print '1. Arbeitsplätze und Pflichtplätze (Anzahl)'                    (+2,{col1},49)
  print '2. Anrechenbare Personenguppen/Besetzte Arbeitsplätze (Anzahl)' (0,{col6},99)
  print '3. Ausgleich-'                                                  (0,{col16})
  print '   abgabe'                                                      (+1,{col16})

  print '-SOLL-'     (+2,{col5},89)
  print '-IST-'      (0,{col14})

  print 'Monat'      (+2,{col0},8)
  print '  1  '      (0,{col1},9)
  print '  2  '      (0,{col2},9)
  print '  3  '      (0,{col3},9)
  print '  4  '      (0,{col4},9)
  print '  5  '      (0,{col5},9)
  print '  6  '      (0,{col6},9)
  print '  7  '      (0,{col7},9)
  print '  8  '      (0,{col8},9)
  print '  9  '      (0,{col9},9)
  print ' 10  '      (0,{col10},9)
  print ' 11  '      (0,{col11},9)
  print ' 12  '      (0,{col12},9)
  print ' 13  '      (0,{col13},9)
  print ' 14  '      (0,{col14},9)
  print ' 15  '      (0,{col15},9)
  print ' 16  '      (0,{col16})

end-heading
!----------------------------------------------------------------
begin-footing 5

print '__________'                                (+1,{col16})
print 'a) Ausgleichsabgabe von Januar - Dezember' (+1,{col8},79)
print #sum_total                                  (0,{col16}) edit 999999

end-footing

!----------------------------------------------------------------
begin-procedure Init-Report

  move 'PER040GR' to $ReportID
  move 'Errechnung des Arbeits- und Pflichtplätze sowie der zu zahlenden Ausgleichsabgabe' to $ReportTitle

  display $ReportTitle
  do Stdapi-Init

  if $prcs_process_instance = ''

    !No Prompt

  else

    do Select-Parameters

  end-if

  #define page-len 55

 move #YEAR to $year

 let $year = substr($year, 1, 4)
 let $Out = $year || '12' || '31' || '000000'

 do Format-DateTime($Out, $End_Year,{DEFCMP},'','native')

 show '$END_YEAR ' $End_Year

end-procedure

!----------------------------------------------------------------
begin-procedure Get-Values

  let #YEAR = &RUN_CNTL_HR.CALENDAR_YEAR
  let $CALENDAR_YEAR = &RUN_CNTL_HR.CALENDAR_YEAR
  let $CALENDAR_YEAR = substr($CALENDAR_YEAR, 1, 4)

end-procedure

!----------------------------------------------------------------
begin-procedure Process-Main

#debug show '->Process-Main'

let #sum_col1 = 0
let #sum_col2 = 0
let #sum_col3 = 0
let #sum_col4 = 0
let #sum_col5 = 0
let #sum_col6 = 0
let #sum_col7 = 0
let #sum_col8 = 0
let #sum_col9 = 0
let #sum_col10 = 0
let #sum_col11 = 0
let #sum_col12 = 0
let #sum_col13 = 0
let #sum_col14 = 0
let #sum_col15 = 0
let #sum_col16 = 0
let #sum_total = 0

begin-SELECT

LT.SETID
LT.LOCATION
LT.DESCR


   let $Location = rtrim(&LT.LOCATION,' ')
   let $Setid = rtrim(&LT.SETID,' ')
   let $LocDescr = rtrim(&LT.DESCR,' ')
   display $locDescr

   !January

   let $Month = 'Jan.'
   let $Out = $year || '01' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '01' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !February

   let $Month = 'Feb.'
   let $Out = $year || '02' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '02' || '28' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !March

   let $Month = 'März'
   let $Out = $year || '03' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '03' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !April

   let $Month = 'April'
   let $Out = $year || '04' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '04' || '30' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !May

   let $Month = 'Mai'
   let $Out = $year || '05' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '05' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !June

   let $Month = 'Juni'
   let $Out = $year || '06' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '06' || '30' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !July

   let $Month = 'Juli'
   let $Out = $year || '07' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '07' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !August

   let $Month = 'Aug.'
   let $Out = $year || '08' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '08' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !September

   let $Month = 'Sept.'
   let $Out = $year || '09' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '09' || '30' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !October

   let $Month = 'Okt.'
   let $Out = $year || '10' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '10' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !November

   let $Month = 'Nov.'
   let $Out = $year || '11' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '11' || '30' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   !December

   let $Month = 'Dez.'
   let $Out = $year || '12' || '01' || '000000'
   do Format-DateTime($Out, $Begin_Mth,{DEFCMP},'','native')
   let $Out = $year || '12' || '31' || '000000'
   do Format-DateTime($Out, $End_Mth,{DEFCMP},'','native')
   do count-employees
   do print-data

   new-page

   let #sum_total = 0



FROM PS_LOCATION_TBL LT

WHERE EXISTS (
              SELECT 'X'
              FROM PS_JOB J1
              WHERE J1.SETID_LOCATION = LT.SETID
              AND   J1.LOCATION = LT.LOCATION
              AND   J1.EFFDT = (
                                SELECT MAX(EFFDT)
                                FROM PS_JOB J2
                                WHERE J2.EMPLID = J1.EMPLID
                                AND   J2.EMPL_RCD = J1.EMPL_RCD
                                AND   J2.EFFDT <= $End_Year
                               )
                      AND   J1.EFFSEQ =(
                                SELECT MAX(EFFSEQ)
                                FROM PS_JOB J3
                                WHERE J3.EMPLID = J1.EMPLID
                                AND   J3.EMPL_RCD = J1.EMPL_RCD
                                AND   J3.EFFDT = J1.EFFDT
                               )
              AND   'A' = (
                           SELECT J4.EMPL_STATUS
                           FROM PS_JOB J4
                           WHERE J4.EMPLID = J1.EMPLID
                           AND   J4.EMPL_RCD = J1.EMPL_RCD
                           AND   J4.EFFDT = J1.EFFDT
                           AND   J4.EFFSEQ = J1.EFFSEQ
                          )
                        )
AND LT.EFFDT = (
                SELECT MAX(EFFDT)
                                FROM PS_LOCATION_TBL LT1
                                WHERE LT1.SETID = LT.SETID
                                AND   LT1.LOCATION = LT.LOCATION
                                AND   LT1.EFFDT <= $End_Year
                           )
ORDER BY LT.SETID,LT.LOCATION

end-select

#debug show '<-Process-Main'

end-procedure


!****************************************************************
!Get all employees for the Location which were still active at  *
!the begin of the month                                         *
!****************************************************************
begin-procedure count-employees

#debug show '-> count-employees'

begin-SELECT

JOB.EMPLID
JOB.EMPL_RCD
JOB.EFFDT


   let $Emplid = rtrim(&JOB.EMPLID,' ')
   let #EmplRcdNbr = &JOB.EMPL_RCD
   let $Effdt = &JOB.EFFDT

   do Get-Empl-Category


FROM PS_JOB JOB


WHERE JOB.LOCATION = $Location
AND   JOB.SETID_LOCATION =  $Setid
AND   JOB.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_JOB J1
                   WHERE J1.EMPLID = JOB.EMPLID
                   AND   J1.EMPL_RCD = JOB.EMPL_RCD
                   AND   J1.EFFDT <= $Begin_Mth
                  )
AND   JOB.EFFSEQ = (
                    SELECT MAX(EFFSEQ)
                    FROM PS_JOB J2
                    WHERE J2.EMPLID = JOB.EMPLID
                    AND   J2.EMPL_RCD = JOB.EMPL_RCD
                    AND   J2.EFFDT = JOB.EFFDT
                   )
AND  'A' = (
            SELECT J3.EMPL_STATUS
            FROM PS_JOB J3
            WHERE J3.EMPLID = JOB.EMPLID
            AND   J3.EMPL_RCD = JOB.EMPL_RCD
            AND   J3.EFFDT = JOB.EFFDT
            AND   J3.EFFSEQ = JOB.EFFSEQ
           )

end-select


#debug show '<-count-employees'

end-procedure count-employees

!******************************************************************
!Get the Employee Category the employee has at the end of the month
!******************************************************************
begin-procedure Get-Empl-Category

#debug show '->Get-Empl-Category'

begin-SELECT

JL.EMPL_CTG

 let $EmplCat = rtrim(&JL.EMPL_CTG,' ')

 if $EmplCat <> '004' or
    $EmplCat <> '006' or
    $EmplCat <> '007'

    let  #sum_col1 = #sum_col1 + 1

 end-if
 if $EmplCat = '003'

    let #sum_col2 = #sum_col2 + 1

 end-if

 do Get-Disability-Info

FROM PS_JOB JL

WHERE JL.EMPLID = $Emplid
AND   JL.EMPL_RCD = #EmplRcdNbr
AND   JL.EFFDT = (
                  SELECT MAX(EFFDT)
                  FROM PS_JOB JL1
                  WHERE JL1.EMPLID = JL.EMPLID
                  AND   JL1.EMPL_RCD = JL.EMPL_RCD
                  AND   JL1.EFFDT <= $Begin_Mth
                 )
AND   JL.EFFSEQ = (
                   SELECT MAX(EFFSEQ)
                   FROM PS_JOB JL2
                   WHERE JL2.EMPLID = JL.EMPLID
                   AND   JL2.EMPL_RCD = JL.EMPL_RCD
                   AND   JL2.EFFDT = JL.EFFDT
                  )

end-select

#debug show '<-Get-Empl-Category'

end-procedure Get-Empl-Category
!*******************************************************************
!Get the disability information which is valid at the end of the
!Month
!*******************************************************************
begin-procedure Get-Disability-Info

#debug show '->Get-Disability-Info'

begin-SELECT

DG.DISABLED_TYPE,
DG.DISABLED_POSN_CNT


   let $Disabled_Type = &DG.DISABLED_TYPE
   let #Disabled_Posn_Cnt = &DG.DISABLED_POSN_CNT

   if $Disabled_Type <> '4'

      let #sum_col6 = #sum_col6 + 1

      if $EmplCat = '003'
         let #sum_col7 = #sum_col7 +1
      end-if

   else

      let #sum_col9 = #sum_col9 + 1

      if $EmplCat = '003'
         let #sum_col10 = #sum_col10 +1
      end-if

   end-if

   if #Disabled_Posn_Cnt > 1

      let #sum_col13 = #sum_col13 + #Disabled_Posn_Cnt - 1

   end-if


FROM PS_DISABILITY_GER DG

WHERE DG.EMPLID = $Emplid
AND   DG.EFFDT = (
                  SELECT MAX(EFFDT)
                  FROM PS_DISABILITY_GER DG1
                  WHERE DG1.EMPLID = DG.EMPLID
                  AND   DG1.EFFDT <= $Begin_Mth
                 )
AND   'N' <> (
            SELECT DG2.DISABLED_TYPE
            FROM PS_DISABILITY_GER DG2
            WHERE DG2.EMPLID = DG.EMPLID
            AND   DG2.EFFDT = DG.EFFDT
           )

end-select


#debug show '<-Get-Disability-Info'

end-procedure Get-Disability-Info

!*******************************************************************
begin-procedure print-data

#debug show '->print-data'

print $Month    (+2,{col0},8)
print #sum_col1 (0,{col1},9)  edit 999999
print #sum_col2 (0,{col2},9)  edit 999999
print #sum_col3 (0,{col3},9)  edit 999999

let #sum_col4 = #sum_col1 - #sum_col2 - #sum_col3
print #sum_col4 (0,{col4},9)  edit 999999

if #sum_col4 > 15
   let #sum_col5 = #sum_col4 * 0.06
   do ps_sqr_Round (#sum_col5, 0, #sum_col5)
end-if
print #sum_col5 (0,{col5},9) edit 999999
print #sum_col6 (0,{col6},9) edit 999999
print #sum_col7 (0,{col7},9) edit 999999

let #sum_col8 = #sum_col6 - #sum_col7
print #sum_col8 (0,{col8},9) edit 999999
print #sum_col9 (0,{col9},9) edit 999999
print #sum_col10 (0,{col10},9) edit 999999

let #sum_col11 = #sum_col9 - #sum_col10
print #sum_col11 (0,{col11},9) edit 999999
print #sum_col12 (0,{col12},9) edit 999999
print #sum_col13 (0,{col13},9) edit 999999

let #sum_col14 = #sum_col6 + #sum_col9 + #sum_col12 + #sum_col13
print #sum_col14 (0,{col14},9) edit 999999

let #sum_col15 = #sum_col5 - #sum_col14
print #sum_col15 (0,{col15},9) edit 999999

let #sum_col16 = #sum_col15 * 200
print #sum_col16 (0,{col16},9) edit 999999

let #sum_total = #sum_total + #sum_col16

let #sum_col1 = 0
let #sum_col2 = 0
let #sum_col3 = 0
let #sum_col4 = 0
let #sum_col5 = 0
let #sum_col6 = 0
let #sum_col7 = 0
let #sum_col8 = 0
let #sum_col9 = 0
let #sum_col10 = 0
let #sum_col11 = 0
let #sum_col12 = 0
let #sum_col13 = 0
let #sum_col14 = 0
let #sum_col15 = 0
let #sum_col16 = 0


#debug show '<-Print-Data'


end-procedure Print-Data
!----------------------------------------------------------------
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !SQR date arithmetic procedures
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Rountines to Update Run Status
#Include 'getcodta.sqc'  !Get selected fields from the Company Table
#Include 'getlocnm.sqc'  !Get Location Name from the Location Table
#Include 'getdptnm.sqc'  !Get Department Name from the Department Table

