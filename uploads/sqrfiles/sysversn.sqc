! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSVERSN: PS PSVERSION Version Check Report
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! $Header:: /pt_reporting/SQR/sysversn.sqc /main/pt84x/15 13-Apr-2003. *
!                                                                      *
! Modifications                                                        *    
! ClearCase:\pt_reporting\SQR\sysversn.sqc@@\main\pt84x\18 10/31/2005  *
!***********************************************************************

begin-procedure SYSVERSN-Main 
    
    #ifndef KEYDEFS_MAX_SIZE
        #define KEYDEFS_MAX_SIZE 20
        #define VALUE_COLUMN_PRINTPOS 40
    #endif
   
    let #totalkeys = 0  
    let $objId =''  
   
    create-array name=keydefs size= {KEYDEFS_MAX_SIZE} 
        Field=fldname:char  
        Field=fldlen:number 
        Field=fldtype:char
        Field=fldname1:char 
    
    let $ErrorFound = 'N'
    let $AuditTitle = 'Version Check Audits'     
    
 !   print $AuditTitle (+2,1 )  
    let #_rowstoadd =  0
    
    
 ! to add a version validation for a new managed table use a following sysntax:
 ! do CheckVersion( 'TABLE_NAME' , 'PSVERSION_OBJECT_NAME')
 ! Validation should be performed for both Managed table and Managed 'Delete' table
    
!************** Managed   tables    ********************    
    
    do CheckVersion( 'PSPNLDEFN'           ,'PDM'    )              
    do CheckVersion( 'PSRECDEFN'           ,'RDM'    )               
    do CheckVersion( 'PSXLATDEFN'          ,'XTM'    )               
    do CheckVersion( 'PSMENUDEFN'          ,'MDM'    )               
    do CheckVersion( 'PSTREESTRCT'         ,'TSM'    )               
    do CheckVersion( 'PSTREEDEFN'          ,'TDM'    )               
    do CheckVersion( 'PSQRYDEFN'           ,'QDM'    )               
    do CheckVersion( 'PSSTYLEDEFN'         ,'SDM'    )               
    do CheckVersion( 'PSCOLORDEFN'         ,'CDM'    )               
    do CheckVersion( 'PSTOOLBARDEFN'       ,'TBM'    )               
!   do CheckVersion( 'PSHOMEPAGEDEFN'      ,'HPM'    )               
    do CheckVersion( 'PSBUSPROCDEFN'       ,'BPM'    )               
    do CheckVersion( 'PSACTIVITYDEFN'      ,'ACM'    )               
    do CheckVersion( 'PSPROJECTDEFN'       ,'PJM'    )               
    do CheckVersion( 'PSFMTDEFN'           ,'FDM'    )               
    do CheckVersion( 'PSPNLGRPDEFN'        ,'PGM'    )               
    do CheckVersion( 'PS_SCHDLDEFN'        ,'PSC'    )               
    do CheckVersion( 'PS_PRCSRECUR'        ,'PSR'    )               
    do CheckVersion( 'PSPACKAGEDEFN'       ,'APM'    )               
    do CheckVersion( 'PSMSGDEFN'           ,'MSDM'   )               
    do CheckVersion( 'PSCHNLDEFN'          ,'CHDM'   )               
    do CheckVersion( 'PSMSGNODEDEFN'       ,'MNDM'   )               
    do CheckVersion( 'PSSUBDEFN'           ,'SUDM'   )               
    do CheckVersion( 'PSAEAPPLDEFN'        ,'AEM'    )               
    do CheckVersion( 'PSAESECTDEFN'        ,'AES'    )               
    do CheckVersion( 'PSSQLDEFN'           ,'SRM'    )               
    do CheckVersion( 'PSIODEFN'            ,'IOM'    )               
    do CheckVersion( 'PSFLDDEFN'           ,'FLM'    )               
    do CheckVersion( 'PSBCDEFN'            ,'BCM'    )               
    do CheckVersion( 'PS_APPR_RULE_HDR'    ,'VAM'    )                
    do CheckVersion( 'PSMSGSETDEFN'        ,'PPC'    )               
    do CheckVersion( 'PS_SET_CNTRL_TBL'    ,'PPC'    )               
    do CheckVersion( 'PS_PRCSDEFN'         ,'PPC'    )               
    do CheckVersion( 'PS_SERVERDEFN'       ,'PPC'    )               
    do CheckVersion( 'PS_PRCSTYPEDEFN'     ,'PPC'    )               
    do CheckVersion( 'PS_PRCSJOBDEFN'      ,'PPC'    )              
    do CheckVersion( 'PSDBFIELD'           ,'RDM'    )           
    do CheckVersion( 'PSCONTDEFN'          ,'CRM'    )           
    do CheckVersion( 'PSSTYLSHEETDEFN'     ,'SSM'    )           
    do CheckVersion( 'PSCLASSDEFN'         ,'CLM'    )           
    do CheckVersion( 'PSOPRDEFN'           ,'UPM'    )           
    do CheckVersion( 'PSURLDEFN'           ,'PPC'    )              
    do CheckVersion( 'PSPRDMDEFN'          ,'PRDM'   )           
    do CheckVersion( 'PSPRSMDEFN'          ,'PRSM'   )           
    do CheckVersion( 'PSPRUHDEFN'          ,'PRUH'   )              
    do CheckVersion( 'PSOPTPRBTYPE'        ,'PBM'    )           
    do CheckVersion( 'PSMPDEFN'            ,'MPM'    )           
    do CheckVersion( 'PS_ARCH_PROJ'        ,'ATM'    )              
    do CheckVersion( 'PSPRUFDEFN'          ,'PRUF'   )           
    do CheckVersion( 'PSGATEWAY'           ,'GTM'    )           
    do CheckVersion( 'PSNODETRX'           ,'NTM'    )           
    do CheckVersion( 'PSRELATIONSHIP'      ,'RSM'    )              
    do CheckVersion( 'PSRELATIONTRX'       ,'RSTM'   )              
    do CheckVersion( 'PSNODETRX'           ,'TMM'    )           
    do CheckVersion( 'PSSCDICTDEFN'        ,'PPC'    )              
    do CheckVersion( 'PSOPTMODEL'          ,'MMDM'   )           
    do CheckVersion( 'PSFILEREDEFN'        ,'FRM'    )           
    do CheckVersion( 'PSTYPECODEDEFN'      ,'TYC'    )              
    do CheckVersion( 'PSARCHOBJDEFN'       ,'ARCOM'  )           
    do CheckVersion( 'PSARCHTEMPLATE'      ,'ARCTM'  )           
    do CheckVersion( 'PSDIAGREG'           ,'DIAGM'  )              
    do CheckVersion( 'PSROLEDEFN'          ,'ROLM'   )           
    do CheckVersion( 'PSACEMDLDEFN'        ,'BMM'    )           
    do CheckVersion( 'PSJPUPDEFN'          ,'JPUP'   )           
    do CheckVersion( 'PSWSRPPRDDEFN'       ,'WSPRD'  )           
    do CheckVersion( 'PSWSRPPLTDEFN'       ,'WSPLT'  )           
    do CheckVersion( 'PSWSRPCPHDEFN'       ,'WSCPH'  ) 
    do CheckVersion( 'PSPCMPROG'           ,'PCM'    )      
    
      !new managers  added in  8.48   
            
    do CheckVersion( 'PSQUEUEDEFN'         ,'QUEM'   )        
    do CheckVersion( 'PSOPERATION'         ,'OPRM'   )        
    do CheckVersion( 'PSOPRVERDFN'         ,'OPRVM'  )       
    do CheckVersion( 'PSOPRHDLR'           ,'OPRHM'  )          
    do CheckVersion( 'PSIBRTNGDEFN'        ,'RTDM'   )          
    do CheckVersion( 'PSSERVICE'           ,'SRVM'   )       
    do CheckVersion( 'PSXPTMPLDEFN'        ,'XTRDM'  )           
    do CheckVersion( 'PSXPDATASRC'         ,'XPDSM'  )           
    do CheckVersion( 'PSXPRPTDEFN'         ,'XRRDM'  ) 
    do CheckVersion( 'PSFILEDEFN'          ,'FILEM'  ) 
    
      !new managers  added in  8.50   
            
    do CheckVersion( 'PSCONQRSDEFN'        ,'CQDM'   )        
    do CheckVersion( 'PSIBWSDLDFN'         ,'WSDL'   )        
    do CheckVersion( 'PSIBSCMADFN'         ,'SCMA'   )        

      !new managers  added in  8.52

    do CheckVersion( 'PSFP_FEED'        ,'FDFM'   )        
    do CheckVersion( 'PSFP_CATEGORY'    ,'FCATM'  )        
    do CheckVersion( 'PSFP_DATATYPE'    ,'FDTM'   )        
    
    
!************** Managed 'Delete' tables ***************

    do CheckVersion( 'PSPNLDEL'            ,'PDM'    )             
    do CheckVersion( 'PSRECDEL'            ,'RDM'    )           
    do CheckVersion( 'PSXLATDEFNDEL'       ,'XTM'    )           
    do CheckVersion( 'PSMENUDEL'           ,'MDM'    )           
    do CheckVersion( 'PSTREESTRDEL'        ,'TSM'    )           
        
    do CheckVersion( 'PSQRYDEL'            ,'QDM'    )           
    do CheckVersion( 'PSSTYLEDEL'          ,'SDM'    )           
    do CheckVersion( 'PSCOLORDEL'          ,'CDM'    )           
    do CheckVersion( 'PSTOOLBARDEL'        ,'TBM'    )           
      
    do CheckVersion( 'PSBUSPROCDEL'        ,'BPM'    )           
    do CheckVersion( 'PSACTIVITYDEL'       ,'ACM'    )           
    do CheckVersion( 'PSPROJECTDEL'        ,'PJM'    )           
    do CheckVersion( 'PSFMTDEL'            ,'FDM'    )           
    do CheckVersion( 'PSPNLGRPDEL'         ,'PGM'    )           
      
    do CheckVersion( 'PSRECURDEL'          ,'PSR'    )           
    do CheckVersion( 'PSPACKAGEDEL'        ,'APM'    )           
    do CheckVersion( 'PSMSGDEL'            ,'MSDM'   )           
    do CheckVersion( 'PSCHNLDEL'           ,'CHDM'   )           
    do CheckVersion( 'PSMSGNODEDEL'        ,'MNDM'   )           
    do CheckVersion( 'PSSUBDEL'            ,'SUDM'   )           
    do CheckVersion( 'PSAEAPPLDEL'         ,'AEM'    )           
    do CheckVersion( 'PSAESECTDEL'         ,'AES'    )           
    do CheckVersion( 'PSSQLDEL'            ,'SRM'    )           
    do CheckVersion( 'PSIODEL'             ,'IOM'    )           
    do CheckVersion( 'PSFLDDEL'            ,'FLM'    )           
    do CheckVersion( 'PSBCDEL'             ,'BCM'    )           
    do CheckVersion( 'PSAPPRRULEDEL'       ,'VAM'    )              
         
    do CheckVersion( 'PSCONTDEL'           ,'CRM'    )           
    do CheckVersion( 'PSSTYLSHEETDEL'      ,'SSM'    )           
    do CheckVersion( 'PSCLASSDEL'          ,'CLM'    )           
    do CheckVersion( 'PSOPRDEL'            ,'UPM'    )           
    do CheckVersion( 'PSURLDEL'            ,'PPC'    )              
    do CheckVersion( 'PSPRDMDEL'           ,'PRDM'   )           
    do CheckVersion( 'PSPRSMDEL'           ,'PRSM'   )           
    do CheckVersion( 'PSPRUHDEL'           ,'PRUH'   )              
    do CheckVersion( 'PSOPTPRBTYPEDEL'     ,'PBM'    )           
    do CheckVersion( 'PSMPDEFNDEL'         ,'MPM'    )           
            
    do CheckVersion( 'PSPRUFDEL'           ,'PRUF'   )           
    do CheckVersion( 'PSGATEWAYDEL'        ,'GTM'    )           
    do CheckVersion( 'PSNODETRXDEL'        ,'NTM'    )           
    do CheckVersion( 'PSRELATSHIPDEL'      ,'RSM'    )              
    do CheckVersion( 'PSRELATTRXDEL'       ,'RSTM'   )              
    do CheckVersion( 'PSNODETRXDEL'        ,'TMM'    )           
        
    do CheckVersion( 'PSOPTMODELDEL'       ,'MMDM'   )           
    do CheckVersion( 'PSFILEREDEFNDEL'     ,'FRM'    )           
    do CheckVersion( 'PSTYPECODEDEL'       ,'TYC'    )              
    do CheckVersion( 'PSARCHOBJDEL'        ,'ARCOM'  )           
    do CheckVersion( 'PSARCHTEMPDEL'       ,'ARCTM'  )           
    do CheckVersion( 'PSDIAGDEL'           ,'DIAGM'  )              
    do CheckVersion( 'PSROLEDEL'           ,'ROLM'   )           
    do CheckVersion( 'PSACEMDLDEFNDEL'     ,'BMM'    )           
    do CheckVersion( 'PSJPUPDEL'           ,'JPUP'   )           
    do CheckVersion( 'PSWSRPPRDDEL'        ,'WSPRD'  )           
    do CheckVersion( 'PSWSRPPLTDEL'        ,'WSPLT'  )           
    do CheckVersion( 'PSWSRPCPHDEL'        ,'WSCPH'  ) 
    do CheckVersion( 'PSPCMPROGDEL'        ,'PCM'    ) 
      
      !new managers  added in  8.48   
              
    do CheckVersion( 'PSQUEUEDEFNDEL'      ,'QUEM'   )            
    do CheckVersion( 'PSOPERATIONDEL'      ,'OPRM'   )           
    do CheckVersion( 'PSOPRVERDFNDEL'      ,'OPRVM'  )           
    do CheckVersion( 'PSOPRHDLRDEL'        ,'OPRHM'  )           
    do CheckVersion( 'PSIBRTNGDEFNDEL'     ,'RTDM'   )           
    do CheckVersion( 'PSSERVICEDEL'        ,'SRVM'   )          
    do CheckVersion( 'PSXPTMPLDEFNDEL'     ,'XTRDM'  )           
    do CheckVersion( 'PSXPDATASRCDEL'      ,'XPDSM'  )           
    do CheckVersion( 'PSXPRPTDEFNDEL'      ,'XRRDM'  ) 
    do CheckVersion( 'PSFILEDEL'           ,'FILEM'  ) 
      
      !new managers  added in  8.50   
              
    do CheckVersion( 'PSCONQRSDEFNDEL'     ,'CQDM'   )            
    do CheckVersion( 'PSIBWSDLDEL'         ,'WSDL'   )            
    do CheckVersion( 'PSIBSCMADEL'         ,'SCMA'   )            


      !new managers  added in  8.52

    do CheckVersion( 'PSFP_FEED_DEL'    ,'FDFM'   )        
    do CheckVersion( 'PSFP_CATG_DEL'    ,'FCATM'  )        
    do CheckVersion( 'PSFP_DTYPE_DEL'   ,'FDTM'   )        

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if  

end-procedure   

  
 
 
!----------------------------------------------------------------------!
! Procedure: CheckVersion (Generic)                                    !    
! Descr:     System PeopleTools Managed Tables audit                   !
!            To verify Version Numbers in Agreement                    !    
!            1 Parameter:  Managed table name                          !
!            2 Parameter:  PSVERSION OBJECTTYPENAME name               !
!----------------------------------------------------------------------!
begin-procedure CheckVersion($TableName, $ManagerCode)

    #ifdef debuge
        show 'Starting: ' $_AuditDescr
        date-time () {PTHMSM} &StrDateTime
        let $_StrDateTime = strtodate(&StrDateTime,{PTHMSM})
        show 'StartTime   : ' &StrDateTime
    #end-if

    let #_rows     = 0
    let $_DetailErrFound  = 'N'    
    let $_AuditDescr = '(Manager-' || $ManagerCode || ') Version check of table '|| $TableName || ' against PSVERSION'    
    let $WhereClause = 'WHERE A.VERSION > B.VERSION AND B.OBJECTTYPENAME = ' || '''' || $ManagerCode || ''''
 
    #ifdef debuge
        show 'WHERE clause: ' $WhereClause 
    #end-if
    
    
begin-SELECT on-Error=Rpt-SQL-Error
A.VERSION    &vers
        
        if (((#_current-line + 1) = #_sqr-max-lines) and $_DetailErrFound = 'Y') or ($_DetailErrFound = 'N')
           move 'Y' to $_DetailErrFound
           do CreateErrorEntry($TableName,$ManagerCode)
        end-if
    
FROM [$TableName] A, PSVERSION B
[$WhereClause]

end-SELECT 
    
     do End-Section 
    
    #ifdef debuge
        date-time () {PTHMSM} &EndDateTime
        show 'EndTime     : ' &EndDateTime
        let $_EndDateTime = strtodate(&EndDateTime,{PTHMSM})
        let #_ElapsedTime = datediff($_EndDateTime, $_StrDateTime,'second')
        show 'Elapsed Time: ' #_ElapsedTime edit 9999,999.999 ' (seconds)'
        show 'Exiting : ' $_AuditDescr
        show ' '
    #End-if

end-procedure



!--------------------------------------------------------------------------!
! Procedure:   CreateErrorEntry                                            !
! Description: Creates error entry in a report if version problem is found !
!--------------------------------------------------------------------------!


begin-procedure CreateErrorEntry($TblName,$ManagerCode)    

#ifdef debuge
     
    show 'Creating Error Entry for:  '  $TblName 
    date-time () {PTHMSM} &StrDateTime
    let $_StrDateTime = strtodate(&StrDateTime,{PTHMSM})   
    show 'StartTime   : ' &StrDateTime
#end-if

    if $_ErrorFound = 'N'
        let $_ErrorFound = 'Y'
        do PrintSummaryRecord
    end-if

    print $_AuditDescr (+2,1) bold 
    let #_rowstoadd       =  1
    
    ! getting a set of keys for a table which name is passed as a parameter to CreateErrorEntry()     
            
    do PopulateKeyDefs($TblName )
        
    ! check if a field OBJECTOWNERID exists in a $TblName
    let $_objId =''
    do OwneridProcessing ($TblName) 
    
    let #k = 0
    while #k<#_totalkeys
        get $tmp from keydefs(#k) fldname       
        let $tmp  = 'A.' ||$tmp
        put $tmp   into keydefs(#k) fldname  
        #ifdef debuge       
            show 'keydefs(#k) fldname: '  $tmp
        #end-if 
        let #k=#k+1 
    end-while
    
    
    if $_objId != ''
        let $OBJECTOWNERID = 'A.OBJECTOWNERID'  
    else
        let $OBJECTOWNERID = ''  
    end-if      
    

    let $Where = 'WHERE A.VERSION > B.VERSION AND B.OBJECTTYPENAME = ' || '''' || $ManagerCode || ''''
         
    ! calling convertDynDataType to convert  keydefs.fldname(x)   to CHAR 
         
    do convertDynDataType (0)
    do convertDynDataType (1)
    do convertDynDataType (2)
    do convertDynDataType (3)
    do convertDynDataType (4)
    do convertDynDataType (5)
    do convertDynDataType (6)
    do convertDynDataType (7)
    do convertDynDataType (8)
    do convertDynDataType (9)
    do convertDynDataType (10)
    do convertDynDataType (11)
    do convertDynDataType (12)
    do convertDynDataType (13)
    do convertDynDataType (14)
    do convertDynDataType (15)
    do convertDynDataType (16)
    do convertDynDataType (17)
    do convertDynDataType (18)
    do convertDynDataType (19) 
    
    
    !assignining conversion expressions to 'select list' variables
    
    let $dyncol0 = keydefs.fldname(0)
    let $dyncol1 = keydefs.fldname(1)
    let $dyncol2 = keydefs.fldname(2)
    let $dyncol3 = keydefs.fldname(3)
    let $dyncol4 = keydefs.fldname(4)
    let $dyncol5 = keydefs.fldname(5)
    let $dyncol6 = keydefs.fldname(6)
    let $dyncol7 = keydefs.fldname(7)
    let $dyncol8 = keydefs.fldname(8)
    let $dyncol9 = keydefs.fldname(9)
    let $dyncol10 = keydefs.fldname(10)
    let $dyncol11 = keydefs.fldname(11)
    let $dyncol12 = keydefs.fldname(12)
    let $dyncol13 = keydefs.fldname(13)
    let $dyncol14 = keydefs.fldname(14)
    let $dyncol15 = keydefs.fldname(15)
    let $dyncol16 = keydefs.fldname(16)
    let $dyncol17 = keydefs.fldname(17)
    let $dyncol18 = keydefs.fldname(18)
    let $dyncol19 = keydefs.fldname(19)
        
    let #printpos= {VALUE_COLUMN_PRINTPOS}
    
     
begin-SELECT on-Error=Rpt-SQL-Error
     
[$dyncol0]  &col0=CHAR          
[$dyncol1]  &col1=CHAR
[$dyncol2]  &col2=CHAR                  
[$dyncol3]  &col3=CHAR                  
[$dyncol4]  &col4=CHAR                  
[$dyncol5]  &col5=CHAR                  
[$dyncol6]  &col6=CHAR                  
[$dyncol7]  &col7=CHAR                  
[$dyncol8]  &col8=CHAR                  
[$dyncol9]  &col9=CHAR  
[$dyncol10] &col10=CHAR                 
[$dyncol11] &col11=CHAR
[$dyncol12] &col12=CHAR                  
[$dyncol13] &col13=CHAR                  
[$dyncol14] &col14=CHAR                  
[$dyncol15] &col15=CHAR                  
[$dyncol16] &col16=CHAR                  
[$dyncol17] &col17=CHAR                  
[$dyncol18] &col18=CHAR                  
[$dyncol19] &col19=CHAR  
                
A.VERSION               &Version_AVersion
B.VERSION               &Version_BVersion
[$OBJECTOWNERID]        &Version_ObjectOwnerid=char

     
    let #k=0 
    
    print '--------------------------------------------------------------------' (+1,1)
     
    if  #k < #_totalkeys    
        let $tmp =   keydefs.fldname1(0) 
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+2,1) underline
        print &col0 (0,#printpos)                        
        let #k=#k+1                                  
    end-if                                         
                                                   
    if  #k < #_totalkeys             
        let $tmp =   keydefs.fldname1(1)
        let $tmp = rtrim($tmp, ' ')             
        print $tmp  (+1,1) underline
        print &col1 (0,#printpos)  
        let #k=#k+1      
    end-if  
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(2)
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+1,1) underline 
        print &col2 (0,#printpos)
        let #k=#k+1       
    end-if 
     
    if  #k < #_totalkeys             
        let $tmp =   keydefs.fldname1(3)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col3 (0,#printpos) 
        let #k=#k+1         
    end-if
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(4) 
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col4 (0,#printpos) 
        let #k=#k+1        
    end-if 
     
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(5)
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+1,1) underline
        print &col5 (0,#printpos) 
        let #k=#k+1         
    end-if
    
    if  #k < #_totalkeys            
        let $tmp =   keydefs.fldname1(6)
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+1,1) underline
        print &col6 (0,#printpos)
        let #k=#k+1        
    end-if      
         
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(7) 
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col7 (0,#printpos)
        let #k=#k+1          
    end-if
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(8)
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+1,1) underline
        print &col8 (0,#printpos) 
        let #k=#k+1         
    end-if 
     
    if  #k < #_totalkeys              
        let $tmp =   keydefs.fldname1(9)
        let $tmp = rtrim($tmp, ' ')            
        print $tmp  (+1,1) underline
        print &col9 (0,#printpos)
        let #k=#k+1         
    end-if      
     
    
    if  #k < #_totalkeys    
        let $tmp =   keydefs.fldname1(10)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col10 (0,#printpos)               
        let #k=#k+1                      
    end-if                               
                                         
    if  #k < #_totalkeys             
        let $tmp =   keydefs.fldname1(11)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col11 (0,#printpos)  
        let #k=#k+1      
    end-if  
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(12)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col12 (0,#printpos) 
        let #k=#k+1       
    end-if 
     
    if  #k < #_totalkeys             
        let $tmp =   keydefs.fldname1(13) 
        let $tmp = rtrim($tmp, ' ')          
        print $tmp  (+1,1) underline 
        print &col13 (0,#printpos)
        let #k=#k+1         
    end-if
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(14)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col14 (0,#printpos) 
        let #k=#k+1        
    end-if 
     
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(15)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col15 (0,#printpos) 
        let #k=#k+1         
    end-if
    
    if  #k < #_totalkeys            
        let $tmp =   keydefs.fldname1(16)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col16 (0,#printpos)
        let #k=#k+1        
    end-if      
         
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(17)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col17 (0,#printpos)
        let #k=#k+1          
    end-if
    
    if  #k < #_totalkeys        
        let $tmp =   keydefs.fldname1(18)
        let $tmp = rtrim($tmp, ' ')           
        print $tmp  (+1,1) underline
        print &col18 (0,#printpos) 
        let #k=#k+1         
    end-if 
     
    if  #k < #_totalkeys              
        let $tmp =   keydefs.fldname1(19) 
        let $tmp = rtrim($tmp, ' ')          
        print $tmp  (+1,1) underline
        print &col19 (0,#printpos)
        let #k=#k+1         
    end-if  
    
        
    
    
    let $tmp = 'PSVERSION Version'  
    print $tmp  (+1,1) bold
    print &Version_BVersion (0,#printpos)
    let #k=#k+1
    
    
    let $tmp = $TblName || ' Version'
    print $tmp      (+1,1)  bold
    print &Version_AVersion (0,#printpos)
    let #k=#k+1
    
    
    if  isblank (&Version_ObjectOwnerid )  = 0  
        let $tmp =   'OBJECTOWNERID' 
        print $tmp  (+1,1)  
        print &Version_ObjectOwnerid (0,#printpos)
        let #k=#k+1
    end-if  
    
    let #_rowstoadd =#k 
    let #_rows = #_rows +1

FROM [$TblName] A, PSVERSION B
[$Where]
end-SELECT  
     
end-procedure

!---------------------------------------------------------------------------------------!
! Procedure:   PopulateKeyDefs                                                          !
! Description:  to populate keydefs array with Key names,datatypes and length           !
!---------------------------------------------------------------------------------------!

begin-procedure PopulateKeyDefs($Name  )

    ! getting a set of keys for each table which name is passed as a parameter
    !select  FIELDNAME FROM PSKEYDEFN WHERE INDEXID= '_' and RECNAME ='....' order by KEYPOSN
    
    let #i = 0
    clear-array name = keydefs
    
    let $sql_char  = ''''
    let $indexid = '_'
    let $Where = 'WHERE INDEXID=' 
        || $sql_char || $indexid || $sql_char 
        ||' AND RECNAME = ' || $sql_char 
        || $Name || $sql_char  
         
        
        #ifdef debuge           
            show ' Dynamic Where: ' $Where               
        #end-if 
     
     
begin-SELECT on-Error=Rpt-SQL-Error     
FIELDNAME       &fldn       
    put &fldn &fldn into  keydefs(#i) fldname fldname1          
    let #i=#i+1   
FROM PSKEYDEFN  
[$WHERE]
end-select

    ! getting the longest column length 
    let $tmp1 = 'PSVERSION Version'
    let #Columnlen1 = lengthp($tmp)      
    let $tmp2 = $Name || ' Version'
    let #Columnlen2 = lengthp($tmp)

    if #Columnlen1 < #Columnlen2
        let #Columnlen1 = #Columnlen2
    end-if
    
    let #k =0
    !getting key fields length and type. 
    while #k < #i
        get $Field from keydefs(#k) fldname
        
        do RetrieveColumnLength($Name,$Field,#FieldLen,$FieldType)      
        
        !Correcting table column headers length         
        let #Columnlen = lengthp(keydefs.fldname(#k))       
                    
             if #FieldLen > #Columnlen
                let #Columnlen = #FieldLen
                if #Columnlen< #Columnlen1
                    let #Columnlen = #Columnlen1
                end-if
            end-if
         
        
        !Populating array keydefs with corrected values for column length       
        put #Columnlen into keydefs(#k) fldlen   
        put $FieldType into keydefs(#k) fldtype          
        let #k=#k+1
    end-while           
    
    let #_totalkeys =#i     
            
end-procedure



!---------------------------------------------------------------------------------------!
! Procedure:   OwneridProcessing                                                        !
! Description: -to check if OBJECTOWNERID column exists                                 !
!---------------------------------------------------------------------------------------!

begin-procedure OwneridProcessing ($TblName  )

    !select OBJECTOWNERID from PSRECFIELD where FIELDNAME= 'OBJECTOWNERID'and RECNAME = $TblName
     
    let $WHEREOB ='WHERE FIELDNAME = ' ||''''  || 'OBJECTOWNERID' ||'''' ||' AND  RECNAME ='
                                       || '''' || $TblName || ''''
    #ifdef debuge
        show 'In OwneridProcessing $WHEREOB = '   $WHEREOB
    #end-if 
    
begin-SELECT on-Error=Rpt-SQL-Error     
FIELDNAME       &fldn  
    let $_objId ='OBJID_EXISTS'    
    
FROM PSRECFIELD  
[$WHEREOB] 
end-select  

end-procedure



!---------------------------------------------------------------------------------------!
! Procedure:   convertDynDataType                                                       !
! Description:-to create a conversion expression numbers ->char for dynamic Select      !
!---------------------------------------------------------------------------------------!

begin-procedure convertDynDataType(#iter )
    let $q  = chr(39)
    let $space = $q ||' '||$q
    let $zero =  $q ||'0'|| $q
    
    if keydefs.fldtype(#iter) ='NUMBER'
        #ifdef ORACLE
            let $dynName= 'TO_CHAR(' || keydefs.fldname(#iter) || ')'            
        #else
            #ifdef MICROSOFT
                let $dynName = 'CAST(' || keydefs.fldname(#iter) || ' AS CHAR)'
            #else
                #ifdef DB2
                    ! assuming positive integer numbers
                    ! CAST(REPLACE(LTRIM(REPLACE(RTRIM(CHAR($test)),'0',' ')),' ','0') AS VARCHAR(40))
                    
                    let $dynName = 'CAST(REPLACE(LTRIM(REPLACE(RTRIM(CHAR(keydefs.fldname(#iter))),' 
                    || $zero ||','|| $space || ')),' || $space ||','|| $zero 
                    || ') AS VARCHAR(40) )'
                    
                #else
                    #ifdef INFORMIX
                        let $dynName= 'CAST(' || keydefs.fldname(#iter) || ' AS VARCHAR(40))' 
                    #else
                        #ifdef SYBASE
                            let $dynName= 'CONVERT(VARCHAR(40),' || keydefs.fldname(#iter) || ')'                       
                        #endif      
                    #endif      
                #endif          
            #endif
        #endif
                
        put    $dynName into keydefs(#iter)  fldname
    end-if
    
end-procedure

 
