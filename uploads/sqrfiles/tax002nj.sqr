!***********************************************************************
!  TAX002NJ:  Qtrly State Employee Wage List - NEW JERSEY              *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:05:59:09                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#Include 'usarpt.sqc'  !Get USA variables

begin-setup

#include 'prt002.sqc'  !Printer and page-size initialization

end-setup

begin-report
  do Init-Report
  do Process-Main

  if #Employees_On_Page > 0 and #Employees_On_Page < 25
    do Page-Complete
  end-if

    do Stdapi-Term

end-report

begin-procedure Init-Report
  display 'Quarterly Employee Wage List - New Jersey'

  do Init-DateTime
  do Init-Number

  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls

  move $PeriodEndDate to $AsOfDate  !for included procedures

  do Initialize
  do Get-Calendar-Year-Id


end-procedure

begin-procedure Initialize
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'NJ' to $State
#endif

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Select-Parameters
    move #RC_QTR_UI.Maximum_Weeks to #MaxWeeks
    move #RC_QTR_UI.NJ_State_Minimum to #StateMinimum
  end-if
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

#ifdef DEBUG
  print 'Initialize'       (+1,1)
  print '$QtrBeginDate '   (+1,5)
  print $QtrBeginDate      (,+2)
  print '$PeriodEndDate '  (+1,5)
  print $PeriodEndDate     (,+2)

  print '$EarnsBeginDate ' (+1,5)
  print $EarnsBeginDate    (,+2)
  print '$EarnsEndDate '   (+1,5)
  print $EarnsEndDate      (,+2)

  print '$SlctEarnsBeginDate ' (+1,5)
  print $SlctEarnsBeginDate    (,+2)
  print '$SlctEarnsEndDate '   (+1,5)
  print $SlctEarnsEndDate      (,+2)
#endif

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
end-procedure

begin-procedure Ask-Values
  display ' '
  input $MaxWeeks 'Base weeks for each employee cannot exceed (from Form WR-30)' type=number
  input $StateMinimum 'Enter minimum weekly earnings for base week (from Form WR-30)' type=number
  display ' '

  move $MaxWeeks to #MaxWeeks
  move $StateMinimum to #StateMinimum
end-procedure

#ifndef DEBUG
begin-heading 4
  print '00'                      (1,2)    !Prefix
  if RTRIM(&Employer_ID_SUT, ' ') <> ''
    print &Employer_ID_SUT        (1,6,11)
  else
    print &Employer_ID_SWT        (1,6,11)
  end-if
  print '000'                     (1,20)   !Syn Code
  move '0' to $year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfDate, $out, {DEFMDY}, '', '')
  print $out                      (1,31)
  do Format-Number(#PAGE_NUM, $out, '9999')
  print $out                      (0,50)
  do Format-Number(#TotalPages, $out, '9999')
  print $out                      (0,57)
  uppercase $CompanyName
  print $CompanyName              (3,2,45)
  let $Address1 = $Compnyadd1
  uppercase $Address1
  print $Address1                  (+1,2,30)
  let $field = RTRIM($Compnycity, ' ')
  uppercase $field
  print $field                    (+1,2)
  print &CT.State                 ()      edit bxx
  move  &CT.Postal                 to $Zip
  move  &CT.Postal                 to $ZipExtsn ~~~~~~xxxx

  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
      let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  print $Zip                       (0,+2)

  if #PAGE_NUM = #TotalPages
    move &EmplCount to #EmpCount
    print #EmpCount                 (57,7) edit 99999
    do Format-Number(&TB.NLGrs_QTD, $out, '99999999999.99')
    print $out                      (57,22)
  end-if
end-heading
#endif

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  Show 'Calendar Year: ' $Calendar_Year_Id
  Show 'Balance  Year: ' &TX.Balance_Year
  Show 'Balance  Qtr:  ' &TX.Balance_Qtr
  Show 'Asofdate:      ' $Asofdate

begin-SELECT
C.COMPANY         () on-break print=never level=1 before=Company-Change
C.STATE
C.EMPLID          () on-break print=never level=2 after=EmplID-Change
C.TAX_CLASS
C.LOCALITY
C.TXGRS_QTD
C.NLGRS_QTD

D1.NATIONAL_ID    () on-break print=never level=2 save=$SSN
PN.NAME            () on-break print=never level=2
PN.LAST_NAME
PN.FIRST_NAME
PN.MIDDLE_NAME

  move &C.Company to $Company
  let $LastName   = rtrim(&PN.LAST_NAME, ' ')
  let $FirstName  = rtrim(&PN.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&PN.MIDDLE_NAME,1,1)

  do Process-Tax-Balance

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME PN,
      PS_PERS_NID D1, PS_COMPANY_TBL A
WHERE D1.EMPLID           = C.EMPLID
  AND D1.COUNTRY          = {NID_COUNTRY}
  AND D1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND PN.EMPLID           = C.EMPLID
#ifdef TAXTEST
  AND C.STATE             = 'CA'
#else
  AND C.STATE             = 'NJ'
#endif
  AND C.LOCALITY          = ' '
  AND C.TAX_CLASS         = 'U'
  AND C.BALANCE_ID        = $Calendar_Year_Id
  AND C.BALANCE_YEAR      = &TX.Balance_Year
  AND C.BALANCE_QTR       = &TX.Balance_Qtr
  AND C.BALANCE_PERIOD    =
      (SELECT MAX(C1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C1
       WHERE  C1.EMPLID        = C.EMPLID
         AND  C1.COMPANY       = C.COMPANY
         AND  C1.BALANCE_ID    = C.BALANCE_ID
         AND  C1.BALANCE_YEAR  = C.BALANCE_YEAR
         AND  C1.BALANCE_QTR   = C.BALANCE_QTR
         AND  C1.STATE         = C.STATE
         AND  C1.LOCALITY      = C.LOCALITY
         AND  C1.TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD > 0
  AND A.COMPANY = C.COMPANY
  AND A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY C.COMPANY, D1.NATIONAL_ID, C.STATE, C.LOCALITY, C.TAX_CLASS
end-SELECT
end-procedure

begin-procedure Process-Tax-Balance
  do Format-Number(&C.NLGrs_QTD, $NLGrs_QTD, '99999999999.99')
  move &C.EmplID to $EmplID
  do Get-Weeks
  if #WeeksWorked > #MaxWeeks
    move #MaxWeeks to #Weeks
  else
    move #WeeksWorked to #Weeks
  end-if
  do Format-Number(#Weeks, $Weeks, '99')
end-procedure

begin-procedure EmplID-Change
  move $SSN to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask or RTRIM($SSN, ' ') = ''
    print 'Applied For' (+2,2)
  else
    print $SSN          (+2,2)  edit xxx-xx-xxxx
  end-if

  let $Name = $LastName || ' ' || $FirstName || ' ' || $MidInitial
  uppercase $Name

  print $Name               (0,17,35)

  print $NLGrs_QTD          (0,57)
  print $Weeks              (0,75)

  move '' to $NLGrs_QTD
  move '' to $Weeks

  add 1 to #Employees_On_Page

  if #Employees_On_Page = 25
    do Page-Complete
  end-if
end-procedure

begin-procedure Get-Total
begin-SELECT

COUNT(*)          &EmplCount

#ifdef DB2ALL
DECIMAL(SUM(TB.NLGRS_QTD),15,3) &TB.NLGrs_QTD
#else
SUM(TB.NLGRS_QTD)    &TB.NLGrs_QTD
#endif

FROM  PS_TAX_BALANCE TB,  PS_COMPANY_TBL A2
WHERE TB.COMPANY       = &C.Company
#ifdef TAXTEST
  AND TB.STATE         = 'CA'
#else
  AND TB.STATE         = 'NJ'
#endif
  AND TB.LOCALITY      = ' '
  AND TB.TAX_CLASS     = 'U'                 ! Unemployment
  AND TB.BALANCE_ID    = $Calendar_Year_Id
  AND TB.BALANCE_YEAR  = &TX.Balance_Year
  AND TB.BALANCE_QTR   = &TX.Balance_Qtr
  AND TB.NLGRS_QTD     > 0
  AND TB.BALANCE_PERIOD       =
      (SELECT MAX(C2.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C2
       WHERE  C2.EMPLID        = TB.EMPLID
         AND  C2.COMPANY       = TB.COMPANY
         AND  C2.BALANCE_ID    = TB.BALANCE_ID
         AND  C2.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND  C2.BALANCE_QTR   = TB.BALANCE_QTR
         AND  C2.STATE         = TB.STATE
         AND  C2.LOCALITY      = TB.LOCALITY
         AND  C2.TAX_CLASS     = TB.TAX_CLASS)
  AND A2.COMPANY = TB.COMPANY
  AND A2.EFF_STATUS = 'A'
  AND A2.TAX_REPORT_TYPE = '2'
  AND A2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_COMPANY_TBL
       WHERE  COMPANY = A2.COMPANY
         AND  EFFDT  <= $AsOfDate)
GROUP BY TB.COMPANY, TB.STATE
end-SELECT
  let #TotalPages = CEIL(&EmplCount/25)
end-procedure

begin-procedure Page-Complete
  add 1 to #PAGE_NUM
  new-page
  move 0 to #Employees_On_Page
end-procedure

begin-procedure Company-Change
  if #Employees_On_Page < 25 and #Employees_On_Page > 0
    do Page-Complete
  end-if
  move 0 to #PAGE_NUM
  move &C.Company to $Company
  do Get-Company-Data
  do Get-State-Tax-Data             !Employer ID
  do Get-Total
end-procedure

begin-procedure Ignore
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getweeks.sqc'  !Get-Weeks procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure

