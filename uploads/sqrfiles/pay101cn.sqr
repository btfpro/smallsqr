!****************************************
!  PAY101CN: Record of Employment Print *
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/23:13:06:59                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
!#ifndef UNIX
!  #Include 'setup01.sqc'   !Printer and page-size initialization
!#endif
#Include 'canrpt.sqc'    !Get CAN variables

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  display 'Record of Employment Print'

  move 'PAY101CN' to $ReportID

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Calendar-Year-Id
  do Get-Current-DateTime
  move $AsOfToday to $AsOfDate  !for "included" procedures
  display '$AsOfToday: ' noline
  display $AsOfToday

  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  if $Prcs_Process_Instance = ''
    PROMPT:
    input $Final_Print 'Final ROE print? (Y/N)'
    uppercase $Final_Print

    if $Final_Print <> 'Y' and $Final_Print <> 'N'
      goto PROMPT
    end-if

    if $Final_Print = 'Y'
      display 'Enter a Beginning ROE No. if restarting the run; ' noline
      display 'otherwise leave blank'
      input $BeginROE_NBR maxlen=8 'Enter Beginning ROE No.' type=integer

    end-if

    PROMPT2:
    input $RC_PAY.ROE_FORM_LANG 'ROE form language (E/F)'
    uppercase $RC_PAY.ROE_FORM_LANG

    if $RC_PAY.ROE_FORM_LANG <> 'E' and $RC_PAY.ROE_FORM_LANG <> 'F'
      goto PROMPT2
    end-if

    PROMPT3:
    input $RC_PAY.ALIGN_COUNT maxlen=3 'Enter an alignment count' type=integer
    move $RC_PAY.ALIGN_COUNT  to #RC_PAY.ALIGN_COUNT

  else
    do Select-Parameters
    move $RC_PAY.ROE_Final_Print to $Final_Print
    move #RC_PAY.ROE_No_Start    to $BeginROE_NBR  B9999999
  end-if

  if $Final_Print = 'Y'
    if RTRIM($BeginROE_NBR, ' ') = ''
      do Get-Last-ROE_NBR
    else
      move $BeginROE_NBR to #ROE_NBR_LAST
    end-if
  end-if

  do Initialization
  do Printer-Alignment
  do Delete-Prt-Exceptions
  do Report

  display #ROECount 99,999 noline
  display ' ROE records printed'

  if #ROECount = 0
    print '*********************************' (1,1)
    print '*********************************' (2,1)
    print '***  NO ROES REQUESTED.       ***' (3,1)
    print '***  PLEASE PRINT THIS        ***' (4,1)
    print '***  REPORT ON PLAIN PAPER    ***' (5,1)
    print '*********************************' (6,1)
    print '*********************************' (7,1)
  end-if

  do Reset

  if $Final_Print = 'Y'
    do Update-Last-ROE_NBR
  end-if

end-procedure


!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY101CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY101CN', 'PAY_PERIOD_TYPE_CH'  , $Pay101cn_Pay_Period_Type_Chg , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'FROM'                , $Pay101cn_From                , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'TO'                  , $Pay101cn_To                  , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'AT_THE_END_OF_PP'    , $Pay101cn_At_The_End_Of_PP    , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'ENDING'              , $Pay101cn_Ending              , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'MONTHLY'             , $Pay101cn_Monthly             , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'SEMI_MONTHLY'        , $Pay101cn_Semi_Monthly        , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'BI_WEEKLY'           , $Pay101cn_Bi_Weekly           , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'WEEKLY'              , $Pay101cn_Weekly              , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'UNKNOWN'             , $Pay101cn_Unknown             , #dummy_width)
   do Get_Field_Information ('PAY101CN', 'COMP_LEAVE'          , $Pay101cn_Comp_Leave          , #dummy_width)

end-procedure


begin-setup

#ifndef UNIX
  #ifndef DB2
    #ifndef DB2400
      #ifndef EBCDIC
        declare-printer DEFAULT-LP
        init-string = <27>E<27>(10U<27>&l0O<27>&l8D<27>&l80F<27>(s10.0H
        end-declare
      #else
        declare-printer DEFAULT-LP
        end-declare
      #endif
    #else
      declare-printer DEFAULT-LP
      end-declare
    #endif
  #else
    declare-printer DEFAULT-LP
    end-declare
  #endif
#else
  declare-printer DEFAULT-LP
  end-declare
#endif

#include 'setupdb.sqc'


declare-layout DEFAULT
    paper-size=(88,80)
    orientation=PORTRAIT
    top-margin = 0.0
    left-margin = 0.0
end-declare


end-setup


begin-procedure Initialization

  create-array name=Ins_Earns size=28         -
    field=Wage_Loss_Plan:char                 -
    field=UI_Period_Dt:char                   -
    field=Earns_End_Dt:char                   -
    field=UI_Earns_Cur:number                 -
    field=UI_Equiv_Weeks_Cur:number           -
    field=ROE_NBR:char                           -
    field=UI_Use_Wkly:char                    -
    field=Pay_Frequency:char                  -
    field=Pays_in_Year:number                 -
    field=EI_Hours:number

  create-array name=Oth_Earns size=21         -
    field=ErnCd:char                          -
    field=EarningsAbbrv:char                  -
    field=Amount:number

  create-array name=Holidays size=6           -
    field=Holiday:char                        -
    field=Amount:number

    do Init-Ins-Earns

end-procedure


begin-procedure Printer-Alignment

  while #AlignmentPageCount < #RC_PAY.Align_Count
    do Print-Test-ROE
    add 1 to #AlignmentPageCount
    NEW-PAGE
  end-while

end-procedure


begin-procedure Report

! do Print-Test-ROE                       ! Alignment page if required
! NEW-PAGE                                ! Alignment page if required

  if (($RC_Pay.Roe_Form_Lang = 'F') or
      ($RC_Pay.Roe_Form_Lang = 'FR'))
    let $Lang-Pref = ' AND P.LANG_CD IN (''FRA'' , ''CFR'') '
  else
    let $Lang-Pref = ' AND P.LANG_CD NOT IN (''FRA'' , ''CFR'') '
  end-if

begin-SELECT
P.EMPLID
PN.NATIONAL_ID
PX.NAME

P.LANG_CD
PG.PAY_REF_NBR
FT.FREQUENCY_TYPE
PG.ERNCD_HOLIDAY
PG.ERNCD_REG_EARNS
W.WAGE_LOSS_PLAN
W.CANADA_RCT_NO
W.CANADA_BN
R.COMPANY
R.PAYGROUP
R.WAGE_LOSS_PLAN
R.ROE_SEQ
R.ROE_NBR_REPL
R.JOBCODE
R.SETID_JOBCODE
R.ACTION
R.ACTION_REASON
R.FIRST_DATE_WORKED
R.LAST_DATE_WORKED
R.PD_LEAVE_START_DT
R.PD_LEAVE_INTERVAL
R.PD_LEAVE_AMT
R.EXPECTED_RETURN_DT
R.NOT_RETURNING
R.COMMENTS
R.UI_PAYABLE_DT
R.ROE_ISSUER_ID
R.ROE_CONTACT_ID
R.OVRD_HRS


  move 'N' to $Bypass-ROE
  move 'N' to $PP_Earns_Nil
  do Look-For-Cheques
  move ' '          to $EE_AddrLine1
  move ' '          to $EE_AddrLine2
  move ' '          to $EE_AddrLine3


 ! DISPLAY 'BYPASS ROE: ' NOLINE
 ! DISPLAY $BYPASS-ROE

  move &PX.Name to $Name
  do Rotate-Name
  move $Name to $EE_Name

  Do Get-Empl-Address (&P.Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL

  move $City to $CityState

  if RTRIM($City, ' ') <> ''

    let $CityState = RTRIM($City, ' ')
    concat $State with $CityState ,bxxbb
    move $POSTAL to $Zip
    concat $Zip with $CityState
  end-if

  move $Address1   to $EE_AddrLine1

  if RTRIM($Address2, ' ') = ''
    move $CityState to $EE_AddrLine2
  else
    move $Address2 to $EE_AddrLine2
    move $CityState to $EE_AddrLine3
  end-if

  move &FT.FREQUENCY_TYPE   to $FieldValue
  move 'FREQUENCY_TYPE'     to $FieldName
  do Read-Translate-Table
  move $XlatShortName to $Pay_Freq_Name
  let $SetID = rtrim(&R.SetID_JobCode, ' ')
  move &R.JobCode to $JobCode
  if $SetID = ''
    move '' to $JobTitle
  else
    do Get-Job-Title
  end-if

  do Format-DateTime(&R.First_Date_Worked, $out, {DEFCMP}, '', '')
  do Format-DateTime(&R.First_Date_Worked, $First_Date_Worked_Msg,{DEFDATE},'','')

  let $temp1 = substr($out, 7, 2)
  let $temp2 = substr($out, 5, 2)
  let $temp3 = substr($out, 1, 4)
  let $First_Date_Worked  = $temp1 || ' ' || $temp2 || '  ' || $temp3

  do Format-DateTime(&R.Last_Date_Worked, $Work_Date, {DEFCMP}, '', '')
  do Format-DateTime(&R.Last_Date_Worked, $Last_Date_Worked_Msg ,{DEFDATE},'','')

  do Format-DateTime($Work_Date, $Last_Date_Worked, {DEFCMP}, '', 'native')

  let $temp1 = substr($Work_Date, 7, 2)
  let $temp2 = substr($Work_Date, 5, 2)
  let $temp3 = substr($Work_Date, 1, 4)
  let $Print_Last_Date_Worked   = $temp1 || ' ' || $temp2 || '  ' || $temp3

  do Format-DateTime(&R.Pd_Leave_Start_Dt, $out, {DEFCMP}, '', '')
  let $temp1 = substr($out, 7, 2)
  let $temp2 = substr($out, 5, 2)
  let $temp3 = substr($out, 1, 4)
  let $Pd_Leave_Start_Dt  = $temp1 || ' ' || $temp2 || ' ' || $temp3

  do Format-DateTime(&R.Expected_Return_Dt, $out, {DEFCMP}, '', '')
  let $temp1 = substr($out, 7, 2)
  let $temp2 = substr($out, 5, 2)
  let $temp3 = substr($out, 1, 4)
  let $Expected_Return_Dt = $temp1 || ' ' || $temp2 || '  ' || $temp3

  do Format-DateTime(&R.UI_Payable_Dt, $out, {DEFCMP}, '', '')
  let $temp1 = substr($out, 7, 2)
  let $temp2 = substr($out, 5, 2)
  let $temp3 = substr($out, 1, 4)
  let $UI_Payable_Dt      = $temp1 || ' ' || $temp2 || '  ' || $temp3

  move &R.ROE_Issuer_ID to $EmplID

  if RTRIM($EmplID, ' ') <> ''
    do Get-Name-Phone
    move $Name  to $IssuerName
    move $Phone to $IssuerPhone
    move $Pref-Lang to $IssuerPref-Lang
  else
    move '    ' to $IssuerName
    move '    ' to $IssuerPhone
    move ' '    to $IssuerPref-Lang
  end-if

  move &R.ROE_Contact_ID to $EmplID

  if RTRIM($EmplID, ' ') <> ''
    do Get-Name-Phone
    move $Name  to $ContactName
    move $Phone to $ContactPhone
    move $Pref-Lang to $ContactPref-Lang
  else
    move '    ' to $ContactName
    move '    ' to $ContactPhone
    move ' '    to $ContactPref-Lang
  end-if

  do Get-Pay-Frequencies
  do Get-Employer-Data

  do Get-Last-Earns-End-Dt
  do Check-Ins-Earns-Exists

  if $Ins-Earns-last-PP = 'N' and $Ins-Earns-Fnd = 'Y'
    do Process-Gap-last-PP
    let $DetailRequired = 'Y'
  end-if

  do Get-Ins-Earnings
  do Process-Gap-Early-PP
  do Get-Ins-Weeks
  do Get-Vac-Hol-Oth-Pay

  if $Bypass-ROE = 'N'
    if #totalweeks > 0 or #totalearnings > 0
       or #TotalEIHrs > 0 or #TotalEIEarns > 0
      do Print-ROE
      add 1 to #ROE_NBR_LAST
      add 1 to #ROECount
!   DISPLAY 'ROE COUNT: ' NOLINE
!   DISPLAY #ROECOUNT

      NEW-PAGE
    end-if
  end-if

  do Init-Ins-Earns

FROM  PS_PERSONAL_DT_FST  P, PS_PERS_NID PN,
      PS_NAMES           PX,
      PS_ROE             R,
      PS_PAYGROUP_TBL    PG,
      PS_WAGELS_PLAN_TBL W,
      PS_FREQUENCY_TBL   FT
WHERE R.ROE_PROCESS     = 'G'
  AND P.EMPLID          = R.EMPLID
#ifdef MVS
  \$LANG-PREF\
#else
  [$LANG-PREF]
#endif
  AND P.EMPLID            = PN.EMPLID
  AND PN.COUNTRY          = {NID_COUNTRY}
  AND PN.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND P.EMPLID            = PX.EMPLID
  AND PX.NAME_TYPE = 'PRI'
  AND PX.EFFDT =
      (SELECT MAX(PZ.EFFDT)
       FROM   PS_NAMES PZ
       WHERE  PZ.EMPLID    = PX.EMPLID
         AND  PZ.NAME_TYPE = PX.NAME_TYPE
         AND  PZ.EFFDT    <= $AsOfDate)
  AND PG.COMPANY        = R.COMPANY
  AND PG.PAYGROUP       = R.PAYGROUP
  AND PG.EFFDT =
      (SELECT MAX(PG1.EFFDT)
       FROM   PS_PAYGROUP_TBL PG1
       WHERE  PG1.COMPANY       = PG.COMPANY
         AND  PG1.PAYGROUP      = PG.PAYGROUP)
  AND W.COMPANY         = R.COMPANY
  AND W.WAGE_LOSS_PLAN  = R.WAGE_LOSS_PLAN
  AND W.EFFDT =
      (SELECT MAX(W1.EFFDT)
       FROM   PS_WAGELS_PLAN_TBL W1
       WHERE  W1.COMPANY        = R.COMPANY
         AND  W1.WAGE_LOSS_PLAN = W.WAGE_LOSS_PLAN)
  AND PG.PAY_FREQUENCY       =  FT.FREQUENCY_ID
  AND FT.EFF_STATUS          = 'A'
  AND FT.EFFDT               =
        (SELECT MAX(FT1.EFFDT)
         FROM   PS_FREQUENCY_TBL FT1
         WHERE  FT1.FREQUENCY_ID  = FT.FREQUENCY_ID
           AND  FT1.EFF_STATUS    = FT.EFF_STATUS
           AND  FT1.EFFDT        <= PG.EFFDT)
  ORDER BY PX.NAME ASC
end-SELECT

end-procedure


begin-procedure Print-ROE

  if #ROE_NBR_LAST <> 0

    if $Final_Print = 'Y'
      do Update-ROE
      do Update-PayInsEarns
    end-if
!
!   Box 1 is preprinted on the Form
!
  end-if

  if RTRIM(&R.ROE_NBR_REPL, ' ') <> ''                             !Box  2
    print &R.ROE_NBR_REPL          (3,28)  edit 0999999999         !Box  2
  end-if                                                        !Box  2

  print &PG.PAY_REF_NBR            (3,54)                          !Box  3
  do Format-Number(#ROE_NBR_LAST, $ROE_NBR, '09999999')               !Box  3
  print ' - '                   (3,62)                          !Box  3
  print $ROE_NBR                   (3,65)                          !Box  3

  print $Company_Name           (6,3)                           !Box  4
  print $ER_AddrLine1           (8,3)                           !Box  4
  print $ER_AddrLine2           (9,3)                           !Box  4
  print $ER_AddrLine3           (10,3)                          !Box  4

  let $BN = rtrim(&W.Canada_BN, ' ')                            !Box  5
  if $BN <> ''                                                  !Box  5
    print &W.Canada_BN          (6,54)                          !Box  5
  end-if                                                        !Box  5

  print $Pay_Freq_Name          (10,54)                         !Box  6

  print $ER_Postal_Code         (13,43) edit xxxbxxxx           !Box  7

  print &PN.NATIONAL_ID         (13,54)  edit xxx-xxx-xxx       !Box  8

  print $EE_Name                (19,3)                          !Box  9
  print $EE_AddrLine1           (20,3)                          !Box  9
  print $EE_AddrLine2           (21,3)                          !Box  9
  print $EE_AddrLine3           (22,3)                          !Box  9

  print $First_Date_Worked      (16,70)                         !Box 10

  print $Print_Last_Date_Worked (20,70)                         !Box 11

  do Format-DateTime($FinalPayEndDt, $out2, {DEFCMP}, '', '')   !Box 12
                                                                !Box 12
  do Format-DateTime($FinalPayEndDt, $out, {DEFCMP}, '', '' )   !Box 12
  let $temp1 = substr($out, 7, 2)                               !Box 12
  let $temp2 = substr($out, 5, 2)                               !Box 12
  let $temp3 = substr($out, 1, 4)                               !Box 12
  let $Out = $temp1 || ' ' || $temp2 || '  ' || $temp3          !Box 12
  print $out                  (23,70)                           !Box 12

  print $JobTitle               (27,3)                          !Box 13

  if not IsNULL(&R.Expected_Return_Dt)                          !Box 14
    print $Expected_Return_Dt   (27,70)                         !Box 14
  end-if                                                        !Box 14
                                                                !Box 14
  if &R.Not_Returning = 'N' and IsNULL(&R.Expected_Return_Dt)
    print 'X'                   (27,45)                         !Box 14
  end-if                                                        !Box 14

  if #TotalEIHrs <> 0                                           !Box 15A
    do Format-Number(#TotalEIHrs, $Out, '999999.99')            !Box 15A
    if (($RC_Pay.Roe_Form_Lang = 'F') or                        !Box 15A
      ($RC_Pay.Roe_Form_Lang = 'FR'))                           !Box 15A
      print $Out                (30,32)                         !Box 15A
    else                                                        !Box 15A
      print $Out                (31,32)                         !Box 15A
    end-if                                                      !Box 15A
  end-if                                                        !Box 15A
  if &R.OVRD_HRS <> 0                                           !Box 15A
    let #OvrdEIHrs = &R.OVRD_HRS                                !Box 15A
    do Format-Number(#OvrdEIHrs, $Out, '999999.99')             !Box 15A
    if (($RC_Pay.Roe_Form_Lang = 'F') or                        !Box 15A
      ($RC_Pay.Roe_Form_Lang = 'FR'))                           !Box 15A
      print $Out                (30,32)                         !Box 15A
    else                                                        !Box 15A
      print $Out                (31,32)                         !Box 15A
    end-if                                                      !Box 15A
  end-if                                                        !Box 15A

  if ((#TotalEIEarns <> 0 and                                   !Box 15B
       $DetailRequired = 'N') or                                !Box 15B
      ($PP_Earns_Nil = 'Y' and                                  !Box 15B
       $DetailRequired = 'Y'))                                  !Box 15B
    do Format-Number(#TotalEIEarns, $Out, '99999999.99')        !Box 15B
    print $Out                  (36,30)                         !Box 15B
  end-if                                                        !Box 15B

  move 'N' to $Print_Freq_Switch                                !Box 15C
                                                                !Box 15C
! if $DetailRequired = 'N'                                      !Box 15C
    move 1 to #i                                                !Box 15C
    move 0 to #Prior_Equiv                                      !Box 15C
    move 0 to #Prior_Pays_In_Yr                                 !Box 15C
    move $Pay101cn_Pay_Period_Type_Chg to $Freq_Msg             !Box 15C
                                                                !Box 15C
    while (#i <= 27) and (#i <= #Week#)                         !Box 15C
                                                                !Box 15C
      get               #UI_Earns_Cur        -                  !Box 15C
                        #UI_Equiv_Weeks_Cur  -                  !Box 15C
                        $Earns_End_Dt        -                  !Box 15C
                        $UI_Use_Wkly         -                  !Box 15C
                        $Pay_Frequency       -                  !Box 15C
                        #Pays_in_Year        -                  !Box 15C
                        $UI_Period_Dt        -                  !Box 15C
      from Ins_Earns(#i) UI_Earns_Cur        -                  !Box 15C
                         UI_Equiv_Weeks_Cur  -                  !Box 15C
                         Earns_End_Dt        -                  !Box 15C
                         UI_Use_Wkly         -                  !Box 15C
                         Pay_Frequency       -                  !Box 15C
                         Pays_in_Year        -                  !Box 15C
                         UI_Period_Dt                           !Box 15C


      if #UI_Earns_Cur > 0                                      !Box 15C
                                                                !Box 15C
        do Format-Number(#UI_Earns_Cur, $out, 'b999999.99')     !Box 15C
      else                                                      !Box 15C
                                                                !Box 15C
        move '       NIL' to $out                               !Box 15C
      end-if                                                    !Box 15C
      evaluate #i                                               !Box 15C
        when = 1                                                !Box 15C
          print $out                                (43,04)     !Box 15C
          let #Box15C_PP1_Amt = #UI_Earns_Cur                   !Box 15C
        when = 2                                                !Box 15C
          print $out                                (43,18)     !Box 15C
        when = 3                                                !Box 15C
          print $out                                (43,33)     !Box 15C
        when = 4                                                !Box 15C
          print $out                                (45,04)     !Box 15C
        when = 5                                                !Box 15C
          print $out                                (45,18)     !Box 15C
        when = 6                                                !Box 15C
          print $out                                (45,33)     !Box 15C
        when = 7                                                !Box 15C
          print $out                                (47,04)     !Box 15C
        when = 8                                                !Box 15C
          print $out                                (47,18)     !Box 15C
        when = 9                                                !Box 15C
          print $out                                (47,33)     !Box 15C
        when = 10                                               !Box 15C
          print $out                                (49,04)     !Box 15C
        when = 11                                               !Box 15C
          print $out                                (49,18)     !Box 15C
        when = 12                                               !Box 15C
          print $out                                (49,33)     !Box 15C
        when = 13                                               !Box 15C
          print $out                                (51,04)     !Box 15C
        when = 14                                               !Box 15C
          print $out                                (51,18)     !Box 15C
        when = 15                                               !Box 15C
          print $out                                (51,33)     !Box 15C
        when = 16                                               !Box 15C
          print $out                                (53,04)     !Box 15C
        when = 17                                               !Box 15C
          print $out                                (53,18)     !Box 15C
        when = 18                                               !Box 15C
          print $out                                (53,33)     !Box 15C
        when = 19                                               !Box 15C
          print $out                                (55,04)     !Box 15C
        when = 20                                               !Box 15C
          print $out                                (55,18)     !Box 15C
        when = 21                                               !Box 15C
          print $out                                (55,33)     !Box 15C
        when = 22                                               !Box 15C
          print $out                                (57,04)     !Box 15C
        when = 23                                               !Box 15C
          print $out                                (57,18)     !Box 15C
        when = 24                                               !Box 15C
          print $out                                (57,33)     !Box 15C
        when = 25                                               !Box 15C
          print $out                                (59,04)     !Box 15C
        when = 26                                               !Box 15C
          print $out                                (59,18)     !Box 15C
        when = 27                                               !Box 15C
          print $out                                (59,33)     !Box 15C
      end-evaluate                                              !Box 15C


      if ((#Prior_Pays_In_Yr <> #Pays_in_Year) and              !Box 15C
          ($Print_Freq_Switch <> 'Y') and                       !Box 15C
          (#i <> 1) and                                         !Box 15C
          (#Pays_in_Year <> 0 and #Prior_Pays_In_Yr <> 0))      !Box 15C

        move 'Y' to $Print_Freq_Switch                          !Box 15C

        evaluate #Pays_in_Year                                  !Box 15C
          when = 12                                             !Box 15C
            move $Pay101cn_Monthly      to $New_Freq            !Box 15C
          when = 24                                             !Box 15C
            move $Pay101cn_Semi_Monthly to $New_Freq            !Box 15C
          when = 26                                             !Box 15C
            move $Pay101cn_Bi_Weekly    to $New_Freq            !Box 15C
          when = 52                                             !Box 15C
            move $Pay101cn_Weekly       to $New_Freq            !Box 15C
          when-other                                            !Box 15C
            move $Pay101cn_Unknown      to $New_Freq            !Box 15C
        end-evaluate                                            !Box 15C
         do Format-Number(#i, $out, 'b9')                       !Box 15C
         do Format-DateTime($UI_Period_Dt, $switch_date,{DEFCMP},'', 'native')
         do Format-DateTime($switch_date, $switch_date,{DEFDMY},'', '')

         let $Freq_Msg  = $Pay101cn_Pay_Period_Type_Chg || ' ' || $Pay101cn_From || ' ' ||
             $New_Freq || ' ' || $Pay101cn_To || ' ' || $Prior_To_PayGroup || ' ' ||
             $Pay101cn_At_The_End_Of_PP || ' ' || $out || ' ' ||
             $Pay101cn_Ending || ' ' || $switch_date || ' '
      end-if                                                    !Box 15C

      if  #Pays_in_Year  > 0

        evaluate #Pays_in_Year
            when = 12
              move $Pay101cn_Monthly      to $To_PayGroup
            when = 24
              move $Pay101cn_Semi_Monthly to $To_PayGroup
            when = 26
              move $Pay101cn_Bi_Weekly    to $To_PayGroup
            when = 52
              move $Pay101cn_Weekly       to $To_PayGroup
            when-other
              move $Pay101cn_Unknown      to $To_PayGroup
        end-evaluate

      end-if

      if  #Pays_in_Year  > 0

        move #Pays_in_Year         to #Prior_Pays_In_Yr

      end-if


      move $To_PayGroup          to $Prior_To_PayGroup
      add 1 to #i                                               !Box 15C
    end-while                                                   !Box 15C

  move 36            to #Block_Width

  move &R.Action to $Action                                     !Box 16
  move &R.Action_Reason to $Action_Reason                       !Box 16
  move $AsOfToday to $AR_AsOfDate                               !Box 16

  move &R.Comments   to $Comments

  if RTRIM($Action_Reason, ' ') <> ''                           !Box 16
    do Get-Action-Reason                                        !Box 16

    if RTRIM($ROE_Reason, ' ') = 'Z'                            !Box 16

      do Format-DateTime('20050101', $CodeZ_Form_Date, {DEFCMP}, '', 'native')
      do Format-DateTime($CodeZ_Form_Date, $CodeZ_Form_Date, {DEFCMP}, '', '')
      do Format-DateTime($AsOfDate, $Process_Dt, {DEFCMP}, '', '')

      if $Process_Dt < $CodeZ_Form_Date                         !Box 16
        let $ROE_Reason = 'K'                                   !Box 16
        let $Comments = rtrim($Comments, ' ') || ' ' || $Pay101cn_Comp_Leave
      end-if                                                    !Box 16
    end-if                                                      !Box 16

    if RTRIM($ROE_Reason, ' ') = 'L'                            !Box 16
      let $ROE_Reason = 'G'                                     !Box 16
    end-if                                                      !Box 16

    if (($RC_Pay.Roe_Form_Lang = 'F') or                        !Box 16
      ($RC_Pay.Roe_Form_Lang = 'FR'))                           !Box 16
      print $ROE_Reason         (30,73)                         !Box 16
    else                                                        !Box 16
      print $ROE_Reason         (31,73)                         !Box 16
    end-if                                                      !Box 16
  end-if                                                        !Box 16

  move $Comments   to $With_CRLF

  do Expand_CR_LF

  if $Print_Freq_Switch = 'N'                                   !Comments
    print $Without_CRLF             (59,45)  wrap 35 9          !Comments
  else                                                          !Comments
    print $Freq_Msg              (59,45,35)  wrap 35 5          !Comments
    print $Without_CRLF             (+1,45)  wrap 35 4          !Comments
  end-if                                                        !Comments

  do Format-Number(#VacationPay, $out, 'b9999999.99')           !Box 17A
  print $out                     (43,47)                        !Box 17A

  move 0 to #i                                                  !Box 17B
  let #Stat_Holiday_Pay = 0                                     !Box 17B
                                                                !Box 17B
  if #HolidayCount <> 0                                         !Box 17B
                                                                !Box 17B
    while #i <= #HolidayCount                                   !Box 17B
      get               $Holiday -                              !Box 17B
                        #Amount  -                              !Box 17B
      from Holidays(#i)  Holiday -                              !Box 17B
                         Amount                                 !Box 17B
                                                                !Box 17B
      do Format-DateTime($Holiday, $out, {DEFCMP}, '', '')      !Box 17B
      let $Temp1 = substr($out, 7, 2)                           !Box 17B
      let $Temp2 = substr($out, 5, 2)                           !Box 17B
      let $Temp3 = substr($out, 1, 4)                           !Box 17B
      let $Holiday = $Temp1  || ' ' || $Temp2 || ' ' ||  $Temp3 !Box 17B
                                                                !Box 17B
      if #i = 1                                                 !Box 17B
        print $Holiday            (43,61)                       !Box 17B
        do Format-Number(#Amount, $out, 'b9999.99')             !Box 17B
                                                                !Box 17B
        print $out                (43,72)                       !Box 17B
        let #Stat_Holiday_Pay = #Stat_Holiday_Pay + #Amount     !Box 17B
      else                                                      !Box 17B
        if #i = 2                                               !Box 17B
          print $Holiday            (45,61)                     !Box 17B
          do Format-Number(#Amount, $out, 'b9999.99')           !Box 17B
                                                                !Box 17B
          print $out                (45,72)                     !Box 17B
          let #Stat_Holiday_Pay = #Stat_Holiday_Pay + #Amount   !Box 17B
        else                                                    !Box 17B
          if #i = 3                                             !Box 17B
            print $Holiday            (47,61)                   !Box 17B
            do Format-Number(#Amount, $out, 'b9999.99')         !Box 17B
                                                                !Box 17B
            print $out                (47,72)                   !Box 17B
            let #Stat_Holiday_Pay = #Stat_Holiday_Pay + #Amount !Box 17B
          end-if                                                !Box 17B
        end-if                                                  !Box 17B
      end-if                                                    !Box 17B
      add 1 to #i                                               !Box 17B
    end-while                                                   !Box 17B
                                                                !Box 17B
  end-if                                                        !Box 17B

  let #Other_Monies = 0                                         !Box 17c
  if #ErnCd# <> 0                                               !Box 17c
    move 1 to #i                                                !Box 17c
                                                                !Box 17c
    while #i <= 4                                               !Box 17c
                                                                !Box 17c
      get               $EarningsAbbrv -                        !Box 17c
                        #Amount        -                        !Box 17c
      from Oth_Earns(#i) EarningsAbbrv -                        !Box 17c
                         Amount                                 !Box 17c
                                                                !Box 17c
      if #i = 1                                                 !Box 17c
        print $EarningsAbbrv                  (51,45)           !Box 17c
        do Format-Number(#Amount, $out, 'b999999.99')           !Box 17c
        print $out                            (51,70)           !Box 17c
        let #Other_Monies = #Other_Monies + #Amount             !Box 17c
      else                                                      !Box 17c
        if #i = 2                                               !Box 17c
          print $EarningsAbbrv                (53,45)           !Box 17c
          do Format-Number(#Amount, $out, 'b999999.99')         !Box 17c
          print $out                          (53,70)           !Box 17c
          let #Other_Monies = #Other_Monies + #Amount           !Box 17c
        else                                                    !Box 17c
          if #i = 3                                             !Box 17c
            print $EarningsAbbrv                (55,45)         !Box 17c
            do Format-Number(#Amount, $out, 'b999999.99')       !Box 17c
            print $out                          (55,70)         !Box 17c
            let #Other_Monies = #Other_Monies + #Amount         !Box 17c
          else
            if $EarningsAbbrv <> ' ' and #Amount > 0            !Box 17c
              display '*** More Than Three Box 17C Entries Exist ***'!Box 17c
              display '*** Employee Id                  : ' noline   !Box 17c
              display &P.Emplid                                      !Box 17c
              display '*** Employee Name                : ' noline   !Box 17c
              display $EE_Name                                       !Box 17c
              display '*** Company                      : ' noline   !Box 17c
              display &R.Company                                     !Box 17c
              display '*** Pay Group                    : ' noline   !Box 17c
              display &R.Paygroup                                    !Box 17c
              display '*** First Day Worked             : ' noline   !Box 17c
              display $First_Date_Worked_Msg                         !Box 17c
              display '*** Last Day For Which Paid      : ' noline   !Box 17c
              display $Last_Date_Worked_Msg                          !Box 17c
              display '*** ROE #                        : ' noline   !Box 17c
              if $Final_Print = 'Y'                                  !Box 17c
                display $ROE_NBR                                        !Box 17c
              else                                                   !Box 17c
                display ' '                                          !Box 17c
              end-if                                            !Box 17c
            end-if                                              !Box 17c
          end-if                                                !Box 17c
        end-if                                                  !Box 17c
      end-if                                                    !Box 17c
      add 1 to #i                                               !Box 17c
    end-while                                                   !Box 17c
                                                                !Box 17c
  end-if                                                        !Box 17c


! Valid Box 15C P.P. 1 amount and against amount in Box 17A, 17B and 17C.
! Update ROE Print Exceptions (R_PAY101CN) if error found.
  if $DetailRequired = 'Y'
    do Validate-Box-15C
  end-if

  let $mark1 = substr($ContactPhone, 1, 3)                      !Box 16
  let $mark2 = substr($ContactPhone, 5, 3)                      !Box 16
  let $mark3 = substr($ContactPhone, 9, 4)                      !Box 16
  let $ContactPhone = $mark1 || '  ' || $mark2 || ' ' || $mark3 !Box 16
                                                                !Box 16

  if (($RC_Pay.Roe_Form_Lang = 'F') or                          !Box 16
      ($RC_Pay.Roe_Form_Lang = 'FR'))                           !Box 16
     print $ContactName        (35,44)                          !Box 16
     print $ContactPhone       (37,57)                          !Box 16
  else                                                          !Box 16
     print $ContactName        (34,44)                          !Box 16
     print $ContactPhone       (36,57)                          !Box 16
  end-if


  if ((RTRIM($IssuerPref-Lang, ' ') = 'CFR') or                 !Box 20
      (RTRIM($IssuerPref-Lang, ' ') = 'FRA'))                   !Box 20
    print 'X'                   (73,10)                         !Box 20
  else                                                          !Box 20
    print 'X'                   (73,02)                         !Box 20
  end-if                                                        !Box 20

  let $mark1 = substr($IssuerPhone, 1, 3)                       !Box 21
  let $mark2 = substr($IssuerPhone, 5, 3)                       !Box 21
  let $mark3 = substr($IssuerPhone, 9, 4)                       !Box 21
  let $IssuerPhone = $mark1 || '  ' || $mark2 || ' ' || $mark3  !Box 21
                                                                !Box 21
  print $IssuerPhone            (73,24)                         !Box 21

  print $IssuerName             (78,34)                         !Box 22



  if (($RC_Pay.Roe_Form_Lang = 'F') or                          !Box 14
      ($RC_Pay.Roe_Form_Lang = 'FR'))                           !Box 14
                                                                !Box 14
    if &R.Not_Returning = 'Y'                                   !Box 14
      print 'X'                   (27,58)                       !Box 14
    end-if                                                      !Box 14
  else                                                          !Box 14
    if &R.Not_Returning = 'Y'                                   !Box 14
      print 'X'                   (27,55)                       !Box 14
    end-if                                                      !Box 14
  end-if

  if not IsNULL(&R.Pd_Leave_Start_Dt)                           !Box 19
      print $Pd_Leave_Start_Dt    (68,4)                        !Box 19
      do Format-Number(&R.Pd_Leave_Amt, $Out, '999999.99')      !Box 19
      print $Out                  (68,20)                       !Box 19
      if &R.Pd_Leave_Interval = 'D'                             !Box 19
        print 'X'                 (68,32)                       !Box 19
      else                                                      !Box 19
        print 'X'                 (68,37)                       !Box 19
      end-if                                                    !Box 19
  end-if                                                        !Box 19



end-procedure


begin-procedure Get-Pay-Frequencies

  move  0 to #Most_Periods_Per_Year
  move  0 to #Previous_Periods
  move  0 to #Freq_Count
  move 'N' to $Multi_Pay_Periods

begin-SELECT
PFJ.EMPL_RCD
PFJ.EMPL_STATUS
PFJ.ACTION
PFJ.ACTION_REASON
PFJ.PAYGROUP
FQ.FREQUENCY_TYPE

  evaluate &FQ.FREQUENCY_TYPE
    when = 'W'              !Weekly
      move 52 to #Freq#
    when = 'B'              !BiWeekly
      move 26 to #Freq#
    when = 'S'              !SemiMonthly
      move 24 to #Freq#
    when = 'M'              !Monthly
      move 12 to #Freq#
    when-other              !Other
      display ' UNKNOWN PAY FREQUENCY IN GET PAY-FREQUENCIES '
  end-evaluate

  if #Freq# <> #Previous_Periods
    add 1 to #Freq_Count
    move #Freq# to #Previous_Periods
  end-if

  if #Freq# < #Least_Periods_Per_Year
    move #Freq# to #Least_Periods_Per_Year
  end-if

FROM PS_JOB           PFJ,
     PS_PAYGROUP_TBL  PFG,
     PS_FREQUENCY_TBL FQ
WHERE PFJ.EMPLID   = &P.EMPLID
  AND PFJ.EFFDT   =
       (SELECT MAX(EFFDT)
               FROM   PS_JOB
        WHERE  EMPLID    = PFJ.EMPLID
          AND  EMPL_RCD = PFJ.EMPL_RCD
          AND  EFFDT    <= &R.Last_Date_Worked)
  AND PFJ.EFFSEQ  =
       (SELECT MAX(EFFSEQ)
               FROM   PS_JOB
        WHERE  EMPLID    = PFJ.EMPLID
          AND  EMPL_RCD = PFJ.EMPL_RCD
          AND  EFFDT     = PFJ.EFFDT)
  AND PFJ.COMPANY   = PFG.COMPANY
  AND PFJ.PAYGROUP  = PFG.PAYGROUP
  AND PFG.PAY_FREQUENCY  = FQ.FREQUENCY_ID
  AND FQ.EFF_STATUS      = 'A'
  AND FQ.EFFDT           =
      (SELECT MAX(FQ1.EFFDT)
              FROM PS_FREQUENCY_TBL FQ1
       WHERE  FQ1.FREQUENCY_ID = FQ.FREQUENCY_ID
         AND  FQ1.EFF_STATUS   = FQ.EFF_STATUS
         AND  FQ1.EFFDT       <= PFG.EFFDT)
end-SELECT

  if #Freq_Count > 1
    move 'Y' to $Multi_Pay_Periods
  end-if

end-procedure


begin-procedure Get-Employer-Data

begin-select
C.DESCR
C.ADDRESS1
C.ADDRESS2
C.CITY
C.STATE
C.POSTAL
C.FEDERAL_EIN

  move ' '          to $ER_AddrLine1
  move ' '          to $ER_AddrLine2
  move ' '          to $ER_AddrLine3

  move &C.Descr    to $Company_Name
  move &C.City     to $CityState
  move &C.Address1 to $Coaddr1
  move &C.Address2 to $Coaddr2

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!

  if $Curr_language_cd <> $Psoptions_language_cd
     do Get-Rel-Lang-Compny
  end-if

  if RTRIM($CityState, ' ') <> ''

    let $CityState = RTRIM(&C.City, ' ')
    concat &C.State with $CityState ,bxxbb
  end-if

  move $Coaddr1     to $ER_AddrLine1

  if RTRIM($Coaddr2, ' ') = ''
    move $CityState to $ER_AddrLine2
  else
    move $Coaddr2   to $ER_AddrLine2
    move $CityState to $ER_AddrLine3
  end-if

  move &C.POSTAL      to $ER_Postal_Code
  move &C.Federal_EIN to $ER_PayrollRef#

FROM PS_COMPANY_TBL C
WHERE C.COMPANY = &R.Company
  AND C.EFFDT =
      (SELECT MAX(C1.EFFDT)
      FROM   PS_COMPANY_TBL C1
      WHERE  C1.COMPANY = C.COMPANY
        AND  C1.EFFDT <= $AsOfDate)
end-select

end-procedure



begin-procedure Get-Rel-Lang-Compny

begin-select
CL.DESCR


  if rtrim(&CL.DESCR,' ') <> ''
     let $Company_Name = rtrim(&CL.DESCR,' ')
  end-if

FROM PS_COMPNY_TBL_LANG CL
WHERE CL.COMPANY     = &R.Company
  and CL.LANGUAGE_CD = $Curr_language_cd
  AND CL.EFFDT =
      (SELECT MAX(CL1.EFFDT)
      FROM   PS_COMPNY_TBL_LANG CL1
      WHERE  CL1.COMPANY = CL.COMPANY
        AND  CL1.LANGUAGE_CD = CL.LANGUAGE_CD
        AND  CL1.EFFDT <= $AsOfDate)


end-select

end-procedure


begin-procedure Get-Last-Earns-End-Dt

begin-select
LED.PAY_END_DT

  move &LED.Pay_End_Dt to $Last_Earns_End_Dt

FROM  PS_PAY_CALENDAR LED
WHERE LED.COMPANY          = &R.Company
  AND LED.PAYGROUP         = &R.PayGroup
  AND LED.PAY_END_DT       =
      (SELECT MIN(LED1.PAY_END_DT)
         FROM PS_PAY_CALENDAR LED1
         WHERE LED1.COMPANY   = LED.COMPANY
           AND LED1.PAYGROUP  = LED.PAYGROUP
           AND LED1.PAY_END_DT >= &R.LAST_DATE_WORKED)
end-SELECT

end-procedure


begin-procedure Check-Ins-Earns-Exists

  let $Ins-Earns-last-PP     = 'N'
  let $last-row              = 'N'
  let $last_row_Ins_Earns_Dt = ' '

  let $Ins-Earns-Fnd = 'N'


begin-SELECT
IEE.EMPLID
IEE.UI_PERIOD_DT
IEE.UI_WKLY_EARNS
IEE.UI_WKLY_HOURS



  if &IEE.UI_Period_Dt = $Last_Earns_End_Dt and (&IEE.UI_WKLY_EARNS > 0)
    let $Ins-Earns-last-PP = 'Y'
  end-if

  if $last-row = 'N'
    let $last_row_Ins_Earns_Dt = &IEE.UI_Period_DT
    let $last-row = 'Y'

  end-if


  let $Ins-Earns-Fnd = 'Y'


FROM  PS_INS_EARNS_BAL IEE
WHERE IEE.EMPLID        = &P.EmplID
  AND IEE.ROE_NBR          = ' '
  AND IEE.UI_PERIOD_DT <= $Last_Earns_End_Dt
ORDER BY IEE.UI_PERIOD_DT DESC


end-SELECT

end-procedure


begin-procedure Process-Gap-last-PP

  move 0 to #Week#
  move 0 to #WeekCount

  evaluate &FT.FREQUENCY_TYPE
    when = 'M'
      let #PayPeriod = 7
      break
    when = 'S'
      let #PayPeriod = 13
      break
    when = 'W'
      let #PayPeriod = 27
      break
    when = 'B'
      let #PayPeriod = 14
      break
  end-evaluate

begin-select
PG.PAY_END_DT
PG.PAY_BEGIN_DT

  add 1  to #Week#

  if (#Week# <= 27) and (#Week# <= #PayPeriod)

  put &PG.Pay_End_Dt         -
      0                      -
      0                      -
      into Ins_Earns(#Week#) -
      UI_Period_Dt           -
      UI_Earns_Cur           -
      Pays_in_Year

  move &PG.PAY_BEGIN_DT to $Prior-Begin-Dt
  add  1                to #WeekCount
  end-if

FROM  PS_PAY_CALENDAR PG
WHERE PG.COMPANY          = &R.Company
  AND PG.PAYGROUP         = &R.PayGroup
  AND PG.PAY_END_DT       > $last_row_Ins_Earns_Dt
  AND PG.PAY_END_DT      <= $Last_Earns_End_Dt
ORDER BY PG.PAY_END_DT DESC

end-SELECT

  move #WeekCount to #Week#
end-procedure


begin-procedure Get-Ins-Earnings

  if $Ins-Earns-last-PP = 'Y'
    move 0   to #Week#
  end-if
  move 0   to #TotalWeeks
  move 0   to #TotalUIWeeks
  move 0   to #TotalEIHrs
  move 0   to #TotalEIEarns
  move 0   to #TotalUIEarns
  move 0   to #TotalEarnings
  move 0   to #MaxYear

  if $Ins-Earns-last-PP = 'Y'
    move 'N' to $DetailRequired
  end-if
  move '-' to $DDelimiter
  move ' ' to $Prev-Emplid
  move ' ' to $Prev-Company
  move ' ' to $Prev-WageLsPln
  do Format-DateTime('19000101', $Prev-Period, {DEFCMP}, '', 'native')
  do Format-DateTime($Prev-Period, $CMP-Prev-Period, {DEFCMP}, '', '')
  do Format-DateTime('19000101', $FinalPayEndDt, {DEFCMP}, '', 'native')
  do Format-DateTime('19000101', $TestDate, {DEFCMP}, '', 'native')
  do Convert-To-DTU-Date(&R.UI_PAYABLE_DT, $EndDate)


begin-select
IE.COMPANY
IE.WAGE_LOSS_PLAN
IE.UI_PERIOD_DT
IE.EARNS_END_DT
IE.UI_EQUIV_WEEKS_CUR
IE.UI_USE_WKLY
IE.UI_EARNS_CUR
IE.ROE_NBR
IE.UI_WKLY_EARNS
IE.UI_WKLY_HOURS
IE.UI_PERIODS_PER_YR
IE.INS_EARNS_AMENDED

  if $FinalPayEndDt = $TestDate
    move $Last_Earns_End_Dt to $FinalPayEndDt
    move &IE.Earns_End_Dt to $Final_Earns_End_Dt

    evaluate &FT.FREQUENCY_TYPE
    when = 'M'
      let #PayPeriod-Required = 7
      do PayGroup-Pd-CutOff
      let #PayPeriod-Required-Hrs = 13
      do PayGroup-Pd-Hrs-Dt-CutOff
      break
    when = 'S'
      let #PayPeriod-Required = 13
      do PayGroup-Pd-CutOff
      let #PayPeriod-Required-Hrs = 25
      do PayGroup-Pd-Hrs-Dt-CutOff
      break
    when = 'W'
      let #PayPeriod-Required = 27
      do PayGroup-Pd-CutOff
      let #PayPeriod-Required-Hrs = 53
      do PayGroup-Pd-Hrs-Dt-CutOff
      break
    when = 'B'
      let #PayPeriod-Required = 14
      do PayGroup-Pd-CutOff
      let #PayPeriod-Required-Hrs = 27
      do PayGroup-Pd-Hrs-Dt-CutOff
      break
    when-other
      do DTU-subtract-days($EndDate, 183, $EarnsDate)
      do Convert-From-DTU-Date($EarnsDate, $EarnsDate)
      do DTU-subtract-days($EndDate, 365, $HrsDate)
      do Convert-From-DTU-Date($HrsDate, $HrsDate)
    end-evaluate

    do Format-DateTime($EarnsDate, $EarnsDate, {DEFCMP}, '', '')
    do Format-DateTime($HrsDate, $HrsDate, {DEFCMP}, '', '')
  end-if

  let #UI_WKLY_HOURS = &IE.UI_WKLY_HOURS
  let #UI_WKLY_EARNS = &IE.UI_WKLY_EARNS
  let #Cur-Freq      = &IE.UI_PERIODS_PER_YR

  if #UI_WEKLY_EARNS = 0
    let $PP_Earns_Nil = 'Y'
  end-if

  do Format-DateTime(&IE.UI_PERIOD_DT, $CMP-PerDate, {DEFCMP}, '', '')
  if ((&IE.COMPANY <> $Prev-Company) or
      ($CMP-PerDate    <> $CMP-Prev-Period))
    do Check-Earnings-Year
    if  #Earnings-Year > #MaxYear
      let #MaxYear = #Earnings-Year
    end-if
  end-if

  if #Earnings-Year >= 1997

     if  $CMP-PerDate >= $HrsDate
         add #UI_WKLY_HOURS to #TotalEIHrs
     end-if

     if  $CMP-PerDate >= $EarnsDate
         add #UI_WKLY_EARNS to #TotalEIEarns


     get $EI-Period-Dt          -
         #EI-Earnings           -
         #Freq                  -
         from Ins_Earns(#Week#) -
         UI_Period_Dt           -
         UI_Earns_Cur           -
         Pays_in_Year

     if #Week# = 0
       add 1 to #Week#
       put $CMP-PerDate           -
           #UI_WKLY_EARNS         -
           #Cur-Freq              -
           into Ins_Earns(#Week#) -
           UI_Period_Dt           -
           UI_Earns_Cur           -
           Pays_in_Year
     else
       if ((($EI-Period-Dt = $CMP-PerDate) and
            (#Freq = #Cur-Freq)) or
           (#Week# = 27))
         ARRAY-ADD #UI_WKLY_EARNS to INS_EARNS(#Week#) UI_Earns_Cur
       else
         do Convert-To-DTU-Date($Prior-Begin-Dt, $DTU-Begin-Dt)
         do DTU-subtract-days($DTU-Begin-Dt, 7, $DTU-Begin-Dt)
         do Convert-From-DTU-Date($DTU-Begin-Dt, $CMP-Pr-Begin-L7)
         do Format-DateTime($CMP-Pr-Begin-L7, $CMP-Pr-Begin-L7, {DEFCMP}, '', '')
         if $CMP-PerDate > $CMP-Pr-Begin-L7 and (#UI_WKLY_EARNS > 0)
           add 1 to #Week#
           put $CMP-PerDate           -
               #UI_WKLY_EARNS         -
               #Cur-Freq              -
               into Ins_Earns(#Week#) -
               UI_Period_Dt           -
               UI_Earns_Cur           -
               Pays_in_Year
         else
           do Insert-Gap-Records
         end-if
       end-if
     end-if
     end-if

  else
    if #Earnings-Year = 1996

      if #TotalWeeks < 20

        if &IE.UI_Use_Wkly = 'Y'
            if &IE.UI_Equiv_Weeks_Cur > 0
                move &IE.UI_Earns_Cur   to #UI_Earns_cur
                if #UI_Earns_Cur > 750
                   move 750 to #UI_Earns_Cur
                end-if
                Move 1                  to #UI_Equiv_Weeks_cur
                add #UI_Equiv_Weeks_Cur to #TotalUIWeeks
                add #UI_Equiv_Weeks_Cur to #TotalWeeks
                add #UI_Earns_Cur       to #TotalUIEarns
            end-if
        else
          if &IE.UI_Equiv_Weeks_Cur > 0                                 !K  LLMIN
            add &IE.UI_Equiv_Weeks_Cur to #TotalWeeks
            if ((#TotalWeeks > 20) and
                (&IE.UI_Equiv_Weeks_Cur = 2))
!              let #UI_Equiv_Weeks_Cur = 1           !we need up to 52 weeks
              let #UI_Earns_Cur = round(&IE.UI_Earns_Cur / 2, 2)
              if #UI_Earns_Cur > 750
                 move 750 to #UI_Earns_Cur
              end-if
            else
              move &IE.UI_Earns_Cur to #UI_Earns_Cur
              move &IE.UI_equiv_weeks_cur to #UI_Equiv_Weeks_Cur
              if ((#UI_Equiv_Weeks_Cur >= 0.5) and
                  (#UI_Equiv_Weeks_Cur <  1.5) and
                  (#UI_Earns_Cur >  750))
                    move  750 to #UI_Earns_Cur
              else
                if ((#UI_Equiv_Weeks_Cur >= 1.5) and
                    (#UI_Equiv_Weeks_Cur <  2.08) and
                    (#UI_Earns_Cur >  1500))
                      move 1500 to #UI_Earns_Cur
                else
                  if ((#UI_Equiv_Weeks_Cur >= 2.08) and
                      (#UI_Equiv_Weeks_Cur <  2.26) and
                      (#UI_Earns_Cur >  1625))
                        move 1625 to #UI_Earns_Cur
                  else
                    if ((#UI_Equiv_Weeks_Cur >= 2.26) and
                        (#UI_Equiv_Weeks_Cur <  3.25) and
                        (#UI_Earns_Cur >  1772.72))
                          move 1772.72 to #UI_Earns_Cur
                    else
                      if ((#UI_Equiv_Weeks_Cur >= 3.25) and
                          (#UI_Equiv_Weeks_Cur <  4.16) and
                          (#UI_Earns_Cur >  3000))
                            move 3000 to #UI_Earns_Cur
                      else
                        if ((#UI_Equiv_Weeks_Cur >= 4.16) and
                            (#UI_Equiv_Weeks_Cur <  4.75) and
                            (#UI_Earns_Cur >  3250))
                              move 3250 to #UI_Earns_Cur
                        else
                          if ((#UI_Equiv_Weeks_Cur >= 4.75) and
                              (#UI_Equiv_Weeks_Cur <  5.5) and
                              (#UI_Earns_Cur >  3900))
                                move 3900 to #UI_Earns_Cur
                          end-if
                        end-if
                      end-if
                    end-if
                  end-if
                end-if
              end-if
            end-if
            add #UI_Equiv_Weeks_Cur to #TotalUIWeeks
            add #UI_Earns_Cur       to #TotalUIEarns
          end-if
        end-if
      else
         if &IE.UI_Equiv_Weeks_Cur > 0 and
            &IE.UI_Earns_Cur > 0

            add &IE.UI_Equiv_Weeks_Cur to #TotalWeeks    !just accumulate weeks
            add &IE.UI_Equiv_Weeks_Cur to #TotalUIWeeks
         end-if
      end-if

    end-if
  end-if







  move &IE.Earns_End_Dt       to $Earns_End_Dt

  if $Multi_Pay_Periods = 'Y'
    if #Least_Periods_Per_Year > 0
      move #Least_Periods_Per_Year to #Periods_Per_Year
    else
      move &IE.UI_Periods_Per_Yr to #Periods_Per_Year
    end-if
  else
    move &IE.UI_Periods_Per_Yr to #Periods_Per_Year
  end-if

  move &IE.COMPANY       to $Prev-Company
  move $CMP-PerDate      to $CMP-Prev-Period
  move &IEC.PAY_BEGIN_DT to $Prior-Begin-Dt

  if #TotalWeeks >= 52
    EXIT-SELECT
  end-if

FROM  PS_INS_EARNS_BAL IE
WHERE IE.EMPLID  = &P.EmplID
  AND ROE_NBR        =  ' '
  AND (
     (IE.UI_PERIOD_DT <=
    (SELECT MAX(UI_PERIOD_DT)
     FROM  PS_INS_EARNS_BAL
     WHERE EMPLID  = &P.EmplID
       AND ROE_NBR        =  ' '
       AND EARNS_END_DT <= &R.UI_Payable_Dt))
   OR (IE.UI_PERIOD_DT <=
    (SELECT MIN(UI_PERIOD_DT)
     FROM  PS_INS_EARNS_BAL
     WHERE EMPLID  = &P.EmplID
       AND ROE_NBR        =  ' '
       AND EARNS_END_DT >= &R.UI_Payable_Dt)))
ORDER BY IE.UI_PERIOD_DT DESC,
         IE.EARNS_END_DT DESC
end-select

end-procedure


begin-procedure Process-Gap-Early-PP

  do Find-Non-1996-Periods

  if (#Week# < #Non1996_Period_Count) and ($DetailRequired = 'N')
    move 'Y' to $DetailRequired
  end-if

  while (#Week# < #Non1996_Period_Count) and ($DetailRequired = 'Y')
    add 1 to #Week#
    put 0  -
       into Ins_Earns(#Week#) -
       UI_Earns_Cur
  end-while

end-procedure


begin-procedure Check-Earnings-Year

  let #Earnings-Year = 0

begin-SELECT
PCB.BALANCE_YEAR
IEC.PAY_BEGIN_DT
IEC.PAY_END_DT

  let #Earnings-Year = &PCB.BALANCE_YEAR

FROM PS_PAY_CALENDAR   IEC,
     PS_PAY_CAL_BAL_ID PCB,
     PS_JOB            IEJ
WHERE IEJ.EMPLID     = &P.EMPLID
  AND IEJ.EFFDT      = (SELECT MAX(IEJ2.EFFDT)
                        FROM PS_JOB IEJ2
                        WHERE IEJ2.EMPLID    = IEJ.EMPLID
                        AND   IEJ2.EMPL_RCD = IEJ.EMPL_RCD
                        AND   IEJ2.EFFDT    <= &IE.UI_PERIOD_DT)
  AND IEJ.EFFSEQ     = (SELECT MAX(IEJ3.EFFSEQ)
                        FROM PS_JOB IEJ3
                        WHERE IEJ3.EMPLID    = IEJ.EMPLID
                        AND   IEJ3.EMPL_RCD = IEJ.EMPL_RCD
                        AND   IEJ3.EFFDT     = IEJ.EFFDT)
  AND IEC.COMPANY    = IEJ.COMPANY
  AND IEC.PAYGROUP   = IEJ.PAYGROUP
  AND IEC.PAY_END_DT = (SELECT MAX(IEC2.PAY_END_DT)
                        FROM PS_PAY_CALENDAR IEC2
                        WHERE IEC2.COMPANY     = IEC.COMPANY
                        AND   IEC2.PAYGROUP    = IEC.PAYGROUP
                        AND   IEC2.PAY_END_DT <= &IE.UI_PERIOD_DT)
  AND PCB.COMPANY    = IEC.COMPANY
  AND PCB.PAYGROUP   = IEC.PAYGROUP
  AND PCB.PAY_END_DT = IEC.PAY_END_DT
  AND PCB.BALANCE_ID = $Calendar_Year_Id
end-SELECT

end-procedure


begin-procedure Insert-Gap-Records

  move 'Y' to $DetailRequired
  let $Half-Month = 'Y'

  while ((#Week# <= 26) and
         ($CMP-PerDate < $CMP-Pr-Begin-L7))

 !   display 'in while in insert gap record'
    add 1 to #Week#

    do Format-DateTime($CMP-Pr-Begin-L7, $CMP-Pr-Begin-L7, {DEFCMP}, '', 'native')
    do Convert-To-DTU-Date($CMP-Pr-Begin-L7, $DTU-Begin-Dt)

    evaluate &IE.UI_PERIODS_PER_YR
      when = 1
        do DTU-add-months($DTU-Begin-Dt, -12, $DTU-Begin-Dt)
      when = 2
        do DTU-add-months($DTU-Begin-Dt, -6, $DTU-Begin-Dt)
      when = 12
        do DTU-add-months($DTU-Begin-Dt, -1, $DTU-Begin-Dt)
      when = 24
        if $Half-Month = 'Y'
          do DTU-subtract-days($DTU-Begin-Dt, 15, $DTU-Begin-Dt)
          let $Half-Month = 'N'
        else
          do DTU-add-days($DTU-Begin-Dt, 15, $DTU-Begin-Dt)
          let $Half-Month = 'Y'
          do DTU-add-months($DTU-Begin-Dt, -1, $DTU-Begin-Dt)
        end-if
      when = 26
      when = 27
        do DTU-subtract-days($DTU-Begin-Dt, 14, $DTU-Begin-Dt)
      when = 52
      when = 53
        do DTU-subtract-days($DTU-Begin-Dt, 7, $DTU-Begin-Dt)
      when = 365
      when = 366
        do DTU-subtract-days($DTU-Begin-Dt, 1, $DTU-Begin-Dt)

    end-evaluate

    do Convert-From-DTU-Date($DTU-Begin-Dt, $CMP-Pr-Begin-L7)
    do Format-DateTime($CMP-Pr-Begin-L7, $CMP-Pr-Begin-L7, {DEFCMP}, '', '')


  end-while

  add 1 to #Week#
  put $CMP-PerDate           -
      #UI_WKLY_EARNS         -
      #Cur-Freq              -
      into Ins_Earns(#Week#) -
      UI_Period_Dt           -
      UI_Earns_Cur           -
      Pays_in_Year


end-procedure


begin-procedure Put-Ins-Earns-Array

    add 1 to #Week#
    add #UI_Earns_Cur to #TotalEarnings

    put &IE.Wage_Loss_Plan      -
        &IE.UI_Period_Dt        -
        $Earns_End_Dt           -
        #UI_Earns_Cur           -
        #UI_Equiv_Weeks_Cur     -
        &IE.ROE_NBR                -
        $UI_Use_Wkly            -
        &FT.Frequency_Type      -
      into Ins_Earns(#Week#)    -
         Wage_Loss_Plan         -
         UI_Period_Dt           -
         Earns_End_Dt           -
         UI_Earns_Cur           -
         UI_Equiv_Weeks_Cur     -
         ROE_NBR                   -
         UI_Use_Wkly            -
         Pay_Frequency

end-procedure


begin-procedure Get-Ins-Weeks

  do Format-DateTime($FinalPayEndDt, $out1, {DEFCMP}, '', '' )
  do Format-DateTime(&R.UI_Payable_Dt, $out2, {DEFCMP}, '', '')

  if $out1 >= $out2
    move $FinalPayEndDt    to $LatestDt
  else
    move &R.UI_Payable_Dt to $LatestDt
  end-if

  move '1' to $Year4

  Do convert-to-dtu-date($LatestDt,$out)
  Let #month = -12
  Do dtu-add-months($out,#month, $out)
  Do convert-from-dtu-date($out,$PriorYearDt)


begin-select

#ifdef DB2ALL
DECIMAL(SUM(EI1.UI_EQUIV_WEEKS_CUR), 15, 3) &UI_Weeks
#else
SUM(EI1.UI_EQUIV_WEEKS_CUR)         &UI_Weeks
#end-if

  move &UI_Weeks to #UI_Weeks
  add .49999 to #UI_Weeks               !so will round to next integer
  if #UI_Weeks > 52
    let #UI_Weeks = 52
  end-if

FROM  PS_INS_EARNS_BAL EI1
WHERE EI1.EMPLID      = &P.EmplID
  AND EI1.UI_PERIOD_DT <= $LatestDt
  AND EI1.UI_PERIOD_DT >= $PriorYearDt
  AND EI1.ROE_NBR       =  ' '
end-SELECT

end-procedure


begin-procedure Get-Vac-Hol-Oth-Pay

  move 0  to #ErnCd#
  move 0  to #VacationPay
  move 0  to #HolidayPay
  move 0  to #HolidayCount
  move 0  to #Box_Value

  do Get-FinalPayBeginDt

begin-SELECT
TFB.BOX

#ifdef DB2ALL
DECIMAL(SUM(V.OTH_EARNS), 15, 3) &Vac_Earns
#else
SUM(V.OTH_EARNS)     &Vac_Earns
#end-if


! POSSIBLE NEED FOR MORE THAN ONE ERNCD FOR VAC PAYOUT
    move &Vac_Earns to #VacationPay


FROM  PS_PAY_CHECK     PC,
      PS_PAY_OTH_EARNS  V,
      PS_EARNINGS_TBL  ET,
      PS_PAY_EARNINGS  PE,
      PS_TAXFORM_TBL  TFT,
      PS_TAXFORM_BOX  TFB,
      PS_TAXFORM_ERN  TFE
WHERE PC.COMPANY    = &R.Company
  AND PC.PAYGROUP   = &R.PayGroup
! AND PC.Pay_End_Dt = $FinalPayEndDt
  AND PC.EMPLID     = &P.EmplID
  AND V.COMPANY     = PC.COMPANY
  AND V.PAYGROUP    = &R.PayGroup
  AND V.PAY_END_DT  = PC.PAY_END_DT
  AND V.OFF_CYCLE   = PC.OFF_CYCLE
  AND V.PAGE_NUM       = PC.PAGE_NUM
  AND V.LINE_NUM       = PC.LINE_NUM
  AND V.SEPCHK      = PC.SEPCHK
  AND PE.COMPANY    = V.COMPANY
  AND PE.PAYGROUP   = V.PAYGROUP
  AND PE.PAY_END_DT = V.PAY_END_DT
  AND PE.OFF_CYCLE  = V.OFF_CYCLE
  AND PE.PAGE_NUM      = V.PAGE_NUM
  AND PE.LINE_NUM      = V.LINE_NUM
  AND PE.ADDL_NBR      = V.ADDL_NBR
  AND PE.EARNS_BEGIN_DT >=  $FinalPayBeginDt
  AND PE.EARNS_END_DT   <=  $FinalPayEndDt
  AND ET.ERNCD      = V.ERNCD
  AND ET.EFFDT      =
      (SELECT MAX(EFFDT)
       FROM  PS_EARNINGS_TBL
       WHERE ERNCD =   ET.ERNCD
         AND EFFDT <=  V.PAY_END_DT)
  AND ET.ADD_GROSS   <> 'N'
  AND ET.SUBJECT_CUI <> 'N'
  AND TFT.TAXFORM_ID = 'E'
  AND TFT.EFFDT =
      (SELECT
       MAX(EFFDT)
       FROM PS_TAXFORM_TBL
       WHERE EFFDT <= $AsOfDate
         AND TAXFORM_ID = 'E')
  AND TFB.TAXFORM_ID = TFT.TAXFORM_ID
  AND TFB.EFFDT      = TFT.EFFDT
  AND TFB.BOX       IN ('17A')
  AND TFE.TAXFORM_ID = TFT.TAXFORM_ID
  AND TFE.EFFDT      = TFT.EFFDT
  AND TFE.BOX        = TFB.BOX
  AND TFE.ERNCD      = V.ERNCD
GROUP BY TFB.BOX
ORDER BY TFB.BOX
end-SELECT

  move 'N' to $FutureVacHolPay

begin-SELECT
TFB2.BOX
FP.ERNCD
FP.HOLIDAY
FP.FUTURE_PAY_AMT

  if rtrim(&TFB2.Box, ' ') = '17A'
    add &FP.Future_Pay_Amt to #VacationPay
!    display 'In future 17A'
  else
!     display 'In future 17C'
!     if &FP.ErnCd <> $PriorErnCd
        add 1 to #ErnCd#
        move &FP.ErnCd to $ErnCd
        do Get-Earnings-Name

        PUT                    &FP.ErnCd      -
                               $EarningsAbbrv -
        INTO OTH_EARNS(#ERNCD#) ERNCD         -
                                EARNINGSABBRV

        move &FP.ErnCd to $PriorErnCd
 !    end-if

      ARRAY-ADD &FP.Future_Pay_Amt to OTH_EARNS(#ERNCD#) AMOUNT
  end-if

  move 'Y' to $FutureVacHolPay

FROM  PS_ROE_FUTURE_PAY   FP,
      PS_TAXFORM_TBL    TFT2,
      PS_TAXFORM_BOX    TFB2,
      PS_TAXFORM_ERN    TFE2
WHERE FP.EMPLID         = &P.EmplID
  AND FP.COMPANY        = &R.Company
  AND FP.WAGE_LOSS_PLAN = &R.Wage_Loss_Plan
  AND FP.UI_PAYABLE_DT  = &R.UI_Payable_Dt
  AND FP.ROE_SEQ        = &R.ROE_Seq
  AND FP.ERNCD         <> &PG.ErnCd_Reg_Earns
  AND TFT2.TAXFORM_ID = 'E'
  AND TFT2.EFFDT =
      (SELECT
       MAX(EFFDT)
       FROM PS_TAXFORM_TBL
       WHERE EFFDT <= $AsOfDate
         AND TAXFORM_ID = 'E')
  AND TFB2.TAXFORM_ID = TFT2.TAXFORM_ID
  AND TFB2.EFFDT      = TFT2.EFFDT
  AND TFB2.BOX       IN ('17A','17C')
  AND TFE2.TAXFORM_ID = TFT2.TAXFORM_ID
  AND TFE2.EFFDT      = TFT2.EFFDT
  AND TFE2.BOX        = TFB2.BOX
  AND TFE2.ERNCD      = FP.ERNCD
ORDER BY FP.ERNCD ASC
end-SELECT


begin-SELECT
EB.BOX
EB.EFFDT
EB.TAXFORM_ID

  do Get-Oth_Erns

FROM PS_TAXFORM_TBL ET,
     PS_TAXFORM_BOX EB
WHERE ET.TAXFORM_ID = 'E'
  AND ET.EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_TAXFORM_TBL
      WHERE EFFDT <= $AsOfDate
        AND TAXFORM_ID = 'E')
  AND EB.TAXFORM_ID = ET.TAXFORM_ID
  AND EB.EFFDT      = ET.EFFDT
  AND EB.BOX        = '17C'
end-SELECT


begin-SELECT
TFB3.BOX
FP1.ERNCD
FP1.HOLIDAY
FP1.FUTURE_PAY_AMT

!  display 'In future 17B'
  add 1 to #HolidayCount

  PUT                         &FP1.Holiday        -
                              &FP1.Future_Pay_Amt -
  INTO HOLIDAYS(#HOLIDAYCOUNT) HOLIDAY           -
                               AMOUNT

  move 'Y' to $FutureVacHolPay

FROM  PS_ROE_FUTURE_PAY   FP1,
      PS_TAXFORM_TBL    TFT3,
      PS_TAXFORM_BOX    TFB3,
      PS_TAXFORM_ERN    TFE3
WHERE FP1.EMPLID         = &P.EmplID
  AND FP1.COMPANY        = &R.Company
  AND FP1.WAGE_LOSS_PLAN = &R.Wage_Loss_Plan
  AND FP1.UI_PAYABLE_DT  = &R.UI_Payable_Dt
  AND FP1.ROE_SEQ        = &R.ROE_Seq
  AND FP1.ERNCD         <> &PG.ErnCd_Reg_Earns
  AND TFT3.TAXFORM_ID = 'E'
  AND TFT3.EFFDT =
      (SELECT
       MAX(EFFDT)
       FROM PS_TAXFORM_TBL
       WHERE EFFDT <= $AsOfDate
         AND TAXFORM_ID = 'E')
  AND TFB3.TAXFORM_ID = TFT3.TAXFORM_ID
  AND TFB3.EFFDT      = TFT3.EFFDT
  AND TFB3.BOX        = '17B'
  AND TFE3.TAXFORM_ID = TFT3.TAXFORM_ID
  AND TFE3.EFFDT      = TFT3.EFFDT
  AND TFE3.BOX        = TFB3.BOX
  AND TFE3.ERNCD      = FP1.ERNCD
ORDER BY FP1.HOLIDAY DESC
end-SELECT

end-procedure


begin-procedure Get-FinalPayBeginDt

begin-select
BD.PAY_BEGIN_DT

  move &BD.Pay_Begin_Dt to $FinalPayBeginDt

FROM  PS_PAY_CALENDAR BD
WHERE BD.COMPANY          = &R.Company
  AND BD.PAYGROUP         = &R.PayGroup
  AND BD.PAY_END_DT       = $FinalPayEndDt
ORDER BY BD.PAY_BEGIN_DT DESC
end-SELECT

end-procedure


begin-procedure Get-Oth_Erns

begin-SELECT
O.ERNCD

#ifdef DB2ALL
DECIMAL(SUM(O.OTH_EARNS), 15, 3) &Earns
#else
SUM(O.OTH_EARNS)         &Earns
#end-if

  add 1 to #ErnCd#
  move &O.ErnCd to $ErnCd
  do Get-Earnings-Name

  PUT                    &O.ErnCd       -
                         $EarningsAbbrv -
                         &Earns         -
  INTO OTH_EARNS(#ERNCD#) ERNCD         -
                          EARNINGSABBRV -
                          AMOUNT

FROM  PS_PAY_CHECK     PC,
      PS_PAY_OTH_EARNS  O,
      PS_TAXFORM_ERN   EE,
      PS_PAY_EARNINGS  PR
WHERE PC.COMPANY    = &R.Company
  AND PC.PAYGROUP   = &R.PayGroup
! AND PC.Pay_End_Dt = $FinalPayEndDt
  and PC.EMPLID     = &P.EmplID
  AND O.COMPANY     = PC.COMPANY
  AND O.PAYGROUP    = &R.PayGroup
  AND O.PAY_END_DT  = PC.PAY_END_DT
  AND O.OFF_CYCLE   = PC.OFF_CYCLE
  AND O.PAGE_NUM       = PC.PAGE_NUM
  AND O.LINE_NUM       = PC.LINE_NUM
  AND O.SEPCHK      = PC.SEPCHK
  AND PR.COMPANY    = O.COMPANY
  AND PR.PAYGROUP   = O.PAYGROUP
  AND PR.PAY_END_DT = O.PAY_END_DT
  AND PR.OFF_CYCLE  = O.OFF_CYCLE
  AND PR.PAGE_NUM      = O.PAGE_NUM
  AND PR.LINE_NUM      = O.LINE_NUM
  AND PR.ADDL_NBR      = O.ADDL_NBR
  AND PR.EARNS_BEGIN_DT >=  $FinalPayBeginDt
  AND PR.EARNS_END_DT <=  $FinalPayEndDt
  AND EE.ERNCD      = O.ERNCD
  AND EE.TAXFORM_ID = &EB.TAXFORM_ID
  AND EE.EFFDT      = &EB.EFFDT
  AND EE.BOX        = &EB.BOX
GROUP BY O.ERNCD
end-SELECT

end-procedure


begin-procedure Get-Name-Phone

  move ' ' to $Name
  move ' ' to $Phone

begin-select
P1.NAME
P1.LANG_CD
E1.POSITION_PHONE
J1.EMPL_RCD

  move &P1.Name to $Name
  ! do Rotate-Name                             -- WITH 8.9 NAME ALREADY IN FIRST/LAST FORMAT   GWC
  move &P1.LANG_CD to $Pref-Lang
  move &E1.Position_Phone to $Phone

FROM  PS_PERSONAL_DT_FST P1, PS_EMPLOYMENT E1, PS_JOB  J1
WHERE P1.EMPLID    = $EmplID
  AND E1.EMPLID    = P1.EMPLID
  AND J1.EFFDT     =
       (SELECT MAX(J3.EFFDT)
        FROM   PS_JOB J3
        WHERE  J3.EMPLID     = J1.EMPLID
          AND  J3.EMPL_RCD  = J1.EMPL_RCD
          AND  J3.EFFDT <= $AsOfDate)
  AND  J1.EFFSEQ =
       (SELECT MAX(J4.EFFSEQ)
        FROM   PS_JOB J4
        WHERE  J4.EMPLID     = J1.EMPLID
          AND  J4.EFFDT      = J1.EFFDT
          AND  J4.EMPL_RCD  = J1.EMPL_RCD)
  AND J1.EMPL_STATUS = 'A'
  AND J1.EMPL_RCD   =
      (SELECT MIN(J5.EMPL_RCD)
       FROM PS_JOB J5
       WHERE J5.EMPLID       = J1.EMPLID
         AND J5.EFFDT        = J1.EFFDT
         AND J5.EFFSEQ       = J1.EFFSEQ
         AND J5.EMPL_STATUS  = J1.EMPL_STATUS)
  AND J1.EMPL_RCD = E1.EMPL_RCD
  AND J1.EMPLID    = E1.EMPLID

ORDER BY J1.EMPL_RCD DESC
end-select

end-procedure


begin-procedure Init-Ins-Earns

  move 1 to #i

  while #i <= 27
  put ' '                 -
      ' '                 -
      ' '                 -
      000.00              -
      000.00              -
      ' '                 -
      ' '                 -
      ' '                 -
      000.00              -
      000.00              -
    into Ins_Earns(#I)    -
       Wage_Loss_Plan     -
       UI_Period_Dt       -
       Earns_End_Dt       -
       UI_Earns_Cur       -
       UI_Equiv_Weeks_Cur -
       ROE_NBR               -
       UI_Use_Wkly        -
       Pay_Frequency      -
       Pays_in_Year       -
       EI_Hours
    add 1 to #i
  end-while

!  Initialize the Other Earnings array

  move 1 to #i

  while #i <= 20
  put ' '                 -
      ' '                 -
      000.00              -
    into Oth_Earns(#i)    -
       ErnCd              -
       EarningsAbbrv      -
       Amount
    add 1 to #i
  end-while

!  Initialize the Holiday

  move 1 to #i

  while #i <= 5
  put ' '                 -
      000.00              -
    into Holidays(#i)     -
       Holiday            -
       Amount
    add 1 to #i
  end-while


end-procedure


begin-procedure Get-Last-ROE_NBR

begin-select
I.ROE_NBR_LAST
  move &I.ROE_NBR_LAST to #ROE_NBR_LAST
  add 1 to #ROE_NBR_LAST
FROM  PS_INSTALLATION I
end-select

end-procedure


begin-procedure Update-ROE
   do Format-Number(#ROE_NBR_LAST, $ROE_NBR, '09999999')

begin-SQL
UPDATE PS_ROE SET ROE_NBR          = $ROE_NBR,
                  ROE_PROCESS   = 'C'
WHERE EMPLID = &P.EmplID
  AND ROE_NBR   = ' '
  AND ROE_PROCESS = 'G'

end-SQL

end-procedure


begin-procedure Update-PayInsEarns
   do Format-Number(#ROE_NBR_LAST, $ROE_NBR, '09999999')

begin-SQL
UPDATE PS_INS_EARNS_BAL
SET ROE_NBR = $ROE_NBR
WHERE EMPLID  = &P.EmplID
  AND ROE_NBR        =  ' '
  AND EARNS_END_DT <= $Finalpayenddt
  AND UI_PERIOD_DT <= $Finalpayenddt
end-SQL

end-procedure


begin-procedure Update-Last-ROE_NBR
  subtract 1 from #ROE_NBR_LAST            !only want last # actually used

begin-SQL
UPDATE PS_INSTALLATION SET ROE_NBR_LAST = #ROE_NBR_LAST
end-SQL

end-procedure


begin-procedure Look-For-Cheques

begin-SELECT
C.EMPLID
C.PAY_END_DT
C.PAYGROUP
C.CHECK_DT
C.TOTAL_GROSS
C.NET_PAY

  move 'Y' to $Bypass-ROE

FROM PS_PAY_CHECK C
WHERE C.EMPLID  = &P.Emplid
  AND C.COMPANY = &R.Company
  AND PAYCHECK_STATUS not IN ('F','R', 'A')
  AND TOTAL_GROSS > 0
end-SELECT

end-procedure


begin-procedure Validate-Box-15C

  let $Prt_Exception = ''

! Generate Exception if Box 15C p.p.1 amount is zero.
  if #Box15C_PP1_Amt = 0
      let $Prt_Exception = '15C'
      do Insert-Prt-Exceptions
  end-if


! Report error if Box 15C p.p. 1 amount is less than or equal to
! Box 17A amount.
  if ( #Box15C_PP1_Amt <> 0 or
       #VacationPay <> 0 )
     if #Box15C_PP1_Amt <= #VacationPay
       let $Prt_Exception = '17A'
       do Insert-Prt-Exceptions
     end-if
  end-if


! Report error if Box 15C p.p. 1 amount is less than or equal to
! Box 17B amount.
  if ( #Box15C_PP1_Amt <> 0 or
       #Stat_Holiday_Pay <> 0 )
     if #Box15C_PP1_Amt <= #Stat_Holiday_Pay
       let $Prt_Exception = '17B'
       do Insert-Prt-Exceptions
     end-if
  end-if


! Report warning if Box 15C p.p. 1 amount is less than Box 17C amount.
! Report error if Box 15C p.p. 1 amount is equal to Box 17C amount.
  if ( #Box15C_PP1_Amt <> 0 or
       #Other_Monies <> 0 )
     if #Box15C_PP1_Amt <= #Other_Monies
       let $Prt_Exception = '17C'
       do Insert-Prt-Exceptions
     end-if
  end-if

end-procedure


begin-procedure Print-Test-ROE


  print '02XXXXXXXXXXXXXXXXXX'   (3,28)                      !Box  2

  print '03XXXXXXXXXXXXXXXXXX'   (3,54)                      !Box  3

  print 'Company Name Here'      (6,1)                       !Box  4

  print 'Company Address Line 1' (8,1)                       !Box  4

  print 'Company Address Line 2' (9,1)                       !Box  4

  print 'Company Address Line 3' (10,1)                      !Box  4

  print '123456789RT0001'        (6,54)                      !Box  5

  print 'Pay Period Type'        (10,54)                     !Box  6

  print 'X9X 9X9'               (13,43) edit xxxbxxxx        !Box  7

  print '999999999'             (13,54)  edit xxx-xxx-xxx    !Box  8

  print 'Employee''s Name'      (19,3)                       !Box  9

  print 'Employee Address Line1' (20,3)                      !Box  9

  print 'Employee Address Line2' (21,3)                      !Box  9

  print 'Employee Address Line3' (22,3)                      !Box  9

  print '10 MM  YYYY'           (16,70)                      !Box 10

  print '11 MM  YYYY'           (20,70)                      !Box 11

  print '12 MM  YYYY'           (23,70)                      !Box 12

  print 'Employee Job Title'    (27,3)                       !Box 13

  print 'X'                     (27,45)                      !Box 14a

  if (($RC_Pay.Roe_Form_Lang = 'F') or                       !Box 14b
      ($RC_Pay.Roe_Form_Lang = 'FR'))                        !Box 14b
    print 'X'                   (27,58)                      !Box 14b
  else                                                       !Box 14b
    print 'X'                   (27,55)                      !Box 14b
  end-if                                                     !Box 14b

  print '14 MM  YYYY'           (27,70)                      !Box 14b


  if (($RC_Pay.Roe_Form_Lang = 'F') or                       !Box 15a
      ($RC_Pay.Roe_Form_Lang = 'FR'))                        !Box 15a
    print '999999999.15'        (30,29)                      !Box 15a
  else                                                       !Box 15a
    print '999999999.15'        (31,29)                      !Box 15a
  end-if

  print '99999999.15'           (36,30)                      !Box 15b


  if (($RC_Pay.Roe_Form_Lang = 'F') or                       !Box 16
      ($RC_Pay.Roe_Form_Lang = 'FR'))                        !Box 16
    print 'G'                   (30,73)                      !Box 16
    print 'Contact Name'        (35,44)                      !Box 16b
    print '999  999-9999'       (37,57)                      !Box 16b
  else
    print 'G'                   (31,73)                      !Box 16
    print 'Contact Name'        (34,44)                      !Box 16b
    print '999  999-9999'       (36,57)                      !Box 16b
  end-if


  print '9999999.99'            (43,04)                      !Box 15c

  print '9999999.99'            (43,18)                      !Box 15c

  print '9999999.99'            (43,33)                      !Box 15c

  print '9999999.99'            (45,04)                      !Box 15c

  print '9999999.99'            (45,18)                      !Box 15c

  print '9999999.99'            (45,33)                      !Box 15c

  print '9999999.99'            (47,04)                      !Box 15c

  print '9999999.99'            (47,18)                      !Box 15c

  print '9999999.99'            (47,33)                      !Box 15c

  print '9999999.99'            (49,04)                      !Box 15c

  print '9999999.99'            (49,18)                      !Box 15c

  print '9999999.99'            (49,33)                      !Box 15c

  print '9999999.99'            (51,04)                      !Box 15c

  print '9999999.99'            (51,18)                      !Box 15c

  print '9999999.99'            (51,33)                      !Box 15c

  print '9999999.99'            (53,04)                      !Box 15c

  print '9999999.99'            (53,18)                      !Box 15c

  print '9999999.99'            (53,33)                      !Box 15c

  print '9999999.99'            (55,04)                      !Box 15c

  print '9999999.99'            (55,18)                      !Box 15c

  print '9999999.99'            (55,33)                      !Box 15c

  print '9999999.99'            (57,04)                      !Box 15c

  print '9999999.99'            (57,18)                      !Box 15c

  print '9999999.99'            (57,33)                      !Box 15c

  print '9999999.99'            (59,04)                      !Box 15c

  print '9999999.99'            (59,18)                      !Box 15c

  print '9999999.99'            (59,33)                      !Box 15c

  print '99999999.17'           (43,47)                      !Box 17a

  print '17 MM YYYY'            (43,61)                      !Box 17b

  print '99999.99'              (43,72)                      !Box 17b

  print '17 MM YYYY'            (45,61)                      !Box 17b

  print '99999.99'              (45,72)                      !Box 17b

  print '17 MM YYYY'            (47,61)                      !Box 17b

  print '99999.99'              (47,72)                      !Box 17b

  print 'Other Monies #1'       (51,45)                      !Box 17c

  print '9999999.99'            (51,70)                      !Box 17c

  print 'Other Monies #2'       (53,45)                      !Box 17c

  print '9999999.99'            (53,70)                      !Box 17c

  print 'Other Monies #3'       (55,45)                      !Box 17c

  print '9999999.99'            (55,70)                      !Box 17c

  print '19 MM YYYY'            (68,04)                      !Box 19

  print '999999.19'             (68,20)                      !Box 19

  print 'X'                     (67,36)                      !Box 19

  print 'X'                     (69,36)                      !Box 19

  print 'X'                     (73,02)                      !Box 20

  print 'X'                     (73,10)                      !Box 20

  print '999  999-9999'         (73,24)                      !Box 21


end-procedure


begin-procedure PayGroup-Pd-CutOff

  let #PayPeriod-Count  = 0

begin-SELECT
PDC.PAY_END_DT

  add 1 to #PayPeriod-Count

  if #PayPeriod-Count = #PayPeriod-Required
    let $EarnsDate    = &PDC.Pay_End_Dt

    EXIT-SELECT

  else
    let $EarnsDate    = &PDC.Pay_End_Dt

  end-if

FROM PS_PAY_CALENDAR PDC

WHERE PDC.COMPANY       = &R.COMPANY
  AND PDC.PAYGROUP      = &R.PAYGROUP
  AND PDC.PAY_END_DT   <= $Last_Earns_End_Dt
  AND PDC.PAY_END_DT   >= &R.FIRST_DATE_WORKED
  AND PDC.PAY_OFF_CYCLE_CAL = 'N'
ORDER BY PDC.PAY_END_DT DESC


end-SELECT

end-procedure


begin-procedure PayGroup-Pd-Hrs-Dt-CutOff

  let #PayPeriod-Count-Hrs  = 0

begin-SELECT
PDH.PAY_END_DT

  add 1 to #PayPeriod-Count-Hrs

  if #PayPeriod-Count-Hrs = #PayPeriod-Required-Hrs
    let $HrsDate          = &PDH.Pay_End_Dt

    EXIT-SELECT

  else
    let $HrsDate          = &PDH.Pay_End_Dt

  end-if

FROM PS_PAY_CALENDAR PDH

WHERE PDH.COMPANY       = &R.COMPANY
  AND PDH.PAYGROUP      = &R.PAYGROUP
  AND PDH.PAY_END_DT   <= $Last_Earns_End_Dt
  AND PDH.PAY_END_DT   >= &R.FIRST_DATE_WORKED
  AND PDH.PAY_OFF_CYCLE_CAL = 'N'
ORDER BY PDH.PAY_END_DT DESC

end-SELECT

end-procedure


begin-procedure Find-Non-1996-Periods

  let #Non1996_Period_Count  = 0
  let #Count = 0

  do Format-DateTime('19961231', $1996-CutOff, {DEFCMP}, '', 'native')
  do Format-DateTime($1996-CutOff, $CMP-1996-CutOff, {DEFCMP}, '', '')

begin-SELECT
PC1.PAY_END_DT


  do Format-DateTime(&PC1.PAY_END_DT, $CMP-Pay-End-Dt, {DEFCMP}, '', '')
  if $CMP-Pay-End-Dt > $CMP-1996-CutOff
    add 1 to #Non1996_Period_Count
  end-if

  add 1 to #Count

  if #count = #PayPeriod-Required
    EXIT-SELECT
  end-if

FROM PS_PAY_CALENDAR   PC1
WHERE PC1.COMPANY       = &R.COMPANY
  AND PC1.PAYGROUP      = &R.PAYGROUP
  AND PC1.PAY_END_DT   <= $Last_Earns_End_Dt
  AND PC1.PAY_END_DT   >= &R.FIRST_DATE_WORKED
  AND PC1.PAY_OFF_CYCLE_CAL = 'N'
ORDER BY PC1.PAY_END_DT DESC

end-SELECT

end-procedure


begin-procedure Expand_CR_LF

  let #Len_With_CRLF = length($With_CRLF)
  let $Without_CRLF = ''

  if #Len_With_CRLF > 0

    let $Work = $With_CRLF
    let $CR = chr(13)
    let $LF = chr(10)

    while $Work != ''
      let #CR_POS = instr($Work,$CR,1)                     !*** Find the CR

      if #CR_POS > 0 and #CR_POS < #Block_Width
        !--- We found a carriage return in this block.
        !---   Pad as many characters as necessary to fill the block after the CR

        let $Next_Block = rpad(substr($Work,1,#CR_POS - 1),#Block_Width,' ')

        !---   Position the next line to process after the CRLF
        let $Work = substr($Work,#CR_POS + 2,#Len_With_CRLF)   !*** Strip from the left

      else
        !--- We did not find a carriage return in this block.
        !---   Process the entire block as is

        let $Next_Block = substr($Work,1,#Block_Width)

        !---   Position the next line to process after the full block

        let $Work = substr($Work,#Block_Width + 1,#Len_With_CRLF)  !*** Strip from the left

      end-if

      let $Without_CRLF = $Without_CRLF || $Next_Block

    end-while

  end-if

end-procedure


begin-procedure Delete-Prt-Exceptions
begin-SQL  on-error=Ignore
  DELETE FROM PS_R_PAY101CN
        WHERE OPRID          = $Prcs_OprID
        AND   RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-SQL
end-procedure


begin-procedure Insert-Prt-Exceptions
begin-SQL  on-error=Ignore
  INSERT INTO PS_R_PAY101CN (OPRID,
                             RUN_CNTL_ID,
                             COMPANY,
                             EMPLID,
                             WAGE_LOSS_PLAN,
                             UI_PAYABLE_DT,
                             ROE_SEQ,
                             REASON)
                     VALUES ($Prcs_OprID,
                             $Prcs_Run_Cntl_ID,
                             &R.COMPANY,
                             &P.EMPLID,
                             &R.WAGE_LOSS_PLAN,
                             &R.UI_PAYABLE_DT,
                             &R.ROE_SEQ,
                             $Prt_Exception)
end-SQL
end-procedure


begin-procedure Ignore
  !Dummy procedure to avoid error if zero row selected for processing
end-procedure


#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getempnm.sqc'  !Get-Employee-Name procedure
#Include 'geternnm.sqc'  !Get-Earnings-Name procedure
#Include 'getactrs.sqc'  !Get-Action-Reason procedure
#Include 'getlocnm.sqc'  !Get-Location-Name procedure
#Include 'getjobtl.sqc'  !Get-Job-Title procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date comparisons
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'getaddr.sqc'   !Get Person Current Address

