!***********************************************************************
! HPCA012.SQR:  Gross and Fringe Report                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:19:16                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector                   *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !printer and page-size initialization

Begin-REPORT

  do Housekeeping

  if $Cntl_Found = 'Y'
      do Mainline
  else
      print $Hpca012_Data_not_Load (+2,1) Center
  end-if

  print $Hpca012_End_of_Rpt (+2,1) Center

  do Reset-Proc-Status
  do Stdapi-Term

End-REPORT


!***********************************************************************
Begin-Procedure Housekeeping


  move 'HPCA012' to $ReportID
  display ''
  display 'Gross & Fringe Report'
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  do Set-Proc-Indicator
  do Commit-Transaction

  do Init-DateTime
  do Init-Number
  do Get-Current-Datetime
  do Select-Parameters
  do Print-Report-Parameters
  do Create-Arrays
  do Init-Selection-Criteria
  do Get-Report-Columns-Defn
  do Init-Total-Title-and-FootNote
  if $rc_hp_summary_rpt = 'S'
      move $HPCA012_ReportTitle_S to $ReportTitle
  else
      move $HPCA012_ReportTitle_D to $ReportTitle
  end-if

end-procedure

begin-procedure Report-Translation
! Read from HPCA012 program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('HPCA012', 'NOT_DATA_LOADED', $Hpca012_Data_not_Load, #dummy_width)
   do Get_Field_Information ('HPCA012', 'END_OF_REPORT', $Hpca012_End_of_Rpt, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUMMARY_REPORT', $Hpca012_ReportTitle_S, #dummy_width)
   do Get_Field_Information ('HPCA012', 'DETAIL_REPORT', $Hpca012_ReportTitle_D, #dummy_width)
   do Get_Field_Information ('HPCA012', 'NAME', $Hpca012_Name, #dummy_width)
   do Get_Field_Information ('HPCA012', 'EMPLID', $Hpca012_EmplID, #dummy_width)
   do Get_Field_Information ('HPCA012', 'POSITION', $Hpca012_Position, #dummy_width)
   do Get_Field_Information ('HPCA012', 'POSN_POOL', $Hpca012_Position_Pool, #dummy_width)
   do Get_Field_Information ('HPCA012', 'JOBCODE', $Hpca012_JobCode, #dummy_width)
   do Get_Field_Information ('HPCA012', 'PAYCHECK_NBR', $Hpca012_PayCheckNbr, #dummy_width)
   do Get_Field_Information ('HPCA012', 'PAY_END_DT', $Hpca012_PayEndDt, #dummy_width)
   do Get_Field_Information ('HPCA012', 'GROSS', $Hpca012_Col_Total_Grs, #dummy_width)
   do Get_Field_Information ('HPCA012', 'FRINGE', $Hpca012_Col_Total_Frg, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TOTAL', $Hpca012_Col_Total, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_FUNDSRC', $Hpca012_subtitle_FundSrc, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_POSN', $Hpca012_subtitle_Position, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_PROJ', $Hpca012_subtitle_Project, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_DEPT', $Hpca012_subtitle_Dept, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_FYR', $Hpca012_subtitle_FYR, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_ACCT_PRD', $Hpca012_subtitle_ActPrd, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_PAYENDDT', $Hpca012_subtitle_PEndDt, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_PAYGROUP', $Hpca012_subtitle_PayGroup, #dummy_width)
   do Get_Field_Information ('HPCA012', 'SUBTITLE_COMPANY', $Hpca012_subtitle_Company, #dummy_width)
   do Get_Field_Information ('HPCA012', 'NOTE_FROM', $Hpca012_NoteFrom, #dummy_width)
   do Get_Field_Information ('HPCA012', 'NOTE_THRU', $Hpca012_NoteThru, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_FUNDSRC', $Hpca012_Ttl_FundSrc, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_POSN', $Hpca012_Ttl_Position, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_PROJ', $Hpca012_Ttl_Project, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_DEPT', $Hpca012_Ttl_Dept, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_ACCT_PRD', $Hpca012_Ttl_Acct_Prd, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_FYR', $Hpca012_Ttl_Fiscal_Yr, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_PAY_END_DT', $Hpca012_Ttl_Pay_End_Dt, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_PAYGROUP', $Hpca012_Ttl_PayGroup, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_COMPANY', $Hpca012_Ttl_Company, #dummy_width)
   do Get_Field_Information ('HPCA012', 'TTL_GRAND', $Hpca012_Ttl_Grand, #dummy_width)

   let #amount_width = 13
   let $temp_heading = $Hpca012_Col_Total_Grs
   do Centre-Heading($temp_heading, #amount_width, $Hpca012_Col_Total_Grs)
   let $temp_heading = $Hpca012_Col_Total_Frg
   do Centre-Heading($temp_heading, #amount_width, $Hpca012_Col_Total_Frg)
   let $temp_heading = $Hpca012_Col_Total
   let $Msg_Total = $Hpca012_Col_Total
   do Centre-Heading($temp_heading, #amount_width, $Hpca012_Col_Total)
end-procedure


begin-heading 14
#include 'stdhdgtr.sqc'

  print  $Prt_Title_Company                (+2,1)
  print  $Prt_Title_PayGroup               (+1,1)

  if $rc_pay_end_dt = ''
      print $Prt_Title_Acct_Prd            (+2,1)
  else
      print $Prt_Title_PayEndDt            (+2,1)
  end-if

  if $rc_hp_sort_dept = 'Y'
      print $Prt_Title_Dept                (+1,1)
  else
      print ' '                            (+1,1)
  end-if

  if $rc_hp_summary_rpt = 'D'
      evaluate $rc_hp_sort_cd
          when = 'F'
               print $Prt_Title_FundSrc    (+1,1)
               break
          when = 'P'
               print $Prt_Title_Position   (+1,1)
               break
          when = 'R'
               print $Prt_Title_Project    (+1,1)
               break
          when-other
               print ' '                   (+1,1)
               break
      end-evaluate
  else
      print ' '                            (+1,1)
  end-if

  if $rc_hp_summary_rpt = 'D'
      print  $Hpca012_Name               (+2, 1)
      print  $Hpca012_Position           (  ,32)
      print  $Hpca012_PayCheckNbr        (  ,43)
  else
      print  ' '                         (+2, 1)
  end-if

  print  $Hpca012_Col_Total              (  ,51)
  print  $Hpca012_Col_Total              (  ,65)
  print  $ColHeading1_1                  (  ,79)
  print  $ColHeading2_1                  (  ,93)
  print  $ColHeading3_1                  (  ,107)
  print  $ColHeading4_1                  (  ,121)
  print  $ColHeading5_1                  (  ,135)
  print  $ColHeading6_1                  (  ,149)

  if $rc_hp_summary_rpt = 'D'
      print  $Hpca012_EmplID             (+1, 5)
      print  $Hpca012_JobCode            (  ,21)
      print  $Hpca012_Position_Pool      (  ,35)
      print  $Hpca012_PayEndDt           (  ,42)
  else
      print  ' '                         (+1, 1)
  end-if

  print  $Hpca012_Col_Total_Grs          (  ,51)
  print  $Hpca012_Col_Total_Frg          (  ,65)
  print  $ColHeading1_2                  (  ,79)
  print  $ColHeading2_2                  (  ,93)
  print  $ColHeading3_2                  (  ,107)
  print  $ColHeading4_2                  (  ,121)
  print  $ColHeading5_2                  (  ,135)
  print  $ColHeading6_2                  (  ,149)
  print  $Hpca012_Col_Total              (  ,163)

  if $rc_hp_summary_rpt = 'D'
      print '------------------------------' (+1,1)
      print '---------'                      (  ,32)
      print '--------'                       (  ,42)
  else
      print '-------------------------------------------------' (+1,1)
  end-if

  print '-------------'                  (  ,51)
  print '-------------'                  (  ,65)
  print '-------------'                  (  ,79)
  print '-------------'                  (  ,93)
  print '-------------'                  (  ,107)
  print '-------------'                  (  ,121)
  print '-------------'                  (  ,135)
  print '-------------'                  (  ,149)
  print '-------------'                  (  ,163)

end-heading

begin-footing 2
  print $FootNote                        ( 2, 1)
end-footing

!******************************************************************************
begin-procedure CREATE-ARRAYS

   !   0  = Total
   !   1  = Total Gross
   !   2  = Total Fringe
   !  3-8 = User Defined
   Create-array name=ColEligible Size = 9
        field=AddToCol:Char='N'
        field=ColAmount:Number=0

   Create-array name=ErnColDefn  Size = 150
        field=ErnCd:Char
        field=ErnColRefn:Number

   Create-array name=DedColDefn  Size = 150
        field=PlanType:Char
        field=BenefitPlan:Char
        field=DedCd:Char
        field=DedClass:Char
        field=DedSlstxClass:Char
        field=DedChkFlag:Char
        field=DedColRefn:Number

   Create-array name=TaxColDefn  Size = 150
        field=State:Char
        field=Locality:Char
        field=TaxClass:Char
        field=TaxChkFlag:Char
        field=TaxColRefn:Number

   Create-array name=CtxColDefn  Size = 150
        field=Province:Char
        field=TaxClassCan:Char
        field=CtxChkFlag:Char
        field=CtxColRefn:Number

   !  0 = PayCheck
   !  1 = Funding Source
   !  2 = Position
   !  3 = Project ID
   !  4 = Department
   !  5 = Accounting Period
   !  6 = Fiscal Year
   !  7 = Pay End Date
   !  8 = PayGroup
   !  9 = Company
   ! 10 = Grand
   Create-array name=ReportLine  Size = 11
        field=AddToTtl:Char
        field=TotalTitle:Char
        field=Company:Char
        field=PayGroup:Char
        field=FiscalYear:Number
        field=AcctPeriod:Number
        field=PayEndDt:Char
        field=OffCycle:Char
        field=PageNum:Number
        field=LineNum:Number
        field=SepChk:Number
        field=SetID:Char
        field=DeptID:Char
        field=Name:Char
        field=EmplID:Char
        field=EmplRcd:Number
        field=PayCheckNbr:Number
        field=AcctCd:Char
        field=ProjectID:Char
        field=PositionNbr:Char
        field=JobCode:Char
        field=PositionPoolID:Char
        field=Amount:Number:9

end-procedure

!******************************************************************************
begin-procedure Init-Selection-Criteria

  Clear-Array name=ReportLine
  let $Brk_PayCheck_Lvl   = 'N'
  let $Brk_Fund_Src_Lvl   = 'N'
  let $Brk_Position_Lvl   = 'N'
  let $Brk_Project_Lvl    = 'N'
  let $Brk_Dept_Lvl       = 'N'
  let $Brk_Acct_Prd_Lvl   = 'N'
  let $Brk_Fiscal_Yr_Lvl  = 'N'
  let $Brk_Pay_End_Dt_Lvl = 'N'
  let $Brk_PayGroup_Lvl   = 'Y'
  let $Brk_Company_Lvl    = 'Y'

  let #i = 0
  While #i < 11
      put 'N' into ReportLine(#i) AddToTtl       !** Initialize **
      let #i = #i + 1
  End-While

  put 'Y' into ReportLine(10) AddToTtl           !** Grand Total **

  do Format-Number(#rc_fiscal_year,        $Fiscal_Yr, '9999')
  do Format-Number(#rc_accounting_period,  $Acct_Prd,  '999')
  if rtrim($rc_pay_end_dt,' ') = ''
      let $Where_Period1 = 'WHERE GFDAT.FISCAL_YEAR = ' || $Fiscal_Yr
      if #rc_accounting_period = 0
          let $Where_Period2 = ''
      else
          let $Where_Period2 = 'AND GFDAT.ACCOUNTING_PERIOD = ' || $Acct_Prd
      end-if
  else
      let $Where_Period1 = 'WHERE GFDAT.PAY_END_DT = ' || '''' || $rc_pay_end_dt || ''''
      let $Where_Period2 = ''
  end-if

  put 'Y' into ReportLine(8) AddToTtl            !** PayGroup Total **
  put 'Y' into ReportLine(9) AddToTtl            !** Company Total **
  if $rc_hp_all_comppyg = 'Y'
      let $Where_Company = ''
      let $Where_PayGroup = ''
  else
     let $Where_Company = 'AND GFDAT.COMPANY = ' || '''' || $rc_company || ''''
     if $rc_paygroup = ''
         let $Where_PayGroup = ''
     else
         let $Where_PayGroup = 'AND GFDAT.PAYGROUP = ' || '''' || $rc_paygroup || ''''
     end-if
  end-if

  if $rc_hp_all_dept = 'Y'
      let $From_RC_Dept = ''
      let $Where_Dept = ''
  else
      let $From_RC_Dept = ', PS_HP_RC_GRSFR_DPT GFDPT'
      let $Where_Dept   = 'AND GFDPT.OPRID = ' || '''' || $prcs_oprid || '''' ||
                          ' AND GFDPT.RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' ||
                          ' AND GFDAT.SETID_DEPT = GFDPT.SETID ' ||
                          ' AND GFDAT.HP_DEPTID = GFDPT.DEPTID'

  end-if

  if $rc_hp_all_fundsrc = 'Y'
      let $From_RC_Acct = ''
      let $Where_Acct = ''
  else
      let $From_RC_Acct = ', PS_HP_RC_GRSFR_ACT GFACT'
      let $Where_Acct   = 'AND GFACT.OPRID = ' || '''' || $prcs_oprid || '''' ||
                          ' AND GFACT.RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' ||
                          ' AND GFDAT.ACCT_CD = GFACT.ACCT_CD'
  end-if

  if $rc_hp_all_projects = 'Y'
      let $From_RC_Proj = ''
      let $Where_Proj = ''
  else
      let $From_RC_Proj = ', PS_HP_RC_GRSFR_PRJ GFPRJ'
      let $Where_Proj   = 'AND GFPRJ.OPRID = ' || '''' || $prcs_oprid || '''' ||
                          ' AND GFPRJ.RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' ||
                          ' AND GFDAT.PROJECT_ID = GFPRJ.PROJECT_ID'
  end-if

  let $Order_list = 'ORDER BY GFDAT.COMPANY, GFDAT.PAYGROUP'
  if rtrim($rc_pay_end_dt,' ') = ''
      let $Order_list = $Order_list || ', GFDAT.FISCAL_YEAR'
      put 'Y' into ReportLine(6) AddToTtl            !** Fiscal Year Total **
      let $Brk_Fiscal_Yr_Lvl  = 'Y'
      if #rc_accounting_period <> 0 or $rc_hp_sort_fyactpd = 'Y'
          let $Order_list = $Order_list || ', GFDAT.ACCOUNTING_PERIOD'
          put 'Y' into ReportLine(5) AddToTtl        !** Accounting Period Total **
          let $Brk_Acct_Prd_Lvl   = 'Y'
      end-if
  else
      let $Order_list = $Order_list || ', GFDAT.PAY_END_DT'
      put 'Y' into ReportLine(7) AddToTtl        !** Pay End Date Total **
      let $Brk_Pay_End_Dt_Lvl   = 'Y'
  end-if

  if $rc_hp_sort_dept = 'Y'
      let $Order_list = $Order_list || ', GFDAT.SETID_DEPT, GFDAT.HP_DEPTID'
      put 'Y' into ReportLine(4) AddToTtl        !** Department Total **
      let $Brk_Dept_Lvl   = 'Y'
  end-if

  evaluate $rc_hp_sort_cd
      when = 'F'
           let $Order_list = $Order_list || ', GFDAT.ACCT_CD'
           put 'Y' into ReportLine(1) AddToTtl   !** Funding Source Total **
           let $Brk_Fund_Src_Lvl   = 'Y'
           break
      when = 'P'
           let $Order_list = $Order_list || ', GFDAT.POSITION_NBR'
           put 'Y' into ReportLine(2) AddToTtl   !** Position Number Total **
           let $Brk_Position_Lvl   = 'Y'
           break
      when = 'R'
           let $Order_list = $Order_list || ', GFDAT.PROJECT_ID'
           put 'Y' into ReportLine(3) AddToTtl   !** Project ID Total **
           let $Brk_Project_Lvl   = 'Y'
           break
      when-other
           break
  end-evaluate

  if $rc_hp_summary_rpt = 'D'
      put 'Y' into ReportLine(0) AddToTtl        !** PayCheck Total **
      let $Brk_PayCheck_Lvl   = 'Y'
      evaluate $rc_hp_dtl_sort_cd
          when = 'N'
               let $Order_list = $Order_list || ', GFDAT.NAME, GFDAT.EMPLID, GFDAT.EMPL_RCD'
               break
          when = 'C'
               let $Order_list = $Order_list || ', GFDAT.PAYCHECK_NBR'
               break
          when-other
               let $Order_list = $Order_list || ', GFDAT.EMPLID, GFDAT.EMPL_RCD'
               break
      end-evaluate
      let $Order_list = $Order_list || ', GFDAT.OFF_CYCLE, GFDAT.PAGE_NUM, GFDAT.LINE_NUM, GFDAT.SEPCHK'
      if $Brk_Position_Lvl   = 'N'
          let $Order_list = $Order_list || ', GFDAT.POSITION_NBR'
      end-if
  end-if
end-procedure

!***********************************************************************
begin-procedure Get-Report-Columns-Defn

  Clear-Array name=ColEligible
  Clear-Array name=ErnColDefn
  Clear-Array name=DedColDefn
  Clear-Array name=TaxColDefn
  Clear-Array name=CtxColDefn

  let $AllColID = 'ABCDEF'
  do Get-Column-Headings
  do Get-Column-Details

end-procedure

!***********************************************************************
begin-procedure Get-Column-Headings
begin-Select
COLHDG.HP_COLUMN_ID
COLHDG.HP_COL_HEADING1
COLHDG.HP_COL_HEADING2

   let $temp_heading = &COLHDG.HP_Col_Heading1
   do Centre-Heading($temp_heading, #amount_width, $COLHDG.HP_Col_Heading1)
   let $temp_heading = &COLHDG.HP_Col_Heading2
   do Centre-Heading($temp_heading, #amount_width, $COLHDG.HP_Col_Heading2)

  let $ColID   = &COLHDG.HP_Column_ID
  evaluate $ColID
      when = 'A'
          let $ColHeading1_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading1_2 = $COLHDG.HP_Col_Heading2
          break
      when = 'B'
          let $ColHeading2_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading2_2 = $COLHDG.HP_Col_Heading2
          break
      when = 'C'
          let $ColHeading3_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading3_2 = $COLHDG.HP_Col_Heading2
          break
      when = 'D'
          let $ColHeading4_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading4_2 = $COLHDG.HP_Col_Heading2
          break
      when = 'E'
          let $ColHeading5_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading5_2 = $COLHDG.HP_Col_Heading2
          break
      when = 'F'
          let $ColHeading6_1 = $COLHDG.HP_Col_Heading1
          let $ColHeading6_2 = $COLHDG.HP_Col_Heading2
          break
      when-other
          break
  end-evaluate

FROM PS_HP_COL_DEFN_COL COLHDG
WHERE COLHDG.HP_RPT_COLDEFN_CD = $rc_hp_rpt_coldefn_cd
end-Select
end-procedure

!***********************************************************************
begin-procedure Get-Column-Details

  let #ern_cnt = 0
  let #ded_cnt = 0
  let #tax_cnt = 0
  let #ctx_cnt = 0
  let $Col1Exist = 'N'
  let $Col2Exist = 'N'
  let $Col3Exist = 'N'
  let $Col4Exist = 'N'
  let $Col5Exist = 'N'
  let $Col6Exist = 'N'

begin-Select
COLDFN.HP_COLUMN_ID
COLDFN.HP_GROSS
COLDTL.ERNCD
COLDTL.PLAN_TYPE
COLDTL.BENEFIT_PLAN
COLDTL.DEDCD
COLDTL.DED_CLASS
COLDTL.DED_SLSTX_CLASS
COLDTL.STATE
COLDTL.LOCALITY
COLDTL.TAX_CLASS
COLDTL.PROVINCE
COLDTL.TAX_CLASS_CAN

  let $ColID   = &COLDFN.HP_Column_ID
  let #col_ref = instr($AllColID, $ColID, 0) + 2
  evaluate $ColID
      when = 'A'
          let $Col1Exist = 'Y'
          break
      when = 'B'
          let $Col2Exist = 'Y'
          break
      when = 'C'
          let $Col3Exist = 'Y'
          break
      when = 'D'
          let $Col4Exist = 'Y'
          break
      when = 'E'
          let $Col5Exist = 'Y'
          break
      when = 'F'
          let $Col6Exist = 'Y'
          break
      when-other
          break
  end-evaluate

  let $HP_Gross           = &COLDFN.HP_Gross
  let $ErnCd              = rtrim(&COLDTL.ErnCd,' ')
  let $Plan_Type          = rtrim(&COLDTL.Plan_Type,' ')
  let $Benefit_Plan       = rtrim(&COLDTL.Benefit_Plan,' ')
  let $DedCd              = rtrim(&COLDTL.DedCd,' ')
  let $Ded_Class          = rtrim(&COLDTL.Ded_Class,' ')
  let $Ded_Slstx_Class    = rtrim(&COLDTL.Ded_Slstx_Class,' ')
  let $State              = rtrim(&COLDTL.State,' ')
  let $Locality           = rtrim(&COLDTL.Locality,' ')
  let $Tax_Class          = rtrim(&COLDTL.Tax_Class,' ')
  let $Province           = rtrim(&COLDTL.Province,' ')
  let $Tax_Class_Can      = rtrim(&COLDTL.Tax_Class_Can,' ')

  if $HP_Gross = 'E'
      if $ErnCd <> ''
          put $ErnCd  #col_ref
              into ErnColDefn(#ern_cnt) ErnCd ErnColRefn
          let #ern_cnt = #ern_cnt + 1
      end-if
  else
      if $Plan_Type <> '' or $Benefit_Plan <> '' or $DedCD <> '' or $Ded_Class <> '' or $Ded_Slstx_Class <> ''
          if $Plan_Type = ''
              let $DedChkFlag = 'N'
          else
              let $DedChkFlag = 'Y'
          end-if
          if $Benefit_Plan = ''
              let $DedChkFlag = $DedChkFlag || 'N'
          else
              let $DedChkFlag = $DedChkFlag || 'Y'
          end-if
          if $DedCd = ''
              let $DedChkFlag = $DedChkFlag || 'N'
          else
              let $DedChkFlag = $DedChkFlag || 'Y'
          end-if
          if $Ded_Class = ''
              let $DedChkFlag = $DedChkFlag || 'N'
          else
              let $DedChkFlag = $DedChkFlag || 'Y'
          end-if
          if $Ded_Slstx_Class = ''
              let $DedChkFlag = $DedChkFlag || 'N'
          else
              let $DedChkFlag = $DedChkFlag || 'Y'
          end-if
          put $Plan_Type  $Benefit_Plan  $DedCd  $Ded_Class  $Ded_Slstx_Class  $DedChkFlag  #col_ref
              into DedColDefn(#ded_cnt)
              PlanType  BenefitPlan DedCd DedClass DedSlstxClass DedChkFlag DedColRefn
          let #ded_cnt = #ded_cnt + 1
      end-if

      if $State <> '' or $Locality <> '' or $Tax_Class <> ''
          if $State = ''
              let $TaxChkFlag = 'N'
          else
              let $TaxChkFlag = 'Y'
          end-if
          if $Locality = ''
              let $TaxChkFlag = $TaxChkFlag || 'N'
          else
              let $TaxChkFlag = $TaxChkFlag || 'Y'
          end-if
          if $Tax_Class = ''
              let $TaxChkFlag = $TaxChkFlag || 'N'
          else
              let $TaxChkFlag = $TaxChkFlag || 'Y'
          end-if
          put $State  $Locality  $Tax_Class  $TaxChkFlag  #col_ref
              into TaxColDefn(#tax_cnt) State  Locality  TaxClass  TaxChkFlag  TaxColRefn
          let #tax_cnt = #tax_cnt + 1
      end-if

      if $Province <> '' or $Tax_Class_Can <> ''
          if $Province = ''
              let $CtxChkFlag = 'N'
          else
              let $CtxChkFlag = 'Y'
          end-if
          if $Tax_Class_Can = ''
              let $CtxChkFlag = $CtxChkFlag || 'N'
          else
              let $CtxChkFlag = $CtxChkFlag || 'Y'
          end-if
          put $Province  $Tax_Class_Can  $CtxChkFlag  #col_ref
              into CtxColDefn(#ctx_cnt) Province  TaxClassCan  CtxChkFlag  CtxColRefn
          let #ctx_cnt = #ctx_cnt + 1
      end-if
  end-if

FROM PS_HP_COL_DEFN_COL COLDFN
   , PS_HP_COL_DEFN_DTL COLDTL
WHERE COLDFN.HP_RPT_COLDEFN_CD = $rc_hp_rpt_coldefn_cd
  AND COLDFN.HP_RPT_COLDEFN_CD = COLDTL.HP_RPT_COLDEFN_CD
  AND COLDFN.HP_COLUMN_ID      = COLDTL.HP_COLUMN_ID
ORDER BY COLDFN.HP_COLUMN_ID
end-Select

  let #ern_max = #ern_cnt
  let #ded_max = #ded_cnt
  let #tax_max = #tax_cnt
  let #ctx_max = #ctx_cnt
end-procedure

!***********************************************************************
begin-procedure Init-Total-Title-and-FootNote
  put $Hpca012_Ttl_FundSrc    into ReportLine(1)  TotalTitle
  put $Hpca012_Ttl_Position   into ReportLine(2)  TotalTitle
  put $Hpca012_Ttl_Project    into ReportLine(3)  TotalTitle
  put $Hpca012_Ttl_Dept       into ReportLine(4)  TotalTitle
  put $Hpca012_Ttl_Acct_Prd   into ReportLine(5)  TotalTitle
  put $Hpca012_Ttl_Fiscal_Yr  into ReportLine(6)  TotalTitle
  put $Hpca012_Ttl_Pay_End_Dt into ReportLine(7)  TotalTitle
  put $Hpca012_Ttl_PayGroup   into ReportLine(8)  TotalTitle
  put $Hpca012_Ttl_Company    into ReportLine(9)  TotalTitle
  put $Hpca012_Ttl_Grand      into ReportLine(10) TotalTitle

  do Format-DateTime($Cntl_FromDate, $Cntl_FromDate_DMY, {DEFDATE}, '', '')
  do Format-DateTime($Cntl_ThruDate, $Cntl_ThruDate_DMY, {DEFDATE}, '', '')
  let $FootNote = $Hpca012_NoteFrom || ' ' || $Cntl_FromDate_DMY || ' ' ||
                  $Hpca012_NoteThru || ' ' || $Cntl_ThruDate_DMY
end-procedure

!***********************************************************************
begin-procedure Mainline

  let $First_Rec = 'Y'
begin-Select
GFDAT.COMPANY
GFDAT.PAYGROUP
GFDAT.PAY_END_DT
GFDAT.OFF_CYCLE
GFDAT.PAGE_NUM
GFDAT.LINE_NUM
GFDAT.SEPCHK
GFDAT.SEQNO
GFDAT.HP_GROSS
GFDAT.EMPLID
GFDAT.EMPL_RCD
GFDAT.NAME
GFDAT.PAYCHECK_NBR
GFDAT.FISCAL_YEAR
GFDAT.ACCOUNTING_PERIOD
GFDAT.SETID_DEPT
GFDAT.HP_DEPTID
GFDAT.JOBCODE
GFDAT.POSITION_NBR
GFDAT.POSITION_POOL_ID
GFDAT.ERNCD
GFDAT.PLAN_TYPE
GFDAT.BENEFIT_PLAN
GFDAT.DEDCD
GFDAT.DED_CLASS
GFDAT.DED_SLSTX_CLASS
GFDAT.STATE
GFDAT.LOCALITY
GFDAT.TAX_CLASS
GFDAT.PROVINCE
GFDAT.TAX_CLASS_CAN
GFDAT.ACCT_CD
GFDAT.PROJECT_ID
GFDAT.AMOUNT
GFDAT.REVERSED
GFDAT.HP_RETDIST_STATUS
GFDAT.HP_RETDIST_PAY_DT
GFDAT.HP_RETRODIST_CHG

  let $Company            = rtrim(&GFDAT.Company,' ')
  let $Paygroup           = rtrim(&GFDAT.Paygroup,' ')
  let $Pay_End_Dt         = rtrim(&GFDAT.Pay_End_Dt,' ')
  let $Off_Cycle          = rtrim(&GFDAT.Off_Cycle,' ')
  let #Page_Num           = &GFDAT.Page_Num
  let #Line_Num           = &GFDAT.Line_Num
  let #SepChk             = &GFDAT.Sepchk
  let #SeqNo              = &GFDAT.Seqno
  let $HP_Gross           = &GFDAT.HP_Gross
  let $EmplID             = rtrim(&GFDAT.EmplID,' ')
  let #Empl_Rcd           = &GFDAT.Empl_Rcd
  let $Name               = rtrim(&GFDAT.Name,' ')
  let #Paycheck_Nbr       = &GFDAT.Paycheck_Nbr
  let #Fiscal_Year        = &GFDAT.Fiscal_Year
  let #Accounting_Period  = &GFDAT.Accounting_Period
  let $SetID              = rtrim(&GFDAT.SetID_Dept,' ')
  let $DeptID             = rtrim(&GFDAT.HP_DeptID,' ')
  let $JobCode            = rtrim(&GFDAT.JobCode,' ')
  let $Position_Nbr       = rtrim(&GFDAT.Position_Nbr,' ')
  let $Position_Pool_ID   = rtrim(&GFDAT.Position_Pool_ID,' ')
  let $ErnCd              = rtrim(&GFDAT.ErnCd,' ')
  let $Plan_Type          = rtrim(&GFDAT.Plan_Type,' ')
  let $Benefit_Plan       = rtrim(&GFDAT.Benefit_Plan,' ')
  let $DedCd              = rtrim(&GFDAT.DedCd,' ')
  let $Ded_Class          = &GFDAT.Ded_Class
  let $Ded_Slstx_Class    = &GFDAT.Ded_Slstx_Class
  let $State              = rtrim(&GFDAT.State,' ')
  let $Locality           = rtrim(&GFDAT.Locality,' ')
  let $Tax_Class          = &GFDAT.Tax_Class
  let $Province           = rtrim(&GFDAT.Province,' ')
  let $Tax_Class_Can      = rtrim(&GFDAT.Tax_Class_Can,' ')
  let $Acct_Cd            = rtrim(&GFDAT.Acct_Cd,' ')
  let $Project_ID         = rtrim(&GFDAT.Project_ID,' ')
  let #Amount             = &GFDAT.Amount
  let #Reversed           = &GFDAT.Reversed
  let $HP_RetDist_Status  = &GFDAT.HP_RetDist_Status
  let $HP_RetDist_Pay_Dt  = rtrim(&GFDAT.HP_RetDist_Pay_Dt,' ')
  let $HP_RetroDist_Chg   = &GFDAT.HP_RetroDist_Chg

  if $First_Rec = 'Y'
      let $First_Rec = 'N'
      do Add-PayCheck-Info-to-ReportLine
      do Add-Fund-Src-Info-to-ReportLine
      do Add-Position-Info-to-ReportLine
      do Add-Project-Info-to-ReportLine
      do Add-Dept-Info-to-ReportLine
      do Add-Acct-Prd-Info-to-ReportLine
      do Add-Fiscal-Yr-Info-to-ReportLine
      do Add-Pay-End-Dt-Info-to-ReportLine
      do Add-PayGroup-Info-to-ReportLine
      do Add-Company-Info-to-ReportLine
      let $Prt_Title_Company   = $SubTitle_Company
      let $Prt_Title_PayGroup  = $SubTitle_PayGroup
      let $Prt_Title_Acct_Prd  = $SubTitle_Acct_Prd
      let $Prt_Title_PayEndDt  = $SubTitle_PayEndDt
      let $Prt_Title_Dept      = $SubTitle_Dept
      let $Prt_Title_FundSrc   = $SubTitle_FundSrc
      let $Prt_Title_Position  = $SubTitle_Position
      let $Prt_Title_Project   = $SubTitle_Project
  else
      do Check-Break-Level
  end-if
  do Add-to-ReportLine-Array

FROM PS_HP_GRSFRG_DATA GFDAT
[$From_RC_Dept]
[$From_RC_Acct]
[$From_RC_Proj]
[$Where_Period1]
[$Where_Period2]
[$Where_Company]
[$Where_PayGroup]
[$Where_Dept]
[$Where_Acct]
[$Where_Proj]
[$Order_List]
end-Select

  if $First_Rec = 'Y'
      print $Hpca012_Data_not_Load (+2,1) Center
  else
      let #brk_idx = 10
      do Process-Level-Break
  end-if

end-procedure

!***********************************************************************
begin-procedure Check-Break-Level

  if $Prev_Company <> $Company
      let #brk_idx = 9
      do Process-Level-Break
  else
      if $Prev_PayGroup <> $PayGroup
          let #brk_idx = 8
          do Process-Level-Break
      else
          if $Brk_Pay_End_Dt_Lvl = 'Y'
              if $Prev_Pay_End_Dt <> $Pay_End_Dt
                  let #brk_idx = 7
                  do Process-Level-Break
              else
                  do Check-Dept-Level-Break
              end-if
          else
              if #Prev_Fiscal_Yr <> #Fiscal_Year
                  let #brk_idx = 6
                  do Process-Level-Break
              else
                  if $Brk_Acct_Prd_Lvl = 'Y' and #Prev_Acct_Prd <> #Accounting_Period
                      let #brk_idx = 5
                      do Process-Level-Break
                  else
                      do Check-Dept-Level-Break
                  end-if
              end-if
          end-if
      end-if
  end-if
end-procedure

begin-procedure Check-Dept-Level-Break

  if $Brk_Dept_Lvl = 'Y'
      if $Prev_SetID <> $SetID or $Prev_DeptID <> $DeptID
          let #brk_idx = 4
          do Process-Level-Break
      else
          do Check-Secondary-Level-Break
      end-if
  else
      do Check-Secondary-Level-Break
  end-if
end-procedure

begin-procedure Check-Secondary-Level-Break

  if $Brk_Project_Lvl = 'Y'
      if $Prev_Project_ID <> $Project_ID
          let #brk_idx = 3
          do Process-Level-Break
      else
          do Check-PayCheck-Level-Break
      end-if
  else
      if $Brk_Position_Lvl = 'Y'
          if $Prev_Position_Nbr <> $Position_Nbr
              let #brk_idx = 2
              do Process-Level-Break
          else
              do Check-PayCheck-Level-Break
          end-if
      else
          if $Brk_Fund_Src_Lvl = 'Y'
              if $Prev_Acct_Cd <> $Acct_Cd
                  let #brk_idx = 1
                  do Process-Level-Break
              else
                  do Check-PayCheck-Level-Break
              end-if
          else
              do Check-PayCheck-Level-Break
          end-if
      end-if
  end-if
end-procedure

begin-procedure Check-PayCheck-Level-Break

  if $Brk_PayCheck_Lvl = 'Y'
      if $Prev_Pay_End_Dt <> $Pay_End_Dt or $Prev_Off_Cycle <> $Off_Cycle or
         #Prev_Page_Num <> #Page_Num or #Prev_Line_Num <> #Line_Num or
         #Prev_SepChk <> #SepChk or
         ($Brk_Position_Lvl = 'N' and $Prev_Position_Nbr <> $Position_Nbr)
          let #brk_idx = 0
          do Process-Level-Break
      end-if
  end-if
end-procedure

!***********************************************************************
begin-procedure Process-Level-Break

  if #brk_idx >= 0 and $Brk_PayCheck_Lvl = 'Y'
      do Print-PayCheck-Details
      do Add-PayCheck-Info-to-ReportLine
  end-if

  if #brk_idx >= 1 and $rc_hp_summary_rpt = 'D'
      do Print-Blank-Line
  end-if

  if #brk_idx >= 1 and (#brk_idx <> 2 or #brk_idx <> 3) and $Brk_Fund_Src_Lvl = 'Y'
      let #prt_idx = 1
      do Print-ReportLine-Details
      do Add-Fund-Src-Info-to-ReportLine
  end-if

  if #brk_idx >= 2 and #brk_idx <> 3 and $Brk_Position_Lvl = 'Y'
      let #prt_idx = 2
      do Print-ReportLine-Details
      do Add-Position-Info-to-ReportLine
  end-if

  if #brk_idx >= 3 and $Brk_Project_Lvl = 'Y'
      let #prt_idx = 3
      do Print-ReportLine-Details
      do Add-Project-Info-to-ReportLine
  end-if

  if #brk_idx >= 4 and $Brk_Dept_Lvl = 'Y'
      let #prt_idx = 4
      do Print-ReportLine-Details
      do Add-Dept-Info-to-ReportLine
  end-if

  if #brk_idx >= 5 and #brk_idx <> 7 and $Brk_Acct_Prd_Lvl = 'Y'
      let #prt_idx = 5
      do Print-ReportLine-Details
      do Add-Acct-Prd-Info-to-ReportLine
  end-if

  if #brk_idx >= 6 and #brk_idx <> 7 and $Brk_Fiscal_Yr_Lvl = 'Y'
      let #prt_idx = 6
      do Print-ReportLine-Details
      do Add-Fiscal-Yr-Info-to-ReportLine
  end-if

  if #brk_idx >= 7 and $Brk_Pay_End_Dt_Lvl = 'Y'
      let #prt_idx = 7
      do Print-ReportLine-Details
      do Add-Pay-End-Dt-Info-to-ReportLine
  end-if

  if #brk_idx >= 8 and $Brk_PayGroup_Lvl = 'Y'
      let #prt_idx = 8
      do Print-ReportLine-Details
      do Add-PayGroup-Info-to-ReportLine
  end-if

  if #brk_idx >= 9 and $Brk_Company_Lvl = 'Y'
      let #prt_idx = 9
      do Print-ReportLine-Details
      do Add-Company-Info-to-ReportLine
  end-if

  if #brk_idx = 10
      let #prt_idx = 10
      do Print-ReportLine-Details
  end-if

  if   ($rc_hp_summary_rpt = 'S' and #brk_idx > 3 and #brk_idx <> 10)
    or ($rc_hp_summary_rpt = 'D' and #brk_idx > 0 and #brk_idx <> 10)
      new-page
      let $Prt_Title_Company   = $SubTitle_Company
      let $Prt_Title_PayGroup  = $SubTitle_PayGroup
      let $Prt_Title_Acct_Prd  = $SubTitle_Acct_Prd
      let $Prt_Title_PayEndDt  = $SubTitle_PayEndDt
      let $Prt_Title_Dept      = $SubTitle_Dept
      let $Prt_Title_FundSrc   = $SubTitle_FundSrc
      let $Prt_Title_Position  = $SubTitle_Position
      let $Prt_Title_Project   = $SubTitle_Project
  end-if

end-procedure

!***********************************************************************
begin-procedure Add-PayCheck-Info-to-ReportLine
  let #idx = 0
  if $Brk_PayCheck_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt $Off_Cycle #Page_Num #Line_Num #Sepchk $EmplID #Empl_Rcd
          $Name #Paycheck_Nbr #Fiscal_Year #Accounting_Period $SetID $DeptID $Acct_Cd $Project_ID
          $JobCode $Position_Nbr $Position_Pool_ID
          into ReportLine(#idx)
          Company PayGroup PayEndDt OffCycle PageNum LineNum SepChk EmplID EmplRcd
          Name PayCheckNbr FiscalYear AcctPeriod SetID DeptID AcctCd ProjectID
          JobCode PositionNbr PositionPoolID
      do Reset-Total-Amounts
      let $Prev_Company    = $Company
      let $Prev_PayGroup   = $PayGroup
      let $Prev_Pay_End_Dt = $Pay_End_Dt
      let $Prev_Off_Cycle  = $Off_Cycle
      let #Prev_Page_Num   = #Page_Num
      let #Prev_Line_Num   = #Line_Num
      let #Prev_SepChk     = #SepChk
      if $Brk_Position_Lvl = 'N'
          let $Prev_Position_Nbr = $Position_Nbr
      end-if
  end-if
end-procedure

begin-procedure Add-Fund-Src-Info-to-ReportLine
  let #idx = 1
  if $Brk_Fund_Src_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt #Fiscal_Year #Accounting_Period $SetID $DeptID $Acct_Cd
          into ReportLine(#idx)
          Company PayGroup PayEndDt FiscalYear AcctPeriod SetID DeptID AcctCd
      do Reset-Total-Amounts
      let $Prev_Acct_Cd = $Acct_Cd
      do Format-Acct-Cd-Description
  end-if
end-procedure

begin-procedure Add-Position-Info-to-ReportLine
  let #idx = 2
  if $Brk_Position_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt #Fiscal_Year #Accounting_Period $SetID $DeptID $Position_Nbr
          into ReportLine(#idx)
          Company PayGroup PayEndDt FiscalYear AcctPeriod SetID DeptID PositionNbr
      do Reset-Total-Amounts
      let $Prev_Position_Nbr = $Position_Nbr
      do Format-Position-Description
  end-if
end-procedure

begin-procedure Add-Project-Info-to-ReportLine
  let #idx = 3
  if $Brk_Project_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt #Fiscal_Year #Accounting_Period $SetID $DeptID $Project_ID
          into ReportLine(#idx)
          Company PayGroup PayEndDt FiscalYear AcctPeriod SetID DeptID ProjectID
      do Reset-Total-Amounts
      let $Prev_Project_ID = $Project_ID
      do Format-Project-Description
  end-if
end-procedure

begin-procedure Add-Dept-Info-to-ReportLine
  let #idx = 4
  if $Brk_Dept_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt #Fiscal_Year #Accounting_Period $SetID $DeptID
          into ReportLine(#idx)
          Company PayGroup PayEndDt FiscalYear AcctPeriod SetID DeptID
      do Reset-Total-Amounts
      let $Prev_SetID  = $SetID
      let $Prev_DeptID = $DeptID
      do Format-Dept-Description
  end-if
end-procedure

begin-procedure Add-Acct-Prd-Info-to-ReportLine
  let #idx = 5
  if $Brk_Acct_Prd_Lvl = 'Y'
      put $Company $Paygroup #Fiscal_Year #Accounting_Period
          into ReportLine(#idx) Company PayGroup FiscalYear AcctPeriod
      do Reset-Total-Amounts
      let #Prev_Acct_Prd = #Accounting_Period
      do Format-Fiscal-Yr-Acct-Prd-Description
  end-if
end-procedure

begin-procedure Add-Fiscal-Yr-Info-to-ReportLine
  let #idx = 6
  if $Brk_Fiscal_Yr_Lvl = 'Y'
      put $Company $Paygroup #Fiscal_Year
          into ReportLine(#idx) Company PayGroup FiscalYear
      do Reset-Total-Amounts
      let #Prev_Acct_Prd  = #Accounting_Period
      let #Prev_Fiscal_Yr = #Fiscal_Year
      do Format-Fiscal-Yr-Acct-Prd-Description
  end-if
end-procedure

begin-procedure Add-Pay-End-Dt-Info-to-ReportLine
  let #idx = 7
  if $Brk_Pay_End_Dt_Lvl = 'Y'
      put $Company $Paygroup $Pay_End_Dt
          into ReportLine(#idx) Company PayGroup PayEndDt
      do Reset-Total-Amounts
      let $Prev_Pay_End_Dt = $Pay_End_Dt
      do Format-Pay-End-Dt-Description
  end-if
end-procedure

begin-procedure Add-PayGroup-Info-to-ReportLine
  let #idx = 8
  if $Brk_PayGroup_Lvl = 'Y'
      put $Company $Paygroup
          into ReportLine(#idx) Company PayGroup
      do Reset-Total-Amounts
      let $Prev_PayGroup   = $PayGroup
      do Format-PayGroup-Description
  end-if
end-procedure

begin-procedure Add-Company-Info-to-ReportLine
  let #idx = 9
  if $Brk_Company_Lvl = 'Y'
      put $Company
          into ReportLine(#idx) Company
      do Reset-Total-Amounts
      let $Prev_Company    = $Company
      do Format-Company-Description
  end-if
end-procedure

begin-procedure Reset-Total-Amounts
  put 0 0 0 0 0 0 0 0 0
      into ReportLine(#idx)
      Amount(0) Amount(1) Amount(2) Amount(3) Amount(4)
      Amount(5) Amount(6) Amount(7) Amount(8)
end-procedure

!***********************************************************************
begin-procedure Add-to-ReportLine-Array

  Clear-Array name=ColEligible
  put 'Y' into ColEligible(0) AddToCol

  if $HP_Gross = 'E'
      put 'Y' into ColEligible(1) AddToCol

      let #i = 0
      While #i < #ern_max
          Get $Defn_ErnCd #Col_Refn from ErnColDefn(#i) ErnCd ErnColRefn

          if $ErnCd = $Defn_ErnCd
              put 'Y' into ColEligible(#Col_Refn) AddToCol
          end-if
          let #i = #i + 1
      End-While
  else
      put 'Y' into ColEligible(2) AddToCol

      evaluate $HP_Gross
          when = 'D'
              let #i = 0
              While #i < #ded_max
                  Get $Defn_Plan_Type $Defn_Benefit_Plan $Defn_DedCd
                      $Defn_Ded_Class $Defn_Ded_Slstx_Class $DedChkFlag #Col_Refn
                      from DedColDefn(#i)
                      PlanType BenefitPlan DedCd DedClass DedSlstxClass DedChkFlag DedColRefn

                  if     (substr($DedChkFlag,1,1) = 'N' or $Plan_Type       = $Defn_Plan_Type)
                     and (substr($DedChkFlag,2,1) = 'N' or $Benefit_Plan    = $Defn_Benefit_Plan)
                     and (substr($DedChkFlag,3,1) = 'N' or $DedCd           = $Defn_DedCd)
                     and (substr($DedChkFlag,4,1) = 'N' or $Ded_Class       = $Defn_Ded_Class)
                     and (substr($DedChkFlag,5,1) = 'N' or $Ded_Slstx_Class = $Defn_Ded_Slstx_Class)

                      put 'Y' into ColEligible(#Col_Refn) AddToCol
                  end-if
                  let #i = #i + 1
              End-While
              break
          when = 'T'
              let #i = 0
              While #i < #tax_max
                  Get $Defn_State $Defn_Locality $Defn_Tax_Class $TaxChkFlag #Col_Refn
                      from TaxColDefn(#i)
                      State Locality TaxClass TaxChkFlag TaxColRefn

                  if     (substr($TaxChkFlag,1,1) = 'N' or $State      = $Defn_State)
                     and (substr($TaxChkFlag,2,1) = 'N' or $Locality   = $Defn_Locality)
                     and (substr($TaxChkFlag,3,1) = 'N' or $Tax_Class  = $Defn_Tax_Class)

                      put 'Y' into ColEligible(#Col_Refn) AddToCol
                  end-if
                  let #i = #i + 1
              End-While
              break
          when = 'C'
              let #i = 0
              While #i < #ctx_max
                  Get $Defn_Province $Defn_Tax_Class_Can $CtxChkFlag #Col_Refn
                      from CtxColDefn(#i)
                      Province TaxClassCan CtxChkFlag CtxColRefn

                  if     (substr($CtxChkFlag,1,1) = 'N' or $Province      = $Defn_Province)
                     and (substr($CtxChkFlag,2,1) = 'N' or $Tax_Class_Can = $Defn_Tax_Class_Can)

                      put 'Y' into ColEligible(#Col_Refn) AddToCol
                  end-if
                  let #i = #i + 1
              End-While
              break
          when-other
              break
      end-evaluate
  end-if

  let #j = 0
  While #j < 9
      Get $Add_to_Col from ColEligible(#j) AddToCol
      if $Add_to_Col = 'Y'
          put #Amount into ColEligible(#j) ColAmount
      end-if
      let #j = #j + 1
  End-While
  Get #Col0_Amount from ColEligible(0) ColAmount
  Get #Col1_Amount from ColEligible(1) ColAmount
  Get #Col2_Amount from ColEligible(2) ColAmount
  Get #Col3_Amount from ColEligible(3) ColAmount
  Get #Col4_Amount from ColEligible(4) ColAmount
  Get #Col5_Amount from ColEligible(5) ColAmount
  Get #Col6_Amount from ColEligible(6) ColAmount
  Get #Col7_Amount from ColEligible(7) ColAmount
  Get #Col8_Amount from ColEligible(8) ColAmount

  let #i = 0
  While #i < 11

      Get $Add_to_Total from ReportLine(#i) AddToTtl
      if $Add_to_Total = 'Y'
          Array-Add #Col0_Amount #Col1_Amount #Col2_Amount #Col3_Amount #Col4_Amount
                    #Col5_Amount #Col6_Amount #Col7_Amount #Col8_Amount
                    to ReportLine(#i)
                    Amount(0) Amount(1) Amount(2) Amount(3) Amount(4)
                    Amount(5) Amount(6) Amount(7) Amount(8)
      end-if
      let #i = #i + 1
  End-While

end-procedure

!***********************************************************************
begin-procedure Print-PayCheck-Details
  Get $RptName $RptEmplID #RptEmplRcd #RptPayCheckNbr $RptPositionNbr
      $RptJobCode $RptPositionPoolID $RptPayEndDt
      #RptTtlGrs #RptTtlFrg #RptAmtCol1 #RptAmtCol2 #RptAmtCol3 #RptAmtCol4
      #RptAmtCol5 #RptAmtCol6 #RptTtlAmt
      from ReportLine(0)
      Name EmplID EmplRcd PayCheckNbr PositionNbr
      JobCode PositionPoolID PayEndDt
      Amount(1) Amount(2) Amount(3) Amount(4) Amount(5) Amount(6)
      Amount(7) Amount(8) Amount(0)

  do Format-DateTime($RptPayEndDt, $RptPayEndDt_DMY, {DEFDATE}, '', '')
  do Convert-to-DTU-Date($RptPayEndDt, $RptPayEndDt_YMD)
  do Format-Number(#RptTtlGrs,  $RptTtlGrs,  '9999999999.99')
  do Format-Number(#RptTtlFrg,  $RptTtlFrg,  '9999999999.99')
  do Format-Number(#RptAmtCol1, $RptAmtCol1, '9999999999.99')
  do Format-Number(#RptAmtCol2, $RptAmtCol2, '9999999999.99')
  do Format-Number(#RptAmtCol3, $RptAmtCol3, '9999999999.99')
  do Format-Number(#RptAmtCol4, $RptAmtCol4, '9999999999.99')
  do Format-Number(#RptAmtCol5, $RptAmtCol5, '9999999999.99')
  do Format-Number(#RptAmtCol6, $RptAmtCol6, '9999999999.99')
  do Format-Number(#RptTtlAmt,  $RptTtlAmt,  '9999999999.99')
  do Format-Number(#RptPayCheckNbr, $RptPayCheckNbr, '09999999')
  do Format-Number(#RptEmplRcd, $RptEmplRcd, '009')
  let $RptEmplID = rtrim($RptEmplID,' ') || '-' || $RptEmplRcd

  print $RptName            (+2,  1, 30)
  print $RptPositionNbr     ( 0, 32,  9)
  print $RptPayCheckNbr     ( 0, 42,  8)
  print $RptTtlGrs          ( 0, 51, 13)
  print $RptTtlFrg          ( 0, 65, 13)
  if $Col1Exist = 'Y'
      print $RptAmtCol1         ( 0, 79, 13)
  end-if
  if $Col2Exist = 'Y'
      print $RptAmtCol2         ( 0, 93, 13)
  end-if
  if $Col3Exist = 'Y'
      print $RptAmtCol3         ( 0,107, 13)
  end-if
  if $Col4Exist = 'Y'
      print $RptAmtCol4         ( 0,121, 13)
  end-if
  if $Col5Exist = 'Y'
      print $RptAmtCol5         ( 0,135, 13)
  end-if
  if $Col6Exist = 'Y'
      print $RptAmtCol6         ( 0,149, 13)
  end-if
  print $RptTtlAmt          ( 0,163, 13)

  print $RptEmplID          (+1,  5, 14)
  print $RptJobCode         ( 0, 21,  6)
  print $RptPositionPoolID  ( 0, 35,  3)
  print $RptPayEndDt_YMD    ( 0, 41, 10)

end-procedure

!***********************************************************************
begin-procedure Print-ReportLine-Details
  Get $TtlTitle
      $RptCompany $RptPayGroup #RptFiscalYear #RptAcctPrd $RptPayEndDt $RptSetID $RptDeptID
      $RptAcctCd $RptProjectID $RptPositionNbr
      #RptTtlGrs #RptTtlFrg #RptAmtCol1 #RptAmtCol2 #RptAmtCol3 #RptAmtCol4
      #RptAmtCol5 #RptAmtCol6 #RptTtlAmt
      from ReportLine(#prt_idx)
      TotalTitle
      Company PayGroup FiscalYear AcctPeriod PayEndDt SetID DeptID
      AcctCd ProjectID PositionNBR
      Amount(1) Amount(2) Amount(3) Amount(4) Amount(5) Amount(6)
      Amount(7) Amount(8) Amount(0)

  let $EditMask = '9999999999.99'
  do Format-Number(#RptTtlGrs,  $RptTtlGrs,  $EditMask)
  do Format-Number(#RptTtlFrg,  $RptTtlFrg,  $EditMask)
  do Format-Number(#RptAmtCol1, $RptAmtCol1, $EditMask)
  do Format-Number(#RptAmtCol2, $RptAmtCol2, $EditMask)
  do Format-Number(#RptAmtCol3, $RptAmtCol3, $EditMask)
  do Format-Number(#RptAmtCol4, $RptAmtCol4, $EditMask)
  do Format-Number(#RptAmtCol5, $RptAmtCol5, $EditMask)
  do Format-Number(#RptAmtCol6, $RptAmtCol6, $EditMask)
  do Format-Number(#RptTtlAmt,  $RptTtlAmt,  $EditMask)

  evaluate #prt_idx
      when = 1
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptAcctCd,' ') || ') ' || $Msg_Total
          break
      when = 2
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptPositionNbr,' ') || ') ' || $Msg_Total
          break
      when = 3
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptProjectID,' ') || ') ' || $Msg_Total
          break
      when = 4
          let $RptDept = rtrim($RptSetID,' ') || '-' || $RptDeptID
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptDept,' ') || ') ' || $Msg_Total
          break
      when = 5
          do Format-Number(#RptFiscalYear,  $RptFiscalYear, '9999')
          do Format-Number(#RptAcctPrd,     $RptAcctPrd,    '999')
          let $RptAcctPrd = $RptFiscalYear || '-' || $RptAcctPrd
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptAcctPrd,' ') || ') ' || $Msg_Total
          break
      when = 6
          do Format-Number(#RptFiscalYear,  $RptFiscalYear, '9999')
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptFiscalYear,' ') || ') ' || $Msg_Total
          break
      when = 7
          do Format-DateTime($RptPayEndDt, $RptPayEndDt_DMY, {DEFDATE}, '', '')
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptPayEndDt_DMY,' ') || ') ' || $Msg_Total
          break
      when = 8
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptPayGroup,' ') || ') ' || $Msg_Total
          break
      when = 9
          let $TtlTitle = rtrim($TtlTitle,' ') || ' (' || rtrim($RptCompany,' ') || ') ' || $Msg_Total
          break
      when-other
          break
  end-evaluate

  print $TtlTitle           (+1,  1, 40)
  print $RptTtlGrs          ( 0, 51, 13)
  print $RptTtlFrg          ( 0, 65, 13)
  if $Col1Exist = 'Y'
      print $RptAmtCol1         ( 0, 79, 13)
  end-if
  if $Col2Exist = 'Y'
      print $RptAmtCol2         ( 0, 93, 13)
  end-if
  if $Col3Exist = 'Y'
      print $RptAmtCol3         ( 0,107, 13)
  end-if
  if $Col4Exist = 'Y'
      print $RptAmtCol4         ( 0,121, 13)
  end-if
  if $Col5Exist = 'Y'
      print $RptAmtCol5         ( 0,135, 13)
  end-if
  if $Col6Exist = 'Y'
      print $RptAmtCol6         ( 0,149, 13)
  end-if
  print $RptTtlAmt          ( 0,163, 13)

end-procedure

begin-procedure Print-Blank-Line
  print ' '                 (+1,1)
end-procedure
!***********************************************************************
begin-procedure Format-Acct-Cd-Description
  let $SubTitle_FundSrc = $Hpca012_subtitle_FundSrc || ' ' || $Prev_Acct_Cd || ' '
  let $FundSrc_Descr = ''
  if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rellng-Acct-Cd-Descr
      if $FundSrc_Descr = ''
          do Get-Acct-Cd-Descr
      end-if
  else
      do Get-Acct-Cd-Descr
  end-if
  let $SubTitle_FundSrc = $SubTitle_FundSrc || $FundSrc_Descr
end-procedure

begin-procedure Get-Acct-Cd-Descr
begin-Select
AC.DESCR
  let $FundSrc_Descr = &AC.Descr
FROM PS_ACCT_CD_TBL AC
WHERE AC.ACCT_CD = $Prev_Acct_Cd
end-Select
end-procedure

begin-procedure Get-Rellng-Acct-Cd-Descr
begin-Select
LAC.DESCR
  let $FundSrc_Descr = &LAC.Descr
FROM PS_ACCT_CD_TBL_LNG LAC, PS_ACCT_CD_TBL AC1
WHERE AC1.ACCT_CD     = $Prev_Acct_Cd
  AND AC1.FDM_HASH    = LAC.FDM_HASH
  AND LAC.LANGUAGE_CD = $curr_language_cd
end-Select
end-procedure

!***********************************************************************
begin-procedure Format-Position-Description
  let $SubTitle_Position = $Hpca012_subtitle_Position || ' ' || $Prev_Position_Nbr || ' '
  let $Position_Descr = ''
  if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rellng-Position-Descr
      if $Position_Descr = ''
          do Get-Position-Descr
      end-if
  else
      do Get-Position-Descr
  end-if
  let $SubTitle_Position = $SubTitle_Position || $Position_Descr
end-procedure

begin-procedure Get-Position-Descr
begin-Select
PN.DESCR
  let $Position_Descr = &PN.Descr
FROM PS_POSITION_DATA PN
WHERE PN.POSITION_NBR = $Prev_Position_Nbr
  AND PN.EFFDT        = (SELECT MAX(PN1.EFFDT) FROM PS_POSITION_DATA PN1
                         WHERE PN1.POSITION_NBR  = PN.POSITION_NBR
                           AND PN1.EFFDT        <= $AsOfDate)
end-Select
end-procedure

begin-procedure Get-Rellng-Position-Descr
begin-Select
LPN.DESCR
  let $Position_Descr = &LPN.Descr
FROM PS_POSN_DATA_LANG LPN
WHERE LPN.POSITION_NBR = $Prev_Position_Nbr
  AND LPN.LANGUAGE_CD  = $curr_language_cd
  AND LPN.EFFDT = (SELECT MAX(LPN1.EFFDT) FROM PS_POSN_DATA_LANG LPN1
                  WHERE LPN1.POSITION_NBR  = LPN.POSITION_NBR
                    AND LPN1.LANGUAGE_CD   = LPN.LANGUAGE_CD
                    AND LPN1.EFFDT        <= $AsOfDate)
end-Select
end-procedure

!***********************************************************************
begin-procedure Format-Project-Description
  let $SubTitle_Project = $Hpca012_subtitle_Project || ' ' || $Prev_Project_ID
end-procedure

!***********************************************************************
begin-procedure Format-Dept-Description
  let $SubTitle_Dept = $Hpca012_subtitle_Dept || ' ' || $Prev_SetID || '-' || $Prev_DeptID || ' '
  let $Dept_Descr = ''
  if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rellng-Dept-Descr
      if $Dept_Descr = ''
          do Get-Dept-Descr
      end-if
  else
      do Get-Dept-Descr
  end-if
  let $SubTitle_Dept = $SubTitle_Dept || $Dept_Descr
end-procedure

begin-procedure Get-Dept-Descr
begin-Select
DP.DESCR
  let $Dept_Descr = &DP.Descr
FROM PS_DEPT_TBL DP
WHERE DP.SETID  = $Prev_SetID
  AND DP.DEPTID = $Prev_DeptID
  AND DP.EFFDT  = (SELECT MAX(DP1.EFFDT) FROM PS_DEPT_TBL DP1
                         WHERE DP1.SETID   = DP.SETID
                           AND DP1.DEPTID  = DP.DEPTID
                           AND DP1.EFFDT  <= $AsOfDate)
end-Select
end-procedure

begin-procedure Get-Rellng-Dept-Descr
begin-Select
LDP.DESCR
  let $Dept_Descr = &LDP.Descr
FROM PS_DEPT_TBL_LANG LDP
WHERE LDP.SETID        = $Prev_SetID
  AND LDP.DEPTID       = $Prev_DeptID
  AND LDP.LANGUAGE_CD  = $curr_language_cd
  AND LDP.EFFDT = (SELECT MAX(LDP1.EFFDT) FROM PS_DEPT_TBL_LANG LDP1
                  WHERE LDP1.SETID         = LDP.SETID
                    AND LDP1.DEPTID        = LDP.DEPTID
                    AND LDP1.LANGUAGE_CD   = LDP.LANGUAGE_CD
                    AND LDP1.EFFDT        <= $AsOfDate)
end-Select
end-procedure

!***********************************************************************
begin-procedure Format-Fiscal-Yr-Acct-Prd-Description
  do Format-Number(#Prev_Fiscal_Yr, $Prev_Fiscal_Yr, '9999')
  do Format-Number(#Prev_Acct_Prd,  $Prev_Acct_Prd,  '99')
  let $SubTitle_Acct_Prd = $Hpca012_subtitle_FYR || ' ' || $Prev_Fiscal_Yr
  if #rc_accounting_period <> 0 or $rc_hp_sort_fyactpd = 'Y'
      let $SubTitle_Acct_Prd  = $SubTitle_Acct_Prd || '   ' ||
                                $Hpca012_subtitle_ActPrd || ' ' || $Prev_Acct_Prd
  end-if
end-procedure

!***********************************************************************
begin-procedure Format-Pay-End-Dt-Description
  do Format-DateTime($Prev_Pay_End_Dt, $RptPayEndDt_DMY, {DEFDATE}, '', '')
  let $SubTitle_PayEndDt = $Hpca012_subtitle_PEndDt || ' ' || $RptPayEndDt_DMY
end-procedure

!***********************************************************************
begin-procedure Format-PayGroup-Description
  let $SubTitle_PayGroup = $Hpca012_subtitle_PayGroup || ' ' || $Prev_PayGroup || ' '
  let $PayGroup_Descr = ''
  if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rellng-PayGroup-Descr
      if $PayGroup_Descr = ''
          do Get-PayGroup-Descr
      end-if
  else
      do Get-PayGroup-Descr
  end-if
  let $SubTitle_PayGroup = $SubTitle_PayGroup || $PayGroup_Descr
end-procedure

begin-procedure Get-PayGroup-Descr
begin-Select
PG.DESCR
  let $PayGroup_Descr = &PG.Descr
FROM PS_PAYGROUP_TBL PG
WHERE PG.COMPANY  = $Prev_Company
  AND PG.PAYGROUP = $Prev_PayGroup
  AND PG.EFFDT    = (SELECT MAX(PG1.EFFDT) FROM PS_PAYGROUP_TBL PG1
                    WHERE PG1.COMPANY  = PG.COMPANY
                      AND PG1.PAYGROUP = PG.PAYGROUP
                      AND PG1.EFFDT    <= $AsOfDate)
end-Select
end-procedure

begin-procedure Get-Rellng-PayGroup-Descr
begin-Select
LPG.DESCR
  let $PayGroup_Descr = &LPG.Descr
FROM PS_PAYGROUP_LANG LPG
WHERE LPG.COMPANY     = $Prev_Company
  AND LPG.PAYGROUP    = $Prev_PayGroup
  AND LPG.LANGUAGE_CD = $curr_language_cd
  AND LPG.EFFDT       = (SELECT MAX(LPG1.EFFDT) FROM PS_PAYGROUP_LANG LPG1
                         WHERE LPG1.COMPANY      = LPG.COMPANY
                           AND LPG1.PAYGROUP     = LPG.PAYGROUP
                           AND LPG1.LANGUAGE_CD  = LPG.LANGUAGE_CD
                           AND LPG1.EFFDT       <= $AsOfDate)
end-Select
end-procedure

!***********************************************************************
begin-procedure Format-Company-Description
  let $SubTitle_Company = $Hpca012_subtitle_Company || ' ' || $Prev_Company || ' '
  let $Company_Descr = ''
  if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rellng-Company-Descr
      if $Company_Descr = ''
          do Get-Company-Descr
      end-if
  else
      do Get-Company-Descr
  end-if
  let $SubTitle_Company = $SubTitle_Company || $Company_Descr
end-procedure

begin-procedure Get-Company-Descr
begin-Select
CP.DESCR
  let $Company_Descr = &CP.Descr
FROM PS_COMPANY_TBL CP
WHERE CP.COMPANY  = $Prev_Company
  AND CP.EFFDT    = (SELECT MAX(CP1.EFFDT) FROM PS_COMPANY_TBL CP1
                    WHERE CP1.COMPANY  = CP.COMPANY
                      AND CP1.EFFDT    <= $AsOfDate)
end-Select
end-procedure

begin-procedure Get-Rellng-Company-Descr
begin-Select
LCP.DESCR
  let $Company_Descr = &LCP.Descr
FROM PS_COMPNY_TBL_LANG LCP
WHERE LCP.COMPANY     = $Prev_Company
  AND LCP.LANGUAGE_CD = $curr_language_cd
  AND LCP.EFFDT       = (SELECT MAX(LCP1.EFFDT) FROM PS_COMPNY_TBL_LANG LCP1
                         WHERE LCP1.COMPANY      = LCP.COMPANY
                           AND LCP1.LANGUAGE_CD  = LCP.LANGUAGE_CD
                           AND LCP1.EFFDT       <= $AsOfDate)
end-Select
end-procedure

!***********************************************************************
begin-procedure Print-Report-Parameters
  display ' '
  display 'Run Control Parameters - '
  display ' '

  do Format-DateTime($rc_pay_end_dt, $Pay_End_Dt_DMY, {DEFDATE}, '', '')
  do Format-Number(#rc_fiscal_year,        $Fiscal_Year,        '9999')
  do Format-Number(#rc_accounting_period,  $Accounting_Period,  '99')
  if $rc_pay_end_dt = ''
      display '     Fiscal Year = ' noline
      display $Fiscal_Year noline
      display '  Accounting Period = ' noline
      if #rc_accounting_period = 0
          display 'ALL'
      else
          display $Accounting_Period
      end-if
  else
      display '     Pay Period End Date = ' noline
      display $Pay_End_Dt_DMY
  end-if

  display ' '
  if $rc_hp_all_comppyg = 'Y'
      display '     Company  = All'
      display '     Paygroup = All'
  else
      display '     Company  = ' noline
      display $rc_company
      if $rc_paygroup = ''
          display '     Paygroup = All'
      else
          display '     Paygroup = ' noline
          display $rc_paygroup
      end-if
  end-if

  display ' '
  if $rc_hp_all_dept = 'Y'
      display '     Department = All'
  else
      display '     Department List : '
      do Print-Dept-List
  end-if

  display ' '
  if $rc_hp_all_fundsrc = 'Y'
      display '     Funding Source = All'
  else
      display '     Funding Source List : '
      do Print-FundSrc-List
  end-if

  display ' '
  if $rc_hp_all_projects = 'Y'
      display '     Project = All'
  else
      display '     Project List : '
      do Print-Project-List
  end-if

  display ' '
  display '     User Defined Report Column ID = ' noline
  display $rc_hp_rpt_coldefn_cd
  if $rc_hp_summary_rpt = 'S'
      display '     Summary Report'
  else
      display '     Detail Report'
  end-if

  display ' '
  display '     Sort Options - '
  display '          by Fiscal Year / Accounting Period = ' noline
  display $rc_hp_sort_fyactpd
  display '          by Department = ' noline
  display $rc_hp_sort_dept
  display '          Secondary Sort Sequence = ' noline
  evaluate $rc_hp_sort_cd
      when = 'F'
          display 'Funding Source'
          break
      when = 'P'
          display 'Position'
          break
      when = 'R'
          display 'Project'
          break
      when-other
          display 'None'
          break
  end-evaluate
  if $rc_hp_summary_rpt = 'D'
      display '          Detail Sort Sequence = ' noline
      evaluate $rc_hp_dtl_sort_cd
          when = 'I'
              display 'Employee ID'
              break
          when = 'N'
              display 'Employee Name'
              break
          when-other
              display 'PayCheck#'
              break
      end-evaluate
  end-if

  display ' '
  display ' '
  do Format-DateTime($Cntl_FromDate, $Cntl_FromDate_DMY, {DEFDATE}, '', '')
  do Format-DateTime($Cntl_ThruDate, $Cntl_ThruDate_DMY, {DEFDATE}, '', '')
  display ' ** Note ** Report is based on data loaded for date range between ' noline
  display $Cntl_FromDate_DMY noline
  display ' and ' noline
  display $Cntl_ThruDate_DMY
end-procedure

begin-procedure Print-Dept-List
begin-Select
P1.SETID
P1.DEPTID
  let $Disp_Dept = &P1.SetID || ' - ' || &P1.DeptID
  display '                       ' noline
  display $Disp_Dept
FROM PS_HP_RC_GRSFR_DPT P1
WHERE P1.OPRID       = $prcs_oprid
  AND P1.RUN_CNTL_ID = $prcs_run_cntl_id
end-Select
end-procedure

begin-procedure Print-FundSrc-List
begin-Select
P2.ACCT_CD
  display '                           ' noline
  display &P2.Acct_Cd
FROM PS_HP_RC_GRSFR_ACT P2
WHERE P2.OPRID       = $prcs_oprid
  AND P2.RUN_CNTL_ID = $prcs_run_cntl_id
end-Select
end-procedure

begin-procedure Print-Project-List
begin-Select
P3.PROJECT_ID
  display '                    ' noline
  display &P3.Project_ID
FROM PS_HP_RC_GRSFR_PRJ P3
WHERE P3.OPRID       = $prcs_oprid
  AND P3.RUN_CNTL_ID = $prcs_run_cntl_id
end-Select
end-procedure

!***********************************************************************
begin-procedure Set-Proc-Indicator
  let $Cntl_Found = 'N'
begin-Select
PROC_CNTL.FROMDATE
PROC_CNTL.THRUDATE
PROC_CNTL.HP_PROC_STATUS
  let $Cntl_Found = 'Y'
  let $Cntl_FromDate = &PROC_CNTL.FromDate
  let $Cntl_ThruDate = &PROC_CNTL.ThruDate
  let $AsofDate      = &PROC_CNTL.ThruDate
FROM PS_HP_GRSFRG_CNTL PROC_CNTL
end-Select

  if $Cntl_Found = 'Y'
      do Update-Proc-Status-to-Report
  end-if
end-procedure

begin-procedure Update-Proc-Status-to-Report
  let $err-statement1 = 'HPCA012, Update Error - Control Record - Status Report'
  let $err-statement2 = ' '

begin-SQL on-error=SQL-Statement-Error
  UPDATE PS_HP_GRSFRG_CNTL
     SET HP_PROC_STATUS  = 'R'
end-SQL
end-procedure

begin-procedure Reset-Proc-Status
  let $err-statement1 = 'HPCA012, Update Error - Control Record - Reset Status'
  let $err-statement2 = ' '
  let $reset_status = 'Y'

begin-SQL on-error=SQL-Statement-Error
  UPDATE PS_HP_GRSFRG_CNTL
     SET HP_PROC_STATUS  = 'N'
end-SQL
end-procedure

begin-procedure Centre-Heading($in_string, #in_col_width, :$out_string)
  let $in_string = rtrim(ltrim($in_string,' '), ' ')
  let #len       = length($in_string)
  if #len >= #in_col_width
      let $out_string = $in_string
  else
      let #lead_blanks = trunc((#in_col_width - #len) / 2, 0)
      let #blank_cnt = 0
      let $out_string = ''
      while #blank_cnt < #lead_blanks
          let $out_string = $out_string || ' '
          let #blank_cnt = #blank_cnt + 1
      end-while
      let $out_string = $out_string || $in_string
  end-if
end-procedure

begin-procedure SQL-Statement-Error

  DISPLAY 'SQL-STATEMENT-ERROR '

  display $err-statement1
  display $err-statement2
  display ' Error : ' noline
  display $SQL-error
  display ' SQL Status : ' noline
  display #SQL-Status

  do Rollback-Transaction
  if $reset_status <> 'Y'
      do Reset-Proc-Status
      do Commit-Transaction
  end-if
  stop

end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routine to perform date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'stdapi.sqc'    !Update Process API
#Include 'hpcarct1.sqc'  !Get-Run-Control procedure
