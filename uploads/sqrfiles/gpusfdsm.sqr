!**********************************************************************!
!  gpusfdsm:   Federal Tax Summary Report        (USA)                 !
!**********************************************************************!
!                                                                      !
!               Confidentiality Information:                           !
!                                                                      !
!                                                                      !
! This module contains confidential and proprietary information        !
! of Oracle; it is not to be copied, reproduced, or transmitted        !
! in any form, by any means, in whole or in part, nor is it to         !
! be used for any purpose other than that for which it is              !
! expressly provided under the applicable license agreement.           !
!                                                                      !
! Copyright (C) 2006 Oracle. All Rights Reserved.                      !
!                                                                      !
!**********************************************************************!
!                                                                      !
!          $Date:  2006/07/21:01:43:32                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      !
!**********************************************************************!



#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization
#include 'usarpt.sqc'   !Get USA variables

begin-setup
  declare-variable
    default-numeric=decimal
      end-declare
end-setup

begin-report
  do Init-Report
  do Stdapi-Term
  do delete-tmp
end-report

begin-procedure Init-Report

  move 'GPUSFDSM' to $ReportID
  move 'Federal Tax Summary Report' to $ReportTitle
  display $ReportTitle

  do Get-EandG
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialize
  do Standard-Initialization
end-procedure


begin-procedure Initialize

 do Select-Parameters
 do Process-Run-Control

 if $RptPeriod = 'M'
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
 end-if

  create-array
         name=TaxArray size=7
         field=State-Array:char field=TaxCategory-Array:char:30
                                field=Period-Array:number:30
                                field=EE-TxGrs:number:30
                                field=EE-Tax:number:30
                                field=ER-TxGrs:number:30
                                field=ER-Tax:number:30
                                field=EE-NL-Grs:number:30
                                field=ER-NL-Grs:number:30

  create-array
         name=TotTaxArray size=1
         field=Tot-State-Array:char field=Tot-TaxCategory-Array:char:30
                                field=Tot-Period-Array:number:30
                                field=Tot-EE-TxGrs:number:30
                                field=Tot-EE-Tax:number:30
                                field=Tot-ER-TxGrs:number:30
                                field=Tot-ER-Tax:number:30
                                field=Tot-EE-NL-Grs:number:30
                                field=Tot-ER-NL-Grs:number:30


      let $Gpus_Tax_Category1 = '010204--07'   !for storing array info employee tax classes
      let $Gpus_Tax_Category2 = '--030506--'   !for storing array info employer tax classes
      let #Max_Category  = 6

end-procedure

begin-procedure Process-Run-Control
  move &GPUS_RPT_TAX_RC.GPUS_TAX_YEAR to $RptYear xxxx
  move $RptYear to #RptYear
  move $RptYear to $RptYearPrt xxxx
  move &GPUS_RPT_TAX_RC.GPUS_TAX_QTR         to $RptQtr

  if to_number (&GPUS_RPT_TAX_RC.GPUS_TAX_QTR) > 0
    move 'Q'          to $RptPeriod
    move 'Quarterly ' to $ReportTitlePeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '01'
        move '01' to $BegMonthCD
        move '03' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '1st Quarter' to $Period
        break
      when = '02'
        move '04' to $BegMonthCD
        move '06' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '2nd Quarter' to $Period
        break
      when = '03'
        move '07' to $BegMonthCD
        move '09' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '3rd Quarter' to $Period
        break
      when = '04'
        move '10' to $BegMonthCD
        move '12' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '4th Quarter' to $Period
        break
    end-evaluate
  else
    move &GPUS_RPT_TAX_RC.GPUS_TAX_MONTH to #MonthCd
    let #AsofMonth = #MonthCd
    move 'M'        to $RptPeriod
    move 'Monthly ' to $ReportTitlePeriod
    if #MonthCd <> 0
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      evaluate $MonthCd
        when = '01'
        when = '02'
        when = '03'
          move '01' to $BegMonthCD
        when = '04'
        when = '05'
        when = '06'
          move '04' to $BegMonthCD
        when = '07'
        when = '08'
        when = '09'
          move '07' to $BegMonthCD
        when = '10'
        when = '11'
        when = '12'
          move '10' to $BegMonthCD
      end-evaluate
      move $MonthName to $Period
      let $AsOfMonth = $MonthCD
      evaluate $AsOfMonth
        when = '01'
        when = '03'
        when = '05'
        when = '07'
        when = '08'
        when = '10'
        when = '12'
          concat $AsofMonth with $RptYear -xx-3
          concat '1' with $RptYear
        when = '02'
          concat $AsofMonth with $RptYear -xx-2
          concat '8' with $RptYear
        when = '04'
        when = '06'
        when = '09'
        when = '11'
          concat $AsofMonth with $RptYear -xx-3
          concat '0' with $RptYear
      end-evaluate
    else
      display 'Month Not Entered'
      stop
    end-if
  end-if

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($RptYear, $AsOfDate, {DEFYMD}, '', 'native')
  concat $ReportTitle with $ReportTitlePeriod
  move $ReportTitlePeriod to $ReportTitle
end-procedure

begin-heading 6
#Include 'stdhdg01.sqc'                !standard heading 1

  print 'Company'                        (3,1)
  print $Period                          (+0,80)
  print $RptYearPrt                      (+0,92)
  print 'Employee'                       (+2,63)
  print 'Employee'                       (0,106)
  print 'Employer'                       (0,123)
  print 'Employer'                       (0,166)
  print 'Taxable Wages'                  (+1,61)
  print 'Employee Tax'                   (0,82)
  print 'NL Wages'                       (0,106)
  print 'Taxable Wages'                  (0,121)
  print 'Employer Tax'                   (0,142)
  print 'NL Wages'                       (0,166)
end-heading

begin-procedure Report
let #I = 0
let #J = 0

begin-SELECT
A.GPUS_YE_RPT_CO   () on-break level=1 print=never before=Before-Company
                                            AFTER=AFTER-COMPANY
A.GPUS_TAX_RPT_TYPE
A.GPUS_TAX_CATEGORY
A.PYMT_DT
SUM(A.GPUS_TAX_GRS)    &GPUS_TAX_GRS
SUM(A.GPUS_TAX_AMT)    &GPUS_TAX_AMT
SUM(A.GPUS_TAX_NL_GRS) &GPUS_TAX_NL_GRS

 LET #GPUS_TAX_GRS = &GPUS_TAX_GRS
 LET #GPUS_TAX_AMT = &GPUS_TAX_AMT
 LET #GPUS_TAX_NL_GRS = &GPUS_TAX_NL_GRS

 let $GPUS_TAX_RPT_TYPE = rtrim(&A.GPUS_TAX_RPT_TYPE,' ')

  evaluate $GPUS_TAX_RPT_TYPE
      when = '10'
           move 0 to #I
           break
      when = '20'
           move 1 to #I
           break
      when = '30'
           move 2 to #I
           break
      when = '40'
           move 3 to #I
           break
      when = '50'
           move 4 to #I
           break
  end-evaluate

  let #Z = INSTR($Gpus_Tax_Category1,&A.GPUS_TAX_CATEGORY,1)
  evaluate #Z
           when = 1
                let #J=1
                break
           when = 3
                let #J=2
                break
           when = 5
                let #J=3
                break
           when = 7
                let #J=4
                break
           when = 9
                let #J=5
                break
  end-evaluate
  if #Z <> 0
     let $ee-er = 'e'
  end-if
  if #Z = 0
    let #Z = INSTR($Gpus_Tax_Category2,&A.GPUS_TAX_CATEGORY,1)
    evaluate #Z
             when = 1
                  let #J=1
                  break
             when = 3
                  let #J=2
                  break
             when = 5
                  let #J=3
                  break
             when = 7
                  let #J=4
                  break
             when = 9
                  let #J=5
                  break
    end-evaluate
    if #Z <> 0
      let $ee-er = 'r'
    end-if
  end-if

  let TaxArray.State-Array(#I) = $GPUS_TAX_RPT_TYPE

  if TaxArray.State-Array(5) = ''
     if #I=1 or #I=2 or #I=4
        let TaxArray.State-Array(5)  = '941'
     end-if
  end-if

  let TaxArray.State-Array(6)  = 'TOT'
  let TotTaxArray.Tot-State-Array(0)  = 'TOT'


 do Convert-To-DTU-Date(&A.PYMT_DT,$TMP2_Pymt_Dt)
 let $mo=substr($TMP2_Pymt_Dt,6,2)



  if $mo = $AsOfMonth
  if $ee-er = 'e'
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)

        if #I=1 or #I=2 or #I=4
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        end-if

           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)

     else
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)

        end-if

           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
     end-if
  end-if


   let #J = #J + 10
   let #BegMonthCD= to_number($BegMonthCD)
   let #MonthCD= to_number($MonthCD)
   let #mo = to_number($mo)

  if (#mo <= #MonthCD) and (#mo >= #BegMonthCD)

     if $ee-er = 'e'
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        end-if
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)
     else
       ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
       TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        end-if
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
     end-if
  end-if

  let #J = #J + 10

  if $ee-er = 'e'
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
     TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
     if #I=1 or #I=2 or #I=4
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
     end-if
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)
  else
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
     TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
     if #I=1 or #I=2 or #I=4
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
     end-if
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT #GPUS_TAX_NL_GRS to
        TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
  end-if

  let #I = 0
  let #J = 0

FROM PS_GPUS_FDSM_TMP A
WHERE A.PROCESS_INSTANCE = #prcs_process_instance - 1
GROUP BY A.GPUS_YE_RPT_CO,A.GPUS_TAX_RPT_TYPE,A.GPUS_TAX_CATEGORY,A.PYMT_DT
ORDER BY A.GPUS_YE_RPT_CO,A.GPUS_TAX_RPT_TYPE,A.GPUS_TAX_CATEGORY,A.PYMT_DT

end-SELECT


  if $company_taxarray_data <> 'y'
    if $Gpus_Ye_Rpt_Co = ''
      display 'No data selected'
      print 'No data selected'    (+5,1)  center
    end-if
  end-if

  move 'Y' to $End
  do Print-Totals

end-procedure


begin-procedure Before-Company
  move &A.Gpus_Ye_Rpt_Co to $Company
  do Get-Company-Data
end-procedure


begin-procedure After-Company
  do Print-Company-TaxArray
  clear-array name=TaxArray
  let $company_taxarray_data = 'y'
end-procedure


begin-procedure Print-Company-TaxArray
  let $eor-total = 'N'
  let #K = 0
  let #L = 1
  while #K < 7
      if TaxArray.State-Array(#K) <> ''

       move &CT.GPUS_TAX_EIN to $FederalEIN 099999999
       print $Company           (-4,13)
       print $CompanyName       (0,17)
       print 'Federal EIN:'     (+1,1)
       print $FederalEIN        (0,17)   edit xx-xxxxxxx
       print ''                 (+4,1)

       let $skip-array-item = 'N'
       let $State-Array = TaxArray.State-Array(#K)
       evaluate $State-Array
           when = '10'
                print 'Jurisdiction: U.S. excluding Puerto Rico & Territories' (0,1)
                break
           when = '20'
                print 'Jurisdiction: American Samoa' (0,1)
                break
           when = '30'
                print 'Jurisdiction: Guam' (0,1)
                break
           when = '40'
                print 'Jurisdiction: Puerto Rico' (0,1)
                break
           when = '50'
                print 'Jurisdiction: U.S. Virgin Islands' (0,1)
                break
           when = '941'
                print 'Jurisdiction: 941-SS Totals (AS + GU + VI)' (0,1)
                break
           when = 'TOT'
                print 'Jurisdiction: Company Totals' (0,1)
                break
           when-other
                let $skip-array-item = 'Y'
                break
       end-evaluate
       print '' (+2,1)


       if TaxArray.State-Array(#K) = '10' or
          TaxArray.State-Array(#K) = 'TOT'
          let #L = 1
          let #Skip_Category_A = 0
       else
          let #L = 2
          let #Skip_Category_A = 6
       end-if

       if $skip-array-item <> 'Y'
       while #L < #Max_Category
       evaluate #L
              when = 1
                   print 'U.S. Federal Income Tax' (+1,1)
                   break
              when = 2
                   print 'FICA/OASDI' (+1,1)
                   break
              when = 3
                   print 'FICA Medicare' (+1,1)
                   break
              when = 4
                   print 'Federal Unemployment Insurance' (+1,1)
                   break
              when = 5
                   print 'Advance EIC Payments' (+1,1)
                   break

         end-evaluate

         if #L <> #Skip_Category_A
             let #M = #K
             let #N = #L

             let #linetoprint = 0
             if $RptPeriod = 'M'
                print 'MTD' (+#linetoprint,50)
                let #linetoprint = 1
                do Get-TaxArray
             end-if

             let #N = #L + 10
             print 'QTD' (+#linetoprint,50)
             do Get-TaxArray

             let #N = #L + 20
             print 'YTD' (+1,50)
             do Get-TaxArray

             print '' (+2,1)

         end-if
         let #L = #L + 1

       end-while
       new-page

       end-if

    end-if
    let #K = #K + 1
  end-while
end-procedure


begin-procedure Print-Totals

  print 'Report Grand Totals' (+1,1)
  print '' (+2,1)
  let $eor-total = 'Y'

  let #K = 0
  let #L = 1

  while #L < #Max_Category
     evaluate #L
     when = 1
           print 'U.S. Federal Income Tax' (+1,1)
           break
     when = 2
           print 'FICA/OASDI' (+1,1)
           break
     when = 3
           print 'FICA Medicare' (+1,1)
           break
     when = 4
           print 'Federal Unemployment Insurance' (+1,1)
           break
     when = 5
           print 'Advance EIC Payments' (+1,1)
           break
     end-evaluate

     let #M = #K
     let #N = #L

     let #linetoprint = 0
     if $RptPeriod = 'M'
        print 'MTD' (+#linetoprint,50)
        let #linetoprint = 1
        do Get-TaxArray
     end-if

     let #N = #L + 10
     print 'QTD' (+#linetoprint,50)
     let $X = 'QTD'
     do Get-TaxArray

     let #N = #L + 20
     print 'YTD' (+1,50)
     let $X = 'YTD'
     do Get-TaxArray

     print '' (+2,1)


     let #L = #L + 1

  end-while

end-procedure


begin-procedure Get-TaxArray
  let #EETxGrs = 0
  let #EETax   = 0
  let #ERTxGrs = 0
  let #ERTax   = 0
  let #EENLGrs = 0
  let #ERNLGrs = 0
  if $eor-total = 'Y'
     get  #EETxGrs     #EETax     #ERTxGrs     #ERTax    #EENLGrs      #ERNLGrs
          from TotTaxArray(#M)
          Tot-EE-TxGrs(#N) Tot-EE-Tax(#N) Tot-ER-TxGrs(#N) Tot-ER-Tax(#N)
              Tot-EE-NL-Grs(#N) Tot-ER-NL-Grs(#N)
  else

     get  #EETxGrs     #EETax     #ERTxGrs     #ERTax     #EENLGrs      #ERNLGrs
          from TaxArray(#M)
          EE-TxGrs(#N) EE-Tax(#N) ER-TxGrs(#N) ER-Tax(#N) EE-NL-Grs(#N) ER-NL-Grs(#N)
  end-if



  do Format-Number(#EETxGrs, $out1, 'B99,999,999,999.99mi')
  print $out1                   (,56)
  do Format-Number(#EETax, $out2, 'B99,999,999,999.99mi')
  print $out2                    (,76)
  do Format-Number(#EENLGrs, $out3, 'B99,999,999,999.99mi')
  print $out3                    (,96)
  do Format-Number(#ERTxGrs, $out4, 'B99,999,999,999.99mi')
  print $out4                    (,116)
  do Format-Number(#ERTax, $out5, 'B99,999,999,999.99mi')
  print $out5                    (,136)
  do Format-Number(#ERNLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,156)



end-procedure

begin-procedure delete-tmp
begin-Sql
delete from PS_GPUS_FDSM_TMP
  WHERE PROCESS_INSTANCE   = #prcs_process_instance - 1
end-SQL
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'gpuspint.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'gpuscodt.sqc'  !Get-Company-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'gpuspctl.sqc'  !Process Scheduler Run Controls
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'geteandg.sqc'  !Get-EandG procedure