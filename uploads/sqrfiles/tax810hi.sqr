!***********************************************************************
!  TAX810HI:  Qtrly Wage List  - HAWAII                                *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2010, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2010/04/16:09:36:41                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  804998                                              !
!                                                                      *
!***********************************************************************

! #define taxtest
! #define debugx

#include 'setenv.sqc'  !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file'
    display ''
    display '{IMPORTPREFIX}TAX810HI{IMPORTSUFFIX} '
    display ''
    display 'contains 739-char records in the format required'
    display 'for quarterly wage reporting to the Hawaii Department '
    display 'of Labor and Industrial Relations.'
    display ''
    display 'Follow instructions from the department for preparing and'
    display 'submitting the QWRS file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

!***********************************************************************
begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810HI' to $ReportID

  move 'Hawaii Quarterly UI Wage Report' to $ReportTitle

  display ''
  display 'Creating File for Hawaii UI Wage Reporting'

end-procedure

!***********************************************************************
begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'HI'              to $State
#endif

  let #Output_Rec_EE_Count = 0
  let #Total_Page_Wages    = 0
  let $Output_EE_String    = ''

  !format output transmit date to MMDDYY
  do FORMAT-MMDDYY-DATE ($AsOfToday, $Output_Transmit_Date)
  show 'Output Transmit Date ->' $Output_Transmit_date

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  !format output quarter end date to MMDDYY
  do FORMAT-MMDDYY-DATE ($AsofDate, $Output_QTR_Date)
  show 'Output QTR Date ->' $Output_QTR_date

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 739 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity

  do Open-File

end-procedure

!***********************************************************************
begin-procedure Open-File

  open '{IMPORTPREFIX}TAX810HI{IMPORTSUFFIX}' as 10 for-writing record=739:fixed_nolf

end-procedure

!***********************************************************************
begin-procedure Process-Main

  move '' to $PriorCompany

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if
  do Get-Company-Data                 !Transmitter identifying data

  do Save-A-Record-Data

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  show 'process-main ' &a.company

  move &A.Company to $Company
  move '' to $priorEmplID

  ! Init output string/total/counters
  let $Output_EE_string = ''
  let #Total_Page_Wages = 0
  let $Empty_Company = 'Y'

  do Read-Employee-Data

  ! write empty record if no employee report for the company
  ! and company state tax table is active
  if $Empty_Company = 'Y'

     let $Active_StateTax_Tbl = 'N'
     do Check-StateTax-Tbl

     if $Active_StateTax_Tbl = 'Y'
        let $Output_EE_string = '.........//////////////////////////.............'
        do Before-Company

        do Write-QWRS-Record
        do Print-Summary-Data('CoTotal')

        add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
        add #Count_S to #Count_F
        add #Count_R to #Count_R_Total
        move 0 to #Co_NlGrs_QTD
        move 0 to #Count_S
        move 0 to #Count_R
        new-page

     end-if
  end-if

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY

end-SELECT

if #Count_F > 0
   do Print-Summary-Data('FileTotal')
end-if

end-procedure

!***********************************************************************
begin-procedure Read-Employee-Data

begin-SELECT
C.COMPANY    () on-break print=never BEFORE=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.TAX_CLASS
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
    let $Empty_Company = 'N'
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = $Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'HI'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move ''            to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if
  move &D.Name         to $Name
  do Rotate-Name

  ! format name per Hawaii spec with space between last first name
  let $Name = $Lastname || ', ' || $Firstname

  uppercase $Name

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD

  let #max_amt_NLG = 9999999999.99
  let #NlGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  let $done1 = 'N'

  while $done1 <> 'Y'
    do split-s-record (#NlGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '0999999999.99')

    do Create-QWRS-record

    add 1 to #Count_R
  end-while
end-procedure

!***********************************************************************
begin-procedure Create-QWRS-Record

   let #Total_Page_Wages = #Total_Page_Wages + #NlGrs_QTD

   let $Temp_String1 = edit(SUBSTR($NATIONAL_ID,1,9), '000000000')
   let $Temp_String2 = edit(SUBSTR($NAME,1,26), 'xxxxxxxxxxxxxxxxxxxxxxxxxx')
   let $Temp_String  = $Temp_String1 || $Temp_String2 || $NlGrs_QTD
   let $Output_EE_string = $Output_EE_String || $Temp_String
   Add 1 to #Output_Rec_EE_Count

   if #Output_Rec_EE_Count = 14
      do Write-QWRS-Record
   end-if

end-procedure

!***********************************************************************
begin-procedure Write-QWRS-Record

  let $Output_Batch_Number    = '000000000000000000000000'
  let $Output_Delinquent_Date = '000000'

  do Format-Number(#Total_Page_Wages, $Output_TTL_Page_Wages, '099999999999.99')

  Write 10 from $Output_Batch_Number:24
                $StateEIN:10
                $Output_QTR_Date:6
                $Output_Delinquent_Date:6
                $Output_EE_String:672
                $Output_TTL_Page_Wages:15
                $Output_Transmit_Date:6

  let #Output_Rec_Count = #Output_Rec_Count + 1
  let #Output_Rec_EE_Count = 0
  let #Total_Page_Wages    = 0
  let $Output_EE_String    = ''
  let $RecordWritten       = 'Y'

end-procedure

!***********************************************************************
begin-procedure FORMAT-MMDDYY-DATE ($Input_Date, :$Output_Date)

  !Convert date from std format date to MMDDYY


  let $tempout  = ' '

  ! convert $Input_Date to yyyymmdd format in $tempout
  do Format-DateTime($Input_Date, $tempout, {DEFCMP},'','')

  do Get-DateComponents($tempout, #tempYears, #tempMonths, #tempDays)

  let $tempYY = edit(#tempYears,'9999')
  let $tempYY = substr($tempYY,3,2)
  let $tempMM = edit(#tempMonths, '09')
  let $tempDD = edit(#tempDays, '09')

  let $Output_Date = $tempMM || $tempDD || $tempYY

end-procedure

!***********************************************************************
begin-procedure Check-StateTax-Tbl

begin-SELECT
CST.EFF_STATUS

   let $Active_StateTax_Tbl = 'Y'

FROM  PS_CO_STATETAX_TBL CST
WHERE COMPANY = $Company
  AND STATE   = $State
  AND EFF_STATUS = 'A'
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $Company
         AND  STATE   = $State
         AND  EFFDT  <= $AsOfDate)
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Before-Company

  do Get-Company-Data
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'HI' to $State
#endif
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  move &Employer_ID_SUT to $StateEIN

  move $Company to $PriorCompany
end-procedure

!***********************************************************************
begin-procedure After-Company

   if #Output_Rec_EE_Count > 0
      do Write-QWRS-Record
   end-if

   do Print-Summary-Data('CoTotal')

   add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
   add #Count_S to #Count_F
   add #Count_R to #Count_R_Total

   move 0 to #Co_NlGrs_QTD
   move 0 to #Count_S
   move 0 to #Count_R
   new-page

end-procedure

!***********************************************************************
begin-procedure Save-A-Record-Data
  move $CompanyName    to $TransmitterName
  move &CT.Federal_EIN to $FedEIN 099999999
  move $CompnyAdd1    to $TransmitterAddress
  move $CompnyCity        to $TransmitterCity
  let $TransmitterState = rtrim(&CT.State, ' ')
  move &CT.Postal      to $Zip
  move &CT.Country      to $Country
  do Foreign-Address-Test

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity

  if $Country = 'USA'
    move $Zip to $Zip xxxxx
    move ' '  to $ForeignPostalCode
  else
    move ' '  to $Zip
    move $Zip to $ForeignPostalCode
  end-if
end-procedure

!***********************************************************************
begin-procedure Foreign-Address-Test
  if $Country = 'USA'
    move '' to $ForeignAddr
    move '' to $CountryName
  else
    move 'X' to $ForeignAddr
    let $City = RTRIM($City,' ')
    concat $StateCd with $City bxx
    if $Country <> $priorCountry
      do Get-Country-Code
      move $Country to $priorCountry
      move &Descr   to $CountryName
    end-if
    move &Country_2Char to $StateCd
  end-if
end-procedure

!***********************************************************************
begin-procedure Get-Country-Code
begin-SELECT
COUNTRY_2CHAR,DESCR
FROM  PS_COUNTRY_TBL
WHERE COUNTRY = &CT.Country
end-SELECT
end-procedure

!***********************************************************************
begin-procedure Prompts

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

!***********************************************************************
begin-procedure Convert-Parameters

  move 'X' to $FileType
  move '0' to $DisketteType
end-procedure

!***********************************************************************
begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
         move 50 to #MaxRecordsPerDiskette
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'txovrflw.sqc'  !Split-S-Record Procedure
