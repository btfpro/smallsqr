!***********************************************************************
!  TAX810CA:  Qtrly Wage List - CALIFORNIA                             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of PeopleSoft, Inc.; it is not to be copied, reproduced, or          *
! transmitted in any form, by any means, in whole or in part,          *
! nor is it to be used for any purpose other than that for             *
! which it is expressly provided under the applicable license          *
! agreement.                                                           *
!                                                                      *
! Copyright (c) 1988-2003 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  03/06/2013 RSI-HCM101552  v1.0                                      *
!  Descr: Program revisions for XML file output                        *
!                                                                      *
!  04/26/2013 RSI-HCM103381  V1.1                                      *
!  Descr: Additional program revisions for XML file output             *
!                                                                      *
!  05/23/2013 RSI-HCM103397  V1.2                                      *
!  Descr: Correct first name and last name field length issue          *
!         - Add show message on the log file if first and last name    *
!           exceeds 16 and 30 characters                               *
!         - Read company from run control parameters                   *
!                                                                      *
!  09/27/2013 RSI-HCM103464  V2.0                                      *
!  Descr: Show actual filename in log and output file                  * 
!                                                                      *
!  01/08/2014 RSI-HCM103869  V3.0                                      *
!  Descr: Define filename array as variable                            * 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#include 'setup31.sqc'  !Printer and page-size initialization
#include 'usarpt.sqc'   !NID_COUNTRY defined
#include 'rsicdver.sqc' !Client Specific PeopleSoft Application Information

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver       '3.0'
  #Define Max_Rows       500000
  #Define Max_Files      20
  #Define READABLE_XML   !formatted with tabs ($XML_Tab)
!  #Define DebugD         !Show Processing Data
  #Define TagBeg         '<'
  #Define TagEnd         '>'
  #Define EndChr         '/'
  #Define FileNum        10
  #Define Dyn-S          [
  #Define Dyn-E          ]

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {RSI_APP_REL} < 8.81
      #Define FILESUFFIX       .XML
  #Else
      #Define IMPORTSUFFIX     .XML
  #EndIf
  #Define DefFileNames_Array Y

End-Setup

!***********************************************************************
! Procedure Begin-Report
!***********************************************************************
Begin-Report

  do Init-Report
   If $Prcs_Process_Instance = ''
     do Employer-Prompts
   Else
     do Company-Run-Control
   End-If  

  If $RecordWritten = 'Y'

     Show '-------------------------------------------------------------------------------------'
     show ''
     show 'Upon successful conclusion of this program, '
     show 'one or more files will have been created, using the '
     show 'location and naming convention "<Company>_' noline
     show $ReportID noline                     
     show '.XML" as follows:'
     show ''     
      let #I = 0
    While #I < #II
     GET $FileNames
     FROM FileNames_Array(#I)
     add 1 to #I
     SHOW $FileNames
    End-While
    let #II = 0
    Clear-Array NAME=FileNames_Array
     show ''
     show 'Each file created, starting with company "XXX"'         
     Show 'contains 275-character records in the XML format required'
     Show 'for submission of quarterly wages to the California'
     Show 'Employment Development Department.'
     Show ''
     Show 'Follow the instructions from the department for preparing and'
     Show 'submitting the file electronically.'
     Show ''
     Show '-------------------------------------------------------------------------------------'
  Else
     do Print-Summary-Data('NoData')
  End-If

  do Get-Current-DateTime
  Show ' '
  Show 'Report Ended at : ' $SysDateTime
  Show '**************************************************'

  do Stdapi-Term

End-Report

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-EandG


  move 'TAX810CA' to $ReportID
  move 'California Quarterly UI Wage Report' to $ReportTitle

  Show 'TAX810CA.SQR - Version '  {Prgm_Ver}
  Show '**************************************************'
  Show $ReportTitle
  Show ''
  Show 'Report Started at : ' $SysDateTime
  Show ''

  do Initialization

End-Procedure Init-Report

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization

  move 'CA' to $State

  #IfDef DebugD
     move {RSI_APP_REL} to $AppRel '9.9B'
     Show 'RSI Application Release '  $AppRel
     Show ''
  #EndIf

  do Get-Tax-Reporting-Run-Controls
  move &TX.BALANCE_YEAR to $RptYear 9999
  move $RptYear         to $RptYear ~~xx
  move $PeriodEndDate   to $AsOfDate  
  move &TX.COMPANY to $Company
  If rtrim($Company,' ') = ''
     Show '*** Company field blank on Tax Run Control Record ***'
     Show '***************** Processing STOPped ****************'
     STOP
  End-If
  If isblank($PeriodBegDate)
     move &TX.BALANCE_YEAR to $RptYear 9999
     let #QtrBegMonth = #QtrEndMonth - 2
     let $PeriodBegDate = $RptYear || '-' || edit(#QtrBegMonth,'09') || '-01'
     move '1' to $Year4
     move '-' to $DDelimiter
     do Format-DateTime($PeriodBegDate, $PeriodBegDate, {DEFYMD}, '', 'native')
  End-If

  Show ' '
  Show 'Processing balances for '   noline
  Show $RptQtrYr

  move &TX.BALANCE_YEAR to $Balance_Year     0999
  let $ReportingPeriod   = $QtrEndMonth || $Balance_Year
  move &TX.BALANCE_QTR  to $RptQtr

  let $XML_Tab = chr(09)

  #IfDef READABLE_XML
     let $Tab0 = ''
     let $Tab1 = $XML_Tab
     let $Tab2 = $XML_Tab || $XML_Tab
     let $Tab3 = $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab4 = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab5 = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
     let $Tab6 = $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab || $XML_Tab
  #EndIf

  do Setup-SQL
  do Setup-Array

End-Procedure Initialization

!***********************************************************************
! Procedure Open-XML-File
!***********************************************************************
Begin-Procedure Open-XML-File

  #IfDef HAS
     let $FileID = $g_file_path_out || $Company ||'_' || $ReportID || '{FILESUFFIX}'
  #Else
     #If {RSI_APP_REL} < 8.81
        let $FileID = '{FILEPREFIX}' || $Company ||'_' || $ReportID || '{FILESUFFIX}'
     #Else
        let $FileID = '{IMPORTPREFIX}' || $Company ||'_' || $ReportID || '{IMPORTSUFFIX}'
     #EndIf
  #EndIf  
  
  open $FileID as {FileNum} for-writing record=275:vary   Status=#FileStatus 

  If #FileStatus <> 0
     Show 'Error Opening Output XML File.  ' $FileID
  Else
    #IfDef DebugD
       Show $FileID ' output file has been opened for writing.'
       Show ''
    #EndIf
     let $FileOpen = 'Y'
  End-If
    
  If #II < {Max_Files}
    put $FileID into FileNames_Array(#II)
     add 1 to #II
  Else
     Show 'Cache capacity exceeded for FileNames Data, check Max_Rows'
     STOP
  End-If




End-Procedure Open-XML-File

!***********************************************************************
! Procedure Setup-SQL
!***********************************************************************
Begin-Procedure Setup-SQL

  #IfDef RSI_TOOLS_7.5
         let $Taxbalance_Person = ' PS_TAX_BALANCE C, PS_PERSONAL_DATA D, PS_PERS_NID D1'
         let $And_Perstatus     = ' AND D.PER_STATUS    = ''E'''
  #Else
         let $Taxbalance_Person = ' PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1'
         let $And_Perstatus     = ''
  #EndIf

  #IfDef DebugD
     Show '    $Taxbalance_Person:        ' $Taxbalance_Person
     Show '    $And_Perstatus:            ' $And_Perstatus
  #EndIf

End-Procedure Setup-SQL

!***********************************************************************
! Procedure Setup-Array
!***********************************************************************
Begin-Procedure Setup-Array

  Create-Array
    Name=EMPLOYEES
    Size={Max_Rows}
    Field=SSN:char
    Field=FIRSTNAME:char
    Field=MIDDLENAME:char
    Field=LASTNAME:char
    Field=TOTALWAGES:char
    Field=TAXABLEWAGES:char
    Field=TAXWITHHELD:char
    Field=WAGEPLAN:char
    
 Create-array 
    NAME=FileNames_Array 
    size= {Max_Files}
    Field=FileNames:Char    

End-Procedure Setup-Array

!***********************************************************************
! Procedure Process-Main
!***********************************************************************
Begin-Procedure Process-Main

  If rtrim($Company,' ') = ''
     Show '*** Company field blank on Tax Run Control Record ***'
     Show '***************** Processing STOPped ****************'
     STOP
  End-If

  do Get-Company-Data

BEGIN-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
END-SELECT

BEGIN-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAX_REPORT_TYPE

  move ''         to $priorEmplID

  do Read-Employee-Data

FROM PS_COMPANY_TBL A
WHERE A.EFF_STATUS       = 'A'
  AND A.TAX_REPORT_TYPE IN ('2','R')
  AND A.COMPANY = $Company
  AND A.EFFDT            = (SELECT MAX(A1.EFFDT)
                              FROM PS_COMPANY_TBL A1
                             WHERE A1.COMPANY = A.COMPANY
                               AND A1.EFFDT  <= $AsOfDate)
ORDER BY A.COMPANY
END-SELECT

End-Procedure Process-Main

!***********************************************************************
! Procedure Read-Employee-Data
!***********************************************************************
Begin-Procedure Read-Employee-Data

BEGIN-SELECT
C.COMPANY    () on-Break level=1 print=never before=Before-Company
                                       AFTER=AFTER-COMPANY
C.EMPLID     () on-Break level=2 print=never before=Before-SSN
                                       AFTER=AFTER-SSN
C.TAX_CLASS  () on-Break level=3 print=never before=Before-Tax-Class
D1.NATIONAL_ID
C.STATE
C.TXGRS_QTD         &C.TXGRS_QTD=number
C.NLGRS_QTD         &C.NLGRS_QTD=number
C.TAX_QTD           &C.TAX_QTD=number
D.LAST_NAME         &D.LAST_NAME=char
D.FIRST_NAME        &D.FIRST_NAME=char
D.MIDDLE_NAME       &D.MIDDLE_NAME=char

  move &C.TAX_QTD to #Tax_QTD
 
  If &C.TAX_CLASS = 'H' and &C.TAX_QTD < 0
     move 'CA QTD Tax Withheld Negative' to $ErMsg
     move &C.TAX_QTD to #Neg_Tax_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess1
  End-If

  If &C.TAX_CLASS = 'H' and (&C.TAX_QTD = 0 or &C.TAX_QTD > 0)
     move '' to $DoNotProcess1
  End-If

  If &C.TAX_CLASS = 'H' and &C.TXGRS_QTD < 0
     move 'CA QTD PIT Wages Negative' to $ErMsg
     move &C.TXGRS_QTD to #Neg_TxGrs_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess2
  End-If

  If &C.TAX_CLASS = 'H' and (&C.TXGRS_QTD = 0 or &C.TXGRS_QTD > 0)
     move '' to $DoNotProcess2
  End-If

  If &C.TAX_CLASS = 'U' and &C.NLGRS_QTD < 0
     move 'CA QTD SUI Wages Negative' to $ErMsg
     move &C.NLGRS_QTD to #Neg_NlGrs_QTD
     do Print-Summary-Data('NegAmt')
     move 'Y' to $DoNotProcess3
  End-If

  If &C.TAX_CLASS = 'U' and (&C.NLGRS_QTD = 0 or &C.NLGRS_QTD > 0)
     move '' to $DoNotProcess3
  End-If

FROM {Dyn-S}$Taxbalance_Person{Dyn-E}
WHERE C.COMPANY        = &A.COMPANY
  {Dyn-S}$And_Perstatus{Dyn-E}
  AND D.EMPLID         = C.EMPLID
  AND C.TAX_CLASS     IN ('H','U')
  AND C.BALANCE_ID     = $Calendar_Year_Id
  AND C.BALANCE_YEAR   = &TX.BALANCE_YEAR
  AND C.BALANCE_QTR    = &TX.BALANCE_QTR
  AND C.STATE          = 'CA'
  AND C.LOCALITY       = ' '
  AND C.BALANCE_PERIOD = (SELECT MAX(BALANCE_PERIOD)
                          FROM PS_TAX_BALANCE
                          WHERE EMPLID       = C.EMPLID
                            AND COMPANY      = C.COMPANY
                            AND BALANCE_ID   = C.BALANCE_ID
                            AND BALANCE_YEAR = C.BALANCE_YEAR
                            AND BALANCE_QTR  = C.BALANCE_QTR
                            AND STATE        = C.STATE
                            AND LOCALITY     = ' '
                            AND TAX_CLASS    = C.TAX_CLASS)
  AND ((C.NLGRS_QTD <> 0
        AND &A.TAX_REPORT_TYPE = '2')
       OR(C.TAX_QTD <> 0)
       OR(C.TXGRS_QTD <> 0
          AND &A.TAX_REPORT_TYPE = '2'))
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY C.EMPLID
END-SELECT

End-Procedure Read-Employee-Data

!***********************************************************************
! Procedure Before-SSN
!***********************************************************************
Begin-Procedure Before-SSN

  move &D1.NATIONAL_ID to $S123 xxx
  move &C.EMPLID to $ErrEmplid
  If $S123 = &TEMP_SSN_MASK or rtrim(&D1.NATIONAL_ID, ' ') = ''
     move 'I' to $National_Id
  Else
     move &D1.NATIONAL_ID to $National_Id
  End-If

  let $EmplFirstName = ltrim(rtrim(&D.FIRST_NAME, ' '),' ')
  If length($EmplFirstName) > 16
    let $FirstName = substr($EmplFirstName,1,16)
    let $Message = 'Emplid ' || rtrim($ErrEmplid,' ') || ' First name length was greater than the allowed 16 characters 
        by the State of California. ' || $EmplFirstName  || ' was reported as ' || $FirstName  || '.' 
    show $Message
  else
    let $FirstName = ltrim(rtrim(&D.FIRST_NAME, ' '),' ')
  end-if
  
  let $LastName = ltrim(rtrim(&D.LAST_NAME, ' '),' ')

  let $MiddleName = substr(&D.MIDDLE_NAME,1,1)

  do Get-Wage-Plan-Cd
  move &S.WAGE_PLAN_CD to $Wage_Plan_Cd

  move 0  to #NlGrs_QTD
  move 0  to #TxGrs_QTD
  move 0  to #STW_QTD

  move '' to $DoNotProcess1
  move '' to $DoNotProcess2
  move '' to $DoNotProcess3

End-Procedure Before-SSN

!***********************************************************************
! Procedure After-SSN
!***********************************************************************
Begin-Procedure After-SSN

  If &A.TAX_REPORT_TYPE = 'R'
     move 0 to #NlGrs_QTD
     move 0 to #TxGrs_QTD
     move 0 to #Temp_Co_NlGrs_QTD
     move 0 to #Temp_Co_NlGrs_TRec
     move 0 to #Temp_Co_TxGrs_QTD
     move 0 to #Temp_Co_TxGrs_TRec
  End-If

  If ($DoNotProcess1 = '' and $DoNotProcess2 = '' and $DoNotProcess3 = '')
     move #NlGrs_QTD to $NlGrs_QTD  899999999999.99
     move #TxGrs_QTD to $TxGrs_QTD  899999999999.99
     move #STW_QTD   to $STW_QTD    899999999999.99

     do Save-Employee-Record
     add 1 to #Count_S
     add #Temp_Co_NlGrs_QTD  to #Co_NlGrs_QTD
     add #Temp_Co_NlGrs_TRec to #Co_NlGrs_TRec
     add #Temp_Co_TxGrs_QTD  to #Co_TxGrs_QTD
     add #Temp_Co_TxGrs_TRec to #Co_TxGrs_TRec
     add #Temp_Co_STW_QTD    to #Co_STW_QTD
     add #Temp_Co_STW_TRec   to #Co_STW_TRec
  End-If

  move 0 to #Temp_Co_NlGrs_QTD
  move 0 to #Temp_Co_NlGrs_TRec
  move 0 to #Temp_Co_TxGrs_QTD
  move 0 to #Temp_Co_TxGrs_TRec
  move 0 to #Temp_Co_STW_QTD
  move 0 to #Temp_Co_STW_TRec

End-Procedure After-SSN

!***********************************************************************
! Procedure Before-Tax-Class
!***********************************************************************
Begin-Procedure Before-Tax-Class

  If &C.TAX_CLASS = 'U' and &C.NLGRS_QTD > 0
     move &C.NLGRS_QTD to #NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_NlGrs_QTD
     add #NlGrs_QTD to #Temp_Co_NlGrs_TRec
  End-If

  If &C.TAX_CLASS = 'H' and &C.TAX_QTD > 0
     move &C.TAX_QTD to #Stw_Qtd
     add #Stw_Qtd to #Temp_Co_STW_QTD
     add #Stw_Qtd to #Temp_Co_STW_TRec
  End-If

  If &C.TAX_CLASS = 'H' and &C.TXGRS_QTD > 0
     move &C.TXGRS_QTD to #TxGrs_QTD
     add #TxGrs_QTD to #Temp_Co_TxGrs_QTD
     add #TxGrs_QTD to #Temp_Co_TxGrs_TRec
  End-If

End-Procedure Before-Tax-Class

!***********************************************************************
! Procedure Get-Wage-Plan-Cd
!***********************************************************************
Begin-Procedure Get-Wage-Plan-Cd

BEGIN-SELECT loops=1
S.WAGE_PLAN_CD
S.EFFDT
FROM PS_STATE_TAX_DATA S
WHERE S.EMPLID  = &C.EMPLID
  AND S.COMPANY = &A.COMPANY
  AND S.STATE   = 'CA'
  AND S.EFFDT  <= $PeriodEndDate
ORDER BY S.EFFDT DESC
END-SELECT

End-Procedure Get-Wage-Plan-Cd

!***********************************************************************
! Procedure Before-Company
!***********************************************************************
Begin-Procedure Before-Company

  do Get-Company-Data
  move 'CA' to $State
  let $CT.Fein = edit(&CT.FEDERAL_EIN, '099999999')
  do Get-State-Tax-Data

  If rtrim(&EMPLOYER_ID_SUT,' ') = ''
     Show '*** State Unemployment ID missing in Company State Tax Table ***'
     Show '*** Company: '   noline
     Show $Company
     Show '*** State  : '   noline
     Show $State
     Show '*********************** Processing STOPped *********************'
     STOP
  End-If

  let $StateEIN = rtrim(&EMPLOYER_ID_SUT,' ')
  let $StateEIN = translate($StateEIN,'-','')
  let $StateEIN = translate($StateEIN,' ','')
  let $StateEIN = lpad($StateEIN,8,'0')

   If $StateEIN <> $PrevStateEIN           
    If $FileOpen <> 'Y'
    move $StateEIN to $PrevStateEIN        
     do Open-XML-File
     do Write-File-ReturnData
    End-If
  End-if

  do Format-Employer-Record
  do Write-Employer-ReturnHeader

End-Procedure Before-Company

!***********************************************************************
! Procedure After-Company
!***********************************************************************
Begin-Procedure After-Company

  do Print-Summary-Data('CoAmt')
  do Format-Number(#Co_STW_TRec, $Co_STW_TRec, '899999999999.99')
  do Format-Number(#Co_NlGrs_TRec, $Co_NlGrs_TRec, '899999999999.99')
  do Format-Number(#Co_TxGrs_TRec, $Co_TxGrs_TRec, '899999999999.99')

  If #Count_S > 0
     move #Count_S to $Count_S  '8999999'
     do Write-Employee-StateReturn
  End-If

  add #Co_STW_QTD   to #Tot_STW_QTD
  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
  add #Count_S      to #Count_F
  add #Count_R      to #Count_R_Total

  new-page
  do Reset-Co-Total

    If $FileOpen = 'Y'
     do Write-XML-Line($Tab0, 'ReturnData', '', 'End')
     close {FileNum}
     let $FileOpen = 'N'
    End-If
  let $PrevStateEIN = ' '
  
End-Procedure After-Company

!***********************************************************************
! Procedure Reset-Co-Total
!***********************************************************************
Begin-Procedure Reset-Co-Total

  move 0  to #Co_STW_QTD
  move 0  to #Co_NlGrs_QTD
  move 0  to #Co_TxGrs_QTD
  move 0  to #Count_S
  move 0  to #Count_R
  move '' to $Co_NlGrs_TRec
  move 0  to #Co_NlGrs_TRec
  move '' to $Co_TxGrs_TRec
  move 0  to #Co_TxGrs_TRec
  move '' to $Co_STW_TRec
  move 0  to #Co_STW_TRec
  move 0  to $Month1Count
  move 0  to $Month2Count
  move 0  to $Month3Count
  move 0  to #Month1Count
  move 0  to #Month2Count
  move 0  to #Month3Count

End-Procedure Reset-Co-Total

!***********************************************************************
! Procedure Save-Employee-Record
!***********************************************************************
Begin-Procedure Save-Employee-Record

  let $National_Id = substr($National_Id, 1, 9)

  If #EE < {Max_Rows}
     PUT  $NATIONAL_ID
          $FirstName
          $MiddleName
          $LastName
          $NlGrs_QTD
          $TxGrs_QTD
          $STW_QTD
          $Wage_Plan_Cd
     INTO EMPLOYEES(#EE)
     add 1 to #EE
  Else
     Show 'Cache capacity exceeded for Employee Data, check Max_Rows'
     STOP
  End-If

  move 0   to #NlGrs_QTD
  move ' ' to $NlGrs_QTD
  move 0   to #TxGrs_QTD
  move ' ' to $TxGrs_QTD
  move 0   to #STW_QTD
  move ' ' to $STW_QTD

End-Procedure Save-Employee-Record

!***********************************************************************
! Procedure Format-Employer-Record
!***********************************************************************
Begin-Procedure Format-Employer-Record

  do Get-Company-Phone

  move &A.DESCR    to $CompanyName
  move &A.ADDRESS1 to $CompanyAddr1
  move &A.CITY     to $CompanyCity
  move &A.STATE    to $StateCd

  let $Zip = translate(&A.POSTAL,' -','')
  let $Phone = translate($Company_Phone,'@#$%^&*()_-+=[]\?/|<>:;., ','')

  do Format-DateTime($PeriodBegDate, $out, {DEFCMP},'','')
  let $xml_PeriodBegDate = edit($out, 'YYYY-MM-DD')
  do Format-DateTime($PeriodEndDate, $out, {DEFCMP},'','')
  let $xml_PeriodEndDate = edit($out, 'YYYY-MM-DD')

  do XML-Special-Chars($Company, $XCompany)

  do XML-Special-Chars($CompanyName, $XCompanyName)

  do XML-Special-Chars($CompanyAddr1, $XCompanyAddr1)

  do XML-Special-Chars($CompanyCity, $XCompanyCity)

  do XML-Special-Chars($StateCd, $XCompanyState)

  do XML-Special-Chars($Zip, $XCompanyZip)

  do XML-Special-Chars($Phone, $XCompanyPhone)

End-Procedure Format-Employer-Record

!***********************************************************************
! Procedure Get-Company-Phone
!***********************************************************************
Begin-Procedure Get-Company-Phone

  let $Company_Phone = ''

BEGIN-SELECT
COMP_PHONE.PHONE

  let $Company_Phone = &COMP_PHONE.PHONE

FROM PS_COMP_PHONE_TBL COMP_PHONE
WHERE COMP_PHONE.COMPANY    = &A.COMPANY
  AND COMP_PHONE.PHONE_TYPE = 'MAIN'
  AND COMP_PHONE.EFFDT      = (SELECT MAX(C1.EFFDT)
                                 FROM PS_COMP_PHONE_TBL C1
                                WHERE C1.COMPANY    = COMP_PHONE.COMPANY
                                  AND C1.PHONE_TYPE = COMP_PHONE.PHONE_TYPE
                                  AND C1.EFFDT     <= $AsOfDate)
END-SELECT

End-Procedure Get-Company-Phone

!***********************************************************************
! Procedure XML-Special-Chars  do XML-Special-Chars (FIELD, $Rtrn_Value)
!***********************************************************************
Begin-Procedure XML-Special-Chars($Test_String, :$Return_Value)

  let $Before_String = $Test_String
  let $Test_String   = replace($Test_String, '&',  '&amp;')
  let $Test_String   = replace($Test_String, '"',  '&quot;')
  let $Test_String   = replace($Test_String, '<',  '&lt;')
  let $Test_String   = replace($Test_String, '>',  '&gt;')
  let $Test_String   = replace($Test_String, '''', '&apos;')

  #IfDef DebugD
     If $Before_String <> $Test_String
        Show 'XML-Special-Chars:  ' $Before_String ' changed to XML format ' $Test_String
     End-If
  #EndIf

  let $Return_Value = rtrim($Test_String,' ')

End-Procedure XML-Special-Chars

!***********************************************************************
! Procedure Write-File-ReturnData
!***********************************************************************
Begin-Procedure Write-File-ReturnData

  do Write-XML-Line($Tab0, '<?xml version="1.0" encoding="utf-8"?>'                            , '' , 'Write')
  do Write-XML-Line($Tab0, '<ReturnData documentCount="2"'                                     , '' , 'Write')
  do Write-XML-Line($Tab0, 'xsi:schemaLocation="http://www.irs.gov/efile ReturnDataState.xsd"' , '' , 'Write')
  do Write-XML-Line($Tab0, 'xmlns="http://www.irs.gov/efile"'                                  , '' , 'Write')
  do Write-XML-Line($Tab0, 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'            , '' , 'Write')

End-Procedure Write-File-ReturnData

!***********************************************************************
! Procedure Write-Employer-ReturnHeader
! Document 1 Employer data, for each company
!***********************************************************************
Begin-Procedure Write-Employer-ReturnHeader

  let $ContentLocation = 'DE9C' || datetostr(datenow(),'-MMDDYY-HHMISS-') || $XCompany
  let $ReturnHeader    = '<ReturnHeaderState documentId="A">'

  do Write-XML-Line($Tab1, 'ContentLocation'    , $ContentLocation       , 'Content')
  do Write-XML-Line($Tab1, $ReturnHeader        , ''                     , 'Write')
  do Write-XML-Line($Tab2, 'TaxPeriodBeginDate' , $xml_PeriodBegDate     , 'Content')
  do Write-XML-Line($Tab2, 'TaxPeriodEndDate'   , $xml_PeriodEndDate     , 'Content')
  do Write-XML-Line($Tab2, 'ReturnQuarter'      , $RptQtr                , 'Content')
  do Write-XML-Line($Tab2, 'Taxyear'            , $Balance_Year          , 'Content')
  do Write-XML-Line($Tab2, 'ReturnType'         , 'StateCombined'        , 'Content')
  do Write-XML-Line($Tab2, 'Form'               , 'DE9C'                 , 'Content')
  do Write-XML-Line($Tab2, 'FilingAction'       ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'Action'             , 'Original'             , 'Content')
  do Write-XML-Line($Tab2, 'FilingAction'       ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'TIN'                ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'TypeTIN'            , 'FEIN'                 , 'Content')
  do Write-XML-Line($Tab3, 'TINTypeValue'       , $CT.Fein               , 'Content')
  do Write-XML-Line($Tab2, 'TIN'                ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'StateEIN'           ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'TypeStateEIN'       , 'WithholdingAccountNo' , 'Content')
  do Write-XML-Line($Tab3, 'StateEINValue'      , $StateEIN              , 'Content')
  do Write-XML-Line($Tab2, 'StateEIN'           ,  ''                    , 'End')
  do Write-XML-Line($Tab2, 'StateCode'          , 'CA'                   , 'Content')
  do Write-XML-Line($Tab2, 'BusinessAddress'    ,  ''                    , 'Begin')
  do Write-XML-Line($Tab3, 'BusinessName'       , $XCompanyName          , 'Content')
  do Write-XML-Line($Tab3, 'AddressLine'        , $XCompanyAddr1         , 'Content')
  do Write-XML-Line($Tab3, 'City'               , $XCompanyCity          , 'Content')
  do Write-XML-Line($Tab3, 'StateOrProvince'    , $XCompanyState         , 'Content')
  do Write-XML-Line($Tab3, 'ZipCode'            , $XCompanyZip           , 'Content')
  do Write-XML-Line($Tab3, 'PhoneNumber'        , $XCompanyPhone         , 'Content')
  do Write-XML-Line($Tab2, 'BusinessAddress'    ,  ''                    , 'End')
  do Write-XML-Line($Tab1, 'ReturnHeaderState'  ,  ''                    , 'End')

  move 'Y' to $RecordWritten

End-Procedure Write-Employer-ReturnHeader

!***********************************************************************
! Procedure Write-Employee-StateReturn
! Document 2 Payroll summary and employee data
!***********************************************************************
Begin-Procedure Write-Employee-StateReturn

  let $XML_StateCombine   = '<StateCombined documentId="-">'

  do Write-XML-Line($Tab1, 'StateReturn'            , ''             , 'Begin')
  do Write-XML-Line($Tab2, $XML_StateCombine        , ''             , 'Write')
  do Write-XML-Line($Tab3, 'NumberOfEmployees'      , $Count_S       , 'Content')
  do Write-XML-Line($Tab3, 'WHTotalWages'           , $Co_NlGrs_TRec , 'Content')
  do Write-XML-Line($Tab3, 'TotalIncomeTaxWithheld' , $Co_STW_TRec   , 'Content')
  do Write-XML-Line($Tab3, 'WHTaxableWages'         , $Co_TxGrs_TRec , 'Content')
  do Write-XML-Line($Tab3, 'PayRoll'                , ''             , 'Begin')

  do Get-Employee-Detail

  do Write-XML-Line($Tab3, 'PayRoll'                , ''             , 'End')
  do Write-XML-Line($Tab3, 'Month1Employees'        , $Month1Count   , 'Content')
  do Write-XML-Line($Tab3, 'Month2Employees'        , $Month2Count   , 'Content')
  do Write-XML-Line($Tab3, 'Month3Employees'        , $Month3Count   , 'Content')
  do Write-XML-Line($Tab2, 'StateCombined'          , ''             , 'End')
  do Write-XML-Line($Tab1, 'StateReturn'            , ''             , 'End')

End-Procedure Write-Employee-StateReturn

!***********************************************************************
! Procedure Get-Employee-Detail
! Get from array, employee payroll data
!***********************************************************************
Begin-Procedure Get-Employee-Detail

  let #E = 0

  While #E < #EE
    GET $SSN
        $FirstName
        $MiddleName
        $LastName
        $TotalWages
        $TaxableWages
        $TaxWithheld
        $WagePlan
    FROM EMPLOYEES(#E)
    add 1 to #E

    do XML-Special-Chars($SSN, $Xssn)
    do XML-Special-Chars($FirstName, $XFirstName)
    do XML-Special-Chars($MiddleName, $XMiddleName)
    do XML-Special-Chars($LastName, $XLastName)
    do Write-Employee-Detail
  End-While

  let #EE = 0
  Clear-Array NAME=EMPLOYEES

End-Procedure Get-Employee-Detail

!***********************************************************************
! Procedure Write-Employee-Detail
!***********************************************************************
Begin-Procedure Write-Employee-Detail

  do Write-XML-Line ($Tab4, 'Employee'    , ''             , 'Begin')
  do Write-XML-Line ($Tab5, 'SSN'         , $Xssn          , 'Content')
  do Write-XML-Line ($Tab5, 'Employee'    , ''             , 'Begin')
  do Write-XML-Line ($Tab6, 'FirstName'   , $XFirstName    , 'Content')

  If rtrim($XMiddleName,' ') <> ''
     do Write-XML-Line ($Tab6, 'MiddleName'  , $XMiddleName   , 'Content')
  End-If

  do Write-XML-Line ($Tab6, 'LastName'    , $XLastName     , 'Content')
  do Write-XML-Line ($Tab5, 'Employee'    , ''             , 'End')
  do Write-XML-Line ($Tab5, 'TotalWages'  , $TotalWages    , 'Content')
  do Write-XML-Line ($Tab5, 'TaxableWages', $TaxableWages  , 'Content')
  do Write-XML-Line ($Tab5, 'TaxWithheld' , $TaxWithheld   , 'Content')
  do Write-XML-Line ($Tab5, 'WagePlan'    , $WagePlan      , 'Content')
  do Write-XML-Line ($Tab4, 'Employee'    , ''             , 'End')

End-Procedure Write-Employee-Detail

!***********************************************************************
! Procedure Write-XML-Line
! Write 1 of 4 Tag Types <Begin></End>Data or only the $Tag variable
!***********************************************************************
Begin-Procedure Write-XML-Line($Tab, $Tag, $Content, $Tag_Type)

  let $XMLcontent = ''

  If isblank($Content)
     let $Content = ' '
  End-If

  Evaluate $Tag_Type
    When = 'Begin'
      let $XMLcontent = {TagBeg} || $Tag     || {TagEnd}
      Break
    When = 'End'
      let $XMLcontent = {TagBeg} || {EndChr} || $Tag || {TagEnd}
      Break
    When = 'Content'
      let $XMLcontent = {TagBeg} || $Tag     || {TagEnd} || $Content
                     || {TagBeg} || {EndChr} || $Tag    || {TagEnd}
      Break
    When = 'Write'
      let $XMLcontent = $Tag
      Break
    When-Other
      Show 'Invalid tag type passed to Write-XML-Line:  ' $Tag_Type '  Tag: ' $Tag '  ' $Content
  End-Evaluate

  If $XMLcontent <> ''
     let $XMLcontent = $Tab || $XMLcontent
     Write {FileNum} From $XMLcontent
  End-If

End-Procedure Write-XML-Line

!***********************************************************************
! Procedure Employer-Prompts
!***********************************************************************
Begin-Procedure Employer-Prompts

  Show ' '
  Show 'Enter quarterly data for ' noline
  Show $Company noline
  Show ':'
  Show '(Numbers should not include commas)'
  input $Company         '   Company               '
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'
  move $Month1Count to #Month1Count
  move $Month2Count to #Month2Count
  move $Month3Count to #Month3Count

End-Procedure Employer-Prompts

!***********************************************************************
! Procedure Company-Run-Control
!***********************************************************************
Begin-Procedure Company-Run-Control
   move ' ' to $Company
BEGIN-SELECT
CA.COMPANY
CA.CA_MONTH1_COUNT
CA.CA_MONTH2_COUNT
CA.CA_MONTH3_COUNT

  move &CA.COMPANY to $Company
  move &CA.CA_MONTH1_COUNT to $Month1Count   '8999999'
  move &CA.CA_MONTH2_COUNT to $Month2Count   '8999999'
  move &CA.CA_MONTH3_COUNT to $Month3Count   '8999999'
  move $Month1Count        to #Month1Count
  move $Month2Count        to #Month2Count
  move $Month3Count        to #Month3Count  

  do Process-Main
  
FROM PS_RC_TAX810CA CA
WHERE CA.OPRID       = $Prcs_OprID
  AND CA.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT
  If #Count_F > 0
     do Print-Summary-Data('FileTotal')
  End-If
End-Procedure Company-Run-Control

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'geteandg.sqc'  !Get-EandG procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rptsmmca.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
