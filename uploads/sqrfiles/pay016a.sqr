!**********************************
!  PAY016A:  Bond Purchase Report  *
!**********************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:30:37                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup31.sqc'  !Printer and page-size initialization
#Include 'usarpt.sqc'  !Get USA variables

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY016A' to $ReportID
  move 'Bond Purchase Report' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  #ifdef OS400
      open '{IMPORTPREFIX}BondFile{IMPORTSUFFIX}'     as 10 for-writing record=93:fixed
  #else
      open '{IMPORTPREFIX}BondFile.out{IMPORTSUFFIX}' as 10 for-writing record=93:fixed
  #endif

  do Payroll-Report-Initialization
  close 10
end-procedure


begin-heading 8
#Include 'stdhdg02.sqc'


  print 'Bond ID: '       (4,1)
  print $HdgBondID        ()
  print 'Denomination: '  (0,+3)
  print $HdgDenom         ()
  print 'Purchase Cost: ' (0,+3)
  print $HdgCost          ()
  print '                                             No.Of  Purchase    ' (+2,1)
  print 'Bond Owner Name/'                                     ()
  print 'Employee ID  Name                            Bonds    Date      ' (+1,1)
  print 'Other Registrant Name               SSN      C/B'     ()
end-heading


begin-procedure Report

  move 'N' to $Bond_Purchase

begin-SELECT
A.COMPANY      () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT
A.PAYGROUP
B.DEPTID
B.NAME
B.EMPLID
B.SSN
B.PAGE_NUM
B.LINE_NUM
B.SEPCHK
D.BOND_ID      () on-break print=never level=2 procedure=Denom-Change
D.BOND_OWNER_ID
D.BOND_OTH_REG_TYPE
D.BOND_OTH_REG_ID
D.BOND_PURCH_UNITS
D.BOND_DISBURSE_AMT
D.CHECK_DT
G.BOND_RDMPT_AMT
G.BOND_PURCH_AMT
G.DESCR
I1.NATIONAL_ID

  do Accumulate-Bond-Log-Amounts

  if #Bond_Disburse_Amt <= #Bond_Collect_Amt
    do Bond-Purchase
    do Mark-Bond-Logs-Purchased
  end-if

FROM  PS_PAY_CALENDAR    A,
      PS_PAY_CHECK       B,
      PS_BOND_LOG        D,
      PS_BOND_TBL        G,
      PS_PAYGROUP_TBL    P,
      PS_PER_ORG_ASGN_VW I,
      PS_PERS_NID        I1
WHERE [$SlctCalendar]
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND P.COMPANY    = A.COMPANY
  AND P.PAYGROUP   = A.PAYGROUP
  AND D.EMPLID           = B.EMPLID
  AND I.EMPLID           = B.EMPLID
  AND I.EMPL_RCD         = B.EMPL_RCD
  AND I.EMPLID           = I1.EMPLID
  AND I1.COUNTRY         = {NID_COUNTRY}
  AND I1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND I.PER_ORG           = 'EMP'
  AND D.CHECK_DT         = B.CHECK_DT
  AND D.PAYCHECK_NBR           = B.PAYCHECK_NBR
  AND D.FORM_ID          = B.FORM_ID
  AND D.BOND_LOG_STATUS  = 'R'  !Ready to Purchase
  AND D.REVERSED         = 'N'  !Bond Reversal
  AND D.BOND_PURCH_UNITS > 0
  AND G.BOND_ID          = D.BOND_ID
  AND G.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_BOND_TBL
       WHERE  BOND_ID = G.BOND_ID
         AND  EFFDT  <= D.CHECK_DT)
  AND P.EFFDT            =
      (SELECT MAX(EFFDT)
         FROM PS_PAYGROUP_TBL
        WHERE COMPANY    = A.COMPANY
          AND PAYGROUP   = A.PAYGROUP
          AND EFF_STATUS = 'A'
          AND EFFDT     <= A.PAY_END_DT)

ORDER BY A.COMPANY,
         D.BOND_ID,
         B.EMPLID,
         B.NAME
end-SELECT

  if $Bond_Purchase = 'Y'
    do Company-Change
  end-if

  move 'Y' to $End_of_Report  !for Reset's begin-footing

end-procedure


begin-procedure Accumulate-Bond-Log-Amounts
  move 0 to #Bond_Disburse_Amt
  move 0 to #Bond_Collect_Amt
begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(BOND_DISBURSE_AMT),15,3) &Bond_Disburse_Amt
#else
SUM(BOND_DISBURSE_AMT) &Bond_Disburse_Amt
#endif
B1.EMPLID

    move &Bond_Disburse_Amt to #Bond_Disburse_Amt
    do Sum-Collected-Amounts

FROM  PS_BOND_LOG      B1
WHERE B1.EMPLID            = &B.EMPLID
  AND B1.BOND_ID           = &D.BOND_ID
  AND B1.BOND_OWNER_ID     = &D.BOND_OWNER_ID
  AND B1.BOND_OTH_REG_TYPE = &D.BOND_OTH_REG_TYPE
  AND B1.BOND_OTH_REG_ID   = &D.BOND_OTH_REG_ID
  AND B1.CHECK_DT         <= &D.CHECK_DT
  AND B1.REVERSED         = 'N'  !Bond Reversal
GROUP BY B1.EMPLID
end-SELECT
end-procedure


begin-procedure Sum-Collected-Amounts
begin-SELECT
#ifdef DB2ALL
DECIMAL(SUM(BOND_COLLECT_AMT),15,3) &Bond_Collect_Amt
#else
SUM(BOND_COLLECT_AMT) &Bond_Collect_Amt
#endif
B2.EMPLID

  move &Bond_Collect_Amt to #Bond_Collect_Amt

FROM  PS_BOND_LOG B2
WHERE B2.EMPLID            = &B.EMPLID
  AND B2.BOND_ID           = &D.BOND_ID
  AND B2.BOND_OWNER_ID     = &D.BOND_OWNER_ID
  AND B2.BOND_OTH_REG_TYPE = &D.BOND_OTH_REG_TYPE
  AND B2.BOND_OTH_REG_ID   = &D.BOND_OTH_REG_ID
GROUP BY B2.EMPLID
end-SELECT
end-procedure


begin-procedure Bond-Purchase

  move 'Y' to $Bond_Purchase

  move &A.Company         to $Company
  move &G.Bond_Rdmpt_Amt  to $Denom    09999.99
  move &G.Bond_Rdmpt_Amt  to $HdgDenom $$$,$$9
  move &G.Bond_Purch_Amt  to $HdgCost  $$$,$$9
  move &G.Descr           to $HdgBondID
  add &D.Bond_Purch_Units to #TotalBonds


  do Print-Bond-Data
  do Write-Purchase-Record

end-procedure


begin-procedure Print-Bond-Data

  if &D.Bond_Owner_ID = 'EE'  !Employee
    move &B.Name              to $Name
    move &I1.NATIONAL_ID       to $SSN
  else
    move &D.Bond_Owner_ID     to $DepBen
    do Get-Dependent-Benef
  end-if


  move $Name                  to $OwnerName
  move $SSN                   to $OwnerSSN
  do Rotate-Name
  print &B.EmplID              (1,1)
  print &B.Name                (0,14,30)
  print &D.Bond_Purch_Units    (0,46)  edit 999
  do Format-DateTime(&D.Check_Dt, $out, {DEFDATE}, '', '')
  print $out       (0,53)
  print $Name                  (0,65,30)
  print $SSN                   (0,97)  edit xxx-xx-xxxx

  if &D.Bond_Oth_Reg_ID = 'NA'    !Not Applicable
    move ' '                  to $OthRegName
    move ' '                  to $OthRegSSN
    move ' '                  to $OthRegType
  else

    if &D.Bond_Oth_Reg_ID = 'EE'  !Employee
      move &B.Name            to $Name
      move &I1.NATIONAL_ID     to $SSN
    else
      move &D.Bond_Oth_Reg_ID to $DepBen
      do Get-Dependent-Benef
    end-if

    move $Name                to $OthRegName
    move $SSN                 to $OthRegSSN
    move &D.Bond_Oth_Reg_Type to $OthRegType
    do Rotate-Name
    print $Name                (2,65,30)
    print $SSN                 (0,97)  edit xxx-xx-xxxx
    print &D.Bond_Oth_Reg_Type (0,111)
  end-if

  next-listing skiplines=1 need=2

end-procedure


begin-procedure Get-Dependent-Benef

  move ''    to $Name
  move ' '   to $SSN

begin-SELECT
H.NAME
  move &H.Name          to $Name
FROM  PS_DEPENDENT_BENEF H
WHERE H.EMPLID           = &B.EmplID
  AND H.DEPENDENT_BENEF  = $DepBen


end-SELECT

begin-SELECT
HN.NATIONAL_ID
  move &HN.NATIONAL_ID  to $SSN
FROM  PS_DEP_BENEF_NID HN
WHERE HN.EMPLID           = &B.EmplID
  AND HN.DEPENDENT_BENEF  = $DepBen
end-SELECT

end-procedure


begin-procedure Write-Purchase-Record

  move &D.Bond_Purch_Units to $Bonds   099
  do Format-DateTime(&D.Check_Dt, $PurchDt, {DEFCMP}, '', '')

  let $PurchDt_MMDDYY = SUBSTR($PurchDt,5,2) || SUBSTR($PurchDt,7,2) ||
                        SUBSTR($PurchDt,3,2)

  write 10 from $Denom:5          -        ! 01
                $Bonds:3          -        ! 07
                $PurchDt_MMDDYY:6 -        ! 09
                $OwnerName:30     -        ! 15
                $OwnerSSN:9       -        ! 45
                $OthRegName:30    -        ! 54
                $OthRegSSN:9      -        ! 84
                $OthRegType:1           ! 93

end-procedure


begin-procedure Company-Change

  move 'Y' to $CompChg
  do Denom-Change
  move 'N' to $CompChg
  print 'Total Bonds Purchased--All Denominations:' (+2,1)
  do Format-Number(#CompanyTotal, $out, '999,999')
  print $out                                (0,42)
  move 0 to #CompanyTotal
  new-page

end-procedure


begin-procedure Denom-Change



  print 'Total '            (+2,12)
  print $HdgDenom           ()
  print ' Bonds Purchased:' ()
  do Format-Number(#TotalBonds, $out, '99,999')
  print $out        (0,43)
  add #TotalBonds to #CompanyTotal
  move 0 to #TotalBonds

  if $CompChg <> 'Y'
    new-page
  end-if

end-procedure


begin-procedure Mark-Bond-Logs-Purchased

begin-SQL ON-ERROR=Ignore
UPDATE PS_BOND_LOG
  SET   BOND_LOG_STATUS = 'D'
  WHERE BOND_LOG_STATUS = 'R'
    AND REVERSED        = 'N'
    AND BOND_PURCH_UNITS > 0
    AND EMPLID          = &B.EmplID
end-SQL

end-procedure

begin-procedure Ignore
!Dummy Procedure
end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
