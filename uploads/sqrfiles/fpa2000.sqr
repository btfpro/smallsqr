!***********************************************************************
!  FPA2000:  Headcount / Department                                    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:12:34:55                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment
#include 'setup01.sqc'        ! Printer and page-size initialization




BEGIN-REPORT


Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
do Init-Report
do Main-Process
do Stdapi-Term

END-REPORT


!***************************************************************
!
!
!       Init-Report
!
!
!***************************************************************

BEGIN-PROCEDURE  Init-Report
move 'FPA2000' to  $ReportID

do Stdapi-Init
do Security-Param       !SQR security

if $prcs_process_instance = ''

        INPUT $Calendar_Year 'Enter a budget year'
else
        do Select-Parameters
end-if

END-PROCEDURE Init-Report


!***************************************************************
!
!
!       Get-Values
!
!
!***************************************************************

BEGIN-PROCEDURE  Get-Values

do Get-Calendar-Year

END-PROCEDURE

!*********************************
BEGIN-PROCEDURE Main-Process
!*********************************

do Init-Var
do Select-Main

END-PROCEDURE Main-Process



!*********************************
BEGIN-PROCEDURE Init-Var
!*********************************

move '' to $rank
move '' to $statusee
move '' to $sex
!Array : 12 months
create-array name=allyear size=5
        field=month:number:13=0
let $year = $Calendar_Year
move $year to #year
! let #year = to_number($year)

let $sql-statement = 'FPA2000.SQR,Init-Var,delete,FPAHEADCNT'
BEGIN-SQL On-Error=SQL-Error

    delete from PS_FPAHEADCNT
    where FP_YEAR = $year

END-SQL
do dtu-format-date(#year,12,31,$end_year)
do dtu-format-date(#year,01,31,$end_jan)
do Convert-From-DTU-Date($end_year,$end_year_native)
do Convert-From-DTU-Date($end_jan,$end_jan_native)
do Convert-To-DTU-Date($AsOfToday,$TodaysDate)

do dtu-format-date(#year,01,01,$dt_1day_year)
do Convert-From-DTU-date($dt_1day_year,$1day_yr_native)

END-PROCEDURE Init-Var



!*********************************
BEGIN-PROCEDURE Select-Main
!*********************************

let $sql-statement = 'FPA2000.SQR,Select-Main,select,JOB'
BEGIN-Select On-Error=SQL-Error

F.EMPLID
F.EMPL_RCD
{DATEOUT-PREFIX}F.EFFDT{DATEOUT-SUFFIX} &F.EFFDT
F.FP_RANK_CD      (+1,1,2) ON-BREAK PRINT=NEVER LEVEL=1
S.FP_STATUSEE_CD  (,+2,10) ON-BREAK PRINT=NEVER LEVEL=2
J.SETID_DEPT      (,+2,10) ON-BREAK PRINT=NEVER LEVEL=3
J.DEPTID          (,+2,10) ON-BREAK PRINT=NEVER LEVEL=4
P.SEX             (,+2,10) ON-BREAK PRINT=NEVER LEVEL=5 AFTER=After-Proc
F.FP_LEGALSTAT_CD
J.FULL_PART_TIME
P.BIRTHDATE
F.FP_PT_PCT
F.FP_HDCNT_NBR
F.FP_BUDGET_NBR
{DATEOUT-PREFIX}S.RETIREMENT_DT{DATEOUT-SUFFIX} &S.RETIREMENT_DT
F.FP_CORPS_CD
F.FP_CATG_FP
F.FP_SETID_RANK
{DATEOUT-PREFIX}F.FP_END_DT{DATEOUT-SUFFIX} &F.FP_END_DT
{DATEOUT-PREFIX}F.FP_FOREND_DT{DATEOUT-SUFFIX} &F.FP_FOREND_DT
{DATEOUT-PREFIX}F.FP_ROW_END_DT{DATEOUT-SUFFIX} &F.FP_ROW_END_DT

        do Processing

from PS_JOB J,
     PS_JOB_JR F,
     PS_FPAEESTATUS S,
     PS_PERSONAL_DT_FST P
    ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

where F.EFFSEQ = (Select max(F1.EFFSEQ)
                  from PS_JOB_JR F1
                  where F1.EFFDT = F.EFFDT
                  and F1.EMPLID = F.EMPLID
                  and F1.EMPL_RCD = F.EMPL_RCD)
  and P.EMPLID = F.EMPLID
  and J.EMPLID = F.EMPLID
  and J.EMPL_RCD = F.EMPL_RCD
  and J.EFFDT = F.EFFDT
  and J.EFFSEQ = F.EFFSEQ
  and S.EMPLID = F.EMPLID
  and S.EMPL_RCD = F.EMPL_RCD
  and S.EFFDT = (Select max(S1.EFFDT)
                 from PS_FPAEESTATUS S1
                 where S1.EFFDT <= F.EFFDT
                 and S1.EMPLID = F.EMPLID
                 and S1.EMPL_RCD = F.EMPL_RCD)
  and F.FP_RANK_CD <> ' '
  and F.EFFDT <= {DATEIN-PREFIX}$end_year_native{DATEIN-SUFFIX}
  and (F.FP_ROW_END_DT >= {DATEIN-PREFIX}$end_jan_native{DATEIN-SUFFIX}
  or F.FP_ROW_END_DT is null)
  and S.RETIREMENT_DT > {DATEIN-PREFIX}$end_jan_native{DATEIN-SUFFIX}

  and P.EMPLID = SCRTY.EMPLID     !
  and F.EMPL_RCD = SCRTY.EMPL_RCD !SQR security
  [$SecurityClause]               !

order by F.FP_RANK_CD, S.FP_STATUSEE_CD, J.SETID_DEPT, J.DEPTID, P.SEX, F.EMPLID, F.EMPL_RCD, F.EFFDT

END-Select

END-PROCEDURE Select-Main



!*********************************
BEGIN-PROCEDURE After-Proc
!*********************************

if $rank <> '' and $statusee <> '' and $setid_dept<> ''and $deptid<> '' and $sex <> ''
    do Get-Param(0,1,#jan0,#feb0,#mar0,#apr0,#may0,#jun0,#jul0,
        #aug0,#sep0,#oct0,#nov0,#dec0,#jan1,#feb1,#mar1,#apr1,
        #may1,#jun1,#jul1,#aug1,#sep1,#oct1,#nov1,#dec1)
    do Get-Param(2,3,#jan2,#feb2,#mar2,#apr2,#may2,#jun2,#jul2,
        #aug2,#sep2,#oct2,#nov2,#dec2,#jan3,#feb3,#mar3,#apr3,
        #may3,#jun3,#jul3,#aug3,#sep3,#oct3,#nov3,#dec3)
    do Insert-HDCNT
    clear-array name=allyear
end-if

END-PROCEDURE After-Proc



!*********************************
BEGIN-PROCEDURE Get-Param(#i,#j,:#jan0,:#feb0,:#mar0,:#apr0,:#may0,:#jun0,
        :#jul0,:#aug0,:#sep0,:#oct0,:#nov0,:#dec0,:#jan1,:#feb1,:#mar1,
        :#apr1, :#may1, :#jun1,:#jul1,:#aug1,:#sep1,:#oct1,:#nov1,:#dec1)
!*********************************

get #jan0 #feb0 #mar0 from allyear(#i) month(1) month(2) month(3)
get #apr0 #may0 #jun0 from allyear(#i) month(4) month(5) month(6)
get #jul0 #aug0 #sep0 from allyear(#i) month(7) month(8) month(9)
get #oct0 #nov0 #dec0 from allyear(#i) month(10) month(11) month(12)
get #jan1 #feb1 #mar1 from allyear(#j) month(1) month(2) month(3)
get #apr1 #may1 #jun1 from allyear(#j) month(4) month(5) month(6)
get #jul1 #aug1 #sep1 from allyear(#j) month(7) month(8) month(9)
get #oct1 #nov1 #dec1 from allyear(#j) month(10) month(11) month(12)

END-PROCEDURE Get-Param



!*********************************
BEGIN-PROCEDURE Insert-HDCNT
!*********************************

let $sql-statement = 'FPA2000.SQR,Insert-HDCNT,insert,FPAHEADCNT'
BEGIN-SQL On-Error=SQL-Error

Insert into PS_FPAHEADCNT (FP_YEAR, FP_SETID_RANK, FP_RANK_CD, FP_CORPS_CD, FP_CATG_FP,
FP_STATUSEE_CD, SETID_DEPT, DEPTID, SEX, FP_CNT_MODE, BIRTHDATE, FP_HDCNT01, FP_HDCNT02, FP_HDCNT03,
FP_HDCNT04, FP_HDCNT05, FP_HDCNT06, FP_HDCNT07, FP_HDCNT08, FP_HDCNT09, FP_HDCNT10, FP_HDCNT11,
FP_HDCNT12, FP_HDCNTPCT01, FP_HDCNTPCT02, FP_HDCNTPCT03, FP_HDCNTPCT04, FP_HDCNTPCT05, FP_HDCNTPCT06,
FP_HDCNTPCT07, FP_HDCNTPCT08, FP_HDCNTPCT09, FP_HDCNTPCT10, FP_HDCNTPCT11, FP_HDCNTPCT12,
FP_FRSTDAY_YEAR)
values ($year, $setid_rank, $rank, $corps, $catg_fp,
        $statusee,$setid_dept,$deptid, $sex, 'L',$birthdt,
        #jan0, #feb0, #mar0, #apr0, #may0, #jun0,
        #jul0, #aug0, #sep0, #oct0, #nov0, #dec0,
        #jan1, #feb1, #mar1, #apr1, #may1, #jun1,
        #jul1, #aug1, #sep1, #oct1, #nov1, #dec1,
        {DATEIN-PREFIX}$1day_yr_native{DATEIN-SUFFIX})

END-SQL

BEGIN-SQL On-Error=SQL-Error

Insert into PS_FPAHEADCNT (FP_YEAR, FP_SETID_RANK, FP_RANK_CD, FP_CORPS_CD, FP_CATG_FP,
FP_STATUSEE_CD, SETID_DEPT, DEPTID, SEX, FP_CNT_MODE, BIRTHDATE, FP_HDCNT01, FP_HDCNT02, FP_HDCNT03,
FP_HDCNT04, FP_HDCNT05, FP_HDCNT06, FP_HDCNT07, FP_HDCNT08, FP_HDCNT09, FP_HDCNT10, FP_HDCNT11,
FP_HDCNT12, FP_HDCNTPCT01, FP_HDCNTPCT02, FP_HDCNTPCT03, FP_HDCNTPCT04, FP_HDCNTPCT05, FP_HDCNTPCT06,
FP_HDCNTPCT07, FP_HDCNTPCT08, FP_HDCNTPCT09, FP_HDCNTPCT10, FP_HDCNTPCT11, FP_HDCNTPCT12,
FP_FRSTDAY_YEAR)

values ($year, $setid_rank, $rank, $corps, $catg_fp,
        $statusee,$setid_dept,$deptid, $sex, 'B',$birthdt,
        #jan2, #feb2, #mar2, #apr2, #may2, #jun2,
        #jul2, #aug2, #sep2, #oct2, #nov2, #dec2,
        #jan3, #feb3, #mar3, #apr3, #may3, #jun3,
        #jul3, #aug3, #sep3, #oct3, #nov3, #dec3,
        {DATEIN-PREFIX}$1day_yr_native{DATEIN-SUFFIX})

END-SQL

END-PROCEDURE Insert-HDCNT

!*********************************
BEGIN-PROCEDURE Processing
!*********************************

do Convert-To-DTU-Date(&F.EFFDT,$effdt)
do Convert-To-DTU-Date(&F.FP_ROW_END_DT,$job_end_dt)
do Convert-To-DTU-Date(&S.RETIREMENT_DT,$retirement_dt)
do Convert-To-DTU-Date(&F.FP_END_DT,$end_dt)
do Convert-To-DTU-Date(&F.FP_FOREND_DT,$forend_dt)
do dtu-month-end($effdt,$end_month)
#ifdef debugi
    display &F.EMPLID
    display &S.FP_STATUSEE_CD
#endif

let $rank = rtrim(&F.FP_RANK_CD,' ')
let $statusee = rtrim(&S.FP_STATUSEE_CD,' ')
let $sex = rtrim(&P.SEX,' ')
let $corps = rtrim(&F.FP_CORPS_CD,' ')
let $catg_fp = rtrim(&F.FP_CATG_FP,' ')
let $setid_rank = rtrim(&F.FP_SETID_RANK,' ')



if ($job_end_dt = '' or $job_end_dt >= $end_month)
        and $retirement_dt > $end_month
    let #hdcnt = &F.FP_HDCNT_NBR
    let #budget = &F.FP_BUDGET_NBR
    let #present = #hdcnt + #budget
    move &F.FP_PT_PCT to #pt_pct
!    let #pt_pct = to_number(&F.FP_PT_PCT)
    let #nn = 0
    let $setid_dept = rtrim(&J.SETID_DEPT,' ')
    let $deptid = rtrim(&J.DEPTID,' ')
    let $birthdt = rtrim(&P.BIRTHDATE,' ')

    !Take Civil Service Position expected end date into account
    !if the civil service position is a leave position
    !when there is no actual end date
    !and when the expected end date is later than current date
    !******* expected return month #nn
    if #present < 2
        if $end_dt = '' and $forend_dt > $TodaysDate
                and $forend_dt < $end_year
            #ifdef debugi
                display 'expected end'
            #endif
            if $forend_dt >= $effdt
                !Determine expected return month
                if ($forend_dt < $job_end_dt or $job_end_dt = '')
                    if $forend_dt < $end_jan
                        let #nn = 1
                    else
                        do dtu-parse-date($forend_dt,#yr_for,#mn_for,#dy_for)
                        !Determine month (mn_for) end date
                        do Calc-MonthEnd(#year,#mn_for,$month_end)
                        if $month_end = $forend_dt
                            let #nn = #mn_for + 1
                        else
                            let #nn = #mn_for
                        end-if
                    end-if
                end-if
            else
                let #hdcnt = 1
                let #budget = 1
                let #present = #hdcnt + #budget
            end-if
        end-if
    end-if
    !Determine impacted months for given record
    if #present > 0 or #nn > 0
        !Calculate FTE
        do Calc-Pct(#hdcnt,#budget,#pt_pct,#hdcnt_pt_pct,#budget_pt_pct)
        !Determine process start month  ********* #n
        do dtu-parse-date($effdt,#dtu_yr,#dtu_mn,#dtu_dy)
        if #dtu_yr < #year
        !if process date year > effective date year
            let #n = 1
        else
            let #n = #dtu_mn
        end-if
        !Determine process end month ********* #m
        if $retirement_dt > $job_end_dt and $job_end_dt <> ''
        !use job row end date
            if $job_end_dt <= $end_year
                do dtu-parse-date($job_end_dt,#yr_end,#mn_end,#dy_end)
                let #m = #mn_end
            else
                let #m = 13
            end-if
        else
        !use retirement date
            if $retirement_dt <= $end_year
                do dtu-parse-date($retirement_dt,#yr_ret,#mn_ret,#dy_ret)
                let #m = #mn_ret - 1
            else
                let #m = 13
            end-if
        end-if

        !Impacted months between effective date and job row end date
        !or
        !Impacted months between effective date and retirement date
        #ifdef debugi
            display #n
            display #m
            display #hdcnt
        #endif
        while #n < 13
            if #present < 2 and #nn = #n
                let #hdcnt = 1
                let #budget = 1
                do Calc-Pct(#hdcnt,#budget,#pt_pct,#hdcnt_pt_pct,#budget_pt_pct)
            end-if
            array-add #hdcnt to allyear(0) month(#n)
            array-add #hdcnt_pt_pct to allyear(1) month(#n)
            array-add #budget to allyear(2) month(#n)
            array-add #budget_pt_pct to allyear(3) month(#n)
            add 1 to #n
            if #n = #m
                !Determine month (n) end date
                do Calc-MonthEnd(#year,#n,$cur_mn_end)
                #ifdef debugi
                    display $cur_mn_end
                    display $job_end_dt
                #endif
                if $retirement_dt > $job_end_dt and $job_end_dt <> ''
                        and $job_end_dt <> $cur_mn_end
                    BREAK
                end-if
            else
                if #n > #m
                    BREAK
                end-if
            end-if
        end-while
    end-if
end-if

END-PROCEDURE Processing



!*********************************
BEGIN-PROCEDURE Calc-Pct(#hdcnt,#budget,#pt_pct,
                        :#hdcnt_pt_pct,:#budget_pt_pct)
!*********************************
!Calculate FTE

!    if  #hdcnt = 1 and #pt_pct > 0
        let #hdcnt_pt_pct = #pt_pct/100
!    else
        let #hdcnt_pt_pct = #hdcnt
!    end-if
!    if  #budget = 1 and #pt_pct > 0
        let #budget_pt_pct = #pt_pct/100
!    else
        let #budget_pt_pct = #budget
!    end-if

END-PROCEDURE Calc-Pct



!*********************************
BEGIN-PROCEDURE Calc-MonthEnd(#year,#mm,:$month_end)
!*********************************
!Determine month (mm) end date

    #ifdef debugi
        display #year
    #endif
!    let $mnth = to_char(#mm)
!    let #mnth = to_number(lpad($mnth,2,'0'))
    move #mm to $mnth 09
    move $mnth to #mnth
    do dtu-format-date(#year,#mnth,01,$cur_dt)
    do dtu-month-end($cur_dt,$month_end)

END-PROCEDURE Calc-MonthEnd


#Include 'datetime.sqc'       ! Routines for date and time formatting
#include 'curdttim.sqc'       ! Get-Current-DateTime procedure
#include 'stdapi.sqc'         ! Routines to update run status
#Include 'hrrnctl1.sqc'       ! Get run control parameter values
#Include 'fprnctl1.sqc'       ! Get run control parameter values
#Include 'fpgetval.sqc'       ! Get values mask routines
#Include 'hrgetval.sqc'       ! Get values mask routines
#Include 'number.sqc'         ! Routines to format numbers
#Include 'datemath.sqc'       ! Routines for date arithmetic
#Include 'hrsecty.sqc'          ! Get SQR Security parameters

