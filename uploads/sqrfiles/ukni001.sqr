!***********************************************************************
! Report Name: UKNI001.SQR                                             *
! Generate Northern Ireland Fair Employment Monitoring Return          *
!***********************************************************************
!                                                                      *
! Confidentiality Information:                                         *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:15:47:13                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      !
!***********************************************************************
!  Date         Modification
!  ----         ------------
!  04/2002      Re-Design to meet upto current regulations
!  08/2004      Changes made to the Applicant Procedure re record changes
!  10/2004      Changes made re field (location) changes on HRS_APP_PROFILE
!
!=======================================================================


#include 'setenv.sqc'    ! Set environment
#include 'setup31.sqc'   ! Report orientation
#Include 'reset.sqc'     ! Reset printer procedure
#include 'stdapi.sqc'    ! Update process request API
#include 'readxlat.sqc'  ! Get XLAT Values
#include 'datemath.sqc'  ! SQR date arithmetic procedures
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'askftd.sqc'    ! From-Thru date
#include 'number.sqc'    ! Routines to format numbers
#include 'ukutil.sqc'    ! Look-up functions


#define SPACE   ' '
#define NIL     ''
#define C_STEP   2
#define C_DATA1  33
#define C_DATA2  48
#define C_DATA3  63
#define C_DATA4  78
#define C_DATA5  93
#define C_DATA6 108

!------------------------------------------------------------------------
! Start Report
!------------------------------------------------------------------------
begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Init
   do Init-Report
   do Process-Main
   do Reset
   do Stdapi-Term
end-report


!------------------------------------------------------------------------
! Page header
!------------------------------------------------------------------------
begin-heading 4
   print 'PeopleSoft HRMS'     ( 1, 1) CENTER
   print $ReportID             ( 2, 1) CENTER BOLD
   print $ReportTitle          ( 3, 1) CENTER BOLD
   print $ReportTitle2         ( 4, 1) CENTER BOLD
end-heading

!------------------------------------------------------------------------
! Report initialization
!------------------------------------------------------------------------
begin-procedure Init-Report

   let $ReportID     = 'FAIR EMPLOYMENT AND TREATMENT (NORTHERN IRELAND) ORDER 1998'
   let $ReportTitle  = 'FAIR EMPLOYMENT (MONITORING) REGULATIONS (NORTHERN IRELAND) 1999'
   let $ReportTitle2 = '(AS AMENDED)'

   if $prcs_process_instance = {NIL}
     !do Ask-As-Of-Date
     !do Ask-From-Thru-Date
   else
     do Select-Parameters
   end-if

end-procedure

!-----------------------------------------------------------------------
! Main processing
!-----------------------------------------------------------------------
begin-procedure Process-Main


   display $ReportID
   string 'Supervisor number is     :' $Supervisor by {SPACE} into $Temp
   display $Temp
   string 'Period processing for is :' $FromDatePgm 'to' $AsOfDatePgm by {SPACE} into $Period
   display $Period
   display {SPACE}


   ! Create an array to store the results of various queries for female...
   create-array name=soc_breakdown_female size=9
      field=Count:number:9=0


   ! Create an array to store the results of various queries for male...
   create-array name=soc_breakdown_male size=9
      field=Count:number:9=0

   ! Create an array to store the results of applicants...
   create-array name=apl_breakdown size=9
      field=Count:number:6=0


   ! Create an array to store the results of appointees...
   create-array name=app_breakdown size=9
      field=Count:number:6=0

   ! Create an array to store the results of promotees...
   create-array name=prmts_breakdown size=9
      field=Count:number:6=0

   ! Create an array to store the results of leavers...
   create-array name=lvrs_breakdown size=9
      field=Count:number:6=0

   ! Create an array for classification names...
   create-array name=soc_names size=9
      field=Name:char={SPACE}

   ! Create an array to store the results of apprentices male...
   create-array name=apprentices_male size=9
      field=Count:number=0

   ! Create an array to store the results of apprentices female...
   create-array name=apprentices_female size=9
      field=Count:number=0

   ! Create an array to store the results of determination method...
   create-array name=cb_method size=4
      field=Count:number=0

   ! Create an array to store the results of determination method male...
   create-array name=cb_method_male size=9
      field=Count:number=0

   ! Create an array to store the results of determination method female...
   create-array name=cb_method_female size=9
      field=Count:number=0

   ! And another for totals...
   create-array name=total size=9
      field=Count:number=0


   do GetBaseDetails   ! Get operator and company details

   do PerformPartA     ! Section A - always filled in
   do PerformPartB     ! Section B - always filled in
   do PerformPartC     ! Section C - if employed apprentices
   do PerformPartD     ! Section D - if over 250 employees
   do PerformPartE     ! Section E - always filled in

end-procedure Process-Main

!-----------------------------------------------------------------------
! Fill out Part A of the report
!-----------------------------------------------------------------------
begin-procedure PerformPartA

   ! Page 3...
   print 'MONITORING RETURN'                           (+3, 1)
   print 'PART A - '                                   (+1, 1) BOLD
   print 'To be completed by all Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)
   print 'A2 '                                         (+2, 1) BOLD
   print 'The date to which this return relates '      ( 0, 0)
   print 'is your date (or anniversary) of '           ( 0, 0)
   print 'registration with the Equality Commission '  ( 0, 0)
   print 'for Northern Ireland.'                       (+1, 1)
   print '   Period processing for is : '              (+1, 1) BOLD
   print $FromDatePgm                                  ( 0, 0)
   print ' to '                                        ( 0, 0) BOLD
   print $AsOfDatePgm                                  ( 0, 0)
   print 'A6 '                                         (+2, 1) BOLD
   print 'List those premises, other than the '        ( 0, 0)
   print 'address at A5, at which employees worked. '  ( 0, 0)
   print 'It is not necessary for the employer to '    ( 0, 0)
   print 'own or occupy the premises. If there is '    (+1, 1)
   print 'insufficient space in the form, continue '   ( 0, 0)
   print 'on a seperate sheet of paper and attach '    ( 0, 0)
   print 'it to the form. '                            (+1, 1)

   print 'PART A - '                                   (+6, 1) BOLD
   print 'To be completed by all Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)
   print 'A4  Name of employer'                        (+2, 1,31)
   print $OrgName                                      ( 0,{C_DATA1})

   print 'A5  Address'                                 (+2, 1,31)
   print $OrgAddress1                                  ( 0,{C_DATA1})
   if $OrgAddress2 <> {SPACE}
      print $OrgAddress2                               (+1,{C_DATA1})
   end-if
   if $OrgAddress3 <> {SPACE}
      print $OrgAddress3                               (+1,{C_DATA1})
   end-if
   if $OrgAddress4 <> {SPACE}
      print $OrgAddress4                               (+1,{C_DATA1})
   end-if
   print $OrgCity                                      (+1,{C_DATA1})
   print $OrgStateName                                 (+1,{C_DATA1})
   print $OrgCountryName                               (+1,{C_DATA1},26)
   print 'POSTCODE:'                                   ( 0,60)
   print $OrgZip                                       ( 0,+2)

   print 'A6  List other locations'                    (+6, 1)
   do ListPremises

   new-page

end-procedure PerformPartA

!-----------------------------------------------------------------------
! Fill out Part B of the report
!-----------------------------------------------------------------------
begin-procedure PerformPartB

   do GetPartBBreakdown

   ! Page 6...
   print 'PART B - '                                   (+6, 1) BOLD
   print 'To be completed by ALL Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the date at A2.'                  ( 0, 0)

   print 'B7(a) Enter in the appropriate box the '     (+2, 1)
   print 'number of FT (Full Time - 16 hours or more)' ( 0, 0)
   print ', PT (Part Time - less than 16 hours) and '  ( 0, 0)
   print 'Total (T) of male employees on the date at ' (+1, 1)
   print 'A2 described in columns (2) to (4) who are ' ( 0, 0)
   print 'employed in the major groups of the '        ( 0, 0)
   print 'Standard Occupational Classification '       (+1, 1)
   print 'as described in column (1). '                ( 0, 0)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(2)NO. OF PROTESTANT'                        ( 0,{C_DATA1},28)
   print '(3)NO. OF ROMAN CATHOLIC'                    ( 0,{C_DATA3},28)
   print '(4)NO. OF MALE EMPLOYEES'                    ( 0,{C_DATA5})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print '  MALE EMPLOYEES'                            ( 0,35,28)
   print '   MALE EMPLOYEES'                           ( 0,67,28)
   print 'WHOSE COMMUNITY CANNOT '                     ( 0,95)
   print 'GROUPS'                                      (+1, 10)
   print 'BE DETERMINED'                               ( 0,99)
   do PrintColumnNumbers

   let $PRT_IND = 'M'
      do PrintBreakdown

   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,64)        edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(6)
   print #out                                          ( 0,95)        edit '9,999'
   get #out from total(7)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(8)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'

   print 'B8(a) TOTAL NO. OF MALE EMPLOYEES AS ABOVE ' (+6, 1)
   print #Males                                        ( 0,{C_DATA3}) edit '9,999'


   print 'B9(a) Enter in the appropriate box (if '     (+6, 1)
   print 'applicable) the number of male employees '   ( 0, 0)
   print 'included in columns (2) to (3) above '       ( 0, 0)
   print 'whose community has been determined using '  (+1, 1)
   print 'the residuary method of monitoring.'         ( 0, 0)
   print ' NO. OF PROTESTANT'                          (+3,{C_DATA3},28)
   print 'NO. OF ROMAN CATHOLIC '                      ( 0,{C_DATA5},28)
   print '   MALE EMPLOYEES'                           (+1,{C_DATA3},28)
   print '    MALE EMPLOYEES'                          ( 0,{C_DATA5},28)
   do PrintColumnClass

   print 'Male employees whose community has been '    (+2, 1)
   print 'determined under the residuary method of '   (+1, 1)
   print 'monitoring '                                 ( 0, 0)

   get #out from cb_method_male(0)
   print #out                                          ( 0,62) edit '9,999'
   get #out from cb_method_male(1)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_male(2)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_male(3)
   print #out                                          ( 0,92) edit '9,999'
   get #out from cb_method_male(4)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_male(5)
   print #out                                          ( 0,+3) edit '9,999'

   new-page

!***************************************************************************************
!***************************************************************************************
!***************************************************************************************

   ! Page 7...
   print 'PART B - '                                   (+6, 1) BOLD
   print 'To be completed by ALL Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the date at A2.'                  ( 0, 0)

   print 'B7(b) Enter in the appropriate box the '     (+2, 1)
   print 'number of FT (Full Time - 16 hours or more)' ( 0, 0)
   print ', PT (Part Time - less than 16 hours) and '  ( 0, 0)
   print 'Total (T) of female employees on the date '  (+1, 1)
   print 'at A2 described in columns (5) to (7) who '  ( 0, 0)
   print 'are employed in the major groups of the '    ( 0, 0)
   print 'Standard Occupational Classification '       (+1, 1)
   print 'as described in column (1). '                ( 0, 0)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(5)NO. OF PROTESTANT'                        ( 0,{C_DATA1},28)
   print '(6)NO. OF ROMAN CATHOLIC'                    ( 0,{C_DATA3},28)
   print '(7)NO. OF FEMALE EMPLOYEES'                  ( 0,{C_DATA5})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print 'FEMALE EMPLOYEES'                            ( 0,35,28)
   print ' FEMALE EMPLOYEES'                           ( 0,67,28)
   print 'WHOSE COMMUNITY CANNOT '                     ( 0,95)
   print 'GROUPS'                                      (+1, 10)
   print 'BE DETERMINED'                               ( 0,99)
   do PrintColumnNumbers

   let $PRT_IND = 'F'
      do PrintBreakdown

   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,64)        edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(6)
   print #out                                          ( 0,95)        edit '9,999'
   get #out from total(7)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'
   get #out from total(8)
   print #out                                          ( 0,+{C_STEP}) edit '9,999'

   print 'B8(b) TOTAL NO. OF FEMALE EMPLOYEES AS ABOVE ' (+6, 1)
   print #Females                                      ( 0,{C_DATA3}) edit '9,999'


   print 'B9(a) Enter in the appropriate box (if '     (+6, 1)
   print 'applicable) the number of female employees ' ( 0, 0)
   print 'included in columns (5) to (6) above '       ( 0, 0)
   print 'whose community has been determined using '  (+1, 1)
   print 'the residuary method of monitoring.'         ( 0, 0)
   print ' NO. OF PROTESTANT'                          (+3,{C_DATA3},28)
   print 'NO. OF ROMAN CATHOLIC'                       ( 0,{C_DATA5},28)
   print '  FEMALE EMPLOYEES'                          (+1,{C_DATA3},28)
   print '   FEMALE EMPLOYEES'                         ( 0,{C_DATA5},28)
   do PrintColumnClass

   print 'Female employees whose community has been '  (+2, 1)
   print 'determined under the residuary method of '   (+1, 1)
   print 'monitoring'                                  ( 0, 0)

   get #out from cb_method_female(0)
   print #out                                          ( 0,62) edit '9,999'
   get #out from cb_method_female(1)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_female(2)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_female(3)
   print #out                                          ( 0,92) edit '9,999'
   get #out from cb_method_female(4)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from cb_method_female(5)
   print #out                                          ( 0,+3) edit '9,999'

   new-page


!***************************************************************************************
!***************************************************************************************
!***************************************************************************************

   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartB Applicants'

   ! Page 8...
   print 'PART B - '                                   (+6, 1) BOLD
   print 'To be completed by ALL Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the 12 month period ending on '   ( 0, 0)
   print 'the date at A2.'                             ( 0, 0)

   print 'B10  Enter into the appropriate box below '  (+2, 1)
   print 'the number of applicants for employment in ' ( 0, 0)
   print 'the major groups of the Standard '           ( 0, 0)
   print 'Occupational Classification as described '   (+1, 1)
   print 'in column (1)'                               ( 0, 0)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(2)NO. OF '                                  ( 0,{C_DATA1},14)
   print '(3)NO. OF '                                  ( 0,{C_DATA2},14)
   print '(4)NO. OF '                                  ( 0,{C_DATA3},14)
   print '(5)NO. OF '                                  ( 0,{C_DATA4},14)
   print '(6)NO. OF '                                  ( 0,{C_DATA5},14)
   print '(7)NO. OF '                                  ( 0,{C_DATA6})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print 'PROTESTANT'                                  ( 0,{C_DATA1},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA2},14)
   print 'MALE APLCS'                                  ( 0,{C_DATA3},14)
   print 'PROTESTANT'                                  ( 0,{C_DATA4},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA5},14)
   print 'FEMALE APLCS'                                ( 0,{C_DATA6})
   print 'GROUPS'                                      (+1, 10)
   print 'MALE APLCS'                                  ( 0,{C_DATA1},14)
   print 'MALE APLCS'                                  ( 0,{C_DATA2},14)
   print 'FEMALE APLCS'                                ( 0,{C_DATA4},14)
   print 'FEMALE APLCS'                                ( 0,{C_DATA5},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA3},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA6})
   print 'CANNOT BE '                                  (+1,{C_DATA3},14)
   print 'CANNOT BE '                                  ( 0,{C_DATA6})
   print 'DETERMINED'                                  (+1,{C_DATA3},14)
   print 'DETERMINED'                                  ( 0,{C_DATA6})

   do GetPartBApplicants


   clear-array name=total

      position                                         ( +1,{C_DATA1})

   let #row = 0
   while #row < 9

      let #out = #row + 1
      print #out                                     (+2, 1,1) edit '9'
      get $out from soc_names(#row)
      print $out                                     ( 0, 3,30)

      position                                         ( 0,{C_DATA1})
      let #colr = 0
      while #colr < 6

               get #out from APL_BREAKDOWN(#row) count(#colr)

         array-add #out to total(#colr)
         print #out                                    ( 0, 0) edit '9,999'
         add 1 to #colr

         position                                      ( 0,+10)

         if #colr = 3
              position                                  ( 0,{C_DATA4})
         end-if

      end-while

      add 1 to #row
   end-while

   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,{C_DATA2}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,{C_DATA3}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,{C_DATA4}) edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,{C_DATA5}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,{C_DATA6}) edit '9,999'

   print 'B11 Enter into the appropriate box below '   (+6, 1)
   print 'the number of applicants above who are male' ( 0, 0)
   print ', the number who are female and the '        ( 0, 0)
   print 'total number of applicants. '                (+1, 1)
   do PrintColumnGender

   print 'Applicants'                                  (+3,{C_DATA1},14)
   print #Males                                        ( 0,45)        edit '9,999'
   print #Females                                      ( 0,61)        edit '9,999'
   print #Total                                        ( 0,75)        edit '9,999'

   print 'B12 Enter in the appropriate box (if applic' (+6, 1)
   print 'able) the number of applicants included '    ( 0, 0)
   print 'in columns (2),(3),(5) and (6) above '       ( 0, 0)
   print 'whose community has been determined using '  (+1, 1)
   print 'the residuary method of monitoring.'         ( 0, 0)
   print 'NO. OF PROTESTANT'                           (+3,{C_DATA2},18)
   print ' NO. OF ROMAN'                               ( 0,69,18)
   print 'NO. OF PROTESTANT'                           ( 0,86,18)
   print '  NO. OF ROMAN'                               ( 0,107)
   print ' MALE APPLICANTS'                            (+1,{C_DATA2},18)
   print 'CATHOLIC MALE'                               ( 0,69,18)
   print 'FEMALE APPLICANTS'                           ( 0,86,18)
   print 'CATHOLIC FEMALE'                             ( 0,107)
   print '  APPLICANTS'                                (+1,69,18)
   print '   APPLICANTS'                               (0,107,18)

   print 'Applicants whose community has been'         (+2, 1)
   print 'determined under the residuary method'       (+1, 1)
   print 'of monitoring'                               (+1, 1)

   get #out from cb_method(0)
   print #out                                          (-1,52,14) edit '9,999'
   get #out from cb_method(1)
   print #out                                          ( 0,72)    edit '9,999'
   get #out from cb_method(2)
   print #out                                          ( 0,88)    edit '9,999'
   get #out from cb_method(3)
   print #out                                          ( 0,109)   edit '9,999'

   new-page


!***************************************************************************************
!***************************************************************************************
!***************************************************************************************

   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartB Appointees'

   ! Page 9...
   print 'PART B - '                                   (+6, 1) BOLD
   print 'To be completed by ALL Registered '          ( 0, 0)
   print 'Employers and Public Authorities.'           ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the 12 month period ending on '   ( 0, 0)
   print 'the date at A2.'                             ( 0, 0)

   print 'B13  Enter into the appropriate box below '  (+2, 1)
   print 'the number of appointees who are employees ' ( 0, 0)
   print 'at B7(a) and B7(b) in the major groups of '  ( 0, 0)
   print 'the Standard Occupational Classification '   (+1, 1)
   print 'as described in column (1)'                  ( 0, 0)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(2)NO. OF '                                  ( 0,{C_DATA1},14)
   print '(3)NO. OF '                                  ( 0,{C_DATA2},14)
   print '(4)NO. OF '                                  ( 0,{C_DATA3},14)
   print '(5)NO. OF '                                  ( 0,{C_DATA4},14)
   print '(6)NO. OF '                                  ( 0,{C_DATA5},14)
   print '(7)NO. OF '                                  ( 0,{C_DATA6})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print 'PROTESTANT'                                  ( 0,{C_DATA1},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA2},14)
   print 'MALE APPTS'                                  ( 0,{C_DATA3},14)
   print 'PROTESTANT'                                  ( 0,{C_DATA4},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA5},14)
   print 'FEMALE APPTS'                                ( 0,{C_DATA6})
   print 'GROUPS'                                      (+1, 10)
   print 'MALE APPTS'                                  ( 0,{C_DATA1},14)
   print 'MALE APPTS'                                  ( 0,{C_DATA2},14)
   print 'FEMALE APPTS'                                ( 0,{C_DATA4},14)
   print 'FEMALE APPTS'                                ( 0,{C_DATA5},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA3},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA6})
   print 'CANNOT BE '                                  (+1,{C_DATA3},14)
   print 'CANNOT BE '                                  ( 0,{C_DATA6})
   print 'DETERMINED'                                  (+1,{C_DATA3},14)
   print 'DETERMINED'                                  ( 0,{C_DATA6})

   do GetPartBAppointees


   clear-array name=total

      position                                         ( +1,{C_DATA1})

   let #row = 0
   while #row < 9

      let #out = #row + 1
      print #out                                     (+2, 1,1) edit '9'
      get $out from soc_names(#row)
      print $out                                     ( 0, 3,30)

      position                                         ( 0,{C_DATA1})
      let #colr = 0
      while #colr < 6

               get #out from APP_BREAKDOWN(#row) count(#colr)

         array-add #out to total(#colr)
         print #out                                    ( 0, 0) edit '9,999'
         add 1 to #colr

         position                                      ( 0,+10)

         if #colr = 3
              position                                  ( 0,{C_DATA4})
         end-if

      end-while

      add 1 to #row
   end-while

   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,{C_DATA2}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,{C_DATA3}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,{C_DATA4}) edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,{C_DATA5}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,{C_DATA6}) edit '9,999'


   print 'B14 Enter into the appropriate box below '   (+6, 1)
   print 'the number of appointees above who are male' ( 0, 0)
   print ', the number who are female and the'         ( 0, 0)
   print 'total number of appointees.'                 (+1, 1)
   do PrintColumnGender


   print 'Appointees'                                  (+3,{C_DATA1},14)
   print #Males                                        ( 0,45)        edit '9,999'
   print #Females                                      ( 0,61)        edit '9,999'
   print #Total                                        ( 0,75)        edit '9,999'

   print 'B15 Enter in the appropriate box (if applic' (+6, 1)
   print 'able) the number of appointees included '    ( 0, 0)
   print 'in columns (2),(3),(5) and (6) above '       ( 0, 0)
   print 'whose community has been determined using '  (+1, 1)
   print 'the residuary method of monitoring.'         ( 0, 0)
   print 'NO. OF PROTESTANT'                           (+3,{C_DATA2},18)
   print ' NO. OF ROMAN'                               ( 0,69,18)
   print 'NO. OF PROTESTANT'                           ( 0,86,18)
   print '  NO. OF ROMAN'                              ( 0,107)
   print 'MALE APPOINTEES'                             (+1,{C_DATA2},18)
   print 'CATHOLIC MALE'                               ( 0,69,18)
   print 'FEMALE APPOINTEES'                           ( 0,86,18)
   print 'CATHOLIC FEMALE'                             ( 0,107)
   print ' APPOINTEES'                                 (+1,69,18)
   print '  APPOINTEES'                                ( 0,107,18)


   print 'Appointees whose community has been'         (+2, 1)
   print 'determined under the residuary method'       (+1, 1)
   print 'of monitoring'                               (+1, 1)

   get #out from cb_method(0)
   print #out                                          (-1,53,14)     edit '9,999'
   get #out from cb_method(1)
   print #out                                          ( 0,72)        edit '9,999'
   get #out from cb_method(2)
   print #out                                          ( 0,88)        edit '9,999'
   get #out from cb_method(3)
   print #out                                          ( 0,109)       edit '9,999'
   new-page


end-procedure PerformPartB



!-----------------------------------------------------------------------
! Fill out Part C of the report
!-----------------------------------------------------------------------
begin-procedure PerformPartC

   do GetPartCBreakdown

   ! Page 10...
   print 'PART C - '                                   (+6, 1) BOLD
   print 'TO BE COMPLETED ONLY BY REGISTERED '         ( 0, 0)
   print 'EMPLOYERS AND PUBLIC AUTHORITIES WHO '       ( 0, 0)
   print 'EMPLOYED APPRENTICES DURING THE 12 MONTH '   ( 0, 0)
   print 'PERIOD ENDING ON THE DATE AT A2. '           (+1, 1)

   print 'C16(a)  For the purposes of these questions '(+2, 1)
   print 'an apprentice is an employee employed '      ( 0, 0)
   print 'under a contract of apprenticeship.'         ( 0, 0)
   print '& '                                          (+1, 1)
   print 'C16(b) '                                     (+1, 1)

   print 'Apprentices should have already been '       (+6, 8)
   print 'included in B7(a) and B7(b). '               ( 0, 0)



   print 'APPRENTICE EMPLOYEES'                        (+9, 1)
   print 'C16(a) Enter into the appropriate box the '  (+2, 1)
   print 'number of FT (Full Time - 16 hours or more)' ( 0, 0)
   print ', PT (Part Time - less than 16 hours) and '  ( 0, 0)
   print 'Total (T) male apprentices on the date at '  (+1, 1)
   print 'A2, who are included in columns (2) to (4)'  ( 0, 0)
   print ', B7(a).'                                    ( 0, 0)


   print 'NO. OF PROTESTANT'                           (+3,37,28)
   print 'NO. OF ROMAN CATHOLIC'                       ( 0,{C_DATA3},28)
   print 'NO. OF MALE APPRENTICES'                     ( 0,{C_DATA5})
   print ' MALE APPRENTICES'                           (+1,37,28)
   print '   MALE APPRENTICES'                         ( 0,{C_DATA3},28)
   print 'WHOSE COMMUNITY CANNOT '                     ( 0,94)
   print 'BE DETERMINED'                               (+1,99)
   do PrintColumnNumbers

   print 'Apprentices'                                 (+2, 1)
   get #out from apprentices_male(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from apprentices_male(1)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_male(2)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_male(3)
   print #out                                          ( 0,+9) edit '9,999'
   get #out from apprentices_male(4)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_male(5)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_male(6)
   print #out                                          ( 0,+9) edit '9,999'
   get #out from apprentices_male(7)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_male(8)
   print #out                                          ( 0,+3) edit '9,999'

   print 'C16(b) Enter into the appropriate box the '  (+6, 1)
   print 'number of FT (Full Time - 16 hours or more)' ( 0, 0)
   print ', PT (Part Time - less than 16 hours) and '  ( 0, 0)
   print 'Total (T) female apprentices on the date '   (+1, 1)
   print 'at A2, who are included in columns (5) to '  ( 0, 0)
   print '(7), B7(b).'                                 ( 0, 0)


   print 'NO.   OF PROTESTANT'                         (+3,37,28)
   print 'NO. OF ROMAN CATHOLIC'                       ( 0,{C_DATA3},28)
   print 'NO. OF FEMALE APPRENTICES'                   ( 0,{C_DATA5})
   print 'FEMALE APPRENTICES'                          (+1,37,28)
   print '  FEMALE APPRENTICES'                        ( 0,{C_DATA3},28)
   print 'WHOSE COMMUNITY CANNOT '                     ( 0,95)
   print 'BE DETERMINED'                               (+1,99)
   do PrintColumnNumbers


   print 'Apprentices'                                 (+2, 1)
   get #out from apprentices_female(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from apprentices_female(1)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_female(2)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_female(3)
   print #out                                          ( 0,+9) edit '9,999'
   get #out from apprentices_female(4)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_female(5)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_female(6)
   print #out                                          ( 0,+9) edit '9,999'
   get #out from apprentices_female(7)
   print #out                                          ( 0,+3) edit '9,999'
   get #out from apprentices_female(8)
   print #out                                          ( 0,+3) edit '9,999'


   new-page

end-procedure PerformPartC


!-----------------------------------------------------------------------
! Fill out Part D of the report
!-----------------------------------------------------------------------
begin-procedure PerformPartD

   if $Authories <> 'Y'
      do EmployeeCount
   else
      let $new_cdate = $FromDate
   end-if

   ! Page 12...
   print 'PART D - '                                   (+6, 1) BOLD
   print 'To be completed ONLY by Registered '         ( 0, 0)
   print 'Employers who employ more than 250 '         ( 0, 0)
   print 'employees and ALL Public Authorities.'       ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the 12 month period ending on '   ( 0, 0)
   print 'the date at A2.'                             ( 0, 0)

   print 'D17  Enter into the appropriate box below '  (+2, 1)
   print 'the number of promotees (who are employees ' ( 0, 0)
   print 'at A2) in the major groups of the Standard ' ( 0, 0)
   print 'Occupational Classification as described '   (+1, 1)
   print 'in column (1)'                               ( 0, 0)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(2)NO. OF '                                  ( 0,{C_DATA1},14)
   print '(3)NO. OF '                                  ( 0,{C_DATA2},14)
   print '(4)NO. OF '                                  ( 0,{C_DATA3},14)
   print '(5)NO. OF '                                  ( 0,{C_DATA4},14)
   print '(6)NO. OF '                                  ( 0,{C_DATA5},14)
   print '(7)NO. OF '                                  ( 0,{C_DATA6})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print 'PROTESTANT'                                  ( 0,{C_DATA1},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA2},14)
   print 'MALE PRMTS'                                  ( 0,{C_DATA3},14)
   print 'PROTESTANT'                                  ( 0,{C_DATA4},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA5},14)
   print 'FEMALE PRMTS'                                ( 0,{C_DATA6})
   print 'GROUPS'                                      (+1, 10)
   print 'MALE PRMTS'                                  ( 0,{C_DATA1},14)
   print 'MALE PRMTS'                                  ( 0,{C_DATA2},14)
   print 'FEMALE PRMTS'                                ( 0,{C_DATA4},14)
   print 'FEMALE PRMTS'                                ( 0,{C_DATA5},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA3},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA6})
   print 'CANNOT BE '                                  (+1,{C_DATA3},14)
   print 'CANNOT BE '                                  ( 0,{C_DATA6})
   print 'DETERMINED'                                  (+1,{C_DATA3},14)
   print 'DETERMINED'                                  ( 0,{C_DATA6})

   if $PartD_Ind = 'Y' or $Authories = 'Y'
      do GetPartDPromotees
   end-if

   clear-array name=total

      position                                         ( +1,{C_DATA1})

   let #row = 0
   while #row < 9

      let #out = #row + 1
      print #out                                     (+2, 1,1) edit '9'
      get $out from soc_names(#row)
      print $out                                     ( 0, 3,30)

      position                                         ( 0,{C_DATA1})
      let #colr = 0
      while #colr < 6

               get #out from prmts_breakdown(#row) count(#colr)

         array-add #out to total(#colr)
         print #out                                    ( 0, 0) edit '9,999'
         add 1 to #colr

         position                                      ( 0,+10)

         if #colr = 3
              position                                  ( 0,{C_DATA4})
         end-if

      end-while

      add 1 to #row
   end-while


   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,{C_DATA2}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,{C_DATA3}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,{C_DATA4}) edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,{C_DATA5}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,{C_DATA6}) edit '9,999'


   print 'D18 Enter into the appropriate box below '   (+6, 1)
   print 'the number of promotees above who are male'  ( 0, 0)
   print ', the number who are female and the'         ( 0, 0)
   print 'total number of promotees.'                  (+1, 1)
   do PrintColumnGender


   print 'Promotees'                                   (+3,{C_DATA1},14)
   print #Males                                        ( 0,45)        edit '9,999'
   print #Females                                      ( 0,61)        edit '9,999'
   print #Total                                        ( 0,75)        edit '9,999'


   new-page

!***************************************************************************************
!***************************************************************************************
!***************************************************************************************


   ! Page 13...
   print 'PART D - '                                   (+6, 1) BOLD
   print 'To be completed ONLY by Registered '         ( 0, 0)
   print 'Employers who employ more than 250 '         ( 0, 0)
   print 'employees and ALL Public Authorities.'       ( 0, 0)

   print 'The information in this part of the form '   (+2, 1)
   print 'relates to the 12 month period ending on '   ( 0, 0)
   print 'the date at A2.'                             ( 0, 0)

   print 'D19  Enter into the appropriate box below '  (+2, 1)
   print 'the number of leavers in the major groups  ' ( 0, 0)
   print 'of the Standard Occupational Classification '( 0, 0)
   print 'as described in column (1)'                  (+1, 1)
   print '(1)STANDARD OCCUPATIONAL'                    (+3, 1,31)
   print '(2)NO. OF '                                  ( 0,{C_DATA1},14)
   print '(3)NO. OF '                                  ( 0,{C_DATA2},14)
   print '(4)NO. OF '                                  ( 0,{C_DATA3},14)
   print '(5)NO. OF '                                  ( 0,{C_DATA4},14)
   print '(6)NO. OF '                                  ( 0,{C_DATA5},14)
   print '(7)NO. OF '                                  ( 0,{C_DATA6})
   print 'CLASSIFICATION MAJOR'                        (+1, 3,31)
   print 'PROTESTANT'                                  ( 0,{C_DATA1},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA2},14)
   print 'MALE LVRS'                                   ( 0,{C_DATA3},14)
   print 'PROTESTANT'                                  ( 0,{C_DATA4},14)
   print 'ROMAN CATHOLIC'                              ( 0,{C_DATA5},14)
   print 'FEMALE LVRS'                                 ( 0,{C_DATA6})
   print 'GROUPS'                                      (+1, 10)
   print 'MALE LVRS'                                   ( 0,{C_DATA1},14)
   print 'MALE LVRS'                                   ( 0,{C_DATA2},14)
   print 'FEMALE LVRS'                                 ( 0,{C_DATA4},14)
   print 'FEMALE LVRS'                                 ( 0,{C_DATA5},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA3},14)
   print 'WHOSE CMNTY'                                 ( 0,{C_DATA6})
   print 'CANNOT BE '                                  (+1,{C_DATA3},14)
   print 'CANNOT BE '                                  (0,{C_DATA6})
   print 'DETERMINED'                                  (+1,{C_DATA3},14)
   print 'DETERMINED'                                  (0,{C_DATA6})


   if $PartD_Ind = 'Y' or $Authories = 'Y'
      do GetPartDLeavers
   end-if

   clear-array name=total

      position                                         ( +1,{C_DATA1})

   let #row = 0
   while #row < 9

      let #out = #row + 1
      print #out                                       (+2, 1,1) edit '9'
      get $out from soc_names(#row)
      print $out                                       ( 0, 3,30)

      position                                         ( 0,{C_DATA1})
      let #coll = 0
      while #coll < 6

         get #out from lvrs_breakdown(#row) count(#coll)

         array-add #out to total(#coll)
         print #out                                    ( 0, 0) edit '9,999'
         add 1 to #coll

         position                                      ( 0,+10)

         if #coll = 3
            position                                   ( 0,{C_DATA4})
         end-if

      end-while

      add 1 to #row
   end-while

   print 'TOTALS'                                      (+2, 3,29)
   get #out from total(0)
   print #out                                          ( 0,{C_DATA1}) edit '9,999'
   get #out from total(1)
   print #out                                          ( 0,{C_DATA2}) edit '9,999'
   get #out from total(2)
   print #out                                          ( 0,{C_DATA3}) edit '9,999'
   get #out from total(3)
   print #out                                          ( 0,{C_DATA4}) edit '9,999'
   get #out from total(4)
   print #out                                          ( 0,{C_DATA5}) edit '9,999'
   get #out from total(5)
   print #out                                          ( 0,{C_DATA6}) edit '9,999'


   print 'D20 Enter into the appropriate box below '   (+6, 1)
   print 'the number of leavers above who are male'    ( 0, 0)
   print ', the number who are female and the'         ( 0, 0)
   print 'total number of leavers.'                    (+1, 1)
   do PrintColumnGender


   print 'Leavers'                                     (+3,{C_DATA1},14)
   print #Males                                        ( 0,45)        edit '9,999'
   print #Females                                      ( 0,61)        edit '9,999'
   print #Total                                        ( 0,75)        edit '9,999'


   new-page

end-procedure PerformPartD



!-----------------------------------------------------------------------
! Fill out Part E of the report
!-----------------------------------------------------------------------
begin-procedure PerformPartE

   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartE'

   ! Page 14...
   print 'PART E - '                                   (+6, 1) BOLD
   print 'To be completed by ALL Registered '          ( 0, 0)
   print 'Employers and Public Authorities '           ( 0, 0)

   print 'E21  Signed'                                 (+4, 1)
   print '-'                                           (+1,{C_DATA1},40) fill
   print 'E22  Print name'                             (+3, 1,31)
   print $OperName                                     ( 0,{C_DATA1}
   print '-'                                           (+1,{C_DATA1},40) fill
   print 'E23  Position in concern '                   (+3, 1)
   print $PosName                                      ( 0,{C_DATA1}
   print '-'                                           (+1,{C_DATA1},40) fill
   print 'E24  Date'                                   (+3, 1,31)
   date-time                                           ( 0,{C_DATA1}) DD/MM/YYYY
   print '-'                                           (+1,{C_DATA1},40) fill

   print 'ADDITIONAL INFORMATION'                      (+6, 1)
   print 'You are not required to supply the followin' (+1, 1)
   print 'g information but it would be very helpful ' ( 0, 0)
   print 'to the Commission if you did so.'            ( 0, 0)

   print 'E25  Please give a contact for any queries ' (+3, 1)
   print 'arising from this return'                    ( 0, 0)
   print 'Name'                                        (+4, 6)
   print '-'                                           (+1,{C_DATA1},40) fill
   print 'Telephone No'                                (+3, 6)
   print '-'                                           (+1,{C_DATA1},40) fill
   print 'Fax No'                                      (+3, 6)
   print '-'                                           (+1,{C_DATA1},40) fill


   print 'THIS FORM SHOULD BE COMPLETED AND SENT TO: ' (+4, 36)
   print 'Equality Commission for Northern Ireland'    (+2,{C_DATA2})
   print 'Equality House'                              (+1,{C_DATA2})
   print '7-9 Shaftesbury Square'                      (+1,{C_DATA2})
   print 'BELFAST'                                     (+1,{C_DATA2})
   print 'BT2 7DP'                                     (+1,{C_DATA2})
   print 'WITHIN 4 MONTHS OF YOUR REGISTRATION OR '    (+1, 36)
   print 'ANNIVERSARY DATE'                            ( 0, 0)

end-procedure PerformPartE


!-----------------------------------------------------------------------
! Obtain list of premises
!-----------------------------------------------------------------------
begin-procedure ListPremises

position                                               (-1,{C_DATA1})

BEGIN-SELECT
L.LOCATION
L.DESCR                                                (+1,{C_DATA1})
L.CITY
L.POSTAL
L.COUNTRY
   do GetCountryName(&L.COUNTRY,$CountryName)


   let $Address  = {NIL}
   let $PremCity = rtrim(nvl(&L.CITY,{SPACE}), ' ')
   let $PremZip  = rtrim(nvl(&L.POSTAL, {SPACE}), ' ')

   if $PremCity <> {SPACE}
      let $Address = $Address || $PremCity || ', '
   end-if
   if $PremZip <> {SPACE}
      let $Address = $Address || $PremZip || ', '
   end-if
   if $CountryName <> {SPACE}
      let $Address = $Address || $CountryName
   end-if
   print ':'           ( 0, 0)
   print $Address      ( 0,+1)

FROM  PS_LOCATION_TBL L
WHERE L.NI_REPORT_SW_UK = 'Y'
  AND L.EFFDT     = (SELECT MAX(LL.EFFDT)
                          FROM   PS_LOCATION_TBL LL
                          WHERE  LL.LOCATION = L.LOCATION
                          AND    LL.EFFDT <= $AsOfDate)
END-SELECT

end-procedure ListPremises



!-----------------------------------------------------------------------
! Get figures for employees broken down by sex, religion and job class
!-----------------------------------------------------------------------
begin-procedure GetPartBBreakdown

   DISPLAY 'PROCEDURE --> PerformPartB'

   do ResetVariables

   clear-array name=soc_breakdown_female
   clear-array name=soc_breakdown_male
   clear-array name=cb_method_female
   clear-array name=cb_method_male

BEGIN-SELECT
J.EMPLID
J.FULL_PART_TIME
J.JOB_INDICATOR
PD.SEX
DVR.NI_COMMUNITY_BG
DVR.NI_CB_DET_METHOD
JC.UK_SOC_CD

      LET $EMPLID           = RTRIM(&J.EMPLID, {SPACE})
      LET $FULL_PART_TIME   = &J.FULL_PART_TIME
      LET $INDICATOR        = &J.JOB_INDICATOR
      LET $SEX              = &PD.SEX
      LET $COMMUNITY_BG     = &DVR.NI_COMMUNITY_BG
      LET $DET_METHOD       = &DVR.NI_CB_DET_METHOD
      LET $UK_SOC_CD        = &JC.UK_SOC_CD

      ! check for duplicate employees - only count them once
      evaluate $INDICATOR
         when = 'P'
            let $job_type = 'Primary Job.'
            break
         when = 'S'
            let $job_type = 'Secondary Job.'
            break
         when-other
            let $job_type = 'Not Applicable code.'
            break
      end-evaluate

      let $temp = 'Employee number ' ||$EMPLID || ' has already been process/counted using the ' ||$previous_job

      let $current_emplid      =  $EMPLID
      let $current_job         =  $job_type

      if $current_emplid = $previous_emplid
         display $temp
      else
         do EvaluatePartB
      end-if

      let $previous_emplid     =  $current_emplid
      let $previous_job        =  $current_job

FROM  PS_JOB J,
      PS_PERSONAL_DT_FST PD,
      PS_DIVERSITY DVR,
      PS_JOBCODE_TBL JC

WHERE J.EMPLID         =  PD.EMPLID
  AND J.EMPLID         =  DVR.EMPLID

  AND J.EFFDT          = (  SELECT  MAX(JJ.EFFDT)
                              FROM  PS_JOB JJ
                             WHERE  JJ.EMPLID     = J.EMPLID
                               AND  JJ.EMPL_RCD   = J.EMPL_RCD
                               AND  JJ.EFFDT     <= $AsOfDate)

  AND J.EFFSEQ         = (  SELECT  MAX(J3.EFFSEQ)
                              FROM  PS_JOB J3
                             WHERE  J3.EMPLID     = J.EMPLID
                               AND  J3.EMPL_RCD   = J.EMPL_RCD
                               AND  J3.EFFDT      = J.EFFDT)

  AND J.HR_STATUS     = 'A'

  AND J.LOCATION      IN (  SELECT  L.LOCATION
                              FROM  PS_LOCATION_TBL L
                             WHERE  L.NI_REPORT_SW_UK    = 'Y'
                               AND  L.EFFDT = (SELECT MAX(LL.EFFDT)
                                                 FROM PS_LOCATION_TBL LL
                                                WHERE LL.NI_REPORT_SW_UK   = 'Y'
                                                  AND LL.LOCATION          = L.LOCATION
                                                  AND LL.EFFDT            <= J.EFFDT))

  AND J.JOBCODE        = JC.JOBCODE

  AND JC.EFFDT         = (SELECT MAX(JC2.EFFDT)
                            FROM PS_JOBCODE_TBL JC2
                           WHERE JC.JOBCODE    = JC2.JOBCODE
                             AND JC2.SETID     = J.SETID_JOBCODE
                             AND JC2.EFFDT    <= J.EFFDT)

  AND JC.SETID         = J.SETID_JOBCODE

END-SELECT

end-procedure GetPartBBreakdown



!-----------------------------------------------------------------------
! Evaluate the data retirved in GetPartBBreakdown
!-----------------------------------------------------------------------
begin-procedure EvaluatePartB


   if isblank($UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
      let $SOC_CD = $UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   !evaluate the different categories
   if $SEX = 'F'

      let #Females = #Females + 1

      evaluate $COMMUNITY_BG
         when = 'PR'
            let #colsetfem = 0
            let #coltotfem = 2
            break
         when = 'CA'
            let #colsetfem = 3
            let #coltotfem = 5
            break
         when-other
            let #colsetfem = 6
            let #coltotfem = 8
            break
         end-evaluate

      evaluate $FULL_PART_TIME
         when = 'F'
            let #colitemfem = 0
            break

         when-other
            let #colitemfem = 1
            break
      end-evaluate


      let #colfem = (#colsetfem + #colitemfem)

      ARRAY-ADD 1 to soc_breakdown_female(#row) Count(#colfem)
      ARRAY-ADD 1 to soc_breakdown_female(#row) Count(#coltotfem)


      evaluate $DET_METHOD
         when = 'R1'
         when = 'R2'
         when = 'RO'
            ARRAY-ADD 1 to cb_method_female(#colfem)
            ARRAY-ADD 1 to cb_method_female(#coltotfem)
            break
      end-evaluate


   else

      let #Males   = #Males + 1

      evaluate $COMMUNITY_BG
         when = 'PR'
            let #colsetmal = 0
            let #coltotmal = 2
            break
         when = 'CA'
            let #colsetmal = 3
            let #coltotmal = 5
            break
        when-other
            let #colsetmal = 6
            let #coltotmal = 8
            break
        end-evaluate

      evaluate $FULL_PART_TIME
         when = 'F'
            let #colitemmal = 0
            break
         when-other
            let #colitemmal = 1
            break
      end-evaluate


      let #colmal = (#colsetmal + #colitemmal)


      ARRAY-ADD 1 to soc_breakdown_male(#row) Count(#colmal)
      ARRAY-ADD 1 to soc_breakdown_male(#row) Count(#coltotmal)


      evaluate $DET_METHOD
         when = 'R1'
         when = 'R2'
         when = 'RO'
            ARRAY-ADD 1 to cb_method_male(#colmal)
            ARRAY-ADD 1 to cb_method_male(#coltotmal)
            break
      end-evaluate

   end-if


end-procedure EvaluatePartB

!-----------------------------------------------------------------------
! Print breakdown figures
!-----------------------------------------------------------------------
begin-procedure PrintBreakdown

   clear-array name=total
   let #row = 0
   while #row < 9

      let #out = #row + 1
      print #out                                       (+2, 1,1) edit '9'
      get $out from soc_names(#row)
      print $out                                       ( 0, 3,30)

      position                                         ( 0,{C_DATA1})
      let #colp = 0
      while #colp < 9


         EVALUATE $PRT_IND
            when = 'M'
               get #out from soc_breakdown_male(#row) count(#colp)
               break

            when = 'F'
               get #out from soc_breakdown_female(#row) count(#colp)
               break
         end-evaluate


         array-add #out to total(#colp)
         print #out                                    ( 0, 0) edit '9,999'
         add 1 to #colp

         position                                      ( 0,+{C_STEP})

         if #colp = 3 or #colp= 6
              position                                 (0, +10)
         end-if


      end-while

      add 1 to #row
   end-while

end-procedure PrintBreakdown


!-----------------------------------------------------------------------
! Applicant data
!-----------------------------------------------------------------------
begin-procedure GetPartBApplicants

   do ResetVariables

   clear-array name=apl_breakdown
   clear-array name=cb_method

BEGIN-SELECT
APL.APPLID
APL.SEX
APP.NI_COMMUNITY_BG
APP.NI_CB_DET_METHOD
JT.UK_SOC_CD

   let $applid = RTRIM(&APL.APPLID, {SPACE})


   if isblank(&JT.UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
      let $SOC_CD = &JT.UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   evaluate &APP.NI_COMMUNITY_BG
      when = 'PR'
         let #colrow = 0
         break
      when = 'CA'
         let #colrow = 1
         break
      when-other
         let #colrow = 2
         break
   end-evaluate

   !Then the column...
   evaluate &APL.SEX
      when = 'F'
         let #sexcol = 3
         let #Females = #Females + 1

         evaluate &APP.NI_CB_DET_METHOD
            when = 'R1'
            when = 'R2'
            when = 'RO'
            if &APP.NI_COMMUNITY_BG = 'PR'
               ARRAY-ADD 1 to cb_method(2)
            end-if
            if &APP.NI_COMMUNITY_BG = 'CA'
               ARRAY-ADD 1 to cb_method(3)
            end-if
            break
         end-evaluate

      break

      when-other                          ! if sex not given, assume male
         let #sexcol = 0
         let #Males = #Males + 1

         evaluate &APP.NI_CB_DET_METHOD
            when = 'R1'
            when = 'R2'
            when = 'RO'
            if &APP.NI_COMMUNITY_BG = 'PR'
               ARRAY-ADD 1 to cb_method(0)
            end-if
            if &APP.NI_COMMUNITY_BG = 'CA'
               ARRAY-ADD 1 to cb_method(1)
            end-if
            break
         end-evaluate

      break
   end-evaluate

   let #applcol = (#colrow + #sexcol)


   ARRAY-ADD 1 to APL_BREAKDOWN(#ROW) COUNT(#applcol)


FROM PS_HRS_APPLICANT APL,
     PS_HRS_APP_PROFILE AD,
     PS_HRS_APP_DIV APP,
     PS_HRS_RCMNT_I POSN,
     PS_HRS_JO_I REQ,
     PS_JOBCODE_TBL JT
  WHERE APL.HRS_PERSON_ID          = AD.HRS_PERSON_ID
    AND APL.HRS_PERSON_ID          = APP.HRS_PERSON_ID
    AND APL.HRS_PERSON_ID          = POSN.HRS_PERSON_ID
    AND AD.HRS_PERSON_ID           = APP.HRS_PERSON_ID
    AND AD.HRS_PERSON_ID           = POSN.HRS_PERSON_ID
    AND AD.HRS_PROFILE_SEQ         = POSN.HRS_PROFILE_SEQ
    AND REQ.HRS_JOB_OPENING_ID     = POSN.HRS_JOB_OPENING_ID
    AND JT.SETID                   = REQ.SETID_DEPT
    AND JT.JOBCODE                 = REQ.JOBCODE
    AND JT.EFFDT                   = (SELECT MAX(JT2.EFFDT)
                                        FROM PS_JOBCODE_TBL JT2
                                       WHERE JT2.SETID     = JT.SETID
                                         AND JT2.JOBCODE   = JT.JOBCODE
                                         AND JT2.EFFDT    <= $AsOfDate)
    AND (AD.HRS_DES_LOC1       IN (SELECT L.HRS_LOCATION_ID
                                     FROM PS_HRS_LOCATION L
                                    WHERE L.SETID IN (SELECT B.SETID FROM PS_LOCATION_TBL B
                                                       WHERE B.SETID = L.SETID
                                                         AND B.EFFDT =(SELECT MAX(LL.EFFDT)
                                                                         FROM PS_LOCATION_TBL LL
                                                                        WHERE LL.SETID      = B.SETID
                                                                          AND LL.EFFDT     <= $AsOfDate
                                                                          AND LL.LOCATION   = B.LOCATION
                                                         AND B.NI_REPORT_SW_UK  = 'Y'))
                                      AND AD.HRS_DES_LOC1 = L.HRS_LOCATION_ID)
         OR AD.HRS_DES_LOC2    IN (SELECT L.HRS_LOCATION_ID
                                     FROM PS_HRS_LOCATION L
                                    WHERE L.SETID IN (SELECT B.SETID FROM PS_LOCATION_TBL B
                                                       WHERE B.SETID = L.SETID
                                                         AND B.EFFDT =(SELECT MAX(LL.EFFDT)
                                                                         FROM PS_LOCATION_TBL LL
                                                                        WHERE LL.SETID      = B.SETID
                                                                          AND LL.EFFDT     <= $AsOfDate
                                                                          AND LL.LOCATION   = B.LOCATION
                                                      AND B.NI_REPORT_SW_UK  = 'Y'))
                                      AND AD.HRS_DES_LOC2 = L.HRS_LOCATION_ID))


END-SELECT

   let #Total = #Females + #Males

end-procedure GetPartBApplicants



!-----------------------------------------------------------------------
! Appointees data
!-----------------------------------------------------------------------
begin-procedure GetPartBAppointees

   do ResetVariables

   clear-array name=app_breakdown
   clear-array name=cb_method

BEGIN-SELECT
JDA.EMPLID
JDA.EFFDT
JDA.JOB_INDICATOR
JDA.EMPL_CLASS
PDDA.SEX
DVRDA.NI_COMMUNITY_BG
DVRDA.NI_CB_DET_METHOD
JCDA.UK_SOC_CD


      LET $EMPLID           = RTRIM(&JDA.EMPLID, {SPACE})
      LET $EMPL_CLASS       = RTRIM(&JDA.EMPL_CLASS, {SPACE})
      LET $INDICATOR        = &JD.JOB_INDICATOR
      LET $SEX              = &PDDA.SEX
      LET $COMMUNITY_BG     = &DVRDA.NI_COMMUNITY_BG
      LET $DET_METHOD       = &DVRDA.NI_CB_DET_METHOD
      LET $UK_SOC_CD        = &JCDA.UK_SOC_CD


   if isblank($UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
        let $SOC_CD = $UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   evaluate $COMMUNITY_BG
      when = 'PR'
         let #dvrcolpr  = 0
         break
      when = 'CA'
         let #dvrcolpr  = 1
         break
      when-other
         let #dvrcolpr  = 2
         break
   end-evaluate

   evaluate $SEX
      when = 'F'
         let #colsexpr  = 3
         let #Females = #Females + 1
         evaluate $DET_METHOD
            when = 'R1'
            when = 'R2'
            when = 'RO'
            if $COMMUNITY_BG = 'PR'
               ARRAY-ADD 1 to cb_method(2)
            end-if
            if $COMMUNITY_BG = 'CA'
               ARRAY-ADD 1 to cb_method(3)
            end-if
            break
         end-evaluate

      break
      when-other                          ! if sex not given, assume male
         let #colsexpr  = 0
         let #Males   = #Males + 1
         evaluate $DET_METHOD
            when = 'R1'
            when = 'R2'
            when = 'RO'
            if $COMMUNITY_BG = 'PR'
               ARRAY-ADD 1 to cb_method(0)
            end-if
            if $COMMUNITY_BG = 'CA'
               ARRAY-ADD 1 to cb_method(1)
            end-if
            break
         end-evaluate

      break
      end-evaluate


   let #appscol = (#dvrcolpr + #colsexpr)

   ARRAY-ADD 1 to app_breakdown(#row) Count(#appscol)


FROM  PS_JOB JDA,
      PS_PERSONAL_DT_FST PDDA,
      PS_DIVERSITY DVRDA,
      PS_JOBCODE_TBL JCDA

WHERE JDA.EMPLID      = PDDA.EMPLID
  AND JDA.EMPLID      = DVRDA.EMPLID
  AND JDA.EFFDT       = ( SELECT MIN(JJDA.EFFDT)
                            FROM PS_JOB JJDA
                           WHERE JJDA.EMPLID       = JDA.EMPLID
                             AND JJDA.EMPL_RCD     = JDA.EMPL_RCD
                             AND JJDA.EFFDT BETWEEN  $FromDate AND $AsOfDate)

  AND JDA.EFFSEQ     = (  SELECT MIN(J3DA.EFFSEQ)
                            FROM PS_JOB J3DA
                           WHERE J3DA.EMPLID       = JDA.EMPLID
                             AND J3DA.EMPL_RCD     = JDA.EMPL_RCD
                             AND J3DA.EFFDT        = JDA.EFFDT)

  AND JDA.LOCATION  IN (  SELECT L.LOCATION
                            FROM PS_LOCATION_TBL L
                           WHERE L.NI_REPORT_SW_UK = 'Y'
                             AND L.EFFDT           = (SELECT MAX(LL.EFFDT)
                                                        FROM PS_LOCATION_TBL LL
                                                       WHERE LL.NI_REPORT_SW_UK    = 'Y'
                                                         AND LL.LOCATION    = L.LOCATION
                                                         AND LL.EFFDT      <= JDA.EFFDT))

  AND JDA.JOBCODE     = JCDA.JOBCODE
  AND JDA.EMPL_CLASS  = 'A'

  AND JCDA.EFFDT      = ( SELECT MAX(JC2DA.EFFDT)
                            FROM PS_JOBCODE_TBL JC2DA
                           WHERE JCDA.JOBCODE      = JC2DA.JOBCODE
                             AND JC2DA.SETID       = JDA.SETID_JOBCODE
                             AND JC2DA.EFFDT      <= JDA.EFFDT)

  AND JCDA.SETID      = JDA.SETID_JOBCODE

END-SELECT


   let #Total     = #Females + #Males

end-procedure GetPartBAppointees


!-----------------------------------------------------------------------
! Part C Apprentices
!-----------------------------------------------------------------------
begin-procedure GetPartCBreakdown

   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartC'

   do ResetVariables

   clear-array name=apprentices_female
   clear-array name=apprentices_male

BEGIN-SELECT
JZ.EMPLID
JZ.FULL_PART_TIME
JZ.JOB_INDICATOR
PDZ.SEX
DVRZ.NI_COMMUNITY_BG

      LET $EMPLID           = RTRIM(&JZ.EMPLID, {SPACE})
      LET $FULL_PART_TIME   = &JZ.FULL_PART_TIME
      LET $INDICATOR        = &JZ.JOB_INDICATOR
      LET $SEX              = &PDZ.SEX
      LET $COMMUNITY_BG     = &DVRZ.NI_COMMUNITY_BG

      ! check for duplicate employees - only count them once
      evaluate $INDICATOR
         when = 'P'
            let $job_type = 'Primary Job.'
            break
         when = 'S'
            let $job_type = 'Secondary Job.'
            break
         when-other
            let $job_type = 'Not Applicable code.'
            break
      end-evaluate

      let $temp = 'Employee number ' ||$EMPLID || ' has already been process/counted using the ' ||$previous_job

      let $current_emplid      =  $EMPLID
      let $current_job         =  $job_type

      if $current_emplid = $previous_emplid
         display $temp
      else
         do EvaluatePartC
      end-if

      let $previous_emplid     =  $current_emplid
      let $previous_job        =  $current_job

FROM  PS_JOB JZ,
      PS_PERSONAL_DT_FST PDZ,
      PS_DIVERSITY DVRZ,
      PS_JOBCODE_TBL JCZ

WHERE JZ.EMPLID         =  PDZ.EMPLID
  AND JZ.EMPLID         =  DVRZ.EMPLID

  AND JZ.EFFDT          = (  SELECT MAX(JJZ.EFFDT)
                              FROM  PS_JOB JJZ
                             WHERE  JJZ.EMPLID     = JZ.EMPLID
                               AND  JJZ.EMPL_RCD   = JZ.EMPL_RCD
                               AND  JJZ.EFFDT   BETWEEN $FromDate AND $AsOfDate)

  AND JZ.EFFSEQ         = (  SELECT MAX(J3Z.EFFSEQ)
                              FROM  PS_JOB J3Z
                             WHERE  J3Z.EMPLID     = JZ.EMPLID
                               AND  J3Z.EMPL_RCD   = JZ.EMPL_RCD
                               AND  J3Z.EFFDT      = JZ.EFFDT)

  AND JZ.HR_STATUS      = 'A'
  AND JZ.EMPL_CLASS     = 'P'

  AND JZ.LOCATION      IN (  SELECT LZ.LOCATION
                              FROM  PS_LOCATION_TBL LZ
                             WHERE  LZ.NI_REPORT_SW_UK    = 'Y'
                               AND  LZ.EFFDT       = (SELECT MAX(LLZ.EFFDT)
                                                        FROM PS_LOCATION_TBL LLZ
                                                       WHERE LLZ.NI_REPORT_SW_UK   = 'Y'
                                                         AND LLZ.LOCATION          = LZ.LOCATION
                                                         AND LLZ.EFFDT            <= JZ.EFFDT))

  AND JZ.JOBCODE        = JCZ.JOBCODE

  AND JCZ.EFFDT         = (SELECT MAX(JC2Z.EFFDT)
                             FROM PS_JOBCODE_TBL JC2Z
                            WHERE JCZ.JOBCODE    = JC2Z.JOBCODE
                              AND JC2Z.SETID     = JZ.SETID_JOBCODE
                              AND JC2Z.EFFDT    <= JZ.EFFDT)

  AND JCZ.SETID         = JZ.SETID_JOBCODE


END-SELECT

end-procedure GetPartCBreakdown



!-----------------------------------------------------------------------
! Evaluate the data retirved in GetPartCBreakdown
!-----------------------------------------------------------------------
begin-procedure EvaluatePartC


   if isblank($_UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
      let $SOC_CD = $UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   !evaluate the different categories
   if $SEX = 'F'

      let #Females = #Females + 1

      evaluate $COMMUNITY_BG
         when = 'PR'
            let #appsetfem = 0
            let #apptotfem = 2
            break
         when = 'CA'
            let #appsetfem = 3
            let #apptotfem = 5
            break
         when-other
            let #appsetfem = 6
            let #apptotfem = 8
            break
         end-evaluate

      evaluate $FULL_PART_TIME
         when = 'F'
            let #appitemfem = 0
            break

         when-other
            let #appitemfem = 1
            break
      end-evaluate


      let #appcolfem = (#appsetfem + #appitemfem)

      ARRAY-ADD 1 to apprentices_female(#appcolfem)
      ARRAY-ADD 1 to apprentices_female(#apptotfem)


   else

      let #Males   = #Males + 1

      evaluate $COMMUNITY_BG
         when = 'PR'
            let #appsetmal = 0
            let #apptotmal = 2
            break
         when = 'CA'
            let #appsetmal = 3
            let #apptotmal = 5
            break
        when-other
            let #appsetmal = 6
            let #apptotmal = 8
            break
        end-evaluate

      evaluate $FULL_PART_TIME
         when = 'F'
            let #appitemmal = 0
            break
         when-other
            let #appitemmal = 1
            break
      end-evaluate


      let #appcolmal = (#appsetmal + #appitemmal)


      ARRAY-ADD 1 to apprentices_male(#appcolmal)
      ARRAY-ADD 1 to apprentices_male(#apptotmal)

   end-if


end-procedure EvaluatePartC


!-----------------------------------------------------------------------
! Count the employees in the organisation as of the monitoring start date
! increment date by 1 up until asofdate if employee count is less than 250
!-----------------------------------------------------------------------
begin-procedure EmployeeCount

   do ResetVariables

   let #ecount = 0
   let $cdate = $FromDate
   let $PartD_Ind = 'N'


   do Convert-To-DTU-Date($cdate, $dtu_cdate)

   move 250 TO #count_check

   while  $dtu_cdate <= $AsOfDate


BEGIN-SELECT
COUNT(DISTINCT(J1.EMPLID))           &Emps_count

   let #ecount =  &Emps_count

   FROM  PS_JOB J1
  WHERE  J1.EFFDT         = (SELECT  MAX(JJ2.EFFDT)
                               FROM  PS_JOB JJ2
                              WHERE  JJ2.EMPLID          = J1.EMPLID
                                AND  JJ2.EFFDT          <= $dtu_cdate)

  AND    J1.HR_STATUS     = 'A'

  AND    J1.LOCATION     IN (SELECT  L.LOCATION
                               FROM  PS_LOCATION_TBL L
                              WHERE  L.NI_REPORT_SW_UK   = 'Y'
                                AND  L.EFFDT             = (SELECT MAX(LL.EFFDT)
                                                              FROM PS_LOCATION_TBL LL
                                                             WHERE LL.NI_REPORT_SW_UK  = 'Y'
                                                               AND LL.LOCATION         = L.LOCATION
                                                               AND LL.EFFDT           <= J1.EFFDT))
END-SELECT


      if #ecount > #count_check
         let $new_cdate = $dtu_cdate
         let $PartD_Ind = 'Y'                 ! indicator for populating promotees and leavers
         break                                ! Exit WHILE loop
      else

         do DTU-Add-Days($dtu_cdate, 1, $dtu_cdate_out)

         do Convert-From-DTU-Date($dtu_cdate_out, $dtu_cdate)
      end-if


      if $dtu_cdate > $AsOfDate

         DISPLAY {SPACE}
         DISPLAY 'WARNING --> PerformPartD'
         display 'Search has reached the end of the period and employee count is less than 250.'
         display 'Part D will not be populated --- number of employees did not reach statutory requirements'
         break                                 ! Exit WHILE loop
      end-if

   end-while


end-procedure EmployeeCount


!-----------------------------------------------------------------------
! PartD data for Promotees
!-----------------------------------------------------------------------
begin-procedure GetPartDPromotees


   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartDPromotees'

   do ResetVariables

   clear-array name=prmts_breakdown


BEGIN-SELECT
JD.EMPLID
JD.EFFDT
JD.JOB_INDICATOR
JD.EMPL_CLASS
PDD.SEX
DVRD.NI_COMMUNITY_BG
JCD.UK_SOC_CD


      LET $EMPLID           = RTRIM(&JD.EMPLID, {SPACE})
      LET $EMPL_CLASS       = RTRIM(&JD.EMPL_CLASS, {SPACE})
      LET $INDICATOR        = &JD.JOB_INDICATOR
      LET $SEX              = &PDD.SEX
      LET $COMMUNITY_BG     = &DVRD.NI_COMMUNITY_BG
      LET $UK_SOC_CD        = &JCD.UK_SOC_CD


      ! check for duplicate employees - only count them once
      evaluate $INDICATOR
         when = 'P'
            let $job_type = 'Primary Job'
            break
         when = 'S'
            let $job_type = 'Secondary Job'
            break
         when-other
            let $job_type = 'Not Applicable code'
            break
      end-evaluate


      let $current_emplid      =  $EMPLID
      let $current_job         =  $job_type
      let $msg  =  'Promotee in the '||$current_job||' and will only be counted once using '||$previous_job||' details.'

      let $temp = 'Employee number ' ||$EMPLID || ' is also a ' || $msg

      if $current_emplid = $previous_emplid

         display $temp

      else

          do CheckStatusPromotees

      end-if

      let $previous_emplid     =  $current_emplid
      let $previous_job        =  $current_job


FROM  PS_JOB JD,
      PS_PERSONAL_DT_FST PDD,
      PS_DIVERSITY DVRD,
      PS_JOBCODE_TBL JCD

WHERE JD.EMPLID      = PDD.EMPLID
  AND JD.EMPLID      = DVRD.EMPLID
  AND JD.EFFDT       = (  SELECT MIN(JJD.EFFDT)
                            FROM PS_JOB JJD
                           WHERE JJD.EMPLID       = JD.EMPLID
                             AND JJD.EMPL_RCD     = JD.EMPL_RCD
                             AND JJD.EFFDT BETWEEN  $new_cdate AND $AsOfDate)

  AND JD.EFFSEQ      = (  SELECT MIN(J3D.EFFSEQ)
                            FROM PS_JOB J3D
                           WHERE J3D.EMPLID       = JD.EMPLID
                             AND J3D.EMPL_RCD     = JD.EMPL_RCD
                             AND J3D.EFFDT        = JD.EFFDT)

  AND JD.EMPL_CLASS  = 'M'

  AND JD.LOCATION   IN (  SELECT L.LOCATION
                            FROM PS_LOCATION_TBL L
                           WHERE L.NI_REPORT_SW_UK    = 'Y'
                             AND L.EFFDT         = (SELECT MAX(LL.EFFDT)
                                                      FROM PS_LOCATION_TBL LL
                                                     WHERE LL.NI_REPORT_SW_UK    = 'Y'
                                                       AND LL.LOCATION        = L.LOCATION
                                                       AND LL.EFFDT          <= JD.EFFDT))

  AND JD.JOBCODE     = JCD.JOBCODE

  AND JCD.EFFDT      = (  SELECT MAX(JC2D.EFFDT)
                            FROM PS_JOBCODE_TBL JC2D
                           WHERE JCD.JOBCODE      = JC2D.JOBCODE
                             AND JC2D.SETID       = JD.SETID_JOBCODE
                             AND JC2D.EFFDT      <= JD.EFFDT)

  AND JCD.SETID      = JD.SETID_JOBCODE


END-SELECT

end-procedure GetPartDPromotees



!-----------------------------------------------------------------------
! Check if employee is still active on the asofdate before counting
!-----------------------------------------------------------------------
begin-procedure CheckStatusPromotees

BEGIN-SELECT
JS.HR_STATUS


      LET $HR_STATUS       = RTRIM(&JS.HR_STATUS, {SPACE})


 FROM  PS_JOB JS
WHERE  JS.EMPLID = $current_emplid
  AND  JS.EFFDT  = ( SELECT MAX(JS2.EFFDT)
                       FROM PS_JOB JS2
                      WHERE JS2.EMPLID   = JS.EMPLID
                        AND JS2.EFFDT   <= $AsOfDate)
END-SELECT


      if  $HR_STATUS = 'A'

          do EvaluatePartDPromotees    ! employee still active, will be counted

      end-if

end-procedure CheckStatusPromotees


!-----------------------------------------------------------------------
! Evaluate the data retirved in GetPartDPromotees
!-----------------------------------------------------------------------
begin-procedure EvaluatePartDPromotees


   if isblank($UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
        let $SOC_CD = $UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   evaluate $COMMUNITY_BG
      when = 'PR'
         let #dvrcolpr  = 0
         break
      when = 'CA'
         let #dvrcolpr  = 1
         break
      when-other
         let #dvrcolpr  = 2
         break
   end-evaluate

   evaluate $SEX
      when = 'F'
         let #colsexpr  = 3
         let #Females = #Females + 1
         break
      when-other                          ! if sex not given, assume male
         let #colsexpr  = 0
         let #Males   = #Males + 1
         break
      end-evaluate

   let #prmtscol = (#dvrcolpr + #colsexpr)

   ARRAY-ADD 1 to prmts_breakdown(#row) Count(#prmtscol)


   let #Total     = #Females + #Males

end-procedure EvaluatePartDPromotees



!-----------------------------------------------------------------------
! PartD data for Leavers
!-----------------------------------------------------------------------
begin-procedure GetPartDLeavers


   DISPLAY {SPACE}
   DISPLAY 'PROCEDURE --> PerformPartDLeavers'

   do ResetVariables

   clear-array name=lvrs_breakdown

BEGIN-SELECT
JD1.EMPLID
JD1.EFFDT
JD1.JOB_INDICATOR
JD1.EMPL_CLASS
PDD1.SEX
DVRD1.NI_COMMUNITY_BG
JCD1.UK_SOC_CD


      LET $EMPLID           = RTRIM(&JD1.EMPLID, {SPACE})
      LET $EMPL_CLASS       = RTRIM(&JD1.EMPL_CLASS, {SPACE})
      LET $INDICATOR        = &JD1.JOB_INDICATOR
      LET $SEX              = &PDD1.SEX
      LET $COMMUNITY_BG     = &DVRD1.NI_COMMUNITY_BG
      LET $UK_SOC_CD        = &JCD1.UK_SOC_CD


      let $current_emplid      =  $EMPLID

      if $current_emplid <> $previous_emplid

          do CheckStatusLeavers

      end-if

      let $previous_emplid     =  $current_emplid


FROM  PS_JOB JD1,
      PS_PERSONAL_DT_FST PDD1,
      PS_DIVERSITY DVRD1,
      PS_JOBCODE_TBL JCD1
WHERE JD1.EMPLID      = PDD1.EMPLID
  AND JD1.EMPLID      = DVRD1.EMPLID

  AND JD1.EFFDT       = (  SELECT MIN(JJD1.EFFDT)
                            FROM  PS_JOB JJD1
                           WHERE  JJD1.EMPLID       = JD1.EMPLID
                             AND  JJD1.EMPL_RCD     = JD1.EMPL_RCD
                             AND  JJD1.EFFDT BETWEEN  $new_cdate AND $AsOfDate)

  AND JD1.EFFSEQ      = (  SELECT MIN(J3D1.EFFSEQ)
                            FROM  PS_JOB J3D1
                           WHERE  J3D1.EMPLID       = JD1.EMPLID
                             AND  J3D1.EMPL_RCD     = JD1.EMPL_RCD
                             AND  J3D1.EFFDT        = JD1.EFFDT)

  AND JD1.EMPL_CLASS  = 'L'

  AND JD1.LOCATION   IN (  SELECT L.LOCATION
                             FROM PS_LOCATION_TBL L
                            WHERE L.NI_REPORT_SW_UK    = 'Y'
                              AND L.EFFDT              = (SELECT MAX(LL.EFFDT)
                                                            FROM PS_LOCATION_TBL LL
                                                           WHERE LL.NI_REPORT_SW_UK    = 'Y'
                                                             AND LL.LOCATION     = L.LOCATION
                                                             AND LL.EFFDT       <= JD1.EFFDT))

  AND JD1.JOBCODE     = JCD1.JOBCODE

  AND JCD1.EFFDT      = (  SELECT MAX(JC2D1.EFFDT)
                            FROM  PS_JOBCODE_TBL JC2D1
                           WHERE  JCD1.JOBCODE      = JC2D1.JOBCODE
                             AND  JC2D1.SETID       = JD1.SETID_JOBCODE
                             AND  JC2D1.EFFDT      <= JD1.EFFDT)

  AND JCD1.SETID      = JD1.SETID_JOBCODE

END-SELECT

end-procedure GetPartDLeavers


!-----------------------------------------------------------------------
! Check if employee has left all jobs before counting
!-----------------------------------------------------------------------
begin-procedure CheckStatusLeavers

! count number of employee records
BEGIN-SELECT
COUNT(DISTINCT(JSL.EMPLID))              &lv_count


    let #lv_count = &lv_count

 FROM  PS_JOB JSL
WHERE  JSL.EMPLID = $current_emplid
  AND  JSL.EFFDT  = (SELECT MAX(JSL2.EFFDT)
                       FROM PS_JOB JSL2
                      WHERE JSL2.EMPLID   = JSL.EMPLID
                        AND JSL2.EMPL_RCD = JSL.EMPL_RCD
                        AND JSL2.EFFDT   <= $AsOfDate)
END-SELECT



! count number of employee records that are leavers
BEGIN-SELECT
COUNT(DISTINCT(JSL1.EMPLID))            &lv_counts


      let #lv_counts = &lv_counts

      let $temp = 'Employee number ' ||$EMPLID || ' is not a Leaver in all jobs, will not be counted.'

      if #lv_count = #lv_counts

         do EvaluatePartDLeavers

      else

          display $temp

      end-if



 FROM  PS_JOB JSL1
WHERE  JSL1.EMPLID = $current_emplid
  AND  JSL1.EFFDT  = (SELECT MAX(JSL21.EFFDT)
                       FROM PS_JOB JSL21
                      WHERE JSL21.EMPLID   = JSL1.EMPLID
                        AND JSL21.EMPL_RCD = JSL1.EMPL_RCD
                        AND JSL21.EFFDT   <= $AsOfDate)
 AND   JSL1.EMPL_CLASS = 'L'
END-SELECT


end-procedure CheckStatusLeavers

!-----------------------------------------------------------------------
! Evaluate the data retirved in GetPartDLeavers
!-----------------------------------------------------------------------
begin-procedure EvaluatePartDLeavers


   if isblank($UK_SOC_CD)
      let $SOC_CD = '9'                   !default to 'other occupations'
   else
        let $SOC_CD = $UK_SOC_CD
   end-if
   let #row = to_number($SOC_CD) - 1      !array index starts at zero


   evaluate $COMMUNITY_BG
      when = 'PR'
         let #dvrcollv  = 0
         break
      when = 'CA'
         let #dvrcollv  = 1
         break
      when-other
         let #dvrcollv  = 2
         break
   end-evaluate

   evaluate $SEX
      when = 'F'
         let #colsexlv  = 3
         let #Females = #Females + 1
         break
      when-other                          ! if sex not given, assume male
         let #colsexlv  = 0
         let #Males   = #Males + 1
         break
      end-evaluate

   let #lvrscol = (#dvrcollv + #colsexlv)

   ARRAY-ADD 1 to lvrs_breakdown(#row) Count(#lvrscol)


   let #Total     = #Females + #Males

end-procedure EvaluatePartDLeavers

!-----------------------------------------------------------------------
! Reset local variables used
!-----------------------------------------------------------------------
begin-procedure ResetVariables

      let $SOC_CD             = {SPACE}
      let $previous_emplid    = {SPACE}
      let $current_emplid     = {SPACE}
      let $current_job        = {SPACE}
      let $previous_job       = {SPACE}
      let $current_class      = {SPACE}
      let $previous_class     = {SPACE}
      let $msg                = {SPACE}
      let $temp               = {SPACE}

      let #Males              = 0
      let #Females            = 0
      let #Total              = 0

end-procedure ResetVariables


!-----------------------------------------------------------------------
! Obtain basic report information
!-----------------------------------------------------------------------
begin-procedure GetBaseDetails

! select the operators name
BEGIN-SELECT
NAME_PREFIX
NAME
   let $OperName = rtrim(&NAME,{SPACE})
   do UnFormatName($OperName,$OperName)
   let $OperName = rtrim(&NAME_PREFIX,{SPACE}) || {SPACE} || $OperName

   FROM   PS_PERSON_NAME
   WHERE  EMPLID = &RUN_CNTL_UKNI.EMPLID
END-SELECT

! select the operators job and organisation details
BEGIN-SELECT
CJ.POSITION_NBR   &PosNbr
CT.DESCR          &OrgName
CT.ADDRESS1       &OrgAddress1
CT.ADDRESS2       &OrgAddress2
CT.ADDRESS3       &OrgAddress3
CT.ADDRESS4       &OrgAddress4
CT.CITY           &OrgCity
CT.COUNTY         &OrgCounty
CT.STATE          &OrgState
CT.POSTAL         &OrgZip
CT.COUNTRY        &OrgCountry

   FROM   PS_CURRENT_JOB CJ, PS_COMPANY_TBL CT
   WHERE  CJ.EMPL_RCD  = 0
   AND    CJ.EMPLID    = &RUN_CNTL_UKNI.EMPLID
   AND    CJ.COMPANY   = CT.COMPANY
   AND    CT.EFFDT     = (SELECT MAX(CTCT.EFFDT)
                               FROM   PS_COMPANY_TBL CTCT
                               WHERE  CTCT.COMPANY = CT.COMPANY
                               AND    CTCT.EFFDT <= $AsOfToday)
END-SELECT

   ! Validate contents in case no organisation details are brought back...
   let $PosNbr           = nvl(&PosNbr,           {SPACE})
   let $OrgName          = nvl(&OrgName,          {SPACE})
   let $OrgAddress1      = nvl(&OrgAddress1,      {SPACE})
   let $OrgAddress2      = nvl(&OrgAddress2,      {SPACE})
   let $OrgAddress3      = nvl(&OrgAddress3,      {SPACE})
   let $OrgAddress4      = nvl(&OrgAddress4,      {SPACE})
   let $OrgCity          = nvl(&OrgCity,          {SPACE})
   let $OrgCounty        = nvl(&OrgCounty,        {SPACE})
   let $OrgState         = nvl(&OrgState,         {SPACE})
   let $OrgZip           = nvl(&OrgZip,           {SPACE})
   let $OrgCountry       = nvl(&OrgCountry,       {SPACE})
   do GetStateName(&OrgCountry,&OrgState,$OrgStateName)
   do GetCountryName(&OrgCountry,$OrgCountryName)


   ! Get the Standard Occupational Classification (soc) names into the array
   let $FieldName  = 'UK_SOC_CD'
   let #row = 0
   while #row < 9
      let $FieldValue = to_char((#row + 1))
      do Read-Translate-Table
      put $XLATLongName into soc_names(#row)
      add 1 to #row
   end-while


! select the operators current position
BEGIN-SELECT
P.DESCR           &PosName

   let $PosName = rtrim(&PosName, {SPACE})

    FROM  PS_POSITION_DATA P
   WHERE  POSITION_NBR = $PosNbr
     AND  P.EFFDT = (SELECT MAX(PN.EFFDT)
                       FROM PS_POSITION_DATA PN
                      WHERE PN.POSITION_NBR = P.POSITION_NBR
                        AND PN.EFFDT <= $AsOfToday)

END-SELECT

end-procedure GetBaseDetails


!-----------------------------------------------------------------------
! Print the column numbers...
!-----------------------------------------------------------------------
begin-procedure PrintColumnNumbers
   print '    FT     PT     T'                         (+1,{C_DATA1},28)
   print '    FT     PT     T'                         ( 0,{C_DATA3},28)
   print '      FT     PT     T'                       ( 0,{C_DATA5},28)
end-procedure PrintColumnNumbers



!-----------------------------------------------------------------------
! Print the column class...
!-----------------------------------------------------------------------
begin-procedure PrintColumnClass
   print '  FT      PT      T'                         (+1,{C_DATA3},28)
   print '  FT      PT      T'                         ( 0,{C_DATA5},28)
end-procedure PrintColumnClass

!-----------------------------------------------------------------------
! Print the gender...
!-----------------------------------------------------------------------
begin-procedure PrintColumnGender
   print 'MALE'                                        (+1,{C_DATA2},14)
   print 'FEMALE'                                      ( 0,{C_DATA3},14)
   print 'TOTAL'                                       ( 0,{C_DATA4},14)
end-procedure PrintColumnGender



!-----------------------------------------------------------------------
!-----------------------------------------------------------------------
! Get the report parameters
!-----------------------------------------------------------------------
!-----------------------------------------------------------------------
begin-procedure select-parameters

begin-SELECT

RUN_CNTL_UKNI.OPRID
RUN_CNTL_UKNI.RUN_CNTL_ID
RUN_CNTL_UKNI.EMPLID
RUN_CNTL_UKNI.ASOFDATE
RUN_CNTL_UKNI.UKNI_MONITOR_SW


   let $Supervisor  = RTRIM(&RUN_CNTL_UKNI.EMPLID, ' ')
   let $AsOfDate    = &RUN_CNTL_UKNI.ASOFDATE
   let $Authories   = &RUN_CNTL_UKNI.UKNI_MONITOR_SW

       ! convert the date for calculations
       do Convert-To-DTU-Date($AsOfDate, $dtu_AsOfDate)

   let $AsOfDate    = $dtu_AsOfDate

       ! subracting 12 months
       do DTU-Add-Months($dtu_AsOfDate, -12, $dtu_AsOfDate_out)

       ! add 1 day to make it start at the beginning of the year
       do DTU-Add-Days($dtu_AsOfDate_out, 1, $dtu_day_AsOfDate_out)

       ! convert back to native format
       do Convert-From-DTU-Date($dtu_day_AsOfDate_out, $dtu_AsOfDate)

   let $FromDate    = $dtu_AsOfDate

   let $Year4 = '1'
   let $DDelimiter = '/'
   do Format-DateTime($AsOfDate, $AsOfDatePgm, {DEFDMY}, {NIL}, {NIL})
   let $Year4 = '1'
   do Format-DateTime($FromDate, $FromDatePgm, {DEFDMY}, {NIL}, {NIL})


FROM PS_RUN_CNTL_UKNI RUN_CNTL_UKNI

WHERE RUN_CNTL_UKNI.OPRID       = $prcs_oprid
  AND RUN_CNTL_UKNI.RUN_CNTL_ID = $prcs_run_cntl_id

END-SELECT

end-procedure select-parameters



