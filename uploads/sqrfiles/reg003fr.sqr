!*********************************************
!  REG003FR:  Annual survey by Nationality   *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/06:21:24:55                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define ESTAB_TBL
#include 'rellang.sqc'

#define APP 0
#define ONQ 1
#define OQU 2
#define EMP 3
#define AGM 4
#define CAD 5
#define N_A 6

#define APP_TXT 'APP'
#define ONQ_TXT 'ONQ'
#define OQU_TXT 'OQU'
#define EMP_TXT 'EMP'
#define AGM_TXT 'AGM'
#define CAD_TXT 'CAD'

#define N_A_TXT 'N/A'

#define FRANCE_TXT 'FRA'
#define GRP02_TXT 'ESP'
#define GRP03_TXT 'ITA'
#define GRP04_TXT 'PRT'
#define GRP05_TXT 'REG003FR05'
#define GRP06_TXT 'YUG'
#define GRP07_TXT 'REG003FR07'
#define GRP08_TXT 'DZA'
#define GRP09_TXT 'MAR'
#define GRP10_TXT 'TUN'
#define GRP11_TXT 'REG003FR11'
#define GRP12_TXT 'UNDEFINED'
#define GRP13_TXT 'TUR'
#define GRP14_TXT 'REG003FR14'
#define GRP15_TXT 'REG003FR15'
!#define GRP16_TXT

#define FALSE 0
#define TRUE 1

#define GRP02  0
#define GRP03  1
#define GRP04  2
#define GRP05  3
#define GRP06  4
#define GRP07  5
#define GRP08  6
#define GRP09  7
#define GRP10  8
#define GRP11  9
#define GRP12 10
#define GRP13 11
#define GRP14 12
#define GRP15 13
#define GRP16 14
#define GRP_N_A 15

#define BEFORE_1940  0
#define BEFORE_1955  1
#define BEFORE_1970  2
#define BEFORE_TODAY 3

#define MALE   0
#define FEMALE 1

#define CO101    1
#define CO102   40
#define CO103   53
#define CO104   65
#define CO105   77
#define CO106   89
#define CO107  104
#define CO108  114
#define CO109  129

#define CO201    1
#define CO202   37
#define CO203   43
#define CO204   51
#define CO205   61
#define CO206   69
#define CO207   79
#define CO208   87
#define CO209   97
#define CO210  105
#define CO211  115
#define CO212  123

!***********************************************************************

begin-program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-program

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 6
  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

   move 'REG003FR' to $ReportID

   do Stdapi-Init

   let $language_cd = $CURR_LANGUAGE_CD

   do Init_Report_Translation($ReportID, $language_cd)
   do Append_Report_Translation($ReportID)

   do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #DW)

   if $prcs_process_instance = ''
     !No Prompt
   else
      do Select-Parameters-FRA
   end-if
   do Init_Printer
   do get-action-grp
end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
   do GET-REG003-FRA-PARM
end-procedure

!***********************************************************************
!  Main: Creates the Annual survey of the workforce by Nationality
!***********************************************************************

begin-procedure Process-Main

   let $RegRegion = 'FRA'

   do Get-Translat-Info

   print $TITLE1_LBL (+2,1)

   do Establishment-Retrieve       ! Estab Identity

   create-array name=Frame1 size=2
      field=Category:number:7=0

   create-array name=Banners size=2
      field=Column:number:12=0

   put {CO102} into Banners(0) Column(0)
   put {CO103} into Banners(0) Column(1)
   put {CO104} into Banners(0) Column(2)
   put {CO105} into Banners(0) Column(3)
   put {CO106} into Banners(0) Column(4)
   put {CO107} into Banners(0) Column(5)
   put {CO108} into Banners(0) Column(6)
   put {CO109} into Banners(0) Column(7)

   put {CO203} into Banners(1) Column(0)
   put {CO204} into Banners(1) Column(1)
   put {CO205} into Banners(1) Column(2)
   put {CO206} into Banners(1) Column(3)
   put {CO207} into Banners(1) Column(4)
   put {CO208} into Banners(1) Column(5)
   put {CO209} into Banners(1) Column(6)
   put {CO210} into Banners(1) Column(7)
   put {CO211} into Banners(1) Column(8)
   put {CO212} into Banners(1) Column(9)

   create-array name=Frame2 size=17
      field=Male:number:4=0
      field=Female:number:4=0

   create-array name=Frame3 size=18
      field=Category:number:7=0

   do Workforce-By-Nationality

   print $TITLE2_LBL (+2,1)
   do Print-Banner1
   do Print-Frame1
   print $TITLE3_LBL (+2,1)
   do Print-Banner2
   do Print-Frame2
   print $TITLE4_LBL (+2,1)
   do Print-Banner3
   do Print-Frame3

end-procedure

!***********************************************************************
!  Frame 1: Distribution by gender and qualification
!***********************************************************************

begin-procedure Print-Frame1

   let #i = 0
   while #i < 2
      let #Total = 0

      evaluate #i
      When = 0
         print $MEN_LBL (+2, {CO101})
      break
      When = 1
         print $WOMEN_LBL (+1, {CO101})
      break
      end-evaluate

      let #j = 0
      while #j < 7
         get #Category from Frame1(#i) Category(#j)
         Add #Category to #Total
         get #Position from Banners(0) Column(#j)
         print #Category (,#Position) EDIT 999999
         Add 1 to #j
      end-while
      print #Total (,{CO109}) EDIT 999999
      Add 1 to #i
   end-while

end-procedure Print-Frame1

!***********************************************************************
!  Frame 2: Distribution by age, gender and nationality
!***********************************************************************

begin-procedure Print-Frame2

   let #i = 0
   while #i < 17
      let #TotalMen = 0
      let #TotalWomen = 0

      do Print-Lines

      let #j = 0
      while #j < 4
         get #Male #Female from Frame2(#i) Male(#j) Female(#j)
         Add #Male to #TotalMen
         Add #Female to #TotalWomen

         let #k = #j * 2
         get #Position from Banners(1) Column(#k)
         print #Male (,#Position) EDIT 999999
         Add 1 to #k
         get #Position from Banners(1) Column(#k)
         print #Female (,#Position) EDIT 999999
         Add 1 to #j
      end-while
      print #TotalMen (,{CO211}) EDIT 999999
      print #TotalWomen (,{CO212}) EDIT 999999
      Add 1 to #i
   end-while

end-procedure Print-Frame2

!***********************************************************************
!  Frame 3: Distribution by Qualification and nationality
!***********************************************************************

begin-procedure Print-Frame3

   let #i = 0
   while #i < 18
      let #Total = 0
      let $MoreInfo = ''
      do Print-Lines
      print $MoreInfo (,+1)

      let #j = 0
      while #j < 7
         get #Category from Frame3(#i) Category(#j)
         get #Position from Banners(0) Column(#j)
         print #Category (,#Position) EDIT 999999
         Add #Category to #Total
         Add 1 to #j
      end-while
      print #Total (,{CO109}) EDIT 999999
      Add 1 to #i
   end-while

end-procedure Print-Frame3

!***********************************************************************
!  Print Lines: Prints lines description of the report
!***********************************************************************

begin-procedure Print-Lines

   evaluate #i
   When = 0
      print $L02_LBL (+2, {CO101})
   break
   When = 1
      print $L03_LBL (+1, {CO101})
   break
   When = 2
      print $L04_LBL (+1, {CO101})
   break
   When = 3
      print $L05_LBL (+1, {CO101})
   break
   When = 4
      print $L06_LBL (+1, {CO101})
   break
   When = 5
      print $L07_LBL (+1, {CO101})
   break
   When = 6
      print $L08_LBL (+1, {CO101})
   break
   When = 7
      print $L09_LBL (+1, {CO101})
   break
   When = 8
      print $L10_LBL (+1, {CO101})
   break
   When = 9
      print $L11_LBL (+1, {CO101})
   break
   When = 10
      print $L12_LBL (+1, {CO101})
   break
   When = 11
      print $L13_LBL (+1, {CO101})
   break
   When = 12
      print $L14_LBL (+1, {CO101})
   break
   When = 13
      print $L15_LBL (+1, {CO101})
   break
   When = 14
      print $L16_LBL (+1, {CO101})
   break
   When = 15
      print $NOT_AVAILABLE_LBL (+1, {CO101})
   break
   When = 16
      print $L17_LBL (+1, {CO101})
      let $MoreInfo = $MEN_LBL
   break
   When = 17
      print $L17_LBL (+1, {CO101})
      let $MoreInfo = $WOMEN_LBL
   break
   end-evaluate

end-procedure Print-Lines

!***********************************************************************
!  Prints banner for Frame 1
!***********************************************************************

begin-procedure Print-Banner1

   print $OQU1_LBL           (+2,{CO103})
   print $AGM1_LBL           (,{CO106})

   print $ONQ1_LBL           (+1,{CO103})
   print $OQU1_LBL           (,{CO104})
   print $AGM2_LBL           (,{CO106})

   print $SEX_LBL            (+1, {CO101})
   print $APP_LBL            (, {CO102})
   print $OQU2_LBL           (,{CO103})
   print $OQU2_LBL           (,{CO104})
   print $EMP_LBL            (,{CO105})
   print $AGM3_LBL           (,{CO106})
   print $CAD_LBL            (,{CO107})
   print $NOT_AVAILABLE_LBL  (,{CO108})
   print $TOTAL_LBL          (,{CO109})

end-procedure Print-Banner1

!***********************************************************************
!  Prints banner for Frame 2
!***********************************************************************

begin-procedure Print-Banner2

   print $OLDNESS_LBL         (+2,{CO202})
   print $BEFORE_1940_1_LBL   (,{CO203})
   print $BEFORE_1955_1_LBL   (,{CO205})
   print $BEFORE_1970_1_LBL   (,{CO207})
   print $BEFORE_TODAY_1_LBL  (,{CO209})

   print $BEFORE_1940_2_LBL   (+1,{CO203})
   print $BEFORE_1955_2_LBL   (,{CO205})
   print $BEFORE_1970_2_LBL   (,{CO207})
   print $BEFORE_TODAY_2_LBL  (,{CO209})
   print $TOTAL_LBL           (,{CO211})

   print $NATIONALITY_LBL     (+1,{CO201})
   print $SEX_LBL             (,{CO202})

   print $MEN_LBL             (,{CO203})
   print $WOMEN_LBL           (,{CO204})
   print $MEN_LBL             (,{CO205})
   print $WOMEN_LBL           (,{CO206})
   print $MEN_LBL             (,{CO207})
   print $WOMEN_LBL           (,{CO208})
   print $MEN_LBL             (,{CO209})
   print $WOMEN_LBL           (,{CO210})
   print $MEN_LBL             (,{CO211})
   print $WOMEN_LBL           (,{CO212})

end-procedure Print-Banner2

!***********************************************************************
!  Prints banner for Frame 3
!***********************************************************************

begin-procedure Print-Banner3

   print $OQU1_LBL           (+2,{CO103})
   print $AGM1_LBL           (,{CO106})

   print $ONQ1_LBL           (+1,{CO103})
   print $OQU1_LBL           (,{CO104})
   print $AGM2_LBL           (,{CO106})

   print $NATIONALITY_LBL    (+1, {CO101})
   print $APP_LBL            (, {CO102})
   print $OQU2_LBL           (,{CO103})
   print $OQU2_LBL           (,{CO104})
   print $EMP_LBL            (,{CO105})
   print $AGM3_LBL           (,{CO106})
   print $CAD_LBL            (,{CO107})
   print $NOT_AVAILABLE_LBL  (,{CO108})
   print $TOTAL_LBL          (,{CO109})

end-procedure Print-Banner3

!***********************************************************************
!  Header: Retrieves Establishment Data
!***********************************************************************

begin-procedure Establishment-Retrieve

begin-SELECT
AA.SIREN_CD_FRA                                     &SIREN_CD_FRA
AA.NIC_CODE_FRA                                     &NIC_CD
AA.APE_INDSTRY_CD_FRA                               &APE_INDSTRY_CD_FRA
A.POSTAL                                           &POSTAL
A.ESTABID                                          &ESTABID
{DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX}    &EFFDT
A.ADDRESS1                                         &ADDRESS1
A.ADDRESS2                                         &ADDRESS2
A.ADDRESS3                                         &ADDRESS3
A.ADDRESS4                                         &ADDRESS4
A.CITY                                             &CITY
A.DESCR                                            &ESTAB_NAME

   let $ESTAB_TBL-ADDRESS1 = &ADDRESS1
   let $ESTAB_TBL-ADDRESS2 = &ADDRESS2
   let $ESTAB_TBL-ADDRESS3 = &ADDRESS3
   let $ESTAB_TBL-ADDRESS4 = &ADDRESS4
   let $ESTAB_TBL-CITY = &CITY
   let $ESTAB_TBL-DESCR = &ESTAB_NAME

   do Get_Related_ESTAB_TBL(&EFFDT, &ESTABID)

   let $Addr1 = $ESTAB_TBL-ADDRESS1
   let $Addr2 = $ESTAB_TBL-ADDRESS2
   let $Addr3 = $ESTAB_TBL-ADDRESS3
   let $Addr4 = $ESTAB_TBL-ADDRESS4
   let $City = $ESTAB_TBL-CITY
   let $EstabName = $ESTAB_TBL-DESCR

   do Establishment-Print

from PS_ESTAB_TBL A, PS_REG_REGION_TBL R, PS_ESTAB_TBL_FRA AA
where A.ESTABID=$ESTABID
and AA.ESTABID = A.ESTABID
and A.REG_REGION = R.REG_REGION
and R.COUNTRY = $RegRegion
and A.EFFDT =
(
 select MAX(EFFDT)
 from PS_ESTAB_TBL B
 where B.ESTABID = A.ESTABID
 and B.REG_REGION = R.REG_REGION
 and R.COUNTRY = $RegRegion
 and B.EFFDT <= {DATEIN-PREFIX}$ENDDT{DATEIN-SUFFIX}
)
and A.EFF_STATUS = 'A'
and AA.EFFDT = A.EFFDT

end-SELECT
end-procedure Establishment-Retrieve

!***********************************************************************
!  Prints Establishement data
!***********************************************************************

begin-procedure Establishment-Print

   print $SIRET_CD_LBL                 (+2,1)
   let $SIRET_CODE = &SIREN_CD_FRA||&NIC_CD
   print &SIREN_CD_FRA                 (,+2)
   print $APE_CD_LBL                   (,+10)
   print &APE_INDSTRY_CD_FRA           (,+2)
   print $ESTAB_NAME_LBL               (+1,1)
   print $EstabName                   (,+2)
   print $ADDRESS_LBL                  (+1,1)
   if rtrim($Addr1, ' ') <> ''
      print $Addr1                     (+1,1)
        end-if
   if rtrim($Addr2, ' ') <> ''
      print $Addr2                     (+1,1)
        end-if
   if rtrim($Addr3, ' ') <> ''
      print $Addr3                     (+1,1)
        end-if
   if rtrim($Addr4, ' ') <> ''
      print $Addr4                     (+1,1)
        end-if
   print $POSTAL_LBL                   (+1,1)
   print &POSTAL                       (,+2)
   print $CITY_LBL                     (,+10)
   print $City                         (,+2)

end-procedure Establishment-Print

!***********************************************************************
!  Retrieves Annual Survey by Nationality
!***********************************************************************

begin-procedure Workforce-By-Nationality

  do Define-PrimJob-Clause('C', $AsOfDate, $PRIM_JOB_CLAUSE)

BEGIN-SELECT
B.EMPLID                                              &B.EMPLID
B.SEX                                                 &B.SEX
C.EMPL_RCD                                            &C.EMPL_RCD
F.EMP_CATEGRY_FRA                                     &F.EMP_CATEGRY_FRA
{DATEOUT-PREFIX}B.BIRTHDATE{DATEOUT-SUFFIX}   &B.BIRTHDATE

   let #Done = {FALSE}
   let $Country = ''
   do Citizenship-Retrieve(&B.EMPLID, $Country)
   if rtrim($Country, ' ') = ''
      let $Country = {N_A_TXT}
      let #CountryPos = {GRP_N_A}
   else
      do Is-In-Country-Group($Country, {GRP05_TXT}, $AsOfDate, #Result)
      if #Result = {TRUE}
         let #CountryPos = {GRP05}
      else
         do Is-In-Country-Group($Country, {GRP07_TXT}, $AsOfDate, #Result)
         if #Result = {TRUE}
            let #CountryPos = {GRP07}
         else
            do Is-In-Country-Group($Country, {GRP11_TXT}, $AsOfDate, #Result)
            if #Result = {TRUE}
               let #CountryPos = {GRP11}
            else
               do Is-In-Country-Group($Country, {GRP14_TXT}, $AsOfDate, #Result)
               if #Result = {TRUE}
                  let #CountryPos = {GRP14}
               else
                  do Is-In-Country-Group($Country, {GRP15_TXT}, $AsOfDate, #Result)
                  if #Result = {TRUE}
                     let #CountryPos = {GRP15}
                  else
                     evaluate $Country
                     When = {FRANCE_TXT}
                        let #Done = {TRUE}
                     break
                     When = {GRP02_TXT}
                        let #CountryPos = {GRP02}
                     break
                     When = {GRP03_TXT}
                        let #CountryPos = {GRP03}
                     break
                     When = {GRP04_TXT}
                        let #CountryPos = {GRP04}
                     break
                     When = {GRP06_TXT}
                        let #CountryPos = {GRP06}
                     break
                     When = {GRP08_TXT}
                        let #CountryPos = {GRP08}
                     break
                     When = {GRP09_TXT}
                        let #CountryPos = {GRP09}
                     break
                     When = {GRP10_TXT}
                        let #CountryPos = {GRP10}
                     break
                     When = {GRP13_TXT}
                        let #CountryPos = {GRP13}
                     break
                     When-Other
                        let #CountryPos = {GRP16}
                     break
                     end-evaluate
                  end-if
               end-if
            end-if
         end-if
      end-if
   end-if

   do IsApprentice(&B.EMPLID, &C.EMPL_RCD, $Result)
   do Get-Employee-Category(&B.EMPLID, &C.EMPL_RCD, $EECat)
   if rtrim($Result, ' ') <> ''
      let $EECat = $Result
   else
      if rtrim($EECat, ' ') = ''
         let $EECat = {N_A_TXT}
      end-if
   end-if

   do Get-Year(&B.BIRTHDATE, #YearOfBirth)

   if &B.SEX = 'M'
      let #SexPos = {MALE}
   else
      if &B.SEX = 'F'
         let #SexPos = {FEMALE}
      end-if
   end-if

   evaluate $EECat
   When = {APP_TXT}
      let #CategoryPos = {APP}
   break
   When = {ONQ_TXT}
      let #CategoryPos = {ONQ}
   break
   When = {OQU_TXT}
      let #CategoryPos = {OQU}
   break
   When = {EMP_TXT}
      let #CategoryPos = {EMP}
   break
   When = {AGM_TXT}
      let #CategoryPos = {AGM}
   break
   When = {CAD_TXT}
      let #CategoryPos = {CAD}
   break
   When = {N_A_TXT}
      let #CategoryPos = {N_A}
   break
   end-Evaluate

   array-add 1 to Frame1(#SexPos) Category(#CategoryPos)

   if #Done = {FALSE}
      evaluate #YearOfBirth
      When <= 1940
         let #YearPos = {BEFORE_1940}
      break
      When <= 1955
         let #YearPos = {BEFORE_1955}
      break
      When <= 1970
         let #YearPos = {BEFORE_1970}
      break
      When-Other
         let #YearPos = {BEFORE_TODAY}
      break
      end-evaluate

      if #SexPos = {FEMALE}
         array-add 1 to Frame2(#CountryPos) Female(#YearPos)
         array-add 1 to Frame3(17) Category(#CategoryPos)
         array-add 1 to Frame2(16) Female(#YearPos)
      else
         array-add 1 to Frame2(#CountryPos) Male(#YearPos)
         array-add 1 to Frame3(16) Category(#CategoryPos)
         array-add 1 to Frame2(16) Male(#YearPos)
      end-if

      array-add 1 to Frame3(#CountryPos) Category(#CategoryPos)
   end-if

FROM
PS_PERSONAL_DT_FST B
,PS_JOB C
,PS_JOBCODE_TBL F
,PS_REG_REGION_TBL R

WHERE
C.EMPLID = B.EMPLID
AND C.EMPL_RCD = [$PRIM_JOB_CLAUSE]
AND C.ESTABID = $ESTABID
AND C.REG_REGION = R.REG_REGION
AND R.COUNTRY = $RegRegion
AND F.SETID = C.SETID_JOBCODE
AND F.JOBCODE = C.JOBCODE
AND C.ACTION NOT IN ([$ACTIONSTRING])
AND C.EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
AND C.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
AND C.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT = C.EFFDT
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
AND F.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOBCODE_TBL
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND SETID = F.SETID
 AND JOBCODE = F.JOBCODE
)
AND F.EFF_STATUS = 'A'
AND C.EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
ORDER BY B.BIRTHDATE
END-SELECT

end-procedure Workforce-By-Nationality

!***********************************************************************
!  Retrieves Citizenship of Employee
!***********************************************************************

begin-procedure Citizenship-Retrieve($Emplid, :$Country)

   let $Country_tmp = ''
   let $Country = ''
   let $Citizenship_status = ''

BEGIN-SELECT
Z.COUNTRY      &Z.COUNTRY
Z.CITIZENSHIP_STATUS    &Z.CITIZENSHIP_STATUS

   let $Country_tmp = &Z.COUNTRY
   let $Citizenship_status = &Z.CITIZENSHIP_STATUS

   if  $Country_tmp = 'FRA'
      if $Citizenship_status = '1' or $Citizenship_status = '5' or $Citizenship_status = ' '
         let $Country = $Country_tmp      ! French citizenship
      end-if
   end-if

   if  $Country_tmp <> 'FRA' and $Country <> 'FRA'
      let $Country = $Country_tmp
   end-if

   display  $Emplid
   display ' $Country_tmp : ' noline
   display $Country_tmp
   display ' $Country : ' noline
   display $Country
   display ''

FROM
PS_CITIZENSHIP Z
WHERE Z.EMPLID = $Emplid
END-SELECT

end-procedure Citizenship-Retrieve

!***********************************************************************
!  Determine if the Employee is an Apprentice
!***********************************************************************

begin-procedure IsApprentice($Emplid, #Empl_Rcd, :$Result)

let $Result = ''

BEGIN-SELECT
A.CONTRACT_TYPE  &A.CONTRACT_TYPE

   let $Result = &A.CONTRACT_TYPE

FROM PS_CNT_ACTIVE_VW A
,PS_JOB B
WHERE A.CONTRACT_TYPE = 'APP'
AND A.EMPLID = $Emplid
AND A.EMPLID = B.EMPLID
AND B.CONTRACT_NUM = A.CONTRACT_NUM
AND B.EMPL_RCD = #Empl_rcd
AND B.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND EMPLID = B.EMPLID
 AND EMPL_RCD = B.EMPL_RCD
)
AND B.EFFSEQ =
(
 SELECT MAX(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT = B.EFFDT
 AND EMPLID = B.EMPLID
 AND EMPL_RCD = B.EMPL_RCD
)
END-SELECT

end-procedure IsApprentice

!***********************************************************************
!  Retrieves The category of an Employee
!***********************************************************************

begin-procedure Get-Employee-Category($Emplid, #Empl_Rcd, :$EECat)

BEGIN-SELECT
D.CATEGORY_2483_FRA  &D.CATEGORY_2483_FRA

   let $EECat = &D.CATEGORY_2483_FRA

FROM PS_JOB C
,PS_EMPL_CTG_L1 D
WHERE
C.EMPLID  = $Emplid
AND D.LABOR_AGREEMENT = C.LABOR_AGREEMENT
AND D.EMPL_CTG = C.EMPL_CTG
AND D.SETID = C.SETID_LBR_AGRMNT
AND D.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_EMPL_CTG_L1
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND SETID =  D.SETID
 AND LABOR_AGREEMENT = D.LABOR_AGREEMENT
 AND EMPL_CTG = D.EMPL_CTG
)
AND D.EFF_STATUS = 'A'
AND C.EMPL_RCD = #Empl_Rcd
AND C.EFFSEQ =
(
 SELECT MIN(EFFSEQ)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
)
AND C.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_JOB
 WHERE EFFDT <= {DATEIN-PREFIX}$AsOfDate{DATEIN-SUFFIX}
 AND EMPLID = C.EMPLID
 AND EMPL_RCD = C.EMPL_RCD
 AND EFFSEQ = C.EFFSEQ
)
!AND C.EFF_STATUS = 'A'
END-SELECT
end-procedure Get-Employee-Category

!***********************************************************************
!  Get the year of a date
!***********************************************************************

begin-procedure Get-Year($DateIn, :#Year)
move 0 to #Year
   if not IsNull($DateIn)
      do Convert-To-DTU-Date($DateIn, $DTUDateIn)
      do dtu-parse-date($DTUDateIn, #Year, #unused, #unused)
   end-if
end-procedure Get-Year($DateIn, :#Year)

!***********************************************************************
!  Determine if a Country is in a specified group of countries
!***********************************************************************

begin-procedure Is-In-Country-Group($Country, $Group, $DateSearch, :#Result)
let #Result = {FALSE}
BEGIN-SELECT
Y.COUNTRY   &Y.COUNTRY

   let #Result = {TRUE}

FROM PS_COUNTRY_GRP Y
,PS_COUNTRY_DEF YY
WHERE YY.GROUP_NAME = Y.GROUP_NAME
AND Y.COUNTRY = $Country
AND Y.GROUP_NAME = $Group
AND YY.EFFDT = Y.EFFDT
AND YY.EFFDT =
(
 SELECT MAX(EFFDT)
 FROM PS_COUNTRY_DEF
 WHERE EFFDT <= {DATEIN-PREFIX}$DateSearch{DATEIN-SUFFIX}
 AND GROUP_NAME = YY.GROUP_NAME
)
AND YY.EFF_STATUS = 'A'
END-SELECT
end-procedure  Is-In-Country-Group

!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

   do Get_Field_Information($ReportID, 'TITLE1'        , $TITLE1_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE2'        , $TITLE2_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE3'        , $TITLE3_LBL        , #DW)
   do Get_Field_Information($ReportID, 'TITLE4'        , $TITLE4_LBL        , #DW)
   do Get_Field_Information($ReportID, 'SIRET_CD'      , $SIRET_CD_LBL      , #DW)
   do Get_Field_Information($ReportID, 'APE_CD'        , $APE_CD_LBL        , #DW)
   do Get_Field_Information($ReportID, 'ESTAB_NAME'    , $ESTAB_NAME_LBL    , #DW)
   do Get_Field_Information($ReportID, 'ADDRESS'       , $ADDRESS_LBL       , #DW)
   do Get_Field_Information($ReportID, 'POSTAL'        , $POSTAL_LBL        , #DW)
   do Get_Field_Information($ReportID, 'CITY'          , $CITY_LBL          , #DW)


   do Get_Field_Information($ReportID, 'SEX'           , $SEX_LBL           , #DW)
   do Get_Field_Information($ReportID, 'APP'           , $APP_LBL           , #DW)
   do Get_Field_Information($ReportID, 'OQU1'          , $OQU1_LBL          , #DW)
   do Get_Field_Information($ReportID, 'OQU2'          , $OQU2_LBL          , #DW)
   do Get_Field_Information($ReportID, 'ONQ1'          , $ONQ1_LBL          , #DW)
   do Get_Field_Information($ReportID, 'EMP'           , $EMP_LBL           , #DW)
   do Get_Field_Information($ReportID, 'AGM1'          , $AGM1_LBL          , #DW)
   do Get_Field_Information($ReportID, 'AGM2'          , $AGM2_LBL          , #DW)
   do Get_Field_Information($ReportID, 'AGM3'          , $AGM3_LBL          , #DW)
   do Get_Field_Information($ReportID, 'CAD'           , $CAD_LBL           , #DW)
   do Get_Field_Information($ReportID, 'NOT_AVAILABLE' , $NOT_AVAILABLE_LBL , #DW)
   do Get_Field_Information($ReportID, 'TOTAL'         , $TOTAL_LBL         , #DW)

   do Get_Field_Information($ReportID, 'NATIONALITY'   , $NATIONALITY_LBL   , #DW)
   do Get_Field_Information($ReportID, 'MEN'           , $MEN_LBL           , #DW)
   do Get_Field_Information($ReportID, 'WOMEN'         , $WOMEN_LBL         , #DW)
   do Get_Field_Information($ReportID, 'OLDNESS'       , $OLDNESS_LBL       , #DW)

   do Get_Field_Information($ReportID, 'BEFORE_1940_1'  , $BEFORE_1940_1_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_1940_2'  , $BEFORE_1940_2_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_1955_1'  , $BEFORE_1955_1_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_1955_2'  , $BEFORE_1955_2_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_1970_1'  , $BEFORE_1970_1_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_1970_2'  , $BEFORE_1970_2_LBL , #DW)
   do Get_Field_Information($ReportID, 'BEFORE_TODAY_1' , $BEFORE_TODAY_1_LBL, #DW)
   do Get_Field_Information($ReportID, 'BEFORE_TODAY_2' , $BEFORE_TODAY_2_LBL, #DW)

   do Get_Field_Information($ReportID, 'L02'            , $L02_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L03'            , $L03_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L04'            , $L04_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L05'            , $L05_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L06'            , $L06_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L07'            , $L07_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L08'            , $L08_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L09'            , $L09_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L10'            , $L10_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L11'            , $L11_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L12'            , $L12_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L13'            , $L13_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L14'            , $L14_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L15'            , $L15_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L16'            , $L16_LBL          , #DW)
   do Get_Field_Information($ReportID, 'L17'            , $L17_LBL          , #DW)

end-procedure Get-Translat-Info


!***********************************************************************
!  Gets the actions for selects in this report
!***********************************************************************


begin-procedure get-action-grp

move '''' to $ActionString

BEGIN-SELECT

A.ACTION 

    move &A.ACTION to $Action
    do Build-action-string
FROM
PS_ACTION_DTL_FRA A
WHERE GROUP_ID = 'REG03'
END-SELECT
   
   concat '''' with $ActionString




end-procedure get-action-grp

begin-procedure Build-action-string
  if $ActionString  <> ''''
    concat ''',''' with $ActionString
  end-if
  concat $Action with $ActionString

end-procedure


!***********************************************************************


#include 'hrctlfra.sqc'  !Get run control parameter values
#include 'hrgetfra.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'
#Include 'getprimj.sqc'  !Routines for selecting EE's primary job

