!***********************************************************************
!  TAX950: Produce 1042-S Forms (paper or electronic file)
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2012/10/01:11:46:29                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872695                                              !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'   ! set environment
#include 'usarpt.sqc'   ! NID_COUNTRY defined

begin-setup

#include 'pfrm1042.sqc' ! 1042 Form Layout selection
                        ! Edit this file to direct output to printer
#include 'setupdb.sqc'               ! Database specific setup

#ifdef TAXTEST

#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-LP
  init-string=<27>E<27>(10U<27>&l0O<27>&l6D<27>&l0E<27>&l80F<27>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#else
  declare-printer DEFAULT-LP
  init-string=<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif
#else
  declare-printer DEFAULT-LP
  init-string=<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif

#endif

#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-LP
!  init-string=<27>E<27>&l0L
  end-declare
 !              |     !--> Perforation Skip
 !              --> Reset
  declare-printer DEFAULT-HP
  end-declare
#else
  declare-printer DEFAULT-LP
  init-string=<39>E<39>&l0L
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif
#else
  declare-printer DEFAULT-LP
  init-string=<39>E<39>&l0L
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif

end-setup

!***********************************************************************
begin-report
  do Init-Report

  if $Cont_Process = 'Y'
      if $Parm_Align_Only = 'Y'
        if #Parm_Align_Count = 0
          let #Parm_Align_Count = 1
        end-if

        do Printer-Alignment
      else
        if #Parm_Align_Count <> 0
          do Printer-Alignment
        end-if

        do Process-1042S-Company
        do Reset
      end-if
  end-if

  do Stdapi-Term
end-report


!***********************************************************************
begin-procedure Init-Report
  move 'TAX950' to $ReportID
  move '1042-S Print and Magnetic Media File' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Parameters

let $Def_Form_Layout = 'None'

#ifdef Layout-LSR01
  if $Def_Form_Layout = 'None'
      let $Def_Form_Layout = 'L'
      let $Process_Layout = 'LSR01'
  else
      let $Def_Form_Layout = 'Error'
  end-if
#endif

#ifdef Layout-LSR03UP
  if $Def_Form_Layout = 'None'
      let $Def_Form_Layout = 'P'
      let $Process_Layout = 'LSR03UP'
  else
      let $Def_Form_Layout = 'Error'
  end-if
#endif

#ifdef Layout-LPS3V
  if $Def_Form_Layout = 'None'
      let $Def_Form_Layout = 'V'
      let $Process_Layout = 'LPS3V'
  else
      let $Def_Form_Layout = 'Error'
  end-if
#endif

  let $Cont_Process = 'N'
  if $Parm_Media = 'P'
      if $Def_Form_Layout = 'Error'
          display ' '
          display '*** Multiple Form Layout defined.'
          display '    Follow instructions in program PFRM1042.SQC to define 1042-S Form Layout.'
          display ' '
      else
          if $Def_Form_Layout = 'None'
              display '*** Form Layout not defined.'
              display '    Follow instructions in program PFRM1042.SQC to define 1042-S Form Layout.'
              display ' '
          else
              if $Def_Form_Layout <> $Parm_Form_ID
                  display '*** Defined Form Layout does not match with run control parameters.'
                  display '    Form Layout = ' noline
                  display $Process_Layout noline
                  display ' and Run Control Parameter = ' noline
                  evaluate $Parm_Form_ID
                    when = 'L'
                           display 'LSR01'
                           break
                    when = 'P'
                           display 'LSR03UP'
                           break
                    when = 'V'
                           display 'LPS3V'
                           break
                    when-other
                           display 'not defined'
                  end-evaluate
                  display '    Follow instructions in program PFRM1042.SQC to define 1042-S Form Layout.'
                  display ' '

                  let $Parm_Form_ID = $Def_Form_Layout
              end-if

              let $Cont_Process = 'Y'
          end-if
      end-if
  else
      let $Cont_Process = 'Y'
  end-if

  let $Filler = ' '

  ! define a "carriage return" character
  let $CR = chr(13)
  ! define a "line feed" character
  let $LF = chr(10)

  let $CRLF = $CR || $LF
  let $CRLF = ' '

  ! #Q_ counts are the count of Q records written to the file (Reconciliation Record (C)), Or
  ! the count of the number of 1042-S forms printed.  These figures are used on the control report
  let #Q_Count = 0
  let #Q_Gross = 0
  let #Q_Tax   = 0

  ! #W_ count is the count of W records written to the file (End of Transmission Record (F))
  let #W_Count = 0

  evaluate $Parm_Form_ID
    when = 'L'
           do Alter-Printer-LSR01
           let #MaxForm = 2
           break
    when = 'P'
           do Alter-Printer-LSR03UP
           let #MaxForm = 1
           break
    when = 'V'
           do Alter-Printer-LPS3V
           let #MaxForm = 1
           break
    when-other
           break
  end-evaluate

  Create-array name=Company_Total  Size = 100
        field=Company:Char
        field=CompanyName:Char
        field=FormCount:Number
        field=GrossIncome:Number
        field=Taxes:Number

  Create-array name=1042Detail  Size = 2
        field=IncomeCode:Char
        field=GrossIncome:Number
        field=WithholdingAllw:Number
        field=NetIncome:Number
        field=TaxRate:Number
        field=ExemptCode:Char
        field=FedTaxAmt:Number
        field=RefundAmt:Number
        field=FederalEIN:Char
        field=RecipientTIN:Char
        field=CompanyName:Char
        field=CompanyAddress1:Char
        field=CompanyAddress2:Char
        field=CompanyCity:Char
        field=CompanyState:Char
        field=CompanyPostal:Char
        field=RecipientResCountry:Char
        field=RecipientCountryCode:Char
        field=RecipientName:Char
        field=RecipientAddress1:Char
        field=RecipientAddress2:Char
        field=RecipientCity:Char
        field=RecipientState:Char
        field=RecipientCountry:Char
        field=RecipientPostal:Char
        field=StateIncomeTax:Number
        field=StateTaxNumber:Char
        field=StateName:Char

  Clear-Array name=Company_Total
  Clear-Array name=1042Detail

end-procedure


!***********************************************************************
! Procedure:  Get-Parameters
! Description:
!   This routine gets the run control parameters and formats them
!   as required.
!***********************************************************************
begin-procedure Get-Parameters
  if $Prcs_Process_Instance = ''
    input $Parm_Tax_Year 'Enter Year, e.g. 1990'
    input $Parm_Company  'Enter Company Code (use "ALL" to run for all companies'
    input $Parm_Transmitter -
      'Enter Transmitter Code (leave blank unless ALL specified for Company)'
    input $Parm_TTC maxlen=5 'Enter transmitter control code'
    input $Parm_Media 'Enter Media (P for paper copy, E for electronic file)'
    input $Parm_Diskette_Type 'Enter the diskette type (0, 1, 2 or 3)'
    input $Parm_Mode 'Enter the run mode (N for normal, C for correction, V for void)'
    input $Parm_Emplid 'Enter the employee ID to report on (may be left blank)'
    input $Parm_Align_Only 'Enter Print Alignment Only Option (Y/N)'
    input $Parm_Align_Count 'Enter Number of Alignment Pages Required'
    let #Parm_Align_Count = $Parm_Align_Count
    input $Parm_Form_ID 'Enter 1042-S Form ID Option (L(LSR01)/P(LSR03UP)/V(LPS3V))'
    input $Parm_Final_Run 'Enter Final Run Option (Y/N)'
    input $Parm_Test_Run 'Enter Test Run Option (Y/N)'
    input $Parm_All_Empl 'Enter Process All Employees Option (Y/N)'
  else
    do Select-Parameters

    move #RC_TAX1042.Tax_Year           to $Parm_Tax_Year
    move $RC_TAX1042.Company            to $Parm_Company
    move $RC_TAX1042.Transmitter        to $Parm_Transmitter
    move $RC_TAX1042.Transmit_Cntrl_Cod to $Parm_TTC
    move $RC_TAX1042.Media_1042         to $Parm_Media
    move $RC_TAX1042.Diskette_Type      to $Parm_Diskette_Type
    move $RC_TAX1042.Emplid             to $Parm_Emplid
    move $RC_TAX1042.Mode_For_1042S     to $Parm_Mode
    move $RC_TAX1042.Align_Only         to $Parm_Align_Only
    move #RC_TAX1042.Align_Count        to #Parm_Align_Count
    move $RC_TAX1042.Form_ID            to $Parm_Form_ID
    move $RC_TAX1042.Final_Run          to $Parm_Final_Run
    move $RC_TAX1042.Test_Run           to $Parm_Test_Run
    if $RC_TAX1042.Reg_Select_Proc = 'R'
        let $Parm_All_Empl = 'Y'
    else
        let $Parm_All_Empl = 'N'
    end-if
  end-if

  move $Parm_Tax_Year to #Parm_Tax_Year
  let  $Tax_Year  = #Parm_Tax_Year

  if $Parm_Company = 'ALL'
    let $Company_Where = ''
    let $NRA_Company_Where = ''
  else
    let $Company_Where = 'AND COM.COMPANY = ''' || $Parm_Company || ''' '
    let $NRA_Company_Where = 'AND NRA.COMPANY = ''' || $Parm_Company || ''' '
    let $Parm_Transmitter = $Parm_Company
  end-if

  if $Parm_All_Empl = 'N'
    let $Employee_Where =  'AND RC1.OPRID = ''' || $Prcs_OprID || ''' ' ||
                           'AND RC1.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID || ''' ' ||
                           'AND RC1.EMPLID = EMP.EMPLID'

    let $NRA_Employee_Where =  'AND RC2.OPRID = ''' || $Prcs_OprID || ''' ' ||
                               'AND RC2.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID || ''' ' ||
                               'AND RC2.EMPLID = NRA.EMPLID'

    let $EMP1042_Employee_Where =  'AND RC3.OPRID = ''' || $Prcs_OprID || ''' ' ||
                                   'AND RC3.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID || ''' ' ||
                                   'AND RC3.EMPLID = EMP1042.EMPLID'

    let $Employee_Rec = ', PS_RC_TAX1042_EMPL RC1'
    let $NRA_Employee_Rec = ', PS_RC_TAX1042_EMPL RC2'
    let $EMP1042_Employee_Rec = ', PS_RC_TAX1042_EMPL RC3'
  else
    let $Employee_Where = ''
    let $NRA_Employee_Where = ''
    let $EMP1042_Employee_Where = ''

    let $Employee_Rec = ''
    let $NRA_Employee_Rec = ''
    let $EMP1042_Employee_Rec = ''
  end-if

  evaluate $Parm_Mode
     when = 'N'
          let $Media_Rtn_Mode = '0'
          break
     when = 'C'
          let $Media_Rtn_Mode = '1'
          break
     when-other
          let $Media_Rtn_Mode = '0'
  end-evaluate

  if $Parm_Align_Only = ' '
    let $Parm_Align_Only = 'N'
  end-if

  if $Parm_Form_ID = ' '
    let $Parm_Form_ID = 'I'
  end-if

  if $Parm_Final_Run = ' '
    let $Parm_Final_Run = 'N'
  end-if

  evaluate $Parm_Final_Run
     when = 'Y'
          let $Media_Final_Run = '1'
          break
     when-other
          let $Media_Final_Run = '0'
  end-evaluate

  if $Parm_Test_Run = ' '
    let $Parm_Test_Run = 'N'
  end-if

  evaluate $Parm_Test_Run
     when = 'Y'
          let $Media_Test_Run = 'TEST'
          break
     when-other
          let $Media_Test_Run = '    '
  end-evaluate

end-procedure

!***********************************************************************
! Procedure:  Printer-Alignment
! Description:
!***********************************************************************
begin-procedure Printer-Alignment

  let #AlignPageCnt = 0
  evaluate $Parm_Form_ID
    when = 'L'
           do Printer-Alignment-LSR01
           break
    when = 'P'
           do Printer-Alignment-LSR03UP
           break
    when = 'V'
           do Printer-Alignment-LPS3V
           break
    when-other
           break
  end-evaluate

end-procedure

!***********************************************************************
! Procedure:  Printer-Alignment-LSR01
! Description:
!***********************************************************************
begin-procedure Printer-Alignment-LSR01

  while #AlignPageCnt < #Parm_Align_Count

    let #Line1 = 1
    do Printer-Align-Page-LSR01

    let #Line1 = 45
    do Printer-Align-Page-LSR01

    new-page
    add 1   to #AlignPageCnt
  end-while

end-procedure

!***********************************************************************
! Procedure:  Printer-Alignment-LSR03UP
! Description:
!***********************************************************************
begin-procedure Printer-Alignment-LSR03UP

  while #AlignPageCnt < #Parm_Align_Count

    let $FormSection = 'B'
    let #Line1 = 1
    do Printer-Align-Page-LSR03UP

    let $FormSection = 'D'
    let #Line1 = 35
    do Printer-Align-Page-LSR03UP

    let $FormSection = 'C'
    let #Line1 = 69
    do Printer-Align-Page-LSR03UP

    new-page
    add 1   to #AlignPageCnt
  end-while

end-procedure

!***********************************************************************
! Procedure:  Printer-Alignment-LPS3V
! Description:
!***********************************************************************
begin-procedure Printer-Alignment-LPS3V

  while #AlignPageCnt < #Parm_Align_Count

    let $FormSection = 'B'
    let #Line1 = 1
    do Printer-Align-Page-LPS3V

    let $FormSection = 'D'
    let #Line1 = 31
    do Printer-Align-Page-LPS3V

    let $FormSection = 'C'
    let #Line1 = 62
    do Printer-Align-Page-LPS3V

    let #Line1 = 95
    do Printer-Align-Page-LPS3V-Addr

    new-page
    add 1   to #AlignPageCnt
  end-while

end-procedure


!***********************************************************************
! Procedure:  Printer-Align-Page-LSR01
! Description:
!***********************************************************************
begin-procedure Printer-Align-Page-LSR01

  let $Align_Amt1 = '999,999,999'
  let $Align_Amt2 = '999,999'
  let $Align_Char = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'

  let #Line2 = #Line1
  print 'X'           (#Line2,24)


  let #Line2 = #Line1 + 2
  print '99.99'       (#Line2,69)
  print $Align_Amt1   (#Line2,103)

  let #Line2 = #Line1 + 3
  print $Align_Amt1   (#Line2,103)

  let #Line2 = #Line1 + 4
  print 'XX'          (#Line2, 1)
  print $Align_Amt1   (#Line2, 8)
  print $Align_Amt2   (#Line2,26)
  print $Align_Amt1   (#Line2,37)
  print 'XX'          (#Line2,71)
  print $Align_Amt1   (#Line2,103)

  let #Line2 = #Line1 + 6
  print 'XXXXXXXXXXXXXXXXXXXX' (#Line2,90)

  let #Line2 = #Line1 + 7
  print $Align_Amt1   (#Line2,28)
  print 'X'           (#Line2,64)


  let #Line2 = #Line1 + 9
  print 'XXXXXXXXX'   (#Line2,30)

  let #Line2 = #Line1 + 10
  print 'X'                         (#Line2,4)
  print 'XXXXXXXXXXXXXXXXXXXXXXXXX' (#Line2,64)
  print 'XX'                        (#Line2,108)

  let #Line2 = #Line1 + 12
  let #Line3 = #Line1 + 15
  let #Line4 = #Line1 + 18
  print $Align_Char   (#Line2, 2)
  print $Align_Char   (#Line3, 2)
  print $Align_Char   (#Line4, 2)

  let #Line2 = #Line1 + 20
  print $Align_Char   (#Line2, 2)


  let #Line2 = #Line1 + 23
  print 'XXXXXXXXXXXXXXXXXXXXXXXXXX'  (#Line2, 2)    !Recipient's name (26 chars)
  print 'XX'                          (#Line2,47)

  let #Line3 = #Line1 + 26
  let #Line4 = #Line1 + 28
  let #Line5 = #Line1 + 31
  print $Align_Char   (#Line3, 2)
  print $Align_Char   (#Line4, 2)
  print $Align_Char   (#Line5, 2)
  print $Align_Amt1   (#Line5, 64)

  do Change-Pitch-LSR01
  print 'XXXXXXXXXXXXXXXXXX' (#Line5,84)

  do Alter-Printer-LSR01
  print 'XXXXXX'               (#Line5,110)

end-procedure


!***********************************************************************
! Procedure:  Printer-Align-Page-LSR03UP
! Description:
!***********************************************************************
begin-procedure Printer-Align-Page-LSR03UP

  do Setup-LSR03UP-Lines

  let $Align_Amt1 = '999,999,999'
  let $Align_Amt2 = '999,999'
  let $Align_Char = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'

  print 'X'           (#Line1a, 29)
  print '99.99'       (#Line2a, 80)
  print $Align_Amt1   (#Line2a,117)
  print $Align_Amt1   (#Line2b,117)
  print 'XX'          (#Line2c,  1)
  print $Align_Amt1   (#Line2c,  9)
  print $Align_Amt2   (#Line2c, 37)
  print $Align_Amt1   (#Line2c, 50)
  print 'XX'          (#Line2c, 82)
  print $Align_Amt1   (#Line2c,117)

  print $Align_Char   (#Line3a,  1)
  print $Align_Amt1   (#Line3a, 62)
  print 'XXXXXXXXXX'  (#Line4a, 85)
  print $Align_Char   (#Line4b,  1)
  print 'X'           (#Line4b, 65)
  print 'XXXXXXXXXX'  (#Line5a, 87)
  print $Align_Char   (#Line5b,  1)
  print 'X'           (#Line5b, 65)
  print $Align_Char   (#Line6a,  1)
  print 'XXXXXXXXXXXXXXXXXXXX' (#Line6a,62)
  print 'XX'          (#Line6a,112)

  print $Align_Char   (#Line7a,  1)
  print 'XX'          (#Line7a, 49)
  print $Align_Char   (#Line8a,  1)
  print $Align_Char   (#Line9a,  1)
  print $Align_Char   (#Line10a, 1)
  print $Align_Char   (#Line11a, 1)
  print $Align_Char   (#Line12a, 1)
  print $Align_Amt1   (#Line12a,62)
  print 'XXXXXXXXXXXXXXXXXX'   (#Line12a,87)
  print 'XXXXXX'               (#Line12a,115)

end-procedure

!***********************************************************************
! Procedure:  Printer-Align-Page-LPS3V
! Description:
!***********************************************************************
begin-procedure Printer-Align-Page-LPS3V

  do Setup-LPS3V-Lines

  let $Align_Amt1 = '999,999,999'
  let $Align_Amt2 = '999,999'
  let $Align_Char = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'

  do Change-Pitch-LPS3V
  print 'X'           (#Line1a,25)

  do Alter-Printer-LPS3V
  print 'XX'          (#Line2a, 8)
  print $Align_Amt1   (#Line2a,17)
  print $Align_Amt2   (#Line2a,34)
  print $Align_Amt1   (#Line2a,47)
  print '99.99'       (#Line2a,68)
  print 'XX'          (#Line2a,81)
  print $Align_Amt1   (#Line2a,90)
  print $Align_Amt1   (#Line2a,113)


  print $Align_Amt1   (#Line3b,12)
  print $Align_Amt1   (#Line3b,43)


  print 'XXXXXXXXXXXXXXXXXXXX' (#Line3a,94)
  print 'XXXXXXXXX'   (#Line4a,33)

  do Change-Pitch-LPS3V
  print 'X'           (#Line3b,72)
  print 'X'           (#Line4b,10)

  do Alter-Printer-LPS3V
  print 'XXXXXXXXXXXXXXXXXXXXXXXXX' (#Line4b,69)
  print 'XX'                        (#Line4b,120)
  print 'XX'                        (#Line9a,57)

  do Change-Pitch-LPS3V
  print $Align_Char            (#Line5a,  8)
  print $Align_Char            (#Line6a,  8)
  print $Align_Char            (#Line7a,  8)
  print $Align_Char            (#Line8a,  8)

  print $Align_Char            (#Line9a,  8)
  print $Align_Char            (#Line10a, 8)
  print $Align_Char            (#Line11a, 8)
  print $Align_Char            (#Line12a, 8)

  print 'XXXXXXXXXXXXXXXXXX'   (#Line12a,93)

  do Alter-Printer-LPS3V
  print $Align_Amt1            (#Line12a,69)
  print 'XXXXXX'               (#Line12a,116)

end-procedure

!***********************************************************************
! Procedure:  Printer-Align-Page-LPS3V-Addr
! Description:
!***********************************************************************
begin-procedure Printer-Align-Page-LPS3V-Addr

  let $Align_Char = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'

  do Change-Pitch-LPS3V

  let #Line2 = #Line1 + 2
  let #Line3 = #Line1 + 3
  let #Line4 = #Line1 + 4
  let #Line5 = #Line1 + 5
  let #Line6 = #Line1 + 6
  print $Align_Char   (#Line2, 14)
  print $Align_Char   (#Line3, 14)
  print $Align_Char   (#Line4, 14)
  print $Align_Char   (#Line5, 14)
  print 'XXXXXXXXXXXXXXXXXXXX' (#Line6, 14)

  do Change-Pitch-LPS3V-Addr

  let #Line2 = #Line1 + 14
  let #Line3 = #Line1 + 16
  let #Line4 = #Line1 + 17
  let #Line5 = #Line1 + 18
  let #Line6 = #Line1 + 19
  let #Line7 = #Line1 + 20
  print $Align_Char   (#Line2, 50)
  print $Align_Char   (#Line3, 50)
  print $Align_Char   (#Line4, 50)
  print $Align_Char   (#Line5, 50)
  print $Align_Char   (#Line6, 50)
  print 'XXXXXXXXXXXXXXXXXXXX' (#Line7, 50)

  do Alter-Printer-LPS3V

end-procedure

!***********************************************************************
! Procedure:  Setup-LSR03UP-Lines
! Description:
!***********************************************************************
begin-procedure Setup-LSR03UP-Lines

  evaluate $FormSection
      when = 'B'
          let #Line1a  = #Line1
          let #Line2a  = #Line1 + 1
          let #Line2b  = #Line1 + 3
          let #Line2c  = #Line1 + 4
          let #Line3a  = #Line1 + 7
          let #Line4a  = #Line1 + 8
          let #Line4b  = #Line1 + 9
          let #Line5a  = #Line1 + 11
          let #Line5b  = #Line1 + 12
          let #Line6a  = #Line1 + 14
          let #Line7a  = #Line1 + 16
          let #Line8a  = #Line1 + 19
          let #Line9a  = #Line1 + 21
          let #Line10a = #Line1 + 23
          let #Line11a = #Line1 + 26
          let #Line12a = #Line1 + 28
          break
      when = 'D'
          let #Line1a  = #Line1
          let #Line2a  = #Line1 + 2
          let #Line2b  = #Line1 + 3
          let #Line2c  = #Line1 + 5
          let #Line3a  = #Line1 + 7
          let #Line4a  = #Line1 + 9
          let #Line4b  = #Line1 + 10
          let #Line5a  = #Line1 + 11
          let #Line5b  = #Line1 + 12
          let #Line6a  = #Line1 + 14
          let #Line7a  = #Line1 + 17
          let #Line8a  = #Line1 + 19
          let #Line9a  = #Line1 + 21
          let #Line10a = #Line1 + 24
          let #Line11a = #Line1 + 26
          let #Line12a = #Line1 + 28
          break
      when = 'C'
          let #Line1a  = #Line1
          let #Line2a  = #Line1 + 2
          let #Line2b  = #Line1 + 3
          let #Line2c  = #Line1 + 5
          let #Line3a  = #Line1 + 8
          let #Line4a  = #Line1 + 9
          let #Line4b  = #Line1 + 10
          let #Line5a  = #Line1 + 11
          let #Line5b  = #Line1 + 12
          let #Line6a  = #Line1 + 15
          let #Line7a  = #Line1 + 17
          let #Line8a  = #Line1 + 19
          let #Line9a  = #Line1 + 22
          let #Line10a = #Line1 + 24
          let #Line11a = #Line1 + 27
          let #Line12a = #Line1 + 28
          break
  end-evaluate

end-procedure

!***********************************************************************
! Procedure:  Setup-LPS3V-Lines
! Description:
!***********************************************************************
begin-procedure Setup-LPS3V-Lines

  evaluate $FormSection
      when = 'B'
          let #Line1a  = #Line1 + 1
          let #Line2a  = #Line1 + 3
          let #Line3a  = #Line1 + 4
          let #Line3b  = #Line1 + 5
          let #Line4a  = #Line1 + 7
          let #Line4b  = #Line1 + 8
          let #Line5a  = #Line1 + 10
          let #Line6a  = #Line1 + 12
          let #Line7a  = #Line1 + 15
          let #Line8a  = #Line1 + 17
          let #Line9a  = #Line1 + 19
          let #Line10a = #Line1 + 22
          let #Line11a = #Line1 + 24
          let #Line12a = #Line1 + 26
          break
      when = 'D'
          let #Line1a  = #Line1 + 2
          let #Line2a  = #Line1 + 4
          let #Line3a  = #Line1 + 6
          let #Line3b  = #Line1 + 7
          let #Line4a  = #Line1 + 8
          let #Line4b  = #Line1 + 9
          let #Line5a  = #Line1 + 12
          let #Line6a  = #Line1 + 14
          let #Line7a  = #Line1 + 16
          let #Line8a  = #Line1 + 19
          let #Line9a  = #Line1 + 21
          let #Line10a = #Line1 + 23
          let #Line11a = #Line1 + 26
          let #Line12a = #Line1 + 28
          break
      when = 'C'
          let #Line1a  = #Line1 + 3
          let #Line2a  = #Line1 + 5
          let #Line3a  = #Line1 + 7
          let #Line3b  = #Line1 + 8
          let #Line4a  = #Line1 + 9
          let #Line4b  = #Line1 + 10
          let #Line5a  = #Line1 + 12
          let #Line6a  = #Line1 + 15
          let #Line7a  = #Line1 + 17
          let #Line8a  = #Line1 + 19
          let #Line9a  = #Line1 + 22
          let #Line10a = #Line1 + 24
          let #Line11a = #Line1 + 26
          let #Line12a = #Line1 + 29
          break
  end-evaluate

end-procedure

!***********************************************************************
! Procedure:  Process-1042S-Company
! Description:
!***********************************************************************
begin-procedure Process-1042S-Company

   let $Data_to_Report = 'N'
   do Find-Elig-Records

   if $Data_to_Report = 'Y'

       if $Parm_Media = 'E'
           do Write-T-Record
       end-if

       let $First_Company = 'Y'
       let #Comp_Cnt = 0

       do Process-1042S

       if $Parm_Media = 'E'
           do Write-F-Record
       end-if
   end-if

   do Print-Control-Report  ! this will be printed on a new page

end-procedure


!***********************************************************************
! Procedure:  Process-1042S
! Description:
!***********************************************************************
begin-procedure Process-1042S

begin-SELECT DISTINCT
COM.COMPANY

   if $First_Company = 'Y'
       let $First_Company = 'N'
       let #FormCnt = 0
   else
       if $Parm_Media = 'E'
           if $1042S_Found = 'Y'
               do Write-C-Record
           end-if
       else
           do Print-Form
           let #FormCnt = 0
       end-if

       Put $Proc_Company
           $Company_Name
           #Q_Count
           #Q_Gross
           #Q_Tax
       Into Company_Total(#Comp_Cnt)
            Company
            CompanyName
            FormCount
            GrossIncome
            Taxes

       add 1 to #Comp_Cnt
   end-if

   let $1042S_Found = 'N'
   let $Company_Search = &COM.COMPANY
   do Get-Company-Data

   let $PrepareRec = 'W'
   do Get-Contact-Info

   let $Proc_Company = &COM.COMPANY
   do Find-1042S

   if $Parm_Media = 'E' and $1042S_Found = 'Y'
       do Write-W-Record
   end-if

   ! reset totals
   let #Q_Count = 0
   let #Q_Gross = 0
   let #Q_Tax   = 0

   if $1042S_Found = 'Y'
       do Process-1042S-Employee
   end-if

FROM PS_TAX1042_BALANCE COM
WHERE COM.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND COM.BALANCE_YEAR = #PARM_TAX_YEAR
  AND COM.STATE        = '$U'
  AND (COM.TAX_1042_YTD <> 0 OR COM.TXGRS_1042_YTD <> 0 OR COM.WH_ALLOW_YTD <> 0 OR COM.TAX1042_REFUND <> 0)
[$Company_Where]
ORDER BY COM.COMPANY
end-SELECT

   if $Parm_Media = 'E'
       if $1042S_Found = 'Y'
           do Write-C-Record
       end-if
   else
       do Print-Form
       let #FormCnt = 0
   end-if

   Put $Proc_Company
       $Company_Name
       #Q_Count
       #Q_Gross
       #Q_Tax
   Into Company_Total(#Comp_Cnt)
        Company
        CompanyName
        FormCount
        GrossIncome
        Taxes

   add 1 to #Comp_Cnt

end-procedure


!***********************************************************************
! Procedure:  Process-1042S-Employee
! Description:
!***********************************************************************
begin-procedure Process-1042S-Employee

begin-SELECT DISTINCT
EMP.EMPLID

   let $Proc_EmplID = &EMP.EMPLID
   do Get-Employee-Data

   let $State_For_Withholdings = ''
   let $State_Tax_Number       = ''
   let #State_Tax_Withholdings = 0

   do Check-For-Federal-Withholdings
   if $W2_Produced = 'N'
       do Get-State-Withholdings
   end-if

   do Get-State-NRAlien-Withholdings

   do Process-1042S-Spec-Country

   do Process-1042S-Data

FROM PS_TAX1042_BALANCE EMP [$Employee_Rec]
WHERE EMP.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND EMP.BALANCE_YEAR = #PARM_TAX_YEAR
  AND EMP.STATE        = '$U'
  AND EMP.COMPANY      = $Proc_Company
  AND (EMP.TAX_1042_YTD <> 0 OR EMP.TXGRS_1042_YTD <> 0 OR EMP.WH_ALLOW_YTD <> 0 OR EMP.TAX1042_REFUND <> 0)
[$Employee_Where]
ORDER BY EMP.EMPLID
end-SELECT

end-procedure

!***********************************************************************
! Procedure:  Process-1042S-Spec-Country
! Description:
!***********************************************************************
begin-procedure Process-1042S-Spec-Country


   let #Hold_TxGrs_1042_YTD = 0
   let #Hold_WH_Allow_YTD   = 0
   let #Hold_Tax_1042_YTD   = 0
   let #Hold_Tax1042_Refund = 0
   let $First_Record        = 'Y'
   let $Save_Country        = $Default_Country

begin-SELECT
SC.COUNTRY
SC.INCOME_CD_1042
SC.TXGRS_1042_YTD
SC.WH_ALLOW_YTD
SC.TAX_1042_YTD
SC.TAX_RT
SC.EXEMPT_CD_1042
SC.TAX1042_REFUND

   if $First_Record = 'Y'
       let $First_Record = 'N'

       let $Save_Income_Cd_1042 = &SC.INCOME_CD_1042
       let #Save_Tax_Rt         = &SC.TAX_RT
       let $Save_Exempt_Cd_1042 = &SC.EXEMPT_CD_1042

   else
       if    &SC.INCOME_CD_1042 <> $Save_Income_Cd_1042
          or &SC.TAX_RT         <> #Save_Tax_Rt
          or &SC.EXEMPT_CD_1042 <> $Save_Exempt_Cd_1042

              do Format-Data

              if $Parm_Media = 'P'
                  do Store-Form
              else
                  do Write-Q-Record
              end-if

           let $Save_Income_Cd_1042 = &SC.INCOME_CD_1042
           let #Save_Tax_Rt         = &SC.TAX_RT
           let $Save_Exempt_Cd_1042 = &SC.EXEMPT_CD_1042

           let #Hold_TxGrs_1042_YTD = 0
           let #Hold_WH_Allow_YTD   = 0
           let #Hold_Tax_1042_YTD   = 0
           let #Hold_Tax1042_Refund = 0
       end-if
   end-if

   let #Hold_TxGrs_1042_YTD = #Hold_TxGrs_1042_YTD + &SC.TXGRS_1042_YTD
   let #Hold_WH_Allow_YTD   = #Hold_WH_Allow_YTD   + &SC.WH_ALLOW_YTD
   let #Hold_Tax_1042_YTD   = #Hold_Tax_1042_YTD   + &SC.TAX_1042_YTD
   let #Hold_Tax1042_Refund = #Hold_Tax1042_Refund + &SC.TAX1042_REFUND

FROM PS_TAX1042_BALANCE SC
WHERE SC.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND SC.BALANCE_YEAR = #PARM_TAX_YEAR
  AND SC.STATE        = '$U'
  AND SC.COMPANY      = $Proc_Company
  AND SC.EMPLID       = $Proc_Emplid
  AND (SC.COUNTRY  LIKE '$%' OR SC.COUNTRY = $Default_Country)
  AND SC.BALANCE_PERIOD = (SELECT MAX(SC2.BALANCE_PERIOD)
                   FROM PS_TAX1042_BALANCE SC2
                  WHERE SC2.EMPLID         = SC.EMPLID
                    AND SC2.COMPANY        = SC.COMPANY
                    AND SC2.BALANCE_YEAR   = SC.BALANCE_YEAR
                    AND SC2.BALANCE_ID     = SC.BALANCE_ID
                    AND SC2.STATE          = SC.STATE
                    AND SC2.COUNTRY        = SC.COUNTRY
                    AND SC2.INCOME_CD_1042 = SC.INCOME_CD_1042
                    AND SC2.TAX_RT         = SC.TAX_RT)
  AND (SC.TAX_1042_YTD <> 0 OR SC.TXGRS_1042_YTD <> 0 OR SC.WH_ALLOW_YTD <> 0 OR SC.TAX1042_REFUND <> 0)
ORDER BY SC.INCOME_CD_1042,
         SC.TAX_RT,
         SC.EXEMPT_CD_1042,
         SC.COUNTRY
end-SELECT

   if $First_Record = 'N'
       do Format-Data
       if $Parm_Media = 'P'
           do Store-Form
       else
           do Write-Q-Record
       end-if
   end-if

end-procedure

!***********************************************************************
! Procedure:  Process-1042S-Data
! Description:
!***********************************************************************
begin-procedure Process-1042S-Data

   let $Save_Country      = ' '

begin-SELECT
A.COUNTRY
A.INCOME_CD_1042
A.TXGRS_1042_YTD
A.WH_ALLOW_YTD
A.TAX_1042_YTD
A.TAX_RT
A.EXEMPT_CD_1042
A.TAX1042_REFUND

   let $Save_Country        = &A.COUNTRY
   let $Save_Income_Cd_1042 = &A.INCOME_CD_1042
   let #Hold_TxGrs_1042_YTD = &A.TXGRS_1042_YTD
   let #Hold_WH_Allow_YTD   = &A.WH_ALLOW_YTD
   let #Hold_Tax_1042_YTD   = &A.TAX_1042_YTD
   let #Save_Tax_Rt         = &A.TAX_RT
   let $Save_Exempt_Cd_1042 = &A.EXEMPT_CD_1042
   let #Hold_Tax1042_Refund = &A.TAX1042_REFUND

   do Format-Data

   if $Parm_Media = 'P'
       do Store-Form
   else
       do Write-Q-Record
   end-if

FROM PS_TAX1042_BALANCE A
WHERE A.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND A.BALANCE_YEAR = #PARM_TAX_YEAR
  AND A.STATE        = '$U'
  AND A.COMPANY      = $Proc_Company
  AND A.EMPLID       = $Proc_Emplid
  AND (A.COUNTRY  NOT LIKE '$%' AND A.COUNTRY <> $Default_Country)
  AND A.BALANCE_PERIOD = (SELECT MAX(A2.BALANCE_PERIOD)
                   FROM PS_TAX1042_BALANCE A2
                  WHERE A2.EMPLID         = A.EMPLID
                    AND A2.COMPANY        = A.COMPANY
                    AND A2.BALANCE_YEAR   = A.BALANCE_YEAR
                    AND A2.BALANCE_ID     = A.BALANCE_ID
                    AND A2.STATE          = A.STATE
                    AND A2.COUNTRY        = A.COUNTRY
                    AND A2.INCOME_CD_1042 = A.INCOME_CD_1042
                    AND A2.TAX_RT         = A.TAX_RT)
  AND (A.TAX_1042_YTD <> 0 OR A.TXGRS_1042_YTD <> 0 OR A.WH_ALLOW_YTD <> 0 OR A.TAX1042_REFUND <> 0)
ORDER BY A.COUNTRY,
         A.INCOME_CD_1042,
         A.TAX_RT
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Store-Form
! Description:
!   This procedure stores all data (required on the form print) into
!   an array. Call Print-Form procedure to print the form when current
!   index is greater than the maximum allowed.
!***********************************************************************
begin-procedure Store-Form

  if #FormCnt = #MaxForm
      do Print-Form
      let #FormCnt = 0
      Clear-Array name=1042Detail
  end-if

  Put $Save_Income_Cd_1042
      #Hold_TxGrs_1042_YTD
      #Withholding_Amt
      #Net_Income
      #Save_Tax_Rt
      $Exempt_Code
      #Hold_Tax_1042_YTD
      #Hold_Tax1042_Refund
      $Federal_EIN
      $R_TIN
      $Company_Name
      $Company_Address1
      $Company_Address2
      $Company_City
      $Company_State
      $Company_Postal
      $R_Country_Name
      $R_Country_Code
      $R_Name
      $R_Address1
      $R_Address2
      $R_City
      $R_State
      $R_Rpt_Country_Name
      $R_PostalCode
      #State_Tax_Withholdings
      $State_Tax_Number
      $State_For_Withholdings
  Into 1042Detail(#FormCnt)
       IncomeCode
       GrossIncome
       WithholdingAllw
       NetIncome
       TaxRate
       ExemptCode
       FedTaxAmt
       RefundAmt
       FederalEIN
       RecipientTIN
       CompanyName
       CompanyAddress1
       CompanyAddress2
       CompanyCity
       CompanyState
       CompanyPostal
       RecipientResCountry
       RecipientCountryCode
       RecipientName
       RecipientAddress1
       RecipientAddress2
       RecipientCity
       RecipientState
       RecipientCountry
       RecipientPostal
       StateIncomeTax
       StateTaxNumber
       StateName

  add 1 to #FormCnt

  ! totals for control report
  add 1 to #Q_Count
  let #Gross_Income    = round(#Hold_TxGrs_1042_YTD,0)
  let #Tax_Amt         = round(#Hold_Tax_1042_YTD,0)
  if #Gross_Income > 0
     add #Gross_Income to #Q_Gross
  end-if
  if #Tax_Amt > 0
     add #Tax_Amt      to #Q_Tax
  end-if

end-procedure

!***********************************************************************
! Procedure:  Print-Form
! Description:
!   This procedure prints out all data onto the form.
!***********************************************************************
begin-procedure Print-Form

  let #FormIdx = 0
  while #FormIdx < #FormCnt
        Get  $Prt_Income_Code
             #Prt_Gross_Income
             #Prt_Withholding_Allowance
             #Prt_Net_Income
             #Prt_Tax_Rate
             $Prt_Exempt_Code
             #Prt_Tax_Amount
             #Prt_Refund_Amount
             $Prt_Federal_EIN
             $Prt_R_TIN
             $Prt_Company_Name
             $Prt_Company_Addr1
             $Prt_Company_Addr2
             $Prt_Company_City
             $Prt_Company_State
             $Prt_Company_Postal
             $Prt_R_Exempt_Country
             $Prt_R_Exempt_Country_Code
             $Prt_R_Name
             $Prt_R_Addr1
             $Prt_R_Addr2
             $Prt_R_City
             $Prt_R_State
             $Prt_R_Country
             $Prt_R_Postal
             #Prt_State_Income_Tax
             $Prt_State_Tax_Number
             $Prt_State_Name
        from 1042Detail(#FormIdx)
             IncomeCode
             GrossIncome
             WithholdingAllw
             NetIncome
             TaxRate
             ExemptCode
             FedTaxAmt
             RefundAmt
             FederalEIN
             RecipientTIN
             CompanyName
             CompanyAddress1
             CompanyAddress2
             CompanyCity
             CompanyState
             CompanyPostal
             RecipientResCountry
             RecipientCountryCode
             RecipientName
             RecipientAddress1
             RecipientAddress2
             RecipientCity
             RecipientState
             RecipientCountry
             RecipientPostal
             StateIncomeTax
             StateTaxNumber
             StateName

        let #Prt_Gross_Income          = round(#Prt_Gross_Income,0)
        let #Prt_Withholding_Allowance = round(#Prt_Withholding_Allowance,0)
        let #Prt_Net_Income            = round(#Prt_Net_Income,0)
        let #Prt_Tax_Amount            = round(#Prt_Tax_Amount,0)
        let #Prt_Refund_Amount         = round(#Prt_Refund_Amount,0)
        let #Prt_State_Income_Tax      = round(#Prt_State_Income_Tax,0)

        if #Prt_Gross_Income < 0
            let #Prt_Gross_Income = 0
        end-if
        if #Prt_Withholding_Allowance < 0
            let #Prt_Withholding_Allowance = 0
        end-if
        if #Prt_Net_Income < 0
            let #Prt_Net_Income = 0
        end-if
        if #Prt_Tax_Amount < 0
            let #Prt_Tax_Amount = 0
        end-if
        if #Prt_Refund_Amount < 0
            let #Prt_Refund_Amount = 0
        end-if
        if #Prt_State_Income_Tax < 0
            let #Prt_State_Income_Tax = 0
        end-if

    ! set box 9 (total withholding credit) to be the same as box 7 (Fed tax withheld)
        let #Prt_Total_Tax_Credit = #Prt_Tax_Amount


        let $Prt_Company_CityState = ''
        if $Prt_Company_City <> ''
            let $Prt_Company_CityState = $Prt_Company_City || ','
        end-if
        if $Prt_Company_State <> ''
            let $Prt_Company_CityState = $Prt_Company_CityState || $Prt_Company_State || ','
        end-if
        let #Len = length($Prt_Company_CityState)
        if #Len > 0
            let $Prt_Company_CityState = substr($Prt_Company_CityState, 1, #Len - 1)
        end-if

        if $Prt_Company_Postal <> ''
           let $Prt_Company_CityState_Postal = $Prt_Company_CityState || ' ' || $Prt_Company_Postal
        else
           let $Prt_Company_CityState_Postal = $Prt_Company_CityState
        end-if

        let $Prt_R_CityStateCountry = ''
        if $Prt_R_City <> ''
            let $Prt_R_CityStateCountry = $Prt_R_City || ','
        end-if
        if $Prt_R_State <> ''
            let $Prt_R_CityStateCountry = $Prt_R_CityStateCountry || $Prt_R_State || ','
        end-if
        if $Prt_R_Country <> ''
            let $Prt_R_CityStateCountry = $Prt_R_CityStateCountry || $Prt_R_Country || ','
        end-if
        let #Len = length($Prt_R_CityStateCountry)
        if #Len > 0
            let $Prt_R_CityStateCountry = substr($Prt_R_CityStateCountry, 1, #Len - 1)
        end-if

        if $Prt_R_Postal <> ''
           let $Prt_R_CityStateCountry_Postal = $Prt_R_CityStateCountry || ' ' || $Prt_R_Postal
        else
           let $Prt_R_CityStateCountry_Postal = $Prt_R_CityStateCountry
        end-if

        let #Prt_Tax_Rate = #Prt_Tax_Rate * 100
        evaluate $Parm_Form_ID
           when = 'L'
                if #FormIdx = 0
                    let #Line1 = 1
                else
                    let #Line1 = 45
                end-if
                let $Prt_R_Name  = substr($Prt_R_Name,1,30)  !maximum space for recipient name
                do Print-Form-LSR01
                break
           when = 'P'
                let $Prt_R_Name  = substr($Prt_R_Name,1,40)  !maximum space for recipient name
                let $FormSection = 'B'
                let #Line1 = 1
                do Print-Form-LSR03UP

                let $FormSection = 'D'
                let #Line1 = 35
                do Print-Form-LSR03UP

                let $FormSection = 'C'
                let #Line1 = 69
                do Print-Form-LSR03UP
                break
           when = 'V'
                let $Prt_R_Name_Addr =  $Prt_R_Name          !Reserve the whole name for mailing address
                let $Prt_R_Name  = substr($Prt_R_Name,1,40)  !maximum space for recipient name
                let $FormSection = 'B'
                let #Line1 = 1
                do Print-Form-LPS3V

                let $FormSection = 'D'
                let #Line1 = 31
                do Print-Form-LPS3V

                let $FormSection = 'C'
                let #Line1 = 62
                do Print-Form-LPS3V

                let #Line1 = 95
                do Print-Form-LPS3V-Addr
                break
           when-other
                break
        end-evaluate

        add 1 to #FormIdx
  end-while

  if #FormCnt > 0
      new-page
  end-if

end-procedure


!***********************************************************************
! Procedure:  Print-Form-LSR01
!***********************************************************************
begin-procedure Print-Form-LSR01

  evaluate $Parm_Mode
      when = 'C'
           let #Line2 = #Line1
           print 'X'           (#Line2,24)   ! AMENDED check box
           break
      when-other
           break
  end-evaluate

  let #Line2 = #Line1 + 2
  print #Prt_Tax_Rate    (#Line2, 69)  edit 09.99
  print #Prt_Tax_Amount  (#Line2,103)  edit 999,999,999

  let #Line2 = #Line1 + 4
  print $Prt_Income_Code               (#Line2,  1)
  print #Prt_Gross_Income              (#Line2,  8)  edit 999,999,999

  if #Prt_Withholding_Allowance <> 0
      print #Prt_Withholding_Allowance (#Line2, 26)  edit 999,999
  end-if
  if #Prt_Net_Income <> 0
      print #Prt_Net_Income            (#Line2, 37)  edit 999,999,999
  end-if

  print $Prt_Exempt_Code               (#Line2, 71)

! Box 8 (withholding by other agents) not supported, leave it as blank spaces
  print #Prt_Total_Tax_Credit  (#Line2,103)  edit 999,999,999

  let #Line2 = #Line1 + 6
  print $Prt_R_TIN        (#Line2,90)

  let #Line2 = #Line1 + 7
  if #Prt_Refund_Amount <> 0
      print #Prt_Refund_Amount     (#Line2,28)  edit 999,999,999
  end-if
  print 'X'           (#Line2,64)  ! SSN or ITIN check box

  let #Line2 = #Line1 + 9
  print $Prt_Federal_EIN  (#Line2,30)

  let #Line2 = #Line1 + 10
  print 'X'                         (#Line2,4)    ! Withholding Agent's EIN check box
! Box 15 - leave as blank spaces
  print $Prt_R_Exempt_Country_Code  (#Line2,108)

  let #Line2 = #Line1 + 12
  let #Line3 = #Line1 + 15
  let #Line4 = #Line1 + 18
  print $Prt_Company_Name      (#Line2, 2)
  print $Prt_Company_Addr1     (#Line3, 2)
  print $Prt_Company_Addr2     (#Line4, 2)

  let #Line2 = #Line1 + 20
  print $Prt_Company_CityState_Postal   (#Line2, 2)

  let #Line2 = #Line1 + 23
  print $Prt_R_Name         (#Line2, 2)    ! Recipient's name
  print '01'                (#Line2,47)    ! Recipient Code

  let #Line3 = #Line1 + 26
  let #Line4 = #Line1 + 28
  let #Line5 = #Line1 + 31
  print $Prt_R_Addr1                     (#Line3, 2)
  print $Prt_R_Addr2                     (#Line4, 2)
  print $Prt_R_CityStateCountry_Postal   (#Line5, 2)

  if #Prt_State_Income_Tax > 0
      print #Prt_State_Income_Tax  (#Line5, 64)  edit 999,999,999

      do Change-Pitch-LSR01
      print $Prt_State_Tax_Number  (#Line5, 84)

      do Alter-Printer-LSR01
      print $Prt_State_Name        (#Line5, 110)
  end-if

end-procedure

!***********************************************************************
! Procedure:  Print-Form-LSR03UP
!***********************************************************************
begin-procedure Print-Form-LSR03UP

  do Setup-LSR03UP-Lines
  evaluate $Parm_Mode
      when = 'C'
           print 'X'                   (#Line1a,29)   ! AMENDED check box
           break
      when-other
           break
  end-evaluate

  print #Prt_Tax_Rate                  (#Line2a,80)   edit 09.99
  print #Prt_Tax_Amount                (#Line2a,117)  edit 999,999,999
  print $Prt_Income_Code               (#Line2c, 1)
  print #Prt_Gross_Income              (#Line2c, 9)   edit 999,999,999
  if #Prt_Withholding_Allowance <> 0
      print #Prt_Withholding_Allowance (#Line2c,37)   edit 999999
  end-if
  if #Prt_Net_Income <> 0
      print #Prt_Net_Income            (#Line2c,50)   edit 999,999,999
  end-if
  print $Prt_Exempt_Code               (#Line2c,82)
! Box 8 (withholding by other agents) not supported, leave it as blank spaces
  print #Prt_Total_Tax_Credit          (#Line2c,117)  edit 999,999,999

  print $Prt_Company_Name      (#Line3a,  1)
  if #Prt_Refund_Amount <> 0
      print #Prt_Refund_Amount (#Line3a, 62)  edit 999,999,999
  end-if

  print $Prt_Federal_EIN       (#Line4a, 85)
  print $Prt_Company_Addr1     (#Line4b,  1)
  print 'X'                    (#Line4b, 65)  ! Withholding Agent's EIN check box
  print $Prt_R_TIN             (#Line5a, 87)
  print $Prt_Company_Addr2     (#Line5b,  1)
  print 'X'                    (#Line5b, 65) ! SSN or ITIN check box

  print $Prt_Company_CityState_Postal   (#Line6a, 1)
! Box 15 - leave as blank spaces
  print $Prt_R_Exempt_Country_Code      (#Line6a,112)
  print $Prt_R_Name                     (#Line7a, 1)
  print '01'                            (#Line7a,49)  ! Recipient Code

  print $Prt_R_Addr1                    (#Line8a,  1)
  print $Prt_R_Addr2                    (#Line9a,  1)
  print $Prt_R_CityStateCountry_Postal  (#Line10a, 1)

  if #Prt_State_Income_Tax > 0
      print #Prt_State_Income_Tax  (#Line12a, 62)  edit 999,999,999
      print $Prt_State_Tax_Number  (#Line12a, 87)
      print $Prt_State_Name        (#Line12a, 115)
  end-if

end-procedure

!***********************************************************************
! Procedure:  Print-Form-LPS3V
!***********************************************************************
begin-procedure Print-Form-LPS3V

  do Setup-LPS3V-Lines
  do Change-Pitch-LPS3V

  evaluate $Parm_Mode
      when = 'C'
           print 'X'           (#Line1a,25)   ! AMENDED check box
           break
      when-other
           break
  end-evaluate

  do Alter-Printer-LPS3V

  print $Prt_Income_Code               (#Line2a,  8)
  print #Prt_Gross_Income              (#Line2a, 17)  edit 999,999,999
  if #Prt_Withholding_Allowance <> 0
      print #Prt_Withholding_Allowance (#Line2a, 34)  edit 999,999
  end-if
  if #Prt_Net_Income <> 0
      print #Prt_Net_Income            (#Line2a, 47)  edit 999,999,999
  end-if
  print #Prt_Tax_Rate                  (#Line2a, 68)  edit 09.99
  print $Prt_Exempt_Code               (#Line2a, 81)
  print #Prt_Tax_Amount                (#Line2a, 90)  edit 999,999,999
! Box 8 (withholding by other agents) not supported, leave it as blank spaces

  print $Prt_R_TIN                 (#Line3a, 94)
  print #Prt_Total_Tax_Credit      (#Line3b,12)  edit 999,999,999
  if #Prt_Refund_Amount <> 0
      print #Prt_Refund_Amount     (#Line3b,43)  edit 999,999,999
  end-if
  print $Prt_Federal_EIN           (#Line4a, 33)

  do Change-Pitch-LPS3V
  print 'X'                        (#Line3b, 72)  ! SSN or ITIN check box
  print 'X'                        (#Line4b, 10)  ! Withholding Agent's EIN check box
  do Alter-Printer-LPS3V

! Box 15 - leave as blank spaces
  print $Prt_R_Exempt_Country_Code (#Line4b,120)
  print '01'                       (#Line9a, 57)  ! Recipient Code

  do Change-Pitch-LPS3V
  print $Prt_Company_Name               (#Line5a,  8)
  print $Prt_Company_Addr1              (#Line6a,  8)
  print $Prt_Company_Addr2              (#Line7a,  8)
  print $Prt_Company_CityState_Postal   (#Line8a,  8)

  print $Prt_R_Name                     (#Line9a,  8)
  print $Prt_R_Addr1                    (#Line10a, 8)
  print $Prt_R_Addr2                    (#Line11a, 8)
  print $Prt_R_CityStateCountry_Postal  (#Line12a, 8)

  if #Prt_State_Income_Tax > 0
      print $Prt_State_Tax_Number       (#Line12a, 93)

      do Alter-Printer-LPS3V
      print #Prt_State_Income_Tax       (#Line12a, 69)  edit 999,999,999
      print $Prt_State_Name             (#Line12a,116)
  end-if

end-procedure

!***********************************************************************
! Procedure:  Print-Form-LPS3V-Addr
!***********************************************************************
begin-procedure Print-Form-LPS3V-Addr

  do Change-Pitch-LPS3V

  let #Line2 = #Line1 + 2
  let #Line3 = #Line1 + 3
  let #Line4 = #Line1 + 4
  let #Line5 = #Line1 + 5
  let #Line6 = #Line1 + 6
  print $Prt_Company_Name          (#Line2, 14)
  print $Prt_Company_Addr1         (#Line3, 14)
  print $Prt_Company_Addr2         (#Line4, 14)
  print $Prt_Company_City          (#Line5, 14)
  print $Prt_Company_State         (#Line5, 36)
  print $Prt_Company_Postal        (#Line6, 14)


  do Change-Pitch-LPS3V-Addr

  let #Line2 = #Line1 + 14
  let #Line3 = #Line1 + 16
  let #Line4 = #Line1 + 17
  let #Line5 = #Line1 + 18
  let #Line6 = #Line1 + 19
  let #Line7 = #Line1 + 20
  print $Prt_R_Name_Addr           (#Line2, 50)
  print $Prt_R_Addr1               (#Line3, 50)
  print $Prt_R_Addr2               (#Line4, 50)
  print $Prt_R_City                (#Line5, 50)
  print $Prt_R_State               (#Line5, 72)
  print $Prt_R_Country             (#Line6, 50)
  print $Prt_R_Postal              (#Line7, 50)

  do Alter-Printer-LPS3V

end-procedure

!***********************************************************************
! Procedure:  Write-T-Record
! Description:
!   This procedure writes a "T" record to the electronic file.  The "T"
!   record is the beginning-of-file record and is only written once
!   per file.
!***********************************************************************
begin-procedure Write-T-Record

  let #File_Number  = 0
  let #Record_Count = 0

  do Open-File

  let $Company_Search = $Parm_Transmitter
  do Get-Company-Data

  let $PrepareRec = 'T'
  do Get-Contact-Info

  let #Record_Seq   = 1
  move #Record_Seq   to   $Record_Seq   09999999

  write 1 from
                               ! position   length
    'T':1                      !   1-  1        1
    $Tax_Year:4                !   2-  5        4
    $Federal_EIN:9             !   6- 14        9
    $Company_Name:40           !  15- 54       40
    $Company_Address1:40       !  55- 94       40
    $Company_City:20           !  95-114       20
    $Company_Media_State:2     ! 115-116        2
    $Company_Media_Prov:2      ! 117-118        2
    $Company_Media_Country:2   ! 119-120        2
    $Company_Media_Postal:9    ! 121-129        9
    $Contact_Name:40           ! 130-169       40
    $Contact_Phone:20          ! 170-189       20
    $Parm_TTC:5                ! 190-194        5
    $Media_Test_Run:4          ! 195-198        4
    $Filler:1                  ! 199-199        1
    $Filler:611                ! 200-810      611
    $Record_Seq:8              ! 811-818        8
    $CRLF:2                    ! 819-820        2

  ! total for file size
  add 1 to #Record_Count

end-procedure


!***********************************************************************
! Procedure:  Write-W-Record
! Description:
!   This procedure writes a "W" record to the electronic file.  A "W"
!   record is a withholder agent (company) record, written once
!   per company.
!
!***********************************************************************
begin-procedure Write-W-Record

  let #Record_Seq   = #Record_Seq + 1
  move #Record_Seq   to   $Record_Seq   09999999

  write 1 from
                               ! position   length
    'W':1                      !   1-  1        1
    $Media_Rtn_Mode            !   2-  2        1
    '0':1                      !   3-  3        1   <--- Pro Rata Basis Reporting
    $Federal_EIN:9             !   4- 12        9
    '0':1                      !  13- 13        1   <--- WithHolding Agent's EIN Indicator
    $Company_Name:40           !  14- 53       40
    $Filler:40                 !  54- 93       40   <--- WithHolding Agent's Name Line 2
    $Filler:40                 !  94-133       40   <--- WithHolding Agent's Name Line 3
    $Company_Address1:40       ! 134-173       40
    $Company_Address2:40       ! 174-213       40
    $Company_City:40           ! 214-253       40
    $Company_Media_State:2     ! 254-255        2
    $Company_Media_Prov:2      ! 256-257        2
    $Company_Media_Country:2   ! 258-259        2
    $Company_Media_Postal:9    ! 260-268        9
    $Tax_Year:4                ! 269-272        4
    $Contact_Name:45           ! 273-317       45
    $Dept_Title:45             ! 318-362       45
    $Contact_Phone:20          ! 363-382       20
    $Media_Final_Run:1         ! 383-383        1
    $Filler:427                ! 384-810      427
    $Record_Seq:8              ! 811-818        8
    $CRLF:2                    ! 819-820        2

  ! total for file size
  add 1 to #Record_Count

  ! total for F record
  add 1 to #W_Count

end-procedure


!***********************************************************************
! Procedure:  Write-C-Record
! Description:
!   This procedure writes a "C" record to the electronic file.  The
!   "C" record is the Reconciliation summary record of each withholding agent.
!***********************************************************************
begin-procedure Write-C-Record

  let #Record_Seq   = #Record_Seq + 1
  move #Record_Seq   to   $Record_Seq   09999999

  let #Q_Media_Gross = round(#Q_Gross,0)
  let #Q_Media_Tax   = round(#Q_Tax,0)

  move #Q_Count        to $Q_Count        09999999
  move #Q_Media_Gross  to $Q_Media_Gross  099999999999999
  move #Q_Media_Tax    to $Q_Media_Tax    099999999999999

  write 1 from
                               ! position   length
    'C':1                      !   1-  1        1
    $Q_Count:8                 !   2-  9        8
    $Filler:6                  !  10- 15        6
    $Q_Media_Gross:15          !  16- 30       15
    $Q_Media_Tax:15            !  31- 45       15
    $Filler:765                !  46-810      765
    $Record_Seq:8              ! 811-818        8
    $CRLF:2                    ! 819-820        2

  ! total for file size
  add 1 to #Record_Count

end-procedure

!***********************************************************************
! Procedure:  Write-F-Record
! Description:
!   This procedure writes a "F" record to the electronic file.  The
!   "F" record is an end-of-file record, written only once per file.
!***********************************************************************
begin-procedure Write-F-Record

  move #W_Count to $W_Count 099
  move #File_Number to $File_Number 099

  let #Record_Seq   = #Record_Seq + 1
  move #Record_Seq   to   $Record_Seq   09999999

  write 1 from
                               ! position   length
    'F':1                      !   1-  1        1
    $W_Count:3                 !   2-  4        3
!    $File_Number:3             !   5-  7        3    !removed in 2008
    $Filler:806                !   5-810      763
    $Record_Seq:8              ! 811-818        8
    $CRLF:2                    ! 819-820        2

    close 1

end-procedure


!***********************************************************************
! Procedure:  Write-Q-Record
! Description:
!   This procedure writes a single "Q" record to the electronic file.
!   Note that some of the numbers are formatted here, as the file
!   has specific formatting requirements that are different from
!   the hard-copy form.
!***********************************************************************
begin-procedure Write-Q-Record

  ! format the dollar amounts and tax rate for output to the file

  let #Gross_Income    = round(#Hold_TxGrs_1042_YTD,0)
  let #Tax_Amt         = round(#Hold_Tax_1042_YTD,0)

  if #Gross_Income < 0
      let #Gross_Income = 0
  end-if
  if #Tax_Amt < 0
      let #Tax_Amt = 0
  end-if

  move #Gross_Income to $Gross_Income 099999999999
  move #Tax_Amt      to $Tax_Amt 099999999999

  let #Withholding_Amt = round(#Hold_WH_Allow_YTD,0)
  let #Net_Income = round(#Net_Income,0)

  if #Net_Income < 0
      let #Net_Income = 0
  end-if

  if #Withholding_Amt > 0
      move #Withholding_Amt to $Withholding_Amt 099999999999
      move #Net_Income      to $Net_Income 099999999999
  else
      let $Withholding_Amt = ' '
      let $Net_Income = ' '
  end-if

  let #Tax1042Refund = round(#Hold_Tax1042_Refund,0)
  if #Tax1042Refund > 0
      move #Tax1042Refund to $Reimbursed_Amt 099999999999
  else
      let $Reimbursed_Amt = ' '
  end-if

  let #Tax_Rt = trunc(#Save_Tax_Rt * 10000,0)
  move #Tax_Rt to $Tax_Rt 0999

  ! zero fill if no entry
  let #State_Tax_Amt = round(#State_Tax_Withholdings,0)
  if #State_Tax_Amt < 0
      let #State_Tax_Amt = 0
  end-if
  move #State_Tax_Amt to $State_Tax_Withholdings 099999999999


  !Populate US Tax Withheld Indicator

  evaluate $Save_Income_Cd_1042
    when = '15'
    when = '16'
    when = '17'
    when = '18'
    when = '19'
           let #Cal_TaxableGross = #Hold_TxGrs_1042_YTD - #Hold_WH_Allow_YTD
           break
    when-other
           let #Cal_TaxableGross = #Hold_TxGrs_1042_YTD
  end-evaluate

  let #Cal_Tax = round(#Cal_TaxableGross * #Save_Tax_Rt, 0)
  if #Cal_Tax < 0
      let #Cal_Tax = 0
  end-if

  if #Cal_Tax = #Tax_Amt
      let $US_Tax_Withheld_Ind = '0'
  else
      if #Cal_Tax < #Tax_Amt
          let $US_Tax_Withheld_Ind = '1'
      else
          let $US_Tax_Withheld_Ind = '2'
      end-if
  end-if

  let $Withholdg_Other_Agent = '000000000000'
  move $Tax_Amt    to  $Ttl_Withholding_Credit
  let $R_Foreign_Tax_ID_Nbr = '                      '

  let #Record_Seq   = #Record_Seq + 1
  move #Record_Seq   to   $Record_Seq   09999999

  ! write the Q record

  write 1 from
                               ! position   length
    'Q':1                      !   1-  1        1
    $Media_Rtn_Mode            !   2-  2        1
    '0':1                      !   3-  3        1   <--- Pro Rata Basis Reporting
    $Save_Income_Cd_1042:2     !   4-  5        2
    $Gross_Income:12           !   6- 17       12
    $Withholding_Amt:12        !  18- 29       12
    $Net_Income:12             !  30- 41       12
    $Tax_Rt:4                  !  42- 45        4
    $Exempt_Code:2             !  46- 47        2
    $R_Country_Code:2          !  48- 49        2   <--- Recipient's country of residence code for tax purposes
    $Filler:10                 !  50- 59       10   <--- Reserved
    $Reimbursed_Amt:12         !  60- 71       12   <--- Amount Repaid
    $Filler:20                 !  72- 91       20   <--- Recipient's Account Number
    '01':2                     !  92- 93        2   <--- Recipient's Code
    $R_Name:40                 !  94-133       40   <--- Recipient's Name
    $Filler:40                 ! 134-173       40   <--- Recipient's Name Line 2
    $Filler:40                 ! 174-213       40   <--- Recipient's Name Line 3
    $R_Address1:40             ! 214-253       40
    $R_Address2:40             ! 254-293       40
    $R_City:40                 ! 294-333       40
    $R_Media_State:2           ! 334-335        2
    $R_Media_Prov:2            ! 336-337        2
    $R_Media_Country:2         ! 338-339        2
    $R_FrmtPostalCode:9        ! 340-348        9
    $R_Media_TIN:9             ! 349-357        9
    '1':1                      ! 358-358        1   <--- Recipient's TIN Type
    $Tax_Amt:12                ! 359-370       12   <--- US Tax Withheld
    $Withholdg_Other_Agent:12  ! 371-382       12   <--- Withholding by Ohter Agent
    $Ttl_Withholding_Credit:12 ! 383-394       12   <--- Total Withholding Credit
    $Filler:6                  ! 395-400        6   <--- Reserved
    $Filler:40                 ! 401-440       40   <--- NQI/Flw-Thr Name Line 1
    $Filler:40                 ! 441-480       40   <--- NQI/Flw-Thr Name Line 2
    $Filler:40                 ! 481-520       40   <--- NQI/Flw-Thr Name Line 3
    $Filler:2                  ! 521-522        2   <--- Reserved
    $Filler:40                 ! 523-562       40   <--- NQI/Flw-Thr Street Line 1
    $Filler:40                 ! 563-602       40   <--- NQI/Flw-Thr Street Line 2
    $Filler:40                 ! 563-642       40   <--- NQI/Flw-Thr City
    $Filler:2                  ! 643-644        2   <--- NQI/Flw-Thr State Code
    $Filler:2                  ! 645-646        2   <--- NQI/Flw-Thr Province
    $Filler:2                  ! 647-648        2   <--- NQI/Flw-Thr Country Code
    $Filler:9                  ! 649-657        9   <--- NQI/Flw-Thr Postal Code
    $Filler:9                  ! 658-666        9   <--- NQI/Flw-Thr TIN
    $Filler:40                 ! 667-706       40   <--- Payer's Name
    $Filler:9                  ! 707-715        9   <--- Payer's TIN
    $State_Tax_Withholdings:12 ! 716-727       12
    $State_Tax_Number:10       ! 728-737       10
    $State_For_Withholdings:2  ! 738-739        2
    $Filler:21                 ! 740-760       21   <--- Special Data Entries
    $US_Tax_Withheld_Ind       ! 761-761        1
    $R_Foreign_Tax_ID_Nbr:22   ! 762-783       22   <--- Recipient's Foreign Tax ID Number
    $Filler:27                 ! 784-810       27   <--- Reserved
    $Record_Seq:8              ! 811-818        8
    $CRLF:2                    ! 819-820        2

  ! total for file size
  add 1 to #Record_Count

  ! totals for control report
  add 1 to #Q_Count
  add #Gross_Income to #Q_Gross
  add #Tax_Amt      to #Q_Tax

end-procedure


!***********************************************************************
! Procedure:  Get-Company-Data
! Description:
!   This procedure looks up data from the COMPANY table, based upon
!   the value found in $Company_Search
!***********************************************************************
begin-procedure Get-Company-Data

begin-SELECT
T.FEDERAL_EIN
T.DESCR
T.ADDRESS1
T.ADDRESS2
T.CITY
T.STATE
T.POSTAL
T.COUNTRY

  move &T.FEDERAL_EIN to $Federal_EIN 099999999
  move &T.DESCR       to $Company_Name
  move &T.ADDRESS1    to $Company_Address1
  move &T.ADDRESS2    to $Company_Address2
  move &T.CITY        to $Company_City
  move &T.STATE       to $Company_State
  move &T.POSTAL      to $Company_Postal
  move &T.COUNTRY     to $Company_Country

  let $Company_Name               = ltrim(rtrim($Company_Name, ' '),' ')
  let $Company_Address1           = ltrim(rtrim($Company_Address1, ' '),' ')
  let $Company_Address2           = ltrim(rtrim($Company_Address2, ' '),' ')
  let $Company_City               = ltrim(rtrim($Company_City, ' '),' ')
  let $Company_State              = ltrim(rtrim($Company_State, ' '),' ')
  let $Company_Postal             = ltrim(rtrim($Company_Postal, ' '),' ')
  let $Company_Country            = ltrim(rtrim($Company_Country,' '),' ')

  if &T.COUNTRY = 'USA'
      move &T.POSTAL to $Temp_Postal
      do Format-US-ZIP
      let $Company_Media_Postal = $Formatted_Postal

      move $Company_Postal  to $T.ZipExtsn ~~~~~~xxxx
      if instr($Company_Postal,'-',6) = 0
        and $T.ZipExtsn <> '    '
          let $Company_Postal = substr($Company_Postal,1,5) || '-' || substr($Company_Postal,6,4)
      end-if
  else
      let $Company_Media_Postal = '000000000'
  end-if

  if &T.COUNTRY = 'CAN'
      let $Search_Prov = $Company_State
      do Get-CANADA-Province
      let $Company_Media_Prov = $CANADA_Prov
  else
      let $Company_Media_Prov = ' '
  end-if

  if &T.COUNTRY = 'USA'
      let $Company_Media_Country = ' '
      let $Company_Media_State = $Company_State
  else
      let $Company_Media_State = ' '
      let $Search_Country = &T.COUNTRY
      do Get-Country-Data
      let $Company_Media_Country = $Country_Code_1042
  end-if

FROM PS_COMPANY_TBL T
WHERE T.COMPANY = $Company_Search
  AND T.EFFDT = (SELECT MAX(TT.EFFDT)
                   FROM PS_COMPANY_TBL TT
                  WHERE TT.COMPANY = T.COMPANY
                    AND TT.EFFDT <= $AsOfToday)
end-SELECT

end-procedure

!***********************************************************************
! Procedure:  Get-Contact-Info
! Description:
!   This procedure looks up data from the HP_1042S_PARAM table, based upon
!   the value found in $Company_Search
!***********************************************************************
begin-procedure Get-Contact-Info

begin-SELECT
C.HP_CONTACT_NM_1042
C.DEPT_TITLE
C.CONTACT_PHONE
C.CONTACT_PHONE_EXT
C.HP_USE_WH_CONTACT
C.HP_TRM_CONTACT_NM
C.HP_TRM_CONTACT_PH
C.HP_TRM_CONTACT_EXT

  if $PrepareRec = 'W' or &C.HP_USE_WH_CONTACT = 'Y'

      let $Contact_Name        = ltrim(rtrim(&C.HP_CONTACT_NM_1042,' '),' ')
      let $Dept_Title          = ltrim(rtrim(&C.DEPT_TITLE,' '),' ')
      let $Contact_Phone       = ltrim(rtrim(&C.CONTACT_PHONE, ' '),' ')
      let $Contact_Phone_Ext   = ltrim(rtrim(&C.CONTACT_PHONE_EXT, ' '),' ')
      if $Contact_Phone_Ext <> ''
          let $Contact_Phone   = $Contact_Phone || ' ext' || $Contact_Phone_Ext
      end-if
  else
      let $Contact_Name        = ltrim(rtrim(&C.HP_TRM_CONTACT_NM,' '),' ')
      let $Contact_Phone       = ltrim(rtrim(&C.HP_TRM_CONTACT_PH, ' '),' ')
      let $Contact_Phone_Ext   = ltrim(rtrim(&C.HP_TRM_CONTACT_EXT, ' '),' ')
      if $Contact_Phone_Ext <> ''
          let $Contact_Phone   = $Contact_Phone || ' ext' || $Contact_Phone_Ext
      end-if
  end-if

FROM PS_HP_1042S_PARAM C
WHERE C.COMPANY = $Company_Search
end-SELECT

end-procedure

!***********************************************************************
! Procedure:  Get-Employee-Data
! Description:
!   This procedure looks up data from PERSON_NAME, based upon procssing EMPLID.
!   It also looks in FED_TAX_DATA (based on processing EMPLID and COMPANY)
!   to see if the employee has a Taxpayer ID.  If so, this will be
!   used as the Recipient TIN (Taxpayer Identification Number); otherwise,
!   the SSN (National ID from PS_PERS_NID) is used.
!***********************************************************************
begin-procedure Get-Employee-Data

  let $R_Address1 = ''
  let $R_Address2 = ''

begin-SELECT
PER.NAME
PND.NATIONAL_ID

  let $Name     = ltrim(rtrim(&PER.NAME,' '),' ')

  Do Get-Empl-Address ($Proc_Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $ADDRESS3 = $GETADDR_Address3
   let $ADDRESS4 = $GETADDR_Address4
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL

  let $Address1 = ltrim(rtrim($ADDRESS1,' '),' ')
  let $Address2 = ltrim(rtrim($ADDRESS2,' '),' ')
  let $Address3 = ltrim(rtrim($ADDRESS3,' '),' ')
  let $Address4 = ltrim(rtrim($ADDRESS4,' '),' ')


  if $Parm_Media = 'E'
     let $R_Name   = substr($Name,1,40)
  else
     do Rotate-Name
     let $R_Name   = $Name
  end-if

  let #idx = 1
  while #idx <= 4 and $R_Address1 = ''
     evaluate #idx
        when = 1
           let $R_Address1 = $Address1
           break
        when = 2
           let $R_Address1 = $Address2
           break
        when = 3
           let $R_Address1 = $Address3
           break
        when = 4
           let $R_Address1 = $Address4
     end-evaluate
     add 1 to #idx
  end-while

  if $R_Address1 <> ''
     while #idx <= 4 and $R_Address2 = ''
        evaluate #idx
           when = 2
              let $R_Address2 = $Address2
              break
           when = 3
              let $R_Address2 = $Address3
              break
           when = 4
              let $R_Address2 = $Address4
        end-evaluate
        add 1 to #idx
     end-while
  end-if

  let $R_City    = $City
  let $R_State   = $State
  let $R_Country = $Country

  if $Country = 'USA'
      let $R_Media_Country = ' '
      let $R_Rpt_Country_Name  = 'USA'

      let $R_Media_State = $State
      let $R_Media_Prov = ' '

      let $Temp_Postal = $POSTAL
      do Format-US-ZIP
      let $R_FrmtPostalCode = $Formatted_Postal
      let $Default_Country = $Country

      let $R_PostalCode = $POSTAL
      move $R_PostalCode  to $R.ZipExtsn ~~~~~~xxxx
      if instr($R_PostalCode,'-',6) = 0
        and $R.ZipExtsn <> '    '
          let $R_PostalCode = substr($R_PostalCode,1,5) || '-' || substr($R_PostalCode,6,4)
      end-if
  else
      let $R_Media_State = ' '

      if $Country = 'CAN'
          let $Search_Prov = $State
          do Get-CANADA-Province
          let $R_Media_Prov = $CANADA_Prov
      else
          let $R_Media_Prov = ' '
      end-if

      let $Search_Country  = $Country
      do Get-Country-Data
      let $R_Rpt_Country_Name  = $Country_Name
      let $R_Media_Country     = $Country_Code_1042

      let $Search_Country = $Country
      do Get-State-Name

      let $R_PostalCode = $POSTAL
      let $Temp_Postal  = $POSTAL
      do Format-Postal
      let $R_FrmtPostalCode = $Formatted_Postal
      let $Default_Country = $COUNTRY
  end-if

FROM PS_NAMES PER, PS_PERS_NID PND
WHERE PER.EMPLID           = $Proc_EmplID
  AND PER.EMPLID           = PND.EMPLID
  AND PER.NAME_TYPE = 'PRI'
  AND PER.EFFDT =
      (SELECT MAX(PEX.EFFDT)
       FROM   PS_NAMES PEX
       WHERE  PEX.EMPLID    = PER.EMPLID
         AND  PEX.NAME_TYPE = PER.NAME_TYPE
         AND  PEX.EFFDT    <= $AsOfToday)
  AND PND.COUNTRY          = {NID_Country}
  AND PND.NATIONAL_ID_TYPE = $Payroll_NID_Type
end-SELECT

begin-SELECT
F.TAXPAYER_ID_NO
FROM PS_FED_TAX_DATA F
WHERE F.EMPLID = $Proc_EmplID
  AND F.COMPANY = $Proc_Company
  AND F.EFFDT = (SELECT MAX(F1.EFFDT)
                 FROM   PS_FED_TAX_DATA F1
                 WHERE  F1.EMPLID  = F.EMPLID
                   AND  F1.COMPANY = F.COMPANY
                   AND  F1.EFFDT  <= $AsOfToday)
end-SELECT

  let $NationalID = ltrim(rtrim(&PND.NATIONAL_ID,' '),' ')
  let $TaxPayerID = ltrim(rtrim(&F.TAXPAYER_ID_NO,' '),' ')
  let $valid_TaxPayerID = 'Y'
  do Validate-TaxPayerID

  if length($Formatted_TaxPayerID) = 0
      let $R_TIN       = $NationalID
      let $R_Media_TIN = $NationalID
  else
      if $valid_TaxPayerID = 'Y'
          let $R_TIN       = $TaxPayerID
          let $R_Media_TIN = $Formatted_TaxPayerID
      else
          let $Invalid_TIN_Msg = 'Invalid Tax Payer ID - Employee ID = ' || $Proc_EmplID ||
                                 ' Tax Payer ID = ' || $TaxPayerID
          let $R_TIN       = $NationalID
          let $R_Media_TIN = $NationalID
      end-if
  end-if

end-procedure

!***********************************************************************
! Procedure:  Find-Elig-Records
!***********************************************************************
begin-procedure Find-Elig-Records

begin-SELECT loops=1
NRA.COMPANY

  let $Data_to_Report = 'Y'

FROM PS_TAX1042_BALANCE NRA [$NRA_Employee_Rec]
WHERE NRA.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND NRA.BALANCE_YEAR = #PARM_TAX_YEAR
  AND NRA.STATE        = '$U'
  AND (NRA.TAX_1042_YTD <> 0 OR NRA.TXGRS_1042_YTD <> 0 OR NRA.WH_ALLOW_YTD <> 0 OR NRA.TAX1042_REFUND <> 0)
[$NRA_Company_Where]
[$NRA_Employee_Where]
end-SELECT

end-procedure

!***********************************************************************
! Procedure:  Find-1042S
!***********************************************************************
begin-procedure Find-1042S

begin-SELECT loops=1
EMP1042.EMPLID

  let $1042S_Found = 'Y'

FROM PS_TAX1042_BALANCE EMP1042 [$EMP1042_Employee_Rec]
WHERE EMP1042.BALANCE_ID   = $CALENDAR_YEAR_ID
  AND EMP1042.BALANCE_YEAR = #PARM_TAX_YEAR
  AND EMP1042.STATE        = '$U'
  AND EMP1042.COMPANY      = $Proc_Company
  AND (EMP1042.TAX_1042_YTD <> 0 OR EMP1042.TXGRS_1042_YTD <> 0 OR EMP1042.WH_ALLOW_YTD <> 0 OR EMP1042.TAX1042_REFUND <> 0)
[$EMP1042_Employee_Where]
end-SELECT

end-procedure

!***********************************************************************
! Procedure:  Validate-TaxPayerID
!***********************************************************************
begin-procedure Validate-TaxPayerID

  let #TIN_Length = length($TaxPayerID)
  let $Temp_TaxPayerID = ''
  let #idx = 1
  while #idx <= #TIN_Length and $valid_TaxPayerID = 'Y'
      let $CheckChar = substr($TaxPayerID, #idx, 1)
      if $CheckChar <> '-'
          if instr('0123456789',$CheckChar,1) = 0
              let $valid_TaxPayerID = 'N'
          else
              let $Temp_TaxPayerID = $Temp_TaxPayerID || $CheckChar
          end-if
      end-if
      add 1 to #idx
  end-while

  let $Formatted_TaxPayerID = $Temp_TaxPayerID

end-procedure

!***********************************************************************
! Procedure:  Format-Data
! Description:
!   This procedure formats data that is common both to the electronic
!   file and the hard-copy form.
!***********************************************************************
begin-procedure Format-Data

  if #Save_Tax_Rt = 0 or $Save_Exempt_Cd_1042 = '99'
      let $Exempt_Code   = $Save_Exempt_Cd_1042
  else
      if #Save_Tax_Rt > 0.30
          let $Exempt_Code = ' '
      else
          let $Exempt_Code = '00'
      end-if
  end-if

  if ($Save_Income_Cd_1042 = '15' or $Save_Income_Cd_1042 = '16') and #Hold_WH_Allow_YTD > 0
    let #Withholding_Amt = #Hold_WH_Allow_YTD
    let #Net_Income = #Hold_TxGrs_1042_YTD - #Hold_WH_Allow_YTD
  else
    let #Withholding_Amt = 0
    let #Net_Income      = 0
  end-if

  let $Search_Country = $Save_Country
  do Get-Country-Data
  let $R_Country_Name = $Country_Name
  let $R_Country_Code = $Country_Code_1042

end-procedure


!***********************************************************************
! Procedure:  Get-Country-Data
! Description:
!   This procedure gets the country name from the COUNTRY_TBL, based
!   upon the value of $Search_Country.
!***********************************************************************
begin-procedure Get-Country-Data

  let $Country_Name      = ' '
  let $Country_Code_1042 = 'OC'

begin-SELECT
CNTY.DESCR
CNTY2.COUNTRY_CD_1042
  move &CNTY.DESCR            to $Country_Name
  move &CNTY2.COUNTRY_CD_1042 to $Country_Code_1042
FROM PS_COUNTRY_TBL CNTY,
     PS_CNTRY_1042_TBL CNTY2
WHERE CNTY.COUNTRY = $Search_Country AND
      CNTY.COUNTRY = CNTY2.COUNTRY
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Get-CANADA-Province
! Description:
!   This procedure formats the Canadian province code according to IRS
!   standard.
!***********************************************************************
begin-procedure Get-CANADA-Province

    evaluate $Search_Prov
        when = 'AB'
        when = 'BC'
        when = 'MB'
        when = 'NB'
        when = 'NL'
        when = 'NS'
        when = 'NT'
        when = 'ON'
        when = 'PE'
        when = 'SK'
        when = 'QC'
        when = 'NU'
        when = 'YT'
             let $CANADA_Prov = $Search_Prov
             break
        when-other
             let $CANADA_Prov = ' '
    end-evaluate

end-procedure

!***********************************************************************
! Procedure:  Get-State-Name
! Description:
!   This procedure gets the state (or province) name from the
!   STATE_NAMES_TBL.
!***********************************************************************
begin-procedure Get-State-Name

let $StateName = $State

begin-SELECT
ST.DESCR
  move &ST.DESCR to $StateName
FROM PS_STATE_NAMES_TBL ST
WHERE ST.COUNTRY = $Search_Country
AND   ST.STATE   = $State
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Check-For-Federal-Withholdings
! Description:
!   This procedure looks for the most recent record in TAX_BALANCES
!   for the tax year being processed that specifies Federal withholdings.
!   If this record is not found, or is found but has a YTD_TAX amount of
!   zero or less, it means that a W2 will not be produced for that
!   employee.
!***********************************************************************
begin-procedure Check-For-Federal-Withholdings

let $W2_Produced = 'N'

begin-SELECT
FED.TAX_YTD

  if &FED.TAX_YTD > 0
    let $W2_Produced = 'Y'
  end-if

FROM PS_TAX_BALANCE FED
WHERE FED.EMPLID         = $Proc_EmplID
  AND FED.COMPANY        = $Proc_Company
  AND FED.BALANCE_ID     = $Calendar_Year_Id
  AND FED.BALANCE_YEAR   = #Parm_Tax_Year
  AND FED.STATE          = '$U'
  AND FED.TAX_CLASS      = 'H'
  AND FED.BALANCE_PERIOD = (SELECT MAX(FED2.BALANCE_PERIOD)
                   FROM PS_TAX_BALANCE FED2
                  WHERE FED2.EMPLID        = FED.EMPLID
                    AND FED2.COMPANY       = FED.COMPANY
                    AND FED2.BALANCE_ID    = FED.BALANCE_ID
                    AND FED2.BALANCE_YEAR  = FED.BALANCE_YEAR
                    AND FED2.STATE         = FED.STATE
                    AND FED2.LOCALITY      = FED.LOCALITY
                    AND FED2.TAX_CLASS     = FED.TAX_CLASS)
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Get-State-Withholdings
! Description:
!   This procedure checks in TAX_BALANCES to see if an employee has
!   state withholdings for the tax year being processed.  If so, the
!   state and withholdings amount are retrieved.
!***********************************************************************
begin-procedure Get-State-Withholdings

begin-SELECT
TAX.STATE
TAX.TAX_YTD

  let $State_For_Withholdings = &TAX.STATE
  let #State_Tax_Withholdings = &TAX.TAX_YTD
  do Get-State-Tax-Number

FROM PS_TAX_BALANCE TAX
WHERE TAX.EMPLID         = $Proc_EmplID
  AND TAX.COMPANY        = $Proc_Company
  AND TAX.BALANCE_ID     = $Calendar_Year_Id
  AND TAX.BALANCE_YEAR   = #Parm_Tax_Year
  AND TAX.STATE NOT IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
  AND TAX.LOCALITY  = ' '
  AND TAX.TAX_CLASS = 'H'
  AND TAX.BALANCE_PERIOD = (SELECT MAX(TAX2.BALANCE_PERIOD)
                   FROM PS_TAX_BALANCE TAX2
                  WHERE TAX2.EMPLID        = TAX.EMPLID
                    AND TAX2.COMPANY       = TAX.COMPANY
                    AND TAX2.BALANCE_ID    = TAX.BALANCE_ID
                    AND TAX2.BALANCE_YEAR  = TAX.BALANCE_YEAR
                    AND TAX2.STATE         = TAX.STATE
                    AND TAX2.LOCALITY      = TAX.LOCALITY
                    AND TAX2.TAX_CLASS     = TAX.TAX_CLASS)
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Get-State-NRAlien-Withholdings
! Description:
!   This procedure checks in TAX_BALANCES to see if an employee has
!   state NR Alien withholdings for the tax year being processed.  If
!   so, the state and withholdings amount are retrieved and added to the
!   state tax withholding amount.
!***********************************************************************
begin-procedure Get-State-NRAlien-Withholdings

begin-SELECT
TAX3.STATE
TAX3.TAX_YTD

  let $State_For_Withholdings = &TAX3.STATE
  add &TAX3.TAX_YTD to #State_Tax_Withholdings
  do Get-State-Tax-Number

FROM PS_TAX_BALANCE TAX3
WHERE TAX3.EMPLID         = $Proc_Emplid
  AND TAX3.COMPANY        = $Proc_Company
  AND TAX3.BALANCE_ID     = $Calendar_Year_Id
  AND TAX3.BALANCE_YEAR   = #Parm_Tax_Year
  AND TAX3.STATE NOT IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
  AND TAX3.LOCALITY  = ' '
  AND TAX3.TAX_CLASS = 'A'
  AND TAX3.BALANCE_PERIOD = (SELECT MAX(TAX4.BALANCE_PERIOD)
                   FROM PS_TAX_BALANCE TAX4
                  WHERE TAX4.EMPLID        = TAX3.EMPLID
                    AND TAX4.COMPANY       = TAX3.COMPANY
                    AND TAX4.BALANCE_ID    = TAX3.BALANCE_ID
                    AND TAX4.BALANCE_YEAR  = TAX3.BALANCE_YEAR
                    AND TAX4.STATE         = TAX3.STATE
                    AND TAX4.LOCALITY      = TAX3.LOCALITY
                    AND TAX4.TAX_CLASS     = TAX3.TAX_CLASS)
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Get-State-Tax-Number
! Description:
!   This procedure gets the state tax number of the CO_STATETAX_TBL
!   using the state found in Get-State-Withholdings
!***********************************************************************
begin-procedure Get-State-Tax-Number

begin-SELECT
CO.EMPLOYER_ID_SWT
  let $State_Tax_Number = &CO.EMPLOYER_ID_SWT
FROM PS_CO_STATETAX_TBL CO
WHERE CO.COMPANY = $Proc_Company
  AND CO.STATE   = $State_For_Withholdings
  AND CO.EFFDT = (SELECT MAX(CO2.EFFDT)
                    FROM PS_CO_STATETAX_TBL CO2
                   WHERE CO2.COMPANY = CO.COMPANY
                     AND CO2.STATE   = CO.STATE
                     AND CO2.EFFDT  <= $AsOfToday)
end-SELECT

end-procedure


!***********************************************************************
! Procedure:  Format-US-ZIP
! Description:
!   This procedure takes a US ZIP code and formats it as follows:
!     If 'aaaaa', then 'aaaaa0000'
!     If 'aaaaa-bbbb', then 'aaaaabbbb'
!     If 'aaaaabbbb', then 'aaaaabbbb' (unchanged)
!***********************************************************************
begin-procedure Format-US-ZIP

  let $Temp_Postal = rtrim($Temp_Postal,' ')
  let #Len = length($Temp_Postal)
  let #Dash = instr($Temp_Postal,'-',1)
  if #Dash > 0
    let $Part1 = substr($Temp_Postal,1,5)
    let $Part2 = substr($Temp_Postal,7,4)
  else
    if #Len = 5
      let $Part1 = $Temp_Postal
      let $Part2 = '0000'
    else
      let $Part1 = substr($Temp_Postal,1,5)
      let $Part2 = substr($Temp_Postal,6,4)
    end-if
  end-if
  let $Formatted_Postal = $Part1 || $Part2

end-procedure

!***********************************************************************
! Procedure:  Format-Postal
!***********************************************************************
begin-procedure Format-Postal

  let $Temp_Postal = rtrim($Temp_Postal,' ')
  let #Len = length($Temp_Postal)
  let #Idx = 1

  While #Idx = 1

      let #Dash = instr($Temp_Postal,'-',1)
      let #Len = length($Temp_Postal)
      if #Dash > 0
          let $Part1 = substr($Temp_Postal,1,(#Dash - 1))
          let $Part2 = substr($Temp_Postal,(#Dash + 1),(#Len - #Dash))
          let $Temp_Postal = $Part1 || $Part2
      end-if

      let #Space = instr($Temp_Postal,' ',1)
      let #Len = length($Temp_Postal)
      if #Space > 0
          let $Part1 = substr($Temp_Postal,1,(#Space - 1))
          let $Part2 = substr($Temp_Postal,(#Space + 1),(#Len - #Space))
          let $Temp_Postal = $Part1 || $Part2
      end-if

      if #Dash = 0 and #Space = 0
          let #Idx = #Idx + 1
      end-if
  End-While

  let $Formatted_Postal = $Temp_Postal

end-procedure

!***********************************************************************
! Procedure:  Open-File
! Description:
!   This procedure opens a new file for electronic output.  If
!   the number of records written to the currently open file
!   exceeds the maximum number that will fit (based upon the
!   size of the diskette), the current file will be closed and
!   a new file created, incrementing the file number by one.
!   The file number is used as the file extension.
!***********************************************************************
begin-procedure Open-File

  move 0 to #Record_Count

  add 1 to #File_Number
  move #File_Number to $File_Number 099

  #ifdef MVS
     let $FileID = '{IMPORTPREFIX}' || 'TAX1042'
  #else
     let $FileID = '{IMPORTPREFIX}' || '1042TAX'
  #end-if

  open $FileID as 1 for-writing record=820:fixed

end-procedure


!***********************************************************************
! Procedure:  Print-Control-File
! Description:
!   This procedure prints out control totals, which are used to fill
!   out Form 1042.
!***********************************************************************
begin-procedure Print-Control-Report

  display 'Control Totals for Form 1042-S'
  display '------------------------------'
  display ' '

  let $RunOptn = '('

  if $Parm_All_Empl = 'Y'
      let $RunOptn = $RunOptn || 'Process All Employees, '
  else
      let $RunOptn = $RunOptn || 'Process Selected Employees, '
  end-if

  evaluate $Parm_Mode
     when = 'N'
          let $RunOptn = $RunOptn || 'Run Mode = Normal,'
          break
     when = 'C'
          let $RunOptn = $RunOptn || 'Run Mode = Corrected,'
          break
     when-other
          let $RunOptn = $RunOptn || 'Run Mode = Normal,'
  end-evaluate

  if $Parm_Media = 'P'
      display 'Filed on Paper ' noline

      evaluate $Parm_Form_ID
          when = 'L'
               let $RunOptn = $RunOptn || ' Form ID = LSR01)'
               break
          when = 'P'
               let $RunOptn = $RunOptn || ' Form ID = LSR03UP)'
               break
          when = 'V'
               let $RunOptn = $RunOptn || ' Form ID = LPS3V)'
               break
          when-other
               let $RunOptn = $RunOptn || ' Form ID = Not Specified)'
               break
      end-evaluate
      display $RunOptn
  else
      display 'Filed Electronically ' noline

      if $Parm_Final_Run = 'Y'
          let $RunOptn = $RunOptn || ' Final Run = Yes,'
      else
          let $RunOptn = $RunOptn || ' Final Run = No,'
      end-if

      if $Parm_Test_Run = 'Y'
          let $RunOptn = $RunOptn || ' Test Run = Yes)'
      else
          let $RunOptn = $RunOptn || ' Test Run = No)'
      end-if
      display $RunOptn
  end-if

  display ' '
  display '                                            Total           Total            Total     '
  display '  Company   Name                         1042-S Filed    Gross Income    Taxes Withheld'
  display '  -------   --------------------------   ------------   --------------   --------------'

  if $Data_to_Report = 'N'
      display ' '
      display '     ** No Record to Report **'
      display ' '

  else
      let #CompIdx = 0
      while #CompIdx < #Comp_Cnt

           Get $Proc_Company
               $Company_Name
               #Q_Count
               #Q_Gross
               #Q_Tax
           From Company_Total(#CompIdx)
                Company
                CompanyName
                FormCount
                GrossIncome
                Taxes

            let $Disp_Total = '  '
            let $Proc_Company = ltrim($Proc_Company,' ')
            let $Disp_Total = $Disp_Total || substr($Proc_Company,1,3)
            let $Disp_Total = rpad($Disp_Total,12,' ')

            let $Company_Name = ltrim($Company_Name,' ')
            let $Disp_Total = $Disp_Total || substr($Company_Name,1,26)
            let $Disp_Total = rpad($Disp_Total,42,' ')

            move #Q_Count to $Q_Count 999,999,999
            move #Q_Gross to $Q_Gross 99,999,999,999
            move #Q_Tax   to $Q_Tax   99,999,999,999
            let $Disp_Total = $Disp_Total || $Q_Count || '   ' || $Q_Gross || '   ' || $Q_Tax
            display $Disp_Total

            add 1 to #CompIdx
      end-while
  end-if

end-procedure

begin-procedure Alter-Printer-LSR01

  alter-printer
    symbol-set=0U
    point-size=12
    pitch=12
    font=3

end-procedure

begin-procedure Change-Pitch-LSR01

  alter-printer
    symbol-set=0U
    point-size=12
    pitch=16
    font=3

end-procedure

begin-procedure Alter-Printer-LSR03UP

  alter-printer
    symbol-set=0U
    point-size=9
    pitch=16
    font=3

end-procedure

begin-procedure Alter-Printer-LPS3V

  alter-printer
    symbol-set=0U
    point-size=9
    pitch=16
    font=3

end-procedure

begin-procedure Change-Pitch-LPS3V

  alter-printer
    symbol-set=0U
    point-size=8
    pitch=16
    font=3

end-procedure

begin-procedure Change-Pitch-LPS3V-Addr

  alter-printer
    symbol-set=0U
    point-size=12
    pitch=16
    font=3

end-procedure

!***********************************************************************
#Include 'rotname1.sqc'  ! Rotate-Name procedure
#Include 'readxlat.sqc'  ! Read-Translate-Table procedure
#Include 'reset1.sqc'     ! Reset printer procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'datemath.sqc'  ! Routine to perform date math
#Include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Update Process API
#Include 'taxrctl1.sqc'  ! Retrieve run control parameters
#Include 'getbalid.sqc'  ! Get-Calendar-Year-Id
#Include 'getaddr.sqc'    !Get Person Current Address
