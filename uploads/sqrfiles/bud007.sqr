!***********************************************************************
!  BUD007.SQR:  Budget Export - Send Current FY to G/L                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
! Financials-PS application.                                           *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:22:39                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!  Last Modified : 13/04/00     Release 8 Upgrade                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup07.sqc'
#define  daysinyear        365
#define  colr              5
#define  deptarraymax      20
#define  poolarraymax      200
#define  jobcodearraymax   200
#define  posnarraymax      1000
#define  earnsarraymax     20
#define  dedsarraymax      20
#define  taxarraymax       20

!***********************************************************************
Begin-REPORT

   do Build-Arrays
   do Initialize

   do Mainline                          !Mainline is now in BUDEGKK.SQC
   do Table-to-File
   do Wrapup

End-REPORT

Begin-heading 6
   #include 'stdhdg08.sqc'  ! for standard heading and from/thru dates
   print '' (+1,,)
End-heading


!***********************************************************************
! Procedure: BUILD-ARRAYS                                              *
! Descr:     Builds the working arrays for department budgets          *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure BUILD-ARRAYS

! The following array is used to load department level budget data

   create-array name=Dept_Array size={deptarraymax}
                field=DASetID:Char
                field=DADeptID:Char
                field=DAEffdt:Char
                field=DACurrency_Cd:Char
                field=DADerive_Caps:Char
                field=DAOverall_Bdgt_Cap:Number
                field=DAOverall_Bdgt_Beg:Number
                field=DAErn_Bdgt_Cap:Number
                field=DAErn_Bdgt_Beg:Number
                field=DADed_Bdgt_Cap:Number
                field=DADed_Bdgt_Beg:Number
                field=DATax_Bdgt_Cap:Number
                field=DATax_Bdgt_Beg:Number

   create-array name=Pool_Array size={poolarraymax}
                field=PAPosition_Pool_ID:Char
                field=PAEffdt:Char
                field=PACurrency_Cd:Char
                field=PADerive_Caps:Char
                field=PAOverall_Bdgt_Cap:Number
                field=PAOverall_Bdgt_Beg:Number
                field=PAErn_Bdgt_Cap:Number
                field=PAErn_Bdgt_Beg:Number
                field=PADed_Bdgt_Cap:Number
                field=PADed_Bdgt_Beg:Number
                field=PATax_Bdgt_Cap:Number
                field=PATax_Bdgt_Beg:Number

   create-array name=JobCode_Array size={jobcodearraymax}
                field=JASetID_Jobcode:Char
                field=JAJobCode:Char
                field=JAEffdt:Char
                field=JACurrency_Cd:Char
                field=JADerive_Caps:Char
                field=JAOverall_Bdgt_Cap:Number
                field=JAOverall_Bdgt_Beg:Number
                field=JAErn_Bdgt_Cap:Number
                field=JAErn_Bdgt_Beg:Number
                field=JADed_Bdgt_Cap:Number
                field=JADed_bdgt_Beg:Number
                field=JATax_Bdgt_Cap:Number
                field=JATax_Bdgt_Beg:Number

   create-array name=Posn_Array size={posnarraymax}
                field=NAPosition_Nbr:Char
                field=NAEffdt:Char
                field=NACurrency_Cd:Char
                field=NADerive_Caps:Char
                field=NAOverall_Bdgt_Cap:Number
                field=NAOverall_Bdgt_Beg:Number
                field=NAErn_Bdgt_Cap:Number
                field=NAErn_Bdgt_Beg:Number
                field=NADed_Bdgt_Cap:Number
                field=NADed_Bdgt_Beg:Number
                field=NATax_Bdgt_Cap:Number
                field=NATax_bdgt_Beg:Number

   !****** Array used to store Earnings within a budget level *******
   create-array name=Earns_array size={earnsarraymax}
                field=EREarnCode:Char
                field=ERAcct_code:Char
                field=ERBudget_amt:Number
                field=ERDist_percent:Number
                field=ERBudLevel_percent:Number

   !****** Array used to store Deductions within a budget level *******
   create-array name=Deds_array size={dedsarraymax}
                field=DEDEarnCode:Char
                field=DEDAcct_code:Char
                field=DEDBudget_amt:Number
                field=DEDDist_percent:Number
                field=DEDBudLevel_percent:Number

   !****** Array used to store Tax Deductions within a budget level *******
   create-array name=Tax_array size={taxarraymax}
                field=TAXEarnCode:Char
                field=TAXAcct_code:Char
                field=TAXBudget_amt:Number
                field=TAXDist_percent:Number
                field=TAXBudLevel_percent:Number

End-Procedure BUILD-ARRAYS


!***********************************************************************
! Procedure: INITIALIZE                                                *
! Descr:     Performs the application initializations.  Formats var-   *
!            iables for use.  Calls the procedures to get input parms. *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure INITIALIZE

   do INIT-DATETIME
   do INIT-NUMBER
   do GET-CURRENT-DATETIME

   move 'BUD007.SQR' to $ReportID
   move 'Build Budget Export to G/L' to $ReportTitle
   show $ReportTitle ' ' $ThruDate

   do STDAPI-INIT

   if $prcs_process_instance = ''
      !NOTE -- PeopleSoft does not support execution of SQR programs
      !     directly from SQRW.  The call to "Ask-Parameters" is provided
      !     only to assist in debugging or program modification
      !Uncomment Prompts for SQRW development/testing ONLY!!
      do ASK-PARAMETERS
   else
      do SELECT-PARAMETERS
   end-if


   !**** Can not export to GL 7.5 if at release 8.0 of GL *****
   if $Prm_GL_RelNo >= '800'
      display ' '
      display 'G.L. Release level at or above 8.0.  Processing aborted'
      STOP QUIET
   end-if

   do SELECT-INSTALLATION

   do FETCH-GL-BUS-UNIT

   !**   Build the output file name.
   let $OpenName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'

   !**   Open the output file.
   move 0 to #filestat
   if $Add_to_File = 'Y'
      open $OpenName as 1 for-append record=274:fixed status = #filestat
   else
      open $OpenName as 1 for-writing record=274:fixed status = #filestat
      if $Budget_Run_Type = 'F'
         do DELETE-WORK-FILE-ALL
      end-if
   end-if

   !**   Check the result returned in the #filestat variable.  Stop program on error.
   if #filestat <> 0
      show ' '
      show 'Error on file open.  File is ' $OpenName
      stop              ! Halt program
   end-if

End-Procedure INITIALIZE

!***********************************************************************
! Procedure: TABLE-TO-FILE                                             *
! Descr:     Read the temporary table, summarizes the information      *
!            within each department, and writes the output file.       *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure TABLE-TO-FILE

begin-SELECT
WRK.BUSINESS_UNIT_GL
WRK.ACCT_CD
WRK.CURRENCY_CD
SUM(WRK.BUDGET_AMT) &WRK.BUDGET_AMT

   move &WRK.BUSINESS_UNIT_GL to $Out_Business_Unit
   move &WRK.ACCT_CD to $Out_Acct_Cd
!   move &WRK.DEPTID to $Out_DeptID
   move &WRK.CURRENCY_CD to $Out_Currency_Cd
   move &WRK.BUDGET_AMT to #Out_Budget_Amt

   do WRITE-BUDGETS-FILE


FROM PS_BDGT_EXPORT_WRK WRK
GROUP BY WRK.CURRENCY_CD, WRK.BUSINESS_UNIT_GL, WRK.ACCT_CD
end-SELECT

end-procedure TABLE-TO-FILE

!***********************************************************************
! Procedure: WRAPUP                                                    *
! Descr:     This paragraph ends the report process and updates the    *
!            status of the job in the process scheduler                *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure WRAPUP

   !*  Close the output file.
   close 1

   do Commit-Transaction
   do Reset
   do Successful-EOJ

End-Procedure WRAPUP


!***********************************************************************
! Procedure: ASK-PARAMETERS                                            *
! Descr:     Gets run-time parameters from the user where the program  *
!            is not executed through the process scheduler interface   *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure ASK-PARAMETERS


   input $ThruDate 'Enter THRUDATE ({Prompt-Date})' type=date

   input $Fiscal_Year maxlen=4 'Enter 4-digit FISCAL YEAR' type=integer
   let #FiscalYear = $Fiscal_Year

   input $Business_Unit maxlen=5 'Enter 5 character BUSINESS UNIT' type=char
   uppercase $Business_Unit

   input $GL_RelNo maxlen=3 'Enter 3-digit G/L release code' type=char
   let $Prm_GL_RelNo = upper(ltrim(rtrim($GL_RelNo,' '),' '))

   input $Ledger maxlen=10 'Enter Ledger (Max 10 char)' type=char
   let $Prm_Ledger = Upper($Ledger)

   input $Ledger_Group maxlen=10 'Enter Ledger Group (Max 10 char)' type=char
   let $Prm_Ledger_Group = Upper($Ledger_Group)

   input $FileName maxlen=32 'Enter export file name' type=char

   input $Run_Type maxlen=1 'Enter EXPORT RUN TYPE (F or I)' type=char
   let $Budget_Run_Type = upper(ltrim(rtrim($Run_Type,' '),' '))

   input $Add_To_File maxlen=1 'Add to existing export file (Y/N)' type=char
   let $Add_To_File = upper(ltrim(rtrim($Add_To_File,' '),' '))

   if $Business_Unit = '' or $FileName = ''
   or $Prm_Ledger = '' or $Prm_Ledger_Group = ''
   or ($Budget_Run_Type <> 'F' and $Budget_Run_Type <> 'I')
   or ($Add_To_File <> 'Y' and $Add_To_File <> 'N')
      display ' '
      display 'Program aborted at user'' request'
      stop quiet
   end-if

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Convert-To-DTU-Date($ThruDate, $ThruDate_Dtu)
   do Format-DateTime ($ThruDate, $ThruDate_Cmp, {DEFCMP},'','')


End-Procedure ASK-PARAMETERS

!***********************************************************************
! Procedure: SELECT-INSTALLATION                                       *
! Descr:     Selects necessary parameters from the installation table  *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure SELECT-INSTALLATION

Begin-SELECT
IN1.COUNTRY

   move &IN1.Country to $Gbl_Country

FROM PS_INSTALLATION IN1
End-SELECT

End-Procedure SELECT-INSTALLATION

!***********************************************************************
! Procedure: FETCH-GL-BUS-UNIT                                         *
! Descr:     Using the Business Unit parameter, this module fetches    *
!            the equivalent GL Business Unit from the cross-ref table. *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure FETCH-GL-BUS-UNIT

   move $Business_Unit to $GL_Business_Unit

   let $err-statement1 = 'BUD007, SELECT, PS_BU_GL_HR_VW, FETCH-GL-BUS-UNIT'
   let $err-statement2 = 'Business_Unit=<' || $Business_Unit || '>'

Begin-SELECT
BUNA.BUSINESS_UNIT_GL

   move &BUNA.Business_Unit_GL to $GL_Business_Unit

FROM PS_BU_GL_HR_VW BUNA
WHERE BUNA.BUSINESS_UNIT = $Business_Unit
End-SELECT

End-Procedure FETCH-GL-BUS-UNIT

!***********************************************************************
! Procedure: DELETE-WORK-FILE-ALL                                      *
! Descr:     Used to delete the entire contents of the work file       *
!            BDGT_EXPORT_WRK where the add-to-file parameter is no     *
!            and the Budget_Run_Type parameter is equal to 'F'         *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure DELETE-WORK-FILE-ALL

Begin-SQL
DELETE FROM PS_BDGT_EXPORT_WRK
End-SQL

End-Procedure DELETE-WORK-FILE-ALL

!***********************************************************************
! Procedure: WRITE-BUDGETS-FILE                                        *
! Descr:     Formats all variables to character format and writes a    *
!            record to the output ASCII file.                          *
!                                                                      *
! Called by: TABLE-TO-FILE                                             *
!***********************************************************************
begin-procedure WRITE-BUDGETS-FILE

   do FETCH-CHART-FIELDS

!  do Format-Number(#FiscalYear, $Out_Fiscal_Year, '9999')
   move #Out_Budget_Amt to #Out_Posted_Total_Amt
   do Format-Number(#Out_Posted_Total_Amt, $Out_Posted_Total_Amt, '09999999999999.99')

   move 'B' to $Out_RecordType

   move $GL_Business_unit   to $Out_Business_unit
   move $Prm_Ledger         to $Out_Ledger
   move $Prm_Ledger_Group   to $Out_Ledger_Group
   move ' '                 to $Out_Budget_Period
   move 'INITIAL   '        to $Out_Scenario
   move '   '               to $Out_Statistics_Code
   move '9999'              to $Out_Fiscal_Year
   move '001'               to $Out_Accounting_Period
   move '                 ' to $Out_Pre_Encum_Amount
   move '                 ' to $Out_Encumbered_Amount
   move '                 ' to $Out_Expended_Amount
   move '                 ' to $Out_Accrued_Amount
   move '                 ' to $Out_Collected_Amount
   move '                 ' to $Out_Posted_Base_Amt
   move $Out_Currency_Cd    to $Out_Base_Currency
   move '                              ' to $Out_Comment
   move ' ' to $F1
   move ' ' to $F2
   move ' ' to $F3
   move ' ' to $F4
   move ' ' to $F5
   move ' ' to $F6
   move ' ' to $F7
   move ' ' to $F8
   move ' ' to $F9
   move ' ' to $F10
   move ' ' to $F11
   move ' ' to $F12
   move ' ' to $F13
   move ' ' to $F14
   move ' ' to $F15
   move ' ' to $F16
   move ' ' to $F17
   move ' ' to $F18
   move ' ' to $F19
   move ' ' to $F20
   move ' ' to $F21
   move ' ' to $F22
   move ' ' to $F23

   write 1 from  $Out_RecordType:1
                 $Out_Business_Unit:5
                 $F1:1
                 $Out_Ledger:10
                 $Out_Ledger_Group:10
                 $F2:1
                 $Out_Account:6
                 $F3:1
                 $Out_Fund_Code:5
                 $F4:1
                 $Out_Deptid:10
                 $F5:1
                 $Out_Program_Code:5
                 $F6:1
                 $Out_Class_Fld:5
                 $F7:1
                 $Out_Budget_Period:8
                 $F8:1
                 $Out_Project_Id:15
                 $F9:1
                 $Out_Scenario:10
                 $F10:1
                 $Out_Currency_Cd:3
                 $F11:1
                 $Out_Statistics_Code:3
                 $F12:1
                 $Out_Fiscal_Year:4
                 $F13:1
                 $Out_Accounting_Period:3
                 $F14:1
                 $Out_Posted_Total_Amt:17
                 $F15:1
                 $Out_Pre_Encum_Amount:17
                 $F16:1
                 $Out_Encumbered_Amount:17
                 $F17:1
                 $Out_Expended_Amount:17
                 $F18:1
                 $Out_Accrued_Amount:17
                 $F19:1
                 $Out_Collected_Amount:17
                 $F20:1
                 $Out_Posted_Base_Amt:17
                 $F21:1
                 $Out_Base_Currency:3
                 $F22:1

end-procedure WRITE-BUDGETS-FILE

!***********************************************************************
! Procedure: GET-VALUES                                                *
! Descr:     Loads and formats the variables obtained through the      *
!            process scheduler interface.                              *
!                                                                      *
! Called by: SELECT-PARAMETERS                                         *
!***********************************************************************
Begin-Procedure GET-VALUES

   do Get-From-Thru-Date
   do Get-FiscalYear
   do Get-Business-Unit
   do Get-GL-Release-No
   do Get-Ledger
   do Get-Ledger-Group
   do Get-FileName
   let $Budget_Run_Type = upper(ltrim(rtrim(&RUN_CNTL_BDGT.Budget_Run_Type,' '),' '))
   let $Add_To_File = upper(ltrim(rtrim(&RUN_CNTL_BDGT.Add_To_File,' '),' '))

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Convert-To-DTU-Date($ThruDate, $ThruDate_Dtu)
   do Format-DateTime ($ThruDate, $ThruDate_Cmp, {DEFCMP},'','')

   move $Runctl_GL_Rel_no     to $Prm_Gl_RelNo
   move $Runctl_Ledger        to $Prm_Ledger
   move $Runctl_Ledger_Group  to $Prm_Ledger_Group


End-Procedure GET-VALUES

!***********************************************************************
! Procedure: FETCH-CHART-FIELDS                                        *
! Descr:     Using the output Account ID, this procedure fetches the   *
!            most current set of corresponding chart fields.           *
!                                                                      *
! Called by: WRITE-BUDGETS-FILE                                        *
!***********************************************************************
Begin-Procedure FETCH-CHART-FIELDS

   move ' '  to $Out_Account
   move ' '  to $Out_DeptID
   move ' '  to $Out_Project_ID
   move ' '  to $Out_Product
   move ' '  to $Out_Fund_Code
   move ' '  to $Out_Class_Fld
   move ' '  to $Out_Program_Code
   move ' '  to $Out_Affiliate
   move ' '  to $Out_Operating_Unit
   move ' '  to $Out_Altacct
   move ' '  to $Out_SetID

   move ' '  to $Out_Budget_Period

Begin-SELECT
ACT.ACCOUNT
ACT.DEPTID_CF
ACT.PROJECT_ID
ACT.PRODUCT
ACT.FUND_CODE
ACT.CLASS_FLD
ACT.PROGRAM_CODE
ACT.AFFILIATE
ACT.OPERATING_UNIT
ACT.ALTACCT

   move &ACT.ACCOUNT             to $Out_Account

   ! E&G FDM 75 only supports 6 character Account
   let $Out_Account = substr($Out_Account, 1, 6)

   move &ACT.DEPTID_CF           to $Out_DeptID
   move &ACT.PROJECT_ID          to $Out_Project_ID
   move &ACT.PRODUCT             to $Out_Product
   move &ACT.FUND_CODE           to $Out_Fund_Code
   move &ACT.CLASS_FLD           to $Out_Class_Fld
   move &ACT.PROGRAM_CODE        to $Out_Program_Code
   move &ACT.AFFILIATE           to $Out_Affiliate
   move &ACT.OPERATING_UNIT      to $Out_Operating_Unit
   move &ACT.ALTACCT             to $Out_Altacct

FROM PS_ACCT_CD_TBL ACT
WHERE ACT.ACCT_CD = $Out_Acct_Cd
End-SELECT

End-Procedure FETCH-CHART-FIELDS

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#include 'askaod.sqc'
#include 'btgetval.sqc'  !Formats run control parameters.
#include 'btrnctl1.sqc'  !Get Variables entered through Process Scheduler
#include 'budegkk.sqc'    !Mainline procedure shared with BUD014.SQR
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datemath.sqc'  !Routines for adding and subtracting dates
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'getactrs.sqc'  !Get action reason routine
#include 'getdptnm.sqc'  !Get department name routine
#include 'number.sqc'    !Routines to format numbers
#include 'reset.sqc'     !Reset printer procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
#include 'stderror.sqc'  !Routines to display error output
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
