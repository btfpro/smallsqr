!***********************************************************************
!  BUD014.SQR:  Budget Export - Send Current FY to G/L                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
! Financials-PS application.                                           *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:25:30                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!  Last Modified : 04/12/2002  Allow for publishing of new chartfields *
!                  to Financials 8.4                                   *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup31.sqc'
#define  daysinyear        365
#define  colr              5
#define  deptarraymax      20
#define  poolarraymax      200
#define  jobcodearraymax   200
#define  posnarraymax      1000
#define  earnsarraymax     20
#define  dedsarraymax      20
#define  taxarraymax       20

!***********************************************************************
Begin-REPORT

   do BUILD-ARRAYS
   do INITIALIZE

   do MAINLINE                          !Mainline is now in BUDEGKK.SQC
   do LOAD-OUTPUT-TABLES
   do WRITE-MESSAGE-PARMS
   do WRAPUP

End-REPORT

Begin-heading 6
   #include 'stdhdg08.sqc'  ! for standard heading and from/thru dates
   print '' (+1,,)
End-heading


!***********************************************************************
! Procedure: BUILD-ARRAYS                                              *
! Descr:     Builds the working arrays for department budgets          *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure BUILD-ARRAYS

! The following array is used to load department level budget data

   create-array name=Dept_Array size={deptarraymax}
                field=DASetID:Char
                field=DADeptID:Char
                field=DAEffdt:Char
                field=DACurrency_Cd:Char
                field=DADerive_Caps:Char
                field=DAOverall_Bdgt_Cap:Number
                field=DAOverall_Bdgt_Beg:Number
                field=DAErn_Bdgt_Cap:Number
                field=DAErn_Bdgt_Beg:Number
                field=DADed_Bdgt_Cap:Number
                field=DADed_Bdgt_Beg:Number
                field=DATax_Bdgt_Cap:Number
                field=DATax_Bdgt_Beg:Number

   create-array name=Pool_Array size={poolarraymax}
                field=PAPosition_Pool_ID:Char
                field=PAEffdt:Char
                field=PACurrency_Cd:Char
                field=PADerive_Caps:Char
                field=PAOverall_Bdgt_Cap:Number
                field=PAOverall_Bdgt_Beg:Number
                field=PAErn_Bdgt_Cap:Number
                field=PAErn_Bdgt_Beg:Number
                field=PADed_Bdgt_Cap:Number
                field=PADed_Bdgt_Beg:Number
                field=PATax_Bdgt_Cap:Number
                field=PATax_Bdgt_Beg:Number

   create-array name=JobCode_Array size={jobcodearraymax}
                field=JASetID_Jobcode:Char
                field=JAJobCode:Char
                field=JAEffdt:Char
                field=JACurrency_Cd:Char
                field=JADerive_Caps:Char
                field=JAOverall_Bdgt_Cap:Number
                field=JAOverall_Bdgt_Beg:Number
                field=JAErn_Bdgt_Cap:Number
                field=JAErn_Bdgt_Beg:Number
                field=JADed_Bdgt_Cap:Number
                field=JADed_bdgt_Beg:Number
                field=JATax_Bdgt_Cap:Number
                field=JATax_Bdgt_Beg:Number

   create-array name=Posn_Array size={posnarraymax}
                field=NAPosition_Nbr:Char
                field=NAEffdt:Char
                field=NACurrency_Cd:Char
                field=NADerive_Caps:Char
                field=NAOverall_Bdgt_Cap:Number
                field=NAOverall_Bdgt_Beg:Number
                field=NAErn_Bdgt_Cap:Number
                field=NAErn_Bdgt_Beg:Number
                field=NADed_Bdgt_Cap:Number
                field=NADed_Bdgt_Beg:Number
                field=NATax_Bdgt_Cap:Number
                field=NATax_bdgt_Beg:Number

   !****** Array used to store Earnings within a budget level *******
   create-array name=Earns_array size={earnsarraymax}
                field=EREarnCode:Char
                field=ERAcct_code:Char
                field=ERBudget_amt:Number
                field=ERDist_percent:Number
                field=ERBudLevel_percent:Number

   !****** Array used to store Deductions within a budget level *******
   create-array name=Deds_array size={dedsarraymax}
                field=DEDEarnCode:Char
                field=DEDAcct_code:Char
                field=DEDBudget_amt:Number
                field=DEDDist_percent:Number
                field=DEDBudLevel_percent:Number

   !****** Array used to store Tax Deductions within a budget level *******
   create-array name=Tax_array size={taxarraymax}
                field=TAXEarnCode:Char
                field=TAXAcct_code:Char
                field=TAXBudget_amt:Number
                field=TAXDist_percent:Number
                field=TAXBudLevel_percent:Number

End-Procedure BUILD-ARRAYS

!***********************************************************************
! Procedure: INITIALIZE                                                *
! Descr:     Performs the application initializations.  Formats var-   *
!            iables for use.  Calls the procedures to get input parms. *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure INITIALIZE

   do INIT-DATETIME
   do INIT-NUMBER
   do GET-CURRENT-DATETIME

   move 'BUD014.SQR' to $ReportID
   move 'BUD014' to $ProgramID
   move 'Build Budget Export to G/L' to $ReportTitle
   show $ReportTitle ' ' $ThruDate

   do STDAPI-INIT

   if $prcs_process_instance = ''
      !NOTE -- PeopleSoft does not support execution of SQR programs
      !     directly from SQRW.  The call to "Ask-Parameters" is provided
      !     only to assist in debugging or program modification
      !Uncomment Prompts for SQRW development/testing ONLY!!
      ! do ASK-PARAMETERS
   else
      do SELECT-PARAMETERS
   end-if

   if $Prm_GL_RelNo < '800'
      display ' '
      display 'G.L. Release level is below 8.0.  Processing aborted'
      STOP QUIET
   end-if

   !*** Must publish outstanding BUD014 message before continuing
   do FIND-UNPUBLISHED-BATCHES

   if #Bud014_Publish_Exist
      display ' '
      let $cancel_msg = 'Unpublished Message for BUD014-process instance = '
               || $msg_process_instance ||
               '. Publish BUD014 message before running export again'
      display $cancel_msg
      STOP QUIET
   end-if

   do SELECT-INSTALLATION

   do FETCH-GL-BUS-UNIT

   do FETCH-LAST-JRNL-ID

   !**   Open the output file.
   if $Add_to_File <> 'Y'
      if $Budget_Run_Type = 'F'
         do DELETE-WORK-FILE-ALL
      end-if
   end-if

   do CLEAR-KK-TABLES

End-Procedure INITIALIZE

!***********************************************************************
! Procedure: LOAD-OUTPUT-TABLES                                        *
! Descr:     Read the temporary table, summarizes the information      *
!            within each department, and writes the output file.       *
!                                                                      *
! Called by: BEGIN-REPORT.                                             *
!***********************************************************************
begin-procedure LOAD-OUTPUT-TABLES

   let $Save_GL_Bus_Unit = '@@@@@'
   let #KK_Processing_OK = 0
   let $Rate_Conversion_Date = $AsOfToday
   let $HR_Rate_Type = 'OFFIC'
   let $DrCr = 'C'

   let $err-statement1 = 'BUD014, SELECT, PS_BDGT_EXPORT_WRK, LOAD-OUTPUT-TABLES'
   let $err-statement2 = 'Full select -- No parameters.'

begin-SELECT on-error=Error-Display
WRK.BUSINESS_UNIT_GL
WRK.ACCT_CD
WRK.CURRENCY_CD
SUM(WRK.BUDGET_AMT) &WRK.BUDGET_AMT


   move &WRK.BUSINESS_UNIT_GL to $GL_Business_Unit
   move &WRK.ACCT_CD to $Out_Acct_Cd
   move &WRK.CURRENCY_CD to $Out_Currency_Cd
   move &WRK.CURRENCY_CD to $Currency_Cd_HR
   move &WRK.BUDGET_AMT to #Monetary_Amount

   do FETCH-CHART-FIELDS

   !** If change in BUSINESS_UNIT_GL

   if $GL_Business_Unit <> $Save_GL_Bus_Unit

      if $Save_GL_Bus_Unit <> '@@@@@'

         !** Get data on the previous post for the saved BU.
         move $Save_GL_Bus_Unit to $Prm_Gl_Bus_Unit
         do FETCH-PREVIOUS-JRNL

         !** if this is a duplicate for this fiscal year then unpost old journal id before posting **
         !** replacement journal id                                                                **
         if #Prev_Jrnl_Found
            !** Set output line values for unpost action
            move 'U' to $Prm_Header_Action

            !**** Create Reversal Header ***
            do LOAD-UNPOST-HEADER-LINE

            !** Output a line to the Header table
            do WRITE-HEADER-LINE

            !** Update Journal Control Table for new posted row.
            do WRITE-JRNL-CONTROL

         end-if

         !** Set output line values for post action
         move 'P' to $Prm_Header_Action


         !** Set output line values for Header
         do LOAD-HEADER-LINE

         !** Output a line to the Header table
         do WRITE-HEADER-LINE

         !** Update Journal Control Table for new posted row.
         do WRITE-JRNL-CONTROL

      end-if

      move $GL_Business_Unit to $Save_GL_Bus_Unit

      !** Get Base Currency code for the new BU.
      do CHECK-BU-OPTIONS

      !** Increment Journal ID tracking variable
      let #Last_Jrnl_Num_Used = (to_number(substr($Last_Jrnl_ID_Used,5,6))) + 1
      let $Last_Jrnl_ID_Used = 'KKHR' || edit((#Last_Jrnl_Num_Used),'000000')
      move $Last_Jrnl_ID_Used to $Gbl_Journal_ID
      move $AsOfToday to $Journal_Date
      move 1 to #Journal_Line

      !** Set output line values.
      do LOAD-DETAIL-LINE

      !** Output a line to the Line table
      do WRITE-DETAIL-LINE

      move $GL_Business_Unit to $Save_GL_Bus_Unit

   else

      !** Set output line values.
      do LOAD-DETAIL-LINE

      !** Output a line to the Line table
      do WRITE-DETAIL-LINE

   end-if

FROM PS_BDGT_EXPORT_WRK WRK
GROUP BY WRK.CURRENCY_CD, WRK.BUSINESS_UNIT_GL, WRK.ACCT_CD
end-SELECT


   !****  Was anything processed this edition
   if $Save_GL_Bus_Unit <> '@@@@@'

        !** Get data on the previous post for the saved BU.
        move $Save_GL_Bus_Unit to $Prm_Gl_Bus_Unit

        do FETCH-PREVIOUS-JRNL

        if #Prev_Jrnl_Found
                !** Set output line values for unpost action
                move 'U' to $Prm_Header_Action

                !**** Create Reversal Header ***
                do LOAD-UNPOST-HEADER-LINE

                !** Output a line to the Header table
                do WRITE-HEADER-LINE

                !** Update Journal Control Table for new posted row.
                do WRITE-JRNL-CONTROL
        end-if

        !** Set output line values for post action
        move 'P' to $Prm_Header_Action

        !** Set output line values for Header
        do LOAD-HEADER-LINE

        !** Output a line to the Header table
        do WRITE-HEADER-LINE

        !** Update Journal Control Table for new posted row.
        do WRITE-JRNL-CONTROL

   end-if

end-procedure LOAD-OUTPUT-TABLES

!***********************************************************************
! Procedure: WRITE-MESSAGE-PARMS                                       *
! Descr:     Writes a row of batch Parameters to the table             *
!            PS_EO_MSGBATPRM, ready for manual batch publish.          *
!                                                                      *
! Called by: WRITE-REPORT                                              *
!***********************************************************************
begin-procedure WRITE-MESSAGE-PARMS

   let $Out_Process_Name   = 'BUD014'
   let $Out_Process_Status = 'N'
   let $Out_Clean_Up_Flag  = 'U'

   let $err-statement1 = 'BUD010, PS_EO_MSGBATPRM, INSERT-MESSAGE-PARMS'
   let $err-statement2 = 'Params: PROCESS_NAME =<' || $Out_Process_Name ||
                         '>, PROCESS_STATUS <> <C>'


   !** Write a new row to the Messaging parm table PS_EO_PARM_FULL.  This
   !**   enables Process Scheduler to fire the App. Engine program EOP_PUBLISHT
   !**   directly without requiring further input from the user.

   do Insert-Param-In-BatchPub (#prcs_process_instance, #prcs_job_instance,
                                $Out_Process_Name, $SysDateTime,
                                $Out_Clean_Up_Flag)

end-procedure WRITE-MESSAGE-PARMS

!***********************************************************************
! Procedure: WRAPUP                                                    *
! Descr:     This paragraph ends the report process and updates the    *
!            status of the job in the process scheduler                *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure WRAPUP

   do Commit-Transaction
   do Reset
   do Successful-EOJ

End-Procedure WRAPUP

!***********************************************************************
! Procedure: ASK-PARAMETERS                                            *
! Descr:     Gets run-time parameters from the user where the program  *
!            is not executed through the process scheduler interface   *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure ASK-PARAMETERS

   move '9972' to $prcs_process_instance

   input $ThruDate 'Enter THRUDATE ({Prompt-Date})' type=date

   input $FiscalYear maxlen=4 'Enter 4-digit FISCAL YEAR' type=integer
   let #FiscalYear = to_number($FiscalYear)

   input $Business_Unit maxlen=5 'Enter 5 character BUSINESS UNIT' type=char
   uppercase $Business_Unit

   input $GL_RelNo maxlen=3 'Enter 3-digit G/L release code' type=char
   let $Prm_GL_RelNo = upper(ltrim(rtrim($GL_RelNo,' '),' '))

   input $Ledger maxlen=10 'Enter Ledger (Max 10 char)' type=char
   let $Prm_Ledger = Upper($Ledger)

   input $Ledger_Group maxlen=10 'Enter Ledger Group (Max 10 char)' type=char
   let $Prm_Ledger_Group = Upper($Ledger_Group)

   input $Run_Type maxlen=1 'Enter EXPORT RUN TYPE (F or I)' type=char
   let $Budget_Run_Type = upper(ltrim(rtrim($Run_Type,' '),' '))

   input $Add_To_File maxlen=1 'Add to existing export file (Y/N)' type=char
   let $Add_To_File = upper(ltrim(rtrim($Add_To_File,' '),' '))

   if $Business_Unit = '' or $Prm_Ledger = '' or $Prm_Ledger_Group = ''
   or ($Budget_Run_Type <> 'F' and $Budget_Run_Type <> 'I')
   or ($Add_To_File <> 'Y' and $Add_To_File <> 'N')
      display ' '
      display 'Program aborted at user'' request'
      stop quiet
   end-if

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Convert-To-DTU-Date($ThruDate, $ThruDate_Dtu)
   do Format-DateTime ($ThruDate, $ThruDate_Cmp, {DEFCMP},'','')


End-Procedure ASK-PARAMETERS

!***********************************************************************
! Procedure: FIND-UNPUBLISHED-BATCHES                                  *
! Descr:     Selects BUD014 Messages that have not been published      *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure FIND-UNPUBLISHED-BATCHES

   let $err-statement1 = 'BUD014, SELECT, PS_EO_MSGBATPRM'
   let $err-statement2 = 'Single Row -- No parameters.'

   let #Bud014_Publish_Exist = 0

!*** For Publish to work effectively there can be only one unprocess message
!*** for BUD014 at any one time, outstanding msgs must be processed before
!** another BUD014 can be run

Begin-SELECT on-error=Error-Display
MSG.PROCESS_INSTANCE

   move &MSG.PROCESS_INSTANCE to $msg_process_instance
   let #Bud014_Publish_Exist = 1

FROM PS_EO_MSGBATPRM MSG
WHERE MSG.PROCESS_NAME = 'BUD014'
AND MSG.PROCESS_STATUS = 'N'

End-SELECT

End-Procedure FIND-UNPUBLISHED-BATCHES

!***********************************************************************
! Procedure: SELECT-INSTALLATION                                       *
! Descr:     Selects necessary parameters from the installation table  *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure SELECT-INSTALLATION

   let $err-statement1 = 'BUD014, SELECT, PS_INSTALLATION, SELECT-INSTALLATION'
   let $err-statement2 = 'Single Row -- No parameters.'

Begin-SELECT on-error=Error-Display
IN1.COUNTRY

   move &IN1.Country to $Gbl_Country

FROM PS_INSTALLATION IN1
End-SELECT

End-Procedure SELECT-INSTALLATION


!***********************************************************************
! Procedure: FETCH-GL-BUS-UNIT                                         *
! Descr:     Using the Business Unit parameter, this module fetches    *
!            the equivalent GL Business Unit from the cross-ref table. *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure FETCH-GL-BUS-UNIT

   move $Business_Unit to $GL_Business_Unit

   let $err-statement1 = 'BUD014, SELECT, PS_BU_GL_HR_VW, FETCH-GL-BUS-UNIT'
   let $err-statement2 = 'Business_Unit=<' || $Business_Unit || '>'

Begin-SELECT on-error=Error-Display
BUNA.BUSINESS_UNIT_GL

   move &BUNA.Business_Unit_GL to $GL_Business_Unit

FROM PS_BU_GL_HR_VW BUNA
WHERE BUNA.BUSINESS_UNIT = $Business_Unit
End-SELECT

End-Procedure FETCH-GL-BUS-UNIT

!***********************************************************************
! Procedure: FETCH-LAST-JRNL-ID                                        *
! Descr:     Fetches the last Journal ID value written to the file.    *
!            Journal ID's for the current run will start with the next *
!            ID in sequence.                                           *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure FETCH-LAST-JRNL-ID

   let #jrnl_ID_found = 0

   let $err-statement1 = 'BUD014, SELECT, PS_BU_GL_HR_VW, FETCH-LAST-JRNL-ID'
   let $err-statement2 = 'No parameters.  Selects max(JOURNAL_ID)'

Begin-SELECT on-error=Error-Display
JNLA.JOURNAL_ID

   let #jrnl_ID_found = 1
   let $Last_Jrnl_ID_Used = &JNLA.JOURNAL_ID

FROM PS_JRNL_CNTL_TBL JNLA
ORDER BY JNLA.JOURNAL_ID
End-SELECT

   if not #jrnl_ID_found
      let $Last_Jrnl_ID_Used = 'KKHR000000'
   end-if

End-Procedure FETCH-LAST-JRNL-ID

!***********************************************************************
! Procedure: DELETE-WORK-FILE-ALL                                      *
! Descr:     Used to delete the entire contents of the work file       *
!            BDGT_EXPORT_WRK where the add-to-file parameter is no     *
!            and the Budget_Run_Type parameter is equal to 'F'         *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure DELETE-WORK-FILE-ALL

   let $err-statement1 = 'BUD014, DELETE, PS_BDGT_EXPORT_WRK, DELETE-WORK-FILE-ALL'
   let $err-statement2 = 'Full delete -- No parameters.'

Begin-SQL on-error=Error-Display
DELETE FROM PS_BDGT_EXPORT_WRK
End-SQL

End-Procedure DELETE-WORK-FILE-ALL

!***********************************************************************
! Procedure: CLEAR-KK-TABLES                                           *
! Descr:     Used to delete the entire contents of the Commitment      *
!            Control output tables KK_BUDGET_HDR and KK_BUDGET_LN.     *
!            Because these tables are completely rebuilt for every run,*
!            they must be initialized for every instance of BUD014.    *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure CLEAR-KK-TABLES

   let $err-statement1 = 'BUD014, DELETE, PS_KK_BUDGET_HDR, CLEAR-KK-TABLES'
   let $err-statement2 = 'Full delete -- No parameters.'

Begin-SQL on-error=Error-Display
DELETE FROM PS_KK_BUDGET_HDR
End-SQL

   let $err-statement1 = 'BUD014, DELETE, PS_KK_BUDGET_LN, CLEAR-KK-TABLES'
   let $err-statement2 = 'Full delete -- No parameters.'

Begin-SQL on-error=Error-Display
DELETE FROM PS_KK_BUDGET_LN
End-SQL

End-Procedure CLEAR-KK-TABLES

!***********************************************************************
! Procedure: FETCH-CHART-FIELDS                                        *
! Descr:     Using the output Account ID, this procedure fetches the   *
!            most current set of corresponding chart fields.           *
!                                                                      *
! Called by: WRITE-BUDGETS-FILE                                        *
!***********************************************************************
Begin-Procedure FETCH-CHART-FIELDS

   move ' '  to $Out_Account
   move ' '  to $Out_DeptID
   move ' '  to $Out_Project_ID
   move ' '  to $Out_Product
   move ' '  to $Out_Fund_Code
   move ' '  to $Out_Class_Fld
   move ' '  to $Out_Program_Code
   move ' '  to $Out_Affiliate
   move ' '  to $Out_Operating_Unit
   move ' '  to $Out_Altacct
   move ' '  to $Out_Budget_Ref
   move ' '  to $Out_Chartfield1
   move ' '  to $Out_Chartfield2
   move ' '  to $Out_Chartfield3
   move ' '  to $Out_Affiliate_Intra1
   move ' '  to $Out_Affiliate_Intra2
   move ' '  to $Out_SetID



   !**** FDM 8.4 requires a budget period ******
   if $Prm_GL_RelNo = '840'
       move $Runctl_Budget_Period to $Out_Budget_Period
   else
      move ' '  to $Out_Budget_Period
   end-if

Begin-SELECT
ACT.ACCOUNT
ACT.DEPTID_CF
ACT.PROJECT_ID
ACT.PRODUCT
ACT.FUND_CODE
ACT.CLASS_FLD
ACT.PROGRAM_CODE
ACT.AFFILIATE
ACT.OPERATING_UNIT
ACT.ALTACCT
ACT.BUDGET_REF
ACT.CHARTFIELD1
ACT.CHARTFIELD2
ACT.CHARTFIELD3
ACT.AFFILIATE_INTRA1
ACT.AFFILIATE_INTRA2

   move &ACT.ACCOUNT             to $Out_Account
   move &ACT.DEPTID_CF           to $Out_DeptID
   move &ACT.PROJECT_ID          to $Out_Project_ID
   move &ACT.PRODUCT             to $Out_Product
   move &ACT.FUND_CODE           to $Out_Fund_Code
   move &ACT.CLASS_FLD           to $Out_Class_Fld
   move &ACT.PROGRAM_CODE        to $Out_Program_Code
   move &ACT.AFFILIATE           to $Out_Affiliate
   move &ACT.OPERATING_UNIT      to $Out_Operating_Unit
   move &ACT.ALTACCT             to $Out_Altacct
   move &ACT.BUDGET_REF          to $Out_Budget_Ref
   move &ACT.CHARTFIELD1         to $Out_Chartfield1
   move &ACT.CHARTFIELD2         to $Out_Chartfield2
   move &ACT.CHARTFIELD3         to $Out_Chartfield3
   move &ACT.AFFILIATE_INTRA1    to $Out_Affiliate_Intra1
   move &ACT.AFFILIATE_INTRA2    to $Out_Affiliate_Intra2
   move ' '                      to $Out_SetID


FROM PS_ACCT_CD_TBL ACT
WHERE ACT.ACCT_CD = $Out_Acct_Cd
End-SELECT

End-Procedure FETCH-CHART-FIELDS

!***********************************************************************
! Procedure: FETCH-PREVIOUS-JRNL                                       *
! Descr:     Using the Business Unit parameter, this module fetches    *
!            data re: the last Journal written for this B/U.           *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES                                        *
!***********************************************************************
Begin-Procedure FETCH-PREVIOUS-JRNL

   let #Prev_Jrnl_Found = 0

   let $Dis_FiscalYear =  edit(#FiscalYear,'9999')
   let $err-statement1 = 'BUD014, SELECT, PS_JRNL_CNTL_TBL, FETCH-PREVIOUS-JRNL'
   let $err-statement2 = 'Business_Unit=<' || $Business_Unit ||
                         '>, FiscalYear=<' || $Dis_FiscalYear  || '>'

begin-SELECT on-error=Error-Display
JNLB.BUSINESS_UNIT
JNLB.FISCAL_YEAR
JNLB.JOURNAL_ID
JNLB.JOURNAL_DATE
JNLB.UNPOST_SEQ

   let #Prev_Jrnl_Found = 1

   move &JNLB.BUSINESS_UNIT to $Prev_Business_Unit
   move &JNLB.FISCAL_YEAR   to #Prev_FiscalYear
   move &JNLB.JOURNAL_ID    to $Prev_Journal_ID
   move &JNLB.JOURNAL_DATE  to $Prev_Journal_Date
   move &JNLB.UNPOST_SEQ    to #Prev_Unpost_Seq

   let #Incr_Unpost_Seq = #Prev_Unpost_Seq + 1

FROM PS_JRNL_CNTL_TBL JNLB
WHERE JNLB.BUSINESS_UNIT = $Prm_GL_Bus_Unit
  AND JNLB.FISCAL_YEAR = #FiscalYear
  AND JNLB.UNPOST_SEQ  = 0
  and JNLB.UNPOST_SEQ  = (SELECT MAX(JNLX.UNPOST_SEQ)
                          FROM PS_JRNL_CNTL_TBL JNLX
                       WHERE  JNLX.BUSINESS_UNIT = JNLB.BUSINESS_UNIT
                       AND JNLX.FISCAL_YEAR = JNLB.FISCAL_YEAR
                       AND JNLX.JOURNAL_ID    = JNLB.JOURNAL_ID)

End-SELECT

End-Procedure FETCH-PREVIOUS-JRNL


!***********************************************************************
! Procedure: LOAD-UNPOST-HEADER-LINE                                   *
! Descr:     Formats all variables for output to header row for        *
!            KK_BUDGET_HDR for unposting                               *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure LOAD-UNPOST-HEADER-LINE

!** Format Variables for Output Header Line

   let #Num_Process_Instance = to_number($prcs_process_instance)

   move $GL_Business_Unit       to $Out_Business_Unit
   move $Prm_Ledger_Group       to $Out_Ledger_Group
   move '0'                     to $Out_Type
   move $Currency_Cd_HR         to $Out_Foreign_Currency
   move $HR_Rate_Type           to $Out_Rt_Type
   move #Rate_Mult              to #Out_Rate_Mult
   move #Rate_Div               to #Out_Rate_Div
   move $AsOfToday              to $Out_Cur_Effdt
   move $Currency_Cd_GL         to $Out_Currency_Cd
   move 'N'                     to $Out_Bd_Hdr_Status
   move ' '                     to $Out_CF_Value
   move 0                       to #Out_Jrnl_Tot_Credits
   move 0                       to #Out_Jrnl_Total_Debits
   move 0                       to #Out_Jrnl_Total_Lines
   move $AsOfToday              to $Out_Posted_Date
   move 'KHR'                   to $Out_System_Source
   move $SysDateTime            to $Out_Dttm_Stamp_Sec
   move #Num_Process_Instance   to #Out_Process_Instance
   move 'A'                     to $Out_Audit_Actn
   move 'Y'                     to $Out_In_Process_Flg
   move 1                       to #Out_Source_Instance
   move #Prev_FiscalYear        to #Out_FiscalYear
   move 0                       to #Out_Accounting_Period

   move $Prm_Header_Action      to $Out_Jrnl_Process_Reqst
   move $Prev_Journal_ID        to $Out_Journal_ID
   move $Prev_Journal_Date      to $Out_Journal_Date
   move 0                       to #Out_Unpost_Seq



   !** Format Variables used only on Journal Control Table

   move #Incr_Unpost_Seq     to #Out_Cntl_Unpost_Seq
   move #Prev_FiscalYear     to #Out_Cntl_FiscalYear


end-procedure LOAD-UNPOST-HEADER-LINE

!***********************************************************************
! Procedure: LOAD-HEADER-LINE                                          *
! Descr:     Formats all variables for output to header row for        *
!            KK_BUDGET_HDR                                             *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure LOAD-HEADER-LINE

!** Format Variables for Output Header Line

   let #Num_Process_Instance = to_number($prcs_process_instance)

   move $GL_Business_Unit       to $Out_Business_Unit
   move $Prm_Ledger_Group       to $Out_Ledger_Group
   move '0'                     to $Out_Type
   move $Currency_Cd_HR         to $Out_Foreign_Currency
   move $HR_Rate_Type           to $Out_Rt_Type
   move #Rate_Mult              to #Out_Rate_Mult
   move #Rate_Div               to #Out_Rate_Div
   move $AsOfToday              to $Out_Cur_Effdt
   move $Currency_Cd_GL         to $Out_Currency_Cd
   move 'N'                     to $Out_Bd_Hdr_Status
   move ' '                     to $Out_CF_Value
   let #Jrnl_Tot_Credits        =  #Jrnl_Tot_Credits * -1
   move #Jrnl_Tot_Credits       to #Out_Jrnl_Tot_Credits
   move #Jrnl_Total_Debits      to #Out_Jrnl_Total_Debits
   move #Jrnl_Total_Lines       to #Out_Jrnl_Total_Lines
   move $AsOfToday              to $Out_Posted_Date
   move 'KHR'                   to $Out_System_Source
   move $SysDateTime            to $Out_Dttm_Stamp_Sec
   move #Num_Process_Instance   to #Out_Process_Instance
   move 'A'                     to $Out_Audit_Actn
   move 'Y'                     to $Out_In_Process_Flg
   move 1                       to #Out_Source_Instance
   move #FiscalYear             to #Out_FiscalYear
   move 0                       to #Out_Accounting_Period

   move $Prm_Header_Action      to $Out_Jrnl_Process_Reqst
   move $Gbl_Journal_ID         to $Out_Journal_ID
   move $Journal_Date           to $Out_Journal_Date
   move 0                       to #Out_Unpost_Seq


   !** Format Variables used only on Journal Control Table
   move 0                       to #Out_Cntl_Unpost_Seq
   move #FiscalYear             to #Out_Cntl_FiscalYear

end-procedure LOAD-HEADER-LINE

!***********************************************************************
! Procedure: WRITE-HEADER-LINE                                         *
! Descr:     Inserts a line into table KK_BUDGET_HDR                   *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure WRITE-HEADER-LINE

   let $Dis_Unpost_Seq = edit(#Out_Unpost_Seq,'000')

   let $err-statement1 = 'BUD014, INSERT, PS_KK_BUDGET_HDR, WRITE-HEADER-LINE'
   let $err-statement2 = 'Key Values: BUSINESS_UNIT=<' || $Out_Business_Unit ||
                                 '>, JOURNAL_ID=<' || $Out_Journal_ID ||
                                 '>, JOURNAL_DATE=<' || $Out_Journal_Date ||
                                 '>, UNPOST_SEQ=<' || $Out_Unpost_Seq ||
                                 '>, LEDGER_GROUP=<' || $Out_Ledger_Group || '>'


!Oracle database requires {DatetimeIn-Prefix} on insert statement

begin-SQL on-error=Error-Display
INSERT INTO PS_KK_BUDGET_HDR (
  BUSINESS_UNIT
, JOURNAL_ID
, JOURNAL_DATE
, UNPOST_SEQ
, LEDGER_GROUP
, TYPE_KK
, JRNL_PROCESS_REQST
, FOREIGN_CURRENCY
, RT_TYPE
, RATE_MULT
, RATE_DIV
, CUR_EFFDT
, CURRENCY_CD
, BD_HDR_STATUS
, CF_VALUE
, JRNL_TOT_CREDITS
, JRNL_TOTAL_DEBITS
, JRNL_TOTAL_LINES
, POSTED_DATE
, SYSTEM_SOURCE
, DTTM_STAMP_SEC
, PROCESS_INSTANCE
, AUDIT_ACTN
, IN_PROCESS_FLG
, SOURCE_INSTANCE
, FISCAL_YEAR
, ACCOUNTING_PERIOD  )
VALUES (
  $Out_Business_Unit
, $Out_Journal_ID
, $Out_Journal_Date
, #Out_Unpost_Seq
, $Out_Ledger_Group
, $Out_Type
, $Out_Jrnl_Process_Reqst
, $Out_Foreign_Currency
, $Out_Rt_Type
, #Out_Rate_Mult
, #Out_Rate_Div
, $Out_Cur_Effdt
, $Out_Currency_Cd
, $Out_Bd_Hdr_Status
, $Out_CF_Value
, #Out_Jrnl_Tot_Credits
, #Out_Jrnl_Total_Debits
, #Out_Jrnl_Total_Lines
, $Out_Posted_Date
, $Out_System_Source
, {DatetimeIn-Prefix}$Out_Dttm_Stamp_Sec{DatetimeIn-Suffix}
, #Out_Process_Instance
, $Out_Audit_Actn
, $Out_In_Process_Flg
, #Out_Source_Instance
, #Out_FiscalYear
, #Out_Accounting_Period  )
end-SQL

end-procedure WRITE-HEADER-LINE

!***********************************************************************
! Procedure: WRITE-JRNL-CONTROL                                        *
! Descr:     Inserts a line into table JRNL_CNTL_TBL                   *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure WRITE-JRNL-CONTROL

   let $Dis_FiscalYear =  edit(#Out_FiscalYear,'9999')
   let $Dis_Cntl_Unpost_Seq =  edit(#Out_Cntl_Unpost_Seq,'9999')
   let $err-statement1 = 'BUD014, INSERT, PS_JRNL_CNTL_TBL, WRITE-JRNL-CONTROL'
   let $err-statement2 = 'Key Values: BUSINESS_UNIT=<' || $Out_Business_Unit ||
                                    '>, FISCAL_YEAR=<' || $Dis_FiscalYear ||
                                     '>, JOURNAL_ID=<' || $Out_Journal_ID ||
                                   '>, JOURNAL_DATE=<' || $Out_Journal_Date ||
                                     '>, UNPOST_SEQ=<' || $Dis_Cntl_Unpost_Seq || '>'

begin-SQL on-error=Error-Display
INSERT INTO PS_JRNL_CNTL_TBL (
  BUSINESS_UNIT
, FISCAL_YEAR
, JOURNAL_ID
, JOURNAL_DATE
, UNPOST_SEQ  )
VALUES (
  $Out_Business_Unit
, #Out_Cntl_FiscalYear
, $Out_Journal_ID
, $Out_Journal_Date
, #Out_Cntl_Unpost_Seq  )
end-SQL

end-procedure WRITE-JRNL-CONTROL

!***********************************************************************
! Procedure: CHECK-BU-OPTIONS                                          *
! Descr:     Using the Business Unit (GL) parameter, this module will  *
!            check table PS_BUS_UNIT_TBL_GL to see if the current B/U  *
!            uses commitment control or not.                           *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES                                        *
!***********************************************************************
Begin-Procedure CHECK-BU-OPTIONS

   let #BU_Entry_GL_Found = 0

   let $err-statement1 = 'BUD014, SELECT, PS_BUS_UNIT_TBL_GL, CHECK-BU-OPTIONS'
   let $err-statement2 = 'GL_Business_Unit=<' || $GL_Business_Unit || '>'

begin-SELECT on-error=Error-Display
CKBU.BASE_CURRENCY

   let #BU_Entry_GL_Found = 1
   move &CKBU.BASE_CURRENCY   to $Currency_Cd_GL

FROM PS_BUS_UNIT_TBL_GL CKBU
WHERE CKBU.BUSINESS_UNIT = $GL_Business_Unit
End-SELECT

   if not #BU_Entry_GL_Found
      move 'USD' to $Currency_Cd_GL
      print 'GL Business Unit'                              (+2,5)
      print $GL_Business_Unit                               (0,+2)
      print 'not found.  Base GL Currency defaulted '       (0,+2)
      print 'to USD (US Dollars).'                          (0,+2)
   end-if

End-Procedure CHECK-BU-OPTIONS

!***********************************************************************
! Procedure: LOAD-DETAIL-LINE                                          *
! Descr:     Formats all variables for output to header row for        *
!            KK_BUDGET_HDR                                             *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure LOAD-DETAIL-LINE

   let #Num_Process_Instance = to_number($prcs_process_instance)

   do CONVERT-AMOUNT ($Currency_Cd_HR, $Currency_Cd_GL, $HR_Rate_Type,
                      #Monetary_Amount, #GL_Amount, #Rate_Mult, #Rate_Div)


   do GET-CURRENCY-DECIMALS ($Currency_Cd_GL, #Dec_Positions )

   if #Dec_Positions = 3
      let #GL_Amount       = round(#GL_Amount, 3 )
      let #Monetary_Amount = round(#Monetary_Amount, 3 )
   else
      let #Monetary_Amount     = round(#Monetary_Amount, 2)
      let #GL_Amount           = round(#GL_Amount, 2)
   end-if

   if $DrCr = 'C'
         let #Monetary_Amount = #Monetary_Amount * (-1)
         let #GL_Amount       = #GL_Amount  * (-1)
   end-if

   if #Monetary_Amount < 0
      add #Monetary_Amount to #Jrnl_Tot_Credits
      add 1 to #Jrnl_Total_Lines
   else
      add #Monetary_Amount to #Jrnl_Total_Debits
      add 1 to #Jrnl_Total_Lines
   end-if

   move $GL_Business_Unit       to $Out_Business_Unit
   move $Gbl_Journal_ID         to $Out_Journal_ID
   move $AsOfToday              to $Out_Journal_Date
   move 0                       to #Out_Unpost_Seq
   move #Journal_Line           to #Out_Journal_Line
   move $Prm_Ledger             to $Out_Ledger
   move ' '                     to $Out_Business_Unit_PC
   move ' '                     to $Out_Activity_ID
   move ' '                     to $Out_Resource_Type
   move $Currency_Cd_GL         to $Out_Currency_Cd
   move ' '                     to $Out_Line_Descr
   move $Currency_Cd_HR         to $Out_Foreign_Currency
   move $HR_Rate_Type           to $Out_Rt_Type
   move #Monetary_Amount        to #Out_Foreign_Amount
   move #Rate_Mult              to #Out_Rate_Mult
   move #Rate_Div               to #Out_Rate_Div
   move #GL_Amount              to #Out_Monetary_Amount
   move '0'                     to $Out_Bd_Line_Status
   move 'KHR'                   to $Out_System_Source
   move 'KHR'                   to $Out_Jrnl_Line_Source
   move #Num_Process_Instance   to #Out_Process_Instance
   move 'A'                     to $Out_Audit_Actn
   move 'Y'                     to $Out_In_Process_Flg
   move 'N'                     to $Out_PC_Distrib_Status

   let #Journal_Line = #Journal_Line + 1

end-procedure LOAD-DETAIL-LINE

!***********************************************************************
! Procedure: WRITE-DETAIL-LINE                                         *
! Descr:     Inserts a line into table KK_BUDGET_LN                    *
!                                                                      *
! Called by: LOAD-OUTPUT-TABLES.                                       *
!***********************************************************************
begin-procedure WRITE-DETAIL-LINE

   let $err-statement1 = 'BUD014, INSERT, PS_KK_BUDGET_LN, WRITE-DETAIL-LINE'
   let $err-statement2 = 'Key Values: BUSINESS_UNIT=<' || $Out_Business_Unit ||
                                 '>, JOURNAL_ID=<' || $Out_Journal_ID ||
                                 '>, JOURNAL_DATE=<' || $Out_Journal_Date ||
                                 '>, UNPOST_SEQ=<' || $Out_Unpost_Seq ||
                                 '>, JOURNAL_LINE=<' || $Out_Journal_Line || '>'

begin-SQL on-error=Error-Display
INSERT INTO PS_KK_BUDGET_LN (
  BUSINESS_UNIT
, JOURNAL_ID
, JOURNAL_DATE
, UNPOST_SEQ
, JOURNAL_LINE
, LEDGER
, BUDGET_PERIOD
, ACCOUNT
, OPERATING_UNIT
, DEPTID
, PRODUCT
, PROJECT_ID
, FUND_CODE
, PROGRAM_CODE
, CLASS_FLD
, AFFILIATE
, ALTACCT
, BUDGET_REF
, CHARTFIELD1
, CHARTFIELD2
, CHARTFIELD3
, AFFILIATE_INTRA1
, AFFILIATE_INTRA2
, BUSINESS_UNIT_PC
, ACTIVITY_ID
, RESOURCE_TYPE
, CURRENCY_CD
, LINE_DESCR
, FOREIGN_CURRENCY
, RT_TYPE
, FOREIGN_AMOUNT
, RATE_MULT
, RATE_DIV
, MONETARY_AMOUNT
, BD_LINE_STATUS
, JRNL_LINE_SOURCE
, PROCESS_INSTANCE
, AUDIT_ACTN
, IN_PROCESS_FLG
, PC_DISTRIB_STATUS )
VALUES (
  $Out_Business_Unit
, $Out_Journal_ID
, $Out_Journal_Date
, #Out_Unpost_Seq
, #Out_Journal_Line
, $Out_Ledger
, $Out_Budget_Period
, $Out_Account
, $Out_Operating_Unit
, $Out_Deptid
, $Out_Product
, $Out_Project_ID
, $Out_Fund_Code
, $Out_Program_Code
, $Out_Class_Fld
, $Out_Affiliate
, $Out_Altacct
, $Out_Budget_Ref
, $Out_Chartfield1
, $Out_Chartfield2
, $Out_Chartfield3
, $Out_Affiliate_Intra1
, $Out_Affiliate_Intra2
, $Out_Business_Unit_PC
, $Out_Activity_ID
, $Out_Resource_Type
, $Out_Currency_Cd
, $Out_Line_Descr
, $Out_Foreign_Currency
, $Out_Rt_Type
, #Out_Foreign_Amount
, #Out_Rate_Mult
, #Out_Rate_Div
, #Out_Monetary_Amount
, $Out_Bd_Line_Status
, $Out_Jrnl_Line_Source
, #Out_Process_Instance
, $Out_Audit_Actn
, $Out_In_Process_Flg
, $Out_PC_Distrib_Status  )
end-SQL

end-procedure WRITE-DETAIL-LINE


!***********************************************************************
! Procedure: GET-VALUES                                                *
! Descr:     Loads and formats the variables obtained through the      *
!            process scheduler interface.                              *
!                                                                      *
! Called by: SELECT-PARAMETERS                                         *
!***********************************************************************
Begin-Procedure GET-VALUES

   do GET-FROM-THRU-DATE
   do GET-FISCALYEAR
   do GET-BUSINESS-UNIT
   do GET-GL-RELEASE-NO
   do GET-LEDGER
   do GET-LEDGER-GROUP
   do GET-BUDGET-PERIOD
   let $Budget_Run_Type = upper(ltrim(rtrim(&RUN_CNTL_BDGT.Budget_Run_Type,' '),' '))
   let $Add_To_File = upper(ltrim(rtrim(&RUN_CNTL_BDGT.Add_To_File,' '),' '))

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Convert-To-DTU-Date($ThruDate, $ThruDate_Dtu)
   do Format-DateTime ($ThruDate, $ThruDate_Cmp, {DEFCMP},'','')

   move $Runctl_GL_Rel_No     to $Prm_Gl_RelNo
   move $Runctl_Ledger        to $Prm_Ledger
   move $Runctl_Ledger_Group  to $Prm_Ledger_Group


End-Procedure GET-VALUES

!***********************************************************************
! Procedure: CONVERT-AMOUNT                                            *
! Descr:     Using passed currency codes and an HRMS amount read from  *
!            the work file, this module converts the amount to the GL  *
!            currency code.                                            *
!                                                                      *
! Called by: LOAD-DETAIL-LINE                                          *
!***********************************************************************
begin-procedure CONVERT-AMOUNT ($From, $To, $Rtype, #HR_amount,
                                :#GL_amount, :#Rate_Mult, :#Rate_Div)

let $currency_error =
   cond($from=$to and rtrim($from,' ')='','Payroll and GL Currencies are Blank- Check business units',
   cond(rtrim($from,' ')='','Payroll currency is blank for '||$_business_unit_hr,
   cond(rtrim($to,' ')='','GL currency is blank '||
   cond(rtrim($_business_unit_gl,' ')='',
    'and no GL business unit is linked to '||$_business_unit_hr,' for '||$_business_unit_gl),
    'None')))

if $currency_error <> 'None'
   display ' '
   display $currency_error
   display 'Please correct and re-run'
   stop quiet
else
  if $from = $to
          let #gl_amount = #hr_amount
          let #rate_mult = 1
          let #rate_div  = 1
  else
        do GET-EXCH-RATE ($from, $to, $rtype, #rate_mult, #rate_div)
        if #rate_div = 0
           display ' '
           display 'Divisor rate is zero for currency codes :' noline
           display $from noline
           display ' and '  noline
           display $to
           display 'please correct and re-run'
           stop
        end-if
        let #gl_amount = #hr_amount * #rate_mult/#rate_div
  end-if
        if #rate_div = 0 or #rate_mult = 0
           display ' '
           display 'Rates are invalid for currency codes :' noline
           display $from noline
           display ' and ' noline
           display $to
           display 'please correct and re-run'
           stop
        end-if
end-if

end-procedure !CONVERT-AMOUNT

!***********************************************************************
! Procedure: GET-CURRENCY-DECIMALS                                     *
! Descr:     Using a passed currency code, this procedure fetches the  *
!            number of decimal positions from the currency code table. *
!                                                                      *
! Called by: LOAD-DETAIL-LINE                                          *
!***********************************************************************
begin-procedure GET-CURRENCY-DECIMALS ($Currency, :#Decimals)

begin-SELECT
DECIMAL_POSITIONS

  move &DECIMAL_POSITIONS to #Decimals

FROM PS_CURRENCY_CD_TBL A
WHERE CURRENCY_CD = $Currency
  AND EFF_STATUS = 'A'
  AND EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_CURRENCY_CD_TBL
                WHERE CURRENCY_CD = A.CURRENCY_CD
                  AND EFF_STATUS = A.EFF_STATUS
                  AND EFFDT <= $_Rate_Conversion_Date )
end-SELECT

end-procedure !GET-CURRENCY-DECIMALS

!***********************************************************************
! Procedure: GET-EXCH-RATE                                             *
! Descr:     Using passed currency codes, this procedure fetches the   *
!            multiplier and divisor for currency conversion between    *
!            the two currency rates.                                   *
!                                                                      *
! Called by: CONVERT-AMOUNT                                            *
!***********************************************************************
begin-procedure GET-EXCH-RATE ($From, $To, $Rtype, :#Rate_Mult, :#Rate_Div)

   let #Rate_Mult = 1
   let #Rate_Div  = 1

   if $Rtype = ' '
       let $Rtype = 'OFFIC'
   end-if

#DEBUG show '$_Rate_Conversion_Date = <' $_Rate_Conversion_Date '>'

begin-SELECT
RATE_MULT
RATE_DIV

#DEBUG show 'PS_RT_DFLT_VW record is found'

   let #Rate_Mult = &RATE_MULT
   let #Rate_Div  = &RATE_DIV

FROM PS_RT_DFLT_VW A
WHERE FROM_CUR = $From
  AND TO_CUR = $To
  AND RT_TYPE = $Rtype
  AND EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_RT_DFLT_VW
                WHERE FROM_CUR = A.FROM_CUR
                  AND TO_CUR = A.TO_CUR
                  AND RT_TYPE = A.RT_TYPE
                  AND EFFDT <= $_Rate_Conversion_Date )
end-SELECT

#DEBUG show '#Rate_Mult = <'  #Rate_Mult  '>'
#DEBUG show '#Rate_Div  = <'  #Rate_Div   '>'

end-procedure !GET-EXCH-RATE

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#include 'askaod.sqc'
#include 'btgetval.sqc'  !Formats run control parameters.
#include 'btrnctl1.sqc'  !Get Variables entered through Process Scheduler
#include 'budegkk.sqc'   !Mainline procedure shared with BUD007.SQR
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datemath.sqc'  !Routines for adding and subtracting dates
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'eoparam.sqc'   !Get MSGBATPRM insertion routine
#include 'getactrs.sqc'  !Get action reason routine
#include 'getdptnm.sqc'  !Get department name routine
#include 'number.sqc'    !Routines to format numbers
#include 'reset.sqc'     !Reset printer procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
#include 'stderror.sqc'  !Routines to display error output
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
