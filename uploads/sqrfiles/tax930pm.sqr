!***********************************************************************
!  TAX930PM: Create 1099-R Print and Electronic Files -                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/11/08:17:12:02                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872695                                              !
!                                                                      *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!    10/22/2013   RSI-HCM103665   v1.0                                 *
!    Descr:  Modification for year 2013 changes.                       *
!                                                                      *
!    10/07/2015   RSI-HCM105192 v2.0                                   *
!    Descr:  Modification for year 2015 changes.                       *
!                                                                      *
!    05/19/2016   RSI-HCM105651 v3.0                                   *
!    Descr:  Modification for year 2016 changes.                       *
!                                                                      *
!    09/21/2016   RSI-HCM105841 v4.0                                   *
!    Descr:  Adding FATCA filing requirement to IRSTAX file.           *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#define PRINTER_TYPE LINEPRINTER
#Include 'usarpt.sqc' !USA-specific variables
#Define Prgm_Ver       '4.0'   !Corresponds to Modification History above.                                             !RSI-HCM105841

begin-setup
#include 'prt1099r.sqc' ! Form Layout selection
                        ! Edit this file to direct output to printer
#include 'setupdb.sqc'  ! Database specific setup

!
! The escape codes, unless otherwise noted, are for PCL-compatible printers
! being used as a line printer. If the printer you are using is not
! PCL-compatible, then these codes will not work as intended. Please refer
! to the user's manual for your printer to determine the correct codes.
!

#ifndef EBCDIC                       ! If not running on IBM MVS or AS/400

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER
  init-string=<27>E<27>(0N<27>&l8D<27>&l0E<27>&l88F
!                 |      |      |       |       |
!                 |      |      |       |        --> 88 text lines
!                 |      |      |        --> top margin = 0 lines
!                 |      |       --> 8 lines per inch
!                 |       --> ISO 8859-1 symbol set
!                  --> Reset
end-declare
#endif

#else                                ! EBCDIC Ports

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER

! If you intended to download the output file created by SQR to print it on a
! PCL-compatible printer attached to an ASCII-bases operating system, such as
! Windows or Unix, use the following escape codes.
!
! Note: These codes may not work as intended if the output is copied to a
!       printer defined as a directly-attached printer or a remote network
!       printer, even if the printer is PCL-compatible
!
! init-string=<39>E<39>(0N<39>&l8D<39>&l0E<39>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
!
! If you intended to copy the output file created by SQR to a printer defined as
! a directly-attached printer or a remote network printer on EBCDIC-bases operating
! systems, such as MVS or OS/400, use this init-string
!
! THIS IS THE DEFAULT FOR EBCDIC SYSTEMS
!
  init-string=<241>
!             |
!              --> FCFC "1" for top of page
!

end-declare
#endif

#endif

#if {PRINTER_TYPE} = 'POSTSCRIPT'
declare-printer PS-definition
  type={PRINTER_TYPE}
  point-size=12
  font=3                                 ! Courier font

!
! add STARTUP-FILE=dir\filename to change the symbol set
!
end-declare
#endif

#if {PRINTER_TYPE} = 'HPLASERJET'
declare-printer HP-definition
  type={PRINTER_TYPE}
  symbol-set=0U                          ! ASCII symbol set
  point-size=12
  pitch=10
  font=3

end-declare
#endif

end-setup

!***********************************************************************
begin-report
!***********************************************************************
                                                                                                                       !RSI-HCM105192 Begin
  Show 'TAX930PM.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
                                                                                                                       !RSI-HCM105192 End
  do Init-Report
  do Process-Main

  if $EE_Data_Selected = 'Y'
  display ''
  display '*** Report complete ***' noline
  display '  ' noline
  end-if

  if $SelectEEs <> 'G'
    and $EE_Data_Selected = 'Y'
    display $FileExtension noline
    display ' file(s) created.'
  end-if

  if $EE_Data_Selected = 'Y'
  display '  '
  display ''
  display 'Upon successful conclusion of this program, one or more'
  display 'files will have been created, as follows:'
  display ''
  display '  TAX930PM.lis contains print images for printing the paper 1099-Rs.'
  display ''
  end-if

  if $SelectEEs <> 'G'
    and $EE_Data_Selected = 'Y'
    display '  IRSTAX is formatted for electronic submission of 1099-Rs.'
    display ''
  end-if

  if $EE_Selected = 'Y'
    do Delete-Sel-Employees-Table
  end-if

  if $EE_Data_Selected = 'N'
    display ' '
    display '****** No Payee Records Selected ******'
    display ' '
    print '********************************'  (+3,1)
    print '  No Payee Records Selected     '  (+1,1)
    print '********************************'  (+1,1)
  end-if

  do Stdapi-Term
end-report

!***********************************************************************
begin-procedure Init-Report
!***********************************************************************
  display ''
  display 'Creating 1099-R Report File'

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init

  move 750 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-US-Year-End-Parameters
     do Select-Layout-Style
     do Convert-Parameters
  end-if

  do Initialization

end-procedure

begin-procedure Select-Layout-Style

begin-select

LAYOUT_STYL_TBL.LAYOUT_STYLE_1

FROM  PS_LAYOUT_STYL_TBL LAYOUT_STYL_TBL
WHERE LAYOUT_STYL_TBL.OPRID               = $Prcs_OprID
AND   LAYOUT_STYL_TBL.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID

end-select

  let $LAYOUT_STYL_TBL.Layout_Style_1       = RTRIM(&LAYOUT_STYL_TBL.Layout_Style_1, ' ')

  move &LAYOUT_STYL_TBL.Layout_Style_1 to $Layout_Style
  if $Layout_Style = 'C'
     move '4CORNER' to $Layout_Style
  else
    if $Layout_Style = 'P'
       move '4CORNERPS' to $Layout_Style
    else
       move '2VERTICAL' to $Layout_Style
    end-if
  end-if
  display $Layout_Style
end-procedure

begin-procedure Initialization
!***********************************************************************

!  Short edge offset - negative or positive decipoints
!     Modify the codes below to adjust up or down -
!     PCL code &lnnZ not effective on HP4000 printers
!
  let $LP6 = ''
  let $LP8L = ''
#if {PRINTER_TYPE} = 'LINEPRINTER'
#ifndef EBCDIC
  encode '<27>&l6D<27>&l66F<27>&l20Z' into $LP6
  encode '<27>&l3A<27>&l104F<27>&l-30Z' into $LP8L
#else
!  encode '<39>&l6D<39>&l66F<39>&l30Z' into $LP6
!  encode '<39>&l3A<39>&l104F<39>&l-30Z' into $LP8L
#endif
#endif

  do Get-Current-DateTime

  move '1' to $Year4
  do Format-DateTime($AsOfToday, $AsOfYear, {DEFYMD}, '','')
  move $AsOfYear  to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1 from #AsOfYear

  do Get-Tax-Reporting-Run-Controls

  if &TX.Balance_Year <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1
    'Current year is not one greater than tax reporting year. Continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  move &TX.Balance_Year    to $FromDate
  let $FromDate = $FromDate || '0101'
  do Format-DateTime($FromDate, $FromDate, {DEFCMP}, '', 'native')
  move &TX.Balance_Year    to $AsOfDate
  let $AsOfDate = $AsOfDate || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  move &TX.Balance_Year to $PaymentYear xxxx
  move &TX.Employees_Per_Page to #EmployeesPerPage

!Default Layout_Style is 2VERTICAL
 ! if $Layout_Style <> '4VERTICAL'    not supported by PeopleSoft
    if $Layout_Style <> '4CORNER'
      if $Layout_Style <> '4CORNERPS'
        let $Layout_Style = '2VERTICAL'
      end-if
    end-if
 ! end-if

  if $Layout_Style = '2VERTICAL'
      #ifndef LayoutW2-6
        show 'To run the report for Layout style "2VERTICAL" make sure LayoutW2-6'
        show 'is defined in PRT1099R.SQC'
        stop
      #endif
      let #TOPMARGIN      = 5
      let #WCOLUMN1       = 5
      let #WCOLUMN2       = 41  !Must be defined; but value irrelevant
      let #FormsPerPage   = 2
      let #CENTERSPLIT    = 8
      let #LASTPRINTLINE  = 25
      let #TOPSPLIT       = 5   !Must be defined; but value irrelevant
      let #BOTTOMSPLIT    = 3   !Must be defined; but value irrelevant
      print $LP6 () code
      COLUMNS #WCOLUMN1
  end-if

  if $Layout_Style = '4VERTICAL'
      #ifndef LayoutW2-8
        show 'To run the report for Layout style "4VERTICAL" make sure LayoutW2-8'
        show 'is defined in PRT1099R.SQC'
        stop
      #endif
      let #TOPMARGIN      = 4
      let #WCOLUMN1       = 4
      let #WCOLUMN2       = 41  !Must be defined; but value irrelevant
      let #FormsPerPage   = 4
      let #CENTERSPLIT    = 4
      let #LASTPRINTLINE  = 17
      let #TOPSPLIT       = 5
      let #BOTTOMSPLIT    = 3
      COLUMNS #WCOLUMN1
  end-if

  if $Layout_Style = '4CORNER'
      #ifndef LayoutW2-8
        show 'To run the report for Layout style "4CORNER" make sure LayoutW2-8'
        show 'is defined in PRT1099R.SQC'
        stop
      #endif
      let #TOPMARGIN      = 7
      let #WCOLUMN1       = 4
      let #WCOLUMN2       = 41
      let #FormsPerPage   = 4
      let #CENTERSPLIT    = 5
      let #LASTPRINTLINE  = 35
      let #TOPSPLIT       = 5   !Must be defined; but value irrelevant
      let #BOTTOMSPLIT    = 3   !Must be defined; but value irrelevant
      COLUMNS #WCOLUMN1 #WCOLUMN2
  end-if

  if $Layout_Style = '4CORNERPS'
      #ifndef LayoutW2-8L
        show 'To run the report for Layout style "4CORNERPS" make sure LayoutW2-8L'
        show 'is defined in PRT1099R.SQC'
        stop
      #endif
      let #TOPMARGIN      = 4
      let #WCOLUMN1       = 5
      let #WCOLUMN2       = 42
      let #FormsPerPage   = 4
      let #CENTERSPLIT    = 4
      let #LASTPRINTLINE  = 34
      let #TOPSPLIT       = 5   !Must be defined; but value irrelevant
      let #BOTTOMSPLIT    = 3   !Must be defined; but value irrelevant
      print $LP8L () code
      COLUMNS #WCOLUMN1 #WCOLUMN2
  end-if

  if #EmployeesPerPage  > #FormsPerPage
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 2)
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 3)
     or ($Layout_Style = '4CORNERPS' and #EmployeesPerPage > 1)
    display '*********************************************************'
    display 'Employees Per Page specifed on Tax Reporting Parameters  '
    display 'Panel 2 is not valid for the Layout Style selected       '
    display '*********************************************************'
    stop
  end-if

  create-array name=StateTotals size=60 field=Count:number
                                        field=ControlTotal:number:17
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Process-Main
!***********************************************************************
!***********************************************************************
do Validate-Distribution-Codes                                                                                       ! RSI-HCM105192
  if $SelectEEs = 'F'
     move &TX.Company to $Company        !TX.Company is the Transmitter
     do Get-Company-Data                 !Transmitter identifying data

     do Process-for-T-record
  end-if

  move 'N'  to $EE_Data_Selected

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  if &A.COMPANY != $Company1
     move 0 to #Form#
  end-if

  move &A.Postal      to $ErZip
  do AddHypenZip(&A.Country, $ErZip, $ErZip)
  move &A.Federal_EIN to $PayerFederalEIN 099999999

  move 'N' to $EmployeeFound

  do Read-Earnings-Data

  if $SelectEEs <> 'G' and $EmployeeFound = 'Y'
    do Write-C-Record
    if $FedStateFiler = '1'
      do Write-K-Records
    end-if
  end-if

  if $EmployeeFound = 'Y'
     NEW-PAGE
  end-if

  move &A.COMPANY to $Company1

FROM  PS_COMPANY_TBL A
#ifdef TAXTEST
WHERE TAX_REPORT_TYPE = '2'
#else
WHERE TAX_REPORT_TYPE = 'R'  !1099-R Reporting Company
#endif
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if $SelectEEs = 'F'
    and $EE_Data_Selected = 'Y'
    do Write-F-Record
    close 10
  end-if

end-procedure
                                                                                                                            !RSI-HCM105192 Begin
!***********************************************************************
begin-procedure Validate-Distribution-Codes
!***********************************************************************
  let $DistribCd = Ltrim(Rtrim($DistribCd,' '), ' ')
  if isnull($DistribCd) = 1
    display '*******************************************************************'
    display 'Distribution Code not provided'
    display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,D,E,F,G,H,J,K,L,N,P,Q,R,S,T,U,W'
    display '*******************************************************************'
    stop
  end-if

  if Length($DistribCd) > 1
     let $DistribCd1 = Substr($DistribCd,1,1)
     let $DistribCd2 = Substr($DistribCd,2,1)
  else
     let $DistribCd1 = $DistribCd
  end-if

  evaluate $DistribCd1
   When  = '1'
   When  = '2'
   When  = '3'
   When  = '4'
   When  = '5'
   When  = '6'
   When  = '7'
   When  = '8'
   When  = '9'
   When  = 'A'
   When  = 'B'
   When  = 'E'
   When  = 'F'
   When  = 'G'
   When  = 'H'
   When  = 'J'
   When  = 'L'
   When  = 'N'
   When  = 'P'
   When  = 'Q'
   When  = 'R'
   When  = 'S'
   When  = 'T'
   When  = 'U'
   When  = 'W'
      break
   When  = 'D'
      if &TX.Balance_Year > 2010 and &TX.Balance_Year < 2013
        display '*****************************************************************'
        display 'D is not a Valid Distribution Code for balance year 2011,2012'
        display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,E,F,G,H,J,K,L,N,P,Q,R,S,T,U,W'
        display '*****************************************************************'
        stop
      end-if
      break
   When  = 'K'
      if &TX.Balance_Year < 2014
         display '*******************************************************************'
         display 'K is not a Valid Distribution Code for balance year less than 2014'
         display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,E,F,G,H,J,L,N,P,Q,R,S,T,U,W'
         display '*******************************************************************'
         stop
      else
         if Length($DistribCd) = 1
            display '*********************************************************'
            display 'Distribution Code K cannot be stand alone'
            display 'Valid combination codes: 1,2,4,7,8 or G'
            display '*********************************************************'
            stop
         else
            if ($DistribCd2 <> '1' and $DistribCd2 <> '2' and $DistribCd2 <> '4'
                  and $DistribCd2 <> '7' and $DistribCd2 <> '8' and $DistribCd2 <> 'G')
               display '*********************************************************'
               display 'Invalid combination code for Distribution Code K'
               display 'Valid combination codes: 1,2,4,7,8 or G'
               display '*********************************************************'
               stop
            end-if
         end-if
      end-if
      break
   When-Other
    display '******************************************************************'
    display 'Invalid Distribution Code provided'
    display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,D,E,F,G,H,J,K,L,N,P,Q,R,S,T,U,W'
    display '******************************************************************'
    stop
    break
  end-evaluate
  if Length($DistribCd) > 1
     evaluate $DistribCd2
      When  = '1'
      When  = '2'
      When  = '3'
      When  = '4'
      When  = '5'
      When  = '6'
      When  = '7'
      When  = '8'
      When  = '9'
      When  = 'A'
      When  = 'B'
      When  = 'E'
      When  = 'F'
      When  = 'G'
      When  = 'H'
      When  = 'J'
      When  = 'L'
      When  = 'N'
      When  = 'P'
      When  = 'Q'
      When  = 'R'
      When  = 'S'
      When  = 'T'
      When  = 'U'
      When  = 'W'
         break
      When  = 'D'
         if &TX.Balance_Year > 2010 and &TX.Balance_Year < 2013
           display '******************************************************************'
           display 'D is not a Valid Distribution Code for balance year 2011,2012'
           display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,E,F,G,H,J,K,L,N,P,Q,R,S,T,U,W)'
           display '******************************************************************'
           stop
         end-if
         break
      When  = 'K'
         if &TX.Balance_Year < 2014
            display '*******************************************************************'
            display 'K is not a Valid Distribution Code for balance year less than 2014'
            display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,E,F,G,H,J,L,N,P,Q,R,S,T,U,W'
            display '*******************************************************************'
            stop
         else
            if Length($DistribCd) = 1
               display '*********************************************************'
               display 'Distribution Code K cannot be stand alone'
               display 'Valid combination codes: 1,2,4,7,8 or G'
               display '*********************************************************'
               stop
            else
               if ($DistribCd1 <> '1' and $DistribCd1 <> '2' and $DistribCd1 <> '4'
                     and $DistribCd1 <> '7' and $DistribCd1 <> '8' and $DistribCd1 <> 'G')
                  display '*********************************************************'
                  display 'Invalid combination code for Distribution Code K'
                  display 'Valid combination codes: 1,2,4,7,8 or G'
                  display '*********************************************************'
                  stop
               end-if
            end-if
         end-if
         break
      When-Other
       display '*******************************************************************'
       display 'Invalid Distribution Code provided'
       display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,D,E,F,G,H,J,K,L,N,P,Q,R,S,T,U,W'
       display '*******************************************************************'
       stop
       break
     end-evaluate
  end-if
end-procedure
                                                                                                                       !RSI-HCM105192 End

!***********************************************************************
begin-procedure Process-for-T-record
!***********************************************************************
  Let $Addl_State_found = 'N'
begin-SELECT
A1.COMPANY
A1.DESCR
A1.FEDERAL_EIN
A1.ADDRESS1
A1.ADDRESS2
A1.CITY
A1.STATE
A1.POSTAL

  move 'N' to $EmployeeFound

  if &A1.COMPANY = $COMPANY                            !get transmit company info
    move &A1.Federal_EIN to $TransmitterEIN 099999999
    move &A1.Descr       to $TransmitterName
    move &A1.Address1    to $TransmitterAddr
    move &A1.City        to $TransmitterCity
    move &A1.State       to $TransmitterState
    let $TransmitterZip = RTRIM(&CT.Postal,' ')
    unstring $TransmitterZip by '-' into $str1 $str2
    string $str1 $str2 by '' into $TransmitterZip
  end-if

  do Validate-Employee-Mailing-Address
  do Read-Employee-Data-Firstpass

FROM  PS_COMPANY_TBL A1
#ifdef TAXTEST
WHERE TAX_REPORT_TYPE = '2'
#else
WHERE TAX_REPORT_TYPE = 'R'  !1099-R Reporting Company
#endif
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = A1.COMPANY
         AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if $SelectEEs = 'F'

    do Open-File
    do Write-T-Record
  end-if

end-procedure

!***********************************************************************
begin-procedure Validate-Employee-Mailing-Address
!***********************************************************************
   Show ''
   Show 'Checking for Payees without Home and Mailing Addresses'
   Show ''
   Let #Val_cnt = 0
begin-SELECT
VC2.EMPLID
VC3.NATIONAL_ID
VC2.NAME
VEB2.EMPLID

   let $Mail_Add_Emplid = &VC2.EMPLID

   do Validate-Employee-Home-Address

 FROM PS_EARNINGS_BAL VEB2, PS_PERSON_NAME VC2, PS_PERS_NID VC3
WHERE VEB2.COMPANY         = &A1.Company
  AND VC3.EMPLID           = VC2.EMPLID
  AND VC3.COUNTRY          = {NID_Country}
  AND VC3.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND VEB2.EMPLID          = VC2.EMPLID
  AND VEB2.ERNCD          IN [$SelectedEarns]
  AND VEB2.BALANCE_YEAR    = &TX.Balance_Year
  AND VEB2.BALANCE_ID      = $Calendar_Year_Id
  AND VEB2.GRS_YTD         > 0
  AND VEB2.BALANCE_PERIOD  =
      (SELECT MAX(EB3.BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL EB3
       WHERE  EB3.EMPLID            = VEB2.EMPLID
         AND  EB3.COMPANY           = VEB2.COMPANY
         AND  EB3.BALANCE_YEAR      = VEB2.BALANCE_YEAR
         AND  EB3.BALANCE_ID        = VEB2.BALANCE_ID
         AND  EB3.EMPL_RCD          = VEB2.EMPL_RCD
         AND  EB3.SPCL_BALANCE      = VEB2.SPCL_BALANCE
         AND  EB3.ERNCD             = VEB2.ERNCD)
  AND ( 1 > (select count(V.EMPLID) from PS_PERSON_ADDRESS V
                           WHERE V.EMPLID = VEB2.EMPLID
                             and V.ADDRESS_TYPE = 'MAIL') )
ORDER BY VC3.NATIONAL_ID
end-SELECT
  If #Val_cnt > 0
     Show ''
     Show 'WARNING: Payee(s) with missing addresses (Home or Mailing) '
     Show '         are by-passed and not included in the print or IRS files'
     Show ''
  else
     Show ''
     Show 'No payees with missing Home or Mailing Addresses'
     Show ''
  end-if
end-procedure

!***********************************************************************
begin-procedure Validate-Employee-Home-Address
!***********************************************************************
begin-SELECT
HM2.EMPLID
HM3.NATIONAL_ID
HM2.NAME
HOM2.EMPLID
   let #Val_cnt = #Val_cnt + 1

   Show  &HM2.EMPLID ' ' &HM2.NAME ' ' &HM3.NATIONAL_ID

 FROM PS_EARNINGS_BAL HOM2, PS_PERSON_NAME HM2, PS_PERS_NID HM3
WHERE HOM2.COMPANY         = &A1.Company
  AND HM3.EMPLID           = $Mail_Add_Emplid
  AND HM3.COUNTRY          = {NID_Country}
  AND HM3.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND HOM2.EMPLID          = $Mail_Add_Emplid
  AND HOM2.ERNCD          IN [$SelectedEarns]
  AND HOM2.BALANCE_YEAR    = &TX.Balance_Year
  AND HOM2.BALANCE_ID      = $Calendar_Year_Id
  AND HOM2.GRS_YTD         > 0
  AND HOM2.BALANCE_PERIOD  =
      (SELECT MAX(HOM3.BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL HOM3
       WHERE  HOM3.EMPLID            = HOM2.EMPLID
         AND  HOM3.COMPANY           = HOM2.COMPANY
         AND  HOM3.BALANCE_YEAR      = HOM2.BALANCE_YEAR
         AND  HOM3.BALANCE_ID        = HOM2.BALANCE_ID
         AND  HOM3.EMPL_RCD          = HOM2.EMPL_RCD
         AND  HOM3.SPCL_BALANCE      = HOM2.SPCL_BALANCE
         AND  HOM3.ERNCD             = HOM2.ERNCD)
  AND ( 1 > (select count(H.EMPLID) from PS_PERSON_ADDRESS H
                           WHERE H.EMPLID = HOM2.EMPLID
                             and H.ADDRESS_TYPE = 'HOME') )
  AND HM2.EMPLID           = HM3.EMPLID
ORDER BY HM3.NATIONAL_ID
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Read-Employee-Data-Firstpass
!***********************************************************************
begin-SELECT
C2.EMPLID
C3.NATIONAL_ID
C2.NAME
EB2.EMPLID

    let #B_Count = #B_Count + 1
    if $Addl_State_found = 'N'
      do Check-addl-state-rec
    end-if
                                                                                                                       !RSI-HCM105651 Begin
    let $B_Emplid = &EB2.EmplID
    do Select-1099R-Allocable-data
                                                                                                                       !RSI-HCM105651 End
 FROM PS_EARNINGS_BAL EB2, PS_NAMES C2, PS_PERS_NID C3
WHERE EB2.COMPANY         = &A1.Company
  AND C3.EMPLID           = C2.EMPLID
  AND C3.COUNTRY          = {NID_Country}
  AND C3.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND C2.NAME_TYPE = 'PRI'
  AND C2.EFFDT =
      (SELECT MAX(CX.EFFDT)
       FROM   PS_NAMES CX
       WHERE  CX.EMPLID    = C2.EMPLID
         AND  CX.NAME_TYPE = C2.NAME_TYPE
         AND  CX.EFFDT    <= $AsOfDate)
  AND EB2.EMPLID          = C2.EMPLID
  AND EB2.ERNCD          IN [$SelectedEarns]
  AND EB2.BALANCE_YEAR    = &TX.Balance_Year
  AND EB2.BALANCE_ID      = $Calendar_Year_Id
  AND EB2.GRS_YTD         > 0
  AND EB2.BALANCE_PERIOD  =
      (SELECT MAX(EB3.BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL EB3
       WHERE  EB3.EMPLID            = EB2.EMPLID
         AND  EB3.COMPANY           = EB2.COMPANY
         AND  EB3.BALANCE_YEAR      = EB2.BALANCE_YEAR
         AND  EB3.BALANCE_ID        = EB2.BALANCE_ID
         AND  EB3.EMPL_RCD          = EB2.EMPL_RCD
         AND  EB3.SPCL_BALANCE      = EB2.SPCL_BALANCE
         AND  EB3.ERNCD             = EB2.ERNCD)
  AND EXISTS
        (SELECT 'X'
         FROM   PS_ADDRESSES PAD2
         WHERE  PAD2.EMPLID     = C2.EMPLID
           AND  PAD2.ADDRESS_TYPE  IN ('HOME','MAIL')
           AND  PAD2.EFFDT =
             (SELECT MAX(PAD22.EFFDT)
              FROM   PS_ADDRESSES PAD22
              WHERE  PAD22.EMPLID       = PAD2.EMPLID
                AND  PAD22.ADDRESS_TYPE = PAD2.ADDRESS_TYPE
                AND  PAD22.EFF_STATUS   = 'A'
                AND  PAD22.EFFDT       <= $AsOfDate))
GROUP BY EB2.EMPLID, C2.EMPLID, C3.NATIONAL_ID, C2.NAME
ORDER BY C3.NATIONAL_ID
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Check-addl-state-rec
!***********************************************************************
  Let $T_State = ''
begin-SELECT DISTINCT
TD1.STATE

  if $T_State <> ''
    Let $Addl_State_found = 'Y'
    Show ' '
    Show 'Only federal amounts will be reported for payees on the electronic file created by this'
    Show 'program.  No state amounts can be reported because one or more payees has distribution and/or'
    Show 'tax amounts for multiple states.  IRS/MCC specifications for reporting 1099-R data to states'
    Show 'in the Combined Federal/State Filing Program do not provide for reporting payees with'
    Show 'distribution and/or tax amounts in multiple states.'
    If $FedStateFiler = '1'
      Let $FedStateFiler = ''
      Show 'Combined Federal/State Filer Indicator is reset to " " in the electronic file.'
    End-if
    Show ' '
    EXIT-SELECT
  end-if
  move &TD1.STATE to $T_State

FROM  PS_TAX_BALANCE TD1
WHERE TD1.EMPLID        = &EB2.EmplID
  AND TD1.COMPANY       = &A1.Company
  AND TD1.TAX_CLASS     = 'H'   !Withholding
  AND TD1.BALANCE_YEAR  = &TX.Balance_Year
  AND TD1.BALANCE_ID    = $Calendar_Year_Id
  AND TD1.STATE        <> '$U'
  AND TD1.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_TAX_BALANCE
        WHERE EMPLID        = TD1.EMPLID
          AND COMPANY       = TD1.COMPANY
          AND BALANCE_YEAR  = TD1.BALANCE_YEAR
          AND BALANCE_ID    = TD1.BALANCE_ID
          AND STATE         = TD1.STATE
          AND LOCALITY      = TD1.LOCALITY
          AND TAX_CLASS     = TD1.TAX_CLASS)
  AND (TD1.TXGRS_YTD > 0   OR   TD1.TAX_YTD > 0)
ORDER BY TD1.STATE
end-select
end-procedure

!***********************************************************************
begin-procedure Read-Earnings-Data
!***********************************************************************
begin-SELECT
C.EMPLID
C1.NATIONAL_ID
C.NAME
EB.EMPLID
#ifdef DB2ALL
DECIMAL(SUM(EB.GRS_YTD),15,3) &EB.Grs_YTD
#else
SUM(EB.GRS_YTD) &EB.Grs_YTD
#endif

  do Validate-Addresses

  if &EB.Grs_YTD > 0
   do Select-1099R-Data
  else
   do Negative-Earnings-message
  end-if

 FROM PS_EARNINGS_BAL EB, PS_NAMES C, PS_PERS_NID C1
WHERE EB.COMPANY           = &A.Company  AND C1.EMPLID = C.EMPLID AND C1.COUNTRY = {NID_Country}
  AND C1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND C.NAME_TYPE = 'PRI'
  AND C.EFFDT =
      (SELECT MAX(CZ.EFFDT)
       FROM PS_NAMES CZ
       WHERE  CZ.EMPLID    = C.EMPLID
         AND  CZ.NAME_TYPE = C.NAME_TYPE
         AND  CZ.EFFDT    <= $AsOfDate)
  AND EB.EMPLID            = C.EMPLID
  AND EB.ERNCD            IN [$SelectedEarns]
  [$SelectedEEs]
  AND EB.BALANCE_YEAR     = &TX.Balance_Year
  AND EB.BALANCE_ID    = $Calendar_Year_Id
  AND EB.BALANCE_PERIOD           =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID            = EB.EMPLID
         AND  COMPANY           = EB.COMPANY
         AND  BALANCE_YEAR      = EB.BALANCE_YEAR
         AND  BALANCE_ID        = EB.BALANCE_ID
         AND  SPCL_BALANCE      = EB.SPCL_BALANCE
         AND  EMPL_RCD          = EB.EMPL_RCD
         AND  ERNCD             = EB.ERNCD)
  AND EXISTS
        (SELECT 'X'
         FROM PS_ADDRESSES PAD1
         WHERE PAD1.EMPLID     = C.EMPLID
         AND PAD1.ADDRESS_TYPE  IN ('HOME','MAIL')
         AND PAD1.EFFDT =
             (SELECT MAX(PAD11.EFFDT)
                FROM PS_ADDRESSES PAD11
               WHERE PAD11.EMPLID       = PAD1.EMPLID
                 AND PAD11.ADDRESS_TYPE = PAD1.ADDRESS_TYPE
                 AND PAD11.EFF_STATUS   = 'A'
                 AND PAD11.EFFDT       <= $AsOfDate))
GROUP BY EB.EMPLID, C.EMPLID, C1.NATIONAL_ID, C.NAME
ORDER BY C1.NATIONAL_ID
end-SELECT
end-procedure

!***********************************************************************
begin-procedure Validate-Addresses
!***********************************************************************

move '' to $Ad_Address1
move '' to $Ad_Address2
move '' to $Ad_City
move '' to $Ad_State
move '' to $Ad_Postal
move '' to $Ad_Country
move '' to $Ad_Cry_Desc

do Validate-Mailing-Address

if &M.EFF_STATUS = 'A'
   move &M.ADDRESS1       to $Ad_Address1
   move &M.ADDRESS2       to $Ad_Address2
   move &M.CITY           to $Ad_City
   move &M.STATE          to $Ad_State
   move &M.POSTAL         to $Ad_Postal
   move &M.COUNTRY        to $Ad_Country
   move &CRYM.DESCRSHORT  to $Ad_Cry_Desc
else

   do Validate-Home-Address

   if &H.EFF_STATUS = 'A'
      move &H.ADDRESS1       to $Ad_Address1
      move &H.ADDRESS2       to $Ad_Address2
      move &H.CITY           to $Ad_City
      move &H.STATE          to $Ad_State
      move &H.POSTAL         to $Ad_Postal
      move &H.COUNTRY        to $Ad_Country
      move &CRYH.DESCRSHORT  to $Ad_Cry_Desc
   end-if
end-if
end-procedure

!***********************************************************************
begin-procedure Validate-Mailing-Address
!***********************************************************************

begin-SELECT
M.EFF_STATUS
M.ADDRESS1
M.ADDRESS2
M.CITY
M.STATE
M.POSTAL
M.COUNTRY
CRYM.DESCRSHORT

 FROM PS_ADDRESSES M, PS_COUNTRY_TBL CRYM
WHERE M.EMPLID = &C.EMPLID
  AND M.ADDRESS_TYPE = 'MAIL'
  AND M.EFFDT =
      (SELECT MAX(N.EFFDT)
       FROM PS_ADDRESSES N
       WHERE  N.EMPLID       = M.EMPLID
         AND  N.ADDRESS_TYPE = M.ADDRESS_TYPE
         AND  N.EFFDT       <= $AsOfDate)
  AND CRYM.COUNTRY = M.COUNTRY
GROUP BY M.EFF_STATUS, M.ADDRESS1, M.ADDRESS2, M.CITY, M.STATE, M.POSTAL, M.COUNTRY,
         CRYM.DESCRSHORT
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Validate-Home-Address
!***********************************************************************

begin-SELECT
H.EFF_STATUS
H.ADDRESS1
H.ADDRESS2
H.CITY
H.STATE
H.POSTAL
H.COUNTRY
CRYH.DESCRSHORT

 FROM PS_ADDRESSES H, PS_COUNTRY_TBL CRYH
WHERE H.EMPLID = &C.EMPLID
  AND H.ADDRESS_TYPE = 'HOME'
  AND H.EFFDT =
      (SELECT MAX(N2.EFFDT)
       FROM PS_ADDRESSES N2
       WHERE  N2.EMPLID       = H.EMPLID
         AND  N2.ADDRESS_TYPE = H.ADDRESS_TYPE
         AND  N2.EFFDT       <= $AsOfDate)
  AND CRYH.COUNTRY = H.COUNTRY
GROUP BY H.EFF_STATUS, H.ADDRESS1, H.ADDRESS2, H.CITY, H.STATE, H.POSTAL, H.COUNTRY,
         CRYH.DESCRSHORT
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Select-1099R-Data
!***********************************************************************
  move 0 to #FedTxGrs_YTD
  move 0 to #FedTax_YTD
  move 0 to #StateTax_YTD
  move 0 to #LocalTax_YTD
  move 0 to #StateTxGrs_YTD
  move 0 to #LocalTxGrs_YTD
  move '' to $TaxState
  move '' to $TaxStateEIN
  move '' to $TaxLocality

begin-SELECT
D.STATE
D.LOCALITY
D.TXGRS_YTD
D.TAX_YTD

  move 'Y'  to  $EE_Data_Selected

  let $State = rtrim(&D.State, ' ')
  move &D.TxGrs_YTD to #FedTxGrs_YTD
  move &D.Tax_YTD   to #FedTax_YTD
  move &A.Company to $Company
  do Get-State-Tax-Data

FROM  PS_TAX_BALANCE D
WHERE D.EMPLID        = &EB.EmplID
  AND D.COMPANY       = &A.Company
  AND D.TAX_CLASS     = 'H'   !Withholding
  AND D.BALANCE_YEAR  = &TX.Balance_Year
  AND D.BALANCE_ID    = $Calendar_Year_Id
  AND D.STATE         = '$U'
  AND D.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_TAX_BALANCE
        WHERE EMPLID        = D.EMPLID
          AND COMPANY       = D.COMPANY
          AND BALANCE_YEAR = D.BALANCE_YEAR
          AND BALANCE_ID = D.BALANCE_ID
          AND STATE         = D.STATE
          AND TAX_CLASS     = D.TAX_CLASS)
  AND (D.TXGRS_YTD > 0   OR   D.TAX_YTD > 0)
ORDER BY D.STATE, D.LOCALITY
end-SELECT

  let #PayableAmt1 = 100 * &EB.Grs_YTD
  let #PayableAmt2 = 100 * #FedTxGrs_YTD
  let #PayableAmt4 = 100 * #FedTax_YTD
  let #EB.Grs_YTD  = &EB.Grs_YTD

  add #PayableAmt1 to #ControlTotal1C
  add #PayableAmt2 to #ControlTotal2C
  add #PayableAmt4 to #ControlTotal4C

  Let $TaxBalanceFound = 'N'
  Let $FedRecWritten   = 'N'
                                                                                                                       !RSI-HCM105651 Begin
   let $B_Emplid = &EB.EmplID
   do Select-1099R-Allocable-data
                                                                                                                       !RSI-HCM105651 End
begin-SELECT
D1.STATE       () on-break level=1 print=never after=Print-1099R
D1.LOCALITY
D1.TXGRS_YTD
D1.TAX_YTD

 move 'Y'  to  $EE_Data_Selected

 Let $TaxBalanceFound = 'Y'

 If $TaxLocality <> ''    ! Previous Tax Locality
   do Print-1099R
 End-if

 if RTRIM(&D1.Locality,' ') = ''
   let $TaxState = rtrim(&D1.State, ' ')
   move &D1.Tax_YTD to #StateTax_YTD
   move &D1.TxGrs_YTD to #StateTxGrs_YTD
   move $TaxState to $State
   move &A.Company to $Company
   do Get-State-Tax-Data
   move &Employer_ID_SWT to $TaxStateEIN
 else                                      !Local tax
   let $TaxState = rtrim(&D1.State, ' ')
   move &D1.Locality to $Locality
   move $TaxState to $State
   do Get-Local-Tax-Data
   move &D1.Tax_YTD to #LocalTax_YTD
   move &D1.TxGrs_YTD to #LocalTxGrs_YTD
 end-if

FROM  PS_TAX_BALANCE D1
WHERE D1.EMPLID        = &EB.EmplID
  AND D1.COMPANY       = &A.Company
  AND D1.TAX_CLASS     = 'H'   !Withholding
  AND D1.BALANCE_YEAR  = &TX.Balance_Year
  AND D1.BALANCE_ID    = $Calendar_Year_Id
  AND D1.STATE        <> '$U'
  AND D1.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
         FROM PS_TAX_BALANCE
        WHERE EMPLID        = D1.EMPLID
          AND COMPANY       = D1.COMPANY
          AND BALANCE_YEAR  = D1.BALANCE_YEAR
          AND BALANCE_ID    = D1.BALANCE_ID
          AND STATE         = D1.STATE
          AND LOCALITY      = D1.LOCALITY
          AND TAX_CLASS     = D1.TAX_CLASS)
  AND (D1.TXGRS_YTD > 0   OR   D1.TAX_YTD > 0)
ORDER BY D1.STATE, D1.LOCALITY
end-SELECT

  If $TaxBalanceFound = 'N'
    do Print-1099R
  End-If

end-procedure
                                                                                                                       !RSI-HCM105651 Begin
begin-procedure Select-1099R-Allocable-data

  let #rsi_amt_allocable = 0
  let $year_1099r = ' '
  let $rsi_fatca = ' '
  let $rsi_fatca_file = ' '                                                                                            !RSI-HCM105841

begin-SELECT
AZ.RSI_AMT_ALLOCABLE,
AZ.YEAR,
AZ.RSI_FATCA

   let #rsi_amt_allocable = &AZ.RSI_AMT_ALLOCABLE
   let $year_1099r = &AZ.YEAR
   let $rsi_fatca = &AZ.RSI_FATCA
   let $rsi_fatca_file = COND($rsi_fatca='Y','1',' ')                                                                  !RSI-HCM105841
   let $rsi_fatca = COND($rsi_fatca='Y','X',' ')

FROM PS_RSI_1099R_DATA AZ
WHERE AZ.EMPLID = $B_EmplID
  AND AZ.EFFDT  =
  (SELECT MAX(EFFDT)
    FROM PS_RSI_1099R_DATA
     WHERE EMPLID = AZ.EMPLID
       AND EFFDT <= $AsOfToday)
end-SELECT

    if #rsi_amt_allocable <> 0
        Let $Test_AB_Co = &A1.Company || ';'
        if Not INSTR($AB_Company, $Test_AB_Co,0)
            Let $AB_Company = $AB_Company || $Test_AB_Co
        end-if
     end-if

end-procedure
                                                                                                                       !RSI-HCM105651 End
!***********************************************************************
begin-procedure Print-1099R
!***********************************************************************
  if $Layout_Style = '4VERTICAL'
    do Print-1099R-4VERTICAL
  else
    if $Layout_Style = '4CORNER' or $Layout_Style = '4CORNERPS'
      do Print-1099R-4CORNER
      if $Layout_Style = '4CORNERPS'
        do LongNameAddress
      end-if
    else
      do Print-1099R-2VERTICAL
    end-if
  end-if

  if $SelectEEs = 'F'
    if $EmployeeFound = 'N'
      do Write-A-Record
      move 'Y' to $EmployeeFound
    end-if

    if $Addl_State_found = 'N'
      Do Write-B-Record
    else
       if $FedRecWritten   = 'N'
         Let #StateTax_YTD = 0
         Do Write-B-Record
         Let $FedRecWritten = 'Y'
       end-if
    end-if

  end-if
  move 0 to #StateTax_YTD
  move 0 to #LocalTax_YTD
  move 0 to #StateTxGrs_YTD
  move 0 to #LocalTxGrs_YTD
  move 0 to #FedTxGrs_YTD
  move 0 to #FedTax_YTD
  move 0 to #EB.Grs_YTD
  move '' to $TaxState
  move '' to $TaxStateEIN
  move '' to $TaxLocality
  move 0 to #PayableAmt1
  move 0 to #PayableAmt2
  move 0 to #PayableAmt4
end-procedure

!***********************************************************************
begin-procedure Print-1099R-2VERTICAL
!***********************************************************************
  do Next-Form-2VERTICAL
  print &A.Descr         (1,1,32)
  print &A.Address1       (+1,1,32)
  if RTRIM(&A.Address2,' ') <> ''
    print &A.Address2     (+1,1,32)
  end-if
  let $A.City = RTRIM(&A.City,' ')
  print $A.City          (+1,1)
  print &A.State         ()         edit bxx
  print $ErZip           (+1,1)
  print $PayerFederalEIN (10,1)     edit xx-xxxxxxx
  move &C.Name to $Name
  do Rotate-Name
  move $LastName to $TempNameControl
  do Modify-Address
  do AddHypenZip($Ad_Country, $Ad_Postal, $Zip)
  print &C1.NATIONAL_ID  (0,17)     edit xxx-xx-xxxx
  print $Name            (13,1,32)
  print $Ad_Address1      (+3,1,32)

  if RTRIM($Ad_Address2,' ') <> ''
    print $Ad_Address2    (+1,1,32)
    print $CityStateZipCountry  (+2,1)
  else
    print $CityStateZipCountry  (+3,1)
  end-if

  do Format-Number(#EB.Grs_YTD, $out, 'b9999999.99')
  print $out             (1,35)
  do Format-Number(#FedTxGrs_YTD, $out, 'b9999999.99')
  if #FedTxGrs_YTD = 0
    if INSTR('6GH',$DistribCd,1) <> 0
       move '       0' to $out
    end-if
  end-if
  print $out             (4,35)
  print $TotalDistrib    (6,58)
  print $DistribCd       (17,38)
  do Format-Number(#FedTax_YTD, $out, 'b9999999.99')
  print $out             (10,47)
                                                                                                                       !RSI-HCM105651 Begin
  do Format-Number(#rsi_amt_allocable, $out, 'b9999999.99')
  print $out             (22,2)
  print $year_1099r      (,+3,4)
  print $rsi_fatca       (,+8,1)
                                                                                                                       !RSI-HCM105651 End
  do Format-Number(#StateTax_YTD, $out, 'b9999999.99')
  print $out             (22,35)
  print $TaxState        (22,48,2)
  print $TaxStateEIN     (,+1)
  do Format-Number(#StateTxGrs_YTD, $out, 'b9999999.99')
  print $out             (22,61)
  do Format-Number(#LocalTax_YTD,$out,'b9999999.99')
  print $out             (25,35)
  print $TaxLocality     (25,48,11)
  do Format-Number(#LocalTxGrs_YTD,$out,'b9999999.99')
  print $out             (25,61)
end-procedure

!***********************************************************************
begin-procedure Next-Form-2VERTICAL
!***********************************************************************
  if #Form# <> 2
    add 1 to #Form#
  else
    move 1 to #Form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      next-column
      print ' ' (#TOPMARGIN,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
      break
    when = 2
      next-listing
      print ' ' (#CENTERSPLIT,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
  end-evaluate
end-procedure

!***********************************************************************
begin-procedure Print-1099R-4VERTICAL
!***********************************************************************

  do Modify-Address

  move 1 to #j
  while #j <= #FormsPerPage / #EmployeesPerPage  !loop for individual ee's
    do Next-Form-4VERTICAL
    print &A.Descr         (1,1,32)
    print &A.Address1       (+1,1,32)
    if RTRIM(&A.Address2,' ') <> ' '
      print &A.Address2     (+1,1,32)
    end-if
    let $A.City = RTRIM(&A.City,' ')
    print $A.City          (+1,1)
    print &A.State         ()         edit bxx
    print $ErZip           (+1,1)
    print $PayerFederalEIN (7,1)     edit xx-xxxxxxx
    move &C.Name to $Name
    do Rotate-Name
    move $LastName to $TempNameControl
    print &C1.NATIONAL_ID  (3,38)     edit xxx-xx-xxxx
    print $Name            (6,38,32)
    print $Ad_Address1       (+1,38,32)
    if RTRIM($Ad_Address2,' ') <> ' '
      print $Ad_Address2     (+1,38,32)
    end-if

    print $CityStateZipCountry  (+1,38)
    do Format-Number(#EB.Grs_YTD, $out, 'b9999999.99')
    print $out             (1,38)
    do Format-Number(#FedTxGrs_YTD, $out, 'b9999999.99')
    if #FedTxGrs_YTD = 0
      if INSTR('6GH',$DistribCd,1) <> 0
         move '       0' to $out
      end-if
    end-if
    print $out             (1,51)
    print $TotalDistrib    (4,64)
    print $DistribCd       (11,24)
    do Format-Number(#FedTax_YTD, $out, 'b9999999.99')
    print $out             (9,4)
    do Format-Number(#StateTax_YTD, $out, 'b9999999.99')
    print $out             (13,38)
    print $TaxState        (13,50)
    print $TaxStateEIN     (,+1)
    do Format-Number(#StateTxGrs_YTD, $out, 'b9999999.99')
    print $out             (13,65)
    do Format-Number(#LocalTax_YTD,$out,'b9999999.99')
    print $out             (16,38)
    print $TaxLocality     (16,50,11)
    do Format-Number(#LocalTxGrs_YTD,$out,'b9999999.99')
    print $out             (16,65)
    add 1 to #j
  end-while
end-procedure

!***********************************************************************
begin-procedure Next-Form-4VERTICAL
!***********************************************************************
  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #Form#
  end-if
  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      next-column
      print ' ' (#TOPMARGIN,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
      break
    when = 2
      next-listing
      print ' ' (#TOPSPLIT,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
    when = 3
      next-listing
      print ' ' (#CENTERSPLIT,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
    when = 4
      next-listing
      print ' ' (#BOTTOMSPLIT,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
  end-evaluate
end-procedure

!***********************************************************************
begin-procedure Print-1099R-4CORNER
!***********************************************************************

  do Modify-Address

  move 1 to #j
  while #j <= #FormsPerPage / #EmployeesPerPage  !loop for individual ee's
    do Next-Form-4CORNER
    do Format-Number(#EB.Grs_YTD, $out, 'b9999999.99')
    print $out             (2,1)
    do Format-Number(#FedTxGrs_YTD,$out,'b9999999.99')
    print $out             (2,13)
    print $TotalDistrib    (5,20)
    print &A.Descr         (7,2,35)
    print &A.Address1       (+1,2,35)
    if RTRIM(&A.Address2,' ') <> ''
      print &A.Address2     (+1,2,35)
    end-if
    let $A.City = RTRIM(&A.City,' ')
    print $A.City          (+1,2)
    print &A.State         ()         edit bxx
    print $ErZip           (+1,2)
    print $PayerFederalEIN (13,2)   edit xx-xxxxxxx
    print &C1.NATIONAL_ID  (13,22)     edit xxx-xx-xxxx
    do Format-Number(#FedTax_YTD,$out,'b9999999.99')
    print $out             (16,13)
    print $DistribCd       (19,16)
    move &C.Name to $Name
    do Rotate-Name
    move $LastName to $TempNameControl
    print $Name            (24,2,35)
    print $Ad_Address1       (+1,2,35)

    if RTRIM($Ad_Address2,' ') > ''
      print $Ad_Address2     (+1,2,35)
    end-if

    print $CityStateZipCountry  (+1,2)
                                                                                                                       !RSI-HCM105651 Begin
    print $year_1099r      (30,18)
    do Format-Number(#rsi_amt_allocable, $out, 'b9999999.99')
    print $out             (30,25)
                                                                                                                       !RSI-HCM105651 End
    if &TX.Balance_Year < 2011
       do Format-Number(#StateTax_YTD,$out,'b9999999.99')
       print $out             (30,25)
       print $TaxState        (32,2,2)
       print $TaxStateEIN     (32,4)
    else
       do Format-Number(#StateTax_YTD,$out,'b9999999.99')
       print $out             (32,2)
       print $TaxState        (32,14,2)
       print $TaxStateEIN     (32,16,9)
    end-if

    do Format-Number(#StateTxGrs_YTD, $out, 'b9999999.99')
    print $out             (32,25)
    do Format-Number(#LocalTax_YTD,$out,'b9999999.99')
    print $out             (34,2)
    print $TaxLocality     (34,14,11)
    print ''               (#LASTPRINTLINE,)
    do Format-Number(#LocalTxGrs_YTD,$out,'b9999999.99')
    print $out             (34,25)
    add 1 to #j
  end-while
end-procedure

!***********************************************************************
begin-procedure Next-Form-4CORNER
!***********************************************************************
  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#
    when = 1
      if $Layout_Style <> '4CORNERPS'
        new-page
      else
        if $First_page_PS = 'N'
          next-listing   ! for all pages except the first - layout: 4CORNERPS
        end-if
      Let $First_page_PS = 'N'
      end-if
      print ' ' (#TOPMARGIN,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
      break
    when = 2
      next-column
      print ' ' (#LASTPRINTLINE,1)
      break
    when = 3
      next-listing
      print ' ' (#CENTERSPLIT,1)
      next-listing
      print ' ' (#LASTPRINTLINE,1)
      break
    when = 4
      next-column
      print ' ' (#LASTPRINTLINE,1)
  end-evaluate
end-procedure

!***********************************************************************
begin-procedure Modify-Address
!***********************************************************************

  do AddHypenZip($Ad_Country, $Ad_Postal, $Zip)
  let $C.City = RTRIM($Ad_City,' ')

  let $PAD.State = RTRIM($Ad_State,' ')
  let $Zip = RTRIM($Zip,'  ')
  let $PAD.CountryDescr = RTRIM($Ad_Cry_Desc, ' ')
  if $PAD.State <> ''
    let $StateZipCountry = ' ' || $PAD.State || ' '
  else
    if $Ad_Cry_Desc = 'USA'
      let $StateZipCountry = ' '
    else
      let $StateZipCountry = ''
    end-if
  end-if
  if $Ad_Cry_Desc <> 'USA'
    if $StateZipCountry = ''
       and $Zip = ''
      let $StateZipCountry = $PAD.CountryDescr
    else
      let $StateZipCountry = $StateZipCountry || $Zip || ' '
                || $PAD.CountryDescr
    end-if
  else
    let $StateZipCountry = $StateZipCountry || $Zip
  end-if
  let #Length = LENGTH(RTRIM($StateZipCountry,'  '))
  let $C.City = SUBSTR(RTRIM($C.City,' '),1,(32 - #Length - 5) )

  if $Ad_Cry_Desc <> 'USA'
    if ($C.City = '' and $PAD.State = '') or
       ($C.City <> '' and $PAD.State <> '')
      let $CityStateZipCountry = $C.City || $StateZipCountry
    else
      let $CityStateZipCountry = $C.City || ' ' || $StateZipCountry
    end-if
  else
    let $CityStateZipCountry = $C.City || $StateZipCountry
  end-if

end-procedure

!***********************************************************************
begin-procedure Write-A-Record
!***********************************************************************
  add 1 to #A_Count

  move '9 '           to $ReturnType
  move '124      '    to $AmountCodes
  move ' '            to $SvcBureauInd
  move ' '            to $ForeignEntyInd
  move &A.Descr       to $FirstPayerNameLine
  move ' '            to $SecondPayerNameLine
  move '0'            to $TransferAgentInd
  move &A.Address1    to $PayerShippingAddress
  move &A.City        to $PayerCity
  move &A.State       to $PayerState
                                                                                                                       !RSI-HCM105651 Begin
    Let $Test_AB_Co = &A.Company || ';'
    if INSTR($AB_Company,$Test_AB_Co,0)
        move '124B'    to $AmountCodes
    end-if
                                                                                                                        !RSI-HCM105651 End
  let $PayerZip = RTRIM(&A.Postal,' ')
  unstring $PayerZip by '-' into $str1 $str2
  string $str1 $str2 by '' into $PayerZip

  uppercase $FirstPayerNameLine
  uppercase $SecondPayerNameLine
  uppercase $PayerShippingAddress
  uppercase $PayerCity
  uppercase $PayerState
  uppercase $PayerZip

  Add 1 to #FileCount
  add 1 to #RecordSeqNbr
  move #RecordSeqNbr to $RecordSeqNbr  09999999

  write 10 from      'A':1         !  1          record type
            $PaymentYear:4         !  2 -   5    payment year
          $FedStateFiler:1         !  6          combined fed/state filer
                     $Sp:5         !  7 -  11
        $PayerFederalEIN:9         ! 12 -  20    payer's tin
       $PayerNameControl:4         ! 21 -  24    payer's name control
          $LastFilingInd:1         ! 25          last filing indicator
             $ReturnType:2         ! 26 -  27    type of return
            $AmountCodes:16        ! 28 -  43    amount codes
                     $Sp:4         ! 44 -  47
                     $Sp:4         ! 48 -  51
         $ForeignEntyInd:1         ! 52          foreign entity indicator
     $FirstPayerNameLine:40        ! 53 -  92    first payer name line
    $SecondPayerNameLine:40        ! 93 - 132    second payer name line
       $TransferAgentInd:1         !133          transfer agent indicator
   $PayerShippingAddress:40        !134 - 173    payer shipping address
              $PayerCity:40        !174 - 213    payer city
             $PayerState:2         !214 - 215    payer state
               $PayerZip:9         !216 - 224    payer zip
             $PayerPhone:15        !225 - 239    payer phone
                     $Sp:260       !240 - 499
           $RecordSeqNbr:8         !500 - 507    record sequence number
                     $Sp:243       !508 - 750
end-procedure

!***********************************************************************
begin-procedure Write-B-Record
!***********************************************************************

  add 1 to #FileCount

  move $DistribCd        to $DistributionCode
  move ' '               to $2ndTinNotice
  move ' '               to $CorrRtrnInd
  move '' to $PayeeNameControl
  move 1 to #j
  while #j <= LENGTH($TempNameControl)
    let $NextChar = SUBSTR($TempNameControl,#j,1)
    if $NextChar <> ' ' and $NextChar <> ''''
      let $PayeeNameControl = $PayeeNameControl || $NextChar
      if LENGTH($PayeeNameControl) = 4
        break
      end-if
    end-if
    add 1 to #j
  end-while

  move ' '               to $DirSalesInd
  move '2'               to $TINType
  move &C1.NATIONAL_ID   to $TIN
  let $PayeeACCOUNT_NUM = rtrim(&C.EMPLID,' ') || $DistribCd || rtrim(&A.COMPANY,' ')
  move ' '               to $IRA/SEPInd
  move '  '              to $PercentTotalDistrib
  if $TotalDistrib = 'X'
    move '1'             to $TotalDistribInd
  else
    move ' '             to $TotalDistribInd
  end-if
  move ' '               to $TaxableAmtInd

!  let #PayableAmt1 = 100 * &EB.Grs_YTD
!  let #PayableAmt2 = 100 * #FedTxGrs_YTD
!  let #PayableAmt4 = 100 * #FedTax_YTD
  let #StateIncTax = 100 * #StateTax_YTD

!  add #PayableAmt1 to #ControlTotal1C
!  add #PayableAmt2 to #ControlTotal2C
!  add #PayableAmt4 to #ControlTotal4C

  move #PayableAmt1      to $PayableAmt1 099999999999  !Gross Distribution
  move #PayableAmt2      to $PayableAmt2 099999999999  !Taxable Amount
  move 0                 to $PayableAmt3 099999999999  !Eligible for Capital Gain
  move #PayableAmt4      to $PayableAmt4 099999999999  !FWT Withheld
  move 0                 to $PayableAmt5 099999999999  !EE Contrib/Insur Premiums
  move 0                 to $PayableAmt6 099999999999  !Unrealized Appreciation
  move 0                 to $PayableAmt7 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmt8 099999999999  !Other
  move 0                 to $PayableAmt9 099999999999  !Total Contributions
  move 0                 to $PayableAmtA 099999999999  !IRA/SEP distribution not supported
  move 0                 to $PayableAmtB 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmtC 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmtD 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmtE 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmtF 099999999999  !Not Used for 1099-R
  move 0                 to $PayableAmtG 099999999999  !Not Used for 1099-R
  move #StateIncTax      to $StateIncTax 099999999999  !SWT Withheld
  move 0                 to $LocalIncTax 099999999999  !Local Withheld
                                                                                                                       !RSI-HCM105651 Begin
  If #rsi_amt_allocable <> 0
   let #rsi_amt_allocable_f  = #rsi_amt_allocable * 100
   move #rsi_amt_allocable_f   to $PayableAmtB 099999999999
   move #rsi_amt_allocable_f   to #PayableAmtB
   add  #rsi_amt_allocable_f   to #ControlTotalBC
  End-if
                                                                                                                       !RSI-HCM105651 End
  if $Ad_Cry_Desc = 'USA'
    move ' '             to $ForeignCountryInd
    move $Ad_Address1     to $PayeeMailingAddress
    move $Ad_City         to $PayeeCity
    let $PayeeState = rtrim($Ad_State, ' ')
    let $PayeeZip = RTRIM($Ad_Postal,' ')
    unstring $PayeeZip by '-' into $str1 $str2
    string $str1 $str2 by '' into $PayeeZip
    let $PayeeCityStateZip = rpad($PayeeCity, 40, ' ') || $PayeeState || $PayeeZip
                                   !position 448 - 487,   488 - 489      490 - 498
  else
    move '1'             to $ForeignCountryInd
    move $Ad_Address1     to $PayeeMailingAddress
    let $City            =    RTRIM($Ad_City, ' ')
    move $City           to   $PayeeCityStateZip
    concat $Ad_State      with $PayeeCityStateZip bxxb
    concat $Ad_Postal     with $PayeeCityStateZip
    concat $Ad_Country    with $PayeeCityStateZip
  end-if

  move &C.Name           to $FirstPayeeNameLine
  move ' '               to $SecondPayeeNameLine
  move ' '               to $SpecialDataEntries

  if $FedStateFiler = '1'
    and ($StateNumber = '01'
     or  $StateNumber = '04'
     or  $StateNumber = '05'
     or  $StateNumber = '06'
     or  $StateNumber = '07'
     or  $StateNumber = '08'
   !  or  $StateNumber = '09'
     or  $StateNumber = '10'
     !or  $StateNumber = '11'      ! RSI-HCM105192
     or  $StateNumber = '13'
     or  $StateNumber = '15'
     or  $StateNumber = '16'
     or  $StateNumber = '18'
     !or  $StateNumber = '19'      ! RSI-HCM105192
     or  $StateNumber = '20'
     or  $StateNumber = '22'
     or  $StateNumber = '23'
     or  $StateNumber = '24'
     or  $StateNumber = '25'
     or  $StateNumber = '26'      ! RSI-HCM103665
     or  $StateNumber = '27'
     or  $StateNumber = '28'
     or  $StateNumber = '29'
     or  $StateNumber = '30'
     or  $StateNumber = '31'
     or  $StateNumber = '34'
     or  $StateNumber = '35'
     or  $StateNumber = '37'
     or  $StateNumber = '38'
     or  $StateNumber = '39'
     or  $StateNumber = '45'
    ! or  $StateNumber = '47'
    !or  $StateNumber = '49'     ! RSI-HCM105192
     or  $StateNumber = '50'      ! RSI-HCM103665
     or  $StateNumber = '51'
     or  $StateNumber = '55')
    move $StateNumber    to $CombFedStateCode
    move $StateNumber    to #K
    array-add 1
              #PayableAmt1
              #PayableAmt2
              #PayableAmt3
              #PayableAmt4
              #PayableAmt5
              #PayableAmt6
              #PayableAmt7
              #PayableAmt8
              #PayableAmt9
              #StateIncTax
              #LocalIncTax
              #PayableAmtA
              #PayableAmtB
              #PayableAmtC
              #PayableAmtD
              #PayableAmtE
           to StateTotals(#K)
              Count
              ControlTotal(1)
              ControlTotal(2)
              ControlTotal(3)
              ControlTotal(4)
              ControlTotal(5)
              ControlTotal(6)
              ControlTotal(7)
              ControlTotal(8)
              ControlTotal(9)
              ControlTotal(10)
              ControlTotal(11)
              ControlTotal(12)
              ControlTotal(13)
              ControlTotal(14)
              ControlTotal(15)
              ControlTotal(16)
  else
    move ' '             to $CombFedStateCode
  end-if
  if $CombFedStateCode = '08'                !Hard coded due to discrepany between our database
     move '07'  to $CombFedStateCode         !and IRS
  end-if
  if $CombFedStateCode = '09'                !Hard coded due to discrepany between our database
     move '08'  to $CombFedStateCode         !and IRS
  end-if
  uppercase $PayeeNameControl
  uppercase $PayeeMailingAddress
  uppercase $PayeeCity
  uppercase $PayeeCityStateZip
  uppercase $FirstPayeeNameLine
  uppercase $SecondPayeeNameLine
  add 1 to #RecordSeqNbr
  move #RecordSeqNbr to $RecordSeqNbr  09999999
  add 1 to #BCount

  write 10 from      'B':1         !  1          record type
            $PaymentYear:4         !  2 -   5    payment year
            $CorrRtrnInd:1         !  6          corrected return indicator
       $PayeeNameControl:4         !  7 -  10    name control
                $TINType:1         ! 11          type of TIN
                    $TIN:9         ! 12 -  20    taxpayer i.d.
       $PayeeACCOUNT_NUM:20        ! 21 -  40    payer's account number
                     $Sp:4         ! 41 -  44    payer's office code (blanks)
                     $Sp:10        ! 45 -  54
            $PayableAmt1:12        ! 55 -  66    payment amount 1
            $PayableAmt2:12        ! 67 -  78    payment amount 2
            $PayableAmt3:12        ! 79 -  90    payment amount 3
            $PayableAmt4:12        ! 91 - 102    payment amount 4
            $PayableAmt5:12        !103 - 114    payment amount 5
            $PayableAmt6:12        !115 - 126    payment amount 6
            $PayableAmt7:12        !127 - 138    payment amount 7
            $PayableAmt8:12        !139 - 150    payment amount 8
            $PayableAmt9:12        !151 - 162    payment amount 9
            $PayableAmtA:12        !163 - 174    payment amount A
            $PayableAmtB:12        !175 - 186    payment amount B
            $PayableAmtC:12        !187 - 198    payment amount C
            $PayableAmtD:12        !199 - 210    payment amount D
            $PayableAmtE:12        !211 - 222    payment amount E
            $PayableAmtF:12        !223 - 234    payment amount F
            $PayableAmtG:12        !235 - 246    payment amount G
      $ForeignCountryInd:1         !247 -        foreign country indicator
     $FirstPayeeNameLine:40        !248 - 287    first payee name line
    $SecondPayeeNameLine:40        !288 - 327    second payee name line
                     $Sp:40        !328 - 367
    $PayeeMailingAddress:40        !368 - 407    payee mailing address
                     $Sp:40        !408 - 447
      $PayeeCityStateZip:51        !448 - 498    payee city, state, zip
                     $Sp:1         !499 - 499
           $RecordSeqNbr:8         !500 - 507    Record Sequence Number
                     $Sp:36        !508 - 543
                     $Sp:1         !544
       $DistributionCode:2         !545 - 546    distribution code
          $TaxableAmtInd:1         !547          taxable amt not determined ind
             $IRA/SEPInd:1         !548          IRA/SEP/SIMPLE indicator
        $TotalDistribInd:1         !549          total distribution
    $PercentTotalDistrib:2         !550 - 551    percentage of total distrib
                                                                                                                       !RSI-HCM105651 Begin
                    !$Sp:4         !552 - 555    First year of designated Roth Contribution(blanks)
             $year_1099r:4         !552 - 555    First year of designated Roth Contribution - Blank if no data
                                                                                                                       !RSI-HCM105651 End
                                                                                                                       !RSI-HCM105841 Begin
                    !$Sp:107       !556 - 662
         $rsi_fatca_file:1         !556
                     $Sp:106       !557 - 662
                                                                                                                       !RSI-HCM105841 End
     $SpecialDataEntries:60        !663 - 722    special data entries
            $StateIncTax:12        !723 - 734    state income tax withheld
            $LocalIncTax:12        !735 - 746    local income tax withheld
       $CombFedStateCode:2         !747 - 748    combined fed/state code
                     $Sp:2         !749 - 750

  add 1 to #PayeeCountC
end-procedure

!***********************************************************************
begin-procedure Write-C-Record
!***********************************************************************

  move #PayeeCountC     to  $PayeeCountC      09999999
  move #ControlTotal1C  to  $ControlTotal1C   099999999999999999
  move #ControlTotal2C  to  $ControlTotal2C   099999999999999999
  move #ControlTotal3C  to  $ControlTotal3C   099999999999999999
  move #ControlTotal4C  to  $ControlTotal4C   099999999999999999
  move #ControlTotal5C  to  $ControlTotal5C   099999999999999999
  move #ControlTotal6C  to  $ControlTotal6C   099999999999999999
  move #ControlTotal7C  to  $ControlTotal7C   099999999999999999
  move #ControlTotal8C  to  $ControlTotal8C   099999999999999999
  move #ControlTotal9C  to  $ControlTotal9C   099999999999999999
  move #ControlTotalAC  to  $ControlTotalAC   099999999999999999
  move #ControlTotalBC  to  $ControlTotalBC   099999999999999999
  move #ControlTotalCC  to  $ControlTotalCC   099999999999999999
  move #ControlTotalDC  to  $ControlTotalDC   099999999999999999
  move #ControlTotalEC  to  $ControlTotalEC   099999999999999999
  move #ControlTotalFC  to  $ControlTotalFC   099999999999999999
  move #ControlTotalGC  to  $ControlTotalGC   099999999999999999

  Add 1 to #FileCount
  add 1 to #RecordSeqNbr
  move #RecordSeqNbr to $RecordSeqNbr  09999999

  write 10 from      'C':1         !  1          record type
            $PayeeCountC:8         !  2 -   9    number of payees
                     $Sp:6         ! 10 -  15
         $ControlTotal1C:18        ! 16 -  33    control total 1
         $ControlTotal2C:18        ! 34 -  51    control total 2
         $ControlTotal3C:18        ! 52 -  69    control total 3
         $ControlTotal4C:18        ! 70 -  87    control total 4
         $ControlTotal5C:18        ! 88 - 105    control total 5
         $ControlTotal6C:18        !106 - 123    control total 6
         $ControlTotal7C:18        !124 - 141    control total 7
         $ControlTotal8C:18        !142 - 159    control total 8
         $ControlTotal9C:18        !160 - 177    control total 9
         $ControlTotalAC:18        !178 - 195    control total A
         $ControlTotalBC:18        !196 - 213    control total B
         $ControlTotalCC:18        !214 - 231    control total C
         $ControlTotalDC:18        !232 - 249    control total D
         $ControlTotalEC:18        !250 - 267    control total E
         $ControlTotalFC:18        !268 - 285    control total F
         $ControlTotalGC:18        !286 - 303    control total G
                     $Sp:196       !304 - 499
           $RecordSeqNbr:8         !500 - 507    record sequence number
                     $Sp:243       !508 - 750

  move 0 to #PayeeCountC
  move 0 to #ControlTotal1C
  move 0 to #ControlTotal2C
  move 0 to #ControlTotal3C
  move 0 to #ControlTotal4C
  move 0 to #ControlTotal5C
  move 0 to #ControlTotal6C
  move 0 to #ControlTotal7C
  move 0 to #ControlTotal8C
  move 0 to #ControlTotal9C
  move 0 to #ControlTotalAC
  move 0 to #ControlTotalBC
  move 0 to #ControlTotalCC
  move 0 to #ControlTotalDC
  move 0 to #ControlTotalEC
  move 0 to #ControlTotalFC
  move 0 to #ControlTotalGC

end-procedure

!***********************************************************************
begin-procedure Write-K-Records
!***********************************************************************
  move 1 to #StateNumber
  while #StateNumber <= 59
    get  #PayeeCountK
         #ControlTotal1K
         #ControlTotal2K
         #ControlTotal3K
         #ControlTotal4K
         #ControlTotal5K
         #ControlTotal6K
         #ControlTotal7K
         #ControlTotal8K
         #ControlTotal9K
         #ControlTotal10K
         #ControlTotal11K
         #ControlTotal12K
         #ControlTotalDK
         #ControlTotalEK
         #ControlTotalFK
         #ControlTotalGK
    from StateTotals(#StateNumber)
         Count
         ControlTotal(1)
         ControlTotal(2)
         ControlTotal(3)
         ControlTotal(4)
         ControlTotal(5)
         ControlTotal(6)
         ControlTotal(7)
         ControlTotal(8)
         ControlTotal(9)
         ControlTotal(10)
         ControlTotal(11)
         ControlTotal(12)
         ControlTotal(13)
         ControlTotal(14)
         ControlTotal(15)
         ControlTotal(16)
    if #PayeeCountK > 0
      move #PayeeCountK     to  $PayeeCountK       09999999
      move #ControlTotal1K  to  $ControlTotal1K    099999999999999999
      move #ControlTotal2K  to  $ControlTotal2K    099999999999999999
      move #ControlTotal3K  to  $ControlTotal3K    099999999999999999
      move #ControlTotal4K  to  $ControlTotal4K    099999999999999999
      move #ControlTotal5K  to  $ControlTotal5K    099999999999999999
      move #ControlTotal6K  to  $ControlTotal6K    099999999999999999
      move #ControlTotal7K  to  $ControlTotal7K    099999999999999999
      move #ControlTotal8K  to  $ControlTotal8K    099999999999999999
      move #ControlTotal9K  to  $ControlTotal9K    099999999999999999
      move #ControlTotal10K to  $ControlTotal10K   099999999999999999
      move #ControlTotal11K to  $ControlTotal11K   099999999999999999
      move #ControlTotal12K to  $ControlTotal12K   099999999999999999
      move #ControlTotalDK to   $ControlTotalDK    099999999999999999
      move #ControlTotalEK to   $ControlTotalEK    099999999999999999
      move #ControlTotalFK to   $ControlTotalFK    099999999999999999
      move #ControlTotalGK to   $ControlTotalGK    099999999999999999
      if #StateNumber = 09
         move '08'          to  $CombFedStateCode  09
      else
         if #StateNumber = 08
           move '07'          to  $CombFedStateCode  09
         else
           move #StateNumber  to  $CombFedStateCode  09
         end-if
      end-if

      Add 1 to #FileCount
      add 1 to #RecordSeqNbr
      move #RecordSeqNbr to $RecordSeqNbr  09999999

      write 10 from      'K':1     !  1          record type
                $PayeeCountK:8     !  2 -   9    number of payees
                         $Sp:6     ! 10 -  15
             $ControlTotal1K:18    ! 16 -  33    total 1 control
             $ControlTotal2K:18    ! 34 -  51    total 2 control
             $ControlTotal3K:18    ! 52 -  69    total 3 control
             $ControlTotal4K:18    ! 70 -  87    total 4 control
             $ControlTotal5K:18    ! 88 - 105    total 5 control
             $ControlTotal6K:18    !106 - 123    total 6 control
             $ControlTotal7K:18    !124 - 141    total 7 control
             $ControlTotal8K:18    !142 - 159    total 8 control
             $ControlTotal9K:18    !160 - 177    total 9 control
             $ControlTotal10K:18   !178 - 195    total A control
             $ControlTotal11K:18   !196 - 213    total B control
             $ControlTotal12K:18   !214 - 231    total C control
             $ControlTotalDK:18    !232 - 249    total D control
             $ControlTotalEK:18    !250 - 267    total E control
             $ControlTotalFK:18    !268 - 285    total F control
             $ControlTotalGK:18    !286 - 303    total G control
                         $Sp:196   !304 - 499
               $RecordSeqNbr:8     !500 - 507    record sequence number
                         $Sp:199   !508 - 706
            $ControlTotal10K:18    !707 - 724    total state inc tax withheld
            $ControlTotal11K:18    !725 - 742    total local inc tax withheld
                         $Sp:4     !743 - 746
           $CombFedStateCode:2     !747 - 748    combined federal/state code
                         $Sp:2     !749 - 750

      put  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
      into StateTotals(#StateNumber)
           Count
           ControlTotal(1)
           ControlTotal(2)
           ControlTotal(3)
           ControlTotal(4)
           ControlTotal(5)
           ControlTotal(6)
           ControlTotal(7)
           ControlTotal(8)
           ControlTotal(9)
           ControlTotal(10)
           ControlTotal(11)
           ControlTotal(12)
           ControlTotal(13)
           ControlTotal(14)
           ControlTotal(15)
           ControlTotal(16)
    end-if
    add 1 to #StateNumber
  end-while
end-procedure

!***********************************************************************
begin-procedure Write-F-Record
!***********************************************************************
  move #A_Count to $A_Count 09999999
  move 0        to $Zeroes  099999999999999999999

  Add 1 to #FileCount
  add 1 to #RecordSeqNbr
  move #RecordSeqNbr to $RecordSeqNbr  09999999
  move #BCount       to $BCount        09999999

  write 10 from      'F':1
                $A_Count:8
                 $Zeroes:21
                     $Sp:19
                 $BCount:8         !Total number of Payee 'B' Records
                     $Sp:442
           $RecordSeqNbr:8         !500 - 507    record sequence number
                     $Sp:243
end-procedure

!***********************************************************************
begin-procedure Open-File
!***********************************************************************
  move 0 to #FileCount
  if #FileExtension <> 0
    close 10
  end-if
  #ifdef OS400
     let $FileID = '{IMPORTPREFIX}' || 'IRSTAX'
  #else
     let $FileID = 'IRSTAX'
     let $FileID = '{IMPORTPREFIX}' || $FileID || '{IMPORTSUFFIX}'
  #endif
  open $FileID as 10 for-writing record=750:fixed
  display '  Creating file ' noline
  display $FileID
end-procedure

!***********************************************************************
begin-procedure Get-Local-Tax-Data
!***********************************************************************

  Let $LocalityFound = 'N'
begin-SELECT
L.LOCALITY_ABBRV
  Let $LocalityFound = 'Y'
  move &L.Locality_Abbrv to $TaxLocality
FROM  PS_LOCAL_TAX_TBL2 L
WHERE L.STATE    = $State
  AND L.LOCALITY = $Locality
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = $State
         AND  LOCALITY = $Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT

If $LocalityFound = 'N'
begin-SELECT
L1.LOCALITY_NAME
  move &L1.Locality_Name to $TaxLocality
FROM  PS_LOCAL_TAX_TBL L1
WHERE L1.STATE    = $State
  AND L1.LOCALITY = $Locality
  AND L1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = $State
         AND  LOCALITY = $Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT
End-If
end-procedure

!***********************************************************************
begin-procedure Write-T-Record
!***********************************************************************

  move ' '              to $ForeignEntyInd

  move #B_Count         to $B_Count 09999999

  move 'V'                              to $VendorIndicator
  move 'PeopleSoft'                     to $VendorName
  move '4500 Oracle Lane'               to $VendorAddress
  move 'Pleasanton'                     to $VendorCity
  move 'CA'                             to $VendorState
  move '945883359'                      to $VendorZip
  move 'Stewart Chapman'                to $VendorContact
  move '9256943265     '                to $VendorPhone
  move ' '                              to $VendorFornIndicator

  uppercase $PayerName
  uppercase $TransmitterName
  uppercase $TransmitterAddr
  uppercase $TransmitterCity
  uppercase $TransmitterState
  uppercase $TransmitterZip
  uppercase $TransmitterCntl
!  uppercase $XmitEmailAddr               ! RSI-HCM103665
  add 1 to #RecordSeqNbr
  move #RecordSeqNbr to $RecordSeqNbr  09999999

  write 10 from      'T':1         !  1          record type
            $PaymentYear:4         !  2 -   5    payment year
                     $Sp:1         !  6          prior year indicator (space)
         $TransmitterEIN:9         !  7 -  15    transmitter's ein
        $TransmitterCntl:5         ! 16 -  20    transmitter's control
                     $Sp:7         ! 21 -  27
                $TestInd:1         ! 28          Test Indicator
         $ForeignEntyInd:1         ! 29          foreign entity indicator
        $TransmitterName:40        ! 30 -  69    first transmitter name line
                     $Sp:40        ! 70 - 109    second transmitter name line
        $TransmitterName:40        !110 - 149    company name
                     $Sp:40        !150 - 189    second company name line
        $TransmitterAddr:40        !190 - 229    company address
        $TransmitterCity:40        !230 - 269    company city
       $TransmitterState:2         !270 - 271    company state
         $TransmitterZip:9         !272 - 280    company zip
                     $Sp:15        !281 - 295
                $B_Count:8         !296 - 303    number of B records
              $PayerName:40        !304 - 343    payer name
             $PayerPhone:15        !344 - 358    payer phone
          $XmitEmailAddr:50        !359 - 408    magnetic media indicator
                     $Sp:91        !409 - 499
           $RecordSeqNbr:8         !500 - 507    Record Sequence Number
                     $Sp:10        !508 - 517
        $VendorIndicator:1         !518 - 518    Vendor Indicator
             $VendorName:40        !519 - 558    Vendor Name
          $VendorAddress:40        !559 - 598    Vendor Mailing Address
             $VendorCity:40        !599 - 638    Vendor City
            $VendorState:2         !639 - 640    Vendor State
              $VendorZip:9         !641 - 649    Vendor Zipcode
          $VendorContact:40        !650 - 689    Vendor Contact
            $VendorPhone:15        !690 - 704    Vendor Contact Phone Number
                     $Sp:35        !705 - 739
    $VendorFornIndicator:1         !740          Vendor Foreign Indicator
                     $Sp:10        !741 - 750

  Add 1 to #FileCount
end-procedure

begin-procedure Prompts
!***********************************************************************
  while $DistribCd = ''
    input $DistribCd maxlen=2
    'Enter Distribution Code for this run (Valid codes are 1 - 9, A, B, E - H, J, L, N, P - U, W)'
    uppercase $DistribCd
!    let $DistribCd = RTRIM($DistribCd, ' ')
    if INSTR('123456789ABEFGHJLNPQRSTUW',$DistribCd,1) = 0
      display 'Valid codes: 1,2,3,4,5,6,7,8,9,A,B,E,F,G,H,J,L,N,P,Q,R,S,T,U,W)'
      move '' to $DistribCd
    end-if
  end-while

  while $TotalDistrib = ''
    input $TotalDistrib 'Should ''Total Distribution'' be marked? (Y/N)'
    uppercase $TotalDistrib
    if INSTR('YN',$TotalDistrib,1) = 0
      display 'Enter Y or N'
      move '' to $TotalDistrib
    else
      let $TotalDistrib = COND($TotalDistrib='Y','X',' ')
    end-if
  end-while

!  display 'Enter Earnings Code or hit ENTER to stop selecting'
  move '(''' to $SelectedEarns
  move ' ' to $SelectedErnCd
  while $SelectedErnCd <> ''
    input $SelectedErnCd 'Enter Earnings Code or hit ENTER to stop selecting'
    uppercase $SelectedErnCd
    if $SelectedErnCd <> ''
      let $SelectedEarns = $SelectedEarns || $SelectedErnCd || ''','''
    end-if
  end-while
  display $SelectedEarns
  let $SelectedEarns = SUBSTR($SelectedEarns,1,LENGTH($SelectedEarns) - 2)
  display $SelectedEarns
  let $SelectedEarns = $SelectedEarns || ')'
  if $SelectedEarns = ')'
    display 'At least one earnings code must be entered'
    display 'Program ended'
    stop
  end-if
  while $SelectEEs = ''
    display ''
    display 'Regular processing or Select payees?'
    input $SelectEEs 'Enter F (for processing all) or G (for processing select)'
    uppercase $SelectEEs
    if INSTR('FG',$SelectEEs,1) = 0
      display 'Enter F or G'
      move '' to $SelectEEs
    end-if
  end-while

  if $SelectEEs = 'G'

    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND C.EMPLID in (''' to $SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      uppercase $SelectedEmplID
      if $SelectedEmplID <> ''
        let $SelectedEEs = $SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $SelectedEEs = SUBSTR($SelectedEEs,1,LENGTH($SelectedEEs) - 2)
    let $SelectedEEs = $SelectedEEs || ')'

  else
    move '' to $SelectedEEs
  end-if

    while $TestInd = ''
      input $TestInd 'Do you want files marked as TEST files? (Y/N)'
      uppercase $TestInd
      if INSTR('YN',$TestInd,1) = 0
        display 'Enter Y or N'
        move '' to $TestInd
      else
        let $TestInd = COND($TestInd='Y','T',' ')
      end-if
    end-while

    input $PayerNameControl maxlen=4 'Enter Payer Name Control, if known'
    uppercase $PayerNameControl

    while $LastFilingInd = ''
      input $LastFilingInd 'Is this the last year you will file? (Y/N)'
      uppercase $LastFilingInd
      if INSTR('YN',$LastFilingInd,1) = 0
        display 'Enter Y or N'
        move '' to $LastFilingInd
      else
        let $LastFilingInd = COND($LastFilingInd='Y','1',' ')
      end-if
    end-while

    while $FedStateFiler = ''
      input $FedStateFiler 'Are you a combined federal/state filer? (Y/N)'
      uppercase $FedStateFiler
      if INSTR('YN',$FedStateFiler,1) = 0
        display 'Enter Y or N'
        move '' to $FedStateFiler
      else
        let $FedStateFiler = COND($FedStateFiler='Y','1',' ')
      end-if
    end-while

    while $TransmitterControlCode = ''
      input $TransmitterControlCode maxlen=5 'Enter transmitter control code'
      uppercase $TransmitterControlCode
      if $TransmitterControlCode = ''
        display '**** This code is REQUIRED ****'
      end-if
    end-while

end-procedure

!***********************************************************************
begin-procedure Convert-Parameters
!***********************************************************************
  move $RC_US_YE.Distrib_Code       to $DistribCd
  move $RC_US_YE.Total_Distrib_Flag to $TotalDistrib
  move $RC_US_YE.Test_Ind_Flag      to $TestInd
  move $RC_US_YE.Last_Filing_Flag   to $LastFilingInd
  move $RC_US_YE.Comb_FedSt_Filer   to $FedStateFiler
  move $RC_US_YE.Payer_Phone        to $PayerPhone
  move $RC_US_YE.Payer_Name         to $PayerName
  move $RC_US_YE.Trans_Cntl_Code    to $TransmitterCntl
!  move $RC_US_YE.Replace_Alpha      to $ReplacementAlpha
!  move $RC_US_YE.Layout_Style       to $Layout_Style
  move $RC_US_YE.Reg_Select_Proc   to $SelectEEs
  move $RC_US_YE.Reprint_Prompt    to $Reprint_Prompt
  move $RC_US_YE.Payer_Email_Addr  to $XmitEmailAddr

  let $TotalDistrib = COND($TotalDistrib='Y','X',' ')
  let $TestInd = COND($TestInd='Y','T',' ')
  let $LastFilingInd = COND($LastFilingInd='Y','1',' ')
  let $FedStateFiler = COND($FedStateFiler='Y','1',' ')

  do Read-Earnings-Codes

  if $SelectEEs = 'G'
    do Read-EEs
  end-if
end-procedure

!***********************************************************************
begin-procedure Read-Earnings-Codes
!***********************************************************************
move '(''' to $SelectedEarns
move ' ' to $SelectedErnCd

begin-SELECT
C.ERNCD

  move &C.Erncd           to $SelectedErnCd

  let $SelectedEarns = $SelectedEarns || $SelectedErnCd || ''','''
  let $HeaderEarns = $HeaderEarns || $SelectedErnCd || ','

FROM  PS_RC_TAX930PM C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

 let $SelectedEarns = SUBSTR($SelectedEarns,1,LENGTH($SelectedEarns) - 2)
 let $HeaderEarns = SUBSTR($HeaderEarns,1,LENGTH($HeaderEarns) - 1)
 let $SelectedEarns = $SelectedEarns || ')'

end-procedure

!***********************************************************************
begin-procedure Read-EEs
!***********************************************************************

move 'AND C.EMPLID in (''' to $SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
X.SELECTED_EE

  move &X.Selected_EE     to $SelectedEmplID

  let $SelectedEEs = $SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX930 X
WHERE X.OPRID         = $Prcs_OprID
  AND X.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

if $EE_Selected <> 'Y'
   display ''
   display 'No employees selected. Program stopped.'
   display ''
   stop
end-if

let $SelectedEEs = SUBSTR($SelectedEEs,1,LENGTH($SelectedEEs) - 2)
let $SelectedEEs = $SelectedEEs || ')'

end-procedure

begin-procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX930
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure LongNameAddress
!***********************************************************************
  next-column

  print &A.Descr         (44,2)
  print &A.Address1       (+1,2,35)
  if RTRIM(&A.Address2,' ') <> ''
    print &A.Address2     (+1,2,35)
  end-if
  let $A.City = RTRIM(&A.City,' ')
  print $A.City          (+1,2)
  print &A.State         ()         edit bxx
  print $ErZip           (+1,2)

  if RTRIM($Ad_Address2, ' ') <> ''
    print $Name     (59,22,30)
    print $Ad_Address1    (+1,22,30)
    print $Ad_Address2    (+1,22,30)
    print $CityStateZipCountry  (+1,22)
  else
    print $Name     (60,22,30)
    print $Ad_Address1    (+1,22,30)
    print $CityStateZipCountry  (+1,22)
  end-if
end-procedure

!***********************************************************************
Begin-Procedure AddHypenZip($Country, $InString, :$OutString)
!***********************************************************************
  let $OutString =  $InString
  if $Country = 'USA'
    move $InString      to $ZipExtsn ~~~~~~xxxx
    if instr($InString,'-',6) = 0
     and $ZipExtsn <> '    '
      let $OutString = substr($InString,1,5) || '-' || substr($InString,6,4)
    end-if
  end-if
End-Procedure

!***********************************************************************
Begin-Procedure Negative-Earnings-message
!***********************************************************************
  show ' '
  show 'Warning...'
  show 'Negative Gross Earnings amounting to '&EB.Grs_YTD
  show ' for Employee :'&C.EMPLID
  show ' Company      :'&A.Company
  show 'have been reported and cannot be processed. The employee will be'
  show 'bypassed and not reported on the Form 1099-R or the IRS file.'
  show 'If this is an error, please correct the employee balances and rerun TAX930PM.'
  show ' '
End-Procedure

!***********************************************************************
!***********************************************************************
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#include 'usarpt.sqc'    ! NID_COUNTRY defined
