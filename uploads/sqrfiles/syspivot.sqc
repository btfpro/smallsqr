! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
!***********************************************************************
! SYSPIVOT: Pivot Grid Audits                                          *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYSPIVOT-Main                                             !
! Descr:     System for Pivot Grids                                    !
!----------------------------------------------------------------------!
begin-procedure SYSPIVOT-Main

        let $ErrorFound = 'N'
        let $AuditTitle = 'Pivot Grid Audits'

        do SYSPIVOT-01
        do SYSPIVOT-02
        do SYSPIVOT-03
        do SYSPIVOT-04
        do SYSPIVOT-05
        do SYSPIVOT-06
        do SYSPIVOT-07
        do SYSPIVOT-08
        do SYSPIVOT-09
        do SYSPIVOT-10
        do SYSPIVOT-11
        do SYSPIVOT-12
        
        if $ErrorFound = 'N'
            do PrintSummaryRecord
        end-if

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-01                                                !
! Descr:     System table audit against PSPGCORE table:                 !
!            PIVOT-01 Invalid Pivot Grid definiton                      !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-01

   let $AuditDescr = '(PIVOT-01) Pivot Grid Model referencing a non-existing data type:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Pivot Grid Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Pivot Grid Title'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Pivot Grid Data Type'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME          &Pivot01_PivotID
A.PTPG_PGRIDTITLE         &Pivot01_PivotDescr
A.PTPG_DSTYPE             &Pivot01_DataTypeID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Pivot01_PivotID         (+1,#Start1)
   print &Pivot01_PivotDescr      (0 ,#Start2)
   print &Pivot01_DataTypeID      (0 ,#Start3)
FROM PSPGCORE A
WHERE NOT EXISTS (SELECT 'X' FROM PSPGDTYPE B WHERE A.PTPG_DSTYPE = B.PTPG_DSTYPE)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-02                                                !
! Descr:     System table audit against PSPGCORE table:                 !
!            PIVOT-02 Invalid Pivot Grid Model definiton                !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-02

   let $AuditDescr = '(PIVOT-02) Pivot Grid definitions not having a valid Pivot Grid Model:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Pivot Grid Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Pivot Grid Description'
    let #Column2len = lengthp($Column2Name) 

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME          &Pivot02_PivotID
A.PTPG_PGRIDTITLE         &Pivot02_PivotDesc

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Pivot02_PivotID         (+1,#Start1)
   print &Pivot02_PivotDesc       (0 ,#Start2)
FROM PSPGCORE A
WHERE NOT EXISTS (SELECT 'X' FROM PSPGMODEL B WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure



!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-03                                                !
! Descr:     System table audit against PSPGVIEWOPT table:              !
!            SYSPIVOT-03: Verify default pivot grid view definition.    !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-03

   let $AuditDescr = '(PIVOT-03) Pivot Grid definition does not '
     || 'have a default view in PSPGVIEWOPT table:'
     
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
     
create-array name=ptpg_pgrid size=30000
     field=ptpg_pgridname:char
     field=ptpg_pgridtitle:char
     
create-array name=ptpg_view size=30000
     field=ptpg_pgridname:char
     field=ptpg_viewname:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Pivot Grid Title'
   let #Column2len = lengthp($Column2Name)

   let #Start1 = 1
   let #Start2 = 41
   
   let #numofhdr = 2
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   
   let #arrayput = 0
   let #arrayput1 = 0
           
begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &PivotGridName
A.PTPG_PGRIDTITLE    &PivotGridTitle
   let $ptpg_pgridname = &PivotGridName
   let $ptpg_pgridtitle = &PivotGridTitle
   put $ptpg_pgridname $ptpg_pgridtitle into ptpg_pgrid(#arrayput)
   add 1 to #arrayput
FROM PSPGCORE A
end-SELECT

    let #arrayget = 0
    while #arrayget < #arrayput
       let #row = 0
       get $arr_ptpg_pgridname $arr_ptpg_pgridtitle from ptpg_pgrid(#arrayget)
       do ValidatePivotView($arr_ptpg_pgridname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_ptpg_pgridname                                          (+1,#Start1)
          print $arr_ptpg_pgridtitle                                         (0 ,#Start2)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget
     end-while
      
   do End-Section
   
#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotView                                                        !
! Descr:       Validate pivot grid default view                                         !
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotView ($arr_ptpg_pgridname, :#row)
let  $arr_ptpg_pgridnametemp =  $arr_ptpg_pgridname || '.View'
begin-SELECT on-Error=Rpt-SQL-Error
COUNT(*)  &ValidatePivotView_Count
    let #row = &ValidatePivotView_Count
FROM PSPGVIEWOPT A
WHERE A.PTPG_PGRIDNAME = $arr_ptpg_pgridname
AND A.PTPG_VIEWNAME = $arr_ptpg_pgridnametemp
end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-04                                                !
! Descr:     System table audit against PSPGVIEWOPT table:              !
!            PIVOT-04 No grid options for a view                        !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-04

   let $AuditDescr = '(PIVOT-04) Pivot Grid view definitions not having' 
        ||' Grid options defined:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Pivot Grid Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Pivot Grid View'
    let #Column2len = lengthp($Column2Name) 
    let $Column3Name = 'Pivot Grid View Description'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 71

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME          &Pivot04_PivotID
A.PTPG_VIEWNAME           &Pivot04_PivotView
A.PTPVG_VIEWDESCR         &Pivot04_ViewDescr

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Pivot04_PivotID         (+1,#Start1)
   print &Pivot04_PivotView       (0 ,#Start2)
   print &Pivot04_ViewDescr       (0 ,#Start3)
FROM PSPGVIEWOPT A
WHERE NOT EXISTS (SELECT 'X' FROM PSPGGRIDOPT B WHERE B.PTPG_PGRIDNAME = A.PTPG_PGRIDNAME AND B.PTPG_VIEWNAME = A.PTPG_VIEWNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-05                                                !
! Descr:     System table audit against PSPGVIEWOPT table:              !
!            PIVOT-05 No chart options for a view                       !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-05

   let $AuditDescr = '(PIVOT-05) Pivot Grid view definitions not having' 
        ||' Chart options defined:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Pivot Grid Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Pivot Grid View'
    let #Column2len = lengthp($Column2Name) 
    let $Column3Name = 'Pivot Grid View Description'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 71

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME          &Pivot05_PivotID
A.PTPG_VIEWNAME           &Pivot05_PivotView
A.PTPVG_VIEWDESCR         &Pivot05_ViewDescr

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Pivot05_PivotID         (+1,#Start1)
   print &Pivot05_PivotView       (0 ,#Start2)
   print &Pivot05_ViewDescr       (0 ,#Start3)
FROM PSPGVIEWOPT A
WHERE NOT EXISTS (SELECT 'X' FROM PSPGCHARTOPT B WHERE B.PTPG_PGRIDNAME = A.PTPG_PGRIDNAME AND B.PTPG_VIEWNAME = A.PTPG_VIEWNAME)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-06                                                !
! Descr:     System table audit against PSPGCORE table:                 !
!            PIVOT-06 Invalid Query name for the Pivot Grid Model       !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-06

   let $AuditDescr = '(PIVOT-06) Pivot Grid Model definitions based on a' 
        ||' non-existent PSQuery Name:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Pivot Grid Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Pivot Grid Title'
    let #Column2len = lengthp($Column2Name) 
    let $Column3Name = 'Query Name'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME          &Pivot06_PivotID
A.PTPG_PGRIDTITLE         &Pivot06_PivotTitle
B.PTPG_DSVALUE            &Pivot06_QryName

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Pivot06_PivotID         (+1,#Start1)
   print &Pivot06_PivotTitle      (0 ,#Start2)
   print &Pivot06_QryName         (0 ,#Start3)
FROM PSPGCORE A, PSPGSETTINGS B
WHERE A.PTPG_PGRIDNAME=B.PTPG_PGRIDNAME AND B.PTPG_DSVALUE NOT IN (SELECT C.QRYNAME FROM PSQRYDEFN C)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-07                                                !
! Descr:     System table audit against PSPGMODEL table:                !
!            Pivot-07: Verify query fields definition.                  !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-07

   let $AuditDescr = '(Pivot-07) Query field name in PSQRYFIELD does not '
      || 'match field defined in PSPGMODEL table:'
      
create-array name=ptpg_pivot1 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqfldname:char
     field=ptpg_dscolname:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Missing query field'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot07_PGridName
B.PTPG_DSVALUE       &Pivot07_QueryName
A.PTPG_DSUNIQUEFLD   &Pivot07_QryUniqFld
A.PTPG_DSCOLUMN      &Pivot07_QryFldName

   let $ptpg_pgridname = &Pivot07_PGridName
   let $ptpg_dsvalue = &Pivot07_QueryName
   let $ptpg_uniqfldname = &Pivot07_QryUniqFld
   let $ptpg_dscolname = &Pivot07_QryFldName
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqfldname $ptpg_dscolname into ptpg_pivot1(#arrayput)
   add 1 to #arrayput
   
FROM PSPGMODEL A, PSPGSETTINGS B 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqfldname $arr_qryfldname from ptpg_pivot1(#arrayget1)
       do ValidatePivotUniqueField($arr_qryname, $arr_uniqfldname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                              (0 ,#Start2)
          print $arr_qryfldname                                          (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotUniqueField                                                 !
! Descr:       Validate query field                                                     !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotUniqueField ($Query_Name, $QueryField_Name, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot07_Count
    let #row = &QueryPivot07_Count
FROM PSQRYFIELD A
WHERE A.QRYNAME = $Query_Name
AND A.QRYFLDNAME = $QueryField_Name

end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-08                                                !
! Descr:     System table audit against PSPGMODEL table:                !
!            Pivot-08: Verify query fields headings.                    !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-08

   let $AuditDescr = '(Pivot-08) Query field headings in PSQRYFIELD do not '
      || 'match column name defined in PSPGMODEL table:'
      
create-array name=ptpg_pivot8 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqfldname:char
     field=ptpg_dscolname:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Query Field Heading'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot08_PGridName
B.PTPG_DSVALUE       &Pivot08_QueryName
A.PTPG_DSUNIQUEFLD   &Pivot08_QryUniqFld
A.PTPG_DSCOLUMN      &Pivot08_QryFldName

   let $ptpg_pgridname = &Pivot08_PGridName
   let $ptpg_dsvalue = &Pivot08_QueryName
   let $ptpg_uniqfldname = &Pivot08_QryUniqFld
   let $ptpg_dscolname = &Pivot08_QryFldName
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqfldname $ptpg_dscolname into ptpg_pivot8(#arrayput)
   add 1 to #arrayput
   
FROM PSPGMODEL A, PSPGSETTINGS B 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqfldname $arr_qryfldname from ptpg_pivot8(#arrayget1)
       do ValidatePivotFieldHeading($arr_qryname, $arr_uniqfldname, $arr_qryfldname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                              (0 ,#Start2)
          print $arr_qryfldname                                          (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotFieldHeading                                                !
! Descr:       Validate query field Heading                                             !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotFieldHeading ($Query_Name, $QueryField_Name, $QueryField_Heading, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot08_Count
    let #row = &QueryPivot08_Count
FROM PSQRYFIELD A
WHERE A.QRYNAME = $Query_Name
AND A.QRYFLDNAME = $QueryField_Name
AND (A.HEADING = ' '
OR A.HEADING = $QueryField_Heading)

end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-09                                                !
! Descr:     System table audit against PSPGQRYPROMPT table:            !
!            Pivot-09: Verify query bind fields definition.             !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-09

   let $AuditDescr = '(Pivot-09) Query prompt name in PSPGQRYPROMPT table does not '
      || 'match the bind field defined in PSQRYBIND table:'
      
create-array name=ptpg_pivot9 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqpromptname:char
     field=ptpg_prompt:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Missing query bind field'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot09_PGridName
B.PTPG_DSVALUE       &Pivot09_QueryName
A.PTPG_UNIQPROMPFLD  &Pivot09_QryUniqPrompFld
A.PTPG_QRYPROMPNAME  &Pivot09_QryPrompName

   let $ptpg_pgridname = &Pivot09_PGridName
   let $ptpg_dsvalue = &Pivot09_QueryName
   let $ptpg_uniqpromptname = &Pivot09_QryUniqPrompFld
   let $ptpg_prompt = &Pivot09_QryPrompName
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqpromptname $ptpg_prompt into ptpg_pivot9(#arrayput)
   add 1 to #arrayput
   
FROM PSPGQRYPROMPT A, PSPGSETTINGS B 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqprompname $arr_qrypromptname from ptpg_pivot9(#arrayget1)
       do ValidatePivotUniquePrompt($arr_qryname, $arr_uniqprompname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                            (0 ,#Start2)
          print $arr_qrypromptname                                      (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotUniquePrompt                                                !
! Descr:       Validate query bind field                                                !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotUniquePrompt ($Query_Name, $QueryUniqPrompt_Name, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot09_Count
    let #row = &QueryPivot09_Count
FROM PSQRYBIND A
WHERE A.QRYNAME = $Query_Name
AND A.BNDNAME = $QueryUniqPrompt_Name

end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-10                                                !
! Descr:     System table audit against PSPGQRYPROMPT table:            !
!            Pivot-10: Verify query bind fields definition.             !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-10

   let $AuditDescr = '(Pivot-10) Query bind name in PSQRYBIND does not '
      || 'match prompt defined in PSPGQRYPROMPT table:'
      
create-array name=ptpg_pivot10 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqpromptname:char
     field=ptpg_prompt:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Missing query bind field'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot10_PGridName
B.PTPG_DSVALUE       &Pivot10_QueryName
C.BNDNAME            &Pivot10_QryUniqPrompFld
C.HEADING            &Pivot10_QryPrompName

   let $ptpg_pgridname = &Pivot10_PGridName
   let $ptpg_dsvalue = &Pivot10_QueryName
   let $ptpg_uniqpromptname = &Pivot10_QryUniqPrompFld
   let $ptpg_prompt = &Pivot10_QryPrompName
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqpromptname $ptpg_prompt into ptpg_pivot10(#arrayput)
   add 1 to #arrayput
   
FROM PSPGCORE A, PSPGSETTINGS B, PSQRYBIND C 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT D.QRYNAME 
   FROM PSQRYDEFN D) 
AND B.PTPG_DSVALUE=C.QRYNAME
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqprompname $arr_qrypromptname from ptpg_pivot10(#arrayget1)
       do ValidateQryUniquePrompt($arr_pgridname, $arr_uniqprompname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                            (0 ,#Start2)
          print $arr_qrypromptname                                      (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidateQryUniquePrompt                                                  !
! Descr:       Validate query bind field                                                !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidateQryUniquePrompt ($Pgrid_Name, $QueryUniqPrompt_Name, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot10_Count
    let #row = &QueryPivot10_Count
FROM PSPGQRYPROMPT A
WHERE A.PTPG_PGRIDNAME = $Pgrid_Name
AND A.PTPG_UNIQPROMPFLD = $QueryUniqPrompt_Name

end-SELECT

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-11                                                !
! Descr:     System table audit against PSPGQRYPROMPT table:            !
!            Pivot-11: Verify query bind fields headings.               !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-11

   let $AuditDescr = '(Pivot-11) Query bind variable heading in PSQRYBIND does not '
      || 'match prompt name defined in PSPGQRYPROMPT table:'
      
create-array name=ptpg_pivot11 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqpromptname:char
     field=ptpg_prompt:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Query Bind Field Heading'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot11_PGridName
B.PTPG_DSVALUE       &Pivot11_QueryName
A.PTPG_UNIQPROMPFLD  &Pivot11_QryUniqPrompFld
A.PTPG_QRYPROMPNAME  &Pivot11_QryPrompName

   let $ptpg_pgridname = &Pivot11_PGridName
   let $ptpg_dsvalue = &Pivot11_QueryName
   let $ptpg_uniqpromptname = &Pivot11_QryUniqPrompFld
   let $ptpg_prompt = &Pivot11_QryPrompName
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqpromptname $ptpg_prompt into ptpg_pivot11(#arrayput)
   add 1 to #arrayput
   
FROM PSPGQRYPROMPT A, PSPGSETTINGS B 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqprompname $arr_qrypromptname from ptpg_pivot11(#arrayget1)
       do ValidatePivotPromptHeading($arr_qryname, $arr_uniqprompname, $arr_qrypromptname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                            (0 ,#Start2)
          print $arr_qrypromptname                                      (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotPromptHeading                                               !
! Descr:       Validate query bind field heading                                        !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotPromptHeading ($Query_Name, $QueryUniqPrompt_Name, $QueryPromptHeading, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot11_Count
    let #row = &QueryPivot11_Count
FROM PSQRYBIND A
WHERE A.QRYNAME = $Query_Name
AND A.BNDNAME = $QueryUniqPrompt_Name
AND A.HEADING = $QueryPromptHeading

end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSPIVOT-12                                                !
! Descr:     System table audit against PSPGQRYPROMPT table:            !
!            Pivot-12: Verify query bind fields prompt records.         !
!-----------------------------------------------------------------------!
begin-procedure SYSPIVOT-12

   let $AuditDescr = '(Pivot-12) Query bind variable prompt records in PSQRYBIND '
      || 'do not match prompt record defined in PSPGQRYPROMPT table:'
      
create-array name=ptpg_pivot12 size=30000
     field=ptpg_pgridname:char
     field=ptpg_dsvalue:char
     field=ptpg_uniqpromptname:char
     field=ptpg_prompt:char
     field=ptpg_promptrec:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Pivot Grid Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Query Name'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Query bind field'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTPG_PGRIDNAME     &Pivot12_PGridName
B.PTPG_DSVALUE       &Pivot12_QueryName
A.PTPG_UNIQPROMPFLD  &Pivot12_QryUniqPrompFld
A.PTPG_QRYPROMPNAME  &Pivot12_QryPrompName
A.PTPG_QRYPROMPREC   &Pivot12_QryPrompRec

   let $ptpg_pgridname = &Pivot12_PGridName
   let $ptpg_dsvalue = &Pivot12_QueryName
   let $ptpg_uniqpromptname = &Pivot12_QryUniqPrompFld
   let $ptpg_prompt = &Pivot12_QryPrompName
   let $ptpg_promptrec = &Pivot12_QryPrompRec
   put $ptpg_pgridname $ptpg_dsvalue $ptpg_uniqpromptname $ptpg_prompt $ptpg_promptrec into ptpg_pivot12(#arrayput)
   add 1 to #arrayput
   
FROM PSPGQRYPROMPT A, PSPGSETTINGS B 
WHERE A.PTPG_PGRIDNAME = B.PTPG_PGRIDNAME
AND B.PTPG_DSVALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

let #arrayget1 = 0
    while #arrayget1 < #arrayput
       let #row = 0
       get $arr_pgridname $arr_qryname $arr_uniqprompname $arr_qrypromptname $arr_qrypromptrec from ptpg_pivot12(#arrayget1)
       do ValidatePivotPromptRecord($arr_qryname, $arr_uniqprompname, $arr_qrypromptrec, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_pgridname                                          (+1,#Start1)
          print $arr_qryname                                            (0 ,#Start2)
          print $arr_qrypromptname                                      (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidatePivotPromptRecord                                                !
! Descr:       Validate query bind field prompt record                                  !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidatePivotPromptRecord ($Query_Name, $QueryUniqPrompt_Name, $QueryPromptRec, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryPivot12_Count
    let #row = &QueryPivot12_Count
FROM PSQRYBIND A
WHERE A.QRYNAME = $Query_Name
AND A.BNDNAME = $QueryUniqPrompt_Name
AND A.EDITTABLE = $QueryPromptRec

end-SELECT

end-procedure