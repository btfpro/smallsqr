!***********************************************************************
!  TAX010FD:   Federal Tax Summary Report                              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2012/11/08:11:50:46                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872695                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP00001       Add Non Resident Alien Tax data (1042)                 *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization
#include 'usarpt.sqc'   !Get USA variables

begin-setup
  declare-variable
    default-numeric=decimal
  end-declare
end-setup

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report

  move 'TAX010FD' to $ReportID
  move 'Federal Tax Summary Report' to $ReportTitle

  display $ReportTitle
  Display ' '

  do Get-EandG                                                            !HP00001
  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize
  if $prcs_process_instance = ''
    do Prompt
  else
    do Select-Parameters
    do Process-Run-Control
  end-if

if $RptPeriod = 'M'
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
end-if

  create-array
         name=TaxArray size=9
         field=State-Array:char field=TaxClass-Array:char:30
                                field=Period-Array:number:30
                                field=EE-TxGrs:number:30
                                field=EE-Tax:number:30
                                field=ER-TxGrs:number:30
                                field=ER-Tax:number:30
                                field=EE-NL-Grs:number:30
                                field=ER-NL-Grs:number:30

  create-array
         name=TotTaxArray size=1
         field=Tot-State-Array:char field=Tot-TaxClass-Array:char:30
                                field=Tot-Period-Array:number:30
                                field=Tot-EE-TxGrs:number:30
                                field=Tot-EE-Tax:number:30
                                field=Tot-ER-TxGrs:number:30
                                field=Tot-ER-Tax:number:30
                                field=Tot-EE-NL-Grs:number:30
                                field=Tot-ER-NL-Grs:number:30


  if $PublicSector = 'Y'                                                                 !HP00001
      let $Tax_Class1 = 'HCDGFTV7A'  !for storing array info employee tax classes        !HP00001
      let $Tax_Class2 = '--EJQZU-'   !for storing array info employer tax classes        !HP00001
      let #Max_Class  = 10                                                                !HP00001
  else                                                                                   !HP00001
      let $Tax_Class1 = 'HCDGFTV7'  !for storing array info employee tax classes
      let $Tax_Class2 = '--EJQZU'   !for storing array info employer tax classes
      let #Max_Class  = 9                                                                !HP00001
  end-if                                                                                 !HP00001

end-procedure

begin-procedure Prompt
  input $RptYear  maxlen=4 'Enter Year  (2000,2001,etc)'
  let #RptYear = to_number($RptYear)
  move $RptYear to $RptYearPrt xxxx
  do Get-Reporting-Period
  if $RptPeriod = 'Q'
    move 'Quarterly ' to $ReportTitlePeriod
    move 1 to #QTR
    while #QTR = 1
        input $RptQtr   maxlen=1 'Enter Quarter (1,2,3 or 4)'
        let $AsofQtr = $RptQtr
        evaluate $RptQtr
          when = '1'
            move '03' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '1st Quarter' to $Period
            let #AsofQtr = 1
            move 0 to #QTR
            break
          when = '2'
            move '06' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '2nd Quarter' to $Period
            move 0 to #QTR
            break
          when = '3'
            move '09' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '3rd Quarter' to $Period
            move 0 to #QTR
            break
          when = '4'
            move '12' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '4th Quarter' to $Period
            move 0 to #QTR
            break
          when-other
        end-evaluate
    end-while
  else
    while 1 = 1
    input $MonthCd maxlen=2 'Enter Month (1,2,etc)'
    let #AsofMonth = to_number($MonthCD)
      if #AsofMonth > 0
      AND #AsofMonth < 13
        move $MonthCd to $MonthCd  09
        do Get-Month-Name($MonthCd, $MonthName)
        move $MonthName to $Period
        move 'Monthly ' to $ReportTitlePeriod
        let $AsOfMonth = $MonthCD
        move 'M' to $RptPeriod
        display 'Monthly'
        break
      else
        display 'Month must be 1 - 12'
      end-if
    end-while

  end-if
end-procedure

begin-procedure Process-Run-Control
  move &RC_PAY.Balance_Year to $RptYear xxxx
  move $RptYear to #RptYear
  move $RptYear to $RptYearPrt xxxx
  move &RC_PAY.Balance_Qtr         to $RptQtr

  if &RC_PAY.Balance_Qtr > 0
    move 'Q'          to $RptPeriod
    move 'Quarterly ' to $ReportTitlePeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '1'
        move '03' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '1st Quarter' to $Period
        break
      when = '2'
        move '06' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '2nd Quarter' to $Period
        break
      when = '3'
        move '09' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '3rd Quarter' to $Period
        break
      when = '4'
        move '12' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '4th Quarter' to $Period
        break
    end-evaluate
  else
    move &RC_PAY.Balance_Period to #MonthCd
    let #AsofMonth = #MonthCd
    move 'M'        to $RptPeriod
    move 'Monthly ' to $ReportTitlePeriod
    display 'Monthly'
    if #MonthCd <> 0
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      move $MonthName to $Period
      let $AsOfMonth = $MonthCD
      evaluate $AsOfMonth
        when = '01'
        when = '03'
        when = '05'
        when = '07'
        when = '08'
        when = '10'
        when = '12'
          concat $AsofMonth with $RptYear -xx-3
          concat '1' with $RptYear
        when = '02'
          concat $AsofMonth with $RptYear -xx-2
          concat '8' with $RptYear
        when = '04'
        when = '06'
        when = '09'
        when = '11'
          concat $AsofMonth with $RptYear -xx-3
          concat '0' with $RptYear
      end-evaluate
    else
      display 'Month Not Entered'
      stop
    end-if
  end-if

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($RptYear, $AsOfDate, {DEFYMD}, '', 'native')
  concat $ReportTitle with $ReportTitlePeriod
  move $ReportTitlePeriod to $ReportTitle
end-procedure

begin-heading 6
  #Include 'stdhdg01.sqc'                !standard heading 1

  print 'Company'                        (3,1)
  print $Period                          (+0,80)
  print $RptYearPrt                      (+0,92)
  print 'Employee'                       (+2,63)
  print 'Employee'                       (0,106)
  print 'Employer'                       (0,123)
  print 'Employer'                       (0,166)
  print 'Taxable Wages'                  (+1,61)
  print 'Employee Tax'                   (0,82)
  print 'NL Wages'                       (0,106)
  print 'Taxable Wages'                  (0,121)
  print 'Employer Tax'                   (0,142)
  print 'NL Wages'                       (0,166)
end-heading

begin-procedure Report
let #I = 0
let #J = 0

begin-SELECT
A.EMPLID
A.COMPANY   () on-break level=1 print=never before=Before-Company
                                             AFTER=AFTER-COMPANY
A.STATE
A.LOCALITY
A.TAX_CLASS
A.BALANCE_YEAR
A.BALANCE_QTR
A.BALANCE_PERIOD
A.TXGRS_MTD
A.TXGRS_QTD
A.TXGRS_YTD
A.TAX_MTD
A.TAX_QTD
A.TAX_YTD
A.NLGRS_MTD
A.NLGRS_QTD
A.NLGRS_YTD

  let $state_sel = rtrim(&A.STATE,' ')

  evaluate $state_sel
      when = '$U'
      when = '$E'
           move 0 to #I
           break
      when = '$UAS'
           move 1 to #I
           break
      when = '$UGU'
           move 2 to #I
           break
      when = '$UPR'
           move 3 to #I
           break
      when = '$UVI'
           move 4 to #I
           break
  end-evaluate

  let #J = INSTR($Tax_Class1,&A.TAX_CLASS,1)
  let $ee-er = 'e'
  if #J = 0
     let #J = INSTR($Tax_Class2,&A.TAX_CLASS,1)
     let $ee-er = 'r'
  end-if

  let TaxArray.State-Array(#I) = $state_sel

  if TaxArray.State-Array(5) = ''
     if #I=1 or #I=2 or #I=4
        let TaxArray.State-Array(5)  = '941'
     end-if
  end-if

  let TaxArray.State-Array(6)  = 'TOT'
  let TotTaxArray.Tot-State-Array(0)  = 'TOT'

  if &A.BALANCE_PERIOD = to_number($AsOfMonth)
     if $ee-er = 'e'
        ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        end-if
        if #I = 0
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)
        end-if
     else
        ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        end-if
        if #I = 0
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
        end-if
     end-if
     if #I > 0
        if $ee-er = 'e'
           ARRAY-SUBTRACT &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD from
           TaxArray(0) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        else
           ARRAY-SUBTRACT &A.TXGRS_MTD &A.TAX_MTD &A.NLGRS_MTD from
           TaxArray(0) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        end-if
     end-if
  end-if

  let #J = #J + 10

  if &A.BALANCE_QTR = to_number($AsOfQtr)
     if $ee-er = 'e'
        ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        end-if
        if #I = 0
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)
        end-if
     else
        ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        if #I=1 or #I=2 or #I=4
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        end-if
        if #I = 0
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
        end-if
     end-if
     if #I > 0
        if $ee-er = 'e'
           ARRAY-SUBTRACT &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD from
           TaxArray(0) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        else
           ARRAY-SUBTRACT &A.TXGRS_QTD &A.TAX_QTD &A.NLGRS_QTD from
           TaxArray(0) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        end-if
     end-if
  end-if

  let #J = #J + 10

  if $ee-er = 'e'
     ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
     TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
     if #I=1 or #I=2 or #I=4
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TaxArray(5) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
     end-if
     if #I = 0
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TaxArray(6) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J) Tot-EE-NL-Grs(#J)
     end-if
  else
     ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
     TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
     if #I=1 or #I=2 or #I=4
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TaxArray(5) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
     end-if
     if #I = 0
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TaxArray(6) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD to
        TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J) Tot-ER-NL-Grs(#J)
     end-if
  end-if

  if #I > 0
     if $ee-er = 'e'
        ARRAY-SUBTRACT &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD from
        TaxArray(0) EE-TxGrs(#J) EE-Tax(#J) EE-NL-Grs(#J)
     else
        ARRAY-SUBTRACT &A.TXGRS_YTD &A.TAX_YTD &A.NLGRS_YTD from
        TaxArray(0) ER-TxGrs(#J) ER-Tax(#J) ER-NL-Grs(#J)
     end-if
  end-if

  let #I = 0
  let #J = 0

FROM  PS_TAX_BALANCE A
WHERE A.BALANCE_YEAR = #RptYear
  AND A.BALANCE_ID   = $Calendar_Year_Id
  AND A.TAX_CLASS    <> 'P'
  AND A.STATE IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
  AND A.BALANCE_PERIOD =
      (SELECT MAX(X.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE X
       WHERE  X.COMPANY       = A.COMPANY
         AND  X.EMPLID        = A.EMPLID
         AND  X.STATE         = A.STATE
         AND  X.LOCALITY      = A.LOCALITY
         AND  X.TAX_CLASS     = A.TAX_CLASS
         AND  X.BALANCE_ID    = A.BALANCE_ID
         AND  X.BALANCE_YEAR  = A.BALANCE_YEAR
         AND  X.BALANCE_PERIOD <= #AsofMonth)
ORDER BY A.COMPANY, A.STATE, A.TAX_CLASS,
         A.BALANCE_YEAR, A.BALANCE_QTR, A.BALANCE_PERIOD
end-SELECT

  if $Company = ''
    display 'No data selected'
    print 'No data selected'    (+5,1)  center
  end-if

  move 'Y' to $End
  do Print-Totals

end-procedure


begin-procedure Before-Company
  move &A.Company to $Company
  do Get-Company-Data
end-procedure


begin-procedure After-Company
  do Print-Company-TaxArray
  clear-array name=TaxArray
end-procedure


begin-procedure Print-Company-TaxArray
  let $eor-total = 'N'
  let #K = 0
  let #L = 1
  while #K < 7
    if TaxArray.State-Array(#K) <> ''

       move &CT.FEDERAL_EIN to $FederalEIN 099999999
       print $Company           (-4,13)
       print $CompanyName       (0,17)
       print 'Federal EIN:'     (+1,1)
       print $FederalEIN        (0,17)   edit xx-xxxxxxx
       print ''                 (+4,1)

       let $skip-array-item = 'N'
       let $State-Array = TaxArray.State-Array(#K)
       evaluate $State-Array
           when = '$U'
           when = '$E'
                print 'Jurisdiction: U.S. excluding Puerto Rico & Territories' (0,1)
                break
           when = '$UAS'
                print 'Jurisdiction: American Samoa' (0,1)
                break
           when = '$UGU'
                print 'Jurisdiction: Guam' (0,1)
                break
           when = '$UPR'
                print 'Jurisdiction: Puerto Rico' (0,1)
                break
           when = '$UVI'
                print 'Jurisdiction: U.S. Virgin Islands' (0,1)
                break
           when = '941'
                print 'Jurisdiction: 941-SS Totals (AS + GU + VI)' (0,1)
                break
           when = 'TOT'
                print 'Jurisdiction: Company Totals' (0,1)
                break
           when-other
                let $skip-array-item = 'Y'
                break
       end-evaluate
       print '' (+2,1)


       if TaxArray.State-Array(#K) = '$U' or
          TaxArray.State-Array(#K) = '$E' or
          TaxArray.State-Array(#K) = 'TOT'
          let #L = 1
          let #Skip_Class_A = 0                                           !HP00001
       else
          let #L = 2
          let #Skip_Class_A = 9                                           !HP00001
       end-if

       if $skip-array-item <> 'Y'
       while #L < #Max_Class                                              !HP00001
          evaluate #L
              when = 1
                   print 'U.S. Federal Income Tax  [H]' (+1,1)
                   break
              when = 2
                   print 'Advance EIC Payments  [C]' (+1,1)
                   break
              when = 3
                   print 'FICA/OASDI  [D,E]' (+1,1)
                   break
              when = 4
                   print 'FICA/OASDI Tips  [G,J]' (+1,1)
                   break
              when = 5
                   print 'FICA Medicare  [F,Q]' (+1,1)
                   break
              when = 6
                   print 'FICA Medicare Tips  [T,Z]' (+1,1)
                   break
              when = 7
                   print 'Federal Unemployment Insurance  [U]' (+1,1)
                   break
              when = 9                                                    !HP00001
                   if #Skip_Class_A <> #L                                 !HP00001
                       if $RptPeriod = 'M'
                          new-page
                       end-if
                       print 'Non Resident Alien Tax 1042 [A]' (+1,1)     !HP00001
                   end-if                                                 !HP00001
                   break                                                  !HP00001
              when = 8
                   print 'Additional Medicare Tax [7]' (+1,1)
                   break
         end-evaluate

         if #L <> #Skip_Class_A                                           !HP00001
             let #M = #K
             let #N = #L

             let #linetoprint = 0
             if $RptPeriod = 'M'
                print 'MTD' (+#linetoprint,50)
                let #linetoprint = 1
                do Get-TaxArray
             end-if

             let #N = #L + 10
             print 'QTD' (+#linetoprint,50)
             do Get-TaxArray

             let #N = #L + 20
             print 'YTD' (+1,50)
             do Get-TaxArray

             print '' (+2,1)

         end-if                                                           !HP00001
         let #L = #L + 1

       end-while
       new-page

       end-if

    end-if
    let #K = #K + 1
  end-while
end-procedure


begin-procedure Print-Totals

  print 'Report Grand Totals' (+1,1)
  print '' (+2,1)
  let $eor-total = 'Y'

  let #K = 0
  let #L = 1

  while #L < #Max_Class                                                   !HP00001
     evaluate #L
         when = 1
              print 'U.S. Federal Income Tax  [H]' (+1,1)
              break
         when = 2
              print 'Advance EIC Payments  [C]' (+1,1)
              break
         when = 3
              print 'FICA/OASDI  [D,E]' (+1,1)
              break
         when = 4
              print 'FICA/OASDI Tips  [G,J]' (+1,1)
              break
         when = 5
              print 'FICA Medicare  [F,Q]' (+1,1)
              break
         when = 6
              print 'FICA Medicare Tips  [T,Z]' (+1,1)
              break
         when = 7
              print 'Federal Unemployment Insurance  [U]' (+1,1)
              break
         when = 9                                                         !HP00001
              print 'Non Resident Alien Tax 1042 [A]' (+1,1)              !HP00001
              break                                                       !HP00001
         when = 8
              print 'Additional Medicare Tax [7]' (+1,1)
              break
     end-evaluate

     let #M = #K
     let #N = #L

     let #linetoprint = 0
     if $RptPeriod = 'M'
        print 'MTD' (+#linetoprint,50)
        let #linetoprint = 1
        do Get-TaxArray
     end-if

     let #N = #L + 10
     print 'QTD' (+#linetoprint,50)
     do Get-TaxArray

     let #N = #L + 20
     print 'YTD' (+1,50)
     do Get-TaxArray

     print '' (+2,1)

     let #L = #L + 1

  end-while

end-procedure


begin-procedure Get-TaxArray
  let #EETxGrs = 0
  let #EETax   = 0
  let #ERTxGrs = 0
  let #ERTax   = 0
  let #EENLGrs = 0
  let #ERNLGrs = 0

  if $eor-total = 'Y'
     get  #EETxGrs         #EETax         #ERTxGrs         #ERTax
              #EENLGrs          #ERNLGrs
          from TotTaxArray(#M)
          Tot-EE-TxGrs(#N) Tot-EE-Tax(#N) Tot-ER-TxGrs(#N) Tot-ER-Tax(#N)
              Tot-EE-NL-Grs(#N) Tot-ER-NL-Grs(#N)
  else
     get  #EETxGrs     #EETax     #ERTxGrs     #ERTax     #EENLGrs      #ERNLGrs
          from TaxArray(#M)
          EE-TxGrs(#N) EE-Tax(#N) ER-TxGrs(#N) ER-Tax(#N) EE-NL-Grs(#N) ER-NL-Grs(#N)
  end-if

  do Format-Number(#EETxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,56)
  do Format-Number(#EETax, $out, 'B99,999,999,999.99mi')
  print $out                    (,76)
  do Format-Number(#EENLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,96)
  do Format-Number(#ERTxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,116)
  do Format-Number(#ERTax, $out, 'B99,999,999,999.99mi')
  print $out                    (,136)
  do Format-Number(#ERNLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,156)

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'getqtrcd.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Process Scheduler Run Controls
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'geteandg.sqc'  !Get-EandG procedure                             !HP00001
