!***********************************************************************
!  PER106CN: Designated Groups by Jobs Filled and Vacated
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:04:32                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
begin-setup
  #Include 'ptset01.sqc'   !Printer and page-size initialization
end-setup


#define MaxArray   56          ! MaxGroups * MaxAreas
#define MaxGroups  14
#define MaxAreas   4
#define HireSet    '(''HIR'',''XFR'',''PRO'')'
#define TermSet    '(''TER'',''RET'')'
#define ChangeSet  ('XFR','PRO')

!***********************************************************************
! BEGIN-REPORT
!***********************************************************************
begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report
   do Report
   do Reset
   do Stdapi-Term
end-report


!***********************************************************************
! BEGIN-HEADING
!***********************************************************************
begin-heading 7
  #Include 'stdhdg08.sqc'
  print '                                                     Aborignal        Visible'  (+2,1)
  print '          Disabled                   '                                         ()
  print '                                 -----Total----   ----Persons---   --Minoriti'  (+1,1)
  print 'es--   ----Persons---   ----Female----'                                         ()
  print 'Occupational Group               Filled Vacated   Filled Vacated   Filled Vac' (+1,1)
  print 'ated   Filled Vacated   Filled Vacated'                                        ()
end-heading


!***********************************************************************
! BEGIN-PROCEDURE Init-Report
!***********************************************************************
begin-procedure Init-Report

   move 'PER106CN' to $ReportID
   move 'Designated Groups by Jobs Filled and Vacated' to $ReportTitle
   display $ReportTitle

   do Stdapi-Init

   if $prcs_process_instance = ''
      do Ask-From-Thru-Date
      do Ask-AreaCd($AreaList,#AreaCnt)
   else
      do Select-Parameters
   end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Values
!***********************************************************************
begin-procedure Get-Values

   do Get-From-Thru-Date
   do Get-Can-OEE-Parameters
   let #AreaCnt = 1

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Report
!***********************************************************************
begin-procedure Report

   create-array name=Salary-Grades size={MaxArray} field=MinSal:number
                                                   field=MaxSal:number

   create-array name=Values        size={MaxArray} field=Total:number:8
                                                   field=Aboriginal:number:8
                                                   field=Minority:number:8
                                                   field=Disabled:number:8
                                                   field=Female:number:8

   do Get-SalGrades($AreaList,{HireSet},$FromDate,$ThruDate)
   do Calc-Ttls(0,$AreaList,{HireSet},$FromDate,$ThruDate)
   do Get-SalGrades($AreaList,{TermSet},$FromDate,$ThruDate)
   do Get-SalGrades-Changes($AreaList,$FromDate,$ThruDate)
   do Calc-Ttls(1,$AreaList,{TermSet},$FromDate,$ThruDate)
   do Calc-Ttls-Changes($AreaList,$FromDate,$ThruDate)
   do Print-Report($AreaList,#AreaCnt)

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calc-Row
!***********************************************************************
begin-procedure Calc-Row($AreaList,$Area,$Group,:#Row)

   let #Pos = ((instr($AreaList,$Area,1) + 2) / 5) - 1
   let #Row = #Pos * {MaxGroups} + to_number($Group) - 1

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calc-AreaGroup
!***********************************************************************
begin-procedure Calc-AreaGroup($AreaList,:$Area,:$Group,#Row)

   let #Pos   = trunc((#Row+1)/{MaxGroups},0) + 1
   let $Group = edit(#Row-trunc((#Row+1)/{MaxGroups},0)*{MaxGroups}+1,'09')
   let $Area  = {ps-substr}($AreaList,#Pos*5-2,2)

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calc-Ttls
!***********************************************************************
begin-procedure Calc-Ttls(#Position,$AreaList,$Set,$FromDate,$ThruDate)

begin-SELECT

E.CAN_OEE_AREACD
D.CAN_NOC_OCC_GROUP
B.ABORIGINAL
B.MINORITY
B.DISABLED
B.FEMALE
A.ANNUAL_RT &Annual

     if &E.Can_OEE_AreaCd <> $Area or &D.Can_NOC_Occ_Group <> $Group
        let $Area = &E.Can_OEE_AreaCd
        let $Group = &D.Can_NOC_Occ_Group
        do Calc-Row($AreaList,$Area,$Group,#Row)
        GET #MinSal #MaxSal from SALARY-GRADES(#ROW)
        let #Division =  (#MaxSal-#MinSal) / 4
        let #GroupA = #MinSal + #Division
        let #GroupB = #GroupA + #Division
        let #GroupC = #GroupB + #Division
        let #GroupD = #GroupC + #Division
     end-if

     if &Annual < #GroupA
        let #Col = 0 + #Position
     else
        if &Annual < #GroupB
           let #Col = 2 + #Position
        else
           if &Annual < #GroupC
              let #Col = 4 + #Position
           else
              let #Col = 6 + #Position
           end-if
        end-if
     end-if
     ARRAY-ADD 1 TO Values(#row) TOTAL(#COL)
     do Designated-Groups(#Col,&B.Aboriginal,&B.Minority,&B.Disabled,
                          &B.Female,#row)

FROM PS_JOB A,
     PS_CAN_OEE_SURVEY B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E

WHERE A.ACTION IN
  #ifdef MVSTEST
    \u005c$Set\u005c
  #else
    [$Set]
  #endif
   AND A.EFFDT BETWEEN $FromDate AND $ThruDate
   AND A.EFFSEQ = (SELECT MAX(A1.EFFSEQ) FROM PS_JOB A1
      WHERE A1.EMPLID = A.EMPLID
        AND A1.EFFDT = A.EFFDT)
   AND B.EMPLID = A.EMPLID
   AND B.RECEIVEDT = (SELECT MAX(B1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY B1
      WHERE B1.EMPLID = B.EMPLID AND B1.RECEIVEDT <= $ThruDate)
   AND B.COMPLETED = 'Y'
   AND C.JOBCODE = A.JOBCODE
   AND C.SETID = A.SETID_JOBCODE
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
      WHERE C1.JOBCODE = C.JOBCODE
       AND C1.SETID = C.SETID
       AND C1.EFFDT <= A.EFFDT)
   AND D.CAN_NOC_CD = C.CAN_NOC_CD
   AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
      WHERE D1.CAN_NOC_CD = D.CAN_NOC_CD AND D1.EFFDT <= A.EFFDT)
   AND E.LOCATION = A.LOCATION
   AND E.SETID = (SELECT SETID
                   FROM PS_SET_CNTRL_REC
                   WHERE RECNAME = 'LOCATION_TBL'
                    AND SETCNTRLVALUE = A.BUSINESS_UNIT)
   AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
      WHERE E1.LOCATION = E.LOCATION
       AND E1.SETID = E.SETID
       AND E1.EFFDT <= A.EFFDT)
   AND E.CAN_OEE_AREACD IN
     #ifdef MVSTEST
       \u005c$AreaList\u005c
     #else
       [$AreaList]
     #endif
ORDER BY E.CAN_OEE_AREACD ASC, D.CAN_NOC_OCC_GROUP ASC

end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calc-Ttls-Changes
!***********************************************************************
begin-procedure Calc-Ttls-Changes($AreaList,$FromDate,$ThruDate)

begin-SELECT

A.EMPLID
A.EFFDT

   do Calc-Ttls-PastJob(&A.Emplid,&A.Effdt,$AreaList)

FROM  PS_JOB A

WHERE ACTION IN {CHANGESET}
    AND A.EFFDT BETWEEN $FromDate AND $ThruDate
    AND A.EFFSEQ = (SELECT MAX(A1.EFFSEQ) FROM PS_JOB A1
       WHERE A1.EMPLID = A.EMPLID
         AND A1.EFFDT  = A.EFFDT)

end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calc-Ttls-PastJob
!***********************************************************************
begin-procedure Calc-Ttls-PastJob($Emplid,$Effdt,$AreaList)

begin-SELECT

A.ANNUAL_RT     &Annual
B.EMPLID
A.ACTION
B.ABORIGINAL
B.MINORITY
B.DISABLED
B.FEMALE
D.CAN_NOC_OCC_GROUP
E.CAN_OEE_AREACD

   do Calc-Row($AreaList,&E.Can_OEE_AreaCd,&D.Can_NOC_Occ_Group,#Row)
   GET #MinSal #MaxSal from SALARY-GRADES(#ROW)
   let #Division = (#MaxSal-#MinSal) /4
   if &Annual <= #MinSal + #Division
      let #Col = 1
   else
      if &Annual <= #MinSal + #Division * 2
         let #Col = 3
      else
         if &Annual <= #MinSal + #Division * 3
            let #Col = 5
         else
            let #Col = 7
         end-if
      end-if
   end-if
   ARRAY-ADD 1 to Values(#Row) TOTAL(#COL)
   do Designated-Groups(#Col,&B.Aboriginal,&B.Minority,&B.Disabled,&B.Female,#Row)

FROM PS_JOB A,
     PS_CAN_OEE_SURVEY B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E

WHERE A.EMPLID = $Emplid
    AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_JOB A1
       WHERE A1.EMPLID = A.EMPLID
         AND A1.EMPL_RCD = A.EMPL_RCD
         AND A1.EFFDT < $Effdt)
    AND A.EFFSEQ = (SELECT MAX(A2.EFFSEQ) FROM PS_JOB A2
       WHERE A2.EMPLID = A.EMPLID
         AND A2.EFFDT = A.EFFDT)
    AND B.EMPLID = A.EMPLID
    AND B.RECEIVEDT = (SELECT MAX(B1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY B1
       WHERE B1.EMPLID = B.EMPLID
         AND B1.RECEIVEDT <= $Effdt)
    AND B.COMPLETED = 'Y'
    AND C.JOBCODE = A.JOBCODE
    AND C.SETID = A.SETID_JOBCODE
    AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
       WHERE C1.JOBCODE = C.JOBCODE
         AND C1.SETID = C.SETID
         AND C1.EFFDT <= A.EFFDT)
    AND D.CAN_NOC_CD = C.CAN_NOC_CD
    AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
       WHERE D1.CAN_NOC_CD = D.CAN_NOC_CD
         AND D1.EFFDT <= A.EFFDT)
    AND E.LOCATION = A.LOCATION
    AND E.SETID = (SELECT SETID
                   FROM PS_SET_CNTRL_REC
                   WHERE RECNAME = 'LOCATION_TBL'
                    AND SETCNTRLVALUE = A.BUSINESS_UNIT)
    AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
       WHERE E1.LOCATION = E.LOCATION
         AND E1.SETID = E.SETID
         AND E1.EFFDT <= A.EFFDT)
    AND E.CAN_OEE_AREACD IN
      #ifdef MVSTEST
        \u005c$AreaList\u005c
      #else
        [$AreaList]
      #endif
end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Designated-Groups
!***********************************************************************
begin-procedure Designated-Groups(#SalGrp,$Aboriginal,$Minority,$Disabled,
                                  $Female,#Row)

   if $Aboriginal = 'Y'
      array-add 1 to Values(#Row) Aboriginal(#SalGrp)
   end-if
   if $Minority = 'Y'
      array-add 1 to Values(#Row) Minority(#SalGrp)
   end-if
   if $Disabled = 'Y'
      array-add 1 to Values(#Row) Disabled(#SalGrp)
   end-if
   if $Female = 'Y'
      array-add 1 to Values(#Row) Female(#SalGrp)
   end-if

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Get-SalGrades
!***********************************************************************
begin-procedure Get-SalGrades($AreaList,$Set,$FromDate,$ThruDate)

begin-SELECT

E.CAN_OEE_AREACD
D.CAN_NOC_OCC_GROUP
MAX(A.ANNUAL_RT)   &MaxSal
MIN(A.ANNUAL_RT)   &MinSal

   do Calc-Row($AreaList,&E.Can_OEE_AreaCd,&D.Can_NOC_Occ_Group,#Row)
   PUT &MinSal &MaxSal INTO SALARY-GRADES(#ROW)

FROM PS_JOB A,
     PS_CAN_OEE_SURVEY B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E

WHERE A.ACTION IN ('HIR','PRO','XFR')
   AND A.EFFDT >= $FromDate AND A.EFFDT <= $ThruDate
   AND A.EFFSEQ = (SELECT MAX(A1.EFFSEQ) FROM PS_JOB A1
      WHERE A1.EMPLID = A.EMPLID
        AND A1.EFFDT  = A.EFFDT)
   AND B.EMPLID = A.EMPLID
   AND B.RECEIVEDT = (SELECT MAX(B1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY B1
      WHERE B1.EMPLID = B.EMPLID
        AND B1.RECEIVEDT <= $ThruDate)
   AND B.COMPLETED = 'Y'
   AND C.JOBCODE = A.JOBCODE
   AND C.SETID = A.SETID_JOBCODE
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
      WHERE C1.JOBCODE = C.JOBCODE
        AND C1.SETID = C.SETID
        AND C1.EFFDT <= A.EFFDT)
   AND D.CAN_NOC_CD = C.CAN_NOC_CD
   AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
      WHERE D1.CAN_NOC_CD = D.CAN_NOC_CD
        AND D1.EFFDT <= A.EFFDT)
   AND E.LOCATION = A.LOCATION
   AND E.SETID = A.SETID_LOCATION
   AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
      WHERE E1.LOCATION = E.LOCATION
        AND E1.SETID = E.SETID
        AND E1.EFFDT <= A.EFFDT)
   AND E.CAN_OEE_AREACD IN
     #ifdef MVSTEST
       \u005c$AreaList\u005c
     #else
       [$AreaList]
     #endif
GROUP BY E.CAN_OEE_AREACD, D.CAN_NOC_OCC_GROUP
ORDER BY E.CAN_OEE_AREACD ASC, D.CAN_NOC_OCC_GROUP ASC

end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Get-SalGrades-Changes
!***********************************************************************
begin-procedure Get-SalGrades-Changes($AreaList,$FromDate,$ThruDate)

begin-SELECT

A.EMPLID
A.EFFDT

   do Get-Past-Salary(&A.Emplid,&A.Effdt,$AreaList)

FROM  PS_JOB A

WHERE A.ACTION IN {CHANGESET}
    AND A.EFFDT BETWEEN $FromDate AND $ThruDate
    AND A.EFFSEQ = (SELECT MAX(A1.EFFSEQ) FROM PS_JOB A1
       WHERE A1.EMPLID = A.EMPLID
         AND A1.EFFDT  = A.EFFDT)

end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Get-Past-Salary
!***********************************************************************
begin-procedure Get-Past-Salary($Emplid, $Effdt, $AreaList)

begin-SELECT

A.ANNUAL_RT     &Annual
D.CAN_NOC_OCC_GROUP
E.CAN_OEE_AREACD

   do Calc-Row($AreaList,&E.Can_OEE_AreaCd,&D.Can_NOC_Occ_Group,#Row)
   GET #MinSal #MaxSal FROM SALARY-GRADES(#ROW)
   let #MinSal = cond(&Annual<#MinSal or #MinSal=0,&Annual,#MinSal)
   let #MaxSal = cond(&Annual>#MaxSal,&Annual,#MaxSal)
   PUT #MinSal #MaxSal INTO SALARY-GRADES(#ROW)

FROM PS_JOB A,
     PS_CAN_OEE_SURVEY B,
     PS_JOBCODE_TBL C,
     PS_CAN_NOC_TBL D,
     PS_LOCATION_TBL E


WHERE A.EMPLID = $Emplid
    AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_JOB A1
       WHERE A1.EMPLID = A.EMPLID
         AND A1.EFFDT < $Effdt)
    AND A.EFFSEQ = (SELECT MAX(A2.EFFSEQ) FROM PS_JOB A2
       WHERE A2.EMPLID = A.EMPLID
         AND A2.EFFDT = A.EFFDT)
    AND B.EMPLID = A.EMPLID
    AND B.RECEIVEDT = (SELECT MAX(B1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY B1
       WHERE B1.EMPLID = B.EMPLID
         AND B1.RECEIVEDT <= A.EFFDT)
    AND B.COMPLETED = 'Y'
    AND C.JOBCODE = A.JOBCODE
    AND C.SETID = A.SETID_JOBCODE
    AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_JOBCODE_TBL C1
       WHERE C1.JOBCODE = C.JOBCODE
         AND C1.SETID = C.SETID
         AND C1.EFFDT <= A.EFFDT)
    AND D.CAN_NOC_CD = C.CAN_NOC_CD
    AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_CAN_NOC_TBL D1
       WHERE D1.CAN_NOC_CD = D.CAN_NOC_CD
         AND D1.EFFDT <= A.EFFDT)
    AND E.LOCATION = A.LOCATION
    AND E.SETID = A.SETID_LOCATION
    AND E.EFFDT = (SELECT MAX(E1.EFFDT) FROM PS_LOCATION_TBL E1
       WHERE E1.LOCATION = E.LOCATION
         AND E1.SETID = E.SETID
         AND E1.EFFDT <= A.EFFDT)
    AND E.CAN_OEE_AREACD IN
      #ifdef MVSTEST
        \u005c$AreaList\u005c
      #else
        [$AreaList]
      #endif
end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Print-Report
!***********************************************************************
begin-procedure Print-Report($AreaList,#AreaCnt)

   let #TtlRows = #AreaCnt * {MaxGroups}
   while #Row < #TtlRows
      get #Ttl1 #Ttl2 #Ttl3 #Ttl4 #Ttl5 #Ttl6 #Ttl7 #Ttl8 from Values(#Row) -
          Total(0) Total(1) Total(2) Total(3) Total(4) Total(5) Total(6) Total(7)
      if #Ttl1>0 or #Ttl2>0 or #Ttl3>0 or #Ttl4>0 or #Ttl5>0 or #Ttl6>0 or #Ttl7>0 or #Ttl8>0
         do Calc-AreaGroup($AreaList,$Area,$Group,#Row)
         if $Area <> $AreaChk
            let $_FieldName = 'CAN_OEE_AREACD'
            let $_FieldValue = $Area
            do Read-Translate-Table
            print $_XlatLongName         (+2,1,30)
            let $AreaChk = $Area
         end-if
         let $_FieldName = 'CAN_NOC_OCC_GROUP'
         let $_FieldValue = $Group
         do Read-Translate-Table
         print $_XlatLongName         (+2,3,30)
         let #Lns = 0
         while #Lns < 4
            let #S = #Lns*2
            let #E = #Lns*2 + 1
            get #Ttl1 #Ttl2 #Abr1 #Abr2 #Min1 #Min2 #Dis1 #Dis2 #Fem1 #Fem2 -
              from Values(#Row) Total(#S) Total(#E) Aboriginal(#S) -
              Aboriginal(#E) Minority(#S) Minority(#E) Disabled(#S) -
              Disabled(#E) Female(#S) Female(#E)
            let $out = 'Salary Group' || edit (#Lns+1,'99')
            print $out                (+1,5,29)
            print #Ttl1               (0,35,7)  edit 99999
            print #Ttl2               (0,43,8)  edit 99999
            print #Abr1               (0,52,7)  edit 99999
            print #Abr2               (0,60,8)  edit 99999
            print #Min1               (0,69,7)  edit 99999
            print #Min2               (0,77,8)  edit 99999
            print #Dis1               (0,86,7)  edit 99999
            print #Dis2               (0,94,8)  edit 99999
            print #Fem1               (0,103,7) edit 99999
            print #Fem2               (0,111) edit 99999
            add 1 to #Lns
         end-while
      end-if
      add 1 to #Row
   end-while

end-procedure


#Include 'hrrnctl1.sqc'  !Get run control parameter values
#Include 'hrgetval.sqc'  !Get values mask routines

#Include 'askftd.sqc'    !Get-From-Thru date procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'askarea.sqc'   !Get-AreaCd procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
