!******************************************
! BAS005: Benefits Confirmation Forms
!******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/03/02:02:21:50                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set Database Environment

Begin-Setup
  #Include 'setupdb.sqc'

  #define PRINTER_TYPE HPLASERJET

  Declare-Printer HP-definition
      Type=HPLASERJET
      Font=5
      Point-Size=12
      Pitch=17
      Symbol-Set=0U     ! ASCII symbol set
  End-Declare

  Declare-Layout default
      Orientation=Portrait
      Top-Margin= .4
      Left-Margin=.60
      Max-Lines=63
      Max-Columns=130
      Char-Width=7.2
      Line-Height=12     ! 72/printer_point-size
  End-Declare

End-Setup


#define OE_Return_Dt    '11/15/'     !Printed in heading for OE
#define EM_Return_Dt    '2 weeks'    !Printed in heading for EM

!Column Position
#define col0                20      !Headings 0 through 4
#define col1                25
#define col1a               38
#define col2                48
#define col2a               55
#define col3                57
#define col3a               66
#define col4                66

#define col5                63
#define col6                72

!Page Parameter
#define Num_Per_Page       20       !Number of plans+1 that can fit on each
                                    !page--before automatic page break
#define Total_Line         50       !Begin Total line for Plan Accumulations
#define Start_Footer       59       !Begin Footer line for each page
#define Start_Row           1

!Edit Mask
#define covrg_mask          $9,999,999
#define period_pay_mask     $99,999.99
#define pct_mask            990.99
#define amt_mask            $99,999.99

!Printer
#define Laser Postscript

!Line
#define horz_line_ln  80
#define horz_short_ln 50
#define horz_short_ln_1 60
#define norm_lnsize   10

!Point Size
#define SMALL           '8'     !Small point size
#define NORM            '10'    !Normal point size
#define BIG             '14'    !Large point size#define NORM_LNSIZE '10' !Normal Line Size
#define NORM_LNSIZE     '10'    !Normal Line
#define BIG_LNSIZE      '20'    !Large Line

!*************************************
Begin-Program
!*************************************

  do Init-Report

  display 'Report Begin at ' noline
  do display-time

  do Init_Printer

  do Main-Report

  display 'Report Ended at ' noline
  do display-time

  display ''
!*** 'Confirmation Forms Printed: '
  display $BAS005-FORM-COUNT noline
  display #Empl_Cnt  999

  do StdAPI-Term

End-Program


!*************************************
Begin-Procedure Init-Report
!*************************************

  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime
  do StdAPI-Init

  let $ReportID = 'BAS005'
  do Get-Report-Language
  display ''
  display $ReportID noline
  display ': '      noline
  display $BAS005-REPORTTITLE

  if IsBlank($prcs_process_instance)
    do Ask-Values
  else
    do Get-Values
  end-if

  move 0 to #Empl_Cnt            !Number of confirmation forms processed

End-Procedure

!*************************************
Begin-Procedure Ask-Values
!*************************************

  do Ask-Schedule-Id
  do Ask-Event
  do Ask-Process-Status
  do Ask-Reprint-Prompt

End-Procedure


!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS005 program IDS
do Init_Report_Translation($ReportID, $curr_language_cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS005', 'REPORT_TITLE',   $BAS005-REPORTTITLE, #CW)
do Get_Field_Information ('BAS005', 'FORM_COUNT',     $BAS005-FORM-COUNT,  #CW)
do Get_Field_Information ('BAS005', 'FORM_FOR_EE',    $BAS005-FORM-FOR-EE, #CW)
do Get_Field_Information ('BAS005', 'DEDN_NOT_SYNCH', $BAS005-DEDN-NO-SYNCH, #CW)
do Get_Field_Information ('BEN1',   'AFTER-TAX',      $BEN1-AFTER-TAX,     #CW)
do Get_Field_Information ('BEN1',   'PRE-TAX',        $BEN1-PRE-TAX,       #CW)

do Get_Field_Information ('BAS005', 'BEN_PGM',        $BAS005-BEN-PGM,     #CW)
do Get_Field_Information ('BAS005', 'DT_OF_BIRTH',    $BAS005-DT-OF-BIRTH, #CW)
do Get_Field_Information ('BAS005', 'SERV_DT',        $BAS005-SERV-DT,     #CW)
do Get_Field_Information ('BAS005', 'EVNT_CLASS',     $BAS005-EVNT-CLASS,  #CW)
do Get_Field_Information ('BAS005', 'INVST_OPT',      $BAS005-INVST-OPT,   #CW)
do Get_Field_Information ('BAS005', 'WITHIN',         $BAS005-WITHIN,      #CW)
do Get_Field_Information ('BAS005', 'BY',             $BAS005-BY,          #CW)
do Get_Field_Information ('BAS005', 'BEN_CHOICE',     $BAS005-BEN-CHOICE,  #CW)
do Get_Field_Information ('BAS005', 'CATEG_BASE',     $BAS005-CATEG-BASE,  #CW)
do Get_Field_Information ('BAS005', 'CONFIRM_OF',     $BAS005-CONFIRM-OF,  #CW)
do Get_Field_Information ('BAS005', 'ELECTIONS',      $BAS005-ELECTIONS,   #CW)
do Get_Field_Information ('BAS005', 'HOURS',          $BAS005-HOURS,       #CW)
do Get_Field_Information ('BAS005', 'WAIVE',          $BAS005-WAIVE,       #CW)
do Get_Field_Information ('BAS005', 'DEP_BENEFS',     $BAS005-DEP-BENEFS,  #CW)
do Get_Field_Information ('BAS005', 'MED_DENT',       $BAS005-HLTH-SUBTTL, #CW)
do Get_Field_Information ('BAS005', 'LIFE_SUBTTL',    $BAS005-LIFE-SUBTTL, #CW)
do Get_Field_Information ('BAS005', 'SVGS_SUBTTL',    $BAS005-SVGS-SUBTTL, #CW)
do Get_Field_Information ('BAS005', 'PENS_SUBTTL',    $BAS005-PENS-SUBTTL, #CW)
do Get_Field_Information ('BAS005', 'BEN_PER',        $BAS005-BEN-PER,     #CW)
do Get_Field_Information ('BAS005', 'EXCESS',         $BAS005-EXCESS,      #CW)
do Get_Field_Information ('BAS005', 'CONTING',        $BAS005-CONTING,     #CW)
do Get_Field_Information ('BAS005', 'ER_TOTAL',       $BAS005-ER-TOTAL,    #CW)
do Get_Field_Information ('BAS005', 'TAX_IMPACT',     $BAS005-TAX-IMPACT,  #CW)

do Get_Field_Information ('BAS005', 'T01_L01A',       $BAS005-T01-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L01A',       $BAS005-T02-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L02A',       $BAS005-T02-L02A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L02B',       $BAS005-T02-L02B,    #CW)
do Get_Field_Information ('BAS005', 'T03_L01A',       $BAS005-T03-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L01A',       $BAS005-T04-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L02A',       $BAS005-T04-L02A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L03A',       $BAS005-T04-L03A,    #CW)
do Get_Field_Information ('BAS005', 'T05_L01A',       $BAS005-T05-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T06_L01A',       $BAS005-T06-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T07_L01A',       $BAS005-T07-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01A',       $BAS005-T08-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01B',       $BAS005-T08-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01C',       $BAS005-T08-L01C,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01D',       $BAS005-T08-L01D,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01E',       $BAS005-T08-L01E,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01F',       $BAS005-T08-L01F,    #CW)
do Get_Field_Information ('BAS005', 'T09_L01A',       $BAS005-T09-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T10_L01A',       $BAS005-T10-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T10_L01B',       $BAS005-T10-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L01A',       $BAS005-T11-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L01B',       $BAS005-T11-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L02A',       $BAS005-T11-L02A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L02B',       $BAS005-T11-L02B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L03A',       $BAS005-T11-L03A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L03B',       $BAS005-T11-L03B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L05A',       $BAS005-T11-L05A,    #CW)

do Get_Field_Information ('BEN1',   'EMPLOYEE_ID2',   $BEN1-EMPLOYEE-ID2,  #CW)
do Get_Field_Information ('BEN1',   'EFFDT2',         $BEN1-EFFDT2,        #CW)
do Get_Field_Information ('BEN1',   'PAY_PERIOD',     $BEN1-PAY-PERIOD,    #CW)
do Get_Field_Information ('BEN1',   'COVERAGE',       $BEN1-COVERAGE,      #CW)
do Get_Field_Information ('BEN1',   'AFTERTAX',       $BEN1-AFTERTAX,      #CW)
do Get_Field_Information ('BEN1',   'PRETAX',         $BEN1-PRETAX,        #CW)
do Get_Field_Information ('BEN1',   'DEDCTON',        $BEN1-DEDCTON,       #CW)
do Get_Field_Information ('BEN1',   'EMPLOYER',       $BEN1-EMPLOYER,      #CW)
do Get_Field_Information ('BEN1',   'CONTRIBUTN',     $BEN1-CONTRIBUTN,    #CW)
do Get_Field_Information ('BEN1',   'BEN_OPT',        $BEN1-BEN-OPT,       #CW)
do Get_Field_Information ('BEN1',   'ELECTION',       $BEN1-ELECTION,      #CW)
do Get_Field_Information ('BEN1',   'PERCENT',        $BEN1-PERCENT,       #CW)
do Get_Field_Information ('BEN1',   'PARTICIPATION',  $BEN1-PARTICIPATION, #CW)
do Get_Field_Information ('BEN1',   'YES',            $BEN1-YES,           #CW)
do Get_Field_Information ('BEN1',   'DEPEND_NAME',    $BEN1-DEPEND-NAME,   #CW)
do Get_Field_Information ('BEN1',   'BENEF_NAME',     $BEN1-BENEF-NAME,    #CW)
do Get_Field_Information ('BEN1',   'MEDICAL',        $BEN1-MEDICAL,       #CW)
do Get_Field_Information ('BEN1',   'DENTAL',         $BEN1-DENTAL,        #CW)
do Get_Field_Information ('BEN1',   'VISION',         $BEN1-VISION,        #CW)
do Get_Field_Information ('BEN1',   'OPTION',         $BEN1-OPTION,        #CW)
do Get_Field_Information ('BEN1',   'FLAT_AMT',       $BEN1-FLAT-AMT,      #CW)
do Get_Field_Information ('BEN1',   'TOT_COST',       $BEN1-TOT-COST,      #CW)
do Get_Field_Information ('BEN1',   'SIGNATURE2',     $BEN1-SIGNATURE2,    #CW)
do Get_Field_Information ('BEN1',   'DATE2',          $BEN1-DATE2,         #CW)
do Get_Field_Information ('BEN1',   'EVENT_ID2',      $BEN1-EVENT-ID2,     #CW)
do Get_Field_Information ('BEN1',   'MSG_NOT_FOUND',  $BEN1-NO-MSG-FOUND,  #CW)

End-Procedure

!*************************************
Begin-Procedure Get-Values
!*************************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-Event
  do Get-Process-Status

  if $process_status_EE = 'Y' and $process_status_FE = 'N'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'')) '
  else
  if $process_status_EE = 'N' and $process_status_FE = 'Y'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''FE'')) '
  else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 end-if
 end-if

  do Get-Reprint-Prompt

End-Procedure

!*********************************
Begin-Procedure Ask-Reprint-Prompt
!*********************************

  let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  if ($Reprint = 'Y')
    do Ask-Reprint-Id
  end-if


End-Procedure

!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  let $Reprint_Match = 'N'
  input $Reprint_Id 'Enter Reprint Id'
  let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And Not IsBlank($Reprint_Id)
    do Validate-Reprint-Id
    if ($Reprint_Match = 'N')
      input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    end-if
  End-While

End-Procedure

!**********************************
Begin-Procedure Validate-Reprint-Id
!**********************************

  let $Reprint_Match = 'N'

Begin-SELECT
PRINT_ID
  let $Reprint_Match = 'Y'
FROM  PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id
AND   SCHED_ID = $Sched_Id
End-SELECT

End-Procedure

!**********************************
Begin-Procedure Ask-Process-Status
!**********************************

 again:
 input $ProcStat 'Enter Process Status [FE or EE] '
 let $ProcStat = UPPER(RTRIM($ProcStat,' '))
 if $ProcStat <> 'FE' and $ProcStat <> 'EE' and Not IsBlank ($ProcStat)
   goto again
 end-if

 if IsBlank ($ProcStat)
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS = ''' || $ProcStat || ''') '
 end-if

End-Procedure

!****************************
Begin-Procedure Ask-Event
!****************************

Display 'You will have to enter Employee ID, Benefit Record# and Event ID to print for a single event. '
do Ask-Emplid
if Not IsBlank($Emplid)
  do Ask-Benefit-Rcd-Nbr
  do Ask-Event-ID
end-if

End-Procedure

!*********************************
Begin-Procedure Ask-Benefit-Rcd-Nbr
!*********************************

  while 1 = 1

    input $Answer maxlen=1 'Enter the Benefit Record Number. ' type=integer

    if Not IsBlank($Answer)
      move $Answer to #Benefit_Rcd
      break
    end-if

  end-while

End-Procedure

!*****************************
Begin-Procedure Ask-Event-ID
!*****************************

  while 1 = 1

    input $Answer maxlen=6 'Enter the Event ID. ' type=integer

    if Not IsBlank($Answer)
      move $Answer to #Event-ID
      break
    end-if

  end-while

End-Procedure

!****************************
Begin-Procedure Main-Report
!****************************

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Forms
      do Delete-Reprint-Id
    end-if
  else
    do Print-Forms
  end-if


End-Procedure

!****************************
Begin-Procedure Reprint-Forms
!****************************

Begin-Select
A3.PRINT_ID
A4.EMPLID
A4.BENEFIT_RCD_NBR
A4.EVENT_ID

  let $Where =        ' (A.EMPLID = '''       || &A4.EmplId || ''') And '
  let $TempVal = edit(&A4.BENEFIT_RCD_NBR, '9')
  let $Where = $Where || '(A.BENEFIT_RCD_NBR = ' || $TempVal     || ') And '
  let $TempVal = LTRIM(edit(&A4.EVENT_ID , '999999'),' ')
  let $Where = $Where || '(A.EVENT_ID = '     || $TempVal     || ') '

  do Select-Data

From  PS_BAS_PRNT A3,
      PS_BAS_PRNT_PARTIC A4
Where A3.PRINT_ID = $Reprint_Id
And   A3.PRINT_ID = A4.PRINT_ID
And   A3.SCHED_ID = $Sched_Id
Order By A4.EMPLID ASC,
         A4.BENEFIT_RCD_NBR ASC,
         A4.EVENT_ID ASC
End-Select

End-Procedure

!****************************
Begin-Procedure Print-Forms
!****************************

    let $Where = '(A.EVENT_STATUS IN (''O'',''C'')) And '
    IF RTRIM($EmplID,' ') = ''
      let $Where = $Where || '((A.CONFIRM_NOTIFY_DT IS NULL) Or '
      let $Where = $Where || '(A.STATUS_DT > A.CONFIRM_NOTIFY_DT)) '
    else
      let $where = $where || 'A.EMPLID = ''' || $EmplID || ''' and '
      let $TempVal = edit(#Benefit_Rcd, '9')
      let $where = $where || 'A.BENEFIT_RCD_NBR = ' || $TempVal || ' and '
      let $TempVal = LTRIM(edit(#Event_Id, '999999'),' ')
      let $where = $where || 'A.EVENT_ID = ' || $TempVal
    end-if

    do Select-Data

 End-Procedure

!************************************
Begin-Procedure Select-Data
!************************************

 move 0 to #TmpRow              !Initialize

   IF $Sched_Id = '%'
       let $SchedID = 'A.SCHED_ID LIKE '
      let $SchedID = $SchedID || ''''
      let $SchedID = $SchedID || $Sched_Id
      let $SchedID = $SchedID || ''''
   ELSE
      let $SchedID = 'A.SCHED_ID = '
      let $SchedID = $SchedID || ''''
      let $SchedID = $SchedID || $Sched_Id
      let $SchedID = $SchedID || ''''
   END-IF


Begin-Select
B.LANG_CD
  if $prcs_language_option = 'R'
    if Not IsBlank(&B.Lang_Cd)
      if &B.Lang_Cd <> $Curr_Language_Cd
        let $Curr_Language_Cd = &B.Lang_Cd
        do Report-Translation
      end-if
    else
      if $Curr_Language_Cd <> $Language_Cd
        let $Curr_Language_Cd = $Language_Cd
        do Report-Translation
      end-if
    end-if
  end-if

A.SCHED_ID
A.EMPLID
A.EMPL_RCD
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.BENEFIT_PROGRAM
A.EVENT_CLASS
  let $EventClass = &A.Event_Class
  do Get-Evt-Class-Name   !Returns $EventClassName

A.EVENT_DT
  do Format-DateTime(&A.Event_Dt,$Event_Dt,{DEFDATE},'', '')
  let $Event_YYYY = substr($Event_Dt,7,4)

A.BAS_PROCESS_STATUS
B.NAME
B.BIRTHDATE
 do Format-DateTime(&B.Birthdate,$Birthdate,{DEFDATE},'', '')

C.EFFDT
 do Format-DateTime(&C.Effdt,$EFfdt,{DEFDATE},'','')

C.DESCR
  let $BenefitProgramName = &C.Descr
  let $BenProgram = &A.Benefit_Program
  let $EffDate = &C.Effdt
  do Get-Benefit-Program-Name-Lang  !Returns $BenefitProgramName

C.DFLT_CREDIT_RLLOVR
C.BAS_SHOW_ER_COSTS
C.BAS_SHOW_TAX_IMPCT
D.SERVICE_DT
 do Format-DateTime(&D.Service_Dt,$Service_dt,{DEFDATE},'','')

D.EMPL_RCD

A.CREDIT_ROLLOVER
A.CONFIRM_NOTIFY_DT
A.JOB_EFFDT
F.FREQUENCY_TYPE

 do Get-Empl-Address (&A.EMPLID,$AddrType, $AddressFound)
 let $CityState = RTRIM($GETADDR_City, ' ') || ',  ' || RTRIM($GETADDR_State,' ') || ' ' || $GETADDR_Postal

 move 0 to #Flexible_Credits  !Flexible Credits Accumulator
 move 0 to #Page_Number       !Reset to 0 for each employee
 add 1 to  #Empl_Cnt          !Increment the employee counter

 do Confirmation-Page-One   !Special header for page one.

 if (&A.BAS_PROCESS_STATUS <> 'EE')
   do Get-Flexible-Credits
 end-if

 do Benefit-Choices           !Get elections; then, print forms.
 do Print-Deduction-Totals    !Print deductiion totals
 do Benefit-Choices-Con       !
 do Investment-Choices        !Get investment choices; then, print information
 do Dependent-Benef
 do Approval-Of-Changes
   if (&A.BAS_PROCESS_STATUS <> 'EE')
     do Update-Confirm-Notify-Date
   end-if
 do Reset-Printer

From  PS_BAS_PARTIC      A,
      PS_PERSONAL_DT_FST B,
      PS_BEN_DEFN_PGM    C,
      PS_PER_ORG_ASGN    D,
      PS_JOB             A2,
      PS_PAYGROUP_TBL    P1,
      PS_FREQUENCY_TBL   F

Where [$SchedID]
And   A.PROCESS_IND = 'N'
And   [$Where]
And   A.BAS_SUPPRESS_FORMS IN ('C','B',' ')
And   [$ProcStatCriteria]
And   B.EMPLID = A.EMPLID
And   C.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
And   C.EFFDT =
        (SELECT MAX(EFFDT)
         From PS_BEN_DEFN_PGM
         Where BENEFIT_PROGRAM = C.BENEFIT_PROGRAM)
And   D.EMPLID = A.EMPLID
And   D.BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
And   D.EMPL_RCD = A.EMPL_RCD

And   A2.EMPLID = A.EMPLID
And   A2.EMPL_RCD = A.EMPL_RCD
And   A2.EFFDT = A.JOB_EFFDT
And   A2.EFFSEQ = A.JOB_EFFSEQ
And   P1.COMPANY = A2.COMPANY
And   P1.PAYGROUP = A2.PAYGROUP
And   P1.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_PAYGROUP_TBL
          Where COMPANY = P1.COMPANY
          And   PAYGROUP = P1.PAYGROUP
          And   EFFDT <= A2.EFFDT)
And   P1.PAY_FREQUENCY   = F.FREQUENCY_ID
And   F.EFF_STATUS       = 'A'
And   F.EFFDT            =
    (SELECT MAX(F1.EFFDT)
       FROM PS_FREQUENCY_TBL F1
      WHERE F1.FREQUENCY_ID   = F.FREQUENCY_ID
        AND F1.EFF_STATUS     = F.EFF_STATUS
        AND F1.EFFDT         <= P1.EFFDT)
Order By A.BAS_PROCESS_STATUS ASC,
         A.EMPLID ASC,
         A.BENEFIT_RCD_NBR ASC,
         A.EVENT_ID ASC

End-Select
End-Procedure


!*****************************
Begin-Procedure Reset-Printer
!*****************************

 new-page

End-Procedure


!*************************************
Begin-Procedure Confirmation-Page-One
!*************************************

 do Page-Header

 Alter-Printer Font=5 Point-Size={NORM}
 let #Col4 = {col4} - 10

 print &B.Name                       (4,1)
!*** 'Benefit Pgm:'
 print $BAS005-BEN-PGM               (,#col4)
 print &A.Benefit_Program            (,{col4})

 if IsBlank($GETADDR_Address1)
    print ''                         (+1,1)
 else
    print $GETADDR_Address1          (+1,1)
 end-if
!*** 'Employee ID:'
 print $BEN1-EMPLOYEE-ID2            (,{col1})
 print &A.Emplid                     (,{col1a})
!*** 'Effective Date:'
 print $BEN1-EFFDT2                  (,#col4)
 print $Event_Dt                     (,{col4})

 if IsBlank($GETADDR_Address2)
   print $CityState                  (+1,1)
 else
   print $GETADDR_Address2           (+1,1)
 end-if
!*** 'Date of Birth:'
 print $BAS005-DT-OF-BIRTH           (,{col1})
 print $Birthdate                    (,{col1a})
!***  'Service Date:'
 print $BAS005-SERV-DT               (,#col4)
 print $Service_Dt                   (,{col4})

 if IsBlank($GETADDR_Address2)
   print ''                          (+1,1)
 else
   print $CityState                  (+1,1)
 end-if
!*** 'Event Id:'
 print $BEN1-EVENT-ID2               (,{col1})
 let #col1 =  10
 print &A.Event_Id                   (,{col1a})
!***  'Event Class:'
 print $BAS005-EVNT-CLASS            (,#col4)
 print &A.Event_Class                (,{col4})

 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

 do Format-DateTime(&C.Effdt,$C.Effdt,{DEFCMP},'','')
 let $Tmp_Year = substr($C.Effdt,1,4)
 let #Tmp_Year = To_Number($Tmp_Year)
 Subtract 1 from #Tmp_Year
 let $Cur_Year = To_Char(#Tmp_Year)

!*** 'this form, sign it, and return to Human Resources '
 let $ReturnDt = $BAS005-T01-L01A
 if RTRIM(&A.Event_Class,' ') = 'OE'
!***   'by ' || {OE_Return_Dt} || $Cur_Year || '.'
   let $ReturnDt = $ReturnDt || $BAS005-BY || {OE_Return_Dt} || $Cur_Year || '.'
 else
   let $ReturnDt = $ReturnDt || $BAS005-WITHIN || {EM_Return_Dt} || '.'
 end-if

Alter-Printer Font=5 Point-Size={NORM}

!*** Begin-Document (+2,1)
!*** This  statement  confirms  your  recent  flex  elections.   These  coverages  will  remain  in  effect
!*** until  you  experience  a  change in  family  status  or  in  your  employment  situation.   If  an
!*** error  has  been made  in  recording  your  elections,  please  make the  necessary  corrections  on
!*** $ReturnDt
!*** Please  keep  a  copy  of  this  form  for  your  records.
!*** End-Document


let $printtext = $BAS005-T11-L01A  || $BAS005-T11-L01B
print $printtext         (+2,1)
let $printtext = $BAS005-T11-L02A  || $BAS005-T11-L02B
print $printtext         (+1,1)
let $printtext = $BAS005-T11-L03A  || $BAS005-T11-L03B
print $printtext         (+1,1)
print $ReturnDt          (+1,1)
print $BAS005-T11-L05A   (+1,1)

 Alter-Printer Font=5 Point-Size={NORM}
 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

!*** 'YOUR BENEFIT CHOICES'
 print $BAS005-BEN-CHOICE           (+2,1) Bold
!*** 'Pay Period'
 print $BEN1-PAY-PERIOD             (0,{col5})
!*** 'Pay Period'
 print  $BEN1-PAY-PERIOD            (0,{col6})

 if (&C.BAS_SHOW_ER_COSTS = 'Y')
!*** 'Employer'
    print $BEN1-EMPLOYER            (0,{col4})
 end-if

!*** 'Coverage'
 print $BEN1-COVERAGE               (+1,{col1a})
!*** 'PreTax'
 print $BEN1-PRETAX                 (0,{col5})
!*** 'AfterTax'
 print $BEN1-AFTERTAX               (0,{col6})

 if (&C.BAS_SHOW_ER_COSTS = 'Y')
!*** 'Pay Period'
    print  $BEN1-PAY-PERIOD         (0,{col4})
 end-if

!***  'Benefit Option'
 print $BEN1-BEN-OPT                (+1,{col1})
!***  'Category/Base'
 print $BAS005-CATEG-BASE           (0,{col1a})
!***  'Deduction'
 print $BEN1-DEDCTON                (0,{col5})
!***  'Deduction'
 print $BEN1-DEDCTON                (0,{col6})

 if (&C.BAS_SHOW_ER_COSTS = 'Y')
!***  'Contribution'
    print $BEN1-CONTRIBUTN          (0,{col4})
 end-if

 graphic (0,{col1},{horz_short_ln_1}) Horz-Line {norm_lnsize} !Horizontal Line

End-Procedure

!***************************
Begin-Procedure Page-Header
!***************************

 let $Report_Id = UPPER($BenefitProgramName)
!***  'CONFIRMATION OF ' || $Event_YYYY || ' ELECTIONS '
!***       || '-' || ' ' || $EventClassName
 let $Report_Name = $BAS005-CONFIRM-OF || $Event_YYYY || $BAS005-ELECTIONS
       || '-' || ' ' || $EventClassName

 Alter-Printer Font=5 Point-Size={NORM}

 print $Report_Id                     ({start_row},1) bold
 print $Report_Name                   (+1,1) bold

 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

End-Procedure

!*******************************
Begin-Procedure Benefit-Choices
!*******************************

 move 0 to #PreTax_Total        !PreTax Total Accumulator
 move 0 to #AfterTax_Total      !AfterTax Total Accumulator
 move 0 to #Employer_Total      !Employer (N+T Tax) Total Accumulator
 move 0 to #Line_Ct             !Detail Line Counter
 move 'N' to $TaxImpact

Begin-Select
E.SCHED_ID
 move &E.Sched_Id to $SchedId

E.EMPLID
 move &E.Emplid to $Empl_Id

E.BENEFIT_RCD_NBR
 move &E.BENEFIT_RCD_NBR to #BenefitRcdNo

E.EVENT_ID
 move &E.Event_Id to #EventId

E.PLAN_TYPE
 move &E.Plan_Type to $Plan_Type
 move 'PLAN_TYPE'  to $Fieldname
 move $Plan_Type to $Fieldvalue
 do Read-Translate-Table
 let $PlanDescr = $Xlatlongname

E.OPTION_CD
 let $Option_Cd = RTRIM(&E.Option_Cd,' ')

E.ENROLL_ACTION
E.BAS_ERROR
E.ANNUAL_PLEDGE
E.ANN_EX_CREDIT_FSA
E.VACN_HOURS
 move &E.Vacn_Hours to $Vacn_Hours
 let $Vacn_Hours = $Vacn_Hours || $BAS005-HOURS

E.APAY_EFFDT
E.DISPLAY_PLN_SEQ

 if Not IsBlank($Option_Cd)

   do Get-Option-Info

   move &Op.Covrg_Cd to $CovrgCd
   move &A.Event_Dt  to $CovrgEffdt
   do Get-Covrg-Code-Descr
   let $Covrg_Cd = &OP.Covrg_Cd || ' ' || $CovrgDescr

   move &E.Plan_Type     to $Plan_Type
   move &Op.Benefit_Plan to $Benefit_Plan
   move &A.Event_Dt      to $AsOfDate
   do Get-Benefit-Name

   if (&OP.OPTION_TYPE = 'W')
     let $Option = '(' || $Option_Cd || ') ' || $BAS005-WAIVE
   else
     let $Option = '(' || $Option_Cd || ') ' || $BenefitNameAbbrv
   end-if

   move 0 to #PreTax_Deduction   !PreTax Deduction Accumulator
   move 0 to #AfterTax_Deduction !AfterTax Deduction Accumulator
   move 0 to #Employer_Deduction !Employer (N+T Tax) Deduction Accumulator

   if (&OP.BAS_TAX_IMPACT = 'Y')
      let $TaxImpact = 'Y'
   end-if

   do Get-Cost-Data

 end-if

 do Print-Plan-Pg1

From PS_BAS_PARTIC_PLAN E
Where E.SCHED_ID     = &A.Sched_Id
And   E.EMPLID       = &A.Emplid
And   E.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   E.EVENT_ID     = &A.Event_Id
And   ((E.OPTION_CD <> ' ')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION <> 'T' And E.BAS_ERROR = 'Y')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION = 'T'))
And  ((E.PLAN_TYPE LIKE '0%')
    Or (E.PLAN_TYPE LIKE '1%')
    Or (E.PLAN_TYPE LIKE 'A%')
    Or (E.PLAN_TYPE LIKE '2%')
    Or (E.PLAN_TYPE LIKE '3%')
    Or (E.PLAN_TYPE LIKE '6%')
    Or (E.PLAN_TYPE LIKE '9%'))
Order by E.DISPLAY_PLN_SEQ ASC,
         E.PLAN_TYPE ASC
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Option-Info
!*******************************

Begin-Select
OP.COVRG_CD
OP.CALCULATED_BASE
OP.OPTION_ID
OP.BENEFIT_PLAN
OP.DED_CLASS
OP.BAS_TAX_IMPACT
OP.OPTION_TYPE
OP.PAY_PERIOD1
OP.PAY_PERIOD2
OP.PAY_PERIOD3
OP.PAY_PERIOD4
OP.PAY_PERIOD5

From PS_BAS_PARTIC_OPTN OP
Where OP.SCHED_ID     = $SchedId
And   OP.EMPLID       = $Empl_Id
And   OP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   OP.EVENT_ID     = #EventId
And   OP.PLAN_TYPE    = $Plan_Type
And   OP.OPTION_CD    = $Option_Cd
End-Select
End-Procedure

!*****************************
Begin-Procedure Get-Cost-Data
!*****************************

 move ' ' to $Msg

Begin-Select

G.PLAN_TYPE
G.OPTION_ID
G.DEDN_AMT_B_TAX
G.DEDN_AMT_A_TAX
G.DEDN_AMT_NT_TAX

 if (&G.Dedn_Amt_B_Tax <> 0)
   let #PreTax_Deduction = #PreTax_Deduction + &G.Dedn_Amt_B_Tax
   let #PreTax_Total = #PreTax_Total + &G.Dedn_Amt_B_Tax
 end-if

 if (&G.Dedn_Amt_A_Tax <> 0)
   let #AfterTax_Deduction = #AfterTax_Deduction + &G.Dedn_Amt_A_Tax
   let #AfterTax_Total = #AfterTax_Total + &G.Dedn_Amt_A_Tax
 end-if

 if (&G.Dedn_Amt_NT_Tax <> 0)
   let #Employer_Deduction = #Employer_Deduction + &G.Dedn_Amt_NT_Tax
   let #Employer_Total = #Employer_Total + &G.Dedn_Amt_NT_Tax
 end-if

!*** 'Your deductions are not synchronized with your pay frequency type.'

 Evaluate &F.FREQUENCY_TYPE

  When = 'M'
    if &OP.Pay_Period1 <> 'Y'
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'S'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'B'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
        Or &OP.Pay_Period3 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'W'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
        Or &OP.Pay_Period3 <> 'Y' Or &OP.Pay_Period4 <> 'Y'
        Or &OP.Pay_Period5 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
 End-Evaluate

From PS_BAS_PARTIC_COST G
Where G.SCHED_ID     = &E.Sched_Id
And   G.EMPLID       = &E.Emplid
And   G.BENEFIT_RCD_NBR = &E.BENEFIT_RCD_NBR
And   G.EVENT_ID     = &E.Event_Id
And   G.PLAN_TYPE    = &E.Plan_Type
And   G.OPTION_ID    = &OP.Option_Id
And   G.COST_TYPE    = 'P'
End-Select
End-Procedure

!******************************
Begin-Procedure Print-Plan-Pg1
!******************************

 add 1 to #Line_Ct
 let #mod = Mod(#Line_Ct,{Num_Per_Page})

 if #mod = 0
   do Foot-Note
   new-page
 end-if

 if &E.Bas_Error = 'Y'
   let $PlanDescr = '*' || $PlanDescr
 end-if
 print $PlanDescr            (+1,1)

 if IsBlank($Option_Cd)
   if (&E.Enroll_Action = 'T')
!*** (Coverage has been terminated)
     print $BAS005-T02-L01A     (0,{col1})
   end-if
 else
   print $Option               (0,{col1})

   if (&OP.OPTION_TYPE <> 'W')

     let $Plan_Category = SubStr(&E.Plan_Type, 1, 1)

     if ($Plan_Category = 'A')
         print ' - '              (0,{col1a})
     end-if

     if ($Plan_Category = '1')
         print $Covrg_Cd              (0,{col1a})
     end-if

     if ($Plan_Category = '2') Or ($Plan_Category = '3') Or ($Plan_Category = '4')
           And (RTRIM(&E.Option_Cd,' ') <> 'W')
       print &OP.Calculated_Base      (0,{col1a}) edit {covrg_mask}
     end-if

     if ($Plan_Category = '6')
        do PS_SQR_Trunc(&E.Annual_Pledge, 0, #Test)
        if (&E.Annual_Pledge = #Test)
          print &E.Annual_Pledge    (0,{col1a}) edit {covrg_mask}
        else
          print &E.Annual_Pledge    (0,{col1a}) edit {amt_mask}
        end-if
     end-if

     if ($Plan_Category = '9')
        print $Vacn_Hours       (0,{col1a})
     end-if

     if (#PreTax_Deduction <> 0)
        print #PreTax_Deduction        (0,{col5})  edit {period_pay_mask}
     end-if

     if (#AfterTax_Deduction <> 0)
        print #AfterTax_Deduction      (0,{col6})  edit {period_pay_mask}
     end-if

     if (#Employer_Deduction <> 0) And (&C.BAS_SHOW_ER_COSTS = 'Y')
        print #Employer_Deduction      (0,{col4})  edit {period_pay_mask}
     end-if

     if ((&E.Plan_Type = '60' and &A.Credit_Rollover = 'H') or
         (&E.Plan_Type = '61' and &A.Credit_Rollover = 'D') or
         (&E.Plan_Type = '65' and &A.Credit_Rollover = 'H') or
         (&E.Plan_Type = '66' and &A.Credit_Rollover = 'R')) and
        (&E.Ann_Ex_Credit_FSA <> 0)
          add 1 to #Line_Ct
  !***    (Pledge includes
          print $BAS005-T02-L02A   (+1,{col1})
          print &E.Ann_Ex_Credit_FSA          (0,{col1a}) edit {amt_mask}
  !***    ' of Excess Credit Rollover)'
          print $BAS005-T02-L02B  (0,-3)

        if &E.Plan_Type = '65' or &E.Plan_Type = '66'
           add 1 to #Line_Ct
           print '(Excess Credits have been reduced by Canadian Sales Tax as appropriate)' (+1,31)
        end-if

     end-if

   end-if

 end-if

 if &E.Bas_Error = 'Y'
   add 1 to #Line_Ct
   do Get-Bas-Message
   print '*'                    (+1,5)
   print $PayMsgShort   ()
 end-if

End-Procedure

!************************************
Begin-Procedure Get-Flexible-Credits
!************************************

Begin-Select
M.EMPLID
M.PLAN_TYPE
L.EARNINGS_END_DT
L.OTH_PAY

 Add &L.Oth_Pay to #Flexible_Credits

From PS_BAS_PARTIC_PLAN M,
     PS_ADDL_PAY_DATA   L
Where M.SCHED_ID         = &A.Sched_Id
And   M.EMPLID           = &A.Emplid
And   M.BENEFIT_RCD_NBR     = &A.BENEFIT_RCD_NBR
And   M.EVENT_ID         = &A.Event_Id
And   L.EMPLID           = M.EMPLID
And   L.PLAN_TYPE        = M.PLAN_TYPE
And   L.ADDLPAY_REASON   = 'BAS'
And   L.EFFDT           <= M.APAY_EFFDT
And   L.EFFDT = (SELECT MAX(EFFDT)
                 From   PS_ADDL_PAY_DATA
                 Where  EMPLID         = L.EMPLID
                 And    PLAN_TYPE      = L.PLAN_TYPE
                 And    ADDLPAY_REASON = 'BAS'
                 And    EFFDT         <= M.APAY_EFFDT)
And   ((L.EARNINGS_END_DT IS NULL) Or (L.EARNINGS_END_DT > &A.Event_Dt))

End-Select
End-Procedure

!***********************************
Begin-Procedure Benefit-Choices-Con
!***********************************

!*** let $SubTitle = 'YOUR BENEFIT CHOICES - Continued '
 let $SubTitle = $BAS005-T03-L01A
 let $ChoiceFoundFlag = 'N'
 do Page-Header

Begin-Select

 if ($ChoiceFoundFlag = 'N')
   do Hdg-Con
 end-if

E1.SCHED_ID
 move &E1.Sched_Id to $SchedId
E1.EMPLID
 move &E1.Emplid to $Empl_Id
E1.BENEFIT_RCD_NBR
 move &E1.BENEFIT_RCD_NBR to #BenefitRcdNo
E1.EVENT_ID
 move &E1.Event_Id to #EventId
E1.PLAN_TYPE
 move &E1.Plan_Type to $Plan_Type
 move 'PLAN_TYPE' to $Fieldname
 move $Plan_Type  to $Fieldvalue
 do Read-Translate-Table
 let $Plan_Descr = $Xlatlongname

E1.OPTION_CD
 let $Option_Cd = RTRIM(&E1.Option_Cd,' ')
E1.ENROLL_ACTION

E1.FLAT_DED_AMT
 move &E1.Flat_Ded_Amt to $Flat_Ded_Amt {amt_mask}
E1.PCT_GROSS
 move &E1.Pct_Gross to $Pct_Gross {pct_mask}
E1.SAVINGS_COVRG
 let $PreTax_Descr = $BEN1-PRE-TAX || ' -'
 if &E1.Savings_Covrg = '1'
   let $PreTax_Election = $Flat_Ded_Amt
 else
   let $PreTax_Election = $Pct_Gross || '%'
 end-if

E1.FLAT_DED_AMT_ATAX
 move &E1.Flat_Ded_Amt_Atax to $Flat_Ded_Amt_Atax {amt_mask}
E1.PCT_GROSS_ATAX
 move &E1.Pct_Gross_Atax to $Pct_Gross_Atax {pct_mask}
E1.SAVINGS_COVRG_ATAX
 let $AfterTax_Descr = $BEN1-AFTER-TAX || ' -'
 if &E1.Savings_Covrg_Atax = '1'
   let $AfterTax_Election = $Flat_Ded_Amt_Atax
 else
   let $AfterTax_Election = $Pct_Gross_Atax || '%'
 end-if

E1.PENSION_BASE
 move &E1.Pension_Base to $Pension_Base {covrg_mask}
 let $Pension_Descr = $BAS005-T04-L01A

E1.VOLUNTARY_AMT
 move &E1.Voluntary_Amt to $Voluntary_Amt {amt_mask}
 let $Vol_Amt_Descr = $BAS005-T04-L02A

E1.VOLUNTARY_PCT
 move &E1.Voluntary_Pct to $Voluntary_Pct {pct_mask}
 let $Voluntary_Pct = $Voluntary_Pct || '%'
 let $Vol_Pct_Descr = $BAS005-T04-L03A

E1.BAS_ERROR
E1.DISPLAY_PLN_SEQ

 if Not IsBlank($Option_Cd)

   do Get-Option-Info

   move &E1.Plan_Type    to $Plan_Type
   move &Op.Benefit_Plan to $Benefit_Plan
   move &A.Event_Dt      to $AsOfDate
   do Get-Benefit-Name

   if (&OP.OPTION_TYPE = 'W')
     let $Option = '(' || $Option_Cd || ') ' || $BAS005-WAIVE
   else
     let $Option = '(' || $Option_Cd || ') ' || $BenefitNameAbbrv
   end-if

 end-if

 do Print-Plan-Pg2

From PS_BAS_PARTIC_PLAN E1
Where E1.SCHED_ID     = &A.Sched_Id
And   E1.EMPLID       = &A.Emplid
And   E1.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   E1.EVENT_ID     = &A.Event_Id
And   ((E1.OPTION_CD <> ' ')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION <> 'T' And E1.BAS_ERROR = 'Y')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION = 'T'))
And   (E1.PLAN_TYPE Like '4%'
    Or E1.PLAN_TYPE Like '5%'
    Or E1.PLAN_TYPE Like '7%'
    Or E1.PLAN_TYPE Like '8%')
Order by E1.DISPLAY_PLN_SEQ ASC
End-Select

End-Procedure

!***********************
Begin-Procedure Hdg-Con
!***********************

 print $SubTitle             (+3,1) Bold
!***  'Benefit Option'
 print $BEN1-BEN-OPT         (+2,{col1})
!***  'Election'
 print $BEN1-ELECTION        (0,{col1a})
!***  'Participation'
 print  $BEN1-PARTICIPATION  (0,{col2a})

 graphic (0,{col1},{horz_short_ln}) Horz-Line {norm_lnsize} !Horizontal Line

 let $ChoiceFoundFlag = 'Y'

End-Procedure

!******************************
Begin-Procedure Print-Plan-Pg2
!******************************

 add 1 to #Line_Ct

 if &E1.Bas_Error = 'Y'
   let $Plan_Descr = '*' || $Plan_Descr
 end-if
 print $Plan_Descr                      (+1,1)

 if IsBlank($Option_Cd)
   if (&E1.Enroll_Action = 'T')
!*** '(Coverage has been terminated)'
     print $BAS005-T02-L01A                 (0,{col1})
   end-if
 else
   print $Option                            (0,{col1})

   if (&OP.OPTION_TYPE <> 'W')

     let $Plan_Category = SubStr(&E1.Plan_Type, 1, 1)

     if ($Plan_Category = '4') !Savings
         print $PreTax_Descr          (0,{col1a})
         print $PreTax_Election       (0,{col2a})
         print $AfterTax_Descr        (+1,{col1a})
         print $AfterTax_Election     (0,{col2a})
     end-if

     if ($Plan_Category = '8')  !Pension
         print $Pension_Descr         (0,{col1a})
         print $Pension_Base          (0,{col2a})
         print $Vol_Amt_Descr         (+1,{col1a})
         print $Voluntary_Amt         (0,{col2a})
         print $Vol_Pct_Descr         (+1,{col1a})
         print $Voluntary_Pct         (0,{col2a})
     end-if

   end-if

 end-if

 if &E1.Bas_Error = 'Y'
    add 1 to #Line_Ct
    do Get-Bas-Message
    print '*'                    (+1,5)
    print $PayMsgShort   ()
 end-if

End-Procedure

!**********************************
Begin-Procedure Investment-Choices
!**********************************

!*** 'YOUR INVESTMENT CHOICES'
 let $SubTitle = $BAS005-T05-L01A
 let $InvestFoundFlag = 'N'

Begin-Select

 if ($InvestFoundFlag = 'N')
   do Hdg-Rpt-Investment
 end-if

P.SCHED_ID
 move &P.Sched_Id to $SchedId
P.EMPLID
 move &P.Emplid to $Empl_Id
P.BENEFIT_RCD_NBR
 move &P.BENEFIT_RCD_NBR to #BenefitRcdNo
P.EVENT_ID
 move &P.Event_Id to #EventId
P.PLAN_TYPE
 move &P.Plan_Type to $Plan_Type
P.OPTION_CD
 move &P.Option_Cd to $Option_Cd

   do Get-Ben-Plan    !Returns $Benefit_Plan

P.EVENT_DT
Q.INVESTMENT_OPT

  move &P.Plan_Type      to $Plan_Type
  move &Q.Investment_Opt to $Option_ID
  move &P.Event_Dt       to $AsOfDate
  do Get-Svgs-Invt-Name

Q.INVESTMENT_PCT
Q.BAS_ERROR
 if &Q.Bas_Error = 'Y'
  do Get-Bas-Message
  let $Error_Message = '* ' || $PayMsgShort
 end-if

 do Print-Investments

From PS_BAS_PARTIC_PLAN P,
     PS_BAS_PARTIC_INVT Q
Where P.SCHED_ID     = &A.Sched_Id
And   P.EMPLID       = &A.Emplid
And   P.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   P.EVENT_ID     = &A.Event_Id
And   ((P.OPTION_CD <> ' ')
      Or (P.OPTION_CD = ' ' And P.ENROLL_ACTION <> 'T' And P.BAS_ERROR = 'Y'))
And   Q.SCHED_ID     = P.SCHED_ID
And   Q.EMPLID       = P.EMPLID
And   Q.BENEFIT_RCD_NBR = P.BENEFIT_RCD_NBR
And   Q.EVENT_ID     = P.EVENT_ID
And   Q.PLAN_TYPE    = P.PLAN_TYPE
Order By P.PLAN_TYPE ASC, Q.INVESTMENT_OPT ASC
End-Select

 if ($InvestFoundFlag = 'Y') Or ($ChoiceFoundFlag = 'Y')
   do Foot-Note
 end-if

End-Procedure

!**********************************
Begin-Procedure Hdg-Rpt-Investment
!**********************************

 if ($ChoiceFoundFlag = 'N')
   print $SubTitle                         (+3,1)   bold
 else
   print $SubTitle                         (+6,1)   bold
 end-if

!*** 'Investment Option'
 print $BAS005-INVST-OPT               (+2,{col1})
!*** 'Percent'
 print $BEN1-PERCENT                         (0,{col2a})

 graphic (0,{col1},{horz_short_ln}) Horz-Line {norm_lnsize} !Horizontal Line

 let $InvestFoundFlag = 'Y'

End-Procedure

!*********************************
Begin-Procedure Print-Investments
!*********************************
 print $SvgsInvtDescrAbbrv               (+1,{col1})

 if (&Q.Bas_Error = 'Y')
  print '*'                              (0,{col1a})
 end-if

 print &Q.Investment_pct                 (0,{col2a}) edit {pct_mask}
 print '%'                               ()

 if (&Q.Bas_Error = 'Y')
  print $Error_Message                   (+2,{col1})
 end-if

End-Procedure

!*******************************
Begin-Procedure Dependent-Benef
!*******************************

!*** 'DEPENDENTS/BENEFICIARIES'
  let $SubTitle = $BAS005-DEP-BENEFS
  let $DpndFoundFlag = 'N'
  let $SectionFlag = 'N'

  let #kol0  = {col0}  + 5
  let #kol1  = {col1}  + 11
  let #kol1a = {col1a} + 7
  let #kol2  = {col2a}
  let #kol3  = {col4}

!--------------------------------------

!*** 'Medical/Dental'
  let $PlanTitle = $BAS005-HLTH-SUBTTL
  let $Error_Message  = ''
  let $MedCvgFlag     = ''
  let $DenCvgFlag     = ''
  let $VisCvgFlag     = ''
  let $DependentBenef = ''
  let $PriorDpnd      = ''

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Medical-Dental
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Medical-Dental
  end-if

S.DEPENDENT_BENEF
  if ($PriorDpnd <> &S.Dependent_Benef)
    Do Print-Medical-Cvg
    let $PriorDpnd = &S.Dependent_Benef
  end-if
  let $DependentBenef = &S.Dependent_Benef

R.SCHED_ID
  move &R.Sched_Id to     $SchedId       !Bas Error procedure
R.EMPLID
  move &R.Emplid to       $Empl_Id       !Bas Error procedure
R.BENEFIT_RCD_NBR
  move &R.BENEFIT_RCD_NBR to #BenefitRcdNo  !Bas Error procedure
R.EVENT_ID
  move &R.Event_Id to     #EventId       !Bas Error procedure
R.PLAN_TYPE
  move &R.Plan_Type to    $Plan_Type     !Bas Error procedure
S.BAS_ERROR

T.NAME
  let $DpndName = &T.Name

S.PLAN_TYPE

  Evaluate &S.Plan_Type
    When = '10'
      let $MedCvgFlag = 'Y'
      break
    When = '11'
      let $DenCvgFlag = 'Y'
      break
    When = '14'
      let $VisCvgFlag = 'Y'
      break
  End-Evaluate

  if (&S.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = $Error_Message || $PayMsgShort
  end-if

From PS_BAS_PARTIC_PLAN R,
     PS_BAS_PARTIC_DPND S,
     PS_DEP_BEN_NAME T
Where R.SCHED_ID     = &A.Sched_id
And   R.EMPLID       = &A.Emplid
And   R.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   R.EVENT_ID     = &A.Event_Id
And   R.PLAN_TYPE Like '1%'
And   R.COVERAGE_ELECT <> 'W'
And   R.OPTION_CD      <> ' '
And   S.SCHED_ID     = R.SCHED_ID
And   S.EMPLID       = R.EMPLID
And   S.BENEFIT_RCD_NBR = R.BENEFIT_RCD_NBR
And   S.EVENT_ID     = R.EVENT_ID
And   S.PLAN_TYPE    = R.PLAN_TYPE
And   T.EMPLID          = S.EMPLID
And   T.DEPENDENT_BENEF = S.DEPENDENT_BENEF
And   T.EFFDT = (SELECT MAX(T1.EFFDT)
                  FROM PS_DEP_BEN_NAME T1
                  WHERE T1.EMPLID = T.EMPLID
                  AND T1.DEPENDENT_BENEF = T.DEPENDENT_BENEF
                  AND T1.EFFDT <= $AsOfDate)
Order By S.DEPENDENT_BENEF ASC, R.PLAN_TYPE ASC
End-Select

 Do Print-Medical-Cvg

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = $BAS005-LIFE-SUBTTL

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Life-Or-Pension
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Life-Or-Pension
  end-if

U.SCHED_ID
  move &U.Sched_Id to     $SchedId       !Bas Error procedure
U.EMPLID
  move &U.Emplid to       $Empl_Id       !Bas Error procedure
U.BENEFIT_RCD_NBR
  move &U.BENEFIT_RCD_NBR to #BenefitRcdNo  !Bas Error procedure
U.EVENT_ID
  move &U.Event_Id to     #EventId       !Bas Error procedure
U.PLAN_TYPE
  move &U.Plan_Type to    $Plan_Type     !Bas Error procedure
U.OPTION_CD
  move &U.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan

V.BAS_ERROR

V.DEPENDENT_BENEF
  let $DependentBenef = &V.Dependent_Benef

  if (&V.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

W.NAME
  let $DpndName = &W.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName
  print $DependentBenef         (+1,1)

  print $Benefit_Plan           (0,#kol0)

V.BENEF_PCT
  if (&V.Benef_Pct > 0.0)
    print &V.Benef_Pct          (0,#kol1) edit {PCT_MASK}
  end-if
V.FLAT_AMOUNT
  if (&V.Flat_Amount > 0.0)
    print &V.Flat_Amount        (0,#kol1a) edit {AMT_MASK}
  end-if
V.EXCESS
  if (&V.Excess = 'Y')
    print 'Yes'                 (0,#kol2)
  end-if
V.CONTINGENT
  if (&V.Contingent = 'Y')
    print 'Yes'                 (0,#kol3)
  end-if

  if (&V.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $PayMsgShort
    print $Error_Message        (+1,3)
  end-if

From PS_BAS_PARTIC_PLAN U,
     PS_BAS_PARTIC_DPND V,
     PS_DEP_BEN_NAME W
Where U.SCHED_ID     = &A.Sched_id
And   U.EMPLID       = &A.Emplid
And   U.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   U.EVENT_ID     = &A.Event_Id
And   U.PLAN_TYPE Like '2%'
And   U.COVERAGE_ELECT <> 'W'
And   U.OPTION_CD      <> ' '
And   V.SCHED_ID     = U.SCHED_ID
And   V.EMPLID       = U.EMPLID
And   V.BENEFIT_RCD_NBR = U.BENEFIT_RCD_NBR
And   V.EVENT_ID     = U.EVENT_ID
And   V.PLAN_TYPE    = U.PLAN_TYPE
And   W.EMPLID          = V.EMPLID
And   W.DEPENDENT_BENEF = V.DEPENDENT_BENEF
And   W.EFFDT = (SELECT MAX(W1.EFFDT)
                  FROM PS_DEP_BEN_NAME W1
                  WHERE W1.EMPLID = W.EMPLID
                  AND W1.DEPENDENT_BENEF = W.DEPENDENT_BENEF
                  AND W1.EFFDT <= $AsOfDate)
Order By V.DEPENDENT_BENEF ASC, U.PLAN_TYPE ASC
End-Select

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = $BAS005-SVGS-SUBTTL

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Savings
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Savings
  end-if

X.SCHED_ID
  move &X.Sched_Id to     $SchedId       !Bas Error procedure
X.EMPLID
  move &X.Emplid to       $Empl_Id       !Bas Error procedure
X.BENEFIT_RCD_NBR
  move &X.BENEFIT_RCD_NBR to #BenefitRcdNo  !Bas Error procedure
X.EVENT_ID
  move &X.Event_Id to     #EventId       !Bas Error procedure
X.PLAN_TYPE
  move &X.Plan_Type to    $Plan_Type     !Bas Error procedure
X.OPTION_CD
  move &X.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan

Y.BAS_ERROR

Y.DEPENDENT_BENEF
  let $DependentBenef = &Y.Dependent_Benef

  if (&Y.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

Z.NAME
  let $DpndName = &Z.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName
  print $DependentBenef         (+1,1)

  print $Benefit_Plan           (0,#kol0)

Y.BENEF_PCT                     (0,#KOL1) EDIT {PCT_MASK}

  if (&Y.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $PayMsgShort
    print $Error_Message        (+1,3)
  end-if

From PS_BAS_PARTIC_PLAN X,
     PS_BAS_PARTIC_DPND Y,
     PS_DEP_BEN_NAME Z
Where X.SCHED_ID     = &A.Sched_id
And   X.EMPLID       = &A.Emplid
And   X.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   X.EVENT_ID     = &A.Event_Id
And   X.PLAN_TYPE Like '4%'
And   X.COVERAGE_ELECT <> 'W'
And   X.OPTION_CD      <> ' '
And   Y.SCHED_ID     = X.SCHED_ID
And   Y.EMPLID       = X.EMPLID
And   Y.BENEFIT_RCD_NBR = X.BENEFIT_RCD_NBR
And   Y.EVENT_ID     = X.EVENT_ID
And   Y.PLAN_TYPE    = X.PLAN_TYPE
And   Z.EMPLID          = Y.EMPLID
And   Z.DEPENDENT_BENEF = Y.DEPENDENT_BENEF
And   Z.EFFDT = (SELECT MAX(Z1.EFFDT)
                  FROM PS_DEP_BEN_NAME Z1
                  WHERE Z1.EMPLID = Z.EMPLID
                  AND Z1.DEPENDENT_BENEF = Z.DEPENDENT_BENEF
                  AND Z1.EFFDT <= $AsOfDate)
Order By Y.DEPENDENT_BENEF ASC, X.PLAN_TYPE ASC
End-Select

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = $BAS005-PENS-SUBTTL

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Life-Or-Pension
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Life-Or-Pension
  end-if

A1.SCHED_ID
  move &A1.Sched_Id to     $SchedId       !Bas Error procedure
A1.EMPLID
  move &A1.Emplid to       $Empl_Id       !Bas Error procedure
A1.BENEFIT_RCD_NBR
  move &A1.BENEFIT_RCD_NBR to #BenefitRcdNo  !Bas Error procedure
A1.EVENT_ID
  move &A1.Event_Id to     #EventId       !Bas Error procedure
A1.PLAN_TYPE
  move &A1.Plan_Type to    $Plan_Type     !Bas Error procedure
A1.OPTION_CD
  move &A1.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan

B1.BAS_ERROR

B1.DEPENDENT_BENEF
  let $DependentBenef = &B1.Dependent_Benef

  if (&B1.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

C1.NAME
  let $DpndName = &C1.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName
  print $DependentBenef         (+1,1)

  print $Benefit_Plan           (0,#kol0)

B1.BENEF_PCT
  if (&B1.Benef_Pct > 0.0)
    print &B1.Benef_Pct         (0,#kol1) edit {PCT_MASK}
  end-if
B1.FLAT_AMOUNT
  if (&B1.Flat_Amount > 0.0)
    print &B1.Flat_Amount       (0,#kol1a) edit {AMT_MASK}
  end-if
B1.EXCESS
  if (&B1.Excess = 'Y')
    print $BEN1-YES                 (0,#kol2)
  end-if
B1.CONTINGENT
  if (&B1.Contingent = 'Y')
    print $BEN1-YES                 (0,#kol3)
  end-if

  if (&B1.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $PayMsgShort
    print $Error_Message        (+1,3)
  end-if

From PS_BAS_PARTIC_PLAN A1,
     PS_BAS_PARTIC_DPND B1,
     PS_DEP_BEN_NAME C1
Where A1.SCHED_ID     = &A.Sched_id
And   A1.EMPLID       = &A.Emplid
And   A1.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And   A1.EVENT_ID     = &A.Event_Id
And   A1.PLAN_TYPE Like '8%'
And   A1.COVERAGE_ELECT <> 'W'
And   A1.OPTION_CD      <> ' '
And   B1.SCHED_ID     = A1.SCHED_ID
And   B1.EMPLID       = A1.EMPLID
And   B1.BENEFIT_RCD_NBR = A1.BENEFIT_RCD_NBR
And   B1.EVENT_ID     = A1.EVENT_ID
And   B1.PLAN_TYPE    = A1.PLAN_TYPE
And   C1.EMPLID          = B1.EMPLID
And   C1.DEPENDENT_BENEF = B1.DEPENDENT_BENEF
And   C1.EFFDT = (SELECT MAX(C2.EFFDT)
                   FROM PS_DEP_BEN_NAME C2
                  WHERE C2.EMPLID = C1.EMPLID
                  AND C2.DEPENDENT_BENEF = C1.DEPENDENT_BENEF
                  AND C2.EFFDT <= $AsOfDate)
Order By B1.DEPENDENT_BENEF ASC, A1.PLAN_TYPE ASC
End-Select

!--------------------------------------

 if ($DpndFoundFlag = 'Y')
   do Foot-Note
 end-if

End-Procedure

!****************************************
Begin-Procedure Hdg-Rpt-Dependents-Benef
!****************************************

  print $SubTitle           (+2,1) Bold
  let $DpndFoundFlag = 'Y'

End-Procedure

!**************************************
Begin-Procedure Hdg-Rpt-Medical-Dental
!**************************************

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Dependent Name'
 print $BEN1-DEPEND-NAME    (+1,2)
!*** 'Medical'
  print $BEN1-MEDICAL       (0,#kol0)
!*** 'Dental'
 print $BEN1-DENTAL         (0,#kol1)
!*** 'Vision'
 print $BEN1-VISION         (0,#kol1a)
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!***************************************
Begin-Procedure Hdg-Rpt-Life-Or-Pension
!***************************************

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Beneficiary Name'
 print  $BEN1-BENEF-NAME    (+1,2)
!*** 'Option'
 print  $BEN1-OPTION        (0,#kol0)
!*** '% Benefit'
 print $BAS005-BEN-PER      (0,#kol1)
!*** 'Flat Amount'
 print $BEN1-FLAT-AMT       (0,#kol1a)
!*** 'Excess'
 print $BAS005-EXCESS       (0,#kol2)
!*** 'Contingent'
 print  $BAS005-CONTING     (0,#kol3)
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!*******************************
Begin-Procedure Hdg-Rpt-Savings
!*******************************

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Beneficiary Name'
 print $BEN1-BENEF-NAME     (+1,2)
!*** 'Option'
 print  $BEN1-OPTION        (0,#kol0)
!*** '% Benefit'
 print $BAS005-BEN-PER      (0,#kol1)
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!********************************
Begin-Procedure Print-Medical-Cvg
!********************************

  if Not IsBlank($DependentBenef)

    if Not IsBlank($Error_Message)
      let $DependentBenef = '*' || $DependentBenef
    else
      let $DependentBenef = ' ' || $DependentBenef
    end-if
    let $DependentBenef = $DependentBenef || ' ' || $DpndName

    print $DependentBenef         (+1,1)

    if ($MedCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol0)
    end-if
    if ($DenCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1)
    end-if
    if ($VisCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1a)
    end-if

    if Not IsBlank($Error_Message)
      let $Error_Message = '* ' || $Error_Message
      print $Error_Message        (+1,3)
    end-if

    let $Error_Message  = ''
    let $MedCvgFlag     = ''
    let $DenCvgFlag     = ''
    let $VisCvgFlag     = ''
    let $DependentBenef = ''

  end-if

End-Procedure

!*******************************
Begin-Procedure Get-Ben-Plan
!*******************************

  let $Benefit_Plan = ''

Begin-Select

BP.BENEFIT_PLAN
  let $Benefit_Plan = RTRIM(&BP.Benefit_Plan,' ')

From PS_BAS_PARTIC_OPTN BP
Where BP.SCHED_ID     = $SchedId
And   BP.EMPLID       = $Empl_Id
And   BP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   BP.EVENT_ID     = #EventId
And   BP.PLAN_TYPE    = $Plan_Type
And   BP.OPTION_CD    = $Option_Cd
End-Select

End-Procedure

!*******************************
Begin-Procedure Get-Bas-Message
!*******************************

  let $PayMsgShort = $BEN1-NO-MSG-FOUND

Begin-Select
N.MSGID

  let $PayMsgID = &N.MSGID
  do Get-Pay-Message-Text      !Returns $PayMsgShort
  if IsBlank($PayMsgShort)
    let $PayMsgShort = $BEN1-NO-MSG-FOUND
  end-if

From PS_BAS_MESSAGE     N
Where N.SCHED_ID     = $SchedId
And   N.EMPLID       = $Empl_Id
And   N.BENEFIT_RCD_NBR = #BenefitRcdNo
And   N.EVENT_ID     = #EventId
And   N.MSGDATA1     = $Plan_Type
End-Select

End-Procedure

!**************************************
Begin-Procedure Print-Deduction-Totals
!**************************************

 Alter-Printer Font=5 Point-Size={NORM}
 !Horizontal Line
 graphic ({Total_Line},1,{horz_line_ln}) Horz-line {norm_lnsize}
!*** 'Total Cost'
 print $BEN1-TOT-COST               (+2,1)
 print #PreTax_Total                (0,{col5})    edit {period_pay_mask}
 print #AfterTax_Total              (0,{col6})    edit {period_pay_mask}

 if (&A.BAS_PROCESS_STATUS <> 'EE')
!*** 'Minus Flexible Credits'
   print $BAS005-T06-L01A     (+1,1)
 else
!*** '(Flexible Credits not calculated due to Error status)'
   print $BAS005-T07-L01A     (+1,1)
 end-if
 print #Flexible_Credits          (0,{col5})  edit {period_pay_mask}

 let #Deduction_Fm_Pay = #PreTax_Total - #Flexible_Credits

 if #Deduction_Fm_Pay < 0
    let #Deduction_Fm_Pay = ABS(#Deduction_Fm_Pay)

   Evaluate  &A.Credit_Rollover

   when = 'C'           !Cash
!*** 'Total Pre-Tax Excess Credits Rolled Over to Cash'
     print $BAS005-T08-L01A      (+1,1)
     print #Deduction_Fm_Pay     (0,{col5})   edit {period_pay_mask}
     break
   when = 'D'           !FSA - Dependent Care
!*** 'Total Pre-Tax Excess Credits Rolled Over To FSA - Dependent Care'
     print $BAS005-T08-L01B   (+1,1)
     print #Deduction_Fm_Pay     (0,{col5})   edit {period_pay_mask}
     break
   when = 'F'           !Forfeit Credits
!***  'Total Forfeited Pre-Tax Credits'
     print $BAS005-T08-L01C      (+1,1)
     print #Deduction_Fm_Pay     (0,{col5})   edit {period_pay_mask}
     break
   when = 'H'           !FSA - Health Care
!*** 'Total Pre-Tax Credits Rolled Over To FSA - Health Care'
     print $BAS005-T08-L01D  (+1,1)
     print #Deduction_Fm_Pay     (0,{col5})   edit {period_pay_mask}
     break
   when = 'S'           !Savings - 401K Plan
!***  'Total Pre-Tax Credits Rolled Over To Savings - 401K Plan'
     print $BAS005-T08-L01E      (+1,1)
     print #Deduction_Fm_Pay     (0,{col5})   edit {period_pay_mask}
     break
   when-other
     break

  End-Evaluate

 else

!*** 'Total Pay Period Deduction From Pay'
   print $BAS005-T08-L01F        (+1,1)
   print #Deduction_Fm_Pay       (0,{col5}) edit {period_pay_mask}
 end-if

 print #AfterTax_Total           (0,{col6}) edit {period_pay_mask}

 if (&C.BAS_SHOW_ER_COSTS = 'Y') And (#Employer_Total <> 0)
!*** 'Total Employer Contributions Towards Your Benefits'
   let $WorkStr = $BAS005-ER-TOTAL
   if (&C.BAS_SHOW_TAX_IMPCT = 'Y') And ($TaxImpact = 'Y')
      let $WorkStr = $WorkStr || ' (*)'
   end-if
   print $WorkStr                (+2,1)
   print #Employer_Total         (0,{col4}) edit {period_pay_mask}

   if (&C.BAS_SHOW_TAX_IMPCT = 'Y') And($TaxImpact = 'Y')
!*** '(*) The employer contributions have tax impacts...'
      print $BAS005-TAX-IMPACT   (+2,1)
   end-if
 end-if

 if Not IsBlank($Msg)
   print $Msg                        (+1,1)     bold
 end-if
 do Foot-Note

End-Procedure

!***********************************
Begin-Procedure Approval-Of-Changes
!***********************************

 do Page-Header
!*** 'YOUR APPROVAL OF CHANGES'
 print $BAS005-T09-L01A      (+4,1) bold
!*** 'Please make the above corrections (if any) to my '
!*** 'Flexible Benefit Elections.'
 let $Statement  = $BAS005-T10-L01A || $Event_YYYY || $BAS005-T10-L01B

 Alter-Printer Font=5 Point-Size={BIG}

Begin-Document (+3,1)

$Statement

End-Document

!* graphic (+3,1,50) Horz-line {norm_lnsize}

!*** print 'Signature'
 print $BEN1-SIGNATURE2       (+2,1) bold
 print '________________________________' (+0,+0)
!*** print 'Date'
 print $BEN1-DATE2            (+0,+0)   bold
 print '__/__/____' (+0,+0)

 Alter-Printer Font=5 Point-Size={NORM}   !Return font size to normal
 move 1 to #Appr
 do Foot-Note

End-Procedure

!*************************
Begin-Procedure Foot-Note
!*************************

 add 1 to #Page_Number

 !Horizontal Line
 graphic ({start_footer},1,{horz_line_ln}) Horz-line {norm_lnsize}
 print &B.Name                      (+1,1)
 let #col1 = {col1} + 8
 let $Page_Number = edit (#Page_Number,'99')
!*** let $Tmp_Text = 'Page ' || $Page_Number
 let $Tmp_Text = $BEN1-PAGE || $Page_Number
 print $Tmp_Text                    (0,#col1)
 let #col1 = {col3a} + 3
 print #Empl_Cnt                    (0,#col1) edit 0000

 if #Appr <> 1
   do Reset-Printer
   move 0 to #Appr
 else
   move 0 to #Appr
 end-if

End-Procedure

!****************************
Begin-Procedure Print-Line-1
!****************************

 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

End-Procedure

!******************************************
Begin-Procedure Update-Confirm-Notify-Date
!******************************************

let $Sql-Statement = 'BAS005: UPDATE PS_BAS_Partic'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
SET    CONFIRM_NOTIFY_DT = $AsOfToday
Where  SCHED_ID = &A.Sched_Id
And    EMPLID = &A.Emplid
And    BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
And    EVENT_ID = &A.Event_Id;

End-SQL

!*** 'Confirmation Form Printed for Emplid: '
 display $BAS005-FORM-FOR-EE noline
 display &A.Emplid

End-Procedure

!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id;

End-SQL

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt_Partic'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT_PARTIC
WHERE PRINT_ID = $Reprint_Id;

End-SQL

End-Procedure

!****************************
Begin-Procedure Display-Time
!****************************

do get-current-datetime
display $asofnow

End-Procedure

!*********************************************************************

#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Format-DateTime
#include 'getsched.sqc'  !Ask-Schedule-Id Procedure
#Include 'askcar.sqc'    !Ask_EmplID
#include 'readxlat.sqc'  !Read-Translate-Table Procedure
#include 'number.sqc'    !Init-Number Procedure
#include 'getpgmnm.sqc'  !Get-Benefit-Program-Name
#include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr
#include 'getevcls.sqc'  !Get-Event-Class-Name
#include 'getbennm.sqc'  !Get-Benefit-Plan-Name
#include 'getpymsg.sqc'  !Get-Pay-Message-Text
#include 'getinvnm.sqc'  !Get-Svgs-Invt-Name
#Include 'getaddr.sqc'   !Get current address for specified address type
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'useprntr.sqc'  !do Init_Printer

!**************************** End Of Report **************************
