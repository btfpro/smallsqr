!***********************************************************************
!  TAX810NE:  Qtrly Wage List - Tape - NEBRASKA                        *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2008 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2008/03/03:09:35:56                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  739116                                              !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, one or more'
    display 'files will have been created:'
    display ''
    display '  T81NExxx   where "xxx" represents a volume identifier'
    display '             for each company code.'
    display ''
    display 'The file(s) contain(s) 275-character records in the TIB-4'
    display 'format required for reporting of quarterly wages to'
    display 'Nebraska Department of Labor.'
    display ''
    display 'Follow the instructions from the department for preparing'
    display 'and submitting the file(s).'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  move '0' to $Year4
  move '' to $DDelimiter
  do Format-DateTime($AsOfToday,  $CurrentDate, {DEFMDY}, '', '')
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810NE' to $ReportID
  move 'Nebraska Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating file for Nebraska UI Wage Reporting'
  display ''

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'NE'              to $State
#endif

  do Delete-Temp-Name-Table
  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 1  to #FileCount

  if $PRCS_Process_Instance = ''
     do Prompts
     do Get-Contact-Person
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

!  do Evaluate-File-Type
!  do Calculate-Diskette-Capacity
!  do Open-File
end-procedure


begin-procedure Delete-Temp-Name-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX810ST
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure


begin-procedure Process-Main

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F > 0
     do Print-Summary-Data('FileNames')
  end-if

end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'NE'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if
  move &D.Name         to $Name
  move &D.Name         to $DiskName
  do Rotate-Name

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD

  let #max_amt_NLG = 999999999
  let #NLGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  add 1 to #Count_T
  let $done1 = 'N'

  while $done1 <> 'Y'
    do split-s-record (#NLGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999')
    do write-s-record
    add 1 to #Count_R
  end-while

end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company' noline
    display $Company
    stop
  end-if

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),12)
    end-if
  end-while
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),12)
    end-if
  end-while
  while INSTR($StateEIN,'.',1) <> 0
    let #Marks = INSTR($StateEIN,'.',1)
    if #Marks > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                      SUBSTR($StateEIN,(#Marks + 1),12)
    end-if
  end-while
  move $StateEIN to $StateEIN 099999999999

  do Open-File
  do Build-Temp-Name-Table

  do Write-E-Record
end-procedure

begin-procedure After-Company

  if #Count_S > 0
   if $FileType <> 'D'
    do Write-T-Record
   end-if
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Count_S to #Count_F
    add #Count_R to #Count_R_Total

    move 0 to #Co_NlGrs_QTD
    move 0 to #Count_S
    move 0 to #Count_R

    add  1 to #FileCount
    new-page
  end-if

end-procedure


begin-procedure Write-E-Record

  move &A.Federal_EIN  to $FedEIN 099999999
  move &A.Descr        to $ErName
  move &A.Address1     to $ErAddress
  move &A.City         to $ErCity
  let $ErState = rtrim(&A.State, ' ')
  move &A.Postal       to $ErZip
  move $ErZip          to $ErZipExtn ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  if $FileType = 'D'
    do Write-Disk-Header1
    do Write-Disk-Header2
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  else
    do Write-Tape-E
  end-if
  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-Tape-E

  write 10 from 'E':1
                $Sp:157
                'F':1
                $Sp:8
                'B':1
               '31':2
                $Sp:5
          $StateEIN:12
                $Sp:88

  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-Disk-Header1

 write 10 from  'H':1
           $RptYear:2
          $RptQtrYr:1
          $StateEIN:10
            $FedEIN:9
         $ErAddress:30
            $ErCity:25

  add 1 to #RecordCount

end-procedure

begin-procedure Write-Disk-Header2

 write 10 from          'H':1
  $RC_QTR_UI.Contact_Person:30
   $RC_QTR_UI.Contact_Phone:10
                    $ErName:30
                   $ErState:2
                     $ErZip:5

  add 1 to #RecordCount

end-procedure

begin-procedure Write-S-Record

  if $FileType = 'D'
    do Write-Disk-Detail
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  else
    do Write-Tape-S
  end-if


  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
end-procedure

begin-procedure Write-Tape-S

  uppercase $Name

  write 10 from 'S':1
       $NATIONAL_ID:9
              $Name:27
                $Sp:86
               '31':2
                $Sp:2
       $QtrEndMonth:2
           $RptYear:2
         $NlGrs_QTD:9
                $Sp:42
               'NE':2
                $Sp:91

end-procedure

begin-procedure Write-Disk-Detail

  move '' to $SecondInitial
  uppercase $Name

  extract $FirstPart from $LastName 0 4
  extract $LastPart from $LastName 4 12

  uppercase $FirstPart
  uppercase $LastPart

  do Rotate-Name-Disk

  uppercase $FirstInitial
  uppercase $SecondInitial

  if $NATIONAL_ID = 'I        '
    move '000000000' to $NATIONAL_ID
  end-if

  write 10 from '8':1
       $NATIONAL_ID:9
                $Sp:1
               'WR':2
          '8888888':7
       $CurrentDate:6
           '000000':6
          $StateEIN:10
           $RptYear:2
          $RptQtrYr:1
          $LastPart:12
       $CurrentDate:6
         $FirstPart:4
      $FirstInitial:1
     $SecondInitial:1
         $NlGrs_QTD:9

end-procedure

begin-procedure Write-T-Record

  move #Co_NlGrs_QTD to #TEMP
  multiply 100 times #TEMP
  do Format-Number (#TEMP,  $T_NlGrs,  '0999999999999')

  move #Count_T to $T_Count 0999999

  write 10 from 'T':1
           $T_Count:7
                $Sp:26
           $T_NlGrs:13
                $Sp:228

  move 0 to #Count_T
  move '' to $T_Count
end-procedure

begin-procedure Rotate-Name-Disk
  find ',' in $DiskName 0 #locn
  extract $DiskLastName from $DiskName 0 #locn
  add 1 to #locn
  extract $FirstInitial from $DiskName #locn 1
  concat ' ' with $FirstInitial
  find ' ' in $DiskName #locn #locn
  if #locn <> -1
    add 1 to #locn
    extract $SecondInitial from $DiskName #locn 1
  end-if
end-procedure

begin-procedure Prompts

  let $FileType = 'C'
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
  move $RC_QTR_UI.Contact_Person   to $ContactName
  move $RC_QTR_UI.Contact_Phone    to $ContactPhone

  unstring  $ContactPhone  by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $ContactPhone  = $str1 || $str3 || $str4
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

begin-procedure Get-Contact-Person

    display '  '
  while $ContactName = ''
    display 'Enter the name of the person to be contacted in case of '
    display 'questions or problems.'
    input $ContactName 'Enter name up to 30 characters '
    uppercase $ContactName
  end-while
    display '  '

    display '  '
  while $ContactPhone = ''
    display 'Enter the contact person''s telephone number as area code'
    display 'followed by 7-digit phone number, with no parentheses or '
    display 'hyphens. '
    input $ContactPhone 'Enter ten-digit number '
  end-while
    display '  '

    move $ContactName to $RC_QTR_UI.Contact_Person
    move $ContactPhone to $RC_QTR_UI.Contact_Phone

end-procedure


begin-procedure Open-File

  if #FileCount > 1
     close 10
  end-if

! This code is necessary for the AS/400 platform

#ifdef OS400
   let $FileExtension = '(D' || &A.Company || ')'
   let $FileID = '{IMPORTPREFIX}' || 'T81NE' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'T81NE' || &A.Company
#endif

  open $FileID as 10 for-writing record=275:fixed

end-procedure


begin-Procedure Build-Temp-Name-Table
begin-SQL on-error=Insert-Name-Error
  INSERT INTO PS_R_TAX810ST (STATE, COMPANY)
         VALUES ($State, &A.Company)
end-SQL
end-Procedure

begin-procedure Insert-Name-Error
  display 'Error on insert to temporary Name table '
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'txovrflw.sqc'  !Split-S-Record
