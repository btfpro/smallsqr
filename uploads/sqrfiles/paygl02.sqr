!***********************************************************************
!  PAYGL02:  Public Sector General Ledger Interface                    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2008 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2008/11/12:12:06:52                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  741930                                              !
!                                                                      *
!  Last Modified April 18 Retro Distribution   (HPRET)                 *
!                June 4   EIP Check Number now 15                      *
!                July 6   DB2 Gromits 7864701                          *
!                APR 12 2002 Pass 4 Additional Chartfields to FDM      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup07.sqc'
#Include 'usarpt.sqc'    !USA report variables

begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

begin-setup

  #ifdef SQLSERVER
     ask dbname 'Database name'
     use {dbname}
  #endif

end-setup
!******************************************************************************
! HOUSEKEEPING                                                                *
!******************************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do STDAPI-INIT

  if $Prcs_Process_Instance = ''

     do PROMPTS

  else

     do SELECT-PARAMETERS
     do GET-VALUES
  end-if

  if $Run_ID = ''
      let $Msg_Company       = $Company
      let $Msg_Paygroup      = $Paygroup
      let $Msg_Pay_End_Dt    = $Pay_End_Dt
      let $Msg_Run_ID        = ' '
  else
      let $Msg_Company       = $Pmsg_Company
      let $Msg_Paygroup      = $Pmsg_Paygroup
      let $Msg_Run_ID        = $Run_ID

      if $Pmsg_Pay_End_Dt = ' '
         let $Msg_Pay_End_Dt = $AsOfToday
      else
         let $Msg_Pay_End_Dt = $Pmsg_Pay_End_Dt
      end-if
  end-if

  do CREATE-ARRAYS
  do SELECT-CALENDAR
  do INITIALIZE-CO-COUNTER
  do DELETE-PAY-MESSAGE
  do INITIALIZE-PAY-MESSAGE
  do DELETE-PAY-ISS-STG-PUB  !paygl02 expense integration
  do DELETE-HR-ACCTG-LINE-RD   !retro dist integration
  do COMMIT-TRANSACTION

  move $Prcs_Process_Instance to #Msg_PrcsInstance
  move $Prcs_Process_Instance to $Msg_PrcsInstance

  move 'Payroll GL Interface - Commitment Accting' to $ReportTitle
  move $AsOfToday             to $Journal_Line_Date
  move 'Y'                    to $Good_Run
  move 0                      to #E
  move 0                      to #Msg

  display $ReportTitle

  move 0 to #Total_Credits
  move 0 to #Total_Debits

end-procedure
!******************************************************************************
! PROMPTS                                                                     *
! This procedure promts for all the input data                                *
!******************************************************************************
begin-procedure PROMPTS

  input $Run_ID 'Enter Run ID' type=char
  uppercase $Run_ID

  if $Run_ID = ''

     input $Company 'Enter Company' type=char
     uppercase $Company

     input $Paygroup 'Enter Paygroup' type=char
     uppercase $Paygroup

     input $Pay_End_Dt 'Enter Pay End Date' type=date

  end-if

  input $Errors_Allowed 'Max Paychecks in Error' type=char

  let #Errors_Allowed = $Errors_Allowed

end-procedure
!******************************************************************************
! GET-VALUES                                                                  *
! This procedure gets the input values when run form the process scheduler    *
!******************************************************************************
begin-procedure GET-VALUES

  let $Run_ID         = $RC_PAYINIT.RUN_ID
  let #Errors_Allowed = #RC_PAYINIT.ChkAdv_No_Start

  if $Run_ID = ''

     let $Company    = $RC_PAYINIT.COMPANY
     let $Paygroup   = $RC_PAYINIT.PAYGROUP
     let $Pay_End_Dt = $RC_PAYINIT.PAY_END_DT

  else

     let $Pmsg_Company    = ' '
     let $Pmsg_Paygroup   = ' '
     let $Pmsg_Pay_End_Dt = ' '

begin-SELECT LOOPS=1
PMSG.COMPANY
PMSG.PAYGROUP
PMSG.PAY_END_DT

     let $Pmsg_Company    = &PMSG.COMPANY
     let $Pmsg_Paygroup   = &PMSG.PAYGROUP
     let $Pmsg_Pay_End_Dt = &PMSG.PAY_END_DT

FROM  PS_PAY_CALENDAR PMSG
WHERE PMSG.RUN_ID = $Run_ID
ORDER BY PMSG.COMPANY, PMSG.PAYGROUP, PMSG.PAY_END_DT
end-SELECT

  end-if

end-procedure
!******************************************************************************
! SELECT-CALENDAR                                                             *
! Sets up the bind variable string for selecting off pay calendar             *
!******************************************************************************
begin-procedure SELECT-CALENDAR

  if $Run_ID = ''

     let $SlctCalendar = 'CAL.COMPANY = '''||$Company||
                     ''' AND CAL.PAYGROUP = '''||$Paygroup||
                     ''' AND CAL.PAY_END_DT = '''||$Pay_End_Dt||''''

     let $SlctCalendar1 = 'CAL1.COMPANY = '''||$Company||
                      ''' AND CAL1.PAYGROUP = '''||$Paygroup||
                      ''' AND CAL1.PAY_END_DT = '''||$Pay_End_Dt||''''

     let $SlctCalendar2 = 'CAL2.COMPANY = '''||$Company||
                      ''' AND CAL2.PAYGROUP = '''||$Paygroup||
                      ''' AND CAL2.PAY_END_DT = '''||$Pay_End_Dt||''''

  else

     let $SlctCalendar = 'CAL.RUN_ID = '''||$Run_ID||''''
     let $SlctCalendar1 = 'CAL1.RUN_ID = '''||$Run_ID||''''
     let $SlctCalendar2 = 'CAL2.RUN_ID = '''||$Run_ID||''''

  end-if

end-procedure
!******************************************************************************
! CREATE-ARRAYS                                                               *
! Sets up the storage array used during processing                            *
!******************************************************************************
begin-procedure CREATE-ARRAYS

   Create-array name=Store_Dist  Size = 7000
        field=Store_Prorate_Ind:Char
        field=Store_BU_HR:Char
        field=Store_SetID:Char
        field=Store_DeptId:Char
        field=Store_BenefitRcd:Number
        field=Store_PlanType:Char
        field=Store_BenefitPlan:Char
        field=Store_DedCd:Char
        field=Store_DedClass:Char
        field=Store_DedSlstxClass:Char
        field=Store_State:Char
        field=Store_Locality:Char
        field=Store_TaxClass:Char
        field=Store_Province:Char
        field=Store_TaxClassCan:Char
        field=Store_Fiscal_Year:Number
        field=Store_Accounting_Period:Number
        field=Store_Acct_Cd:Char
        field=Store_Earnings:Number
        field=Store_EE_Ded_Liab:Number
        field=Store_EE_Tax_Liab:Number
        field=Store_EE_CTX_Liab:Number
        field=Store_Ded_Amount:Number
        field=Store_Tax_Amount:Number
        field=Store_CTX_Amount:Number
        field=Store_ER_Ded_Liab:Number
        field=Store_ER_Tax_Liab:Number
        field=Store_ER_CTX_Liab:Number
        field=Store_PAY_Prorate_Ern_Amt:Number
        field=Store_PAY_Sum_Liab:Number

   Create-array  name=Ded_Split  Size=20
        field=Store_Ded_Benefit_Rcd:Number
        field=Store_Ded_Amount:Number
        field=Store_Ded_Per_BenRcd:Number

   Create-array name=EARNS_BU   Size = 100
        field=Business_Unit_HR:Char
        field=Empl_Rcd:Number
        field=Deptid:Char
        field=Business_Unit_GL:Char
        field=SetID_Dept:Char
        field=SetID_Jobcode:Char
        field=Currency_Cd_HR:Char
        field=Currency_Cd_GL:Char
        field=Appl_Jrnl_ID:Char
        field=SetID_GL_Calendar:Char

   Create-array name=Calendars  Size = 100
        field=Company:Char
        field=PayGroup:Char
        field=Pay_End_Dt:Char
        field=Check_Dt:Char
        field=Pay_Confirm_Run:Char
        field=CA_GL_Intfc_Run:Char
        field=Pay_Off_Cycle_Cls:Char
        field=Pay_Begin_Dt:Char

   Create-array name=Acct_Period_Dt  Size = 1000
        field=Prd_Business_Unit:Char
        field=Prd_Fiscal_Year:Number
        field=Prd_Accounting_Period:Number
        field=Prd_Begin_Dt:Char
        field=Prd_End_Dt:Char

   if #Errors_Allowed < 60
       let #Msg_Max_Allowed = 60
   else
       let #Msg_Max_Allowed = #Errors_Allowed
   end-if

   Create-array name=Pay_Messages  Size = 60
        field=Msg_Company:Char
        field=Msg_PayGroup:Char
        field=Msg_Pay_End_Dt:Char
        field=Msg_Off_Cycle:Char
        field=Msg_Page:Number
        field=Msg_Line:Number
        field=Msg_SepChk:Number
        field=Msg_MsgID:Char
        field=Msg_MsgData1:Char
        field=Msg_MsgData2:Char
        field=Msg_MsgData3:Char
        field=Msg_Run_ID:Char
        field=Msg_PrcsInstance:Number

end-procedure
!******************************************************************************
! MAINLINE                                                                    *
!******************************************************************************
begin-procedure MAINLINE

  let #processed_rows = 0

  if $RC_PAYINIT.RUN_ID = ''
      let $RC_RunID      = ' '
      let $RC_Company    = $RC_PAYINIT.Company
      let $RC_PayGroup   = $RC_PAYINIT.Paygroup
      let $RC_PayEndDt   = $RC_PAYINIT.Pay_End_Dt
  else
      let $RC_RunID      = $RC_PAYINIT.Run_ID
      let $RC_Company    = ' '
      let $RC_PayGroup   = ' '
      let $RC_PayEndDt   = ''
  end-if

  let $prgm_name           = 'PAYGL02'
  let $runid               = $RC_PAYINIT.RUN_ID
  let $company             = $RC_PAYINIT.COMPANY
  let $paygroup            = $RC_PAYINIT.PayGroup
  let #max_line            = 99999
  let $gl_run_date         = $AsOfToday
  let #gl_entry_line       = 0
  let #gl_run_num          = 0
  let #proc_seq_no         = 1
  let #last_posted_seq_num = 0
  do  Clear-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)

  let $process_retro = 'N'
  do BUILD_RETRODIST_COMPANIES                                                   !HPRET

  do CALENDAR-CHECK
  do BUILD-CALENDAR-ARRAY

  if $Posn_Fund_Run = 'Y'

     !DISPLAY 'BACK FROM POSN'

     let $Company = ' '
     let $OK_To_Process = 'Y'
     let #C = 0

     while #C < #Cal

       Get $Cal_Company
           $Cal_PayGroup
           $Cal_Pay_End_Dt
           $Cal_Check_Dt
           $Pay_Confirm_Run
           $CA_GL_Intfc_Run
           $Pay_Off_Cycle_Cls
           $Cal_Pay_Begin_Dt
       from Calendars(#C)
            Company
            PayGroup
            Pay_End_Dt
            Check_Dt
            Pay_Confirm_Run
            CA_GL_Intfc_Run
            Pay_Off_Cycle_Cls
            Pay_Begin_Dt

       let $Msg_Company    = $Cal_Company
       let $Msg_Paygroup   = $Cal_Paygroup
       let $Msg_Pay_End_Dt = $Cal_Pay_End_Dt

       do DETERMINE_ONLY_RETRO                                                   !HPRET


       do BUILD-ACCT-PERIOD-DT-ARRAY
       do CALENDAR-ENTRIES
       add 1 to #C

     end-while

     if #C_Checks_Processed <> 0 OR #C_RetChecks_Processed  <> 0

        do PRINT-COMPANY-TOTALS
     end-if

     if $Good_Run = 'Y'

        do UPDATE-WORK-ACTUALS
     end-if
  end-if

  if #Msg > 0
     do WRITE-PAY-MESSAGE
     do COMMIT-TRANSACTION
  end-if

  do PUBLISH_HR_ACCTG_LINE

  !display 'Total Credits: ' noline
  !display #Total_Credits
  !display 'Total Debits: ' noline
  !display #Total_Debits

end-procedure

!******************************************************************************
! BUILD_RETRODIST_COMPANIES                                                   *
! Procedure finds company, paygroup, pay end date for checks that have had    *
! retro distribution applied                                                  *
!******************************************************************************
begin-procedure BUILD_RETRODIST_COMPANIES

  let $err-statement1 = 'PAYGL02, Delete Error - RETRODIST-COMPANIES'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRODIST_COMPANIES'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000553'

begin-SQL On-Error=SQL-Statement-Error
DELETE FROM PS_HP_PAYGL02_RETD
end-SQL

  let $err-statement1 = 'PAYGL02, Select Error - RETRODIST-COMPANIES'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRODIST_COMPANIES'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A8.COMPANY
A8.PAYGROUP
A8.BUSINESS_UNIT
B8.HP_RETDIST_PAY_DT

  move &A8.COMPANY           to $RD_COMPANY
  move &A8.PAYGROUP          to $RD_PAYGROUP
  move &A8.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B8.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  do INSERT-RETRODIST

FROM PS_PAY_CHECK A8, PS_PAY_ERN_DIST B8
WHERE A8.COMPANY = B8.COMPANY AND A8.PAYGROUP = B8.PAYGROUP AND
 A8.PAY_END_DT = B8.PAY_END_DT AND A8.OFF_CYCLE = B8.OFF_CYCLE AND
 A8.PAGE_NUM = B8.PAGE_NUM AND A8.LINE_NUM = B8.LINE_NUM AND
 A8.SEPCHK = B8.SEPCHK AND B8.HP_RDIST_GL_INFACE = 'N' AND
 B8.HP_RETDIST_STATUS IN ('D', '0') AND
 B8.REVERSED = 'N' AND
 B8.HP_RETDIST_PAY_DT IS NOT NULL
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - RETRODIST-COMPANIES'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRODIST_COMPANIES'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A1.COMPANY
A1.PAYGROUP
A1.BUSINESS_UNIT
B1.HP_RETDIST_PAY_DT

  move &A1.COMPANY           to $RD_COMPANY
  move &A1.PAYGROUP          to $RD_PAYGROUP
  move &A1.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B1.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  do INSERT-RETRODIST

FROM PS_PAY_CHECK A1, PS_PAY_DED_DIST B1
WHERE A1.COMPANY = B1.COMPANY AND A1.PAYGROUP = B1.PAYGROUP AND
 A1.PAY_END_DT = B1.PAY_END_DT AND A1.OFF_CYCLE = B1.OFF_CYCLE AND
 A1.PAGE_NUM = B1.PAGE_NUM AND A1.LINE_NUM = B1.LINE_NUM AND
 A1.SEPCHK = B1.SEPCHK AND B1.HP_RDIST_GL_INFACE = 'N' AND
 B1.HP_RETDIST_STATUS IN ('D', '0') AND
 B1.REVERSED = 'N' AND
 B1.HP_RETDIST_PAY_DT IS NOT NULL AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RETD C1
        WHERE C1.COMPANY = B1.COMPANY AND
        C1.PAYGROUP = B1.PAYGROUP AND
        C1.BUSINESS_UNIT = A1.BUSINESS_UNIT AND
        C1.HP_RETDIST_PAY_DT = B1.HP_RETDIST_PAY_DT)
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - RETRODIST-COMPANIES'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRODIST_COMPANIES'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A2.COMPANY
A2.PAYGROUP
A2.BUSINESS_UNIT
B2.HP_RETDIST_PAY_DT

  move &A2.COMPANY           to $RD_COMPANY
  move &A2.PAYGROUP          to $RD_PAYGROUP
  move &A2.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B2.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  do INSERT-RETRODIST

FROM PS_PAY_CHECK A2, PS_PAY_TAX_DIST B2
WHERE A2.COMPANY = B2.COMPANY AND A2.PAYGROUP = B2.PAYGROUP AND
 A2.PAY_END_DT = B2.PAY_END_DT AND A2.OFF_CYCLE = B2.OFF_CYCLE AND
 A2.PAGE_NUM = B2.PAGE_NUM AND A2.LINE_NUM = B2.LINE_NUM AND
 A2.SEPCHK = B2.SEPCHK AND B2.HP_RDIST_GL_INFACE = 'N' AND
 B2.HP_RETDIST_STATUS IN ('D', '0') AND
 B2.REVERSED = 'N' AND
 B2.HP_RETDIST_PAY_DT IS NOT NULL AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RETD C2
        WHERE C2.COMPANY = B2.COMPANY AND
        C2.PAYGROUP = B2.PAYGROUP AND
        C2.BUSINESS_UNIT = A2.BUSINESS_UNIT AND
        C2.HP_RETDIST_PAY_DT = B2.HP_RETDIST_PAY_DT)
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - RETRODIST-COMPANIES'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRODIST_COMPANIES'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A3.COMPANY
A3.PAYGROUP
A3.BUSINESS_UNIT
B3.HP_RETDIST_PAY_DT

  move &A3.COMPANY           to $RD_COMPANY
  move &A3.PAYGROUP          to $RD_PAYGROUP
  move &A3.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B3.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  do INSERT-RETRODIST

FROM PS_PAY_CHECK A3, PS_PAY_CTX_DIST B3
WHERE A3.COMPANY = B3.COMPANY AND A3.PAYGROUP = B3.PAYGROUP AND
 A3.PAY_END_DT = B3.PAY_END_DT AND A3.OFF_CYCLE = B3.OFF_CYCLE AND
 A3.PAGE_NUM = B3.PAGE_NUM AND A3.LINE_NUM = B3.LINE_NUM AND
 A3.SEPCHK = B3.SEPCHK AND B3.HP_RDIST_GL_INFACE = 'N' AND
 B3.HP_RETDIST_STATUS IN ('D', '0') AND
 B3.REVERSED = 'N' AND
 B3.HP_RETDIST_PAY_DT IS NOT NULL AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RETD C3
        WHERE C3.COMPANY = B3.COMPANY AND
        C3.PAYGROUP = B3.PAYGROUP AND
        C3.BUSINESS_UNIT = A3.BUSINESS_UNIT AND
        C3.HP_RETDIST_PAY_DT = B3.HP_RETDIST_PAY_DT)
end-SELECT

end-procedure

!******************************************************************************
! INSERT-RETRODIST                                                            *
!******************************************************************************
begin-procedure INSERT-RETRODIST

  let $err-statement1 = 'PAYGL02, Insert Error - INSERT-RETRODIST'
  let $err-statement2 = 'Bind Variables: Company ' || $RD_COMPANY ||
                        ', Paygroup ' || $RD_PAYGROUP ||
                        ', Business Unit ' || $RD_BUSINESS_UNIT ||
                        ', and Retro Dist Pay End Date ' || $RD_HP_RETDIST_PAY_DT

  let $Msg_MsgData1 = 'INSERT-RETRODIST see log'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000551'
  let $process_retro = 'Y'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_HP_PAYGL02_RETD (
COMPANY,
PAYGROUP,
BUSINESS_UNIT,
HP_RETDIST_PAY_DT)
VALUES (
$RD_COMPANY,
$RD_PAYGROUP,
$RD_BUSINESS_UNIT,
$RD_HP_RETDIST_PAY_DT)
end-SQL

end-procedure

!******************************************************************************
! CALENDAR-CHECK                                                              *
! Procedure checks calendar to insure position funding has been run for all   *
! pay cycles in the run.                                                      *
!******************************************************************************
begin-procedure CALENDAR-CHECK

  let $Posn_Fund_Run  = 'Y'
  let $err-statement1 = 'PAYGL02, Select Error - CALENDAR-CHECK'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar1

  let $Msg_MsgData1 = 'CALENDAR-CHECK see log'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT On-Error=SQL-Statement-Error
CAL1.COMPANY
CAL1.PAYGROUP
CAL1.PAY_END_DT
CAL1.CHECK_DT
CAL1.POSN_FUND_RUN

  let $Posn_Fund_Run = 'N'

  let $Msg = 'ERROR-Default Position Funding has not been run for Company '||
             &CAL1.COMPANY||', PAYGROUP '||&CAL1.PAYGROUP||', and PAY END DATE '||
             &CAL1.PAY_END_DT
  display $Msg

  let $Msg_Company    = &CAL1.COMPANY
  let $Msg_Paygroup   = &CAL1.PAYGROUP
  let $Msg_Pay_End_Dt = &CAL1.PAY_END_DT
  let $Msg_MsgID      = '000521'
  let $Msg_MsgData1   = ' '
  let $Msg_MsgData2   = ' '
  let $Msg_MsgData3   = ' '
  do PUT-PAY-MESSAGE-TO-ARRAY

FROM  PS_PAY_CALENDAR CAL1
WHERE [$SlctCalendar1]
  AND CAL1.POSN_FUND_RUN = 'N'
  AND NOT EXISTS (SELECT RET1.COMPANY FROM PS_HP_PAYGL02_RETD RET1
                  WHERE RET1.COMPANY = CAL1.COMPANY AND
                      RET1.PAYGROUP = CAL1.PAYGROUP AND
                      RET1.HP_RETDIST_PAY_DT = CAL1.PAY_END_DT)
ORDER BY CAL1.COMPANY, CAL1.PAYGROUP, CAL1.PAY_END_DT
end-SELECT

  if $Posn_Fund_Run = 'N'
     if $Run_ID = ''
         let $Msg_Company       = $Company
         let $Msg_Paygroup      = $Paygroup
         let $Msg_Pay_End_Dt    = $Pay_End_Dt
     else
         let $Msg_Company       = $Pmsg_Company
         let $Msg_Paygroup      = $Pmsg_Paygroup

         if $Pmsg_Pay_End_Dt = ' '
            let $Msg_Pay_End_Dt = $AsOfToday
         else
            let $Msg_Pay_End_Dt = $Pmsg_Pay_End_Dt
         end-if
     end-if
  end-if

end-procedure
!******************************************************************************
! BUILD-CALENDAR-ARRAY                                                        *
! Select pay cycles to run from pay calendar and build an array for use in    *
! the main driving procedure.                                                 *
!******************************************************************************
begin-procedure BUILD-CALENDAR-ARRAY

  let $err-statement1 = 'PAYGL02, Select Error - BUILD-CALENDAR-ARRAY'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar

  let $Msg_MsgData1 = 'BUILD-CALENDAR-ARRAY see log'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID        = '000550'

  let #Cal = 0



begin-SELECT On-Error=SQL-Statement-Error
CAL.COMPANY
CAL.PAYGROUP
CAL.PAY_END_DT
CAL.CHECK_DT
CAL.PAY_CONFIRM_RUN
CAL.CA_GL_INTFC_RUN
CAL.PAY_OFF_CYCLE_CLS
CAL.PAY_BEGIN_DT


       PUT &CAL.COMPANY
           &CAL.PAYGROUP
           &CAL.PAY_END_DT
           &CAL.CHECK_DT
           &CAL.PAY_CONFIRM_RUN
           &CAL.CA_GL_INTFC_RUN
           &CAL.PAY_OFF_CYCLE_CLS
           &CAL.PAY_BEGIN_DT
       INTO CALENDARS(#CAL)
            COMPANY
            PAYGROUP
            PAY_END_DT
            CHECK_DT
            PAY_CONFIRM_RUN
            CA_GL_INTFC_RUN
            PAY_OFF_CYCLE_CLS
            PAY_BEGIN_DT

            add 1 to #Cal

FROM  PS_PAY_CALENDAR CAL
WHERE [$SlctCalendar]
ORDER BY CAL.COMPANY, CAL.PAYGROUP, CAL.PAY_END_DT
end-SELECT

end-procedure

!******************************************************************************
! DETERMINE_ONLY_RETRO                                                        *
! Select the Pay Earnings to see if there is only retro distribution data     *
! for this run.                                                               *
!******************************************************************************
begin-procedure DETERMINE_ONLY_RETRO

let $err-statement1 = 'PAYGL02, Select Error - DETERMINE ONLY RETRO'

  let $pay-earns-data = 'N'
  let $only-retro_dist = 'N'

begin-SELECT On-Error=SQL-Statement-Error
ONLYPE.COMPANY

  let $pay-earns-data = 'Y'

FROM  PS_PAY_EARNINGS ONLYPE, PS_PAY_CALENDAR FUNDRUN
WHERE ONLYPE.COMPANY          = $Cal_Company
  AND ONLYPE.PAYGROUP         = $Cal_PayGroup
  AND ONLYPE.PAY_END_DT       = $Cal_Pay_End_Dt
  AND FUNDRUN.COMPANY         = ONLYPE.COMPANY
  AND FUNDRUN.PAYGROUP        = ONLYPE.PAYGROUP
  AND FUNDRUN.PAY_END_DT      = ONLYPE.PAY_END_DT
  AND FUNDRUN.POSN_FUND_RUN = 'Y'

END-SELECT


  if $pay-earns-data = 'N'

begin-SELECT On-Error=SQL-Statement-Error
ONLYRD.COMPANY

  let $only-retro_dist = 'Y'

FROM  PS_HP_PAYGL02_RETD ONLYRD
WHERE ONLYRD.COMPANY          = $Cal_Company
  AND ONLYRD.PAYGROUP         = $Cal_PayGroup
  AND ONLYRD.HP_RETDIST_PAY_DT = $Cal_Pay_End_Dt

END-SELECT

  end-if

end-procedure

!******************************************************************************
! BUILD-ACCT-PERIOD-DT-ARRAY                                                  *
! Select the GL accounting periods for each calendar entry and build an array *
! for use in the ChartKeys retrieval.                                         *
!******************************************************************************
begin-procedure BUILD-ACCT-PERIOD-DT-ARRAY

  let $err-statement1 = 'PAYGL02, Select Error - BUILD-ACCT-PERIOD-DT-ARRAY'
  let $err-statement2 = 'Bind Variables: Pay Begin Date '||$Cal_Pay_Begin_Dt||
                        ', and Pay End Date '||$Cal_Pay_End_Dt

  let $Msg_MsgData1 = 'BUILD-ACCT-PERIOD-DT-ARRAY'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

  if $process_retro = 'Y'

     let $SlctAcctPrdRec   = ', PS_HP_PAYGL02_RETD  RD'
     let $SlctAcctPrdWhere = 'OR  (RD.COMPANY = '''||$Cal_Company ||
                             ''' AND RD.PAYGROUP = '''||$Cal_PayGroup||
                             ''' AND RD.HP_RETDIST_PAY_DT = '''||$Cal_Pay_End_Dt||
                             ''' AND RD.BUSINESS_UNIT    = BU.BUSINESS_UNIT))'
  else
     let $SlctAcctPrdRec   = ' '
     let $SlctAcctPrdWhere = ')'
  end-if

  let #Prd_Total = 0

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
CA.FISCAL_YEAR
CA.ACCOUNTING_PERIOD
CA.BEGIN_DT
CA.END_DT
BU.BUSINESS_UNIT_GL

  PUT &BU.BUSINESS_UNIT_GL
      &CA.FISCAL_YEAR
      &CA.ACCOUNTING_PERIOD
      &CA.BEGIN_DT
      &CA.END_DT
  INTO ACCT_PERIOD_DT(#Prd_Total)
       PRD_BUSINESS_UNIT
       PRD_FISCAL_YEAR
       PRD_ACCOUNTING_PERIOD
       PRD_BEGIN_DT
       PRD_END_DT

  add 1 to #Prd_Total

FROM  PS_PAY_EARNINGS    PE,
      PS_BUS_UNIT_TBL_HR BU,
      PS_GL_JRNL_TMPLT   GL,
      PS_CAL_DETP_TBL    CA,
      PS_SET_CNTRL_REC   SC
[$SlctAcctPrdRec]
WHERE ((PE.COMPANY          = $Cal_Company
  AND PE.PAYGROUP         = $Cal_PayGroup
  AND PE.PAY_END_DT       = $Cal_Pay_End_Dt
  AND PE.BUSINESS_UNIT    = BU.BUSINESS_UNIT)
[$SlctAcctPrdWhere]
  AND GL.BUSINESS_UNIT_GL = BU.BUSINESS_UNIT_GL
  AND SC.SETCNTRLVALUE    = GL.BUSINESS_UNIT_GL
  AND SC.REC_GROUP_ID     = 'FS_02'
  AND SC.RECNAME          = 'CAL_DETP_TBL'
  AND CA.SETID            = SC.SETID
  AND CA.CALENDAR_ID      = GL.CALENDAR_ID
  AND    (CA.BEGIN_DT BETWEEN $Cal_Pay_Begin_Dt AND $Cal_Pay_End_Dt
      OR  CA.END_DT   BETWEEN $Cal_Pay_Begin_Dt AND $Cal_Pay_End_Dt
      OR      (CA.BEGIN_DT >= $Cal_Pay_Begin_Dt
          AND  CA.END_DT   <= $Cal_Pay_End_Dt)
      OR      (CA.BEGIN_DT <= $Cal_Pay_Begin_Dt
          AND  CA.END_DT   >= $Cal_Pay_End_Dt))
order by BU.BUSINESS_UNIT_GL, CA.FISCAL_YEAR, CA.ACCOUNTING_PERIOD
end-SELECT

end-procedure
!******************************************************************************
! CALENDAR-ENTRIES                                                            *
! Processes a Pay Calendar.  This is the main driving procedure.              *
!******************************************************************************
begin-procedure CALENDAR-ENTRIES

  move $Cal_Company     to $Run_Company
  move $Cal_PayGroup    to $Run_PayGroup
  move $Cal_Pay_End_Dt  to $Run_Pay_End_Dt

  move $Cal_Company     to $Msg_Company
  move $Cal_PayGroup    to $Msg_PayGroup
  move $Cal_Pay_End_Dt  to $Msg_Pay_End_Dt

  if $Cal_Company <> $Company

     let $OK_To_Process = 'Y'
  end-if

  if $OK_To_Process <> 'NC'

     move 0  to #Errors
     move 0  to #P_Checks_Processed
     move 0  to #P_RetChecks_Processed
     move 0  to #P_RetChecks_Acct_Lines
     move 0  to #P_Gross_Total
     move 0  to #P_Net_Pay_Total
     move 0  to #P_Employee_Taxes_Total
     move 0  to #P_Employee_Deductions_Total
     move 0  to #P_Employer_Taxes_Total
     move 0  to #P_Employer_Deductions_Total

     move 'Y'              to $OK_To_Process
     move $Cal_PayGroup    to $PayGroup
     move $Cal_Pay_End_Dt  to $Pay_End_Dt
     move $Cal_Pay_End_Dt  to $AsOfDate

     do Format-DateTime($Pay_End_Dt, $Pay_End_Dt_DMY, {DEFDATE}, '', '')

     if $Cal_Company <> $Company

        if #C_Checks_Processed <> 0  OR #C_RetChecks_Processed  <> 0

           do PRINT-COMPANY-TOTALS
           do INITIALIZE-CO-COUNTER
        end-if

        do BUILD-GL-INTERFACE
        let #processed_rows = #processed_rows + 1
     end-if

     do GET-FROM-CURRENCY-CD

     if $only-retro_dist = 'N'
        do VERIFY-PROCESSING
     else
        let $OK_to_process = 'Y'
     end-if

     evaluate $OK_To_Process

      when = 'Y'

         let $Msg = '   Processing Paygroup '||$Paygroup

         display $Msg
         display ' '

         do UPDATE-ACCT-PERIOD-END-DT
         do PAYCHECK-DATA
         do REMOVE-ZERO-EXPENSE-PAYMENTS

         if (($ChartKey_Good = 'Y')
          and ($OK_To_Process = 'Y'))

           do Update-GL-History

           IF $only-retro_dist = 'N'
               do MARK-GL-INTERFACE-RUN
           END-IF

           if #Msg > 0
               do WRITE-PAY-MESSAGE
           end-if
           do COMMIT-TRANSACTION
           do CALC-COMPANY-TOTALS

        else

            let $OK_To_Process = 'NP'
         end-if
      when = 'NP'

         do ROLLBACK-TRANSACTION

         let $Good_Run = 'N'
         let $Msg = '***ERRORS HAVE OCCURRED - Paygroup '||$Paygroup||
                    ' was skipped.'

         display ' '
         display $Msg

         let $Msg_MsgID      = '000522'
         do PUT-PAY-MESSAGE-TO-ARRAY
         do WRITE-PAY-MESSAGE
         do COMMIT-TRANSACTION

      when = 'NPP'

         do ROLLBACK-TRANSACTION

         let $Msg = '***ERRORS HAVE OCCURRED - Paygroup '||$Paygroup||
                    ' was skipped.'

         display ' '
         display $Msg

         let $Msg_MsgID      = '000522'
         do PUT-PAY-MESSAGE-TO-ARRAY
         do WRITE-PAY-MESSAGE
         do COMMIT-TRANSACTION

      when = 'NC'

          do ROLLBACK-TRANSACTION

          let $Good_Run = 'N'
          let $Msg = '***ERRORS HAVE OCCURRED - Company '||$Company||
              ' was skipped.'

          display ' '
          display $Msg

         let $Msg_MsgID      = '000522'
         do PUT-PAY-MESSAGE-TO-ARRAY
         do WRITE-PAY-MESSAGE
         do COMMIT-TRANSACTION

     end-evaluate
  end-if

end-procedure
!******************************************************************************
! VERIFY-PROCESSING                                                           *
! Procedure verifies that confirmation has been run, Off cycles are closed,   *
! and the interface has not already been run.                                 *
!******************************************************************************
begin-procedure VERIFY-PROCESSING

  if $Pay_Confirm_Run = 'N'

     let $OK_To_Process = 'NP'
     let $Msg = '   ERROR-Paychecks have not been confirmed for Company '||
                $Company||', Paygroup '||$Paygroup||', and Pay End Date '||
                $Pay_End_Dt

     display $Msg

     let $Msg_MsgID    = '000525'
     let $Msg_MsgData1 = ' '
     let $Msg_MsgData2 = ' '
     let $Msg_MsgData3 = ' '
     do PUT-PAY-MESSAGE-TO-ARRAY


  end-if

  if $CA_GL_Intfc_Run = 'Y'

     let $OK_To_Process = 'NPP'
     let $Msg = '   ERROR-Interface has already been run for Company '||
                $Company||', Paygroup '||$Paygroup||', and Pay End Date '||
                $Pay_End_Dt

     display $Msg

     let $Msg_MsgID      = '000526'
     let $Msg_MsgData1 = ' '
     let $Msg_MsgData2 = ' '
     let $Msg_MsgData3 = ' '
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

  if $Pay_Off_Cycle_Cls = 'N'

     do VALIDATE-PAY-LINE
  end-if

end-procedure
!******************************************************************************
! VALIDATE-PAY-LINE                                                           *
!******************************************************************************
begin-procedure VALIDATE-PAY-LINE

  move 'N' to $Found

  let $err-statement1 = 'PAYGL02, Select Error - VALIDATE-PAY-LINE'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End Date '||$Pay_End_Dt||
                        ', Off Cycle Y, Confirmed N, and Check Use is N or C'
  let $Msg_MsgID      = '000550'
  let $Msg_MsgData1 = 'VALIDATE-PAY-LINE see log'
  let $Msg_MsgData2 = 'Off Cycle Y, Confirmed N, '
  let $Msg_MsgData3 = 'Check Use is N or C'

begin-SELECT On-Error=SQL-Statement-Error
PAY_LINE.COMPANY

  move 'Y' to $Found

FROM PS_PAY_LINE PAY_LINE
WHERE PAY_LINE.COMPANY    = $Company
  AND PAY_LINE.PAYGROUP   = $Paygroup
  AND PAY_LINE.PAY_END_DT = $Pay_End_Dt
  AND PAY_LINE.OFF_CYCLE  = 'Y'
  AND PAY_LINE.CONFIRMED  = 'N'
  AND PAY_LINE.SINGLE_CHECK_USE IN ('N', 'C')
end-SELECT

  if $Found = 'N'

     do UPDATE-CALENDAR
  else

     let $OK_To_Process = 'NP'
     let $Msg = '   ERROR-Off Cycles have not been Confirmed for Company '||
                $Company||', Paygroup '||$Paygroup||', and Pay End Date '||
                $Pay_End_Dt

     display $Msg

     let $Msg_MsgID      = '000527'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

end-procedure
!******************************************************************************
! UPDATE-CALENDAR                                                             *
! Updates pay calendar that the Off cycles are closed.                        *
!******************************************************************************
begin-procedure UPDATE-CALENDAR

  let $err-statement1 = 'PAYGL02, Update Error - UPDATE-CALENDAR'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End Date '||$Pay_End_Dt||
                        ', Off Cycle N.'
  let $Msg_MsgID        = '000552'
  let $Msg_MsgData1 = 'UPDATE-CALENDAR see log'
  let $Msg_MsgData2 = 'Off Cycle N'


begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_CALENDAR
SET PAY_OFF_CYCLE_CLS = 'Y'
WHERE COMPANY           = $Company
  AND PAYGROUP          = $Paygroup
  AND PAY_END_DT        = $Pay_End_Dt
  AND PAY_OFF_CYCLE_CLS = 'N'
end-SQL

end-procedure
!******************************************************************************
! UPDATE-ACCT-PERIOD-END-DT                                                   *
! Updates accounting period end date as the pay period end date if it is later*
! than that.                                                                  *
!******************************************************************************
begin-procedure UPDATE-ACCT-PERIOD-END-DT

  do Format-Datetime($Cal_Pay_End_Dt, $Cmp_Pay_End_Dt, {DEFCMP}, '', '')

  let #Prd_Cnt = 0

  WHILE #Prd_Cnt < #Prd_Total

    GET $Prd_End_Dt
    FROM ACCT_PERIOD_DT(#Prd_Cnt)
         PRD_END_DT

    do Format-Datetime($Prd_End_Dt, $Cmp_Prd_End_Dt, {DEFCMP}, '', '')

    if $Cmp_Prd_End_Dt > $Cmp_Pay_End_Dt

      PUT $Cal_Pay_End_Dt
      INTO ACCT_PERIOD_DT(#Prd_Cnt)
           PRD_END_DT
    end-if

    add 1 to #Prd_Cnt

  END-WHILE

end-procedure
!******************************************************************************
! BUILD-GL-INTERFACE                                                          *
! This is the driving procedure for obtaining the HRMS - Financials links.    *
!******************************************************************************
begin-procedure BUILD-GL-INTERFACE

    move $Cal_Company    to $Company
    move ' '             to $Business_Unit_HR

    let $Msg = 'Processing Company: '||$Company

    display ' '
    display $Msg
    display ' '

    do GET-COMPANY-DATA

end-procedure
!****************************************************************************
! MARK-GL-INTERFACE-RUN                                                     *
! After paygroup has been posted, this procedure updates the pay claendar   *
! to mark that the GL Interface has been run.                               *
!****************************************************************************
begin-procedure MARK-GL-INTERFACE-RUN

  let $err-statement1 = 'PAYGL02, Update Error - MARK-GL-INTERFACE-RUN'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End Date '||$Pay_End_Dt||
                        ', Pay Confirm Run Y, and GL Interface Run N.'
  let $Msg_MsgData1 = 'MARK-GL-INTERFACE-RUN see log'
  let $Msg_MsgData2 = 'Pay Confirm Run Y'
  let $Msg_MsgData3 = 'GL Interface Run N'
  let $Msg_MsgID    = '000552'

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_CALENDAR
SET CA_GL_INTFC_RUN = 'Y'
WHERE COMPANY          = $Company
  AND PAYGROUP         = $Paygroup
  AND PAY_END_DT       = $Pay_End_Dt
  AND PAY_CONFIRM_RUN  = 'Y'
  AND CA_GL_INTFC_RUN = 'N'

end-SQL

end-procedure
!****************************************************************************
! PAYCHECK-DATA                                                             *
! Selects individual paychecks within the current pay cycle.                *
!****************************************************************************
begin-procedure PAYCHECK-DATA

  do INITIALIZE-VARIABLES
  let $Default_Business_Unit_HR = ' '

  let $err-statement1 = 'PAYGL02, Select Error - PAYCHECK-DATA'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', and Pay End_Date '||$Pay_End_Dt
  let $Msg_MsgData1   = 'PAYCHECK-DATA see log'
  let $Msg_MsgID      = '000550'


  let #pay_check_loop = 1                                                    !HPRET

begin-SELECT On-Error=SQL-Statement-Error
PCHECK.OFF_CYCLE
PCHECK.PAGE_NUM
PCHECK.LINE_NUM
PCHECK.SEPCHK
PCHECK.PAYCHECK_NBR
PCHECK.EMPLID
PCHECK.TOTAL_GROSS
PCHECK.TOTAL_TAXES
PCHECK.TOTAL_DEDUCTIONS
PCHECK.NET_PAY
PCHECK.FORM_ID
PCHECK.CHECK_DT
PCHECK.PAYCHECK_OPTION
PCHECK.PAYCHECK_ADJUST
PCHECK.BUSINESS_UNIT
DEPT.USE_DISTRIBUTION
PCHECK.PAYCHECK_STATUS
DEPT.BUDGET_DEPTID

  move &PCHECK.OFF_CYCLE        to $Check.Off_Cycle
  move &PCHECK.PAGE_NUM            to #Check.Page
  move &PCHECK.PAGE_NUM            to $Check.Page
  move &PCHECK.LINE_NUM            to #Check.Line
  move &PCHECK.LINE_NUM            to $Check.Line
  move &PCHECK.SEPCHK           to #Check.SepChk
  move &PCHECK.SEPCHK           to $Check.SepChk
  move &PCHECK.PAYCHECK_NBR           to #Check.Check
  move &PCHECK.EMPLID           to $Check.Emplid
  move &PCHECK.TOTAL_GROSS      to #Check.Total_Gross
  move &PCHECK.TOTAL_TAXES      to #Check.Total_Taxes
  move &PCHECK.TOTAL_DEDUCTIONS to #Check.Total_Deductions
  move &PCHECK.NET_PAY          to #Check.Net_Pay
  move &PCHECK.FORM_ID          to $Check.Form_ID
  move &PCHECK.CHECK_DT         to $Check.Check_Dt
  move &PCHECK.PAYCHECK_OPTION  to $Check.PayCheck_Option
  move &PCHECK.PAYCHECK_ADJUST  to $Check.PayCheck_Adjust
  move &PCHECK.BUSINESS_UNIT    to $Check.Business_Unit
  move &DEPT.USE_DISTRIBUTION   to $Use_Distribution
  move &PCHECK.PAYCHECK_STATUS  to $Check.PayCheck_Status

  if $Default_Business_Unit_HR <>  &PCHECK.BUSINESS_UNIT
    let $Business_Unit_HR    = &PCHECK.BUSINESS_UNIT
    do GET-SETID ($Business_Unit_HR, 'HR_01', $SetID_Dept)
    do GET-SETID ($Business_Unit_HR, 'HR_02', $SetID_Jobcode)
    do GET-GL-BUS-UNIT
    do GET-GL-BU-DETAILS
    do Save-Default-BU-Set
  end-if

  move $SetID_Dept          to $Check.NotProrate_SetID
  move &DEPT.BUDGET_DEPTID  to $Check.NotProrate_DeptID

  do Find-Default-FY-AcctPrd
  do Set-Initial-Entry

  do Build-Earnings-BU-Array

  if &PCHECK.TOTAL_GROSS = 0 and &PCHECK.NET_PAY <> 0
      let $Zero_Gross = 'Y'
  else
      let $Zero_Gross = 'N'
  end-if

  evaluate $ChartKey_Good
   when = 'Y'

      do EARNINGS-EXPENSES

      if ($Prorating_Flag = 'N'
       and #Check.Check <> 0)

         move #Check.Check  to $Check 999999999999

         let $Msg = '   WARNING-No Earnings were found for PAYCHECK_NBR '||
                                $Check||'.'

         display $Msg

         do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
         let $Msg_MsgID      = '000528'
         let $Msg_MsgData1   = 'PAYCHECK_NBR:'||$Check
         do PUT-PAY-MESSAGE-TO-ARRAY

      end-if

      do PROCESS-PAYMENT-ISSUED   !PAYGL02 Expense Integration
      do Reset-To-Default-BU-Set

   when = 'Y'

      do TAX-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do CAN-TAX-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do BENEFIT-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do COUNT-ROWS
      let #Total_Employer_Ern    = round(#Total_Employer_Ern, 2)
      let #Total_NP_Employer_Ern = round(#Total_NP_Employer_Ern, 2)

   when = 'Y'

      do DEDUCTION-and-BENEFIT-LIABILITIES
   when = 'Y'

      do TAX-LIABILITIES
   when = 'Y'

      do CAN-TAX-LIABILITIES
   when = 'Y'

      do PROCESS-CHECK
   when = 'N'
       let $OK_to_Process = 'NP'
       do ROLLBACK-TRANSACTION

      EXIT-SELECT
  end-evaluate

  do CALC-TOTALS

  if #Errors > #Errors_Allowed

     let $Msg = '   ERROR-Max paycheck errors have occurred'

     display $Msg

     let $Errors_Allowed   = to_Char(#Errors_Allowed)
     let $Msg_MsgData1     = 'Max Errors Allowed:'||$Errors_Allowed
     if #msg > #Msg_Max_Allowed
         let $Msg_Max_Allowed = to_Char(#Msg_Max_Allowed)
         let $Msg_MsgData2    = $Msg_Max_Allowed ||' written to Pay_Message'
         let $Msg_MsgData3    = 'See log for all error messages'
     end-if
     let $Msg_MsgID      = '000529'
     do PUT-PAY-MESSAGE-TO-ARRAY

     let $OK_To_Process = 'NP'

     EXIT-SELECT
  end-if

  do INITIALIZE-VARIABLES

FROM PS_PAY_CHECK PCHECK, PS_SET_CNTRL_REC SETREC, PS_DEPT_TBL DEPT, PS_PAY_CALENDAR CALNDAR
WHERE PCHECK.COMPANY        = $Company
  AND PCHECK.PAYGROUP       = $PayGroup
  AND PCHECK.PAY_END_DT     = $Pay_End_Dt
  AND CALNDAR.COMPANY       = PCHECK.COMPANY
  AND CALNDAR.PAYGROUP      = PCHECK.PAYGROUP
  AND CALNDAR.PAY_END_DT    = PCHECK.PAY_END_DT
  AND CALNDAR.POSN_FUND_RUN = 'Y'
  AND SETREC.REC_GROUP_ID   = 'HR_01'
  AND SETREC.SETCNTRLVALUE  = PCHECK.BUSINESS_UNIT
  AND SETREC.RECNAME        = 'DEPT_TBL'
  AND DEPT.SETID            = SETREC.SETID
  AND DEPT.DEPTID           = PCHECK.DEPTID
  AND DEPT.USE_DISTRIBUTION = 'Y'
  AND DEPT.EFFDT            = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                               WHERE DEPT1.SETID  = DEPT.SETID
                                 AND DEPT1.DEPTID = DEPT.DEPTID
                                 AND DEPT1.EFFDT <= PCHECK.PAY_END_DT
                                 AND DEPT1.EFF_STATUS = 'A')
end-SELECT


do RETRO_DISTRIBUTION_CHECKS


end-procedure

!****************************************************************************
! EARNINGS-EXPENSES                                                         *
! Selects earnings distributions for current paycheck.                      *
!****************************************************************************
begin-procedure EARNINGS-EXPENSES

move 'N'    to $Prorating_Flag
move 'ERN'  to $Process_Type_Flag

  let $err-statement1 = 'PAYGL02, Select Error - EARNINGS-EXPENSES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'EARNINGS-EXPENSES see log'
  let $Msg_MsgID      = '000550'

if #pay_check_loop = 1
   let $SlectEarnings = ' ERN_DIST.COMPANY        = '''||$Company||
                    ''' AND ERN_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND ERN_DIST.PAY_END_DT     = '''||$Pay_End_Dt||
                    ''' AND ERN_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND ERN_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND ERN_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND ERN_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND ERN_DIST.HP_RETDIST_STATUS = '''||'0'||''''
end-if
if #pay_check_loop = 2
   let $SlectEarnings = ' ERN_DIST.COMPANY        = '''||$Company||
                    ''' AND ERN_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND ERN_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND ERN_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND ERN_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND ERN_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND ERN_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND ERN_DIST.REVERSED = '''||'N'||
                    ''' AND ((ERN_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND ERN_DIST.HP_RETDIST_SEQ_NO < (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_ERN_DIST OE WHERE OE.COMPANY = ERN_DIST.COMPANY AND ' ||
                         'OE.PAYGROUP = ERN_DIST.PAYGROUP AND OE.PAY_END_DT = ERN_DIST.PAY_END_DT AND ' ||
                         'OE.OFF_CYCLE = ERN_DIST.OFF_CYCLE AND OE.PAGE_NUM = ERN_DIST.PAGE_NUM AND ' ||
                         'OE.LINE_NUM = ERN_DIST.LINE_NUM AND  OE.SEPCHK = ERN_DIST.SEPCHK))' ||
                    ' OR (ERN_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND 0 = (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_ERN_DIST ME WHERE ME.COMPANY = ERN_DIST.COMPANY AND ' ||
                         'ME.PAYGROUP = ERN_DIST.PAYGROUP AND ME.PAY_END_DT = ERN_DIST.PAY_END_DT AND ' ||
                         'ME.OFF_CYCLE = ERN_DIST.OFF_CYCLE AND ME.PAGE_NUM = ERN_DIST.PAGE_NUM AND ' ||
                         'ME.LINE_NUM = ERN_DIST.LINE_NUM AND  ME.SEPCHK = ERN_DIST.SEPCHK))' ||
                    ' OR (ERN_DIST.HP_RETDIST_STATUS = '''||'R'||
                    ''' AND ERN_DIST.HP_RDIST_REV_SEQ =  (SELECT MAX(HP_RDIST_REV_SEQ) FROM ' ||
                         'PS_PAY_ERN_DIST RE WHERE RE.COMPANY = ERN_DIST.COMPANY AND ' ||
                         'RE.PAYGROUP = ERN_DIST.PAYGROUP AND RE.PAY_END_DT = ERN_DIST.PAY_END_DT AND ' ||
                         'RE.OFF_CYCLE = ERN_DIST.OFF_CYCLE AND RE.PAGE_NUM = ERN_DIST.PAGE_NUM AND ' ||
                         'RE.LINE_NUM = ERN_DIST.LINE_NUM AND RE.SEPCHK = ERN_DIST.SEPCHK AND ' ||
                         'RE.HP_RETDIST_STATUS = '''|| 'R' ||''')))'


end-if
if #pay_check_loop = 3
   let $SlectEarnings = ' ERN_DIST.COMPANY        = '''||$Company||
                    ''' AND ERN_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND ERN_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND ERN_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND ERN_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND ERN_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND ERN_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND ERN_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND ERN_DIST.REVERSED = '''||'N'||''''

end-if


if #pay_check_loop = 2
    let $operation = 'ERN_DIST.EARNINGS * -1'
else
    let $operation = 'ERN_DIST.EARNINGS'
end-if

begin-SELECT On-Error=SQL-Statement-Error
ERN_DIST.ACCT_CD
[$operation] &ERN_DIST.EARNINGS=number
ERN_DIST.ERNCD
ERN_DIST.ACCOUNT
ERN_DIST.DEPTID
ERN_DIST.POSITION_NBR
ERN_DIST.JOBCODE
ERN_DIST.EMPL_RCD
ERN_DIST.POSITION_POOL_ID
ERN_DIST.FISCAL_YEAR &ERN_DIST.FISCAL_YEAR=number
ERN_DIST.ACCOUNTING_PERIOD &ERN_DIST.ACCOUNTING_PERIOD=number

  move &ERN_DIST.ACCOUNT           to $Account
  move &ERN_DIST.DEPTID            to $Deptid
  move &ERN_DIST.JOBCODE           to $Jobcode
  move &ERN_DIST.POSITION_NBR      to $Position_nbr
  move &ERN_DIST.EMPL_RCD          to #Empl_Rcd

  move &ERN_DIST.ACCOUNT           to $Key_Account
  move &ERN_DIST.DEPTID            to $Key_Deptid
  move &ERN_DIST.JOBCODE           to $Key_Jobcode
  move &ERN_DIST.POSITION_NBR      to $Key_PositionNbr
  move &ERN_DIST.EMPL_RCD          to #Key_Empl_rcd

  move &ERN_DIST.FISCAL_YEAR       to #Fiscal_Year
  move &ERN_DIST.Fiscal_YEAR       to #Budget_Fiscal_Year
  move &ERN_DIST.ACCOUNTING_PERIOD to #Accounting_Period
  move &ERN_DIST.POSITION_POOL_ID  to $Position_Pool_Id
  move &ERN_DIST.ACCT_CD           to $Acct_Cd
  move &ERN_DIST.EARNINGS          to #Monetary_Amount
  move 'D'                         to $DrCr
  move 'X'                         to $Acct_Type

  do Retrieve-Business-Unit

  let $Deptid       = rtrim($Deptid,' ')
  let $Jobcode      = rtrim($Jobcode,' ')
  let $Position_nbr = rtrim($Position_nbr,' ')

  IF $jobcode = ''
     let $jobcode = ' '
  end-if

  if $Account = ''
     let $Account = ' '
  end-if
  move $Account to $Dist_Account

  if $Position_Nbr = ''

     let $Position_Nbr = ' '
  end-if

  do GET-ACCT-PERIOD-END-DT
  do GET-CHARTKEYS

  if $ChartKey_Good = 'N'

     EXIT-SELECT
  end-if

  move $Dist_Account to $Account

  let $Prorating_Flag    = 'Y'
  let $Found_Store_Value = 'N'
  let #Store_Count       = 0

  if $Prorate_Liability = 'Y'

     WHILE #Store_Count < #E

        GET $Prorate_Ind
            $Ern_BU_HR
            $Ern_SetID
            $Ern_Deptid
            #Ern_Fiscal_Year
            #Ern_Accounting_Period
            $Ern_Acct_Cd           From STORE_DIST(#STORE_COUNT)
            STORE_PRORATE_IND
            STORE_BU_HR
            STORE_SETID
            STORE_DEPTID
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD
            STORE_ACCT_CD

        if ( ($Prorate_Ind       = 'Y')
         and ($Business_Unit_HR  = $Ern_BU_HR)
         and ($SetID_Dept        = $Ern_SetID)
         and ($Deptid            = $Ern_Deptid)
         and (#Fiscal_Year       = #Ern_Fiscal_Year)
         and (#Accounting_Period = #Ern_Accounting_Period)
         and (&ERN_DIST.Acct_Cd  = $Ern_Acct_Cd))

           ARRAY-ADD &ERN_DIST.EARNINGS to STORE_DIST(#STORE_COUNT) STORE_EARNINGS

           add &ERN_DIST.EARNINGS to #Total_Employer_Ern

           let $Found_Store_Value = 'Y'
        end-if

        add 1 to #Store_Count

     END-WHILE

     if $Found_Store_Value = 'N'

       PUT 'Y'
           $Business_Unit_HR
           $SetID_Dept
           $Deptid
           &ERN_DIST.Fiscal_Year
           &ERN_DIST.Accounting_Period
           &ERN_DIST.Acct_Cd
           &ERN_DIST.Earnings
       INTO STORE_DIST(#E)
            STORE_PRORATE_IND
            STORE_BU_HR
            STORE_SETID
            STORE_DEPTID
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD
            STORE_ACCT_CD
            STORE_EARNINGS

            add 1                   to #E
            add &ERN_DIST.EARNINGS  to #Total_Employer_Ern
     end-if
  else
     WHILE #Store_Count < #E

        GET $Prorate_Ind
            #Ern_Fiscal_Year
            #Ern_Accounting_Period  From STORE_DIST(#STORE_COUNT)
            STORE_PRORATE_IND
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD

        if ( ($Prorate_Ind       = 'N')
         and (#Fiscal_Year       = #Ern_Fiscal_Year)
         and (#Accounting_Period = #Ern_Accounting_Period))

           ARRAY-ADD &ERN_DIST.EARNINGS to STORE_DIST(#STORE_COUNT) STORE_EARNINGS

           add &ERN_DIST.EARNINGS to #Total_NP_Employer_Ern

           let $Found_Store_Value = 'Y'
        end-if

        add 1 to #Store_Count

     END-WHILE

     if $Found_Store_Value = 'N'

       PUT 'N'
           $Def_Business_Unit_HR
           $Check.NotProrate_SetID
           $Check.NotProrate_DeptID
           &ERN_DIST.Fiscal_Year
           &ERN_DIST.Accounting_Period
           &ERN_DIST.Earnings
       INTO STORE_DIST(#E)
            STORE_PRORATE_IND
            STORE_BU_HR
            STORE_SETID
            STORE_DEPTID
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD
            STORE_EARNINGS

            add 1                   to #E
            add &ERN_DIST.EARNINGS  to #Total_NP_Employer_Ern
     end-if
  end-if

  if (( RTRIM($Acct_Cd, ' ') <> '')
   and (#Monetary_Amount     <> 0))

     do FORMAT-ACCOUNTING-DATE
     do WRITE-GL-TRANSACTION

     let $Encumb_Proc_Type = 'E'
     do INTERNAL-BUDGET-UPDATE
  end-if

FROM  PS_PAY_ERN_DIST ERN_DIST
WHERE [$SlectEarnings]
ORDER BY ERN_DIST.FISCAL_YEAR, ERN_DIST.ACCOUNTING_PERIOD
end-SELECT

end-procedure


!****************************************************************************
! PROCESS-PAYMENT-ISSUED                                                    *
!****************************************************************************
begin-procedure PROCESS-PAYMENT-ISSUED

begin-SELECT
PCE.EX_DOC_ID
PCE.EX_DOC_TYPE
PCE.EX_LINE_NBR
PCE.ERNCD
PCE.EMPL_RCD
PCE.EARNINGS

  move &PCE.ERNCD             to $Erncd

  move &PCE.Ex_Doc_Id         to $Ex_Doc_Id
  move &PCE.Ex_Doc_Type       to $Ex_Doc_Type
  move &PCE.Ex_Line_Nbr       to #Ex_Line_Nbr
  move &PCE.EARNINGS          to #Monetary_Amount
  move &PCE.Empl_Rcd          to #Empl_Rcd

  if rtrim($Ex_doc_Id, ' ') <> ''
     and rtrim($Ex_Doc_Type, ' ') <> ''

      if (#Ex_Line_Nbr = 0 and
           (($Check.PayCheck_Option = 'R' and #Monetary_Amount > 0)
             or ($Check.PayCheck_Option <> 'R' and #Monetary_Amount < 0)))
         or #Ex_Line_Nbr <> 0

          do Write-Expense-Payment
      end-if
  end-if

FROM PS_PAY_CHECK_EARNS PCE
WHERE PCE.COMPANY    = $Company
  AND PCE.PAYGROUP   = $PayGroup
  AND PCE.PAY_END_DT = $Pay_End_Dt
  AND PCE.OFF_CYCLE  = $Check.Off_Cycle
  AND PCE.PAGE_NUM   = #Check.Page
  AND PCE.LINE_NUM   = #Check.Line
  AND PCE.SEPCHK     = #Check.Sepchk
end-select
end-procedure


!****************************************************************************
! Write Expense Payment                                                     *
!****************************************************************************
begin-procedure Write-Expense-Payment

  let $Payment_Exist = 'N'

  do Find-Payment-Issued

  if $Payment_Exist = 'N'
      do Select-Account
      do Write-Payment-Issued
  else
      do Update-Payment-Issued
  end-if

end-procedure

!****************************************************************************
! Get Account from Acct_cd                                                  *
!****************************************************************************
begin-procedure Select-Account

begin-SELECT loops=1
PED.ACCT_CD
PED.ACCOUNT
PED.FISCAL_YEAR
PED.ACCOUNTING_PERIOD

  move &PED.ACCT_CD            to $Acct_Cd
  move &PED.FISCAL_YEAR        to #Fiscal_Year
  move &PED.ACCOUNTING_PERIOD  to #Accounting_Period

  do GET-ACCT-PERIOD-END-DT
  do Get-Chartkeys

  move &PED.ACCOUNT            to $Account

FROM PS_PAY_ERN_DIST PED
WHERE PED.COMPANY        = $Company
  AND PED.PAYGROUP       = $PayGroup
  AND PED.PAY_END_DT     = $Pay_End_Dt
  AND PED.OFF_CYCLE      = $Check.Off_Cycle
  AND PED.PAGE_NUM       = #Check.Page
  AND PED.LINE_NUM       = #Check.Line
  AND PED.SEPCHK         = #Check.Sepchk
  AND PED.ERNCD          = $Erncd
  AND HP_RETDIST_STATUS  = '0'
end-select
end-procedure


!****************************************************************************
! TAX-EXPENSES                                                              *
! Selects tax distributions for the current paycheck.                       *
!****************************************************************************
begin-procedure TAX-EXPENSES

  if #pay_check_loop = 1
    let $SlectTaxings = ' TAX_DIST.COMPANY        = '''||$Company||
                    ''' AND TAX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND TAX_DIST.PAY_END_DT     = '''||$Pay_End_Dt||
                    ''' AND TAX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND TAX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND TAX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND TAX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND TAX_DIST.HP_RETDIST_STATUS = '''||'0'||''''
  end-if
  if #pay_check_loop = 2
    let $SlectTaxings = ' TAX_DIST.COMPANY        = '''||$Company||
                    ''' AND TAX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND TAX_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND TAX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND TAX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND TAX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND TAX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND TAX_DIST.REVERSED = '''||'N'||
                    ''' AND ((TAX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND TAX_DIST.HP_RETDIST_SEQ_NO < (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_TAX_DIST OT WHERE OT.COMPANY = TAX_DIST.COMPANY AND ' ||
                         'OT.PAYGROUP = TAX_DIST.PAYGROUP AND OT.PAY_END_DT = TAX_DIST.PAY_END_DT AND ' ||
                         'OT.OFF_CYCLE = TAX_DIST.OFF_CYCLE AND OT.PAGE_NUM = TAX_DIST.PAGE_NUM AND ' ||
                         'OT.LINE_NUM = TAX_DIST.LINE_NUM AND  OT.SEPCHK = TAX_DIST.SEPCHK))' ||
                    ' OR (TAX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND 0 = (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_TAX_DIST MT WHERE MT.COMPANY = TAX_DIST.COMPANY AND ' ||
                         'MT.PAYGROUP = TAX_DIST.PAYGROUP AND MT.PAY_END_DT = TAX_DIST.PAY_END_DT AND ' ||
                         'MT.OFF_CYCLE = TAX_DIST.OFF_CYCLE AND MT.PAGE_NUM = TAX_DIST.PAGE_NUM AND ' ||
                         'MT.LINE_NUM = TAX_DIST.LINE_NUM AND  MT.SEPCHK = TAX_DIST.SEPCHK))' ||
                    ' OR (TAX_DIST.HP_RETDIST_STATUS = '''||'R'||
                    ''' AND TAX_DIST.HP_RDIST_REV_SEQ =  (SELECT MAX(HP_RDIST_REV_SEQ) FROM ' ||
                         'PS_PAY_TAX_DIST RT WHERE RT.COMPANY = TAX_DIST.COMPANY AND ' ||
                         'RT.PAYGROUP = TAX_DIST.PAYGROUP AND RT.PAY_END_DT = TAX_DIST.PAY_END_DT AND ' ||
                         'RT.OFF_CYCLE = TAX_DIST.OFF_CYCLE AND RT.PAGE_NUM = TAX_DIST.PAGE_NUM AND ' ||
                         'RT.LINE_NUM = TAX_DIST.LINE_NUM AND RT.SEPCHK = TAX_DIST.SEPCHK AND ' ||
                         'RT.HP_RETDIST_STATUS = '''|| 'R' ||''')))'


  end-if
  if #pay_check_loop = 3
    let $SlectTaxings = ' TAX_DIST.COMPANY        = '''||$Company||
                    ''' AND TAX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND TAX_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND TAX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND TAX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND TAX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND TAX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND TAX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND TAX_DIST.REVERSED = '''||'N'||''''

  end-if


  move 'TAX' to $Process_Type_Flag
  move 0     to #ErTaxExpense

  let $err-statement1 = 'PAYGL02, Select Error - TAX-EXPENSES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ', and Tax Class is: U, S, E, R, B, J, Q, X, Z'
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'TAX-EXPENSES see log'
  let $Msg_MsgData2   = 'Tax Class is:'
  let $Msg_MsgData3   = 'U, S, E, R, B, J, Q, X, Z'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 2
    let $operation = 'TAX_DIST.TAX_CUR * -1'
  else
    let $operation = 'TAX_DIST.TAX_CUR'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
TAX_DIST.ACCT_CD
TAX_DIST.STATE
TAX_DIST.TAX_CLASS
[$operation] &TAX_DIST.TAX_CUR=number
TAX_DIST.LOCALITY
TAX_DIST.ACCOUNT
TAX_DIST.DEPTID
TAX_DIST.POSITION_NBR
TAX_DIST.JOBCODE
TAX_DIST.EMPL_RCD
TAX_DIST.POSITION_POOL_ID
TAX_DIST.FISCAL_YEAR &TAX_DIST.FISCAL_YEAR=number
TAX_DIST.ACCOUNTING_PERIOD &TAX_DIST.ACCOUNTING_PERIOD=number

  move &TAX_DIST.ACCOUNT           to $Account
  move &TAX_DIST.DEPTID            to $Deptid
  move &TAX_DIST.JOBCODE           to $Jobcode
  move &TAX_DIST.POSITION_NBR      to $Position_nbr
  move &TAX_DIST.EMPL_RCD          to #Empl_Rcd
  move &TAX_DIST.FISCAL_YEAR       to #Fiscal_Year
  move &TAX_DIST.FISCAL_YEAR       to #Budget_Fiscal_Year
  move &TAX_DIST.ACCOUNTING_PERIOD to #Accounting_Period

  move &TAX_DIST.STATE             to $State
  move &TAX_DIST.LOCALITY          to $Locality
  move &TAX_DIST.TAX_CLASS         to $Tax_Class

  move &TAX_DIST.ACCOUNT           to $Key_Account
  move &TAX_DIST.DEPTID            to $Key_Deptid
  move &TAX_DIST.JOBCODE           to $Key_Jobcode
  move &TAX_DIST.POSITION_NBR      to $Key_PositionNbr
  move &TAX_DIST.EMPL_RCD          to #Key_Empl_rcd

  move &TAX_DIST.POSITION_POOL_ID  to $Position_Pool_Id
  move &TAX_DIST.ACCT_CD           to $Acct_Cd
  move &TAX_DIST.TAX_CUR           to #Monetary_Amount
  move 'D'                         to $DrCr
  move 'X'                         to $Acct_Type

  do Retrieve-Business-Unit

  let $Deptid       = rtrim($Deptid,' ')
  let $Jobcode      = rtrim($Jobcode,' ')
  let $Position_nbr = rtrim($Position_nbr,' ')

  if $Account = ''
     let $Account = ' '
  end-if
  move $Account to $Dist_Account

  if $Position_Nbr = ''

     let $Position_Nbr = ' '
  end-if

  do GET-ACCT-PERIOD-END-DT
  do GET-CHARTKEYS

  if $ChartKey_Good = 'N'

     EXIT-SELECT
  end-if

  move $Dist_Account to $Account

  let $Found_Store_Value = 'N'
  let #Store_Count       = 0


  WHILE #Store_Count < #E

     GET $Prorate_Ind
         $Tax_BU_HR
         $Tax_SetID
         $Tax_Deptid
         $Tax_State
         $Tax_Locality
         $Tax_Tax_Class
         #Tax_Fiscal_Year
         #Tax_Accounting_Period
         $Tax_Acct_Cd
         #Tax_Amount    From STORE_DIST(#STORE_COUNT)
         STORE_PRORATE_IND
         STORE_BU_HR
         STORE_SETID
         STORE_DEPTID
         STORE_STATE
         STORE_LOCALITY
         STORE_TAXCLASS
         STORE_FISCAL_YEAR
         STORE_ACCOUNTING_PERIOD
         STORE_ACCT_CD
         STORE_TAX_AMOUNT

     let $Tax_Deptid      = RTRIM($Tax_Deptid, ' ')

     if ( ($Prorate_Ind          = 'Y')
      and ($Business_Unit_HR     = $Tax_BU_HR)
      and ($SetID_Dept           = $Tax_SetID)
      and ($Deptid               = $Tax_Deptid)
      and ($Tax_State            = $State)
      and ($Tax_Locality         = $Locality)
      and ($Tax_Tax_Class        = $Tax_Class)
      and (#Fiscal_Year          = #Tax_Fiscal_Year)
       and (#Accounting_Period    = #Tax_Accounting_Period)
        and (&TAX_DIST.Acct_Cd     = $Tax_Acct_Cd))

        ARRAY-ADD &TAX_DIST.TAX_CUR to STORE_DIST(#STORE_COUNT) STORE_TAX_AMOUNT

        add &TAX_DIST.TAX_CUR to #Total_Employer_Tax

        let $Found_Store_Value = 'Y'
     end-if

     add 1 to #Store_Count

  END-WHILE

  if $Found_Store_Value = 'N'

     PUT 'Y'
         $Business_Unit_HR
         $SetID_Dept
         $Deptid
         $State
         $Locality
         $Tax_Class
         &TAX_DIST.Fiscal_Year
         &TAX_DIST.Accounting_Period
         &TAX_DIST.Acct_Cd
         &TAX_DIST.Tax_Cur
     INTO STORE_DIST(#E)
          STORE_PRORATE_IND
          STORE_BU_HR
          STORE_SETID
          STORE_DEPTID
          STORE_STATE
          STORE_LOCALITY
          STORE_TAXCLASS
          STORE_FISCAL_YEAR
          STORE_ACCOUNTING_PERIOD
          STORE_ACCT_CD
          STORE_TAX_AMOUNT

     add &TAX_DIST.TAX_CUR to #Total_Employer_Tax
     add 1 to #E
  end-if

  if (( RTRIM($Acct_Cd, ' ') <> '')
   and (#Monetary_Amount     <> 0))

    do FORMAT-ACCOUNTING-DATE
    do WRITE-GL-TRANSACTION

    let $Encumb_Proc_Type = 'T'
    do INTERNAL-BUDGET-UPDATE
  end-if

FROM PS_PAY_TAX_DIST TAX_DIST
WHERE [$SlectTaxings]
  AND (TAX_DIST.TAX_CLASS IN ('U','S','E','R','B','J','Q','X','Y','Z'))
ORDER BY TAX_DIST.DEPTID,
         TAX_DIST.JOBCODE,
         TAX_DIST.POSITION_NBR,
         TAX_DIST.EMPL_RCD,
         TAX_DIST.STATE,
         TAX_DIST.TAX_CLASS
end-select

end-procedure
!****************************************************************************
! CAN-TAX-EXPENSES                                                          *
! Selects tax distributions (Canadian) for the current paycheck.            *
!****************************************************************************
begin-procedure CAN-TAX-EXPENSES

  if #pay_check_loop = 1
    let $SlectCtxings = ' CTX_DIST.COMPANY        = '''||$Company||
                    ''' AND CTX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND CTX_DIST.PAY_END_DT     = '''||$Pay_End_Dt||
                    ''' AND CTX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND CTX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND CTX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND CTX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND CTX_DIST.HP_RETDIST_STATUS = '''||'0'||''''
  end-if
  if #pay_check_loop = 2
    let $SlectCtxings = ' CTX_DIST.COMPANY        = '''||$Company||
                    ''' AND CTX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND CTX_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND CTX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND CTX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND CTX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND CTX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND CTX_DIST.REVERSED = '''||'N'||
                    ''' AND ((CTX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND CTX_DIST.HP_RETDIST_SEQ_NO < (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_CTX_DIST OC WHERE OC.COMPANY = CTX_DIST.COMPANY AND ' ||
                         'OC.PAYGROUP = CTX_DIST.PAYGROUP AND OC.PAY_END_DT = CTX_DIST.PAY_END_DT AND ' ||
                         'OC.OFF_CYCLE = CTX_DIST.OFF_CYCLE AND OC.PAGE_NUM = CTX_DIST.PAGE_NUM AND ' ||
                         'OC.LINE_NUM = CTX_DIST.LINE_NUM AND  OC.SEPCHK = CTX_DIST.SEPCHK))' ||
                    ' OR (CTX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND 0 = (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_CTX_DIST MC WHERE MC.COMPANY = CTX_DIST.COMPANY AND ' ||
                         'MC.PAYGROUP = CTX_DIST.PAYGROUP AND MC.PAY_END_DT = CTX_DIST.PAY_END_DT AND ' ||
                         'MC.OFF_CYCLE = CTX_DIST.OFF_CYCLE AND MC.PAGE_NUM = CTX_DIST.PAGE_NUM AND ' ||
                         'MC.LINE_NUM = CTX_DIST.LINE_NUM AND  MC.SEPCHK = CTX_DIST.SEPCHK))' ||
                    ' OR (CTX_DIST.HP_RETDIST_STATUS = '''||'R'||
                    ''' AND CTX_DIST.HP_RDIST_REV_SEQ =  (SELECT MAX(HP_RDIST_REV_SEQ) FROM ' ||
                         'PS_PAY_CTX_DIST RX WHERE RX.COMPANY = CTX_DIST.COMPANY AND ' ||
                         'RX.PAYGROUP = CTX_DIST.PAYGROUP AND RX.PAY_END_DT = CTX_DIST.PAY_END_DT AND ' ||
                         'RX.OFF_CYCLE = CTX_DIST.OFF_CYCLE AND RX.PAGE_NUM = CTX_DIST.PAGE_NUM AND ' ||
                         'RX.LINE_NUM = CTX_DIST.LINE_NUM AND RX.SEPCHK = CTX_DIST.SEPCHK AND ' ||
                         'RX.HP_RETDIST_STATUS = '''|| 'R' ||''')))'


  end-if
  if #pay_check_loop = 3
    let $SlectCtxings = ' CTX_DIST.COMPANY        = '''||$Company||
                    ''' AND CTX_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND CTX_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND CTX_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND CTX_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND CTX_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND CTX_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND CTX_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND CTX_DIST.REVERSED = '''||'N'||''''

  end-if

  move 'CTX' to $Process_Type_Flag
  move 0     to #ErCTXExpense

  let $err-statement1 = 'PAYGL02, Select Error - CAN-TAX-EXPENSES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ', and TAX Class is: CPR, EIR, QIR, QPR or HTX'

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'CAN-TAX-EXPENSES see log'
  let $Msg_MsgData2   = 'TAX Class is:'
  let $Msg_MsgData3   = 'CPR, EIR, QIR, QPR or HTX'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 2
    let $operation = 'CTX_DIST.TAX_CUR * -1'
  else
    let $operation = 'CTX_DIST.TAX_CUR'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
CTX_DIST.ACCT_CD
CTX_DIST.PROVINCE
CTX_DIST.TAX_CLASS_CAN
[$operation] &CTX_DIST.TAX_CUR=number
CTX_DIST.ACCOUNT
CTX_DIST.DEPTID
CTX_DIST.POSITION_NBR
CTX_DIST.JOBCODE
CTX_DIST.EMPL_RCD
CTX_DIST.POSITION_POOL_ID
CTX_DIST.FISCAL_YEAR &CTX_DIST.FISCAL_YEAR=number
CTX_DIST.ACCOUNTING_PERIOD &CTX_DIST.ACCOUNTING_PERIOD=number

  move &CTX_DIST.ACCOUNT           to $Account
  move &CTX_DIST.DEPTID            to $Deptid
  move &CTX_DIST.JOBCODE           to $Jobcode
  move &CTX_DIST.POSITION_NBR      to $Position_nbr
  move &CTX_DIST.EMPL_RCD          to #Empl_Rcd
  move &CTX_DIST.FISCAL_YEAR       to #Fiscal_Year
  move &CTX_DIST.FISCAL_YEAR       to #Budget_Fiscal_Year
  move &CTX_DIST.ACCOUNTING_PERIOD to #Accounting_Period

  move &CTX_DIST.PROVINCE          to $Province
  move &CTX_DIST.TAX_CLASS_CAN     to $Tax_Class_Can

  move &CTX_DIST.ACCOUNT           to $Key_Account
  move &CTX_DIST.DEPTID            to $Key_Deptid
  move &CTX_DIST.JOBCODE           to $Key_Jobcode
  move &CTX_DIST.POSITION_NBR      to $Key_PositionNbr
  move &CTX_DIST.EMPL_RCD          to #Key_Empl_rcd

  move &CTX_DIST.POSITION_POOL_ID  to $Position_Pool_Id
  move &CTX_DIST.ACCT_CD           to $Acct_Cd
  move &CTX_DIST.TAX_CUR           to #Monetary_Amount
  move 'D'                         to $DrCr
  move 'X'                         to $Acct_Type

  do Retrieve-Business-Unit

  let $Deptid       = rtrim($Deptid,' ')
  let $Jobcode      = rtrim($Jobcode,' ')
  let $Position_nbr = rtrim($Position_nbr,' ')

  if $Account = ''
     let $Account = ' '
  end-if
  move $Account to $Dist_Account

  if $Position_Nbr = ''

     let $Position_Nbr = ' '
  end-if

  do GET-ACCT-PERIOD-END-DT
  do GET-CHARTKEYS

  if $ChartKey_Good = 'N'

     EXIT-SELECT
  end-if

  move $Dist_Account to $Account

  let $Found_Store_Value = 'N'
  let #Store_Count       = 0

  WHILE #Store_Count < #E

     GET $Prorate_Ind
         $CTX_BU_HR
         $CTX_SetID
         $CTX_Deptid
         $CTX_Province
         $CTX_Tax_Class
         #CTX_Fiscal_Year
         #CTX_Accounting_Period
         $CTX_Acct_Cd
         #CTX_Amount    From STORE_DIST(#STORE_COUNT)
         STORE_PRORATE_IND
         STORE_BU_HR
         STORE_SETID
         STORE_DEPTID
         STORE_PROVINCE
         STORE_TAXCLASSCAN
         STORE_FISCAL_YEAR
         STORE_ACCOUNTING_PERIOD
         STORE_ACCT_CD
         STORE_CTX_AMOUNT

     let $CTX_Deptid  = RTRIM($CTX_Deptid, ' ')

     if ( ($Prorate_Ind          = 'Y')
      and ($Business_Unit_HR     = $CTX_BU_HR)
      and ($SetID_Dept           = $CTX_SetID)
      and ($Deptid               = $CTX_Deptid)
      and ($Province             = $CTX_Province)
      and ($Tax_Class_Can        = $CTX_Tax_Class)
      and (#Fiscal_Year          = #CTX_Fiscal_Year)
       and (#Accounting_Period    = #CTX_Accounting_Period)
        and (&CTX_DIST.Acct_Cd     = $CTX_Acct_Cd))

        ARRAY-ADD &CTX_DIST.TAX_CUR to STORE_DIST(#STORE_COUNT) STORE_CTX_AMOUNT

        add &CTX_DIST.TAX_CUR to #Total_Employer_CTX

        let $Found_Store_Value = 'Y'
     end-if

     add 1 to #Store_Count

  END-WHILE

  if $Found_Store_Value = 'N'

     PUT 'Y'
         $Business_Unit_HR
         $SetID_Dept
         $Deptid
         $Province
         $Tax_Class_Can
         &CTX_DIST.Fiscal_Year
         &CTX_DIST.Accounting_Period
         &CTX_DIST.Acct_Cd
         &CTX_DIST.TAX_Cur
     INTO STORE_DIST(#E)
          STORE_PRORATE_IND
          STORE_BU_HR
          STORE_SETID
          STORE_DEPTID
          STORE_PROVINCE
          STORE_TAXCLASSCAN
          STORE_FISCAL_YEAR
          STORE_ACCOUNTING_PERIOD
          STORE_ACCT_CD
          STORE_CTX_AMOUNT

     add &CTX_DIST.TAX_CUR to #Total_Employer_CTX
     add 1 to #E
  end-if

  if ((RTRIM($Acct_Cd, ' ') <> '')
   and (#Monetary_Amount     <> 0))

    do FORMAT-ACCOUNTING-DATE
    do WRITE-GL-TRANSACTION

    let $Encumb_Proc_Type = 'T'
    do INTERNAL-BUDGET-UPDATE
  end-if

FROM PS_PAY_CTX_DIST CTX_DIST
WHERE [$SlectCtxings]
  AND CTX_DIST.TAX_CLASS_CAN IN ('CPR','QPR','EIR','QIR','HTX')
ORDER BY CTX_DIST.DEPTID,
         CTX_DIST.JOBCODE,
         CTX_DIST.POSITION_NBR,
         CTX_DIST.EMPL_RCD,
         CTX_DIST.PROVINCE,
         CTX_DIST.TAX_CLASS_CAN
end-SELECT

end-procedure
!****************************************************************************
! BENEFIT-EXPENSES                                                          *
! Selects deduction distributions for the current paycheck.                 *
!****************************************************************************
begin-procedure Benefit-Expenses


  if #pay_check_loop = 1
    let $Slectbenefit = ' DED_DIST.COMPANY        = '''||$Company||
                    ''' AND DED_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND DED_DIST.PAY_END_DT     = '''||$Pay_End_Dt||
                    ''' AND DED_DIST.DED_CLASS      >= '''||'L'||
                    ''' AND DED_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND DED_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND DED_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND DED_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND DED_DIST.HP_RETDIST_STATUS = '''||'0'||''''
  end-if
  if #pay_check_loop = 2
    let $Slectbenefit = ' DED_DIST.COMPANY        = '''||$Company||
                    ''' AND DED_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND DED_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND DED_DIST.DED_CLASS      >= '''||'L'||
                    ''' AND DED_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND DED_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND DED_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND DED_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND DED_DIST.REVERSED = '''||'N'||
                    ''' AND ((DED_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND DED_DIST.HP_RETDIST_SEQ_NO < (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_DED_DIST OD WHERE OD.COMPANY = DED_DIST.COMPANY AND ' ||
                         'OD.PAYGROUP = DED_DIST.PAYGROUP AND OD.PAY_END_DT = DED_DIST.PAY_END_DT AND ' ||
                         'OD.OFF_CYCLE = DED_DIST.OFF_CYCLE AND OD.PAGE_NUM = DED_DIST.PAGE_NUM AND ' ||
                         'OD.LINE_NUM = DED_DIST.LINE_NUM AND  OD.SEPCHK = DED_DIST.SEPCHK))' ||
                    ' OR (DED_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND 0 = (SELECT MAX(HP_RETDIST_SEQ_NO) FROM ' ||
                         'PS_PAY_DED_DIST MD WHERE MD.COMPANY = DED_DIST.COMPANY AND ' ||
                         'MD.PAYGROUP = DED_DIST.PAYGROUP AND MD.PAY_END_DT = DED_DIST.PAY_END_DT AND ' ||
                         'MD.OFF_CYCLE = DED_DIST.OFF_CYCLE AND MD.PAGE_NUM = DED_DIST.PAGE_NUM AND ' ||
                         'MD.LINE_NUM = DED_DIST.LINE_NUM AND  MD.SEPCHK = DED_DIST.SEPCHK))' ||
                    ' OR (DED_DIST.HP_RETDIST_STATUS = '''||'R'||
                    ''' AND DED_DIST.HP_RDIST_REV_SEQ =  (SELECT MAX(HP_RDIST_REV_SEQ) FROM ' ||
                         'PS_PAY_DED_DIST RD WHERE RD.COMPANY = DED_DIST.COMPANY AND ' ||
                         'RD.PAYGROUP = DED_DIST.PAYGROUP AND RD.PAY_END_DT = DED_DIST.PAY_END_DT AND ' ||
                         'RD.OFF_CYCLE = DED_DIST.OFF_CYCLE AND RD.PAGE_NUM = DED_DIST.PAGE_NUM AND ' ||
                         'RD.LINE_NUM = DED_DIST.LINE_NUM AND RD.SEPCHK = DED_DIST.SEPCHK AND ' ||
                         'RD.HP_RETDIST_STATUS = '''|| 'R' ||''')))'


  end-if
  if #pay_check_loop = 3
    let $Slectbenefit = ' DED_DIST.COMPANY        = '''||$Company||
                    ''' AND DED_DIST.PAYGROUP       = '''||$PayGroup||
                    ''' AND DED_DIST.PAY_END_DT     = '''||$Check.PayCheck_End_Dt||
                    ''' AND DED_DIST.DED_CLASS      >= '''||'L'||
                    ''' AND DED_DIST.OFF_CYCLE      = '''||$Check.Off_Cycle||
                    ''' AND DED_DIST.PAGE_NUM       = '|| $Check.Page||
                    ' AND DED_DIST.LINE_NUM         = '|| $Check.Line||
                    ' AND DED_DIST.SEPCHK           = '|| $Check.Sepchk||
                    ' AND DED_DIST.HP_RETDIST_STATUS = '''||'0'||
                    ''' AND DED_DIST.REVERSED = '''||'N'||''''

  end-if


  move 'DED'  to $Process_Type_Flag

  let $err-statement1 = 'PAYGL02, Select Error - BENEFIT-EXPENSES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ' and Deduction Class is less than L'
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'BENEFIT-EXPENSES see log'
  let $Msg_MsgData2   = 'Ded Class is less than L'
  let $Msg_MsgID      = '000550'


  if #pay_check_loop = 2
    let $operation = 'DED_DIST.DED_CUR * -1'
  else
    let $operation = 'DED_DIST.DED_CUR'
  end-if


begin-SELECT On-Error=SQL-Statement-Error
DED_DIST.ACCT_CD
DED_DIST.PLAN_TYPE
DED_DIST.BENEFIT_PLAN
DED_DIST.DEDCD
DED_DIST.DED_CLASS
DED_DIST.DED_SLSTX_CLASS
DED_DIST.FISCAL_YEAR &DED_DIST.FISCAL_YEAR=number
DED_DIST.ACCOUNTING_PERIOD &DED_DIST.ACCOUNTING_PERIOD=number
[$operation] &DED_DIST.DED_CUR=number
DED_DIST.ACCOUNT
DED_DIST.DEPTID
DED_DIST.POSITION_NBR
DED_DIST.JOBCODE
DED_DIST.EMPL_RCD
DED_DIST.POSITION_POOL_ID

  move &DED_DIST.ACCOUNT           to $Account
  move &DED_DIST.DEPTID            to $Deptid
  move &DED_DIST.JOBCODE           to $Jobcode
  move &DED_DIST.POSITION_NBR      to $Position_nbr
  move &DED_DIST.EMPL_RCD          to #Empl_Rcd
  move &DED_DIST.FISCAL_YEAR       to #Fiscal_Year
  move &DED_DIST.FISCAL_YEAR       to #Budget_Fiscal_Year
  move &DED_DIST.ACCOUNTING_PERIOD to #Accounting_Period
  move &DED_DIST.ACCT_CD           to $Acct_Cd
  move &DED_DIST.DED_CUR           to #Split_Ded_Amount

  move &DED_DIST.PLAN_TYPE         to $Plan_Type
  move &DED_DIST.BENEFIT_PLAN      to $Benefit_Plan
  move &DED_DIST.DEDCD             to $DedCd
  move &DED_DIST.DED_CLASS         to $Ded_Class
  move &DED_DIST.DED_SLSTX_CLASS   to $Ded_Slstx_Class

  move &DED_DIST.ACCOUNT           to $Key_Account
  move &DED_DIST.DEPTID            to $Key_Deptid
  move &DED_DIST.JOBCODE           to $Key_Jobcode
  move &DED_DIST.POSITION_NBR      to $Key_PositionNbr
  move &DED_DIST.EMPL_RCD          to #Key_Empl_rcd

  move &DED_DIST.POSITION_POOL_ID  to $Position_Pool_Id
  move 'D'                         to $DrCr
  move 'X'                         to $Acct_Type

  do Retrieve-Business-Unit

  let $Deptid       = rtrim($Deptid,' ')
  let $Jobcode      = rtrim($Jobcode,' ')
  let $Position_nbr = rtrim($Position_nbr,' ')

  if $Account = ''
     let $Account = ' '
  end-if
  move $Account to $Dist_Account

  if $Position_Nbr = ''

     let $Position_Nbr = ' '
  end-if

  do GET-ACCT-PERIOD-END-DT
  do GET-CHARTKEYS
  let $Save_Descr = $Descr

  if $ChartKey_Good = 'N'

     EXIT-SELECT
  end-if

  move $Dist_Account to $Account

  do Split-Ded-By-Benefit-Rcd

  let #Ben_Rcd_loop = 0

  While #Ben_Rcd_Loop < #Sp_Ded_Total_Cnt

      move &DED_DIST.FISCAL_YEAR       to #Fiscal_Year
      move $Dist_Account to $Account

      Get #Benefit_Rcd
          #Monetary_Amount From DED_SPLIT (#Ben_Rcd_Loop)
          STORE_DED_BENEFIT_RCD
          STORE_DED_AMOUNT

      let $Found_Store_Value = 'N'
      let #Store_Count = 0

      WHILE #Store_Count < #E

         GET $Prorate_Ind
             $Ded_BU_HR
             $Ded_SetID
             $Ded_Deptid
             $Ded_Plan_Type
             $Ded_Benefit_Plan
             #Ded_Benefit_Rcd
             $Ded_DedCd
             $Ded_Ded_Class
             $Ded_Ded_Slstx_Class
             #Ded_Fiscal_Year
             #Ded_Accounting_Period
             $Ded_Acct_Cd
             #Ded_Amount    From STORE_DIST(#STORE_COUNT)
             STORE_PRORATE_IND
             STORE_BU_HR
             STORE_SETID
             STORE_DEPTID
             STORE_PLANTYPE
             STORE_BENEFITPLAN
             STORE_BENEFITRCD
             STORE_DEDCD
             STORE_DEDCLASS
             STORE_DEDSLSTXCLASS
             STORE_FISCAL_YEAR
             STORE_ACCOUNTING_PERIOD
             STORE_ACCT_CD
             STORE_DED_AMOUNT

         let $Ded_Deptid  = RTRIM($Ded_Deptid, ' ')

         if ( ($Prorate_Ind       = 'Y')
          and ($Business_Unit_HR  = $Ded_BU_HR)
          and ($SetID_Dept        = $Ded_SetID)
          and ($Deptid            = $Ded_Deptid)
          and ($Plan_Type         = $Ded_Plan_Type)
          and ($Benefit_Plan      = $Ded_Benefit_Plan)
          and (#Benefit_Rcd       = #Ded_Benefit_Rcd)
          and ($DedCd             = $Ded_DedCd)
          and ($Ded_Class         = $Ded_Ded_Class)
          and ($Ded_Slstx_Class   = $Ded_Ded_Slstx_Class)
          and (#Fiscal_Year       = #Ded_Fiscal_Year)
           and (#Accounting_Period = #Ded_Accounting_Period)
            and (&DED_DIST.ACCT_CD  = $Ded_Acct_Cd))

            ARRAY-ADD #Monetary_Amount to STORE_DIST(#STORE_COUNT) STORE_DED_AMOUNT

            let $Found_Store_Value = 'Y'

            add #Monetary_Amount to #Total_Employer_Ded
         end-if

         add 1 to #Store_Count

      END-WHILE

      if $Found_Store_Value = 'N'

        PUT 'Y'
            $Business_Unit_HR
            $SetID_Dept
            $Deptid
            $Plan_Type
            $Benefit_Plan
            #Benefit_Rcd
            $DedCd
            $Ded_Class
            $Ded_Slstx_Class
            &DED_DIST.FISCAL_YEAR
            &DED_DIST.ACCOUNTING_PERIOD
            &DED_DIST.ACCT_CD
            #Monetary_Amount
        INTO  STORE_DIST(#E)
            STORE_PRORATE_IND
            STORE_BU_HR
            STORE_SETID
            STORE_DEPTID
            STORE_PLANTYPE
            STORE_BENEFITPLAN
            STORE_BENEFITRCD
            STORE_DEDCD
            STORE_DEDCLASS
            STORE_DEDSLSTXCLASS
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD
            STORE_ACCT_CD
            STORE_DED_AMOUNT

         add 1                  to #E
         add #Monetary_Amount   to #Total_Employer_Ded
       end-if

      if (( RTRIM($Acct_Cd, ' ') <> '')
       and (#Monetary_Amount     <> 0))

        move &DED_DIST.ACCOUNTING_PERIOD to #Accounting_Period
        move $Save_Descr                 to $Descr
        do FORMAT-ACCOUNTING-DATE
        do WRITE-GL-TRANSACTION

        let $Encumb_Proc_Type = 'D'
        do INTERNAL-BUDGET-UPDATE
      end-if

      add 1 to #Ben_Rcd_loop

  END-WHILE

FROM  PS_PAY_DED_DIST DED_DIST
WHERE [$Slectbenefit]
ORDER BY DED_DIST.PLAN_TYPE,
         DED_DIST.DEDCD
end-SELECT

end-procedure

!****************************************************************************
! Split-Ded-By-Benefit-Rcd                                                  *
!****************************************************************************
begin-procedure Split-Ded-By-Benefit-Rcd

  let #Sp_Ded_Total_Cnt = 0
  let #Total_Split_Ded_Amt = 0
  Clear-Array name=DED_SPLIT

  if #pay_check_loop = 1
     LET $deduct-end-dt = $Pay_End_Dt
  else
     let $deduct-end-dt = $Check.PayCheck_End_Dt
  end-if

  if #pay_check_loop = 2
    let $operation = 'SPLIT_DED.DED_CUR * -1'
  else
    let $operation = 'SPLIT_DED.DED_CUR'
  end-if

begin-Select
SPLIT_DED.BENEFIT_RCD_NBR
[$operation]  &SPLIT_DED.DED_CUR=number

   let #Benefit_Rcd = &SPLIT_DED.BENEFIT_RCD_NBR

   PUT #Benefit_Rcd
       &SPLIT_DED.DED_CUR
   INTO DED_SPLIT(#Sp_Ded_Total_Cnt)
        STORE_DED_BENEFIT_RCD
        STORE_DED_PER_BENRCD

   add &SPLIT_DED.DED_CUR to #Total_Split_Ded_Amt

   add 1 to #Sp_Ded_Total_Cnt

FROM  PS_PAY_DEDUCTION   SPLIT_DED
WHERE SPLIT_DED.COMPANY           = $Company
  AND SPLIT_DED.PAYGROUP          = $PayGroup
  AND SPLIT_DED.PAY_END_DT        = $deduct-end-dt
  AND SPLIT_DED.OFF_CYCLE         = $Check.Off_Cycle
  AND SPLIT_DED.PAGE_NUM          = #Check.Page
  AND SPLIT_DED.LINE_NUM          = #Check.Line
  AND SPLIT_DED.SEPCHK            = #Check.Sepchk
  AND SPLIT_DED.PLAN_TYPE         = $Plan_Type
  AND SPLIT_DED.BENEFIT_PLAN      = $Benefit_Plan
  AND SPLIT_DED.DEDCD             = $DedCd
  AND SPLIT_DED.DED_CLASS         = $Ded_Class
  AND SPLIT_DED.DED_SLSTX_CLASS   = $Ded_Slstx_Class

end-select

  let #Total_Split_Ded_Amt = round(#Total_Split_Ded_Amt, 2)

  if #Sp_Ded_Total_Cnt > 0

      if #Sp_Ded_Total_Cnt = 1

          PUT #Split_Ded_Amount INTO DED_SPLIT(0) STORE_DED_AMOUNT

      else

          if #Total_Split_Ded_Amt = 0

              PUT #Split_Ded_Amount INTO DED_SPLIT(0) STORE_DED_AMOUNT

          else

              let #Ben_Rcd_loop = 0
              let #Last_Ben_Rcd = #Sp_Ded_Total_Cnt - 1
              let #Split_Remainer_Amount = #Split_Ded_Amount

              While #Ben_Rcd_loop < #Sp_Ded_Total_Cnt

                  Get #Benefit_Rcd
                      #Ded_Per_BenRcd From DED_SPLIT (#Ben_Rcd_Loop)
                      STORE_DED_BENEFIT_RCD
                      STORE_DED_PER_BENRCD

                  if #Ben_Rcd_loop = #Last_Ben_Rcd

                      PUT #Split_Remainer_Amount
                          INTO DED_SPLIT(#Ben_Rcd_loop) STORE_DED_AMOUNT

                      let #Split_Remainer_Amount = 0
                  else
                      let #Cal_Split_Ded_Amt = #Split_Ded_Amount *
                               (#Ded_Per_BenRcd/#Total_Split_Ded_Amt)

                      let #Cal_Split_Ded_Amt = round(#Cal_Split_Ded_Amt,2)

                      PUT #Cal_Split_Ded_Amt
                          INTO DED_SPLIT(#Ben_Rcd_loop) STORE_DED_AMOUNT

                      let #Split_Remainer_Amount =
                             #Split_Remainer_Amount - #Cal_Split_Ded_Amt
                  end-if

                  add 1 to #Ben_Rcd_loop

              End-While
          end-if
      end-if
  end-if

end-procedure

!****************************************************************************
! COUNT-ROWS                                                                *
! Count number of rows for Earnings, Deductions and Taxes.                  *
!****************************************************************************
begin-procedure COUNT-ROWS

  move 0      to #Ern_Rows
  move 0      to #Tax_Rows
  move 0      to #Ctx_Rows
  move 0      to #Ded_Rows
  move 0      to #prorate_Ern_Rows
  move 0      to #not_prorate_Ern_Rows
  let #Store_Count       = 0
  let $DefCK_Found       = 'N'

  WHILE #Store_Count < #E

     GET $Prorate_Ind
         $Business_Unit_HR
         $SetID_Dept
         $Deptid
         #Fiscal_Year
         #Accounting_Period
         $Acct_Cd
         #Earnings
         #Tax_Amount
         #Ctx_Amount
         #Ded_Amount    From STORE_DIST(#STORE_COUNT)
         STORE_PRORATE_IND
         STORE_BU_HR
         STORE_SETID
         STORE_DEPTID
         STORE_FISCAL_YEAR
         STORE_ACCOUNTING_PERIOD
         STORE_ACCT_CD
         STORE_EARNINGS
         STORE_TAX_AMOUNT
         STORE_CTX_AMOUNT
         STORE_DED_AMOUNT

        if #Earnings <> 0
           add 1 to #Ern_Rows
           if $Prorate_Ind = 'Y'
               add 1 to #prorate_Ern_Rows
           else
               add 1 to #not_prorate_Ern_Rows
           end-if
        end-if

        if #Tax_Amount <> 0
           add 1 to #Tax_Rows
        end-if

        if #Ctx_Amount <> 0
           add 1 to #Ctx_Rows
        end-if

        if #Ded_Amount <> 0
           add 1 to #Ded_Rows
        end-if

        if $Prorate_Ind = 'Y' and $DefCK_Found = 'N'
           let #DefCK_Count = #Store_Count
           let $DefCK_Found = 'Y'
        end-if

     add 1 to #Store_Count

  END-WHILE

end-procedure
!****************************************************************************
! DEDUCTION-and-BENEFIT-LIABILITIES                                         *
! Selects deduction liabilities for the current paycheck.                   *
!****************************************************************************
begin-procedure DEDUCTION-and-BENEFIT-LIABILITIES


  if #pay_check_loop = 1
     LET $deduct-end-dt = $Pay_End_Dt
  else
     let $deduct-end-dt = $Check.PayCheck_End_Dt
  end-if


  move 'BEN-LIA' to $TranType
  move 0         to #Total_EE_Ded_Liab
  move 0         to #Total_ER_Ded_Liab

  let $Save_Plan_Type  = ' '
  let $Save_DedCd      = ' '
  let $Save_Ded_Class  = ' '

  let $err-statement1 = 'PAYGL02, Select Error - DEDUCTION-and-BENEFIT-LIABILITIES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ', and Deduction Class effective date is <= '||
                        $Pay_End_Dt

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'DEDUCTION-AND-BENEFIT-LIABILIT'
  let $Msg_MsgData2   = 'Ded Class EFFDT<='||$Pay_End_Dt_DMY
  let $Msg_MsgData3   = 'See SQR log'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 2
    let $operation = 'PAY_DED.DED_CUR * -1'
    let $operation_Garn = 'GARN.DEDUCT_AMT * -1'
    let $operation_Bond = 'BDLG.BOND_COLLECT_AMT * -1'
  else
    let $operation = 'PAY_DED.DED_CUR'
    let $operation_Garn = 'GARN.DEDUCT_AMT'
    let $operation_Bond = 'BDLG.BOND_COLLECT_AMT'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
PAY_DED.PLAN_TYPE
PAY_DED.DEDCD
PAY_DED.DED_CLASS
PAY_DED.DED_SLSTX_CLASS
PAY_DED.BENEFIT_RCD_NBR
PAY_DED.BENEFIT_PLAN
[$operation] &PAY_DED.DED_CUR=number
DEDTBL.SPCL_PROCESS


  move 'DED' to $Activity
  move 0     to #ER_Count
  move 0     to #EE_Count
  move 'C'   to $DrCr
  move 'L'   to $Acct_Type

  move &PAY_DED.PLAN_TYPE         to $Save_Plan_Type
  move &PAY_DED.DEDCD             to $Save_DedCd
  move &PAY_DED.DED_CLASS         to $Save_Ded_Class
  move &PAY_DED.DED_CLASS         to $Proc_Ded_Class

  move &PAY_DED.PLAN_TYPE         to $Pay_Ded.Plan_Type
  move &PAY_DED.DEDCD             to $Pay_Ded.DedCd
  move &PAY_DED.DED_CLASS         to $Pay_Ded.Ded_Class
  move &PAY_DED.DED_SLSTX_CLASS   to $Pay_Ded.Ded_Slstx_Class
  move &PAY_DED.BENEFIT_RCD_NBR   to #Pay_Ded.Benefit_Rcd_Nbr
  move &PAY_DED.BENEFIT_PLAN      to $Pay_Ded.Benefit_Plan

  let $SpclProcess      = &DEDTBL.SPCL_PROCESS
  let $BondID           = ' '
  let $BondOwnerID      = ' '
  let $BondOthRegType   = ' '
  let $BondOthRegID     = ' '
  let #BondLogSeq       = 0
  let #GarnPriority     = 0
  let $GarnID           = ' '
  evaluate $SpclProcess
      when = 'B'
          do Get-Bonds
          if $BondLogExists = 'N'
              move &PAY_DED.DED_CUR to #Proc_Ded_Cur
              do Distribute-Deductions
          end-if
          break
      when = 'G'
          do Get-Garnishment
          break
      when-other
          move &PAY_DED.DED_CUR to #Proc_Ded_Cur
          do Distribute-Deductions
          break
  end-evaluate

FROM  PS_PAY_DEDUCTION   PAY_DED,
      PS_PAYGROUP_TBL    PG,
      PS_DEDUCTION_TBL   DEDTBL
WHERE PAY_DED.COMPANY          = $Company
  AND PAY_DED.PAYGROUP         = $PayGroup
  AND PAY_DED.PAY_END_DT       = $deduct-end-dt
  AND $Check.Off_Cycle       = PAY_DED.OFF_CYCLE
  AND #Check.Page            = PAY_DED.PAGE_NUM
  AND #Check.Line            = PAY_DED.LINE_NUM
  AND #Check.Sepchk          = PAY_DED.SEPCHK
  AND PG.COMPANY             = PAY_DED.COMPANY
  AND PG.PAYGROUP            = PAY_DED.PAYGROUP
  AND PG.EFFDT               = (SELECT MAX(PG2.EFFDT)
                                FROM PS_PAYGROUP_TBL PG2
                                WHERE PG2.COMPANY  = PG.COMPANY
                                AND   PG2.PAYGROUP = PG.PAYGROUP
                                AND   PG2.EFFDT   <= PAY_DED.PAY_END_DT)
  AND NOT
     (PAY_DED.DED_CLASS      = 'T'
      AND ((PAY_DED.PLAN_TYPE >= '20' AND PAY_DED.PLAN_TYPE <= '29')
       OR  (PAY_DED.PLAN_TYPE >= '2A' AND PAY_DED.PLAN_TYPE <= '2Z'))
      AND PG.COUNTRY         = 'USA')
  AND PAY_DED.PLAN_TYPE      = DEDTBL.PLAN_TYPE
  AND PAY_DED.DEDCD          = DEDTBL.DEDCD
  AND DEDTBL.EFFDT           = (SELECT MAX(DEDTBL1.EFFDT) FROM PS_DEDUCTION_TBL DEDTBL1
                                WHERE DEDTBL1.PLAN_TYPE = DEDTBL.PLAN_TYPE
                                AND   DEDTBL1.DEDCD     = DEDTBL.DEDCD
                                AND   DEDTBL1.EFFDT    <= PAY_DED.PAY_END_DT)
ORDER BY PAY_DED.DED_CLASS, PAY_DED.DED_SLSTX_CLASS
end-SELECT

end-procedure


!****************************************************************************
! GET-BONDS                                                                 *
!****************************************************************************
begin-procedure Get-Bonds

  let $BondLogExists = 'N'

begin-select on-error=SQL-error
BDLG.BOND_ID
BDLG.BOND_OWNER_ID
BDLG.BOND_OTH_REG_TYPE
BDLG.BOND_OTH_REG_ID
BDLG.BOND_LOG_SEQ
[$operation_Bond] &BDLG.BOND_COLLECT_AMT=number
BDLG.AP_STATUS

  let $BondID           = &BDLG.BOND_ID
  let $BondOwnerID      = &BDLG.BOND_OWNER_ID
  let $BondOthRegType   = &BDLG.BOND_OTH_REG_TYPE
  let $BondOthRegID     = &BDLG.BOND_OTH_REG_ID
  let #BondLogSeq       = &BDLG.BOND_LOG_SEQ
  let $BondLogExists    = 'Y'

  move &BDLG.BOND_COLLECT_AMT to #Proc_Ded_Cur
  do Distribute-Deductions

FROM  PS_BOND_LOG BDLG
WHERE BDLG.EMPLID         = $Check.Emplid
  AND BDLG.COMPANY        = $Company
  AND BDLG.PAYGROUP       = $PayGroup
  AND BDLG.PAY_END_DT     = $deduct-end-dt
  AND BDLG.OFF_CYCLE      = $Check.Off_Cycle
  AND BDLG.FORM_ID        = $Check.Form_ID
  AND BDLG.PAYCHECK_NBR   = #Check.Check
end-select

end-procedure

!****************************************************************************
! GET-GARNISHMENT                                                           *
!****************************************************************************
begin-procedure Get-Garnishment

begin-select on-error=SQL-error
GARN.GARN_PRIORITY
GARN.GARNID
[$operation_Garn] &GARN.DEDUCT_AMT=number
GARN.AP_STATUS

  let #GarnPriority     = &GARN.GARN_PRIORITY
  let $GarnID           = &GARN.GARNID

  move &GARN.DEDUCT_AMT to #Proc_Ded_Cur
  do Distribute-Deductions

FROM  PS_PAY_GARNISH GARN
WHERE GARN.COMPANY        = $Company
  AND GARN.PAYGROUP       = $PayGroup
  AND GARN.PAY_END_DT     = $deduct-end-dt
  AND GARN.OFF_CYCLE      = $Check.Off_Cycle
  AND GARN.PAGE_NUM       = #Check.Page
  AND GARN.LINE_NUM       = #Check.Line
  AND GARN.SEPCHK         = #Check.Sepchk
  AND GARN.PLAN_TYPE      = $Pay_Ded.Plan_Type
  AND GARN.BENEFIT_PLAN   = $Pay_Ded.Benefit_Plan
  AND GARN.DEDCD          = $Pay_Ded.DedCd
  AND GARN.DED_CLASS      = $Pay_Ded.Ded_Class
end-select

end-procedure

!****************************************************************************
! DISTRIBUTE-DEDUCTIONS                                                     *
!****************************************************************************
begin-procedure Distribute-Deductions

  if $Proc_Ded_Class > 'K'

     let #ER_Ded_Remainder = #Proc_Ded_Cur
     let #Store_Count      = 0

     WHILE #Store_Count < #E

        GET $Prorate_Ind
            $Business_Unit_HR
            $SetID_Dept
            $Deptid
            $Ded_Plan_Type
            $Ded_Benefit_Plan
            #Ded_Benefit_Rcd
            $Ded_DedCd
            $Ded_Ded_Class
            $Ded_Ded_Slstx_Class
            #Fiscal_Year
            #Accounting_Period
            $Acct_Cd
            #Ded_Amount   From STORE_DIST(#STORE_COUNT)
            STORE_PRORATE_IND
            STORE_BU_HR
            STORE_SETID
            STORE_DEPTID
            STORE_PLANTYPE
            STORE_BENEFITPLAN
            STORE_BENEFITRCD
            STORE_DEDCD
            STORE_DEDCLASS
            STORE_DEDSLSTXCLASS
            STORE_FISCAL_YEAR
            STORE_ACCOUNTING_PERIOD
            STORE_ACCT_CD
            STORE_DED_AMOUNT

        do Retrieve_BusUnit_By_BU_Dept

        if #Ded_Amount <> 0
           and ($Ded_Plan_Type        = $Pay_Ded.Plan_Type)
           and ($Ded_Benefit_Plan     = $Pay_Ded.Benefit_Plan)
           and (#Ded_Benefit_Rcd      = #Pay_Ded.Benefit_Rcd_Nbr)
           and ($Ded_DedCd            = $Pay_Ded.DedCd)
           and ($Ded_Ded_Class        = $Pay_Ded.Ded_Class)
           and ($Ded_Ded_Slstx_Class  = $Pay_Ded.Ded_Slstx_Class)

           let #Monetary_Amount = #Ded_Amount
           do GET-ACCT-PERIOD-END-DT
           do GET-CHARTKEYS
           add #Monetary_Amount to #Total_ER_Ded_Liab

           ARRAY-ADD #Monetary_Amount to
                     STORE_DIST(#STORE_COUNT) STORE_ER_DED_LIAB

           do FORMAT-ACCOUNTING-DATE
           do GET-OFF-SET-ACCOUNT
           do WRITE-GL-TRANSACTION
           do WRITE-DED-LIAB-AP
        end-if

        add 1 to #Store_Count

     END-WHILE

     add #Proc_Ded_Cur to #Total_Employer_Ded_Liab
  else

     let #EE_Ded_Remainder = #Proc_Ded_Cur
     let #Store_Count      = 0

     if #prorate_Ern_Rows > 0

         WHILE #Store_Count < #E

            GET $Prorate_Ind
                $Business_Unit_HR
                $SetID_Dept
                $Deptid
                #Fiscal_Year
                #Accounting_Period
                $Acct_Cd
                #Ern_Amount
                #EE_Ded_Liab
                #EE_Tax_Liab
                #EE_Ctx_Liab From STORE_DIST(#STORE_COUNT)
                STORE_PRORATE_IND
                STORE_BU_HR
                STORE_SETID
                STORE_DEPTID
                STORE_FISCAL_YEAR
                STORE_ACCOUNTING_PERIOD
                STORE_ACCT_CD
                STORE_EARNINGS
                STORE_EE_Ded_Liab
                STORE_EE_Tax_Liab
                STORE_EE_Ctx_Liab

            if $Prorate_Ind = 'Y'

                do Retrieve_BusUnit_By_BU_Dept

                if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do GET-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows           = #Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern = #Total_Employer_Ern
                        do DISTRIBUTE-EE-DED-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-DED-LIAB-AP
                    end-if

                else
                    if #EE_Ded_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_Employer_Ern = 0)

                        do GET-ACCT-PERIOD-END-DT
                        do GET-CHARTKEYS

                        add 1 to #EE_Count
                        let #Monetary_Amount = #EE_Ded_Remainder
                        let #EE_Ded_Remainder = 0
                        add #Monetary_Amount to #Total_EE_Ded_Liab

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-DED-LIAB-AP
                    end-if
                end-if
             end-if

             add 1 to #Store_Count

         END-WHILE
     end-if

     let #EE_Count         = 0
     let #Store_Count      = 0

     if #not_prorate_Ern_Rows > 0 and #EE_Ded_Remainder <> 0

         WHILE #Store_Count < #E

            GET $Prorate_Ind
                $Business_Unit_HR
                $SetID_Dept
                $Deptid
                #Fiscal_Year
                #Accounting_Period
                #Ern_Amount
                #EE_Ded_Liab
                #EE_Tax_Liab
                #EE_Ctx_Liab From STORE_DIST(#STORE_COUNT)
                STORE_PRORATE_IND
                STORE_BU_HR
                STORE_SETID
                STORE_DEPTID
                STORE_FISCAL_YEAR
                STORE_ACCOUNTING_PERIOD
                STORE_EARNINGS
                STORE_EE_Ded_Liab
                STORE_EE_Tax_Liab
                STORE_EE_Ctx_Liab

            if $Prorate_Ind = 'N'

                do Retrieve_BusUnit_By_BU_Dept

                if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do INIT-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows           = #not_Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern = #Total_NP_Employer_Ern
                        do DISTRIBUTE-EE-DED-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

                        add #Monetary_Amount to #Total_NP_DedTax_Amt
                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-DED-LIAB-AP
                    end-if

                else
                    if #EE_Ded_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_NP_Employer_Ern = 0)

                        do GET-ACCT-PERIOD-END-DT
                        do INIT-CHARTKEYS

                        add 1 to #EE_Count
                        let #Monetary_Amount = #EE_Ded_Remainder
                        let #EE_Ded_Remainder = 0
                        add #Monetary_Amount to #Total_EE_Ded_Liab

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

                        add #Monetary_Amount to #Total_NP_DedTax_Amt
                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-DED-LIAB-AP
                    end-if
                end-if
            end-if

            add 1 to #Store_Count

         END-WHILE
     end-if

     if #not_prorate_Ern_Rows = 0 and
        #prorate_Ern_Rows     = 0 and
        #EE_Ded_Remainder    <> 0 and
        $DefCK_Found          = 'Y'

         GET $Business_Unit_HR
             $SetID_Dept
             $Deptid
             #Fiscal_Year
             #Accounting_Period
             $Acct_Cd From STORE_DIST(#DefCK_Count)
             STORE_BU_HR
             STORE_SETID
             STORE_DEPTID
             STORE_FISCAL_YEAR
             STORE_ACCOUNTING_PERIOD
             STORE_ACCT_CD

         do Retrieve_BusUnit_By_BU_Dept
         do GET-ACCT-PERIOD-END-DT
         do GET-CHARTKEYS

         let #Monetary_Amount = #EE_Ded_Remainder
         let #EE_Ded_Remainder = 0
         add #Monetary_Amount to #Total_EE_Ded_Liab

         ARRAY-ADD #Monetary_Amount to
                   STORE_DIST(#DefCK_Count) STORE_EE_DED_LIAB

         do FORMAT-ACCOUNTING-DATE
         do GET-OFF-SET-ACCOUNT
         do WRITE-GL-TRANSACTION
         do WRITE-DED-LIAB-AP
     end-if

     if #EE_Ded_Remainder <> 0

         let #Store_Count      = 0

         WHILE #Store_Count < #E

            GET $Prorate_Ind
                $Business_Unit_HR
                $SetID_Dept
                $Deptid
                #Fiscal_Year
                #Accounting_Period
                $Acct_Cd
                #Ern_Amount
                #EE_Ded_Liab
                #EE_Tax_Liab
                #EE_Ctx_Liab From STORE_DIST(#STORE_COUNT)
                STORE_PRORATE_IND
                STORE_BU_HR
                STORE_SETID
                STORE_DEPTID
                STORE_FISCAL_YEAR
                STORE_ACCOUNTING_PERIOD
                STORE_ACCT_CD
                STORE_EARNINGS
                STORE_EE_Ded_Liab
                STORE_EE_Tax_Liab
                STORE_EE_Ctx_Liab

             let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

             if #Avail_Funding <> 0
                 do Retrieve_BusUnit_By_BU_Dept

                 do GET-ACCT-PERIOD-END-DT
                 if $Prorate_Ind = 'Y'
                     do GET-CHARTKEYS
                 else
                     do INIT-CHARTKEYS
                 end-if

                 let #Monetary_Amount = #EE_Ded_Remainder

                 if #Avail_Funding > 0
                     if #Avail_Funding < #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 else
                     if #Avail_Funding > #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 end-if

                 let #EE_Ded_Remainder = #EE_Ded_Remainder - #Monetary_Amount
                 add #Monetary_Amount to #Total_EE_Ded_Liab

                 ARRAY-ADD #Monetary_Amount to
                           STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

                 do FORMAT-ACCOUNTING-DATE
                 do GET-OFF-SET-ACCOUNT
                 do WRITE-GL-TRANSACTION
                 do WRITE-DED-LIAB-AP
             end-if

             add 1 to #Store_Count

         end-while
     end-if

     if #EE_Ded_Remainder <> 0

         let #Store_Count      = 0

         GET $Business_Unit_HR
             $SetID_Dept
             $Deptid
             #Fiscal_Year
             #Accounting_Period From STORE_DIST(#STORE_COUNT)
             STORE_BU_HR
             STORE_SETID
             STORE_DEPTID
             STORE_FISCAL_YEAR
             STORE_ACCOUNTING_PERIOD

         do Retrieve_BusUnit_By_BU_Dept
         do GET-ACCT-PERIOD-END-DT
         do INIT-CHARTKEYS

         let #Monetary_Amount = #EE_Ded_Remainder
         let #EE_Ded_Remainder = 0
         add #Monetary_Amount to #Total_EE_Ded_Liab

         ARRAY-ADD #Monetary_Amount to
                   STORE_DIST(#STORE_COUNT) STORE_EE_DED_LIAB

         add #Monetary_Amount to #Total_NP_DedTax_Amt
         do FORMAT-ACCOUNTING-DATE
         do GET-OFF-SET-ACCOUNT
         do WRITE-GL-TRANSACTION
         do WRITE-DED-LIAB-AP
     end-if

     add #Proc_Ded_Cur to #Total_Employee_Ded_Liab
  end-if
end-procedure

!****************************************************************************
! WRITE-DED-LIAB-AP                                                         *
! Writes out the PAY_DED_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-DED-LIAB-AP

  if #Monetary_Amount_AP <> 0 AND #pay_check_loop = 1

     do WRITE-DED-LIAB-AP-RECORD

  end-if

end-procedure

!****************************************************************************
! WRITE-DED-LIAB-AP-RECORD                                                  *
! Writes out the PAY_DED_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-DED-LIAB-AP-RECORD

  if $Company                   = $Prev_Company          and
     $PayGroup                  = $Prev_PayGroup         and
     $Pay_End_Dt                = $Prev_Pay_End_Dt       and
     $Check.Off_Cycle           = $Prev_Check.Off_Cycle  and
     #Check.Page                = #Prev_Check.Page       and
     #Check.Line                = #Prev_Check.Line       and
     #Check.Sepchk              = #Prev_Check.Sepchk     and
     #Pay_Ded.Benefit_Rcd_Nbr   = #Prev_Benefit_Rcd_Nbr  and
     $Pay_Ded.Plan_Type         = $Prev_Plan_Type        and
     $Pay_Ded.Benefit_Plan      = $Prev_Benefit_Plan     and
     $Pay_Ded.Dedcd             = $Prev_Dedcd            and
     $Pay_Ded.Ded_Class         = $Prev_Ded_Class        and
     $Pay_Ded.Ded_Slstx_Class   = $Prev_Ded_Slstx_Class

     add 1 to #Ded_Seqno
  else
     move 1                          to #Ded_Seqno
     move $Company                   to $Prev_Company
     move $PayGroup                  to $Prev_PayGroup
     move $Pay_End_Dt                to $Prev_Pay_End_Dt
     move $Check.Off_Cycle           to $Prev_Check.Off_Cycle
     move #Check.Page                to #Prev_Check.Page
     move #Check.Line                to #Prev_Check.Line
     move #Check.Sepchk              to #Prev_Check.Sepchk
     move #Pay_Ded.Benefit_Rcd_Nbr   to #Prev_Benefit_Rcd_Nbr
     move $Pay_Ded.Plan_Type         to $Prev_Plan_Type
     move $Pay_Ded.Benefit_Plan      to $Prev_Benefit_Plan
     move $Pay_Ded.Dedcd             to $Prev_Dedcd
     move $Pay_Ded.Ded_Class         to $Prev_Ded_Class
     move $Pay_Ded.Ded_Slstx_Class   to $Prev_Ded_Slstx_Class
  end-if

  move #Check.Page              to $Check.Page
  move #Check.Line              to $Check.Line
  move #Check.Sepchk            to $Check.Sepchk
  move #Ded_Seqno               to $Ded_Seqno
  move #Monetary_Amount_AP      to $Monetary_Amount_AP
  move #Pay_Ded.Benefit_Rcd_Nbr to $Pay_Ded.Benefit_Rcd_Nbr

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-DED-LIAB-AP-RECORD'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_DED_LIAB_AP'||
                        ', COMPANY '||$Company||
                        ', PAYGROUP '||$Paygroup||
                        ', PAY_END_DT '||$Pay_End_Dt||
                        ', OFF_CYCLE '||$Check.Off_Cycle||
                        ', PAGE_NUM '||$Check.Page||
                        ', LINE_NUM '||$Check.Line||
                        ', SEPCHK '||$Check.Sepchk||
                        ', BENEFIT_RCD_NBR '||$Pay_Ded.Benefit_Rcd_Nbr||
                        ', PLAN_TYPE '||$Pay_Ded.Plan_Type||
                        ', BENEFIT_PLAN '||$Pay_Ded.Benefit_Plan||
                        ', DEDCD '||$Pay_Ded.Dedcd||
                        ', DED_CLASS '||$Pay_Ded.Ded_Class||
                        ', DED_SLSTX_CLASS '||$Pay_Ded.Ded_Slstx_Class||
                        ', SEQNO '||$Ded_Seqno||
                        ', DED_CUR '||$Monetary_Amount_AP||
                        ', ACCOUNT '||$Account||
                        ', DEPTID_CF '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT '||$AltAcct ||
                        ', BUDGET_REF '||$Budget_Ref ||
                        ', CHARTFIELD1 '||$Chartfield1 ||
                        ', CHARTFIELD2 '||$Chartfield2 ||
                        ', CHARTFIELD3 '||$Chartfield3 ||
                        ', AFFILIATE_INTRA1 '||$Affiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$Affiliate_intra2
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-DED-LIAB-AP-RECORD'
  let $Msg_MsgData2   = 'Refer to log for key values'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_PAY_DED_LIAB_AP
( COMPANY,
  PAYGROUP,
  PAY_END_DT,
  OFF_CYCLE,
  PAGE_NUM,
  LINE_NUM,
  SEPCHK,
  BENEFIT_RCD_NBR,
  PLAN_TYPE,
  BENEFIT_PLAN,
  DEDCD,
  DED_CLASS,
  DED_SLSTX_CLASS,
  SEQNO,
  DED_CUR,
  ACCOUNT,
  DEPTID_CF,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  LINE_NBR,
  GARN_PRIORITY,
  GARNID,
  BOND_ID,
  BOND_OWNER_ID,
  BOND_OTH_REG_TYPE,
  BOND_OTH_REG_ID,
  BOND_LOG_SEQ)
VALUES($Company,
       $Paygroup,
       $Pay_End_Dt,
       $Check.Off_Cycle,
       #Check.Page,
       #Check.Line,
       #Check.Sepchk,
       #Pay_Ded.Benefit_Rcd_Nbr,
       $Pay_Ded.Plan_Type,
       $Pay_Ded.Benefit_Plan,
       $Pay_Ded.Dedcd,
       $Pay_Ded.Ded_Class,
       $Pay_Ded.Ded_Slstx_Class,
       #Ded_Seqno,
       #Monetary_Amount_AP,
       $Account,
       $GL_DeptID,
       $Project_ID,
       $Product,
       $Fund_Code,
       $Program_Code,
       $Class_Fld,
       $Affiliate,
       $Operating_Unit,
       $AltAcct,
       $Budget_Ref,
       $Chartfield1,
       $Chartfield2,
       $Chartfield3,
       $Affiliate_intra1,
       $Affiliate_intra2,
       #gl_entry_line,
       #GarnPriority,
       $GarnID,
       $BondID,
       $BondOwnerID,
       $BondOthRegType,
       $BondOthRegID,
       #BondLogSeq)
end-SQL

let #Monetary_Amount_AP = 0

end-procedure

!****************************************************************************
! DISTRIBUTE-EE-DED-AMOUNT                                                  *
! Prorates the current employee deduction over the total employer earnings. *
!****************************************************************************
begin-procedure DISTRIBUTE-EE-DED-AMOUNT

  add 1 to #EE_Count

  if #EE_Count < #Cmp_Ern_Rows

     if #Cmp_Total_Employer_Ern = 0

        let #Monetary_Amount = 0

     else

        let #Monetary_Amount = #Proc_Ded_Cur *
                               (#Ern_Amount/#Cmp_Total_Employer_Ern)
     end-if

     let #Monetary_Amount  = round(#Monetary_Amount,2)
  else

     let #Monetary_Amount = #EE_Ded_Remainder
  end-if

  if #Avail_Funding > 0
      if #Avail_Funding < #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  else
      if #Avail_Funding > #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  end-if

  let #EE_Ded_Remainder = #EE_Ded_Remainder - #Monetary_Amount
  add #Monetary_Amount to #Total_EE_Ded_Liab

end-procedure
!****************************************************************************
! TAX-LIABILITIES                                                           *
! Selects the tax liabilities for the current paycheck.                     *
!****************************************************************************
begin-procedure TAX-LIABILITIES

  if #pay_check_loop = 1
     LET $tax-end-dt = $Pay_End_Dt
  else
     let $tax-end-dt = $Check.PayCheck_End_Dt
  end-if

  move 'TAX-LIA' to $TranType
  move 0         to #Total_ER_Tax_Liab
  move 0         to #Total_EE_Tax_Liab

  let $err-statement1 = 'PAYGL02, Select Error - TAX-LIABILITIES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ', Tax Class is not W, and State is not Blank'

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'TAX-LIABILITIES see log'
  let $Msg_MsgData2   = 'Tax Class is not W,'
  let $Msg_MsgData3   = 'and State is not Blank'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 2
    let $operation = 'PAY_TAX.TAX_CUR * -1'
  else
    let $operation = 'PAY_TAX.TAX_CUR'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
PAY_TAX.STATE
PAY_TAX.LOCALITY
PAY_TAX.TAX_CLASS
[$operation] &PAY_TAX.TAX_CUR=number

  move 0   to #EE_Count_T

  move 'C' to $DrCr
  move 'L' to $Acct_Type

  let $Tax_Class        = RTRIM(&PAY_TAX.TAX_CLASS, ' ')
  let $State            = RTRIM(&PAY_TAX.STATE, ' ')
  let $Pay_Tax.Locality = &PAY_TAX.LOCALITY

  let $Pay_Tax.Tax_Class = &PAY_TAX.TAX_CLASS
  let $Pay_Tax.State     = &PAY_TAX.STATE

  evaluate &PAY_TAX.TAX_CLASS
   when = 'B'
   when = 'E'
   when = 'R'
   when = 'S'
   when = 'U'
   when = 'J'
   when = 'Q'
   when = 'X'
   when = 'Y'
   when = 'Z'

      let #Tax_Count = 0

      do DETERMINE-ER-TAX-ENTITY

      WHILE (#Tax_Count < #E)

         GET $Prorate_Ind
             $Business_Unit_HR
             $SetID_Dept
             $Deptid
             $Tax_State
             $Tax_Locality
             $Tax_Tax_Class
             #Fiscal_Year
             #Accounting_Period
             $Acct_Cd
             #Tax_Amount    From STORE_DIST(#Tax_Count)
             STORE_PRORATE_IND
             STORE_BU_HR
             STORE_SETID
             STORE_DEPTID
             STORE_STATE
             STORE_LOCALITY
             STORE_TAXCLASS
             STORE_FISCAL_YEAR
             STORE_ACCOUNTING_PERIOD
             STORE_ACCT_CD
             STORE_TAX_AMOUNT

         do Retrieve_BusUnit_By_BU_Dept

         if #Tax_Amount <> 0
            and ($Tax_State        = $Pay_Tax.State)
            and ($Tax_Locality     = $Pay_Tax.Locality)
            and ($Tax_Tax_Class    = $Pay_Tax.Tax_Class)

            let #Monetary_Amount = #Tax_Amount

            do GET-ACCT-PERIOD-END-DT
            do GET-CHARTKEYS
            add #Monetary_Amount to #Total_ER_Tax_Liab

               ARRAY-ADD #Monetary_Amount to
                         STORE_DIST(#Tax_Count) STORE_ER_TAX_LIAB

            do FORMAT-ACCOUNTING-DATE
            do GET-OFF-SET-ACCOUNT
            do WRITE-GL-TRANSACTION
            do WRITE-TAX-LIAB-AP
         end-if

         add 1 to #Tax_Count

      END-WHILE

      add &PAY_TAX.TAX_CUR to #Total_Employer_Tax_Liab
  end-evaluate

  evaluate &PAY_TAX.TAX_CLASS
   when = 'A'  !Non-resident alien (1042)
   when = 'B'
   when = 'C'
   when = 'D'
   when = 'F'
   when = 'G'
   when = 'H'
   when = 'I'
   when = 'K'
   when = 'L'
   when = 'M'
   when = 'N'
   when = 'O'
   when = 'P'
   when = 'V'
   when = 'T'
   when = 'W'

      let #Tax_Ct = 0

      do DETERMINE-EE-TAX-ENTITY

      let #EE_Tax_Remainder = &PAY_TAX.TAX_CUR

      if #prorate_Ern_Rows > 0

          WHILE #Tax_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab   From STORE_DIST(#Tax_Ct)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             if $Prorate_Ind = 'Y'

                 do Retrieve_BusUnit_By_BU_Dept

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do GET-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows             = #Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern   = #Total_Employer_Ern
                        do DISTRIBUTE-EE-TAX-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-TAX-LIAB-AP
                    end-if

                 else
                    if #EE_Tax_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do GET-CHARTKEYS

                       add 1 to #EE_Count_T
                       let #Monetary_Amount = #EE_Tax_Remainder
                       let #EE_Tax_Remainder = 0
                       add #Monetary_Amount to #Total_EE_Tax_Liab

                       ARRAY-ADD #Monetary_Amount to
                                 STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                       do WRITE-TAX-LIAB-AP
                    end-if
                 end-if
             end-if

             add 1 to #Tax_Ct

          END-WHILE
      end-if

      let #Tax_Ct     = 0
      let #EE_Count_T = 0

      if #not_prorate_Ern_Rows > 0 and #EE_Tax_Remainder <> 0

          WHILE #Tax_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab   From STORE_DIST(#Tax_Ct)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             if $Prorate_Ind = 'N'

                 do Retrieve_BusUnit_By_BU_Dept

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do INIT-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows             = #Not_Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern   = #Total_NP_Employer_Ern
                        do DISTRIBUTE-EE-TAX-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

                        add #Monetary_Amount to #Total_NP_DedTax_Amt
                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-TAX-LIAB-AP
                    end-if

                 else
                    if #EE_Tax_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_NP_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do INIT-CHARTKEYS

                       add 1 to #EE_Count_T
                       let #Monetary_Amount = #EE_Tax_Remainder
                       let #EE_Tax_Remainder = 0
                       add #Monetary_Amount to #Total_EE_Tax_Liab

                       ARRAY-ADD #Monetary_Amount to
                                 STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

                       add #Monetary_Amount to #Total_NP_DedTax_Amt
                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                       do WRITE-TAX-LIAB-AP
                    end-if
                 end-if
             end-if

             add 1 to #Tax_Ct

          END-WHILE
      end-if

      if #not_prorate_Ern_Rows = 0 and
         #prorate_Ern_Rows     = 0 and
         #EE_Tax_Remainder    <> 0 and
         $DefCK_Found          = 'Y'

          GET $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period
              $Acct_Cd From STORE_DIST(#DefCK_Count)
              STORE_BU_HR
              STORE_SETID
              STORE_DEPTID
              STORE_FISCAL_YEAR
              STORE_ACCOUNTING_PERIOD
              STORE_ACCT_CD

          do Retrieve_BusUnit_By_BU_Dept
          do GET-ACCT-PERIOD-END-DT
          do GET-CHARTKEYS

          let #Monetary_Amount = #EE_Tax_Remainder
          let #EE_Tax_Remainder = 0
          add #Monetary_Amount to #Total_EE_Tax_Liab

          ARRAY-ADD #Monetary_Amount to
                    STORE_DIST(#DefCK_Count) STORE_EE_TAX_LIAB

          do FORMAT-ACCOUNTING-DATE
          do GET-OFF-SET-ACCOUNT
          do WRITE-GL-TRANSACTION
          do WRITE-TAX-LIAB-AP
      end-if

      if #EE_Tax_Remainder <> 0

          let #Tax_Ct     = 0

          WHILE #Tax_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab   From STORE_DIST(#Tax_Ct)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

             if #Avail_Funding <> 0
                 do Retrieve_BusUnit_By_BU_Dept

                 do GET-ACCT-PERIOD-END-DT
                 if $Prorate_Ind = 'Y'
                     do GET-CHARTKEYS
                 else
                     do INIT-CHARTKEYS
                 end-if

                 let #Monetary_Amount = #EE_Tax_Remainder

                 if #Avail_Funding > 0
                     if #Avail_Funding < #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 else
                     if #Avail_Funding > #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 end-if

                 let #EE_Tax_Remainder = #EE_Tax_Remainder - #Monetary_Amount
                 add #Monetary_Amount to #Total_EE_Tax_Liab

                 ARRAY-ADD #Monetary_Amount to
                           STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

                 do FORMAT-ACCOUNTING-DATE
                 do GET-OFF-SET-ACCOUNT
                 do WRITE-GL-TRANSACTION
                 do WRITE-TAX-LIAB-AP
             end-if

             add 1 to #Tax_Ct

          end-while
      end-if

      if #EE_Tax_Remainder <> 0

          let #Tax_Ct     = 0

          GET $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period From STORE_DIST(#Tax_Ct)
              STORE_BU_HR
              STORE_SETID
              STORE_DEPTID
              STORE_FISCAL_YEAR
              STORE_ACCOUNTING_PERIOD

          do Retrieve_BusUnit_By_BU_Dept
          do GET-ACCT-PERIOD-END-DT
          do INIT-CHARTKEYS

          let #Monetary_Amount = #EE_Tax_Remainder
          let #EE_Tax_Remainder = 0
          add #Monetary_Amount to #Total_EE_Tax_Liab

          ARRAY-ADD #Monetary_Amount to
                    STORE_DIST(#Tax_Ct) STORE_EE_TAX_LIAB

          add #Monetary_Amount to #Total_NP_DedTax_Amt
          do FORMAT-ACCOUNTING-DATE
          do GET-OFF-SET-ACCOUNT
          do WRITE-GL-TRANSACTION
          do WRITE-TAX-LIAB-AP
      end-if

      add &PAY_TAX.TAX_CUR to #Total_Employee_Tax_Liab
  end-evaluate

FROM  PS_PAY_TAX PAY_TAX
WHERE PAY_TAX.COMPANY          = $Company
  AND PAY_TAX.PAYGROUP         = $PayGroup
  AND PAY_TAX.PAY_END_DT       = $Tax-end-dt
  AND PAY_TAX.STATE           <> ' '
  AND PAY_TAX.STATE           NOT in ('$UAS','$UGU','$UPR','$UVI')
  AND PAY_TAX.OFF_CYCLE        = $Check.Off_Cycle
  AND PAY_TAX.PAGE_NUM         = #Check.Page
  AND PAY_TAX.LINE_NUM         = #Check.Line
  AND PAY_TAX.SEPCHK           = #Check.Sepchk
ORDER BY PAY_TAX.STATE,
         PAY_TAX.LOCALITY,
         PAY_TAX.TAX_CLASS
end-SELECT

end-procedure

!****************************************************************************
! WRITE-TAX-LIAB-AP                                                         *
! Writes out the PAY_TAX_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-TAX-LIAB-AP

  if #Monetary_Amount_AP <> 0 and #pay_check_loop = 1

     do WRITE-TAX-LIAB-AP-RECORD

  end-if

end-procedure

!****************************************************************************
! WRITE-TAX-LIAB-AP-RECORD                                                  *
! Writes out the PAY_TAX_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-TAX-LIAB-AP-RECORD

  if $Company            = $Prev_Company          and
     $PayGroup           = $Prev_PayGroup         and
     $Pay_End_Dt         = $Prev_Pay_End_Dt       and
     $Check.Off_Cycle    = $Prev_Check.Off_Cycle  and
     #Check.Page         = #Prev_Check.Page       and
     #Check.Line         = #Prev_Check.Line       and
     #Check.Sepchk       = #Prev_Check.Sepchk     and
     &PAY_TAX.STATE      = $Prev_State            and
     &PAY_TAX.LOCALITY   = $Prev_Locality         and
     &PAY_TAX.TAX_CLASS  = $Prev_Tax_Class

     add 1 to #Tax_Seqno
  else
     move 1                   to #Tax_Seqno
     move $Company            to $Prev_Company
     move $PayGroup           to $Prev_PayGroup
     move $Pay_End_Dt         to $Prev_Pay_End_Dt
     move $Check.Off_Cycle    to $Prev_Check.Off_Cycle
     move #Check.Page         to #Prev_Check.Page
     move #Check.Line         to #Prev_Check.Line
     move #Check.Sepchk       to #Prev_Check.Sepchk
     move &PAY_TAX.STATE      to $Prev_State
     move &PAY_TAX.LOCALITY   to $Prev_Locality
     move &PAY_TAX.TAX_CLASS  to $Prev_Tax_Class
  end-if

  move #Check.Page         to $Check.Page
  move #Check.Line         to $Check.Line
  move #Check.Sepchk       to $Check.Sepchk
  move #Tax_Seqno          to $Tax_Seqno
  move #Monetary_Amount_AP to $Monetary_Amount_AP

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-TAX-LIAB-AP-RECORD'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_TAX_LIAB_AP'||
                        ', COMPANY '||$Company||
                        ', PAYGROUP '||$Paygroup||
                        ', PAY_END_DT '||$Pay_End_Dt||
                        ', OFF_CYCLE '||$Check.Off_Cycle||
                        ', PAGE_NUM '||$Check.Page||
                        ', LINE_NUM '||$Check.Line||
                        ', SEPCHK '||$Check.Sepchk||
                        ', STATE '||$State||
                        ', LOCALITY '||$Pay_Tax.Locality||
                        ', TAX_CLASS '||$Tax_Class||
                        ', SEQNO '||$Tax_Seqno||
                        ', TAX_CUR '||$Monetary_Amount_AP||
                        ', ACCOUNT '||$Account||
                        ', DEPTID_CF '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT '||$AltAcct ||
                        ', BUDGET_REF '||$Budget_Ref ||
                        ', CHARTFIELD1 '||$Chartfield1 ||
                        ', CHARTFIELD2 '||$Chartfield2 ||
                        ', CHARTFIELD3 '||$Chartfield3 ||
                        ', AFFILIATE_INTRA1 '||$Affiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$Affiliate_intra2
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-TAX-LIAB-AP-RECORD'
  let $Msg_MsgData2   = 'Refer to log for key values'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_PAY_TAX_LIAB_AP
( COMPANY,
  PAYGROUP,
  PAY_END_DT,
  OFF_CYCLE,
  PAGE_NUM,
  LINE_NUM,
  SEPCHK,
  STATE,
  LOCALITY,
  TAX_CLASS,
  SEQNO,
  TAX_CUR,
  ACCOUNT,
  DEPTID_CF,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  LINE_NBR)
VALUES($Company,
       $Paygroup,
       $Pay_End_Dt,
       $Check.Off_Cycle,
       #Check.Page,
       #Check.Line,
       #Check.Sepchk,
       $State,
       $Pay_Tax.Locality,
       $Tax_Class,
       #Tax_Seqno,
       #Monetary_Amount_AP,
       $Account,
       $GL_DeptID,
       $Project_ID,
       $Product,
       $Fund_Code,
       $Program_Code,
       $Class_Fld,
       $Affiliate,
       $Operating_Unit,
       $AltAcct,
       $Budget_Ref,
       $Chartfield1,
       $Chartfield2,
       $Chartfield3,
       $Affiliate_intra1,
       $Affiliate_intra2,
       #gl_entry_line)
end-SQL

let #Monetary_Amount_AP = 0

end-procedure

!****************************************************************************
! DETERMINE-ER-TAX-ENTITY                                                   *
! Determines the offset activity for the current employer tax by tax class. *
!****************************************************************************
begin-procedure DETERMINE-ER-TAX-ENTITY

  if RTRIM(&PAY_TAX.STATE, ' ') = '$U'  !if U.S. federal

     evaluate &PAY_TAX.TAX_CLASS

       when = 'E'  !FICA  OASDI
       when = 'J'  !FICA  OASDI Tips

         move 'FOR' to $Activity

         break
       when = 'Q'  !FICA Medicare
       when = 'Z'  !FICA Medicare Tips

         move 'FMR' to $Activity

         break
       when = 'U'  !FUT

         move 'FUT' to $Activity
     end-evaluate
  else

     let $State  = RTRIM(&PAY_TAX.STATE, ' ')

     if RTRIM(&PAY_TAX.LOCALITY, ' ') = '' !if a State record

        let $Tax_Class = RTRIM(&PAY_TAX.TAX_CLASS, ' ')

        evaluate $Tax_Class

           when = 'S'  !Employer SUT

           when = 'U'  !Employer SUT

              move 'SUT' to $Activity

              break
           when = 'E'  !Employer Disability

              move 'SDR' to $Activity

              break

           when = 'X'  !Vol Employer Disability

              move 'VDR' to $Activity

           when = 'Y'  !Vol Employer Disability

              move 'VLR' to $Activity
        end-evaluate
     else

        move &PAY_TAX.LOCALITY to $Locality

        evaluate &PAY_TAX.TAX_CLASS

           when = 'B'   ! Employer

              move 'LWR' to $Activity

              break
           when = 'R'   ! Employer Only Tax

              move 'LWR' to $Activity
        end-evaluate
     end-if
  end-if

end-procedure
!****************************************************************************
! DETERMINE-EE-TAX-ENTITY                                                   *
! Determines the offset activity for the current employee tax by tax class. *
!****************************************************************************
begin-procedure DETERMINE-EE-TAX-ENTITY

  if RTRIM(&PAY_TAX.STATE, ' ') = '$U'  !if U.S. federal

     evaluate &PAY_TAX.TAX_CLASS

        when = 'H'  !FWT
        when = 'A'  !Non-resident alien

           move 'FWT' to $Activity

           break
        when = 'D'  !FICA  OASDI
        when = 'G'  !FICA  OASDI Tips

           move 'FOE' to $Activity

           break
        when = 'F'  !FICA Medicare
        when = 'T'  !FICA Medicare Tips

           move 'FME' to $Activity

           break
        when = 'C'  !Earned Income Credit

           move 'EIC' to $Activity

           break
        when = 'K'  !Excise Tax

           move 'EXC' to $Activity
     end-evaluate
  else

     let $State = RTRIM(&PAY_TAX.STATE, ' ')

     if RTRIM(&PAY_TAX.LOCALITY, ' ') = '' !if a State record

        let $Tax_Class = RTRIM(&PAY_TAX.TAX_CLASS, ' ')

        evaluate $Tax_Class

           when = 'P'
           when = 'H'  !SWT
           when = 'A'  !State Non-Resident Withholding (1042)        !PUBSEC

              move 'SWT' to $Activity

              break
           when = 'V'  !Employee Unemployment
           when = 'L'  !NJ SWAF
           when = 'M'  !NJ WFDP
           when = 'N'  !NJ HCSF
           when = 'D'  !Employee SUI/SDI

              move 'SDE' to $Activity

              break

           when = 'W'  !Voluntary Disability Plan

              move 'VDE' to $Activity

           when = 'I'

              move 'FLI' to $Activity

           when = 'O'

              move 'VLI' to $Activity
        end-evaluate
     else

        move &PAY_TAX.LOCALITY to $Locality

        evaluate &PAY_TAX.TAX_CLASS

           when = 'B'   ! Employer AND Employee Tax
           when = 'H'   ! Withholding
           when = 'P'   ! Local Occ Priv Tax

              move 'LWE' to $Activity
        end-evaluate
     end-if
  end-if

end-procedure
!****************************************************************************
! DISTRIBUTE-EE-TAX-AMOUNT                                                  *
! Prorates the current employee tax over the total employer earnings.       *
!****************************************************************************
begin-procedure DISTRIBUTE-EE-TAX-AMOUNT

  add 1 to #EE_Count_T

  if #EE_Count_T < #Cmp_Ern_Rows

     if #Cmp_Total_Employer_Ern = 0

        let #Monetary_Amount = 0

     else

        let #Monetary_Amount = (&PAY_TAX.TAX_CUR *
                              (#Ern_Amount/#Cmp_Total_Employer_Ern))
     end-if

     let #Monetary_Amount  = round(#Monetary_Amount,2)
  else

     let #Monetary_Amount = #EE_Tax_Remainder
  end-if

  if #Avail_Funding > 0
      if #Avail_Funding < #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  else
      if #Avail_Funding > #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  end-if

  let #EE_Tax_Remainder = #EE_Tax_Remainder - #Monetary_Amount
  add #Monetary_Amount to #Total_EE_Tax_Liab

end-procedure
!****************************************************************************
! CAN-TAX-LIABILITIES                                                       *
! Selects the tax liabilities (Canadian) for the current paycheck.          *
!****************************************************************************
begin-procedure CAN-TAX-LIABILITIES

  if #pay_check_loop = 1
     LET $Ctax-end-dt = $Pay_End_Dt
  else
     let $Ctax-end-dt = $Check.PayCheck_End_Dt
  end-if

  move 'CTX-LIA' to $TranType
  move 0         to #Total_ER_CTX_Liab
  move 0         to #Total_EE_CTX_Liab

  let $err-statement1 = 'PAYGL02, Select Error - CAN-TAX-LIABILITIES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk||
                        ', All CTX Classes'

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'CAN-TAX-LIABILITIES see log'
  let $Msg_MsgData2   = 'All CTX Classes'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 2
    let $operation = 'PAY_TAX_CAN.TAX_CUR * -1'
  else
    let $operation = 'PAY_TAX_CAN.TAX_CUR'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
PAY_TAX_CAN.PROVINCE
PAY_TAX_CAN.TAX_CLASS_CAN
[$operation] &PAY_TAX_CAN.TAX_CUR=number

  move 0   to #EE_Count_TC

  move 'C' to $DrCr
  move 'L' to $Acct_Type

  let $Pay_Tax_Can.Province      = &PAY_TAX_CAN.PROVINCE
  let $Pay_Tax_Can.Tax_Class_Can = &PAY_TAX_CAN.TAX_CLASS_CAN

  evaluate &PAY_TAX_CAN.TAX_CLASS_CAN
   when = 'CPR'
   when = 'QPR'
   when = 'EIR'
   when = 'QIR'
   when = 'HTX'

         let #CTX_Count = 0

         do DETERMINE-ER-CTX-ENTITY

         WHILE (#CTX_COUNT < #E)

            GET $Prorate_Ind
                $Business_Unit_HR
                $SetID_Dept
                $Deptid
                $CTX_Province
                $CTX_Tax_Class_Can
                #Fiscal_Year
                #Accounting_Period
                $Acct_Cd
                #CTX_Amount    From STORE_DIST(#CTX_COUNT)
                STORE_PRORATE_IND
                STORE_BU_HR
                STORE_SETID
                STORE_DEPTID
                STORE_PROVINCE
                STORE_TAXCLASSCAN
                STORE_FISCAL_YEAR
                STORE_ACCOUNTING_PERIOD
                STORE_ACCT_CD
                STORE_CTX_AMOUNT

            do Retrieve_BusUnit_By_BU_Dept

            if #CTX_Amount <> 0
               and ($CTX_Province      = $Pay_Tax_Can.Province)
               and ($CTX_Tax_Class_Can = $Pay_Tax_Can.Tax_Class_Can)

               let #Monetary_Amount = #CTX_Amount

               do GET-ACCT-PERIOD-END-DT
               do GET-CHARTKEYS
               add #Monetary_Amount to #Total_ER_CTX_Liab

               ARRAY-ADD #Monetary_Amount to
                         STORE_DIST(#CTX_Count) STORE_ER_CTX_LIAB

               do FORMAT-ACCOUNTING-DATE
               do GET-OFF-SET-ACCOUNT
               do WRITE-GL-TRANSACTION
               do WRITE-CTX-LIAB-AP
            end-if

            add 1 to #CTX_Count

         END-WHILE

         add &PAY_TAX_CAN.TAX_CUR to #Total_Employer_CTX_Liab

  end-evaluate

  evaluate &PAY_TAX_CAN.TAX_CLASS_CAN
   when = 'T4A'
   when = 'CIT'
   when = 'EIE'
   when = 'QIE'
   when = 'QIT'
   when = 'CPP'
   when = 'QPP'
   when = 'PYT'
   when = 'RV2'

      let #CTX_Ct = 0

      do DETERMINE-EE-CTX-ENTITY

      let #EE_CTX_Remainder = &PAY_TAX_CAN.TAX_CUR

      if #prorate_Ern_Rows > 0

          WHILE #CTX_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab    From STORE_DIST(#CTX_CT)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             if $Prorate_Ind = 'Y'

                 do Retrieve_BusUnit_By_BU_Dept

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do GET-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows           = #Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern = #Total_Employer_Ern
                        do DISTRIBUTE-EE-CTX-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-CTX-LIAB-AP
                    end-if

                 else
                    if #EE_CTX_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do GET-CHARTKEYS

                       add 1 to #EE_Count_TC
                       let #Monetary_Amount = #EE_CTX_Remainder
                       let #EE_CTX_Remainder = 0
                       add #Monetary_Amount to #Total_EE_CTX_Liab

                       ARRAY-ADD #Monetary_Amount to
                                 STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                       do WRITE-CTX-LIAB-AP
                    end-if
                 end-if
             end-if

             add 1 to #CTX_Ct

          END-WHILE
      end-if

      let #CTX_Ct        = 0
      let #EE_Count_TC   = 0

      if #Not_Prorate_Ern_Rows > 0 and #EE_CTX_Remainder <> 0

          WHILE #CTX_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab    From STORE_DIST(#CTX_CT)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             if $Prorate_Ind = 'N'

                 do Retrieve_BusUnit_By_BU_Dept

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do INIT-CHARTKEYS

                    let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

                    if #Avail_Funding <> 0
                        let #Cmp_Ern_Rows           = #Not_Prorate_Ern_Rows
                        let #Cmp_Total_Employer_Ern = #Total_NP_Employer_Ern
                        do DISTRIBUTE-EE-CTX-AMOUNT

                        ARRAY-ADD #Monetary_Amount to
                                  STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

                        add #Monetary_Amount to #Total_NP_DedTax_Amt
                        do FORMAT-ACCOUNTING-DATE
                        do GET-OFF-SET-ACCOUNT
                        do WRITE-GL-TRANSACTION
                        do WRITE-CTX-LIAB-AP
                    end-if

                 else
                    if #EE_CTX_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_NP_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do INIT-CHARTKEYS

                       add 1 to #EE_Count_TC
                       let #Monetary_Amount = #EE_CTX_Remainder
                       let #EE_CTX_Remainder = 0
                       add #Monetary_Amount to #Total_EE_CTX_Liab

                       ARRAY-ADD #Monetary_Amount to
                                 STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

                       add #Monetary_Amount to #Total_NP_DedTax_Amt
                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                       do WRITE-CTX-LIAB-AP
                    end-if
                 end-if
             end-if

             add 1 to #CTX_Ct

          END-WHILE
      end-if

      if #not_prorate_Ern_Rows = 0 and
         #prorate_Ern_Rows     = 0 and
         #EE_CTX_Remainder    <> 0 and
         $DefCK_Found          = 'Y'

          GET $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period
              $Acct_Cd From STORE_DIST(#DefCK_Count)
              STORE_BU_HR
              STORE_SETID
              STORE_DEPTID
              STORE_FISCAL_YEAR
              STORE_ACCOUNTING_PERIOD
              STORE_ACCT_CD

          do Retrieve_BusUnit_By_BU_Dept
          do GET-ACCT-PERIOD-END-DT
          do GET-CHARTKEYS

          let #Monetary_Amount = #EE_CTX_Remainder
          let #EE_CTX_Remainder = 0
          add #Monetary_Amount to #Total_EE_CTX_Liab

          ARRAY-ADD #Monetary_Amount to
                    STORE_DIST(#DefCK_Count) STORE_EE_CTX_LIAB

          do FORMAT-ACCOUNTING-DATE
          do GET-OFF-SET-ACCOUNT
          do WRITE-GL-TRANSACTION
          do WRITE-CTX-LIAB-AP
      end-if

      if #EE_CTX_Remainder <> 0

          let #CTX_Ct        = 0

          while #CTX_Ct < #E

             GET $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab    From STORE_DIST(#CTX_CT)
                 STORE_PRORATE_IND
                 STORE_BU_HR
                 STORE_SETID
                 STORE_DEPTID
                 STORE_FISCAL_YEAR
                 STORE_ACCOUNTING_PERIOD
                 STORE_ACCT_CD
                 STORE_EARNINGS
                 STORE_EE_Ded_Liab
                 STORE_EE_Tax_Liab
                 STORE_EE_Ctx_Liab

             let #Avail_Funding = #Ern_Amount - (#EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab)

             if #Avail_Funding <> 0
                 do Retrieve_BusUnit_By_BU_Dept

                 do GET-ACCT-PERIOD-END-DT
                 if $Prorate_Ind = 'Y'
                     do GET-CHARTKEYS
                 else
                     do INIT-CHARTKEYS
                 end-if

                 let #Monetary_Amount = #EE_CTX_Remainder

                 if #Avail_Funding > 0
                     if #Avail_Funding < #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 else
                     if #Avail_Funding > #Monetary_Amount
                         let #Monetary_Amount = #Avail_Funding
                     end-if
                 end-if

                 let #EE_CTX_Remainder = #EE_CTX_Remainder - #Monetary_Amount
                 add #Monetary_Amount to #Total_EE_CTX_Liab

                 ARRAY-ADD #Monetary_Amount to
                           STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

                 do FORMAT-ACCOUNTING-DATE
                 do GET-OFF-SET-ACCOUNT
                 do WRITE-GL-TRANSACTION
                 do WRITE-CTX-LIAB-AP
             end-if

             add 1 to #CTX_Ct

          end-while
      end-if

      if #EE_CTX_Remainder <> 0

          let #CTX_Ct        = 0

          GET $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period From STORE_DIST(#CTX_CT)
              STORE_BU_HR
              STORE_SETID
              STORE_DEPTID
              STORE_FISCAL_YEAR
              STORE_ACCOUNTING_PERIOD

          do Retrieve_BusUnit_By_BU_Dept
          do GET-ACCT-PERIOD-END-DT
          do INIT-CHARTKEYS

          let #Monetary_Amount = #EE_CTX_Remainder
          let #EE_CTX_Remainder = 0
          add #Monetary_Amount to #Total_EE_CTX_Liab

          ARRAY-ADD #Monetary_Amount to
                    STORE_DIST(#CTX_CT) STORE_EE_CTX_LIAB

          add #Monetary_Amount to #Total_NP_DedTax_Amt
          do FORMAT-ACCOUNTING-DATE
          do GET-OFF-SET-ACCOUNT
          do WRITE-GL-TRANSACTION
          do WRITE-CTX-LIAB-AP
      end-if

      add &PAY_TAX_CAN.TAX_CUR to #Total_Employee_CTX_Liab
  end-evaluate

FROM  PS_PAY_TAX_CAN PAY_TAX_CAN
WHERE PAY_TAX_CAN.COMPANY          = $Company
  AND PAY_TAX_CAN.PAYGROUP         = $PayGroup
  AND PAY_TAX_CAN.PAY_END_DT       = $Ctax-end-dt
  AND PAY_TAX_CAN.OFF_CYCLE        = $Check.Off_Cycle
  AND PAY_TAX_CAN.PAGE_NUM         = #Check.Page
  AND PAY_TAX_CAN.LINE_NUM         = #Check.Line
  AND PAY_TAX_CAN.SEPCHK           = #Check.Sepchk
ORDER BY PAY_TAX_CAN.PROVINCE,
         PAY_TAX_CAN.TAX_CLASS_CAN
end-SELECT

end-procedure

!****************************************************************************
! WRITE-CTX-LIAB-AP                                                         *
! Writes out the PAY_CTX_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-CTX-LIAB-AP

  if #Monetary_Amount_AP <> 0 and #pay_check_loop = 1

     do WRITE-CTX-LIAB-AP-RECORD

  end-if

end-procedure

!****************************************************************************
! WRITE-CTX-LIAB-AP-RECORD                                                  *
! Writes out the PAY_CTX_LIAB_AP record.                                    *
!****************************************************************************
begin-procedure WRITE-CTX-LIAB-AP-RECORD

  if $Company                   = $Prev_Company          and
     $PayGroup                  = $Prev_PayGroup         and
     $Pay_End_Dt                = $Prev_Pay_End_Dt       and
     $Check.Off_Cycle           = $Prev_Check.Off_Cycle  and
     #Check.Page                = #Prev_Check.Page       and
     #Check.Line                = #Prev_Check.Line       and
     #Check.Sepchk              = #Prev_Check.Sepchk     and
     &PAY_TAX_CAN.PROVINCE      = $Prev_Province         and
     &PAY_TAX_CAN.TAX_CLASS_CAN = $Prev_Tax_Class_Can

     add 1 to #Can_Tax_Seqno
  else
     move 1                          to #Can_Tax_Seqno
     move $Company                   to $Prev_Company
     move $PayGroup                  to $Prev_PayGroup
     move $Pay_End_Dt                to $Prev_Pay_End_Dt
     move $Check.Off_Cycle           to $Prev_Check.Off_Cycle
     move #Check.Page                to #Prev_Check.Page
     move #Check.Line                to #Prev_Check.Line
     move #Check.Sepchk              to #Prev_Check.Sepchk
     move &PAY_TAX_CAN.PROVINCE      to $Prev_Province
     move &PAY_TAX_CAN.TAX_CLASS_CAN to $Prev_Tax_Class_Can
  end-if

  move #Check.Page          to $Check.Page
  move #Check.Line          to $Check.Line
  move #Check.Sepchk        to $Check.Sepchk
  move #Can_Tax_Seqno       to $Can_Tax_Seqno
  move #Monetary_Amount_AP  to $Monetary_Amount_AP

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-CTX-LIAB-AP-RECORD'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_CTX_LIAB_AP'||
                        ', COMPANY '||$Company||
                        ', PAYGROUP '||$Paygroup||
                        ', PAY_END_DT '||$Pay_End_Dt||
                        ', OFF_CYCLE '||$Check.Off_Cycle||
                        ', PAGE_NUM '||$Check.Page||
                        ', LINE_NUM '||$Check.Line||
                        ', SEPCHK '||$Check.Sepchk||
                        ', PROVINCE '||$Pay_Tax_Can.Province||
                        ', TAX_CLASS_CAN '||$Pay_Tax_Can.Tax_Class_Can||
                        ', SEQNO '||$Can_Tax_Seqno||
                        ', TAX_CUR '||$Monetary_Amount_AP||
                        ', ACCOUNT '||$Account||
                        ', DEPTID_CF '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT '||$AltAcct ||
                        ', BUDGET_REF '||$Budget_Ref ||
                        ', CHARTFIELD1 '||$Chartfield1 ||
                        ', CHARTFIELD2 '||$Chartfield2 ||
                        ', CHARTFIELD3 '||$Chartfield3 ||
                        ', AFFILIATE_INTRA1 '||$Affiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$Affiliate_intra2
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-CTX-LIAB-AP-RECORD'
  let $Msg_MsgData2   = 'Refer to log for key values'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_PAY_CTX_LIAB_AP
( COMPANY,
  PAYGROUP,
  PAY_END_DT,
  OFF_CYCLE,
  PAGE_NUM,
  LINE_NUM,
  SEPCHK,
  PROVINCE,
  TAX_CLASS_CAN,
  SEQNO,
  TAX_CUR,
  ACCOUNT,
  DEPTID_CF,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  LINE_NBR)
VALUES($Company,
       $Paygroup,
       $Pay_End_Dt,
       $Check.Off_Cycle,
       #Check.Page,
       #Check.Line,
       #Check.Sepchk,
       $Pay_Tax_Can.Province,
       $Pay_Tax_Can.Tax_Class_Can,
       #Can_Tax_Seqno,
       #Monetary_Amount_AP,
       $Account,
       $GL_DeptID,
       $Project_ID,
       $Product,
       $Fund_Code,
       $Program_Code,
       $Class_Fld,
       $Affiliate,
       $Operating_Unit,
       $AltAcct,
       $Budget_Ref,
       $Chartfield1,
       $Chartfield2,
       $Chartfield3,
       $Affiliate_intra1,
       $Affiliate_intra2,
       #gl_entry_line)
end-SQL

let #Monetary_Amount_AP = 0

end-procedure

!****************************************************************************
! DETERMINE-ER-CTX-ENTITY                                                   *
! Determines the offset activity for the current employer tax by tax class. *
!****************************************************************************
begin-procedure DETERMINE-ER-CTX-ENTITY

     evaluate &PAY_TAX_CAN.TAX_CLASS_CAN

       when = 'CPR'  !CPP-ER

         move 'CPR' to $Activity

         break
       when = 'QPR'  !QPP-ER

         move 'QPR' to $Activity

         break
       when = 'EIR'  !UI Employer

         move 'UIR' to $Activity

         break
       when = 'QIR'  !UI Employer

         move 'QIR' to $Activity

         break
       when = 'HTX'  !Provincial Health Tax

         move 'HTX' to $Activity
     end-evaluate

end-procedure
!****************************************************************************
! DETERMINE-EE-CTX-ENTITY                                                   *
! Determines the offset activity for the current employee tax by tax class. *
!****************************************************************************
begin-procedure DETERMINE-EE-CTX-ENTITY

     evaluate &PAY_TAX_CAN.TAX_CLASS_CAN

        when = 'CIT'  !CIT

           move 'CIT' to $Activity

           break
        when = 'QIT'  !QIT

           move 'QIT' to $Activity

           break
        when = 'CPP'  !CPP

           move 'CPP' to $Activity

           break
        when = 'QPP'  !QPP

           move 'QPP' to $Activity

           break
        when = 'EIE'  !UI Employee

           move 'UIE' to $Activity

           break
        when = 'QIE'  !UI Employee

           move 'QIE' to $Activity

           break
        when = 'T4A'  !T4A

           move 'T4A' to $Activity

           break
        when = 'PYT'  !Payroll Tax

           move 'PYT' to $Activity

           break
        when = 'RV2'  !Releve 2

           move 'RV2' to $Activity

        end-evaluate

end-procedure
!****************************************************************************
! DISTRIBUTE-EE-CTX-AMOUNT                                                  *
! Prorates the current employee tax over the total employer earnings.       *
!****************************************************************************
begin-procedure DISTRIBUTE-EE-CTX-AMOUNT

  add 1 to #EE_Count_TC

  if #EE_Count_TC < #Cmp_Ern_Rows

     if #Cmp_Total_Employer_Ern = 0

        let #Monetary_Amount = 0

     else

        let #Monetary_Amount = (&PAY_TAX_CAN.TAX_CUR *
                              (#Ern_Amount/#Cmp_Total_Employer_Ern))
     end-if

     let #Monetary_Amount  = round(#Monetary_Amount,2)
  else

     let #Monetary_Amount = #EE_CTX_Remainder
  end-if

  if #Avail_Funding > 0
      if #Avail_Funding < #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  else
      if #Avail_Funding > #Monetary_Amount
          let #Monetary_Amount = #Avail_Funding
      end-if
  end-if

  let #EE_CTX_Remainder = #EE_CTX_Remainder - #Monetary_Amount
  add #Monetary_Amount to #Total_EE_CTX_Liab

end-procedure
!****************************************************************************
! PROCESS-CHECK                                                             *
! This procedure determines how to process the current checks net pay.      *
!****************************************************************************
begin-procedure PROCESS-CHECK

    move 0 to #CheckAmount
    move 0 to #DepositAmount
    move 0 to #CheckReversalAmount
    move 0 to #DepositReversalAmount
    move 1 to #CheckAdvRatio

    do Check-Refund-Amount

    evaluate $Check.PayCheck_Option

      when = 'C'
      when = 'M'

         move #Check.Net_Pay to #CheckAmount

         if #CheckAmount <> 0

            if #Not_Prorate_Ern_Rows > 0
                let #NP_NetPay_Dist = #Total_NP_Employer_Ern - #Total_NP_DedTax_Amt
            else
                let #NP_NetPay_Dist = 0
            end-if

            let #NetPay_Dist = #CheckAmount - #NP_NetPay_Dist
            move 'PAY'         to $Activity

            do DISTRIBUTE-NETPAY
         end-if

         break
      when = 'A'
      when = '&'

         do GET-PAY-DISTRIBUTION

         if #Not_Prorate_Ern_Rows > 0
             let #Total_NP_Net_Pay = #Total_NP_Employer_Ern - #Total_NP_DedTax_Amt
         else
             let #Total_NP_Net_Pay = 0
         end-if

         if #CheckAmount <> 0

            let #CheckAdvRatio = #CheckAmount / (#CheckAmount + #DepositAmount)

            if #Not_Prorate_Ern_Rows > 0
                let #NP_NetPay_Dist = Round(#Total_NP_Net_Pay * #CheckAdvRatio,2)
            else
                let #NP_NetPay_Dist = 0
            end-if
            let #NP_NetPay_Dist_save = #NP_NetPay_Dist

            let #NetPay_Dist = #CheckAmount - #NP_NetPay_Dist
            move 'PAY'        to $Activity

            do DISTRIBUTE-NETPAY
         end-if

         if #DepositAmount <> 0

            let #CheckAdvRatio = #DepositAmount / (#CheckAmount + #DepositAmount)

            if #Not_Prorate_Ern_Rows > 0
                let #NP_NetPay_Dist = #Total_NP_Net_Pay - #NP_NetPay_Dist_save
            else
                let #NP_NetPay_Dist = 0
            end-if

            let #NetPay_Dist = #DepositAmount - #NP_NetPay_Dist
            move 'DIR'             to $Activity

            do DISTRIBUTE-NETPAY
         end-if

         break
      when = 'R'

         if $Check.Paycheck_Adjust = 'N'

            do Process-Reversal

            if #Not_Prorate_Ern_Rows > 0
                let #Total_NP_Net_Pay = #Total_NP_Employer_Ern - #Total_NP_DedTax_Amt
            else
                let #Total_NP_Net_Pay = 0
            end-if

            if #CheckReversalAmount <> 0

               let #CheckAdvRatio = #CheckReversalAmount / (#CheckReversalAmount + #DepositReversalAmount)

               if #Not_Prorate_Ern_Rows > 0
                   let #NP_NetPay_Dist = Round(#Total_NP_Net_Pay * #CheckAdvRatio,2)
               else
                   let #NP_NetPay_Dist = 0
               end-if
               let #NP_NetPay_Dist_save = #NP_NetPay_Dist

               let #NetPay_Dist = #CheckReversalAmount - #NP_NetPay_Dist
               move 'PAY'                  to $Activity

               do DISTRIBUTE-NETPAY
            end-if

            if #DepositReversalAmount <> 0

               let #CheckAdvRatio = #DepositReversalAmount / (#CheckReversalAmount + #DepositReversalAmount)

               if #Not_Prorate_Ern_Rows > 0
                   let #NP_NetPay_Dist = #Total_NP_Net_Pay - #NP_NetPay_Dist_save
               else
                   let #NP_NetPay_Dist = 0
               end-if

               let #NetPay_Dist = #DepositReversalAmount - #NP_NetPay_Dist
               move 'DIR'                  to $Activity

               do DISTRIBUTE-NETPAY
            end-if
         else

            move #Check.Net_Pay to #CheckReversalAmount

            if #CheckReversalAmount <> 0

               if #Not_Prorate_Ern_Rows > 0
                   let #NP_NetPay_Dist = #Total_NP_Employer_Ern - #Total_NP_DedTax_Amt
               else
                   let #NP_NetPay_Dist = 0
               end-if

               let #NetPay_Dist = #CheckReversalAmount - #NP_NetPay_Dist
               move 'PAY'                  to $Activity

               do DISTRIBUTE-NETPAY
            end-if
         end-if
    end-evaluate

    do ADJUST-EXP-LIAB

end-procedure

!****************************************************************************
begin-procedure Check-Refund-Amount

  let $Refund_to_Home = 'N'
  let #Net_Ct   = 0

  Get #EE_Ded_Liab
      #EE_Tax_Liab
      #EE_Ctx_Liab
                   From Store_Dist(#Net_Ct)
      Store_EE_Ded_Liab
      Store_EE_Tax_Liab
      Store_EE_Ctx_Liab

  let #Sum_Liab = #EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab

  if #Sum_liab <> 0
      let $Refund_to_Home = 'Y'
  end-if

end-procedure

!****************************************************************************
! DISTRIBUTE-NETPAY                                                         *
! distributes the current net pay over the earnings accounts.               *
!****************************************************************************
begin-procedure DISTRIBUTE-NETPAY

  move 'C' to $DrCr
  move 'L' to $Acct_Type

  let #Net_Ct   = 0
  let #NP_Count = 0
  let #Total_ER_NetPay_Liab = 0


  if (#Not_Prorate_Ern_Rows > 0 or #Prorate_Ern_Rows > 0)
     and $Refund_to_Home = 'N'

      let #NetPay_Remainder = #NetPay_Dist

      if #Prorate_Ern_Rows > 0

          while #Net_Ct < #E

             Get $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab
                 #ER_Ded_Exp
                 #ER_Tax_Exp
                 #ER_Ctx_Exp
                 #ER_Ded_Liab
                 #ER_Tax_Liab
                 #ER_Ctx_Liab
                 #PAY_Prorate_Ern_Amt
                 #PAY_Sum_Liab
                              From Store_Dist(#Net_Ct)
                 Store_Prorate_Ind
                 Store_BU_HR
                 Store_SetID
                 Store_Deptid
                 Store_Fiscal_Year
                 Store_Accounting_Period
                 Store_Acct_Cd
                 Store_Earnings
                 Store_EE_Ded_Liab
                 Store_EE_Tax_Liab
                 Store_EE_Ctx_Liab
                 Store_Ded_Amount
                 Store_Tax_Amount
                 Store_CTX_Amount
                 Store_ER_Ded_Liab
                 Store_ER_Tax_Liab
                 Store_ER_Ctx_Liab
                 Store_PAY_Prorate_Ern_Amt
                 Store_PAY_Sum_Liab

             do Retrieve_BusUnit_By_BU_Dept

             move #Accounting_Period to #Save_Accting_Period
             move #Fiscal_Year to #Save_Fiscal_Year

             if $Prorate_Ind = 'Y'

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do GET-CHARTKEYS

                    let #Cmp_Ern_Rows           = #Prorate_Ern_Rows
                    let #Cmp_Total_Employer_Ern = #Total_Employer_Ern
                    let #Cal_NetPay_Dist        = #NetPay_Dist
                    do DISTRIBUTE-NETPAY-AMOUNT

                    do FORMAT-ACCOUNTING-DATE
                    do GET-OFF-SET-ACCOUNT
                    do WRITE-GL-TRANSACTION

                 else
                    if #NetPay_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do GET-CHARTKEYS

                       add 1 to #NP_Count
                       let #Monetary_Amount = #NetPay_Remainder
                       let #NetPay_Remainder = 0
                       add #Monetary_Amount to #Total_ER_NetPay_Liab

                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                    end-if
                 end-if
             end-if

             add 1 to #Net_Ct

          end-while
      end-if

      add #NetPay_Dist to #Total_Employee_Net_Liab

      let #Net_Ct   = 0
      let #NP_Count = 0
      let #NetPay_Remainder = #NP_NetPay_Dist

      if #Not_Prorate_Ern_Rows > 0

          while #Net_Ct < #E

             Get $Prorate_Ind
                 $Business_Unit_HR
                 $SetID_Dept
                 $Deptid
                 #Fiscal_Year
                 #Accounting_Period
                 $Acct_Cd
                 #Ern_Amount
                 #EE_Ded_Liab
                 #EE_Tax_Liab
                 #EE_Ctx_Liab
                 #ER_Ded_Exp
                 #ER_Tax_Exp
                 #ER_Ctx_Exp
                 #ER_Ded_Liab
                 #ER_Tax_Liab
                 #ER_Ctx_Liab
                 #PAY_Prorate_Ern_Amt
                 #PAY_Sum_Liab
                              From Store_Dist(#Net_Ct)
                 Store_Prorate_Ind
                 Store_BU_HR
                 Store_SetID
                 Store_Deptid
                 Store_Fiscal_Year
                 Store_Accounting_Period
                 Store_Acct_Cd
                 Store_Earnings
                 Store_EE_Ded_Liab
                 Store_EE_Tax_Liab
                 Store_EE_Ctx_Liab
                 Store_Ded_Amount
                 Store_Tax_Amount
                 Store_CTX_Amount
                 Store_ER_Ded_Liab
                 Store_ER_Tax_Liab
                 Store_ER_Ctx_Liab
                 Store_PAY_Prorate_Ern_Amt
                 Store_PAY_Sum_Liab

             do Retrieve_BusUnit_By_BU_Dept

             move #Accounting_Period to #Save_Accting_Period
             move #Fiscal_Year to #Save_Fiscal_Year

             if $Prorate_Ind = 'N'

                 if #Ern_Amount <> 0

                    do GET-ACCT-PERIOD-END-DT
                    do INIT-CHARTKEYS

                    let #Cmp_Ern_Rows           = #Not_Prorate_Ern_Rows
                    let #Cmp_Total_Employer_Ern = #Total_NP_Employer_Ern
                    let #Cal_NetPay_Dist        = #NP_NetPay_Dist
                    do DISTRIBUTE-NETPAY-AMOUNT

                    do FORMAT-ACCOUNTING-DATE
                    do GET-OFF-SET-ACCOUNT
                    do WRITE-GL-TRANSACTION

                 else
                    if #NetPay_Remainder <> 0    and
                       ($Zero_Gross = 'Y' or
                        #Total_Employer_Ern = 0)

                       do GET-ACCT-PERIOD-END-DT
                       do INIT-CHARTKEYS

                       add 1 to #NP_Count
                       let #Monetary_Amount = #NetPay_Remainder
                       let #NetPay_Remainder = 0
                       add #Monetary_Amount to #Total_ER_NetPay_Liab

                       do FORMAT-ACCOUNTING-DATE
                       do GET-OFF-SET-ACCOUNT
                       do WRITE-GL-TRANSACTION
                    end-if
                 end-if
             end-if

             add 1 to #Net_Ct

          end-while
      end-if

      add #NP_NetPay_Dist to #Total_Employee_Net_Liab
  else
      let #NetPay_Remainder = #NetPay_Dist

      if #not_prorate_Ern_Rows = 0 and
         #prorate_Ern_Rows     = 0 and
         #NetPay_Remainder    <> 0 and
         $DefCK_Found = 'Y'

          Get $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period
              $Acct_Cd
          From Store_Dist(#DefCK_Count)
              Store_BU_HR
              Store_SetID
              Store_Deptid
              Store_Fiscal_Year
              Store_Accounting_Period
              Store_Acct_Cd

          do Retrieve_BusUnit_By_BU_Dept

          move #Accounting_Period to #Save_Accting_Period
          move #Fiscal_Year to #Save_Fiscal_Year

          do GET-ACCT-PERIOD-END-DT
          do GET-CHARTKEYS

      else
          let #Net_Ct   = 0

          Get $Business_Unit_HR
              $SetID_Dept
              $Deptid
              #Fiscal_Year
              #Accounting_Period
          From Store_Dist(#Net_Ct)
              Store_BU_HR
              Store_SetID
              Store_Deptid
              Store_Fiscal_Year
              Store_Accounting_Period

          do Retrieve_BusUnit_By_BU_Dept

          move #Accounting_Period to #Save_Accting_Period
          move #Fiscal_Year to #Save_Fiscal_Year

          do GET-ACCT-PERIOD-END-DT
          do INIT-CHARTKEYS
      end-if

      let #Monetary_Amount = #NetPay_Remainder
      let #NetPay_Remainder = 0
      add #Monetary_Amount to #Total_ER_NetPay_Liab

      do FORMAT-ACCOUNTING-DATE
      do GET-OFF-SET-ACCOUNT
      do WRITE-GL-TRANSACTION

      add #NetPay_Dist to #Total_Employee_Net_Liab
  end-if

end-procedure
!****************************************************************************
! ADJUST-EXP-LIAB                                                           *
! invoke COMPARE-EXP-LIAB routine for each account entry                    *
!****************************************************************************
begin-procedure ADJUST-EXP-LIAB

  move 'C' to $DrCr
  move 'L' to $Acct_Type

  let #Net_Ct   = 0

  while #Net_Ct < #E

     Get $Prorate_Ind
         $Business_Unit_HR
         $SetID_Dept
         $Deptid
         #Fiscal_Year
         #Accounting_Period
         $Acct_Cd
         #Ern_Amount
         #EE_Ded_Liab
         #EE_Tax_Liab
         #EE_Ctx_Liab
         #ER_Ded_Exp
         #ER_Tax_Exp
         #ER_Ctx_Exp
         #ER_Ded_Liab
         #ER_Tax_Liab
         #ER_Ctx_Liab
                      From Store_Dist(#Net_Ct)
         Store_Prorate_Ind
         Store_BU_HR
         Store_SetID
         Store_Deptid
         Store_Fiscal_Year
         Store_Accounting_Period
         Store_Acct_Cd
         Store_Earnings
         Store_EE_Ded_Liab
         Store_EE_Tax_Liab
         Store_EE_Ctx_Liab
         Store_Ded_Amount
         Store_Tax_Amount
         Store_CTX_Amount
         Store_ER_Ded_Liab
         Store_ER_Tax_Liab
         Store_ER_Ctx_Liab

      do Retrieve_BusUnit_By_BU_Dept

      move #Accounting_Period to #Save_Accting_Period
      move #Fiscal_Year to #Save_Fiscal_Year

      do COMPARE-EXP-LIAB

      add 1 to #Net_Ct

  end-while

end-procedure
!****************************************************************************
! COMPARE-EXP-LIAB                                                          *
! Compares the ER expense to the ER liability for each Acct Cd, and writes  *
! adjusting ER liability entries if necessary so that balance is maintained *
! for all chartfields except Account.                                       *
!****************************************************************************
begin-procedure COMPARE-EXP-LIAB

  move $Activity to $SaveActivity

  let #ER_Ded_Exp  = Round(#ER_Ded_Exp,2)
  let #ER_Ded_Liab = Round(#ER_Ded_Liab,2)

  if #ER_Ded_Exp <> #ER_Ded_Liab

     let #ER_Ded_Diff = #ER_Ded_Exp - #ER_Ded_Liab

     if #ER_Ded_Diff < -0.25 or #ER_Ded_Diff > 0.25

        move #Check.Check             to $Check          9999999999
        move #ER_Ded_Exp              to $ER_Ded_Exp     9999999.99
        move #ER_Ded_Liab             to $ER_Ded_Liab    9999999.99

        let $Msg = '   Warning-Employer Deduction Expense does not match'
                   || ' Employer Deduction Liability for PAYCHECK_NBR '
                   || $Check || ' and Account Code ' || $Acct_Cd

        display $Msg

        let $Msg = '         ER Deduction Expense : ' || $ER_Ded_Exp
                   || '   ER Deduction Liability : ' || $ER_Ded_Liab

        display $Msg

         do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
         let $Msg_MsgData1 = 'PAYCHECK_NBR:'|| $Check
         let $Msg_MsgData2 = 'Acct:'|| $Acct_Cd
         let $Msg_MsgData3 = 'Exp:'|| $ER_Ded_Exp ||' Liab:'||$ER_Ded_Liab
         let $Msg_MsgID    = '000530'
         do PUT-PAY-MESSAGE-TO-ARRAY

     end-if

     let #Monetary_Amount   = #ER_Ded_Diff
     let #Accounting_Period = #Save_Accting_Period
     let #Fiscal_Year       = #Save_Fiscal_Year
     do GET-ACCT-PERIOD-END-DT
     if $Prorate_Ind = 'Y'
         do GET-CHARTKEYS
     else
         do INIT-CHARTKEYS
     end-if
     do FORMAT-ACCOUNTING-DATE
     move 'DED' to $Activity
     do GET-OFF-SET-ACCOUNT
     do WRITE-GL-TRANSACTION

  end-if

  let #ER_Tax_Exp  = Round(#ER_Tax_Exp,2)
  let #ER_Tax_Liab = Round(#ER_Tax_Liab,2)

  if #ER_Tax_Exp <> #ER_Tax_Liab

     let #ER_Tax_Diff = #ER_Tax_Exp - #ER_Tax_Liab

     if #ER_Tax_Diff < -0.25 or #ER_Tax_Diff > 0.25

        move #Check.Check             to $Check          9999999999
        move #ER_Tax_Exp              to $ER_Tax_Exp     9999999.99
        move #ER_Tax_Liab             to $ER_Tax_Liab    9999999.99

        let $Msg = '   Warning-Employer Tax Expense does not match'
                   || ' Employer Tax Liability for PAYCHECK_NBR '
                   || $Check || ' and Account Code ' || $Acct_Cd

        display $Msg

        let $Msg = '         ER Tax Expense : ' || $ER_Tax_Exp
                   || '   ER Tax Liability : ' || $ER_Tax_Liab

        display $Msg

        do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
        let $Msg_MsgData1  = 'PAYCHECK_NBR:'|| $Check
        let $Msg_MsgData2  = 'Acct:'|| $Acct_Cd
        let $Msg_MsgData3  = 'Exp:'|| $ER_Tax_Exp || ' Liab:'||$ER_Tax_Liab
        let $Msg_MsgID = '000531'
        do PUT-PAY-MESSAGE-TO-ARRAY

     end-if

     let #Monetary_Amount   = #ER_Tax_Diff
     let #Accounting_Period = #Save_Accting_Period
     let #Fiscal_Year       = #Save_Fiscal_Year
     do GET-ACCT-PERIOD-END-DT
     if $Prorate_Ind = 'Y'
         do GET-CHARTKEYS
     else
         do INIT-CHARTKEYS
     end-if
     do FORMAT-ACCOUNTING-DATE
     move 'FMR' to $Activity      !use Federal Medicare for adjustment offset account
     do GET-OFF-SET-ACCOUNT
     do WRITE-GL-TRANSACTION

  end-if

  let #ER_Ctx_Exp  = Round(#ER_Ctx_Exp,2)
  let #ER_Ctx_Liab = Round(#ER_Ctx_Liab,2)

  if #ER_Ctx_Exp <> #ER_Ctx_Liab

     let #ER_Ctx_Diff = #ER_Ctx_Exp - #ER_Ctx_Liab

     if #ER_Ctx_Diff < -0.25 or #ER_Ctx_Diff > 0.25

        move #Check.Check             to $Check          9999999999
        move #ER_Ctx_Exp              to $ER_Ctx_Exp     9999999.99
        move #ER_Ctx_Liab             to $ER_Ctx_Liab    9999999.99

        let $Msg = '   Warning-Employer Tax Expense does not match'
                   || ' Employer Tax Liability for PAYCHECK_NBR '
                   || $Check || ' and Account Code ' || $Acct_Cd

        display $Msg

        let $Msg = '         ER Tax Expense : ' || $ER_Ctx_Exp
                   || '   ER Tax Liability : ' || $ER_Ctx_Liab

        display $Msg

        do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
        let $Msg_MsgData1  = 'PAYCHECK_NBR:'|| $Check
        let $Msg_MsgData2  = 'Acct:'|| $Acct_Cd
        let $Msg_MsgData3  = 'Exp:'|| $ER_Ctx_Exp ||' Liab:'||$ER_Ctx_Liab
        let $Msg_MsgID = '000532'
        do PUT-PAY-MESSAGE-TO-ARRAY

     end-if

     let #Monetary_Amount   = #ER_Ctx_Diff
     let #Accounting_Period = #Save_Accting_Period
     let #Fiscal_Year       = #Save_Fiscal_Year
     do GET-ACCT-PERIOD-END-DT
     if $Prorate_Ind = 'Y'
         do GET-CHARTKEYS
     else
         do INIT-CHARTKEYS
     end-if
     do FORMAT-ACCOUNTING-DATE
     move 'UIR' to $Activity      !use Employer EI/UI for adjustment offset account
     do GET-OFF-SET-ACCOUNT
     do WRITE-GL-TRANSACTION

  end-if

  move $SaveActivity to $Activity

end-procedure
!****************************************************************************
! DISTRIBUTE-NETPAY-AMOUNT                                                  *
! Prorates the net pay over the total employer earnings.                    *
!****************************************************************************
begin-procedure DISTRIBUTE-NETPAY-AMOUNT

  add 1 to #NP_Count

  if #NP_Count < #Cmp_Ern_Rows

     if #Cmp_Total_Employer_Ern = 0

        let #Monetary_Amount = 0

     else

        let #Monetary_Amount = #Cal_NetPay_Dist *
                               (#Ern_Amount/#Cmp_Total_Employer_Ern)

        if #CheckAdvRatio = 1 or $Activity = 'PAY'

           let #Prorate_Ern_Amount = Round(#Ern_Amount * #CheckAdvRatio,2)
           let #Sum_Liab = #EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab
           let #Sum_Liab = Round(#Sum_Liab * #CheckAdvRatio,2)

           if $Activity = 'PAY'
              ARRAY-ADD #Prorate_Ern_Amount to Store_Dist(#Net_Ct) Store_PAY_Prorate_Ern_Amt
              ARRAY-ADD #Sum_Liab to Store_Dist(#Net_Ct) Store_PAY_Sum_Liab
           end-if

        else

           let #Prorate_Ern_Amount = #Ern_Amount - #PAY_Prorate_Ern_Amt
           let #Sum_Liab = #EE_Ded_Liab + #EE_Tax_Liab + #EE_Ctx_Liab - #PAY_Sum_Liab

        end-if

        let #Cal_Net_Amount = #Prorate_Ern_Amount - #Sum_Liab
        let #Cmp_Net_Amount = Round(#Cal_Net_Amount,2)
        let #Cmp_Monetary_Amount = Round(#Monetary_Amount,2)

        if #Cmp_Net_Amount <> #Cmp_Monetary_Amount

           let #Cmp_Net_Diff = #Cmp_Net_Amount - #Cmp_Monetary_Amount

           if #Cmp_Net_Diff < -0.25 or #Cmp_Net_Diff > 0.25

              move #Check.Check             to $Check          9999999999
              move #Cmp_Monetary_Amount     to $Monetary_Amt   9999999.99
              move #Cmp_Net_Amount          to $Cal_Amt        9999999.99

              let $Msg = '   Warning-Calculated Net Pay amount does not match '
                         || ' with Net Pay Liability for PAYCHECK_NBR '
                         || $Check || ' and Account Code ' || $Acct_Cd

              display $Msg

              let $Msg = '         Net Pay Liability : ' || $Monetary_Amt
                         || '   Calculate Net Pay : ' || $Cal_Amt

              display $Msg

            do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
            let $Msg_MsgData1  = 'PAYCHECK_NBR:'|| $Check
            let $Msg_MsgData2  = 'Acct:'|| $Acct_Cd
            let $Msg_MsgData3  = 'Liab:'|| $Monetary_Amt || ' Net:'||$Cal_Amt
            let $Msg_MsgID = '000533'
            do PUT-PAY-MESSAGE-TO-ARRAY

           end-if

           let #Monetary_Amount = #Cal_Net_Amount

        end-if
     end-if

     let #Monetary_Amount  = round(#Monetary_Amount,2)
     let #NetPay_Remainder = #NetPay_Remainder - #Monetary_Amount
  else

     let #Monetary_Amount = #NetPay_Remainder
     let #NetPay_Remainder = 0
  end-if

  add #Monetary_Amount to #Total_ER_NetPay_Liab

end-procedure
!****************************************************************************
! GET-PAY-DISTRIBUTION                                                      *
! Selects pay distribution for the current pay check.                       *
!****************************************************************************
begin-procedure GET-PAY-DISTRIBUTION

  let $Found = 'N'

  let $err-statement1 = 'PAYGL02, Select Error - GET-PAY-DISTRIBUTION'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-PAY-DISTRIBUTION see log'
  let $Msg_MsgID      = '000550'

  if #pay_check_loop = 1
     let $SlectEndDt = $Pay_End_Dt
  else
     let $SlectEndDt = $Check.PayCheck_End_Dt
  end-if

  if #pay_check_loop = 2
    let $operation = 'PAY_DIST.DEPOSIT_AMOUNT * -1'
  else
    let $operation = 'PAY_DIST.DEPOSIT_AMOUNT'
  end-if

begin-SELECT On-Error=SQL-Statement-Error
PAY_DIST.ACCOUNT_TYPE
[$operation] &PAY_DIST.DEPOSIT_AMOUNT=number
PAY_DIST.PAYCHECK_NBR &PAY_DIST.PAYCHECK_NBR=number

  let $Found = 'Y'

  if &PAY_DIST.ACCOUNT_TYPE <> '$'

     add &PAY_DIST.DEPOSIT_AMOUNT to #DepositAmount
  else

     if &PAY_DIST.PAYCHECK_NBR = #Check.Check

         move &PAY_DIST.DEPOSIT_AMOUNT to #CheckAmount
     else

         let $Msg = '   ERROR-Pay Distribution Deposit Amount Type <> $ '||
                    'and Check numbers do not match between Pay_Distribution '||
                    'and PayCheck Table.'
         display $Msg

         let $Msg = '         Page '||$Check.Page||', Line '||$Check.Line||
                    ', Separate Check '||$CHECK.SEPCHK
         display $Msg

         do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
         let $Msg_MsgID      = '000534'
         do PUT-PAY-MESSAGE-TO-ARRAY

         let $ChartKey_Good = 'N'
     end-if
  end-if

FROM  PS_PAY_DISTRIBUTN PAY_DIST
WHERE PAY_DIST.COMPANY         = $Company
  AND PAY_DIST.PAYGROUP        = $PayGroup
  AND PAY_DIST.PAY_END_DT      = $SlectEndDt
  AND PAY_DIST.OFF_CYCLE       = $Check.Off_Cycle
  AND PAY_DIST.PAGE_NUM        = #Check.Page
  AND PAY_DIST.LINE_NUM        = #Check.Line
  AND PAY_DIST.SEPCHK          = #Check.SepChk
end-SELECT

  ! If no distribution is found, it is assumed that the full net pay amount
  ! is a Direct Deposit.

  if $Found = 'N'

     move #Check.Net_Pay to #DepositAmount
  end-if

end-procedure
!****************************************************************************
! PROCESS-REVERSAL                                                          *
! Selects the pay check information which is currently being reversed.      *
!****************************************************************************
begin-procedure PROCESS-REVERSAL

  move 0 to #DepositReversalAmount
  move 0 to #CheckReversalAmount

  let $Check = #Check.Check

  let $err-statement1 = 'PAYGL02, Select Error - PROCESS-REVERSAL'
  let $err-statement2 = 'Bind Variables: PAYCHECK_NBR '||$Check||', Form ID '||
                        $Form_ID||', Check Date '||$Check_Dt||
                        ', Paycheck status is Active, and Option is Reversal'

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'PROCESS-REVERSAL see log'
  let $Msg_MsgData2   = 'Chk#:'||$Check||' Chk Dt:'||$Check_Dt
  let $Msg_MsgData3   = 'Form:'||$Check.Form_ID||' Chk:Active Opt:Rev'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
PAY_CHECK.COMPANY
PAY_CHECK.PAYGROUP
PAY_CHECK.PAY_END_DT
PAY_CHECK.PAYCHECK_OPTION
PAY_CHECK.PAYCHECK_STATUS
PAY_CHECK.NET_PAY
PAY_CHECK.OFF_CYCLE
PAY_CHECK.PAGE_NUM
PAY_CHECK.LINE_NUM
PAY_CHECK.SEPCHK
PAY_CHECK.PAYCHECK_NBR

  move &PAY_CHECK.PAYCHECK_OPTION to $PayCheck_Option
  move &PAY_CHECK.PAYCHECK_STATUS to $PayCheck_Status

  evaluate &PAY_CHECK.PAYCHECK_OPTION

     when = 'C'
     when = 'M'

        subtract &PAY_CHECK.NET_PAY from #CheckReversalAmount

        break
     when = 'A'

         subtract &PAY_CHECK.NET_PAY from #DepositReversalAmount

         break
     when = '&'

         do GET-ORIGINAL-DISTRIBUTION
  end-evaluate

  add &PAY_CHECK.NET_PAY to #Revrs_Total

FROM  PS_PAY_CHECK PAY_CHECK
WHERE PAY_CHECK.PAYCHECK_NBR     = #Check.Check
  AND PAY_CHECK.FORM_ID          = $Check.Form_ID
  AND PAY_CHECK.CHECK_DT         = $Check.Check_Dt
  AND PAY_CHECK.PAYCHECK_STATUS <> 'A'
  AND PAY_CHECK.PAYCHECK_OPTION <> 'R'
end-SELECT

end-procedure
!****************************************************************************
! GET-ORIGINAL-DISTRIBUTION                                                 *
! Selects distribution on the original paycheck which is currently being    *
! reversed.                                                                 *
!****************************************************************************
begin-procedure GET-ORIGINAL-DISTRIBUTION

  move 0 to #Advice

  let $err-statement1 = 'PAYGL02, Select Error - GET-ORIGINAL-DISTRIBUTION'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-ORIGINAL-DISTRIBUTION'
  let $Msg_MsgData2   = 'see log'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
PAY_DIST2.PAYCHECK_NBR
PAY_DIST2.ACCOUNT_TYPE
PAY_DIST2.DEPOSIT_AMOUNT

  if &PAY_DIST2.ACCOUNT_TYPE = '$'

     subtract &PAY_DIST2.DEPOSIT_AMOUNT from #CheckReversalAmount
  else

     subtract &PAY_DIST2.DEPOSIT_AMOUNT from #DepositReversalAmount
  end-if

  move &PAY_DIST2.PAYCHECK_NBR to #Advice

FROM  PS_PAY_DISTRIBUTN PAY_DIST2
WHERE PAY_DIST2.COMPANY    = &PAY_CHECK.COMPANY
  AND PAY_DIST2.PAYGROUP   = &PAY_CHECK.PAYGROUP
  AND PAY_DIST2.PAY_END_DT = &PAY_CHECK.PAY_END_DT
  AND PAY_DIST2.OFF_CYCLE  = &PAY_CHECK.OFF_CYCLE
  AND PAY_DIST2.PAGE_NUM      = &PAY_CHECK.PAGE_NUM
  AND PAY_DIST2.LINE_NUM      = &PAY_CHECK.LINE_NUM
  AND PAY_DIST2.SEPCHK     = &PAY_CHECK.SEPCHK
end-SELECT

end-procedure
!****************************************************************************
! WRITE-GL-TRANSACTION                                                      *
!****************************************************************************
begin-procedure WRITE-GL-TRANSACTION

  if $currency_cd_hr = $currency_cd_gl
      let $adjust-roundoff-error = 'N'
      let #GL_Amount = #Monetary_Amount
      let #rate_mult = 1
      let #rate_div  = 1
  else
      let $adjust-roundoff-error = 'Y'

      do CONVERT-AMOUNT ($currency_cd_hr, $currency_cd_gl, $hr_rate_type, #Monetary_Amount, #GL_Amount, #rate_mult, #rate_div)
  end-if

  let #Monetary_Amount_AP = #Monetary_Amount

  if #Monetary_Amount <> 0

     do WRITE-ACCOUNTING-LINE

  end-if

  move ' ' to $Line_Descr

end-procedure
!****************************************************************************
! WRITE-ACCOUNTING-LINE                                                     *
! Posts current transaction to the proper journal generator table.          *
!****************************************************************************
begin-procedure WRITE-ACCOUNTING-LINE

  do GET-CURRENCY-DECIMALS ($Currency_Cd_GL, #Dec_Positions )

  if #Dec_Positions = 3
    let #GL_Amount       = round(#GL_Amount, 3 )
    let #Monetary_Amount = round(#Monetary_Amount, 3 )

  else
    if $adjust-roundoff-error = 'Y'

        let #Original_amount    =  #Monetary_Amount
        let #Monetary_Amount    =  round(#Monetary_Amount, 2)
        let #Round_Diff         =  #Original_amount - #Monetary_Amount
        let #Total_Round_Diff   = #Total_Round_Diff + #Round_Diff

        if #Total_Round_Diff >= 0.01
           let #Monetary_Amount = #Monetary_Amount + 0.01
           let #Total_Round_Diff = #Total_Round_Diff - 0.01
        end-if

        if #Total_Round_Diff <= -0.01
           let #Monetary_Amount = #Monetary_Amount - 0.01
           let #Total_Round_Diff = #Total_Round_Diff + 0.01
        end-if

        let #Original_famount    =  #GL_Amount
        let #GL_Amount           =  round(#GL_Amount, 2)
        let #Round_fDiff  =  #Original_famount - #GL_Amount
        let #Total_Round_fDiff = #Total_Round_fDiff + #Round_fDiff

        if #Total_Round_fDiff >= 0.01
           let #GL_Amount = #GL_Amount + 0.01
           let #Total_Round_fDiff = #Total_Round_fDiff - 0.01
        end-if

        if #Total_Round_fDiff <= -0.01
           let #GL_Amount = #GL_Amount - 0.01
           let #Total_Round_fDiff = #Total_Round_fDiff + 0.01
        end-if
    end-if
  end-if

  let #Bud_Monetary_Amount = #Monetary_Amount
  let #Bud_Fiscal_Year     = #Fiscal_Year

  let #Monetary_Amount_AP  = #Monetary_Amount

  if $DrCr = 'C'

        let #Monetary_Amount = #Monetary_Amount * (-1)
        let #GL_Amount       = #GL_Amount  * (-1)

  end-if


  if $DrCr = 'C'
     add #Monetary_Amount to #Total_Credits
  else
     add #Monetary_Amount to #Total_Debits
  end-if


  if #pay_check_loop = 2 or #pay_check_loop = 3
    move $R_Accounting_Dt to $Accounting_Dt
    let $Table =  'PS_HR_ACCTG_LN_RD'
    let #rd_entry_line     = #rd_entry_line + 1
    let #rd_proc_seq_no    = 1
    let #tm_proc_seq_no    = #rd_proc_seq_no
    let $tm_proc_seq_no    = #tm_proc_seq_no
    let $gl_entry_line     = #rd_entry_line
    let #entry_line        = #rd_entry_line
  else
    let $Table =  'PS_HR_ACCTG_LN_STG'
    do Get-Seqnum (#max_line, #proc_seq_no, #gl_entry_line)
    let #tm_proc_seq_no    = #proc_seq_no
    let $tm_proc_seq_no    = #tm_proc_seq_no
    let $gl_entry_line     = #gl_entry_line
    let #entry_line        = #gl_entry_line
  end-if

  move ' '                    to $Journal_ID
  move ''                     to $Journal_Date
  move  0                     to #Journal_Line
  move ' '                    to $Statistics_Code
  move  0                     to #Statistics_Amount
  move  0                     to #Accounting_Period
  move  0                     to #Fiscal_Year
  move 'N'                    to $Open_Item_Status
  move '0'                    to $Jrnl_Line_Status
  move 'N'                    to $GL_Distrib_Status
  move ' '                    to $Ledger
  move ' '                    to $Ledger_Group
  move $Prcs_Process_Instance to #Process_Instance
  move '1'                    to $KK_Amount_Type
  move 'A'                    to $Audit_Actn
  move ' '                    to $In_Process_Flg
  move 'N'                    to $Budget_Line_Status
  move $Accounting_Dt         to $BUDGET_DT


  let $Jrnl_Ln_Ref       = substr(to_char(#Check.Check),1,10)
  let $Monetary_Amount   = #Monetary_Amount
  let $GL_Amount         = #GL_Amount
  let $Statistics_Amount = #Statistics_Amount
  let $Process_Instance  = #Process_Instance
  let $Accounting_Period = TO_CHAR(#Accounting_Period)
  let $Fiscal_Year       = #Fiscal_Year
  let $journal_line      = #journal_line
  let $gl_run_seq        = #gl_run_seq
  let $rate_mult         = #rate_mult
  let $rate_div          = #rate_div

  let $Account = nvl($Account,' ')

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-ACCOUNTING-LINE'
  let $err-statement2 = 'Key Values: TABLE '||$Table ||
                        ', GL_RUN_DATE '||$gl_run_date||
                        ', PROCESS_INSTANCE '||$Process_Instance||
                        ', GL_RUN_SEQ '||$tm_proc_seq_no||
                        ', GL_ENTRY_LINE '||$gl_entry_line||
                        ', KK_AMOUNT_TYPE '||$KK_Amount_Type||
                        ', AUDIT_ACTN '||$Audit_Actn||
                        ', IN_PROCESS_FLG '||$In_Process_Flg||
                        ', BUDGET_LINE_STATUS '||$Budget_Line_Status||
                        ', BUDGET_DT '||$BUDGET_DT||
                        ', BUSINESS_UNIT_GL '||$Business_Unit_GL||
                        ', JOURNAL_ID '||$Journal_Id||
                        ', JOURNAL_DATE '||$Journal_Date||
                        ', JOURNAL_LINE '||$Journal_Line||
                        ', ACCOUNT '||$Account||
                        ', DEPTID '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE  '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT'||$AltAcct||
                        ', BUDGET_REF '||$Budget_Ref ||
                        ', CHARTFIELD1 '||$Chartfield1 ||
                        ', CHARTFIELD2 '||$Chartfield2 ||
                        ', CHARTFIELD3 '||$Chartfield3 ||
                        ', AFFILIATE_INTRA1 '||$Affiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$Affiliate_intra2 ||
                        ', STATISTICS_CODE '||$Statistics_Code||
                        ', MONETARY_AMOUNT '||$GL_Amount||
                        ', FOREIGN_AMOUNT '||$Monetary_Amount||
                        ', FOREIGN_CURRENCY '||$currency_cd_hr||
                        ', RT_TYPE '||$hr_rate_type||
                        ', RATE_MULT '||$rate_mult||
                        ', RATE_DIV '||$rate_div||
                        ', STATISTIC_AMOUNT '||$Statistics_Amount||
                        ', JRNL_LN_REF '||$Jrnl_Ln_Ref||
                        ', OPEN_ITEM_STATUS '||$Open_Item_Status||
                        ', LINE_DESCR '||$Descr||
                        ', JRNL_LINE_STATUS '||$Jrnl_Line_Status||
                        ', JOURNAL_LINE_DATE '||$Journal_Line_Date||
                        ', BUSINESS_UNIT '||$Business_Unit_HR||
                        ', APPL_JRNL_ID '||$Appl_Jrnl_ID||
                        ', ACCOUNTING_DT '||$Accounting_Dt||
                        ', GL_DISTRIB_STATUS '||$GL_Distrib_Status||
                        ', CURRENCY_CD '||$Currency_Cd_GL||
                        ', ACCOUNTING_PERIOD '||$Accounting_Period||
                        ', FISCAL_YEAR '||$Fiscal_Year||
                        ', LEDGER '||$Ledger||
                        ', LEDGER_GROUP '||$Ledger_Group||
                        ', USE_DISTRIBUTION '||$Use_Distribution
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-ACCOUNTING-LINE'
  let $Msg_MsgData2   = 'Refer to log for key values'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO [$Table]
(RUN_DT,
  PROCESS_INSTANCE,
  SEQNUM,
  LINE_NBR,
  KK_AMOUNT_TYPE,
  AUDIT_ACTN,
  IN_PROCESS_FLG,
  BUDGET_LINE_STATUS,
  BUDGET_DT,
  BUSINESS_UNIT_GL,
  JOURNAL_ID,
  JOURNAL_DATE,
  JOURNAL_LINE,
  ACCOUNT,
  DEPTID,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  STATISTICS_CODE,
  MONETARY_AMOUNT,
  FOREIGN_AMOUNT,
  FOREIGN_CURRENCY,
  RT_TYPE,
  RATE_MULT,
  RATE_DIV,
  STATISTIC_AMOUNT,
  JRNL_LN_REF,
  OPEN_ITEM_STATUS,
  LINE_DESCR,
  JRNL_LINE_STATUS,
  JOURNAL_LINE_DATE,
  BUSINESS_UNIT,
  APPL_JRNL_ID,
  ACCOUNTING_DT,
  GL_DISTRIB_STATUS,
  CURRENCY_CD,
  ACCOUNTING_PERIOD,
  FISCAL_YEAR,
  LEDGER,
  LEDGER_GROUP,
  USE_DISTRIBUTION)
VALUES($gl_run_date,
       #Process_Instance,
       #tm_proc_seq_no,
       #entry_line,
       $KK_Amount_Type,
       $Audit_Actn,
       $In_Process_Flg,
       $Budget_Line_Status,
       $Budget_Dt,
       $Business_Unit_GL,
       $Journal_ID,
       $Journal_Date,
       #Journal_Line,
       $Account,
       $GL_DeptID,
       $Project_ID,
       $Product,
       $Fund_Code,
       $Program_Code,
       $Class_Fld,
       $Affiliate,
       $Operating_Unit,
       $AltAcct,
       $Budget_Ref,
       $Chartfield1,
       $Chartfield2,
       $Chartfield3,
       $Affiliate_intra1,
       $Affiliate_intra2,
       $Statistics_Code,
       #GL_Amount,
       #Monetary_Amount,
       $currency_cd_hr,
       $hr_rate_type,
       #rate_mult,
       #rate_div,
       #Statistics_Amount,
       $Jrnl_Ln_Ref,
       $Open_Item_Status,
       $Descr,
       $Jrnl_Line_Status,
       $Journal_Line_Date,
       $Business_Unit_HR,
       $Appl_Jrnl_ID,
       $Accounting_Dt,
       $GL_Distrib_Status,
       $Currency_Cd_GL,
       #Accounting_Period,
       #Fiscal_Year,
       $Ledger,
       $Ledger_Group,
       $Use_Distribution)
end-SQL

end-procedure
!****************************************************************************
! GET-ACCT-PERIOD-END-DT                                                    *
! Selects accounting period end date.                                       *
!****************************************************************************
begin-procedure GET-ACCT-PERIOD-END-DT

  let $Prd_Found = 'N'
  let #Prd_Cnt   = 0

  WHILE (#Prd_Cnt < #Prd_Total and $Prd_Found = 'N')

    GET $Prd_Business_unit
        #Prd_Fiscal_Year
        #Prd_Accounting_Period
        $Prd_Begin_Dt
        $Prd_End_Dt
    FROM ACCT_PERIOD_DT(#Prd_Cnt)
         PRD_BUSINESS_UNIT
         PRD_FISCAL_YEAR
         PRD_ACCOUNTING_PERIOD
         PRD_BEGIN_DT
         PRD_END_DT

    if $Prd_Business_Unit     = $Business_Unit_GL   and
       #Prd_Fiscal_Year       = #Fiscal_Year        and
       #Prd_Accounting_Period = #Accounting_Period

      let $Prd_Found = 'Y'
    end-if

    add 1 to #Prd_Cnt

  END-WHILE

  if $Prd_Found = 'N'

    let $Prd_End_Dt = ' '
    move $Accounting_Dt to $Prd_Accounting_Dt
    do FORMAT-ACCOUNTING-DATE

    if $No_Cal = 'N'

      do Format-Datetime($Accounting_Dt, $Temp_Accounting_Dt, {DEFCMP}, '', '')
      do Format-Datetime($Cal_Pay_End_Dt, $Temp_Cal_Pay_End_Dt, {DEFCMP}, '', '')

      if $Temp_Accounting_Dt < $Temp_Cal_Pay_End_Dt
        move $Accounting_Dt  to $Prd_End_Dt
      else
        move $Cal_Pay_End_Dt to $Prd_End_Dt
      end-if

    end-if

    move $Prd_Accounting_Dt to $Accounting_Dt
  end-if

end-procedure
!****************************************************************************
! GET-CHARTKEYS                                                             *
! Selects account information for the current account code.                 *
!****************************************************************************
begin-procedure GET-CHARTKEYS

  move 'N' to $ChartKey_Good

  let $err-statement1 = 'PAYGL02, Select Error - GET-CHARTKEYS'
  let $err-statement2 = 'Bind Variables: Account Code '||$Acct_Cd||
                        ', Effective Status A, and Effective date <= '||
                        $Prd_End_Dt

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-CHARTKEYS see log'
  let $Msg_MsgData2   = 'Acct:'||$Acct_Cd

  let $Msg_MsgData3   = 'EFFDT<='||$Pay_End_Dt_DMY||' Status A'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
ACCT_CD2.ACCOUNT
ACCT_CD2.FUND_CODE
ACCT_CD2.DEPTID_CF
ACCT_CD2.PROGRAM_CODE
ACCT_CD2.CLASS_FLD
ACCT_CD2.PROJECT_ID
ACCT_CD2.AFFILIATE
ACCT_CD2.DESCR
ACCT_CD2.PRORATE_LIABILITY
ACCT_CD2.ENCUMB_ACCOUNT
ACCT_CD2.PRODUCT
ACCT_CD2.OPERATING_UNIT
ACCT_CD2.ALTACCT
ACCT_CD2.BUDGET_REF
ACCT_CD2.CHARTFIELD1
ACCT_CD2.CHARTFIELD2
ACCT_CD2.CHARTFIELD3
ACCT_CD2.AFFILIATE_INTRA1
ACCT_CD2.AFFILIATE_INTRA2

   move 'Y' to $ChartKey_Good

   let $Account           = &ACCT_CD2.ACCOUNT
   let $Fund_Code         = &ACCT_CD2.FUND_CODE
   let $GL_DeptID         = &ACCT_CD2.DEPTID_CF
   let $Program_Code      = &ACCT_CD2.PROGRAM_CODE
   let $Class_Fld         = &ACCT_CD2.CLASS_FLD
   let $Project_Id        = &ACCT_CD2.PROJECT_ID
   let $Affiliate         = &ACCT_CD2.AFFILIATE
   let $Descr             = &ACCT_CD2.DESCR
   let $Prorate_Liability = &ACCT_CD2.PRORATE_LIABILITY
   let $Encumb_Account    = &ACCT_CD2.ENCUMB_ACCOUNT
   let $Product           = &ACCT_CD2.PRODUCT
   let $Operating_Unit    = &ACCT_CD2.OPERATING_UNIT
   let $AltAcct           = &ACCT_CD2.ALTACCT
   let $Budget_Ref        = &ACCT_CD2.BUDGET_REF
   let $Chartfield1       = &ACCT_CD2.CHARTFIELD1
   let $Chartfield2       = &ACCT_CD2.CHARTFIELD2
   let $Chartfield3       = &ACCT_CD2.CHARTFIELD3
   let $Affiliate_intra1  = &ACCT_CD2.AFFILIATE_INTRA1
   let $Affiliate_intra2  = &ACCT_CD2.AFFILIATE_INTRA2



FROM PS_ACCT_CD_TBL ACCT_CD2
WHERE $Acct_Cd            = ACCT_CD2.ACCT_CD
end-SELECT

  if $ChartKey_Good = 'N'
     let $Msg = '   ERROR-Account Code: '||$Acct_Cd||' Is Invalid or Inactive.'

     display $Msg

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgID = '000535'
     let $Msg_MsgData1 = 'Acct:'||$Acct_Cd
     do PUT-PAY-MESSAGE-TO-ARRAY

  else

     if rtrim($Account, ' ') = '' and $DrCr <> 'D'

        let $ChartKey_Good = 'N'
        let $Msg = '   ERROR-Account is Blank for Account Code: '||$Acct_Cd ||'.'

        display $Msg

        do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
        let $Msg_MsgID    = '000536'
        let $Msg_MsgData1 = 'Acct:'||$Acct_Cd
        do PUT-PAY-MESSAGE-TO-ARRAY

     end-if
  end-if

end-procedure

!****************************************************************************
! INIT-CHARTKEYS                                                            *
! Initialize account information.                                           *
!****************************************************************************
begin-procedure INIT-CHARTKEYS
   let $Account           = ' '
   let $Fund_Code         = ' '
   let $GL_DeptID         = ' '
   let $Program_Code      = ' '
   let $Class_Fld         = ' '
   let $Project_Id        = ' '
   let $Affiliate         = ' '
   let $Descr             = ' '
   let $Prorate_Liability = ' '
   let $Encumb_Account    = ' '
   let $Product           = ' '
   let $Operating_Unit    = ' '
   let $AltAcct           = ' '
   let $Budget_Ref        = ' '
   let $Chartfield1       = ' '
   let $Chartfield2       = ' '
   let $Chartfield3       = ' '
   let $Affiliate_intra1  = ' '
   let $Affiliate_intra2  = ' '
end-procedure

!****************************************************************************
! FORMAT-ACCOUNTING-DATE                                                    *
! Selects accounting end date for the current accounting period.            *
!****************************************************************************
begin-procedure FORMAT-ACCOUNTING-DATE

  let $Accounting_Period = TO_CHAR(#Accounting_Period)
  let $Fiscal_Year       = TO_CHAR(#Fiscal_Year)

  let $err-statement1 = 'PAYGL02, Select Error - FORMAT-ACCOUNTING-DATE'
  let $err-statement2 = 'Bind Variables: Business Unit '||$Business_Unit_GL||
                        ', Set ID '||$SetID_GL_Calendar||
                        ', Accounting Period '||$Accounting_Period||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FORMAT-ACCOUNTING-DATE see log'
  let $Msg_MsgData2   = 'BU:'||$Business_Unit_GL|| ', SetID:'||$SetID_GL_Calendar
  let $Msg_MsgData3   = 'Acctg Period:'||$Accounting_Period||
                        ' FY:'||$Fiscal_Year
  let $Msg_MsgID      = '000550'

  let $No_Cal = 'Y'

begin-SELECT On-Error=SQL-Statement-Error
CAL_DETP.END_DT

  let $No_Cal = 'N'
  move &CAL_DETP.END_DT to $Accounting_Dt

FROM PS_CAL_DETP_TBL CAL_DETP,
     PS_GL_JRNL_TMPLT GL_TMPLT
WHERE GL_TMPLT.BUSINESS_UNIT_GL  = $Business_Unit_GL
  AND CAL_DETP.SETID             = $SetId_GL_Calendar
  AND CAL_DETP.CALENDAR_ID       = GL_TMPLT.CALENDAR_ID
  AND CAL_DETP.FISCAL_YEAR       = #Fiscal_Year
  AND CAL_DETP.ACCOUNTING_PERIOD = #Accounting_Period
end-SELECT

If $No_Cal = 'Y'
     let $Chartkey_Good = 'N'
     let $Msg = '   ERROR- Accounting Calendar not Found. ' ||
                        'Business Unit '||$Business_Unit_GL||
                        ', Set ID '||$SetID_GL_Calendar||
                        ', Accounting Period '||$Accounting_Period||
                        ', and Fiscal Year '||$Fiscal_Year

     display $Msg

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'BU:'||$Business_Unit_GL||
                         ', SetID:'||$SetID_GL_Calendar
     let $Msg_MsgData2 = 'Acctg Period:'||$Accounting_Period||
                         ', FY:'||$Fiscal_Year
     let $Msg_MsgID    = '000537'
     do PUT-PAY-MESSAGE-TO-ARRAY

end-if

end-Procedure
!****************************************************************************
! GET-OFF-SET-ACCOUNT                                                       *
! Determine the current activity and call different routine to select offset*
! account                                                                   *
!****************************************************************************
begin-procedure GET-OFF-SET-ACCOUNT

  let $Account = ''
  let $OffSet_Group = ' '

  do GET-OFF-SET-GROUP

  if $OffSet_Group <> ' '
     if $Activity = 'DED'
        and ($Save_Plan_Type <> ' ' or $Save_DedCd <> ' ' or $Save_Ded_Class <> ' ')

        let $Ded_Dtl_Acct = 'N'
        do GET-DED-DTL-OFF-SET-ACCOUNT

        if $Ded_Dtl_Acct = 'N' and $Save_Ded_Class <> ' '
           let $Save_Ded_Class = ' '
           do GET-DED-DTL-OFF-SET-ACCOUNT
        end-if

        if $Ded_Dtl_Acct = 'N'
           do GET-STD-OFF-SET-ACCOUNT
        end-if
     else

        do GET-STD-OFF-SET-ACCOUNT
     end-if
  end-if


  if rtrim($Account, ' ') = ''

     let $ChartKey_Good = 'N'
     let $Msg = '   ERROR-Offset Account not found for Department '||$Deptid||
                ' and Activity '||$Activity

     if $Activity = 'DED'
        and ($Save_Plan_Type <> ' ' or $Save_DedCd <> ' ' or $Save_Ded_Class <> ' ')

        let $Msg = $Msg || ' (Plan Type-' || $Save_Plan_Type
                        || ' Ded Cd-'     || $Save_DedCd
                        || ' Ded Class-'  || $Save_Ded_Class || ').'
     else
        let $Msg = $Msg ||'.'
     end-if

     display $Msg

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1     = 'Dept:'||$Deptid||', Activity:'||$Activity

     if $Activity = 'DED'
     and ($Save_Plan_Type <> ' ' or $Save_DedCd <> ' ' or $Save_Ded_Class <> ' ')
          let $Msg_MsgData2 = 'Pln Typ:' || $Save_Plan_Type ||
                              ' DedCD:'  || $Save_DedCd     ||
                              ' Cls:'    || $Save_Ded_Class
     else
          let $Msg_MsgData2 = ' '
     end-if

     let $Msg_MsgID = '000538'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

end-procedure

!****************************************************************************
! GET-OFF-SET-GROUP                                                         *
! Select offset group from Dept Budget Table                                *
!****************************************************************************
begin-procedure GET-OFF-SET-GROUP

  let $Disp_Fiscal_Year = #Fiscal_Year
  let $err-statement1 = 'PAYGL02, Select Error - GET-OFF-SET-GROUP'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Fiscal Year = '||$Disp_Fiscal_Year

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-OFF-SET-GROUP see log'
  let $Msg_MsgData2   = 'SetID:'||$SetID_Dept|| ' Dept:'||$Deptid
  let $Msg_MsgData3   = 'FY:'||$Disp_Fiscal_Year
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
BUD_DT.DEPT_OFFSET_GRP

  move &BUD_DT.DEPT_OFFSET_GRP to $OffSet_Group

FROM PS_DEPT_BUDGET_DT  BUD_DT

WHERE BUD_DT.SETID  = $SetID_Dept
  AND BUD_DT.DEPTID = $Deptid
  AND BUD_DT.FISCAL_YEAR = #Fiscal_Year
end-SELECT

end-procedure

!****************************************************************************
! GET-STD-OFF-SET-ACCOUNT                                                   *
! Selects offset account for the current activity.                          *
!****************************************************************************
begin-procedure GET-STD-OFF-SET-ACCOUNT

  let $err-statement1 = 'PAYGL02, Select Error - GET-STD-OFF-SET-ACCOUNT'
  let $err-statement2 = 'Bind Variables: Effective date <= '||$Pay_End_Dt||
                        ', and Activity '||$Activity

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-STD-OFF-SET-ACCOUNT'
  let $Msg_MsgData2   = 'EFFDT<='||$Pay_End_Dt_DMY||' Acty:'||$Activity
  let $Msg_MsgData3   = 'See Log'
  let $Msg_MsgID      = '000550'


begin-SELECT On-Error=SQL-Statement-Error
ACT.ACCOUNT
ACT.DESCR

  move &ACT.ACCOUNT to $Account
  move &ACT.DESCR   to $Descr

FROM PS_DEPT_OFFSET_GRP OFFSET,
     PS_DEPT_ACTIVITY   ACT

WHERE OFFSET.DEPT_OFFSET_GRP = $OffSet_Group
  AND OFFSET.EFFDT  = (SELECT MAX(OFFSET2.EFFDT)
                       FROM  PS_DEPT_OFFSET_GRP OFFSET2
                       WHERE OFFSET2.DEPT_OFFSET_GRP = OFFSET.DEPT_OFFSET_GRP
                         AND OFFSET2.EFFDT          <= $Pay_End_Dt)
  AND OFFSET.DEPT_OFFSET_GRP = ACT.DEPT_OFFSET_GRP
  AND OFFSET.EFFDT           = ACT.EFFDT
  AND ACT.ACTIVITY           = $Activity
end-SELECT

end-procedure

!****************************************************************************
! GET-DED-DTL-OFF-SET-ACCOUNT                                               *
! Selects deduction offset account.                                         *
!****************************************************************************
begin-procedure GET-DED-DTL-OFF-SET-ACCOUNT

  let $err-statement1 = 'PAYGL02, Select Error - GET-DED-DTL-OFF-SET-ACCOUNT'
  let $err-statement2 = 'Bind Variables: Effective date <= '||$Pay_End_Dt||
                        ', and Activity '||$Activity||
                        ', and Plan Type ' ||$Save_Plan_Type||
                        ', and Ded Code ' ||$Save_DedCd||
                        ', and Ded Class ' ||$Save_Ded_Class
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'GET-DED-DTL-OFF-SET-ACCOUNT'
  let $Msg_MsgData2   = 'EFFDT<='||$Pay_End_Dt_DMY||' Acty:'||$Activity
  let $Msg_MsgData3   = 'Pln Typ:'||$Save_Plan_Type||' DedCD:'||$Save_DedCd||' Cls:'||$Save_Ded_Class
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
DPT_ACT_DTL.ACCOUNT
DPT_ACT.DESCR

  move &DPT_ACT_DTL.ACCOUNT to $Account
  move &DPT_ACT.DESCR       to $Descr
  let  $Ded_Dtl_Acct = 'Y'

FROM PS_DEPT_OFFSET_GRP DPT_OFFSET,
     PS_DEPT_ACTIVITY   DPT_ACT,
     PS_DEPT_ACT_DTL    DPT_ACT_DTL

WHERE DPT_OFFSET.DEPT_OFFSET_GRP = $OffSet_Group
  AND DPT_OFFSET.EFFDT  = (SELECT MAX(DPT_OFFSET2.EFFDT)
                            FROM PS_DEPT_OFFSET_GRP DPT_OFFSET2
                           WHERE DPT_OFFSET2.DEPT_OFFSET_GRP = DPT_OFFSET.DEPT_OFFSET_GRP
                             AND DPT_OFFSET2.EFFDT          <= $Pay_End_Dt)
  AND DPT_OFFSET.DEPT_OFFSET_GRP  = DPT_ACT.DEPT_OFFSET_GRP
  AND DPT_OFFSET.EFFDT            = DPT_ACT.EFFDT
  AND DPT_ACT.ACTIVITY            = $Activity
  AND DPT_ACT_DTL.DEPT_OFFSET_GRP = DPT_ACT.DEPT_OFFSET_GRP
  AND DPT_ACT_DTL.EFFDT           = DPT_ACT.EFFDT
  AND DPT_ACT_DTL.ACTIVITY        = DPT_ACT.ACTIVITY
  AND DPT_ACT_DTL.PLAN_TYPE       = $Save_Plan_Type
  AND DPT_ACT_DTL.DEDCD           = $Save_DedCd
  AND DPT_ACT_DTL.DED_CLASS       = $Save_Ded_Class
end-SELECT

end-procedure

!****************************************************************************
! INTERNAL-BUDGET-UPDATE                                                    *
! This is the driving procedure for updating the internal budget tables.    *
!****************************************************************************
begin-procedure INTERNAL-BUDGET-UPDATE

  move 'N'                  to $Found
  move #Bud_Monetary_Amount to #Amt_To_Liquidate

  do CHECK-ACTUALS-ACCT-CD

  move $Dist_Account to $Account

  if $Found = 'Y'

     do UPDATE-BUDGET-ACTUALS
  else

     do INSERT-BUDGET-ACTUALS
  end-if

  if #Amt_To_Liquidate <> 0

    evaluate $Process_Type_Flag

       when = 'ERN'
          do FIND-LIQUID-ACCT-ERN
          break
       when = 'DED'
          do FIND-LIQUID-ACCT-DED
          break
       when = 'TAX'
       when = 'CTX'
          do FIND-LIQUID-ACCT-TAX
    end-evaluate
  end-if

  if #Amt_To_Liquidate <> 0

    evaluate $Process_Type_Flag

       when = 'ERN'
          do FIND-OTHER-LIQUID-ACCT-ERN
          break
       when = 'DED'
          do FIND-OTHER-LIQUID-ACCT-DED
          break
       when = 'TAX'
       when = 'CTX'
          do FIND-OTHER-LIQUID-ACCT-TAX
    end-evaluate
  end-if

end-procedure
!****************************************************************************
! CHECK-ACTUALS-ACCT-CD                                                     *
!****************************************************************************
begin-procedure CHECK-ACTUALS-ACCT-CD

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move $Acct_Cd            to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - CHECK-ACTUALS-ACCT-CD'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Account '||$Account||
                        ', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'CHECK-ACTUALS-ACCT-CD'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
BACT.POSTED_ACTUAL_AMT
BACT.POSTED_ENCUMB_AMT
BACT.ANNUAL_ENCUMB_AMT

  move &BACT.POSTED_ACTUAL_AMT to #Posted_Actual_Amt
  move &BACT.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
  move &BACT.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
  move &BACT.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
  move 'Y'                     to $Found

  let #Posted_Actual_Amt = #Posted_Actual_Amt + #Bud_Monetary_Amount
  let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

  do CHECK-ENCUMBRANCE-TOTALS
  do UPDATE-BUDGET-ENCUMB
  do LIQUIDATE-ENCUMBRANCE-AMOUNTS

FROM PS_BUDGET_ACTUALS BACT

WHERE BACT.SETID            = $SetID_Dept
  AND BACT.DEPTID           = $Deptid
  AND BACT.POSITION_POOL_ID = $Position_Pool_Id
  AND BACT.SETID_JOBCODE    = $SetID_Jobcode
  AND BACT.JOBCODE          = $Jobcode
  AND BACT.POSITION_NBR     = $Position_Nbr
  AND BACT.EMPLID           = $Check.Emplid
  AND BACT.EMPL_RCD         = #Empl_Rcd
  AND BACT.ACCT_CD          = $Acct_Cd
  AND BACT.ACCOUNT          = $Account
  AND BACT.ENCUMB_PROC_TYPE = $Encumb_Proc_Type
  AND BACT.FISCAL_YEAR      = #Budget_Fiscal_Year
end-SELECT

end-procedure
!****************************************************************************
! CHECK-ENCUMBRANCE-TOTALS                                                  *
!****************************************************************************
begin-procedure CHECK-ENCUMBRANCE-TOTALS

  if #Posted_Encumb_Amt < 0

     move 0               to #Posted_Encumb_Amt
     move #Encumb_Ref_Amt to #Bud_Monetary_Amount
  end-if

  if #Posted_Encumb_Amt > #Annual_Encumb_Amt

     let #Bud_Monetary_Amount = #Encumb_Ref_Amt - #Annual_Encumb_Amt

     move #Annual_Encumb_Amt to #Posted_Encumb_Amt
  end-if

  let #Amt_To_Liquidate = #Amt_To_Liquidate - #Bud_Monetary_Amount

end-procedure
!****************************************************************************
! UPDATE-BUDGET-ENCUMB                                                      *
! Updates the encumbered amount on the budget actuals tbl to reflect the    *
! liquidation.                                                              *
!****************************************************************************
begin-procedure UPDATE-BUDGET-ENCUMB

  move #Empl_Rcd          to $Empl_Rcd
  move #Fiscal_Year       to $Fiscal_Year
  move #Posted_Encumb_Amt to $Posted_Encumb_Amt

  let $err-statement1 = 'PAYGL02, Update Error - UPDATE-BUDGET-ENCUMB'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Emplid '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Encumbrance_Acct_Cd ||', Account '||$Account||
                        ', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', Fiscal Year '||$Fiscal_Year||
                        '.   Key Values: Posted Encumb Amount '||
                        $Posted_Encumb_Amt

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'UPDATE-BUDGET-ENCUMB'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000552'

begin-SQL On-Error=SQL-Statement-Error
UPDATE PS_BUDGET_ACTUALS
SET POSTED_ENCUMB_AMT  = #Posted_Encumb_Amt
WHERE SETID            = $SetID_Dept
  AND DEPTID           = $Deptid
  AND POSITION_POOL_ID = $Position_Pool_Id
  AND SETID_JOBCODE    = $SetID_Jobcode
  AND JOBCODE          = $Jobcode
  AND POSITION_NBR     = $Position_Nbr
  AND EMPLID           = $Check.Emplid
  AND EMPL_RCD         = #Empl_Rcd
  AND ACCT_CD          = $Encumbrance_Acct_Cd
  AND ACCOUNT          = $Account
  AND ENCUMB_PROC_TYPE = $Encumb_Proc_Type
  AND FISCAL_YEAR      = #Budget_Fiscal_Year
end-SQL

end-procedure
!****************************************************************************
! UPDATE-BUDGET-ACTUALS                                                     *
! Updates the posted actual amount on the budget actuals tbl.               *
!****************************************************************************
begin-procedure UPDATE-BUDGET-ACTUALS

  move #Empl_Rcd          to $Empl_Rcd
  move #Fiscal_Year       to $Fiscal_Year
  move #Posted_Actual_Amt to $Posted_Actual_Amt

  let $err-statement1 = 'PAYGL02, Update Error - UPDATE-BUDGET-ACTUALS'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Emplid '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Account '||$Account||
                        ', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', Fiscal Year '||$Fiscal_Year||
                        '.   Key Values: Posted Actual Amount '||
                        $Posted_Actual_Amt
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'UPDATE-BUDGET-ACTUALS'
  let $Msg_MsgData2   = 'See log for bind variables'
  let $Msg_MsgID      = '000552'

begin-SQL On-Error=SQL-Statement-Error
UPDATE PS_BUDGET_ACTUALS
SET POSTED_ACTUAL_AMT  = #Posted_Actual_Amt
WHERE SETID            = $SetID_Dept
  AND DEPTID           = $Deptid
  AND POSITION_POOL_ID = $Position_Pool_Id
  AND SETID_JOBCODE    = $SetID_Jobcode
  AND JOBCODE          = $Jobcode
  AND POSITION_NBR     = $Position_Nbr
  AND EMPLID           = $Check.Emplid
  AND EMPL_RCD         = #Empl_Rcd
  AND ACCT_CD          = $Acct_Cd
  AND ACCOUNT          = $Account
  AND ENCUMB_PROC_TYPE = $Encumb_Proc_Type
  AND FISCAL_YEAR      = #Budget_Fiscal_Year
end-SQL

end-procedure
!****************************************************************************
! INSERT-BUDGET-ACTUALS                                                     *
! Inserts new budget entry into the budget actuals table.                   *
!****************************************************************************
begin-procedure INSERT-BUDGET-ACTUALS

  move #Empl_Rcd            to $Empl_Rcd
  move #Bud_Fiscal_Year     to $Fiscal_Year
  move #Bud_Monetary_Amount to $Posted_Actual_Amt

  let $err-statement1 = 'PAYGL02, Insert Error - INSERT-BUDGET-ACTUALS'
  let $err-statement2 = 'Key Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Emplid '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Account '||$Account||
                        ', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', Fiscal Year '||$Fiscal_Year||
                        ', Posted Actual Amount '||
                        $Posted_Actual_Amt||', Posted Encumb Amount 0, '||
                        'Annual Encumb Amount 0, Work Actual Amount 0, '||
                        'and Work Encumb Amount 0.'
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'INSERT-BUDGET-ACTUALS'
  let $Msg_MsgData2   = 'See log for key variables'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error

INSERT INTO PS_BUDGET_ACTUALS
    (SETID,
    DEPTID,
    POSITION_POOL_ID,
    SETID_JOBCODE,
    JOBCODE,
    POSITION_NBR,
    EMPLID,
    EMPL_RCD,
    ACCT_CD,
    ACCOUNT,
    ENCUMB_PROC_TYPE,
    FISCAL_YEAR,
    POSTED_ACTUAL_AMT,
    POSTED_ENCUMB_AMT,
    ANNUAL_ENCUMB_AMT,
    WORK_ACTUAL_AMT,
    WORK_ENCUMB_AMT)
VALUES
   ($SetID_Dept,
    $Deptid,
    $Position_Pool_Id,
    $SetID_Jobcode,
    $Jobcode,
    $Position_Nbr,
    $Check.Emplid,
    #Empl_Rcd,
    $Acct_Cd,
    $Account,
    $Encumb_Proc_Type,
    #Budget_Fiscal_Year,
    #Bud_Monetary_Amount,
    0,
    0,
    0,
    0)

end-SQL

end-procedure
!****************************************************************************
! FIND-LIQUID-ACCT-ERN                                                      *
! If actuals were not encumbered using the actuals account code, check for  *
! other accounts for this account code where encumbrances may have been     *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-LIQUID-ACCT-ERN

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move $Acct_Cd            to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-LIQUID-ACCT-ERN'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-LIQUID-ACCT-ERN'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
BE.POSTED_ENCUMB_AMT
BE.ANNUAL_ENCUMB_AMT
BE.ACCOUNT

  if #Amt_To_Liquidate <> 0

     let #Bud_Monetary_Amount = #Amt_To_Liquidate
     move &BE.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
     move &BE.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
     move &BE.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
     move &BE.ACCOUNT           to $Account

     let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

     do CHECK-ENCUMBRANCE-TOTALS
     do UPDATE-BUDGET-ENCUMB
     do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS BE

WHERE BE.SETID              = $SetID_Dept
  AND BE.DEPTID             = $Deptid
  AND BE.POSITION_POOL_ID   = $Position_Pool_Id
  AND BE.SETID_JOBCODE      = $SetID_Jobcode
  AND BE.JOBCODE            = $Jobcode
  AND BE.POSITION_NBR       = $Position_Nbr
  AND BE.EMPLID             = $Check.Emplid
  AND BE.EMPL_RCD           = #Empl_Rcd
  AND BE.ACCT_CD            = $Acct_Cd
  AND BE.ACCOUNT           <> $Dist_Account
  AND BE.ENCUMB_PROC_TYPE   = 'E'
  AND BE.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND BE.ANNUAL_ENCUMB_AMT <> 0
ORDER BY BE.ACCOUNT
end-SELECT

end-procedure
!****************************************************************************
! FIND-LIQUID-ACCT-DED                                                      *
! If actuals were not encumbered using the actuals account code, check for  *
! other accounts for this account code where encumbrances may have been     *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-LIQUID-ACCT-DED

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move $Acct_Cd            to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-LIQUID-ACCT-DED'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-LIQUID-ACCT-DED'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
BD.POSTED_ENCUMB_AMT
BD.ANNUAL_ENCUMB_AMT
BD.ACCOUNT

  if #Amt_To_Liquidate <> 0

     let #Bud_Monetary_Amount = #Amt_To_Liquidate
     move &BD.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
     move &BD.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
     move &BD.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
     move &BD.ACCOUNT           to $Account

     let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

     do CHECK-ENCUMBRANCE-TOTALS
     do UPDATE-BUDGET-ENCUMB
     do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS BD

WHERE BD.SETID              = $SetID_Dept
  AND BD.DEPTID             = $Deptid
  AND BD.POSITION_POOL_ID   = $Position_Pool_Id
  AND BD.SETID_JOBCODE      = $SetID_Jobcode
  AND BD.JOBCODE            = $Jobcode
  AND BD.POSITION_NBR       = $Position_Nbr
  AND BD.EMPLID             = $Check.Emplid
  AND BD.EMPL_RCD           = #Empl_Rcd
  AND BD.ACCT_CD            = $Acct_Cd
  AND BD.ACCOUNT           <> $Dist_Account
  AND BD.ENCUMB_PROC_TYPE   = 'D'
  AND BD.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND BD.ANNUAL_ENCUMB_AMT <> 0
ORDER BY BD.ACCOUNT
end-SELECT

end-procedure
!****************************************************************************
! FIND-LIQUID-ACCT-TAX                                                      *
! If actuals were not encumbered using the actuals account code, check for  *
! other accounts for this account code where encumbrances may have been     *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-LIQUID-ACCT-TAX

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move $Acct_Cd            to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-LIQUID-ACCT-TAX'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb Proc Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-LIQUID-ACCT-TAX'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
BT.POSTED_ENCUMB_AMT
BT.ANNUAL_ENCUMB_AMT
BT.ACCOUNT

  if #Amt_To_Liquidate <> 0

     let #Bud_Monetary_Amount = #Amt_To_Liquidate
     move &BT.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
     move &BT.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
     move &BT.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
     move &BT.ACCOUNT           to $Account

     let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

     do CHECK-ENCUMBRANCE-TOTALS
     do UPDATE-BUDGET-ENCUMB
     do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS BT

WHERE BT.SETID              = $SetID_Dept
  AND BT.DEPTID             = $Deptid
  AND BT.POSITION_POOL_ID   = $Position_Pool_Id
  AND BT.SETID_JOBCODE      = $SetID_Jobcode
  AND BT.JOBCODE            = $Jobcode
  AND BT.POSITION_NBR       = $Position_Nbr
  AND BT.EMPLID             = $Check.Emplid
  AND BT.EMPL_RCD           = #Empl_Rcd
  AND BT.ACCT_CD            = $Acct_Cd
  AND BT.ACCOUNT           <> $Dist_Account
  AND BT.ENCUMB_PROC_TYPE   = 'T'
  AND BT.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND BT.ANNUAL_ENCUMB_AMT <> 0
ORDER BY BT.ACCOUNT
end-SELECT

end-procedure
!****************************************************************************
! FIND-OTHER-LIQUID-ACCT-ERN                                                *
! If actuals were not encumbered using the actuals account code, check for  *
! other account codes for this appointment where encumbrances may have been *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-OTHER-LIQUID-ACCT-ERN

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move ' '                 to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-OTHER-LIQUID-ACCT-ERN'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb_Proc_Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-OTHER-LIQUID-ACCT-ERN'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
LIQERN.ACCT_CD
LIQERN.POSTED_ENCUMB_AMT
LIQERN.ANNUAL_ENCUMB_AMT
LIQERN.ACCOUNT

  if #Amt_To_Liquidate <> 0

    let #Bud_Monetary_Amount = #Amt_To_Liquidate
    move &LIQERN.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
    move &LIQERN.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
    move &LIQERN.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
    move &LIQERN.ACCT_CD           to $Encumbrance_Acct_Cd
    move &LIQERN.ACCOUNT           to $Account

    let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

    do CHECK-ENCUMBRANCE-TOTALS
    do UPDATE-BUDGET-ENCUMB
    do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS LIQERN

WHERE LIQERN.SETID              = $SetID_Dept
  AND LIQERN.DEPTID             = $Deptid
  AND LIQERN.POSITION_POOL_ID   = $Position_Pool_Id
  AND LIQERN.SETID_JOBCODE      = $SetID_Jobcode
  AND LIQERN.JOBCODE            = $Jobcode
  AND LIQERN.POSITION_NBR       = $Position_Nbr
  AND LIQERN.EMPLID             = $Check.Emplid
  AND LIQERN.EMPL_RCD           = #Empl_Rcd
  AND LIQERN.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND LIQERN.ACCT_CD           <> $Acct_Cd
  AND LIQERN.ENCUMB_PROC_TYPE   = 'E'
  AND LIQERN.ANNUAL_ENCUMB_AMT <> 0
! AND EXISTS
!   (SELECT 'X' FROM PS_ENCUMB_DIST_ERN ENCERN
!    WHERE ENCERN.SETID            = LIQERN.SETID
!      AND ENCERN.DEPTID           = LIQERN.DEPTID
!      AND ENCERN.POSITION_POOL_ID = LIQERN.POSITION_POOL_ID
!      AND ENCERN.SETID_JOBCODE    = LIQERN.SETID_JOBCODE
!      AND ENCERN.JOBCODE          = LIQERN.JOBCODE
!      AND ENCERN.POSITION_NBR     = LIQERN.POSITION_NBR
!      AND ENCERN.EMPLID           = LIQERN.EMPLID
!      AND ENCERN.EMPL_RCD        = LIQERN.EMPL_RCD
!      AND ENCERN.FISCAL_YEAR      = LIQERN.FISCAL_YEAR
!      AND ENCERN.ACCT_CD          = LIQERN.ACCT_CD
!      AND ENCERN.ENCUMB_TYPE      = 'E'
!      AND ENCERN.ENCUMB_ERN_AMT   <> 0)
ORDER BY LIQERN.ACCT_CD
end-SELECT

end-procedure
!****************************************************************************
! FIND-OTHER-LIQUID-ACCT-DED                                                *
! If actuals were not encumbered using the actuals account code, check for  *
! other account codes for this appointment where encumbrances may have been *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-OTHER-LIQUID-ACCT-DED

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move ' '                 to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-OTHER-LIQUID-ACCT-DED'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb_Proc_Type '||$Encumb_Proc_Type||
                        ', and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-OTHER-LIQUID-ACCT-DED'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
LIQDED.ACCT_CD
LIQDED.POSTED_ENCUMB_AMT
LIQDED.ANNUAL_ENCUMB_AMT
LIQDED.ACCOUNT

  if #Amt_To_Liquidate <> 0

    let #Bud_Monetary_Amount = #Amt_To_Liquidate
    move &LIQDED.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
    move &LIQDED.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
    move &LIQDED.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
    move &LIQDED.ACCT_CD           to $Encumbrance_Acct_Cd
    move &LIQDED.ACCOUNT           to $Account

    let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

    do CHECK-ENCUMBRANCE-TOTALS
    do UPDATE-BUDGET-ENCUMB
    do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS LIQDED

WHERE LIQDED.SETID              = $SetID_Dept
  AND LIQDED.DEPTID             = $Deptid
  AND LIQDED.POSITION_POOL_ID   = $Position_Pool_Id
  AND LIQDED.SETID_JOBCODE      = $SetID_Jobcode
  AND LIQDED.JOBCODE            = $Jobcode
  AND LIQDED.POSITION_NBR       = $Position_Nbr
  AND LIQDED.EMPLID             = $Check.Emplid
  AND LIQDED.EMPL_RCD           = #Empl_Rcd
  AND LIQDED.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND LIQDED.ACCT_CD           <> $Acct_Cd
  AND LIQDED.ENCUMB_PROC_TYPE   = 'D'
  AND LIQDED.ANNUAL_ENCUMB_AMT <> 0
! AND EXISTS
!   (SELECT 'X' FROM PS_ENCUMB_DIST_DED ENCDED
!    WHERE ENCDED.SETID            = LIQDED.SETID
!      AND ENCDED.DEPTID           = LIQDED.DEPTID
!      AND ENCDED.POSITION_POOL_ID = LIQDED.POSITION_POOL_ID
!      AND ENCDED.SETID_JOBCODE    = LIQDED.SETID_JOBCODE
!      AND ENCDED.JOBCODE          = LIQDED.JOBCODE
!      AND ENCDED.POSITION_NBR     = LIQDED.POSITION_NBR
!      AND ENCDED.EMPLID           = LIQDED.EMPLID
!      AND ENCDED.EMPL_RCD        = LIQDED.EMPL_RCD
!      AND ENCDED.FISCAL_YEAR      = LIQDED.FISCAL_YEAR
!      AND ENCDED.ACCT_CD          = LIQDED.ACCT_CD
!      AND ENCDED.ENCUMB_TYPE      = 'E'
!      AND ENCDED.ENCUMB_DED_AMT   <> 0)
ORDER BY LIQDED.ACCT_CD
end-SELECT

end-procedure
!****************************************************************************
! FIND-OTHER-LIQUID-ACCT-TAX                                                *
! If actuals were not encumbered using the actuals account code, check for  *
! other account codes for this appointment where encumbrances may have been *
! charged.                                                                  *
!****************************************************************************
begin-procedure FIND-OTHER-LIQUID-ACCT-TAX

  move #Empl_Rcd           to $Empl_Rcd
  move #Budget_Fiscal_Year to $Fiscal_Year
  move ' '                 to $Encumbrance_Acct_Cd

  let $err-statement1 = 'PAYGL02, Select Error - FIND-OTHER-LIQUID-ACCT-TAX'
  let $err-statement2 = 'Bind Variables: SetID '||$SetID_Dept||
                        ', Department '||$Deptid||
                        ', Position pool '||$Position_Pool_ID||
                        ', SetID_Jobcode '||$SetID_Jobcode||
                        ', Job Code '||$JobCode||', Position Number '||
                        $Position_Nbr||', Employee ID '||$Check.Emplid||
                        ', Employee Rcd '||$Empl_Rcd||', Account Code '||
                        $Acct_Cd||', Encumb_Proc_Type '||$Encumb_Proc_Type||
                        ' and Fiscal Year '||$Fiscal_Year
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'FIND-OTHER-LIQUID-ACCT-TAX'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000550'

begin-SELECT On-Error=SQL-Statement-Error
LIQTAX.ACCT_CD
LIQTAX.POSTED_ENCUMB_AMT
LIQTAX.ANNUAL_ENCUMB_AMT
LIQTAX.ACCOUNT

  if #Amt_To_Liquidate <> 0

    let #Bud_Monetary_Amount = #Amt_To_Liquidate
    move &LIQTAX.POSTED_ENCUMB_AMT to #Posted_Encumb_Amt
    move &LIQTAX.POSTED_ENCUMB_AMT to #Encumb_Ref_Amt
    move &LIQTAX.ANNUAL_ENCUMB_AMT to #Annual_Encumb_Amt
    move &LIQTAX.ACCT_CD           to $Encumbrance_Acct_Cd
    move &LIQTAX.ACCOUNT           to $Account

    let #Posted_Encumb_Amt = #Posted_Encumb_Amt - #Bud_Monetary_Amount

    do CHECK-ENCUMBRANCE-TOTALS
    do UPDATE-BUDGET-ENCUMB
    do LIQUIDATE-ENCUMBRANCE-AMOUNTS

  end-if

FROM PS_BUDGET_ACTUALS LIQTAX

WHERE LIQTAX.SETID              = $SetID_Dept
  AND LIQTAX.DEPTID             = $Deptid
  AND LIQTAX.POSITION_POOL_ID   = $Position_Pool_Id
  AND LIQTAX.SETID_JOBCODE      = $SetID_Jobcode
  AND LIQTAX.JOBCODE            = $Jobcode
  AND LIQTAX.POSITION_NBR       = $Position_Nbr
  AND LIQTAX.EMPLID             = $Check.Emplid
  AND LIQTAX.EMPL_RCD           = #Empl_Rcd
  AND LIQTAX.FISCAL_YEAR        = #Budget_Fiscal_Year
  AND LIQTAX.ACCT_CD           <> $Acct_Cd
  AND LIQTAX.ANNUAL_ENCUMB_AMT <> 0
  AND LIQTAX.ENCUMB_PROC_TYPE   = 'T'
! AND EXISTS
!   (SELECT 'X' FROM PS_ENCUMB_DIST_TAX ENCTAX
!    WHERE ENCTAX.SETID            = LIQTAX.SETID
!      AND ENCTAX.DEPTID           = LIQTAX.DEPTID
!      AND ENCTAX.POSITION_POOL_ID = LIQTAX.POSITION_POOL_ID
!      AND ENCTAX.SETID_JOBCODE    = LIQTAX.SETID_JOBCODE
!      AND ENCTAX.JOBCODE          = LIQTAX.JOBCODE
!      AND ENCTAX.POSITION_NBR     = LIQTAX.POSITION_NBR
!      AND ENCTAX.EMPLID           = LIQTAX.EMPLID
!      AND ENCTAX.EMPL_RCD        = LIQTAX.EMPL_RCD
!      AND ENCTAX.FISCAL_YEAR      = LIQTAX.FISCAL_YEAR
!      AND ENCTAX.ACCT_CD          = LIQTAX.ACCT_CD
!      AND ENCTAX.ENCUMB_TYPE      = 'E'
!      AND ENCTAX.ENCUMB_TAX_AMT   <> 0)
ORDER BY LIQTAX.ACCT_CD
end-SELECT

end-procedure
!****************************************************************************
! LIQUIDATE-ENCUMBRANCE-AMOUNTS                                             *
! This procedure determines the offset activity for liquidating the         *
! encumbrance.  It also determines the chartfields associated with the      *
! encumbrance Account Code.                                                 *
!****************************************************************************
begin-procedure LIQUIDATE-ENCUMBRANCE-AMOUNTS

  let $Save_Acct_Cd = $Acct_Cd
  let $Acct_Cd = $Encumbrance_Acct_Cd

  do GET-CHARTKEYS

  let $Acct_Cd = $Save_Acct_Cd

  if $ChartKey_Good = 'Y'

    move $Encumb_Account to $Account

    let $Liab_Exp_Ind = 'X'

    let #Bud_Monetary_Amount = round((#Bud_Monetary_Amount * (-1)),2)

    do WRITE-GL-ENCUMB-LIQUIDATION

    evaluate $Process_Type_Flag

       when = 'ERN'

          move 'ERE' to $Activity

          break
       when = 'DED'

          move 'ERD' to $Activity

          break
       when = 'TAX'
       when = 'CTX'

          move 'ERT' to $Activity
    end-evaluate

    let #Fiscal_Year = #Budget_Fiscal_Year
    do GET-OFF-SET-ACCOUNT

    let $Liab_Exp_Ind = 'L'

    let #Bud_Monetary_Amount = round((#Bud_Monetary_Amount * (-1)),2)

    do WRITE-GL-ENCUMB-LIQUIDATION

  end-if

end-procedure
!****************************************************************************
! WRITE-GL-ENCUMB-LIQUIDATION                                               *
!****************************************************************************
begin-procedure WRITE-GL-ENCUMB-LIQUIDATION

  if #Bud_Monetary_Amount <> 0

     do WRITE-ACCT-LINE-LIQUIDATION
  end-if

  move ' ' to $Line_Descr

end-procedure
!****************************************************************************
! WRITE-ACCT-LINE-LIQUIDATION                                               *
! Posts encumbrace liquidation transaction to the journal generator         *
! encumbrace table.                                                         *
!****************************************************************************
begin-procedure WRITE-ACCT-LINE-LIQUIDATION

  if $currency_cd_hr = $currency_cd_gl
      let $adjust-roundoff-error = 'N'
      let #Bud_GL_Amount = #Bud_Monetary_Amount
      let #rate_mult = 1
      let #rate_div  = 1
  else
      let $adjust-roundoff-error = 'Y'

      do CONVERT-AMOUNT ($currency_cd_hr, $currency_cd_gl, $hr_rate_type, #Bud_Monetary_Amount, #Bud_GL_Amount, #rate_mult, #rate_div)
  end-if

  move ' '                    to $Journal_ID
  move ''                     to $Journal_Date
  move  0                     to #Journal_Line
  move ' '                    to $Statistics_Code
  move  0                     to #Statistics_Amount
  move  0                     to #Accounting_Period
  move  0                     to #Fiscal_Year
  move 'N'                    to $Open_Item_Status
  move '0'                    to $Jrnl_Line_Status
  move 'N'                    to $GL_Distrib_Status
  move ' '                    to $Ledger
  move ' '                    to $Ledger_Group
  move $Prcs_Process_Instance to #Process_Instance
  move '2'                    to $KK_Amount_Type
  move 'A'                    to $Audit_Actn
  move ' '                    to $In_Process_Flg
  move 'N'                    to $Budget_Line_Status

  if #pay_check_loop = 2 or #pay_check_loop = 3
    move $R_Accounting_Dt to $Accounting_Dt
    let $Table =  'PS_HR_ACCTG_LN_RD'
    let #rd_entry_line     = #rd_entry_line + 1
    let #rd_proc_seq_no    = 1
    let #tm_proc_seq_no    = #rd_proc_seq_no
    let $tm_proc_seq_no    = #tm_proc_seq_no
    let $gl_entry_line     = #rd_entry_line
    let #entry_line        = #rd_entry_line
  else
    let $Table =  'PS_HR_ACCTG_LN_STG'
    do Get-Seqnum (#max_line, #proc_seq_no, #gl_entry_line)
    let #tm_proc_seq_no    = #proc_seq_no
    let $tm_proc_seq_no    = #tm_proc_seq_no
    let $gl_entry_line     = #gl_entry_line
    let #entry_line        = #gl_entry_line
  end-if

  move $Accounting_Dt         to $Budget_Dt

  let $Jrnl_Ln_Ref_EN    = substr(to_char(#Check.Check), 1, 10)
  let $Monetary_Amount   = #Bud_Monetary_Amount
  let $GL_Amount         = #Bud_GL_Amount
  let $Statistics_Amount = #Statistics_Amount
  let $Process_Instance  = #Process_Instance
  let $Accounting_Period = TO_CHAR(#Accounting_Period)
  let $Fiscal_Year       = #Fiscal_Year
  let $journal_line      = #journal_line
  let $gl_run_seq        = #gl_run_seq
  let $rate_mult         = #rate_mult
  let $rate_div          = #rate_div

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-ACCT-LINE-LIQUIDATION'
  let $err-statement2 = 'Key Values: TABLE '||$Table||
                        ', GL_RUN_DATE '||$gl_run_date||
                        ', PROCESS_INSTANCE '||$Process_Instance||
                        ', GL_RUN_SEQ '||$tm_proc_seq_no||
                        ', GL_ENTRY_LINE '||$gl_entry_line||
                        ', KK_AMOUNT_TYPE '||$KK_Amount_Type||
                        ', AUDIT_ACTN '||$Audit_Actn||
                        ', IN_PROCESS_FLG '||$In_Process_Flg||
                        ', BUDGET_LINE_STATUS '||$Budget_Line_Status||
                        ', BUDGET_DT '||$BUDGET_DT||
                        ', BUSINESS_UNIT_GL '||$Business_Unit_GL||
                        ', JOURNAL_ID '||$Journal_Id||
                        ', JOURNAL_DATE '||$Journal_Date||
                        ', JOURNAL_LINE '||$Journal_Line||
                        ', ACCOUNT '||$Account||
                        ', DEPTID '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE  '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT'||$AltAcct||
                        ', BUDGET_REF '||$Budget_Ref ||
                        ', CHARTFIELD1 '||$Chartfield1 ||
                        ', CHARTFIELD2 '||$Chartfield2 ||
                        ', CHARTFIELD3 '||$Chartfield3 ||
                        ', AFFILIATE_INTRA1 '||$Affiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$Affiliate_intra2 ||
                        ', STATISTICS_CODE '||$Statistics_Code||
                        ', MONETARY_AMOUNT '||$GL_Amount||
                        ', FOREIGN_AMOUNT '||$Monetary_Amount||
                        ', FOREIGN_CURRENCY '||$currency_cd_hr||
                        ', RT_TYPE '||$hr_rate_type||
                        ', RATE_MULT '||$rate_mult||
                        ', RATE_DIV '||$rate_div||
                        ', STATISTIC_AMOUNT '||$Statistics_Amount||
                        ', JRNL_LN_REF '||$Jrnl_Ln_Ref||
                        ', OPEN_ITEM_STATUS '||$Open_Item_Status||
                        ', LINE_DESCR '||$Descr||
                        ', JRNL_LINE_STATUS '||$Jrnl_Line_Status||
                        ', JOURNAL_LINE_DATE '||$Journal_Line_Date||
                        ', BUSINESS_UNIT '||$Business_Unit_HR||
                        ', APPL_JRNL_ID '||$Liab_Exp_Ind||
                        ', ACCOUNTING_DT '||$Accounting_Dt||
                        ', GL_DISTRIB_STATUS '||$GL_Distrib_Status||
                        ', CURRENCY_CD '||$Currency_Cd_GL||
                        ', ACCOUNTING_PERIOD '||$Accounting_Period||
                        ', FISCAL_YEAR '||$Fiscal_Year||
                        ', LEDGER '||$Ledger||
                        ', LEDGER_GROUP '||$Ledger_Group

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-ACCT-LINE-LIQUIDATION'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO [$Table]
(RUN_DT,
  PROCESS_INSTANCE,
  SEQNUM,
  LINE_NBR,
  KK_AMOUNT_TYPE,
  AUDIT_ACTN,
  IN_PROCESS_FLG,
  BUDGET_LINE_STATUS,
  BUDGET_DT,
  BUSINESS_UNIT_GL,
  JOURNAL_ID,
  JOURNAL_DATE,
  JOURNAL_LINE,
  ACCOUNT,
  DEPTID,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  STATISTICS_CODE,
  MONETARY_AMOUNT,
  FOREIGN_AMOUNT,
  FOREIGN_CURRENCY,
  RT_TYPE,
  RATE_MULT,
  RATE_DIV,
  STATISTIC_AMOUNT,
  JRNL_LN_REF,
  OPEN_ITEM_STATUS,
  LINE_DESCR,
  JRNL_LINE_STATUS,
  JOURNAL_LINE_DATE,
  BUSINESS_UNIT,
  APPL_JRNL_ID,
  ACCOUNTING_DT,
  GL_DISTRIB_STATUS,
  CURRENCY_CD,
  ACCOUNTING_PERIOD,
  FISCAL_YEAR,
  LEDGER,
  LEDGER_GROUP,
  USE_DISTRIBUTION)
VALUES($gl_run_date,
       #Process_Instance,
       #tm_proc_seq_no,
       #entry_line,
       $KK_Amount_Type,
       $Audit_Actn,
       $In_Process_Flg,
       $Budget_Line_Status,
       $Budget_Dt,
       $Business_Unit_GL,
       $Journal_ID,
       $Journal_Date,
       #Journal_Line,
       $Account,
       $GL_DeptID,
       $Project_ID,
       $Product,
       $Fund_Code,
       $Program_Code,
       $Class_Fld,
       $Affiliate,
       $Operating_Unit,
       $AltAcct,
       $Budget_Ref,
       $Chartfield1,
       $Chartfield2,
       $Chartfield3,
       $Affiliate_intra1,
       $Affiliate_intra2,
       $Statistics_Code,
       #Bud_GL_Amount,
       #Bud_Monetary_Amount,
       $currency_cd_hr,
       $hr_rate_type,
       #rate_mult,
       #rate_div,
       #Statistics_Amount,
       $Liab_Exp_Ind,
       $Open_Item_Status,
       $Descr,
       $Jrnl_Line_Status,
       $Journal_Line_Date,
       $Business_Unit_HR,
       $Appl_Jrnl_ID,
       $Accounting_Dt,
       $GL_Distrib_Status,
       $Currency_Cd_GL,
       #Accounting_Period,
       #Fiscal_Year,
       $Ledger,
       $Ledger_Group,
       $Use_Distribution)

end-SQL

end-procedure
!****************************************************************************
! UPDATE-WORK-ACTUALS                                                       *
! Updates all work amounts in the budget actuals table when all pay cycles  *
! in the run were successful.                                               *
!****************************************************************************
begin-procedure UPDATE-WORK-ACTUALS

  let $err-statement1 = 'PAYGL02, Update Error - UPDATE-WORK-ACTUALS'
  let $err-statement2 = ' '

  if $Run_ID = ''
      let $Msg_Company       = $Company
      let $Msg_Paygroup      = $Paygroup
      let $Msg_Pay_End_Dt    = $Pay_End_Dt
      let $Msg_Run_ID        = ' '
  else
      let $Msg_Company       = $Pmsg_Company
      let $Msg_Paygroup      = $Pmsg_Paygroup
      let $Msg_Run_ID        = $Run_ID

      if $Pmsg_Pay_End_Dt = ' '
         let $Msg_Pay_End_Dt = $AsOfToday
      else
         let $Msg_Pay_End_Dt = $Pmsg_Pay_End_Dt
      end-if
  end-if
  let $Msg_MsgData1 = 'UPDATE-WORK-ACTUALS'
  let $Msg_MsgID    = '000552'

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_BUDGET_ACTUALS
SET WORK_ACTUAL_AMT  = 0

end-SQL

end-procedure

!****************************************************************************
! PUBLISH_HR_ACCTG_LINE                                                     *
! Insert values into Parameter Table for Batch Publish when there were      *
! successful HR_ACCTG_LINE row(s) written.                                  *
!****************************************************************************
begin-procedure PUBLISH_HR_ACCTG_LINE

  do Get-Process-Name (#prcs_process_instance, $prcsname)
  do Get-Active-In-BatchPub ($prcsname, #cntmsg)
  if #cntmsg > 0
      do Get-Job-Instance
      let $Out_Clean_Up_Flag  = 'U'
      do Insert-Param-In-BatchPub (#prcs_process_instance, #prcs_job_instance, $prcsname,
                $SysDateTime, $out_clean_up_flag)
  end-if

end-procedure

!****************************************************************************
! INITIALIZE-PAY-MESSAGE                                                    *
! Initialize Pay Message Variables                                          *
!****************************************************************************
begin-procedure INITIALIZE-PAY-MESSAGE

   let $Msg_Off_Cycle    = ' '
   let #Msg_Page         = 0
   let #Msg_Line         = 0
   let #Msg_SepChk       = 0
   let $Msg_MsgID        = ' '
   let $Msg_MsgData1     = ' '
   let $Msg_MsgData2     = ' '
   let $Msg_MsgData3     = ' '

end-procedure

!****************************************************************************
! INITIALIZE-CO-COUNTER                                                     *
! Initialize company totals.                                                *
!****************************************************************************
begin-procedure INITIALIZE-CO-COUNTER

  let #C_Checks_Processed           = 0
  let #C_RetChecks_Processed        = 0
  let #C_RetChecks_Acct_Lines       = 0
  let #C_Gross_Total                = 0
  let #C_Net_Pay_Total              = 0
  let #C_Employee_Taxes_Total       = 0
  let #C_Employee_Deductions_Total  = 0
  let #C_Employer_Taxes_Total       = 0
  let #C_Employer_Deductions_Total  = 0

end-procedure
!****************************************************************************
! CALC-COMPANY-TOTALS                                                       *
! Calculates company totals.                                                *
!****************************************************************************
begin-procedure CALC-COMPANY-TOTALS

  add #P_Checks_Processed           to #C_Checks_Processed
  add #P_RetChecks_Processed        to #C_RetChecks_Processed            !HRET
  add #P_RetChecks_Acct_lines       to #C_RetChecks_Acct_Lines
  add #P_Gross_Total                to #C_Gross_Total
  add #P_Net_Pay_Total              to #C_Net_Pay_Total
  add #P_Employee_Taxes_Total       to #C_Employee_Taxes_Total
  add #P_Employee_Deductions_Total  to #C_Employee_Deductions_Total
  add #P_Employer_Taxes_Total       to #C_Employer_Taxes_Total
  add #P_Employer_Deductions_Total  to #C_Employer_Deductions_Total

end-procedure
!****************************************************************************
! PRINT-COMPANY-TOTALS                                                      *
! Prints company totals after the completion of each company.               *
!****************************************************************************
begin-procedure PRINT-COMPANY-TOTALS

  move #C_Checks_Processed          to $C_Checks_Processed 999999999999
  move #C_Gross_Total               to $C_Gross_Total 999999999.99
  move #C_Net_Pay_Total             to $C_Net_Pay_Total 999999999.99
  move #C_Employee_Taxes_Total      to $C_Employee_Taxes_Total 999999999.99
  move #C_Employee_Deductions_Total to $C_Employee_Deductions_Total 999999999.99
  move #C_Employer_Taxes_Total      to $C_Employer_Taxes_Total 999999999.99
  move #C_Employer_Deductions_Total to $C_Employer_Deductions_Total 999999999.99

  move #C_RetChecks_Processed       to $C_RetChecks_Processed 999999999999
  move #C_RetChecks_Acct_Lines      to $C_RetChecks_Acct_Lines 999999999999

  let $Msg = '*** Company '||$Company||' Posting Summary ***'

  display ' '
  display $Msg
  display ' '
  display '   Checks Processed            :  ' noline
  display $C_Checks_Processed
  display '   Total Gross Pay             : $' noline
  display $C_Gross_Total
  display '   Total Net Pay               : $' noline
  display $C_Net_Pay_Total
  display '   Employee Deduction Total    : $' noline
  display $C_Employee_Deductions_Total
  display '   Employee Tax Total          : $' noline
  display $C_Employee_Taxes_Total
  display '   Employer Deduction Total    : $' noline
  display $C_Employer_Deductions_Total
  display '   Employer Tax Total          : $' noline
  display $C_Employer_Taxes_Total
  display ' '
  display '   Retro Dist Checks Processed :  ' noline
  display $C_RetChecks_Processed
  display '   Retro Dist Accounting Lines :  ' noline
  display $C_RetChecks_Acct_Lines

end-procedure
!****************************************************************************
! CALC-TOTALS                                                               *
! Check and Calculate paygroup totals.                                      *
!****************************************************************************
begin-procedure CALC-TOTALS

  let $Error = 'N'

  let #Check.Total_Gross       = round(#Check.Total_Gross,2)
  let #Total_Employer_Ern      = round(#Total_Employer_Ern + #Total_NP_Employer_Ern,2)
  let #Check.Net_Pay           = round(#Check.Net_Pay,2)
  let #Total_Employee_Net_Liab = round(#Total_Employee_Net_Liab,2)
  let #Check.Total_Deductions  = round(#Check.Total_Deductions,2)
  let #Total_Employee_Ded_Liab = round(#Total_Employee_Ded_Liab,2)
  let #Check.Total_Taxes       = round(#Check.Total_Taxes,2)
  let #Total_Employee_Tax_Liab = round(#Total_Employee_Tax_Liab,2)
  let #Total_Employee_CTX_Liab = round(#Total_Employee_CTX_Liab,2)
  let #Total_EE_All_Tax_Liab   = round(#Total_Employee_Tax_Liab + #Total_Employee_CTX_Liab,2)
  let #Total_Employer_Ded      = round(#Total_Employer_Ded,2)
  let #Total_Employer_Ded_Liab = round(#Total_Employer_Ded_Liab,2)
  let #Total_Employer_Tax_Liab = round(#Total_Employer_Tax_Liab,2)
  let #Total_Employer_CTX_Liab = round(#Total_Employer_CTX_Liab,2)
  let #Total_ER_All_Tax_Liab   = round(#Total_Employer_Tax_Liab + #Total_Employer_CTX_Liab,2)
  let #Total_Employer_Tax      = round(#Total_Employer_Tax,2)
  let #Total_Employer_CTX      = round(#Total_Employer_CTX,2)
  let #Total_ER_All_Taxes      = round(#Total_Employer_Tax + #Total_Employer_CTX,2)

  if #Check.Total_Gross <> #Total_Employer_Ern

     let $Error = 'Y'

     move #Check.Check        to $Check 9999999999
     move #Check.Total_Gross  to $Gross 9999999.99
     move #Total_Employer_Ern to $Earns 9999999.99

     let $Msg = '   ERROR-Earnings on Paycheck do not match earnings '||
                'distribution for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Gross Pay: $'||$Gross||'  Earnings Dist: $'||$Earns
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'PAYCHECK_NBR:'||$Check
     let $Msg_MsgData2 = 'Gross Pay: $'||$Gross
     let $Msg_MsgData3 = 'Earn Dist: $'||$Earns
     let $Msg_MsgID    = '000539'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

 if #Check.Net_Pay <> #Total_Employee_Net_Liab

     let $Error = 'Y'

     move #Check.Check             to $Check 9999999999
     move #Check.Net_Pay           to $Net   9999999.99
     move #Total_Employee_Net_Liab to $Net_Pay 9999999.99

     let $Msg = '   ERROR-Net Pay on Paycheck does not match Net Pay '||
                'distribution for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Net Pay: $'||$Net||'  Net Liability: $'||$Net_Pay
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'dist. for check:'||$Check
     let $Msg_MsgData2 = 'Net Pay : $'||$Net
     let $Msg_MsgData3 = 'Net Liab: $'||$Net_Pay
     let $Msg_MsgID    = '000546'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

 if #Check.Total_Deductions <> #Total_Employee_Ded_Liab

     let $Error = 'Y'

     move #Check.Check             to $Check 9999999999
     move #Check.Total_Deductions  to $Ded   9999999.99
     move #Total_Employee_Ded_Liab to $Deduct 9999999.99

     let $Msg = '   ERROR-Deductions on Paycheck does not match Employee '||
                'Deductions for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Total Deductions: $'||$Ded||
                '  Employee Deductions: $'||$Deduct
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'PAYCHECK_NBR '||$Check
     let $Msg_MsgData2 = 'Total    Ded: $'||$Ded
     let $Msg_MsgData3 = 'Employee Ded: $'||$Deduct
     let $Msg_MsgID      = '000540'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

 if #Check.Total_Taxes <> #Total_EE_All_Tax_Liab

     let $Error = 'Y'

     move #Check.Check             to $Check 9999999999
     move #Check.Total_Taxes       to $Tax   9999999.99
     move #Total_EE_All_Tax_Liab   to $Taxes 9999999.99

     let $Msg = '   ERROR-Taxes on Paycheck does not match Employee '||
                'Taxes for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Total Tax: $'||$Tax||'  Employee Taxes: $'||$Taxes
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'PAYCHECK_NBR:'||$Check
     let $Msg_MsgData2 = 'Total Tax:      $'||$Tax
     let $Msg_MsgData3 = 'EE Taxes: $'||$Taxes
     let $Msg_MsgID      = '000541'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

  if #Total_Employer_Ded <> #Total_Employer_Ded_Liab

     let $Error = 'Y'

     move #Check.Check             to $Check  9999999999
     move #Total_Employer_Ded      to $Ded    9999999.99
     move #Total_Employer_Ded_Liab to $Deduct 9999999.99

     let $Msg = '   ERROR-Deduction Distribution does not match Employer '||
                'Deductions for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Distribution Total: $'||$Ded||
                '  Employer Deductions: $'||$Deduct
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'PAYCHECK_NBR:'||$Check
     let $Msg_MsgData2 = 'Dist. Total: $'||$Ded
     let $Msg_MsgData3 = 'ER Ded: $'||$Deduct
     let $Msg_MsgID      = '000542'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

  if #Total_ER_All_Taxes <> #Total_ER_All_Tax_Liab

     let $Error = 'Y'

     move #Check.Check             to $Check  9999999999
     move #Total_ER_All_Taxes      to $Tax    9999999.99
     move #Total_ER_All_Tax_Liab   to $Taxes  9999999.99

     let $Msg = '   ERROR-Tax Distribution does not match Employer '||
                'Taxes for PAYCHECK_NBR '||$Check
     display $Msg

     let $Msg = '         Distribution Total: $'||$Tax||
                '  Employer Taxes: $'||$Taxes
     display $Msg
     display ' '

     do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
     let $Msg_MsgData1 = 'PAYCHECK_NBR:'||$Check
     let $Msg_MsgData2 = 'Dist. Total: $'||$Tax
     let $Msg_MsgData3 = 'ER Taxes: $'||$Taxes
     let $Msg_MsgID      = '000543'
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

  if $Error = 'Y'

     add 1 to #Errors
  end-if

  If #pay_check_loop = 1                                                      !HRET

     add 1                          to #P_Checks_Processed
     add #Check.Total_Gross         to #P_Gross_Total
     add #Check.Net_Pay             to #P_Net_Pay_Total
     add #Check.Total_Taxes         to #P_Employee_Taxes_Total
     add #Check.Total_Deductions    to #P_Employee_Deductions_Total
     add #Total_ER_All_Tax_Liab     to #P_Employer_Taxes_Total
     add #Total_Employer_Ded_Liab   to #P_Employer_Deductions_Total

  else
     If #pay_check_loop = 2                                                   !HRET
        add 1                       to #P_RetChecks_Processed                 !HRET
     end-if                                                                   !HRET
  end-if                                                                      !HRET

end-procedure
!****************************************************************************
! INITIALIZE-VARIABLES                                                      *
!****************************************************************************
begin-procedure INITIALIZE-VARIABLES

  let #Init_Count = 0

  while #Init_Count < #E

     put ' ' ' ' ' ' ' ' 0 ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '
         0 0 ' ' 0 0 0 0 0 0 0 0 0 0 0 0
     into Store_Dist(#Init_Count)
        Store_Prorate_Ind
        Store_BU_HR
        Store_SetID
        Store_DeptId
        Store_BenefitRcd
        Store_PlanType
        Store_BenefitPlan
        Store_DedCd
        Store_DedClass
        Store_DedSlstxClass
        Store_State
        Store_Locality
        Store_TaxClass
        Store_Province
        Store_TaxClassCan
        Store_Fiscal_Year
        Store_Accounting_Period
        Store_Acct_Cd
        Store_Earnings
        Store_EE_Ded_Liab
        Store_EE_Tax_Liab
        Store_EE_Ctx_Liab
        Store_Ded_Amount
        Store_Tax_Amount
        Store_CTX_Amount
        Store_ER_Ded_Liab
        Store_ER_Tax_Liab
        Store_ER_Ctx_Liab
        Store_PAY_Prorate_Ern_Amt
        Store_PAY_Sum_liab

     add 1 to #Init_Count
  end-while

  Clear-Array name=EARNS_BU

  move 'Y' to $ChartKey_Good
  move 0   to #E
  move ' ' to $Check.Off_Cycle
  move 0   to #Check.Page
  move ' ' to $Check.Page
  move 0   to #Check.Line
  move ' ' to $Check.Line
  move 0   to #Check.SepChk
  move ' ' to $Check.SepChk
  move 0   to #Check.Check
  move ' ' to $Check.Emplid
  move 0   to #Check.Total_Gross
  move 0   to #Check.Total_Taxes
  move 0   to #Check.Total_Deductions
  move 0   to #Check.Net_Pay
  move ' ' to $Check.Check_Dt
  move ' ' to $Check.PayCheck_Option
  move ' ' to $Check.Business_Unit
  move ' ' to $Check.NotProrate_SetID
  move ' ' to $Check.NotProrate_DeptID

  move 0   to #Total_Employer_Ern
  move 0   to #Total_NP_Employer_Ern
  move 0   to #Total_Employer_Tax
  move 0   to #Total_Employer_CTX
  move 0   to #Total_Employer_Ded
  move 0   to #Total_Employer_Tax_Liab
  move 0   to #Total_Employer_CTX_Liab
  move 0   to #Total_Employer_Ded_Liab
  move 0   to #Total_Employee_Tax_Liab
  move 0   to #Total_Employee_CTX_Liab
  move 0   to #Total_Employee_Ded_Liab
  move 0   to #Total_ER_Taxes_Liab
  move 0   to #Total_ER_CTX_Liab
  move 0   to #Total_ER_Ded_Liab
  move 0   to #Total_EE_Taxes_Liab
  move 0   to #Total_EE_CTX_Liab
  move 0   to #Total_EE_Ded_Liab
  move 0   to #Total_Employee_Net_Liab
  move 0   to #Total_NetPay_Liab
  move 0   to #Total_ER_NetPay_Liab
  move 0   to #Revrs_Totals
  move 0   to #Total_NP_DedTax_Amt
  move 0   to #NP_NetPay_Dist_save

  move 0   to #Can_Tax_Seqno
  move 0   to #Tax_Seqno
  move 0   to #Ded_Seqno
  move ' ' to $Prev_Company
  move ' ' to $Prev_PayGroup
  move ' ' to $Prev_Pay_End_Dt
  move ' ' to $Prev_Check.Off_Cycle
  move 0   to #Prev_Check.Page
  move 0   to #Prev_Check.Line
  move 0   to #Prev_Check.Sepchk
  move ' ' to $Prev_Province
  move ' ' to $Prev_Tax_Class_Can
  move ' ' to $Prev_State
  move ' ' to $Prev_Locality
  move ' ' to $Prev_Tax_Class
  move 0   to #Prev_Benefit_Rcd_Nbr
  move ' ' to $Prev_Plan_Type
  move ' ' to $Prev_Benefit_Plan
  move ' ' to $Prev_Dedcd
  move ' ' to $Prev_Ded_Class
  move ' ' to $Prev_Ded_Slstx_Class

end-procedure

!****************************************************************************
! RETRO_DISTRIBUTION_CHECKS                                                 *
! Selects individual paychecks within retro distribution data this calendar *
!****************************************************************************
begin-procedure RETRO_DISTRIBUTION_CHECKS

  do BUILD_RETRO_CHECKS

  let $Default_Business_Unit_HR = ' '

  let $err-statement1 = 'PAYGL02, Select Error - RETRO DISTRIBUTION CHECKS'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', and Pay End_Date '||$Pay_End_Dt
  let $Msg_MsgData1   = 'PAYCHECK-DATA see log'
  let $Msg_MsgID      = '000550'

let #pay_check_loop = 2
let #rd_entry_line = 0

WHILE #pay_check_loop <= 3

  do INITIALIZE-VARIABLES

  if #pay_check_loop = 2
    let $operation = 'RDCHECK.TOTAL_GROSS * -1'
    let $operation-2 = 'RDCHECK.TOTAL_TAXES * -1'
    let $operation-3 = 'RDCHECK.TOTAL_DEDUCTIONS * -1'
    let $operation-4 = 'RDCHECK.NET_PAY * -1'
  else
    let $operation = 'RDCHECK.TOTAL_GROSS'
    let $operation-2 = 'RDCHECK.TOTAL_TAXES'
    let $operation-3 = 'RDCHECK.TOTAL_DEDUCTIONS'
    let $operation-4 = 'RDCHECK.NET_PAY'
  end-if                                                   !HPRET

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
RDCHECK.PAY_END_DT
RDCHECK.OFF_CYCLE
RDCHECK.PAGE_NUM
RDCHECK.LINE_NUM
RDCHECK.SEPCHK
RDCHECK.PAYCHECK_NBR
RDCHECK.EMPLID
[$operation] &RDCHECK.TOTAL_GROSS=number
[$operation-2] &RDCHECK.TOTAL_TAXES=number
[$operation-3] &RDCHECK.TOTAL_DEDUCTIONS=number
[$operation-4] &RDCHECK.NET_PAY=number
RDCHECK.FORM_ID
RDCHECK.CHECK_DT
RDCHECK.PAYCHECK_OPTION
RDCHECK.PAYCHECK_ADJUST
RDCHECK.BUSINESS_UNIT
RDDEPT.USE_DISTRIBUTION
RDCHECK.PAYCHECK_STATUS

RCHK.FISCAL_YEAR
RCHK.ACCOUNTING_PERIOD
RDDEPT.BUDGET_DEPTID


  move &RDCHECK.PAY_END_DT       to $Check.PayCheck_End_Dt
  move &RDCHECK.OFF_CYCLE        to $Check.Off_Cycle
  move &RDCHECK.PAGE_NUM         to #Check.Page
  move &RDCHECK.PAGE_NUM         to $Check.Page
  move &RDCHECK.LINE_NUM         to #Check.Line
  move &RDCHECK.LINE_NUM         to $Check.Line
  move &RDCHECK.SEPCHK           to #Check.SepChk
  move &RDCHECK.SEPCHK           to $Check.SepChk
  move &RDCHECK.PAYCHECK_NBR           to #Check.Check
  move &RDCHECK.EMPLID           to $Check.Emplid
  move &RDCHECK.TOTAL_GROSS      to #Check.Total_Gross
  move &RDCHECK.TOTAL_TAXES      to #Check.Total_Taxes
  move &RDCHECK.TOTAL_DEDUCTIONS to #Check.Total_Deductions
  move &RDCHECK.NET_PAY          to #Check.Net_Pay
  move &RDCHECK.FORM_ID          to $Check.Form_ID
  move &RDCHECK.CHECK_DT         to $Check.Check_Dt
  move &RDCHECK.PAYCHECK_OPTION  to $Check.PayCheck_Option
  move &RDCHECK.PAYCHECK_ADJUST  to $Check.PayCheck_Adjust
  move &RDCHECK.BUSINESS_UNIT    to $Check.Business_Unit
  move &RDDEPT.USE_DISTRIBUTION   to $Use_Distribution
  move &RDCHECK.PAYCHECK_STATUS  to $Check.PayCheck_Status
  move &RCHK.FISCAL_YEAR         to #Fiscal_Year
  move &RCHK.ACCOUNTING_PERIOD   to #Accounting_Period

  if $Default_Business_Unit_HR <>  &RDCHECK.BUSINESS_UNIT
    let $Business_Unit_HR    = &RDCHECK.BUSINESS_UNIT
    do GET-SETID ($Business_Unit_HR, 'HR_01', $SetID_Dept)
    do GET-SETID ($Business_Unit_HR, 'HR_02', $SetID_Jobcode)
    do GET-GL-BUS-UNIT
    do GET-GL-BU-DETAILS
    do Save-Default-BU-Set
  end-if

  move $SetID_Dept               to $Check.NotProrate_SetID
  move &RDDEPT.BUDGET_DEPTID     to $Check.NotProrate_DeptID

  move &RCHK.FISCAL_YEAR         to #Def_Fiscal_Year
  move &RCHK.ACCOUNTING_PERIOD   to #Def_Accounting_Period
  do Set-Initial-Entry

  do Build-Earnings-BU-Array

  do FORMAT-ACCOUNTING-DATE

  move $Accounting_Dt to $R_Accounting_Dt

  if &RDCHECK.TOTAL_GROSS = 0 and &RDCHECK.NET_PAY <> 0
      let $Zero_Gross = 'Y'
  else
      let $Zero_Gross = 'N'
  end-if

  evaluate $ChartKey_Good
   when = 'Y'

      do EARNINGS-EXPENSES

      if ($Prorating_Flag = 'N'
       and #Check.Check <> 0)

         move #Check.Check  to $Check 999999999999

         let $Msg = '   WARNING-No Earnings were found for PAYCHECK_NBR '||
                                $Check||'.'

         display $Msg

         do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
         let $Msg_MsgID      = '000528'
         let $Msg_MsgData1   = 'PAYCHECK_NBR:'||$Check
         do PUT-PAY-MESSAGE-TO-ARRAY

      end-if

      do Reset-To-Default-BU-Set

   when = 'Y'

      do TAX-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do CAN-TAX-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do BENEFIT-EXPENSES
      do Reset-To-Default-BU-Set
   when = 'Y'

      do COUNT-ROWS
   when = 'Y'

      do DEDUCTION-and-BENEFIT-LIABILITIES
   when = 'Y'

      do TAX-LIABILITIES
   when = 'Y'

      do CAN-TAX-LIABILITIES
   when = 'Y'

      do PROCESS-CHECK
   when = 'N'
       let $OK_to_Process = 'NP'
       do ROLLBACK-TRANSACTION

      EXIT-SELECT
  end-evaluate

  do CALC-TOTALS

  if #Errors > #Errors_Allowed

     let $Msg = '   ERROR-Max paycheck errors have occurred'

     display $Msg

     let $Errors_Allowed   = to_Char(#Errors_Allowed)
     let $Msg_MsgData1     = 'Max Errors Allowed:'||$Errors_Allowed
     if #msg > #Msg_Max_Allowed
         let $Msg_Max_Allowed = to_Char(#Msg_Max_Allowed)
         let $Msg_MsgData2    = $Msg_Max_Allowed ||' written to Pay_Message'
         let $Msg_MsgData3    = 'See log for all error messages'
     end-if
     let $Msg_MsgID      = '000529'
     do PUT-PAY-MESSAGE-TO-ARRAY

     let $OK_To_Process = 'NP'

     EXIT-SELECT
  end-if

  do INITIALIZE-VARIABLES

FROM PS_PAY_CHECK RDCHECK, PS_SET_CNTRL_REC RDSETREC, PS_DEPT_TBL RDDEPT , PS_HP_PAYGL02_RCHK RCHK
WHERE RCHK.COMPANY         = $Company
  AND RCHK.PAYGROUP        = $Paygroup
  and RDCHECK.COMPANY        = RCHK.COMPANY
  AND RDCHECK.PAYGROUP       = RCHK.PAYGROUP
  AND RDCHECK.PAY_END_DT     = RCHK.PAY_END_DT
  AND RDCHECK.OFF_CYCLE      = RCHK.OFF_CYCLE
  AND RDCHECK.PAGE_NUM       = RCHK.PAGE_NUM
  AND RDCHECK.LINE_NUM       = RCHK.LINE_NUM
  AND RDCHECK.SEPCHK         = RCHK.SEPCHK
  AND RDSETREC.REC_GROUP_ID   = 'HR_01'
  AND RDSETREC.SETCNTRLVALUE  = RDCHECK.BUSINESS_UNIT
  AND RDSETREC.RECNAME        = 'DEPT_TBL'
  AND RDDEPT.SETID            = RDSETREC.SETID
  AND RDDEPT.DEPTID           = RDCHECK.DEPTID
  AND RDDEPT.USE_DISTRIBUTION = 'Y'
  AND RDDEPT.EFFDT            = (SELECT MAX(DEPT2.EFFDT) FROM PS_DEPT_TBL DEPT2
                               WHERE DEPT2.SETID  = RDDEPT.SETID
                                 AND DEPT2.DEPTID = RDDEPT.DEPTID
                                 AND DEPT2.EFFDT <= RDCHECK.PAY_END_DT
                                 AND DEPT2.EFF_STATUS = 'A')
end-SELECT


let #pay_check_loop = #pay_check_loop + 1


end-while

! Sum records and copy HR_ACCTG_LN_STG to HR_ACCTG_LINE
do CHOOSE-CHANGED-RECORDS

do COPY-TO-ACCTG-LINE

do DELETE-HR-ACCTG-LINE-RD   !retro dist integration


 ! Update all entries to have the retro gl interface flag turned on

begin-SELECT On-Error=SQL-Statement-Error
HPGL.COMPANY
HPGL.PAYGROUP
HPGL.PAY_END_DT
HPGL.OFF_CYCLE
HPGL.PAGE_NUM
HPGL.LINE_NUM
HPGL.SEPCHK

  do UPDATE_RETRO_INFACE

FROM PS_HP_PAYGL02_RCHK HPGL

end-SELECT



end-procedure

!****************************************************************************
! GET-FROM-CURRENCY-CD                                                      *
!****************************************************************************
begin-procedure GET-FROM-CURRENCY-CD

  let $From_Found = 'N'

  let $err-statement1 = 'PAYGL02, Select Error - GET-FROM-CURRENCY-CD'
  let $err-statement2 = 'Bind Variables: Company '||$Company||
                        ', PayGroup '||$Paygroup
  let $Msg_MsgData1 = 'GET-FROM-CURRENCY-CD'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT On-Error=SQL-Statement-Error
PYG.CURRENCY_CD
PYG.RT_TYPE
PYG.RT_CONV_DT

  move 'Y'                     to $From_Found
  let $currency_cd_hr       = &PYG.CURRENCY_CD
  let $hr_rate_type         = &PYG.RT_TYPE
  let $rt_conv_dt_cd        = &PYG.RT_CONV_DT
  evaluate $rt_conv_dt_cd
    when = 'T'
       let $Rate_Conversion_Date = $AsOfToday
    when = 'C'
       let $Rate_Conversion_Date = $CAL_CHECK_DT
    when = 'P'
       let $Rate_Conversion_Date = $CAL_PAY_END_DT
  end-evaluate

FROM  PS_PAYGROUP_TBL PYG
WHERE PYG.COMPANY  = $Company
AND   PYG.PAYGROUP = $Paygroup
AND   PYG.EFFDT =
 (SELECT MAX(EFFDT) FROM PS_PAYGROUP_TBL PYG1
   WHERE PYG1.COMPANY  = PYG.COMPANY
     AND PYG1.PAYGROUP = PYG.PAYGROUP
     AND PYG1.EFFDT <= $AsOfDate)
end-SELECT

  if $From_Found = 'N'

     let $OK_To_Process = 'NC'
     let $Msg = 'ERROR-HR Currency not found for Company '||$Company||
                ', Paygroup '||$Paygroup

     display $Msg

     let $Msg_MsgID      = '000544'
     let $Msg_MsgData1 = ' '
     let $Msg_MsgData2 = ' '
     let $Msg_MsgData3 = ' '
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

end-procedure

!****************************************************************************
! GET-SETID                                                                 *
!****************************************************************************
begin-procedure Get-Setid ($business_unit,$record_group,:$Setid)

begin-SELECT

SETID

FROM PS_SET_CNTRL_GROUP WHERE SETCNTRLVALUE = $business_unit
     AND REC_GROUP_ID = $record_group
end-SELECT

let $Setid = &SETID

end-procedure

!****************************************************************************
! GET-GL-BUS-UNIT                                                           *
!****************************************************************************

begin-procedure GET-GL-BUS-UNIT

let $Business_Unit_GL = ' '

! Get GL Business Unit

begin-SELECT

BUSINESS_UNIT_GL
  let $Business_Unit_GL = &BUSINESS_UNIT_GL

FROM PS_BUS_UNIT_TBL_HR
WHERE BUSINESS_UNIT =  $Business_Unit_HR

end-SELECT

end-procedure

!****************************************************************************
! GET-GL-CURRENCY                                                           *
!****************************************************************************

begin-procedure GET-GL-CURRENCY

begin-SELECT

BASE_CURRENCY

FROM  PS_BUS_UNIT_TBL_GL
WHERE BUSINESS_UNIT = $Business_Unit_GL
end-SELECT

let $Currency_Cd_GL = &BASE_CURRENCY

end-procedure

!****************************************************************************
! GET-GL-BU-DETAILS                                                         *
!****************************************************************************
begin-procedure GET-GL-BU-DETAILS

  do GET-GL-CURRENCY
  if isnull($currency_cd_hr)
     let $currency_cd_hr = $Currency_Cd_GL
  end-if

  do GET-JOURNAL-TEMPLATE
  do GET-SETID-FOR-GL-CALENDAR

end-procedure

!****************************************************************************
! GET-JOURNAL-TEMPLATE                                                      *
!****************************************************************************
begin-procedure GET-JOURNAL-TEMPLATE

  let $Jrnl_Template_Found = 'N'

  let $err-statement1 = 'PAYGL02, Select Error - GET-JOURNAL-TEMPLATE'
  let $err-statement2 = 'Bind Variables: BUSINESS UNIT '||$Business_Unit_GL||
                        'Effective Status A, and Effective date <= '||
                        $Pay_End_Dt
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1 = 'GET-JOURNAL-TEMPLATE see log'
  let $Msg_MsgData2 = 'BU:'||$Business_Unit_GL
  let $Msg_MsgData3   = 'EFFDT<='||$Pay_End_Dt_DMY||' Status A'
  let $Msg_MsgID    = '000550'

begin-SELECT On-Error=SQL-Statement-Error

GL_TMPLT.APPL_JRNL_ID

  move 'Y'                    to $Jrnl_Template_Found
  move &GL_TMPLT.APPL_JRNL_ID to $Appl_Jrnl_ID

FROM PS_GL_JRNL_TMPLT GL_TMPLT,
     PS_SET_CNTRL_REC SETREC,
     PS_JRNLGEN_APPL_ID JRNLGEN
WHERE GL_TMPLT.BUSINESS_UNIT_GL = $Business_Unit_GL
  AND SETREC.SETCNTRLVALUE      = GL_TMPLT.BUSINESS_UNIT_GL
  AND SETREC.REC_GROUP_ID       = 'FS_15'
  AND SETREC.RECNAME            = 'JRNLGEN_APPL_ID'
  AND JRNLGEN.SETID             = SETREC.SETID
  AND JRNLGEN.APPL_JRNL_ID      = GL_TMPLT.APPL_JRNL_ID
  AND JRNLGEN.EFFDT             = (SELECT MAX(JRNLGEN1.EFFDT)
                                     FROM PS_JRNLGEN_APPL_ID JRNLGEN1
                                    WHERE JRNLGEN1.SETID        = JRNLGEN.SETID
                                      AND JRNLGEN1.APPL_JRNL_ID = JRNLGEN.APPL_JRNL_ID
                                      AND JRNLGEN1.EFFDT        <= $Pay_End_Dt
                                      AND JRNLGEN1.EFF_STATUS   = 'A')
end-SELECT

  if $Jrnl_Template_Found = 'N'

     let $OK_To_Process = 'NC'
     let $Msg = '   ERROR-Appl Journal ID was '||
                'not found for Business Unit '||$Business_Unit_GL||'.'

     display $Msg

     let $Msg_MsgID    = '000523'
     let $Msg_MsgData1 = 'Business Unit:'||$Business_Unit_GL
     let $Msg_MsgData2 = ' '
     let $Msg_MsgData3 = ' '
     do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

end-procedure
!****************************************************************************
! GET-SETID-FOR-GL-CALENDAR                                                 *
!****************************************************************************
begin-procedure GET-SETID-FOR-GL-CALENDAR

  let $Calendar_Setid_Found = 'N'

  let $err-statement1 = 'PAYGL02, Select Error - GET-SETID-FOR-GL-CALENDAR'
  let $err-statement2 = 'Bind Variables: BUSINESS UNIT '||$Business_Unit_GL||
                        'REC_GROUP_ID = FS_02, and RECNAME = CAL_DETP_TBL '
  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1 = 'GET-SETID-FOR-GL-CALENDAR'
  let $Msg_MsgData2 = 'BU:'||$Business_Unit_GL ||' REC_GROUP_ID:FS_02'
  let $Msg_MsgData3 = 'RECNAME:CAL_DETP_TBL see log'
  let $Msg_MsgID    = '000550'

begin-SELECT On-Error=SQL-Statement-Error
SETREC.SETID

  move 'Y'           to $Calendar_Setid_Found
  move &SETREC.SETID to $SetId_GL_Calendar

FROM PS_SET_CNTRL_REC SETREC
WHERE SETREC.SETCNTRLVALUE = $Business_Unit_GL
  AND SETREC.REC_GROUP_ID  = 'FS_02'
  AND SETREC.RECNAME       = 'CAL_DETP_TBL'
end-SELECT

  if $Calendar_Setid_Found = 'N'

    let $OK_To_Process = 'NC'
    let $Msg = '   ERROR-GL Calendar SETID not found for Business Unit'||
                $Business_Unit_GL||'.'

    display $Msg

    let $Msg_MsgID     = '000524'
    let $Msg_MsgData1 = 'Business Unit:'||$Business_Unit_GL
    do PUT-PAY-MESSAGE-TO-ARRAY

  end-if

end-procedure

!****************************************************************************
! GET-EXCH-RATE                                                             *
!****************************************************************************
begin-procedure GET-EXCH-RATE ($from, $to, $rtype, :#rate_mult, :#rate_div)

let #rate_mult = 1
let #rate_div  = 1

if $rtype = ' '
    let $rtype = 'OFFIC'
end-if

begin-SELECT

RATE_MULT
RATE_DIV

  let #rate_mult = &RATE_MULT
  let #rate_div  = &RATE_DIV

FROM PS_RT_DFLT_VW A
WHERE FROM_CUR = $from AND TO_CUR = $to
  AND RT_TYPE = $rtype  AND EFFDT
  = ( SELECT MAX(EFFDT) FROM PS_RT_DFLT_VW WHERE FROM_CUR = A.FROM_CUR
  AND TO_CUR = A.TO_CUR AND RT_TYPE = A.RT_TYPE
  AND EFFDT <= $_Rate_Conversion_Date )

end-SELECT


end-procedure
!****************************************************************************
! CONVERT-AMOUNT                                                            *
!****************************************************************************
begin-procedure CONVERT-AMOUNT ($from, $to, $rtype, #hr_amount, :#gl_amount, :#rate_mult,
                                 :#rate_div)

let $currency_error =
   cond($from=$to and rtrim($from,' ')='','Blank PY&GL Currency-Chk BUs',
   cond(rtrim($from,' ')='','Blank PY currency: '||$_business_unit_hr,
   cond(rtrim($to,' ')='' and rtrim($_business_unit_gl,' ')='',
        'No GL Curr, no GL BU for ' || $_business_unit_hr
   cond(rtrim($to,' ')='','No GL Curr',
    'None'))))

if $currency_error <> 'None'
   display ' '
   display $currency_error
   display 'Please correct and re-run'
   let $_Msg_MsgData1 = $currency_error
   let $_Msg_MsgID    = '000547'
   do PUT-PAY-MESSAGE-TO-ARRAY
   DO STOP-PROGRAM
else
  if $from = $to
          let #gl_amount = #hr_amount
          let #rate_mult = 1
          let #rate_div  = 1
  else
        do Get-Exch-Rate ($from, $to, $rtype, #rate_mult, #rate_div)
        if #rate_div = 0
           display ' '
           display 'Divisor rate is zero for currency codes :' noline
           display $from noline
           display ' and '  noline
           display $to
           display 'please correct and re-run'

           DO MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
           let $_Msg_MsgData1 = 'From HR Currency: '||$from
           let $_Msg_MsgData2 = 'To   GL Currency: '||$to
           let $_Msg_MsgID      = '000545'
           do PUT-PAY-MESSAGE-TO-ARRAY
           DO STOP-PROGRAM
        end-if
        let #gl_amount = #hr_amount * #rate_mult/#rate_div
  end-if
        if #rate_div = 0 or #rate_mult = 0
           display ' '
           display 'Rates are invalid for currency codes :' noline
           display $from noline
           display ' and ' noline
           display $to
           display 'please correct and re-run'

           let $_Msg_MsgData1 = 'From HR Currency: '||$from
           let $_Msg_MsgData2 = 'To   GL Currency: '||$to
           let $_Msg_MsgData3 = ' '
           let $_Msg_MsgID      = '000546'
           do PUT-PAY-MESSAGE-TO-ARRAY
           DO STOP-PROGRAM
        end-if
end-if

end-procedure

!****************************************************************************
! GET-CURRENCY-DECIMALS                                                     *
!****************************************************************************
begin-procedure GET-CURRENCY-DECIMALS ($Currency, :#Decimals)

begin-SELECT

DECIMAL_POSITIONS

  move &DECIMAL_POSITIONS to #decimals

FROM PS_CURRENCY_CD_TBL A
WHERE CURRENCY_CD = $Currency
  AND EFF_STATUS = 'A' AND EFFDT
  = ( SELECT MAX(EFFDT) FROM PS_CURRENCY_CD_TBL WHERE CURRENCY_CD = A.CURRENCY_CD
  AND EFF_STATUS = A.EFF_STATUS AND EFFDT <= $_Rate_Conversion_Date )

end-SELECT

end-procedure
!****************************************************************************
! SELECT-RUN-ID-HISTORY                                                     *
!****************************************************************************
begin-procedure Select-Run-Id-History

   let #Run_ID_Found = 0

begin-SELECT
PH.RUN_ID

   if rtrim(&PH.RUN_ID, ' ') <> ''
       let #Run_ID_Found = 1
   end-if

FROM PS_PAY_CALENDAR PH
WHERE  PH.COMPANY    = $run_company
  AND  PH.PAYGROUP   = $run_paygroup
  AND  PH.PAY_END_DT = $run_pay_end_dt

END-SELECT


   if #Run_ID_Found
      let $Run_Id = rtrim(&PH.RUN_ID,' ')
   else
      let $Run_Id = ' '
   end-if

end-procedure
!****************************************************************************
! Procedure: MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE                              *
! Descr:     Move PAYCHECK keys fields to message variables                 *
!****************************************************************************
begin-procedure MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE

  move $Check.Off_Cycle  to $Msg_Off_Cycle
  move #Check.Page       to #Msg_Page
  move #Check.Line       to #Msg_Line
  move #Check.Sepchk     to #Msg_SepChk
  move ' '               to $Msg_MsgData1
  move ' '               to $Msg_MsgData2
  move ' '               to $Msg_MsgData3

end-procedure MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE

!****************************************************************************
! Procedure: PUT-PAY-MESSAGE-TO-ARRAY                                       *
! Descr:     Put error message to message array                             *
!****************************************************************************
begin-procedure PUT-PAY-MESSAGE-TO-ARRAY

   let #M = 0
   let $Msg_Found = 'N'

   while (#M < #Msg and $Msg_Found = 'N')

     GET $Err_Company
         $Err_PayGroup
         $Err_Pay_End_Dt
         $Err_Off_Cycle
         #Err_Page
         #Err_Line
         #Err_SepChk
         $Err_MsgID
         $Err_MsgData1
         $Err_MsgData2
         $Err_MsgData3
     FROM Pay_Messages(#M)
          Msg_Company
          Msg_PayGroup
          Msg_Pay_End_Dt
          Msg_Off_Cycle
          Msg_Page
          Msg_Line
          Msg_SepChk
          Msg_MsgID
          Msg_MsgData1
          Msg_MsgData2
          Msg_MsgData3

     if $Err_Company      = $Msg_Company     and
        $Err_Paygroup     = $Msg_Paygroup    and
        $Err_Pay_End_Dt   = $Msg_Pay_End_Dt  and
        $Err_off_Cycle    = $Msg_Off_Cycle   and
        #Err_Page         = #Msg_Page        and
        #Err_Line         = #Msg_Line        and
        #Err_SepChk       = #Msg_SepChk      and
        $Err_MsgID        = $Msg_MsgID       and
        $Err_MsgData1     = $Msg_MsgData1    and
        $Err_MsgData2     = $Msg_MsgData2    and
        $Err_MsgData3     = $Msg_MsgData3

         let $Msg_Found = 'Y'
     else
         add 1 to #M
     end-if

   end-while

   if #Msg < #Msg_Max_Allowed and
      $Msg_Found = 'N'

       PUT $Msg_Company
           $Msg_PayGroup
           $Msg_Pay_End_Dt
           $Msg_Off_Cycle
           #Msg_Page
           #Msg_Line
           #Msg_SepChk
           $Msg_MsgID
           $Msg_MsgData1
           $Msg_MsgData2
           $Msg_MsgData3
           $Msg_Run_ID
           #Msg_PrcsInstance
       INTO Pay_Messages(#Msg)
            Msg_Company
            Msg_PayGroup
            Msg_Pay_End_Dt
            Msg_Off_Cycle
            Msg_Page
            Msg_Line
            Msg_SepChk
            Msg_MsgID
            Msg_MsgData1
            Msg_MsgData2
            Msg_MsgData3
            Msg_Run_ID
            Msg_PrcsInstance

       add 1 to #Msg

       do INITIALIZE-PAY-MESSAGE
   end-if

end-procedure PUT-PAY-MESSAGE-TO-ARRAY

!****************************************************************************
! Procedure: WRITE-PAY-MESSAGE                                              *
! Descr:     Write Pay Messages in Array to PAY_MESSAGE table               *
!****************************************************************************
begin-procedure WRITE-PAY-MESSAGE

   let #M = 0

   while #M < #Msg

     GET $Msg_Company
         $Msg_PayGroup
         $Msg_Pay_End_Dt
         $Msg_Off_Cycle
         #Msg_Page
         #Msg_Line
         #Msg_SepChk
         $Msg_MsgID
         $Msg_MsgData1
         $Msg_MsgData2
         $Msg_MsgData3
         $Msg_Run_ID
         #Msg_PrcsInstance
     FROM Pay_Messages(#M)
          Msg_Company
          Msg_PayGroup
          Msg_Pay_End_Dt
          Msg_Off_Cycle
          Msg_Page
          Msg_Line
          Msg_SepChk
          Msg_MsgID
          Msg_MsgData1
          Msg_MsgData2
          Msg_MsgData3
          Msg_Run_ID
          Msg_PrcsInstance

     do INSERT-INTO-PAY-MESSAGE-TABLE
     add 1 to #M

   end-while

   let #Msg = 0

end-procedure WRITE-PAY-MESSAGE

!****************************************************************************
! Procedure: INSERT-INTO-PAY-MESSAGE-TABLE                                  *
! Descr:     Inserts a PAY_MESSAGE record                                   *
!****************************************************************************
begin-procedure INSERT-INTO-PAY-MESSAGE-TABLE

  let $err-statement1 = 'PAYGL02, Insert Error - PAY_MESSAGE'
  let $err-statement2 = 'Not all error messages were written ' ||
                         'to PAY_MESSAGE table. '||
                         'Bind Variables: Company: '||$Msg_Company ||
                         ', Pay Group: ' || $Msg_PayGroup ||
                         ', Pay End Date: ' || $Msg_Pay_End_Dt ||
                         ', OffCycle: ' || $Msg_Off_Cycle ||
                         ', PAGE_NUM: ' || $Check.Page ||
                         ', LINE_NUM: ' || $Check.Line ||
                         ', Sep Chk: ' || $Check.SepChk ||
                         ', MsgID: ' || $Msg_MsgID||
                         ', MsgData1: ' || $Msg_MsgData1 ||
                         ', MsgData2: ' || $Msg_MsgData2 ||
                         ', MsgData3: ' || $Msg_MsgData3 ||
                         ', Run ID: ' || $Msg_Run_ID ||
                         ', Process Instance: '|| $Msg_PrcsInstance

begin-SQL  On-Error=Error-Display
INSERT INTO PS_PAY_MESSAGE ( COMPANY,
                             PAYGROUP,
                             PAY_END_DT,
                             OFF_CYCLE,
                             PAGE_NUM,
                             LINE_NUM,
                             SEPCHK,
                             MSGID,
                             MSGDATA1,
                             MSGDATA2,
                             MSGDATA3,
                             RUN_ID,
                             PRCSINSTANCE )
                       VALUES ( $Msg_Company,
                                $Msg_PayGroup,
                                $Msg_Pay_End_Dt,
                                $Msg_Off_Cycle,
                                #Msg_Page,
                                #Msg_Line,
                                #Msg_SepChk,
                                $Msg_MsgID,
                                $Msg_MsgData1,
                                $Msg_MsgData2,
                                $Msg_MsgData3,
                                $Msg_Run_ID,
                                #Msg_PrcsInstance )

end-SQL

end-procedure INSERT-INTO-PAY-MESSAGE-TABLE

!******************************************************************************
! DELETE-PAY-MESSAGE                                                          *
! Select pay cycles to run from pay calendar and build an array for use in    *
! the main driving procedure.                                                 *
!******************************************************************************
begin-procedure DELETE-PAY-MESSAGE

  let $err-statement1 = 'PAYGL02, Select Error - DELETE-PAY-MESSAGE'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar

  let $Msg_MsgData1 = 'DELETE-PAY-MESSAGE see log'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID        = '000550'

begin-SELECT On-Error=SQL-Statement-Error
CAL2.COMPANY
CAL2.PAYGROUP
CAL2.PAY_END_DT

       do DELETE-PAY-MESSAGE-ROWS

FROM  PS_PAY_CALENDAR CAL2
WHERE [$SlctCalendar2]
ORDER BY CAL2.COMPANY, CAL2.PAYGROUP, CAL2.PAY_END_DT
end-SELECT

end-procedure
!******************************************************************************
! DELETE-PAY-MESSAGE-ROWS                                                     *
! Descr:     Deletes PAY_MESSAGE record                                       *
!                                                                             *
!******************************************************************************
begin-procedure DELETE-PAY-MESSAGE-ROWS

  let $err-statement1 = 'PAYGL02, Delete Error - DELETE-PAY-MESSAGE-ROWS'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar

begin-SQL On-Error=Error-Display

DELETE FROM  PS_PAY_MESSAGE
WHERE COMPANY    = &CAL2.COMPANY
  AND PAYGROUP   = &CAL2.PAYGROUP
  AND PAY_END_DT = &CAL2.PAY_END_DT
end-SQL

end-procedure


!******************************************************************************
! DELETE-PAY-ISS-STG-PUB                                                      *
! Descr:     Deletes PAY ISS STG PUB record                                   *
!                                                                             *
!******************************************************************************
begin-procedure DELETE-PAY-ISS-STG-PUB

  let $err-statement1 = 'PAYGL02, Delete-Error - DELETE-PAY-ISS-STG-PUB'
  let $err-statement2 = ' '

  if $Run_ID = ''
      let $Msg_Company    = $Company
      let $Msg_Paygroup   = $Paygroup
      let $Msg_Pay_End_Dt = $Pay_End_Dt
      let $Msg_Run_ID     = ' '
  else
      let $Msg_Run_ID     = $Run_ID
  end-if
  let $Msg_MsgData1 = 'DELETE-PAY-ISS-STG-PUB see log'
  let $Msg_MsgData2 = 'TBL:PS_PAY_ISS_STG_PUB'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000553'

begin-SQL on-error=sql-statement-error
DELETE FROM PS_PAY_ISS_STG_PUB
end-SQL

end-procedure


!******************************************************************************
! DELETE-HR-ACCTG-LINE-RD                                                     *
! Descr:     Deletes HR-ACCTG_LINE_RD                                         *
!                                                                             *
!******************************************************************************
begin-procedure DELETE-HR-ACCTG-LINE-RD

  let $err-statement1 = 'PAYGL02, Delete-Error - DELETE-HR-ACCTG-LINE-RD '
  let $err-statement2 = ' '


begin-SQL on-error=sql-statement-error
DELETE FROM PS_HR_ACCTG_LN_RD
end-SQL

end-procedure


!****************************************************************************
! DELETE-RUN-CONTROL                                                        *
! Deletes run control information from run control table.                   *
!****************************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'PAYGL02, Delete-Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Key Values: TABLE PS_RC_PAYINIT' ||
                        ', OPRID ' || $PRCS_OPRID ||
                        ', RUN_CNTL_ID ' || $PRCS_RUN_CNTL_ID
  if $Run_ID = ''
      let $Msg_Company    = $Company
      let $Msg_Paygroup   = $Paygroup
      let $Msg_Pay_End_Dt = $Pay_End_Dt
      let $Msg_Run_ID     = ' '
  else
      let $Msg_Run_ID     = $Run_ID
  end-if
  let $Msg_MsgData1 = 'DELETE-RUN-CONTROL see log'
  let $Msg_MsgData2 = 'TBL:PS_RC_PAYINIT OPRID:' || $PRCS_OPRID
  let $Msg_MsgData3 = $PRCS_RUN_CNTL_ID
  let $Msg_MsgID    = '000553'


begin-SQL On-Error=SQL-Statement-Error

DELETE FROM PS_RC_PAYINIT
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure

!****************************************************************************
! SQL-STATEMENT-ERROR                                                       *
! Write error message to PAY_MESSAGE table & SQR log                        *
!****************************************************************************
begin-procedure SQL-STATEMENT-ERROR

  if #SQL-Status <> 0

    DISPLAY 'SQL-STATEMENT-ERROR '

    display $err-statement1
    display $err-statement2
    display ' Error : ' noline
    display $SQL-error
    display ' SQL Status : ' noline
    display #SQL-Status

    do ROLLBACK-TRANSACTION
    do PUT-PAY-MESSAGE-TO-ARRAY
    do WRITE-PAY-MESSAGE
    do COMMIT-TRANSACTION
    stop

  end-if

end-procedure

!****************************************************************************
! STOP-PROGRAM                                                              *
! Rollback non committed transactions, write error messages and exit program*
!****************************************************************************
begin-procedure STOP-PROGRAM

  DISPLAY 'STOP-PROGRAM '

  do ROLLBACK-TRANSACTION
  do WRITE-PAY-MESSAGE
  do COMMIT-TRANSACTION
  stop

end-procedure




!***********************************
begin-procedure Write-Payment-Issued
!***********************************

  let $Disp_Empl_Rcd    = #Empl_Rcd
  let $Disp_Ex_Line_Nbr = #Ex_Line_Nbr

  let $err-statement1 = 'PAYGL02, Insert-Error - Write-Payment-Issued'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_ISS_STG_PUB'||
                        ', EMPLID '||$Check.Emplid||
                        ', EMPL_RCD '||$Disp_Empl_Rcd||
                        ', EX_DOC_ID '||$Ex_Doc_Id||
                        ', EX_DOC_TYPE '||$Ex_Doc_Type||
                        ', EX_LINE_NBR '||$Disp_Ex_Line_Nbr

Begin-SQL ON-ERROR=SQL-Statement-Error
   INSERT INTO PS_PAY_ISS_STG_PUB
          (EMPLID,
           EMPL_RCD,
           EX_DOC_ID,
           EX_DOC_TYPE,
           EX_LINE_NBR,
           MONETARY_AMOUNT,
           CURRENCY_CD,
           PAYCHECK_STATUS,
           PAYCHECK_NBR,
           CHECK_DT,
           FORM_ID,
           ACCOUNT,
           AUDIT_ACTN,
           PROCESS_INSTANCE
           )
   VALUES
          ($Check.Emplid,
           #Empl_Rcd,
           $Ex_Doc_Id,
           $Ex_Doc_Type,
           #Ex_Line_Nbr,
           #Monetary_Amount,
           $Currency_Cd_Gl,
           $Check.PayCheck_Status,
           #Check.check,
           $Check.Check_Dt,
           $Check.Form_Id,
           $Account,
           'A',
           #Prcs_Process_Instance
           );
End-SQL

end-procedure

!**********************************
begin-procedure Find-Payment-Issued
!**********************************

Begin-SELECT
EX_DOC_ID

  let $Payment_Exist = 'Y'

FROM  PS_PAY_ISS_STG_PUB
WHERE EMPLID        = $Check.Emplid
  AND EMPL_RCD      = #Empl_Rcd
  AND EX_DOC_ID     = $Ex_Doc_Id
  AND EX_DOC_TYPE   = $Ex_Doc_Type
  AND EX_LINE_NBR   = #Ex_Line_Nbr
End-Select

end-procedure

!************************************
begin-procedure Update-Payment-Issued
!************************************

  let $Disp_Empl_Rcd    = #Empl_Rcd
  let $Disp_Ex_Line_Nbr = #Ex_Line_Nbr

  let $err-statement1 = 'PAYGL02, Update-Error - Update-Payment-Issued'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_ISS_STG_PUB'||
                        ', EMPLID '||$Check.Emplid||
                        ', EMPL_RCD '||$Disp_Empl_Rcd||
                        ', EX_DOC_ID '||$Ex_Doc_Id||
                        ', EX_DOC_TYPE '||$Ex_Doc_Type||
                        ', EX_LINE_NBR '||$Disp_Ex_Line_Nbr

Begin-SQL ON-ERROR=SQL-Statement-Error
   UPDATE PS_PAY_ISS_STG_PUB
          SET MONETARY_AMOUNT = MONETARY_AMOUNT + #Monetary_Amount
          WHERE EMPLID        = $Check.Emplid
            AND EMPL_RCD      = #Empl_Rcd
            AND EX_DOC_ID     = $Ex_Doc_Id
            AND EX_DOC_TYPE   = $Ex_Doc_Type
            AND EX_LINE_NBR   = #Ex_Line_Nbr
End-SQL

end-procedure

!******************************************************************************
! REMOVE-ZERO-EXPENSE-PAYMENTS                                                *
!******************************************************************************
begin-procedure Remove-Zero-Expense-Payments

  let $err-statement1 = 'PAYGL02, Delete-Error - REMOVE-ZERO-EXPENSE-PAYMENTS'
  let $err-statement2 = ' '

begin-SQL on-error=sql-statement-error
DELETE FROM PS_PAY_ISS_STG_PUB
WHERE MONETARY_AMOUNT = 0
end-SQL

end-procedure

!****************************************************************************
! WRAPUP                                                                    *
!****************************************************************************
begin-procedure WRAPUP

  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

end-procedure


!****************************************************************************
! BUILD_RETRO_CHECKS                                                        *
! This process builds a temporary table to hande retro distribution         *
! A temp table is used because using OR's between tables will take forever  *
! for a select to execute. This table is then used as the check driver      *
! joining to check in loops 2 and 3                                         *
!****************************************************************************
begin-procedure BUILD_RETRO_CHECKS

  let $err-statement1 = 'PAYGL02, Delete Error - BUILD RETRO CHECKS'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRO_CHECKS'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000553'

begin-SQL On-Error=SQL-Statement-Error
DELETE FROM PS_HP_PAYGL02_RCHK
end-SQL

  let $err-statement1 = 'PAYGL02, Select Error - BUILD RETRO CHECKS'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRO_CHECKS'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A4.COMPANY
A4.PAYGROUP
A4.PAY_END_DT
A4.OFF_CYCLE
A4.PAGE_NUM
A4.LINE_NUM
A4.SEPCHK
A4.BUSINESS_UNIT
B4.HP_RETDIST_PAY_DT
B4.FISCAL_YEAR
B4.ACCOUNTING_PERIOD

  move &A4.COMPANY           to $RD_COMPANY
  move &A4.PAYGROUP          to $RD_PAYGROUP
  move &A4.PAY_END_DT        to $RD_PAY_END_DT
  move &A4.OFF_CYCLE         to $RD_OFF_CYCLE
  move &A4.PAGE_NUM          to #RD_PAGE_NUM
  move &A4.LINE_NUM          to #RD_LINE_NUM
  move &A4.SEPCHK            to #RD_SEPCHK
  move &A4.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B4.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  move &B4.FISCAL_YEAR       to #RD_FISCAL_YEAR
  move &B4.ACCOUNTING_PERIOD to #RD_ACCOUNTING_PERIOD
  do INSERT-RETROCHK

FROM PS_PAY_CHECK A4, PS_PAY_ERN_DIST B4
WHERE A4.COMPANY = $Company AND A4.PAYGROUP = $PayGroup AND
 A4.COMPANY = B4.COMPANY AND A4.PAYGROUP = B4.PAYGROUP AND
 A4.PAY_END_DT = B4.PAY_END_DT AND A4.OFF_CYCLE = B4.OFF_CYCLE AND
 A4.PAGE_NUM = B4.PAGE_NUM AND A4.LINE_NUM = B4.LINE_NUM AND
 A4.SEPCHK = B4.SEPCHK AND B4.HP_RDIST_GL_INFACE = 'N' AND
 B4.REVERSED = 'N' AND
 B4.HP_RETDIST_PAY_DT = $Pay_End_Dt AND
 B4.HP_RETDIST_STATUS = '0'
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - BUILD RETRO CHECKS'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRO_CHECKS'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A5.COMPANY,
A5.PAYGROUP,
A5.PAY_END_DT,
A5.OFF_CYCLE,
A5.PAGE_NUM,
A5.LINE_NUM,
A5.SEPCHK,
A5.BUSINESS_UNIT,
B5.HP_RETDIST_PAY_DT
B5.FISCAL_YEAR
B5.ACCOUNTING_PERIOD

  move &A5.COMPANY           to $RD_COMPANY
  move &A5.PAYGROUP          to $RD_PAYGROUP
  move &A5.PAY_END_DT        to $RD_PAY_END_DT
  move &A5.OFF_CYCLE         to $RD_OFF_CYCLE
  move &A5.PAGE_NUM          to #RD_PAGE_NUM
  move &A5.LINE_NUM          to #RD_LINE_NUM
  move &A5.SEPCHK            to #RD_SEPCHK
  move &A5.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B5.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  move &B5.FISCAL_YEAR       to #RD_FISCAL_YEAR
  move &B5.ACCOUNTING_PERIOD to #RD_ACCOUNTING_PERIOD

  do INSERT-RETROCHK

FROM PS_PAY_CHECK A5, PS_PAY_DED_DIST B5
WHERE A5.COMPANY = $Company AND A5.PAYGROUP = $PayGroup AND
 A5.COMPANY = B5.COMPANY AND A5.PAYGROUP = B5.PAYGROUP AND
 A5.PAY_END_DT = B5.PAY_END_DT AND A5.OFF_CYCLE = B5.OFF_CYCLE AND
 A5.PAGE_NUM = B5.PAGE_NUM AND A5.LINE_NUM = B5.LINE_NUM AND
 A5.SEPCHK = B5.SEPCHK AND B5.HP_RDIST_GL_INFACE = 'N' AND
 B5.REVERSED = 'N' AND
 B5.HP_RETDIST_PAY_DT = $Pay_End_Dt AND
 B5.HP_RETDIST_STATUS = '0'             AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RCHK C5
        WHERE C5.COMPANY = B5.COMPANY AND
        C5.PAYGROUP = B5.PAYGROUP AND
        C5.PAY_END_DT = B5.PAY_END_DT AND
        C5.OFF_CYCLE = B5.OFF_CYCLE AND
        C5.PAGE_NUM = B5.PAGE_NUM AND
        C5.LINE_NUM = B5.LINE_NUM AND
        C5.SEPCHK = B5.SEPCHK)
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - BUILD RETRO CHECKS'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRO_CHECKS'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A6.COMPANY,
A6.PAYGROUP,
A6.PAY_END_DT,
A6.OFF_CYCLE,
A6.PAGE_NUM,
A6.LINE_NUM,
A6.SEPCHK,
A6.BUSINESS_UNIT,
B6.HP_RETDIST_PAY_DT
B6.FISCAL_YEAR
B6.ACCOUNTING_PERIOD

  move &A6.COMPANY           to $RD_COMPANY
  move &A6.PAYGROUP          to $RD_PAYGROUP
  move &A6.PAY_END_DT        to $RD_PAY_END_DT
  move &A6.OFF_CYCLE         to $RD_OFF_CYCLE
  move &A6.PAGE_NUM          to #RD_PAGE_NUM
  move &A6.LINE_NUM          to #RD_LINE_NUM
  move &A6.SEPCHK            to #RD_SEPCHK
  move &A6.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B6.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  move &B6.FISCAL_YEAR       to #RD_FISCAL_YEAR
  move &B6.ACCOUNTING_PERIOD to #RD_ACCOUNTING_PERIOD
  do INSERT-RETROCHK

FROM PS_PAY_CHECK A6, PS_PAY_TAX_DIST B6
WHERE A6.COMPANY = $Company AND A6.PAYGROUP = $PayGroup AND
 A6.COMPANY = B6.COMPANY AND A6.PAYGROUP = B6.PAYGROUP AND
 A6.PAY_END_DT = B6.PAY_END_DT AND A6.OFF_CYCLE = B6.OFF_CYCLE AND
 A6.PAGE_NUM = B6.PAGE_NUM AND A6.LINE_NUM = B6.LINE_NUM AND
 A6.SEPCHK = B6.SEPCHK AND B6.HP_RDIST_GL_INFACE = 'N' AND
 B6.REVERSED = 'N' AND
 B6.HP_RETDIST_PAY_DT = $Pay_End_Dt AND
 B6.HP_RETDIST_STATUS = '0' AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RCHK C6
        WHERE C6.COMPANY = B6.COMPANY AND
        C6.PAYGROUP = B6.PAYGROUP AND
        C6.PAY_END_DT = B6.PAY_END_DT AND
        C6.OFF_CYCLE = B6.OFF_CYCLE AND
        C6.PAGE_NUM = B6.PAGE_NUM AND
        C6.LINE_NUM = B6.LINE_NUM AND
        C6.SEPCHK = B6.SEPCHK)
end-SELECT

  let $err-statement1 = 'PAYGL02, Select Error - BUILD RETRO CHECKS'
  let $err-statement2 = ' '

  let $Msg_MsgData1 = 'BUILD_RETRO_CHECKS'
  let $Msg_MsgData2 = 'see log'
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000550'

begin-SELECT DISTINCT On-Error=SQL-Statement-Error
A7.COMPANY,
A7.PAYGROUP,
A7.PAY_END_DT,
A7.OFF_CYCLE,
A7.PAGE_NUM,
A7.LINE_NUM,
A7.SEPCHK,
A7.BUSINESS_UNIT,
B7.HP_RETDIST_PAY_DT
B7.FISCAL_YEAR
B7.ACCOUNTING_PERIOD

  move &A7.COMPANY           to $RD_COMPANY
  move &A7.PAYGROUP          to $RD_PAYGROUP
  move &A7.PAY_END_DT        to $RD_PAY_END_DT
  move &A7.OFF_CYCLE         to $RD_OFF_CYCLE
  move &A7.PAGE_NUM          to #RD_PAGE_NUM
  move &A7.LINE_NUM          to #RD_LINE_NUM
  move &A7.SEPCHK            to #RD_SEPCHK
  move &A7.BUSINESS_UNIT     to $RD_BUSINESS_UNIT
  move &B7.HP_RETDIST_PAY_DT to $RD_HP_RETDIST_PAY_DT
  move &B7.FISCAL_YEAR       to #RD_FISCAL_YEAR
  move &B7.ACCOUNTING_PERIOD to #RD_ACCOUNTING_PERIOD
  do INSERT-RETROCHK

FROM PS_PAY_CHECK A7, PS_PAY_CTX_DIST B7
WHERE A7.COMPANY = $Company AND A7.PAYGROUP = $PayGroup AND
 A7.COMPANY = B7.COMPANY AND A7.PAYGROUP = B7.PAYGROUP AND
 A7.PAY_END_DT = B7.PAY_END_DT AND A7.OFF_CYCLE = B7.OFF_CYCLE AND
 A7.PAGE_NUM = B7.PAGE_NUM AND A7.LINE_NUM = B7.LINE_NUM AND
 A7.SEPCHK = B7.SEPCHK AND B7.HP_RDIST_GL_INFACE = 'N' AND
 B7.REVERSED = 'N' AND
 B7.HP_RETDIST_PAY_DT = $Pay_End_Dt AND
 B7.HP_RETDIST_STATUS = '0' AND
 NOT EXISTS (SELECT COMPANY FROM PS_HP_PAYGL02_RCHK C7
        WHERE C7.COMPANY = B7.COMPANY AND
        C7.PAYGROUP = B7.PAYGROUP AND
        C7.PAY_END_DT = B7.PAY_END_DT AND
        C7.OFF_CYCLE = B7.OFF_CYCLE AND
        C7.PAGE_NUM = B7.PAGE_NUM AND
        C7.LINE_NUM = B7.LINE_NUM AND
        C7.SEPCHK = B7.SEPCHK)
end-SELECT

end-procedure

!****************************************************************************
! INSERT-RETROCHK                                                           *
!****************************************************************************
begin-procedure INSERT-RETROCHK

  let $RD_PAGE_NUM = #RD_PAGE_NUM
  let $RD_LINE_NUM = #RD_LINE_NUM
  let $RD_SEPCHK   = #RD_SEPCHK

  let $err-statement1 = 'PAYGL02, Insert Error - INSERT-RETROCHK'
  let $err-statement2 = 'Bind Variables: Company ' || $RD_COMPANY ||
                        ', Paygroup ' || $RD_PAYGROUP ||
                        ', Pay End Date ' || $RD_PAY_END_DT ||
                        ', Off Cycle ' || $RD_OFF_CYCLE ||
                        ', Page ' || $RD_PAGE_NUM || ', Line ' || $RD_LINE_NUM ||
                        ', Sepchk ' || $RD_SEPCHK ||
                        ', Business Unit ' || $RD_BUSINESS_UNIT ||
                        ', and Retro Dist Pay End Date ' || $RD_HP_RETDIST_PAY_DT

  let $Msg_MsgData1 = 'INSERT-RETROCHK see log'
  let $Msg_MsgData2 = ' '
  let $Msg_MsgData3 = ' '
  let $Msg_MsgID    = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_HP_PAYGL02_RCHK (
COMPANY,
PAYGROUP,
PAY_END_DT,
OFF_CYCLE,
PAGE_NUM,
LINE_NUM,
SEPCHK,
BUSINESS_UNIT,
HP_RETDIST_PAY_DT,
FISCAL_YEAR,
ACCOUNTING_PERIOD)
VALUES (
$RD_COMPANY,
$RD_PAYGROUP,
$RD_PAY_END_DT,
$RD_OFF_CYCLE,
#RD_PAGE_NUM,
#RD_LINE_NUM,
#RD_SEPCHK,
$RD_BUSINESS_UNIT,
$RD_HP_RETDIST_PAY_DT,
#RD_FISCAL_YEAR,
#RD_ACCOUNTING_PERIOD)
end-SQL

end-procedure

!****************************************************************************
! UPDATE_RETRO_INFACE                                                       *
! This update the GL Interface flag on distribution that have now being     *
! processed                                                                 *
!****************************************************************************
begin-procedure UPDATE_RETRO_INFACE

  let $err-statement1 = 'PAYGL02, Update Error - UPDATE RETRO INFACE'
  let $err-statement2 = ' '

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_ERN_DIST
SET HP_RDIST_GL_INFACE = 'Y'
WHERE COMPANY = $Company
   AND PAYGROUP = $PayGroup
   AND COMPANY = &HPGL.COMPANY
   AND PAYGROUP = &HPGL.PAYGROUP
   AND PAY_END_DT = &HPGL.PAY_END_DT
   AND OFF_CYCLE = &HPGL.OFF_CYCLE
   AND PAGE_NUM = &HPGL.PAGE_NUM
   AND LINE_NUM = &HPGL.LINE_NUM
   AND SEPCHK = &HPGL.SEPCHK
   AND HP_RDIST_GL_INFACE = 'N'
   AND HP_RETDIST_STATUS IN ('D', 'R', '0')
   AND HP_RETDIST_PAY_DT = $Pay_End_Dt
end-SQL

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_DED_DIST
SET HP_RDIST_GL_INFACE = 'Y'
WHERE COMPANY = $Company
   AND PAYGROUP = $PayGroup
   AND COMPANY = &HPGL.COMPANY
   AND PAYGROUP = &HPGL.PAYGROUP
   AND PAY_END_DT = &HPGL.PAY_END_DT
   AND OFF_CYCLE = &HPGL.OFF_CYCLE
   AND PAGE_NUM = &HPGL.PAGE_NUM
   AND LINE_NUM = &HPGL.LINE_NUM
   AND SEPCHK = &HPGL.SEPCHK
   AND HP_RDIST_GL_INFACE = 'N'
   AND HP_RETDIST_STATUS IN ('D', 'R', '0')
   AND HP_RETDIST_PAY_DT = $Pay_End_Dt
end-SQL

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_TAX_DIST
SET HP_RDIST_GL_INFACE = 'Y'
WHERE COMPANY = $Company
   AND PAYGROUP = $PayGroup
   AND COMPANY = &HPGL.COMPANY
   AND PAYGROUP = &HPGL.PAYGROUP
   AND PAY_END_DT = &HPGL.PAY_END_DT
   AND OFF_CYCLE = &HPGL.OFF_CYCLE
   AND PAGE_NUM = &HPGL.PAGE_NUM
   AND LINE_NUM = &HPGL.LINE_NUM
   AND SEPCHK = &HPGL.SEPCHK
   AND HP_RDIST_GL_INFACE = 'N'
   AND HP_RETDIST_STATUS IN ('D', 'R', '0')
   AND HP_RETDIST_PAY_DT = $Pay_End_Dt
end-SQL

begin-SQL On-Error=SQL-Statement-Error

UPDATE PS_PAY_CTX_DIST
SET HP_RDIST_GL_INFACE = 'Y'
WHERE COMPANY = $Company
   AND PAYGROUP = $PayGroup
   AND COMPANY = &HPGL.COMPANY
   AND PAYGROUP = &HPGL.PAYGROUP
   AND PAY_END_DT = &HPGL.PAY_END_DT
   AND OFF_CYCLE = &HPGL.OFF_CYCLE
   AND PAGE_NUM = &HPGL.PAGE_NUM
   AND LINE_NUM = &HPGL.LINE_NUM
   AND SEPCHK = &HPGL.SEPCHK
   AND HP_RDIST_GL_INFACE = 'N'
   AND HP_RETDIST_STATUS IN ('D', 'R', '0')
   AND HP_RETDIST_PAY_DT = $Pay_End_Dt
end-SQL


end-procedure

!****************************************************************************
! CHOOSE-CHANGED-RECORDS                                                    *
! This finds only those accounting lines that changed as a result of        *
! retro distribution                                                        *
!****************************************************************************
begin-procedure CHOOSE-CHANGED-RECORDS

  let $err-statement1 = 'PAYGL02, Select Error - CHANGED RECORDS'
  let $err-statement2 = 'Where sum of reversal and posting are 0'

begin-SELECT On-Error=SQL-Statement-Error
SM.RUN_DT,
SM.SEQNUM,
SM.LINE_NBR


   let $rem_run_dt = &SM.RUN_DT
   let #rem_seqnum = &SM.SEQNUM
   let #rem_line_num = &SM.LINE_NBR
   do REMOVE-UNCHANGED-RECS


FROM PS_HR_ACCTG_LN_RD SM
WHERE 0 = (SELECT SUM(MONETARY_AMOUNT)
      FROM PS_HR_ACCTG_LN_RD ZER
      WHERE SM.PROCESS_INSTANCE = ZER.PROCESS_INSTANCE
      AND SM.SEQNUM = ZER.SEQNUM
      AND SM.KK_AMOUNT_TYPE = ZER.KK_AMOUNT_TYPE
      AND SM.AUDIT_ACTN = ZER.AUDIT_ACTN
      AND SM.BUDGET_LINE_STATUS = ZER.BUDGET_LINE_STATUS
      AND SM.BUDGET_DT = ZER.BUDGET_DT
      AND SM.BUSINESS_UNIT_GL = ZER.BUSINESS_UNIT_GL
      AND SM.JOURNAL_ID = ZER.JOURNAL_ID
      AND SM.ACCOUNT = ZER.ACCOUNT
      AND SM.DEPTID = ZER.DEPTID
      AND SM.PROJECT_ID = PROJECT_ID
      AND SM.PRODUCT = ZER.PRODUCT
      AND SM.FUND_CODE = ZER.FUND_CODE
      AND SM.PROGRAM_CODE = ZER.PROGRAM_CODE
      AND SM.CLASS_FLD = ZER.CLASS_FLD
      AND SM.AFFILIATE = ZER.AFFILIATE
      AND SM.OPERATING_UNIT = ZER.OPERATING_UNIT
      AND SM.ALTACCT = ZER.ALTACCT
      AND SM.BUDGET_REF = ZER.BUDGET_REF
      AND SM.CHARTFIELD1 = ZER.CHARTFIELD1
      AND SM.CHARTFIELD2 = ZER.CHARTFIELD2
      AND SM.CHARTFIELD3 = ZER.CHARTFIELD3
      AND SM.AFFILIATE_INTRA1 = ZER.AFFILIATE_INTRA1
      AND SM.AFFILIATE_INTRA2 = ZER.AFFILIATE_INTRA2
      AND SM.STATISTICS_CODE = ZER.STATISTICS_CODE
      AND SM.FOREIGN_CURRENCY = ZER.FOREIGN_CURRENCY
      AND SM.RT_TYPE = ZER.RT_TYPE
      AND SM.RATE_MULT = ZER.RATE_MULT
      AND SM.RATE_DIV = ZER.RATE_DIV
      AND SM.STATISTIC_AMOUNT = ZER.STATISTIC_AMOUNT
      AND SM.JRNL_LN_REF = ZER.JRNL_LN_REF
      AND SM.OPEN_ITEM_STATUS = ZER.OPEN_ITEM_STATUS
      AND SM.LINE_DESCR = ZER.LINE_DESCR
      AND SM.JRNL_LINE_STATUS = ZER.JRNL_LINE_STATUS
      AND SM.JOURNAL_LINE_DATE = ZER.JOURNAL_LINE_DATE
      AND SM.BUSINESS_UNIT = ZER.BUSINESS_UNIT
      AND SM.APPL_JRNL_ID = ZER.APPL_JRNL_ID
      AND SM.ACCOUNTING_DT = ZER.ACCOUNTING_DT
      AND SM.GL_DISTRIB_STATUS = ZER.GL_DISTRIB_STATUS
      AND SM.CURRENCY_CD = ZER.CURRENCY_CD
      AND SM.USE_DISTRIBUTION = ZER.USE_DISTRIBUTION)


END-SELECT

end-procedure

!****************************************************************************
! REMOVE-UNCHANGED-RECS                                                     *
! This deletes any posting records that are simply the reversal of the      *
! actual entry.                                                             *
!****************************************************************************
begin-procedure REMOVE-UNCHANGED-RECS

  let $err-statement1 = 'PAYGL02, Delete Error - REMOVE-UNCHANGED-RECS'
  let $err-statement2 = ' '

begin-SQL On-Error=SQL-Statement-Error
DELETE FROM PS_HR_ACCTG_LN_RD
WHERE RUN_DT = $rem_run_dt
AND SEQNUM = #rem_seqnum
AND LINE_NBR = #rem_line_num
end-SQL


end-procedure

!****************************************************************************
! COPY-TO-ACCTG-LINE                                                        *
! This copies transactions for posting from the Acct Ln Stage table to the  *
! Accounting Line that will be published. Stage only contains retro dist    *
! entries     .                                                             *
!****************************************************************************
begin-procedure COPY-TO-ACCTG-LINE

  let $err-statement1 = 'PAYGL02, Select Error - RETRO TRANSACTIONS'
  let $err-statement2 = 'Selecting records from Staging table'

begin-SELECT On-Error=SQL-Statement-Error
CPY.RUN_DT,
CPY.SEQNUM,
CPY.KK_AMOUNT_TYPE,
CPY.AUDIT_ACTN,
CPY.IN_PROCESS_FLG,
CPY.BUDGET_LINE_STATUS,
CPY.BUDGET_DT,
CPY.BUSINESS_UNIT_GL,
CPY.JOURNAL_ID,
CPY.JOURNAL_DATE,
CPY.JOURNAL_LINE,
CPY.ACCOUNT,
CPY.DEPTID,
CPY.PROJECT_ID,
CPY.PRODUCT,
CPY.FUND_CODE,
CPY.PROGRAM_CODE,
CPY.CLASS_FLD,
CPY.AFFILIATE,
CPY.OPERATING_UNIT,
CPY.ALTACCT,
CPY.BUDGET_REF,
CPY.CHARTFIELD1,
CPY.CHARTFIELD2,
CPY.CHARTFIELD3,
CPY.AFFILIATE_INTRA1,
CPY.AFFILIATE_INTRA2,
CPY.STATISTICS_CODE,
CPY.MONETARY_AMOUNT,
CPY.FOREIGN_AMOUNT,
CPY.FOREIGN_CURRENCY,
CPY.RT_TYPE,
CPY.RATE_MULT,
CPY.RATE_DIV,
CPY.STATISTIC_AMOUNT,
CPY.JRNL_LN_REF,
CPY.OPEN_ITEM_STATUS,
CPY.LINE_DESCR,
CPY.JRNL_LINE_STATUS,
CPY.JOURNAL_LINE_DATE,
CPY.BUSINESS_UNIT,
CPY.APPL_JRNL_ID,
CPY.ACCOUNTING_DT,
CPY.GL_DISTRIB_STATUS,
CPY.PROCESS_INSTANCE,
CPY.CURRENCY_CD,
CPY.ACCOUNTING_PERIOD,
CPY.FISCAL_YEAR,
CPY.LEDGER,
CPY.LEDGER_GROUP,
CPY.USE_DISTRIBUTION

       let $rgl_run_date = &CPY.RUN_DT
       let #rgl_run_seq = &CPY.SEQNUM
       let $rKK_Amount_Type = &CPY.KK_AMOUNT_TYPE
       let $rAudit_Actn = &CPY.AUDIT_ACTN
       let $rIn_Process_Flg = &CPY.IN_PROCESS_FLG
       let $rBudget_Line_Status = &CPY.BUDGET_LINE_STATUS
       let $rBudget_Dt = &CPY.BUDGET_DT
       let $rBusiness_Unit_GL = &CPY.BUSINESS_UNIT_GL
       let $rJournal_ID = &CPY.JOURNAL_ID
       let $rJournal_Date = &CPY.JOURNAL_DATE
       let #rJournal_Line = &CPY.JOURNAL_LINE,
       let $rAccount = &CPY.ACCOUNT
       let $rGL_DeptID = &CPY.DEPTID
       let $rProject_ID = &CPY.PROJECT_ID
       let $rProduct = &CPY.PRODUCT
       let $rFund_Code =  &CPY.FUND_CODE
       let $rProgram_Code = &CPY.PROGRAM_CODE
       let $rClass_Fld = &CPY.CLASS_FLD
       let $rAffiliate = &CPY.AFFILIATE
       let $rOperating_Unit = &CPY.OPERATING_UNIT
       let $rAltAcct = &CPY.ALTACCT
       let $rBudget_Ref = &CPY.BUDGET_REF,
       let $rChartfield1 = &CPY.CHARTFIELD1
       let $rChartfield2 = &CPY.CHARTFIELD2
       let $rChartfield3 = &CPY.CHARTFIELD3
       let $rAffiliate_intra1 = &CPY.AFFILIATE_INTRA1
       let $rAffiliate_intra2 = &CPY.AFFILIATE_INTRA2
       let $rStatistics_Code = &CPY.STATISTICS_CODE
       let #rBud_GL_Amount = &CPY.MONETARY_AMOUNT
       let #rBud_Monetary_Amount = &CPY.FOREIGN_AMOUNT
       let $rcurrency_cd_hr = &CPY.FOREIGN_CURRENCY
       let $rhr_rate_type = &CPY.RT_TYPE
       let #rrate_mult = &CPY.RATE_MULT
       let #rrate_div = &CPY.RATE_DIV,
       let #rStatistics_Amount = &CPY.STATISTIC_AMOUNT
       let $rJrnl_Line_Ref = &CPY.JRNL_LN_REF
       let $rOpen_Item_Status = &CPY.OPEN_ITEM_STATUS
       let $rDescr = &CPY.LINE_DESCR
       let $rJrnl_Line_Status = &CPY.JRNL_LINE_STATUS
       let $rJournal_Line_Date = &CPY.JOURNAL_LINE_DATE
       let $rBusiness_Unit_HR = &CPY.BUSINESS_UNIT
       let $rAppl_Jrnl_ID = &CPY.APPL_JRNL_ID
       let $rAccounting_Dt = &CPY.ACCOUNTING_DT
       let $rGL_Distrib_Status = &CPY.GL_DISTRIB_STATUS
       let #rProcess_Instance = &CPY.PROCESS_INSTANCE
       let $rCurrency_Cd_GL = &CPY.CURRENCY_CD
       let #rAccounting_Period = &CPY.ACCOUNTING_PERIOD
       let #rFiscal_Year = &CPY.FISCAL_YEAR
       let $rLedger = &CPY.LEDGER
       let $rLedger_Group = &CPY.LEDGER_GROUP
       let $rUse_Distribution = &CPY.USE_DISTRIBUTION

       add 1 to #P_RetChecks_Acct_lines


       do WRITE-ACCT-LINE-RETRO


FROM PS_HR_ACCTG_LN_RD CPY


end-SELECT

end-procedure


!****************************************************************************
! WRITE-ACCT-LINE-RETRO                                                     *
! Posts retro transactions to the journal generator accounting table        *
!****************************************************************************
begin-procedure WRITE-ACCT-LINE-RETRO


  move $Prcs_Process_Instance to #Process_Instance

  do Get-Seqnum (#max_line, #proc_seq_no, #gl_entry_line)
  let $proc_seq_no       = #proc_seq_no
  let $gl_entry_line     = #gl_entry_line

  let $Monetary_Amount   = #rBud_Monetary_Amount
  let $GL_Amount         = #rBud_GL_Amount
  let $Statistics_Amount = #rStatistics_Amount
  let $Process_Instance  = #rProcess_Instance
  let $Accounting_Period = TO_CHAR(#rAccounting_Period)
  let $Fiscal_Year       = #rFiscal_Year
  let $journal_line      = #rjournal_line
  let $rate_mult         = #rrate_mult
  let $rate_div          = #rrate_div

  let $err-statement1 = 'PAYGL02, Insert-Error - WRITE-ACCT-LINE-RETRO'
  let $err-statement2 = 'Key Values: TABLE '||'PS_HR_ACCTG_LN_STG'||
                        ', GL_RUN_DATE '||$rgl_run_date||
                        ', PROCESS_INSTANCE '||$Process_Instance||
                        ', GL_RUN_SEQ '||$proc_seq_no||
                        ', GL_ENTRY_LINE '||$gl_entry_line||
                        ', KK_AMOUNT_TYPE '||$rKK_Amount_Type||
                        ', AUDIT_ACTN '||$rAudit_Actn||
                        ', IN_PROCESS_FLG '||$rIn_Process_Flg||
                        ', BUDGET_LINE_STATUS '||$rBudget_Line_Status||
                        ', BUDGET_DT '||$rBUDGET_DT||
                        ', BUSINESS_UNIT_GL '||$rBusiness_Unit_GL||
                        ', JOURNAL_ID '||$rJournal_Id||
                        ', JOURNAL_DATE '||$rJournal_Date||
                        ', JOURNAL_LINE '||$Journal_Line||
                        ', ACCOUNT '||$rAccount||
                        ', DEPTID '||$rGL_DeptID||
                        ', PROJECT_ID '||$rProject_Id||
                        ', PRODUCT '||$rProduct||
                        ', FUND_CODE '||$rFund_Code||
                        ', PROGRAM_CODE  '||$rProgram_Code||
                        ', CLASS_FLD '||$rClass_Fld||
                        ', AFFILIATE '||$rAffiliate||
                        ', OPERATING_UNIT '||$rOperating_Unit||
                        ', ALTACCT'||$rAltAcct||
                        ', BUDGET_REF '||$rBudget_Ref ||
                        ', CHARTFIELD1 '||$rChartfield1 ||
                        ', CHARTFIELD2 '||$rChartfield2 ||
                        ', CHARTFIELD3 '||$rChartfield3 ||
                        ', AFFILIATE_INTRA1 '||$rAffiliate_intra1 ||
                        ', AFFILIATE_INTRA2 '||$rAffiliate_intra2 ||
                        ', STATISTICS_CODE '||$rStatistics_Code||
                        ', MONETARY_AMOUNT '||$GL_Amount||
                        ', FOREIGN_AMOUNT '||$Monetary_Amount||
                        ', FOREIGN_CURRENCY '||$rcurrency_cd_hr||
                        ', RT_TYPE '||$rhr_rate_type||
                        ', RATE_MULT '||$rate_mult||
                        ', RATE_DIV '||$rate_div||
                        ', STATISTIC_AMOUNT '||$Statistics_Amount||
                        ', JRNL_LN_REF '||$rJrnl_Ln_Ref||
                        ', OPEN_ITEM_STATUS '||$rOpen_Item_Status||
                        ', LINE_DESCR '||$rDescr||
                        ', JRNL_LINE_STATUS '||$rJrnl_Line_Status||
                        ', JOURNAL_LINE_DATE '||$rJournal_Line_Date||
                        ', BUSINESS_UNIT '||$rBusiness_Unit_HR||
                        ', APPL_JRNL_ID '||$rJrnl_Line_Ref||
                        ', ACCOUNTING_DT '||$rAccounting_Dt||
                        ', GL_DISTRIB_STATUS '||$rGL_Distrib_Status||
                        ', CURRENCY_CD '||$rCurrency_Cd_GL||
                        ', ACCOUNTING_PERIOD '||$Accounting_Period||
                        ', FISCAL_YEAR '||$Fiscal_Year||
                        ', LEDGER '||$rLedger||
                        ', LEDGER_GROUP '||$rLedger_Group

  do MOVE-PAYCHECK-KEYS-TO-PAY-MESSAGE
  let $Msg_MsgData1   = 'WRITE-ACCT-LINE-RETRO'
  let $Msg_MsgData2   = 'See log for Bind Variables'
  let $Msg_MsgID      = '000551'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_HR_ACCTG_LN_STG
(RUN_DT,
  PROCESS_INSTANCE,
  SEQNUM,
  LINE_NBR,
  KK_AMOUNT_TYPE,
  AUDIT_ACTN,
  IN_PROCESS_FLG,
  BUDGET_LINE_STATUS,
  BUDGET_DT,
  BUSINESS_UNIT_GL,
  JOURNAL_ID,
  JOURNAL_DATE,
  JOURNAL_LINE,
  ACCOUNT,
  DEPTID,
  PROJECT_ID,
  PRODUCT,
  FUND_CODE,
  PROGRAM_CODE,
  CLASS_FLD,
  AFFILIATE,
  OPERATING_UNIT,
  ALTACCT,
  BUDGET_REF,
  CHARTFIELD1,
  CHARTFIELD2,
  CHARTFIELD3,
  AFFILIATE_INTRA1,
  AFFILIATE_INTRA2,
  STATISTICS_CODE,
  MONETARY_AMOUNT,
  FOREIGN_AMOUNT,
  FOREIGN_CURRENCY,
  RT_TYPE,
  RATE_MULT,
  RATE_DIV,
  STATISTIC_AMOUNT,
  JRNL_LN_REF,
  OPEN_ITEM_STATUS,
  LINE_DESCR,
  JRNL_LINE_STATUS,
  JOURNAL_LINE_DATE,
  BUSINESS_UNIT,
  APPL_JRNL_ID,
  ACCOUNTING_DT,
  GL_DISTRIB_STATUS,
  CURRENCY_CD,
  ACCOUNTING_PERIOD,
  FISCAL_YEAR,
  LEDGER,
  LEDGER_GROUP,
  USE_DISTRIBUTION)
VALUES($rgl_run_date,
       #rProcess_Instance,
       #proc_seq_no,
       #gl_entry_line,
       $rKK_Amount_Type,
       $rAudit_Actn,
       $rIn_Process_Flg,
       $rBudget_Line_Status,
       $rBudget_Dt,
       $rBusiness_Unit_GL,
       $rJournal_ID,
       $rJournal_Date,
       #rJournal_Line,
       $rAccount,
       $rGL_DeptID,
       $rProject_ID,
       $rProduct,
       $rFund_Code,
       $rProgram_Code,
       $rClass_Fld,
       $rAffiliate,
       $rOperating_Unit,
       $rAltAcct,
       $rBudget_Ref,
       $rChartfield1,
       $rChartfield2,
       $rChartfield3,
       $rAffiliate_intra1,
       $rAffiliate_intra2,
       $rStatistics_Code,
       #rBud_GL_Amount,
       #rBud_Monetary_Amount,
       $rcurrency_cd_hr,
       $rhr_rate_type,
       #rrate_mult,
       #rrate_div,
       #rStatistics_Amount,
       $rJrnl_Line_Ref,
       $rOpen_Item_Status,
       $rDescr,
       $rJrnl_Line_Status,
       $rJournal_Line_Date,
       $rBusiness_Unit_HR,
       $rAppl_Jrnl_ID,
       $rAccounting_Dt,
       $rGL_Distrib_Status,
       $rCurrency_Cd_GL,
       #rAccounting_Period,
       #rFiscal_Year,
       $rLedger,
       $rLedger_Group,
       $rUse_Distribution)

end-SQL


end-procedure


!****************************************************************************
! Save-Default-BU-Set                                                       *
!****************************************************************************
begin-procedure Save-Default-BU-Set

  let $Def_Business_Unit_HR   = $Business_Unit_HR
  let $Def_Business_Unit_GL   = $Business_Unit_GL
  let $Def_SetID_Dept         = $SetID_Dept
  let $Def_SetID_Jobcode      = $SetID_Jobcode
  let $Def_Currency_Cd_GL     = $Currency_Cd_GL
  let $Def_Currency_Cd_HR     = $Currency_Cd_HR
  let $Def_Appl_Jrnl_ID       = $Appl_Jrnl_ID
  let $Def_SetID_GL_Calendar  = $SetID_GL_Calendar

end-procedure

!****************************************************************************
! Reset-To-Default-BU-Set                                                   *
!****************************************************************************
begin-procedure Reset-To-Default-BU-Set

  let $Business_Unit_HR   = $Def_Business_Unit_HR
  let $Business_Unit_GL   = $Def_Business_Unit_GL
  let $SetID_Dept         = $Def_SetID_Dept
  let $SetID_Jobcode      = $Def_SetID_Jobcode
  let $Currency_Cd_GL     = $Def_Currency_Cd_GL
  let $Currency_Cd_HR     = $Def_Currency_Cd_HR
  let $Appl_Jrnl_ID       = $Def_Appl_Jrnl_ID
  let $SetID_GL_Calendar  = $Def_SetID_GL_Calendar

end-procedure

!****************************************************************************
! Find-Default-FY-AcctPrd                                                   *
!****************************************************************************
begin-procedure Find-Default-FY-AcctPrd

  let $Prd_Found = 'N'
  let #Prd_Cnt   = 0
  do Format-Datetime($Cal_Pay_End_Dt, $Cmp_Pay_End_Dt, {DEFCMP}, '', '')

  WHILE (#Prd_Cnt < #Prd_Total and $Prd_Found = 'N')

    GET $Prd_Business_unit
        #Prd_Fiscal_Year
        #Prd_Accounting_Period
        $Prd_Begin_Dt
        $Prd_End_Dt
    FROM ACCT_PERIOD_DT(#Prd_Cnt)
         PRD_BUSINESS_UNIT
         PRD_FISCAL_YEAR
         PRD_ACCOUNTING_PERIOD
         PRD_BEGIN_DT
         PRD_END_DT

    do Format-Datetime($Prd_End_Dt, $Cmp_Prd_End_Dt, {DEFCMP}, '', '')

    if $Prd_Business_Unit = $Business_Unit_GL   and
       $Cmp_Prd_End_Dt    = $Cmp_Pay_End_Dt

        let #Def_Fiscal_Year       = #Prd_Fiscal_Year
        let #Def_Accounting_Period = #Prd_Accounting_Period

        let $Prd_Found = 'Y'
    end-if

    add 1 to #Prd_Cnt

  END-WHILE

  if $Prd_Found = 'N'
      let #Def_Fiscal_Year       = 0
      let #Def_Accounting_Period = 0
  end-if

end-procedure

!****************************************************************************
! Set-Initial-Entry                                                         *
!****************************************************************************
begin-procedure Set-Initial-Entry

  PUT 'N'
      $Def_Business_Unit_HR
      $Check.NotProrate_SetID
      $Check.NotProrate_DeptID
      #Def_Fiscal_Year
      #Def_Accounting_Period
      0
  INTO STORE_DIST(#E)
       STORE_PRORATE_IND
       STORE_BU_HR
       STORE_SETID
       STORE_DEPTID
       STORE_FISCAL_YEAR
       STORE_ACCOUNTING_PERIOD
       STORE_EARNINGS

    add 1 to #E

end-procedure

!****************************************************************************
! Build-Earnings-BU-Array                                                   *
!****************************************************************************
begin-procedure Build-Earnings-BU-Array

  if #pay_check_loop = 1
     let $ChkErn-end-dt = $Pay_End_Dt
  else
     let $ChkErn-end-dt = $Check.PayCheck_End_Dt
  end-if

  let #BU = 0

  Put  $Def_Business_Unit_HR
       0
       ' '
       $Def_Business_Unit_GL
       $Def_SetID_Dept
       $Def_SetID_Jobcode
       $Def_Currency_Cd_HR
       $Def_Currency_Cd_GL
       $Def_Appl_Jrnl_ID
       $Def_SetID_GL_Calendar
  INTO EARNS_BU(#BU)
       Business_Unit_HR
       Empl_Rcd
       Deptid
       Business_Unit_GL
       SetID_Dept
       SetID_Jobcode
       Currency_Cd_HR
       Currency_Cd_GL
       Appl_Jrnl_ID
       SetID_GL_Calendar

begin-SELECT DISTINCT
CHKERN.BUSINESS_UNIT
CHKERN.EMPL_RCD
CHKERN.BUDGET_DEPTID

  let #BU = #BU + 1

  if &CHKERN.BUSINESS_UNIT = $Def_Business_Unit_HR
      Put  $Def_Business_Unit_HR
           &CHKERN.EMPL_RCD
           &CHKERN.BUDGET_DEPTID
           $Def_Business_Unit_GL
           $Def_SetID_Dept
           $Def_SetID_Jobcode
           $Def_Currency_Cd_HR
           $Def_Currency_Cd_GL
           $Def_Appl_Jrnl_ID
           $Def_SetID_GL_Calendar
      INTO EARNS_BU(#BU)
           Business_Unit_HR
           Empl_Rcd
           Deptid
           Business_Unit_GL
           SetID_Dept
           SetID_Jobcode
           Currency_Cd_HR
           Currency_Cd_GL
           Appl_Jrnl_ID
           SetID_GL_Calendar
  else
      let $Business_Unit_HR    = &CHKERN.BUSINESS_UNIT
      do GET-SETID ($Business_Unit_HR, 'HR_01', $SetID_Dept)
      do GET-SETID ($Business_Unit_HR, 'HR_02', $SetID_Jobcode)
      do GET-GL-BUS-UNIT
      do GET-GL-BU-DETAILS

      Put  $Business_Unit_HR
           &CHKERN.EMPL_RCD
           &CHKERN.BUDGET_DEPTID
           $Business_Unit_GL
           $SetID_Dept
           $SetID_Jobcode
           $Currency_Cd_HR
           $Currency_Cd_GL
           $Appl_Jrnl_ID
           $SetID_GL_Calendar
      INTO EARNS_BU(#BU)
           Business_Unit_HR
           Empl_Rcd
           Deptid
           Business_Unit_GL
           SetID_Dept
           SetID_Jobcode
           Currency_Cd_HR
           Currency_Cd_GL
           Appl_Jrnl_ID
           SetID_GL_Calendar
  end-if

FROM PS_PAY_CHECK_EARNS CHKERN
WHERE CHKERN.COMPANY            = $Company
  AND CHKERN.PAYGROUP           = $PayGroup
  AND CHKERN.PAY_END_DT         = $ChkErn-end-dt
  AND CHKERN.OFF_CYCLE          = $Check.Off_Cycle
  AND CHKERN.PAGE_NUM           = #Check.Page
  AND CHKERN.LINE_NUM           = #Check.Line
  AND CHKERN.SEPCHK             = #Check.SepChk
end-Select

  let #Max_BU = #BU

end-procedure

!****************************************************************************
! Retrieve-Business-Unit                                                    *
!****************************************************************************
begin-procedure Retrieve-Business-Unit

  if #Max_BU = 0
      do Reset-To-Default-BU-Set
  else
      let #BU = 1
      let $BU_Found = 'N'

      While (#BU < (#Max_BU + 1) and $BU_Found = 'N')

          Get  $BU_Business_Unit_HR
               #BU_EMPL_RCD
               $BU_DEPTID
               $BU_Business_Unit_GL
               $BU_SetID_Dept
               $BU_SetID_Jobcode
               $BU_Currency_Cd_HR
               $BU_Currency_Cd_GL
               $BU_Appl_Jrnl_ID
               $BU_SetID_GL_Calendar
          From EARNS_BU(#BU)
               Business_Unit_HR
               Empl_Rcd
               Deptid
               Business_Unit_GL
               SetID_Dept
               SetID_Jobcode
               Currency_Cd_HR
               Currency_Cd_GL
               Appl_Jrnl_ID
               SetID_GL_Calendar

          if     #BU_EMPL_RCD = #Empl_Rcd
             and $BU_DEPTID   = $Deptid

              let $Business_Unit_HR   = $BU_Business_Unit_HR
              let $Business_Unit_GL   = $BU_Business_Unit_GL
              let $SetID_Dept         = $BU_SetID_Dept
              let $SetID_Jobcode      = $BU_SetID_Jobcode
              let $Currency_Cd_GL     = $BU_Currency_Cd_GL
              let $Currency_Cd_HR     = $BU_Currency_Cd_HR
              let $Appl_Jrnl_ID       = $BU_Appl_Jrnl_ID
              let $SetID_GL_Calendar  = $BU_SetID_GL_Calendar

              let $BU_Found = 'Y'
          else
              let #BU = #BU + 1
          end-if

      end-while

      if $BU_Found = 'N'
          do Reset-To-Default-BU-Set
      end-if
  end-if

end-procedure

!****************************************************************************
! Retrieve_BusUnit_By_BU_Dept                                               *
!****************************************************************************
begin-procedure Retrieve_BusUnit_By_BU_Dept

  if #Max_BU = 0
      do Reset-To-Default-BU-Set
  else
      let #BU = 1
      let $BU_Found = 'N'

      While (#BU < (#Max_BU + 1) and $BU_Found = 'N')

          Get  $BU_Business_Unit_HR
               #BU_EMPL_RCD
               $BU_DEPTID
               $BU_Business_Unit_GL
               $BU_SetID_Dept
               $BU_SetID_Jobcode
               $BU_Currency_Cd_HR
               $BU_Currency_Cd_GL
               $BU_Appl_Jrnl_ID
               $BU_SetID_GL_Calendar
          From EARNS_BU(#BU)
               Business_Unit_HR
               Empl_Rcd
               Deptid
               Business_Unit_GL
               SetID_Dept
               SetID_Jobcode
               Currency_Cd_HR
               Currency_Cd_GL
               Appl_Jrnl_ID
               SetID_GL_Calendar

          if     $BU_Business_Unit_HR = $Business_Unit_HR
             and $BU_SetID_Dept       = $SetID_Dept
             and rtrim($BU_DEPTID,' ')  = $Deptid

              let $Business_Unit_HR   = $BU_Business_Unit_HR
              let $Business_Unit_GL   = $BU_Business_Unit_GL
              let $SetID_Dept         = $BU_SetID_Dept
              let $SetID_Jobcode      = $BU_SetID_Jobcode
              let $Currency_Cd_GL     = $BU_Currency_Cd_GL
              let $Currency_Cd_HR     = $BU_Currency_Cd_HR
              let $Appl_Jrnl_ID       = $BU_Appl_Jrnl_ID
              let $SetID_GL_Calendar  = $BU_SetID_GL_Calendar

              let $BU_Found = 'Y'
          else
              let #BU = #BU + 1
          end-if

      end-while

      if $BU_Found = 'N'
          do Reset-To-Default-BU-Set
      end-if
  end-if

end-procedure

!********************************
begin-procedure Update-GL-History
!********************************

  if #gl_run_num = 0
      do Get-Max-Cntrl-Num ($gl_run_date, #gl_run_num, #gl_seq_num)
  else
      do Get-Max-Seq-Num ($gl_run_date, #gl_seq_num)
  end-if

  let #max_seq_num = #gl_seq_num + #proc_seq_no

  let #idx = #gl_seq_num + 1
  while #idx <= #max_seq_num

      do Add-to-GL-Run-History ($prgm_name, $gl_run_date, #gl_run_num, #idx, $RC_RunID,
                                $RC_Company, $RC_PayGroup, $RC_PayEndDt)
      let #idx = #idx + 1
  end-while
  do Commit-Transaction

  if #gl_seq_num = #last_posted_seq_num
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'N', #gl_seq_num)
  else
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'Y', #last_posted_seq_num)
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'N', #gl_seq_num)
  end-if

  do Copy-from-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)
  do Clear-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)

  let #last_posted_seq_num = #max_seq_num
  let #proc_seq_no = 0
  do Commit-Transaction

end-procedure

!****************************************************************************
! SQC's                                                                     *
!****************************************************************************
#Include 'reset.sqc'     !Reset printer Procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stderror.sqc'  !Routine for error display
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'getcodta.sqc'  !Gets Company Data
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#Include 'eoprcsnm.sqc'  !Determine Process Name
#Include 'eoactive.sqc'  !Determine Active Publish Definition
#Include 'eoparam.sqc'   !Insert values into Parameter Table for Batch Publish
#Include 'payglstg.sqc'  !Common procedures for GL interface

