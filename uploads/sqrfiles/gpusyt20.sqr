!*********************************************************************!
!  gpusyt20:  W-2 Record Error Report- All                            !
!*********************************************************************!
!                                                                     !
!               Confidentiality Information:                          !
!                                                                     !
!                                                                     !
! This module contains confidential and proprietary information       !
! of Oracle; it is not to be copied, reproduced, or transmitted       !
! in any form, by any means, in whole or in part, nor is it to        !
! be used for any purpose other than that for which it is             !
! expressly provided under the applicable license agreement.          !
!                                                                     !
! Copyright (C) 2006 Oracle. All Rights Reserved.                     !
!                                                                     !
!*********************************************************************!
!                                                                     !
!          $Date:  2006/07/21:02:06:05                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                     !
!*********************************************************************!

#include 'setenv.sqc'   !Set environment
#Include 'setup01.sqc'  !printer and page-size init

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'GPUSYT20' to $ReportID
  move 'Year End Post-Load Report USA' to $ReportTitle
  display ''
  display 'Year End Post-Load Report USA'

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization
  do Convert-Parameters
  do Report-File-Create

  if $EE_Selected = 'Y'
    do Delete-Sel-Employees-Table
  end-if

  if  $Company_Selected = 'Y'
    do  Delete-Sel-Company-Table
  end-if

  do Delete-Gp-Eln-Tmp-Table
end-procedure

begin-procedure Initialization
  do Get-Current-DateTime
  do Get-Tax-Reporting-Run-Controls

  move &TX.CALENDAR_YEAR to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

end-procedure

begin-heading 7
  #Include 'stdhdg01.sqc'

  print 'W2 Rpt Company '                      (3,1)
  print $Company                               (0,+2)
  print $Descr                                 (0,+2)
  let $TaxYear = 'Tax Year ' || $CalYear
  print $TaxYear                               (3,)  center
  print 'Federal EIN '                         (4,1)
  print $A.Federal_EIN                         (,+2) edit xx-xxxxxxx
  print 'Employee ID  Employee Name'           (7,1)
  print 'SSN'                                  (0,49)
  print 'Taxform'                              (0,59)
  print 'Message'                              (0,71)
end-heading

begin-procedure Report-File-Create
begin-SELECT
A.GPUS_YE_RPT_CO
A.EFFDT
A.DESCR
A.GPUS_TAX_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY


  move &A.GPUS_TAX_EIN     to $A.Federal_EIN  099999999
  move &A.EFFDT            to $A.EFFDT
  move &A.Descr            to $Descr
  move &A.GPUS_YE_RPT_CO   to $Company


  do Check-Company-Data

  do Process-Employees


  NEW-PAGE

FROM  PS_GPUS_YE_CO_TBL A
WHERE A.EFFDT = (SELECT MAX(A1.EFFDT)
                 FROM PS_GPUS_YE_CO_TBL A1
                 WHERE A1.GPUS_YE_RPT_CO = A.GPUS_YE_RPT_CO
                    AND A1.EFFDT     <= $AsOfDate)
  AND A.GPUS_YE_RPT_CO  <> ' '
  [$A.SelectedCompanies]                                        !NULL string if SELECT Company option not used

ORDER BY A.GPUS_YE_RPT_CO
end-SELECT
end-procedure

begin-procedure Process-Employees
begin-SELECT
E.GPUS_TAX_EIN          &E.GPUS_TAX_EIN
E.EMPLID      () on-break level=1 print=never before=Before-EmplID
E.GPUS_TAXFORM_ID
E.GPUS_SEQ_NBR
E.SSN
E.GPUS_YE_FNAME
E.GPUS_YE_MNAME
E.GPUS_YE_LNAME
E.GPUS_YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.GPUS_MARITAL_STAT
E.GPUS_SPOUSE_SSN
E.GPUS_YE_STATUS

  move &E.Gpus_TaxForm_ID      to $TaxForm_ID
  move 'GPUS_TAXFORM_ID'  to $FieldName
  move $TaxForm_ID   to $FieldValue

  do Read-Translate-Table
  move $XlatShortName to $TaxForm_Name

  do  Assign-Year-End-Variables

  if $TaxForm_ID <> '40'
     do Get-EIC-Max
  end-if

  do Load-Amounts
  do Check-Data


FROM  PS_GPUS_YE_EE5_VW E
WHERE E.GPUS_TAX_EIN  = $A.Federal_EIN
   [$W.SelectedCompanies]                                !NULL string if SELECT Company option not used
  AND E.GPUS_CAL_YEAR    = &TX.CALENDAR_YEAR
   [$E.SelectedEEs]                                      !NULL string if SELECT EEs option not used

ORDER BY E.SSN, E.EMPLID, E.GPUS_SEQ_NBR
end-SELECT
end-procedure


begin-procedure Before-EmplID

  move &E.EmplID   to $E.EmplID
  move &E.GPUS_YE_FNAME to $E.Fname
  move &E.GPUS_YE_MNAME to $E.MiddleName
  move &E.GPUS_YE_LNAME to $E.Lname
  move &E.GPUS_YE_SUFFIX to $E.Suffix
  let $E.Fname = rtrim($E.Fname, ' ')  || ' '
  let $E.MiddleName = rtrim($E.MiddleName, ' ') || ' '
  let $E.Lname = rtrim($E.Lname, ' ')  || ' '
  let $E.Suffix =rtrim($E.Suffix, ' ')  || ' '
  if $E.MiddleName <> ' '
    let $E.Gpus_YE_FName = $E.Fname || $E.MiddleName || $E.Lname || $E.Suffix
  else
    let $E.Gpus_YE_FName = $E.Fname || $E.Lname || $E.Suffix
  end-if

end-procedure

begin-procedure Check-Data
  if &E.Gpus_Seq_Nbr = 1
    do Check-EE-Data
  end-if

  do Check-Amounts

   If $TaxForm_ID = '40'
      do init-PR
   else
      do init-Rest
   end-if

end-procedure

begin-procedure init-PR
  move 0 to #07
  move 0 to #08
  move 0 to #09
  move 0 to #10
  move 0 to #11
  move 0 to #12
  move 0 to #13
  move 0 to #14
  move 0 to #15
  move 0 to #16
  move 0 to #17
  move 0 to #18
  move 0 to #19
  move 0 to #20
  move 0 to #21
  move 0 to #22
  move 0 to #23
end-procedure

begin-procedure init-Rest

  move 0 to #01
  move 0 to #02
  move 0 to #03
  move 0 to #04
  move 0 to #05
  move 0 to #06
  move 0 to #07
  move 0 to #08
  move 0 to #09
  move 0 to #10
  move 0 to #11AB
  move 0 to #12A
  move 0 to #12B
  move 0 to #12C
  move 0 to #12D
  move 0 to #12E
  move 0 to #12F
  move 0 to #12G
  move 0 to #12H
  move 0 to #12J
  move 0 to #12K
  move 0 to #12L
  move 0 to #12M
  move 0 to #12N
  move 0 to #12P

end-procedure

begin-procedure Load-Amounts
begin-SELECT
D.STATE
D.GPUS_TAXFORM_BOX
D.GPUS_YE_AMOUNT            &D.Gpus_Ye_Amount

   move &D.Gpus_Ye_Amount to #Amount

   let $D.GPUS_TAXFORM_BOX = RTRIM(&D.GPUS_TAXFORM_BOX,' ')

   If $TaxForm_ID = '40'
      do check-box-PR
   else
      do check-box-Rest
   end-if

FROM  PS_GPUS_YE_EE1_VW D
WHERE D.GPUS_TAX_EIN  = &E.GPUS_TAX_EIN
  AND D.EMPLID          = &E.Emplid
  AND D.GPUS_CAL_YEAR   = &TX.CALENDAR_YEAR
  AND D.GPUS_TAXFORM_ID = &E.GPUS_TAXFORM_ID
  AND D.GPUS_SEQ_NBR    = &E.Gpus_Seq_Nbr
ORDER BY D.STATE, D.GPUS_TAXFORM_BOX
end-SELECT

end-procedure


begin-procedure check-box-Rest

!  Box 12C only has negative amount error if TOTAL of 12C is negative.
   if #Amount < 0 and $D.GPUS_TAXFORM_BOX <> '12C'
     move 'Form voided. Negative Amount in Box' to $Message
     concat &D.GPUS_TAXFORM_BOX with $Message
     move 'Y' to $VoidNegative
     do Print-Error-Line
   end-if

   evaluate $D.GPUS_TAXFORM_BOX
     when = $YE_Fed_Wages                        !Federal wages
       add  #Amount to #01
       break
     when = $YE_Fed_Tax                          !Federal tax
       add  #Amount to #02
       break
     when = $YE_SS_Wages                         !SS wages
       add  #Amount to #03
       break
     when = $YE_SS_Tax                           !SS Tax
       add  #Amount to #04
       break
     when = $YE_Med_Wages                        !Medicare wages
       add  #Amount to #05
       break
     when = $YE_Med_Tax                          !Medicare tax
       add  #Amount to #06
       break
     when = $YE_SS_Tips                          !SS tips
       add  #Amount to #07
       break
     when = $YE_Alloc_Tips                       !Allocated tips
       add  #Amount to #08
       break
     when = $YE_Adv_EIC                          !EIC
       add  #Amount to #09
       break
     when = $YE_Dep_Care                         !Dependent care
       add  #Amount to #10
       break
     when = $YE_Non_Qual_457_Y                   !non-qualified 457
       add  #Amount to #11AB
       move 'Y' to $Amt11A
       break
     when = $YE_Non_Qual_457_N                   !non-qualified non-457
       add  #Amount to #11AB
       move 'Y' to $Non457
       break
     when = $YE_Uncoll_SS_Tax_On_Tips            !Uncoll SS tax on tips
       add  #Amount to #12A
       break
     when = $YE_Uncoll_Med_Tax_On_Tips            !Uncoll Medi tax on tips
       add  #Amount to #12B
       break
     when = $YE_Group_Term_Life                   !GTL
       add  #Amount to #12C
       break
     when = $YE_401K                              !401(k)
       add  #Amount to #12D
       break
     when = $YE_403B                              !403(b)
       add  #Amount to #12E
       break
     when = $YE_408K6                             !408(k)(6)
       add  #Amount to #12F
       break
     when = $YE_457B                              !457(b)
       add  #Amount to #12G
       break
     when = $YE_501C18D                           !501(c)(18)(D)
       add  #Amount to #12H
       break
     when = $YE_Sick_Pay                          !Sick pay
       add  #Amount to #12J
       break
     when = $YE_Excise_Tax                        !Excise tax
       add  #Amount to #12K
       break
     when = $YE_Business_Exp                      !Business expense
       add  #Amount to #12L
       break
     when = $YE_Uncoll_SS_Tax_GTL                 !Uncoll SS tax - GTL
       add  #Amount to #12M
       break
     when = $YE_Uncoll_Med_Tax_GTL                !Uncoll Medi tax - GTL
       add  #Amount to #12N
       break
     when = $YE_Excl_Moving_Exp                   !Excl Moving Exp
       add  #Amount to #12P
       break
   end-evaluate

end-procedure

begin-procedure check-box-PR

   if #Amount < 0
     move 'Form voided. Negative Amount in Box' to $Message
     concat $D.GPUS_TAXFORM_BOX with $Message
     move 'Y' to $VoidNegative
     do Print-Error-Line
   end-if

   evaluate $D.GPUS_TAXFORM_BOX
     when = $YE_Cost_Pension_Annuity                 !Pension/Annuity
       add  #Amount to #07
       break
     when = $YE_Wages                                !PR wages
       add  #Amount to #08
       break
     when = $YE_Commissions                          !Commissions
       add  #Amount to #09
       break
     when = $YE_Allowance                            !Allowances
       add  #Amount to #10
       break
     when = $YE_Tips                                 !Tips
       add  #Amount to #11
       break
     when = $YE_Reimbursed_Expense                   !Reimbursed Expenses
       add  #Amount to #13
       break
     when = $YE_Tax_Withheld                         !PR Tax Withheld
       add  #Amount to #14
       break
     when = $YE_Retire_Fund                          !Retirement fund
       add  #Amount to #15
       break
     when = $YE_CODA_Plans                           !CODA Contributions
       add  #Amount to #16
       break
     when = $YE_SS_Wages                             !Soc Sec Wages
       add  #Amount to #17
       break
     when = $YE_SS_Tax                               !Soc Sec Tax Withheld
       add  #Amount to #18
       break
     when = $YE_Med_Wages                            !Medicare Wages and Tips
       add  #Amount to #19
       break
     when = $YE_Med_Tax                              !Medicare Tax Withheld
       add  #Amount to #20
       break
     when = $YE_SS_Tips                              !Soc Sec Tips
       add  #Amount to #21
       break
     when =  $YE_SS_Tax_Tips                         !Uncollected Soc Sec
       add  #Amount to #22                           ! Tax on Tips
       break
     when = $YE_Med_Tax_Tips                         !Uncollected Medicare
       add  #Amount to #23                           ! Tax on Tips
       break
   end-evaluate

end-procedure

begin-procedure Check-Company-Data
  let $tmp = SUBSTR(EDIT($A.Federal_EIN,'099999999'),1,2)
  evaluate $tmp
    when = '00'
    when = '07'
    when = '08'
    when = '09'
    when = '17'
    when = '18'
    when = '19'
    when = '28'
    when = '29'
    when = '49'
    when = '69'
    when = '70'
    when = '78'
    when = '79'
    when = '89'
      move 'Missing or Invalid Federal EIN' to $Message
      print $Company            (+1,1)
      print $Descr              (0,14)
      print $A.Federal_EIN      (0,45) edit 099999999
      print $Message            (0,71)
  end-evaluate

  if (RTRIM(&A.Address1,' ') = '' and RTRIM(&A.Address2,' ') = '') or
      RTRIM(&A.City,' ')    = '' or
      RTRIM(&A.State,' ')   = '' or
      RTRIM(&A.Postal,' ')  = ''
    move 'Incomplete employer address' to $Message
    do Print-Error-Line
  end-if
end-procedure

begin-procedure Check-EE-Data
  let #tmp = TO_NUMBER(&E.SSN)               !Verify SSN is numeric
  let $SSN = EDIT(TO_CHAR(#tmp),'099999999')
  if #tmp = 0
    move 'Missing SSN or SSN = 000000000' to $Message
    do Print-Error-Line
  else
    if $SSN <> &E.SSN
      move 'Invalid SSN' to $Message
      do Print-Error-Line
    else                                     !Check for invalid #'s
    if RTRIM(&E.SSN, ' ') = ''
          or &E.SSN  = '111111111'
          or &E.SSN  = '123456789'
          or &E.SSN  = '333333333'
          or SUBSTR(&E.SSN,1,3)  = '000'
        move 'Invalid SSN' to $Message
        do Print-Error-Line
      end-if
    end-if
  end-if

  if (RTRIM(&E.Address1,' ') = '' and RTRIM(&E.Address2,' ') = '') or
      RTRIM(&E.City,' ')    = '' or
      RTRIM(&E.State,' ')   = '' or
      RTRIM(&E.Postal,' ')  = ''
    move 'Incomplete employee address' to $Message
    do Print-Error-Line
  end-if


if $TaxForm_ID = '40'

   do PR-check-EE

end-if

end-procedure


begin-procedure PR-check-EE

  if &E.Gpus_Marital_Stat = 'M'
       if RTRIM(&E.Gpus_Spouse_SSN, ' ') = ''
             or &E.Gpus_Spouse_SSN  = '111111111'
             or &E.Gpus_Spouse_SSN  = '333333333'
             or (SUBSTR(&E.Gpus_Spouse_SSN,1,3) >= '729' and
                 SUBSTR(&E.Gpus_Spouse_SSN,1,3) <= '799')
             or &E.Gpus_Spouse_SSN >= '800000000'
           move 'Invalid Spouse SSN' to $Message
           do Print-Error-Line
       end-if
  end-if
end-procedure


begin-procedure Check-Amounts

  do Get-OASDI-Max


If $TaxForm_ID = '40'

   do check-amounts-PR

else

  do check-amounts-Rest

end-if

end-procedure

begin-procedure check-amounts-PR

  if #17 > #MaxGross
    move 'OASDI Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  if #18 > #MaxTax
    move 'OASDI Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = #17 * #TaxRt
  if (#CalcTax - #18) > 0.01 OR (#CalcTax - #18) < -0.01
    move 'OASDI Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  move #19 to #MedicareGross
  do Get-Medicare-Max

  let #CalcTax = #19 * #TaxRt
  if (#CalcTax - #20) > 0.01 OR (#CalcTax - #20) < -0.01
    move 'Medicare Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  if #08 < 0
    move 'Form voided. Box 8 Wages are Negative' to $Message
    move 'Y' to $VoidNegative
    do Print-Error-Line
  end-if

end-procedure

begin-procedure check-amounts-Rest

   if #03 > #MaxGross
    move 'OASDI Gross > ' to $Message
    move #MaxGross to $MaxGross b99,999,999
    let $Message = $Message || $MaxGross
    do Print-Error-Line
  end-if

  if #04 > #MaxTax
    move 'OASDI Tax Withheld > ' to $Message
    move #MaxTax to $MaxTax b99,999,999.99
    let $Message = $Message || $MaxTax
    do Print-Error-Line
  end-if

  let #CalcTax = (#03 + #07) * #TaxRt
  if (#CalcTax - #04) > 0.01 OR (#CalcTax - #04) < -0.01
    move 'OASDI Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  move #05 to #MedicareGross
  do Get-Medicare-Max

  let #CalcTax = #05 * #TaxRt
  if (#CalcTax - #06) > 0.01 OR (#CalcTax - #06) < -0.01
    move 'Medicare Calc Tax <> Tax Balance' to $Message
    do Print-Error-Line
  end-if

  if #09 < #EICMax
    move 'EIC Advance Payment Exceeds ' to $Message
    move #EICMax to $EICMax b99,999,999.99
    let $Message = $Message || $EICMax
    do Print-Error-Line
  end-if

  if #11AB > #01
    move 'Box 11 Amount > Box 1 Amount.'   to $Message
    do Print-Error-Line
  end-if

  if #12C < 0
    move 'Form voided. Box 12C Total Amount < 0.'  to $Message
    move 'Y' to $VoidNegative
    do Print-Error-Line
  end-if


end-procedure

begin-procedure Print-Error-Line
  position (+1)
  if &E.EmplID <> $priorEmplID or &E.GPUS_TAX_EIN <> $priorCompany

    print &E.EmplID         (+1,1)
    print $E.Gpus_YE_FName       (0,14,30)
    print &E.SSN            (0,45) edit xxx-xx-xxxx
  end-if
  if &E.EmplID <> $priorEmplID or &E.GPUS_TAX_EIN <> $priorCompany
     or &E.Gpus_TaxForm_ID <> $priorTaxForm
     or $VoidNegative <> $priorVoidNegative
      move &E.EmplID  to $priorEmplID
      move &E.GPUS_TAX_EIN to $priorCompany

      move &E.Gpus_TaxForm_ID to $priorTaxForm
      move $VoidNegative to $priorVoidNegative
      if $MarkVoids = 'Y'
        or $VoidNegative = 'Y'
          do Mark-Void
      end-if
  end-if
  move 'N' to $VoidNegative
  print $TaxForm_Name       (0,59)
  print $Message            (0,71)
end-procedure

begin-procedure Mark-Void
begin-SELECT
C.GPUS_TAX_EIN


  do Update-W2-EE

FROM  PS_GPUS_YE_CO_TBL C
WHERE C.EFFDT = $A.EFFDT
  AND C.GPUS_YE_RPT_CO  = &A.Gpus_Ye_Rpt_Co
end-SELECT
end-procedure

begin-procedure Update-W2-EE
  begin-SQL on-error=Ignore
    UPDATE PS_GPUS_YE_EE
       SET GPUS_YE_STATUS     = '20'
     WHERE GPUS_TAX_EIN       = &C.GPUS_TAX_EIN
       AND EMPLID             = &E.EmplID
       AND GPUS_CAL_YEAR      = &TX.Calendar_Year
       AND GPUS_TAXFORM_ID    = $TaxForm_ID
  end-SQL
end-procedure

begin-procedure Get-OASDI-Max

begin-SELECT
VR.MONETARY_VALUE
VR.DECIMAL_VALUE
T1.GP_ELN_PIN_ATTR1
C.FLD_FMT

  let $FLDFMT       = &C.FLD_FMT
  let #FLDFMT       = $FLDFMT


 evaluate #FLDFMT

  when = 3      !Monetary

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '01'
     move &VR.MONETARY_VALUE    to #MaxGross
   END-IF

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '02'
     move &VR.MONETARY_VALUE    to #TaxRt
     let #TaxRt = #TaxRt  * .01
   END-IF

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '06'
     move &VR.MONETARY_VALUE    to #MaxTax
   END-IF

  break

  when = 4      !Decimal

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '01'
     move &VR.DECIMAL_VALUE    to #MaxGross

   END-IF

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '02'
     move &VR.DECIMAL_VALUE    to #TaxRt
     let #TaxRt = #TaxRt  * .01
   END-IF

   IF rtrim(&T1.GP_ELN_PIN_ATTR1,' ') = '06'
     move &VR.DECIMAL_VALUE    to #MaxTax

   END-IF

  break
 end-evaluate

FROM PS_GP_VARIABLE VR,PS_GP_ELN_TMP T1,PS_GP_PIN C
WHERE T1.PROCESS_INSTANCE = #prcs_process_instance - 1
  AND T1.PIN_NUM = C.PIN_NUM
  AND VR.PIN_NUM = C.PIN_NUM
  AND T1.PIN_NUM = VR.PIN_NUM
  AND VR.EFFDT = (SELECT MAX(VR3.EFFDT)
                    FROM PS_GP_VARIABLE VR3
                   WHERE VR3.PIN_NUM = VR.PIN_NUM
                     AND VR3.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure


begin-procedure Get-Medicare-Max

begin-SELECT
VR1.MONETARY_VALUE
VR1.DECIMAL_VALUE
T2.GP_ELN_PIN_ATTR1
C1.FLD_FMT

    let $FLDFMT       = &C1.FLD_FMT
    let #FLDFMT       = $FLDFMT

 evaluate #FLDFMT

 when = 3      !Monetary
  IF rtrim(&T2.GP_ELN_PIN_ATTR1,' ') = '03'
  move &VR1.MONETARY_VALUE    to #TaxRt
  let #TaxRt = #TaxRt  * .01
  END-IF
 break

 when = 4      !Decimal
  IF rtrim(&T2.GP_ELN_PIN_ATTR1,' ') = '03'
  move &VR1.DECIMAL_VALUE    to #TaxRt
  let #TaxRt = #TaxRt  * .01
  END-IF
 break
 end-evaluate

FROM PS_GP_VARIABLE VR1,PS_GP_ELN_TMP T2,PS_GP_PIN C1
WHERE T2.PROCESS_INSTANCE = #prcs_process_instance - 1
  AND T2.PIN_NUM  = VR1.PIN_NUM
  AND T2.PIN_NUM  = C1.PIN_NUM
  AND VR1.PIN_NUM = C1.PIN_NUM
  AND VR1.EFFDT = (SELECT MAX(VR4.EFFDT)
                    FROM PS_GP_VARIABLE VR4
                   WHERE VR4.PIN_NUM = VR1.PIN_NUM
                     AND VR4.EFFDT     <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Get-EIC-Max

begin-SELECT
F1.GPUS_EIC_STATUS
VR2.MONETARY_VALUE
VR2.DECIMAL_VALUE
T3.GP_ELN_PIN_ATTR1
C2.FLD_FMT

    let $FLDFMT       = &C2.FLD_FMT
    let #FLDFMT       = $FLDFMT

 evaluate #FLDFMT

 when = 3      !Monetary

   IF &T3.GP_ELN_PIN_ATTR1 = '04' and (&F1.GPUS_EIC_STATUS = 'S' or &F1.GPUS_EIC_STATUS ='M')
         IF &VR2.MONETARY_VALUE  > #EICMax
            move &VR2.MONETARY_VALUE    to #EICMax
         END-IF
   END-IF

   IF &T3.GP_ELN_PIN_ATTR1 = '05' and &F1.GPUS_EIC_STATUS = 'B'
         IF &VR2.MONETARY_VALUE  > #EICMax
            move &VR2.MONETARY_VALUE    to #EICMax
         END-IF
   END-IF

 break

 when = 4      !Decimal
   IF &T3.GP_ELN_PIN_ATTR1 = '04' and (&F1.GPUS_EIC_STATUS = 'S' or &F1.GPUS_EIC_STATUS ='M')
         IF &VR2.DECIMAL_VALUE  > #EICMax
            move &VR2.DECIMAL_VALUE    to #EICMax
         END-IF
   END-IF

   IF &T3.GP_ELN_PIN_ATTR1 = '05' and &F1.GPUS_EIC_STATUS = 'B'
         IF &VR2.DECIMAL_VALUE  > #EICMax
            move &VR2.DECIMAL_VALUE    to #EICMax
         END-IF
   END-IF
 break

 end-evaluate

FROM PS_GP_VARIABLE VR2, PS_GP_ELN_TMP T3, PS_GPUS_FWT_EE F1,PS_GP_PIN C2
WHERE T3.PROCESS_INSTANCE = #prcs_process_instance - 1
  AND T3.PIN_NUM = VR2.PIN_NUM
  AND T3.PIN_NUM = C2.PIN_NUM
  AND VR2.PIN_NUM = C2.PIN_NUM
  AND VR2.EFFDT = (SELECT MAX(VR5.EFFDT)
                    FROM PS_GP_VARIABLE VR5
                   WHERE VR5.PIN_NUM = VR2.PIN_NUM
                     AND VR5.EFFDT     <= $AsOfDate)
  AND F1.EMPLID=$EmplId
  AND F1.EFFDT = (SELECT MAX(FF1.EFFDT)
                  FROM PS_GPUS_FWT_EE FF1
                  WHERE  FF1.EMPLID = F1.EMPLID
                   AND  FF1.COMPANY = F1.COMPANY
                   AND  FF1.EFFDT     <= $AsOfDate)
end-SELECT

end-procedure

begin-procedure Ignore
end-procedure

begin-procedure Convert-Parameters

  move &TX.GPUS_YE_PRC_TYPE     to $SelectEEs
  move &TX.GPUS_YE_PRC_TYPE     to $SelectCompanies
  move &TX.GPUS_UPD_STATUS      to $MarkVoids


   if $SelectEEs = '30'
       do Read-EEs
    end-if

    if $SelectCompanies = '20'
      do Read-Companies
  end-if

end-procedure

begin-procedure Read-EEs

move 'AND E.EMPLID in (''' to $E.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
C.EMPLID

  move &C.EMPLID     to $SelectedEmplID



  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_GPUS_RC_YE4 C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

end-procedure

begin-procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_GPUS_RC_YE4
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-Companies

move 'AND A.GPUS_TAX_EIN in (''' to $A.SelectedCompanies
move 'AND E.GPUS_TAX_EIN in (''' to $W.SelectedCompanies
move ' ' to $SelectedEmplID

begin-SELECT
CO.GPUS_TAX_EIN

  move &CO.GPUS_TAX_EIN    to $SelectedCompany

  let $A.SelectedCompanies = $A.SelectedCompanies || $SelectedCompany || ''','''
  let $W.SelectedCompanies = $W.SelectedCompanies || $SelectedCompany || ''','''
  move 'Y' to $Company_Selected

FROM  PS_GPUS_RC_YE3 D, PS_GPUS_YE_CO_TBL CO
WHERE D.OPRID         = $Prcs_OprID
  AND D.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
  AND D.GPUS_YE_RPT_CO = CO.GPUS_YE_RPT_CO
  AND CO.EFFDT = (SELECT MAX(CO1.EFFDT)
                  FROM PS_GPUS_YE_CO_TBL CO1
                  WHERE CO1.GPUS_YE_RPT_CO = CO.GPUS_YE_RPT_CO
                    AND CO1.EFFDT <= $AsOfDate)
end-SELECT

let $A.SelectedCompanies = SUBSTR($A.SelectedCompanies,1,LENGTH($A.SelectedCompanies) - 2)
let $A.SelectedCompanies = $A.SelectedCompanies || ')'

let $W.SelectedCompanies = SUBSTR($W.SelectedCompanies,1,LENGTH($W.SelectedCompanies) - 2)
let $W.SelectedCompanies = $W.SelectedCompanies || ')'

end-procedure

begin-procedure Delete-Sel-Company-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_GPUS_RC_YE3
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Delete-Gp-Eln-Tmp-Table
begin-SQL
 DELETE FROM PS_GP_ELN_TMP
   WHERE PROCESS_INSTANCE = #prcs_process_instance - 1
     AND COUNTRY='USA'
     AND GP_ELN_SET =(SELECT  GP_ELN_SET FROM PS_GPUS_RPT_SETUP
                       WHERE PRCSJOBNAME = (SELECT PRCSJOBNAME FROM PSPRCSRQST
                                             WHERE PRCSINSTANCE = #prcs_process_instance - 1))

end-SQL
end-procedure



#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'gpusrntl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'gpusw2.sqc'    !Routine for W2 Year End Box variables
