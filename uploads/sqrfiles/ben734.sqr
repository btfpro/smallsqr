!**************************************************
! BEN734:   PeopleSoft Benefits                   *
!           QMCSO Audit Report                    *
!**************************************************

!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:08:53:18                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

!***********************************************************************
! This SQR is used to audit the QMCSO DEPBEN_RIDER table, looking
! for instances in which the business rules below are violated.
!
! This report can be run for a single employee, or the entire population
! of the Person table.
!
!
! Basic Referential Integrity Rules for QMCSO Audit Report:
! ---------------------------------------------------------
! (1) The 'Missing Elections' audit would find all Employees/Plan-Types/DepBenefs
!     for which individuals exist with active court-ordered rights on the As-Of date,
!     but for which the employee has no active election (Coverage_elect='E')
!     in the plan type on the As-Of date.
! (2) The 'Uncovered Individuals' audit would find all Employees/Plan-Types/DepBenefs
!     for which the employee has an active election (Coverage_elect='E') in the plan
!     type on the As-Of date, but for which non-covered individuals exist with active
!     court-ordered rights on the As-Of date
! (3) The 'Spousal Allocation' audit would find all Employees/Plan-Types/DepBenefs for
!     which a married employee’s enrolled Benefit Plan on the As-Of date requires a
!     minimum spousal allocation, and for which either no spouse is covered, the allocation
!     is below the minimum, or the spouse is marked Contingent (the audit would not
!     necessarily discriminate between these). 
!
!
! RunTime Parameters:
!
!**********************************************************************
!
! Modification History:
!       Initial Development: 11/15/99   PeopleSoft, Inc.  (DCD)
!
!**********************************************************************

#Include 'setenv.sqc'  !Set Database Environment

!------------------------------
Begin-Setup
!------------------------------

 #Include 'ptpsl177.sqc'

End-Setup

 #define  MAX_LINES           56       !Maximum print lines for landscape mode

!-----------------------------
Begin-Program
!-----------------------------
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main

  display 'Report Ended at: ' noline
  do Display-Time
!  do Display-Summary

  do Reset
  do Stdapi-Term

End-Program


!*************************************
begin-procedure Init-Report
!*************************************

 #Define col-sep              3        !Column Separator
 #Define col-emplid           12       !Emplid
 #Define col-name             25       !Employee or Dependent Name
 #Define col-plan             4        !Plan Type
 #Define col-benefit-plan     12       !Benefit Plan
 #Define col-dep-id           3        !Dependent ID
 #Define col-state            2        !State
 #Define col-ben-courtord     48       !Ben Court Order Number
 #Define col-effdt            15       !Ben Court Order Start Dt
 #Define col-ben-courtord-1   30       !Ben Court Order Number

  Let $Quote = ''''

  Move 'BEN734'  to  $ReportID
  Do Get-Report-Language
  Let $ReportTitle = $BEN734-REPORT-TITLE

  Display $ReportTitle
  Display 'Report Begin at: ' noline
  Do Display-Time

  do Stdapi-Init
  if IsBlank($prcs_process_instance)
    do Ask-Parameters                   ! Invoked interactively
  else
    do Get-Values                       ! Invoked by Process Scheduler
  end-if

  Let $OrInd = 'N'
  Let $Plans = ''

  move '(' to  $vselect1
  move '(' to  $vselect2

  IF &RUN_CNTL_BEN.INCLUDE_1X = 'Y'
      concat 'A.PLAN_TYPE LIKE ' with $vselect1
      concat 'AA.PLAN_TYPE LIKE ' with $vselect2
      concat $Quote    with $vselect1
      concat '1%'      with $vselect1
      concat $Quote    with $vselect1
      concat ' Health: '  with $Plans
      concat $Quote    with $Plans
      concat '1%'      with $Plans
      concat $Quote    with $Plans
      concat $Quote    with $vselect2
      concat '1%'      with $vselect2
      concat $Quote    with $vselect2
      Let $OrInd = 'Y'
  End-if

  IF &RUN_CNTL_BEN.INCLUDE_2X = 'Y'
      if $OrInd = 'Y'
         Concat ' OR ' with $vselect1
         Concat ' OR ' with $vselect2
         Concat ', '   with $Plans
      end-if
      concat 'A.PLAN_TYPE LIKE ' with $vselect1
      concat $Quote    with $vselect1
      concat '2%'      with $vselect1
      concat $Quote    with $vselect1
      concat ' Life and AD/D: '  with $Plans
      concat $Quote    with $Plans
      concat '2%'      with $Plans
      concat $Quote    with $Plans
      concat ' Life and AD/D: '  with $Plans2
      concat $Quote    with $Plans2
      concat '2%'      with $Plans2
      concat $Quote    with $Plans2
      concat 'AA.PLAN_TYPE LIKE ' with $vselect2
      concat $Quote    with $vselect2
      concat '2%'      with $vselect2
      concat $Quote    with $vselect2

      Let $OrInd = 'Y'
  End-if

  IF &RUN_CNTL_BEN.INCLUDE_4X = 'Y'
      if $OrInd = 'Y'
         Concat ' OR ' with $vselect1
         Concat ' OR ' with $vselect2
         Concat ', '   with $Plans
      end-if
      concat 'A.PLAN_TYPE LIKE ' with $vselect1
      concat $Quote    with $vselect1
      concat '4%'      with $vselect1
      concat $Quote    with $vselect1
      concat ' Savings: '  with $Plans
      concat $Quote    with $Plans
      concat '4%'      with $Plans
      concat $Quote    with $Plans
      concat ' Savings: '  with $Plans2
      concat $Quote    with $Plans2
      concat '4%'      with $Plans2
      concat $Quote    with $Plans2
      concat 'AA.PLAN_TYPE LIKE ' with $vselect2
      concat $Quote    with $vselect2
      concat '4%'      with $vselect2
      concat $Quote    with $vselect2

      Let $OrInd = 'Y'
  End-if

  IF &RUN_CNTL_BEN.INCLUDE_8X = 'Y'
      if $OrInd = 'Y'
         Concat ' OR ' with $vselect1
         Concat ' OR ' with $vselect2
         Concat ', '   with $Plans
      end-if
      concat 'A.PLAN_TYPE LIKE ' with $vselect1
      concat $Quote    with $vselect1
      concat '8%'      with $vselect1
      concat $Quote    with $vselect1
      concat ' Pension: '  with $Plans
      concat $Quote    with $Plans
      concat '8%'      with $Plans
      concat $Quote    with $Plans
      concat ' Pension: '  with $Plans2
      concat $Quote    with $Plans2
      concat '8%'      with $Plans2
      concat $Quote    with $Plans2
      concat 'AA.PLAN_TYPE LIKE ' with $vselect2
      concat $Quote    with $vselect2
      concat '8%'      with $vselect2
      concat $Quote    with $vselect2

  End-if

  Concat ')'  with $vselect1
  Concat ')'  with $vselect2

end-procedure


!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN734 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
! do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN734', 'REPORT_TITLE',       $BEN734-REPORT-TITLE,   #CW)
  do Get_Field_Information ('BEN734', 'AUDIT',              $BEN734-REPORT-SUBTITLE,#CW)

  do Get_Field_Information ('BEN734', 'AUDIT_TYPE_ME',      $BEN734-AUDIT_TYPE_ME,   #CW)
  do Get_Field_Information ('BEN734', 'AUDIT_TYPE_UI',      $BEN734-AUDIT_TYPE_UI,   #CW)
  do Get_Field_Information ('BEN734', 'AUDIT_TYPE_SA',      $BEN734-AUDIT_TYPE_SA,   #CW)

  do Get_Field_Information ('BEN734', 'REPORT_ENDED',       $BEN734-REPORT-ENDED,   #CW)
  do Get_Field_Information ('BEN734', 'REPORT_REQ',         $BEN734-REPORT-REQ,     #CW)
  do Get_Field_Information ('BEN734', 'CHECK_REPORT',       $BEN734-CHECK-REPORT,   #CW)
  do Get_Field_Information ('BEN734', 'END_REPORT',         $BEN734-END-REPORT,     #CW)
  do Get_Field_Information ('BEN734', 'DEPENDENT_BENEF',    $BEN734-DEPENDENT-BENEF,#CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE_ID',        $BEN1-EMPLOYEE-ID,      #CW)
  do Get_Field_Information ('BEN734', 'NAME',               $BEN734-NAME,           #CW)
  do Get_Field_Information ('BEN734', 'BEN_PLAN',           $BEN734-BEN-PLAN,       #CW)
  do Get_Field_Information ('BEN734', 'PLAN',               $BEN734-PLAN,           #CW)
  do Get_Field_Information ('BEN734', 'EFFDT',              $BEN734-EFFDT,          #CW)
  do Get_Field_Information ('BEN734', 'SPOUSE',             $BEN734-SPOUSE,         #CW)
  do Get_Field_Information ('BEN734', 'ID',                 $BEN734-ID,             #CW)
  do Get_Field_Information ('BEN734', 'BEN_COURT_ORDR_NUM', $BEN734-COURT-ORDER-NUM,#CW)
  do Get_Field_Information ('BEN734', 'ENROLL_LIFE',        $BEN734-ENROLL-LIFE,    #CW)
  do Get_Field_Information ('BEN734', 'ENROLL_SAVINGS',     $BEN734-ENROLL-SAVINGS, #CW)
  do Get_Field_Information ('BEN734', 'ENROLL_PENSION',     $BEN734-ENROLL-PENSION, #CW)

End-Procedure


!*************************************
begin-procedure Get-Values
!*************************************
! Used for RunControl

 do Select-Parameters

end-procedure


!**********************************
begin-procedure Ask-Parameters
!**********************************
! Used if run interactively

End-Procedure

!**************
Begin-Heading 8
!**************

 #Include 'stdhdg01.sqc'

 Let $SubTitle = $BEN734-REPORT-SUBTITLE
 Concat ' ' with $SubTitle

 If $Ind-SubTitle = '1'
    Concat $BEN734-AUDIT_TYPE_ME With $SubTitle
 End-if
 If $Ind-SubTitle = '2'
    Concat $BEN734-AUDIT_TYPE_UI With $SubTitle
 End-if
 If $Ind-SubTitle = '3'
    Concat $BEN734-AUDIT_TYPE_SA With $SubTitle
 End-if

 do Format-Datetime(&RUN_CNTL_BEN.ASOFDATE, $Out, {DEFDATE}, '', '')

 Print 'As Of Date:  '    (0,1)
 Print  $Out ()
 Print 'Selected Plan Types:  '    (+1,1)
 If $Ind-SubTitle = '3'
    Print $Plans2 ()
 Else
    Print $Plans ()
 End-If

 Print $SubTitle                    (+1,1)

 If $Ind-SubTitle = '1' or  $Ind-SubTitle = '2'
      Print   'Emplid'                   (+2,1,{col-emplid})
      Print   $BEN734-NAME               (+0,+{col-sep},{col-name})
      Print   $BEN734-PLAN               (+0,+{col-sep},{col-plan})
      Print   $BEN734-ID                 (+0,+{col-sep},{col-dep-id})
      Print   $BEN734-DEPENDENT-BENEF    (+0,+{col-sep},{col-name})
      Print   $BEN734-COURT-ORDER-NUM    (+0,+{col-sep},{col-ben-courtord})


      Print   '='                        (+1,1,{col-emplid})                 Fill
      Print   '='                        (+0,+{col-sep},{col-name})          Fill
      Print   '='                        (+0,+{col-sep},{col-plan})          Fill
      Print   '='                        (+0,+{col-sep},{col-dep-id})        Fill
      Print   '='                        (+0,+{col-sep},{col-name})          Fill
      Print   '='                        (+0,+{col-sep},{col-ben-courtord})  Fill
      Print   ' '                        (+2,1)                              Fill
 end-if

 If $Ind-SubTitle = '3'
      Print   'Emplid'                   (+2,1,{col-emplid})
      Print   $BEN734-NAME               (+0,+{col-sep},{col-name})
      Print   $BEN734-PLAN               (+0,+{col-sep},{col-plan})
      Print   $BEN734-BEN-PLAN           (+0,+{col-sep},{col-benefit-plan})
      Print   $BEN734-EFFDT              (+0,+{col-sep},{col-effdt})
      Print   $BEN734-SPOUSE             (+0,+{col-sep},{col-name})


      Print   '='                        (+1,1,{col-emplid})                 Fill
      Print   '='                        (+0,+{col-sep},{col-name})          Fill
      Print   '='                        (+0,+{col-sep},{col-plan})          Fill
      Print   '='                        (+0,+{col-sep},{col-benefit-plan})  Fill
      Print   '='                        (+0,+{col-sep},{col-effdt})         Fill
      Print   '='                        (+0,+{col-sep},{col-name})          Fill
      Print   ' '                        (+2,1)                              Fill
  End-if

End-Heading


!*************************************
Begin-Procedure Process-Main
!*************************************
!
 Print ' ' (+1,1,1)

  if  &RUN_CNTL_BEN.AUDIT_TYPE_ME = 'Y'
       Let $Ind-SubTitle = '1'

       Do 100-Process-Employees
       new-page
  end-if
  if  &RUN_CNTL_BEN.AUDIT_TYPE_UI = 'Y'
       Let $Ind-SubTitle = '2'
       Print ' ' (+1,1,1)
       Do 200-Process-Employees
       new-page
  end-if

  if  &RUN_CNTL_BEN.AUDIT_TYPE_SA = 'Y'
       Let $Ind-SubTitle = '3'
       Print ' ' (+1,1,1)
       Do 300-Process-Employees
  end-if

End-Procedure


!*************************************
Begin-Procedure 100-Process-Employees
!*************************************
!
! Driving loop - select specified Emplid,
!                or every row from Person_Name
!

 Let $Audit-Type-ME = ' '

Begin-SELECT
A.EMPLID
B.NAME
A.PLAN_TYPE
A.DEPENDENT_BENEF
C.NAME
A.STATE
A.BEN_COURT_ORDR_NUM
A.START_DT
A.EFFSEQ

   Move ' ' to $Audit-Type-ME

   let $Plan_Category = SubStr(&A.Plan_Type, 1, 1)
   if ($Plan_Category = '1')
      Do 100-Validate-Health
   end-if
   if ($Plan_Category = '2')
      Do 100-Validate-Life-Add
   end-if
   if ($Plan_Category = '4')
      Do 100-Validate-Savings
   end-if
   if ($Plan_Category = '8')
      Do 100-Validate-Pension
   end-if

   If IsBlank($Audit-Type-ME)
        do Format-Datetime(&A.START_DT, $Out, {DEFDATE}, '', '')

        Print   &A.EMPLID                  (+2,1,{col-emplid})
        Print   &B.NAME                    (+0,+{col-sep},{col-name})
        Print   &A.PLAN_TYPE               (+0,+{col-sep},{col-plan})
        Print   &A.DEPENDENT_BENEF         (+0,+{col-sep},{col-dep-id})
        Print   &C.NAME                    (+0,+{col-sep},{col-name})
        Print   &A.STATE                   (+0,+{col-sep},{col-state})
        Print   &A.BEN_COURT_ORDR_NUM      (+0,+{col-sep},{col-ben-courtord-1})
        Print   $Out                       (+0,+{col-sep},{col-effdt})
   End-if

FROM PS_DEPBEN_RIDER A,
     PS_PERSON_NAME  B,
     PS_DEP_BEN_NAME C
WHERE A.EMPLID = B.EMPLID AND
      A.EMPLID = C.EMPLID AND
      A.DEPENDENT_BENEF = C.DEPENDENT_BENEF AND
      C.EFFDT = ( SELECT MAX(C1.EFFDT) 
                  FROM PS_DEP_BEN_NAME C1
                  WHERE C1.EMPLID = C.EMPLID
                  AND C1.DEPENDENT_BENEF = C.DEPENDENT_BENEF 
                  AND C1.EFFDT <= $ASOFTODAY) AND
            [$vselect1] AND
      A.START_DT = ( SELECT MAX(AA.START_DT) FROM PS_DEPBEN_RIDER AA
                   WHERE  AA.EMPLID = A.EMPLID AND
                          AA.DEPENDENT_BENEF = A.DEPENDENT_BENEF AND
                          AA.PLAN_TYPE = A.PLAN_TYPE AND
                          AA.START_DT <= &RUN_CNTL_BEN.ASOFDATE ) AND
      A.EFFSEQ = (SELECT MAX(BB.EFFSEQ) FROM PS_DEPBEN_RIDER BB
                   WHERE  BB.EMPLID = A.EMPLID AND
                          BB.DEPENDENT_BENEF = A.DEPENDENT_BENEF AND
                          BB.PLAN_TYPE = A.PLAN_TYPE AND
                          BB.START_DT  = A.START_DT) AND
      A.EFF_STATUS = 'A'
ORDER BY A.EMPLID,A.PLAN_TYPE

End-Select

End-procedure


!***************************************
Begin-Procedure 100-Validate-Health
!***************************************
!
Begin-SELECT
HB.EMPLID
   move 'X' to $Audit-Type-ME

FROM PS_HEALTH_BENEFIT HB
WHERE HB.EMPLID =    &A.EMPLID AND
      HB.PLAN_TYPE = &A.PLAN_TYPE AND
      HB.EFFDT = ( SELECT MAX(HB1.EFFDT) FROM PS_HEALTH_BENEFIT HB1
                   WHERE HB1.EMPLID     = HB.EMPLID AND
                         HB1.PLAN_TYPE  = HB.PLAN_TYPE AND
                         HB1.EMPL_RCD   = HB.EMPL_RCD AND
                         HB1.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE) AND
      HB.COVERAGE_ELECT = 'E'
End-Select

End-Procedure

!***************************************
Begin-Procedure 100-Validate-Life-Add
!***************************************
!
Begin-SELECT
LI.EMPLID
   move 'X' to $Audit-Type-ME

FROM PS_LIFE_ADD_BEN LI
WHERE LI.EMPLID =    &A.EMPLID AND
      LI.PLAN_TYPE = &A.PLAN_TYPE AND
      LI.EFFDT = ( SELECT MAX(LI1.EFFDT) FROM PS_LIFE_ADD_BEN LI1
                   WHERE LI1.EMPLID     = LI.EMPLID AND
                         LI1.PLAN_TYPE  = LI.PLAN_TYPE AND
                         LI1.EMPL_RCD   = LI.EMPL_RCD AND
                         LI1.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE) AND
      LI.COVERAGE_ELECT = 'E'
End-Select

End-Procedure


!***************************************
Begin-Procedure 100-Validate-Savings
!***************************************
!
Begin-SELECT
SP.EMPLID
   move 'X' to $Audit-Type-ME

FROM PS_SAVINGS_PLAN SP
WHERE SP.EMPLID =    &A.EMPLID AND
      SP.PLAN_TYPE = &A.PLAN_TYPE AND
      SP.EFFDT = ( SELECT MAX(SP1.EFFDT) FROM PS_SAVINGS_PLAN SP1
                   WHERE SP1.EMPLID     = SP.EMPLID AND
                         SP1.PLAN_TYPE  = SP.PLAN_TYPE AND
                         SP1.EMPL_RCD   = SP.EMPL_RCD AND
                         SP1.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE) AND
      SP.COVERAGE_ELECT = 'E'
End-Select

End-Procedure

!***************************************
Begin-Procedure 100-Validate-Pension
!***************************************
!
Begin-SELECT
PP.EMPLID
   move 'X' to $Audit-Type-ME

FROM PS_PENSION_PLAN PP
WHERE PP.EMPLID =    &A.EMPLID AND
      PP.PLAN_TYPE = &A.PLAN_TYPE AND
      PP.EFFDT = ( SELECT MAX(PP1.EFFDT) FROM PS_PENSION_PLAN PP1
                   WHERE PP1.EMPLID     = PP.EMPLID AND
                         PP1.PLAN_TYPE  = PP.PLAN_TYPE AND
                         PP1.EMPL_RCD   = PP.EMPL_RCD AND
                         PP1.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE ) AND
      PP.COVERAGE_ELECT = 'E'
End-Select

End-Procedure


!*************************************
Begin-Procedure 200-Process-Employees
!*************************************
!
! Driving loop - select specified Emplid,
!                or every row from Person_Name
!
Begin-SELECT
AA.EMPLID
AB.NAME
AA.PLAN_TYPE
AA.DEPENDENT_BENEF
AC.NAME
AA.STATE
AA.BEN_COURT_ORDR_NUM
AA.START_DT
AA.EFFSEQ

   Move ' ' to $Audit-Type-UI

   let $Plan_Category = SubStr(&AA.Plan_Type, 1, 1)
   if ($Plan_Category = '1')
      Do 200-Validate-Health
   end-if
   if ($Plan_Category = '2')
      Do 200-Validate-Life-Add
   end-if
   if ($Plan_Category = '4')
      Do 200-Validate-Savings
   end-if
   if ($Plan_Category = '8')
      Do 200-Validate-Pension
   end-if

   If $Audit-Type-UI = 'X'
        do Format-Datetime(&AA.START_DT, $Out, {DEFDATE}, '', '')

        Print   &AA.EMPLID                  (+2,1,{col-emplid})
        Print   &AB.NAME                    (+0,+{col-sep},{col-name})
        Print   &AA.PLAN_TYPE               (+0,+{col-sep},{col-plan})
        Print   &AA.DEPENDENT_BENEF         (+0,+{col-sep},{col-dep-id})
        Print   &AC.NAME                    (+0,+{col-sep},{col-name})
        Print   &AA.STATE                   (+0,+{col-sep},{col-state})
        Print   &AA.BEN_COURT_ORDR_NUM      (+0,+{col-sep},{col-ben-courtord-1})
        Print   $Out                        (+0,+{col-sep},{col-effdt})
   End-if

FROM PS_DEPBEN_RIDER AA,
     PS_PERSON_NAME  AB,
     PS_DEP_BEN_NAME AC
WHERE AA.EMPLID = AB.EMPLID AND
      AA.EMPLID = AC.EMPLID AND
      AA.DEPENDENT_BENEF = AC.DEPENDENT_BENEF AND
      AC.EFFDT = ( SELECT MAX(AC1.EFFDT) 
                  FROM PS_DEP_BEN_NAME AC1
                  WHERE AC1.EMPLID = AC.EMPLID
                  AND AC1.DEPENDENT_BENEF = AC.DEPENDENT_BENEF 
                  AND AC1.EFFDT <= $ASOFTODAY) AND
      [$vselect2]  AND
      AA.START_DT = ( SELECT MAX(AAA.START_DT) FROM PS_DEPBEN_RIDER AAA
                   WHERE  AAA.EMPLID = AA.EMPLID AND
                          AAA.DEPENDENT_BENEF = AA.DEPENDENT_BENEF AND
                          AAA.PLAN_TYPE = AA.PLAN_TYPE AND
                          AAA.START_DT <= &RUN_CNTL_BEN.ASOFDATE ) AND
      AA.EFFSEQ = (SELECT MAX(ABB.EFFSEQ) FROM PS_DEPBEN_RIDER ABB
                   WHERE  ABB.EMPLID = AA.EMPLID AND
                          ABB.DEPENDENT_BENEF = AA.DEPENDENT_BENEF AND
                          ABB.PLAN_TYPE = AA.PLAN_TYPE AND
                          ABB.START_DT  = AA.START_DT) AND
      AA.EFF_STATUS = 'A'
ORDER BY AA.EMPLID,AA.PLAN_TYPE

End-Select

End-procedure


!***************************************
Begin-Procedure 200-Validate-Health
!***************************************
!
Begin-SELECT
AHB.EMPLID
   move 'X' to $Audit-Type-UI

FROM PS_HEALTH_BENEFIT AHB
WHERE AHB.EMPLID = &AA.EMPLID AND
      AHB.PLAN_TYPE = &AA.PLAN_TYPE AND
      AHB.EFFDT = ( SELECT MAX(HB2.EFFDT) FROM PS_HEALTH_BENEFIT HB2
                   WHERE HB2.EMPLID     = AHB.EMPLID AND
                         HB2.PLAN_TYPE  = AHB.PLAN_TYPE AND
                         HB2.EMPL_RCD   = AHB.EMPL_RCD AND
                         HB2.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE AND
                         HB2.COVERAGE_ELECT = 'E') AND
      AHB.COVERAGE_ELECT = 'E' AND
      AHB.EMPLID NOT  IN ( SELECT HD.EMPLID FROM PS_HEALTH_DEPENDNT HD
                   WHERE HD.EMPLID      = AHB.EMPLID AND
                         HD.PLAN_TYPE   = AHB.PLAN_TYPE AND
                         HD.EMPL_RCD    = AHB.EMPL_RCD AND
                         HD.EFFDT       = AHB.EFFDT AND
                         HD.DEPENDENT_BENEF = &AA.DEPENDENT_BENEF)

End-Select

End-procedure


!***************************************
Begin-Procedure 200-Validate-Life-Add
!***************************************
!
Begin-SELECT
ALI.EMPLID
   move 'X' to $Audit-Type-UI

FROM PS_LIFE_ADD_BEN ALI
WHERE ALI.EMPLID = &AA.EMPLID AND
      ALI.PLAN_TYPE = &AA.PLAN_TYPE AND
      ALI.EFFDT = ( SELECT MAX(HB3.EFFDT) FROM PS_LIFE_ADD_BEN HB3
                   WHERE HB3.EMPLID     = ALI.EMPLID AND
                         HB3.PLAN_TYPE  = ALI.PLAN_TYPE AND
                         HB3.EMPL_RCD   = ALI.EMPL_RCD AND
                         HB3.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE AND
                         HB3.COVERAGE_ELECT = 'E' ) AND
      ALI.COVERAGE_ELECT = 'E' AND
      ALI.EMPLID NOT  IN ( SELECT LB.EMPLID FROM PS_LIFE_ADD_BENEFC LB
                   WHERE LB.EMPLID      = ALI.EMPLID AND
                         LB.PLAN_TYPE   = ALI.PLAN_TYPE AND
                         LB.EMPL_RCD    = ALI.EMPL_RCD AND
                         LB.EFFDT       = ALI.EFFDT AND
                         LB.DEPENDENT_BENEF = &AA.DEPENDENT_BENEF)

End-Select

End-procedure


!***************************************
Begin-Procedure 200-Validate-Savings
!***************************************
!
Begin-SELECT
SP1.EMPLID
   move 'X' to $Audit-Type-UI

FROM PS_SAVINGS_PLAN SP1
WHERE SP1.EMPLID = &AA.EMPLID AND
      SP1.PLAN_TYPE = &AA.PLAN_TYPE AND
      SP1.EFFDT = ( SELECT MAX(SP3.EFFDT) FROM PS_SAVINGS_PLAN SP3
                   WHERE SP3.EMPLID     = SP1.EMPLID AND
                         SP3.PLAN_TYPE  = SP1.PLAN_TYPE AND
                         SP3.EMPL_RCD   = SP1.EMPL_RCD AND
                         SP3.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE AND
                         SP3.COVERAGE_ELECT = 'E') AND
      SP1.COVERAGE_ELECT = 'E' AND
      SP1.EMPLID NOT  IN ( SELECT SB.EMPLID FROM PS_SAVINGS_BENEFIC SB
                   WHERE SB.EMPLID      = SP1.EMPLID AND
                         SB.PLAN_TYPE   = SP1.PLAN_TYPE AND
                         SB.EMPL_RCD    = SP1.EMPL_RCD AND
                         SB.EFFDT       = SP1.EFFDT AND
                         SB.DEPENDENT_BENEF = &AA.DEPENDENT_BENEF)

End-Select

End-procedure


!***************************************
Begin-Procedure 200-Validate-Pension
!***************************************
!
Begin-SELECT
PP1.EMPLID
   move 'X' to $Audit-Type-UI

FROM PS_PENSION_PLAN PP1
WHERE PP1.EMPLID = &AA.EMPLID AND
      PP1.PLAN_TYPE = &AA.PLAN_TYPE AND
      PP1.EFFDT = ( SELECT MAX(PP3.EFFDT) FROM PS_PENSION_PLAN PP3
                   WHERE PP3.EMPLID     = PP1.EMPLID AND
                         PP3.PLAN_TYPE  = PP1.PLAN_TYPE AND
                         PP3.EMPL_RCD   = PP1.EMPL_RCD AND
                         PP3.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE AND
                         PP3.COVERAGE_ELECT = 'E' ) AND
      PP1.COVERAGE_ELECT = 'E' AND
      PP1.EMPLID NOT  IN ( SELECT PB.EMPLID FROM PS_PENSION_BENEFC PB
                   WHERE PB.EMPLID      = PP1.EMPLID AND
                         PB.PLAN_TYPE   = PP1.PLAN_TYPE AND
                         PB.EMPL_RCD    = PP1.EMPL_RCD AND
                         PB.EFFDT       = PP1.EFFDT AND
                         PB.DEPENDENT_BENEF = &AA.DEPENDENT_BENEF)

End-Select

End-procedure


!*************************************
Begin-Procedure 300-Process-Employees
!*************************************
!
! Driving loop - select specified Emplid,
!                or every row from Person_Name
!
   let  $2x = &RUN_CNTL_BEN.INCLUDE_2X
   let  $4x = &RUN_CNTL_BEN.INCLUDE_4X
   let  $8x = &RUN_CNTL_BEN.INCLUDE_8X

begin-SELECT
PD.EMPLID,
PE.NAME,
DB.DEPENDENT_BENEF,
PD.EFFDT
DN.NAME

    if $2X = 'Y'

        Do 310-Validate-Life-Add-Enrollment                    
           
    end-if    

    if $4X = 'Y'

        Do 320-Validate-Savings-Enrollment
                       
    end-if    

    if $8X = 'Y'

        Do 330-Validate-Pension-Enrollment            
           
    end-if

FROM PS_PERS_DATA_EFFDT PD,
     PS_DEP_BEN DB,
     PS_DEP_BEN_EFF DE,
     PS_DEP_BEN_NAME DN,
     PS_PERSON_NAME     PE

WHERE PD.EMPLID = DB.EMPLID AND
      DB.EMPLID = PE.EMPLID AND
      PD.MAR_STATUS = 'M' AND
      PD.EFFDT = ( SELECT MAX(PD1.EFFDT) FROM PS_PERS_DATA_EFFDT PD1
                        WHERE PD1.EMPLID = PD.EMPLID AND
                              PD1.EFFDT <= &RUN_CNTL_BEN.ASOFDATE)
!AND PD1.MAR_STATUS = PD.MAR_STATUS ) AND
!     (((DB.RELATIONSHIP = 'SP') AND
!     ((DB.MAR_STATUS_DT IS NULL) OR (DB.MAR_STATUS_DT <= PD.EFFDT )))
!     OR
!     ((DB.RELATIONSHIP = 'X') AND (DB.MAR_STATUS_DT IS NOT NULL) AND
!     (DB.MAR_STATUS_DT >= PD.EFFDT ) ) )
      AND
     (DB.DT_OF_DEATH IS NULL OR
         (DB.DT_OF_DEATH > PD.EFFDT) )
 AND DE.EMPLID = DB.EMPLID
 AND DE.DEPENDENT_BENEF = DB.DEPENDENT_BENEF
 AND DE.EFFDT = (SELECT MAX(DE1.EFFDT)
                 FROM PS_DEP_BEN_EFF DE1
                 WHERE DE1.EMPLID = DE.EMPLID
                 AND DE1.DEPENDENT_BENEF = DE.DEPENDENT_BENEF
                 AND DE1.EFFDT <= &RUN_CNTL_BEN.ASOFDATE)
 AND DE.RELATIONSHIP = 'SP'
 AND DN.EMPLID = DB.EMPLID
 AND DN.DEPENDENT_BENEF = DB.DEPENDENT_BENEF
 AND DN.EFFDT = (SELECT MAX(DN1.EFFDT)
                 FROM PS_DEP_BEN_NAME DN1
                 WHERE DN1.EMPLID = DN.EMPLID
                 AND DN1.DEPENDENT_BENEF = DN.DEPENDENT_BENEF
                 AND DN1.EFFDT <= $ASOFTODAY)


End-Select

End-Procedure

!***********************************************
Begin-Procedure 310-Validate-Life-Add-Enrollment
!***********************************************
!
begin-SELECT
LAB.EMPLID
LAB.EMPL_RCD
LAB.PLAN_TYPE
LAB.BENEFIT_PLAN
LAB.EFFDT
BPT.MIN_BENEFIC_ALLOC
   
     let $SW-PLAN-TYPE = &LAB.PLAN_TYPE     
     do 311-Life-Add-Spouse-Allocation
     
FROM PS_LIFE_ADD_BEN    LAB,         
     PS_BENEF_PLAN_TBL  BPT
WHERE LAB.EMPLID = &PD.EMPLID AND
      LAB.COVERAGE_ELECT = 'E' AND      
      LAB.EFFDT = ( SELECT MAX(LAB1.EFFDT) FROM PS_LIFE_ADD_BEN LAB1
                         WHERE LAB1.EMPLID = LAB.EMPLID AND
                               LAB1.EMPL_RCD = LAB.EMPL_RCD AND
                               LAB1.PLAN_TYPE = LAB.PLAN_TYPE AND
                               LAB1.EFFDT <= &RUN_CNTL_BEN.ASOFDATE) AND      
      BPT.PLAN_TYPE = LAB.PLAN_TYPE AND
      BPT.BENEFIT_PLAN = LAB.BENEFIT_PLAN AND
      BPT.EFFDT = (SELECT MAX(EFFDT) FROM PS_BENEF_PLAN_TBL 
                       WHERE PLAN_TYPE = LAB.PLAN_TYPE AND
                             BENEFIT_PLAN = LAB.BENEFIT_PLAN AND                             
                             EFFDT <= LAB.EFFDT) AND
      
      BPT.MIN_BENEFIC_ALLOC <> 0  
      
End-Select

End-Procedure


!*********************************************
Begin-Procedure 311-Life-Add-Spouse-Allocation
!*********************************************
!
  Let $Life-Add-Spouse-Enrollment = 'N'
  Let $Life-Add-Below-Min = 'N'
  Let $Plan-Type = ' '
  Let $Benefit-Plan = $BEN734-ENROLL-LIFE

begin-SELECT
LA.DEPENDENT_BENEF
LA.BENEF_PCT
LA.CONTINGENT
     
     ! Validates that if Minimum Spousal Allocation was defined on Benefit Plan
     ! Spousal Allocation must >= to the minimum.
     
     Let $Life-Add-Spouse-Enrollment = 'Y'
     Let $Plan-Type = &LAB.PLAN_TYPE
     Let $Benefit-Plan = &LAB.BENEFIT_PLAN

     If ( &BPT.MIN_BENEFIC_ALLOC > &LA.BENEF_PCT  OR
                   &LA.CONTINGENT = 'Y')
        Let $Life-Add-Below-Min = 'Y'

     End-If

FROM PS_LIFE_ADD_BENEFC LA
WHERE LA.EMPLID = &LAB.EMPLID AND
      LA.EMPL_RCD = &LAB.EMPL_RCD AND
      LA.DEPENDENT_BENEF = &DB.DEPENDENT_BENEF AND
      LA.PLAN_TYPE = &LAB.PLAN_TYPE AND
      LA.EFFDT = &LAB.EFFDT   
      
End-Select

  if $Life-Add-Spouse-Enrollment = 'N' or $Life-Add-Below-Min = 'Y'
   
     do Spousal-Waiver
     if $Spousal-Waiver = 'N'      
        
        do Print-Spouse-Alloc-Exception

     end-if
  end-if 

End-Procedure


!**********************************************
Begin-Procedure 320-Validate-Savings-Enrollment
!**********************************************
!
Begin-SELECT

SP31.EMPLID
SP31.EMPL_RCD
SP31.PLAN_TYPE
SP31.BENEFIT_PLAN
SP31.EFFDT
BPT2.MIN_BENEFIC_ALLOC
     
     let $SW-PLAN-TYPE = &SP31.PLAN_TYPE
     do 321-Savings-Spouse-Allocation

FROM PS_SAVINGS_PLAN    SP31,     
     PS_BENEF_PLAN_TBL  BPT2

WHERE SP31.EMPLID =    &PD.EMPLID AND      
      SP31.EFFDT = ( SELECT MAX(SP1.EFFDT) FROM PS_SAVINGS_PLAN SP1
                   WHERE SP1.EMPLID     = SP31.EMPLID AND
                         SP1.PLAN_TYPE  = SP31.PLAN_TYPE AND                         
                         SP1.EMPL_RCD   = SP31.EMPL_RCD AND
                         SP1.EFFDT     <= &RUN_CNTL_BEN.ASOFDATE) AND
      SP31.COVERAGE_ELECT = 'E' AND
      BPT2.PLAN_TYPE = SP31.PLAN_TYPE AND
      BPT2.BENEFIT_PLAN = SP31.BENEFIT_PLAN AND
      BPT2.EFFDT = (SELECT MAX(EFFDT) FROM PS_BENEF_PLAN_TBL 
                       WHERE PLAN_TYPE = SP31.PLAN_TYPE AND
                             BENEFIT_PLAN = SP31.BENEFIT_PLAN AND                             
                             EFFDT <= SP31.EFFDT) AND      
      BPT2.MIN_BENEFIC_ALLOC <> 0  
      
End-Select

End-Procedure

!********************************************
Begin-Procedure 321-Savings-Spouse-Allocation
!********************************************
!

  Let $Savings-Spouse-Enrollment = 'N'
  Let $Savings-Below-Min = 'N'
  Let $Plan-Type = ' '
  Let $Benefit-Plan = $BEN734-ENROLL-SAVINGS

Begin-SELECT

SB31.DEPENDENT_BENEF
SB31.BENEF_PCT

     Let $Plan-Type =      &SP31.PLAN_TYPE
     Let $Benefit-Plan =   &SP31.BENEFIT_PLAN
     Let $Savings-Spouse-Enrollment = 'Y'     

     if  &BPT2.MIN_BENEFIC_ALLOC > &SB31.BENEF_PCT 
         Let $Savings-Below-Min = 'Y'
     End-If

FROM PS_SAVINGS_BENEFIC SB31

WHERE SB31.EMPLID = &SP31.EMPLID AND
      SB31.EMPL_RCD = &SP31.EMPL_RCD AND
      SB31.PLAN_TYPE = &SP31.PLAN_TYPE AND
      SB31.DEPENDENT_BENEF =  &DB.DEPENDENT_BENEF AND
      SB31.EFFDT = &SP31.EFFDT       
      
End-Select

  if $Savings-Spouse-Enrollment = 'N' or $Savings-Below-Min = 'Y'
   
     do Spousal-Waiver
     if $Spousal-Waiver = 'N'      
        
        do Print-Spouse-Alloc-Exception

     end-if
  end-if

End-Procedure

!**********************************************
Begin-Procedure 330-Validate-Pension-Enrollment
!**********************************************
!
begin-SELECT
PPA.EMPLID
PPA.EMPL_RCD
PPA.EFFDT
PPA.PLAN_TYPE
PPA.BENEFIT_PLAN
BPT3.MIN_BENEFIC_ALLOC

     let $SW-PLAN-TYPE = &PPA.PLAN_TYPE
     do 331-Pension-Spouse-Allocation

FROM PS_PENSION_PLAN    PPA,     
     PS_BENEF_PLAN_TBL  BPT3
WHERE PPA.EMPLID = &PD.EMPLID AND
      PPA.COVERAGE_ELECT = 'E' AND
      PPA.EFFDT = ( SELECT MAX(PPA1.EFFDT) FROM PS_PENSION_PLAN PPA1
                         WHERE PPA1.EMPLID = PPA.EMPLID AND
                               PPA1.EMPL_RCD = PPA.EMPL_RCD AND
                               PPA1.PLAN_TYPE = PPA.PLAN_TYPE AND
                               PPA1.EFFDT <= &RUN_CNTL_BEN.ASOFDATE) AND      
      BPT3.PLAN_TYPE = PPA.PLAN_TYPE AND
      BPT3.BENEFIT_PLAN = PPA.BENEFIT_PLAN AND
      BPT3.EFFDT = (SELECT MAX(EFFDT) FROM PS_BENEF_PLAN_TBL 
                       WHERE PLAN_TYPE = PPA.PLAN_TYPE AND
                             BENEFIT_PLAN = PPA.BENEFIT_PLAN AND                             
                             EFFDT <= PPA.EFFDT) AND
      
      BPT3.MIN_BENEFIC_ALLOC <> 0 
      
End-Select

End-Procedure


!**********************************************
Begin-Procedure 331-Pension-Spouse-Allocation
!**********************************************
!
  Let $Pension-Spouse-Enrollment = 'N'
  Let $Pension-Below-Min = 'N'
  Let $Plan-Type = ' '
  Let $Benefit-Plan = $BEN734-ENROLL-PENSION

begin-SELECT
PBA.DEPENDENT_BENEF
PBA.BENEF_PCT
PBA.CONTINGENT

     Let $Plan-Type =      &PPA.PLAN_TYPE
     Let $Benefit-Plan =   &PPA.BENEFIT_PLAN
     Let $Pension-Spouse-Enrollment = 'Y'     

     if  &BPT3.MIN_BENEFIC_ALLOC > &PBA.BENEF_PCT OR
         &PBA.CONTINGENT = 'Y'
 
         Let $Pension-Below-Min = 'Y'

     End-If

FROM PS_PENSION_BENEFC  PBA
     
WHERE PBA.EMPLID = &PPA.EMPLID AND
      PBA.EMPL_RCD = &PPA.EMPL_RCD AND
      PBA.DEPENDENT_BENEF = &DB.DEPENDENT_BENEF AND
      PBA.PLAN_TYPE = &PPA.PLAN_TYPE AND
      PBA.EFFDT = &PPA.EFFDT 
      
End-Select

  if $Pension-Spouse-Enrollment = 'N' or $Pension-Below-Min = 'Y'
   
     do Spousal-Waiver
     if $Spousal-Waiver = 'N'      
        
        do Print-Spouse-Alloc-Exception

     end-if
  end-if

End-Procedure


!***************************************
Begin-Procedure Spousal-Waiver
!***************************************
!
Move 'N' to $Spousal-Waiver

Begin-Select
SW.EMPLID
     Move 'Y' to $Spousal-Waiver

FROM PS_DEPBEN_RIDER SW
WHERE SW.EMPLID = &PD.EMPLID  AND
      SW.PLAN_TYPE = $SW-PLAN-TYPE  AND
      SW.EFF_STATUS = 'A'  AND
      SW.RIDER_TYPE = 'S'  AND
      SW.START_DT <= &RUN_CNTL_BEN.ASOFDATE  AND
     (SW.END_DT IS NULL  OR
      SW.END_DT >= &RUN_CNTL_BEN.ASOFDATE)
End-Select

End-Procedure


!*******************************************
Begin-Procedure Print-Spouse-Alloc-Exception
!*******************************************
      do Format-Datetime(&PD.EFFDT, $Out, {DEFDATE}, '', '')
      Print   &PD.EMPLID                  (+2,1,{col-emplid})
      Print   &PE.NAME                    (+0,+{col-sep},{col-Name})
      Print   $Plan-Type                  (+0,+{col-sep},{col-Plan})
      Print   $Benefit-Plan               (+0,+{col-sep},{col-Benefit-Plan})
      Print   $Out                        (+0,+{col-sep},{col-effdt})
      Print   &DN.NAME                    (+0,+{col-sep},{col-Name})

End-Procedure


!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

#include 'stdapi.sqc'    !Routines to update run status
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
