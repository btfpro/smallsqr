! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  MASSCHNG.SQC:  Mass Change processing shared procedures             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------
! Procedure:    Process-Mass-Change
! Descr:        High Level Controlling Procedure
!
!----------------------------------------------------------------------

#include 'currnd.sqc'   !Rounding Currency Precision


begin-procedure Process-Mass-Change
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Process-Mass-Change:'      (+1,#level)
#ENDIF

   evaluate $MC_Run_Type
      when = '1'
         do Process-MC-Defn
      when = '2'
         do Process-MC-Group
   end-evaluate

   let $MC_SetID = ''
   let $MC_Defn_ID = ''
   let $MC_Group_ID = ''

subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Process-MC-Group
! Descr:        Process Mass Change Definition
!
!----------------------------------------------------------------------

begin-procedure Process-MC-Group
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Process-MC-Group:'    (+1,#level)
#ENDIF


begin-SELECT

MC_SEQ  &SEQ,
MC_DEFN_ID

        let $MC_Defn_ID = &MC_Defn_ID

        do Process-MC-Defn

FROM            PS_MC_GROUP_LN
WHERE           MC_GROUP_ID = $MC_Group_ID
ORDER BY        MC_SEQ

end-SELECT


subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Process-MC-Defn
! Descr:        Process Mass Change Definition
!
!----------------------------------------------------------------------

begin-procedure Process-MC-Defn
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Process-MC-Defn:'    (+1,#level)
#ENDIF

#IFDEF DebugD
       print 'DATA:$MC_Defn_ID:'             (+1,#level)
       print $MC_Defn_ID                     (0,+1)
#ENDIF



begin-SELECT

MCD.ARCHIVE_ID,
MCD.ARCHIVE_DT,
MCDS.MC_STMNT_SEQ

        let #MC_Stmnt_Seq = &MCDS.MC_STMNT_SEQ
        let $Archive_ID   = &MCD.ARCHIVE_ID
        let $Archive_Dt   = &MCD.ARCHIVE_DT

        do Process-MC-Defn-SQL

FROM            PS_MC_DEFN MCD,
                PS_MC_DEFN_STMNT MCDS
WHERE           MCD.MC_DEFN_ID = $MC_Defn_ID
AND             MCD.MC_DEFN_ID = MCDS.MC_DEFN_ID
ORDER BY        MCDS.MC_STMNT_SEQ

end-SELECT

        do Log-Execution-History

subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Process-MC-Defn-SQL
! Descr:        Process Mass Change Definition
!
!----------------------------------------------------------------------

begin-procedure Process-MC-Defn-SQL
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Process-MC-Defn:'    (+1,#level)
#ENDIF

do Update-MC-Defn-Dttm

begin-SELECT

MC_SEQ &MC_SEQ

        let $MC_SQL_STATEMENT = ''

        let #MC_Seq = &MC_SEQ


#IFDEF DebugD
        print 'DATA:#MC_Seq:'             (+1,#level)
        print #MC_Seq                     (0,+1)
#ENDIF


        do Retrieve-MC-SQL-LN

        do Check-For-Sub-Vars

        find '&ROUND' in $MC_SQL_STATEMENT 0 #round-pos
        if #round-pos <> -1
          do MC-Round-Currency
        else
          do Execute-Statement
        end-if



FROM            PS_MC_DEFN_SQL
WHERE           MC_DEFN_ID = $MC_Defn_ID
AND             MC_STMNT_SEQ = #MC_Stmnt_Seq
ORDER BY        MC_SEQ

end-SELECT


subtract 1 from #level
end-procedure



!----------------------------------------------------------------------
! Procedure:    Retrieve-MC-SQL-LN
! Descr:        Retrieve Mass Change SQL that is generated online.
!
!----------------------------------------------------------------------

begin-procedure Retrieve-MC-SQL-LN
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Retrieve-MC-SQL:'    (+1,#level)
#ENDIF


begin-SELECT

SEQUENCE_NBR_6,
MC_SQL_STMNT

        let $MC_SQL_Stmnt = &MC_SQL_STMNT

#IFDEF DebugD

        print 'DATA:$MC_SQL_Stmnt:'             (+1,#level)
        print $MC_SQL_Stmnt                     (0,+1)

#ENDIF

        let #SQL_Length = length($MC_SQL_Stmnt)

        while #SQL_Length < 200

            let $temp_sql = $MC_SQL_Stmnt
            string $temp_sql ' ' by '' into $MC_SQL_Stmnt

            let #SQL_Length = length($MC_SQL_Stmnt)

        end-while

        string $MC_SQL_STATEMENT $MC_SQL_Stmnt
        by '' into $MC_SQL_TEMP

        let $MC_SQL_STATEMENT = $MC_SQL_TEMP


FROM            PS_MC_DEFN_SQL_LN
WHERE           MC_DEFN_ID = $MC_Defn_ID
AND             MC_STMNT_SEQ = #MC_STMNT_SEQ
AND             MC_SEQ = #MC_Seq

ORDER BY        SEQUENCE_NBR_6

end-SELECT


subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Execute-Statement
! Descr:        Update the timestamp on MC_DEFN to the current time.
!
!
!----------------------------------------------------------------------

begin-procedure Execute-Statement
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Execute-Statement'       (+1,#level)
#ENDIF

#IFDEF DebugD

   let $t1  = substr($MC_SQL_STATEMENT,1,200)
   let $t2  = substr($MC_SQL_STATEMENT,201,200)
   let $t3  = substr($MC_SQL_STATEMENT,401,200)
   let $t4  = substr($MC_SQL_STATEMENT,601,200)
   let $t5  = substr($MC_SQL_STATEMENT,801,200)
   let $t6  = substr($MC_SQL_STATEMENT,1001,200)
   let $t7  = substr($MC_SQL_STATEMENT,1201,200)
   let $t8  = substr($MC_SQL_STATEMENT,1401,200)
   let $t9  = substr($MC_SQL_STATEMENT,1601,200)
   let $t10 = substr($MC_SQL_STATEMENT,1801,200)
   let $t11 = substr($MC_SQL_STATEMENT,2001,200)
   let $t12 = substr($MC_SQL_STATEMENT,2201,200)
   let $t13 = substr($MC_SQL_STATEMENT,2401,200)
   let $t14 = substr($MC_SQL_STATEMENT,2601,200)
   let $t15 = substr($MC_SQL_STATEMENT,2801,200)
   let $t16 = substr($MC_SQL_STATEMENT,3001,200)
   let $t17 = substr($MC_SQL_STATEMENT,3201,200)
   let $t18 = substr($MC_SQL_STATEMENT,3401,200)
   let $t19 = substr($MC_SQL_STATEMENT,3601,200)
   let $t20 = substr($MC_SQL_STATEMENT,3801,200)

   let $t21 = substr($MC_SQL_STATEMENT,4001,200)
   let $t22 = substr($MC_SQL_STATEMENT,4201,200)
   let $t23 = substr($MC_SQL_STATEMENT,4401,200)
   let $t24 = substr($MC_SQL_STATEMENT,4601,200)
   let $t25 = substr($MC_SQL_STATEMENT,4801,200)
   let $t26 = substr($MC_SQL_STATEMENT,5001,200)
   let $t27 = substr($MC_SQL_STATEMENT,5201,200)
   let $t28 = substr($MC_SQL_STATEMENT,5401,200)
   let $t29 = substr($MC_SQL_STATEMENT,5601,200)
   let $t30 = substr($MC_SQL_STATEMENT,5801,200)
   let $t31 = substr($MC_SQL_STATEMENT,6001,200)
   let $t32 = substr($MC_SQL_STATEMENT,6201,200)
   let $t33 = substr($MC_SQL_STATEMENT,6401,200)
   let $t34 = substr($MC_SQL_STATEMENT,6601,200)
   let $t35 = substr($MC_SQL_STATEMENT,6801,200)
   let $t36 = substr($MC_SQL_STATEMENT,7001,200)
   let $t37 = substr($MC_SQL_STATEMENT,7201,200)
   let $t38 = substr($MC_SQL_STATEMENT,7401,200)
   let $t39 = substr($MC_SQL_STATEMENT,7601,200)
   let $t40 = substr($MC_SQL_STATEMENT,7801,200)

   let $t41 = substr($MC_SQL_STATEMENT,8001,200)
   let $t42 = substr($MC_SQL_STATEMENT,8201,200)
   let $t43 = substr($MC_SQL_STATEMENT,8401,200)
   let $t44 = substr($MC_SQL_STATEMENT,8601,200)
   let $t45 = substr($MC_SQL_STATEMENT,8801,200)
   let $t46 = substr($MC_SQL_STATEMENT,9001,200)
   let $t47 = substr($MC_SQL_STATEMENT,9201,200)
   let $t48 = substr($MC_SQL_STATEMENT,9401,200)
   let $t49 = substr($MC_SQL_STATEMENT,9601,200)
   let $t50 = substr($MC_SQL_STATEMENT,9801,200)


   print $T1 (+2,#level)
   print $T2 (+1,#level)
   print $T3 (+1,#level)
   print $T4 (+1,#level)
   print $T5 (+1,#level)
   print $T6 (+1,#level)
   print $T7 (+1,#level)
   print $T8 (+1,#level)
   print $T9 (+1,#level)
   print $T10 (+1,#level)
   print $T11 (+1,#level)
   print $T12 (+1,#level)
   print $T13 (+1,#level)
   print $T14 (+1,#level)
   print $T15 (+1,#level)
   print $T16 (+1,#level)
   print $T17 (+1,#level)
   print $T18 (+1,#level)
   print $T19 (+1,#level)
   print $T20 (+1,#level)

   print $T21 (+2,#level)
   print $T22 (+1,#level)
   print $T23 (+1,#level)
   print $T24 (+1,#level)
   print $T25 (+1,#level)
   print $T26 (+1,#level)
   print $T27 (+1,#level)
   print $T28 (+1,#level)
   print $T29 (+1,#level)
   print $T30 (+1,#level)
   print $T31 (+1,#level)
   print $T32 (+1,#level)
   print $T33 (+1,#level)
   print $T34 (+1,#level)
   print $T35 (+1,#level)
   print $T36 (+1,#level)
   print $T37 (+1,#level)
   print $T38 (+1,#level)
   print $T39 (+1,#level)
   print $T40 (+1,#level)

   print $T41 (+2,#level)
   print $T42 (+1,#level)
   print $T43 (+1,#level)
   print $T44 (+1,#level)
   print $T45 (+1,#level)
   print $T46 (+1,#level)
   print $T47 (+1,#level)
   print $T48 (+1,#level)
   print $T49 (+1,#level)
   print $T50 (+1,#level)

#ENDIF

if isnull($MC_SQL_ADDITIONAL_CONDITION)
     let $MC_SQL_ADDITIONAL_CONDITION = ' '
end-if

let $SQL-Statement = 'MASSCHNG.SQC,Execute-Statement'
begin-SQL  ON-ERROR=SQL-Error
     [$MC_SQL_STATEMENT]
     [$MC_SQL_ADDITIONAL_CONDITION]
end-SQL

subtract 1 from #level
end-procedure

!----------------------------------------------------------------------
! Procedure:    Get-Oracle-Pre-Suf
! Descr:
!
!----------------------------------------------------------------------

begin-procedure Get-Oracle-Pre-Suf
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Get-Oracle-Pre-Suf'       (+1,#level)
#ENDIF

begin-SELECT

DATETIMEIN_PREFIX,
DATETIMEIN_SUFFIX,
DATETIMEOUT_PREFIX,
DATETIMEOUT_SUFFIX,
DATEIN_PREFIX,
DATEIN_SUFFIX,
DATEOUT_PREFIX,
DATEOUT_SUFFIX

  let $Dttm_In_Prefix = &DATETIMEIN_PREFIX
  let $Dttm_In_Suffix = &DATETIMEIN_SUFFIX
  let $Dttm_Out_Prefix = &DATETIMEOUT_PREFIX
  let $Dttm_Out_Suffix = &DATETIMEOUT_SUFFIX
  let $Dt_In_Prefix = &DATEIN_PREFIX
  let $Dt_In_Suffix = &DATEIN_SUFFIX
  let $Dt_Out_Prefix = &DATEOUT_PREFIX
  let $Dt_Out_Suffix = &DATEOUT_SUFFIX

FROM            PS_MC_DTTM_PARMS
WHERE           DB_PLATFORM = '2'

end-SELECT

#IFDEF DebugD
  print 'DATA:$Dttm_In_Prefix:'       (+1,#level)
  print $Dttm_In_Prefix               (+1,#level)
  print 'DATA:$Dttm_In_Suffix:'       (+1,#level)
  print $Dttm_In_Suffix               (+1,#level)
  print 'DATA:$Dttm_Out_Prefix:'       (+1,#level)
  print $Dttm_Out_Prefix               (+1,#level)
  print 'DATA:$Dttm_Out_Suffix:'       (+1,#level)
  print $Dttm_Out_Suffix               (+1,#level)
#ENDIF


subtract 1 from #level
end-procedure




!----------------------------------------------------------------------
! Procedure:    Check-For-Sub-Vars
! Descr:        Substitutes the Run Time values for the following
!               substitution variables (surrounded by $$):
!
!               PI = Process Instance
!               RC = Run Control ID
!               OPRID = Operator ID
!               ARCHIVE_ID = Archive ID
!               ARCHIVE_DT = Archive Date
!
!               Note: don't use $$<variable_name>$$ explicitly because
!                     the pstrans process looks for $<variable_name>$ as
!                     its substitution markers, and this could cause the
!                     values here to be changed.
!----------------------------------------------------------------------
begin-procedure Check-For-Sub-Vars

#define MC_DELIMITER  $$                 ! substitution variable delimiter

add 1 to #level

#IFDEF DebugF
  print 'FLOW:Check-For-Sub-Vars'       (+1,#level)
#ENDIF


  let $Sub_Quote1 = ''
  let $Sub_Quote2 = ''
  let $Sub_Lit = '{MC_DELIMITER}PI{MC_DELIMITER}'
  if #prcs_process_instance > 0
     move #prcs_process_instance  to    $Sub_Value

  else
     let $Sub_Value = '0'
  end-if
  do Check-Sub

#IFDEF INFORMIX
  let $Informix_Patch = 'Y'
  let $Sub_Lit = '#'
  let $Sub_Value = 'n'
  do Check-Sub
  let $Informix_Patch = ''
#ENDIF


  let $Sub_Quote1 = ''''
  let $Sub_Quote2 = ''''
  let $Sub_Lit = '{MC_DELIMITER}RC{MC_DELIMITER}'
  if $run_cntl_id <> ''
     let $Sub_Value = $run_cntl_id
  else
     let $Sub_Value = 'NOTFOUND'
  end-if
  do Check-Sub

  let $Sub_Lit = '{MC_DELIMITER}OPRID{MC_DELIMITER}'
  if $prcs_oprid <> ''
     let $Sub_Value = $prcs_oprid
  else
     let $Sub_Value = 'NOTFOUND'
  end-if
  do Check-Sub

  let $Sub_Lit = '{MC_DELIMITER}ARCHIVE_ID{MC_DELIMITER}'
  if $Archive_ID <> ''
     let $Sub_Value = $Archive_ID
  else
     let $Sub_Value = 'NOTFOUND'
  end-if
  do Check-Sub

  let $Sub_Lit = '{MC_DELIMITER}ARCHIVE_DT{MC_DELIMITER}'
  if $Archive_DT <> ''
     let $Sub_Value = $Archive_DT
     do Check-Sub
  end-if

subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Check-Sub
! Descr:
!
!----------------------------------------------------------------------
begin-procedure Check-Sub
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Check-Sub'       (+1,#level)
#ENDIF

    if $Informix_Patch = 'Y'
       let $temp_space = ''
    else
       let $temp_space = ' '
    end-if

    let $Sub_Not_Found = ''

    let #Sub_Lit_Length = Length($Sub_Lit)

    let #Length_SQL = Length($MC_SQL_STATEMENT)

    while $Sub_Not_Found <> 'Y'

       let #Start_Sub = instr($MC_SQL_STATEMENT,$Sub_Lit,1)

       if #Start_Sub = 0
              let $Sub_Not_Found = 'Y'
       else

          let #End_Length = #Length_SQL - #Start_PI + #Sub_Lit_Length - 1
          let #End_Start  = #Start_Sub + #Sub_Lit_Length
          let $MC_SQL_TEMP1 = substr($MC_SQL_STATEMENT,1,(#Start_Sub - 1))
          let $MC_SQL_TEMP2 = substr($MC_SQL_STATEMENT,#End_Start,#End_Length)

          string $MC_SQL_TEMP1 $temp_space $Sub_Quote1 $Sub_Value $Sub_Quote2 $temp_space
          $MC_SQL_TEMP2 by '' into $MC_SQL_STATEMENT

          let #Length_SQL = Length($MC_SQL_STATEMENT)

       end-if

    end-while


subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Log-Execution-History
! Descr:        Log the execution parms for this mass change.
!
!----------------------------------------------------------------------
begin-procedure Log-Execution-History
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Log-Execution-History'    (+1,#level)
#ENDIF

string '''' $prcs_oprid '''' by '' into $Oprid_Bind

let $SQL-Statement = 'MASSCHNG.SQC,Log-Execution-History,Insert,PS_MC_HIST_STMNT'
begin-SQL ON-ERROR=SQL-Error

INSERT INTO PS_MC_HIST_STMNT
(
MC_DEFN_ID,
DTTM_STAMP,
MC_STMNT_SEQ,
OPRID
)

SELECT
B.MC_DEFN_ID,
B.DTTM_STAMP,
A.MC_STMNT_SEQ,
[$Oprid_Bind]
FROM PS_MC_DEFN_STMNT A,
     PS_MC_DEFN B
WHERE A.MC_DEFN_ID = B.MC_DEFN_ID
AND   B.MC_DEFN_ID = $MC_Defn_ID

end-SQL

let $SQL-Statement = 'MASSCHNG.SQC,Log-Execution-History,Insert,PS_MC_HIST_CRIT'
begin-SQL ON-ERROR=SQL-Error

INSERT INTO PS_MC_HIST_CRIT
(
MC_DEFN_ID,
DTTM_STAMP,
MC_STMNT_SEQ,
RECNAME,
FIELDNAME,
ARITH_OPERATION,
MC_FIELD_LABEL
)

SELECT
B.MC_DEFN_ID,
B.DTTM_STAMP,
A.MC_STMNT_SEQ,
A.RECNAME,
A.FIELDNAME,
A.ARITH_OPERATION,
A.MC_FIELD_LABEL

FROM PS_MC_DEFN_CRIT A,
     PS_MC_DEFN B
WHERE A.MC_DEFN_ID = B.MC_DEFN_ID
AND   B.MC_DEFN_ID = $MC_Defn_ID

end-SQL

let $SQL-Statement = 'MASSCHNG.SQC,Log-Execution-History,Insert,PS_MC_HIST_CRIT_VL'
begin-SQL ON-ERROR=SQL-Error

INSERT INTO PS_MC_HIST_CRIT_VL
(
MC_DEFN_ID,
DTTM_STAMP,
MC_STMNT_SEQ,
RECNAME,
FIELDNAME,
MC_SEQ,
MC_FIELD_VALUE
)

SELECT
B.MC_DEFN_ID,
B.DTTM_STAMP,
A.MC_STMNT_SEQ,
A.RECNAME,
A.FIELDNAME,
A.MC_SEQ,
A.MC_FIELD_VALUE

FROM PS_MC_DEFN_CRIT_VL A,
     PS_MC_DEFN B
WHERE A.MC_DEFN_ID = B.MC_DEFN_ID
AND   B.MC_DEFN_ID = $MC_Defn_ID

end-SQL

let $SQL-Statement = 'MASSCHNG.SQC,Log-Execution-History,Insert,PS_MC_HIST_DEFAULT'
begin-SQL  ON-ERROR=SQL-Error

INSERT INTO PS_MC_HIST_DEFAULT
(
MC_DEFN_ID,
DTTM_STAMP,
MC_STMNT_SEQ,
RECNAME,
FIELDNAME,
MC_FIELD_LABEL,
MC_FIELD_VALUE
)

SELECT
B.MC_DEFN_ID,
B.DTTM_STAMP,
A.MC_STMNT_SEQ,
A.RECNAME,
A.FIELDNAME,
A.MC_FIELD_LABEL,
A.MC_FIELD_VALUE

FROM PS_MC_DEFN_DEFAULT A,
     PS_MC_DEFN B
WHERE A.MC_DEFN_ID = B.MC_DEFN_ID
AND   B.MC_DEFN_ID = $MC_Defn_ID

end-SQL


subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure:    Update-MC-Defn-Dttm
! Descr:        Update the timestamp on MC_DEFN to the current time.
!
!----------------------------------------------------------------------
begin-procedure Update-MC-Defn-Dttm
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Update-MC-Defn-Dttm:'       (+1,#level)
#ENDIF

do Get-Current-DateTime

#IFDEF DebugD
  print '&sysdatetime:'       (+1,#level)
  print &sysdatetime          (+1,#level)
#ENDIF

let $SQL-Statement = 'MASSCHNG.SQC,Update-MC-Defn-Dttm,Update,PS_MC_DEFN'
begin-SQL  ON-ERROR=SQL-Error

UPDATE PS_MC_DEFN
SET    DTTM_STAMP = {DateTimeIn-Prefix}&sysdatetime{DateTimeIn-Suffix}
WHERE  MC_DEFN_ID = $MC_Defn_Id

end-SQL

subtract 1 from #level
end-procedure

!----------------------------------------------------------------------
! Procedure: MC-Update-Process-Status
! Desc:      Update parameters and pass to process scheduler api
!
!----------------------------------------------------------------------

begin-procedure MC-Update-Process-Status($prcs_message_parm1,:#level,#prcs_process_instance)
add 1 to #level

#IFDEF DebugF
  print 'FLOW:MC-Update-Process-Status'             (+1,#level)
#ENDIF

   let #prcs_message_set_nbr = 8005
   let #prcs_message_nbr = 5
   do Update-Prcs-Run-Status

subtract 1 from #level
end-procedure

!----------------------------------------------------------------------
! Procedure: MC-Round-Currency
! Desc:      Calls
!
!----------------------------------------------------------------------

begin-procedure MC-Round-Currency
add 1 to #level

#IFDEF DebugF
  print 'FLOW:MC-Round-Currency'             (+1,#level)
#ENDIF

  do Init-Round-Fields

  move 'V' to $cur_rqst_opt
  move ' ' to $cur_where_clause
  move '1900-01-01' to $cur_effdt
  let #cur_prcs_instance = #prcs_process_instance
  let #Cur_Rnd_Idx = 1

  do Get-Table-Name
  do Get-Where-Clause

  let #round-pos = 0

  while #round-pos <> -1

    do Process-Cur-Field

  end-while

  do Round-Currency

subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure: Get-Table-Name
! Desc:      Pulls the table name from the SQL into $cur_recname
!
!----------------------------------------------------------------------

begin-procedure Get-Table-Name
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Get-Table-Name'             (+1,#level)
#ENDIF

  extract $recname_wrk from $MC_SQL_STATEMENT 10 18
  unstring $recname_wrk by ' ' into $cur_recname

#IFDEF DebugD
       print 'DATA:$cur_recname:'             (+1,#level)
       print $cur_recname                     (0,+1)
#ENDIF

subtract 1 from #level
end-procedure


!----------------------------------------------------------------------
! Procedure: Get-Where-Clause
! Desc:      Pulls the where name from the SQL into $cur_where_clause
!----------------------------------------------------------------------

begin-procedure Get-Where-Clause
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Get-Where-Clause'             (+1,#level)
#ENDIF


  find ' WHERE ' in $MC_SQL_STATEMENT 0 #where-pos
  if #where-pos = -1
      let $cur-where-clause = ' '
  else
      add 7 to #where-pos
      let #where-len = length($MC_SQL_STATEMENT) - #where-pos + 1
      extract $cur-where-clause from $MC_SQL_STATEMENT #where-pos #where-len
  end-if


#IFDEF DebugD
       print 'DATA:$cur-where-clause:'      (+1,#level)
       print $cur-where-clause              (0,+1)
#ENDIF

subtract 1 from #level
end-procedure

!----------------------------------------------------------------------
! Procedure: Process-Cur-Field
! Desc:      Executed for each field that is being rounded
!
!----------------------------------------------------------------------
begin-procedure Process-Cur-Field
add 1 to #level

#IFDEF DebugF
  print 'FLOW:Process-Cur-Field'             (+1,#level)
#ENDIF

find '&ROUND' in $MC_SQL_STATEMENT #round-pos #round-pos

if #round-pos <> -1
  add 7 to #round-pos
  extract $cur_fieldname_wrk from $MC_SQL_STATEMENT #round-pos 30
  unstring $cur_fieldname_wrk by ')' into $cur_fieldname

#IFDEF DebugD
       print 'DATA:$cur_fieldname:'             (+1,#level)
       print $cur_fieldname                     (0,+1)
#ENDIF

  put $cur_fieldname into CurRndFlds (#Cur_Rnd_Idx) cur_fieldname
  add 1 to #Cur_Rnd_Idx

end-if

subtract 1 from #level
end-procedure

