!***********************************************************************
!  FGPY004:  Create Electronic Certification System Interface Files    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:03:39:11                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

begin-report

    do Init-Report

    do retrieve-agency-data

    do delete-run-control

    do commit-updates

    do Stdapi-Term

end-report

begin-heading 9
#Include 'stdhdg03.sqc'
   print '                 '        (4,1,17)
   print 'Payroll Office #:'        (5,1,17)
   print $agency_loc_code           (5,+1,8)
   print 'Agency'                   (7,1,6)   underline
   print 'Schedule Number'          (7,+2,15) underline
   print 'Schedule Description'     (7,+2,20) underline
   print 'Schedule Type'            (7,+2,13) underline
   print 'Requested Payments'       (7,+2,18) underline
   print 'Schedule Total Amount'    (7,+2,21) underline
   print 'Output File'              (7,+2,11) underline
   print ' '                        (8,1,1)

end-heading

!**************************
begin-procedure Init-Report
!**************************

  move 'FGPY004' to $ReportID
  move 'Electronic Certification System Interface File Generation' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  if $Prcs_Process_Instance = ''

    display 'Electronic Certification Interface file generation requires'
    display 'submission through the Process Scheduler'

    STOP

  else

    do select-parameters

    if $process_found = 'N'

        display 'Electronic Certification Interface file generation requires'
        display 'submission through the Process Scheduler'

        STOP

    end-if

  end-if

end-procedure       !Init-Report

!***********************************
begin-procedure retrieve-agency-data
!***********************************

begin-select

COM.COMPANY
COM.GVT_AGY_LOC_CODE
COM.GVT_AGY_CHECK_ID
COM.GVT_ECS_AGY_NAME
COM.GVT_ECS_ADDR_1
COM.GVT_ECS_ADDR_2
COM.GVT_ECS_ADDR_CITY
COM.GVT_ECS_ADDR_STATE
COM.GVT_ECS_ADDR_ZIP
COM.GVT_ECS_PHONE

    let $company         = rtrim(upper(&COM.COMPANY), ' ')
    let $agency_loc_code = rtrim(upper(&COM.GVT_AGY_LOC_CODE), ' ')
    let $agency_addr_1   = rtrim(upper(&COM.GVT_ECS_ADDR_1), ' ')
    let $agency_addr_2   = rtrim(upper(&COM.GVT_ECS_ADDR_2), ' ')
    let $agency_city     = rtrim(upper(&COM.GVT_ECS_ADDR_CITY), ' ')
    let $agency_state    = rtrim(upper(substr(&COM.GVT_ECS_ADDR_STATE, 1, 2)), ' ')
    let $agency_id       = rtrim(upper(&COM.GVT_AGY_CHECK_ID), ' ')
    let $zip_5           = upper(substr(&COM.GVT_ECS_ADDR_ZIP, 1, 5))
    let $agency_name     = rtrim(upper(&COM.GVT_ECS_AGY_NAME), ' ')
    let $zip_4           = upper(substr(&COM.GVT_ECS_ADDR_ZIP, 7, 4))
    let $agency_zip      = $zip_5||$zip_4
    let $aaa             = upper(substr(&COM.GVT_ECS_PHONE, 1, 3))
    let $eee             = upper(substr(&COM.GVT_ECS_PHONE, 5, 3))
    let $nnnn            = upper(substr(&COM.GVT_ECS_PHONE, 9, 4))
    let $agency_phone    = $aaa||$eee||$nnnn

    do format-extract-address

    do retrieve-schedules

FROM  PS_GVT_AGY_RUNCTL AGY,
      PS_GVT_INTRFC_INFO COM
WHERE AGY.OPRID        = $Prcs_OprID
AND   AGY.RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
AND   COM.COMPANY      = AGY.COMPANY
AND   COM.EFFDT        = (SELECT MAX(EFFDT)
                          FROM  PS_COMPANY_TBL COM1
                          WHERE COM1.COMPANY  = COM.COMPANY
                          AND   COM1.EFFDT   <= $AsOfToday)

end-select

end-procedure       !retrieve-agency-data

!*************************************
begin-procedure format-extract-address
!*************************************

let $agency_address1 = $agency_addr_1

if $agency_addr_2 = ''

    let $agency_address2 = $agency_city||' '||$agency_state||' '||$agency_zip
    let $agency_address3 = ''

else

    let $agency_address2 = $agency_addr_2
    let $agency_address3 = $agency_city||' '||$agency_state||' '||$agency_zip

end-if

end-procedure       !format-extract-address

!*********************************
begin-procedure retrieve-schedules
!*********************************

begin-select

ECSRUN.COMPANY
ECSRUN.GVT_SCHEDULE_NO
ECSRUN.GVT_ECS_DOS_NAME
ECSRUN.GVT_ECS_DOS_EXT
ECSCNTL.DESCR
ECSCNTL.GVT_ECS_RFC_INDIC
ECSCNTL.GVT_ECS_TRANS_TYPE
ECSCNTL.GVT_ECS_REQ_PAY_DT
ECSCNTL.GVT_ECS_NO_OF_PMNT
ECSCNTL.GVT_ECS_TOT_AMT
ECSCNTL.GVT_ECS_PYMNT_1
ECSCNTL.GVT_ECS_PYMNT_2
ECSCNTL.GVT_ECS_PRENOTE_CD
ECSCNTL.GVT_ECS_MAC_DATA

    evaluate &ECSCNTL.GVT_ECS_TRANS_TYPE

        when = '05'

            do retrieve-remarks

            do retrieve-reels

            do retrieve-on-cycle-acct-info

            break

        when-other

            do retrieve-off-cycle-acct-info

    end-evaluate

    do write-ecs-extract

    do get-schedule-type

    let #payment_recs   = to_number($payment_recs)
    let #payment_tot    = to_number($payment_tot)
    divide 100 into #payment_tot
    let $schedule_descr = upper(substr(&ECSCNTL.DESCR, 1, 20))

    print $company        (+1,2)
    print $schedule       (,11)
    print $schedule_descr (,26)
    print $schedule_type  (,49)
    print #payment_recs   (,70) edit 99,999,999
    print #payment_tot    (,+6) edit 999,999,999,999.99
    print $file_name      (,+2)

    do update-ecs-schedule

FROM  PS_GVT_ECS_RUNCTL ECSRUN,
      PS_GVT_ECS_CONTROL ECSCNTL
WHERE(ECSCNTL.COMPANY         = &COM.COMPANY
AND   ECSCNTL.GVT_SCHEDULE_NO = ECSRUN.GVT_SCHEDULE_NO)
AND   ECSRUN.COMPANY          = &COM.COMPANY

end-select

end-procedure       !retrieve-schedules

!*******************************
begin-procedure retrieve-remarks
!*******************************

let $schedule_remark_1 = ''
let $schedule_remark_2 = ''
let $schedule_remark_3 = ''
let $schedule_remark_4 = ''
let $schedule_remark_5 = ''
let $schedule_remark_6 = ''
let $schedule_remark_7 = ''

begin-select

REMARK.GVT_ECS_REMARKS_NO
REMARK.GVT_ECS_REMARKS

    evaluate &REMARK.GVT_ECS_REMARKS_NO

        when = 1

            let $schedule_remark_1 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 2

            let $schedule_remark_2 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 3

            let $schedule_remark_3 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 4

            let $schedule_remark_4 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 5

            let $schedule_remark_5 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 6

            let $schedule_remark_6 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

        when = 7

            let $schedule_remark_7 = rtrim(upper(&REMARK.GVT_ECS_REMARKS), ' ')
            break

    end-evaluate


FROM  PS_GVT_ECS_REMARKS REMARK
WHERE REMARK.COMPANY         = &COM.COMPANY
AND   REMARK.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO

end-select

end-procedure       !retrieve-remarks

!*****************************
begin-procedure retrieve-reels
!*****************************

let $schedule_reel_1 = ''
let $schedule_reel_2 = ''
let $schedule_reel_3 = ''
let $schedule_reel_4 = ''
let $schedule_reel_5 = ''
let $schedule_reel_6 = ''
let $schedule_reel_7 = ''

begin-select

REEL.GVT_ECS_REEL_LINE
REEL.GVT_ECS_REEL_NO

    evaluate &REEL.GVT_ECS_REEL_LINE

        when = 1

            let $schedule_reel_1 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 2

            let $schedule_reel_2 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 3

            let $schedule_reel_3 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 4

            let $schedule_reel_4 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 5

            let $schedule_reel_5 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 6

            let $schedule_reel_6 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

        when = 7

            let $schedule_reel_7 = rtrim(upper(&REEL.GVT_ECS_REEL_NO), ' ')
            break

    end-evaluate


FROM  PS_GVT_ECS_REELS REEL
WHERE REEL.COMPANY         = &COM.COMPANY
AND   REEL.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO

end-select

end-procedure       !retrieve-reels

!******************************************
begin-procedure retrieve-on-cycle-acct-info
!******************************************

let $schedule_acct_sym_1  = ''
let $schedule_acct_sym_2  = ''
let $schedule_acct_sym_3  = ''
let $schedule_acct_sym_4  = ''
let $schedule_acct_sym_5  = ''
let $schedule_acct_sym_6  = ''
let $schedule_acct_sym_7  = ''
let $schedule_acct_sym_8  = ''
let $schedule_acct_sym_9  = ''
let $schedule_acct_sym_10 = ''
let $schedule_acct_tot_1  = '0000000000000'
let $schedule_acct_tot_2  = '0000000000000'
let $schedule_acct_tot_3  = '0000000000000'
let $schedule_acct_tot_4  = '0000000000000'
let $schedule_acct_tot_5  = '0000000000000'
let $schedule_acct_tot_6  = '0000000000000'
let $schedule_acct_tot_7  = '0000000000000'
let $schedule_acct_tot_8  = '0000000000000'
let $schedule_acct_tot_9  = '0000000000000'
let $schedule_acct_tot_10 = '0000000000000'

begin-select

ACCTON.GVT_ECS_ACCT_LINE
ACCTON.GVT_ECS_ACCT_SYM
ACCTON.GVT_ECS_ACCT_TOT

    evaluate &ACCTON.GVT_ECS_ACCT_LINE

        when = 1

            let $schedule_acct_sym_1 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_1 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_1
            do Format-Number(#schedule_acct_tot_1, $schedule_acct_tot_1, '0000000000009')
            break

        when = 2

            let $schedule_acct_sym_2 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_2 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_2
            do Format-Number(#schedule_acct_tot_2, $schedule_acct_tot_2, '0000000000009')
            break

        when = 3

            let $schedule_acct_sym_3 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_3 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_3
            do Format-Number(#schedule_acct_tot_3, $schedule_acct_tot_3, '0000000000009')
            break

        when = 4

            let $schedule_acct_sym_4 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_4 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_4
            do Format-Number(#schedule_acct_tot_4, $schedule_acct_tot_4, '0000000000009')
            break

        when = 5

            let $schedule_acct_sym_5 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_5 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_5
            do Format-Number(#schedule_acct_tot_5, $schedule_acct_tot_5, '0000000000009')
            break

        when = 6

            let $schedule_acct_sym_6 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_6 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_6
            do Format-Number(#schedule_acct_tot_6, $schedule_acct_tot_6, '0000000000009')
            break

        when = 7

            let $schedule_acct_sym_7 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_7 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_7
            do Format-Number(#schedule_acct_tot_7, $schedule_acct_tot_7, '0000000000009')
            break

        when = 8

            let $schedule_acct_sym_8 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_8 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_8
            do Format-Number(#schedule_acct_tot_8, $schedule_acct_tot_8, '0000000000009')
            break

        when = 9

            let $schedule_acct_sym_9 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_9 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_9
            do Format-Number(#schedule_acct_tot_9, $schedule_acct_tot_9, '0000000000009')
            break

        when = 10

            let $schedule_acct_sym_10 = rtrim(upper(&ACCTON.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_10 = &ACCTON.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_10
            do Format-Number(#schedule_acct_tot_10, $schedule_acct_tot_10, '0000000000009')
            break

    end-evaluate


FROM  PS_GVT_ECS_ACCT ACCTON
WHERE ACCTON.COMPANY         = &COM.COMPANY
AND   ACCTON.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO

end-select

end-procedure        !retrieve-on-cycle-acct-info

!*******************************************
begin-procedure retrieve-off-cycle-acct-info
!*******************************************

let $schedule_acct_sym_1  = ''
let $schedule_acct_sym_2  = ''
let $schedule_acct_sym_3  = ''
let $schedule_acct_sym_4  = ''
let $schedule_acct_sym_5  = ''
let $schedule_acct_sym_6  = ''
let $schedule_acct_sym_7  = ''
let $schedule_acct_sym_8  = ''
let $schedule_acct_sym_9  = ''
let $schedule_acct_sym_10 = ''
let $schedule_acct_tot_1  = '000000000000'
let $schedule_acct_tot_2  = '000000000000'
let $schedule_acct_tot_3  = '000000000000'
let $schedule_acct_tot_4  = '000000000000'
let $schedule_acct_tot_5  = '000000000000'
let $schedule_acct_tot_6  = '000000000000'
let $schedule_acct_tot_7  = '000000000000'
let $schedule_acct_tot_8  = '000000000000'
let $schedule_acct_tot_9  = '000000000000'
let $schedule_acct_tot_10 = '000000000000'

begin-select

ACCTOFF.GVT_ECS_ACCT_LINE
ACCTOFF.GVT_ECS_ACCT_SYM
ACCTOFF.GVT_ECS_ACCT_TOT

    evaluate &ACCTOFF.GVT_ECS_ACCT_LINE

        when = 1

            let $schedule_acct_sym_1 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_1 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_1
            do Format-Number(#schedule_acct_tot_1, $schedule_acct_tot_1, '000000000009')
            break

        when = 2

            let $schedule_acct_sym_2 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_2 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_2
            do Format-Number(#schedule_acct_tot_2, $schedule_acct_tot_2, '000000000009')
            break

        when = 3

            let $schedule_acct_sym_3 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_3 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_3
            do Format-Number(#schedule_acct_tot_3, $schedule_acct_tot_3, '000000000009')
            break

        when = 4

            let $schedule_acct_sym_4 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_4 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_4
            do Format-Number(#schedule_acct_tot_4, $schedule_acct_tot_4, '000000000009')
            break

        when = 5

            let $schedule_acct_sym_5 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_5 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_5
            do Format-Number(#schedule_acct_tot_5, $schedule_acct_tot_5, '000000000009')
            break

        when = 6

            let $schedule_acct_sym_6 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_6 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_6
            do Format-Number(#schedule_acct_tot_6, $schedule_acct_tot_6, '000000000009')
            break

        when = 7

            let $schedule_acct_sym_7 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_7 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_7
            do Format-Number(#schedule_acct_tot_7, $schedule_acct_tot_7, '000000000009')
            break

        when = 8

            let $schedule_acct_sym_8 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_8 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_8
            do Format-Number(#schedule_acct_tot_8, $schedule_acct_tot_8, '000000000009')
            break

        when = 9

            let $schedule_acct_sym_9 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_9 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_9
            do Format-Number(#schedule_acct_tot_9, $schedule_acct_tot_9, '000000000009')
            break

        when = 10

            let $schedule_acct_sym_10 = rtrim(upper(&ACCTOFF.GVT_ECS_ACCT_SYM), ' ')
            let #schedule_acct_tot_10 = &ACCTOFF.GVT_ECS_ACCT_TOT
            multiply 100 times #schedule_acct_tot_10
            do Format-Number(#schedule_acct_tot_10, $schedule_acct_tot_10, '000000000009')
            break

    end-evaluate


FROM  PS_GVT_ECS_ACCT ACCTOFF
WHERE ACCTOFF.COMPANY         = &COM.COMPANY
AND   ACCTOFF.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO

end-select

end-procedure        !retrieve-off-cycle-acct-info

!********************************
begin-procedure write-ecs-extract
!********************************

let #total_payments = 0
let #schedule_total = 0

if &ECSRUN.GVT_ECS_DOS_EXT = ''

    let $ecs_output_file = '{IMPORTPREFIX}' || &ECSRUN.GVT_ECS_DOS_NAME
    let $file_name       = upper(&ECSRUN.GVT_ECS_DOS_NAME)

else

    let $ecs_output_file = '{IMPORTPREFIX}' || &ECSRUN.GVT_ECS_DOS_NAME    || '.' || &ECSRUN.GVT_ECS_DOS_EXT
    let $file_name       = upper(&ECSRUN.GVT_ECS_DOS_NAME)||'.'||upper(&ECSRUN.GVT_ECS_DOS_EXT)

end-if

open $ecs_output_file as 1 for-writing record=440:fixed

let $record_type = '01'
let $schedule    = rtrim(upper(substr(&ECSRUN.GVT_SCHEDULE_NO, 1 10)), ' ')
let $rfc_indic   = rtrim(upper(&ECSCNTL.GVT_ECS_RFC_INDIC), ' ')
let $trans_type  = rtrim(upper(&ECSCNTL.GVT_ECS_TRANS_TYPE), ' ')

write 1 from $record_type:2
             $blanks_6:6
             $schedule:14
             $blanks_20:20
             $rfc_indic:3
             $agency_loc_code:8
             $file_name:12
             $blanks_351:351
             $trans_type:2
             $blanks_22:22

let $record_type = '02'
let $record_no   = '000001'
let $record_code = '&'
let $prenote     = &ECSCNTL.GVT_ECS_PRENOTE_CD

write 1 from $record_type:2
             $record_no:6
             $schedule:14
             $blanks_13:13
             $agency_loc_code:8
             $blanks_11:11
             $record_code:1
             $prenote:1
             $blanks_384:384

let $record_type = '03'
let $record_no   = '000002'
let $zeros       = '0000000000000'
let $record_code = 'A'

write 1 from $record_type:2
             $record_no:6
             $schedule:14
             $zeros:13
             $blanks_19:19
             $record_code:1
             $agency_name:25
             $agency_address1:25
             $agency_address2:25
             $agency_address3:25
             $agency_phone:10
             $blanks_275:275

evaluate $trans_type

    when = '05'

        let $record_type    = '04'
        let $payment_no     = '000001'

        let $check_date     = datetostr(&ECSCNTL.GVT_ECS_REQ_PAY_DT,'MMDDYYYY')
        let $mm             = upper(substr($check_date, 1, 2))
        let $dd             = upper(substr($check_date, 3, 2))
        let $yyyy           = upper(substr($check_date, 5, 4))
        let $payment_due    = $mm||$dd||$yyyy

        let $payment_type_1 = rtrim(upper(&ECSCNTL.GVT_ECS_PYMNT_1), ' ')
        let $payment_type_2 = rtrim(upper(&ECSCNTL.GVT_ECS_PYMNT_2), ' ')
        let $prenote        = rtrim(upper(&ECSCNTL.GVT_ECS_PRENOTE_CD), ' ')
        let $mac_data       = rtrim(upper(&ECSCNTL.GVT_ECS_MAC_DATA), ' ')

        let #amount         = &ECSCNTL.GVT_ECS_NO_OF_PMNT
        do Format-Number(#amount, $payment_recs, '00000009')

        let #amount         = &ECSCNTL.GVT_ECS_TOT_AMT
        multiply 100 times #amount
        do Format-Number(#amount, $payment_tot, '000000000000009')

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $blanks_4:4
                     $payment_due:8
                     $payment_type_1:1
                     $payment_type_2:1
                     $prenote:1
                     $blanks_9:9
                     $schedule_reel_1:7
                     $schedule_reel_2:7
                     $schedule_reel_3:7
                     $schedule_reel_4:7
                     $schedule_reel_5:7
                     $blanks_35:35
                     $mac_data:8
                     $agency_loc_code:8
                     $payment_recs:8
                     $payment_tot:15
                     $blanks_5:5
                     $schedule_acct_sym_1:16
                     $schedule_acct_tot_1:13
                     $schedule_acct_sym_2:16
                     $schedule_acct_tot_2:13
                     $schedule_acct_sym_3:16
                     $schedule_acct_tot_3:13
                     $schedule_acct_sym_4:16
                     $schedule_acct_tot_4:13
                     $schedule_acct_sym_5:16
                     $schedule_acct_tot_5:13
                     $schedule_acct_sym_6:16
                     $schedule_acct_tot_6:13
                     $schedule_acct_sym_7:16
                     $schedule_acct_tot_7:13
                     $schedule_acct_sym_8:16
                     $schedule_acct_tot_8:13
                     $blanks_48:48

        let $record_type = '05'
        let $payment_no  = '000001'
        let $no_check    = '0000000000000'

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $schedule_acct_sym_9:16
                     $schedule_acct_tot_9:13
                     $schedule_acct_sym_10:16
                     $schedule_acct_tot_10:13
                     $no_check:13
                     $blanks_10:10
                     $schedule_remark_1:72
                     $schedule_remark_2:72
                     $schedule_remark_3:72
                     $blanks_121:121


        let $record_type = '06'
        let $payment_no  = '000001'

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $schedule_remark_4:72
                     $schedule_remark_5:72
                     $schedule_remark_6:72
                     $schedule_remark_7:72
                     $blanks_130:130

        let $record_type = '09'
        let $payment_no  = '000002'
        let $nines       = '9999999999999'
        let $record_code = 'C'

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $nines:13
                     $payment_recs:8
                     $payment_tot:15
                     $record_code:1
                     $blanks_381:381

        let $record_type = '99'
        let $payment_no  = '000003'

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $blanks_418:418

        break

    when-other

        do retrieve-payment-transactions

        let #hold_payment_recs = #payment_no
        let #hold_payment_tot  = #schedule_total
        multiply 100 times #hold_payment_tot

        let $record_type = '09'

        let #payment_no  = #payment_no + 1
        do Format-Number(#payment_no, $payment_no, '000009')

        let $nines       = '9999999999999'

        do Format-Number(#payment_no, $payment_recs, '0000009')

        let #amount      = #schedule_total
        multiply 100 times #amount
        do Format-Number(#amount, $payment_tot, '000000000009')

        let $record_code = 'C'

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $nines:13
                     $payment_recs:7
                     $payment_tot:12
                     $record_code:1
                     $schedule_acct_sym_1:16
                     $schedule_acct_tot_1:12
                     $schedule_acct_sym_2:16
                     $schedule_acct_tot_2:12
                     $schedule_acct_sym_3:16
                     $schedule_acct_tot_3:12
                     $schedule_acct_sym_4:16
                     $schedule_acct_tot_4:12
                     $schedule_acct_sym_5:16
                     $schedule_acct_tot_5:12
                     $schedule_acct_sym_6:16
                     $schedule_acct_tot_6:12
                     $schedule_acct_sym_7:16
                     $schedule_acct_tot_7:12
                     $schedule_acct_sym_8:16
                     $schedule_acct_tot_8:12
                     $schedule_acct_sym_9:16
                     $schedule_acct_tot_9:12
                     $schedule_acct_sym_10:16
                     $schedule_acct_tot_10:12
                     $blanks_105:105

        let $record_type = '99'

        let #payment_no  = #payment_no + 1
        do Format-Number(#payment_no, $payment_no, '000009')

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $blanks_418:418


        do Format-Number(#hold_payment_recs, $payment_recs, '0000009')
        do Format-Number(#hold_payment_tot, $payment_tot, '000000000009')

        break

    end-evaluate

close 1

end-procedure        !write-ecs-extract

!********************************************
begin-procedure retrieve-payment-transactions
!********************************************

do retrieve-off-cycle-net

do retrieve-off-cycle-deductions

end-procedure        !retrieve-payment-transactions


!*************************************
begin-procedure retrieve-off-cycle-net
!*************************************

let #payment_no     = 0
let #schedule_total = 0

begin-select

CHK1.COMPANY
CHK1.PAYGROUP
CHK1.PAY_END_DT
CHK1.OFF_CYCLE
CHK1.PAGE_NUM
CHK1.LINE_NUM
CHK1.SEPCHK
CHK1.PAYCHECK_NAME
CHK1.SSN
CHK1.NET_PAY
CHK1.ADDRESS1
CHK1.ADDRESS2
CHK1.ADDRESS3
CHK1.ADDRESS4
CHK1.CITY
CHK1.STATE
CHK1.POSTAL
CHK1.GVT_SCHEDULE_NO
CHK1.GVT_PAY_ID_LINE_1
CHK1.GVT_PAY_ID_LINE_2
CHK1.GVT_ECS_LTD_INDIC
CHK1.GVT_ECS_OFF_ACCT

    if $trans_type = '07'

        let $address1 = ''
        let $address2 = ''
        let $address3 = ''
        let $address4 = ''

        let $record_type    = '04'
        let #payment_no     = #payment_no + 1
        let $enclosure_code = '1'
        let $zero           = '0'
        let $record_code    = 'B'
        let $name           = substr(&CHK1.PAYCHECK_NAME, 1, 35)
        do rotate-name
        let $payee_name     = upper($name)
        let $address1       = upper(rtrim(&CHK1.ADDRESS1, ' '))
        let $ltd_indic      = upper(&CHK1.GVT_ECS_LTD_INDIC)
        let $acct_symbol    = upper(rtrim(&CHK1.GVT_ECS_OFF_ACCT, ' '))
        let $zeros          = '0000000000000000'
        let $payment_id_1   = upper(rtrim(&CHK1.GVT_PAY_ID_LINE_1, ' '))
        let $payment_id_2   = upper(rtrim(&CHK1.GVT_PAY_ID_LINE_2, ' '))

        let #pay_line_1     = length($payment_id_1)
        let #pay_line_2     = length($payment_id_2)

        if #pay_line_1 > 0 and
           #pay_line_2 > 0

            let $no_of_payment_id = '02'

        else

            let $no_of_payment_if = '01'

        end-if

        let #amount         = &CHK1.NET_PAY
        multiply 100 times #amount
        do Format-Number(#amount, $payment, '0000000009')

        do Format-Number(#payment_no, $payment_no, '000009')

        let $state      = upper(rtrim(&CHK1.STATE, ' '))
        let $zip_5      = upper(substr(&CHK1.POSTAL, 1, 5))
        let $zip_4      = upper(substr(&CHK1.POSTAL, 7, 4))

        if &CHK1.ADDRESS2 = ' '

            if isblank($zip_4)

               let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 25), ' '))
               let $address2 = $city || $state || '**' || $zip_5
               let $address2 = translate($address2,'*', ' ')

            else

               let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 21), ' '))
               let $address2 = $city || $state || '**' || $zip_5 || $zip_4
               let $address2 = translate($address2,'*', ' ')

            end-if

         else

            if &CHK1.ADDRESS3 = ' '

                let $address2   = upper(rtrim(&CHK1.ADDRESS2, ' '))

                if isblank($zip_4)

                   let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 20), ' '))
                   let $address3 = $city || $state || '**' || $zip_5
                   let $address3 = translate($address2,'*', ' ')

                else

                   let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 16), ' '))
                   let $address3 = $city || $state || '**' || $zip_5 || $zip_4
                   let $address3 = translate($address2,'*', ' ')

                end-if

            else

                let $address3   = upper(rtrim(substr(&CHK1.ADDRESS3, 1, 30), ' '))

                if isblank($zip_4)

                   let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 20), ' '))
                   let $address4 = $city || $state || '**' || $zip_5
                   let $address4 = translate($address2,'*', ' ')

                else

                   let $city     = upper(rtrim(substr(&CHK1.CITY, 1, 16), ' '))
                   let $address4 = $city || $state || '**' || $zip_5 || $zip_4
                   let $address4 = translate($address2,'*', ' ')

                end-if

            end-if

        end-if

        write 1 from $record_type:2
                     $payment_no:6
                     $schedule:14
                     $enclosure_code:1
                     $blanks_7:7
                     $zero:1
                     $payment:10
                     $agency_id:10
                     $record_code:1
                     $payee_name:35
                     $address1:35
                     $address2:35
                     $address3:30
                     $address4:30
                     $ltd_indic:1
                     $acct_symbol:16
                     $zeros:16
                     $blanks_33:33
                     $no_of_payment_id:2
                     $payment_id_1:40
                     $blanks_15:15
                     $payment_id_2:40
                     $blanks_60:60

        let #schedule_total = #schedule_total + &CHK1.NET_PAY

    else

        do retrieve-eft-net

    end-if

FROM  PS_PAY_CHECK CHK1

WHERE CHK1.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO

end-select

let #total_payments = #payment_no

end-procedure        !retrieve-off-cycle-net

!*******************************
begin-procedure retrieve-eft-net
!*******************************

begin-select

PAYDIST1.ACCOUNT_TYPE
PAYDIST1.ACCOUNT_NUM
PAYDIST1.BANK_CD
PAYDIST1.DEPOSIT_AMOUNT

FROM  PS_PAY_DISTRIBUTN PAYDIST1

WHERE PAYDIST1.COMPANY    = &CHK1.COMPANY
AND   PAYDIST1.PAYGROUP   = &CHK1.PAYGROUP
AND   PAYDIST1.PAY_END_DT = &CHK1.PAY_END_DT
AND   PAYDIST1.OFF_CYCLE  = &CHK1.OFF_CYCLE
AND   PAYDIST1.PAGE_NUM   = &CHK1.PAGE_NUM
AND   PAYDIST1.LINE_NUM   = &CHK1.LINE_NUM
AND   PAYDIST1.SEPCHK     = &CHK1.SEPCHK
AND   PAYDIST1.PRIORITY   = (SELECT MIN(PAYDIST1A.PRIORITY)
                             FROM   PS_PAY_DISTRIBUTN PAYDIST1A
                             WHERE  PAYDIST1A.COMPANY    = &CHK1.COMPANY
                             AND    PAYDIST1A.PAYGROUP   = &CHK1.PAYGROUP
                             AND    PAYDIST1A.PAY_END_DT = &CHK1.PAY_END_DT
                             AND    PAYDIST1A.OFF_CYCLE  = &CHK1.OFF_CYCLE
                             AND    PAYDIST1A.PAGE_NUM   = &CHK1.PAGE_NUM
                             AND    PAYDIST1A.LINE_NUM   = &CHK1.LINE_NUM
                             AND    PAYDIST1A.SEPCHK     = &CHK1.SEPCHK
                             AND    PAYDIST1A.ACCOUNT_TYPE IN ('C','S'))
end-select

let $record_type    = '04'
let #payment_no     = #payment_no + 1
let $acct_type      = upper(&PAYDIST1.ACCOUNT_TYPE)
let $payee_ssn      = upper(&CHK1.SSN)
let $zeros          = '00000000000'
let $record_code    = 'B'
let $payee_name     = upper(substr(&CHK1.PAYCHECK_NAME, 1, 22))

if $trans_type = '03'

    let $allotment_code = 'N'

else

    let $allotment_code = ''

end-if

let $transit_no     = &PAYDIST1.BANK_CD
let $account_no     = upper(rtrim(&PAYDIST1.ACCOUNT_NUM, ' '))
let $acct_symbol    = upper(rtrim(&CHK1.GVT_ECS_OFF_ACCT, ' '))
let $payment_id_1   = upper(rtrim(&CHK1.GVT_PAY_ID_LINE_1, ' '))
let $payment_id_2   = upper(rtrim(&CHK1.GVT_PAY_ID_LINE_2, ' '))

let #amount         = &CHK1.NET_PAY
multiply 100 times #amount
do Format-Number(#amount, $payment, '0000000009')

do Format-Number(#payment_no, $payment_no, '000009')

write 1 from $record_type:2
             $payment_no:6
             $schedule:14
             $acct_type:1
             $payee_ssn:9
             $blanks_3:3
             $zeros:11
             $payment:10
             $record_code:1
             $payee_name:22
             $allotment_code:1
             $blanks_6:6
             $transit_no:9
             $account_no:17
             $blanks_104:104
             $blank:1
             $acct_symbol:16
             $blanks_50:50
             $payment_id_1:40
             $payment_id_2:40
             $blanks_77:77

let #schedule_total = #schedule_total + &CHK1.NET_PAY

end-procedure        !retrieve-eft-net

!********************************************
begin-procedure retrieve-off-cycle-deductions
!********************************************

begin-select

CHK2.COMPANY
CHK2.PAYGROUP
CHK2.PAY_END_DT
CHK2.OFF_CYCLE
CHK2.PAGE_NUM
CHK2.LINE_NUM
CHK2.SEPCHK
CHK2.PAYCHECK_NAME
CHK2.SSN
CHK2.EMPLID
CHK2.EMPL_RCD
DED2.PLAN_TYPE
DED2.DEDCD
DED2.DED_CLASS
DED2.DED_SLSTX_CLASS
DED2.BENEFIT_PLAN
DED2.DED_CUR
DED2.GVT_SCHEDULE_NO
DED2.GVT_PAY_ID_LINE_1
DED2.GVT_PAY_ID_LINE_2
DED2.GVT_ECS_LTD_INDIC
DED2.GVT_ECS_OFF_ACCT

    let $check_company    = rtrim(&CHK2.COMPANY,' ')
    let $check_paygroup   = rtrim(&CHK2.PAYGROUP,' ')
    let $check_pay_end_dt = &CHK2.PAY_END_DT
    let $check_off_cycle  = &CHK2.OFF_CYCLE
    let #check_page_nbr   = &CHK2.PAGE_NUM
    let #check_line_nbr   = &CHK2.LINE_NUM
    let #check_sepchk     = &CHK2.SEPCHK
    let $check_emplid     = rtrim(&CHK2.EMPLID,' ')

    if $trans_type = '07'

        do retrieve-check-ded

    else

        do retrieve-eft-ded

    end-if

FROM  PS_PAY_DEDUCTION DED2,
      PS_PAY_CHECK CHK2

WHERE DED2.GVT_SCHEDULE_NO = &ECSRUN.GVT_SCHEDULE_NO
AND   CHK2.COMPANY         = DED2.COMPANY
AND   CHK2.PAYGROUP        = DED2.PAYGROUP
AND   CHK2.PAY_END_DT      = DED2.PAY_END_DT
AND   CHK2.OFF_CYCLE       = DED2.OFF_CYCLE
AND   CHK2.PAGE_NUM        = DED2.PAGE_NUM
AND   CHK2.LINE_NUM        = DED2.LINE_NUM
AND   CHK2.SEPCHK          = DED2.SEPCHK

end-select

let #total_payments = #payment_no

end-procedure        !retrieve-off-cycle-deductions

!*******************************
begin-procedure retrieve-eft-ded
!*******************************

let $record_type    = '04'
let $payee_ssn      = upper(&CHK1.SSN)
let $zeros          = '00000000000'
let $record_code    = 'B'
let $acct_symbol    = upper(rtrim(&DED2.GVT_ECS_OFF_ACCT, ' '))
let $payment_id_1   = upper(rtrim(&DED2.GVT_PAY_ID_LINE_1, ' '))
let $payment_id_2   = upper(rtrim(&DED2.GVT_PAY_ID_LINE_2, ' '))

if $trans_type = '03'

    let $allotment_code = 'N'

else

    let $allotment_code = ''

end-if

let #amount         = &DED2.DED_CUR
multiply 100 times #amount
do Format-Number(#amount, $payment, '0000000009')

do determine-payment-info

if &DEDTBL.SPCL_PROCESS <> 'G'

    let #payment_no     = #payment_no + 1

    do Format-Number(#payment_no, $payment_no, '000009')

    write 1 from $record_type:2
                 $payment_no:6
                 $schedule:14
                 $acct_type:1
                 $payee_ssn:9
                 $blanks_3:3
                 $zeros:11
                 $payment:10
                 $record_code:1
                 $payee_name:22
                 $allotment_code:1
                 $blanks_6:6
                 $transit_no:9
                 $account_no:17
                 $blanks_104:104
                 $blank:1
                 $acct_symbol:16
                 $blanks_50:50
                 $payment_id_1:40
                 $payment_id_2:40
                 $blanks_77:77


    let #schedule_total = #schedule_total + &DED2.DED_CUR

end-if

end-procedure        !retrieve-eft-ded


!*********************************
begin-procedure retrieve-check-ded
!*********************************

let $record_type    = '04'
let $enclosure_code = '1'
let $zero           = '0'
let $record_code    = 'B'
let $ltd_indic      = upper(&DED2.GVT_ECS_LTD_INDIC)
let $acct_symbol    = upper(rtrim(&DED2.GVT_ECS_OFF_ACCT, ' '))
let $zeros          = '0000000000000000'
let $payment_id_1   = upper(rtrim(&DED2.GVT_PAY_ID_LINE_1, ' '))
let $payment_id_2   = upper(rtrim(&DED2.GVT_PAY_ID_LINE_2, ' '))

let #pay_line_1     = length($payment_id_1)
let #pay_line_2     = length($payment_id_2)

if #pay_line_1 > 0 and
   #pay_line_2 > 0

    let $no_of_payment_id = '02'

else

    let $no_of_payment_if = '01'

end-if

let #amount         = &DED2.DED_CUR
multiply 100 times #amount
do Format-Number(#amount, $payment, '0000000009')

do determine-payment-info

if &DEDTBL.SPCL_PROCESS  <> 'G'

    let #payment_no     = #payment_no + 1

    do Format-Number(#payment_no, $payment_no, '000009')

    write 1 from $record_type:2
                 $payment_no:6
                 $schedule:14
                 $enclosure_code:1
                 $blanks_7:7
                 $zero:1
                 $payment:10
                 $agency_id:10
                 $record_code:1
                 $payee_name:35
                 $address1:35
                 $address2:35
                 $address3:30
                 $address4:30
                 $ltd_indic:1
                 $acct_symbol:16
                 $zeros:16
                 $blanks_33:33
                 $no_of_payment_id:2
                 $payment_id_1:40
                 $blanks_15:15
                 $payment_id_2:40
                 $blanks_60:60

    let #schedule_total = #schedule_total + &DED2.DED_CUR

end-if


end-procedure        !retrieve-check-ded


!*************************************
begin-procedure determine-payment-info
!*************************************

let $address1 = ''
let $address2 = ''
let $address3 = ''
let $address4 = ''

begin-select

GNLD.GVT_DED_DIST_CD
GNLD.GVT_PYMNT_METHOD
GNLD.GVT_CHK_NAME
GNLD.GVT_ADDRESS1
GNLD.GVT_ADDRESS2
GNLD.GVT_ADDRESS_CITY
GNLD.GVT_ADDRESS_STATE
GNLD.GVT_ADDRESS_ZIP
GNLD.GVT_ADDRESS_CNTRY
GNLD.BANK_CD
GNLD.ACCOUNT_NUM
GNLD.ACCOUNT_TYPE
GNLD.GVT_PAYEE_ID_NO
GNLD.GVT_PAYEE_NAME
DEDTBL.SPCL_PROCESS

    if not isnull(&GNLD.GVT_DED_DIST_CD) and
       not isblank(&GNLD.GVT_DED_DIST_CD)

        do get-distribution-info

    else

        if &DEDTBL.SPCL_PROCESS = 'G'

            do get-garnish-info

        else

            if &GNLD.GVT_PYMNT_METHOD = 'C'

                let $name       = substr(&GNLD.GVT_CHK_NAME, 1, 35)
                do rotate-name
                let $payee_name = upper($name)
                let $address1   = upper(rtrim(&GNLD.GVT_ADDRESS1, ' '))
                let $state      = upper(rtrim(&GNLD.GVT_ADDRESS_STATE, ' '))
                let $zip_5      = upper(substr(&GNLD.GVT_ADDRESS_ZIP, 1, 5))
                let $zip_4      = upper(substr(&GNLD.GVT_ADDRESS_ZIP, 7, 4))

                if &GNLD.GVT_ADDRESS2 = ' '

                    if isblank($zip_4)

                       let $city     = upper(rtrim(substr(&GNLD.GVT_ADDRESS_CITY, 1, 25), ' '))
                       let $address2 = $city || $state || '**' || $zip_5
                       let $address2 = translate($address2,'*', ' ')

                    else

                       let $city     = upper(rtrim(substr(&GNLD.GVT_ADDRESS_CITY, 1, 21), ' '))
                       let $address2 = $city || $state || '**' || $zip_5 || $zip_4
                       let $address2 = translate($address2,'*', ' ')

                    end-if

                end-if

            else

                let $payee_name     = upper(substr(&GNLD.GVT_CHK_NAME, 1, 22))
                let $transit_no     = &GNLD.BANK_CD
                let $account_no     = upper(rtrim(&GNLD.ACCOUNT_NUM, ' '))
                let $acct_type      = upper(&GNLD.ACCOUNT_TYPE)

            end-if

        end-if

    end-if

FROM PS_GENL_DEDUCTION GNLD,
     PS_DEDUCTION_TBL DEDTBL

WHERE GNLD.EMPLID      = &CHK2.EMPLID
AND   GNLD.DEDCD       = &DED2.DEDCD
AND   GNLD.EFFDT       = (SELECT MAX(GNLD1.EFFDT)
                          FROM PS_GENL_DEDUCTION GNLD1
                          WHERE GNLD1.EMPLID = GNLD.EMPLID
                          AND   GNLD1.DEDCD     = GNLD.DEDCD
                          AND   GNLD1.EFFDT    <= &CHK2.PAY_END_DT)
AND   DEDTBL.PLAN_TYPE = &DED2.PLAN_TYPE
AND   DEDTBL.DEDCD     = &DED2.DEDCD
AND   DEDTBL.EFFDT     = (SELECT MAX(DEDTBL1.EFFDT)
                          FROM PS_DEDUCTION_TBL DEDTBL1
                          WHERE DEDTBL1.PLAN_TYPE = DEDTBL.PLAN_TYPE
                          AND   DEDTBL1.DEDCD     = DEDTBL.DEDCD
                          AND   DEDTBL1.EFFDT    <= &CHK2.PAY_END_DT)

end-select

end-procedure        !determine-payment-info

!************************************
begin-procedure get-distribution-info
!************************************

begin-select

GDD.GVT_PYMNT_METHOD
GDD.GVT_CHK_NAME
GDD.GVT_ADDRESS1
GDD.GVT_ADDRESS2
GDD.GVT_ADDRESS_CITY
GDD.GVT_ADDRESS_STATE
GDD.GVT_ADDRESS_ZIP
GDD.GVT_ADDRESS_CNTRY
GDD.BANK_CD
GDD.ACCOUNT_NUM
GDD.ACCOUNT_TYPE
GDD.GVT_PAYEE_ID_NO
GDD.GVT_PAYEE_NAME

    if &GDD.GVT_PYMNT_METHOD = 'C'

        let $name       = substr(&GDD.GVT_PAYEE_NAME, 1, 35)
        do rotate-name
        let $payee_name = upper($name)
        let $address1   = upper(rtrim(&GDD.GVT_ADDRESS1, ' '))
        let $state      = upper(rtrim(&GDD.GVT_ADDRESS_STATE, ' '))
        let $zip_5      = upper(substr(&GDD.GVT_ADDRESS_ZIP, 1, 5))
        let $zip_4      = upper(substr(&GDD.GVT_ADDRESS_ZIP, 7, 4))

        if &GDD.GVT_ADDRESS2 = ' '

            if isblank($zip_4)

               let $city     = upper(rtrim(substr(&GDD.GVT_ADDRESS_CITY, 1, 25), ' '))
               let $address2 = $city || $state || '**' || $zip_5
               let $address2 = translate($address2,'*', ' ')

            else

               let $city     = upper(rtrim(substr(&GDD.GVT_ADDRESS_CITY, 1, 21), ' '))
               let $address2 = $city || $state || '**' || $zip_5 || $zip_4
               let $address2 = translate($address2,'*', ' ')

            end-if

        end-if

    else

        let $payee_ssn      = upper(&GDD.GVT_PAYEE_ID_NO)
        let $payee_name     = upper(substr(&GDD.GVT_CHK_NAME, 1, 22))
        let $transit_no     = &GDD.BANK_CD
        let $account_no     = upper(rtrim(&GDD.ACCOUNT_NUM, ' '))
        let $acct_type      = upper(&GDD.ACCOUNT_TYPE)

    end-if

FROM PS_GVT_DED_DIST GDD

WHERE GDD.DEDCD           = &DED2.DEDCD
AND   GDD.GVT_DED_DIST_CD = &GNLD.GVT_DED_DIST_CD
AND   GDD.EFF_STATUS      = 'A'
AND   GDD.EFFDT           = (SELECT MAX(GDD1.EFFDT)
                             FROM  PS_GVT_DED_DIST GDD1
                             WHERE GDD1.DEDCD           = GDD.DEDCD
                             AND   GDD1.GVT_DED_DIST_CD = GDD.GVT_DED_DIST_CD
                             AND   GDD1.EFFDT          <= &CHK2.PAY_END_DT)

end-select


end-procedure        !get-distribution-info

!*******************************
begin-procedure get-garnish-info
!*******************************

begin-select

GARN.GARNID
GARN.DEDUCT_GARN_AMT

    do retrieve-garnishment-routing

FROM  PS_PAY_GARNISH GARN

WHERE GARN.COMPANY      = $check_company
AND   GARN.PAYGROUP     = $check_paygroup
AND   GARN.PAY_END_DT   = $check_pay_end_dt
AND   GARN.OFF_CYCLE    = $check_off_cycle
AND   GARN.PAGE_NUM        = #check_page_nbr
AND   GARN.LINE_NUM        = #check_line_nbr
AND   GARN.SEPCHK       = #check_sepchk
AND   GARN.PLAN_TYPE    = &DED2.PLAN_TYPE
AND   GARN.BENEFIT_PLAN = &DED2.BENEFIT_PLAN
AND   GARN.DEDCD        = &DED2.DEDCD
AND   GARN.DED_CLASS    = &DED2.DED_CLASS

END-SELECT

end-procedure        !get-garnish-info

!*******************************************
begin-procedure retrieve-garnishment-routing
!*******************************************

BEGIN-SELECT

GARN_SPEC.GARN_PAYEE_NAME
GARN_SPEC.COURT_DOC_ID
GARN_SPEC.ADDRESS1
GARN_SPEC.ADDRESS2
GARN_SPEC.ADDRESS3
GARN_SPEC.ADDRESS4
GARN_SPEC.CITY
GARN_SPEC.STATE
GARN_SPEC.POSTAL

    let $name       = substr(&GARN_SPEC.GARN_PAYEE_NAME, 1, 35)
    do rotate-name
    let $payee_name = upper($name)
    let $address1   = upper(rtrim(&GARN_SPEC.ADDRESS1, ' '))
    let $state      = upper(rtrim(&GARN_SPEC.STATE, ' '))
    let $zip_5      = upper(substr(&GARN_SPEC.POSTAL, 1, 5))
    let $zip_4      = upper(substr(&GARN_SPEC.POSTAL, 7, 4))

    if &GARN_SPEC.ADDRESS2 = ' '

        if isblank($zip_4)

           let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 25), ' '))
           let $address2 = $city || $state || '**' || $zip_5
           let $address2 = translate($address2,'*', ' ')

        else

           let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 21), ' '))
           let $address2 = $city || $state || '**' || $zip_5 || $zip_4
           let $address2 = translate($address2,'*', ' ')

        end-if

     else

        if &GARN_SPEC.ADDRESS3 = ' '

            let $address2   = upper(rtrim(&GARN_SPEC.ADDRESS2, ' '))

            if isblank($zip_4)

               let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 20), ' '))
               let $address3 = $city || $state || '**' || $zip_5
               let $address3 = translate($address2,'*', ' ')

            else

               let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 16), ' '))
               let $address3 = $city || $state || '**' || $zip_5 || $zip_4
               let $address3 = translate($address2,'*', ' ')

            end-if

        else

            let $address3   = upper(rtrim(substr(&GARN_SPEC.ADDRESS3, 1, 30), ' '))

            if isblank($zip_4)

               let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 20), ' '))
               let $address4 = $city || $state || '**' || $zip_5
               let $address4 = translate($address2,'*', ' ')

            else

               let $city     = upper(rtrim(substr(&GARN_SPEC.CITY, 1, 16), ' '))
               let $address4 = $city || $state || '**' || $zip_5 || $zip_4
               let $address4 = translate($address2,'*', ' ')

            end-if

        end-if

    end-if

    let #amount         = &GARN.DEDUCT_GARN_AMT
    multiply 100 times #amount
    do Format-Number(#amount, $payment, '0000000009')

    do Format-Number(#payment_no, $payment_no, '000009')

    let #payment_no     = #payment_no + 1

    do Format-Number(#payment_no, $payment_no, '000009')

    write 1 from $record_type:2
                 $payment_no:6
                 $schedule:14
                 $enclosure_code:1
                 $blanks_7:7
                 $zero:1
                 $payment:10
                 $agency_id:10
                 $record_code:1
                 $payee_name:35
                 $address1:35
                 $address2:35
                 $address3:30
                 $address4:30
                 $ltd_indic:1
                 $acct_symbol:16
                 $zeros:16
                 $blanks_33:33
                 $no_of_payment_id:2
                 $payment_id_1:40
                 $blanks_15:15
                 $payment_id_2:40
                 $blanks_60:60

    let #schedule_total = #schedule_total + &GARN.DEDUCT_GARN_AMT


FROM  PS_GARN_SPEC GARN_SPEC

WHERE GARN_SPEC.EMPLID  = $check_emplid
AND   GARN_SPEC.COMPANY = $check_company
AND   GARN_SPEC.GARNID  = &GARN.GARNID

END-SELECT

end-procedure       !retrieve-garnishment-routing


!********************************
begin-procedure get-schedule-type
!********************************

begin-select
XLAT.FIELDNAME
XLAT.FIELDVALUE

  let $FieldName = &XLAT.FIELDNAME
  let $FieldValue = &XLAT.FIELDVALUE
  do Read-Translate-Table
  let $schedule_type = rtrim(upper($XlatShortName), ' ')

FROM  PSXLATITEM XLAT
WHERE XLAT.FIELDNAME   = 'GVT_ECS_TRANS_TYPE'
AND   XLAT.FIELDVALUE  = &ECSCNTL.GVT_ECS_TRANS_TYPE
AND   XLAT.EFFDT       = (SELECT MAX(EFFDT)
                          FROM  PSXLATITEM XLAT1
                          WHERE XLAT1.FIELDNAME   = XLAT.FIELDNAME
                          AND   XLAT1.FIELDVALUE  = XLAT.FIELDVALUE
                          AND   XLAT1.EFFDT       <= $AsOfToday)
AND   XLAT.EFF_STATUS  = 'A'
end-select

end-procedure        !get-schedule-type

!**********************************
begin-procedure update-ecs-schedule
!**********************************


evaluate $trans_type

when = '05'

    begin-sql

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_DOS_NAME   = &ECSRUN.GVT_ECS_DOS_NAME,
               GVT_ECS_DOS_EXT    = &ECSRUN.GVT_ECS_DOS_EXT,
               GVT_ECS_EXTRACT_DT = $AsOfToday
        WHERE  COMPANY            = &ECSRUN.COMPANY
        AND    GVT_SCHEDULE_NO    = &ECSRUN.GVT_SCHEDULE_NO

    end-sql
    break

when-other

    begin-sql

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_NO_OF_PMNT = #total_payments,
               GVT_ECS_TOT_AMT    = #schedule_total,
               GVT_ECS_DOS_NAME   = &ECSRUN.GVT_ECS_DOS_NAME,
               GVT_ECS_DOS_EXT    = &ECSRUN.GVT_ECS_DOS_EXT,
               GVT_ECS_EXTRACT_DT = $AsOfToday,
               GVT_ECS_GEN_DT     = $AsOfToday
        WHERE  COMPANY            = &ECSRUN.COMPANY
        AND    GVT_SCHEDULE_NO    = &ECSRUN.GVT_SCHEDULE_NO

    end-sql
    break

end-evaluate

end-procedure        !update-ecs-schedule

!*********************************
begin-procedure delete-run-control
!*********************************

begin-sql

    DELETE FROM PS_GVT_ECS_RUNCTL
    WHERE  RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-sql

begin-sql

    DELETE FROM PS_GVT_AGY_RUNCTL
    WHERE  RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-sql

begin-sql

    DELETE FROM PS_GVT_RUN_CNTL
    WHERE  RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-sql

end-procedure       !delete-run-control

!*****************************
begin-procedure commit-updates
!*****************************

do Commit-Transaction

end-procedure       !commit-updates

#Include 'fgrunctl.sqc'  !Get run control parameter values
#Include 'reset.sqc'     !Reset printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'curdttim.sqc'  !Routines to get current date/time
#include 'rotname1.sqc'  !Routine to reformat name
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Commit-Transaction
