!***********************************************************************
!  BUD008.SQR:  Budget Export - Send Current FY to G/L                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!     in the Budgets application during the budget creation / approval *
!     process.                                                         *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/04/24:18:55:04                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689716                                              !
!                                                                      *
!  $Last Modified 10/20/2000  When account not found use proper earning*
!        default or deduction default                                  *
!        4/8/2002 Processing of 4 new chartfields                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup31.sqc'

#define  apptbdgtmax      50
#define  posnbdgtmax      200
#define  poolbdgtmax      1000
#define  deptbdgtmax      2500

!***********************************************************************

Begin-REPORT

   do INITIALIZE
   do MAINLINE-EARNS

   do COMMIT-TRANSACTION

   if $Prm_Budget_Opt_Ded = 'L'
      do MAINLINE-BENS
   end-if

   do WRAPUP

End-REPORT

Begin-heading 6
   #include 'stdhdg01.sqc'  ! for standard heading
   print '' (+1,,)
End-heading

!***********************************************************************
! Procedure: INITIALIZE                                                *
! Descr:     Performs the application initializations.  Formats var-   *
!            iables for use.  Calls the procedures to get input parms. *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure INITIALIZE

   let #Commit_Cnt = 0
   let #Trans_Cnt = 0

   do INIT-DATETIME
   do INIT-NUMBER
   do GET-CURRENT-DATETIME
   do STDAPI-INIT

   if $prcs_process_instance = ''
      show 'PeopleSoft does not support the execution of SQR programs other than'
      show 'with the use of the PeopleSoft Process Scheduler.  This and all'
      show 'PeopleSoft SQR programs should not be initiated directly from SQRW.'
      !NOTE -- PeopleSoft does not support execution of SQR programs
      !     directly from SQRW.  The call to "Ask-Parameters" is provided
      !     only to assist in debugging or program modification
      !Uncomment Prompts for SQRW development/testing ONLY!!
      do ASK-PARAMETERS
   else
      do SELECT-PARAMETERS
   end-if

   let $Prm_Fringe_Group  = nvl($Prm_Fringe_Group,' ')
   let $Prm_Redirect_Acct = nvl($Prm_Redirect_Acct,' ')

   move 'BUD008.SQR' to $ReportID
   move 'Build FY Budget From Import' to $ReportTitle
   show $ReportTitle ' ' $Prm_FromDate

   do SELECT-INSTALLATION

   do CREATE-ARRAYS


End-Procedure INITIALIZE

!***********************************************************************
! Procedure: ASK-PARAMETERS                                            *
! Descr:     Gets run-time parameters from the user where the program  *
!            is not executed through the process scheduler interface   *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure ASK-PARAMETERS

   input $Fiscal_Year maxlen=4 'Enter 4-digit FISCAL YEAR' type=integer
   let #Prm_Fiscal_Year = $Fiscal_Year

   input $InputDate maxlen=10 'Enter Fiscal Year Start (format MM/DD/YY)' type=char

   input $Business_Unit maxlen=5 'Enter 5 character BUSINESS UNIT' type=char
   let $Prm_Business_Unit = upper(ltrim(rtrim($Business_Unit,' '),' '))

   input $Run_Type maxlen=1 'Enter Budget Rollup Level' type=char
   let $Prm_Budget_Level_Indc = upper(ltrim(rtrim($Run_Type,' '),' '))

   input $Runctl_Offset_Grp maxlen=5 'Enter Department Offset Group' type=char
   let $Prm_Offset_Grp = upper(ltrim(rtrim($Runctl_Offset_Grp,' '),' '))

   input $Runctl_Acct_Cd maxlen=25 'Enter Default Combination Code' type=char
   let $Prm_Acct_Cd = upper(ltrim(rtrim($Runctl_Acct_Cd,' '),' '))

   input $Runctl_Budget_Opt_Ded maxlen=1 'Enter Dedn Copy Option (C or D)' type=char
   let $Prm_Budget_Opt_Ded = upper(ltrim(rtrim($Runctl_Budget_Opt_Ded,' '),' '))

   input $Runctl_Acct_Cd_Ded maxlen=25 'Enter Default Dedn Combination Code' type=char
   let $Prm_Acct_Cd_Ded = upper(ltrim(rtrim($Runctl_Acct_Cd_Ded,' '),' '))

   input $Runctl_Budget_Opt_Tax maxlen=1 'Enter Tax Copy Option (C, D, or L)' type=char
   let $Prm_Budget_Opt_Tax = upper(ltrim(rtrim($Runctl_Budget_Opt_Tax,' '),' '))

   input $Runctl_Acct_Cd_Tax maxlen=25 'Enter Default Tax Combination Code' type=char
   let $Prm_Acct_Cd_Tax = upper(ltrim(rtrim($Runctl_Acct_Cd_Tax,' '),' '))

   input $Runctl_Fringe_Group maxlen=5 'Enter Exclusion Fringe Group' type=char
   let $Prm_Fringe_Group = upper(ltrim(rtrim($Runctl_Fringe_Group,' '),' '))

   input $Runctl_Redirect_Acct maxlen=25 'Enter Redirect Combination Code' type=char
   let $Prm_Redirect_Acct = upper(ltrim(rtrim($Runctl_Redirect_Acct,' '),' '))

   input $Runctl_Ern_Acct maxlen=1 'Enter Acct Override for Earns (Y/N)' type=char
   let $Prm_Ern_Acct = upper(ltrim(rtrim($Runctl_Ern_Acct,' '),' '))

   input $Runctl_Ded_Acct maxlen=1 'Enter Acct Override for Dedns (Y/N)' type=char
   let $Prm_Ded_Acct = upper(ltrim(rtrim($Runctl_Ded_Acct,' '),' '))

   input $Runctl_Tax_Acct maxlen=1 'Enter Acct Override for Tax (Y/N)' type=char
   let $Prm_Tax_Acct = upper(ltrim(rtrim($Runctl_TAx_Acct,' '),' '))

   if $InputDate = '' or #Prm_Fiscal_Year = 0
   or $Prm_Budget_Level_Indc = '' or $Prm_Acct_Cd = ''
      display ' '
      display 'Program aborted at user'' request'
      stop quiet
   end-if

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Format-DateTime($InputDate, $Prm_FromDate, {DEFMDY},'','native')
   do Convert-To-DTU-Date($Prm_FromDate, $Prm_FromDate_Dtu)
   do Format-DateTime ($Prm_FromDate, $Prm_FromDate_Cmp, {DEFCMP},'','')

! Calculate a budget year end date one year less a day from the start date parameter.

   do CONVERT-TO-DTU-DATE($Prm_FromDate, $DTU_Prm_FromDate)
   do DTU-ADD-YEARS($DTU_Prm_FromDate, 1, $DTU_Prm_ThruDate)
   do DTU-SUBTRACT-DAYS($DTU_Prm_ThruDate, 1,$DTU_Prm_ThruDate)
   do CONVERT-FROM-DTU-DATE($DTU_Prm_ThruDate, $Prm_ThruDate)

End-Procedure ASK-PARAMETERS

!***********************************************************************
! Procedure: GET-VALUES                                                *
! Descr:     Loads and formats the variables obtained through the      *
!            process scheduler interface.                              *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure GET-VALUES

   do Get-FiscalYear
   do Get-From-Thru-Date
   do Get-Business-Unit
   do Get-Dept-Offset-Grp
   do Get-Budget-Level-Indc
   do Get-Acct-Cd
   do Get-Budget-Opt-Ded
   do Get-Acct-Cd-Ded
   do Get-Budget-Opt-Tax
   do Get-Acct-Cd-Tax
   do Get-Fringe

! Convert dates to dtu format for date calculation as well as
! cmp format for comparison

   do Convert-To-DTU-Date($FromDate, $DTU_Prm_FromDate)
   do Format-DateTime ($FromDate, $CMP_Prm_FromDate,{DEFCMP},'','')

! Calculate a budget year end date one year less a day from the start date parameter.

   do DTU-ADD-YEARS($DTU_Prm_FromDate, 1, $DTU_Prm_ThruDate)
   do DTU-SUBTRACT-DAYS($DTU_Prm_ThruDate, 1,$DTU_Prm_ThruDate)
   do CONVERT-FROM-DTU-DATE($DTU_Prm_ThruDate, $Prm_ThruDate)

   let #Prm_Fiscal_Year = #FiscalYear
   let $Prm_FromDate = $FromDate
   let $Prm_Business_Unit = $Business_Unit
   let $Prm_Budget_Level_Indc = $Runctl_Budget_Level_Indc
   let $Prm_Offset_Grp = $Dept_Offset_Grp
   let $Prm_Acct_Cd = $Runctl_Acct_Cd
   let $Prm_Budget_Opt_Ded = $Runctl_Budget_Opt_Ded
   let $Prm_Acct_Cd_Ded = $Runctl_Acct_Cd_Ded
   let $Prm_Budget_Opt_Tax = $Runctl_Budget_Opt_Tax
   let $Prm_Acct_Cd_Tax = $Runctl_Acct_Cd_Tax
   let $Prm_Fringe_Group = $Runctl_Fringe_Group
   let $Prm_Redirect_Acct = $Runctl_Redirect_Acct
   let $Prm_Ern_Acct = $Runctl_Ern_Acct
   let $Prm_Ded_Acct = $Runctl_Ded_Acct
   let $Prm_Tax_Acct = $Runctl_Tax_Acct

End-Procedure GET-VALUES

!***********************************************************************
! Procedure: SELECT-INSTALLATION                                       *
! Descr:     Selects necessary parameters from the installation table  *
!                                                                      *
! Called by: INITIALIZE                                                *
!***********************************************************************
Begin-Procedure SELECT-INSTALLATION

Begin-SELECT
IN1.COUNTRY
IN1.PUBLIC_SECTOR
IN1.POSITION_MGMT
IN1.COMMIT_AFTER
IN1.STD_HRS_DEFAULT
IN1.EXCHNG_TO_CURRENCY

   move &IN1.COUNTRY             to $Gbl_Country
   move &IN1.PUBLIC_SECTOR       to $Gbl_Public_Sector
   move &IN1.POSITION_MGMT       to $Gbl_Position_Mgmt
   move &IN1.COMMIT_AFTER        to #Gbl_Commit_After
   move &IN1.STD_HRS_DEFAULT     to #Gbl_Std_Hrs_Default
   move &IN1.EXCHNG_TO_CURRENCY  to $Gbl_Currency_Cd

FROM PS_INSTALLATION IN1
   , PS_COUNTRY_CUR_TBL CC
WHERE CC.COUNTRY = IN1.COUNTRY
  AND CC.CURRENCY_CD = IN1.EXCHNG_TO_CURRENCY
  AND CC.EFFDT = (SELECT MAX(CC1.EFFDT)
                    FROM PS_COUNTRY_CUR_TBL CC1
                   WHERE CC1.COUNTRY = CC.COUNTRY
                     AND CC1.EFFDT <= $Prm_FromDate)
End-SELECT

End-Procedure SELECT-INSTALLATION

!******************************************************************************
! Procedure: CREATE-ARRAYS                                                    *
! Descr:     Sets up the storage arrays used during processing                *
!                                                                             *
! Called by: INITIALIZE                                                       *
!******************************************************************************
begin-procedure CREATE-ARRAYS

   Create-array name=Appt_Bdgt_Array  Size={apptbdgtmax}
        field=Appt_Ay_Plan_Type:Char
        field=Appt_Ay_Acct_Cd:Char
        field=Appt_Ay_Bdgt_Amt:Number
        field=Appt_Ay_Bdgt_Pct:Number

   Create-array name=Posn_Bdgt_Array  Size={posnbdgtmax}
        field=Posn_Ay_Plan_Type:Char
        field=Posn_Ay_Acct_Cd:Char
        field=Posn_Ay_Bdgt_Amt:Number
        field=Posn_Ay_Bdgt_Pct:Number

   Create-array name=Pool_Bdgt_Array  Size={poolbdgtmax}
        field=Pool_Ay_Plan_Type:Char
        field=Pool_Ay_Acct_Cd:Char
        field=Pool_Ay_Bdgt_Amt:Number
        field=Pool_Ay_Bdgt_Pct:Number

   Create-array name=Dept_Bdgt_Array  Size={deptbdgtmax}
        field=Dept_Ay_Plan_Type:Char
        field=Dept_Ay_Acct_Cd:Char
        field=Dept_Ay_Bdgt_Amt:Number
        field=Dept_Ay_Bdgt_Pct:Number
        field=Dept_Ay_Bdgt_FTE:Number

   let #Appt_Ay_Cnt = 0
   let #Posn_Ay_Cnt = 0
   let #Pool_Ay_Cnt = 0
   let #Dept_Ay_Cnt = 0

end-procedure

!***********************************************************************
! Procedure: MAINLINE-EARNS                                            *
! Descr:     Drive paragraph for this program.  Selects all current    *
!            JOB records by employee status.  For each job record, a   *
!            funding source entry is found and written to the temp.    *
!            table.  Open positions are the read from the POSITION_    *
!            DATA table and their funding sources identified.          *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure MAINLINE-EARNS

   !** Process all records in the Budgets Position Table (BD_POSITION_TBL)

   do PRE-PROCESS-BUDGET-DATA


Begin-SELECT DISTINCT
CAN_DEP_BUD.SETID
CAN_DEP_BUD.DEPTID
CAN_DEP_BUD.FISCAL_YEAR
CAN_DEP_BUD.EFFDT

   do Can-budget-be-deleted

   IF $budget_cleaned = 'N'
      display '<<setid >> ' noline
      display &CAN_DEP_BUD.SETID noline
      display ' <<deptid >> ' noline
      display &CAN_DEP_BUD.DEPTID noline
      display ' --> budget has been used in Distribution, department ignored'
      display 'program stopped'

      stop quiet
    end-if

FROM PS_DEPT_BUDGET     CAN_DEP_BUD
   , PS_BD_POS_POOL_WRK CAN_DEP_WRK
WHERE CAN_DEP_BUD.SETID  = CAN_DEP_WRK.SETID_DEPT
  AND CAN_DEP_BUD.DEPTID = CAN_DEP_WRK.DEPTID
  AND CAN_DEP_BUD.FISCAL_YEAR = #Prm_Fiscal_Year
  AND (CAN_DEP_BUD.BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
   OR  CAN_DEP_BUD.BUDGET_LEVEL_INDC = 'D')
end-SELECT


   do CLEAN-DEPT-BUDGETS

   do PROCESS-BUDGET-TABLE

End-Procedure MAINLINE-EARNS

!***********************************************************************
! Procedure: PRE-PROCESS-BUDGET-DATA                                   *
! Descr:     Select all records from the table BD_POSITION_TBL from    *
!            the Budgets Product for E&G.  For each record, looks up   *
!            HRMS data and builds temporary work tables.               *
!                                                                      *
! Called by: MAINLINE-EARNS                                            *
!***********************************************************************
Begin-Procedure PRE-PROCESS-BUDGET-DATA

   do CLEAN-WORK-TABLE

Begin-SELECT DISTINCT
BDPA.BUSINESS_UNIT
BDPA.POSITION_NBR
BDJA.EMPLID
BDJA.EMPL_RCD
BDJA.EFFDT
BDJA.JOBCODE
BDPA.BUSINESS_UNIT_HR
BDPA.POSITION_NBR_HR

   do FETCH-HR-POSN-DATA

   let $EmplID_Budgets = rtrim(&BDJA.EMPLID,' ')

   if isnull($Emplid_Budgets)
      let $Chk_EmplID = ' '
      let #Chk_Empl_Rcd = &BDJA.EMPL_RCD
   else
      do FETCH-HR-EMPL-DATA
   end-if

   do CHECK-DEPT-ACTUALS
   if #Actuals_Found
      display ' '
      display 'Department Budget Actuals Found for SetID/DeptID ' noline
      display $Chk_SetID                   noline
      display ' / '                        noline
      display $Chk_DeptID
      display ' in specified Fiscal Year ' noline
      display #Prm_Fiscal_Year             noline
      display '.  Processing aborted. '
      display ' '
      STOP QUIET
   end-if

   if #HR_Posn_Found
      if not #HR_Empl_Found
         let $Chk_EmplID            = ' '
         let #Chk_Empl_Rcd          = &BDJA.EMPL_RCD
      end-if
   else
      if #HR_Empl_Found
         let $Chk_Position_Pool_ID  = '@@@'
      else
         let $Chk_Business_Unit     = &BDPA.BUSINESS_UNIT
         let $Chk_Position_Nbr      = &BDPA.POSITION_NBR_HR
         let $Chk_Effdt             = &BDJA.EFFDT
         let $Chk_EmplID            = ' '
         let #Chk_Empl_Rcd          = &BDJA.EMPL_RCD
         let $Chk_Position_Pool_ID  = '@@@'
         let $Chk_SetID_Dept        = ' '
         let $Chk_DeptID            = ' '
         let #Chk_FTE               = 0.000000
      end-if
   end-if

   if #HR_Posn_Found or #HR_Empl_Found
      do WRITE-POSN-WORK-TBL
   end-if

FROM PS_BD_POSITION_TBL BDPA,
     PS_BD_JOB_TBL BDJA
WHERE BDPA.BUSINESS_UNIT = BDJA.BUSINESS_UNIT
  AND BDPA.POSITION_NBR = BDJA.POSITION_NBR
end-SELECT

end-procedure PRE-PROCESS-BUDGET-DATA

!***********************************************************************
! Procedure: FETCH-HR-POSN-DATA                                        *
! Descr:     Searches the HRMS Position Data table for information     *
!            relating to the position from budgets being processed.    *
!                                                                      *
! Called by: PRE-PROCESS-BUDGET-DATA                                   *
!***********************************************************************
Begin-Procedure FETCH-HR-POSN-DATA

   let #HR_Posn_Found = 0

Begin-SELECT
SCTA.SETID
POSA.POSITION_NBR
POSA.EFFDT
POSA.DEPTID
POSA.POSITION_POOL_ID
POSA.FTE
DPTA.BUDGET_DEPTID

   let #HR_Posn_Found = 1
   let $Chk_Business_Unit     = &BDPA.BUSINESS_UNIT
   let $Chk_Position_Nbr      = &BDPA.POSITION_NBR
   let $Chk_Effdt             = &BDJA.EFFDT
   let $Chk_EmplID            = ' '
   let #Chk_Empl_Rcd          = &BDJA.EMPL_RCD
   let $Chk_POSITION_POOL_ID  = &POSA.POSITION_POOL_ID
   let $Chk_SetID_Dept        = &SCTA.SETID
   let $Chk_Deptid            = &DPTA.BUDGET_DEPTID
   let #Chk_FTE               = &POSA.FTE


FROM PS_POSITION_DATA POSA
   , PS_SET_CNTRL_REC SCTA
   , PS_DEPT_TBL      DPTA
WHERE POSA.POSITION_NBR = &BDPA.POSITION_NBR_HR
  AND POSA.EFF_STATUS =  'A'
  AND SCTA.SETCNTRLVALUE = POSA.BUSINESS_UNIT
  AND SCTA.REC_GROUP_ID = 'HR_01'
  AND SCTA.RECNAME = 'DEPT_TBL'
  AND POSA.EFFDT = (SELECT MAX(POS1.EFFDT)
                      FROM PS_POSITION_DATA POS1
                     WHERE POS1.POSITION_NBR = POSA.POSITION_NBR
                       AND POS1.EFFDT <= &BDJA.EFFDT)
  AND DPTA.SETID = SCTA.SETID
  AND DPTA.DEPTID = POSA.DEPTID
  AND DPTA.EFFDT = (SELECT MAX(DPTA1.EFFDT)
                      FROM PS_DEPT_TBL DPTA1
                     WHERE DPTA1.SETID = DPTA.SETID
                       AND DPTA1.DEPTID = DPTA.DEPTID
                       AND DPTA1.EFFDT <= &BDJA.EFFDT)
End-SELECT

End-Procedure FETCH-HR-POSN-DATA

!***********************************************************************
! Procedure: FETCH-HR-EMPL-DATA                                        *
! Descr:     Searches the HRMS Job Data table for information relating *
!            to the position from budgets being processed.             *
!                                                                      *
! Called by: PRE-PROCESS-BUDGET-DATA                                   *
!***********************************************************************
Begin-Procedure FETCH-HR-EMPL-DATA

   let #HR_Empl_Found = 0

Begin-SELECT
JOBA.EMPLID
JOBA.EMPL_RCD
JOBA.SETID_DEPT
JOBA.DEPTID
JOBA.FTE
DPTB.BUDGET_DEPTID

   let #HR_Empl_Found = 1
   let $Chk_Business_Unit     = &BDPA.BUSINESS_UNIT
   let $Chk_Position_Nbr      = &BDPA.POSITION_NBR
   let $Chk_Effdt             = &BDJA.EFFDT
   let $Chk_EmplID            = &JOBA.EMPLID
   let #Chk_Empl_Rcd          = &JOBA.EMPL_RCD
   let $Chk_SetID_Dept        = &JOBA.SETID_DEPT
   let $Chk_Deptid            = &DPTB.BUDGET_DEPTID
   let #Chk_FTE               = &JOBA.FTE

FROM PS_JOB JOBA
, PS_DEPT_TBL      DPTB
WHERE JOBA.EMPLID = &BDJA.EMPLID
  AND JOBA.EMPL_RCD = &BDJA.EMPL_RCD
  AND JOBA.EMPL_STATUS IN ('A','P','L','S')
  AND JOBA.EFFDT = (SELECT MAX(JOB1.EFFDT)
                      FROM PS_JOB JOB1
                     WHERE JOB1.EMPLID = JOBA.EMPLID
                       AND JOB1.EMPL_RCD = JOBA.EMPL_RCD
                       AND JOB1.EFFDT <= &BDJA.EFFDT)
  AND DPTB.SETID = JOBA.SETID_DEPT
  AND DPTB.DEPTID = JOBA.DEPTID
  AND DPTB.EFFDT = (SELECT MAX(DPTB1.EFFDT)
                      FROM PS_DEPT_TBL DPTB1
                     WHERE DPTB1.SETID = DPTB.SETID
                       AND DPTB1.DEPTID = DPTB.DEPTID
                       AND DPTB1.EFFDT <= &BDJA.EFFDT)
End-SELECT

End-Procedure FETCH-HR-EMPL-DATA

!***********************************************************************
! Procedure: CLEAN-WORK-TABLE                                          *
! Descr:     Deletes all data from the Position Pool Work table        *
!                                                                      *
! Called by: PRE-PROCESS-BUDGET-DATA                                   *
!***********************************************************************
Begin-Procedure CLEAN-WORK-TABLE

   let $SQL-Statement = 'BUD008.SQR, DELETE, PS_BD_POS_POOL_WRK'

begin-sql on-error=SQL-Error
DELETE FROM PS_BD_POS_POOL_WRK
end-sql

End-Procedure CLEAN-WORK-TABLE

!***********************************************************************
! Procedure: CHECK-DEPT-ACTUALS                                        *
! Descr:     Searches the Dept Budget Tables for distribution data in  *
!            the specified Fiscal year.                                *
!                                                                      *
! Called by: PRE-PROCESS-BUDGET-DATA                                   *
!***********************************************************************
Begin-Procedure CHECK-DEPT-ACTUALS

   let #Actuals_Found = 0

Begin-SELECT
ACTV.DEPTID

   let #Actuals_Found = 1

FROM PS_ACTUALS_DEPT_VW ACTV
WHERE ACTV.SETID = $Chk_SetID
  AND ACTV.DEPTID = $Chk_DeptID
  AND ACTV.FISCAL_YEAR = #Prm_Fiscal_Year
  AND (ACTV.POSTED_ACTUAL_AMT <> 0
    OR ACTV.POSTED_ENCUMB_AMT <> 0
    OR ACTV.POSTED_SUM_AMT  <> 0)
End-SELECT

End-Procedure CHECK-DEPT-ACTUALS

!***********************************************************************
! Procedure: WRITE-POSN-WORK-TBL                                       *
! Descr:     Writes output data to a temporary work table which is     *
!            used to ensure the success of a Position Table join.      *
!                                                                      *
! Called by: PRE-PROCESS-BUDGET-DATA                                   *
!***********************************************************************
begin-procedure WRITE-POSN-WORK-TBL

   let $Chk_Business_Unit     = nvl($Chk_Business_Unit,' ')
   let $Chk_Position_Nbr      = nvl($Chk_Position_Nbr,' ')
   let $Chk_EmplID            = nvl($Chk_EmplID,' ')
   let #Work_Rec_Fnd = 0

Begin-SELECT
WRKA.POSITION_NBR

   let #Work_Rec_Fnd = 1

FROM PS_BD_POS_POOL_WRK WRKA
WHERE WRKA.BUSINESS_UNIT_BD = $Chk_Business_Unit
  AND WRKA.POSITION_NBR     = $Chk_Position_Nbr
  AND WRKA.EMPLID           = $Chk_EmplID
  AND WRKA.EMPL_RCD         = #Chk_Empl_Rcd
  AND WRKA.EFFDT            = $Chk_Effdt
End-SELECT

   if not #Work_Rec_Fnd

      do WRITE-POSN-WORK-REC

   end-if

end-procedure WRITE-POSN-WORK-TBL

!***********************************************************************
! Procedure: WRITE-POSN-WORK-REC                                       *
! Descr:     Writes output data to a temporary work table which is     *
!            used to ensure the success of a Position Table join.      *
!                                                                      *
! Called by: WRITE-POSN-WORK-TBL                                       *
!***********************************************************************
begin-procedure WRITE-POSN-WORK-REC

   let $Chk_Position_Pool_ID  = nvl($Chk_Position_Pool_ID,' ')
   let $Chk_SetID_Dept        = nvl($Chk_SetID_Dept,' ')
   let $Chk_DeptID            = nvl($Chk_DeptID,' ')

   let $SQL-Statement = 'BUD008.SQR, INSERT, PS_BD_POS_POOL_WRK'
begin-SQL on-error=SQL-Error
INSERT INTO PS_BD_POS_POOL_WRK (
   BUSINESS_UNIT_BD,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   POSITION_POOL_ID,
   SETID_DEPT,
   DEPTID,
   FTE )
VALUES (
   $Chk_Business_Unit,
   $Chk_Position_Nbr,
   $Chk_EmplID,
   #Chk_Empl_Rcd,
   $Chk_Effdt,
   $Chk_Position_Pool_ID,
   $Chk_SetID_Dept,
   $Chk_DeptID,
   #Chk_FTE )
end-sql

end-procedure WRITE-POSN-WORK-REC

!***********************************************************************
! Procedure: DELETE-EXISTING-BUDGETS                                   *
! Descr:     Deletes budgets which currently exist for the given       *
!            fiscal year and budget level for all departments where    *
!            a match was found in the pre-processing of the download.  *
!                                                                      *
! Called by: MAINLINE-EARNS                                            *
!***********************************************************************
begin-procedure DELETE-EXISTING-BUDGETS

   let $SQL-Statement = 'BUD008.SQR, SELECT, PS_BD_POS_POOL_WRK'
begin-SELECT DISTINCT on-error=SQL-Error
DELB.SETID_DEPT,
DELB.DEPTID

   let $Cur_SetID             = rtrim(&WRKB.SETID_DEPT,' ')
   let $Cur_DeptID            = rtrim(&WRKB.DEPTID,' ')

   do CLEAN-DEPT-BUDGETS

FROM PS_BD_POS_POOL_WRK DELB
WHERE DELB.SETID_DEPT <> ' '
  AND DELB.DEPTID <> ' '
end-SELECT

end-procedure DELETE-EXISTING-BUDGETS

!***********************************************************************
! Procedure: PROCESS-BUDGET-TABLE                                      *
! Descr:     Select all records from the table BD_POSITION_TBL from    *
!            the Budgets Product for E&G.  For each record, either     *
!            write a budget rec, or roll up to a higher level of       *
!            budget depending on the Run Control directions.           *
!                                                                      *
! Called by: MAINLINE-EARNS                                            *
!***********************************************************************
Begin-Procedure PROCESS-BUDGET-TABLE

! Define alternate order by clauses
  ! the order by clause contains Emplid and Empl Rcd when processing
  ! appointment only

   let $Dep_order = 'WRKB.SETID_DEPT, WRKB.DEPTID, WRKB.POSITION_POOL_ID, '
         || 'BDPB.POSITION_NBR_HR, '
         || 'BDDB.ACCOUNT, BDDB.ALTACCT, BDDB.OPERATING_UNIT, BDDB.DEPTID, '
         || 'BDDB.PRODUCT, BDDB.PROJECT_ID, BDDB.AFFILIATE, BDDB.FUND_CODE, '
         || 'BDDB.PROGRAM_CODE, BDDB.CLASS_FLD, BDDB.BUDGET_REF, '
         || 'BDDB.CHARTFIELD1, BDDB.CHARTFIELD2, BDDB.CHARTFIELD3, '
         || 'BDDB.AFFILIATE_INTRA1, BDDB.AFFILIATE_INTRA2, '
         || 'BDPB.POSITION_NBR '

   let $Appt_order = 'WRKB.SETID_DEPT, WRKB.DEPTID, WRKB.POSITION_POOL_ID, '
         || 'BDPB.POSITION_NBR_HR, BDJB.EMPLID, BDJB.EMPL_RCD, '
         || 'BDDB.ACCOUNT, BDDB.ALTACCT, BDDB.OPERATING_UNIT, BDDB.DEPTID, '
         || 'BDDB.PRODUCT, BDDB.PROJECT_ID, BDDB.AFFILIATE, BDDB.FUND_CODE, '
         || 'BDDB.PROGRAM_CODE, BDDB.CLASS_FLD, BDDB.BUDGET_REF, '
         || 'BDDB.CHARTFIELD1, BDDB.CHARTFIELD2, BDDB.CHARTFIELD3, '
         || 'BDDB.AFFILIATE_INTRA1, BDDB.AFFILIATE_INTRA2, '
         || 'BDPB.POSITION_NBR '

   if $Prm_Budget_level_indc = 'A'
      let $order_by = $Appt_order
   else
      let $order_by = $Dep_order
   end-if


   let #First_Pass = 1
   let #Last_Pass = 0
   let $Save_SetID = ' '
   let $Save_DeptID = ' '

   let $SQL-Statement = 'BUD008.SQR, SELECT, MAIN'
Begin-SELECT  on-error=SQL-Error
WRKB.SETID_DEPT
WRKB.DEPTID
WRKB.POSITION_POOL_ID
BDPB.POSITION_NBR_HR
BDJB.EMPLID
BDJB.EMPL_RCD
WRKB.EFFDT
BDDB.ACCOUNT            ! Chartfield subrecord
BDDB.ALTACCT            ! Chartfield subrecord
BDDB.OPERATING_UNIT     ! Chartfield subrecord
BDDB.DEPTID             ! Chartfield subrecord
BDDB.PRODUCT            ! Chartfield subrecord
BDDB.BUSINESS_UNIT_PC   ! Chartfield subrecord
BDDB.PROJECT_ID         ! Chartfield subrecord
BDDB.AFFILIATE          ! Chartfield subrecord
BDDB.ACTIVITY_ID        ! Chartfield subrecord
BDDB.RESOURCE_TYPE      ! Chartfield subrecord
BDDB.FUND_CODE          ! Chartfield subrecord
BDDB.PROGRAM_CODE       ! Chartfield subrecord
BDDB.CLASS_FLD          ! Chartfield subrecord
BDDB.BUDGET_REF         ! Chartfield subrecord
BDDB.CHARTFIELD1        ! Chartfield subrecord
BDDB.CHARTFIELD2        ! Chartfield subrecord
BDDB.CHARTFIELD3        ! Chartfield subrecord
BDDB.AFFILIATE_INTRA1   ! Chartfield subrecord
BDDB.AFFILIATE_INTRA2   ! Chartfield subrecord
BDPB.BUSINESS_UNIT
BDPB.POSITION_NBR
BDPB.POSN_STATUS
BDPB.HEADCOUNT
BDPB.BUSINESS_UNIT_HR
BDPB.SPREADTYPE
BDPB.SPREAD_TEMPLATE
BDPB.EXISTING_POSN_FLG
BDPB.BD_UPDATE_FLAG

BDJB.EFFDT
BDJB.EFFSEQ
BDJB.EMPL_STATUS
BDJB.ACTION
BDJB.JOBCODE
BDJB.REASON_CD
BDJB.LOCATION
BDJB.STD_HOURS
BDJB.FTE
BDJB.REG_TEMP
BDJB.FULL_PART_TIME
BDJB.ANNUAL_SALARY
BDJB.CURRENCY_CD
BDJB.SAL_ADMIN_PLAN
BDJB.GRADE
BDJB.STEP
BDJB.BD_UPDATE_FLAG

BDDB.COMPENSATION_IND
BDDB.BD_SEQ_NBR
BDDB.PERCENTAGE
BDDB.AMOUNT
BDDB.PLAN_TYPE
BDDB.CURRENCY_CD
BDDB.BD_UPDATE_FLAG

WRKB.FTE

   let $Cur_SetID             = rtrim(&WRKB.SETID_DEPT,' ')
   let $Cur_DeptID            = rtrim(&WRKB.DEPTID,' ')
   let $Cur_Position_Pool_ID  = rtrim(&WRKB.POSITION_POOL_ID,' ')
   let $Cur_Position_Nbr      = rtrim(&BDPB.POSITION_NBR_HR,' ')
   let $Cur_EmplID            = rtrim(&BDJB.EMPLID,' ')

   let $Cur_SetID             = nvl($Cur_SetID,' ')
   let $Cur_DeptID            = nvl($Cur_DeptID,' ')
   let $Cur_Position_Pool_ID  = nvl($Cur_Position_Pool_ID,' ')
   let $Cur_Position_Nbr      = nvl($Cur_Position_Nbr,' ')
   let $Cur_EmplID            = nvl($Cur_EmplID,' ')

   let #Cur_Empl_Rcd          = &BDJB.EMPL_RCD
   let $Cur_Effdt             = &WRKB.EFFDT

   let #Cur_Budget_Amt        = &BDDB.AMOUNT
   let #Cur_Budget_Pct        = &BDDB.PERCENTAGE
   let #Cur_Budget_FTE        = &WRKB.FTE

   !**  Move chart fields to WS fields for search routine.
   let $Bdd_Account          = &BDDB.ACCOUNT
   let $Bdd_Altacct          = &BDDB.ALTACCT
   let $Bdd_Operating_Unit   = &BDDB.OPERATING_UNIT
   let $Bdd_Deptid           = &BDDB.DEPTID
   let $Bdd_Product          = &BDDB.PRODUCT
   let $Bdd_Business_Unit_PC = ' '
   let $Bdd_Project_ID       = &BDDB.PROJECT_ID
   let $Bdd_Affiliate        = &BDDB.AFFILIATE
   let $Bdd_Activity_ID      = ' '
   let $Bdd_Resource_Type    = ' '
   let $Bdd_Fund_Code        = &BDDB.FUND_CODE
   let $Bdd_Program_Code     = &BDDB.PROGRAM_CODE
   let $Bdd_Class_Fld        = &BDDB.CLASS_FLD
   let $Bdd_Budget_Ref       = &BDDB.BUDGET_REF
   let $Bdd_Chartfield1      = &BDDB.CHARTFIELD1
   let $Bdd_Chartfield2      = &BDDB.CHARTFIELD2
   let $Bdd_Chartfield3      = &BDDB.CHARTFIELD3
   let $Bdd_Affiliate_intra1 = &BDDB.AFFILIATE_INTRA1
   let $Bdd_Affiliate_intra2 = &BDDB.AFFILIATE_INTRA2
   let $Bdd_Budget_Period    = ' '
   let $Compensation_ind     = &BDDB.COMPENSATION_IND

   do FETCH-ACCT-CODE

   if #First_Pass
      let #First_Pass = 0
      let $Save_SetID            = $Cur_SetID
      let $Save_DeptID           = $Cur_DeptID
      let $Save_Position_Pool_ID = $Cur_Position_Pool_ID
      let $Save_Position_Nbr     = $Cur_Position_Nbr
      let $Save_Emplid           = $Cur_EmplID
      let #Save_Empl_Rcd         = #Cur_Empl_Rcd
      let $Save_Effdt            = $Cur_Effdt
      let $Save_Acct_Cd          = $Cur_Acct_Cd
      let #Dept_CurSeq           = 1
      let #Pool_CurSeq           = 1
      let #Posn_CurSeq           = 1
      let #Appt_CurSeq           = 1

      do SETUP-NEW-DEPT
   end-if

   if $Cur_SetID  <> $Save_SetID
   or ($Cur_SetID  = $Save_SetID and $Cur_DeptID <> $Save_DeptID)
      do CONTROL-BREAK-DEPT
      move 0 to #Processing_Effdt
   else
      if $Cur_Position_Pool_ID <> $Save_Position_Pool_ID
         do CONTROL-BREAK-POOL
         move 0 to #Processing_Effdt
      else

         if $Cur_Position_Nbr <> $Save_Position_Nbr

            do CONTROL-BREAK-POSN
            move 0 to #Processing_Effdt
         else
            if ($Cur_EmplID <> $Save_EmplID
            or (($Cur_EmplID = $Save_EmplID and #Cur_Empl_Rcd <> #Save_Empl_Rcd) and
                $Cur_EmplID <> ' ')) and $Prm_Budget_Level_indc = 'A'

               do CONTROL-BREAK-APPT
               move 0 to #Processing_Effdt
            else

               if $Cur_Acct_Cd <> $Save_Acct_Cd

                  do CONTROL-BREAK-ACCT

               else

                  do NO-CONTROL-BREAK
               end-if
            end-if
         end-if
      end-if
   end-if


FROM PS_BD_POSITION_TBL BDPB
   , PS_BD_JOB_TBL BDJB
   , PS_BD_DISTR_TBL BDDB
   , PS_BD_POS_POOL_WRK WRKB
WHERE BDPB.BUSINESS_UNIT = BDJB.BUSINESS_UNIT
  AND BDPB.BUSINESS_UNIT = BDDB.BUSINESS_UNIT
  AND BDPB.BUSINESS_UNIT = WRKB.BUSINESS_UNIT_BD

  AND BDPB.POSITION_NBR  = BDJB.POSITION_NBR
  AND BDPB.POSITION_NBR  = BDDB.POSITION_NBR
  AND BDPB.POSITION_NBR  = WRKB.POSITION_NBR

  AND BDJB.EMPLID        = BDDB.EMPLID
  AND BDJB.EMPLID        = WRKB.EMPLID

  AND BDJB.EMPL_RCD      = BDDB.EMPL_RCD
  AND BDJB.EMPL_RCD      = WRKB.EMPL_RCD

  AND BDJB.EFFDT         = BDDB.EFFDT
  AND BDJB.EFFDT         = WRKB.EFFDT

  AND BDPB.EXISTING_POSN_FLG = 'Y'
  AND BDDB.COMPENSATION_IND  = 'S'

ORDER BY [$order_by]

end-SELECT

   if not #First_Pass
      move 1 to #Last_Pass
      do CONTROL-BREAK-DEPT
   end-if

end-procedure PROCESS-BUDGET-TABLE

!***********************************************************************
! Procedure: CONTROL-BREAK-DEPT                                        *
! Descr:     Performs all required processing when the value of the    *
!            input DeptID changes.  Processing performed is controlled *
!            by the value of the parameter BUD_LEVELS_OPTION           *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-DEPT

   do CONTROL-BREAK-POOL

   if $Save_DeptID <> ' '

      do CREATE-DEPT-RECORDS

      move 'D' to $Out_Budget_Level_Indc
      move ' ' to $Out_Position_Pool_ID
      move ' ' to $Out_Position_Nbr
      move ' ' to $Out_EmplID
      move  0  to #Out_Empl_Rcd
      move $Prm_FromDate to $Out_Effdt
      get #Out_Bdgt_Cap from Dept_Bdgt_Array (0) Dept_Ay_Bdgt_Amt

      do INSERT-BDGT-CAP

      do WRITE-DEPT-EARN-DETAIL

      do INSERT-DED-TAX-BDGT

   end-if

   move $Save_DeptID to $Trans_DeptID
   move $Cur_DeptID to $Save_DeptID
   move $Save_SetId to $Trans_SetID
   move $Cur_SetId to $Save_SetId

   move $Cur_Effdt to $Save_Effdt
   move 1 to #Dept_CurSeq
   move 0 to #Processing_Effdt

   if not #Last_Pass

!     do PROCESS-TRANSACTION

      do SETUP-NEW-DEPT

   end-if

End-Procedure CONTROL-BREAK-DEPT

!***********************************************************************
! Procedure: SETUP-NEW-DEPT                                            *
! Descr:     Performs all initialization steps for a new department    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!            CONTROL-BREAK-DEPT                                        *
!***********************************************************************
Begin-Procedure SETUP-NEW-DEPT

   let #Dept_Sal_Total    = 0
   let #Dept_BudAmt_Total = 0
   let #ErnCap            = 0
   let #Dept_FTE_C_Total  = 0
   let #Dept_FTE_T_Total  = 0
   let #Dept_FTE_U_Total  = 0

   !display 'Processing SetID/DeptID = ' noline
   !display $Cur_SetID                   noline
   !display ' / '                        noline
   !display $Cur_DeptID

   do INITIALIZE-ARRAY-DEPT

End-Procedure SETUP-NEW-DEPT

!***********************************************************************
! Procedure: CONTROL-BREAK-POOL                                        *
! Descr:     Performs all required processing when the value of the    *
!            input Position Pool ID changes.  Processing performed is  *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!            CONTROL-BREAK-DEPT                                        *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-POOL

   do CONTROL-BREAK-POSN

   if $Prm_Budget_Level_Indc = 'O'
      if $Save_Position_Pool_ID <> ' '
      and $Save_Position_Pool_ID <> '@@@'

         move 'O' to $Out_Budget_Level_Indc
         move $Save_Position_Pool_ID to $Out_Position_Pool_ID
         move ' ' to $Out_Position_Nbr
         move ' ' to $Out_EmplID
         move 0 to #Out_Empl_Rcd
         move $Prm_FromDate to $Out_Effdt
         get #Out_Bdgt_Cap from Pool_Bdgt_Array (0) Pool_Ay_Bdgt_Amt

         do INSERT-BDGT-CAP

         do WRITE-POOL-EARN-DETAIL

         do INSERT-DED-TAX-BDGT

      end-if
   end-if

   do INITIALIZE-ARRAY-POOL

   move $Cur_Position_Pool_ID to $Save_Position_Pool_ID
   move $Cur_Effdt to $Save_Effdt
   move 1 to #Pool_CurSeq
   move 0 to #Processing_Effdt

End-Procedure CONTROL-BREAK-POOL

!***********************************************************************
! Procedure: CONTROL-BREAK-POSN                                        *
! Descr:     Performs all required processing when the value of the    *
!            input Position Number changes.  Processing performed is   *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!            CONTROL-BREAK-POOL                                        *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-POSN

   do CONTROL-BREAK-APPT

   if $Prm_Budget_Level_Indc = 'P'
      if $Save_Position_Nbr <> ' '
      and $Save_Position_Pool_ID <> '@@@'

         move 'P' to $Out_Budget_Level_Indc
         move ' ' to $Out_Position_Pool_ID
         move $Save_Position_Nbr to $Out_Position_Nbr
         move ' ' to $Out_EmplID
         move 0 to #Out_Empl_Rcd
         move #Posn_CurSeq to #Out_CurSeq
         if #Processing_Effdt
            move $Save_Effdt to $Out_Effdt
         else
            move $Prm_FromDate to $Out_Effdt
         end-if
         move 100.0 to #Out_BudPct
         move 0.0 to #Out_BudAmt
         move $Max_AcctCd_Posn to $Out_Acct_Cd

         let $Called_From = 'CONTROL_BREAK_POSN'
         do INSERT-EARN-LEVEL

         get #Out_Bdgt_Cap from Posn_Bdgt_Array (0) Posn_Ay_Bdgt_Amt

         do INSERT-BDGT-CAP

         do INSERT-DED-TAX-BDGT

      end-if
   end-if

   do INITIALIZE-ARRAY-POSN

   move $Cur_Position_Nbr to $Save_Position_Nbr
   move $Cur_Effdt to $Save_Effdt
   move #Cur_Budget_FTE to #Posn_BudFTE
   move ' ' to $Max_AcctCd_Posn
   move 0.0 to #Max_BudAmt_Posn
   move 1 to #Posn_CurSeq

End-Procedure CONTROL-BREAK-POSN

!***********************************************************************
! Procedure: CONTROL-BREAK-APPT                                        *
! Descr:     Performs all required processing when the value of the    *
!            input EmplID or Rcd# changes.  Processing performed is    *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!            CONTROL-BREAK-POSN                                        *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-APPT

   do CONTROL-BREAK-ACCT

   if $Prm_Budget_Level_Indc = 'A'
      if $Save_Emplid <> ' '

         move 'A' to $Out_Budget_Level_Indc
         move ' ' to $Out_Position_Pool_ID
         move ' ' to $Out_Position_Nbr
         move ' ' to $Out_GLPayType
         move $Save_EmplID to $Out_EmplID
         move #Save_Empl_Rcd to #Out_Empl_Rcd
         if #Processing_Effdt
            move $Save_Effdt to $Out_Effdt
         else
            move $Prm_FromDate to $Out_Effdt
         end-if
         move #Appt_CurSeq to #Out_CurSeq
         move 100.0 to #Out_BudPct
         move 0.0 to #Out_BudAmt
         move $Max_AcctCd_Appt to $Out_Acct_Cd

         let $Called_From = 'CONTROL_BREAK_APPT'
         do INSERT-EARN-LEVEL

         get #Out_Bdgt_Cap from Appt_Bdgt_Array (0) Appt_Ay_Bdgt_Amt

         do INSERT-BDGT-CAP

         do INSERT-DED-TAX-BDGT

      end-if
   end-if

   do INITIALIZE-ARRAY-APPT

   move $Cur_EmplID to $Save_EmplID
   move #Cur_Empl_Rcd to #Save_Empl_Rcd
   move $Cur_Effdt to $Save_Effdt
   move #Cur_Budget_FTE to #Appt_BudFTE
   move ' ' to $Max_AcctCd_Appt
   move 0.0 to #Max_BudAmt_Appt
   move 1 to #Appt_CurSeq

End-Procedure CONTROL-BREAK-APPT

!***********************************************************************
! Procedure: CONTROL-BREAK-EFFDT                                       *
! Descr:     Performs all required processing when the value of the    *
!            Effective Date changes.  When Pool or Department is set   *
!            as the roll-up level, all future-dated rows must be       *
!            disregarded.  Appointment or Position roll-ups will       *
!            result in a new effective-dated budget being built.       *
!                                                                      *
! Called by: NOT USED ANYMORE                                          *
!                                                                      *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-EFFDT

   evaluate $Prm_Budget_Level_Indc
      when = 'D'                            !Department Budget
         if $Cur_Effdt <> $Save_Effdt
            move $Cur_Effdt to $Dump_Effdt
         end-if

         break
      when = 'O'                            !Position Pool Budgets
         if $Cur_Effdt <> $Save_Effdt
            move $Cur_Effdt to $Dump_Effdt
         end-if

         break
      when = 'P'

         do CONTROL-BREAK-POSN
         move 1 to #Processing_Effdt

         break
      when = 'A'

         do CONTROL-BREAK-APPT
         move 1 to #Processing_Effdt

         break
      when-other
         display 'Problem with paremeter: Budget Rollup Indicator'
         display 'Value is set to '        noline
         display $Prm_Budget_Level_Indc    noline
         display ': Value is invalid'

         break
   end-evaluate

End-Procedure CONTROL-BREAK-EFFDT

!***********************************************************************
! Procedure: CONTROL-BREAK-ACCT                                        *
! Descr:     Performs all required processing when the value of any    *
!            input Chart Field changes.  Processing performed is       *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-ACCT

   evaluate $Prm_Budget_Level_Indc

      when = 'D'                            !Department Budget
         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = #Acct_BudFTE
         let $Array_Acct_Cd = $Save_Acct_Cd
         let $Array_Plan_Type = ' '

         do STORE-ARRAY-DEPT

         break
      when = 'O'                            !Position Pool Budgets
         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let $Array_Acct_Cd = $Save_Acct_Cd
         let $Array_Plan_Type = ' '

         do STORE-ARRAY-POOL

         do STORE-ARRAY-DEPT

         break
      when = 'P'                            !Position Budgets
         if $Save_Position_Nbr <> ' '
         and $Save_Position_Pool_ID <> '@@@'
            let $Out_Position_Pool_ID = ' '
            let $Out_Position_Nbr = $Save_Position_Nbr
            let $Out_EmplID = ' '
            let #Out_Empl_Rcd = 0
            if #Processing_Effdt
               move $Save_Effdt to $Out_Effdt
            else
               move $Prm_FromDate to $Out_Effdt
            end-if
            let #Out_CurSeq = #Posn_CurSeq
            let $Out_GLPayType = ' '
            let #Out_BudPct = 0
            if #Acct_BudAmt > #Max_BudAmt_Posn
               let $Out_Acct_Cd = $Max_AcctCd_Posn
               let #Out_BudAmt = #Max_BudAmt_Posn
               let $Max_AcctCd_Posn = $Save_Acct_Cd
               let #Max_BudAmt_Posn = #Acct_BudAmt
               let #Max_BudPct_Posn = #Acct_BudPct
            else
               let $Out_Acct_Cd = $Save_Acct_Cd
               let #Out_BudAmt = #Acct_BudAmt
            end-if

            if #Out_BudAmt <> 0.00
               let $Called_From = 'CONTROL_BREAK_ACCT: Level = P'
               do INSERT-EARN-LEVEL
               add 1 to #Posn_CurSeq
            end-if

         end-if

         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = #Acct_BudFTE
         let $Array_Acct_Cd = $Save_Acct_Cd
         let $Array_Plan_Type = ' '

         do STORE-ARRAY-POSN

         do STORE-ARRAY-DEPT

         break
      when = 'A'                            !Appointment Budgets
         if $Save_Emplid <> ' '
            let $Out_Position_Pool_ID = ' '
            let $Out_Position_Nbr = ' '
            let $Out_EmplID = $Save_EmplID
            let #Out_Empl_Rcd = #Save_Empl_Rcd
            if #Processing_Effdt
               move $Save_Effdt to $Out_Effdt
            else
               move $Prm_FromDate to $Out_Effdt
            end-if
            let #Out_CurSeq = #Appt_CurSeq
            let $Out_GLPayType = ' '
            let #Out_BudPct = 0.0
            if #Acct_BudAmt > #Max_BudAmt_Appt
               let $Out_Acct_Cd = $Max_AcctCd_Appt
               let #Out_BudAmt = #Max_BudAmt_Appt
               let $Max_AcctCd_Appt = $Save_Acct_Cd
               let #Max_BudAmt_Appt = #Acct_BudAmt
               let #Max_BudPct_Appt = #Acct_BudPct
            else
               let $Out_Acct_Cd = $Save_Acct_Cd
               let #Out_BudAmt = #Acct_BudAmt
            end-if

            if #Out_BudAmt <> 0.00
               let $Called_From = 'CONTROL_BREAK_ACCT: Level = A'
               do INSERT-EARN-LEVEL
               add 1 to #Appt_CurSeq
            end-if

         end-if
         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = #Acct_BudFTE
         let $Array_Acct_Cd = $Save_Acct_Cd
         let $Array_Plan_Type = ' '

         do STORE-ARRAY-APPT

         do STORE-ARRAY-DEPT

         break
      when-other
         display 'Problem with paremeter: Budget Rollup Indicator'
         display 'Value is set to '        noline
         display $Prm_Budget_Level_Indc    noline
         display ': Value is invalid'

         break
   end-evaluate

   move $Cur_Acct_Cd to $Save_Acct_Cd
   move #Cur_Budget_Amt to #Acct_BudAmt
   move #Cur_Budget_Pct to #Acct_BudPct

End-Procedure CONTROL-BREAK-ACCT

!***********************************************************************
! Procedure: NO-CONTROL-BREAK                                          *
! Descr:     Performs accumulation of budget data at the Chart Field   *
!            level when no control breaks occur at all.                *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE                                      *
!***********************************************************************
Begin-Procedure NO-CONTROL-BREAK

   add #Cur_Budget_Amt to #Acct_BudAmt
   add #Cur_Budget_Pct to #Acct_BudPct

End-Procedure NO-CONTROL-BREAK

!***********************************************************************
! Procedure: CREATE-DEPT-RECORDS                                       *
! Descr:     Creates the "header" records for a department budget.     *
!            These include the FTE cap, Effdt record, and Date record  *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!***********************************************************************
Begin-Procedure CREATE-DEPT-RECORDS

   do GET-PRIOR-YEAR-BDGT

   get #Dept_FTE_Total from Dept_Bdgt_Array(0) Dept_Ay_Bdgt_FTE

   let $SQL-Statement = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET_DT'

begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET_DT (
  SETID,
  DEPTID,
  FISCAL_YEAR,
  BUDGET_BEGIN_DT,
  BUDGET_END_DT,
  BUDGET_CAP_INDC,
  DEPT_OFFSET_GRP,
  DEFAULT_FUND_OPTN,
  ACCT_CD_DED,
  FUND_END_DT_DED,
  ACCT_CD_TAX,
  FUND_END_DT_TAX,
  HP_FRINGE_GROUP,
  HP_ERN_ACCT,
  HP_DED_ACCT,
  HP_TAX_ACCT,
  HP_CTX_ACCT)
VALUES (
  $Save_SetID,
  $Save_DeptID,
  #Prm_Fiscal_Year,
  $Prm_FromDate,
  $Prm_ThruDate,
  'O',
  $Out_Offset_Grp,
  'A',
  ' ',
  null,
  ' ',
  null,
  $Prm_Fringe_Group,
  $Prm_Ern_Acct,
  $Prm_Ded_Acct,
  $Prm_Tax_Acct,
  $Prm_Tax_Acct)
end-sql

   add 1 to #Trans_Cnt

let $SQL-Statement = 'BUD008.SQR, INSERT, PS_DEPTBDGT_SUSPNS'

begin-sql on-error=SQL-Error                     !HP999 retro dist
INSERT INTO PS_DEPTBDGT_SUSPNS (                 !HP999 retro dist
  SETID,                                         !HP999 retro dist
  DEPTID,
  FISCAL_YEAR,
  HP_ACCT_CD_SUSPNS,
  EFFDT,
  EFFSEQ,
  EFF_STATUS)
VALUES (
  $Save_SetID,
  $Save_DeptID,
  #Prm_Fiscal_Year,
  ' ',
  $Prm_FromDate,
  0,
  'A')
end-sql                                          !HP999 retro dist



   ! produce message for department and setid not having assigned suspense
   display '<SETID> --->' noline
   display $Save_Setid  noline
   display ' <DEPTID> --->' noline
   display $Save_DeptID noline
   display  ' <FISCAL YEAR>' noline
   display  #Prm_Fiscal_Year
   display '----> No suspense account code assigned use Load Suspense acct code function'
   display ' '


begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_FTE_EFFDT (
  SETID,
  DEPTID,
  FISCAL_YEAR,
  EFFDT,
  EFF_STATUS)
VALUES (
  $Save_SetID,
  $Save_DeptID,
  #Prm_Fiscal_Year,
  $Prm_FromDate,
  'A')
end-sql

   add 1 to #Trans_Cnt

   let $SQL-Statement = 'BUD008.SQR, INSERT, PS_DEPT_FTE_CAP'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_FTE_CAP (
  SETID,
  DEPTID,
  FISCAL_YEAR,
  EFFDT,
  CLASS_INDC,
  FTE_CAP)
VALUES (
  $Save_SetID,
  $Save_DeptID,
  #Prm_Fiscal_Year,
  $Prm_FromDate,
  'B',
  #Dept_FTE_Total)
end-sql

   add 1 to #Trans_Cnt

End-Procedure CREATE-DEPT-RECORDS

!***********************************************************************
! Procedure: GET-PRIOR-YEAR-BDGT                                       *
! Descr:     This procedure will read necessary information for the    *
!            department being processed from the previous years Dept.  *
!            budget.  If not found, it will insert the defaults.       *
!                                                                      *
! Called by: CREATE-DEPT-RECORDS                                       *
!***********************************************************************
Begin-Procedure GET-PRIOR-YEAR-BDGT

   let #Out_Fiscal_Year = #Prm_Fiscal_Year - 1
   let #Budget_Not_Found = 1

begin-SELECT
BPYR.BUDGET_CAP_INDC
BPYR.DEPT_OFFSET_GRP
BPYR.ACCT_CD_DED
BPYR.FUND_END_DT_DED
BPYR.ACCT_CD_TAX
BPYR.FUND_END_DT_TAX

   let #Budget_Not_Found = 0

   let $Out_Offset_Grp = rtrim(&BPYR.DEPT_OFFSET_GRP,' ')
   if $Out_Offset_Grp = ''
      let $Out_Offset_Grp = ' '
   end-if

FROM PS_DEPT_BUDGET_DT BPYR
WHERE BPYR.SETID = $Save_SetID
  AND BPYR.DEPTID = $Save_DeptID
  AND BPYR.FISCAL_YEAR =
            (SELECT MAX(BY1.FISCAL_YEAR)
               FROM PS_DEPT_BUDGET_DT BY1
              WHERE BY1.SETID = BPYR.SETID
                AND BY1.DEPTID = BPYR.DEPTID
                AND BY1.FISCAL_YEAR < #Prm_Fiscal_Year)
end-SELECT

   if #Budget_Not_Found
      if $Prm_Offset_Grp = ''
         move ' ' to $Out_Offset_Grp
      else
         move $Prm_Offset_Grp to $Out_Offset_Grp
      end-if
   end-if

End-Procedure GET-PRIOR-YEAR-BDGT


!***********************************************************************
! CAN-BUDGET-BE-DELETED   This procedure determines if the budget can  *
! be deleted.  If the used by distribution flag is on for any earnings *
! deduction or tax this department the department can not be deleted   *
! or processed.
!***********************************************************************
Begin-Procedure Can-Budget-be-Deleted

!HP999 RETRO DISTRUBUTION if earnings deductions or taxes contain
!data used for distribution the budget can not be cleaned

let $budget_cleaned = 'Y'                                !hp999 retro

Begin-SELECT DISTINCT
EARN.DEPTID

   let $budget_cleaned = 'N'

FROM PS_DEPT_BUDGET_ERN EARN
WHERE SETID        = &CAN_DEP_BUD.SETID
   AND DEPTID      = &CAN_DEP_BUD.DEPTID
   AND FISCAL_YEAR = &CAN_DEP_BUD.FISCAL_YEAR
   AND EFFDT       = &CAN_DEP_BUD.EFFDT
   AND HP_USED_DISTRIBUTN = 'Y'

End-SELECT

Begin-SELECT DISTINCT
DEDN.DEPTID

   let $budget_cleaned = 'N'

FROM PS_DEPT_BUDGET_DED DEDN
WHERE SETID        = &CAN_DEP_BUD.SETID
   AND DEPTID      = &CAN_DEP_BUD.DEPTID
   AND FISCAL_YEAR = &CAN_DEP_BUD.FISCAL_YEAR
   AND EFFDT       = &CAN_DEP_BUD.EFFDT
   AND HP_USED_DISTRIBUTN = 'Y'
End-SELECT

Begin-SELECT DISTINCT
TAXN.DEPTID

   let $budget_cleaned = 'N'

FROM PS_DEPT_BUDGET_TAX TAXN
WHERE SETID        = &CAN_DEP_BUD.SETID
   AND DEPTID      = &CAN_DEP_BUD.DEPTID
   AND FISCAL_YEAR = &CAN_DEP_BUD.FISCAL_YEAR
   AND EFFDT       = &CAN_DEP_BUD.EFFDT
   AND HP_USED_DISTRIBUTN = 'Y'
End-SELECT


Begin-SELECT DISTINCT
CTXN.DEPTID

   let $budget_cleaned = 'N'

FROM PS_DEPT_BUDGET_CTX CTXN
WHERE SETID        = &CAN_DEP_BUD.SETID
   AND DEPTID      = &CAN_DEP_BUD.DEPTID
   AND FISCAL_YEAR = &CAN_DEP_BUD.FISCAL_YEAR
   AND EFFDT       = &CAN_DEP_BUD.EFFDT
   AND HP_USED_DISTRIBUTN = 'Y'


End-SELECT


End-procedure Can-budget-be-deleted

!***********************************************************************
! Procedure: CLEAN-DEPT-BUDGETS                                        *
! Descr:     Empties (deletes the department budget tables for a given *
!            SetID, Department, Fiscal Year, and Budget Level.  The    *
!            run control will confirm this action with the user.       *
!                                                                      *
! Called by: SETUP-NEW-DEPT                                            *
!***********************************************************************
Begin-Procedure CLEAN-DEPT-BUDGETS


Begin-SELECT DISTINCT
CLEAN_DEP_DTE.SETID_DEPT
CLEAN_DEP_DTE.DEPTID

   do Delete-Dept-Budget-Dt
   do Delete-Dept-Fte-Cap

FROM PS_BD_POS_POOL_WRK CLEAN_DEP_DTE
end-SELECT

Begin-SELECT DISTINCT
CLEAN_DEP_BUD.SETID
CLEAN_DEP_BUD.DEPTID
CLEAN_DEP_BUD.FISCAL_YEAR
CLEAN_DEP_BUD.POSITION_POOL_ID
CLEAN_DEP_BUD.SETID_JOBCODE
CLEAN_DEP_BUD.JOBCODE
CLEAN_DEP_BUD.POSITION_NBR
CLEAN_DEP_BUD.EMPLID
CLEAN_DEP_BUD.EMPL_RCD
CLEAN_DEP_BUD.EFFDT

   do Delete-Dept-Budget-Ern
   do Delete-Dept-Budget-Tax
   do Delete-Dept-Budget-Ctx
   do Delete-Dept-Budget-Ded

FROM PS_DEPT_BUDGET     CLEAN_DEP_BUD
   , PS_BD_POS_POOL_WRK CLEAN_DEP_WRK
WHERE CLEAN_DEP_BUD.SETID  = CLEAN_DEP_WRK.SETID_DEPT
  AND CLEAN_DEP_BUD.DEPTID = CLEAN_DEP_WRK.DEPTID
  AND CLEAN_DEP_BUD.FISCAL_YEAR = #Prm_Fiscal_Year
  AND (CLEAN_DEP_BUD.BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
   OR  CLEAN_DEP_BUD.BUDGET_LEVEL_INDC = 'D')
end-SELECT

   do COMMIT-TRANSACTION

   do CLEAN-CUR-YR-DEPT-BUDGET

End-Procedure CLEAN-DEPT-BUDGETS

!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET-DT                                     *
! Descr:     Empties (deletes) the department budget date tables for a *
!            given SetID, Department, Fiscal Year, and Budget Level.   *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET-DT

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_DT'

begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_DT
WHERE SETID         = &CLEAN_DEP_DTE.SETID_DEPT
  AND DEPTID        = &CLEAN_DEP_DTE.DEPTID
  AND FISCAL_YEAR   = #Prm_Fiscal_Year
end-sql


let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPTBDGT_SUSPNS'

begin-sql on-error=SQL-Error                                   !HPRET
DELETE FROM PS_DEPTBDGT_SUSPNS                                 !HPRET
WHERE SETID         = &CLEAN_DEP_DTE.SETID_DEPT                !HPRET
  AND DEPTID        = &CLEAN_DEP_DTE.DEPTID                    !HPRET
  AND FISCAL_YEAR   = #Prm_Fiscal_Year                         !HPRET
end-sql                                                        !HPRET



End-Procedure DELETE-DEPT-BUDGET-DT

!***********************************************************************
! Procedure: DELETE-DEPT-FTE-CAP                                       *
! Descr:     Empties (deletes) the department budget FTE cap table for *
!            a given SetID, Department, Fiscal Year, and Budget Level. *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-FTE-CAP

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_FTE_EFFDT'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_FTE_EFFDT
WHERE SETID         = &CLEAN_DEP_DTE.SETID_DEPT
  AND DEPTID        = &CLEAN_DEP_DTE.DEPTID
  AND FISCAL_YEAR   = #Prm_Fiscal_Year
end-sql

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_FTE_CAP'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_FTE_CAP
WHERE SETID       = &CLEAN_DEP_DTE.SETID_DEPT
  AND DEPTID      = &CLEAN_DEP_DTE.DEPTID
  AND FISCAL_YEAR = #Prm_Fiscal_Year
end-sql
End-Procedure DELETE-DEPT-FTE-CAP

!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET-ERN                                    *
! Descr:     Empties (deletes) the department budget earnings tables   *
!            for a given SetID, Department, Fiscal Year, and Budget    *
!            Level.                                                    *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET-ERN

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_ERN'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_ERN
WHERE SETID            = &CLEAN_DEP_BUD.SETID
  AND DEPTID           = &CLEAN_DEP_BUD.DEPTID
  AND POSITION_POOL_ID = &CLEAN_DEP_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CLEAN_DEP_BUD.SETID_JOBCODE
  AND JOBCODE          = &CLEAN_DEP_BUD.JOBCODE
  AND POSITION_NBR     = &CLEAN_DEP_BUD.POSITION_NBR
  AND EMPLID           = &CLEAN_DEP_BUD.EMPLID
  AND EMPL_RCD         = &CLEAN_DEP_BUD.EMPL_RCD
  AND EFFDT            = &CLEAN_DEP_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-sql
End-Procedure DELETE-DEPT-BUDGET-ERN

!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET-TAX                                    *
! Descr:     Empties (deletes) the department budget tax tables        *
!            for a given SetID, Department, Fiscal Year, and Budget    *
!            Level.                                                    *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET-TAX

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_TAX'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_TAX
WHERE SETID            = &CLEAN_DEP_BUD.SETID
  AND DEPTID           = &CLEAN_DEP_BUD.DEPTID
  AND POSITION_POOL_ID = &CLEAN_DEP_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CLEAN_DEP_BUD.SETID_JOBCODE
  AND JOBCODE          = &CLEAN_DEP_BUD.JOBCODE
  AND POSITION_NBR     = &CLEAN_DEP_BUD.POSITION_NBR
  AND EMPLID           = &CLEAN_DEP_BUD.EMPLID
  AND EMPL_RCD         = &CLEAN_DEP_BUD.EMPL_RCD
  AND EFFDT            = &CLEAN_DEP_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-sql
End-Procedure DELETE-DEPT-BUDGET-TAX

!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET-CTX                                    *
! Descr:     Empties (deletes) the department budget Cdn. Tax tables   *
!            for a given SetID, Department, Fiscal Year, and Budget    *
!            Level.                                                    *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET-CTX

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_CTX'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_CTX
WHERE SETID            = &CLEAN_DEP_BUD.SETID
  AND DEPTID           = &CLEAN_DEP_BUD.DEPTID
  AND POSITION_POOL_ID = &CLEAN_DEP_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CLEAN_DEP_BUD.SETID_JOBCODE
  AND JOBCODE          = &CLEAN_DEP_BUD.JOBCODE
  AND POSITION_NBR     = &CLEAN_DEP_BUD.POSITION_NBR
  AND EMPLID           = &CLEAN_DEP_BUD.EMPLID
  AND EMPL_RCD         = &CLEAN_DEP_BUD.EMPL_RCD
  AND EFFDT            = &CLEAN_DEP_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-sql
End-Procedure DELETE-DEPT-BUDGET-CTX

!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET-DED                                    *
! Descr:     Empties (deletes) the department budget ded'ns tables     *
!            for a given SetID, Department, Fiscal Year, and Budget    *
!            Level.                                                    *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET-DED

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_DED'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_DED
WHERE SETID            = &CLEAN_DEP_BUD.SETID
  AND DEPTID           = &CLEAN_DEP_BUD.DEPTID
  AND POSITION_POOL_ID = &CLEAN_DEP_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CLEAN_DEP_BUD.SETID_JOBCODE
  AND JOBCODE          = &CLEAN_DEP_BUD.JOBCODE
  AND POSITION_NBR     = &CLEAN_DEP_BUD.POSITION_NBR
  AND EMPLID           = &CLEAN_DEP_BUD.EMPLID
  AND EMPL_RCD         = &CLEAN_DEP_BUD.EMPL_RCD
  AND EFFDT            = &CLEAN_DEP_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-sql
End-Procedure DELETE-DEPT-BUDGET-DED

!***********************************************************************
! Procedure: CLEAN-CUR-YR-DEPT-BUDGET                                  *
! Descr:     Empties (deletes) the department budget date tables for a *
!            given SetID, Department, Fiscal Year, and Budget Level.   *
!                                                                      *
! Called by: CLEAN-DEPT-BUDGETS                                        *
!***********************************************************************
Begin-Procedure CLEAN-CUR-YR-DEPT-BUDGET

let $SQL-STATEMENT = 'BUD008.SQR, SELECT, PS_DEPT_BUDGET'
Begin-SELECT DISTINCT on-error=SQL-Error
CUR_YR_DEP_BUD.SETID
CUR_YR_DEP_BUD.DEPTID
CUR_YR_DEP_BUD.POSITION_POOL_ID
CUR_YR_DEP_BUD.SETID_JOBCODE
CUR_YR_DEP_BUD.JOBCODE
CUR_YR_DEP_BUD.POSITION_NBR
CUR_YR_DEP_BUD.EMPLID
CUR_YR_DEP_BUD.EMPL_RCD
CUR_YR_DEP_BUD.EFFDT

  do DELETE-DEPT-BUDGET

FROM PS_DEPT_BUDGET CUR_YR_DEP_BUD
   , PS_BD_POS_POOL_WRK CLEAN_DEP_WRK2
WHERE CUR_YR_DEP_BUD.DEPTID = CLEAN_DEP_WRK2.DEPTID
  AND CUR_YR_DEP_BUD.SETID  = CLEAN_DEP_WRK2.SETID_DEPT
  AND CUR_YR_DEP_BUD.FISCAL_YEAR = #Prm_Fiscal_Year
  AND (CUR_YR_DEP_BUD.BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
   OR  CUR_YR_DEP_BUD.BUDGET_LEVEL_INDC = 'D')
  AND NOT EXISTS
      (SELECT 'X' FROM PS_DEPT_BUDGET_DT DBD
        WHERE DBD.SETID        = CUR_YR_DEP_BUD.SETID
          AND DBD.DEPTID       = CUR_YR_DEP_BUD.DEPTID
          AND DBD.FISCAL_YEAR  = #Prm_Fiscal_Year)
End-Select

        do Commit-Transaction

End-Procedure CLEAN-CUR-YR-DEPT-BUDGET
!
!***********************************************************************
! Procedure: DELETE-DEPT-BUDGET                                        *
! Descr:     Empties (deletes) the department budget tables for a      *
!            given SetID, Department, Fiscal Year, and Budget Level.   *
!                                                                      *
! Called by: CLEAN-CUR-YR-DEPT-BUDGET                                  *
!***********************************************************************
Begin-Procedure DELETE-DEPT-BUDGET

   let $SQL-Statement = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET'

begin-SQL on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET
WHERE SETID            = &CUR_YR_DEP_BUD.SETID
  AND DEPTID           = &CUR_YR_DEP_BUD.DEPTID
  AND POSITION_POOL_ID = &CUR_YR_DEP_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CUR_YR_DEP_BUD.SETID_JOBCODE
  AND JOBCODE          = &CUR_YR_DEP_BUD.JOBCODE
  AND POSITION_NBR     = &CUR_YR_DEP_BUD.POSITION_NBR
  AND EMPLID           = &CUR_YR_DEP_BUD.EMPLID
  AND EMPL_RCD         = &CUR_YR_DEP_BUD.EMPL_RCD
  AND EFFDT            = &CUR_YR_DEP_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-SQL
End-Procedure DELETE-DEPT-BUDGET

!***********************************************************************
! Procedure: INSERT-BDGT-CAP                                           *
! Descr:     This procedure will insert a new department budget record *
!            including the applicable budget cap amounts               *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure INSERT-BDGT-CAP

   let $SQL-STATEMENT = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET (
   SETID,
   DEPTID,
   FISCAL_YEAR,
   POSITION_POOL_ID,
   SETID_JOBCODE,
   JOBCODE,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   EFFSEQ,                                          !hp999 Retro Dist
   EFF_STATUS,
   BUDGET_LEVEL_INDC,
   CURRENCY_CD,
   OVERALL_BDGT_CAP,
   ERN_BDGT_CAP,
   DED_BDGT_CAP,
   TAX_BDGT_CAP,
   ACTION_DT )                                      !hp999 Retro Dist
VALUES (
   $Save_SetID,
   $Save_DeptID,
   #Prm_Fiscal_Year,
   $Out_Position_Pool_ID,
   ' ',
   ' ',
   $Out_Position_Nbr,
   $Out_EmplID,
   #Out_Empl_Rcd,
   $Prm_FromDate,
   0,                                               !hp999 Retro Dist
   'A',
   $Out_Budget_Level_Indc,
   $Gbl_Currency_Cd,
   #Out_Bdgt_Cap,
   0,
   0,
   0,
   {DateIn-Prefix}$asoftoday{DateIn-Suffix})        !hp999 retro )
end-sql

   add 1 to #Trans_Cnt

End-Procedure INSERT-BDGT-CAP

!***********************************************************************
! Procedure: WRITE-DEPT-EARN-DETAIL                                    *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Department break level.                     *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!***********************************************************************
Begin-Procedure WRITE-DEPT-EARN-DETAIL

   get #Dept_Tot_Dist from Dept_Bdgt_Array(0) Dept_Ay_Bdgt_Pct

   if #Dept_Tot_Dist <> 0
      let #Dist_Adj_Factor = 100 / #Dept_Tot_Dist
   else
      let #Dist_Adj_Factor = 0
   end-if

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Dept
   move 0 to #Max_Dept_Amt_Idx
   move 1 to #Dept_Idx

   while #Dept_Idx <= #Dept_Cnt
      get $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Dept_Bdgt_Array(#Dept_Idx)
          Dept_Ay_Acct_Cd
          Dept_Ay_Bdgt_Amt
          Dept_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Dept
         let #Max_Dept_Amt_Idx = #Dept_Idx
         let #Max_BudAmt_Dept = #Out_BudAmt
         let $Max_AcctCd_Dept = $Out_Acct_Cd
      end-if

      add 1 to #Dept_Idx
   end-while

   !**  Write all budget rows as amounts, except the max row found above.  Hold
   !**   it until the end, and write it as 100% (the default funding row).

   move 0 to #Array_Found
   move 1 to #Dept_Idx
   move 0 to #Out_CurSeq

   while #Dept_Idx <= #Dept_Cnt
      get $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Dept_Bdgt_Array(#Dept_Idx)
          Dept_Ay_Acct_Cd
          Dept_Ay_Bdgt_Amt
          Dept_Ay_Bdgt_Pct

      if #Dept_Idx <> #Max_Dept_Amt_Idx
   !     let #Out_BudPct = #Out_BudPct * #Dist_Adj_Factor
         let #Out_BudPct = 0
         let $Out_GLPayType = ' '

         add 1 to #Out_CurSeq

         let $Called_From = 'WRITE-DEPT-EARN-DETAIL: 1st Call'
         do INSERT-EARN-LEVEL

      end-if

      add 1 to #Dept_Idx

   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Acct_Cd = $Max_AcctCd_Dept

   add 1 to #Out_CurSeq

   let $Called_From = 'WRITE-DEPT-EARN-DETAIL: 2nd Call'
   do INSERT-EARN-LEVEL

End-Procedure WRITE-DEPT-EARN-DETAIL

!***********************************************************************
! Procedure: WRITE-POOL-EARN-DETAIL                                    *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Position_Pool break level.                  *
!                                                                      *
! Called by: CONTROL-BREAK-POOL                                        *
!***********************************************************************
Begin-Procedure WRITE-POOL-EARN-DETAIL

   get #Pool_Tot_Dist from Pool_Bdgt_Array(0) Pool_Ay_Bdgt_Pct

   if #Pool_Tot_Dist <> 0
      let #Dist_Adj_Factor = 100 / #Pool_Tot_Dist
   else
      let #Dist_Adj_Factor = 0
   end-if

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Pool
   move 0 to #Max_Pool_Amt_Idx
   move 1 to #Pool_Idx

   while #Pool_Idx <= #Pool_Cnt
      get $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Pool_Bdgt_Array(#Pool_Idx)
          Pool_Ay_Acct_Cd
          Pool_Ay_Bdgt_Amt
          Pool_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Pool
         let #Max_Pool_Amt_Idx = #Pool_Idx
         let #Max_BudAmt_Pool = #Out_BudAmt
         let $Max_AcctCd_Pool = $Out_Acct_Cd
      end-if

      add 1 to #Pool_Idx
   end-while

   !**  Write all budget rows as amounts, except the max row found above.  Hold
   !**   it until the end, and write it as 100% (the default funding row).

   move 0 to #Array_Found
   move 1 to #Pool_Idx
   move 0 to #Out_CurSeq

   while #Pool_Idx <= #Pool_Cnt
      get $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Pool_Bdgt_Array(#Pool_Idx)
          Pool_Ay_Acct_Cd
          Pool_Ay_Bdgt_Amt
          Pool_Ay_Bdgt_Pct

      if #Pool_Idx <> #Max_Pool_Amt_Idx

   !     let #Out_BudPct = #Out_BudPct * #Dist_Adj_Factor
         let #Out_BudPct = 0.0
         let $Out_GLPayType = ' '

         add 1 to #Out_CurSeq

         let $Called_From = 'WRITE-POOL-EARN-DETAIL: 1st Call'
         do INSERT-EARN-LEVEL

      end-if

      add 1 to #Pool_Idx

   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Acct_Cd = $Max_AcctCd_Pool

   add 1 to #Out_CurSeq

   let $Called_From = 'WRITE-POOL-EARN-DETAIL: 2nd Call'
   do INSERT-EARN-LEVEL

End-Procedure WRITE-POOL-EARN-DETAIL

!***********************************************************************
! Procedure: INSERT-EARN-LEVEL                                         *
! Descr:     This procedure will insert a new earnings level appoint-  *
!            ment, position, or position pool budget record.           *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!            CONTROL-BREAK-ACCT                                        *
!***********************************************************************
Begin-Procedure INSERT-EARN-LEVEL

   let $Out_Acct_Cd   = nvl($Out_Acct_Cd,' ')
   let $Out_GLPayType = nvl($Out_GLPayType,' ')

  let $SQL-STATEMENT = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET_ERN'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET_ERN (
   SETID,
   DEPTID,
   FISCAL_YEAR,
   POSITION_POOL_ID,
   SETID_JOBCODE,
   JOBCODE,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   EFFSEQ,                                             !hp999 Retro Dist
   ERNCD,
   BUDGET_SEQ,
   ACCT_CD,
   GL_PAY_TYPE,
   BUDGET_AMT,
   DIST_PCT,
   PERCENT_EFFORT,
   FUNDING_END_DT,
   HP_USED_DISTRIBUTN,                                 !hp999 Retro Dist
   HP_EXCESS,                                          !hp999 Retro Dist
   HP_FRINGE_GROUP,
   HP_REDIRECT_ACCT)
VALUES (
   $Save_SetID,
   $Save_DeptID,
   #Prm_Fiscal_Year,
   $Out_Position_Pool_ID,
   ' ',
   ' ',
   $Out_Position_Nbr,
   $Out_EmplID,
   #Out_Empl_Rcd,
   $Out_Effdt,
   0,                                                  !hp999 Retro Dist
   ' ',
   #Out_CurSeq,
   $Out_Acct_Cd,
   $Out_GLPayType,
   #Out_BudAmt,
   #Out_BudPct,
   0,
   null,
   'N',                                                !hp999 Retro Dist
   'N',                                                !hp999 Retro Dist
   $Prm_Fringe_Group,
   $Prm_Redirect_Acct)
end-sql

   add 1 to #Trans_Cnt

End-Procedure INSERT-EARN-LEVEL

!***********************************************************************
! Procedure: INSERT-DED-TAX-BDGT                                       *
! Descr:     This procedure will check the value of the parameters for *
!            deduction and tax budget copying or defaults, and build   *
!            new deduction and tax budgets accordingly.                *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure INSERT-DED-TAX-BDGT

   if $Prm_Budget_Opt_Ded = 'C'

      do READ-WRITE-DED-BDGT

   else

      move $Prm_FromDate to $Out_Effdt
      move ' ' to $Out_Plan_Type
      move ' ' to $Out_Benefit_Plan
      move ' ' to $Out_DedCd
      move ' ' to $Out_Ded_Class
      move  1  to #Out_CurSeq
      move $Prm_Acct_Cd_Ded to $Out_Acct_Cd
      move ' ' to $Out_GlPayType
      move  0  to #Out_BudAmt
      move 100 to #Out_BudPct

      if $Prm_Budget_Opt_Ded = 'D'
         move $Prm_Acct_Cd to $Out_Acct_Cd
         move 'N' to $Out_Override_Ind
      else
         move 'Y' to $Out_Override_Ind
      end-if

      do INSERT-DED-LEVEL

   end-if

   if $Gbl_Country = 'USA'

      if $Prm_Budget_Opt_Tax = 'C'

         do READ-WRITE-TAX-BDGT

      else

         move ' ' to $Out_State
         move ' ' to $Out_Locality
         move ' ' to $Out_Tax_Class
         move  1  to #Out_CurSeq
         move $Prm_Acct_Cd_Tax to $Out_Acct_Cd
         move ' ' to $Out_GlPayType
         move  0  to #Out_BudAmt
         move 100 to #Out_BudPct

         if $Prm_Budget_Opt_Tax = 'D'
            move $Prm_Acct_Cd to $Out_Acct_Cd
            move 'N' to $Out_Override_Ind
         else
            move 'Y' to $Out_Override_Ind
         end-if

         do INSERT-TAX-LEVEL

      end-if
   else
      if $Prm_Budget_Opt_Tax = 'C'

         do READ-WRITE-CTX-BDGT

      else

         move ' ' to $Out_Province
         move ' ' to $Out_Tax_Class_Can
         move  1  to #Out_CurSeq
         move $Prm_Acct_Cd_Tax to $Out_Acct_Cd
         move ' ' to $Out_GlPayType
         move  0  to #Out_BudAmt
         move 100 to #Out_BudPct

         if $Prm_Budget_Opt_Tax = 'D'
            move $Prm_Acct_Cd to $Out_Acct_Cd
            move 'N' to $Out_Override_Ind
         else
            move 'Y' to $Out_Override_Ind
         end-if

         do INSERT-CTX-LEVEL

      end-if
   end-if

End-Procedure INSERT-DED-TAX-BDGT

!***********************************************************************
! Procedure: READ-WRITE-DED-BDGT                                       *
! Descr:     This procedure will read the previous fiscal year's ded-  *
!            uction budget for an employee, position, pool, or dept.   *
!            If one exists, it will reproduce the deduction budget in  *
!            the current year.  If not, it will insert the defaults.   *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure READ-WRITE-DED-BDGT

   let #Out_Fiscal_Year = #Prm_Fiscal_Year - 1
   let #Out_CurSeq = 0
   let #Deduction_Not_Found = 1

begin-SELECT
BDED.PLAN_TYPE
BDED.BENEFIT_PLAN
BDED.DEDCD
BDED.DED_CLASS
BDED.BUDGET_SEQ
BDED.ACCT_CD
BDED.GL_PAY_TYPE
BDED.BUDGET_AMT
BDED.DIST_PCT
BDED.OVERRIDE_IND

   let #Deduction_Not_Found = 0
   add 1 to #Out_CurSeq

   move $Prm_FromDate to $Out_Effdt

   let $Out_Plan_Type    = rtrim(&BDED.PLAN_TYPE,' ')
   if $Out_Plan_Type = ''
      let $Out_Plan_Type = ' '
   end-if
   let $Out_Benefit_Plan = rtrim(&BDED.BENEFIT_PLAN,' ')
   if $Out_Benefit_Plan = ''
      let $Out_Benefit_Plan = ' '
   end-if
   let $Out_DedCd        = rtrim(&BDED.DEDCD,' ')
   if $Out_DedCd = ''
      let $Out_DedCd = ' '
   end-if
   let $Out_Ded_Class    = rtrim(&BDED.DED_CLASS,' ')
   if $Out_Ded_Class = ''
      let $Out_Ded_Class = ' '
   end-if
   let $Out_Acct_Cd      = rtrim(&BDED.ACCT_CD,' ')
   if $Out_Acct_Cd = ''
      let $Out_Acct_Cd = $Prm_Acct_Cd
   end-if
   let $Out_GLPayType    = rtrim(&BDED.GL_PAY_TYPE,' ')
   if $Out_GLPayType  = ''
      let $Out_GLPayType = ' '
   end-if
   let #Out_BudAmt       = &BDED.BUDGET_AMT
   let #Out_BudPct       = &BDED.DIST_PCT
   let $Out_Override_Ind = &BDED.OVERRIDE_IND

   do INSERT-DED-LEVEL

FROM PS_DEPT_BUDGET_DED BDED
WHERE BDED.SETID = $Save_SetID
  AND BDED.DEPTID = $Save_DeptID
  AND BDED.FISCAL_YEAR = #Out_Fiscal_Year
  AND BDED.POSITION_POOL_ID = $Out_Position_Pool_ID
  AND BDED.SETID_JOBCODE = ' '
  AND BDED.JOBCODE = ' '
  AND BDED.POSITION_NBR = $Out_Position_Nbr
  AND BDED.EMPLID = $Out_EmplID
  AND BDED.EMPL_RCD = #Out_Empl_Rcd
  AND BDED.EFFDT = (SELECT MAX(BD1.EFFDT)
                      FROM PS_DEPT_BUDGET_DED BD1
                     WHERE BD1.SETID = BDED.SETID
                       AND BD1.DEPTID = BDED.DEPTID
                       AND BD1.FISCAL_YEAR = BDED.FISCAL_YEAR
                       AND BD1.POSITION_POOL_ID = BDED.POSITION_POOL_ID
                       AND BD1.SETID_JOBCODE = BDED.SETID_JOBCODE
                       AND BD1.JOBCODE = BDED.JOBCODE
                       AND BD1.POSITION_NBR = BDED.POSITION_NBR
                       AND BD1.EMPLID = BDED.EMPLID
                       AND BD1.EMPL_RCD = BDED.EMPL_RCD
                       AND BD1.EFFDT < $Prm_FromDate)
  AND BDED.EFFSEQ = (SELECT MAX(BENSEQ.EFFSEQ)
                     FROM PS_DEPT_BUDGET_DED BENSEQ
                       WHERE BENSEQ.SETID = BDED.SETID
                       AND BENSEQ.DEPTID = BDED.DEPTID
                       AND BENSEQ.FISCAL_YEAR = BDED.FISCAL_YEAR
                       AND BENSEQ.POSITION_POOL_ID = BDED.POSITION_POOL_ID
                       AND BENSEQ.SETID_JOBCODE = BDED.SETID_JOBCODE
                       AND BENSEQ.JOBCODE = BDED.JOBCODE
                       AND BENSEQ.POSITION_NBR = BDED.POSITION_NBR
                       AND BENSEQ.EMPLID = BDED.EMPLID
                       AND BENSEQ.EMPL_RCD = BDED.EMPL_RCD
                       AND BENSEQ.EFFDT = BDED.EFFDT)

ORDER BY BDED.PLAN_TYPE, BDED.BENEFIT_PLAN, BDED.DEDCD, BDED.DED_CLASS, BDED.BUDGET_SEQ
end-SELECT

   if #Deduction_Not_Found
      move $Prm_FromDate to $Out_Effdt
      move ' ' to $Out_Plan_Type
      move ' ' to $Out_Benefit_Plan
      move ' ' to $Out_DedCd
      move ' ' to $Out_Ded_Class
      move  1  to #Out_CurSeq
      if $Prm_Acct_Cd_Ded = ''
         move $Prm_Acct_Cd to $Out_Acct_Cd
      else
         move $Prm_Acct_Cd_Ded to $Out_Acct_Cd
      end-if
      move ' ' to $Out_GlPayType
      move  0  to #Out_BudAmt
      move 100 to #Out_BudPct
      move 'Y' to $Out_Override_Ind

      do INSERT-DED-LEVEL

   end-if

End-Procedure READ-WRITE-DED-BDGT

!***********************************************************************
! Procedure: READ-WRITE-TAX-BDGT                                       *
! Descr:     This procedure will read the previous fiscal year's tax   *
!            budget for an employee, position, pool, or dept.  If one  *
!            exists, it will reproduce the tax budget in the current   *
!            year.  If not, it will insert the defaults.               *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure READ-WRITE-TAX-BDGT

   let #Out_Fiscal_Year = #Prm_Fiscal_Year - 1
   let #Out_CurSeq = 0
   let #Taxes_Not_Found = 1

begin-SELECT
BTAX.STATE
BTAX.LOCALITY
BTAX.TAX_CLASS
BTAX.BUDGET_SEQ
BTAX.ACCT_CD
BTAX.GL_PAY_TYPE
BTAX.BUDGET_AMT
BTAX.DIST_PCT
BTAX.OVERRIDE_IND

   let #Taxes_Not_Found = 0
   add 1 to #Out_CurSeq

   let $Out_State        = rtrim(&BTAX.STATE,' ')
   if $Out_State = ''
      let $Out_State = ' '
   end-if
   let $Out_Locality     = rtrim(&BTAX.LOCALITY,' ')
   if $Out_Locality = ''
      let $Out_Locality = ' '
   end-if
   let $Out_Tax_Class    = rtrim(&BTAX.TAX_CLASS,' ')
   if $Out_Tax_Class = ''
      let $Out_Tax_Class = ' '
   end-if
   let $Out_Acct_Cd      = rtrim(&BTAX.ACCT_CD,' ')
   if $Out_Acct_Cd = ''
      let $Out_Acct_Cd = $Prm_Acct_Cd
   end-if
   let $Out_GLPayType    = rtrim(&BTAX.GL_PAY_TYPE,' ')
   if $Out_GLPayType = ''
      let $Out_GLPayType = ' '
   end-if
   let #Out_BudAmt       = &BTAX.BUDGET_AMT
   let #Out_BudPct       = &BTAX.DIST_PCT
   let $Out_Override_Ind = &BTAX.OVERRIDE_IND

   do INSERT-TAX-LEVEL

FROM PS_DEPT_BUDGET_TAX BTAX
WHERE BTAX.SETID = $Save_SetID
  AND BTAX.DEPTID = $Save_DeptID
  AND BTAX.FISCAL_YEAR = #Out_Fiscal_Year
  AND BTAX.POSITION_POOL_ID = $Out_Position_Pool_ID
  AND BTAX.SETID_JOBCODE = ' '
  AND BTAX.JOBCODE = ' '
  AND BTAX.POSITION_NBR = $Out_Position_Nbr
  AND BTAX.EMPLID = $Out_EmplID
  AND BTAX.EMPL_RCD = #Out_Empl_Rcd
  AND BTAX.EFFDT = (SELECT MAX(BT1.EFFDT)
                      FROM PS_DEPT_BUDGET_TAX BT1
                     WHERE BT1.SETID = BTAX.SETID
                       AND BT1.DEPTID = BTAX.DEPTID
                       AND BT1.FISCAL_YEAR = BTAX.FISCAL_YEAR
                       AND BT1.POSITION_POOL_ID = BTAX.POSITION_POOL_ID
                       AND BT1.SETID_JOBCODE = BTAX.SETID_JOBCODE
                       AND BT1.JOBCODE = BTAX.JOBCODE
                       AND BT1.POSITION_NBR = BTAX.POSITION_NBR
                       AND BT1.EMPLID = BTAX.EMPLID
                       AND BT1.EMPL_RCD = BTAX.EMPL_RCD
                       AND BT1.EFFDT < $Prm_FromDate)
  AND BTAX.EFFSEQ = (SELECT MAX(TAXSEQ.EFFSEQ)
                       FROM PS_DEPT_BUDGET_TAX TAXSEQ
                     WHERE TAXSEQ.SETID = BTAX.SETID
                       AND TAXSEQ.DEPTID = BTAX.DEPTID
                       AND TAXSEQ.FISCAL_YEAR = BTAX.FISCAL_YEAR
                       AND TAXSEQ.POSITION_POOL_ID = BTAX.POSITION_POOL_ID
                       AND TAXSEQ.SETID_JOBCODE = BTAX.SETID_JOBCODE
                       AND TAXSEQ.JOBCODE = BTAX.JOBCODE
                       AND TAXSEQ.POSITION_NBR = BTAX.POSITION_NBR
                       AND TAXSEQ.EMPLID = BTAX.EMPLID
                       AND TAXSEQ.EMPL_RCD = BTAX.EMPL_RCD
                       AND TAXSEQ.EFFDT = BTAX.EFFDT)
ORDER BY BTAX.STATE, BTAX.LOCALITY, BTAX.TAX_CLASS, BTAX.BUDGET_SEQ
end-SELECT

   if #Deduction_Not_Found
      move ' ' to $Out_State
      move ' ' to $Out_Locality
      move ' ' to $Out_Tax_Class
      move  1  to #Out_CurSeq
      if $Prm_Acct_Cd_Tax = ''
         move $Prm_Acct_Cd to $Out_Acct_Cd
      else
         move $Prm_Acct_Cd_Tax to $Out_Acct_Cd
      end-if
      move ' ' to $Out_GlPayType
      move  0  to #Out_BudAmt
      move 100 to #Out_BudPct
      move 'Y' to $Out_Override_Ind

      do INSERT-TAX-LEVEL

   end-if

End-Procedure READ-WRITE-TAX-BDGT

!***********************************************************************
! Procedure: INSERT-TAX-LEVEL                                          *
! Descr:     This procedure will insert a new tax level appointment,   *
!            position, or position pool budget record.                 *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure INSERT-TAX-LEVEL

   let $SQL-STATEMENT = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET_TAX'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET_TAX (
   SETID,
   DEPTID,
   FISCAL_YEAR,
   POSITION_POOL_ID,
   SETID_JOBCODE,
   JOBCODE,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   EFFSEQ,                                              !hp999 Retro Dist
   STATE,
   LOCALITY,
   TAX_CLASS,
   BUDGET_SEQ,
   ACCT_CD,
   GL_PAY_TYPE,
   BUDGET_AMT,
   DIST_PCT,
   FUNDING_END_DT,
   HP_USED_DISTRIBUTN,                                  !hp999 Retro Dist
   HP_EXCESS,                                           !hp999 Retro Dist
   OVERRIDE_IND)
VALUES (
   $Save_SetID,
   $Save_DeptID,
   #Prm_Fiscal_Year,
   $Out_Position_Pool_ID,
   ' ',
   ' ',
   $Out_Position_Nbr,
   $Out_EmplID,
   #Out_Empl_Rcd,
   $Prm_FromDate,
   0,                                                    !hp999 Retro Dist
   $Out_State,
   $Out_Locality,
   $Out_Tax_Class,
   #Out_CurSeq,
   $Out_Acct_Cd,
   $Out_GLPayType,
   #Out_BudAmt,
   #Out_BudPct,
   null,
   'N',                                                  !hp999 Retro Dist
   'N',                                                  !hp999 Retro Dist
   $Out_Override_Ind)
end-sql

   add 1 to #Trans_Cnt

End-Procedure INSERT-TAX-LEVEL

!***********************************************************************
! Procedure: READ-WRITE-CTX-BDGT                                       *
! Descr:     This procedure will read the previous fiscal year's       *
!            Canadian tax budget for an employee, position, pool, or   *
!            dept.  If one exists, it will reproduce the tax budget    *
!            in the current year. If not, it will insert the defaults. *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure READ-WRITE-CTX-BDGT

   let #Out_Fiscal_Year = #Prm_Fiscal_Year - 1
   let #Out_CurSeq = 0
   let #Taxes_Not_Found = 1

begin-SELECT
BCTX.PROVINCE
BCTX.TAX_CLASS_CAN
BCTX.BUDGET_SEQ
BCTX.ACCT_CD
BCTX.GL_PAY_TYPE
BCTX.BUDGET_AMT
BCTX.DIST_PCT
BCTX.OVERRIDE_IND

   let #Taxes_Not_Found = 0
   add 1 to #Out_CurSeq

   let $Out_Province       = rtrim(&BCTX.PROVINCE,' ')
   if $Out_Province = ''
      let $Out_Province = ' '
   end-if
   let $Out_Tax_Class_Can  = rtrim(&BCTX.TAX_CLASS_CAN,' ')
   if $Out_Tax_Class_Can = ''
      let $Out_Tax_Class_Can = ' '
   end-if
   let $Out_Acct_Cd        = rtrim(&BCTX.ACCT_CD,' ')
   if $Out_Acct_Cd = ''
      let $Out_Acct_Cd = $Prm_Acct_Cd
   end-if
   let $Out_GLPayType      = rtrim(&BCTX.GL_PAY_TYPE,' ')
   if $Out_GLPayType = ''
      let $Out_GLPayType = ' '
   end-if
   let #Out_BudAmt         = &BCTX.BUDGET_AMT
   let #Out_BudPct         = &BCTX.DIST_PCT
   let $Out_Override_Ind   = &BCTX.OVERRIDE_IND

   do INSERT-CTX-LEVEL

FROM PS_DEPT_BUDGET_CTX BCTX
WHERE BCTX.SETID = $Save_SetID
  AND BCTX.DEPTID = $Save_DeptID
  AND BCTX.FISCAL_YEAR = #Out_Fiscal_Year
  AND BCTX.POSITION_POOL_ID = $Out_Position_Pool_ID
  AND BCTX.SETID_JOBCODE = ' '
  AND BCTX.JOBCODE = ' '
  AND BCTX.POSITION_NBR = $Out_Position_Nbr
  AND BCTX.EMPLID = $Out_EmplID
  AND BCTX.EMPL_RCD = #Out_Empl_Rcd
  AND BCTX.EFFDT = (SELECT MAX(BT2.EFFDT)
                      FROM PS_DEPT_BUDGET_CTX BT2
                     WHERE BT2.SETID = BCTX.SETID
                       AND BT2.DEPTID = BCTX.DEPTID
                       AND BT2.FISCAL_YEAR = BCTX.FISCAL_YEAR
                       AND BT2.POSITION_POOL_ID = BCTX.POSITION_POOL_ID
                       AND BT2.SETID_JOBCODE = BCTX.SETID_JOBCODE
                       AND BT2.JOBCODE = BCTX.JOBCODE
                       AND BT2.POSITION_NBR = BCTX.POSITION_NBR
                       AND BT2.EMPLID = BCTX.EMPLID
                       AND BT2.EMPL_RCD = BCTX.EMPL_RCD
                       AND BT2.EFFDT < $Prm_FromDate)
ORDER BY BCTX.PROVINCE, BCTX.TAX_CLASS_CAN, BCTX.BUDGET_SEQ
end-SELECT

   if #Deduction_Not_Found
      move ' ' to $Out_Province
      move ' ' to $Out_Tax_Class_Can
      move  1  to #Out_CurSeq
      if $Prm_Acct_Cd_Tax = ''
         move $Prm_Acct_Cd to $Out_Acct_Cd
      else
         move $Prm_Acct_Cd_Tax to $Out_Acct_Cd
      end-if
      move ' ' to $Out_GlPayType
      move  0  to #Out_BudAmt
      move 100 to #Out_BudPct
      move 'Y' to $Out_Override_Ind

      do INSERT-CTX-LEVEL

   end-if

End-Procedure READ-WRITE-CTX-BDGT

!***********************************************************************
! Procedure: INSERT-CTX-LEVEL                                          *
! Descr:     This procedure will insert a new Canadian tax level       *
!            appointment,position, or position pool budget record.     *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!***********************************************************************
Begin-Procedure INSERT-CTX-LEVEL

   let $SQL-STATEMENT = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET_CTX'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET_CTX (
   SETID,
   DEPTID,
   FISCAL_YEAR,
   POSITION_POOL_ID,
   SETID_JOBCODE,
   JOBCODE,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   EFFSEQ,                                             !hp999 Retro Dist
   PROVINCE,
   TAX_CLASS_CAN,
   BUDGET_SEQ,
   ACCT_CD,
   GL_PAY_TYPE,
   BUDGET_AMT,
   DIST_PCT,
   FUNDING_END_DT,
   HP_USED_DISTRIBUTN,                                 !hp999 Retro Dist
   HP_EXCESS,                                          !hp999 Retro Dist
   OVERRIDE_IND)
VALUES (
   $Save_SetID,
   $Save_DeptID,
   #Prm_Fiscal_Year,
   $Out_Position_Pool_ID,
   ' ',
   ' ',
   $Out_Position_Nbr,
   $Out_EmplID,
   #Out_Empl_Rcd,
   $Prm_FromDate,
   0,                                                  !hp999 Retro Dist
   $Out_Province,
   $Out_Tax_Class_Can,
   #Out_CurSeq,
   $Out_Acct_Cd,
   $Out_GLPayType,
   #Out_BudAmt,
   #Out_BudPct,
   null,
   'N',                                                !hp999 Retro Dist
   'N',                                                !hp999 Retro Dist
   $Out_Override_Ind)
end-SQL

   add 1 to #Trans_Cnt

End-Procedure INSERT-CTX-LEVEL

!***********************************************************************
! Procedure: MAINLINE-BENS                                             *
! Descr:     Drive paragraph for this program.  Selects all current    *
!            JOB records by employee status.  For each job record, a   *
!            funding source entry is found and written to the temp.    *
!            table.  Open positions are the read from the POSITION_    *
!            DATA table and their funding sources identified.          *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure MAINLINE-BENS

   !** Process all records in the Budgets Position Table (BD_POSITION_TBL)

   do RESET-EXISTING-CAPS

   do CLEAN-DEDN-BUDGETS

   do PROCESS-BUDGET-TABLE-BENS


End-Procedure MAINLINE-BENS

!***********************************************************************
! Procedure: PROCESS-BUDGET-TABLE-BENS                                 *
! Descr:     Select all records from the table BD_POSITION_TBL from    *
!            the Budgets Product for E&G.  For each record, either     *
!            write a budget rec, or roll up to a higher level of       *
!            budget depending on the Run Control directions.           *
!                                                                      *
! Called by: MAINLINE-BENS                                             *
!***********************************************************************
Begin-Procedure PROCESS-BUDGET-TABLE-BENS

! Define alternate order by clauses
  ! the order by clause contains Emplid and Empl Rcd when processing
  ! appointment only

  let $BDep_order = 'WRKC.SETID_DEPT, WRKC.DEPTID, WRKC.POSITION_POOL_ID, '
       || 'BDPC.POSITION_NBR_HR, BDDC.PLAN_TYPE, '
       || 'BDDC.ACCOUNT, BDDC.ALTACCT, BDDC.OPERATING_UNIT, BDDC.DEPTID, '
       || 'BDDC.PRODUCT, BDDC.PROJECT_ID, BDDC.AFFILIATE, BDDC.FUND_CODE, '
       || 'BDDC.PROGRAM_CODE, BDDC.CLASS_FLD, BDDC.BUDGET_REF, '
       || 'BDDC.CHARTFIELD1, BDDC.CHARTFIELD2, BDDC.CHARTFIELD3, '
       || 'BDDC.AFFILIATE_INTRA1, BDDC.AFFILIATE_INTRA2, '
       || 'BDPC.POSITION_NBR '

  let $BAppt_order = 'WRKC.SETID_DEPT, WRKC.DEPTID, WRKC.POSITION_POOL_ID, '
       || 'BDPC.POSITION_NBR_HR, BDJC.EMPLID, BDJC.EMPL_RCD, BDDC.PLAN_TYPE, '
       || 'BDDC.ACCOUNT, BDDC.ALTACCT, BDDC.OPERATING_UNIT, BDDC.DEPTID, '
       || 'BDDC.PRODUCT, BDDC.PROJECT_ID, BDDC.AFFILIATE, BDDC.FUND_CODE, '
       || 'BDDC.PROGRAM_CODE, BDDC.CLASS_FLD, BDDC.BUDGET_REF, '
       || 'BDDC.CHARTFIELD1, BDDC.CHARTFIELD2, BDDC.CHARTFIELD3, '
       || 'BDDC.AFFILIATE_INTRA1, BDDC.AFFILIATE_INTRA2, '
       || 'BDPC.POSITION_NBR '

   if $Prm_Budget_level_indc = 'A'
      let $Border_by = $BAppt_order
   else
      let $Border_by = $BDep_order
   end-if

   let #First_Pass = 1
   let #Last_Pass = 0
   let $Save_SetID = ' '
   let $Save_DeptID = ' '
   let #Acct_BudAmt = 0

   let $SQL-Statement = 'BUD008.SQR, SELECT, MAIN-BENS'
Begin-SELECT  on-error=SQL-Error
WRKC.SETID_DEPT
WRKC.DEPTID
WRKC.POSITION_POOL_ID
BDPC.POSITION_NBR_HR
BDJC.EMPLID
BDJC.EMPL_RCD
WRKC.EFFDT
BDDC.ACCOUNT                ! Chartfield subrecord
BDDC.ALTACCT                ! Chartfield subrecord
BDDC.OPERATING_UNIT         ! Chartfield subrecord
BDDC.DEPTID                 ! Chartfield subrecord
BDDC.PRODUCT                ! Chartfield subrecord
BDDC.BUSINESS_UNIT_PC       ! Chartfield subrecord
BDDC.PROJECT_ID             ! Chartfield subrecord
BDDC.AFFILIATE              ! Chartfield subrecord
BDDC.ACTIVITY_ID            ! Chartfield subrecord
BDDC.RESOURCE_TYPE          ! Chartfield subrecord
BDDC.FUND_CODE              ! Chartfield subrecord
BDDC.PROGRAM_CODE           ! Chartfield subrecord
BDDC.CLASS_FLD              ! Chartfield subrecord
BDDC.BUDGET_REF             ! Chartfield subrecord
BDDC.CHARTFIELD1            ! Chartfield subrecord
BDDC.CHARTFIELD2            ! Chartfield subrecord
BDDC.CHARTFIELD3            ! Chartfield subrecord
BDDC.AFFILIATE_INTRA1       ! Chartfield subrecord
BDDC.AFFILIATE_INTRA2       ! Chartfield subrecord
BDPC.BUSINESS_UNIT
BDPC.POSITION_NBR
BDPC.POSN_STATUS
BDPC.HEADCOUNT
BDPC.BUSINESS_UNIT_HR
BDPC.SPREADTYPE
BDPC.SPREAD_TEMPLATE
BDPC.EXISTING_POSN_FLG
BDPC.BD_UPDATE_FLAG

BDJC.EFFDT
BDJC.EFFSEQ
BDJC.EMPL_STATUS
BDJC.ACTION
BDJC.JOBCODE
BDJC.REASON_CD
BDJC.LOCATION
BDJC.STD_HOURS
BDJC.FTE
BDJC.REG_TEMP
BDJC.FULL_PART_TIME
BDJC.ANNUAL_SALARY
BDJC.CURRENCY_CD
BDJC.SAL_ADMIN_PLAN
BDJC.GRADE
BDJC.STEP
BDJC.BD_UPDATE_FLAG

BDDC.COMPENSATION_IND
BDDC.BD_SEQ_NBR
BDDC.PERCENTAGE
BDDC.AMOUNT
BDDC.PLAN_TYPE
BDDC.CURRENCY_CD
BDDC.BD_UPDATE_FLAG
WRKC.FTE

   let $Cur_SetID             = rtrim(&WRKC.SETID_DEPT,' ')
   let $Cur_DeptID            = rtrim(&WRKC.DEPTID,' ')
   let $Cur_Position_Pool_ID  = rtrim(&WRKC.POSITION_POOL_ID,' ')
   let $Cur_Position_Nbr      = rtrim(&BDPC.POSITION_NBR_HR,' ')
   let $Cur_EmplID            = rtrim(&BDJC.EMPLID,' ')
   let $Cur_Plan_Type         = rtrim(&BDDC.PLAN_TYPE,' ')

   let $Cur_SetID             = nvl($Cur_SetID,' ')
   let $Cur_DeptID            = nvl($Cur_DeptID,' ')
   let $Cur_Position_Pool_ID  = nvl($Cur_Position_Pool_ID,' ')
   let $Cur_EmplID            = nvl($Cur_EmplID,' ')
   let $Cur_Position_Nbr      = nvl($Cur_Position_Nbr,' ')
   let $Cur_Plan_Type         = nvl($Cur_Plan_Type,' ')

   let #Cur_Empl_Rcd          = &BDJC.EMPL_RCD
   let $Cur_Effdt             = &WRKC.EFFDT

   let #Cur_Budget_Amt        = &BDDC.AMOUNT
   let #Cur_Budget_Pct        = &BDDC.PERCENTAGE

   !**  Move chart fields to WS fields for search routine.
   let $Bdd_Account           = &BDDC.ACCOUNT
   let $Bdd_Altacct           = &BDDC.ALTACCT
   let $Bdd_Operating_Unit    = &BDDC.OPERATING_UNIT
   let $Bdd_Deptid            = &BDDC.DEPTID
   let $Bdd_Product           = &BDDC.PRODUCT
   let $Bdd_Business_Unit_PC  = ' '
   let $Bdd_Project_ID        = &BDDC.PROJECT_ID
   let $Bdd_Affiliate         = &BDDC.AFFILIATE
   let $Bdd_Activity_ID       = ' '
   let $Bdd_Resource_Type     = ' '
   let $Bdd_Fund_Code         = &BDDC.FUND_CODE
   let $Bdd_Program_Code      = &BDDC.PROGRAM_CODE
   let $Bdd_Class_Fld         = &BDDC.CLASS_FLD
   let $Bdd_Budget_Ref        = &BDDC.BUDGET_REF
   let $Bdd_Chartfield1       = &BDDC.CHARTFIELD1
   let $Bdd_Chartfield2       = &BDDC.CHARTFIELD2
   let $Bdd_Chartfield3       = &BDDC.CHARTFIELD3
   let $Bdd_Affilate_intra1   = &BDDC.AFFILIATE_INTRA1
   let $Bdd_Affilate_intra2   = &BDDC.AFFILIATE_INTRA2
   let $Bdd_Budget_Period     = ' '
   let $Compensation_ind      = &BDDC.COMPENSATION_IND

   do FETCH-ACCT-CODE

   if #First_Pass
      let #First_Pass = 0
      let $Save_SetID            = $Cur_SetID
      let $Save_DeptID           = $Cur_DeptID
      let $Save_Position_Pool_ID = $Cur_Position_Pool_ID
      let $Save_Position_Nbr     = $Cur_Position_Nbr
      let $Save_Emplid           = $Cur_EmplID
      let #Save_Empl_Rcd         = #Cur_Empl_Rcd
      let $Save_Effdt            = $Cur_Effdt
      let $Save_Plan_Type        = $Cur_Plan_Type
      let $Save_Acct_Cd          = $Cur_Acct_Cd
      let #Dept_CurSeq           = 1
      let #Pool_CurSeq           = 1
      let #Posn_CurSeq           = 1
      let #Appt_CurSeq           = 1
      do SETUP-NEW-DEPT-BENS
   end-if


   if $Cur_SetID  <> $Save_SetID
   or ($Cur_SetID  = $Save_SetID and $Cur_DeptID <> $Save_DeptID)
      do CONTROL-BREAK-DEPT-BENS
      move 0 to #Processing_Effdt
   else
      if $Cur_Position_Pool_ID <> $Save_Position_Pool_ID
         do CONTROL-BREAK-POOL-BENS
         move 0 to #Processing_Effdt
      else
         if $Cur_Position_Nbr <> $Save_Position_Nbr
            do CONTROL-BREAK-POSN-BENS
            move 0 to #Processing_Effdt
         else
            if ($Cur_EmplID <> $Save_EmplID
            or ($Cur_EmplID = $Save_EmplID and #Cur_Empl_Rcd <> #Save_Empl_Rcd))
                and $Prm_Budget_Level_indc = 'A'
               do CONTROL-BREAK-APPT-BENS
               move 0 to #Processing_Effdt
            else
               if $Cur_Acct_Cd <> $Save_Acct_Cd
               or $Cur_Plan_Type <> $Save_Plan_Type
                  do CONTROL-BREAK-ACCT-BENS
               else
                  do NO-CONTROL-BREAK-BENS
               end-if
               end-if
         end-if
      end-if
   end-if


FROM PS_BD_POSITION_TBL BDPC
   , PS_BD_JOB_TBL BDJC
   , PS_BD_DISTR_TBL BDDC
   , PS_BD_POS_POOL_WRK WRKC
WHERE BDPC.BUSINESS_UNIT = BDJC.BUSINESS_UNIT
  AND BDPC.BUSINESS_UNIT = BDDC.BUSINESS_UNIT
  AND BDPC.BUSINESS_UNIT = WRKC.BUSINESS_UNIT_BD

  AND BDPC.POSITION_NBR  = BDJC.POSITION_NBR
  AND BDPC.POSITION_NBR  = BDDC.POSITION_NBR
  AND BDPC.POSITION_NBR  = WRKC.POSITION_NBR

  AND BDJC.EMPLID        = BDDC.EMPLID
  AND BDJC.EMPLID        = WRKC.EMPLID

  AND BDJC.EMPL_RCD      = BDDC.EMPL_RCD
  AND BDJC.EMPL_RCD      = WRKC.EMPL_RCD

  AND BDJC.EFFDT         = BDDC.EFFDT
  AND BDJC.EFFDT         = WRKC.EFFDT

  AND BDPC.EXISTING_POSN_FLG = 'Y'
  AND BDDC.COMPENSATION_IND  = 'B'

ORDER BY [$Border_by]

end-SELECT

   if not #First_Pass
      move 1 to #Last_Pass
      do CONTROL-BREAK-DEPT-BENS
   end-if

end-procedure PROCESS-BUDGET-TABLE-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-DEPT-BENS                                   *
! Descr:     Performs all required processing when the value of the    *
!            input DeptID changes.  Processing performed is controlled *
!            by the value of the parameter BUD_LEVELS_OPTION           *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-DEPT-BENS

   do CONTROL-BREAK-POOL-BENS

   if $Save_DeptID <> ' '

      move 'D' to $Out_Budget_Level_Indc
      move ' ' to $Out_Position_Pool_ID
      move ' ' to $Out_Position_Nbr
      move ' ' to $Out_EmplID
      move  0  to #Out_Empl_Rcd
      move $Prm_FromDate to $Out_Effdt
      get #Out_Bdgt_Cap from Dept_Bdgt_Array (0) Dept_Ay_Bdgt_Amt

      do UPDATE-BDGT-CAP

      do WRITE-DEPT-DEDN-DETAIL

   end-if

   move $Save_DeptID to $Trans_DeptID
   move $Cur_DeptID to $Save_DeptID
   move $Save_SetId to $Trans_SetID
   move $Cur_SetId to $Save_SetId

   move $Cur_Effdt to $Save_Effdt
   move 1 to #Dept_CurSeq
   move 0 to #Processing_Effdt

   if not #Last_Pass

      do SETUP-NEW-DEPT-BENS

   end-if

End-Procedure CONTROL-BREAK-DEPT-BENS

!***********************************************************************
! Procedure: SETUP-NEW-DEPT-BENS                                       *
! Descr:     Performs all initialization steps for a new department    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!            CONTROL-BREAK-DEPT-BENS                                   *
!***********************************************************************
Begin-Procedure SETUP-NEW-DEPT-BENS

   let #Dept_Sal_Total    = 0
   let #Dept_BudAmt_Total = 0
   let #ErnCap            = 0

   !display 'Processing SetID/DeptID = ' noline
   !display $Cur_SetID                   noline
   !display ' / '                        noline
   !display $Cur_DeptID

   do INITIALIZE-ARRAY-DEPT

End-Procedure SETUP-NEW-DEPT-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-POOL-BENS                                   *
! Descr:     Performs all required processing when the value of the    *
!            input Position Pool ID changes.  Processing performed is  *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!            CONTROL-BREAK-DEPT-BENS                                   *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-POOL-BENS

   do CONTROL-BREAK-POSN-BENS

   if $Prm_Budget_Level_Indc = 'O'
      if $Save_Position_Pool_ID <> ' '
      and $Save_Position_Pool_ID <> '@@@'

         move 'O' to $Out_Budget_Level_Indc
         move $Save_Position_Pool_ID to $Out_Position_Pool_ID
         move ' ' to $Out_Position_Nbr
         move ' ' to $Out_EmplID
         move 0 to #Out_Empl_Rcd
         move $Prm_FromDate to $Out_Effdt
         get #Out_Bdgt_Cap from Pool_Bdgt_Array (0) Pool_Ay_Bdgt_Amt

         do UPDATE-BDGT-CAP

         do WRITE-POOL-DEDN-DETAIL

      end-if
   end-if

   do INITIALIZE-ARRAY-POOL

   move $Cur_Position_Pool_ID to $Save_Position_Pool_ID
   move $Cur_Effdt to $Save_Effdt
   move 1 to #Pool_CurSeq
   move 0 to #Processing_Effdt

End-Procedure CONTROL-BREAK-POOL-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-POSN-BENS                                   *
! Descr:     Performs all required processing when the value of the    *
!            input Position Number changes.  Processing performed is   *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!            CONTROL-BREAK-POOL-BENS                                   *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-POSN-BENS

   do CONTROL-BREAK-APPT-BENS

   if $Prm_Budget_Level_Indc = 'P'
      if $Save_Position_Nbr <> ' '
      and $Save_Position_Nbr <> '@@@'

         move 'P' to $Out_Budget_Level_Indc
         move ' ' to $Out_Position_Pool_ID
         move $Save_Position_Nbr to $Out_Position_Nbr
         move ' ' to $Out_EmplID
         move 0 to #Out_Empl_Rcd
         if #Processing_Effdt
            move $Save_Effdt to $Out_Effdt
         else
            move $Prm_FromDate to $Out_Effdt
         end-if
         move #Posn_CurSeq to #Out_CurSeq

         do WRITE-POSN-DEDN-MAX

         get #Out_Bdgt_Cap from Posn_Bdgt_Array (0) Posn_Ay_Bdgt_Amt

         do UPDATE-BDGT-CAP

      end-if
   end-if

   do INITIALIZE-ARRAY-POSN

   move $Cur_Position_Nbr to $Save_Position_Nbr
   move $Cur_Effdt to $Save_Effdt
   move ' ' to $Max_AcctCd_Appt
   move 0.0 to #Max_BudAmt_Appt
   move 1 to #Posn_CurSeq

End-Procedure CONTROL-BREAK-POSN-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-APPT-BENS                                   *
! Descr:     Performs all required processing when the value of the    *
!            input EmplID or Rcd# changes.  Processing performed is    *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!            CONTROL-BREAK-POSN-BENS                                   *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-APPT-BENS

   do CONTROL-BREAK-ACCT-BENS

   if $Prm_Budget_Level_Indc = 'A'
      if $Save_Emplid <> ' '

         move 'A' to $Out_Budget_Level_Indc
         move ' ' to $Out_Position_Pool_ID
         move ' ' to $Out_Position_Nbr
         move ' ' to $Out_GLPayType
         move $Save_EmplID to $Out_EmplID
         move #Save_Empl_Rcd to #Out_Empl_Rcd
         if #Processing_Effdt
            move $Save_Effdt to $Out_Effdt
         else
            move $Prm_FromDate to $Out_Effdt
         end-if
         move #Appt_CurSeq to #Out_CurSeq

         do WRITE-APPT-DEDN-MAX

         get #Out_Bdgt_Cap from Appt_Bdgt_Array (0) Appt_Ay_Bdgt_Amt

         do UPDATE-BDGT-CAP

      end-if
   end-if

   do INITIALIZE-ARRAY-APPT

   move $Cur_EmplID to $Save_EmplID
   move #Cur_Empl_Rcd to #Save_Empl_Rcd
   move $Cur_Effdt to $Save_Effdt
   move ' ' to $Max_AcctCd_Appt
   move 0.0 to #Max_BudAmt_Appt
   move 1 to #Appt_CurSeq

End-Procedure CONTROL-BREAK-APPT-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-EFFDT-BENS                                  *
! Descr:     Performs all required processing when the value of the    *
!            Effective Date changes.  When Pool or Department is set   *
!            as the roll-up level, all future-dated rows must be       *
!            disregarded.  Appointment or Position roll-ups will       *
!            result in a new effective-dated budget being built.       *
!                                                                      *
! Called by: NOT USED                                                  *
!                                                                      *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-EFFDT-BENS

   evaluate $Prm_Budget_Level_Indc
      when = 'D'                            !Department Budget
         if $Cur_Effdt <> $Save_Effdt
            move $Cur_Effdt to $Dump_Effdt
         end-if

         break
      when = 'O'                            !Position Pool Budgets
         if $Cur_Effdt <> $Save_Effdt
            move $Cur_Effdt to $Dump_Effdt
         end-if

         break
      when = 'P'

         do CONTROL-BREAK-POSN-BENS
         move 1 to #Processing_Effdt

         break
      when = 'A'

         do CONTROL-BREAK-APPT-BENS
         move 1 to #Processing_Effdt

         break
      when-other
         display 'Problem with paremeter: Budget Rollup Indicator'
         display 'Value is set to '        noline
         display $Prm_Budget_Level_Indc    noline
         display ': Value is invalid'

         break
   end-evaluate

End-Procedure CONTROL-BREAK-EFFDT-BENS

!***********************************************************************
! Procedure: CONTROL-BREAK-ACCT-BENS                                   *
! Descr:     Performs all required processing when the value of any    *
!            input Chart Field changes.  Processing performed is       *
!            controlled by the value of parameter BUD_LEVELS_OPTION    *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!            CONTROL-BREAK-APPT-BENS                                   *
!***********************************************************************
Begin-Procedure CONTROL-BREAK-ACCT-BENS

   evaluate $Prm_Budget_Level_Indc

      when = 'D'                            !Department Budget
         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = 0
         let $Array_Plan_Type = $Save_Plan_Type
         let $Array_Acct_Cd = $Save_Acct_Cd

         do STORE-ARRAY-DEPT

         break
      when = 'O'                            !Position Pool Budgets
         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = 0
         let $Array_Plan_Type = $Save_Plan_Type
         let $Array_Acct_Cd = $Save_Acct_Cd

         do STORE-ARRAY-POOL

         do STORE-ARRAY-DEPT

         break
      when = 'P'                            !Position Budgets
         if $Save_Position_Nbr <> ' '
         and $Save_Position_Pool_ID <> '@@@'
            let $Out_Position_Pool_ID = ' '
            let $Out_Position_Nbr = $Save_Position_Nbr
            let $Out_EmplID = ' '
            let #Out_Empl_Rcd = 0
            let #Out_CurSeq = #Posn_CurSeq
            if #Processing_Effdt
               move $Save_Effdt to $Out_Effdt
            else
               move $Prm_FromDate to $Out_Effdt
            end-if
            let $Out_GLPayType = ' '
            let #Out_BudPct = 0
            let $Out_Plan_Type = $Save_Plan_Type
            let $Out_Benefit_Plan = ' '
            let $Out_Dedcd = ' '
            let $Out_Ded_Class = ' '
            let $Out_Acct_Cd = $Save_Acct_Cd
            let #Out_BudAmt = #Acct_BudAmt
            let $Out_Override_Ind = 'Y'

            if #Out_BudAmt <> 0.00
               do INSERT-DED-LEVEL
               add 1 to #Posn_CurSeq
            end-if

         end-if

         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = 0
         let $Array_Plan_Type = $Save_Plan_Type
         let $Array_Acct_Cd = $Save_Acct_Cd

         do STORE-ARRAY-POSN

         do STORE-ARRAY-DEPT

         break

      when = 'A'                            !Appointment Budgets
         if $Save_Emplid <> ' '
            let $Out_Position_Pool_ID = ' '
            let $Out_Position_Nbr = ' '
            let $Out_EmplID = $Save_EmplID
            let #Out_Empl_Rcd = #Save_Empl_Rcd
            if #Processing_Effdt
               move $Save_Effdt to $Out_Effdt
            else
               move $Prm_FromDate to $Out_Effdt
            end-if
            let #Out_CurSeq = #Appt_CurSeq
            let $Out_GLPayType = ' '
            let #Out_BudPct = 0.0
            let $Out_Plan_Type = $Save_Plan_Type
            let $Out_Benefit_Plan = ' '
            let $Out_Dedcd = ' '
            let $Out_Ded_Class = ' '
            let $Out_Acct_Cd = $Save_Acct_Cd
            let #Out_BudAmt = #Acct_BudAmt
            let $Out_Override_Ind = 'Y'

            if #Out_BudAmt <> 0.00
               do INSERT-DED-LEVEL
               add 1 to #Appt_CurSeq
            end-if

         end-if

         let #Array_BudAmt = #Acct_BudAmt
         let #Array_BudPct = #Acct_BudPct
         let #Array_BudFTE = 0
         let $Array_Plan_Type = $Save_Plan_Type
         let $Array_Acct_Cd = $Save_Acct_Cd

         do STORE-ARRAY-APPT

         do STORE-ARRAY-DEPT

         break
      when-other
         display 'Problem with paremeter: Budget Rollup Indicator'
         display 'Value is set to '        noline
         display $Prm_Budget_Level_Indc    noline
         display ': Value is invalid'

         break
   end-evaluate

   move $Cur_Plan_Type to $Save_Plan_Type
   move $Cur_Acct_Cd to $Save_Acct_Cd
   move #Cur_Budget_Amt to #Acct_BudAmt
   move #Cur_Budget_Pct to #Acct_BudPct

End-Procedure CONTROL-BREAK-ACCT-BENS

!***********************************************************************
! Procedure: NO-CONTROL-BREAK-BENS                                     *
! Descr:     Performs accumulation of budget data at the Chart Field   *
!            level when no control breaks occur at all.                *
!                                                                      *
! Called by: PROCESS-BUDGET-TABLE-BENS                                 *
!***********************************************************************
Begin-Procedure NO-CONTROL-BREAK-BENS

   add #Cur_Budget_Amt to #Acct_BudAmt
   add #Cur_Budget_Pct to #Acct_BudPct

End-Procedure NO-CONTROL-BREAK-BENS

!***********************************************************************
! Procedure: STORE-ARRAY-DEPT                                          *
! Descr:     Manages the searching (for matching value) and insertion  *
!            of values into the Department budget array.               *
!                                                                      *
! Called by: CONTROL-BREAK-ACCT                                        *
!            CONTROL-BREAK-ACCT-BENS                                   *
!***********************************************************************
Begin-Procedure STORE-ARRAY-DEPT

   move 0 to #Array_Found
   move 1 to #Dept_Idx

   while #Dept_Idx <= #Dept_Cnt
      get $Dept_Ay_Plan_Type
          $Dept_Ay_Acct_Cd
          #Dept_Ay_Bdgt_Amt
          #Dept_Ay_Bdgt_Pct
      From Dept_Bdgt_Array(#Dept_Idx)
          Dept_Ay_Plan_Type
          Dept_Ay_Acct_Cd
          Dept_Ay_Bdgt_Amt
          Dept_Ay_Bdgt_Pct

      if $Dept_Ay_Acct_Cd = $Array_Acct_Cd
      and $Dept_Ay_Plan_Type = $Array_Plan_Type
         move 1 to #Array_Found
         move #Dept_Idx to #Found_Idx
         let #Dept_Idx = #Dept_Cnt + 1
      else
         add 1 to #Dept_Idx
      end-if

   end-while

!**   Use array element zero for the Department totals (caps).
   ARRAY-ADD #Array_BudAmt to Dept_Bdgt_Array(0) Dept_Ay_Bdgt_Amt
   ARRAY-ADD #Array_BudPct to Dept_Bdgt_Array(0) Dept_Ay_Bdgt_Pct
   add #Array_BudFTE to #Dept_Total_FTE

   if #Array_Found
      ARRAY-ADD #Array_BudAmt to Dept_Bdgt_Array(#Found_Idx) Dept_Ay_Bdgt_Amt
      ARRAY-ADD #Array_BudPct to Dept_Bdgt_Array(#Found_Idx) Dept_Ay_Bdgt_Pct
   else
      add 1 to #Dept_Cnt
      if #Dept_Cnt < {deptbdgtmax}
         put $Array_Plan_Type
             $Array_Acct_Cd
             #Array_BudAmt
             #Array_BudPct
         into Dept_Bdgt_Array(#Dept_Cnt)
             Dept_Ay_Plan_Type
             Dept_Ay_Acct_Cd
             Dept_Ay_Bdgt_Amt
             Dept_Ay_Bdgt_Pct
      else
         display ' '
         display 'Program modification required: ' noline
         display 'Number of Department Array entries'
         display 'exceeds maximum size of array.  ' noline
         display 'Terminating Program Execution'
         stop quiet
      end-if
   end-if

End-Procedure STORE-ARRAY-DEPT

!***********************************************************************
! Procedure: STORE-ARRAY-POOL                                          *
! Descr:     Manages the searching (for matching value) and insertion  *
!            of values into the Position pool budget array.            *
!                                                                      *
! Called by: CONTROL-BREAK-ACCT                                        *
!            CONTROL-BREAK-ACCT-BENS                                   *
!***********************************************************************
Begin-Procedure STORE-ARRAY-POOL

   move 0 to #Array_Found
   move 1 to #Pool_Idx

   while #Pool_Idx <= #Pool_Cnt
      get $Pool_Ay_Plan_Type
          $Pool_Ay_Acct_Cd
          #Pool_Ay_Bdgt_Amt
          #Pool_Ay_Bdgt_Pct
      From Pool_Bdgt_Array(#Pool_Idx)
          Pool_Ay_Plan_Type
          Pool_Ay_Acct_Cd
          Pool_Ay_Bdgt_Amt
          Pool_Ay_Bdgt_Pct

      if $Pool_Ay_Acct_Cd = $Array_Acct_Cd
      and $Pool_Ay_Plan_Type = $Array_Plan_Type
         move 1 to #Array_Found
         move #Pool_Idx to #Found_Idx
         let #Pool_Idx = #Pool_Cnt + 1
      else
         add 1 to #Pool_Idx
      end-if

   end-while

!**   Use array element zero for the Position Pool totals (caps).
   ARRAY-ADD #Array_BudAmt to Pool_Bdgt_Array(0) Pool_Ay_Bdgt_Amt
   ARRAY-ADD #Array_BudPct to Pool_Bdgt_Array(0) Pool_Ay_Bdgt_Pct

   if #Array_Found
      ARRAY-ADD #Array_BudAmt to Pool_Bdgt_Array(#Found_Idx) Pool_Ay_Bdgt_Amt
      ARRAY-ADD #Array_BudPct to Pool_Bdgt_Array(#Found_Idx) Pool_Ay_Bdgt_Pct
   else
      add 1 to #Pool_Cnt
      if #Pool_Cnt < {poolbdgtmax}
         put $Array_Plan_Type
             $Array_Acct_Cd
             #Array_BudAmt
             #Array_BudPct
         into Pool_Bdgt_Array(#Pool_Cnt)
             Pool_Ay_Plan_Type
             Pool_Ay_Acct_Cd
             Pool_Ay_Bdgt_Amt
             Pool_Ay_Bdgt_Pct
      else
         display ' '
         display 'Program modification required: ' noline
         display 'Number of Position pool Array entries'
         display 'exceeds maximum size of array.  ' noline
         display 'Terminating Program Execution'
         stop quiet
      end-if
   end-if

End-Procedure STORE-ARRAY-POOL

!***********************************************************************
! Procedure: STORE-ARRAY-POSN                                          *
! Descr:     Manages the searching (for matching value) and insertion  *
!            of values into the Appointment budget array.              *
!                                                                      *
! Called by: CONTROL-BREAK-ACCT                                        *
!            CONTROL-BREAK-ACCT-BENS                                   *
!***********************************************************************
Begin-Procedure STORE-ARRAY-POSN

   move 0 to #Array_Found
   move 1 to #Posn_Idx

   while #Posn_Idx <= #Posn_Cnt
      get $Posn_Ay_Plan_Type
          $Posn_Ay_Acct_Cd
          #Posn_Ay_Bdgt_Amt
          #Posn_Ay_Bdgt_Pct
      From Posn_Bdgt_Array(#Posn_Idx)
          Posn_Ay_Plan_Type
          Posn_Ay_Acct_Cd
          Posn_Ay_Bdgt_Amt
          Posn_Ay_Bdgt_Pct

      if $Posn_Ay_Acct_Cd = $Array_Acct_Cd
      and $Posn_Ay_Plan_Type = $Array_Plan_Type
         move 1 to #Array_Found
         move #Posn_Idx to #Found_Idx
         let #Posn_Idx = #Posn_Cnt + 1
      else
         add 1 to #Posn_Idx
      end-if

   end-while

!**   Use array element zero for the Position Budget totals (caps)
   ARRAY-ADD #Array_BudAmt to Posn_Bdgt_Array(0) Posn_Ay_Bdgt_Amt
   ARRAY-ADD #Array_BudPct to Posn_Bdgt_Array(0) Posn_Ay_Bdgt_Pct

   if #Array_Found
      ARRAY-ADD #Array_BudAmt to Posn_Bdgt_Array(#Found_Idx) Posn_Ay_Bdgt_Amt
      ARRAY-ADD #Array_BudPct to Posn_Bdgt_Array(#Found_Idx) Posn_Ay_Bdgt_Pct
   else
      add 1 to #Posn_Cnt
      if #Posn_Cnt < {posnbdgtmax}
         put $Array_Plan_Type
             $Array_Acct_Cd
             #Array_BudAmt
             #Array_BudPct
         into Posn_Bdgt_Array(#Posn_Cnt)
             Posn_Ay_Plan_Type
             Posn_Ay_Acct_Cd
             Posn_Ay_Bdgt_Amt
             Posn_Ay_Bdgt_Pct
      else
         display ' '
         display 'Program modification required: ' noline
         display 'Number of Position Array entries'
         display 'exceeds maximum size of array.  ' noline
         display 'Terminating Program Execution'
         stop quiet
      end-if
   end-if

End-Procedure STORE-ARRAY-POSN

!***********************************************************************
! Procedure: STORE-ARRAY-APPT                                          *
! Descr:     Manages the searching (for matching value) and insertion  *
!            of values into the Appointment budget array.              *
!                                                                      *
! Called by: CONTROL-BREAK-ACCT                                        *
!            CONTROL-BREAK-ACCT-BENS                                   *
!***********************************************************************
Begin-Procedure STORE-ARRAY-APPT

   move 0 to #Array_Found
   move 1 to #Appt_Idx

   while #Appt_Idx <= #Appt_Cnt
      get $Appt_Ay_Plan_Type
          $Appt_Ay_Acct_Cd
          #Appt_Ay_Bdgt_Amt
          #Appt_Ay_Bdgt_Pct
      From Appt_Bdgt_Array(#Appt_Idx)
          Appt_Ay_Plan_Type
          Appt_Ay_Acct_Cd
          Appt_Ay_Bdgt_Amt
          Appt_Ay_Bdgt_Pct

      if $Appt_Ay_Acct_Cd = $Array_Acct_Cd
      and $Appt_Ay_Plan_Type = $Array_Plan_Type
         move 1 to #Array_Found
         move #Appt_Idx to #Found_Idx
         let #Appt_Idx = #Appt_Cnt + 1
      else
         add 1 to #Appt_Idx
      end-if

   end-while

!**   Use array element zero for the Position Budget totals (caps)
   ARRAY-ADD #Array_BudAmt to Appt_Bdgt_Array(0) Appt_Ay_Bdgt_Amt
   ARRAY-ADD #Array_BudPct to Appt_Bdgt_Array(0) Appt_Ay_Bdgt_Pct

   if #Array_Found
      ARRAY-ADD #Array_BudAmt to Appt_Bdgt_Array(#Found_Idx) Appt_Ay_Bdgt_Amt
      ARRAY-ADD #Array_BudPct to Appt_Bdgt_Array(#Found_Idx) Appt_Ay_Bdgt_Pct
   else
      add 1 to #Appt_Cnt
      if #Appt_Cnt < {apptbdgtmax}
         put $Array_Plan_Type
             $Array_Acct_Cd
             #Array_BudAmt
             #Array_BudPct
         into Appt_Bdgt_Array(#Appt_Cnt)
             Appt_Ay_Plan_Type
             Appt_Ay_Acct_Cd
             Appt_Ay_Bdgt_Amt
             Appt_Ay_Bdgt_Pct
      else
         display ' '
         display 'Program modification required: ' noline
         display 'Number of Appointment Array entries'
         display 'exceeds maximum size of array.  ' noline
         display 'Terminating Program Execution'
         stop quiet
      end-if
   end-if

End-Procedure STORE-ARRAY-APPT

!***********************************************************************
! Procedure: UPDATE-BDGT-CAP                                           *
! Descr:     This procedure will update the department budget record   *
!            including the applicable budget cap amounts               *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT                                        *
!            CONTROL-BREAK-POOL                                        *
!            CONTROL-BREAK-POSN                                        *
!            CONTROL-BREAK-APPT                                        *
!            CONTROL-BREAK-DEPT-BENS                                   *
!            CONTROL-BREAK-POOL-BENS                                   *
!            CONTROL-BREAK-POSN-BENS                                   *
!            CONTROL-BREAK-APPT-BENS                                   *
!***********************************************************************
Begin-Procedure UPDATE-BDGT-CAP

   let $SQL-STATEMENT = 'BUD008.SQR, UPDATE, PS_DEPT_BUDGET'
begin-sql on-error=SQL-Error
UPDATE PS_DEPT_BUDGET
   SET OVERALL_BDGT_CAP = OVERALL_BDGT_CAP + #Out_Bdgt_Cap
 WHERE SETID            = $Save_SetID
   AND DEPTID           = $Save_DeptID
   AND FISCAL_YEAR      = #Prm_Fiscal_Year
   AND POSITION_POOL_ID = $Out_Position_Pool_ID
   AND SETID_JOBCODE    = ' '
   AND JOBCODE          = ' '
   AND POSITION_NBR     = $Out_Position_Nbr
   AND EMPLID           = $Out_EmplID
   AND EMPL_RCD         = #Out_Empl_Rcd
   AND EFFDT            = $Prm_FromDate
   AND EFFSEQ           = 0
   AND EFF_STATUS       = 'A'
end-sql

End-Procedure UPDATE-BDGT-CAP

!***********************************************************************
! Procedure: WRITE-DEPT-DEDN-DETAIL                                    *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Department break level.                     *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT-BENS                                   *
!***********************************************************************
Begin-Procedure WRITE-DEPT-DEDN-DETAIL

!   get #Dept_Tot_Dist from Dept_Bdgt_Array(0) Dept_Ay_Bdgt_Pct
!
!   if #Dept_Tot_Dist <> 0
!      let #Dist_Adj_Factor = 100 / #Dept_Tot_Dist
!   else
!      let #Dist_Adj_Factor = 0
!   end-if

   !**  Sort the Department Array by plan type so the tables will look good.

   move 0 to #sorted
   while not #sorted
      move 0 to #moves
      move 1 to #low_idx
      while #low_idx < #Dept_Cnt
         let #high_idx = #low_idx + 1
         get $Low_Plan_Type $Low_Acct_Cd #Low_BudAmt #Low_BudPct
         From Dept_Bdgt_Array(#low_idx)  Dept_Ay_Plan_Type Dept_Ay_Acct_Cd
                                         Dept_Ay_Bdgt_Amt Dept_Ay_Bdgt_Pct
         get $High_Plan_Type $High_Acct_Cd #High_BudAmt #High_BudPct
         From Dept_Bdgt_Array(#high_idx) Dept_Ay_Plan_Type Dept_Ay_Acct_Cd
                                         Dept_Ay_Bdgt_Amt Dept_Ay_Bdgt_Pct
         if $Low_Plan_Type > $High_Plan_Type
            put $Low_Plan_Type $Low_Acct_Cd #Low_BudAmt #Low_BudPct
            into Dept_Bdgt_Array(#high_idx) Dept_Ay_Plan_Type Dept_Ay_Acct_Cd
                                            Dept_Ay_Bdgt_Amt Dept_Ay_Bdgt_Pct
            put $High_Plan_Type $High_Acct_Cd #High_BudAmt #High_BudPct
            into Dept_Bdgt_Array(#low_idx)  Dept_Ay_Plan_Type Dept_Ay_Acct_Cd
                                            Dept_Ay_Bdgt_Amt Dept_Ay_Bdgt_Pct
            add 1 to #moves
         end-if
         add 1 to #low_idx
      end-while
      if #moves = 0
         move 1 to #sorted
      end-if
   end-while

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Dept
   move 0 to #Max_Dept_Amt_Idx
   move 1 to #Dept_Idx

   while #Dept_Idx <= #Dept_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Dept_Bdgt_Array(#Dept_Idx)
          Dept_Ay_Plan_Type
          Dept_Ay_Acct_Cd
          Dept_Ay_Bdgt_Amt
          Dept_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Dept
         let #Max_Dept_Amt_Idx = #Dept_Idx
         let #Max_BudAmt_Dept = #Out_BudAmt
         let $Max_PlanTp_Dept = $Out_Plan_Type
         let $Max_AcctCd_Dept = $Out_Acct_Cd
      end-if

      add 1 to #Dept_Idx
   end-while

   !**  Write all budget rows as amounts, except the max row found above.  Hold
   !**   it until the end, and write it as 100% (the default funding row).

   move 0 to #Array_Found
   move 1 to #Dept_Idx
   move 0 to #Out_CurSeq

   while #Dept_Idx <= #Dept_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Dept_Bdgt_Array(#Dept_Idx)
          Dept_Ay_Plan_Type
          Dept_Ay_Acct_Cd
          Dept_Ay_Bdgt_Amt
          Dept_Ay_Bdgt_Pct

!     let #Out_BudPct = #Out_BudPct * #Dist_Adj_Factor
      let #Out_BudPct = 0
      let $Out_GLPayType = ' '
      let $Out_Benefit_Plan = ' '
      let $Out_Dedcd = ' '
      let $Out_Ded_Class = ' '
      let $Out_Override_Ind = 'Y'

      add 1 to #Out_CurSeq

      do INSERT-DED-LEVEL

      add 1 to #Dept_Idx

   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Plan_Type = ' '
   let $Out_Benefit_Plan = ' '
   let $Out_Dedcd = ' '
   let $Out_Ded_Class = ' '
   let $Out_Acct_Cd = $Max_AcctCd_Dept
   let $Out_Override_Ind = 'Y'
   add 1 to #Out_CurSeq

   do INSERT-DED-LEVEL

End-Procedure WRITE-DEPT-DEDN-DETAIL

!***********************************************************************
! Procedure: WRITE-POOL-DEDN-DETAIL                                    *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Position_Pool break level.                  *
!                                                                      *
! Called by: CONTROL-BREAK-POOL-BENS                                   *
!***********************************************************************
Begin-Procedure WRITE-POOL-DEDN-DETAIL

!   get #Pool_Tot_Dist from Pool_Bdgt_Array(0) Pool_Ay_Bdgt_Pct
!
!   if #Pool_Tot_Dist <> 0
!      let #Dist_Adj_Factor = 100 / #Pool_Tot_Dist
!   else
!      let #Dist_Adj_Factor = 0
!   end-if

   !**  Sort the Position Pool Array by plan type so the tables will look good.

   move 0 to #sorted
   while not #sorted
      move 0 to #moves
      move 1 to #low_idx
      while #low_idx < #Pool_Cnt
         let #high_idx = #low_idx + 1
         get $Low_Plan_Type $Low_Acct_Cd #Low_BudAmt #Low_BudPct
         From Pool_Bdgt_Array(#low_idx)  Pool_Ay_Plan_Type Pool_Ay_Acct_Cd
                                         Pool_Ay_Bdgt_Amt Pool_Ay_Bdgt_Pct
         get $High_Plan_Type $High_Acct_Cd #High_BudAmt #High_BudPct
         From Pool_Bdgt_Array(#high_idx) Pool_Ay_Plan_Type Pool_Ay_Acct_Cd
                                         Pool_Ay_Bdgt_Amt Pool_Ay_Bdgt_Pct
         if $Low_Plan_Type > $High_Plan_Type
            put $Low_Plan_Type $Low_Acct_Cd #Low_BudAmt #Low_BudPct
            into Pool_Bdgt_Array(#high_idx) Pool_Ay_Plan_Type Pool_Ay_Acct_Cd
                                            Pool_Ay_Bdgt_Amt Pool_Ay_Bdgt_Pct
            put $High_Plan_Type $High_Acct_Cd #High_BudAmt #High_BudPct
            into Pool_Bdgt_Array(#low_idx)  Pool_Ay_Plan_Type Pool_Ay_Acct_Cd
                                            Pool_Ay_Bdgt_Amt Pool_Ay_Bdgt_Pct
            add 1 to #moves
         end-if
         add 1 to #low_idx
      end-while
      if #moves = 0
         move 1 to #sorted
      end-if
   end-while

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Pool
   move 0 to #Max_Pool_Amt_Idx
   move 1 to #Pool_Idx

   while #Pool_Idx <= #Pool_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Pool_Bdgt_Array(#Pool_Idx)
          Pool_Ay_Plan_Type
          Pool_Ay_Acct_Cd
          Pool_Ay_Bdgt_Amt
          Pool_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Pool
         let #Max_Pool_Amt_Idx = #Pool_Idx
         let #Max_BudAmt_Pool = #Out_BudAmt
         let $Max_PlanTp_Pool = $Out_Plan_Type
         let $Max_AcctCd_Pool = $Out_Acct_Cd
      end-if

      add 1 to #Pool_Idx
   end-while

   !**  Write all budget rows as amounts, except the max row found above.  Hold
   !**   it until the end, and write it as 100% (the default funding row).

   move 0 to #Array_Found
   move 1 to #Pool_Idx
   move 0 to #Out_CurSeq

   while #Pool_Idx <= #Pool_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Pool_Bdgt_Array(#Pool_Idx)
          Pool_Ay_Plan_Type
          Pool_Ay_Acct_Cd
          Pool_Ay_Bdgt_Amt
          Pool_Ay_Bdgt_Pct


!     let #Out_BudPct = #Out_BudPct * #Dist_Adj_Factor
      let #Out_BudPct = 0.0
      let $Out_GLPayType = ' '
      let $Out_Benefit_Plan = ' '
      let $Out_Dedcd = ' '
      let $Out_Ded_Class = ' '
      let $Out_Override_Ind = 'Y'

      add 1 to #Out_CurSeq

      do INSERT-DED-LEVEL

      add 1 to #Pool_Idx

   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Plan_Type = ' '
   let $Out_Benefit_Plan = ' '
   let $Out_Dedcd = ' '
   let $Out_Ded_Class = ' '
   let $Out_Acct_Cd = $Max_AcctCd_Pool
   let $Out_Override_Ind = 'Y'
   add 1 to #Out_CurSeq

   do INSERT-DED-LEVEL

End-Procedure WRITE-POOL-DEDN-DETAIL

!***********************************************************************
! Procedure: WRITE-POSN-DEDN-MAX                                       *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Position level which has 100% distribution  *
!            and amount 0.0 (default record as required by system)     *
!                                                                      *
! Called by: CONTROL-BREAK-POSN-BENS                                   *
!***********************************************************************
Begin-Procedure WRITE-POSN-DEDN-MAX

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Posn
   move 0 to #Max_Posn_Amt_Idx
   move 1 to #Posn_Idx

   while #Posn_Idx <= #Posn_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Posn_Bdgt_Array(#Posn_Idx)
          Posn_Ay_Plan_Type
          Posn_Ay_Acct_Cd
          Posn_Ay_Bdgt_Amt
          Posn_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Posn
         let #Max_Posn_Amt_Idx = #Posn_Idx
         let #Max_BudAmt_Posn = #Out_BudAmt
         let $Max_PlanTp_Posn = $Out_Plan_Type
         let $Max_AcctCd_Posn = $Out_Acct_Cd
      end-if

      add 1 to #Posn_Idx
   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Plan_Type = ' '
   let $Out_Benefit_Plan = ' '
   let $Out_Dedcd = ' '
   let $Out_Ded_Class = ' '
   let $Out_Acct_Cd = $Max_AcctCd_Posn
   let $Out_Override_Ind = 'Y'

   do INSERT-DED-LEVEL
   add 1 to #Out_CurSeq

End-Procedure WRITE-POSN-DEDN-MAX

!***********************************************************************
! Procedure: WRITE-APPT-DEDN-MAX                                       *
! Descr:     This procedure will insert a new earnings level budget    *
!            record at the Position level which has 100% distribution  *
!            and amount 0.0 (default record as required by system)     *
!                                                                      *
! Called by: CONTROL-BREAK-APPT-BENS                                   *
!***********************************************************************
Begin-Procedure WRITE-APPT-DEDN-MAX

   !**  Find the largest Budget Amount value.  This will become the default
   !**   earnings line, with a DIST_PCT of 100% and the max sequence number.

   move 0 to #Array_Found
   move 0 to #Max_BudAmt_Appt
   move 0 to #Max_Appt_Amt_Idx
   move 1 to #Appt_Idx

   while #Appt_Idx <= #Appt_Cnt
      get $Out_Plan_Type
          $Out_Acct_Cd
          #Out_BudAmt
          #Out_BudPct
      From Appt_Bdgt_Array(#Appt_Idx)
          Appt_Ay_Plan_Type
          Appt_Ay_Acct_Cd
          Appt_Ay_Bdgt_Amt
          Appt_Ay_Bdgt_Pct

      if #Out_BudAmt > #Max_BudAmt_Appt
         let #Max_Appt_Amt_Idx = #Appt_Idx
         let #Max_BudAmt_Appt = #Out_BudAmt
         let $Max_PlanTp_Appt = $Out_Plan_Type
         let $Max_AcctCd_Appt = $Out_Acct_Cd
      end-if

      add 1 to #Appt_Idx
   end-while

   let #Out_BudPct = 100.00
   let #Out_BudAmt = 0.0
   let $Out_Plan_Type = ' '
   let $Out_Benefit_Plan = ' '
   let $Out_Dedcd = ' '
   let $Out_Ded_Class = ' '
   let $Out_Acct_Cd = $Max_AcctCd_Appt
   let $Out_Override_Ind = 'Y'

   do INSERT-DED-LEVEL
   add 1 to #Out_CurSeq

End-Procedure WRITE-APPT-DEDN-MAX

!***********************************************************************
! Procedure: VALIDATE-EARNS-BDGT                                       *
! Descr:     This procedure will read the current fiscal year's        *
!            earnings budget for an employee, position, pool, or dept. *
!            This ensures a valid deduction budget may also be written *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT-BENS                                   *
!            CONTROL-BREAK-POOL-BENS                                   *
!            CONTROL-BREAK-POSN-BENS                                   *
!            CONTROL-BREAK-APPT-BENS                                   *
!***********************************************************************
Begin-Procedure VALIDATE-EARNS-BDGT

   let #Earns_Budget_Found = 0

begin-SELECT
'X'

   let #Earns_Budget_Found = 1

FROM PS_DEPT_BUDGET_ERN BERN
WHERE BERN.SETID = $Save_SetID
  AND BERN.DEPTID = $Save_DeptID
  AND BERN.FISCAL_YEAR = #Out_Fiscal_Year
  AND BERN.POSITION_POOL_ID = $Out_Position_Pool_ID
  AND BERN.SETID_JOBCODE = ' '
  AND BERN.JOBCODE = ' '
  AND BERN.POSITION_NBR = $Out_Position_Nbr
  AND BERN.EMPLID = $Out_EmplID
  AND BERN.EMPL_RCD = #Out_Empl_Rcd
  AND BERN.EFFDT = $Out_Effdt
  AND BERN.EFFSEQ =
      (SELECT MAX(EFFSEQ)
        FROM PS_DEPT_BUDGET_ERN ERNSEQ
        WHERE ERNSEQ.SETID = BERN.SETID
        AND ERNSEQ.DEPTID = BERN.DEPTID
        AND ERNSEQ.FISCAL_YEAR = BERN.FISCAL_YEAR
        AND ERNSEQ.POSITION_POOL_ID = BERN.POSITION_POOL_ID
        AND ERNSEQ.SETID_JOBCODE = BERN.SETID_JOBCODE
        AND ERNSEQ.JOBCODE = BERN.JOBCODE
        AND ERNSEQ.POSITION_NBR = BERN.POSITION_NBR
        AND ERNSEQ.EMPLID = BERN.EMPLID
        AND ERNSEQ.EMPL_RCD = BERN.EMPL_RCD
        AND ERNSEQ.EFFDT = BERN.EFFDT)

end-SELECT

End-Procedure VALIDATE-EARNS-BDGT

!***********************************************************************
! Procedure: RESET-EXISTING-CAPS                                       *
! Descr:     For a rerun at a budget level run previously, this module *
!            selects the SetID / DeptID combinations for which the     *
!            budget caps must be reset                                 *
!                                                                      *
! Called by: MAINLINE                                                  *
!***********************************************************************
Begin-Procedure RESET-EXISTING-CAPS

let $SQL-STATEMENT = 'BUD008.SQR, SELECT, PS_DEPT_BUDGET_DED'
Begin-SELECT  DISTINCT  on-error=SQL-Error
SUB_DEP_WRK.SETID_DEPT
SUB_DEP_WRK.DEPTID

   do REDUCE-BDGT-CAPS

FROM PS_BD_POS_POOL_WRK SUB_DEP_WRK
end-SELECT

End-Procedure RESET-EXISTING-CAPS

!***********************************************************************
! Procedure: REDUCE-BDGT-CAPS                                          *
! Descr:     For a rerun at a budget level run previously, this module *
!            resets the budget caps for a particular SetID and DEPTID  *
!                                                                      *
! Called by: RESET-EXISTING-CAPS                                       *
!***********************************************************************
Begin-Procedure REDUCE-BDGT-CAPS

let $SQL-STATEMENT = 'BUD008.SQR, SELECT, PS_DEPT_BUDGET_DED'
Begin-SELECT on-error=SQL-Error
SUB_DEP_DED.SETID
SUB_DEP_DED.DEPTID
SUB_DEP_DED.POSITION_POOL_ID
SUB_DEP_DED.SETID_JOBCODE
SUB_DEP_DED.JOBCODE
SUB_DEP_DED.POSITION_NBR
SUB_DEP_DED.EMPLID
SUB_DEP_DED.EMPL_RCD
SUM(SUB_DEP_DED.BUDGET_AMT) &SUB_DEP_DED.OLD_BDGT_AMT

   do REDUCE-DEPT-CAP-AMT

FROM PS_DEPT_BUDGET_DED SUB_DEP_DED
   , PS_DEPT_BUDGET SUB_DEP_BUD
WHERE SUB_DEP_BUD.SETID              = &SUB_DEP_WRK.SETID_DEPT
  AND SUB_DEP_BUD.DEPTID             = &SUB_DEP_WRK.DEPTID
  AND SUB_DEP_BUD.FISCAL_YEAR        = #Prm_Fiscal_Year
  AND SUB_DEP_BUD.EFFDT              = $Prm_FromDate
  AND SUB_DEP_BUD.EFFSEQ             = 0
  AND SUB_DEP_DED.SETID              = SUB_DEP_BUD.SETID
  AND SUB_DEP_DED.DEPTID             = SUB_DEP_BUD.DEPTID
  AND SUB_DEP_DED.FISCAL_YEAR        = SUB_DEP_BUD.FISCAL_YEAR
  AND SUB_DEP_DED.POSITION_POOL_ID   = SUB_DEP_BUD.POSITION_POOL_ID
  AND SUB_DEP_DED.SETID_JOBCODE      = SUB_DEP_BUD.SETID_JOBCODE
  AND SUB_DEP_DED.JOBCODE            = SUB_DEP_BUD.JOBCODE
  AND SUB_DEP_DED.POSITION_NBR       = SUB_DEP_BUD.POSITION_NBR
  AND SUB_DEP_DED.EMPLID             = SUB_DEP_BUD.EMPLID
  AND SUB_DEP_DED.EMPL_RCD           = SUB_DEP_BUD.EMPL_RCD
  AND SUB_DEP_DED.EFFDT              = SUB_DEP_BUD.EFFDT
  AND SUB_DEP_DED.EFFSEQ             = SUB_DEP_BUD.EFFSEQ
  AND SUB_DEP_DED.BUDGET_AMT        <> 0.00
  AND (SUB_DEP_BUD.BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
   OR  SUB_DEP_BUD.BUDGET_LEVEL_INDC = 'D')
GROUP BY SUB_DEP_DED.SETID, SUB_DEP_DED.DEPTID, SUB_DEP_DED.POSITION_POOL_ID,
         SUB_DEP_DED.SETID_JOBCODE, SUB_DEP_DED.JOBCODE, SUB_DEP_DED.POSITION_NBR,
         SUB_DEP_DED.EMPLID, SUB_DEP_DED.EMPL_RCD
end-SELECT

End-Procedure REDUCE-BDGT-CAPS

!***********************************************************************
! Procedure: REDUCE_DEPT_CAP_AMT                                       *
! Descr:     This procedure will update the department budget record   *
!            including the applicable budget cap amounts               *
!                                                                      *
! Called by: CLEAN-DEDN-BUDGETS                                        *
!***********************************************************************
Begin-Procedure REDUCE-DEPT-CAP-AMT

   let $SQL-STATEMENT = 'BUD008.SQR, SUBTRACT, PS_DEPT_BUDGET'
begin-sql on-error=SQL-Error
UPDATE PS_DEPT_BUDGET
   SET OVERALL_BDGT_CAP = OVERALL_BDGT_CAP - &SUB_DEP_DED.OLD_BDGT_AMT
 WHERE SETID              = &SUB_DEP_DED.SETID
   AND DEPTID             = &SUB_DEP_DED.DEPTID
   AND FISCAL_YEAR        = #Prm_Fiscal_Year
   AND POSITION_POOL_ID   = &SUB_DEP_DED.POSITION_POOL_ID
   AND SETID_JOBCODE      = ' '
   AND JOBCODE            = ' '
   AND POSITION_NBR       = &SUB_DEP_DED.POSITION_NBR
   AND EMPLID             = &SUB_DEP_DED.EMPLID
   AND EMPL_RCD           = &SUB_DEP_DED.EMPL_RCD
   AND EFFDT              = $Prm_FromDate
   AND EFFSEQ             = 0
   AND (BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
    OR  BUDGET_LEVEL_INDC = 'D' )
end-sql

End-Procedure REDUCE-DEPT-CAP-AMT

!***********************************************************************
! Procedure: CLEAN-DEDN-BUDGETS                                        *
! Descr:     Empties (deletes the department budget tables for a given *
!            SetID, Department, Fiscal Year, and Budget Level.  The    *
!            run control will confirm this action with the user.       *
!                                                                      *
! Called by: MAINLINE                                                  *
!***********************************************************************
Begin-Procedure CLEAN-DEDN-BUDGETS

let $SQL-STATEMENT = 'BUD008.SQR, SELECT, PS_DEPT_BUDGET'
Begin-SELECT DISTINCT  on-error=SQL-Error
CLEAN_BEN_BUD.SETID
CLEAN_BEN_BUD.DEPTID
CLEAN_BEN_BUD.FISCAL_YEAR
CLEAN_BEN_BUD.POSITION_POOL_ID
CLEAN_BEN_BUD.SETID_JOBCODE
CLEAN_BEN_BUD.JOBCODE
CLEAN_BEN_BUD.POSITION_NBR
CLEAN_BEN_BUD.EMPLID
CLEAN_BEN_BUD.EMPL_RCD
CLEAN_BEN_BUD.EFFDT

   do DELETE-DEDN-BUDGET-DED

FROM PS_DEPT_BUDGET     CLEAN_BEN_BUD
   , PS_BD_POS_POOL_WRK CLEAN_BEN_WRK
   , PS_BD_DISTR_TBL    DISTR_TBL_WRK
WHERE CLEAN_BEN_BUD.SETID         = CLEAN_BEN_WRK.SETID_DEPT
  AND CLEAN_BEN_BUD.DEPTID        = CLEAN_BEN_WRK.DEPTID
  AND CLEAN_BEN_BUD.FISCAL_YEAR   = #Prm_Fiscal_Year
  AND DISTR_TBL_WRK.BUSINESS_UNIT = CLEAN_BEN_WRK.BUSINESS_UNIT_BD
  AND DISTR_TBL_WRK.POSITION_NBR  = CLEAN_BEN_WRK.POSITION_NBR
  AND DISTR_TBL_WRK.EMPLID        = CLEAN_BEN_WRK.EMPLID
  AND DISTR_TBL_WRK.EMPL_RCD      = CLEAN_BEN_WRK.EMPL_RCD
  AND DISTR_TBL_WRK.EFFDT    = CLEAN_BEN_WRK.EFFDT
  AND DISTR_TBL_WRK.COMPENSATION_IND  = 'B'
  AND (CLEAN_BEN_BUD.BUDGET_LEVEL_INDC = $Prm_Budget_Level_Indc
   OR  CLEAN_BEN_BUD.BUDGET_LEVEL_INDC = 'D')
end-SELECT

   do COMMIT-TRANSACTION

End-Procedure CLEAN-DEDN-BUDGETS

!***********************************************************************
! Procedure: DELETE-DEDN-BUDGET-DED                                    *
! Descr:     Empties (deletes) the department budget ded'ns tables     *
!            for a given SetID, Department, Fiscal Year, and Budget    *
!            Level.                                                    *
!                                                                      *
! Called by: CLEAN-DEDN-BUDGETS                                        *
!***********************************************************************
Begin-Procedure DELETE-DEDN-BUDGET-DED

let $SQL-STATEMENT = 'BUD008.SQR, DELETE, PS_DEPT_BUDGET_DED'
begin-sql on-error=SQL-Error
DELETE FROM PS_DEPT_BUDGET_DED
WHERE SETID            = &CLEAN_BEN_BUD.SETID
  AND DEPTID           = &CLEAN_BEN_BUD.DEPTID
  AND POSITION_POOL_ID = &CLEAN_BEN_BUD.POSITION_POOL_ID
  AND SETID_JOBCODE    = &CLEAN_BEN_BUD.SETID_JOBCODE
  AND JOBCODE          = &CLEAN_BEN_BUD.JOBCODE
  AND POSITION_NBR     = &CLEAN_BEN_BUD.POSITION_NBR
  AND EMPLID           = &CLEAN_BEN_BUD.EMPLID
  AND EMPL_RCD         = &CLEAN_BEN_BUD.EMPL_RCD
  AND EFFDT            = &CLEAN_BEN_BUD.EFFDT
  AND FISCAL_YEAR      = #Prm_Fiscal_Year
end-SQL
End-Procedure DELETE-DEDN-BUDGET-DED

!***********************************************************************
! Procedure: INSERT-DED-LEVEL                                          *
! Descr:     This procedure will insert a new deduction level appoint- *
!            ment, position, or position pool budget record.           *
!                                                                      *
! Called by: CONTROL-BREAK-DEPT-BENS                                   *
!            CONTROL-BREAK-POOL-BENS                                   *
!            CONTROL-BREAK-POSN-BENS                                   *
!            CONTROL-BREAK-APPT-BENS                                   *
!***********************************************************************
Begin-Procedure INSERT-DED-LEVEL

   let $Out_Acct_Cd   = nvl($Out_Acct_Cd,' ')
   let $Out_GLPayType = nvl($Out_GLPayType,' ')
   let $Out_Plan_Type = nvl($Out_Plan_Type,' ')

   let $Out_Ded_key   = $Out_Plan_Type || $Out_Benefit_Plan || $Out_DedCd ||
        $Out_Ded_Class                                !hp999 Retro Dist




   let $SQL-STATEMENT = 'BUD008.SQR, INSERT, PS_DEPT_BUDGET_DED'
begin-sql on-error=SQL-Error
INSERT INTO PS_DEPT_BUDGET_DED (
   SETID,
   DEPTID,
   FISCAL_YEAR,
   POSITION_POOL_ID,
   SETID_JOBCODE,
   JOBCODE,
   POSITION_NBR,
   EMPLID,
   EMPL_RCD,
   EFFDT,
   EFFSEQ,                                               !hp999 Retro Dist
   DEPT_BDGT_DED_KEY,                                    !hp999 Retro Dist
   PLAN_TYPE,
   BENEFIT_PLAN,
   DEDCD,
   DED_CLASS,
   BUDGET_SEQ,
   ACCT_CD,
   GL_PAY_TYPE,
   BUDGET_AMT,
   DIST_PCT,
   FUNDING_END_DT,
   HP_USED_DISTRIBUTN,                                   !hp999 Retro Dist
   HP_EXCESS,                                            !hp999 Retro Dist
   OVERRIDE_IND)
VALUES (
   $Save_SetID,
   $Save_DeptID,
   #Prm_Fiscal_Year,
   $Out_Position_Pool_ID,
   ' ',
   ' ',
   $Out_Position_Nbr,
   $Out_EmplID,
   #Out_Empl_Rcd,
   $Out_Effdt,
   0,                                                    !hp999 Retro Dist
   $Out_Ded_key,
   $Out_Plan_Type,
   $Out_Benefit_Plan,
   $Out_DedCd,
   $Out_Ded_Class,
   #Out_CurSeq,
   $Out_Acct_Cd,
   $Out_GLPayType,
   #Out_BudAmt,
   #Out_BudPct,
   null,
   'N',                                                  !hp999 Retro Dist
   'N',                                                  !hp999 Retro Dist
   $Out_Override_Ind)
end-sql

   add 1 to #Trans_Cnt

End-Procedure INSERT-DED-LEVEL

!***********************************************************************
! Procedure: INITIALIZE-ARRAY-DEPT                                     *
! Descr:     Resets all values in Appointment Arrays                   *
!                                                                      *
! Called by: SETUP-NEW-DEPT-BENS                                       *
!***********************************************************************
begin-procedure INITIALIZE-ARRAY-DEPT

  let #Array_Idx = 0

  while #Array_Idx < {deptbdgtmax}

     put ' ' ' ' 0 0 0
     into Dept_Bdgt_Array(#Array_Idx)
        Dept_Ay_Plan_Type
        Dept_Ay_Acct_Cd
        Dept_Ay_Bdgt_Amt
        Dept_Ay_Bdgt_Pct
        Dept_Ay_Bdgt_FTE
     add 1 to #Array_Idx
  end-while

  let #Dept_Cnt = 0

end-procedure INITIALIZE-ARRAY-DEPT

!***********************************************************************
! Procedure: INITIALIZE-ARRAY-POOL                                     *
! Descr:     Resets all values in Appointment Arrays                   *
!                                                                      *
! Called by: SETUP-NEW-DEPT-BENS                                       *
!***********************************************************************
begin-procedure INITIALIZE-ARRAY-POOL

  let #Array_Idx = 0

  while #Array_Idx < {poolbdgtmax}

     put ' ' ' ' 0 0
     into Pool_Bdgt_Array(#Array_Idx)
        Pool_Ay_Plan_Type
        Pool_Ay_Acct_Cd
        Pool_Ay_Bdgt_Amt
        Pool_Ay_Bdgt_Pct
     add 1 to #Array_Idx
  end-while

  let #Pool_Cnt = 0

end-procedure INITIALIZE-ARRAY-POOL

!***********************************************************************
! Procedure: INITIALIZE-ARRAY-POSN                                     *
! Descr:     Resets all values in Appointment Arrays                   *
!                                                                      *
! Called by: SETUP-NEW-DEPT-BENS                                       *
!***********************************************************************
begin-procedure INITIALIZE-ARRAY-POSN

  let #Array_Idx = 0

  while #Array_Idx < {posnbdgtmax}

     put ' ' ' ' 0 0
     into Posn_Bdgt_Array(#Array_Idx)
        Posn_Ay_Plan_Type
        Posn_Ay_Acct_Cd
        Posn_Ay_Bdgt_Amt
        Posn_Ay_Bdgt_Pct
     add 1 to #Array_Idx
  end-while

  let #Posn_Cnt = 0

end-procedure INITIALIZE-ARRAY-POSN

!***********************************************************************
! Procedure: INITIALIZE-ARRAY-APPT                                     *
! Descr:     Resets all values in Appointment Arrays                   *
!                                                                      *
! Called by: SETUP-NEW-DEPT-BENS                                       *
!***********************************************************************
begin-procedure INITIALIZE-ARRAY-APPT

  let #Array_Idx = 0

  while #Array_Idx < {apptbdgtmax}

     put ' ' ' ' 0 0
     into Appt_Bdgt_Array(#Array_Idx)
        Appt_Ay_Plan_Type
        Appt_Ay_Acct_Cd
        Appt_Ay_Bdgt_Amt
        Appt_Ay_Bdgt_Pct
     add 1 to #Array_Idx
  end-while

  let #Appt_Cnt = 0

end-procedure INITIALIZE-ARRAY-APPT

!***********************************************************************
! Procedure: FETCH-ACCT-CODE                                           *
! Descr:     Using the chart fields sent across in BD_DISTR_TBL,       *
!            selects the corresponding ACCT_CD from the ACCT_CD table. *
!            If not found, the Default ACCT_CD is substituted.         *
!                                                                      *
! Called by: WRITE-BUDGETS-FILE                                        *
!***********************************************************************
Begin-Procedure FETCH-ACCT-CODE

   move 0 to #Account_Cd_Found

   do FETCH-VALID-COMBO-CD

   if #Account_Cd_Found = 0
       do FETCH-CF-TRANSACTION
   end-if

   if #Account_Cd_Found = 0
      if $Compensation_ind = 'S'
         let $Cur_Acct_Cd = rtrim($Prm_Acct_Cd, ' ')
      else
         let $Cur_Acct_Cd = rtrim($Prm_Acct_Cd_Ded, ' ')
      end-if
   end-if

End-Procedure FETCH-ACCT-CODE

!***********************************************************************
! Procedure: FETCH-VALID-COMBO-CD                                      *
!***********************************************************************
Begin-Procedure FETCH-VALID-COMBO-CD

Begin-SELECT
VCB.FDM_HASH
VCB.FDM_COMBO_CD

   move 1 to #Account_Cd_Found

   move &VCB.FDM_COMBO_CD     to $Cur_Acct_Cd
   let $Cur_Acct_Cd            = rtrim ($Cur_Acct_Cd, ' ')
   let $VCB_frmt_Descr         = 'User Account ' || substr($Cur_Acct_Cd, 1, 13)
   let $VCB_frmt_DescrShort    = substr($Cur_Acct_Cd, 1, 10)

   let $CF_Transaction_Exists = 'N'
   do READ-CF-TRANSACTION

   if $CF_Transaction_Exists = 'N'
       do INSERT-CF-TRANSACTION
   end-if

FROM PS_VALID_COMBO_TBL VCB
WHERE VCB.ACCOUNT          = $Bdd_Account
  AND VCB.ALTACCT          = $Bdd_Altacct
  AND VCB.OPERATING_UNIT   = $Bdd_Operating_Unit
  AND VCB.DEPTID_CF        = $Bdd_Deptid
  AND VCB.PRODUCT          = $Bdd_Product
  AND VCB.PROJECT_ID       = $Bdd_Project_ID
  AND VCB.AFFILIATE        = $Bdd_Affiliate
  AND VCB.FUND_CODE        = $Bdd_Fund_Code
  AND VCB.PROGRAM_CODE     = $Bdd_Program_Code
  AND VCB.CLASS_FLD        = $Bdd_Class_Fld
  AND VCB.BUDGET_REF       = $Bdd_Budget_Ref
  AND VCB.CHARTFIELD1      = $Bdd_Chartfield1
  AND VCB.CHARTFIELD2      = $Bdd_Chartfield2
  AND VCB.CHARTFIELD3      = $Bdd_Chartfield3
  AND VCB.AFFILIATE_INTRA1 = $Bdd_Affiliate_intra1
  AND VCB.AFFILIATE_INTRA2 = $Bdd_Affiliate_intra2
  AND VCB.VALID_FLAG       = 'Y'
End-SELECT

End-Procedure FETCH-VALID-COMBO-CD

!***********************************************************************
! Procedure: FETCH-CF-TRANSACTION                                      *
!***********************************************************************
Begin-Procedure FETCH-CF-TRANSACTION

Begin-SELECT
ACT.ACCT_CD

   move 1 to #Account_Cd_Found

   move &ACT.ACCT_CD          to $Cur_Acct_Cd
   let $Cur_Acct_Cd        = rtrim ($Cur_Acct_Cd, ' ')

FROM PS_ACCT_CD_TBL ACT
WHERE ACT.ACCOUNT          = $Bdd_Account
  AND ACT.ALTACCT          = $Bdd_Altacct
  AND ACT.OPERATING_UNIT   = $Bdd_Operating_Unit
  AND ACT.DEPTID_CF        = $Bdd_Deptid
  AND ACT.PRODUCT          = $Bdd_Product
  AND ACT.PROJECT_ID       = $Bdd_Project_ID
  AND ACT.AFFILIATE        = $Bdd_Affiliate
  AND ACT.FUND_CODE        = $Bdd_Fund_Code
  AND ACT.PROGRAM_CODE     = $Bdd_Program_Code
  AND ACT.CLASS_FLD        = $Bdd_Class_Fld
  AND ACT.BUDGET_REF       = $Bdd_Budget_Ref
  AND ACT.CHARTFIELD1      = $Bdd_Chartfield1
  AND ACT.CHARTFIELD2      = $Bdd_Chartfield2
  AND ACT.CHARTFIELD3      = $Bdd_Chartfield3
  AND ACT.AFFILIATE_INTRA1 = $Bdd_Affiliate_intra1
  AND ACT.AFFILIATE_INTRA2 = $Bdd_Affiliate_intra2
End-SELECT

End-Procedure FETCH-CF-TRANSACTION

!***********************************************************************
! Procedure: READ-CF-TRANSACTION                                       *
!***********************************************************************
Begin-Procedure READ-CF-TRANSACTION

Begin-SELECT
GCF.ACCT_CD

   let $CF_Transaction_Exists = 'Y'

FROM PS_ACCT_CD_TBL GCF
WHERE GCF.FDM_HASH         = &VCB.FDM_HASH
End-SELECT

End-Procedure READ-CF-TRANSACTION

!***********************************************************************
! Procedure: INSERT-CF-TRANSACTION                                     *
!***********************************************************************
Begin-Procedure INSERT-CF-TRANSACTION

   let $SQL-Statement = 'BUD008.SQR, INSERT, PS_ACCT_CD_TBL'

begin-SQL on-error=SQL-Error
INSERT INTO PS_ACCT_CD_TBL (
   FDM_HASH,
   ACCT_CD,
   DESCR,
   ACCOUNT,
   DEPTID_CF,
   PROJECT_ID,
   PRODUCT,
   FUND_CODE,
   PROGRAM_CODE,
   CLASS_FLD,
   AFFILIATE,
   OPERATING_UNIT,
   ALTACCT,
   BUDGET_REF,
   CHARTFIELD1,
   CHARTFIELD2,
   CHARTFIELD3,
   AFFILIATE_INTRA1,
   AFFILIATE_INTRA2,
   DESCRSHORT,
   DIRECT_CHARGE,
   ENCUMB_ACCOUNT,
   PRE_ENCUMB_ACCOUNT,
   PRORATE_LIABILITY )
VALUES (
   &VCB.FDM_HASH ,
   &VCB.FDM_COMBO_CD,
   $VCB_Frmt_Descr,
   $Bdd_Account,
   $Bdd_Deptid,
   $Bdd_Project_ID,
   $Bdd_Product,
   $Bdd_Fund_Code,
   $Bdd_Program_Code,
   $Bdd_Class_Fld,
   $Bdd_Affiliate,
   $Bdd_Operating_Unit,
   $Bdd_Altacct,
   $Bdd_Budget_Ref ,
   $Bdd_Chartfield1,
   $Bdd_Chartfield2,
   $Bdd_Chartfield3,
   $Bdd_Affiliate_intra1,
   $Bdd_Affiliate_intra2,
   $VCB_Frmt_DescrShort,
   'N',
   ' ',
   ' ',
   'Y' )
end-sql

End-Procedure INSERT-CF-TRANSACTION

!***********************************************************************
! Procedure: PROCESS-TRANSACTION                                       *
! Descr:     Handles starting and committing database transactions     *
!                                                                      *
! Called by: OUTPUT-WORK-RECORD                                        *
!***********************************************************************
begin-procedure PROCESS-TRANSACTION

   add #Trans_Cnt to #Commit_Cnt

   if #Commit_Cnt >= #Gbl_Commit_After
      do Commit-Transaction
      let #Commit_cnt = 0

      show ' '
      show 'Committing Database Transaction '
      show 'SetId ' $Trans_SetId ' was last setid processed. '
      show 'Department ' $Trans_DeptID ' was last department processed.'

   end-if

   let #Trans_Cnt = 0

end-procedure PROCESS-TRANSACTION

!***********************************************************************
! Procedure: WRAPUP                                                    *
! Descr:     This paragraph ends the report process and updates the    *
!            status of the job in the process scheduler                *
!                                                                      *
! Called by: BEGIN-REPORT                                              *
!***********************************************************************
Begin-Procedure WRAPUP

!  do Delete-Run-Control
   do Commit-Transaction
   do Reset
   do Successful-EOJ

End-Procedure WRAPUP

!***********************************************************************
! Procedure: DELETE-RUN-CONTROL                                        *
! Descr:     Deletes run control information from run control table.   *
!                                                                      *
! Called by: WRAPUP                                                    *
!***********************************************************************
Begin-Procedure DELETE-RUN-CONTROL

   let $SQL-Statement = 'BUD008.SQR, DELETE, PS_RUN_CNTL_BDGT'
begin-sql on-error=SQL-Error
DELETE FROM PS_RUN_CNTL_BDGT
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-sql

End-Procedure DELETE-RUN-CONTROL

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#include 'btrnctl1.sqc'  !Get Variables entered through Process Scheduler
#include 'btgetval.sqc'  !Formats run control parameters.
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#include 'datemath.sqc'
#include 'askaod.sqc'
#include 'getactrs.sqc'
#include 'getdptnm.sqc'
