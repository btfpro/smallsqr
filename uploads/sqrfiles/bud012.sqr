
!***********************************************************************
!  BUD012.SQR:  Budgeted FTE Roll-Up Report                            *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
! Report Description: This report is a template that customers         *
! can use to create their own roll up reports. This particular report  *
! has been designed to print the total filled/vacant FTE for each dept *
! being reported.  The totals are rolled up up to the department       *
! specified in the run control table (RUN_CTL_EG). If a blank deptid   *
! has been specified,the report will print all the departments         *
! belonging to the DEPT_SECURITY tree branch, starting with the        *
! highest deptid, of tree_node_num = 1.                                *
!                                                                      *
!                                                                      *
! Process Description: This report passes control to EGROLLUP.SQC      *
! which is responsible for retrieving the dept ids that will be        *
! rolled up.  The sqc performs a dynamic fetch of a department's       *
! tree level number, tree node number and the low level tree nodes     *
! (deptids) under that department (ie. it returns the tree nodes       *
! from top to bottom until the last tree node is reached).             *
! For every row deptid that it returns, the sqc returns control to     *
! this sqr for roll up processing and printing.                        *
! For more information on the process please refer to EGROLLUP.SQC     *
!                                                                      *
! The following procedures are specific for this particular report     *
! and must be customized for your own organization reporting           *
! requirements:                                                        *
!     ARRAY-INITIALIZATION                                             *
!     SPECIFIC-REPORT-HEADINGS                                         *
!     GET-DEPARTMENT-INFORMATION                                       *
!     GET-DEPARTMENT-ACTUAL-FTE                                        *
!     INITIALIZE-ARRAY-TOTALS                                          *
!     ADD-DEPT-TOTALS-IN-ARRAY                                         *
!     GET-ARRAY-TOTALS                                                 *
!     PRINT-DETAIL-LINE                                                *
!     PRINT-ROLLUP-TOTALS                                              *
!     PRINT-FINAL-ROLLUP-TOTALS                                        *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:24:56                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Landscape Setup

! See egrollup.sqc for rollup process
#define rollup_return Rollup-Reporting



!***********************************************************************
! REPORT
! Begins a program or a report.
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report



!***********************************************************************
! HEADING
! Begins a heading section
!***********************************************************************
begin-heading 8

       ! Print top page heading
       move $date_head to $AsOfDate
       #include 'stdhtr03.sqc'         ! for standard heading         !F-LPARKER-125 (CAMI)
       print $BUD012_SETID             (+1,1)                         !F-LPARKER-125 (CAMI)
       print $rollup_cntl_setid        (,+2,)
       print $BUD012_DEPT              (,+2,)                         !F-LPARKER-125 (CAMI)
       print $dept_head                (,+2,)
       print $BUD012_FISCAL_YEAR       (,+5,)                         !F-LPARKER-125 (CAMI)
       print #rollup_cntl_fiscalyr     (,+2,) edit 9999
       print ''                        (+2,,)

       do Specific-Report-Headings


end-heading



!***********************************************************************
! F-LPARKER-125 (CAMI)                                                 *
! Read language-dependent text from the database using BUD012 program  *
! ids.                                                                 *
!***********************************************************************
begin-procedure REPORT-TRANSLATION

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('BUD012', 'ALL_FTE_ACTUAL',$BUD012_ALL_FTE_ACT, #DW)
  do Get_Field_Information ('BUD012', 'ALL_FTE_CAP',  $BUD012_ALL_FTE_CAP, #DW)
  do Get_Field_Information ('BUD012', 'ALL_FTE_VAR',  $BUD012_ALL_FTE_VAR, #DW)
  do Get_Field_Information ('BUD012', 'AS_OF_DATE',   $BUD012_AS_OF_DATE,  #DW)
  do Get_Field_Information ('BUD012', 'CLASS_INDC',   $BUD012_CLASS_INDC,  #DW)
  do Get_Field_Information ('BUD012', 'DEPT',         $BUD012_DEPT,        #DW)
  do Get_Field_Information ('BUD012', 'DEPT_NAME',    $BUD012_DEPT_NAME,   #DW)
  do Get_Field_Information ('BUD012', 'DEPTID',       $BUD012_DEPTID,      #DW)
  do Get_Field_Information ('BUD012', 'END_REPORT',   $BUD012_END_REPORT,  #DW)
  do Get_Field_Information ('BUD012', 'FISCAL_YEAR',  $BUD012_FISCAL_YEAR, #DW)
  do Get_Field_Information ('BUD012', 'FTE_ACT',      $BUD012_FTE_ACT,     #DW)
  do Get_Field_Information ('BUD012', 'FTE_CAP',      $BUD012_FTE_CAP,     #DW)
  do Get_Field_Information ('BUD012', 'FTE_VAR',      $BUD012_FTE_VAR,     #DW)
  do Get_Field_Information ('BUD012', 'LEVEL',        $BUD012_LEVEL,       #DW)
  do Get_Field_Information ('BUD012', 'NONE_1',       $BUD012_NONE_1,      #DW)
  do Get_Field_Information ('BUD012', 'NONE_2',       $BUD012_NONE_2,      #DW)
  do Get_Field_Information ('BUD012', 'PRINT_OPTNS',  $BUD012_PRINT_OPTNS, #DW)
  do Get_Field_Information ('BUD012', 'REPORT_TITLE', $REPORTTITLE,        #DW)
  do Get_Field_Information ('BUD012', 'ROLLUP_FLAG',  $BUD012_ROLLUP_FLAG, #DW)
  do Get_Field_Information ('BUD012', 'SETID',        $BUD012_SETID,       #DW)
  do Get_Field_Information ('BUD012', 'SETID_DEPTID', $BUD012_SETID_DEPTID,#DW)
  do Get_Field_Information ('BUD012', 'SUCCESSFUL',   $BUD012_SUCCESSFUL,  #DW)
  do Get_Field_Information ('BUD012', 'TOTAL',        $BUD012_TOTAL,       #DW)
  do Get_Field_Information ('BUD012', 'TOTAL_RECS',   $BUD012_TOTAL_RECS,  #DW)

end-procedure



!***********************************************************************
! HOUSEKEEPING                                                         *
! This procedure performs the application initializations.  Formats    *
! variables for use.  Calls the procedures to get input parameters.    *
!***********************************************************************
begin-procedure HOUSEKEEPING

  move 'BUD012' to $ReportID                                          !F-LPARKER-125 (CAMI)

  do INIT-DATETIME
  do GET-CURRENT-DATETIME

  display 'Report Began: ' noline
  display &SysDateTime
  display ''

  do STDAPI-INIT
  do ROLLUP-PARMS
  do REPORT-TRANSLATION                                               !F-LPARKER-125 (CAMI)


  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display ''
  display ''
  display $BUD012_SETID_DEPTID noline                                 !F-LPARKER-125 (CAMI)
  display ' ' noline
  display $rollup_cntl_setid noline
  display '/' noline
  display $rollup_cntl_deptid noline
  display ''
  display $BUD012_FISCAL_YEAR noline                                  !F-LPARKER-125 (CAMI)
  display ' ' noline
  display #rollup_cntl_fiscalyr
  display ''
  display $BUD012_AS_OF_DATE noline                                   !F-LPARKER-125 (CAMI)
  display ' ' noline
  display $rollup_cntl_asofdate
  display ''
  display $BUD012_ROLLUP_FLAG noline                                  !F-LPARKER-125 (CAMI)
  display ' ' noline
  display $rollup_cntl_flag
  display ''
  display $BUD012_PRINT_OPTNS noline                                  !F-LPARKER-125 (CAMI)
  display ' ' noline
  display $rollup_cntl_detail
  display ''

  do Array-Initialization

  let #curr_array = 0
  let #Total_Proc_Count = 0
  let #prev_level = 0
  let $first_level = 'Y'

end-procedure HOUSEKEEPING



!***********************************************************************
! MAINLINE                                                             *
! This procedure is the main processing paragraph.  It performs        *
! application specific record processing.                              *
!***********************************************************************
begin-procedure MAINLINE


do Rollup-Control
do Print-Final-Rollup-Totals


end-procedure MAINLINE



!***********************************************************************
! ROLLUP-REPORTING                                                     *
! This is the routine that collects and prints the informaion for      *
! the rollup report                                                    *
!***********************************************************************
begin-procedure ROLLUP-REPORTING


do Get-Department-Information


if $first_level = 'Y'
   let $dept_head = rtrim($rollup_cntl_deptid,' ') || ' - ' || rtrim($rollup_cntl_deptname,' ')
   let $date_head = substr($rollup_cntl_asofdate,1,11)

   do Put-Dept-Lvl-Into-Array

   let $first_level = 'N'
end-if

if $rollup_cntl_flag = 'N'
   do Get-Curr-Dept-Lvl-Array
   do Add-Dept-Totals-In-Array

   if #rollup_cntl_curr_level <> #prev_level and $rollup_cntl_detail = 'D'
      print ''     (+1,,)
   end-if
else

evaluate #rollup_cntl_curr_level

   when > #prev_level
      let #curr_array = #curr_array + 1

      do Put-Dept-Lvl-Into-Array
      do Rollup-Totals

      if $rollup_cntl_detail = 'D'
         print ''     (+1,,)
      end-if
      break

   when = #prev_level
      do Put-Dept-Lvl-Into-Array
!      do Add-Dept-Totals-In-Array
      do Rollup-Totals
      break

   when < #prev_level
      do Clear-Curr-Dept-Lvl-Array

      while 1
         let #curr_array = #curr_array - 1

         do Get-Curr-Dept-Lvl-Array

         if #ArrayLevel_Num < #rollup_cntl_curr_level
            let #curr_array = #curr_array + 1
            break
         end-if

         do Print-Rollup-Totals
         do Clear-Curr-Dept-Lvl-Array
      end-while

      do Put-Dept-Lvl-Into-Array
      do Rollup-Totals
      break
end-evaluate
end-if


if $rollup_cntl_detail = 'D'
   do Print-Detail-Line
end-if

let #prev_level = #rollup_cntl_curr_level
let #Total_Proc_Count = #Total_Proc_Count + 1

end-procedure ROLLUP-REPORTING



!***********************************************************************
! ARRAY-INITIALIZATION
! Creates an array for the department information.  The first 3 fields
! of the array are mandatory.  The customized fields are defined
! following ArrayDeptName.
!***********************************************************************
begin-procedure ARRAY-INITIALIZATION
  create-array name=Rollup_Array size=10             -
         field=ArrayLevel_Num:number                 -
         field=ArrayDeptid:char                      -
         field=ArrayDeptName:char                    -
         field=ArrayFTECAP:number                    -
         field=ArrayActual_FTE:number                -
         field=ArrayALLFTECAP:number                 -
         field=ArrayALLActual_FTE:number

  create-array name=Class_Array size=3               -
         field=ArrayClassIndc:char                   -
         field=ArrayClassFTECAP:number               -
         field=ArrayClassFTE:number


end-procedure ARRAY-INITIALIZATION



!***********************************************************************
! SPECIFIC-REPORT-HEADINGS
! Print headings for this particular report
!***********************************************************************
begin-procedure SPECIFIC-REPORT-HEADINGS
       ! Print first heading line
       print $BUD012_LEVEL        (+1, 1)                             !F-LPARKER-125 (CAMI)
       print $BUD012_DEPTID       (  , 9)                             !F-LPARKER-125 (CAMI)
       print $BUD012_DEPT_NAME    (  ,21)                             !F-LPARKER-125 (CAMI)
       print $BUD012_CLASS_INDC   (  ,53)                             !F-LPARKER-125 (CAMI)
       print $BUD012_FTE_CAP      (  ,73)                             !F-LPARKER-125 (CAMI)
       print $BUD012_FTE_ACT      (  ,85)                             !F-LPARKER-125 (CAMI)
       print $BUD012_FTE_VAR      (  ,100)                            !F-LPARKER-125 (CAMI)
       print $BUD012_ALL_FTE_CAP  (  ,117)                            !F-LPARKER-125 (CAMI)
       print $BUD012_ALL_FTE_ACT  (  ,133)                            !F-LPARKER-125 (CAMI)
       print $BUD012_ALL_FTE_VAR  (  ,152)                            !F-LPARKER-125 (CAMI)

end-procedure SPECIFIC-REPORT-HEADINGS



!***********************************************************************
! GET-DEPARTMENT-INFORMATION
! This procedure is used to collect the information being reported for
! a department.
!***********************************************************************
begin-procedure GET-DEPARTMENT-INFORMATION


let #Class_count = 0
while #Class_count <= 2
   put '' into Class_Array(#class_count) ArrayClassIndc
   put 0  into Class_Array(#class_count) ArrayClassFTECAP
   put 0  into Class_Array(#class_count) ArrayClassFTE

   let #Class_count = #Class_count + 1
end-while

let #ALLFTE_CAP = 0
let #SUMFTE_CAP = 0

let #ALLActual_FTE = 0
let #SUMActual_FTE = 0

let #Class_count = 0
let #ALL_flag = 0

begin-SELECT
DF.FTE_CAP
DF.CLASS_INDC

   let $Class_Indc = &DF.CLASS_INDC
   let $ClassSrch = ''

   if $Class_Indc = 'B'
      move 'in (''C'',''T'',''U'')' to $ClassSrch
      let #ALL_flag = 1
      let #ALLFTE_CAP = &DF.FTE_CAP
   else
      concat '= ''' with $ClassSrch
      concat $Class_Indc with $ClassSrch
      concat '''' with $ClassSrch
      let #SUMFTE_CAP = #SUMFTE_CAP + &DF.FTE_CAP
   end-if

   do GET-DEPARTMENT-ACTUAL-FTE

   if $Class_Indc = 'B'
      let #ALLActual_FTE = #Actual_FTE
   else
      let #SUMActual_FTE = #SUMActual_FTE + #Actual_FTE
      move 'CLASS_INDC'  to $Fieldname
      move $Class_Indc   to $Fieldvalue

      do Read-Translate-Table

      put $XlatLongName into Class_Array(#class_count) ArrayClassIndc
      put &DF.FTE_CAP    into Class_Array(#class_count) ArrayClassFTECAP
      put #Actual_FTE    into Class_Array(#class_count) ArrayClassFTE

      let #class_count = #class_count + 1
   end-if

FROM PS_DEPT_FTE_CAP DF
WHERE DF.SETID = $rollup_cntl_setid
  AND DF.DEPTID = $rollup_cntl_deptid
  AND DF.FISCAL_YEAR = #rollup_cntl_fiscalyr
  AND DF.EFFDT = (SELECT MAX(DF1.EFFDT) FROM PS_DEPT_FTE_CAP DF1
                   WHERE DF1.SETID = DF.SETID
                     AND DF1.DEPTID = DF.DEPTID
                     AND DF1.EFFDT <= $rollup_cntl_asofdate)
end-SELECT


end-procedure GET-DEPARTMENT-INFORMATION



!***********************************************************************
! GET-DEPARTMENT-ACTUAL-FTE
! Get actual FTE total from JOB table
!***********************************************************************
begin-procedure GET-DEPARTMENT-ACTUAL-FTE
let #Actual_FTE = 0

begin-SELECT
SUM(JOB.FTE)    &FTE_Sum

   let #Actual_FTE = &FTE_Sum

FROM PS_JOB JOB
WHERE JOB.ADDS_TO_FTE_ACTUAL = 'Y'
  AND JOB.DEPTID = $rollup_cntl_deptid
  AND JOB.CLASS_INDC [$ClassSrch]
  AND JOB.EMPL_STATUS in ('A','P','L','S','W')
  AND JOB.SETID_DEPT = $rollup_cntl_setid
  AND JOB.EFFDT = (SELECT MAX(JOB1.EFFDT) FROM PS_JOB JOB1
                    WHERE JOB1.EMPLID = JOB.EMPLID
                      AND JOB1.EMPL_RCD = JOB.EMPL_RCD
                      AND JOB1.EFFDT <= $AsOfToday)
  AND JOB.EFFSEQ = (SELECT MAX(JOB2.EFFSEQ) FROM PS_JOB JOB2
                     WHERE JOB2.EMPLID = JOB.EMPLID
                       AND JOB2.EMPL_RCD = JOB.EMPL_RCD
                       AND JOB2.EFFDT = JOB.EFFDT)
end-SELECT

end-procedure GET-DEPARTMENT-ACTUAL-FTE



!***********************************************************************
! ADD-DEPT-TOTALS-IN-ARRAY
! Add totals into the array dept totals
!***********************************************************************
begin-procedure ADD-DEPT-TOTALS-IN-ARRAY

  Array-Add #SUMFTE_CAP    to Rollup_Array(#curr_array) ArrayFTECAP
  Array-Add #SUMActual_FTE to Rollup_Array(#curr_array) ArrayActual_FTE
  Array-Add #ALLFTE_CAP    to Rollup_Array(#curr_array) ArrayAllFTECAP
  Array-Add #ALLActual_FTE to Rollup_Array(#curr_array) ArrayAllActual_FTE

end-procedure ADD-DEPT-TOTALS-IN-ARRAY



!***********************************************************************
! GET-ARRAY-TOTALS
! Get array totals for the current dept level
!***********************************************************************
begin-procedure GET-ARRAY-TOTALS

   get #ArrayFTECAP        from Rollup_Array(#curr_array) ArrayFTECAP
   get #ArrayActual_FTE    from Rollup_Array(#curr_array) ArrayActual_FTE
   get #ArrayAllFTECAP     from Rollup_Array(#curr_array) ArrayALLFTECAP
   get #ArrayAllActual_FTE from Rollup_Array(#curr_array) ArrayALLActual_FTE

end-procedure GET-ARRAY-TOTALS



!***********************************************************************
! PRINT-DETAIL-LINE
! This procedure will print the detail line of the report
!***********************************************************************
begin-procedure PRINT-DETAIL-LINE                                               !

   print #rollup_cntl_curr_level   (+1, 3) edit 9
   print $rollup_cntl_deptid       (  , 9)
   print $rollup_cntl_deptname     (  ,21)

   let #class_count = 0
   while #class_count <= 3

      get $Class_Desc from Class_Array(#class_count) ArrayClassIndc
      get #FTE_CAP    from Class_Array(#class_count) ArrayClassFTECAP
      get #Actual_FTE from Class_Array(#class_count) ArrayClassFTE

      if $Class_Desc = ''
         if #class_count = 0
            if #ALL_flag
               print $BUD012_NONE_1    (  ,53)                        !F-LPARKER-125 (CAMI)
               print #ALLFTE_CAP       (  ,117) edit 9999.99
               print #ALLActual_FTE    (  ,133) edit 9999.999999
               let #Variance = #ALLFTE_CAP - #ALLActual_FTE
               print #Variance         (  ,152) edit 9999.999999
            else
               print $BUD012_NONE_1    (  ,53)                        !F-LPARKER-125 (CAMI)
               print $BUD012_NONE_2    (  ,117)                       !F-LPARKER-125 (CAMI)
            end-if
         end-if
         break
      end-if

      if #class_count > 0
         print '' (+1,,)
      end-if
      print $Class_Desc               (  ,53)
      print #FTE_CAP                  (  ,73) edit 9999.99
      print #Actual_FTE               (  ,85) edit 9999.999999
      let #Variance = #FTE_CAP - #Actual_FTE
      print #Variance                 (  ,100) edit 9999.999999
      if #class_count = 0
         if #All_Flag
            print #ALLFTE_CAP         (  ,117) edit 9999.99
            print #ALLActual_FTE      (  ,133) edit 9999.999999
            let #Variance = #ALLFTE_CAP - #ALLActual_FTE
            print #Variance           (  ,152) edit 9999.999999
         end-if
      end-if

      let #class_count = #class_count + 1

   end-while

end-procedure



!***********************************************************************
! PRINT-ROLLUP-TOTALS
! This procedure will print the totals for a dept level
!***********************************************************************
begin-procedure PRINT-ROLLUP-TOTALS

print ''                  (+1,,)
print #ArrayLevel_Num     (+1, 3) edit 9
print $BUD012_TOTAL       (  , 9)                                     !F-LPARKER-125 (CAMI)
print $ArrayDeptid        (  ,28)
print #ArrayFTECAP        (  ,73) edit 9999.99
print #ArrayActual_FTE    (  ,85) edit 9999.999999
let #Variance = #ArrayFTECAP - #ArrayActual_FTE
print #Variance           (  ,100) edit 9999.999999
print #ArrayAllFTECAP     (  ,117) edit 9999.99
print #ArrayAllActual_FTE (  ,133) edit 9999.999999
let #Variance = #ArrayAllFTECAP - #ArrayAllActual_FTE
print #Variance           (  ,152) edit 9999.999999
print ' '                 (+1,1)

end-procedure PRINT-ROLLUP-TOTALS



!***********************************************************************
! PRINT-FINAL-ROLLUP-TOTALS
! Print the dept total for the highest deptid
!***********************************************************************
begin-procedure PRINT-FINAL-ROLLUP-TOTALS

if $rollup_cntl_flag = 'N'
   do Get-Curr-Dept-Lvl-Array           !Always at (0) in this case
   do Print-Rollup-Totals
else

let #curr_array = #curr_array - 1

while #curr_array >= 1
   do Get-Curr-Dept-Lvl-Array
   do Print-Rollup-Totals
   let #curr_array = #curr_array - 1
end-while

end-if

print $BUD012_TOTAL_RECS          (+2,1)                              !F-LPARKER-125 (CAMI)
print #Total_Proc_Count           (,+5,)
print $BUD012_END_REPORT          (+2,,) center                       !F-LPARKER-125 (CAMI)

do Get-Current-DateTime

display $BUD012_SUCCESSFUL noline                                     !F-LPARKER-125 (CAMI)
display ' ' noline
display &SysDateTime

end-procedure PRINT-FINAL-ROLLUP-TOTALS



!***********************************************************************
! PUT-DEPT-LVL-INTO-ARRAY
! Put the new department level information into next available array
!***********************************************************************
begin-procedure PUT-DEPT-LVL-INTO-ARRAY

put #rollup_cntl_curr_level into Rollup_Array(#curr_array) ArrayLevel_Num
put $rollup_cntl_deptid     into Rollup_Array(#curr_array) ArrayDeptid
put $rollup_cntl_deptname   into Rollup_Array(#curr_array) ArrayDeptName

do Initialize-Array-Totals

end-procedure PUT-DEPT-LVL-INTO-ARRAY



!***********************************************************************
! INITIALIZE-ARRAY-TOTALS
! Initialize array totals to zero
!***********************************************************************
begin-procedure INITIALIZE-ARRAY-TOTALS

put 0 into Rollup_Array(#curr_array) ArrayFTECAP
put 0 into Rollup_Array(#curr_array) ArrayActual_FTE
put 0 into Rollup_Array(#curr_array) ArrayAllFTECAP
put 0 into Rollup_Array(#curr_array) ArrayAllActual_FTE

end-procedure INITIALIZE-ARRAY-TOTALS



!***********************************************************************
! ROLLUP-TOTALS
! Rollup the dept information in the array
!***********************************************************************
begin-procedure ROLLUP-TOTALS

let #save_array = #curr_array

while #curr_array >= 1
   do Get-Curr-Dept-Lvl-Array

   if #ArrayLevel_Num <> 0
      do Add-Dept-Totals-In-Array
   end-if

   let #curr_array = #curr_array - 1
end-while

let #curr_array = #save_array

end-procedure ROLLUP-TOTALS



!***********************************************************************
! CLEAR-CURR-DEPT-LVL-ARRAY
! Clear contents of array for current dept level
!***********************************************************************
begin-procedure CLEAR-CURR-DEPT-LVL-ARRAY

put 0   into Rollup_Array(#curr_array) ArrayLevel_Num
put ' ' into Rollup_Array(#curr_array) ArrayDeptid
put ' ' into Rollup_Array(#curr_array) ArrayDeptName

do Initialize-Array-Totals

end-procedure CLEAR-CURR-DEPT-LVL-ARRAY



!***********************************************************************
! GET-CURR-DEPT-LVL-ARRAY
! Get current totals of a dept level
!***********************************************************************
begin-procedure GET-CURR-DEPT-LVL-ARRAY

get #ArrayLevel_Num  from Rollup_Array(#curr_array) ArrayLevel_Num
get $ArrayDeptid     from Rollup_Array(#curr_array) ArrayDeptid
get $ArrayDeptName   from Rollup_Array(#curr_array) ArrayDeptName

do Get-Array-Totals

end-procedure GET-CURR-DEPT-LVL-ARRAY



!***********************************************************************
! WRAPUP                                                               *
! This paragraph ends the report process and updates the status of the *
! job in the process scheduler.                                        *
!***********************************************************************
begin-procedure WRAPUP

  do STDAPI-TERM

end-procedure WRAPUP



!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'getdptnm.sqc'  !Routine for dept name
#Include 'stderror.sqc'  !Routine for error display
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#Include 'egrollup.sqc'  !Dept roll up routine
#Include 'readxlat.sqc'  !Routines to read from Translate Table
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language       !F-LPARKER-125 (CAMI)
