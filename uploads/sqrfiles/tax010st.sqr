!***********************************************************************
!  TAX010ST:   State Tax Summary Report                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/01/19:15:54:44                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872517                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP00001       Add Non Resident Alien Tax data (1042)                 *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization
#include 'usarpt.sqc'   !Get USA variables

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report

  move 'TAX010ST' to $ReportID
  move 'State Tax Summary Report' to $ReportTitle

  display $ReportTitle
  Display ' '

  do Get-EandG                                                            !HP00001
  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize
  if $prcs_process_instance = ''
    do Prompt
  else
    do Select-Parameters
    do Process-Run-Control
  end-if

if $RptPeriod = 'M'
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
end-if

  create-array
         name=TaxArray size=3000
         field=State-Array:char field=Locality-Array:char:72
                                field=TaxClass-Array:char:72
                                field=Period-Array:number:72
                                field=EE-TxGrs:number:72
                                field=EE-Tax:number:72
                                field=ER-TxGrs:number:72
                                field=ER-Tax:number:72
                                field=NoLmtGrs:number:72

     ! First array element is for State totals, Second array element is for Locality totals
  create-array
         name=CompTaxArray size=2
         field=Comp-State-Array:char field=Comp-Locality-Array:char:72
                                field=Comp-TaxClass-Array:char:72
                                field=Comp-Period-Array:number:72
                                field=Comp-EE-TxGrs:number:72
                                field=Comp-EE-Tax:number:72
                                field=Comp-ER-TxGrs:number:72
                                field=Comp-ER-Tax:number:72
                                field=Comp-NoLmtGrs:number:72
  create-array
         name=TotTaxArray size=2
         field=Tot-State-Array:char field=Tot-Locality-Array:char:72
                                field=Tot-TaxClass-Array:char:72
                                field=Tot-Period-Array:number:72
                                field=Tot-EE-TxGrs:number:72
                                field=Tot-EE-Tax:number:72
                                field=Tot-ER-TxGrs:number:72
                                field=Tot-ER-Tax:number:72
                                field=Tot-NoLmtGrs:number:72

  create-array
         name=MultiPayAry  size=10000
         field=Multi-Pay-Array:char field=Company-Code:char
                                field=State:char
                                field=Locality:char
                                field=Tax-Class:char

  let #Max-array-size = 9999
  let $MultiCountingNote = '* These totals may reflect counting the same dollars multiple times as some employees '
  let $MultiCountingNote = $MultiCountingNote || 'are subject to taxation by more than one state or local jurisdiction.'

  if $PublicSector = 'Y'                                                                 !HP00001
      let $Tax_Class1 = 'HDVLMNWB-----CIO-A'   !for storing array info employee tax classes  !HP00001
      let $Tax_Class2 = '-------BEURSX---Y-'   !for storing array info employer tax classes  !HP00001
      let #Max_Class  = 19                                                               !HP00001
      let $TaxClass   = 'AND A.TAX_CLASS    IN (''H'',''C'',''D'',''V'',''L'',''M'',''N'',''W'',''B'',''E'',''U'',''R'',''S'',''X'',''I'',''O'',''Y'',''A'')' !HP00001
  else                                                                                   !HP00001
      let $Tax_Class1 = 'HDVLMNWB-----CIO-'   !for storing array info employee tax classes
      let $Tax_Class2 = '-------BEURSX---Y'   !for storing array info employer tax classes
      let #Max_Class  = 18                                                               !HP00001
      let $TaxClass   = 'AND A.TAX_CLASS    IN (''H'',''C'',''D'',''V'',''L'',''M'',''N'',''W'',''B'',''E'',''U'',''R'',''S'',''X'',''I'',''O'',''Y'')'       !HP00001
  end-if                                                                                 !HP00001


end-procedure


begin-procedure Prompt
  input $RptYear  maxlen=4 'Enter Year  (2000,2001,etc)'
  let #RptYear = to_number($RptYear)
  move $RptYear to $RptYearPrt xxxx
  do Get-Reporting-Period
  if $RptPeriod = 'Q'
    move 'Quarterly ' to $ReportTitlePeriod
    move 1 to #QTR
    while #QTR = 1
        input $RptQtr   maxlen=1 'Enter Quarter (1,2,3 or 4)'
        let $AsofQtr = $RptQtr
        evaluate $RptQtr
          when = '1'
            move '03' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '1st Quarter' to $Period
            let #AsofQtr = 1
            move 0 to #QTR
            break
          when = '2'
            move '06' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '2nd Quarter' to $Period
            move 0 to #QTR
            break
          when = '3'
            move '09' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '3rd Quarter' to $Period
            move 0 to #QTR
            break
          when = '4'
            move '12' to $MonthCd
            let #AsOfMonth = to_number($MonthCD)
            let $AsOfMonth = $MonthCD
            move '4th Quarter' to $Period
            move 0 to #QTR
            break
          when-other
        end-evaluate
    end-while
  else
    while 1 = 1
    input $MonthCd maxlen=2 'Enter Month (1,2,etc)'
    let #AsofMonth = to_number($MonthCD)
      if #AsofMonth > 0
      AND #AsofMonth < 13
        move $MonthCd to $MonthCd  09
        do Get-Month-Name($MonthCd, $MonthName)
        move $MonthName to $Period
        move 'Monthly ' to $ReportTitlePeriod
        let $AsOfMonth = $MonthCD
        move 'M' to $RptPeriod
        display 'Monthly'
        break
      else
        display 'Month must be 1 - 12'
      end-if
    end-while

  end-if
end-procedure

begin-procedure Process-Run-Control
  move &RC_PAY.Balance_Year to $RptYear xxxx
  move $RptYear to #RptYear
  move $RptYear to $RptYearPrt xxxx
  move &RC_PAY.Balance_Qtr         to $RptQtr

  if &RC_PAY.Balance_Qtr > 0
    move 'Q'          to $RptPeriod
    move 'Quarterly ' to $ReportTitlePeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '1'
        move '03' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '1st Quarter' to $Period
        break
      when = '2'
        move '06' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '2nd Quarter' to $Period
        break
      when = '3'
        move '09' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '3rd Quarter' to $Period
        break
      when = '4'
        move '12' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '4th Quarter' to $Period
        break
    end-evaluate
  else
    move &RC_PAY.Balance_Period to #MonthCd
    let #AsofMonth = #MonthCd
    move 'M'        to $RptPeriod
    move 'Monthly ' to $ReportTitlePeriod
    display 'Monthly'
    if #MonthCd <> 0
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      move $MonthName to $Period
      let $AsOfMonth = $MonthCD
      evaluate $AsOfMonth
        when = '01'
        when = '03'
        when = '05'
        when = '07'
        when = '08'
        when = '10'
        when = '12'
          concat $AsofMonth with $RptYear -xx-3
          concat '1' with $RptYear
        when = '02'
          concat $AsofMonth with $RptYear -xx-2
          concat '8' with $RptYear
        when = '04'
        when = '06'
        when = '09'
        when = '11'
          concat $AsofMonth with $RptYear -xx-3
          concat '0' with $RptYear
      end-evaluate
    else
      display 'Month Not Entered'
      stop
    end-if
  end-if

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($RptYear, $AsOfDate, {DEFYMD}, '', 'native')
  concat $ReportTitle with $ReportTitlePeriod
  move $ReportTitlePeriod to $ReportTitle
end-procedure

begin-heading 6
  #Include 'stdhdg01.sqc'                !standard heading 1

  print 'Company'                        (3,1)
  print $Company                         (0,13)
  print $CompanyName                     (0,17)
  print $Period                          (+0,80)
  print $RptYearPrt                      (+0,92)
  print 'Federal EIN:'                   (+1,1)
  print $FederalEIN                      (0,17)    edit xx-xxxxxxx
  print 'Employee'                       (+1,63)
  print 'Employer'                       (0,106)
  print 'Taxable Wages'                  (+1,61)
  print 'Employee Tax'                   (0,84)
  print 'Taxable Wages'                  (0,104)
  print 'Employer Tax'                   (0,126)
  print 'No Limit Gross'                 (0,147)
end-heading

begin-procedure Report
let #I = 0
let #J = 0
let $hold-locality = '~~~'
  do Check-Multi-Payment
!let TaxArray.State-Array(#I) = $locality_sel
begin-SELECT
A.EMPLID
A.COMPANY   () on-break level=1 print=never before=Before-Company
                                            after=After-Company
A.STATE     () on-break level=2 print=never after=After-State
A.LOCALITY
A.TAX_CLASS
A.BALANCE_YEAR
A.BALANCE_QTR
A.BALANCE_PERIOD
A.TXGRS_MTD
A.TXGRS_QTD
A.TXGRS_YTD
A.TAX_MTD
A.TAX_QTD
A.TAX_YTD
A.NLGRS_MTD
A.NLGRS_QTD
A.NLGRS_YTD

  let $state_sel    = rtrim(&A.STATE,' ')
  let $locality_sel = rtrim(&A.LOCALITY,' ')

  if $hold-locality = '~~~'
     if $locality_sel <> ''
        move 1 to #I
        let $hold-locality = $locality_sel
     else
        move 0 to #I
        let $hold-locality = $locality_sel
     end-if
  else
     if $hold-locality <> $locality_sel
        let #I = #I + 1
        let $hold-locality = $locality_sel
     end-if
  end-if

  let #J = INSTR($Tax_Class1,&A.TAX_CLASS,1)
  let $ee-er = 'e'
  if #J = 0
     let #J = INSTR($Tax_Class2,&A.TAX_CLASS,1)
     let $ee-er = 'r'
  end-if

  if rtrim(&A.TAX_CLASS,' ') = 'B'
     let $ee-er = 'b'
  end-if

  let TaxArray.State-Array(#I) = $state_sel
  let TaxArray.Locality-Array(#I) = $locality_sel
  let TotTaxArray.Tot-State-Array(0)  = 'TOT'
  let TotTaxArray.Tot-State-Array(1)  = 'TOT'

  if &A.BALANCE_PERIOD = to_number($AsOfMonth)
     if $ee-er = 'e'
        ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        if (#I) = 0
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        else
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        end-if
     else
        if $ee-er = 'b'
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
           if (#I) = 0
              ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
              CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
              ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
              TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
           else
              ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
              CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
              ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
              TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
           end-if
        end-if
        ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
        if (#I) = 0
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
        else
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           CompTaxArray(1) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
           ARRAY-ADD &A.TXGRS_MTD &A.TAX_MTD to
           TotTaxArray(1) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
        end-if
     end-if
     if $ee-er <> 'e'
        ARRAY-ADD &A.NLGRS_MTD to
        TaxArray(#I) NoLmtGrs(#J)
        if (#I) = 0
           ARRAY-ADD &A.NLGRS_MTD to
           CompTaxArray(0) Comp-NoLmtGrs(#J)
           ARRAY-ADD &A.NLGRS_MTD to
           TotTaxArray(0) Tot-NoLmtGrs(#J)
        else
           ARRAY-ADD &A.NLGRS_MTD to
           CompTaxArray(1) Comp-NoLmtGrs(#J)
           ARRAY-ADD &A.NLGRS_MTD to
           TotTaxArray(1) Tot-NoLmtGrs(#J)
        end-if
     end-if
  end-if

  let #J = #J + 24
  if &A.BALANCE_QTR = to_number($AsOfQtr)
     if $ee-er = 'e'
        ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        if (#I) = 0
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        else
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        end-if
     else
        if $ee-er = 'b'
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
           if (#I) = 0
              ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
              CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
              ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
              TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
           else
              ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
              CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
              ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
              TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
           end-if
        end-if
        ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
        if (#I) = 0
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
        else
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           CompTaxArray(1) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
           ARRAY-ADD &A.TXGRS_QTD &A.TAX_QTD to
           TotTaxArray(1) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
        end-if
     end-if
     if $ee-er <> 'e'
        ARRAY-ADD &A.NLGRS_QTD to
        TaxArray(#I) NoLmtGrs(#J)
        if (#I) = 0
           ARRAY-ADD &A.NLGRS_QTD to
           CompTaxArray(0) Comp-NoLmtGrs(#J)
           ARRAY-ADD &A.NLGRS_QTD to
           TotTaxArray(0) Tot-NoLmtGrs(#J)
        else
           ARRAY-ADD &A.NLGRS_QTD to
           CompTaxArray(1) Comp-NoLmtGrs(#J)
           ARRAY-ADD &A.NLGRS_QTD to
           TotTaxArray(1) Tot-NoLmtGrs(#J)
        end-if
     end-if
  end-if

  let #J = #J + 24
  if $ee-er = 'e'
     ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
     TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
     if (#I) = 0
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
     else
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
     end-if
  else
     if $ee-er = 'b'
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        if (#I) = 0
           ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
           CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        else
           ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
           CompTaxArray(1) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
           TotTaxArray(1) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        end-if
     end-if
     ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
     TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
     if (#I) = 0
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
     else
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        CompTaxArray(1) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
        ARRAY-ADD &A.TXGRS_YTD &A.TAX_YTD to
        TotTaxArray(1) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
     end-if
  end-if
  if $ee-er <> 'e'
     ARRAY-ADD &A.NLGRS_YTD to
     TaxArray(#I) NoLmtGrs(#J)
     if (#I) = 0
        ARRAY-ADD &A.NLGRS_YTD to
        CompTaxArray(0) Comp-NoLmtGrs(#J)
        ARRAY-ADD &A.NLGRS_YTD to
        TotTaxArray(0) Tot-NoLmtGrs(#J)
     else
        ARRAY-ADD &A.NLGRS_YTD to
        CompTaxArray(1) Comp-NoLmtGrs(#J)
        ARRAY-ADD &A.NLGRS_YTD to
        TotTaxArray(1) Tot-NoLmtGrs(#J)
     end-if
  end-if

  let #J = 0

FROM  PS_TAX_BALANCE A
WHERE A.BALANCE_YEAR = #RptYear
  AND A.BALANCE_ID   = $Calendar_Year_Id
  [$TaxClass]                                                             !HP00001
  AND A.STATE        NOT IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
  AND A.BALANCE_PERIOD =
      (SELECT MAX(X.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE X
       WHERE  X.COMPANY       = A.COMPANY
         AND  X.EMPLID        = A.EMPLID
         AND  X.STATE         = A.STATE
         AND  X.LOCALITY      = A.LOCALITY
         AND  X.TAX_CLASS     = A.TAX_CLASS
         AND  X.WORK_PSD_CD   = A.WORK_PSD_CD
         AND  X.RES_PSD_CD    = A.RES_PSD_CD
         AND  X.BALANCE_ID    = A.BALANCE_ID
         AND  X.BALANCE_YEAR  = A.BALANCE_YEAR
         AND  X.BALANCE_PERIOD <= #AsofMonth )
AND (A.TXGRS_MTD <> 0 OR A.TXGRS_QTD <> 0 OR A.TXGRS_YTD <> 0
     OR A.TAX_MTD <> 0 OR A.TAX_QTD <> 0 OR A.TAX_YTD <> 0
     OR A.NLGRS_MTD <> 0 OR A.NLGRS_QTD <> 0 OR A.NLGRS_YTD <> 0)
ORDER BY A.COMPANY, A.STATE, A.LOCALITY, A.TAX_CLASS,
         A.BALANCE_YEAR, A.BALANCE_QTR, A.BALANCE_PERIOD
end-SELECT

  if $Company = ''
    display 'No data selected'
    print 'No data selected'    (+5,1)  center
  end-if

  move 'Y' to $End

  let $print-total = 'G'
  do Print-Totals

end-procedure


begin-procedure Before-Company
  move &A.Company to $Company
  do Get-Company-Data
  move &CT.FEDERAL_EIN to $FederalEIN 099999999
  let $hold-locality = '~~~'
end-procedure


begin-procedure After-Company
  do Select-Multi-Payment
  let $print-total = 'C'
  do Print-Totals
  let $print-total = ' '
  clear-array name=CompTaxArray
  let $CompStateBTotBad = 'N'
  let $CompStateHTotBad = 'N'
  let $CompLocalBTotBad = 'N'
  let $CompLocalHTotBad = 'N'
  move 0  to  #State-Array-Cnt
  move 0  to  #Local-Array-Cnt
end-procedure


begin-procedure After-State
  do Print-State-TaxArray
  clear-array name=TaxArray
  let $hold-locality = '~~~'
end-procedure


begin-procedure Check-Multi-Payment

  let #Tot-Multi-Pay = 1

begin-SELECT DISTINCT
B.COMPANY
B.STATE
B.LOCALITY
B.TAX_CLASS

  if #Tot-Multi-Pay <= #Max-array-size
     let $Company-Code = rtrim(&B.COMPANY,' ')
     let $State        = rtrim(&B.STATE,' ')
     let $Locality     = rtrim(&B.LOCALITY,' ')
     let $Tax-Class    = rtrim(&B.TAX_CLASS,' ')
     put $Company-Code $State $Locality $Tax-Class  into MultiPayAry(#Tot-Multi-Pay)
     add 1 to #Tot-Multi-Pay
  end-if


FROM  PS_TAX_BALANCE B
WHERE B.BALANCE_YEAR = #RptYear
  AND B.BALANCE_ID   = $Calendar_Year_Id
  AND B.TAX_CLASS IN ('B','H')
  AND B.STATE        NOT IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
  AND B.BALANCE_PERIOD =
      (SELECT MAX(Y.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE Y
       WHERE  Y.COMPANY       = B.COMPANY
         AND  Y.EMPLID        = B.EMPLID
         AND  Y.STATE         = B.STATE
         AND  Y.LOCALITY      = B.LOCALITY
         AND  Y.TAX_CLASS     = B.TAX_CLASS
         AND  Y.WORK_PSD_CD   = B.WORK_PSD_CD
         AND  Y.RES_PSD_CD    = B.RES_PSD_CD
         AND  Y.BALANCE_ID    = B.BALANCE_ID
         AND  Y.BALANCE_YEAR  = B.BALANCE_YEAR
         AND  Y.BALANCE_PERIOD <= #AsofMonth )
  AND (B.TXGRS_MTD <> 0 OR B.TXGRS_QTD <> 0 OR B.TXGRS_YTD <> 0
       OR B.TAX_MTD <> 0 OR B.TAX_QTD <> 0 OR B.TAX_YTD <> 0
       OR B.NLGRS_MTD <> 0 OR B.NLGRS_QTD <> 0 OR B.NLGRS_YTD <> 0)
  AND EXISTS (SELECT 'X'
              FROM  PS_TAX_BALANCE F
              WHERE F.BALANCE_YEAR = #RptYear
              AND F.BALANCE_ID   = $Calendar_Year_Id
              AND F.COMPANY      = B.COMPANY
              AND F.TAX_CLASS IN ('B','H')
              AND F.STATE NOT IN ('$U','$E','$UAS','$UGU','$UPR','$UVI')
              AND F.BALANCE_PERIOD =
                           (SELECT MAX(Z.BALANCE_PERIOD)
                            FROM   PS_TAX_BALANCE Z
                            WHERE  Z.COMPANY       = F.COMPANY
                              AND  Z.EMPLID        = F.EMPLID
                              AND  Z.STATE         = F.STATE
                              AND  Z.LOCALITY      = F.LOCALITY
                              AND  Z.TAX_CLASS     = F.TAX_CLASS
                              AND  Z.WORK_PSD_CD   = F.WORK_PSD_CD
                              AND  Z.RES_PSD_CD    = F.RES_PSD_CD
                              AND  Z.BALANCE_ID    = F.BALANCE_ID
                              AND  Z.BALANCE_YEAR  = F.BALANCE_YEAR
                              AND  Z.BALANCE_PERIOD <= #AsofMonth )
              AND (F.TXGRS_MTD <> 0 OR F.TXGRS_QTD <> 0 OR F.TXGRS_YTD <> 0
                   OR F.TAX_MTD <> 0 OR F.TAX_QTD <> 0 OR F.TAX_YTD <> 0
                   OR F.NLGRS_MTD <> 0 OR F.NLGRS_QTD <> 0 OR F.NLGRS_YTD <> 0)
              AND F.EMPLID = B.EMPLID
              AND ((F.STATE <> B.STATE AND F.LOCALITY = ' ' AND B.LOCALITY = ' ')
                   OR (F.STATE = B.STATE AND F.LOCALITY<> B.LOCALITY AND F.LOCALITY <> ' ' AND B.LOCALITY <> ' ')))
ORDER BY B.COMPANY, B.STATE, B.LOCALITY
end-SELECT

end-procedure


begin-procedure Select-Multi-Payment

  let #Check-Multi-Pay = 1

  while #Check-Multi-Pay <= #Tot-Multi-Pay
     get $Company-Code $State $Locality $Tax-Class  from MultiPayAry(#Check-Multi-Pay)
     if $Company-Code = $Company

        if $Tax-Class = 'B'
            if rtrim($Locality,' ') <> ''
                let $CompLocalBTotBad = 'Y'
                let $GrandLocalBTotBad = 'Y'
            else
                let $CompStateBTotBad = 'Y'
                let $GrandStateBTotBad = 'Y'
            end-if
        end-if

        if $Tax-Class = 'H'
            if rtrim($Locality,' ') <> ''
                let $CompLocalHTotBad = 'Y'
                let $GrandLocalHTotBad = 'Y'
            else
                let $CompStateHTotBad = 'Y'
                let $GrandStateHTotBad = 'Y'
            end-if
        end-if
     end-if
     add 1 to #Check-Multi-Pay
  end-while

end-procedure


begin-procedure Print-State-TaxArray
  let $State = $state_sel
  let $eor-total = 'N'
  let $print-state-chg = 'Y'

  let #K = 0
  let #L = 1
  while #K <= #I
    if TaxArray.State-Array(#K) <> ''

       if $print-state-chg = 'Y'
          let $State-Array = TaxArray.State-Array(#K)
          print 'Jurisdiction: '   (+1,1)
          print $State-Array       (0,15)
          print '='                (0,20,155) fill
          print ''                 (+1,1)
          let $print-state-chg = 'N'
       end-if

       let $Locality-Array = TaxArray.Locality-Array(#K)
       let $Locality = RTRIM($Locality-Array, ' ')
       let #Locality-Fill-Start = 0

       if $Locality > ''
          if #CURRENT-LINE > 47
             new-page
          end-if
          print '--'               (+1,1)
          print $State-Array       (0,3)
          print 'Locality: '       (0,8)
          let $Locality-Array = TaxArray.Locality-Array(#K)
          let $Locality = RTRIM($Locality-Array, ' ')
          let #Locality-Fill-Start = #Locality-Fill-Start + length($Locality) + 20
          print $Locality          (0,18)
          print ' '                (0,0)
          if $Locality <> ''
            do Get-Local-Tax-Data
            let $x = substr($Localname,1,23)
            let $Localname = rtrim($x,' ')
            let #Locality-Fill-Start = #Locality-Fill-Start + length($Localname)
            print $Localname       (0,0)
            print ' '              (0,0)
            if $Localcnty <> ''
              let #Locality-Fill-Start = #Locality-Fill-Start + length($Localcnty) + 3
              print '('            (0,0)
              print $Localcnty     (0,0)
              print ') '           (0,0)
            end-if
          end-if
          let #Locality-Fill-End = 175 - #Locality-Fill-Start
          print '-'                (0,#Locality-Fill-Start,#Locality-Fill-End) fill
          print ''                 (+1,1)
       end-if

       let $print-label = 'Y'
       let #L = 1

       while #L < #Max_Class                                              !HP00001
         let $skip-item = 'N'
         if #K = 0
            if #L = 8 or #L = 11
               let $skip-item = 'Y'
            end-if
         else
            if #L <> 1 and #L <> 8 and #L <> 11 and #L <> 15              !HP00001
               let $skip-item = 'Y'
            end-if
         end-if

         if $skip-item <> 'Y'
            let #M = #K
            let #N = #L
            let #items-value = 0
            if $RptPeriod = 'M'
               do Get-TaxArray
            end-if
            let #N = #L + 24
            do Get-TaxArray
            let #N = #L + 48
            do Get-TaxArray

            if #items-value <> 0
               let $current-U-rate = ''
               evaluate #L
                   when = 1
                        print 'Withholding  [H]' (+1,1)
                        break
                   when = 2
                        print 'State Disability EE  [D]' (+1,1)
                        break
                   when = 3
                        print 'State Unemployment Tax EE  [V]' (+1,1)
                        break
                   when = 4
                        print 'New Jersey SWAF  [L] ' (+1,1)
                        break
                   when = 5
                        print 'New Jersey WDPF  [M] ' (+1,1)
                        break
                   when = 6
                        print 'New Jersey HCSF  [N] ' (+1,1)
                        break
                   when = 7
                        print 'Voluntary Plan Disab Ins EE  [W]' (+1,1)
                        break
                   when = 8
                        print 'Employee / Employer Tax  [B] ' (+1,1)
                        break
                   when = 9
                        print 'State Disability ER  [E] ' (+1,1)
                        break
                   when = 10
                        print 'State Unemployment Tax  [U]' (+1,1)
                        do Get-Current-Tax-Rate
                        break
                   when = 11
                        print 'Local ER  [R] ' (+1,1)
                        break
                   when = 12
                        print 'State Unemployment Tax Special  [S]' (+1,1)
                        break
                   when = 13
                        print 'Voluntary Plan Disab Ins ER  [X]' (+1,1)
                        break
                   when = 14
                        print 'State EIC  [C]' (+1,1)
                        break
                   when = 15
                        print 'Family Leave Insurance  [I]' (+1,1)
                        break
                   when = 16
                        print 'Voluntary Family Leave Insurance  [O]' (+1,1)
                        break
                   when = 17
                        print 'Voluntary Family Leave Ins. ER [Y]' (+1,1)
                        break
                   when = 18                                                        !HP00001
                        print 'Non Resident Alien Tax 1042  [A]' (+1,1)             !HP00001
                        break                                                       !HP00001
               end-evaluate

               let #M = #K
               let #N = #L

               let #linetoprint = 0
               if $RptPeriod = 'M'
                  print 'MTD' (+#linetoprint,50)
                  let #linetoprint = 1
                  do Get-TaxArray
                  do Print-TaxArray
               end-if

               let #N = #L + 24
               print 'QTD' (+#linetoprint,50)
               do Get-TaxArray
               do Print-TaxArray

               let #N = #L + 48
               print $current-U-rate (+1,1)
               print 'YTD' (,50)
               do Get-TaxArray
               do Print-TaxArray
               let $current-U-rate = ''
               print '' (+1,1)
            end-if

         end-if

         let #L = #L + 1
       end-while

    end-if
    let #K = #K + 1
  end-while

end-procedure


begin-procedure Get-Current-Tax-Rate
let $found-rate = 'N'
let $current-U-rate = ''
begin-SELECT
R.EFFDT
R.SUT_EFF_TAX_YR
R.SUT_EFF_TAX_QTR
R.SUT_EXPERIENCE_RT
  if $found-rate = 'N'
     if &R.SUT_EFF_TAX_YR = #RptYear and
        to_number(&R.SUT_EFF_TAX_QTR) <= #AsOfQtr
        let $current-U-rate = 'Current quarter tax rate = ' ||
            edit(&R.SUT_EXPERIENCE_RT,'99.99999') || '%'
        let $found-rate = 'Y'
     else
        if &R.SUT_EFF_TAX_YR < #RptYear
        let $current-U-rate = 'Current quarter tax rate = ' ||
            edit(&R.SUT_EXPERIENCE_RT,'99.99999') || '%'
           let $found-rate = 'Y'
        end-if
     end-if
  end-if
FROM PS_CO_STATETAX_TBL R
WHERE R.COMPANY = $Company AND R.STATE = $State-Array
AND R.EFFDT <= $AsOfDate AND R.EFF_STATUS = 'A'
ORDER BY R.EFFDT DESC, R.SUT_EFF_TAX_YR DESC, R.SUT_EFF_TAX_QTR DESC
end-SELECT
end-procedure


begin-procedure Print-Totals

  if $print-total = 'G'
     move ' ' to   $Company
     move ' ' to   $CompanyName
     move ' ' to   $FederalEIN
     print 'Report Grand Totals' (+1,1)
     print '' (+1,1)
  else
     print 'Company Totals'      (+2,1)
     print '+'                   (0,16,159) fill
     print '' (+1,1)
  end-if

  let #K = 0
  while #K < 2

     let #L = 1
     while #L < #Max_Class                                                   !HP00001

         evaluate #L
            when = 1
                 let $Total-Label = 'Withholding  [H]'
                 break
            when = 2
                 let $Total-Label = 'State Disability EE  [D]'
                 break
            when = 3
                 let $Total-Label = 'State Unemployment Tax EE  [V]'
                 break
            when = 4
                 let $Total-Label = 'New Jersey SWAF  [L] '
                 break
            when = 5
                 let $Total-Label = 'New Jersey WDPF  [M] '
                 break
            when = 6
                 let $Total-Label = 'New Jersey HCSF  [N] '
                 break
            when = 7
                 let $Total-Label = 'Voluntary Plan Disab Ins EE  [W]'
                 break
            when = 8
                 let $Total-Label = 'Employee / Employer Tax  [B] '
                 break
            when = 9
                 let $Total-Label = 'State Disability ER  [E] '
                 break
            when = 10
                 let $Total-Label = 'State Unemployment Tax ER  [U]'
                 break
            when = 11
                 let $Total-Label = 'Local ER  [R] '
                 break
            when = 12
                 let $Total-Label = 'State Unemployment Tax Special  [S]'
                 break
            when = 13
                 let $Total-Label = 'Voluntary Plan Disab Ins ER  [X]'
                 break
            when = 14
                 let $Total-Label = 'State EIC  [C]'
                 break
            when = 15
                 let $Total-Label = 'Family Leave Insurance  [I]'
                 break
            when = 16
                 let $Total-Label = 'Voluntary Family Leave Insurance  [O]'
                 break
            when = 17
                 let $Total-Label = 'Voluntary Family Leave Ins. ER [Y]'
                 break
            when = 18                                                                  !HP00001
                 let $Total-Label = 'Non Resident Alien Tax 1042  [A]'                 !HP00001
                 break                                                                 !HP00001
        end-evaluate

        let #M = #K
        let #N = #L

        let #items-value = 0
        if $RptPeriod = 'M'
           do Get-TaxArray
        end-if
        let #N = #L + 24
        do Get-TaxArray
        let #N = #L + 48
        do Get-TaxArray

        if #items-value <> 0

           let #M = #K
           let #N = #L

           print $Total-Label (+1,1)

              ! Print a state label for tax class H
           if #K = 0 and #L = 1
              let #Total-Label-Length = length($Total-Label) + 3
              print '(State)' (0,#Total-Label-Length)
           end-if

              ! Print a locality label
           if #K <> 0
              let #Total-Label-Length = length($Total-Label) + 3
              print '(Locality)' (0,#Total-Label-Length)
           end-if

           let #linetoprint = 0
           if $RptPeriod = 'M'
              print 'MTD' (+#linetoprint,50)
              let #linetoprint = 1
              do Get-TaxArray
              do Print-Totals-TaxArray
           end-if

           let #N = #L + 24
           print 'QTD' (+#linetoprint,50)
           do Get-TaxArray
           do Print-Totals-TaxArray

           let #N = #L + 48
           print 'YTD' (+1,50)
           do Get-TaxArray
           do Print-Totals-TaxArray

           print '' (+1,1)
        end-if

        let #L = #L + 1
     end-while

     let #K = #K + 1
  end-while

  if ($print-total = 'C' and ($CompLocalBTotBad = 'Y' or $CompLocalHTotBad = 'Y'
  or $CompStateHTotBad = 'Y' or $CompStateBTotBad = 'Y'))
  or ($print-total = 'G' and ($GrandStateBTotBad = 'Y' or $GrandStateHTotBad = 'Y'
  or $GrandLocalBTotBad = 'Y' or $GrandLocalHTotBad = 'Y'))
     print $MultiCountingNote    (+3,1)
  end-if
  new-page
end-procedure


begin-procedure Get-TaxArray
  let #EETxGrs = 0
  let #EETax   = 0
  let #ERTxGrs = 0
  let #ERTax   = 0
  let #NLGrs   = 0

  evaluate $print-total
     when = 'C'
        get  #EETxGrs          #EETax          #ERTxGrs          #ERTax
             #NLGrs
             from CompTaxArray(#M)
             Comp-EE-TxGrs(#N) Comp-EE-Tax(#N) Comp-ER-TxGrs(#N) Comp-ER-Tax(#N)
             Comp-NoLmtGrs(#N)

     when = 'G'
        get  #EETxGrs         #EETax         #ERTxGrs         #ERTax
             #NLGrs
             from TotTaxArray(#M)
             Tot-EE-TxGrs(#N) Tot-EE-Tax(#N) Tot-ER-TxGrs(#N) Tot-ER-Tax(#N)
             Tot-NoLmtGrs(#N)

     when-other
        get  #EETxGrs     #EETax     #ERTxGrs     #ERTax
             #NLGrs
             from TaxArray(#M)
             EE-TxGrs(#N) EE-Tax(#N) ER-TxGrs(#N) ER-Tax(#N)
             NoLmtGrs(#N)

  end-evaluate

  let #items-value = #items-value + ABS(#EETxGrs) + ABS(#EETax) + ABS(#ERTxGrs)
                                 + ABS(#ERTax) + ABS(#NLGrs)
end-procedure


begin-procedure Print-TaxArray

  do Format-Number(#EETxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,60)
  do Format-Number(#EETax, $out, 'B99,999,999,999.99mi')
  print $out                    (,81)
  do Format-Number(#ERTxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,102)
  do Format-Number(#ERTax, $out, 'B99,999,999,999.99mi')
  print $out                    (,123)
  do Format-Number(#NLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,145)

end-procedure


begin-procedure Print-Totals-TaxArray

  do Format-Number(#EETxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,60)

  if #K = 0 and #L = 1
  and (($print-total = 'C' and $CompStateHTotBad = 'Y')
  or ($print-total = 'G' and $GrandStateHTotBad = 'Y'))
     print '*'                  (,79)
  end-if

  if #K = 0 and #L = 8
  and (($print-total = 'C' and $CompStateBTotBad = 'Y')
  or ($print-total = 'G' and $GrandStateBTotBad = 'Y'))
     print '*'                  (,79)
  end-if

  if #K <> 0 and #L = 1
  and (($print-total = 'C' and $CompLocalHTotBad = 'Y')
  or ($print-total = 'G' and $GrandLocalHTotBad = 'Y'))
     print '*'                  (,79)
  end-if

  if #K <> 0 and #L = 8
  and (($print-total = 'C' and $CompLocalBTotBad = 'Y')
  or ($print-total = 'G' and $GrandLocalBTotBad = 'Y'))
     print '*'                  (,79)
  end-if

  do Format-Number(#EETax, $out, 'B99,999,999,999.99mi')
  print $out                    (,81)

  do Format-Number(#ERTxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,102)

  if #K = 0 and #L = 8
  and (($print-total = 'C' and $CompStateBTotBad = 'Y')
  or ($print-total = 'G' and $GrandStateBTotBad = 'Y'))
     print '*'                  (,121)
  end-if

  if #K <> 0 and #L = 8
  and (($print-total = 'C' and $CompLocalBTotBad = 'Y')
  or ($print-total = 'G' and $GrandLocalBTotBad = 'Y'))
     print '*'                  (,121)
  end-if

  do Format-Number(#ERTax, $out, 'B99,999,999,999.99mi')
  print $out                    (,123)

  do Format-Number(#NLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,145)

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'getqtrcd.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Process Scheduler Run Controls
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'geteandg.sqc'  !Get-EandG procedure                             !HP00001
