!**************************************************************
! FCXCLONE: Utility to "Clone" a Final Check Program Definition
!**************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:36:57                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

!***********************************************************************
! Due to current limitations of the PS Online toolset, the Final Check
! Program Definition tables series (PS_Term_Pgm_Tbl...) can not be
! copied using F7 in the panels.  This utility was developed to allow
! an entire Final Check program to be "cloned", such as at the start of
! a new year.
!***********************************************************************

#Include 'setenv.sqc'  !Set Database Environment
#Include 'setup31.sqc'   !Printer and page-size initialization

!***********************************
Begin-Report
!***********************************

  do Init-Report

  if ($ValidKeys = 'Y')

    display 'Utility Began at: ' noline
    do display-time

    do Main-Clone-Utility

    display 'Utility Ended at: ' noline
    do display-time

  end-if

  do StdAPI-Term

End-Report

!***********************************
Begin-Procedure Init-Report
!***********************************

  let $ReportID    = 'FCXCLONE'
  let $ReportTitle = 'Final Check Program Clone Utility'

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!***********************************
Begin-Procedure Get-Values
!***********************************

Begin-Select

RC_PAY.TERM_PGM_ID
RC_PAY.CUR_TERM_PGM_EFFDT
RC_PAY.NEW_TERM_PGM_ID
RC_PAY.NEW_TERM_PGM_EFFDT
RC_PAY.CLONE_EARNS_FLAG
RC_PAY.CLONE_LVE_ACCR_FLG
RC_PAY.CLONE_DED_FLAG

  move 'Y' to $ValidKeys

From PS_RC_PAY RC_PAY
Where RC_PAY.OPRID = $Prcs_OprID
And RC_PAY.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

End-Select

  let $Curr_Term_Pgm_Id = RTRIM(&RC_PAY.TERM_PGM_ID, ' ')
  let $Curr_EffDt = RTRIM(&RC_PAY.CUR_TERM_PGM_EFFDT, ' ')
  let $New_Term_Pgm_Id = RTRIM(&RC_PAY.NEW_TERM_PGM_ID, ' ')
  let $New_EffDt =  RTRIM(&RC_PAY.NEW_TERM_PGM_EFFDT, ' ')
  let $Clone_Earns_Flag = &RC_PAY.CLONE_EARNS_FLAG
  let $Clone_Lve_Accr_Flag = &RC_PAY.CLONE_LVE_ACCR_FLG
  let $Clone_Ded_Flag = &RC_PAY.CLONE_DED_FLAG

End-Procedure


!***********************************
Begin-Procedure Ask-Values
!***********************************

  move 'Y' to $ValidKeys

  move 'Old' to $PromptType
  do Ask-Term-Program
  move $WorkPgm to $Curr_Term_Pgm_Id
  do Ask-Effective-Date
  move $WorkDate to $Curr_EffDt

  move 'New' to $PromptType
  do Ask-Term-Program
  move $WorkPgm to $New_Term_Pgm_Id
  do Ask-Effective-Date
  move $WorkDate to $New_EffDt

  move 'Earns' to $PromptType
  do Ask-Clone-Defn
  move $CloneFlag to $Clone_Earns_Flag

  move 'Lve_Accr' to $PromptType
  do Ask-Clone-Defn
  move $CloneFlag to $Clone_Lve_Accr_Flag

  move 'Deds' to $PromptType
  do Ask-Clone-Defn
  move $CloneFlag to $Clone_Ded_Flag

  do Check-New-Pgm-Value

End-Procedure

!***********************************
Begin-Procedure Ask-Term-Program
!***********************************

  move 'N' to $DataOK

  While ($DataOK <> 'Y')

    if ($PromptType = 'Old')
      input $WorkPgm MaxLen=3 'Enter Name of current Final Check Program'
    else
      input $WorkPgm MaxLen=3 'Enter new Name for Final Check Program clone'
    end-if

    let $WorkPgm = UPPER(RTRIM($WorkPgm, ' '))
    if ($WorkPgm <> '')
      move 'Y' to $DataOK
    end-if

  End-While

End-Procedure

!**********************************
Begin-Procedure Ask-Effective-Date
!**********************************

  move 'N' to $DataOK

  While ($DataOK <> 'Y')

    if ($PromptType = 'Old')
      input $WorkDate
        'Enter Effective-Date of current Program ({Prompt-Date})'
    else
      input $WorkDate
        'Enter new Effective-Date for Program clone ({Prompt-Date})'
    end-if

    move {PDelimiter} to $DDelimiter
    do Format-DateTime($WorkDate,$WorkDate,{Prompt-Mask},'','native')
    do Validate-Native-Date($WorkDate,$DataOK)

  End-While

End-Procedure

!*****************************
Begin-Procedure Ask-Clone-Defn
!*****************************

  move 'N' to $DataOK

  While ($DataOK <> 'Y')

    Evaluate $PromptType
      when = 'Earns'
        input $CloneFlag MaxLen = 1 'Clone Earnings Definition? (Y/N)'
        break
      when = 'Lve_Accr'
        input $CloneFlag MaxLen = 1 'Clone Leave Accruals Definition? (Y/N)'
        break
      when = 'Deds'
        input $CloneFlag MaxLen = 1 'Clone Deductions Definition? (Y/N)'
        break
    End-Evaluate

    let $CloneFlag = UPPER(RTRIM($CloneFlag, ' '))
    if $CloneFlag <> ''
       if $CloneFlag = 'Y' or $CloneFlag = 'N'
          move 'Y' to $DataOK
       end-if
    end-if

  End-While

End-Procedure

!**********************************
Begin-Procedure Check-New-Pgm-Value
!**********************************

  let $New_Pgm_Exists = 'N'

Begin-Select
'x'
  move 'Y' to $New_Pgm_Exists
from PS_TERM_PGM_TBL TPT
where $New_Term_Pgm_Id = TPT.TERM_PGM_ID
End-Select
  if $New_Pgm_Exists = 'Y'
    move 'N' to $ValidKeys
    display ' '
    display 'The new Final Check Program ID entered...'
    display '   ' NoLine
    display $New_Term_Pgm_Id
    display '   ' NoLine
    display 'already exists.'
    display ' '
  end-if
End-Procedure

!**********************************
Begin-Procedure Main-Clone-Utility
!**********************************

  do Clone-Pgm-Attributes
  If $Clone_Earns_Flag = 'Y'
    do Clone-Earnings-Attributes
  End-if
  If $Clone_Lve_Accr_Flag = 'Y'
    do Clone-Leave-Accrual-Attributes
  End-if
  If $Clone_Ded_Flag = 'Y'
    do Clone-Deductions-Attributes
  End-if
  do Commit-Transaction

End-Procedure

!************************************
Begin-Procedure Clone-Pgm-Attributes
!************************************

  let $GotPgmFlag = 'No'

Begin-Select
A.TERM_PGM_ID
A.EFFDT
A.EFF_STATUS
A.DESCR
A.DESCRSHORT
A.INCL_PYBL_TM

  let $GotPgmFlag = 'Yes'
  do Insert-Pgm-Attributes

From PS_TERM_PGM_TBL A
Where A.TERM_PGM_ID     = $Curr_Term_Pgm_Id
And   A.EFFDT           = $Curr_EffDt
End-Select

  if $GotPgmflag = 'No'
    display ' '
    display 'The Final Check Program entered...'
    display '   ' NoLine
    display $Curr_Term_Pgm_Id
    display '   ' NoLine
    do Format-DateTime($Curr_EffDt, $EffDt, {DEFDATE}, '', '')
    display $EffDt
    display 'does not exist in PS_Term_Pgm_Tbl.'
    display ' '
  end-if

End-Procedure

!*************************************
Begin-Procedure Insert-Pgm-Attributes
!*************************************

  let $SQL-Statement = 'FCXCLONE: Insert-Pgm-Attributes'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_TERM_PGM_TBL
( TERM_PGM_ID,
  EFFDT,
  EFF_STATUS,
  DESCR,
  DESCRSHORT,
  INCL_PYBL_TM
)
Values
( $New_Term_Pgm_Id,
  $New_Effdt,
  &A.Eff_Status,
  &A.Descr,
  &A.DescrShort,
  &A.Incl_Pybl_Tm
)

End-SQL
End-Procedure

!****************************************
Begin-Procedure Clone-Earnings-Attributes
!****************************************

Begin-Select
B.TERM_PGM_ID
B.EFFDT
B.ERNCD
B.AMT_OVRD_LIMIT
B.PAYOUT_OPTION

  do Insert-Earnings-Attributes

From PS_TERM_PGM_DEFERN B
Where B.TERM_PGM_ID     = $Curr_Term_Pgm_Id
And   B.EFFDT           = $Curr_EffDt
End-Select
End-Procedure

!*****************************************
Begin-Procedure Insert-Earnings-Attributes
!*****************************************

  let $SQL-Statement = 'FCXCLONE: Insert-Earnings-Attributes'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_TERM_PGM_DEFERN
( TERM_PGM_ID,
  EFFDT,
  ERNCD,
  AMT_OVRD_LIMIT,
  PAYOUT_OPTION
)
Values
( $New_Term_Pgm_Id,
  $New_Effdt,
  &B.Erncd,
  &B.Amt_Ovrd_Limit,
  &B.Payout_Option
)
End-SQL
End-Procedure

!*********************************************
Begin-Procedure Clone-Leave-Accrual-Attributes
!*********************************************

Begin-Select
C.TERM_PGM_ID
C.EFFDT
C.PLAN_TYPE
C.BENEFIT_PLAN
C.HRS_OVRD_LIMIT
C.PRORATE_ACCRUALS
C.SERVICE_ACCRUAL
C.PRCS_ON_NEGATIVE
C.ERNCD_TO_PAY_ACCR
C.ERNCD_TO_PAY_PRORT

  do Insert-Leave-Accrual-Attributes
  do Clone-Term-Prort-Attributes

From PS_TERM_PGM_DEFLVE C
Where C.TERM_PGM_ID = $Curr_Term_Pgm_Id
And   C.EFFDT       = $Curr_EffDt
End-Select


End-Procedure


!**********************************************
Begin-Procedure Insert-Leave-Accrual-Attributes
!**********************************************

  let $SQL-Statement = 'FCXCLONE: Insert-Leave-Accrual-Attributes'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_TERM_PGM_DEFLVE
( TERM_PGM_ID,
  EFFDT,
  PLAN_TYPE,
  BENEFIT_PLAN,
  HRS_OVRD_LIMIT,
  PRORATE_ACCRUALS,
  SERVICE_ACCRUAL,
  PRCS_ON_NEGATIVE,
  ERNCD_TO_PAY_ACCR,
  ERNCD_TO_PAY_PRORT
)
Values
( $New_Term_Pgm_Id,
  $New_Effdt,
  &C.Plan_Type,
  &C.Benefit_Plan,
  &C.Hrs_Ovrd_Limit,
  &C.Prorate_Accruals,
  &C.Service_Accrual,
  &C.Prcs_On_Negative,
  &C.Erncd_To_Pay_Accr,
  &C.Erncd_To_Pay_Prort
)
End-SQL
End-Procedure

!******************************************
Begin-Procedure Clone-Term-Prort-Attributes
!******************************************

Begin-Select
D.TERM_PGM_ID
D.EFFDT
D.PLAN_TYPE
D.BENEFIT_PLAN
D.SERVICE_LENGTH
D.SERVICE_HRS
D.HRS_TO_PAY

  do Insert-Term-Prort-Attributes

From PS_TERM_PRORT_ACCR D
Where D.TERM_PGM_ID     = $Curr_Term_Pgm_Id
And   D.EFFDT           = $Curr_EffDt
And   D.PLAN_TYPE       = &C.PLAN_TYPE
And   D.BENEFIT_PLAN    = &C.BENEFIT_PLAN
End-Select
End-Procedure

!*******************************************
Begin-Procedure Insert-Term-Prort-Attributes
!*******************************************

  let $SQL-Statement = 'FCXCLONE: Insert-Term-Prort-Attributes'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_TERM_PRORT_ACCR
( TERM_PGM_ID,
  EFFDT,
  PLAN_TYPE,
  BENEFIT_PLAN,
  SERVICE_LENGTH,
  SERVICE_HRS,
  HRS_TO_PAY
)
Values
( $New_Term_Pgm_Id,
  $New_Effdt,
  &D.Plan_Type,
  &D.Benefit_Plan,
  &D.Service_Length,
  &D.Service_Hrs,
  &D.Hrs_To_Pay
)
End-SQL
End-Procedure

!******************************************
Begin-Procedure Clone-Deductions-Attributes
!******************************************

Begin-Select
E.TERM_PGM_ID
E.EFFDT
E.PLAN_TYPE
E.DEDCD
E.AMT_OVRD_LIMIT
E.TERM_PROC_RULE

  do Insert-Deductions-Attributes

From PS_TERM_PGM_DEFDED E
Where E.TERM_PGM_ID     = $Curr_Term_Pgm_Id
And   E.EFFDT           = $Curr_EffDt
End-Select
End-Procedure

!*******************************************
Begin-Procedure Insert-Deductions-Attributes
!*******************************************

  let $SQL-Statement = 'FCXCLONE: Insert-Deductions-Attributes'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_TERM_PGM_DEFDED
( TERM_PGM_ID,
  EFFDT,
  PLAN_TYPE,
  DEDCD,
  AMT_OVRD_LIMIT,
  TERM_PROC_RULE
)
Values
( $New_Term_Pgm_Id,
  $New_Effdt,
  &E.Plan_Type,
  &E.Dedcd,
  &E.Amt_Ovrd_Limit,
  &E.Term_Proc_Rule
)
End-SQL
End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!**************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime Pocedure
#Include 'datetime.sqc'  !Format-DateTime Procedure
#Include 'validdt.sqc'   !Validate-Native-Date Procedure
#Include 'stdapi.sqc'    !Update Process API
!******************************* End of Utility *****************************
