!***********************************************************************
!  FPA110  : Pending Individual orders Editing
!  PHASE 1 : Flat Table to Edit Orders Creating
!
!  Values from Row Origin ($Orig):
!     I  =  Individual orders    ; with a button
!     J  =       idem            ; With a process
!     A  =  Abrogation orders    ; with a button
!     C  =  Collective orders    ; with a process
!
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!                $Date:  2006/01/09:06:42:31                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

!-------------------------------------------
! INCLUDES ENVIRONEMENT
!-------------------------------------------
#include 'setenv.sqc'    !Set environment
#include 'setup06.sqc'   !Printer and page-size initialization
#include 'rdbms.sqc'     !Database environment

!-------------------------------------------
! DEFINE
!-------------------------------------------
#DEFINE Size_FPTable 6     ! Create-Array FPTable
#DEFINE Size_DocWord 1     ! Create-Array DocWord
#DEFINE Size_FPFlat  200   ! Create-Array FPFlat

!-------------------------------------------
! SETUP
!-------------------------------------------
begin-setup
end-setup



!------------------------------------!
! REPORT                             !
!------------------------------------!
begin-report

 Do Init-DateTime           !datetime.sqc
 Do Init-Number             !number.sqc
 Do Get-Current-DateTime    !curdttim.sqc
 Do Init-Report
 Do Process-main
 Do Stdapi-Term             !stdapi.sqc

end-report



!-------------------------------------------
! Procedure INIT-REPORT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Init-Report

 !----Titre----
 move 'FPA110' to $ReportID
 move 'Orders Editing' to $ReportTitle

 !----Process Scheduler setup----
 do Stdapi-Init                 !stdapi.sqc
 do Security-Param              !SQR security

 let $Instance_process='Instance de process :' || $prcs_process_instance

  if $prcs_process_instance = ''
  or $prcs_process_instance = '0'
     do Input-Variables
  else                                 ! Process lauching
     do FP-Select-Parameters
     do FP-select-parameters-notices
     do Select-Parameters
  end-if

 let $empl_rcd = to_char(#empl_rcd)

 #IFDEF DEBUGi
 Display $ReportTitle
 Display $Instance_process
 Display '****parameters list:****'
 Display 'Orig :' noline
 Display $orig
 Display 'Emplid :' noline
 Display $emplid
 Display 'Empl_rcd :' noline
 Display $empl_rcd
 Display 'Notif_ref :' noline
 Display $notif_ref
 Display 'Action :' noline
 Display $action
 Display 'Statusee :' noline
 Display $statusee
 Display 'Edttmp :' noline
 Display $edttmp
 Display 'Edtfnl :' noline
 Display $edtfnl
 Display 'End list' noline
 #ENDIF

 !----Init array  FPTable :Code + origin tables name order + origin history tables name order----
 create-array name=FPTable size={Size_FPTable}
                           field=Tblcd:char field=Tblnm:char field=TblcdH:char  field=TblnmH:char
 put 'A' 'PS_FPAEEPOST_TBL' 'F' 'PS_FPAEEPOST_HIST ' into FPTable(0)  Tblcd Tblnm TblcdH TblnmH
 put 'C' 'PS_FPAEECAREER' 'H' 'PS_FPAEECAREE_HIST' into FPTable(1)  Tblcd Tblnm TblcdH TblnmH
 put 'R' 'PS_FPAEESALARY' 'L' 'PS_FPAEESALAR_HIST' into FPTable(2)  Tblcd Tblnm TblcdH TblnmH
 put 'S' 'PS_FPAEELEGALSTAT' 'G' 'PS_FPAEELEGAL_HIST' into FPTable(3)  Tblcd Tblnm TblcdH TblnmH
 put 'W' 'PS_FPAEEWORKRT' 'K' 'PS_FPAEEWORK_HIST ' into FPTable(4)  Tblcd Tblnm TblcdH TblnmH
 put 'I' 'PS_FPAEEOTHER_TBL' 'T' 'PS_FPAEEOTHR_HIST ' into FPTable(5)  Tblcd Tblnm TblcdH TblnmH

 !----Init array  DocWord :select Documents for Employee status / orders ---
 create-array name=DocWord size={Size_DocWord}
                          field=FpWord:char:5

 !----Init array  FPFlat :Array for the flat table : FPAEEFLAT_TBL ---
 create-array name=FPFlat size={Size_FPFlat}
                         field=Fieldname:char
                         field=Recname:char
                         field=PromptTable:char

end-procedure Init-Report



!-------------------------------------------
! Procedure INPUT-VARIABLES
!-------------------------------------------
! Description : parameters for the SQR
! In  :
! Out :
!-------------------------------------------
begin-procedure Input-Variables

 Input $orig             'I/J/A/C ?'
 Input $emplid maxlen=11 'Emplid '
 Input $empl_rcd         'Empl Rcd Nbr '
 Input $notif_ref        'Order Ref'
 Input $statusee         'Employee Status Code'
 Input $action           'Action'
 Input $edttmp           'Provisional Editing Y/N ? '
 Input $edtfnl           'Final Editing Y/N ? '

 if $Orig = 'J' or $Orig = 'C'
  Input $FromDate           'Start date '   type=date
  Input $ThruDate           'thru date '   type=date
 end-if

end-procedure Input-Variables



!-------------------------------------------
! Procedure GET-VALUES
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Get-Values

 Do Get-Orig                      !  FPgetval.sqc
 Do Get-From-Thru-Date            !  HRgetval.sqc
 Do Get-Emplid                    !  HRgetval.sqc
 Do Get-Statusee                  !  FPgetval.sqc
 Do Get-Action                    !  FPgetval.sqc
 Do Get-EmplRcd                   !  FPgetval.sqc
 Do Get-notif_ref
 Do Get-fp-notices-param 
 Do FP-Get-From-Thru-date


 if $Orig <> 'C'
  Do Get-FnlTmp                   !  FPgetval.sqc
 end-if

end-procedure Get-Values



!-------------------------------------------
! Procedure PROCESS-MAIN
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure PROCESS-MAIN

 display 'Delete-All-FLAT-JL procedure'
 Do Delete-All-FLAT-JL

 Do Format-$Where
 Do Get-Notice

 if $Orig <> 'C'                        ! Crystal file except Collectif orders

    Do Format-$Main_Where
    !Do Delete-All-FLAT                 ! Delete FLAT after Edit
    Do Create-File-FPWORD               ! FPAWORD.SQC

    Do Write-Done
 end-if

 end-procedure PROCESS-MAIN



!-------------------------------------------
! Procedure FORMAT-$WHERE
!-------------------------------------------
! Description :
! 1) Create $Notice-Where to select FPAEENOTICE...
! 2) Create $Zeffdt-Where to select between start date and thru date .. (Mass)
! 3) Create $C1statut-Where to select Employee Status ... (Mass)
! 4) Select and update last reference number. (Internal if Collective orders)
! In  :
! Out :
!-------------------------------------------
Begin-Procedure Format-$Where

 Evaluate $Orig

  When = 'I'      ! Single Individual orders --> and return order
   let $Notice_Where = ' B.EMPLID = ''' || $emplid || ''''
   let $Notice_Where = $Notice_Where || ' and B.EMPL_RCD = ' || $empl_rcd
   let $Notice_Where = $Notice_Where || ' and B.FP_NOTIF_REF = ''' || $notif_ref || ''''

   let $Zeffdt_Where = ''

   let $C1statut_Where = ''
   Break

  When = 'A'      ! Single Abrogation ordres --> no return
   let $Notice_Where = ' B.EMPLID = ''' || $emplid || ''''
   let $Notice_Where = $Notice_Where || ' and B.EMPL_RCD = ' || $empl_rcd
   let $Notice_Where = $Notice_Where || ' and B.FP_NOTIF_REF = ''' || $notif_ref || ''''
   let $Notice_Where = $Notice_Where || ' and B.FP_RETURN_R <> ''R'''

   let $Zeffdt_Where = ''

   let $C1statut_Where = ''
   Break

  When = 'J'      ! Individual (Mass)
   let $Notice_Where = ' B.ACTION = ''' || $action || ''''
   let $Notice_Where = $Notice_Where || ' and (B.FP_EDITIDVDEC = ''Y'''
   let $Notice_Where = $Notice_Where || ' or B.FP_IDV_ON_REQ = ''Y'')'
   let $Notice_Where = $Notice_Where || ' and B.FP_IDVEDIT_DT IS NULL'

   let $Zeffdt_Where = ' and Z.EFFDT >= {DATEIN-PREFIX}''' || $FromDate || ''''
   let $Zeffdt_Where = $Zeffdt_Where || '{DYN-DateIn-Suffix} and Z.EFFDT <= {DATEIN-PREFIX}''' || $ThruDate || ''''
   let $Zeffdt_Where = $Zeffdt_Where || '{DYN-DateIn-Suffix}'

   let $C1statut_Where = ' and C1.FP_STATUSEE_CD = ''' || $statusee || ''''
   Break

  When = 'C'      ! Collective (Mass)  --> no return
   let $Notice_Where = ' B.ACTION = ''' || $action || ''''
   let $Notice_Where = $Notice_Where || ' and (B.FP_EDITCOLDEC = ''Y'''
   let $Notice_Where = $Notice_Where || ' or B.FP_COL_ON_REQ = ''Y'')'
   let $Notice_Where = $Notice_Where || ' and B.FP_COLEDIT_DT IS NULL'
   let $Notice_Where = $Notice_Where || ' and B.FP_RETURN_R <> ''R'''

   let $Zeffdt_Where = ' and Z.EFFDT >= {DATEIN-PREFIX}''' || $FromDate || ''''
   let $Zeffdt_Where = $Zeffdt_Where || '{DYN-DateIn-Suffix} and Z.EFFDT <= {DATEIN-PREFIX}''' || $ThruDate || ''''
   let $Zeffdt_Where = $Zeffdt_Where || '{DYN-DateIn-Suffix}'

   let $C1statut_Where = ' and C1.FP_STATUSEE_CD = ''' || $statusee || ''''

   Do Select-Sys-RefColPS(#Num)            ! FPPARAM.SQC
   Let #Num = #Num + 1
   let #RefcolPS = #Num
   Let $RefcolPS = To_Char(#Num)
   Do Updt-Sys-RefColPS(#Num)              ! FPPARAM.SQC
   Break

 end-Evaluate

 #IFDEF DEBUGi
 Display '$Orig' NOLINE
 Display $Orig
 Display 'Notice_Where : ' NOLINE
 Display $Notice_Where
 Display 'Zeffdt_Where : ' NOLINE
 Display $Zeffdt_Where
 Display 'C1statut_Where : ' NOLINE
 Display $C1statut_Where
 #ENDIF

End-Procedure Format-$Where



!-------------------------------------------
! Procedure GET-NOTICE
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
Begin-Procedure Get-Notice

let $sql-statement = 'FPA110.SQR,Get-Notice,Select,PS_FPAEENOTICE B'
Begin-Select On-Error=SQL-Error

B.EMPLID
B.EMPL_RCD
B.FP_TBL_CD
B.FP_NOTIF_REF
B.ACTION
B.FP_RETURN_R

    Let $Action     =rtrim(&B.ACTION,' ')
    !Let $return_r  =rtrim(&B.FP_RETURN_R,' ')
    Let $notif_ref  =rtrim(&B.FP_NOTIF_REF,' ')         ! Mass
    Let $emplid     =rtrim(&B.EMPLID,' ')               ! Mass
    Let $return_r   =&B.FP_RETURN_R

    Let #empl_rcd   =&B.EMPL_RCD

    #IFDEF DEBUGi
    Display '*** select from PS_FPAEENOTICE, Proc. Get-Notice****'
    Display '$Action :' noline
    Display $Action
    Display '$return_r :' noline
    Display $return_r
    Display '$notif_ref :' noline
    Display $notif_ref
    Display '$emplid :' noline
    Display $emplid
    #ENDIF

    Do Get-FPTable            ! Origin Tables Order

    if $FromTable = 'PS_FPAEELEGALSTAT'
        Do Get-Effdt          ! Effdt Origin Table
    else
        Do Get-Effdt-Effseq   ! Effdt Origin Table
    end-if

    Do Where-Clause           ! Variable 'WHERE' accorting to Row Origin
    display '$CurrDt: ' noline
    display $CurrDt

    if $CurrDt <> ''             !
        Do Select-emplid         ! Select Employee datas
        Do Get-Data              !

        if $C1Statusee <> ''     !
            Do Get-Doc           ! select document references (depend of the status)
            Do Put-Data          ! update FPAEEFLAT_TBL
        end-if
    end-if

from PS_FPAEENOTICE B
    ,PS_FPFAST_PERS_VW2 SCRTY           !SQR security

where [$Notice_Where]

      and B.EMPLID = SCRTY.EMPLID       !
      and B.EMPL_RCD = SCRTY.EMPL_RCD   !SQR security
      [$SecurityClause]                 !

end-Select

End-Procedure Get-Notice



!-------------------------------------------
! Procedure GET-FPTABLE
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Get-FPTable

 Let #I=0
 While #I<{Size_FPTable}
  Get $Tblcd $FromTable $TblcdH $FromTableH from FPTable(#I) Tblcd Tblnm TblcdH TblnmH

  #IFDEF DEBUGi
  Display '$Tblcd:' noline
  Display $Tblcd noline
  Display ' - ' noline
  Display '$FromTable:' noline
  Display $FromTable noline
  Display ' - ' noline
  Display '$TblcdH:' noline
  Display $TblcdH  noline
  Display ' - ' noline
  Display '$FromTableH:' noline
  Display $FromTableH
  #ENDIF

  if #I= 6
   break
  end-if
  Let #I=#I+1
 end-While


 !----Select table names from FPTable array----
 Let #I=0
 While #I<{Size_FPTable}
  Get $Tblcd $FromTable $TblcdH $FromTableH from FPTable(#I) Tblcd Tblnm TblcdH TblnmH

  if $Tblcd=rtrim(&B.FP_TBL_CD,' ')
   break
  end-if
  Let #I=#I+1
 end-While

 #IFDEF DEBUGi
 Display '*** Variables from Procedure Get-FPTable ****'
 Display '$Tblcd :' noline
 Display $Tblcd
 Display '$FromTable :' noline
 Display $FromTable
 Display '$TblcdH :' noline
 Display $TblcdH
 Display '$FromTableH :' noline
 Display $FromTableH
 #ENDIF

End-Procedure Get-FPTable



!-------------------------------------------
! Procedure GET-EFFDT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Get-Effdt

 let $CurrDt = ''
 let $Z.ACTION_REASON = ' '

 Concat ' Z' with $FromTable

let $sql-statement = 'FPA110.SQR,Get-Effdt,Select,' || $Fromtable
Begin-Select distinct On-Error=SQL-Error

{DATEOUT-PREFIX}Z.EFFDT{DATEOUT-SUFFIX} &Z.EFFDT
Z.ACTION_REASON
Z.FP_ACTION_REF

    let $CurrDt = &Z.EFFDT
    let $Z.ACTION_REASON = &Z.ACTION_REASON
    let $Action_Ref = &Z.FP_ACTION_REF

From [PS_FPAEELEGALSTAT Z:$FromTable]
    ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

where Z.FP_NOTIF_REF=$notif_ref
[$Zeffdt_Where]                     !Mass

and Z.EMPLID = SCRTY.EMPLID         !
and Z.EMPL_RCD = SCRTY.EMPL_RCD     !SQR security
[$SecurityClause]                   !

end-select

 #IFDEF DEBUGi
 Display '***Variables from Procedure Get-Effdt**** '
 Display '$fromtable :' noline
 Display $fromtable
 Display '$currdt :' noline
 Display $currdt
 Display '$Z.ACTION_REASON  :' noline
 Display $Z.ACTION_REASON
 Display '$Action_Ref (Z.FP_ACTION_REF) :' noline
 Display $Action_Ref
 #ENDIF

 let $FromTable = rtrim(rtrim($FromTable,'Z'),' ')

End-Procedure Get-Effdt



!-------------------------------------------
! Procedure Get-Effdt-Effseq
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
Begin-Procedure Get-Effdt-Effseq

 let $CurrDt = ''
 let $Z.ACTION_REASON = ' '

    Concat ' Z' with $FromTable

let $sql-statement = 'FPA110.SQR,Get-Effdt-Effseq,Select,' || $Fromtable
Begin-Select distinct On-Error=SQL-Error

{DATEOUT-PREFIX}Z.EFFDT{DATEOUT-SUFFIX} &ZZ.EFFDT
Z.EFFSEQ        &ZZ.EFFSEQ
Z.ACTION_REASON &ZZ.ACTION_REASON
Z.FP_ACTION_REF &ZZ.FP_ACTION_REF

    let $CurrDt = &ZZ.EFFDT
    let #effseq = &ZZ.EFFSEQ
    !let $Z.ACTION_REASON = rtrim(&Z.ACTION_REASON,' ')
    !let $Action_Ref = rtrim(&Z.FP_ACTION_REF,' ')
    let $Z.ACTION_REASON = &ZZ.ACTION_REASON
    let $Action_Ref = &ZZ.FP_ACTION_REF

From [PS_FPAEECAREER Z:$FromTable]
!    ,PS_FPAEMPLOYM_SRC3 Z1
     ,PS_FPFAST_PERS_VW2 SCRTY      !SQR security

where Z.FP_NOTIF_REF=$notif_ref
[$Zeffdt_Where]                     !Mass

and Z.EMPLID = SCRTY.EMPLID         !SQR security
and Z.EMPL_RCD = SCRTY.EMPL_RCD     !SQR security
[$SecurityClause]                   !SQR security

end-select

 #IFDEF DEBUGi
 Display '***Variables from Procedure Get-Effdt-Effseq **** '
 Display '$fromtable :' noline
 Display $fromtable
 Display '$currdt :' noline
 Display $currdt
 Display '$Z.ACTION_REASON  :' noline
 Display $Z.ACTION_REASON
 Display '$Action_Ref (Z.FP_ACTION_REF) :' noline
 Display $Action_Ref
 #ENDIF

 let $FromTable = rtrim(rtrim($FromTable,'Z'),' ')

End-Procedure Get-Effdt-Effseq



!-------------------------------------------
! Procedure SELECT-EMPLID
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
Begin-Procedure Select-emplid

let $sql-statement = 'FPA110.SQR,Select-Emplid,Select,PS_PERSONAL_DT_FST A'
Begin-Select On-Error=SQL-Error

A.EMPLID
A.NAME
{DATEOUT-PREFIX}A.BIRTHDATE{DATEOUT-SUFFIX} &A.BIRTHDATE
A.BIRTHPLACE
A.NAME_PREFIX

From PS_PERSONAL_DT_FST A


Where A.EMPLID=$emplid

end-Select

End-Procedure Select-emplid



!-------------------------------------------
! Procedure GET-DATA
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Get-Data

 Do Init-Fields           !FPA110.SQC Impacted Fields Initialisation
 Do Get-CONTRAT           !FPA110.SQC select PS_FPAEESTATUS (C1)

 #IFDEF DEBUGi
 display '****Variables from Procedure Get-Data ****'
 display '$Emplid :' noline
 display $emplid
 display '$Notif_ref :' noline
 display $notif_ref
 display '$Statusee :' noline
 display $statusee
 display '$C1statusee :' noline
 display $c1statusee
 display '$Action :' noline
 display $action
 display '$Currdt :'  noline
 display $currdt
 display '$C1effdt :' noline
 display $C1effdt
 #ENDIF

 if $C1Statusee <> ''    ! If employee status
  Do Get-FPAEECAREER     ! C2
  Do Get-FPAEELEGALSTAT  ! C3
  Do Get-FPAEEPOST       ! C4
  Do Get-FPAEESALARY     ! C5
  Do Get-FPAEEWORKRT     ! C6
  Do Get-Micellaneous    ! useful for compensation calculation
 end-if

End-Procedure Get-Data



!-------------------------------------------
! Procedure GET-DOC
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Get-Doc

 Clear-Array Name=DocWord
 Evaluate $Orig
  When = 'I'                      !Individual Orders (Single)

  When = 'J'                      !Individual Orders (Mass)
   if RTRIM($return_r,' ')=''
    let $TypNot='S'               !Orders
   else
    let $TypNot='R'               !Return
   end-if
  Break

  When = 'A'                     !Abrogation (Single)
   let $TypNot='A'               !Abrogation
  Break

  When = 'C'                     !Collective Orders (Mass)
   let $TypNot='9'               !To cancel the next Select
   Put '999999' into DocWord(0)  !To be able to write into FPAEEFLAT
   Break

 End-Evaluate

 #IFDEF DEBUGi
 display '****Variables from Procedure Get-Doc ****'
 Display '$TypNot :' noline
 Display $TypNot
 Display '$C1Statusee :' noline
 Display $C1Statusee
 Display '$Action :' noline
 Display $Action
 #ENDIF

let $sql-statement = 'FPA110.SQR,Get-Doc,Select,PS_FPMSTATACTDOC D'
Begin-Select On-Error=SQL-Error
D.FP_WORD01
D.FP_WORD02
D.FP_WORD03
D.FP_WORD04
D.FP_WORD05

 let $FP_WORD01 = rtrim(&D.FP_WORD01,' ')
 let $FP_WORD02 = rtrim(&D.FP_WORD02,' ')
 let $FP_WORD03 = rtrim(&D.FP_WORD03,' ')
 let $FP_WORD04 = rtrim(&D.FP_WORD04,' ')
 let $FP_WORD05 = rtrim(&D.FP_WORD05,' ')
 Put $FP_WORD01 $FP_WORD02 $FP_WORD03 $FP_WORD04 $FP_WORD05
  into DocWord(0) FpWord(0) FpWord(1) FpWord(2) FpWord(3) FpWord(4)

 #IFDEF DEBUGi
    Display '... DocWord array content...'
    Display $FP_WORD01 noline
    Display ' - ' noline
    Display $FP_WORD02 noline
    Display ' - ' noline
    Display $FP_WORD03 noline
    Display ' - ' noline
    Display $FP_WORD04 noline
    Display ' - ' noline
    Display $FP_WORD05
 #ENDIF

From PS_FPMSTATACTDOC D
where  D.FP_STATUSEE_CD =$C1Statusee
and    D.ACTION=$Action
and    D.FP_TYP_NOT=$TypNot
end-select

End-Procedure Get-Doc



!------------------------------------------------------------
! Procedure PUT-DATA
!------------------------------------------------------------
!
! Description : Insert results into FPAEEFLAT_TBL
!               One row per Document and per Employee
! In  :
! Out :
!------------------------------------------------------------
begin-procedure Put-Data

 #IFDEF DEBUGi
 display '****Variables from Procedure Put-Data ****'
 Display '$C1Statusee :' noline
 Display $C1Statusee
 Display '$Action :' noline
 Display $Action
 Display '$orig :' noline
 Display $orig
 #ENDIF

 let $flg_WORD = ''
 Let #J=0

!------------------------------------------------
! Just one insert
!------------------------------------------------
! While #J<=4

  Get $Word From DocWord(0) FpWord(#J)

  #IFDEF DEBUGi
  Display 'Procedure Put-Data - Word value :' noline
  Display $Word
  #ENDIF

  if RTRIM($Word,' ')<>''
   let $flg_WORD = '1'
   Do Check-FPAEEFLAT
   if #wcnt>0               ! Clean FPAEEFLAT_TBL if row
    Do Delete-FPAEEFLAT
   end-if
   Do Insert-FPAEEFLAT      ! Insert into FPAEEFLAT_TBL
   Do Update-Notice         ! Update FPAEENOTICE
  end-if
  Let #J=#J+1

! end-while

 #IFDEF DEBUGi
 display '****Variables from Procedure Put-Data ****'
 if $flg_WORD = ''
  Display 'No Document Found'
 else
  Display 'Document Found'
 end-if
 #ENDIF

End-Procedure Put-Data



!------------------------------------------------------------------------------------
! Procedure UPDATE-NOTICE
!------------------------------------------------------------------------------------
! Description :
! Update Row Origin and possibly Order Ref.
! In  :
! Out :
!------------------------------------------------------------------------------------
begin-procedure Update-Notice

 let $Set_Notice = 'SET LAST_UPDATE_DATE = {DATEIN-PREFIX}''' || $AsOfToday || ''''
 let $Set_Notice = $Set_Notice || '{DYN-DateIn-Suffix}'
 display $Set_Notice

 Evaluate $Orig
  When = 'I'      ! Individual Orders (Single)

  When = 'J'      ! Individual Orders (Mass)
   let $Set_Notice = $Set_Notice || ',FP_EDT_TMP = ''' || $edttmp || ''''
   let $Set_Notice = $Set_Notice || ',FP_EDT_FNL = ''' || $edtfnl || ''''
   if $edtfnl='Y'   ! Final Editing
      let $Set_Notice = $Set_Notice || ',FP_IDVEDIT_DT = {DATEIN-PREFIX}''' || $AsOfToday || ''''
      let $Set_Notice = $Set_Notice || '{DYN-DateIn-Suffix}'
   end-if
   Break

  When = 'A'      ! Order Abrogation (Single)
   let $Set_Request = $Set_Notice || ',FP_TBL_CD = ''' || $TblcdH || ''''
   let $Set_Notice = $Set_Notice || ',FP_DEC_ABROG_DT = {DATEIN-PREFIX}''' || $AsOfToday || ''''
   let $Set_Notice = $Set_Notice || '{DYN-DateIn-Suffix},FP_TBL_CD = ''' || $TblcdH || ''''
   Do Update-Abrog    ! Abrogation Process Update
   Break

  When = 'C'      ! Collective (Mass)
   let $Set_Notice = $Set_Notice || ',FP_COLEDIT_DT = {DATEIN-PREFIX}''' || $AsOfToday || ''''
   let $Set_Notice = $Set_Notice || '{DYN-DateIn-Suffix},FP_REFCOL_PS = ' || $RefcolPs
   Break

 End-Evaluate

 #IFDEF DEBUGi
 Display '$edtfnl :' noline
 Display $edtfnl
 Display '$orig :' noline
 Display $orig
 Display '$Set_Notice :' noline
 Display $Set_Notice
 #ENDIF

let $sql-statement = 'FPA110.SQR,Update-Notice,Update,PS_FPAEENOTICE'
Begin-SQL On-Error=SQL-Error
Update PS_FPAEENOTICE [$Set_Notice]
where  EMPLID =$emplid
and    FP_NOTIF_REF = $notif_ref
and    FP_RETURN_R =$return_r
end-SQL

 !----Update REQUEST ----
 if RTRIM(&Z.FP_ACTION_REF,' ') <> ''
  do Upd-Request
 end-if

End-Procedure Update-Notice



!-------------------------------------------
! Procedure UPDATE-ABROG
!-------------------------------------------
! Description :
! Abrogation Orders Process
! Select fields from History Tables
! 1) Insert into HIST_Tables
! 2) Update ROW-1 End-date from origin master table
! 3) Delete origin master table
! In  :
! Out :
!-------------------------------------------
begin-procedure Update-Abrog

 #IFDEF DEBUGi
 display '****Variables from Procedure Update-Abrog ****'
 display '$FromTable ' noline
 display $FromTable
 display '$FromTable_HIST ' noline
 display $FromTableH
 #ENDIF

 !----Select fields from History Tables----
 do list-fields($FromTableH,$field_list )
 display 'LISTE DES CHAMPS MISE EN FORME :' noline
 display $field_list

 !----1) Insert into HIST_Tables ----
 let $sql-statement = 'FPA110.SQR,Update-Abrog,Insert,' || $FromTableH

Begin-SQL On-Error=SQL-Error
Insert INTO [FPAEELEGALSTAT:$FromTableH] ([$field_list])
 select [$field_list] from [FPAEELEGALSTAT:$FromTable]
 where  EMPLID =$emplid
 and    EMPL_RCD=#empl_rcd
 and    FP_NOTIF_REF = $notif_ref

end-SQL

 !----2) Update ROW-1 End-date from origin master table----
 do Update-Row-1

 !----3) Delete origin master table----
let $sql-statement = 'FPA110.SQR,Update-Abrog,Delete,' || $FromTable
Begin-SQL On-Error=SQL-Error

Delete from [FPAEELEGALSTAT:$FromTable]
where  EMPLID =$emplid
and    EMPL_RCD=#empl_rcd
and    FP_NOTIF_REF = $notif_ref

end-SQL

End-Procedure Update-Abrog



!-------------------------------------------
! Procedure CHECK-FPAEEFLAT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Check-FPAEEFLAT

let $sql-statement = 'FPA110.SQR,Check-FPAEEFLAT,Select Count,PS_FPAEEFLAT_TBL E'
Begin-Select On-Error=SQL-Error

count(*)  &WCNT
 Let #wcnt=&WCNT

From PS_FPAEEFLAT_TBL E
    ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

Where  E.FP_ORIG = $Orig
and    E.EMPLID = $Emplid
and    E.FP_WORD = $Word
and    E.FP_RETURN_R = $return_r

and E.EMPLID = SCRTY.EMPLID         !
and E.EMPL_RCD = SCRTY.EMPL_RCD     !SQR security
[$SecurityClause]                   !

end-select

End-Procedure Check-FPAEEFLAT



!-------------------------------------------
! Procedure INSERT-FPAEEFLAT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Insert-FPAEEFLAT

 #IFDEF DEBUGi
 display '****Variables from Procedure Insert-FPAEEFLAT ****'
 Display $Orig
 Display $Emplid
 Display $Notif_Ref
 Display $Action_Ref
 Display $CurrDt
 Display &B.FP_TBL_CD
 Display $Word
 Display $action
 Display $Z.ACTION_REASON
 Display #RefcolPS
 Display $Return_r
 Display $C1.CONTRACT_TYPE
 Display $C1.FP_CONTRACT_RSN
 Display $C1.PROBATION_DT
 Display $C1.FP_STATUSEE_CD
 Display $C1.FP_TRNE_SVT_CD
 Display $C1.FP_TENURE_DT
 Display $C1.FP_TENURE_NO_DT
 Display $C1.FP_FIRST_PRO_DT
 Display #C1.FP_FIRST_DUR
 Display $C1.FP_FIRST_TYP
 Display $C1.FP_TENPD_BRK
 Display $C1.FP_TEN_ACCESS
 Display $C2.FP_SETID_RANK
 Display $C2.FP_RANK_CD
 Display $C2.FP_STEP_CD
 Display #C2.FP_SENTOSTPDY
 Display #C2.FP_SENTOSTPMN
 Display #C2.FP_SENTOSTPYR
 Display #C2.FP_SENINSTPDY
 Display #C2.FP_SENINSTPMN
 Display #C2.FP_SENINSTPYR
 Display $C2.FP_CORPS_CD
 Display $C2.FP_CHG_COR_DT
 Display $C2.FP_CATG_FP
 Display $C2.FP_TRAINEE
 Display $C2.FP_CATG_LEVEL
 Display $C2.FP_NOMINATION_DT
 Display $C2.FP_SANCTION
 Display $C2.FP_DOWN_GRA
 Display $C2.FP_PROPD_BRK
 Display $C2.FP_PRO_ACCESS
 Display $C8.FP_SETID_RANK
 Display $C8.FP_RANK_CD
 Display $C8.FP_STEP_CD
 Display $C3.FP_LEGALSTAT_CD
 Display $C3.FP_SCNDMT_CD
 Display $C3.FP_SCND_TYP
 Display #C3.FP_CAREFRZPCT
 Display $C3.FP_RETURN_CD
 Display $C3.FP_PR_LEGSTA
 Display $C4.DEPTID
 Display $C4.LOCATION
 Display $C4.FP_INSTALL_DT
 Display $C4.COMPANY
 Display $C4.ESTABID
 Display $C4.JOBCODE


 Display 'BUSINESS_UNIT:'
 Display $C4.BUSINESS_UNIT
 Display 'SETID_DEPT'
 Display $C4.SETID_DEPT
 Display 'SETID_JOBCODE'
 Display $C4.SETID_JOBCODE
 Display 'REG_REGION'
 Display $C4.REG_REGION
 Display #C5.FP_GROSS_IND
 Display #C5.FP_INCS_IND
 Display #C5.ANNUAL_RT
 Display #C5.MONTHLY_RT
 Display #C5.COMPRATE
 Display $C7.FP_MATRIX_TYP
 Display $C7.FP_MATRIX_CD
 Display $C7.FP_SCALE_CD
 Display $C6.FULL_PART_TIME
 Display #C6.STD_HOURS
 Display $C6.FP_PT_PCT
 #ENDIF

let $sql-statement = 'FPA110.SQR,Insert-FPAEEFLAT,Insert,PS_FPAEEFLAT_TBL'
Begin-SQL On-Error=SQL-Error
        Insert  into PS_FPAEEFLAT_TBL (FP_ORIG, EMPLID, FP_NOTIF_REF, FP_ACTION_REF, EFFDT, FP_TBL_CD,
        FP_WORD, ACTION, ACTION_REASON, FP_REFCOL_PS, FP_RETURN_R, CONTRACT_TYPE, FP_CONTRACT_RSN,
        PROBATION_DT, FP_STATUSEE_CD, FP_TRNE_SVT_CD, FP_TENURE_DT, FP_TENURE_NO_DT, FP_FIRST_PRO_DT,
        FP_FIRST_DUR, FP_FIRST_TYP, FP_TENPD_BRK, FP_TEN_ACCESS, FP_SETID_RANK, FP_RANK_CD, FP_STEP_CD,
        FP_SENTOSTPDY, FP_SENTOSTPMN, FP_SENTOSTPYR, FP_SENINSTPDY, FP_SENINSTPMN, FP_SENINSTPYR, FP_CORPS_CD,
        FP_CHG_COR_DT, FP_CATG_FP, FP_TRAINEE, FP_CATG_LEVEL, FP_NOMINATION_DT, FP_SANCTION, FP_DOWN_GRA,
        FP_PROPD_BRK, FP_PRO_ACCESS, FP_SETID_RK_PREC, FP_RANK_CD_PRV, FP_STEP_CD_PRV, FP_LEGALSTAT_CD,
        FP_SCNDMT_CD, FP_SCND_TYP, FP_CAREFRZPCT, FP_RETURN_CD, FP_PR_LEGSTA, DEPTID, LOCATION, FP_INSTALL_DT,
        COMPANY, ESTABID, JOBCODE, BUSINESS_UNIT, SETID_DEPT, SETID_JOBCODE, REG_REGION, FP_GROSS_IND,
        FP_INCS_IND, ANNUAL_RT, MONTHLY_RT, COMPRATE, FP_RES_FIELD1, FP_RES_FIELD2, FP_RES_FIELD3,
        FULL_PART_TIME, STD_HOURS, FP_PT_PCT)
        values ($Orig,$Emplid,$Notif_Ref,$Action_Ref,{DATEIN-PREFIX}$CurrDt{DATEIN-SUFFIX},
        &B.FP_TBL_CD,
        $Word,$action,$Z.ACTION_REASON,#RefcolPS,$Return_r,
        $C1.CONTRACT_TYPE,$C1.FP_CONTRACT_RSN,
        {DATEIN-PREFIX}$C1.PROBATION_DT{DATEIN-SUFFIX},
        $C1.FP_STATUSEE_CD,$C1.FP_TRNE_SVT_CD,{DATEIN-PREFIX}$C1.FP_TENURE_DT{DATEIN-SUFFIX},
        {DATEIN-PREFIX}$C1.FP_TENURE_NO_DT{DATEIN-SUFFIX},
        {DATEIN-PREFIX}$C1.FP_FIRST_PRO_DT{DATEIN-SUFFIX},#C1.FP_FIRST_DUR,
        $C1.FP_FIRST_TYP,$C1.FP_TENPD_BRK,$C1.FP_TEN_ACCESS,
        $C2.FP_SETID_RANK,$C2.FP_RANK_CD,$C2.FP_STEP_CD,#C2.FP_SENTOSTPDY,#C2.FP_SENTOSTPMN,
        #C2.FP_SENTOSTPYR,#C2.FP_SENINSTPDY,#C2.FP_SENINSTPMN,#C2.FP_SENINSTPYR,
        $C2.FP_CORPS_CD,{DATEIN-PREFIX}$C2.FP_CHG_COR_DT{DATEIN-SUFFIX},$C2.FP_CATG_FP,
        $C2.FP_TRAINEE,$C2.FP_CATG_LEVEL,{DATEIN-PREFIX}$C2.FP_NOMINATION_DT{DATEIN-SUFFIX},
        $C2.FP_SANCTION,$C2.FP_DOWN_GRA,$C2.FP_PROPD_BRK,$C2.FP_PRO_ACCESS,
        $C8.FP_SETID_RANK,$C8.FP_RANK_CD,$C8.FP_STEP_CD,
        $C3.FP_LEGALSTAT_CD ,$C3.FP_SCNDMT_CD,$C3.FP_SCND_TYP,
        #C3.FP_CAREFRZPCT,$C3.FP_RETURN_CD,$C3.FP_PR_LEGSTA,
        $C4.DEPTID,$C4.LOCATION,{DATEIN-PREFIX}$C4.FP_INSTALL_DT{DATEIN-SUFFIX},$C4.COMPANY,
        $C4.ESTABID,$C4.JOBCODE,$C4.BUSINESS_UNIT,$C4.SETID_DEPT,$C4.SETID_JOBCODE,$C4.REG_REGION,
        #C5.FP_GROSS_IND,#C5.FP_INCS_IND,#C5.ANNUAL_RT,#C5.MONTHLY_RT,
        #C5.COMPRATE,
        $C7.FP_MATRIX_TYP,$C7.FP_MATRIX_CD,$C7.FP_SCALE_CD,
        $C6.FULL_PART_TIME,#C6.STD_HOURS,$C6.FP_PT_PCT)
end-SQL

End-Procedure Insert-FPAEEFLAT



!-------------------------------------------
! Procedure DELETE-FPAEEFLAT
!-------------------------------------------
! Description :
! In  :
! Out :
!-------------------------------------------
begin-procedure Delete-FPAEEFLAT

let $sql-statement = 'FPA110.SQR,Delete-FPAEEFLAT,Delete,PS_FPAEEFLAT_TBL'
Begin-SQL On-Error=SQL-Error

Delete From PS_FPAEEFLAT_TBL
Where  FP_ORIG = $Orig
and    EMPLID = $Emplid
and    FP_NOTIF_REF = $notif_ref
and    FP_WORD = $Word
and    FP_RETURN_R = $return_r

end-SQL

End-Procedure Delete-FPAEEFLAT



!-------------------------------------------
! Procedure DELETE-ALL-FLAT
!-------------------------------------------
! Description :
! Delete FLAT after editing
! In  :
! Out :
!-------------------------------------------
begin-procedure Delete-All-FLAT

let $sql-statement = 'FPA110.SQR,Delete-All-FLAT,Delete,PS_FPAEEFLAT_TBL'
Begin-SQL On-Error=SQL-Error

Delete From PS_FPAEEFLAT_TBL
Where  [$Main_Where]

end-SQL

End-Procedure Delete-All-FLAT



!-------------------------------------------
! Procedure DELETE-ALL-FLAT-JL
!-------------------------------------------
! Description : Modif JL le 22/08/98
! Delete FLAT after editing
! In  :
! Out :
!-------------------------------------------
begin-procedure Delete-All-FLAT-JL

let $sql-statement = 'FPA110.SQR,Delete-All-FLAT-JL,Delete,PS_FPAEEFLAT_TBL'
Begin-SQL On-Error=SQL-Error

Delete From PS_FPAEEFLAT_TBL

end-SQL

End-Procedure Delete-All-FLAT-JL



!-------------------------------------------
! Procedure FORMAT-$MAIN_WHERE
!-------------------------------------------
! Description :
! $Main-Where formatting to call FPAWORD.SQC
! In  :
! Out :
!-------------------------------------------
Begin-Procedure Format-$Main_Where

 Evaluate $Orig

  When = 'I'      ! Individual Orders (Single)

  When = 'A'      ! Abrogation Orders (Single)
   let $Main_Where = ' EMPLID = ''' || $emplid || ''''
   let $Main_Where = $Main_Where || ' and FP_NOTIF_REF = ''' || $notif_ref || ''''
   let $Main_Where = $Main_Where || ' and FP_ORIG = ''' || $Orig || ''''
   Break

  When = 'J'      ! Individual Orders (Mass)
   let $Main_Where = ' FP_STATUSEE_CD = ''' || $statusee || ''''
   let $Main_Where = $Main_Where || ' and ACTION = ''' || $action || ''''
   let $Main_Where = $Main_Where || ' and FP_ORIG = ''' || $Orig || ''''
   Break

  When = 'C'      ! Collective (Mass)
   Break

 end-Evaluate

End-Procedure Format-$Main_Where



!***************************************************************
!* Build a variable 'Where' according to the Row Origin
!***************************************************************
Begin-Procedure Where-Clause


    let $C2_where = 'and C2.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEECAREER WW
                          where WW.EMPLID =C2.EMPLID
                          and   WW.EMPL_RCD=C2.EMPL_RCD
                          and   WW.EFFDT=C2.EFFDT)'

    let $C4_where = 'and C4.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEEPOST_TBL WW
                          where WW.EMPLID =C4.EMPLID
                          and   WW.EMPL_RCD=C4.EMPL_RCD
                          and   WW.EFFDT=C4.EFFDT)'

    let $C5_where = 'and C5.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEESALARY WW
                          where WW.EMPLID =C5.EMPLID
                          and   WW.EMPL_RCD=C5.EMPL_RCD
                          and   WW.EFFDT=C5.EFFDT)'

    let $C6_where = 'and C6.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEEWORKRT WW
                          where WW.EMPLID =C6.EMPLID
                          and   WW.EMPL_RCD=C6.EMPL_RCD
                          and   WW.EFFDT=C6.EFFDT)'

 let $effseq = to_char(#effseq)

 Evaluate $FromTable

    When =  'PS_FPAEECAREER'
        let $C2_where = 'and C2.EFFSEQ = ' || $effseq
        break
    When = 'PS_FPAEEPOST_TBL'
        let $C4_where = 'and C4.EFFSEQ = ' || $effseq
        break
    When = 'PS_FPAEESALARY'
        let $C5_where = 'and C5.EFFSEQ = ' || $effseq
        break
    When = 'PS_FPAEEWORKRT'
        let $C6_where = 'and C6.EFFSEQ = ' || $effseq

 end-Evaluate


display $C2_where

End-Procedure Where-Clause



!-------------------------------------------
! Procedure WRITE-DONE
!-------------------------------------------
! Description :
! Create a temporary output file so that a Windows-based word processing
! package such as Word for Windows can detect that the SQR report has
! completed processing.
! In  :
! Out :
!-------------------------------------------
begin-procedure Write-Done

 open '{IMPORTPREFIX}DONEFLG.TMP{IMPORTSUFFIX}' as 1 for-writing record=4
 move 'DONE' TO $ioarea
 write 1 from $ioarea
 close 1

end-procedure Write-Done


!-------------------------------------------
! Procedure LIST-FIELDS
!-------------------------------------------
! Description :
! select fields from $recname
! In  :
! Out :
!-------------------------------------------
begin-procedure list-fields($recname,:$field_list)

 Let $field_list = ''

 let $recname = rtrim(ltrim($recname,'PS_'),' ')

begin-select

RF.FIELDNAME            &RF2.FIELDNAME
DF.FIELDTYPE            &DF.FIELDTYPE

  if &DF.FIELDTYPE <> 1
    let $gnr-fieldname =  rtrim(&RF2.FIELDNAME,' ')

    let $field_list = $field_list || $_gnr-field-line-prefix || $gnr-fieldname

    let $_gnr-field-line-prefix = ','

  end-if

FROM PSRECFIELD RF,
PSDBFIELD       DF

WHERE DF.FIELDNAME  = RF.FIELDNAME
AND   RF.RECNAME    = $recname
AND   RF.SUBRECORD  = 'N'

ORDER BY 1

end-select

end-procedure



#include 'stdapi.sqc'    !Routine to update run status
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'fprnctl1.sqc'  !Get run control parameter values (FPS)
#include 'hrgetval.sqc'  !Get values mask routines
#include 'fpgetval.sqc'  !Get values mask routines (FPS)
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'fpparam.sqc'   !Routines for  Parameters Tables (FPS)
#Include 'fpa110.sqc'    !Get data from FP Tables (FPS)
#Include 'fpabrog.sqc'   !Abrogation specific management (FPS)
#Include 'fpaword.sqc'   !Generation WORD Documents (FPS)
#Include 'fpsalary.sqc'  !Routines for Salary (FPS)
#Include 'fpjob.sqc'     !Insert-Fpaeeupdrow procedure (FPS)
#Include 'hrsecty.sqc'   !Get SQR Security parameters
