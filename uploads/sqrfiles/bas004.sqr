!****************************************
! BAS004: Benefits Enrollment Form
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/07:06:26:15                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
!*** FG00001 *** Changes for merge with Federal:                       *
!*** Suppress printing of Flexible Credits information.                *
!*** Replace 401K plan data with Thrift Savings Plan (TSP) data.       *
!*** Use EVENT_CLASS_USE field instead of EVENT_CLASS to identify      *
!***   Open Enrollment events.                                         *
!*** Change coverage code headings and column for codes 4 and 5.       *
!*** Increase the size of the Savings Plan description.                *
!***********************************************************************

! Function: Generate the Benefit Enrollment Form
! Input:   PS_BAS_PARTIC          -  Participant Level Record
!          PS_BAS_PARTIC_PLAN     -  Plan Type Level Record
!          PS_BAS_PARTIC_OPTN     -  Option Level Record
!          PS_BAS_PARTIC_COST     -  Cost Level Record
!          Enrollment Tables      -  Get Participant & Dependent/Benef
!                                    Current Elections
!          PS_PERSON_NAME         -  Get Participants Name & Address
!
! Output: 1 Enrollment Form Per Validated Participant Where the Form
!         has not all ready been printed.
!
!***********************************************************************

#include 'setenv.sqc'

Begin-Setup
  #Include 'setupdb.sqc'

  #define PRINTER_TYPE HPLASERJET

  Declare-Printer HP-definition
      Type=HPLASERJET
      Font=5
      Point-Size=12
      Pitch=17
      Symbol-Set=0U     ! ASCII symbol set
  End-Declare

  Declare-Layout default
      Orientation=Portrait
      Top-Margin= .4
      Left-Margin=.60
      Max-Lines=63
      Max-Columns=130
      Char-Width=7.2
      Line-Height=12     ! 72/printer_point-size
  End-Declare

End-Setup


!******************************
Begin-Procedure Init-Variables
!******************************

#define OE_Return_Dt  '11/15/'  !Printed in Heading for Open Enrollment
#define EM_Return_Dt  '2 weeks' !Printed in Heading for Event Maintenance

#define HEADING_LINES 3         !Number of heading lines

#define SMALL         '8'       !Small point size
#define NORM          '10'      !Normal point size
#define BIG           '14'      !Large point size
#define NORM_LNSIZE   '10'      !Normal Line Size
#define NORM_LNLENGTH 80        !Normal Line Length
#define BIG_LNSIZE    '20'      !Large Line Size
#define WIDTH         24        !Width of dep name box
#define DEPCOL        5         !Dependent name column
#define BOX_LEN       12        !Width of plan boxes
#define SHADE         25        !25 percent darkness
#define SMAL_LNSIZE   5         !Box and horz line size
#define CRED_LNLENGTH 35        !Line Length for Credits Heading
#define OPTN_LNLENGTH 50        !Line Length for Option Heading

#define COVRG_MASK    $9,999,999  !Used with Life Insurance Coverages
#define PER_PAY_MASK  $99,999.99
#define CREDIT_MASK   '$9,999.99'

#define SAV_LNLENGTH  36        !Line Length for Svg Invt Option Heading
#define INVCOL        5         !Benefit plan column
#define OPTCOL        5         !Investment option name column
#define O_WIDTH       24        !Width of invest opt box
#define O_BOX_LEN     12        !Width of percent box

let #Heading_Count = 0          !Count number of regular headings
let #Page_Maximum  = 57         !Maximum physical rows before bottom line
let #Page_Max_Last = 40         !Maximum physical rows before last page footer
let #Start_Row     = 1          !1st row to Print Header
let #Start_Footer  = 41         !Row to start footer (does not include header)


let #ccol1  = 25                !Employee Only
let #ccol2  = 34                !Employee + Spouse
let #ccol3  = 42                !Employee + Children
let #ccol4  = 50                !Employee + Family
let #ccol5  = 59                !Employee Elections
let #ccol6  = 72                !EmplId at bottom of page
let #ccol7  = 36                !EmplId Name
let #ccol8  = 3                 !Cash Box

let #ccol8B = 20                !FSA-Health Care Box
let #ccol8C = 37                !FSA-Dep Care Box
let #ccol8D = 55                !Savings Box

let #ccol9  = 10                !FSA Box
let #ccol1a = 31                !Employee Only Option Code
let #ccol2a = 39                !Employee + Spouse Option Code
let #ccol3a = 47                !Employee + Children Option Code
let #ccol4a = 55                !Employee + Family Option Code

let #Bottom_Line = 56           !Line for bottom line of each page

let #orow_depth = 2                 !depth of inv opt lines
let #orow0      = 4                 !first row to print inv opt box
let #orow1      = #orow0+2          !row to start first horz line
                                    !and print inv opt title
let #ocol1      = {WIDTH}+{OPTCOL}  !column to start percent box

let #optnrow1   = 9                 !row to start printing benefit plan
let #optnrow2   = 10                !row to start printing benefit plan
let #optncol4   = 6                 !print inv opt (across) heading
let #optncol5   = 31                !print percent (across) heading

let #stboxrow   = 8                 !start next dep/benef box rows down
let #bencol1    = 10                !print beneficiaries heading

let #drow_depth = 2                 !depth of dep lines
let #drow0      = 9                 !first row to print dep name box
let #drow1      = #drow0+3          !row to start first horz line

let #dcol1      = {WIDTH}+{DEPCOL}  !column to start medical box
let #dpcol      = 12                !column to start dental box
let #depcol1    = 33                !print dep data in medical box
let #depcol4    = 11                !print dependent heading
let #depcol5    = 30                !print plan type headings
let #depcol6    = 42                !print plan type headings
let #depcol7    = 54                !print plan type headings
let #depcol8    = 59                !print plan type headings
let #depcol9    = 71


#ifndef MVS
#ifndef OS400
  encode '<27>E<27>&l0O<27>&l1E' into $reset_cd
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif

End-Procedure

!******************************
Begin-Program
!******************************

  do Init-Report

  display 'Report Began at: ' NoLine
  do Display-Time

  do Main-Report

  display 'Report Ended at: ' noline
  do display-time

  let $Form_Cnt = EDIT(#Form_Cnt, '99999')
  let $Form_Cnt = LTRIM($Form_Cnt, ' ')
!*** 'Enrollment Forms Printed: '
  display $BAS004-FORM-COUNT NoLine
  display $Form_Cnt
  display ''

  do StdAPI-Term

End-Program

!******************************
Begin-Procedure Init-Report
!******************************

  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime

  do Init_Printer

  do Init-Variables
  do StdAPI-Init

  let $ReportID = 'BAS004'
  do Get-Report-Language
  display ''
  display $ReportID noline
  display ': '      noline
  display $BAS004-REPORTTITLE

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  Alter-Printer Font=5 Point-Size={NORM}   !Normal point size.

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS004 program IDS
do Init_Report_Translation($ReportID, $curr_language_cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS004', 'REPORT_TITLE', $BAS004-REPORTTITLE, #CW)
do Get_Field_Information ('BAS004', 'FORM_COUNT',   $BAS004-FORM-COUNT,  #CW)
do Get_Field_Information ('BAS004', 'FORM_FOR_EE',  $BAS004-FORM-FOR-EE, #CW)
do Get_Field_Information ('BAS004', 'BEN_PGM',      $BAS004-BEN-PGM,     #CW)
do Get_Field_Information ('BAS004', 'DT_OF_BIRTH',  $BAS004-DT-OF-BIRTH, #CW)
do Get_Field_Information ('BAS004', 'SERV_DT',      $BAS004-SERV-DT,     #CW)
do Get_Field_Information ('BAS004', 'EVNT_CLASS',   $BAS004-EVNT-CLASS,  #CW)
do Get_Field_Information ('BAS004', 'FLEX_CREDS',   $BAS004-FLEX-CREDS,  #CW)
do Get_Field_Information ('BAS004', 'FSA_HEALTH_CARE',$BAS004-FSA-HEALTH-CARE,#CW)
do Get_Field_Information ('BAS004', 'CASH',         $BAS004-CASH,        #CW)
do Get_Field_Information ('BAS004', 'FSA_DEP_CARE', $BAS004-FSA-DEP-CARE,#CW)
do Get_Field_Information ('BAS004', 'SAVINGS',      $BAS004-SAVINGS,     #CW)
do Get_Field_Information ('BAS004', 'CRDS_OPT_CD',  $BAS004-CRDS-OPT-CD, #CW)
do Get_Field_Information ('BAS004', 'YOUR_OPT',     $BAS004-YOUR-OPT,    #CW)
do Get_Field_Information ('BAS004', 'NO_DESCR',     $BAS004-NO-DESCR,    #CW)
do Get_Field_Information ('BAS004', 'ONLY',         $BAS004-ONLY,        #CW)
do Get_Field_Information ('BAS004', 'PL_SPOUSE',    $BAS004-PL-SPOUSE,   #CW)
do Get_Field_Information ('BAS004', 'PL_CHILD',     $BAS004-PL-CHILD,    #CW)
do Get_Field_Information ('BAS004', 'PL_FAMILY',    $BAS004-PL-FAMILY,   #CW)
do Get_Field_Information ('BAS004', 'FED_SELF',     $BAS004-FED-SELF,    #CW) !FG00001
do Get_Field_Information ('BAS004', 'FED_HIGH',     $BAS004-FED-HIGH,    #CW) !FG00001
do Get_Field_Information ('BAS004', 'FED_LOW',      $BAS004-FED-LOW,     #CW) !FG00001
do Get_Field_Information ('BAS004', 'OPTN_SEL',     $BAS004-OPTN-SEL,    #CW)
do Get_Field_Information ('BAS004', 'CST_PER_PAY',  $BAS004-CST-PER-PAY ,#CW)
do Get_Field_Information ('BAS004', 'PRC_OPT_CD',   $BAS004-PRC-OPT-CD,  #CW)
do Get_Field_Information ('BAS004', 'NBR_HOURS',    $BAS004-NBR-HOURS,   #CW)
do Get_Field_Information ('BAS004', 'MAX_ANN_CON',  $BAS004-MAX-ANN-CON, #CW)
do Get_Field_Information ('BAS004', 'MIN_ANN_CON',  $BAS004-MIN-ANN-CON, #CW)
do Get_Field_Information ('BAS004', 'ANN_PLG',      $BAS004-ANN-PLG,     #CW)
do Get_Field_Information ('BAS004', 'ANN_CST',      $BAS004-ANN-COST,    #CW)
do Get_Field_Information ('BAS004', 'PAY_PER_CST',  $BAS004-PAY-PER-CST, #CW)
do Get_Field_Information ('BAS004', 'INVTS',        $BAS004-INVTS,       #CW)
do Get_Field_Information ('BAS004', 'INV_OPT',      $BAS004-INV-OPT,     #CW)
do Get_Field_Information ('BAS004', 'PERCENT',      $BAS004-PERCENT,     #CW)
do Get_Field_Information ('BAS004', 'DEP_BENEFS',   $BAS004-DEP-BENEFS,   #CW)
do Get_Field_Information ('BAS004', 'HLTH_TITLE',   $BAS004-HLTH-TITLE,   #CW)
do Get_Field_Information ('BAS004', 'LIFE_TITLE',   $BAS004-LIFE-TITLE,   #CW)
do Get_Field_Information ('BAS004', 'SVGS_TITLE',   $BAS004-SVGS-TITLE,   #CW)
do Get_Field_Information ('BAS004', 'PENS_TITLE',   $BAS004-PENS-TITLE,   #CW)
do Get_Field_Information ('BAS004', 'BENEFICIARIES',$BAS004-BENEFICIARIES,#CW)
do Get_Field_Information ('BAS004', 'DEPENDENTS',   $BAS004-DEPENDENTS,   #CW)
do Get_Field_Information ('BAS004', 'BEN_PER',      $BAS004-BEN-PER,      #CW)
do Get_Field_Information ('BAS004', 'EXCESS',       $BAS004-EXCESS,       #CW)
do Get_Field_Information ('BAS004', 'CONTINGENT',   $BAS004-CONTINGENT,   #CW)
do Get_Field_Information ('BAS004', 'NEW_DEP_BEN',  $BAS004-NEW-DEP-BEN,  #CW)
do Get_Field_Information ('BAS004', 'DEP_BEN_NM',   $BAS004-DEP-BEN-NM,   #CW)
do Get_Field_Information ('BAS004', 'NATIONAL_ID',  $BAS004-NATIONAL-ID,  #CW)

do Get_Field_Information ('BAS004', 'T00_L01A',     $BAS004-T00-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01B',     $BAS004-T00-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01C',     $BAS004-T00-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01D',     $BAS004-T00-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01A',     $BAS004-T01-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01B',     $BAS004-T01-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01C',     $BAS004-T01-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01D',     $BAS004-T01-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T01_L02A',     $BAS004-T01-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L03A',     $BAS004-T01-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L03B',     $BAS004-T01-L03B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L04A',     $BAS004-T01-L04A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L04B',     $BAS004-T01-L04B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05A',     $BAS004-T01-L05A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05B',     $BAS004-T01-L05B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05C',     $BAS004-T01-L05C,    #CW)
do Get_Field_Information ('BAS004', 'T01_L06A',     $BAS004-T01-L06A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L06B',     $BAS004-T01-L06B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L07A',     $BAS004-T01-L07A,    #CW)
do Get_Field_Information ('BAS004', 'T02_L01A',     $BAS004-T02-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L01A',     $BAS004-T03-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L02A',     $BAS004-T03-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L03A',     $BAS004-T03-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01A',     $BAS004-T04-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01B',     $BAS004-T04-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01C',     $BAS004-T04-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01D',     $BAS004-T04-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T05_L01A',     $BAS004-T05-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T05_L01B',     $BAS004-T05-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T05_L02A',     $BAS004-T05-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01A',     $BAS004-T06-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01B',     $BAS004-T06-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01C',     $BAS004-T06-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T07_L01A',     $BAS004-T07-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T08_L01A',     $BAS004-T08-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T09_L01A',     $BAS004-T09-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T09_L01B',     $BAS004-T09-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T10_L01A',     $BAS004-T10-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T10_L01B',     $BAS004-T10-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T11_L01A',     $BAS004-T11-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01A',     $BAS004-T12-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01B',     $BAS004-T12-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01C',     $BAS004-T12-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01A',     $BAS004-T13-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01B',     $BAS004-T13-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01C',     $BAS004-T13-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T14_L01A',     $BAS004-T14-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T14_L01B',     $BAS004-T14-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T15_L01A',     $BAS004-T15-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T17_L01A',     $BAS004-T17-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T18_L01A',     $BAS004-T18-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T19_L01A',     $BAS004-T19-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T20_L01A',     $BAS004-T20-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T21_L01A',     $BAS004-T21-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01A',     $BAS004-T22-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01B',     $BAS004-T22-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01C',     $BAS004-T22-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T22_L02A',     $BAS004-T22-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03A',     $BAS004-T22-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03B',     $BAS004-T22-L03B,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03C',     $BAS004-T22-L03C,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03D',     $BAS004-T22-L03D,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03E',     $BAS004-T22-L03E,    #CW)
do Get_Field_Information ('BAS004', 'T23_L01A',     $BAS004-T23-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T23_L02A',     $BAS004-T23-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T23_L03A',     $BAS004-T23-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T23_L02BFED',  $BAS004-T23-L02BFED, #CW) !FG00001
do Get_Field_Information ('BAS004', 'T23_L02C',     $BAS004-T23-L02C,    #CW)

do Get_Field_Information ('BAS004', 'T24_L01A',     $BAS004-T24-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L02A',     $BAS004-T24-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L03A',     $BAS004-T24-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L04A',     $BAS004-T24-L04A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L05A',     $BAS004-T24-L05A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L06A',     $BAS004-T24-L06A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L07A',     $BAS004-T24-L07A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L08A',     $BAS004-T24-L08A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L09A',     $BAS004-T24-L09A,    #CW)
do Get_Field_Information ('BAS004', 'T24_L10A',     $BAS004-T24-L10A,    #CW)

do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
do Get_Field_Information ('BEN1',   'FAMILY',       $BEN1-FAMILY,        #CW) !FG00001
do Get_Field_Information ('BEN1',   'EMPLOYEE_ID2', $BEN1-EMPLOYEE-ID2,  #CW)
do Get_Field_Information ('BEN1',   'EFFDT2',       $BEN1-EFFDT2,        #CW)
do Get_Field_Information ('BEN1',   'DATE_OF_BIRTH2',$BEN1-DATE-OF-BIRTH2,#CW)
do Get_Field_Information ('BEN1',   'DATE_OF_BIRTH',$BEN1-DATE-OF-BIRTH ,#CW)
do Get_Field_Information ('BEN1',   'SER_DATE2',    $BEN1-SER-DATE2,     #CW)
do Get_Field_Information ('BEN1',   'EVENT_ID2',    $BEN1-EVENT-ID2,     #CW)
do Get_Field_Information ('BEN1',   'PAGE',         $BEN1-PAGE,          #CW)
do Get_Field_Information ('BEN1',   'WAIVE',        $BEN1-WAIVE,         #CW)
do Get_Field_Information ('BEN1',   'ANNUAL',       $BEN1-ANNUAL,        #CW)
do Get_Field_Information ('BEN1',   'PAY_PERIOD',   $BEN1-PAY-PERIOD,    #CW)
do Get_Field_Information ('BEN1',   'OPT_CD2',      $BEN1-OPT-CD2,       #CW)
do Get_Field_Information ('BEN1',   'TOTAL',        $BEN1-TOTAL,         #CW)
do Get_Field_Information ('BEN1',   'SIGNATURE2',   $BEN1-SIGNATURE2,    #CW)
do Get_Field_Information ('BEN1',   'DATE2',        $BEN1-DATE2,         #CW)
do Get_Field_Information ('BEN1',   'COVER_AMT',    $BEN1-COVER-AMT,     #CW)
do Get_Field_Information ('BEN1',   'COST2',        $BEN1-COST2,         #CW)
do Get_Field_Information ('BEN1',   'CREDIT2',      $BEN1-CREDIT2,       #CW)
do Get_Field_Information ('BEN1',   'MEDICAL',      $BEN1-MEDICAL,       #CW)
do Get_Field_Information ('BEN1',   'DENTAL',       $BEN1-DENTAL,        #CW)
do Get_Field_Information ('BEN1',   'YES',          $BEN1-YES,           #CW)
do Get_Field_Information ('BEN1',   'NO',           $BEN1-NO,            #CW)
do Get_Field_Information ('BEN1',   'SEX',          $BEN1-SEX,           #CW)
do Get_Field_Information ('BEN1',   'FLAT_AMT',     $BEN1-FLAT-AMT,      #CW)
do Get_Field_Information ('BEN1',   'CONT_NEXT_PAGE',$BEN1-CONT-NEXT-PAGE,#CW)
do Get_Field_Information ('BEN1',   'CONT_PREV_PAGE',$BEN1-CONT-PREV-PAGE,#CW)
do Get_Field_Information ('BEN1',   'RELATIONSHIP',  $BEN1-RELATIONSHIP,  #CW)

End-Procedure

!******************************
Begin-Procedure Ask-Values
!******************************

  do Ask-Schedule-Id
  do Ask-EmplID
  do Ask-Reprint-Prompt
  do Ask-Cost-Freq

End-Procedure

!******************************
Begin-Procedure Get-Values
!******************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-EmplID
  do Get-Reprint-Prompt
  do Get-Cost-Freq

End-Procedure

!*********************************
Begin-Procedure Ask-Reprint-Prompt
!*********************************

  let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  if ($Reprint = 'Y')
    do Ask-Reprint-Id
  end-if


End-Procedure

!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  let $Reprint_Match = 'N'
  input $Reprint_Id 'Enter Reprint Id'
  let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And ($Reprint_Id <> '')
    do Validate-Reprint-Id
    if ($Reprint_Match = 'N')
      input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    end-if
  End-While

End-Procedure

!**********************************
Begin-Procedure Validate-Reprint-Id
!**********************************

  let $Reprint_Match = 'N'

Begin-SELECT
PRINT_ID
  let $Reprint_Match = 'Y'
FROM  PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id
AND   SCHED_ID = $Sched_Id
End-SELECT

End-Procedure

!******************************
Begin-Procedure Ask-Cost-Freq
!******************************

  let $Cost_Freq = ''

  While ($Cost_Freq <> 'A') And ($Cost_Freq <> 'D')
    input $Cost_Freq 'Enter Cost Frequency as (A)nnual or (D)eduction Period [A/D]'
    let $Cost_Freq = UPPER(RTRIM($Cost_Freq, ' '))
  End-While

End-Procedure

!******************************
Begin-Procedure Main-Report
!******************************

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Forms
      do Delete-Reprint-Id
    end-if
  else
    do Print-Forms
  end-if

End-Procedure

!******************************
Begin-Procedure Reprint-Forms
!******************************

Begin-SELECT
PRN.PRINT_ID
PRNP.EMPLID
PRNP.BENEFIT_RCD_NBR
PRNP.EVENT_ID

  let $Where = '(A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''RE'',''ET'',''EE'')) And '
  let $Where = $Where || '(A.EMPLID = '''  || &PRNP.EmplId || ''') And '
  let $TempVal = edit(&PRNP.BENEFIT_RCD_NBR, '9')
  let $Where = $Where || '(A.EMPL_RCD = ' || $TempVal     || ') And '
  let $TempVal = LTRIM(edit(&PRNP.Event_Id, '999999'),' ')
  let $Where = $Where || '(A.EVENT_ID = '  || $TempVal     || ') '

  do Select-Data

FROM  PS_BAS_PRNT        PRN,
      PS_BAS_PRNT_PARTIC PRNP
WHERE PRN.PRINT_ID = $Reprint_Id
AND   PRN.PRINT_ID = PRNP.PRINT_ID
AND   PRN.SCHED_ID = $Sched_Id
ORDER BY PRNP.EMPLID ASC,
         PRNP.BENEFIT_RCD_NBR ASC,
         PRNP.EVENT_ID ASC
End-SELECT
End-Procedure


!******************************
Begin-Procedure Print-Forms
!******************************

!Where clause if not reprinting...
    let $where = '(A.EVENT_STATUS = ''O'') And '
    if $EmplID = ''
      let $where = $where || '((A.BAS_PROCESS_STATUS=''PR'' And '
      let $where = $where || 'A.STATUS_DT > A.OPTION_NOTIFY_DT) Or '
      let $where = $where || '(A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''ET'',''EE'') And '
      let $where = $where || 'A.OPTION_NOTIFY_DT IS NULL))'
    else
      let $where = $where || 'A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''ET'',''EE'') And '
      let $where = $where || 'A.EMPLID = ''' || $EmplID || ''''
    end-if

    do Select-Data

End-Procedure

!******************************
Begin-Procedure Select-Data
!******************************

Begin-SELECT
B.LANG_CD
  if $prcs_language_option = 'R'
    if rtrim(&B.LANG_CD,' ') <> ''
      if &B.LANG_CD <> $Curr_Language_Cd
        let $Curr_Language_Cd = &B.LANG_CD
        do Report-Translation
      end-if
    else
      if $Curr_Language_Cd <> $Language_Cd
        let $Curr_Language_Cd = $Language_Cd
        do Report-Translation
      end-if
    end-if
  end-if

A.SCHED_ID
A.EMPLID
A.EMPL_RCD
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.BENEFIT_PROGRAM
A.EVENT_CLASS
  let $EventClass = &A.Event_Class
  do Get-Evt-Class-Name   !Returns $EventClassName

A.EVENT_DT
  let $AsOfDate = &A.Event_Dt
  let $EffDate  = &A.Event_Dt
B.NAME
B.BIRTHDATE
C.EFFDT
C.DESCR
  let $BenefitProgramName = &C.Descr
  let $BenProgram = &A.Benefit_Program
  do Get-Benefit-Program-Name-Lang  !Returns $BenefitProgramName

C.DFLT_CREDIT_RLLOVR
A.SERVICE_DT
JOB.COMPANY
JOB.PAYGROUP
A.JOB_EFFDT

  do Is-Federal-Employee(&A.EMPLID, &A.EMPL_RCD, &JOB.COMPANY, &JOB.PAYGROUP, &A.JOB_EFFDT, ' ', $FedFlag)

A.BAS_ENR_FORMS_DAYS

  if  (&A.BAS_ENR_FORMS_DAYS > 0)

    do Enroll-Forms-Days

  else

      let $PrintForms = 'Y'

  end-if

  if ($PrintForms = 'Y')

     do Has-Eligible-Opts

     if (&EligOptsCnt > 0)  !Bypass EEs that don't have any eligible options

       do Get-Empl-Address (&A.EMPLID,$AddrType, $AddressFound)
       let $bb_city_st_postal = RTRIM($GETADDR_City, ' ') || ',  ' || RTRIM($GETADDR_State,' ') || ' ' || $GETADDR_Postal

       let #Page_Number = 0
       add 1 to #Form_Cnt

       do Find-Event-Class-Use
       do Print-First-Pg-Header

       if ($FedFlag <> 'Y')
         do Select-Credits-Data
       end-if

       do Select-Plan
       do Footer

       if ($IsEligForSvgsFlag = 'Y')
         do Print-Sav-Instructions
        do Print-Investment-Boxes
         do Select-Inv-Optns
       end-if

       do Process-Dep-Benef
       do Print-Signature-Line
       do Reset-Printer
       do Upd-Status-Date

     end-if

  end-if

FROM  PS_BAS_PARTIC      A,
      PS_PERSONAL_DT_FST B,
      PS_BEN_DEFN_PGM    C,
      PS_JOB             JOB
WHERE A.SCHED_ID LIKE $Sched_Id
AND   A.PROCESS_IND = 'N'
AND   [$where]
AND   A.EVENT_CLASS <> 'TER'
AND   A.BAS_SUPPRESS_FORMS IN ('E','B',' ')
AND   B.EMPLID          = A.EMPLID
AND   C.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
AND   C.EFFDT = (SELECT MAX(EFFDT)
                 FROM   PS_BEN_DEFN_PGM
                 WHERE  BENEFIT_PROGRAM = C.BENEFIT_PROGRAM
                 AND    EFFDT          <= A.EVENT_DT)
AND   JOB.EMPLID        = A.EMPLID
AND   JOB.EMPL_RCD      = A.EMPL_RCD
AND   JOB.EFFDT         = A.JOB_EFFDT
AND   JOB.EFFSEQ        = A.JOB_EFFSEQ

ORDER BY A.EMPLID ASC, A.BENEFIT_RCD_NBR ASC, A.EVENT_ID ASC
End-SELECT

End-Procedure

!********************************
Begin-Procedure Enroll-Forms-Days
!********************************

  Do Convert-To-DTU-Date(&A.EVENT_DT, $Event_dtu)
  Do dtu-subtract-days($Event_dtu, &A.BAS_ENR_FORMS_DAYS, $ResultDate_dtu)
  Do Convert-From-DTU-Date($ResultDate_dtu, $FormsPrintDate)

  If $AsOfToday < $FormsPrintDate
     let $PrintForms = 'N'
  else
     let $PrintForms = 'Y'
  end-if

End-Procedure

!********************************
Begin-Procedure Has-Eligible-Opts
!********************************

Begin-SELECT

COUNT(*)  &EligOptsCnt

FROM  PS_BAS_PARTIC_PLAN PL
WHERE PL.SCHED_ID      = &A.Sched_Id
AND   PL.EMPLID        = &A.EmplId
AND   PL.BENEFIT_RCD_NBR  = &A.BENEFIT_RCD_NBR
AND   PL.EVENT_ID      = &A.Event_Id
AND   PL.ELECT_ALLOWED = 'Y'
End-SELECT

End-Procedure

!***********************************
Begin-Procedure Find-Event-Class-Use
!***********************************

begin-select
EC.EVENT_CLASS_USE
 EXIT-SELECT
FROM PS_BAS_EVT_CLASS EC
WHERE EC.EVENT_CLASS = &A.Event_Class
AND   EC.EFF_STATUS  = 'A'
end-select

End-Procedure

!******************************
Begin-Heading {HEADING_LINES}
!******************************

do Format-Datetime(&A.Event_Dt, $Out, {DEFCMP}, '', '')
let $Tmp_YYYY = SUBSTR($Out,1,4)

if RTRIM(&EC.Event_Class_Use,' ') = 'O'
  !***  ' - OPEN ENROLLMENT'
  let $Admin_Type = $BAS004-T00-L01B  || &A.Event_Class
else
  !***  ' - EVENT MAINTENANCE '
  let $Admin_Type = $BAS004-T00-L01C  || &A.Event_Class
end-if

!*** ' PERSONAL ENROLLMENT FORM'
let $Tmp_Text = $Tmp_YYYY || $BAS004-T00-L01A  || $Admin_Type
if (#Page_Number > 1)
  !***  ' Continued'
  let $Tmp_Text = $Tmp_Text || $BAS004-T00-L01D
end-if

add 1 to #Heading_Count

Alter-Printer Font=5 Point-Size={NORM}
let $Tmp_Text2 = UPPER($BenefitProgramName)
print $Tmp_Text2                             (#Start_Row,1) Bold
print $Tmp_Text                              (+1,1) Bold
Graphic (+0,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}

End-Heading

!************************************
Begin-Procedure Print-First-Pg-Header
!************************************

do Format-Datetime(&A.Event_Dt, $Out, {DEFCMP}, '', '')
let $Tmp_YYYY = SUBSTR($Out,1,4)

print &B.Name                            (+1,1)
!***  'Benefit Pgm:'
print $BAS004-BEN-PGM                    (,#ccol4)
print &A.Benefit_Program                 (,#ccol5)

print $GETADDR_Address1                  (+1,1)
!*** 'Employee  ID:'
print $BEN1-EMPLOYEE-ID2                 (,#ccol1)
print &A.EmplId                          (,#ccol7)
!***  'Effective Date:'
print $BEN1-EFFDT2                    (,#ccol4)
do Format-Datetime(&A.Event_Dt, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol5)

if rtrim($GETADDR_Address2,' ') <> ''
   print $GETADDR_Address2               (+1,1)
else
   print $bb_city_st_postal              (+1,1)
end-if
!*** 'Date of Birth:'
print $BEN1-DATE-OF-BIRTH2             (,#ccol1)
do Format-Datetime(&B.Birthdate, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol7)
!*** 'Service Date:'
print $BEN1-SER-DATE2                   (,#ccol4)
do Format-Datetime(&A.Service_Dt, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol5)

if rtrim($GETADDR_Address2,' ') <> ''
   print $bb_city_st_postal              (+1,1)
else
   print ''                              (+1,1)
end-if
!*** 'Event ID:'
print $BEN1-EVENT-ID2                        (,#ccol1)
print &A.Event_Id                        (,36)
!*** 'Event Class:'
print $BAS004-EVNT-CLASS                     (,#ccol4)
print &A.Event_Class                     (,#ccol5)

Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}

!---------------------------------------
!Beg of Text
!---------------------------------------

!*** 'This statement lists your benefit options and their associated ' <Frequency>
!*** 'costs.  Use this worksheet to select your coverages for' <Plan-Year>
!*** 'Please note that these choices will remain in effect throughout ' <Plan-Year>
!*** 'unless you 'experience a change in family status.'
!*** 'Check the box next to the desired option and put the option '
!*** 'code in the space provided on the right.'

if ($Cost_Freq = 'A')
  let $Freq_Text = $BAS004-T01-L01B
else
  let $Freq_Text = $BAS004-T01-L01C
end-if
let $Tmp_Text = $BAS004-T01-L01A || $Freq_Text
let $Tmp_Text = $Tmp_Text || $BAS004-T01-L01D

let $Tmp_Text = $Tmp_Text || $BAS004-T01-L02A || $Tmp_YYYY || '.  '

let $Tmp_Text = $Tmp_Text || $BAS004-T01-L03A || ' ' || $Tmp_YYYY
let $Tmp_Text = $Tmp_Text || $BAS004-T01-L03B

let $Tmp_Text = $Tmp_Text || $BAS004-T01-L04A
let $Tmp_Text = $Tmp_Text || $BAS004-T01-L04B

print $Tmp_Text   (+1,1,120) WRAP 120 4

!*** 'Return your completed enrollment form to the Human Resources Department '
!*** 'by ' || {OE_Return_Dt} || <Plan-Year>
!*** 'within ' || {EM_Return_Dt} || '. '

let $Tmp_Text = $BAS004-T01-L05A
if RTRIM(&A.Event_Class,' ') = 'OE'
  let $Tmp_Text = $Tmp_Text || $BAS004-T01-L05B
  let $Tmp_Text = $Tmp_Text || {OE_Return_Dt} || $Tmp_YYYY || '. '
else
  let $Tmp_Text = $Tmp_Text || $BAS004-T01-L05C
  let $Tmp_Text = $Tmp_Text || {EM_Return_Dt} || '.'
end-if

print $Tmp_Text   (+1,1,120) BOLD WRAP 120 2

!*** 'Please keep a copy of this form for your records.  Default '
!*** 'option codes are in bold print.  Proof is required for options that'
!*** 'are followed by an asterisk (*).'

let $Tmp_Text = $BAS004-T01-L06A
let $Tmp_Text = $Tmp_Text || $BAS004-T01-L06B
let $Tmp_Text = $Tmp_Text || $BAS004-T01-L07A

print $Tmp_Text   (+1,1,120) WRAP 120 2

Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}

!---------------------------------------
!Beg of Flex Credits
!---------------------------------------

if ($FedFlag = 'Y')
  print ' '                              (+1,1)
else
  !***  'FLEXIBLE CREDITS'
  print $BAS004-FLEX-CREDS               (+1,1)
  !*** 'Excess Credits will default to cash unless one of the '
  !*** 'following rollover options is selected: '
  let $Tmp_Text =  $BAS004-T02-L01A
  print $Tmp_Text                        (+2,1)

  Graphic (+1,#ccol8,1) box 1 {NORM_LNSIZE} ! Cash Box
  !*** ' Cash'
  print $BAS004-CASH                     (+0,+2)
  Graphic (+0,#ccol8B,1) box 1 {NORM_LNSIZE} ! Health Box
  !*** ' FSA-Health Care'
  print $BAS004-FSA-HEALTH-CARE          (+0,+2)
  Graphic (+0,#ccol8C,1) box 1 {NORM_LNSIZE} ! Dep Box
  !*** ' FSA-Dep Care'
  print $BAS004-FSA-DEP-CARE             (+0,+2)
  Graphic (+0,#ccol8D,1) box 1 {NORM_LNSIZE} ! Savings Box
  !*** ' Savings'
  print $BAS004-SAVINGS                  (+0,+2)

  !*** 'Note:  Excess credits can only be applied to eligible benefits'
  !*** ' as specified on this enrollment form.  Refer to '
  !*** 'the table below'
  !*** 'to get the value of your plan based credits.  This value is '
  !*** 'used in computing the cost of the benefit '
  !*** '(price - credit = cost).'
  print $BAS004-T03-L01A       (+2,1)
  print $BAS004-T03-L02A       (+1,1)
  print $BAS004-T03-L03A       (+1,1)
end-if

let $FirstCredPage = 'Y'

End-Procedure

!**********************************
Begin-Procedure Select-Credits-Data
!**********************************

 let $Prior_Plan_Type    = 'XYZ'
 let $Prior_Benefit_Plan = 'XYZ'
 let $Benefit_Plan       = 'XYZ'
 let $Plan_Type          = 'XYZ'
 let $BenefitName        = 'XYZ'
 let #Col                = 0
 let #PgmCred            = 0.0

Begin-SELECT
E.SCHED_ID
E.EMPLID
E.BENEFIT_RCD_NBR
E.EVENT_ID
E.PLAN_TYPE     () On-Break Print=Never Before=Get-General-Credit
E.BENEFIT_PROGRAM
E.EVENT_DT
F.SCHED_ID
F.EMPLID
F.BENEFIT_RCD_NBR
F.EVENT_ID
F.PLAN_TYPE
F.OPTION_CD
F.OPTION_ID
F.OPTION_TYPE
F.BENEFIT_PLAN
F.COVRG_CD
F.DISPLAY_PLN_SEQ
F.DISPLAY_OPT_SEQ

  let $Plan_Category = SUBSTR(&E.Plan_Type,1,1)

  if (&F.Option_Type <> 'G')
    do Get-Option-Credit
    do Print-Benefit-Plan
    do Print-Credit-Amount
  end-if

FROM PS_BAS_PARTIC_PLAN E,
     PS_BAS_PARTIC_OPTN F
WHERE E.SCHED_ID        = &A.Sched_Id
AND   E.EMPLID          = &A.EmplId
AND   E.BENEFIT_RCD_NBR    = &A.BENEFIT_RCD_NBR
AND   E.EVENT_ID        = &A.Event_Id
AND   ((E.ELECT_ALLOWED = 'Y') Or (E.PLAN_TYPE = '01'))
AND   ((E.PLAN_TYPE     = '01')
 OR    (E.PLAN_TYPE     LIKE 'A%')
 OR    (E.PLAN_TYPE     LIKE '1%')
 OR    (E.PLAN_TYPE     LIKE '2%')
 OR    (E.PLAN_TYPE     LIKE '3%'))
AND   F.SCHED_ID        = E.SCHED_ID
AND   F.EMPLID          = E.EMPLID
AND   F.BENEFIT_RCD_NBR    = E.BENEFIT_RCD_NBR
AND   F.EVENT_ID        = E.EVENT_ID
AND   F.PLAN_TYPE       = E.PLAN_TYPE
AND   F.OPTION_TYPE     IN ('G','O','W')
AND   F.HISTORY_ONLY    = 'N'
ORDER BY F.DISPLAY_PLN_SEQ ASC,
         F.DISPLAY_OPT_SEQ ASC
End-SELECT

!*** 'The flexible credits provided to you by the company for '
!*** $Tmp_YYYY || ' totals'
let $Tmp_Text = $BAS004-T04-L01A || $Tmp_YYYY
let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01B
let $PgmCrednew = Edit(#PgmCred, '99,999.99')
let $Tmp_Text = $Tmp_Text || $PgmCrednew
if ($Cost_Freq = 'A')
!*** ' for the year.'
  let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01C
else
!*** ' per pay-period.'
  let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01D
end-if

print $Tmp_Text                 (+2,1) bold

End-Procedure

!*********************************
Begin-Procedure Get-General-Credit
!*********************************

  let #GenCred = 0.0

Begin-SELECT
G1.SCHED_ID
G1.EMPLID
G1.BENEFIT_RCD_NBR
G1.EVENT_ID
G1.PLAN_TYPE
G1.OPTION_ID

SUM(G1.ANNL_AMT_B_TAX) &G1.Annual_Amt
SUM(G1.DEDN_AMT_B_TAX) &G1.Deduct_Amt

 if ($Cost_Freq = 'A')
   let #GenCred = &G1.Annual_Amt
 else
   let #GenCred = &G1.Deduct_Amt
 end-if

FROM PS_BAS_PARTIC_OPTN O1,
     PS_BAS_PARTIC_COST G1
WHERE O1.SCHED_ID     = &F.Sched_Id
AND   O1.EMPLID       = &F.EmplId
AND   O1.BENEFIT_RCD_NBR = &F.BENEFIT_RCD_NBR
AND   O1.EVENT_ID     = &F.Event_Id
AND   O1.PLAN_TYPE    = &F.Plan_Type
AND   O1.OPTION_TYPE  = 'G'
AND   G1.SCHED_ID     = O1.SCHED_ID
AND   G1.EMPLID       = O1.EMPLID
AND   G1.BENEFIT_RCD_NBR = O1.BENEFIT_RCD_NBR
AND   G1.EVENT_ID     = O1.EVENT_ID
AND   G1.PLAN_TYPE    = O1.PLAN_TYPE
AND   G1.OPTION_ID    = O1.OPTION_ID
AND   G1.COST_TYPE    = 'C'
GROUP BY G1.SCHED_ID,
         G1.EMPLID,
         G1.BENEFIT_RCD_NBR,
         G1.EVENT_ID,
         G1.PLAN_TYPE,
         G1.OPTION_ID
ORDER BY G1.SCHED_ID ASC,
         G1.EMPLID ASC,
         G1.BENEFIT_RCD_NBR ASC,
         G1.EVENT_ID ASC,
         G1.PLAN_TYPE ASC,
         G1.OPTION_ID ASC
End-SELECT

  if (&F.Plan_Type = '01')
    let #PgmCred = #GenCred
    let #GenCred = 0.0
  end-if

End-Procedure

!********************************
Begin-Procedure Get-Option-Credit
!********************************

let #TmpAmt = 0

Begin-SELECT
G2.SCHED_ID
G2.EMPLID
G2.BENEFIT_RCD_NBR
G2.EVENT_ID
G2.PLAN_TYPE
G2.OPTION_ID

SUM(G2.ANNL_AMT_B_TAX) &G2.Annual_Amt
SUM(G2.DEDN_AMT_B_TAX) &G2.Deduct_Amt

  if ($Cost_Freq = 'A')
    let #TmpAmt = &G2.Annual_Amt
  else
    let #TmpAmt = &G2.Deduct_Amt
  end-if

FROM PS_BAS_PARTIC_COST G2
WHERE G2.SCHED_ID     = &F.Sched_Id
AND   G2.EMPLID       = &F.EmplId
AND   G2.BENEFIT_RCD_NBR = &F.BENEFIT_RCD_NBR
AND   G2.EVENT_ID     = &F.Event_Id
AND   G2.PLAN_TYPE    = &F.Plan_Type
AND   G2.OPTION_ID    = &F.Option_Id
AND   G2.COST_TYPE    = 'C'
GROUP BY G2.SCHED_ID,
         G2.EMPLID,
         G2.BENEFIT_RCD_NBR,
         G2.EVENT_ID,
         G2.PLAN_TYPE,
         G2.OPTION_ID
ORDER BY G2.SCHED_ID ASC,
         G2.EMPLID ASC,
         G2.BENEFIT_RCD_NBR ASC,
         G2.EVENT_ID ASC,
         G2.PLAN_TYPE ASC,
         G2.OPTION_ID ASC
End-SELECT
End-Procedure

!**********************************
Begin-Procedure Print-Credit-Amount
!**********************************

!Default positioning...
let #col  = #ccol1
let #cola = #ccol1a

let $TestVal = RTRIM(&F.Covrg_Cd,' ')
Evaluate $TestVal
  When = ''                  !Employee Only
  When = '1'                 !Employee Only
    let #col  = #ccol1
    let #cola = #ccol1a
    break
  When = '2'                 !Employee + Spouse
    let #col  = #ccol2
    let #cola = #ccol2a
    break
  When = '3'                 !Employee + Dependents
    let #col  = #ccol3
    let #cola = #ccol3a
    break
  When = '4'                 !Family
    let #col  = #ccol4
    let #cola = #ccol4a
    break
  When = '5'                 !NQ Adlt
    let #col  = #ccol1
    let #cola = #ccol1a
    break
  When = '6'                 !NQ Chld
    let #col  = #ccol3
    let #cola = #ccol3a
    break
  When = '7'                 !NQ Adlt+Chld
    let #col  = #ccol4
    let #cola = #ccol4a
    break
End-Evaluate

if (&F.Option_Type = 'O')
  let #TmpAmt = #TmpAmt + #GenCred    !Don't add Genl Creds to Waive option
end-if

Alter-Printer Font=5 Point-Size={SMALL}  !Reduce font size
print #TmpAmt                         (+0,#col) edit {PER_PAY_MASK}
let $Tmp_Text = '(' || RTRIM(&F.Option_Cd,' ') || ')'
print $Tmp_Text (+0,#cola)

Alter-Printer Font=5 Point-Size={NORM}   !Return font size to normal
let $Tmp_Text = ' '

End-Procedure

!*********************************
Begin-Procedure Print-Benefit-Plan
!*********************************

let $PrintHeaderFlag = 'N'

if ($FirstCredPage = 'Y')
  let $PrintHeaderFlag = 'Y'
  let $FirstCredPage = 'N'
end-if

if (#Current-Line + 1 >= #Page_Maximum)
  do Bottom-Line
  New-Page
  let $PrintHeaderFlag = 'Y'
end-if

if ($PrintHeaderFlag = 'Y')
  do Print-Cred-Pg-Header
end-if

if ($Prior_Plan_Type <> &E.Plan_Type)
  do Print-Plan-Title
end-if

if ($Prior_Benefit_Plan <> &F.Benefit_Plan) Or (&F.Option_Type='W')
  if (&F.Option_Type <> 'W')
    let $Prior_Benefit_Plan = &F.Benefit_Plan
    let $Benefit_Plan       = &F.Benefit_Plan
    do Get-Ben-Plan-Descr
  else
    let $Prior_Benefit_Plan = ''
    let $BenefitName = $BEN1-WAIVE
  end-if

  print $BenefitName                    (+1,1)
end-if

let $Prior_Plan_Type    = &E.Plan_Type

End-Procedure

!**********************************
Begin-Procedure Print-Cred-Pg-Header
!**********************************

let #ccol = #ccol2 - 3

if ($Plan_Category <> '1')
!*** 'CREDITS AND OPTION CODES'
  print $BAS004-CRDS-OPT-CD  (+2,#ccol) Bold
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
!*** 'YOUR OPTIONS'
  print $BAS004-YOUR-OPT            (+1,1) Bold
else
!*** 'CREDITS AND OPTION CODES'
  print $BAS004-CRDS-OPT-CD  (+2,#ccol) Bold
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
!*** 'YOUR OPTIONS'
  print $BAS004-YOUR-OPT            (+1,1)      Bold

  print $BEN1-EMPLOYEE              (+0,#ccol1)
  print $BEN1-EMPLOYEE              (+0,#ccol2)
  print $BEN1-EMPLOYEE              (+0,#ccol3)
  print $BEN1-EMPLOYEE              (+0,#ccol4)
  print $BAS004-ONLY                (+1,#ccol1)
  print $BAS004-PL-SPOUSE           (+0,#ccol2)
  print $BAS004-PL-CHILD            (+0,#ccol3)
  print $BAS004-PL-FAMILY           (+0,#ccol4)
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
end-if

End-Procedure

!*********************************
Begin-Procedure Get-Ben-Plan-Descr
!*********************************

  do Get-Benefit-Name
  if $BenefitName = ''
    let $BenefitName = $BAS004-NO-DESCR
  end-if

End-Procedure

!******************************
Begin-Procedure Print-Plan-Title
!******************************

if (#Current-Line + 3 >= #Page_Maximum)
  do Bottom-Line
  New-Page
  do Print-Cred-Pg-Header
  print '' (+1,1)
end-if

move 'PLAN_TYPE' to $FieldName
move &F.Plan_Type to $Plan_Type
move $Plan_Type to $FieldValue
do Read-Translate-Table

let $Plan_Title = RTRIM($XlatLongName,' ')
print $Plan_Title                     (+2,1) UNDERLINE

End-Procedure

!******************************
Begin-Procedure Bottom-Line
!******************************

add 1 to #Page_Number

Graphic (#Bottom_Line,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE}

print &B.name                            (+1,1)
let $Page_Number = EDIT(#Page_Number,'99')
!***'Page ' || $Page_Number
let $Page_Number = $BEN1-PAGE || $Page_Number
print $Page_Number                       (+0,#ccol2)
let #col = #ccol6 - 1
print #Form_Cnt                          (+0,#col) edit 0000

End-Procedure

!******************************
Begin-Procedure Select-Plan
!******************************

!Set Plan Variables...
let $Plan_Type     = 'XYZ'
let $FirstOptnPage = 'Y'
let $CurElectFlag = 'N'
let $ElectAllowFlag    = 'N'
let $IsEligForSvgsFlag = 'N'

!Set Option Variables...
let $Prior_Benefit_Plan  = 'XYZ'
let $Prior_Plan_Type     = 'XYZ'
let $Prior_Option_Type   = 'XYZ'
let $Benefit_Plan        = 'XYZ'
let $BenefitName               = 'XYZ'
let $Prior_Plan_Category = ' '
let #col                 = 0
let #Optn_Cnt            = 0

Begin-SELECT
J.SCHED_ID
J.EMPLID
J.BENEFIT_RCD_NBR
J.EVENT_ID
J.PLAN_TYPE     () On-Break Print=Never Before=On-Plan-Break
J.EVENT_DT
J.ELECT_ALLOWED
J.BENEFIT_PROGRAM
J.CUR_ELECT_IND
K.SCHED_ID
K.EMPLID
K.BENEFIT_RCD_NBR
K.EVENT_ID
K.PLAN_TYPE
K.BENEFIT_PROGRAM
K.EVENT_DT
K.OPTION_ID
K.DISPLAY_PLN_SEQ
K.DISPLAY_OPT_SEQ
K.OPTION_TYPE
K.BENEFIT_PLAN
K.COVRG_CD
K.OPTION_CD
K.DEFAULT_IND
K.PROOF_REQ_IND
K.CALCULATED_BASE

  let $Plan_Type           = &J.Plan_Type
  let $CurElectFlag = &J.Cur_Elect_Ind
  let $ElectAllowFlag    = &J.Elect_Allowed

  let $Plan_Category = SUBSTR(&J.Plan_Type,1,1)

  if ($ElectAllowFlag = 'Y')

    do Print-Benefit-Plan-Optns

    Evaluate $Plan_Category
      When = '1'
      When = '2'
      When = '3'
        do Select-Price-Amt
        do Print-Price-Amt
      When = '4'
        if ($FedFlag = 'Y')
          let #Cola = #CCol9 + 10
        else
          let #Cola = #CCol9 + 7
        end-if
        do Print-Option-Cd
        let $IsEligForSvgsFlag = 'Y'
      When = '5'
      When = '6'
      When = '7'
      When = '8'
      When = '9'
      when = 'A'
        let #Cola = #CCol2
        do Print-Option-Cd
    End-Evaluate

  end-if

FROM  PS_BAS_PARTIC_PLAN J,
      PS_BAS_PARTIC_OPTN K
WHERE J.SCHED_ID        = &A.Sched_Id
AND   J.EMPLID          = &A.EmplId
AND   J.BENEFIT_RCD_NBR    = &A.BENEFIT_RCD_NBR
AND   J.EVENT_ID        = &A.Event_Id
AND   J.PLAN_TYPE      <> '01'
AND   K.SCHED_ID        = J.SCHED_ID
AND   K.EMPLID          = J.EMPLID
AND   K.BENEFIT_RCD_NBR    = J.BENEFIT_RCD_NBR
AND   K.EVENT_ID        = J.EVENT_ID
AND   K.PLAN_TYPE       = J.PLAN_TYPE
AND   K.OPTION_TYPE    IN ('O','W')
AND   K.HISTORY_ONLY    = 'N'
ORDER BY K.DISPLAY_PLN_SEQ ASC,
         K.DISPLAY_OPT_SEQ ASC
End-SELECT

  do On-Plan-Break

End-Procedure

!***************************************
Begin-Procedure Print-Benefit-Plan-Optns
!***************************************

if ($Prior_Plan_Type <> &J.Plan_Type)

  do Check-Optn-Pg-Header

  move 'PLAN_TYPE' to $FieldName
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $Plan_Title = RTRIM($XlatLongName,' ')
  print $Plan_Title            (+2,1) UNDERLINE

  Evaluate $Plan_Category
    When = '2'
!***  'Coverage Amount'
      print $BEN1-COVER-AMT    (+0,#ccol1) UNDERLINE
    When = '4'
!***  ' --- Pre Tax Per Pay Pd ---         --- After Tax Per Pay Pd ---'
!***  ' Pct%      or      Flat-Amt          Pct%      or      Flat-Amt'
      print $BAS004-T05-L01A   (+0,20)
      print $BAS004-T05-L01B   (+0,40)
      print $BAS004-T05-L02A   (+1,20)
      print $BAS004-T05-L02A   (+0,40)
      print ''                 (+1,1)
    When = '6'
      do Plan-Type-6X-Min-Max
  End-Evaluate

  let #counter = 1                          !Counts within Plan_Type

end-if

if  (($Prior_Benefit_Plan <> &K.Benefit_Plan) Or (&K.Option_Type = 'W'))
    Or
    (($Plan_Category = '2') And ($Prior_Option_Type  = 'W'))

  do Check-Optn-Pg-Header

  if (&K.Option_Type <> 'W')
    let $Benefit_Plan = &K.Benefit_Plan
    do Get-Ben-Plan-Descr
  else
!***  'Waive'
     let $BenefitName   =  $BEN1-WAIVE
  end-if

  if ($Cost_Freq = 'A')
!***  'Annual'
    let $Tmp_Text = $BEN1-ANNUAL
  else
!***  'Pay Period'
    let $Tmp_Text = $BEN1-PAY-PERIOD
  end-if

  Evaluate $Plan_Category

    !---------------------------------------------
    When = '1'
      print $BenefitName                           (+1,1)
      Evaluate #counter
        When = 1
!***      'Option Code:'
          print $BEN1-OPT-CD2       (+0,#ccol5)
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
          break
        When = 2
!***      $Tmp_Text || ' Cost:'
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
!***      $Tmp_Text || ' Credit:'
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 2
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      break

    !---------------------------------------------
    When ='2'
      print $BenefitName                           (+1,1)
      Evaluate #counter
        When = 1
!***     ' Option Code:'
          print $BEN1-OPT-CD2          (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 2
!***      $Tmp_Text || ' Cost:'
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
!***      $Tmp_Text || ' Credit:'
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 2
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      break

    !---------------------------------------------
    when ='A'
    When ='3'
      print $BenefitName                           (+1,1)
      Evaluate #counter
        When = 1
!***      'Option Code:'
          print $BEN1-OPT-CD2    (+0,#ccol5)
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 2
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 2
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      break

    !---------------------------------------------
    When ='4'
      if (#counter = 1)
        let #col = #ccol1 - 5
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}
        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol2 - 6
        print '$'                          (+0,#col)
        let #col = #ccol2 - 4
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

        let #col = #ccol3 - 4
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}

        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol4 - 4
        print '$'                          (+0,#col)
        let #col = #ccol4 - 1
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

!***    'Option Code:'
        print $BEN1-OPT-CD2           (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if

      print $BenefitName                         (+1,1)

      break

    !---------------------------------------------
    When ='5'
      print $BenefitName                         (+1,1)
      if (#counter = 1)
        print $BEN1-OPT-CD2                (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if
      break

    !---------------------------------------------
    When ='6'
      print $BenefitName                         (+1,1)
      break

    !---------------------------------------------
    When ='7'
      print $BenefitName                         (+1,1)
      if (#counter = 1)
        print $BEN1-OPT-CD2                (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if
      break

    !---------------------------------------------
    When ='8'
      if (#counter = 1)
!***    'Per Pay Pd:  Voluntary Amt $__________  or  Pct ____%'
        let $Tmp_Text = $BAS004-T06-L01A || $BAS004-T06-L01B
        let $Tmp_Text = $Tmp_Text || '$__________ '
        let $Tmp_Text = $Tmp_Text || $BAS004-T06-L01C
        let $Tmp_Text = $Tmp_Text || '____%'
        print $Tmp_Text                    (+0,+0)
        print $BEN1-OPT-CD2                (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        print ''         (+1,1)
      end-if
      print $BenefitName                         (+1,1)
      break

    !---------------------------------------------
    When ='9'
      if (#counter = 1)
!***    'Number of Hours _________'
        let $Tmp_Text = $BAS004-NBR-HOURS || '_________'
        print $Tmp_Text              (+0,+8)
        print $BEN1-OPT-CD2          (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        print ''         (+1,1)
      end-if
      print $BenefitName                         (+1,1)
      break

  End-Evaluate

  add 1  to #counter

end-if

let $Prior_Benefit_Plan = &K.Benefit_Plan  !Set Prior Value
let $Prior_Option_Type  = &K.Option_Type   !Set Prior Value
let $Prior_Plan_Type    = &J.Plan_Type     !Set Prior Value
let $Prior_Plan_Category = $Plan_Category  !Set Prior Value
add 1 to #Optn_Cnt

End-Procedure

!**********************************
Begin-Procedure Check-Optn-Pg-Header
!**********************************

let #counter6x = 0
Begin-SELECT
P6.BENEFIT_PLAN

   let #counter6x = #counter6x+1

   FROM PS_BEN_DEFN_OPTN P6
   WHERE P6.BENEFIT_PROGRAM = &K.Benefit_Program
   AND P6.PLAN_TYPE = &J.Plan_Type
   AND P6.OPTION_TYPE = 'O'
   AND P6.EFFDT = (SELECT
   MAX(Q.EFFDT) FROM PS_BEN_DEFN_OPTN Q
   WHERE Q.BENEFIT_PROGRAM = P6.BENEFIT_PROGRAM
   AND Q.PLAN_TYPE = P6.PLAN_TYPE
   AND Q.OPTION_TYPE = P6.OPTION_TYPE
   AND Q.EFFDT <= &J.Event_Dt)
End-SELECT


let $PrintHeaderFlag = 'N'

let #NeedLines = 2
if ($Plan_Category = '4') And ($Plan_Category <> $Prior_Plan_Category)
  let #NeedLines = 5
end-if
if ($Plan_Category = '6') And ($Plan_Category <> $Prior_Plan_Category)
  if ($Cost_Freq = 'A')
    let #NeedLines = #counter6x+8
  else
    let #NeedLines = #counter6x+10
  end-if
end-if
if ($FirstOptnPage = 'Y')
  let #NeedLines = 8
end-if

if ((#Current-Line + #NeedLines) >= #Page_Maximum)
  do Bottom-Line
  New-Page
  let $PrintHeaderFlag = 'Y'
end-if

if ($FirstOptnPage = 'Y')
  let $PrintHeaderFlag = 'Y'
end-if

if ($PrintHeaderFlag = 'Y')
  do Print-Optn-Pg-Header
end-if

let $FirstOptnPage = 'N'

End-Procedure

!**********************************
Begin-Procedure Print-Optn-Pg-Header
!**********************************

if ($Plan_Category <> '1')
  !***  'PRICES AND OPTION CODES'
  print $BAS004-PRC-OPT-CD     (+2,#ccol2) Bold
  print $BAS004-OPTN-SEL       (+0,#ccol5)
  print $BAS004-YOUR-OPT            (+1,1) Bold
  Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}
else
  !***  'PRICE AND OPTION CODES'
  print $BAS004-PRC-OPT-CD     (+2,#ccol2) Bold
  Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}
  print $BAS004-YOUR-OPT       (+1,1) Bold

  if ($FedFlag = 'Y')
    print $BAS004-FED-SELF     (+0,#ccol1)
    print $BEN1-FAMILY         (+0,#ccol2)
    print $BAS004-FED-SELF     (+0,#ccol3)
    print $BEN1-FAMILY         (+0,#ccol4)
  else
    print $BEN1-EMPLOYEE       (+0,#ccol1)
    print $BEN1-EMPLOYEE       (+0,#ccol2)
    print $BEN1-EMPLOYEE       (+0,#ccol3)
    print $BEN1-EMPLOYEE       (+0,#ccol4)
  end-if

  !*** 'Option Selected &'
  print $BAS004-OPTN-SEL       (+0,#ccol5)

  if ($FedFlag = 'Y')
    print $BAS004-FED-HIGH     (+1,#ccol1)
    print $BAS004-FED-HIGH     (+0,#ccol2)
    print $BAS004-FED-LOW      (+0,#ccol3)
    print $BAS004-FED-LOW      (+0,#ccol4)
  else
    print $BAS004-ONLY         (+1,#ccol1)
    print $BAS004-PL-SPOUSE    (+0,#ccol2)
    print $BAS004-PL-CHILD     (+0,#ccol3)
    print $BAS004-PL-FAMILY    (+0,#ccol4)
  end-if

!*** 'Cost Per Pay Period'
  print $BAS004-CST-PER-PAY    (+0,#ccol5)

  Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}
end-if

if ($Prior_Plan_Type = &J.Plan_Type)
  print '' (+2,1)
end-if

End-Procedure

!*******************************
Begin-Procedure Select-Price-Amt
!*******************************

let #TmpAmt = 0

Begin-SELECT

N.SCHED_ID
N.EMPLID
N.BENEFIT_RCD_NBR
N.EVENT_ID
N.PLAN_TYPE
N.OPTION_ID

SUM(N.ANNL_AMT_B_TAX)+SUM(N.ANNL_AMT_A_TAX) &n_annual_amt
SUM(N.DEDN_AMT_B_TAX)+SUM(N.DEDN_AMT_A_TAX) &n_deduct_amt

  if ($Cost_Freq = 'A')
    let #TmpAmt = &n_annual_amt
  else
    let #TmpAmt = &n_deduct_amt
  end-if

FROM PS_BAS_PARTIC_COST N
WHERE N.SCHED_ID        = &K.Sched_Id
AND   N.EMPLID          = &K.EmplId
AND   N.BENEFIT_RCD_NBR    = &K.BENEFIT_RCD_NBR
AND   N.EVENT_ID        = &K.Event_Id
AND   N.PLAN_TYPE       = &K.Plan_Type
AND   N.OPTION_ID       = &K.Option_Id
AND   N.COST_TYPE       = 'P'
GROUP BY N.SCHED_ID,N.EMPLID,N.BENEFIT_RCD_NBR,N.EVENT_ID,N.PLAN_TYPE,
         N.OPTION_ID
ORDER BY N.SCHED_ID ASC,
         N.EMPLID ASC,
         N.BENEFIT_RCD_NBR ASC,
         N.EVENT_ID ASC,
         N.PLAN_TYPE ASC,
         N.OPTION_ID ASC

End-SELECT

End-Procedure

!******************************
Begin-Procedure Print-Price-Amt
!******************************

let #col  = #ccol1
let #cola = #ccol1a
Evaluate $Plan_Category
  When = '1'
    let $TestVal = RTRIM(&K.Covrg_Cd, ' ')
    Evaluate $TestVal
      When = ''                  !Employee Only
      When = '1'                 !Employee Only
        let #col  = #ccol1
        let #cola = #ccol1a
        break
      When = '2'                 !Employee + Spouse
        let #col  = #ccol2
        let #cola = #ccol2a
        break
      When = '3'                 !Employee + Dependents
        let #col  = #ccol3
        let #cola = #ccol3a
        break
      When = '4'                 !Family
        if ($FedFlag = 'Y')
          let #col  = #ccol3
          let #cola = #ccol3a
        else
          let #col  = #ccol4
          let #cola = #ccol4a
        end-if
        break
      When = '5'                 !NQAdlt
        if ($FedFlag = 'Y')
          let #col  = #ccol4
          let #cola = #ccol4a
        else
          let #col  = #ccol1
          let #cola = #ccol1a
        end-if
        break
      When = '6'                 !NQChld
        let #col  = #ccol2
        let #cola = #ccol2a
        break
      When = '7'                 !NQAdlt+Chld
        let #col  = #ccol4
        let #cola = #ccol4a
        break

    End-Evaluate
  When = '2'
    let #col  = #ccol2
    let #cola = #ccol2a
End-Evaluate

Alter-Printer Font=5 Point-Size={SMALL}  !Reduce font size
print #TmpAmt                         (+0,#col) edit {PER_PAY_MASK}

do print-Option-Cd

Alter-Printer Font=5 Point-Size={SMALL}  !Reduce font size
if ($Plan_Category = '2')
  let #col = #ccol1
  if (RTRIM(&K.Option_Cd,' ') = 'W')
    print 0                           (+0,#col) Edit {COVRG_MASK}
  else
    print &K.Calculated_Base          (+0,#col) Edit {COVRG_MASK}
  end-if
end-if
Alter-Printer Font=5 Point-Size={NORM}   !Return font size to normal

let $Tmp_Text = ' '

End-Procedure

!******************************
Begin-Procedure Print-Option-Cd
!******************************

Alter-Printer Font=5 Point-Size={SMALL}  !Reduce font size

let $Tmp_Text = '(' || RTRIM(&K.Option_Cd,' ') || ')'

if (&K.Default_Ind = 'Y')
  print $Tmp_Text                     (+0,#cola) bold
else
  print $Tmp_Text                     (+0,#cola)
end-if

if (&K.Proof_Req_Ind = 'Y')
  let  #colxx =  #col - 1
  print '*'                           (+0,#colxx)

end-if

Alter-Printer Font=5 Point-Size={NORM}   !Return font size to normal

End-Procedure

!***********************************
Begin-Procedure Plan-Type-6X-Min-Max
!***********************************

let #FSA_Min = 0
let #FSA_Max = 0
let $FSA_Min = '0'
let $FSA_Max = '0'

    !*** 'Minimum Annual Contribution:  '
    print $BAS004-MIN-ANN-CON     (+0,25)  UNDERLINE


    !*** 'Maximum Annual Contribution:  '
    print $BAS004-MAX-ANN-CON     (+0,45) UNDERLINE

Begin-SELECT

L.FSA_MAX_ANNL_PLDG
M.BENEFIT_PLAN
M1.MIN_ANNUAL_CONTRIB
M1.MAX_ANNUAL_CONTRIB

  let #FSA_Min = &M1.Min_Annual_Contrib
  let #FSA_Max = &M1.Max_Annual_Contrib
  if (#FSA_Max > &L.FSA_Max_Annl_Pldg)       !Take the more restrictive max
    let #FSA_Max = &L.FSA_Max_Annl_Pldg
  end-if

  let $FSA_Min = #FSA_Min
  let $FSA_Max = #FSA_Max

  let $Benefit_Plan=&M.Benefit_Plan
  do Get-Ben-Plan-Descr
  print $BenefitName (+1,1)

  print $FSA_Min (+0,30) edit {PER_PAY_MASK}
 
  print $FSA_Max (+0,50) edit {PER_PAY_MASK}

FROM  PS_BEN_DEFN_PGM  L,
      PS_BEN_DEFN_OPTN  M,
      PS_FSA_BENEF_TBL M1
WHERE L.BENEFIT_PROGRAM = &K.Benefit_Program
AND   L.EFFDT =
      (SELECT MAX(LL.EFFDT)
       FROM   PS_BEN_DEFN_PGM LL
       WHERE  LL.BENEFIT_PROGRAM = L.BENEFIT_PROGRAM
       AND    LL.EFFDT          <= &J.Event_Dt)
AND   M.BENEFIT_PROGRAM = L.BENEFIT_PROGRAM
AND   M.EFFDT = L.EFFDT
AND   M.PLAN_TYPE = &J.Plan_Type
AND   M.OPTION_TYPE = 'O'
AND   M1.PLAN_TYPE = M.PLAN_TYPE
AND   M1.BENEFIT_PLAN = M.BENEFIT_PLAN
AND   M1.EFFDT =
      (SELECT MAX(MM.EFFDT)
       FROM   PS_FSA_BENEF_TBL MM
       WHERE  MM.PLAN_TYPE = M1.PLAN_TYPE
       AND    MM.BENEFIT_PLAN = M1.BENEFIT_PLAN
       AND    MM.EFFDT <= &J.Event_Dt)
End-SELECT

   print '' (+1,1)
   print '' (+1,1)

!*** 'Annual Pledge $'
  print $BAS004-ANN-PLG                    (+1,1)
  Graphic (+0,10,8) horz-line {NORM_LNSIZE}

print $BEN1-OPT-CD2           (+0,#ccol5)
Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}

if ($Cost_Freq = 'A')
!***  'Annual Cost:'
    print $BAS004-ANN-COST      (+1,#ccol5)
    Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
else
!***  '(Annual-Pledge - Balance-YTD) / Pay-Pds-Remaining'
    print $BAS004-T07-L01A           (+1,25)
    print '( ____________ - __________ ) /       _______      =' (+1,25)
!*** 'Pay Period Cost:'
    print $BAS004-PAY-PER-CST   (+0,#ccol5)
    Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
end-if

print ''         (+1,1)

End-Procedure

!********************************
Begin-Procedure Fin-Opt-Calc-Flds
!********************************

!This procedure prints the remaining standard data entry lines in the
!cases where there are so few eligible options that not all lines get
!triggered through the normal process.

if ($Cost_Freq = 'A')
!***  'Annual'
    let $Tmp_Text = $BEN1-ANNUAL
else
!***  'Pay Period'
    let $Tmp_Text = $BEN1-PAY-PERIOD
end-if

Evaluate $Plan_Category

  !---------------------------------------------
  When = '1'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 2
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      add 1 to #counter
    end-while
    break

  !---------------------------------------------
  When ='2'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      add 1 to #counter
    end-while
    break

  !---------------------------------------------
  When ='3'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 4
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        When = 3
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 4
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      add 1 to #counter
    end-while
    break

End-Evaluate

End-Procedure

!***********************************
Begin-Procedure On-Plan-Break
!***********************************

if ($Plan_Type <> 'XYZ')

  if ($ElectAllowFlag = 'Y')

    if (#Optn_Cnt = 0)
!***    'You do not have any eligible options for this plan.'
        print $BAS004-T08-L01A       (+1,1) Bold
    end-if

    Evaluate $Plan_Category
      When = '1'
      When = '2'
      When = '3'
      When = 'A'
        if (#counter < 4)
          do Fin-Opt-Calc-Flds
        end-if
        break
    End-Evaluate

  end-if

  do Select-Current-Elect

end-if

End-Procedure

!***********************************
Begin-Procedure Select-Current-Elect
!***********************************

if ((#Current-Line + 3) >= #Page_Maximum)
  do Bottom-Line
  New-Page
  do Check-Optn-Pg-Header
end-if

let $FoundCurElectFlag = 'N'

!This IF will display current elections for all plans...
!if ($CurElectFlag <> 'N')
!This IF will only display current elections for term'd or 'open' plans...
if ($CurElectFlag = 'O') Or (($CurElectFlag = 'Y') And ($ElectAllowFlag = 'Y'))
  Evaluate $Plan_Category
    When = 'A'
      do Current-Simple
    When = '1'
      do Current-Health
    When = '2'
      do Current-Life
    When = '3'
      do Current-Disability
    When = '4'
      do Current-Savings
    When = '5'
      do Current-Leave
    When = '6'
      do Current-FSA
    When = '7'
      do Current-Rtrmnt
    When = '8'
      do Current-Pension
    When = '9'
      do Current-Vacation
  End-Evaluate
end-if

if ($ElectAllowFlag = 'Y') And ($FoundCurElectFlag = 'N')
  move 'PLAN_TYPE' to $FieldName
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $Plan_Title = RTRIM($XlatLongName,' ')

!***  'You are not currently participating in the '
!***  $Tmp_Txt || $Plan_Title || ' plan.'
  let $Tmp_Txt = $BAS004-T09-L01A || $Plan_Title
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T09-L01B
  print $Tmp_Txt   (+2,1) Bold
end-if

let $Tmp_Text = ' '

End-Procedure

!*********************************
Begin-Procedure Current-Simple
!*********************************

Begin-SELECT
KM.BENEFIT_PLAN
KM.COVERAGE_ELECT

  if (&KM.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &KM.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_SIMPLE_BENEFIT KM
WHERE KM.EMPLID       = &A.EmplId
AND   KM.EMPL_RCD     = &A.EMPL_RCD
AND   KM.PLAN_TYPE    = $Plan_Type
AND   KM.BENEFIT_NBR     = 0
AND   KM.EFFDT =
      (SELECT MAX(KKM.EFFDT)
       FROM  PS_SIMPLE_BENEFIT KKM
       WHERE KKM.EMPLID    = KM.EMPLID
       AND   KKM.EMPL_RCD  = KM.EMPL_RCD
       AND   KKM.PLAN_TYPE = KM.PLAN_TYPE
       AND   KKM.BENEFIT_NBR  = KM.BENEFIT_NBR
       AND   KKM.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure


!******************************
Begin-Procedure Current-Health
!******************************

Begin-SELECT
O.BENEFIT_PLAN
O.COVRG_CD
O.COVERAGE_ELECT

  if (&O.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    move &O.Covrg_Cd to $CovrgCd
    move $AsOfToday to $CovrgEffdt
    do Get-Covrg-Code-Descr
    Let $Covrg_Cd = RTRIM($CovrgDescr,' ')
    let $Benefit_Plan = &O.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_HEALTH_BENEFIT O
WHERE O.EMPLID       = &A.EmplId
AND   O.EMPL_RCD     = &A.EMPL_RCD
AND   O.PLAN_TYPE    = $Plan_Type
AND   O.EFFDT =
      (SELECT MAX(OO.EFFDT)
       FROM  PS_HEALTH_BENEFIT OO
       WHERE OO.EMPLID    = O.EMPLID
       AND   OO.EMPL_RCD  = O.EMPL_RCD
       AND   OO.PLAN_TYPE = O.PLAN_TYPE
       AND   OO.BENEFIT_NBR  = O.BENEFIT_NBR
       AND   OO.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Life
!******************************

Begin-SELECT
P.BENEFIT_PLAN
P.COVERAGE_ELECT

  if (&P.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &P.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_LIFE_ADD_BEN P
WHERE P.EMPLID       = &A.EmplId
AND   P.EMPL_RCD     = &A.EMPL_RCD
AND   P.PLAN_TYPE    = $Plan_Type
AND   P.BENEFIT_NBR  = 0
AND   P.EFFDT =
      (SELECT MAX(PP.EFFDT)
       FROM  PS_LIFE_ADD_BEN PP
       WHERE PP.EMPLID    = P.EMPLID
       AND   PP.EMPL_RCD  = P.EMPL_RCD
       AND   PP.PLAN_TYPE = P.PLAN_TYPE
       AND   PP.BENEFIT_NBR  = P.BENEFIT_NBR
       AND   PP.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!*********************************
Begin-Procedure Current-Disability
!*********************************

Begin-SELECT
Q.BENEFIT_PLAN
Q.COVERAGE_ELECT

  if (&Q.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &Q.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_DISABILITY_BEN Q
WHERE Q.EMPLID       = &A.EmplId
AND   Q.EMPL_RCD     = &A.EMPL_RCD
AND   Q.PLAN_TYPE    = $Plan_Type
AND   Q.BENEFIT_NBR  = 0
AND   Q.EFFDT =
      (SELECT MAX(QQ.EFFDT)
       FROM  PS_DISABILITY_BEN QQ
       WHERE QQ.EMPLID    = Q.EMPLID
       AND   QQ.EMPL_RCD  = Q.EMPL_RCD
       AND   QQ.PLAN_TYPE = Q.PLAN_TYPE
       AND   QQ.BENEFIT_NBR  = Q.BENEFIT_NBR
       AND   QQ.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Savings
!******************************

let $tax               = 'N'    !values are N(one), P(re), A(fter)
let $pctflt            = 'N'    !values are N(one), P(ercent), F(lat)
let $pct_gross         = '0'
let $flat_ded_amt      = '0'
let $pct_gross_atax    = '0'
let $flat_ded_amt_atax = '0'

Begin-SELECT
R.BENEFIT_PLAN
R.PCT_GROSS
R.FLAT_DED_AMT
R.PCT_GROSS_ATAX
R.FLAT_DED_AMT_ATAX
R.COVERAGE_ELECT

  if (&R.Coverage_Elect = 'E')
    let $Benefit_Plan = &R.Benefit_Plan
    do Get-Ben-Plan-Descr

    if (&R.Pct_Gross > 0)
      let $Tax       = 'P'
      let $PctFlt    = 'P'
      let $Pct_Gross = edit(&R.Pct_Gross, '99.99')
    else
      if (&R.Flat_Ded_Amt > 0)
        let $Tax          = 'P'
        let $PctFlt       = 'F'
        let $Flat_Ded_Amt = edit(&R.Flat_Ded_Amt, '99999.99')
      end-if
    end-if

    if ($Tax = 'P')
!***  'You are currently Contributing pre-tax '
      let $Tmp_Txt1 = $BAS004-T10-L01A
      if ($PctFlt = 'P')
!***    $Pct_Gross || '% to the ' || $BenefitName || ' plan.'
        let $Tmp_Txt2 = $Pct_Gross || '%'
        let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
        let $Tmp_Txt2 = $Tmp_Txt2  || $BenefitName
        let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

      else
        if ($PctFlt = 'F')
!***       '$' || $Flat_Ded_Amt || ' to the ' || $BenefitName || ' plan.'
           let $Tmp_Txt2 = '$' || $Flat_Ded_Amt
           let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
           let $Tmp_Txt2 = $Tmp_Txt2  || $BenefitName
           let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

        end-if
      end-if
      do Print-Current-Elect
    end-if

    if (&R.Pct_Gross_Atax > 0)
      let $Tax            = 'A'
      let $PctFlt         = 'P'
      let $Pct_Gross_Atax = edit(&R.Pct_Gross_Atax, '99.99')
    else
      if (&R.Flat_Ded_Amt_Atax > 0)
        let $Tax               = 'A'
        let $PctFlt            = 'F'
        let $Flat_Ded_Amt_Atax = edit(&R.Flat_Ded_Amt_Atax, '99999.99')
      end-if
    end-if

    if ($Tax = 'A')
!***  'You are currently Contributing after-tax '
      let $Tmp_Txt1 = $BAS004-T11-L01A
      if ($PctFlt = 'P')
!***     $Pct_Gross_Atax || '% to the ' || $BenefitName || ' plan.'
         let $Tmp_Txt2 = $Pct_Gross_Atax || '%'
         let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
         let $Tmp_Txt2 = $Tmp_Txt2  || $BenefitName
         let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B


      else
        if ($PctFlt = 'F')
!***      '$' || $Flat_Ded_Amt_Atax || ' to the ' || $BenefitName || ' plan.'
          let $Tmp_Txt2 = '$' || $Flat_Ded_Amt_Atax
          let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
          let $Tmp_Txt2 = $Tmp_Txt2  || $BenefitName
          let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

        end-if
      end-if
      do Print-Current-Elect
    end-if

    if ($Tax <> 'N') Or ($PctFlt <> 'N')
      let $FoundCurElectFlag = 'Y'
    end-if
  end-if

FROM  PS_SAVINGS_PLAN R
WHERE R.EMPLID       = &A.EmplId
AND   R.EMPL_RCD     = &A.EMPL_RCD
AND   R.PLAN_TYPE    = $Plan_Type
AND   R.EFFDT =
      (SELECT MAX(RR.EFFDT)
       FROM  PS_SAVINGS_PLAN RR
       WHERE RR.EMPLID    = R.EMPLID
       AND   RR.EMPL_RCD  = R.EMPL_RCD
       AND   RR.PLAN_TYPE = R.PLAN_TYPE
       AND   RR.BENEFIT_NBR  = R.BENEFIT_NBR
       AND   RR.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Leave
!******************************

Begin-SELECT
U.BENEFIT_PLAN
U.COVERAGE_ELECT

  if (&U.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &U.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_LEAVE_PLAN U
WHERE U.EMPLID       = &A.EmplId
AND   U.EMPL_RCD     = &A.EMPL_RCD
AND   U.PLAN_TYPE    = $Plan_Type
AND   U.BENEFIT_NBR  = 0
AND   U.EFFDT =
      (SELECT MAX(UU.EFFDT)
       FROM  PS_LEAVE_PLAN UU
       WHERE UU.EMPLID    = U.EMPLID
       AND   UU.EMPL_RCD  = U.EMPL_RCD
       AND   UU.PLAN_TYPE = U.PLAN_TYPE
       AND   UU.BENEFIT_NBR  = U.BENEFIT_NBR
       AND   UU.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-FSA
!******************************

  let $Empl_Contrbutn_Amt = '0'
  let $Annual_Pledge      = '0'

Begin-SELECT
V.BENEFIT_PLAN
V.EMPL_CONTRBUTN_AMT
V.ANNUAL_PLEDGE
V.COVERAGE_ELECT

  if (&V.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &V.Benefit_Plan
    do Get-Ben-Plan-Descr
!***'You are currently covered under the ' || $BenefitName || ' option with '
    let $Tmp_Txt1 = $BAS004-T12-L01A
    let $Tmp_Txt1 = $Tmp_Txt1 || $BenefitName
    let $Tmp_Txt1 = $Tmp_Txt1 || $BAS004-T12-L01B

    let $Annual_Pledge = Edit(&V.Annual_Pledge, '99,999.99')
!***'an Annual Pledge of $' || $Annual_Pledge
    let $Tmp_Txt2 = $BAS004-T12-L01C || $Annual_Pledge || '.'
    do Print-Current-Elect
  end-if

FROM PS_FSA_BENEFIT V
WHERE V.EMPLID       = &A.EmplId
AND   V.EMPL_RCD     = &A.EMPL_RCD
AND   V.PLAN_TYPE    = $Plan_Type
AND   V.BENEFIT_NBR  = 0
AND   V.EFFDT =
      (SELECT MAX(VV.EFFDT)
       FROM  PS_FSA_BENEFIT VV
       WHERE VV.EMPLID    = V.EMPLID
       AND   VV.EMPL_RCD  = V.EMPL_RCD
       AND   VV.PLAN_TYPE = V.PLAN_TYPE
       AND   VV.BENEFIT_NBR  = V.BENEFIT_NBR
       AND   VV.EFFDT     < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Rtrmnt
!******************************

Begin-SELECT
Y.BENEFIT_PLAN
Y.COVERAGE_ELECT

  if (&Y.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &Y.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_RTRMNT_PLAN Y
WHERE Y.EMPLID       = &A.EmplId
AND   Y.EMPL_RCD     = &A.EMPL_RCD
AND   Y.PLAN_TYPE    = $Plan_Type
AND   Y.BENEFIT_NBR  = 0
AND   Y.EFFDT =
      (SELECT MAX(YY.EFFDT)
       FROM  PS_RTRMNT_PLAN YY
       WHERE YY.EMPLID    = Y.EMPLID
       AND   YY.EMPL_RCD  = Y.EMPL_RCD
       AND   YY.PLAN_TYPE = Y.PLAN_TYPE
       AND   YY.BENEFIT_NBR  = Y.BENEFIT_NBR
       AND   YY.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Pension
!******************************

Begin-SELECT
W.BENEFIT_PLAN
W.COVERAGE_ELECT

  if (&W.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &W.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_PENSION_PLAN W
WHERE W.EMPLID       = &A.EmplId
AND   W.EMPL_RCD     = &A.EMPL_RCD
AND   W.PLAN_TYPE    = $Plan_Type
AND   W.BENEFIT_NBR  = 0
AND   W.EFFDT =
      (SELECT MAX(WW.EFFDT)
       FROM  PS_PENSION_PLAN WW
       WHERE WW.EMPLID    = W.EMPLID
       AND   WW.EMPL_RCD  = W.EMPL_RCD
       AND   WW.PLAN_TYPE = W.PLAN_TYPE
       AND   WW.BENEFIT_NBR  = W.BENEFIT_NBR
       AND   WW.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!*******************************
Begin-Procedure Current-Vacation
!*******************************

Begin-SELECT
X.BENEFIT_PLAN
X.COVERAGE_ELECT

  if (&X.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Benefit_Plan      = &X.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_VACATION_BEN X
WHERE X.EMPLID       = &A.EmplId
AND   X.EMPL_RCD     = &A.EMPL_RCD
AND   X.PLAN_TYPE    = $Plan_Type
AND   X.BENEFIT_NBR  = 0
AND   X.EFFDT =
      (SELECT MAX(XXX.EFFDT)
       FROM  PS_VACATION_BEN XXX
       WHERE XXX.EMPLID    = X.EMPLID
       AND   XXX.EMPL_RCD  = X.EMPL_RCD
       AND   XXX.PLAN_TYPE = X.PLAN_TYPE
       AND   XXX.BENEFIT_NBR  = X.BENEFIT_NBR
       AND   XXX.EFFDT    < &A.Event_Dt)
End-SELECT

End-Procedure

!**********************************
Begin-Procedure Print-Current-Elect
!**********************************

Evaluate $Plan_Category
  When = '1'
    if ($CurElectFlag <> 'O')
!***  'You are currently covered under ' || $BenefitName
!***  $Tmp_Txt || ' with '  || $Covrg_Cd || ' coverage.'
      let $Tmp_Txt = $BAS004-T13-L01A || $BenefitName
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T13-L01B
      let $Tmp_Txt = $Tmp_Txt || $Covrg_Cd
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T13-L01C

    else
!***  'Your current coverage under ' || $BenefitName
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T14-L01A || $BenefitName
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B

    end-if
  When = '2'
  When = '3'
  When = '5'
  When = '8'
  When = '9'
  when = 'A'
    if ($CurElectFlag <> 'O')
!***  'You are currently covered under the ' || $BenefitName || ' option.'
      let $Tmp_Txt = $BAS004-T12-L01A || $BenefitName
      let $Tmp_Txt = $Tmp_Txt ||  $BAS004-T15-L01A
    else
!***  'Your current coverage under ' || $BenefitName
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T14-L01A || $BenefitName
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B

    end-if
  When = '4'
  When = '6'
    if ($CurElectFlag <> 'O')
      let $Tmp_Txt = $Tmp_Txt1 || $Tmp_Txt2
    else
!***  'Your current contribution to ' || $BenefitName
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T17-L01A || $BenefitName
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B
    end-if
End-Evaluate

print $Tmp_Txt (+2,1) bold

End-Procedure

!******************************
Begin-Procedure Footer
!******************************

if (#Current-Line >= #Page_Max_Last)
  do Bottom-Line
  New-Page
  print '' (+1,1)
end-if

Alter-Printer Font=5 Point-Size={NORM}
Graphic (#Start_Footer,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE} ! Horizontal line.

if ($Cost_Freq = 'A')
!***'Total Cost per Year '
  print $BAS004-T18-L01A        (+2,1)
else
!***'Total Per Pay Period Cost '
   print  $BAS004-T19-L01A      (+2,1)
end-if
print '$'        (+0,#ccol5)
let  #col = #ccol5+1
Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

if ($FedFlag = 'Y')
  print ' '                     (+2,1)
else
  if ($Cost_Freq = 'A')
    !***'Minus Total Annual Flexible Credits'
    print $BAS004-T20-L01A      (+2,1)
  else
    !***'Minus Total Per Pay Flexible Credits'
    print $BAS004-T21-L01A      (+2,1)
  end-if
  print '$'        (+0,#ccol5)
  let  #col = #ccol5+1
  Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

  !***'Total'
  print $BEN1-TOTAL             (+2,1) bold
  print '$'        (+0,#ccol5)
  let  #col = #ccol5+1
  Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

  !***'If the Total number is positive,'
  !***'it represents the annual deductions from your pay that will'
  !***'be required to pay for your'
  !***'benefits.'
  let $Tmp_Txt = $BAS004-T22-L01A
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L01B
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L01C
  print $Tmp_Txt     (+2,1)
  let $Tmp_Txt = $BAS004-T22-L02A
  print $Tmp_Txt     (+1,1)

  !***'If this number is negative,'
  !***' it represents the amount of cash '
  let $Tmp_Txt = $BAS004-T22-L03A
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03B
  if ($Cost_Freq = 'A')
  !***'annually '
    let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03C
  else
  !***'per pay period '
    let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03D
  end-if
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03E
  print $Tmp_Txt     (+1,1)
end-if

do Bottom-Line
New-Page

End-Procedure

!*************************************
Begin-Procedure Print-Sav-Instructions
!*************************************

  let $Tmp_Txt = UPPER($BAS004-INVTS)
  print $Tmp_Txt     (+1,1) Bold

!***'The following box lists all the investment options that you are eligible for.'
!***'Please select the investment you would like to participate in by entering a '
!***'percent of your 401k Contribution to go into the fund.'

  let $Tmp_Txt = $BAS004-T23-L01A
  if ($FedFlag = 'Y')
    let $Tmp_Txt = $Tmp_Txt || $BAS004-T23-L02AFED
  else
    let $Tmp_Txt = $Tmp_Txt || $BAS004-T23-L02A
  end-if
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T23-L03A

  print $Tmp_Txt   (+1,1,120) WRAP 120 3

End-Procedure

!**************************************
Begin-Procedure Print-Investment-Boxes
!**************************************

let #depth = 1

!***'INVESTMENT OPTION'
print $BAS004-INV-OPT         (#orow1,#optncol4) Bold
Graphic (#orow1,{INVCOL},{O_WIDTH}) box :#depth {SMAL_LNSIZE}
!***'PERCENT'
print $BAS004-PERCENT               (#orow1,#optncol5)
Graphic (#orow1,#ocol1,{O_BOX_LEN}) box :#depth {SMAL_LNSIZE}

Graphic (0,{INVCOL},{SAV_LNLENGTH}) Horz-Line {NORM_LNSIZE}

End-Procedure

!*******************************
Begin-Procedure Select-Inv-Optns
!*******************************

Begin-SELECT
Z.SCHED_ID
Z.EMPLID
Z.BENEFIT_RCD_NBR
Z.EVENT_ID
Z.PLAN_TYPE

  do Process-Inv-Optns

FROM  PS_BAS_PARTIC_PLAN Z
WHERE Z.SCHED_ID      = &A.Sched_Id
AND   Z.EMPLID        = &A.EmplId
AND   Z.BENEFIT_RCD_NBR  = &A.BENEFIT_RCD_NBR
AND   Z.EVENT_ID      = &A.Event_Id
AND   Z.PLAN_TYPE     LIKE '4%'
AND   Z.ELECT_ALLOWED = 'Y'
ORDER BY Z.PLAN_TYPE ASC
End-SELECT

End-Procedure

!********************************
Begin-Procedure Process-Inv-Optns
!********************************

let $Last_Plan  = 'xyz'
let #Invest_Cnt = 0
let #PrRowCnt   = 0

Begin-SELECT

ZA.PLAN_TYPE
ZA.BENEFIT_PLAN
  let $Curr_Ben_Plan = &ZA.BENEFIT_PLAN

  if (&ZA.Benefit_Plan <> $Last_Plan)
    do Select-Valid-Optns
  end-if
  let $Last_Plan = &ZA.Benefit_Plan

FROM  PS_BAS_PARTIC_OPTN ZA
WHERE ZA.SCHED_ID     = &Z.Sched_Id
AND   ZA.EMPLID       = &Z.EmplId
AND   ZA.BENEFIT_RCD_NBR = &Z.BENEFIT_RCD_NBR
AND   ZA.EVENT_ID     = &Z.Event_Id
AND   ZA.PLAN_TYPE    = &Z.Plan_Type
AND   ZA.HISTORY_ONLY = 'N'
ORDER BY ZA.BENEFIT_PLAN ASC
End-SELECT

End-Procedure

!*********************************
Begin-Procedure Select-Valid-Optns
!*********************************

let #Invest_Cnt = 0

Begin-SELECT

ZB.PLAN_TYPE
ZB.BENEFIT_PLAN
ZB.INVESTMENT_OPT
ZB.DESCRSHORT

  let $Plan_Type          = &ZB.Plan_Type
  let $Benefit_Plan       = &ZB.Benefit_Plan
  let $Option_ID          = &ZB.Investment_Opt
  let $SvgsInvtDescrAbbrv = &ZB.DescrShort
  do Get-Svgs-Invt-Name-Lang

  add 1 to #Invest_Cnt
  do Print-Inv-Optns

FROM  PS_SAVINGS_INV_TBL ZB
WHERE ZB.PLAN_TYPE    = &Z.Plan_Type
AND   ZB.BENEFIT_PLAN = &ZA.Benefit_Plan
AND   ZB.EFFDT =
      (SELECT MAX(ZC.EFFDT)
      FROM  PS_SAVINGS_INV_TBL ZC
      WHERE ZC.PLAN_TYPE    = ZB.PLAN_TYPE
      AND   ZC.BENEFIT_PLAN = ZB.BENEFIT_PLAN
      AND   ZC.EFFDT       <= &A.Event_Dt)
ORDER BY ZB.INVESTMENT_OPT ASC
End-SELECT

  if  #Invest_Cnt > 0
    Graphic (0,{INVCOL},{SAV_LNLENGTH}) Horz-Line {NORM_LNSIZE}
  end-if

  if ((#Current-Line +5) >= #Page_Maximum)
    do Bottom-Line
    New-Page
    print '' (+1,1)
    do Print-Investment-Boxes
  end-if

End-Procedure

!*******************************
Begin-Procedure Print-Inv-Optns
!*******************************

Graphic (+0,{INVCOL},1) Vert-Line {SMAL_LNSIZE}

let #TmpCol = {INVCOL} + 1
print $Curr_Ben_Plan            (+1,#TmpCol)
print &ZB.Investment_Opt          (+0,13)
print $SvgsInvtDescrAbbrv         (+0,15)
let $Curr_Ben_Plan = ''

let #TmpCol = {INVCOL} + 7
Graphic (+0,#TmpCol,17) box 1 {SMAL_LNSIZE}

Graphic (+0,29,12) box 1 {SMAL_LNSIZE}

let #PrRowCnt = #PrRowCnt + 1


End-Procedure

!***********************************
Begin-Procedure Print-Signature-Line
!***********************************

if ((#Current-Line + 7) >= #Page_Maximum)
  do Bottom-Line
  New-Page
end-if

!***'SIGNATURE:'
print $BEN1-SIGNATURE2                    (+7, 1) bold
print '_________________________________' (+0,+0)
print $BEN1-DATE2                         (+0,+0) bold
print '__/__/____'                        (+0,+0)

do Bottom-Line

End-Procedure

!*******************************
Begin-Procedure Upd-Status-Date
!*******************************

let $Sql-Statement = 'BAS004: UPDATE PS_Bas_Partic (Notify_Dt)'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
   SET OPTION_NOTIFY_DT = $AsOfToday
 WHERE SCHED_ID         = &A.Sched_Id
   AND EMPLID           = &A.EmplId
   AND BENEFIT_RCD_NBR     = &A.BENEFIT_RCD_NBR
   AND EVENT_ID         = &A.Event_Id;

End-SQL

let $Sql-Statement = 'BAS004: UPDATE PS_Bas_Partic (Status)'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
   SET BAS_PROCESS_STATUS = 'NT',
       STATUS_DT          = $AsOfToday
 WHERE SCHED_ID           = &A.Sched_Id
   AND EMPLID             = &A.EmplId
   AND BENEFIT_RCD_NBR       = &A.BENEFIT_RCD_NBR
   AND EVENT_ID           = &A.Event_Id
   AND BAS_PROCESS_STATUS = 'PR';

End-SQL

 !*** 'Form Printed for Emplid: '
  display $BAS004-FORM-FOR-EE noline
  display &A.Emplid

End-Procedure

!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id;

End-SQL

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt_Partic'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT_PARTIC
WHERE PRINT_ID = $Reprint_Id;

End-SQL

End-Procedure

!*******************************
Begin-Procedure Reset-Printer
!*******************************

New-Page

End-Procedure

!*******************************
Begin-Procedure Display-Time
!*******************************

  do Get-Current-Datetime
  display $AsOfNow
  display ''

End-Procedure

!***************************************************************************

#Include 'readxlat.sqc'  !Get translate Values
#Include 'basdep00.sqc'  !Process Dependent Coverages
#Include 'number.sqc'    !Number formatting routines
#Include 'datetime.sqc'  !Date formatting routines
#Include 'datemath.sqc'  !Date arithmatic procedures
#Include 'askcar.sqc'    !Ask_EmplID
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getsched.sqc'  !Ask-Schedule-Id Procedure
#Include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr procedure
#Include 'getpgmnm.sqc'  !Get-Benefit-Program-Name procedure
#Include 'getbennm.sqc'  !Get-Benefit-Plan-Name procedure
#Include 'getinvnm.sqc'  !Get-Savings-Investment-Name procedure
#Include 'getevcls.sqc'  !Get-Event-Class-Name procedure
#Include 'getindcd.sqc'  !Determine Industry Membership
#Include 'getaddr.sqc'   !Get current address for specified address type

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'useprntr.sqc'  !do Init_Printer

!**************************** End of Report ********************************
