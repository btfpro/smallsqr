!***********************************************************************
!  ABS701:  Absence Management - Vaction Accrual                       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:11:02:19                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
!***********************************************************************
!
! Modifications : 1999-11-23  Apply fixes for Service Bonus
!
!***********************************************************************


#include 'setenv.sqc'     ! Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

!-----------------------------------------------------------------------
! Print report heading
!-----------------------------------------------------------------------
begin-heading 3
  #Include 'stdhdg01.sqc'
end-heading

!-----------------------------------------------------------------------
! Initialise report
!-----------------------------------------------------------------------
begin-procedure Init-Report

  move 'ABS701'           to $ReportID
  move 'VACATION ACCRUAL' to $ReportTitle
  display $ReportID
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
     display 'Error - Must be run through Run Control Panel'
  else
     do Select-Parameters
  end-if

  if &ABSV_REVERSE_FLG = 'N'
    print 'Company:'                                  (+1,1)
    print $company                                    (0,26)
    print 'Benefit Plan:'                             (+1,1)
    print $benefit_plan                               (0,26)
    print 'Current Period End Date:'                  (+1,1)
    print $current_YMD                                (0,+1)
    print 'Future Period End Date:'                   (0,40)
    print $future_YMD                                 (0,+1)
    if $ABSV_HIREDT_IND='1'
       print 'Entitlements Based On ReHire Date'      (0,+4)
    else  
       print 'Entitlements Based On Hire Date'        (0,+4)
    end-if
    print 'Emplid'                                    (+2,1,11)
    print 'Employee Name'                             (0,13,18)
    if $ABSV_HIREDT_IND='1'
       print '(Re)Hire Date'                          (0,32,26)
    else
       print 'Hire Date'                              (0,32,26)
    end-if
    print 'Last Period'                               (0,59,30)
    print 'Current Period'                            (0,90,22)
    print 'Future Period'                             (0,113)
    print 'Entitlement'                               (+1,47,12)
    print 'Days Taken'                                (0,60,12)
    print 'Carried Fwd'                               (0,73,16)
    print 'Entitlement'                               (0,90,22)
    print 'Entitlement'                               (0,113)
  else
    print 'Company:'                                  (+1,1)
    print $company                                    (0,26)
    print 'Benefit Plan:'                             (+1,1)
    print $benefit_plan                               (0,26)
    print 'Current Period End Date:'                  (+1,1)
    print $current_YMD                                (0,+1)
    print 'Future Period End Date:'                   (0,40)
    print $future_YMD                                 (0,+1)
  end-if

end-procedure Init-Report

!-----------------------------------------------------------------------
! Main processing
!-----------------------------------------------------------------------
begin-procedure Process-Main

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfDate, $AsOf_YMD, {DEFYMD}, '', '')

  if &ABSV_REVERSE_FLG = 'N'
    !--------------------------
    ! Normal Accrual
    !--------------------------
    do Select-Plan-Details

    if &FP.ABSV_CURR_END_DT = &ABSV_CURR_END_DT or &FP.ABSV_FUTURE_END_DT = &ABSV_FUTURE_END_DT
       display 'The Process has already run for these dates'
       stop
    end-if
    do Setup-Service-Array
    do Data-Selection
    do Update-Leave-Pers
  else
    !--------------------------
    ! Reverse Accrual
    !--------------------------
    do Reverse-Accrual
  end-if

end-procedure Process-Main

!-----------------------------------------------------------------------
! ???
!-----------------------------------------------------------------------
begin-procedure Data-Selection

move 0 to #ee_count


begin-select

!******* Begin SQR NAME DISPLAY change********** 
!E.NAME 
E.NAME_DISPLAY
!******* End SQR NAME DISPLAY Change********** 
A.EMPLID
  let $emplid = RTRIM(&A.EMPLID, ' ')
  let #ee_count = #ee_count + 1
A.BIRTHDATE
    move '1' to $Year4
    move '-' to $DDelimiter
    do Format-DateTime(&A.BIRTHDATE, $Birth_YMD, {DEFYMD}, '', '')
B.EMPL_RCD
B.HIRE_DT
B.REHIRE_DT
C.DEPTID
C.JOBCODE
D.COVERAGE_ELECT_DT
D.DEDUCTION_END_DT

  move 'Y' to $HistReq
  move '1' to $Year4
  move '-' to $DDelimiter
  if $ABSV_HIREDT_IND='1' and not IsNULL (&B.REHIRE_DT)
     do Format-DateTime (&B.REHIRE_DT, $Hire_YMD, {DEFYMD}, '', '')
     if (&B.REHIRE_DT >= &FP.ABSV_CURR_END_DT and
         &B.REHIRE_DT <= &FP.ABSV_FUTURE_END_DT )
       let $HistReq = 'N'
     end-if
  else
    if not IsNULL (&B.HIRE_DT)
      do Format-DateTime (&B.HIRE_DT, $Hire_YMD, {DEFYMD}, '', '')
    end-if
  end-if

  if not IsNULL ($Hire_YMD)
    do Dtu-Diff-Months ($Hire_YMD, $current_YMD, #curr_serv_months)
    do Dtu-Diff-years ($Hire_YMD, $current_YMD, #curr_serv_years)
    do Dtu-Diff-Months ($Hire_YMD, $future_YMD, #fut_serv_months)    
    do Dtu-Diff-years ($Hire_YMD, $future_YMD, #fut_serv_years)    

    do Dtu-Diff-Months ($Birth_YMD, $current_YMD, #curr_age_months)    
    do Dtu-Diff-years ($Birth_YMD, $current_YMD, #curr_age_years)    
    do Dtu-Diff-Months ($Birth_YMD, $future_YMD, #fut_age_months)    
    do Dtu-Diff-years ($Birth_YMD, $future_YMD, #fut_age_years)    

    let #prnt_last_ent       = 0    
    let #prnt_last_taken     = 0    
    let #new_carryover       = 0    

    if not IsNULL(&FP.ABSV_CURR_END_DT) and
         $HistReq = 'Y'       
       do Process-History-Record    
    end-if


!If an old future record already exists then add carryover to entitlement
!Otherwise a new Current Record is be created. Create a current record if
!Coverage elect date is before Current Period End date and Deduction End
!Date is after Period End Date.

    if not isblank(&FP.ABSV_FUTURE_END_DT) and
         $HistReq = 'Y'
         do Get-Old-Accrual-Rec
    end-if
    if IsNULL(&L.ABSV_ACCRUAL_DT)

       ! Keep values for Service Bonus (R8)
       let #rate_serv_months = #curr_serv_months
       let #rate_serv_years  = #curr_serv_years

       if &F.ABSV_RATE_FLG = 'S'
          let #rate_months = #curr_serv_months
          let #rate_years  = #curr_serv_years
       else
          let #rate_months = #curr_age_months
          let #rate_years  = #curr_age_years
       end-if
       if not IsNULL(&D.DEDUCTION_END_DT)
          if &D.DEDUCTION_END_DT > &ABSV_CURR_END_DT and
             &D.COVERAGE_ELECT_DT <= &ABSV_CURR_END_DT
                do Calculate-Entitlement
                let #prnt_cur_ent = #current_entitlement
                do Create-Current-Record
          end-if
       else
          if &D.COVERAGE_ELECT_DT <= &ABSV_CURR_END_DT
              do Calculate-Entitlement
              let #prnt_cur_ent = #current_entitlement
              do Create-Current-Record
          end-if
       end-if
    else
       do Get-Old-Future-Record
       if &S.ABSV_DYS_EARN_YTD + #new_carryover > &F.ABSV_MAX_BALANCE
          let #new_carryover = &F.ABSV_MAX_BALANCE - &S.ABSV_DYS_EARN_YTD
       end-if
       do Update-Current-Record
    end-if

!Create future record

    ! Keep values for Service Bonus (R8)
    let #rate_serv_months = #fut_serv_months
    let #rate_serv_years  = #fut_serv_years

    if &F.ABSV_RATE_FLG = 'S'
       let #rate_months = #fut_serv_months
       let #rate_years  = #fut_serv_years
    else
       let #rate_months = #fut_age_months
       let #rate_years  = #fut_age_years
    end-if

    do Calculate-Entitlement

    if not IsNULL(&D.DEDUCTION_END_DT)
        if &D.DEDUCTION_END_DT > &ABSV_FUTURE_END_DT
           do Create-Future-Record
        end-if
    else
        do Create-Future-Record
    end-if

    do Print-Line

   end-if

from  PS_PERSON A,
      PS_PERSON_NAME E,
      PS_EMPLOYMENT B,
      PS_JOB C,
      PS_LEAVE_PLAN D

where C.HR_STATUS = 'A'                            !HP99999
  and C.COMPANY   = $company
  and A.EMPLID    = B.EMPLID
  and E.EMPLID    = B.EMPLID
  and B.EMPLID    = C.EMPLID
  and B.EMPL_RCD = C.EMPL_RCD
  and C.EFFDT =
      (select max(H.EFFDT)
       from PS_JOB H
       where H.EMPLID    = C.EMPLID
         and H.EMPL_RCD = C.EMPL_RCD
         and H.EFFDT    <= $AsofDate)
  and C.EFFSEQ =
      (select max(I.EFFSEQ)
       from PS_JOB I
       where I.EMPLID    = C.EMPLID
         and I.EMPL_RCD = C.EMPL_RCD
         and I.EFFDT     = C.EFFDT)
 and D.EMPLID    = A.EMPLID
 and D.EMPL_RCD = B.EMPL_RCD
 and D.EFFDT =
      (select MAX(J.EFFDT)
       from PS_LEAVE_PLAN J
       where J.EMPLID        = D.EMPLID
         and J.EMPL_RCD      = D.EMPL_RCD
         and J.PLAN_TYPE     = $plan_type
         and J.BENEFIT_PLAN  = $benefit_plan
         and J.EFFDT        <= $AsofDate)
 and D.PLAN_TYPE          = $plan_type
 and D.BENEFIT_PLAN       = $benefit_plan
 and D.COVERAGE_ELECT     = 'E'
 and D.COVERAGE_ELECT_DT <= $fut_dt
ORDER BY A.EMPLID

end-select

if #ee_count = 0
   print '*** No Employees selected ***' (+3,1)
end-if

end-procedure Data-Selection

!-----------------------------------------------------------------------
! Print line on report
!-----------------------------------------------------------------------
begin-procedure Print-Line

print $emplid                   (+1,1,11)
!******* Begin SQR NAME DISPLAY change********** 
!print &E.NAME                   (0,13,17)
print &E.NAME_DISPLAY          (0,13,17)
!******* End SQR NAME DISPLAY Change*************



if $ABSV_HIREDT_IND='1' and not IsNULL (&B.REHIRE_DT)
    do Format-DateTime(&B.REHire_Dt, $out, {DEFDATE}, '', '')
else
    do Format-DateTime(&B.Hire_Dt, $out, {DEFDATE}, '', '')
end-if

print $out                      (0,32)

do Format-Number(#prnt_last_ent, $out, '999.999')
print $out                      (0,49)

do Format-Number(#prnt_last_taken, $out, '999.999')
print $out                      (0,62)

do Format-Number(#new_carryover, $out, '999.999')
print $out                      (0,76)

do Format-Number(#prnt_cur_ent, $out, '999.999')
print $out                      (0,92)

do Format-Number(#current_entitlement, $out, '999.999')
print $out                      (0,115)

end-procedure Print-Line

!-----------------------------------------------------------------------
! Get the run control parameters
!-----------------------------------------------------------------------
begin-procedure Select-Parameters

begin-select
OPRID
RUN_CNTL_ID
COMPANY
  let $company = RTRIM(&COMPANY, ' ')
PLAN_TYPE
  let $plan_type = RTRIM(&PLAN_TYPE, ' ')
BENEFIT_PLAN
  let $benefit_plan = RTRIM(&BENEFIT_PLAN, ' ')
ABSV_CURR_END_DT
  let $Cur_dt = &ABSV_CURR_END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($cur_dt, $current_YMD, {DEFYMD}, '', '')
  move &ABSV_CURR_END_DT to $asofdate
ABSV_FUTURE_END_DT
  let $fut_dt = &ABSV_FUTURE_END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($fut_dt, $future_YMD, {DEFYMD}, '', '')
ABSV_REVERSE_FLG
ABSV_HIREDT_IND
  let $ABSV_HIREDT_IND = &ABSV_HIREDT_IND

from  PS_ABSV_RUNCTL
where PS_ABSV_RUNCTL.OPRID       = $prcs_oprid
  and PS_ABSV_RUNCTL.RUN_CNTL_ID = $prcs_run_cntl_id

end-select

end-procedure Select-Parameters

!-----------------------------------------------------------------------
! Create and populate LEAVE_RATES and LEAVE_BONUS arrays
!-----------------------------------------------------------------------
begin-procedure Setup-Service-Array

CREATE-ARRAY NAME=LEAVE_RATES SIZE=100
   FIELD=    ABSV_SERVICE_INT:number
   FIELD=    ABSV_DAYS_EARNED:number
let #row = 0

begin-select
K.ABSV_SERVICE_INT
K.ABSV_DAYS_EARNED

   if  &F.ABSV_ACCRUAL_FREQ = 'Y'
       let #absv_service_int = 12 * &K.ABSV_SERVICE_INT
   Else
       let #absv_service_int = &K.ABSV_SERVICE_INT
   end-if
   PUT #absv_service_int &K.ABSV_DAYS_EARNED
       INTO LEAVE_RATES(#ROW)
   let #row = #row + 1

from PS_ABSV_RATE_TBL K
where K.PLAN_TYPE    = $plan_type
  and K.BENEFIT_PLAN = $benefit_plan
order by K.ABSV_SERVICE_INT DESC
end-select

CREATE-ARRAY NAME=LEAVE_BONUS SIZE=100
   FIELD=    ABSV_SERVICE_INT:number
   FIELD=    ABSV_BONUS_DAYS:number
let #row = 0

begin-select
L.ABSV_BONUS_DAYS
L.ABSV_SERVICE_INT
   PUT &L.ABSV_SERVICE_INT &L.ABSV_BONUS_DAYS
       INTO LEAVE_BONUS(#ROW)
   let #row = #row + 1
from PS_ABSV_ADDL_TBL L
where L.PLAN_TYPE    = $plan_type
  and L.BENEFIT_PLAN = $benefit_plan
order by L.ABSV_SERVICE_INT DESC        ! R8
end-select

end-procedure Setup-Service-Array

!-----------------------------------------------------------------------
! First calculate entitlement based on Service Rates and then check
! for Bonus days.
!
! Array is ordered into descending service_intervals order so
! the first interval encountered which is < service months is the
! interval to select for service rate.
!-----------------------------------------------------------------------
begin-procedure Calculate-Entitlement

let #count = 0
while #count < 100
get #absv_service_int #absv_days_earned from leave_rates(#count)
if #absv_service_int <= #rate_months
   let #current_entitlement = #absv_days_earned
   break
end-if
let #count = #count + 1
end-while

! Search for any Bonus entitlement which is based on years/months of Service

if  &F.ABSV_ACCRUAL_FREQ = 'Y'
    let #rate_period = #rate_serv_years      ! R8
else
    let #rate_period = #rate_serv_months     ! R8
end-if

let #count = 0
while #count < 100
get #absv_service_int #absv_bonus_days from leave_bonus(#count)
if #absv_service_int <= #rate_period         ! R8
   let #current_entitlement = #current_entitlement + #absv_bonus_days
   BREAK
end-if
let #count = #count + 1
end-while

! Pro-Rate entitlement for first period
if  &F.ABSV_ACCRUAL_FREQ = 'Y'
    if #rate_months < 12
       let #current_entitlement = #current_entitlement * #rate_months /12
       ! round UP to nearest whole day.
       let #decimals = #current_entitlement - trunc(#current_entitlement,0)
       if #decimals <> 0
         let #current_entitlement = trunc(#current_entitlement,0) + 1
       end-if
    end-if
Else
    if #rate_months < 1
       do Dtu-Diff-Days($Hire_YMD, $current_YMD, #curr_serv_days)
       let #current_entitlement = #current_entitlement * #curr_serv_days /30
       ! round UP to nearest whole day.
       let #decimals = #current_entitlement - trunc(#current_entitlement,0)
       if #decimals <> 0
         let #current_entitlement = trunc(#current_entitlement,0) + 1
       end-if
    end-if
end-if

! Ensure maximum leave balance is not exceeded
if #current_entitlement > &F.ABSV_MAX_BALANCE
   let #current_entitlement = &F.ABSV_MAX_BALANCE
end-if

end-procedure Calculate-Entitlement

!-----------------------------------------------------------------------
! Get details of the Vacation Plan
!-----------------------------------------------------------------------
begin-procedure Select-Plan-Details

begin-select
F.ABSV_MAX_BALANCE
F.ABSV_MAX_CARRYOVER
F.ABSV_ACCRUAL_FREQ
F.ABSV_RATE_FLG
from PS_ABSV_PLAN_TBL F
where F.PLAN_TYPE    = $plan_type
  and F.BENEFIT_PLAN = $benefit_plan
end-select

begin-select
FP.ABSV_CURR_END_DT
FP.ABSV_FUTURE_END_DT
from PS_ABSV_PERIOD FP
where FP.COMPANY      = $company
  and FP.PLAN_TYPE    = $plan_type
  and FP.BENEFIT_PLAN = $benefit_plan
end-select

end-procedure Select-Plan-Details

!-----------------------------------------------------------------------
! Process History Record
!-----------------------------------------------------------------------
begin-procedure Process-History-Record

begin-select
ABSV_DYS_CARRYOVER
ABSV_DYS_EARN_YTD
ABSV_DYS_TAKE_YTD
  let #prnt_last_ent   = &ABSV_DYS_EARN_YTD + &ABSV_DYS_CARRYOVER
  let #prnt_last_taken = &ABSV_DYS_TAKE_YTD
  let #new_carryover = &ABSV_DYS_EARN_YTD + &ABSV_DYS_CARRYOVER - &ABSV_DYS_TAKE_YTD
  if #new_carryover > &F.ABSV_MAX_CARRYOVER
     let #new_carryover = &F.ABSV_MAX_CARRYOVER
  end-if
from PS_ABSV_ACCRUAL G
where G.EMPLID          = $emplid
  and G.EMPL_RCD       = &B.EMPL_RCD
  and G.ABSV_ACCRUAL_DT = &FP.ABSV_CURR_END_DT
end-select

end-procedure Process_History_Record

!-----------------------------------------------------------------------
! Create Current Record
!-----------------------------------------------------------------------
begin-procedure Create-Current-Record

begin-SQL On-Error=SQL-Error
insert into PS_ABSV_ACCRUAL
(EMPLID,
 EMPL_RCD,
 COMPANY,
 PLAN_TYPE,
 ABSV_ACCRUAL_DT,
 ABSV_DYS_CARRYOVER,
 ABSV_DYS_EARN_YTD,
 ABSV_DYS_TAKE_YTD,
 BENEFIT_PLAN)
 values
($emplid,
 &B.EMPL_RCD,
 $company,
 $plan_type,
 &ABSV_CURR_END_DT,
 0,
 #current_entitlement,
 0,
 $benefit_plan)
end-SQL

end-procedure Create-Current-Record

!-----------------------------------------------------------------------
! Update Current Record
!-----------------------------------------------------------------------
begin-procedure Update-Current-Record

! This will prob need to be modified to check new days_earned_ytd not >
! maximum__leave_bal
begin-SQL On-Error=SQL-Error
update PS_ABSV_ACCRUAL
set ABSV_DYS_CARRYOVER = #new_carryover
where EMPLID          = $emplid
  and EMPL_RCD       = &B.EMPL_RCD
  and COMPANY         = $company
  and PLAN_TYPE       = $plan_type
  and ABSV_ACCRUAL_DT = &ABSV_CURR_END_DT
end-SQL

end-procedure Update-Current-Record

!-----------------------------------------------------------------------
! Create Future Record
!-----------------------------------------------------------------------
begin-procedure Create-Future-Record

Begin-SQL On-Error=SQL-Error
insert into PS_ABSV_ACCRUAL
(EMPLID,
 EMPL_RCD,
 COMPANY,
 PLAN_TYPE,
 ABSV_ACCRUAL_DT,
 ABSV_DYS_CARRYOVER,
 ABSV_DYS_EARN_YTD,
 ABSV_DYS_TAKE_YTD,
 BENEFIT_PLAN)
 values
($emplid,
 &B.EMPL_RCD,
 $company,
 $plan_type,
 &ABSV_FUTURE_END_DT,
 0,
 #current_entitlement,
 0,
 $benefit_plan)
end-SQL

end-procedure Create-Future-Record

!-----------------------------------------------------------------------
! Update Vacation Period table
!-----------------------------------------------------------------------
begin-procedure Update-Leave-Pers

! Insert Record if this is the 1st time for this comp/plan
if IsNULL(&FP.ABSV_FUTURE_END_DT)

begin-SQL On-Error=SQL-Error
insert into PS_ABSV_PERIOD
(COMPANY,
PLAN_TYPE,
BENEFIT_PLAN,
ABSV_CURR_END_DT,
ABSV_FUTURE_END_DT)
values
($company,
$plan_type,
$benefit_plan,
&ABSV_CURR_END_DT,
&ABSV_FUTURE_END_DT)
end-SQL

else

begin-SQL On-Error=SQL-Error
update PS_ABSV_PERIOD
 set ABSV_CURR_END_DT   = &ABSV_CURR_END_DT,
     ABSV_FUTURE_END_DT = &ABSV_FUTURE_END_DT
where COMPANY       = $company
  and PLAN_TYPE     = $plan_type
  and BENEFIT_PLAN  = $benefit_plan
end-SQL

end-if

end-procedure Update-Leave-Pers

!-----------------------------------------------------------------------
! Get old future record
!-----------------------------------------------------------------------
begin-procedure Get-Old-Future-Record

begin-select
S.ABSV_DYS_EARN_YTD
  let #prnt_cur_ent = &S.ABSV_DYS_EARN_YTD
from PS_ABSV_ACCRUAL S
where S.EMPLID          = $emplid
  and S.EMPL_RCD       = &B.EMPL_RCD
  and S.ABSV_ACCRUAL_DT = &FP.ABSV_FUTURE_END_DT
end-select

end-procedure Get-Old-Future-Record

!-----------------------------------------------------------------------
! Get old accrual record
!-----------------------------------------------------------------------
begin-procedure Get-Old-Accrual-Rec

begin-select
L.ABSV_ACCRUAL_DT
from PS_ABSV_ACCRUAL L
where L.EMPLID          = $emplid
  and L.EMPL_RCD       = &B.EMPL_RCD
  and L.COMPANY         = $company
  and L.PLAN_TYPE       = $plan_type
  and L.ABSV_ACCRUAL_DT = &FP.ABSV_FUTURE_END_DT
end-select

end-procedure Get-Old-Accrual-Rec

!***********************************************************************
! The following procedures all relate to Reverse Vacation Accrual
! processing.
!***********************************************************************

!-----------------------------------------------------------------------
! Main processing for Reverse Accrual
!-----------------------------------------------------------------------
begin-procedure Reverse-Accrual

  move '*** REVERSE ACCRUAL ***' to $output_text
  display $output_text
  print $output_text (+2,1)

  Do Get-Period-End-Date

  if $future_end_dt_DMY <> ''

    let $xb_emplid = ''
    do Check-For-Requests
    if $xb_emplid = ''
      do Delete-Accruals
      display &rows_deleted  noline
      display ' Records Deleted'
      do Update-Periods
    else
      display 'Program Stopped - Vacation Requests Already Exist'
      print 'Program Stopped as Vacation Requests Exist'   (+2,5)
      print 'for the employees listed above. These must'   (+1,5)
      print 'be deleted before the period can be deleted'  (+1,5)
    end-if

  end-if

end-procedure Reverse-Accrual

!-----------------------------------------------------------------------
! Get period end date
!-----------------------------------------------------------------------
begin-procedure Get-Period-End-Date

begin-select
XA.ABSV_FUTURE_END_DT
  let $future_end_dt_N = &XA.ABSV_FUTURE_END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($future_end_dt_N , $future_end_dt_DMY, {DEFDMY}, '', '')
XA.ABSV_CURR_END_DT
  let $current_end_dt_N = &XA.ABSV_CURR_END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($current_end_dt_N , $current_end_dt_DMY, {DEFDMY}, '', '')
from PS_ABSV_PERIOD XA
where XA.COMPANY      = $company
  and XA.BENEFIT_PLAN = $benefit_plan
end-select

end-procedure Get-Period-End-Date

!-----------------------------------------------------------------------
! Check if any Vacation Requests exist
!-----------------------------------------------------------------------
begin-procedure Check-For-Requests

begin-select
XB.EMPLID        (+1,5)
  let $xb_emplid = RTRIM(&XB.EMPLID, ' ')
from PS_ABSV_REQUEST XB,
     PS_ABSV_ACCRUAL XC
where XB.EMPLID          = XC.EMPLID
  and XB.EMPL_RCD       = XC.EMPL_RCD
  and XB.COMPANY         = XC.COMPANY
  and XB.PLAN_TYPE       = XC.PLAN_TYPE
  and XB.ABSV_ACCRUAL_DT = XC.ABSV_ACCRUAL_DT
  and XB.COMPANY         = $company
  and XC.BENEFIT_PLAN    = $benefit_plan
  and XB.ABSV_ACCRUAL_DT = $future_end_dt_N
group by XB.EMPLID
end-select

end-procedure Check-For-Requests

!-----------------------------------------------------------------------
! Delete accrual records
!-----------------------------------------------------------------------
begin-procedure Delete-Accruals

begin-select
count(*) &rows_deleted
from PS_ABSV_ACCRUAL
where COMPANY         = $company
  and BENEFIT_PLAN    = $benefit_plan
  and ABSV_ACCRUAL_DT = $future_end_dt_N
end-select

begin-SQL ON-ERROR=SQL-ERROR
delete from PS_ABSV_ACCRUAL
where COMPANY         = $company
  and BENEFIT_PLAN    = $benefit_plan
  and ABSV_ACCRUAL_DT = $future_end_dt_N
end-SQL

end-procedure Delete-Accruals

!-----------------------------------------------------------------------
! Update vacation period
!-----------------------------------------------------------------------
begin-procedure Update-Periods

begin-select
max(ABSV_ACCRUAL_DT) &NEW_CURRENT_DT
  let $new_current_dt_N = &NEW_CURRENT_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($new_current_dt_N , $new_current_dt_DMY , {DEFDMY}, '', '')
from PS_ABSV_ACCRUAL
where COMPANY         = $company
  and BENEFIT_PLAN    = $benefit_plan
  and ABSV_ACCRUAL_DT < $current_end_dt_N
end-select

if $current_end_dt_DMY <> ''
  do Upd-Absv-Period
else
  do Del-Absv-Period
end-if

end-procedure Update-Periods

!-----------------------------------------------------------------------
! Update vacation period 1 (SQL update)
!-----------------------------------------------------------------------
begin-procedure Upd-Absv-Period
begin-SQL ON-ERROR=SQL-ERROR
update PS_ABSV_PERIOD
set ABSV_FUTURE_END_DT = $current_end_dt_N,
    ABSV_CURR_END_DT   = $new_current_dt_N
where COMPANY      = $company
  and BENEFIT_PLAN = $benefit_plan
end-SQL
end-procedure Upd-Absv-Period

!-----------------------------------------------------------------------
! Update vacation period 2 (SQL delete)
!-----------------------------------------------------------------------
begin-procedure Del-Absv-Period
begin-SQL ON-ERROR=SQL-ERROR
delete from PS_ABSV_PERIOD
where COMPANY      = $company
  and BENEFIT_PLAN = $benefit_plan
end-SQL
end-procedure Del-Absv-Period

!-----------------------------------------------------------------------
! Include files
!-----------------------------------------------------------------------
#Include 'datemath.sqc'  ! Routines for date arithmetic
#Include 'reset.sqc'     ! Reset printer procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Routines to Update Run Status
