!******************************************
!  TAX004ST:   State Employee Count Report *
!******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:06:10:03                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#Include 'setup31.sqc'  !Printer and page-size initialization
#Include 'usarpt.sqc'   !Get USA variables

!***********************************************************************
begin-report
!***********************************************************************


    move 'TAX004ST'                   to $ReportId
    move 'State Employee Count Report' to $ReportTitle

    let $msg = $ReportTitle
    do  Display-Msg

    do Init-DateTime
    do Init-Number
    do Get-Current-DateTime
    do Stdapi-Init

    do Get-Quarter-Dates
    do Show-Period-Covered

    do Delete-Temp-Table

    do Get-Worksite-Counts

    do Get-Emplid

    do Delete-Temp-Table

    do Stdapi-Term

end-report

!***********************************************************************
begin-heading 8
!***********************************************************************

#Include 'stdhdg02.sqc'

    uppercase $ReportTitle2

    let $w = 'Quarter '||$EffQuarter||', '||$EffYear
    print $w                                (4,1)

    print '  Total Females / Males in Pay Period'     (0,45)

    print 'For State of: '                  (+1,1)
    print $State                            (0,16)
    print $Month1_Name                      (0,50)
    print $Month2_Name                      (0,72)
    print $Month3_Name                      (0,94)

    print '               '                 (+1,8)
    print 'Female'                          (0,45)
    print 'Male'                            (0,56)
    print 'Female'                          (0,67)
    print 'Male'                            (0,78)
    print 'Female'                          (0,89)
    print 'Male'                            (0,100)


    print '               '                 (+1,8)
    print '-------'                         (0,45)
    print '-------'                         (0,56)
    print '-------'                         (0,67)
    print '-------'                         (0,78)
    print '-------'                         (0,89)
    print '-------'                         (0,100)

end-heading

!***********************************************************************
begin-procedure Get-Quarter-Dates
!***********************************************************************

    if $Prcs_Process_Instance = ''
        input $EffYear     maxlen=4 'Enter Year (1996,1997,etc)'
        input $EffQuarter  maxlen=1 'Enter Quarter (1,2,3,4)'
        input $State       maxlen=2 'Enter State (CT, ME, NJ, OR, VT)'
    else
        do Select-Parameters
        move #RC_Pay.Balance_Year   to $EffYear 9999
        move $RC_Pay.Balance_Qtr    to $EffQuarter 9
        move $RC_Pay.State          to $State
    end-if

    let #EffYear = to_number($EffYear)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            break
        when = '4'
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
            break
        when-other
!           ERROR
            move    ' Eff Quarter Error '  to $Error_Msg
            do Error-Routine
            STOP

    end-evaluate

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')


end-procedure

!***********************************************************************
begin-procedure Show-Period-Covered
!***********************************************************************

    do Format-DateTime($First_Day_Of_Quarter, $w1, {DEFDATE}, '', '')
    do Format-DateTime($Last_Day_Of_Quarter, $w2, {DEFDATE}, '', '')
    let $msg = 'Report covers period  '||$w1||' thru '||$w2
    do  Display-Msg

end-procedure

!***********************************************************************
begin-procedure Get-Worksite-Counts
!***********************************************************************
begin-SELECT
E.COMPANY
P.EMPLID () on-break print=never level=2 after=Insert-Emplid
E.EARNS_BEGIN_DT
E.EARNS_END_DT
P.SEX
E.PAY_LINE_STATUS
T1.PAYGROUP
T1.OFF_CYCLE
T1.PAGE_NUM
T1.LINE_NUM
T1.SEPCHK
T1.STATE
T1.NLGRS_CUR

SUM(T1.NLGRS_CUR)
COUNT(DISTINCT P.EMPLID) &WORKERS

    move &E.COMPANY         to $Company
    move &P.EMPLID         to $Emplid
    do Format-DateTime(&E.EARNS_BEGIN_DT, $EarnsBeginDt, {DEFCMP},'','')
    do Format-DateTime(&E.EARNS_END_DT, $EarnsEndDt, {DEFCMP},'','')

    if &P.Sex = 'F'
        if $EarnsBeginDt       <= $12thOfMonth1 and
           $EarnsEndDt         >= $12thOfMonth1
           move   1       to #F_Workers_Month1
        end-if
        if $EarnsBeginDt       <= $12thOfMonth2 and
           $EarnsEndDt         >= $12thOfMonth2
           move   1       to #F_Workers_Month2
        end-if
        if $EarnsBeginDt       <= $12thOfMonth3 and
           $EarnsEndDt         >= $12thOfMonth3
           move   1       to #F_Workers_Month3
        end-if
    else
        if $EarnsBeginDt       <= $12thOfMonth1 and
           $EarnsEndDt         >= $12thOfMonth1
           move   1       to #M_Workers_Month1
        end-if
        if $EarnsBeginDt       <= $12thOfMonth2 and
           $EarnsEndDt         >= $12thOfMonth2
           move   1       to #M_Workers_Month2
        end-if
        if $EarnsBeginDt       <= $12thOfMonth3 and
           $EarnsEndDt         >= $12thOfMonth3
           move   1       to #M_Workers_Month3
        end-if
    end-if

FROM    PS_PERSONAL_DT_FST     P,
        PS_PAY_EARNINGS      E,
        PS_PAY_TAX          T1

WHERE   (($12TH_OF_1ST_MONTH BETWEEN E.EARNS_BEGIN_DT
                                 AND E.EARNS_END_DT) OR
        ($12TH_OF_2ND_MONTH BETWEEN E.EARNS_BEGIN_DT
                                 AND E.EARNS_END_DT) OR
        ($12TH_OF_3RD_MONTH BETWEEN E.EARNS_BEGIN_DT
                                 AND E.EARNS_END_DT))
AND     E.PAY_LINE_STATUS  IN ('F','A','R')
AND     T1.COMPANY          = E.COMPANY
AND     T1.PAYGROUP         = E.PAYGROUP
AND     T1.PAY_END_DT       = E.PAY_END_DT
AND     T1.OFF_CYCLE        = E.OFF_CYCLE
AND     T1.PAGE_NUM            = E.PAGE_NUM
AND     T1.LINE_NUM            = E.LINE_NUM
AND     T1.SEPCHK           = E.SEPCHK
#ifdef TAXTEST
  AND  T1.STATE         = 'CA'
#else
  AND  T1.STATE         = $State
#endif
AND     T1.TAX_CLASS        = 'U'

AND     E.EMPLID            = P.EMPLID

GROUP BY    E.COMPANY,
            P.EMPLID,
            E.EARNS_BEGIN_DT,
            E.EARNS_END_DT,
            P.SEX,
            E.PAY_LINE_STATUS,
            T1.PAYGROUP,
            T1.OFF_CYCLE,
            T1.PAGE_NUM,
            T1.LINE_NUM,
            T1.SEPCHK,
            T1.STATE,
            T1.NLGRS_CUR
ORDER BY    E.COMPANY,
            P.EMPLID,
            E.EARNS_BEGIN_DT,
            E.EARNS_END_DT,
            P.SEX,
            E.PAY_LINE_STATUS,
            T1.PAYGROUP,
            T1.OFF_CYCLE,
            T1.PAGE_NUM,
            T1.LINE_NUM,
            T1.SEPCHK,
            T1.STATE,
            T1.NLGRS_CUR
!HAVING SUM(T1.NLGRS_CUR) > 0

end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Emplid
!***********************************************************************

begin-SELECT
W1.COMPANY  () on-break print=never level=1 before=Before-Company

SUM(W1.F_WORKERS_MONTH1)    &CoTotalF_MO1
SUM(W1.F_WORKERS_MONTH2)    &CoTotalF_MO2
SUM(W1.F_WORKERS_MONTH3)    &CoTotalF_MO3
SUM(W1.M_WORKERS_MONTH1)    &CoTotalM_MO1
SUM(W1.M_WORKERS_MONTH2)    &CoTotalM_MO2
SUM(W1.M_WORKERS_MONTH3)    &CoTotalM_MO3
  do After-Company
FROM PS_R_TAX004ST  W1
GROUP BY    W1.COMPANY
ORDER BY    W1.COMPANY
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Insert-Emplid
!***********************************************************************

begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_TAX004ST (COMPANY,
                             EMPLID,
                             F_WORKERS_MONTH1,
                             F_WORKERS_MONTH2,
                             F_WORKERS_MONTH3,
                             M_WORKERS_MONTH1,
                             M_WORKERS_MONTH2,
                             M_WORKERS_MONTH3)
                            VALUES ($Company,
                                    $EmplID,
                                    #F_Workers_Month1,
                                    #F_Workers_Month2,
                                    #F_Workers_Month3,
                                    #M_Workers_Month1,
                                    #M_Workers_Month2,
                                    #M_Workers_Month3)
end-SQL
  let #F_Workers_Month1 = 0
  let #F_Workers_Month2 = 0
  let #F_Workers_Month3 = 0
  let #M_Workers_Month1 = 0
  let #M_Workers_Month2 = 0
  let #M_Workers_Month3 = 0
end-procedure

!***********************************************************************
begin-procedure Before-Company
!***********************************************************************
  move &W1.Company to $Company
end-procedure

!***********************************************************************
begin-procedure After-Company
!***********************************************************************
  do Format-Number(&CoTotalF_MO1, $CoTotalF_MO1, '999,999')
  do Format-Number(&CoTotalF_MO2, $CoTotalF_MO2, '999,999')
  do Format-Number(&CoTotalF_MO3, $CoTotalF_MO3, '999,999')
  do Format-Number(&CoTotalM_MO1, $CoTotalM_MO1, '999,999')
  do Format-Number(&CoTotalM_MO2, $CoTotalM_MO2, '999,999')
  do Format-Number(&CoTotalM_MO3, $CoTotalM_MO3, '999,999')

  print $CoTotalF_MO1         (0,45)
  print $CoTotalM_MO1         (0,56)
  print $CoTotalF_MO2         (0,67)
  print $CoTotalM_MO2         (0,78)
  print $CoTotalF_MO3         (0,89)
  print $CoTotalM_MO3         (0,100)

  new-page

end-procedure
!***********************************************************************
begin-procedure Delete-Temp-Table
!***********************************************************************
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX004ST
end-SQL
end-procedure

!***********************************************************************
begin-procedure Insert-Error
!***********************************************************************
  display 'Error on insert of employee emplid ' noline
  display $EMPLID
  display 'Possible duplicate EMPLID'
end-procedure

!***********************************************************************
begin-procedure Ignore
!***********************************************************************

!   dummy procedure to avoid SQL error message

end-procedure

!***********************************************************************
begin-procedure Error-Routine
!***********************************************************************

    let $msg = $Error_Msg
    do  Display-Msg
    STOP

end-procedure

!***********************************************************************
begin-procedure Display-Msg
!***********************************************************************

    let $w = $ReportId||' - '||$msg
    display ' '
    display $w

end-procedure

!***********************************************************************
begin-procedure Select-Parameters
!***********************************************************************

begin-select

RC_PAY.RUN_ID
RC_PAY.BALANCE_YEAR
RC_PAY.BALANCE_QTR
RC_PAY.EE_CNT_STATE

FROM  PS_RC_PAY RC_PAY
WHERE RC_PAY.OPRID          = $Prcs_OprID
AND   RC_PAY.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

  let  $RC_PAY.Run_ID           = RTRIM(&RC_PAY.Run_ID, ' ')
  let  #RC_PAY.Balance_Year     = &RC_PAY.Balance_Year
  let  $RC_PAY.Balance_Qtr      = &RC_PAY.Balance_Qtr
  let  $RC_PAY.State            = &RC_PAY.EE_CNT_STATE
end-procedure
!***********************************************************************

#Include 'getlocnm.sqc'     !Get-Location-Name procedure
#Include 'getstdta.sqc'     !Get-State-Tax-Data procedure
#Include 'getcodta.sqc'     !Get-Company-Data procedure
#Include 'reset.sqc'        !Reset printer procedure
#Include 'curdttim.sqc'     !Get-Current-DateTime procedure
#Include 'datetime.sqc'     !Routines for date and time formatting
#Include 'number.sqc'       !Routines to format numbers
#Include 'stdapi.sqc'       !Update Process API
