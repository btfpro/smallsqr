!***********************************************************************
!  CTX910TP:   PRINT  T4 Supplementary from Tax Extract Table          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/03/01:16:57:31                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  698735                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup07.sqc'
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure

begin-setup

declare-layout  default
paper-size      =(150,150)
formfeed        =no
orientation     =portrait
top-margin      =0.0
left-margin     =0.01
line-height     =12pt
char-width      =7.2pt
end-declare

#ifdef TAXTEST
#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-LP
  init-string   =<27>E<27>(10U<27>&l0O<27>&l6D<27>&l0E<27>&l80F<27>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#else
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif
#else
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif

#endif


#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-LP
  init-string   =<27>E<27>&l0L
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#else
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>&l0L
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif
#else
  declare-printer DEFAULT-LP
  init-string   =<39>E<39>&l0L
  end-declare
  declare-printer DEFAULT-HP
  end-declare
#endif

  declare-procedure
    before-report = Init-Page-Size
  end-declare

end-setup


!***********************************************************************
begin-procedure Init-Page-Size
!***********************************************************************
! This sends a 'Perforation Skip' command to disable any bottom
! margin and obtain the maximum PCL page.  This is required in
! the printing of the T4 laser form.

  #ifndef MVS
  #ifndef OS400
    encode '<27>&l0L<27>&l3E' into $perforation_skip
  #else
    encode '<39>&l0L<39>&l3E' into $perforation_skip
  #endif
  #else
    encode '<39>&l0L<39>&l3E' into $perforation_skip
  #endif

    print $perforation_skip () code

end-procedure


begin-report

  do Init-Report

  do Process-Main

  if $XMLPublisher = 'Y'
     do Capture-OS
     do Insert-YE-Runcontrol
  end-if

  if $SelectEEs = 'R'
    close 1
    close 2
  end-if

!**** XML Publisher
  if $XMLPublisher = 'Y'
      do XML-Close-Tag('CAN_YearEnd', $closeTag)
      do Write-XML-Line(#Fnum2, $closeTag)
      do Close-XML-File(#FNum2)

      if $RC_CAN_YE.T4_Copy_Type = '2' and #FNum <> 0
         do Write-XML-Line(#Fnum, $closeTag)
         do Close-XML-File(#FNum)
      end-if
  end-if

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report


begin-procedure Init-Report

  display 'PRINT T4 SLIP'
  do Init-DateTime
  do Init-Number
 #ifdef PRCSSCHD
   do StdAPI-Init
 #endif

  do Get-Calendar-Year-Id
  do Initialization

    use-printer-type HPLASERJET
    do Declare-Printer-T4
    let #StubPtr = 0
    do Set-T4-Row-Pointers

end-procedure


begin-procedure Initialization

  let $PriorReportID = ' '
  move 'Y' to $T4_Assigned

  move 'Y' to $FirstRecord
  do Get-Current-DateTime

  display 'Today is ' noline
  display $AsOfToday

  move '1' to $MMLZero
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfToday, $AsOfDateYMD, {DEFYMD},'','')
  move $AsOfDateYMD to $AsOfYear xxxx

  move #AsOfYear  to #saveAsOfYear
  move $AsOfYear  to #AsOfYear
  subtract 1 from #AsOfYear

  do Get-Can-Tax-Processing-Params

  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  display 'As of Date is ' noline
  display $AsOfDate

  move &TX.Balance_Year to #TaxYear

  if &TX.Balance_Year <> #AsOfYear  and $Prcs_Process_Instance = ''

    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  $AsOfYear
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Current Year is not one greater than Tax Reporting Year. Do you want to continue? (Y/N)'
    uppercase $Answer

    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Array-Create

  do Initialize-OtherInfo-Array

  if $PRCS_Process_Instance = ''
     do Prompts
  else
#ifdef PRCSSCHD
           do Select-Canadian-YrEnd-Parameters
           do Convert-Parameters
#endif
  end-if

  if $SelectEEs = 'R'
    open '{IMPORTPREFIX}CTX910T1{IMPORTSUFFIX}' as 1 for-writing record=173:fixed
    open '{IMPORTPREFIX}CTX910T2{IMPORTSUFFIX}' as 2 for-writing record=192:fixed
  end-if

  move $RC_CAN_YE.T4_Final_Print to $Slip_Final_Print

!**** XML Publisher
  if $XMLPublisher = 'Y'
  
     do Get-XMLP-Definitions

     do Format-DateTime($AsOfToday, $out, {DEFYMD},'','')
     do Format-DateTime($out, $IssueDate, {DEFYMD},'','native')

     move 0 to #BatchSize
     move 1 to #BatchId
     let $BurstValueSave = ''
     
     let #FNum  = 0
     let #FStat = 0     

     do Clear-Guide-Temp
     
     let $FName2 = 'CTXT4XM1.xml'
     let $sourceFile2     = $FName2 || '{IMPORTSUFFIX}'
     let $sourceLocation2 = '{IMPORTPREFIX}' || ''
     let $sourceFileName2 = rtrim($sourceLocation2,' ') || rtrim($sourceFile2,' ')
     let #FNum2  = 4
     let #FStat2 = 0
     do Open-XML-File($FName2, #FNum2, #FStat2)
     do XML-Open-Tag('CAN_YearEnd', $openTag2)
     do Write-XML-Line(#Fnum2, $openTag2)

  end-if

end-procedure

begin-procedure Prompts

  display ' '
  display ' '
  display ' '
  display 'Select the type of form to use for your T4 printing '
  display ' '

  while $FormType = ''
    input $FormType 'Enter L(Laser Form), or X(XML Publisher) or enter Q to quit'
    uppercase $FormType
    if INSTR('LXQ',$FormType, 1) = 0
      display ' '
      display '***** Enter L, or Q to quit *****'
      display ' '
      move '' to $FormType
    end-if
  end-while

  if $FormType = 'X'
      let $XMLPublisher = 'Y'
  else
      let $XMLPublisher = 'N'
  end-if

  if $FormType = 'Q'
     stop
  else
        display ' '
        display ' '
        display ' '
        display 'Select the T4 copy to print'
        display ' '

        while $CopyType = ''
    input $CopyType 'Enter 1(Govt Copy), or 2(Employee Copy), or 4(Company Copy), or enter Q to quit'
          uppercase $CopyType
          if INSTR('124Q',$CopyType, 1) = 0
             display ' '
             display '***** Enter 1, 2, 4, or Q to quit *****'
             display ' '
             move '' to $CopyType
          end-if
        end-while

        if $CopyType = 'Q'
           stop
        end-if
  end-if


  if $CopyType = '1'
     let $SortInd = '1'
  else

     display ' '
     display ' '
     display ' '
     display 'If this job will print forms to send to the Canadian '
     display 'government, enter 1 and the system will establish the '
     display 'correct sort sequence.'
     display ' '
     display 'If this job will print forms for another use (such as '
     display 'self-mailers, laser forms, employer copy, etc., you '
     display 'may select the sort sequence you prefer.  Enter 2 to '
     display 'see the sort options.  You will be shown three levels '
     display 'of sorting options, one level at a time.'
     display ' '

     while $SortInd = ''
       input $SortInd 'Enter 1(Standard Govt Sort Sequence), or 2(Other Sort Options), or enter Q to quit'
       uppercase $SortInd
       if INSTR('12Q',$SortInd, 1) = 0
         display ' '
         display '***** Enter 1, 2, or Q to quit *****'
         display ' '
         move '' to $SortInd
       end-if
     end-while

     if $SortInd = 'Q'
        stop
     end-if
  end-if

 if $SortInd = '1'
     let $SortSequence = 'SL.REPORTING_ID ASC, EE.COUNTRY ASC, ' ||
       'EE.SLIP_SURNAME ASC , EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

 else
  display ' '
  display ' '
  display ' '
  display 'Select the Primary Sort Sequence for your T4 slips.'
  display 'To sequence by Business number, enter 1.'
  display 'To sequence by company, enter 2.'
  display ' '

  while $SortInd1 = ''
    input $SortInd1 '1st Sort Field: 1(by Business No), or 2(by Company), or enter Q to quit'
    uppercase $SortInd1
    if INSTR('12Q',$SortInd1, 1) = 0
      display ' '
      display '***** Enter 1, 2, or Q to quit *****'
      display ' '
      move '' to $SortInd1
    end-if
  end-while

  if $SortInd1 = 'Q'
     stop
  end-if

  if $SortInd1 = '1'
     let $Sort1 = 'SL.REPORTING_ID ASC'
     let $DispSort1 = 'Business Number; '
  end-if

  if $SortInd1 = '2'
     let $Sort1 = 'SL.COMPANY ASC'
     let $DispSort1 = 'Company; '
  end-if

  display ' '
  display ' '
  display ' '
  display 'Within the previous sort, select the second sort sequence.'
  display '    To sort by Location Code           - enter 1'
  display '    To sort by Department Code         - enter 2'
  display '    To sort by Mail Drop               - enter 3'
  display '    To sort by Postal Code             - enter 4'
  display '    To sort by none of the above       - enter 5'
  display '    To quit                            - enter Q'
  display ' '

  while $SortInd2 = ''
    input $SortInd2 '2nd Sort Field : 1(by LocCode), 2(by DeptCode), 3(by MailDrop), 4(by PostCode),5(None), or Q to quit'
    uppercase $SortInd2
    if INSTR('12345Q',$SortInd2, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, 4, 5, or Q to quit *****'
      display ' '
      move '' to $SortInd2
    end-if
  end-while

  if $SortInd2 = 'Q'
     stop
  end-if

  if $SortInd2 = '1'
     let $Sort2 = 'EE.LOCATION ASC'
     let $DispSort2 = 'Location; '
  end-if

  if $SortInd2 = '2'
     let $Sort2 = 'EE.DEPTID ASC'
     let $DispSort2 = 'Department; '
  end-if

  if $SortInd2 = '3'
     let $Sort2 = 'EE.MAIL_DROP ASC'
     let $DispSort2 = 'Mail Drop; '
  end-if

  if $SortInd2 = '4'
     let $Sort2 = 'EE.POSTAL ASC'
     let $DispSort2 = 'Postal Code; '
  end-if

  if $SortInd2 = '5'
     let $Sort2 = 'N'
  end-if

  display ' '
  display ' '
  display ' '
  display 'Within the previous sorts, select the third sort sequence.'
  display '   To sort by Employee Name  - enter 1'
  display '   To sort by Employee ID    - enter 2'
  display '   To sort by Employee SIN   - enter 3'
  display '   To quit            - enter Q'
  display ' '

  while $SortInd3 = ''
    input $SortInd3 '3rd Sort Field: 1(by EmplName), 2(by EmplID), 3(by EmplSIN),or Q to quit'
    uppercase $SortInd3
    if INSTR('123Q',$SortInd3, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, or Q to quit *****'
      display ' '
      move '' to $SortInd3
    end-if
  end-while

  if $SortInd3 = 'Q'
     stop
  end-if

  if $SortInd3 = '1'
     let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
     let $DispSort3 = 'Employee Name; Employee ID'
  end-if

  if $SortInd3 = '2'
     let $Sort3 = 'EE.EMPLID ASC'
     let $DispSort3 = 'Employee ID'
  end-if

  if $SortInd3 = '3'
     let $Sort3 = 'EE.SIN ASC'
     let $DispSort3 = 'Employee SIN'
  end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if
 end-if

   if $SortInd = '2' and $SortInd1 = '1'
      move 'R' to $SortCode
   else
      if $SortInd = '2' and $SortInd1 = '2'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

   if $SortInd <> '1'
      display '  '
      display '  '
      display 'Your sort sequence is ' noline
      display $DisplaySeq
      display '  '
      display '  '
     display 'Is this sequence correct?'
     display 'If the sequence is correct, enter Y'

      while $Response = ''
        input $Response 'Enter Y to continue or enter Q to quit'
        uppercase $Response
        if INSTR('YQ',$Response, 1) = 0
          display ' '
          display '***** Enter Y or Q to quit *****'
          display ' '
          move '' to $Response
        end-if
      end-while

     if $Response = 'Q'
        stop
     end-if
   else
     display 'Standard Government sort selected.'
   end-if

  while $SelectEEs = ''
    display ''
    display 'Regular processing or Select employees?'
    input $SelectEEs 'Enter R or S'
    uppercase $SelectEEs
    if INSTR('RS',$SelectEEs,1) = 0
      display 'Enter R or S'
      move '' to $SelectEEs
    end-if
  end-while

  if $SelectEEs = 'S'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND EE.EMPLID in (''' to $E.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      if $SelectedEmplID <> ''
        uppercase $SelectedEmplID
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
  end-if

end-procedure

begin-procedure Array-Create

  create-array name=OtherInfo size=40   -
    field=OtherInfo_Box_Num:char        -
    field=OtherInfo_Box_Amt:number

end-procedure


begin-procedure  Process-Main

begin-SELECT
SL.REPORTING_ID
SL.COMPANY
SL.EMPLID
SL.CALENDAR_YEAR
SL.UI_EXEMPT
SL.WAGE_LOSS_PLAN
SL.PROVINCE
SL.SEQUENCE_NUMBER
SL.EMPLOYMENT_CODE
SL.YE_SLIP_PROCESS
EE.SIN
EE.EMPLID
EE.SLIP_SURNAME
EE.SLIP_FIRST_NAME
EE.SLIP_INITIAL
EE.ADDRESS1
EE.ADDRESS2
EE.CITY
EE.PROVINCE
EE.COUNTRY
EE.POSTAL
EE.CALENDAR_YEAR
EE.LOCATION
EE.DEPTID
EE.MAIL_DROP

 if $Proc_Amend_Cancel_New = 'Y'
   do Check-Status
 end-if

 if $StatusOpen = 'Y'

  if &SL.Company <> $PriorCompany and $FirstRecord = 'N'
    if #StubPtr <> 0
       do Insert-FormFeed
       new-page
       let #StubPtr = 0
       do Set-T4-Row-Pointers
    end-if
  end-if

  if $FirstRecord = 'N'
    if $SortInd = '1' or
       $SortInd1 = '1' or $SortInd1 = '2' or $SortInd1 = '3'

      if &SL.Reporting_ID <> $ReportingID

         if $SelectEEs = 'R'
           do Write-Summary-Record
         end-if
      end-if
      move 0 to #j
    end-if
  else
    move 'N' to $FirstRecord
  end-if

  let $UIExempt = ' '
  if $SelectEEs = 'R' or $SelectEEs = 'S'
      move &SL.UI_Exempt to $UIExempt
  end-if

  move ' ' to $CPPExempt
  move 0 to #SaveBox14
  move ' ' to $SaveBox14
  move 'N' to $Box24Found
  move 'N' to $Box26Found

  if $XMLPublisher = 'Y'
  
  ! create burst value for this slip
     let $BurstValue = rtrim(&EE.EMPLID, ' ') || $CalYear
     let $BurstValue = $BurstValue || rtrim(&SL.Company, ' ') || 'T4'
     let $BurstValue = $BurstValue || rtrim(&SL.PROVINCE, ' ')
     let $BurstValue = $BurstValue || rtrim(&SL.WAGE_LOSS_PLAN, ' ')
  
     do format-number(&SL.SEQUENCE_NUMBER, $T4SeqNo, '09')
     let $BurstValue = $BurstValue || $T4SeqNo
!     
     if $RC_CAN_YE.T4_Copy_Type = '2'
     
        if $BurstValue <> $BurstValueSave      
         
           if $BurstValueSave <> ''                
!              do XML-Close-Tag('T4_Data',$closeTag)
!              do Write-XML-Line(#Fnum, $closeTag)
              do XML-Close-Tag('CAN_YearEnd', $closeTag)
              do Write-XML-Line(#Fnum, $closeTag)
              do Close-XML-File(#FNum)            
           end-if

           move $BurstValue to $BurstValueSave  
        
           let $FName = rtrim($BurstValue,' ') || '.xml'
           let $sourceFile     = $FName || '{IMPORTSUFFIX}'
           let $sourceLocation = '{IMPORTPREFIX}' || ''
           let $sourceFileName = rtrim($sourceLocation,' ') || rtrim($sourceFile,' ')
           let #FNum  = 3
           let #FStat = 0
           do Open-XML-File($FName, #FNum, #FStat)
           do XML-Open-Tag('CAN_YearEnd', $openTag)
           do Write-XML-Line(#Fnum, $openTag)
        end-if        
     end-if

     do XML-Open-Tag('T4_Data', $openTag)
     
     if $RC_CAN_YE.T4_Copy_Type = '2' and #FNum <> 0
        do Write-XML-Line(#Fnum, $openTag)
     end-if

     do Get-SS-Consent
     if $UserFlag = 'Y'
        do Write-XML-Line(#Fnum2, $openTag)
     end-if
     
!     if ($RC_CAN_YE.T4_Copy_Type = '2' and $Consent <> 'C') or
!         $RC_CAN_YE.T4_Copy_Type <> '2'
!        do Write-XML-Line(#Fnum2, $openTag)
!     end-if

     if #OPT_BLK.PY_RPT_BATCH_SIZE > 0
        add 1 to #BatchSize
        if #BatchSize > #OPT_BLK.PY_RPT_BATCH_SIZE
           move 0 to #BatchSize
           add 1 to #BatchId
        end-if
     end-if

     do Build-XML-Line('BURST_VALUE', $BurstValue, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('EMPLID', &EE.EMPLID, 'Y', #FNum, #FNum2, $UserFlag)

     do format-number(#BatchId, $T4Batch, '09999')
     do Build-XML-Line('BATCH_ID', $T4Batch, 'Y', #FNum, #FNum2, $UserFlag)
  end-if

  do Get-Slip-Detail
  do Accumulate-ER-UI-Prem

  if $Box24Found = 'N'
     if $UIExempt <> 'Y'
       if $SelectEEs = 'R' or $SelectEEs = 'S'
         do Check-UI-Earns
         if $UI_Earns_Found = 'Y' and
           #CheckAmt = 0
           move '     0.00' to $BoxAmt

           if $XMLPublisher = 'Y'
              do Build-XML-Line('EI_Earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
           else
              print $BoxAmt (#Row07,70)
              if $CopyType = '2'
                 print $BoxAmt (#Row40,70)
              end-if
           end-if
         end-if
       end-if
     else
        move '     0.00' to $BoxAmt

        if $XMLPublisher = 'Y'
           do Build-XML-Line('EI_Earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
        else
           print $BoxAmt (#Row07,70)
           if $CopyType = '2'
              print $BoxAmt (#Row40,70)
           end-if
        end-if
     end-if
  end-if


  if $Box26Found = 'N'
     if $CPPExempt =  'Y'
       move '     0.00' to $BoxAmt

       if $XMLPublisher = 'Y'
          do Build-XML-Line('CPP_QPP_earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
       else
          print $BoxAmt (#Row10,70)
          if $CopyType = '2'
             print $BoxAmt (#Row43,70)
          end-if
       end-if
     else
       if $SelectEEs = 'R' or $SelectEEs = 'S'
         do Check-CPP-Earns
         let $EEProv = RTRIM(&SL.Province, ' ')
         if $EEProv = 'QC' and #CheckQPPAmt = 0
           move '     0.00' to $BoxAmt

           if $XMLPublisher = 'Y'
              do Build-XML-Line('CPP_QPP_earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
           else
              print $BoxAmt (#Row10,70)
              if $CopyType = '2'
                 print $BoxAmt (#Row43,70)
              end-if
           end-if
         else
           if $EEProv <> 'QC' and #CheckCPPAmt = 0
             move '     0.00' to $BoxAmt

             if $XMLPublisher = 'Y'
                do Build-XML-Line('CPP_QPP_earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
             else
                print $BoxAmt (#Row10,70)
                if $CopyType = '2'
                  print $BoxAmt (#Row43,70)
                end-if
             end-if
           end-if
         end-if
       end-if
     end-if
  end-if

  if &SL.Company <> $PriorCompany
      move &SL.Company to $Company
      do Get-Setup-Viewing-Date      
      do Get-Company-Data      
      move $Company to $PriorCompany
      do convert-to-char($CompanyName, $CompanyName)
      move $CompnyAdd1 to $CoStreet
      move $CompnyCity to $CoCity
      let $CoProvince = rtrim(&CT.State, ' ')
      move &CT.Postal to $CoPostalCode
      do convert-to-char($CoStreet, $CoStreet)
      do convert-to-char($CoCity, $CoCity)
      let $CompCity = RTRIM($CoCity, ' ')
      let $CoCity = $CompCity || ','
  end-if

  move &SL.Reporting_ID to $ReportingID
  move &SL.Wage_Loss_Plan to $WageLossPlan

  do Finish-Printing

  if $MoreThan6Bx = 'Y'
    do Process-Additional-T4
  end-if

  add 1 to #SegmentCount
  if #SegmentCount = 1
      do convert-to-char(&EE.SLIP_Surname, $Segment_First_Surname)
  end-if

  do convert-to-char(&EE.SLIP_Surname, $Segment_Last_Surname)

  if $SortInd = '1'
     if #SegmentCount = 200
        if $SelectEEs = 'R'
          do Write-Segment-Record
        end-if
     end-if
  end-if

  if $Proc_Amend_Cancel_New = 'Y' and $RC_CAN_YE.T4_Final_Print = 'Y'
    do Close-Amend-Cancel-T4
  end-if

  if $XMLPublisher = 'Y' and $CopyType = '2'
     
     do Insert-Guide-Data
  end-if

 end-if

 let $BurstValue = ''

FROM   PS_CAN_YE_SLIP  SL,
       PS_CAN_YE_EMPL  EE
WHERE  SL.CALENDAR_YEAR = &TX.Balance_Year
  AND  SL.TAXFORM_ID = 'T'
  AND  SL.PROCESS_FLAG <> 'V'
  AND  EE.CALENDAR_YEAR = &TX.Balance_Year
#ifdef MVS
  \$E.SelectedEEs\
#else
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used
#endif
  AND  EE.EMPLID = SL.EMPLID
  AND  EE.COMPANY = SL.COMPANY
  AND  EE.SEQUENCE_NUMBER = SL.SEQUENCE_NUMBER
  AND  SL.SEQUENCE_NUMBER = (SELECT MAX(SL1.SEQUENCE_NUMBER)
               FROM PS_CAN_YE_SLIP SL1
               WHERE SL1.COMPANY = SL.COMPANY
                 AND SL1.EMPLID  = SL.EMPLID
                 AND SL1.CALENDAR_YEAR = SL.CALENDAR_YEAR
#ifdef MVS
  \$seq_number\
#else
  [$seq_number]
#endif
#ifdef MVS
  \$ye_slip_process\
#else
  [$ye_slip_process]
#endif
#ifdef MVS
  ORDER by \$SORTSEQUENCE\
#else
  ORDER by [$SortSequence]
#endif
end-SELECT

   if $SelectEEs = 'R'
     do Write-Summary-Record
   end-if

end-procedure

begin-procedure Get-SLIP-Detail

 let #NumOfOtherInfo = 0
 let #OtherInfo_i    = 0
 let $MoreThan6Bx    = 'N'

begin-SELECT
DE.BOX
DE.CAN_YE_BOX_TEXT
DE.CAN_YE_BOX_AMT

  EXTRACT $FN_Ind from &DE.Box 2 1
  if $FN_Ind = '' or $FN_Ind = ' ' or
     rtrim(&DE.Box, ' ') = '28c' or rtrim(&DE.Box, ' ') = '28C' or
     rtrim(&DE.Box, ' ') = '28u' or rtrim(&DE.Box, ' ') = '28U' or
     rtrim(&DE.Box, ' ') = '28p' or rtrim(&DE.Box, ' ') = '28P'

      do Print-T4-Data

      do Process-Other-Info-Bx

  end-if


 let $Box = RTRIM(&DE.Box,' ')
 if $Box = '28c' or $Box = '28C'

   let $CPPExempt = 'Y'
 end-if

 if $SelectEEs <> 'R' and $SelectEEs <> 'S'      ! for non original slips
   if $Box = '28u' or $Box = '28U'
      let $UIExempt = 'Y'
   end-if
 end-if

FROM  PS_CAN_YE_DETAIL DE
WHERE EMPLID            = &EE.EmplID
  AND TAXFORM_ID        = 'T'
  AND WAGE_LOSS_PLAN    = &SL.Wage_Loss_Plan
  AND PROVINCE          = &SL.Province
  AND CALENDAR_YEAR     = &TX.Balance_Year
  AND COMPANY           = &SL.Company
  AND SEQUENCE_NUMBER   = &SL.Sequence_Number
ORDER by DE.BOX ASC
end-SELECT

end-procedure


begin-procedure Accumulate-ER-UI-Prem

begin-SELECT
ER.TAX_YTD

  add &ER.Tax_Ytd to #TotErUIPrem

FROM  PS_CAN_TAX_BALANCE ER
WHERE ER.EMPLID         = &EE.EmplID
  AND ER.COMPANY        = &SL.Company
  AND ER.BALANCE_ID     = $Calendar_Year_Id
  AND ER.BALANCE_YEAR   = &TX.Balance_Year
  AND ER.WAGE_LOSS_PLAN = &SL.Wage_Loss_Plan
  AND ER.PROVINCE       = &SL.Province
  AND ER.TAX_CLASS_CAN  = 'EIR'
  AND ER.BALANCE_PERIOD         =
      (SELECT MAX(ER1.BALANCE_PERIOD)
       FROM   PS_CAN_TAX_BALANCE ER1
       WHERE  ER1.EMPLID         = ER.EMPLID
         AND  ER1.COMPANY        = ER.COMPANY
         AND  ER1.BALANCE_ID     = ER.BALANCE_ID
         AND  ER1.BALANCE_YEAR   = ER.BALANCE_YEAR
         AND  ER1.WAGE_LOSS_PLAN = ER.WAGE_LOSS_PLAN
         AND  ER1.PROVINCE       = ER.PROVINCE
         AND  ER1.TAX_CLASS_CAN  = ER.TAX_CLASS_CAN)
end-SELECT

end-procedure


begin-procedure Print-T4-Data


    let $Box = RTRIM(&DE.Box, ' ')
    let #BoxAmt = &DE.Can_YE_Box_Amt
    let $BoxText = RTRIM(&DE.Can_YE_Box_Text, ' ')

    evaluate $Box

       when = '14'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '99999999.99')
            add #BoxAmt to #SegTotIncome
            move #BoxAmt to #SaveBox14
            move $BoxAmt to $SaveBox14
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Empl_Inc', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row04,50)
            if $CopyType = '2'
               print $BoxAmt (#Row37,50)
            end-if
         end-if

       when = '16'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999.00')
            add #BoxAmt to #SegEeCPPContrib
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('EE_CPP', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row07,54)
            if $CopyType = '2'
               print $BoxAmt (#Row40,54)
            end-if
         end-if

       when = '17'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999.00')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('EE_QPP', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,54)
            if $CopyType = '2'
               print $BoxAmt (#Row43,54)
            end-if
         end-if

       when = '18'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999.00')
            add #BoxAmt to #SegEeUIPrem
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('EE_EI_Prem', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row13,54)
            if $CopyType = '2'
               print $BoxAmt (#Row46,54)
            end-if
         end-if

       when = '20'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '99999.00')
            add #BoxAmt to #SegRegPPContrib
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('RPP_Contr', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,53)
            if $CopyType = '2'
               print $BoxAmt (#Row49,53)
            end-if
         end-if

       when = '22'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '99999999.00')
            add #BoxAmt to #SegIncomeTax
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Inc_Tax_ded', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row04,68)
            if $CopyType = '2'
               print $BoxAmt (#Row37,68)
            end-if
         end-if

       when = '24'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '99999.99')
            if $BoxAmt <> $SaveBox14
               add #BoxAmt to #TotUIInsEarn
               move 'Y' to $Box24Found
            else
               move ' ' to $BoxAmt
            end-if
         else
               move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            if $BoxAmt <> ' '
               do Build-XML-Line('EI_Earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
            end-if
         else
            print $BoxAmt (#Row07,71)
            if $CopyType = '2'
               print $BoxAmt ( #Row40,71)
            end-if
         end-if

       when = '26'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999999.00')
            move 'Y'         to $Box26Found
         else
            move ' '         to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            if $BoxAmt <> ' '
               do Build-XML-Line('CPP_QPP_earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
            end-if
         else
            print $BoxAmt (#Row10,69)
            if $CopyType = '2'
               print $BoxAmt (#Row43,69)
            end-if
         end-if

       when = '28c'
       when = '28C'
         if $XMLPublisher = 'Y'
            do Build-XML-Line('CPP_Exempt', 'Yes', 'Y', #FNum, #FNum2, $UserFlag)
         else
            print 'X' (#Row10,28)
            if $CopyType = '2'
               print 'X' (#Row43,28)
            end-if
         end-if

       when = '28u'
       when = '28U'
         if $XMLPublisher = 'Y'
            do Build-XML-Line('EI_Exempt', 'Yes', 'Y', #FNum, #FNum2, $UserFlag)
         else
            print 'X' (#Row10,32)
            if $CopyType = '2'
               print 'X' (#Row43,32)
            end-if
         end-if

       when = '28p'
       when = '28P'
         if $XMLPublisher = 'Y'
            do Build-XML-Line('PPIP_Exempt', 'Yes', 'Y', #FNum, #FNum2, $UserFlag)
         else       
            print 'X' (#Row10,35)
            if $CopyType = '2'
               print 'X' (#Row43,35)
            end-if
         end-if

       when = '44'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Union_Dues', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row13,69)
            if $CopyType = '2'
               print $BoxAmt (#Row46,69)
            end-if
         end-if

       when = '46'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Charity', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,69)
            if $CopyType = '2'
               print $BoxAmt (#Row49,69)
            end-if
         end-if

       when = '50'
         if $BoxText <> ''
           let $Box50Text = RTRIM($BoxText, ' ')

           if $XMLPublisher = 'Y'
              do Build-XML-Line('RPP_DPSP', $Box50Text, 'Y', #FNum, #FNum2, $UserFlag)
           else
              print $Box50Text (#Row19,69)
              if $CopyType = '2'
                 print $Box50Text (#Row52,69)
              end-if
           end-if
           do Save-RPP-ID
         end-if

       when = '52'
         if #BoxAmt > 0
            let #BoxAmt = trunc(#BoxAmt, 0)
            do Format-Number (#BoxAmt, $BoxAmt, '99999')
            add #BoxAmt to #SegPensionAdj
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Pension_Adj', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row19,53)
            if $CopyType = '2'
               print $BoxAmt (#Row52,53)
            end-if
         end-if

      when = '55'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('PPIP_Premium', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else

            print $BoxAmt (#Row22,51)
            if $CopyType = '2'
               print $BoxAmt (#Row55,51)
            end-if
         end-if

      when = '56'
         if #BoxAmt > 0
            do Format-Number (#BoxAmt, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('PPIP_Earnings', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row22,69)
            if $CopyType = '2'
               print $BoxAmt (#Row55,69)
            end-if
         end-if

      end-evaluate

end-procedure

begin-procedure Process-Other-Info-Bx

  let $Box = RTRIM(&DE.Box, ' ')
  let #BoxAmt = &DE.Can_YE_Box_Amt

  evaluate $Box

    when = '30'
    when = '31'
    when = '32'
    when = '33'
    when = '34'
    when = '35'
    when = '36'
    when = '37'
    when = '38'
    when = '39'
    when = '40'
    when = '41'
    when = '42'
    when = '43'
    when = '53'
    when = '70'
    when = '71'
    when = '72'
    when = '73'
    when = '74'
    when = '75'
    when = '76'
    when = '77'
    when = '78'
    when = '79'
    when = '80'

      do Print-Other-Information

  end-evaluate

end-procedure


begin-procedure Check-UI-Earns

  let $UI_Earns_Found = 'N'

begin-SELECT
C.TXGRS_YTD

      move &C.TXGRS_YTD to #CheckAmt
      do Format-Number (#CheckAmt, $CheckAmt, '999999.00')

      if (#CheckAmt = #SaveBox14)
        add #CheckAmt to #TotUIInsEarn
      end-if

      let $UI_Earns_Found = 'Y'


FROM PS_CAN_TAX_BALANCE C
WHERE C.COMPANY = &SL.Company
  AND C.EMPLID = &EE.Emplid
  AND C.WAGE_LOSS_PLAN = &SL.Wage_Loss_Plan
  AND C.BALANCE_ID = $Calendar_Year_Id
  AND C.BALANCE_YEAR = &TX.Balance_Year
  AND C.PROVINCE = &SL.Province
  AND C.TAX_CLASS_CAN = 'EIE'
  AND C.BALANCE_PERIOD        =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  PROVINCE      = C.PROVINCE
         AND  WAGE_LOSS_PLAN = C.WAGE_LOSS_PLAN
         AND  TAX_CLASS_CAN  = C.TAX_CLASS_CAN)

end-SELECT

end-procedure


begin-procedure Check-CPP-Earns

begin-SELECT
C1.TXGRS_YTD
C1.TAX_CLASS_CAN

  let $TaxClass  = rtrim(&C1.TAX_CLASS_CAN, ' ')
  evaluate $TaxClass
    when = 'CPP'
      move &C1.TXGRS_YTD to #CheckCPPAmt
    when = 'QPP'
      move &C1.TXGRS_YTD to #CheckQPPAmt
    when-other
      break
  end-evaluate

FROM PS_CAN_TAX_BALANCE C1
WHERE C1.COMPANY = &SL.Company
  AND C1.EMPLID = &EE.Emplid
  AND C1.WAGE_LOSS_PLAN = &SL.Wage_Loss_Plan
  AND C1.BALANCE_ID = $Calendar_Year_Id
  AND C1.BALANCE_YEAR = &TX.Balance_Year
  AND C1.PROVINCE = &SL.Province
  AND C1.TAX_CLASS_CAN IN ('CPP','QPP')
  AND C1.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_TAX_BALANCE
       WHERE  EMPLID        = C1.EMPLID
         AND  COMPANY       = C1.COMPANY
         AND  BALANCE_ID    = C1.BALANCE_ID
         AND  BALANCE_YEAR  = C1.BALANCE_YEAR
         AND  PROVINCE      = C1.PROVINCE
         AND  WAGE_LOSS_PLAN = C1.WAGE_LOSS_PLAN
         AND  TAX_CLASS_CAN = C1.TAX_CLASS_CAN )

end-SELECT

end-procedure


begin-procedure Save-RPP-ID

  if $PlanA = ' '
     move $Box50Text to $PlanA
  else
     if $PlanA <> $Box50Text
       if $PlanB = ' '
          move $Box50Text to $PlanB
       else
         if $PlanB <> $Box50Text
           if $PlanC = ' '
              move $Box50Text to $PlanC
           end-if
         end-if
       end-if
     end-if
  end-if

end-procedure


begin-procedure Print-Other-Information

  do Set-Other-Info-Row-Pointers

  if #NumOfOtherInfo = 6
    let $MoreThan6Bx = 'Y'
  end-if

  if #NumOfOtherInfo < 6
    if #BoxAmt > 0
      do Format-Number (#BoxAmt, $BoxAmt, '9999999.99')

      if $XMLPublisher = 'Y'
         do Build-XML-Line($BoxCaseBox, $Box, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line($BoxCaseAmt, $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
      else
         print $Box (#LaserRow,#BoxCol)
         print $BoxAmt (#LaserRow,#AmtCol)
         if $CopyType = '2'
            print $Box (#LaserC2Row,#BoxCol)
            print $BoxAmt (#LaserC2Row,#AmtCol)
         end-if
      end-if
      add 1 to #NumOfOtherInfo
    end-if
  else
    do Save-T4-OtherInfoBx
  end-if

end-procedure


begin-procedure Save-T4-OtherInfoBx

  put $Box #BoxAmt into OtherInfo(#OtherInfo_i)
      OtherInfo_Box_Num OtherInfo_Box_Amt

  add 1 to #OtherInfo_i

end-procedure


begin-procedure Initialize-OtherInfo-Array

  move 0 to #load
  move 0 to #loadamt
  move ' ' to $loadspace
  while #load < 40

    put $loadspace #loadamt into OtherInfo(#load)
        OtherInfo_Box_Num OtherInfo_Box_Amt

    add 1 to #load

  end-while

end-procedure


begin-procedure Process-Additional-T4

  let #j = 0

  let #OtherInfoCount = 0

  while #j < #OtherInfo_i
    get $OtherInfo_Box_Num #OtherInfo_Box_Amt from OtherInfo(#j)
        OtherInfo_Box_Num OtherInfo_Box_Amt

    evaluate #j
      when = 0
      when = 6
      when = 12
      when = 18
      when = 24
      when = 30
      when = 36
        move 0  to #NumOfOtherInfo
      when = 1
      when = 7
      when = 13
      when = 19
      when = 25
      when = 31
      when = 37
        move 1  to #NumOfOtherInfo
      when = 2
      when = 8
      when = 14
      when = 20
      when = 26
      when = 32
      when = 38
        move 2  to #NumOfOtherInfo
      when = 3
      when = 9
      when = 15
      when = 21
      when = 27
      when = 33
      when = 39
        move 3  to #NumOfOtherInfo
      when = 4
      when = 10
      when = 16
      when = 22
      when = 28
      when = 34
        move 4  to #NumOfOtherInfo
      when = 5
      when = 11
      when = 17
      when = 23
      when = 29
      when = 35
        move 5  to #NumOfOtherInfo
      when-other
        break

   end-evaluate

   add 1 to #OtherInfoCount

   if #NumOfOtherInfo = 0 and $XMLPublisher = 'Y'
   
      do XML-Open-Tag('T4_Data', $openTag)
      
      if $RC_CAN_YE.T4_Copy_Type = '2' and #FNum <> 0
         do Write-XML-Line(#Fnum, $openTag)
      end-if

      if $UserFlag = 'Y' 
         do Write-XML-Line(#Fnum2, $openTag)
      end-if

!      if ($RC_CAN_YE.T4_Copy_Type = '2' and $Consent <> 'C') or 
!          $RC_CAN_YE.T4_Copy_Type <> '2'
!         do Write-XML-Line(#Fnum2, $openTag)
!      end-if

      do Build-XML-Line('BURST_VALUE', $BurstValue, 'Y', #FNum, #FNum2, $UserFlag)
      do Build-XML-Line('EMPLID', &EE.EMPLID, 'Y', #FNum, #FNum2, $UserFlag)
      do Build-XML-Line('BATCH_ID', $T4Batch, 'Y', #FNum, #FNum2, $UserFlag)

   end-if

   do Print-Other-Info-Bx

   if #NumOfOtherInfo = 5

     do Print-Box-14-Second-T4
     do Finish-Printing

     add 1 to #SegmentCount
     if #SegmentCount = 1
      do convert-to-char(&EE.SLIP_Surname, $Segment_First_Surname)
     end-if

   end-if

   add 1 to #j

 end-while

 let #Count = mod(#OtherInfoCount,6)

 if #Count <> 0

    do Print-Box-14-Second-T4
    do Finish-Printing

    add 1 to #SegmentCount
    if #SegmentCount = 1
      do convert-to-char(&EE.SLIP_Surname, $Segment_First_Surname)
    end-if

 end-if

 do Initialize-OtherInfo-Array

end-procedure


begin-procedure Print-Other-Info-Bx

  do Set-Other-Info-Row-Pointers

  if #OtherInfo_Box_Amt > 0
    do Format-Number (#OtherInfo_Box_Amt, $OtherInfo_Box_Amt, '9999999.99')

      if $XMLPublisher = 'Y'
         do Build-XML-Line($BoxCaseBox, $OtherInfo_Box_Num, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line($BoxCaseAmt, $OtherInfo_Box_Amt, 'Y', #FNum, #FNum2, $UserFlag)
      else
         print $OtherInfo_Box_Num (#LaserRow,#BoxCol)
         print $OtherInfo_Box_Amt (#LaserRow,#AmtCol)
         if $CopyType = '2'
           print $OtherInfo_Box_Num (#LaserC2Row,#BoxCol)
           print $OtherInfo_Box_Amt (#LaserC2Row,#AmtCol)
         end-if
      end-if
  end-if

end-procedure


begin-procedure Print-Box-14-Second-T4

  do Format-Number (.01, $BoxAmt, '99999999.99')

  if $XMLPublisher = 'Y'
     do Build-XML-Line('Empl_Inc', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
  else
     print $BoxAmt (#Row04,50)
     if $CopyType = '2'
        print $BoxAmt (#Row37,50)
     end-if
  end-if

end-procedure


begin-procedure Finish-Printing

     if $XMLPublisher = 'Y'
        do Build-XML-Line('ER_Name', $CompanyName, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $CompanyName     (#Row01,7)
        if $CopyType = '2'
           print $CompanyName  (#Row34,7)
        end-if
     end-if

     if $XMLPublisher = 'Y'
        do Build-XML-Line('ER_Street', $CoStreet, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $CoStreet (#Row02,7)
     end-if

     if $XMLPublisher = 'Y'
        let $ErCityProv = $CoCity || ' ' || $CoProvince || '  ' || $CoPostalCode
        do Build-XML-Line('ER_CityProv', $ErCityProv, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $CoCity (#Row03,7)
        print $CoProvince (#Row03,+1)
        print $CoPostalCode (#Row03,+2)
        if $CopyType = '2'
          print $CoStreet (#Row35,7)
          print $CoCity (#Row36,7)
          print $CoProvince (#Row36,+1)
          print $CoPostalCode (#Row36,+2)
        end-if
     end-if

     let $EmploymentCode = edit(&SL.Employment_Code, 'xx')    ! Box 29

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Employ_Code', $EmploymentCode, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $EmploymentCode (#Row10,42)
        if $CopyType = '2'
           print $EmploymentCode (#Row43,42)
        end-if
     end-if

     let $SIN = edit(&EE.SIN, 'xxxbxxxbxxx')          ! Box 12

     if $XMLPublisher = 'Y'
        do Build-XML-Line('SIN', $SIN, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $SIN (#Row10,8)
        if $CopyType = '2'
           print $SIN (#Row43,8)
        end-if
     end-if

     let $LastName = substr(&EE.SLIP_Surname, 1, 20)
     let $LastName = RTRIM($LastName, ' ')
     do convert-to-char($LastName, $LastName)
     let $FirstName = RTRIM(&EE.SLIP_First_Name, ' ')
     do convert-to-char($FirstName, $FirstName)
     let $MI = RTRIM(&EE.SLIP_Initial, ' ')
     do convert-to-char($MI, $MI)
     let $Name = $LastName || ', ' || $FirstName || ' ' || $MI


     if $XMLPublisher = 'Y'
!        do XML-Open-Tag('EE_Name', $eeNameTag)
!        do Write-XML-Line(#Fnum, $eeNameTag)
        do Build-XML-Line('Lastname', $LastName, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('Firstname', $FirstName, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('MI', $MI, 'Y', #FNum, #FNum2, $UserFlag)
!        do XML-Close-Tag('EE_Name', $eeNameTag)
!        do Write-XML-Line(#Fnum, $eeNameTag)
     else
        print $LastName  (#Row15,7)
        print $FirstName (#Row15,29)
        print $MI        (#Row15,42)
        if $CopyType = '2'
           print $LastName  (#Row48,7)
           print $FirstName (#Row48,29)
           print $MI        (#Row48,42)
        end-if
     end-if

     let $Street1 = &EE.Address1
     do convert-to-char($Street1, $Street1)

     if $XMLPublisher = 'Y'
        do Build-XML-Line('EE_Address1', $Street1, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $Street1 (#Row16,07)
        if $CopyType = '2'
           print $Street1 (#Row49,07)
        end-if
     end-if

     let $Street2 = RTRIM(&EE.Address2, ' ')
     if $Street2 <> ''
        do convert-to-char($Street2, $Street2)

        if $XMLPublisher = 'Y'
           do Build-XML-Line('EE_Address2', $Street2, 'Y', #FNum, #FNum2, $UserFlag)
        else
           print $Street2 (#Row18,7)
           if $CopyType = '2'
              print $Street2 (#Row51,7)
           end-if
        end-if
     end-if

     let $City = RTRIM(&EE.City, ' ')
     do convert-to-char($City, $City)
     let $ProvCd = rtrim(&EE.Province, ' ')
     if $ProvCd = 'ZZ'
        move ' ' to $ProvCd
     end-if
     let $EeAddr = $City || ', ' || $ProvCd
     if &EE.Country <> 'CAN'
        move &EE.Country to $Country
        concat $Country with $EeAddr bxxxxxxxxxx
     end-if

     if $MoreThan6Bx = 'N'
       if &EE.Country = 'USA'
          add 1 to #USACounter
       end-if
     end-if

     unstring &EE.POSTAL by ' ' into $ZIP1 $ZIP2
     let $ZIP1 = $ZIP1  || $ZIP2
     let $ZipValue = edit($ZIP1, 'xxxbxxx')

     if &EE.Country <> 'CAN'
        let $ZipValue = RTRIM(&EE.POSTAL, ' ')
     end-if

     if $XMLPublisher = 'Y'

        if $Street2 <> ''
           let $EeCityProv = $EeAddr
           do Build-XML-Line('EE_Address3', $EeAddr, 'Y', #FNum, #FNum2, $UserFlag)
           do Build-XML-Line('EE_Address4', $ZipValue, 'Y', #FNum, #FNum2, $UserFlag)
        else
           do Build-XML-Line('EE_Address2', $EeAddr, 'Y', #FNum, #FNum2, $UserFlag)
           do Build-XML-Line('EE_Address3', $ZipValue, 'Y', #FNum, #FNum2, $UserFlag)
        end-if
     else
        if $Street2 = ''
           print $EeAddr (#Row18,7)
           print $ZipValue (#Row20,29)
           if $CopyType = '2'
              print $EeAddr (#Row51,7)
              print $ZipValue (#Row53,29)
           end-if
        else
           print $EeAddr (#Row20,7)
           print $ZipValue (#Row20,29)
           if $CopyType = '2'
              print $EeAddr (#Row53,7)
              print $ZipValue (#Row53,29)
           end-if
        end-if
     end-if

     if $CopyType <> '2'
        if $XMLPublisher = 'Y'
           do Build-XML-Line('BN', $ReportingID, 'Y', #FNum, #FNum2, $UserFlag)
        else
           print $ReportingID (#Row07,15)
        end-if
     end-if

!     if $XMLPublisher = 'Y'
!        do Build-XML-Line('EE_ID_LBL', 'EMPLOYEE NO. - NO. DE L''EMPL.', 'Y', #FNum, #FNum2, $UserFlag)
!        do Build-XML-Line('EE_ID', &EE.EmplID, 'Y', #FNum, #FNum2, $UserFlag)
!     else
!        print 'EMPLOYEE NO. - NO. DE L''EMPL.' (#Row21, 49)
!        print &EE.EmplID (#Row22,53)
!        if $CopyType = '2'
!           print 'EMPLOYEE NO. - NO. DE L''EMPL.' (#Row54, 49)
!           print &EE.EmplID (#Row55,53)
!        end-if
!     end-if

     let $Province = RTRIM(&SL.Province, ' ')

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Prov_emp', $Province, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $Province  (#Row07,42)
        if $CopyType = '2'
           print $Province  (#Row40,42)
        end-if
     end-if

     if $SelectEEs = 'S' or $SelectEEs = 'E'

        if $XMLPublisher = 'Y'
           do Build-XML-Line('DUP_Copy', 'DUPLICATE COPY', 'Y', #FNum, #FNum2, $UserFlag)
        else
           print 'DUPLICATE COPY' (#Row04,18)
           if $CopyType = '2'
              print 'DUPLICATE COPY' (#Row37,18)
           end-if
        end-if
     end-if

     if ($SelectEEs = 'A' or $SelectEEs = 'E') and &SL.YE_SLIP_PROCESS = 'A'

        if $XMLPublisher = 'Y'
           do Build-XML-Line('Amend_Cancel', 'AMENDED', 'Y', #FNum, #FNum2, $UserFlag)
        else

           print 'AMENDED'        (#Row03, 38)
           if $CopyType = '2'
              print 'AMENDED'     (#Row36, 38)
           end-if
        end-if
     end-if

     if ($SelectEEs = 'C' or $SelectEEs = 'E') and &SL.YE_SLIP_PROCESS = 'C'

        if $XMLPublisher = 'Y'
           do Build-XML-Line('Amend_Cancel', 'CANCELLED', 'Y', #FNum, #FNum2, $UserFlag)
        else
           print 'CANCELLED'        (#Row03, 36)
           if $CopyType = '2'
              print 'CANCELLED'     (#Row36, 36)
           end-if
        end-if
     end-if

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Tax_Year', $CalYear, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $CalYear      (#Row01,49)
        if $CopyType = '2'
           print $CalYear   (#Row34,49)
        end-if
     end-if

     if $XMLPublisher = 'Y'

        do XML-Close-Tag('T4_Data', $closeTag)

        if $UserFlag = 'Y' 
           do Write-XML-Line(#Fnum2, $closeTag)
        end-if
        
!        if ($RC_CAN_YE.T4_Copy_Type = '2' and $Consent <> 'C') or 
!            $RC_CAN_YE.T4_Copy_Type <> '2'
!            do Write-XML-Line(#Fnum2, $closeTag)
!        end-if

        if $RC_CAN_YE.T4_Copy_Type = '2' and #Fnum <> 0
           do Write-XML-Line(#Fnum, $closeTag)
        end-if

     else
        if $CopyType = '1' or $CopyType = '4'
           if #StubPtr = 33
              do Insert-FormFeed
              new-page
              move 0 to #StubPtr
           else
              add 33 to #StubPtr
           end-if
           do Set-T4-Row-Pointers
        else
           do Insert-FormFeed
           new-page
        end-if
     end-if

end-procedure


begin-procedure Write-Summary-Record
   if $SortInd = '1'
    if #SegmentCount > 0 and #SegmentCount < 200
       do Write-Segment-Record
    end-if
   else
       do Write-Segment-Record
   end-if

  move '331' to $TypeCode

  do format-number(#TotTotIncome, $TotalIncome, '0999999999.99')
  do format-number(#TotEeCPPContrib, $TotalEeCPPContrib, '09999999.99')
  do format-number(#TotEeUIPrem, $TotalEeUIPrem, '09999999.99')
  do format-number(#TotRegPPContrib, $TotalRegPPContrib, '09999999.99')
  do format-number(#TotIncomeTax, $TotalIncomeTax, '0999999999.99')
  do format-number(#TotPensionAdj, $TotalPensionAdj, '0999999999.99')
  do format-number(#TotUIInsEarn, $TotalUIInsErns, '0999999999.99')

  if &TX.Balance_Year = 1997
    let #TotErCPPContrib = #TotEeCPPContrib * 1.02564
    do format-number(#TotErCPPContrib, $TotalErCPPContrib, '09999999.99')
  else
    do format-number(#TotEeCPPContrib, $TotalErCPPContrib, '09999999.99')
  end-if

  do format-number(#T4_Count, $TotalSupplementary, '0999999')
  do format-number(#USACount, $USACount, '09999')

  do format-number(#TotErUIPrem, $TotalErUIPrem, '09999999.99')

  write 1 from $TypeCode:3                -
               $WageLossPlan:3            -
               $ReportingID:16            -
               $TotalSupplementary:7      -
               $TotalIncome:13            -
               $TotalEeCPPContrib:11      -
               $TotalEeUIPrem:11          -
               $TotalRegPPContrib:11      -
               $TotalIncomeTax:13         -
               $TotalPensionAdj:13        -
               $TotalUIInsErns:13         -
               $TotalErCPPContrib:11      -
               $TotalErUIPrem:11          -
               $USACount:5                -
               $SaveSegmentNumber:7       -
               $SortCode:1                -
               $PlanA:7                   -
               $PlanB:7                   -
               $PlanC:7                   -
               $Company:3

  do Init-Summary-Values

  move 0 to #T4_Count
  move 0 to #USACount
  move 0 to #SegmentNumber
  move 0 to #TotalSupplementary         ! box no equiv
  move 0 to #TotTotIncome               ! box 14
  move 0 to #TotEeCPPContrib            ! box 16c
  move 0 to #TotEeUIPrem                ! box 18
  move 0 to #TotRegPPContrib            ! box 20
  move 0 to #TotIncomeTax               ! box 22
  move 0 to #TotUIInsEarn               ! box 24
  move 0 to #TotErCPPContrib            ! box 16  same as ee
  move 0 to #TotErUIPrem                ! box no equiv
  move 0 to #TotPensionAdj              ! box 52

end-procedure


begin-procedure Write-Segment-Record

   if $SortInd = '1'
     do Create-Segment-Record
   end-if

   do Add-Segment-to-Total
   do Init-Segment-Values

end-procedure

begin-procedure Create-Segment-Record

   add 1 to #SegmentNumber
   do format-number(#SegmentNumber, $SegmentNumber, '0999999')
   do format-number(#SegmentCount, $SegmentCount, '0999999')

   do format-number(#SegTotIncome, $TotalIncomeSeg, '0999999999.99')
   do format-number(#SegEeCPPContrib, $TotalErCppContribSeg, '09999999.99')
   do format-number(#SegEeUIPrem, $TotalEeUIPremSeg, '09999999.99')
   do format-number(#SegRegPPContrib, $TotalRegPPContribSeg, '09999999.99')
   do format-number(#SegIncomeTax, $TotalIncomeTaxSeg, '0999999999.99')
   do format-number(#SegPensionAdj, $TotalPensionAdjSeg, '0999999999')

   write 2 from  $CompanyName:30             -
                 $SegmentCount:7             -
                 $Segment_First_Surname:30   -
                 $Segment_Last_Surname:30    -
                 $ReportingID:16             -
                 $SegmentNumber:7            -
                 $TotalIncomeSeg:13          -
                 $TotalErCPPContribSeg:11    -
                 $TotalEeUIPremSeg:11        -
                 $TotalRegPPContribSeg:11    -
                 $TotalIncomeTaxSeg:13       -
                 $TotalPensionAdjSeg:13

end-procedure

begin-procedure Add-Segment-to-Total

   add  #SegmentCount to #T4_Count
   add  #SegTotIncome to #TotTotIncome
   add  #SegEeCPPContrib to #TotEeCppContrib
   add  #SegEeCPPContrib to #TotErCppContrib

   add  #SegEeUIPrem to #TotEeUIPrem
   add  #SegRegPPContrib to #TotRegPPContrib
   add  #SegIncomeTax to #TotIncomeTax
   add  #SegPensionAdj to #TotPensionAdj

end-procedure

begin-procedure Init-Segment-Values

   move 0 to #SegmentCount
   move 0 to #SegTotIncome
   move 0 to #SegEeCPPContrib
   move 0 to #SegEeUIPrem
   move 0 to #SegRegPPContrib
   move 0 to #SegIncomeTax
   move 0 to #SegPensionAdj
   move $SegmentNumber to $SaveSegmentNumber

end-procedure

begin-procedure Init-Summary-Values

  move 0 to #T4_Count
  move 0 to #USACount
  move 0 to #SegmentNumber
  move 0 to #TotalSupplementary         ! box no equiv
  move 0 to #TotTotIncome               ! box 14
  move 0 to #TotEeCPPContrib            ! box 16c
  move 0 to #TotEeUIPrem                ! box 18
  move 0 to #TotRegPPContrib            ! box 20
  move 0 to #TotIncomeTax               ! box 22
  move 0 to #TotUIInsEarn               ! box 24
  move 0 to #TotErCPPContrib            ! box 16  same as ee
  move 0 to #TotErUIPrem                ! box no equiv
  move 0 to #TotUnionDues               ! box 44
  move 0 to #TotDonations               ! box 46
  move 0 to #TotPensionAdj              ! box 52

  move ' ' to $PlanA
  move ' ' to $PlanB
  move ' ' to $PlanC

end-procedure


begin-procedure Set-T4-Row-Pointers
  let #Row01 = #StubPtr + 1
  let #Row02 = #StubPtr + 2
  let #Row03 = #StubPtr + 3
  let #Row04 = #StubPtr + 4
  let #Row07 = #StubPtr + 7
  let #Row10 = #StubPtr + 10
  let #Row13 = #StubPtr + 13
  let #Row15 = #StubPtr + 15
  let #Row16 = #StubPtr + 16
  let #Row18 = #StubPtr + 18
  let #Row19 = #StubPtr + 19
  let #Row20 = #StubPtr + 20
  let #Row21 = #StubPtr + 21
  let #Row22 = #StubPtr + 22
  let #Row25 = #StubPtr + 25
  let #Row28 = #StubPtr + 28

  if $CopyType = '2'
     let #Row34 = 34
     let #Row35 = 35
     let #Row36 = 36
     let #Row37 = 37
     let #Row40 = 40
     let #Row43 = 43
     let #Row48 = 48
     let #Row46 = 46
     let #Row49 = 49
     let #Row51 = 51
     let #Row52 = 52
     let #Row53 = 53
     let #Row54 = 54
     let #Row55 = 55
     let #Row58 = 58
     let #Row61 = 61

  end-if

end-procedure


begin-procedure Set-Other-Info-Row-Pointers

      let $BoxCaseBox  = ''
      let $BoxCaseAmt  = ''

 evaluate #NumOfOtherInfo
    when = 0
      let #LaserRow    = #Row25
      let #LaserC2Row  = #Row58
      let #SMailerRow  = 25
      let #StandardRow = 25
      let #BoxCol      = 16
      let #AmtCol      = 24
      let $BoxCaseBox  = 'other1'
      let $BoxCaseAmt  = 'other1amt'
    when = 1
      let #LaserRow    = #Row25
      let #LaserC2Row  = #Row58
      let #SMailerRow  = 25
      let #StandardRow = 25
      let #BoxCol      = 38
      let #AmtCol      = 46
      let $BoxCaseBox  = 'other2'
      let $BoxCaseAmt  = 'other2amt'
    when = 2
      let #LaserRow    = #Row25
      let #LaserC2Row  = #Row58
      let #SMailerRow  = 28
      let #StandardRow = 28
      let #BoxCol      = 60
      let #AmtCol      = 69
      let $BoxCaseBox  = 'other3'
      let $BoxCaseAmt  = 'other3amt'
    when = 3
      let #LaserRow    = #Row28
      let #LaserC2Row  = #Row61
      let #SMailerRow  = 28
      let #StandardRow = 28
      let #BoxCol      = 16
      let #AmtCol      = 24
      let $BoxCaseBox  = 'other4'
      let $BoxCaseAmt  = 'other4amt'
    when = 4
      let #LaserRow    = #Row28
      let #LaserC2Row  = #Row61
      let #SMailerRow  = 28
      let #StandardRow = 28
      let #BoxCol      = 38
      let #AmtCol      = 46
      let $BoxCaseBox  = 'other5'
      let $BoxCaseAmt  = 'other5amt'
    when = 5
      let #LaserRow    = #Row28
      let #LaserC2Row  = #Row61
      let #SMailerRow  = 28
      let #StandardRow = 28
      let #BoxCol      = 60
      let #AmtCol      = 69
      let $BoxCaseBox  = 'other6'
      let $BoxCaseAmt  = 'other6amt'
    end-evaluate

end-procedure


begin-procedure Insert-FormFeed

#ifndef MVS
#ifndef OS400
 encode '<27>&k2G' into $FormFeed
#else
 encode '<39>&k2G' into $FormFeed
#endif
#else
 encode '<39>&k2G' into $FormFeed
#endif

 print $FormFeed () code
 print ' ' (140,01)

end-procedure


begin-procedure Convert-Parameters

 if $RC_CAN_YE.T4_Primary_Sort  = '1'
       let $SortInd = '1'
       let $SortSequence = 'SL.REPORTING_ID ASC,EE.COUNTRY ASC, ' ||
       'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

 else

      if $RC_CAN_YE.T4_Primary_Sort  = '2'
         let $SortInd1  = '3'
         let $Sort1 = 'SL.REPORTING_ID ASC'
         let $DispSort1 = 'Business Number ; '
      end-if

      if $RC_CAN_YE.T4_Primary_Sort  = '3'
         let $SortInd1  = '2'
         let $Sort1 = 'SL.COMPANY ASC'
         let $DispSort1 = 'Company; '
      end-if

      if $RC_CAN_YE.T4_Sec_Sort  = '1'
          let $Sort2 = 'EE.LOCATION ASC'
          let $DispSort2 = 'Location; '
      end-if

      if $RC_CAN_YE.T4_Sec_Sort  = '2'
         let $Sort2 = 'EE.DEPTID ASC'
         let $DispSort2 = 'Department; '
      end-if

      if $RC_CAN_YE.T4_Sec_Sort  = '3'
         let $Sort2 = 'EE.MAIL_DROP ASC'
         let $DispSort2 = 'Mail Drop; '
      end-if

      if $RC_CAN_YE.T4_Sec_Sort  = '4'
          let $Sort2 = 'EE.POSTAL ASC'
          let $DispSort2 = 'Postal Code; '
      end-if

      if $RC_CAN_YE.T4_Sec_Sort  = '5'
          let $Sort2 = 'N'
      end-if

      if $RC_CAN_YE.T4_Third_Sort  = '1'
          let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
          let $DispSort3 = 'Employee Name; Employee ID'
      end-if

      if $RC_CAN_YE.T4_Third_Sort  = '2'
         let $Sort3 = 'EE.EMPLID ASC'
         let $DispSort3 = 'Employee ID'
      end-if

      if $RC_CAN_YE.T4_Third_Sort  = '3'
         let $Sort3 = 'EE.SIN ASC'
         let $DispSort3 = 'Employee SIN'
      end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if

end-if

    if $RC_CAN_YE.T4_Primary_Sort  = '2'
          move 'R' to $SortCode
   else
      if $RC_CAN_YE.T4_Primary_Sort  = '3'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

let $FormType = $RC_CAN_YE.T4_Form_Type

if $FormType = 'X'
    let $XMLPublisher = 'Y'
else
    let $XMLPublisher = 'N'
end-if

let $CopyType = $RC_CAN_YE.T4_Copy_Type
let $SelectEEs = $RC_CAN_YE.T4_Processing_Flg

  if $SelectEEs = 'S' or $SelectEEs = 'E'
    do Read-EEs
  end-if


  let $ye_slip_process = ' '
  let $seq_number      = ' '

  evaluate $SelectEEs
  when = 'A'                    ! Amended slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''A'' '
    let $seq_number      = ')'
    break
  when = 'C'                    ! Cancelled slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''C'' '
    let $seq_number      = ')'
    break
  when = 'N'                    ! Reissued slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''N'' '
    let $seq_number      = ')'
    break
  when = 'E'                    ! Reprint Amended/Cancelled/Reissued slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS IN (''A'', ''C'', ''N'') '
    let $seq_number      = ' AND SL1.TAXFORM_ID = SL.TAXFORM_ID AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    break
  when = 'R'                    ! Original slips
  when = 'S'                    ! Reprint Original slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''O'' '
    let $seq_number      = ' AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    break
  end-evaluate

  if $SelectEEs = 'A' or $SelectEEs = 'C' or $SelectEEs = 'N'
    let $Proc_Amend_Cancel_New = 'Y'
  else
    let $StatusOpen = 'Y'
  end-if

end-procedure


begin-procedure Declare-Printer-T4

  alter-printer
    symbol-set    = 10U
    font          = 3
    point-size    = 12

end-procedure

begin-procedure Read-EEs

move 'AND EE.EMPLID in (''' to $E.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
CT.EMPLID

  move &CT.EMPLID     to $SelectedEmplID

  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''

  move 'Y' to $EE_Selected

FROM  PS_RC_CTX910TP CT
WHERE CT.OPRID         = $Prcs_OprID
  AND CT.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

end-procedure


begin-procedure Check-Status

  move 'N' to $StatusOpen

begin-SELECT
CS.EMPLID

  move 'Y' to $StatusOpen

FROM PS_CAN_AMEND_T4_S CS
WHERE CS.COMPANY         = &SL.COMPANY
  AND CS.EMPLID          = &SL.EMPLID
  AND CS.CALENDAR_YEAR   = &SL.CALENDAR_YEAR
  AND CS.SEQUENCE_NUMBER = &SL.SEQUENCE_NUMBER
  AND CS.WAGE_LOSS_PLAN  = &SL.WAGE_LOSS_PLAN
  AND CS.PROVINCE        = &SL.PROVINCE
  AND CS.AMEND_STATUS    = 'O'

end-SELECT

end-procedure


begin-procedure Close-Amend-Cancel-T4

begin-SQL

  UPDATE PS_CAN_AMEND_T4_S
  SET AMEND_STATUS       = 'C'
  WHERE COMPANY          = &SL.COMPANY
    AND EMPLID           = &SL.EMPLID
    AND CALENDAR_YEAR    = &SL.CALENDAR_YEAR
    AND SEQUENCE_NUMBER  = &SL.SEQUENCE_NUMBER
    AND WAGE_LOSS_PLAN   = &SL.WAGE_LOSS_PLAN
    AND PROVINCE         = &SL.PROVINCE

end-SQL

end-procedure

begin-procedure Get-XMLP-Definitions

  do Get-XML-URLID
  do Get-Report-Definitions

  move 'N'  to $RC_CAN_YE.Py_Ye_Rpt_Burst
  move 'N'  to $Py_Ye_Rpt_Burst
  if $OPT_SS.PY_YE_RPT_SS = 'Y'
     move $OPT_SS.REPORT_DEFN_ID to $Report_Defn_ID

!     do Check-Burst-Value
!     move $Py_Ye_Rpt_Burst  to $RC_CAN_YE.Py_Ye_Rpt_Burst

!     if $Py_Ye_Rpt_Burst <> 'Y'
!        move 'N' to $OPT_SS.PY_YE_RPT_SS
!        display 'No burst fieldname given for self-service report definition ' noline
!        display $OPT_SS.REPORT_DEFN_ID
!     end-if
  end-if

  move 'N'  to $Py_Ye_Rpt_Burst

  if #OPT_BLK.PY_RPT_BATCH_SIZE <> 0
     move $OPT_BLK.REPORT_DEFN_ID to $Report_Defn_ID
     do Check-Burst-Value

     if $Py_Ye_Rpt_Burst <> 'Y'
        display 'No burst fieldname given for batched report definition ' noline
        display $OPT_BLK.REPORT_DEFN_ID
     end-if
  end-if

end-procedure

begin-procedure Get-XML-URLID

! fetch XML data files URLID

  move ' '  to $OPT_XML.PY_YE_XMLURLID

begin-SELECT
OPT_XML.PY_YE_XMLURLID

  move &OPT_XML.PY_YE_XMLURLID      to $OPT_XML.PY_YE_XMLURLID

  exit-SELECT

FROM PS_PY_YE_OPT_TAX OPT_XML
WHERE OPT_XML.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_XML.TAXFORM_ID      = 'T'
end-SELECT

  if $OPT_XML.PY_YE_XMLURLID = ' '
     display 'XML data file URLID is missing.'
  end-if
  
end-procedure

begin-procedure Get-Report-Definitions

! fetch definitions for self-service

  move 'N'  to $OPT_SS.PY_YE_RPT_SS
  move ' '  to $OPT_SS.REPORT_DEFN_ID
  move ' '  to $OPT_SS.TMPLDEFN_ID

begin-SELECT
OPT_SS.PY_YE_RPT_SS
OPT_SS.REPORT_DEFN_ID
OPT_SS.TMPLDEFN_ID
OPT_SS.PY_RPT_BATCH_SIZE

  move &OPT_SS.PY_YE_RPT_SS      to $OPT_SS.PY_YE_RPT_SS
  move &OPT_SS.REPORT_DEFN_ID    to $OPT_SS.REPORT_DEFN_ID
  move &OPT_SS.TMPLDEFN_ID       to $OPT_SS.TMPLDEFN_ID
!  move &OPT_SS.PY_RPT_BATCH_SIZE to #OPT_SS.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_SS
WHERE OPT_SS.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_SS.TAXFORM_ID      = 'T'
  AND OPT_SS.PY_W2_COPY_TYPE = $RC_CAN_YE.T4_Copy_Type
  AND OPT_SS.PY_YE_RPT_SS    = 'Y'
end-SELECT

! fetch definitions for bulk report

  move ' '  to $OPT_BLK.REPORT_DEFN_ID
  move ' '  to $OPT_BLK.TMPLDEFN_ID
  move 0    to #OPT_BLK.PY_RPT_BATCH_SIZE

begin-SELECT
OPT_BLK.REPORT_DEFN_ID
OPT_BLK.TMPLDEFN_ID
OPT_BLK.PY_RPT_BATCH_SIZE

  move &OPT_BLK.REPORT_DEFN_ID    to $OPT_BLK.REPORT_DEFN_ID
  move &OPT_BLK.TMPLDEFN_ID       to $OPT_BLK.TMPLDEFN_ID
  move &OPT_BLK.PY_RPT_BATCH_SIZE to #OPT_BLK.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_BLK
WHERE OPT_BLK.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_BLK.TAXFORM_ID      = 'T'
  AND OPT_BLK.PY_W2_COPY_TYPE = $RC_CAN_YE.T4_Copy_Type
  AND OPT_BLK.PY_YE_RPT_SS    <> 'Y'
end-SELECT

end-procedure

begin-procedure Check-Burst-Value
  let $Py_Ye_Rpt_Burst = 'N'
begin-SELECT
burst.BURST_FIELDNAME

  if rtrim(&burst.BURST_FIELDNAME, ' ') = ''
     let $Py_Ye_Rpt_Burst = 'N'
  else
     let $Py_Ye_Rpt_Burst = 'Y'
  end-if

  exit-SELECT

from PSXPRPTDEFN burst
WHERE burst.REPORT_DEFN_ID = $Report_Defn_ID
end-SELECT
end-procedure

begin-procedure Get-SS-Consent
  let $Consent = 'N'
begin-SELECT
CONS.YE_CONSENT_CURRENT

  move &CONS.YE_CONSENT_CURRENT to $Consent

FROM PS_PY_YE_CONS_CAN CONS
WHERE CONS.EMPLID = &EE.EMPLID
  AND CONS.LASTUPDDTTM =
      (SELECT MAX(CONS1.LASTUPDDTTM)
       FROM PS_PY_YE_CONS_CAN CONS1
       WHERE CONS1.EMPLID = CONS.EMPLID)
end-SELECT

  if $Consent = 'C' and $RC_CAN_YE.T4_Copy_Type = '2'
     let $UserFlag = 'N'
  else
     let $UserFlag = 'Y'
  end-if
end-procedure


begin-procedure Clear-Guide-Temp
  let $err-statement = 'Clear-Guide-Temp, DELETE PS_PY_SS_CAN_TMP'
begin-SQL on-error=Sql-Statement-Error
DELETE FROM PS_PY_SS_CAN_TMP
WHERE PY_YE_UPD_ACTION <> 'F'
end-SQL
end-procedure

begin-procedure Insert-Guide-Data

  let $updateAction = 'I'
  let $NotifyFlag = 'N'  
  do Get-Guide-Seqnum

  let $err-statement = 'Insert-Guide-Data, INSERT PS_PY_SS_CAN_TMP'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_SS_CAN_TMP
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,EMPLID
,PY_TAX_YEAR
,COMPANY
,TAXFORM_ID
,SEQUENCE_NUMBER
,WAGE_LOSS_PLAN
,PROVINCE
,PY_YE_FORM_SEQNUM
,YE_FORM_ISSUE_DT
,YE_FORM_VIEWING_DT
,ATTACHSYSFILENAME
,ATTACHUSERFILE
,PY_YE_FILEURLID
,YE_SLIP_PROCESS
,PY_YE_REPORT_URL
,PY_YE_BURST_ID
,PROCESS_INSTANCE
,REPORT_DEFN_ID
,BURST_FIELDNAME
,PY_YE_NOTIFY_FLG
,PY_SLIP_FINAL_PRT
,PY_YE_UPD_ACTION)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'CTX910TP'
,#prcs_job_instance
,&SL.EMPLID
,&SL.CALENDAR_YEAR
,&SL.COMPANY
,'T'           ! taxform id
,&SL.SEQUENCE_NUMBER
,&SL.WAGE_LOSS_PLAN
,&SL.PROVINCE
,0             ! form sequence number
,$IssueDate
,$ViewingDate1
,$FName                            ! attachsysfilename
,$FName                            ! attachuserfile
,$OPT_XML.PY_YE_XMLURLID           ! urlid
,&SL.YE_SLIP_PROCESS
,' '                               ! report url
,$BurstValue
,0
,$OPT_SS.REPORT_DEFN_ID
,'BURST_VALUE'
,$NotifyFlag
,$Slip_Final_Print
,$updateAction)
end-SQL

end-procedure

begin-procedure Insert-YE-Runcontrol
  let $err-statement = 'Insert-YE-Runcontrol, INSERT PS_PY_YE_SLIP_RCTL'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_YE_SLIP_RCTL
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,REPORT_DEFN_ID
,TMPLDEFN_ID
,PY_YE_SOURCEFILE
,PY_YE_SOURCELOC
,PY_YE_SRC_FILENAME
,PY_YE_OSPLATFORM
,FORM_ID
,T4_FINAL_PRINT
,T4A_FINAL_PRINT
,T4_COPY_TYPE
,PY_YE_RPT_BURST
,PY_YE_RPT_SS
,PY_RPT_DEFN_ID_SS
,PY_RPT_TMPL_ID_SS
,TAXFORM_ID
,PY_YE_SOURCEFILE2
,PY_YE_SRC_FILENAM2
,PY_SLIP_FINAL_PRT
,PY_YE_FILE_COUNT
,PY_YE_XMLURLID
,PY_TAX_YEAR
)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'CTX910TP'
,#prcs_job_instance
,$OPT_BLK.REPORT_DEFN_ID
,$OPT_BLK.TMPLDEFN_ID
,$sourceFile2
,$sourceLocation2
,$sourceFileName2
,$yeOS
,'XMLP'
,$RC_CAN_YE.T4_Final_Print
,$RC_CAN_YE.T4A_Final_Print
,$RC_CAN_YE.T4_Copy_Type
,$RC_CAN_YE.Py_Ye_Rpt_Burst
,$OPT_SS.PY_YE_RPT_SS
,$OPT_SS.REPORT_DEFN_ID
,$OPT_SS.TMPLDEFN_ID
,'T'
,$sourceFile2
,$sourceFileName2
,$Slip_Final_Print
,0
,$OPT_XML.PY_YE_XMLURLID
,&SL.CALENDAR_YEAR
)
end-SQL
end-procedure

begin-procedure Get-Setup-Viewing-Date
  let $yeopt.YE_FORM_VIEWING_DT = ''
  let $yeopt.PY_YE_SS_NOTE_DT   = ''
  
  let $Year4 = '1'
  do Format-DateTime('20491231', $ViewingDate, {DEFCMP},'','native')  

begin-SELECT
yeopt.YE_FORM_VIEWING_DT
yeopt.PY_YE_SS_NOTE_DT

  let $yeopt.YE_FORM_VIEWING_DT = &yeopt.YE_FORM_VIEWING_DT
  let $yeopt.PY_YE_SS_NOTE_DT   = &yeopt.PY_YE_SS_NOTE_DT
    
  if $yeopt.YE_FORM_VIEWING_DT <> '' and
     $yeopt.YE_FORM_VIEWING_DT >= $IssueDate
     
     let $ViewingDate = $yeopt.YE_FORM_VIEWING_DT
     
  else
     if $yeopt.YE_FORM_VIEWING_DT <> '' and
        $yeopt.YE_FORM_VIEWING_DT < $IssueDate
        
        let $ViewingDate = $IssueDate
        
     end-if
  end-if        

from PS_PY_YEOPT_TX_CAN yeopt
WHERE yeopt.COMPANY     = &SL.COMPANY
  AND yeopt.PY_TAX_YEAR = &SL.CALENDAR_YEAR
  AND yeopt.TAXFORM_ID  = 'T'
end-SELECT
end-procedure

begin-procedure Get-Guide-Seqnum
  let #gde.PY_YE_FORM_SEQNUM =  0
  let $ViewingDate1 = $ViewingDate

begin-SELECT
gde.PY_YE_FORM_SEQNUM
gde.YE_FORM_VIEWING_DT
gde.PY_YE_NOTIFY_FLG

  let #gde.PY_YE_FORM_SEQNUM = &gde.PY_YE_FORM_SEQNUM
  let $NotifyFlag = &gde.PY_YE_NOTIFY_FLG  
  let $ViewingDate1 = &gde.YE_FORM_VIEWING_DT
  let $updateAction = 'C'

  exit-SELECT

from PS_PY_SS_CAN_GDE gde
WHERE gde.EMPLID = &SL.EMPLID
  AND gde.PY_TAX_YEAR = &SL.CALENDAR_YEAR
  AND gde.COMPANY = &SL.COMPANY
  AND gde.TAXFORM_ID = 'T'
  AND gde.SEQUENCE_NUMBER = &SL.SEQUENCE_NUMBER
  AND gde.WAGE_LOSS_PLAN   = &SL.WAGE_LOSS_PLAN
  AND gde.PROVINCE    = &SL.PROVINCE
ORDER BY gde.PY_YE_FORM_SEQNUM DESC
end-SELECT

  if $updateAction <> 'C'
     let #gde.PY_YE_FORM_SEQNUM = #gde.PY_YE_FORM_SEQNUM + 1
  end-if
  
! It is possible that an Original is run more than once. Therefore,
! the forms must not be viewable until released.
  if $updateAction = 'C' and $NotifyFlag = 'N'
     
     let $ViewingDate1 = $ViewingDate
  end-if
  
end-procedure

begin-procedure Capture-OS
  let $yeOS = ' '

  #ifdef NT
     let $yeOS = 'NT'
  #end-if

  #ifdef MVS
     let $yeOS = 'MVS'
  #end-if

  #ifdef UNIX
     let $yeOS = 'UNIX'
  #end-if
end-procedure

!----------------------------------
begin-procedure Sql-Statement-Error
!----------------------------------
  show $err-statement
  show ' Error : ' $sql-error
end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getdptnm.sqc'  !Get-Department-Name
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc'  ! Get-Can-Tax YE Report Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'pyxmlbld.sqc'  !Routines for XML formatting
#endif


