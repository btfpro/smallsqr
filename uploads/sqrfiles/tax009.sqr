!**************************************
!  TAX009:  Local Tax Deposit Summary *
!**************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:06:11:16                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization
#Include 'usarpt.sqc'   !Get USA variables


begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX009' to $ReportID
  move 'Local Tax Deposit Summary' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

begin-procedure Array-Initialization
  move '**' to $priorState
  create-array name=Totals size=5 -
    field=TotalName:char field=total:number:9 field=startCol:number:9
  put 'Grand Total'            into Totals(1) TotalName
  put 'Company Total'          into Totals(2) TotalName
  put 'Pay Period Total'       into Totals(3) TotalName
  put 'Check Date Total'       into Totals(4) TotalName
  put  58 into Totals(0) startCol(0)
  put  69 into Totals(0) startCol(1)
  put  84 into Totals(0) startCol(2)
  put  98 into Totals(0) startCol(3)
  put 109 into Totals(0) startCol(4)
  put 124 into Totals(0) startCol(5)
  put 138 into Totals(0) startCol(6)
  put 149 into Totals(0) startCol(7)
  put 164 into Totals(0) startCol(8)
end-procedure

begin-heading 8
  #Include 'stdhdgpi.sqc'
  #Include 'stdhdg05.sqc'
  print 'Locality        Locality Name           '             (+2,1)
  print '                  <------------ RESIDENT ------------->'             ()
  print '   <----------- NON-RESIDENT ---------->'             ()
  print '   <-------------- TOTAL -------------->'             ()
  print 'State           Locality EIN            '             (+1,1)
  print '                   Count     Taxable Gross        Tax  '             ()
  print '    Count     Taxable Gross        Tax  '             ()
  print '    Count     Taxable Gross        Tax  '             ()
end-heading

begin-procedure Report
begin-SELECT
A.COMPANY    () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT () on-break print=never level=2 procedure=PayEndDate-Change
A.CHECK_DT   () on-break print=never level=3 procedure=CheckDate-Change
C.STATE      () on-break print=never level=4 procedure=State-Local-Change
C.LOCALITY   () on-break print=never level=4 procedure=State-Local-Change
B.EMPLID
C.RESIDENT
C.TXGRS_CUR
C.TAX_CUR

  if &A.Company <> $priorCompany
    move &A.Company to $Company
    move &A.Company to $priorCompany
    do Get-Company-Data  !for Federal_EIN
  end-if
  move &A.Pay_End_Dt  to $PayEndDate
  move &A.Check_Dt    to $AsOfDate
  let $State = rtrim(&C.State, ' ')
  move &C.Locality    to $Locality

                                       !only count employee once/loc
                                       !regardless of # of checks
  if &B.EmplID <> $PriorEmplID or &C.Locality <> $PriorLocality
    if &C.Resident = 'Y'
      add 1 to #ResCount
    else
      add 1 to #NResCount
    end-if
    move &B.EmplID   to $PriorEmplID
    move &C.Locality to $priorLocality
  end-if

  if &C.Resident = 'Y'
    add &C.TxGrs_Cur to #ResTxGrs_Cur
    add &C.Tax_Cur   to #ResTax_Cur
  else
    add &C.TxGrs_Cur to #NResTxGrs_Cur
    add &C.Tax_Cur   to #NResTax_Cur
  end-if

FROM  PS_PAY_CALENDAR A, PS_PAY_CHECK B, PS_PAY_TAX C
WHERE [$SlctCalendar]
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = B.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND C.COMPANY    = A.COMPANY
  AND C.PAYGROUP   = B.PAYGROUP
  AND C.PAY_END_DT = B.PAY_END_DT
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.SEPCHK     = B.SEPCHK
  AND C.TAX_CLASS  IN ('H','P','B')
  AND C.LOCALITY     <> ' '
ORDER BY A.COMPANY, A.PAY_END_DT, A.CHECK_DT,
         C.STATE, C.LOCALITY, B.EMPLID
end-SELECT
  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals
end-procedure

begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure CheckDate-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure State-Local-Change
  if #current-line > 56  !ensure enough lines for the tax authority
    new-page
  end-if
  if $State <> $priorState
    move $State to $priorState
    do Get-State-Tax-Data
  end-if
  print $Locality          (+1,1)
  print $StateName         (+1,1)
  position (-2)
  if RTRIM($Locality, ' ') <> ''
    do Get-Local-Tax-Data
    move &Employer_ID_LWT to $Employer_ID_LWT
    print $Localname           (+1,17)
    if rtrim($Employer_ID_LWT, ' ') <> ''
      print $Employer_ID_LWT     (+1,17)
    end-if
    move '' to $Employer_ID_LWT
    position (-2)
  end-if
  do Format-Number(#ResCount, $out, '999,999')
  print $out           (+1,58)
  do Format-Number(#ResTxGrs_Cur, $out, 'b9,999,999.99mi')
  print $out           (0,69)
  do Format-Number(#ResTax_Cur, $out, 'b,999,999.99mi')
  print $out           (0,84)
  do Format-Number(#NResCount, $out, '999,999')
  print $out           (0,98)
  do Format-Number(#NResTxGrs_Cur, $out, 'b9,999,999.99mi')
  print $out           (0,109)
  do Format-Number(#NResTax_Cur, $out, 'b,999,999.99mi')
  print $out           (0,124)
  add #ResCount      to #TotalCount
  add #ResTxGrs_Cur  to #TotalGrs
  add #ResTax_Cur    to #TotalTax
  add #NResCount     to #TotalCount
  add #NResTxGrs_Cur to #TotalGrs
  add #NResTax_Cur   to #TotalTax
  do Format-Number(#TotalCount, $out, '999,999')
  print $out           (0,138)
  do Format-Number(#TotalGrs, $out, 'b9,999,999.99mi')
  print $out           (0,149)
  do Format-Number(#TotalTax, $out, 'b,999,999.99mi')
  print $out           (0,164)
  array-add #ResCount   #ResTxGrs_Cur  #ResTax_Cur -
            #NResCount  #NResTxGrs_Cur #NResTax_Cur -
            #TotalCount #TotalGrs      #TotalTax -
         to Totals(4) total(0) total(1) total(2) -
                      total(3) total(4) total(5) -
                      total(6) total(7) total(8)
  move 0 to #ResCount
  move 0 to #NResCount
  move 0 to #ResTxGrs_Cur
  move 0 to #NResTxGrs_Cur
  move 0 to #ResTax_Cur
  move 0 to #NResTax_Cur
  move 0 to #TotalCount
  move 0 to #TotalGrs
  move 0 to #TotalTax
  position (+2)
end-procedure

begin-procedure Print-Totals
  do State-Local-Change
  move 4 to #totalRow
  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,21)
    move 0 to #i
    while #i <= 8
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      evaluate #i
        when = 0
        when = 3
        when = 6
          do Format-Number(#total, $out, '999,999')
          print $out (0,#startCol)
        when = 1
        when = 4
        when = 7
          do Format-Number(#total, $out, 'B9,999,999.00mi')
          print $out (0,#startCol)
        when-other
          do Format-Number(#total, $out, 'B,999,999.99mi')
          print $out (0,#startCol)
      end-evaluate
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while
    subtract 1 from #totalRow
  end-while
  if $End = 'Y'
    do Reset
  end-if
  new-page
end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Process Scheduler Run Control
#Include 'stdapi.sqc'    !Update Process API
