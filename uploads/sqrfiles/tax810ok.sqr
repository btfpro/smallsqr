!***********************************************************************
!  TAX810OK:  Qtrly Wage List - OKLAHOMA                               *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2011/09/23:12:20:31                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860824                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display ''
    display 'Upon successful conclusion of this program, the file will have been'
    display 'created, as follows:'
    display ''
    display ''
    display '  TAX810OK  contains 275-character records in the format required'
    display '            for electronic submission of quarterly wages to the'
    display '            Oklahoma Employment Security Commission.'
    display ''
    display ''
    display 'Follow the instructions from the department for preparing and'
    display 'submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'TAX810OK' to $ReportID
  move 'Oklahoma Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating file for Oklahoma UI Wage Reporting'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Initialization
  do Get-Calendar-Year-Id
  do Stdapi-Init
end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'OK'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move &TX.Balance_Year to $CalYear 9999
!  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr
  display ' '
  do Open-File

end-procedure

begin-procedure Open-File
if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099

#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810OK' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810OK.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=80:fixed
else

   let  $FileID = '{IMPORTPREFIX}' || 'TAX810OK' || '{IMPORTSUFFIX}'
   open $FileID as 10 for-writing record=275:fixed

end-if
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL

  move &A.Company to $Company
  move &A.Descr to  $CompanyName

  move '' to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F > 0
     do Print-File-Tot
  end-if
end-procedure


begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'OK'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '        to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID    to $NATIONAL_ID
  end-if

  move 'N'        to $Name-Err
  move &C.EmplID  to $EmplID

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  do Check-Name-Alpha

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  add #NlGrs_QTD to #Co_NlGrs_QTD
  add #TxGrs_QTD to #Co_TxGrs_QTD

  do Write-S-Record

  move 'Y' to $RecordWritten
end-procedure


begin-procedure Check-Name-Alpha

  do  Is-String-Alpha ($LastName, #Return_Value, $LstNm, $LastNm)
  if #Return_Value = 0
     move 'Y'     to $Name-Err
     move $LastNm to $LastName
  end-if

  do  Is-String-Alpha ($FirstName, #Return_Value, $FstNm, $FirstNm)
  if #Return_Value = 0
     move 'Y'      to $Name-Err
     move $FirstNm to $FirstName
  end-if

  do  Is-String-Alpha ($MidInitial, #Return_Value, $MidIn, $MidInit)
  if #Return_Value = 0
     move 'Y'      to $Name-Err
     move $MidInit to $MidInitial
  end-if


! PRINT MESSAGE IF EMPLOYEE NAME CONTAINS SPECIAL CHARACTERS
  if $Name-Err = 'Y'
     display '*** WARNING ***  Employee name contains special characters - Company: ' noline
     display $Company noline
     display '   Employee: ' noline
     display $EmplID noline
     display '  ' noline
     display $FstNm noline
     display ' ' noline
     display $MidIn noline
     display ' ' noline
     display $LstNm
  end-if

end-procedure

begin-procedure Is-String-Alpha ($Test_String, :#Return_Value, :$PrevNm, :$New_String)

  let #Max_Lngth    = length ($Test_String)
  let #Return_Value = 1
  let #Char_Pos     = 1
  let $PrevNm       = $Test_String
  let $New_String   = $Test_String

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($New_String, #Char_Pos, 1)
    let #Alpha     = RANGE($Test_Char,'A','Z')
    let #NumDigit  = RANGE($Test_Char,'0','9')

    if (#Alpha = 0) AND (#NumDigit = 0) AND ($Test_Char <> ' ')
       let #Return_Value = 0
       let $NewName      = TRANSLATE($New_String, $Test_Char, ' ')
       let $New_String   = $NewName
    end-if
    add 1 to #Char_Pos
  end-while

end-procedure


begin-procedure Before-Company
  do Get-Company-Data
  uppercase $CompanyName

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display $Company
    display '*********************** Processing stopped *********************'
    display 'Company'
    display $Company
    stop
  end-if

  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),12)
    end-if
  end-while

  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),12)
    end-if
  end-while

  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.999999
  let $Experience_Rt = SUBSTR($Experience_Rt,3,6)


! PRINT MESSAGE IF COMPANY NAME CONTAINS SPECIAL CHARACTERS
  do  Is-String-Alpha ($CompanyName, #Return_Value, $CompNm, $CompName)
  if #Return_Value = 0
     display ' '
     display '*** WARNING ***  Company  name contains special characters - Company: ' noline
     display $Company noline
     display '   ' noline
     display $CompNm
  end-if


  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if

  do Write-E-Record
end-procedure

begin-procedure After-Company

  if #Count_S > 0
    do Write-T-Record
  end-if

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Count_S to #Count_F

  if $Company <> $LastCompany
     move $Company     to $LastCompany
     move $CompanyName to $LastCompanyName
  end-if

  do Print-Company-Tot

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD
    move 0 to #Count_S
    new-page

end-procedure


begin-procedure Write-E-Record
  move &CT.Federal_EIN  to $FedEIN 099999999
  move $CompName        to $ErName
!  move $CompnyAdd1      to $ErAddress
!  move $CompnyCity      to $City
!  let $StateCd = rtrim(&CT.State, ' ')
!  move &CT.Postal       to $Zip
!  move &CT.Country      to $Country
  uppercase $ErName
!  uppercase $ErAddress
!  uppercase $City


  write 10 from    'E':1     ! Column   1
              $CalYear:4     ! Column   2 -   5
               $FedEIN:9     ! Column   6 -  14
                   $Sp:9     ! Column  15 -  23
               $ErName:50    ! Column  24 -  73
                   $Sp:86    ! Column  74 - 159
                   'R':1     ! Column 160
                   $Sp:2     ! Column 161 - 162
                   $Sp:4     ! Column 163 - 166
                'UTAX':4     ! Column 167 - 170
                  '40':2     ! Column 171 - 172
             $StateEIN:15    ! Column 173 - 187
          $QtrEndMonth:2     ! Column 188 - 189
                   '1':1     ! Column 190
                   $Sp:85    ! Column 191 - 275

  move 'Y' to $RecordWritten
end-procedure


begin-procedure Write-S-Record

  let $NlGrs_QTD  = EDIT(#NlGrs_QTD  * 100,'09999999999999')
  let $TxGrs_QTD  = EDIT(#TxGrs_QTD  * 100,'09999999999999')


  write 10 from 'S':1    ! Column 1
       $NATIONAL_ID:9    ! Column 2-10
          $LastName:20   ! Column 11-30
         $FirstName:12   ! Column 31-42
        $MidInitial:1    ! Column 43
               '40':2    ! Column 44-45
                $Sp:18   ! Column 46-63
         $NlGrs_QTD:14   ! Column 64-77
                $Sp:14   ! Column 78-91
         $TxGrs_QTD:14   ! Column 92-105
                $Sp:37   ! Column 106-142
             'UTAX':4    ! Column 143-146
          $StateEIN:15   ! Column 147-161
                $Sp:53   ! Column 162-214
       $QtrEndMonth:2    ! Column 215-216
           $RptYear:4    ! Column 217-220
                $Sp:55   ! Column 221-275


  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $TxGrs_QTD
  move 0  to #TxGrs_QTD

  add 1 to #Count_S

end-procedure


begin-procedure Write-T-Record

  move #Count_S to $Count_S 0999999
  add  #Count_S to #TotCount_S

  let $Co_NlGrs_QTD  = EDIT(#Co_NlGrs_QTD  * 100,'09999999999999')
  let $Co_TxGrs_QTD  = EDIT(#Co_TxGrs_QTD  * 100,'09999999999999')

  add #TaxesDue    to #TotTaxesDue
  add #Month1Count to #TotMonth1Count
  add #Month2Count to #TotMonth2Count
  add #Month3Count to #TotMonth3Count


  write 10 from    'T':1     ! Column   1
              $Count_S:7     ! Column   2 -   8
                'UTAX':4     ! Column   9 -  12
                   $Sp:14    ! Column  13 -  26
         $Co_NlGrs_QTD:14    ! Column  27 -  40
                   $Sp:14    ! Column  41 -  54
         $Co_TxGrs_QTD:14    ! Column  55 -  68
                   $Sp:13    ! Column  69 -  81
        $Experience_Rt:6     ! Column  82 -  87
             $TaxesDue:13    ! Column  88 - 100
                   $Sp:126   ! Column 101 - 226
          $Month1Count:7     ! Column 227 - 233
          $Month2Count:7     ! Column 234 - 240
          $Month3Count:7     ! Column 241 - 247
                   $Sp:28    ! Column 248 - 275

end-procedure


begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should not include commas)'
  input $TaxesDue        '   UI Taxes Due          '
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'

  move $TaxesDue        to #TaxesDue
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  let  $TaxesDue        = EDIT(#TaxesDue    * 100,'0999999999999')
  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure

begin-procedure Company-Run-Control
begin-select

OK.UI_TAXES_DUE
OK.UI_MONTH1_COUNT
OK.UI_MONTH2_COUNT
OK.UI_MONTH3_COUNT

FROM PS_RC_TAX810OK OK
WHERE OK.OPRID       = $Prcs_OprID
  AND OK.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND OK.COMPANY     = &C.Company
end-SELECT

  move &OK.UI_TAXES_DUE        to #TaxesDue
  move &OK.UI_Month1_Count     to #Month1Count
  move &OK.UI_Month2_Count     to #Month2Count
  move &OK.UI_Month3_Count     to #Month3Count

  let  $TaxesDue        = EDIT(#TaxesDue    * 100,'0999999999999')
  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure


begin-procedure Print-Company-Tot
  if #Neg_TxGrs_QTD <> 0 or #Neg_NlGrs_QTD <> 0
    print '** Total **'      (+2,1,14)
    print #Neg_TxGrs_QTD     (0,16) edit 99,999,999.99mi
    print #Neg_NlGrs_QTD     (0,34) edit 99,999,999.99mi

    move 0 to #Neg_TxGrs_QTD
    move 0 to #Neg_NlGrs_QTD
    end-if


  print '**** Company Total ****'        (+3,1)
  print 'No Limit Gross QTD '            (+2,1,38)
  print #Co_NlGrs_QTD                     (,55)   edit 999,999,999.99mi

  print 'Taxable Gross QTD  '            (+2,1,38)
  print #Co_TxGrs_QTD                     (,55)   edit 999,999,999.99mi

  print 'Taxes Due '                     (+2,1,26)
  print #TaxesDue                         (,55)   edit 999,999,999.99mi

  print 'Employees Reported'             (+2,1,29)
  print #Count_S                          (,58)   edit 999,999,999

  print 'Month 1 Count '                 (+2,1,33)
  print #Month1Count                      (,59)   edit 99,999,999
  
  print 'Month 2 Count '                 (+2,1,33)
  print #Month2Count                      (,59)   edit 99,999,999

  print 'Month 3 Count '                 (+2,1,33)
  print #Month3Count                      (,59)   edit 99,999,999

end-procedure


begin-procedure Print-File-Tot

  move '' to $LastCompany
  move '' to $LastCompanyName

  print '**** File Total ****'           (+3,1)
  print 'No Limit Gross QTD '            (+2,1,38)
  print #Tot_NlGrs_QTD                    (,55)   edit 999,999,999.99mi

  print 'Taxable Gross QTD  '            (+2,1,38)
  print #Tot_TxGrs_QTD                    (,55)   edit 999,999,999.99mi

  print 'Taxes Due '                     (+2,1,26)
  print #TotTaxesDue                      (,55)   edit 999,999,999.99mi

  print 'Employees Reported'             (+2,1,29)
  print #Count_F                          (,58)   edit 999,999,999

  print 'Month 1 Count '                 (+2,1,33)
  print #TotMonth1Count                   (,59)   edit 99,999,999
  
  print 'Month 2 Count '                 (+2,1,33)
  print #TotMonth2Count                   (,59)   edit 99,999,999

  print 'Month 3 Count '                 (+2,1,33)
  print #TotMonth3Count                   (,59)   edit 99,999,999

  print 'Output File:  '                 (+3,1)
  print $FileID                          (+1,10)

end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
