! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------!
! VALIDDT.SQC:  Validation Logic for User Entered Dates                !
!----------------------------------------------------------------------!
! Description:  Function which accepts a date in native format and     !
!               validates it.  The $ValidFlag is returned to the       !
!               calling program as 'Y' or 'N'.  'N' indicates the      !
!               date entered is not valid.                             !
!                                                                      !
! Parameters passed:  $NativeDate                                      !
!                                                                      !
! Results returned:   $ValidFlag                                       !
!                                                                      !
!----------------------------------------------------------------------!

!----------------------------------------------------------------------!
! Procedure:    Validate-Native-Date                                   !
! Description:  This routine converts the native date into compare     !
!               date format.  It parses the date into year,            !
!               month and day.  The month and day are then evaluated   !
!               for validity and the ValidFlag is set and returned to  !
!               the calling program.                                   !
!----------------------------------------------------------------------!

begin-procedure Validate-Native-Date($NativeDate,:$ValidFlag)
#ifdef debugx
    show 'Entering VALIDDT.SQC: Validate-Native-Date'
    show ' Input $NativeDate: ' $NativeDate
#end-if

    move 'Y' to $ValidFlag

! Format the native date into Date components

    do ConvertToComponents($NativeDate,$Year,$Month,$Day)

! Convert individual variables to numerics

    let #Year  = to_number($Year)
    let #Month = to_number($Month)
    let #Day   = to_number($Day)

! Validate the Month

    if #Month = 0 or #Month > 12
        move 'N' to $ValidFlag
    end-if

! Validate Day of the Month if Month is valid

    if $ValidFlag = 'Y'
        if #Month = 2
            move 28 to #MonthDays
            if (((mod(#Year,4) = 0) and (mod(#Year,100) != 0)) or        ! Leap Year check
                 (mod(#Year,400) = 0))
                add 1 to #MonthDays
            end-if
        else
            if #Month = 4 or #Month = 6 or #Month = 9 or #Month = 11
                move 30 to #MonthDays
            else
                move 31 to #MonthDays
            end-if
        end-if
    end-if

    if #Day = 0 or #Day > #MonthDays
        move 'N' to $ValidFlag
    end-if

#ifdef debugx
    show 'Exiting VALIDDT.SQC: Validate-Native-Date'
    show ' Output $ValidFlag: ' $ValidFlag
    #ifdef debugy
        show ' Working variables:'
        show '  #Year     : ' #Year
        show '  #Month    : ' #Month
        show '  #Day      : ' #Day
        show '  #MonthDays: ' #MonthDays
    #end-if
#end-if
end-procedure


!----------------------------------------------------------------------!
! Procedure:    ConvertToComponents                                    !
! Description:  This routine will convert $Datein (Native Date format) !
!                 to its number equivelent                             !
!                 The result will be returned as $YY, $MM, $DD         !
!----------------------------------------------------------------------!

begin-procedure ConvertToComponents($Datein,:$YY,:$MM,:$DD)
#ifdef debugx
    show 'Entering VALIDDT.SQC: ConvertToComponents'
    show ' Input $NativeDate: ' $NativeDate
#end-if

    let $YY = '0000'
    let $MM = '00'
    let $DD = '00'

! Format: 'YYYY-MM-DD' (DB2ALL,Informix)
#if {Native-DateMask} = 'YYYY-MM-DD'
    let $YY = substr($Datein,1,4)
    let $MM = substr($Datein,6,2)
    let $DD = substr($Datein,9,2)
#end-if
! Format: 'MON DD YYYY' (Microsoft,Sybase)
#if {Native-DateMask} = 'MON DD YYYY'
    let $YY = substr($Datein,8,4)
    let $MM = substr($Datein,1,3)
    do Convert-To-MM($MM)
    let $DD = substr($Datein,5,2)
#end-if

! Format: 'DD-MON-YYYY' (Oracle)
#if {Native-DateMask} = 'DD-MON-YYYY'
    let $YY = substr($Datein,8,4)
    let $MM = substr($Datein,4,3)
    do Convert-To-MM($MM)
    let $DD = substr($Datein,1,2)
#end-if

#ifdef debugx
  show 'Exiting VALIDDT.SQC: ConvertToComponents'
  show ' Output variables:'
  show '  $YY : ' $YY
  show '  $MM : ' $MM
  show '  $DD : ' $DD
#end-if

end-procedure


