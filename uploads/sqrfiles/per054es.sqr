!*********************************************
!  PER054ES:  OFFICIAL LIST OF EMPLOYEES    *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:47:56                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
Begin-Setup
#Include 'hrpsl255.sqc'  !Printer and page-size initialization
End-Setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-Heading 7

  #Include 'stdhdgtr.sqc'

  
do Init_Report_Translation ($ReportID, $language_cd)

do Get_Field_Information ('PER054ES',     'REPORT_TITLE',         $REPORTTITLE,         #DW)
do Get_Field_Information ('PER054ES',     'REPORT_DESCR',         $REPORT_DESCR,          #DW)
do Get_Field_Information ('PER054ES',     'LOCATION',             $LOCATION_LBL,          #DW)
do Get_Field_Information ('PER054ES',     'MATRICULA1',           $MATRICULA1_LBL,       #DW)
do Get_Field_Information ('PER054ES',     'MATRICULA2',           $MATRICULA2_LBL,       #DW)
do Get_Field_Information ('PER054ES',     'NAME',                 $NAME_LBL,            #DW)
do Get_Field_Information ('PER054ES',     'GENDER',               $GENDER_LBL,          #DW)
do Get_Field_Information ('PER054ES',     'MARITAL_STATUS1',      $MARITAL_STATUS1_LBL,  #DW)
do Get_Field_Information ('PER054ES',     'MARITAL_STATUS2',      $MARITAL_STATUS2_LBL,  #DW)
do Get_Field_Information ('PER054ES',     'BIRTHDATE',            $BIRTHDATE_LBL,       #DW)
do Get_Field_Information ('PER054ES',     'BIRTHPLACE',           $BIRTHPLACE_LBL,      #DW)
do Get_Field_Information ('PER054ES',     'PROVINCE',             $PROVINCE_LBL,        #DW)
do Get_Field_Information ('PER054ES',     'SSN',                  $SSN_LBL,             #DW)
do Get_Field_Information ('PER054ES',     'HIRE_DT',              $HIRE_DT_LBL, #DW)
do Get_Field_Information ('PER054ES',     'CATEG_DATE',           $CATEG_DATE_LBL,      #DW)
do Get_Field_Information ('PER054ES',     'WORKGROUP1',           $WORKGROUP1_LBL,       #DW)
do Get_Field_Information ('PER054ES',     'WORKGROUP2',           $WORKGROUP2_LBL,       #DW)
do Get_Field_Information ('PER054ES',     'LAST_DAY_WORKED1',     $LAST_DAY_WORKED1_LBL, #DW)
do Get_Field_Information ('PER054ES',     'LAST_DAY_WORKED2',     $LAST_DAY_WORKED2_LBL, #DW)
do Get_Field_Information ('PER054ES',     'LAST_MATRICULA1',      $LAST_MATRICULA1_LBL,  #DW)
do Get_Field_Information ('PER054ES',     'LAST_MATRICULA2',      $LAST_MATRICULA2_LBL,  #DW)
do Get_Field_Information ('PER054ES',     'COMMENTS',             $COMMENTS_LBL,        #DW)




  Let $Line1 = $LOCATION_LBL || ' : ' || $LocationName
  PRINT $Line1 (3,1)
  Let $Line1 = $REPORT_DESCR || ' : ' || $ReportType
  PRINT $Line1 (4,1)
  
  
Graphic (6,1,235) Box 3
Graphic (5,11,3) Vert-Line
Graphic (5,41,3) Vert-Line
Graphic (5,48,3) Vert-Line
Graphic (5,57,3) Vert-Line
Graphic (5,67,3) Vert-Line
Graphic (5,86,3) Vert-Line
Graphic (5,103,3) Vert-Line
Graphic (5,118,3) Vert-Line
Graphic (5,129,3) Vert-Line
Graphic (5,166,3) Vert-Line
Graphic (5,172,3) Vert-Line
Graphic (5,182,3) Vert-Line
Graphic (5,191,3) Vert-Line
       
            
PRINT  $MATRICULA1_LBL        (+1,2)
PRINT  $NAME_LBL             (0,25)
PRINT  $GENDER_LBL           (0,42)
PRINT  $MARITAL_STATUS1_LBL   (0,49)
PRINT  $BIRTHDATE_LBL        (0,58)
PRINT  $BIRTHPLACE_LBL       (0,72)
PRINT  $PROVINCE_LBL         (0,91)
PRINT  $SSN_LBL              (0,110)
PRINT  $HIRE_DT_LBL          (0,119)
PRINT  $CATEG_DATE_LBL       (0,138)
PRINT  $WORKGROUP1_LBL        (0,167)
PRINT  $LAST_DAY_WORKED1_LBL  (0,174)
PRINT  $LAST_MATRICULA1_LBL   (0,184)
PRINT  $COMMENTS_LBL          (0,198)

PRINT  $MATRICULA2_LBL        (+1,2)
PRINT  $MARITAL_STATUS2_LBL   (0,49)
PRINT  $WORKGROUP2_LBL        (0,167)
PRINT  $LAST_DAY_WORKED2_LBL  (0,175)
PRINT  $MATRICULA1_LBL        (0,183)
   
End-Heading

!**********************************************************************!
! Procedure:     Init-Report                                           !
!**********************************************************************!

Begin-Procedure Init-Report
#debug do Debug-Msg('Init-Report')
  move 'PER054ES' to $ReportId
  
  do Stdapi-Init

  if $prcs_process_instance = ''
    ! No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer

End-Procedure


!**********************************************************************!
! Procedure:     Process-Main                                          !
!**********************************************************************!

Begin-Procedure Process-Main
#debug do Debug-Msg('Process-Main')

  DO Get-Location-Name
  move 'MATRICL_BOOK_TYPE'  to $FIELDNAME
  move $Matrtype to $FIELDVALUE
  do read-translate-table
  let $ReportType = $XLATLONGNAME
  
If $Matrtype = 'C'    
   Do Current-Employees
Else
   Do All-Employees
End-If
let $language_cd = 'ENG'

End-Procedure Process-Main

!**********************************************************************!
! Procedure:     Current-Employees                                     !
! Description:   Get Current Employees                                 !
!**********************************************************************!

Begin-Procedure Current-Employees
#debug do Debug-Msg('Current-Employees')


let $sql-statement = 'PER054ES.SQR,Current-Employees,Select,PS_JOB'
begin-SELECT on-error=SQL-Error
MIN(A.EFFDT) &EFFDT, 
A.EMPLID, 
A.EMPL_RCD, 
A.MATRICULA_NBR MATRICULA_NBR &MATRICULA_NBR

  move &A.EMPLID to $EMPLID
  move &A.EMPL_RCD to $EMPL_RCD
  move &EFFDT to $EFFDT
  Do Get-Employee-Data
FROM PS_JOB A
WHERE A.LOCATION = $LOCATION
AND A.MATRICULA_NBR = (SELECT MAX (ED1.MATRICULA_NBR) FROM PS_JOB ED1 
WHERE A.EMPLID = ED1.EMPLID 
AND A.EMPL_RCD = ED1.EMPL_RCD)
GROUP BY A.EMPLID, A.EMPL_RCD, A.MATRICULA_NBR
ORDER BY A.MATRICULA_NBR


End-Select

End-Procedure !Current-Employees

!**********************************************************************!
! Procedure:     All-Employees                                         !
! Description:   Get All Employees                                     !
!**********************************************************************!

Begin-Procedure All-Employees
#debug do Debug-Msg('All-Employees')
let $sql-statement = 'PER054ES.SQR,All-Employees,Select,PS_JOB'
begin-SELECT on-error=SQL-Error

MIN(JOB1.EFFDT), &JOB1.EFFDT
JOB1.EMPLID, 
JOB1.EMPL_RCD, 
JOB1.MATRICULA_NBR 
  move &JOB1.EMPLID to $EMPLID
  move &JOB1.EMPL_RCD to $EMPL_RCD
  move &JOB1.EFFDT to $EFFDT

  Do Get-Employee-Data
FROM PS_JOB JOB1
WHERE LOCATION = $LOCATION
GROUP BY JOB1.EMPLID, JOB1.EMPL_RCD , JOB1.MATRICULA_NBR
ORDER BY JOB1.MATRICULA_NBR

End-Select

End-Procedure !All-Employees



!**********************************************************************!
! Procedure:     Get-Employee-Data                                     !
! Description:   Get Employee Main Information                         !
!**********************************************************************!

Begin-Procedure Get-Employee-Data
#debug do Debug-Msg('Get-Employee-Data')
   Do Get-Job-Data    
   Do Get-Employment-Data
   Do Get-Person-Data
   Do Get-Pers-Effdt-Data
   Do Get-Names-Data
   Do Get-Empl-Nid
   Do Get-Empl-State-Descr
   Do Get-Empl-Ctg-Descr
   Do Get-Empl-Last-Matr
   Do Get-Last-Day-Worked
   Do Print-EE-Row
            
End-Procedure 

!**********************************************************************!
! Procedure:     Get-Job-Data                                          !
! Description:   Get Employee Job Data                                 !
!**********************************************************************!

Begin-Procedure Get-Job-Data
#debug do Debug-Msg('Get-Job-Data')


let $sql-statement = 'PER054ES.SQR,Get-Job-Data,Select,PS_JOB'
Begin-Select on-error=SQL-Error
JOB.MATRICULA_NBR
JOB.EMPL_CTG
JOB.EMPL_CTG_L1
JOB.EMPL_CTG_L2
JOB.LABOR_AGREEMENT
JOB.SETID_LBR_AGRMNT
JOB.ACTION
JOB.ACTION_REASON
JOB.EMPL_STATUS
     
     move &JOB.MATRICULA_NBR    to  $Matricula   
     move &JOB.EMPL_CTG         to  $Empl_Ctg       
     move &JOB.EMPL_CTG_L1      to  $Empl_Ctg_L1     
     move &JOB.EMPL_CTG_L2      to  $Empl_Ctg_L2     
     move &JOB.LABOR_AGREEMENT  to  $Agreement  
     move &JOB.SETID_LBR_AGRMNT to  $Setid_Lbr_Agrmnt 
     move &JOB.ACTION           to  $Action           
     move &JOB.ACTION_REASON    to  $Action_Reason    
     move &JOB.EMPL_STATUS      to  $Status    
 
     move 'ACTION'  to $FIELDNAME
     move &JOB.ACTION to $FIELDVALUE
     do read-translate-table
     Do Get-Action-Reason
     if $Action_Reason_Descr <> ''
        let $Separator = ': '
     else
        let $Separator = '. '
     end-if
     let $Comments = RTRIM($XLATLONGNAME,' ') || $Separator || $Action_Reason_Descr
         
FROM PS_JOB JOB
WHERE JOB.EMPLID = $EMPLID
AND JOB.EMPL_RCD = $EMPL_RCD
AND JOB.EFFDT = $EFFDT
AND JOB.EFFSEQ = 0

End-Select

End-Procedure 

!**********************************************************************!
! Procedure:     Get-Names-Data                                        !
! Description:   Get Names Data                                        !
!**********************************************************************!

Begin-Procedure Get-Names-Data
#debug do Debug-Msg('Get-Names-Data')
let $Name = ' '

let $sql-statement = 'PER054ES.SQR,Get-Names-Data,Select,PS_PERSON_NAME'
Begin-Select on-error=SQL-Error
NM.NAME
                                
    move &NM.NAME  to $Name    
      
FROM PS_PERSON_NAME NM
WHERE NM.EMPLID = $EMPLID

End-SELECT
End-Procedure 




!**********************************************************************!
! Procedure:     Get-Employment-Data                                   !
! Description:   Get Employment Data                                   !
!**********************************************************************!

Begin-Procedure Get-Employment-Data
#debug do Debug-Msg('Get-Employment-Data')
let $HIRE_DT = ' '  
let $LastDayWorked = ' '

let $sql-statement = 'PER054ES.SQR,Get-Employment-Data,Select,PS_EMPLOYMENT'
Begin-Select on-error=SQL-Error

{DATEOUT-PREFIX}EMP.LST_ASGN_START_DT{DATEOUT-SUFFIX}   &EMP.LST_ASGN_START_DT
EMP.LAST_DATE_WORKED
     move &EMP.LST_ASGN_START_DT   to  $HIRE_DT    
     move &EMP.LAST_DATE_WORKED    to  $LAST_DAY_WORKED    

FROM PS_PER_ORG_ASGN_VW EMP
WHERE EMP.EMPLID = $EMPLID
! AND  EMP.EMPL_RCD = $EMPL_RCD
! AND  EMP.EFFDT_NOKEY = $EFFDT
! AND  EMP.EFFSEQ_NOKEY = $EFFSEQ

End-SELECT

End-Procedure 

!**********************************************************************!
! Procedure:     Get-Person-Data                                       !
! Description:   Get Person Data                                       !
!**********************************************************************!

Begin-Procedure Get-Person-Data
#debug do Debug-Msg('Get-Person-Data')
let $BIRTHDATE = ' '
let $BIRTHPLACE = ' '
let $BIRTHCOUNTRY = ' '
let $BIRTHSTATE = ' '

let $sql-statement = 'PER054ES.SQR,Get-Person-Data,Select,PS_PERSON'
Begin-Select on-error=SQL-Error
PER.BIRTHDATE
PER.BIRTHPLACE
PER.BIRTHCOUNTRY
PER.BIRTHSTATE

     move &PER.BIRTHDATE     to  $BIRTHDATE    
     move &PER.BIRTHPLACE    to  $BIRTHPLACE         
     move &PER.BIRTHCOUNTRY  to  $BIRTHCOUNTRY      
     move &PER.BIRTHSTATE    to  $BIRTHSTATE      


FROM PS_PERSON PER
WHERE PER.EMPLID = $EMPLID

End-SELECT



End-Procedure 

!**********************************************************************!
! Procedure:     Get-Pers-Effdt-Data                                   !
! Description:   Get Personal Effdt Data                               !
!**********************************************************************!

Begin-Procedure Get-Pers-Effdt-Data
#debug do Debug-Msg('Get-Pers-Effdt-Data')
let $Marital_Status = ' '
let $Gender = ' '



let $sql-statement = 'PER054ES.SQR,Get-Pers-Effdt-Data,Select,PS_PERS_DATA_EFFDT'
Begin-Select on-error=SQL-Error

PED.MAR_STATUS
PED.SEX
                                  
     move 'MAR_STATUS' to  $FIELDNAME
     move &PED.MAR_STATUS  to $FIELDVALUE    
     do read-translate-table
     move $XLATSHORTNAME to $Marital_Status

     move 'SEX'  to $FIELDNAME
     move &PED.SEX to $FIELDVALUE
     do read-translate-table
     move $XLATSHORTNAME to $Gender
      
FROM PS_PERS_DATA_EFFDT PED
WHERE PED.EMPLID = $EMPLID
AND PED.EFFDT = (SELECT MAX(ED2.EFFDT) 
    FROM PS_PERS_DATA_EFFDT ED2 
    WHERE ED2.EMPLID = $EMPLID 
      AND ED2.EFFDT <= $EFFDT)

End-SELECT


End-Procedure 

!**********************************************************************!
! Procedure:     Print-EE-Row                                          !
! Description:   Print Employee Information                            !
!**********************************************************************!

Begin-Procedure Print-EE-Row
#debug do Debug-Msg('Print-EE-Row')

DO Format-DateTime($Birthdate,$Birthdate-prt,{DEFDMY},'','')
DO Format-DateTime($Hire_Dt,$Hire_Dt-prt,{DEFDMY},'','')
DO Format-DateTime($Last_Day_Worked,$Last_Day_Worked-prt,{DEFDMY},'','')

#debugd show 'Birth Date:       ' $Birthdate
#debugd show 'Hire Date:        ' $Hire_Dt
#debugd show 'Last Date Worked: ' $Last_Day_Worked

Print  $Matricula            (+1,4)   Edit 9999

Print  $Name                 (0,12,30)
Print  $Gender               (0,42)
Print  $Marital_Status       (0,49)
Print  $Birthdate-prt        (0,58)
Print  $Birthplace           (0,68,20)
Print  $Province             (0,87,15)
Print  $SSN                  (0,105)  Edit 'XX/XXXXXXXX/XX'
Print  $Hire_Dt-prt          (0,119)
Print  $Categ_Date           (0,130)
Print  $Workgroup            (0,168)  Edit  99
Print  $Last_Day_Worked-prt  (0,173)
Print  $LastMatricula        (0,184)  Edit  99999
Print  $Comments             (0,192,40)  
                  
                                                 
End-Procedure




!**********************************************************************!
! Procedure:     Get-Empl-Ctg-Descr                                    !
! Description:   Get Employee Categorization Descr                     !
!**********************************************************************!

Begin-Procedure Get-Empl-Ctg-Descr
#debug do Debug-Msg('Get-Empl-Ctg-Descr')
  Let $Category = ' '
  Let $Workgroup = ' '


let $sql-statement = 'PER054ES.SQR,Get-Empl-Ctg-Descr,Select,PS_EMPL_CTG_L1'
Begin-Select on-error=SQL-Error
CTG.DESCR
CTG.SOC_SEC_WRK_GRP_CD

  Let $Category = &CTG.DESCR
  Let $Workgroup = &CTG.SOC_SEC_WRK_GRP_CD

FROM PS_EMPL_CTG_L1 CTG
  WHERE CTG.LABOR_AGREEMENT = $Agreement 
  AND CTG.EMPL_CTG = $Empl_Ctg
  AND CTG.SETID = $Setid_Lbr_Agrmnt
  AND CTG.EFFDT = 
            (SELECT MAX(CTG_L1.EFFDT)
             FROM PS_EMPL_CTG_L1 CTG_L1
             WHERE CTG_L1.SETID = CTG.SETID
             AND CTG_L1.LABOR_AGREEMENT = CTG.LABOR_AGREEMENT
             AND CTG_L1.EMPL_CTG = CTG.EMPL_CTG
             AND CTG_L1.EFFDT <= $EFFDT)
  AND CTG.EFF_STATUS = 'A'
End-Select

DO Format-DateTime($EFFDT,$Categ_date,{DEFDMY},'','')
let $Categ_date = $Category || $Categ_date
#debugd show 'Category Date: ' $Categ_date


End-Procedure


!**********************************************************************!
! Procedure:     Get-Empl-State-Descr                                  !
! Description:   Get Employee Birth State Descr                        !
!**********************************************************************!


Begin-Procedure Get-Empl-State-Descr
#debug do Debug-Msg('Get-Empl-State-Descr')
let $Province = ' '
let $sql-statement = 'PER054ES.SQR,Get-Empl-State-Descr,Select,PS_BIRTHSTATE_VW'
Begin-Select on-error=SQL-Error

D.DESCR
  MOVE &D.DESCR TO $Province
 
FROM PS_BIRTHSTATE_VW D
  WHERE  D.BIRTHCOUNTRY = $Birthcountry
  AND D.STATE = $Birthstate
End-Select
End-Procedure

!**********************************************************************!
! Procedure:     Get-Empl_Nid                                          !
! Description:   Get Employee National Id                              !
!**********************************************************************!

Begin-Procedure  Get-Empl-Nid
#debug do Debug-Msg('Get-Empl-Nid')
let $SSN = ' '

let $sql-statement = 'PER054ES.SQR,Get-Empl-Nid,Select,PS_PERS_NID'
Begin-Select on-error=SQL-Error

NID.NATIONAL_ID 
   MOVE &NID.NATIONAL_ID TO $SSN

FROM PS_PERS_NID NID
  WHERE NID.EMPLID = $EMPLID
  AND NID.COUNTRY = 'ESP'
  AND NID.NATIONAL_ID_TYPE = 'SSN'
End-Select
End-Procedure

!**********************************************************************!
! Procedure:     Select-Parameters                                     !
! Description:   Controls Prompting For User Entered Parameters        !
!**********************************************************************!

Begin-Procedure Select-Parameters
#debug do Debug-Msg('Select-Parameters')

let $sql-statement = 'PER054ES.SQR,Select-Parameters,Select,PS_RUN_CNTL_HR_ESP'
Begin-Select on-error=SQL-Error

RC.SETID
RC.LOCATION
RC.MATRICL_BOOK_TYPE
  
   move &RC.SETID     to $Setid     
   move &RC.LOCATION  to $Location
   move &RC.MATRICL_BOOK_TYPE to $Matrtype


FROM PS_RUN_CNTL_HR_ESP RC
   WHERE RC.OPRID = $Prcs_Oprid
   AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_Id
End-Select


End-Procedure

!**********************************************************************!
! Procedure:     Get-Empl-Last-Matr                                    !
! Description:   Get Last Employee Matricula Number                    !
!**********************************************************************!

Begin-Procedure Get-Empl-Last-Matr
#debug do Debug-Msg('Get-Empl-Last-Matr')
let $LastMatricula = 0


let $sql-statement = 'PER054ES.SQR,Get-Empl-Last-Matr,Select,PS_JOB'
Begin-Select on-error=SQL-Error
MAX(MTR.MATRICULA_NBR) &LAST_MATRICULA_NBR
  move &LAST_MATRICULA_NBR to $LastMatricula

FROM PS_JOB MTR
  WHERE MTR.EMPLID = $EMPLID
    AND MTR.EMPL_RCD = $EMPL_RCD
    AND MTR.LOCATION = $LOCATION
    AND MTR.MATRICULA_NBR < $Matricula

End-Select

End-Procedure

!**********************************************************************!
! Procedure:     Get-Last-Day-Worked                                   !
! Description:   Get Last Dat Worked                                   !
!**********************************************************************!

Begin-Procedure Get-Last-Day-Worked
#debug do Debug-Msg('Get-Last-Day-Worked')
let $LastDay = ' '

let $sql-statement = 'PER054ES.SQR,Get-Last-Day-Worked,Select,PS_JOB'
Begin-Select on-error=SQL-Error
MIN(LDW.EFFDT) &LAST_DAY_WORKED
  move &LAST_DAY_WORKED to $Last_Day_Worked
FROM PS_JOB LDW
  WHERE LDW.EMPLID = $EMPLID
    AND LDW.EMPL_RCD = $EMPL_RCD
    AND (LDW.LOCATION <> $LOCATION
    OR LDW.MATRICULA_NBR > $Matricula
        OR LDW.HR_STATUS <> 'A')
        AND EFFDT > $EFFDT

End-Select


Begin-Select on-error=SQL-Error
TER.EFFDT
TER.ACTION
TER.ACTION_REASON
TER.EMPL_STATUS 
  let $Status = &TER.EMPL_STATUS

FROM PS_JOB TER
  WHERE TER.EMPLID = $EMPLID
    AND TER.EMPL_RCD = $EMPL_RCD
        AND TER.EFFDT = $Last_Day_Worked
End-Select

     let $Last_Day_Worked = dateadd(&LAST_DAY_WORKED, 'day', -1)

        if $Status <> 'A'
            move 'ACTION'  to $FIELDNAME
            move &TER.ACTION to $FIELDVALUE
            do read-translate-table
      
            let $Action = &TER.ACTION
            let $Action_Reason = &TER.ACTION_REASON         
            Do Get-Action-Reason
    
            if $Action_Reason_Descr <> ''
               let $Separator = ': '
            else
               let $Separator = '. '
            end-if
         
            let $Comments = RTRIM($XLATLONGNAME,' ') || $Separator || $Action_Reason_Descr
        end-if


End-Procedure


!**********************************************************************!
! Procedure:     Debug-Msg                                             !
! Description:   Print Debug Message                                   !
!**********************************************************************!
begin-procedure Debug-Msg($procedure_name)
   display ' '
   display '----------------------------------'
   display $procedure_name
   #debugt date-time () {Native-DateTime} &SysDateTime
   #debugt move &SysDateTime to $SysDateTime
   #debugt show 'TIMING, ' $procedure_name ', ' $SysDateTime
   display ' '
end-procedure ! Debug-Msg


#INCLUDE 'hrsecty.sqc'   !GET SQR SECURITY PARAMETERS
#INCLUDE 'getlocnm.sqc'  !GET LOCATION NAME
#INCLUDE 'readxlat.sqc'  !READ-TRANSLATE-TABLE PROCEDURE
#INCLUDE 'reset.sqc'     !RESET PRINTER PROCEDURE
#INCLUDE 'curdttim.sqc'  !GET-CURRENT-DATETIME PROCEDURE
#INCLUDE 'datetime.sqc'  !ROUTINES FOR DATE AND TIME FORMATTING
#INCLUDE 'number.sqc'    !ROUTINES TO FORMAT NUMBERS
#INCLUDE 'stdapi.sqc'    !ROUTINES TO UPDATE RUN STATUS
#INCLUDE 'getactrs.sqc'  !GET ACTION REASON DESCR
#INCLUDE 'sqrtrans.sqc'
#INCLUDE 'useprntr.sqc'

