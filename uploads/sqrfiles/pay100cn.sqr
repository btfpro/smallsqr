!*************************************
!  PAY100CN:  Statistics Canada     *
!*************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:41:24                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'                 ! Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY100CN' to $ReportID
  move 'Survey of Employment, Payrolls & Hours' to $ReportTitle
  display $ReportTitle
  display '**************************************'
  display ' '
  display 'The reference Month-End date will be taken from the system "As-Of Date"'
  display 'Please, ensure that the date is correctly set for the report period'

  do Init-DateTime
  do Init-Number

  do Stdapi-Init
  do Get-Calendar-Year-Id

  if $Prcs_Process_Instance = ''
    do Get-As-Of-Date               ! use the $AsOfDate for pay-end-dates
    Input $Crfn maxlen=6 'CRFN Number'
  else
    do Select-Parameters
    move $RC_PAY.AsOfDate to $AsOfDate
    move $RC_PAY.CRFN     to $Crfn
  end-if

  do Get-Date-Codes                ! convert date to codes
  move  $AsOfYYYY to #Calendar_Year
  move  $AsOfYYYY to $Calendar_Yr 9999
  move  $AsOfMonth to $MonthCd 09
  move  $AsOfMonth to #MonthCd
  move $AsOfYYYY to $RefMnthStrt
  concat $MonthCd with $RefMnthStrt       '-xx'
  concat '01' with $RefMnthStrt           '-xx'
  do Convert-From-DTU-Date($RefMnthStrt, $RefMnthStrt)

  do Get-Month-Name ($MonthCd, $MonthName)  !  use $MonthName

  do Get-Current-DateTime                   !  use $ReportDate


!**************************** Set the following if educational institute **
  move 'N' to $EdInst             !change to 'Y' if educational
  move 'T' to $Teach              !set value of Empl_Class for teachers
  move 'N' to $NonTeach           !set value of Empl_Class for non-teachers
  move 'S' to $SubTeach           !set value of Empl_Class for substitutes
!**************************************************************************

  do Array-Setup               !  create arrays to store data
  do Report                    !  main body of Report
  do Report-End                !  print out reference & contact
end-procedure

!***********************************************************************
!       ARRAY SETUP           create the data arrays for summing $ & hrs
!***********************************************************************
begin-procedure Array-Setup
  create-array name=LastPeriodTotals size=6 -           ! for questions 1 - 11
               field=TotalName:char         -
               field=PrintCol:number        -
               field=Pay_Begin_Dt:char:3    -
               field=Pay_End_Dt:char:3      -
               field=EmplCount:number:3     -
               field=RegGross:number:3      -
               field=OT_Earns:number:3      -
               field=RegHrs:number:3        -
               field=OT_Hrs:number:3

  put 'Weekly'          into LastPeriodTotals(1) TotalName
  put 'Every 2 Weeks'   into LastPeriodTotals(2) TotalName
  put 'Semi-Monthly'    into LastPeriodTotals(3) TotalName
  put 'Monthly'         into LastPeriodTotals(4) TotalName
  put 'Other'           into LastPeriodTotals(5) TotalName

  create-array name=IrregularPayments size=15 -            ! for question 12
               field=ErnCd:char              -
               field=Pay_Begin_Dt:char       -
               field=Pay_End_Dt:char         -
               field=Hourly:number           -
               field=Salaried:number         -
               field=Other:number

  create-array name=AbsenceCounts     size=6 -             ! for question 14
               field=MinEffDt:char           -
               field=MaxEffDt:char           -
               field=Hourly:number           -
               field=Salaried:number         -
               field=Other:number
  do Array-Initialization                                  ! set initial values
end-procedure

!***********************************************************************
!       ARRAY INITIALIZATION         initialize array fields
!***********************************************************************
begin-procedure Array-Initialization
  move 0 to #i1

  while #i1 < 15
    put '' into IrregularPayments(#i1) Pay_Begin_Dt
    put '' into IrregularPayments(#i1) Pay_End_Dt
    put ' ' into IrregularPayments(#i1) ErnCd
    put 0 into IrregularPayments(#i1) Hourly
    put 0 into IrregularPayments(#i1) Salaried
    put 0 into IrregularPayments(#i1) Other
    add 1 to #i1
  end-while

  move 0 to #i1

  while #i1 < 6
    put 0 into LastPeriodTotals(#i1) PrintCol
    move 0 to #i2

    while #i2 < 3
        put 0 into LastPeriodTotals(#i1) EmplCount(#i2)
        put '' into LastPeriodTotals(#i1) Pay_Begin_Dt(#i2)
        put '' into LastPeriodTotals(#i1) Pay_End_Dt(#i2)
        put 0 into LastPeriodTotals(#i1) RegGross(#i2)
        put 0 into LastPeriodTotals(#i1) OT_Earns(#i2)
        put 0 into LastPeriodTotals(#i1) RegHrs(#i2)
        put 0 into LastPeriodTotals(#i1) OT_Hrs(#i2)
        add 1 to #i2
    end-while

    put 0 into AbsenceCounts(#i1) Hourly
    put 0 into AbsenceCounts(#i1) Salaried
    put 0 into AbsenceCounts(#i1) Other
    put '' into AbsenceCounts(#i1) MinEffDt
    put '' into AbsenceCounts(#i1) MaxEffDt

    if #i1 < 5
        put '' into IrregularPayments(#i1) Pay_Begin_Dt
        put '' into IrregularPayments(#i1) Pay_End_Dt
        put ' ' into IrregularPayments(#i1) ErnCd
        put 0 into IrregularPayments(#i1) Hourly
        put 0 into IrregularPayments(#i1) Salaried
        put 0 into IrregularPayments(#i1) Other
    end-if

  add 1 to #i1
  end-while

  move 0 to #Total_Gross_YTD               ! and other variables
  move 0 to #Total_Gross_MTD
  move 0 to #Total_Taxable_MTD
  move 0 to #IrregCount
  move 0 to #Count
  move 0 to #AvgHrs
end-procedure

!***********************************************************************
!      PAGE HEADINGS              set report page headings
!***********************************************************************

begin-heading 5
  #Include 'stdhdg02.sqc'                       ! and also gets company data

  let $CoAddr = RTRIM($CompnyAdd1,' ')
  concat ', '      with $CoAddr
  concat $CompnyCity  with $CoAddr
  concat ', '      with $CoAddr
  concat &CT.State with $CoAddr                  ! Change to Prov if req'd

  move 'CRFN: ' to   $CrfnHdg
  concat $Crfn  with $CrfnHdg

  move 'Reference Month: ' to $MonthYear
  concat $MonthName with $MonthYear
  concat ', ' with $MonthYear
  concat $Calendar_Yr with $MonthYear

  move 'Province: ' to $ProvHdg
  concat $Province with $ProvHdg
  concat '          Census Metropolitan Area: ' with $ProvHdg !LXP-19940325
  concat $Can-CMA with $ProvHdg                               !LXP-19940325
  concat ' - ' with $ProvHdg                                  !LXP-19940325
  concat $xlatlongname with $ProvHdg                          !LXP-19940325

  print $MonthYear               (3,1)   center
  print $CoAddr                  (4,17,30)
  print $CrfnHdg                 (5,1,12)
  print $ProvHdg                 (5,1)   center

end-heading

!***********************************************************************
!       REPORT PROCEDURE - Main Level
!***********************************************************************
begin-procedure Report
  move '*' to $Province
  move '*' to $Can-CMA                                        !LXP-19940325
  move '*' to $Company
  move 'N' to $Use-Emp
  display ' '
  display '  processing ...' 

  show 'Calendar year:  ' #Calendar_Year edit 9999
  show 'Calendar Yr Id: ' $Calendar_Year_Id
  Show 'Month :         ' #MonthCd edit 99
  Show 'Asofdate:       ' $AsOfDate

begin-SELECT on-error=Skip
A.COMPANY       () on-break print=never level=1 after=Comp-Change
A.PROVINCE    !    () on-break print=never level=1 after=Prov-Change   !LXP-19940325
Z.CAN_CMA       () on-break print=never level=1 after=CMA-Change       !LXP-19940325
A.EMPLID        () on-break print=never level=2 after=Pre-Empl-Change
A.BALANCE_PERIOD
A.GRS_YTD
A.GRS_MTD
A.ERNCD
J.EMPL_STATUS
J.EMPL_CLASS
J.EMPL_TYPE
J.PAYGROUP

! Move the following moves to preceed check on month    !LXP-19940325
  move &A.Company    to $Company
  move &A.Company    to $Prev-Company                  !LXP-19940325
  let $Province = rtrim(&A.Province, ' ')
  let $Prev-Prov = rtrim(&A.Province, ' ')
  move &Z.Can_CMA    to $Can-CMA                        !LXP-19940325
  move &Z.Can_CMA    to $Prev-CMA                       !LXP-19940325

  if  &A.BALANCE_PERIOD = #MonthCd
    move &A.EmplId     to $Prev_EmplId
    move &J.Empl_Type  to $Prev_EmplType
    move &J.Empl_Class to $Prev_EmplClass
    move &J.PayGroup   to $Prev_EmplPayGrp
    add &A.Grs_MTD to #Total_Gross_MTD

! If balances exist for employee, report him/her regardless of status
!   if ((&J.Empl_Status = 'A') or                         !LXP-19940325
!           (&J.Empl_Status = 'N') or                     !LXP-19940325
!           (&J.Empl_Status = 'P'))                       !LXP-19940325
!       move 'Y' to $Use-Emp                              !LXP-19940325
!   end-if                                                !LXP-19940325
    move 'Y' to $Use-Emp                                  !LXP-19940325
  end-if

  add &A.Grs_YTD to #Total_Gross_YTD     !for question 13

FROM PS_CAN_ERN_BALANCE A,
     PS_JOB             J,                                !LXP-19940325
     PS_LOCATION_TBL    Z                                 !LXP-19940325
WHERE A.BALANCE_YEAR = #Calendar_Year
  AND BALANCE_ID = $Calendar_Year_Id
  AND A.BALANCE_PERIOD  =
      (SELECT MAX(A1.BALANCE_PERIOD)
      FROM PS_CAN_ERN_BALANCE A1
      WHERE A1.EMPLID = A.EMPLID
        AND A1.COMPANY = A.COMPANY
        AND A1.BALANCE_ID = A.BALANCE_ID
        AND A1.BALANCE_YEAR = A.BALANCE_YEAR
        AND A1.WAGE_LOSS_PLAN = A.WAGE_LOSS_PLAN
        AND A1.PROVINCE = A.PROVINCE
!       AND A1.BALANCE_Qtr = A.BALANCE_Qtr                            !LXP-19940325
        AND A1.ERNCD = A.ERNCD
        AND A1.SPCL_BALANCE = A.SPCL_BALANCE
        AND A1.EMPL_RCD  = A.EMPL_RCD
        AND A1.BALANCE_PERIOD <= #MonthCd)
  AND J.EMPLID        = A.EMPLID
  AND A.SPCL_BALANCE  = 'N'
  AND J.EFFDT =
      (SELECT MAX(EFFDT)
      FROM PS_JOB
      WHERE EMPLID = J.EMPLID
        AND EFFDT  <= $AsOfDate)
  AND J.EFFSEQ =
      (SELECT MAX(EFFSEQ)
      FROM PS_JOB
      WHERE EMPLID = J.EMPLID
        AND EFFDT    = J.EFFDT
        AND EMPL_RCD = J.EMPL_RCD)
  AND Z.LOCATION = J.LOCATION                             !LXP-19940325
  AND Z.SETID  = (SELECT SETID FROM PS_SET_CNTRL_REC WHERE RECNAME = 'LOCATION_TBL'
                  AND SETCNTRLVALUE = J.BUSINESS_UNIT)
  AND Z.EFFDT =                                           !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_LOCATION_TBL                                !LXP-19940325
      WHERE LOCATION = Z.LOCATION                         !LXP-19940325
        AND SETID = Z.SETID
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
ORDER BY A.COMPANY ASC,
         A.PROVINCE ASC,
         Z.CAN_CMA ASC,                                   !LXP-19940325
         A.EMPLID ASC
end-SELECT

  if $Company = '*'
     Display ' ... but'
     Display 'No Data Selected for the Report'
  end-if

end-Procedure

!***********************************************************************
!     PRE-EMPL-CHANGE  Level 2
!***********************************************************************
begin-Procedure Pre-Empl-Change

  if  $Use-Emp = 'Y'
    do Empl-Change
  end-if

  move 'N' to $Use-Emp
end-procedure

!***********************************************************************
!       EMPL-CHANGE  Level 2 (Calculations after EmplId changes)
!***********************************************************************
begin-Procedure Empl-Change
   move 'y' to $new-empl-counter

begin-SELECT on-error=Skip
C.REG_EARNS+C.REG_HRLY_EARNS        &Earnings
C.REG_HRS+C.REG_EARN_HRS            &Hours
C.OT_HRS
C.OT_HRLY_EARNS
C.OFF_CYCLE
C.PAGE_NUM
C.LINE_NUM
C.SEPCHK
C.ADDL_NBR
C.OK_TO_PAY
C.PAY_LINE_STATUS
F.PAY_BEGIN_DT
F.PAY_END_DT
FT.FREQUENCY_TYPE

  if &C.Ok_To_Pay = 'Y'
        and (&C.Pay_Line_Status = 'C'
          or &C.Pay_Line_Status = 'F'
          or &C.Pay_Line_Status = 'V')
    do Type-FreqSet                   !determine empl type & pay frequency
    do Period-Array-Update            !add employee's period data to array
  end-if

FROM   PS_PAY_CALENDAR F, PS_PAY_CAL_BAL_ID FF,
       PS_PAY_EARNINGS C, PS_FREQUENCY_TBL  FT
WHERE F.COMPANY         = $Company
  AND F.PAYGROUP        = $Prev_EmplPayGrp
  AND FF.BALANCE_YEAR   = #Calendar_Year
  AND FF.BALANCE_ID     = $Calendar_Year_Id
  AND FF.COMPANY = F.COMPANY AND FF.PAYGROUP = F.PAYGROUP
  AND FF.PAY_END_DT = F.PAY_END_DT
  AND F.PAY_CONFIRM_RUN = 'Y'
  AND C.EMPLID          = $Prev_EmplId
  AND F.PAY_END_DT      =
      (SELECT MAX(F1.PAY_END_DT)
        FROM PS_PAY_CALENDAR F1, PS_PAY_CAL_BAL_ID F2
        WHERE F1.COMPANY = F2.COMPANY AND F1.PAYGROUP = F2.PAYGROUP
          AND F1.PAY_END_DT = F2.PAY_END_DT
          AND F1.COMPANY       = $Company
          AND F1.PAYGROUP      = $Prev_EmplPayGrp
          AND F2.BALANCE_YEAR  = #Calendar_Year
          AND F2.BALANCE_PERIOD  = #MonthCd
          AND F2.BALANCE_ID = $Calendar_Year_Id)
  AND C.PAY_END_DT      = F.PAY_END_DT
  AND C.PAY_FREQUENCY   = FT.FREQUENCY_ID
  AND FT.EFF_STATUS     =  'A'
  AND FT.EFFDT          =
      (SELECT MAX(FT1.EFFDT)
        FROM PS_FREQUENCY_TBL  FT1
        WHERE FT1.FREQUENCY_ID  =  FT.FREQUENCY_ID
          AND FT1.EFF_STATUS    =  FT.EFF_STATUS
          AND FT1.EFFDT        <=  C.PAY_END_DT)
end-SELECT

end-procedure

!***********************************************************************
!       TYPE-FREQSET  routine to establish pay frequency & emply type
!***********************************************************************
begin-Procedure Type-FreqSet

  evaluate &FT.FREQUENCY_TYPE  !set element # for pay frequency
    when = 'W'                !Weekly
      move 1 to #Freq#
    when = 'B'                !BiWeekly
      move 2 to #Freq#
    when = 'S'                !SemiMonthly
      move 3 to #Freq#
    when = 'M'                !Monthly
      move 4 to #Freq#
    when-other                !Other
      move 5 to #Freq#
  end-evaluate

  if $EdInst = 'N'              !non-educational

    evaluate $Prev_EmplType     !set element # for employee type
      when = 'H'                !Hourly
      when = 'E'                !Exception Hourly
        move 0 to #Type#
      when = 'S'                !Salaried
        move 1 to #Type#
      when-other                !Other - undefined currently
        move 2 to #Type#
    end-evaluate

  else                          !educational institution
    move 0 to #Type#

    evaluate $Prev_EmplClass    !set element # for employee class
      when = $nonteach          !non-teachers
        move 0 to #Type#
      when = $Teach             !teachers
        move 1 to #Type#
      when = $SubTeach          !substitute teachers
        move 2 to #Type#
    end-evaluate

  end-if

  put &F.Pay_Begin_Dt           -
      &F.Pay_End_Dt             -
  into LastPeriodTotals(#Freq#) -
      Pay_Begin_Dt(#Type#)      -
      Pay_End_Dt(#Type#)

end-procedure

!***********************************************************************
!       PERIOD-ARRAY-UPDATE  update stats array with emply period $ & hrs
!***********************************************************************
begin-Procedure Period-Array-Update

  if $new-empl-counter = 'y'
     array-add 1 to LastPeriodTotals(#Freq#) EmplCount(#Type#)
     move 'n' to $new-empl-counter
  end-if

  array-add &Earnings &Hours    -
            &C.OT_Hrly_Earns    -
            &C.OT_Hrs           -
    to LastPeriodTotals(#Freq#) -
            RegGross(#Type#)    -
            RegHrs(#Type#)      -
            OT_Earns(#Type#)    -
            OT_Hrs(#Type#)

  do Get-Other-Hours-Earnings
end-procedure

!*************************************************************************
!        GET-OTHER-HOURS-EARNINGS   continue to update array with $ & hrs
!*************************************************************************
begin-procedure Get-Other-Hours-Earnings

begin-SELECT on-error=Skip
OTH_HRS
OTH_EARNS
ERNCD

    ARRAY-ADD &Oth_Earns to LASTPERIODTOTALS(#FREQ#) REGGROSS(#TYPE#)
    ARRAY-ADD &Oth_Hrs   to LASTPERIODTOTALS(#FREQ#) REGHRS(#TYPE#)

FROM  PS_PAY_OTH_EARNS
WHERE COMPANY    = $Company
  AND PAYGROUP   = $Prev_EmplPayGrp
  AND PAY_END_DT = &F.Pay_End_Dt
  AND OFF_CYCLE  = &C.Off_Cycle
  AND PAGE_NUM      = &C.PAGE_NUM
  AND LINE_NUM      = &C.LINE_NUM
  AND SEPCHK     = &C.SepChk
  AND ADDL_NBR      = &C.ADDL_NBR
end-SELECT

end-procedure

!*************************************************************************
!       TAX-BEN-CALC            Get taxable benefits for employee this month
!*************************************************************************
begin-procedure Tax-Ben-Calc

begin-SELECT on-error=Skip
B.DED_MTD

  add &B.Ded_MTD to #Total_Taxable_MTD

FROM PS_CAN_DED_BALANCE B,                                !LXP-19940325
     PS_JOB             J1,                               !LXP-19940325
     PS_LOCATION_TBL    Z1                                !LXP-19940325
WHERE  B.PROVINCE = $Prev-Prov
  AND B.BALANCE_PERIOD = #MonthCd
  AND B.BALANCE_YEAR = #Calendar_Year
  AND B.BALANCE_ID = $Calendar_Year_Id
  AND B.DED_CLASS = 'T'
  AND J1.EMPLID       = B.EMPLID                          !LXP-19940325
  AND J1.EFFDT =                                          !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_JOB                                         !LXP-19940325
      WHERE EMPLID = J1.EMPLID                            !LXP-19940325
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
  AND J1.EFFSEQ =                                         !LXP-19940325
      (SELECT MAX(EFFSEQ)                                 !LXP-19940325
      FROM PS_JOB                                         !LXP-19940325
      WHERE EMPLID = J1.EMPLID                            !LXP-19940325
        AND EFFDT    = J1.EFFDT                           !LXP-19940325
        AND EMPL_RCD = J1.EMPL_RCD)                     !LXP-19940325
  AND Z1.LOCATION = J1.LOCATION                           !LXP-19940325
  AND Z1.SETID  = (SELECT SETID FROM PS_SET_CNTRL_REC WHERE RECNAME = 'LOCATION_TBL'
                  AND SETCNTRLVALUE = J1.BUSINESS_UNIT)
  AND Z1.EFFDT =                                          !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_LOCATION_TBL                                !LXP-19940325
      WHERE LOCATION = Z1.LOCATION                        !LXP-19940325
        AND SETID = Z1.SETID
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
  AND Z1.CAN_CMA = $Prev-CMA                              !LXP-19940325
end-SELECT

end-procedure

!***********************************************************************
!       MONTH-SPCL-CALC        Get irregular payments for employee this month
!*************************************************************************
begin-procedure Month-Spcl-Calc
  move 0 to #IrregCount

begin-SELECT on-error=Skip
G.ERNCD
G.GRS_MTD

  PUT 'Other'   INTO IRREGULARPAYMENTS(14) ERNCD

  move 0 to #ErnCdCount

  WHILE #ErnCdCount < 14
    GET $ErnCdVlu from IRREGULARPAYMENTS(#ERNCDCOUNT) ERNCD

    if $ErnCdVlu = ' '
        PUT &G.ErnCd INTO IRREGULARPAYMENTS(#ERNCDCOUNT) ERNCD
        break
    end-if

    if &G.ErnCd = $ErnCdVlu
       break
    end-if

    add 1 to #ErnCdCount
  END-WHILE

  if $EdInst = 'N'            !non-educational

    evaluate $Prev_EmplType     !set element # for employee type
      when = 'H'                !Hourly
      when = 'E'                !Exception Hourly
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) HOURLY
      when = 'S'                !Salaried
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) SALARIED
      when-other                !Other - undefined currently
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) OTHER
    end-evaluate

  else

    evaluate $Prev_EmplClass    !educational institute
      when = $NonTeach          !non-teachers
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) HOURLY
      when = $Teach             !teachers
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) SALARIED
      when = $SubTeach          !substitute teachers
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) OTHER
      when-other                !unassigned/other
        ARRAY-ADD &G.Grs_MTD to IRREGULARPAYMENTS(#ERNCDCOUNT) HOURLY
    end-evaluate

  end-if

  PUT $AsOfDate INTO IRREGULARPAYMENTS(#ERNCDCOUNT) PAY_END_DT
  PUT $RefMnthStrt INTO IRREGULARPAYMENTS(#ERNCDCOUNT) PAY_BEGIN_DT

  if #ErnCdCount > #IrregCount
    move #ErnCdCount to #IrregCount
  end-if

FROM PS_CAN_ERN_BALANCE G,                                !LXP-19940325
     PS_JOB             J2,                               !LXP-19940325
     PS_LOCATION_TBL    Z2                                !LXP-19940325
WHERE G.PROVINCE      = $Prev-Prov
  AND G.BALANCE_ID = $Calendar_Year_Id
  AND G.BALANCE_YEAR = #Calendar_Year
  AND G.BALANCE_PERIOD    = #MonthCd
  AND G.SPCL_BALANCE  = 'N'
! ************************************** set following accordingly ****
  AND G.ERNCD         <> 'REG'          !for irregular payment exclusions
  AND G.ERNCD         <> 'OTP'          !or as specific inclusions
  AND G.ERNCD         <> 'OTS'          !refer to StatsCan SEPH Quest 12
  AND G.ERNCD         <> 'DBL'          !brochure
!***********************************************************************
  AND J2.EMPLID       = G.EMPLID                          !LXP-19940325
  AND J2.EFFDT =                                          !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_JOB                                         !LXP-19940325
      WHERE EMPLID = J2.EMPLID                            !LXP-19940325
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
  AND J2.EFFSEQ =                                         !LXP-19940325
      (SELECT MAX(EFFSEQ)                                 !LXP-19940325
      FROM PS_JOB                                         !LXP-19940325
      WHERE EMPLID = J2.EMPLID                            !LXP-19940325
        AND EFFDT    = J2.EFFDT                           !LXP-19940325
        AND EMPL_RCD = J2.EMPL_RCD)                     !LXP-19940325
  AND Z2.LOCATION = J2.LOCATION                           !LXP-19940325
  AND Z2.SETID  = (SELECT SETID FROM PS_SET_CNTRL_REC WHERE RECNAME = 'LOCATION_TBL'
                  AND SETCNTRLVALUE = J2.BUSINESS_UNIT)
  AND Z2.EFFDT =                                          !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_LOCATION_TBL                                !LXP-19940325
      WHERE LOCATION = Z2.LOCATION                        !LXP-19940325
        AND SETID = Z2.SETID
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
  AND Z2.CAN_CMA = $Prev-CMA                              !LXP-19940325
ORDER BY G.ERNCD ASC
end-SELECT

end-procedure

!********************************************************************
!         PROV-CHANGE      when province changes
!********************************************************************
!begin-procedure Prov-Change                              !LXP-19940325

!********************************************************************
!         CMA-CHANGE      when CMA changes                !LXP-19940325
!********************************************************************
begin-procedure CMA-Change                                !LXP-19940325

  let $fieldname  = 'CAN_CMA'                             !LXP-19940325
  let $fieldvalue = $Prev-CMA                             !LXP-19940325
  do Read-Translate-Table                                 !LXP-19940325

  do Month-Spcl-Calc           ! for question 12
  do Tax-Ben-Calc              ! for question 13
  do Get-Company-Data          ! for earning code table id

  if $EdInst = 'N'
    do Month-Absent-Calc-Reg   ! for question 14 - regular company
  else
    do Month-Absent-Calc-Ed    ! for question 14 - educational
  end-if

  do Calc-Avg-Hrs              ! for question 1B (& 1A for educational)
! do Print-Report              ! print this province's data !LXP-19940325
  do Print-Report              ! print this CMA's data      !LXP-19940325
  do Array-Initialization      ! reset data arrays to zero
  new-page
end-procedure

!************************************************************************
!        MONTH-ABSENT-CALC-REG     select all employee absences for month
!************************************************************************
begin-procedure Month-Absent-Calc-Reg

begin-SELECT on-error=Skip
E.EMPL_TYPE
E.ACTION_REASON
MIN(E.EFFDT)    &MinEffDtReg
MAX(E.EFFDT)    &MaxEffDtReg
COUNT(*)        &Reason_Count_Reg

  evaluate &E.Action_Reason
    when = 'USH'
      move 0 to #i
    when = 'SLO'
      move 1 to #i
    when = 'RED'
      move 2 to #i
    when = 'TMP'
      move 3 to #i
    when = 'SEA'
      move 4 to #i
    when-other
      move 5 to #i
  end-evaluate

  evaluate &E.Empl_Type       !set element # for employee type
    when = 'H'                !Hourly
    when = 'E'                !Exception Hourly
      PUT &Reason_Count_Reg INTO ABSENCECOUNTS(#I) HOURLY
    when = 'S'                !Salaried
      PUT &Reason_Count_Reg INTO ABSENCECOUNTS(#I) SALARIED
    when-other                !Other - undefined currently
      PUT &Reason_Count_Reg INTO ABSENCECOUNTS(#I) OTHER
  end-evaluate

  GET $MinEffDt from ABSENCECOUNTS(#I) MINEFFDT
  do Format-DateTime(&MinEffDtReg, $out, {DEFCMP}, '', '')
  do Format-DateTime($MinEffDt, $out1, {DEFCMP}, '', '')

  if $out < $out1 or RTRIM($MinEffDt, ' ') = ''
    PUT &MinEffDtReg INTO ABSENCECOUNTS(#I) MINEFFDT
  end-if

  GET $MaxEffDt from ABSENCECOUNTS(#I) MAXEFFDT
  do Format-DateTime(&MaxEffDtReg, $out, {DEFCMP}, '', '')
  do Format-DateTime($MaxEffDt, $out1, {DEFCMP}, '', '')

  if $out > $out1
    PUT &MaxEffDtReg INTO ABSENCECOUNTS(#I) MAXEFFDT
  end-if

FROM PS_JOB E,
     PS_PERSON_ADDR_HOM P,                                  !LXP-19940325
     PS_LOCATION_TBL  Z3                                  !LXP-19940325
WHERE E.ACTION_REASON IN ('USH','SEA','SLO','TMP','RED')
 AND E.EMPLID   = P.EMPLID
!AND E.Company  = $Company                                     !LXP-19940325
!AND P.State    = $Province           !change if table changed !LXP-19940325
 AND E.COMPANY  = $Prev-Company                                !LXP-19940325
 AND P.STATE    = $Prev-Prov          !change if table changed !LXP-19940325
 AND E.EFFDT    =
     (SELECT MAX(EFFDT)
     FROM PS_JOB
     WHERE EMPLID = E.EMPLID
       AND EFFDT >= $RefMnthStrt   !only select ref mth absences  !LXP-19940325
       AND EFFDT <= $Asofdate)
 AND E.EFFSEQ   =
     (SELECT MAX(EFFSEQ)
     FROM PS_JOB
     WHERE EMPLID = E.EMPLID
       AND EMPL_RCD = E.EMPL_RCD
       AND EFFDT = E.EFFDT)
  AND Z3.LOCATION = E.LOCATION                            !LXP-19940325
  AND Z3.SETID  = (SELECT SETID FROM PS_SET_CNTRL_REC WHERE RECNAME = 'LOCATION_TBL'
                  AND SETCNTRLVALUE = E.BUSINESS_UNIT)
  AND Z3.EFFDT =                                          !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_LOCATION_TBL                                !LXP-19940325
      WHERE LOCATION = Z3.LOCATION                        !LXP-19940325
        AND SETID = Z3.SETID
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
  AND Z3.CAN_CMA = $Prev-CMA                              !LXP-19940325
 GROUP BY E.EMPL_TYPE,
          E.ACTION_REASON
end-SELECT

end-procedure

!************************************************************************
!        MONTH-ABSENT-CALC-ED     select all teaching absences for month
!************************************************************************
begin-procedure Month-Absent-Calc-Ed

begin-SELECT on-error=Skip
ED.EMPL_CLASS
ED.ACTION_REASON
MIN(ED.EFFDT)     &MinEffDtEd
MAX(ED.EFFDT)     &MaxEffDtEd
COUNT(*)          &Reason_Count_Ed

  evaluate &ED.Action_Reason
    when = 'USH'
      move 0 to #i
    when = 'SLO'
      move 1 to #i
    when = 'RED'
      move 2 to #i
    when = 'TMP'
      move 3 to #i
    when = 'SEA'
      move 4 to #i
    when-other
      move 5 to #i
  end-evaluate

  evaluate &ED.Empl_Class
    when = $NonTeach
      PUT &Reason_Count_Ed INTO ABSENCECOUNTS(#I) HOURLY
    when = $Teach
      PUT &Reason_Count_Ed INTO ABSENCECOUNTS(#I) SALARIED
    when = $SubTeach
      PUT &Reason_Count_Ed INTO ABSENCECOUNTS(#I) OTHER
    when-other
      PUT &Reason_Count_Ed INTO ABSENCECOUNTS(#I) HOURLY
  end-evaluate

  GET $MinEffDt from ABSENCECOUNTS(#I) MINEFFDT
  do Format-DateTime(&MinEffDtEd, $out, {DEFCMP}, '', '')
  do Format-DateTime($MinEffDt, $out1, {DEFCMP}, '', '')

  if $out < $out1 or RTRIM($MinEffDt, ' ') = ''
    PUT &MinEffDtEd INTO ABSENCECOUNTS(#I) MINEFFDT
  end-if

  GET $MaxEffDt from ABSENCECOUNTS(#I) MAXEFFDT
  do Format-DateTime(&MaxEffDtEd, $out, {DEFCMP}, '', '')
  do Format-DateTime($MaxEffDt, $out1, {DEFCMP}, '', '')

  if $out > $out1
    PUT &MaxEffDtEd INTO ABSENCECOUNTS(#I) MAXEFFDT
  end-if

FROM PS_JOB ED,
     PS_PERSON_ADDR_HOM P,                                  !LXP-19940325
     PS_LOCATION_TBL  Z4                                  !LXP-19940325
WHERE ED.ACTION_REASON IN ('USH','SEA','SLO','TMP','RED')
 AND ED.EMPLID   = P.EMPLID
!AND ED.Company  = $Company                                 !LXP-19940325
!AND P.State     = $Province       !change if table changed !LXP-19940325
 AND ED.COMPANY  = $Prev-Company                            !LXP-19940325
 AND P.STATE     = $Prev-Prov      !change if table changed !LXP-19940325
 AND ED.EFFDT    =
     (SELECT MAX(EFFDT)
     FROM PS_JOB
     WHERE EMPLID = ED.EMPLID
       AND EFFDT >= $RefMnthStrt   !only select ref mth absences  !LXP-19940325
       AND EFFDT <= $AsOfDate)
 AND ED.EFFSEQ   =
     (SELECT MAX(EFFSEQ)
     FROM PS_JOB
     WHERE EFFDT = ED.EFFDT
       AND EMPL_RCD = ED.EMPL_RCD)
 AND Z4.LOCATION = ED.LOCATION                            !LXP-19940325
 AND Z4.SETID  = (SELECT SETID FROM PS_SET_CNTRL_REC WHERE RECNAME = 'LOCATION_TBL'
                  AND SETCNTRLVALUE = ED.BUSINESS_UNIT)
 AND Z4.EFFDT =                                           !LXP-19940325
      (SELECT MAX(EFFDT)                                  !LXP-19940325
      FROM PS_LOCATION_TBL                                !LXP-19940325
      WHERE LOCATION = Z4.LOCATION                        !LXP-19940325
        AND SETID = Z4.SETID
        AND EFFDT  <= $AsOfDate)                          !LXP-19940325
 AND Z4.CAN_CMA = $Prev-CMA                               !LXP-19940325
 GROUP BY ED.EMPL_CLASS,
          ED.ACTION_REASON
end-SELECT

end-procedure

!*************************************************************************
!         CALC-AVG-HRS   Calc salaried/teaching & non-teachers avg hours/week
!*************************************************************************
begin-procedure Calc-Avg-Hrs

  if $EdInst = 'N'
    move 1 to #i2
  else
    move 0 to #i2
  end-if

  while #i2 < 2
    move 1 to #i1

     while #i1 < 6
       get #TotRegHrs from LastPeriodTotals(#i1) RegHrs(#i2)

       if #TotRegHrs > 0

         get #TotEmpl from LastPeriodTotals(#i1) EmplCount(#i2)

         get $BegDt                 -
             $EndDt                 -
         from LastPeriodTotals(#i1) -
             Pay_Begin_Dt(#i2)      -
             Pay_End_Dt(#i2)

         do Date-Difference($BegDt, $EndDt, #Days)
         let #Days = #Days + 1                            !LXP-19940325
         let #Wks = #Days / 7
         let #TotEmpHrs = #TotRegHrs / #TotEmpl
         let #AvgHrs    = #TotEmpHrs / #Wks
         put #AvgHrs into LastPeriodTotals(#i1) RegHrs(#i2)
       end-if

       add 1 to #i1
     end-while

     add 1 to #i2
   end-while

end-procedure

!********************************************************************
!         PRINT-REPORT     Print out the one page report
!*************************************************************************
begin-procedure Print-Report
  print 'I.'                               (2,1)
  print 'INFORMATION FOR THE LAST PAY PERIOD(S) OF THE MONTH' (0,1) center
  print 'PAY PERIODS'            (+2,1)   center
  print 'Weekly          '       (+1,43)
  print 'Every Two Weeks '       (0,65)
  print 'Semi-Monthly    '       (0,92)
  print 'Monthly         '       (0,120)
  print 'Every 4 Weeks or Other' (0,138)

  if $EdInst = 'N'
    print 'A. HOURLY EMPLOYEES               '   (+2,1)
    print '   1. Period Begin/End Date       '   (+1,1)
    print '   2. Number of Hourly Employees  '   (+1,1)
    print '   3. (a) Regular Gross Pay       '   (+1,1)
    print '      (b) Overtime Pay            '   (+1,1)
    print '   4. (a) Total Hours Paid        '   (+1,1)
    print '      (b) Overtime Hours Paid     '   (+1,1)
    print 'B. SALARIED EMPLOYEES             '   (+2,1)
    print '   5. Period Begin/End Date       '   (+1,1)
    print '   6. Number of Salaried Employees'   (+1,1)
    print '   7. (a) Regular Gross Pay       '   (+1,1)
    print '      (b) Overtime Pay            '   (+1,1)
    print '   8. Average Hours in Work Week  '   (+1,1)
    print 'C. OTHER EMPLOYEES                '   (+2,1)
    print '   9. Period Begin/End Date       '   (+1,1)
    print '  10. Number of Other Employees   '   (+1,1)
    print '  11. Regular Gross Pay           '   (+1,1)
  else
    print 'A. NON-TEACHING STAFF             '   (+2,1)
    print '   1. Period Begin/End Date       '   (+1,1)
    print '   2. Number of Non-Teaching Staff'   (+1,1)
    print '   3. Regular Gross Pay           '   (+1,1)
    print ' '                                    (+1,1)
    print '   4. Average Hours in Work Week  '   (+1,1)
    print ' '                                    (+1,1)
    print 'B. TEACHING STAFF                 '   (+2,1)
    print '   5. Period Begin/End Date       '   (+1,1)
    print '   6. Number of Teachers          '   (+1,1)
    print '   7. Regular Gross Pay           '   (+1,1)
    print ' '                                    (+1,1)
    print '   8. Average Hours in Work Week  '   (+1,1)
    print 'C. SUBSTITUTE TEACHERS            '   (+2,1)
    print '   9. Period Begin/End Date       '   (+1,1)
    print '  10. Number of Substitue Teachers'   (+1,1)
    print '  11. Regular Gross Pay           '   (+1,1)
  end-if

  move 0  to #Type#           !Hourly/Non-teaching
  move 1  to #Freq#
  move 7  to #Pos
  do Print-Detail

  move 1  to #Type#           !Salaried/Teachers
  move 1  to #Freq#
  move 15 to #Pos
  do Print-Detail

  move 2  to #Type#           !'Other'/Substitue teachers
  move 1  to #Freq#
  move 22 to #Pos
  do Print-Detail

  print 'II.'                                  (+1,1)
  print 'INFORMATION FOR THE ENTIRE MONTH'     (0,1)   center
  print '  12. Irregular Payments          '   (+2,1)
  print 'Payment Type'                         (0,+5)
  print '  Period Covered  '                   (0,+5)

  if $EdInst = 'N'
    print ' Amount to Hourly '                   (0,+5)
    print 'Amount to Salaried'                   (0,+5)
    print ' Amount to Other  '                   (0,+5)
  else
    print ' Amount to NonTeach'                   (0,+5)
    print 'Amount to Teachers '                   (0,+4)
    print ' Amount to Supply  '                   (0,+4)
  end-if

  position (+1)

  move 0 to #count

  while #count <= 14

    get $ErnCd                       -
        #Hourly                      -
        #Salaried                    -
        #Other                       -
      from IrregularPayments(#count) -
        ErnCd                        -
        Hourly                       -
        Salaried                     -
        Other

    if ((#Hourly <> 0)
            or (#Salaried <> 0)
            or (#Other <> 0))

        if RTRIM($ErnCd, ' ') <> ''
            and RTRIM($ErnCd, ' ') <> 'Other'
            do Get-Earnings-Name
        end-if

        if #count <> 14

            if $EarningsAbbrv = ''
                print $ErnCd                          (+1,40)
            else
                print $EarningsAbbrv                  (+1,40)
            end-if

        else
            print 'Other'                            (+1,40)
        end-if

        get $Min_Pay_Begin_Dt from IrregularPayments(#count) Pay_Begin_Dt
        get $Max_Pay_End_Dt from IrregularPayments(#count) Pay_End_Dt

        if RTRIM($Min_Pay_Begin_Dt, ' ') <> ''
                and RTRIM($Max_Pay_End_Dt, ' ') <> ''
            do Format-DateTime($Min_Pay_Begin_Dt, $PayDates, {DEFDATE}, '', '')
            concat ' - ' with $PayDates
            do Format-DateTime($Max_Pay_End_Dt, $Temp, {DEFDATE}, '', '')
            concat $Temp with $PayDates
        else
            move ' ' to $PayDates
        end-if

        print $PayDates                            (0,57)
        do Format-Number(#Hourly, $out, 'b9,999,999')
        print $out                         (0,84)
        do Format-Number(#Salaried, $out, 'b9,999,999')
        print $out                         (0,106)
        do Format-Number(#Other, $out, 'b9,999,999')
        print $out                         (0,129)
    end-if

    add 1 to #count
  end-while

  print '  13.(a) Total Payroll            '   (+2,1)
  print 'Reference Month: '                    (0,40)
  print #Total_Gross_MTD                       (0,+2)  edit 999,999,999
  print 'Year-to-date: '                       (0,80)
  print #Total_Gross_YTD                       (0,+2)  edit 999,999,999
  print '     (b) Taxable Benefits         '   (+1,1)
  print 'Reference Month: '                    (0,40)
  print #Total_Taxable_MTD                     (0,+2)  edit 999,999,999
  print '  14. Employees Absent Without Pay  ' (+2,1)
  print 'Period Covered'                       (0,+5)

  if $EdInst = 'N'
    print ' Count Hourly '                       (0,+5)
    print 'Count Salaried'                       (0,+5)
    print ' Count Other  '                       (0,+5)
  else
    print ' Count NonTeach'                       (0,+5)
    print 'Count Teachers '                       (0,+4)
    print ' Count Supply  '                       (0,+4)
  end-if

  print '         Unpaid statutory holiday   ' (+2,1)
  print '         Strike/Lock-out            ' (+1,1)
  print '         Layoff                     ' (+1,1)
  print '         Temporary Closure          ' (+1,1)
  print '         Seasonal Closure           ' (+1,1)
  print '         Other                      ' (+1,1)
  position (-6)
  move 0 to #count

  while #count <= 5
    position (+1)

    get $MinEffDt                -
        $MaxEffDt                -
        #Hourly                  -
        #Salaried                -
        #Other                   -
      from AbsenceCounts(#count) -
        MinEffDt                 -
        MaxEffDt                 -
        Hourly                   -
        Salaried                 -
        Other

    if RTRIM($MinEffDt, ' ') <> ''
        do Format-DateTime($MinEffDt, $EffDates, {DEFDATE}, '', '')
        concat ' - ' with $EffDates
        do Format-DateTime($MaxEffDt, $Temp, {DEFDATE}, '', '')
        concat $Temp with $EffDates
        print $EffDates                          (0,42)
        do Format-Number(#Hourly, $out, 'b99,999')
        print $out                               (0,63)
        do Format-Number(#Salaried, $out, 'b99,999')
        print $out                               (0,84)
        do Format-Number(#Other, $out, 'b99,999')
        print $out                               (0,102)
    end-if

    add 1 to #count
  end-while

end-procedure

!********************************************************************
!         PRINT-DETAIL     Print out data columns from array
!********************************************************************
begin-procedure Print-Detail
  columns 40 65 90 115 140

  while #Freq# <= 5
    position (#Pos)

    get $Pay_Begin_Dt               -
        $Pay_End_Dt                 -
      from LastPeriodTotals(#Freq#) -
        Pay_Begin_Dt(#Type#)        -
        Pay_End_Dt(#Type#)

    if RTRIM($Pay_Begin_Dt, ' ') <> ''
      do Format-DateTime($Pay_Begin_Dt, $PayDates, {DEFDATE}, '', '')
      concat ' - ' with $PayDates
      do Format-DateTime($Pay_End_Dt, $Temp, {DEFDATE}, '', '')
      concat $Temp with $PayDates
      print $PayDates           (+1,1)
    else
      print ' '                 (+1,1)
    end-if

    get #EmplCount from LastPeriodTotals(#Freq#) EmplCount(#Type#)

    do Format-Number(#EmplCount, $out, 'b99,999')
    print $out        (+1,5)

    get #RegGross  from LastPeriodTotals(#Freq#) RegGross(#Type#)

    do Format-Number(#RegGross, $out, 'b99,999,999')
    print $out        (+1,1)

  if #pos < 22

    if $EdInst = 'N'
      get #OT_Earns  from LastPeriodTotals(#Freq#) OT_Earns(#Type#)
      do Format-Number(#OT_Earns, $out, 'b99,999,999')
      print $out        (+1,1)
    else
      print ' '         (+1,1)
    end-if

    get #RegHrs    from LastPeriodTotals(#Freq#) RegHrs(#Type#)

    do Format-Number(#RegHrs, $out, 'b99,999,999')
    print $out        (+1,1)

    if $EdInst = 'N' and #pos < 15     !Omit OT Hours for Salaried   !LXP-19940325
      get #OT_Hrs    from LastPeriodTotals(#Freq#) OT_Hrs(#Type#)
      do Format-Number(#OT_Hrs, $out, 'b99,999,999')
      print $out        (+1,1)
    else
      print ' '         (+1,1)
    end-if

  else
    print ' '           (+3,1)
  end-if

    add 1 to #Freq#
    next-column
  end-while

  columns 1
end-procedure

!********************************************************************
!         COMP-CHANGE      when company changes
!********************************************************************
begin-procedure Comp-Change
  do Array-Initialization
end-procedure

!********************************************************************
!         REPORT-END     Print out last page with contact
!********************************************************************
begin-procedure Report-End
  move '  ' to $Province
  move ' ' to $Can-CMA                                   !LXP-19940325
  move ' ' to $xlatlongname                              !LXP-19940325
  display ' now complete'

  if $Company <> '*'

    if $Prcs_Process_Instance = ''
        input $reasons 'Enter Reasons for Variations'
    else
        let  $reasons = $RC_PAY.Variation_Reason
    end-if

    print 'Reasons for Variations:'                (+9,1)
    print $reasons                                 (+1,1)
    print 'Contact Name'                           (+20,60)
!*****************************************set for your company ******
    print 'Xxxxxx Xxxxxx'                          (+1,60)
    print '------------------------------------'   (+1,60)
    print 'Telephone'                              (+3,60)
!*****************************************set for your company ******
    print '(999) 999-9999'                         (+1,60)
    print '--------------'                         (+1,60)
  end-if

  do Reset
end-procedure

!********************************************************************
!     SKIP         Error routine
!********************************************************************
begin-procedure Skip
  display '*** Selection Error on Employee: ' noline
  display $Prev_EmplId
end-procedure

!********************************************************************

#Include 'readxlat.sqc'  !Read-Translate-Table procedure   !LXP-19940325
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'geternnm.sqc'  !Get-Earnings-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date conversions
#Include 'number.sqc'    !Routines to format numbers
#Include 'getasodt.sqc'  !To get "as-of" report date (reference month end)
#Include 'getdatcd.sqc'  !To calculate month & year from "as-of" date
#Include 'datewrk.sqc'   !To calculate elapsed time
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
