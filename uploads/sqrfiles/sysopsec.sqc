! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSOPSEC: PS Security Audit                                          *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                   /pt_reporting/SQR/sysopsec.sqc /main/pt84x/17 29-Oct-2004.
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYSOPSEC-Main                                             !
!----------------------------------------------------------------------!
begin-procedure SYSOPSEC-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Security Audits'

       do SEC-01
       do SEC-02
       do SEC-03
       do SEC-04
       do SEC-05
       do SEC-06
       do SEC-07
       do SEC-08
       do SEC-09
       do SEC-17
       do SEC-18
       do SEC-19
       do SEC-20
       do SEC-21
       do SEC-24
       do SEC-25
       do SEC-26
       do SEC-27
       do SEC-28
       do SEC-29
       do SEC-30
       do SEC-31
       do SEC-32
!       do SEC-33 /De-activated via ICE 1836960000/ RES 788380
       do SEC-34
       do SEC-35
       do SEC-36       
       
    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-01                                                    !
! Descr:     Incomplete Permission List:  Orphan signon times.         !
!            Entry in PSAUTHSIGNON w/o entry in PSCLASSDEFN.           !
!----------------------------------------------------------------------!
begin-procedure SEC-01

   let $AuditDescr = '(SEC-01) Incomplete Permission List:  '
      || 'Orphan signon times:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Permission List'    #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC01_ClassId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC01_ClassId         (+1,#Start1)

FROM PSAUTHSIGNON A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-02                                                    !
! Descr:     Incomplete Permission List:  Orphan page permissions.     !
!            Entry in PSAUTHITEM w/o entry in PSCLASSDEFN.             !
!----------------------------------------------------------------------!
begin-procedure SEC-02

   let $AuditDescr = '(SEC-02) Incomplete Permission List:  '
      || 'Orphan page permissions:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Permission List'    #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC02_ClassId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC02_ClassId         (+1,#Start1)

FROM PSAUTHITEM A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-03                                                    !
! Descr:     Incomplete Permission List:  Orphan Process Group.        !
!            Entry in PSAUTHPRCS w/o entry in PSCLASSDEFN.             !
!----------------------------------------------------------------------!
begin-procedure SEC-03

   let $AuditDescr = '(SEC-03) Incomplete Permission List:  '
      || 'Orphan Process Group:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Permission List'    #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC03_ClassId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC03_ClassId         (+1,#Start1)

FROM PSAUTHPRCS A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure



!----------------------------------------------------------------------!
! Procedure: SEC-04                                                    !
! Descr:     Incomplete Permission List:  Orphan Process Profile,      !
!            Entry in PSPRCSPRFL w/o entry in PSCLASSDEFN.             !
!----------------------------------------------------------------------!
begin-procedure SEC-04

   let $AuditDescr = '(SEC-04) Incomplete Permission List:  '
      || 'Orphan Process Profile:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Permission List'    #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC04_ClassId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC04_ClassId         (+1,#Start1)

FROM PSPRCSPRFL A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-05                                                    !
! Descr:     Permission List references a non-existent Process Group.  !
!            Entry in PSAUTHPRCS points to non-existent Process Group. !
!----------------------------------------------------------------------!
begin-procedure SEC-05

   let $AuditDescr = '(SEC-05) Permission List references '
      || 'a non-existent Process Group:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 32
   let #numofhdr        =  2

   put 'Permission List'    #Start1 30 into printarray(0)
   put 'Process Group'      #Start2 30 into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC05_ClassId
A.PRCSGRP           &SEC05_PrcsGrp

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC05_ClassId         (+1,#Start1)
   print &SEC05_PrcsGrp         (0, #Start2)

FROM PSAUTHPRCS A
WHERE A.PRCSGRP NOT IN (SELECT PRCSGRP FROM PS_PRCSDEFNGRP)
  AND A.PRCSGRP NOT IN (SELECT PRCSGRP FROM PS_PRCSJOBGRP)
ORDER BY A.CLASSID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-06                                                    !
! Descr:     User Profile references a Role that does not exist.       !
!            PSROLEUSER references a Role not in PSROLEDEFN,           !
!----------------------------------------------------------------------!
begin-procedure SEC-06

   let $AuditDescr = '(SEC-06) User Profile references a '
      || 'Role that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          =  32
   let #numofhdr        =  2

   put 'User ID'        #Start1 30 into printarray(0)
   put 'Role'           #Start2 30 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.ROLEUSER          &SEC06_RoleUser
A.ROLENAME          &SEC06_RoleName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC06_RoleUser        (+1,#Start1)
   print &SEC06_RoleName        (0, #Start2)

FROM PSROLEUSER A
WHERE ROLENAME NOT IN
    (SELECT ROLENAME FROM PSROLEDEFN)
ORDER BY A.ROLEUSER, A.ROLENAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-07                                                    !
! Descr:     Role references a Permission List that does not exist.    !
!            PSROLECLASS references a Perm List not in PSCLASSDEFN.    !
!----------------------------------------------------------------------!
begin-procedure SEC-07

   let $AuditDescr = '(SEC-07) Role references a '
      || 'Permission List that does not exist:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          =  32
   let #numofhdr        =  2

   put 'Role'               #Start1 30 into printarray(0)
   put 'Permission List'    #Start2 30 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.ROLENAME          &SEC07_RoleName
A.CLASSID           &SEC07_ClassId

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC07_RoleName        (+1,#Start1)
   print &SEC07_ClassId         (0, #Start2)

FROM PSROLECLASS A
WHERE CLASSID NOT IN
    (SELECT CLASSID FROM PSCLASSDEFN)
ORDER BY A.ROLENAME, A.CLASSID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-08                                                    !
! Descr:     Role references a User which is not in PSOPRDEFN.         !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure SEC-08

   let $AuditDescr = '(SEC-08) PSROLEUSER references a '
      || 'User that does not exist in PSOPRDEFN'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          =  33
   let #numofhdr        =  2

   put 'User'    #Start1 30 into printarray(0)
   put 'Role'    #Start2 30 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.ROLEUSER          &SEC08_UserName
A.ROLENAME          &SEC08_RoleName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC08_UserName        (+1,#Start1)
   print &SEC08_RoleName        (0, #Start2)

FROM PSROLEUSER A
WHERE ROLEUSER NOT IN
    (SELECT OPRID FROM PSOPRDEFN)
ORDER BY A.ROLENAME, A.ROLEUSER
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-09                                                    !
! Descr:     Role names's used in PSROLECLASS but not in PSROLEDEFN    !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure SEC-09

   let $AuditDescr = '(SEC-09) PSROLECLASS references a '
      || 'Role that does not exist in PSROLEDEFN'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          =  33
   let #numofhdr        =  2

   put 'Role'             #Start1 30 into printarray(0)
   put 'Permission List'  #Start2 30 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
A.ROLENAME          &SEC09_RoleName
A.CLASSID           &SEC09_ClassID

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC09_RoleName       (+1,#Start1)
   print &SEC09_ClassID        (0, #Start2)

FROM PSROLECLASS A
WHERE ROLENAME NOT IN
    (SELECT ROLENAME FROM PSROLEDEFN)
ORDER BY A.ROLENAME, A.CLASSID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-17                                                    !
! Descr:     System table audit against PSOPRDEFN table:               !
!            SEC-17: Verify Primary Permission List specified for      !
!            user exists                                               !
!----------------------------------------------------------------------!
begin-procedure SEC-17

   let $AuditDescr = '(SEC-17) Primary Permission List specified for user does not exist '
      || 'in the Permission List Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'            #Start1 30 into printarray(0)
   put 'Primary Perm List'  #Start2 17 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
OPRID                &SEC17_OprId
OPRCLASS             &SEC17_OprClass

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC17_OprId             (+1,#Start1)
   print &SEC17_OprClass          (0,#Start2)

FROM PSOPRDEFN
WHERE OPRCLASS <> ' '
  AND NOT EXISTS
    (SELECT 'X'
       FROM PSCLASSDEFN B
       WHERE B.CLASSID = PSOPRDEFN.OPRCLASS)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-18                                                  !
! Descr:     System table audit against PSROLEUSER table:              !
!            SEC-18: Verify User named in a User-Role relationship   !
!            exists                                                    !
!----------------------------------------------------------------------!
begin-procedure SEC-18

   let $AuditDescr = '(SEC-18) User named in a User-Role relationship does not exist '
      || 'in the User Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Oper ID'        #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
ROLEUSER             &OprDf18_RoleUser

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf18_RoleUser          (+1,#Start1)

FROM PSROLEUSER
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSOPRDEFN B
       WHERE B.OPRID = PSROLEUSER.ROLEUSER)
ORDER BY ROLEUSER
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-19                                                  !
! Descr:     System table audit against PSROLEUSER table:              !
!            SEC-19: Verify that Role named in a User-Role           !
!            relationship exists                                       !
!----------------------------------------------------------------------!
begin-procedure SEC-19

   let $AuditDescr = '(SEC-19) Role named in a User-Role relationship does not exist '
      || 'in the Role Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Role Name'      #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
ROLENAME             &OprDf19_RoleName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf19_RoleName          (+1,#Start1)

FROM PSROLEUSER
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSROLEDEFN B
       WHERE B.ROLENAME = PSROLEUSER.ROLENAME)
ORDER BY ROLENAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-20                                                  !
! Descr:     System table audit against PSROLECLASS table:             !
!            SEC-20: Verify that specified Rolename exist in         !
!            PSROLEDEFN Table                                          !
!----------------------------------------------------------------------!
begin-procedure SEC-20

   let $AuditDescr = '(SEC-20) Role named in a Role-Permission List relationship does not exist '
      || 'in the Role Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Role Name'      #Start1 30 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
ROLENAME             &OprDf20_RoleName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf20_RoleName          (+1,#Start1)

FROM PSROLECLASS
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSROLEDEFN B
       WHERE B.ROLENAME = PSROLECLASS.ROLENAME)
ORDER BY ROLENAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-21                                                  !
! Descr:     System table audit against PSROLECLASS table:             !
!            SEC-21: Verify that specified Permission List exist in  !
!            PSCLASSDEFN Table                                         !
!----------------------------------------------------------------------!
begin-procedure SEC-21

  let $AuditDescr = '(SEC-21) Permission List named in a Role-Permission List relationship does not exist '
      || 'in the Permission List Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Permission List' #Start1 15 into printarray(0)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
CLASSID              &OprDf21_ClassID

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf21_ClassID           (+1,#Start1)

FROM PSROLECLASS
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSCLASSDEFN B
       WHERE B.CLASSID = PSROLECLASS.CLASSID)
ORDER BY CLASSID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-24                                                  !
! Descr:    System table audit against PSOPRDEFN table:                !
!           SEC-24: Verify that Row Level Security Permission List   !
!           exists                                                     !
!----------------------------------------------------------------------!
begin-procedure SEC-24

   let $AuditDescr = '(SEC-24) Row Level Security Permission List specified for user does not exist '
      || 'in the Permission List Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'            #Start1 30 into printarray(0)
   put 'Row Sec Perm List'  #Start2 17 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
OPRID                &OprDf24_OperID
ROWSECCLASS          &OprDf24_RowSecClass

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf24_OperID            (+1,#Start1)
   print &OprDf24_RowSecClass       (0,#Start2)

FROM PSOPRDEFN
WHERE ROWSECCLASS <> ' '
  AND NOT EXISTS
    (SELECT 'X'
       FROM PSCLASSDEFN B
       WHERE B.CLASSID = PSOPRDEFN.ROWSECCLASS)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-25                                                  !
! Descr:     System table audit against PSOPRDEFN table:               !
!            SEC-25: Verify that specified Process Profile           !
!            Permission List exists                                    !
!----------------------------------------------------------------------!
begin-procedure SEC-25

   let $AuditDescr = '(SEC-25) Process Profile Permission List specified for the User does not exist '
      || 'in the Permission List Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'                    #Start1 30 into printarray(0)
   put 'Process Profile Perm List'  #Start2 25 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
OPRID                &OprDf25_OperID
PRCSPRFLCLS          &OprDf25_ProcessProfileClass

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf25_OperID                (+1,#Start1)
   print &OprDf25_ProcessProfileClass   (0,#Start2)

FROM PSOPRDEFN
WHERE PRCSPRFLCLS <> ' '
  AND NOT EXISTS
    (SELECT 'X'
       FROM PSCLASSDEFN B
       WHERE B.CLASSID = PSOPRDEFN.PRCSPRFLCLS)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-26                                                  !
! Descr:     System table audit against PSOPRDEFN table:               !
!            SEC-26: Verify that specified Navigator Permission List !
!            exists                                                    !
!----------------------------------------------------------------------!
begin-procedure SEC-26

   let $AuditDescr = '(SEC-26) Navigator Homepage Permission List specified for the user does not exist '
      || 'in the Permission List Definition table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'                  #Start1 30 into printarray(0)
   put 'Nav Home Page Perm List'  #Start2 23 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
OPRID                &OprDf26_OperID
DEFAULTNAVHP         &OprDf26_NavigatorClass

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf26_OperID            (+1,#Start1)
   print &OprDf26_NavigatorClass    (0,#Start2)

FROM PSOPRDEFN
WHERE DEFAULTNAVHP <> ' '
  AND NOT EXISTS
    (SELECT 'X'
       FROM PSCLASSDEFN B
       WHERE B.CLASSID = PSOPRDEFN.DEFAULTNAVHP)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-27                                                  !
! Descr:     System table audit against PSOPRDEFN table:               !
!            SEC-27: Verify that Access Profile specified for user   !
!            exists                                                    !
!----------------------------------------------------------------------!
begin-procedure SEC-27

   let $AuditDescr = '(SEC-27) Access Profile specified for user does not exist '
      || 'in the Access Profile table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'        #Start1 30 into printarray(0)
   put 'Symbolic ID'    #Start2 11 into printarray(1)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
OPRID                &OprDf27_OperID
SYMBOLICID           &OprDf27_SymbolicID

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf27_OperID            (+1,#Start1)
   print &OprDf27_SymbolicID        (0,#Start2)

FROM PSOPRDEFN
WHERE SYMBOLICID <> ' '
  AND NOT EXISTS
    (SELECT 'X'
       FROM PSACCESSPRFL B
       WHERE B.SYMBOLICID = PSOPRDEFN.SYMBOLICID)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-28                                                    !
! Descr:     System table audit against PSAUTHITEM                     !
!            SEC-28: IDENTIFY bad PSAUTHITEM entries                 !
!----------------------------------------------------------------------!
begin-procedure SEC-28

   let $AuditDescr = '(SEC-28) Invalid entries '
      || 'in  the PSAUTHITEM table:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let $DetailErrFound     = 'N'
   let #Start1             =   1
   let #Start2             =   20
   let #rows               =   0
   let #numofhdr           =   2

   let $firstiteration = 'Y'

   put '       '        #Start1 20 into printarray(0)
   put 'Values'         #Start2 30 into printarray(1)

begin-SELECT on-Error=SQL-Error
CLASSID              &Record28_Classid
MENUNAME             &Record28_MenuName
BARNAME              &Record28_BarName
BARITEMNAME          &Record28_BarItemName
PNLITEMNAME          &Record28_PnlItemName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if

   let #rows = #rows + 1

   print 'CLASSID:'                 (+1,1) BOLD
   print &Record28_Classid          (0,20)
   print 'MENUNAME:'                (+1,1) BOLD
   print &Record28_MenuName         (0,20)
   print 'BARNAME:'                 (+1,1) BOLD
   print &Record28_BarName          (0,20)
   print 'BARITEMNAME:'             (+1,1) BOLD
   print &Record28_BarItemName      (0,20)
   print 'PNLITEMNAME:'             (+1,1) BOLD
   print &Record28_PnlItemName      (0,20)
   print '' (+1,1)

FROM PSAUTHITEM
WHERE (PSAUTHITEM.MENUNAME NOT LIKE 'WEBLIB_%'
       AND PSAUTHITEM.MENUNAME NOT IN ('CLIENTPROCESS',
                                       'DATA_MOVER',
                                       'IMPORT_MANAGER',
                                       'OBJECT_SECURITY',
                                       'QUERY',
                                       'PERFMONPPMI'
                                      )
       AND PSAUTHITEM.MENUNAME NOT LIKE ('APPLICATION_DESIGNER%')
AND PSAUTHITEM.MENUNAME <>'REN'
       AND NOT EXISTS
         (SELECT 'X'
            FROM PSMENUITEM MI
            WHERE PSAUTHITEM.MENUNAME = MI.MENUNAME
              AND PSAUTHITEM.BARNAME = MI.BARNAME
              AND PSAUTHITEM.BARITEMNAME = MI.ITEMNAME
              AND (   MI.ITEMTYPE IN (0, 1, 2, 3, 4, 6, 7, 8, 10, 11)
                   OR (MI.ITEMTYPE = 5
                       AND EXISTS
                         (SELECT 'X'
                            FROM PSPNLGRPDEFN GD, PSPNLGROUP GI
                            WHERE MI.PNLGRPNAME = GD.PNLGRPNAME
                              AND MI.MARKET = GD.MARKET
                              AND GD.PNLGRPNAME = GI.PNLGRPNAME
                              AND GD.MARKET = GI.MARKET
                              AND PSAUTHITEM.PNLITEMNAME = GI.ITEMNAME
                         )
                      )
                   OR (MI.ITEMTYPE = 9
                       AND EXISTS
                         (SELECT 'X'
                            FROM PSPCMNAME PCN, PSPCMPROG PCP
                            WHERE PCN.OBJECTID1 = 3
                              AND PCN.OBJECTVALUE1 = MI.MENUNAME
                              AND PCN.OBJECTID2 = 4
                              AND PCN.OBJECTVALUE2 = MI.BARNAME
                              AND PCN.OBJECTID3 = 5
                              AND PCN.OBJECTVALUE3 = MI.ITEMNAME
                              AND PCN.OBJECTID4 = 12
                              AND PCN.OBJECTVALUE4 = 'ItemSelected'
                              AND PCN.OBJECTID1 = PCP.OBJECTID1
                              AND PCN.OBJECTVALUE1 = PCP.OBJECTVALUE1
                              AND PCN.OBJECTID2 = PCP.OBJECTID2
                              AND PCN.OBJECTVALUE2 = PCP.OBJECTVALUE2
                              AND PCN.OBJECTID3 = PCP.OBJECTID3
                              AND PCN.OBJECTVALUE3 = PCP.OBJECTVALUE3
                              AND PCN.OBJECTID4 = PCP.OBJECTID4
                              AND PCN.OBJECTVALUE4 = PCP.OBJECTVALUE4
                         )
                      )
                   OR (MI.ITEMTYPE = 12
                       AND EXISTS
                         (SELECT 'X'
                            FROM PSXFERITEM XI
                            WHERE MI.MENUNAME = XI.MENUNAME
                              AND MI.ITEMNAME = XI.ITEMNAME
                         )
                      )
                  )
         )
      )
OR (PSAUTHITEM.MENUNAME LIKE 'WEBLIB_%'
    AND NOT EXISTS
      (SELECT 'X'
         FROM PSPCMPROG PCP
         WHERE PCP.OBJECTID1 = 1
           AND PCP.OBJECTVALUE1 = PSAUTHITEM.MENUNAME
           AND PCP.OBJECTID2 = 2
           AND PCP.OBJECTVALUE2 = PSAUTHITEM.BARNAME
      )
   )
OR (PSAUTHITEM.MENUNAME IN ('CLIENTPROCESS',
                            'DATA_MOVER',
                            'IMPORT_MANAGER',
                            'OBJECT_SECURITY',
                            'QUERY',
                            'PERFMONPPMI'
                           )
      AND (PSAUTHITEM.BARNAME <> ' '
           OR PSAUTHITEM.BARITEMNAME <> ' '
           OR PSAUTHITEM.PNLITEMNAME <> ' '
          )
   )
OR (PSAUTHITEM.MENUNAME LIKE ('APPLICATION_DESIGNER%')
      AND ((PSAUTHITEM.BARNAME <> ' '
            AND PSAUTHITEM.BARNAME NOT IN
              (SELECT OBJNAME
                 FROM PS_APP_DES_OBJECTS
                 WHERE PSAUTHITEM.BARNAME = OBJNAME
              )
           )
            OR PSAUTHITEM.BARITEMNAME <> ' '
            OR PSAUTHITEM.PNLITEMNAME <> ' '
          )
   )
OR (PSAUTHITEM.MENUNAME = 'REN'
      AND ((PSAUTHITEM.BARNAME <> ' '
            AND PSAUTHITEM.BARNAME NOT IN
              (SELECT OBJNAME
                 FROM PS_APP_DES_OBJECTS
                 WHERE PSAUTHITEM.BARNAME = OBJNAME
              )
           )
            OR PSAUTHITEM.BARITEMNAME <> ' '
            OR PSAUTHITEM.PNLITEMNAME <> ' '
          )
   )
ORDER BY CLASSID, MENUNAME, BARNAME, BARITEMNAME, PNLITEMNAME
end-SELECT

   if (#rows > 0)
   print ' '                     (+1,1)
   end-if

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SEC-29                                                    !
! Descr:     System table audit against PSPRSMPERM table:              !
!            SEC-29: Verify that the PORTAL_PERMTYPE is a valid entry  !
!----------------------------------------------------------------------!
begin-procedure SEC-29

   let $AuditDescr = '(SEC-29) The following PSPRSMPERM rows have invalid PORTAL_PERMTYPE'


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 33
   let #Start3          = 45
   let #Start4          = 77
   let #Start5          = 109
   let #numofhdr        = 5

   put 'Portal Name'    #Start1 30 into printarray(0)
   put 'Object Type'    #Start2 11 into printarray(1)
   put 'Object Name'    #Start3 30 into printarray(2)
   put 'Perm Name'      #Start4 30 into printarray(3)
   put 'Perm Type'      #Start5  9 into printarray(4)

begin-SELECT DISTINCT on-Error=Rpt-SQL-Error
PORTAL_NAME              &OprDf29_PORTAL_NAME
PORTAL_REFTYPE           &OprDf29_PORTAL_REFTYPE
PORTAL_OBJNAME           &OprDf29_PORTAL_OBJNAME
PORTAL_PERMNAME          &OprDf29_PORTAL_PERMNAME
PORTAL_PERMTYPE          &OprDf29_PORTAL_PERMTYPE

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf29_PORTAL_NAME           (+1,#Start1)
   print &OprDf29_PORTAL_REFTYPE         (0,#Start2)
   print &OprDf29_PORTAL_OBJNAME         (0,#Start3)
   print &OprDf29_PORTAL_PERMNAME        (0,#Start4)
   print &OprDf29_PORTAL_PERMTYPE        (0,#Start5)

FROM PSPRSMPERM WHERE PORTAL_PERMTYPE NOT IN ('P','R')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-30                                                    !
! Descr:     System table audit against PSOPRDEFN table:               !
!            SEC-30: Verify that Role User Table ROLEXLATOPR has an    !
!            entry corresponding to each OPRID in PSOPRDEFN.           !
!----------------------------------------------------------------------!
begin-procedure SEC-30

   let $AuditDescr = '(SEC-30) Role User table (ROLEXLATOPR) should be populated when new User Profiles '
      || '(entries in PSOPRDEFN) are created using User Profile component through PIA. '
      || 'The following User Profiles need to be fixed by simply opening and saving them through PIA:' 

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 34
   let #numofhdr        =  2

   put 'Oper ID'                    #Start1 30 into printarray(0)
   put 'Description'  #Start2 30 into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
OPRID                &OprDf30_OperID
OPRDEFNDESC          &OprDf30_Descr

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf30_OperID                (+1,#Start1)
   print &OprDf30_Descr                 (0,#Start2)

FROM PSOPRDEFN
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PS_ROLEXLATOPR B
       WHERE B.ROLEUSER = PSOPRDEFN.OPRID)
ORDER BY OPRID
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-31                                                    !
! Descr:     System table audit against PS_ROLEXLATOPR table:          !
!            SEC-31: Verify that User Definition Table PSOPRDEFN has   !
!            an entry corresponding to each ROLEUSER in PS_ROLEXLATOPR.!
!----------------------------------------------------------------------!
begin-procedure SEC-31

   let $AuditDescr = '(SEC-31) Role User table (ROLEXLATOPR) gets populated when new User Profiles '
      || '(entries in PSOPRDEFN) are created using User Profile component through PIA. '
      || 'The following Role Users do not have corresponding User IDs in PSOPRDEFN table:'
      || '(These Role Users should be removed from PS_ROLEXLATOPR table)' 

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Role User'                    #Start1 30 into printarray(0)

begin-SELECT on-Error=Rpt-SQL-Error
A.ROLEUSER                &RoleUser31

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &RoleUser31                (+1,#Start1)

FROM PS_ROLEXLATOPR A
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSOPRDEFN B
       WHERE B.OPRID = A.ROLEUSER)
ORDER BY A.ROLEUSER
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-32                                                    !
! Descr:     System table audit against PSROLEDEFN table:              !
!            SEC-32: Verify that NO inactive Roles exist               !
!            in the table PSROLEDEFN.                                  !
!----------------------------------------------------------------------!
begin-procedure SEC-32

   let $AuditDescr = '(SEC-32) Role Defition table (PSROLEDEFN) should contain only Active Roles. '
      || 'The following Roles need to be fixed by either removing them or making them Active:' 

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #numofhdr        =  1

   put 'Role Name'      #Start1 30 into printarray(0)

begin-SELECT on-Error=Rpt-SQL-Error
ROLENAME             &OprDf32_RoleName

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &OprDf32_RoleName          (+1,#Start1)

FROM PSROLEDEFN
WHERE ROLESTATUS <> 'A'
ORDER BY ROLENAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-33                                                    !
! Descr:     Permission List references a non-existent Service         !
!            Operation. Entry in PSAUTHWS points to non-existent       !
!            Service Operations.                                       !
!----------------------------------------------------------------------!
!begin-procedure SEC-33
!
!   let $AuditDescr = '(SEC-33) Permission List references '
!      || 'a non-existent Service Operation:'
!
!#ifdef debugd
!    show 'Starting: ' $AuditDescr
!    date-time () {PTHMSM} &StrDateTime
!    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
!    show 'StartTime   : ' &StrDateTime
!#end-if
!
!   let #rows            =  0
!   let $DetailErrFound  = 'N'
!   let #Start1          =  1
!   let #Start2          = 32
!   let #numofhdr        =  2
!
!   put 'Permission List'    #Start1 30 into printarray(0)
!   put 'Service Operation'  #Start2 30 into printarray(1)
!
!begin-SELECT on-Error=Rpt-SQL-Error
!A.CLASSID           &SEC33_ClassId
!A.IB_OPERATIONNAME  &SEC33_SvcOpr
!
!   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
!       move 'Y' to $DetailErrFound
!       do PrintSectionHeadings
!   end-if
!   let #rows = #rows +1
!
!   print &SEC33_ClassId         (+1,#Start1)
!   print &SEC33_SvcOpr          (0, #Start2)
!
!FROM PSAUTHWS A
!WHERE NOT EXISTS 
!    (SELECT 'X' 
!     FROM PSOPERATION B
!     WHERE B.IB_OPERATIONNAME = A.IB_OPERATIONNAME)
!ORDER BY A.CLASSID, A.IB_OPERATIONNAME
!end-SELECT
!
!   do End-Section
!
!#ifdef debugd
!    date-time () {PTHMSM} &EndDateTime
!    show 'EndTime     : ' &EndDateTime
!    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
!    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
!    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
!    show 'Exiting : ' $AuditDescr
!    show ' '
!#End-if
!
!end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-34                                                    !
! Descr:     Incomplete Permission List:  Orphan Service Operation.    !
!            Entry in PSAUTHWS w/o entry in PSCLASSDEFN.               !
!----------------------------------------------------------------------!
begin-procedure SEC-34

   let $AuditDescr = '(SEC-34) Incomplete Permission List:  '
      || 'Orphan Service Operation:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 32
   let #numofhdr        =  2

   put 'Permission List'    #Start1 30 into printarray(0)
   put 'Service Operation'  #Start2 30 into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC34_ClassId
A.IB_OPERATIONNAME  &SEC34_SvcOpr

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC34_ClassId         (+1,#Start1)
   print &SEC34_SvcOpr          (0, #Start2)

FROM PSAUTHWS A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
ORDER BY A.CLASSID, A.IB_OPERATIONNAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-35                                                    !
! Descr:     Incomplete Permission List:  Orphan Search Groups.        !
!            Entry in PS_SCRTY_SRCHGRP w/o entry in PSCLASSDEFN.       !
!----------------------------------------------------------------------!
begin-procedure SEC-35

   let $AuditDescr = '(SEC-35) Incomplete Permission List:  '
      || 'Orphan Search Groups:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 32
   let #numofhdr        =  2

   put 'Permission List'    #Start1 30 into printarray(0)
   put 'Search Group'       #Start2 30 into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC35_ClassId
A.PTSF_SRCHGRP_NAME  &SEC35_SrchGrp

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC35_ClassId         (+1,#Start1)
   print &SEC35_SrchGrp         (0, #Start2)

FROM PS_SCRTY_SRCHGRP A
WHERE NOT EXISTS
  (SELECT 'X'
  FROM PSCLASSDEFN B
  WHERE B.CLASSID = A.CLASSID)
ORDER BY A.CLASSID, A.PTSF_SRCHGRP_NAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SEC-36                                                    !
! Descr:     Permission List references a non-existent Search Group    !
!            Entry in PS_SCRTY_SRCHGRP points to non-existent          !
!            Search Group.                                             !
!----------------------------------------------------------------------!
begin-procedure SEC-36

   let $AuditDescr = '(SEC-36) Permission List references '
      || 'a non-existent Search Group:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

   let #rows            =  0
   let $DetailErrFound  = 'N'
   let #Start1          =  1
   let #Start2          = 32
   let #numofhdr        =  2

   put 'Permission List'    #Start1 30 into printarray(0)
   put 'Search Group'       #Start2 30 into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.CLASSID           &SEC36_ClassId
A.PTSF_SRCHGRP_NAME &SEC36_SrchGrp

   if (((#current-line + 1) = #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SEC36_ClassId         (+1,#Start1)
   print &SEC36_SrchGrp         (0, #Start2)

FROM PS_SCRTY_SRCHGRP A
WHERE NOT EXISTS 
    (SELECT 'X' 
     FROM PSPTSF_SRCCAT B
     WHERE B.PTSF_ISGBLSRCH = 'Y'
       AND B.PTSF_SRCCAT_NAME = A.PTSF_SRCHGRP_NAME)
ORDER BY A.CLASSID, A.PTSF_SRCHGRP_NAME
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure