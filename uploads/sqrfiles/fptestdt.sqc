!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:55:08                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

!******************************************************************
!
! This sqc includes various date functions built out of
! DateMath.Sqc, DateTime.Sqc...
! Calculation of a duration in calendar days or with the
! thirtieth method
! Retrieves the code from the FPS Installation parameters table
! for the calculation of duration in Calendar days or using
! the thirtieth method
!
!******************************************************************

#include 'setenv.sqc'
#include 'datetime.sqc'
#include 'datemath.sqc'


!****************************************************************
!
! Add-Date : Add a number of days, months, years to a date
!
! Parameters
!
!    IN      $DateIn  : Input date
!                       Format YYYY-MM-DD
!            #Year    : Number of years to add
!            #Month   : Number of months to add
!            #Day     : Number of days to add
!
!    OUT     $DateOut : Ouput date = Input date + added duration
!
!****************************************************************
BEGIN-PROCEDURE Add-Date($DateIn,#Year,#Month,#Day,:$DateOut)

 Do Dtu-Add-Days($DateIn,#Day,$DateDay)
 Do Dtu-Add-Months($DateDay,#Month,$DateMonth)
 Do Dtu-Add-Years($DateMonth,#Year,$DateOut)

END-PROCEDURE Add-Date


!****************************************************************
!
! Substr-Date : Substracts a number of days, months, years to a date
!
! Parameters
!
!    IN      $DateIn  : Input date
!                       Format YYYY-MM-DD
!            #Year    : Number of years to be substracted
!            #Month   : Number of months to be substracted
!            #Day     : Number of days to be substracted
!
!    OUT     $DateOut : Output date after the substraction of the duration
!
!****************************************************************
BEGIN-PROCEDURE Substr-Date($DateIn,#Year,#Month,#Day,:$DateOut)

Do Dtu-Subtract-Days($DateIn,#Day,$DateDay)
Let #Month = -1 * #Month
Let #Year =  -1 * #Year
Do Dtu-Add-Months($DateDay,#Month,$DateMonth)
Do Dtu-Add-Years($DateMonth,#Year,$DateOut)

END-PROCEDURE Substr-Date


!****************************************************************
!
! Diff-Date : Calculates the duration between two dates
!             The duration between the two dates is stored in the format
!             Years-Months-Days
!
! Parameters
!
!    IN      $DateIn1 : Date from which the date is substracted
!                       Format : YYYY-MM-DD
!            $DateIn2 : Substracted date
!                       Format : YYYY-MM-DD
!
!    OUT     $Year    : Number of years between the two dates
!            $Month   : Number of months
!            $Day     : Number of days
!
!****************************************************************
BEGIN-PROCEDURE Diff-Date-Sp($DateIn1,$DateIn2,:#year,:#Month,:#day)

 Do Dtu-Diff-Years($DateIn1,$DateIn2,#Year)
 Do Dtu-Diff-Months($DateIn1,$DateIn2,#Months)
 Let #Month = Mod(#Months,12)
 Do Dtu-Parse-Date($DateIn1,#Year1,#Month1,#Day1)
 Do Dtu-Parse-Date($DateIn2,#Year2,#Month2,#Day2)

! Calculation using the thirtieth method
!---------------------------------------
 If (#Month1 = 2 and #Day1 >= 28 )  or #Day1 = 31
    Let #Day1=30
 End-if
 If (#Month2 = 2 and #Day2 >= 28 )  or #Day2 = 31
    Let #Day2=30
 End-if

 if #Day2 < #Day1
   Do Dtu-Month-End($DateIn1,$LastMonthDay)
   Do Dtu-Parse-Date($LastMonthDay,#y,#m,#j)
   Let #j = 30                             ! Thirtieth method
   Let #DiffDay =  #j - #Day1
   Let #Day = #DiffDay + #Day2 +1
 else
   Let #Day = #Day2 - #Day1 +1
 end-if

END-PROCEDURE Diff-Date-Sp


!***************************************************************
!
!
!   Change-Char : Concatenation of a number of years, months, days
!                 into a character string
!
! Parameters :
!     IN         #Annee, #Mois, #Jour
!     OUT        $Ech : character string
!
! (If the parameters are lower than 10, fill-up with 0)
!
!
!***************************************************************
BEGIN-PROCEDURE Change-Char(#Annee,#Mois, #Jour,:$Ech )

     if #Annee < 10
        let $Ech = '0' || to_char(#Annee)
     else
        let $Ech = to_char(#Annee)
     end-if
     if #Mois < 10
        let $Ech = $Ech||'0' || to_char(#Mois)
     else
        let $Ech = $Ech||to_char(#Mois)
     end-if
     if #Jour < 10
        let $Ech = $Ech||'0' || to_char(#Jour)
     else
        let $Ech = $Ech||to_char(#Jour)
     end-if

END-PROCEDURE Change-Char


!***************************************************************
!
!
!   Days-Number : retrieves the number of days in the month
!                 for the date entered as parameter
!
! Parameters :
!     IN         $DateIn
!     OUT        #Days
!
!***************************************************************
BEGIN-PROCEDURE Days-Number($DateIn,:#Days )

        do dtu-month-end($DateIn,$DateEnd)
        do dtu-parse-date($DateEnd,#Years,#Months,#Days)

END-PROCEDURE Days-Number


!***************************************************************
!
!
!   FP-Calc-Dur :Calculates the duration
!               between two dates according to the calculation method
!               (calendar days or thirtieth method)
!               this duration is expressed in YYYY-MM-DD
!
! Parameters :
!     IN        $Calc-Typ, $Begin-Date,$End-Date
!     OUT       #Years,#Months,#Days
!
!***************************************************************
BEGIN-PROCEDURE FP-Calc-Dur($Calc-Typ,$Begin-Date,$End-Date,:#Years,:#Months,:#Days)

let #Years=0
Let #Months=0
Let #Days=0

IF $Calc-Typ ='T'      !Thirtieth calculation method

        Do Dtu-Diff-Years-fp($Begin-Date,$End-Date,#Years)
        Do Dtu-Diff-Months-fp($Begin-Date,$End-Date,#M)

        Let #Months = Mod(#M,12)

        Do Dtu-Parse-Date($Begin-Date,#YY1,#MM1,#DD1)
        Do Dtu-Parse-Date($End-Date,#YY2,#MM2,#DD2)

        If (#MM1 = 2 and #DD1 >= 28 )  or #DD1 = 31
                Let #DD1=30
        End-if
        If (#MM2 = 2 and #DD2 >= 28 )  or #DD2 = 31
                Let #DD2=30
        End-if

        if #DD2 < #DD1
                Do Dtu-Month-End($Begin-Date,$LastMonthDay)
                Do Dtu-Parse-Date($LastMonthDay,#y,#m,#j)
                Let #j = 30  ! thirtieth calculation method
                Let #DiffDay =  #j - #DD1
               Let #Days = #DiffDay + #DD2 +1 !+1 to include the limits
         else
                Let #Days = #DD2 - #DD1 +1    !+1 to include the limits
         end-if



else                    !Calendar days method

        do dtu-parse-date($Begin-Date,#YY1,#MM1,#DD1)
        do dtu-parse-date($End-Date,#YY2,#MM2,#DD2)
        Do Days-Number($End-Date,#Days-Number )!Number of days End of position

        IF #YY1=#YY2 and #MM1=#MM2 !if begin and end date are in the same month
            let #Days=#DD2-#DD1+1
        else
            IF #DD1 = 1
                let $Begin-Date-ent=$Begin-Date
                let #Begin-days=0
             else

        !If the position does not start on the first day of the month
        !calculation of the remaining number of days
        !------------------------------------------------------------

                do dtu-add-months($Begin-Date,1,$Begin-Date-ent)

                ! Begin Date of the month following the start of the position
                !------------------------------------------------------------
                do dtu-month-begin($Begin-Date-ent,$Begin-Date-ent)

                ! Calculation of the remaining number of days / Beginning of the position
                !------------------------------------------------------------------------
                do dtu-diff-days($Begin-Date,$Begin-Date-ent,#Begin-days)

            end-if

            IF #DD2 = 1
                let $End-Date-ent=$End-Date
                let #End-days=1
            else

                ! Begin date of the month End of position
                !----------------------------------------
                do dtu-month-begin($End-Date,$End-Date-ent)

                ! Calculation of the remaining number of days / End of the position
                !------------------------------------------------------------------
                do dtu-diff-days($End-Date-ent,$End-Date,#End-days)
                let #End-days=#End-days+1

                #IFDEF DEBUGI
                    display 'Sen-Calc Remaining Nb Days #End-days : ' noline
                    display #End-days
                #ENDIF

            end-if

        ! Duration in full months
        !------------------------

           #IFDEF DEBUGI
                display '$Begin-Date-ent : '    noline
                display $Begin-Date-ent
                display '$End-Date-ent : '      noline
                display $End-Date-ent
           #ENDIF

           do dtu-diff-months($Begin-Date-ent,$End-Date-ent,#Months)

           #IFDEF DEBUGI
                display '#Months : ' noline
                display #Months
           #ENDIF

           let #Days=#Begin-days+#End-days

        end-if

        While #Days >= #Days-Number
                let #Days = #Days - #Days-Number
                let #Months = #Months + 1
        End-While

        While #Months >= 12
                let #Years = #Years + 1
                let #Months = #Months - 12
        End-While

end-if

END-PROCEDURE FP-Calc-Dur


!***************************************************************
!
!
!       Get-Cal-Thirtieth
!       Retrieve the Thirtieth / Calendar days calculation method indicator in
!       the FPS installation parameter table
!
!       OUT     $Cal-Thirtieth  Thirtieth / Calendar days calculation method indicator
!               $Termdt-cd      Code expiration date: Anniversary dt,
!                               begin date of the preceding or following month
!
!***************************************************************
BEGIN-PROCEDURE Get-Cal-Thirtieth(:$Cal-Thirtieth,:$Termdt-cd)

#IFDEF DEBUGI
    display 'Get-Cal-Thirtieth'
#ENDIF

let $sql-statement = 'TestDate,,Select,Get-Cal-Thirtieth'
BEGIN-SELECT On-Error=SQL-Error

A.FP_CALDURPSN
A.FP_TERMDT_CD

    let $Cal-Thirtieth =  &A.FP_CALDURPSN
    Let $Termdt-cd = &A.FP_TERMDT_CD

from PS_FPMSYSTEM_TBL A
END-SELECT

END-PROCEDURE Get-Cal-Thirtieth


!***************************************************************
!
!   Calc-Posit-End: Calculation of the end date for the position
!
!   Real or expected end date for the position
!   If there are no real or expected end date, we add 10 years to the begin date of the position
!
!       IN      $Posit-Beg
!               $End-dt
!               $ForEnd-dt
!
!       OUT     $Posit-End
!
!
!***************************************************************
BEGIN-PROCEDURE Calc-Posit-End ($Posit-Beg,$End-dt,$ForEnd-dt,
                                :$Posit-End)
if $End-dt = ''
        if $ForEnd-dt = ''
                 do Add-Date($Posit-Beg,10,0,0,$Posit-End )
        else
                 let $Posit-End = $ForEnd-dt
        end-if
else
        let $Posit-End = $End-dt
end-if

END-PROCEDURE Calc-Posit-End


!***************************************************************
!
!
!   Trans-FullTime : Retrieve the full-time equivalent
!                    for a part time duration Y/M/D #Pct-Tp
!
!       IN      #Pct-Tp         Part-time percentage
!               #A, #M, #D      Duration Y/M/D Full time
!
!
!       OUT     #AF, #MF, #DF  Duration Y/M/D Part time
!
!***************************************************************
BEGIN-PROCEDURE  Trans-FullTime(#Pct-Tp,#A,#M,#D,:#AF,:#MF,:#DF)

Let #N = 360*#A + 30*#M + #D
Let #N = ( #Pct-Tp /100 ) * #N
Let #N = Round ( #N , 0)
Let #AF = #N / 360
Let #AF = Floor (#AF)
Let #N = Mod (#N,360)
Let #MF = #N / 30
Let #MF = Floor (#MF)
Let #DF = Mod (#N,30)

While #DF >= 30
        let #MF = #MF + 1
        let #DF = #DF - 30
End-While

While #MF >= 12
        let #AF = #AF + 1
        let #MF = #MF - 12
End-While

END-PROCEDURE Trans-FullTime


!***************************************************************
!
!
!   Trans-PartTime : Calculate the equivalent part time
!                    for a part time duration Y/M/D #Pct-Tp
!
!       IN      #Pct-Tp         Part-time percentage
!               #A, #M, #D      Duration Y/M/D Full time
!
!
!***************************************************************
BEGIN-PROCEDURE  Trans-PartTime(#Pct-Tp,#A,#M,#D,:#AF,:#MF,:#DF)

Let #N = 360*#A + 30*#M + #D
Let #N = ( 100 / #Pct-Tp ) * #N
Let #N = Round ( #N , 0)
Let #AF = #N / 360
Let #AF = Floor (#AF)
Let #N = Mod (#N,360)
Let #MF = #N / 30
Let #MF = Floor (#MF)
Let #DF = Mod (#N,30)

While #DF >= 30
        let #MF = #MF + 1
        let #DF = #DF - 30
End-While

While #MF >= 12
        let #AF = #AF + 1
        let #MF = #MF - 12
End-While

END-PROCEDURE Trans-PartTime


!***************************************************************
!
!
!   Trans-TermDt : Transform expiration date into a function code
!                  expiration date (Anniversary date ..)
!
!       IN   $Termdt-cd         Expiration Date Code
!            $Prom-dt           Expiration Date
!
!       OUT  $Prom-dt-Tra       Resulting Date
!
!***************************************************************
BEGIN-PROCEDURE  Trans-Termdt ($Termdt-cd, $Prom-dt, :$Prom-dt-Tra)

Evaluate $Termdt-cd

        When = 'A'      !Anniversary Date

                Let $Prom-dt-Tra = $Prom-dt

        When = 'B'      !Beginning of the month

                do dtu-month-begin ($Prom-dt,$Prom-dt-tra)

        When = 'E'      !Beginning of the following month

                do dtu-add-months ($Prom-dt,1,$Prom-dt)
                do dtu-month-begin ($Prom-dt,$Prom-dt-tra)

end-evaluate

END-PROCEDURE Trans-Termdt


!**************************************************************************
! dtu-diff-months-fp
!   Input:    $dtu_date1 ("from"), $dtu_date2 ("to")
!   Output:   #dtu_months (non-negative if "to" >= "from")
!**************************************************************************
begin-procedure dtu-diff-months-fp($dtu_date1, $dtu_date2, :#dtu_months)

#ifdef debugi
  display 'Entering FPTESTDATE.SQC: dtu-diff-months'
  display ' Input $dtu_date1: ' noline
  display $dtu_date1
  display ' Input $dtu_date2: ' noline
  display $dtu_date2
#end-if

  do dtu-parse-date($dtu_date1, #dtu_yr1, #dtu_mo1, #dtu_da1)
  do dtu-parse-date($dtu_date2, #dtu_yr2, #dtu_mo2, #dtu_da2)
  if $dtu_date1 <= $dtu_date2
    if #dtu_da1 > #dtu_da2
      if #dtu_mo1 = 12
        let #dtu_mo1 = 1
        let #dtu_yr1 = #dtu_yr1 + 1
      else
        let #dtu_mo1 = #dtu_mo1 + 1
      end-if
    end-if
  else
    if #dtu_da1 < #dtu_da2
      if #dtu_mo2 = 12
        let #dtu_mo2 = 1
        let #dtu_yr2 = #dtu_yr2 + 1
      else
        let #dtu_mo2 = #dtu_mo2 + 1
      end-if
    end-if
  end-if
  let #dtu_months = 12 * (#dtu_yr2 - #dtu_yr1) + #dtu_mo2 - #dtu_mo1

end-procedure dtu-diff-months-fp



!**************************************************************************
! dtu-diff-years-fp
!   Input:    $dtu_date1 ("from"), $dtu_date2 ("to")
!   Output:   #dtu_years (non-negative if "to" >= "from")
!
! This function has been copied from dtu-diff-years (in DATEMATH.SQC), and
! modified as following : the 'round' command has been replaced the 'trunc' command.
!**************************************************************************
begin-procedure dtu-diff-years-fp($dtu_date1, $dtu_date2, :#dtu_years)

    declare-variable
        date    $wkDate1
        date    $wkDate2
        integer #dtu_years
    end-declare

#ifdef debugi
  display 'Entering DATEMATH.SQC: dtu-diff-years-fp'
  display ' Input $dtu_date1: ' noline
  display $dtu_date1
  display ' Input $dtu_date2: ' noline
  display $dtu_date2
#end-if

    let $wkDate1    = strtodate($dtu_date1,{DTUDateFormat})
    let $wkDate2    = strtodate($dtu_date2,{DTUDateFormat})
    let #dtu_years  = trunc(datediff($wkDate2,$wkDate1,'year'),0)

#ifdef debugi
  display 'Exiting DATEMATH.SQC: dtu-diff-years-fp'
  display ' Output #dtu_years: ' noline
  display #dtu_years
#end-if

end-procedure
