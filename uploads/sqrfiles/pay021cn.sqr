!*****************************************
!  PAY021CN:  Benefits Register  For Canada
!*****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:32:33                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'PAY021CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Pay021cn_Title_ben_reg to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY021CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY021CN', 'TITLE_BEN_REG' , $Pay021cn_Title_ben_reg , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'DEDUCTION'     , $Pay021cn_Deduction     , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'TYPE'          , $Pay021cn_Type          , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'CURRENT'       , $Pay021cn_Current       , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'CALCULATED'    , $Pay021cn_Calculated    , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'MONTH'         , $Pay021cn_Month         , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'QUARTER'       , $Pay021cn_Quarter       , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'YEAR'          , $Pay021cn_Year          , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'EMPLOYEE_ID'   , $Pay021cn_Employee_id   , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'NAME'          , $Pay021cn_Name          , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'CLASS'         , $Pay021cn_Class         , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'TAXABLE'       , $Pay021cn_Taxable       , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'NON_TAXABLE'   , $Pay021cn_Non_taxable   , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'BEN_TAXES'     , $Pay021cn_Ben_taxes     , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'BEN_BASE'      , $Pay021cn_Ben_base      , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'TO_DATE'       , $Pay021cn_To_date       , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'GRAND_TOT'     , $Pay021cn_Grand_tot     , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'COMP_TOT'      , $Pay021cn_Comp_tot      , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'PAY_PER_TOT'   , $Pay021cn_Pay_per_tot   , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'PAY_GRP_TOT'   , $Pay021cn_Pay_grp_tot   , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'DED_TOT'       , $Pay021cn_Ded_tot       , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'FOOT_NOTE'     , $Pay021cn_Foot_note     , #dummy_width)
   do Get_Field_Information ('PAY021CN', 'END_REPORT'    , $Pay021cn_End_report    , #dummy_width)


end-procedure

begin-procedure Array-Initialization

  create-array name=Totals size=6   -
               field=TotalName:char -
               field=total:number:6 -
               field=startcol:number:6

  put $Pay021cn_Grand_tot    into Totals(1) TotalName
  put $Pay021cn_Comp_tot     into Totals(2) TotalName
  put $Pay021cn_Pay_per_tot  into Totals(3) TotalName
  put $Pay021cn_Pay_grp_tot  into Totals(4) TotalName
  put $Pay021cn_Ded_tot      into Totals(5) TotalName
  put  68 into Totals(0) startCol(0)
  put  82 into Totals(0) startCol(1)
  put  99 into Totals(0) startCol(2)
  put 131 into Totals(0) startCol(3)
  put 145 into Totals(0) startCol(4)
  put 159 into Totals(0) startCol(5)

end-procedure

begin-heading 12
  #Include 'stdhtrpi.sqc'
  #Include 'stdhtr06.sqc'
  do Get-Deduction-Name
  move 'PLAN_TYPE' to $FieldName
  move $PlanType   to $FieldValue
  do Read-Translate-Table

  print $Pay021cn_Deduction  (+2,1)
  print $DedCd           (0,13)
  print $DeductionName   (0,20)
  print $Pay021cn_Type   (+1,1)
  print $PlanType        (0,13)
  print $XlatLongName    (0,20)

  print $Pay021cn_Deduction  (+2,41)
  print $Pay021cn_Current    (0,73)
  print $Pay021cn_Current    (0,84)
  print $Pay021cn_Current    (0,98)
  print $Pay021cn_Calculated (0,115)
  print $Pay021cn_Month      (0,136)
  print $Pay021cn_Quarter    (0,150)
  print $Pay021cn_Year       (0,164)

  print $Pay021cn_Employee_id  (+1,1)
  print $Pay021cn_Name         (0,14)
  print $Pay021cn_Class        (0,41)
  print $Pay021cn_Taxable      (0,73)
  print $Pay021cn_Non_taxable  (0,84)
  print $Pay021cn_Ben_taxes    (0,98)
  print $Pay021cn_Ben_base     (0,115)
  print $Pay021cn_To_date      (0,136)
  print $Pay021cn_To_date      (0,150)
  print $Pay021cn_To_date      (0,164)
end-heading

begin-procedure Report
  let $val_emplid    = ' '
  let $val_dedcd     = ' '
  let $val_ded_class = ' '
  let $val_ded_slstx = ' '
  let $val_py_status = ' '
begin-SELECT
A.COMPANY      () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT   () on-break print=never level=2 procedure=PayEndDate-Change
A.PAYGROUP     () on-break print=never level=3 procedure=PayGroup-Change
C.PLAN_TYPE    () on-break print=never level=4 procedure=Deduction-Change
C.DEDCD        () on-break print=never level=4 procedure=Deduction-Change
B.EMPLID

  if &B.EmplID = $Prev_EmplID           ! keep non taxable and taxable
    print &B.EmplID          (+1,1)     ! on same page
  else
    NEXT-LISTING NEED = 2
    print &B.EmplID          (1,1)
    move &B.EmplID to $Prev_EmplID
  end-if

A.CHECK_DT
A1.BALANCE_PERIOD,
C.OFF_CYCLE,
C.DED_CLASS
C.DED_SLSTX_CLASS
B.EMPL_RCD
B.NAME            (0,14,20)
B.PAYCHECK_STATUS

#ifdef DB2ALL
DECIMAL(SUM(C.DED_CUR),15,3)              &C.Ded_cur
DECIMAL(SUM(C.CALCULATED_BASE),15,3)      &C.Calculated_base
#else
SUM(C.DED_CUR)           &C.Ded_cur
SUM(C.CALCULATED_BASE)   &C.Calculated_base
#endif

  move 'DED_CLASS' to $FieldName
  move &C.Ded_Class to $FieldValue
  do Read-Translate-Table

  print $XlatShortName    (0,41)

  move 'DED_SLSTX_CLASS' to $FieldName
  move &C.Ded_SlsTx_Class to $FieldValue
  do Read-Translate-Table

  print $XlatShortName    (0,52)

  do Format-Number(&C.Ded_Cur, $Ded_Cur, '99,999,999.99mi')

  evaluate &C.Ded_Class
    when = 'L'
    when = 'T'
      if &C.Ded_SlsTx_Class = 'B'
        print $Ded_Cur   (0,68)

        ARRAY-ADD &C.Ded_Cur             -
        to Totals(5) total(0)
      else
        print $Ded_Cur   (0,99)

        ARRAY-ADD &C.Ded_Cur             -
        to Totals(5) total(2)
      end-if

    when = 'N'
    when = 'P'
      if &C.Ded_SlsTx_Class = 'B'
        print $Ded_Cur   (0,82)

        ARRAY-ADD &C.Ded_Cur             -
        to Totals(5) total(1)
      else
        print $Ded_Cur   (0,99)

        ARRAY-ADD &C.Ded_Cur             -
        to Totals(5) total(2)
      end-if

  end-evaluate

  if &C.Off_Cycle = 'Y'
    print '*'     (0,38)
  end-if

  do Format-Number(&C.Calculated_Base, $out, '99,999,999.99')
  print $out   (0,115)

  move &A.Company       to $Company
  move &A.PayGroup      to $PayGroup
  move &A.Pay_End_Dt    to $PayEndDate
  move &A.Check_Dt      to $AsOfDate  !for included procedures
  do Get-Date-Codes                   !for Get-Deduction-Balances
  move &B.EmplID        to $EmplID
  move &C.Plan_Type     to $PlanType
  move &C.DedCd         to $DedCd
  move &C.Ded_Class     to $DedClass
  move &C.Ded_SlsTx_Class to $DedSlsTxClass
  do Get-PayGroup-Data
  move $PayGroupCountry to $Country

  let $var_emplid    = rtrim(&B.EMPLID,' ')
  let $var_dedcd     = rtrim(&C.DEDCD,' ')
  let $var_ded_class = rtrim(&C.DED_CLASS,' ')
  let $var_ded_slstx = rtrim(&C.DED_SLSTX_CLASS,' ')
  let $var_py_status = rtrim(&B.PAYCHECK_STATUS,' ')

  if $val_emplid = $var_emplid  and $val_dedcd = $var_dedcd  and $val_ded_class = $var_ded_class and $val_ded_slstx = $var_ded_slstx and $val_py_status = $var_py_status
    let #DedMTD = 0
    let #DedQTD = 0 
    let #DedYTD = 0 
  else
    do Get-Deduction-Balances
    do Format-Number(#DedMTD, $out, '99,999,999.99mi')
    print $out   (0,131)
    do Format-Number(#DedQTD, $out, '99,999,999.99mi')
    print $out   (0,145)
    do Format-Number(#DedYTD, $out, '99,999,999.99mi')
    print $out   (0,159)
    let $val_emplid    = $var_emplid  
    let $val_dedcd     = $var_dedcd  
    let $val_ded_class = $var_ded_class
    let $val_ded_slstx = $var_ded_slstx
    let $val_py_status = $var_py_status
  end-if

  ARRAY-ADD #DedMTD #DedQTD #DedYTD    -
            to Totals(5) total(3) total(4) total(5)

  move 0  to  #DedMTD
  move 0  to  #DedQTD
  move 0  to  #DedYTD

FROM  PS_PAY_CALENDAR   A, PS_PAY_CAL_BAL_ID A1,
      PS_PAY_CHECK      B,
      PS_PAY_DEDUCTION  C
WHERE [$SlctCalendar]
  AND A.COMPANY = A1.COMPANY AND A.PAYGROUP = A1.PAYGROUP
  AND A.PAY_END_DT = A1.PAY_END_DT AND A1.BALANCE_ID = $Calendar_Year_Id
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = B.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND C.COMPANY    = A.COMPANY
  AND C.PAYGROUP   = B.PAYGROUP
  AND C.PAY_END_DT = B.PAY_END_DT
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.SEPCHK     = B.SEPCHK
  AND C.DED_CLASS  > 'K'
GROUP BY A.COMPANY,A.PAY_END_DT,A.PAYGROUP,C.PLAN_TYPE,
         C.DEDCD,B.NAME,B.EMPLID,A.CHECK_DT,A1.BALANCE_PERIOD,
         C.OFF_CYCLE,C.DED_CLASS,C.DED_SLSTX_CLASS,B.EMPL_RCD,B.PAYCHECK_STATUS
ORDER BY A.COMPANY,
         A.PAY_END_DT,
         A.PAYGROUP,
         C.PLAN_TYPE,
         C.DEDCD,
         B.NAME,
         B.EMPLID,
         C.DED_CLASS,
         C.DED_SLSTX_CLASS
end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals
end-procedure


begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Deduction-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals
  move 5 to #totalRow

  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,14)
    move 0 to #i

    while #i <= 5
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '99,999,999.99mi')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    do Reset
  end-if

  new-page
end-procedure


begin-procedure Reset
  move 'Y' to $End_of_Report

  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if

end-procedure


begin-footing 2
  print $Pay021cn_Foot_note (+0,1)

  if $End_of_Report = 'Y'
    print $Pay021cn_End_report (+1,1) center
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if

end-footing


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getdedbl.sqc'  !Get-Deduction-Balances procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
