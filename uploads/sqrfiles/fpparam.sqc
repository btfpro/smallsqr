!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:52:50                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!***********************************************************************
!
! Get parameters from FDM tables functions
!
!***********************************************************************

#define fpparam
#define FPMACTION_TBL
#define FPMCORPS_TBL
#define FPMRANK_TBL

#include 'rellang.sqc'        ! Translations File
#include 'setenv.sqc'


!****************************************************************
!
! Get-Action-Step : Get action code and action reason code for automatic advancement
!
!
!       IN         $EFFDT          Effective Date
!
!       OUT    $Actn_Step       Advancement Action Code
!                    $Reasn_Step     Advancement Action Reason Code
!
!****************************************************************
BEGIN-PROCEDURE Get-Action-Step ($EFFDT,:$Actn_Step,:$Reasn_Step,:$Action_Des )

let $sql-statement = 'fpparam.sqc,Get-Action-Step,Select,PS_FPMSYSTEM_TBL'
BEGIN-SELECT On-Error=SQL-Error

F.FP_ACTN_STEP
F.FP_REASN_STEP
G.DESCR
G.ACTION                    !Field needed for translation purpose
G.EFFDT                     !Field needed for translation purpose

        Let $Actn_Step = &F.FP_ACTN_STEP
        Let $Reasn_Step = &F.FP_REASN_STEP
        Let $FPMACTION_TBL-DESCR = &G.DESCR

        Do Get_Related_FPMACTION_TBL(&G.ACTION, &G.EFFDT)
        Let $Action_Des = $FPMACTION_TBL-DESCR

from PS_FPMSYSTEM_TBL  F,PS_FPMACTION_TBL  G

Where G.ACTION = F.FP_ACTN_STEP
and G.EFF_STATUS = 'A'
and G.EFFDT =
(Select Max(G1.EFFDT) from PS_FPMACTION_TBL G1
where G1.ACTION = F.FP_ACTN_STEP
and G1.EFFDT <= {DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE  Get-Action-Step



!****************************************************************
!
! Get-Frequency : Get Default Frequency (system table)
!
!       IN
!
!       OUT     $Frequency
!
!
!****************************************************************
BEGIN-PROCEDURE Get-Frequency (:$Frequency )

let $sql-statement = 'fpparam.sqc, Get-Frequency ,Select,PS_FPMSYSTEM_TBL'
BEGIN-SELECT On-Error=SQL-Error

F.COMP_FREQUENCY

        Let $Frequency = &F.COMP_FREQUENCY

from PS_FPMSYSTEM_TBL  F

END-SELECT

END-PROCEDURE Get-Frequency



!****************************************************************
!
! Get-Currency : Get Default Currency (installation table)
!
!       IN
!
!       OUT     $Currency_cd
!
!
!****************************************************************
BEGIN-PROCEDURE Get-Currency (:$Currency_cd )

let $sql-statement = 'fpparam.sqc, Get-Currency,Select,PS_INSTALLATION'
BEGIN-SELECT On-Error=SQL-Error

F.EXCHNG_TO_CURRENCY

        Let $Currency_cd = &F.EXCHNG_TO_CURRENCY

from PS_INSTALLATION  F

END-SELECT

END-PROCEDURE Get-Currency



!****************************************************************
!
! Get-Step-Ind : Get gross and increased index from step table
!
!       IN      $Matrix_Typ     Matrix type
!               $Matrix_Cd         Matrix
!               $Scale_cd            Scale
!               $Step_cd             Step
!               $Effdt                   Effective date
!
!       OUT     $Gross_Ind      Gross index
!               $Incs_Ind              Increased index
!
!****************************************************************
BEGIN-PROCEDURE Get-Step-Ind ($Matrix_Typ,$Matrix_Cd,$Scale_cd,
                             $Step_cd,$Effdt,:$Gross_Ind,:$Incs_Ind )

let $sql-statement = 'fpparam.sqc,Get-Step-Ind,Select,PS_FPMSALSTEP_TBL'
BEGIN-SELECT On-Error=SQL-Error

A.FP_GROSS_IND
A.FP_INCS_IND

        Let $Gross_Ind = &A.FP_GROSS_IND
        Let $Incs_Ind  = &A.FP_INCS_IND

FROM PS_FPMSALSTEP_TBL A
WHERE A.FP_MATRIX_TYP = $Matrix_Typ
and   A.FP_MATRIX_CD  = $Matrix_Cd
and   A.FP_SCALE_CD   = $Scale_cd
and   A.FP_STEP_CD    = $Step_cd
and   A.EFFDT >=
      (select MAX(B.EFFDT)
       from   PS_FPMSALSTEP_TBL B
       where  B.FP_MATRIX_TYP = $Matrix_Typ
       and    B.FP_MATRIX_CD  = $Matrix_Cd
       and    B.FP_SCALE_CD   = $Scale_cd
       and    B.FP_STEP_CD    = $Step_cd
       and    B.EFFDT <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Step-Ind



!****************************************************************
!
! Get-Step-No : Get step order number
!
!       IN      $Matrix_Typ     Matrix type
!               $Matrix_Cd      Matrix
!               $Scale_cd       Scale
!               $Step_cd        Step
!               $Effdt          Effective date
!
!       OUT     #Step_No        Step order number
!
!****************************************************************
BEGIN-PROCEDURE Get-Step-No ($Matrix_Typ,$Matrix_Cd,$Scale_cd,
                             $Step_cd,$Effdt,:#Step_No,:$equiv_step)

let $sql-statement = 'fpparam.sqc,Get-Step-No,Select,PS_FPMSALSTEP_TBL'
BEGIN-SELECT On-Error=SQL-Error

S.FP_STEP_NO
S.FP_EQUIV_STEP

        Let #Step_No = &S.FP_STEP_NO
        let $equiv_step = &S.FP_EQUIV_STEP


FROM PS_FPMSALSTEP_TBL S, PS_FPMSALMATRX_TBL MA
WHERE S.FP_MATRIX_TYP = $Matrix_Typ
and   S.FP_MATRIX_CD  = $Matrix_Cd
and   S.FP_SCALE_CD   = $Scale_cd
and   S.FP_STEP_CD    = $Step_cd
and   S.FP_MATRIX_TYP = MA.FP_MATRIX_TYP
and   S.FP_MATRIX_CD  = MA.FP_MATRIX_CD
and   S.FP_SCALE_CD   = MA.FP_SCALE_CD
and   S.EFFDT    = MA.EFFDT
and   MA.EFF_STATUS = 'A'
and   S.EFFDT =
      (select MAX(S1.EFFDT)
       from   PS_FPMSALSTEP_TBL S1
       where  S1.FP_MATRIX_TYP =  S.FP_MATRIX_TYP
       and    S1.FP_MATRIX_CD  =  S.FP_MATRIX_CD
       and    S1.FP_SCALE_CD   =  S.FP_SCALE_CD
       and    S1.FP_STEP_CD    =  S.FP_STEP_CD
       and    S1.EFFDT <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Step-No



!***************************************************************
!
!       Select-Sys-Step: Get parameters from system table
!                   - Order number
!                   - Advancement action and action reason
!
!       IN
!
!       OUT     $EditIdvDec             Edit individual order
!               $EditColDec             Edit collective order
!               #ColDecIncr             Last order number
!               #RefCol_ps              Last collective order number
!               $Actn_Step              Advancement action
!               $Reasn_Step             Advancement action reason
!
!***************************************************************
BEGIN-PROCEDURE Select-Sys-Step (:$EditIdvDec,:$EditColDec,
                                :#ColDecIncr,:#RefCol_ps,
                                :$Actn_Step,:$Reasn_Step)

let $sql-statement = 'fpparam.sqc,Select-Sys-Step,Select,PS_FPMACTION_TBL'
BEGIN-SELECT On-Error=SQL-Error

A.FP_EDITIDVDEC
A.FP_EDITCOLDEC
B.FP_COLDECINCR
B.FP_REFCOL_PS
B.FP_ACTN_STEP
B.FP_REASN_STEP

        let $EditIdvDec = &A.FP_EDITIDVDEC
        Let $EditColDec = &A.FP_EDITCOLDEC
        let #ColDecIncr = &B.FP_COLDECINCR
        let #RefCol_ps = &B.FP_REFCOL_PS
        Let $Actn_Step = &B.FP_ACTN_STEP
        Let $Reasn_Step = &B.FP_REASN_STEP

from PS_FPMACTION_TBL A, PS_FPMSYSTEM_TBL B
where A.ACTION = B.FP_ACTN_STEP
and   A.EFF_STATUS = 'A'
and   A.EFFDT =
        (select max(EFFDT)
        from PS_FPMACTION_TBL
        where ACTION = B.FP_ACTN_STEP )

END-SELECT

display 'Select-Sys end'

END-PROCEDURE Select-Sys-Step



!***************************************************************
!
!       Updt-Sys-ColDecIncr: Update system table
!                               - Order number
!
!       IN      #Num         Last order number
!
!***************************************************************
BEGIN-PROCEDURE Updt-Sys-ColDecIncr (#Num)

let $sql-statement = 'fpparam.sqc,Updt-Sys-ColDecIncr,Update,PS_FPMSYSTEM_TBL'
BEGIN-SQL On-Error=SQL-Error

update PS_FPMSYSTEM_TBL
set
FP_COLDECINCR = #Num,
LAST_UPDATE_DATE = {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
END-SQL

END-PROCEDURE Updt-Sys-ColDecIncr



!***************************************************************
!
!       Updt-Sys-RefColPS: Update system table
!                               - Collective order number
!
!       IN      #Num         Last order number
!
!***************************************************************
BEGIN-PROCEDURE Updt-Sys-RefColPS (#Num)

let $sql-statement = 'fpparam.sqc,Updt-Sys-RefColPS,Update,PS_FPMSYSTEM_TBL'
BEGIN-SQL On-Error=SQL-Error
update PS_FPMSYSTEM_TBL
set
FP_REFCOL_PS = #Num,
LAST_UPDATE_DATE = {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
END-SQL

END-PROCEDURE Updt-Sys-RefColPS



!***************************************************************
!
!       Select-Sys-RefColPS: Get collective order PS internal reference
!
!       OUT      #Num        Last order number
!
!***************************************************************
BEGIN-PROCEDURE Select-Sys-RefColPS (:#Num)

let $sql-statement = 'FPPARAM.sqc,Select-Sys-RefColPS,Select,PS_FPMSYSTEM_TBL B'
BEGIN-SELECT On-Error=SQL-Error

B.FP_REFCOL_PS

      let #Num = &B.FP_REFCOL_PS

From PS_FPMSYSTEM_TBL B

END-SELECT

END-PROCEDURE Select-Sys-RefColPS



!***************************************************************
!
!       Get-Bonif
!       Sum in %PT bonus Y/M/D computation
!       Bonus type = 'Q'
!       Bonus linked to the rank/step of an employee
!
!       IN      $Emplid         Emplid
!               #Empl           Empl_rcd
!               $Effdt          Effective date
!               $Rank           Rank
!               $Step           Step
!
!       OUT     #Bonus-An       Bonus Y/M/D
!               #Bonus-Mn
!               #Bonus-Dy
!
!
!
!
!***************************************************************
BEGIN-PROCEDURE Get-Bonif ($Emplid,#Empl,$Effdt,$Rank,$Step,
                                :#Bonus-An,:#Bonus-Mn,:#Bonus-Dy)

let $sql-statement = 'FPparam.sqc,,Select,Get-Bonif'
BEGIN-SELECT On-Error=SQL-Error

sum(FP_YR_DUR)    &Bonus-An
sum(FP_MN_DUR)    &Bonus-Mn
sum(FP_DY_DUR)    &Bonus-Dy


        let  #Bonus-An = &Bonus-An
        let  #Bonus-Mn = &Bonus-Mn
        let  #Bonus-Dy = &Bonus-Dy

from  PS_FPABONUS_TBL
where EMPLID       = $Emplid
and   FP_BONUS_TYP = 'Q'
and   EMPL_RCD    = #Empl
and   EFFDT        >= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX}
and   FP_RANK_CD   = $Rank
and   FP_STEP_CD   = $Step
and   FP_INST_STAT = 'R'            ! Real bonus
and   FP_IN_ABEYANCE <> 'A'

END-SELECT

END-PROCEDURE Get-Bonif



!***************************************************************
!
!
!       Get-Dur-Step
!       Get Step Access Period Length and Regular Period Length
!
!       IN      $Effdt         Effective Date
!               $Rank           Rank
!               $Step            Step
!
!
!       OUT     #AccesAn       Step Access Y/M/D
!               #AccesMn
!               #AccesDy
!               #LegalAn       Regular Period Length Y/M/D
!               #LegalMn
!               #LegalDy
!
!
!***************************************************************
BEGIN-PROCEDURE Get-Dur-Step ($Effdt,$Setid,$Rank,$Step,:#AccesAn,:#AccesMn,:#AccesDy,
                           :#LegalAn,:#LegalMn,:#LegalDy)
let $sql-statement = 'fpparam.sqc,,Select,Get-Dur-Step'
BEGIN-SELECT On-Error=SQL-Error

A.FP_PR_STP_YR
A.FP_PR_STP_MN
A.FP_PR_STP_DY
A.FP_IN_STP_YR
A.FP_IN_STP_MN
A.FP_IN_STP_DY

        Let #AccesAn = &A.FP_PR_STP_YR  ! Step Access
        Let #AccesMn = &A.FP_PR_STP_MN
        Let #AccesDy = &A.FP_PR_STP_DY

        let #LegalAn = &A.FP_IN_STP_YR  ! Regular Period Length
        let #LegalMn = &A.FP_IN_STP_MN
        let #LegalDy = &A.FP_IN_STP_DY

from PS_FPMSALSTEP_TBL A, PS_FPMSALMATRX_TBL B, PS_FPMRANK_TBL C

where A.FP_MATRIX_TYP = B.FP_MATRIX_TYP
and   B.EFF_STATUS    = 'A'
and   A.FP_MATRIX_CD  = B.FP_MATRIX_CD
and   A.FP_SCALE_CD   = B.FP_SCALE_CD
and   A.EFFDT =
        (select max(EFFDT) from  PS_FPMSALSTEP_TBL
         where  FP_MATRIX_TYP = B.FP_MATRIX_TYP
         and    FP_MATRIX_CD  = B.FP_MATRIX_CD
         and    FP_SCALE_CD   = B.FP_SCALE_CD
         and    EFFDT        <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})
and   A.FP_STEP_CD    = $Step
and   C.FP_MATRIX_TYP = B.FP_MATRIX_TYP
and   C.FP_MATRIX_CD  = B.FP_MATRIX_CD
and   C.FP_SCALE_CD   = B.FP_SCALE_CD
and   C.SETID         = $Setid
and   C.FP_RANK_CD    = $Rank
and   C.EFF_STATUS    = 'A'
and   C.EFFDT =
        (select max(EFFDT) from  PS_FPMRANK_TBL
         where  FP_RANK_CD    = $Rank
         and    SETID         = $Setid
         and    EFFDT        <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})
and   B.EFFDT =
        (select max(EFFDT) from  PS_FPMSALMATRX_TBL
         where  FP_MATRIX_TYP = B.FP_MATRIX_TYP
         and    FP_MATRIX_CD  = B.FP_MATRIX_CD
         and    FP_SCALE_CD   = B.FP_SCALE_CD
         and    EFFDT        <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Dur-Step



!***************************************************************
!
!
!       Get-Corps-Des
!       Get body description
!
!       IN      $Corps          Body
!               $Effdt          Effective date
!
!
!       OUT     $Corps_Des      Body description
!
!***************************************************************
BEGIN-PROCEDURE Get-Corps-Des ($Corps,$Effdt,:$Corps_Des)

let $sql-statement = 'fpparam.sqc,,Select,Get-Dur-Step'
BEGIN-SELECT On-Error=SQL-Error

A.FP_CORPS_CD             !Field needed for translation purpose
A.EFFDT                   !Field needed for translation purpose
A.DESCR

        Let $FPMCORPS_TBL-DESCR = &A.DESCR
        Do Get_Related_FPMCORPS_TBL(&A.EFFDT, &A.FP_CORPS_CD)
        Let $Corps_Des = $FPMCORPS_TBL-DESCR

From PS_FPMCORPS_TBL A

Where A.FP_CORPS_CD = $Corps
and A.EFF_STATUS = 'A'
and A.EFFDT =
(Select Max(A1.EFFDT) from PS_FPMCORPS_TBL A1
where A1.FP_CORPS_CD = $Corps
and A1.EFFDT <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Corps-Des



!***************************************************************
!
!
!       Get-Rank-Des
!       Get rank description
!
!       IN      $Rank           Rank
!               $Effdt          Effective date
!
!
!       OUT     $Rank_Des       Rank description
!
!***************************************************************
BEGIN-PROCEDURE Get-Rank-Des ($Rank,$Effdt,:$Rank_Des)

let $sql-statement = 'fpparam.sqc,,Select,Get-Rank-Des'
BEGIN-SELECT On-Error=SQL-Error

A.SETID                   !Field needed for translation purpose
A.EFFDT                   !Field needed for translation purpose
A.FP_RANK_CD              !Field needed for translation purpose
A.DESCR

        Let $Rank_Des = &A.DESCR

        Let $FPMRANK_TBL-DESCR = &A.DESCR
        Do Get_Related_FPMRANK_TBL(&A.EFFDT, &A.FP_RANK_CD, &A.SETID)
        Let $Corps_Des = $FPMRANK_TBL-DESCR

From PS_FPMRANK_TBL A

Where A.FP_RANK_CD = $Rank
and A.EFF_STATUS = 'A'
and A.EFFDT =
(Select Max(A1.EFFDT) from PS_FPMRANK_TBL A1
Where A1.FP_RANK_CD = $Rank
and A1.EFFDT <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX})

END-SELECT

END-PROCEDURE Get-Rank-Des



!***************************************************************
!
!
!   Get-PartTime : Get Part-Time percentage and code
!
!       IN      $Emplid         Emplid
!               #Empl           Empl_rcd
!               $Effdt          Effective date
!
!       OUT     $Part-Time      Full-Time/Part-Time
!               #Pct-Tp         Part-Time percentage
!
!***************************************************************
BEGIN-PROCEDURE  Get-PartTime($Emplid,#Empl,$Effdt,:$Part-Time,:#Pct-Tp)

let $sql-statement = 'FPA300.SQR,,Select,Get-PartTime'
BEGIN-SELECT ON-ERROR = SQL-Error

A.FULL_PART_TIME
A.FP_PT_PCT

        Let $Part-Time = &A.FULL_PART_TIME
        Let #Pct-Tp = &A.FP_PT_PCT

from  PS_FPAEEWORKRT A

where A.EMPLID = $Emplid
and   A.EMPL_RCD = #Empl
and   A.EFFDT <= {DATEIN-PREFIX}$Effdt{DATEIN-SUFFIX}

END-SELECT

END-PROCEDURE Get-PartTime



! SQR using this SQC must have the following includes
!----------------------------------------------------

!#include 'sqrtrans.sqc'       ! Get_Field_Information procedure
