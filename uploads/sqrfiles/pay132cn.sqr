!***********************************************************************
!   PAY132CN:      Write Canada Payroll Savings Transmittal file       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/24:11:38:37                           !
!             $Release:  HR9                                           !
!            $Revision:  102                                           !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getasodt.sqc'  !Get As of Date
#Include 'datemath.sqc'  !Date math routines
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'canrpt.sqc'    !Get Canadian-specific variables
#include 'getcodta.sqc'  !Get selected fields from the Company Table

begin-report
  do Stdapi-Init
  do Init-Report
  do ReportMain
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY132CN' to $ReportID
  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay132cn_ReportTitle to $ReportTitle
  display $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Current-DateTime
  move $AsOfToday to $AsOfDate  !for "included" procedures

end-procedure

! Print report heading
begin-heading 3
  #Include 'stdhdg01.sqc'
end-heading

begin-procedure ReportMain

  if $Prcs_Process_Instance = ''
    do Ask-Run-Parms
  else
    do Get-Run-Parms
    move &P.RUN_ID           to $RunID
    move &P.CPS_REF_ID       to $TransRefID
  end-if

  do CheckCalendarTbl

  if $CalendarTblFlag = 'Y'
     do ErrorReportConfirm
  else
  if $CalendarCPSFlag = 'Y'
      do ErrorReportRun
  else
  if #Runid_Count > #Orgid_Count
     do ErrorOrgId
  else
  if $XmitOrgIdErrFlag = 'Y'
     do ErrorXmitOrgId
  else
  if $PymtErrFlag = 'Y'
     do ErrorPymtType
  else
      do ProcessMain
  end-if
  end-if
  end-if
  end-if
  end-if

end-procedure

begin-PROCEDURE Ask-Run-Parms
    input $RunID 'Enter Pay Run ID'
    display $RunID
    input $TransRefID 'Enter Reference ID (30 character max)'
    display $TransRefID
end-procedure

begin-PROCEDURE Get-Run-Parms

begin-SELECT
P.RUN_ID,
P.CPS_REF_ID

  move &P.RUN_ID             to $RunID
  move &P.CPS_REF_ID         to $TransRefID

FROM PS_RC_PAY P
WHERE P.OPRID = $prcs_oprid
AND   P.RUN_CNTL_ID = $prcs_run_cntl_id
end-SELECT

end-procedure


begin-procedure CheckCalendarTbl

  move 'N' to $CalendarTblFlag
  move 'N' to $CalendarCPSFlag
  move 'N' to $XmitOrgIdErrFlag
  move 'N' to $PymtErrFlag
  let  #Runid_Count = 0
  let  #Orgid_Count = 0

begin-SELECT
PC1.COMPANY
PC1.PAY_CONFIRM_RUN
PC1.CPS_RUN
PC1.PAYGROUP
PC1.PAY_END_DT

  if &PC1.PAY_CONFIRM_RUN = 'Y' and
     &PC1.CPS_RUN = 'N'
     do GetOrgId
  else
  if &PC1.PAY_CONFIRM_RUN <> 'Y'
     move 'Y' to $CalendarTblFlag
  else
     move 'Y' to $CalendarCPSFlag
  end-if
  end-if


FROM PS_PAY_CALENDAR PC1
WHERE PC1.RUN_ID   = $RunID
end-SELECT

end-procedure


begin-procedure GetOrgId

begin-SELECT DISTINCT
'x'

  let #Runid_Count = #Runid_Count + 1
  do ValidateOrgId

FROM  PS_PAY_DEDUCTION C1,
      PS_PAY_LINE      B1,
      PS_PERSON_ADDR_HOM D1,
      PS_DEDUCTION_TBL E1,
      PS_PERS_NID      Z1
WHERE B1.COMPANY      = &PC1.COMPANY
  AND B1.PAYGROUP     = &PC1.PAYGROUP
  AND B1.PAY_END_DT   = &PC1.PAY_END_DT
  AND B1.EMPLID       = D1.EMPLID
  AND D1.COUNTRY      = 'CAN'
  AND B1.COMPANY      = C1.COMPANY
  AND B1.PAYGROUP     = C1.PAYGROUP
  AND B1.PAY_END_DT   = C1.PAY_END_DT
  AND B1.OFF_CYCLE    = C1.OFF_CYCLE
  AND B1.PAGE_NUM     = C1.PAGE_NUM
  AND B1.LINE_NUM     = C1.LINE_NUM
  AND B1.CONFIRMED    = 'Y'
  AND C1.DEDCD        = E1.DEDCD
  AND E1.PLAN_TYPE    = '00'
  AND E1.SPCL_PROCESS = 'B'
  AND E1.EFFDT        = (  SELECT MAX(E12.EFFDT)
                        FROM PS_DEDUCTION_TBL E12
                        WHERE E12.PLAN_TYPE  = E1.PLAN_TYPE
                        AND   E12.DEDCD      = E1.DEDCD
                        AND   E12.EFFDT     <= C1.PAY_END_DT)
  AND B1.EMPLID       = Z1.EMPLID
end-SELECT

end-procedure

begin-procedure ValidateOrgId

  move 'Y' to $OrgIdErrFlag

begin-SELECT
CP.CPS_ORG_ID
CP.CPS_PAYMENT_TYPE
CP.XMIT_ORG_ID

  move 'N' to $OrgIdErrFlag
  let  #Orgid_Count = #Orgid_Count + 1

  if #Runid_Count = 1
     move &CP.XMIT_ORG_ID      to #Xmit_OrgID
     move &CP.CPS_PAYMENT_TYPE to $PaymentType
  else
     if &CP.XMIT_ORG_ID <> #Xmit_OrgID
        move 'Y'        to $XmitOrgIdErrFlag
        else
           if &CP.CPS_PAYMENT_TYPE <> $PaymentType
              move 'Y'             to $PymtErrFlag
           end-if
     end-if
  end-if

FROM  PS_CPS_CAMP_TBL  CP
WHERE CP.COMPANY = &PC1.COMPANY
AND   CP.EFFDT   = (SELECT MAX(CP2.EFFDT)
                   FROM   PS_CPS_CAMP_TBL CP2
                   WHERE  CP2.COMPANY  =  CP.COMPANY
                   AND    CP2.EFFDT   <= $AsOfDate )
end-SELECT

  if $OrgIdErrFlag = 'Y'
     move &PC1.COMPANY to $OrgCompany
  end-if

end-procedure


! *****                                                   *****
! ***     Main section for creating the Transmittal file    ***
! *****                                                   *****
begin-PROCEDURE ProcessMain

  do Open-File
  move 'Y'                   to $EmptyFile
  move '*'                   to $EORChar
  move 'N'                   to $PrintHdr
  move 'N'                   to $PrintCo

  do Format-Number(#Xmit_OrgID, $XmitOrgID, '09999')

begin-SELECT
A.COMPANY     () on-break print=never level=1 before=Write-Transmitter-Hdr
A.CHECK_DT    () on-break print=never level=2 before=Write-Rec-Type-20 AFTER=Write-Rec-Type-80
A.PAYGROUP    () on-break print=never level=3 AFTER=ProcessPayGroup    save=$BatchPayGroup
A.PAY_END_DT
Z.NATIONAL_ID () on-break print=never level=4 after=Write-Rec-Type-30-40
DN.NAME
D.BIRTHDATE
C.DEDCD
C.DED_CLASS
C.DED_CUR
C.DED_CUR_REFUND
C.DED_CUR_PAYBK
R.CPS_ORG_ID

  move 'N'                   to $EmptyFile
  do Convert-To-DTU-Date(&A.CHECK_DT,$PaycheckDate)
  move &Z.NATIONAL_ID        to $EmpRefID
  move &DN.NAME              to $Name
  do Convert-To-DTU-Date(&D.BIRTHDATE,$Birthdate)

  move &C.DED_CLASS          to $DedClass
  do ProcessDedType

FROM  PS_PAY_CALENDAR  A,
      PS_PAY_DEDUCTION C,
      PS_PAY_LINE      B,
      PS_PERSONAL_DT_FST D,
      PS_NAMES DN,
      PS_PERSON_ADDR_HOM D2,
      PS_DEDUCTION_TBL E,
      PS_CPS_CAMP_TBL  R,
      PS_PERS_NID      Z
WHERE A.RUN_ID       = $RunID
  AND A.COMPANY      = B.COMPANY
  AND A.PAYGROUP     = B.PAYGROUP
  AND A.PAY_END_DT   = B.PAY_END_DT
  AND B.EMPLID       = D.EMPLID
  AND B.EMPLID       = DN.EMPLID
  AND B.EMPLID       = D2.EMPLID
  AND DN.NAME_TYPE = 'PRI'
  AND DN.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = DN.EMPLID
         AND  DX.NAME_TYPE = DN.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D2.COUNTRY      = 'CAN'
  AND B.COMPANY      = C.COMPANY
  AND B.PAYGROUP     = C.PAYGROUP
  AND B.PAY_END_DT   = C.PAY_END_DT
  AND B.OFF_CYCLE    = C.OFF_CYCLE
  AND B.PAGE_NUM        = C.PAGE_NUM
  AND B.LINE_NUM        = C.LINE_NUM
  AND B.CONFIRMED    = 'Y'
  AND C.DEDCD        = E.DEDCD
  AND E.PLAN_TYPE    = '00'
  AND E.SPCL_PROCESS = 'B'
  AND E.EFFDT        = (  SELECT MAX(E2.EFFDT)
                        FROM PS_DEDUCTION_TBL E2
                        WHERE E2.PLAN_TYPE  = E.PLAN_TYPE
                        AND   E2.DEDCD      = E.DEDCD
                        AND   E2.EFFDT     <= C.PAY_END_DT)
  AND B.EMPLID       = Z.EMPLID
  AND A.COMPANY      = R.COMPANY
  AND R.EFFDT        = (  SELECT MAX(R2.EFFDT)
                        FROM PS_CPS_CAMP_TBL R2
                        WHERE R2.COMPANY    = R.COMPANY
                        AND   R2.EFFDT     <= $AsOfDate)
  AND Z.COUNTRY          = {NID_COUNTRY}
  AND Z.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE

ORDER BY A.COMPANY ASC,
         A.CHECK_DT,
         A.PAYGROUP ASC,
         Z.NATIONAL_ID ASC,
         C.DEDCD ASC,
         C.DED_CLASS ASC
end-SELECT

  if RTRIM($filename, ' ') <> '' !file name created
    do Write-Rec-Type-90
    do Close-File
  end-if

end-PROCEDURE  !ReportMain


begin-procedure Write-Transmitter-Hdr
! display 'Processing Transmitter Header'

  if $PrintHdr = 'N'
     do Write-Rec-Type-10
     move 'Y' to $PrintHdr
  end-if

end-PROCEDURE  !Write-Transmitter-Hdr

begin-procedure Write-Rec-Type-10
! display 'Processing Record Type 10'

begin-SELECT
F.CPS_ORG_ID
F.CPS_CONTACT_TYPE
F.EMAILID
F.CPS_FAX_NBR

  move '10'                  to $RecordType
  add  1                     to #TransRecordCount
  do Format-Number(&F.CPS_ORG_ID, $OrgID, '09999')
  do Convert-To-DTU-Date($AsOfDate,$TransDate)
  do Format-Number(#LASTFILE#, $TransID, '09999999')
  evaluate &F.CPS_CONTACT_TYPE
    when = 'E'
      move '01'              to $ContactType
      move &F.EMAILID        to $ContactInfo
      break
    when = 'F'
      move '02'              to $ContactType
      move &F.CPS_FAX_NBR    to $faxnbr
      do FormatFaxNbr($faxnbr,$ContactInfo)
      break
    when = 'N'
      move '  '              to $ContactType
      move ''                to $ContactInfo
      break
  end-evaluate

  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $TransDate:10           -         !Transmission Date
                $TransID:8              -         !Transmission ID
                $TransRefID:30          -         !Transmitter's Reference ID
                $PaymentType:1          -         !Payment Type Indicator
                $ContactType:2          -         !E-mail/Fax Indicator
                $ContactInfo:40         -         !E-mail/Fax Address
                $filler:21              -         !filler space
                $EORChar

FROM  PS_CPS_ORG_ID_TBL  F
WHERE F.CPS_ORG_ID = #Xmit_OrgID
AND   F.EFFDT   = (SELECT MAX(F2.EFFDT)
                   FROM   PS_CPS_ORG_ID_TBL F2
                   WHERE  F2.CPS_ORG_ID =  F.CPS_ORG_ID
                   AND    F2.EFFDT     <=  $AsOfDate )
end-SELECT


end-procedure  !Write-Rec-Type-10


begin-procedure Write-Rec-Type-20
! display 'Processing Record Type 20'

begin-SELECT
T.CPS_ORG_ID
T.CPS_CONTACT_TYPE
T.EMAILID
T.CPS_FAX_NBR

  move '20'                  to $RecordType
  add  1                     to #TransRecordCount
  do Format-Number(&T.CPS_ORG_ID, $OrgID, '09999')
  do Convert-To-DTU-Date(&A.CHECK_DT,  $BatchPayCheckDate)
  do Convert-To-DTU-Date(&A.PAY_END_DT,$BatchPayEndDate)

  evaluate &T.CPS_CONTACT_TYPE
    when = 'E'
      move '01'              to $ContactType
      move &T.EMAILID        to $ContactInfo
      break
    when = 'F'
      move '02'              to $ContactType
      move &T.CPS_FAX_NBR    to $faxnbr
      do FormatFaxNbr($faxnbr,$ContactInfo)
      break
    when = 'N'
      move '  '              to $ContactType
      move ''                to $ContactInfo
      break
  end-evaluate

  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $BatchPayCheckDate:10   -         !Payroll deduction Date
                $TransRefID:30          -         !Transmitter's Reference ID
                $ContactType:2          -         !E-mail/Fax Indicator
                $ContactInfo:40         -         !E-mail/Fax Address
                $filler:30              -         !filler space
                $EORChar

FROM PS_CPS_ORG_ID_TBL  T
WHERE T.CPS_ORG_ID = &R.CPS_ORG_ID
AND   T.EFFDT   = (SELECT MAX(T2.EFFDT)
                   FROM   PS_CPS_ORG_ID_TBL T2
                   WHERE  T2.CPS_ORG_ID =  T.CPS_ORG_ID
                   AND    T2.EFFDT     <=  $AsOfDate )
end-SELECT

  if $PrintCo = 'Y'
     new-page
  end-if

  do PrintTitle
  move 'Y' to $PrintCo

end-procedure  !Write-Rec-Type-20

begin-procedure Write-Rec-Type-30-40
  if #EmpNonRRSPAmt <> 0
    let #BatchContribAmt = #BatchContribAmt + #EmpNonRRSPAmt
    let #BatchNonRRSPAmt = #BatchNonRRSPAmt + #EmpNonRRSPAmt
    do Write-Rec-Type-30
  end-if

  if #EmpRRSPAmt <> 0
    let #BatchContribAmt = #BatchContribAmt + #EmpRRSPAmt
    let #BatchRRSPAmt    = #BatchRRSPAmt + #EmpRRSPAmt
    do Write-Rec-Type-40
  end-if

end-procedure  !Write-Rec-Type-30-40

begin-procedure Write-Rec-Type-30
! display 'Processing Record Type 30'

  move '30'                  to $RecordType
  add  1                     to #TransRecordCount
  add  1                     to #RecordCount
  add  1                     to #BatchNonRRSPRec

  do Format-Number(&T.CPS_ORG_ID, $OrgID, '09999')
  do Format-Number(#RecordCount, $RecSequenceNo, '09999')

  if #EmpNonRRSPAmt < 0
     move '-'                to $Sign
  else
     move ' '                to $Sign
  end-if

  let #ContribAmt = abs(#EmpNonRRSPAmt)
  multiply 100 times #ContribAmt                !Remove decimal
  do Format-Number(#ContribAmt, $ContribAmt, '09999999')

  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $PaycheckDate:10        -         !Payroll deduction Date
                $RecSequenceNo:5        -         !Relative Sequence No
                $EmpRefID:9             -         !Employee SIN
                $Name:50                -         !Employee Name
                $sign:1                 -         !Contribution Sign
                $ContribAmt:8           -         !Contribution Amount
                $BirthDate:10           -         !Employee Birthdate
                $filler:19              -         !filler space
                $EORChar

  let #EmpNonRRSPAmt = 0

end-procedure  !Write-Rec-Type-30

begin-procedure Write-Rec-Type-40
! display 'Processing Record Type 40'

  move '40'                  to $RecordType
  add  1                     to #TransRecordCount
  add  1                     to #RecordCount
  add  1                     to #BatchRRSPRec

  do Format-Number(&T.CPS_ORG_ID, $OrgID, '09999')
  do Format-Number(#RecordCount, $RecSequenceNo, '09999')

  if #EmpRRSPAmt < 0
     move '-'                to $Sign
  else
     move ' '                to $Sign
  end-if

  let #ContribAmt = abs(#EmpRRSPAmt)
  multiply 100 times #ContribAmt                !Remove decimal
  do Format-Number(#ContribAmt, $ContribAmt, '09999999')

  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $PaycheckDate:10        -         !Payroll deduction Date
                $RecSequenceNo:5        -         !Relative Sequence No
                $EmpRefID:9             -         !Employee SIN
                $Name:50                -         !Employee Name
                $sign:1                 -         !Contribution Sign
                $ContribAmt:8           -         !Contribution Amount
                $BirthDate:10           -         !Employee Birthdate
                $filler:19              -         !filler space
                $EORChar

  let #EmpRRSPAmt = 0

end-procedure  !Write-Rec-Type-40

begin-procedure Write-Rec-Type-80
! display 'Processing Record Type 80'

  move '80'                  to $RecordType
  add  1                     to #TransRecordCount
  do Format-Number(&T.CPS_ORG_ID, $OrgID, '09999')
  do Format-Number(#RecordCount, $RecordCount, '099999')
  let #TotalPrtRecCount = #TotalPrtRecCount + #RecordCount

  let #TotalContribAmt = #TotalContribAmt + #BatchContribAmt
  if #BatchContribAmt < 0
     move '-'                to $Sign
  else
     move ' '                to $Sign
  end-if
  let #BatchContribAmt = abs(#BatchContribAmt)
  multiply 100 times #BatchContribAmt                !Remove decimal
  do Format-Number(#BatchContribAmt, $BatchContribAmt, '099999999999999')

  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $BatchPayCheckDate:10   -         !Payroll deduction Date
                $RecordCount:6          -         !Total No Records in Batch
                $sign:1                 -         !Contribution Sign
                $BatchContribAmt        -         !Total Contribution Amount for Batch
                $filler:80              -         !filler space
                $EORChar

  do Reset-Batch-Vars

  do PrintSummary

  let #TotalPrtRecCount = 0
  let #TotalContribAmt  = 0

end-procedure  !Write-Rec-Type-80


begin-procedure Reset-Batch-Vars

  let #BatchContribAmt       =  0
  let #RecordCount           =  0
  move ''                    to $BatchPayCheckDate
  move ''                    to $BatchPayEndDate

end-procedure !Reset-Batch-Vars

begin-procedure Write-Rec-Type-90
! display 'Processing Record Type 90'

  move '90'                  to $RecordType
  add  1                     to #TransRecordCount
  do Format-Number(&F.CPS_ORG_ID, $OrgID, '09999')
  do Convert-To-DTU-Date($AsOfDate,$TransDate)
  do Format-Number(#LastFile#, $TransID, '09999999')
  do Format-Number(#TransRecordCount, $TransRecordCount, '099999999')


  write 1 from  $RecordType:2           -         !Record Type 10
                $OrgID:5                -         !Organization ID
                $TransDate:10           -         !Transmission Date
                $TransID:8              -         !Transmission ID
                $TransRecordCount:9     -         !Total No of Transmission Records
                $filler:85              -         !filler space
                $EORChar

end-procedure  !Write-Rec-Type-90

begin-PROCEDURE  ProcessPayGroup

  do Format-Number(#BatchNonRRSPRec, $BatchNonRRSPRec,     '99999')
  do Format-Number(#BatchNonRRSPAmt, $BatchNonRRSPAmt, '999999.99')

  do Format-Number(#BatchRRSPRec, $BatchRRSPRec,     '99999')
  do Format-Number(#BatchRRSPAmt, $BatchRRSPAmt, '999999.99')

  do PrintPayGroupInfo

  let #BatchRRSPRec          =  0
  let #BatchRRSPAmt          =  0
  let #BatchNonRRSPRec       =  0
  let #BatchNonRRSPAmt       =  0

end-procedure   !ProcessPayGroup

begin-PROCEDURE  ProcessDedType
! display 'Processing ProcessDedType'

  move &C.DED_CUR to #DedAmt
  evaluate $DedClass
    when = 'A'                                                 !After-Tax
      let #EmpNonRRSPAmt = #EmpNonRRSPAmt + #DedAmt
      break
    when = 'B'                                                 !Before-Tax
      let #EmpRRSPAmt    = #EmpRRSPAmt    + #DedAmt
      break
  end-evaluate

end-procedure   !ProcessDedType

begin-PROCEDURE Open-File

begin-select
CPS_TRANS_ID_LAST
FROM PS_INSTALLATION
end-select


  move &CPS_TRANS_ID_LAST to #LastFile#

  if #LastFile# <> 9999
    add 1 to #LastFile#
  else
    move 1 to #LastFile#
  end-if

  do Format-Number(#LastFile#, $LastFile#, '0009')
  do Format-Number(#LastFile#, $Creation#, '0009')

#ifdef OS400
  let $filename = 'CPSCN' || '(D' || $LastFile# || ')'
#else
#ifdef MVS
  let $filename = 'CPSC' || $LastFile#
#else
  let $filename = 'CPS_' || $LastFile# || '.LIS'
#endif
#endif

  let $filename = '{IMPORTPREFIX}' || $filename

  open $filename as 1 for-writing record=120fixed

end-PROCEDURE  !Open-File


begin-PROCEDURE Close-File

  if $EmptyFile = 'Y'
    do ErrorEmptyFile
  else
    begin-SQL
    UPDATE PS_PAY_CALENDAR SET CPS_RUN = 'Y' WHERE RUN_ID = $RunID
    end-SQL


    begin-SQL
    UPDATE PS_INSTALLATION SET CPS_TRANS_ID_LAST = #LastFile#
    end-SQL

  end-if

  Close 1

end-PROCEDURE  !Close-File

!  ****                                     ****                                        ****
!  ***  The Following section contains all the procedures that create the Summary Report ***
!  ****                                     ****                                        ****

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY132CN
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('PAY132CN', 'REPORT_TITLE',$Pay132cn_ReportTitle,   #dummy_width)
  do Get_Field_Information ('PAY132CN', 'RUN_ID',      $Pay132cn_Run_ID,        #dummy_width)
  do Get_Field_Information ('PAY132CN', 'ORG_ID_TITLE',$Pay132cn_Org_ID,        #dummy_width)
  do Get_Field_Information ('PAY132CN', 'COMPANY_NAME',$Pay132cn_Company_Name,  #dummy_width)
  do Get_Field_Information ('PAY132CN', 'PAY_CHECK_DT',$Pay132cn_Pay_check_dt,  #dummy_width)
  do Get_Field_Information ('PAY132CN', 'PAY_END_DT',  $Pay132cn_Pay_end_dt,    #dummy_width)
  do Get_Field_Information ('PAY132CN', 'PAY_GROUP',   $Pay132cn_Pay_Group,     #dummy_width)
  do Get_Field_Information ('PAY132CN', 'NON_RRSP',    $Pay132cn_Non_RRSP,      #dummy_width)
  do Get_Field_Information ('PAY132CN', 'RRSP',        $Pay132cn_RRSP,          #dummy_width)
  do Get_Field_Information ('PAY132CN', 'NUM_RECORDS', $Pay132cn_Num_Records,   #dummy_width)
  do Get_Field_Information ('PAY132CN', 'CONTRIB',     $Pay132cn_Contrib,       #dummy_width)
  do Get_Field_Information ('PAY132CN', 'TOT_NUM_RECS',$Pay132cn_Tot_Num_Recs,  #dummy_width)
  do Get_Field_Information ('PAY132CN', 'TOT_CONTRIB', $Pay132cn_Tot_Contrib,   #dummy_width)

  do Get_Field_Information ('PAY132CN', 'ERROR_CONFIRM',    $Pay132cn_Error_Confirm,    #dummy_width)
  do Get_Field_Information ('PAY132CN', 'ERROR_PREVIOUSRUN',$Pay132cn_Error_PreviousRun,#dummy_width)
  do Get_Field_Information ('PAY132CN', 'ERROR_EMPTYFILE',  $Pay132cn_Error_EmptyFile,  #dummy_width)
  do Get_Field_Information ('PAY132CN', 'ERROR_ORGID',      $Pay132cn_Error_OrgId,      #dummy_width)
  do Get_Field_Information ('PAY132CN', 'ERROR_XMIT_ORGID', $Pay132cn_Error_Xmit_OrgId, #dummy_width)
  do Get_Field_Information ('PAY132CN', 'ERROR_PYMT_TYPE',  $Pay132cn_Error_Pymt_Type,  #dummy_width)

end-procedure  !Report-Translation

begin-procedure PrintTitle

  let $Company = &A.Company
  do Get-Company-Data

  print $Pay132cn_Run_ID        (+2, 1,0)
  print $RunID                  ( 0,+1,0)
  print $Pay132cn_Company_Name  (+1, 1,0)
  print &A.Company              (0, +1,0)
  print $CompanyName            (0, +1,0)
  print $Pay132cn_Org_ID        (+1, 1,0)
  print $XmitOrgID              (0, +1,0)
  print '/'                     (0, +1,0)
  print $PaymentType            (0, +1,0)

end-procedure  !PrintTitle


begin-procedure PrintPayGroupInfo

  print $Pay132cn_Pay_check_dt        (+3, 1,0)
  do LocalFormatDate($BatchPayCheckDate,$PrtPaycheckDate)
  print $PrtPaycheckDate              ( 0,25,0)
  print $Pay132cn_Pay_end_dt          (+1, 1,0)
  do LocalFormatDate($BatchPayEndDate,$PrtPayEndDate)
  print $PrtPayEndDate                ( 0,25,0)
  print $Pay132cn_Pay_Group           (+1, 1,0)
  print $BatchPayGroup                ( 0,25,0)
  print '='                           (+1, 1,35) fill

  print $Pay132cn_Non_RRSP            (+2, 1,0)
  print $Pay132cn_Num_Records         (+1, 1,0)
  print $BatchNonRRSPRec              ( 0,39,0)
  print $Pay132cn_Contrib             (+1, 1,0)
  print $BatchNonRRSPAmt              ( 0,35,0)

  print $Pay132cn_RRSP                (+2, 1,0)
  print $Pay132cn_Num_Records         (+1, 1,0)
  print $BatchRRSPRec                 ( 0,39,0)
  print $Pay132cn_Contrib             (+1, 1,0)
  print $BatchRRSPAmt                 ( 0,35,0)

end-procedure  !PrintPayGroupInfo

begin-procedure PrintSummary

  do Format-Number(#TotalPrtRecCount, $TotalPrtRecCount,        '999999999')
  do Format-Number(#TotalContribAmt,  $TotalContribAmt,  '9999999999999.99')
  print '='                           (+2, 1,45) fill
  print $Pay132cn_Tot_Num_Recs        (+1, 1,0)
  print $TotalPrtRecCount             ( 0,35,0)
  print $Pay132cn_Tot_Contrib         (+1, 1,0)
  print $TotalContribAmt              ( 0,28,0)

end-procedure  !PrintSummary

begin-procedure ErrorReportConfirm
  print $Pay132cn_Error_Confirm       (+3, 1,0)
end-procedure

begin-procedure ErrorEmptyFile
  print $Pay132cn_Error_EmptyFile     (+3, 1,0)
end-procedure

begin-procedure ErrorReportRun
  let $prtstring =  $Pay132cn_Error_PreviousRun || $RunID
  print $prtstring                    (+3, 1,0)
end-procedure

begin-procedure ErrorOrgId
  let $prtstring =  $Pay132cn_Error_OrgId || $OrgCompany
  print $prtstring                    (+3, 1,0)
end-procedure

begin-procedure ErrorXmitOrgId
  print $Pay132cn_Error_Xmit_OrgId    (+3, 1,0)
end-procedure

begin-procedure ErrorPymtType
  print $Pay132cn_Error_Pymt_Type     (+3, 1,0)
end-procedure

! Routine to Format Fax Number
begin-procedure FormatFaxNbr($faxnbr,:$ContactInfo)

  move ''                    to $ContactInfo
  if length(rtrim($faxnbr,' ')) = 12
    let $ContactInfo = '1' || substr($faxnbr,1,3) || substr($faxnbr,5,3) || substr($faxnbr,9,4)
  else
    let $ContactInfo = substr($faxnbr,1,3) || substr($faxnbr,5,4)
  end-if

end-procedure

! Function to format Database Date into 'MM/DD/YYYY' format
begin-procedure LocalFormatDate($DateIn, :$DateOut)

  let $YYYY  = substr($DateIn,1,4)
  let $MM    = substr($DateIn,6,2)
  let $DD    = substr($DateIn,9,2)

  let $DateOut = $MM || '/' || $DD || '/' || $YYYY

end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message
end-procedure
