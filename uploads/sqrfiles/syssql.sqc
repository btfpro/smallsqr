! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSSQL: SQL Audits
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYS-SQL Audits                                            !
! Descr:     System for SQL  (Introduced in PT8)                       !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'SQL Audits'

    do SYSSQL-01
    do SYSSQL-02
    do SYSSQL-03
    do SYSSQL-04
    do SYSSQL-05
    do SYSSQL-06
    do SYSSQL-07
    do SYSSQL-08

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSSQL-01                                                 !
! Descr:     Find SQL text without a base definition                   !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-01

   let $AuditDescr = '(SQL-01) SQL text without a base definition: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)

    do RetrieveColumnLength('PSSQLTEXTDEFN','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLTEXTDEFN','SQLTYPE',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSSQLTEXTDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSSQLTEXTDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSSQLTEXTDEFN','EFFDT',#Field5Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)

    let #numofhdr        = 5

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)


begin-SELECT on-Error=Rpt-SQL-Error
T.SQLID                  &SQL01_SQLID
T.SQLTYPE                &SQL01_SQLTYPE
T.MARKET                 &SQL01_MARKET
T.DBTYPE                 &SQL01_DBTYPE
T.EFFDT                  &SQL01_EFFDT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL01_SQLID        (+1, #Start1)
   print &SQL01_SQLTYPE      ( 0, #Start2)
   print &SQL01_MARKET       ( 0, #Start3)
   print &SQL01_DBTYPE       ( 0, #Start4)
   print &SQL01_EFFDT        ( 0, #Start5) edit {PTRPTDATE}

FROM PSSQLTEXTDEFN T
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSSQLDEFN S
        WHERE S.SQLID = T.SQLID
          AND S.SQLTYPE = T.SQLTYPE)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-02                                                 !
! Descr:     Find SQL definitions without SQL text                     !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-02

   let $AuditDescr = '(SQL-02) SQL definitions without SQL text: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
        let $Column3Name = 'Ownerid'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PSSQLDEFN','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLDEFN','SQLTYPE',#Field2Len,$FieldType)
        do RetrieveColumnLength('PSSQLDEFN','OBJECTOWNERID',#Field3Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

        if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
        let #Start3                      = (#Column2len + 4 + #Start2)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
        put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
S.SQLID                  &SQL02_SQLID
S.SQLTYPE                &SQL02_SQLTYPE
S.OBJECTOWNERID                  &SQL02_ObjectOwnerid

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL02_SQLID        (+1, #Start1)
   print &SQL02_SQLTYPE      ( 0, #Start2)
   print &SQL02_ObjectOwnerid ( 0, #Start3)

FROM PSSQLDEFN S
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSSQLTEXTDEFN T
        WHERE T.SQLID = S.SQLID
          AND T.SQLTYPE = S.SQLTYPE)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-03                                                 !
! Descr:     Find SQL descriptions without a base definition           !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-03

   let $AuditDescr = '(SQL-03) SQL descriptions without a base definition: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)

    do RetrieveColumnLength('PSSQLDESCR','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','SQLTYPE',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','EFFDT',#Field5Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)

    let #numofhdr        = 5

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)


begin-SELECT on-Error=Rpt-SQL-Error
D.SQLID                  &SQL03_SQLID
D.SQLTYPE                &SQL03_SQLTYPE
D.MARKET                 &SQL03_MARKET
D.DBTYPE                 &SQL03_DBTYPE
D.EFFDT                  &SQL03_EFFDT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL03_SQLID        (+1, #Start1)
   print &SQL03_SQLTYPE      ( 0, #Start2)
   print &SQL03_MARKET       ( 0, #Start3)
   print &SQL03_DBTYPE       ( 0, #Start4)
   print &SQL03_EFFDT        ( 0, #Start5) edit {PTRPTDATE}

FROM PSSQLDESCR D
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSSQLDEFN S
        WHERE S.SQLID = D.SQLID
          AND S.SQLTYPE = D.SQLTYPE)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-04                                                 !
! Descr:     Find SQL descriptions without associated SQL text         !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-04

   let $AuditDescr = '(SQL-04) SQL descriptions without associated SQL text: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)

    do RetrieveColumnLength('PSSQLDESCR','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','SQLTYPE',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSSQLDESCR','EFFDT',#Field5Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)

    let #numofhdr        = 5

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)


begin-SELECT on-Error=Rpt-SQL-Error
D.SQLID                  &SQL04_SQLID
D.SQLTYPE                &SQL04_SQLTYPE
D.MARKET                 &SQL04_MARKET
D.DBTYPE                 &SQL04_DBTYPE
D.EFFDT                  &SQL04_EFFDT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL04_SQLID        (+1, #Start1)
   print &SQL04_SQLTYPE      ( 0, #Start2)
   print &SQL04_MARKET       ( 0, #Start3)
   print &SQL04_DBTYPE       ( 0, #Start4)
   print &SQL04_EFFDT        ( 0, #Start5) edit {PTRPTDATE}

FROM PSSQLDESCR D
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSSQLTEXTDEFN T
        WHERE T.SQLID = D.SQLID
          AND T.SQLTYPE = D.SQLTYPE
          AND T.MARKET = D.MARKET
          AND T.DBTYPE = D.DBTYPE
          AND T.EFFDT = D.EFFDT)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-05                                                 !
! Descr:     Find AE SQL without SQL definitions
!----------------------------------------------------------------------!
begin-procedure SYSSQL-05

   let $AuditDescr = '(SQL-05) AE SQL without SQL definitions: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)
    let $Column7Name = 'AE StmtType'
    let #Column7len = lengthp($Column7Name)

    do RetrieveColumnLength('PSAESTMTDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_STEP',#Field6Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_STMT_TYPE',#Field7Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if

    if #Field7len > #Column7len
        let #Column7len = #Field7len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)
    let #Start7          = (#Column6len + 4 + #Start6)

    let #numofhdr        = 7

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)
    put $Column7Name #Start7 #Column7len into printarray(6)


begin-SELECT on-Error=Rpt-SQL-Error
M.AE_APPLID              &SQL05_AE_APPLID
M.AE_SECTION             &SQL05_AE_SECTION
M.MARKET                 &SQL05_MARKET
M.DBTYPE                 &SQL05_DBTYPE
M.EFFDT                  &SQL05_EFFDT
M.AE_STEP                &SQL05_AE_STEP
M.AE_STMT_TYPE           &SQL05_AE_STMT_TYPE

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL05_AE_APPLID        (+1, #Start1)
   print &SQL05_AE_SECTION       ( 0, #Start2)
   print &SQL05_MARKET           ( 0, #Start3)
   print &SQL05_DBTYPE           ( 0, #Start4)
   print &SQL05_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &SQL05_AE_STEP          ( 0, #Start6)
   print &SQL05_AE_STMT_TYPE     ( 0, #Start7)


FROM PSAESTMTDEFN M
WHERE M.AE_STMT_TYPE IN ('D', 'H', 'N', 'S', 'W')
  AND (M.SQLID = ' '
  OR NOT EXISTS
       (SELECT 'X'
          FROM PSSQLDEFN S
         WHERE S.SQLID = M.SQLID
           AND S.SQLTYPE = '1'))

end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSSQL-06                                                 !
! Descr:     Find AE SQL that's not referenced                         !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-06

   let $AuditDescr = '(SQL-06) AE SQL that''s not referenced: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
        let $Column3Name = 'Ownerid'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PSSQLDEFN','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLDEFN','SQLTYPE',#Field2Len,$FieldType)
        do RetrieveColumnLength('PSSQLDEFN','OBJECTOWNERID',#Field3Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

        if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
        let #Start3                      = (#Column2len + 4 + #Start2)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
        put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
S.SQLID                  &SQL06_SQLID
S.SQLTYPE                &SQL06_SQLTYPE
S.OBJECTOWNERID                  &SQL06_ObjectOwnerid

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL06_SQLID        (+1, #Start1)
   print &SQL06_SQLTYPE      ( 0, #Start2)
   print &SQL06_ObjectOwnerid ( 0, #Start3)

FROM PSSQLDEFN S
WHERE S.SQLTYPE = '1'
  AND NOT EXISTS
      (SELECT 'X'
         FROM PSAESTMTDEFN M
        WHERE M.AE_STMT_TYPE IN ('D', 'H', 'N', 'S', 'W')
          AND M.SQLID = S.SQLID)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-07                                                 !
! Descr:     Find record views/dynamic views without SQL definitions   !
!----------------------------------------------------------------------!
begin-procedure SYSSQL-07

   let $AuditDescr = '(SQL-07) Record Views/Dynamic Views without SQL definitions: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'RecName'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'RecType'
    let #Column2len = lengthp($Column2Name)
        let $Column3Name = 'Ownerid'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PSRECDEFN','RECNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSRECDEFN','RECTYPE',#Field2Len,$FieldType)
        do RetrieveColumnLength('PSRECDEFN','OBJECTOWNERID',#Field3Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

        if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
        let #Start3                      = (#Column2len + 4 + #Start2)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
        put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
R.RECNAME                &SQL07_RECNAME
R.RECTYPE                &SQL07_RECTYPE
R.OBJECTOWNERID                  &SQL07_ObjectOwnerid

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL07_RECNAME      (+1, #Start1)
   print &SQL07_RECTYPE      ( 0, #Start2)
   print &SQL07_ObjectOwnerid ( 0, #Start3)

FROM PSRECDEFN R
WHERE R.RECTYPE IN (1, 5)
  AND NOT EXISTS
      (SELECT 'X'
         FROM PSSQLDEFN S
        WHERE S.SQLID = R.RECNAME
          AND S.SQLTYPE = '2')
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSSQL-08                                                 !
! Descr:     Find view SQL that's not referenced by record views/dynamic views
!----------------------------------------------------------------------!
begin-procedure SYSSQL-08

   let $AuditDescr = '(SQL-08) View SQL that''s not referenced by record or dynamic views: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'SQLType'
    let #Column2len = lengthp($Column2Name)
        let $Column3Name = 'Ownerid'
    let #Column3len = lengthp($Column3Name)

    do RetrieveColumnLength('PSSQLDEFN','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSSQLDEFN','SQLTYPE',#Field2Len,$FieldType)
        do RetrieveColumnLength('PSSQLDEFN','OBJECTOWNERID',#Field3Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

        if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
        let #Start3                      = (#Column2len + 4 + #Start2)

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
        put $Column3Name #Start3 #Column3len into printarray(2)


begin-SELECT on-Error=Rpt-SQL-Error
S.SQLID                  &SQL08_SQLID
S.SQLTYPE                &SQL08_SQLTYPE
S.OBJECTOWNERID                  &SQL08_ObjectOwnerid

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &SQL08_SQLID        (+1, #Start1)
   print &SQL08_SQLTYPE      ( 0, #Start2)
   print &SQL08_ObjectOwnerid ( 0, #Start3)

FROM PSSQLDEFN S
WHERE S.SQLTYPE = '2'
  AND NOT EXISTS
      (SELECT 'X'
         FROM PSRECDEFN R
        WHERE R.RECTYPE IN (1, 5)
          AND R.RECNAME = S.SQLID)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
