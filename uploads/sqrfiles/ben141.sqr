!*****************************************
! BEN141:  Benefits Billing A/R Interface
!*****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/11:17:57:46                           !
!             $Release:  HR9                                           !
!            $Revision:  102                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#Include 'usarpt.sqc'    !Variables specific to USA


#define col_emplid              1
#define col_name               10
#define col_posting_dt         31
#define col_act_type           42
#define col_ben_prog           55
#define col_plan_type          65
#define col_plan_type_dta      66
#define col_plan_desc          72
#define col_ben_plan           88
#define col_ben_desc           98
#define col_cov_code          131
#define col_cov_code_dta      134
#define col_date_due          142
#define col_date_due_desc     145
#define col_date_overdue      154
#define col_chrg_amt          164


!************
Begin-Program
!************

  do Init-Report
  do Get-Report-Language
!--'Billing A/R Interface'
  let $ReportTitle  = $BEN141-REPORTTITLE

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ' '

  display 'Export Begin at ' noline
  do Display-time

  do Process-Main

  display 'Report Ended at ' noline
  do Display-time

  do Reset
  do StdAPI-Term

End-Program


!***************************
Begin-Procedure Init-Report
!***************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  let $ReportID    = 'BEN141'

  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  let $out_file = '{IMPORTPREFIX}' || 'BILLAR' || '{IMPORTSUFFIX}'
  open $out_file as 90 for-writing record = 206

  let $Rec_Spaces = ' '
  let $Rec_Spaces = lpad($Rec_Spaces,147,' ')
  let #Total_AR = 0

End-Procedure

!**********************************
! This procedure is used to read language-dependent text from the database.
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN141 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN141','REPORT_TITLE',   $BEN141-REPORTTITLE,    #CW)
  do Get_Field_Information ('BEN141','OVER_DUE',       $BEN141-OVER-DUE,       #CW)
  do Get_Field_Information ('BEN141','BILL_PERIOD',    $BEN141-BILL-PERIOD,    #CW)
  do Get_Field_Information ('BEN141','POSTING',        $BEN141-POSTING,        #CW)
  do Get_Field_Information ('BEN141','TOT_DOLL_POSTED',$BEN141-TOT-DOLL-POSTED,#CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'NAME',         $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',   'PLAN',         $BEN1-PLAN,          #CW)
  do Get_Field_Information ('BEN1',   'COVERAGE',     $BEN1-COVERAGE,      #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT',      $BEN1-BENEFIT,       #CW)
  do Get_Field_Information ('BEN1',   'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'TYPE',         $BEN1-TYPE,          #CW)
  do Get_Field_Information ('BEN1',   'CODE',         $BEN1-CODE,          #CW)
  do Get_Field_Information ('BEN1',   'AMT',          $BEN1-AMT,           #CW)
  do Get_Field_Information ('BEN1',   'ACTY',         $BEN1-ACTY,          #CW)
  do Get_Field_Information ('BEN1',   'DUE',          $BEN1-DUE,           #CW)
  do Get_Field_Information ('BEN1',   'DESCR',        $BEN1-DESCR,         #CW)
  do Get_Field_Information ('BEN1',   'PROGRAM',      $BEN1-PROGRAM,       #CW)

End-Procedure

!**************************
Begin-Procedure Ask-Values
!**************************

  do Ask-Calendar-Cd

End-Procedure


!**************************
Begin-Procedure Get-Values
!**************************

  do Select-Parameters
  do Get-Calendar-Cd

End-Procedure


!***************
Begin-Heading 8
!***************

#Include 'stdhdgtr.sqc'

  print $BEN141-BILL-PERIOD            (+2,1,17)
  print $Bill_Per_Cd                   ()

  print $BEN1-EMPLOYEE                 (+2,{col_emplid},8)
  print $BEN1-EMPLOYEE                 (0,{col_name},20)
  print $BEN141-POSTING                (0,{col_posting_dt},10)
  print $BEN1-ACTY                     (0,{col_act_type},11)
  print $BEN1-BENEFIT                  (0,{col_ben_prog},8)
  print $BEN1-PLAN                     (0,{col_plan_type},4)
  print $BEN1-BENEFIT                  (0,{col_ben_plan},7)
  print $BEN1-COVERAGE                 (0,{col_cov_code},8)
  print $BEN1-DATE                     (0,{col_date_due_desc},4)
  print $BEN1-DATE                     (0,{col_date_overdue},4)

  print $BEN1-ID                       (+1,{col_emplid},8)
  print $BEN1-NAME                     (0,{col_name},20)
  print $BEN1-DATE                     (0,{col_posting_dt},10)
  print $BEN1-TYPE                     (0,{col_act_type},11)
  print $BEN1-PROGRAM                  (0,{col_ben_prog},8)
  print $BEN1-TYPE                     (0,{col_plan_type},4)
  print $BEN1-DESCR                    (0,{col_plan_desc},14)
  print $BEN1-PLAN                     (0,{col_ben_plan},7)
  print $BEN1-DESCR                    (0,{col_ben_desc},31)
  print $BEN1-CODE                     (0,{col_cov_code},8)
  print $BEN1-DUE                      (0,{col_date_due_desc},3)
  print $BEN141-OVER-DUE               (0,{col_date_overdue},8)
  print $BEN1-AMT                      (0,{col_chrg_amt},9)

End-Heading


!****************************
Begin-Procedure Process-Main
!****************************

  do Get-Calendar-Info
  do Clear-History
  do Select-Charge
  do Select-Charge-Adj
  do Process-Output

End-Procedure


!*********************************
Begin-Procedure Get-Calendar-Info
!*********************************

Begin-Select
A1.BILL_PER_CD
A1.COMMENTS
A1.PERIOD_BEGIN_DT
A1.PERIOD_END_DT
From  PS_BEN_BI_CALENDAR A1
Where A1.BILL_PER_CD = $Bill_Per_Cd
Order By A1.BILL_PER_CD ASC
End-Select

End-Procedure


!*****************************
Begin-Procedure Clear-History
!*****************************

  let $Sql-Statement = 'BEN141: DELETE PS_R_Ben_bi_Hist(Start)'

Begin-SQL On-Error=SQL-Error

DELETE FROM PS_R_BEN_BI_HIST

End-SQL

End-Procedure


!*****************************
Begin-Procedure Select-Charge
!*****************************

  do Clear-Insert
  let $Detail_Type = 'CHRG'
  let $Posting_Date = &A1.Period_End_Dt

Begin-Select
A.EMPLID
A.PLAN_TYPE
A.BENEFIT_PROGRAM
A.BENEFIT_PLAN
A.COVRG_CD
A.DATE_DUE
A.DATE_OVERDUE
A.CHARGE
A.DED_SLSTX_CLASS

    let $EmplId = &A.EmplId
    let $Plan_Type = &A.Plan_Type
    let $Benefit_Program = &A.Benefit_Program
    let $Benefit_Plan = &A.Benefit_Plan
    let $Covrg_Cd = &A.Covrg_Cd
    let $Date_Due = &A.Date_Due
    let $Period_Begin_Dt = &A.Date_OverDue
    let #Amt = &A.Charge
    let $Ded_Slstx_Class = &A.Ded_Slstx_Class

    do Insert-Charge

From  PS_BEN_BI_CHG_VW A
Where A.BILL_PER_CD = $Bill_Per_Cd
Order by A.EMPLID,
A.PLAN_TYPE

End-Select

End-Procedure


!*********************************
Begin-Procedure Select-Charge-Adj
!*********************************

  Do Clear-Insert
  Let $Detail_Type = 'CHRZ'

Begin-Select
D.EMPLID
D.POSTING_DATE
D.NET_ADJUSTMENT
E.PLAN_TYPE
E.BENEFIT_PROGRAM
E.BENEFIT_PLAN
E.COVRG_CD
E.DED_SLSTX_CLASS

    Let $EmplId = &D.EmplId
    Let $Posting_Date = &D.Posting_Date
    Let #Amt = &D.Net_Adjustment
    Let $Plan_Type = &E.Plan_Type
    let $Benefit_Program = &E.Benefit_Program
    Let $Benefit_Plan = &E.Benefit_Plan
    Let $Covrg_Cd = &E.Covrg_Cd
    let $Ded_Slstx_Class = &E.Ded_Slstx_Class

    Do Insert-Adjust

From  PS_BEN_BI_ADJSTMNT D,
      PS_BEN_BI_CHARGE E
Where D.POSTING_DATE BETWEEN &A1.Period_Begin_Dt and &A1.Period_End_Dt
And   D.ADJUST_TYPE = 'CHG'
And   E.EMPLID = D.EMPLID
And   E.BILL_CHARGE_ID = D.BILL_CHARGE_ID
Order by D.EMPLID,
D.POSTING_DATE,
E.PLAN_TYPE

End-Select

End-Procedure


!****************************
Begin-Procedure Clear-Insert
!****************************

  Let $EmplId = ' '
  Let $Posting_Date = ''
  Let $Detail_Type = ' '
  Let $Billing_Reason = ' '
  Let $Date_Due = ''
  Let #Amt = 0
  Let $Benefit_Program = ' '
  Let $Plan_Type = ' '
  Let $Benefit_Plan = ' '
  Let $Covrg_Cd = ' '
  Let $Ded_Slstx_Class = ' '
  Let $Period_Begin_Dt = ''
  Let #Amount_Due = 0
  Let $Print_Period = ' '
  Let #Bill_Charge_Id = 0
  Let #Bill_Pay_Id = 0
  Let #Bill_Adj_Id = 0

End-Procedure


!*****************************
Begin-Procedure Insert-Charge
!*****************************

  Let $SQL-Statement = 'BEN141: Insert-History'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_BEN_BI_HIST
( EMPLID,
  POSTING_DATE,
  DETAIL_TYPE,
  BILLING_REASON,
  DATE_DUE,
  AMT,
  BENEFIT_PROGRAM,
  PLAN_TYPE,
  BENEFIT_PLAN,
  COVRG_CD,
  PERIOD_BEGIN_DT,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  DED_SLSTX_CLASS,
  COUNTRY,
  PROVINCE
)
Values
( $EmplId,
  $Posting_Date,
  $Detail_Type,
  $Billing_Reason,
  $Date_Due,
  #Amt,
  $Benefit_Program,
  $Plan_Type,
  $Benefit_Plan,
  $Covrg_Cd,
  $Period_Begin_Dt,
  #Bill_Charge_Id,
  #Bill_Pay_Id,
  #Bill_Adj_Id,
  $Ded_Slstx_Class,
  ' ',
  ' '
)
End-SQL

End-Procedure


!*****************************
Begin-Procedure Insert-Adjust
!*****************************

  Let $SQL-Statement = 'BEN141: Insert-History'

Begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_BEN_BI_HIST
( EMPLID,
  POSTING_DATE,
  DETAIL_TYPE,
  BILLING_REASON,
  DATE_DUE,
  AMT,
  BENEFIT_PROGRAM,
  PLAN_TYPE,
  BENEFIT_PLAN,
  COVRG_CD,
  PERIOD_BEGIN_DT,
  BILL_CHARGE_ID,
  BILL_PAY_ID,
  BILL_ADJ_ID,
  DED_SLSTX_CLASS,
  COUNTRY,
  PROVINCE
)
Values
( $EmplId,
  $Posting_Date,
  $Detail_Type,
  $Billing_Reason,
  NULL,
  #Amt,
  $Benefit_Program,
  $Plan_Type,
  $Benefit_Plan,
  $Covrg_Cd,
  NULL,
  #Bill_Charge_Id,
  #Bill_Pay_Id,
  #Bill_Adj_Id,
  $Ded_Slstx_Class,
  ' ',
  ' '
)
End-SQL

End-Procedure


!******************************
Begin-Procedure Process-Output
!******************************

  Let $Current_Emplid = ' '

Begin-Select
G.EMPLID
G.POSTING_DATE
G.PLAN_TYPE
G.BENEFIT_PROGRAM
G.BENEFIT_PLAN
G.COVRG_CD
G.DATE_DUE
G.PERIOD_BEGIN_DT     &Date_OverDue
G.AMT
G.DETAIL_TYPE
G.DED_SLSTX_CLASS

    Do Format-DateTime(&G.Posting_Date,$Posting_Date,{DEFDATE},'', '')

    Do Format-DateTime(&G.Date_Due,$Date_Due,{DEFDATE},'', '')

    Do Format-DateTime(&Date_OverDue,$Date_OverDue,{DEFDATE},'', '')


    move &G.Amt to $Amt 00000.00mi
    add &G.Amt to #Total_AR

    if &G.Emplid <> $Current_Emplid

      move &G.Emplid to $Current_Emplid
      do Process-Employee

    end-if

    if &G.Detail_Type = 'CHRG'
      let $Rec_Type = 'C'
    else
      let $Rec_Type = 'A'
    end-if

    Do Process-Entry

From  PS_R_BEN_BI_HIST G
Order By G.EMPLID ASC,
         G.POSTING_DATE ASC,
         G.DETAIL_TYPE ASC,
         G.PLAN_TYPE ASC

End-Select

  print $BEN141-TOT-DOLL-POSTED       (+2,13,23)
  print #Total_AR                     () edit $9,999,999.99

  close 90

End-Procedure


!********************************
Begin-Procedure Process-Employee
!********************************

Begin-Select
H.EMPLID
H.NAME
H.NAME_PREFIX
H.LAST_NAME
H.FIRST_NAME

  do Get-Phone-Data

  move &H.NAME to                  $name
  move &H.NAME_PREFIX to           $name_prefix
  move &H.LAST_NAME to             $last_name
  move &H.FIRST_NAME to            $first_name

  do Get-Empl-Address ($Current_Emplid,$AddrType, $AddressFound)
  move $GETADDR_address1 to        $address1
  move $GETADDR_address2 to        $address2
  move $GETADDR_city to            $city
  let $state = RTRIM($GETADDR_State,' ')
  move $GETADDR_postal to          $postal
  move $GETADDR_country to         $country

  do Get-Employee-NID
  move 'E' to $Rec_Type
  do Write-Empl-Rec
  do Print-Empl-Rec

From  PS_PERSON_NAME   H
Where H.EMPLID = $Current_Emplid
End-Select

End-Procedure


!***************************************!
begin-procedure Get-Phone-Data
!***************************************!

begin-SELECT
PP.PHONE
FROM  PS_PERSONAL_PHONE PP
WHERE PP.EMPLID = $Current_Emplid
  AND PP.PHONE_TYPE = 'MAIN'
end-SELECT

let $Phone      = rtrim(&PP.Phone,' ')


end-procedure

!**********************************
!* Procedure Name: Get-Employee-NID
!**********************************
Begin-Procedure Get-Employee-NID

Begin-SELECT
PN.NATIONAL_ID
     Let $SSN = &PN.NATIONAL_ID

FROM PS_PERS_NID PN
WHERE PN.EMPLID      = $Current_Emplid
  AND PN.COUNTRY     = {NID_COUNTRY}
  AND PN.PRIMARY_NID = 'Y'
End-SELECT

End-Procedure


!******************************
Begin-Procedure Write-Empl-Rec
!******************************

  write 90 from
                $Rec_Type:1
                $Current_Emplid:11
                $ssn:9
                $last_name:30
                $first_name:25
                $name_prefix:10
                $address1:30
                $address2:30
                $city:30
                $state:2
                $postal:12
                $country:3
                $phone:12

End-Procedure


!******************************
Begin-Procedure Print-Empl-Rec
!******************************

  print &H.Emplid                      (+2,{col_emplid},8)
  print &H.Name                        (0,{col_name},20)

End-Procedure


!*****************************
Begin-Procedure Process-Entry
!*****************************

  do Get-Desc
  do Write-Detail-Rec
  do Print-Detail-Rec

End-Procedure


!********************************
Begin-Procedure Write-Detail-Rec
!********************************

  write 90 from
                $Rec_Type:1
                $Current_Emplid:11
                $Posting_Date:10
                &G.Plan_Type:2
                &G.Benefit_Program:3
                &G.Benefit_Plan:6
                $Covrg_Cd_fld:4
                $Date_Due:10
                $Date_OverDue:10
                $Amt:9
                $Rec_Spaces:139

End-Procedure


!************************
Begin-Procedure Get-Desc
!************************

  if &G.Plan_Type <> ' '
    move 'PLAN_TYPE'     to $Fieldname
    move &G.Plan_Type    to $Fieldvalue
    move &G.Posting_Date to $AsOfDate
    do Read-Translate-Table
    move $XlatShortName  to $Plan_Type_Desc
  else
    move ' ' to $Plan_Type_Desc
  end-if

  if &G.Benefit_Plan <> ' '
    move &G.Benefit_Plan to $Benefit_Plan
    move &G.Plan_Type    to $Plan_Type
    move &G.Posting_Date to $AsOfDate
    do Get-Benefit-Name
    move $BenefitName to $Plan_Desc
  else
    move ' ' to $Plan_Desc
  end-if

  move ' ' to $Covrg_Cd_fld

  if &G.Ded_Slstx_Class <> ' ' and &G.Ded_Slstx_Class <> 'B'
    move 'DED_SLSTX_CLASS'  to $Fieldname
    move &G.Ded_Slstx_Class to $Fieldvalue
    move &G.Posting_Date    to $AsOfDate
    do Read-Translate-Table
    move $XlatShortName to $Covrg_Cd_fld
  end-if

  if &G.Covrg_Cd <> ' '
    move  &G.Covrg_Cd to $Covrg_Cd_fld
  end-if

  if $Rec_Type = 'C'
    let $Detail_Desc = 'Charge'
  else
    let $Detail_Desc = 'Adjustment'
  end-if

End-Procedure


!********************************
Begin-Procedure Print-Detail-Rec
!********************************

  print $Posting_Date                   (+1,{col_posting_dt},10)
  print $Detail_Desc                     (0,{col_act_type},11)
  print &G.Benefit_Program               (0,{col_ben_prog},8)
  print &G.Plan_Type                     (0,{col_plan_type_dta},2)
  print $Plan_Type_Desc                  (0,{col_plan_desc},14)
  print &G.Benefit_Plan                  (0,{col_ben_plan},7)
  print $Plan_Desc                       (0,{col_ben_desc},31)
  print $Covrg_Cd_fld                    (0,{col_cov_code_dta},2)
  print $Date_Due                        (0,{col_date_due},10)
  print $Date_OverDue                    (0,{col_date_overdue},10)
  print &G.Amt                           (0,{col_chrg_amt}) edit 99,999.99

End-procedure


!****************************
Begin-Procedure Display-Time
!****************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure


!*****************************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbical.sqc'  !Ask-Calendar-Cd routine
#include 'getbennm.sqc'  !Get-Benefit-Name procedure
#Include 'getaddr.sqc'   !Get current address for specified address type
#Include 'readxlat.sqc'  !Read-Translate-Table procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!******************************* End of Report *******************************
