!***********************************************************************
!  TAX810DC:  Qtrly Wage List - Tape - District of Columbia            *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/04/21:12:49:14                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'

  do Process-Main

  close 10

  if #Count_F > 0
     display ''
     display 'Upon successful conclusion of this program, one or more'
     display 'files will have been created, as follows:'
     display ''
     display '  TAX810DC      contains 275-character records in the ICESA format'
     display '                required for cartridge submission to the'
     display '                District of Columbia Department of Employment Services'
     display '     or'
     display ''
     display '  DCWAGEnn.TXT  contains 275-character records in the ICESA format'
     display '                required for diskette submission to the'
     display '                District of Columbia Department of Employment Services'
     display '                where "nn" represents a volume number.'
     display ''
     display 'Follow the instructions from the department for the preparation and'
     display 'submission of diskettes or cartridges.'
     display ''
  else
     do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number

  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810DC' to $ReportID

 if $FileType = 'D'
  move 'District of Columbia Quarterly UI Wage Report - Diskette' to $ReportTitle
  display ''
  display 'Creating Diskette File for District of Columbia UI Wage Reporting'
 else
  move 'District of Columbia Quarterly UI Wage Report - Cartridge' to $ReportTitle
  display ''
  display 'Creating Tape File for District of Columbia UI Wage Reporting'
 end-if

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'DC'              to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move '0' to $Year4
  move '' to $DDelimiter
  do Format-DateTime($AsOfToday, $out, {DEFCMP}, '', '')
  let $CreationDate = substr($out, 5, 2) || substr($out, 7, 2) || substr($out, 1, 4)

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

  if $FileType <> 'D'
    if &TX.Blocking_Factor > 85 or
       &TX.Blocking_Factor < 1
      display '******************************************'
      display 'Blocking Factor must be between 1 and 85. '
      display 'Program Stopped.                          '
      display 'Modify Tax Report Run Control.            '
      display '******************************************'
      stop
    end-if
  end-if

  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
end-procedure

begin-procedure Open-File

if $FileType='D'
   move 0 to #RecordCount
   add 1  to #FileCount

   if #FileNumber <> 0
      close 10

      if #FileNumber = 1
         move 2 to #FileNumber
      end-if
   end-if

   move #FileNumber to $FileNumber B9
   let $FileName = 'DCWAGE' || ltrim($FileNumber, ' ')
 
   #ifdef OS400
      let $FileExtension = '(D' || ltrim($FileNumber, ' ') || ')'
      let $FileID = '{IMPORTPREFIX}' || 'DCWAGE' || $FileExtension
   #else
      let $FileID = '{IMPORTPREFIX}' || $FileName || '.TXT'
   #endif

   open $FileID as 10 for-writing record=275:fixed
else
   open '{IMPORTPREFIX}TAX810DC{IMPORTSUFFIX}' as 10 for-writing record=275:fixed

end-if
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

  do Get-Company-Data                 !Transmitter identifying data

  do Write-A-Record
  do Write-B-Record

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Write-F-Record
    do Print-Totals
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                      AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  if &C.NlGrs_QTD > 0
     do Process-Employee
  else
     do Print-Summary-Data('NegWage')
  end-if

  if $FileType = 'D' and #RecordCount >= #MaxRecordsPerDiskette
     add 1 to #FileNumber
     do Open-File
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'DC'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '      to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID  to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  move &C.NlGrs_QTD to #NlGrs_QTD
  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  add #NlGrs_QTD to #Co_NlGrs_QTD

  move &C.TxGrs_QTD to #TxGrs_QTD
  multiply 100 times #TxGrs_QTD
  do Format-Number(#TxGrs_QTD,  $TxGrs_QTD,  '09999999999999')
  add #TxGrs_QTD to #Co_TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD
  do Format-Number(#ExGrs_QTD,  $ExGrs_QTD,  '09999999999999')
  add #ExGrs_QTD to #Co_ExGrs_QTD

  do Write-S-Record
end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  move 'DC' to $State
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  move &Employer_ID_SUT to $StateEIN

  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.99999
  let $Experience_Rt = SUBSTR($Experience_Rt,2,6)

  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if

  do Write-E-Record
end-procedure

begin-procedure After-Company
  if #Count_S > 0
    do Write-T-Record
  end-if

  divide 100 into #Co_NlGrs_QTD
  divide 100 into #Co_TxGrs_QTD
  divide 100 into #Co_ExGrs_QTD
  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
  add #Co_ExGrs_QTD to #Tot_ExGrs_QTD

  do Print-Summary-Data('CoTotal')

  add #Count_S to #Count_F

  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  move 0 to #Count_S
  new-page
end-procedure

begin-procedure Write-A-Record
  move $CompanyName     to $TransmitterName
  move &CT.Federal_EIN  to $FedEIN 099999999
  move $CompnyAdd1      to $TransmitterAddress
  move $CompnyCity      to $TransmitterCity
  let $TransmitterState = rtrim(&CT.State, ' ')

  if &CT.Country = 'USA'
     move &CT.Postal    to $Zip
  else
     move ' '           to $Zip
  end-if

  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6)  = 0 and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip             to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  write 10 from    'A':1
           $CalendarYr:4
               $FedEIN:9
                'UTAX':4
                   $Sp:5
      $TransmitterName:50
   $TransmitterAddress:40
      $TransmitterCity:25
     $TransmitterState:2
                   $Sp:13
                  $Zip:5
             $ZipExtsn:5
   $TransmitterContact:30
     $TransmitterPhone:10
  $TransmitterPhoneExt:4
                   $Sp:6
                   $Sp:1
                   $Sp:5
                   $Sp:1
                   $Sp:9
                   $Sp:13
         $CreationDate:8
                   $Sp:25

  add 1 to #RecordCount
end-procedure

begin-procedure Write-B-Record

  write 10 from    'B':1
           $CalendarYr:4
               $FedEIN:9
         $Computer_Mfr:8
           $Tape_Label:2
                   $Sp:1
              $Density:2
         $Recording_Cd:3
               $Tracks:2
      $Blocking_Factor:2
                'UTAX':4
                   $Sp:108
      $TransmitterName:44
   $TransmitterAddress:35
      $TransmitterCity:20
     $TransmitterState:2
                   $Sp:5
                  $Zip:5
             $ZipExtsn:5
                   $Sp:13

  add 1 to #RecordCount
end-procedure

begin-procedure Write-E-Record
  move &A.Federal_EIN  to $FedEIN 099999999
  move &A.Descr        to $ErName
  move &A.Address1     to $ErAddress
  move &A.City         to $ErCity
  let $ErState         = rtrim(&A.State, ' ')

  if &A.Country = 'USA'
     move &A.Postal    to $Zip
     move ' '          to $Intl_Addr          
  else
     move ' '          to $Zip
     move 'X'          to $Intl_Addr
  end-if

  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0  and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  move '1' to $NWNW         !E record will be followed by S record

  write 10 from 'E':1
   &TX.Balance_Year:4
            $FedEIN:9
                $Sp:9
            $ErName:50
         $ErAddress:40
            $ErCity:25
           $ErState:2
                $Sp:8
          $ZipExtsn:5
               $Zip:5
                $Sp:1
                $Sp:1
   $Blocking_Factor:2
                $Sp:4
             'UTAX':4
               '11':2
          $StateEIN:15
       $QtrEndMonth:2
              $NWNW:1
                $Sp:1
                $Sp:5
                $Sp:7
                $Sp:5
                $Sp:47
         $Intl_Addr:1
                $Sp:1
                $Sp:9
                $Sp:9

  move 'Y' to $RecordWritten
  add 1 to #Count_E
  add 1 to #RecordCount
end-procedure

begin-procedure Write-S-Record
  add 1 to #Count_S

  write 10 from 'S':1
       $NATIONAL_ID:9
          $LastName:20
         $FirstName:12
        $MidInitial:1
               '11':2
                $Sp:4
   '00000000000000':14
         $NlGrs_QTD:14
         $ExGrs_QTD:14
         $TxGrs_QTD:14
  '000000000000000':15
        '000000000':9
                $Sp:2
                $Sp:3
                $Sp:8
             'UTAX':4
          $StateEIN:15
                $Sp:15
   '00000000000000':14
   '00000000000000':14
                $Sp:2
                $Sp:1
                $Sp:1
                $Sp:1
                $Sp:1
                $Sp:1
                $Sp:1
                $Sp:1
                $Sp:1
       $QtrEndMonth:2
        $CalendarYr:4
                $Sp:6
                $Sp:6
                $Sp:43

  add 1 to #RecordCount
end-procedure

begin-procedure Write-T-Record
  move #Count_S      to $Count_S 0999999

  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999
  move #Co_TxGrs_QTD to $Co_TxGrs_QTD 09999999999999
  move #Co_ExGrs_QTD to $Co_ExGrs_QTD 09999999999999

  add #Month1Count   to #TotMonth1Count
  add #Month2Count   to #TotMonth2Count
  add #Month3Count   to #TotMonth3Count

  write 10 from 'T':1
           $Count_S:7
             'UTAX':4
   '00000000000000':14
      $Co_NlGrs_QTD:14
      $Co_ExGrs_QTD:14
      $Co_TxGrs_QTD:14
    '0000000000000':13
     $Experience_Rt:6
          $TaxesDue:13
   $PrevQtrUnderpay:11
          $Interest:11
           $Penalty:11
            $Credit:11
                $Sp:4
      '00000000000':11
                $Sp:4
      '00000000000':11
      $TotalPayment:11
    '0000000000000':13
   '00000000000000':14
   '00000000000000':14
       $Month1Count:7
       $Month2Count:7
       $Month3Count:7
                $Sp:3
                $Sp:7
                $Sp:10
                $Sp:8

  add 1 to #RecordCount
  move 0  to #T_Gross
end-procedure

begin-procedure Write-F-Record

  move #Count_F to $Count_F 0999999999
  move #Count_E to $Count_E 0999999999

  let $Tot_NlGrs_QTD = EDIT(#Tot_NlGrs_QTD * 100,'099999999999999')
  let $Tot_ExGrs_QTD = EDIT(#Tot_ExGrs_QTD * 100,'099999999999999')
  let $Tot_TxGrs_QTD = EDIT(#Tot_TxGrs_QTD * 100,'099999999999999')

  move #TotMonth1Count to $TotMonth1Count  09999999
  move #TotMonth2Count to $TotMonth2Count  09999999
  move #TotMonth3Count to $TotMonth3Count  09999999

  write 10 from 'F':1
           $Count_F:10
           $Count_E:10
             'UTAX':4
  '000000000000000':15
     $Tot_NlGrs_QTD:15
     $Tot_ExGrs_QTD:15
     $Tot_TxGrs_QTD:15
  '000000000000000':15
  '000000000000000':15
    $TotMonth1Count:8
    $TotMonth2Count:8
    $TotMonth3Count:8
                $Sp:136
end-procedure

begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $TransmitterContact  maxlen=30 '  Contact name (30 char max)'
  input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Contact_Person    to $TransmitterContact
  move $RC_QTR_UI.Contact_Phone     to $TransmitterPhone
  move $RC_QTR_UI.Contact_Phone_Ext to $TransmitterPhoneExt
  move $RC_QTR_UI.Diskette_Type     to $DisketteType
  move $RC_QTR_UI.Reporting_Medium  to $FileType

  unstring  $TransmitterPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $TransmitterPhone = $str1 || $str3 || $str4
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move '  '                  to $Density
      move 'ASC'                 to $Recording_Cd
      move 'D '                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move '  '                  to $Blocking_Factor
      move '  '                  to $Tracks
      break

    when = 'C'
      move '39'                  to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move &TX.Tape_Label        to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move &TX.Blocking_Factor   to $Blocking_Factor 09
      move 'MC'                  to $FilingType
      move '19'                  to $Tracks

  end-evaluate
end-procedure

begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should include decimal and cents, but no commas, e.g. 1234.00)'
  input $TaxesDue        '   Quarterly Contribution Due'
  input $PrevQtrUnderpay '   Previous Quarter Underpayment'
  input $Interest        '   Interest Due'
  input $Penalty         '   Penalty Due'
  input $Credit          '   Previous Credit to apply to balance due'
  input $TotalPayment    '   Total Payment Due'
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'

  move $TaxesDue        to #TaxesDue
  move $PrevQtrUnderpay to #PrevQtrUnderpay
  move $Interest        to #Interest
  move $Penalty         to #Penalty
  move $Credit          to #Credit
  move $TotalPayment    to #TotalPayment
  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $Penalty         = EDIT(#Penalty         * 100,'09999999999')
  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure

begin-procedure Company-Run-Control
begin-select
DC.UI_TAXES_DUE
DC.UI_PREV_QTR_UNDRPY
DC.UI_INTEREST_DUE
DC.UI_PENALTY_DUE
DC.UI_PREVIOUS_CREDIT
DC.UI_TOTAL_PAYMENT
DC.UI_MONTH1_COUNT
DC.UI_MONTH2_COUNT
DC.UI_MONTH3_COUNT

FROM PS_RC_TAX810DC DC
WHERE DC.OPRID       = $Prcs_OprID
  AND DC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND DC.COMPANY     = &C.Company

end-SELECT

  move &DC.UI_Taxes_Due        to #TaxesDue
  move &DC.UI_Prev_Qtr_Undrpy  to #PrevQtrUnderpay
  move &DC.UI_Interest_Due     to #Interest
  move &DC.UI_Penalty_Due      to #Penalty
  move &DC.UI_Previous_Credit  to #Credit
  move &DC.UI_Total_Payment    to #TotalPayment
  move &DC.UI_Month1_Count     to #Month1Count
  move &DC.UI_Month2_Count     to #Month2Count
  move &DC.UI_Month3_Count     to #Month3Count

  let $TaxesDue        = EDIT(#TaxesDue        * 100,'0999999999999')
  let $PrevQtrUnderpay = EDIT(#PrevQtrUnderpay * 100,'09999999999')
  let $Interest        = EDIT(#Interest        * 100,'09999999999')
  let $Penalty         = EDIT(#Penalty         * 100,'09999999999')
  let $Credit          = EDIT(#Credit          * 100,'09999999999')
  let $TotalPayment    = EDIT(#TotalPayment    * 100,'09999999999')

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure


begin-procedure Print-Totals
  print '**** File Total ****'     (+3,1)
  print 'No Limit Gross QTD '      (+2,1,26)
  print #Tot_NlGrs_QTD              (,28)   edit 999,999,999.99mi

  if #Tot_TxGrs_QTD <> 0
    print 'Taxable Gross QTD  '    (+2,1,26)
    print #Tot_TxGrs_QTD            (,28)   edit 999,999,999.99mi
  end-if

  if #Tot_ExGrs_QTD <> 0
    print 'Excess Gross QTD   '    (+2,1,26)
    print #Tot_ExGrs_QTD            (,28)   edit 999,999,999.99mi
  end-if

  if #Tot_Tips_QTD <> 0
    print 'Declared Tips QTD  '    (+2,1)
    print #Tot_Tips_QTD             (,28)   edit 999,999,999.99mi
  end-if

  print 'Employees Reported'       (+2,1,29)
  print #Count_F                    (,31)   edit 999,999,999

  if #Count_R_Total > 0
    print 'Records Reported'         (+2,1,29)
    print #Count_R_Total              (,31)   edit 999,999,999
  end-if

  if #Count_E <> 0
    print 'Employers Reported'     (+2,1,29)
    print #Count_E                  (,31)   edit 999,999,999
  end-if

  print 'Output File(s):  '        (+2,1)
  move 0 to #i
  if #FileCount > 0
     while #i <= #FileCount
       move #i to $i B9
       let $FileName = 'DCWAGE' || ltrim($i, ' ')
       let $FileID   = '{IMPORTPREFIX}' || $FileName || '.TXT'
       print $FileID                (+1,10)
       add 1 to #i
       if #i = 1
          move 2 to #i
       end-if
     end-while
  else
      let $FileID = $ReportID
      let $FileID = '{IMPORTPREFIX}' || $FileID || '{IMPORTSUFFIX}'
      print $FileID                 (+1,10)
  end-if

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
