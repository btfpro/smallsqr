!*******************************
! BEN741: Benefits Rate Table
!*******************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2011/06/01:09:39:03                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860805                                              !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define col_sep                  1   !Column Separator
#define col_liner                1   !Column Line
#define col_rate_id             10   !Rate ID
#define col_eff_date            10   !Effective Date
#define col_descr               30   !Description
#define col_rate_type           10   !Rate Type
#define col_rate_freq           15   !Rate Frequency
#define col_rate_per_unit       15   !Rate Pet Unit
#define col_rate_currency       10   !Rate Currency
#define col_rate_limit_cd       15   !Rate limit Cd
#define col_limit_value         11   !Limit Value

#define col_key_start            3   !Rate Table Keys
#define col_key                 20   !Rate Table Keys
#define col_tot_cover_rate      12   !Total Coverage Rate
#define col_emplye_covrg_rate   13   !Employee Coverage Rate
#define col_emplyr_covrg_rate   13   !Employer Coverage Rate
#define col_b_tax_rate          12   !B-Tax rate
#define col_a_tax_rate          12   !A-Tax rate
#define col_n_tax_rate          12   !N-Tax rate
#define col_t_tax_rate          12   !T-Tax rate
#define col_p_tax_rate          14   !P-Tax rate

!Max lines-per-page as allowed by PS-Tools printer setup SQC
#define max_lines_per_page      55
!Minimum remaining lines required to start a new Rate Table ID
#define min_lines_per_rate      9

!**********************************
Begin-Program
!**********************************

  do Init-Report
  do Build-Where-Clause
  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  let $ReportID = 'BEN741'

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number
  do StdAPI-Init

  do Get-Report-Language

  let $ReportTitle  = $BEN741-REPORTTITLE
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  do Create-All-Arrays
  do Load-KeyField-Info

  let #CurRptLine = {max_lines_per_page}
  let #FirstPage = 1

  display 'Report Begin at: ' noline
  do display-time

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************

  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN741', 'REPORT_TITLE',  $BEN741-REPORTTITLE, #CW)
  do Get_Field_Information ('BEN741', 'RATE_TABLE',    $BEN741-RATE-TABLE,  #CW)
  do Get_Field_Information ('BEN741', 'RATE_FREQUENCY',$BEN741-RATE-FREQ,   #CW)
  do Get_Field_Information ('BEN741', 'RATE_TYPE',     $BEN741-RATE-TYPE,   #CW)
  do Get_Field_Information ('BEN741', 'RATE_PER_UNIT', $BEN741-RT-PER-UNIT, #CW)
  do Get_Field_Information ('BEN741', 'CURRENCY',      $BEN741-CURRENCY,    #CW)
  do Get_Field_Information ('BEN741', 'RATE_LIMIT_CD', $BEN741-RT-LIMIT-CD, #CW)
  do Get_Field_Information ('BEN741', 'LIMIT-VALUE',   $BEN741-LIMIT-VALUE, #CW)
  do Get_Field_Information ('BEN741', 'PCT',           $BEN741-PCT,         #CW)
  do Get_Field_Information ('BEN741', 'A-TAX',         $BEN741-A-TAX,       #CW)
  do Get_Field_Information ('BEN741', 'B-TAX',         $BEN741-B-TAX,       #CW)
  do Get_Field_Information ('BEN741', 'N-TAX',         $BEN741-N-TAX,       #CW)
  do Get_Field_Information ('BEN741', 'T-TAX',         $BEN741-T-TAX,       #CW)
  do Get_Field_Information ('BEN741', 'P-TAX',         $BEN741-P-TAX,       #CW)
  do Get_Field_Information ('BEN741', 'DEF',           $BEN741-DEF,         #CW)
  do Get_Field_Information ('BEN741', 'CRITERIA',      $BEN741-CRITERIA,    #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYER',      $BEN1-EMPLOYER,      #CW)
  do Get_Field_Information ('BEN1',   'EMPLOYEE',      $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'RATE',          $BEN1-RATE,          #CW)
  do Get_Field_Information ('BEN1',   'EFFECTIVE',     $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'ID',            $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'TOTAL',         $BEN1-TOTAL,         #CW)
  do Get_Field_Information ('BEN1',   'DESCR',         $BEN1-DESCR,         #CW)
  do Get_Field_Information ('BEN1',   'DATE',          $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'FREQ_TYPE',     $BEN1-FREQUENCY,     #CW)
  do Get_Field_Information ('BEN1',   'PCT',           $BEN1-PCT,           #CW)
  do Get_Field_Information ('BEN1',   'SETID',         $BEN1-SETID,         #CW)
  do Get_Field_Information ('BEN1',   'VENDOR',        $BEN1-VENDOR,        #CW)
  do Get_Field_Information ('BEN1',   'ALL',           $BEN1-ALL,           #CW)
  do Get_Field_Information ('BEN1',   'BENEFIT_PROGRAM', $BEN1-PROGRAM,     #CW)

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  display '  '
  do Ask-As-Of-Date

  display '  '
  let $SetId = ''
  input $SetId 'Enter SetId' type=char

  let $Provider = ''
  if Not IsBlank($SetId)
    display '  '
    while IsBlank($Provider)
      input $Provider 'Enter Provider/Vendor-Id' type=char
    end-while
  end-if

  display '  '
  let $Benefit_Program = ''
  input $Benefit_Program 'Enter Benefit-Program' type=char

  display '  '
  let $Rate_Type = ''
  input $Rate_Type 'Enter Rate-Type' type=char

  display '  '

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-As-Of-Date
  do Get-Provider
  do Get-Benefit-Program
  do Get-Benefit-Rate-Type

End-Procedure

!*************************************
Begin-Procedure Create-All-Arrays
!*************************************

  Create-Array name  = KeyInfo
               size  = 100
               field = FLD_NAME:char
               field = IS_NUMERIC:number
               field = DECIMALPOS:number
               field = LABELID:char
               field = SHORTNAME:char

  Create-Array name  = RateKeys
               size  = 4
               field = FLD_NAME:char
               field = MATCH_OPER:char

End-Procedure

!*************************************
Begin-Procedure Load-KeyField-Info
!*************************************

   let #KeyFldCnt = 0

Begin-Select
K.FIELDNAME
F.FIELDTYPE
F.DECIMALPOS
L.LABEL_ID

  add 1 to #KeyFldCnt
  put &K.FIELDNAME  into KeyInfo(#KeyFldCnt) FLD_NAME
  let #IsNumeric = ((&F.FIELDTYPE = 2) or (&F.FIELDTYPE = 3))
  put #IsNumeric    into KeyInfo(#KeyFldCnt) IS_NUMERIC
  put &F.DECIMALPOS into KeyInfo(#KeyFldCnt) DECIMALPOS
  put &L.LABEL_ID   into KeyInfo(#KeyFldCnt) LABELID

FROM PS_BN_RATE_KEYS K,
     PSDBFIELD F,
     PSDBFLDLABL L
WHERE F.FIELDNAME = K.FIELDNAME
  AND L.FIELDNAME = F.FIELDNAME
  AND ((K.LABEL_ID = ' '
  AND   L.DEFAULT_LABEL = 1)
   OR  (K.LABEL_ID <> ' '
  AND   L.LABEL_ID = K.LABEL_ID))
End-Select

  let #FldCnt = 1
  while #FldCnt <= #KeyFldCnt

    get $FieldName from KeyInfo(#FldCnt) FLD_NAME
    get $LabelID   from KeyInfo(#FldCnt) LABELID
    Do Load-Field-Label($FieldName, $LabelID, $ShortName)
    put $ShortName into KeyInfo(#FldCnt) SHORTNAME

    let #FldCnt = #FldCnt + 1
  end-while

End-Procedure

!*************************************
Begin-Procedure Load-Field-Label($FieldName, $LabelID, :$ShortName)
!*************************************

  let $ShortName = ''

Begin-Select
L.SHORTNAME
  let $ShortName = &L.SHORTNAME

FROM PSDBFLDLABL L
WHERE L.FIELDNAME = $FieldName
  AND L.LABEL_ID = $LabelID
  AND NOT EXISTS
     (SELECT 'X'
      FROM PSDBFLDLABLLANG X
      WHERE X.FIELDNAME = L.FIELDNAME
      AND X.LABEL_ID = L.LABEL_ID
      AND X.LANGUAGE_CD = $_curr_language_cd)

UNION

SELECT
L.SHORTNAME
FROM PSDBFLDLABLLANG L
WHERE L.FIELDNAME = $FieldName
  AND L.LABEL_ID = $LabelID
  AND L.LANGUAGE_CD = $_curr_language_cd
End-Select

End-Procedure

!***************************************
Begin-Procedure Print-Page-Heading
!***************************************

  #Include 'stdhdgtr.sqc'     !Standard Report header
  let #CurRptLine = 4

  do Format-DateTime($AsOfDate, $OutDt, {DEFDATE}, '', '')
  print $BEN741-DEF            (+1,1)
  print $OutDt                 (0,+1)

  print $BEN741-CRITERIA       (+1,1)
  print $BEN741-RATE-TYPE      (0,+1)
  print '='                    (0,+1)
  if IsBlank($Rate_Type)
    print  $BEN1-ALL           (0,+1)
  else
    print $Rate_Type           (0,+1)
  end-if
  print ';'                    ()
  print $BEN1-SETID            (0,+1)
  print '/'                    ()
  print $BEN1-VENDOR           ()
  print '='                    (0,+1)
  if IsBlank($Setid)
    print  $BEN1-ALL           (0,+1)
  else
    print $Setid               (0,+1)
  end-if
  print '/'                    ()
  if IsBlank($Provider)
    print  $BEN1-ALL           ()
  else
    print $Provider            ()
  end-if
  print ';'                    ()
  print $BEN1-PROGRAM          (0,+1)
  print '='                    (0,+1)
  if IsBlank($Benefit_Program) Or ($Benefit_Program = '%')
    print  $BEN1-ALL           (0,+1)
  else
     print $Benefit_Program    (0,+1)
  end-if

  let #CurRptLine = #CurRptLine + 2

End-Procedure

!***************************************
Begin-Procedure Build-Where-Clause
!***************************************

  let $BProgramClause    = ''
  let $SetidClause       = ''
  let $VendorClause      = ''
  let $RateClause        = ''

  if Not IsBlank($Benefit_Program) And ($Benefit_Program <> '%')
    let $BProgramClause    = ' AND P.BENEFIT_PROGRAM = ''' || RTrim($Benefit_Program,' ') || ''' '
  else
    let $BProgramClause    =  ''
  end-if

  if Not IsBlank($Setid)
    let $SetidClause  = ' AND B.SETID = ''' || RTrim($Setid,' ') || ''' '
  else
    let $SetidClause  = ''
  end-if

  if Not IsBlank($Provider)
    let $VendorClause  =' AND B.VENDOR_ID = ''' || RTrim($Provider,' ') || ''' '
  else
    let $VendorClause  = ''
  end-if

  if Not IsBlank($Rate_Type)
    let $RateClause  =' AND R.RATE_TYPE = ''' || RTrim($Rate_Type,' ') || ''' '
  else
    let $RateClause  = ''
  end-if

End-Procedure

!***************************************
Begin-Procedure Process-Main
!***************************************

Begin-Select DISTINCT
C.RATE_TBL_ID

  let $Rate_Id = rtrim(&C.RATE_TBL_ID,' ')
  do Process-Rate

FROM PS_BEN_DEFN_PGM P,
     PS_BEN_DEFN_OPTN O,
     PS_BEN_DEFN_COST C,
     PS_BENEF_PLAN_TBL B,
     PS_BN_RATE_TBL R
WHERE O.BENEFIT_PROGRAM = P.BENEFIT_PROGRAM
  AND (O.PLAN_TYPE Like '1%'
    Or O.PLAN_TYPE Like '2%'
    Or O.PLAN_TYPE Like '3%'
    Or O.PLAN_TYPE Like 'A%')
  AND O.OPTION_TYPE = 'O'
  AND P.EFFDT = ( Select MAX(P1.EFFDT)
                  FROM PS_BEN_DEFN_PGM P1
                  where P1.BENEFIT_PROGRAM = P.BENEFIT_PROGRAM
                  and   P1.EFFDT <= $AsOfDate )
  AND O.EFFDT = P.EFFDT
  AND C.BENEFIT_PROGRAM = O.BENEFIT_PROGRAM
  AND C.PLAN_TYPE = O.PLAN_TYPE
  AND C.OPTION_ID = O.OPTION_ID
  AND C.RATE_TBL_ID <> ' '
  AND B.PLAN_TYPE = O.PLAN_TYPE
  AND B.BENEFIT_PLAN = O.BENEFIT_PLAN
  AND B.EFFDT = (Select MAX(B1.EFFDT)
                 FROM PS_BENEF_PLAN_TBL B1
           WHERE B1.PLAN_TYPE = B.PLAN_TYPE
             AND B1.BENEFIT_PLAN = B.BENEFIT_PLAN
             AND B1.EFFDT <= $AsOfDate)
  AND R.RATE_TBL_ID = C.RATE_TBL_ID
  [$BProgramClause]
  [$SetidClause]
  [$VendorClause]
  [$RateClause]

ORDER BY C.RATE_TBL_ID
End-Select

End-Procedure

!***************************************
Begin-Procedure Print-Rate-Heading
!***************************************

  if (#CurRptLine >= {max_lines_per_page}-{min_lines_per_rate})
    if Not (#FirstPage)
      new-page
    end-if
    do Print-Page-Heading
  end-if
  let #FirstPage = 0

  print ''                       (+2,1)
  let #CurRptLine = #CurRptLine + 2

!Column Heading line 1
  print $BEN741-RATE-TABLE       (+1,1,{col_rate_id})
  print $BEN1-EFFECTIVE          (0,+{col_sep},{col_eff_date})
  print ' '                      (0,+{col_sep},{col_descr})
  print ' '                      (0,+{col_sep},{col_rate_type})
  print ' '                      (0,+{col_sep},{col_rate_freq})
  print ' '                      (0,+{col_sep},{col_rate_per_unit})
  print $BEN1-RATE               (0,+{col_sep},{col_rate_currency})
  print '|'                      (0,+{col_sep},{col_liner})

!Column Heading line 2
  print $BEN1-ID                 (+1,1,{col_rate_id})
  print $BEN1-DATE               (0,+{col_sep},{col_eff_date})
  print $BEN1-DESCR              (0,+{col_sep},{col_descr})
  print $BEN741-RATE-TYPE        (0,+{col_sep},{col_rate_type})
  print $BEN741-RATE-FREQ        (0,+{col_sep},{col_rate_freq})
  print $BEN741-RT-PER-UNIT      (0,+{col_sep},{col_rate_per_unit})
  print $BEN741-CURRENCY         (0,+{col_sep},{col_rate_currency})
  print '|'                      (0,+{col_sep},{col_liner})
  print $BEN741-RT-LIMIT-CD      (0,+{col_sep},{col_rate_limit_cd})
  print $BEN741-LIMIT-VALUE      (0,+{col_sep},{col_limit_value})

!Column Heading line 3
  print '='            (+1,1,{col_rate_id})                    FILL
  print '='            (0,+{col_sep},{col_eff_date})           FILL
  print '='            (0,+{col_sep},{col_descr})              FILL
  print '='            (0,+{col_sep},{col_rate_type})          FILL
  print '='            (0,+{col_sep},{col_rate_freq})          FILL
  print '='            (0,+{col_sep},{col_rate_per_unit})      FILL
  print '='            (0,+{col_sep},{col_rate_currency})      FILL
  print '|'            (0,+{col_sep},{col_liner})
  print '='            (0,+{col_sep},{col_rate_limit_cd})      FILL
  print '='            (0,+{col_sep},{col_limit_value})        FILL

  let #CurRptLine = #CurRptLine + 3

End-Procedure

!***************************************
Begin-Procedure Process-Rate
!***************************************

  do Print-Rate-Heading

Begin-SELECT

R.RATE_TBL_ID              (+1,1,{col_rate_id})

R.EFFDT
  do Format-DateTime(&R.EFFDT, $out, {DEFDATE}, '','')
  print $out               (0,+{col_sep},{col_eff_date})

R.DESCR
  let $RateDescr = &R.DESCR
  do Get-Rate-Descr-Lang(&R.RATE_TBL_ID, &R.EFFDT, $RateDescr)
  print $RateDescr         (0,+{col_sep},{col_descr})

R.RATE_TYPE
  do Load-RateType-Info
  print $RateTypeDescr     (0,+{col_sep},{col_eff_date})

R.PAY_FREQUENCY
  let $Fieldname      = 'PAY_FREQUENCY'
  let $Fieldvalue     = rtrim(&R.PAY_FREQUENCY,' ')
  do Read-Translate-Table

  let $pay_freq = $Fieldvalue || '-' || $Xlatshortname
  print   $pay_freq         (0,+{col_sep},{col_rate_freq})

R.RATE_UNIT
  let $Fieldname      = 'RATE_UNIT'
  let $Fieldvalue     = rtrim(&R.RATE_UNIT,' ')
  do Read-Translate-Table
  print $Xlatlongname   (0,+{col_sep},{col_rate_per_unit})

R.CURRENCY_CD           (0,+{col_sep},{col_rate_currency})

  print '|'             (0,+{col_sep},{col_liner})

R.RATE_LIMIT_CD
  let $Fieldname      = 'RATE_LIMIT_CD'
  let $Fieldvalue     = rtrim(&R.RATE_LIMIT_CD,' ')
  do Read-Translate-Table
  let $rate_limit_cd = $Fieldvalue || '-' || $Xlatshortname
  print   $rate_limit_cd     (0,+{col_sep},{col_rate_limit_cd})

R.FLAT_AMT_LIMIT
R.PCT_RATE_LIMIT

  let #limit_value = 0.0000
  if &R.RATE_LIMIT_CD = 'F'
    let #limit_value = &R.FLAT_AMT_LIMIT
  end-if
  if &R.RATE_LIMIT_CD = 'P'
    let #limit_value = &R.PCT_RATE_LIMIT
  end-if
  print #limit_value    (0,+{col_sep},{col_limit_value})

  let #CurRptLine = #CurRptLine + 1
  do Process-Rate-Data

FROM PS_BN_RATE_TBL R
WHERE R.RATE_TBL_ID = $Rate_Id
  AND R.EFFDT =
       (SELECT MAX(R1.EFFDT)
        FROM PS_BN_RATE_TBL R1
        WHERE R1.RATE_TBL_ID = R.RATE_TBL_ID
        AND R1.EFFDT <= $AsOfDate)
End-Select

  if (#CurRptLine < {max_lines_per_page}-{min_lines_per_rate})
    print ''   (+2)
    let #CurRptLine = #CurRptLine + 2
  end-if

End-Procedure

!***************************************
Begin-Procedure Get-Rate-Descr-Lang($Rate_Id, $EffDt, :$Descr)
!***************************************

  if ($_PSOptions_Language_Cd <> $_curr_language_cd)

Begin-SELECT
R2.DESCR
  let $Descr = &R2.DESCR

FROM PS_BN_RATE_TBL_LNG R2
WHERE R2.RATE_TBL_ID = $Rate_Id
  AND R2.EFFDT = $EffDt
  AND R2.LANGUAGE_CD = $_curr_language_cd
End-Select

  end-if

End-Procedure

!***************************************
Begin-Procedure Load-RateType-Info
!***************************************

Begin-Select
RT.DESCRSHORT,
RT.BN_RATE_OR_PCT

  let $RateTypeDescr = &RT.DESCRSHORT
  do Get-Rate-Type-Descr-Lang(&R.RATE_TYPE, $RateTypeDescr)

FROM PS_BN_RATE_TYPE RT
WHERE RT.RATE_TYPE = &R.RATE_TYPE
End-Select

  Clear-Array Name=RateKeys
  let #RateKeyCnt = 0

Begin-Select
RK.FIELDNAME,
RK.BN_MATCH_OPER

  add 1 to #RateKeyCnt
  put &RK.FIELDNAME     into RateKeys(#RateKeyCnt) FLD_NAME
  put &RK.BN_MATCH_OPER into RateKeys(#RateKeyCnt) MATCH_OPER

FROM PS_BN_RTTYP_KEY RK
WHERE RK.RATE_TYPE = &R.RATE_TYPE
End-Select

End-Procedure

!***************************************
Begin-Procedure Get-Rate-Type-Descr-Lang($RateType, :$Descr)
!***************************************

  if ($_PSOptions_Language_Cd <> $_curr_language_cd)

Begin-SELECT
RT2.DESCRSHORT
  let $Descr = &RT2.DESCRSHORT

FROM PS_BN_RATETYPE_LNG RT2
WHERE RT2.RATE_TYPE = $RateType
  AND RT2.LANGUAGE_CD = $_curr_language_cd
End-Select

  end-if

End-Procedure

!***************************************
Begin-Procedure Print-Data-Heading
!***************************************

  if (&RT.BN_RATE_OR_PCT = '1')
    let $tax_heading = $BEN1-RATE
  else
    let $tax_heading = $BEN741-PCT
  end-if

  let $total_head = $BEN1-TOTAL    || ' ' || $tax_heading
  let $empl_head  = $BEN1-EMPLOYEE || ' ' || $tax_heading
  let $empr_head  = $BEN1-EMPLOYER || ' ' || $tax_heading
  let $btax_head  = $BEN741-B-TAX  || ' ' || $tax_heading
  let $atax_head  = $BEN741-A-TAX  || ' ' || $tax_heading
  let $ntax_head  = $BEN741-N-TAX  || ' ' || $tax_heading
  let $ttax_head  = $BEN741-T-TAX  || ' ' || $tax_heading
  let $ptax_head  = $BEN741-P-TAX

!Column Sub-Heading line 1
  let #OffSet = {col_key_start} - 2
  print ''               (+2,#OffSet,1)

  let #KeyNbr = 1
  while #KeyNbr <= 3

    let $KeyTitle = ''
    if (#KeyNbr <= #RateKeyCnt)
       get $FieldName from RateKeys(#KeyNbr) FLD_NAME
       get $MatchOper from RateKeys(#KeyNbr) MATCH_OPER
       do Find-Field-Info-By-Name($FieldName, #FieldRow)
       if (#FieldRow > 0)
          get $KeyLabel from KeyInfo(#FieldRow) SHORTNAME
          let $KeyTitle = rtrim($KeyLabel,' ') || ' (' || rtrim($MatchOper,' ') || ')'
       end-if
    end-if
    print $KeyTitle      (0,+{col_sep},{col_key})
    let #KeyNbr = #KeyNbr + 1
  end-while

  print '|'              (0,+{col_sep},{col_liner})
  print $total_head      (0,+{col_sep},{col_tot_cover_rate})
  print '|'              (0,+{col_sep},{col_liner})
  print $empl_head       (0,+{col_sep},{col_emplye_covrg_rate})
  print $empr_head       (0,+{col_sep},{col_emplyr_covrg_rate})
  print '|'              (0,+{col_sep},{col_liner})
  print $btax_head       (0,+{col_sep},{col_b_tax_rate})
  print $atax_head       (0,+{col_sep},{col_a_tax_rate})
  print $ntax_head       (0,+{col_sep},{col_n_tax_rate})
  print $ttax_head       (0,+{col_sep},{col_t_tax_rate})
  print '|'              (0,+{col_sep},{col_liner})
  print $ptax_head       (0,+{col_sep},{col_p_tax_rate})

  !Column Sub-Heading line 2
  print '='              (+1,{col_key_start},{col_key})         FILL
  print '='              (0,+{col_sep},{col_key})               FILL
  print '='              (0,+{col_sep},{col_key})               FILL
  print '|'              (0,+{col_sep},{col_liner})
  print '='              (0,+{col_sep},{col_tot_cover_rate})    FILL
  print '|'              (0,+{col_sep},{col_liner})
  print '='              (0,+{col_sep},{col_emplye_covrg_rate}) FILL
  print '='              (0,+{col_sep},{col_emplyr_covrg_rate}) FILL
  print '|'              (0,+{col_sep},{col_liner})
  print '='              (0,+{col_sep},{col_b_tax_rate})        FILL
  print '='              (0,+{col_sep},{col_a_tax_rate})        FILL
  print '='              (0,+{col_sep},{col_n_tax_rate})        FILL
  print '='              (0,+{col_sep},{col_t_tax_rate})        FILL
  print '|'              (0,+{col_sep},{col_liner})
  print '='              (0,+{col_sep},{col_p_tax_rate})        FILL

  let #CurRptLine = #CurRptLine + 3

End-Procedure

!*********************************
Begin-Procedure Process-Rate-Data
!*********************************

  do Print-Data-Heading

Begin-Select
D.RATE_TBL_ID
D.EFFDT
D.BN_RATE_KEY01

  if (#CurRptLine >= {max_lines_per_page})
    new-page
    do Print-Page-Heading
    do Print-Data-Heading
  end-if

  let $KeyVal = ''
  let #KeyNbr = 1
  do Find-Field-Info-By-KeyNbr(#KeyNbr, #RowNbr)
  if (#RowNbr > 0)
    get #IsNumeric from KeyInfo(#RowNbr) IS_NUMERIC
    get #DecPos    from KeyInfo(#RowNbr) DECIMALPOS
    if (#IsNumeric)
      let #KeyVal = to_number(&D.BN_RATE_KEY01)
      let $KeyVal = to_char(#KeyVal)
    else
      let $KeyVal = &D.BN_RATE_KEY01
    end-if
  end-if
  print $KeyVal               (+1,{col_key_start},{col_key})

D.BN_RATE_KEY02

  let $KeyVal = ''
  let #KeyNbr = 2
  do Find-Field-Info-By-KeyNbr(#KeyNbr, #RowNbr)
  if (#RowNbr > 0)
    get #IsNumeric from KeyInfo(#RowNbr) IS_NUMERIC
    get #DecPos    from KeyInfo(#RowNbr) DECIMALPOS
    if (#IsNumeric)
      let #KeyVal = to_number(&D.BN_RATE_KEY02)
      let $KeyVal = to_char(#KeyVal)
    else
      let $KeyVal = &D.BN_RATE_KEY02
    end-if
  end-if
  print $KeyVal               (0,+{col_sep},{col_key})

D.BN_RATE_KEY03

  let $KeyVal = ''
  let #KeyNbr = 3
  do Find-Field-Info-By-KeyNbr(#KeyNbr, #RowNbr)
  if (#RowNbr > 0)
    get #IsNumeric from KeyInfo(#RowNbr) IS_NUMERIC
    get #DecPos    from KeyInfo(#RowNbr) DECIMALPOS
    if (#IsNumeric)
      let #KeyVal = to_number(&D.BN_RATE_KEY03)
      let $KeyVal = to_char(#KeyVal)
    else
      let $KeyVal = &D.BN_RATE_KEY03
    end-if
  end-if
  print $KeyVal               (0,+{col_sep},{col_key})

  print '|'                   (0,+{col_sep},{col_liner})

D.BN_EMPL_RATE
  move &D.BN_EMPL_RATE to #emplrate
D.BN_EMPLR_RATE
   move &D.BN_EMPLR_RATE to #emprrate
D.BN_B_TAX_RATE
  move &D.BN_B_TAX_RATE to #btax
D.BN_A_TAX_RATE
  move &D.BN_A_TAX_RATE to #atax
D.BN_N_TAX_RATE
  move &D.BN_N_TAX_RATE to #ntax
D.BN_T_TAX_RATE
  move &D.BN_T_TAX_RATE to #ttax
D.BN_P_TAX_RATE
  move &D.BN_P_TAX_RATE to #ptax

  let #totalrate = #btax + #atax + #ntax + #ttax

  if (#totalrate = 0)
    let #totalrate = #emplrate + #emprrate
    print #totalrate       (0,+{col_sep},{col_tot_cover_rate})    edit 999999.99999
    print '|'              (0,+{col_sep},{col_liner})
    print #emplrate        (0,+{col_sep},{col_emplye_covrg_rate}) edit 9999999.99999
    print #emprrate        (0,+{col_sep},{col_emplyr_covrg_rate}) edit 9999999.99999
    print '|'              (0,+{col_sep},{col_liner})
    print ' '              (0,+{col_sep},{col_b_tax_rate})
    print ' '              (0,+{col_sep},{col_a_tax_rate})
    print ' '              (0,+{col_sep},{col_n_tax_rate})
    print ' '              (0,+{col_sep},{col_t_tax_rate})
  else
    print #totalrate       (0,+{col_sep},{col_tot_cover_rate}) edit 999999.99999
    print '|'              (0,+{col_sep},{col_liner})
    print ' '              (0,+{col_sep},{col_emplye_covrg_rate})
    print ' '              (0,+{col_sep},{col_emplyr_covrg_rate})
    print '|'              (0,+{col_sep},{col_liner})
    print #btax            (0,+{col_sep},{col_b_tax_rate}) edit 999999.99999
    print #atax            (0,+{col_sep},{col_a_tax_rate}) edit 999999.99999
    print #ntax            (0,+{col_sep},{col_n_tax_rate}) edit 999999.99999
    print #ttax            (0,+{col_sep},{col_t_tax_rate}) edit 999999.99999
  end-if

  print '|'              (0,+{col_sep},{col_liner})
  print #ptax            (0,+3,{col_p_tax_rate}) edit 999999.99999

  let #CurRptLine = #CurRptLine + 1

FROM PS_BN_RATE_DATA D
WHERE D.RATE_TBL_ID = $Rate_Id
AND   D.EFFDT =
       (SELECT MAX(D1.EFFDT)
        FROM PS_BN_RATE_DATA D1
        WHERE D1.RATE_TBL_ID = D.RATE_TBL_ID
        AND D1.EFFDT <= $AsOfDate)
ORDER BY D.RATE_TBL_ID, D.EFFDT,
         D.BN_RATE_KEY01, D.BN_RATE_KEY02, D.BN_RATE_KEY03
End-Select

End-Procedure

!*************************************
Begin-Procedure Find-Field-Info-By-KeyNbr(#KeyNbr, :#RowNbr)
!*************************************

  let #RowNbr = 0

  if (#KeyNbr <= #_RateKeyCnt)
    get $FieldName from RateKeys(#KeyNbr) FLD_NAME
    do Find-Field-Info-By-Name($FieldName, #RowNbr)
  end-if

End-Procedure

!*************************************
Begin-Procedure Find-Field-Info-By-Name($FieldName, :#RowNbr)
!*************************************

  let #RowNbr = 1
  while #RowNbr <= #_KeyFldCnt

    get $TestField from KeyInfo(#RowNbr) FLD_NAME
    if ($TestField = $FieldName)
      break
    end-if
    let #RowNbr = #RowNbr + 1
  end-while

  if (#RowNbr > #_KeyFldCnt)
    let #RowNbr = 0
  end-if

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'readxlat.sqc'  !get translates for fieldname, value

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!******************************* End Of Report *******************************
