!***********************************************************************
! BEN721: Benefits Limit Table Dump
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:52:42                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup

#define  MAX_LINES   56     !Maximum print lines for landscape mode

#define col_program  7
#define col_limit    5
#define col_date     10
#define col_descr    30
#define col_accum    11
#define col_maxern   11
#define col_maxyr    11
#define col_maxpct   11
#define col_rollovr  8

#define 403b_start   10
#define col_svcyrs   8
#define col_altsvc   7
#define col_altaddl  11
#define col_altmax   11
#define col_402g     7
#define col_elect    5
#define col_yrcap    11
#define col_anncap   11
#define col_maxcap   11
#define col_457      7
#define col_catch_up 12

#define col_dedsub   29
#define col_dedincr  30
#define col_dedred   29
#define col_dedcoord 29
#define ded_start    12
#define col_plantyp  4
#define col_benplan  7
#define col_deduct   6
#define ded_sep      6
#define ded_sep2     7

#define col_sep      2
#define col_sep2     10

#define array_max    150

!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number
  do StdAPI-Init

  let $ReportID    = 'BEN721'
  do Get-Report-Language
  move $BEN721-ReportTitle TO $ReportTitle
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  let #CurRptLine    = {MAX_LINES} + 1
  let $FirstPageFlag = 'YES'

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  do Ask-As-Of-Date
  !We will need to manipulate $AsOfDate to control other std procedures such
  !as Read-Translate-Table.
  !Therefore we will copy this into $UserAsOfDate for safekeeping...
  let $UserAsOfDate = $AsOfDate

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-As-Of-Date

  let $UserAsOfDate = $AsOfDate

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BEN721 program IDS
do Init_Report_Translation($ReportID, $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BEN721', 'REPORT_TITLE',       $BEN721-ReportTitle,         #CW)
do Get_Field_Information ('BEN721', '402G',               $BEN721-402g,                #CW)
do Get_Field_Information ('BEN721', '403B',               $BEN721-403b,                #CW)
do Get_Field_Information ('BEN721', '457',                $BEN721-457,                 #CW)
do Get_Field_Information ('BEN721', 'ACCUMULATOR',        $BEN721-Accum,               #CW)
do Get_Field_Information ('BEN721', 'ALLOWED',            $BEN721-Allow,               #CW)
do Get_Field_Information ('BEN721', 'ALT',                $BEN721-Alt,                 #CW)
do Get_Field_Information ('BEN721', 'ALT_ADDL',           $BEN721-AltAddl,             #CW)
do Get_Field_Information ('BEN721', 'ALT_MAX',            $BEN721-AltMax,              #CW)
do Get_Field_Information ('BEN721', 'ANNUAL_CAP',         $BEN721-AnnlCap,             #CW)
do Get_Field_Information ('BEN721', 'BASE',               $BEN721-Base,                #CW)
do Get_Field_Information ('BEN721', 'CATCH_UP_CAP',       $BEN721-CatchUp,             #CW)
do Get_Field_Information ('BEN721', 'DED_COORD',          $BEN721-DedCoord,            #CW)
do Get_Field_Information ('BEN721', '403B',               $BEN721-403b,                #CW)
do Get_Field_Information ('BEN721', 'DED_INCR',           $BEN721-DedIncr,             #CW)
do Get_Field_Information ('BEN721', 'DED_RED',            $BEN721-DedRed,              #CW)
do Get_Field_Information ('BEN721', 'DED_SUBJECT',        $BEN721-DedSubject,          #CW)
do Get_Field_Information ('BEN721', 'EARNINGS',           $BEN721-Earn,                #CW)
do Get_Field_Information ('BEN721', 'EXCLUSION',          $BEN721-Exclude,             #CW)
do Get_Field_Information ('BEN721', 'EXPAND',             $BEN721-Expand,              #CW)
do Get_Field_Information ('BEN721', 'EXPANSION',          $BEN721-Expansion,           #CW)
do Get_Field_Information ('BEN721', 'LIMIT',              $BEN721-Limit,               #CW)
do Get_Field_Information ('BEN721', 'LIMIT_DEF_AS_OF',    $BEN721-LimitAsOf,           #CW)
do Get_Field_Information ('BEN721', 'MAX_CAP',            $BEN721-MaxCap,              #CW)
do Get_Field_Information ('BEN721', 'MAX_EARN',           $BEN721-MaxEarn,             #CW)
do Get_Field_Information ('BEN721', 'MAX_PCT',            $BEN721-MaxPct,              #CW)
do Get_Field_Information ('BEN721', 'MAX_YRLY',           $BEN721-MaxYrly,             #CW)
do Get_Field_Information ('BEN721', 'PER_YR_CAP',         $BEN721-PerYrCap,            #CW)
do Get_Field_Information ('BEN721', 'PRORATED',           $BEN721-Prorate,             #CW)
do Get_Field_Information ('BEN721', 'ROLLOVER',           $BEN721-RollOver,            #CW)
do Get_Field_Information ('BEN721', 'SPECIAL',            $BEN721-Special,             #CW)
do Get_Field_Information ('BEN721', 'SVC_YRS',            $BEN721-SvcYrs,              #CW)

do Get_Field_Information ('BEN1', 'ANNUAL',            $BEN1-ANNUAL,     #CW)
do Get_Field_Information ('BEN1', 'BENEFIT',           $BEN1-BENEFIT,    #CW)
do Get_Field_Information ('BEN1', 'CLASS',             $BEN1-CLASS,      #CW)
do Get_Field_Information ('BEN1', 'CODE',              $BEN1-CODE,       #CW)
do Get_Field_Information ('BEN1', 'DATE',              $BEN1-DATE,       #CW)
do Get_Field_Information ('BEN1', 'DEDCTON',           $BEN1-DEDUCTION,  #CW)
do Get_Field_Information ('BEN1', 'DEDUCT',            $BEN1-DEDUCT,     #CW)
do Get_Field_Information ('BEN1', 'DESCR',             $BEN1-DESCR,      #CW)
do Get_Field_Information ('BEN1', 'ELECT',             $BEN1-ELECT,      #CW)
do Get_Field_Information ('BEN1', 'EFFECTIVE',         $BEN1-EFFECTIVE,  #CW)
do Get_Field_Information ('BEN1', 'PLAN',              $BEN1-PLAN,       #CW)
do Get_Field_Information ('BEN1', 'PROGRAM',           $BEN1-PROGRAM,    #CW)
do Get_Field_Information ('BEN1', 'TYPE',              $BEN1-TYPE,       #CW)


End-Procedure


!***************************************
Begin-Procedure Print-Main-Heading
!***************************************

  if ($FirstPageFlag <> 'YES')
    new-page
  end-if

  move $BEN721-ReportTitle to $ReportTitle
#Include 'stdhdgtr.sqc'     !Standard Report header

! column heading line 1
  print $BEN721-LimitAsOf                   (+2,1)
  do Format-DateTime($UserAsOfDate, $OutDt, {DEFDATE}, '', '')
  print $OutDt                              (0,+1)

  let #CurRptLine = 7

End-Procedure

!***************************************
Begin-Procedure Print-Limits-Heading
!***************************************

! column heading line 2
  print $BEN721-Limit                       (+1,1,{col_limit})
  print $BEN1-EFFECTIVE                     (0,+{col_sep},{col_date})
  print ' '                                 (0,+{col_sep},{col_descr})
  print $BEN721-Special                     (0,+{col_sep},{col_accum})
  print $BEN721-MaxEarn                     (0,+{col_sep},{col_maxern})
  print $BEN721-MaxYRly                     (0,+{col_sep},{col_maxyr})
  print $BEN721-MaxPct                      (0,+{col_sep},{col_maxpct})
  print $BEN721-Rollover                    (0,+{col_sep},{col_rollovr})

! column heading line 3
  print $BEN1-TYPE                          (+1,1,{col_limit})
  print $BEN1-DATE                          (0,+{col_sep},{col_date})
  print $BEN1-DESCR                         (0,+{col_sep},{col_descr})
  print $BEN721-Accum                       (0,+{col_sep},{col_accum})
  print $BEN721-Base                        (0,+{col_sep},{col_maxern})
  print $BEN1-Deduction                     (0,+{col_sep},{col_maxyr})
  print $BEN721-Earn                        (0,+{col_sep},{col_maxpct})
  print $BEN721-Allow                       (0,+{col_sep},{col_rollovr})

! column heading line 4

  print '='                                 (+1,1,{col_limit})           Fill
  print '='                                 (0,+{col_sep},{col_date})    Fill
  print '='                                 (0,+{col_sep},{col_descr})   Fill
  print '='                                 (0,+{col_sep},{col_accum})   Fill
  print '='                                 (0,+{col_sep},{col_maxern})  Fill
  print '='                                 (0,+{col_sep},{col_maxyr})   Fill
  print '='                                 (0,+{col_sep},{col_maxpct})  Fill
  print '='                                 (0,+{col_sep},{col_rollovr}) Fill

  add 4 to #CurRptLine
  let $FirstPageFlag    = 'NO'

End-Procedure

!***************************************
Begin-Procedure Print-403B-Heading
!***************************************

  print $BEN721-403b                        (+2,2)
  print $BEN721-SvcYrs                      (0,+1,{col_svcyrs})
  print $BEN721-Alt                         (0,+{col_sep},{col_altsvc})
  print $BEN721-AltAddl                     (0,+{col_sep},{col_altaddl})
  print $BEN721-AltMax                      (0,+{col_sep},{col_altmax})
  print $BEN721-402g                        (0,+{col_sep})
  print $BEN1-ELECT                         (0,+1,{col_elect})
  print $BEN721-PerYrCap                    (0,+{col_sep},{col_yrcap})
  print $BEN721-AnnlCap                     (0,+{col_sep},{col_anncap})
  print $BEN721-MaxCap                      (0,+{col_sep},{col_maxcap})
  print $BEN721-457                         (0,+{col_sep})
  print $BEN1-ANNUAL                        (0,+1,{col_catch_up})

  print $BEN721-Prorate                     (+1,{403b_start},{col_svcyrs})
  print $BEN721-SvcYrs                      (0,+{col_sep},{col_altsvc})
  print $BEN721-Exclude                     (0,+{col_sep},{col_altaddl})
  print $BEN721-Exclude                     (0,+{col_sep},{col_altmax})
  print $BEN721-Expand                      (0,+{col_sep2},{col_elect})
  print $BEN721-Expansion                   (0,+{col_sep},{col_yrcap})
  print $BEN721-Expansion                   (0,+{col_sep},{col_anncap})
  print $BEN721-Expansion                   (0,+{col_sep},{col_maxcap})
  print $BEN721-CatchUp                     (0,+{col_457},{col_catch_up})

  print '='                                 (+1,{403b_start},{col_svcyrs})            Fill
  print '='                                 (0,+{col_sep},{col_altsvc})               Fill
  print '='                                 (0,+{col_sep},{col_altaddl})              Fill
  print '='                                 (0,+{col_sep},{col_altmax})               Fill
  print '='                                 (0,+{col_sep2},{col_elect})               Fill
  print '='                                 (0,+{col_sep},{col_yrcap})                Fill
  print '='                                 (0,+{col_sep},{col_anncap})               Fill
  print '='                                 (0,+{col_sep},{col_maxcap})               Fill
  print '='                                 (0,+{col_457},{col_catch_up})             Fill

  add 4 to #CurRptLine

End-Procedure

!***************************************
Begin-Procedure Print-Deduction-Heading
!***************************************

! col heading - line 1
  print $BEN721-DedSubject                  (+2,{ded_start},{col_dedsub})
  print $BEN721-DedIncr                     (0,+{ded_sep},{col_dedincr})
  print $BEN721-DedRed                      (0,+{ded_sep},{col_dedred})
!  print $BEN721-DedCoord                    (0,+{ded_sep},{col_dedcoord})

! col heading - line 2
  print '-'                                 (+1,{ded_start},{col_dedsub})     Fill
  print '-'                                 (0,+{ded_sep},{col_dedincr})      Fill
  print '-'                                 (0,+{ded_sep},{col_dedred})       Fill
!  print '-'                                 (0,+{ded_sep},{col_dedcoord})     Fill

! col heading - line 3
  print $BEN1-PLAN                          (+1,{ded_start},{col_plantyp})
  print $BEN1-BENEFIT                       (0,+{col_sep},{col_benplan})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
  print $BEN1-PLAN                          (0,+{ded_sep},{col_plantyp})
  print $BEN1-BENEFIT                       (0,+{col_sep},{col_benplan})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
  print $BEN1-PLAN                          (0,+{ded_sep2},{col_plantyp})
  print $BEN1-BENEFIT                       (0,+{col_sep},{col_benplan})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
!  print $BEN1-PLAN                          (0,+{ded_sep},{col_plantyp})
!  print $BEN1-BENEFIT                       (0,+{col_sep},{col_benplan})
!  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})
!  print $BEN1-DEDUCT                        (0,+{col_sep},{col_deduct})

! col heading - line 4
  print $BEN1-TYPE                          (+1,{ded_start},{col_plantyp})
  print $BEN1-PLAN                          (0,+{col_sep},{col_benplan})
  print $BEN1-CODE                          (0,+{col_sep},{col_deduct})
  print $BEN1-CLASS                         (0,+{col_sep},{col_deduct})
  print $BEN1-TYPE                          (0,+{ded_sep},{col_plantyp})
  print $BEN1-PLAN                          (0,+{col_sep},{col_benplan})
  print $BEN1-CODE                          (0,+{col_sep},{col_deduct})
  print $BEN1-CLASS                         (0,+{col_sep},{col_deduct})
  print $BEN1-TYPE                          (0,+{ded_sep2},{col_plantyp})
  print $BEN1-PLAN                          (0,+{col_sep},{col_benplan})
  print $BEN1-CODE                          (0,+{col_sep},{col_deduct})
  print $BEN1-CLASS                         (0,+{col_sep},{col_deduct})
!  print $BEN1-TYPE                          (0,+{ded_sep},{col_plantyp})
!  print $BEN1-PLAN                          (0,+{col_sep},{col_benplan})
!  print $BEN1-CODE                          (0,+{col_sep},{col_deduct})
!  print $BEN1-CLASS                         (0,+{col_sep},{col_deduct})

! col heading - line 5
  print '='                                 (+1,{ded_start},{col_plantyp}) Fill
  print '='                                 (0,+{col_sep},{col_benplan})   Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
  print '='                                 (0,+{ded_sep},{col_plantyp})   Fill
  print '='                                 (0,+{col_sep},{col_benplan})   Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
  print '='                                 (0,+{ded_sep2},{col_plantyp})  Fill
  print '='                                 (0,+{col_sep},{col_benplan})   Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
  print '='                                 (0,+{col_sep},{col_deduct})    Fill
!  print '='                                 (0,+{ded_sep},{col_plantyp})   Fill
!  print '='                                 (0,+{col_sep},{col_benplan})   Fill
!  print '='                                 (0,+{col_sep},{col_deduct})    Fill
!  print '='                                 (0,+{col_sep},{col_deduct})    Fill

add 6 to #CurRptLine

End-Procedure


!***************************************
Begin-Procedure Process-Main
!***************************************

let $array_maxed = 'N'
create-array name=deduction_prt size={array_max}
      field=field1:char=''
      field=field2:char=''
      field=field3:char=''
      field=field4:char=''
      field=field5:char=''
      field=field6:char=''
      field=field7:char=''
      field=field8:char=''
      field=field9:char=''
      field=field10:char=''
      field=field11:char=''
      field=field12:char=''
      field=field13:char=''
      field=field14:char=''
      field=field15:char=''
      field=field16:char=''
display $UserAsOfDate
Begin-Select

L1.LIMIT_TYPE
L1.EFFDT
  do Format-DateTime(&L1.EFFDT, $LimitEffDt, {DEFDATE}, '', '')
  !This sets the effective date for fetching from PSXLATITEM and other
  !supporting tables...
  let $AsOfDate = &L1.EFFDT
L1.DESCR
L1.ERNCD_SPCL
L1.MAX_BENEF_BASE
  do Format-Number(&L1.MAX_BENEF_BASE, $MaxBenBase, '99999999.99')
L1.DED_YTD_MAX
  do Format-Number(&L1.DED_YTD_MAX, $DedYtdMax, '99999999.99')
L1.PCT_OF_SALARY
  do Format-Number(&L1.PCT_OF_SALARY, $PctOfSalary, '999999.999')
L1.ROLLOVER_ALLOWED
L1.SERVICE_403B_PRORT
  move 'SERVICE_403B_PRORT'  to $FieldName
  move &L1.SERVICE_403B_PRORT to $FieldValue
  do Read-Translate-Table
  let $SvcPrort = RTRIM($XlatShortName, ' ')
L1.ALTA_SVC_YRS
L1.ALTB_ADDL_EXCL
  do Format-Number(&L1.ALTB_ADDL_EXCL, $AltAddlExcl, '99999999.99')
L1.ALTB_MAX_ADDL
  do Format-Number(&L1.ALTB_MAX_ADDL, $AltMaxExcl, '99999999.99')
L1.ALT_402G_ELECTION
  move 'ALT_402G_ELECTION'  to $FieldName
  move &L1.ALT_402G_ELECTION to $FieldValue
  do Read-Translate-Table
  let $402gElect = RTRIM($XlatShortName, ' ')
L1.PER_YEAR_EXPN
  do Format-Number(&L1.PER_YEAR_EXPN, $YrCapExp, '99999999.99')
L1.ANNL_CAP_EXPN
  do Format-Number(&L1.ANNL_CAP_EXPN, $AnnCapExp, '99999999.99')
L1.MAX_CAP_EXPN
  do Format-Number(&L1.MAX_CAP_EXPN, $MaxCapExp, '99999999.99')
L1.MAX_457_CATCH_UP
  do Format-Number(&L1.MAX_457_CATCH_UP, $457CatchUp, '99999999.99')

  do Print-Limit-Info

  if RTRIM(&L1.LIMIT_TYPE,' ') = '403' or
     RTRIM(&L1.LIMIT_TYPE,' ') = '457'
     do Print-403b-Info
  end-if

  clear-array name=deduction_prt

  do Process-Deductions-To-Limit
  do Process-Deductions-Increase
  do Process-Deductions-Reduce

  ! New functionality for Coordinating Deductions was added in release 8.3
  ! that was no longer necessary due to legislative changes.
  ! The new table was kept, but cannot be populated via the online Limit Table setup.
  ! The following procedure was commented out to prevent this data from
  ! printing on the report.
  ! do Process-Deductions-Coordinate

  do Print-Deduction-Info

FROM  PS_LIMIT_TBL L1

WHERE L1.EFFDT      = (SELECT MAX(L1A.EFFDT)
                       FROM PS_LIMIT_TBL L1A
                      WHERE L1A.LIMIT_TYPE = L1.LIMIT_TYPE
                        AND L1A.EFFDT <= $UserAsOfDate)

ORDER BY L1.LIMIT_TYPE ASC


End-Select

  if $array_maxed = 'Y'
    display 'deduction_prt array limit has been reached'
  end-if

End-Procedure


!***************************************
Begin-Procedure Print-Limit-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES}-12)
    do Print-Main-Heading
  end-if
  do Print-Limits-Heading

  print &L1.LIMIT_TYPE                      (+1,1,{col_limit})
  print $LimitEffDt                         (0,+{col_sep},{col_date})
  print &L1.DESCR                           (0,+{col_sep},{col_descr})
  print &L1.ERNCD_SPCL                      (0,+{col_sep},{col_accum})
  print $MaxBenBase                         (0,+{col_sep},{col_maxern})
  print $DedYtdMax                          (0,+{col_sep},{col_maxyr})
  print $PctOfSalary                        (0,+{col_sep},{col_maxpct})
  print &L1.ROLLOVER_ALLOWED                (0,+{col_sep},{col_rollovr})

  add 1 to #CurRptLine

End-Procedure

!***************************************
Begin-Procedure Print-403b-Info
!***************************************

  if (#CurRptLine >= {MAX_LINES}-5)
    do Print-Main-Heading
  end-if
  do Print-403b-Heading

  print $SvcPrort                           (+1,{403b_start},{col_svcyrs})
  print &L1.ALTA_SVC_YRS                    (0,+{col_sep},{col_altsvc})
  print $AltAddlExcl                        (0,+{col_sep},{col_altaddl})
  print $AltMaxExcl                         (0,+{col_sep},{col_altmax})
  print $402gElect                          (0,+{col_sep2},{col_elect})
  print $YrCapExp                           (0,+{col_sep},{col_yrcap})
  print $AnnCapExp                          (0,+{col_sep},{col_anncap})
  print $MaxCapExp                          (0,+{col_sep},{col_maxcap})
  print $457CatchUp                         (0,+{col_457},{col_catch_up})

  add 1 to #CurRptLine

End-Procedure


!******************************************
Begin-Procedure Process-Deductions-To-Limit
!******************************************

let #ded_cnt = 0

Begin-Select

L2.PLAN_TYPE
L2.BENEFIT_PLAN
L2.DEDCD
L2.DED_CLASS

   if #MaxDedCnt <= {array_max}
     put &L2.PLAN_TYPE &L2.BENEFIT_PLAN &L2.DEDCD &L2.DED_CLASS into deduction_prt(#ded_cnt) -
         field1 field2 field3 field4
     let #ded_cnt = #ded_cnt + 1
   else
     let $array_maxed = 'Y'
   end-if

FROM PS_LIMIT_INCLD_TBL L2
WHERE L2.LIMIT_TYPE      = &L1.LIMIT_TYPE
  AND L2.EFFDT           = &L1.EFFDT

End-Select

let #MaxDedCnt = #ded_cnt

End-Procedure


!******************************************
Begin-Procedure Process-Deductions-Increase
!******************************************

let #ded_cnt = 0

Begin-Select

L3.PLAN_TYPE
L3.BENEFIT_PLAN
L3.DEDCD
L3.DED_CLASS

   if #MaxDedCnt <= {array_max}
     put &L3.PLAN_TYPE &L3.BENEFIT_PLAN &L3.DEDCD &L3.DED_CLASS into deduction_prt(#ded_cnt) -
         field5 field6 field7 field8
     let #ded_cnt = #ded_cnt + 1
   else
     let $array_maxed = 'Y'
   end-if

FROM PS_LIMIT_IMPIN_TBL L3
WHERE L3.LIMIT_TYPE      = &L1.LIMIT_TYPE
  AND L3.EFFDT           = &L1.EFFDT

End-Select

if #ded_cnt > #MaxDedCnt
  let #MaxDedCnt = #ded_cnt
end-if

End-Procedure

!******************************************
Begin-Procedure Process-Deductions-Reduce
!******************************************

let #ded_cnt = 0

Begin-Select

L4.PLAN_TYPE
L4.BENEFIT_PLAN
L4.DEDCD
L4.DED_CLASS

   if #MaxDedCnt <= {array_max}
     put &L4.PLAN_TYPE &L4.BENEFIT_PLAN &L4.DEDCD &L4.DED_CLASS into deduction_prt(#ded_cnt) -
         field9 field10 field11 field12
     let #ded_cnt = #ded_cnt + 1
   else
     let $array_maxed = 'Y'
   end-if

FROM PS_LIMIT_EXCLD_TBL L4
WHERE L4.LIMIT_TYPE      = &L1.LIMIT_TYPE
  AND L4.EFFDT           = &L1.EFFDT

End-Select

if #ded_cnt > #MaxDedCnt
  let #MaxDedCnt = #ded_cnt
end-if

End-Procedure

!********************************************
Begin-Procedure Process-Deductions-Coordinate
!********************************************

let #ded_cnt = 0

Begin-Select

L5.PLAN_TYPE
L5.BENEFIT_PLAN
L5.DEDCD
L5.DED_CLASS

   put &L5.PLAN_TYPE &L5.BENEFIT_PLAN &L5.DEDCD &L5.DED_CLASS into deduction_prt(#ded_cnt) -
       field13 field14 field15 field16
   let #ded_cnt = #ded_cnt + 1

FROM PS_LIMIT_COORD_TBL L5
WHERE L5.LIMIT_TYPE      = &L1.LIMIT_TYPE
  AND L5.EFFDT           = &L1.EFFDT

End-Select

if #ded_cnt > #MaxDedCnt
  let #MaxDedCnt = #ded_cnt
end-if

End-Procedure

!******************************************
Begin-Procedure Print-Deduction-Info
!******************************************

  let #ded_cnt = 0
  let $PrtDedHdr = 'Y'

  While #ded_cnt <= #MaxDedCnt

     if (#CurRptLine >= {MAX_LINES}-8)
       do Print-Main-Heading
       let $PrtDedHdr = 'Y'
     end-if

     if $PrtDedHdr = 'Y'
       do Print-Deduction-Heading
     end-if

     get $field1 $field2 $field3 $field4 $field5 $field6 $field7 $field8 $field9 $field10 $field11 $field12 -
         $field13 $field14 $field15 $field16 from deduction_prt(#ded_cnt)

     print $field1                          (+1,{ded_start},{col_plantyp})
     print $field2                          (0,+{col_sep},{col_benplan})
     print $field3                          (0,+{col_sep},{col_deduct})
     print $field4                          (0,+{col_sep},{col_deduct})
     print $field5                          (0,+{ded_sep},{col_plantyp})
     print $field6                          (0,+{col_sep},{col_benplan})
     print $field7                          (0,+{col_sep},{col_deduct})
     print $field8                          (0,+{col_sep},{col_deduct})
     print $field9                          (0,+{ded_sep2},{col_plantyp})
     print $field10                         (0,+{col_sep},{col_benplan})
     print $field11                         (0,+{col_sep},{col_deduct})
     print $field12                         (0,+{col_sep},{col_deduct})
     ! print $field13                         (0,+{ded_sep},{col_plantyp})
     ! print $field14                         (0,+{col_sep},{col_benplan})
     ! print $field15                         (0,+{col_sep},{col_deduct})
     ! print $field16                         (0,+{col_sep},{col_deduct})

     let #ded_cnt = #ded_cnt + 1
     let $PrtDedHdr = 'N'
     add 1 to #CurRptLine

  End-While

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'reset1.sqc'    !Reset printer procedure
#Include 'readxlat.sqc'  !Read the Translate Table
#Include 'getbennm.sqc'  !Get-Benefit-Name  procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getpgmnm.sqc'  !Get-Benefit-Program-Lang procedure
#Include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!****************************** End Of Report *******************************

