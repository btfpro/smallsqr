!*********************************************
! #4082 Related Lang SQC Generator
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:25:27                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

#define HR 'HRAPP','HRAPPS','HRLARGE'              ! Human Resources          ! HRrellang.sqc
#define BN 'BNAPP','BNLARGE'                       ! Benefits                 ! BNrellang.sqc
#define FS 'FSAPP'                                 ! Financials               ! FSrellang.sqc
#define FS 'GPAPP'                                 ! Global Payroll           ! FSrellang.sqc
#define TL 'TLALL','TLAPP','TLLARGE'               ! Time and Labour          ! TLrellang.sqc
#define GI 'GI','GIAPP'                            ! General Ledger           ! GIrellang.sqc
#define PA 'PAAPP','PALARGE'                       ! Pension Administration   ! PArellang.sqc
#define PT 'PSIMAGE','PTAPP','PTPRC','PTTBL'       ! People Tools             ! PTrellang.sqc
#define HT 'HTAPP'                                 ! ???                      ! HTrellang.sqc
#define PY 'PYAPP','PYLARGE'                       ! ???                      ! PYrellang.sqc
#define PY 'STAPP','STLARGE'                       ! ???                      ! PYrellang.sqc
#define BD 'BDAPP'                                 ! ???                      ! BDrellang.sqc
#define PI 'PIAPP','PILARGE'                       ! ???                      ! PIrellang.sqc

! Records in other DDLSpaces will be placed in the file XXrellang.sqc

#define SS_DATE      $Date
#define SS_REVISION  $Revision
#define SS_WORKFILE  $Workfile

!***********************************************************************

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 6
  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
        !No Prompt
  end-if
end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
end-procedure

!***********************************************************************
!  Main: Creates the Monthly Workforce Report
!***********************************************************************

begin-procedure Process-Main

let $PrevRecName = ''

encode '<33>' into $Comment
encode '<123>' into $BeginS
encode '<125>' into $EndS
encode '<35>' into $Dieze

   create-array name=RecDefn size=50
      field=FieldName:char
      field=FieldTrimmed:char
      field=Type:number                   !0: char / 1: number
      field=IsKey:number                  !0: It is not a key / 1: It is a key

   move 0 to #i

!*****************************************************************
! Create the RELLANG.SQC in the standard output directory
!*****************************************************************
let $FileName = '{FILEPREFIX}' || 'RELLANG.SQC' || '{FILESUFFIX}'
OPEN $FileName as 1 for-writing record = 1024:vary

let $Line = $Comment || '***********************************************************************'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || '               Confidentiality Information:                           *'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || ' This module is the confidential and proprietary information of       *'
WRITE 1 FROM $Line
let $Line = $Comment || ' PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *'
WRITE 1 FROM $Line
let $Line = $Comment || ' in any form, by any means, in whole or in part, nor is it to be used *'
WRITE 1 FROM $Line
let $Line = $Comment || ' for any purpose other than that for which it is expressly provided   *'
WRITE 1 FROM $Line
let $Line = $Comment || ' without the written permission of PeopleSoft.                        *'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || ' Copyright (c) 1988-2000 PeopleSoft, Inc. All Rights Reserved         *'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || '***********************************************************************'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || '      {SS_DATE}::                       $                                       *'
WRITE 1 FROM $Line
let $Line = $Comment || '  {SS_REVISION}::                       $                                       *'
WRITE 1 FROM $Line
let $Line = $Comment || '  {SS_WORKFILE}:: rellang.sqc           $                                       *'
WRITE 1 FROM $Line
let $Line = $Comment || '                                                                      *'
WRITE 1 FROM $Line
let $Line = $Comment || '***********************************************************************'
WRITE 1 FROM $Line
let $Line = $Comment || ' THIS FILE IS GENERATED AUTOMATICALLY BY SQCLGGEN.SQR                 *'
WRITE 1 FROM $Line
let $Line = $Comment || '***********************************************************************'

WRITE 1 FROM ''

let $Line = $Dieze || 'include ''lngutil.sqc'''
WRITE 1 FROM $Line

let #FieldType = 0

BEGIN-SELECT
B.RECNAME                                      &B.RECNAME
B.RELLANGRECNAME                               &B.RELLANGRECNAME
A.FIELDNAME                                    &A.FIELDNAME

   let $RecName = rtrim(&B.RECNAME, ' ')
   let $FieldName = rtrim(&A.FIELDNAME, ' ')

   if $RecName <> $PrevRecName
      display '.' noline
        let $RelLangRecName = rtrim(&B.RELLANGRECNAME, ' ')
      if $PrevRecName != ''
         do Get-Attributes
         do WriteToFile
      end-if
      let $PrevRecName = $RecName
      let $PrevRelLangRecName = $RelLangRecName
      move 0 to #i
   end-if

   if $FieldName <> 'LANGUAGE_CD'
      put &A.FIELDNAME into RecDefn(#i) FieldName
      put $FieldName into RecDefn(#i) FieldTrimmed
      put 1 into RecDefn(#i) IsKey

      do Get-Field-Type
      put #FieldType into RecDefn(#i) Type

      Add 1 to #i
   end-if

FROM PSRECFIELD A
    ,PSRECDEFN B
WHERE A.RECNAME = B.RELLANGRECNAME
#ifdef DB2ALL
   AND (A.USEEDIT - INTEGER(A.USEEDIT/2)*2) = 1
#else
   #ifdef ORACLE
      AND (A.USEEDIT - TRUNC(A.USEEDIT/2, 0)*2) = 1
   #else
      #ifdef INFORMIX
         AND (ROUND(A.USEEDIT/2, 0)*2 - A.USEEDIT) = 1
      #else
         AND (A.USEEDIT - ROUND(A.USEEDIT/2, 0)*2) = 1
      #endif
   #endif
#endif
ORDER BY B.RECNAME, B.RELLANGRECNAME, A.FIELDNAME
END-SELECT

   if $PrevRecName != ''
      do Get-Attributes
      do WriteToFile
   end-if

CLOSE 1

!*****************************************************************
! Create an HTML File, called RELLANG.htm
! This HTML file allows the user to view the RELLANG.SQC
! from the Report Manager/Process Monitor.
! HTML files are displayed from the output directory.
! The file RELLANG.htm contains a link to the RELLANG.SQC,
! so that the RELLANG.SQC can be viewed as well.
!*****************************************************************
let $FileName1 = '{FILEPREFIX}' || 'RELLANG.htm' || '{FILESUFFIX}'
open $FileName1 as 11 for-writing record=1024:vary
let $HtmlContent = '<HTML><HEAD><TITLE>' || 'RELLANG.SQC' || '</TITLE></HEAD><BODY>' || 
                   ' <A HREF=' || 'RELLANG.SQC' || '>' || 'RELLANG.SQC' || '</A>' || ' </BODY></HTML>'
write 11 from $HtmlContent
CLOSE 11

end-procedure

!*********************************************
!
!*********************************************

begin-procedure Get-Attributes

BEGIN-SELECT
C.FIELDNAME                              &C.FIELDNAME
C.SUBRECORD                              &C.SUBRECORD

   let $CFieldName = rtrim(&C.FIELDNAME, ' ')

   if $CFieldName <> 'LANGUAGE_CD'
      if &C.SUBRECORD <> 'Y'
         put &C.FIELDNAME into RecDefn(#i) FieldName
         put $CFieldName into RecDefn(#i) FieldTrimmed
         put 0 into RecDefn(#i) IsKey

         do Get-Field-Type
         put #FieldType into RecDefn(#i) Type

         Add 1 to #i
      else
         do Get-SubRecord
      end-if
   end-if

FROM PSRECFIELD C
WHERE C.RECNAME = $PrevRelLangRecName
#ifdef DB2ALL
   AND (C.USEEDIT - INTEGER(C.USEEDIT/2)*2) = 0
#else
   #ifdef ORACLE
      AND (C.USEEDIT - TRUNC(C.USEEDIT/2, 0)*2) = 0
   #else
      #ifdef INFORMIX
         AND (ROUND(C.USEEDIT/2, 0)*2 - C.USEEDIT) = 0
      #else
         AND (C.USEEDIT - ROUND(C.USEEDIT/2, 0)*2) = 0
      #endif
   #endif
#endif
ORDER BY C.FIELDNAME
END-SELECT

end-procedure Get-Attributes

!*********************************************
!
!*********************************************

begin-procedure Get-SubRecord
BEGIN-SELECT
RECFIELD.FIELDNAME    &RECFIELD.FIELDNAME

   let $FieldNameSub = rtrim(&RECFIELD.FIELDNAME, ' ')
   put &RECFIELD.FIELDNAME into RecDefn(#i) FieldName
   put $FieldNameSub into RecDefn(#i) FieldTrimmed
   put 0 into RecDefn(#i) IsKey
   do Get-Field-Type
   put #FieldType into RecDefn(#i) Type
   Add 1 to #i

FROM PSRECFIELD RECFIELD
WHERE RECFIELD.RECNAME = $CFieldName
END-SELECT
end-procedure Get-SubRecord


!*********************************************
!
!*********************************************

begin-procedure Tools-Related-Record($RecName, :#ToolsRelated)

let #ToolsRelated = 0

BEGIN-SELECT
COUNT(*) &PSRECDEFNCOUNT
   move &PSRECDEFNCOUNT to #ToolsRelated
FROM PSRECDEFN
WHERE OBJECTOWNERID = 'PPT'
AND RECNAME LIKE 'PS%'
AND RECNAME = $RecName
END-SELECT

end-procedure Tools-Related-Record

!*********************************************
!
!*********************************************

begin-procedure Get-Field-Type

let #FieldType = 0

BEGIN-SELECT
FIELDTYPE

   if &FIELDTYPE = 2 or &FIELDTYPE = 3
      let #FieldType = 1
   end-if

FROM PSDBFIELD
WHERE FIELDNAME = $FieldName
END-SELECT

end-procedure Get-Field-Type

!*********************************************
!
!*********************************************

begin-procedure WriteToFile

WRITE 1 FROM ''

let $Line = $Comment || '***********************************************************************'
WRITE 1 FROM $Line
let $Line = $Comment || '   ' || $PrevRecName || ' --> ' || $PrevRelLangRecName
WRITE 1 FROM $Line
WRITE 1 FROM $Comment

let $Line = $Comment || ' CUT AND PASTE INTO YOUR SELECT STATEMENT THE FIELDS BELOW'
WRITE 1 FROM $Line
WRITE 1 FROM $Comment

let $Line = $Comment || $Dieze || 'define ' || $PrevRecName
WRITE 1 FROM $Line
WRITE 1 FROM $Comment

move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldName
      get #IsKey from RecDefn(#j) IsKey
         if #IsKey = 1
            let $Line = $Comment || $FieldNameToWrite || '  &' || $FieldNameToWrite
         else
            let $Line = $Comment || $FieldNameToWrite || '  &' || $PrevRecName || '-' || $FieldNameToWrite
         end-if
         WRITE 1 FROM $Line
      Add 1 to #j
   end-while

WRITE 1 FROM $Comment
let $Line = $Comment || '   Get_Related_' || $PrevRecName
WRITE 1 FROM $Line
WRITE 1 FROM $Comment
let $Line = $Comment || '   Key Structure:'
WRITE 1 FROM $Line
move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldName
      get #IsKey from RecDefn(#j) IsKey
      if #IsKey = 1
         let $Line = $Comment || '      ' || $FieldNameToWrite
         WRITE 1 FROM $Line
      end-if
      Add 1 to #j
   end-while
WRITE 1 FROM $Comment
let $Line = $Comment || '   Calling Syntax:'
WRITE 1 FROM $Line

let $Line = ''
move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldTrimmed
      get #IsKey from RecDefn(#j) IsKey
      if $Line = ''
         if #IsKey = 1
            let $Line = '&' || $FieldNameToWrite
!         else                                                  !MP Modif
!            let $Line = $FieldNameToWrite                      !MP Modif
         end-if
      else
         if #IsKey = 1
            let $Line = $Line || ',&' || $FieldNameToWrite
!         else                                                  !MP Modif
!            let $Line = $Line || ',' || $FieldNameToWrite      !MP Modif
         end-if
      end-if
      Add 1 to #j
   end-while
let $Line = $Comment || '   Get_Related_' || $PrevRecName || '(' || $Line || ')'
WRITE 1 FROM $Line
WRITE 1 FROM $Comment

let $Line = $Comment || '***********************************************************************'
WRITE 1 FROM $Line
WRITE 1 FROM ''

let $Line = $Dieze || 'ifdef ' || $PrevRecName
WRITE 1 FROM $Line
WRITE 1 FROM ''

let $Line = 'BEGIN-PROCEDURE Get_Related_' || $PrevRecName || '('
WRITE 1 FROM $Line

move 0 to #j
move 0 to #prevIsKey
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldTrimmed
      get #IsKey from RecDefn(#j) IsKey
      get #Type from RecDefn(#j) Type
      if #Type = 1
         let $Prefix = $Dieze
      else
         let $Prefix = '$'
      end-if

      if #IsKey = 1
         let $Line = '  ' || $Prefix || $FieldNameToWrite
         let #prevIsKey ='1'
       else
         let #prevIsKey ='0'
!      else                                                     !MP Modif
!         let $Line = '  :$' || $FieldNameToWrite               !MP Modif
      end-if

      Add 1 to #j

      get #IsKey from RecDefn(#j) IsKey                         !MP Modif
!      if #IsKey = 1                                            !MP Modif
!       let $Line = $Line || ','                                !MP Modif
!      end-if                                                   !MP Modif

!      if #j < #i                                               !MP Modif
!         let $Line = $Line || ','                              !MP Modif
!      end-if                                                   !MP Modif

       if #prevIsKey = 1
         if #IsKey = 1
            let $Line = $Line || ','
         end-if
         WRITE 1 FROM $Line
       end-if
end-while
let $Line = ')'
WRITE 1 FROM $Line

let $Line = 'if $_PSOptions_Language_Cd <> $_curr_language_cd'
WRITE 1 FROM $Line
let $Line = 'BEGIN-SELECT'
WRITE 1 FROM $Line

move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldName
      get #IsKey from RecDefn(#j) IsKey
         if #IsKey = 0
            let $Line = $PrevRelLangRecName || '.' || $FieldNameToWrite
            WRITE 1 FROM $Line
         end-if
      Add 1 to #j
   end-while

move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldTrimmed
      get #IsKey from RecDefn(#j) IsKey
      if #IsKey = 0
!         let $Line = '  do FillVar(&' || $PrevRelLangRecName || '.' || $FieldNameToWrite || ',  $' || $FieldNameToWrite || ')' !MP Modif
         let $Line = '  do FillVar(&' || $PrevRelLangRecName || '.' || $FieldNameToWrite || ',  $_' || $PrevRecName || '-' || $FieldNameToWrite || ')'  !MP Modif
         WRITE 1 FROM $Line
      end-if
      Add 1 to #j
   end-while

do Tools-Related-Record($PrevRelLangRecName, #ToolsRelated)

if #ToolsRelated >= 1
   let $Line = 'FROM ' || $PrevRelLangRecName || ' ' ||$PrevRelLangRecName
else
   let $Line = 'FROM PS_' || $PrevRelLangRecName || ' ' ||$PrevRelLangRecName
end-if
WRITE 1 FROM $Line

let $Line = 'WHERE'
WRITE 1 FROM $Line

let $Line = '   '
move 0 to #j
   while #j < #i
      get $FieldNameToWrite from RecDefn(#j) FieldName
      get #IsKey from RecDefn(#j) IsKey
      get #Type from RecDefn(#j) Type
      if #Type = 1
         let $Prefix = $Dieze
      else
         let $Prefix = '$'
      end-if
      if #IsKey = 1
         let $Line = $Line || $PrevRelLangRecName || '.' || $FieldNameToWrite || '  = ' || $Prefix || $FieldNameToWrite
         WRITE 1 FROM $Line
      end-if
      let $Line = '   AND '
      Add 1 to #j
   end-while

let $Line = '   AND ' || $PrevRelLangRecName || '.LANGUAGE_CD = $_curr_language_cd'
WRITE 1 FROM $Line

let $Line = 'END-SELECT'
WRITE 1 FROM $Line

let $Line = 'end-if'
WRITE 1 FROM $Line

let $Line = 'END-PROCEDURE'
WRITE 1 FROM $Line

WRITE 1 FROM ''
let $Line = $Dieze || 'endif ' || $PrevRecName
WRITE 1 FROM $Line

end-procedure WriteToFile


!***********************************************************************

#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'
