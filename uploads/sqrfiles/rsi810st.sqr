!***********************************************************************
! RSI810ST:   Create Quarterly Wage file Selected States               *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  01/16/2015 RSI-HCM104455  v1.5                                      *
!  Descr: Create new Quarterly wage file program.                      *
!                                                                      *
!  03/24/2015 RSI-HCM104693  v2.5                                      *
!  Descr: Modifications for additional states, added Maine             *
!                                                                      *
!  06/22/2015 RSI-HCM104868  v3.1                                      *
!  Descr: Added Colorado and Massachusetts                             *
!         Corrected Maine Recon Ttls and Employer State Id Validation  *
!                                                                      *
!  06/23/2015 RSI-HCM104815  v4.11                                     *
!  Descr: Added Vermont and Tax Exempt logic for Maine                 *
!                                                                      *
!  10/05/2015 RSI-HCM104276  v5.5                                      *
!  Descr: Added Michigan and Louisiana                                 *
!                                                                      *
!  12/10/2015 RSI-HCM105448  v6.0                                      *
!  Descr: Corrected MA file length                                     *
!                                                                      *
!  04/12/2016 RSI-HCM105603  v7.0                                      *
!  Descr: Round the hours worked for Massachusetts                     *
!         Add Oregon to states processed                               *
!                                                                      *
!  08/01/2016 RSI-HCM105783  v8.2                                      *
!  Descr: Oregon Corrections; work hours in file not matching report,  *
!         zip extension and withholding amounts in file.               *
!         Removed 7.5 logic                                            *
!                                                                      *
!  08/15/2016 RSI-HCM105774  v9.1                                      *
!  Descr: Added Pennsylvania and New Mexico                            *
!         Miscellaneous Corrections for Code Style, Syntax and Layout  *
!         Replace datenow() with Get-Current-DateTime.                 *
!                                                                      *
!  10/11/2016 RSI-HCM105877  v10.0                                     *
!  Descr: Correction for QTD Hours Worked summed by earncd.            *
!                                                                      *
!  11/01/2016 RSI-HCM105939  v11.0                                     *
!  Descr: Corrected New Mexico UI Gross Wages and Withholding Wages.   *
!                                                                      *
!  12/14/2016 RSI-HCM106097  v12.0                                     *
!  Descr: Round Louisiana wages in the PDF report.                     *
!                                                                      *
!  12/28/2016 RSI-HCM106120  v13.0                                     *
!  Descr: Add additional summary totals to the New Mexico PDF report.  *
!                                                                      *
!  01/04/2017 RSI-HCM106147  v14.0                                     *
!  Descr: Corrected Colorado A and S record lengths.                   *
!         Modified Colorado A and S record layouts to match File Specs *
!         for required fields.                                         *
!         Removed Colorado F record per file specs.                    *
!         Added .txt to Colorado file extension.                       *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   ! Set Environment
#include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information
#include 'setup32.sqc'  ! Printer and Page-Size Initialization
#include 'usarpt.sqc'   ! USA-specific variables

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver         '14.0'
  #Define ReportID         RSI810ST
  #Define FileNumUI        10
  #Define FileNumWH        20
  #Define ErrFile          30
  #Define FileNumTmp       40
  #Define Max_Rows         500000
  #Define Taxing_Entity_UI UTAX
  #Define Taxing_Entity_WH WITH
  #Define Report_Title_UI  'Create Quarterly Wage File(s) for Selected States'
  #Define Report_Title_WH  'Create Quarterly Withholding File(s) for Selected States'
  #Define Inactive_WH_Msg  ' QTD Tax Withheld - Inactive W/H Account'
  #Define Dyn-S          [
  #Define Dyn-E          ]

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {RSI_APP_REL} < 8.81
      #Define FILESUFFIX
  #Else
      #Define IMPORTSUFFIX
  #EndIf

  !#Define DebugA
  !#Define DebugB
  !#Define DebugC
  !#Define DebugD

End-Setup

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program

  do Init-Report

  Show $ReportTitle
  let $Program_Info = '{ReportID}.SQR - Version ' || {Prgm_Ver} || ' on {sqr-platform} on {sqr-database} database'
  Show $Program_Info
  Show '**************************************************'
  do Get-Current-DateTime
  let $Start = $ReportDate || ' ' || $ReportTime
  Show 'Report Started at : ' $Start
  Show ''
  Show 'Processing balances for ' $RptQtrYr
  Show ''

  If $Prcs_Process_Instance <> ''
     do Get-Runctrl-Parms
  Else
     input $Prcs_OprID batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     If $Prcs_OprID = '' and $Prcs_Run_Cntl_ID = ''
        Show ''
        Show 'Report requires Operator ID and Run Control ID used on the Run Control Records to run.'
        Show ''
        STOP
     Else
        do Get-Runctrl-Parms
     End-If
  End-If

  Show ''
  do Get-Current-DateTime
  let $End = $ReportDate || ' ' || $ReportTime
  Show 'Report Ended at : ' $End

  If $Errors_Found_AnyState = 'Y'
     STOP quiet
  Else
     do Stdapi-Term
  End-If

End-Program

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Setup-SQL
  do Initialization
  do Calc-12thofthe-month

  #IfDef DebugA
     do Show-DebugA-Statements
  #EndIf

End-Procedure Init-Report

!***********************************************************************
! Procedure Setup-SQL
!***********************************************************************
Begin-Procedure Setup-SQL

  #IfDef RSI_TOOLS_8.4
     let $Taxbalance_Person = ' PS_TAX_BALANCE A, PS_PERSONAL_DT_FST B, PS_PERS_NID C'
     let $And_Perstatus     = ''
  #Else
     let $Taxbalance_Person = ' PS_TAX_BALANCE A, PS_PERSONAL_DATA B, PS_PERS_NID C'
     let $And_Perstatus     = ' AND B.PER_STATUS    = ''E'''
  #EndIf

  let $And_Tax_Class_UI    = ' AND A.TAX_CLASS = ''U'''
  let $And_Tax_Class_UI_WH = ' AND A.TAX_CLASS in (' || '''' || 'U' || '''' || ',' || '''' || 'H' || '''' || ')'

End-Procedure Setup-SQL

!***********************************************************************
! Procedure Initialization
!***********************************************************************

Begin-Procedure Initialization

  let $ReportID     = 'RSI810ST'
  let $ReportTitle  = {Report_Title_UI}
  let $Spaces       = ' '
  let $Zeros        = rpad('',512,'0')
  let $Line         = rpad('',174,'_')
  let $WriteERec    = 'Y'
  let $File_Open    = 'N'
  let $Combine_File = 'Y'
  do Get-Tax-Reporting-Run-Controls
  move &TX.COMPUTER_MFR to $Manufacture_Name
  do Get-Output-File-Path
  do Get-Transmitter-Contact-Data
  move &TX.COMPANY      to $Tx_Company
  move &TX.BALANCE_YEAR to $ReportYear 9999
  move $PeriodEndDate   to $AsOfDate

  If rtrim($Tx_Company,' ') = ''
     let $Errors_Found = 'Y'
     let $Err_Msg1     = 'ERROR: Company field blank on Tax Run Control Record. '

     If $Err_Msg1 <> $Prev_Err_Msg1
        let $Err_Msg = $Err_Msg1
        do Write-Error
        let $Prev_Err_Msg1 = $Err_Msg1
     End-If
  End-If

  let $Company = $Tx_Company
  do Get-Company-Data
  let $Transmitter_Name    = upper($CompanyName)
  let $Transmitter_Address = upper($Compnyadd1)
  let $Transmitter_City    = upper($Compnycity)
  let $Transmitter_State   = upper(rtrim(&CT.STATE,' '))
  let $Transmitter_Country = upper(rtrim(&CT.COUNTRY,' '))
  let $Postal              = &CT.POSTAL
  let $Country             = $Transmitter_Country
  do Format-Zip
  let $Transmitter_ZipExtsn = substr($Zip,6,5)
  let $Transmitter_ZIP      = substr($Zip,1,5)
  move &CT.FEDERAL_EIN to $FederalEIN
  do Check-Federal-EIN
  let $Transmitter_FedEIN = $FederalEIN

  move '0' to $Year4
  move ''  to $DDelimiter

  do Format-DateTime($AsOfToday, $Out, {DEFCMP},'','')
  let $File_CreationDate = substr($Out, 5, 2) || substr($Out, 7, 2) || substr($Out, 1, 4)

BEGIN-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
END-SELECT

End-Procedure Initialization

!***********************************************************************
! Procedure Calc-12thofthe-month
!***********************************************************************
Begin-Procedure Calc-12thofthe-month

  move &TX.BALANCE_YEAR to $BalanceYear xxxx
  move &TX.BALANCE_QTR  to $BalanceQuarter x
  move $BalanceQuarter  to #QtrEndMonth

  multiply 3 times #QtrEndMonth

  let #Month3 = #QtrEndMonth
  let #Month2 = #QtrEndMonth - 1
  let #Month1 = #QtrEndMonth - 2

  move #Month3 to $3rdMonth 09
  move #Month2 to $2ndMonth 09
  move #Month1 to $1stMonth 09

  If $BalanceQuarter = '1' or $BalanceQuarter = '4'
     let $Lastday = '31'
  End-If

  If $BalanceQuarter = '2' or $BalanceQuarter = '3'
     let $Lastday = '30'
  End-If

  let $Date_Field = $BalanceYear || $1stMonth || '01'
  do Format-DateTime($Date_Field, $Qtr_First_Day, {DEFCMP},'','native')

  let $Date_Field = $BalanceYear || $3rdMonth || $Lastday
  do Format-DateTime($Date_Field, $Qtr_Last_Day, {DEFCMP},'','native')

  let $12th_Month1 = $BalanceYear || $1stMonth || '12'
  do Format-DateTime($12th_Month1, $12th_1stMonth, {DEFCMP},'','native')

  let $12th_Month2 = $BalanceYear || $2ndMonth || '12'
  do Format-DateTime($12th_Month2, $12th_2ndMonth, {DEFCMP},'','native')

  let $12th_Month3 = $BalanceYear || $3rdMonth || '12'
  do Format-DateTime($12th_Month3, $12th_3rdMonth, {DEFCMP},'','native')

End-Procedure Calc-12thofthe-month

!***********************************************************************
! Procedure Get-Runctrl-Parms
!***********************************************************************
Begin-Procedure Get-Runctrl-Parms

BEGIN-SELECT
ST.STATE
RC.RSI_CALC_BY
RC.ERNCD_SPCL
WRK.RSI_ST_WRKHRS_FLG
WRK.RSI_ST_REMIT_FLG
ST.RSI_ST_AUTH_ID

  let $State         = rtrim(ltrim(&ST.STATE,' '),' ')
  let $Calc_Hours_By = &RC.RSI_CALC_BY
  let $Earn_Codes    = &RC.ERNCD_SPCL
  let $Calc_WrkHrs   = &WRK.RSI_ST_WRKHRS_FLG
  do Get-State-Tax-Data
  let $StateID = $StateNumber
  If &WRK.RSI_ST_REMIT_FLG = 'Y'
     let #Auth_ID = &ST.RSI_ST_AUTH_ID
  End-If

  Show ' '
  Show '******************************** Run Parameters ********************************'
  If $ShowParms = ''
     let $ShowParms = 'Done'
     let $Spcl_Bal  = 'Y'
     Show 'Operator ID                   : ' $Prcs_OprID
     Show 'Run Control ID                : ' $Prcs_Run_Cntl_ID

     If $Calc_Hours_By = 'E'
        do Get-Earning-Codes
        let $Spcl_Bal = 'N'
        Show 'Calculate by Earning Codes    : ' $Earn_Codes
        let $Earns_Where = 'AND B.ERNCD IN ' || $Earn_Codes
     Else
        Show 'Calculate by Spcl Accumulator : ' $Earn_Codes
        let $Earns_Where = 'AND B.ERNCD = ' || '''' || $Earn_Codes || ''''
     End-If
  End-If
  Show ' '
  Show 'Report Run for State(s)       : ' $StateNumber ' ' $State ' ' $StateName
  Show '********************************************************************************'
  Show ' '

  do Clear-State-Variables

  let $Proc_Name = 'Get-Runctrl-Parms'
  Evaluate $State
    When = 'MA'
      do MA-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
  End-Evaluate

  do Get-Output-File-Path
  do Open-StateFile
  do Process-Transmitter-Record
  do Process-Authorization-Record
  do Process-Main
  do Close-Statefile

FROM PS_RC_RSI810ST RC, PS_RC_RSI810ST_LST ST, PS_RSI_QTR_ST WRK
WHERE RC.OPRID       = ST.OPRID
  AND RC.RUN_CNTL_ID = ST.RUN_CNTL_ID
  AND ST.STATE       = WRK.STATE
  AND RC.OPRID       = $Prcs_OprID
  AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY ST.STATE
END-SELECT

End-Procedure Get-Runctrl-Parms

!***********************************************************************
! Procedure Create-WH-Array
!***********************************************************************
Begin-Procedure Create-WH-Array

  If $WH_Array_Created <> 'Y'
     Create-Array
       Name  = WH_ARRAY_CO
       Size  = {Max_Rows}
       Field = COMPANY:char
       Field = COMPANYNAME:char
       Field = ADDRESS:char
       Field = CITY:char
       Field = STATE:char
       Field = ZIP:char
       Field = ZIPEXT:char
       Field = FEDERAL_EIN:CHAR
       Field = EMPLOYER_ID_SUT:char
       Field = EMPLOYER_ID_SWT:char

     Create-Array
       Name  = WH_ARRAY
       Size  = {Max_Rows}
       Field = COMPANY:char
       Field = NATIONAL_ID:char
       Field = EMPLID:char
       Field = LAST_NAME:char
       Field = FIRST_NAME:char
       Field = MIDDLE_INITIAL:char
       Field = TXGRS_QTD:number
       Field = TAX_QTD:number
       Field = SEX:char
       Field = MSG:char
  Else
     Clear-Array Name = WH_ARRAY
  End-If

  let $WH_Array_Created = 'Y'

End-Procedure Create-WH-Array

!***********************************************************************
! Procedure Get-Earning-Codes
!***********************************************************************
Begin-Procedure Get-Earning-Codes

  let $Earn_Codes = '('

BEGIN-SELECT
ER.ERNCD

  let $Earn_Codes = $Earn_Codes || '''' || &ER.ERNCD || '''' || ','

FROM PS_RC_RSI810ST_ERN ER
WHERE ER.OPRID       = $Prcs_OprID
  AND ER.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY ER.ERNCD
END-SELECT

  let $Earn_Codes = rtrim($Earn_Codes,',') || ')'

End-Procedure Get-Earning-Codes

!***********************************************************************
! Procedure Get-Output-File-Path
!***********************************************************************
Begin-Procedure Get-Output-File-Path

  #IfDef RSI_TOOLS_8.4
     let $FileOutputPath = '{IMPORTPREFIX}'
  #Else
     let $FileOutputPath = '{FILEPREFIX}'
  #EndIf

  let #PathLength = length($FileOutputPath)
  let $End_Char   = substr($FileOutputPath, #PathLength, 1)

  #IfDef NT
     If $End_Char <> '\'
        let $FolderSep = '\'
     Else
        let $FolderSep = ''
     End-If
  #EndIf

  #IfDef UNIX
     If $End_Char <> '/'
        let $FolderSep = '/'
     Else
        let $FolderSep = ''
     End-If
  #EndIf

  let $FileOutputPath = $FileOutputPath || $FolderSep

  #IfDef HAS
     do Get_OutPut_Location
     let $FileOutputPath = $g_file_path_out
  #EndIf

End-Procedure Get-Output-File-Path

!***********************************************************************
! Procedure Get-Transmitter-Contact-Data
!***********************************************************************
Begin-Procedure Get-Transmitter-Contact-Data

BEGIN-SELECT
E.CONTACT_NAME_SSA
E.TELEPHONE_NBR
E.PHONE_EXTN
E.EMAIL_ADDR_MMREF
E.CONTACT_FAX

FROM PS_TAX960_PARM E
END-SELECT

  move &E.CONTACT_NAME_SSA to $Trans_Contact_Name
  uppercase $Trans_Contact_Name

  If &E.PHONE_EXTN = 0
     let $Trans_Phone_Ext = ' '
  Else
     move &E.PHONE_EXTN to $Trans_Phone_Ext
  End-If

  let $Trans_Phone_Nbr    = translate(&E.TELEPHONE_NBR,'()_-.,\/','')
  let $Contact_Phone      = rtrim($Trans_Phone_Nbr,' ')
  let $Contact_Phone_Test = translate($Contact_Phone,'0123456789', '')
  let $Transmitter_Email  = &E.EMAIL_ADDR_MMREF
  let $Transmitter_Fax    = &E.CONTACT_FAX

  If $Contact_Phone_Test <> ''
     let $Errors_Found = 'Y'
     let $Err_Msg4     = 'ERROR PROCESSING Transmitter Contact Data: The Contact Phone Number does not meet the required format. '  ||
                         'Please validate the Employer Contact Telephone Number (' || $Contact_Phone || ') contains numeric values only. '
     If $Err_Msg4 <> $Prev_Err_Msg4
        let $Err_Msg = $Err_Msg4
        do Write-Error
        let $Prev_Err_Msg4 = $Err_Msg4
     End-If
  End-If

End-Procedure Get-Transmitter-Contact-Data

!***********************************************************************
! Procedure Process-Transmitter-Record
!***********************************************************************
Begin-Procedure Process-Transmitter-Record

  let $Proc_Name = 'Process-Transmitter-Record'
  Evaluate $State
    When = 'CO'
      do CO-Specific
      Break
    When = 'DC'
      do DC-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'MA'
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      !XML File
      Break
    When = 'OR'
      !No 'A' record
      Break
    When = 'PA'
      do PA-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
    When-Other
      do Write-A-Record-ICESA
  End-Evaluate

  #IfDef DebugD
     do Show-DebugD-Statements
  #EndIf

End-Procedure Process-Transmitter-Record

!***********************************************************************
! Procedure Process-Authorization-Record
!***********************************************************************
Begin-Procedure Process-Authorization-Record

  let $Proc_Name = 'Process-Authorization-Record'
  Evaluate $State
    When = 'VT'
      do VT-Specific
  End-Evaluate

End-Procedure Process-Authorization-Record

!***********************************************************************
! Procedure Process-Main
!***********************************************************************
Begin-Procedure Process-Main

BEGIN-SELECT
C.COMPANY
C.DESCR
C.FEDERAL_EIN
C.ADDRESS1
C.CITY
C.STATE
C.POSTAL
C.COUNTRY
D.EMPLOYER_ID_SUT
D.EMPLOYER_ID_SWT
D.SUT_EXPERIENCE_RT

  let $Company_Total   = 'N'
  let $Company         = rtrim(&C.COMPANY,' ')
  move &C.DESCR       to $Company_Name
  move &C.ADDRESS1    to $Address
  move &C.COUNTRY     to $Country
  move &C.POSTAL      to $Postal
  move &C.FEDERAL_EIN to $FederalEIN
  do Check-Federal-EIN
  do Format-Zip

  let $E_City  = rtrim(&C.CITY,' ')
  let $E_State = rtrim(&C.STATE,' ')
  move &D.EMPLOYER_ID_SUT   to $Emplr_SUT
  move &D.EMPLOYER_ID_SWT   to $Emplr_SWT
  move &D.SUT_EXPERIENCE_RT to #UIContribRate
  let $UIContribRate = edit(#UIContribRate * 10, '0999')

  uppercase $Company_Name
  uppercase $Address
  uppercase $Company_City
  uppercase $E_City
  uppercase $E_State

  #IfDef DebugB
     do Show-DebugB-Statements
  #EndIf

  let $Proc_Name = 'Process-Main-A'
  Evaluate $State
    When = 'ME'
      do ME-Specific
      Break
  End-Evaluate

  do Process-Employee-Data

FROM PS_COMPANY_TBL C, PS_CO_STATETAX_TBL D
WHERE C.COMPANY         = D.COMPANY
  AND C.TAX_REPORT_TYPE = '2'
  AND C.EFF_STATUS      = 'A'
  AND D.EFF_STATUS      = 'A'
  AND D.STATE           = $State
  AND C.EFFDT           = (SELECT MAX(C1.EFFDT)
                           FROM PS_COMPANY_TBL C1
                           WHERE C1.COMPANY = C.COMPANY
                             AND C1.EFFDT  <= $AsOfDate)
  AND D.EFFDT           = (SELECT MAX(D1.EFFDT)
                           FROM PS_CO_STATETAX_TBL D1
                           WHERE D1.COMPANY = D.COMPANY
                             AND D1.STATE   = D.STATE
                             AND D1.EFFDT  <= $AsOfDate)

ORDER BY C.COMPANY
END-SELECT

  do Process-File-Totals

  let $Proc_Name = 'Process-Main-B'
  Evaluate $State
    When = 'ME'
      do ME-Specific
      Break
  End-Evaluate

End-procedure Process-Main

!***********************************************************************
! Procedure Process-File-Totals
!***********************************************************************
Begin-Procedure Process-File-Totals

  let $File_Totals = 'Y'

  move #Count_F to $Count_F 0999999
  let $Total_NLGross_QTD = edit(#Total_NLGross_QTD * 100,'099999999999999')

  let $Proc_Name = 'Process-File-Totals'
  Evaluate $State
    When = 'CO'
      do CO-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'MA'
      do MA-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
    When-Other
      do Write-F-Record-ICESA
      do Print-File-Totals
  End-Evaluate

  let #Count_F           = 0
  let #Total_NLGross_QTD = 0
  let $File_Totals       = 'N'

End-Procedure Process-File-Totals

!***********************************************************************
! Procedure Format-Zip
!***********************************************************************
Begin-Procedure Format-Zip

  Evaluate $Country
    When = 'USA'
      move $Postal to $Zip

      If instr($Zip,'-',6) = 0
         let $ZipExtsn = '     '
      Else
         let $ZipExtsn = substr($Zip,6,5)
         let $Zip      = substr($Zip,1,5)
      End-If
      Break
    When = 'CAN'
      let $Zip      = substr($Zip,1,3) || ' ' || substr($Zip,4,1)
      let $ZipExtsn = substr($Postal,5,2)
      Break
    When-Other
      move ' ' to $Zip
      move ' ' to $ZipExtsn
  End-Evaluate

End-Procedure Format-Zip

!***********************************************************************
! Procedure Check-Federal-EIN
!***********************************************************************
Begin-Procedure Check-Federal-EIN

  let $FederalEIN = translate(rtrim($FederalEIN,' '),'-','')
  let $FederalEIN = edit($FederalEIN, '099999999')
  do Check-Is-String-Numeric($FederalEIN,#Result)

  If #Result = 0
     let $Errors_Found = 'Y'
     let $Err_Msg2     = 'ERROR PROCESSING ' || $StateName || ': Federal EIN (' || $FederalEIN || ') does not meet the required format' ||
                         ' for Company, ' || $Company || '. Please ensure that the Federal EIN contains numeric values only. '

     If $Err_Msg2 <> $Prev_Err_Msg2
        let $Err_Msg = $Err_Msg2
        do Write-Error
        let $Prev_Err_Msg2 = $Err_Msg2
     End-If
  End-If

End-Procedure Check-Federal-EIN

!***********************************************************************
! Procedure Process-Employee-Data
!***********************************************************************
Begin-Procedure Process-Employee-Data

BEGIN-SELECT
A.COMPANY    () on-Break print=never level=1 BEFORE=Before-Company
                                             AFTER=After-Company
A.EMPLID
A.NLGRS_QTD
A.TXGRS_QTD
A.TAX_QTD
B.LAST_NAME
B.FIRST_NAME
B.MIDDLE_NAME
B.NAME_SUFFIX
B.SEX
C.NATIONAL_ID () on-Break print=never level=2 AFTER=After-Emplid
A.TAX_CLASS

  let $EmplID      = &A.EMPLID
  let $Sex         = nvl(rtrim(ltrim(&B.SEX,' '),' '),' ')
  let $Last_Name   = nvl(rtrim(ltrim(&B.LAST_NAME,' '),' '),' ')
  let $First_Name  = nvl(rtrim(ltrim(&B.FIRST_NAME,' '),' '),' ')
  let $Middle_Name = nvl(ltrim(rtrim(&B.MIDDLE_NAME,' '),' '),' ')
  let $Name_Suffix = nvl(rtrim(ltrim(&B.NAME_SUFFIX,' '),' '),' ')
  let $MidInitial  = {ps-substr}(&B.MIDDLE_NAME,1,1)
  uppercase $Last_Name
  uppercase $First_Name
  uppercase $MidInitial
  uppercase $Name_Suffix

  move &C.NATIONAL_ID to $S123 xxx
  If $S123 = &TEMP_SSN_MASK or rtrim(&C.NATIONAL_ID,' ') = ''
     move 'I        ' to $National_ID
  Else
     move &C.NATIONAL_ID to $National_ID
  End-If

  let $Tax_Class = rtrim(&A.TAX_CLASS,' ')

  If $Tax_Class = 'U'
     let #NLGross_QTD = &A.NLGRS_QTD
     let #TXGross_QTD = &A.TXGRS_QTD
     let #TaxUI_QTD   = &A.TAX_QTD

     If #NLGross_QTD > 0
        do Get-Monthly-Counts

        If $Calc_WrkHrs = 'Y'
           do Get-QTD-Hours
        End-If

        add #Month1_Count to #Comp_Month1_Count
        add #Month2_Count to #Comp_Month2_Count
        add #Month3_Count to #Comp_Month3_Count

        do Format-Number(#Hours_QTD, $Hours_QTD,'099')

        multiply 100 times #NLGross_QTD
        do Format-Number(#NLGross_QTD, $NLGross_QTD,'09999999999999')
        add #NLGross_QTD to #Comp_NLGross_QTD

        multiply 100 times #TXGross_QTD
        do Format-Number(#TXGross_QTD, $TXGross_QTD,'09999999999999')
        add #TXGross_QTD to #Comp_TXGross_QTD

        let #EXGross_QTD = #NLGross_QTD - #TXGross_QTD
        do Format-Number(#EXGross_QTD, $EXGross_QTD,'09999999999999')
        add #EXGross_QTD to #Comp_EXGross_QTD

        add #TaxUI_QTD to #Comp_TaxUI_QTD
        add #Hours_QTD to #Comp_Hours_QTD

        add 1 to #Count_S

        let $Proc_Name = 'Process-Employee-Data'
        Evaluate $State
          When = 'CO'
            do CO-Specific
            Break
          When = 'DC'
            do DC-Specific
            Break
          When = 'LA'
            do LA-Specific
            Break
          When = 'MA'
            !Process in After-Emplid
            Break
          When = 'ME'
            do ME-Specific
            Break
          When = 'MI'
            do MI-Specific
            Break
          When = 'NM'
            do NM-Specific
            Break
          When = 'OR'
            !Process in After-Emplid
            Break
          When = 'PA'
            do PA-Specific
            Break
          When = 'VT'
            do VT-Specific
            Break
          When-Other
            do Write-S-Record-ICESA
        End-Evaluate
     Else
        If #NLGross_QTD < 0
           let $ErrMsg = $State || ' QTD SUI Wages Negative'
           do Print-Negative-Wages
        End-If
     End-If
     #IfDef DebugC
        do Show-DebugC-Statements
     #EndIf
  End-If

  If $Tax_Class = 'H'
     let #TaxWH_QTD   = &A.TAX_QTD
     let #TXGrsWH_QTD = &A.TXGRS_QTD
     If #TaxWH_QTD > 0
        If $Inactive_WH_Acct = 'Y'
           let $ErrMsg = $State || {Inactive_WH_Msg}
           do Store-Wages-WH
        End-If
     End-If

     If #TaxWH_QTD < 0 or #TXGrsWH_QTD < 0
        If #TaxWH_QTD < 0
           let $ErrMsg = $State || ' QTD Tax Withheld Negative'
           do Store-Wages-WH
        End-If

        If #TXGrsWH_QTD < 0
           let $ErrMsg = $State || ' QTD W/H Taxable Wages Negative'
           do Store-Wages-WH
        End-If
     Else
        let $ErrMsg = ''
        do Store-Wages-WH
     End-If
     multiply 100 times #TaxWH_QTD
     do Format-Number(#TaxWH_QTD, $TaxWH_QTD,'09999999999999')
     add #TaxWH_QTD to #Comp_TaxWH_QTD

     multiply 100 times #TXGrsWH_QTD
     do Format-Number(#TXGrsWH_QTD, $TXGrsWH_QTD,'09999999999999')
     add #TXGrsWH_QTD to #Comp_TXGrsWH_QTD
     #IfDef DebugC
        do Show-DebugC-Statements
     #EndIf
  End-If

FROM {Dyn-S}$Taxbalance_Person{Dyn-E}
WHERE A.EMPLID           = B.EMPLID
  AND A.EMPLID           = C.EMPLID
  AND A.COMPANY          = $Company
  AND A.BALANCE_ID       = $Calendar_Year_Id
  AND A.STATE            = $State
  AND A.LOCALITY         = ' '
  AND C.COUNTRY          = {NID_Country}
  AND C.NATIONAL_ID_TYPE = 'PR'
  {Dyn-S}$And_Perstatus{Dyn-E}
  {Dyn-S}$And_Tax_Class{Dyn-E}
  AND A.BALANCE_YEAR     = &TX.BALANCE_YEAR
  AND A.BALANCE_QTR      = &TX.BALANCE_QTR
  AND A.BALANCE_PERIOD   = (SELECT MAX(A1.BALANCE_PERIOD)
                            FROM PS_TAX_BALANCE A1
                            WHERE A1.EMPLID       = A.EMPLID
                              AND A1.COMPANY      = A.COMPANY
                              AND A1.BALANCE_ID   = A.BALANCE_ID
                              AND A1.BALANCE_YEAR = A.BALANCE_YEAR
                              AND A1.BALANCE_QTR  = A.BALANCE_QTR
                              AND A1.STATE        = A.STATE
                              AND A1.LOCALITY     = A.LOCALITY
                              AND A1.TAX_CLASS    = A.TAX_CLASS)
ORDER BY A.COMPANY, C.NATIONAL_ID
END-SELECT

  If $Company_Total = 'N'
     do Before-Company
     do Clear-Company-Variables
     do Format-T-Amounts
     do After-Company
  End-If

End-Procedure Process-Employee-Data

!***********************************************************************
! Procedure Get-Outofstate-Wages
!***********************************************************************
Begin-Procedure Get-Outofstate-Wages

  let $OutOfStateWages = 'N'

BEGIN-SELECT
'X'

   let $OutOfStateWages = 'Y'

FROM PS_TAX_BALANCE D
WHERE D.COMPANY          = $Company
  AND D.BALANCE_ID       = $Calendar_Year_Id
  AND D.STATE            = $State
  AND D.LOCALITY         = ' '
  AND D.BALANCE_YEAR     = &TX.BALANCE_YEAR
  AND D.BALANCE_QTR      = &TX.BALANCE_QTR
  AND D.TAX_CLASS        = 'U'
  AND D.NLGRS_QTD        > 0
  AND D.BALANCE_PERIOD   = (SELECT MAX(D1.BALANCE_PERIOD)
                             FROM PS_TAX_BALANCE D1
                             WHERE D1.EMPLID       = D.EMPLID
                               AND D1.COMPANY      = D.COMPANY
                               AND D1.BALANCE_ID   = D.BALANCE_ID
                               AND D1.BALANCE_YEAR = D.BALANCE_YEAR
                               AND D1.BALANCE_QTR  = D.BALANCE_QTR
                               AND D1.STATE        = D.STATE
                               AND D1.LOCALITY     = D.LOCALITY
                               AND D1.TAX_CLASS    = D.TAX_CLASS)
  AND EXISTS               (SELECT 'X'
                             FROM PS_TAX_BALANCE D2
                              WHERE D2.EMPLID         = D.EMPLID
                                AND D2.COMPANY        = D.COMPANY
                                AND D2.BALANCE_ID     = D.BALANCE_ID
                                AND D2.BALANCE_YEAR   = D.BALANCE_YEAR
                                AND D2.BALANCE_QTR    = D.BALANCE_QTR
                                AND D2.BALANCE_PERIOD = D.BALANCE_PERIOD
                                AND D2.STATE         <> $State
                                AND D2.STATE         <> '$U'
                                AND D2.LOCALITY       = ' '
                                AND D2.TAX_CLASS      = 'U'
                                AND D2.NLGRS_QTD      > 0)
END-SELECT
End-Procedure Get-Outofstate-Wages

!***********************************************************************
! Procedure Get-EE-Job
!***********************************************************************
Begin-Procedure Get-EE-Job

  let $Empl_Type      = ' '
  let #Hourly_Rate    = 0
  let $Officer_Cd     = ' '
  let $Jobcode        = ' '
  let $Setid_Jobcode  = ' '

BEGIN-SELECT
JOB1.EMPL_TYPE
JOB1.HOURLY_RT
JOB1.OFFICER_CD
JOB1.JOBCODE
JOB1.SETID_JOBCODE
JOB1.TAX_LOCATION_CD

  let $Empl_Type     = &JOB1.EMPL_TYPE
  let #Hourly_Rate   = &JOB1.HOURLY_RT
  let $Officer_Cd    = &JOB1.OFFICER_CD
  let $Jobcode       = &JOB1.JOBCODE
  let $Setid_Jobcode = &JOB1.SETID_JOBCODE
  let $Tax_Location  = &JOB1.TAX_LOCATION_CD

FROM PS_JOB JOB1
WHERE JOB1.EMPLID   = $Emplid
  AND JOB1.COMPANY  = $Company
  AND JOB1.EMPL_RCD = (SELECT MAX(J0.EMPL_RCD)
                         FROM PS_JOB J0
                        WHERE J0.EMPLID   = JOB1.EMPLID
                          AND J0.COMPANY  = JOB1.COMPANY
                          AND J0.EFFDT   <= $AsOfDate)
  AND JOB1.EFFDT    = (SELECT MAX(J1.EFFDT)
                         FROM PS_JOB J1
                        WHERE J1.EMPLID   = JOB1.EMPLID
                          AND J1.EMPL_RCD = JOB1.EMPL_RCD
                          AND J1.COMPANY  = JOB1.COMPANY
                          AND J1.EFFDT   <= $AsOfDate)
  AND JOB1.EFFSEQ   = (SELECT MAX(J2.EFFSEQ)
                         FROM PS_JOB J2
                        WHERE J2.EMPLID   = JOB1.EMPLID
                          AND J2.EMPL_RCD = JOB1.EMPL_RCD
                          AND J2.COMPANY  = JOB1.COMPANY
                          AND J2.EFFDT    = JOB1.EFFDT)
END-SELECT

End-Procedure Get-EE-Job

!***********************************************************************
! Procedure Get-Job-Title
!***********************************************************************
Begin-Procedure Get-Job-Title

  let $Job_Title = ' '

BEGIN-SELECT
JC.DESCR

  let $Job_Title = &JC.DESCR

FROM  PS_JOBCODE_TBL JC
WHERE JC.SETID   = $Setid_Jobcode
  AND JC.JOBCODE = $Jobcode
  AND JC.EFFDT = (SELECT MAX(JC1.EFFDT)
                    FROM PS_JOBCODE_TBL JC1
                   WHERE JC1.SETID   = JC.SETID
                     AND JC1.JOBCODE = JC.JOBCODE
                     AND JC1.EFFDT  <= $AsOfDate)
END-SELECT

End-Procedure Get-Job-Title

!***********************************************************************
! Procedure Get-Withholding-Wages
!***********************************************************************
Begin-Procedure Get-Withholding-Wages

  let #WC_Fee = 0
  let #TaxWH_QTD_NM = 0
  let #WorkersCmpWH_QTD = 0

BEGIN-SELECT
T.EMPLID
T.TAX_CLASS
T.LOCALITY
SUM(T.TAX_QTD)  &T.TAX_QTD

  If (rtrim(&T.TAX_CLASS, ' ') = 'R' and rtrim(&T.LOCALITY, ' ') = 'NM0001ER') or
     (rtrim(&T.TAX_CLASS, ' ') = 'H' and rtrim(&T.LOCALITY, ' ') = 'NM0001')
     move &T.TAX_QTD to #WorkersCmpWH_QTD
     do Get-WC-Fee
  End-If

  If (rtrim(&T.TAX_CLASS, ' ') = 'H' and rtrim(&T.LOCALITY, ' ') = '')
     let #TaxWH_QTD_NM = &T.TAX_QTD
  End-If

FROM PS_TAX_BALANCE T
WHERE T.COMPANY        = $Company
  AND T.EMPLID         = $Emplid
  AND T.BALANCE_ID     = $Calendar_Year_Id
  AND T.STATE          = $State
  AND T.BALANCE_YEAR   = &TX.BALANCE_YEAR
  AND T.BALANCE_QTR    = &TX.BALANCE_QTR
  AND T.TAX_QTD        > 0
  AND T.BALANCE_PERIOD = (SELECT MAX(T1.BALANCE_PERIOD)
                          FROM PS_TAX_BALANCE T1
                          WHERE T1.EMPLID       = T.EMPLID
                            AND T1.COMPANY      = T.COMPANY
                            AND T1.BALANCE_ID   = T.BALANCE_ID
                            AND T1.BALANCE_YEAR = T.BALANCE_YEAR
                            AND T1.BALANCE_QTR  = T.BALANCE_QTR
                            AND T1.STATE        = T.STATE
                            AND T1.LOCALITY     = T.LOCALITY
                            AND T1.TAX_CLASS    = T.TAX_CLASS)
 [$WH_Tax_Class]
 GROUP BY T.EMPLID,T.TAX_CLASS,T.LOCALITY
END-SELECT

End-Procedure Get-Withholding-Wages

!***********************************************************************
! Procedure Get-WC-Fee
!***********************************************************************
Begin-Procedure Get-WC-Fee

  let #WC_Fee = 4.3

BEGIN-SELECT
SUM(A.NONRESIDENT_TAX_RT)  &WCGRS_QTD

  move &WCGRS_QTD to #WC_Fee

FROM  PS_LOCAL_TAX_TBL A
WHERE A.STATE    = 'NM'
  AND A.LOCALITY IN ('NM0001','NM0001ER')
  AND A.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = A.STATE
         AND  LOCALITY = A.LOCALITY
         AND  EFFDT   <= $PeriodEndDate)

END-SELECT
End-Procedure Get-WC-Fee

!***********************************************************************
! Procedure Convert-Special-Char
!***********************************************************************
Begin-Procedure Convert-Special-Char($string_in, :$string_out)

   let $string_in   = replace($string_in, '&',  '&amp;')
   let $string_in   = replace($string_in, '"',  '&quot;')
   let $string_in   = replace($string_in, '<',  '&lt;')
   let $string_in   = replace($string_in, '>',  '&gt;')
   let $string_in   = replace($string_in, '''', '&apos;')

   let $string_out   = rtrim(ltrim($string_in, ' '),' ')

End-Procedure Convert-Special-Char

!***********************************************************************
! Procedure Validate-TaxLoc-State
!***********************************************************************
Begin-Procedure Validate-TaxLoc-State

  let $Valid_State = 'N'

BEGIN-SELECT
T.STATE

  let $Valid_State = 'Y'

FROM PS_TAX_LOCATION1 T
WHERE T.TAX_LOCATION_CD = $Tax_location
  AND T.STATE = 'NM'
END-SELECT

End-Procedure Validate-TaxLoc-State

!***********************************************************************
! Procedure Get-Unit-Number
!***********************************************************************
Begin-Procedure Get-Unit-Number

  let $Unit_Number     = '00001'
  let $UI_Record_found = 'N'

BEGIN-SELECT
UI.UI_RPT_CODE

  let $Unit_Number = rtrim(&UI.UI_RPT_CODE,' ')

  If length($Unit_Number) <> 5 or translate($Unit_Number, '0123456789', '') <> ''
     let $Err_Msg = 'The Reporting Unit field must contain a valid 5 digit number assigned by the State for Company ' ||
                         $Company || ' and Tax Location ' ||  $Tax_location
     If $Err_Msg <> $Prev_Err_Msg
        Show ''
        Show  $Err_Msg
     End-If
        let $Prev_Err_Msg = $Err_Msg
        let $Unit_Number = '00001'
     End-If

  let $UI_Record_found = 'Y'

FROM PS_CO_UI_RPTCD_TBL UI
WHERE UI.COMPANY  = $Company
  AND UI.LOCATION = $Tax_Location
  AND UI.EFFDT    = (SELECT MAX(EFFDT)
                     FROM PS_CO_UI_RPTCD_TBL
                     WHERE COMPANY  = UI.COMPANY
                       AND LOCATION = UI.LOCATION
                       AND EFFDT   <= $PeriodEndDate)
  AND UI.EFF_STATUS = 'A'
END-SELECT

  If $UI_Record_found = 'N'
     Show ''
     let $Message =  'The UI Report code is not SET UP for Company ' ||
                      $Company || ' and Tax Location State ' || $Tax_location || ' New Mexico so the Reporting Unit has been defaulted to ''00001'''
     Show $Message
  End-If

End-Procedure Get-Unit-Number

!***********************************************************************
! Procedure Store-Company-WH
!***********************************************************************
Begin-Procedure Store-Company-WH

  put $Company
      $Company_Name
      $Address
      $E_City
      $E_State
      $Zip
      $ZipExtsn
      $FederalEIN
      $Emplr_SUT
      $Emplr_SWT
  into WH_ARRAY_CO(#Arr_WH_Co)
  add 1 to #Arr_WH_Co

End-Procedure Store-Company-WH

!***********************************************************************
! Procedure Store-Wages-WH
!***********************************************************************
Begin-Procedure Store-Wages-WH

  put $Company
      $National_ID
      $Emplid
      $Last_Name
      $First_Name
      $MidInitial
      #TXGrsWH_QTD
      #TaxWH_QTD
      $Sex
      $ErrMsg
  into WH_ARRAY(#Arr_WH)
  add 1 to #Arr_WH

End-Procedure Store-Wages-WH

!***********************************************************************
! Procedure Process-Company-Data-WH
!***********************************************************************
Begin-Procedure Process-Company-Data-WH

  do Clear-Company-Variables
  let $File_Taxing_Entity = '{Taxing_Entity_WH}'
  let $CheckErrMsg        = $State || {Inactive_WH_Msg}
  let $ReportTitle        = {Report_Title_WH}
  let $FileID             = $Fileid_Wh
  let $Tax_Class          = 'H'
  let $Company            = ''
  let $Company_WH         = ''
  let #Count_E            = 0
  let #Tmp0               = 0

  While #Tmp0 < #Arr_WH_Co
    get $Company
        $Company_Name
        $Address
        $E_City
        $E_State
        $Zip
        $ZipExtsn
        $FederalEIN
        $Emplr_SUT
        $Emplr_SWT
    from WH_ARRAY_CO(#Tmp0)

    let #Tmp1 = 0
    While #Tmp1 < #Arr_WH
      get $Company_Cnt
          $ErrMsg
      from WH_ARRAY(#Tmp1)
           COMPANY
           MSG

      If $Company_Cnt = $Company
         If $ErrMsg = ''
            add 1 to #Comp_TaxWH_QTD_Cnt
         End-If
      End-If

      add 1 to #Tmp1
    End-While

    do Process-Employee-Data-WH

    add 1 to #Tmp0
  End-While

  do Process-File-Totals

End-Procedure Process-Company-Data-WH

!***********************************************************************
! Procedure Process-Employee-Data-WH
!***********************************************************************
Begin-Procedure Process-Employee-Data-WH

  do Before-Company

  let #Tmp2 = 0

  While #Tmp2 < #Arr_WH
    get $Company_WH
        $National_ID
        $Emplid
        $Last_Name
        $First_Name
        $MidInitial
        #TXGrsWH_QTD
        #TaxWH_QTD
        $Sex
        $ErrMsg
    from WH_ARRAY(#Tmp2)
    add 1 to #Tmp2

    If $Company_WH = $Company
       If $ErrMsg <> ''
          If $ErrMsg = $CheckErrMsg
             do Print-Inactive-Acct-Amts
          Else
             do Print-Negative-Wages-WH
          End-If
       Else
          multiply 100 times #TaxWH_QTD
          do Format-Number(#TaxWH_QTD, $TaxWH_QTD,'09999999999999')
          add #TaxWH_QTD to #Comp_TaxWH_QTD

          multiply 100 times #TXGrsWH_QTD
          add #TXGrsWH_QTD to #Comp_TXGrsWH_QTD

          add 1 to #Count_S

          let $Proc_Name = 'Process-Employee-Data-WH'
          Evaluate $State
            When = 'ME'
              do ME-Specific
              Break
           End-Evaluate
       End-If

       #IfDef DebugC
          do Show-DebugC-Statements
       #EndIf

       do Clear-Employee-Variables
    End-If
  End-While

  If $Company_Total = 'N'
     do Clear-Company-Variables
     do Format-T-Amounts
     do After-Company
  Else
     do After-Company
  End-If

End-Procedure Process-Employee-Data-WH

!***********************************************************************
! Procedure Get-Monthly-Counts
!***********************************************************************
Begin-Procedure Get-Monthly-Counts

BEGIN-SELECT
D.COMPANY
D.PAYGROUP
D.PAY_END_DT
D.EMPLID
D.EMPL_RCD
D.EARNS_BEGIN_DT
D.EARNS_END_DT
D.PAY_LINE_STATUS

  move &D.EARNS_BEGIN_DT to $Earns_BeginDT
  move &D.EARNS_END_DT   to $Earns_EndDT

  do Format-DateTime($Earns_BeginDT, $Earns_Begin_Date,{DEFCMP},'','')
  do Format-DateTime($Earns_EndDT, $Earns_End_Date,{DEFCMP},'','')

  If $Earns_Begin_Date <= $12th_Month1
     If $Earns_End_Date >= $12th_Month1
        let $Month1       = '1'
        let #Month1_Count =  1

        If $Sex = 'F'
           add 1 to #Comp_Month1CntFem
        End-If
     End-If
  End-If

  If $Earns_Begin_Date <= $12th_Month2
     If $Earns_End_Date >= $12th_Month2
        let $Month2       = '1'
        let #Month2_Count =  1

        If $Sex = 'F'
           add 1 to #Comp_Month2CntFem
        End-If
     End-If
  End-If

  If $Earns_Begin_Date <= $12th_Month3
     If $Earns_End_Date >= $12th_Month3
        let $Month3       = '1'
        let #Month3_Count =  1

        If $Sex = 'F'
           add 1 to #Comp_Month3CntFem
        End-If
     End-If
  End-If

FROM PS_PAY_EARNINGS D, PS_PAY_CHECK E
WHERE D.COMPANY          = E.COMPANY
  AND D.PAYGROUP         = E.PAYGROUP
  AND D.PAY_END_DT       = E.PAY_END_DT
  AND D.OFF_CYCLE        = E.OFF_CYCLE
  AND D.PAGE_NUM         = E.PAGE_NUM
  AND D.LINE_NUM         = E.LINE_NUM
  AND D.COMPANY          = $Company
  AND D.EMPLID           = $EmplID
  AND D.STATE            = $State
  AND E.PAYCHECK_STATUS IN ('F','A','R')
  AND D.PAY_END_DT BETWEEN $Qtr_First_Day AND $Qtr_Last_Day
  AND (($12th_1stMonth BETWEEN D.EARNS_BEGIN_DT AND D.EARNS_END_DT)
   OR  ($12th_2ndMonth BETWEEN D.EARNS_BEGIN_DT AND D.EARNS_END_DT)
   OR  ($12th_3rdMonth BETWEEN D.EARNS_BEGIN_DT AND D.EARNS_END_DT))
END-SELECT

End-Procedure Get-Monthly-Counts

!***********************************************************************
! Procedure Get-QTD-Hours
!***********************************************************************
Begin-Procedure Get-QTD-Hours

BEGIN-SELECT
B.BALANCE_YEAR
B.BALANCE_QTR
SUM(B.HRS_QTD)      &B.HRS_QTD

  move &B.HRS_QTD to #Hours_QTD

FROM PS_EARNINGS_BAL B
WHERE B.COMPANY        = $Company
  AND B.EMPLID         = $Emplid
  AND B.BALANCE_ID     = $Calendar_Year_Id
  AND B.SPCL_BALANCE   = $Spcl_Bal
  AND B.GRS_YTD       <> 0
  {Dyn-S}$Earns_Where{Dyn-E}
  AND B.BALANCE_YEAR   = &TX.BALANCE_YEAR
  AND B.BALANCE_QTR    = &TX.BALANCE_QTR
  AND B.BALANCE_PERIOD = (SELECT MAX(B1.BALANCE_PERIOD)
                          FROM PS_EARNINGS_BAL B1
                          WHERE B1.EMPLID       = B.EMPLID
                            AND B1.COMPANY      = B.COMPANY
                            AND B1.BALANCE_ID   = B.BALANCE_ID
                            AND B1.BALANCE_YEAR = B.BALANCE_YEAR
                            AND B1.BALANCE_QTR  = B.BALANCE_QTR
                            AND B1.EMPL_RCD     = B.EMPL_RCD
                            AND B1.SPCL_BALANCE = B.SPCL_BALANCE
                            AND B1.ERNCD        = B.ERNCD)
GROUP BY B.BALANCE_YEAR, B.BALANCE_QTR
END-SELECT

End-Procedure Get-QTD-Hours

!***********************************************************************
! Procedure Before-Company
!***********************************************************************
Begin-Procedure Before-Company

  let $Wage_Indicator = '1'
  let $Print_Header   = ''
  add 1 to #Count_E

  let $Proc_Name = 'Before-Company'
  Evaluate $State
    When = 'CO'
      do CO-Specific
      Break
    When = 'DC'
      do DC-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'MA'
      do MA-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
    When-Other
      do Validate-EmployerID-SUT
      do Write-E-Record-ICESA
  End-Evaluate

End-Procedure Before-Company

!***********************************************************************
! Procedure Validate-EmployerID-SUT
!***********************************************************************
Begin-Procedure Validate-EmployerID-SUT

  let $Proc_Name      = 'Validate-EmployerID-SUT'
  let $Valid_SUT      = 'Y'
  let $Rsiein_Err_Msg = ''

  Evaluate $State
    When = 'CO'
      do CO-Specific
      Break
    When = 'DC'
      do DC-Specific
      Break
    When = 'MA'
      do MA-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
  End-Evaluate

  If $Valid_SUT = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg3     = 'ERROR PROCESSING ' || $StateName || ': State Unemployment ID does not meet the required format ' ||
                         'for Company, ' || $Company || '. ' || $Rsiein_Err_Msg
     If $Err_Msg3 <> $Prev_Err_Msg3
        let $Err_Msg = $Err_Msg3
        do Write-Error
        let $Prev_Err_Msg3 = $Err_Msg3
     End-If
     let $Rsiein_Err_Msg = ''
  End-If

End-Procedure Validate-EmployerID-SUT

!***********************************************************************
! Procedure Validate-EmployerID-SWT
!***********************************************************************
Begin-Procedure Validate-EmployerID-SWT

  let $Inactive_WH_Acct = 'N'
  let $Valid_SWT        = 'Y'
  let $Rsiein_Err_Msg   = ''

  let $Proc_Name = 'Validate-EmployerID-SWT'
  Evaluate $State
    When = 'ME'
      do ME-Specific
      Break
  End-Evaluate

  If $Valid_SWT = 'N'
     let $Inactive_WH_Acct = 'Y'
     let $Errors_Found     = 'Y'
     let $Err_StateEIN     = rtrim($Employer_SWT,' ')
     let $Err_Msg6         = 'ERROR PROCESSING ' || $StateName || ': State Withholding ID does not meet the required format for Company '  ||
                             $Company || '. ' ||  $Rsiein_Err_Msg

     If $Err_Msg6 <> $Prev_Err_Msg6
        let $Err_Msg = $Err_Msg6
        do Write-Error
        let $Prev_Err_Msg6 = $Err_Msg6
     End-If
     let $Rsiein_Err_Msg = ''
  End-If

End-Procedure Validate-EmployerID-SWT

!***********************************************************************
! Procedure Check-Is-String-Numeric
!***********************************************************************
Begin-Procedure Check-Is-String-Numeric($Validate_String, :#Result)

  let #Result = 1
  let $TempStr = translate($Validate_String,'0123456789','')

  If length($TempStr) > 0
     let #Result = 0
  End-If

End-Procedure Check-Is-String-Numeric

!***********************************************************************
! Procedure Format-T-Amounts
!***********************************************************************
Begin-Procedure Format-T-Amounts

  move #Count_S to $Count_S 0999999

  move #Comp_NLGross_QTD to $Comp_NLGross_QTD 09999999999999
  move #Comp_TXGross_QTD to $Comp_TXGross_QTD 09999999999999
  move #Comp_TXGrsWH_QTD to $Comp_TXGrsWH_QTD 09999999999999
  move #Comp_EXGross_QTD to $Comp_EXGross_QTD 09999999999999
  move #Comp_TaxUI_QTD   to $Comp_TaxUI_QTD   09999999999999

  move #Comp_Month1_Count to $Comp_Month1_Count 0999999
  move #Comp_Month2_Count to $Comp_Month2_Count 0999999
  move #Comp_Month3_Count to $Comp_Month3_Count 0999999
  move #Comp_Month1CntFem to $Comp_Month1CntFem 0999999
  move #Comp_Month2CntFem to $Comp_Month2CntFem 0999999
  move #Comp_Month3CntFem to $Comp_Month3CntFem 0999999

  let $Proc_Name = 'Format-T-Amounts'
  Evaluate $State
    When = 'CO'
      !No 'T' record
      Break
    When = 'DC'
      do DC-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'MA'
      !No 'T' record
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      !XML File
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
    When-Other
      do Write-T-Record-ICESA
  End-Evaluate

End-Procedure Format-T-Amounts

!***********************************************************************
! Procedure After-Emplid
!***********************************************************************
Begin-Procedure After-Emplid

  let $Proc_Name = 'After-Emplid'
  Evaluate $State
    When = 'MA'
      do MA-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
  End-Evaluate

  do Clear-Employee-Variables

End-Procedure After-Emplid

!***********************************************************************
! Procedure After-Company
!***********************************************************************
Begin-Procedure After-Company

  If #Count_S > 0
     do Format-T-Amounts
     let $Company_Total = 'Y'
  End-If

  divide 100 into #Comp_NLGross_QTD
  divide 100 into #Comp_TXGross_QTD
  divide 100 into #Comp_TXGrsWH_QTD
  divide 100 into #Comp_EXGross_QTD
  divide 100 into #Comp_TaxWH_QTD
  divide 100 into #Comp_TaxUI_QTD

  add #Comp_NLGross_QTD to #Total_NLGross_QTD
  add #Comp_TXGross_QTD to #Total_TXGross_QTD
  add #Comp_TXGrsWH_QTD to #Total_TXGrsWH_QTD
  add #Comp_EXGross_QTD to #Total_EXGross_QTD
  add #Comp_TaxWH_QTD   to #Total_TaxWH_QTD
  add #Comp_TaxUI_QTD   to #Total_TaxUI_QTD
  add #Comp_Hours_QTD   to #Total_Hours_QTD

  add #Comp_Month1_Count to #Total_Month1_Cnt
  add #Comp_Month2_Count to #Total_Month2_Cnt
  add #Comp_Month3_Count to #Total_Month3_Cnt

  let $Proc_Name = 'After-Company'
  Evaluate $State
    When = 'DC'
      do DC-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'MA'
      do MA-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'VT'
      do VT-Specific
      Break
    When-Other
      If #Count_S > 0
         do Print-Company-Total
      End-If
  End-Evaluate

  move #Count_S to $Count_S 0999999
  add  #Count_S to #Count_F
  do Clear-Company-Variables

End-Procedure After-Company

!***********************************************************************
! Procedure Clear-Employee-Variables
!***********************************************************************
Begin-Procedure Clear-Employee-Variables

  let $Emplid              = ' '
  let $Last_Name           = ' '
  let $First_Name          = ' '
  let $Middle_Name         = ' '
  let $Name_Suffix         = ' '
  let $MidInitial          = ' '
  let $National_ID         = ' '
  let #NLGross_QTD         = 0
  let #TXGross_QTD         = 0
  let #TXGrsWH_QTD         = 0
  let #EXGross_QTD         = 0
  let #TaxWH_QTD           = 0
  let #TaxUI_QTD           = 0
  let #Hours_QTD           = 0
  let $Month1              = ' '
  let $Month2              = ' '
  let $Month3              = ' '
  let #Month1_Count        = 0
  let #Month2_Count        = 0
  let #Month3_Count        = 0

  let $S_Blanks4           = ' '
  let $S_Blanks43          = ' '
  let $Gross_Wages_QTD     = ' '
  let $NLGross_QTD         = ' '
  let $EXGross_QTD         = ' '
  let $TXGross_QTD         = ' '
  let $Dis_Wages_QTD       = ' '
  let $Tip_Wages_QTD       = ' '
  let $Weeks_QTD           = ' '
  let $Taxing_Entity_S     = ' '
  let $Unit_Div_Loc_cd     = ' '
  let $State_Taxable_Wages = ' '
  let $TaxWH_QTD           = ' '
  let $Seasonal_Indicator  = ' '
  let $ER_Health_Ins_Cd    = ' '
  let $EE_Health_Ins_Cd    = ' '
  let $Probationary_Code   = ' '
  let $Wage_Plan_Cd        = ' '
  let $Date_First_Employed = ' '
  let $Date_of_Separation  = ' '
  let $Female_Flag         = ' '

End-Procedure Clear-Employee-Variables

!***********************************************************************
! Procedure Clear-Company-Variables
!***********************************************************************
Begin-Procedure Clear-Company-Variables

  let $Comp_GrossWg_QTD   = ' '
  let $Comp_Tip_Wages_QTD = ' '
  let $UI_Tax_Rate        = ' '
  let $UI_Tax_Due         = ' '
  let $Prev_Qtr_Underpay  = ' '
  let $Interest           = ' '
  let $Penalty            = ' '
  let $Credit_Overpay     = ' '
  let $ER_Assess_Rate     = ' '
  let $ER_Assess_Amt      = ' '
  let $EE_Assess_Rate     = ' '
  let $EE_Assess_Amt      = ' '
  let $Tot_Paymt_Due      = ' '
  let $Alloc_Amt          = ' '
  let $St_Inc_Tax_Wages   = ' '
  let $County_Cd          = ' '
  let $Outside_County_EE  = ' '
  let $Doc_Ctrl_Num       = ' '
  let $Preparer_EIN       = ' '
  let $Proc_Lic_Cd        = ' '
  let $Cssf_Rate          = ' '
  let $UIContribRate      = ' '
  let $Comp_TaxWH_QTD     = ' '
  let $RC_Tot_Vchr_Pmnts  = ' '
  let $Employer_SWT       = ' '
  let $Emplr_SWT          = ' '
  let $StateSUT_E         = ' '
  let $StateSWT_E         = ' '
  let $StateSUT_S         = ' '
  let $StateSWT_S         = ' '
  let $StateSUT_T         = ' '
  let $Contrib_Due        = ' '
  let $Cssf_Due           = ' '

  let #Comp_NLGross_QTD   = 0
  let #Comp_TXGross_QTD   = 0
  let #Comp_TXGrsWH_QTD   = 0
  let #Comp_EXGross_QTD   = 0
  let #Comp_TaxWH_QTD     = 0
  let #Comp_TaxUI_QTD     = 0
  let #Comp_Hours_QTD     = 0
  let #Comp_Month1_Count  = 0
  let #Comp_Month2_Count  = 0
  let #Comp_Month3_Count  = 0
  let #Comp_Month1CntFem  = 0
  let #Comp_Month2CntFem  = 0
  let #Comp_Month3CntFem  = 0
  let #Comp_TaxWH_QTD_Cnt = 0
  let #Count_S            = 0
  let $Print_Header       = ''
  let $Taxing_Entity_T    = ' '

End-Procedure Clear-Company-Variables

!***********************************************************************
! Procedure Clear-State-Variables
!***********************************************************************
Begin-Procedure Clear-State-Variables

  let $FileID             = ''
  let $FileType           = ''
  let #File               = {FileNumUI}
  let #File1              = {FileNumTmp}
  let $File_Taxing_Entity = '{Taxing_Entity_UI}'
  let $Taxing_Entity_A    = ' '
  let $And_Tax_Class      = $And_Tax_Class_UI
  let $Company_WH         = ''
  let $Media_Transmitter  = ' '
  let $C-3_Data           = ' '
  let $Suffix_Code        = ' '
  let $Allocation_Lists   = ' '
  let $Service_Agent_ID   = ' '
  let $Total_Remit_Amt    = ' '
  let $Taxing_Entity_B    = ' '
  let $Char_Set           = ' '
  let $Taxing_Entity_E    = ' '
  let $Tax_Type_Code      = ' '
  let $Taxing_Entity_E5   = ' '
  let $State_Cntrl_Num    = ' '
  let $Unit_Num           = ' '
  let $E_Blanks_47        = ' '
  let $Foreign_Ind        = ' '
  let $Other_Ein          = ' '
  let $Adj_Reason         = ' '
  let $Owner_Officer      = ' '
  let $Employment_Type    = ' '
  let $Block_Factor       = ' '
  let $Establishment_Num  = ' '
  let $Month1             = ' '
  let $Month2             = ' '
  let $Month3             = ' '
  let $Count_E            = ' '
  let $Count_F            = ' '
  let $Taxing_Entity_F    = ' '
  let $Total_GrossWg_QTD  = ' '
  let $Total_NLGross_QTD  = ' '
  let $Total_EXGross_QTD  = ' '
  let $Total_TXGross_QTD  = ' '
  let $Tot_Dis_Wages_QTD  = ' '
  let $Tot_Tip_Wages_QTD  = ' '
  let $Total_Month1_Count = ' '
  let $Total_Month2_Count = ' '
  let $Total_Month3_Count = ' '
  let $Inactive_WH_Acct   = 'N'

  let #Total_GrossWg_QTD  = 0
  let #Total_NLGross_QTD  = 0
  let #Total_TXGross_QTD  = 0
  let #Total_EXGross_QTD  = 0
  let #Total_TaxWH_QTD    = 0
  let #Total_TaxUI_QTD    = 0
  let #Total_Hours_QTD    = 0
  let #Total_Month1_Cnt   = 0
  let #Total_Month2_Cnt   = 0
  let #Total_Month3_Cnt   = 0
  let #Count_E            = 0
  let #Count_F            = 0
  let #Arr_WH_Co          = 0
  let #Arr_WH             = 0
  let #Inactive-Print-Cnt = 0
  let $Combine_File       = 'Y'

End-Procedure Clear-State-Variables

!***********************************************************************
! Procedure Print-Negative-Wages
!***********************************************************************
Begin-Procedure Print-Negative-Wages

  If $Print_Header = ''
     print '**** Negative Wages ******'   (+1,3)
     print ' '                            (+1,3,11)
     print '     QTD     '                (0,+6,13)
     print '     QTD      '               (0,+6)
     print 'EmplID'                       (+1,3,11)
     print 'Taxable Gross'                (0,+6,13)
     print 'No Limit Gross'               (0,+6)
     let $Print_Header = 'Y'
  End-If

  print $Emplid                        (+1,3,14)
  print #TXGross_QTD                   (0,18) edit 99,999,999.99mi
  print #NLGross_QTD                   (0,36) edit 99,999,999.99mi

  add #TXGross_QTD to #Neg_TxGross_QTD
  add #NLGross_QTD to #Neg_NLGross_QTD

End-Procedure Print-Negative-Wages

!***********************************************************************
! Procedure Print-Negative-Wages-WH
!***********************************************************************
Begin-Procedure Print-Negative-Wages-WH

  If $Print_Header = ''
     print '**** Negative Amounts ******' (+2,3)
     print ' '                            (+1,3,11)
     print '     QTD     '                (0,+6,13)
     print '     QTD      '               (0,+6)
     print 'EmplID'                       (+1,3,11)
     print 'Taxable Gross'                (0,+6,13)
     print 'Tax Withheld  '               (0,+6)
     let $Print_Header = 'Y'
  End-If

  print $Emplid                           (+1,3,14)
  print #TXGrsWH_QTD                      (0,18) edit 99,999,999.99mi
  print #TaxWH_QTD                        (0,36) edit 99,999,999.99mi
  print $ErrMsg                           (0,54)

  add #TXGrsWH_QTD to #Neg_TxGrsWH_QTD
  add #TaxWH_QTD   to #Neg_TaxWH_QTD

End-Procedure Print-Negative-Wages-WH

!***********************************************************************
! Procedure Print-Inactive-Acct-Amts
!***********************************************************************
Begin-Procedure Print-Inactive-Acct-Amts

  let $EmpName = $First_Name || ' ' || $Last_Name

  If $Print_Header = ''
     print 'Emplid'                (+2,3,14)
     print 'Name'                  (,18)
     print 'National ID'           (,50)
     print 'Tax QTD'               (,74)
     print 'Error Message'         (,85)
     let $Print_Header = 'Y'
  End-If

  print $Emplid                (+1,3,14)
  print $EmpName               (,18)
  print $National_ID           (,50) edit xxx-xx-xxxx
  print #TaxWH_QTD             (,63) edit 999,999,999,999.99mi
  print {Inactive_WH_Msg}      (,84)

  add 1 to #Inactive-Print-Cnt

End-Procedure Print-Inactive-Acct-Amts

!***********************************************************************
! Procedure Print-Company-Total
!***********************************************************************
Begin-Procedure Print-Company-Total

  If $File_Taxing_Entity = '{Taxing_Entity_UI}'
     If #Neg_TxGross_QTD <> 0 or #Neg_NLGross_QTD <> 0
        print '** Total **'              (+4,3)
        print #Neg_TxGross_QTD           (0,18) edit 99,999,999.99mi
        print #Neg_NLGross_QTD           (0,36) edit 99,999,999.99mi

        move 0 to #Neg_TxGross_QTD
        move 0 to #Neg_NLGross_QTD
     End-If
  End-If

  print 'Company Totals'                 (+4,1) Center
  print $Line                            (+1,1)

  If $File_Taxing_Entity = '{Taxing_Entity_UI}'
     print 'No Limit Gross QTD'             (+2,3)
     print ':'                              (,26)
     print #Comp_NLGross_QTD                (,28)   edit 899,999,999.99mi

     print 'Taxable Gross QTD'              (+2,3)
     print ':'                              (,26)
     print #Comp_TXGross_QTD                (,28)   edit 899,999,999.99mi

     print 'Excess Gross QTD'               (+2,3)
     print ':'                              (,26)
     print #Comp_EXGross_QTD                (,28)   edit 899,999,999.99mi
  End-If

  print 'Employees Reported'               (+2,3)
  print ':'                                (,26)
  print #Count_S                           (,28)   edit 8,999,999

  If $File_Taxing_Entity = '{Taxing_Entity_UI}'
     print 'Month 1 Count'                  (+2,3)
     print ':'                              (,26)
     print #Comp_Month1_Count               (,28)   edit 8,999,999

     print 'Month 2 Count'                  (+2,3)
     print ':'                              (,26)
     print #Comp_Month2_Count               (,28)   edit 8,999,999

     print 'Month 3 Count'                  (+2,3)
     print ':'                              (,26)
     print #Comp_Month3_Count               (,28)   edit 8,999,999
  End-If

  let $Proc_Name = 'Print-Company-Total'
  Evaluate $State
    When = 'ME'
      do ME-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
  End-Evaluate

  new-page
End-Procedure Print-Company-Total

!***********************************************************************
! Procedure Print-Total-OR
!***********************************************************************
Begin-Procedure Print-Total-OR

  If #Neg_TxGross_QTD <> 0 or #Neg_NLGross_QTD <> 0
     print '** Total **'              (+4,3)
     print #Neg_TxGross_QTD           (0,18) edit 99,999,999.99mi
     print #Neg_NLGross_QTD           (0,36) edit 99,999,999.99mi

     move 0 to #Neg_TxGross_QTD
     move 0 to #Neg_NLGross_QTD
  End-If

  print $TotalName                    (+4,1) Center
  print $Line                         (+1,1)
  print 'No Limit Gross QTD'          (+2,3)
  print ':'                           (,26)
  print #NLGross_QTD_OR               (,28)   edit 899,999,999.99mi
  print 'Employees Reported'          (+2,3)
  print ':'                           (,26)
  print #Count_OR                     (,28)   edit 899,999,999
  print 'Records Reported'            (+2,3)
  print ':'                           (,26)
  print #Count_OR                     (,28)   edit 899,999,999
  If $TotalName = 'File Totals'
     print 'Total Hours Reported'     (+2,3)
  Else
     print 'Hours Reported'           (+2,3)
  End-If
  print ':'                           (,26)
  print #Hours_QTD_OR                 (,28)   edit 899,999,999

  If $TotalName = 'File Totals'
     print 'Output File(s) '          (+2,3)
     print ':'                        (,26)
     print $FileID                    (,28)

     Show ' '
     Show $State ' Output File Created: ' $FileID
     Show ' '

     If $Errors_Found = 'Y'
        Show ''
        let $Errors_Found_AnyState = 'Y'
        let $File_Totals = 'Y'
        do Error-Log
     End-If
  End-If

  new-page
End-Procedure Print-Total-OR

!***********************************************************************
! Procedure Print-File-Totals
!***********************************************************************
Begin-Procedure Print-File-Totals

  print 'File Totals'              (+4,1) Center
  print $Line                      (+1,1)

  If $File_Taxing_Entity = '{Taxing_Entity_UI}'
     print 'No Limit Gross QTD'       (+2,3)
     print ':'                        (,26)
     print #Total_NLGross_QTD         (,28)   edit 899,999,999.99mi

     print 'Taxable Gross QTD'        (+2,3)
     print ':'                        (,26)
     print #Total_TXGross_QTD         (,28)   edit 899,999,999.99mi

     print 'Excess Gross QTD'         (+2,3)
     print ':'                        (,26)
     print #Total_EXGross_QTD         (,28)   edit 899,999,999.99mi

     print 'Total Month 1 Count'      (+2,3)
     print ':'                        (,26)
     print #Total_Month1_Cnt          (,28)   edit 899,999,999

     print 'Total Month 2 Count'      (+2,3)
     print ':'                        (,26)
     print #Total_Month2_Cnt          (,28)   edit 899,999,999

     print 'Total Month 3 Count'      (+2,3)
     print ':'                        (,26)
     print #Total_Month3_Cnt          (,28)   edit 899,999,999
  End-If

  If $File_Taxing_Entity = '{Taxing_Entity_WH}'
     print 'State Tax Withheld QTD'   (+2,3)
     print ':'                        (,26)
     print #Total_TaxWH_QTD           (,28)   edit 899,999,999.99mi
  End-If

  print 'Employees Reported'          (+2,3)
  print ':'                           (,26)
  print #Count_F                      (,28)   edit 899,999,999

  print 'Employers Reported'          (+2,3)
  print ':'                           (,26)
  print #Count_E                      (,28)   edit 899,999,999

  If $Combine_File = 'N'
     print 'Output File(s) '          (+2,3)
     print ':'                        (,26)
     Show ' '
     Show $State ' Output File Created: '
     Show ' '

     let #Total = 0
     While #Total < #File_Count
        get $File
        from FILENAMES(#Total)
        add 1 to #Total
        print $File                   (+1,28)
        Show $File
     End-While
  Else
     print 'Output File(s) '          (+2,3)
     print ':'                        (,26)
     print $FileID                    (,28)
     Show ' '
     Show $State ' Output File Created: ' $FileID
     Show ' '
  End-If

  If $Errors_Found = 'Y'
     Show ''
     let $Errors_Found_AnyState = 'Y'
     let $File_Totals = 'Y'
     do Error-Log
  End-If

  new-page

End-Procedure Print-File-Totals

!***********************************************************************
! Procedure Error-Log
!***********************************************************************
Begin-Procedure Error-Log

  Show ''
  Show '************************************* ERROR ************************************'
  Show ''
  Show 'Errors were found in the data. The following Error Log File has been created: '
  Show $ErrorFileID
  Show ''
  Show '********************************************************************************'

  print '*************************************************************************'        (+2,1)
  print 'Errors were found during processing. Please review the Error Log File.  '         (+2,3)
  print 'Error Log File Path  '                                                            (+2,3)
  print ':'                                                                                (,26)
  print $ErrorFileID                                                                       (,28)

End-Procedure Error-Log

!***********************************************************************
! Procedure Heading
!***********************************************************************
Begin-Heading 5

  #Include 'stdhdg01.sqc'

  print 'State:   '           (3,1)
  print $StateName            (3,13)

  If $File_Totals <> 'Y'
     print 'Company: '        (6,1,11)
     print $Company           (0,13,3)
     print $Company_Name      (0,17)
  End-If
  print $RptQtrYr             (6,,)      center

End-Heading

!***********************************************************************
! Procedure Open-StateFile
!***********************************************************************
Begin-Procedure Open-StateFile

  If $FileType = 'D'
     move 0 to #RecordCount

     If #FileExtension <> 0
        close #File
     End-If

     add 1 to #FileExtension
     move #FileExtension to $FileExtension 099

     #IfDef OS400
        let $FileExtension = '(D' || $FileExtension || ')'
        let $FileID = $FileID ||  '.' || $FileExtension
     #Else
        let $FileID = $FileID ||  '.' || $FileExtension
     #EndIf
  Else
     add 1 to #FileExtension
  End-If

  let $Proc_Name = 'Open-StateFile'
  Evaluate $State
    When = 'CO'
      do CO-Specific
      Break
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'LA'
      do LA-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When = 'OR'
      do OR-Specific
      Break
    When = 'PA'
      do PA-Specific
      Break
    When-Other
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State
      open $FileID as {FileNumUI} for-writing record=275:fixed status=#FileStatus
      do Check-File-Open
  End-Evaluate

End-Procedure Open-StateFile

!***********************************************************************
! Procedure Check-File-Open
!***********************************************************************
Begin-Procedure Check-File-Open

  If #FileStatus <> 0
     let $Err_Msg = 'Error Opening Output File.  ' || $FileID
     do Write-Error
     STOP
  End-If

End-Procedure Check-File-Open

!***********************************************************************
! Procedure Write-Error
!***********************************************************************
Begin-Procedure Write-Error

  let $ErrorFileID = $FileOutputPath || $ReportID  || '_' || $Prcs_Process_Instance || '.err'
  open $ErrorFileID as {ErrFile} for-append record=512:vary status=#Err_FileStatus

  If #Err_FileStatus <> 0
     Show ''
     Show $Err_Msg
     Show ''
     let $Err_Msg = 'Error Opening Error File.  ' || $ErrorFileID
     STOP
  Else
     If $State <> $State_Prev_Err and $State_Prev_Err <> ''
        write {ErrFile} from $Line:512
     End-If
     write {ErrFile} from $Err_Msg:512
     close {ErrFile}
  End-If

  let $State_Prev_Err = $State
  let $Err_Msg = ''

End-Procedure Write-Error

!***********************************************************************
! Procedure Close-StateFile
!***********************************************************************
Begin-Procedure Close-StateFile

  let $Proc_Name = 'Close-StateFile'
  Evaluate $State
    When = 'ME'
      do ME-Specific
      Break
    When = 'MI'
      do MI-Specific
      Break
    When = 'NM'
      do NM-Specific
      Break
    When-Other
      If #FileExtension <> 0
         close {FileNumUI}
      End-If
  End-Evaluate

  move 0 to #FileExtension

End-Procedure Close-StateFile

!***********************************************************************
! Procedure CO-Specific
!***********************************************************************
Begin-Procedure CO-Specific
  Evaluate $Proc_Name
    When = 'Open-StateFile'
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State || '.txt'
      open $FileID as {FileNumUI} for-writing record=276:fixed status=#FileStatus
      do Check-File-Open
      Break
    When = 'Process-Transmitter-Record'
      let $Year_A               = $ReportYear
      let $Taxing_Entity_A      = '{Taxing_Entity_UI}'
      let $Transmitter_State_A  = $Transmitter_State
      let $Transmitter_FedEIN_A = $Transmitter_FedEIN
      let $Transmitter_FedEIN   = ' '
      do Write-A-Record-ICESA-CO
      let $Transmitter_FedEIN = $Transmitter_FedEIN_A
      Break
    When = 'Before-Company'
      do Validate-EmployerID-SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT   = translate($Emplr_SUT,'- ','')
      do Check-Is-String-Numeric($Employer_SUT,#Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) > 9
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 99999999.  State Unemployment ID exceeds 9 digits and has been truncated. '
         let $Employer_SUT   = substr($Employer_SUT ,1,9)
      End-If

      If length($Employer_SUT) < 9
         let $Employer_SUT = lpad($Employer_SUT,9,'0')
      End-If
      let $StateSUT_S = rpad($Employer_SUT,15,' ')
      Break
    When = 'Process-Employee-Data'
      let $Taxing_Entity_S = '{Taxing_Entity_UI}'
      let $EXGross_QTD     = ' '
      let $TXGross_QTD     = ' '
      let $Hours_QTD       = ' '
      let $Unit_Div_Loc_cd = '000'
      let $Month1          = ' '
      let $Month2          = ' '
      let $Month3          = ' '
      let $Spaces_S        = $Spaces
      let $StateID         = '08'
      do Write-S-Record-ICESA-CO
      Break
    When = 'Process-File-Totals'
      move #Count_F to $Count_F 0999999999
      let $Total_NLGross_QTD = ' '
      do Print-File-Totals
      Break
   End-Evaluate

End-Procedure CO-Specific

!***********************************************************************
! Procedure DC-Specific
!***********************************************************************
Begin-Procedure DC-Specific

  Evaluate $Proc_Name
    When = 'Process-Transmitter-Record'
      let $Year_A              = ' '
      let $Transmitter_State_A = ' '
      let $File_CreationDate_A = $File_CreationDate
      do Write-A-Record-ICESA
      Break
    When = 'Before-Company'
      let $Taxing_Entity_E = '{Taxing_Entity_UI}'
      do Validate-EmployerID-SUT
      do Write-E-Record-ICESA
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT   = translate($Emplr_SUT,'- ','')
      do Check-Is-String-Numeric($Employer_SUT,#Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) <> 6
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 999999.  State Unemployment ID should be 6 digits. '
      End-If

      let $StateSUT_E = rpad($Employer_SUT,15,' ')
      let $StateSUT_S = rpad($Employer_SUT,15,' ')
      let $StateSUT_T = rpad($Employer_SUT,15,' ')
      Break
    When = 'Process-Employee-Data'
      let $EXGross_QTD   = ' '
      let $TXGross_QTD   = ' '
      let $Adj_Reason    = '0'
      let $Owner_Officer = '0'
      let $Month1        = ' '
      let $Month2        = ' '
      let $Month3        = ' '
      let $State_Taxable_Wages = rpad($Adj_Reason,14,' ')
      let $Spaces_S      = $Spaces
      do Write-S-Record-ICESA
      Break
    When = 'After-Company'
      do Print-Company-Total
      Break
    When = 'Format-T-Amounts'
      let $UI_Tax_Rate = $QtrEndMonth || $ReportYear
      do Write-T-Record-ICESA
      Break
  End-Evaluate

End-Procedure DC-Specific

!***********************************************************************
! Procedure LA-Specific
!***********************************************************************

Begin-Procedure LA-Specific

  Evaluate $Proc_Name
    When = 'Open-StateFile'
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State
      open $FileID as {FileNumUI} for-writing record=512:fixed  status=#FileStatus
      Break
    When = 'Process-Transmitter-Record'
      let $Report_Peroiod = $QtrEndMonth || $ReportYear
      move $Trans_Phone_Ext to $Trans_Extn  09999
      If instr($ZipExtsn,'-',1) = 0
         let $Transmitter_Extn = '    '
      Else
         let $Transmitter_Extn = substr($ZipExtsn,2,4)
      End-If

      do Write-A-Record-SSA-LA
      Break
    When = 'Before-Company'
      do Get-Outofstate-Wages
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT   = translate($Emplr_SUT,'- ','')
      do Check-Is-String-Numeric($Employer_SUT,#Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) > 7
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 9999999.  State Unemployment ID exceeds 7 digits and has been truncated. '
         let $Employer_SUT   = substr($Employer_SUT ,1,7)
      End-If

      If length($Employer_SUT) < 7
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 9999999.  State Unemployment ID is less than 7 digits. '
      End-If
      Break
    When = 'Process-Employee-Data'
      do Validate-EmployerID-SUT

      If instr($ZipExtsn,'-',1) = 0
         let $ZipExtsn = '    '
      Else
         let $ZipExtsn = substr($ZipExtsn,2,4)
      End-If

      If $WriteERec = 'Y'
         do Write-E-Record-SSA-LA
      End-If

      If $National_ID = 'I        '
         let $Errors_Found = 'Y'
         let $Err_Msg7     = 'ERROR PROCESSING ' || $EmplID || ' has invalid SSN '
         If $Err_Msg7 <> $Prev_Err_Msg7
            let $Err_Msg = $Err_Msg7
            do Write-Error
            let $Prev_Err_Msg7 = $Err_Msg7
         End-If
      End-If

      let #NLGross_QTD_LA = &A.NLGRS_QTD
      let #TXGross_QTD_LA = &A.TXGRS_QTD

      do ps_sqr_Round (#NLGross_QTD_LA, 0, #NLGross_QTD_LA)
      do ps_sqr_Round (#TXGross_QTD_LA, 0, #TXGross_QTD_LA)

      let #EXGross_QTD_LA = #NLGross_QTD_LA - #TXGross_QTD_LA

      add #NLGross_QTD_LA to #Comp_NLGross_QTD_LA
      add #TXGross_QTD_LA to #Comp_TXGross_QTD_LA
      add #EXGross_QTD_LA to #Comp_EXGross_QTD_LA

      multiply 100 times #NLGross_QTD_LA
      multiply 100 times #TXGross_QTD_LA
      multiply 100 times #EXGross_QTD_LA

      move #NLGross_QTD_LA to $NLGross_QTD_S    09999999999
      move #TXGross_QTD_LA to $TXGross_QTD_S    09999999999
      move #EXGross_QTD_LA to $EXGross_QTD_S    0999999999

      do Get-EE-Job
      do Get-Job-Title

      let $Hourly_Rate = &JOB1.HOURLY_RT
      unstring $Hourly_Rate by '.' into $Hourly_Rate_Dollars $Hourly_Rate_Cents

      let #Hourly_Rate_Dollars = length($Hourly_Rate_Dollars)
      let #Hourly_Rate_Cents   = length($Hourly_Rate_Cents)

      Evaluate #Hourly_Rate_Dollars
        When = 1
          let $Hourly_Rate_Dollar = '00' || $Hourly_Rate_Dollars
        Break
        When = 2
          let $Hourly_Rate_Dollar = '0' || $Hourly_Rate_Dollars
        Break
        When-Other
           let $Hourly_Rate_Dollar = substr($Hourly_Rate_Dollars,1,3)
        Break
      End-Evaluate

      Evaluate #Hourly_Rate_Cents
        When = 1
          let $Hourly_Rate_Cent = $Hourly_Rate_Cents || '000'
        Break
        When = 2
          let $Hourly_Rate_Cent = $Hourly_Rate_Cents || '00'
        Break
        When = 3
          let $Hourly_Rate_Cent = $Hourly_Rate_Cents || '0'
        Break
        When-Other
           let $Hourly_Rate_Cent = substr($Hourly_Rate_Cents,1,4)
        Break
      End-Evaluate

      let $Hourly_Rate = $Hourly_Rate_Dollar || $Hourly_Rate_Cent

      If $Hourly_Rate = '0'
         let $Hourly_Rate = '0000000'
      End-If

      If $Month1 = ' '
         let $Month1  = '0'
      End-If
      If $Month2 = ' '
         let $Month2  = '0'
      End-If
      If $Month3 = ' '
         let $Month3  = '0'
      End-If

      do Write-S-Record-SSA-LA
      let $NLGross_QTD_S  = 0
      let $TXGross_QTD_S  = 0
      let $EXGross_QTD_S  = 0
      let #NLGross_QTD_LA = 0
      let #TXGross_QTD_LA = 0
      let #EXGross_QTD_LA = 0
      let $WriteERec      ='N'
      Break
    When = 'Format-T-Amounts'
      If #Count_S = 0
         subtract 1 from #Count_E
      End-If
      let $WriteERec = 'Y'
      Break
    When = 'After-Company'
      move #Comp_NLGross_QTD_LA to #Comp_NLGross_QTD
      move #Comp_TXGross_QTD_LA to #Comp_TXGross_QTD
      move #Comp_EXGross_QTD_LA to #Comp_EXGross_QTD

      If #Count_S > 0
         do Print-Company-Total
      End-If

      let #Comp_NLGross_QTD_LA = 0
      let #Comp_TXGross_QTD_LA = 0
      let #Comp_EXGross_QTD_LA = 0

      Break
    When = 'Process-File-Totals'
      let $Total_NLGross_QTD = ' '
      If #Total_NLGross_QTD > 0
         do Write-F-Record-SSA-LA
         do Print-File-Totals
      End-If
      Break
  End-Evaluate

End-Procedure LA-Specific

!***********************************************************************
! Procedure MI-Specific
!***********************************************************************

Begin-Procedure MI-Specific

  Evaluate $Proc_Name
    When = 'Open-StateFile'
      let $TFileID = $FileOutputPath || rtrim($ReportID,'ST') || $State || '_TEMP'
      open $TFileID as {FileNumTmp} for-writing record=86:fixed  status=#FileStatus
      do Check-File-Open
      do Create-MI-Array
      let $Qtr_End = $BalanceQuarter || $BalanceYear
      Break
    When = 'Before-Company'

    When = 'Validate-EmployerID-SUT'

      let $Employer_SUT = rtrim(ltrim($Emplr_SUT,' '),' ')
      let #SUT_Length = length($Employer_SUT)

      Evaluate #SUT_Length
        When = 10
          let $StateSUT = substr($Employer_SUT ,1,10)
          Break
        When = 7
          let $StateSUT = substr($Employer_SUT ,1,7) || '000'
          Break
        When-Other
          let $StateSUT = substr($Employer_SUT ,1,10)
          let $Valid_SUT = 'N'
          let $Rsiein_Err_Msg = $Employer_SUT || ' SUT ID must 7 digits in length positions 8 - 10 should hold 3 digit multi-unit number or blanks if not requested. '
          Break
      End-Evaluate

    When = 'Process-Employee-Data'
      do Validate-EmployerID-SUT
      If $National_ID = 'I        '
         let $National_ID = '000000000'
      End-if

      do Format-Number(#NLGross_QTD, $NLGross_QTD,'0999999999')
      put 'W'
          $StateSUT
          $Qtr_End
          $National_ID
          $Last_Name
          $First_Name
          $MidInitial
          $NLGross_QTD
          '0'
      into EMPLOYEE_ARRAY(#File_Cnt_W)
      add 1 to #File_Cnt_W

      do Get-OState-Wages
      If #NLGross_QTD_OS > 0
         put 'O'
             $StateSUT
             $Qtr_End
             $National_ID
             $Last_Name
             $First_Name
             $MidInitial
             $Out_State
             $NLGross_QTD_OS
         into EMPLOYEE_OS_ARRAY(#File_Cnt_O)
         add 1 to #File_Cnt_O
      End-If
      Break
    When = 'After-Company'
      move #Count_E           to $Count_H  099
      let #Count_W = #Count_S + #Count_0
      move #Count_W          to $Count_W  0999999

      divide 100 into #Comp_NLGross_QTD_OS
      let #Comp_NLGross_QTD = #Comp_NLGross_QTD + #Comp_NLGross_QTD_OS
      let $Comp_NLGross_QTD = edit(#Comp_NLGross_QTD * 100,'0999999999999')
      let $Comp_EXGross_QTD = edit(#Comp_EXGross_QTD * 100,'0999999999999')
      add #Comp_NLGross_QTD_OS to #Total_NLGross_QTD

      let $Misc                = '000'
      move #Comp_Month1_Count to $Comp_Month1_Cnt   099999
      move #Comp_Month2_Count to $Comp_Month2_Cnt   099999
      move #Comp_Month3_Count to $Comp_Month3_Cnt   099999

      If #Count_S > 0
         do Print-Company-Total
         put 'H'
             $Count_H
             $StateSUT
             $Qtr_End
             $Comp_NLGross_QTD
             $Comp_EXGross_QTD
             $Comp_Month1_Cnt
             $Comp_Month2_Cnt
             $Comp_Month3_Cnt
             $Misc
             $Count_W
             $Comp_NLGross_QTD

         into EMPLR_ARRAY(#File_Cnt_H)
         add 1 to #File_Cnt_H
         do Get-Array-Data
         let #Count_0             = 0
         let #File_Cnt_H          = 0
         let #File_Cnt_W          = 0
         let #File_Cnt_O          = 0
         let #Comp_NLGross_QTD_OS = 0

      End-If
      Break
    When = 'Format-T-Amounts'
      If #Count_S = 0
         subtract 1 from #Count_E
      End-If
      Break
    When = 'Process-File-Totals'
      let $Total_NLGross_QTD = edit(#Total_NLGross_QTD * 100,'0999999999999')
      move #Count_E to $Count_FH 0999999
      close {FileNumTmp}
      If #Total_NLGross_QTD > 0
         let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State
         open $FileID as {FileNumUI} for-writing record=86:fixed  status=#FileStatus
         do Check-File-Open
         do Write-F-Record-ICESA-MI
         do Read-From-Tempfile
         do Print-File-Totals
      Else
         let #success = delete($TFileID)
      End-If
      Break
  End-Evaluate

End-Procedure MI-Specific

!***********************************************************************
! Procedure NM-Specific
!***********************************************************************
Begin-Procedure NM-Specific

  Evaluate $Proc_Name
    When = 'Get-Runctrl-Parms'
      let $Combine_File = 'N'
      let $WH_Tax_Class = 'AND ((T.TAX_CLASS = ''H'' AND T.LOCALITY = ''NM0001'') OR (T.TAX_CLASS = ''R'' AND T.LOCALITY = ''NM0001ER'') OR (T.TAX_CLASS = ''H'' AND T.LOCALITY = '' ''))'
      Break
    When = 'Open-StateFile'
      Create-Array
      NAME  = FILENAMES
      Size  = 10
      Field = FILEPATH:Char
      Break
    When = 'Before-Company'
      do Validate-EmployerID-SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT = rtrim($Emplr_SUT,' ')
      do Check-Is-String-Numeric($Employer_SUT,#Result)

      If rtrim($Employer_SUT,' ') = ''
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = ' State Unemployment ID missing in Company State Tax Table. '
      End-If

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) >  8
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 99999999.  State Unemployment ID exceeds 8 digits and has been truncated. '
      End-If

      let $Employer_SUT = substr($Emplr_SUT,1,8)
      Break
    When = 'Process-Employee-Data'
      If $File_Open = 'N'
         let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State ||'-' || $Company|| '.xml'
         open $FileID as {FileNumUI} for-writing record=300:vary  status=#FileStatus

         put $FileID
         into FILENAMES(#File_Count)
         add 1 to #File_Count

         Write #File from '<?xml version="1.0" encoding="utf-8" ?>':200
         Write #File from '<Wage_File xmlns="https://ui.dws.state.nm.us/Revenue/WageDetail/WageDetailFile">'
         do Check-File-Open
      End-If

      let $NationalID = &C.NATIONAL_ID
      If $S123 = &TEMP_SSN_MASK or rtrim(&C.NATIONAL_ID,' ') = ''
         Show ''
         let $Message =  'Employee ' || $First_Name || ' ' || $Last_Name || ' in Company ' || $Company || ' has invalid SSN '  || &C.NATIONAL_ID || ' Review the data.'
         Show $Message
      End-If

      let #TXGross_QTD_NM = &A.NLGRS_QTD
      do format-number(#TXGross_QTD_NM, $TXGross_QTD_NM, '999999999999.99')

      do Get-EE-Job
      If instr('CDOPSTV', &JOB1.OFFICER_CD, 1)
         let $Officer = 'Y'
      Else
         let $Officer = 'N'
      End-If

      do Validate-TaxLoc-State

      If $Valid_State = 'Y'
         do Get-Unit-Number
      Else
         Show ''
         let $Unit_Number = '00001'
         let $Message =  'Employee ' ||  $First_Name || ' ' || $Last_Name ||' Tax Location State ' || $Tax_location || ' is not New Mexico so the Reporting Unit has been defaulted to ''00001'''
         Show $Message
      End-If

      do Get-Withholding-Wages
      do format-number(#TaxWH_QTD_NM, $TaxWH_QTD_NM, '999999999999.99')
      add #TaxWH_QTD_NM to #Comp_TaxWH_QTD_NM
      add #WorkersCmpWH_QTD to #Comp_WorkersCmp_NM

      let #Comp_CalcTxDue_NM = ((#Comp_TXGross_QTD/100) * (#UIContribRate/100))

      If #WC_Fee = 0
         let $WC_Fee = '0'
      Else
         do format-number(#WC_Fee, $WC_Fee, '9.9')
      End-If

      let $LastName  = rtrim(ltrim(substr(&B.LAST_NAME,1,30),' '),' ')
      let $FirstName = rtrim(ltrim(substr(&B.FIRST_NAME,1,30),' '),' ')

      If $Month1 = ' '
         let $Month1  = '0'
      End-If
      If $Month2 = ' '
         let $Month2  = '0'
      End-If
      If $Month3 = ' '
         let $Month3  = '0'
      End-If

      let $Year_Qtr = $BalanceYear || $BalanceQuarter

      do Open-XML-Tag('Employee', $EmployeeTag_Open)
      Write #File from $EmployeeTag_Open
      do Build-XML-Line('Employer_Acct_Number', $Employer_SUT, #File)
      do Build-XML-Line('Unit_Number', $Unit_Number, #File)
      do Build-XML-Line('Year_Qtr', $Year_Qtr, #File)
      do Build-XML-Line('Month_1_Employment', $Month1, #File)
      do Build-XML-Line('Month_2_Employment', $Month2, #File)
      do Build-XML-Line('Month_3_Employment', $Month3, #File)
      do Build-XML-Line('Employee_SSN', $NationalID, #File)
      do Build-XML-Line('Employee_Last_Name', $LastName, #File)
      do Build-XML-Line('Employee_First_Name', $FirstName, #File)
      do Build-XML-Line('Employee_Middle_Initial', $MidInitial, #File)
      do Build-XML-Line('UI_Gross_Wage', $TXGross_QTD_NM, #File)
      do Build-XML-Line('NM_Income_Tax_Withheld', $TaxWH_QTD_NM, #File)
      do Build-XML-Line('WC_Fee_Due', $WC_Fee, #File)
      do Build-XML-Line('Owner_Officer_Indicator', $Officer, #File)
      do Build-XML-Line('Adjustment_Reason_Code', '0', #File)
      do Close-XML-Tag('Employee',$EmployeeTag_Close)
      Write #File from $EmployeeTag_Close
      let #TXGross_QTD_NM = 0
      let $File_Open = 'Y'
      Break
    When = 'After-Company'
      do Close-XML-Tag('Wage_File',$WageTag_Close)

      If $File_Open = 'Y'
         Write #File from $WageTag_Close
         close #File
      End-If

      let $File_Open = 'N'
      If #Count_S > 0
         do Print-Company-Total
      Else
         subtract 1 from #Count_E
      End-If

      let #Comp_TaxWH_QTD_NM = 0
      let #Comp_WorkersCmp_NM = 0
      let #Comp_CalcTxDue_NM = 0
      Break
    When = 'Print-Company-Total'
      print '-------------------- Additional State Specific Information --------------------' (+2,3)

      If #TaxWH_QTD_NM > 0
         print 'State Tax Withheld QTD'             (+2,3)
         print ':'                                  (,26)
         print #Comp_TaxWH_QTD_NM                   (,28)   edit 899,999,999.99mi
      End-if

      If #Comp_TaxUI_QTD > 0
         let #Comp_TaxUI_QTD = (#Comp_TaxUI_QTD * 100)
         print 'Taxes Due QTD'             	    (+2,3)
         print ':'                                  (,26)
         print #Comp_TaxUI_QTD             	    (,28)   edit 899,999,999.99mi
      End-if

      If #Comp_CalcTxDue_NM > 0
         print 'Calculated Tax Due QTD'             (+2,3)
         print ':'                                  (,26)
         print #Comp_CalcTxDue_NM             	    (,28)   edit 899,999,999.99mi
      End-if

      If #Comp_WorkersCmp_NM > 0
         print 'Workers Comp Withheld QTD'          (+2,3)
         print ':'                                  (,26)
         print #Comp_WorkersCmp_NM                  (,28)   edit 899,999,999.99mi
      End-if
      Break
    When = 'Process-File-Totals'
      do Print-File-Totals
      let #File_Count = 0
      let #Total      = 0
      Break
   End-Evaluate

End-Procedure NM-Specific

!***********************************************************************
! Procedure OR-Specific
!***********************************************************************
Begin-Procedure OR-Specific

  Evaluate $Proc_Name
    When = 'Get-Runctrl-Parms'
      let $And_Tax_Class = $And_Tax_Class_UI_WH
    When = 'Open-StateFile'
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State
      open $FileID as {FileNumUI} for-writing record=512:fixed  status=#FileStatus
      let $Report_Period = $QtrEndMonth || $ReportYear
      Break
    When = 'Before-Company'
      do Validate-EmployerID-SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT = translate($Emplr_SUT,'- ','')
      If rtrim($Employer_SUT,' ') = ''
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = ' State Unemployment ID missing in Company State Tax Table. '
      End-If
      let $Employer_SUT = rpad($Employer_SUT,7,' ')
      Break
    When = 'After-Emplid'
      If $WriteERec = 'Y'
         If instr($ZipExtsn,'-',1) = 0
            let $ZipExtsn = '    '
         Else
            let $ZipExtsn = substr($ZipExtsn,2,4)
         End-If
         do Write-E-Record-SSA-OR
      End-If
      If substr($National_ID,1,1) = 'I'
         let $National_ID = '000000000'
      End-If

      let $AddrType = 'HOME'
      do Get-EE-Address
      let $Postal = $EE_Postal
      let $Country = $EE_Country
      do Format-Zip
      let $EE_Postal = $Zip
      let $EE_ZipExt = translate($ZipExtsn,'-','')

      uppercase $First_Name
      uppercase $Last_Name
      uppercase $MidInitial
      uppercase $EE_Address1
      uppercase $EE_City

      If #Hours_QTD > 999
         let #Hours_QTD = 999
         do Format-Number(#Hours_QTD, $Hours_QTD,'099')
      Else
         do Format-Number(#Hours_QTD, $Hours_QTD,'099')
         If #Hours_QTD <= 0
           let $Hours_QTD = '000'
           let #Hours_QTD = 0
         End-if
      End-if

      Move $Hours_QTD to #Hours_Tmp
      Add #Hours_Tmp to #Comp_Hours_QTD_OR

      do Format-Number(#NLGross_QTD, $NLGross_QTD,'09999999999')
      do Format-Number(#TaxWH_QTD, $TaxWH_QTD,'09999999999')
      do Write-S-Record-SSA-OR
      let $WriteERec = 'N'
      Break
    When = 'Format-T-Amounts'
      If #Count_S = 0
         subtract 1 from #Count_E
      End-If
      let $WriteERec = 'Y'
      Break
    When = 'After-Company'
      If #Count_S > 0
         move #Comp_NLGross_QTD to #NLGross_QTD_OR
         move #Count_S to #Count_OR
         move #Comp_Hours_QTD_OR to #Hours_QTD_OR
         let $TotalName = 'Company Totals'
         do Print-Total-OR
         let $WriteERec = 'Y'
         add #Comp_Hours_QTD_OR to #Total_Hours_QTD_OR
         let #Comp_Hours_QTD_OR = 0
      End-If
      Break
    When = 'Process-File-Totals'
      move #Total_NLGross_QTD to #NLGross_QTD_OR
      move #Count_F to #Count_OR
      move #Total_Hours_QTD_OR to #Hours_QTD_OR
      let $TotalName = 'File Totals'
      do Print-Total-OR
      Break
   End-Evaluate

End-Procedure OR-Specific

!***********************************************************************
! Procedure PA-Specific
!***********************************************************************
Begin-Procedure PA-Specific

  Evaluate $Proc_Name
    When = 'Get-Runctrl-Parms'
      move &TX.BALANCE_YEAR to $Balance_Year xxxx
      let #Qtr_Begin_Month  = #QtrEndMonth - 2
      move #Qtr_Begin_Month to $Qtr_Begin_Month 09

      let $Qtr_BeginDt = $Balance_Year || '-' || $Qtr_Begin_Month || '-01'

      move '1' to $Year4
      move '-' to $DDelimiter
      do Format-DateTime($PeriodEndDate,$Period_End_Date,{DEFYMD},'','')
      do DTU-DayOfWeek#($Qtr_BeginDt,#Begin_Weekday)

      If #Begin_Weekday <> 1
         let #Beg_Days = #Begin_Weekday - 1
         do DTU-Subtract-Days($Qtr_BeginDt,#Beg_Days,$Earn_Begin_Date)
      Else
         move $Qtr_BeginDt to $Earn_Begin_Date
      End-If

      move '1' to $Year4
      move '-' to $DDelimiter
      do Format-DateTime($Earn_Begin_Date,$Earn_Begin_Dt,{DEFYMD},'','native')
      do DTU-DayOfWeek#($Period_End_Date,#End_Weekday)

      If #End_Weekday <> 7
         let #End_Days = 7 - #End_Weekday
         do DTU-Add-Days($Period_End_Date,#End_Days,$Earn_End_Date)
      Else
         move $Period_End_Date to $Earn_End_Date
      End-If

      move '1' to $Year4
      move '-' to $DDelimiter
      do Format-DateTime($Earn_End_Date,$Earn_End_Dt,{DEFYMD},'','native')

      move 116 to #StateMinimum

      do Create-Weekday-Array
      Break
    When = 'Open-StateFile'
      do Get-State-Tax-Data
      let $Empl_ID_SUT = rtrim(&Employer_ID_SUT,' ')
      let $Empl_ID_SUT = rtrim($Empl_ID_SUT,'M')
      let $Empl_ID_SUT = rtrim($Empl_ID_SUT,'R')
      let $FileID = $FileOutputPath || 'FTP_UC2A_' || $Empl_ID_SUT || '.SSA'
      open $FileID as {FileNumUI} for-writing record=512:fixed  status=#FileStatus
      Break
    When = 'Process-Transmitter-Record'
      move $Contact_Phone to $Transmit_Phone '(XXX)XXX-XXXX'
      If $Trans_Phone_Ext <> ' '
         let $Transmit_Phone = $Transmit_Phone || 'EXT' || $Trans_Phone_Ext
      End-If
      do Write-B-Record-SSA-PA
      Break
    When = 'Before-Company'
      do Validate-EmployerID-SUT
      let $Report_Period = $QtrEndMonth || substr($ReportYear,3,2)
      let $StateSUT_E = $Emplr_SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT = translate($Emplr_SUT,'- ','')
      let $Employer_SUT = substr($Employer_SUT,1,7)
      do Check-Is-String-Numeric($Employer_SUT,#Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT || ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) <> 7
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 9999999.  State Unemployment ID should be 7 digits. '
      End-If
      Break
    When = 'Process-Employee-Data'
      If $WriteERec = 'Y'
         do Write-E-Record-SSA-PA
      End-If
      let $Special_Chars = '~!!.#$%^&*_+|?"-=/``0123456789' || '}' || '{'

      If $Last_Name <> ' '
         let $Last_Name = translate($Last_Name,$Special_Chars,'')
         let $Name = replace($Last_Name,' ','-') || '-'
      End-If

      If $Name_Suffix <> ' '
         let $Name = $Name || translate($Name_Suffix,$Special_Chars,'') || '-'
      End-If

      If $First_Name <> ' '
         let $First_Name = translate($First_Name,$Special_Chars,'')
         let $Name = $Name || replace($First_Name,' ','-')
      End-If

      If $Middle_Name <> ' '
         let $Middle_Name = translate($Middle_Name,$Special_Chars,'')
         let $Name = $Name || '-' || replace($Middle_Name,' ','-')
      End-If

      do Format-Number(#NLGross_QTD,  $NlGrs_QTD_PA,  '099999999999')
      do Get-Paygroup
      do Find-Weeks-Worked
      do Process-Weeks

      If #Worked_Week > 13
         move 13 to #Emp_Weeks
      Else
         move #Worked_Week to #Emp_Weeks
      End-If
      do Format-Number(#Emp_Weeks, $Emp_Weeks, '09')
      do Write-S-Record-SSA-PA
      move '00' to $Emp_Weeks
      move 0    to #Emp_Weeks
      let $WriteERec = 'N'
      Break
    When = 'Format-T-Amounts'
      If #Count_S > 0
         do Write-T-Record-SSA-PA
      Else
         subtract 1 from #Count_E
      End-If
      let $WriteERec = 'Y'
      Break
    When = 'Process-File-Totals'
      do Print-File-Totals
      Break
  End-Evaluate
End-Procedure PA-Specific

!***********************************************************************
! Procedure Create-MI-Array
!***********************************************************************
Begin-Procedure Create-MI-Array

  Create-Array
    Name  = EMPLR_ARRAY
    Size  = {Max_Rows}
    Field = RECORD_TYPE:char
    Field = SEQ:char
    Field = EMPLR_SUT:char
    Field = QTR_END:char
    Field = NLGRS_QTD:char
    Field = EXCESS_QTD:char
    Field = MONTH1:char
    Field = MONTH2:char
    Field = MONTH3:char
    Field = MISC:char
    Field = TOTAL_W:char
    Field = TOTAL_GROSS:char

  Create-Array
    Name  = EMPLOYEE_ARRAY
    Size  = {Max_Rows}
    Field = RECORD_TYPE:char
    Field = EMPLR_SUT:char
    Field = QTR_END:char
    Field = NATIONALID:char
    Field = LAST_NAME:char
    Field = FIRST_NAME:char
    Field = MIDDLE_INITIAL:char
    Field = NLGRS_QTD:char
    Field = FAMILY_STAT:char

  Create-Array
    Name  = EMPLOYEE_OS_ARRAY
    Size  = {Max_Rows}
    Field = RECORD_TYPE:char
    Field = EMPLR_SUT:char
    Field = QTR_END:char
    Field = NATIONALID:char
    Field = LAST_NAME:char
    Field = FIRST_NAME:char
    Field = MIDDLE_INITIAL:char
    Field = STATE:char
    Field = NLGRS_QTD:char

End-Procedure Create-MI-Array

!***********************************************************************
! Procedure Get-OState-Wages
!***********************************************************************
Begin-Procedure Get-OState-Wages

  let #NLGross_QTD_OS = 0
  let $Out_State      = ' '

BEGIN-SELECT
E.STATE
E.NLGRS_QTD

  let $Out_State      = &E.STATE
  let #NLGross_QTD_OS = &E.NLGRS_QTD
  add 1 to #Count_0
  multiply 100 times #NLGross_QTD_OS
  do Format-Number(#NLGross_QTD_OS, $NLGross_QTD_OS,'0999999999')
  add #NLGross_QTD_OS to #Comp_NLGross_QTD_OS

FROM PS_TAX_BALANCE E
WHERE E.EMPLID           = $EmplID
  AND E.COMPANY          = $Company
  AND E.BALANCE_ID       = $Calendar_Year_Id
  AND E.STATE            <> $State
  AND E.STATE            <> '$U'
  AND E.LOCALITY         = ' '
  AND E.TAX_CLASS        = 'U'
  AND E.NLGRS_QTD        > 0
  AND E.BALANCE_YEAR     = &TX.BALANCE_YEAR
  AND E.BALANCE_QTR      = &TX.BALANCE_QTR
  AND E.BALANCE_PERIOD   = (SELECT MAX(E1.BALANCE_PERIOD)
                             FROM PS_TAX_BALANCE E1
                             WHERE E1.EMPLID       = E.EMPLID
                               AND E1.COMPANY      = E.COMPANY
                               AND E1.BALANCE_ID   = E.BALANCE_ID
                               AND E1.BALANCE_YEAR = E.BALANCE_YEAR
                               AND E1.BALANCE_QTR  = E.BALANCE_QTR
                               AND E1.STATE        = E.STATE
                               AND E1.LOCALITY     = E.LOCALITY
                               AND E1.TAX_CLASS    = E.TAX_CLASS)
END-SELECT
End-Procedure Get-OState-Wages

!***********************************************************************
! Procedure Get-Array-Data
!***********************************************************************
Begin-Procedure Get-Array-Data

  let #Total_H = 0
  While #Total_H < #File_Cnt_H
     get $Record_Type
         $Count_H
         $StateSUT
         $Qtr_End
         $Comp_NLGross_QTD
         $Comp_EXGross_QTD
         $Comp_Month1_Cnt
         $Comp_Month2_Cnt
         $Comp_Month3_Cnt
         $Misc
         $Count_W
         $Comp_NLGross_QTD
     from EMPLR_ARRAY(#Total_H)
     add 1 to #Total_H

     do Write-H-Record-ICESA-MI
  End-While

  let #Total_W = 0
  While #Total_W < #File_Cnt_W
     get $Record_Type
         $StateSUT
         $Qtr_End
         $National_ID
         $Last_Name
         $First_Name
         $MidInitial
         $NLGross_QTD
         $Family_Status
     from EMPLOYEE_ARRAY(#Total_W)
     add 1 to #Total_W
     do Write-W-Record-ICESA-MI
  End-While

  let #Total_O = 0
  While #Total_O < #File_Cnt_O
     get $Record_Type
         $StateSUT
         $Qtr_End
         $National_ID
         $Last_Name
         $First_Name
         $MidInitial
         $Out_State
         $NLGross_QTD_OS
     from EMPLOYEE_OS_ARRAY(#Total_O)
     add 1 to #Total_O
     do Write-O-Record-ICESA-MI
  End-While

  Clear-Array Name = EMPLR_ARRAY
  Clear-Array Name = EMPLOYEE_ARRAY
  Clear-Array Name = EMPLOYEE_OS_ARRAY

End-Procedure Get-Array-Data

!***********************************************************************
! Procedure Write-H-Record-ICESA-MI
!***********************************************************************
Begin-Procedure Write-H-Record-ICESA-MI

  write #File1 from $Record_Type:1    ! 1 - 1
                        $Count_H:3    ! 2 - 4
                       $StateSUT:10   ! 5 - 14
                        $Qtr_End:5    ! 15 - 19
               $Comp_NLGross_QTD:13   ! 20 - 32
               $Comp_EXGross_QTD:13   ! 32 - 44
                $Comp_Month1_Cnt:6    ! 45 - 50
                $Comp_Month2_Cnt:6    ! 51 - 56
                $Comp_Month3_Cnt:6    ! 57 - 62
                           $Misc:3    ! 63 - 65
                        $Count_W:7    ! 66 - 72
               $Comp_NLGross_QTD:13   ! 73 - 85

End-Procedure Write-H-Record-ICESA-MI

!***********************************************************************
! Procedure Write-W-Record-ICESA-MI
!***********************************************************************
Begin-Procedure Write-W-Record-ICESA-MI

  write #File1 from $Record_Type:1    ! 1 - 1
                       $StateSUT:10   ! 2 - 11
                        $Qtr_End:5    ! 12 - 16
                    $National_ID:9    ! 17 - 25
                      $Last_Name:16   ! 26 - 41
                     $First_Name:12   ! 42 - 53
                     $MidInitial:1    ! 54 - 54
                    $NLGross_QTD:10   ! 55 - 64
                  $Family_Status:1    ! 65 - 65
         '000000000000000000000':21

End-Procedure Write-W-Record-ICESA-MI

!***********************************************************************
! Procedure Write-O-Record-ICESA-MI
!***********************************************************************
Begin-Procedure Write-O-Record-ICESA-MI

  write #File1 from $Record_Type:1    ! 1 - 1
                       $StateSUT:10   ! 2 - 11
                        $Qtr_End:5    ! 12 - 16
                    $National_ID:9    ! 17 - 25
                      $Last_Name:16   ! 26 - 41
                     $First_Name:12   ! 42 - 53
                     $MidInitial:1    ! 54 - 54
                      $Out_State:2    ! 55 - 56
                 $NLGross_QTD_OS:10   ! 57 - 66
           '0000000000000000000':20

End-Procedure Write-O-Record-ICESA-MI

!***********************************************************************
! Procedure Write-F-Record-ICESA-MI
!***********************************************************************
Begin-Procedure Write-F-Record-ICESA-MI

            write #File from 'F':1       ! 1 - 1
                       $Count_FH:7       ! 2 - 8
              $Total_NLGross_QTD:13      ! 9 - 21

End-Procedure Write-F-Record-ICESA-MI

!***********************************************************************
! Procedure Read-From-Tempfile
!***********************************************************************
Begin-Procedure Read-From-Tempfile

  open $TFileID as {FileNumTmp} for-reading record=86:fixed
  do Check-File-Open
  If #filestatus != 0
     Show 'Unable to open the MI Temporary file ' $TFileID
  Else
     While not #end-file
        Read #File1 into $Record:86
        If #end-file
           break
        End-If
        If substr($Record,1,1) = 'W'
           write #File from $Record:65
        Else
          If substr($Record,1,1) = 'O'
           write #File from $Record:66
          Else
           write #File from $Record:86
          End-If
        End-If
    End-While
     close {FileNumUI}
     close {FileNumTmp}
     let #success = delete($TFileID)
  End-If

End-Procedure Read-From-Tempfile

!***********************************************************************
! Procedure MA-Specific
!***********************************************************************
Begin-Procedure MA-Specific

  Evaluate $Proc_Name
    When = 'Get-Runctrl-Parms'
      do Create-WH-Array
      let $And_Tax_Class = $And_Tax_Class_UI_WH
      Break
    When = 'Before-Company'
      do Validate-EmployerID-SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT   = translate($Emplr_SUT,'- .', '')
      do Check-Is-String-Numeric($Employer_SUT, #Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ' SUT ID must be numeric. '
      End-If

      If length($Employer_SUT) > 8
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 99999999.  State Unemployment ID exceeds 8 digits and has been truncated. '
         let $Employer_SUT   = substr($Employer_SUT ,1,8)
      End-If

      If length($Employer_SUT) < 8
         let $Employer_SUT = lpad($Employer_SUT,8,'0')
      End-If
      let $StateSUT_S = rpad($Employer_SUT,15,' ')
      Break
    When = 'After-Emplid' !On-Break version of Process-Employee-Data
      do Get-EE-Job

      If $Officer_Cd <> 'N'
         let $Owner_Officer = '1'
      Else
         let $Owner_Officer = '0'
      End-If
      let $StateID             = ' '
      let $Gross_Wages_QTD     = $NLGross_QTD
      let $State_Taxable_Wages = $TXGrsWH_QTD
      let $NLGross_QTD         = ' '
      let $EXGross_QTD         = ' '
      let $TXGross_QTD         = ' '
      let $Unit_Div_Loc_cd     = '0000'
      let $S_Blanks4           = '0'
      let $Hours_QTD           = '000'

      let $MA_Co = $Company

      If $MA_Co <> $MA_Co_Prior
         do Validate-EmployerID-SUT
      End-If

      let $MA_Co_Prior = $MA_Co

      If rtrim(ltrim($Gross_Wages_QTD,' '),' ') = ''
         let $Gross_Wages_QTD = ''
         let $Gross_Wages_QTD = rpad($Gross_Wages_QTD,14,'0')
      End-If

      If $Month1 = ' '
         let $Month1  = '0'
      End-If
      If $Month2 = ' '
         let $Month2  = '0'
      End-If
      If $Month3 = ' '
         let $Month3  = '0'
      End-If

      If #Hours_QTD > 999
         let #Hours_QTD = 999
         do Format-Number(#Hours_QTD, $Hours_QTD,'099')
      Else
         do Format-Number(#Hours_QTD, $Hours_QTD,'099')
         If #Hours_QTD <= 0
           let $Hours_QTD = '000'
         End-if
      End-if

      do Write-S-Record-ICESA-MA
      Break
    When = 'After-Company'
      If #Neg_TaxWH_QTD <> 0 or #Neg_TxGrsWH_QTD <> 0
         print '** Total **'              (+2,3)
         print #Neg_TxGrsWH_QTD           (0,18) edit 99,999,999.99mi
         print #Neg_TaxWH_QTD             (0,36) edit 99,999,999.99mi

         move 0 to #Neg_TaxWH_QTD
         move 0 to #Neg_TxGrsWH_QTD
      End-If

      print 'Company Totals'                 (+4,1) Center
      print $Line                            (+1,1)

      print 'No Limit Gross QTD'             (+2,3)
      print ':'                              (,26)
      print #Comp_NLGross_QTD                (,28)   edit 899,999,999.99mi

      print 'State WH Wages QTD'             (+2,3)
      print ':'                              (,26)
      print #Comp_TXGrsWH_QTD                (,28)   edit 899,999,999.99mi

      print 'State Tax Withheld QTD'         (+2,3)
      print ':'                              (,26)
      print #Comp_TaxWH_QTD                  (,28)   edit 899,999,999.99mi

      print 'Employees Reported'             (+2,3)
      print ':'                              (,26)
      print #Count_S                         (,28)   edit 8,999,999

      print 'Month 1 Count'                  (+2,3)
      print ':'                              (,26)
      print #Comp_Month1_Count               (,28)   edit 8,999,999

      print 'Month 2 Count'                  (+2,3)
      print ':'                              (,26)
      print #Comp_Month2_Count               (,28)   edit 8,999,999

      print 'Month 3 Count'                  (+2,3)
      print ':'                              (,26)
      print #Comp_Month3_Count               (,28)   edit 8,999,999

      print '-------------------- Additional State Specific Information --------------------' (+2,3)

      print 'Employer UI Number'             (+2,3)
      print ':'                              (,26)
      print $StateSUT_S                      (,28)

      new-page
      Break
    When = 'Process-File-Totals'
      print 'File Totals'                   (+4,1) Center
      print $Line                            (+1,1)

      print 'No Limit Gross QTD'             (+2,3)
      print ':'                              (,26)
      print #Total_NLGross_QTD               (,28)   edit 899,999,999.99mi

      print 'State WH Wages QTD'             (+2,3)
      print ':'                              (,26)
      print #Total_TXGrsWH_QTD               (,28)   edit 899,999,999.99mi

      print 'State Tax Withheld QTD'         (+2,3)
      print ':'                              (,26)
      print #Total_TaxWH_QTD                 (,28)   edit 899,999,999.99mi

      print 'Employees Reported'             (+2,3)
      print ':'                              (,26)
      print #Count_F                         (,28)   edit 8,999,999

      print 'Month 1 Count'                  (+2,3)
      print ':'                              (,26)
      print #Total_Month1_Cnt                (,28)   edit 8,999,999

      print 'Month 2 Count'                  (+2,3)
      print ':'                              (,26)
      print #Total_Month2_Cnt                (,28)   edit 8,999,999

      print 'Month 3 Count'                  (+2,3)
      print ':'                              (,26)
      print #Total_Month3_Cnt                (,28)   edit 8,999,999

      print 'Employers Reported'             (+2,3)
      print ':'                              (,26)
      print #Count_E                         (,28)   edit 899,999,999

      print 'Output File(s) '                (+2,3)
      print ':'                              (,26)
      print $FileID                          (,28)

      Show ' '
      Show $State ' Output File Created: ' $FileID
      Show ' '

      If $Errors_Found = 'Y'
         Show ''
         let $Errors_Found_AnyState = 'Y'
         let $File_Totals = 'Y'
         do Error-Log
      End-If

      new-page

      Break
  End-Evaluate

End-Procedure MA-Specific

!***********************************************************************
! Procedure ME-Specific
!***********************************************************************
Begin-Procedure ME-Specific

  Evaluate $Proc_Name
    When = 'Get-Runctrl-Parms'
      do Create-WH-Array
      let $And_Tax_Class = $And_Tax_Class_UI_WH
      Break
    When = 'Open-StateFile'
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State || '_WAGE'
      open $FileID as {FileNumUI} for-writing record=275:fixed  status=#FileStatus
      let $FileID_UI = $FileID
      do Check-File-Open
      let $FileID = $FileOutputPath || rtrim($ReportID,'ST') || $State || '_{Taxing_Entity_WH}'
      open $FileID as {FileNumWH} for-writing record=275:fixed  status=#FileStatus
      let $Fileid_Wh = $FileID
      do Check-File-Open
      let $FileID = $FileID_UI
      Break
    When = 'Close-StateFile'
      close {FileNumUI}
      close {FileNumWH}
      Break
    When = 'Process-Transmitter-Record'
      let #File                = {FileNumUI}
      let $Taxing_Entity_A     = 'WAGE'
      let $Year_A              = $ReportYear
      let $Transmitter_State_A = $Transmitter_State
      let $File_CreationDate_A = ' '
      do Write-A-Record-ICESA
      let #File            = {FileNumWH}
      let $Taxing_Entity_A = '{Taxing_Entity_WH}'
      do Write-A-Record-ICESA
      Break
    When = 'Process-Main-A'
      do Store-Company-WH
      Break
    When = 'Process-Main-B'
      do Process-Company-Data-WH
      Break
    When = 'Before-Company'
      do ME-Specific-Runctrl-Parms

      If $File_Taxing_Entity = '{Taxing_Entity_UI}'
         let $Taxing_Entity_E = 'WAGE'
         let #File            = {FileNumUI}
         do Validate-EmployerID-SUT
      Else
         let $Taxing_Entity_E = '{Taxing_Entity_WH}'
         let #File            = {FileNumWH}
         do Validate-EmployerID-SWT
         let $StateSUT_E = ' '
         move #Comp_TaxWH_QTD_Cnt to $Comp_TaxWH_QTD_Cnt 0999
      End-If

      If $Inactive_WH_Acct = 'Y'
         subtract 1 from #Count_E
      Else
         do Write-E-Record-ICESA-ME
      End-If
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_SUT = translate(rtrim(ltrim($Emplr_SUT,' '),' '),'-','')
      do Check-Is-String-Numeric($Employer_SUT, #Result)

      If #Result = 0
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_SUT ||  ': Employer SUT ID for Maine must be numeric. '
      End-If

      If length($Employer_SUT) <> 10
         let $Valid_SUT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SUT || ' SUT ID should be entered as: 9999999999.  State Unemployment ID should be 10 digits. '
      End-If

      let $StateSUT   = $Employer_SUT
      let $StateSUT_E = $Employer_SUT
      let $StateSUT_S = $Employer_SUT
      let $StateSUT_T = $Employer_SUT
      Break
    When = 'Validate-EmployerID-SWT'
      let $Employer_SWT = translate($Emplr_SWT,'- ','')
      do Check-Is-String-Numeric($Employer_SWT, #Result)

      If #Result = 0
         let $Valid_SWT = 'N'
         let $Rsiein_Err_Msg = $Employer_SWT ||  ': Employer SWT ID for Maine must be numeric. '
      End-If

      If length($Employer_SWT) <> 11
         let $Valid_SWT      = 'N'
         let $Rsiein_Err_Msg = $Rsiein_Err_Msg || $Employer_SWT || ' SWT ID should be entered as: 99999999999.  State Withholding ID should be 11 digits. '
      End-If

      let $StateSWT   = $Employer_SWT
      let $StateSWT_E = $Employer_SWT
      let $StateSWT_S = $Employer_SWT
      Break
    When = 'Process-Employee-Data'
      let #File               = {FileNumUI}
      let $Taxing_Entity_S    = 'WAGE'
      let $Seasonal_Indicator = 'N'
      let $Wage_Plan_Cd       = '0'
      let $StateSWT_S         = ' '

      If $Sex = 'F'
         let $Female_Flag = '1'
      Else
         let $Female_Flag = '0'
      End-If

      do Write-S-Record-ICESA-ME
      Break
    When = 'Process-Employee-Data-WH'
      let #File            = {FileNumWH}
      let $Taxing_Entity_S = '{Taxing_Entity_WH}'

      do Write-S-Record-ICESA-ME
      Break
    When = 'Format-T-Amounts'
      If $File_Taxing_Entity = '{Taxing_Entity_UI}'
         let #File            = {FileNumUI}
         let $Taxing_Entity_T = 'WAGE'
         let #Contrib_Due     = #Comp_TaxUI_QTD
         let $Contrib_Due     = edit(#Comp_TaxUI_QTD * 100,'0999999999999')
         let #CssfRate        = #Cssf_Rate
         let #Cssf_Due        = (#Comp_TXGross_QTD / 100) * #CssfRate
         let #Tot_Amt_Due     = #Comp_TaxUI_QTD + #Cssf_Due
         let #CssfRate        = trunc(#CssfRate * 10000,0)
         let $Cssf_Rate       = edit(#CssfRate,'0999')
         let $Cssf_Due        = edit(#Cssf_Due * 100,'09999999999')
         let $Tot_Paymt_Due   = edit(#Tot_Amt_Due * 100,'09999999999')

         If $UI_Tax_Exempt = 'Y'
            let #Contrib_Due   = 0
            let #Cssf_Due      = 0
            let #CssfRate      = 0
            let #UIContribRate = 0
            let $Contrib_Due   = edit(#Contrib_Due,'0999999999999')
            let $Cssf_Due      = edit(#Cssf_Due,'09999999999')
            let $Cssf_Rate     = edit(#CssfRate,'0999')
            let $UIContribRate = edit(#UIContribRate,'0999')
         End-If
      Else
         do ME-Specific-Get-Co-Voucher-Pymts
         let #File              = {FileNumWH}
         let $Taxing_Entity_T   = '{Taxing_Entity_WH}'
         let $StateSUT_T        = ' '
         let $Comp_NLGross_QTD  = ' '
         let $Comp_EXGross_QTD  = ' '
         let $Comp_TXGross_QTD  = ' '
         let #Tax_Whold_Due     = (#Comp_TaxWH_QTD / 100) - #RC_Tot_Vchr_Pmnts
         let #Tot_Paymt_Due     = #Tax_Whold_Due + #RC_Tax_Adj_WH
         let $Comp_TaxWH_QTD    = edit(#Comp_TaxWH_QTD,'09999999999999')
         let $RC_Tot_Vchr_Pmnts = edit(#RC_Tot_Vchr_Pmnts * 100,'09999999999')
         let $Tax_Whold_Due     = edit(#Tax_Whold_Due * 100,'09999999999')
         let $Tot_Paymt_Due     = edit(#Tot_Paymt_Due * 100,'09999999999')
         let $Comp_Month1_Count = ' '
         let $Comp_Month2_Count = ' '
         let $Comp_Month3_Count = ' '
         let $Comp_Month1CntFem = ' '
         let $Comp_Month2CntFem = ' '
         let $Comp_Month3CntFem = ' '
      End-If

      do Write-T-Record-ICESA-ME
      Break
    When = 'After-Company'
      If $File_Taxing_Entity = '{Taxing_Entity_UI}'
         do Print-Company-Total
      Else
         If #Neg_TaxWH_QTD <> 0 or #Neg_TxGrsWH_QTD <> 0
            print '** Total **'              (+2,3)
            print #Neg_TxGrsWH_QTD           (0,18) edit 99,999,999.99mi
            print #Neg_TaxWH_QTD             (0,36) edit 99,999,999.99mi

            move 0 to #Neg_TaxWH_QTD
            move 0 to #Neg_TxGrsWH_QTD
         End-If
         do ME-Specific-Process-R-Records
         do Print-Company-Total
      End-If
      Break
    When = 'Print-Company-Total'
      print '-------------------- Additional State Specific Information --------------------' (+2,3)

      If $File_Taxing_Entity = '{Taxing_Entity_UI}'
         print 'Contributions Due'                  (+2,3)
         print ':'                                  (,26)
         print #Contrib_Due                         (,28)   edit 89,999,999,999.99mi

         print 'CSSF Due '                          (+2,3)
         print ':'                                  (,26)
         print #Cssf_Due                            (,28)   edit 899,999,999.99mi

         print 'Total Amount Due'                   (+2,3)
         print ':'                                  (,26)
         print #Tot_Amt_Due                         (,28)   edit 899,999,999.99mi

         print 'CSSF Rate '                         (+2,3)
         print ':'                                  (,26)
         print #Cssf_Rate                           (,28)   edit 0.999999

         print 'Female Month 1 Count'               (+2,3)
         print ':'                                  (,26)
         print #Comp_Month1CntFem                   (,28)   edit 8,999,999

         print 'Female Month 2 Count'               (+2,3)
         print ':'                                  (,26)
         print #Comp_Month2CntFem                   (,28)   edit 8,999,999

         print 'Female Month 3 Count'               (+2,3)
         print ':'                                  (,26)
         print #Comp_Month3CntFem                   (,28)   edit 8,999,999

         print 'Preparer EIN'                       (+2,3)
         print ':'                                  (,26)
         print $Preparer_EIN                        (,28)

         print 'Processor License Cd'               (+2,3)
         print ':'                                  (,26)
         print $Proc_Lic_Cd                         (,28)

         print 'UC Employer Account'                (+2,3)
         print ':'                                  (,26)
         print $StateSUT                            (,28)

         print '** Note:  Employers who are registered with the Maine Dept. of Labor ' (+4,3)
         print '          as a direct reimbursement account must submit the file     ' (+1,3)
         print '          with 0 (zero) entered for Contributions Due.               ' (+1,3)

      End-If

      If $File_Taxing_Entity = '{Taxing_Entity_WH}'
         print 'State Tax Withheld QTD'             (+2,3)
         print ':'                                  (,26)
         print #Comp_TaxWH_QTD                      (,28)   edit 899,999,999.99mi

         If #RC_Tot_Vchr_Pmnts <> #Comp_TaxWH_QTD
            print '*** Does not equal total of Voucher Payments *** '  (,45)
         End-If

         print 'Voucher Payments'                   (+2,3)
         print ':'                                  (,26)
         print #RC_Tot_Vchr_Pmnts                   (,28)   edit 899,999,999.99mi

         print 'Tax Due Adjustment'                 (+2,3)
         print ':'                                  (,26)
         print #RC_Tax_Adj_WH                       (,28)   edit 899,999,999.99mi

         print 'Tax Withholding Due'                (+2,3)
         print ':'                                  (,26)
         print #Tax_Whold_Due                       (,28)   edit 899,999,999.99mi

         print 'Withholding Account ID'             (+2,3)
         print ':'                                  (,26)
         print $StateSWT                            (,28)

         If $Inactive_WH_Acct = 'Y' and #Comp_TaxWH_QTD <> 0
            let $Errors_Found = 'Y'
            let $Err_Msg5     = 'ERROR PROCESSING ' || $StateName || ' Tax withheld for employee(s) in Company ' || $Company || ' with inactive W/H account number. ' ||
                                'Please review the Summary Report. '
            If $Err_Msg5 <> $Prev_Err_Msg5
               let $Err_Msg = $Err_Msg5
               do Write-Error
               let $Prev_Err_Msg5 = $Err_Msg5
            End-If
         End-If
      End-If
      Break
    When = 'Process-File-Totals'
      move #Count_F to $Count_F 0999999999
      move #Count_E to $Count_E 0999999999

      If $File_Taxing_Entity = '{Taxing_Entity_UI}'
         let #File            = {FileNumUI}
         let $Taxing_Entity_F = 'WAGE'
         let $Total_NLGross_QTD = edit(#Total_NLGross_QTD * 100,'099999999999999')
      Else
         let $Taxing_Entity_F = '{Taxing_Entity_WH}'
         let #File              = {FileNumWH}
         let $Total_NLGross_QTD = edit(#Total_TaxWH_QTD * 100,'099999999999999')
      End-If
      do Write-F-Record-ICESA
      do Print-File-Totals
      let $ReportTitle = {Report_Title_UI}
      Break
  End-Evaluate

End-Procedure ME-Specific

!***********************************************************************
! Procedure ME-Specific-Runctrl-Parms
!***********************************************************************
Begin-Procedure ME-Specific-Runctrl-Parms

  let $Preparer_EIN  = ' '
  let $Proc_Lic_Cd   = ' '
  let $UI_Tax_Exempt = 'N'
  let #Cssf_Rate     = 0
  let #RC_Tax_Adj_WH = 0

BEGIN-SELECT
RCME.RSI_ST_PREPARE_EIN
RCME.RSI_ST_PROC_LIC_CD
RCME.RSI_ST_CSSF_RATE
RCME.RSI_ST_VCHR_PYMNTS
RCME.RSI_ST_TAX_ADJUST
RCME.RSI_ST_TAX_EXEMPT

  let $Preparer_EIN  = edit(&RCME.RSI_ST_PREPARE_EIN,'099999999')
  let $Proc_Lic_Cd   = rtrim(ltrim(&RCME.RSI_ST_PROC_LIC_CD,' '),' ')
  let $UI_Tax_Exempt = &RCME.RSI_ST_TAX_EXEMPT
  move &RCME.RSI_ST_CSSF_RATE  to #Cssf_Rate
  move &RCME.RSI_ST_TAX_ADJUST to #RC_Tax_Adj_WH

FROM PS_RC_RSI810ST_ME RCME
WHERE RCME.OPRID       = $Prcs_OprID
  AND RCME.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND RCME.COMPANY     = $Company
END-SELECT

End-Procedure ME-Specific-Runctrl-Parms

!***********************************************************************
! Procedure ME-Specific-Process-R-Records
!***********************************************************************
Begin-Procedure ME-Specific-Process-R-Records

  print 'Reconciliation Records:'        (+4,3,23)
  print 'Date'                               (,34)
  print 'Withheld'                           (,50)
  print 'Deposited'                          (,67)

BEGIN-SELECT
RCME3.COMPANY
RCME3.RSI_ST_PAY_DT
RCME3.RSI_ST_AMOUNT_WH
RCME3.RSI_ST_AMOUNT_DEP

  do Format-DateTime(&RCME3.RSI_ST_PAY_DT, $out, {DEFCMP}, '', '')
  let $PayDt = substr($out, 5, 2) || substr($out, 7, 2) || substr($out, 1, 4)

  move &RCME3.RSI_ST_AMOUNT_WH  to #AmtWheld
  move &RCME3.RSI_ST_AMOUNT_DEP to #AmtDep

  print $PayDt          (+1,31)  edit xx/xx/xxxx
  print #AmtWheld         (,46)  edit 9,999,999.99mi
  print #AmtDep           (,64)  edit 9,999,999.99mi

  let $AmtWheld = ' '
  let $AmtDep   = edit(#AmtDep * 100,'099999999')

  do Write-R-Record-ICESA

FROM PS_RC_RSI810ST_ME2 RCME3
WHERE RCME3.OPRID       = $Prcs_OprID
  AND RCME3.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND RCME3.COMPANY     = $Company
END-SELECT

End-Procedure ME-Specific-Process-R-Records

!***********************************************************************
! Procedure ME-Specific-Get-Co-Voucher-Pymts
!***********************************************************************
Begin-Procedure ME-Specific-Get-Co-Voucher-Pymts

  let #RC_Tot_Vchr_Pmnts = 0

BEGIN-SELECT
SUM(RCME2.RSI_ST_AMOUNT_DEP) &Ttl_Voucher_Pymt

  move &Ttl_Voucher_Pymt to #RC_Tot_Vchr_Pmnts

FROM PS_RC_RSI810ST_ME2 RCME2
WHERE RCME2.OPRID       = $Prcs_OprID
  AND RCME2.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND RCME2.COMPANY     = $Company
GROUP BY RCME2.OPRID, RCME2.RUN_CNTL_ID, RCME2.COMPANY
END-SELECT

End-Procedure ME-Specific-Get-Co-Voucher-Pymts

!***********************************************************************
! Procedure VT-Specific
!***********************************************************************
Begin-Procedure VT-Specific
  Evaluate $Proc_Name
    When = 'Process-Transmitter-Record'
      let $Year_A              = $ReportYear
      let $Taxing_Entity_A     = '{Taxing_Entity_UI}'
      let $File_CreationDate_A = $File_CreationDate
      let $Transmitter_State_A = $Transmitter_State
      let $Media_Transmitter   = edit(#Auth_ID,'099999')
      do Write-A-Record-ICESA
      Break
   When = 'Process-Authorization-Record'
      let $Internal_Label     = ' '
      let $Density            = ' '
      let $Char_Set           = 'EBC'
      let $Num_Tracks         = ' '
      let $Block_Factor_B     = '25'
      let $Taxing_Entity_B    = '{Taxing_Entity_UI}'
      do Write-B-Record-ICESA-VT
     Break
    When = 'Before-Company'
      let $Address         = ' '
      let $E_City          = ' '
      let $E_State         = ' '
      let $ZipExtsn        = ' '
      let $Zip             = ' '
      let $Wage_Indicator  = ' '
      let $Taxing_Entity_E = '{Taxing_Entity_UI}'
      do Validate-EmployerID-SUT
      Break
    When = 'Validate-EmployerID-SUT'
      let $Employer_StateEIN = translate($Emplr_SUT,'-', '')
      let $Employer_StateEIN = translate($Employer_StateEIN,' ', '')

      If length($Employer_StateEIN) > 7
         let $Valid_SUT = 'N'
         let $Rsiein_Err_Msg = $Employer_StateEIN || ' SUT ID exceeds maximum length in Company State Tax table, format should be 0999999.'
      End-If
      move $Employer_StateEIN to $Employer_StateEIN 0999999
      let $StateSUT   = $Employer_StateEIN
      let $StateSUT_C = $StateSUT
      let $StateSUT_E = $StateSUT
      let $StateSUT_S = '        ' || $Employer_StateEIN
      Break
    When = 'Process-Employee-Data'
      If $WriteERec = 'Y'
         do Write-E-Record-ICESA
      End-If

      do Get-EE-Job
      multiply 100 times #Hourly_Rate
      let $Hourly_Rate = edit(#Hourly_Rate '099999')
      If ($Empl_Type = 'E') or ($Empl_Type = 'H')
        move 'H' to $Empl_Type
      Else
        move 'S' to $Empl_Type
      End-If
      If $Sex <> 'M' and $Sex <> 'F'
         let $Sex = ' '
      End-If
      If $National_ID = 'I        '
         let $National_ID = '000000000'
      End-if

      let $S_Blanks4       = $QtrEndMonth || substr($ReportYear,3,2)
      let $Taxing_Entity_S = '{Taxing_Entity_UI}'
      let $Gross_Wages_QTD = $NLGross_QTD
      let $NLGross_QTD     = ' '
      let $EXGross_QTD     = ' '
      let $TXGross_QTD     = ' '
      let $QtrEndMonth_S   = $QtrEndMonth
      let $ReportYear_S    = $ReportYear
      let $Hours_QTD       = ' '
      let $QtrEndMonth     = ' '
      let $ReportYear      = ' '
      let $Month1          = ' '
      let $Month2          = ' '
      let $Month3          = ' '
      let $Spaces_S        = $Empl_Type || $Sex || '    ' || $Hourly_Rate
      do Write-S-Record-ICESA
      let $ReportYear      = $ReportYear_S
      let $QtrEndMonth     = $QtrEndMonth_S
      let $WriteERec       = 'N'
      Break
    When = 'Format-T-Amounts'
      let $Taxing_Entity_T   = '{Taxing_Entity_UI}'
      let $Comp_GrossWg_QTD  = $Comp_NLGross_QTD
      let $Comp_NLGross_QTD  = ' '
      let $Comp_EXGross_QTD  = ' '
      let $Comp_TXGross_QTD  = ' '
      let $Comp_Month1_Count = ' '
      let $Comp_Month2_Count = ' '
      let $Comp_Month3_Count = ' '
      If #Count_S > 0
         do Write-T-Record-ICESA
      Else
         subtract 1 from #Count_E
      End-If
      Break
    When = 'After-Company'
      let $FTE_Count      = edit(#FTE_Count,'099999')
      let #Total_Due_C    = #Comp_TaxUI_QTD + #Medical_AmtDue
      let $UI_Tax_Due     = edit(#Comp_TaxUI_QTD * 100,'0999999999999')
      let $Medical_AmtDue = edit(#Medical_AmtDue * 100, '09999999999')
      let $Total_Due_C    = edit(#Total_Due_C * 100, '09999999999')
      If #Count_S > 0
         do Print-Company-Total
         let $WriteERec = 'Y'
      End-If
      Break
    When = 'Process-File-Totals'
      move #Count_F to $Count_F 0999999999
      move #Count_E to $Count_E 0999999999
      let $Total_GrossWg_QTD = $Total_NLGross_QTD
      let $Total_NLGross_QTD = ' '
      let $Taxing_Entity_F   = '{Taxing_Entity_UI}'
      do Write-F-Record-ICESA
      If $Errors_Found = 'Y'
         Show ''
         let $Errors_Found_AnyState = 'Y'
         let $File_Totals = 'Y'
         do Error-Log
      End-If
      Break
   End-Evaluate
End-Procedure VT-Specific

!***********************************************************************
! Procedure VT-Specific-Runctrl-Parms
!***********************************************************************
Begin-Procedure VT-Specific-Runctrl-Parms

  let #Medical_AmtDue = 0
  let $No_VT_EE       = 'N'
  let $No_VT_Ops      = 'N'
  let $Own_Change     = 'N'
  let $Addr_Change    = 'N'

BEGIN-SELECT
RCVT.RSI_ST_HLTH_AMT_DU
RCVT.RSI_ST_FTE_CNT
RCVT.RSI_ST_YN_1
RCVT.RSI_ST_YN_2
RCVT.RSI_ST_YN_3
RCVT.RSI_ST_YN_4

  let #Medical_AmtDue = &RCVT.RSI_ST_HLTH_AMT_DU
  let #FTE_Count      = &RCVT.RSI_ST_FTE_CNT
  let $No_VT_EE       = &RCVT.RSI_ST_YN_1
  let $No_VT_Ops      = &RCVT.RSI_ST_YN_2
  let $Own_Change     = &RCVT.RSI_ST_YN_3
  let $Addr_Change    = &RCVT.RSI_ST_YN_4

FROM PS_RC_RSI810ST_VT RCVT
WHERE RCVT.OPRID       = $Prcs_OprID
  AND RCVT.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND RCVT.COMPANY     = $Company
END-SELECT

End-Procedure VT-Specific-Runctrl-Parms

!***********************************************************************
! Procedure Write-A-Record-ICESA
!***********************************************************************
Begin-Procedure Write-A-Record-ICESA

  write #File from 'A':1      ! 1 - 1
               $Year_A:4      ! 2 - 5
   $Transmitter_FedEIN:9      ! 6 - 14
      $Taxing_Entity_A:4      ! 15 - 18
               $Spaces:5      ! 19 - 23
     $Transmitter_Name:50     ! 24 - 73
  $Transmitter_Address:40     ! 74 - 113
     $Transmitter_City:25     ! 114 - 138
  $Transmitter_State_A:2      ! 139 - 153
               $Spaces:13     ! 141 - 153
      $Transmitter_ZIP:5      ! 154 - 158
 $Transmitter_ZipExtsn:5      ! 159 - 163
   $Trans_Contact_Name:30     ! 164 - 193
      $Trans_Phone_Nbr:10     ! 194 - 203
      $Trans_Phone_Ext:4      ! 204 - 207
    $Media_Transmitter:6      ! 208 - 213
             $C-3_Data:1      ! 214 - 214
          $Suffix_Code:5      ! 215 - 219
     $Allocation_Lists:1      ! 220 - 220
     $Service_Agent_ID:9      ! 221 - 229
      $Total_Remit_Amt:13     ! 230 - 242
  $File_CreationDate_A:8      ! 243 - 250
               $Spaces:25     ! 251 - 275

End-Procedure Write-A-Record-ICESA

!***********************************************************************
! Procedure Write-B-Record-SSA-PA
!***********************************************************************
Begin-Procedure Write-B-Record-SSA-PA

  write #File from 'B':1      ! 1 - 1
               $Spaces:4      ! 2 - 5
           $FederalEIN:9      ! 6 - 14
               $Spaces:16     ! 15 - 30
       $Transmit_Phone:24     ! 31 - 54
   $Trans_Contact_Name:30     ! 55 - 84
               $Spaces:191    ! 85 - 275

End-Procedure Write-B-Record-SSA-PA

!***********************************************************************
! Procedure Write-B-Record-ICESA-VT
!***********************************************************************
Begin-Procedure Write-B-Record-ICESA-VT

  write #File from 'B':1      ! 1 - 1
      &TX.BALANCE_YEAR:4      ! 2 - 5
   $Transmitter_FedEIN:9      ! 6 - 14
     $Manufacture_Name:8      ! 15 - 22
       $Internal_Label:2      ! 23 - 24
               $Spaces:1      ! 25 - 25
              $Density:2      ! 26 - 27
             $Char_Set:3      ! 28 - 30
           $Num_Tracks:2      ! 31 - 32
       $Block_Factor_B:2      ! 33 - 34
      $Taxing_Entity_B:4      ! 35 - 38
               $Spaces:108    ! 39 - 146
     $Transmitter_Name:44     ! 147 - 190
  $Transmitter_Address:35     ! 191 - 225
     $Transmitter_City:20     ! 226 - 245
    $Transmitter_State:2      ! 246 - 247
                   $Sp:5      ! 248 - 252
      $Transmitter_ZIP:5      ! 253 - 257
 $Transmitter_ZipExtsn:5      ! 258 - 262
                   $Sp:13     ! 263 - 275

End-Procedure Write-B-Record-ICESA-VT

!***********************************************************************
! Procedure Write-C-Record-ICESA
!***********************************************************************
Begin-Procedure Write-C-Record-ICESA

  write #File from 'C':1      ! 1 - 1
           $StateSUT_C:7      ! 2 - 8
      &TX.Balance_Year:4      ! 9 - 12
       &TX.Balance_Qtr:1      ! 13 - 13
    $Comp_Month1_Count:5      ! 14 - 18
    $Comp_Month2_Count:5      ! 19 - 23
    $Comp_Month3_Count:5      ! 24 - 28
    $Comp_Month3CntFem:5      ! 29 - 33
     $Comp_NLGross_QTD:13     ! 34 - 46
     $Comp_EXGross_QTD:13     ! 47 - 59
     $Comp_TXGross_QTD:13     ! 60 - 72
           $UI_Tax_Due:11     ! 73 - 83
            $FTE_Count:6      ! 84 - 89
       $Medical_AmtDue:11     ! 90 - 100
          $Total_Due_C:11     ! 101 - 111
             $No_VT_EE:1      ! 112 - 112
            $No_VT_Ops:1      ! 113 - 113
           $Own_Change:1      ! 114 - 114
          $Addr_Change:1      ! 115 - 115

End-Procedure Write-C-Record-ICESA

!***********************************************************************
! Procedure Write-E-Record-ICESA
!***********************************************************************
Begin-Procedure Write-E-Record-ICESA

  write #File from 'E':1      ! 1 - 1
           $ReportYear:4      ! 2 - 5
           $FederalEIN:9      ! 6 - 14
               $Spaces:9      ! 15 - 23
         $Company_Name:50     ! 24 - 73
              $Address:40     ! 74 - 113
               $E_City:25     ! 114 - 138
              $E_State:2      ! 139 - 140
               $Spaces:8      ! 141 - 148
             $ZipExtsn:5      ! 149 - 153
                  $Zip:5      ! 154 - 158
               $Spaces:1      ! 159 - 159
      $Employment_Type:1      ! 160 - 160
         $Block_Factor:2      ! 161 - 162
    $Establishment_Num:4      ! 163 - 166
      $Taxing_Entity_E:4      ! 167 - 170
              $StateID:2      ! 171 - 172
           $StateSUT_E:15     ! 173 - 187
          $QtrEndMonth:2      ! 188 - 189
       $Wage_Indicator:1      ! 190 - 190
        $Tax_Type_Code:1      ! 191 - 191
     $Taxing_Entity_E5:5      ! 192 - 196
      $State_Cntrl_Num:7      ! 197 - 203
             $Unit_Num:5      ! 204 - 208
          $E_Blanks_47:47     ! 209 - 217
          $Foreign_Ind:1      ! 256 - 256
             $Blanks_1:1      ! 257 - 257
            $Other_Ein:9      ! 258 - 266
               $Spaces:9      ! 267 - 275

End-Procedure Write-E-Record-ICESA

!***********************************************************************
! Procedure Write-S-Record-ICESA
!***********************************************************************
Begin-Procedure Write-S-Record-ICESA

  write #File from 'S':1      ! 1 - 1
          $National_ID:9      ! 2 - 10
            $Last_Name:20     ! 11 - 30
           $First_Name:12     ! 31 - 42
           $MidInitial:1      ! 43 - 43
              $StateID:2      ! 44 - 45
            $S_Blanks4:4      ! 46 - 49
      $Gross_Wages_QTD:14     ! 50 - 63
          $NLGross_QTD:14     ! 64 - 77
          $EXGross_QTD:14     ! 78 - 91
          $TXGross_QTD:14     ! 92 - 105
        $Dis_Wages_QTD:15     ! 106 - 120
        $Tip_Wages_QTD:9      ! 121 - 129
            $Weeks_QTD:2      ! 130 - 131
            $Hours_QTD:3      ! 132 - 134
               $Spaces:8      ! 135 - 142
      $Taxing_Entity_S:4      ! 143 - 146
           $StateSUT_S:15     ! 147 - 161
      $Unit_Div_Loc_cd:15     ! 162 - 176
  $State_Taxable_Wages:14     ! 177 - 190
            $TaxWH_QTD:14     ! 191 - 204
   $Seasonal_Indicator:2      ! 205 - 206
     $ER_Health_Ins_Cd:1      ! 207 - 207
     $EE_Health_Ins_Cd:1      ! 208 - 208
    $Probationary_Code:1      ! 209 - 209
        $Owner_Officer:1      ! 210 - 210
         $Wage_Plan_Cd:1      ! 211 - 211
               $Month1:1      ! 212 - 212
               $Month2:1      ! 213 - 213
               $Month3:1      ! 214 - 214
          $QtrEndMonth:2      ! 215 - 216
           $ReportYear:4      ! 217 - 220
  $Date_First_Employed:6      ! 221 - 226
   $Date_of_Separation:6      ! 227 - 232
             $Spaces_S:43     ! 233 - 275

End-Procedure Write-S-Record-ICESA

!***********************************************************************
! Procedure Write-T-Record-ICESA
!***********************************************************************
Begin-Procedure Write-T-Record-ICESA

  write #File from 'T':1      ! 1 - 1
              $Count_S:7      ! 2 - 8
      $Taxing_Entity_T:4      ! 9 - 12
     $Comp_GrossWg_QTD:14     ! 13 - 26
     $Comp_NLGross_QTD:14     ! 27 - 40
     $Comp_EXGross_QTD:14     ! 41 - 54
     $Comp_TXGross_QTD:14     ! 55 - 68
   $Comp_Tip_Wages_QTD:13     ! 69 - 81
          $UI_Tax_Rate:6      ! 82 - 87
           $UI_Tax_Due:13     ! 88 - 100
    $Prev_Qtr_Underpay:11     ! 101 - 111
             $Interest:11     ! 112 - 122
              $Penalty:11     ! 123 - 133
       $Credit_Overpay:11     ! 134 - 144
       $ER_Assess_Rate:4      ! 145 - 148
        $ER_Assess_Amt:11     ! 149 - 159
       $EE_Assess_Rate:4      ! 160 - 163
        $EE_Assess_Amt:11     ! 164 - 174
        $Tot_Paymt_Due:11     ! 175 - 185
            $Alloc_Amt:13     ! 186 - 198
     $St_Inc_Tax_Wages:14     ! 199 - 212
       $Comp_TaxWH_QTD:14     ! 213 - 226
    $Comp_Month1_Count:7      ! 227 - 233
    $Comp_Month2_Count:7      ! 234 - 240
    $Comp_Month3_Count:7      ! 241 - 247
            $County_Cd:3      ! 248 - 250
    $Outside_County_EE:7      ! 251 - 257
         $Doc_Ctrl_Num:10     ! 258 - 267
               $Spaces:8      ! 268 - 275

End-Procedure Write-T-Record-ICESA

!***********************************************************************
! Procedure Write-R-Record-ICESA
!***********************************************************************
Begin-Procedure Write-R-Record-ICESA

  write #File from 'R':1      ! 1 - 1
                $PayDt:8      ! 2 - 10
             $AmtWheld:9      ! 10 - 18
               $AmtDep:9      ! 19 - 27
            $State_SUT:10     ! 28 - 37
               $Spaces:238    ! 38 - 276

End-Procedure Write-R-Record-ICESA

!***********************************************************************
! Procedure Write-F-Record-ICESA
!***********************************************************************
Begin-Procedure Write-F-Record-ICESA

  write #File from 'F':1      ! 1 - 1
              $Count_F:10     ! 2 - 11
              $Count_E:10     ! 12 - 21
      $Taxing_Entity_F:4      ! 22 - 25
    $Total_GrossWg_QTD:15     ! 26 - 40
    $Total_NLGross_QTD:15     ! 41 - 55
    $Total_EXGross_QTD:15     ! 56 - 70
    $Total_TXGross_QTD:15     ! 71 - 85
    $Tot_Dis_Wages_QTD:15     ! 86 - 100
    $Tot_Tip_Wages_QTD:15     ! 101 - 115
   $Total_Month1_Count:8      ! 116 - 123
   $Total_Month2_Count:8      ! 124 - 131
   $Total_Month3_Count:8      ! 132 - 139
               $Spaces:136    ! 140 - 275

End-Procedure Write-F-Record-ICESA

!***********************************************************************
! Procedure Write-A-Record-ICESA-CO
!***********************************************************************
Begin-Procedure Write-A-Record-ICESA-CO

  write #File from 'A':1      ! 1 - 1
               $Year_A:4      ! 2 - 5
               $Spaces:9      ! 6 - 14
      $Taxing_Entity_A:4      ! 15 - 18
               $Spaces:5      ! 19 - 23
     $Transmitter_Name:50     ! 24 - 73
  $Transmitter_Address:40     ! 74 - 113
     $Transmitter_City:25     ! 114 - 138
  $Transmitter_State_A:2      ! 139 - 153
               $Spaces:13     ! 141 - 153
      $Transmitter_ZIP:5      ! 154 - 158
 $Transmitter_ZipExtsn:5      ! 159 - 163
   $Trans_Contact_Name:30     ! 164 - 193
      $Trans_Phone_Nbr:10     ! 194 - 203
      $Trans_Phone_Ext:4      ! 204 - 207
    $Transmitter_Email:69     ! 208 - 276

End-Procedure Write-A-Record-ICESA-CO

!***********************************************************************
! Procedure Write-S-Record-ICESA-CO
!***********************************************************************
Begin-Procedure Write-S-Record-ICESA-CO

  write #File from 'S':1      ! 1 - 1
          $National_ID:9      ! 2 - 10
            $Last_Name:20     ! 11 - 30
           $First_Name:12     ! 31 - 42
           $MidInitial:1      ! 43 - 43
              $StateID:2      ! 44 - 45
               $Spaces:18     ! 46 - 63
          $NLGross_QTD:14     ! 64 - 77
               $Spaces:65     ! 78 - 142
      $Taxing_Entity_S:4      ! 143 - 146
           $StateSUT_S:15     ! 147 - 161
      $Unit_Div_Loc_cd:15     ! 162 - 176
               $Spaces:28     ! 177 - 204
   $Seasonal_Indicator:2      ! 205 - 206
               $Spaces:8      ! 207 - 214
          $QtrEndMonth:2      ! 215 - 216
           $ReportYear:4      ! 217 - 220
               $Spaces:56     ! 221 - 276

End-Procedure Write-S-Record-ICESA-CO

!***********************************************************************
! Procedure Write-S-Record-ICESA-MA
!***********************************************************************
Begin-Procedure Write-S-Record-ICESA-MA

  write #File from 'S':1      ! 1 - 1
          $National_ID:9      ! 2 - 10
            $Last_Name:20     ! 11 - 30
           $First_Name:12     ! 31 - 42
           $MidInitial:1      ! 43 - 43
              $StateID:2      ! 44 - 45
            $S_Blanks4:4      ! 46 - 49
      $Gross_Wages_QTD:14     ! 50 - 63
          $NLGross_QTD:14     ! 64 - 77
          $EXGross_QTD:14     ! 78 - 91
          $TXGross_QTD:14     ! 92 - 105
        $Dis_Wages_QTD:15     ! 106 - 120
        $Tip_Wages_QTD:9      ! 121 - 129
            $Weeks_QTD:2      ! 130 - 131
            $Hours_QTD:3      ! 132 - 134
               $Spaces:8      ! 135 - 142
      $Taxing_Entity_S:4      ! 143 - 146
           $StateSUT_S:15     ! 147 - 161
      $Unit_Div_Loc_cd:15     ! 162 - 176
  $State_Taxable_Wages:14     ! 177 - 190
            $TaxWH_QTD:14     ! 191 - 204
   $Seasonal_Indicator:2      ! 205 - 206
     $ER_Health_Ins_Cd:1      ! 207 - 207
     $EE_Health_Ins_Cd:1      ! 208 - 208
    $Probationary_Code:1      ! 209 - 209
        $Owner_Officer:1      ! 210 - 210
         $Wage_Plan_Cd:1      ! 211 - 211
               $Month1:1      ! 212 - 212
               $Month2:1      ! 213 - 213
               $Month3:1      ! 214 - 214
          $QtrEndMonth:2      ! 215 - 216
           $ReportYear:4      ! 217 - 220
  $Date_First_Employed:6      ! 221 - 226
   $Date_of_Separation:6      ! 227 - 232
             $Spaces_S:42     ! 233 - 274

End-Procedure Write-S-Record-ICESA-MA

!***********************************************************************
! Procedure Write-E-Record-ICESA-ME
!***********************************************************************
Begin-Procedure Write-E-Record-ICESA-ME

  write #File from 'E':1      ! 1 - 1
           $ReportYear:4      ! 2 - 5
           $FederalEIN:9      ! 6 - 14
               $Spaces:9      ! 15 - 23
         $Company_Name:50     ! 24 - 73
              $Address:40     ! 74 - 113
               $E_City:25     ! 114 - 138
              $E_State:2      ! 139 - 140
               $Spaces:8      ! 141 - 148
             $ZipExtsn:5      ! 149 - 153
                  $Zip:5      ! 154 - 158
               $Spaces:8      ! 159 - 159
      $Taxing_Entity_E:4      ! 167 - 170
              $StateID:2      ! 171 - 172
           $StateSUT_E:10     ! 173 - 182
               $Spaces:5      ! 183 - 187
          $QtrEndMonth:2      ! 188 - 189
       $Wage_Indicator:1      ! 190 - 190
               $Spaces:18     ! 191 - 208
         $Preparer_EIN:9      ! 209 - 217
          $Proc_Lic_Cd:7      ! 218 - 224
   $Comp_TaxWH_QTD_Cnt:4      ! 225 - 228
               $Spaces:29     ! 229 - 257
           $StateSWT_E:11     ! 258 - 268
               $Spaces:7      ! 269 - 275

End-Procedure Write-E-Record-ICESA-ME

!***********************************************************************
! Procedure Write-S-Record-ICESA-ME
!***********************************************************************
Begin-Procedure Write-S-Record-ICESA-ME

  write #File from 'S':1      ! 1 - 1
          $National_ID:9      ! 2 - 10
            $Last_Name:20     ! 11 - 30
           $First_Name:12     ! 31 - 42
           $MidInitial:1      ! 43 - 43
              $StateID:2      ! 44 - 45
          $QtrEndMonth:2      ! 46 - 49
           $ReportYear:4      ! 48 - 51
               $Spaces:12     ! 52 - 63
          $NLGross_QTD:14     ! 64 - 77
          $EXGross_QTD:14     ! 78 - 91
          $TXGross_QTD:14     ! 92 - 105
               $Spaces:37     ! 106 - 142
      $Taxing_Entity_S:4      ! 143 - 146
           $StateSUT_S:10     ! 147 - 156
               $Spaces:20     ! 157 - 176
               $Spaces:14     ! 177 - 190
            $TaxWH_QTD:14     ! 191 - 204
   $Seasonal_Indicator:1      ! 205 - 205
               $Spaces:5      ! 206 - 210
         $Wage_Plan_Cd:1      ! 211 - 211
               $Month1:1      ! 212 - 212
               $Month2:1      ! 213 - 213
               $Month3:1      ! 214 - 214
           $StateSWT_S:11     ! 215 - 225
          $Female_Flag:1      ! 226 - 226
               $Spaces:49     ! 227 - 275

End-Procedure Write-S-Record-ICESA-ME

!***********************************************************************
! Procedure Write-T-Record-ICESA-ME
!***********************************************************************
Begin-Procedure Write-T-Record-ICESA-ME

  write #File from 'T':1      ! 1 - 1
              $Count_S:7      ! 2 - 8
      $Taxing_Entity_T:4      ! 9 - 12
           $StateSUT_T:10     ! 13 - 22
               $Spaces:4      ! 23 - 26
     $Comp_NLGross_QTD:14     ! 27 - 40
     $Comp_EXGross_QTD:14     ! 41 - 54
     $Comp_TXGross_QTD:14     ! 55 - 68
               $Spaces:19     ! 69 - 87
          $Contrib_Due:13     ! 88 - 100
             $Cssf_Due:11     ! 101 - 111
    $RC_Tot_Vchr_Pmnts:11     ! 112 - 122
        $Tax_Whold_Due:11     ! 123 - 133
               $Spaces:11     ! 134 - 144
        $UIContribRate:4      ! 145 - 148
            $Cssf_Rate:4      ! 149 - 152
               $Spaces:22     ! 153 - 174
        $Tot_Paymt_Due:11     ! 175 - 185
               $Spaces:27     ! 186 - 212
       $Comp_TaxWH_QTD:14     ! 213 - 226
    $Comp_Month1_Count:7      ! 227 - 233
    $Comp_Month2_Count:7      ! 234 - 240
    $Comp_Month3_Count:7      ! 241 - 247
    $Comp_Month1CntFem:7      ! 248 - 254
    $Comp_Month2CntFem:7      ! 255 - 261
    $Comp_Month3CntFem:7      ! 262 - 268
               $Spaces:7      ! 269 - 275

End-Procedure Write-T-Record-ICESA-ME

!***********************************************************************
! Procedure Write-T-Record-SSA-PA
!***********************************************************************
Begin-Procedure Write-T-Record-SSA-PA

  write #File from 'T':1      ! 1 - 1
              $Count_S:7      ! 2 - 8
               $Spaces:253    ! 9 - 261
     $Comp_NLGross_QTD:14     ! 262 - 275

End-Procedure Write-T-Record-SSA-PA

!***********************************************************************
! Procedure Write-A-Record-SSA-LA
!***********************************************************************
Begin-Procedure Write-A-Record-SSA-LA

  write #File from 'RA':2     ! 1 - 2
                $Spaces:214   ! 3 - 216
      $Transmitter_Name:57    ! 217 - 273
   $Transmitter_Address:22    ! 274 - 295
                $Spaces:22    ! 296 - 317
      $Transmitter_City:22    ! 318 - 339
     $Transmitter_State:2     ! 340 - 341
       $Transmitter_ZIP:5     ! 342 - 346
      $Transmitter_Extn:4     ! 347 - 350
                $Spaces:45    ! 351 - 395
    $Trans_Contact_Name:27    ! 396 - 422
       $Trans_Phone_Nbr:15    ! 423 - 437
            $Trans_Extn:5     ! 438 - 442
     $Transmitter_Email:46    ! 443 - 488
       $Transmitter_Fax:10    ! 489 - 498
                $Spaces:14    ! 499 - 512

End-Procedure Write-A-Record-SSA-LA

!***********************************************************************
! Procedure Write-E-Record-SSA-LA
!***********************************************************************
Begin-Procedure Write-E-Record-SSA-LA

  write #File from 'RE':2     ! 1 - 2
            $ReportYear:4     ! 3 - 6
                $Spaces:1     ! 7 - 7
            $FederalEIN:9     ! 8 - 16
                $Spaces:23    ! 17 - 39
          $Company_Name:57    ! 40 - 96
               $Address:22    ! 97 - 118
                $Spaces:22    ! 119 - 140
                $E_City:22    ! 141 - 162
               $E_State:2     ! 163 - 164
                   $Zip:5     ! 165 - 169
              $ZipExtsn:4     ! 170 - 173
                $Spaces:47    ! 174 - 220
                    'B':1     ! 221 - 221
               $StateID:2     ! 222 - 223
        $Report_Peroiod:6     ! 224 - 229
                   '01':2     ! 230 - 231
                $Spaces:3     ! 232 - 234
             $Emplr_SUT:12    ! 235 - 246
                $Spaces:3     ! 247 - 249
                 '0000':4     ! 250 - 253
       $OutOfStateWages:1     ! 254 - 254
                $Spaces:258   ! 255 - 512

End-Procedure Write-E-Record-SSA-LA

!***********************************************************************
! Procedure Write-S-Record-SSA-LA
!***********************************************************************
Begin-Procedure Write-S-Record-SSA-LA

  write #File from 'RS':2     ! 1 - 2
               $StateID:2     ! 3 - 4
                $Spaces:5     ! 5 - 9
           $National_ID:9     ! 10 - 18
             $Last_Name:20    ! 19 - 38
            $First_Name:15    ! 39 - 53
            $MidInitial:15    ! 54 - 68
                $Spaces:128   ! 69 - 196
        $Report_Peroiod:6     ! 197 - 202
         $NLGross_QTD_S:11    ! 203 - 213
         $TXGross_QTD_S:11    ! 214 - 224
                    $Sp:73    ! 225 - 297
         $EXGross_QTD_S:10    ! 298 - 307
                    $Sp:49    ! 308 - 356
                $Month1:1     ! 357 - 357
                $Month2:1     ! 358 - 358
                $Month3:1     ! 359 - 359
           $Hourly_Rate:7     ! 360 - 366
             $Job_Title:80    ! 367 - 446
                    $Sp:66    ! 447 - 512

End-Procedure Write-S-Record-SSA-LA

!***********************************************************************
! Procedure Write-F-Record-SSA-LA
!***********************************************************************
Begin-Procedure Write-F-Record-SSA-LA

  write #File from 'RF':2     ! 1 - 2
                $Spaces:510   ! 3 - 512

End-Procedure Write-F-Record-SSA-LA

!***********************************************************************
! Procedure Write-E-Record-SSA-OR
!***********************************************************************
Begin-Procedure Write-E-Record-SSA-OR

  write #File from 'RE':2     ! 1 - 2
                $Spaces:37    ! 3 - 39
          $Company_Name:57    ! 40 - 96
                $Spaces:22    ! 97 - 118
               $Address:22    ! 119 - 140
                $E_City:22    ! 141 - 162
               $E_State:2     ! 163 - 164
                   $Zip:5     ! 165 - 169
              $ZipExtsn:4     ! 170 - 173
                $Spaces:339   ! 174 - 512

End-Procedure Write-E-Record-SSA-OR

!***********************************************************************
! Procedure Write-E-Record-SSA-PA
!***********************************************************************
Begin-Procedure Write-E-Record-SSA-PA

  write #File from 'E':1      ! 1 - 1
        $Report_Period:4      ! 2 - 5
           $FederalEIN:9      ! 6 - 14
               $Spaces:9      ! 15 - 23
         $Company_Name:50     ! 24 - 73
              $Address:40     ! 74 - 113
               $E_City:25     ! 114 - 138
              $E_State:10     ! 139 - 148
               $Spaces:5      ! 149 - 153
                  $Zip:5      ! 154 - 158
                   'S':1      ! 159 - 159
               $Spaces:9      ! 160 - 168
                  '42':2      ! 168 - 170
               $Spaces:5      ! 171 - 175
           $StateSUT_E:9      ! 176 - 184
               $Spaces:91     ! 185 - 275

End-Procedure Write-E-Record-SSA-PA

!***********************************************************************
! Procedure Write-S-Record-SSA-OR
!***********************************************************************
Begin-Procedure Write-S-Record-SSA-OR

  write #File from 'RS':2     ! 1 - 2
               $StateID:2     ! 3 - 4
                $Spaces:5     ! 5 - 9
           $National_ID:9     ! 10 - 18
            $First_Name:15    ! 19 - 33
            $MidInitial:15    ! 34 - 48
             $Last_Name:20    ! 49 - 68
                $Spaces:26    ! 69 - 94
           $EE_Address1:22    ! 95 - 116
               $EE_City:22    ! 117 - 138
              $EE_State:2     ! 139 - 140
             $EE_Postal:5     ! 141 - 145
             $EE_ZipExt:4     ! 146 - 149
                $Spaces:47    ! 150 - 196
         $Report_Period:6     ! 197 - 202
           $NLGross_QTD:11    ! 203 - 213
                $Spaces:34    ! 214 - 247
          $Employer_SUT:7     ! 248 - 254
                $Spaces:32    ! 255 - 286
             $TaxWH_QTD:11    ! 287 - 297
                $Spaces:40    ! 298 - 337
             $Hours_QTD:3     ! 338 - 340
                $Spaces:172   ! 341 - 512

End-Procedure Write-S-Record-SSA-OR

!***********************************************************************
! Procedure Write-S-Record-SSA-PA
!***********************************************************************
Begin-Procedure Write-S-Record-SSA-PA

  write #File from 'S':1      ! 1 - 1
          $National_ID:9      ! 2 - 10
                 $Name:27     ! 11 - 37
               $Spaces:86     ! 38 - 123
                  '42':2      ! 124 - 125
               $Spaces:2      ! 126 - 127
        $Report_Period:4      ! 128 - 131
         $NlGrs_QTD_PA:12     ! 132 - 143
               $Spaces:9      ! 144 - 152
            $Emp_Weeks:2      ! 153 - 154
               $Spaces:121    ! 155 - 275

End-Procedure Write-S-Record-SSA-PA

!***********************************************************************
! Procedure Open-XML-Tag
!***********************************************************************
Begin-Procedure Open-XML-Tag($xmlTag,:$xmlTagOut)

  let $xmlTagOut = ''
  let $xmlTag = ltrim(rtrim($xmlTag, ' '), ' ')
  let $xmlTagOut = '<' || $xmlTag || '>'

End-Procedure Open-XML-Tag

!***********************************************************************
! Procedure Close-XML-Tag
!***********************************************************************
Begin-Procedure Close-XML-Tag($xmlTag,:$xmlTagOut)

  let $xmlTagOut = ''
  let $xmlTag = ltrim(rtrim($xmlTag, ' '), ' ')
  let $xmlTagOut = '</' || $xmlTag || '>'

End-Procedure Close-XML-Tag

!***********************************************************************
! Procedure Write-XML-Data
!***********************************************************************
Begin-Procedure Write-XML-Data(#File,$xmlElement)

  Write #File from $xmlElement

End-Procedure Write-XML-Data

!***********************************************************************
! Procedure Build-XML-Line
!***********************************************************************
Begin-Procedure Build-XML-Line($xmlTag, $xmlValue,#File)

  let $xmlElement = ''
  do Convert-Special-Char($xmlValue, $xmlValueOut)
  let $xmlData = $xmlValueOut
  do Open-XML-Tag($xmlTag, $xmlTagOpen)
  do Close-XML-Tag($xmlTag,$xmlTagClose)

  let $xmlElement = $xmlTagOpen || $xmlData || $xmlTagClose

  do Write-XML-Data(#File,$xmlElement)

End-Procedure Build-XML-Line

!***********************************************************************
! Procedure Get-EE-Address
!***********************************************************************
Begin-Procedure Get-EE-Address

  let $AddrFound   = 'N'
  let $EE_Address1 = ''
  let $EE_Address2 = ''
  let $EE_City     = ''
  let $EE_State    = ''
  let $EE_Country  = ''
  let $EE_Postal   = ''

BEGIN-SELECT
ADDR.ADDRESS1
ADDR.ADDRESS2
ADDR.CITY
ADDR.STATE
ADDR.COUNTRY
ADDR.POSTAL

  let $AddrFound   = 'Y'
  let $EE_Address1 = &ADDR.Address1
  let $EE_Address2 = &ADDR.Address2
  let $EE_City     = &ADDR.City
  let $EE_State    = &ADDR.State
  let $EE_Country  = &ADDR.Country
  let $EE_Postal   = &ADDR.Postal

FROM PS_ADDRESSES ADDR
WHERE ADDR.EMPLID       = $Emplid
  AND ADDR.ADDRESS_TYPE = 'HOME'
  AND ADDR.EFFDT        = (SELECT MAX(AD1.EFFDT)
                           FROM PS_ADDRESSES AD1
                           WHERE AD1.EMPLID      = ADDR.EMPLID
                            AND AD1.ADDRESS_TYPE = ADDR.ADDRESS_TYPE
                            AND AD1.EFFDT       <= $AsOfToday)
END-SELECT

End-Procedure Get-EE-Address

!***********************************************************************
! Procedure Get-Paygroup
!***********************************************************************
Begin-Procedure Get-Paygroup

  move 0  to #i_Max
  move '' to $Emp_Paygroup

  If $Load_Paygroups = 'Y'
     move 0 to #i
     While #i <= #Max_Days
       put ' ' into DAYS(#i) PAYGROUP(0)
       add 1 to #i
     End-While
     move 0  to #Max_Days
     move '' to $Prev_Paygroup
     move '' to $Load_Paygroups
  End-If

BEGIN-SELECT
PC.COMPANY
PC.PAYGROUP
PCB.BALANCE_YEAR
PCB.BALANCE_PERIOD
PC.PAY_END_DT
P.EMPLID
P.OFF_CYCLE
P.PAGE_NUM
P.LINE_NUM
P.SEPCHK

  If instr($Emp_Paygroup, &PC.PAYGROUP, 1) = 0
     If $Emp_Paygroup = ''
        move &PC.PAYGROUP to $Emp_Paygroup
     Else
        let $Emp_Paygroup = $Emp_Paygroup || '*' || &PC.PAYGROUP
     End-If
  End-If

  If &PC.PAYGROUP <> $Prev_Paygroup
     move 0 to #Days_Index

     While #Days_Index <= #Max_Days
       get $PayGroup from DAYS(#DAYS_INDEX) PAYGROUP(0)
       If $PayGroup = &PC.PAYGROUP
          Break
       Else
          If #Days_Index = #Max_Days
             put &PC.PAYGROUP INTO DAYS(#DAYS_INDEX) PAYGROUP(0)
             do Find-Work-Schedule
             do Load-Schedule-Days
             add 1 to #Max_Days

             If #Max_Days > 7
                move 'Y' to $Load_Paygroups
             End-If
             Break
          Else
             add 1 to #Days_Index
          End-If
       End-If
     End-While
     move &PC.PAYGROUP to $Prev_Paygroup
  End-If

  do Process-Pay-Earnings

FROM PS_PAY_CALENDAR PC, PS_PAY_CAL_BAL_ID PCB, PS_PAY_CHECK P
WHERE PC.COMPANY         = PCB.COMPANY
  AND PC.PAYGROUP        = PCB.PAYGROUP
  AND PC.PAY_END_DT      = PCB.PAY_END_DT
  AND PCB.BALANCE_ID     = $Calendar_Year_Id
  AND P.EMPLID           = $EmplID
  AND P.COMPANY          = $Company
  AND PC.PAY_BEGIN_DT   <= $Earn_End_Dt
  AND PC.PAY_END_DT     >= $Earn_Begin_Dt
  AND P.COMPANY          = PC.COMPANY
  AND P.PAYGROUP         = PC.PAYGROUP
  AND P.PAY_END_DT       = PC.PAY_END_DT
  AND P.PAYCHECK_NBR    <> 0
  AND P.PAYCHECK_STATUS IN ('F','R','A')
ORDER BY PC.PAY_END_DT
END-SELECT

End-Procedure Get-Paygroup

!***********************************************************************
! Procedure Process-Pay-Earnings
!***********************************************************************
Begin-Procedure Process-Pay-Earnings

BEGIN-SELECT
E.EARNS_BEGIN_DT
E.EARNS_END_DT
E.ADDL_NBR
E.REG_HRLY_EARNS
E.OT_HRLY_EARNS
E.REG_EARNS

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime(&E.EARNS_BEGIN_DT,$Earnings_BeginDt,{DEFYMD},'','')

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime(&E.Earns_End_Dt,$Earnings_EndDt,{DEFYMD},'','')

  do DTU-Diff-Days($Earnings_BeginDt, $Earnings_EndDt, #Earnings_Days)
  add 1 to #Earnings_Days
  do DTU-Diff-Days($Qtr_BeginDt, $Earnings_BeginDt, #i_Min)
  let #temp_Max = #i_Min + #Earnings_Days + #Begin_Weekday - 1

  If #temp_Max > 99
     move 99 to #temp_Max
  End-If

  If #temp_Max > #i_Max
     move #temp_Max to #i_Max
  End-If

  If #i_Min < 0
     move 1 to #i_Min
     let #Earns_Begin_Day = 1
  Else
     do DTU-DayOfWeek#($Earnings_BeginDt,#Earns_Begin_Day)
     let #i_Min = #i_Min + #Begin_Weekday
  End-If

  do Process-Other-Earnings

  let #Emp_Earns = &E.REG_HRLY_EARNS + &E.OT_HRLY_EARNS + &E.REG_EARNS + #Other_Earns

  If #Emp_Earns > 0
     do Load-Earnings
  End-If

FROM PS_PAY_EARNINGS E
WHERE E.COMPANY    = &PC.COMPANY
  AND E.PAYGROUP   = &PC.PAYGROUP
  AND E.PAY_END_DT = &PC.PAY_END_DT
  AND E.OFF_CYCLE  = &P.OFF_CYCLE
  AND E.PAGE_NUM   = &P.PAGE_NUM
  AND E.LINE_NUM   = &P.LINE_NUM
  AND E.SEPCHK     = &P.SEPCHK
  AND E.STATE      = $State
ORDER BY E.ADDL_NBR
END-SELECT

End-Procedure Process-Pay-Earnings

!***********************************************************************
! Procedure Process-Other-Earnings
!***********************************************************************
Begin-Procedure Process-Other-Earnings

  move 0 to #Other_Earns

BEGIN-SELECT
ER.OTH_EARNS

  let #Other_Earns = #Other_Earns + &ER.OTH_EARNS

FROM PS_PAY_OTH_EARNS ER
WHERE ER.COMPANY    = &PC.Company
  AND ER.PAYGROUP   = &PC.PAYGROUP
  AND ER.PAY_END_DT = &PC.PAY_END_DT
  AND ER.OFF_CYCLE  = &P.OFF_CYCLE
  AND ER.PAGE_NUM   = &P.PAGE_NUM
  AND ER.LINE_NUM   = &P.LINE_NUM
  AND ER.SEPCHK     = &P.SEPCHK
  AND ER.ADDL_NBR   = &E.ADDL_NBR
END-SELECT

End-Procedure Process-Other-Earnings

!***********************************************************************
! Procedure Find-Work-Schedule
!***********************************************************************
Begin-Procedure Find-Work-Schedule

BEGIN-SELECT
WS.WORK_SCHEDULE

  put &WS.WORK_SCHEDULE INTO DAYS(#DAYS_INDEX) WORK_SCHEDULE(0)

FROM PS_PAYGROUP_TBL WS
WHERE WS.COMPANY  = &PC.Company
  AND WS.PAYGROUP = &PC.PAYGROUP
  AND WS.EFFDT    = (SELECT MAX(WS1.EFFDT)
                     FROM PS_PAYGROUP_TBL WS1
                     WHERE WS1.COMPANY    = WS.COMPANY
                       AND WS1.PAYGROUP   = WS.PAYGROUP
                       AND WS1.EFF_STATUS = 'A'
                       AND WS1.EFFDT     <= &PC.Pay_End_Dt)
END-SELECT

End-Procedure Find-Work-Schedule

!***********************************************************************
! Procedure Load-Earnings
!***********************************************************************
Begin-Procedure Load-Earnings

  get $Work_Sched from DAYS(#Days_Index) WORK_SCHEDULE(0)
  let #Week_day = #Earns_Begin_Day

  move 0 to #Work_Day
  move 1 to #i

  While #i <= #Earnings_Days
    let $WorkDay = {ps-substr}($Work_Sched,#Week_day,1)

    If $WorkDay = 'Y'
       add 1 to #Work_Day
    End-If
    add 1 to #i

    If #Week_day <> 7
       add 1 to #Week_day
    Else
       move 1 to #Week_day
    End-If
  End-While

  If #Work_Day > 0
     let #Earnings_Day = #Emp_Earns / #Work_Day
     let #i = #i_Min

     While #i <= #temp_Max
       get $WorkDay from DAYS(#Days_Index) WORK_DAY(#i)
       If $WorkDay = 'Y'
          array-add #Earnings_Day to DAYS(#Days_Index) EARNINGS(#i)
       End-If
       add 1 to #i
     End-While
  End-If

End-Procedure Load-Earnings

!***********************************************************************
! Procedure Find-Weeks-Worked
!***********************************************************************
Begin-Procedure Find-Weeks-Worked

  move 0 to #Week_Wages

  move 1 to #i

  While #i < #i_Max
    move 0 to #j
    move 0 to #Earnings

    While #j < #Max_Days
      get #Week_day #Week #Temp_Earns
        from DAYS(#j) WEEK_DAY(#i) WEEK(#i) EARNINGS(#i)
      add #Temp_Earns to #Earnings

      add 1 to #j
    End-While

    If #Week <> 0
       If #Week_day = 1
          move #Earnings to #Week_Wages
       Else
          add #Earnings to #Week_Wages
       End-If

       If (#StateMinimum = 0 and #Week_Wages > 0) or
          (#StateMinimum > 0 and #Week_Wages >= #StateMinimum)

          If (#Week = 1 and #Begin_Weekday < 5)
             or (#Week = 14 and #End_Weekday > 3)
             or (#Week > 1 and #Week < 14)
             put 'X' into WEEKS(0) WORKED(#Week)
          End-If
          move 0 to #Week_Wages
          let #i = #i - #Week_day + 8
       Else
          add 1 to #i
       End-If
    Else
       add 1 to #i
    End-If
  End-While

End-Procedure Find-Weeks-Worked

!***********************************************************************
! Procedure Process-Weeks
!***********************************************************************
Begin-Procedure Process-Weeks

  move 0 to #Worked_Week
  move 1 to #i

  While #i < 15
    get $Worked from WEEKS(0) WORKED(#i)

    If $Worked = 'X'
       add 1 to #Worked_Week
    End-If
    add 1 to #i
  End-While

  move 1 to #i
  While #i < 15
    put ' ' into WEEKS(0) WORKED(#i)
    add 1 to #i
  End-While

  move 0 to #j
  While #j < #Max_Days
    get $Paygroup from DAYS(#j) PayGroup
    If instr($Emp_Paygroup, $PayGroup, 1) <> 0
       move 1 to #i
       While #i <= #i_Max
         put 0 into DAYS(#j) EARNINGS(#i)
         add 1 to #i
       End-While
    End-If
    add 1 to #j
  End-While

End-Procedure Process-Weeks

!***********************************************************************
! Procedure Load-Schedule-Days
!***********************************************************************
Begin-Procedure Load-Schedule-Days

  move 1 to #i
  move 1 to #j
  move 1 to #Week

  do DTU-Diff-Days($Earn_Begin_Date, $Earn_End_Date, #Days)
  add 1 to #Days

  While #i <= #Days
    let $WorkDay = {ps-substr}(&WS.WORK_SCHEDULE,#j,1)
    put #j #Week $WorkDay into DAYS(#Days_Index) WEEK_DAY(#i) WEEK(#i) WORK_DAY(#i)

    add 1 to #i
    If #j = 7
       move 1 to #j
       add  1 to #Week
    Else
       add  1 to #j
    End-If
  End-While

  If #j = 1
     move 7 to #j
  Else
     subtract 1 from #j
  End-If

End-Procedure Load-Schedule-Days

!***********************************************************************
! Procedure Create-Weekday-Array
!***********************************************************************
Begin-Procedure Create-Weekday-Array

  If $Wday_Array_Created <> 'Y'
     Create-Array
       Name  = WEEKS
       Size  = 1
       Field = WORKED:char:15

     Create-Array
       Name  = DAYS
       Size  = 10
       Field = PAYGROUP:char:1
       Field = WORK_SCHEDULE:char:1
       Field = WEEK_DAY:number:100
       Field = WEEK:number:100
       Field = WORK_DAY:char:100
       Field = EARNINGS:number:100
  Else
     Clear-Array Name = WEEKS
     Clear-Array Name = DAYS
  End-If

  let $Wday_Array_Created = 'Y'

End-Procedure Create-Weekday-Array

!***********************************************************************
! Procedure Show-DebugA-Statements
!***********************************************************************
Begin-Procedure Show-DebugA-Statements

  Show ' '
  Show '********** Initialization Data ***************'
  Show '$Taxbalance_Person       = |' $Taxbalance_Person '|'
  Show '$And_Perstatus           = |' $And_Perstatus     '|'
  Show 'First Day of the Quarter = |' $Qtr_First_Day     '|'
  Show 'Last Day of the Quarter  = |' $Qtr_Last_Day      '|'
  Show '12th of First Month      = |' $12th_1stMonth     '|'
  Show '12th of Second Month     = |' $12th_2ndMonth     '|'
  Show '12th of Third Month      = |' $12th_3rdMonth     '|'
  Show '$Earns_Where             = |' $Earns_Where       '|'
  Show '**********************************************'
  Show ' '

End-Procedure Show-DebugA-Statements

!***********************************************************************
! Procedure Show-DebugB-Statements
!***********************************************************************
Begin-Procedure Show-DebugB-Statements

  Show ' '
  Show '************** Company Data ******************'
  Show '$Company_Name           = |' $Company_Name  '|'
  Show '$Address                = |' $Address       '|'
  Show '$E_City                 = |' $E_City        '|'
  Show '$E_State                = |' $E_State       '|'
  Show '$Zip                    = |' $Zip           '|'
  Show '$ZipExtsn               = |' $ZipExtsn      '|'
  Show '$FederalEIN             = |' $FederalEIN    '|'
  Show '$Emplr_SUT              = |' $Emplr_SUT     '|'
  Show '$Emplr_SWT              = |' $Emplr_SWT     '|'
  Show '$UIContribRate          = |' $UIContribRate '|'
  Show '**********************************************'
  Show ' '

End-Procedure Show-DebugB-Statements

!***********************************************************************
! Procedure Show-DebugC-Statements
!***********************************************************************
Begin-Procedure Show-DebugC-Statements

  Show ' '
  Show '********** Employee Data ***************'
  Show 'Emplid            = |' $Emplid      '|'
  Show 'Last Name         = |' $Last_Name   '|'
  Show 'First Name        = |' $First_Name  '|'
  Show 'Middle Initial    = |' $MidInitial  '|'
  Show 'National ID       = |' $National_ID '|'
  Show 'Tax Class         = |' $Tax_Class   '|'
  Show 'Total Wages       = |' $NLGross_QTD '|'
  Show 'Taxable Wages     = |' $TXGross_QTD '|'
  Show 'Excess Wages      = |' $EXGross_QTD '|'
  Show 'Tax QTD UI        = |' #TaxUI_QTD   '|'
  Show 'Tax QTD WH        = |' $TaxWH_QTD   '|'
  Show 'Month 1 Count     = |' $Month1      '|'
  Show 'Month 2 Count     = |' $Month2      '|'
  Show 'Month 3 Count     = |' $Month3      '|'
  Show 'QTD Hours         = |' #HRS_QTD     '|'
  Show '$ErrMsg           = |' $ErrMsg      '|'
  Show '****************************************'
  Show ' '

End-Procedure Show-DebugC-Statements

!***********************************************************************
! Procedure Show-DebugD-Statements
!***********************************************************************
Begin-Procedure Show-DebugD-Statements

  Show ' '
  Show '************ Transmitter Data ****************'
  Show 'Transmitter Company      = |' $Company              '|'
  Show 'Company Name             = |' $Transmitter_Name     '|'
  Show 'Federal EIN              = |' $Transmitter_FedEIN   '|'
  Show 'Address                  = |' $Transmitter_Address  '|'
  Show 'City                     = |' $Transmitter_City     '|'
  Show 'State                    = |' $Transmitter_State_A  '|'
  Show 'ZIP                      = |' $Transmitter_ZIP      '|'
  Show 'ZIP Extension            = |' $Transmitter_ZipExtsn '|'
  Show 'Transmitter Contact      = |' $Trans_Contact_Name   '|'
  Show 'Transmitter Phone        = |' $Trans_Phone_Nbr      '|'
  Show 'Transmitter Phone Ext    = |' $Trans_Phone_Ext      '|'
  Show 'File Creation Date       = |' $File_CreationDate    '|'
  Show '**********************************************'
  Show ' '

End-Procedure Show-DebugD-Statements

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Date math procedures
