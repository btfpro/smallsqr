!************************************************************************
!  GETFMV:  GET FMV DAILY PRICES
!************************************************************************                                                                      !
!               Confidentiality Information:
!
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2007/01/30:02:33:58                                 
!       $Release:  HR9                                                 
!    $Resolution:  689716                                              
!
!************************************************************************

#include 'setenv.sqc'    !Set environment

!************************************************************************
! Procedure:  Get-FMV_Prices                                        
! Descr:      This procedure calculates FMV Prices. We provide the   
!             FMV method, Stock id and FMV Date and function returns
!             the FMV price
!
!             We provide the FMV method, Stock id and FMV Date and 
!             function returns the FMV price.
!************************************************************************
begin-procedure Get_FMV_Prices ($FMVMETHOD,$STOCKID,$FMVDATE,$HOLIDAY,$WEEKEND,:#FINALFMV)

let #FINALFMV = 0
let #Count = 0

!**********************************************************************
! Retrieve trading day based on day passed
!**********************************************************************
begin-Select
A.ST_DAY_TYPE

  let $DayType = &a.st_day_type
  let #Count = #Count + 1
  
FROM  PS_ST_DAILY_PRICES A
WHERE A.STOCK_ID  = $STOCKID
  AND A.ST_FMV_DT = $FMVDATE
end-Select

!**********************************************************************
! Based on day type and rule, retrieve the applicable trading day.
!**********************************************************************

 evaluate $DayType
    when = 'HOL'
       if $Holiday = 'P'

          while $DayType <> 'TRD'
             do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
             do dtu-subtract-days     ($FMVDATE, 1, $FMVDATE)
             do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)

             do Get-Day-Type ($StockID,$FmvDate, $Daytype)

             if $DayType = ''
                show 'The FMV Date of ' noline
                show $FmvDate   noline
                show ' is not in the Daily Prices Table'
             end-if  
                          
          end-while

       else

          while $DayType <> 'TRD'
             do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
             do dtu-add-days          ($FMVDATE, 1, $FMVDATE)
             do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)
 
             do Get-Day-Type ($StockID,$FmvDate, $Daytype)

             if $DayType = ''
                show 'The FMV Date of ' noline
                show $FmvDate   noline
                show ' is not in the Daily Prices Table'
             end-if  
             
          end-while
       end-if 
    break
       
    when = 'SUN'
       evaluate $Weekend

          when = '1'
          when = '3' 

             while $DayType <> 'TRD'
                do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
                do dtu-subtract-days     ($FMVDATE, 1, $FMVDATE)
                do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)

                do Get-Day-Type ($StockID,$FmvDate, $Daytype)
                
                if $DayType = ''
                   show 'The FMV Date of ' noline
                   show $FmvDate   noline
                   show ' is not in the Daily Prices Table'
                end-if  
                               
             end-while
          break
    
          when = '2'
          when = '4'

             while $DayType <> 'TRD'
                do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
                do dtu-add-days          ($FMVDATE, 1, $FMVDATE)
                do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)

                do Get-Day-Type ($StockID,$FmvDate, $Daytype)

                if $DayType = ''
                   show 'The FMV Date of ' noline
                   show $FmvDate   noline
                   show ' is not in the Daily Prices Table'
                end-if  
               
             end-while
          break

       end-evaluate    
    break

    when = 'SAT'
       evaluate $Weekend

          when = '1'
          when = '4' 

             while $DayType <> 'TRD'
                do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
                do dtu-subtract-days     ($FMVDATE, 1, $FMVDATE)
                do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)
                          
                do Get-Day-Type ($StockID,$FmvDate, $Daytype)
                
                if $DayType = ''
                   show 'The FMV Date of ' noline
                   show $FmvDate   noline
                   show ' is not in the Daily Prices Table'
                end-if  
                               
             end-while
          break
    
          when = '2'
          when = '3'

             while $DayType <> 'TRD'
                do Convert-To-DTU-Date   ($FMVDATE,    $FMVDATE)
                do dtu-add-days          ($FMVDATE, 1, $FMVDATE)
                do Convert-From-DTU-Date ($FMVDATE,    $FMVDATE)

                do Get-Day-Type ($StockID,$FmvDate, $Daytype)
                
                if $DayType = ''
                   show 'The FMV Date of ' noline
                   show $FmvDate   noline
                   show ' is not in the Daily Prices Table'
                end-if  

             end-while
          break

       end-evaluate    
    break
 end-evaluate
 
!**********************************************************************
! Go get the FMV Rules for the current FMV Method (&FMVMETHOD)
!**********************************************************************

 let $Mthd = 'N'
begin-Select
G.EFFDT
G.ST_PRICE_TYPE
G.CURRENT_PRIOR_DAY
G.FMV_AVERAGE_DAYS

 let $Mthd = 'Y'
 
FROM PS_ST_FMV_MTHD_TBL  G
WHERE G.FMV_METHOD = $FMVMETHOD
  AND G.EFFDT      = (SELECT MAX(EFFDT) 
                      FROM   PS_ST_FMV_MTHD_TBL
                      WHERE  FMV_METHOD = G.FMV_METHOD)
end-Select

if $Mthd = 'N'
   show 'FMV Method ' noline
   show $FMVMETHOD   noline
   show ' was not found in the FMV Method Table'
end-if

if (&G.CURRENT_PRIOR_DAY) = 'P'  !Prior date type

  do Convert-To-DTU-Date  ($FMVDATE,    $FMVDATE)
  do dtu-subtract-days    ($FMVDATE, 1, $FMVDATE)
  do Convert-From-DTU-Date($FMVDATE,    $FMVDATE)
  
  do Get-Day-Type ($StockID,$FmvDate, $Daytype)
  do Get-Min-Date ($StockID, $MinFMVDate)
  
  if $DayType = ''
     show 'The FMV Date of ' noline
     show $FmvDate   noline
     show ' is not in the Daily Prices Table'
  end-if  

!*******************************************************
! Only want to retrieve for type of Trading Day (TRD)
!*******************************************************
   
   while $DAYTYPE <> 'TRD' and $FMVDATE >= $MinFMVDate
      do Convert-To-DTU-Date  ($FMVDATE,    $FMVDATE)
      do dtu-subtract-days    ($FMVDATE, 1, $FMVDATE)
      do Convert-From-DTU-Date($FMVDATE,    $FMVDATE)

      do Get-Day-Type ($StockID,$FmvDate, $Daytype)

     if $DayType = ''
        show 'The FMV Date of ' noline
        show $FmvDate   noline
        show ' is not in the Daily Prices Table'
     end-if  
 
   end-while

end-if

let #count = 1

while #count <= &G.FMV_AVERAGE_DAYS

   add 1 to #count

   evaluate &G.ST_PRICE_TYPE

      when = 'B'

begin-Select

J.BID_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.BID_PRICE

      break


      when = 'A'

begin-Select

J.ASK_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.ASK_PRICE

      break


      when = 'O'

begin-Select

J.OPEN_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.OPEN_PRICE

      break


      when = 'C'

begin-Select

J.CLOSE_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.CLOSE_PRICE

      break


      when = 'H'

begin-Select

J.HIGH_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.HIGH_PRICE

      break

  
      when = 'L'

begin-Select

J.LOW_PRICE

from  PS_ST_DAILY_PRICES  J
where J.STOCK_ID  = $STOCKID
and   J.ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &J.LOW_PRICE

      break

  
      when = 'W'

         let #FmvPrice1 = 0
         let #FmvPrice2 = 0

begin-Select

HIGH_PRICE
LOW_PRICE

 let #FmvPrice1 = &HIGH_PRICE
 let #FmvPrice2 = &LOW_PRICE

from  PS_ST_DAILY_PRICES
where STOCK_ID  = $STOCKID
and   ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = (#FmvPrice1 + #FmvPrice2)/2

      break

  
      when = 'S'

         let #FmvPrice1 = 0
         let #FmvPrice2 = 0

begin-Select

OPEN_PRICE
CLOSE_PRICE

 let #FmvPrice1 = &OPEN_PRICE
 let #FmvPrice2 = &CLOSE_PRICE

from  PS_ST_DAILY_PRICES
where STOCK_ID  = $STOCKID
and   ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = (#FmvPrice1 + #FmvPrice2)/2

      break


      when = 'D'

         let #FmvPrice1 = 0
         let #FmvPrice2 = 0

begin-Select

ASK_PRICE
BID_PRICE

 let #FmvPrice1 = &ASK_PRICE
 let #FmvPrice2 = &BID_PRICE

from  PS_ST_DAILY_PRICES
where STOCK_ID  = $STOCKID
and   ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = (#FmvPrice1 + #FmvPrice2)/2

      break


      when = 'P'

begin-Select

PRIVATE_PRICE

from  PS_ST_DAILY_PRICES
where STOCK_ID  = $STOCKID
and   ST_FMV_DT = $FMVDATE

end-Select

         let #FMVPRICE = &PRIVATE_PRICE

      break

   end-Evaluate


   ! Check the FMV Price to determine it is NOT zero.
      
   Evaluate &G.ST_PRICE_TYPE
      When = 'B' 
      When = 'A' 
      When = 'O' 
      When = 'C' 
      When = 'H' 
      When = 'L' 
      When = 'P' 
         
         If #FMVPrice = 0
            show 'One of the Prices used for FMV Calculation is Zero for ' noline
            show $FmvDate
         End-If
         
         Break
      When = 'W' 
      When = 'S' 
      When = 'D' 
         
         If #FMVPrice1 = 0 Or #FMVPrice2 = 0
            show 'One of the Prices used for FMV Calculation is Zero for ' noline
            show $FmvDate
         End-If

         Break         
      When-Other
         show 'A Price Type of ' noline
         show &G.ST_PRICE_TYPE   noline
         show ' was found, but Cannot be used for FMV Calculation'
     
         Break
   End-Evaluate

   add #FMVPRICE to #FINALFMV

   if (#count <= &G.FMV_AVERAGE_DAYS )

      do Convert-To-DTU-Date  ($FMVDATE,    $FMVDATE)
      do dtu-subtract-days    ($FMVDATE, 1, $FMVDATE)
      do Convert-From-DTU-Date($FMVDATE,    $FMVDATE)

      do Get-Day-Type ($StockID,$FmvDate, $Daytype)

      if $DayType = ''
         show 'The FMV Date of ' noline
         show $FmvDate   noline
         show ' is not in the Daily Prices Table'
      end-if  

      while $DAYTYPE <> 'TRD'

         do Convert-To-DTU-Date  ($FMVDATE,    $FMVDATE)
         do dtu-subtract-days    ($FMVDATE, 1, $FMVDATE)
         do Convert-From-DTU-Date($FMVDATE,    $FMVDATE)

         do Get-Day-Type ($StockID,$FmvDate, $Daytype)
         
         if $DayType = ''
            show 'The FMV Date of ' noline
            show $FmvDate   noline
            show ' is not in the Daily Prices Table'
         end-if  

      end-while !while $DAYTYPE <> 'TRD'

   end-if       !if counter <= FMV_AVG_DAYS

end-while       !outer while


if (&G.FMV_AVERAGE_DAYS > 0)

   let #FinalFmv = round((#FinalFmv / &g.fmv_average_days),6)

end-if

end-procedure


!----------------------------------------------------------
! Retrieves the day type for a specific stock id and date
!----------------------------------------------------------
begin-procedure Get-Day-Type ($StockID,$Date,:$Type)
 
 let $Type = ''
 
begin-Select
ST_DAILY_PRICES.ST_DAY_TYPE

   let $Type = &st_daily_prices.st_day_type

FROM  PS_ST_DAILY_PRICES ST_DAILY_PRICES
WHERE ST_DAILY_PRICES.STOCK_ID  = $STOCKID
AND ST_DAILY_PRICES.ST_FMV_DT = $Date
end-Select

end-procedure


!----------------------------------------------------------
! Retrieves the minimum FMV Date
!----------------------------------------------------------
begin-procedure Get-Min-Date ($StockID,:$MinDate)
 
 let #Counter = 0
 let $MinFMVDate = ''
 
begin-Select
BB.ST_FMV_DT
  
 let #Counter = #Counter + 1
 if #Counter = 1 
        let $MinDate = &bb.st_fmv_dt
 else
        if &bb.st_fmv_dt < $MinDate
             let $MinDate = &bb.st_fmv_dt
        end-if
 end-if
 
FROM  PS_ST_DAILY_PRICES BB
WHERE BB.STOCK_ID  = $STOCKID
end-Select

!********** Begin Resolution 696243 ***********
!do Convert-To-DTU-Date($MinDate,$MinDate)
!********** End Resolution 696243 *************


end-procedure
