!***********************************************************************
!  PUGPW10:   Check For System Elements To Be Deleted In Upgrade       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!----------------------------------------------------------------------*
!***********************************************************************
!                                                                      !
!          $Date:  2006/10/02:17:41:35                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      !
!***********************************************************************
! Program Desc: This program creates an ASCII file that lists          *
!               System Elements that will be deleted during upgrade    *
!***********************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 7
!  #Include 'stdhdgtr.sqc'

end-heading

!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report


        !----------------------------------------------------------
        !***    ! SHOW timedate of the beginning
        !----------------------------------------------------------
        let $Time_Begin = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        show 'Time Program Began = ' $Time_Begin

        !----------------------------------------------------------
        !***    Call the main procedures
        !----------------------------------------------------------
          do Init-Report
          do StdAPI-Init

          do Process-Main

        !----------------------------------------------------------
        !***    SHOW timedate of the end
        !----------------------------------------------------------
        let $Time_Ended = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        show 'Time Program Ended = ' $Time_Ended

          do StdAPI-Term

end-report

!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT

        do INIT-DATETIME
        do INIT-NUMBER
        do GET-CURRENT-DATETIME

        let $ReportID    = 'PUGPW10.sqr'
        let $ReportTitle = ' -- Check For System Elements To Be Deleted'
        SHOW  ' '
        show $ReportID    $ReportTitle
        SHOW ' '

end-procedure INIT-REPORT

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : PROCESS MAIN                                    !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure Process-Main


        do FILL-PIN-ARRAY

        GET #PIN_NUM_FOUND FROM PIN_ARRAY(1) PIN_NUM

        IF #PIN_NUM_FOUND = 0
                 PRINT 'No references found to the system elements' (+2,1)
        ELSE
                  do CHK-FNAME-ARRAYS
                  do CHK-OTHER-RCDS
                  do CHK-ARRAYS
                  do CHK-TRGRS
        END-IF

        PRINT 'End of Report' (+2,1)


end-procedure Process-Main


!*==================================================================
! Procedure     : FILL-PIN-ARRAY                                   !
! Descr         : Fill array with hard-coded names of System       !
!                 Elements to be deleted.                          !
!                 Loop thru array and retrieve PIN_NUM from DB     !
!                                                                  !
!                 Variable TOT_ARR_PLUS_ONE is equal to the total  !
!                 system elements to be deleted plus 1.  Update    !
!                 this variable if adding more system elements.    !
!*==================================================================

begin-procedure FILL-PIN-ARRAY

        LET #TOT_ARR_PLUS_ONE = 14

        CREATE-ARRAY  NAME = PIN_ARRAY SIZE = 14
                FIELD = PIN_CODE:CHAR
                FIELD = PIN_NUM:integer
                FIELD = FIELD_NM:CHAR


        PUT 'AGE 18+ ALL'              INTO PIN_ARRAY(1)  PIN_CODE
        PUT 'CPAMID FRA ALL'           INTO PIN_ARRAY(2)  PIN_CODE
        PUT 'ENTRY DT FRA ALL'         INTO PIN_ARRAY(3)  PIN_CODE
        PUT 'EXPCT MILIT DT DEU ALL'   INTO PIN_ARRAY(4)  PIN_CODE
        PUT 'HCE ALL'                  INTO PIN_ARRAY(5)  PIN_CODE
        PUT 'MEDICARE ENTLD DT ALL'    INTO PIN_ARRAY(6)  PIN_CODE
        PUT 'MILIT STATUS FRA ALL'     INTO PIN_ARRAY(7)  PIN_CODE
        PUT 'MILITARY STATUS ALL'      INTO PIN_ARRAY(8)  PIN_CODE
        PUT 'PERSON TYPE ALL'          INTO PIN_ARRAY(9)  PIN_CODE
        PUT 'PREV HCE ALL'             INTO PIN_ARRAY(10) PIN_CODE
        PUT 'SMOKER ALL'               INTO PIN_ARRAY(11) PIN_CODE
        PUT 'US WORK ELIGIBILTY ALL'   INTO PIN_ARRAY(12) PIN_CODE
        PUT 'YRS OF WORK EXPER ALL'    INTO PIN_ARRAY(13) PIN_CODE
             
        PUT 'AGE_STATUS'               INTO PIN_ARRAY(1)  FIELD_NM
        PUT 'CPAMID'                   INTO PIN_ARRAY(2)  FIELD_NM
        PUT 'ENTRY_DT_FRA'             INTO PIN_ARRAY(3)  FIELD_NM
        PUT 'EXPCTD_MILITARY_DT'       INTO PIN_ARRAY(4)  FIELD_NM
        PUT 'HIGHLY_COMP_EMPL_P'       INTO PIN_ARRAY(5)  FIELD_NM
        PUT 'MEDICARE_ENTLD_DT'        INTO PIN_ARRAY(6)  FIELD_NM
        PUT 'MILIT_SITUATN_FRA'        INTO PIN_ARRAY(7)  FIELD_NM
        PUT 'MILITARY_STATUS'          INTO PIN_ARRAY(8)  FIELD_NM
        PUT 'PER_TYPE'                 INTO PIN_ARRAY(9)  FIELD_NM
        PUT 'HIGHLY_COMP_EMPL_P'       INTO PIN_ARRAY(10) FIELD_NM
        PUT 'SMOKER'                   INTO PIN_ARRAY(11) FIELD_NM
        PUT 'US_WORK_ELIGIBILTY'       INTO PIN_ARRAY(12) FIELD_NM
        PUT 'YEARS_OF_EXP'             INTO PIN_ARRAY(13) FIELD_NM

        PRINT '**************************************************************' (1,1)
        PRINT '*****CHECKING FOR USAGE OF SYSTEM ELEMENTS TO BE DELETED *****' (+1,1)
        PRINT '**************************************************************' (+1,1)
        PRINT '***** FINDING PIN NUMBERS OF SYSTEM ELEMENTS TO DELETE *******' (+2,1)

        PRINT 'System Element    System Element' (+2,28)
        PRINT 'Pin Number        Pin Code'       (+1,28)
        PRINT '--------------    --------------' (+1,28)

        LET #i = 1    

        WHILE #i < #TOT_ARR_PLUS_ONE

                GET $CUR_PIN_CODE FROM PIN_ARRAY(#i) PIN_CODE
                do GET-PIN-NUM(#CUR_PIN_NUM,$CUR_PIN_CODE)
                PUT #CUR_PIN_NUM INTO PIN_ARRAY(#i) PIN_NUM
                DO WRITE-PIN('PIN_NUM',#CUR_PIN_NUM,$CUR_PIN_CODE)

                add 1 to #i
        END-WHILE

end-procedure FILL-PIN-ARRAY

!*==================================================================
! Procedure     : GET-PIN-NUM                                      !
! Descr         : Retrieve PIN number of System Elements to be     !
!                 deleted.                                         !
!*==================================================================

        begin-procedure GET-PIN-NUM(:#PSD_PIN_NUM,$PSD_PIN_CODE)

Begin-select


A.PIN_NUM

                let #PSD_PIN_NUM = &A.PIN_NUM


FROM        PS_GP_PIN A
WHERE       A.PIN_CODE = $PSD_PIN_CODE

end-select

        end-procedure GET-PIN-NUM


!*==================================================================
! Procedure     : CHK-FNAME-ARRAYS                                 !
! Descr         : Fill array with hard-coded names of records      !
!                 with PIN_NUM to be checked; loop thru array.     !
!*==================================================================

begin-procedure CHK-FNAME-ARRAYS

        CREATE-ARRAY  NAME = FNAME_ARRAY SIZE = 14
                FIELD = FNAME:CHAR
                FIELD = FDESCR:CHAR
                FIELD = FNAME2:CHAR

        PUT 'PS_GP_RSLT_PIN'         INTO FNAME_ARRAY(1) FNAME
        PUT 'PS_GP_PI_MNL_SOVR'      INTO FNAME_ARRAY(2) FNAME
        PUT 'PS_GP_PI_GEN_SOVR'      INTO FNAME_ARRAY(3) FNAME
        PUT 'PS_GP_RSLT_PI_SOVR'     INTO FNAME_ARRAY(4) FNAME
        PUT 'PS_GP_PKG_CRIT1'        INTO FNAME_ARRAY(5) FNAME
        PUT 'PS_GP_PKG_ELEMENTS'     INTO FNAME_ARRAY(6) FNAME
        PUT 'PS_GP_PKG_VER_DTL'      INTO FNAME_ARRAY(7) FNAME
        PUT 'PS_GP_NR_PKG_ELMTS'     INTO FNAME_ARRAY(8) FNAME

        PUT 'Output Result Tables - Checking '                          INTO FNAME_ARRAY(1) FDESCR
        PUT 'Positive Input Supporting Element Overrides 1 - Checking ' INTO FNAME_ARRAY(2) FDESCR
        PUT 'Positive Input Supporting Element Overrides 2 - Checking ' INTO FNAME_ARRAY(3) FDESCR
        PUT 'Positive Input Supporting Element Overrides 3 - Checking ' INTO FNAME_ARRAY(4) FDESCR
        PUT 'Rule Package Criteria - Checking '                         INTO FNAME_ARRAY(5) FDESCR
        PUT 'Rule Package Output - Checking '                           INTO FNAME_ARRAY(6) FDESCR
        PUT 'Version Package - Checking '                               INTO FNAME_ARRAY(7) FDESCR
        PUT 'Non-Rule Package and Records - Checking '                  INTO FNAME_ARRAY(8) FDESCR

        PUT 'PS_GP_PKG_DFN'        INTO FNAME_ARRAY(5) FNAME2
        PUT 'PS_GP_PKG_DFN'        INTO FNAME_ARRAY(6) FNAME2
        PUT 'PS_GP_PKG_DFN'        INTO FNAME_ARRAY(7) FNAME2
        PUT 'PS_GP_NR_PKG_DFN'     INTO FNAME_ARRAY(8) FNAME2

        PRINT '*** CHECKING SYSTEM ELEMENT USAGE ****************************' (+3,1)

        PRINT '** Output Result Tables **' (+2,1)

        LET #fnum = 1

        WHILE #fnum < 9

                IF #fnum = 2

                    PRINT '** Positive Input Supporting Element Overrides **' (+3,1)
                END-IF

                IF #fnum = 5

                   PRINT '** Packages **' (+3,1)
                END-IF

                IF #fnum = 8

                    PRINT '** Non-Rule Package and Records **' (+3,1)
                END-IF

                PRINT ' ' (+1,1)
                GET $CUR_FNAME  FROM FNAME_ARRAY(#fnum) FNAME
                GET $CUR_FDESCR FROM FNAME_ARRAY(#fnum) FDESCR

                IF #fnum < 5
                    do GET-FILE($CUR_FNAME, $CUR_FDESCR)
                ELSE
                    GET $CUR_FNAME2  FROM FNAME_ARRAY(#fnum) FNAME2
                    do GET-FILE-PKG($CUR_FNAME, $CUR_FDESCR, $CUR_FNAME2)
                END-IF

                add 1 to #fnum
        END-WHILE

end-procedure CHK-FNAME-ARRAYS


!*==================================================================
! Procedure     : GET-FILE                                         !
! Descr         : Check PIN_NUM of passed filename against         !
!                 System Element array                             !
!*==================================================================

begin-procedure GET-FILE($PSD_FNAME, $PSD_FDESCR)

        CONCAT $PSD_FNAME WITH $PSD_FDESCR
         PRINT $PSD_FDESCR (+1,1)

        LET #i = 1

        WHILE #i < #TOT_ARR_PLUS_ONE

                GET #CUR_PIN_NUM FROM PIN_ARRAY(#i) PIN_NUM
                GET $CUR_PIN_CODE FROM PIN_ARRAY(#i) PIN_CODE
                do GET-PIN($PSD_FNAME,#CUR_PIN_NUM,$CUR_PIN_CODE)
                add 1 to #i
        END-WHILE

end-procedure GET-FILE

!*==================================================================
! Procedure     : GET-FILE-PKG                                     !
! Descr         : Check PIN_NUM of passed filename against         !
!                 System Element array -- PKG File version         !
!*==================================================================

begin-procedure GET-FILE-PKG($PSD_FNAME, $PSD_FDESCR, $PSD_FNAME2)

        CONCAT $PSD_FNAME WITH $PSD_FDESCR
        PRINT $PSD_FDESCR (+1,1)


        PRINT 'Package    Package                         System Element   System Element' (+2,5)
        PRINT 'ID         Description                     Pin Number       Pin Code'       (+1,5)
        PRINT '--------   -----------------------------   --------------   ------------------------' (+1,5)

        LET #i = 1

        WHILE #i < #TOT_ARR_PLUS_ONE

                GET #CUR_PIN_NUM FROM PIN_ARRAY(#i) PIN_NUM
                GET $CUR_PIN_CODE FROM PIN_ARRAY(#i) PIN_CODE
                do GET-PIN-PKG($PSD_FNAME,#CUR_PIN_NUM,$CUR_PIN_CODE,$PSD_FNAME2)
                add 1 to #i
        END-WHILE

end-procedure GET-FILE-PKG

!*==================================================================
! Procedure     : GET-PIN                                          !
! Descr         : If passed PIN_NUM value is found in passed       !
!                 Filename, write to results file.                 !
!*==================================================================

begin-procedure GET-PIN($PSD_FNAME,#PSD_PIN_NUM,$PSD_PIN_CODE)

Begin-select


PIN_NUM

                LET #PIN_NUM_FOUND = &PIN_NUM
                DO WRITE-PIN('PIN_NUM',#PIN_NUM_FOUND,$PSD_PIN_CODE)

FROM        [$PSD_FNAME]
WHERE       PIN_NUM = #PSD_PIN_NUM

end-select

end-procedure GET-PIN

!*==================================================================
! Procedure     : GET-PIN-PKG                                       !
! Descr         : If passed PIN_NUM value is found in passed        !
!                 Filename, write to results file - PKG File version!
!*==================================================================

begin-procedure GET-PIN-PKG($PSD_FNAME,#PSD_PIN_NUM,$PSD_PIN_CODE,$PSD_FNAME2)

Begin-select


A.PIN_NUM
A.GP_PKG_ID
B.DESCR

                LET #PIN_NUM_FOUND = &A.PIN_NUM
                LET $CUR_PKG_ID    = &A.GP_PKG_ID
                LET $CUR_PKG_DESCR = &B.DESCR
                DO WRITE-PIN-PKG(#PIN_NUM_FOUND,$PSD_PIN_CODE,$CUR_PKG_ID,$CUR_PKG_DESCR)

FROM        [$PSD_FNAME] A, [$PSD_FNAME2] B
WHERE       A.PIN_NUM = #PSD_PIN_NUM
AND         A.GP_PKG_ID  = B.GP_PKG_ID

end-select

end-procedure GET-PIN-PKG



!*==================================================================
! Procedure     : WRITE-HDR                                        !
! Descr         : Write passed literal with prefix "Checking'      !
!                                                                  !
!*==================================================================
begin-procedure WRITE-HDR($PSD_HDR)

        PRINT  'Checking ' (+2,1)
        PRINT  $PSD_HDR    (+0,10)

end-procedure WRITE-HDR

!*==================================================================
! Procedure     : WRITE-PIN                                        !
! Descr         : Write passed PIN Number & Code                   !
!                                                                  !
!*==================================================================

begin-procedure WRITE-PIN($PSD_FIELNAME, #PSD_PIN_NUM,$PSD_PIN_CODE)
        declare-variable
                INTEGER #INT_PIN_NUM
        end-declare

        MOVE #PSD_PIN_NUM to #INT_PIN_NUM
        MOVE #INT_PIN_NUM to $STR_PIN_NUM

        PRINT $PSD_FIELNAME  (+1,5)
        PRINT $STR_PIN_NUM   (+0,28)
        PRINT $PSD_PIN_CODE  (+0,47)
        PRINT 'Found'        (+0,71)
        
end-procedure WRITE-PIN

!*==================================================================
! Procedure     : WRITE-PIN-PKG                                    !
! Descr         : Write passed PIN Number & Code - PKG Version     !
!                                                                  !
!*==================================================================

begin-procedure WRITE-PIN-PKG(#PSD_PIN_NUM,$PSD_PIN_CODE,$PSD_PKG_ID,$PSD_PKG_DESCR)
        declare-variable
                INTEGER #INT_PIN_NUM
        end-declare

        MOVE #PSD_PIN_NUM to #INT_PIN_NUM
        MOVE #INT_PIN_NUM to $STR_PIN_NUM

        PRINT $PSD_PKG_ID    (+1,5)
        PRINT $PSD_PKG_DESCR (+0,17)
        PRINT 'PIN_NUM'      (+0,50)
        PRINT $STR_PIN_NUM   (+0,58)
        PRINT $PSD_PIN_CODE  (+0,68)
        PRINT ' Found'       (+0,94)

end-procedure WRITE-PIN-PKG

!*==================================================================
! Procedure     : CHK-OTHER-RCDS                                   !
! Descr         : Retrieve Record & Key Names from Mapping Table   !
!                 and store in array; then loop thru array with    !
!                 inner loop comparing against System Element array!
!*==================================================================

begin-procedure CHK-OTHER-RCDS


        CREATE-ARRAY  NAME=OTHER_RCD_ARRAY SIZE=1000
                FIELD = RECNAME:CHAR
                FIELD = FIELDNAME_KEY1:CHAR
                FIELD = FIELDNAME_KEY2:CHAR

        PRINT '** Other Rules **' (+3,1)


        LET #recnum = 1

Begin-select

A.RECNAME
A.FIELDNAME_KEY1
A.FIELDNAME_KEY2

                PUT &A.RECNAME         INTO OTHER_RCD_ARRAY(#recnum) RECNAME
                PUT &A.FIELDNAME_KEY1  INTO OTHER_RCD_ARRAY(#recnum) FIELDNAME_KEY1
                PUT &A.FIELDNAME_KEY2  INTO OTHER_RCD_ARRAY(#recnum) FIELDNAME_KEY2

                Add 1 to #recnum
FROM        PS_GP_PIN_FLD_MAP2 A, PS_GP_PIN_FLD_MAP1 B
WHERE A.RECNAME = B.RECNAME
AND A.FIELDNAME_KEY1 = B.FIELDNAME_KEY1
AND A.RECNAME NOT IN ('GP_RSLT_PIN','GP_RSLT_PI_SOVR','GP_PI_MNL_SOVR','GP_PI_GEN_SOVR')

end-select

        LET #numrec = #recnum - 1
        LET #recnum = 1

        WHILE #recnum <= #numrec

                GET $CUR_RECNAME      FROM OTHER_RCD_ARRAY(#recnum)    RECNAME
                GET $CUR_FIELDNAME_KEY1  FROM OTHER_RCD_ARRAY(#recnum) FIELDNAME_KEY1
                GET $CUR_FIELDNAME_KEY2 FROM OTHER_RCD_ARRAY(#recnum) FIELDNAME_KEY2
                LET $FULL_RECNAME = 'PS_'
                CONCAT $CUR_RECNAME WITH $FULL_RECNAME
          
                IF $FULL_RECNAME <> $PREV_RECNAME
                    do WRITE-HDR($FULL_RECNAME)
                END-IF
                LET $PREV_RECNAME = $FULL_RECNAME

                LET #i = 1

                WHILE #i < #TOT_ARR_PLUS_ONE

                        GET $CUR_PIN_CODE FROM PIN_ARRAY(#i) PIN_CODE
                        GET #CUR_PIN_NUM FROM PIN_ARRAY(#i) PIN_NUM
        
                        IF $CUR_FIELDNAME_KEY1 = $CUR_FIELDNAME_KEY2

begin-select

[$CUR_FIELDNAME_KEY1] &column1=number

                         DO WRITE-PIN($CUR_FIELDNAME_KEY1,#CUR_PIN_NUM,$CUR_PIN_CODE)
                         
FROM        [$FULL_RECNAME]
WHERE       [$CUR_FIELDNAME_KEY1] = #CUR_PIN_NUM

end-select

                        ELSE
                        
begin-select

[$CUR_FIELDNAME_KEY2] &column2=number

                         DO WRITE-PIN($CUR_FIELDNAME_KEY2,#CUR_PIN_NUM,$CUR_PIN_CODE)
                         
FROM        [$FULL_RECNAME]
WHERE       [$CUR_FIELDNAME_KEY2] = #CUR_PIN_NUM

end-select                        
                        
                        END-IF

                        add 1 to #i
                        
                        
                END-WHILE

                Add 1 to #recnum

        END-WHILE

end-procedure CHK-OTHER-RCDS

!*==================================================================
! Procedure     : CHK-ARRAYS                                       !
! Descr         : Retrieve PIN_TYPE Array PIN_NUM & Recname and    !
!                 store in Array; then loop thru Array calling     !
!                 routine to compare against System Element Array. !
!*==================================================================

begin-procedure CHK-ARRAYS local
        declare-variable
                INTEGER #INT_PIN_NUM
        end-declare

        CREATE-ARRAY  NAME=ARRNAME_ARRAY SIZE=100
                FIELD = ARRNAME:CHAR
                FIELD = RECNAME:CHAR
                FIELD = PIN_NUM:NUMBER

        PRINT '*** CHECKING RECORD.FIELD USAGE *****************************' (+3,1)
        PRINT '** Arrays **' (+2,1)

        LET #recnum = 1

Begin-select

A.PIN_NM
B.RECNAME
B.PIN_NUM

                PUT &A.PIN_NM          INTO ARRNAME_ARRAY(#recnum) ARRNAME
                PUT &B.RECNAME         INTO ARRNAME_ARRAY(#recnum) RECNAME
                PUT &B.PIN_NUM         INTO ARRNAME_ARRAY(#recnum) PIN_NUM

                Add 1 to #recnum
FROM        PS_GP_PIN A, PS_GP_ARRAY B
WHERE A.PIN_NUM = B.PIN_NUM AND B.RECNAME IN ('JOB','PERS_DATA_EFFDT','PERSON')

end-select

        LET #numrec = #recnum - 1
        LET #recnum = 1

        WHILE #recnum <= #numrec

                GET $CUR_ARRNAME      FROM ARRNAME_ARRAY(#recnum)    ARRNAME
                GET $CUR_RECNAME      FROM ARRNAME_ARRAY(#recnum)    RECNAME
                GET #CUR_PIN_NUM      FROM ARRNAME_ARRAY(#recnum)    PIN_NUM

                LET $FULL_RECNAME = 'PS_'
                CONCAT $CUR_RECNAME WITH $FULL_RECNAME
                LET $FULL_ARRNAME = 'ARRAY '
                CONCAT $CUR_ARRNAME WITH $FULL_ARRNAME
                CONCAT ' (Pin Number '         WITH $FULL_ARRNAME
                MOVE #CUR_PIN_NUM to #INT_PIN_NUM
                CONCAT #INT_PIN_NUM WITH $FULL_ARRNAME
                CONCAT ')'          WITH $FULL_ARRNAME

                do WRITE-HDR($FULL_ARRNAME)

                do CHK-REC-FIELDNAME('PS_GP_ARRAY_FLD',#CUR_PIN_NUM)
                do CHK-REC-FIELDNAME('PS_GP_ARRAY_KEY',#CUR_PIN_NUM)

                Add 1 to #recnum

        END-WHILE

end-procedure CHK-ARRAYS


!*==================================================================
! Procedure     : CHK-TRGRS                                        !
! Descr         :                                                  !
!                                                                  !
!*==================================================================

begin-procedure CHK-TRGRS

        PRINT '** Triggers **' (+2,1)

        do CHK-REC-FIELDNAME('PS_GP_TRGR_RECFLD',0)
        do CHK-REC-FIELDNAME('PS_GP_TRGR_VALUE',0)

end-procedure CHK-TRGRS


!*==================================================================
! Procedure     : CHK-REC-FIELDNAME                                !
! Descr         : Select on passed filename; inner loop checks     !
!                 filed FILENAME against System Element array      !
!*==================================================================

begin-procedure CHK-REC-FIELDNAME($PSD_RECNAME,#PSD_PIN_NUM)

        IF #PSD_PIN_NUM > 0
                DO WRITE-HDR2($PSD_RECNAME)
        ELSE
                DO WRITE-HDR($PSD_RECNAME)
        END-IF

        LET #i = 1

        WHILE #i < #TOT_ARR_PLUS_ONE
                GET $CUR_PIN_CODE FROM PIN_ARRAY(#i) PIN_CODE
                GET #CUR_PIN_NUM FROM PIN_ARRAY(#i) PIN_NUM
                GET $CUR_FIELD_NM FROM PIN_ARRAY(#i) FIELD_NM

                IF #PSD_PIN_NUM = 0
begin-select

A.FIELDNAME
                        DO WRITE-PIN($CUR_FIELD_NM,#CUR_PIN_NUM,$CUR_PIN_CODE)

FROM        [$PSD_RECNAME] A
WHERE       A.FIELDNAME = $CUR_FIELD_NM

end-select
                ELSE
begin-select

PIN_NUM
B.FIELDNAME
                        DO WRITE-PIN($CUR_FIELD_NM,#CUR_PIN_NUM,$CUR_PIN_CODE)

FROM        [$PSD_RECNAME] B
WHERE       B.FIELDNAME = $CUR_FIELD_NM AND PIN_NUM = #PSD_PIN_NUM

end-select

                END-IF
                ADD 1 to #i

        END-WHILE

end-procedure CHK-REC-FIELDNAME


!*==================================================================
! Procedure     : WRITE-HDR2                                       !
! Descr         : Write passed literal with slight indentation     !
!                                                                  !
!*==================================================================
begin-procedure WRITE-HDR2($PSD_HDR)

        PRINT $PSD_HDR (+1,3)

end-procedure WRITE-HDR2

!************************************************************************
!End of the SQR statements                                              *
!************************************************************************

#Include 'stdapi.sqc'    !Update Process API
#include 'prcsdef.sqc'   !Update Process Request variable declaration
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read Translates Table

!***********************************************************************
