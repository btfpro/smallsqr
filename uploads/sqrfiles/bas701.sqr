!***********************************************************************
!  BAS701: Geographic Location Eligibility Table
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:36:18                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

#define col_sep                    1   !Column seperator
#define col_location              12   !Location Table ID
#define col_date                  10   !Dates
#define col_include               10   !Include Work Location
#define col_mthd                  12   !Group/Eval Methods
#define col_eval_actv             10   !Eval_Active
#define col_from_to               12   !From/To Ranges
#define col_xlatshort             10   !Xlat Shortname

begin-program
  do Init-Report

  do Process-Main

  do Reset
  do StdAPI-Term
end-program

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do StdAPI-Init

  let $ReportID = 'BAS701'
  do Get-Report-Language
  let $ReportTitle  = $BAS701-REPORTTITLE
  display 'Report ID:  BAS701'
  display ' '
  display $ReportTitle
  display ' '

end-procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS701 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BAS701', 'REPORT_TITLE', $BAS701-REPORTTITLE, #CW)
  do Get_Field_Information ('BAS701', 'ELIGIBLE',     $BAS701-ELIGIBLE,    #CW)
  do Get_Field_Information ('BAS701', 'INELIGIBLE',   $BAS701-INELIGIBLE,  #CW)
  do Get_Field_Information ('BAS701', 'INCLUDE',      $BAS701-INCLUDE,     #CW)
  do Get_Field_Information ('BAS701', 'ACTIVE',       $BAS701-ACTIVE,      #CW)
  do Get_Field_Information ('BAS701', 'JOBS-ONLY',    $BAS701-JOBS-ONLY,   #CW)

  do Get_Field_Information ('BEN1',   'EFFECTIVE',    $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'STATUS',       $BEN1-STATUS,        #CW)
  do Get_Field_Information ('BEN1',   'GROUPING',     $BEN1-GROUPING,      #CW)
  do Get_Field_Information ('BEN1',   'EVALUATION',   $BEN1-EVALUATION,    #CW)
  do Get_Field_Information ('BEN1',   'METHOD',       $BEN1-METHOD,        #CW)
  do Get_Field_Information ('BEN1',   'LOCATION',     $BEN1-LOCATION,      #CW)
  do Get_Field_Information ('BEN1',   'EFFECTIVE',    $BEN1-EFFECTIVE,     #CW)
  do Get_Field_Information ('BEN1',   'FROM',         $BEN1-FROM,          #CW)
  do Get_Field_Information ('BEN1',   'TO',           $BEN1-TO,            #CW)
  do Get_Field_Information ('BEN1',   'DATE',         $BEN1-DATE,          #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)

End-Procedure


!***********************************************************************
begin-HEADING 7
  #Include 'stdhdgtr.sqc'

  print $BEN1-LOCATION                  (+2,1,{col_location})
  print $BEN1-EFFECTIVE                 (0,+{col_sep},{col_date})
  print $BEN1-EFFECTIVE                 (0,+{col_sep},{col_xlatshort})
  print $BAS701-ELIGIBLE                (0,+{col_sep},{col_xlatshort})
  print $BAS701-INCLUDE                 (0,+{col_sep},{col_include})
  print $BEN1-GROUPING                  (0,+{col_sep},{col_xlatshort})
  print $BEN1-EVALUATION                (0,+{col_sep},{col_xlatshort})
  print $BAS701-ACTIVE                  (0,+{col_sep},{col_eval_actv})
  print $BEN1-FROM                      (0,+{col_sep},{col_from_to})
  print $BEN1-TO                        (0,+{col_sep},{col_from_to})

  print $BEN1-ID                        (+1,1,{col_location})
  print $BEN1-DATE                      (0,+{col_sep},{col_date})
  print $BEN1-STATUS                    (0,+{col_sep},{col_xlatshort})
  print $BAS701-INELIGIBLE              (0,+{col_sep},{col_xlatshort})
  print $BEN1-LOCATION                  (0,+{col_sep},{col_include})
  print $BEN1-METHOD                    (0,+{col_sep},{col_xlatshort})
  print $BEN1-METHOD                    (0,+{col_sep},{col_xlatshort})
  print $BAS701-JOBS-ONLY               (0,+{col_sep},{col_eval_actv})
  print $BEN1-LOCATION                  (0,+{col_sep},{col_from_to})
  print $BEN1-LOCATION                  (0,+{col_sep},{col_from_to})

!column_Heading line 2
  print '='                             (+1,1,{col_location})           Fill
  print '='                             (0,+{col_sep},{col_date})       Fill
  print '='                             (0,+{col_sep},{col_xlatshort})  Fill
  print '='                             (0,+{col_sep},{col_xlatshort})  Fill
  print '='                             (0,+{col_sep},{col_include})    Fill
  print '='                             (0,+{col_sep},{col_xlatshort})  Fill
  print '='                             (0,+{col_sep},{col_xlatshort})  Fill
  print '='                             (0,+{col_sep},{col_eval_actv})  Fill
  print '='                             (0,+{col_sep},{col_from_to})    Fill
  print '='                             (0,+{col_sep},{col_from_to})    Fill
end-HEADING

!***********************************************************************
!  PROC Process Main
!         Main Procedure
!***********************************************************************

BEGIN-PROCEDURE Process-Main

 Let $Save_Location_Tbl_Id = ' '

BEGIN-SELECT

A.LOCATION_TBL_ID
A.EFFDT
A.EFF_STATUS
A.ELIG_FLG_GEO
A.BAS_HOME_LOC
A.GRP_MTHD
A.EVAL_MTHD
A.EVAL_ACTV

               If &A.LOCATION_TBL_ID <> $Save_Location_Tbl_Id
                  print &A.LOCATION_TBL_ID  (+1,1,{COL_LOCATION})
                  do Format-DateTime(&A.EffDt, $out, {DEFDATE}, '', '')
                  print $out                (0,+{COL_SEP},{COL_DATE})
                  move 'EFF_STATUS'  to $FieldName
                  move &A.EFF_STATUS to $FieldValue
                  move &A.EFFDT         to $AsOfDate
                  do Read-Translate-Table
                  print $xlatshortname      (0,+{COL_SEP},{COL_XLATSHORT})
                  move 'ELIG_FLG_GEO'  to $FieldName
                  move &A.ELIG_FLG_GEO to $FieldValue
                  do Read-Translate-Table
                  print $xlatshortname      (0,+{COL_SEP},{COL_XLATSHORT})
                  move 'BAS_HOME_LOC'  to $FieldName
                  move &A.BAS_HOME_LOC to $FieldValue
                  do Read-Translate-Table
                  print $xlatshortname      (0,+{COL_SEP},{COL_XLATSHORT})
                  move 'GRP_MTHD'  to $FieldName
                  move &A.GRP_MTHD to $FieldValue
                  do Read-Translate-Table
                  print $xlatshortname      (0,+{COL_SEP},{COL_XLATSHORT})
                  move 'EVAL_MTHD'  to $FieldName
                  move &A.EVAL_MTHD to $FieldValue
                  do Read-Translate-Table
                  print $xlatshortname      (0,+{COL_SEP},{COL_XLATSHORT})
                  print &A.EVAL_ACTV        (0,+{COL_SEP},{COL_EVAL_ACTV})
                  move &a.location_tbl_id to $save_location_tbl_id
               Else
                  print ' '                 (+1,1,{COL_LOCATION})
                  print ' '                 (0,+{COL_SEP},{COL_DATE})
                  print ' '                 (0,+{COL_SEP},{COL_XLATSHORT})
                  print ' '                 (0,+{COL_SEP},{COL_XLATSHORT})
                  print ' '                 (0,+{COL_SEP},{COL_XLATSHORT})
                  print ' '                 (0,+{COL_SEP},{COL_XLATSHORT})
                  print ' '                 (0,+{COL_SEP},{COL_XLATSHORT})
                  print ' '                 (0,+{COL_SEP},{COL_EVAL_ACTV})
               End-If

B.LOCN_FROM            (0,+{COL_SEP},{COL_FROM_TO})
B.LOCN_TO              (0,+{COL_SEP},{COL_FROM_TO})

FROM PS_GEOG_LOCN_TBL A,
     PS_GEOG_LOCN_RANGE B
Where A.LOCATION_TBL_ID = B.LOCATION_TBL_ID
AND   B.EFFDT = (SELECT MAX(EFFDT)
                 FROM    PS_GEOG_LOCN_RANGE
                 WHERE  EFFDT  <= A.EFFDT)

ORDER BY A.LOCATION_TBL_ID,A.EFFDT,B.LOCN_FROM,B.LOCN_TO

END-SELECT
END-PROCEDURE

BEGIN-PROCEDURE Break-Change


END-PROCEDURE

!********************************************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'readxlat.sqc'  !get translates for fieldname, value

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

!********************************************************************
