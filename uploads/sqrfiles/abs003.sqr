!***********************************************************************
!  ABS003:  Time Lost due to Absence                                   *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:10:59:31                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
Begin-Setup
#include 'ptpsl177.sqc'   !Printer and page-size initialization
  declare-variable
    date $Beg_Dt
    date $Ret_Dt
  end-declare
End-Setup

#define c1 2
#define c2 18
#define c3 35
#define c4 73
#define c5 55
#define c6 87
#define c7 99
#define c8 120
#define c9 130
#define c10 145
#define c11 68
#define c12 120

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  
  !**************Begin Resolution 594678************
  
  do Get-Report-Language
  
  !**************End Resolution 594678**************
  
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-heading 7
   #Include 'stdhdg08.sqc'
   print '*  Indicates employees without a work schedule assigned' (+1,1,0)

!**************Begin Resolution 594678************

   !print 'Regulatory'                    (+3,{c1},84)

   !print 'Begin'                         (0,{c6},11)
   !print 'Return'                        (0,{c7},30)
   !print 'Total'                         (0,{c9})
   !print 'Emp'                           (0,{c11},51)
   !print 'Days'                          (0,{c12})

   !print 'Employee Name'                 (+1,{c3},19)
   !print 'ID'                            (0,{c5})
   !print 'Region'                        (0,{c1},15)
   !print 'Department'                    (0,{c2},101)

   !print 'Type'                          (0,{c11},4)
   !print 'Job Title'                     (0,{c4},13)
   !print 'Date'                          (0,{c6},13)
   !print 'Date'                          (0,{c7},20)
   !print 'Absent'                        (0,{c8},9)
   !print 'Working Days'                  (0,{c9},19)
   !print '%'                             (0,150)
   
   
   Do Report-Translation ! Resolution 594678
   
   
      print $Regulatory                    (+3,{c1},84)
   
      print $Begin                         (0,{c6},11)
      print $Return                        (0,{c7},30)
      print $Total                         (0,{c9})
      print $Emp                           (0,{c11},51)
      print $Days                          (0,{c12})
      
      print $EmployeeName                  (+1,{c3},19)
      print $ID                            (0,{c5})
      print $Region                        (0,{c1},15)
      print $Department                    (0,{c2},101)
      
      print $Type                          (0,{c11},4)
      print $JobTitle                      (0,{c4},13)
      print $Date                          (0,{c6},13)
      print $Date                          (0,{c7},20)
      print $Absent                        (0,{c8},9)
      print $WorkingDays                   (0,{c9},19)
      print $%                             (0,150)
      
  !**************End Resolution 594678*************

end-heading


!**************Begin Resolution 594678*************

!*************************************************************
BEGIN-PROCEDURE Report-Translation
!*************************************************************
 
  !Should be ok to comment because the report should only produce one output file.
  !Use-report ABS001
  
  Do Init_Report_Translation($ReportId, $Language_Cd)
  SHOW 'LANGUAGE CODE = ' $Language_Cd
  Do Get_Field_Information  ('ABS003','REGULATORY',         $Regulatory,      #CW)
  Do Get_Field_Information  ('ABS003','EMP',                $Emp,             #CW)
  Do Get_Field_Information  ('ABS003','BEGIN',              $Begin,           #CW)
  Do Get_Field_Information  ('ABS003','RETURN',             $Return,          #CW)
  Do Get_Field_Information  ('ABS003','DAYS',               $Days,            #CW)
  Do Get_Field_Information  ('ABS003','TOTAL',              $Total,           #CW)
  Do Get_Field_Information  ('ABS003','REGION',             $Region,          #CW)
  Do Get_Field_Information  ('ABS003','DEPARTMENT',         $Department,      #CW)
  Do Get_Field_Information  ('ABS003','EMPLOYEENAME',       $EmployeeName,    #CW)
  Do Get_Field_Information  ('ABS003','ID',                 $ID,              #CW)
  Do Get_Field_Information  ('ABS003','TYPE',               $Type,            #CW)
  Do Get_Field_Information  ('ABS003','JOBTITLE',           $JobTitle,        #CW)
  Do Get_Field_Information  ('ABS003','DATE',               $Date,            #CW)
  Do Get_Field_Information  ('ABS003','ABSENT',             $Absent,          #CW)
  Do Get_Field_Information  ('ABS003','WORKINGDAYS',        $WorkingDays,     #CW)
  Do Get_Field_Information  ('ABS003','%',                  $%,               #CW)
  
 END-PROCEDURE 
 
!**************End Resolution 594678****************


begin-procedure Init-Report

  move 'ABS003' to $ReportID
  move 'Time Lost due to Absence' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-From-Thru-Date
  else
    do Select-ABS003-Parameters
  end-if

end-procedure

begin-procedure Select-ABS003-Parameters

BEGIN-SELECT

A1.OPRID
A1.RUN_CNTL_ID
A1.ASOFDATE
A1.FROMDATE
A1.THRUDATE
A1.DEPTID
A1.SETID


  do Get-Values

from PS_RUN_CNTL_ABS003 A1

where A1.OPRID = $prcs_oprid
  and A1.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure


begin-procedure Get-Values

   !do Get-From-Thru-Date
   do Get-RUNABS003-Param

end-procedure

begin-procedure Get-RUNABS003-Param

  let $DeptId   = &A1.DEPTID
  let $SETID    = &A1.SETID
  let $FromDate = &A1.fromdate
  let $ThruDate = &A1.thrudate

  do Century-Begin-Date

  if $FromDate = ''
     move $Century_Begin_Dt to $FromDate
  end-if

  if $ThruDate = ''
     move $AsOfToday to $ThruDate
  end-if

end-procedure

begin-procedure Process-Main
   print '' (+1,0,1)
   display $AsOfToday
   display $FromDate
   display  $Thrudate
   do Convert-To-DTU-Date($Thrudate, $Thrudate_DTU)
   do Convert-To-DTU-Date($FromDate , $FromDate_DTU)
   display  $Thrudate_DTU
   display  $FromDate_DTU
   display 'Department' noline
   display $DeptID
   display 'SETID'
   display $SETID



   let $Previous_emp_id=0


begin-SELECT
C.REG_REGION  (+1,{c1},15)         ON-BREAK Print = Change/Top-Page  skiplines=1 level =1
B.DEPTNAME_ABBRV     (0,{c2},16)   on-break  Print = Change/Top-Page  level=2

B.NAME               (0,{c3},19)   on-break   Print = Change/Top-Page  level=3

B.EMPLID             (0,{c5},12)   on-break    Print = Change/Top-Page  level=3
                      after=GetTotals
                      let $Previous_emp_id=$Empid
                      let $Empid = &B.EMPLID


                      !move 0 to #TotalDays


B.EMPL_TYPE          (0,{c11},4)  on-break  Print = Change/Top-Page  level=3
B.JOBTITLE_ABBRV     (0,{c4},13)  on-break  Print = Change/Top-Page  level=3


B.EMPL_RCD
   let #Empl_RCD = &B.EMPL_RCD
A.BEGIN_DT

   let  $Begin_Dt_DMY_N=&A.Begin_Dt
   do Format-DateTime(&A.Begin_Dt, $Begin_Dt_DMY, {DEFDATE}, '', '')
   print $Begin_Dt_DMY (0,{c6},11)
   do Convert-To-DTU-Date(&A.Begin_Dt, $Begin_Dt_DMY)

A.RETURN_DT
      !change Return date if Return date > $Thrudate
      if RTRIM(&A.Return_Dt, ' ') <> ''
         do Format-DateTime(&A.Return_Dt, $Return_Dt_DMY, {DEFDATE}, '', '')
         print $Return_Dt_DMY         (0,{c7})
         let $Return_Dt_DMY  = rtrim($Return_Dt_DMY,' ')

         do Convert-To-DTU-Date(&A.Return_Dt, $Return_Dt_DMY)
         let $ReturnDate =$Return_Dt_DMY
      end-if
      if isnull(&A.Return_Dt) = 1
         let $ReturnDate = $Thrudate
         do Format-DateTime($ReturnDate, $Return_Dt_DMY, {DEFDATE}, '', '')
         let $Return_Dt_DMY  = rtrim($Return_Dt_DMY,' ')
         do Convert-To-DTU-Date($ReturnDate, $Return_Dt_DMY)
         let $ReturnDate =$Return_Dt_DMY
      end-if

A.DURATION_DAYS
   if &A.DURATION_DAYS = 0
        if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY <= $Thrudate_DTU )
           Let $Beg_Dt = &A1.FromDate
           Let $Ret_Dt = nvl(&A.Return_Dt, &A1.ThruDate)
        else
           if ($Begin_Dt_DMY <= $FromDate_DTU and $Return_Dt_DMY > $Thrudate_DTU )
              Let $Beg_Dt = &A1.FromDate
              Let $Ret_Dt = &A1.Thrudate
           else
              if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY >= $Thrudate_DTU )
                 Let $Beg_Dt = &A.Begin_Dt
                 Let $Ret_Dt = &A1.Thrudate
              else
                 if ($Begin_Dt_DMY > $FromDate_DTU and $Return_Dt_DMY < $Thrudate_DTU)
                    Let $Beg_Dt = &A.Begin_Dt
                    Let $Ret_Dt = &A.Return_Dt
                 else
                    if ($Begin_Dt_DMY < $FromDate_DTU and $Return_Dt_DMY = $FromDate_DTU)
                       Let $Beg_Dt= &A.Begin_Dt
                       Let $Ret_Dt =&A1.FromDate
                    end-if
                 end-if
              end-if
           end-if
        end-if
        !let #Dur_days = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
        do Convert-To-DTU-Date($Beg_Dt, $Begin_Dt_DMY)
        let $Begin_Dt_DMY = rtrim(ltrim($Begin_Dt_DMY,' '),' ')
        do Convert-To-DTU-Date($Ret_Dt, $Return_Dt_DMY)
        let $Return_Dt_DMY = rtrim(ltrim($Return_Dt_DMY,' '),' ')
        let $Returndate = $Return_Dt_DMY


!Commented below line to include only days absent during absence period
!add &A.Duration_Days to #Runing_#Absence_TotalDays

!locate the work schedule as of the work absence begin date

      let $AsOfDate = $FromDate_DTU

      do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist_out,$futurescheduleExist_out
                            $futuresched_Begin_dt_out)


      let $schd_abs_st_day_out=to_char(#schd_abs_st_day_out)

!Exclude non working days and holidays for calculation of duration days

      do Convert-To-DTU-Date($Beg_Dt, $Beg_Dt_DMY)
      let $Beg_Dt_DMY = rtrim(ltrim($Beg_Dt_DMY,' '),' ')
      do Convert-To-DTU-Date($Ret_Dt, $Return_Dt_DMY)
      let $Return_Dt_DMY = rtrim(ltrim($Return_Dt_DMY,' '),' ')
      let #Duration_Days = 0

      do get-schedule-begin-date($CurrentSchedule_out, $schd_begin_dt)
      let #day_no = 0
      let #Dur_days = 0.000
      let #diffdays = 0
      let #Schd_days_out = 0
      let #Dura_days = 0.000
      !if $currentscheduleExist_out = 'Y'
      while $Beg_Dt_DMY <= $Return_Dt_DMY
         do dtu-diff-days($schd_begin_dt,$Beg_Dt_DMY,#diffdays)
         let #schd_days = #diffdays + 1
         do Calculate-interim-Schedule-Days($CurrentSchedule_out,$Begin_Dt_DMY, #schd_days_out)
         !do Calculate-Schedule-Days($CurrentSchedule_out,$Begin_Dt_DMY, #schd_days_out)
         if $currentscheduleExist_out = 'Y'
            let #day_no = mod(#schd_days, #Schd_days_out)
         end-if
         if #day_no = 0
              let #day_no = #Schd_days_out
         end-if
         let $asof_lv_date = $Beg_Dt_DMY
         do Is-INTERIM-Holiday($HolidayFlag_in )
         if $HolidayFlag_in = 'N' ! holiday flag
            do Get-Interim-Day-schedule($CurrentSchedule_out,$currentSchedule_dt_out,#day_no,#Dura_Days)
            if #Dura_days > 0
               let #Dur_days = #Dur_days + #Dura_days
         else
               if rtrim(ltrim($CurrentSchedule_out, ' '), ' ') = ''
                  let #Dur_days = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
               end-if
         end-if
            if #day_no=#Schd_Days_out
               let #day_no = 1
            else
               let #day_no = #day_no+1
            end-if
            let #Dura_days = 0
         end-if
         do dtu-add-days($Beg_Dt_DMY,1, $NextDay)
         !increment loop date
         let  $Beg_Dt_DMY = $NextDay
         !do Convert-To-DTU-Date($Beg_Dt, $Beg_Dt_DMY)
         let $asof_lv_date = $Beg_Dt_DMY
      end-while
      !end-if
      add #Dur_days to #Runing_#Absence_TotalDays
      do Format-Number(#Dur_days, $out, '999.999')
      if rtrim(ltrim($out, ' '), ' ') = ''
         let nvl($out,'00.000')
         print '0.000'       (0,{c8})
      else
         print $out          (0,{c8})
     end-if

      ! highlight those that have  no schedule assigned
      if $currentscheduleExist_out='N'
         if $Previous_emp_id <> $Empid
            print '*' (0,34)
         end-if
      end-if
      if $currentscheduleExist_out='Y'
         let $HolidayFlag='N'
         if $Begin_Dt_DMY <= $FromDate_DTU
             let $Begin_Dt_DMY = $FromDate_DTU
         end-if
         let $loop_dt =  $FromDate_DTU
         let #looking_for_day = #schd_abs_st_day_out

         while $loop_dt <=  $Thrudate_DTU
            if &A.DURATION_DAYS=0
               ! check if loop_dt starts at the same date of the absence
               ! check if $AsOfDate =  $Begin_Dt_DMY_N . update absence date routine
               if $loop_dt =  $Begin_Dt_DMY
                  let $Inner_loop_dt =  $Begin_Dt_DMY
                  !set looking for  day the same as before
                  let #Absence_looking_for_day = #looking_for_day
                  let #Absence_TotalDays =0
                  !start Inner Loop

                  while  $Inner_loop_dt <=  $ReturnDate

                     ! Calculate duration days. Loop for each day of the absence and check if the days was a work day
                     let $AsOfDate =$Inner_loop_dt
                     ! Check holiday schedule. If holiday then no need to update absence duration days
                     do Is-Holiday($HolidayFlag_in )
                     if $HolidayFlag_in = 'N' ! holiday flag
                        do Get-Day-schedule($CurrentSchedule_out,$currentSchedule_dt_out,#Absence_looking_for_day,#Duration_Days)
                     end-if
                     let #Absence_TotalDays =#Absence_TotalDays+#Duration_Days
                     ! Update total duration days
                     let $Absence_TotalDays =to_char( #Absence_TotalDays)
                     let #Duration_Days=0
                     if #Absence_looking_for_day=#Schedule_Days_out
                        let #Absence_looking_for_day = 1
                     else
                        let #Absence_looking_for_day= #Absence_looking_for_day +1
                     end-if
                     let $Absence_looking_for_day=to_char(#Absence_looking_for_day)

                     do dtu-add-days($AsOfDate,1, $NextDay)
                     !increment loop date
                     let  $Inner_loop_dt =$NextDay
                     !check if next schedule has kicked in yet
                     if $futurescheduleExist_out = 'Y'
                        ! check if next day has kicked in yet
                        if $Inner_loop_dt=$futuresched_Begin_dt_out
                           let $AsOfDate=$futuresched_Begin_dt_out
                           do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist,$futurescheduleExist_out
                              $futuresched_Begin_dt_out)
                           let #Absence_looking_for_day = #schd_abs_st_day_out
                        end-if
                     end-if
                  end-while


               end-if
            end-if
            ! Calculate duration days. Loop for each day of the absence and check if the days was a work day
            let $AsOfDate =$loop_dt
            ! Check holiday schedule. If holiday then no need to update duration days
            do Is-Holiday($HolidayFlag_in )
            if $HolidayFlag_in = 'N' ! holiday flag
            do Get-Day-schedule($CurrentSchedule_out,$currentSchedule_dt_out,#looking_for_day,#Duration_Days)
            end-if
            let #TotalDays =#TotalDays+#Duration_Days
            ! Update total duration days
            let $TotalDays =to_char(#TotalDays)

            let #Duration_Days=0
            if #looking_for_day=#Schedule_Days_out
            let #looking_for_day = 1
            else
              let #looking_for_day= #looking_for_day +1
            end-if
            let $looking_for_day=to_char(#looking_for_day)


            do dtu-add-days($AsOfDate,1, $NextDay)
            !increment loop date
            let $loop_dt =$NextDay

            ! check if next schedule has kicked in yet

            if $futurescheduleExist_out = 'Y'
              ! check if next day has kicked in yet
              if $loop_dt=$futuresched_Begin_dt_out
                 let $AsOfDate=$futuresched_Begin_dt_out
                 do get-schedule-details($CurrentSchedule_out,$currentSchedule_dt_out,#schd_abs_st_day_out,
                             #Schedule_Days_out,$currentscheduleExist,$futurescheduleExist_out
                              $futuresched_Begin_dt_out)
                 let #looking_for_day = #schd_abs_st_day_out
               end-if
            end-if


         end-while
      else
         if rtrim(ltrim($CurrentSchedule_out, ' '), ' ') = ''
            let #TotalDays = datediff($Ret_Dt, $Beg_Dt, 'DAY') + 1
         end-if
         !finish outer loop

      end-if

   if &A.Duration_Days =0
         display 'Duration DAYS'
         add #Absence_TotalDays to #Runing_#Absence_TotalDays
         do Format-Number(#Absence_TotalDays , $out, '999.999')
         print $out          (0,{c8})

   end-if
   add #TotalDays to #RuningTotalDays
 else
   do Format-Number(&A.DURATION_DAYS, $out, '999.999')
   print $out          (0,{c8})
   add &A.DURATION_DAYS to #Runing_#Absence_TotalDays
   add &A.DURATION_DAYS to #RuningTotalDays
   let #TotalDays =#TotalDays + &A.DURATION_DAYS
 end-if
FROM  PS_EMPLOYEES B, PS_ABSENCE_HIST A,
           PS_JOB C, PS_ABS_TYPE_TBL D

WHERE ((A.BEGIN_DT >= $FromDate
AND A.BEGIN_DT <= $Thrudate)
OR (A.RETURN_DT >= $FromDate
AND A.RETURN_DT <= $Thrudate)
OR (A.BEGIN_DT < $FromDate
AND A.RETURN_DT > $Thrudate)
OR (A.BEGIN_DT <= $Thrudate
AND A.RETURN_DT is NULL))
AND C.DEPTID = $DeptID
AND C.SETID_DEPT =  $SETID


AND   A.EMPLID = B.EMPLID
AND     C.EMPLID = A.EMPLID
AND     C.EMPL_RCD = A.EMPL_RCD
AND     C.EFFDT = (SELECT MAX(E.EFFDT)
                       FROM PS_JOB E
                       WHERE A.EMPLID = E.EMPLID AND A.EMPL_RCD = E.EMPL_RCD
                       AND E.EFFDT <= A.BEGIN_DT)
AND C.EFFSEQ =  (SELECT MAX(EE.EFFSEQ)
                       FROM PS_JOB EE
                       WHERE A.EMPLID = EE.EMPLID AND A.EMPL_RCD = EE.EMPL_RCD AND
                        EE.EFFDT = C.EFFDT)
AND     D.ABSENCE_TYPE=A.ABSENCE_TYPE
AND     D.SETID = (SELECT SETID
              FROM PS_SET_CNTRL_REC
              WHERE SETCNTRLVALUE = C.REG_REGION
              AND  RECNAME = 'ABS_TYPE_TBL')

ORDER BY C.REG_REGION,B.DEPTNAME_ABBRV, B.NAME
end-SELECT

end-procedure

!**************************************************************************
! get-GetTotals
!
!**************************************************************************
begin-procedure GetTotals
   display 'Get Totals'
   display $Empid
   print '' (+1,0,1)

   !let #Grand_Absence_Total_Days =to_char(#Runing_#Absence_TotalDays)
   do Format-Number(#Runing_#Absence_TotalDays, $out, 'b99.999')
   display 'Absence' noline
   display $out
   print $out          (0,{c8},9)

   do Format-Number(#TotalDays , $out, 'b99.999')
   display 'Total Days' noline
   display $out
   print $out          (0,{c9},14)

   divide #TotalDays into #Runing_#Absence_TotalDays  on-error=zero
   multiply 100 times #Runing_#Absence_TotalDays
   do Format-Number(#Runing_#Absence_TotalDays, $out, 'b9999.999')
   display '% ' noline
   display $out
   print $out (0,{c10})


   move 0 to #RuningTotalDays
   move 0 to #Runing_#Absence_TotalDays
   move 0 to #Absence_TotalDays
   move 0 to #TotalDays
   print '' (+2,0,1)
end-procedure GetTotals



!**************************************************************************
! get-schedule-details
!
!   Output: $SchedID  - The current schedule ID
!           $curr_begin_dt - The current scheduleDate
!           #schd_abs_st_day_out - Day in Work schedule corresponding to 'AsOfDate'
!           #Schedule_Days - No of days in current cycle
!**************************************************************************

begin-procedure get-schedule-details(:$SchedID,:$curr_begin_dt,:#schd_abs_st_day_out,
                                     :#Schedule_Days,:$Current_Exist,:$futurescheduleExist_out
                                     :$futuresched_Begin_dt_out)

 do get-Current-Schedule-Details($Current_Exist,$curr_begin_dt,$SchedID)
 do get-schedule-begin-date($SchedID,$schedule_begin_dt)
 do Get-Future-Schedule($curr_begin_dt,$futurescheduleExist_out,$futuresched_Begin_dt_out)
 !Schedule doesn't exist so dont bother calculating days. Indicate with flag
 if $Current_Exist = 'N'
  print '' (0,0)
 else
   do Calculate-Schedule-Days($SchedID,$curr_begin_dt,#Schedule_Days)
   do Calculate-schd-diff($schedule_begin_dt,#Schedule_Days,#schd_abs_st_day_out)
 end-if
end-procedure

begin-procedure Company-Change
  new-page
end-procedure

!**************************************************************************
! Get-Day-schedule
!
!   input: $SchedID, $curr_begin_dt, #looking_for_today
!   output: #duration_days
!**************************************************************************

begin-procedure Get-Day-schedule($currentschedID,$currentsched,#looking_for_today,:#duration_days)

   let #Previous_Day_No=0
   let #Previous_Seq_No=0
   let #lday_count=0
   let #duration_days =0

do Convert-From-DTU-Date($currentsched, $currentsched_DMY)
begin-SELECT
C.ABSW_SEQ_NO
   let #Seq_No = &C.ABSW_SEQ_NO
   let $Seq_No=to_char(#Seq_No )

C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours=&C.DURATION_HOURS
   let #Day_No =&C.ABSW_DAY_NO
   let $Day_no=to_char(#Day_No)

   ! only count days that have hours > 0
   if #Absw_Duration_Hours  > 0
      if #Seq_No <> #Previous_Seq_No
         let #lday_count=#lday_count +1
      else
         if #Day_No <> #Previous_Day_No
            let #lday_count=#lday_count +1
         end-if
      end-if
      if #lday_count=#looking_for_today
            let #duration_days=#duration_days +1
      end-if
   end-if
   let #Previous_Seq_No=#Seq_No
   let #Previous_Day_No=#Day_No

   let $duration_days=to_char(#duration_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  = $currentschedID
AND C.BEGIN_DT <= $currentsched_DMY
end-SELECT

end-procedure

!**************************************************************************
! Is-Holiday:  Check if given day is defined as a holiday
!
!   output: $HolidayFlag_out
!**************************************************************************

begin-procedure Is-Holiday(:$HolidayFlag_out)

   let $HolidayFlag_out='N'
begin-SELECT
B.HOLIDAY_SCHEDULE
   let $HolidayFlag_out='Y'

FROM
 PS_ABSW_SCHEDULE A,
 PS_HOLIDAY_DATE B
WHERE
A.HOLIDAY_SCHEDULE = B.HOLIDAY_SCHEDULE
AND A.EMPLID = $_Empid
AND A.EMPL_RCD = #_Empl_RCD
AND B.HOLIDAY= $AsOfDate_DMY ! ******* was $_AsOfDate
end-SELECT
end-procedure

!**************************************************************************
! Calculate-schd-diff:  Calculates days since work schedule
!
!   input:  $currentsched_Begin_dt, #Schedule_Days
!   output: #schd_abs_st_day
!**************************************************************************

begin-procedure Calculate-schd-diff($currentsched_Begin_dt,#Schedule_Days,:#schd_abs_st_day)

   let $Schedule_Days=to_char(#Schedule_Days)

   ! calculate days since work schedule
   do dtu-diff-days($currentsched_Begin_dt,$_AsOfDate,#diffDays)

   display '#diffDays'
   display #diffDays
   let #schd_days_s_st= #diffDays + 1
   display ' #schd_days_s_st'
   display #schd_days_s_st
   let #schd_abs_st_day = mod(#schd_days_s_st,#Schedule_Days)
   if  #schd_abs_st_day =0
      let #schd_abs_st_day =#Schedule_Days
   end-if
   let $schd_abs_st_day=to_char(#schd_abs_st_day)
   let $schd_days_s_st=to_char(#schd_days_s_st)
   let $Schedule_Days=to_char(#Schedule_Days)
   !display $schd_days_s_st
   !display $Schedule_Days
   !display $schd_abs_st_day

end-procedure

!**************************************************************************
! get-Current-Schedule-Details
!
!    output: :$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID
!**************************************************************************

begin-procedure get-Current-Schedule-Details(:$currentscheduleExist,:$currentsched_Begin_dt,:$currentschedID)

   ! get current schedule at absence begin date
   let $currentschedID =''
   let $currentsched_Begin_dt =''
   let $currentscheduleExist='N'
do Convert-From-DTU-Date($_AsOfDate, $AsOfDate_DMY)

begin-SELECT
E.EMPLID
E.EMPL_RCD
E.BEGIN_DT
   let $currentsched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($currentsched_Begin_dt_N, $currentsched_Begin_dt)
E.ABSW_SCHD_ID

   let  $currentschedID =&E.ABSW_SCHD_ID
   let $currentscheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_Empid
AND   E.EMPL_RCD = #_Empl_RCD
AND   E.BEGIN_DT =(SELECT MAX(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT <= $AsOfDate_DMY)
end-SELECT

end-procedure

!**************************************************************************
! get-schedule-begin-date: Gets the begin date of the work schedule
!
!     input: $Sched_ID
!     output: $Schedule_Begin_dt_out
!**************************************************************************

begin-procedure get-schedule-begin-date($SchedID_in,:$Schedule_Begin_dt_out)
begin-SELECT
F.BEGIN_DT
   let $Schedule_Begin_dt_N=&F.BEGIN_DT
   do Convert-To-DTU-Date($Schedule_Begin_dt_N, $Schedule_Begin_dt_out)

FROM PS_ABSW_SCHD_TBL F
WHERE F.ABSW_SCHD_ID = $SchedID_in
end-SELECT
end-procedure

!**************************************************************************
! Get-Future-Schedule
!
!    input: $curr_begin_dt_in
!    ouptut: $futurescheduleExist, $futuresched_Begin_dt
!**************************************************************************

begin-procedure Get-Future-Schedule($curr_begin_dt_in,:$futurescheduleExist,:$futuresched_Begin_dt)

   let $futurescheduleExist ='N'
   let $futurescheduleAnother ='Y'
   let $futureschedID =''
   let $futuresched_Begin_dt =''

do Convert-From-DTU-Date($curr_begin_dt_in, $curr_begin_dt_in_DMY)
begin-SELECT
E.BEGIN_DT
   let $futuresched_Begin_dt_N=&E.BEGIN_DT
   do Convert-To-DTU-Date($futuresched_Begin_dt_N, $futuresched_Begin_dt)

E.ABSW_SCHD_ID
   let  $futureschedID =&E.ABSW_SCHD_ID
   let $futurescheduleExist ='Y'

FROM PS_ABSW_SCHEDULE E
WHERE E.EMPLID = $_Empid
AND   E.EMPL_RCD = #_Empl_RCD
AND   E.BEGIN_DT =(SELECT MIN(BEGIN_DT)
                   FROM PS_ABSW_SCHEDULE F
                   WHERE E.EMPLID = F.EMPLID
                   AND   E.EMPL_RCD = F.EMPL_RCD
                   AND F.BEGIN_DT >$curr_begin_dt_in_DMY)
end-SELECT
end-procedure Get-Future-Schedule

!**************************************************************************
! Calculate-Schedule-Days: Calculates days in one work schedule
!
!    input:    $currentschedID,$curr_begin_dt
!    output:   #schd_cycle_days
!**************************************************************************

begin-procedure Calculate-Schedule-Days($currentschedID, $curr_begin_dt,:#schd_cycle_days)

   let #Prev_Day_No=0
   let #Prev_Seq_No=0
   let #schd_cycle_days=0

do Convert-From-DTU-Date($curr_begin_dt, $curr_begin_dt_in_DMY)
begin-SELECT
C.ABSW_SEQ_NO
   let #Absw_Seq_No = &C.ABSW_SEQ_NO
C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours =&C.DURATION_HOURS
   let #Absw_Day_No =&C.ABSW_DAY_NO
   if #Absw_Seq_No <> #Prev_Seq_No
      let #schd_cycle_days=#schd_cycle_days +1
   else
      if #Absw_Day_No <> #Prev_Day_No
         let #schd_cycle_days=#schd_cycle_days +1
      end-if
   end-if
   let #Prev_Seq_No=#Absw_Seq_No
   let #Prev_Day_No=#Absw_Day_No
   let $schd_cycle_days=to_char(#schd_cycle_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  =$currentschedID
AND C.BEGIN_DT <=  $curr_begin_dt_in_DMY
end-SELECT

end-procedure
!*******************************************************************************
! Calculate-interim-Schedule-Days: Calculates INTERIM days in one work schedule
!
!    input:    $currentschedID,$curr_begin_dt
!    output:   #schd_cycle_days
!********************************************************************************

begin-procedure Calculate-interim-Schedule-Days($currentschedID, $curr_begin_dt,:#schd_cycle_days)

   let #Prev_Day_No=0
   let #Prev_Seq_No=0
   let #schd_cycle_days=0

do Convert-From-DTU-Date($curr_begin_dt, $curr_begin_dt_in_DMY)

begin-SELECT
C.ABSW_SEQ_NO
   let #Absw_Seq_No = &C.ABSW_SEQ_NO
C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours =&C.DURATION_HOURS
   let #Absw_Day_No =&C.ABSW_DAY_NO
   if #Absw_Seq_No <> #Prev_Seq_No
      let #schd_cycle_days=#schd_cycle_days +1
   else
      if #Absw_Day_No <> #Prev_Day_No
         let #schd_cycle_days=#schd_cycle_days +1
      end-if
   end-if
   let #Prev_Seq_No=#Absw_Seq_No
   let #Prev_Day_No=#Absw_Day_No
   let $schd_cycle_days=to_char(#schd_cycle_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  =$currentschedID
AND C.BEGIN_DT =  (select max(B.BEGIN_DT) FROM PS_ABSW_SCHD_VW B WHERE B.EMPLID = C.EMPLID AND
                   C.EMPL_RCD  = B.EMPL_RCD AND C.ABSW_SCHD_ID = B.ABSW_SCHD_ID AND B.BEGIN_DT <= $curr_begin_dt_in_DMY)
end-SELECT
end-procedure
!**************************************************************************************
! IS-INTERIM-HOLIDAY: Calculates during a given absence start date and absence end date
!                     are there any holidays
!    input:
!    output: $HOLIDAY_FLAG
!**************************************************************************************
BEGIN-PROCEDURE IS-INTERIM-HOLIDAY(:$HOLIDAY_FLAG)
 let $HOLIDAY_FLAG='N'

begin-SELECT
B.HOLIDAY_SCHEDULE
   let $HOLIDAY_FLAG='Y'

FROM
 PS_ABSW_SCHEDULE A,
 PS_HOLIDAY_DATE B
WHERE
A.HOLIDAY_SCHEDULE = B.HOLIDAY_SCHEDULE
AND A.EMPLID = $_Empid
AND A.EMPL_RCD = #_Empl_RCD
AND B.HOLIDAY= $_asof_lv_date ! ******* was $_AsOfDate
end-SELECT
END-PROCEDURE

!*********************************************************************************
! Get-Interim-Day-schedule : To calculate the duration days for a given day number
!
!   input: $SchedID, $curr_begin_dt, #looking_for_today
!   output: #duration_days
!*********************************************************************************

begin-procedure Get-Interim-Day-schedule($currentschedID,$currentsched,#looking_for_today,:#duration_days)

   let #Previous_Day_No=0
   let #Previous_Seq_No=0
   let #lday_count=0
   let #duration_days =0

do Convert-From-DTU-Date($currentsched, $currentsched_DMY)
begin-SELECT
C.ABSW_SEQ_NO
   let #Seq_No = &C.ABSW_SEQ_NO
   let $Seq_No=to_char(#Seq_No )

C.ABSW_DAY_NO
C.DURATION_HOURS
   let #Absw_Duration_Hours=&C.DURATION_HOURS
   let #Day_No =&C.ABSW_DAY_NO
   let $Day_no=to_char(#Day_No)

   ! only count days that have hours > 0
   if #Absw_Duration_Hours  > 0
      if #Seq_No <> #Previous_Seq_No
         let #lday_count=#lday_count +1
      else
         if #Day_No <> #Previous_Day_No
            let #lday_count=#lday_count +1
         end-if
      end-if

      if #lday_count=#looking_for_today
            let #duration_days=#duration_days +1
      end-if

   end-if
   let #Previous_Seq_No=#Seq_No
   let #Previous_Day_No=#Day_No

   let $duration_days=to_char(#duration_days)

FROM
PS_ABSW_SCHD_VW C
WHERE C.EMPLID = $_Empid
AND C.EMPL_RCD = #_Empl_RCD
AND C.ABSW_SCHD_ID  = $currentschedID
AND C.BEGIN_DT = (select max(B.BEGIN_DT) FROM PS_ABSW_SCHD_VW B WHERE B.EMPLID = C.EMPLID AND
                   C.EMPL_RCD  = B.EMPL_RCD AND C.ABSW_SCHD_ID = B.ABSW_SCHD_ID AND B.BEGIN_DT <= $currentsched_DMY)
end-SELECT
end-procedure
!***********************************************************************
#include 'hrrnctl1.sqc'  ! GET RUN CONTROL PARAMETER VALUES
#include 'hrgetval.sqc'  ! GET VALUES MASK ROUTINES
#include 'reset.sqc'     ! RESET PRINTER PROCEDURE
#include 'stdapi.sqc'    ! UPDATE PROCESS API
#include 'curdttim.sqc'  ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'  ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'    ! ROUTINES TO FORMAT NUMBERS
#include 'datemath.sqc'  ! ROUTINES FOR DATEMATH
#include 'askftd.sqc'    ! From Thru Date input
#Include 'getdptnm.sqc'  ! Get-Department-Name procedure
#Include 'getcodta.sqc'  ! Get-Company-Data procedure (used in StdHdg02)
#Include 'readxlat.sqc'  ! Read-Translate-Table procedure

!**************Begin Resolution 594678************

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#include 'rellang.sqc'   !Gives Description from Related Lang tables

!**************End Resolution 594678**************

