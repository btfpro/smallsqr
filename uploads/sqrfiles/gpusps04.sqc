!***********************************************************************
!  GPUSPS04: Global Payroll Payslips - Static USA ABSENCE              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/21:01:52:52                                 *
!       $Release:  HR9                                                 *
!      $Revision:  102                                                 *
!                                                                      *
!***********************************************************************
! Change History
! Incident ID    Dated     Comments
!
! 126994900       7/05     Performance issues found when printing the payslips. 
!                          The GP_PAYMENT table Select statement needs to be tuned.
!
! 1372311000     11/05     Absence balance accumulators not printing unless 
!                          accumulator's name suffix matches country's suffix value. 
!                          This restriction should not exist.

#Define ABS_STATIC_DetailArray_Size 99
#DEFINE ABS_STATIC_TITLE_SIZE 1
#define Net_Dist_ARRAY_SIZE 10000

!***********************************************************************
begin-procedure Init-Arrays_ABS_STATIC
!***********************************************************************

Create-Array Name=ABS_STATIC_DetailArray Size = {ABS_STATIC_DetailArray_Size}
    Field=Name:char
    Field=Balance:Number
    
Create-Array Name=ABS_STATIC_SummaryArray Size = 1
    Field=Name:char
    Field=Balance:Number


let #i = 0

while (#i < {ABS_STATIC_DetailArray_Size} )


    Put ' ' into ABS_STATIC_DetailArray(#i) name
    Put 0 into ABS_STATIC_DetailArray(#i) Balance
    add 1 to #i

end-while

    Put ' ' into ABS_STATIC_SummaryArray(0) name
    Put 0 into ABS_STATIC_SummaryArray(0) Balance

    
end-procedure

!***********************************************************************


!***********************************************************************
begin-procedure Init-Variables_ABS_STATIC
!***********************************************************************

let $space_left   = 'y'
let $section_printed = 'n'
let #detail_line = 0
let $correct_suffix = 'n'
Let #Title_Size = {ABS_STATIC_TITLE_SIZE}
if upper($gbl_new_lang_flag) = 'Y'
     do Get_Field_Information ($ReportID, 'ABSENCE_HOURS'   , $ABSENCE_HOURS_LBL, #DW)
     do Get_Field_Information ($ReportID, 'NETPAY_TITLE' , $NetPayTitle, #DW)
     do Get_Field_Information ($ReportID, 'NETPAY_CHK_NBR_LBL' , $CheckTitle, #DW)
     do Get_Field_Information ($ReportID, 'NETPAY_DDP_ACT_LBL' , $DDPTitle, #DW)
     do Get_Field_Information ($ReportID, 'OTHER_LBL' , $OthersTitle, #DW)
     do Get_Field_Information ($ReportID, 'TOTAL_LBL' , $TotalTitle, #DW)
     
     do Get_Field_Information ($ReportID, 'CASH_LBL' , $CashTitle, #DW)
     do Get_Field_Information ($ReportID, 'WIRE_TRANSFER_LBL' , $WireTransferTitle, #DW)
     do Get_Field_Information ($ReportID, 'POSTAL_ORDER_LBL' , $PostalOrderTitle, #DW)
     do Get_Field_Information ($ReportID, 'PAYMENT_TITLE' , $PaymentTitle, #DW)
        
end-if
  
end-procedure

!***********************************************************************


!***********************************************************************
begin-procedure Init_Net_Dist_Arrays04
!***********************************************************************
Create-Array Name=NP04_Check_Data Size={Net_Dist_ARRAY_SIZE}
   field=check_nbr:Char
   field=check_amt:Number
   field=pmt_mthd1:Char

Create-Array Name=NP04_NetPay_Data Size={Net_Dist_ARRAY_SIZE}
   field=account_nbr:Char
   field=netpay_amt:Number
  
Create-Array Name=NP04_CashPay_Data Size={Net_Dist_ARRAY_SIZE}
   field=cashpay_amt:Number
   
Create-Array Name=NP04_WirePay_Data Size={Net_Dist_ARRAY_SIZE}
   field=w_account_nbr:Char
   field=wirepay_amt:Number
   
Create-Array Name=NP04_PostalPay_Data Size={Net_Dist_ARRAY_SIZE}
   field=postalpay_amt:Number
    
let #i = 0
while (#i < {Net_Dist_ARRAY_SIZE} )
   Put '0' into NP04_Check_Data(#i) check_nbr
   Put 0 into NP04_Check_Data(#i) check_amt
   Put '0' into NP04_Check_Data(#i) pmt_mthd1
   
   Put '0' into NP04_Netpay_Data(#i) account_nbr
   Put 0 into NP04_Netpay_Data(#i) netpay_amt
   
   Put 0 into NP04_CashPay_Data(#i) cashpay_amt
   Put '0' into NP04_WirePay_Data(#i) w_account_nbr
   Put 0 into NP04_WirePay_Data(#i) wirepay_amt
   Put 0 into NP04_PostalPay_Data(#i) postalpay_amt
   
   add 1 to #i
end-while

end-procedure


    
!**********************************************************************
!**********************************************************************
!      Absence_Hours_Static
!**********************************************************************
!**********************************************************************

begin-procedure Absence_Hours_Static

#debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section GPUSPS04.SQC ')
#debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Procedure Absence_Hours_Static')

    do Init-Variables_ABS_STATIC
    do Init-Arrays_ABS_STATIC
    Do Init_Net_Dist_Arrays04
    

    do Get-Current-DateTime
    #debug1 show '** USA STATIC ABSENCE section:         #current-line = '#current-line ' #page-count = '#page-count
    while ($section_printed = 'n')
        do get_start_page_line_number(#current-line, #page-count, #start-section-line-number, #start-section-page-number)
     !    Let #Title_Size = {ABS_STATIC_TITLE_SIZE}
     !   Let #gbl_curr_Section_Nbr_Lines = #gbl_curr_Section_Nbr_Lines + #Title_Size
        do evaluate_space(#start-section-line-number,$space_left)
        #debug1 show '** USA STATIC ABSENCE section:         #start-section-line-number = '#start-section-line-number ' $space_left = ' $space_left
        if $space_left = 'n'
            if $gbl_Paycheck_To_Do = 'y'
                Do print_check_usa
                #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Back into Procedure Absence_Hours_Static')
                move 'n' to $check_collision 
                move 'n' to $gbl_Paycheck_To_Do
            else
                new-page
                Move 1 to #gbl_curr_Section_Start_Line
                Move 1 to #start-section-line-number
                do Absence_Static
                #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Back into Procedure Absence_Hours_Static')
                move 'y' to $section_printed
                break
            end-if
        end-if
        if $space_left = 'y'
            if $gbl_Paycheck_To_Do = 'y'
                do evaluate_bankdraft_collision(#start-section-line-number,$check_collision)
                if $check_collision = 'y'
                
                    Do print_check_usa
                    #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Back into Procedure Absence_Hours_Static')
                    move 'n' to $check_collision 
                    move 'n' to $gbl_Paycheck_To_Do
                else
                    do Absence_Static
                    #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Back into Procedure Absence_Hours_Static')
                    move 'y' to $section_printed
                    break
                end-if
            else
                do Absence_Static
                #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Back into Procedure Absence_Hours_Static')
                move 'y' to $section_printed
                break
            end-if
        end-if
    end-while
end-procedure



!**********************************************************************
!**********************************************************************
!      Absence_Static
!**********************************************************************
!**********************************************************************
begin-procedure Absence_Static
    
    #debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Procedure Absence_Static')    
    do get_absence_elements_ABS_STATIC
    Do Init_Options04
    Do Get_Check_Data04
    Do Get_NetPay_Data04
    Do Get_CashPay_Data04
    Do Get_WirePay_Data04
    Do Get_PostalPay_Data04
    do Print_Absence_Title_ABS_STATIC
    do Print_Absence_Detail_Lines_ABS_STATIC
    do print_summary_line_ABS_STATIC
   
    
end-procedure Absence_Static


!**********************************************************************
!**********************************************************************
!      get_absence_elements_ABS_STATIC
!**********************************************************************
!**********************************************************************
begin-procedure get_absence_elements_ABS_STATIC

!select from the extract table



BEGIN-SELECT ON-ERROR=SQL-ERROR
A.PIN_NUM               &A.PIN_NUM_ABS_STATIC     
    let #abs_static_pin_num = &A.PIN_NUM_ABS_STATIC
SUM(A.CALC_RSLT_VAL)    &A.CALC_RSLT_VAL_ABS_STATIC


    let $pin_nm = ' '
    Do get_pin_nm(#abs_static_pin_num, $pin_nm)
    
    Do ABS_STATIC_detail_line
A.GP_PSLP_ORDER             &A.GP_PSLP_ORDER_ABS_STATIC        
FROM PS_GPUS_PSLP_RSLT A
WHERE A.JOBINSTANCE = #gbl_job_instance AND
A.EMPLID = $gbl_tgt_Emplid AND
A.PMT_GRP_ID = #gbl_tgt_Grp_ID AND
A.GPUS_PSLP_ELN_CAT = '70' AND
A.CAL_RUN_ID        = $gbl_rc_Calendar_Group AND
A.GP_CNTRY_PSLP_ELN = $gbl_GP_CNTRY_PSLP_ELN AND
A.GP_ELN_SET        = $gbl_GP_ELN_SET AND
A.SEQ_NUM = 10 GROUP BY A.PIN_NUM, A.GP_PSLP_ORDER ORDER BY A.GP_PSLP_ORDER

END-SELECT

end-procedure

!**********************************************************************
!**********************************************************************
!      ABS_STATIC_detail_line
!**********************************************************************
!**********************************************************************


begin-procedure ABS_STATIC_detail_line

if (#detail_line < (#gbl_curr_Section_Dtl_Lines - 1) )

    
    Move &A.CALC_RSLT_VAL_ABS_STATIC to #Absence

    let $pin_name = ' '
  
    Do get_pin_name(#abs_static_pin_num, $pin_name)
    Put $pin_name into ABS_STATIC_DetailArray(#detail_line) name
    Put #Absence into ABS_STATIC_DetailArray(#detail_line) balance

    Add 1 to #detail_line

else
    do summary_ABS_STATIC_line
end-if

end-procedure



!**********************************************************************
!**********************************************************************
!      summary_ABS_STATIC_line
!**********************************************************************
!**********************************************************************


begin-procedure summary_ABS_STATIC_line

#debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Procedure summary_ABS_STATIC_line')
#debug1 show '** USA STATIC ABSENCE section:         #detail_line  = ' #detail_line


    Put 'Other' into ABS_STATIC_summaryArray(0) name
    Move &A.CALC_RSLT_VAL_ABS_STATIC to #Absence
    Array-Add #Absence to ABS_STATIC_summaryArray(0) balance

end-procedure



!**********************************************************************
!**********************************************************************
!      Read-DetailArray_ABS_STATIC
!**********************************************************************
!**********************************************************************


begin-procedure Read-DetailArray_ABS_STATIC

let #i = 0

while (#i < (#gbl_curr_Section_Dtl_Lines - 2) )
    
    get $Pin_nm #Absence from ABS_STATIC_DetailArray(#i) name balance

    if $Pin_nm = ' '
        #debugx show 'break in read detail array #i   #gbl_curr_Section_Dtl_Lines    ' #i   #gbl_curr_Section_Dtl_Lines 
        break
    end-if
    
    Add 1 to #i
    
end-while

end-procedure


!**********************************************************************
!**********************************************************************
!      Read_ABS_STATIC_SummaryArray

!**********************************************************************
!**********************************************************************


begin-procedure Read_ABS_STATIC_SummaryArray

    get $Pin_nm #Absence from ABS_STATIC_SummaryArray(0) name balance
    #debugx show 'Read-ABS_STATIC_SummaryArray(0)  $Pin_nm #Absence' $Pin_nm #Absence
end-procedure


!**********************************************************************
begin-procedure Init_Options04
!**********************************************************************
let $PayslipDate = ''
#debug do Pslp-Proc-Debug-Msg('USA STATIC ABSENCE section: Procedure Init_Options04')
#debug1 show '** USA STATIC ABSENCE section:         CAL_RUN_ID = ' $gbl_rc_Calendar_Group ' EMPLID = ' $gbl_tgt_Emplid

BEGIN-SELECT LOOPS = 1 ON-ERROR=SQL-ERROR
DEBIT_DT &payslip_date04  

  let $PayslipDate = &payslip_date04

FROM PS_GP_PAYMENT
WHERE CAL_RUN_ID = $gbl_rc_Calendar_Group
AND EMPLID = $gbl_tgt_Emplid 

END-SELECT

if ($gbl_tgt_pslp_gen_dt <> '') or ($gbl_rc_Proc_Name = 'RGEN')
        or ($gbl_rc_Proc_Name = 'RNUM')
   Let $PayslipDate = $gbl_tgt_pslp_gen_dt
end-if

end-procedure !Init_Options04

!**********************************************************************
begin-procedure Get_Check_Data04
!**********************************************************************

let #check_cnt = 0
let #check_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR
A.PYMT_NBR       &NP04_check_nbr  
A.GP_PMT_AMT     &NP04_check_amt
A.PAYMENT_MTHD1  &NP04_pmt_mthd1

  let NP04_Check_Data.check_nbr(#check_cnt) = &NP04_check_nbr
  let NP04_Check_Data.check_amt(#check_cnt) = &NP04_check_amt
  let NP04_Check_Data.pmt_mthd1(#check_cnt) = &NP04_pmt_mthd1
  
  let #check_cnt = #check_cnt + 1
  let #check_total_amt = #check_total_amt + &NP04_check_amt

FROM PS_GP_PYMT_BNK_TBL A
WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
  AND A.EMPLID = $gbl_tgt_Emplid 
  AND A.PMT_GRP_ID = #gbl_tgt_Grp_ID
  AND ((A.PAYMENT_MTHD1 = 'C' AND A.RECON_STAT = '01') OR (A.PAYMENT_MTHD1 = 'Z' OR A.PAYMENT_MTHD1 = 'N'))
  !AND A.RECON_STAT = '01'

END-SELECT

end-procedure !Get_Check_Data04

 
!**********************************************************************
begin-procedure Get_NetPay_Data04
!**********************************************************************

let #netpay_cnt = 0
let #netpay_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR
C.ACCOUNT_EC_ID   &NP04_account_nbr
A.GP_PMT_AMT      &NP04_netpay_amt

  let NP04_NetPay_Data.account_nbr(#netpay_cnt) = &NP04_account_nbr
  let NP04_NetPay_Data.netpay_amt(#netpay_cnt)  = &NP04_netpay_amt
  let #netpay_cnt       = #netpay_cnt + 1
  let #netpay_total_amt = #netpay_total_amt + &NP04_netpay_amt

FROM PS_GP_PYMT_BNK_TBL A 
  ,PS_GP_NET_DIST_DTL B 
  ,PS_PYE_BANKACCT C
  ,PS_GP_CALENDAR D
WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
   AND A.PMT_GRP_ID = #gbl_tgt_Grp_ID
   AND C.EMPLID = $gbl_tgt_Emplid 
   AND C.EMPLID = B.EMPLID
   AND C.ACCOUNT_ID = B.ACCOUNT_ID 
   AND A.GP_PAYGROUP = D.GP_PAYGROUP
   AND A.CAL_ID = D.CAL_ID
   AND A.EMPLID = B.EMPLID 
   AND A.EMPL_RCD = B.EMPL_RCD 
   AND A.INSTANCE = B.INSTANCE 
   AND D.RUN_TYPE = B.RUN_TYPE
   AND A.PAYMENT_MTHD1 = 'T'
   AND B.EFFDT = ( SELECT MAX(M.EFFDT) 
                   FROM PS_GP_NET_DIST_DTL M 
                   WHERE B.EMPLID = M.EMPLID 
                     AND B.EMPL_RCD = M.EMPL_RCD 
                     AND B.INSTANCE = M.INSTANCE 
                     AND B.INSTANCE = A.INSTANCE
                     AND B.RUN_TYPE = M.RUN_TYPE
                     AND M.EFFDT <= {DateIn-Prefix}$PayslipDate{DateIn-Suffix})
                     
END-SELECT

end-procedure !Get_NetPay_Data04

!**********************************************************************
begin-procedure Get_CashPay_Data04
!**********************************************************************

let #cash_cnt = 0
let #cash_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR 
A.GP_PMT_AMT  &NP04_cash_amt

  let NP04_CashPay_Data.cashpay_amt(#cash_cnt) = &NP04_cash_amt
  let #cash_cnt = #cash_cnt + 1
  let #cash_total_amt = #cash_total_amt + &NP04_cash_amt

FROM PS_GP_PYMT_BNK_TBL A 
WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
  AND A.EMPLID = $gbl_tgt_Emplid 
  AND A.PMT_GRP_ID = #gbl_tgt_Grp_ID
  AND A.PAYMENT_MTHD1 = 'A' 
  
END-SELECT

end-procedure !Get_CashPay_Data04

!**********************************************************************
begin-procedure Get_WirePay_Data04
!**********************************************************************

let #wire_cnt = 0
let #wire_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR 
A.GP_PMT_AMT  &NP04_wire_amt

  let NP04_WirePay_Data.wirepay_amt(#wire_cnt) = &NP04_wire_amt
  let #wire_cnt = #wire_cnt + 1
  let #wire_total_amt = #wire_total_amt + &NP04_wire_amt

FROM PS_GP_PYMT_BNK_TBL A

WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
  AND A.EMPLID = $gbl_tgt_Emplid 
  AND A.PMT_GRP_ID = #gbl_tgt_Grp_ID
  AND A.PAYMENT_MTHD1 = 'W'

END-SELECT

end-procedure !Get_WirePay_Data04

!**********************************************************************
begin-procedure Get_PostalPay_Data04
!**********************************************************************

let #postal_cnt = 0
let #postal_total_amt = 0

BEGIN-SELECT ON-ERROR=SQL-ERROR 
A.GP_PMT_AMT  &NP04_postal_amt

  let NP04_PostalPay_Data.postalpay_amt(#postal_cnt) = &NP04_postal_amt
  let #postal_cnt = #postal_cnt + 1
  let #postal_total_amt = #postal_total_amt + &NP04_postal_amt

FROM PS_GP_PYMT_BNK_TBL A

WHERE A.CAL_RUN_ID = $gbl_rc_Calendar_Group 
  AND A.EMPLID = $gbl_tgt_Emplid 
  AND A.PMT_GRP_ID = #gbl_tgt_Grp_ID
  AND A.PAYMENT_MTHD1 = 'P'


END-SELECT

end-procedure !Get_PostalPay_Data04


!**********************************************************************
!**********************************************************************
!      Print_Absence_Title_ABS_STATIC
!**********************************************************************
!**********************************************************************
begin-procedure Print_Absence_Title_ABS_STATIC

let $title_printed = 'n'
let #title_line_count = {ABS_STATIC_TITLE_SIZE}
let #title_dtl_diff = #gbl_curr_Section_Nbr_Lines - #gbl_curr_Section_Dtl_Lines
let #totalboxpos = 0

if #title_dtl_diff > 0
  let #title_line_printed = 0
  let #row1 = #start-section-line-number 
  if #gbl_curr_Section_Dtl_Lines > 1
    let #totalboxpos = #gbl_curr_Section_Dtl_Lines
  else
    let #totalboxpos = 1
  end-if
  #debugx show ' #totalboxpos = #gbl_curr_Section_Dtl_Lines' #totalboxpos  #gbl_curr_Section_Dtl_Lines
  
  columns 3 83

  graphic (#row1,1,48) box  1 10 12
  graphic (#row1,,48)  box  1 10
  graphic (+1,,48)    box  #totalboxpos 10
  print $ABSENCE_HOURS_LBL             (#row1,18) bold

  next-column
  graphic (#row1,1,46) box  1 10 12
  graphic (#row1,,46)  box  1 10
  graphic (+1,,46)    box  #totalboxpos 10
  print $NetPayTitle            (#row1, 15) bold
    
  Add 1 to #title_line_printed
  let $title_printed = 'y'
end-if

let #EndSectionLine = #current-line + #totalboxpos + 2

end-procedure
 

!**********************************************************************
!**********************************************************************
!      Print_Absence_Detail_Lines_ABS_STATIC
!**********************************************************************
!**********************************************************************
begin-procedure Print_Absence_Detail_Lines_ABS_STATIC


if $title_printed = 'n'
      let #row1 = #start-section-line-number 
      let #net_detail_line_start = #row1 - 1
else
      let #net_detail_line_start = #row1
end-if


let #i = 0

columns 4 32

while (#i < (#gbl_curr_Section_Dtl_Lines) )
    
    get $Pin_nm #Absence from ABS_STATIC_DetailArray(#i) name balance
    #debugx show 'in Print_Absence_Detail_Lines '
    
    if ($Pin_nm = ' ' )
        #debugx show ' in Print_Hours_Earnings_Detail_Lines break in read detail array #i   #gbl_curr_Section_Dtl_Lines    ' #i   #gbl_curr_Section_Dtl_Lines 
        add 1 to #row1
        add 1 to #i
        print ' '                (+1,1)
        
    else
        print $Pin_nm             (+1,1)
    
        next-column
        if #Absence <> 0
              print #Absence         () edit b999.999999mi ! change to 12,6 if needed
        end-if
            
        add 1 to #row1
    
            next-column
            add 1 to #i
    end-if

    
end-while

columns 84
let #i = 0

!****** Print Net Pay for Check

#debugx show ' Printng NET PAY'
   
let #others_amt = 0
let #total_amt = 0
let $summarize_flag = 'N'

let #total_amt = #check_total_amt + #netpay_total_amt + #cash_total_amt + #wire_total_amt + #postal_total_amt

!if #total_amt < 0
!   let #total_amt = 0
!end-if

let $total_amt = #total_amt

IF #gbl_curr_Section_Dtl_Lines = 2 !Print Others line and Total line only
   position (+1)
   Add 1 to #net_detail_line_start !Update the globle varibal
   
   print $OthersTitle     (#net_detail_line_start, 1)
   print $total_amt       (#net_detail_line_start, 31) Edit 999,999,990.99mi
   
ELSE

   IF #gbl_curr_Section_Dtl_Lines > 2 !Ignore Det_Lines = 1, Print Total line only in last step.
   
      !****** Print Net Pay Distribution for Check
      
      let #cnt = 0
      while NP04_Check_Data.check_amt(#cnt) <> 0
            position (+1)
            Add 1 to #net_detail_line_start
   
            IF NP04_Check_Data.pmt_mthd1(#cnt) = 'C' 
               print $CheckTitle     (#net_detail_line_start,1)
            ELSE
               print $PaymentTitle   (#net_detail_line_start,1)
            END-IF
            let $check_nbr = NP04_Check_Data.check_nbr(#cnt)
            print $check_nbr      ( #net_detail_line_start,10) Edit 000000000000000000 ! 18 digits check number
            let $check_amt = NP04_Check_Data.check_amt(#cnt)
            print $check_amt      (#net_detail_line_start ,31) Edit 999,999,990.99mi
            Add 1 to #cnt
         
      end-while
   
      !****** Print Net Pay Distribution for Direct Deposit
   
      let #Dtl_Lines_left = #gbl_curr_Section_Dtl_Lines - #cnt
      let #cnt = 0
      
      while NP04_NetPay_Data.netpay_amt(#cnt) <> 0
       
         If (#Dtl_Lines_left > 2)
            position (+1)
            Add 1 to #net_detail_line_start
            let #Dtl_Lines_left = #Dtl_Lines_left - 1
         
            print $DDPTitle        (#net_detail_line_start,1)
            let $account_nbr = NP04_NetPay_Data.account_nbr(#cnt) 
            
            let #account_length = length($account_nbr)
            if #account_length > 17 
               let $account_nbr = substr($account_nbr, 1, 17)
            end-if
            
            print $account_nbr     (#net_detail_line_start,10) Edit xxxxxxxxxxxxxxxxx ! 17 digits account number
            let $netpay_amt = NP04_NetPay_Data.netpay_amt(#cnt)
            print $netpay_amt      (#net_detail_line_start,31) Edit 999,999,990.99mi
            
            Add 1 to #cnt
             
         Else !#Dtl_Lines_left = 2
                  
            let $summarize_flag = 'Y'
            let #others_amt = #others_amt + NP04_Netpay_Data.netpay_amt(#cnt)
            Add 1 to #cnt
            
         End-If 
         
      end-while
      
            
      !****** Print Net Pay Distribution for Cash Payment
      
      let #cnt = 0
      while NP04_CashPay_Data.cashpay_amt(#cnt) <> 0
             
               If (#Dtl_Lines_left > 2)
                  position (+1)
                  Add 1 to #net_detail_line_start
                  let #Dtl_Lines_left = #Dtl_Lines_left - 1
               
                  print $CashTitle        (#net_detail_line_start,1)
                  let $cashpay_amt = NP04_CashPay_Data.cashpay_amt(#cnt)
                  print $cashpay_amt      (#net_detail_line_start,31) Edit 999,999,990.99mi
                  
                  Add 1 to #cnt
                   
               
                Else !#Dtl_Lines_left = 2
                         
                   let $summarize_flag = 'Y'
                   let #others_amt = #others_amt + NP04_CashPay_Data.cashpay_amt(#cnt)
                   Add 1 to #cnt
                   
               End-If 
         
      end-while
      
      !****** Print Net Pay Distribution for Postal Order Payment
      
      let #cnt = 0  
      while NP04_PostalPay_Data.postalpay_amt(#cnt) <> 0
                   
               If (#Dtl_Lines_left > 2)
                  position (+1)
                  Add 1 to #net_detail_line_start
                  let #Dtl_Lines_left = #Dtl_Lines_left - 1
                     
                  print $PostalOrderTitle        (#net_detail_line_start,1)
                  let $postalpay_amt = NP04_PostalPay_Data.postalpay_amt(#cnt)
                  print $postalpay_amt      (#net_detail_line_start,31) Edit 999,999,990.99mi
                        
                  Add 1 to #cnt
                  
               Else !#Dtl_Lines_left = 2
                               
                  let $summarize_flag = 'Y'
                  let #others_amt = #others_amt + NP04_PostalPay_Data.postalpay_amt(#cnt)
       
                  Add 1 to #cnt
                         
               End-If    
      end-while
      
      !****** Print Net Pay Distribution for Wire Transfer Payment
      
      let #cnt = 0      
      while NP04_WirePay_Data.wirepay_amt(#cnt) <> 0
                   
               If (#Dtl_Lines_left > 2)
                  position (+1)
                  Add 1 to #net_detail_line_start
                  let #Dtl_Lines_left = #Dtl_Lines_left - 1
                     
                  print $WireTransferTitle        (#net_detail_line_start,1)
                  let $wirepay_amt = NP04_WirePay_Data.wirepay_amt(#cnt)
                  print $wirepay_amt      (#net_detail_line_start,31) Edit 999,999,990.99mi
                        
                  Add 1 to #cnt
                  
               Else !#Dtl_Lines_left = 2
                         
                  let $summarize_flag = 'Y'
                  let #others_amt = #others_amt + NP04_WirePay_Data.wirepay_amt(#cnt)
  
                  Add 1 to #cnt   
          
               End-If    
      end-while
      
   END-IF
   
END-IF

end-procedure

!**********************************************************************
!**********************************************************************
!      Print_Summary_Line_ABS_STATIC
!**********************************************************************
!**********************************************************************
begin-procedure Print_Summary_Line_ABS_STATIC

#debugx show 'Print_Summary_Line_ABS_STATIC ----->' 
  
let #abs_summary_line = #net_detail_line_start
columns 4 32

do Read_ABS_STATIC_SummaryArray

if ($Pin_nm = ' ' )
    #debugx show 'No Summary Line'
else
    
    print $Pin_nm             (#row1,1)
    
        next-column
        if #Absence <> 0
              print #Absence         () edit b999.999999mi ! change to 12,6 if needed
        end-if
            
        add 1 to #row1
    
            next-column
            add 1 to #i
    

add 1 to #row1
    next-column
end-if

let #row1 = #abs_summary_line

If $summarize_flag = 'Y'
      Add 1 to #row1   
      position (+1)
      let #Dtl_Lines_left = #Dtl_Lines_left - 1
            
      print $OthersTitle     (#row1,81)
      let $others_amt = #others_amt
      print $others_amt      (#row1,111) Edit 999,999,990.99mi
End-If


while #Dtl_Lines_left > 0
     position (+1)
     Add 1 to #row1
     let #Dtl_Lines_left = #Dtl_Lines_left - 1
end-while


graphic (#row1,80,46)  box  1 10
print $TotalTitle     (#row1, 81)
print $total_amt      (#row1, 111) Edit 999,999,990.99mi

if #current-line < #EndSectionLine
   let #current-line = #EndSectionLine
end-if

#debugx show ' #current-line = #totalboxpos #EndSectionLine ' #current-line  #totalboxpos  #EndSectionLine
end-procedure
