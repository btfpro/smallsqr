!***************************************************
!  PAY131CN:  Canada Savings Bond Purchase Report  *
!***************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!----------------------------------------------------------------------
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
!                                                                      *
!                                                                      *
!***********************************************************************
!
!          $Date:  2006/07/20:04:46:46                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'canrpt.sqc' !Get Canadian-specific variables

begin-report
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  move 'PAY131CN' to $ReportID

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  move $Pay131cn_ReportTitle to $ReportTitle

  display $ReportTitle
  do Initialization
  do Report
  do Stdapi-Term
end-report

#Include 'setup32.sqc'  !Printer and page-size initialization

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY131CN  program id
   do Init_Report_Translation($ReportID,$language_cd)

   do Get_Field_Information ('PAY131CN', 'REPORT_TITLE',  $Pay131cn_ReportTitle,   #dummy_width)
   do Get_Field_Information ('PAY131CN', 'CSB_SER',       $Pay131cn_CSB_Ser,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'COMP',          $Pay131cn_Comp,          #dummy_width)
   do Get_Field_Information ('PAY131CN', 'PAYGRP',        $Pay131cn_PayGrp,        #dummy_width)
   do Get_Field_Information ('PAY131CN', 'DED_STDT',      $Pay131cn_Ded_StDt,      #dummy_width)
   do Get_Field_Information ('PAY131CN', 'EMP_ID1',       $Pay131cn_Emp_Id1,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'EMP_NM',        $Pay131cn_Emp_Nm,        #dummy_width)
   do Get_Field_Information ('PAY131CN', 'PR_REG',        $Pay131cn_Pr_Reg,        #dummy_width)
   do Get_Field_Information ('PAY131CN', 'REG_SIN',       $Pay131cn_Reg_SIN,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'PAR_VL1',       $Pay131cn_Par_Vl1,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'CARYG_CHG1',    $Pay131cn_Caryg_Chg1,    #dummy_width)
   do Get_Field_Information ('PAY131CN', 'COST_GLAMT1',   $Pay131cn_Cost_GlAmt1,   #dummy_width)
   do Get_Field_Information ('PAY131CN', 'EMP_DEDN1',     $Pay131cn_Emp_Dedn1,     #dummy_width)
   do Get_Field_Information ('PAY131CN', 'CNCL_DT1',      $Pay131cn_Cncl_Dt1,      #dummy_width)
   do Get_Field_Information ('PAY131CN', 'EMP_ID2',       $Pay131cn_Emp_Id2,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'PAR_VL2',       $Pay131cn_Par_Vl2,       #dummy_width)
   do Get_Field_Information ('PAY131CN', 'CARYG_CHG2',    $Pay131cn_Caryg_Chg2,    #dummy_width)
   do Get_Field_Information ('PAY131CN', 'COST_GLAMT2',   $Pay131cn_Cost_GlAmt2,   #dummy_width)
   do Get_Field_Information ('PAY131CN', 'EMP_DEDN2',     $Pay131cn_Emp_Dedn2,     #dummy_width)
   do Get_Field_Information ('PAY131CN', 'CNCL_DT2',      $Pay131cn_Cncl_Dt2,      #dummy_width)
   do Get_Field_Information ('PAY131CN', 'BONDS',         $Pay131cn_Bonds,         #dummy_width)
   do Get_Field_Information ('PAY131CN', 'TOT',           $Pay131cn_Tot,           #dummy_width)
   do Get_Field_Information ('PAY131CN', 'PRTCPT_EMP',    $Pay131cn_Prtcpt_Emp,    #dummy_width)
   do Get_Field_Information ('PAY131CN', 'TOT_VAL_BONDS', $Pay131cn_Tot_Val_Bonds, #dummy_width)
end-procedure

begin-heading 9

  #Include 'stdhdgtr.sqc'
  print $Pay131cn_CSB_Ser          (+1,1)
  print $CSB-Series                (0,20)
  print $Pay131cn_Comp             (0,35)
  print $Company                   (0,50)
  print $Pay131cn_PayGrp           (0,60)
  print $PayGroup                  (0,75)
  print $Pay131cn_Ded_StDt         (+1,1)
  do Format-DateTime($Dedn-Start-Dt, $out, {DEFDATE}, '', '')
  print $out                       (0,+1,10)
  print $Pay131cn_Emp_Id1          (+2,1)
  print $Pay131cn_Emp_Nm           (0,13)
  print $Pay131cn_Pr_Reg           (0,39)
  print $Pay131cn_Reg_SIN          (0,64)
  print ' '                        (0,76)
  do Print-Denom-Headings-1
  print $Pay131cn_Par_Vl1          (0,119)
  print $Pay131cn_Caryg_Chg1       (0,130)
  print $Pay131cn_Cost_GlAmt1      (0,141)
  print $Pay131cn_Emp_Dedn1        (0,154)
  print $Pay131cn_Cncl_Dt1         (0,167)
  print $Pay131cn_Emp_Id2          (+1,1)
  print ' '                        (0,76)
  do Print-Denom-Headings-2
  print $Pay131cn_Par_Vl2          (0,119)
  print $Pay131cn_Caryg_Chg2       (0,130)
  print $Pay131cn_Cost_GlAmt2      (0,141)
  print $Pay131cn_Emp_Dedn2        (0,154)
  print $Pay131cn_Cncl_Dt2         (0,167)

end-heading


begin-procedure Initialization
  do Get-Current-DateTime
  create-array name=Denom size=6 field=total:number:2 field=label:char
  move 'N' to $Series-Found
  while $Series-Found <> 'Y'
    if $Prcs_Process_Instance = ''
      do Prompt-for-Series
    else
      do Select-Parameters
      move $RC_PAY.CSB_Series_Cd  to $CSB-Series
      move 'Y' to $Series-Found
      do Get-Series-Tbl
    end-if
  end-while

  do Get-Denom-Tbl
  do Init-Variables
end-procedure


begin-procedure Init-Variables

  let #Emp-Value     = 0
  let #Emp-Carry-Chg = 0
  let #Emp-Cost      = 0
  let #Emp-Deduction = 0
  let #Tot-Value     = 0
  let #Tot-Carry-Chg = 0
  let #Tot-Cost      = 0
  let #Tot-Deduction = 0
  let #Partic-Emps   = 0

end-procedure


begin-procedure Prompt-for-Series
  display ' '
  input $CSB-Series maxlen=3 'Enter CSB Series' type=char
  uppercase $CSB-Series
  do Get-Series-Tbl
  if $Series-Found = 'N'
    display '*** This is an invalid Series.  Please re-enter. ***'
  end-if
end-procedure

begin-procedure Get-Series-Tbl
begin-SELECT
A.EFFDT
A.DESCR
A.CSB_SERIES_CD

  move 'Y' to $Series-Found
  let $Seriesdescr = &A.DESCR
  let $Basedate    = &A.EFFDT

FROM  PS_CSB_SERIES_TBL A
WHERE A.CSB_SERIES_CD = $CSB-Series
  AND A.EFFDT         =
           (SELECT MAX(B.EFFDT)
              FROM PS_CSB_SERIES_TBL B
             WHERE B.CSB_SERIES_CD = A.CSB_SERIES_CD
               AND B.EFFDT        <= $AsOfToday)
end-SELECT

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!

    if $curr_language_cd <> $Psoptions_Language_Cd
       do Get-Rel-Lang-Series
    end-if

end-procedure


begin-procedure Get-Rel-Lang-Series

begin-SELECT
SL.EFFDT
SL.DESCR
SL.CSB_SERIES_CD

  let $Seriesdescr = &SL.DESCR

FROM  PS_CSB_SERIES_LANG SL
WHERE SL.CSB_SERIES_CD = $CSB-Series
  AND SL.LANGUAGE_CD   = $Curr_language_cd
  AND SL.EFFDT         =
           (SELECT MAX(EFFDT)
              FROM PS_CSB_SERIES_LANG
              WHERE CSB_SERIES_CD = SL.CSB_SERIES_CD
               AND  LANGUAGE_CD   = SL.LANGUAGE_CD
               AND  EFFDT        <= $Basedate)
end-SELECT

end-procedure


begin-procedure Get-Denom-Tbl
  move 0 to #idx
begin-SELECT
C.CSB_DENOM

  if #idx < 6
    move &C.CSB_Denom to $CSB-Denom
    put $CSB-Denom into Denom(#idx) label
    add 1 to #idx
  else
    display '*** Array overflow; limited to six denominations. ***'
  end-if

FROM  PS_CSB_DENOM_TBL C
WHERE C.CSB_SERIES_CD = $CSB-Series
  AND C.EFFDT         = &A.EffDt
ORDER BY C.CSB_DENOM ASC
end-SELECT
end-procedure

begin-procedure Print-Denom-Headings-1
  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $label <> ' ' and $label <> ''
      let $label = '$' || $label
      print $label    (0,0,6)
    end-if
    add 1 to #idx
  end-while
end-procedure

begin-procedure Print-Denom-Headings-2
  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $label <> ' ' and $label <> ''
      print $Pay131cn_Bonds  (0,0,6)
    end-if
    add 1 to #idx
  end-while
end-procedure


begin-procedure Report
begin-SELECT
J.COMPANY  () on-break print=never save=$company  level=1 Procedure=Process-After
J.PAYGROUP () on-break print=never save=$paygroup level=2 Procedure=Process-After
J.DEDN_START_DT  () on-break print=never save=$Dedn-Start-Dt

  do Process-CSB-Registrant

FROM   PS_CSB_FREQ_TBL J
WHERE  J.CSB_SERIES_CD = $CSB-Series
  AND  J.EFFDT         = &A.Effdt
ORDER BY J.COMPANY ASC, J.PAYGROUP ASC

end-SELECT

if #Partic-Emps > 0
  do Final-Totals
end-if

end-procedure


begin-procedure Process-CSB-Registrant
  move ' ' to $Prev-Emp
begin-SELECT
D.EMPLID
D.EMPL_RCD
D.EFFDT
D.DEPENDENT_BENEF
D.SEQNUM
E.NAME
E1.NATIONAL_ID
  if &D.Dependent_Benef <> '00'
     do Get-Dependent-Benef
     let $Registrant = &F.Name
     let $RegSin = &G.National_id
  else
     let $Registrant = &E.name
     let $RegSin = &E1.National_id
  end-if


  do Get-Cancel-Date
  if &D.EmplID <> $Prev-Emp
    add 1 to #Partic-Emps
    print &D.EmplID            (+1,1)
    print &E.Name              (0,13,24)
    print $Registrant          (0,39,24)
    print $RegSin              (0,63)       edit xxxbxxxbxxx
    do Format-DateTime(&M.Cancel_Date, $out, {DEFDATE}, '', '')
    print $out                 (0,166,10)
    move &D.EmplID to $Prev-Emp
  else
    print $Registrant          (+1,39,24)
    print $RegSin              (0,63)       edit xxxbxxxbxxx
    do Format-DateTime(&M.Cancel_Date, $out, {DEFDATE}, '', '')
    print $out                 (0,166,10)
  end-if


  do Get-Bonds
  do Print-Bonds
  do Print-Amts

FROM  PS_CSB_REGISTRANT  D,
      PS_NAMES   E, PS_PERS_NID E1,
      PS_JOB             L
WHERE D.CSB_SERIES_CD     = $CSB-Series
  AND E.EMPLID            = D.EMPLID
  AND L.EMPLID            = D.EMPLID
  AND E.EMPLID            = E1.EMPLID
  AND E.NAME_TYPE = 'PRI'
  AND E.EFFDT =
      (SELECT MAX(EX.EFFDT)
       FROM   PS_NAMES EX
       WHERE  EX.EMPLID    = E.EMPLID
         AND  EX.NAME_TYPE = E.NAME_TYPE
         AND  EX.EFFDT    <= $AsOfToday)
  AND E1.COUNTRY          = {NID_COUNTRY}
  AND E1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND L.EMPL_RCD         = D.EMPL_RCD
  AND L.EFFDT             =
           (SELECT MAX(L1.EFFDT)
              FROM PS_JOB L1
             WHERE L1.EMPLID      = L.EMPLID
               AND L1.EMPL_RCD   = L.EMPL_RCD
               AND L1.EFFDT      <= &J.DEDN_START_DT)
  AND L.EFFSEQ          =
           (SELECT MAX(L2.EFFSEQ)
              FROM PS_JOB L2
             WHERE L2.EMPLID      = L.EMPLID
               AND L2.EMPL_RCD   = L.EMPL_RCD
               AND L2.EFFDT       = L.EFFDT)
  AND L.COMPANY  = &J.COMPANY
  AND L.PAYGROUP = &J.PAYGROUP
ORDER BY E.NAME ASC, D.EMPLID ASC
end-SELECT
end-procedure


begin-procedure Get-Dependent-Benef
begin-SELECT
F.NAME
G.NATIONAL_ID
FROM  PS_DEPENDENT_BENEF F, PS_DEP_BENEF_NID G
WHERE G.EMPLID = F.EMPLID
  AND G.DEPENDENT_BENEF = F.DEPENDENT_BENEF
  AND G.COUNTRY           = {NID_COUNTRY}
  AND G.NATIONAL_ID_TYPE  = $PAYROLL_NID_TYPE
  AND F.EMPLID          = &D.EmplID
  AND F.DEPENDENT_BENEF = &D.Dependent_Benef
end-SELECT
end-procedure



begin-procedure Get-Bonds
begin-SELECT
H.CSB_DENOM
H.CSB_QTY
H.DED_ADDL_AMT
H.GOAL_AMT

  move &H.CSB_Denom    to $Denom
  move &H.CSB_Denom    to #Denom
  move &H.CSB_Qty      to #Qty
  move &H.Ded_Addl_Amt to #Ded-Amt
  move &H.Goal_Amt     to #Goal-Amt

  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $Denom = $label
      array-add #Qty to Denom(#idx) total(0)
      array-add #Qty to Denom(#idx) total(1)
      break
    end-if
    add 1 to #idx
  end-while

  let #Value         = #Denom * #Qty
  let #Carry-Chg     = #Goal-Amt - #Value

  let #Emp-Value     = #Emp-Value + #Value
  let #Emp-Carry-Chg = #Emp-Carry-Chg + #Carry-Chg
  let #Emp-Cost      = #Emp-Cost + #Goal-Amt
  let #Emp-Deduction = #Emp-Deduction + #Ded-Amt

FROM  PS_CSB_REG_DENOM H
WHERE H.EMPLID          = &D.EmplID
  AND H.EMPL_RCD       = &D.EMPL_RCD
  AND H.EFFDT           = &D.EFFDT
  AND H.CSB_SERIES_CD   = $CSB-Series
  AND H.DEPENDENT_BENEF = &D.Dependent_Benef
  AND H.SEQNUM          = &D.SEQNUM
ORDER BY H.CSB_DENOM ASC
end-SELECT
end-procedure


begin-procedure Get-Cancel-Date
begin-SELECT
M.CANCEL_DATE

FROM PS_CSB_EMPL_SERIES M
WHERE M.EMPLID        = &D.EMPLID
  AND M.EMPL_RCD     = &D.EMPL_RCD
  AND M.CSB_SERIES_CD = $CSB-Series
  AND M.EFFDT         = &D.EFFDT

end-SELECT
end-procedure


begin-procedure Print-Bonds
  print ' '                          (0,75)
  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $label <> ' ' and $label <> ''
      get #qty   from Denom(#idx) total(0)
      do Format-Number(#qty, $out, '999')
      print $out     (0,+1)
      print ' '      (0,+1)
    end-if
    put 0 into Denom(#idx) total(0)
    add 1 to #idx
  end-while
end-procedure

begin-procedure Print-Amts

  do Format-Number(#Emp-Value, $out, '99,999,999')
  print $out      (0,113)
  do Format-Number(#Emp-Carry-Chg, $out, '99,999,999.99')
  print $out      (0,124)
  do Format-Number(#Emp-Cost, $out, '99,999,999.99')
  print $out      (0,138)
  do Format-Number(#Emp-Deduction, $out, '999,999.99')
  print $out      (0,153)

  let #Tot-Value     = #Tot-Value     + #Emp-Value
  let #Tot-Carry-Chg = #Tot-Carry-Chg + #Emp-Carry-Chg
  let #Tot-Cost      = #Tot-Cost      + #Emp-Cost
  let #Tot-Deduction = #Tot-Deduction + #Emp-Deduction
  let #Emp-Value     = 0
  let #Emp-Carry-Chg = 0
  let #Emp-Cost      = 0
  let #Emp-Deduction = 0

end-procedure

begin-procedure Final-Totals

  print $Pay131cn_Tot                   (+3,1)
  print $Pay131cn_Prtcpt_Emp            (0,34)
  do Format-Number(#Partic-Emps, $out, '999,999')
  print $out                         (0,60)
  print ' '                          (0,73)
  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $label <> ' ' and $label <> ''
      get #qty   from Denom(#idx) total(1)
      do Format-Number(#qty, $out, '99999')
      print $out                     (0,+1)
    end-if
    add 1 to #idx
  end-while
  do Format-Number(#Tot-Value, $out, '99,999,999')
  print $out                         (0,113)
  do Format-Number(#Tot-Carry-Chg, $out, '99,999,999.99')
  print $out                         (0,124)
  do Format-Number(#Tot-Cost, $out, '99,999,999.99')
  print $out                         (0,138)
  do Format-Number(#Tot-Deduction, $out, '999,999.99')
  print $out                         (0,153)

  print $Pay131cn_Tot_Val_Bonds  (+3,1)
  move 0 to #idx
  while #idx <= 5
    get $label from Denom(#idx) label
    if $label <> ' ' and $label <> ''
      move $label to #denom
      let $label = '$' || $label || ' :'
      let $label = lpad($label,8,' ')
      print $label                   (0,50)
      get #qty from Denom(#idx) total(1)
      let #value = #qty * #denom
      do Format-Number(#value, $out, '$$$,$$$,$$9')
      print $out                     (0,60)
      print ' '                      (+1,1)
    end-if
    add 1 to #idx
  end-while
  print '-----------'                (0,60)
  do Format-Number(#Tot-Value, $out, '$$$,$$$,$$9')
  print $out                         (+1,60)

end-procedure


begin-procedure Process-After
  do Final-Totals
  do Reset-Variables
  new-page
end-procedure


begin-procedure Reset-Variables
 do Init-Variables

 move 0 to #idx
 while #idx <= 5
    put 0 0 into Denom(#idx) total(0) total(1)
    add 1 to #idx
 end-while

end-procedure


#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
