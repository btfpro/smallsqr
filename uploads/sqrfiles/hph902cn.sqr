!***********************************************************************
!  HPH902CN.SQR:  Load Data into the PT Academic Teaching Survey and   *
!                 Appointment tables                                   *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
! Description: This sqr will populate the Part-Time Academic Survey    *
! and Appointment tables (HP_PT_SURVEY, HP_PT_APPNTMNT).               *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:19:58                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS Education & Government product      *
! line.                                                                *
!***********************************************************************
! This program is a result of feature doc F-CCONLEY-3                  *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Landscape Setup


!***********************************************************************
! REPORT
! Begins a program or a report.
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report


!***********************************************************************
! HEADING
! Begins a heading section
!***********************************************************************
begin-heading 8

  ! Print top page heading
  #include 'stdhdg03.sqc'         ! for standard heading and AsOfDate
  print $ReportTitle2             (+1) center
  print $Year_Head                (+1) center
  print $Date_Head                (+1) center
  print 'Employee Id'             (+2,1,18)
  print 'Empl_Rcd'               (,20,9)
  print 'Employee Name'           (,30,29)
  print 'Message Text'            (,60,)
  print ''                        (+1,1)

end-heading


!***********************************************************************
! HOUSEKEEPING
! Performs the application initializations.  Formats variables for use.
! Calls the procedures to get input parameters.
!***********************************************************************
begin-procedure HOUSEKEEPING

  move 'HPH902CN' to $ReportID

  do INIT-DATETIME
  do GET-CURRENT-DATETIME

  display 'Report Began: ' noline
  display &SysDateTime
  display ''

  do STDAPI-INIT

  do SELECT-PARAMETERS               ! Get E&G parameters
  do SELECT-REPORT-PARAMETERS        ! Get StatsCan parameters

  move 'Part-Time Academic Teaching Survey Data Load' to $ReportTitle
  move 'Exception Report' to $ReportTitle2
  move 'HPH902CN' to $ReportId

  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display ''
  display $ReportTitle2

  do CREATE-ARRAYS

  let $SrchStr = 'DQRSTUVX'           ! Employee Status Search String

end-procedure HOUSEKEEPING


!***********************************************************************
! CREATE-ARRAYS
! Creates two array tables for storing specific employee and job
! information
!***********************************************************************
begin-procedure CREATE-ARRAYS

  !
  ! Reportable Job Array
  !
  create-array name=RJA size=200
     field=RJA_EmplRcd:number        -
     field=RJA_JobEffdt:char         -
     field=RJA_ApptNum:number        -
     field=RJA_TermRow:number        -
     field=RJA_ApptEnd_Dt:char       -
     field=RJA_FullPart:char         -
     field=RJA_JobCode:char          -
     field=RJA_JC_StdHrs:number      -
     field=RJA_Union:char            -
     field=RJA_EarnsDist:char        -
     field=RJA_Prorate:char          -
     field=RJA_StdHrs:number         -
     field=RJA_StdHrs_Freq:char      -
     field=RJA_CompFreq:char         -
     field=RJA_CompRate:number       -
     field=RJA_ChangeAmt:number      -
     field=RJA_HrlyRt:number         -
     field=RJA_MnthlyRt:number       -
     field=RJA_AnnualRt:number
  !
  ! Contract Job Array
  !
  create-array name=CJA size=50
     field=CJA_EmplRcd:number        -
     field=CJA_Cont_Beg_Dt:char      -
     field=CJA_Cont_End_Dt:char
  !
  ! Total-Appointments-Array
  !
  create-array name=TAA size=200
     field=TAA_EmplRcd:number        -
     field=TAA_ApptNum:number        -
     field=TAA_StartDt:char          -
     field=TAA_EndDt:char            -
     field=TAA_Duration:number       -
     field=TAA_Salary:number         -
     field=TAA_FullPart:char

end-procedure CREATE-ARRAYS


!***********************************************************************
! MAINLINE
! This is the main procedure.
!
! Refreshes the survey table and selects the employees that exists in
! Personal Data, Job Data and Faculty Member tables.
!
! Validates the employee's gender, birth date and jobcode.
!
! If the employee is valid, this routine will call the procedure that
! populates the array tables. Once all of the employee's job data rows
! have been read and stored in the array table, this routine calls the
! procedure to process that array. In other words, it populates and
! processes the array one-employee-at-a-time.
!***********************************************************************
begin-procedure MAINLINE

  !--------------------------------------------
  ! Build WHERE clause and delete Survey record
  !--------------------------------------------

  if not IsBlank($Run_Emplid) 

     let $WhereClause = 'PD.EMPLID = ''' || $Run_Emplid || ''' AND PD.EMPLID = JB.EMPLID'

begin-SQL
DELETE FROM PS_HP_PT_SURVEY
 WHERE EMPLID = $Run_Emplid
   AND HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

begin-SQL
DELETE FROM PS_HP_PT_APPNTMNT
 WHERE EMPLID = $Run_Emplid
   AND HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

  else

     let $WhereClause = 'PD.EMPLID = JB.EMPLID'

begin-SQL
DELETE FROM PS_HP_PT_SURVEY
WHERE HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

begin-SQL
DELETE FROM PS_HP_PT_APPNTMNT
 WHERE HP_STATS_CAN_YR = #CurrRpt_Yr
end-SQL

  end-if

  !--------------------
  ! Intialize variables
  !--------------------

  let $J_Prev_Emplid   = ''
  let #J_Prev_EmplRcd  = -99
  let $J_Prev_JobEffdt = ''
  let #J_Prev_TermRow  = 0
  let $J_Prev_JobCode  = ''
  let $J_Prev_BusUnit  = ''

  let $Msg1 = ''
  let $Msg2 = ''
  let $Msg3 = ''

  let #J_Array  = 0
  let #J_Select = 1

  let #C_Array    = 0
  let #C_Loaded   = 0
  let #Cont_Found = 0

  !------------------------
  ! Select records from Job
  !------------------------

  let $CurrRpt_Yr = edit(#CurrRpt_Yr,'9999')
  let $err-statement1 = 'HPH902CN, Select Error - MAINLINE'
  let $err-statement2 = 'Bind Variables: $RUN_EMPLID: '||$Run_Emplid||
                        ', $PT_RPT_START_DT: '||$PT_Rpt_Start_Dt||
                        ', $PT_RPT_END_DT: '||$PT_Rpt_End_Dt

begin-SELECT on-error=Error-Display
JB.EMPLID                   &JB_EMPLID
JB.EMPL_RCD                 &JB_EMPL_RCD
JB.EFFDT                    &JB_EFFDT
JB.JOBCODE                  &JB_JOBCODE
JB.SETID_JOBCODE            &JB_SETID_JC
JB.EMPL_STATUS              &JB_EMPL_STATUS
JB.FULL_PART_TIME           &JB_FULL_PART_TIME
JB.BUSINESS_UNIT            &JB_BUSINESS_UNIT
JB.COMPANY                  &JB_COMPANY
JB.STD_HOURS                &JB_STD_HOURS
JB.STD_HRS_FREQUENCY        &JB_STDHRS_FREQ
JB.EARNS_DIST_TYPE          &JB_EARNS_DIST_TYPE
JB.COMP_FREQUENCY           &JB_COMP_FREQUENCY
JB.COMPRATE                 &JB_COMPRATE
JB.CHANGE_AMT               &JB_CHANGE_AMT
JB.ANNUAL_RT                &JB_ANNUAL_RT
JB.MONTHLY_RT               &JB_MONTHLY_RT
JB.HOURLY_RT                &JB_HOURLY_RT
JB.PRORATE_CNT_AMT          &JB_PRORATE_CNT_AMT
PD.NAME                     &PD_NAME
PD.SEX                      &PD_SEX
PD.BIRTHDATE                &PD_BIRTHDATE

   let $J_Emplid    = &JB_EMPLID
   let #J_EmplRcd   = &JB_EMPL_RCD
   let $J_JobEffdt  = &JB_EFFDT
   let $J_JobCode   = &JB_JOBCODE
   let $J_Setid_JC  = &JB_SETID_JC

   if $J_Emplid <> $J_Prev_Emplid

      do PROCESS-THE-ARRAY

      clear-array name=RJA
      clear-array name=CJA

      let #J_Array = 0
      let #J_Select = 1

      let #C_Array    = 0
      let #C_Loaded   = 0
      let #Cont_Found = 0

      let $J_Prev_JobCode = ''
      let $J_Prev_BusUnit = ''
      let #J_Prev_EmplRcd  = -99
      let #Appt_Beg = 1

      let $Save_Emplid = $J_Emplid
      let $Save_Name = rtrim(&PD_NAME,' ')
      let $Save_EmplRcd = edit(#J_EmplRcd,'999')

      let #J_EmplRcd   = &JB_EMPL_RCD
      let $J_JobEffdt  = &JB_EFFDT
      let $J_JobCode   = &JB_JOBCODE
      let $J_Setid_JC  = &JB_SETID_JC

      if &PD_SEX = 'U'

         let #J_Select = 0

         let $Msg1 = 'Gender is unknown. Employee skipped.'
         do PRINT-ERROR

      else

         let $J_Company = &JB_COMPANY
         let $J_Gender = &PD_SEX

         let $J_BirthDt = &PD_BIRTHDATE
         do CONVERT-TO-DTU-DATE($J_BirthDt,$Birth_Dtu_Dt)
         do DTU-PARSE-DATE($Birth_Dtu_Dt,#J_BirthYr,#J_BirthMo,#J_BirthDay)

         if #J_BirthYr = 0

            let #J_BirthYr = 9999

            do GET-EMPLOYMENT-DATA
            do GET-CONTRACT-INFO

         else

            if #J_BirthYr >= #CurrRpt_Yr - 21

               let #J_Select = 0

               let $Msg1 = 'Birth Date year is less than 21 years before reporting year. Employee skipped.'
               let $Msg2 = 'Birth year: '||edit(#J_BirthYr,'9999')||', Report year: '||$CurrRpt_Yr
               do PRINT-ERROR

            else

               do GET-EMPLOYMENT-DATA
               do GET-CONTRACT-INFO

            end-if

         end-if

      end-if

   else

      if #J_Prev_EmplRcd <> #J_EmplRcd

         let $Save_EmplRcd = edit(#J_EmplRcd,'999')
         let $J_Prev_JobCode  = ''
         let $J_Prev_BusUnit  = ''

         let #Cont_Found = 0
         let #Appt_Beg = 1

         do GET-EMPLOYMENT-DATA
         do GET-CONTRACT-INFO

      end-if

   end-if

   if #J_Select

      let $J_FullPart  = rtrim(&JB_FULL_PART_TIME,' ')
      let $J_EmplStat  = rtrim(&JB_EMPL_STATUS,' ')
      let $J_BusUnit   = rtrim(&JB_BUSINESS_UNIT,' ')
      let $J_EarnsDist = rtrim(&JB_EARNS_DIST_TYPE,' ')
      let $J_Prorate   = rtrim(&JB_PRORATE_CNT_AMT,' ')
      let #J_StdHrs    = &JB_STD_HOURS
      let $J_StdHrs_Freq = rtrim(&JB_STDHRS_FREQ,' ')
      let $J_CompFreq  = rtrim(&JB_COMP_FREQUENCY,' ')
      let $J_JobCode   = &JB_JOBCODE
      let #J_CompRate  = &JB_COMPRATE
      let #J_ChangeAmt = &JB_CHANGE_AMT
      let #J_HrlyRt    = &JB_HOURLY_RT
      let #J_MnthlyRt  = &JB_MONTHLY_RT
      let #J_AnnualRt  = &JB_ANNUAL_RT

      do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')

      if rtrim($J_Prev_BusUnit,' ') <> rtrim($J_BusUnit,' ') or rtrim($J_Prev_JobCode,' ') <> rtrim($J_JobCode,' ')

         do VERIFY-JOBCODE                        ! Is jobcode reportable ?

      end-if

      if #Appt_Beg

         do GET-EMPLOYMENT-TEACHING-RECORD        ! Check Overrides

         let #Appt_Beg = 0

      end-if

      if instr($SrchStr,$J_EmplStat,1) > 0

         let #J_TermRow = 1

         if $CMP_J_JobEffdt >= $CMP_PT_Rpt_Start_Dt

            do POPULATE-ARRAY-TABLE

         end-if

      else

         let #J_TermRow = 0

         if #Emplt_Teach

            if rtrim($Emplt_Collapse,' ') = 'N'

               if rtrim($Emplt_Rpt_Flag,' ') = 'P' or rtrim($Emplt_Rpt_Flag,' ') = 'B'

                  if not #JobCode_Rpt_Flag

                     let $Msg1 = 'Informational Message: Jobcode StatCan Report Flag '||
                                 'is set to full-time or not-applicable'
                     let $Msg2 = 'in Jobcode table but was overwritten in the Employment '||
                                 'Teaching table.'
                     let $Msg3 = 'Job Effective Date: '||$J_JobEffdt||', Job Code: '||$J_JobCode
                     do PRINT-ERROR

                  end-if

                  do POPULATE-ARRAY-TABLE

               else

                  let #J_Select = 0

                  if #JobCode_Rpt_Flag

                     let $Msg1 = 'Jobcode StatCan Report Flag was overwritten to full-time or '||
                                 'not-applicable '
                     let $Msg2 = 'in the Employment Teaching table. Job row skipped.'
                     let $Msg3 = 'Job Effective Date: '||$J_JobEffdt||', Job Code: '||$J_JobCode
                     do PRINT-ERROR

                  else

                     let $Msg1 = 'Jobcode StatCan Report Flag in Jobcode table is set to full-time '||
                                 'or not-applicable in the'
                     let $Msg2 = 'Jobcode table and Employment Teaching table. Job row skipped.'
                     let $Msg3 = 'Job Effective Date: '||$J_JobEffdt||', Job Code: '||$J_JobCode
                     do PRINT-ERROR

                  end-if

               end-if

            else

               let #J_Select = 0

               let $Msg1 = 'Collapsable indicator is set to Y in the Employment Teaching table. Job skipped.'
               let $Msg2 = 'Job Effective Date: '||$J_JobEffdt
               do PRINT-ERROR

            end-if

         else

            if #JobCode_Rpt_Flag

               do POPULATE-ARRAY-TABLE

            else

               let #J_Select = 0

               let $Msg1 = 'Jobcode StatCan Report Flag in Jobcode table is set to full-time or '
               let $Msg2 = 'not-applicable and Employment Teaching record does not exist. Job row skipped.'
               let $Msg3 = 'Job Effective Date: '||$J_JobEffdt||', Job Code: '||$J_JobCode
               do PRINT-ERROR

            end-if

         end-if

      end-if

   end-if

   let $J_Prev_Emplid   = $J_Emplid
   let #J_Prev_EmplRcd  = #J_EmplRcd
   let $J_Prev_JobEffdt = $J_JobEffdt
   let #J_Prev_TermRow  = #J_TermRow
   let $J_Prev_JobCode  = $J_JobCode
   let $J_Prev_BusUnit  = $J_BusUnit

  FROM PS_PERSONAL_DT_FST PD, PS_JOB JB
 WHERE [$WhereClause]
   AND (JB.EFFDT =
       (SELECT MAX(JB1.EFFDT)
          FROM PS_JOB JB1
         WHERE JB1.EMPLID = JB.EMPLID
           AND JB1.EMPL_RCD = JB.EMPL_RCD
           AND JB1.EFFDT <= $PT_Rpt_Start_Dt) OR
       (JB.EFFDT >= $PT_Rpt_Start_Dt AND JB.EFFDT <= $PT_Rpt_End_Dt))
   AND JB.EFFSEQ =
       (SELECT MAX(JB2.EFFSEQ)
          FROM PS_JOB JB2
         WHERE JB2.EMPLID = JB.EMPLID
           AND JB2.EMPL_RCD = JB.EMPL_RCD
           AND JB2.EFFDT = JB.EFFDT)
   AND (NOT EXISTS (SELECT 'X'
                    FROM PS_HP_FT_SURVEY FS
                   WHERE FS.EMPLID = JB.EMPLID
                     AND FS.HP_STATS_CAN_YR = #CurrRpt_Yr)
        OR  EXISTS (SELECT 'X'
                    FROM PS_HP_EMPLT_TEACH ET
                   WHERE ET.EMPLID = JB.EMPLID
                     AND ET.EMPL_RCD = JB.EMPL_RCD
                     AND ET.DATA_KEY1_DT =
                         (SELECT MAX(ET1.DATA_KEY1_DT)
                            FROM PS_HP_EMPLT_TEACH ET1
                           WHERE ET1.EMPLID = ET.EMPLID
                             AND ET1.EMPL_RCD = ET.EMPL_RCD
                             AND ET1.DATA_KEY1_DT <= $PT_Oct_1_Dt)
                     AND ET.HP_COLLAPSE_INDC = 'N'))
ORDER BY JB.EMPLID,JB.EMPL_RCD,JB.EFFDT ASC
end-SELECT

  do PROCESS-THE-ARRAY

end-procedure MAINLINE


!***********************************************************************
! PROCESS-THE-ARRAY
! This routine processes the data in the array
!***********************************************************************
begin-procedure PROCESS-THE-ARRAY


  if #J_Array > 0 and #J_Select

     if #J_Array = 1 and #J_Prev_TermRow

        let $Msg1 = 'Job has a termination status. Employee skipped.'
        let $Msg2 = 'Job Effective Date: '||$J_Prev_JobEffdt||' Job Code: '||$J_Prev_JobCode
        do PRINT-ERROR

     else

        do PROCESS-RJA

        if #S_Array > 0

           do CREATE-SURVEY-RECORD

        end-if

     end-if

  end-if

end-procedure PROCESS-THE-ARRAY


!***********************************************************************
! GET-EMPLOYMENT-DATA
!***********************************************************************
begin-procedure GET-EMPLOYMENT-DATA

  move #J_EmplRcd to $E_EmplRcd
  let $err-statement1 = 'HPH902CN, Select Error - GET-EMPLOYMENT-DATA'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '||$J_Emplid||', #J_EMPLRCD: '||edit(#J_EmplRcd,'0')

begin-SELECT on-error=Error-Display
POAH.APPOINT_END_DT

   let $J_ApptEnd_Dt = &POAH.APPOINT_END_DT

 FROM PS_PER_ORG_ASG_HP POAH
WHERE POAH.EMPLID = $J_Emplid
  AND POAH.EMPL_RCD = #J_EmplRcd
end-SELECT

end-procedure GET-EMPLOYMENT-DATA


!***********************************************************************
! VERIFY-JOBCODE
! Verifies if the employee's jobcode is "reportable" on the survey
!***********************************************************************
begin-procedure VERIFY-JOBCODE

  let #JobCode_Rpt_Flag = 0
  let #J_JC_StdHrs      = 0
  let $J_Union          = '2'
  let $Setid            = $J_Setid_JC

  let $err-statement1 = 'HPH902CN, Select Error - VERIFY-JOBCODE'
  let $err-statement2 = 'Bind Variables: $SETID: '||$SetId||', $J_JOBCODE: '||
                        $J_JobCode||', $ASOFTODAY: '||$AsOfToday

begin-SELECT on-error=Error-Display
JC.UNION_CD
JC.HP_STATS_RPT_FLAG
JC.STD_HOURS

   if rtrim(&JC.HP_STATS_RPT_FLAG,' ') = 'P' or rtrim(&JC.HP_STATS_RPT_FLAG,' ') = 'B'

      let #JobCode_Rpt_Flag = 1

   end-if

   let #J_JC_StdHrs   = &JC.STD_HOURS

   if rtrim(&JC.UNION_CD,' ') > ''

      let $J_Union = '1'

   end-if

 FROM PS_JOBCODE_TBL JC
WHERE JC.SETID = $SetId
  AND JC.JOBCODE = $J_JobCode
  AND JC.EFFDT =
      (SELECT MAX(JC1.EFFDT)
         FROM PS_JOBCODE_TBL JC1
        WHERE JC1.SETID = JC.SETID
          AND JC1.JOBCODE = JC.JOBCODE
          AND JC1.EFFDT <= $AsOfToday)
 AND JC.EFF_STATUS = 'A'
end-SELECT

end-procedure VERIFY-JOBCODE


!***********************************************************************
! GET-EMPLOYMENT-TEACHING-RECORD
! Gets the Employee Teaching record for the emplid, EMPL_RCD.
!***********************************************************************
begin-procedure GET-EMPLOYMENT-TEACHING-RECORD

  let #Emplt_Teach = 0
  let $Emplt_Collapse = 'N'
  let $Emplt_Rpt_Flag = ''

  let $J_Subject = '99999'
  let $J_Duties = ''

  let $Appt_End = ''

  if rtrim($J_CompFreq,' ') = 'C' and #C_Loaded

     let #J_Cont_EmplRcd = -99
     let #C_Last_Array = #C_Array
     let #C_Array = 0

     while (#C_Array <= #C_Last_Array and #J_EmplRcd >= #J_Cont_EmplRcd)

        get #J_Cont_EmplRcd from CJA(#C_Array) CJA_EmplRcd
        get $J_Cont_End_Dt  from CJA(#C_Array) CJA_Cont_End_Dt

        do FORMAT-DATETIME($J_Cont_End_Dt,$CMP_J_Cont_End_Dt,{DEFCMP},'','')

        if $CMP_J_JobEffdt < $CMP_J_Cont_End_Dt and #J_EmplRcd = #J_Cont_EmplRcd

           let $Appt_End = $J_Cont_End_Dt
           let #C_Array = #C_Last_Array

        end-if

        let #C_Array = #C_Array + 1

     end-while

     let #C_Array = #C_Last_Array

  end-if

  if $Appt_End = ''

     let $err-statement1 = 'HPH902CN, Select Error - GET-EMPLOYMENT-TEACHING-RECORD(1)'
     let $err-statement2 = 'Bind Variables: $J_EMPLID: '||$J_Emplid||
                         ', #J_EMPLRCD: '||edit(#J_EmplRcd,'0')||
                         ', $J_JOBEFFDT: '||$J_JobEffDt

begin-SELECT on-error=Error-Display
APPT.EFFDT

   let $Appt_End = &APPT.EFFDT

 FROM PS_JOB APPT
WHERE APPT.EMPLID = $J_Emplid
  AND APPT.EMPL_RCD = #J_EmplRcd
  AND APPT.EMPL_STATUS in ('D','Q','R','S','T','U','V','X')
  AND APPT.EFFDT =
      (SELECT MIN(APPT1.EFFDT)
         FROM PS_JOB APPT1
        WHERE APPT1.EMPLID = APPT.EMPLID
          AND APPT1.EMPL_RCD = APPT.EMPL_RCD
          AND APPT1.EFFDT > $J_JobEffDt)
  AND APPT.EFFSEQ =
      (SELECT MAX(APPT2.EFFSEQ)
         FROM PS_JOB APPT2
        WHERE APPT2.EMPLID = APPT.EMPLID
          AND APPT2.EMPL_RCD = APPT.EMPL_RCD
          AND APPT2.EFFDT = APPT.EFFDT)
end-SELECT

  end-if

  if $Appt_End = ''

     if $J_ApptEnd_Dt = ''

        let $Appt_End = $PT_Rpt_End_Dt

     else

        let $Appt_End = $J_ApptEnd_Dt

     end-if

  end-if

  move #J_EmplRcd to $E_EmplRcd
  let $err-statement1 = 'HPH902CN, Select Error - GET-EMPLOYMENT-TEACHING-RECORD(2)'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '||$J_Emplid||
                        ', #J_EMPLRCD: '||edit(#J_EmplRcd,'0')||
                        ', $APPT_END: '||$Appt_End

begin-SELECT on-error=Error-Display
ET.HP_STATS_RPT_FLAG
ET.HP_STATS_SUBJ_CD
ET.HP_STATS_DUTIES
ET.HP_COLLAPSE_INDC
ET.DATA_KEY1_DT

   let #Emplt_Teach = 1
   let $Emplt_Rpt_Flag = &ET.HP_STATS_RPT_FLAG
   let $Emplt_Collapse = &ET.HP_COLLAPSE_INDC
   let $J_Subject = &ET.HP_STATS_SUBJ_CD
   let $J_Duties = &ET.HP_STATS_DUTIES

 FROM PS_HP_EMPLT_TEACH ET
WHERE ET.EMPLID = $J_Emplid
  AND ET.EMPL_RCD = #J_EmplRcd
  AND ET.DATA_KEY1_DT =
      (SELECT MAX(ET1.DATA_KEY1_DT)
         FROM PS_HP_EMPLT_TEACH ET1
        WHERE ET1.EMPLID = ET.EMPLID
          AND ET1.EMPL_RCD = ET.EMPL_RCD
          AND ET1.DATA_KEY1_DT <= $Appt_End)
end-SELECT

end-procedure GET-EMPLOYMENT-TEACHING-RECORD


!***********************************************************************
! POPULATE-ARRAY-TABLE
! Populates the array table with employee and job data.
!***********************************************************************
begin-procedure POPULATE-ARRAY-TABLE

  if rtrim($J_CompFreq,' ') = 'C' and not #J_TermRow and not #Cont_Found

     let $Msg1 = 'Contract pay data not found. Job row skipped.'
     let $Msg2 = 'Job Effective Date: '||$J_JobEffdt
     do PRINT-ERROR

     let #J_Select = 0

  end-if

  if #J_Select

     if #J_TermRow

        put #J_EmplRcd  into RJA(#J_Array) RJA_EmplRcd
        put $J_JobEffdt into RJA(#J_Array) RJA_JobEffdt
        put #J_TermRow  into RJA(#J_Array) RJA_TermRow
        put $J_CompFreq into RJA(#J_Array) RJA_CompFreq
        put #J_CompRate into RJA(#J_Array) RJA_CompRate

     else

        put #J_EmplRcd       into RJA(#J_Array) RJA_EmplRcd
        put $J_JobEffdt      into RJA(#J_Array) RJA_JobEffdt
        put #J_TermRow       into RJA(#J_Array) RJA_TermRow
        put $J_ApptEnd_Dt    into RJA(#J_Array) RJA_ApptEnd_Dt
        put $J_FullPart      into RJA(#J_Array) RJA_FullPart
        put $J_JobCode       into RJA(#J_Array) RJA_JobCode
        put #J_JC_StdHrs     into RJA(#J_Array) RJA_JC_StdHrs
        put $J_Union         into RJA(#J_Array) RJA_Union
        put $J_EarnsDist     into RJA(#J_Array) RJA_EarnsDist
        put $J_Prorate       into RJA(#J_Array) RJA_Prorate
        put #J_StdHrs        into RJA(#J_Array) RJA_StdHrs
        put $J_StdHrs_Freq   into RJA(#J_Array) RJA_StdHrs_Freq
        put $J_CompFreq      into RJA(#J_Array) RJA_CompFreq
        put #J_CompRate      into RJA(#J_Array) RJA_CompRate
        put #J_ChangeAmt     into RJA(#J_Array) RJA_ChangeAmt
        put #J_HrlyRt        into RJA(#J_Array) RJA_HrlyRt
        put #J_MnthlyRt      into RJA(#J_Array) RJA_MnthlyRt
        put #J_AnnualRt      into RJA(#J_Array) RJA_AnnualRt

     end-if

     let #J_Array = #J_Array + 1

  end-if

end-procedure POPULATE-ARRAY-TABLE


!***********************************************************************
! GET-CONTRACT-INFO
!***********************************************************************
begin-procedure GET-CONTRACT-INFO


  let $J_Prev_Cont_End_Dt = ''
  do FORMAT-DATETIME($J_Prev_Cont_End_Dt,$CMP_J_Prev_Cont_End_Dt,{DEFCMP},'','')

  let $err-statement1 = 'HPH902CN, Select Error - GET-CONTRACT-INFO'
  let $err-statement2 = 'Bind Variables: $J_EMPLID: '||$J_Emplid||
                        ', #J_EMPLRCD: '||edit(#J_EmplRcd,'0')||
                        ', $J_JOBEFFDT: '||$J_JobEffdt

begin-SELECT on-error=Error-Display
CONT.EFFDT
CONT.CONTRACT_BEGIN_DT
CONT.CONTRACT_END_DT

   let $J_Cont_Beg_Dt = &CONT.CONTRACT_BEGIN_DT
   let $J_Cont_End_Dt = &CONT.CONTRACT_END_DT

   do FORMAT-DATETIME($J_Cont_Beg_Dt,$CMP_J_Cont_Beg_Dt,{DEFCMP},'','')
   do FORMAT-DATETIME($J_Cont_End_Dt,$CMP_J_Cont_End_Dt,{DEFCMP},'','')

   if #C_Loaded and $CMP_J_Cont_Beg_Dt > $CMP_J_Prev_Cont_End_Dt

      let #C_Array = #C_Array + 1

   end-if

   put #J_EmplRcd     into CJA(#C_Array) CJA_EmplRcd
   put $J_Cont_Beg_Dt into CJA(#C_Array) CJA_Cont_Beg_Dt
   put $J_Cont_End_Dt into CJA(#C_Array) CJA_Cont_End_Dt

   let $CMP_J_Prev_Cont_End_Dt = $CMP_J_Cont_End_Dt
   let #C_Loaded = 1
   let #Cont_Found = 1

 FROM PS_CONTRACT CONT
WHERE CONT.EMPLID = $J_Emplid
  AND CONT.EMPL_RCD = #J_EmplRcd
  AND CONT.CONTRACT_END_DT > $PT_Rpt_Start_Dt
  AND CONT.CONTRACT_BEGIN_DT < $PT_Rpt_End_Dt
ORDER BY CONT.EFFDT ASC
end-SELECT

end-procedure GET-CONTRACT-INFO


!***********************************************************************
! PROCESS-RJA
! Reads all the records in the array.  Calculates the duration of the
! job and the salary paid or unpaid.
!***********************************************************************
begin-procedure PROCESS-RJA


  let #J_ApptNum = 0

  let #J_Cont_EmplRcd = -99
  let #J_Prev_EmplRcd = -99
  let #J_Prev_ApptNum = 0
  let #J_Prev_TermRow = 1
  let #J_Prev_FullPart = ''
  let $J_Prev_CompFreq = ''
  let $J_Prev_CompRate = 0
  let $J_Prev_Union = ''
  let $J_Prev_Cont_Beg_Dt = ''
  let $J_Prev_Cont_End_Dt = ''

  let #J_Next_TermRow = 0
  let #J_Next_ApptNum = 0
  let $J_Next_CompFreq = 0
  let $J_Next_Cont_Effdt = ''

  let #Cont_1st_Row = 1
  let #Total_Duration = 0
  let #Total_Cont_Paid = 0
  let #Total_Salary = 0

  let #S_Array = 0
  clear-array name = TAA

  let #Last_Array = #J_Array - 1
  let #J_Array = 0
  let #C_Last_Array = #C_Array
  let #C_Array = 0

  while #J_Array <= #Last_Array

     let #Active = 0

     get #J_EmplRcd      from RJA(#J_Array) RJA_EmplRcd
     get $J_JobEffdt     from RJA(#J_Array) RJA_JobEffdt
     get #J_TermRow      from RJA(#J_Array) RJA_TermRow
     get $J_FullPart     from RJA(#J_Array) RJA_FullPart
     get $J_Union        from RJA(#J_Array) RJA_Union
     get $J_CompFreq     from RJA(#J_Array) RJA_CompFreq
     get #J_CompRate     from RJA(#J_Array) RJA_CompRate

     do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')

     do GET-CONT-DATA-FROM-ARRAY

     while 1

        if (#J_TermRow) or
           (#J_Prev_TermRow and not #J_TermRow) or
           (#J_EmplRcd <> #J_Prev_EmplRcd) or
           (rtrim($J_Prev_CompFreq,' ') = 'C')

           do VALIDATE-APPOINTMENT

           let #Cont_1st_Row = 1
           let #Total_Duration = 0
           let #Total_Cont_Paid = 0
           let #Total_Salary = 0

           if #J_TermRow and not #Active

              Break

           end-if

           let #J_ApptNum = #J_ApptNum + 1
           let $J_ApptStart_Dt = $J_JobEffdt

        end-if

        do GET-APPT-DATA-FROM-ARRAY

        if rtrim($J_CompFreq,' ') = 'C'

           if #Cont_Found

              do PROCESS-CONTRACT
              let #J_Array = #J_Array - 1

           end-if

        else

           do PROCESS-JOB

        end-if

        Break

     end-while

     let #J_Prev_EmplRcd  = #J_EmplRcd
     let #J_Prev_TermRow  = #J_TermRow
     let $J_Prev_FullPart = $J_FullPart

     if $J_Union > '' and rtrim($J_Prev_Union,' ') <> '1'  !Union will be 1 if any appts have a union

       let $J_Prev_Union    = $J_Union

     end-if

     let $J_Prev_CompFreq = $J_CompFreq

     if rtrim($J_CompFreq,' ') = 'C'

        let $J_Prev_Cont_Beg_Dt = $J_Cont_Beg_Dt
        let $J_Prev_Cont_End_Dt = $J_Cont_End_Dt

     end-if

     let #J_Array = #J_Array + 1

  end-while

  do VALIDATE-APPOINTMENT

  let $J_Union    = $J_Prev_Union                  ! Restore the Union value

end-procedure PROCESS-RJA


!***********************************************************************
! GET-CONT-DATA-FROM-ARRAY
!***********************************************************************
begin-procedure GET-CONT-DATA-FROM-ARRAY


  if rtrim($J_CompFreq,' ') = 'C' and #C_Loaded

     let #Cont_Found = 0
     let #Contract_next_job = 0
     let #Job_Found  = 0

     if #J_TermRow

        let #Active = 0

     else

        let #Active = 1

     end-if

     while (#Cont_Found = 0 and #C_Array <= #C_Last_Array and #J_EmplRcd >= #J_Cont_EmplRcd and #Active and #Contract_next_Job = 0)

        get #J_Cont_EmplRcd from CJA(#C_Array) CJA_EmplRcd
        get $J_Cont_Beg_Dt  from CJA(#C_Array) CJA_Cont_Beg_Dt
        get $J_Cont_End_Dt  from CJA(#C_Array) CJA_Cont_End_Dt

        do FORMAT-DATETIME($J_Cont_End_Dt,$CMP_J_Cont_End_Dt,{DEFCMP},'','')
        do FORMAT-DATETIME($J_Cont_Beg_Dt,$CMP_J_Cont_Beg_Dt,{DEFCMP},'','')

        !**** Is the contract effective for a future Job *******
        !**** Need to set up for next job
        if #J_Array < #Last_Array
          let #J_after_Array = #J_Array + 1
          get #J_After_EmplRcd  from RJA(#J_after_Array) RJA_EmplRcd
          get $J_After_JobEffdt from RJA(#J_after_Array) RJA_JobEffdt
          do FORMAT-DATETIME($J_After_JobEffdt,$CMP_J_After_JobEffdt,{DEFCMP},'','')
          if  $CMP_J_Cont_Beg_Dt >= $CMP_J_After_JobEffdt and #J_After_EmplRcd = #J_Cont_EmplRcd

                 let #Contract_next_Job = 1
                 let #J_array = #J_Array + 1
          end-if
        end-if

        !***** Processing this Job
        if #Contract_next_Job = 0

           if $CMP_J_JobEffdt < $CMP_J_Cont_End_Dt and #J_EmplRcd = #J_Cont_EmplRcd

                let #Cont_Found = 1

           end-if


           let #C_Array = #C_Array + 1
        end-if

     end-while

     if #Cont_Found

        let $T_Cont_End_Dt = $J_Cont_End_Dt

        do GET-DATE-DIFF($J_Cont_End_Dt,$J_Cont_Beg_Dt,#Cont_Months)

        while (#J_Array < #Last_Array and #Job_Found = 0)

           let #J_Next = #J_Array + 1
           get #J_Next_EmplRcd  from RJA(#J_Next) RJA_EmplRcd
           get $J_Next_JobEffdt from RJA(#J_Next) RJA_JobEffdt

           do FORMAT-DATETIME($J_Next_JobEffdt,$CMP_J_Next_JobEffdt,{DEFCMP},'','')

           if $CMP_J_Next_JobEffdt <= $CMP_J_Cont_End_Dt and #J_Next_EmplRcd = #J_EmplRcd

              let #J_Array = #J_Next
              get #J_EmplRcd      from RJA(#J_Array) RJA_EmplRcd
              get $J_JobEffdt     from RJA(#J_Array) RJA_JobEffdt
              get #J_TermRow      from RJA(#J_Array) RJA_TermRow
              get $J_FullPart     from RJA(#J_Array) RJA_FullPart
              get $J_Union        from RJA(#J_Array) RJA_Union
              get $J_CompFreq     from RJA(#J_Array) RJA_CompFreq
              get #J_CompRate     from RJA(#J_Array) RJA_CompRate

              if #J_TermRow and rtrim($J_CompFreq,' ') = 'C'

                 do CONVERT-TO-DTU-DATE($J_JobEffdt,$Temp1_Dt)
                 do DTU-SUBTRACT-DAYS($Temp1_Dt,1,$Temp_Dt2)
                 do CONVERT-FROM-DTU-DATE($Temp_Dt2,$T_Cont_End_Dt)
                 do GET-DATE-DIFF($T_Cont_End_Dt,$J_Cont_Beg_Dt,#Actual_Months)

                 let #J_CompRate = #Actual_Months / #Cont_Months * #J_CompRate
                 let #Job_Found = 1

              end-if

           else

              let #Job_Found = 1

           end-if

        end-while

        let #Job_Found = 1
        do FORMAT-DATETIME($J_JobEffdt,$CMP_J_JobEffdt,{DEFCMP},'','')

     else

        if #J_EmplRcd <> #J_Cont_EmplRcd and #Active

           let #C_Array = #C_Array - 1

        end-if

     end-if

  end-if

end-procedure GET-CONT-DATA-FROM-ARRAY


!***********************************************************************
! VALIDATE-APPOINTMENT
! Validates the duration of the appointment and if the employee is 21+
! years of age
!***********************************************************************
begin-procedure VALIDATE-APPOINTMENT

  if #Total_Duration > 0

     while 1

        if rtrim($J_Prev_CompFreq,' ') = 'C'

           let $J_ApptStart_Dt = $J_Prev_Cont_Beg_Dt
           let $J_ApptEnd_Dt   = $J_Prev_Cont_End_Dt

        end-if

        do CONVERT-TO-DTU-DATE($J_ApptStart_Dt,$Temp_Dt)
        do DTU-PARSE-DATE($Temp_Dt,#J_StartYr,#J_StartMo,#J_StartDay)

        if #J_StartYr <= #J_BirthYr + 21

           let $Save_EmplRcd = edit(#J_Prev_EmplRcd,'999')

           if rtrim($J_Prev_CompFreq,' ') = 'C'

              let $Msg1 = 'Contract appointment start date is less than 21 years after birth date. Job skipped.'
              let $Msg1 = 'Contract start date '||$J_ApptStart_Dt||', Birth Date = '||$J_BirthDt

           else

              let $Msg1 = 'Job start date is less than 21 years after birth date. Job skipped.'
              let $Msg2 = 'Job Start Date '||$J_ApptStart_Dt||', Birth Date '||$J_BirthDt

           end-if

           do PRINT-ERROR

           Break

        end-if

        do CONVERT-TO-DTU-DATE($J_ApptEnd_Dt,$Temp_Dt)
        do DTU-PARSE-DATE($Temp_Dt,#J_EndYr,#J_EndMo,#J_EndDay)

        if #J_EndYr <= #J_BirthYr + 21

           let $Save_EmplRcd = edit(#J_Prev_EmplRcd,'999')

           if rtrim($J_Prev_CompFreq,' ') = 'C'

              let $Msg1 = 'Contract appointment end date is less than 21 years after birth date. Job skipped.'
              let $Msg2 = 'Contract End Date: '||$J_ApptEnd_Dt||', Birth Date: '||$J_BirthDt

           else

              let $Msg1 = 'Job end date is less than 21 years after birth date. Job skipped.'
              let $Msg2 = 'Job End Date: '||$J_ApptEnd_Dt||', Birth Date: '||$J_BirthDt

           end-if

           do PRINT-ERROR

           Break

        end-if


        if #Total_Duration >= 12 and rtrim($J_Prev_FullPart,' ') = 'F'

           let $Save_EmplRcd = edit(#J_Prev_EmplRcd,'999')

           if rtrim($J_Prev_CompFreq,' ') = 'C'

              let $Msg1 = 'This is a full-time contract appointment with a duration of 12 months or more.'
              let $Msg2 = 'Job skipped.'
              let $Msg3 = 'Contract Start Date '||$J_Cont_Beg_Dt||', Contract End Date '||$J_ApptEnd_Dt

              do PRINT-ERROR

           end-if

           Break

        end-if

        do INSERT-INTO-TOTAL-APPOINTMENTS-ARRAY

        Break

     end-while

  end-if

end-procedure VALIDATE-APPOINTMENT


!***********************************************************************
! INSERT-INTO-TOTAL-APPOINTMENTS-ARRAY
! The duration and salary of each employee's appointment are stored
! in an array table.  This routine inserts the records and sorts
! them in order of longest to shortest duration.
!***********************************************************************
begin-procedure INSERT-INTO-TOTAL-APPOINTMENTS-ARRAY

  let #x = 0

  while #x <= #S_Array

     get #TAA_Duration from TAA(#x) TAA_Duration

     if #Total_Duration > #TAA_Duration

        let #y = #x + 1
        let #z = #S_Array

        while #z >= #y

            let #prior_z = #z - 1
            get #TAA_EmplRcd  from TAA(#prior_z) TAA_EmplRcd
            get #TAA_ApptNum  from TAA(#prior_z) TAA_Apptnum
            get $TAA_StartDt  from TAA(#prior_z) TAA_StartDt
            get $TAA_EndDt    from TAA(#prior_z) TAA_EndDt
            get #TAA_Duration from TAA(#prior_z) TAA_Duration
            get #TAA_Salary   from TAA(#prior_z) TAA_Salary
            get $TAA_FullPart from TAA(#prior_z) TAA_FullPart

            put #TAA_EmplRcd  into TAA(#z) TAA_EmplRcd
            put #TAA_ApptNum  into TAA(#z) TAA_Apptnum
            put $TAA_StartDt  into TAA(#z) TAA_StartDt
            put $TAA_EndDt    into TAA(#z) TAA_EndDt
            put #TAA_Duration into TAA(#z) TAA_Duration
            put #TAA_Salary   into TAA(#z) TAA_Salary
            put $TAA_FullPart into TAA(#z) TAA_FullPart

            let #z = #z - 1

        end-while

        put #J_Prev_EmplRcd  into TAA(#x) TAA_EmplRcd
        put #J_ApptNum       into TAA(#x) TAA_Apptnum
        put $J_ApptStart_Dt  into TAA(#x) TAA_StartDt
        put $J_ApptEnd_Dt    into TAA(#x) TAA_EndDt
        put #Total_Duration  into TAA(#x) TAA_Duration
        put #Total_Salary    into TAA(#x) TAA_Salary
        put $J_Prev_FullPart into TAA(#x) TAA_FullPart

        Break

     end-if

     let #x = #x + 1

  end-while

  let #S_Array = #S_Array + 1

end-procedure INSERT-INTO-TOTAL-APPOINTMENTS-ARRAY


!***********************************************************************
! GET-APPT-DATA-FROM-ARRAY
!***********************************************************************
begin-procedure GET-APPT-DATA-FROM-ARRAY

  get $J_ApptEnd_Dt  from RJA(#J_Array) RJA_ApptEnd_Dt
  get $J_JobCode     from RJA(#J_Array) RJA_JobCode
  get #J_JC_StdHrs   from RJA(#J_Array) RJA_JC_StdHrs
  get $J_Union       from RJA(#J_Array) RJA_Union
  get $J_EarnsDist   from RJA(#J_Array) RJA_EarnsDist
  get $J_Prorate     from RJA(#J_Array) RJA_Prorate
  get #J_StdHrs      from RJA(#J_Array) RJA_StdHrs
  get $J_StdHrs_Freq from RJA(#J_Array) RJA_StdHrs_Freq
  get #J_ChangeAmt   from RJA(#J_Array) RJA_ChangeAmt
  get #J_HrlyRt      from RJA(#J_Array) RJA_HrlyRt
  get #J_MnthlyRt    from RJA(#J_Array) RJA_MnthlyRt
  get #J_AnnualRt    from RJA(#J_Array) RJA_AnnualRt

  if $J_ApptEnd_Dt > ''

     do FORMAT-DATETIME($J_ApptEnd_Dt,$CMP_J_ApptEnd_Dt,{DEFCMP},'','')

  end-if

  if #J_Array < #Last_Array

     let #Next_Array = #J_Array + 1
     get #J_Next_EmplRcd from RJA(#Next_Array) RJA_EmplRcd

  else

     let #J_Next_EmplRcd = #J_EmplRcd

  end-if

  if #J_Array = #Last_Array or #J_Next_EmplRcd <> #J_EmplRcd

     if $J_ApptEnd_Dt > ''

        if $CMP_J_ApptEnd_Dt > $CMP_PT_Rpt_End_Dt

           let $J_ApptEnd_Dt = $PT_Rpt_End_Dt

        end-if

     else

        let $J_ApptEnd_Dt = $PT_Rpt_End_Dt

     end-if

  else

     let #Next_Array = #J_Array + 1
     get $J_ApptEnd_Dt from RJA(#Next_Array) RJA_JobEffdt

     do CONVERT-TO-DTU-DATE($J_ApptEnd_Dt,$Temp1_Dt)
     do DTU-SUBTRACT-DAYS($Temp1_Dt,1,$Temp_Dt2)
     do CONVERT-FROM-DTU-DATE($Temp_Dt2,$J_ApptEnd_Dt)

     get #J_Next_TermRow    from RJA(#Next_Array) RJA_TermRow
     get #J_Next_ApptNum    from RJA(#Next_Array) RJA_ApptNum
     get $J_Next_CompFreq   from RJA(#Next_Array) RJA_CompFreq

  end-if

  do FORMAT-DATETIME($J_ApptEnd_Dt,$CMP_J_ApptEnd_Dt,{DEFCMP},'','')

end-procedure GET-APPT-DATA-FROM-ARRAY


!***********************************************************************
! PROCESS-JOB
! Gets job earnings distribution rows for non-contract employees and
! calculates the salary information
!***********************************************************************
begin-procedure PROCESS-JOB

  let #J_Duration_MM = 0
  let #J_Actual_Salary = 0
  let #J_Stipends = 0

  let $Date1 = $J_ApptEnd_Dt

  if $CMP_J_JobEffdt > $CMP_PT_Rpt_Start_Dt

     let $Date2 = $J_JobEffdt

  else

     let $Date2 = $PT_Rpt_Start_Dt

  end-if

  do GET-DATE-DIFF($Date1, $Date2, #J_Duration_MM)

  if rtrim($J_EarnsDist,' ') <> 'N'

     do GET-EARNS-DISTRBTN

     if not #EarnsDist_Fnd

        do CALCULATE-BASE-SALARY-PAID

     end-if

  else

     do CALCULATE-BASE-SALARY-PAID

  end-if

  put #J_ApptNum into RJA(#J_Array) RJA_ApptNum

  let #Total_Duration = #Total_Duration + #J_Duration_MM
  let #Total_Salary = #Total_Salary + #J_Actual_Salary

end-procedure PROCESS-JOB


!***********************************************************************
! PROCESS-CONTRACT
! Calculates contract payment.
!***********************************************************************
begin-procedure PROCESS-CONTRACT

  do FORMAT-DATETIME($J_Cont_Beg_Dt,$CMP_J_Cont_Beg_Dt,{DEFCMP},'','')
  do FORMAT-DATETIME($T_Cont_End_Dt,$CMP_T_Cont_End_Dt,{DEFCMP},'','')

  if $CMP_PT_Rpt_Start_Dt < $CMP_J_Cont_Beg_Dt

     let $C_Pay_Beg_Dt = $J_Cont_Beg_Dt

  else

     let $C_Pay_Beg_Dt = $PT_Rpt_Start_Dt

  end-if

  if $CMP_PT_Rpt_End_Dt < $CMP_T_Cont_End_Dt

     let $C_Pay_End_Dt = $PT_Rpt_End_Dt

  else

     let $C_Pay_End_Dt = $T_Cont_End_Dt

  end-if

  do GET-DATE-DIFF($T_Cont_End_Dt,$J_Cont_Beg_Dt,#Cont_Months)
  do GET-DATE-DIFF($C_Pay_End_Dt,$C_Pay_Beg_Dt,#Actual_Months)

  !***** Make sure that the Cont Months is not zero ********
  if #Cont_Months > 0
     let #Cont_Paid = #Actual_Months / #Cont_Months * #J_CompRate
  else
     let #Cont_paid = 0
  end-if

  let #Total_Duration  = #Total_Duration + #Actual_Months
  let #Total_Salary    = #Total_Salary + #Cont_Paid
  let #Total_Cont_Paid = #Total_Cont_Paid + #Cont_Paid

  put #J_ApptNum into RJA(#J_Array) RJA_ApptNum

end-procedure PROCESS-CONTRACT


!***********************************************************************
! GET-EARNS-DISTRBTN
!***********************************************************************
begin-procedure GET-EARNS-DISTRBTN

  let #EarnsDist_Fnd = 0

  move #J_Prev_EmplRcd to $E_EmplRcd
  let $err-statement1 = 'HPH902CN, Select Error - GET-EARNS-DISTRBTN'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '||$J_Prev_Emplid||
                        ', #J_EMPLRCD: '||edit(#J_EmplRcd,'0')||
                        ', $J_JOBEFFDT: '||$J_JobEffdt

begin-SELECT on-error=Error-Display
JED.ERNCD
JED.COMPRATE
JED.DIST_PCT
JED.STD_HOURS
JED.ACCT_CD

   let #EarnsDist_Fnd = 1

   do GET-EARNINGS-TABLE-DATA

   evaluate $J_EarnsDist

      when = 'A'

         let #New_CompRate = &JED.COMPRATE * #MultFactor
         Break

      when = 'H'

         let #New_CompRate = (&JED.STD_HOURS / #J_StdHrs) * #J_CompRate
         Break

      when = 'P'

         let #New_CompRate = (&JED.DIST_PCT * #J_CompRate) / 100
         Break

      when-other

         let #New_CompRate = 0

   end-evaluate

   do CALCULATE-NEW-MONTHLY-RATE

   let #J_Paid_Amt = #New_MnthlyRt * #J_Duration_MM

   if rtrim($AddGross,' ') = 'Y'

      if rtrim($Stip_Flag,' ') = 'N'

         let #J_Actual_Salary = #J_Actual_Salary + #J_Paid_Amt

      else

         let #J_Stipends = #J_Stipends + #J_Paid_Amt

      end-if

   end-if

 FROM PS_JOB_EARNS_DIST JED
WHERE JED.EMPLID = $J_Prev_Emplid
  AND JED.EMPL_RCD = #J_EmplRcd
  AND JED.EFFDT = $J_JobEffdt
end-SELECT

end-procedure GET-EARNS-DISTRBTN


!***********************************************************************
! GET-EARNINGS-TABLE-DATA
!***********************************************************************
begin-procedure GET-EARNINGS-TABLE-DATA

  let $AddGross = ''
  let #MultFactor = 0
  let $Stip_Flag = ''

  let $err-statement1 = 'HPH902CN, Select Error - GET-EARNINGS-TABLE-DATA'
  let $err-statement2 = 'Bind Variables: $JED_ERNCD: '||$JED_Erncd||
                        ', $PT_RPT_END_DT: '||$PT_Rpt_End_Dt

begin-SELECT on-error=Error-Display
ETD.ADD_GROSS
ETD.FACTOR_MULT
ETD.HP_ADMINSTIP_FLAG

   let $AddGross   = &ETD.ADD_GROSS
   let #MultFactor = &ETD.FACTOR_MULT
   let $Stip_Flag  = &ETD.HP_ADMINSTIP_FLAG

 FROM PS_EARNINGS_TBL ETD
WHERE ETD.ERNCD = &JED.Erncd
  AND ETD.EFFDT =
      (SELECT MAX(ETD1.EFFDT)
         FROM PS_EARNINGS_TBL ETD1
        WHERE ETD1.ERNCD = ETD.ERNCD
          AND ETD1.EFFDT <= $PT_Rpt_End_Dt)
end-SELECT

end-procedure GET-EARNINGS-TABLE-DATA


!***********************************************************************
! CALCULATE-NEW-MONTHLY-RATE
! Calculates a new monthly rate using the rates derived from the job
! earnings distribution record.
!***********************************************************************
begin-procedure CALCULATE-NEW-MONTHLY-RATE

  evaluate $J_CompFreq
     when = 'H'
        let #New_AnnualRt = #New_CompRate * #J_StdHrs * #Freq_Annl_Factor
        Break
     when = 'D'
        let #New_AnnualRt = #New_CompRate * 365
        Break
     when = 'W'
        let #New_AnnualRt = #New_CompRate * 52
        Break
     when = 'B'
        let #New_AnnualRt = #New_CompRate * 26
        Break
     when = 'S'
        let #New_AnnualRt = #New_CompRate * 24
        Break
     when = 'M'
        let #New_AnnualRt = #New_CompRate * 12
        Break
     when = 'Q'
        let #New_AnnualRt = #New_CompRate * 4
        Break
     when = 'A'
        let #New_AnnualRt = #New_CompRate
        Break
     when-other
        let #New_AnnualRt = 0
  end-evaluate

  let #New_MnthlyRt = #New_AnnualRt / 12

end-procedure CALCULATE-NEW-MONTHLY-RATE


!**********************************************************************
! CALCULATE-BASE-SALARY-PAID
! Calculates actual salary with the rates from job row.
!**********************************************************************
begin-procedure CALCULATE-BASE-SALARY-PAID

  let #J_Actual_Salary = #J_Actual_Salary + (#J_MnthlyRt * #J_Duration_MM)

end-procedure CALCULATE-BASE-SALARY-PAID


!***********************************************************************
! GET-DATE-DIFF
! Calculates the difference between two dates and returns the results in
! number of months.
!***********************************************************************
begin-procedure GET-DATE-DIFF($Date1, $Date2, :#Months)

  do Diff-DateElapsed($Date1,$Date2,#Year,#Months,#Days)

  if #Year > 0

     let #Months = 12
     let #Days = 0

  end-if

  if #Days > 0

     do CONVERT-TO-DTU-DATE($Date2,$InDtu_Dt)
     do Dtu-Month-End($InDtu_Dt,$OutDtu_Dt)
     do DTU-PARSE-DATE($OutDtu_Dt,#Year2,#Months2,#Days2)

     let #Days = #Days + 1

     let #Additional_Months = #Days / #Days2

     let #Months = #Months + #Additional_Months

  end-if

end-procedure GET-DATE-DIFF


!***********************************************************************
! CREATE-SURVEY-RECORD
! Sets up or initialiazes all the survey record data elements.
!***********************************************************************
begin-procedure CREATE-SURVEY-RECORD

  !------------------------------
  ! Get Reporting Insitution Code
  !------------------------------

  let $Company = $J_Company

  do GET-COMPANY-DATA

  let #J_Instn = &CT.HP_STATS_INSTN_CD

  if #J_Instn = 0

     let $Msg1 = 'The Stats Reporting Institution code is zero for company ' || $J_Company
     let $Msg2 = '- set up a valid code on the Company Table.'
     do PRINT-ERROR

  end-if

  do GET-HIGHEST-DEGREE-AND-LEVEL

  if #S_Array > 4

     let #Total_Appts = 4

  else

     let #Total_Appts = #S_Array - 1

  end-if

  let #x = 0

  while #x <= #Total_Appts

     get #TAA_EmplRcd  from TAA(#x) TAA_EmplRcd
     get #TAA_ApptNum  from TAA(#x) TAA_Apptnum
     get $TAA_StartDt  from TAA(#x) TAA_StartDt
     get $TAA_EndDt    from TAA(#x) TAA_EndDt
     get #TAA_Duration from TAA(#x) TAA_Duration
     get #TAA_Salary   from TAA(#x) TAA_Salary
     get $TAA_FullPart from TAA(#x) TAA_FullPart

     do SETUP-APPT-DATA
     do INSERT-APPT-RECORD

     let #x = #x + 1

  end-while

  let #Total_Appts = #S_Array

  do INSERT-PT-SURVEY-RECORD

end-procedure CREATE-SURVEY-RECORD


!***********************************************************************
! SETUP-APPT-DATA
!***********************************************************************
begin-procedure SETUP-APPT-DATA

  let #J_Teach_Load = 0
  let #J_FTTE       = 0
  let $J_Subject    = '99999'
  let $J_ApptType   = '4'
  let $Duties = ' '

  do GET-DATE-DIFF($TAA_EndDt,$TAA_StartDt,#Total_Appt_Mo)

begin-SELECT
ET2.DATA_KEY1_DT
ET2.HP_TEACHING_LOAD
ET2.HP_FTTE
ET2.HP_STATS_DUTIES
ET2.HP_STATS_SUBJ_CD

   let #J_Teach_Load = &ET2.HP_TEACHING_LOAD * #TAA_Duration / #Total_Appt_Mo
   let #J_FTTE       = &ET2.HP_FTTE * #TAA_Duration / #Total_Appt_Mo
   let $J_Subject    = &ET2.HP_STATS_SUBJ_CD
   let $Duties       = &ET2.HP_STATS_DUTIES

 FROM PS_HP_EMPLT_TEACH ET2
WHERE ET2.EMPLID = $J_Prev_Emplid
  AND ET2.EMPL_RCD = #TAA_EmplRcd
  AND ET2.DATA_KEY1_DT =
      (SELECT MAX(ET3.DATA_KEY1_DT)
         FROM PS_HP_EMPLT_TEACH ET3
        WHERE ET3.EMPLID = ET2.EMPLID
          AND ET3.EMPL_RCD = ET2.EMPL_RCD
          AND ET3.DATA_KEY1_DT <= $TAA_EndDt)
end-SELECT

  do GET-TENURE-DATA

  evaluate $Tenure_Status

     when = 'TEN'

        let $J_ApptType = '1'

     when = 'NTK'

        let $J_ApptType = '2'

     when-other

        if $Duties = '10'

           let $J_ApptType = '3'

        else

           let $J_ApptType = '4'

        end-if

  end-evaluate

  let $J_ApptStatus = ''

  do FIND-FT-SURVEY

  if $J_ApptStatus <> '3'

     if rtrim($TAA_FullPart,' ') = 'F'

        let $J_ApptStatus = '1'

     else

        let $J_ApptStatus = '2'

     end-if

  end-if

end-procedure SETUP-APPT-DATA


!***********************************************************************
! GET-TENURE-DATA
!***********************************************************************
begin-procedure GET-TENURE-DATA

  let $Tenure_Status = ''

  let #temp = ROUND(#TAA_EmplRcd,0)
  move #temp to $E_EmplRcd
  let $err-statement1 = 'HPH902CN, Select Error - GET-TENURE-DATA'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '||$J_Prev_Emplid||
                        ', $TAA_ENDDT: '||$TAA_EndDt

begin-SELECT on-error=Error-Display
ETD.TENURE_STATUS

   let $Tenure_Status = rtrim(&ETD.TENURE_STATUS,' ')

 FROM PS_EG_TENURE_DATA ETD
WHERE ETD.EMPLID = $J_Prev_Emplid
  AND ETD.EG_TRACK_HIRE_DT =
      (SELECT MAX(ETD1.EG_TRACK_HIRE_DT)
         FROM PS_EG_TENURE_DATA ETD1
        WHERE ETD1.EMPLID = ETD.EMPLID
          AND ETD1.EG_TRACK_HIRE_DT <= $TAA_EndDt)
end-SELECT

end-procedure GET-TENURE-DATA


!***********************************************************************
! FIND-FT-SURVEY
!***********************************************************************
begin-procedure FIND-FT-SURVEY

begin-SELECT
'X'

   let $J_ApptStatus = '3'

 FROM PS_HP_FT_SURVEY FTS3
WHERE FTS3.EMPLID = $J_Prev_Emplid
  AND FTS3.HP_STATS_CAN_YR = #CurrRpt_Yr
end-SELECT

end-procedure FIND-FT-SURVEY


!***********************************************************************
! GET-HIGHEST-DEGREE-AND-LEVEL
!***********************************************************************
begin-procedure GET-HIGHEST-DEGREE-AND-LEVEL

  let #J_HighDeg_Yr = 9998
  let $J_HighDeg_Lvl = '999'

  let $err-statement1 = 'HPH902CN, Select Error - GET-FIRST-HIGHEST-DEGREE'
  let $err-statement2 = 'Bind Variable: $J_PREV_EMPLID: '||$J_Prev_Emplid

begin-SELECT on-error=Error-Display
A.ACCOMPLISHMENT
A.DT_ISSUED
ACCTBL.HP_STATS_DEG_LVL

   let $Dt_Issued = &A.DT_ISSUED
   do FORMAT-DATETIME($Dt_Issued,$CMP_Dt_Issued,{DEFCMP},'','')

   if rtrim(&ACCTBL.HP_STATS_DEG_LVL,' ') = ''

      let $Degree_Lvl = '99'

   else

      let $Degree_Lvl = &ACCTBL.HP_STATS_DEG_LVL

   end-if

   if rtrim($Degree_Lvl,' ') < $J_HighDeg_Lvl

      let $J_HighDeg_Lvl = $Degree_Lvl

      if $CMP_Dt_Issued = ''

         let #J_HighDeg_Yr = 9999

      else

         let #J_HighDeg_Yr = to_number(substr($CMP_Dt_Issued,1,4))

      end-if

   end-if

 FROM PS_ACCOMPLISHMENTS A, PS_ACCOMP_TBL ACCTBL
WHERE A.EMPLID = $J_Prev_Emplid
  AND ACCTBL.ACCOMPLISHMENT = A.ACCOMPLISHMENT
  AND ACCTBL.ACCOMP_CATEGORY = 'DEG'
ORDER BY A.DT_ISSUED
end-SELECT

  if $J_HighDeg_Lvl = '999'

     let $J_HighDeg_Lvl = '08'

  end-if


  if rtrim($J_HighDeg_Lvl,' ') = '08'

     let #J_HighDeg_Yr = 9898

  end-if


  if #J_HighDeg_Yr <> 9898 and #J_HighDeg_Yr <> 9999 and #J_BirthYr <> 9999

     if #J_HighDeg_Yr <= #J_BirthYr + 19

        let #J_Select = 0

        let $Save_EmplRcd = edit(#J_Prev_EmplRcd,'999')
        let $Msg1 = 'Highest degree year is less than 19 years after birth year. Job skipped.'
        move #J_BirthYr    to $J_BirthYr
        move #J_HighDeg_Yr to $J_HighDeg_Yr
        let $Msg2 = 'Highest Degree Year: '||$J_HighDeg_Yr||', Birth Year: '||$J_BirthYr
        do PRINT-ERROR

     end-if

  end-if

end-procedure GET-HIGHEST-DEGREE-AND-LEVEL


!***********************************************************************
! INSERT-APPT-RECORD
!***********************************************************************
begin-procedure INSERT-APPT-RECORD

  let $EG_EmplRcd = edit(#TAA_EmplRcd,'999')

  let $err-statement1 = 'HPH902CN, Insert Error - INSERT-APPT-RECORD'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '||$J_Prev_Emplid||
                        ', #CURRRPT_YR: '||edit(#$CurrRpt_Yr,'0000')||
                        ', $EG_EMPLRCD: '||$EG_EMPLRCD||
                        ', $TAA_STARTDT: '||$TAA_StartDt||
                        ', $TAA_ENDDT: '||$TAA_EndDt||
                        ', #TAA_SALARY: '||edit(#TAA_Salary,'099999')||
                        ', $J_APPTSTATUS: '||$J_ApptStatus||
                        ', $J_APPTTYPE: '||$J_ApptType||
                        ', $J_SUBJECT: '||$J_Subject||
                        ', #J_TEACH_LOAD: '||edit(#J_Teach_Load,'099')||
                        ', #J_FTTE: '||edit(#J_FTTE,'099')

begin-SQL on-error=Error-Display
INSERT INTO PS_HP_PT_APPNTMNT
(EMPLID,
HP_STATS_CAN_YR,
EG_EMPL_RCD,
START_DT,
END_DT,
HP_PT_SALARY_PAID,
HP_APPTMNT_STATUS,
HP_PT_APPTMNT_TYPE,
HP_STATS_SUBJ_CD,
HP_TEACHING_LOAD,
HP_FTTE)
VALUES
($J_Prev_Emplid,
#CurrRpt_Yr,
$EG_EmplRcd,
$TAA_StartDt,
$TAA_EndDt,
#TAA_Salary,
$J_ApptStatus,
$J_ApptType,
$J_Subject,
#J_Teach_Load,
#J_FTTE)
end-SQL

end-procedure INSERT-APPT-RECORD


!***********************************************************************
! INSERT-PT-SURVEY-RECORD
!***********************************************************************
begin-procedure INSERT-PT-SURVEY-RECORD

  move #J_BirthYr    to $J_BirthYr
  move #J_HighDeg_Yr to $J_HighDeg_Yr
  move #Total_Appts  to $Total_Appts

  let $err-statement1 = 'HPH902CN, Insert Error - INSERT-PT-SURVEY-RECORD'
  let $err-statement2 = 'Bind Variables: $J_PREV_EMPLID: '||$J_Prev_Emplid||
                        ', #CURRRPT_YR: '||edit(#CurrRpt_Yr,'0000')||
                        ', #J_INSTN: ' ||edit(#J_Instn,'000000')||
                        ', $J_UNION: '||$J_Union||
                        ', #J_BIRTHYR: '||edit($J_BirthYr,'0000')||
                        ', $J_HIGHDEG_LVL: '||$J_HighDeg_Lvl||
                        ', #J_HIGHDEG_YR: '||edit(#J_HighDeg_Yr,'0000')||
                        ', #TOTAL_APPTS: '||edit(#Total_Appts,'0')||
                        ', $ASOFTODAY: '||$AsOfToday

begin-SQL on-error=Error-Display
INSERT INTO PS_HP_PT_SURVEY
(EMPLID,
HP_STATS_CAN_YR,
HP_STATS_INSTN_CD,
SEX,
HP_YEAR_OF_BIRTH,
HP_BARGAIN_AGENT,
HP_STATS_DEG_LVL,
HP_HIGHEST_DEG_YR,
HP_TOTAL_APPNTMNTS,
HP_LAST_LOAD_DT,
HP_LAST_DT_CHNGD,
HP_LAST_DT_RPRTED)
VALUES
($J_Prev_Emplid,
#CurrRpt_Yr,
#J_Instn,
$J_Gender,
#J_BirthYr,
$J_Union,
$J_HighDeg_Lvl,
#J_HighDeg_Yr,
#Total_Appts,
$AsOfToday,
NULL,
NULL)
end-SQL

end-procedure  INSERT-PT-SURVEY-RECORD


!***********************************************************************
! GET-PARAMETER-VALUES
!***********************************************************************
begin-procedure GET-PARAMETER-VALUES

  do FORMAT-DATETIME($PT_Rpt_Start_Dt,$CMP_PT_Rpt_Start_Dt,{DEFCMP},'','')
  do FORMAT-DATETIME($PT_Rpt_End_Dt,$CMP_PT_Rpt_End_Dt,{DEFCMP},'','')

  do CONVERT-TO-DTU-DATE($PT_Rpt_Start_Dt,$PT_Start_Dtu_Dt)
  do CONVERT-TO-DTU-DATE($PT_Rpt_End_Dt,$PT_End_Dtu_Dt)

  do DTU-ADD-DAYS($PT_End_Dtu_Dt,1,$Temp_Dt)
  do CONVERT-FROM-DTU-DATE($Temp_Dt,$PT_Rpt_End_Dt_Plus_1)

  do DTU-PARSE-DATE($PT_Start_Dtu_Dt,#dtu_yr, #dtu_mo, #dtu_da)

  let #dtu_yr2 = #dtu_yr - 1

  do Dtu-Format-Date(#dtu_yr,10,1,$PT_Oct_1_Dtu_Dt)
  do CONVERT-FROM-DTU-DATE($PT_Oct_1_Dtu_Dt,$PT_Oct_1_Dt)
  do FORMAT-DATETIME($PT_Oct_1_Dt,$CMP_PT_Oct_1_Dt, {DEFCMP},'','')

  do Dtu-Subtract-Days($PT_Start_Dtu_Dt,1,$PT_DayPrior_Dtu_Dt)
  do CONVERT-FROM-DTU-DATE($PT_DayPrior_Dtu_Dt,$PT_DayPrior_To_Start)
  do FORMAT-DATETIME($PT_DayPrior_To_Start,$CMP_PT_DayPrior_To_Start,{DEFCMP},'','')

  let #CurrRpt_Yr = #dtu_yr
  let $Year_Head = 'Reporting Year ' || edit(#dtu_yr,'0000')
  let $Date_Head = 'From ' || $PT_Start_Dtu_Dt || ' To ' || $PT_End_Dtu_Dt

  let $Run_Emplid = rtrim(&RUN_CNTL_EG.EMPLID,' ')

end-procedure GET-PARAMETER-VALUES


!***********************************************************************
! GET-VALUES
!***********************************************************************
begin-procedure GET-VALUES

end-procedure GET-VALUES


!***********************************************************************
! PRINT-ERROR
! Prints the detail line on the exception report.
!***********************************************************************
begin-procedure PRINT-ERROR

  print $Save_Emplid          (+1,1,18)
  print $Save_EmplRcd         (,20,9)
  print $Save_Name            (,30,29)
  print $Msg1                 (,60,)

  if $Msg2 > ''

     print $Msg2              (+1,60)

  end-if

  if $Msg3 > ''

     print $Msg3              (+1,60)

  end-if

  print ''                    (+1,60)

  let $Msg1 = ''
  let $Msg2 = ''
  let $Msg3 = ''

end-procedure PRINT-ERROR


!***********************************************************************
! WRAPUP
! Updates the reporting period table and ends the report.
!***********************************************************************
begin-procedure WRAPUP

  do UPDATE-RPTNG-PERIOD-TABLE
  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM
  do GET-CURRENT-DATETIME

  display 'Report ended at: ' NoLine
  display &SysDateTime
  display ''

end-procedure WRAPUP


!***********************************************************************
! DELETE RUN CONTROL                                                   *
! Deletes run control information from run control table.              *
!***********************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'HPH902CN, Delete-Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Bind Variables: $PRCS_OPRID: '||$Prcs_OprID||
                        ', $PRCS_RUN_CNTL_ID: '||$Prcs_Run_Cntl_ID

begin-SQL On-Error=Error-Display

DELETE FROM PS_RUN_CNTL_EG
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL

end-procedure DELETE-RUN-CONTROL


!***********************************************************************
! SQCs
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date math routine
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'stdapi.sqc'    !Update Process API
#Include 'getsetid.sqc'  !Get SetId routine
#Include 'getcodta.sqc'  !Get Company Data routine
#Include 'getdptnm.sqc'  !Get Department
#Include 'egrnctl1.sqc'  !Get E&G run control parameters
#Include 'hprnctl1.sqc'  !Get Statistics Canada run parameters
#Include 'stderror.sqc'  !Routine for error display
