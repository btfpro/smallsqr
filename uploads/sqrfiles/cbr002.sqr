!****************************************
! CBR002: COBRA Secondary Letter
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:57:38                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!
! Function: Generate the COBRA Secondary Letter
! Input:   PS_CBR_PARTIC          -  Participant Level Record
!          PS_CBR_PARTIC_PLAN     -  Plan Type Level Record
!          PS_CBR_PARTIC_OPTN     -  Option Level Record
!          PS_CBR_PARTIC_COST     -  Cost Level Record
!          Enrollment Tables      -  Get Participant & Dependent/Benef
!                                    Current Elections
!          PS_PERSON_NAME         -  Get Participants Name
!          PS_PERSON_ADDR         -  Get Participants Address
!          PS_PERSON_ADDROTH      -  Get Participants Address
!          PS_DEPENDENT_BENEF     -  Get Dependent/Benef Name & Address
!
! Output: 1 Secondary Letter Per Validated Participant where the
!         the letter has not all ready been printed.
!
!***********************************************************************

#Include 'setenv.sqc'
#Include 'cbrdefs.sqc'   !COBRA variables
#Include 'usarpt.sqc'    !Variables specific to USA

Begin-Setup
  #Include 'setupdb.sqc'

  Declare-Printer THIS_REPORT
      Type=HPLASERJET
      Font=5
      Point-Size=12
      Pitch=17
      Symbol-Set=0U     ! ASCII symbol set
  End-Declare

  Declare-Layout THIS_REPORT
      Orientation=Portrait
      Top-Margin= .4
      Left-Margin=.60
      Max-Lines=63
      Max-Columns=130
      Char-Width=7.2
      Line-Height=12    ! 72/printer_point-size
  End-Declare

  Declare-Report THIS_REPORT
      Printer-Type=HPLASERJET
      LayOut=THIS_REPORT
  End-Declare

End-Setup

!******************************
Begin-Procedure Init-Variables
!******************************

  let #Heading_Count = 0          !Count number of regular headings
  let #Page_Maximum  = 57         !Maximum physical rows before bottom line
  let #Page_Max_Last = 40         !Maximum physical rows before last page footer
  let #Start_Row     = 1          !1st row to Print Header
  let #Start_Footer  = 41         !Row to start footer (does not include header)
  let #Bottom_Line = 56           !Line for bottom line of each page

  let #plan_count  = 0
  let #plan_sub    = 0
  let #plan_depth = 1


#ifndef MVS
#ifndef OS400
  encode '<27>E<27>&l0O<27>&l1E' into $reset_cd
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif

End-Procedure

!******************************
Begin-Program
!******************************

  do Init-Report

  display 'Report Began at: ' noLine
  do Display-Time

  do Main-Report

  display 'Report Ended at: ' noline
  do display-time

  let $Form_Cnt = EDIT(#Form_Cnt, '99999')
  let $Form_Cnt = LTRIM($Form_Cnt, ' ')
  display '**** '   NoLine
  display $Form_Cnt NoLine
  display ' COBRA Secondary Letters Printed ****'
  display ''

  do StdAPI-Term

End-Program

!******************************
Begin-Procedure Init-Report
!******************************

  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime
  do Format-Datetime($AsofToday, $out, {DEFMDY}, '', '')
  let $AsofMDY = $out

  display ''
  display 'CBR002: Secondary Letters'

  do Init-Variables
  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  Alter-Printer Font=5 Point-Size={NORM}

End-Procedure

!******************************
Begin-Procedure Ask-Values
!******************************

  do Ask-As-Of-Date
  do Ask-Reprint-Prompt

End-Procedure

!******************************
Begin-Procedure Get-Values
!******************************

  do Select-Parameters
  do Get-As-Of-Date
  do Get-Reprint-Prompt

End-Procedure

!******************************
Begin-Procedure Main-Report
!******************************
  create-array name=plan_partic size={MAX_PLANS} field=pln_type:char
                                                 field=enr_sts:char
                                                 field=ben_pln:char
                                                 field=pln_cvg_end_dt:char
                                                 field=pln_cvg:char

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Letters
      do Delete-Reprint-Id
    end-if
  else
    do Print-Letters
  end-if

End-Procedure

!******************************
Begin-Procedure Reprint-Letters
!******************************

  if $ReprintAll = 'Y'
     do Select-All
  else
     do Select-Emplids
  end-if

End-Procedure

Begin-Procedure Select-All

  let $Where = ' P.CBR_SCND_NOTIFY_DT BETWEEN '
  let $Where = $Where || '''' ||$FromDate || ''''
  let $Where = $Where || ' AND ''' || $ThruDate || ''''
  let $Where = $Where || ' AND P.CBR_PROCESS_STATUS <> ''V'' '
  let $Where = $Where || ' AND P.CBR_SCND_NOTIFY_DT IS NOT NULL '

  do Select-Data

End-Procedure

Begin-Procedure Select-Emplids

Begin-Select
PRN.PRINT_ID
PRNP.EMPLID
PRNP.BENEFIT_RCD_NBR
PRNP.COBRA_EVENT_ID
PRNP.DEPENDENT_BENEF
PRNP.REPRINT_ALL_DEPS

  let $Where = '(P.EMPLID = '''  || &PRNP.EmplId || ''') And '
  let $TempVal = edit(&PRNP.BENEFIT_RCD_NBR, '9')
  let $Where = $Where || '(P.BENEFIT_RCD_NBR = ' || $TempVal     || ') And '
  let $TempVal = LTRIM(edit(&PRNP.Cobra_Event_Id, '999'),' ')
  let $Where = $Where || '(P.COBRA_EVENT_ID = '  || $TempVal     || ') '
  let $Where = $Where || 'AND P.CBR_PROCESS_STATUS <> ''V'' '
  let $Where = $Where || 'AND P.CBR_SCND_NOTIFY_DT IS NOT NULL '
  if &PRNP.REPRINT_ALL_DEPS = 'N'
     let $Where = $Where || 'And (P.DEPENDENT_BENEF = ''' || &PRNP.DEPENDENT_BENEF || ''')  '
  end-if

  do Select-Data

FROM  PS_CBR_PRNT        PRN,
      PS_CBR_PRNT_PARTIC PRNP
WHERE PRN.PRINT_ID = $Reprint_Id
AND   PRN.PRINT_ID = PRNP.PRINT_ID
ORDER BY PRNP.EMPLID ASC,
         PRNP.BENEFIT_RCD_NBR ASC,
         PRNP.COBRA_EVENT_ID ASC
End-Select

End-Procedure

!******************************
Begin-Procedure Print-Letters
!******************************
   let $Where = 'P.CBR_SCND_EVENT_STS = ''CE'' '
   let $Where = $Where || 'AND P.CBR_PROCESS_STATUS = ''O'' '
   do Select-Data

End-Procedure

!******************************
Begin-Procedure Select-Data
!******************************

Begin-Select
P.EMPLID
P.BENEFIT_RCD_NBR
P.COBRA_EVENT_ID
P.DEPENDENT_BENEF
P.BENEFIT_PROGRAM
P.CBR_INIT_EVENT_STS
R.DESCR
E.COBRA_EVENT_DT
P.CBR_SCND_NOTIFY_DT
P.COBRA_EMPLID

  let #page_number = 0
  let #plan_count = 0
  let $Insert = 'N'
  let $Initsts = &P.CBR_INIT_EVENT_STS
  let $emplid = &P.EMPLID
  let #benrcd = &P.BENEFIT_RCD_NBR
  let $ltr_getter = &P.DEPENDENT_BENEF
  let $benefit_program = &P.BENEFIT_PROGRAM
  let $event_dt = &E.COBRA_EVENT_DT
  let $event_descr = &R.DESCR
  let #event_id = &P.COBRA_EVENT_ID
  let $cobra_emplid = &P.COBRA_EMPLID
  if $Reprint = 'Y'
     let $notify_dt = &P.CBR_SCND_NOTIFY_DT
     let $PlanWhere = ' '
  else
     let $notify_dt = $AsofToday
     let $PlanWhere = 'AND PP.CBR_PROCESS_STATUS = ''O'' '
  end-if

  do Get-Plan-Data
  do Print-Dep-Letter

  add 1 to #Form_Cnt

  do Reset-Printer

  if $Reprint = 'N'
     do Update-Partic-Status
  end-if

FROM  PS_CBR_PARTIC P,
      PS_COBRA_EVENT E,
      PS_CBR_EVENT_RULES R
WHERE P.EMPLID = E.EMPLID
AND   [$Where]
AND   P.BENEFIT_RCD_NBR = E.BENEFIT_RCD_NBR
AND   P.COBRA_EVENT_ID = E.COBRA_EVENT_ID
AND   R.COBRA_EVENT_CLASS = E.COBRA_EVENT_CLASS
AND   R.EFFDT = (select MAX(EFFDT)
                 FROM PS_CBR_EVENT_RULES ME
                 WHERE ME.EFFDT <= E.COBRA_EVENT_DT
                   AND ME.COBRA_EVENT_CLASS = E.COBRA_EVENT_CLASS)
ORDER BY
 P.EMPLID ASC
,P.BENEFIT_RCD_NBR ASC
,P.DEPENDENT_BENEF ASC
,P.COBRA_EVENT_ID ASC
End-Select

End-Procedure

!******************************
Begin-Heading {HEADING_LINES}
!******************************

  let $Tmp_Text = ' SECONDARY LETTER'
  if #Page_number > 1
    let $Tmp_Text = $Tmp_Text || ' CONTINUED'
  end-if

  add 1 to #Heading_Count

  Alter-Printer Font=5 Point-Size={NORM}

  let $head1 = UPPER($Tmp_Text)
  print $head1                                 (#Start_Row,1) bold
  if $PrintReprint = 'Y'
     print 'REPRINT'                           (+0,65) bold
  end-if

End-Heading

!************************************
Begin-Procedure Update-Partic-Status
!************************************
  let $Sql-Statement = 'CBR002: UPDATE PS_CBR_PARTIC'

  Begin-SQL on-error=SQL-Error

    UPDATE PS_CBR_PARTIC
    SET CBR_SCND_EVENT_STS = 'NT',
        CBR_SCND_NOTIFY_DT = $AsofToday
    WHERE EMPLID = $emplid
      AND BENEFIT_RCD_NBR = #benrcd
      AND COBRA_EVENT_ID = #event_id
      AND DEPENDENT_BENEF = $ltr_getter;

    UPDATE PS_CBR_PARTIC_PLAN
    SET CBR_PROCESS_STATUS = 'C'
    WHERE EMPLID = $emplid
      AND BENEFIT_RCD_NBR = #benrcd
      AND COBRA_EVENT_ID = #event_id
      AND DEPENDENT_BENEF = $ltr_getter
      AND COBRA_EVENT_TYPE = 'S'
      AND CBR_PROCESS_STATUS = 'O';

    UPDATE PS_CBR_PARTIC
    SET CBR_PROCESS_STATUS = 'C'
    WHERE EMPLID = $emplid
      AND BENEFIT_RCD_NBR = #benrcd
      AND COBRA_EVENT_ID = #event_id
      AND DEPENDENT_BENEF = $ltr_getter
      AND NOT EXISTS (SELECT 'X'
                      FROM PS_CBR_PARTIC_PLAN X
                      WHERE EMPLID = $emplid
                        AND BENEFIT_RCD_NBR = #benrcd
                        AND COBRA_EVENT_ID = #event_id
                        AND DEPENDENT_BENEF = $ltr_getter
                        AND CBR_PROCESS_STATUS = 'O');

    UPDATE PS_COBRA_EVENT
    SET CBR_PROCESS_STATUS = 'C'
    WHERE EMPLID = $emplid
      AND BENEFIT_RCD_NBR = #benrcd
      AND COBRA_EVENT_ID = #event_id
      AND NOT EXISTS (SELECT 'X'
                      FROM PS_CBR_PARTIC
                      WHERE EMPLID = $emplid
                        AND BENEFIT_RCD_NBR = #benrcd
                        AND COBRA_EVENT_ID = #event_id
                        AND CBR_PROCESS_STATUS = 'O');

  End-SQL

End-Procedure

!************************************
Begin-Procedure Get-Plan-Data
!************************************
Begin-Select
PP.PLAN_TYPE
PP.COVERAGE_END_DT
PP.BENEFIT_PLAN
PP.COVRG_CD
PP.CBR_ENROLL_STATUS

   do Store-Plan-Data

FROM  PS_CBR_PARTIC_PLAN PP
WHERE PP.EMPLID = &P.EMPLID
AND   PP.BENEFIT_RCD_NBR = &P.BENEFIT_RCD_NBR
AND   PP.COBRA_EVENT_ID = &P.COBRA_EVENT_ID
AND   PP.DEPENDENT_BENEF = &P.DEPENDENT_BENEF
AND   PP.COBRA_EVENT_TYPE = 'S'
[$PlanWhere]

End-Select

End-Procedure

!************************************
Begin-Procedure Store-Plan-Data
!************************************
  move 'PLAN_TYPE' to $FieldName
  move &PP.PLAN_TYPE to $Plan_Type
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $pln = RTRIM($XlatLongName, ' ')
  do Format-Datetime(&PP.COVERAGE_END_DT, $endt, {DEFMDY}, '', '')

  let $CovrgEffdt = $notify_dt
  let $CovrgCd = &PP.COVRG_CD
  do Get-Covrg-Code-Descr
  let $cvg = $CovrgDescrShort
  let $benpln = &PP.BENEFIT_PLAN
  let $enrsts = &PP.CBR_ENROLL_STATUS

  put $pln $enrsts $benpln $endt $cvg into plan_partic(#plan_count)

  let $ltr_getter = &P.DEPENDENT_BENEF
  let #plan_count = #plan_count + 1

End-Procedure

!*******************************
Begin-Procedure Print-Dep-Letter
!*******************************

  let $get_name_only = 'N'
  if $ltr_getter = '00'
     do Get-Empl-Name-Address
  else
     do Get-Dep-Name-Address
     if rtrim($cobra_emplid, ' ') <> ''
           and $cobra_emplid <> $emplid
         do Get-Cobra-Emplid-Address
     end-if
  end-if

!------------------------------------------------
! Print Name and Address of employee or dependent
!------------------------------------------------
  print 'EmplID:'                         (+1,40)
  print $cobra_emplid                     (+0,52)
  print 'Benefit Rcd#:'                   (+1,40)
  print #benrcd                           (+0,52) edit {INTGR_MASK}
  print 'Event ID:'                       (+1,40)
  print #event_id                         (+0,52) edit {INTGR_MASK}
  print 'Related EmplID:'                 (+1,40)
  print $emplid                           (+0,52)
  print 'Related ID:'                     (+1,40)
  print $ltr_getter                       (+0,52)

  if $Reprint = 'Y'
     do Format-Datetime($notify_dt, $notify_mdy, {DEFMDY}, '' , '')
     print $notify_mdy                    (+1,1)
  else
     print $AsofMDY                       (+2,1)
  end-if

  print $name                             (+2,1)
  let $addr = RTRIM($address1, ' ')
  if $addr <> ''
     print $address1                      (+1,1)
  end-if

  let $addr = RTRIM($address2, ' ')
  if $addr <> ''
     print $address2                      (+1,1)
  end-if

  print $city_state                       (+1,1)

!---------------------------------------
! Print Body of Letter
!---------------------------------------

  let $Tmp_Text = 'Dear '
  let $Tmp_Text = $Tmp_Text || $name || ', '
  print $Tmp_Text                          (+2,1)

  do Format-Datetime($event_dt, $eventdt, {DEFMDY}, '', '')
  let $Tmp_Text = 'On ' || $eventdt
  let $Tmp_Text = $Tmp_Text || ', you experienced a secondary qualifying event, '
  let $Tmp_Text = $Tmp_Text || RTRIM($event_descr,' ') || '.  '
  let $Tmp_Text = $Tmp_Text || 'Your COBRA benefits have been extended to the maximum COBRA '
  let $Tmp_Text = $Tmp_Text || 'continuation coverage period and will now continue until:'

  print $Tmp_Text (+2,1) wrap 110 4


!---------------------------------------
! Print Continuation of Coverage box
!---------------------------------------

  let #Start_line = #Current-Line
  let #depth = #plan_count + 1
  print '     Plan Type'                   (+2,{COL1}) bold
  print '   Benefit Plan'                  (+0,{COL2}) bold
  print '  Coverage Code'                  (+0,{COL3}) bold
  print ' Coverage End Date'               (+0,{COL4}) bold

  graphic (+0,{COL1}, 48) horz-line {SMAL_LNSIZE}

  let #plan_sub = 0
  While #plan_sub < #plan_count
     get $pln $enrsts $benpln $endt $cvg from plan_partic(#plan_sub)
     if $enrsts = 'I'
       let $Insert = 'Y'
       let #tmp_col = {COL1}
       print '*'                           (+1,#tmp_col)
       let #tmp_col = {COL1} + 1
       print $pln                          (+0,#tmp_col)
     else
       let #tmp_col = {COL1} + 1
       print $pln                          (+1,#tmp_col)
     end-if
     let #tmp_col = {COL2} + 1
     print $benpln                         (+0,#tmp_col)
     let #tmp_col = {COL3} + 1
     print $cvg                            (+0,#tmp_col)
     let #tmp_col = {COL4} + 1
     print $endt                           (+0,#tmp_col)
     let #plan_sub = #plan_sub + 1
  End-While

! Print Plan Type box
  graphic (#Start_line, {COL1}, {BOX_LEN}) box :#depth {SMAL_LNSIZE}

! Print Benefit Plan box
  graphic (#Start_line, {COL2}, {BOX_LEN}) box :#depth {SMAL_LNSIZE}

! Print Coverage Code Descr
  graphic (#Start_line, {COL3}, {BOX_LEN}) box :#depth {SMAL_LNSIZE}

! Print Coverage End Date box
  graphic (#Start_line, {COL4}, {BOX_LEN}) box :#depth {SMAL_LNSIZE}

  move 0 to #i
  while #i < #plan_count
    graphic (+1, 10, 48) horz-line {SMAL_LNSIZE}
    add 1 to #i
  end-while

  if $Insert = 'Y'
    let #tmp_col = {COL1}
    let $Tmp_Text = '* Automatic Enrollment as of event date - COBRA enrollment during initial event '
    print $Tmp_Text                        (+1,#tmp_col)
    let #tmp_col = {COL1} + 1
    let $Tmp_Text = 'occurred  as dependent of another COBRA participant'
    print $Tmp_Text                        (+1,#tmp_col)
  end-if
  let $Tmp_Text = 'Your benefits will continue to the date(s) listed above unless '
  let $Tmp_Text = $Tmp_Text || 'any one of the following events occur:'
  print $Tmp_Text                          (+2,1)

  let $Tmp_Text = '- you become a covered individual under any group health plan'
  print $Tmp_Text                          (+2,1)

  print '- you fail to pay the monthly charge for the elected coverage' (+1,1)


  let $Tmp_Text = '- our Employee health plan(s) is no longer in force for all '
  let $Tmp_Text = $Tmp_Text || 'active employees'
  print $Tmp_Text                          (+1,1)

  let $Tmp_Text = 'Should you have any questions, you may contact me at the address'
  let $Tmp_Text = $Tmp_Text || ' below.'
  print $Tmp_Text                          (+2,1)

  print 'Sincerely,'                       (+2,1)

  do Get-COBRA-Administrator

  print $admin_name                        (+2,1)
  print $admin_title                       (+1,1)
  print ' '                                (+1,1)

  let $addr = RTRIM($admin_address1, ' ')
  if $addr <> ''
     print $admin_address1                 (+1,1)
  end-if

  let $addr = RTRIM($admin_address2, ' ')
  if $addr <> ''
     print $admin_address2                 (+1,1)
  end-if

  let $addr = RTRIM($admin_address3, ' ')
  if $addr <> ''
     print $admin_address3                 (+1,1)
  end-if

  let $addr = RTRIM($admin_address4, ' ')
  if $addr <> ''
     print $admin_address4                 (+1,1)
  end-if

End-Procedure

!*************************************
Begin-Procedure Bottom-Line
!*************************************

  add 1 to #Page_Number

  graphic (#Bottom_Line,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE}

  print $name                              (+1,1)
  let $Page_Number = EDIT(#Page_Number,'00')
  let $Page_Number = 'Page ' || $Page_Number
  print $Page_Number                       (+0,#ccol3)
  let #col = #ccol6 - 1
  print #Form_Cnt                          (+0,#col) edit 0000

End-Procedure

!*********************************
Begin-Procedure Get-Ben-Plan-Descr
!*********************************

 let $Descr = '[Description not available]'

Begin-Select

DD.DESCRSHORT
DD.DESCR
 let $Descr = RTRIM(&DD.Descr,' ')

FROM PS_BENEF_PLAN_TBL DD

WHERE DD.BENEFIT_PLAN   = $Ben_Plan
AND   DD.PLAN_TYPE      = $Plan_Type
AND   DD.EFFDT = (SELECT MAX(EFFDT)
                  FROM   PS_BENEF_PLAN_TBL
                  WHERE  BENEFIT_PLAN = DD.BENEFIT_PLAN
                  AND    PLAN_TYPE    = DD.PLAN_TYPE
                  AND    EFFDT       <= $event_dt)

End-Select

End-Procedure

!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

  let $Sql-Statement = 'CBR002: DELETE PS_CBR_PRNT'

  Begin-SQL on-error=SQL-Error
    DELETE FROM PS_CBR_PRNT
    WHERE PRINT_ID = $Reprint_Id;
  End-SQL

  let $Sql-Statement = 'CBR002: DELETE PS_CBR_PRNT_PARTIC'

  Begin-SQL on-error=SQL-Error
    DELETE FROM PS_CBR_PRNT_PARTIC
    WHERE PRINT_ID = $Reprint_Id;
  End-SQL

End-Procedure

!*******************************
Begin-Procedure Reset-Printer
!*******************************

  New-Page

End-Procedure

!*******************************
Begin-Procedure Display-Time
!*******************************

  do Get-Current-Datetime
  display $AsofToday Noline
  display ', '       NoLine
  display $AsOfNow   NoLine
  display ''

End-Procedure

!***************************************************************************

#Include 'readxlat.sqc' !Get translate Values
#Include 'askaod.sqc'   !Ask as of date
#Include 'number.sqc'   !Number formatting routines
#Include 'datetime.sqc' !Date formatting routines
#Include 'datemath.sqc' !Date Arithmetic
#Include 'cbraddr.sqc'  !COBRA Address
#Include 'curdttim.sqc' !Get-Current-DateTime procedure
#Include 'rotname1.sqc' !Rotates name field

#Include 'stdapi.sqc'   !Update Process API
#Include 'cbrncntl.sqc' !Get application run control parameters
#Include 'cbaskval.sqc' !Get CBR values
#Include 'cbgetval.sqc' !Get CBR values mask routines
#Include 'getcvgcd.sqc' !Get-Covrg-Code-Descr procedure
!**************************** End of Report ********************************

