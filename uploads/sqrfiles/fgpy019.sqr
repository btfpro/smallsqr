!***********************************************************************
! FGPY019:   Temp Employee Buying FEHB                                 *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!
!          $Date:  2006/07/20:03:49:21                                 
!       $Release:  HR9                                                 
!      $Revision:  102                                                 
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************



#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'


begin-report

  do Init-Report
  DO DELETE-TEMP-TABLE
  DO Process-2812A
  do GET-SUM-BY-CAT-ENROLL
  do Stdapi-Term
end-report


begin-heading 8
#Include 'stdhdg03.sqc'
   print '                 '        (4,1,17)
   print 'Payroll Office #:'        (5,1,17)
   print &H1.GVT_AGY_LOC_CODE       (5,+1,8)
   print 'Date Payroll Paid:'       (6,1,18)
   let $check_dt = &C2.CHECK_DT
   !show $check_dt
   print $check_dt                  (6,+1,10)
   print 'Payroll Period From:'     (7,1,22)
   print &CAL1.PAY_BEGIN_DT           (7,+1,10)
   print ' To:'                     (7,+1,5)
   print &C1.PAY_END_DT             (7,+1,10)

end-heading



!**************************
begin-procedure Init-Report
!**************************

  move 'FGPY019' to $ReportID
  move 'Temp Employee Buying FEHB Report' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  if $Prcs_Process_Instance = ''

   input $RC.Run_ID maxlen=10 'Enter Payroll Run ID' type=char
   uppercase $RC.Run_ID

  else

    do Select-Run-Control-Data

  end-if
end-procedure


!***********************************************************************
!                                                                      *
!  Function:     Select-Run-Control-Data                               *
!                                                                      *
!  Description:                                                        *
!                                                                      *
!***********************************************************************

Begin-Procedure Select-Run-Control-Data

Begin-Select

RNC.OPRID
RNC.RUN_CNTL_ID
RNC.RUN_ID
RNC.COMPANY
   MOVE &RNC.RUN_ID TO $RC.Run_ID
   MOVE &RNC.COMPANY TO $RC.REPORT_ID
   uppercase $RC.Run_ID
from PS_GVT_RUN_CNTL RNC
where RNC.OPRID       = $prcs_oprid
and   RNC.RUN_CNTL_ID = $prcs_run_cntl_id

End-Select
end-procedure

!*****************************
begin-procedure Process-2812A
!*****************************

!******** Retrieve FEHB Deductions
!show 'Main loop'
begin-select
C1.COMPANY
C1.DEDCD
C1.DED_CLASS
C1.PLAN_TYPE
C1.DED_CUR
C1.BENEFIT_PLAN
C1.OFF_CYCLE
C1.PAY_END_DT
C2.EMPLID
C2.EMPL_RCD
C2.CHECK_DT
    let $dedcd        = &C1.DEDCD
    let $ded_class    = &C1.DED_CLASS
    let $plan_type    = &C1.PLAN_TYPE
    let #ded_cur      = &C1.DED_CUR
    let $emplid       = &C2.EMPLID
    let #empl_rcd     = &C2.EMPL_RCD
    let $pay_end_dt   = &C1.PAY_END_DT
    let $benefit_plan = &C1.BENEFIT_PLAN
    do get-category
    do Get-coverage-cd
    do insert-temp-table
FROM  PS_PAY_DEDUCTION C1,
      PS_PAY_CHECK C2
WHERE ((C2.OFF_CYCLE = 'N'
AND   EXISTS (SELECT 'X'
              FROM PS_PAY_CALENDAR CAL2
              WHERE CAL2.RUN_ID   = $RC.Run_ID
              AND   C1.COMPANY    = CAL2.COMPANY
              AND   C1.PAYGROUP   = CAL2.PAYGROUP
              AND   C1.PAY_END_DT = CAL2.PAY_END_DT))
OR    (C2.OFF_CYCLE = 'Y'
AND   EXISTS (SELECT 'X'
              FROM   PS_PAY_CALENDAR CAL3,
                     PS_GVT_CONFIRM_TBL CON2
              WHERE  CAL3.RUN_ID          = $RC.Run_ID
              AND    C1.COMPANY           = CAL3.COMPANY
              AND    C1.PAYGROUP          = CAL3.PAYGROUP
              AND    C1.PAY_END_DT        = CAL3.PAY_END_DT
              AND    C1.COMPANY           = CON2.COMPANY
              AND    C1.PAYGROUP          = CON2.PAYGROUP
              AND    C1.OFF_CYCLE         = CON2.OFF_CYCLE
              AND    C1.PAY_END_DT       <= CON2.PAY_END_DT
              AND    C1.PAGE_NUM             = CON2.PAGE_NUM
              AND   (CON2.GVT_CONFIRM_DT >= CAL3.PAY_BEGIN_DT
              AND    CON2.GVT_CONFIRM_DT <= CAL3.PAY_END_DT))))
AND   C2.COMPANY     = C1.COMPANY
AND   C2.PAYGROUP    = C1.PAYGROUP
AND   C2.PAY_END_DT  = C1.PAY_END_DT
AND   C2.OFF_CYCLE   = C2.OFF_CYCLE
AND   C2.PAGE_NUM       = C1.PAGE_NUM
AND   C2.LINE_NUM       = C1.LINE_NUM
AND   C1.PLAN_TYPE = '10'
AND   EXISTS (SELECT 'X'
              FROM PS_DEDUCTION_TBL C3
              WHERE C3.GVT_DIST_DEST    = 'R'
              AND   C3.GVT_REPORTING_CD = 'FH'
              AND   C3.DEDCD            = C1.DEDCD
              AND   C3.EFFDT            = (SELECT MAX(C4.EFFDT)
                                           FROM   PS_DEDUCTION_TBL C4
                                           WHERE  C4.PLAN_TYPE = C3.PLAN_TYPE
                                           AND    C4.EFFDT    <= C1.PAY_END_DT
                                           AND    C4.DEDCD     = C3.DEDCD))
ORDER BY C1.BENEFIT_PLAN

end-select


!**** Retrieve GVT_AGY_LOC_CODE and move it into $1-3

begin-select

H1.GVT_AGY_LOC_CODE

   let $1-3 = &H1.GVT_AGY_LOC_CODE

FROM PS_COMPANY_TBL H,
     PS_GVT_INTRFC_INFO H1

WHERE H.COMPANY    = &C1.COMPANY
AND   H.EFF_STATUS = 'A'
AND   H1.COMPANY   = &C1.COMPANY
AND   H1.EFFDT     = (SELECT MAX(H2.EFFDT)
                      FROM   PS_GVT_INTRFC_INFO H2
                      WHERE  H2.COMPANY  = H1.COMPANY
                      AND    H2.EFFDT   <= $PAY_END_DT)

end-select

begin-select DISTINCT
CAL1.PAY_BEGIN_DT
FROM PS_PAY_CALENDAR CAL1
WHERE CAL1.COMPANY = &C1.COMPANY
AND   CAL1.PAY_END_DT = $PAY_END_DT
AND   CAL1.RUN_ID = $RC.Run_ID
end-select


end-procedure     !Process-2812A


!*****************************
begin-procedure get-category
!*****************************
!show $pay_end_dt
begin-select
A.REG_TEMP
A.GVT_ELIG_FEHB
    LET $REG_TEMP = &A.REG_TEMP
    LET $ELIG_FEHB = &A.GVT_ELIG_FEHB
    LET $REG_TEMP = LTRIM(RTRIM($REG_TEMP,' '),' ')
    LET $ELIG_FEHB = LTRIM(RTRIM($ELIG_FEHB,' '),' ')
    !show $elig_fehb
    IF $REG_TEMP = 'T'
       IF ($ELIG_FEHB = 'TAP' OR $ELIG_FEHB = 'TSV')
          MOVE 'TMP' TO $CATEGORY
       END-IF
    ELSE
          MOVE 'ORD' TO $CATEGORY
    END-IF
    IF $ELIG_FEHB = 'CC'
       MOVE 'TCC' TO $CATEGORY
    END-IF
    !show $category
FROM  PS_GVT_JOB A
WHERE A.EMPLID = $EMPLID
AND   A.EMPL_RCD = #EMPL_RCD
AND   A.EFFDT  = (SELECT MAX(A1.EFFDT)
                          FROM PS_GVT_JOB A1
                          WHERE A1.EMPLID = A.EMPLID
                          AND   A1.EMPL_RCD = A.EMPL_RCD
                          AND   A1.EFFDT <= $PAY_END_DT)
end-select
end-procedure


!******************************
begin-procedure Get-coverage-cd
!******************************
let #covrg_cd_1_amt = 0
let #covrg_cd_1_cnt = 0
let #covrg_cd_2_amt = 0
let #covrg_cd_2_cnt = 0
let #covrg_cd_3_amt = 0
let #covrg_cd_3_cnt = 0
let #covrg_cd_4_amt = 0
let #covrg_cd_4_cnt = 0
let #covrg_cd_5_amt = 0
let #covrg_cd_5_cnt = 0
let $enrollment_code = ' '
begin-select

G1.COVRG_CD

    let $benefit_plan = SUBSTR($benefit_plan,1,4)
    let $benefit_plan = RTRIM($benefit_plan, ' ')

    let $covrg_cd = RTRIM(&G1.COVRG_CD, ' ')

           let $enrollment_code = $benefit_plan
            if ($ded_class = 'A' or $ded_class = 'B') !Withhold Deduction

                   evaluate $covrg_cd

                      when = '1'
                          let #covrg_cd_1_amt = #covrg_cd_1_amt + #ded_cur
                          let #covrg_cd_1_cnt = #covrg_cd_1_cnt + 1

                      when = '2'
                          let #covrg_cd_2_amt = #covrg_cd_2_amt + #ded_cur
                          let #covrg_cd_2_cnt = #covrg_cd_2_cnt + 1

                      when = '3'
                          let #covrg_cd_3_amt = #covrg_cd_3_amt + #ded_cur
                          let #covrg_cd_3_cnt = #covrg_cd_3_cnt + 1

                      when = '4'
                          let #covrg_cd_4_amt = #covrg_cd_4_amt + #ded_cur
                          let #covrg_cd_4_cnt = #covrg_cd_4_cnt + 1

                       when = '5'
                          let #covrg_cd_5_amt = #covrg_cd_5_amt + #ded_cur
                          let #covrg_cd_5_cnt = #covrg_cd_5_cnt + 1

                   end-evaluate      !$covrg_cd

               else                  !Contribution Deduction

                   evaluate $covrg_cd

                      when = '1'
                          let #covrg_cd_1_amt = #covrg_cd_1_amt + #ded_cur

                      when = '2'
                          let #covrg_cd_2_amt = #covrg_cd_2_amt + #ded_cur

                      when = '3'
                          let #covrg_cd_3_amt = #covrg_cd_3_amt + #ded_cur

                      when = '4'
                          let #covrg_cd_4_amt = #covrg_cd_4_amt + #ded_cur

                      when = '5'
                           let #covrg_cd_5_amt = #covrg_cd_5_amt + #ded_cur

                  end-evaluate      !$covrg_cd

               end-if


FROM  PS_HEALTH_BENEFIT G1

WHERE G1.EMPLID       = $emplid
AND   G1.EMPL_RCD    = #empl_rcd
AND   G1.BENEFIT_PLAN = $benefit_plan
AND   G1.EFFDT = (SELECT MAX(G2.EFFDT)
                  FROM   PS_HEALTH_BENEFIT G2
                  WHERE  G2.EMPLID       = G1.EMPLID
                  AND    G2.EMPL_RCD    = G1.EMPL_RCD
                  AND    G2.BENEFIT_PLAN = G1.BENEFIT_PLAN
                  AND    G2.EFFDT       <= $PAY_END_DT)

ORDER BY G1.COVRG_CD

end-select

end-procedure     !Get-coverage-cd



!******************************
begin-procedure insert-temp-table
!******************************
begin-sql
insert into PS_GVT_CATG_RPT
(EMPLID,CATEGORY,GVT_ENROLL_CODE,GVT_COVRG_AMT1,
GVT_COVRG_CNT1,GVT_COVRG_AMT2,GVT_COVRG_CNT2,GVT_COVRG_AMT3,
GVT_COVRG_CNT3,GVT_COVRG_AMT4,GVT_COVRG_CNT4,GVT_COVRG_AMT5,
GVT_COVRG_CNT5)
values
($EMPLID,$CATEGORY,$enrollment_code,#covrg_cd_1_amt,
#covrg_cd_1_cnt,#covrg_cd_2_amt,#covrg_cd_2_cnt,#covrg_cd_3_amt,
#covrg_cd_3_cnt,#covrg_cd_4_amt,#covrg_cd_4_cnt,#covrg_cd_5_amt,
#covrg_cd_5_cnt)
end-sql
end-procedure

!******************************
begin-procedure GET-SUM-BY-CAT-ENROLL
!******************************
create-array name=fehb_array size = 6000
             field=enrollment_code:char
             field=covrg_cd_amt:number
             field=covrg_cd_cnt:number
LET #I = 0
BEGIN-SELECT
B.CATEGORY  () on-break level=1 print=never after=category-change
B.GVT_ENROLL_CODE
SUM(B.GVT_COVRG_AMT1) &GVT_COVRG_AMT1
sum(B.GVT_COVRG_CNT1) &GVT_COVRG_CNT1
sum(B.GVT_COVRG_AMT2) &GVT_COVRG_AMT2
sum(B.GVT_COVRG_CNT2) &GVT_COVRG_CNT2
sum(B.GVT_COVRG_AMT3) &GVT_COVRG_AMT3
sum(B.GVT_COVRG_CNT3) &GVT_COVRG_CNT3
sum(B.GVT_COVRG_AMT4) &GVT_COVRG_AMT4
sum(B.GVT_COVRG_CNT4) &GVT_COVRG_CNT4
sum(B.GVT_COVRG_AMT5) &GVT_COVRG_AMT5
sum(B.GVT_COVRG_CNT5) &GVT_COVRG_CNT5
      ADD 1 TO #MAIN_CNT
       MOVE &B.CATEGORY TO $PCATEGORY
       let $PCATEGORY =ltrim(rtrim($PCATEGORY,' '),' ')
       MOVE &B.GVT_ENROLL_CODE TO $PENROLL_CODE
       LET $PENROLL_CODE1 = $PENROLL_CODE || '1'
       MOVE &GVT_COVRG_AMT1 TO #PGVT_COVRG_AMT1
       MOVE &GVT_COVRG_CNT1 TO #PGVT_COVRG_CNT1
       IF #PGVT_COVRG_AMT1 <> 0 OR #PGVT_COVRG_CNT1 <> 0
          LET #I = #I + 1
          PUT $PENROLL_CODE1 #PGVT_COVRG_AMT1 #PGVT_COVRG_CNT1 INTO FEHB_ARRAY(#i) enrollment_code covrg_cd_amt covrg_cd_cnt
       END-IF
       LET $PENROLL_CODE2 = $PENROLL_CODE || '2'
       MOVE &GVT_COVRG_AMT2 TO #PGVT_COVRG_AMT2
       MOVE &GVT_COVRG_CNT2 TO #PGVT_COVRG_CNT2
       IF #PGVT_COVRG_AMT2 <> 0 OR #PGVT_COVRG_CNT2 <> 0
          LET #I = #I + 1
          PUT $PENROLL_CODE2 #PGVT_COVRG_AMT2 #PGVT_COVRG_CNT2 INTO FEHB_ARRAY(#i) enrollment_code covrg_cd_amt covrg_cd_cnt
       END-IF
       LET $PENROLL_CODE3 = $PENROLL_CODE || '3'
       MOVE &GVT_COVRG_AMT3 TO #PGVT_COVRG_AMT3
       MOVE &GVT_COVRG_CNT3 TO #PGVT_COVRG_CNT3
       IF #PGVT_COVRG_AMT3 <> 0 OR #PGVT_COVRG_CNT3 <> 0
          LET #I = #I + 1
          PUT $PENROLL_CODE3 #PGVT_COVRG_AMT3 #PGVT_COVRG_CNT3 INTO FEHB_ARRAY(#i) enrollment_code covrg_cd_amt covrg_cd_cnt
       END-IF
       LET $PENROLL_CODE4 = $PENROLL_CODE || '4'
       MOVE &GVT_COVRG_AMT4 TO #PGVT_COVRG_AMT4
       MOVE &GVT_COVRG_CNT4 TO #PGVT_COVRG_CNT4
       IF #PGVT_COVRG_AMT4 <> 0 OR #PGVT_COVRG_CNT4 <> 0
          LET #I = #I + 1
          PUT $PENROLL_CODE4 #PGVT_COVRG_AMT4 #PGVT_COVRG_CNT4 INTO FEHB_ARRAY(#i) enrollment_code covrg_cd_amt covrg_cd_cnt
       END-IF
       LET $PENROLL_CODE5 = $PENROLL_CODE || '5'
       MOVE &GVT_COVRG_AMT5 TO #PGVT_COVRG_AMT5
       MOVE &GVT_COVRG_CNT5 TO #PGVT_COVRG_CNT5
       IF #PGVT_COVRG_AMT5 <> 0 OR #PGVT_COVRG_CNT5 <> 0
          LET #I = #I + 1
          PUT $PENROLL_CODE5 #PGVT_COVRG_AMT1 #PGVT_COVRG_CNT5 INTO FEHB_ARRAY(#i) enrollment_code covrg_cd_amt covrg_cd_cnt
       END-IF
FROM PS_GVT_CATG_RPT B
group by B.CATEGORY,B.GVT_ENROLL_CODE
!ORDER BY B.CATEGORY,B.GVT_ENROLL_CODE
END-SELECT

   move 'Y' to $End_of_Report
   print ' ' (+1,1) center

END-PROCEDURE

!******************************
begin-procedure category-change
!******************************
!show 'category-change'
evaluate $pcategory
   when = 'TMP'
   move 'Temporary Employees' to $cat_head
   break
   when = 'TCC'
   move 'Temporary Continuation of Coverage' to $cat_head
   break
   when = 'ORD'
   move 'Employees/Annuitants' to $cat_head
   break
end-evaluate

DO HEAD-to-2812A-report
LET #J = 0

WHILE #J <= 5999
!show 'Inside array'
GET $enrollment_code #covrg_cd_amt #covrg_cd_cnt FROM FEHB_ARRAY(#J) enrollment_code covrg_cd_amt covrg_cd_cnt
IF LTRIM(RTRIM($enrollment_code,' '),' ') <> ''
   ADD 1 TO #TEMP_CNT
   let #tot_covrg_cd_amt = #tot_covrg_cd_amt + #covrg_cd_amt
   let #tot_covrg_cd_cnt = #tot_covrg_cd_cnt + #covrg_cd_cnt
   IF #TEMP_CNT = 1
      PRINT $enrollment_code (+1,1,5)
      PRINT #covrg_cd_amt    (0,17,15) edit 999,999,999.99mi
      PRINT #covrg_cd_cnt    (0,34,7)  edit 999,999
   END-IF
   IF #TEMP_CNT = 2
      PRINT $enrollment_code (0,43,5)
      PRINT #covrg_cd_amt    (0,59,15) edit 999,999,999.99mi
      PRINT #covrg_cd_cnt    (0,77,7)  edit 999,999
   END-IF
   IF #TEMP_CNT = 3
      PRINT $enrollment_code (0,85,5)
      PRINT #covrg_cd_amt    (0,101,15) edit 999,999,999.99mi
      PRINT #covrg_cd_cnt    (0,118,7)  edit 999,999
      MOVE 0 TO #TEMP_CNT
   END-IF
end-if
ADD 1 TO #J
END-WHILE
print 'Witholdings and Contributions Grand Total: $' (+3,1,43)
print #tot_covrg_cd_amt (,44,16) edit 999,999,999.99mi
print 'Total Number Enrolled: ' (+2,1,23)
print #tot_covrg_cd_cnt (,24,8) edit 999,999
move 0 to #temp_cnt
MOVE 0 TO #I
move 0 to #tot_covrg_cd_amt
move 0 to #tot_covrg_cd_cnt
MOVE 0 TO #J
NEW-PAGE
CLEAR-ARRAY name=FEHB_ARRAY

END-PROCEDURE


!************************************
begin-procedure HEAD-to-2812A-report
!************************************

   !***** 2812A column titles
   print 'Category :' (1,1,12)
   show $cat_head
   print $cat_head (0,13)
   print ' ' (+1,1)
   print 'Enrollment'           (+1,1,10)
   print 'Total Withholdings'   (0,13,18)
   print 'Number'               (0,33,6)
   print 'Enrollment'           (0,43,10)
   print 'Total Withholdings'   (0,55,18)
   print 'Number'               (0,75,6)
   print 'Enrollment'           (0,85,10)
   print 'Total Withholdings'   (0,97,18)
   print 'Number'               (0,117,6)
   print 'Code No.'             (+1,1,8)
   print '& Contributions'      (0,13,15)
   print 'Enrolled'             (0,33,9)
   print 'Code No.'             (0,43,8)
   print '& Contributions'      (0,55,15)
   print 'Enrolled'             (0,75,9)
   print 'Code No.'             (0,85,8)
   print '& Contributions'      (0,97,15)
   print 'Enrolled'             (0,117,9)
   print '----------'           (+1,1,10)
   print '------------------'   (0,13,18)
   print '--------'             (0,33,8)
   print '----------'           (0,43,10)
   print '------------------'   (0,55,18)
   print '--------'             (0,75,8)
   print '----------'           (0,85,10)
   print '------------------'   (0,97,18)
   print '--------'             (0,117,8)

END-PROCEDURE


!************************************
begin-procedure DELETE-TEMP-TABLE
!************************************
BEGIN-SQL
DELETE FROM PS_GVT_CATG_RPT
END-SQL
END-PROCEDURE





!#Include 'ghrunctl.sqc'  !Get run control parameter values
!#Include 'ghovrpch.sqc'  !Over Punch routine
#Include 'reset.sqc'     !Reset printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
!#Include 'useprntr.sqc'  !
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'datemath.sqc'
