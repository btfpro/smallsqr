!**************************************************
!  TAX018:  Employee Check Info
!**************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/05/15:16:47:39                           !
!             $Release:  HR9                                           !
!            $Revision:  102                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set Database Environment


begin-report
  move 'TAX018' to $ReportID
  do Stdapi-Init
  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Tax018_ReportTitle to $ReportTitle
  display $ReportTitle
  display ''
  do Init-DateTime
  display 'Report Began: ' noline
  do Get-Current-DateTime
  display $AsOfNow
  move $AsOfNow to $ReportTime
  do Format-DateTime($AsOfToday, $ReportDate, {DEFMDY},'','')
  display ''
  do Get-Run-Parameters
  do Get-PayGroup-Country
  do Get-Work-State
  do Get-Setid($Busunit,$Recname,$Setid)
  do Get-Location-State
  do Get-Check
  if #Found = 0
    display 'No check information has been found for the employee: ' noline
    display $Emplid
    display 'No Report has been generated'
  end-if
  display ''
  display 'Report Ended: ' noline
  display $AsOfNow
  do Stdapi-Term
end-report


#include 'setup32.sqc'   !Printer and page-size initialization


! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation

! Read from TAX018 program id
  do Init_Report_Translation($ReportID,$curr_language_cd)
  do Append_Report_Translation('HR')


!  if $Program_Read = 'Y'
    do Get_Field_Information ('TAX018', 'REPORT_TITLE',       $Tax018_ReportTitle,        #dummy_width)
    do Get_Field_Information ('TAX018', 'EMPLID',             $Tax018_Emplid,             #dummy_width)
    do Get_Field_Information ('TAX018', 'NAME',               $Tax018_Name,               #dummy_width)
    do Get_Field_Information ('TAX018', 'RUNID',              $Tax018_RunId,              #dummy_width)
    do Get_Field_Information ('TAX018', 'JOB_LOCN',           $Tax018_Job_Locn,           #dummy_width)
    do Get_Field_Information ('TAX018', 'WRK_PROV',           $Tax018_Wrk_Prov,           #dummy_width)
    do Get_Field_Information ('TAX018', 'WRK_STATE',          $Tax018_Wrk_State,          #dummy_width)
    do Get_Field_Information ('TAX018', 'SUPPL_CMB_CHK',      $Tax018_Suppl_Cmb_Chk,      #dummy_width)
    do Get_Field_Information ('TAX018', 'SUPPL_SEP_CHK',      $Tax018_Suppl_Sep_Chk,      #dummy_width)
    do Get_Field_Information ('TAX018', 'NONE_FOUND',         $Tax018_None_Found,         #dummy_width)
    do Get_Field_Information ('TAX018', 'PAY_EARNINGS_HDG',   $Tax018_Pay_Earnings_Hdg,   #dummy_width)
    do Get_Field_Information ('TAX018', 'LINE',               $Tax018_Line,               #dummy_width)
    do Get_Field_Information ('TAX018', 'PAGE',               $Tax018_Page,               #dummy_width)
    do Get_Field_Information ('TAX018', 'OFF_CYCLE',          $Tax018_Off_Cycle,          #dummy_width)
    do Get_Field_Information ('TAX018', 'END_DATE',           $Tax018_End_Date,           #dummy_width)
    do Get_Field_Information ('TAX018', 'PAYGRP',             $Tax018_PayGrp,             #dummy_width)
    do Get_Field_Information ('TAX018', 'COMP',               $Tax018_Comp,               #dummy_width)
    do Get_Field_Information ('TAX018', 'PAYCHK_STATUS',      $Tax018_PayChk_Status,      #dummy_width)
    do Get_Field_Information ('TAX018', 'SEP_CHK',            $Tax018_Sep_Chk,            #dummy_width)
    do Get_Field_Information ('TAX018', 'EARNINGS',           $Tax018_Earnings,           #dummy_width)
    do Get_Field_Information ('TAX018', 'TAXES',              $Tax018_Taxes,              #dummy_width)
    do Get_Field_Information ('TAX018', 'DEDUCTIONS',         $Tax018_Deductions,         #dummy_width)
    do Get_Field_Information ('TAX018', 'NET_PAY',            $Tax018_Net_Pay,            #dummy_width)
    do Get_Field_Information ('TAX018', 'OTH_EARNS_HDG',      $Tax018_Oth_Earns_Hdg,      #dummy_width)
    do Get_Field_Information ('TAX018', 'ADDL_LINE_HDG',      $Tax018_Addl_Line_Hdg,      #dummy_width)
    do Get_Field_Information ('TAX018', 'REG_HRS',            $Tax018_Reg_Hrs,            #dummy_width)
    do Get_Field_Information ('TAX018', 'HRLY_RT',            $Tax018_Hrly_Rt,            #dummy_width)
    do Get_Field_Information ('TAX018', 'SHIFT_RT',           $Tax018_Shift_Rt,           #dummy_width)
    do Get_Field_Information ('TAX018', 'OVERTIME',           $Tax018_Overtime,           #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_METHOD',         $Tax018_Tax_Method,         #dummy_width)
    do Get_Field_Information ('TAX018', 'PAY_FREQ',           $Tax018_Pay_Freq,           #dummy_width)
    do Get_Field_Information ('TAX018', 'REG_EARNINGS',       $Tax018_Reg_Earnings,       #dummy_width)
    do Get_Field_Information ('TAX018', 'PROVINCE',           $Tax018_Province,           #dummy_width)
    do Get_Field_Information ('TAX018', 'STATE',              $Tax018_State,              #dummy_width)
    do Get_Field_Information ('TAX018', 'LOCALITY',           $Tax018_Locality,           #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_PERIOD',         $Tax018_Tax_Period,         #dummy_width)
    do Get_Field_Information ('TAX018', 'DEDN_HDG',           $Tax018_Dedn_Hdg,           #dummy_width)
    do Get_Field_Information ('TAX018', 'DEDN',               $Tax018_Dedn,               #dummy_width)
    do Get_Field_Information ('TAX018', 'AMT',                $Tax018_Amt,                #dummy_width)
    do Get_Field_Information ('TAX018', 'AMT_NOT_TAKEN',      $Tax018_Amt_Not_Taken,      #dummy_width)
    do Get_Field_Information ('TAX018', 'PAYBACK_AMT',        $Tax018_Payback_Amt,        #dummy_width)
    do Get_Field_Information ('TAX018', 'CAL_BASE',           $Tax018_Cal_Base,           #dummy_width)
    do Get_Field_Information ('TAX018', 'REFUND_AMT',         $Tax018_Refund_Amt,         #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_HDG',            $Tax018_Tax_Hdg,            #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_ENTITY',         $Tax018_Tax_Entity,         #dummy_width)
    do Get_Field_Information ('TAX018', 'RES',                $Tax018_Res,                #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_CLASS',          $Tax018_Tax_Class,          #dummy_width)
    do Get_Field_Information ('TAX018', 'NO_LIMIT_GROSS',     $Tax018_No_Limit_Gross,     #dummy_width)
    do Get_Field_Information ('TAX018', 'TAXABLE_GROSS',      $Tax018_Taxable_Gross,      #dummy_width)
    do Get_Field_Information ('TAX018', 'PREV_TAX_HDG',       $Tax018_Prev_Tax_Hdg,       #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_CAN_HDG',        $Tax018_Tax_Can_Hdg,        #dummy_width)
    do Get_Field_Information ('TAX018', 'PREV_TAX_CAN_HDG',   $Tax018_Prev_Tax_Can_Hdg,   #dummy_width)
    do Get_Field_Information ('TAX018', 'TIPS_CUR',           $Tax018_Tips_Cur,           #dummy_width)
    do Get_Field_Information ('TAX018', 'TIPS_DELAYED',       $Tax018_Tips_Delayed,       #dummy_width)
    do Get_Field_Information ('TAX018', 'WAGEPLAN',           $Tax018_WagePlan,           #dummy_width)
    do Get_Field_Information ('TAX018', 'TAXTYPE',            $Tax018_TaxType,            #dummy_width)
    do Get_Field_Information ('TAX018', 'TAX_PROVINCE',       $Tax018_TaxProvince,        #dummy_width)
    do Get_Field_Information ('TAX018', 'CHECK#',             $Tax018_PAYCHECK_NBR,       #dummy_width)

    do Get_Field_Information ('HR',     'BUS_UNIT_COLON',     $HR_Bus_Unit_Colon,         #dummy_width)

    let $Tax018_Hrly_Rt = lpad($Tax018_Hrly_RT,12,' ')
 ! end-if

end-procedure


begin-heading 7

  #include 'stdhdgtr.sqc'
  print $Tax018_Emplid          (+1,1)
  print $Emplid                 (0,15)
  print $Tax018_Name            (0,27)
  print &P.Name                 (0,32)
  print $Tax018_RunId           (0,65)
  print $Runid                  (0,75)
  print $Tax018_Job_Locn        (0,86)
  print $Jlocation              (0,104)
  if &PT.COUNTRY = 'CAN'
    print $Tax018_Wrk_Prov      (0,113)
    print $LState               (0,131)
    print $Hr_Bus_Unit_Colon    (+1,1)
    print &J.Business_unit      (0,15)
  else
    print $Tax018_Wrk_State     (0,113)
    print $LState               (0,129)
    print $Hr_Bus_Unit_Colon    (+1,1)
    print &J.Business_unit      (0,15)
    print $Tax018_Suppl_Cmb_Chk (0,65)
    print &S.Suppl_Con_Method   (0,104)
    print $Tax018_Suppl_Sep_Chk (0,113)
    print &S.Suppl_Sep_Method   (0,146)
  end-if

end-heading


begin-procedure Get-Run-Parameters
  if $Prcs_Process_Instance = ''
    do Get-EE
  else
    do Select-Parameters
    move $RC_PAY.Run_ID  to  $RunID
    move $RC_PAY.Emplid  to  $Emplid
    move 0 to #Found
    do Edit-EE
    if #Found = 0
        display 'Error --  Employee ID not valid.'
        move '' to $Emplid
    end-if
    move 0 to #Found
    do Edit-Run-ID
    if #Found = 0
        display 'Error --  Run ID not valid for any Pay Calendar.'
        move '' to $RunID
    end-if
  end-if
end-procedure


begin-procedure Get-EE
  move 0 to #Found
  while #Found = 0
    input $Emplid 'Enter Employee ID'
    uppercase $Emplid
    if $Emplid = ''
      stop
    else
      do Edit-EE
      if #Found = 1
        do Get-Run-ID
      else
        display 'Error --  Employee ID not valid.'
        move '' to $Emplid
      end-if
    end-if
  end-while
end-procedure


begin-procedure Edit-EE
begin-SELECT
P.EMPLID
P.NAME
  move 1 to #Found
FROM PS_PERSON_NAME P
WHERE P.EMPLID = $Emplid
end-SELECT
end-procedure


begin-procedure Get-Run-ID
  move 0 to #Found
  while #Found = 0
    input $RunID 'Enter Pay Run ID'
    uppercase $RunID
    if $RunID = ''
      stop
    else
      do Edit-Run-ID
      if #Found = 1
          break
      else
          display 'Error --  Run ID not valid for any Pay Calendar.'
          move '' to $RunID
      end-if
    end-if
  end-while
end-procedure


begin-procedure Edit-Run-ID
begin-SELECT loops=1
C.COMPANY,
C.PAYGROUP,
C.PAY_END_DT
  move 1 to #Found
FROM  PS_PAY_CALENDAR C
WHERE RUN_ID = $RunID
ORDER BY C.COMPANY ASC, C.PAYGROUP ASC, C.PAY_END_DT DESC
end-SELECT
end-procedure


begin-procedure Get-PayGroup-Country
begin-SELECT
PT.COUNTRY
FROM PS_JOB J1,
     PS_PAYGROUP_TBL  PT
WHERE J1.EMPLID   = $Emplid
  AND J1.EFFDT    =
  (SELECT MAX(EFFDT)
   FROM PS_JOB
   WHERE EMPLID  = J1.EMPLID
   AND EFFDT    <= &C.Pay_End_Dt)
  AND J1.EFFSEQ   =
  (SELECT MAX(EFFSEQ)
   FROM PS_JOB
   WHERE EMPLID  = J1.EMPLID
   AND EFFDT     = J1.EFFDT)
  AND J1.COMPANY = PT.COMPANY
  AND J1.PAYGROUP = PT.PAYGROUP
  AND PT.EFFDT   =
  (SELECT MAX(EFFDT)
   FROM PS_PAYGROUP_TBL
   WHERE COMPANY = PT.COMPANY
   AND PAYGROUP  = PT.PAYGROUP
   AND EFFDT    <= &C.Pay_End_Dt)
end-SELECT
end-procedure


begin-procedure Get-Work-State
begin-SELECT
J.LOCATION
J.BUSINESS_UNIT
  move &J.Location      to $JLocation
  move &J.Business_unit to $Busunit
FROM PS_JOB J
WHERE J.EMPLID   = $Emplid
  AND J.EFFDT    =
  (SELECT MAX(EFFDT)
   FROM PS_JOB
   WHERE EMPLID  = J.EMPLID
   AND EFFDT    <= &C.Pay_End_Dt)
  AND J.EFFSEQ   =
  (SELECT MAX(EFFSEQ)
   FROM PS_JOB
   WHERE EMPLID  = J.EMPLID
   AND EFFDT     = J.EFFDT)
end-SELECT
  if &J.Location = ' '
    move $Tax018_None_Found to $Jlocation
  end-if
  let $Recname = 'LOCATION_TBL'
end-procedure


begin-procedure Get-Location-State
begin-SELECT
L.STATE
  move &L.State to $LState
FROM PS_LOCATION_TBL L
WHERE L.LOCATION  = &J.Location
  AND L.SETID     = $Setid
  AND L.EFFDT     =
  (SELECT MAX(EFFDT)
   FROM PS_LOCATION_TBL
   WHERE LOCATION = L.LOCATION
     AND EFFDT   <= &C.Pay_End_Dt)
end-SELECT
  if &L.State     = ' '
    move $Tax018_None_Found to $LState
  else
    if &PT.Country <> 'CAN'
      do Get-Supp-Method
    end-if
  end-if
end-procedure


begin-procedure Get-Supp-Method
begin-SELECT
S.SUPPL_CON_METHOD, S.SUPPL_SEP_METHOD, S.EFFDT
FROM PS_STATE_TAX_TBL S
WHERE STATE = &L.State
   AND EFFDT <= &C.Pay_End_Dt
ORDER BY EFFDT DESC
end-SELECT
end-procedure

begin-procedure Get-Check
  move 0 to #Found
begin-SELECT
CK.COMPANY, CK.PAYGROUP, CK.PAY_END_DT, CK.OFF_CYCLE, CK.PAGE_NUM, CK.LINE_NUM, CK.PAYCHECK_STATUS, CK.SEPCHK
CK.TOTAL_GROSS, CK.TOTAL_DEDUCTIONS, CK.TOTAL_TAXES, CK.NET_PAY, CK.PAY_END_DT  &pay_end_date, CK.PAYCHECK_NBR

  do Format-DateTime(&pay_end_date, $out, {DEFCMP},'','')
  do Year-Beg-Date($out, $BeginYr)


  do Print-Check-Data
  do Get-Earnings
  do Get-Deductions
  if &PT.Country = 'CAN'
    do Get-Can-Taxes
    do Get-Prev-Can-Taxes
  else
    do Get-Taxes
    do Get-Prev-Taxes
  end-if
  move 1 to #Found

FROM PS_PAY_CHECK CK
WHERE CK.PAY_END_DT  = &C.Pay_End_Dt
  AND CK.EMPLID      = $Emplid
end-SELECT
end-procedure

begin-procedure Year-Beg-Date ($date_in, :$date_out)
 do Get-DateComponents($date_in, #year, #month, #day)
 let $begin_date = to_char(#year)||'0101'
 do Format-DateTime($begin_date, $date_out, {DEFCMP},'','native')
end-procedure Year-Beg-Date

begin-procedure Print-Check-Data
  print '******************************************************'(+3,1)
  print $Tax018_Pay_Earnings_Hdg    (+1,1)
  print '******************************************************' (+1,1)
  print $Tax018_Line           (+2,1)
  print &CK.LINE_NUM              (0,8)
  print $Tax018_Page           (0,12)
  print &CK.PAGE_NUM              (0,19)
  print $Tax018_Off_Cycle      (0,26)
  print &CK.Off_Cycle          (0,38)
  print $Tax018_End_Date       (0,42)
   do Format-DateTime(&CK.Pay_End_Dt, $out, {DEFMDY},'','')
  print $out                   (0,52,11)
  print $Tax018_PayGrp         (0,65)
  print &CK.PayGroup           (0,76)
  print $Tax018_Comp           (0,82)
  print &CK.Company            (0,91)
  print $Tax018_PAYCHECK_NBR         (0,97)
  print &CK.PAYCHECK_NBR             (0,105)
  print $Tax018_PayChk_Status  (0,122)
        move &CK.Paycheck_Status to $FieldValue
        move 'PAYCHECK_STATUS'   to $FieldName
        do Read-Translate-Table
  print $XlatLongName          (0,139)
  print $Tax018_Sep_Chk        (0,157)
  print &CK.Sepchk             (0,173)
  print $Tax018_Earnings       (+2,1)
  print &CK.Total_Gross        (0,15) edit 99999999.99
  print $Tax018_Taxes          (+1,1)
  print &CK.Total_Taxes        (0,15)  edit 99999999.99
  print $Tax018_Deductions     (+1,1)
  print &CK.Total_Deductions   (0,15)  edit 99999999.99
  print $Tax018_Net_Pay        (+1,1)
  print &CK.Net_Pay            (0,15) edit 99999999.99
end-procedure


begin-procedure Get-Earnings
begin-select
E.ADDL_NBR, E.SHIFT, E.SHIFT_RT, E.HOURLY_RT,
E.PAY_END_DT ,
E.ERNCD_REG_HRS, E.ERNCD_OT_HRS,
E.REG_HRS, E.OT_HRS, E.REG_HRLY_EARNS, E.OT_HRLY_EARNS, E.REG_PAY_HRS,
E.ERNCD_REG_EARNS, E.REG_PAY, E.REG_EARNS, E.REG_EARN_HRS,
E.STATE, E.LOCALITY, FT.FREQUENCY_TYPE, E.TAX_PERIODS, E.TAX_METHOD,
E.ADDL_TAXES

  do Format-DateTime(&E.PAY_END_DT, $out, {DEFCMP},'','')
  do Year-Beg-Date($out, $BegYear)


  do Print-Earnings
  do Get-Oth-Earns
FROM PS_PAY_EARNINGS E,  PS_FREQUENCY_TBL FT
WHERE E.COMPANY     = &CK.Company
  AND E.PAYGROUP    = &CK.Paygroup
  AND E.PAY_END_DT  = &CK.Pay_End_Dt
  AND E.OFF_CYCLE   = &CK.Off_Cycle
  AND E.PAGE_NUM       = &CK.PAGE_NUM
  AND E.LINE_NUM       = &CK.LINE_NUM
  AND E.SEPCHK      = &CK.Sepchk
  AND E.PAY_FREQUENCY  = FT.FREQUENCY_ID
  AND FT.EFF_STATUS    = 'A'
  AND FT.EFFDT         =
    (SELECT MAX(FT1.EFFDT)
       FROM PS_FREQUENCY_TBL FT1
      WHERE FT1.FREQUENCY_ID   = FT.FREQUENCY_ID
        AND FT1.EFF_STATUS     = FT.EFF_STATUS
        AND FT1.EFFDT         <= E.PAY_END_DT)
end-SELECT
end-procedure



begin-procedure Get-Oth-Earns
  print $Tax018_Oth_Earns_Hdg         (+2,15)
begin-SELECT
O.ERNCD               (+1,15)
  do Get-Earn-Descr
O.OTH_HRS             (0,35)  edit 9999.99
O.OTH_EARNS           (0,60)  edit 99999999.99
O.TAX_METHOD          (0,80)
O.OTH_PAY
!  print ''            (+1,0)
FROM PS_PAY_OTH_EARNS O
WHERE COMPANY    = &CK.Company
  AND PAYGROUP   = &CK.Paygroup
  AND PAY_END_DT = &CK.Pay_End_Dt
  AND OFF_CYCLE  = &CK.Off_Cycle
  AND PAGE_NUM      = &CK.PAGE_NUM
  AND LINE_NUM      = &CK.LINE_NUM
  AND ADDL_NBR      = &E.ADDL_NBR
end-SELECT
end-procedure


begin-procedure Get-Earn-Descr
begin-SELECT loops=1
Z.DESCRSHORT     ! (0,22)
Z.EFFDT

  let $PRNT_DESCR_EARN = &Z.DESCRSHORT
  let $Basedate        = &Z.EFFDT

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!

  if $Curr_language_cd <> $Psoptions_language_cd
     do Get-Rel-Lang-Earning
  end-if

  print $PRNT_DESCR_EARN  (0,22)

FROM PS_ERN_PROG_DESCR Z
WHERE Z.ERNCD = &O.ErnCd
  AND Z.EFFDT <= &C.Pay_End_Dt
ORDER BY EFFDT DESC
end-SELECT
end-procedure


begin-procedure Get-Rel-Lang-Earning
begin-SELECT loops=1
ZL.DESCRSHORT,
ZL.EFFDT

  let $PRNT_DESCR_EARN = Cond(RTRIM(&ZL.DESCRSHORT,' ')='', &Z.DESCRSHORT, &ZL.DESCRSHORT)

FROM PS_ERN_PROG_DSCLNG ZL
WHERE ZL.ERNCD       = &O.ErnCd
  AND ZL.LANGUAGE_CD = $Curr_language_cd
  AND ZL.EFFDT      <= $Basedate
ORDER BY EFFDT DESC

end-SELECT
end-procedure


begin-procedure Print-Earnings
  print $Tax018_Addl_Line_Hdg  (+2,10)
  print &E.ADDL_NBR             (0,46)   edit 999
  print $Tax018_Reg_Hrs      (+1,10)
  print &E.Reg_Hrs           (0,35)   edit 9999.99
  print &E.Reg_Hrly_Earns    (0,60)   edit 99999999.99
  print $Tax018_Hrly_Rt      (0,91)
  print &E.Hourly_Rt         (0,107)  edit 9999.999
  print $Tax018_Shift_Rt     (0,123)
        move &E.Shift to $FieldValue
        move 'SHIFT'  to $FieldName
        do Read-Translate-Table
  print $XlatLongName        (0,135)
  print ' / '                (0,0)
  print &E.Shift_Rt          (0,0)

  print $Tax018_Overtime     (+1,10)
  print &E.OT_Hrs            (0,35)  edit 9999.99
  print &E.OT_Hrly_Earns     (0,60)  edit 99999999.99
  print $Tax018_Tax_Method     (0,95)
        move &E.Tax_Method to $FieldValue
        move 'TAX_METHOD' to $FieldName
        do Read-Translate-Table
  print $XlatLongName        (0,110)
  print $Tax018_Pay_Freq     (0,123)
        move &FT.FREQUENCY_TYPE to $FieldValue
        move 'FREQUENCY_TYPE'   to $FieldName
        do Read-Translate-Table
  print $XlatLongName        (0,139)
  print $Tax018_Reg_Earnings (+1,10)
  print &E.Reg_Earn_Hrs      (0,35) edit 9999.99
  print &E.Reg_Earns         (0,60)  edit 99999999.99
  if &PT.COUNTRY = 'CAN'
    print $Tax018_Province   (0,95)
    print &E.State           (0,107)
  else
    print $Tax018_State      (0,95)
    print &E.State           (0,104)
    print $Tax018_Locality   (0,123)
    print &E.Locality        (0,133)
  end-if
  print $Tax018_Tax_Period   (0,149)
  print &E.Tax_Periods       (0,164)
end-procedure


begin-procedure Get-Deductions
  print $Tax018_Dedn_Hdg      (+3,1)
  print $Tax018_Dedn          (+1,1)
  print $Tax018_Amt           (0, 85)
  print $Tax018_Amt_Not_Taken (0, 98)
  print $Tax018_Payback_Amt   (0, 120)
  print $Tax018_Cal_Base      (0,136)
  print $Tax018_Refund_Amt    (0,161)
begin-SELECT
D.PLAN_TYPE,
D.BENEFIT_PLAN,
D.DEDCD,

#ifdef DB2ALL
DECIMAL(SUM(D.DED_CUR),15,3)              &D.Ded_cur
DECIMAL(SUM(D.DED_CUR_PAYBK),15,3)        &D.Ded_cur_paybk
DECIMAL(SUM(D.DED_CUR_REFUND),15,3)       &D.Ded_cur_refund
DECIMAL(SUM(D.DED_NOT_TAKEN),15,3)        &D.Ded_not_taken
DECIMAL(SUM(D.CALCULATED_BASE),15,3)      &D.Calculated_base
#else
SUM(D.DED_CUR)                            &D.Ded_cur
SUM(D.DED_CUR_PAYBK)                      &D.Ded_cur_paybk
SUM(D.DED_CUR_REFUND)                     &D.Ded_cur_refund
SUM(D.DED_NOT_TAKEN)                      &D.Ded_not_taken
SUM(D.CALCULATED_BASE)                    &D.Calculated_base
#endif

D.DED_CLASS
D.DED_SLSTX_CLASS

   do Get-Ded-Descr
   do Print-Deductions
FROM PS_PAY_DEDUCTION D
WHERE D.COMPANY    = &CK.Company
  AND D.PAYGROUP   = &CK.Paygroup
  AND D.PAY_END_DT = &CK.Pay_End_Dt
  AND D.OFF_CYCLE  = &CK.Off_Cycle
  AND D.PAGE_NUM      = &CK.PAGE_NUM
  AND D.LINE_NUM      = &CK.LINE_NUM
  AND D.SEPCHK     = &CK.Sepchk
GROUP BY D.PLAN_TYPE,
         D.BENEFIT_PLAN,
         D.DEDCD,
         D.DED_CLASS,
         D.DED_SLSTX_CLASS
end-SELECT
end-procedure


begin-procedure Get-Ded-Descr
begin-SELECT loops=1
D2.DESCR,
D2.EFFDT

   let $PRNT_DESCR_DED = RTRIM(&D2.DESCR,' ')

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!

    if $curr_language_cd <> $Psoptions_Language_Cd
       do Get-Rel-Lang-Deduc
    end-if

FROM PS_DEDUCTION_TBL D2
WHERE   D2.PLAN_TYPE = &D.Plan_Type
    AND D2.DEDCD     = &D.DedCd
    AND D2.EFFDT    <= &CK.Pay_End_Dt
ORDER BY D2.EFFDT DESC
end-SELECT
end-procedure


begin-procedure Get-Rel-Lang-Deduc
begin-SELECT loops=1
D2L.DESCR,
D2L.EFFDT

   if rtrim(&D2L.DESCR,' ') <> ''
      let $PRNT_DESCR_DED = RTRIM(&D2L.DESCR,' ')
   end-if

FROM PS_DEDUCTION_LANG D2L
WHERE D2L.PLAN_TYPE   = &D.Plan_Type
  AND D2L.DEDCD       = &D.DedCd
  AND D2L.LANGUAGE_CD = $Curr_language_cd
  AND D2L.EFFDT      <= &CK.Pay_End_Dt
ORDER BY D2L.EFFDT DESC
end-SELECT
end-procedure


begin-procedure Print-Deductions
  print  &D.Benefit_Plan     (+1,1)
  print &D.DedCd             (0,10)
  print ' / '                (0,16)
  print $PRNT_DESCR_DED      (0,18)

      move 'DED_CLASS' to $FieldName
      move &D.Ded_Class to $FieldValue
      do Read-Translate-Table
  print  $XlatShortName      (0,48)

  if &D.Ded_Slstx_Class <> 'B'
      move 'DED_SLSTX_CLASS' to $FieldName
      move &D.Ded_Slstx_Class to $FieldValue
      do Read-Translate-Table
      print  $XlatShortName      (0,60)
  end-if

  print &D.Ded_Cur           (0,80)   edit 99999999.99
  print &D.Ded_Not_Taken     (0,100)  edit 99999999.99
  print &D.Ded_Cur_Paybk     (0,120)  edit 99999999.99
  print &D.Calculated_Base   (0,140)  edit 99999999.99
  print &D.Ded_Cur_Refund    (0,160)  edit 99999999.99
end-procedure


begin-procedure Get-Taxes
  print $Tax018_Tax_Hdg (+3,1)
  do Print-Tax-Hdgs
begin-SELECT
T.STATE, T.LOCALITY, T.TAX_CLASS, T.RESIDENT, T.NLGRS_CUR,
T.TXGRS_CUR, T.TAX_CUR, T.TXGRS_AGG, T.TAX_AGG, T.TAX_NOT_TAKEN
T.TIPS_CUR,T.TIPS_DELAYED
  move &T.State to $State
  move &T.Locality to $Locality
  do Get-Local-Name-EQ
  move &T.Tax_Class     to $TaxClass
  move &T.Resident      to $Resident
  move &T.NLGrs_Cur     to $NLGrsCur
  move &T.TxGrs_Cur     to $TxGrsCur
  move &T.Tax_Cur       to $TaxCur
  move &T.Tax_Not_Taken to $TaxNotTaken
  move &T.Tips_Cur      to $TipsCur
  move &T.Tips_Delayed  to $TipsDelayed
  do Print-Taxes
FROM PS_PAY_TAX T
WHERE T.COMPANY     = &CK.Company
  AND T.PAYGROUP    = &CK.PayGroup
  AND T.PAY_END_DT  = &CK.Pay_End_Dt
  AND T.OFF_CYCLE   = &CK.Off_Cycle
  AND T.PAGE_NUM       = &CK.PAGE_NUM
  AND T.LINE_NUM       = &CK.LINE_NUM
  AND T.SEPCHK      = &CK.Sepchk
  AND T.STATE       NOT IN('$UAS', '$UGU', '$UPR', '$UVI')
end-SELECT
end-procedure


begin-procedure Print-Tax-Hdgs

  if &PT.Country = 'CAN'
     print $Tax018_Province          (+1,1)
     print $Tax018_WagePlan          (0,35)
     print $Tax018_Tax_Type          (0,60)
  else
     print $Tax018_Tax_Entity        (+1,1)
     print $Tax018_Res               (0,35)
     print $Tax018_Tax_Class         (0,60)
     print $Tax018_Tips_Cur          (0, 140)
     print $Tax018_Tips_Delayed      (0, 155)
  end-if
  print $Tax018_Amt               (0, 80)
  print $Tax018_Amt_Not_Taken     (0,93)
  print $Tax018_No_Limit_Gross    (0, 107)
  print $Tax018_Taxable_Gross     (0, 128)
end-procedure


begin-procedure Get-Local-Name-EQ
begin-SELECT loops=1
EQ.LOCALITY_ABBRV,
EQ.EFFDT
FROM PS_LOCAL_TAX_TBL2 EQ
WHERE STATE    = $State
  AND LOCALITY = $Locality
  AND EFFDT    = &CK.Pay_End_Dt
ORDER BY EQ.EFFDT DESC
end-SELECT

 let $Locality_Abbrv = &EQ.LOCALITY_ABBRV

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!
!********** LOCAL_TAX_LANG has been removed per System Test incident HR95632-T00OR *************

!    if $curr_language_cd <> $Psoptions_Language_Cd
!      do Get-Rel-Lang-Localnm
!    end-if

end-procedure


!begin-procedure Get-Rel-Lang-Localnm
!begin-SELECT loops=1
!EQL.LOCALITY_ABBRV,
!EQL.EFFDT
!FROM PS_LOCAL_TAX_LNG EQL
!WHERE EQL.STATE       = $State
!  AND EQL.LOCALITY    = $Locality
!  AND EQL.LANGUAGE_CD = $Curr_language_cd
!  AND EQL.EFFDT       = &CK.Pay_End_Dt
!ORDER BY EQL.EFFDT DESC
!end-SELECT

! if rtrim(&EQL.LOCALITY_ABBRV,' ') <> ''
!    let $Locality_Abbrv = &EQL.LOCALITY_ABBRV
! end-if

!end-procedure


begin-procedure Print-Taxes

  if &PT.Country = 'CAN'
     print $Province        (+1,1)
     print $Wage_Loss_plan  (0,35)
     move 'TAX_CLASS_CAN' to $FieldName
     move $TaxType to $FieldValue
  else
     print $State              (+1,1)
     print $Locality           (0,10)
     print $Locality_Abbrv     (0,20)
     print $Resident           (0,35)
     move 'TAX_CLASS' to $FieldName
     move $TaxClass to $FieldValue
  end-if

  do Read-Translate-Table
  print $XlatShortName      (0,60)
  print $TaxCur             (0,80)   edit 99999999.99
  print $TaxNotTaken        (0,95)   edit 99999999.99
  print $NlGrsCur           (0,110)  edit 99999999.99
  print $TxGrsCur           (0,125)  edit 99999999.99

  if &PT.Country <> 'CAN'
     print $TipsCur         (0,140)  edit 99999999.99
     print $TipsDelayed     (0,155)  edit 99999999.99
  end-if
end-procedure


begin-procedure Get-Prev-Taxes
  print $Tax018_Prev_Tax_Hdg (+3,1)
  do Print-Tax-Hdgs
begin-SELECT
PT.STATE, PT.LOCALITY, PT.TAX_CLASS, PT.RESIDENT, PT.NLGRS_CUR,
PT.TXGRS_CUR, PT.TAX_CUR, PT.TXGRS_AGG, PT.TAX_AGG, PT.TAX_NOT_TAKEN,
PT.PAY_END_DT
PT.TIPS_CUR, PT.TIPS_DELAYED
  move &PT.State to $State
  move &PT.Locality to $Locality
  do Get-Local-Name-LT
  move &PT.Tax_Class     to $TaxClass
  move &PT.Resident      to $Resident
  move &PT.NLGrs_Cur     to $NLGrsCur
  move &PT.TxGrs_Cur     to $TxGrsCur
  move &PT.Tax_Cur       to $TaxCur
  move &PT.Tax_Not_Taken to $TakenNotTaken
  move &PT.Tips_Cur      to $TipsCur
  move &PT.Tips_Delayed  to $TipsDelayed
  do Print-Taxes
FROM PS_PAY_TAX PT, PS_PAY_EARNINGS X
WHERE PT.COMPANY     = X.COMPANY
  AND PT.PAYGROUP    = X.PAYGROUP
  AND PT.PAY_END_DT  = X.PAY_END_DT
  AND PT.OFF_CYCLE   = X.OFF_CYCLE
  AND PT.PAGE_NUM       = X.PAGE_NUM
  AND PT.LINE_NUM       = X.LINE_NUM
  AND PT.SEPCHK      = X.SEPCHK
  AND PT.STATE       NOT IN('$UAS', '$UGU', '$UPR', '$UVI')
  AND X.EMPLID       = $Emplid
  AND PT.OFF_CYCLE   = 'N'
  AND X.ADDL_NBR = 0
  AND PT.PAY_END_DT < &CK.Pay_End_Dt
  AND PT.PAY_END_DT >= $BeginYr
 AND PT.PAY_END_DT =
  (SELECT MAX(PAY_END_DT)
   FROM PS_PAY_EARNINGS
   WHERE COMPANY  = PT.COMPANY
   AND PAYGROUP   = PT.PAYGROUP
   AND PAY_END_DT < &CK.Pay_End_Dt
   AND PAY_END_DT >= $BeginYr
   AND SEPCHK     = PT.SEPCHK
   AND EMPLID     = $Emplid
   AND OFF_CYCLE  = PT.OFF_CYCLE
   AND ADDL_NBR   = 0)
   ORDER BY PT.PAY_END_DT DESC
end-SELECT
end-procedure

begin-procedure Get-Local-Name-LT
begin-SELECT loops=1
LT.LOCALITY_ABBRV,
LT.EFFDT
FROM PS_LOCAL_TAX_TBL2 LT
WHERE LT.STATE    = $State
  AND LT.LOCALITY = $Locality
  AND LT.EFFDT    < &CK.Pay_End_Dt
ORDER BY LT.EFFDT DESC
end-SELECT
  let $Locality_Abbrv = &LT.LOCALITY_ABBRV

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!
!********** LOCAL_TAX_LANG has been removed per System Test incident HR95632-T00OR *************

!    if $curr_language_cd <> $Psoptions_Language_Cd
!       do Get-Rel-Lang-Localnmt
!    end-if

end-procedure


!begin-procedure Get-Rel-Lang-Localnmt
!begin-SELECT loops=1
!LTL.LOCALITY_ABBRV,
!LTL.EFFDT
!FROM PS_LOCAL_TAX_LANG LTL
!WHERE LTL.STATE       = $State
!  AND LTL.LOCALITY    = $Locality
!  AND LTL.LANGUAGE_CD = $Curr_language_cd
!  AND LTL.EFFDT       < &CK.Pay_End_Dt
!ORDER BY LTL.EFFDT DESC
!end-SELECT

! if rtrim(&LTL.LOCALITY_ABBRV,' ') <> ''
!    let $Locality_Abbrv = &LTL.LOCALITY_ABBRV
! end-if

!end-procedure


begin-procedure Get-Can-Taxes
  print $Tax018_Tax_Can_Hdg (+3,1)
  do Print-Tax-Hdgs
begin-SELECT
TC.PROVINCE
TC.TAX_CLASS_CAN
TC.WAGE_LOSS_PLAN
TC.NLGRS_CUR
TC.TXGRS_CUR
TC.TAX_CUR
TC.TAX_NOT_TAKEN

  move &TC.PROVINCE       to $Province
  move &TC.WAGE_LOSS_PLAN to $Wage_loss_Plan
  move &TC.TAX_CLASS_CAN  to $TaxType
  move &TC.NLGrs_Cur      to $NLGrsCur
  move &TC.TxGrs_Cur      to $TxGrsCur
  move &TC.Tax_Cur        to $TaxCur
  move &TC.Tax_Not_Taken  to $TaxNotTaken
  do Print-Taxes
FROM PS_PAY_TAX_CAN TC
WHERE TC.COMPANY     = &CK.Company
  AND TC.PAYGROUP    = &CK.PayGroup
  AND TC.PAY_END_DT  = &CK.Pay_End_Dt
  AND TC.OFF_CYCLE   = &CK.Off_Cycle
  AND TC.PAGE_NUM       = &CK.PAGE_NUM
  AND TC.LINE_NUM       = &CK.LINE_NUM
  AND TC.SEPCHK      = &CK.Sepchk
  AND TC.TAX_CLASS_CAN IN ('CIT','QIT','CPP','QPP','T4A','RV2','PYT','EIE','QIE')
end-SELECT

end-procedure

begin-procedure Get-Prev-Can-Taxes
  print $Tax018_Prev_Tax_Can_Hdg (+3,1)
  do Print-Tax-Hdgs
begin-SELECT
PTC.PROVINCE
PTC.TAX_CLASS_CAN
PTC.WAGE_LOSS_PLAN
PTC.NLGRS_CUR
PTC.TXGRS_CUR
PTC.TAX_CUR
PTC.TAX_NOT_TAKEN
PTC.PAY_END_DT

  move &PTC.PROVINCE       to $Province
  move &PTC.WAGE_LOSS_PLAN to $Wage_loss_Plan
  move &PTC.TAX_CLASS_CAN  to $TaxType
  move &PTC.NLGrs_Cur      to $NLGrsCur
  move &PTC.TxGrs_Cur      to $TxGrsCur
  move &PTC.Tax_Cur        to $TaxCur
  move &PTC.Tax_Not_Taken  to $TaxNotTaken
  do Print-Taxes

FROM PS_PAY_TAX_CAN PTC, PS_PAY_EARNINGS PE
WHERE PTC.COMPANY     = PE.COMPANY
  AND PTC.PAYGROUP    = PE.PAYGROUP
  AND PTC.PAY_END_DT  = PE.PAY_END_DT
  AND PTC.OFF_CYCLE   = PE.OFF_CYCLE
  AND PTC.PAGE_NUM       = PE.PAGE_NUM
  AND PTC.LINE_NUM       = PE.LINE_NUM
  AND PTC.SEPCHK      = PE.SEPCHK
  AND PE.EMPLID       = $Emplid
  AND PTC.TAX_CLASS_CAN IN ('CIT','QIT','CPP','QPP','T4A','RV2','PYT','EIE','QIE')
  AND PTC.OFF_CYCLE   = 'N'
  AND PE.ADDL_NBR = 0
  AND PTC.PAY_END_DT =
  (SELECT MAX(PAY_END_DT)
   FROM PS_PAY_TAX_CAN
   WHERE COMPANY = PTC.COMPANY
   AND PAYGROUP = PTC.PAYGROUP
   AND PAY_END_DT < &CK.Pay_End_Dt
   AND PAY_END_DT >= $BeginYr
   AND OFF_CYCLE = PTC.OFF_CYCLE
   AND PAGE_NUM = PTC.PAGE_NUM
   AND LINE_NUM = PTC.LINE_NUM
   AND SEPCHK = PTC.SEPCHK
   AND PROVINCE = PTC.PROVINCE
   AND WAGE_LOSS_PLAN = PTC.WAGE_LOSS_PLAN
   AND TAX_CLASS_CAN = PTC.TAX_CLASS_CAN)
ORDER BY PTC.PAY_END_DT DESC
end-SELECT
end-procedure

#include 'curdttim.sqc'           !Get-Current-DateTime procedure
#include 'readxlat.sqc'           !Read-Translate-Table procedure
#include 'datetime.sqc'           !Routines for date and time formatting
#include 'stdapi.sqc'             !Update Process API
#include 'payrctl2.sqc'           !Select Run Contrl Parameters
#Include 'sqrtrans.sqc'           !Translate SQR strings to a given language
#Include 'getrplng.sqc'           !Gets the report language
#Include 'getsetid.sqc'           !Gets the Set Id
