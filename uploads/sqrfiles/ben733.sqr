!**********************************************
! BEN733: Base Benefit Audit Report
!**********************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/02/14:11:20:51
!       $Release:  HR9
!    $Resolution:  869145
!                                                                      *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  05/20/2015  RSI-HCM104237  v1.1                                     *
!  Descr: Created new program to synchronize dependent SSN and         *
!         Birthdate validations across all Releases and Tax Updates.   *
!                                                                      *
!  12/05/2015  RSI-HCM105137  v2.0                                     *
!  Descr: Same gender spouse is no longer an audit category	       *
!                                                                      *
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   !Set Database Environment
#Include 'usarpt.sqc'   !Variables specific to USA
#Include 'rsicdver.sqc' !Client Specific PeopleSoft Application Information                                           !RSI-HCM104237

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

!Set report column widths.

#Define col_name                25      !Employee Name
#Define col_emplid              12      !Employee ID
#Define col_benefit_plan         7      !Benefit Plan
#Define col_dep_id               3      !Dependent Beneficiary ID
#Define col_relation             4      !Relationship
#Define col_plan_type            4      !Plan Type
#Define col_EMPL_RCD            4      !Employee Record Number
#Define col_covrg_cd             5      !Coverage Code
#Define col_birthdate           11      !Birthdate
#Define col_sep                  2      !Column Separator
#Define col_benefit_program      4      !Benefit Program
#Define col_effdt               11      !Effective Date
#Define col_cost_id              4      !Cost ID
#Define col_calc_rules           4      !Calculation Rules Table ID
#Define col_mar_sts              3      !Marital Status
#Define col_sex                  3      !Sex
#Define col_mar_sts_dt          11      !Marital Status Date
#Define col_dis                  5      !Disabled Inidicator
#Define col_stu                  4      !Student
#Define col_stu_sts_dt          11      !Student Status Date
#Define Prgm_Ver '2.0'                  !Corresponds to Modification History above.                                    !RSI-HCM105137

!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************
  Show 'BEN733.SQR - Version '  {Prgm_Ver}                                                                             !RSI-HCM105137
  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init

  move 'BEN733' to $ReportID
  do Get-Report-Language
  move $BEN733-REPORTTITLE TO $ReportTitle
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************

! Read from BEN733 program IDS
do Init_Report_Translation($ReportID, $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BEN733', 'REPORT_TITLE',    $BEN733-REPORTTITLE,   #CW)
do Get_Field_Information ('BEN733', 'CALC',            $BEN733-CALC,          #CW)
do Get_Field_Information ('BEN733', 'DEP',             $BEN733-DEP,           #CW)
do Get_Field_Information ('BEN733', 'REL',             $BEN733-REL,           #CW)
do Get_Field_Information ('BEN733', 'SHIP',            $BEN733-SHIP,          #CW)
do Get_Field_Information ('BEN733', 'COVRG',           $BEN733-COVRG,         #CW)
do Get_Field_Information ('BEN733', 'DEP',             $BEN733-DEP,           #CW)
do Get_Field_Information ('BEN733', 'MAR',             $BEN733-MAR,           #CW)
do Get_Field_Information ('BEN733', 'MARITAL',         $BEN733-MARITAL,       #CW)
do Get_Field_Information ('BEN733', 'DIS',             $BEN733-DIS,           #CW)
do Get_Field_Information ('BEN733', 'STU',             $BEN733-STU,           #CW)
do Get_Field_Information ('BEN733', 'STS',             $BEN733-STS,           #CW)
do Get_Field_Information ('BEN733', 'STATUS_DT',       $BEN733-STATUS-DT,     #CW)
do Get_Field_Information ('BEN733', 'ABLED',           $BEN733-ABLED,         #CW)
do Get_Field_Information ('BEN733', 'DENT',            $BEN733-DENT,          #CW)
do Get_Field_Information ('BEN733', 'T01_L01A',        $BEN733-T01-L01A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L02A',        $BEN733-T01-L02A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L03A',        $BEN733-T01-L03A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L04A',        $BEN733-T01-L04A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L05A',        $BEN733-T01-L05A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L06A',        $BEN733-T01-L06A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L07A',        $BEN733-T01-L07A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L08A',        $BEN733-T01-L08A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L09A',        $BEN733-T01-L09A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L10A',        $BEN733-T01-L10A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L11A',        $BEN733-T01-L11A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L12A',        $BEN733-T01-L12A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L13A',        $BEN733-T01-L13A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L14A',        $BEN733-T01-L14A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L15A',        $BEN733-T01-L15A,      #CW)
do Get_Field_Information ('BEN733', 'T01_L16A',        $BEN733-T01-L16A,      #CW)

do Get_Field_Information ('BEN1',   'EMPLOYEE_NAME',   $BEN1-EMPLOYEE-NAME,   #CW)
do Get_Field_Information ('BEN1',   'EMPLOYEE_ID',     $BEN1-EMPLOYEE-ID,     #CW)
do Get_Field_Information ('BEN1',   'EMPLOYEE',        $BEN1-EMPLOYEE,        #CW)
do Get_Field_Information ('BEN1',   'EMPL',            $BEN1-EMPL,            #CW)
do Get_Field_Information ('BEN1',   'PLAN',            $BEN1-PLAN,            #CW)
do Get_Field_Information ('BEN1',   'ID',              $BEN1-ID,              #CW)
do Get_Field_Information ('BEN1',   'RCD_NO',          $BEN1-RCD-NO,          #CW)
do Get_Field_Information ('BEN1',   'TYPE',            $BEN1-TYPE,            #CW)
do Get_Field_Information ('BEN1',   'BENEFIT',         $BEN1-BENEFIT,         #CW)
do Get_Field_Information ('BEN1',   'DEPENDENT',       $BEN1-DEPENDENT,       #CW)
do Get_Field_Information ('BEN1',   'DEPEND_NAME',     $BEN1-DEPENDNAME,      #CW)
do Get_Field_Information ('BEN1',   'CODE',            $BEN1-CODE,            #CW)
do Get_Field_Information ('BEN1',   'STUDENT',         $BEN1-STUDENT,         #CW)
do Get_Field_Information ('BEN1',   'BIRTHDATE',       $BEN1-BIRTHDATE,       #CW)
do Get_Field_Information ('BEN1',   'BEN',             $BEN1-BEN,             #CW)
do Get_Field_Information ('BEN1',   'EFFECTIVE',       $BEN1-EFFECTIVE,       #CW)
do Get_Field_Information ('BEN1',   'COST',            $BEN1-COST,            #CW)
do Get_Field_Information ('BEN1',   'DATE',            $BEN1-DATE,            #CW)
do Get_Field_Information ('BEN1',   'PGM',             $BEN1-PGM,             #CW)
do Get_Field_Information ('BEN1',   'RULE',            $BEN1-RULE,            #CW)
do Get_Field_Information ('BEN1',   'SEX',             $BEN1-SEX,             #CW)

End-Procedure

!***************
Begin-Heading 4
!***************

#Include 'stdhdgtr.sqc' !Standard Headings

End-Heading

!****************************
Begin-Procedure Process-Main
!****************************

  do Get-Employees-Less-Than-16-Years-Old
  do Get-Employees-With-Non-Standard-Dependents
  do Get-Employee-And-Spouse-Both-Electing-Health-Benefits
  do Get-Employees-With-Over-Age-Dependent-Coverage
  do Get-Employees-Married-With-No-Spouses-On-File
  do Get-Employees-Non-Married-With-Spouses-on-File
  do Get-Employees-Whose-Spouse-ExSpouse-Has-Wrong-Marital-Status
 !do Get-Employees-Whose-Spouse-Has-Wrong-Gender                                                                       !RSI-HCM105137
  do Get-Employee-And-dependents-Electing-Health-Benefits-Without-SSN
  do RSI-Validate-Dependent-SSN                                                                                        !RSI-HCM104237
  do RSI-Validate-Dependent-Birthdate                                                                                  !RSI-HCM104237

End-Procedure
                                                                                                                       !RSI-HCM105137 Begin
!**********************************************************
!Removed Procedure Get-Employees-Whose-Spouse-Has-Wrong-Gender
!**********************************************************
                                                                                                                       !RSI-HCM105137 End
!**********************************************************
Begin-Procedure Get-Employees-Whose-Spouse-ExSpouse-Has-Wrong-Marital-Status
!**********************************************************

!*** 'Employees Whose Spouse ExSpouse Has Wrong Marital Status'
  let $SubTitle = $BEN733-T01-L13A
  display $SubTitle
  print $SubTitle                  (+3,1)
  print $BEN1-EMPLOYEE-NAME        (+2,1,{col_name})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN1-EMPLOYEE-NAME        (0,+{col_sep},{col_name})
  print $BEN733-REL                (0,+{col_sep},{col_relation})
  print $BEN733-MAR                (0,+{col_sep},{col_mar_sts})
  print $BEN733-SHIP               (+1,74,{col_relation})
  print $BEN733-STS                (0,80,{col_mar_sts})
  print '-'                        (+1,1,84)  Fill

  let #rcds = 0

Begin-Select
P13.NAME                  (+1,1,{COL_NAME})
P13.EMPLID                (0,+{COL_SEP},{COL_EMPLID})
DPB1.DEPENDENT_BENEF       (0,+{COL_SEP},{COL_DEP_ID})
DPB1.NAME                  (0,+{COL_SEP},{COL_NAME})
DPB1.RELATIONSHIP          (0,+{COL_SEP},{COL_RELATION})
DPB1.MAR_STATUS            (0,+{col_sep},{col_mar_sts})

  add 1 to #rcds

P13.NAME_PSFORMAT

From PS_PERSON_NAME     P13,
     PS_DEPENDENT_BENEF DPB1
Where  P13.EMPLID=DPB1.EMPLID
AND ((DPB1.RELATIONSHIP ='SP' AND DPB1.MAR_STATUS <> 'M' )
OR  (DPB1.RELATIONSHIP ='X' AND DPB1.MAR_STATUS = 'M' ) )
! Restrict to Persons managed by PS Benefits...
And Exists
   (Select 'X'
    From PS_JOB X
    Where X.EMPLID = P13.EMPLID
    And X.BENEFIT_SYSTEM <> 'OT')

Order By P13.NAME_PSFORMAT ASC
End-Select

!*** 'The number of records that met this criteria is '
 print $BEN733-T01-L01A          (+2,1)
 print #rcds    () edit 99999.

End-Procedure

!**********************************************************
Begin-Procedure Get-Employees-Non-Married-With-Spouses-on-File
!**********************************************************

!*** 'Employees (Non Married) With Spouses on File'
  let $SubTitle = $BEN733-T01-L12A
  display $SubTitle
  print $SubTitle                  (+3,1)
  print $BEN1-EMPLOYEE-NAME        (+2,1,{col_name})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print $BEN733-MAR                (0,+{col_sep},{col_mar_sts})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN1-EMPLOYEE-NAME        (0,+{col_sep},{col_name})
  print $BEN733-REL                (0,+{col_sep},{col_relation})
  print $BEN733-STS                (+1,42,{col_mar_sts})
  print $BEN733-SHIP               (0,79,{col_relation})
  print '-'                        (+1,1,82)  Fill

  let #rcds = 0

Begin-Select
P12.NAME                  (+1,1,{COL_NAME})
P12.EMPLID                (0,+{COL_SEP},{COL_EMPLID})
DPB.MAR_STATUS            (0,+{col_sep},{col_mar_sts})
DPB.DEPENDENT_BENEF       (0,+{COL_SEP},{COL_DEP_ID})
DPB.NAME                  (0,+{COL_SEP},{COL_NAME})
DPB.RELATIONSHIP          (0,+{COL_SEP},{COL_RELATION})

  add 1 to #rcds

P12.LAST_NAME_SRCH
P12.FIRST_NAME_SRCH

From PS_PERSONAL_DT_FST P12,
     PS_DEPENDENT_BENEF DPB
Where P12.MAR_STATUS <> 'M'
AND   P12.EMPLID=DPB.EMPLID
AND   RELATIONSHIP ='SP'
! Restrict to Persons managed by PS Benefits...
And Exists
   (Select 'X'
    From PS_JOB X
    Where X.EMPLID = P12.EMPLID
    And X.BENEFIT_SYSTEM <> 'OT')

Order By P12.LAST_NAME_SRCH ASC, P12.FIRST_NAME_SRCH ASC
End-Select

!*** 'The number of records that met this criteria is '
 print $BEN733-T01-L01A          (+2,1)
 print #rcds    () edit 99999.

End-Procedure

!**********************************************************
Begin-Procedure Get-Employees-Married-With-No-Spouses-On-File
!**********************************************************

!*** 'Employees Married who do not have spouses on file'
  let $SubTitle = $BEN733-T01-L11A
  display $SubTitle
  print $SubTitle                  (+3,1)
  print $BEN1-EMPLOYEE-NAME        (+2,1,{col_name})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print '-'                        (+1,1,40)  Fill

  let #rcds = 0

Begin-Select
P11.NAME                  (+1,1,{COL_NAME})
P11.EMPLID                (0,+{COL_SEP},{COL_EMPLID})

  add 1 to #rcds

P11.LAST_NAME_SRCH
P11.FIRST_NAME_SRCH

From PS_PERSONAL_DT_FST  P11
Where P11.MAR_STATUS = 'M'
And   NOT EXISTS (SELECT 'X'
                    From PS_DEPENDENT_BENEF
                   Where EMPLID = P11.EMPLID
                         AND RELATIONSHIP ='SP')
! Restrict to Persons managed by PS Benefits...
And Exists
   (Select 'X'
    From PS_JOB X
    Where X.EMPLID = P11.EMPLID
    And X.BENEFIT_SYSTEM <> 'OT')

And Not Exists
   (Select 'X'
    From PS_JOB X
    Where X.EMPLID = P11.EMPLID
    And X.EMPL_STATUS = 'T'
    And X.EFFDT <= $AsOfToday)

Order By P11.LAST_NAME_SRCH ASC, P11.FIRST_NAME_SRCH ASC
End-Select

!*** 'The number of records that met this criteria is '
 print $BEN733-T01-L01A          (+2,1)
 print #rcds    () edit 99999.

End-Procedure

!****************************************************
Begin-Procedure Get-Employees-Less-Than-16-Years-Old
!****************************************************

!*** 'Employees Less Than 16 Years Old'
  let $SubTitle = $BEN733-T01-L02A
  display $SubTitle
  print $SubTitle                  (+4,1)
  print $BEN1-EMPLOYEE-NAME        (+2,1,{col_name})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print $BEN1-BIRTHDATE            (0,+{col_sep},{col_birthdate})
  print '-'                        (+1,1,50)  Fill

  let #rcds = 0

  do Convert-To-DTU-Date($AsOfToday, $DTU_Reference)
  do DTU-Add-Years($DTU_Reference, -16, $AgeCutoffDate)
  do Convert-From-DTU-Date($AgeCutoffDate, $AgeCutoffDate)

Begin-Select
E.NAME
E.EMPLID
E.BIRTHDATE

  do Convert-To-DTU-Date(&E.Birthdate,$CvtBDay)
  print &E.Name                  (+1,1,{col_name})
  print &E.Emplid                (0,+{col_sep},{col_emplid})
  print &E.BirthDate             (0,+{col_sep},{col_birthdate})
  add 1 to #rcds

E.LAST_NAME_SRCH
E.FIRST_NAME_SRCH

From  PS_PERSONAL_DT_FST E
Where E.BIRTHDATE IS NOT NULL
And E.BIRTHDATE > $AgeCutoffDate
! Restrict to Persons managed by PS Benefits...
And Exists
   (Select 'X'
    From PS_JOB X
    Where X.EMPLID = E.EMPLID
    And X.BENEFIT_SYSTEM <> 'OT')

Order By E.LAST_NAME_SRCH ASC, E.FIRST_NAME_SRCH ASC,
         E.EMPLID ASC
End-Select

!*** 'The number of employees that met this criteria is '
  print  $BEN733-T01-L03A          (+2,1)
  print  #rcds  ()  edit 99999.

End-Procedure

!***********************************************************************
! The purpose of this procedure is to identify employees with unusual
! dependents (i.e., not a son, daughter, father, or mother) enrolled
! in a health plan.
!***********************************************************************

!**********************************************************
Begin-Procedure Get-Employees-With-Non-Standard-Dependents
!**********************************************************

!*** 'People With Unusual Dependents Signed Up For Coverage'
  let $Subtitle = $BEN733-T01-L04A
  display $SubTitle
  print $SubTitle                  (+4,1)
  print $BEN1-EMPLOYEE             (+2,1,{col_emplid})
  print $BEN1-EMPL                 (0,+{col_sep},{col_EMPL_RCD})
  print $BEN1-PLAN                 (0,+{col_sep},{col_plan_type})
  print ''                         (0,+{col_sep},{col_benefit_plan})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN733-REL                (0,+{col_sep},{col_relation})
  print $BEN1-ID                   (+1,1,{col_emplid})
  print $BEN1-RCD-NO               (0,+{col_sep},{col_EMPL_RCD})
  print $BEN1-TYPE                 (0,+{col_sep},{col_plan_type})
  print $BEN1-PLAN                 (0,+{col_sep},{col_benefit_plan})
  print $BEN1-ID                   (0,+{col_sep},{col_dep_id})
  print $BEN733-SHIP               (0,+{col_sep},{col_relation})
  print '-'                        (+1,1,45)  Fill

  let #rcds = 0

Begin-Select
F.EMPLID                        (+1,1,{COL_EMPLID})
F.EMPL_RCD                      (0,+{COL_SEP},{COL_EMPL_RCD})
F.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
F.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
I.DEPENDENT_BENEF               (0,+{COL_SEP},{COL_DEP_ID})
I.RELATIONSHIP                  (0,+{COL_SEP},{COL_RELATION})
G.NAME

  add 1 to #rcds

G.NAME_PSFORMAT

From  PS_HEALTH_BENEFIT  F,
      PS_PERSON_NAME     G,
      PS_HEALTH_DEPENDNT H,
      PS_DEPENDENT_BENEF I

Where  F.EFFDT = (SELECT MAX(EFFDT)
                    FROM PS_HEALTH_BENEFIT
                   WHERE EMPLID         = F.EMPLID
                     AND COBRA_EVENT_ID = F.COBRA_EVENT_ID
                     AND EMPL_RCD       = F.EMPL_RCD
                     AND PLAN_TYPE      = F.PLAN_TYPE
                     AND BENEFIT_NBR    = F.BENEFIT_NBR
                     AND EFFDT         <= $AsOfToday)
  AND  F.COVERAGE_ELECT  = 'E'
  AND  ((F.COVERAGE_END_DT IS NULL) OR (F.COVERAGE_END_DT > $AsOfToday))
  AND  G.EMPLID          = F.EMPLID
  AND  H.EMPLID          = F.EMPLID
  AND  H.COBRA_EVENT_ID  = F.COBRA_EVENT_ID
  AND  H.EMPL_RCD        = F.EMPL_RCD
  AND  H.PLAN_TYPE       = F.PLAN_TYPE
  AND  H.BENEFIT_NBR     = F.BENEFIT_NBR
  AND  H.EFFDT           = F.EFFDT
  AND  I.EMPLID          = F.EMPLID
  AND  I.DEPENDENT_BENEF = H.DEPENDENT_BENEF
  AND  I.RELATIONSHIP NOT IN
        (SELECT RELATIONSHIP FROM PS_DEPBEN_TYPE_TBL)

ORDER BY G.NAME_PSFORMAT ASC,
         F.PLAN_TYPE ASC
End-Select

!*** 'The number of records that met this criteria is '
 print $ben733-T01-L01A      (+2,1)
 print #rcds    () edit 99999.

End-Procedure

!*************************************************************************
! The purpose of this procedure is to identify occurrences of employee   *
! and spouse (or other dependent) both working at the same company and   *
! both electing (i.e., not Waving) health coverage in the same Plan Type *
! and the dependent is covered by the employee.                          *
!                                                                        *
! Note: SSN must be entered for dependent on Personal Data and           *
! corresponding Dependent Benef records.                                 *
!*************************************************************************

!*********************************************************************
Begin-Procedure Get-Employee-And-Spouse-Both-Electing-Health-Benefits
!*********************************************************************

!*** 'Employee and Spouse (or Other Dependent) Both Electing Health Benefits'
  let $SubTitle = $ben733-T01-L05A
  display $SubTitle
  print $SubTitle                  (+4,1)
  print $BEN1-EMPLOYEE             (+2,1,{col_emplid})
  print $BEN1-PLAN                 (0,+{col_sep},{col_plan_type})
  print $BEN1-BENEFIT              (0,+{col_sep},{col_benefit_plan})
  print $BEN733-COVRG              (0,+{col_sep},{col_covrg_cd})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN1-DEPENDENT            (0,+{col_sep},{col_emplid})
  print $BEN1-ID                   (+1,1,{col_emplid})
  print $BEN1-TYPE                 (0,+{col_sep},{col_plan_type})
  print $BEN1-PLAN                 (0,+{col_sep},{col_benefit_plan})
  print $BEN1-CODE                 (0,+{col_sep},{col_covrg_cd})
  print $BEN1-ID                   (0,+{col_sep},{col_dep_id})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print '-'                        (+1,1,54)  Fill

  let #rcds = 0

Begin-Select
N.EMPLID                        (+1,1,{COL_EMPLID})
K.NAME
K.NAME_PSFORMAT
N.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
N.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
N.COVRG_CD                      (0,+{COL_SEP},{COL_COVRG_CD})
ND.DEPENDENT_BENEF              (0,+{COL_SEP},{COL_DEP_ID})
J.EMPLID                        (0,+{COL_SEP},{COL_EMPLID})

  add 1 to #rcds

FROM PS_HEALTH_BENEFIT  J,
     PS_PERSON_NAME     K,
     PS_PERS_NID        MN,
     PS_DEP_BENEF_NID   LN,
     PS_HEALTH_BENEFIT  N,
     PS_HEALTH_DEPENDNT ND
WHERE J.COVERAGE_ELECT = 'E'
AND J.EFFDT =
    (SELECT MAX(X.EFFDT)
       FROM PS_HEALTH_BENEFIT X
      WHERE X.EMPLID         = J.EMPLID
        AND X.EMPL_RCD       = J.EMPL_RCD
        AND X.COBRA_EVENT_ID = J.COBRA_EVENT_ID
        AND X.PLAN_TYPE      = J.PLAN_TYPE
        AND X.BENEFIT_NBR    = J.BENEFIT_NBR
        AND X.EFFDT         <= $AsOfToday)
AND (J.COVERAGE_END_DT IS NULL OR J.COVERAGE_END_DT > $AsOfToday)
AND MN.EMPLID        = J.EMPLID
AND MN.COUNTRY       = {NID_COUNTRY}
AND MN.PRIMARY_NID   = 'Y'
AND MN.NATIONAL_ID   <> ' '
AND MN.NATIONAL_ID   <> '999999999'
AND LN.COUNTRY       = MN.COUNTRY
AND LN.PRIMARY_NID   = MN.PRIMARY_NID
AND LN.NATIONAL_ID   = MN.NATIONAL_ID
AND N.EMPLID         = LN.EMPLID
AND N.PLAN_TYPE      = J.PLAN_TYPE
AND N.COVERAGE_ELECT = 'E'
AND N.EFFDT =
    (SELECT MAX(X.EFFDT)
       FROM PS_HEALTH_BENEFIT X
      WHERE X.EMPLID         = N.EMPLID
        AND X.EMPL_RCD       = N.EMPL_RCD
        AND X.COBRA_EVENT_ID = N.COBRA_EVENT_ID
        AND X.PLAN_TYPE      = N.PLAN_TYPE
        AND X.BENEFIT_NBR    = N.BENEFIT_NBR
        AND X.EFFDT         <= $AsOfToday)
AND (N.COVERAGE_END_DT IS NULL OR N.COVERAGE_END_DT > $AsOfToday)
AND ND.EMPLID          = N.EMPLID
AND ND.EMPL_RCD        = N.EMPL_RCD
AND ND.COBRA_EVENT_ID  = N.COBRA_EVENT_ID
AND ND.PLAN_TYPE       = N.PLAN_TYPE
AND ND.EFFDT           = N.EFFDT
AND ND.DEPENDENT_BENEF = LN.DEPENDENT_BENEF
AND K.EMPLID = N.EMPLID
ORDER BY K.NAME_PSFORMAT ASC, N.PLAN_TYPE ASC

End-Select

!*** 'The number of records that met this criteria is '
  print $BEN733-T01-L01A        (+2,1)
  print #rcds                   () edit 99999.

End-Procedure

!***************************************************************************
! The purpose of this procedure is to identify employees that are actively *
! enrolled in health benefits with dependent coverage where the dependent  *
! is considered to be overage.  Dependents are considered overage if the   *
! age as of the health plan coverage begin date is greater than or equal   *
! to the limit specified at the benefit program level.  These limits are   *
! specified separately for non-students and students.  In addition, a      *
! handicapped parameter defines whether handicapped dependents should be   *
! considered when determining whether a dependents is overage.  These      *
! limits only apply to dependents with a relationship of son or daughter.  *
!***************************************************************************

!***************************************************************************
Begin-Procedure Get-Employees-With-Over-Age-Dependent-Coverage
!***************************************************************************

!*** 'Employees With Over-Age Dependent Coverage'
  let $SubTitle = $BEN733-T01-L06A
  display $SubTitle
  print $SubTitle                  (+4,1)
  print $BEN1-EMPLOYEE             (+2,1,{col_emplid})
  print $BEN1-PLAN                 (0,+{col_sep},{col_plan_type})
  print $BEN733-COVRG              (0,+{col_sep},{col_covrg_cd})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN733-REL                (0,+{col_sep},{col_relation})
  print $BEN1-DEPENDENT            (0,+{col_sep},{col_birthdate})
  print $BEN733-MAR                (0,+{col_sep},{col_mar_sts})
  print $BEN733-MARITAL            (0,+{col_sep},{col_mar_sts_dt})
  print $BEN733-DIS                (0,+{col_sep},{col_dis})
  print $BEN733-STU                (0,+{col_sep},{col_stu})
  print $BEN1-STUDENT              (0,+{col_sep},{col_stu_sts_dt})
  print $BEN1-ID                   (+1,1,{col_emplid})
  print $BEN1-TYPE                 (0,+{col_sep},{col_plan_type})
  print $BEN1-CODE                 (0,+{col_sep},{col_covrg_cd})
  print $BEN1-ID                   (0,+{col_sep},{col_dep_id})
  print $BEN733-SHIP               (0,+{col_sep},{col_relation})
  print $BEN1-BIRTHDATE            (0,+{col_sep},{col_birthdate})
  print $BEN733-STS                (0,+{col_sep},{col_mar_sts})
  print $BEN733-STATUS-DT          (0,+{col_sep},{col_mar_sts_dt})
  print $BEN733-ABLED              (0,+{col_sep},{col_dis})
  print $BEN733-DENT               (0,+{col_sep},{col_stu})
  print $BEN733-STATUS-DT          (0,+{col_sep},{col_stu_sts_dt})
  print '-'                        (+1,1,93)  Fill

  let #rcds = 0

Begin-Select
P.NAME
P.EMPLID
O.PLAN_TYPE
O.COVRG_CD
O.COVERAGE_BEGIN_DT
Q.DEPENDENT_BENEF
Q.RELATIONSHIP
Q.BIRTHDATE
Q.STUDENT
Q.STUDENT_STATUS_DT
Q.DISABLED
Q.MAR_STATUS
Q.MAR_STATUS_DT
Z.BENEFIT_PROGRAM
Z.EFFDT

  do Get-Dependent-Rule-Info

  do Convert-To-DTU-Date(&Q.Birthdate,$CvtBDay)
  do Convert-To-DTU-Date(&O.Coverage_Begin_Dt,$CvtToday)
  do Dtu-Diff-Years($CvtBDay,$CvtToday,#Age_Yrs)

  if $Excl_Disabled_Age = 'Y' and &Q.Disabled = 'Y'
  else
     if &Q.Student = 'N'
        if #Age_Yrs > #Dep_Age_Limit
           print &P.Emplid                 (+1,1,{col_emplid})
           print &O.Plan_Type              (0,+{col_sep},{col_plan_type})
           print &O.Covrg_Cd               (0,+{col_sep},{col_covrg_cd})
           print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})
           print &Q.Relationship           (0,+{col_sep},{col_relation})
           print &Q.Birthdate              (0,+{col_sep},{col_birthdate})
           print &Q.Mar_Status             (0,+{col_sep},{col_mar_sts})
           print &Q.Mar_Status_Dt          (0,+{col_sep},{col_mar_sts_dt})
           print &Q.Disabled               (0,+{col_sep},{col_dis})
           print &Q.Student                (0,+{col_sep},{col_stu})
           print &Q.Student_Status_Dt      (0,+{col_sep},{col_stu_sts_dt})
           add 1 to #rcds
        end-if
     end-if

     if &Q.Student = 'Y'
        if #Age_Yrs > #Student_Age_Limit
           print &P.Emplid                 (+1,1,{col_emplid})
           print &O.Plan_Type              (0,+{col_sep},{col_plan_type})
           print &O.Covrg_Cd               (0,+{col_sep},{col_covrg_cd})
           print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})
           print &Q.Relationship           (0,+{col_sep},{col_relation})
           print &Q.Birthdate              (0,+{col_sep},{col_birthdate})
           print &Q.Mar_Status             (0,+{col_sep},{col_mar_sts})
           print &Q.Mar_Status_Dt          (0,+{col_sep},{col_mar_sts_dt})
           print &Q.Disabled               (0,+{col_sep},{col_dis})
           print &Q.Student                (0,+{col_sep},{col_stu})
           print &Q.Student_Status_Dt      (0,+{col_sep},{col_stu_sts_dt})
           add 1 to #rcds
        end-if
     end-if
   end-if

P.NAME_PSFORMAT

From PS_HEALTH_BENEFIT  O,
     PS_PERSON_NAME     P,
     PS_DEPENDENT_BENEF Q,
     PS_BEN_PROG_PARTIC Y,
     PS_BEN_DEFN_PGM Z

Where  O.COVERAGE_ELECT = 'E'
  AND  O.EFFDT =
       (SELECT MAX(Z4.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z4
        WHERE  Z4.EMPLID         = O.EMPLID
          AND  Z4.COBRA_EVENT_ID = O.COBRA_EVENT_ID
          AND  Z4.EMPL_RCD       = O.EMPL_RCD
          AND  Z4.PLAN_TYPE      = O.PLAN_TYPE
          AND  Z4.BENEFIT_NBR    = O.BENEFIT_NBR
          AND  Z4.EFFDT         <= $AsOfToday)
  AND  (O.COVERAGE_END_DT IS NULL OR O.COVERAGE_END_DT > $AsOfToday)
  AND  P.EMPLID         = O.EMPLID
  AND  Q.EMPLID         = O.EMPLID
  AND  Y.EMPLID         = O.EMPLID
  AND  Y.COBRA_EVENT_ID = O.COBRA_EVENT_ID
  AND  Y.EMPL_RCD       = O.EMPL_RCD
  AND  Y.EFFDT =
       (SELECT MAX(Z5.EFFDT)
        FROM   PS_BEN_PROG_PARTIC Z5
        WHERE  Z5.EMPLID         = Y.EMPLID
          AND  Z5.COBRA_EVENT_ID = Y.COBRA_EVENT_ID
          AND  Z5.EMPL_RCD       = Y.EMPL_RCD
          AND  Z5.EFFDT         <= $AsOfToday)
  AND  Z.BENEFIT_PROGRAM = Y.BENEFIT_PROGRAM
  AND  Z.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_BEN_DEFN_PGM
        WHERE  BENEFIT_PROGRAM = Z.BENEFIT_PROGRAM
          AND  EFFDT          <= $AsOfToday)
  AND  Q.RELATIONSHIP NOT IN ('SP','NA')
  AND  Q.BIRTHDATE IS NOT NULL
  AND  EXISTS
       (SELECT 'X'
        FROM   PS_HEALTH_DEPENDNT Z6
        WHERE  Z6.EMPLID          = O.EMPLID
          AND  Z6.COBRA_EVENT_ID  = O.COBRA_EVENT_ID
          AND  Z6.EMPL_RCD        = O.EMPL_RCD
          AND  Z6.PLAN_TYPE       = O.PLAN_TYPE
          AND  Z6.BENEFIT_NBR     = O.BENEFIT_NBR
          AND  Z6.EFFDT           = O.EFFDT
          AND  Z6.DEPENDENT_BENEF = Q.DEPENDENT_BENEF)

ORDER BY P.NAME_PSFORMAT ASC,
         O.PLAN_TYPE ASC

End-Select

!*** 'The number of records that met this criteria is '
  print $BEN733-T01-L01A       (+2,1)
  print #rcds   () edit 99999.

End-Procedure

!****************************************
Begin-Procedure Get-Dependent-Rule-Info
!****************************************

  let #Dep_Age_Limit = 99
  let #Student_Age_Limit = 99
  let $Excl_Disabled_Age = 'Y'

Begin-Select
D.DEP_AGE_LIMIT
D.STUDENT_AGE_LIMIT
D.EXCL_DISABLED_AGE

  let #Dep_Age_Limit = &D.DEP_AGE_LIMIT
  let #Student_Age_Limit = &D.STUDENT_AGE_LIMIT
  let $Excl_Disabled_Age = &D.EXCL_DISABLED_AGE

FROM PS_BEN_DEFN_PLAN B, PS_DEP_RULE_TBL D
WHERE B.BENEFIT_PROGRAM = &Z.BENEFIT_PROGRAM
  AND B.EFFDT = &Z.EFFDT
  AND B.PLAN_TYPE = &O.PLAN_TYPE
  AND B.DEP_RULE_ID = D.DEP_RULE_ID
  AND D.EFFDT = (SELECT MAX(D1.EFFDT)
                  FROM PS_DEP_RULE_TBL D1
                 WHERE D1.DEP_RULE_ID = D.DEP_RULE_ID
                   AND D1.EFFDT <= &Z.EFFDT)
End-Select
End-Procedure

!**************************************************************************
Begin-Procedure Get-Employee-And-dependents-Electing-Health-Benefits-Without-SSN
!**************************************************************************

!*** 'Get Employee and Dependents without SSN number'
  let $SubTitle = $BEN733-T01-L16A
  let $EmpDep = ''
  print $SubTitle                  (+3,1)
  print $BEN1-EMPLOYEE-NAME        (+2,1,{col_name})
  print $BEN1-EMPLOYEE-ID          (0,+{col_sep},{col_emplid})
  print $BEN733-DEP                (0,+{col_sep},{col_dep_id})
  print $BEN1-DEPENDNAME           (0,+{col_sep},{col_name})
  print '-'                        (+1,1,84)  Fill

  let $DEPNAME = ''
  let #rcds = 0
  let $prevemplid = ''
  let $prevDepid = ''
  let #rcdsdep = 0

Begin-Select
A.EMPLID           &EMPLID
B.NAME             &EMPNAME
C.NATIONAL_ID      &EMPNID
C.COUNTRY          &EMPCNTY
B.NAME_PSFORMAT    &EMPFMTNAME

  if &EMPLID <> $prevemplid

      If RTRIM(&EMPNID, ' ') = '999999999' or &EMPNID = ' ' or RTRIM(&EMPNID,' ') = '                    '
        print &EMPNAME                            (+1,1,{COL_NAME})
        print &EMPLID                             (0,+{COL_SEP},{COL_EMPLID})
        print  '  '                               (0,+{COL_SEP},{COL_DEP_ID})
        print  '                         '        (0,+{COL_SEP}
        add 1 to #rcds

      end-if

      do Get-Dependents-Electing-Health-Benefits-Without-SSN

      MOVE &EMPLID  TO $prevemplid

 end-if

FROM PS_PERSON          A,
     PS_PERSON_NAME     B,
     PS_PERS_NID        C,
     PS_HEALTH_BENEFIT  D

WHERE D.COVERAGE_ELECT = 'E'
  AND D.EFFDT =
       (SELECT MAX(Z1.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z1
        WHERE  Z1.EMPLID          = D.EMPLID
          AND  Z1.COBRA_EVENT_ID  = D.COBRA_EVENT_ID
          AND  Z1.EMPL_RCD       = D.EMPL_RCD
          AND  Z1.PLAN_TYPE       = D.PLAN_TYPE
          AND  Z1.BENEFIT_NBR        = D.BENEFIT_NBR
          AND  Z1.EFFDT          <= $AsOfToday)
  AND B.EMPLID = A.EMPLID
  AND C.EMPLID = A.EMPLID
  AND D.EMPLID = A.EMPLID
  AND C.COUNTRY = {NID_COUNTRY}

ORDER BY A.EMPLID DESC
End-Select

!*** 'The number of records that met this criteria is '
  print $BEN733-T01-L01A        (+2,1)
  print #rcds                   () edit 99999.

End-Procedure

!**************************************************************************
Begin-Procedure Get-Dependents-Electing-Health-Benefits-Without-SSN
!**************************************************************************

!*** 'Get Dependents elected in Health Benefits without SSN'

  let $prevDepid = ''
  let #rcdsdep = 0

Begin-Select
D.EMPLID             &DEPEMPLID
E.DEPENDENT_BENEF    &DEPID
E.NAME               &DEPSNAME

   IF $prevDepid <> &DEPID
     do Get-check-Dependents-Without-SSN
      if #rcdsdep = 0 or #rcdsdep = 1
         print &EMPNAME                            (+1,1,{COL_NAME})
         print &EMPLID                             (0,+{COL_SEP},{COL_EMPLID})
         print &DEPID                              (0,+{COL_SEP},{COL_DEP_ID})
         move &DEPSNAME to $DEPSNAME
         print $DEPSNAME                           (0,+{COL_SEP},{COL_NAME})
         add 1 to #rcds
       end-if
     end-if

 MOVE &DEPID  TO $prevDepid

FROM PS_HEALTH_BENEFIT  D,
     PS_DEPENDENT_BENEF E,
     PS_HEALTH_DEPENDNT  G

WHERE D.COVERAGE_ELECT = 'E'
  AND D.EFFDT =
       (SELECT MAX(Z1.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z1
        WHERE  Z1.EMPLID          = D.EMPLID
          AND  Z1.COBRA_EVENT_ID  = D.COBRA_EVENT_ID
          AND  Z1.EMPL_RCD       = D.EMPL_RCD
          AND  Z1.PLAN_TYPE       = D.PLAN_TYPE
          AND  Z1.BENEFIT_NBR        = D.BENEFIT_NBR
          AND  Z1.EFFDT          <= $AsOfToday)

  AND D.EMPLID = E.EMPLID
  AND D.EMPLID = &EMPLID
  AND G.DEPENDENT_BENEF = E.DEPENDENT_BENEF
  AND G.EMPLID = D.EMPLID
  AND G.EMPL_RCD = D.EMPL_RCD
  AND G.COBRA_EVENT_ID = D.COBRA_EVENT_ID
  AND G.PLAN_TYPE = D.PLAN_TYPE
  AND G.BENEFIT_NBR = D.BENEFIT_NBR
  AND G.EFFDT = D.EFFDT

ORDER BY D.EMPLID DESC, G.DEPENDENT_BENEF ASC
End-Select

End-Procedure

!**************************************************************************
Begin-Procedure Get-check-Dependents-Without-SSN
!**************************************************************************

!*** 'Check for Dependent without SSN'

  let #rcdsdep = 0

Begin-Select
NN.EMPLID
NN.DEPENDENT_BENEF
NN.NATIONAL_ID

     If RTRIM(&NN.NATIONAL_ID, ' ') ='XXXXXXXXX' or &NN.NATIONAL_ID = ' ' or &NN.NATIONAL_ID = '                    '
       add  1 to #rcdsdep
     else
       move 2 to #rcdsdep
     end-if

FROM PS_DEP_BENEF_NID NN

WHERE NN.EMPLID = &EMPLID
  AND NN.DEPENDENT_BENEF = &DEPID
  AND NN.COUNTRY = {NID_COUNTRY}

ORDER BY NN.EMPLID DESC
End-Select

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime
#Include 'datemath.sqc'  !Convert to DTU procedure

#Include 'stdapi.sqc'    !Update Process API

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'rsibn733.sqc'  !Ben733 SSN and Bday validation procedures                                                     !RSI-HCM104237

!******************************* End of Report ******************
