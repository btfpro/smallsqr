!******************************************
!  PAY058: BOND PURCHASE SUSPENSIONS      *
!******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2008 Oracle. All Rights Reserved.                    *
!----------------------------------------------------------------------
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
!                                                                      *
!                                                                      *
!***********************************************************************
!
!          $Date:  2008/12/12:09:59:02                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  766553                                              !
!                                                                      *
!***********************************************************************
!***********************************************************************
! Function:                                                            *
!  This report selects all employees who have bond log items that are  *
!  suspended due to going over the annual limit.  The report can be    *
!  for all employee or specified employees.  The report can also be    *
!  run a just a listing of the bond that are suspended or included all *
!  prior bonds purchased leading up to the suspension.                 *
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'                  ! Set environment
#Include 'setup31.sqc'                 ! Init printer and page size
#Include 'usarpt.sqc'                  !Get USA variables

BEGIN-REPORT                           ! SQR BEGIN Statement

  DO INIT-REPORT                       ! Start the SQR
  DO RESET
  DO STDAPI-TERM                       ! End the SQR

END-REPORT                             ! SQR END Statement

! *******************************************************************
!    DEFINE COLUMNS                                                 *
! *******************************************************************

#DEFINE COL01_EMPLID            001     ! Column #01 - Employee ID
#DEFINE COL02_NAME              014     ! Column #02 - Employee Name
#DEFINE COL03_CHEQUE            046     ! Column #03 - Cheque
#DEFINE COL03_DATE              047     ! Column #03 - Date
#DEFINE COL04_BND_NAME          060     ! Column #04 - Bond Owner Name
#DEFINE COL05_SSN               093     ! Column #05 - Bond Owner SSN
#DEFINE COL06_BOND              107     ! Column #06 - Bond ID
#DEFINE COL06_ID                107     ! Column #06 - Bond ID
#DEFINE COL07_AMOUNT            120     ! Column #07 - Amount Purchased
#DEFINE COL07_PURCHASED         117     ! Column #07 - Amount Purchased
#DEFINE COL07_DETAIL            114     ! Column #07 - Amount Purchased



BEGIN-PROCEDURE INIT-REPORT

  MOVE 'PAY058' TO $REPORTID

  DO INIT-DATETIME                     ! Perform Date/Time Proc
  DO INIT-NUMBER                       ! Initialize Number
  DO STDAPI-INIT                       ! Standard Initialize


begin-select

RC_PAY058.TOTALS_ONLY
RC_PAY058.REG_SELECT_PROC
FROM  PS_RC_PAY058 RC_PAY058
WHERE RC_PAY058.OPRID          = $Prcs_OprID
AND   RC_PAY058.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

  let $RC_PAY058.Totals_only       = RTRIM(&RC_PAY058.TOTALS_ONLY, ' ')
  let $RC_PAY058.Reg_Select_Proc   = RTRIM(&RC_PAY058.REG_SELECT_PROC, ' ')

  DO GET-REPORT-LANGUAGE               ! Procedure that decides the report language
                                       ! and then calls 'Report-Translation' procedure
  DISPLAY $ReportId
  DISPLAY $ReportTitle

  DO GET-CURRENT-DATETIME              ! Get source database information
  DO PAYROLL-REPORT-INITIALIZATION

END-PROCEDURE                          ! End the Init Procedure



! *******************************************************************
!    Paragraph Begin:  REPORT-TRANSLATION                           *
!    This procedure is used to read language-dependent text from    *
!    the database                                                   *
! *******************************************************************

BEGIN-PROCEDURE REPORT-TRANSLATION
! Read from PAY058 program id

  DO INIT_REPORT_TRANSLATION($ReportID,$language_cd)
  DO GET_FIELD_INFORMATION('PAY058', 'CHEQUE',          $PAY058_Cheque,         #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'DATE',            $PAY058_Date,           #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'EMPLID',          $PAY058_Emplid,         #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'NAME',            $PAY058_Name,           #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'BND_NAME',        $PAY058_Bnd_Owner,      #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'SSN',             $PAY058_SSN,            #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'BOND',            $PAY058_Bond,           #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'ID',              $PAY058_ID,             #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'AMOUNT',          $PAY058_Amount,         #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'PURCHASED',       $PAY058_Purchased,      #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'LIMIT_TXT',       $PAY058_Limit_Txt,      #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'PAY058_TITLE',    $PAY058_Title,          #DW)
  DO GET_FIELD_INFORMATION('PAY058', 'NO_DATA',         $PAY058_No_Data,        #DW)
  move $PAY058_Title to $ReportTitle
  display  $ReportTitle

END-PROCEDURE           ! End procedure Report-Translation



BEGIN-HEADING 6

#Include 'stdhdg02.sqc'


   PRINT $PAY058_Cheque          (+3,{COL03_CHEQUE},)
   PRINT $PAY058_Bond            (0, {COL06_BOND},)
   PRINT $PAY058_Amount          (0, {COL07_AMOUNT},)
   PRINT $PAY058_Emplid          (+1,{COL01_EMPLID},)
   PRINT $PAY058_Name            (0, {COL02_NAME},)
   PRINT $PAY058_Date            (0, {COL03_DATE},)
   PRINT $PAY058_Bnd_Owner       (0, {COL04_BND_NAME},)
   PRINT $PAY058_SSN             (0, {COL05_SSN},)
   PRINT $PAY058_ID              (0, {COL06_ID},)
   PRINT $PAY058_Purchased       (0, {COL07_PURCHASED},)

END-HEADING



! *******************************************************************
! *  REPORT                                                         *
! *  This is the main paragraph of the SQR.                         *
! *******************************************************************

BEGIN-PROCEDURE REPORT

  move 'N' to $Bond_Purchase

begin-SELECT
A.COMPANY
A.PAY_END_DT
A.PAYGROUP
B.DEPTID
B.NAME
B.EMPLID
B.SSN
B.PAGE_NUM
B.LINE_NUM
B.SEPCHK
D.BOND_ID
D.BOND_OWNER_ID
D.BOND_OTH_REG_TYPE
D.BOND_OTH_REG_ID
D.BOND_PURCH_UNITS
D.BOND_DISBURSE_AMT
D.CHECK_DT  &Check-Dt
I1.NATIONAL_ID

   do Bond-Purchase
   if  $RC_PAY058.Totals_only = 'N'
       do Print-Details
   else
       move ' ' to $PAY058_Amount
       move ' ' to $PAY058_Purchased
   end-if

FROM  PS_PAY_CALENDAR    A,
      PS_PAY_CHECK       B,
      PS_BOND_LOG        D,
      PS_PER_ORG_ASGN_VW I,
      PS_PERS_NID        I1
WHERE D.BOND_LOG_SEQ = (SELECT MAX(D1.BOND_LOG_SEQ)
                        FROM PS_BOND_LOG D1
                        WHERE D1.EMPLID            = D.EMPLID
                        AND   D1.BOND_ID           = D.BOND_ID
                        AND   D1.BOND_OWNER_ID     = D.BOND_OWNER_ID
                        AND   D1.BOND_OTH_REG_TYPE = D.BOND_OTH_REG_TYPE
                        AND   D1.BOND_OTH_REG_ID   = D.BOND_OTH_REG_ID)
  AND D.BOND_LOG_STATUS   = 'S'  !Suspended
  AND D.REVERSED          = 'N'  !Bond Reversal
  AND B.CHECK_DT          = D.CHECK_DT
  AND B.PAYCHECK_NBR      = D.PAYCHECK_NBR
  AND B.FORM_ID           = D.FORM_ID
  AND B.EMPLID            = D.EMPLID
  AND A.COMPANY           = B.COMPANY
  AND A.PAYGROUP          = B.PAYGROUP
  AND A.PAY_END_DT        = B.PAY_END_DT
  AND I.EMPLID            = B.EMPLID
  AND I.EMPL_RCD          = B.EMPL_RCD
  AND I.EMPLID            = I1.EMPLID
  AND I1.COUNTRY          = {NID_COUNTRY}
  AND I1.NATIONAL_ID_TYPE = $PAYROLL_NID_TYPE
  AND I.PER_ORG           = 'EMP'
  AND (('R'               = &RC_PAY058.REG_SELECT_PROC) or
       (D.EMPLID IN (SELECT SEL.SELECTED_EE
                    FROM PS_RC_PAY058_EES SEL
                    WHERE SEL.OPRID       = $Prcs_OprID
                    AND   SEL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID)))

ORDER BY A.COMPANY,
         D.BOND_ID,
         B.EMPLID,
         B.NAME
end-SELECT

  if $Bond_Purchase = 'N'
      print $PAY058_No_Data         (+2,{COL02_NAME},)
  end-if

  move 'Y' to $End_of_Report  !for Reset's begin-footing



END-PROCEDURE   ! End procedure Report


begin-procedure Bond-Purchase

  move 'Y' to $Bond_Purchase

  move &A.Company         to $Company

  do Print-Bond-Data

end-procedure




begin-procedure Print-Bond-Data

 print &B.EMPLID                 (+2,{COL01_EMPLID},)
 print &B.NAME                   (0, {COL02_NAME},)
  if &D.Bond_Owner_ID = 'EE'  !Employee
    move &B.Name              to $Name
    move &I1.NATIONAL_ID       to $SSN
  else
    move &D.Bond_Owner_ID     to $DepBen
    do Get-Dependent-Benef
  end-if


  move $Name                  to $OwnerName
  move $SSN                   to $OwnerSSN
  do Rotate-Name
  do Format-DateTime(&Check-Dt, $out, {DEFDATE}, '', '')
  print $out                   (0, {COL03_CHEQUE},)
  print $Name                  (0, {COL04_BND_NAME},)
  print $SSN                   (0, {COL05_SSN},)  edit xxx-xx-xxxx
  print &D.BOND_ID             (0, {COL06_ID},)  edit xxx


end-procedure


begin-procedure Get-Dependent-Benef

  move ''    to $Name
  move ' '   to $SSN

begin-SELECT
H.NAME
  move &H.Name          to $Name
FROM  PS_DEPENDENT_BENEF H
WHERE H.EMPLID           = &B.EmplID
  AND H.DEPENDENT_BENEF  = $DepBen


end-SELECT

begin-SELECT
HN.NATIONAL_ID
  move &HN.NATIONAL_ID  to $SSN
FROM  PS_DEP_BENEF_NID HN
WHERE HN.EMPLID           = &B.EmplID
  AND HN.DEPENDENT_BENEF  = $DepBen
end-SELECT

end-procedure


begin-procedure Print-Details

  let $Series-Check =  SUBSTR(&D.BOND_ID,1,1)

  evaluate $Series-Check
    when = '0'
    when = '1'
    when = '2'
    when = '3'
    when = '4'
    when = '5'
    when = '6'
    when = '7'
    when = '8'
    when = '9'
      do Print-Details-Series-EE

    when = 'I'
      do Print-Details-Series-I

  end-evaluate
end-procedure


begin-procedure Print-Details-Series-EE

  do Format-DateTime(&Check-Dt, $out, {DEFCMP},'','')
  do Year-Beg-Date($out, $BeginYr)
  do Year-End-Date($out, $EndYr)
  move $PAY058_Limit_Txt to $Detail_Txt
begin-SELECT
EE.CHECK_DT
EE.BOND_ID
EE.BOND_DISBURSE_AMT

  let $Series-Type =  SUBSTR(&EE.BOND_ID,1,1)

  evaluate $Series-Type
    when = '0'
    when = '1'
    when = '2'
    when = '3'
    when = '4'
    when = '5'
    when = '6'
    when = '7'
    when = '8'
    when = '9'
      do Format-DateTime(&EE.CHECK_DT, $out, {DEFDATE}, '', '')
      print $Detail_Txt            (+1,{COL02_NAME},)
      print $out                   (0, {COL03_CHEQUE},)
      print &EE.BOND_ID            (0, {COL06_ID},)  edit xxx
      print &EE.BOND_DISBURSE_AMT  (0, {COL07_DETAIL},)  edit $,$$$,$$9.00mi
      move ' ' to $Detail_Txt

  end-evaluate
FROM PS_BOND_LOG EE
WHERE EE.EMPLID = &B.EMPLID
AND EE.BOND_OWNER_ID = &D.BOND_OWNER_ID
AND EE.CHECK_DT >= $BeginYr
AND EE.CHECK_DT <= $EndYr
AND EE.BOND_LOG_STATUS IN ('D','R')
AND EE.BOND_DISBURSE_AMT <> 0
end-select



end-procedure


begin-procedure Print-Details-Series-I

  do Format-DateTime(&Check-Dt, $out, {DEFCMP},'','')
  do Year-Beg-Date($out, $BeginYr)
  do Year-End-Date($out, $EndYr)
  move $PAY058_Limit_Txt to $Detail_Txt
begin-SELECT
I.CHECK_DT
I.BOND_ID
I.BOND_DISBURSE_AMT

  let $Series-Type =  SUBSTR(&I.BOND_ID,1,1)

  evaluate $Series-Type
    when = 'I'
      do Format-DateTime(&I.CHECK_DT, $out, {DEFDATE}, '', '')
      print $Detail_Txt            (+1,{COL02_NAME},)
      print $out                   (0, {COL03_CHEQUE},)
      print &I.BOND_ID             (0, {COL06_ID},)  edit xxx
      print &I.BOND_DISBURSE_AMT   (0, {COL07_DETAIL},)  edit $,$$$,$$9.00mi
      move ' ' to $Detail_Txt

  end-evaluate
FROM PS_BOND_LOG I
WHERE I.EMPLID = &B.EMPLID
AND I.BOND_OWNER_ID = &D.BOND_OWNER_ID
AND I.CHECK_DT >= $BeginYr
AND I.CHECK_DT <= $EndYr
AND I.BOND_LOG_STATUS IN ('D','R')
AND I.BOND_DISBURSE_AMT <> 0
end-select




end-procedure

begin-procedure Year-Beg-Date ($date_in, :$date_out)
 do Get-DateComponents($date_in, #year, #month, #day)
 let $begin_date = to_char(#year)||'0101'
 do Format-DateTime($begin_date, $date_out, {DEFCMP},'','native')
end-procedure Year-Beg-Date

begin-procedure Year-End-Date ($date_in, :$date_out)
 do Get-DateComponents($date_in, #year, #month, #day)
 let $End_date = to_char(#year)||'1231'
 do Format-DateTime($End_date, $date_out, {DEFCMP},'','native')
end-procedure Year-Beg-Date


! *******************************************************************
! *  Include Section                                                *
! *******************************************************************
#Include 'stdapi.sqc'    ! Standard API Procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'number.sqc'    ! Routines to format numbers
#Include 'getcodta.sqc'  ! Get-Company-Data procedure
#Include 'payinit.sqc'   ! Report Initialization and Timing
#Include 'payrnctl.sqc'  ! Get-Run-Control procedure
#Include 'reset.sqc'     ! Reset printer procedure
#Include 'sqrtrans.sqc'  ! Translate SQR strings to a given language
#Include 'getrplng.sqc'  ! Gets the report language
#Include 'readxlat.sqc'  ! Routine to read the Translate Table
#Include 'rotname1.sqc'  !Rotate-Name procedure

! *******************************************************************
!                   <<<   END OF FILE   >>>
! *******************************************************************
