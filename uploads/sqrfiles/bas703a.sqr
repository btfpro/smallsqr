!***********************************************************************
! BAS703A: Eligibility Rules - Benefits Administration
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:08:36:54                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set environment

Begin-Setup
  #Include 'ptpsl177.sqc'
End-Setup


#define  MAX_LINES   56     !Maximum print lines for landscape mode

#define col_sep                  1   !Column Separator
#define col_sep1                 1   !Column Separator
#define col_sep2                 2   !Column Separator

#define col_eligible             9   !Eligibile/Ineligible position
#define len_eligible            10   !length of Eligibile/Ineligible

#define col_grp_mthd            10   !length of Group Method
#define col_eval_mthd           10   !length of Evaluation Method
#define col_eval_actv           10   !length of Evaluate Active Jobs Only

#define col_min_max             12   !length of Min/Max concatenated data
#define col_min_max2            20   !length of Min/Max concatenated data

#define col_field_desc          21   !Field Description position
#define len_field_desc          21   !Field Description length

#define col_field_data          77   !Start of data position
#define col_methods             42   !Start of Group/Eval Methods
#define len_xlat                16   !length of Xlat Short Name        10
#define len_grade               16   !length of Set ID/Sal Plan/Grade  13
#define len_locn                16   !length of Set ID/Location        16
#define len_pygrp               16   !length of Company/Pay Group       7
#define len_regn                16   !length of Reg Region              5
#define len_state               16   !length of Country/state           6
#define len_union               16   !length of Union Code              3
#define len_FEHB                16   !length of FEHB                    3
#define len_retire              16   !length of Retire Plan             1

#define col_rule_id              4   !Rule ID length
#define col_eff_dt              10   !Effective Date length
#define col_short_descr         11   !Short Description length
#define col_std_hour            11   !Std-Hours Min Max length
#define col_comb_job_hrs         7   !Combine Job Hrs length
#define col_svc_mos              7   !Svc-Mos Min Max length
#define col_serv_as_of_dt       18   !Service-As-of-Date length
#define col_age_yrs              7   !Age-Yrs length
#define col_age_as_of_dt        18   !Age-As-of-Date length


!**********************************
Begin-Program
!**********************************

  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Audit-Tables
  do Process-Main

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Program

!**********************************
Begin-Procedure Init-Report
!**********************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number
  do StdAPI-Init

  let $ReportID    = 'BAS703A'
  do Get-Report-Language
  move $BAS703A-REPORTTITLE TO $ReportTitle
  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  let #MaxCol        = {ColR} + 14

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!***************************************
Begin-Procedure Ask-Values
!***************************************

  do Ask-As-Of-Date
  !We will need to manipulate $AsOfDate to control other std procedures such
  !as Read-Translate-Table, Get-Benefit-Name, and Get-Deduction-Name.
  !Therefore we will copy this into $UserAsOfDate for safekeeping...
  let $UserAsOfDate = $AsOfDate

  do Ask-Elig-Rules

End-Procedure

!***************************************
Begin-Procedure Get-Values
!***************************************

  do Select-Parameters
  do Get-As-Of-Date
  let $UserAsOfDate = $AsOfDate

  do Get-Elig-Rules

End-Procedure

!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS703A program IDS
do Init_Report_Translation($ReportID, $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS703A', 'REPORT_TITLE',   $BAS703A-REPORTTITLE,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_RULE_DEF',  $BAS703A-ELIG-RULE-DEF,  #CW)
do Get_Field_Information ('BAS703A', 'SHORT',          $BAS703A-SHORT,          #CW)
do Get_Field_Information ('BAS703A', 'ELIG_FIELD_VALUES',$BAS703A-ELIG-FIELD-VALUES,#CW)
do Get_Field_Information ('BAS703A', 'STD_HOURS',      $BAS703A-STD-HOURS,      #CW)
do Get_Field_Information ('BAS703A', 'COMBINE',        $BAS703A-COMBINE,        #CW)
do Get_Field_Information ('BAS703A', 'AS_OF',          $BAS703A-AS-OF,          #CW)
do Get_Field_Information ('BAS703A', 'SVC_MOS',        $BAS703A-SVC-MOS,        #CW)
do Get_Field_Information ('BAS703A', 'SVC_AS_OF_DT',   $BAS703A-SVC-AS-OF-DT,   #CW)
do Get_Field_Information ('BAS703A', 'AGE_YRS',        $BAS703A-AGE-YRS,        #CW)
do Get_Field_Information ('BAS703A', 'AGE_AS_OF_DT',   $BAS703A-AGE-AS-OF-DT,   #CW)
do Get_Field_Information ('BAS703A', 'MIN_MAX1',       $BAS703A-MIN-MAX1,       #CW)
do Get_Field_Information ('BAS703A', 'MIN_MAX2',       $BAS703A-MIN-MAX2,       #CW)
do Get_Field_Information ('BAS703A', 'DATE_CD_MM_DD',  $BAS703A-DATE-CD-MM-DD,  #CW)
do Get_Field_Information ('BAS703A', 'JOB_HRS',        $BAS703A-JOB-HRS,        #CW)
do Get_Field_Information ('BAS703A', 'ELIG_BNSTAT',    $BAS703A-ELIG-BNSTAT,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_EECLAS',    $BAS703A-ELIG-EECLAS,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_EETYPE',    $BAS703A-ELIG-EETYPE,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_FLPART',    $BAS703A-ELIG-FLPART,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_FLSA',      $BAS703A-ELIG-FLSA,      #CW)
do Get_Field_Information ('BAS703A', 'ELIG_GRADE',     $BAS703A-ELIG-GRADE,     #CW)
do Get_Field_Information ('BAS703A', 'ELIG_LOCN',      $BAS703A-ELIG-LOCN,      #CW)
do Get_Field_Information ('BAS703A', 'ELIG_OFFICR',    $BAS703A-ELIG-OFFICR,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_PYGRP',     $BAS703A-ELIG-PYGRP,     #CW)
do Get_Field_Information ('BAS703A', 'ELIG_REGN',      $BAS703A-ELIG-REGN,      #CW)
do Get_Field_Information ('BAS703A', 'ELIG_REGTMP',    $BAS703A-ELIG-REGTMP,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_STATEH',    $BAS703A-ELIG-STATEH,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_STATEL',    $BAS703A-ELIG-STATEL,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_STATEB',    $BAS703A-ELIG-STATEB,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_STATEE',    $BAS703A-ELIG-STATEE,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_UNION',     $BAS703A-ELIG-UNION,     #CW)
do Get_Field_Information ('BAS703A', 'GVT_ELIG_FEHB',  $BAS703A-GVT-ELIG-FEHB,  #CW)
do Get_Field_Information ('BAS703A', 'GVT_RETIRE_PLAN',$BAS703A-GVT-RETIRE-PLAN,#CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG1',    $BAS703A-ELIG-CNFIG1,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG2',    $BAS703A-ELIG-CNFIG2,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG3',    $BAS703A-ELIG-CNFIG3,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG4',    $BAS703A-ELIG-CNFIG4,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG5',    $BAS703A-ELIG-CNFIG5,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG6',    $BAS703A-ELIG-CNFIG6,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG7',    $BAS703A-ELIG-CNFIG7,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG8',    $BAS703A-ELIG-CNFIG8,    #CW)
do Get_Field_Information ('BAS703A', 'ELIG_CNFIG9',    $BAS703A-ELIG-CNFIG9,    #CW)

do Get_Field_Information ('BEN1', 'RULE',              $BEN1-RULE,       #CW)
do Get_Field_Information ('BEN1', 'EFFECTIVE',         $BEN1-EFFECTIVE,  #CW)
do Get_Field_Information ('BEN1', 'ID',                $BEN1-ID,         #CW)
do Get_Field_Information ('BEN1', 'DATE',              $BEN1-DATE,       #CW)
do Get_Field_Information ('BEN1', 'DESCR',             $BEN1-DESCR,      #CW)
do Get_Field_Information ('BEN1', 'GROUPING',          $BEN1-GROUPING,   #CW)
do Get_Field_Information ('BEN1', 'EVALUATION',        $BEN1-EVALUATION, #CW)
do Get_Field_Information ('BEN1', 'METHOD',            $BEN1-METHOD,     #CW)
do Get_Field_Information ('BEN1', 'ACTIVE',            $BEN1-ACTIVE,     #CW)
do Get_Field_Information ('BEN1', 'JOBS-ONLY',         $BEN1-JOBS-ONLY,  #CW)
do Get_Field_Information ('BEN1', 'FTE',               $BEN1-FTE,        #CW)

End-Procedure

!***************************************
Begin-Procedure Ask-Elig-Rules
!***************************************

  input $Elig_Rules_Id -
    'Enter Eligibility Rule ID to report (or leave blank for ALL Rules)'
  let $Elig_Rules_Id = RTRIM(UPPER($Elig_Rules_Id), ' ')

  if ($Elig_Rules_Id = '')
    let $Elig_Rules_Id = '%'
  end-if

End-Procedure

!***************************************
Begin-Heading 8
!***************************************

#Include 'stdhdgtr.sqc'     !Standard Report header

!*** 'Eligibility Rules Definitions as of:'
  print $BAS703A-ELIG-RULE-DEF               (+1,1)
  do Format-DateTime($UserAsOfDate, $OutDt, {DEFDATE}, '', '')
  print $OutDt                              ()

!*** Heading line 1
  print $BEN1-RULE                 (+2,1,{col_rule_id})
  print $BEN1-EFFECTIVE            (0,+{col_sep2},{col_eff_dt})
  print $BAS703A-SHORT             (0,+{col_sep2},{col_short_descr})
  print $BEN1-GROUPING             (0,{col_methods},{col_grp_mthd})
  print $BEN1-EVALUATION           (0,+{col_sep2},{col_eval_mthd})
  print $BEN1-ACTIVE               (0,+{col_sep2},{col_eval_actv})

!*** Heading line 2
  print $BEN1-ID                   (+1,1,{col_rule_id})
  print $BEN1-DATE                 (0,+{col_sep2},{col_eff_dt})
  print $BEN1-DESCR                (0,+{col_sep2},{col_short_descr})
  print $BEN1-METHOD               (0,{col_methods},{col_grp_mthd})
  print $BEN1-METHOD               (0,+{col_sep2},{col_eval_mthd})
  print $BEN1-JOBS-ONLY            (0,+{col_sep2},{col_eval_actv})
  print $BAS703A-ELIG-FIELD-VALUES (0,+{col_sep},90)

!*** Heading line 3
  print '='                   (+1,1,{col_rule_id})                FILL
  print '='                   (0,+{col_sep2},{col_eff_dt})        FILL
  print '='                   (0,+{col_sep2},{col_short_descr})   FILL
  print '='                   (0,{col_methods},{col_grp_mthd})    Fill
  print '='                   (0,+{col_sep2},{col_eval_mthd})     Fill
  print '='                   (0,+{col_sep2},{col_eval_actv})     Fill
  print '='                   (0,+{col_sep},90)                   Fill

End-Heading

!***************************************
Begin-Procedure Audit-Tables
!***************************************

let $Tables-OK = 'Y'

do Audit-BNSTAT

if $Tables-OK = 'Y'
  do Audit-EECLAS
end-if

if $Tables-OK = 'Y'
  do Audit-EETYPE
end-if

if $Tables-OK = 'Y'
  do Audit-FLPART
end-if

if $Tables-OK = 'Y'
  do Audit-FLSA
end-if

if $Tables-OK = 'Y'
  do Audit-GRADE
end-if

if $Tables-OK = 'Y'
  do Audit-LOCN
end-if

if $Tables-OK = 'Y'
  do Audit-OFFICR
 end-if

if $Tables-OK = 'Y'
  do Audit-OVRD
end-if

if $Tables-OK = 'Y'
  do Audit-PYGRP
end-if

if $Tables-OK = 'Y'
  do Audit-REGN
end-if

if $Tables-OK = 'Y'
  do Audit-REGTMP
end-if

if $Tables-OK = 'Y'
  do Audit-STATE
end-if

if $Tables-OK = 'Y'
  do Audit-UNION
end-if

if $Tables-OK = 'Y'
  do Audit-FEHB
end-if

if $Tables-OK = 'Y'
  do Audit-RETIRE
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG1
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG2
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG3
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG4
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG5
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG6
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG7
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG8
end-if

if $Tables-OK = 'Y'
  do Audit-CNFIG9
end-if

if $Tables-OK = 'N'
  PRINT 'The Eligibility Rules tables contain a set of flags that indicate which of the many eligibility' (+2,10)
  PRINT 'fields actually participate in the specific rule.  The batch process uses these flags to determine' (+1,10)
  PRINT 'which of the many tables it needs to select from.  Using these flags help improve performance by' (+1,10)
  PRINT 'reducing unnecessary database reads.' (+1,10)

  PRINT 'The batch process has audited the Eligibility Rules tables and has found that the flags are set' (+2,10)
  PRINT 'incorrectly.  You must run script BAELIGLD to reset the flags.  The system will be unable to' (+1,10)
  PRINT 'correctly determine eligibility until you run this script.' (+1,10)
end-if

End-Procedure

!***************************************
Begin-Procedure Audit-BNSTAT
!***************************************

Begin-Select
AUDA.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDA,
PS_BAS_ELIG_BNSTAT AUDA2
WHERE AUDA.ELIG_USE_BNSTAT = 'N'
AND AUDA.ELIG_RULES_ID = AUDA2.ELIG_RULES_ID
AND AUDA.EFFDT = AUDA2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-EECLAS
!***************************************

Begin-Select
AUDB.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDB,
PS_BAS_ELIG_EECLAS AUDB2
WHERE AUDB.ELIG_USE_EECLAS = 'N'
AND AUDB.ELIG_RULES_ID = AUDB2.ELIG_RULES_ID
AND AUDB.EFFDT = AUDB2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-EETYPE
!***************************************

Begin-Select
AUDC.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDC,
PS_BAS_ELIG_EETYPE AUDC2
WHERE AUDC.ELIG_USE_EETYPE = 'N'
AND AUDC.ELIG_RULES_ID = AUDC2.ELIG_RULES_ID
AND AUDC.EFFDT = AUDC2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-FLPART
!***************************************

Begin-Select
AUDD.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDD,
PS_BAS_ELIG_FLPART AUDD2
WHERE AUDD.ELIG_USE_FLPART = 'N'
AND AUDD.ELIG_RULES_ID = AUDD2.ELIG_RULES_ID
AND AUDD.EFFDT = AUDD2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-FLSA
!***************************************

Begin-Select
AUDE.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDE,
PS_BAS_ELIG_FLSA AUDE2
WHERE AUDE.ELIG_USE_FLSA = 'N'
AND AUDE.ELIG_RULES_ID = AUDE2.ELIG_RULES_ID
AND AUDE.EFFDT = AUDE2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-GRADE
!***************************************

Begin-Select
AUDF.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDF,
PS_BAS_ELIG_GRADE AUDF2
WHERE AUDF.ELIG_USE_GRADE = 'N'
AND AUDF.ELIG_RULES_ID = AUDF2.ELIG_RULES_ID
AND AUDF.EFFDT = AUDF2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-LOCN
!***************************************

Begin-Select
AUDG.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDG,
PS_BAS_ELIG_LOCN AUDG2
WHERE AUDG.ELIG_USE_LOCN = 'N'
AND AUDG.ELIG_RULES_ID = AUDG2.ELIG_RULES_ID
AND AUDG.EFFDT = AUDG2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-OFFICR
!***************************************

Begin-Select
AUDH.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDH,
PS_BAS_ELIG_OFFICR AUDH2
WHERE AUDH.ELIG_USE_OFFICR = 'N'
AND AUDH.ELIG_RULES_ID = AUDH2.ELIG_RULES_ID
AND AUDH.EFFDT = AUDH2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-OVRD
!***************************************

Begin-Select
AUDI.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDI,
PS_BAS_ELIG_OVRD AUDI2
WHERE AUDI.ELIG_USE_OVRD = 'N'
AND AUDI.ELIG_RULES_ID = AUDI2.ELIG_RULES_ID
AND AUDI.EFFDT = AUDI2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-PYGRP
!***************************************

Begin-Select
AUDJ.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDJ,
PS_BAS_ELIG_PYGRP AUDJ2
WHERE AUDJ.ELIG_USE_PYGRP = 'N'
AND AUDJ.ELIG_RULES_ID = AUDJ2.ELIG_RULES_ID
AND AUDJ.EFFDT = AUDJ2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-REGN
!***************************************

Begin-Select
AUDK.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDK,
PS_BAS_ELIG_REGN AUDK2
WHERE AUDK.ELIG_USE_REGN = 'N'
AND AUDK.ELIG_RULES_ID = AUDK2.ELIG_RULES_ID
AND AUDK.EFFDT = AUDK2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-REGTMP
!***************************************

Begin-Select
AUDL.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDL,
PS_BAS_ELIG_REGTMP AUDL2
WHERE AUDL.ELIG_USE_REGTMP = 'N'
AND AUDL.ELIG_RULES_ID = AUDL2.ELIG_RULES_ID
AND AUDL.EFFDT = AUDL2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-STATE
!***************************************

Begin-Select
AUDM.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDM,
PS_BAS_ELIG_STATE AUDM2
WHERE AUDM.ELIG_USE_STATE = 'N'
AND AUDM.ELIG_RULES_ID = AUDM2.ELIG_RULES_ID
AND AUDM.EFFDT = AUDM2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-UNION
!***************************************

Begin-Select
AUDN.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDN,
PS_BAS_ELIG_UNION AUDN2
WHERE AUDN.ELIG_USE_UNION = 'N'
AND AUDN.ELIG_RULES_ID = AUDN2.ELIG_RULES_ID
AND AUDN.EFFDT = AUDN2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-FEHB
!***************************************

Begin-Select
AUDX.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDX,
PS_GVT_BAS_ELIG_FE AUDX2
WHERE AUDX.GVT_ELIG_USE_FEHB = 'N'
AND AUDX.ELIG_RULES_ID = AUDX2.ELIG_RULES_ID
AND AUDX.EFFDT = AUDX2.EFFDT

End-Select
End-Procedure

!***************************************
Begin-Procedure Audit-RETIRE
!***************************************

Begin-Select
AUDY.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDY,
PS_GVT_BAS_ELIG_RT AUDY2
WHERE AUDY.GVT_ELIG_USE_RET = 'N'
AND AUDY.ELIG_RULES_ID = AUDY2.ELIG_RULES_ID
AND AUDY.EFFDT = AUDY2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG1
!***************************************

Begin-Select
AUDO.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDO,
PS_BAS_ELIG_CNFIG1 AUDO2
WHERE AUDO.ELIG_USE_CNFIG1 = 'N'
AND AUDO.ELIG_RULES_ID = AUDO2.ELIG_RULES_ID
AND AUDO.EFFDT = AUDO2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG2
!***************************************

Begin-Select
AUDP.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDP,
PS_BAS_ELIG_CNFIG2 AUDP2
WHERE AUDP.ELIG_USE_CNFIG2 = 'N'
AND AUDP.ELIG_RULES_ID = AUDP2.ELIG_RULES_ID
AND AUDP.EFFDT = AUDP2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG3
!***************************************

Begin-Select
AUDQ.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDQ,
PS_BAS_ELIG_CNFIG3 AUDQ2
WHERE AUDQ.ELIG_USE_CNFIG3 = 'N'
AND AUDQ.ELIG_RULES_ID = AUDQ2.ELIG_RULES_ID
AND AUDQ.EFFDT = AUDQ2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG4
!***************************************

Begin-Select
AUDR.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDR,
PS_BAS_ELIG_CNFIG4 AUDR2
WHERE AUDR.ELIG_USE_CNFIG4 = 'N'
AND AUDR.ELIG_RULES_ID = AUDR2.ELIG_RULES_ID
AND AUDR.EFFDT = AUDR2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG5
!***************************************

Begin-Select
AUDS.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDS,
PS_BAS_ELIG_CNFIG5 AUDS2
WHERE AUDS.ELIG_USE_CNFIG5 = 'N'
AND AUDS.ELIG_RULES_ID = AUDS2.ELIG_RULES_ID
AND AUDS.EFFDT = AUDS2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG6
!***************************************

Begin-Select
AUDT.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDT,
PS_BAS_ELIG_CNFIG6 AUDT2
WHERE AUDT.ELIG_USE_CNFIG6 = 'N'
AND AUDT.ELIG_RULES_ID = AUDT2.ELIG_RULES_ID
AND AUDT.EFFDT = AUDT2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG7
!***************************************

Begin-Select
AUDU.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDU,
PS_BAS_ELIG_CNFIG7 AUDU2
WHERE AUDU.ELIG_USE_CNFIG7 = 'N'
AND AUDU.ELIG_RULES_ID = AUDU2.ELIG_RULES_ID
AND AUDU.EFFDT = AUDU2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG8
!***************************************

Begin-Select
AUDV.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDV,
PS_BAS_ELIG_CNFIG8 AUDV2
WHERE AUDV.ELIG_USE_CNFIG8 = 'N'
AND AUDV.ELIG_RULES_ID = AUDV2.ELIG_RULES_ID
AND AUDV.EFFDT = AUDV2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Audit-CNFIG9
!***************************************

Begin-Select
AUDW.ELIG_RULES_ID

  let $Tables-OK = 'N'

FROM PS_BAS_ELIG_RULES AUDW,
PS_BAS_ELIG_CNFIG9 AUDW2
WHERE AUDW.ELIG_USE_CNFIG9 = 'N'
AND AUDW.ELIG_RULES_ID = AUDW2.ELIG_RULES_ID
AND AUDW.EFFDT = AUDW2.EFFDT

End-Select
End-Procedure


!***************************************
Begin-Procedure Process-Main
!***************************************

#ifdef DB2ALL
   if $Elig_Rules_Id <> '%'
     let $Elig_Rules_Id = Edit($Elig_Rules_Id,'XXXX')
   end-if
#endif

Begin-Select

ER.ELIG_RULES_ID
ER.EFFDT
  do Format-DateTime(&ER.EFFDT, $EligEffDt, {DEFDATE}, '', '')
  !This sets the effective date for fetching from PSXLATITEM and other
  !supporting tables...
  let $AsOfDate = &ER.EFFDT

ER.DESCRSHORT
ER.EFF_STATUS

ER.MIN_STD_HRS
ER.MAX_STD_HRS
ER.GRP_MTHD_HRS
ER.EVAL_MTHD_HRS
ER.EVAL_ACTV_HRS

ER.MIN_SERVICE_MM
ER.MAX_SERVICE_MM
ER.GRP_MTHD_SVC
ER.EVAL_MTHD_SVC
ER.EVAL_ACTV_SVC
ER.SERVICE_AS_OF_CD
ER.SERVICE_AS_OF_MM
ER.SERVICE_AS_OF_DD

ER.MIN_AGE
ER.MAX_AGE
ER.AGE_AS_OF_CD
ER.AGE_AS_OF_MM
ER.AGE_AS_OF_DD

ER.MIN_FTE
ER.MAX_FTE
ER.GRP_MTHD_FTE
ER.EVAL_MTHD_FTE
ER.EVAL_ACTV_FTE

ER.ELIG_FLG_BNSTAT
ER.GRP_MTHD_BNSTAT
ER.EVAL_MTHD_BNSTAT
ER.EVAL_ACTV_BNSTAT

ER.ELIG_FLG_EECLAS
ER.GRP_MTHD_EECLAS
ER.EVAL_MTHD_EECLAS
ER.EVAL_ACTV_EECLAS

ER.ELIG_FLG_EETYPE
ER.GRP_MTHD_EETYPE
ER.EVAL_MTHD_EETYPE
ER.EVAL_ACTV_EETYPE

ER.ELIG_FLG_FLPART
ER.GRP_MTHD_FLPART
ER.EVAL_MTHD_FLPART
ER.EVAL_ACTV_FLPART

ER.ELIG_FLG_FLSA
ER.GRP_MTHD_FLSA
ER.EVAL_MTHD_FLSA
ER.EVAL_ACTV_FLSA

ER.ELIG_FLG_GRADE
ER.GRP_MTHD_GRADE
ER.EVAL_MTHD_GRADE
ER.EVAL_ACTV_GRADE

ER.ELIG_FLG_LOCN
ER.GRP_MTHD_LOCN
ER.EVAL_MTHD_LOCN
ER.EVAL_ACTV_LOCN

ER.ELIG_FLG_OFFICR
ER.GRP_MTHD_OFFICR
ER.EVAL_MTHD_OFFICR
ER.EVAL_ACTV_OFFICR

ER.ELIG_FLG_PYGRP
ER.GRP_MTHD_PYGRP
ER.EVAL_MTHD_PYGRP
ER.EVAL_ACTV_PYGRP

ER.ELIG_FLG_REGN
ER.GRP_MTHD_REGN
ER.EVAL_MTHD_REGN
ER.EVAL_ACTV_REGN

ER.ELIG_FLG_REGTMP
ER.GRP_MTHD_REGTMP
ER.EVAL_MTHD_REGTMP
ER.EVAL_ACTV_REGTMP

ER.ELIG_FLG_STATE
ER.GRP_MTHD_STATE
ER.EVAL_MTHD_STATE
ER.EVAL_ACTV_STATE

ER.ELIG_FLG_UNION
ER.GRP_MTHD_UNION
ER.EVAL_MTHD_UNION
ER.EVAL_ACTV_UNION

ER.GVT_ELIG_FLG_FEHB
ER.GVT_GRP_MTHD_FEHB
ER.GVT_EVAL_MTHD_FEHB
ER.GVT_EVAL_ACTV_FEHB

ER.GVT_ELIG_FLG_RET
ER.GVT_GRP_MTHD_RET
ER.GVT_EVAL_MTHD_RET
ER.GVT_EVAL_ACTV_RET

ER.ELIG_FLG_CNFIG1
ER.GRP_MTHD_CNFIG1
ER.EVAL_MTHD_CNFIG1
ER.EVAL_ACTV_CNFIG1

ER.ELIG_FLG_CNFIG2
ER.GRP_MTHD_CNFIG2
ER.EVAL_MTHD_CNFIG2
ER.EVAL_ACTV_CNFIG2

ER.ELIG_FLG_CNFIG3
ER.GRP_MTHD_CNFIG3
ER.EVAL_MTHD_CNFIG3
ER.EVAL_ACTV_CNFIG3

ER.ELIG_FLG_CNFIG4
ER.GRP_MTHD_CNFIG4
ER.EVAL_MTHD_CNFIG4
ER.EVAL_ACTV_CNFIG4

ER.ELIG_FLG_CNFIG5
ER.GRP_MTHD_CNFIG5
ER.EVAL_MTHD_CNFIG5
ER.EVAL_ACTV_CNFIG5

ER.ELIG_FLG_CNFIG6
ER.GRP_MTHD_CNFIG6
ER.EVAL_MTHD_CNFIG6
ER.EVAL_ACTV_CNFIG6

ER.ELIG_FLG_CNFIG7
ER.GRP_MTHD_CNFIG7
ER.EVAL_MTHD_CNFIG7
ER.EVAL_ACTV_CNFIG7

ER.ELIG_FLG_CNFIG8
ER.GRP_MTHD_CNFIG8
ER.EVAL_MTHD_CNFIG8
ER.EVAL_ACTV_CNFIG8

ER.ELIG_FLG_CNFIG9
ER.GRP_MTHD_CNFIG9
ER.EVAL_MTHD_CNFIG9
ER.EVAL_ACTV_CNFIG9

ER.BAS_HOME_LOC

  do Print-Min-Max-Criteria
  do Process-Membership

FROM  PS_BAS_ELIG_RULES ER

WHERE ER.ELIG_RULES_ID LIKE $Elig_Rules_Id
  AND ER.EFF_STATUS = 'A'
  AND ER.EFFDT      = (SELECT MAX(EFFDT)
                         FROM PS_BAS_ELIG_RULES
                        WHERE ELIG_RULES_ID = ER.ELIG_RULES_ID
                          AND EFF_STATUS    = 'A'
                          AND EFFDT        <= $UserAsOfDate)

ORDER BY ER.ELIG_RULES_ID ASC

End-Select
End-Procedure

!***************************************
Begin-Procedure Print-Min-Max-Criteria
!***************************************

  do Format-Number(&ER.MIN_STD_HRS, $MinStdHrs, '9999.99')
  do Format-Number(&ER.MAX_STD_HRS, $MaxStdHrs, '9999.99')
  let $MinStdHrs = LTRIM($MinStdHrs,' ')
  let $MaxStdHrs = LTRIM($MaxStdHrs,' ')

  do Format-Number(&ER.MIN_SERVICE_MM, $MinSvcMM, '999')
  do Format-Number(&ER.MAX_SERVICE_MM, $MaxSvcMM, '999')
  let $MinSvcMM = LTRIM($MinSvcMM,' ')
  let $MaxSvcMM = LTRIM($MaxSvcMM,' ')
  move 'SERVICE_AS_OF_CD'  to $FieldName
  move &ER.SERVICE_AS_OF_CD to $FieldValue
  do Read-Translate-Table
  let $SvcAsOfCode = RTRIM($XlatShortName, ' ')
  if (&ER.SERVICE_AS_OF_CD = 'C')
    let $SvcAsOfDate = '      '
  else
    let $SvcAsOfDate = ':' || EDIT(&ER.SERVICE_AS_OF_MM, '09') ||
                       '-' || EDIT(&ER.SERVICE_AS_OF_DD, '09')
  end-if

  do Format-Number(&ER.MIN_AGE, $MinAge, '999')
  do Format-Number(&ER.MAX_AGE, $MaxAge, '999')
  let $MinAge = LTRIM($MinAge,' ')
  let $MaxAge = LTRIM($MaxAge,' ')
  move 'AGE_AS_OF_CD'  to $FieldName
  move &ER.AGE_AS_OF_CD to $FieldValue
  do Read-Translate-Table
  let $AgeAsOfCode = RTRIM($XlatShortName, ' ')
  if (&ER.AGE_AS_OF_CD = 'C')
    let $AgeAsOfDate = '      '
  else
    let $AgeAsOfDate = ':' || EDIT(&ER.AGE_AS_OF_MM, '09') ||
                       '-' || EDIT(&ER.AGE_AS_OF_DD, '09')
  end-if

  do Format-Number(&ER.MIN_FTE, $MinFTE, '99.999999')
  do Format-Number(&ER.MAX_FTE, $MaxFTE, '99.999999')
  let $MinFTE = LTRIM($MinFTE,' ')
  let $MaxFTE = LTRIM($MaxFTE,' ')

  print &ER.ELIG_RULES_ID          (+3,1,4)
  print $EligEffDt                 (0,+2,10)
  print &ER.DESCRSHORT             (0,+2,11)

  print $BAS703A-AGE-YRS           (+1,{col_field_desc},{len_field_desc})
  print '-'                        (0,{col_methods},{col_grp_mthd})
  print '-'                        (0,+{col_sep2},{col_eval_mthd})
  print '-'                        (0,+{col_sep2},{col_eval_actv})
  let $tmp1 = $MinAge || '-' || $MaxAge
  print $tmp1                      (0,+{col_sep},{col_min_max})
  print $BAS703A-AS-OF             (0,+{col_sep})
  print $AgeAsOfCode               (0,+{col_sep})
  print $AgeAsOfDate               ()

  print $BAS703A-SVC-MOS           (+1,{col_field_desc},{len_field_desc})
  move 'GRP_MTHD'  to $FieldName
  move &ER.GRP_MTHD_SVC to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,{col_methods},{col_grp_mthd})
  move 'EVAL_MTHD'  to $FieldName
  move &ER.EVAL_MTHD_SVC to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,+{col_sep2},{col_eval_mthd})
  print &ER.EVAL_ACTV_SVC          (0,+{col_sep2},{col_eval_actv})
  let $tmp1 = $MinSvcMM || '-' || $MaxSvcMM
  print $tmp1                      (0,+{col_sep},{col_min_max})
  print $BAS703A-AS-OF             (0,+{col_sep})
  print $SvcAsOfCode               (0,+{col_sep})
  print $SvcAsOfDate               ()

  print $BAS703A-STD-HOURS         (+1,{col_field_desc},{len_field_desc})
  move 'GRP_MTHD'  to $FieldName
  move &ER.GRP_MTHD_HRS to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,{col_methods},{col_grp_mthd})
  move 'EVAL_MTHD'  to $FieldName
  move &ER.EVAL_MTHD_HRS to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,+{col_sep2},{col_eval_mthd})
  print &ER.EVAL_ACTV_HRS          (0,+{col_sep2},{col_eval_actv})
  let $tmp1 = $MinStdHrs || '-' || $MaxStdHrs
  print $tmp1                      (0,+{col_sep},{col_min_max})

  print $BEN1-FTE                  (+1,{col_field_desc},{len_field_desc})
  move 'GRP_MTHD'  to $FieldName
  move &ER.GRP_MTHD_FTE to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,{col_methods},{col_grp_mthd})
  move 'EVAL_MTHD'  to $FieldName
  move &ER.EVAL_MTHD_FTE to $FieldValue
  do Read-Translate-Table
  print $XlatShortName             (0,+{col_sep2},{col_eval_mthd})
  print &ER.EVAL_ACTV_FTE          (0,+{col_sep2},{col_eval_actv})
  let $tmp1 = $MinFTE || '-' || $MaxFTE
  print $tmp1                      (0,+{col_sep},{col_min_max2})

End-Procedure

!***************************************
Begin-Procedure Process-Membership
!***************************************

  let $New-Table = 'Y'
  do Process-BNStatus

  let $New-Table = 'Y'
  do Process-Company-PayGrp

  let $New-Table = 'Y'
  do Process-EEClass

  let $New-Table = 'Y'
  do Process-EEType

  let $New-Table = 'Y'
  do Process-FLSA

  let $New-Table = 'Y'
  do Process-FullPart

  let $New-Table = 'Y'
  do Process-OfficerCd

  let $New-Table = 'Y'
  do Process-RegTemp

  let $New-Table = 'Y'
  do Process-Regn

  let $New-Table = 'Y'
  do Process-Location

  let $New-Table = 'Y'
  do Process-Grade

  let $New-Table = 'Y'
  do Process-Country-State

  let $New-Table = 'Y'
  do Process-UnionCd

  let $New-Table = 'Y'
  do Process-FEHB

  let $New-Table = 'Y'
  do Process-Retire

  let $New-Table = 'Y'
  do Process-Config1

  let $New-Table = 'Y'
  do Process-Config2

  let $New-Table = 'Y'
  do Process-Config3

  let $New-Table = 'Y'
  do Process-Config4

  let $New-Table = 'Y'
  do Process-Config5

  let $New-Table = 'Y'
  do Process-Config6

  let $New-Table = 'Y'
  do Process-Config7

  let $New-Table = 'Y'
  do Process-Config8

  let $New-Table = 'Y'
  do Process-Config9

End-Procedure

!***************************************
Begin-Procedure Print-Membership-Item
!***************************************

  if $New-Table = 'Y'
    print $Elig_Inelig       (+2,{col_eligible},{len_eligible})
    let $Field_Desc = RTRIM($Field_Desc,' ') || ':'
    print $Field_Desc        (0,{col_field_desc},{len_field_desc})
    move 'GRP_MTHD' to $FieldName
    move $Grp_Mthd  to $FieldValue
    do Read-Translate-Table
    print $XlatShortName     (0,{col_methods},{col_grp_mthd})
    move 'EVAL_MTHD' to $FieldName
    move $Eval_Mthd  to $FieldValue
    do Read-Translate-Table
    print $XlatShortName     (0,+{col_sep2},{col_eval_mthd})
    print $Eval_Actv         (0,+{col_sep2},{col_eval_actv})
    let #PrnCol = {col_field_data}
    let $New-Table = 'N'
  end-if

  if #PrnCol > #Farthest_Entry
    print ' '                (+1,1,1)
    let #PrnCol = {col_field_data}
  end-if

  print $MbrListVal (0,#PrnCol,#DataLen)
  let #PrnCol = #PrnCol + #DataLen + 2

End-Procedure

!***************************************
Begin-Procedure Process-BNStatus
!***************************************

  move 'ELIG_FLG_BNSTAT'  to $FieldName
  move &ER.ELIG_FLG_BNSTAT to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-BNSTAT
  let $Grp_Mthd = &ER.GRP_MTHD_BNSTAT
  let $Eval_Mthd = &ER.EVAL_MTHD_BNSTAT
  let $Eval_Actv = &ER.EVAL_ACTV_BNSTAT
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

BN.ELIG_RULES_ID
BN.EFFDT
BN.BEN_STATUS

  move 'BEN_STATUS'  to $FieldName
  move &BN.BEN_STATUS to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_BNSTAT BN
WHERE BN.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND BN.EFFDT         = &ER.EFFDT
ORDER BY BN.BEN_STATUS

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Company-PayGrp
!***************************************

  move 'ELIG_FLG_PYGRP'  to $FieldName
  move &ER.ELIG_FLG_PYGRP to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-PYGRP
  let $Grp_Mthd = &ER.GRP_MTHD_PYGRP
  let $Eval_Mthd = &ER.EVAL_MTHD_PYGRP
  let $Eval_Actv = &ER.EVAL_ACTV_PYGRP
  let #DataLen = {len_pygrp}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

CM.ELIG_RULES_ID
CM.EFFDT
CM.COMPANY
CM.PAYGROUP

  let $MbrListVal = RTRIM(&CM.COMPANY,' ') || '/' || &CM.PAYGROUP
  do Print-Membership-Item

FROM  PS_BAS_ELIG_PYGRP CM
WHERE CM.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND CM.EFFDT         = &ER.EFFDT
ORDER BY CM.COMPANY, CM.PAYGROUP

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-EEClass
!***************************************

  move 'ELIG_FLG_EECLAS'  to $FieldName
  move &ER.ELIG_FLG_EECLAS to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-EECLAS
  let $Grp_Mthd = &ER.GRP_MTHD_EECLAS
  let $Eval_Mthd = &ER.EVAL_MTHD_EECLAS
  let $Eval_Actv = &ER.EVAL_ACTV_EECLAS
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

EC.ELIG_RULES_ID
EC.EFFDT
EC.EMPL_CLASS

  move &EC.EMPL_CLASS to $Empl_Class
  let $Reg_Region = ''
  !an empty $Reg_Region forces the use of the 'STD' setid.
  do Get-Empl-Class-Name

  let $MbrListVal = $Empl_Class_Name
  do Print-Membership-Item

FROM  PS_BAS_ELIG_EECLAS EC
WHERE EC.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND EC.EFFDT         = &ER.EFFDT
ORDER BY EC.EMPL_CLASS

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-EEType
!***************************************

  move 'ELIG_FLG_EETYPE'  to $FieldName
  move &ER.ELIG_FLG_EETYPE to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-EETYPE
  let $Grp_Mthd = &ER.GRP_MTHD_EETYPE
  let $Eval_Mthd = &ER.EVAL_MTHD_EETYPE
  let $Eval_Actv = &ER.EVAL_ACTV_EETYPE
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

ET.ELIG_RULES_ID
ET.EFFDT
ET.EMPL_TYPE

  move 'EMPL_TYPE'  to $FieldName
  move &ET.EMPL_TYPE to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_EETYPE ET
WHERE ET.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND ET.EFFDT         = &ER.EFFDT
ORDER BY ET.EMPL_TYPE

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-FLSA
!***************************************

  move 'ELIG_FLG_FLSA'  to $FieldName
  move &ER.ELIG_FLG_FLSA to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-FLSA
  let $Grp_Mthd = &ER.GRP_MTHD_FLSA
  let $Eval_Mthd = &ER.EVAL_MTHD_FLSA
  let $Eval_Actv = &ER.EVAL_ACTV_FLSA
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

FL.ELIG_RULES_ID
FL.EFFDT
FL.FLSA_STATUS

  move 'FLSA_STATUS'  to $FieldName
  move &FL.FLSA_STATUS to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_FLSA FL
WHERE FL.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND FL.EFFDT         = &ER.EFFDT
ORDER BY FL.FLSA_STATUS

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-FullPart
!***************************************

  move 'ELIG_FLG_FLPART'  to $FieldName
  move &ER.ELIG_FLG_FLPART to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-FLPART
  let $Grp_Mthd = &ER.GRP_MTHD_FLPART
  let $Eval_Mthd = &ER.EVAL_MTHD_FLPART
  let $Eval_Actv = &ER.EVAL_ACTV_FLPART
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

FP.ELIG_RULES_ID
FP.EFFDT
FP.FULL_PART_TIME

  move 'FULL_PART_TIME'  to $FieldName
  move &FP.FULL_PART_TIME to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_FLPART FP
WHERE FP.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND FP.EFFDT         = &ER.EFFDT
ORDER BY FP.FULL_PART_TIME

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-OfficerCd
!***************************************

  move 'ELIG_FLG_OFFICR'  to $FieldName
  move &ER.ELIG_FLG_OFFICR to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-OFFICR
  let $Grp_Mthd = &ER.GRP_MTHD_OFFICR
  let $Eval_Mthd = &ER.EVAL_MTHD_OFFICR
  let $Eval_Actv = &ER.EVAL_ACTV_OFFICR
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

OC.ELIG_RULES_ID
OC.EFFDT
OC.OFFICER_CD

  move 'OFFICER_CD'  to $FieldName
  move &OC.OFFICER_CD to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_OFFICR OC
WHERE OC.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND OC.EFFDT         = &ER.EFFDT
ORDER BY OC.OFFICER_CD

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-RegTemp
!***************************************

  move 'ELIG_FLG_REGTMP'  to $FieldName
  move &ER.ELIG_FLG_REGTMP to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-REGTMP
  let $Grp_Mthd = &ER.GRP_MTHD_REGTMP
  let $Eval_Mthd = &ER.EVAL_MTHD_REGTMP
  let $Eval_Actv = &ER.EVAL_ACTV_REGTMP
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

RT.ELIG_RULES_ID
RT.EFFDT
RT.REG_TEMP

  move 'REG_TEMP'  to $FieldName
  move &RT.REG_TEMP to $FieldValue
  do Read-Translate-Table

  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_BAS_ELIG_REGTMP RT
WHERE RT.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND RT.EFFDT         = &ER.EFFDT
ORDER BY RT.REG_TEMP

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Regn
!***************************************

  move 'ELIG_FLG_REGN'  to $FieldName
  move &ER.ELIG_FLG_REGN to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-REGN
  let $Grp_Mthd = &ER.GRP_MTHD_REGN
  let $Eval_Mthd = &ER.EVAL_MTHD_REGN
  let $Eval_Actv = &ER.EVAL_ACTV_REGN
  let #DataLen = {len_regn}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

RG.ELIG_RULES_ID
RG.EFFDT
RG.REG_REGION

  let $MbrListVal = &RG.REG_REGION
  do Print-Membership-Item

FROM  PS_BAS_ELIG_REGN RG
WHERE RG.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND RG.EFFDT         = &ER.EFFDT
ORDER BY RG.REG_REGION

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Location
!***************************************

  move 'ELIG_FLG_LOCN'  to $FieldName
  move &ER.ELIG_FLG_LOCN to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-LOCN
  let $Grp_Mthd = &ER.GRP_MTHD_LOCN
  let $Eval_Mthd = &ER.EVAL_MTHD_LOCN
  let $Eval_Actv = &ER.EVAL_ACTV_LOCN
  let #DataLen = {len_locn}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

LC.ELIG_RULES_ID
LC.EFFDT
LC.SETID
LC.LOCATION

  let $MbrListVal = RTRIM(&LC.SETID,' ') || '/' || RTRIM(&LC.LOCATION,' ')
  do Print-Membership-Item

FROM  PS_BAS_ELIG_LOCN LC
WHERE LC.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND LC.EFFDT         = &ER.EFFDT
ORDER BY LC.SETID, LC.LOCATION

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Grade
!***************************************

  move 'ELIG_FLG_GRADE'  to $FieldName
  move &ER.ELIG_FLG_GRADE to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-GRADE
  let $Grp_Mthd = &ER.GRP_MTHD_GRADE
  let $Eval_Mthd = &ER.EVAL_MTHD_GRADE
  let $Eval_Actv = &ER.EVAL_ACTV_GRADE
  let #DataLen = {len_grade}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

GR.ELIG_RULES_ID
GR.EFFDT
GR.SETID
GR.SAL_ADMIN_PLAN
GR.GRADE

  let $TrmSalPlan = RTRIM(&GR.SAL_ADMIN_PLAN,' ')
  if $TrmSalPlan = ''
    let $TrmSalPlan = ' '
  end-if
  let $MbrListVal = RTRIM(&GR.SETID,' ') || '/' || $TrmSalPlan
  let $MbrListVal = $MbrListVal || '/' || RTRIM(&GR.GRADE,' ')
  do Print-Membership-Item

FROM  PS_BAS_ELIG_GRADE GR
WHERE GR.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND GR.EFFDT         = &ER.EFFDT
ORDER BY GR.SETID, GR.SAL_ADMIN_PLAN, GR.GRADE

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Country-State
!***************************************

  move 'ELIG_FLG_STATE'  to $FieldName
  move &ER.ELIG_FLG_STATE to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  if &ER.BAS_HOME_LOC = 'L'
    let $Field_Desc = $BAS703A-ELIG-STATEL
  else
    if &ER.BAS_HOME_LOC = 'H'
       let $Field_Desc = $BAS703A-ELIG-STATEH
    else
      if &ER.BAS_HOME_LOC = 'B'
         let $Field_Desc = $BAS703A-ELIG-STATEB
      else
        if &ER.BAS_HOME_LOC = 'E'
           let $Field_Desc = $BAS703A-ELIG-STATEE
        end-if
      end-if
    end-if
  end-if
  let $Grp_Mthd = &ER.GRP_MTHD_STATE
  let $Eval_Mthd = &ER.EVAL_MTHD_STATE
  let $Eval_Actv = &ER.EVAL_ACTV_STATE
  let #DataLen = {len_state}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

ST.ELIG_RULES_ID
ST.EFFDT
ST.COUNTRY
ST.STATE

  let $MbrListVal = RTRIM(&ST.COUNTRY,' ') || '/' || &ST.STATE
  do Print-Membership-Item

FROM  PS_BAS_ELIG_STATE ST
WHERE ST.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND ST.EFFDT         = &ER.EFFDT
ORDER BY ST.COUNTRY, ST.STATE

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-UnionCd
!***************************************

  move 'ELIG_FLG_UNION'  to $FieldName
  move &ER.ELIG_FLG_UNION to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-UNION
  let $Grp_Mthd = &ER.GRP_MTHD_UNION
  let $Eval_Mthd = &ER.EVAL_MTHD_UNION
  let $Eval_Actv = &ER.EVAL_ACTV_UNION
  let #DataLen = {len_union}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

UC.ELIG_RULES_ID
UC.EFFDT
UC.UNION_CD

  let $MbrListVal = &UC.UNION_CD
  do Print-Membership-Item

FROM  PS_BAS_ELIG_UNION UC
WHERE UC.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND UC.EFFDT         = &ER.EFFDT
ORDER BY UC.UNION_CD

End-Select

End-Procedure


!***************************************
Begin-Procedure Process-FEHB
!***************************************

  move 'GVT_ELIG_FLG_FEHB'  to $FieldName
  move &ER.GVT_ELIG_FLG_FEHB to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-GVT-ELIG-FEHB
  let #DataLen = {len_FEHB}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

FH.ELIG_RULES_ID
FH.EFFDT
FH.GVT_ELIG_FEHB

  move 'GVT_ELIG_FEHB'  to $FieldName
  move &FH.GVT_ELIG_FEHB to $FieldValue
  do Read-Translate-Table
  let $MbrListVal = $XlatShortName
  do Print-Membership-Item

FROM  PS_GVT_BAS_ELIG_FE FH
WHERE FH.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND FH.EFFDT         = &ER.EFFDT
ORDER BY FH.GVT_ELIG_FEHB

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Retire
!***************************************

  move 'GVT_ELIG_FLG_RET'  to $FieldName
  move &ER.GVT_ELIG_FLG_RET to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-GVT-RETIRE-PLAN
  let #DataLen = {len_retire}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

RE.ELIG_RULES_ID
RE.EFFDT
RE.GVT_RETIRE_PLAN

  move 'GVT_RETIRE_PLAN'  to $FieldName
  move &RE.GVT_RETIRE_PLAN to $FieldValue
  do Read-Translate-Table
  let $MbrListVal = $XlatShortName

  !let $MbrListVal = &RE.GVT_RETIRE_PLAN
  do Print-Membership-Item

FROM  PS_GVT_BAS_ELIG_RT RE
WHERE RE.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND RE.EFFDT         = &ER.EFFDT
ORDER BY RE.GVT_RETIRE_PLAN

End-Select

End-Procedure


!***************************************
Begin-Procedure Process-Config1
!***************************************

  move 'ELIG_FLG_CNFIG1'  to $FieldName
  move &ER.ELIG_FLG_CNFIG1 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG1
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG1
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG1
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG1
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C1.ELIG_RULES_ID
C1.EFFDT
C1.ELIG_CONFIG1

  let $MbrListVal = &C1.ELIG_CONFIG1
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG1 C1
WHERE C1.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C1.EFFDT         = &ER.EFFDT
ORDER BY C1.ELIG_CONFIG1

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config2
!***************************************

  move 'ELIG_FLG_CNFIG2'  to $FieldName
  move &ER.ELIG_FLG_CNFIG2 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG2
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG2
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG2
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG2
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C2.ELIG_RULES_ID
C2.EFFDT
C2.ELIG_CONFIG2

  let $MbrListVal = &C2.ELIG_CONFIG2
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG2 C2
WHERE C2.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C2.EFFDT         = &ER.EFFDT
ORDER BY C2.ELIG_CONFIG2

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config3
!***************************************

  move 'ELIG_FLG_CNFIG3'  to $FieldName
  move &ER.ELIG_FLG_CNFIG3 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG3
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG3
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG3
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG3
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C3.ELIG_RULES_ID
C3.EFFDT
C3.ELIG_CONFIG3

  let $MbrListVal = &C3.ELIG_CONFIG3
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG3 C3
WHERE C3.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C3.EFFDT         = &ER.EFFDT
ORDER BY C3.ELIG_CONFIG3

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config4
!***************************************

  move 'ELIG_FLG_CNFIG4'  to $FieldName
  move &ER.ELIG_FLG_CNFIG4 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG4
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG4
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG4
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG4
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C4.ELIG_RULES_ID
C4.EFFDT
C4.ELIG_CONFIG4

  let $MbrListVal = &C4.ELIG_CONFIG4
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG4 C4
WHERE C4.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C4.EFFDT         = &ER.EFFDT
ORDER BY C4.ELIG_CONFIG4

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config5
!***************************************

  move 'ELIG_FLG_CNFIG5'  to $FieldName
  move &ER.ELIG_FLG_CNFIG5 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG5
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG5
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG5
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG5
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C5.ELIG_RULES_ID
C5.EFFDT
C5.ELIG_CONFIG5

  let $MbrListVal = &C5.ELIG_CONFIG5
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG5 C5
WHERE C5.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C5.EFFDT         = &ER.EFFDT
ORDER BY C5.ELIG_CONFIG5

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config6
!***************************************

  move 'ELIG_FLG_CNFIG6'  to $FieldName
  move &ER.ELIG_FLG_CNFIG6 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG6
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG6
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG6
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG6
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C6.ELIG_RULES_ID
C6.EFFDT
C6.ELIG_CONFIG6

  let $MbrListVal = &C6.ELIG_CONFIG6
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG6 C6
WHERE C6.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C6.EFFDT         = &ER.EFFDT
ORDER BY C6.ELIG_CONFIG6

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config7
!***************************************

  move 'ELIG_FLG_CNFIG7'  to $FieldName
  move &ER.ELIG_FLG_CNFIG7 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG7
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG7
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG7
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG7
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C7.ELIG_RULES_ID
C7.EFFDT
C7.ELIG_CONFIG7

  let $MbrListVal = &C7.ELIG_CONFIG7
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG7 C7
WHERE C7.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C7.EFFDT         = &ER.EFFDT
ORDER BY C7.ELIG_CONFIG7

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config8
!***************************************

  move 'ELIG_FLG_CNFIG8'  to $FieldName
  move &ER.ELIG_FLG_CNFIG8 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG8
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG8
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG8
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG8
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C8.ELIG_RULES_ID
C8.EFFDT
C8.ELIG_CONFIG8

  let $MbrListVal = &C8.ELIG_CONFIG8
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG8 C8
WHERE C8.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C8.EFFDT         = &ER.EFFDT
ORDER BY C8.ELIG_CONFIG8

End-Select

End-Procedure

!***************************************
Begin-Procedure Process-Config9
!***************************************

  move 'ELIG_FLG_CNFIG9'  to $FieldName
  move &ER.ELIG_FLG_CNFIG9 to $FieldValue
  do Read-Translate-Table
  let $Elig_Inelig = $XlatShortName
  let $Field_Desc = $BAS703A-ELIG-CNFIG9
  let $Grp_Mthd = &ER.GRP_MTHD_CNFIG9
  let $Eval_Mthd = &ER.EVAL_MTHD_CNFIG9
  let $Eval_Actv = &ER.EVAL_ACTV_CNFIG9
  let #DataLen = {len_xlat}
  let #Farthest_Entry = #MaxCol - #DataLen

Begin-Select

C9.ELIG_RULES_ID
C9.EFFDT
C9.ELIG_CONFIG9

  let $MbrListVal = &C9.ELIG_CONFIG9
  do Print-Membership-Item

FROM  PS_BAS_ELIG_CNFIG9 C9
WHERE C9.ELIG_RULES_ID = &ER.ELIG_RULES_ID
  AND C9.EFFDT         = &ER.EFFDT
ORDER BY C9.ELIG_CONFIG9

End-Select

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'benasof.sqc'   !Ask-As-Of-Date procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'readxlat.sqc'  !get translates for fieldname, value

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'getempcl.sqc'  !Get Employee Class Name

!****************************** End Of Report ***************************
