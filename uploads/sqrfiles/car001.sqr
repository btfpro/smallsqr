!***********************************************************************
! Report Name: CAR001.SQR - Calculate P11D Section A (UK specific)     *
!***********************************************************************
!                                                                      *
! Confidentiality Information:                                         *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:11:27:45                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This is a UK specific report which calculates car and fuel benefit   *
! amounts for employee's who have company car's. It populates two      *
! tables; P11D_SEC_A_UK and P11D_NOTES. The information gathered is    *
! required on the first part (section A) of the government form P11D.  *
! No actual hardcopy report is produced.                               *
!***********************************************************************
!                                                                      *
! Tables Referenced:                    Read  Delete  Update  Insert   *
!                                       ----  ------  ------  ------   *
!                    PS_CAR_ALLOC         x                            *
!                    PS_CAR_DATA          x                            *
!                    PS_CAR_MODEL         x                            *
!                    PS_CAR_EXTRA         x                            *
!                    PS_CAR_MILEAGE_UK    x                            *
!                    PS_CAR_NOTINUSE      x                            *
!                    PS_CAR_PAYMENTS      x                            *
!                    PS_EMISION_DATA_UK   x                            *
!                    PS_ENGINE_TYPE_UK    x                            *
!                    PS_P11D_NOTES_UK           x               x      *
!                    PS_P11D_SEC_A_UK     x     x               x      *
!                    PS_RUN_CNTL_CAR      x                            *
!                    PSXLATITEM            x                            *
!                                                                      *
! Related programs:  askcar.sqc                                        *
!                    car001.sqc                                        *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup
!-----------------------------------------------------------------------
! Uncomment this line to enable 'debug' display statements
!-----------------------------------------------------------------------
!#define TESTMODE 1

!-----------------------------------------------------------------------
begin-report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfToday, $AsOfToday_YMD, {DEFYMD}, '', '')

  do Init-Report

  do Process-Main

  do Reset
  do Stdapi-Term

end-report

!-----------------------------------------------------------------------
begin-procedure Init-Report

  move 'CAR001' to $ReportID
  move 'Calculate P11D Section A' to $ReportTitle
  display $ReportTitle
  display ''

  do Stdapi-Init

  do Set-Constants

  if $prcs_process_instance = ''
    do Ask-CAR001
    if #empl_rcd = -1
      let $empl_rcd_char = ''
    else
      let $empl_rcd_char = to_char(#empl_rcd)
    end-if
  else
    let $language_cd = $PRCS_LANGUAGE_CD
    do Select-Parameters
  end-if

  do Set-Values

  do Init_Printer

#ifdef TESTMODE
  print 'CAR001' (+1,1)
  let $temp = '  $language_cd: ' || $language_cd
  print $temp (+1,1)
  let $temp = '  $tax_year_end_uk: ' || $tax_year_end_uk
  print $temp (+1,1)
  let $temp = '  $emplid: ' || $emplid
  print $temp (+1,1)
  let $temp = '  $empl_rcd_char: ' || $empl_rcd_char
  print $temp (+1,1)
  let $temp = '  #empl_rcd: ' || to_char(#empl_rcd)
  print $temp (+1,1)
#end-if

end-procedure

!------------------------------------------------------------------------
! Get report parameters
!------------------------------------------------------------------------
begin-procedure Select-Parameters

#ifdef TESTMODE
  print 'in Select-Parameters' (+1,1)
  let $temp = '  $prcs_oprid: ' || $prcs_oprid
  print $temp (+1,1)
  let $temp = '  $prcs_run_cntl_id: ' || $prcs_run_cntl_id
  print $temp (+1,1)
#end-if

begin-select

PS_RUN_CNTL_CAR.TAX_YEAR_END_UK
PS_RUN_CNTL_CAR.EMPLID
PS_RUN_CNTL_CAR.EMPL_RCD_CHAR
   let $tax_year_end_uk = RTRIM(&PS_RUN_CNTL_CAR.TAX_YEAR_END_UK, ' ')
   let $emplid          = RTRIM(&PS_RUN_CNTL_CAR.EMPLID, ' ')
   let $empl_rcd_char   = RTRIM(&PS_RUN_CNTL_CAR.EMPL_RCD_CHAR, ' ')
   let #empl_rcd        = to_number(&PS_RUN_CNTL_CAR.EMPL_RCD_CHAR)
from PS_RUN_CNTL_CAR
where OPRID       = $prcs_oprid
  and RUN_CNTL_ID = $prcs_run_cntl_id

end-select

end-procedure Select-Parameters

!-----------------------------------------------------------------------
! Initialise constants
!-----------------------------------------------------------------------
begin-procedure Set-Constants

  let $plan_type      = '5A'

  let $tax_st_day     = '06'
  let $tax_st_month   = '04'
  let $tax_end_day    = '05'
  let $tax_end_month  = '04'

  let $actual_mileage = 'A'
  let $active         = 'A'
  let $language_cd    = 'ENG'
  let $low            = 'L'
  let $medium         = 'M'
  let $high           = 'H'
  let $on             = 'Y'
  let $off            = 'N'
  let $true           = 'Y'
  let $false          = 'N'
  let $unknown        = 'X'

  let #period_length  = 30
  let #max_acc_price  = 100
  let #zero           = 0

  let #engine_limit_1 = 1400
  let #engine_limit_2 = 2000

  let $petrol         = 'PET'
  let $diesel         = 'DIE'
  let $other          = 'OTH'
  let $electric       = 'ELE'
  let $euro4          = 'EUD'
  let $hybrid         = 'HPE'
  let $liquefied      = 'LPG'
  let $retro          = 'RET'
  let $gas            = 'GAS'
  let $rotary         = 'REP'
  let $gaspet         = 'GAP'


end-procedure Set-Constants

!-----------------------------------------------------------------------
! Initialise local variables
!-----------------------------------------------------------------------
begin-procedure Set-Values

  if $tax_year_end_uk = '0'
    ! Set default
    let $month_part = {ps-substr}($AsOfToday_YMD,6,2)
    let $year_part = {ps-substr}($AsOfToday_YMD,1,4)
    if $month_part < $tax_end_month
      let #year_part = to_number($year_part) - 1
      let $year_part = to_char(#year_part)
    end-if
    let $tax_year_end_uk = $year_part
  end-if
#ifdef TESTMODE
  let $temp = '  $AsOfToday_YMD: ' || $AsOfToday_YMD
  print $temp (+1,1)
  let $temp = '  $month_part: ' || $month_part
  print $temp (+1,1)
  let $temp = '  $year_part: ' || $year_part
  print $temp (+1,1)
#end-if

  ! Work out start and end dates of tax year

  let $tax_end_year = $tax_year_end_uk
  let $tax_st_year  = to_char(to_number($tax_end_year) - 1)
  let $tax_year_st_YMD  = $tax_st_year || '-' || $tax_st_month || '-' || $tax_st_day
  let $tax_year_end_YMD = $tax_end_year || '-' || $tax_end_month || '-' || $tax_end_day

  ! Set native database values for start and end dates of tax year

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($tax_year_st_YMD,$tax_year_st_N,{DEFYMD},'','native')
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($tax_year_end_YMD,$tax_year_end_N,{DEFYMD},'','native')

#ifdef TESTMODE
  let $temp = '  $tax_year_st_YMD: ' || $tax_year_st_YMD
  print $temp (+1,1)
  let $temp = '  $tax_year_end_YMD: ' || $tax_year_end_YMD
  print $temp (+1,1)
  let $temp = '  $tax_year_st_N: ' || $tax_year_st_N
  print $temp (+1,1)
  let $temp = '  $tax_year_end_N: ' || $tax_year_end_N
  print $temp (+1,1)
#end-if

end-procedure Set-Values

!-----------------------------------------------------------------------
! Main processing
!-----------------------------------------------------------------------
begin-procedure Process-Main

  do Delete-Existing

if $emplid = ''
  if $empl_rcd_char = ''
    let $where = 'where '
  else
    let $where = 'where PS_CAR_ALLOC.EMPL_RCD = ' || to_char(#empl_rcd) || ' and '
  end-if
  let $where = $where || 'PS_CAR_ALLOC.PLAN_TYPE = ''' || $plan_type || '''' || ' and PS_CAR_ALLOC.EFFDT <= ''' || $tax_year_end_N || ''''
else
  let $where  = 'where PS_CAR_ALLOC.EMPLID = ''' || $emplid || ''''
  if $empl_rcd_char <> ''
    let $where  = $where || ' and PS_CAR_ALLOC.EMPL_RCD = ' || to_char(#empl_rcd)
  end-if
  let $where  = $where || ' and PS_CAR_ALLOC.PLAN_TYPE = ''' || $plan_type || ''''
  let $where2 = ' and PS_CAR_ALLOC.EFFDT <= ''' || $tax_year_end_N || ''''
end-if

#ifdef TESTMODE
  print ' ' (+1,1)
  let $temp = '  $where: ' || $where
  print $temp (+1,1)
  let $temp = '  $where2: ' || $where2
  print $temp (+1,1)
#end-if

 let $old_emplid = ''
 let #car_count = 0

begin-select

PS_CAR_ALLOC.EFFDT
  do Reset-Variables
  let $allocation_effdt_N = &PS_CAR_ALLOC.EFFDT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($allocation_effdt_N, $allocation_effdt_YMD, {DEFYMD}, '', '')

PS_CAR_ALLOC.EMPLID
  let $current_emplid = &PS_CAR_ALLOC.EMPLID

PS_CAR_ALLOC.EMPL_RCD
  let #current_empl_rcd = &PS_CAR_ALLOC.EMPL_RCD

PS_CAR_ALLOC.CAR_ID
  let $car_id = &PS_CAR_ALLOC.CAR_ID

PS_CAR_ALLOC.START_DT
  let $allocation_start_N = &PS_CAR_ALLOC.START_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($allocation_start_N, $allocation_start_YMD, {DEFYMD}, '', '')

PS_CAR_ALLOC.END_DT
  let $allocation_end_N = &PS_CAR_ALLOC.END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($allocation_end_N, $allocation_end_YMD, {DEFYMD}, '', '')
  if $allocation_end_YMD = ''
    let $available_to_str = 'present'
  else
    let $available_to_str = $allocation_end_YMD
  end-if

PS_CAR_ALLOC.CAPITAL_CNTRB_AMT
  let #capital_cont = &PS_CAR_ALLOC.CAPITAL_CNTRB_AMT

PS_CAR_ALLOC.FUEL_PROVIDED_SW
  let $fuel_provided = &PS_CAR_ALLOC.FUEL_PROVIDED_SW

PS_CAR_ALLOC.FUEL_REIMBURSED_SW
  let $fuel_reimbursed = &PS_CAR_ALLOC.FUEL_REIMBURSED_SW

  if $current_emplid = $old_emplid
    let #car_count = #car_count + 1
  else
    let #car_count = 1
  end-if
  let $old_emplid = $current_emplid

PS_CAR_ALLOC.CAR_TYPE_CD
  evaluate &PS_CAR_ALLOC.CAR_TYPE_CD
     when = 'S'
        let $second_car = &PS_CAR_ALLOC.CAR_TYPE_CD
        break
     when-other
        break
  end-evaluate

#ifdef TESTMODE
  print ' ' (+1,1)
  print '----------- Got CAR_ALLOC row ----------------' (+1,1)
  let $temp = '  $current_emplid: ' || $current_emplid
  print $temp (+1,1)
  let $temp = '  #current_empl_rcd: ' || to_char(#current_empl_rcd)
  print $temp (+1,1)
  let $temp = '  $car_id: ' || $car_id
  print $temp (+1,1)
  let $temp = '  $fuel_provided: ' || $fuel_provided
  print $temp (+1,1)
  let $temp = '  $fuel_reimbursed: ' || $fuel_reimbursed
  print $temp (+1,1)
  let $temp = '  $second_car: ' || $second_car
  print $temp (+1,1)
  let $temp = '  #capital_cont: ' || to_char(#capital_cont)
  print $temp (+1,1)
  let $temp = '  $allocation_start_N: ' || $allocation_start_N
  print $temp (+1,1)
  let $temp = '  $allocation_start_YMD: ' || $allocation_start_YMD
  print $temp (+1,1)
  let $temp = '  $allocation_end_N: ' || $allocation_end_N
  print $temp (+1,1)
  let $temp = '  $allocation_end_YMD: ' || $allocation_end_YMD
  print $temp (+1,1)
  let $temp = '  $available_to_str: ' || $available_to_str
  print $temp (+1,1)
#end-if

  do Get-Car-Data

  ! We only want to process cars located in the UK

  if $car_country = 'GBR'

    do Get-Minimum-Emissions
    do Get-Car-Model
    do Get-Full-Model-Desc
    do Get-Emissions-Details
    do Get-Engine-Details
    do Get-Car-Extra
    do Get-Car-Payments
    do Get-Car-Mileage
    do Get-Unavailable


    if $classic_car = 'Y'
      let $p11d_note_dsc_uk = 'Special Case: Classic Car'
      do insert-note
    else
      if $engine_type = ''
        let $p11d_note_dsc_uk = 'Car Benefit Not calculated - no list price available'
        do insert-note
        let $p11d_note_dsc_uk = 'Check the car model is effective during the specified tax year'
        do insert-note
        let $engine_type = ' '
      else

        ! Calculate car benefit charge
        do Car-Benefit-Charge

        ! Calculate fuel benefit charge
        do Fuel-Benefit-Charge

      end-if

    end-if

    do Insert-P11D-SecA

  end-if

from PS_CAR_ALLOC
[$where]
[$where2]
order by EMPLID, CAR_ID

end-select

display ' '
display 'end-report'

end-procedure Process-Main

!-----------------------------------------------------------------------
! Delete any previous P11D record(s) for the given tax year end date.
!-----------------------------------------------------------------------
begin-procedure Delete-Existing

if $emplid = ''
  let $where = 'where PS_P11D_SEC_A_UK.TAX_YEAR_END_UK = ''' || $tax_year_end_uk || ''''
  if $empl_rcd_char <> ''
    let $where = $where || ' and PS_P11D_SEC_A_UK.EMPL_RCD = ' || to_char(#empl_rcd)
  end-if
else
  let $where = 'where PS_P11D_SEC_A_UK.EMPLID = ''' || $emplid || ''''
  if $empl_rcd_char <> ''
    let $where = $where || ' and PS_P11D_SEC_A_UK.EMPL_RCD = ' || to_char(#empl_rcd)
  end-if
  let $where = $where || ' and PS_P11D_SEC_A_UK.TAX_YEAR_END_UK = ''' || $tax_year_end_uk || ''''
end-if

#ifdef TESTMODE
  print ' ' (+1,1)
  let $temp = '  $where (delete p11d_sec_a_uk): ' || $where
  print $temp (+1,1)
#end-if

begin-sql on-error=sql-error
  DELETE from PS_P11D_SEC_A_UK
  [$where]
end-sql

if $emplid = ''
  let $where = 'where PS_P11D_NOTES_UK.TAX_YEAR_END_UK = ''' || $tax_year_end_uk || ''''
  if $empl_rcd_char <> ''
    let $where = $where || ' and PS_P11D_NOTES_UK.EMPL_RCD = ' || to_char(#empl_rcd)
  end-if
else
  let $where = 'where PS_P11D_NOTES_UK.EMPLID = ''' || $emplid || ''''
  if $empl_rcd_char = ''
    let $where = $where || ' and PS_P11D_NOTES_UK.EMPL_RCD = ' || to_char(#empl_rcd)
  end-if
  let $where = $where || ' and PS_P11D_NOTES_UK.TAX_YEAR_END_UK = ''' || $tax_year_end_uk || ''''
end-if
#ifdef TESTMODE
  print ' ' (+1,1)
  let $temp = '  $where (delete p11d_notes_uk): ' || $where
  print $temp (+1,1)
#end-if

begin-sql on-error=sql-error
  DELETE from PS_P11D_NOTES_UK
  [$where]
end-sql

end-procedure Delete-Existing

!-----------------------------------------------------------------------
! Reset variables for each allocation record selected
!-----------------------------------------------------------------------
begin-procedure Reset-Variables

  let $current_emplid        = ''
  let $car_id                = ''
  let $allocation_effdt_N    = ''
  let $allocation_effdt_YMD  = ''
  let $allocation_start_N    = ''
  let $allocation_start_YMD  = ''
  let $allocation_end_N      = ''
  let $allocation_end_YMD    = ''
  let $registration_dt_N     = ''
  let $registration_dt_YMD   = ''
  let $make_cd               = ''
  let $model                 = ''
  let $unavailable_start_N   = ''
  let $unavailable_start_YMD = ''
  let $unavailable_end_N     = ''
  let $unavailable_end_YMD   = ''
  let $make_and_model        = ''
  let $fuel_provided         = ''
  let $fuel_reimbursed       = ''
  let $engine_type           = ''
  let $classic_car           = ''
  let $car_country           = ''
  let $engine_code           = ''
  let $engine_long           = ''
  let $engine_short          = ''

  let #current_empl_rcd   = 0
  let #capital_cont       = 0
  let #payment_amt        = 0
  let #payment_received   = 0
  let #list_price         = 0
  let #c02_emissions      = 0
  let #c02_temp           = 0
  let #tax_percentage     = 0
  let #accessories_price1 = 0
  let #accessories_price2 = 0
  let #unavailable_days   = 0
  let #unavailable_days1  = 0
  let #unavailable_days2  = 0
  let #total_car_and_acc  = 0
  let #engine_size        = 0
  let #engine_base        = 0
  let #engine_percentage  = 0
  let #engine_gms         = 0
  let #min_emissions      = 0

  let #car_benefit_charge  = 0
  let #fuel_benefit_charge = 0

  let #p11d_note_no_uk    = 0
  let $p11d_note_dsc_uk   = ''

end-procedure Reset-Variables

!-----------------------------------------------------------------------
! Get car details
!-----------------------------------------------------------------------
begin-procedure Get-Car-Data

begin-select

PS_CAR_DATA.REGISTRATION_DT
  let $registration_dt_N = &PS_CAR_DATA.REGISTRATION_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($registration_dt_N, $registration_dt_YMD, {DEFYMD}, '', '')

PS_CAR_DATA.MANUFACT_CD
  let $make_cd = &PS_CAR_DATA.MANUFACT_CD

PS_CAR_DATA.MODEL_DESCR
  let $model = &PS_CAR_DATA.MODEL_DESCR

PS_CAR_DATA.CLASSIC_SW
  let $classic_car = &PS_CAR_DATA.CLASSIC_SW

PS_CAR_DATA.COUNTRY
  let $car_country = &PS_CAR_DATA.COUNTRY

#ifdef TESTMODE
  print '  ----------- Got CAR_DATA row ----------------' (+1,1)
  let $temp = '    $make_cd: ' || $make_cd
  print $temp (+1,1)
  let $temp = '    $model: ' || $model
  print $temp (+1,1)
  let $temp = '    $registration_dt_N: ' || $registration_dt_N
  print $temp (+1,1)
  let $temp = '    $registration_dt_YMD: ' || $registration_dt_YMD
  print $temp (+1,1)
  let $temp = '    $classic_car: ' || $classic_car
  print $temp (+1,1)
  let $temp = '    $car_country: ' || $car_country
  print $temp (+1,1)
#end-if

from PS_CAR_DATA
where PS_CAR_DATA.CAR_ID = $car_id

end-select

end-procedure Get-Car-Data


!-----------------------------------------------------------------------
! Get minimum emissions for the given tax year
!-----------------------------------------------------------------------
begin-procedure Get-Minimum-Emissions

begin-select

MIN(C02_EMISSIONS)   &min_emissions
  let #min_emissions = &min_emissions

from PS_EMISION_DATA_UK
where PS_EMISION_DATA_UK.TAX_YEAR_END_UK  = $tax_year_end_uk

end-select

#ifdef TESTMODE
  print '  ----------- Got minimum emissions details ----------------' (+1,1)
  let $temp = '    #min_emissions: ' || to_char(#min_emissions)
  print $temp (+1,1)
#end-if

end-procedure Get-Minimum-Emissions


!-----------------------------------------------------------------------
! Get car model
!-----------------------------------------------------------------------
begin-procedure Get-Car-Model

let $engine_size_1 = $off
let $engine_size_2 = $off
let $engine_size_3 = $off
let $c02_flag      = $false
let $check_flag    = $false

begin-select

PS_CAR_MODEL.LIST_COST
  let #list_price = &PS_CAR_MODEL.LIST_COST

PS_CAR_MODEL.ENGINE_TYPE_CD
  let $engine_type = &PS_CAR_MODEL.ENGINE_TYPE_CD

PS_CAR_MODEL.ENGINE_SIZE
  let #engine_size = &PS_CAR_MODEL.ENGINE_SIZE
  if #engine_size <= #engine_limit_1
    let $engine_size_1 = $on
  end-if
  if #engine_size > #engine_limit_1 and #engine_size <= #engine_limit_2
    let $engine_size_2 = $on
  end-if
  if #engine_size > #engine_limit_2
    let $engine_size_3 = $on
  end-if

PS_CAR_MODEL.C02_EMISSIONS
  let #c02_emissions = &PS_CAR_MODEL.C02_EMISSIONS
  let #c02_insert = #c02_emissions
  if #c02_emissions > 0 and #c02_emissions < #min_emissions
     let $c02_flag = $true
     let #c02_temp = #c02_emissions
     let #c02_insert = #c02_temp
     let #c02_emissions = #min_emissions
  end-if

from PS_CAR_MODEL
where PS_CAR_MODEL.MANUFACT_CD = $make_cd
  and PS_CAR_MODEL.MODEL_DESCR = $model
  and PS_CAR_MODEL.EFFDT       = (SELECT MAX(EFFDT)
                                  from PS_CAR_MODEL
                                  where MANUFACT_CD = $make_cd
                                    and MODEL_DESCR = $model
                                    and EFFDT      <= $tax_year_end_N)

end-select

#ifdef TESTMODE
  print '  ----------- Got CAR_MODEL row ----------------' (+1,1)
  let $temp = '    #list_price: ' || to_char(#list_price)
  print $temp (+1,1)
  let $temp = '    $engine_type: ' || $engine_type
  print $temp (+1,1)
  let $temp = '    #engine_size: ' || to_char(#engine_size)
  print $temp (+1,1)
  let $temp = '    #c02_emissions: ' || to_char(#c02_emissions)
  print $temp (+1,1)
#end-if

end-procedure Get-Car-Model

!-----------------------------------------------------------------------
! Get full model description, i.e. make and model
!-----------------------------------------------------------------------
begin-procedure Get-Full-Model-Desc

begin-select
PSXLATITEM.FIELDNAME
PSXLATITEM.FIELDVALUE

  let $FieldName = &PSXLATITEM.FIELDNAME
  let $FieldValue = &PSXLATITEM.FIELDVALUE
  do Read-Translate-Table
  let $make_and_model = rtrim($XlatLongName,' ') || ' ' || $model
  let $make_and_model = rtrim($make_and_model,' ')

from PSXLATITEM
where PSXLATITEM.EFF_STATUS  = $active
  and PSXLATITEM.FIELDNAME   = 'MANUFACT_CD'
  and PSXLATITEM.FIELDVALUE  = $make_cd
  and PSXLATITEM.EFFDT = (SELECT MAX(EFFDT) from PSXLATITEM
                         where PSXLATITEM.EFFDT  <= $AsOfToday
                           and PSXLATITEM.FIELDNAME   = 'MANUFACT_CD'
                           and PSXLATITEM.FIELDVALUE  = $make_cd)

end-select

#ifdef TESTMODE
  print '  ----------- Got full model description ----------------' (+1,1)
  let $temp = '    $make_and_model: ' || $make_and_model
  print $temp (+1,1)
#end-if

end-procedure Get-Full-Model-Desc

!-----------------------------------------------------------------------
! Get emissions percentage details
!-----------------------------------------------------------------------
begin-procedure Get-Emissions-Details

begin-select

PS_EMISION_DATA_UK.TAX_PERCENTAGE
  let #tax_percentage = &PS_EMISION_DATA_UK.TAX_PERCENTAGE

from PS_EMISION_DATA_UK
where PS_EMISION_DATA_UK.TAX_YEAR_END_UK  = $tax_year_end_uk
  and PS_EMISION_DATA_UK.C02_EMISSIONS = (SELECT MAX(C02_EMISSIONS) from PS_EMISION_DATA_UK
                                           where PS_EMISION_DATA_UK.C02_EMISSIONS  <= #c02_emissions)

end-select

#ifdef TESTMODE
  print '  ----------- Got emissions percentage details ----------------' (+1,1)
  let $temp = '    #tax_percentage: ' || to_char(#tax_percentage)
  print $temp (+1,1)
#end-if

end-procedure Get-Emissions-Details


!-----------------------------------------------------------------------
! Get engine details
!-----------------------------------------------------------------------
begin-procedure Get-Engine-Details

begin-select

PS_ENGINE_TYPE_UK.ENGINE_TYPE_CD
  let $engine_code = &PS_ENGINE_TYPE_UK.ENGINE_TYPE_CD

PS_ENGINE_TYPE_UK.ENGINE_TYPE_L_DESC
  let $engine_long = &PS_ENGINE_TYPE_UK.ENGINE_TYPE_L_DESC

PS_ENGINE_TYPE_UK.ENGINE_TYPE_S_DESC
  let $engine_short = &PS_ENGINE_TYPE_UK.ENGINE_TYPE_S_DESC

PS_ENGINE_TYPE_UK.BASE_DISCOUNT_PERC
  let #engine_base = &PS_ENGINE_TYPE_UK.BASE_DISCOUNT_PERC

PS_ENGINE_TYPE_UK.EMISION_DISCOUNT_P
  let #engine_percentage = &PS_ENGINE_TYPE_UK.EMISION_DISCOUNT_P

PS_ENGINE_TYPE_UK.EMISION_DISCOUNT_G
  let #engine_gms = &PS_ENGINE_TYPE_UK.EMISION_DISCOUNT_G

from PS_ENGINE_TYPE_UK
where PS_ENGINE_TYPE_UK.ENGINE_TYPE_CD  = $engine_type

end-select

#ifdef TESTMODE
  print '  ----------- Got engine details ----------------' (+1,1)
  let $temp = '    $engine_code: ' || $engine_code
  print $temp (+1,1)
  let $temp = '    $engine_long: ' || $engine_long
  print $temp (+1,1)
  let $temp = '    $engine_short: ' || $engine_short
  print $temp (+1,1)
  let $temp = '    #engine_base: ' || to_char(#engine_base)
  print $temp (+1,1)
  let $temp = '    #engine_percentage: ' || to_char(#engine_percentage)
  print $temp (+1,1)
  let $temp = '    #engine_gms: ' || to_char(#engine_gms)
  print $temp (+1,1)
#end-if

end-procedure Get-Engine-Details

!-----------------------------------------------------------------------
! Get car accessory details.
!-----------------------------------------------------------------------
begin-procedure Get-Car-Extra

! 1) Select accessories installed before or on start date of allocation.

begin-select

PS_CAR_EXTRA.EXTRA_COST
  add &PS_CAR_EXTRA.EXTRA_COST to #accessories_price1

#ifdef TESTMODE
  print '  ----------- Got CAR_EXTRA row (1) ----------------' (+1,1)
  let $temp = '    #accessories_price1: ' || to_char(#accessories_price1)
  print $temp (+1,1)
#end-if

from PS_CAR_EXTRA
where PS_CAR_EXTRA.CAR_ID      = $car_id
  and PS_CAR_EXTRA.INSTALL_DT <= $allocation_start_N
  and (PS_CAR_EXTRA.REMOVE_DT IS NULL or
       PS_CAR_EXTRA.REMOVE_DT >= $allocation_start_N)

end-select

  let #total_car_and_acc = #list_price + #accessories_price1


! 2) Select accessories installed after car made available to employee.

begin-select

EXTRA_COST
  add &EXTRA_COST to #accessories_price2

#ifdef TESTMODE
  print '  ----------- Got CAR_EXTRA row (2) ----------------' (+1,1)
  let $temp = '    #accessories_price2: ' || to_char(#accessories_price2)
  print $temp (+1,1)
#end-if

from PS_CAR_EXTRA
where CAR_ID = $car_id
  and EXTRA_COST >= #max_acc_price
  and INSTALL_DT >  $allocation_start_N
  and INSTALL_DT <  $tax_year_end_N
  and (REMOVE_DT IS NULL or
       REMOVE_DT >  $allocation_start_N)

end-select

end-procedure Get-Car-Extra

!-----------------------------------------------------------------------
! Calculate the total payments made towards private use of the car
!-----------------------------------------------------------------------
begin-procedure Get-Car-Payments

begin-select

PS_CAR_PAYMENTS.PAYMENT_AMT
  let #payment_amt = &PS_CAR_PAYMENTS.PAYMENT_AMT
  add #payment_amt to #payment_received

#ifdef TESTMODE
  print '  ----------- Got CAR_PAYMENTS row ----------------' (+1,1)
  let $temp = '    #payment_amt: ' || to_char(#payment_amt)
  print $temp (+1,1)
  let $temp = '    #payment_received: ' || to_char(#payment_received)
  print $temp (+1,1)
#end-if

from PS_CAR_PAYMENTS
where PS_CAR_PAYMENTS.EMPLID      = $current_emplid
  and PS_CAR_PAYMENTS.EMPL_RCD    = #current_empl_rcd
  and PS_CAR_PAYMENTS.PLAN_TYPE   = $plan_type
  and PS_CAR_PAYMENTS.EFFDT       = $allocation_effdt_N
  and PS_CAR_PAYMENTS.CAR_ID      = $car_id
  and PS_CAR_PAYMENTS.PAYMENT_DT >= $tax_year_st_N
  and PS_CAR_PAYMENTS.PAYMENT_DT <= $tax_year_end_N

end-select

end-procedure Get-Car-Payments

!-----------------------------------------------------------------------
! Get business mileage.
! For the purpose of P11D the actual (not estimated) mileage is required.
!-----------------------------------------------------------------------
begin-procedure Get-Car-Mileage

  let $business_mileage_1 = $unknown
  let $business_mileage_2 = $unknown
  let $business_mileage_3 = $unknown

begin-select

PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK
  let $business_mileage_1 = $off
  let $business_mileage_2 = $off
  let $business_mileage_3 = $off
  if &PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK = $low
    let $business_mileage_1 = $on
  end-if
  if &PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK = $medium
    let $business_mileage_2 = $on
  end-if
  if &PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK = $high
    let $business_mileage_3 = $on
  end-if

#ifdef TESTMODE
  print '  ----------- Got CAR_MILEAGE_UK row ----------------' (+1,1)
  let $temp = '    &PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK: ' || &PS_CAR_MILEAGE_UK.MILEAGE_CODE_UK
  print $temp (+1,1)
  let $temp = '    $business_mileage_1: ' || $business_mileage_1
  print $temp (+1,1)
  let $temp = '    $business_mileage_2: ' || $business_mileage_2
  print $temp (+1,1)
  let $temp = '    $business_mileage_3: ' || $business_mileage_3
  print $temp (+1,1)
#end-if

from PS_CAR_MILEAGE_UK
where PS_CAR_MILEAGE_UK.EMPLID          = $current_emplid
  and PS_CAR_MILEAGE_UK.EMPL_RCD        = #current_empl_rcd
  and PS_CAR_MILEAGE_UK.PLAN_TYPE       = $plan_type
  and PS_CAR_MILEAGE_UK.EFFDT           = $allocation_effdt_N
  and PS_CAR_MILEAGE_UK.CAR_ID          = $car_id
  and PS_CAR_MILEAGE_UK.MILEAGE_TYPE_UK = $actual_mileage
  and PS_CAR_MILEAGE_UK.TAX_YEAR_END_UK = $tax_year_end_uk

end-select

end-procedure Get-Car-Mileage

!-----------------------------------------------------------------------
! Get periods of unavailability
!-----------------------------------------------------------------------
begin-procedure Get-Unavailable

  !---------------------------------------------------------------------
  ! Step 1. Unavailability within the allocation period.
  !---------------------------------------------------------------------
begin-select

PS_CAR_NOTINUSE.START_DT
  let $unavailable_start_N = &PS_CAR_NOTINUSE.START_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($unavailable_start_N, $unavailable_start_YMD, {DEFYMD}, '', '')

PS_CAR_NOTINUSE.END_DT
  let $unavailable_end_N = &PS_CAR_NOTINUSE.END_DT
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($unavailable_end_N, $unavailable_end_YMD, {DEFYMD}, '', '')

  ! Check overlap with allocation dates
  if $unavailable_start_YMD < $allocation_start_YMD
    let $unavailable_start_YMD = $allocation_start_YMD
  end-if
  if $allocation_end_YMD != '' and $unavailable_end_YMD > $allocation_end_YMD
    let $unavailable_end_YMD = $allocation_end_YMD
  end-if

  ! check period of unavailability is long enough
  do dtu-diff-days($unavailable_start_YMD, $unavailable_end_YMD, #diff_days)

  if #diff_days >= #period_length

    ! period is long enough, but the period may overlap tax years.
    ! Only the period within the tax year is relevent.
    if $unavailable_start_YMD < $tax_year_st_YMD
      let $tax_st_dt = $tax_year_st_YMD
    else
      let $tax_st_dt = $unavailable_start_YMD
    end-if
    if $unavailable_end_YMD > $tax_year_end_YMD
      let $tax_end_dt = $tax_year_end_YMD
    else
      let $tax_end_dt = $unavailable_end_YMD
    end-if

    ! Calculate length of period
    do dtu-diff-days($tax_st_dt, $tax_end_dt, #period_days)

    ! add to total unavailable days.
    let #unavailable_days = #unavailable_days + #period_days

  end-if

#ifdef TESTMODE
  print '  ----------- Got CAR_NOTINUSE row (1) ----------------' (+1,1)
  let $temp = '    $unavailable_start_YMD: ' || $unavailable_start_YMD
  print $temp (+1,1)
  let $temp = '    $unavailable_end_YMD: ' || $unavailable_end_YMD
  print $temp (+1,1)
  let $temp = '    #unavailable_days: ' || to_char(#unavailable_days)
  print $temp (+1,1)
#end-if

from PS_CAR_NOTINUSE
where PS_CAR_NOTINUSE.EMPLID          = $current_emplid
  and PS_CAR_NOTINUSE.EMPL_RCD       = #current_empl_rcd
  and PS_CAR_NOTINUSE.PLAN_TYPE       = $plan_type
  and PS_CAR_NOTINUSE.CAR_ID          = $car_id
  and PS_CAR_NOTINUSE.EFFDT           = $allocation_effdt_N
  and PS_CAR_NOTINUSE.START_DT        < $tax_year_end_N
  and ( PS_CAR_NOTINUSE.END_DT > $tax_year_st_N or
        PS_CAR_NOTINUSE.END_DT IS NULL )

end-select

  !---------------------------------------------------------------------
  ! Step 2. Unavailability outside the allocation period. i.e. employee
  ! only had a car for part of the tax year.
  !---------------------------------------------------------------------
  if $allocation_start_YMD > $tax_year_st_YMD
    ! Calculate length of period
    do dtu-diff-days($tax_year_st_YMD, $allocation_start_YMD, #unavailable_days1)
    let #unavailable_days1 = #unavailable_days1 - 1
  end-if
  if $allocation_end_YMD != '' and $allocation_end_YMD < $tax_year_end_YMD
    ! Calculate length of period
    do dtu-diff-days($allocation_end_YMD, $tax_year_end_YMD, #unavailable_days2)
    let #unavailable_days2 = #unavailable_days2 - 1
  end-if
  ! add to total unavailable days.
  let #unavailable_days = #unavailable_days + #unavailable_days1 + #unavailable_days2

#ifdef TESTMODE
  print '  ----------- After 2nd unavailability check ----------------' (+1,1)
  let $temp = '    #unavailable_days: ' || to_char(#unavailable_days)
  print $temp (+1,1)
#end-if

end-procedure Get-Unavailable

!-----------------------------------------------------------------------
! Insert record into PS_P11D_NOTES_UK table
!-----------------------------------------------------------------------
begin-procedure insert-note

  let #p11d_note_no_uk = #p11d_note_no_uk + 1

BEGIN-SQL ON-ERROR=SQL-ERROR

  INSERT INTO PS_P11D_NOTES_UK
  (EMPLID,
   EMPL_RCD,
   TAX_YEAR_END_UK,
   CAR_ID,
   P11D_NOTE_NO_UK,
   P11D_NOTE_DSC_UK
  )
  values
  ($current_emplid,
   #current_empl_rcd,
   $tax_year_end_uk,
   $car_id,
   #p11d_note_no_uk,
   $p11d_note_dsc_uk
  )

end-sql

end-procedure insert-note

!-----------------------------------------------------------------------
! Insert record into PS_P11D_SEC_A_UK table
!-----------------------------------------------------------------------
begin-procedure Insert-P11D-SecA

#ifdef SYBASE
 ! workaround due to SQR/Sybase problem inserting numbers with > 2 dec places
  let #fuel_benefit_charge = round(#fuel_benefit_charge, 2)
  let #car_benefit_charge  = round(#car_benefit_charge, 2)
  let #accessories_price1  = round(#accessories_price1, 2)
  let #accessories_price2  = round(#accessories_price2, 2)
  let #total_car_and_acc   = round(#total_car_and_acc, 2)
  let #payment_received    = round(#payment_received, 2)
  let #list_price          = round(#list_price, 2)
  let #capital_cont        = round(#capital_cont, 2)
  let #unavailable_days    = round(#unavailable_days, 2)

  let $str     = to_char(#car_benefit_charge)
  let #dec_pos = instr($str, '.', 1)
  let #str_len = length($str)
  if #dec_pos <> 0
    if #str_len - #dec_pos > 2
      ! SQR error. Rounding sometimes fails
      let #car_benefit_charge = 0
      let $p11d_note_dsc_uk = 'SQR/Sybase Error - Could Not Insert Into P11D Table Due to Rounding error. Value: ' || to_char(#work_amount)
      do insert-note
    end-if
  end-if
#endif

BEGIN-SQL ON-ERROR=SQL-ERROR

  INSERT INTO PS_P11D_SEC_A_UK
  (EMPLID,
   EMPL_RCD,
   TAX_YEAR_END_UK,
   CAR_ID,
   MAKE_AND_MODEL,
   REGISTRATION_DT,
   AVAILABLE_FROM_DT,
   AVAILABLE_TO_DT,
   AVAILABLE_TO_STR,
   BUSINESS_MILEAGE_1,
   BUSINESS_MILEAGE_2,
   BUSINESS_MILEAGE_3,
   UNAVAILABLE_DAYS,
   PAYMENT_RECEIVED,
   LIST_PRICE,
   ACCESSORIES_PRICE1,
   ACCESSORIES_PRICE2,
   TOTAL_CAR_AND_ACC,
   CAPITAL_CONT,
   CAR_BENEFIT_CHARGE,
   FUEL_PROVIDED,
   FUEL_REIMBURSED,
   ENGINE_TYPE_CD,
   ENGINE_SIZE_1,
   ENGINE_SIZE_2,
   ENGINE_SIZE_3,
   FUEL_BEN_CHARGE,
   C02_EMISSIONS,
   TAX_PERCENTAGE
  )
  values
  ($current_emplid,
   #current_empl_rcd,
   $TAX_YEAR_END_UK,
   $car_id,
   $make_and_model,
   $registration_dt_N,
   $allocation_start_N,
   $allocation_end_N,
   $available_to_str,
   $business_mileage_1,
   $business_mileage_2,
   $business_mileage_3,
   #unavailable_days,
   #payment_received,
   #list_price,
   #accessories_price1,
   #accessories_price2,
   #total_car_and_acc,
   #capital_cont,
   #car_benefit_charge,
   $fuel_provided,
   $fuel_reimbursed,
   $engine_type,
   $engine_size_1,
   $engine_size_2,
   $engine_size_3,
   #fuel_benefit_charge,
   #c02_insert,
   #tax_percentage
  )

end-sql

end-procedure Insert-P11D-SecA

!-----------------------------------------------------------------------
! Include files
!-----------------------------------------------------------------------
#include 'askcar.sqc'    !Ask values for parameters
#include 'car001.sqc'    !Calculation rules for car & fuel benefit charge

#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
