!*************************************
!  FGPY014:  Pre-Leave Accruals      *
!*************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:03:47:39                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!
!***********************************************************************
!
!
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup02.sqc'   !Printer and page-size initialization

#define col_sep                  1   !Column Separator
#define col_emplid               9   !Employee ID
#define col_class               18   !Accrual Class
#define col_message             60   !Message

begin-setup

  declare-variable
    date $startdt
    date $enddt
    integer #diff
  end-declare

end-setup

begin-report

  do Init-Report

  do Array-Initialization

  do Process-Main

  do Stdapi-Term
end-report

begin-procedure Init-Report

  let #cnt-insert = 0
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  move 0 to $RowCounter

  move 'FGPY014' to $ReportID

  do Stdapi-Init
  do Get-Report-Language

  let $ReportTitle  = $REPORTTITLE
  display  'Report ID: ' noline
  display $ReportID

end-procedure

!*---------------------------------------------------------------------*
Begin-Procedure Report-Translation

  do Init_Report_Translation ($ReportID, $language_cd)

  do Get_Field_Information ('FGPY014','REPORT_TITLE', $REPORTTITLE, #CW)
  do Get_Field_Information ('FGPY014','EMPLID',       $ID,          #CW)
  do Get_Field_Information ('FGPY014','CLASS',        $CLASS,       #CW)
  do Get_Field_Information ('FGPY014','MESSAGE',      $MESSAGE,     #CW)
  do Get_Field_Information ('FGPY014','PAYCALC',      $PAYCALC,     #CW)

End-Procedure

!*---------------------------------------------------------------------*
begin-heading 6
  #Include 'stdhdgtr.sqc'

  print $ID                (+2,1,{col_emplid})
  print $CLASS             (0,+{col_sep},{col_class})
  print $MESSAGE           (0,+{col_sep},{col_message})

  print '_'                (+1,1,{col_emplid})              Fill
  print '_'                (0,+{col_sep},{col_class})       Fill
  print '_'                (0,+{col_sep},{col_message})     Fill

end-heading


!*---------------------------------------------------------------------*
begin-procedure Array-Initialization

  create-array name=Erncd                 -
               size=100                   -
               field=erncd:char           -
               field=eclass:char:25       -
               field=eacc-type:char:25     -
               field=r-adj-hrs:char:25    -
               field=r-tak-hrs:char:25    -
               field=earn-hrs:char:25     -
               field=take-hrs:char:25     -
               field=svc-hrs:char:25      -
               field=adj-hrs:char:25      -
               field=bought-hrs:char:25   -
               field=sold-hrs:char:25


  create-array name=Plans                 -
               size=100                   -
               field=pclass:char          -
               field=frequency:char       -
               field=awd-period:char      -
               field=awd-yr-type:char     -
               field=svc-interval:char    -
               field=yr-begin-calc:char   -
               field=max-ceiling:integer  -
               field=max-cover:number     -
               field=gf-coord:char        -
               field=check-nonpay:char    -
               field=allow-neg:char       -
               field=interval:integer:25  -
               field=hours:number:25      -
               field=suppl-hours:number:25

  create-array name=Earnings              -
               size=100                   -
               field=eerncd:char          -
               field=hrs:number           -
               field=earns:number         -
               field=hrate:number

  create-array name=Summary               -
               size=100                   -
               field=emplid:char          -
               field=empl-rcd:number      -
               field=saccrual:char        -
               field=acc-type:char        -
               field=effdt:date           -
               field=hrs-cover:number     -
               field=hrs-earn:number      -
               field=hrs-taken:number     -
               field=hrs-adj:number       -
               field=hrs-bought:number    -
               field=hrs-sold:number      -
               field=hrs-forfeit:number   -
               field=service-hrs:number   -
               field=svc-hrs-rem:number   -
               field=nonpay-hrs:number    -
               field=cr-reduc:number      -
               field=max-cover:number     -
               field=gfath-cover:number   -
               field=mustuse:number       -
               field=r_hrs_1:number       -
               field=r_hrs_tak_1:number   -
               field=r-exp-1:date         -
               field=r_hrs_2:number       -
               field=r_hrs_tak_2:number   -
               field=r-exp-2:date         -
               field=r_hrs_3:number       -
               field=r_hrs_tak_3:number   -
               field=r-exp-3:date         -
               field=svc-date:date        -
               field=std-hrs:number       -
               field=svc-hrs:number       -
               field=c-accrual:number     -
               field=c-proj-accr:number   -
               field=rest-hrs-adj:number  -
               field=rest-hrs-tak:number


end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Main

  if $Prcs_Process_Instance = ''

    input $RunId maxlen=3 'Enter Payroll Run ID' type=char
    uppercase $Runid
  else
      Do Select-Parameters
      let $RunId = &RUN_CNTL_FG.RUN_ID
  end-if

  Do Load-Plan-Table

  Do Load-Plan-Erncd

  Do Delete-Wrk-Table

  Do Process-Run-Id

end-procedure


!*---------------------------------------------------------------------*
begin-procedure  Load-Plan-Table

let #P1 = 0

begin-SELECT
PLAN1.GVT_ERN_ACCR_CLASS
PLAN1.EFFDT
PLAN1.ACCRUAL_FREQUENCY
PLAN1.GVT_ACCR_PAY_PD
PLAN1.GVT_ACCR_YEAR_TYPE
PLAN1.SERVICE_INTERVAL
PLAN1.YEAR_BEGIN_CALC
PLAN1.GVT_MAX_CEILING
PLAN1.MAXIMUM_CARRYOVER
PLAN1.GVT_COORD_WITH_GF
PLAN1.GVT_CHK_NONPAY_HRS
PLAN1.HRS_GO_NEGATIVE

 put &PLAN1.GVT_ERN_ACCR_CLASS
     &PLAN1.ACCRUAL_FREQUENCY
     &PLAN1.GVT_ACCR_PAY_PD
     &PLAN1.GVT_ACCR_YEAR_TYPE
     &PLAN1.SERVICE_INTERVAL
     &PLAN1.YEAR_BEGIN_CALC
     &PLAN1.GVT_MAX_CEILING
     &PLAN1.MAXIMUM_CARRYOVER
     &PLAN1.GVT_COORD_WITH_GF
     &PLAN1.GVT_CHK_NONPAY_HRS
     &PLAN1.HRS_GO_NEGATIVE
     into Plans(#P1)

  Do Load-Rate-Table

  let #P1 = #P1 + 1

FROM PS_GVT_ERN_ACR_CLS PLAN1
WHERE PLAN1.EFF_STATUS = 'A'
  AND PLAN1.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_GVT_ERN_ACR_CLS PLAN2
    WHERE PLAN2.GVT_ERN_ACCR_CLASS = PLAN1.GVT_ERN_ACCR_CLASS
      AND PLAN2.EFFDT <= $AsOfToday)
ORDER BY
PLAN1.GVT_ERN_ACCR_CLASS

end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure  Load-Plan-Erncd

let #E1 = 0
let #E2 = 0
let $First-Time = 'Y'

begin-SELECT
ERN.ERNCD
ERN.GVT_ERN_ACCR_CLASS
ERNC.GVT_EARN_TYPE
ERN.GVT_R_ADJ_HRS_ADD
ERN.GVT_R_TAK_HRS_ADD
ERN.GVT_HRS_EARN_ADD
ERN.HRS_TAKEN_ADD
ERN.SERVICE_HRS_ADD
ERN.ADJUST_HRS_ADD
ERN.BOUGHT_HRS_ADD
ERN.SOLD_HRS_ADD

  if $First-Time = 'Y'
      let $First-Time = 'N'
      let $earn-code = &ERN.ERNCD
  end-if

  if &ERN.ERNCD <> $earn-code
      let #E1 = #E1 + 1
      let #E2 = 0
  end-if

  put &ERN.ERNCD              into Erncd(#E1) erncd
  put &ERN.GVT_ERN_ACCR_CLASS into Erncd(#E1) eclass(#E2)
  put &ERNC.GVT_EARN_TYPE     into Erncd(#E1) eacc-type(#E2)
  put &ERN.GVT_R_ADJ_HRS_ADD  into Erncd(#E1) r-adj-hrs(#E2)
  put &ERN.GVT_R_TAK_HRS_ADD  into Erncd(#E1) r-tak-hrs(#E2)
  put &ERN.GVT_HRS_EARN_ADD   into Erncd(#E1) earn-hrs(#E2)
  put &ERN.HRS_TAKEN_ADD      into Erncd(#E1) take-hrs(#E2)
  put &ERN.SERVICE_HRS_ADD    into Erncd(#E1) svc-hrs(#E2)
  put &ERN.ADJUST_HRS_ADD     into Erncd(#E1) adj-hrs(#E2)
  put &ERN.BOUGHT_HRS_ADD     into Erncd(#E1) bought-hrs(#E2)
  put &ERN.SOLD_HRS_ADD       into Erncd(#E1) sold-hrs(#E2)

  let $earn-code = &ERN.ERNCD
  let #E2 = #E2 + 1

FROM PS_GVT_ACC_ERNCD ERN,
     PS_GVT_ERN_ACR_CLS ERNC
WHERE ERN.GVT_ERN_ACCR_CLASS = ERNC.GVT_ERN_ACCR_CLASS
  AND ERN.EFFDT = ERNC.EFFDT
  AND ERN.EFFDT <= $AsOfToday
  AND ERNC.EFF_STATUS = 'A'
ORDER BY
 ERN.ERNCD
,ERN.GVT_ERN_ACCR_CLASS

end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure  Load-Rate-Table

let #R1 = 0

begin-SELECT
R1.GVT_ERN_ACCR_CLASS
R1.SERVICE_INTERVALS
R1.HOURS_EARNED
R1.GVT_SUPPL_HRS

  put &R1.SERVICE_INTERVALS
      &R1.HOURS_EARNED
      &R1.GVT_SUPPL_HRS
      into Plans(#P1)
      interval(#R1)
      hours(#R1)
      suppl-hours(#R1)


  let #R1 = #R1 + 1

FROM PS_GVT_ACC_RT_TBL R1
WHERE R1.GVT_ERN_ACCR_CLASS = &PLAN1.GVT_ERN_ACCR_CLASS
  AND R1.EFFDT = &PLAN1.EFFDT
ORDER BY
  R1.GVT_ERN_ACCR_CLASS
 ,R1.SERVICE_INTERVALS DESC

end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Run-Id

begin-SELECT
CAL.COMPANY
CAL.PAYGROUP
CAL.PAY_BEGIN_DT
CAL.PAY_END_DT
CAL.PAY_PERIOD
CAL.PAY_PRECALC_RUN
CAL.PAY_CALC_RUN
CAL.PAY_OFF_CYCLE_CAL
CAL.PERIOD_WEEKS
CAL.GVT_CY_BEGIN
CAL.GVT_LY_BEGIN
CAL.GVT_PY_BEGIN
CAL.GVT_FY_BEGIN
CAL.GVT_LY_ENDS

  if &CAL.PAY_PRECALC_RUN = 'N' AND
     &CAL.PAY_CALC_RUN = 'N'
      let $EMPLID_ER = &CAL.COMPANY
      let $CLASS_ER = &CAL.PAYGROUP
      let $ERROR_ER = $PAYCALC
      Do Print-Err-Msg
  else
      Do Retrieve-Pay-Frequency
      Do Process-Accruals
  end-if

FROM PS_PAY_CALENDAR CAL
WHERE CAL.RUN_ID = $RunId

end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Delete-Wrk-Table

begin-sql
DELETE FROM PS_GVT_ACR_SUM_WRK
end-sql

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Retrieve-Pay-Frequency

begin-SELECT
PF.PAY_FREQUENCY

FROM PS_PAYGROUP_TBL PF
WHERE PF.COMPANY = &CAL.COMPANY
  AND PF.PAYGROUP = &CAL.PAYGROUP
  AND PF.EFFDT = (SELECT MAX(EFFDT) FROM PS_PAYGROUP_TBL PF1
      WHERE PF1.COMPANY = PF.COMPANY
        AND PF1.PAYGROUP = PF.PAYGROUP
        AND PF1.EFFDT <= &CAL.PAY_END_DT)
end-SELECT

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Accruals

let $First-Time = 'Y'
let #EA1 = 0

begin-SELECT
PE.EMPLID
PE.EMPL_RCD
PE.OFF_CYCLE
PE.PAGE_NUM
PE.LINE_NUM
PE.ADDL_NBR
PE.SEPCHK
PE.ERNCD_REG_HRS
PE.REG_HRS
PE.REG_HRLY_EARNS
PE.ERNCD_OT_HRS
PE.OT_HRS
PE.OT_HRLY_EARNS
PE.ERNCD_REG_EARNS
PE.REG_EARN_HRS
PE.REG_EARNS
PE.HOURLY_RT

  if $First-Time = 'Y'
      let $First-Time = 'N'
      let $Emplid   = &PE.EMPLID
      let #Empl-Rcd = &PE.EMPL_RCD
  end-if

  if &PE.EMPLID = $Emplid AND
     &PE.EMPL_RCD = #Empl-Rcd
      Do Load-Earnings-Hours
  else
      Do Load-Oth-Earnings
      Do Process-Enrollments
      Do Process-Hours
      Do Process-Adjustments
      Do Process-Accrual-Award
      Do Insert-Summary-Wrk

      Clear-array name=Earnings
      Clear-array name=Summary

      let #EA1 = 0
      Do Load-Earnings-Hours
  end-if

  let $Emplid   = &PE.EMPLID
  let #Empl-Rcd = &PE.EMPL_RCD

FROM PS_PAY_EARNINGS PE,
     PS_PAY_CHECK PC
WHERE PC.PAYCHECK_STATUS IN ('C','F')
 AND  PE.COMPANY = &CAL.COMPANY
 AND  PE.PAYGROUP = &CAL.PAYGROUP
 AND  PE.PAY_END_DT = &CAL.PAY_END_DT
 AND  PE.OFF_CYCLE = &CAL.PAY_OFF_CYCLE_CAL
 AND  PE.PAY_SHEET_SRC <> 'O'
 AND  PC.COMPANY = PE.COMPANY
 AND  PC.PAYGROUP = PE.PAYGROUP
 AND  PC.PAY_END_DT = PE.PAY_END_DT
 AND  PC.OFF_CYCLE = PE.OFF_CYCLE
 AND  PC.PAGE_NUM = PE.PAGE_NUM
 AND  PC.LINE_NUM = PE.LINE_NUM
 AND  PC.SEPCHK = PE.SEPCHK

end-select

  Do Load-Oth-Earnings
  Do Process-Enrollments
  Do Process-Hours
  Do Process-Adjustments
  Do Process-Accrual-Award
  Do Insert-Summary-Wrk
  Clear-array name=Earnings
  Clear-array name=Summary

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Load-Earnings-Hours

  if &PE.REG_HRS <> 0
      put &PE.ERNCD_REG_HRS
          &PE.REG_HRS
          &PE.REG_HRLY_EARNS
          &PE.HOURLY_RT
          into Earnings(#EA1)
      let #EA1 = #EA1 + 1
  end-if

  if &PE.OT_HRS <> 0
      put &PE.ERNCD_OT_HRS
          &PE.OT_HRS
          &PE.OT_HRLY_EARNS
          &PE.HOURLY_RT
          into Earnings(#EA1)
      let #EA1 = #EA1 + 1
  end-if

  if &PE.REG_EARN_HRS <> 0
      put &PE.ERNCD_REG_EARNS
          &PE.REG_EARN_HRS
          &PE.REG_EARNS
          &PE.HOURLY_RT
          into Earnings(#EA1)
      let #EA1 = #EA1 + 1
  end-if

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Load-Oth-Earnings

begin-SELECT
POE.PAGE_NUM
POE.LINE_NUM
POE.ADDL_NBR
POE.SEPCHK
POE.ERNCD
POE.OTH_HRS
POE.OTH_EARNS

  if &POE.OTH_HRS <> 0
      let #hourly-rate = (&POE.OTH_EARNS / &POE.OTH_HRS)
  else
      let #hourly-rate = 0
  end-if

  if &POE.OTH_HRS <> 0
      put &POE.ERNCD
          &POE.OTH_HRS
          &POE.OTH_EARNS
          #hourly-rate
          into Earnings(#EA1)
      let #EA1 = #EA1 + 1
  end-if

FROM PS_PAY_OTH_EARNS POE
WHERE POE.COMPANY = &CAL.COMPANY
 AND  POE.PAYGROUP = &CAL.PAYGROUP
 AND  POE.PAY_END_DT = &CAL.PAY_END_DT
 AND  POE.OFF_CYCLE = $Off-Cycle
 AND  POE.PAGE_NUM = #Page-No
 AND  POE.LINE_NUM = #Line-No
 AND  POE.ADDL_NBR = #Addl-No
end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Enrollments

let #S1 = 0
let #EMP = 0

begin-SELECT
ACP.EMPLID
ACP.EMPL_RCD
ACP.GVT_ERN_ACCR_CLASS
AC.GVT_EARN_TYPE
ACP.GVT_GFATH_CYOVER
ACP.GVT_ALT_WORK_SCHED
ACP.EFFDT
ACP.COVERAGE_ELECT_DT
EMP.SERVICE_DT
JOB.STD_HOURS

  let #EMP = #EMP + 1
  Do Get-Summary-Records
  if #EMP <> #S1
      Do Insert-New-Summ
      let #S1 = #S1 + 1
  end-if

FROM PS_GVT_ACCR_PLAN ACP
    ,PS_GVT_ERN_ACR_CLS AC
    ,PS_EMPLOYMENT EMP
    ,PS_JOB JOB
WHERE ACP.EMPLID = $Emplid
  AND ACP.EMPL_RCD = #Empl-Rcd
  AND ACP.COVERAGE_ELECT = 'E'
  AND ACP.GVT_ERN_ACCR_CLASS = AC.GVT_ERN_ACCR_CLASS
  AND EMP.EMPLID = ACP.EMPLID
  AND EMP.EMPL_RCD = ACP.EMPL_RCD
  AND ACP.EFFDT = (SELECT MAX(EFFDT) FROM PS_GVT_ACCR_PLAN AP1
      WHERE AP1.GVT_ERN_ACCR_CLASS = ACP.GVT_ERN_ACCR_CLASS
        AND AP1.EMPLID = ACP.EMPLID
        AND AP1.EMPL_RCD = ACP.EMPL_RCD
        AND AP1.EFFDT <= &CAL.PAY_END_DT)
  AND AC.EFFDT = (SELECT MAX(EFFDT) FROM PS_GVT_ERN_ACR_CLS AC1
      WHERE AC1.GVT_ERN_ACCR_CLASS = AC.GVT_ERN_ACCR_CLASS
        AND AC1.EFFDT <= &CAL.PAY_END_DT)
  AND JOB.EMPLID = ACP.EMPLID
  AND JOB.EMPL_RCD = ACP.EMPL_RCD
  AND JOB.EFFDT= (SELECT MAX(EFFDT) FROM PS_JOB JOB1
      WHERE JOB1.EMPLID = JOB.EMPLID
        AND JOB1.EMPL_RCD = JOB.EMPL_RCD
        AND JOB1.EFFDT <= &CAL.PAY_END_DT)
  AND JOB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB JOB2
      WHERE JOB2.EMPLID = JOB.EMPLID
        AND JOB2.EMPL_RCD = JOB.EMPL_RCD
        AND JOB2.EFFDT = JOB.EFFDT)
 ORDER BY
  ACP.GVT_ERN_ACCR_CLASS ASC

end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Get-Summary-Records

let $class-found = 'N'
let #enr-cnt = 0

begin-SELECT
SUMM.GVT_ERN_ACCR_CLASS
SUMM.GVT_EARN_TYPE
SUMM.EFFDT
SUMM.HRS_CARRYOVER
SUMM.HRS_EARNED_YTD
SUMM.HRS_TAKEN_YTD
SUMM.HRS_ADJUST_YTD
SUMM.HRS_BOUGHT_YTD
SUMM.HRS_SOLD_YTD
SUMM.GVT_FORFEIT_YTD
SUMM.GVT_SERVICE_YTD
SUMM.GVT_SVC_HRS_REMAIN
SUMM.GVT_NONPAY_YTD
SUMM.GVT_CR_REDUC_YTD
SUMM.MAXIMUM_CARRYOVER
SUMM.GVT_GFATH_CYOVER
SUMM.GVT_MUSTUSE_YTD
SUMM.GVT_R_HRS_1
SUMM.GVT_R_HRS_TAK_1
SUMM.GVT_R_EXPIRE_DT_1
SUMM.GVT_R_HRS_2
SUMM.GVT_R_HRS_TAK_2
SUMM.GVT_R_EXPIRE_DT_2
SUMM.GVT_R_HRS_3
SUMM.GVT_R_HRS_TAK_3
SUMM.GVT_R_EXPIRE_DT_3

  if &SUMM.GVT_ERN_ACCR_CLASS = &ACP.GVT_ERN_ACCR_CLASS
      let $class-found = 'Y'
      if #enr-cnt >= 1
          let #S1 = #S1 - 1
      end-if
  end-if

  put $Emplid
      #Empl-Rcd
      &ACP.GVT_ERN_ACCR_CLASS
      &AC.GVT_EARN_TYPE
      &CAL.PAY_END_DT
      &SUMM.HRS_CARRYOVER
      &SUMM.HRS_EARNED_YTD
      &SUMM.HRS_TAKEN_YTD
      &SUMM.HRS_ADJUST_YTD
      &SUMM.HRS_BOUGHT_YTD
      &SUMM.HRS_SOLD_YTD
      &SUMM.GVT_FORFEIT_YTD
      &SUMM.GVT_SERVICE_YTD
      &SUMM.GVT_SVC_HRS_REMAIN
      &SUMM.GVT_NONPAY_YTD
      &SUMM.GVT_CR_REDUC_YTD
      &SUMM.MAXIMUM_CARRYOVER
      &SUMM.GVT_GFATH_CYOVER
      &SUMM.GVT_MUSTUSE_YTD
      &SUMM.GVT_R_HRS_1
      &SUMM.GVT_R_HRS_TAK_1
      &SUMM.GVT_R_EXPIRE_DT_1
      &SUMM.GVT_R_HRS_2
      &SUMM.GVT_R_HRS_TAK_2
      &SUMM.GVT_R_EXPIRE_DT_2
      &SUMM.GVT_R_HRS_3
      &SUMM.GVT_R_HRS_TAK_3
      &SUMM.GVT_R_EXPIRE_DT_3
      &EMP.SERVICE_DT
      into Summary(#S1)

  let #S1 = #S1 + 1
  let #enr-cnt = #enr-cnt + 1

  if $class-found = 'Y'
      exit-select
  end-if

FROM PS_GVT_ACCR_SUMM SUMM
WHERE SUMM.EMPLID = $Emplid
  AND SUMM.EMPL_RCD = #Empl-Rcd
  AND SUMM.EFFDT = (SELECT MAX(EFFDT) FROM PS_GVT_ACCR_SUMM SUMM1
      WHERE SUMM1.EMPLID = SUMM.EMPLID
        AND SUMM1.EMPL_RCD = SUMM.EMPL_RCD
        AND SUMM1.EFFDT <= &CAL.PAY_END_DT)
        AND SUMM.GVT_EARN_TYPE = &AC.GVT_EARN_TYPE


end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Insert-New-Summ

  put $Emplid
      #Empl-Rcd
      &ACP.GVT_ERN_ACCR_CLASS
      &AC.GVT_EARN_TYPE
      &CAL.PAY_END_DT
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      0
      ''
      0
      0
      ''
      0
      0
      ''
      &EMP.SERVICE_DT
      into Summary(#S1)

end-procedure

!*---------------------------------------------------------------------*
begin-procedure Process-Hours

  let #EP1 = 0

  Do Get-Next-Earnings

  While $eerncd <> ''

      Do Erncd-Search

      If $Erncd-Found = 'Y'

          While $accrual-class <> ''
              Do Summary-Search

              let #ES2 = #ES2 + 1
              Do Get-Next-Erncd
          end-while

      end-if

      let #EP1 = #EP1 + 1
      Do Get-Next-Earnings

  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Get-Next-Earnings

  get $eerncd
      #hrs
      #earns
      #hrate
      from Earnings(#EP1)
      eerncd
      hrs
      earns
      hrate

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Erncd-Search

  let #ES1 = 0
  let #ES2 = 0
  let $Erncd-Found = 'N'

  Do Get-Next-Erncd

  While $Erncd-Found = 'N' and
        $erncd <> ''

      if $erncd = $eerncd
          let $Erncd-Found = 'Y'
      else
         let #ES1 = #ES1 + 1
         Do Get-Next-Erncd
      end-if
  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Get-Next-Erncd

      get $erncd
          $accrual-class
          $eacc-type
          $r-adj-hrs
          $r-tak-hrs
          $earn-hrs
          $take-hrs
          $svc-hrs
          $adj-hrs
          $bought-hrs
          $sold-hrs
          from Erncd(#ES1)
          erncd
          eclass(#ES2)
          eacc-type(#ES2)
          r-adj-hrs(#ES2)
          r-tak-hrs(#ES2)
          earn-hrs(#ES2)
          take-hrs(#ES2)
          svc-hrs(#ES2)
          adj-hrs(#ES2)
          bought-hrs(#ES2)
          sold-hrs(#ES2)
end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Adjustments

begin-SELECT
ADJ.EMPLID
ADJ.EMPL_RCD
ADJ.GVT_ERN_ACCR_CLASS
ADJ.ERNCD
ADJ.SERVICE_HRS
ADJ.HOURS_EARNED
ADJ.HRS_TAKEN
ADJ.GVT_FORFEIT_HRS
ADJ.HRS_ADJ
ADJ.GVT_HRS_BOUGHT
ADJ.GVT_HRS_SOLD
ADJ.GVT_NONPAY_HRS
ADJ.GVT_CR_REDUC_HRS
ADJ.GVT_MUSTUSE_HRS
ADJ.GVT_CARRYOVER_HRS

  Do Update-Summary

FROM PS_GVT_ACCR_ADJ ADJ ,PS_PAY_CHECK CHK
WHERE
  ADJ.GVT_ADJ_APPLIED = 'N'
  AND CHK.COMPANY     = &CAL.COMPANY
  AND CHK.PAYGROUP    = &CAL.PAYGROUP
  AND CHK.PAY_END_DT  = &CAL.PAY_END_DT
  AND ADJ.EMPLID      = CHK.EMPLID
  AND ADJ.EMPL_RCD   = CHK.EMPL_RCD
ORDER BY
 ADJ.EMPLID
,ADJ.EMPL_RCD

end-select

end-procedure

!*---------------------------------------------------------------------*
begin-procedure Update-Summary

  let #SS1 = 0

  Do Get-Next-Summary

  While $saccrual <> ''

      if ($saccrual = &ADJ.GVT_ERN_ACCR_CLASS)

          if &ADJ.HOURS_EARNED <> 0
              let #hrs-earn = #hrs-earn + &ADJ.HOURS_EARNED
          end-if

          if &ADJ.SERVICE_HRS <> 0
              let #service-hrs = #service-hrs + &ADJ.SERVICE_HRS
          end-if

          if &ADJ.HRS_TAKEN <> 0
              let #hrs-taken = #hrs-taken + &ADJ.HRS_TAKEN
          end-if

          if &ADJ.GVT_FORFEIT_HRS <> 0
              let #hrs-forfeit = #hrs-forfeit + &ADJ.GVT_FORFEIT_HRS
          end-if

          if &ADJ.GVT_HRS_BOUGHT <> 0
              let #hrs-bought = #hrs-bought + &ADJ.GVT_HRS_BOUGHT
          end-if

          if &ADJ.GVT_HRS_SOLD <> 0
              let #hrs-sold = #hrs-sold + &ADJ.GVT_HRS_SOLD
          end-if

          if &ADJ.HRS_ADJ <> 0
              let #hrs-adj = #hrs-adj + &ADJ.HRS_ADJ
          end-if

          if &ADJ.GVT_NONPAY_HRS <> 0
              let #nonpay-hrs = #nonpay-hrs + &ADJ.GVT_NONPAY_HRS
          end-if

          if &ADJ.GVT_CR_REDUC_HRS <> 0
              let #cr-reduc = #cr-reduc + &ADJ.GVT_CR_REDUC_HRS
          end-if

          if &ADJ.GVT_MUSTUSE_HRS <> 0
              let #mustuse = #mustuse + &ADJ.GVT_MUSTUSE_HRS
          end-if

          if &ADJ.GVT_CARRYOVER_HRS <> 0
              let #hrs-cover = #hrs-cover + &ADJ.GVT_CARRYOVER_HRS
          end-if

          Do Put-Accrued-Hours
          let #svc-hrs = 0
          let #rest-hrs-adj = 0
          let #rest-hrs-tak = 0
          let $hold-acc-type = $acc-type
      end-if

      let #SS1 = #SS1 + 1
      Do Get-Next-Summary
  end-while

end-procedure





!*---------------------------------------------------------------------*
begin-procedure Summary-Search

  let #SS1 = 0
  let $Summary-Found = 'N'

  Do Get-Next-Summary

  While $saccrual <> ''

      if ($saccrual = $accrual-class or
         $acc-type = $eacc-type) and
         $acc-type <> $hold-acc-type

          if $r-adj-hrs = 'Y'
              let #rest-hrs-adj = #rest-hrs-adj + #hrs
          end-if

          if $r-tak-hrs = 'Y'
              let #rest-hrs-tak = #rest-hrs-tak + #hrs
          end-if

          if $earn-hrs = 'Y'
              let #hrs-earn = #hrs-earn + #hrs
          end-if

          if $take-hrs = 'Y'
              let #hrs-taken = #hrs-taken + #hrs
          end-if

          if $svc-hrs = 'Y'
              let #svc-hrs = #svc-hrs + #hrs
              let #service-hrs = #service-hrs + #hrs
          end-if

          if $adj-hrs = 'Y'
              let #hrs-adj = #hrs-adj + #hrs
          end-if

          if $bought-hrs = 'Y'
              let #hrs-bought = #hrs-bought + #hrs
          end-if

          if $sold-hrs = 'Y'
              let #hrs-sold = #hrs-sold + #hrs
          end-if
          Do Put-Accrued-Hours
          let #svc-hrs = 0
          let #rest-hrs-adj = 0
          let #rest-hrs-tak = 0
          let $hold-acc-type = $acc-type
      end-if

      let #SS1 = #SS1 + 1
      Do Get-Next-Summary
  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Get-Next-Summary

  get $emplid
      #empl-rcd
      $saccrual
      $acc-type
      $effdt
      #hrs-cover
      #hrs-earn
      #hrs-taken
      #hrs-adj
      #hrs-bought
      #hrs-sold
      #hrs-forfeit
      #service-hrs
      #svc-hrs-rem
      #nonpay-hrs
      #cr-reduc
      #max-cover
      #gfath-cover
      #mustuse
      #r_hrs_1
      #r_hrs_tak_1
      $r-exp-1
      #r_hrs_2
      #r_hrs_tak_2
      $r-exp-2
      #r_hrs_3
      #r_hrs_tak_3
      $r-exp-3
      $svc-date
      #std-hrs
      #svc-hrs
      #accrual
      #proj-accrual
      #rest-hrs-adj
      #rest-hrs-tak
      from Summary(#SS1)

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Process-Accrual-Award

  let #SS1 = 0

  Do Get-Next-Summary

  While $saccrual <> ''

      Do Search-Plans

      if $Plan-Found = 'Y'
          Do Calculate-Service
          Do Search-Rate-Array
          Do Check-Accrual-Awd
          if $Award-OK = 'Y'
              Do Award-Accrual
          end-if
      end-if

      let #SS1 = #SS1 + 1
      Do Get-Next-Summary

  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Search-Plans

  let #PS1 = 0
  let #PS2 = 0
  let $Plan-Found = 'N'

  Do Get-Next-Plan

  While $Plan-Found = 'N' and
        $spclass <> ''

      if $spclass = $saccrual
          let $Plan-Found = 'Y'
      else
         let #PS1 = #PS1 + 1
         Do Get-Next-Plan
      end-if
  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Get-Next-Plan

  get $spclass
      $sfrequency
      $sawd-period
      $sawd-yr-type
      $ssvc-interval
      $syr-begin-calc
      #smax-ceiling
      #smax-cover
      $sgf-coord
      $scheck-nonpay
      $sallow-neg
      #sinterval
      #shours
      #ssuppl-hours
      from Plans(#PS1)
      pclass
      frequency
      awd-period
      awd-yr-type
      svc-interval
      yr-begin-calc
      max-ceiling
      max-cover
      gf-coord
      check-nonpay
      allow-neg
      interval(#PS2)
      hours(#PS2)
      suppl-hours(#PS2)

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Calculate-Service

  let $suppl-awd-yes = 'N'

  let $enddt1 = datetostr(&EMP.SERVICE_DT,'YYYYMMDD')

  let $startdt1 = datetostr(&CAL.PAY_BEGIN_DT,'YYYYMMDD')

  if $syr-begin-calc = 'Y'
      let $endyear = substr($enddt1,1,4)
      let $enddt1 = $endyear || '0101'
  end-if

  let $enddt = strtodate($enddt1)
  let $startdt = strtodate($startdt1)

  evaluate $ssvc-interval
  when = 'Y'
    let #diff = datediff($startdt,$enddt,'year')
  when = 'M'
    let #diff = datediff($startdt,$enddt,'month')
  when = 'H'
    let #diff = #service-hrs
  end-evaluate

  if &CAL.GVT_LY_ENDS = 'Y'
      let $suppl-awd-yes = 'Y'
  end-if

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Check-Accrual-Awd

  let $Award-OK = 'Y'

  evaluate $sfrequency
  when = 'M'
    if &CAL.PAY_PERIOD <> $sawd-period
        let $Award-OK = 'N'
    end-if

  when = 'Y'
    let $Award-OK = 'N'
    evaluate $sawd-yr-type
    when = 'C'
      if &CAL.GVT_CY_BEGIN = 'Y'
           let $Award-OK = 'Y'
      end-if
    when = 'L'
      if &CAL.GVT_LY_BEGIN = 'Y'
           let $Award-OK = 'Y'
      end-if
    when = 'P'
      if &CAL.GVT_PY_BEGIN = 'Y'
           let $Award-OK = 'Y'
      end-if
    when = 'Y'
      if &CAL.GVT_FY_BEGIN = 'Y'
           let $Award-OK = 'Y'
      end-if
    end-evaluate
  end-evaluate

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Search-Rate-Array

  let $Rate-Found = 'N'
  let #PS2 = 0

  Do Get-Next-Plan

  While $Rate-Found = 'N'

    if #diff >= #sinterval
         let #accr-rate = edit(#shours,'999.999999')
         let $Rate-Found = 'Y'
    else
       let #PS2 = #PS2 + 1
       Do Get-Next-Plan
    end-if

  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Award-Accrual

  Do Calc-Proj-Yrly-Accr

  if #paypd <> 0
      let #std-hrs = &JOB.STD_HOURS * 52 / #paypd
  else
      let #std-hrs = 0
  end-if

  evaluate $sfrequency
  when = 'H'
    let #earn-hrs = TRUNC(#accr-rate * (#svc-hrs + #svc-hrs-rem + .000012),0)
    let #proj-accrual = (&JOB.STD_HOURS * 52 * #accr-rate) +  #ssuppl-hours
  when = 'P'
    let #earn-hrs = #accr-rate
    let #proj-accrual = (#accr-rate * #paypd) + #ssuppl-hours
  when = 'M'
    let #earn-hrs = #accr-rate
    let #proj-accrual = (#accr-rate * #paypd) + #ssuppl-hours
  when = 'Y'
    let #earn-hrs = #accr-rate
    let #proj-accrual = (#accr-rate * #paypd) + #ssuppl-hours
  end-evaluate

  if $suppl-awd-yes = 'Y'
    let #earn-hrs = #earn-hrs + #ssuppl-hours
  end-if

  if $scheck-nonpay = 'Y'
      if #std-hrs > #svc-hrs
          let #nonpay-hrs = #nonpay-hrs + #std-hrs - #svc-hrs
      end-if

      if #nonpay-hrs >= #std-hrs
          let #earn-hrs = 0
      end-if
  else
      let #nonpay-hrs = 0
  end-if

  Do Put-Accrued-Hours

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Insert-Summary-Wrk

  let #SS1 = 0

  Do Get-Next-Summary

  While $emplid <> ''

      Do Gvt-Acr-Sum-Wrk

      let #net-balance =  #hrs-cover + #hrs-earn - #hrs-taken +
                          #hrs-adj + #hrs-bought - #hrs-sold - #hrs-forfeit +
                          #rest-hrs-adj - #rest-hrs-tak + #r_hrs_1 - #r_hrs_tak_1 +
                          #r_hrs_2 - #r_hrs_tak_2 + #r_hrs_3 - #r_hrs_tak_3

      if #net-balance < 0
          let $EMPLID_ER    = $emplid
          let $CLASS_ER     = $saccrual
          Do Search-Plans

          if $Plan-Found = 'Y'
              if $sallow-neg = 'N'
                  Do Check-Cascading
                  if #cascade-cnt = 0
                      let $ERROR_ER = 'Hours taken exceeds hours available'
                      Do Print-Err-Msg
                  end-if
              end-if
          end-if
      end-if

      if (#net-balance + #proj-accrual < 0) and
         (#proj-accrual > 0)
          let $ERROR_ER = 'Negative Balance exceeds projected yearly accrual'
          Do Print-Err-Msg
      end-if

      let #SS1 = #SS1 + 1
      Do Get-Next-Summary
  end-while

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Check-Cascading

let #cascade-cnt = 0

begin-SELECT
COUNT(*) &cascade-cnt

  let #cascade-cnt = &cascade-cnt

FROM PS_GVT_ACC_CASCADE CASC
WHERE CASC.GVT_ERN_ACCR_CLASS = $saccrual
  AND CASC.EFFDT = (SELECT MAX(EFFDT) FROM PS_GVT_ACC_CASCADE CASC1
                     WHERE CASC1.GVT_ERN_ACCR_CLASS = CASC.GVT_ERN_ACCR_CLASS
                       AND CASC1.EFFDT <= $effdt)
end-select

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Calc-Proj-Yrly-Accr

  Evaluate &PF.PAY_FREQUENCY
  when = 'A'
    let #paypd = 1
  when = 'B'
    let #paypd = 26
  when = 'D'
    let #paypd = 260
  when = 'M'
    let #paypd = 12
  when = 'Q'
    let #paypd = 4
  when = 'S'
    let #paypd = 24
  when = 'W'
    let #paypd = 52
  end-evaluate

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Put-Accrued-Hours

  put #hrs-earn
      #hrs-taken
      #service-hrs
      #hrs-adj
      #hrs-bought
      #hrs-sold
      #nonpay-hrs
      #svc-hrs
      #earn-hrs
      #proj-accrual
      #rest-hrs-adj
      #rest-hrs-tak
      into Summary(#SS1)
      hrs-earn
      hrs-taken
      service-hrs
      hrs-adj
      hrs-bought
      hrs-sold
      nonpay-hrs
      svc-hrs
      c-accrual
      c-proj-accr
      rest-hrs-adj
      rest-hrs-tak

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Gvt-Acr-Sum-Wrk

DISPLAY ''
DISPLAY $emplid
DISPLAY ''
DISPLAY $saccrual
DISPLAY ''
DISPLAY $effdt

begin-SQL
INSERT INTO PS_GVT_ACR_SUM_WRK
(EMPLID
,EMPL_RCD
,GVT_ERN_ACCR_CLASS
,EFFDT
,GVT_EARN_TYPE
,HRS_CARRYOVER
,GVT_SERVICE_YTD
,HRS_EARNED_YTD
,HRS_TAKEN_YTD
,HRS_ADJUST_YTD
,HRS_BOUGHT_YTD
,HRS_SOLD_YTD
,GVT_NONPAY_YTD
,GVT_CR_REDUC_YTD
,GVT_FORFEIT_YTD
,GVT_MUSTUSE_YTD
,MAXIMUM_CARRYOVER
,GVT_GFATH_CYOVER
,GVT_SVC_HRS_REMAIN
,GVT_R_HRS_1
,GVT_R_HRS_TAK_1
,GVT_R_EXPIRE_DT_1
,GVT_R_HRS_2
,GVT_R_HRS_TAK_2
,GVT_R_EXPIRE_DT_2
,GVT_R_HRS_3
,GVT_R_HRS_TAK_3
,GVT_R_EXPIRE_DT_3
,GVT_ADJ_APPLIED
,GVT_AUDITED
,GVT_HRS_BAL
,GVT_USE_OR_LOSE
,SERVICE_HRS
,ACCRUED_AMOUNT
,GVT_PROJ_ACCRUAL
,GVT_REST_ADJ_HRS
,GVT_REST_TAK_HRS)
Values
($emplid
,#empl-rcd
,$saccrual
,$effdt
,$acc-type
,#hrs-cover
,#service-hrs
,#hrs-earn
,#hrs-taken
,#hrs-adj
,#hrs-bought
,#hrs-sold
,#nonpay-hrs
,#cr-reduc
,#hrs-forfeit
,#mustuse
,#max-cover
,#gfath-cover
,#svc-hrs-rem
,#r_hrs_1
,#r_hrs_tak_1
,$r-exp-1
,#r_hrs_2
,#r_hrs_tak_2
,$r-exp-2
,#r_hrs_3
,#r_hrs_tak_3
,$r-exp-3
,'N'
,' '
,0
,0
,#svc-hrs
,#accrual
,#proj-accrual
,#rest-hrs-adj
,#rest-hrs-tak)
end-sql

end-procedure


!*---------------------------------------------------------------------*
begin-procedure Print-Err-Msg

  print $EMPLID_ER            (+1,1,{col_emplid})
  print $CLASS_ER             (0,+{col_sep},{col_class})
  print $ERROR_ER             (0,+{col_sep},{col_message})

end-procedure


!*---------------------------------------------------------------------*
#Include 'fgrunctl.sqc'  !Select run control parameters
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!*---------------------------------------------------------------------*
