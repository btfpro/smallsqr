!***********************************************************************
!  HRLAY002:  Bumping Report                                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:29:32                                 *
!       $Release:  HR9                                                 *
!      $Revision:  101                                                 *
!***********************************************************************
! Description: This report provides additional information to assist   *
!               in the Bumping Process                                 *
!***********************************************************************

#include 'setenv.sqc'   !Set environment


!***********************************************************************
!-----------------Setup Section----------------------------------------*
!Description: This section sets the Page Size and Font Size            *
!***********************************************************************
Begin-Setup
 
#include 'setupdb.sqc'
       page-size 70 200

       declare printer
       type          = HPLASERJET
       orientation   = LANDSCAPE
       lines-inch    = 8
       chars-inch    = 18.6
       top-margin    = 0.30
       left-margin   = 0.20
       font          = 5
       point-size    = 7
       lines-inch    = 8
End-Setup




!**********************************************************************!
!Heading Section: This section Prints the Header of this Report        !
!**********************************************************************!
Begin-Heading 4
       let $mergereportname = $lbl_Reportname || ' ' || $lbl_bumplst
       print $mergereportname                      (1,1)
        print $lbl_Peoplesoft                      (,1) center
        print $lbl_Pageno                      (1,180)
        page-number ()
        print $lbl_Rundate                      (2,180)
        print $currentdate () !$current-date () edit 'dd/mm/yyyy'
        print $lbl_Bumpreport                      (2,87) 
        print $lbl_Runtime                     (3,180)
        print $current-date () edit 'HH:MI:SS'
        
        
        if rtrim(&LBR_ROSTER_ID_IN,' ') <> ''
              print $lbl_RosterID               (4,1)
              print &LBR_ROSTER_ID_IN        ()
              print $LBR_ROSTER_DESC               (,+2)
       end-if

       if rtrim(&EMPLID_IN,' ') <> ''  
              print $lbl_EmployeeID               (4,1)
              print &EMPLID_IN               ()       
              print $EMP_NAME               (,+2)
       end-if

       ! If Labor Agreement alone is chosen and Facility ID is not chosen in selection criteria
       if rtrim(&LABOR_AGREEMENT_IN,' ') <> '' and rtrim(&LABOR_FACILITY_ID_IN,' ') = ''
              print $lbl_LaborAgreement        (4,1)
              print &LABOR_AGREEMENT_IN        ()
              print $LBRAGR                       (,+2)       
       end-if

       if rtrim(&DEPARTMENT_IN,' ') <> ''
              print $lbl_Dept               (4,1)
              print &DEPARTMENT_IN               () 
              print $DEPT_DESC               (,+2)
       end-if

       if rtrim(&LOCATION_IN,' ') <> ''
              print $lbl_Location               (4,1)
              print &LOCATION_IN               ()
              print $LOC_DESC               (,+2)
       end-if


       !If Labor Agreement and Facility ID is chosen in selection criteria
       if rtrim(&LABOR_FACILITY_ID_IN,' ') <> ''
              print $lbl_Facility               (4,1)
              print &LABOR_FACILITY_ID_IN       ()
              print $FACID_DESC               (,+2)
       end-if

       if rtrim(&JOBCODE_IN,' ') <> ''
              print $lbl_Jobcode               (4,1)
              print &JOBCODE_IN               ()
              print $JOB_DESC               (,+2)
        end-if
        
End-Heading



!***********************************************************************
!-----------------Program Section--------------------------------------*
!***********************************************************************
Begin-Program
 do STDAPI-INIT
 do Init-DateTime
 do Get-Current-DateTime
 do Get-RP-Lbl
 do Find-Date-Format
 do Runcontrol-Input
 
 !print ' ' (+1,130)
 
     evaluate $DT_FMT
      when = 'M'
           do Format-DateTime($AsOfToday,$currentdate,{DEFMDY},'','')
           break
      when = 'D'
           do Format-DateTime($AsOfToday,$currentdate,{DEFDMY},'','')
           break
      when-Other
           do Format-DateTime($AsOfToday,$currentdate,{DEFYMD},'','')
           break
     end-evaluate
     
 !do Format-DateTime ($AsOfToday, $currentdate, {DEFDMY},'','')
 
 if rtrim(&LBR_ROSTER_ID_IN,' ') <> ''
 LET $EMPLID_IN = ''
 Do Roster-Cand
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($EMPLID_IN,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 if rtrim(&EMPLID_IN,' ') <> ''
 let $emplid = ''
 Do Criteria-Emplid
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($emplid,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 ! If Labor Agreement alone is chosen and Facility ID is not chosen in selection criteria
 if rtrim(&LABOR_AGREEMENT_IN,' ') <> '' and rtrim(&LABOR_FACILITY_ID_IN,' ') = ''
 let $emplid = ''
 Do Criteria-LaborAgreement
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($emplid,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 
 if rtrim(&DEPARTMENT_IN,' ') <> ''
 let $emplid = ''
 Do Criteria-Department
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($emplid,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 
 if rtrim(&LOCATION_IN,' ') <> ''
 let $emplid = ''
 Do Criteria-Location
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($emplid,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 !If Labor Agreement and Facility ID is chosen in selection criteria
 if rtrim(&LABOR_FACILITY_ID_IN,' ') <> ''
 LET $EMPLID_IN = ''
 Do Criteria-Facility
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($EMPLID_IN,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 if rtrim(&JOBCODE_IN,' ') <> ''
 let $emplid = ''
 Do Criteria-Job
 !If no employee data exists for the selection criteria, the procedures for printing the column 
 !headings are called. Thus the pdf file would be generated though there is no data.
 if rtrim($emplid,'') = ''
 DO Print-Emplid
 DO JobCode-Hierarchy-Heading
 DO JobData-History-Heading
 end-if
 end-if
 
 
 do STDAPI-TERM
End-Program



!*************************************************************************!
! Procedure: Find-Date-Format                                             !
! Description: This procedure gets the date format as per user preference !
!*************************************************************************!
begin-procedure Find-Date-Format

let $REC_FOUND = 'N'
begin-SELECT
A.USER_OPTION_VALUE
  let $REC_FOUND = 'Y'
FROM PSUSERPRSNLOPTN A

WHERE A.OPRID = $prcs_oprid
  AND A.USEROPTN = 'DFRMT'
end-SELECT

IF $REC_FOUND = 'N'
  let $DT_FMT = 'M'
ELSE
  LET $DT_FMT = &A.USER_OPTION_VALUE
  LET $DT_FMT = RTRIM($DT_FMT,' ')
END-If

end-procedure !Find-Date-Format


!**********************************************************************!
! Procedure: Runcontrol-Input                                          !
! Description: This procedure gets the Runcontrol table values         !
!**********************************************************************!
begin-procedure Runcontrol-Input
begin-select
LBR_ROSTER_ID &LBR_ROSTER_ID_IN
EMPLID &EMPLID_IN
SETID &SETID_IN
LABOR_AGREEMENT &LABOR_AGREEMENT_IN
DEPARTMENT &DEPARTMENT_IN
LOCATION &LOCATION_IN
LABOR_FACILITY_ID &LABOR_FACILITY_ID_IN
JOBCODE &JOBCODE_IN
 LET $EMPLID_IN = &EMPLID_IN
 DO Runcontrol-Input-Desc
FROM PS_HR_RUNCNTL_LY2
WHERE OPRID = $prcs_oprid
AND RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure !Runcontrol-Input



!**************************************************************************!
! Procedure: Runcontrol-Input-Desc                                       !
! Description: This procedure gets the Runcontrol table description values !
!**************************************************************************!
begin-procedure Runcontrol-Input-Desc

!-------Description is 1st fetched from related language table. If the Login language = Base Language then
!-------the description would not be present in the Related Lang table, in which case it should be 
!-------fetched from the Base table
if rtrim(&LBR_ROSTER_ID_IN,' ') <> ''
begin-select
ROSTL.DESCR50
 LET $LBR_ROSTER_DESC = &ROSTL.DESCR50
FROM PS_HR_LBR_ROST_LNG ROSTL
WHERE LBR_ROSTER_ID = &LBR_ROSTER_ID_IN
and LANGUAGE_CD = $curr_language_cd
AND EFFDT = (SELECT MAX(EFFDT)
             FROM PS_HR_LBR_ROST_LNG
             WHERE LBR_ROSTER_ID = &LBR_ROSTER_ID_IN
             and LANGUAGE_CD = $curr_language_cd
             AND EFFDT <= $AsOfToday)
end-select

IF $LBR_ROSTER_DESC = ''
begin-select
ROST.DESCR50
 LET $LBR_ROSTER_DESC = &ROST.DESCR50
FROM PS_HR_LBR_ROSTDATA ROST
WHERE LBR_ROSTER_ID = &LBR_ROSTER_ID_IN
AND EFFDT = (SELECT MAX(EFFDT)
             FROM PS_HR_LBR_ROSTDATA
             WHERE LBR_ROSTER_ID = &LBR_ROSTER_ID_IN
             AND EFFDT <= $AsOfToday)
end-select
END-IF
end-if


if rtrim(&EMPLID_IN,' ') <> ''
BEGIN-SELECT
ENAME.NAME
 let $EMP_NAME = &ENAME.NAME
FROM PS_PERSON_NAME ENAME
WHERE EMPLID = &EMPLID_IN
END-SELECT
end-if


!-------Description is 1st fetched from related language table. If the Login language = Base Language then
!-------the description would not be present in the Related Lang table, in which case it should be 
!-------fetched from the Base table
if rtrim(&LABOR_AGREEMENT_IN,' ') <> ''
BEGIN-SELECT
LAL.DESCR
 LET $LBRAGR = &LAL.DESCR
FROM PS_HR_LBR_AGR_LANG LAL
WHERE LABOR_AGREEMENT = &LABOR_AGREEMENT_IN
AND SETID = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_HR_LBR_AGR_LANG
              WHERE LABOR_AGREEMENT = &LABOR_AGREEMENT_IN
              AND SETID = &SETID_IN
              and LANGUAGE_CD = $curr_language_cd
              AND EFFDT <= $AsOfToday)!$current-date)
and LANGUAGE_CD = $curr_language_cd
END-SELECT

IF rtrim($LBRAGR,' ') = ''
BEGIN-SELECT
LA.DESCR
 LET $LBRAGR = &LA.DESCR
FROM PS_HR_LABOR_AGRMNT LA
WHERE LABOR_AGREEMENT = &LABOR_AGREEMENT_IN
AND SETID = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
             FROM PS_HR_LABOR_AGRMNT
             WHERE LABOR_AGREEMENT = &LABOR_AGREEMENT_IN
             AND SETID = &SETID_IN
             AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'
END-SELECT
END-IF
end-if


!-------Description is 1st fetched from related language table. We make use of the rellang.sqc
!-------which has appropriate procedure to fetch the description from the Related Lang table...
!-------If the descr is not present in the Related Lang table then it should be fetched from the Base table
if rtrim(&DEPARTMENT_IN,' ') <> ''
#define DEPT_TBL
BEGIN-SELECT
dept.DESCR
dept.EFFDT
 let $DEPT_DESC = &dept.DESCR
FROM PS_DEPT_TBL dept
WHERE DEPTID = &DEPARTMENT_IN
AND SETID = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_DEPT_TBL
              WHERE DEPTID = &DEPARTMENT_IN
              AND SETID = &SETID_IN
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'
END-SELECT

Do Get_Related_DEPT_TBL(&DEPARTMENT_IN,&dept.EFFDT,&SETID_IN)

if rtrim($DEPT_TBL-DESCR,' ') <> ''
let $DEPT_DESC = $DEPT_TBL-DESCR
end-if

end-if


!-------Description is 1st fetched from related language table. We make use of the rellang.sqc
!-------which has appropriate procedure to fetch the description from the Related Lang table...
!-------If the descr is not present in the Related Lang table then it should be fetched from the Base table
if rtrim(&LOCATION_IN,' ') <> ''
#define LOCATION_TBL
BEGIN-SELECT
LOC.DESCR
LOC.EFFDT
 let $LOC_DESC = &LOC.DESCR
FROM PS_LOCATION_TBL LOC
WHERE LOCATION = &LOCATION_IN
AND SETID = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_LOCATION_TBL
              WHERE LOCATION = &LOCATION_IN
              AND SETID = &SETID_IN
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'
END-SELECT


Do Get_Related_LOCATION_TBL(&LOC.EFFDT,&LOCATION_IN,&SETID_IN)


if RTRIM($LOCATION_TBL-DESCR,' ') <> ''
let $LOC_DESC = $LOCATION_TBL-DESCR
end-if

end-if


!-------Description is 1st fetched from related language table. If the Login language = Base Language then
!-------the description would not be present in the Related Lang table, in which case it should be 
!-------fetched from the Base table
if rtrim(&LABOR_FACILITY_ID_IN,' ') <> ''

BEGIN-SELECT
FACIDL.DESCR
 let $FACID_DESC = &FACIDL.DESCR
FROM PS_HR_LBR_FAC_LNG FACIDL
WHERE LABOR_FACILITY_ID = &LABOR_FACILITY_ID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_HR_LBR_FAC_LNG
              WHERE LABOR_FACILITY_ID = &LABOR_FACILITY_ID_IN
              and LANGUAGE_CD = $curr_language_cd
              AND EFFDT <= $AsOfToday)!$current-date)
and LANGUAGE_CD = $curr_language_cd
END-SELECT

IF rtrim($FACID_DESC,' ') = ''
BEGIN-SELECT
FACID.DESCR
 let $FACID_DESC = &FACID.DESCR
FROM PS_HR_LBR_FAC_TBL FACID
WHERE LABOR_FACILITY_ID = &LABOR_FACILITY_ID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_HR_LBR_FAC_TBL
              WHERE LABOR_FACILITY_ID = &LABOR_FACILITY_ID_IN
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'
END-SELECT
END-IF
end-if



!-------Description is 1st fetched from related language table. We make use of the rellang.sqc
!-------which has appropriate procedure to fetch the description from the Related Lang table...
!-------If the descr is not present in the Related Lang table then it should be fetched from the Base table
if rtrim(&JOBCODE_IN,' ') <> ''
#define JOBCODE_TBL
BEGIN-SELECT
JOB.DESCR
JOB.EFFDT
 let $JOB_DESC = &JOB.DESCR
FROM PS_JOBCODE_TBL JOB
WHERE JOBCODE = &JOBCODE_IN
AND SETID = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOBCODE_TBL
              WHERE JOBCODE = &JOBCODE_IN
              AND SETID = &SETID_IN
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'
END-SELECT

Do Get_Related_JOBCODE_TBL(&JOB.EFFDT,&JOBCODE_IN,&SETID_IN)

if RTRIM($JOBCODE_TBL-DESCR,' ') <> ''
let $JOB_DESC = $JOBCODE_TBL-DESCR
end-if
end-if
end-procedure !Runcontrol-Input-Desc




!*******************************************************************************!
! Procedure: Roster-Cand                                                       !
! Description: This procedure will be called if selection criteria is Roster ID !
!*******************************************************************************!
begin-procedure Roster-Cand
BEGIN-SELECT DISTINCT
ROST.EMPLID 
 LET $EMPLID_IN = &ROST.EMPLID
 Do Criteria-Emplid
FROM PS_HR_ROST_CAND ROST
WHERE LBR_ROSTER_ID = &LBR_ROSTER_ID_IN
order by ROST.EMPLID 
END-SELECT
end-procedure !Roster-Cand




!************************************************************************************!
! Procedure: Criteria-Facility                                                          !
! Description: This procedure will be called if selection criteria is Facility       !
!************************************************************************************!
begin-procedure Criteria-Facility
BEGIN-SELECT DISTINCT
ROST_FAC.EMPLID 
 LET $EMPLID_IN = &ROST_FAC.EMPLID
 Do Criteria-Emplid
FROM PS_HR_ROST_CAND ROST_FAC
WHERE LABOR_FACILITY_ID = &LABOR_FACILITY_ID_IN
order by ROST_FAC.EMPLID 
END-SELECT
end-procedure !Criteria-Facility




!****************************************************************************!
! Procedure: Criteria-Emplid                                                    !
! Description: This procedure will be called if selection criteria is EMPLID !
!****************************************************************************!
begin-procedure Criteria-Emplid
BEGIN-SELECT
E.EMPLID 
E.EMPL_RCD
E.LABOR_AGREEMENT
E.SETID_LBR_AGRMNT
E.SETID_JOBCODE
E.JOBCODE
!E.SETID_SALARY
E.HR_STATUS
 let $emplid = &E.EMPLID
 let #empl_rcd = &E.EMPL_RCD
 let $LABOR_AGREEMENT = &E.LABOR_AGREEMENT
 let $SETID_LBRAGRMNT = &E.SETID_LBR_AGRMNT
 let $SETID_JOBLBR = &E.SETID_JOBCODE
 let $JOBCODE = &E.JOBCODE
 !let $SETID_SAL = &E.SETID_SALARY
 let $hr_status = &E.HR_STATUS
 
 !The report would only display ACTIVE employees, UNLESS the employee has been selected specifically 
 !using the Emplid field on the Run Control page.
 !If EMPLID criteria is chosen, do not check the active status. Since procedure "Criteria-Emplid" is called 
 !for criterias Roster Id and Facility ID, the status is checked for these criterias alone.
 if rtrim(&EMPLID_IN,' ') <> '' or ($hr_status = 'A' and (rtrim(&LBR_ROSTER_ID_IN,' ') <> '' 
                                                        or rtrim(&LABOR_FACILITY_ID_IN,' ') <> '' ))
 do Print-Emplid
 do JobCode-Hierarchy
 do JobData-History
 end-if
 
from PS_JOB E
where EMPLID = $EMPLID_IN 
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOB 
              WHERE EMPLID = E.EMPLID
              AND EMPL_RCD = E.EMPL_RCD
              AND EFFDT <= $AsOfToday) !$current-date)
AND EFFSEQ = (SELECT MAX(EFFSEQ)
              FROM PS_JOB 
              WHERE EMPLID = E.EMPLID
              AND EMPL_RCD = E.EMPL_RCD
              AND EFFDT = E.EFFDT)
!AND HR_STATUS = 'A'  If EMPLID criteria is chosen, do not check the active status.
ORDER BY EMPLID
END-SELECT
end-procedure !Criteria-Emplid





!************************************************************************************!
! Procedure: Criteria-LaborAgreement                                                    !
! Description: This procedure will be called if selection criteria is LaborAgreement !
!************************************************************************************!
begin-procedure Criteria-LaborAgreement
BEGIN-SELECT
L.EMPLID 
L.EMPL_RCD
L.LABOR_AGREEMENT
L.SETID_LBR_AGRMNT
L.SETID_JOBCODE
L.JOBCODE
!L.SETID_SALARY
 let $emplid = &L.EMPLID
 let #empl_rcd = &L.EMPL_RCD
 let $LABOR_AGREEMENT = &L.LABOR_AGREEMENT
 let $SETID_LBRAGRMNT = &L.SETID_LBR_AGRMNT
 let $SETID_JOBLBR = &L.SETID_JOBCODE
 let $JOBCODE = &L.JOBCODE
 !let $SETID_SAL = &L.SETID_SALARY
 do Print-Emplid
 do JobCode-Hierarchy
 do JobData-History
from PS_JOB L
where LABOR_AGREEMENT = &LABOR_AGREEMENT_IN
AND SETID_LBR_AGRMNT = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOB 
              WHERE EMPLID = L.EMPLID
              AND EMPL_RCD = L.EMPL_RCD
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFFSEQ = (SELECT MAX(EFFSEQ)
              FROM PS_JOB 
              WHERE EMPLID = L.EMPLID
              AND EMPL_RCD = L.EMPL_RCD
              AND EFFDT = L.EFFDT)
AND HR_STATUS = 'A'
ORDER BY EMPLID
END-SELECT
end-procedure !Criteria-LaborAgreement




!************************************************************************************!
! Procedure: Criteria-Department                                                  !
! Description: This procedure will be called if selection criteria is LaborAgreement !
!************************************************************************************!
begin-procedure Criteria-Department
BEGIN-SELECT
D.EMPLID 
D.EMPL_RCD
D.LABOR_AGREEMENT
D.SETID_LBR_AGRMNT
D.SETID_JOBCODE
D.JOBCODE
!D.SETID_SALARY
 let $emplid = &D.EMPLID
 let #empl_rcd = &D.EMPL_RCD
 let $LABOR_AGREEMENT = &D.LABOR_AGREEMENT
 let $SETID_LBRAGRMNT = &D.SETID_LBR_AGRMNT
 let $SETID_JOBLBR = &D.SETID_JOBCODE
 let $JOBCODE = &D.JOBCODE
 !let $SETID_SAL = &D.SETID_SALARY
 do Print-Emplid
 do JobCode-Hierarchy
 do JobData-History
from PS_JOB D
where DEPTID  = &DEPARTMENT_IN
AND SETID_DEPT = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOB 
              WHERE EMPLID = D.EMPLID
              AND EMPL_RCD = D.EMPL_RCD
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFFSEQ = (SELECT MAX(EFFSEQ)
              FROM PS_JOB 
              WHERE EMPLID = D.EMPLID
              AND EMPL_RCD = D.EMPL_RCD
              AND EFFDT = D.EFFDT)
AND HR_STATUS = 'A'
ORDER BY EMPLID
END-SELECT
end-procedure !Criteria-Department




!************************************************************************************!
! Procedure: Criteria-Location                                                          !
! Description: This procedure will be called if selection criteria is LaborAgreement !
!************************************************************************************!
begin-procedure Criteria-Location
BEGIN-SELECT
LOC.EMPLID 
LOC.EMPL_RCD
LOC.LABOR_AGREEMENT
LOC.SETID_LBR_AGRMNT
LOC.SETID_JOBCODE
LOC.JOBCODE
!LOC.SETID_SALARY
 let $emplid = &LOC.EMPLID
 let #empl_rcd = &LOC.EMPL_RCD
 let $LABOR_AGREEMENT = &LOC.LABOR_AGREEMENT
 let $SETID_JOBLBR = &LOC.SETID_JOBCODE
 let $JOBCODE = &LOC.JOBCODE
 !let $SETID_SAL = &LOC.SETID_SALARY
 do Print-Emplid
 do JobCode-Hierarchy
 do JobData-History
from PS_JOB LOC
where LOCATION  = &LOCATION_IN
AND SETID_LOCATION = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOB 
              WHERE EMPLID = LOC.EMPLID
              AND EMPL_RCD = LOC.EMPL_RCD
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFFSEQ = (SELECT MAX(EFFSEQ)
              FROM PS_JOB 
              WHERE EMPLID = LOC.EMPLID
              AND EMPL_RCD = LOC.EMPL_RCD
              AND EFFDT = LOC.EFFDT)
AND HR_STATUS = 'A'
ORDER BY EMPLID
END-SELECT
end-procedure !Criteria-Location



!************************************************************************************!
! Procedure: Criteria-Facility                                                          !
! Description: This procedure will be called if selection criteria is Facility       !
!************************************************************************************!
!begin-procedure Criteria-Facility
!BEGIN-SELECT
!FAC.EMPLID 
!FAC.EMPL_RCD
!FAC.LABOR_AGREEMENT
! let $emplid = &LOC.EMPLID
! let #empl_rcd = &LOC.EMPL_RCD
! let $LABOR_AGREEMENT = &LOC.LABOR_AGREEMENT
 !do Print-Emplid
 !do JobCode-Hierarchy
 !do JobData-History
!from PS_JOB FAC
!where LABOR_FACILITY_ID  = &LABOR_FACILITY_ID_IN
!AND EFFDT = (SELECT MAX(EFFDT)
!              FROM PS_JOB 
!              WHERE EMPLID = FAC.EMPLID
!              AND EMPL_RCD = FAC.EMPL_RCD
!              AND EFFDT <= $AsOfToday)!$current-date)
!AND EFFSEQ = (SELECT MAX(EFFSEQ)
!              FROM PS_JOB 
!              WHERE EMPLID = FAC.EMPLID
!              AND EMPL_RCD = FAC.EMPL_RCD
!              AND EFFDT = FAC.EFFDT)
!AND HR_STATUS = 'A'
!ORDER BY EMPLID
!END-SELECT
!end-procedure !Criteria-Facility



!************************************************************************************!
! Procedure: Criteria-Job                                                          !
! Description: This procedure will be called if selection criteria is LaborAgreement !
!************************************************************************************!
begin-procedure Criteria-Job
BEGIN-SELECT
J.EMPLID 
J.EMPL_RCD
J.LABOR_AGREEMENT
J.SETID_LBR_AGRMNT
J.SETID_JOBCODE
J.JOBCODE
!J.SETID_SALARY
 let $emplid = &J.EMPLID
 let #empl_rcd = &J.EMPL_RCD
 let $LABOR_AGREEMENT = &J.LABOR_AGREEMENT
 let $SETID_LBRAGRMNT = &J.SETID_LBR_AGRMNT
 let $SETID_JOBLBR = &J.SETID_JOBCODE
 let $JOBCODE = &J.JOBCODE
 !let $SETID_SAL = &J.SETID_SALARY
 do Print-Emplid
 do JobCode-Hierarchy
 do JobData-History
from PS_JOB J
where JOBCODE  = &JOBCODE_IN
AND SETID_JOBCODE = &SETID_IN
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOB 
              WHERE EMPLID = J.EMPLID
              AND EMPL_RCD = J.EMPL_RCD
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFFSEQ = (SELECT MAX(EFFSEQ)
              FROM PS_JOB 
              WHERE EMPLID = J.EMPLID
              AND EMPL_RCD = J.EMPL_RCD
              AND EFFDT = J.EFFDT)
AND HR_STATUS = 'A'
ORDER BY EMPLID
END-SELECT
end-procedure !Criteria-Job




!************************************************************************************!
! Procedure: Print-Emplid                                                          !
! Description: This procedure is to print Emplid, Name and empldRcd                  !
!************************************************************************************!
begin-procedure Print-Emplid
       !Total No. of rows per page = 70. If a new employee is supposed to be printed 
       ! at Line no >= 65, then this section would be printed from the next page only.
       let #lineno = #current-line + 4
       if #lineno >= 65
       new-page
       end-if
       
       if rtrim(&EMPLID_IN,' ') <> ''
       print $lbl_EmployeeRCD (+4,1) 
       print #empl_rcd () EDIT (999)
       else
       
       print $lbl_EmployeeID  (+4,1) 
       print  $emplid               ()
       
       
BEGIN-SELECT
EMP.NAME
FROM PS_PERSON_NAME EMP
WHERE EMPLID = $emplid
END-SELECT

       print &EMP.NAME (,+2)
       print $lbl_EmployeeRCD (,+4) 
       print #empl_rcd () EDIT (999)
       end-if
end-procedure !Print-Emplid



!***********************************************************************************************!
! Procedure: JobCode-Hierarchy-Heading                                                             !
! Description: This procedure prints the Heading of JobCode Hierarchy section                      !
!***********************************************************************************************!
begin-procedure JobCode-Hierarchy-Heading
       print $lbl_job_hierarchy (+2,4)
       !print $lbl_Lbr_agrmnt     (+2,7)
       !print $lbl_EffDate        (,24)
       
       print $lbl_HIER_SEQ_NUM    (+2,7)
       print $lbl_Jobclass        (,21) !18
       print $lbl_Jobcode_setid   (,38) !16
       print $lbl_Jobcode1        (,55) !8
       print $lbl_JOBDESCR        (,67) !30
       print $lbl_empl_catg       (,90) !19
       print $lbl_Salary_setid    (,109) !14
       print $lbl_SalaryPlan      (,123) !11
       print $lbl_Grade           (,136) 
end-procedure !JobCode-Hierarchy-Heading




!***********************************************************************************************!
! Procedure: JobCode-Hierarchy                                                                     !
! Description: This procedure selects data from PS_HR_LBR_JOBCODE for JobCode Hierarchy section !
!***********************************************************************************************!
begin-procedure JobCode-Hierarchy       
DO JobCode-Hierarchy-Heading
!Fetch the Job labor classification, for the employee's Labor agreement and Job code.
BEGIN-SELECT
LBCL.LABOR_JOB_CLASS
FROM PS_HR_LBR_JOBCODE LBCL
WHERE LABOR_AGREEMENT = $LABOR_AGREEMENT
AND SETID = $SETID_LBRAGRMNT
AND SETID_JOBCODE = $SETID_JOBLBR
AND LBCL.JOBCODE =  $JOBCODE
AND LBCL.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_HR_LBR_JOBCODE
                  WHERE LABOR_AGREEMENT = $LABOR_AGREEMENT
                  AND SETID = $SETID_LBRAGRMNT
                  AND EFFDT <= $AsOfToday)!$current-date)
END-SELECT


!For the above fetched Job classification, list all the job codes
BEGIN-SELECT
!LBR.EFFDT
LBR.SETID_JOBCODE
LBR.JOBCODE
LBR.LABOR_JOB_CLASS 
LBR.EMPL_CTG
LBR.HIER_SEQ_NUM
LBR.SETID_SALARY
LBR.SAL_ADMIN_PLAN
LBR.GRADE
 Do Print-JobCode-Hierarchy
FROM PS_HR_LBR_JOBCODE LBR
WHERE LABOR_AGREEMENT = $LABOR_AGREEMENT
AND SETID = $SETID_LBRAGRMNT
!AND SETID_JOBCODE = $SETID_JOBLBR
AND LBR.LABOR_JOB_CLASS = &LBCL.LABOR_JOB_CLASS
AND LBR.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_HR_LBR_JOBCODE
                  WHERE LABOR_AGREEMENT = $LABOR_AGREEMENT
                  AND SETID = $SETID_LBRAGRMNT
                  AND EFFDT <= $AsOfToday)!$current-date)
!AND SETID_SALARY = $SETID_SAL
ORDER BY HIER_SEQ_NUM
END-SELECT
end-procedure !JobCode-Hierarchy




!************************************************************************************!
! Procedure: Print-JobCode-Hierarchy                                                 !
! Description: This procedure prints data for JobCode Hierarchy section              !
!************************************************************************************!
begin-procedure Print-JobCode-Hierarchy

!-------Description is 1st fetched from related language table. We make use of the rellang.sqc
!-------which has appropriate procedure to fetch the description from the Related Lang table...
!-------If the descr is not present in the Related Lang table then it should be fetched from the Base table
#define JOBCODE_TBL
BEGIN-SELECT
JOBTBL.DESCR
JOBTBL.EFFDT
 let $JOBTBL_DESCR = &JOBTBL.DESCR
FROM PS_JOBCODE_TBL JOBTBL
WHERE JOBCODE = &LBR.JOBCODE
AND JOBTBL.SETID = &LBR.SETID_JOBCODE
AND JOBTBL.EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOBCODE_TBL
              WHERE JOBCODE = &LBR.JOBCODE
              AND SETID = &LBR.SETID_JOBCODE
              AND EFFDT <= $AsOfToday)!$current-date)
AND JOBTBL.EFF_STATUS = 'A'
END-SELECT


Do Get_Related_JOBCODE_TBL(&JOBTBL.EFFDT,&LBR.JOBCODE,&LBR.SETID_JOBCODE)

if RTRIM($JOBCODE_TBL-DESCR,' ') <> ''
let $JOBTBL_DESCR = $JOBCODE_TBL-DESCR
end-if


       !print $LABOR_AGREEMENT (+1,7)
       !print &LBR.EFFDT (,24) edit 'dd/mm/yyyy'
       
       print &LBR.HIER_SEQ_NUM     (+1,7) !13
       print &LBR.LABOR_JOB_CLASS  (,21) !18
       print &LBR.SETID_JOBCODE    (,38)
       print &LBR.JOBCODE          (,55) !9
       print $JOBTBL_DESCR        (,67)
       print &LBR.EMPL_CTG         (,90)
       print &LBR.SETID_SALARY     (,109)
       print &LBR.SAL_ADMIN_PLAN   (,123)
       print &LBR.GRADE            (,136)
end-procedure !Print-JobCode-Hierarchy




!************************************************************************************!
! Procedure: JobData-History-Heading                                                  !
! Description: This procedure prints the Heading of Job Data History section         !
!************************************************************************************!
begin-procedure JobData-History-Heading
       !Total No. of rows per page = 70. If Job data history section is supposed to be printed 
       ! at Line no >= 67, then this section would be printed from the next page only.
       let #lineno = #current-line + 4
       if #lineno >= 67
       new-page
       end-if
       print $lbl_job_history  (+3,4)
                                                    !       !(long,short)
       !------1st List----!                                          
       print $lbl_EffDate        (+2,7)             !8       !10
       print $lbl_seq            (,18)              !3       !2
       print $lbl_action         (,22)              !6       !50,30
       print $lbl_actionreason   (,29)              !13      !30,10
       print $lbl_position       (,56)              !8       !30,10       
       print $lbl_Jobcode1       (,66)              !8
       print $lbl_Job            (,76)              !6       !30,10
       print $lbl_department     (,87)              !10      !30,10
       print $lbl_locationcode   (,97)              !8       !30,10
       !print $lbl_RegOr         (,109)             !4       !30,10
       !print $lbl_Empl          (,114)             !5       !30,10
       !print $lbl_reg           (,119)             !5       !30,10       
       print $lbl_Std            (,109)             !7       !float - 4.2
       print $lbl_labor          (,119)             !9       !6
       print $lbl_Union          (,131)             !5       !3
       print $lbl_comprate       (,139)             !17      !Float - total -18
       print $lbl_freq           (,156)             !4       !5
       print $lbl_Facility1      (,163)             !8       !10
       print $lbl_seniority      (,176)             !9       !
       print $lbl_seniority      (,188)             !9       !10
       
       print $lbl_family         (+1,76)
       !print $lbl_temp          (,109)
       !print $lbl_class         (,114)              
       !print $lbl_Shift         (,119)
       print $lbl_hours          (,109)
       print $lbl_agreement      (,119)              !9
       print $lbl_code           (,131)
       print $lbl_comprate1      (,139)
       print $lbl_id             (,176)
       print $lbl_dates          (,188)              !4
       
       
     
       !print $lbl_Fte         (+1,9)             !3       !float - 1.6
       !print $lbl_FullOr      (,18)              !5       !30,10
       !print $lbl_Part        (+1,18)            !8
      
end-procedure !JobData-History-Heading       
       



!************************************************************************************!
! Procedure: JobData-History                                                          !
! Description: This procedure selects data from PS_JOB for Job Data History section  !
!************************************************************************************!
begin-procedure JobData-History
DO JobData-History-Heading
BEGIN-SELECT
B.EFFDT
B.EFFSEQ
B.ACTION
B.ACTION_REASON
B.JOBCODE
B.SETID_JOBCODE
B.POSITION_NBR
!JOBFAMILY
B.DEPTID
B.SETID_DEPT
B.LOCATION
B.SETID_LOCATION
B.REG_TEMP
B.EMPL_CLASS
B.SHIFT
B.STD_HOURS
B.FTE
B.FULL_PART_TIME
B.LABOR_AGREEMENT
B.UNION_CD
B.COMPRATE
B.COMP_FREQUENCY
B.LABOR_FACILITY_ID
!B.UNION_SENIORITY_DT
 do Select-JobFamily
 do Select-descr
 do Print-JobData-History
from PS_JOB B
WHERE EMPLID = $emplid
AND EMPL_RCD = #empl_rcd
ORDER BY EFFDT DESC
END-SELECT
end-procedure !JobData-History 


!-----Procedure which fetches the Job Family of a Job code--------!
begin-procedure Select-JobFamily
!Should SETID be checked in the below query??
BEGIN-SELECT
JB.JOB_FAMILY
FROM PS_JOBCODE_TBL JB
WHERE JOBCODE = &B.JOBCODE
AND SETID = &B.SETID_JOBCODE
AND EFFDT = (SELECT MAX(EFFDT)
              FROM PS_JOBCODE_TBL
              WHERE JOBCODE = &B.JOBCODE
              AND SETID = &B.SETID_JOBCODE
              AND EFFDT <= $AsOfToday)!$current-date)
AND EFF_STATUS = 'A'

END-SELECT
end-procedure !Select-JobFamily



begin-procedure Select-descr
!-----SELECT which fetches the Action Reason description for a Action-Action Reason--------!
!-------Description is 1st fetched from related language table. We make use of the rellang.sqc
!-------which has appropriate procedure to fetch the description from the Related Lang table...
!-------If the descr is not present in the Related Lang table then it should be fetched from the Base table
#define ACTN_REASON_VW
BEGIN-SELECT
RSN.DESCR
 let $rsn_descr = &RSN.DESCR
FROM PS_ACTN_REASON_VW RSN
WHERE ACTION = &B.ACTION
AND ACTION_REASON = &B.ACTION_REASON
AND EFF_STATUS = 'A'
END-SELECT

Do Get_Related_ACTN_REASON_VW(&B.ACTION,&B.ACTION_REASON)

if $ACTN_REASON_VW-DESCR <> ''
 let $rsn_descr = $ACTN_REASON_VW-DESCR
end-if

end-procedure !Select-descr




!************************************************************************************!
! Procedure: Print-JobData-History                                                  !
! Description: This procedure prints data for Job Data History section               !
!************************************************************************************!
begin-procedure Print-JobData-History
       ! Each row of data has occupies 2 lines, This page break would avoid printing the 1st line 
       ! of data in the 88th line (ie last line of the page), so that a row data is not broken 
       ! across pages.
       !let #lineno = #current-line + 1
       !if #lineno = 88
       !new-page
       !end-if
       
       evaluate $DT_FMT
             when = 'M'
                  do Format-DateTime(&B.EFFDT,$EFFDT,{DEFMDY},'','')
                  break
             when = 'D'
                  do Format-DateTime(&B.EFFDT,$EFFDT,{DEFDMY},'','')
                  break
             when-Other
                  do Format-DateTime(&B.EFFDT,$EFFDT,{DEFYMD},'','')
                  break
     end-evaluate
     
       !do Format-DateTime(&B.EFFDT, $EFFDT, {DEFDATE}, '', '')
       
       print $EFFDT (+2,7) !edit 'dd/mm/yyyy'
       print &B.EFFSEQ (,18)       !will be printed at the center of the column heading
       print &B.ACTION (,22)
       print $rsn_descr (,29)
       print &B.POSITION_NBR (,56)
       print &B.JOBCODE (,66)       
       
       !if RTRIM(&B.JOBCODE,' ' ) <> '' and RTRIM(&B.POSITION_NBR,' ' ) <> ''
        ! LET $MergeString = RTRIM(&B.POSITION_NBR,' ') || '/' || RTRIM(&B.JOBCODE,' ')
       !print $MergeString (,44)
       !end-if

       print &JB.JOB_FAMILY (,76)       
       print &B.DEPTID (,87) !&DD.DESCRSHORT (,90)
       print &B.LOCATION (,97) !&LD.DESCRSHORT (,100)              
       !print &B.REG_TEMP (,109)
       !print &B.EMPL_CLASS (,114)              
       !print &B.SHIFT (,119)              
       print &B.STD_HOURS (,109)       
       
       !print &B.FTE (+1,9)                     
       !print &B.FULL_PART_TIME (,18)              
       print &B.LABOR_AGREEMENT (,119)              
       print &B.UNION_CD (,131)    
       print &B.COMPRATE (,139)  EDIT (888888888888.88)    !8 is used to print the no. left justified.     
       print &B.COMP_FREQUENCY (,156)
       print &B.LABOR_FACILITY_ID (,163)
       Do Select-SeniorityInfn
              
end-procedure !Print-JobData-History

       
!************************************************************************************!
! Procedure: Select-SeniorityInfn                                                  !
! Description: This procedure selects the Seniority Infn from PS_HR_EE_SNR_DATES     !
!************************************************************************************!
begin-procedure Select-SeniorityInfn
  LET #CNT = 0
BEGIN-SELECT
SNR.SENIORITY_DATE_ID
SNR.LABOR_SENIORITY_DT
  LET #CNT = #CNT + 1
  Do Print-SeniorityInfn
FROM PS_HR_EE_SNR_DATES SNR
WHERE SNR.EMPLID = $emplid
AND SNR.EMPL_RCD = #empl_rcd
AND SNR.EFFDT = &B.EFFDT
AND SNR.EFFSEQ = &B.EFFSEQ
AND SNR.LABOR_AGREEMENT = &B.LABOR_AGREEMENT
ORDER BY SNR.LABOR_SENIORITY_DT DESC
END-SELECT
end-procedure !Select-SeniorityInfn



!************************************************************************************!
! Procedure: Print-SeniorityInfn                                                 !
! Description: This procedure prints the Seniority Infn                              !
!************************************************************************************!
begin-procedure Print-SeniorityInfn
  !do Convert-To-DTU-Date (&SNR.EFFDT,$SNR_out)
  !do Format-DateTime($SNR_out, $SNR_temp, {DEFDATE}, '', '')
  
      evaluate $DT_FMT
       when = 'M'
            do Format-DateTime(&SNR.LABOR_SENIORITY_DT,$snr_date,{DEFMDY},'','')
            break
       when = 'D'
            do Format-DateTime(&SNR.LABOR_SENIORITY_DT,$snr_date,{DEFDMY},'','')
            break
       when-Other
            do Format-DateTime(&SNR.LABOR_SENIORITY_DT,$snr_date,{DEFYMD},'','')
            break
     end-evaluate
     
   !do Format-DateTime(&SNR.LABOR_SENIORITY_DT, $snr_date, {DEFDATE}, '', '')
   
  IF #CNT = 1
       print &SNR.SENIORITY_DATE_ID (,176)       
       print $snr_date (,188) !edit 'dd/mm/yyyy'
  ELSE
         print &SNR.SENIORITY_DATE_ID (+1,176)       
       print $snr_date (,188) !edit 'dd/mm/yyyy'
  END-IF
end-procedure !Print-SeniorityInfn




!***********************************************************************
!-----------------Procedure: Getting Report Labels---------------------*
!Description: This Procedure gets the Report labels from the Database. *
!***********************************************************************
Begin-Procedure Get-RP-Lbl

let $ReportID = 'HR_UHRLY'
do Init_Report_Translation($ReportID,$curr_language_cd) 
do Append_Report_Translation ($ReportID)


do Get_Field_Information ('HR_UHRLY','HR_BUMP_LST',$lbl_bumplst,#DW1)
do Get_Field_Information ('HR_UHRLY','REPORTNAME',$lbl_Reportname,#DW1)
do Get_Field_Information ('HR_UHRLY','PEOPLESOFT',$lbl_Peoplesoft,#DW1)
do Get_Field_Information ('HR_UHRLY','HR_BUMP_RPT',$lbl_Bumpreport,#DW1)
do Get_Field_Information ('HR_UHRLY','PAGE_NO',$lbl_Pageno,#DW1)
do Get_Field_Information ('HR_UHRLY','RUN DATE',$lbl_Rundate,#DW1)
do Get_Field_Information ('HR_UHRLY','RUN_TIME',$lbl_Runtime,#DW1)


do Get_Field_Information ('HR_UHRLY','ROSTER_ID',$lbl_RosterID,#DW1)
do Get_Field_Information ('HR_UHRLY','EMPLOYEEID',$lbl_EmployeeID,#DW1)
do Get_Field_Information ('HR_UHRLY','LABOR_AGREEMENT',$lbl_LaborAgreement,#DW1)
do Get_Field_Information ('HR_UHRLY','DEPT',$lbl_Dept,#DW1)
do Get_Field_Information ('HR_UHRLY','LOCATION',$lbl_Location,#DW1)
do Get_Field_Information ('HR_UHRLY','FACILITY',$lbl_Facility,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBCODE',$lbl_Jobcode,#DW1)


do Get_Field_Information ('HR_UHRLY','EMPLOYEEID',$lbl_EmployeeID,#DW1)
do Get_Field_Information ('HR_UHRLY','EMPLOYEERCD',$lbl_EmployeeRCD,#DW1)


do Get_Field_Information ('HR_UHRLY','JOB_HIERARCHY',$lbl_job_hierarchy,#DW1)
!do Get_Field_Information ('HR_UHRLY','LBR_AGREEMENT',$lbl_Lbr_agrmnt,#DW1)
!do Get_Field_Information ('HR_UHRLY','EFF_DATE',$lbl_EffDate,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBCODE1',$lbl_Jobcode1,#DW1)
do Get_Field_Information ('HR_UHRLY','JOB_CLASS',$lbl_Jobclass,#DW1)
do Get_Field_Information ('HR_UHRLY','SALARY_PLAN',$lbl_SalaryPlan,#DW1)
do Get_Field_Information ('HR_UHRLY','GRADE',$lbl_Grade,#DW1)
do Get_Field_Information ('HR_UHRLY','HIER_SEQ_NUM',$lbl_HIER_SEQ_NUM,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBDESCR',$lbl_JOBDESCR,#DW1)
do Get_Field_Information ('HR_UHRLY','EMPL_CATG',$lbl_empl_catg,#DW1)
do Get_Field_Information ('HR_UHRLY','SALARY_SETID',$lbl_Salary_setid,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBCODE_SETID',$lbl_Jobcode_setid,#DW1)



do Get_Field_Information ('HR_UHRLY','JOB_HISTORY',$lbl_job_history,#DW1)
do Get_Field_Information ('HR_UHRLY','EFF_DATE',$lbl_EffDate,#DW1)
do Get_Field_Information ('HR_UHRLY','SEQ',$lbl_seq,#DW1)
do Get_Field_Information ('HR_UHRLY','ACTION',$lbl_action,#DW1)
do Get_Field_Information ('HR_UHRLY','ACTION_REASON',$lbl_actionreason,#DW1)
do Get_Field_Information ('HR_UHRLY','POSITION',$lbl_position,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBCODE1',$lbl_Jobcode1,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBFAMILY',$lbl_Job,#DW1)
do Get_Field_Information ('HR_UHRLY','JOBFAMILY1',$lbl_family,#DW1)
do Get_Field_Information ('HR_UHRLY','DEPARTMENT',$lbl_department,#DW1)
do Get_Field_Information ('HR_UHRLY','LOCATIONCODE',$lbl_locationcode,#DW1)
!do Get_Field_Information ('HR_UHRLY','REG_TEMP',$lbl_RegOr,#DW1)
!do Get_Field_Information ('HR_UHRLY','REG_TEMP1',$lbl_temp,#DW1)
!do Get_Field_Information ('HR_UHRLY','EMPLOYEE_CLASS',$lbl_Empl,#DW1)
!do Get_Field_Information ('HR_UHRLY','EMPLOYEE_CLASS1',$lbl_class,#DW1)
!do Get_Field_Information ('HR_UHRLY','REG',$lbl_reg,#DW1)
!do Get_Field_Information ('HR_UHRLY','SHIFT',$lbl_Shift,#DW1)
do Get_Field_Information ('HR_UHRLY','STD_HOURS',$lbl_Std,#DW1)
do Get_Field_Information ('HR_UHRLY','HOURS',$lbl_hours,#DW1)

!do Get_Field_Information ('HR_UHRLY','FTE',$lbl_Fte,#DW1)
!do Get_Field_Information ('HR_UHRLY','FULL_PART',$lbl_FullOr,#DW1)
!do Get_Field_Information ('HR_UHRLY','PART',$lbl_Part,#DW1)
do Get_Field_Information ('HR_UHRLY','LABOR',$lbl_labor,#DW1)
do Get_Field_Information ('HR_UHRLY','AGREEMENT',$lbl_agreement,#DW1)
do Get_Field_Information ('HR_UHRLY','UNION_CODE',$lbl_Union,#DW1)
do Get_Field_Information ('HR_UHRLY','UNION_CODE1',$lbl_code,#DW1)
do Get_Field_Information ('HR_UHRLY','COMPRATE',$lbl_comprate,#DW1)
do Get_Field_Information ('HR_UHRLY','COMPRATE1',$lbl_comprate1,#DW1)
do Get_Field_Information ('HR_UHRLY','FREQ',$lbl_freq,#DW1)
do Get_Field_Information ('HR_UHRLY','FACILITY1',$lbl_Facility1,#DW1)
do Get_Field_Information ('HR_UHRLY','SENIORITY',$lbl_seniority,#DW1)
do Get_Field_Information ('HR_UHRLY','ID',$lbl_id,#DW1)
do Get_Field_Information ('HR_UHRLY','SENIORITY',$lbl_seniority,#DW1)
do Get_Field_Information ('HR_UHRLY','DATES',$lbl_dates,#DW1)

End-Procedure !Get-RP-Lbl




       
!***********************************************************************!
!-----------------------------SQCs--------------------------------------!
!***********************************************************************!
#include 'stdapi.sqc'      !Routine to update run status
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'
#include 'hrsecty.sqc'
#Include 'curdttim.sqc'    !Get-Current-DateTime procedure
#Include 'datetime.sqc'    !Routines for date and time formatting
#Include 'number.sqc'      !Routines to format numbers
#Include 'sqrtrans.sqc'

#include 'prcslng.sqc'   !Gives Language Code
#include 'rellang.sqc'   !Gives Description from Related Lang tables