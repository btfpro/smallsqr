!***********************************************************************
! FGHR001A:  Determine Mass Organization Change Data
!***********************************************************************

!***********************************************************************
!                                                                      *
!  Confidentiality Information:                                        *
!                                                                      *
!  This module contains confidential and proprietary information       *
!  of Oracle; it is not to be copied, reproduced, or transmitted       *
!  in any form, by any means, in whole or in part, nor is it to        *
!  be used for any purpose other than that for which it is             *
!  expressly provided under the applicable license agreement.          *
!                                                                      *
!  Copyright (C) 2006 Oracle. All Rights Reserved.                     *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:49:51                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************



#Include 'setenv.sqc'                          !Set Database Environment
#Include 'setup31.sqc'                         !Printer and page-size initialization



!***************************************************************************
begin-report
!***************************************************************************

  do Init-Report

  do Process-Main

  do StdAPI-Term
  do commit-transaction

end-report

!***************************************************************************
begin-procedure Init-Report
!***************************************************************************


  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
   do Get-Values
  end-if

  do Update-asofdate

  do Delete-Data


  do Update-Log

end-procedure


begin-Procedure Update-Log

begin-SQL

DELETE FROM PS_MOC_LOG

end-SQL

begin-SQL

INSERT INTO PS_MOC_LOG (MOC_ID, CHANGE_TYPE) VALUES ($runctl_moc_id, $Change_type)

end-SQL

end-Procedure Update-Log

begin-Procedure Delete-Data

begin-SQL

DELETE FROM PS_GVT_MOC_JOB_TMP

end-SQL

end-Procedure Delete-Data


begin-Procedure Update-asofdate

begin-SQL

UPDATE PSASOFDATE SET ASOFDATE = $Change_effdt

end-SQL

do commit-transaction

end-Procedure Update-asofdate


Begin-Procedure Ask-Values

let $runctl_moc_id = 'DEPT'
do Get-MOC-Data
end-procedure


Begin-Procedure Get-Values

do Get-MOC-Run-Params
do Get-MOC-Data

end-procedure

begin-procedure Process-Main

begin-SELECT

A.EMPLID,
A.EMPL_RCD,
A.EFFDT,
A.EFFSEQ,
A.DEPTID,
A.GVT_TRANS_NBR,
A.GVT_TRANS_NBR_SEQ,
A.JOBCODE,
A.POSITION_NBR,
A.POSITION_OVERRIDE,
A.POSN_CHANGE_RECORD,
A.EMPL_STATUS,
A.ACTION,
A.GVT_NOA_CODE,
A.GVT_LEG_AUTH_1,
A.GVT_PAR_AUTH_D1,
A.GVT_PAR_AUTH_D1_2,
A.GVT_LEG_AUTH_2,
A.GVT_PAR_AUTH_D2,
A.GVT_PAR_AUTH_D2_2,
A.GVT_PAR_NTE_DATE,
A.ACTION_DT,
A.ACTION_REASON,
A.LOCATION,
A.TAX_LOCATION_CD,
A.JOB_ENTRY_DT,
A.DEPT_ENTRY_DT,
A.POSITION_ENTRY_DT,
A.SHIFT,
A.REG_TEMP,
A.GVT_WORK_SCHED,
A.FULL_PART_TIME,
A.COMPANY,
A.GVT_SUB_AGENCY,
A.PAYGROUP,
A.BAS_GROUP_ID,
A.ELIG_CONFIG1,
A.ELIG_CONFIG2,
A.ELIG_CONFIG3,
A.GVT_ELIG_FEHB,
A.GVT_FEHB_DT,
A.BEN_STATUS,
A.COBRA_ACTION,
A.EMPL_TYPE,
A.HOLIDAY_SCHEDULE,
A.STD_HOURS,
A.EEO_CLASS,
A.EMPL_CLASS,
A.GVT_PAY_RATE_DETER,
A.GVT_PAY_PLAN,
A.SAL_ADMIN_PLAN,
A.GRADE,
A.GRADE_ENTRY_DT,
A.STEP,
A.STEP_ENTRY_DT,
A.GVT_STEP,
A.GVT_RTND_PAY_PLAN,
A.GVT_RTND_SAL_PLAN,
A.GVT_RTND_GRADE,
A.GVT_RTND_STEP,
A.GVT_RTND_GVT_STEP,
A.GL_PAY_TYPE,
A.ACCT_CD,
A.EARNS_DIST_TYPE,
A.GVT_PAY_BASIS,
A.COMP_FREQUENCY,
A.COMPRATE,
A.GVT_COMPRATE,
A.GVT_LOCALITY_ADJ,
A.CHANGE_AMT,
A.CHANGE_PCT,
A.ANNUAL_RT,
A.MONTHLY_RT,
A.GVT_BIWEEKLY_RT,
A.GVT_DAILY_RT,
A.HOURLY_RT,
A.ANNL_BENEF_BASE_RT,
A.GVT_HRLY_RT_NO_LOC,
A.GVT_DLY_RT_NO_LOC,
A.GVT_BW_RT_NO_LOC,
A.GVT_MNLY_RT_NO_LOC,
A.GVT_ANNL_RT_NO_LOC,
A.SHIFT_RT,
A.SHIFT_FACTOR,
A.CURRENCY_CD,
A.GVT_XFER_FROM_AGCY,
A.GVT_XFER_TO_AGCY,
A.GVT_RETIRE_PLAN,
A.GVT_ANN_IND,
A.GVT_FEGLI,
A.GVT_ANNUITY_OFFSET,
A.GVT_CSRS_FROZN_SVC,
A.GVT_PREV_RET_COVRG,
A.GVT_FERS_COVERAGE,
A.GVT_TYPE_OF_APPT,
A.GVT_POI,
A.GVT_POSN_OCCUPIED,
A.ANNL_BEN_BASE_OVRD,
A.GVT_CONT_EMPLID,
A.GVT_EFFDT_PROPOSED,
A.GVT_WIP_STATUS,
A.BENEFIT_PROGRAM,
A.UPDATE_PAYROLL,
A.GVT_ROUTE_NEXT,
A.GVT_CHANGE_FLAG,
A.GVT_STATUS_TYPE,
A.GVT_TSP_UPD_IND,
A.GVT_PI_UPD_IND,
A.GVT_SF52_NBR,
A.GVT_S113G_CEILING,
A.GVT_LEO_POSITION,
A.GVT_ANNUIT_COM_DT,
A.GVT_BASIC_LIFE_RED,
A.GVT_DED_PRORT_DT,
A.GVT_EFFDT,
A.GVT_FEGLI_BASC_PCT,
A.GVT_FEGLI_OPT_PCT,
A.GVT_FEHB_PCT,
A.GVT_RETRO_FLAG,
A.GVT_RETRO_DED_FLAG,
A.GVT_RETRO_JOB_FLAG,
A.GVT_RETRO_BSE_FLAG,
A.GVT_OTH_PAY_CHG,
C.GVT_TRANS_NBR,
C.EFFDT,
C.ASOFDATE



  if &c.asofdate = &c.effdt
     let #tran_id  = &c.gvt_trans_nbr
     let #next_tran_id  = #tran_id + 1
  else
     let #next_tran_id   = 1
  end-if
  let #next_tran_seq = 1
  let #next_effseq   = #next_tran_id * 10 + 1
  do insert-row


FROM PS_GVT_JOB A, PS_GVT_WIP_STATUS B, PS_GVT_JOB_ASOF_VW C

WHERE A.GVT_WIP_STATUS = B.GVT_WIP_STATUS AND B.GVT_WIP_RECORD = 'USFED'
  AND B.GVT_INSERT_ALLOWED = 'Y'
  AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_GVT_JOB
                  WHERE EMPLID = A.EMPLID AND EMPL_RCD = A.EMPL_RCD
                    AND EFFDT <= $Change_Effdt)
  AND A.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_GVT_JOB
                  WHERE EMPLID = A.EMPLID AND EMPL_RCD = A.EMPL_RCD
                    AND GVT_WIP_STATUS = A.GVT_WIP_STATUS
                    AND EFFDT = A.EFFDT)
  AND C.EMPLID = A.EMPLID AND C.EMPL_RCD = A.EMPL_RCD
  [$where_frag]



end-SELECT
end-procedure Process-Main

begin-procedure Insert-Row

begin-SQL

INSERT INTO PS_GVT_MOC_JOB_TMP
(
 EMPLID,
 EMPL_RCD,
 EFFDT,
 EFFSEQ,
 DEPTID,
 GVT_TRANS_NBR,
 GVT_TRANS_NBR_SEQ,
 POSITION_NBR,
 ACTION,
 GVT_NOA_CODE,
 GVT_LEG_AUTH_1,
 GVT_PAR_AUTH_D1,
 GVT_PAR_AUTH_D1_2,
 ACTION_REASON,
 DEPT_ENTRY_DT,
 POSITION_ENTRY_DT,
 GVT_WIP_STATUS,
 GVT_EFFDT,
 CHANGE_TYPE,
 REPORTS_TO
)
VALUES
(
 &A.EMPLID,
 &A.EMPL_RCD,
 &C.ASOFDATE,
 #NEXT_EFFSEQ,
 $NEW_DEPT,
 #NEXT_TRAN_ID,
 #NEXT_TRAN_SEQ,
 $NEW_POS,
 $ACTION,
 $NOA_CODE,
 $LEGAL_AUTHORITY,
 $AUTH_DESCR_1,
 $AUTH_DESCR_2,
 $ACTION_REASON,
 $CHANGE_EFFDT,
 $CHANGE_EFFDT,
 $WIP_STATUS,
 &C.ASOFDATE,
 $Change_Type,
 $reports_to
)

end-SQL

end-procedure Insert-Row


begin-procedure Get-MOC-Run-Params

begin-SELECT

MOC_ID
DELETE_DATA

FROM PS_GVT_RUN_CNTL
WHERE OPRID  = $Prcs_OprID
 AND  RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SELECT

let $runctl_moc_id = &MOC_ID
let $delete_table = &DELETE_DATA

end-procedure Get-MOC-Run-Params




begin-procedure Get-MOC-Data

begin-SELECT

ASOFDATE
ACTION
ACTION_REASON
GVT_NOA_CODE
GVT_LEG_AUTH_1
GVT_PAR_AUTH_D1
GVT_PAR_AUTH_D1_2
GVT_WIP_STATUS
NEW_DEPTID
NEW_POS_NBR
SELECTOR
REPORTS_TO

  let $change_effdt = &asofdate
  let $action = &action
  let $action_reason = &action_reason
  let $noa_code = &gvt_noa_code
  let $legal_authority = &gvt_leg_auth_1
  let $auth_descr_1 = &gvt_par_auth_d1
  let $auth_descr_2 = &gvt_par_auth_d1_2
  let $wip_status = &gvt_wip_status
  let $new_dept = &new_deptid
  let $new_pos = &new_pos_nbr
  let $change_type = &selector
  let $reports_to  = &reports_to

FROM PS_GVT_MOC_DATA
WHERE MOC_ID = $runctl_moc_id
end-SELECT



if $change_type = 'D'
  let $where_frag = 'AND A.DEPTID IN (SELECT DEPTID FROM PS_MOC_DEPT WHERE
                   MOC_ID = '||''''||$runctl_moc_id||''''||' )'
else
  let $where_frag = 'AND A.POSITION_NBR IN (SELECT POSITION_NBR FROM PS_MOC_POS
                        WHERE MOC_ID = '||''''||$runctl_moc_id||''''||' )'
end-if

display  $where_frag

end-procedure Get-MOC-Data



#Include 'fgrunctl.sqc'  !Get application run control parameters
#Include 'fggetval.sqc'  !Get BEN values mask routines
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id



