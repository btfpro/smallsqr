!*******************************************
!  OHS001FR:  Health and Safety (FRA) Global*
!*******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/02/15:00:53:24                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
Begin-Setup
#Include 'ptpsl177.sqc'  !Printer and page-size initialization
End-Setup

#define COMPANY_TBL
#define ESTAB_TBL
#define INCIDENT_DATA
#define BODY_PART_TBL
#define INJURY_NATR_TBL
#define INCIDENT_PEOPLE
#define PERSONAL_DATA
#include 'rellang.sqc'
#define RELLANG_PROG

!***********************************************************************

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

!***********************************************************************
!  Heading
!***********************************************************************

begin-heading 6
  #Include 'stdhdgtr.sqc'
end-heading

!***********************************************************************
!  Init Report
!***********************************************************************

begin-procedure Init-Report

  move 'OHS001FR' to $ReportID
  move 'French Work Accident Report' to $ReportTitle

  do Stdapi-Init
  let $language_cd = $CURR_LANGUAGE_CD

  if $prcs_process_instance = ''
        !No Prompt
  else
    do Select-Parameters
  end-if
 do Init_Printer

   do Init_Report_Translation($ReportID, $language_cd)
   do Append_Report_Translation($ReportID)
end-procedure

!***********************************************************************
!  Get Values
!***********************************************************************

begin-procedure Get-Values
        let $language_cd = $PRCS_LANGUAGE_CD

        do Get-Emplid-Incident-Parameters
        let $INCIDENT_NBR = $Incident
        let $EMPLID = $Emplid
        do Get-As-Of-Date
        let $RPT_TYPE = RTRIM(&RUN_CNTL_OHS.hs_rpt_type_fra, ' ')
end-procedure

!***********************************************************************
!  Main: Creates the Health & Safety Report
!***********************************************************************

begin-procedure Process-Main
   do Get-Translat-Info   ! Global

let $RegRegion = 'FRA'

   do Count-Casualties
   if #Casualties > 0

      if $RPT_TYPE = 'E' !By Employee
         do By-Employee-Rpt
      else              !By Incident Nbr
         do By-Incident-Rpt
      end-if
   end-if

end-procedure

!***********************************************************************
!  By Employee Report
!***********************************************************************

begin-procedure By-Employee-Rpt
   do Get-Company-Data
   do Get-Estab-Data
   do Get-Casualty-Data
   do Get-Incident-Data
   do Get-Witness-Data
   move 0 to #bFlag
   do Get-Third-Party-Data
   if #bFlag = 0
      print $THIRD_PARTY (+2,1)
      print $THIRD_RESPONSIBLE (+1,1)
      print $NO  (,+3)
   end-if
end-procedure By-Employee-Rpt

!***********************************************************************
!  By Incident Report
!***********************************************************************

begin-procedure By-Incident-Rpt
begin-SELECT ON-ERROR=SQL-Error
EMPLID      &EMPLID
   let $EMPLID = &EMPLID

   do By-Employee-Rpt

        print ' ' (+6)
FROM
        PS_INJURY_ILL
WHERE
        INCIDENT_NBR = $INCIDENT_NBR
end-select
end-procedure By-Incident-Rpt

!***********************************************************************
!  Retrieves Company Data
!***********************************************************************

begin-procedure Get-Company-Data
begin-SELECT ON-ERROR=SQL-Error
A.COMPANY   &COMPANY
{DATETIMEOUT-PREFIX}A.EFFDT{DATETIMEOUT-SUFFIX}     &COMP_EFFDT
A.DESCR     &COMPANY_DESCR
A.ADDRESS1  &COMPANY_ADDR1
A.ADDRESS2  &COMPANY_ADDR2
A.ADDRESS3  &COMPANY_ADDR3
A.ADDRESS4  &COMPANY_ADDR4
A.POSTAL    &COMPANY_POSTAL
A.CITY      &COMPANY_CITY

   let $Company = &COMPANY

   let $COMPANY_TBL-DESCR    = &COMPANY_DESCR
   let $COMPANY_TBL-ADDRESS1 = &COMPANY_ADDR1
   let $COMPANY_TBL-ADDRESS2 = &COMPANY_ADDR2
   let $COMPANY_TBL-ADDRESS3 = &COMPANY_ADDR3
   let $COMPANY_TBL-ADDRESS4 = &COMPANY_ADDR4
   let $COMPANY_POSTAL       = &COMPANY_POSTAL
   let $COMPANY_TBL-CITY     = &COMPANY_CITY
   do Get_Related_COMPANY_TBL(&COMPANY,&COMP_EFFDT)
   let $COMPANY_DESCR = $COMPANY_TBL-DESCR
   let $COMPANY_ADDR1 = $COMPANY_TBL-ADDRESS1
   let $COMPANY_ADDR2 = $COMPANY_TBL-ADDRESS2
   let $COMPANY_ADDR3 = $COMPANY_TBL-ADDRESS3
   let $COMPANY_ADDR4 = $COMPANY_TBL-ADDRESS4
   let $COMPANY_CITY  = $COMPANY_TBL-CITY

   do Print-Company-Data

FROM
        PS_COMPANY_TBL A,
        PS_JOB B
WHERE
        B.EMPLID = $EMPLID
  AND   A.COMPANY = B.COMPANY
  AND   A.EFFDT = (SELECT MAX(AA.EFFDT) FROM PS_COMPANY_TBL AA
                   WHERE AA.COMPANY = A.COMPANY
                     AND AA.EFFDT <= $AsOfDate)
  AND   A.EFF_STATUS = 'A'

  AND   B.EFFDT = (select MAX(EFFDT)
                  from   PS_JOB
                  where  EFFDT <= $AsOfDate
                    and  B.EMPLID = EMPLID)
!                    and  B.EMPL_RCD = EMPL_RCD)
  AND   B.EFFSEQ = (select MAX(EFFSEQ)
                   from   PS_JOB
                   where  B.EFFDT = EFFDT
                     and  B.EMPLID = EMPLID
                     and  B.EMPL_RCD = EMPL_RCD)
end-SELECT
end-procedure

!***********************************************************************
!  Retrieves Establishment Data
!***********************************************************************

begin-procedure Get-Estab-Data
begin-SELECT ON-ERROR=SQL-Error
A.ESTABID        &ESTABID
{DATETIMEOUT-PREFIX}A.EFFDT{DATETIMEOUT-SUFFIX}          &ESATB_EFFDT
A.DESCR          &ESTAB_DESCR
A.ADDRESS1       &ESTAB_ADDR1
A.ADDRESS2       &ESTAB_ADDR2
A.ADDRESS3       &ESTAB_ADDR3
A.ADDRESS4       &ESTAB_ADDR4
A.POSTAL         &ESTAB_POSTAL
A.CITY           &ESTAB_CITY
D.SIREN_CD_FRA   &SIREN_CD
D.NIC_CODE_FRA   &NIC_CODE
   let $EstabId = &ESTABID

   let $ESTAB_TBL-DESCR    = &ESTAB_DESCR
   let $ESTAB_TBL-ADDRESS1 = &ESTAB_ADDR1
   let $ESTAB_TBL-ADDRESS2 = &ESTAB_ADDR2
   let $ESTAB_TBL-ADDRESS3 = &ESTAB_ADDR3
   let $ESTAB_TBL-ADDRESS4 = &ESTAB_ADDR4
   let $ESTAB_TBL-CITY     = &ESTAB_CITY
   do Get_Related_ESTAB_TBL(&ESATB_EFFDT, &ESTABID)
   let $ESTAB_DESCR = $ESTAB_TBL-DESCR
   let $ESTAB_ADDR1 = $ESTAB_TBL-ADDRESS1
   let $ESTAB_ADDR2 = $ESTAB_TBL-ADDRESS2
   let $ESTAB_ADDR3 = $ESTAB_TBL-ADDRESS3
   let $ESTAB_ADDR4 = $ESTAB_TBL-ADDRESS4
   let $ESTAB_CITY  = $ESTAB_TBL-CITY

   do Print-Estab-Data

FROM
        PS_ESTAB_TBL A
        ,PS_JOB B
        ,PS_ESTAB_TBL_FRA D
!YVG   ,PS_DEPT_TBL C
WHERE
           B.EMPLID = $EMPLID
           AND A.ESTABID = B.ESTABID            !YVG ADD
           AND D.ESTABID = A.ESTABID
!YVG  and C.SETID = B.SETID_DEPT
!YVG  and C.ESTABID = A.ESTABID
!YVG  and C.EFFDT = (select MAX(EFFDT)
!YVG                  from   PS_DEPT_TBL
!YVG                  where  EFFDT <= $AsOfDate
!YVG                    and  C.DEPTID = DEPTID
!YVG                          and  C.SETID = SETID
!YVG                          and  C.ESTABID = ESTABID)
!YVG  and  C.EFF_STATUS = 'A'

!YVG  AND A.REG_REGION = $RegRegion
  AND A.EFFDT = (SELECT MAX(AA.EFFDT) FROM PS_ESTAB_TBL AA
                   WHERE AA.ESTABID = A.ESTABID
                    AND AA.EFFDT <= $AsOfDate)
  AND A.EFF_STATUS = 'A'
  AND D.EFFDT = A.EFFDT

  AND   B.EFFDT = (select MAX(EFFDT)
                  from   PS_JOB
                  where  EFFDT <= $AsOfDate
                    and  B.EMPLID = EMPLID)
!                    and  B.EMPL_RCD = EMPL_RCD)
  AND   B.EFFSEQ = (select MAX(EFFSEQ)
                   from   PS_JOB
                   where  B.EFFDT = EFFDT
                     and  B.EMPLID = EMPLID
                     and  B.EMPL_RCD = EMPL_RCD)
end-SELECT

end-procedure

!***********************************************************************
!  Retrieves Incident Data
!***********************************************************************

begin-procedure Get-Incident-Data
begin-SELECT ON-ERROR=SQL-Error
{DATETIMEOUT-PREFIX}B.INCIDENT_DT{DATETIMEOUT-SUFFIX}           &INC_INCIDENT_DT
{TIMEOUT-PREFIX}B.INCIDENT_TIME{TIMEOUT-SUFFIX}         &INC_INCIDENT_TIME
{TIMEOUT-PREFIX}A.HRS_AM_STRT_TM_FRA{TIMEOUT-SUFFIX}    &INC_HRS_AM_STRT_TM_FRA
{TIMEOUT-PREFIX}A.HRS_AM_END_TM_FRA{TIMEOUT-SUFFIX}     &INC_HRS_AM_END_TM_FRA
{TIMEOUT-PREFIX}A.HRS_PM_STRT_TM_FRA{TIMEOUT-SUFFIX}    &INC_HRS_PM_STRT_TM_FRA
{TIMEOUT-PREFIX}A.HRS_PM_END_TM_FRA{TIMEOUT-SUFFIX}     &INC_HRS_PM_END_TM_FRA
B.LOCATION_CLASS_FRA    &INC_LOCATION_CLASS_FRA
B.DESCRLONG             &INC_DESCRLONG
B.INCIDENT_STAT_FRA     &INC_INCIDENT_STAT_FRA   !XLAT
{DATETIMEOUT-PREFIX}B.DT_REPORTED{DATETIMEOUT-SUFFIX}           &INC_DT_REPORTED
{TIMEOUT-PREFIX}B.TIME_REPORTED{TIMEOUT-SUFFIX}         &INC_TIME_REPORTED
B.REP_BY_CLASS_FRA      &INC_REP_BY_CLASS_FRA   !XLAT
A.OH_REGISTER_SW_FRA    &INC_OH_REGISTER_SW_FRA
{DATETIMEOUT-PREFIX}A.OH_REG_DATE_FRA{DATETIMEOUT-SUFFIX}       &INC_OH_REG_DATE_FRA
A.OH_REG_NUMBER_FRA     &INC_OH_REG_NUMBER_FRA
A.INJ_ILL_CONSEQ_FRA       &INC_INJ_ILL_CONSEQ_FRA   !XLAT
A.INJURY_ILLNESS              &INC_INJURY_ILLNESS    !XLAT
B.REP_POLICE_SW_FRA,    &WITNESS_POLICE_RPT
B.REP_POLICE_NAM_FRA    &WITNESS_POLICE_NAM
B.INCIDENT_NBR          &INC_INCIDENT_NBR

   let $INCIDENT_DATA-DESCRLONG = &INC_DESCRLONG
   do Get_Related_INCIDENT_DATA(&INC_INCIDENT_NBR)
   let $INC_DESCRLONG = $INCIDENT_DATA-DESCRLONG

   do Select_From_Xlat('INCIDENT_STAT_FRA', &INC_INCIDENT_STAT_FRA, $ShortName, $LongName)
   let $INC_INCIDENT_STAT_FRA = $LongName
   do Select_From_Xlat('REP_BY_CLASS_FRA', &INC_REP_BY_CLASS_FRA, $ShortName, $LongName)
   let $INC_REP_BY_CLASS_FRA = $LongName

   if &INC_INJ_ILL_CONSEQ_FRA = 'T' !Stop Work
      let $StopWorkFlg = $YES
   else
      let $StopWorkFlg = $NO
   end-if

   if &INC_INJURY_ILLNESS = 'D' !Death
      do Select_From_Xlat('INJURY_ILLNESS', &INC_INJURY_ILLNESS, $ShortName, $LongName)
      let $StopWorkFlg = $LongName
   end-if

      do Print-Incident-Data-Part1
      do Get-Body-Parts
                do Get-Injury-Nat
                do Get-Hospital
      do Print-Incident-Data-Part2

FROM
        PS_INJURY_ILL A,
        PS_INCIDENT_DATA B
WHERE
           A.EMPLID = $EMPLID
  AND   B.INCIDENT_NBR = $INCIDENT_NBR
  AND   A.INCIDENT_NBR = B.INCIDENT_NBR
  AND B.REG_REGION = $RegRegion
  AND A.REG_REGION = $RegRegion
end-SELECT
end-procedure

!***********************************************************************
!  Retrieves Body Parts Data
!***********************************************************************

begin-procedure Get-Body-Parts
begin-SELECT ON-ERROR=SQL-Error
D.DESCR100              &INC_BP_DESCR
C.SIDE_OF_BODY          &INC_SIDE_OF_BODY   !XLAT

D.SETID               &INC_BP_SETID
D.BODY_PART_CD        &INC_BP_BODY_PART_CD
{DATETIMEOUT-PREFIX}D.EFFDT{DATETIMEOUT-SUFFIX}               &INC_BP_EFFDT

   let $BODY_PART_TBL-DESCR100 = &INC_BP_DESCR
   do Get_Related_BODY_PART_TBL(&INC_BP_BODY_PART_CD, &INC_BP_EFFDT, &INC_BP_SETID)
   let $INC_BP_DESCR = $BODY_PART_TBL-DESCR100

   do Select_From_Xlat('SIDE_OF_BODY', &INC_SIDE_OF_BODY, $ShortName, $LongName)
   let $INC_SIDE_OF_BODY = $LongName

   do Print-Body-Parts-Data

FROM
        PS_INJURY_ILL_BP C,
        PS_BODY_PART_TBL D
WHERE
                C.EMPLID = $EMPLID
  AND C.INCIDENT_NBR = $INCIDENT_NBR
  AND D.BODY_PART_CD = C.BODY_PART_CD
  AND D.EFFDT = (SELECT MAX(DD.EFFDT) FROM PS_BODY_PART_TBL DD
                  WHERE
                                        DD.BODY_PART_CD = D.BODY_PART_CD
                               AND DD.EFFDT <= $AsOfDate)
  AND D.EFF_STATUS = 'A'

end-Select
end-procedure Get-Body-Parts

!***********************************************************************
!  Retrieves Injury Nature Data
!***********************************************************************

begin-procedure Get-Injury-Nat
begin-SELECT ON-ERROR=SQL-Error
F.DESCR100              &INC_NAT_DESCR

F.SETID               &INC_NAT_SETID
F.INJURY_NATURE_CD    &INC_NAT_INJURY_NATURE_CD
{DATETIMEOUT-PREFIX}F.EFFDT{DATETIMEOUT-SUFFIX}               &INC_NAT_EFFDT

   let $INJURY_NATR_TBL-DESCR100 =  &INC_NAT_DESCR
   do Get_Related_INJURY_NATR_TBL(&INC_NAT_EFFDT, &INC_NAT_INJURY_NATURE_CD, &INC_NAT_SETID)
   let $INC_NAT_DESCR = $INJURY_NATR_TBL-DESCR100

   do Print-Injury-Nat-Data

FROM
        PS_INJURY_ILL_NOI E,
        PS_INJURY_NATR_TBL F
WHERE
                E.EMPLID = $EMPLID
  AND E.INCIDENT_NBR = $INCIDENT_NBR
  AND F.INJURY_NATURE_CD = E.INJURY_NATURE_CD
  AND F.EFFDT = (SELECT MAX(FF.EFFDT) FROM PS_INJURY_NATR_TBL FF
                   WHERE
                                        FF.INJURY_NATURE_CD = F.INJURY_NATURE_CD
                               AND FF.EFFDT <= $AsOfDate)
  AND F.EFF_STATUS = 'A'
end-SELECT

end-procedure Get-Injury-Nat

!***********************************************************************
!  Retrieves Hospital Data
!***********************************************************************

begin-procedure Get-Hospital
begin-SELECT ON-ERROR=SQL-Error
G.HOSPITAL              &INC_HOSPITAL

      do Print-Hospital-Data

FROM
        PS_INJURY_ILL_ADDR G
WHERE
                G.EMPLID = $EMPLID
  AND G.INCIDENT_NBR = $INCIDENT_NBR
end-SELECT

end-procedure Get-Hospital

!***********************************************************************
!  Retrieves Witness Data
!***********************************************************************

begin-procedure Get-Witness-Data
begin-SELECT ON-ERROR=SQL-Error
A.EMPLID          &WITNESS_EMPLID
        let $THPTY_EMPLID = &WITNESS_EMPLID
A.NON_EMPLOYEE_ID &WITNESS_NON_EMPLOYEE_ID
        let $THPTY_NON_EMPLOYEE_ID = &WITNESS_NON_EMPLOYEE_ID
A.ADDRESS1        &WITNESS_ADDR1
A.ADDRESS2        &WITNESS_ADDR2
A.ADDRESS3        &WITNESS_ADDR3
A.ADDRESS4        &WITNESS_ADDR4
A.POSTAL          &WITNESS_POSTAL
A.CITY            &WITNESS_CITY

A.INCIDENT_NBR        &WITNESS_INCIDENT_NBR
A.INCIDENT_ROLE       &WITNESS_INCIDENT_ROLE

   let $INCIDENT_PEOPLE-ADDRESS1  = &WITNESS_ADDR1
   let $INCIDENT_PEOPLE-ADDRESS2  = &WITNESS_ADDR2
   let $INCIDENT_PEOPLE-ADDRESS3  = &WITNESS_ADDR3
   let $INCIDENT_PEOPLE-ADDRESS4  = &WITNESS_ADDR4
   let $INCIDENT_PEOPLE-CITY      = &WITNESS_CITY
   do Get_Related_INCIDENT_PEOPLE(&WITNESS_EMPLID, &WITNESS_INCIDENT_NBR, &WITNESS_INCIDENT_ROLE, &WITNESS_NON_EMPLOYEE_ID)
   let $WITNESS_ADDR1 = $INCIDENT_PEOPLE-ADDRESS1
   let $WITNESS_ADDR2 = $INCIDENT_PEOPLE-ADDRESS2
   let $WITNESS_ADDR3 = $INCIDENT_PEOPLE-ADDRESS3
   let $WITNESS_ADDR4 = $INCIDENT_PEOPLE-ADDRESS4
   let $WITNESS_CITY  = $INCIDENT_PEOPLE-CITY

   do Get-Name-Third-Party
   do Print-Witness-Data

FROM
        PS_INCIDENT_PEOPLE A
WHERE
        A.INCIDENT_NBR = $INCIDENT_NBR
  AND   A.INCIDENT_ROLE IN ('EW','IW')  ! Witness
end-SELECT
end-procedure

!***********************************************************************
!  Retrieves Third Party Data
!***********************************************************************

begin-procedure Get-Third-Party-Data
begin-SELECT ON-ERROR=SQL-Error
A.EMPLID           &THPTY_EMPLID
        let $THPTY_EMPLID = &THPTY_EMPLID
A.NON_EMPLOYEE_ID  &THPTY_NON_EMPLOYEE_ID
        let $THPTY_NON_EMPLOYEE_ID = &THPTY_NON_EMPLOYEE_ID
A.HS_INSURANCE_FRA &THPTY_HS_INSURANCE_FRA
A.ADDRESS1         &THPTY_ADDR1
A.ADDRESS2         &THPTY_ADDR2
A.ADDRESS3         &THPTY_ADDR3
A.ADDRESS4         &THPTY_ADDR4
A.POSTAL           &THPTY_POSTAL
A.CITY             &THPTY_CITY
   move 1 to #bFlag     ! Third party responsible YES

A.INCIDENT_NBR        &THPTY_INCIDENT_NBR
A.INCIDENT_ROLE       &THPTY_INCIDENT_ROLE

   let $INCIDENT_PEOPLE-ADDRESS1  = &THPTY_ADDR1
   let $INCIDENT_PEOPLE-ADDRESS2  = &THPTY_ADDR2
   let $INCIDENT_PEOPLE-ADDRESS3  = &THPTY_ADDR3
   let $INCIDENT_PEOPLE-ADDRESS4  = &THPTY_ADDR4
   let $INCIDENT_PEOPLE-CITY      = &THPTY_CITY
   do Get_Related_INCIDENT_PEOPLE(&THPTY_EMPLID, &THPTY_INCIDENT_NBR, &THPTY_INCIDENT_ROLE, &THPTY_NON_EMPLOYEE_ID)
   let $THPTY_ADDR1 = $INCIDENT_PEOPLE-ADDRESS1
   let $THPTY_ADDR2 = $INCIDENT_PEOPLE-ADDRESS2
   let $THPTY_ADDR3 = $INCIDENT_PEOPLE-ADDRESS3
   let $THPTY_ADDR4 = $INCIDENT_PEOPLE-ADDRESS4
   let $THPTY_CITY  = $INCIDENT_PEOPLE-CITY

   do Get-Name-Third-Party
   do Print-Third-Party-Data

FROM
        PS_INCIDENT_PEOPLE A
WHERE
        A.INCIDENT_NBR = $INCIDENT_NBR
!  AND  A.INCIDENT_ROLE = 'OP'  ! Other Party
  AND A.RESPONSIBLE_SW = 'Y'
end-SELECT
end-procedure Get-Third-Party-Data

!***********************************************************************
!  Get Third Party Name
!***********************************************************************

begin-procedure Get-Name-Third-Party
        if RTRIM($THPTY_EMPLID, ' ') <> ''
                let $ToFind = $THPTY_EMPLID
        else
                let $ToFind = $THPTY_NON_EMPLOYEE_ID
        end-if
begin-Select ON-ERROR=SQL-Error
NAME &NAME
FROM
        PS_PERSON_NAME
WHERE
        EMPLID = $ToFind
end-Select
end-procedure Get-Name-Third-Party


!***********************************************************************
!  Prints Company Data
!***********************************************************************

begin-procedure Print-Company-Data
   print $EMPLOYER       (+1,1)
   print $COMPANY_NAME   (+2,1)
      print $COMPANY_DESCR  (,+3)
   print $ADDRESS        (+1,1)
      print $COMPANY_ADDR1  (+1,3)
      print $COMPANY_ADDR2  (+1,3)
      print $COMPANY_ADDR3  (+1,3)
      print $COMPANY_ADDR4  (+1,3)
   print $POSTAL         (+1,1)
      print $COMPANY_POSTAL (,+3)
      print $COMPANY_CITY   (,+3)
end-procedure

!***********************************************************************
!  Prints Estab Data
!***********************************************************************

begin-procedure Print-Estab-Data
   print $ESTAB        (+2,1)
      print $ESTAB_DESCR  (,+3)
   print $ADDRESS      (+1,1)
      print $ESTAB_ADDR1  (+1,3)
      print $ESTAB_ADDR2  (+1,3)
      print $ESTAB_ADDR3  (+1,3)
      print $ESTAB_ADDR4  (+1,3)
   print $POSTAL       (+1,1)
      print &ESTAB_POSTAL (,+3)
      print $ESTAB_CITY   (,+3)
   print $SIRET        (+1,1)
   let $SIRET_CD = &SIREN_CD || &NIC_CODE
      print $SIRET_CD    (,+3)
end-procedure

!***********************************************************************
!  Prints Casualty Data
!***********************************************************************

begin-procedure Print-Casualty-Data
   print $CASUALTY             (+2,1)
   print $SSN_NBR (+1,1)
      print &CASUALTY_SSN         (,+3)
      print &CASUALTY_SSN_KEY     (,+2)
   print $SEX (+1,1)
      print &CASUALTY_SEX         (,+3)
   print $BIRTHDATE (,+5)
   do Convert-To-DTU-Date(&CASUALTY_BIRTHDTAE, $DTUCASUALTY_BIRTHDTAE)
      print $DTUCASUALTY_BIRTHDTAE   (,+3)
   print $NAME (+1,1)
      print $CSY_NAME        (,+3)
   print $ADDRESS (+1,1)
      print $CSY_ADDR1       (+1,3)
      print $CSY_ADDR2       (+1,3)
      print $CSY_ADDR3       (+1,3)
      print $CSY_ADDR4       (+1,3)
   print $POSTAL (+1,1)
      print $CSY_POSTAL      (,+3)
      print $CSY_CITY        (,+3)
   print $HIRING_DATE (+1,1)
   do Convert-To-DTU-Date(&CASUALTY_ORIG_HIRE_DT, $DTUCASUALTY_ORIG_HIRE_DT)
      print $DTUCASUALTY_ORIG_HIRE_DT (,+3)
   print $JOB (,+3)
      print &CASUALTY_DESCR        (,+3)
   print $EMP_CATGRY (+1,1)
      print &CASUALTY_EMP_CATEGRY_FRA (,+3)
   print $OLDNESS (,+3)
   do Convert-To-DTU-Date(&CASUALTY_ACTION_DT, $DTUCASUALTY_ACTION_DT)
      print $DTUCASUALTY_ACTION_DT (,+3)
   print $MORE_CASUALTIES (+1,1)
   if #Casualties > 1
      print $YES (,+3)
   else
      print $NO  (,+3)
   end-if
end-procedure

!***********************************************************************
!  Prints Incident Data
!***********************************************************************

begin-procedure Print-Incident-Data-Part1
   print $INJURY                     (+2,1)

   print $DATE                       (+1,1)
   do Convert-To-DTU-Date(&INC_INCIDENT_DT, $DTUINC_INCIDENT_DT)
      print $DTUINC_INCIDENT_DT          (,+3)
   print $TIME                       (,+3)
!      do Format-DateTime(&INC_INCIDENT_TIME, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
      print &INC_INCIDENT_TIME   (,+3)

   print $CASUALTY_STD_TIME          (+1,1)
   print $FROM                       (,+3)
!      do Format-DateTime(&INC_HRS_AM_STRT_TM_FRA, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
                print &INC_HRS_AM_STRT_TM_FRA (,+3)
   print $TO                         (,+3)
!      do Format-DateTime(&INC_HRS_AM_END_TM_FRA, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
                print &INC_HRS_AM_END_TM_FRA (,+3)
   print $FROM                       (,+3)
!      do Format-DateTime(&INC_HRS_PM_STRT_TM_FRA, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
                print &INC_HRS_PM_STRT_TM_FRA (,+3)
   print $TO                         (,+3)
!      do Format-DateTime(&INC_HRS_PM_END_TM_FRA, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
                print &INC_HRS_PM_END_TM_FRA (,+3)
   print $LOCATION                    (+1,1)
      print &INC_LOCATION_CLASS_FRA   (,+3)

   print $INJURY_DESCR                (+1,1)
      print $INC_DESCRLONG            (,+3)
end-procedure

begin-procedure Print-Body-Parts-Data
   print $BODY_PART                    (+1,1)
      print $INC_BP_DESCR             (,+3)
      print $INC_SIDE_OF_BODY         (,+3)
end-procedure

begin-procedure Print-Injury-Nat-Data
   print $DAMAGE_KIND                 (+1,1)
      print $INC_NAT_DESCR            (,+3)
end-procedure

begin-procedure Print-Hospital-Data
   print $HOSPITAL                    (+1,1)
      print &INC_HOSPITAL             (,+3)
end-procedure

begin-procedure Print-Incident-Data-Part2
   print $INJURY_LOW                   (+1,1)
      print $INC_INCIDENT_STAT_FRA    (,+3)
   print $DATE                        (,+3)
   do Convert-To-DTU-Date(&INC_DT_REPORTED, $DTUINC_DT_REPORTED)
      print $DTUINC_DT_REPORTED          (,+3)
   print $TIME                        (,+3)
!      do Format-DateTime(&INC_TIME_REPORTED, $value, {DEFYMD}, 'time', '')
!               let $value = {ps-substr}($value, 10, 5)
!      print $value   (,+3)
      print &INC_TIME_REPORTED   (,+3)

      print $INC_REP_BY_CLASS_FRA     (,+3)

   print $REGISTERED                  (+1,1)
      if &INC_OH_REGISTER_SW_FRA = 'Y'
         print $YES                    (,+3)
      else
         print $NO                     (,+3)
      end-if
   print $DATE                        (,+3)
   do Convert-To-DTU-Date(&INC_OH_REG_DATE_FRA, $DTUINC_OH_REG_DATE_FRA)
      print $DTUINC_OH_REG_DATE_FRA      (,+3)
   print $NUMBER                       (,+3)
      print &INC_OH_REG_NUMBER_FRA    (,+3)

   print $STOPWORK                     (+1,1)
      print $StopWorkFlg               (,+3)
end-procedure

!***********************************************************************
!  Prints Witness Data
!***********************************************************************

begin-procedure Print-Witness-Data
   print $WITNESS (+2,1)
        print $NAME (+1,1)
                print &NAME                      (,+3)
   print $ADDRESS        (+1,1)
      print $WITNESS_ADDR1  (,+3)
      print $WITNESS_ADDR2  (,+3)
      print $WITNESS_ADDR3  (,+3)
      print $WITNESS_ADDR4  (,+3)
   print $POSTAL         (+1,1)
      print &WITNESS_POSTAL (,+3)
      print $WITNESS_CITY   (,+3)
        print $POLICE_REPORT_SW (+1,1)
                if(&WITNESS_POLICE_RPT = 'Y')
                        print $YES              (,+3)
                else
                        print $NO               (,+3)
                end-if
        print $NAME                                     (+1,1)
                print &WITNESS_POLICE_NAM (,+3)

end-procedure

!***********************************************************************
!  Prints Third Party Data
!***********************************************************************

begin-procedure Print-Third-Party-Data
   print $THIRD_PARTY (+2,1)
   print $THIRD_RESPONSIBLE (+1,1)
      print $YES  (,+3)
                print $NAME (+1,1)
                        print &NAME                      (,+3)
      print $ADDRESS        (+1,1)
         print $THPTY_ADDR1  (,+3)
         print $THPTY_ADDR2  (,+3)
         print $THPTY_ADDR3  (,+3)
         print $THPTY_ADDR4  (,+3)
      print $POSTAL         (+1,1)
         print &THPTY_POSTAL (,+3)
         print $THPTY_CITY   (,+3)

      print $INSURANCE (+1,1)
                        print &THPTY_HS_INSURANCE_FRA (,+3)
end-procedure

!***********************************************************************
!  Counts casualties
!***********************************************************************

begin-procedure Count-Casualties
begin-SELECT ON-ERROR=SQL-Error
COUNT(*) &CASUALTIES
   let #Casualties = &CASUALTIES
FROM
        PS_INJURY_ILL
WHERE
        INCIDENT_NBR = $INCIDENT_NBR
end-select
end-procedure

!***********************************************************************
!  Retrieves Casualty Data
!***********************************************************************

begin-procedure Get-Casualty-Data
begin-SELECT ON-ERROR=SQL-Error
!C.SSN_FRA         &CASUALTY_SSN
!C.SSN_KEY_FRA     &CASUALTY_SSN_KEY
G.NATIONAL_ID     &CASUALTY_SSN
G.SSN_KEY_FRA     &CASUALTY_SSN_KEY
C.SEX             &CASUALTY_SEX
{DATETIMEOUT-PREFIX}C.BIRTHDATE{DATETIMEOUT-SUFFIX}       &CASUALTY_BIRTHDTAE
C.NAME            &CASUALTY_NAME
F.PROF_EXPERIENCE_DT &CASUALTY_ORIG_HIRE_DT
!{DATETIMEOUT-PREFIX}C.ORIG_HIRE_DT{DATETIMEOUT-SUFFIX}    &CASUALTY_ORIG_HIRE_DT
E.DESCR           &CASUALTY_DESCR
E.EMP_CATEGRY_FRA &CASUALTY_EMP_CATEGRY_FRA
{DATETIMEOUT-PREFIX}D.ACTION_DT{DATETIMEOUT-SUFFIX}       &CASUALTY_ACTION_DT
C.EMPLID          &CASUALTY_EMPLID

   let $CSY_NAME   = &CASUALTY_NAME

   do Get-Address-Data (&CASUALTY_EMPLID, $AsOfDate, $AD_Address1, $AD_Address2, $AD_Address3,
                        $AD_Address4, $AD_City, $AD_Postal)

   let $PERSONAL_DATA-ADDRESS1  = $AD_Address1
   let $PERSONAL_DATA-ADDRESS2  = $AD_Address2
   let $PERSONAL_DATA-ADDRESS3  = $AD_Address3
   let $PERSONAL_DATA-ADDRESS4  = $AD_Address4
   let $PERSONAL_DATA-CITY      = $AD_City

!   do Get_Related_PERSONAL_DATA(&CASUALTY_EMPLID)
   let $CSY_ADDR1 = $PERSONAL_DATA-ADDRESS1
   let $CSY_ADDR2 = $PERSONAL_DATA-ADDRESS2
   let $CSY_ADDR3 = $PERSONAL_DATA-ADDRESS3
   let $CSY_ADDR4 = $PERSONAL_DATA-ADDRESS4
   let $CSY_CITY  = $PERSONAL_DATA-CITY
   let $CSY_POSTAL = $AD_Postal

   do Print-Casualty-Data

FROM
        PS_PERSONAL_DT_FST C,
        PS_JOB D,
        PS_JOBCODE_TBL E,
        PS_EMPLOYMENT F,
        PS_PERS_NID G
WHERE
              C.EMPLID = $EMPLID
  AND   D.EMPLID = C.EMPLID
  AND   F.EMPLID = C.EMPLID
  AND           G.EMPLID = C.EMPLID
  AND   F.EMPL_RCD = D.EMPL_RCD
  AND      D.COMPANY = $Company
  AND      D.ESTABID = $EstabId
  AND    E.SETID = D.SETID_JOBCODE
  AND   E.JOBCODE = D.JOBCODE
  AND   D.REG_REGION = $RegRegion
  AND    D.EFFDT = (SELECT MAX(DD.EFFDT) FROM PS_JOB DD
                   WHERE
                              DD.EMPLID = D.EMPLID
!                    AND DD.EMPL_RCD = D.EMPL_RCD
                     AND DD.EFFDT <= $AsOfDate)
  AND   D.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB DE
                   where  DE.EFFDT = D.EFFDT
                     and  DE.EMPLID = D.EMPLID
                     and  DE.EMPL_RCD = D.EMPL_RCD)
  AND    E.EFFDT = (SELECT MAX(EE.EFFDT) FROM PS_JOBCODE_TBL EE
                   WHERE
                              EE.JOBCODE = E.JOBCODE
                     AND EE.EFFDT <= $AsOfDate)
  AND E.EFF_STATUS = 'A'
end-SELECT

end-procedure


!************************************************************************!
begin-procedure Get-Address-Data ($AddrEmplid,$AddrEffdt,:$AD_Address1,
                                  :$AD_Address2,:$AD_Address3,:$AD_Address4,
                                  :$AD_City, :$AD_Postal)
!************************************************************************!
Begin-SELECT

AD.ADDRESS1
AD.ADDRESS2
AD.ADDRESS3
AD.ADDRESS4
AD.CITY
AD.POSTAL

FROM PS_ADDRESSES AD
WHERE AD.EMPLID = $AddrEmplid
AND   AD.ADDRESS_TYPE = 'HOME'
AND   AD.EFFDT = (SELECT MAX(AD1.EFFDT)
                  FROM PS_ADDRESSES AD1
                  WHERE AD1.EMPLID = AD.EMPLID
                  AND   AD1.ADDRESS_TYPE = 'HOME'
                  AND   AD1.EFFDT <= $AddrEffdt)


End-SELECT

   let $AD_Address1 = &AD.ADDRESS1
   let $AD_Address2 = &AD.ADDRESS2
   let $AD_Address3 = &AD.ADDRESS3
   let $AD_Address4 = &AD.ADDRESS4
   let $AD_City     = &AD.CITY
   let $AD_Postal   = &AD.POSTAL


End-Procedure


!***********************************************************************
!  Gets the strings printed in this report (Globalization)
!***********************************************************************

begin-procedure Get-Translat-Info

   do Get_Field_Information($ReportID, 'ADDRESS'           ,$ADDRESS            ,#DW)
   do Get_Field_Information($ReportID, 'BIRTHDATE'         ,$BIRTHDATE          ,#DW)
   do Get_Field_Information($ReportID, 'BODY_PART'         ,$BODY_PART          ,#DW)
   do Get_Field_Information($ReportID, 'CASUALTY'          ,$CASUALTY           ,#DW)
   do Get_Field_Information($ReportID, 'CASUALTY_STD_TIME' ,$CASUALTY_STD_TIME  ,#DW)
   do Get_Field_Information($ReportID, 'COMPANY_NAME'      ,$COMPANY_NAME       ,#DW)
   do Get_Field_Information($ReportID, 'CONSEQUENCE'       ,$CONSEQUENCE        ,#DW)
   do Get_Field_Information($ReportID, 'DAMAGE_KIND'       ,$DAMAGE_KIND        ,#DW)
   do Get_Field_Information($ReportID, 'DATE'              ,$DATE               ,#DW)
   do Get_Field_Information($ReportID, 'EMPLOYER'          ,$EMPLOYER           ,#DW)
   do Get_Field_Information($ReportID, 'EMP_CATGRY'        ,$EMP_CATGRY         ,#DW)
   do Get_Field_Information($ReportID, 'ESTAB'             ,$ESTAB              ,#DW)
   do Get_Field_Information($ReportID, 'FROM'              ,$FROM               ,#DW)
   do Get_Field_Information($ReportID, 'HIRING_DATE'       ,$HIRING_DATE        ,#DW)
   do Get_Field_Information($ReportID, 'HOSPITAL'          ,$HOSPITAL           ,#DW)
   do Get_Field_Information($ReportID, 'INJURY'            ,$INJURY             ,#DW)
   do Get_Field_Information($ReportID, 'INJURY_DESCR'      ,$INJURY_DESCR       ,#DW)
   do Get_Field_Information($ReportID, 'INJURY_LOW'        ,$INJURY_LOW         ,#DW)
   do Get_Field_Information($ReportID, 'INSURANCE'         ,$INSURANCE          ,#DW)
   do Get_Field_Information($ReportID, 'JOB'               ,$JOB                ,#DW)
   do Get_Field_Information($ReportID, 'LOCATION'          ,$LOCATION           ,#DW)
   do Get_Field_Information($ReportID, 'MORE_CASUALTIES'   ,$MORE_CASUALTIES    ,#DW)
   do Get_Field_Information($ReportID, 'NAME'              ,$NAME               ,#DW)
   do Get_Field_Information($ReportID, 'NO'                ,$NO                 ,#DW)
   do Get_Field_Information($ReportID, 'NUMBER'            ,$NUMBER             ,#DW)
   do Get_Field_Information($ReportID, 'OLDNESS'           ,$OLDNESS            ,#DW)
   do Get_Field_Information($ReportID, 'POLICE_REPORT_SW'  ,$POLICE_REPORT_SW   ,#DW)
   do Get_Field_Information($ReportID, 'POSTAL'            ,$POSTAL             ,#DW)
   do Get_Field_Information($ReportID, 'REGISTERED'        ,$REGISTERED         ,#DW)
   do Get_Field_Information($ReportID, 'SEX'               ,$SEX                ,#DW)
   do Get_Field_Information($ReportID, 'SIRET'             ,$SIRET              ,#DW)
   do Get_Field_Information($ReportID, 'SSN_NBR'           ,$SSN_NBR            ,#DW)
   do Get_Field_Information($ReportID, 'STOPWORK'          ,$STOPWORK           ,#DW)
   do Get_Field_Information($ReportID, 'THIRD_PARTY'       ,$THIRD_PARTY        ,#DW)
   do Get_Field_Information($ReportID, 'THIRD_RESPONSIBLE' ,$THIRD_RESPONSIBLE  ,#DW)
   do Get_Field_Information($ReportID, 'TIME'              ,$TIME               ,#DW)
   do Get_Field_Information($ReportID, 'TO'                ,$TO                 ,#DW)
   do Get_Field_Information($ReportID, 'WHO'               ,$WHO                ,#DW)
   do Get_Field_Information($ReportID, 'WITNESS'           ,$WITNESS            ,#DW)
   do Get_Field_Information($ReportID, 'YES'               ,$YES                ,#DW)
end-procedure

!***********************************************************************

!#include 'hrctlfra.sqc'  !Get run control parameter values
!#include 'hrgetfra.sqc'  !Get values mask routines
#include 'ohsrnctl.sqc'  !Get run control parameter values
#include 'ohsget.sqc'    !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'datemath.sqc'

