!-----------------------------------------------------------------------
!  STOP005:  Summary of Shares Shares Cancelled/Expired
!-----------------------------------------------------------------------
!               Confidentiality Information:
!
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2007/01/30:02:18:06                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!
!-----------------------------------------------------------------------
! Program Descr: Prints all shares cancelled and expired within a date range.
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Select-Vesting-Info
  do Get-Shares-Exercised
  do Process-Shares-Exercised
  do Create-Array
  do Process-Main
  do Delete-Temp
  do Reset
  do Successful-EOJ

  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID = 'STOP005'
  let $cur = $basecurr

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language

  if $prcs_process_instance = ''
    input $RC_Stock_ID          MAXLEN=10 'Enter Stock ID'           Type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID       MAXLEN=10 'Stock ID is required'     Type=Char
    end-while
    input $RC_Stock_Plan    maxlen=10 type=char 'Enter the STOCK PLAN ID or press enter for all'
    input $RC_Option_Type   maxlen=4 type=char  'Enter the OPTION TYPE or press enter for all'
    input $RC_Cancel_Reason maxlen=1 type=char  'Enter the CANCEL REASON or press enter for all'
    uppercase $RC_Stock_ID
    uppercase $RC_Cancel_Reason
    uppercase $RC_Option_Type
    uppercase $RC_Stock_Plan
    do Ask-from-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'From Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $StockId          = rtrim($RC_Stock_ID,' ')
  let $RC_Stock_Plan    = rtrim($RC_Stock_Plan,' ')
  let $RC_Option_Type   = rtrim($RC_Option_Type,' ')
  let $RC_Cancel_Reason = rtrim($RC_Cancel_Reason,' ')
  let $RC_FromDate      = rtrim($RC_FromDate,' ')
  let $RC_ThruDate      = rtrim($RC_ThruDate,' ')

  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')

  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 09

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  ,018,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  let $Fieldname  = 'ST_CANCEL_REASON'
  let $Fieldvalue = $RC_Cancel_Reason
  do Read-Translate-Table
  let $ReasonXlat = $Xlatshortname
  print $CancelReasonLbl                                   (+1,001,013)
  print ':'                                                (  ,   ,001)
  print $ReasonXlat                                        (  ,018,010)

  print $OptionTypeLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,018,004)

  print $StockPlanLbl                                      (+1,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,018,010)

  print $NameLbl                                           (+2,001,030)
  print $GrantNbrLbl                                       (  ,032,012)
  print $OptionTypeLbl                                     (  ,046,012)
  print $TotalLbl                                          (  ,124,005)
  print $TotalLbl                                          (  ,168,005)
  print $EmplLbl                                           (+1,001,030)
  print $CancelDtLbl                                       (  ,032,011)
  print $CancelReasonLbl                                   (  ,046,013)
  print $StockPlanLbl                                      (  ,060,011)
  print $GrantPriceLbl                                     (  ,074,011)
  print $ShrCnclLbl                                        (  ,093,016)
  print $CancelPriceLbl                                    (  ,111,018)
  print $ShrExprLbl                                        (  ,139,014)
  print $ExpirePriceLbl                                    (  ,157,016)
  print '-'                                                (+1,001,172) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',   'FROM',             $FromLbl,         #DW)
  do Get_Field_Information ('STOCK',   'THRU',             $ThruLbl,         #DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',         $StockIdLbl,      #DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN',       $StockPlanLbl,    #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE',   $OptionTypeLbl,   #DW)
  do Get_Field_Information ('STOCK',   'NAME',             $NameLbl,         #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',           $EmplLbl,         #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',        $GrantNbrLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',      $GrantPriceLbl,   #DW)
  do Get_Field_Information ('STOCK',   'SHARES_CANCELLED', $ShrCnclLbl,      #DW)
  do Get_Field_Information ('STOCK',   'SHARES_EXPIRED',   $ShrExprLbl,      #DW)
  do Get_Field_Information ('STOCK',   'TOTAL',            $TotalLbl,        #DW)
  do Get_Field_Information ('STOCK',   'HI',               $HiLbl,           #DW)
  do Get_Field_Information ('STOCK',   'LOW',              $LowLbl,          #DW)
  do Get_Field_Information ('STOCK',   'AVG',              $AvgLbl,          #DW)

  do Get_Field_Information ('STOP005', 'STOP005',          $ReportTitle,     #DW)
  do Get_Field_Information ('STOP005', 'TOTAL_WEIGHT',     $TotalWeightLbl,  #DW)
  do Get_Field_Information ('STOP005', 'CANCEL_REASON',    $CancelReasonLbl, #DW)
  do Get_Field_Information ('STOP005', 'CANCEL_PRICE',     $CancelPriceLbl,  #DW)
  do Get_Field_Information ('STOP005', 'EXPIRE_PRICE',     $ExpirePriceLbl,  #DW)
  do Get_Field_Information ('STOP005', 'CANCEL_DT',        $CancelDtLbl,     #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-where-Clause

  if $RC_Stock_Plan <> ''
    let $PlanClause    = 'and A.STOCK_PLAN = '''||$RC_Stock_Plan ||''''
  else
    let $PlanClause    =  ''
  end-if
  if $RC_Option_Type <> ''
    let $OptionClause  = 'and A.ST_OPTION_TYPE = '''||$RC_Option_Type ||''''
  else
    let $OptionClause  = ''
  end-if
  if $RC_Cancel_Reason <> ''
    let $ReasonClause  ='and A.ST_CANCEL_REASON = '''||$RC_Cancel_Reason ||''''
  else
    let $ReasonClause  = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan            -
               size  = 50                   -
               field = StockPlan:char       -
               field = SharesCancel:number  -
               field = CancelCost:number    -
               field = SharesExpire:number  -
               field = ExpireCost:number

  create-array name  = OptionType           -
               size  = 10                   -
               field = OptionType:char      -
               field = SharesCancel:number  -
               field = CancelCost:number    -
               field = SharesExpire:number  -
               field = ExpireCost:number

  create-array name  = CancelReason         -
               size  = 10                   -
               field = CancelReason:char    -
               field = SharesCancel:number  -
               field = CancelCost:number    -
               field = SharesExpire:number  -
               field = ExpireCost:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting-Info
! Descr:   Selects values to insert into ST_STOP005_TBL.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting-Info

Begin-Select
XA.EMPLID
XA.STOCK_ID
XA.STOCK_PLAN
XA.GRANT_NBR
XB.VEST_DT
XA.GRANT_PRICE
XB.SHARES_VESTED
XB.EXPIRATN_DT
XB.TERM_EXPIRATN_DT
XA.ST_CANCEL_REASON
XA.ST_CANCEL_DT

  let $MSCancelDt  = rtrim(&xa.st_cancel_dt,' ')
  let $MSTermExpDt = rtrim(&xb.term_expiratn_dt,' ')
  do Insert-Vesting-Info

from PS_ST_GRANT        XA,
     PS_ST_GRNT_VST_DTL XB
where XA.GRANT_STATUS = 'A'
  and XA.EMPLID     = XB.EMPLID
  and XA.STOCK_ID   = XB.STOCK_ID
  and XA.GRANT_NBR  = XB.GRANT_NBR
  and XB.VEST_EFFDT = (SELECT MAX(VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID       = XB.EMPLID
                          and STOCK_ID    = XB.STOCK_ID
                          and GRANT_NBR   = XB.GRANT_NBR
                          and VEST_EFFDT <= $AsOfToday)
  and XB.SEQ_NUM    = (SELECT MAX(SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID     = XB.EMPLID
                         and STOCK_ID   = XB.STOCK_ID
                         and GRANT_NBR  = XB.GRANT_NBR
                         and VEST_EFFDT = XB.VEST_EFFDT )
  and XA.STOCK_ID   = $RC_Stock_ID
End-Select

End-Procedure Select-Vesting-Info

!-----------------------------------------------------------------------
! Section: Insert-Vesting-Info
! Descr:   Inserts vesting info into a temp table as the first step in creating
!          the vesting schedule.  CurrentTime and Instance are used to 
!          eliminate the chance of data being accessed by two different runs
!          of the report at the same time.
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting-Info

 let $Procedure = 'Insert-Vesting-Temp'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STOP005_TBL
(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,STOCK_ID
,STOCK_PLAN
,GRANT_NBR
,VEST_DT
,GRANT_PRICE
,SHARES_VESTED
,SHARES_EXERCISED
,EXPIRATN_DT
,TERM_EXPIRATN_DT
,ST_CANCEL_REASON
,ST_CANCEL_DT)

VALUES
($CurrentTime
,#Instance
,&xa.emplid
,&xa.stock_id
,&xa.stock_plan
,&xa.grant_nbr
,&xb.vest_dt
,&xa.grant_price
,&xb.shares_vested
,0
,&xb.expiratn_dt,

! Workaround for TPRD T-MLEAN-Q54CT
#ifdef MICROSOFT
   $MSTermExpDt
  ,&xa.st_cancel_reason
  ,$MSCancelDt)
#else
   &xb.term_expiratn_dt
  ,&xa.st_cancel_reason
  ,&xa.st_cancel_dt)
#endif

end-sql

End-Procedure Insert-Vesting-Info

!-----------------------------------------------------------------------
! Section: Get-Shares-Exercised
! Descr:   Sums all exercises for a particular emplid, stock_id, grant_nbr
!          and vest_dt. Report lumps the sum in a particular vesting date and
!          then trickles the excess down to the next higher vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Exercised

Begin-Select
XC.EMPLID
XC.STOCK_ID
XC.GRANT_NBR
XD.VEST_DT
SUM(XC.SHARES_EXERCISED) &SumExer

  Do Update-Shares-ExercisedA

from PS_ST_GRANT_EXER   XC,
     PS_ST_STOP005_TBL  XD
where XC.EMPLID           = XD.EMPLID
  and XC.GRANT_NBR        = XD.GRANT_NBR
  and XC.STOCK_ID         = XD.STOCK_ID
  and XC.EXERCISE_STATUS  = 'A'
  and XC.STOCK_ID         = $RC_Stock_ID
  and XC.EXERCISE_DT     <= $RC_ThruDate
  and XD.DATETIME_STAMP   = $CurrentTime
  and XD.PROCESSINSTANCE  = #Instance
  and XD.VEST_DT          = (SELECT MIN(VEST_DT)
                             from  PS_ST_STOP005_TBL
                             where EMPLID              = XC.EMPLID
                               and GRANT_NBR           = XC.GRANT_NBR
                               and STOCK_ID            = XC.STOCK_ID
                               and STOCK_PLAN          = XC.STOCK_PLAN
                               and DATETIME_STAMP      = $CurrentTime
                               and PROCESSINSTANCE     = #Instance
                               and (XC.EXERCISE_DT     < EXPIRATN_DT
                               and (XC.EXERCISE_DT     < TERM_EXPIRATN_DT
                                or TERM_EXPIRATN_DT is null)))
GROUP BY XC.EMPLID,
         XC.STOCK_ID,
         XC.GRANT_NBR,
         XD.VEST_DT
End-Select

End-Procedure Get-Shares-Exercised

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedA
! Descr:   Updates the temp table with the sum of shares_exercised for a given
!          emplid, stock_id, grant_nbr, and vest_dt.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedA

 let $Procedure = 'Update-Shares-ExercisedA'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
UPDATE PS_ST_STOP005_TBL
  SET SHARES_EXERCISED = &SumExer

where EMPLID          = &xc.emplid
  and STOCK_ID        = &xc.stock_id
  and GRANT_NBR       = &xc.grant_nbr
  and VEST_DT         = &xd.vest_dt
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure Update-Shares-ExercisedA

!-----------------------------------------------------------------------
! Section: Process-Shares-Exercised
! Descr:   For each emplid and grant_nbr put info into array and call
!          Update-Shares-ExercisedB.
!-----------------------------------------------------------------------
Begin-Procedure Process-Shares-Exercised

  create-array name=Exer         -
               size=50           -
               field=VestDt:char -
               field=Vest:number -
               field=Exer:number
  let #x = 0

Begin-Select
XE.EMPLID       () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldEmp
XE.STOCK_ID     
XE.STOCK_PLAN   
XE.GRANT_NBR    () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldGrant
XE.VEST_DT
XE.SHARES_VESTED
XE.SHARES_EXERCISED

  put &xe.vest_dt &xe.shares_vested &xe.shares_exercised into EXER(#x) VestDt Vest Exer
  add 1 to #x
  
from PS_ST_STOP005_TBL XE
where XE.STOCK_ID        = $RC_Stock_ID
  and XE.DATETIME_STAMP  = $CurrentTime
  and XE.PROCESSINSTANCE = #Instance
ORDER BY 1,4,5
End-Select

 do Update-Shares-ExercisedB    !to process last on-break

End-Procedure Process-Shares-Exercised

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedB
! Descr:   For each row in the array, check if shares exercised are greater
!          than shares vested for a particular vest date. If so, trickle down
!          the excess to the next vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedB

  let #TotalRow  = 0
  let #Remainder = 0
  
  while #totalRow <= #x   !to run thru all elements
    
    
    get $VestDtArray #ShrVestArray #ShrExerArray  -
         from EXER(#totalRow) VestDt Vest Exer

    let #ShareToExer = #ShrExerArray + #Remainder
    
    if #ShareToExer > #ShrVestArray
       let #UpdateExer  = #ShrVestArray
       let #Remainder   = #ShareToExer  - #ShrVestArray
       do Update-Shares-ExercisedC
    else
       if #Remainder > #ShrExerArray
          let #UpdateExer = #Remainder
          do Update-Shares-ExercisedC
          let #Remainder = 0
       end-if
    end-if

    add 1 to #totalRow
   
  end-while
  
  clear-array  name=EXER

  let #x = 0

End-Procedure Update-Shares-ExercisedB

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedC
! Descr:   Updates the temp table.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedC

 let $Procedure     = 'Update-Shares-ExercisedC'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
UPDATE PS_ST_STOP005_TBL
  SET SHARES_EXERCISED = #UpdateExer

where EMPLID          = $OldEmp
  and STOCK_ID        = $RC_Stock_ID
  and GRANT_NBR       = $OldGrant
  and VEST_DT         = $VestDtArray
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure Update-Shares-ExercisedC

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let #PlanCount   = 1
  let #TypeCount   = 1
  let #ReasonCount = 1
  let #AvgCount    = 0
  let #LowPrice    = 0
  let #MaxPrice    = 0
  let #TotalPrice  = 0
  let $FirstPass   = 'Y'

Begin-Select

A.EMPLID
A.GRANT_NBR
A.ST_CANCEL_DT
A.ST_CANCEL_REASON
A.ST_OPTION_TYPE
A.STOCK_PLAN
A.GRANT_PRICE
B.NAME

  let $EmplId       = rtrim(&a.emplid,' ')
  let $GrantNbr     = rtrim(&a.grant_nbr,' ')
  let $CancelDt     = rtrim(&a.st_cancel_dt,' ')
  let $CancelReason = rtrim(&a.st_cancel_reason,' ')
  let $OptionType   = rtrim(&a.st_option_type,' ')
  let $StockPlan    = rtrim(&a.stock_plan,' ')
  let #GrantPrice   = &a.grant_price
  let $Name         = rtrim(&b.name,' ')
  do Get-Cancelled
  do Get-Cancelled-Reprice
  do Get-Expired
  do Get-Expired-Reprice
  let #SharesCancel = #CancelTerm   + #CancelRprc
  let #SharesExpire = #ExpireTerm   + #ExpireRprc
  let #CancelCost   = #SharesCancel * #GrantPrice
  let #ExpireCost   = #SharesExpire * #GrantPrice

  if #SharesCancel <> 0
    or #SharesExpire <> 0
    do Print-Details
    do Populate-Arrays
    do Get-Min-Max-GrantPrice
    let $RowSelected = 'Y'
 end-if

from PS_ST_GRANT       A,
     PS_ST_PERSON_NAME B
where A.EMPLID    = B.EMPLID
  and A.STOCK_ID  = $StockId
  and A.GRANT_DT <= $RC_ThruDate
  [$PlanClause]
  [$OptionClause]
  [$ReasonClause]
ORDER BY B.NAME, A.ST_OPTION_TYPE

End-Select

  if $RowSelected = 'Y' !implies some data selected
    do Print-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Cancelled
! Descr:   Retrieves cancelled shares not due to 
!          reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Cancelled

  let #CancelTerm = 0

Begin-Select
SUM(I.SHARES_VESTED)    &vest1
SUM(I.SHARES_EXERCISED) &exer1

  let #CancelTerm = &vest1 - &exer1

from PS_ST_STOP005_TBL I
where I.DATETIME_STAMP    = $CurrentTime
  and I.PROCESSINSTANCE   = #Instance
  and I.EMPLID            = $Emplid
  and I.STOCK_ID          = $StockId
  and I.GRANT_NBR         = $GrantNbr
  and I.STOCK_PLAN        = $StockPlan
  and I.ST_CANCEL_REASON  = 'TER'
  and I.ST_CANCEL_DT     <= I.VEST_DT
  and I.ST_CANCEL_DT     <= $RC_ThruDate
  and I.ST_CANCEL_DT     >= $RC_FromDate

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Cancelled-Reprice
! Descr:   Retrieves cancelled shares due to 
!          reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Cancelled-Reprice

  let #CancelRprc = 0

Begin-Select
SUM(K.SHARES_VESTED)    &vest2
SUM(K.SHARES_EXERCISED) &exer2

  let #CancelRprc = &Vest2 - &Exer2

 from PS_ST_STOP005_TBL K
where K.DATETIME_STAMP    = $CurrentTime
  and K.PROCESSINSTANCE   = #Instance
  and K.EMPLID            = $Emplid
  and K.STOCK_ID          = $StockId
  and K.GRANT_NBR         = $GrantNbr
  and K.STOCK_PLAN        = $StockPlan
  and (K.ST_CANCEL_REASON  = 'RPRC'
   or K.ST_CANCEL_REASON   = 'RESC')
  and K.ST_CANCEL_DT      < K.EXPIRATN_DT
  and (K.ST_CANCEL_DT     < K.TERM_EXPIRATN_DT
   or K.TERM_EXPIRATN_DT is null)
  and K.ST_CANCEL_DT     <= $RC_ThruDate
  and K.ST_CANCEL_DT     >= $RC_FromDate

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Expired
! Descr:   Retrieves expired shares not due to 
!          reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Expired

  let #ExpireTerm = 0

Begin-Select

SUM(O.SHARES_VESTED)    &vest3
SUM(O.SHARES_EXERCISED) &exer3

  let #ExpireTerm = &vest3 - &exer3

from PS_ST_STOP005_TBL O

!********* Begin Resolution 694867 *********

where O.DATETIME_STAMP     = $CurrentTime
  and O.PROCESSINSTANCE    = #Instance
  and O.EMPLID             = $Emplid
  and O.STOCK_ID           = $StockId
  and O.GRANT_NBR          = $GrantNbr
  and O.STOCK_PLAN         = $StockPlan
  and (O.ST_CANCEL_REASON  = 'TER'
   or O.ST_CANCEL_REASON   = ' ')
  and (O.ST_CANCEL_DT      > O.VEST_DT
   or O.ST_CANCEL_DT      is null)
  and O.EXPIRATN_DT       >= O.VEST_DT
  and (O.TERM_EXPIRATN_DT >= O.VEST_DT
   or O.TERM_EXPIRATN_DT  is null)
  and (((O.EXPIRATN_DT <= O.TERM_EXPIRATN_DT or O.TERM_EXPIRATN_DT  is null) AND O.EXPIRATN_DT     <= $RC_ThruDate
  and O.EXPIRATN_DT       >= $RC_FromDate)
   or (O.EXPIRATN_DT >= O.TERM_EXPIRATN_DT AND O.TERM_EXPIRATN_DT >= $RC_FromDate
  and O.TERM_EXPIRATN_DT  <= $RC_ThruDate))
  
  !********* End Resolution 694867 *********


End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Expired-Reprice
! Descr:   Retrieves expired shares not due to 
!          reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Expired-Reprice

  let #ExpireTermRprc = 0

Begin-Select

SUM(Q.SHARES_VESTED)    &vest4
SUM(Q.SHARES_EXERCISED) &exer4

  let #ExpireTermRprc = &vest4 - &exer4

from PS_ST_STOP005_TBL Q

!********* Begin Resolution 694867 *********
where Q.DATETIME_STAMP     = $CurrentTime
  and Q.PROCESSINSTANCE    = #Instance
  and Q.EMPLID             = $Emplid
  and Q.STOCK_ID           = $StockId
  and Q.GRANT_NBR          = $GrantNbr
  and Q.STOCK_PLAN         = $StockPlan
  and (Q.ST_CANCEL_REASON  = 'RPRC'
   or Q.ST_CANCEL_REASON   = 'RESC')
  and (Q.ST_CANCEL_DT     >= Q.EXPIRATN_DT
   or Q.ST_CANCEL_DT      >= Q.TERM_EXPIRATN_DT)
  and (((Q.EXPIRATN_DT <= Q.TERM_EXPIRATN_DT or Q.TERM_EXPIRATN_DT  is null) AND Q.EXPIRATN_DT     <= $RC_ThruDate
  and Q.EXPIRATN_DT       >= $RC_FromDate)
   or (Q.EXPIRATN_DT >= Q.TERM_EXPIRATN_DT AND Q.TERM_EXPIRATN_DT >= $RC_FromDate
  and Q.TERM_EXPIRATN_DT  <= $RC_ThruDate))
!********* End Resolution 694867 *********

End-Select

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  next-listing skiplines=0 need=3
  print $Name                                              (+1,001,030)
  print $GrantNbr                                          (  ,032,010)
  print $OptionType                                        (  ,046,014)
  print $StockPlan                                         (  ,060,010)
  print #GrantPrice                                        (  ,072,013) edit $9,999.999999
  print #SharesCancel                                      (  ,087,022) edit 999,999,999,999.999999
  print #CancelCost                                        (  ,111,018) edit $99,999,999,999.99
  print #SharesExpire                                      (  ,131,022) edit 999,999,999,999.999999
  print #ExpireCost                                        (  ,155,018) edit $99,999,999,999.99
  print $EmplId                                            (+1,001,011)
  do Format-DateTime ($CancelDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,032,010)
  print $CancelReason                                      (  ,046,014)

  let #TotalCancel     = #TotalCancel     + #SharesCancel
  let #TotalCancelCost = #TotalCancelCost + #CancelCost
  let #TotalExpire     = #TotalExpire     + #SharesExpire
  let #TotalExpireCost = #TotalExpireCost + #ExpireCost

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan #SharesCancel #CancelCost #SharesExpire #ExpireCost into StockPlan(1) StockPlan SharesCancel CancelCost SharesExpire ExpireCost
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #SharesCancel #CancelCost #SharesExpire #ExpireCost to StockPlan(#Row) SharesCancel CancelCost SharesExpire ExpireCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesCancel #CancelCost #SharesExpire #ExpireCost into StockPlan(#PlanCount) StockPlan SharesCancel CancelCost SharesExpire ExpireCost
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

  if #TypeCount = 1
    put $OptionType  #SharesCancel #CancelCost #SharesExpire #ExpireCost into OptionType(1)  OptionType  SharesCancel CancelCost SharesExpire ExpireCost
    let #TypeCount = #TypeCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #TypeCount
      get $AOptionType from OptionType(#Row) OptionType
      if $OptionType = $AOptionType
        array-add #SharesCancel #CancelCost #SharesExpire #ExpireCost to OptionType(#Row) SharesCancel CancelCost SharesExpire ExpireCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $OptionType #SharesCancel #CancelCost #SharesExpire #ExpireCost into OptionType(#TypeCount) OptionType SharesCancel CancelCost SharesExpire ExpireCost
      let #TypeCount = #TypeCount + 1
    end-if
  end-if

  if #ReasonCount = 1
    put $CancelReason #SharesCancel #CancelCost #SharesExpire #ExpireCost into CancelReason(1) CancelReason SharesCancel CancelCost SharesExpire ExpireCost
    let #ReasonCount = #ReasonCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #ReasonCount
      get $ACancelReason from CancelReason(#Row) CancelReason
      if $CancelReason = $ACancelReason
        array-add #SharesCancel #CancelCost #SharesExpire #ExpireCost to CancelReason(#Row) SharesCancel CancelCost SharesExpire ExpireCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $CancelReason #SharesCancel #CancelCost #SharesExpire #ExpireCost into CancelReason(#ReasonCount) CancelReason SharesCancel CancelCost SharesExpire ExpireCost
      let #ReasonCount = #ReasonCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Min-Max-GrantPrice
! Descr:   Determines the Minimum and Maximum Grant Price and keeps
!          track of how many rows are to be used for dividing by Average
!-----------------------------------------------------------------------
Begin-Procedure Get-Min-Max-GrantPrice

  if $FirstPass = 'Y'
      let #LowPrice   = &a.grant_price
      let #MaxPrice   = &a.grant_price
      let $FirstPass = 'N'
  end-if

  let #AvgCount  = #AvgCount + 1

  if #GrantPrice > #MaxPrice
      let #MaxPrice = #GrantPrice
  else
     if #GrantPrice < #LowPrice
         let #LowPrice = #GrantPrice
     end-if
  end-if

  let #TotalPrice = #TotalPrice + #GrantPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints totals for each print break section.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  new-page
  
  if #TotalCancel > 0
    let #AvgPriceCancel = round((#TotalCancelCost  / #TotalCancel),6)
  else
    let #AvgPriceCancel = 0
  end-if
  if #TotalExpire > 0
    let #AvgPriceExpire = round((#TotalExpireCost  / #TotalExpire),6)
  else
    let #AvgPriceExpire = 0
  end-if

  print $TotalWeightLbl                                    (+2,046,023) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgPriceCancel                                    (  ,072,013) bold edit $9,999.999999
  print #TotalCancel                                       (  ,087,022) bold edit 999,999,999,999.999999
  print #TotalCancelCost                                   (  ,111,018) bold edit $99,999,999,999.99
  print #TotalExpire                                       (  ,131,022) bold edit 999,999,999,999.999999
  print #TotalExpireCost                                   (  ,155,018) bold edit $99,999,999,999.99

  print $CancelReasonLbl                                   (+2,058,013) bold underline
  let #Row = 1
  while #Row < #ReasonCount
    get $CancelReason #SharesCancel #CancelCost #SharesExpire #ExpireCost from CancelReason(#Row) CancelReason SharesCancel CancelCost SharesExpire ExpireCost
    if #SharesCancel > 0
      let #AvgPriceCancel = round((#CancelCost  / #SharesCancel),6)
    else
      let #AvgPriceCancel = 0
    end-if
    print $CancelReason                                    (+1,058,011) bold
    print #AvgPriceCancel                                  (  ,072,013) bold edit $9,999.999999
    print #SharesCancel                                    (  ,087,022) bold edit 999,999,999,999.999999
    print #CancelCost                                      (  ,111,018) bold edit $99,999,999,999.99
    print #SharesExpire                                    (  ,131,022) bold edit 999,999,999,999.999999
    print #ExpireCost                                      (  ,155,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $OptionTypeLbl                                     (+1,058,012) bold underline
  let #Row = 1
  while #Row < #TypeCount
    get $OptionType #SharesCancel #CancelCost #SharesExpire #ExpireCost from OptionType(#Row) OptionType SharesCancel CancelCost SharesExpire ExpireCost
    if #SharesCancel > 0
      let #AvgPriceCancel = round((#CancelCost  / #SharesCancel),6)
    else
      let #AvgPriceCancel = 0
    end-if
    print $OptionType                                      (+1,058,010) bold
    print #AvgPriceCancel                                  (  ,072,013) bold edit $9,999.999999
    print #SharesCancel                                    (  ,087,022) bold edit 999,999,999,999.999999
    print #CancelCost                                      (  ,111,018) bold edit $99,999,999,999.99
    print #SharesExpire                                    (  ,131,022) bold edit 999,999,999,999.999999
    print #ExpireCost                                      (  ,155,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $StockPlanLbl                                      (+1,058,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #SharesCancel #CancelCost #SharesExpire #ExpireCost from StockPlan(#Row) StockPlan SharesCancel CancelCost SharesExpire ExpireCost
    if #SharesCancel > 0
      let #AvgPriceCancel = round((#CancelCost  / #SharesCancel),6)
    else
      let #AvgPriceCancel = 0
    end-if
    print $StockPlan                                       (+1,058,010) bold
    print #AvgPriceCancel                                  (  ,072,013) bold edit $9,999.999999
    print #SharesCancel                                    (  ,087,022) bold edit 999,999,999,999.999999
    print #CancelCost                                      (  ,111,018) bold edit $99,999,999,999.99
    print #SharesExpire                                    (  ,131,022) bold edit 999,999,999,999.999999
    print #ExpireCost                                      (  ,155,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  let #AvgGrantPrice  =  round((#TotalPrice / #AvgCount),6)

  print $GrantPriceLbl                                     (+2,058,011) bold underline
  print $HiLbl                                             (+1,063,002) bold
  print ':'                                                (  ,   ,001) bold
  print #MaxPrice                                          (  ,072,013) bold edit $9,999.999999
  print $AvgLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgGrantPrice                                     (  ,072,013) bold edit $9,999.999999
  print $LowLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #LowPrice                                          (  ,072,013) bold edit $9,999.999999

End-Procedure

!-----------------------------------------------------------------------
! Section: Delete-Temp
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Delete-Temp

  let $Procedure = 'Delete-Temp'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql on-error = SQL-Error
 DELETE from PS_ST_STOP005_TBL
 where DATETIME_STAMP  = $CurrentTime
   and PROCESSINSTANCE = #Instance
End-Sql

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'curdttim.sqc'                !Procedures: Get-Current-DateTime
#include 'eoj.sqc'                     !End of Report Format
#include 'number.sqc'                  !Procedures: Init-Number
#include 'datetime.sqc'                !Procedures: Init-Datetime
#include 'prcsapi.sqc'                 !Process Scheduler API
#include 'prcsdef.sqc'                 !Update Process Open_Trans variable declaration
#include 'reset.sqc'                   !Reset printer procedure
#include 'strunctl.sqc'                !Stock Admin's Run Control Record
#include 'askftd.sqc'                  !Prompts for date range
#include 'getrplng.sqc'                !Gets the report language
#include 'sqlerr.sqc'                  !SQL error processing
#include 'sqrtrans.sqc'
#include 'datemath.sqc'
#include 'stprcgrp.sqc'                !Creates temp table with all combos for process groups
#include 'readxlat.sqc'

