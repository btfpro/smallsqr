!***********************************************************************
!  TAX910PR:  Create W-2 Print File                                    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/07/06:12:47:25                           !
!             $Release:  HR9                                           !
!            $Revision:  101                                           !
!                                                                      *
!***********************************************************************

#DEFINE TAX910PR        !Used for Tax Locality Sort
#include 'setenv.sqc'   !Set environment
#define PRINTER_TYPE LINEPRINTER

begin-setup
#include 'prtfrmlt.sqc' ! Form Layout selection
                        ! Edit this file to direct output to printer
#include 'setupdb.sqc'  ! Database specific setup

!
! The escape codes, unless otherwise noted, are for PCL-compatible printers
! being used as a line printer. If the printer you are using is not
! PCL-compatible, then these codes will not work as intended. Please refer
! to the user's manual for your printer to determine the correct codes.
!

#ifndef EBCDIC                       ! If not running on IBM MVS or AS/400

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER
  init-string=<27>E<27>(0N<27>&l8D<27>&l0E<27>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
end-declare
#endif

#else                                ! EBCDIC Ports

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER

! If you intended to download the output file created by SQR to print it on a
! PCL-compatible printer attached to an ASCII-bases operating system, such as
! Windows or Unix, use the following escape codes.
!
! Note: These codes may not work as intended if the output is copied to a
!       printer defined as a directly-attached printer or a remote network
!       printer, even if the printer is PCL-compatible
!
! init-string=<39>E<39>(0N<39>&l8D<39>&l0E<39>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
!
! If you intended to copy the output file created by SQR to a printer defined as
! a directly-attached printer or a remote network printer on EBCDIC-bases operating
! systems, such as MVS or OS/400, use this init-string
!
! THIS IS THE DEFAULT FOR EBCDIC SYSTEMS
!
  init-string=<241>
!             |
!              --> FCFC "1" for top of page
!

end-declare
#endif

#endif

#if {PRINTER_TYPE} = 'POSTSCRIPT'
declare-printer PS-definition
  type={PRINTER_TYPE}
  point-size=12
  font=3                                 ! Courier font

!
! add STARTUP-FILE=dir\filename to change the symbol set
!
end-declare
#endif

#if {PRINTER_TYPE} = 'HPLASERJET'
declare-printer HP-definition
  type={PRINTER_TYPE}
  symbol-set=0U                          ! ASCII symbol set
  point-size=12
  pitch=10
  font=3

end-declare
#endif

end-setup

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  display ''
  display 'Printing W-2'

  date-time () hh:mi:ss &t1
  display 'Start at: '  noline
  display &t1

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization
  do Create-Suffix-Array
 #ifdef MoreLyotDefnd
    Show 'Please make sure NONE or ALL BUT ONE of the define layout '
    Show 'statements in PRTFRMLT.SQC are commented '
    Stop
 #endif
   do GetOutDest
 If #OutDest = 3           ! Printer
  #ifdef AllLyotsDefnd
    Show 'Please make sure ALL BUT ONE of the define layout statements'
    Show 'in PRTFRMLT.SQC are commented when output is directed to'
    Show 'printer.'
    Stop
  #endif
 else
  #ifndef AllLyotsDefnd
    Show 'Please make sure ALL layout statements are defined in'
    Show 'PRTFRMLT.SQC when output destination is other than Printer.'
    Stop
  #endif
 End-if

  if $PRCS_Process_Instance = ''
     do Prompts
     if $SortCode1 = '7'
     and #Locals_Per_Form <> 1
       display '******************************************************'
       display 'Locals Per Form specifed on Tax Form Print Parameters '
       display 'Panel must be 1 for the Locality sort within State    '
       display 'to execute.                                           '
       display '******************************************************'
       display 'Locals Per Form ' noline
       display #Locals_Per_Form
       stop
     end-if
  else
     do Select-US-Year-End-Parameters
     do Convert-Parameters
  end-if

  if &TX.Align_Count > 0
    do Print-Alignment-Forms
  end-if
  do Report-File-Create

  if $EmployeeFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    new-page
    print '********************************'  (+3,1)
    print '  No Employee Records Selected  '  (+1,1)
    print '********************************'  (+1,1)
  else
    display ''
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    display '{IMPORTPREFIX}TAX910PR.LIS contains print images for paper W-2s.'
    display ''
    if $SortCode1 <> '7'
       do Print-Grand-Totals
    end-if
  end-if

  date-time () hh:mi:ss &t2
  display 'End at: '  noline
  display &t2
end-procedure

begin-procedure Initialization

  let $LP6 = ''
  let $LP8L = ''
#if {PRINTER_TYPE} = 'LINEPRINTER'
#ifndef EBCDIC
  encode '<27>&l6D<27>&l66F' into $LP6
  encode '<27>&l3A<27>&l104F' into $LP8L
#else
!  encode '<39>&l6D<39>&l66F' into $LP6
!  encode '<39>&l3A<39>&l104F' into $LP8L
#endif
#endif

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  do Get-Tax-Reporting-Run-Controls

  if RTRIM(&TX.Form_ID,' ') = ''
    display '*********************************************************'
    display 'Form ID not specified on Tax Reporting Parameters Panel 2'
    display 'Program stopped'
    display '*********************************************************'
    stop
  end-if

  move &TX.Employees_Per_Page to #EmployeesPerPage
  If not (#EmployeesPerPage > 0)
    display '**********************************************************************'
    display 'Employees Per Page not specified on Tax Reporting Parameters Panel 2'
    display 'Program stopped'
    display '**********************************************************************'
    stop
  End-if

  let $Form_ID = RTRIM(&TX.Form_ID,' ')
! default FORM_ID is LSR01
  if $Form_ID <> 'IMP01'
    if $Form_ID <> 'LSR02A'
      if $Form_ID <> 'LSR03'
       if $Form_ID <> 'LW2PS'
        let $Form_ID = 'LSR01'
       end-if
      end-if
    end-if
  end-if

  if $Form_ID = 'LSR01'
      #ifndef LayoutW2-8
        show 'For FormId "LSR01", LayoutW2-8 should be defined in PRTFRMLT.SQC'
        stop
      #endif
      let #WCOLUMN1 = 4
      let #WCOLUMN2 = 42
      #ifdef AllLyotsDefnd
        use-report W2-8
      #endif
  end-if

  if $Form_ID = 'IMP01'
      #ifndef LayoutW2-6
        show 'For FormId "IMP01", LayoutW2-6 should be defined in PRTFRMLT.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      #ifdef AllLyotsDefnd
        use-report W2-6
      #endif
      print $LP6 () code
  end-if

  if $Form_ID = 'LSR02A'
      #ifndef LayoutW2-8
        show 'For FormId "LSR02A", LayoutW2-8 should be defined in PRTFRMLT.SQC'
        stop
      #endif
      let #WCOLUMN1 = 5
      let #WCOLUMN2 = 42
      #ifdef AllLyotsDefnd
        use-report W2-8
      #endif
  end-if

  if $Form_ID = 'LSR03'
      #ifndef LayoutW2-6
        show 'For FormId "LSR03", LayoutW2-6 should be defined in PRTFRMLT.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      #ifdef AllLyotsDefnd
        use-report W2-6
      #endif
      print $LP6 () code
  end-if

  if $Form_ID = 'LW2PS'
      #ifndef LayoutW2-8L
        show 'For FormId "LW2PS", LayoutW2-8L should be defined in PRTFRMLT.SQC'
        stop
      #endif
      if #EmployeesPerPage <> 1
        display '*********************************************************'
        display 'Employees per page specified in Tax reporting Parameters'
        display 'must be "1" for Form ID "LW2PS".'
        display 'Program stopped'
        display '*********************************************************'
        stop
      end-if
      let #WCOLUMN1 = 5
      let #WCOLUMN2 = 42
      #ifdef AllLyotsDefnd
        use-report W2-8L
      #endif
      print $LP8L () code
  end-if

  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  !if &TX.BALANCE_YEAR <> #AsOfYear and $Prcs_Process_Instance = ''
  !  display ''
  !  display 'Current Year is not one greater than Tax Reporting Year.'
  !  display 'Current Year is    ' noline
  !  display  #saveAsOfYear  9999
  !  display 'Tax Reporting Year ' noline
  !  display &TX.Balance_Year
  !  input $Answer maxlen=1 'Do you want to continue? (Y/N)'
  !  uppercase $Answer
  !  if $Answer <> 'Y'
  !    stop
  !  end-if
  !end-if

  do Load-W2-PRT

  move  0 to #Form#

  if $Layout_Style = '4CORNER' or $Layout_Style = '4CORNERPS'
    COLUMNS #WCOLUMN1 #WCOLUMN2
    move 4 to #FormsPerPage
  end-if

  if $Layout_Style = '2VERTICAL'
    COLUMNS #WCOLUMN1
    move 2 to #FormsPerPage
  end-if

  if $Layout_Style = '4VERTICAL'
    COLUMNS #WCOLUMN1
    move 4 to #FormsPerPage
  end-if
  if #EmployeesPerPage  > #FormsPerPage
    display '*********************************************************'
    display 'Employees Per Page specified on Tax Reporting Parameters '
    display 'Panel 2 is greater than the number of forms per page     '
    display 'for the Form ID selected.                                '
    display '*********************************************************'
    stop
  end-if

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  create-array name=Box14 size=27
    field=Text:char
    field=Column:number
    field=Amount:number

  create-array name=Locals size=11
    field=Locality:char
    field=TxGrs:number
    field=Tax:number

end-procedure

begin-procedure Report-File-Create
  move 'N' to $EmployeeFound

  let $SortSQL10 = $Sort2

begin-SELECT
A.W2_REPORTING_CO
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAXFORM_ID

  move &A.Federal_EIN     to $Federal_EIN 099999999
  move $Federal_EIN       to $A.Federal_EIN xx-xxxxxxx
  move &A.Descr           to $A.Descr
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.Country         to $A.Country
  let  $A.City            =  RTRIM(&A.City,' ')
  let $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co

  UPPERCASE $A.Descr
  UPPERCASE $A.Address1
  UPPERCASE $A.Address2
  UPPERCASE $A.Country
  UPPERCASE $A.City

  move 0 to #T_Count
  move 0 to #I_Count

  evaluate $SortCode1

    when = '1'
    when = '2'
    when = '5'
      do Read-Employee-Data
    break

    when = '3'
    when = '4'
    when = '6'
      do W2-Sort
    break

    when = '7'
      do State-Locality-Select
    break
  end-evaluate

  !if #T_Count > 41 and #I_Count > 0     commented out intermediate totals
  !  do Print-Intermediate-Total
  !end-if

FROM  PS_W2_COMPANY A
WHERE A.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND A.W2_REPORTING_CO  = A.COMPANY
  AND A.W2_REPORTING_CO <> ' '
  AND A.TAXFORM_ID       = 'W'
ORDER BY A.W2_REPORTING_CO
end-SELECT
end-procedure

begin-procedure State-Locality-Select

   let $Quot      = ''''
   let $Paren     = ')'
   let $Spc       = ' '
   let $SortSQL1  = 'AND EXISTS (Select '
   let $SortSQL2  = '''X'' From PS_W2_AMOUNTS '
   let $SortSQL3  = 'WHERE COMPANY = E.COMPANY '
   let $SortSQL4  = 'AND EMPLID = E.EMPLID '
   let $SortSQL5  = 'AND CALENDAR_YEAR = E.CALENDAR_YEAR '
   let $SortSQL6  = 'AND TAXFORM_ID = E.TAXFORM_ID '
   let $SortSQL7  = 'AND SEQUENCE_NUMBER = E.SEQUENCE_NUMBER '
   let $SortSQL8  = 'AND STATE = '
   let $SortSQL9  = ' AND LOCALITY = '


begin-SELECT DISTINCT
SL.STATE
SL.LOCALITY

   let $Sort2 = $SortSQL1 || $SortSQL2 || $SortSQL3 || $SortSQL4 ||
                $SortSQL5 || $SortSQL6 || $SortSQL7 || $SortSQL8 || $Quot ||
                &SL.STATE || $Quot || $SortSQL9 || $Quot ||
                &SL.LOCALITY || $Quot || $Paren || $Spc || $SortSQL10

   if RTRIM(&SL.LOCALITY, ' ') <> ''
     do Read-Employee-Data
   end-if

FROM PS_W2_AMOUNTS SL
WHERE SL.COMPANY IN
      (SELECT COMPANY FROM PS_W2_COMPANY
        WHERE W2_REPORTING_CO = &A.W2_REPORTING_CO
          AND CALENDAR_YEAR = &TX.BALANCE_YEAR
          AND TAXFORM_ID = &A.TAXFORM_ID)
  AND SL.CALENDAR_YEAR  = &TX.BALANCE_YEAR
  AND SL.TAXFORM_ID     = &A.TAXFORM_ID
end-SELECT
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
E.COMPANY
E.EMPLID           () on-break level=1 print=never before=Before-EmplID
E.TAXFORM_ID
E.SEQUENCE_NUMBER  () on-break level=2 print=never after=After-Seq
E.CONTROL_NUMBER
E.W2_STATE
E.EMPLOYER_ID_SWT
E.SSN
E.W2_NAME
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.DEFERRED_COMP
E.DECEASED
E.LEGAL_REP
EE.PROCESS_FLAG
P.NAME_PSFORMAT

  move &E.Sequence_Number to #tempnum
  let $tempEmplid = &E.EmplID

  if $tempEmplid = $E.Emplid and #tempnum = #E.Sequence_Number and rtrim(&E.W2_State,' ') <> $E.W2_State
       let $Check-ID = 'Y'
  end-if

  if &E.STATUTORY_EE  = 'Y'
     move &E.STATUTORY_EE  to $E.Statutory_Ee
  end-if
  if &E.PENSION_PLAN   = 'Y'
     move &E.PENSION_PLAN  to $E.Pension_Plan
  end-if
  if &E.DEFERRED_COMP   = 'Y'
     move &E.DEFERRED_COMP to $E.Deferred_Comp
  end-if
  if &E.DECEASED   = 'Y'
     move &E.DECEASED to $E.Deceased
  end-if
  if &E.LEGAL_REP   = 'Y'
     move &E.LEGAL_REP to $E.Legal_Rep
  end-if


  move &E.TaxForm_ID      to $E.TaxForm_ID
  move &E.Sequence_Number to #E.Sequence_Number

  move &E.Company to $E.Company

  if $Check-ID = 'Y'
     if RTRIM(&E.W2_State,' ') <> ''
       move &E.W2_State to $E.W2_State
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
     else
       if $TempST <> ' '
        let $E.W2_State  = $TempST
        let $E.Employer_ID_SWT = $TempSWT
       else
        let $E.W2_State = ' '
        let $E.Employer_ID_SWT = ' '
       end-if
     end-if
     let $Check-ID = 'N'
   else
    move &E.W2_State to $E.W2_State
    if RTRIM(&E.Employer_ID_SWT,' ') <> ''
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
    else
       let $E.Employer_ID_SWT = ' '
    end-if
   end-if

  let $E.Employer_ID_SWT = substr($E.Employer_ID_SWT,1,15)
  let $TempSWT =  $E.Employer_ID_SWT
  let $TempST = $E.W2_State
  move 'Y' to $EmployeeFound

FROM  PS_W2_EE EE, PS_W2_DATA E, PS_PERSON_NAME P, PS_W2_COMPANY W
WHERE W.W2_REPORTING_CO  = &A.W2_Reporting_Co
  AND W.COMPANY          = E.COMPANY
  AND W.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND W.TAXFORM_ID       = E.TAXFORM_ID
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = 'W'
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND P.EMPLID           = EE.EMPLID
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used

  AND EE.PROCESS_FLAG   <> 'V'
[$Sort2]
end-SELECT
end-procedure

begin-procedure Before-EmplID
  display 'processing ' noline
  display &E.Company  noline
  display ' '  noline
  display &E.w2_state     noline
  display ' '  noline
  display &P.NAME_PSFORMAT     noline
  display ' '  noline
  display &E.EmplID

  move &E.EmplID   to $E.EmplID
  let $TempSWT = ' '
  let $TempST = ' '
  move &E.SSN to $S123 xxx
  if $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move 'Applied For' to $E.SSN
  else
    move &E.SSN to $E.SSN xxx-xx-xxxx
  end-if

  move &E.W2_Name to $E.W2_Name

  move $E.W2_Name to $W2_Name
  do Remove-Hyphen
  move $W2_Name to $E.W2_Name

  move &E.Control_Number  to $E.Control_Number
  let  $E.Address1        = substr(&E.Address1,1,31)
  move &E.Address2        to $E.Address2
  move &E.Country         to $E.Country
  let  $E.City            =  RTRIM(&E.City,' ')
  let $E.State = rtrim(&E.State, ' ')
  move &E.Postal          to $E.Zip

  uppercase $E.W2_Name
  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.Country
  uppercase $E.City

  if #T_Count = 0
    move 0 to #Form#
  end-if
end-procedure


begin-procedure After-Seq
  do Load-Amounts
  do Print-W2

  if &E.Sequence_Number = 1
    add 1 to #I_Count
    add 1 to #T_Count
  end-if

  !if #I_Count = 41                  commented out intermediate totals
  !  do Print-Intermediate-Total
  !  move 0 to #I_Count
  !end-if
end-procedure

begin-procedure Print-W2

  if $SortCode1 <> '7'
    do Identify-Box13-Entries
    let $Box13PrintString = SUBSTR($Box13CheckString,1,3)
  end-if

  move 0 to #NextLocal
  move 0 to #HoldNextLocal
  move 1 to #j

  if #EmployeesPerPage > 0
   while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
    do Next-Form
    do Print-ER-Data
    do Print-EE-Data
    do Print-Fed-State-Amounts
    if #LocalCount > 0 or #Align_Count > 0
      move #HoldNextLocal to #NextLocal
      if $SortCode1 <> '7'
        do Print-Local-Amounts
      else
          do Print-Locality-Sort-Amounts
      end-if
    end-if
    do Print-Box14
    if #E.Sequence_Number = 1 or #Align_Count > 0
      do Print-Box15
    end-if
    if $SortCode1 <> '7'
      do Print-Box13
    end-if
    add 1 to #j
   end-while
   if $Form_ID = 'LW2PS' and #Align_Count = 0
     do LongNameAddress
   end-if
  end-if

  if $SortCode1 <> '7'
    let $Box13CheckString = LTRIM($Box13CheckString,$Box13PrintString)
    while $Box13CheckString <> ''
      let $Box13PrintString = SUBSTR($Box13CheckString,1,3)
      move 1 to #j
      while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        do Print-Box13
        add 1 to #j
      end-while
      if $Form_ID = 'LW2PS' and #Align_Count = 0
        do LongNameAddress
      end-if
      let $Box13CheckString = LTRIM($Box13CheckString,$Box13PrintString)
    end-while
  end-if

  if $SortCode1 <> '7'
    while #NextLocal < #LocalCount
      move #NextLocal to #HoldNextLocal
      move 1 to #j
      if #EmployeesPerPage > 0
       while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        move #HoldNextLocal to #NextLocal
        do Print-Local-Amounts
        add 1 to #j
       end-while
       if $Form_ID = 'LW2PS' and #Align_Count = 0
         do LongNameAddress
       end-if
      end-if
    end-while
  end-if

  move 0 to #01
  move 0 to #02
  move 0 to #03
  move 0 to #04
  move 0 to #05
  move 0 to #06
  move 0 to #07
  move 0 to #08
  move 0 to #09
  move 0 to #10
  move 0  to #11AB
  move 'N' to $Amt11A
  move 'N' to $Amt11B
  move 0 to #12
  move 0 to #13A
  move 0 to #13B
  move 0 to #13C
  move 0 to #13D
  move 0 to #13E
  move 0 to #13F
  move 0 to #13G
  move 0 to #13H
  move 0 to #13J
  move 0 to #13K
  move 0 to #13L
  move 0 to #13M
  move 0 to #13N
  move 0 to #13P
  move 0 to #13Q
  move 0 to #13R
  move 0 to #13S
  move 0 to #13T
  move 0 to #17
  move 0 to #18
  if #Align_Count = 0
    do Zero-Box14
  end-if

  move ' ' to $E.Statutory_Ee
  move ' ' to $E.Deceased
  move ' ' to $E.Pension_Plan
  move ' ' to $E.Legal_Rep
  move ' ' to $E.Deferred_Comp

end-procedure

begin-procedure Print-ER-Data
  do Print-Value($A.Federal_EIN,#L_B,#C_B,'Box B')
  do Print-Value($A.Descr,#L_C1,#C_C1,'Box C1')
  do Print-Value($A.Address1,#L_C2,#C_C2,'Box C2')
  if RTRIM($A.Address2, ' ') <> ''
    do Print-Value($A.Address2,#L_C3,#C_C3,'Box C3')
    move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if
  if #Align_Count = 0
    if $A.Country = 'USA'
      move $A.Zip            to $A.ZipExtsn ~~~~~~xxxx
      if instr($A.Zip,'-',6) = 0
      and $A.ZipExtsn <> '    '
        let $A.Zip = substr($A.Zip,1,5) || '-' || substr($A.Zip,6,4)
      end-if
      let $C4 = $A.City || ', ' || $A.State || ' ' || $A.Zip
    else
      let $C4 = $A.City || ', ' || $A.State || ' ' ||
              $A.Country || ' ' || $A.Zip
    end-if
  end-if
  if $LineShift = 'Y'
    let #PrintLine = #L_C3
  else
    let #PrintLine = #L_C4
  end-if
  do Print-Value($C4,#PrintLine,#C_C4,'Box C4')
end-procedure

begin-procedure Print-EE-Data
  do Print-Value($E.Control_Number,#L_A,#C_A,'Box A')
  if &EE.Process_Flag = 'V' or #Align_Count <> 0
    do Print-Value('X',#L_V,#C_V,'Box V')
  end-if
  do Print-Value($E.SSN,#L_D,#C_D,'Box D')
  do Print-Value($E.W2_Name,#L_E,#C_E,'Box E')
  do Print-Value($E.Address1,#L_F1,#C_F1,'Box F1')
  if RTRIM($E.Address2, ' ') <> ''
    do Print-Value($E.Address2,#L_F2,#C_F2,'Box F2')
    move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if
  if #Align_Count = 0
    if $E.Country = 'USA'
      move $E.Zip            to $E.ZipExtsn ~~~~~~xxxx
      if instr($E.Zip,'-',6) = 0
      and $E.ZipExtsn <> '    '
        let $E.Zip = substr($E.Zip,1,5) || '-' || substr($E.Zip,6,4)
      end-if
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ', ' || $E.State || ' ' || $E.Zip
      if length($F3) > 30
          let #newlen = length($E.City) + 30 - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ', ' || $E.State || ' ' || $E.Zip
      end-if
    else
      do Get-Country-Code
      let $Country = SUBSTR(&CT.Descr,1,15)
      let $Country = rtrim($Country, ' ')
      uppercase $Country
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ', ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      if length($F3) > 30
          let #newlen = length($E.City) + 30 - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ', ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      end-if
    end-if
  end-if
  if $LineShift = 'Y'
    let #PrintLine = #L_F2
  else
    let #PrintLine = #L_F3
  end-if
  do Print-Value($F3,#PrintLine,#C_F3,'Box F3')
end-procedure

begin-procedure Load-Amounts
  move 0 to #LocalCount
begin-SELECT
C.W2_REPORTING_CO
D.STATE
D.LOCALITY
D.BOX
#ifdef DB2ALL
DECIMAL(SUM(D.W2_AMOUNT),15,3) &D.W2_Amount
#else
SUM(D.W2_AMOUNT) &D.W2_Amount
#endif
  move &D.W2_Amount to #Amount

   let $D.Box = RTRIM(&D.Box,' ')
   evaluate $D.Box
     when = '01'                                 !Federal wages
       add  #Amount to #01
       add  #Amount to #01_I
       break
     when = '02'                                 !Federal tax
       add  #Amount to #02
       add  #Amount to #02_I
       break
     when = '03'                                 !SS wages
       add  #Amount to #03
       add  #Amount to #03_I
       break
     when = '04'                                 !SS Tax
       add  #Amount to #04
       add  #Amount to #04_I
       break
     when = '05'                                 !Medicare wages
       add  #Amount to #05
       add  #Amount to #05_I
       break
     when = '06'                                 !Medicare tax
       add  #Amount to #06
       add  #Amount to #06_I
       break
     when = '07'                                 !SS tips
       add  #Amount to #07
       add  #Amount to #07_I
       break
     when = '08'                                 !Allocated tips
       add  #Amount to #08
       add  #Amount to #08_I
       break
     when = '09'                                 !EIC
       add  #Amount to #09
       add  #Amount to #09_I
       break
     when = '10'                                 !Dependent care
       add  #Amount to #10
       add  #Amount to #10_I
       break
     when = '11A'                                !non-qualified 457
       add  #Amount to #11AB
       add  #Amount to #11_I
       move 'Y' to $Amt11A
       break
     when = '11B'                                !non-qualified non-457
       add  #Amount to #11AB
       add  #Amount to #11_I
       move 'Y' to $Amt11B
       break
     when = '12'                                 !Benefits incl in Box 1
       add  #Amount to #12
       add  #Amount to #12_I
       break
     when = '13A'                                !Uncoll SS tax on tips
       add  #Amount to #13A
       break
     when = '13B'                                !Uncoll Medi tax on tips
       add  #Amount to #13B
       break
     when = '13C'                                !GTL
       add  #Amount to #13C
       break
     when = '13D'                                !401(k)
       add  #Amount to #13D
       add  #Amount to #13_I
       break
     when = '13E'                                !403(b)
       add  #Amount to #13E
       add  #Amount to #13_I
       break
     when = '13F'                                !408(k)(6)
       add  #Amount to #13F
       add  #Amount to #13_I
       break
     when = '13G'                                !457(b)
       add  #Amount to #13G
       add  #Amount to #13_I
       break
     when = '13H'                                !501(c)(18)(D)
       add  #Amount to #13H
       add  #Amount to #13_I
       break
     when = '13J'                                !Sick pay
       add  #Amount to #13J
       break
     when = '13K'                                !Excise tax
       add  #Amount to #13K
       break
     when = '13L'                                !Business expense
       add  #Amount to #13L
       break
     when = '13M'                                !Uncoll SS tax - GTL
       add  #Amount to #13M
       break
     when = '13N'                                !Uncoll Medi tax - GTL
       add  #Amount to #13N
       break
     when = '13P'                                !Excl Moving Exp
       add  #Amount to #13P
       break
     when = '13Q'                                !Basic Quarters and Subsistence
       add  #Amount to #13Q
       break
     when = '13R'                                !Medical Savings Account
       add  #Amount to #13R
       break
     when = '13S'                                !Sec 408(p) SIMPLE retirement
       add  #Amount to #13S
       break
     when = '13T'                                !Adoption Expenses
       add  #Amount to #13T
       break
     when = '17'                                 !State wages
       add  #Amount to #17
       break
     when = '18'                                 !State tax
       add  #Amount to #18
       break
     when = '20'                                 !Local wages
       if $E.W2_State <> 'MD'
         add 1 to #LocalCount

         if #LocalCount > 10
            display 'Local Array Size Exceeded - Processing Stopped'
            STOP
         end-if

         PUT &D.Locality INTO LOCALS(#LOCALCOUNT) LOCALITY

         PUT #Amount INTO LOCALS(#LOCALCOUNT) TXGRS
       end-if
       break
     when = '21'                                 !Local tax
       if $E.W2_State <> 'MD'
         PUT #Amount INTO LOCALS(#LOCALCOUNT) TAX
       else
         add #Amount to #18
       end-if
       break
     when-other
       move $D.Box to $Box xx
       if $Box = '14'
         let $Box14Letter = SUBSTR($D.Box,3,1)
         let #index = INSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$Box14Letter,1)
         ARRAY-ADD #Amount to BOX14(#INDEX) AMOUNT
       else
         display 'UNKNOWN BOX IDENTIFIER:'
         display $D.Box
         display 'Processing Stopped'
         STOP
       end-if
   end-evaluate

FROM  PS_W2_AMOUNTS D, PS_W2_COMPANY C
WHERE C.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND C.COMPANY         = D.COMPANY
  AND C.CALENDAR_YEAR   = D.CALENDAR_YEAR
  AND D.EMPLID          = $E.Emplid
  AND D.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND D.TAXFORM_ID      = $E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = #E.Sequence_Number
GROUP BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.BOX
ORDER BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.BOX
end-SELECT
end-procedure

begin-procedure Print-Fed-State-Amounts
  do Format-Number(#01, $out, $F01)              !Federal wages
  do Print-Value($out,#L_01,#C_01,'Box 01')

  do Format-Number(#02, $out, $F02)              !Federal tax
  do Print-Value($out,#L_02,#C_02,'Box 02')

  do Format-Number(#03, $out, $F03)              !SS wages
  do Print-Value($out,#L_03,#C_03,'Box 03')

  do Format-Number(#04, $out, $F04)              !SS Tax
  do Print-Value($out,#L_04,#C_04,'Box 04')

  do Format-Number(#05, $out, $F05)              !Medicare wages
  do Print-Value($out,#L_05,#C_05,'Box 05')

  do Format-Number(#06, $out, $F06)              !Medicare tax
  do Print-Value($out,#L_06,#C_06,'Box 06')

  do Format-Number(#07, $out, $F07)              !SS tips
  do Print-Value($out,#L_07,#C_07,'Box 07')

  do Format-Number(#08, $out, $F08)              !Allocated tips
  do Print-Value($out,#L_08,#C_08,'Box 08')

  do Format-Number(#09, $out, $F09)              !EIC
  do Print-Value($out,#L_09,#C_09,'Box 09')

  do Format-Number(#10, $out, $F10)              !Dependent care
  do Print-Value($out,#L_10,#C_10,'Box 10')

  do Format-Number(#11AB, $out, $F11)            !Non-qualified plan total
  do Print-Value($out,#L_11,#C_11,'Box 11')
  if $Amt11A = 'Y'
    if $Amt11B = 'N'
      do Print-Value('G',#L_11,#C_11,'Box 11')
    end-if
  end-if

  do Format-Number(#12, $out, $F12)              !Benefits incl in Box 1
  do Print-Value($out,#L_12,#C_12,'Box 12')

  if RTRIM($E.W2_State,' ') <> ''
    do Print-Value($E.W2_State,#L_16,#C_16,'Box 16')             !State
    do Print-Value($E.Employer_ID_SWT,#L_16A,#C_16A,'Box 16A')   !State employer ID
  else
      do Print-Value(' ',#L_16,#C_16,' ')
  end-if

  do Format-Number(#17, $out, $F17)              !State wages
  do Print-Value($out,#L_17,#C_17,'Box 17')

  do Format-Number(#18, $out, $F18)              !State tax
  do Print-Value($out,#L_18,#C_18,'Box 18')
end-procedure

begin-procedure Print-Locality-Sort-Amounts
  move 1 to #i
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20
  move #L_21 to #LocalPrintLine21

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal

    get $Locality #20 #21 from Locals(#NextLocal)

    if &SL.LOCALITY = $Locality
      let $Locality = RTRIM($Locality,' ')
      if $Locality = $priorLocality
        if $E.W2_State <> $priorState
          move $E.W2_State to $priorState
          do Get-Locality-Print-Name
          move $Locality to $priorLocality
        end-if
      else
          do Get-Locality-Print-Name
          move $Locality to $priorLocality
      end-if

      if &E.Sequence_Number > 1
        do Print-Value($E.W2_State,#L_16,#C_16,'Box 16')                !State
        do Print-Value($E.Employer_ID_SWT,#L_16A,#C_16A,'Box 16A')      !State employer ID
      end-if

      uppercase $LocalityPrintName
      do Print-Value($LocalityPrintName,#LocalPrintLine19,#C_19,'Box 19')

      do Format-Number(#20, $out, $F20)                !Local wages
      do Print-Value($out,#LocalPrintLine20,#C_20,'Box 20')

      do Format-Number(#21, $out, $F21)                !Local tax
      do Print-Value($out,#LocalPrintLine21,#C_21,'Box 21')

      add 2 to #LocalPrintLine19
      add 2 to #LocalPrintLine20
      add 2 to #LocalPrintLine21
      add 1 to #i
    end-if
  end-while
end-procedure

begin-procedure Print-Local-Amounts
  move 1 to #i
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20
  move #L_21 to #LocalPrintLine21

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal

    get $Locality #20 #21 from Locals(#NextLocal)

    let $Locality = RTRIM($Locality,' ')
    if $Locality = $priorLocality
      if $E.W2_State <> $priorState
        move $E.W2_State to $priorState
        do Get-Locality-Print-Name
        move $Locality to $priorLocality
      end-if
    else
        do Get-Locality-Print-Name
        move $Locality to $priorLocality
    end-if

    if &E.Sequence_Number > 1
      do Print-Value($E.W2_State,#L_16,#C_16,'Box 16')                !State
      do Print-Value($E.Employer_ID_SWT,#L_16A,#C_16A,'Box 16A')      !State employer ID
    end-if

    uppercase $LocalityPrintName
    do Print-Value($LocalityPrintName,#LocalPrintLine19,#C_19,'Box 19')

    do Format-Number(#20, $out, $F20)                !Local wages
    do Print-Value($out,#LocalPrintLine20,#C_20,'Box 20')

    do Format-Number(#21, $out, $F21)                !Local tax
    do Print-Value($out,#LocalPrintLine21,#C_21,'Box 21')

    add 2 to #LocalPrintLine19
    add 2 to #LocalPrintLine20
    add 2 to #LocalPrintLine21
    add 1 to #i
  end-while
end-procedure

begin-procedure Identify-Box13-Entries
  let $Box13CheckString = ''

  if #13A <> 0                                   !Uncoll SS tax on tips
    let $Box13CheckString = $Box13CheckString || 'A'
  end-if

  if #13B <> 0                                   !Uncoll Medi tax on tips
    let $Box13CheckString = $Box13CheckString || 'B'
  end-if

  if #13C <> 0                                   !GTL
    let $Box13CheckString = $Box13CheckString || 'C'
  end-if

  if #13D <> 0                                   !401(k)
    let $Box13CheckString = $Box13CheckString || 'D'
  end-if

  if #13E <> 0                                   !403(b)
    let $Box13CheckString = $Box13CheckString || 'E'
  end-if

  if #13F <> 0                                   !408(k)(6)
    let $Box13CheckString = $Box13CheckString || 'F'
  end-if

  if #13G <> 0                                   !457(b)
    let $Box13CheckString = $Box13CheckString || 'G'
  end-if

  if #13H <> 0                                   !501(c)(18)(D)
    let $Box13CheckString = $Box13CheckString || 'H'
  end-if

  if #13J <> 0                                   !Sick pay
    let $Box13CheckString = $Box13CheckString || 'J'
  end-if

  if #13K <> 0                                   !Excise tax
    let $Box13CheckString = $Box13CheckString || 'K'
  end-if

  if #13L <> 0                                   !Business expense
    let $Box13CheckString = $Box13CheckString || 'L'
  end-if

  if #13M <> 0                                   !Uncoll SS tax - GTL
    let $Box13CheckString = $Box13CheckString || 'M'
  end-if

  if #13N <> 0                                   !Uncoll Medi tax - GTL
    let $Box13CheckString = $Box13CheckString || 'N'
  end-if
  if #13P <> 0                                   !Excl Moving Exp
    let $Box13CheckString = $Box13CheckString || 'P'
  end-if
  if #13Q <> 0                                   !Basic Quarters and Subsistence
    let $Box13CheckString = $Box13CheckString || 'Q'
  end-if
  if #13R <> 0                                   !Medical Spending Account
    let $Box13CheckString = $Box13CheckString || 'R'
  end-if
  if #13S <> 0                                   !Section 418(p) SIMPLE Retirement
    let $Box13CheckString = $Box13CheckString || 'S'
  end-if
  if #13T <> 0                                   !Adoption Expenses
    let $Box13CheckString = $Box13CheckString || 'T'
  end-if
end-procedure

begin-procedure Print-Box13
  move #L_13_Start to #L_13

  if INSTR($Box13PrintString,'A',1)              !Uncoll SS tax on tips
    do Print-Value($T_13A,#L_13,#C_13A,'Box 13')
    do Format-Number(#13A, $out, $F13A)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'B',1)              !Uncoll Medi tax on tips
    do Print-Value($T_13B,#L_13,#C_13B,'Box 13')
    do Format-Number(#13B, $out, $F13B)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'C',1)               !GTL
    do Print-Value($T_13C,#L_13,#C_13C,'Box 13')
    do Format-Number(#13C, $out, $F13C)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'D',1)               !401(k)
    do Print-Value($T_13D,#L_13,#C_13D,'Box 13')
    do Format-Number(#13D, $out, $F13D)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'E',1)               !403(b)
    do Print-Value($T_13E,#L_13,#C_13E,'Box 13')
    do Format-Number(#13E, $out, $F13E)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'F',1)               !408(k)(6)
    do Print-Value($T_13F,#L_13,#C_13F,'Box 13')
    do Format-Number(#13F, $out, $F13F)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'G',1)               !457(b)
    do Print-Value($T_13G,#L_13,#C_13G,'Box 13')
    do Format-Number(#13G, $out, $F13G)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'H',1)               !501(c)(18)(D)
    do Print-Value($T_13H,#L_13,#C_13H,'Box 13')
    do Format-Number(#13H, $out, $F13H)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'J',1)               !Sick pay
    do Print-Value($T_13J,#L_13,#C_13J,'Box 13')
    do Format-Number(#13J, $out, $F13J)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'K',1)               !Excise tax
    do Print-Value($T_13K,#L_13,#C_13K,'Box 13')
    do Format-Number(#13K, $out, $F13K)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'L',1)               !Business expense
    do Print-Value($T_13L,#L_13,#C_13L,'Box 13')
    do Format-Number(#13L, $out, $F13L)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'M',1)               !Uncoll SS tax - GTL
    do Print-Value($T_13M,#L_13,#C_13M,'Box 13')
    do Format-Number(#13M, $out, $F13M)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'N',1)               !Uncoll Medi tax - GTL
    do Print-Value($T_13N,#L_13,#C_13N,'Box 13')
    do Format-Number(#13N, $out, $F13N)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'P',1)               !Excl Moving Exp
    do Print-Value($T_13P,#L_13,#C_13P,'Box 13')
    do Format-Number(#13P, $out, $F13P)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'Q',1)               !Basic Quarters and Subsistence
    do Print-Value($T_13Q,#L_13,#C_13Q,'Box 13')
    do Format-Number(#13Q, $out, $F13Q)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'R',1)               !Medical Spending Account
    do Print-Value($T_13R,#L_13,#C_13R,'Box 13')
    do Format-Number(#13R, $out, $F13R)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'S',1)               !Section 418(p) SIMPLE retirement
    do Print-Value($T_13S,#L_13,#C_13S,'Box 13')
    do Format-Number(#13S, $out, $F13S)
    print $out (,+1)
    add 1 to #L_13
  end-if

  if INSTR($Box13PrintString,'T',1)               !Adoption Expenses
    do Print-Value($T_13T,#L_13,#C_13T,'Box 13')
    do Format-Number(#13T, $out, $F13T)
    print $out (,+1)
    add 1 to #L_13
  end-if
end-procedure

begin-procedure Print-Box14
  move #L_14_Start to #L_14

  if #L_14 <= 0
    display ''
    display '***************************************'
    display 'Print Line not defined for Box 14'
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if

  move 1 to #m
  move 4 to #Last_Box14_Line
  move 'N' to $Is_NJ_VDI

  if $E.W2_State = 'NJ'
    while #m <= 26
      get #14 $T_14 #C_14_vdi from Box14(#m) Amount Text Column
      if upper($T_14) = 'VPDI' or upper($T_14) = 'VDI'
        if #14 > 0
          move #m to #Box14_VDI_Index
          move 'Y' to $Is_NJ_VDI
          move 3 to #Last_Box14_Line
          break
        end-if
      end-if
      add 1 to #m
    end-while
    move 1 to #m
  end-if

  while #m <= 26 and (#L_14 - #L_14_Start) < #Last_Box14_Line

    if $Is_NJ_VDI = 'Y' and (#L_14 - #L_14_Start) = (#Last_Box14_Line - 1) and #m < #Box14_VDI_Index
      move #Box14_VDI_Index to #m
    end-if

    get $T_14 #C_14 #14 from Box14(#m) Text Column Amount

    if #14 > 0
      if #Align_Count <> 0
        print 'XXXXX' (#L_14,#C_14,5)
      else
        print $T_14   (#L_14,#C_14,5)
      end-if
      do Format-Number(#14, $out, $F14)
      print $out (,+1)
      add 1 to #L_14
    end-if
    add 1 to #m
  end-while

  if $E.W2_State = 'NJ'
    do Print-NJSUT
  end-if

  if (#L_14 - #L_14_Start) = 5
    display 'Attempt to create more than 4 Box 14 entries for ' noline
    display $E.SSN noline
    display ' ' noline
    display $E.W2_Name
  end-if
end-procedure

begin-procedure Print-NJSUT
begin-SELECT
CS.EMPLOYER_ID_SUT
CS.VDI_PLAN_NBR

 !   evaluate $Layout_Style
 !     when = '4VERTICAL'
 !       print &CS.Employer_ID_Sut (#Last_Print_Line,#C_20)
 !       break
 !     when-other
 !       print &CS.Employer_ID_Sut (#Last_Print_Line,#C_16A)
 !       break
 !   end-evaluate

    if $Is_NJ_VDI = 'Y'
      move &CS.VDI_Plan_Nbr to $VDI_Plan_Nbr
      let $VDI_Plan_Nbr = 'DI P.P#' || $VDI_Plan_Nbr
      let #vdi_length = length($VDI_Plan_Nbr)
      print $VDI_Plan_Nbr (#L_14,#C_14_vdi,#vdi_length)
      move 'N' to $Is_NJ_VDI
    end-if

FROM  PS_CO_STATETAX_TBL CS
WHERE CS.COMPANY = $E.Company
  AND CS.STATE = 'NJ'
  AND CS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $E.Company
         AND  STATE   = 'NJ'
         AND  EFFDT  <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure Zero-Box14
  move 1 to #m
  while #m <= 26
    put 0 into Box14(#m) Amount
    add 1 to #m
  end-while
end-procedure

begin-procedure Print-Box15
  if #Align_Count > 0
    do Print-Value('S',#L_15A,#C_15A,'Box 15A')
    do Print-Value('D',#L_15B,#C_15B,'Box 15B')
    do Print-Value('P',#L_15C,#C_15C,'Box 15C')
    do Print-Value('L',#L_15D,#C_15D,'Box 15D')
    do Print-Value('D',#L_15G,#C_15G,'Box 15G')
  end-if

  if $E.Statutory_Ee = 'Y'
    do Print-Value('X',#L_15A,#C_15A,'Box 15A')
  end-if
  if $E.Deceased = 'Y'
    do Print-Value('X',#L_15B,#C_15B,'Box 15B')
  end-if
  if $E.Pension_Plan = 'Y'
    do Print-Value('X',#L_15C,#C_15C,'Box 15C')
  end-if
  if $E.Legal_Rep = 'Y'
    do Print-Value('X',#L_15D,#C_15D,'Box 15D')
  end-if
  if $E.Deferred_Comp = 'Y'
    do Print-Value('X',#L_15G,#C_15G,'Box 15G')
  end-if

end-procedure

begin-procedure Print-Intermediate-Total
  move 1 to #j
  while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
    do Next-Form
    do Print-ER-Data

    do Format-Number(#01_I, $out, $F01)          !Federal wages
    do Print-Value($out,#L_01,#C_01,'Box 01')

    do Format-Number(#02_I, $out, $F02)          !Federal tax
    do Print-Value($out,#L_02,#C_02,'Box 02')

    do Format-Number(#03_I, $out, $F03)          !SS wages
    do Print-Value($out,#L_03,#C_03,'Box 03')

    do Format-Number(#04_I, $out, $F04)          !SS Tax
    do Print-Value($out,#L_04,#C_04,'Box 04')

    do Format-Number(#05_I, $out, $F05)          !Medicare wages
    do Print-Value($out,#L_05,#C_05,'Box 05')

    do Format-Number(#06_I, $out, $F06)          !Medicare tax
    do Print-Value($out,#L_06,#C_06,'Box 06')

    do Format-Number(#07_I, $out, $F07)          !SS tips
    do Print-Value($out,#L_07,#C_07,'Box 07')

    do Format-Number(#08_I, $out, $F08)          !Allocated tips
    do Print-Value($out,#L_08,#C_08,'Box 08')

    do Format-Number(#09_I, $out, $F09)          !EIC
    do Print-Value($out,#L_09,#C_09,'Box 09')

    do Format-Number(#10_I, $out, $F10)          !Dependent care
    do Print-Value($out,#L_10,#C_10,'Box 10')

    do Format-Number(#11_I, $out, $F11)          !non-qualified plan total
    do Print-Value($out,#L_11,#C_11,'Box 11')

    do Format-Number(#12_I, $out, $F12)          !Benefits incl in Box 1
    do Print-Value($out,#L_12,#C_12,'Box 12')

    do Format-Number(#13_I, $out, $F13)          !Deferred comp total
    do Print-Value($out,#L_12,#C_12,'Box 12')

    add 1 to #j
  end-while

  add #01_I to #01_T
  move 0 to #01_I
  add #02_I to #02_T
  move 0 to #02_I
  add #03_I to #03_T
  move 0 to #03_I
  add #04_I to #04_T
  move 0 to #04_I
  add #05_I to #05_T
  move 0 to #05_I
  add #06_I to #06_T
  move 0 to #06_I
  add #07_I to #07_T
  move 0 to #07_I
  add #08_I to #08_T
  move 0 to #08_I
  add #09_I to #09_T
  move 0 to #09_I
  add #10_I to #10_T
  move 0 to #10_I
  add #11_I to #11_T
  move 0 to #11_I
  add #12_I to #12_T
  move 0 to #12_I
  add #13_I to #13_T
  move 0 to #13_I
end-procedure

begin-procedure Print-Grand-Totals

  if #01_I > 0
    do Format-Number(#01_I, $out,'999,999,999,999.99')          !Federal wages
    display 'Box 01- Federal wages             ' noline
    display $out
  end-if

  if #02_I > 0
    do Format-Number(#02_I, $out,'999,999,999,999.99')          !Federal tax
    display 'Box 02- Federal tax               ' noline
    display $out
  end-if

  if #03_I > 0
    do Format-Number(#03_I, $out,'999,999,999,999.99')          !SS wages
    display 'Box 03- SS wages                  ' noline
    display $out
  end-if

  if #04_I > 0
    do Format-Number(#04_I, $out,'999,999,999,999.99')          !SS Tax
    display 'Box 04- SS tax                    ' noline
    display $out
  end-if

  if #05_I > 0
    do Format-Number(#05_I, $out,'999,999,999,999.99')          !Medicare wages
    display 'Box 05- Medicare wages            ' noline
    display $out
  end-if

  if #06_I > 0
    do Format-Number(#06_I, $out,'999,999,999,999.99')          !Medicare tax
    display 'Box 06- Medicare tax              ' noline
    display $out
  end-if

  if #07_I > 0
    do Format-Number(#07_I, $out,'999,999,999,999.99')          !SS tips
    display 'Box 07- SS tips                   ' noline
    display $out
  end-if

  if #08_I > 0
    do Format-Number(#08_I, $out,'999,999,999,999.99')          !Allocated tips
    display 'Box 08- Allocated tips            ' noline
    display $out
  end-if

  if #09_I > 0
    do Format-Number(#09_I, $out,'999,999,999,999.99')          !EIC
    display 'Box 09- EIC                       ' noline
    display $out
  end-if

  if #10_I > 0
    do Format-Number(#10_I, $out,'999,999,999,999.99')          !Dependent care
    display 'Box 10- Dependent care            ' noline
    display $out
  end-if

  if #11_I > 0
    do Format-Number(#11_I, $out,'999,999,999,999.99')          !non-qualified plan total
    display 'Box 11- Non-qual plan             ' noline
    display $out
  end-if

  if #12_I > 0
    do Format-Number(#12_I, $out,'999,999,999,999.99')          !Benefits incl in Box 1
    display 'Box 12- Benefits incl in Box 1    ' noline
    display $out
  end-if

  if #13_I > 0
    do Format-Number(#13_I, $out,'999,999,999,999.99')          !Deferred comp total
    display 'Box 13(D-H)- Deferred comp total  ' noline
    display $out
  end-if


end-procedure

begin-procedure Next-Form
  evaluate $Layout_Style
    when = '4CORNER'
    when = '4CORNERPS'
      do Next-Form-FourCorner
      break
    when = '4VERTICAL'
      do Next-Form-FourVertical
      break
    when = '2VERTICAL'
      do Next-Form-TwoVertical
      break
  end-evaluate
end-procedure

begin-procedure Next-Form-FourCorner
  if #Form# <> 4
    add  1 to #Form#
  else
    move 1 to #Form#
  end-if

  evaluate #Form#
    when = 1
      if $Layout_Style <> '4CORNERPS'
        new-page
      else
        if $First_page_PS = 'N'
          next-listing   ! for all pages except the first - layout: 4CORNERPS
        end-if
        Let $First_page_PS = 'N'
      end-if
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-FourVertical
  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Top_Split,1,'Top Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-listing
      do Print-Value(' ',#Bottom_Split,1,'Bottom Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-TwoVertical
  if #Form# <> 2
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      next-column
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Load-W2-PRT
begin-SELECT
F.LAYOUT_STYLE
F.TOP_MARGIN
F.TOP_SPLIT
F.CENTER_SPLIT
F.BOTTOM_SPLIT
F.LAST_PRINT_LINE
F.LOCALS_PER_FORM

  let $Layout_Style = RTRIM(&F.Layout_Style,' ')

  move &F.Top_Margin       to #Top_Margin
  move &F.Top_Split        to #Top_Split
  move &F.Center_Split     to #Center_Split
  move &F.Bottom_Split     to #Bottom_Split
  move &F.Last_Print_Line  to #Last_Print_Line
  move &F.Locals_Per_Form  to #Locals_Per_Form

! encode '<27>E<27>(0N<27>&l6D<27>&l0E<27>&l66F' into $SetupString
! print $SetupString (1,1)
!            |    |       |       |       |
!            |    |       |       |        --> 66 text lines
!            |    |       |        --> top margin = 0 lines
!            |    |        --> 6 lines per inch
!            |     --> ISO 8859-1 symbol set
!             --> Reset

FROM  PS_TAXFORM_FORM F
WHERE F.FORM_ID = &TX.Form_ID
  AND F.TAXFORM_ID = 'W'
  AND F.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = F.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
end-SELECT

begin-SELECT
P.BOX
P.PRINT_LINE
P.PRINT_COL
P.PRINT_FORMAT
P.PRINT_TEXT

  let $P.Box = RTRIM(&P.Box,' ')
  evaluate $P.Box
    when = '01'                                  !Federal wages
      move &P.Print_Line   to #L_01
      move &P.Print_Col    to #C_01
      let $F01 = RTRIM(&P.Print_Format,' ')
      break
    when = '02'                                  !Federal tax
      move &P.Print_Line   to #L_02
      move &P.Print_Col    to #C_02
      let $F02 = RTRIM(&P.Print_Format,' ')
      break
    when = '03'                                  !SS wages
      move &P.Print_Line   to #L_03
      move &P.Print_Col    to #C_03
      let $F03 = RTRIM(&P.Print_Format,' ')
      break
    when = '04'                                  !SS Tax
      move &P.Print_Line   to #L_04
      move &P.Print_Col    to #C_04
      let $F04 = RTRIM(&P.Print_Format,' ')
      break
    when = '05'                                  !Medicare wages
      move &P.Print_Line   to #L_05
      move &P.Print_Col    to #C_05
      let $F05 = RTRIM(&P.Print_Format,' ')
      break
    when = '06'                                  !Medicare tax
      move &P.Print_Line   to #L_06
      move &P.Print_Col    to #C_06
      let $F06 = RTRIM(&P.Print_Format,' ')
      break
    when = '07'                                  !SS tips
      move &P.Print_Line   to #L_07
      move &P.Print_Col    to #C_07
      let $F07 = RTRIM(&P.Print_Format,' ')
      break
    when = '08'                                  !Allocated tips
      move &P.Print_Line   to #L_08
      move &P.Print_Col    to #C_08
      let $F08 = RTRIM(&P.Print_Format,' ')
      break
    when = '09'                                  !EIC
      move &P.Print_Line   to #L_09
      move &P.Print_Col    to #C_09
      let $F09 = RTRIM(&P.Print_Format,' ')
      break
    when = '10'                                   !Dependent care
      move &P.Print_Line   to #L_10
      move &P.Print_Col    to #C_10
      let $F10 = RTRIM(&P.Print_Format,' ')
      break
    when = '11'                                  !non-qualified plan total
      move &P.Print_Line   to #L_11
      move &P.Print_Col    to #C_11
      let $F11 = RTRIM(&P.Print_Format,' ')
      break
    when = '12'                                  !Benefits incl in Box 1
      move &P.Print_Line   to #L_12
      move &P.Print_Col    to #C_12
      let $F12 = RTRIM(&P.Print_Format,' ')
      break
    when = '13'
      move &P.Print_Line   to #L_13_Start
      let $F13 = RTRIM(&P.Print_Format,' ')
      break
    when = '13A'                                 !Uncoll SS tax on tips
      move &P.Print_Col    to #C_13A
      let $F13A = RTRIM(&P.Print_Format,' ')
      let $T_13A = RTRIM(&P.Print_Text,' ')
      break
    when = '13B'                                 !Uncoll Medi tax on tips
      move &P.Print_Col    to #C_13B
      let $F13B = RTRIM(&P.Print_Format,' ')
      let $T_13B = RTRIM(&P.Print_Text,' ')
      break
    when = '13C'                                 !GTL
      move &P.Print_Col    to #C_13C
      let $F13C = RTRIM(&P.Print_Format,' ')
      let $T_13C = RTRIM(&P.Print_Text,' ')
      break
    when = '13D'                                 !401(k)
      move &P.Print_Col    to #C_13D
      let $F13D = RTRIM(&P.Print_Format,' ')
      let $T_13D = RTRIM(&P.Print_Text,' ')
      break
    when = '13E'                                 !403(b)
      move &P.Print_Col    to #C_13E
      let $F13E = RTRIM(&P.Print_Format,' ')
      let $T_13E = RTRIM(&P.Print_Text,' ')
      break
    when = '13F'                                 !408(k)(6)
      move &P.Print_Col    to #C_13F
      let $F13F = RTRIM(&P.Print_Format,' ')
      let $T_13F = RTRIM(&P.Print_Text,' ')
      break
    when = '13G'                                 !457(b)
      move &P.Print_Col    to #C_13G
      let $F13G = RTRIM(&P.Print_Format,' ')
      let $T_13G = RTRIM(&P.Print_Text,' ')
      break
    when = '13H'                                 !501(c)(18)(D)
      move &P.Print_Col    to #C_13H
      let $F13H = RTRIM(&P.Print_Format,' ')
      let $T_13H = RTRIM(&P.Print_Text,' ')
      break
    when = '13J'                                 !Sick pay
      move &P.Print_Col    to #C_13J
      let $F13J = RTRIM(&P.Print_Format,' ')
      let $T_13J = RTRIM(&P.Print_Text,' ')
      break
    when = '13K'                                 !Excise tax
      move &P.Print_Col    to #C_13K
      let $F13K = RTRIM(&P.Print_Format,' ')
      let $T_13K = RTRIM(&P.Print_Text,' ')
      break
    when = '13L'                                 !Business expense
      move &P.Print_Col    to #C_13L
      let $F13L = RTRIM(&P.Print_Format,' ')
      let $T_13L = RTRIM(&P.Print_Text,' ')
      break
    when = '13M'                                 !Uncoll SS tax - GTL
      move &P.Print_Col    to #C_13M
      let $F13M = RTRIM(&P.Print_Format,' ')
      let $T_13M = RTRIM(&P.Print_Text,' ')
      break
    when = '13N'                                 !Uncoll Medi tax - GTL
      move &P.Print_Col    to #C_13N
      let $F13N = RTRIM(&P.Print_Format,' ')
      let $T_13N = RTRIM(&P.Print_Text,' ')
      break
    when = '13P'                                 !Excl Moving Exp
      move &P.Print_Col    to #C_13P
      let $F13P = RTRIM(&P.Print_Format,' ')
      let $T_13P = RTRIM(&P.Print_Text,' ')
      break
    when = '13Q'                                 !Basic Quarters and Subsistence
      move &P.Print_Col    to #C_13Q
      let $F13Q = RTRIM(&P.Print_Format,' ')
      let $T_13Q = RTRIM(&P.Print_Text,' ')
      break

    when = '13R'                                 !Medical Expense Account
      move &P.Print_Col    to #C_13R
      let $F13R = RTRIM(&P.Print_Format,' ')
      let $T_13R = RTRIM(&P.Print_Text,' ')
      break

    when = '13S'                                 !Section 418(p) SIMPLE Retirement
      move &P.Print_Col    to #C_13S
      let $F13S = RTRIM(&P.Print_Format,' ')
      let $T_13S = RTRIM(&P.Print_Text,' ')
      break

    when = '13T'                                 !Adoption Expenses
      move &P.Print_Col    to #C_13T
      let $F13T = RTRIM(&P.Print_Format,' ')
      let $T_13T = RTRIM(&P.Print_Text,' ')
      break

    when = '15A'                                 !Statutory EE checkbox
      move &P.Print_Line   to #L_15A
      move &P.Print_Col    to #C_15A
      break
    when = '15B'                                 !Deceased checkbox
      move &P.Print_Line   to #L_15B
      move &P.Print_Col    to #C_15B
      break
    when = '15C'                                 !Pension plan checkbox
      move &P.Print_Line   to #L_15C
      move &P.Print_Col    to #C_15C
      break
    when = '15D'                                 !Legal rep checkbox
      move &P.Print_Line   to #L_15D
      move &P.Print_Col    to #C_15D
      break
    when = '15G'                                 !Defer Comp checkbox
      move &P.Print_Line   to #L_15G
      move &P.Print_Col    to #C_15G
      break
    when = '16'                                  !State
      move &P.Print_Line   to #L_16
      move &P.Print_Col    to #C_16
      let $F16 = RTRIM(&P.Print_Format,' ')
      break
    when = '16A'                                 !State Employer ID
      move &P.Print_Line   to #L_16A
      move &P.Print_Col    to #C_16A
      let $F16A = RTRIM(&P.Print_Format,' ')
      break
    when = '17'                                  !State wages
      move &P.Print_Line   to #L_17
      move &P.Print_Col    to #C_17
      let $F17 = RTRIM(&P.Print_Format,' ')
      break
    when = '18'                                  !State tax
      move &P.Print_Line   to #L_18
      move &P.Print_Col    to #C_18
      let $F18 = RTRIM(&P.Print_Format,' ')
      break
    when = '19'
      move &P.Print_Line   to #L_19
      move &P.Print_Col    to #C_19
      let $F19 = RTRIM(&P.Print_Format,' ')
      break
    when = '19A'
      move &P.Print_Line   to #L_19A
      move &P.Print_Col    to #C_19A
      let $F19A = RTRIM(&P.Print_Format,' ')
      break
    when = '19B'
      move &P.Print_Line   to #L_19B
      move &P.Print_Col    to #C_19B
      let $F19B = RTRIM(&P.Print_Format,' ')
      break
    when = '20'                                 !Local wages
      move &P.Print_Line   to #L_20
      move &P.Print_Col    to #C_20
      let $F20 = RTRIM(&P.Print_Format,' ')
      break
    when = '20A'                                 !Local wages
      move &P.Print_Line   to #L_20A
      move &P.Print_Col    to #C_20A
      let $F20A = RTRIM(&P.Print_Format,' ')
      break
    when = '20B'                                 !Local wages
      move &P.Print_Line   to #L_20B
      move &P.Print_Col    to #C_20B
      let $F20B = RTRIM(&P.Print_Format,' ')
      break
    when = '21'                                 !Local tax
      move &P.Print_Line   to #L_21
      move &P.Print_Col    to #C_21
      let $F21 = RTRIM(&P.Print_Format,' ')
      break
    when = '21A'                                 !Local tax
      move &P.Print_Line   to #L_21A
      move &P.Print_Col    to #C_21A
      let $F21A = RTRIM(&P.Print_Format,' ')
      break
    when = '21B'                                  !Local tax
      move &P.Print_Line   to #L_21B
      move &P.Print_Col    to #C_21B
      let $F21B = RTRIM(&P.Print_Format,' ')
      break
    when = 'A'
      move &P.Print_Line   to #L_A
      move &P.Print_Col    to #C_A
      let $FA = RTRIM(&P.Print_Format,' ')
      break
    when = 'B'
      move &P.Print_Line   to #L_B
      move &P.Print_Col    to #C_B
      let $FB = RTRIM(&P.Print_Format,' ')
      break
    when = 'C1'
      move &P.Print_Line   to #L_C1
      move &P.Print_Col    to #C_C1
      let $FC1 = RTRIM(&P.Print_Format,' ')
      break
    when = 'C2'
      move &P.Print_Line   to #L_C2
      move &P.Print_Col    to #C_C2
      let $FC2 = RTRIM(&P.Print_Format,' ')
      break
    when = 'C3'
      move &P.Print_Line   to #L_C3
      move &P.Print_Col    to #C_C3
      let $FC3 = RTRIM(&P.Print_Format,' ')
      break
    when = 'C4'
      move &P.Print_Line   to #L_C4
      move &P.Print_Col    to #C_C4
      let $FC4 = RTRIM(&P.Print_Format,' ')
      break
    when = 'D'
      move &P.Print_Line   to #L_D
      move &P.Print_Col    to #C_D
      let $FD = RTRIM(&P.Print_Format,' ')
      break
    when = 'E'
      move &P.Print_Line   to #L_E
      move &P.Print_Col    to #C_E
      let $FE = RTRIM(&P.Print_Format,' ')
      break
    when = 'F1'
      move &P.Print_Line   to #L_F1
      move &P.Print_Col    to #C_F1
      let $FF1 = RTRIM(&P.Print_Format,' ')
      break
    when = 'F2'
      move &P.Print_Line   to #L_F2
      move &P.Print_Col    to #C_F2
      let $FF2 = RTRIM(&P.Print_Format,' ')
      break
    when = 'F3'
      move &P.Print_Line   to #L_F3
      move &P.Print_Col    to #C_F3
      let $FF3 = RTRIM(&P.Print_Format,' ')
      break
    when = 'V'
      move &P.Print_Line   to #L_V
      move &P.Print_Col    to #C_V
    when-other
      if $P.Box = '14'
        move &P.Print_Line   to #L_14_Start
        let $F14 = RTRIM(&P.Print_Format,' ')
      else
        move $P.Box to $Box xx
        if $Box = '14'
          let $Box14Letter = SUBSTR($P.Box,3,1)
          let #index = INSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$Box14Letter,1)
          let $P.Print_Text = RTRIM(&P.Print_Text,' ')
          PUT &P.Print_Col $P.Print_Text INTO BOX14(#INDEX) COLUMN TEXT
        end-if
      end-if
      break
  end-evaluate

FROM  PS_TAXFORM_PRT P
WHERE P.FORM_ID = &TX.Form_ID
  AND P.TAXFORM_ID = 'W'
  AND P.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = P.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
ORDER BY P.BOX
end-SELECT
end-procedure


begin-procedure Get-Locality-Print-Name
  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_PRT_NAME
L2.LOCALITY_ABBRV

  move 'Y' to $LocalityNameFound

FROM  PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $E.W2_State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

  if $LocalityNameFound = 'Y' and RTRIM(&L2.W2_Prt_Name,' ') <> ''
    move &L2.W2_Prt_Name to $LocalityPrintName
  else
    if $LocalityNameFound = 'Y' and RTRIM(&L2.Locality_Abbrv,' ') <> ''
       move &L2.Locality_Abbrv to $LocalityPrintName
    else
       do Get-Locality-Abbrv
    end-if
  end-if
end-procedure

begin-procedure Get-Locality-Abbrv
begin-SELECT
L.LOCALITY_NAME

  let $LocalityPrintName  = SUBSTR(&L.LOCALITY_NAME,1,16)

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE      = $E.W2_State
  AND L.LOCALITY   = $Locality
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

end-procedure

begin-procedure Get-Country-Code
begin-SELECT
CT.DESCR
FROM  PS_COUNTRY_TBL CT
WHERE CT.COUNTRY = $E.Country
end-SELECT
end-procedure

begin-procedure Prompts

  do Prompt-for-Sort

  if $SortCode1 <> '7'
    while $SelectEEs = ''
      display ''
      display 'Regular processing or Select employees?'
      input $SelectEEs 'Enter R or S'
      uppercase $SelectEEs
      if INSTR('RS',$SelectEEs,1) = 0
        display 'Enter R or S'
        move '' to $SelectEEs
      end-if
    end-while
  end-if

  if $SelectEEs = 'S'
  and $SortCode1 <> '7'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND E.EMPLID in (''' to $E.SelectedEEs
    move 'AND S.EMPLID in (''' to $S.SelectedEEs
    move 'AND J.EMPLID in (''' to $J.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      uppercase $SelectedEmplID
      if $SelectedEmplID <> ''
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
        let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'

    let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
    let $S.SelectedEEs = $S.SelectedEEs || ')'

    let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
    let $J.SelectedEEs = $J.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
    move '' to $S.SelectedEEs
    move '' to $J.SelectedEEs
  end-if
end-procedure

begin-procedure Load-Test-Data
  let $E.Control_Number =
         LPAD($x,TO_NUMBER(SUBSTR($FA,3,INSTR($FA,')',1)-2)),'X')

  let $A.Federal_EIN =
         LPAD($x,TO_NUMBER(SUBSTR($FB,3,INSTR($FB,')',1)-2)),'X')

  let $A.Descr =
         LPAD($x,TO_NUMBER(SUBSTR($FC1,3,INSTR($FC1,')',1)-2)),'X')

  let $A.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FC2,3,INSTR($FC2,')',1)-2)),'X')

  let $A.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FC3,3,INSTR($FC3,')',1)-2)),'X')

  let $C4 =
         LPAD($x,TO_NUMBER(SUBSTR($FC4,3,INSTR($FC4,')',1)-2)),'X')

  let $E.SSN =
         LPAD($x,TO_NUMBER(SUBSTR($FD,3,INSTR($FD,')',1)-2)),'X')

  let $E.W2_Name =
         LPAD($x,TO_NUMBER(SUBSTR($FE,3,INSTR($FE,')',1)-2)),'X')

  let $E.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FF1,3,INSTR($FF1,')',1)-2)),'X')

  let $E.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FF2,3,INSTR($FF2,')',1)-2)),'X')

  let $F3 =
         LPAD($x,TO_NUMBER(SUBSTR($FF3,3,INSTR($FF3,')',1)-2)),'X')

  move $F01 to $01
  let $01 = TRANSLATE($01,'Bb','99')              !Federal wages
  move $01 to #01

  move $F02 to $02
  let $02 = TRANSLATE($02,'Bb','99')              !Federal tax
  move $02 to #02

  move $F03 to $03
  let $03 = TRANSLATE($03,'Bb','99')              !SS wages
  move $03 to #03

  move $F04 to $04
  let $04 = TRANSLATE($04,'Bb','99')              !SS Tax
  move $04 to #04

  move $F05 to $05
  let $05 = TRANSLATE($05,'Bb','99')              !Medicare wages
  move $05 to #05

  move $F06 to $06
  let $06 = TRANSLATE($06,'Bb','99')              !Medicare tax
  move $06 to #06

  move $F07 to $07
  let $07 = TRANSLATE($07,'Bb','99')              !SS tips
  move $07 to #07

  move $F08 to $08
  let $08 = TRANSLATE($08,'Bb','99')              !Allocated tips
  move $08 to #08

  move $F09 to $09
  let $09 = TRANSLATE($09,'Bb','99')              !EIC
  move $09 to #09

  move $F10 to $10
  let $10 = TRANSLATE($10,'Bb','99')              !Dependent care
  move $10 to #10

  move $F11 to $11
  let $11 = TRANSLATE($11,'Bb','99')              !Non-qualified plans
  move $11 to #11AB

  move $F12 to $12
  let $12 = TRANSLATE($12,'Bb','99')              !Benefits incl in Box1
  move $12 to #12

  move $F13 to $13
  let $13 = TRANSLATE($13,'Bb','99')              !Box 13 Amounts
  move $13 to #13A
  move $13 to #13B
  move $13 to #13C

  move $F14 to $14
  let $14 = TRANSLATE($14,'Bb','99')              !Box 14 Amounts
  move $14 to #14
  move 1 to #i
  while #i <= 4
    put #14 into Box14(#i) Amount
    add 1 to #i
  end-while

  let $E.W2_State =
         LPAD($x,TO_NUMBER(SUBSTR($F16,3,INSTR($F16,')',1)-2)),'X')

  let $E.Employer_ID_SWT =
         LPAD($x,TO_NUMBER(SUBSTR($F16A,3,INSTR($F16A,')',1)-2)),'X')

  move $F17 to $17
  let $17 = TRANSLATE($17,'Bb','99')              !State wages
  move $17 to #17

  move $F18 to $18
  let $18 = TRANSLATE($18,'Bb','99')              !State tax
  move $18 to #18

  let $LocalityPrintName =
         LPAD($x,TO_NUMBER(SUBSTR($F19,3,INSTR($F19,')',1)-2)),'X')

  move $F20 to $20
  let $20 = TRANSLATE($20,'Bb','99')              !Local wages
  move $20 to #20

  move $F21 to $21
  let $21 = TRANSLATE($21,'Bb','99')              !Local tax
  move $21 to #21

  put #20 #21 into Locals(1) TxGrs Tax
  put #20 #21 into Locals(2) TxGrs Tax

  move #Locals_Per_Form to #LocalCount
end-procedure

begin-procedure Print-Alignment-Forms
  move &TX.Align_Count to #Align_Count
  let #Align_Count = #Align_Count * #FormsPerPage
  move #EmployeesPerPage to #temp
  move #FormsPerPage to #EmployeesPerPage
  move 1 to #k
  while #k <= #Align_Count
    do Load-Test-Data
    do Print-W2
    if $Form_ID = 'LW2PS' and mod(#k,4) = 0   ! For the 4th form in every page.
      do LongNameAddress
    end-if
    add 1 to #k
  end-while
  move 0 to #Align_Count
  move #temp to #EmployeesPerPage
  move '' to $priorState
  move '' to $priorLocality
  move '' to $LocalityPrintName
  do Zero-Box14
end-procedure

begin-procedure Print-Value($String,#Line,#Col,$Identifier)
  if #Line > 0
    print $String (#Line,#Col)
  else
    display ''
    display '***************************************'
    display 'Print Line not defined for ' noline
    display $Identifier
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if
end-procedure


begin-procedure Convert-Parameters

  move $RC_US_YE.Reg_Select_Proc   to $SelectEEs
  move $RC_US_YE.Sort_Code1        to $SortCode1
  move $RC_US_YE.Sort_Code3        to $SortCode3
!  move $RC_US_YE.AsofDate          to $AsofDate


! This is to remove the time part
  do Format-DateTime($RC_US_YE.AsofDate, $RC_US_YE.AsofDate, {DEFCMP}, '', '')
  do Format-DateTime($RC_US_YE.AsofDate, $RC_US_YE.AsofDate, {DEFCMP}, '', 'native')

!  If $RC_US_YE.AsofDate <> $AsofDate
!    Show 'As of Date should be Year end date (12/31/YYYY) AND should have the same year as the'
!    Show 'Balance year in Tax reporting Parameter - ' &TX.Balance_Year '.'
!    Stop
!  End-If

  if $SelectEEs = 'S'
    do Read-EEs
  end-if

  do Create-Order-By

end-procedure

begin-procedure Create-Order-By

  move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2

  if $SortCode1 <> '1'
    !display ' '
    !display 'Selected As-Of Date for retrieving the sorted data.'
    !display $AsofDate

    evaluate $SortCode3
      when = '1'               !ID
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '2'               !SSN
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '3'               !Name
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE,P.NAME_PSFORMAT, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, P.NAME_PSFORMAT, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, P.NAME_PSFORMAT, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = ''               ! None  - default Emplid
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

    end-evaluate
  else
    evaluate $SortCode3
      when = '1'
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
      when = '2'
        move 'ORDER BY E.SSN, E.SEQUENCE_NUMBER, E.COMPANY'    to $Sort2
      when = '3'
        move 'ORDER BY P.NAME_PSFORMAT, E.SSN, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
      when = ''
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
    end-evaluate
  end-if
end-procedure


begin-procedure Read-EEs

move 'AND E.EMPLID in (''' to $E.SelectedEEs
move 'AND S.EMPLID in (''' to $S.SelectedEEs
move 'AND J.EMPLID in (''' to $J.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
C.SELECTED_EE

  move &C.Selected_EE     to $SelectedEmplID



  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
  let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX910PR C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
let $S.SelectedEEs = $S.SelectedEEs || ')'

let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
let $J.SelectedEEs = $J.SelectedEEs || ')'

end-procedure

begin-procedure LongNameAddress

  next-column

  print $A.Descr (45,2)
  print $A.Address1 (+1,2)
  if RTRIM($A.Address2, ' ') <> ''
    print $A.Address2 (+1,2)
  end-if
  print $C4 (+1,2)

  if RTRIM($E.Address2, ' ') <> ''
    print $E.W2_Name     (60,21)
    print $E.Address1    (+1,21)
    print $E.Address2    (+1,21)
    print $F3            (+1,21)
  else
    print $E.W2_Name     (61,21)
    print $E.Address1    (+1,21)
    print $F3            (+1,21)
  end-if

end-procedure

Begin-Procedure GetOutDest
begin-SELECT
A.OUTDESTTYPE
   Move &OUTDESTTYPE to #OutDest
FROM  PSPRCSRQST  A
WHERE PRCSINSTANCE = #prcs_process_instance
end-SELECT
End-Procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'w2sort.sqc'    !Routines to sorting W-2s

#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'stdapi.sqc'    !Update Process API
#Include 'remhyphn.sqc'  !Routines to remove hyphen before suffix
