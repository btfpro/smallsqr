!*******************************************************************
!  OHS002GR:  Anzeigepflichtige Unfälle und Berufskrankheiten      *
!*******************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:14:08:17                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup
#define LANGUAGE_REPORT 'GER'

!-------------------------------------------------------
begin-REPORT
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-REPORT


!-------------------------------------------------------
begin-procedure Init-Report
!-------------------------------------------------------

  move 'OHS002GR' to $ReportID
  move 'Anzeigepflichtige Unfälle und Berufskrankheiten' to $ReportTitle
  display $ReportTitle
  display ' '

  do Stdapi-Init

  if $prcs_process_instance <> ''
     do Select-Parameters
  end-if

end-procedure

!-------------------------------------------------------
begin-procedure Get-Values
!-------------------------------------------------------

let $FromDate = &RUN_CNTL_OHS.FROMDATE
let $To_Date = &RUN_CNTL_OHS.THRUDATE
let $Company = &RUN_CNTL_OHS.COMPANY

end-procedure

!-------------------------------------------------------
begin-procedure Init-Layout
!-------------------------------------------------------

#define col1 1
#define col2 5
#define col3 38
#define col4 45
#define col5 52
#define col6 59
#define col7 66
#define col8 73
#define col9 80
#define col10 87
#define col11 94
#define col12 101
#define col13 108

#define colf1 1
#define colf2 4
#define colf3 37
#define colf4 40
#define colf5 72
#define colf6 75


end-procedure

!-------------------------------------------------------
begin-heading  10
#include 'stdhdg01.sqc'

print 'Kalenderjahr '                   (0,{col1})
print $Jahr                             (0,0)
print ' bis '                            (0,0)
print $Heute                            (0,0)

print 'Unfallgruppe'                    (+2,{col1},36)
print 'Verletzter Köperteil (Gruppe)'   (0,{col3})
print '_'                               (+1,{col1},120)FILL

print 'Nr.'                             (+1,{col1},3)
print 'Bezeichnung'                     (0,{col2},32)
print 'Anzahl'                          (0,{col3},6)
print '01'                              (0,{col4}) edit 999999
print '02'                              (0,{col5}) edit 999999
print '03'                              (0,{col6}) edit 999999
print '04'                              (0,{col7}) edit 999999
print '05'                              (0,{col8}) edit 999999
print '06'                              (0,{col9}) edit 999999
print '07'                              (0,{col10}) edit 99999
print '08'                              (0,{col11}) edit 999999
print '09'                              (0,{col12}) edit 999999
print '10'                              (0,{col13}) edit 999999
print '_'                               (+1,{col1},120)FILL



end-heading


!-------------------------------------------------------
begin-footing 5

print '_'       (0,1,120)FILL

print '01'      (+1,{colf1},2)
print $Descr01  (0,{colf2},32)
print '02'      (0,{colf3},2)
print $Descr02  (0,{colf4},31)
print '03'      (0,{colf5},2)
print $Descr03  (0,{colf6})

print '04'      (+1,{colf1},2)
print $Descr04  (0,{colf2},32)
print '05'      (0,{colf3},2)
print $Descr05  (0,{colf4},31)
print '06'      (0,{colf5},2)
print $Descr06  (0,{colf6})

print '07'      (+1,{colf1},2)
print $Descr07  (0,{colf2},32)
print '08'      (0,{colf3},2)
print $Descr08  (0,{colf4},31)
print '09'      (0,{colf5},2)
print $Descr09  (0,{colf6})

print '10'      (+1,{colf1})
print $Descr10  (0,{colf2})
end-footing

!-------------------------------------------------------
begin-procedure Process-Main
!-------------------------------------------------------

do Get-Legend-Descr

do Format-DateTime($FromDate,$out,{DEFYMD},'','')
let $yy = substr($out,1,4)

do Format-DateTime($To_Date,$Heute,{DEFDATE},'','')

let $Jahr         = $yy
let #Summe        = 0
let #Summe_02     = 0
let #Summe_03     = 0
let #Summe_01     = 0
let #Summe_04     = 0
let #Summe_05     = 0
let #Summe_06     = 0
let #Summe_07     = 0
let #Summe_08     = 0
let #Summe_09     = 0
let #Summe_10     = 0
let #Gesamt_Summe = 0

!---------------------------------

begin-SELECT
JOB.REG_REGION
ATT.DESCR100
ICC.ACCIDENT_TYPE_CD         () on-break print=never procedure=New-Unfallgruppe
BPT.BODY_PART_CLASS
COUNT(*)   &Anzahl

  let $Accident_Type_Cd = &ICC.ACCIDENT_TYPE_CD
  let $Descr = &ATT.DESCR100

  evaluate &BPT.BODY_PART_CLASS
  when = '01'
      print &Anzahl     (0,{col4}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_01 = #Summe_01 + &Anzahl
      break
  when = '02'
      print &Anzahl     (0,{col5}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_02 = #Summe_02 + &Anzahl
      break
  when = '03'
      print &Anzahl     (0,{col6}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_03 = #Summe_03 + &Anzahl
      break
  when = '04'
      print &Anzahl     (0,{col7}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_04 = #Summe_04 + &Anzahl
      break
  when = '05'
      print &Anzahl     (0,{col8}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_05 = #Summe_05 + &Anzahl
      break
  when = '06'
      print &Anzahl     (0,{col9}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_06 = #Summe_06 + &Anzahl
      break
  when = '07'
      print &Anzahl     (0,{col10}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_07 = #Summe_07 + &Anzahl
      break
  when = '08'
      print &Anzahl     (0,{col11}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_08 = #Summe_08 + &Anzahl
      break
  when = '09'
      print &Anzahl     (0,{col12}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_09 = #Summe_09 + &Anzahl
      break
  when = '10'
      print &Anzahl     (0,{col13}) edit 999999
      let #Summe = #Summe + &Anzahl
      let #Summe_10 = #Summe_10 + &Anzahl
      break
  end-evaluate


FROM PS_ACCDNT_TYPE_TBL ATT
    ,PS_INJURY_ILL_BP IIB
    ,PS_INJURY_ILL II
    ,PS_INJURY_ILL_ACC ICC
    ,PS_BODY_PART_TBL BPT
    ,PS_JOB JOB

WHERE IIB.EMPLID = II.EMPLID
AND   IIB.EMPL_RCD = II.EMPL_RCD
AND   IIB.NON_EMPLOYEE_ID = II.NON_EMPLOYEE_ID
AND   IIB.INCIDENT_NBR = II.INCIDENT_NBR
AND   ICC.EMPLID = II.EMPLID
AND   ICC.EMPL_RCD = II.EMPL_RCD
AND   ICC.NON_EMPLOYEE_ID = II.NON_EMPLOYEE_ID
AND   ICC.INCIDENT_NBR = II.INCIDENT_NBR
AND   ATT.SETID = JOB.REG_REGION
AND   ATT.ACCIDENT_TYPE_CD = ICC.ACCIDENT_TYPE_CD
AND   ATT.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_ACCDNT_TYPE_TBL ATT2
                   WHERE ATT2.SETID = ATT.SETID
                   AND ATT2.ACCIDENT_TYPE_CD = ATT.ACCIDENT_TYPE_CD
                   AND   ATT2.EFFDT <= $To_Date
                  )
AND   ATT.EFF_STATUS = 'A'
AND   BPT.SETID = JOB.REG_REGION
AND   BPT.BODY_PART_CD = IIB.BODY_PART_CD
AND   BPT.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_BODY_PART_TBL BPT2
                   WHERE BPT2.SETID = BPT.SETID
                   AND   BPT2.BODY_PART_CD = BPT.BODY_PART_CD
                   AND   BPT2.EFFDT <= $To_Date
                  )
AND   II.DT_REPORTED >= $FromDate
AND   II.DT_REPORTED <= $To_Date
AND   JOB.EMPLID = II.EMPLID
AND   JOB.EMPL_RCD = II.EMPL_RCD
AND   JOB.COMPANY = $Company
AND   JOB.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_JOB JOB1
                   WHERE JOB1.EMPLID = JOB.EMPLID
                   AND   JOB1.EMPL_RCD = JOB.EMPL_RCD
                   AND   JOB1.EFFDT <= $To_Date
                  )
AND   JOB.EFFSEQ = (
                    SELECT MAX(EFFSEQ)
                    FROM PS_JOB JOB2
                    WHERE JOB2.EMPLID = JOB.EMPLID
                    AND   JOB2.EMPL_RCD = JOB.EMPL_RCD
                    AND   JOB2.EFFDT = JOB.EFFDT
                   )
AND   II.REPORTABLE_CASE = 'Y'
GROUP BY JOB.REG_REGION, ICC.ACCIDENT_TYPE_CD, BPT.BODY_PART_CLASS, ATT.DESCR100
ORDER BY JOB.REG_REGION, ICC.ACCIDENT_TYPE_CD, BPT.BODY_PART_CLASS, ATT.DESCR100
end-SELECT

do New-Unfallgruppe
do Print-End

end-procedure

!-------------------------------------------------------
begin-procedure New-Unfallgruppe
!-------------------------------------------------------

print #Summe            (0,{col3}) edit 999999
print $Accident_Type_Cd (0,{col1},3)
print $Descr            (0,{col2}) WRAP 30 5

let #Gesamt_Summe = #Gesamt_Summe + #Summe
let #Summe = 0

position (+2,1)

end-procedure

!-------------------------------------------------------
begin-procedure Print-End
!-------------------------------------------------------

print '_'               (+1,{col1},120)FILL
print 'Insgesamt'       (+1,{col2},32)
print #Gesamt_Summe     (0,{col3}) edit 999999
print #Summe_01         (0,{col4}) edit 999999
print #Summe_02         (0,{col5}) edit 999999
print #Summe_03         (0,{col6}) edit 999999
print #Summe_04         (0,{col7}) edit 999999
print #Summe_05         (0,{col8}) edit 999999
print #Summe_06         (0,{col9}) edit 999999
print #Summe_07         (0,{col10}) edit 999999
print #Summe_08         (0,{col11}) edit 999999
print #Summe_09         (0,{col12}) edit 999999
print #Summe_10         (0,{col13}) edit 999999

print 'in %'            (+1,{col2},32)
if #Gesamt_Summe <> 0
  let #out = (#Gesamt_Summe * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col3}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_01 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col4}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_02 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col5}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_03 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col6}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_04 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col7}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_05 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col8}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_06 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col9}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_07 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col10}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_08 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col11}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_09 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col12}) edit 999.99

if #Gesamt_Summe <> 0
  let #out = (#Summe_10 * 100)/#Gesamt_Summe
else
  let #out = 0
end-if
print #out              (0,{col13}) edit 999.99

end-procedure Print-End

!-------------------------------------------------------
begin-procedure Get-Legend-Descr
!-------------------------------------------------------

let $Fieldname = 'BODY_PART_CLASS'

let $FieldValue = '01'
do Read-Translate-Table
let $Descr01 = $XlatLongName

let $FieldValue = '02'
do Read-Translate-Table
let $Descr02 = $XlatLongName

let $FieldValue = '03'
do Read-Translate-Table
let $Descr03 = $XlatLongName

let $FieldValue = '04'
do Read-Translate-Table
let $Descr04 = $XlatLongName

let $FieldValue = '05'
do Read-Translate-Table
let $Descr05 = $XlatLongName

let $FieldValue = '06'
do Read-Translate-Table
let $Descr06 = $XlatLongName

let $FieldValue = '07'
do Read-Translate-Table
let $Descr07 = $XlatLongName

let $FieldValue = '08'
do Read-Translate-Table
let $Descr08 = $XlatLongName

let $FieldValue = '09'
do Read-Translate-Table
let $Descr09 = $XlatLongName

let $FieldValue = '10'
do Read-Translate-Table
let $Descr10 = $XlatLongName

end-procedure

!-------------------------------------------------------
#include 'ohsrnctl.sqc'  !Get run control parameter values
#include 'ohsget.sqc'    !Get values mask routines

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Routines to update run status
