!**********************************************************************!
!  gpusstsm:   State Tax Summary Report      (USA)                     !
!**********************************************************************!
!                                                                      !
!               Confidentiality Information:                           !
!                                                                      !
!                                                                      !
! This module contains confidential and proprietary information        !
! of Oracle; it is not to be copied, reproduced, or transmitted        !
! in any form, by any means, in whole or in part, nor is it to         !
! be used for any purpose other than that for which it is              !
! expressly provided under the applicable license agreement.           !
!                                                                      !
! Copyright (C) 2006 Oracle. All Rights Reserved.                      !
!                                                                      !
!**********************************************************************!
!                                                                      !
!          $Date:  2006/07/21:01:58:37                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      !
!**********************************************************************!



#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization
#include 'usarpt.sqc'   !Get USA variables

begin-setup
  declare-variable
    default-numeric=decimal
  end-declare
end-setup

begin-report
  do Init-Report
  do Stdapi-Term
  do delete-tmp
end-report

begin-procedure Init-Report

  move 'GPUSSTSM' to $ReportID
  move 'State Tax Summary Report' to $ReportTitle

  display $ReportTitle
  Display ' '

  do Get-EandG
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize

    do Select-Parameters
    do Process-Run-Control

 if $RptPeriod = 'M'
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
 end-if

  create-array
         name=TaxArray size=3000
         field=State-Array:char field=TaxClass-Array:char:72
                                field=Period-Array:number:72
                                field=EE-TxGrs:number:72
                                field=EE-Tax:number:72
                                field=ER-TxGrs:number:72
                                field=ER-Tax:number:72
                                field=NoLmtGrs:number:72

  create-array
         name=CompTaxArray size=1
         field=Comp-State-Array:char field=Comp-TaxClass-Array:char:72
                                field=Comp-Period-Array:number:72
                                field=Comp-EE-TxGrs:number:72
                                field=Comp-EE-Tax:number:72
                                field=Comp-ER-TxGrs:number:72
                                field=Comp-ER-Tax:number:72
                                field=Comp-NoLmtGrs:number:72
 create-array
         name=TotTaxArray size=1
         field=Tot-State-Array:char field=Tot-TaxClass-Array:char:72
                                field=Tot-Period-Array:number:72
                                field=Tot-EE-TxGrs:number:72
                                field=Tot-EE-Tax:number:72
                                field=Tot-ER-TxGrs:number:72
                                field=Tot-ER-Tax:number:72
                                field=Tot-NoLmtGrs:number:72

      let $Tax_Category1 = '010207'
      let $Tax_Category2 = '--03--'
      let #Max_Class  = 5


end-procedure


begin-procedure Process-Run-Control
  move &GPUS_RPT_TAX_RC.GPUS_TAX_YEAR to $RptYear xxxx
  move $RptYear to #RptYear
  move $RptYear to $RptYearPrt xxxx
  move &GPUS_RPT_TAX_RC.GPUS_TAX_QTR          to $RptQtr

  if to_number(&GPUS_RPT_TAX_RC.GPUS_TAX_QTR)  > 0
    move 'Q'          to $RptPeriod
    move 'Quarterly ' to $ReportTitlePeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '01'
        move '01' to $BegMonthCD
        move '03' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '1st Quarter' to $Period
        break
      when = '02'
        move '04' to $BegMonthCD
        move '06' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '2nd Quarter' to $Period
        break
      when = '03'
        move '07' to $BegMonthCD
        move '09' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '0' with $RptYear
        move '3rd Quarter' to $Period
        break
      when = '04'
        move '10' to $BegMonthCD
        move '12' to $MonthCd
        let #AsOfMonth = to_number($MonthCD)
        let $AsOfMonth = $MonthCD
        concat $AsofMonth with $RptYear -xx-3
        concat '1' with $RptYear
        move '4th Quarter' to $Period
        break
    end-evaluate
  else
    move &GPUS_RPT_TAX_RC.GPUS_TAX_MONTH to #MonthCd
    let #AsofMonth = #MonthCd
    move 'M'        to $RptPeriod
    move 'Monthly ' to $ReportTitlePeriod
    if #MonthCd <> 0
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      evaluate $MonthCd
              when = '01'
              when = '02'
              when = '03'
                move '01' to $BegMonthCD
              when = '04'
              when = '05'
              when = '06'
                move '04' to $BegMonthCD
              when = '07'
              when = '08'
              when = '09'
                move '07' to $BegMonthCD
              when = '10'
              when = '11'
              when = '12'
                move '10' to $BegMonthCD
      end-evaluate
      move $MonthName to $Period
      let $AsOfMonth = $MonthCD
      evaluate $AsOfMonth
        when = '01'
        when = '03'
        when = '05'
        when = '07'
        when = '08'
        when = '10'
        when = '12'
          concat $AsofMonth with $RptYear -xx-3
          concat '1' with $RptYear
        when = '02'
          concat $AsofMonth with $RptYear -xx-2
          concat '8' with $RptYear
        when = '04'
        when = '06'
        when = '09'
        when = '11'
          concat $AsofMonth with $RptYear -xx-3
          concat '0' with $RptYear
      end-evaluate
    else
      display 'Month Not Entered'
      stop
    end-if
  end-if

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($RptYear, $AsOfDate, {DEFYMD}, '', 'native')
  concat $ReportTitle with $ReportTitlePeriod
  move $ReportTitlePeriod to $ReportTitle
end-procedure

begin-heading 6
#Include 'stdhdg01.sqc'                !standard heading 1

  print 'Company'                        (3,1)
  print $Company                         (0,13)
  print $CompanyName                     (0,17)
  print $Period                          (+0,80)
  print $RptYearPrt                      (+0,92)
  print 'Federal EIN:'                   (+1,1)
  print $FederalEIN                      (0,17)    edit xx-xxxxxxx
  print 'Employee'                       (+1,63)
  print 'Employer'                       (0,106)
  print 'Taxable Wages'                  (+1,61)
  print 'Employee Tax'                   (0,84)
  print 'Taxable Wages'                  (0,104)
  print 'Employer Tax'                   (0,126)
  print 'No Limit Gross'                 (0,147)
end-heading

begin-procedure Report
 let #I = 0
 let #J = 0
 let $hold-locality = '~~~'
begin-SELECT
A.GPUS_YE_RPT_CO   () on-break level=1 print=never before=Before-Company
                                            after=After-Company
A.STATE     () on-break level=2 print=never after=After-State
A.GPUS_TAX_CATEGORY
A.PYMT_DT
SUM(A.GPUS_TAX_GRS)  &GPUS_TAX_GRS
SUM(A.GPUS_TAX_AMT)  &GPUS_TAX_AMT
SUM(A.GPUS_TAX_NL_GRS)  &GPUS_TAX_NL_GRS

 LET #GPUS_TAX_GRS = &GPUS_TAX_GRS
 LET #GPUS_TAX_AMT = &GPUS_TAX_AMT
 LET #GPUS_TAX_NL_GRS = &GPUS_TAX_NL_GRS


 let $state_sel    = rtrim(&A.STATE,' ')
   let #Z = INSTR($Tax_Category1,&A.GPUS_TAX_CATEGORY,1)
  if #Z<>0
   evaluate #Z
             when = 1
                  let #J=1
                  break
             when = 3
                  let #J=2
                  break
             when = 5
                  let #J=4
                  break
   end-evaluate
  end-if
  if #Z<>0
  let $ee-er = 'e'
  END-IF
  if #Z = 0
    let #Z = INSTR($Tax_Category2,&A.GPUS_TAX_CATEGORY,1)
     if #Z<>0
     evaluate #Z
               when = 1
                    let #J=1
                    break
               when = 3
                    let #J=3
                    break
               when = 5
                    let #J=3
                    break
     end-evaluate
     end-if
     if #Z<>0
     let $ee-er = 'r'
     end-if
  end-if
  let TaxArray.State-Array(#I) = $state_sel
  let TotTaxArray.Tot-State-Array(0)  = 'TOT'


 do Convert-To-DTU-Date(&A.PYMT_DT,$TMP2_Pymt_Dt1)
 let $mo=substr($TMP2_Pymt_Dt1,6,2)

  if $mo = $AsOfMonth

  if $ee-er = 'e'
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
     else
        if $ee-er = 'r'
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        end-if
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
     end-if
     if $ee-er <> 'e'
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        TaxArray(#I) NoLmtGrs(#J)
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        CompTaxArray(0) Comp-NoLmtGrs(#J)
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        TotTaxArray(0) Tot-NoLmtGrs(#J)
     end-if
  end-if

  let #J = #J + 24
     let #BegMonthCD= to_number($BegMonthCD)
     let #MonthCD= to_number($MonthCD)
     let #mo = to_number($mo)
  if (#mo <= #MonthCD) and (#mo >= #BegMonthCD)
     if $ee-er = 'e'
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
     else
        if $ee-er = 'r'
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
           ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
           TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
        end-if
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
     end-if
     if $ee-er <> 'e'
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        TaxArray(#I) NoLmtGrs(#J)
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        CompTaxArray(0) Comp-NoLmtGrs(#J)
        ARRAY-ADD #GPUS_TAX_NL_GRS to
        TotTaxArray(0) Tot-NoLmtGrs(#J)
     end-if
  end-if

  let #J = #J + 24
  if $ee-er = 'e'
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
  else
     if $ee-er = 'r'
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TaxArray(#I) EE-TxGrs(#J) EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        CompTaxArray(0) Comp-EE-TxGrs(#J) Comp-EE-Tax(#J)
        ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
        TotTaxArray(0) Tot-EE-TxGrs(#J) Tot-EE-Tax(#J)
     end-if
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     TaxArray(#I) ER-TxGrs(#J) ER-Tax(#J)
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     CompTaxArray(0) Comp-ER-TxGrs(#J) Comp-ER-Tax(#J)
     ARRAY-ADD #GPUS_TAX_GRS #GPUS_TAX_AMT to
     TotTaxArray(0) Tot-ER-TxGrs(#J) Tot-ER-Tax(#J)
  end-if
  if $ee-er <> 'e'
     ARRAY-ADD #GPUS_TAX_NL_GRS to
     TaxArray(#I) NoLmtGrs(#J)
     ARRAY-ADD #GPUS_TAX_NL_GRS to
     CompTaxArray(0) Comp-NoLmtGrs(#J)
     ARRAY-ADD #GPUS_TAX_NL_GRS to
     TotTaxArray(0) Tot-NoLmtGrs(#J)
  end-if

  let #J = 0

FROM  PS_GPUS_FDSM_TMP A
WHERE A.PROCESS_INSTANCE = #prcs_process_instance - 1
GROUP BY A.GPUS_YE_RPT_CO, A.STATE, A.GPUS_TAX_CATEGORY,A.PYMT_DT
HAVING SUM(A.GPUS_TAX_GRS)<>0 or SUM(A.GPUS_TAX_AMT)<>0 or SUM(A.GPUS_TAX_NL_GRS)<>0
ORDER BY A.GPUS_YE_RPT_CO, A.STATE, A.GPUS_TAX_CATEGORY,A.PYMT_DT

end-SELECT


  if $company_taxarray_data <> 'y'
    if $Gpus_Ye_Rpt_Co = ''
      display 'No data selected'
      print 'No data selected'    (+5,1)  center
    end-if
  end-if


  move 'Y' to $End

  let $print-total = 'G'
  do Print-Totals

end-procedure


begin-procedure Before-Company
  move &A.Gpus_Ye_Rpt_Co to $Company
  do Get-Company-Data
  move &CT.GPUS_TAX_EIN to $FederalEIN 099999999
  let $hold-locality = '~~~'
end-procedure


begin-procedure After-Company
  let $print-total = 'C'
  do Print-Totals
  let $print-total = ' '
  let $company_taxarray_data = 'y'
  clear-array name=CompTaxArray
end-procedure


begin-procedure After-State
  do Print-State-TaxArray
  clear-array name=TaxArray
  let $hold-locality = '~~~'
end-procedure


begin-procedure Print-State-TaxArray
  let $State = $state_sel
  let $eor-total = 'N'
  let #K = 0
  let #L = 1
  while #K <= #I
    if TaxArray.State-Array(#K) <> ''

       if #K = 0
          let $State-Array = TaxArray.State-Array(#K)
          print 'Jurisdiction: '   (+1,1)
          print $State-Array       (0,15)
          print '='                (0,20,155) fill
          print ''                 (+1,1)
       end-if

       let $print-label = 'Y'
       let #L = 1

       while #L < #Max_Class
         let $skip-item = 'N'
         if #K = 0
            if #L = 8 or #L = 11
               let $skip-item = 'Y'
            end-if
         else
            if #L <> 1 and #L <> 8 and #L <> 11 and #L <> 15
               let $skip-item = 'Y'
            end-if
         end-if

         if $skip-item <> 'Y'
            let #M = #K
            let #N = #L
            let #items-value = 0
            if $RptPeriod = 'M'
               do Get-TaxArray
            end-if
            let #N = #L + 24
            do Get-TaxArray
            let #N = #L + 48
            do Get-TaxArray

            if #items-value <> 0
               let $current-U-rate = ''
               evaluate #L
                   when = 1
                        print 'Withholding  ' (+1,1)
                        break
                   when = 2
                        print 'State Disability EE  ' (+1,1)
                        break
                   when = 3
                        print 'State Disability ER   ' (+1,1)
                        break
                   when = 4
                        print 'State EIC  ' (+1,1)
                        break
               end-evaluate

               let #M = #K
               let #N = #L
               let #linetoprint = 0
               if $RptPeriod = 'M'
                  print 'MTD' (+#linetoprint,49)
                  let #linetoprint = 1
                  do Get-TaxArray
                  do Print-TaxArray
               end-if

               let #N = #L + 24
               print 'QTD' (+#linetoprint,49)
               do Get-TaxArray
               do Print-TaxArray

               let #N = #L + 48
               print $current-U-rate (+1,49)
               print 'YTD' (,49)
               do Get-TaxArray
               do Print-TaxArray
               let $current-U-rate = ''
               print '' (+1,1)
            end-if

         end-if

         let #L = #L + 1
       end-while

    end-if
    let #K = #K + 1
  end-while

end-procedure



begin-procedure Print-Totals

  if $print-total = 'G'
     move ' ' to   $Company
     move ' ' to   $CompanyName
     move ' ' to   $FederalEIN
     print 'Report Grand Totals' (+1,1)
     print '' (+1,1)
  else
     print 'Company Totals'      (+2,1)
     print '+'                   (0,16,159) fill
     print '' (+1,1)
  end-if

  let #K = 0
  let #L = 1

  while #L < #Max_Class

      evaluate #L
         when = 1
              let $Total-Label = 'Withholding  '
              break
         when = 2
              let $Total-Label = 'State Disability EE  '
              break
         when = 3
              let $Total-Label = 'State Disability ER   '
              break
         when = 4
              let $Total-Label = 'State EIC  '
              break
     end-evaluate

     let #M = #K
     let #N = #L

     let #items-value = 0
     if $RptPeriod = 'M'
        do Get-TaxArray
     end-if
     let #N = #L + 24
     do Get-TaxArray
     let #N = #L + 48
     do Get-TaxArray

     if #items-value <> 0

        let #M = #K
        let #N = #L

        print $Total-Label (+1,1)

        let #linetoprint = 0
        if $RptPeriod = 'M'
           print 'MTD' (+#linetoprint,49)
           let #linetoprint = 1
           do Get-TaxArray
           do Print-TaxArray
        end-if

        let #N = #L + 24
        print 'QTD' (+#linetoprint,49)
        do Get-TaxArray
        do Print-TaxArray

        let #N = #L + 48
        print 'YTD' (+1,49)
        do Get-TaxArray
        do Print-TaxArray

        print '' (+1,1)
     end-if

     let #L = #L + 1

  end-while
  new-page
end-procedure


begin-procedure Get-TaxArray
  let #EETxGrs = 0
  let #EETax   = 0
  let #ERTxGrs = 0
  let #ERTax   = 0
  let #NLGrs   = 0

  evaluate $print-total
     when = 'C'
     get  #EETxGrs          #EETax          #ERTxGrs          #ERTax
          #NLGrs
          from CompTaxArray(#M)
          Comp-EE-TxGrs(#N) Comp-EE-Tax(#N) Comp-ER-TxGrs(#N) Comp-ER-Tax(#N)
          Comp-NoLmtGrs(#N)
     when = 'G'
     get  #EETxGrs         #EETax         #ERTxGrs         #ERTax
          #NLGrs
          from TotTaxArray(#M)
          Tot-EE-TxGrs(#N) Tot-EE-Tax(#N) Tot-ER-TxGrs(#N) Tot-ER-Tax(#N)
          Tot-NoLmtGrs(#N)
     when-other
     get  #EETxGrs     #EETax     #ERTxGrs     #ERTax
          #NLGrs
          from TaxArray(#M)
          EE-TxGrs(#N) EE-Tax(#N) ER-TxGrs(#N) ER-Tax(#N)
          NoLmtGrs(#N)
  end-evaluate

  let #items-value = #items-value + ABS(#EETxGrs) + ABS(#EETax) + ABS(#ERTxGrs)
                                 + ABS(#ERTax) + ABS(#NLGrs)
end-procedure


begin-procedure Print-TaxArray

  do Format-Number(#EETxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,52)
  do Format-Number(#EETax, $out, 'B99,999,999,999.99mi')
  print $out                    (,74)
  do Format-Number(#ERTxGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,94)
  do Format-Number(#ERTax, $out, 'B99,999,999,999.99mi')
  print $out                    (,115)
  do Format-Number(#NLGrs, $out, 'B99,999,999,999.99mi')
  print $out                    (,137)

end-procedure

begin-procedure delete-tmp
begin-Sql
delete from PS_GPUS_FDSM_TMP
  WHERE PROCESS_INSTANCE   = #prcs_process_instance - 1
end-SQL
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'gpuspint.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'gpuscodt.sqc'  !Get-Company-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset1.sqc'    !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routine for determining end of month
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'gpuspctl.sqc'  !Process Scheduler Run Controls
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'geteandg.sqc'  !Get-EandG procedure