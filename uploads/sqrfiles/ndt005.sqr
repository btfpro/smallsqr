!*********************************************************
!  NDT005:  Section 129 - Eligibility Cross Section Test *
!*********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:09:16:04                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!
!                      Eligibility Cross Section Test
! This is the first report in the Section 129 Nondiscrimination Testing.
! The SQR NDT001 must have been run prior to this report and the on-line
! run control set with the desired options.
!***************************************************************************
#include 'setenv.sqc'    !Set environment

Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup

!#define debugD  YES

#define  CURRENT_YEAR   C

!************************************************
begin-program
!************************************************

  do Init-Report

  display 'Program Began at: ' NoLine
  do Display-Time

  if (&RC.SLOB <> 'Y')
    do Main-Report
  end-if

  display 'Program Ended at: ' noline
  do Display-Time

  do StdAPI-Term

end-program


!************************************************
begin-procedure Init-Report
!************************************************

  do Init-DateTime
  do Get-Current-DateTime
  do Init-Number

  move 'NDT005' to $ReportID
  move 'Section 129 Nondiscrimination Testing (Part 1 of 3)' to $ReportTitle

  display $ReportTitle
  display ' '
  display ' '
  display 'Prior to running this program, you should have verified that the'
  display 'SQR Program NDT001 was run for Section 129 only. If Single Lines'
  display 'of Business was tested prior to this test, then NDT001 will need'
  display 'to be re-run.'
  display ' '

  do Check-Run-Control

  if (&RC.SLOB = 'Y')
    display 'ERROR: Re-Run NDT001 - SLOB Test was run prior to this test.'
    display ' '
  end-if

  do StdAPI-Init

end-procedure


!************************************************
begin-procedure Main-Report
!************************************************

  do Reset-Test-Results
  do EE-Counts('L', #NHCE, #ENHCE)
  do EE-Counts('H', #HCE,  #EHCE)
  do Tbl-LookUp
  do Calc-Results

  if (#NHCE <> 0) And (#HCE <> 0) And (#EHCE <> 0)
    do Display-Results
    do Set-Final-Result
  end-if

end-procedure


!************************************************
begin-procedure Check-Run-Control
!************************************************

begin-SELECT
RC.SLOB,
RC.PLAN_YEAR_BEGIN_DT,
RC.MONTH_END_DT

FROM  PS_NDT_RUNCTL RC
end-SELECT

end-procedure


!************************************************
begin-procedure Reset-Test-Results
!************************************************

  display 'Status: Clearing Previous Results ...'

let $sql-statement = 'NDT005.SQR,Reset-Test-Results,R_Final_Results'
begin-SQL on-error=SQL-Error

DELETE FROM PS_R_FINAL_RESULTS
 WHERE TEST_ID = 'Elig';

INSERT INTO PS_R_FINAL_RESULTS
(TEST_ID, PASSED, TTL_BENEFIT_PAID, PCT_BENEFIT_PAID, NHCE_LOOKUP_PCT,
 ELIG_NHCE_COUNT, ELIG_HCE_COUNT,   CALC_HARBOR_PCT,  SAFE_HARBOR_PCT,
 UNSAFE_HARBOR_PCT, SLOB, CAFETERIA_PLAN, FIFTY5_CALC_PCT,
 MIN_EMPLOYEE_COUNT)
VALUES
('Elig','N',0,0,0,0,0,0,0,0,'?','?',0,0);

end-SQL

end-procedure


!*****************************************************
begin-procedure EE-Counts($HCE_Type, :#Cnt, :#EligCnt)
!*****************************************************

  if ($HCE_Type = 'L')
    let $HCE_Descr = 'NHCE'
  else
    let $HCE_Descr = 'HCE'
  end-if
  let $Str = 'Status: Counting Total and Participating '
  let $Str = $Str || $HCE_Descr || ' Population ...'
  display $Str

begin-SELECT
COUNT(DISTINCT EMPLID) &CNT

FROM  PS_R_NDT_EMPL_YTD
WHERE YEAR_CD  = '{CURRENT_YEAR}'
AND   HCE_TYPE = $HCE_Type
end-SELECT

  let #Cnt = &CNT

begin-SELECT
COUNT(DISTINCT B.EMPLID) &ECNT

FROM  PS_FSA_BENEFIT B
WHERE B.EMPLID IN
      (SELECT DISTINCT EMPLID
         FROM PS_R_NDT_EMPL_YTD
        WHERE HCE_TYPE = $HCE_Type
          AND YEAR_CD  = '{CURRENT_YEAR}')
  AND B.PLAN_TYPE = '61'
  AND B.EFFDT =
      (SELECT MAX(EFFDT)
         FROM PS_FSA_BENEFIT
        WHERE EMPLID    = B.EMPLID
          AND EMPL_RCD  = B.EMPL_RCD
          AND PLAN_TYPE = B.PLAN_TYPE
          AND COVERAGE_ELECT IN ('E')
          AND COVERAGE_BEGIN_DT BETWEEN &_RC.Plan_Year_Begin_Dt AND &_RC.Month_End_Dt)
end-SELECT

  let #EligCnt = &ECNT

end-procedure


!************************************************
begin-procedure Tbl-LookUp
!************************************************

  display 'Status: Performing Table LookUp for Safe and Unsafe Harbor ...'

  let #EE = #NHCE + #HCE

  if (#EE = 0)
    let #LookUp = 0
  else
    let #LookUp = Round((#NHCE/#EE)*100, 0)
  end-if

begin-SELECT
SAFE_HARBOR_PCT * 100      &Safe,
UNSAFE_HARBOR_PCT * 100    &UnSafe

FROM  PS_R_SAFE_RATIO
WHERE NHCE_CONCNTR_PCT = #LookUp
end-SELECT

  let #Safe = &Safe
  let #UnSafe = &UnSafe


end-procedure


!************************************************
begin-procedure Calc-Results
!************************************************

  display 'Status: Calculating Results ...'

  if (#NHCE = 0)
    display ''
    display 'There are no NHCE`s. Test cannot proceed'
  end-if
  if (#HCE = 0)
    display ''
    display 'There are no HCE`s. Test cannot proceed'
  end-if
  if (#EHCE = 0)
    display ''
    display 'There are no Eligible HCE`s. Test cannot proceed'
  end-if

  if (#NHCE <> 0) And (#HCE <> 0) And (#EHCE <> 0)
    let #LRatio = #ENHCE / #NHCE
    let #HRatio = #EHCE / #HCE
    let #Harbor = (#LRatio / #HRatio) * 100
    do PS_SQR_Round(#Harbor, 2, #Harbor)
  end-if

end-procedure


!************************************************
begin-procedure Display-Results
!************************************************

  display ' '
  display '************      Quick Results     **************'
  display ' '
  display 'Total NHCE population      =  '     noline
  display #NHCE                                999,999
  display 'Total HCE population       =  '     noline
  display #HCE                                 999,999
  display 'LookUp Concentration %     =      ' noline
  display #LookUp                              999
  display 'Safe Harbor % from table   = '      noline
  display #Safe                                9,999.00
  display 'UnSafe Harbor % from table = '      noline
  display #UnSafe                              9,999.00
  display ' '
  display 'Eligible NHCE population   =  '     noline
  display #ENHCE                               999,999
  display 'Eligible HCE population    =  '     noline
  display #EHCE                                999,999
  display 'Calculated Harbor %        = '      noline
  display #Harbor                              9,999.00
  display ' '

  if (#Harbor >= #Safe)
     move 'Y' to $Passed
     display 'Test Passed'
  else
  if (#Harbor <= #UnSafe)
     move 'N' to $Passed
     display 'Test Failed'
  else
     move 'M' to $Passed
     display 'Test May Fail'
  end-if
  end-if

  display ' '
  display '**************************************************'
  display ' '

end-procedure


!************************************************
begin-procedure Set-Final-Result
!************************************************

let $sql-statement = 'NDT005.SQR,Set-Final-Result,R_Final_Results,Update'
begin-SQL on-error=SQL-Error
UPDATE PS_R_FINAL_RESULTS
   SET PASSED            = $Passed,
       NHCE_LOOKUP_PCT   = #LookUp,
       ELIG_NHCE_COUNT   = #ENHCE,
       ELIG_HCE_COUNT    = #EHCE,
       CALC_HARBOR_PCT   = #Harbor,
       SAFE_HARBOR_PCT   = #Safe,
       UNSAFE_HARBOR_PCT = #UnSafe
WHERE  TEST_ID = 'Elig';
end-SQL

end-procedure


!*******************************
begin-procedure Display-Time
!*******************************

  do Get-Current-Datetime
  display $AsOfNow
  display ''

end-procedure

!***************************************************************************

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines for numeric formatting
#Include 'stdapi.sqc'    !Update Process API

!***************************** End of NDT005 *******************************

