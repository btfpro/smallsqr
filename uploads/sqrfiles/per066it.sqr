!**************************************************
!  PER066IT:  Hiring Letter Data Extract       *
!**************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/09/04:09:10:11                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!
! This SQR is a 'shell' program that creates an output file that
! may be used to perform a mail merge using a word processing package to
! print letters called Hiring Letters.
!
#include 'setenv.sqc'    !Set environment
#Include 'setup06.sqc'   !Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report


begin-procedure Init-Report

  move 'PER066IT' to $ReportID
  move 'Hiring Letter Data Extract' to $ReportTitle
  display $ReportTitle

  do Set-MonthDDYYYY

  move 'PER' to $AppPrefix  !3 character to group files by application
  move 'LTR' to $OutputFile !3 character to group files created by program

  do Stdapi-Init
  do Get-Report-Language

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters
  end-if
  do Get-Values

end-procedure

begin-procedure Get-Values


!**********************************************************************!
! PROCEDURE:     SELECT-PARAMETERS                                     !
! DESCRIPTION:   CONTROLS PROMPTING FOR USER ENTERED PARAMETERS        !
!**********************************************************************!

BEGIN-SELECT


 display $PRCS_OPRID
RUN_CNTL_PER066.COMPANY
   MOVE &RUN_CNTL_PER066.COMPANY  TO $COMPANY
 FROM PS_RUN_CNTL_PER066 RUN_CNTL_PER066

   WHERE RUN_CNTL_PER066.OPRID = $PRCS_OPRID
   AND RUN_CNTL_PER066.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
END-SELECT

!No Prompt

end-procedure

begin-procedure Set-MonthDDYYYY
! Format to pass the current date for merging with letters as
! Month DD, YYYY format
  move '1' to $MMLZero
  move '1' to $DDLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $out, {DEFMDY},'','')
  let $MonthCd =  {ps-substr}($out, 1, 2)
  do Get-Month-Name ($MonthCd, $MonthName)
  let $Current_Date =  {ps-substr}($out,4,2) || ' ' ||$MonthName || ' ' ||{ps-substr}($out,7,4)
end-procedure

begin-procedure Write-Done
! Create a temporary output file so that a Windows-based word processing
! package such as Word for Windows can detect that the SQR report has
! completed processing.

!DG  open '{IMPORTPREFIX}DONEFLG.TMP{IMPORTSUFFIX}'    as 1 for-writing record=4
!DG  move 'DONE' TO $ioarea
!DG  write 1 from $ioarea
!DG  close 1

end-procedure

begin-procedure Process-Main


! Process each record in PS_R_PER066IT and create extract file for
! word processing package in comma separated variable (CSV) format.
  do Get-Employee-to-Process

!DG  do Write-Done

end-procedure



begin-procedure Get-Names

BEGIN-SELECT

N.NAME_TITLE
  let $Name = rtrim(&N.Name_Title,' ')
  concat ' ' with $Name

N.LAST_NAME
  let $field = rtrim(&N.Last_Name,' ')
  concat ' ' with $field
  concat $field with $Name

N.FIRST_NAME
  let $field = rtrim(&N.First_Name,' ')
  concat ' ' with $field
  concat $field with $Name

N.MIDDLE_NAME
  let $field = rtrim(&N.Middle_Name,' ')
  if &N.MIDDLE_NAME <> ' '
     concat ' ' with $field
     concat $field with $Name
  end-if


  FROM PS_NAMES N
  WHERE N.EMPLID = &A.EMPLID
    AND N.NAME_TYPE = 'PRI'
    AND N.EFFDT = (SELECT MAX(NN.EFFDT) FROM PS_NAMES NN
                   WHERE NN.EMPLID = &A.EMPLID
                     AND NN.NAME_TYPE = 'PRI'
                     AND NN.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Get-Jobcode-desc

BEGIN-SELECT

JC.SETID
JC.JOBCODE
JC.DESCR
  let $Jobcode_descr = &JC.DESCR
 FROM PS_JOBCODE_TBL JC
 WHERE JC.SETID = &J.SETID_JOBCODE
   AND JC.JOBCODE = &J.JOBCODE
   AND JC.EFF_STATUS = 'A'
   AND JC.EFFDT = (SELECT MAX(JJC.EFFDT)
                   FROM PS_JOBCODE_TBL JJC
                   WHERE JJC.SETID = &J.SETID_JOBCODE
                     AND JJC.JOBCODE = &J.JOBCODE
                     AND JJC.EFF_STATUS = 'A'
                     AND JJC.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure


begin-procedure Get-Location-desc

BEGIN-SELECT

JL.SETID
JL.LOCATION
JL.DESCR
  let $Location_descr = &JL.DESCR
 FROM PS_LOCATION_TBL JL
 WHERE JL.SETID = &J.SETID_LOCATION
   AND JL.LOCATION = &J.LOCATION
   AND JL.EFF_STATUS = 'A'
   AND JL.EFFDT = (SELECT MAX(JJL.EFFDT)
                   FROM PS_LOCATION_TBL JJL
                   WHERE JJL.SETID = &J.SETID_LOCATION
                     AND JJL.LOCATION = &J.LOCATION
                     AND JJL.EFF_STATUS = 'A'
                     AND JJL.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure

begin-procedure Get-Labor_Agreement-desc

BEGIN-SELECT

JLA.SETID
JLA.LABOR_AGREEMENT
JLA.DESCR
  let $Labor_agreement_descr = &JLA.DESCR
 FROM PS_EMPL_CTG JLA
 WHERE JLA.SETID = &J.SETID_LBR_AGRMNT
   AND JLA.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
   AND JLA.EFF_STATUS = 'A'
   AND JLA.EFFDT = (SELECT MAX(JJLA.EFFDT)
                   FROM PS_EMPL_CTG JJLA
                   WHERE JJLA.SETID = &J.SETID_LBR_AGRMNT
                     AND JJLA.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
                     AND JJLA.EFF_STATUS = 'A'
                     AND JJLA.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Get-Empl_ctg-desc

BEGIN-SELECT

JLA1.SETID
JLA1.LABOR_AGREEMENT
JLA1.EMPL_CTG
JLA1.DESCR
  let $Empl_ctg_descr = &JLA1.DESCR
 FROM PS_EMPL_CTG_L1 JLA1
 WHERE JLA1.SETID = &J.SETID_LBR_AGRMNT
   AND JLA1.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
   AND JLA1.EMPL_CTG = &J.EMPL_CTG
   AND JLA1.EFF_STATUS = 'A'
   AND JLA1.EFFDT = (SELECT MAX(JJLA1.EFFDT)
                   FROM PS_EMPL_CTG_L1 JJLA1
                   WHERE JJLA1.SETID = &J.SETID_LBR_AGRMNT
                     AND JJLA1.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
                     AND JJLA1.EMPL_CTG = &J.EMPL_CTG
                     AND JJLA1.EFF_STATUS = 'A'
                     AND JJLA1.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure

begin-procedure Get-Empl_ctg_l1-desc

BEGIN-SELECT

JLA2.SETID
JLA2.LABOR_AGREEMENT
JLA2.EMPL_CTG
JLA2.EMPL_CTG_L1
JLA2.DESCR
  let $Empl_ctg_l1_descr = &JLA2.DESCR
 FROM PS_EMPL_CTG_L2 JLA2
 WHERE JLA2.SETID = &J.SETID_LBR_AGRMNT
   AND JLA2.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
   AND JLA2.EMPL_CTG = &J.EMPL_CTG
   AND JLA2.EMPL_CTG_L1 = &J.EMPL_CTG_L1
   AND JLA2.EFFDT = (SELECT MAX(JJLA2.EFFDT)
                   FROM PS_EMPL_CTG_L2 JJLA2
                   WHERE JJLA2.SETID = &J.SETID_LBR_AGRMNT
                     AND JJLA2.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
                     AND JJLA2.EMPL_CTG = &J.EMPL_CTG
                     AND JJLA2.EMPL_CTG_L1 = &J.EMPL_CTG_L1
                     AND JJLA2.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Get-Empl_ctg_l2-desc

BEGIN-SELECT

JLA3.SETID
JLA3.LABOR_AGREEMENT
JLA3.EMPL_CTG
JLA3.EMPL_CTG_L1
JLA3.EMPL_CTG_L2
JLA3.DESCR
  let $Empl_ctg_l2_descr = &JLA3.DESCR
 FROM PS_EMPL_CTG_L3 JLA3
 WHERE JLA3.SETID = &J.SETID_LBR_AGRMNT
   AND JLA3.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
   AND JLA3.EMPL_CTG = &J.EMPL_CTG
   AND JLA3.EMPL_CTG_L1 = &J.EMPL_CTG_L1
   AND JLA3.EMPL_CTG_L2 = &J.EMPL_CTG_L2
   AND JLA3.EFFDT = (SELECT MAX(JJLA3.EFFDT)
                   FROM PS_EMPL_CTG_L3 JJLA3
                   WHERE JJLA3.SETID = &J.SETID_LBR_AGRMNT
                     AND JJLA3.LABOR_AGREEMENT = &J.LABOR_AGREEMENT
                     AND JJLA3.EMPL_CTG = &J.EMPL_CTG
                     AND JJLA3.EMPL_CTG_L1 = &J.EMPL_CTG_L1
                     AND JJLA3.EMPL_CTG_L2 = &J.EMPL_CTG_L2
                     AND JJLA3.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure




begin-procedure Get-Comp_Frequency-desc

BEGIN-SELECT

JF.FREQUENCY_ID
JF.DESCR50
  let $Comp_frequency_descr = &JF.DESCR50
 FROM PS_FREQUENCY_TBL JF
 WHERE JF.FREQUENCY_ID = &J.COMP_FREQUENCY
   AND JF.EFF_STATUS = 'A'
   AND JF.EFFDT = (SELECT MAX(JJF.EFFDT)
                   FROM PS_FREQUENCY_TBL JJF
                   WHERE JJF.FREQUENCY_ID = &J.COMP_FREQUENCY
                     AND JJF.EFF_STATUS = 'A'
                     AND JJF.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure


Begin-procedure Get-Language

!P.LANG_CD        &Empl_Language_Cd
!  if $prcs_language_option = 'R'
!-- if Language Code not defined for the Recipient level of translation
!-- then use the system default - $Language_Cd
!    if rtrim(&Empl_Language_Cd,' ') = ''
!       let $curr_language_cd = $Language_Cd
!    else
!       let $curr_language_cd = &Empl_Language_Cd
!    end-if
!  end-if

end-procedure


Begin-procedure Get-Addresses

BEGIN-SELECT DISTINCT

P.ADDRESS1
P.ADDRESS2
P.ADDRESS3
P.ADDRESS4
P.CITY
P.COUNTY
P.STATE
P.POSTAL
P.COUNTRY
P.NUM1
P.NUM2
P.HOUSE_TYPE
P.ADDR_FIELD1
P.ADDR_FIELD2
P.ADDR_FIELD3
P.GEO_CODE
P.IN_CITY_LIMIT

   !* Set global variabel to be used in Adformat.sqc
   !if  &P.COUNTRY = 'ITA'
   !  use Bel address format
   !  let $COUNTRY = 'BEL'
   !end-if
   let $ADDRESS1        = RTRIM(&P.ADDRESS1,' ')
   let $ADDRESS2        = RTRIM(&P.ADDRESS2,' ')
   let $ADDRESS3        = RTRIM(&P.ADDRESS3,' ')
   let $ADDRESS4        = RTRIM(&P.ADDRESS4,' ')
   let $HOUSE_TYPE      = RTRIM(&P.HOUSE_TYPE,' ')
   let $ADDR_FIELD1     = RTRIM(&P.ADDR_FIELD1,' ')
   let $ADDR_FIELD2     = RTRIM(&P.ADDR_FIELD2,' ')
   let $ADDR_FIELD3     = RTRIM(&P.ADDR_FIELD3,' ')
   let $NUM1            = RTRIM(&P.NUM1,' ')
   let $NUM2            = RTRIM(&P.NUM2,' ')
   let $CITY            = RTRIM(&P.CITY,' ')
   let $STATE           = RTRIM(&P.STATE,' ')
   let $POSTAL          = RTRIM(&P.POSTAL,' ')
   let $COUNTY          = RTRIM(&P.COUNTY,' ')
   let $COUNTRY         = RTRIM(&P.COUNTRY,' ')
   let $GEO_CODE        = RTRIM(&P.GEO_CODE,' ')
   let $IN_CITY_LIMIT   = RTRIM(&P.IN_CITY_LIMIT,' ')

  do ADFORMAT
  do Compress-Address

  move $ADDLINE2  to $AddrLine2
  move $ADDLINE3  to $AddrLine3
  move $ADDLINE31 to $AddrLine4
  move $ADDLINE4  to $AddrLine5
  move $ADDLINE5  to $AddrLine6

 FROM PS_ADDRESSES P
 WHERE P.EMPLID = &A.EMPLID
   AND P.ADDRESS_TYPE = 'HOME'
   AND P.EFF_STATUS = 'A'
   AND P.EFFDT = (SELECT MAX(PP.EFFDT) FROM PS_ADDRESSES PP
   WHERE PP.EMPLID = &A.EMPLID
     AND PP.ADDRESS_TYPE = 'HOME'
     AND PP.EFF_STATUS = 'A'
     AND PP.EFFDT <= P.EFFDT)
END-SELECT


end-procedure


begin-procedure Get-Compensation
BEGIN-SELECT
CC.COMP_RATECD
   do Get-Comp_ratecd_descr

CC.CURRENCY_CD
  move &CC.CURRENCY_CD to $Currency_Cd
  Do Get-Currency-Name
CC.COMPRATE

  do Format-Number(&CC.COMPRATE, $out, '999,999,999,999')
      !logical to leave mask with 2 levels of precision instead of the db
      !format definition of 12.6 for OFFER_AMT
  let $out = ltrim($out,'0')
!  let $out = ltrim($out,' ')
  let $out = $Cur_Symbol||$out

  let $out = $Comp_ratecd_descr || ' ' || $out

   let $rcc = '0'

   if $Comprate1 = '' and $rcc = '0'
      move $out to $Comprate1
      let $rcc = '1'
   end-if
   if $Comprate2 = '' and $rcc = '0'
      move $out to $Comprate2
      let  $rcc = '1'
   end-if
   if $Comprate3 = '' and $rcc = '0'
      move $out to $Comprate3
      let  $rcc = '1'
   end-if
   if $Comprate4 = '' and $rcc = '0'
      move $out to $Comprate4
      let  $rcc = '1'
   end-if
   if $Comprate5 = '' and $rcc = '0'
      move $out to $Comprate5
      let  $rcc = '1'
   end-if
   if $Comprate6 = '' and $rcc = '0'
      move $out to $Comprate6
      let  $rcc = '1'
   end-if
   if $Comprate7 = '' and $rcc = '0'
      move $out to $Comprate7
      let  $rcc = '1'
   end-if
   if $Comprate8 = '' and $rcc = '0'
      move $out to $Comprate8
      let  $rcc = '1'
   end-if
   if $Comprate9 = '' and $rcc = '0'
      move $out to $Comprate9
      let  $rcc = '1'
   end-if
   if $Comprate10 = '' and $rcc = '0'
      move $out to $Comprate10
      let  $rcc = '1'
   end-if
   let $rcc = '0'


CC.COMP_PCT

CC.COMP_FREQUENCY
   do Get-Comp_Frequency-desc

   FROM PS_COMPENSATION CC
   WHERE CC.EMPLID = &A.EMPLID
     AND CC.EMPL_RCD = &A.EMPL_RCD
     AND CC.EFFDT = &A.EFFDT
     AND CC.EFFSEQ = &A.EFFSEQ

END-SELECT
end-procedure

begin-procedure Get-Comp_ratecd_descr

BEGIN-SELECT

CRC.DESCR

      let $Comp_ratecd_descr = &CRC.DESCR

   FROM PS_COMP_RATECD_TBL CRC
   WHERE CRC.COMP_RATECD = &CC.COMP_RATECD
     AND CRC.EFF_STATUS = 'A'
     AND CRC.EFFDT = (SELECT MAX(CRC1.EFFDT) FROM PS_COMP_RATECD_TBL CRC1
                      WHERE CRC1.COMP_RATECD = &CC.COMP_RATECD
                        AND CRC1.EFF_STATUS = 'A'
                        AND CRC1.EFFDT <= CRC.EFFDT)
END-SELECT
end-procedure


begin-procedure Get-Empl_class-desc

BEGIN-SELECT

EC.DESCR
  let $Empl_class_descr = &EC.DESCR

   FROM PS_EMPL_CLASS_TBL EC
   WHERE EC.SETID = &J.REG_REGION
     AND EC.EMPL_CLASS = &J.EMPL_CLASS
     AND EC.EFF_STATUS = 'A'
     AND EC.EFFDT = (SELECT MAX(ECC.EFFDT) FROM PS_EMPL_CLASS_TBL ECC
                      WHERE ECC.SETID = &J.REG_REGION
                        AND ECC.EFF_STATUS = 'A'
                        AND ECC.EFFDT <= &A.EFFDT)
END-SELECT
end-procedure


 begin-procedure Get-Labor_Agreement-desc2

BEGIN-SELECT

CLA.SETID
CLA.LABOR_AGREEMENT
CLA.DESCR
  let $Target_Labor_agreement_descr = &CLA.DESCR
 FROM PS_EMPL_CTG CLA
 WHERE CLA.SETID = &J.SETID_LBR_AGRMNT
   AND CLA.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
   AND CLA.EFF_STATUS = 'A'
   AND CLA.EFFDT = (SELECT MAX(CCLA.EFFDT)
                   FROM PS_EMPL_CTG CCLA
                   WHERE CCLA.SETID = &J.SETID_LBR_AGRMNT
                     AND CCLA.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
                     AND CCLA.EFF_STATUS = 'A'
                     AND CCLA.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Get-Empl_ctg-desc2

BEGIN-SELECT

CLA1.SETID
CLA1.LABOR_AGREEMENT
CLA1.EMPL_CTG
CLA1.DESCR
  let $Target_Empl_ctg_descr = &CLA1.DESCR
 FROM PS_EMPL_CTG_L1 CLA1
 WHERE CLA1.SETID = &J.SETID_LBR_AGRMNT
   AND CLA1.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
   AND CLA1.EMPL_CTG = &CO.EMPL_CTG
   AND CLA1.EFF_STATUS = 'A'
   AND CLA1.EFFDT = (SELECT MAX(CCLA1.EFFDT)
                   FROM PS_EMPL_CTG_L1 CCLA1
                   WHERE CCLA1.SETID = &J.SETID_LBR_AGRMNT
                     AND CCLA1.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
                     AND CCLA1.EMPL_CTG = &CO.EMPL_CTG
                     AND CCLA1.EFF_STATUS = 'A'
                     AND CCLA1.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure

begin-procedure Get-Empl_ctg_l1-desc2

BEGIN-SELECT

CLA2.SETID
CLA2.LABOR_AGREEMENT
CLA2.EMPL_CTG
CLA2.EMPL_CTG_L1
CLA2.DESCR
  let $Target_Empl_ctg_l1_descr = &CLA2.DESCR
 FROM PS_EMPL_CTG_L2 CLA2
 WHERE CLA2.SETID = &J.SETID_LBR_AGRMNT
   AND CLA2.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
   AND CLA2.EMPL_CTG = &CO.EMPL_CTG
   AND CLA2.EMPL_CTG_L1 = &CO.EMPL_CTG_L1
   AND CLA2.EFFDT = (SELECT MAX(CCLA2.EFFDT)
                   FROM PS_EMPL_CTG_L2 CCLA2
                   WHERE CCLA2.SETID = &J.SETID_LBR_AGRMNT
                     AND CCLA2.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
                     AND CCLA2.EMPL_CTG = &CO.EMPL_CTG
                     AND CCLA2.EMPL_CTG_L1 = &CO.EMPL_CTG_L1
                     AND CCLA2.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Get-Empl_ctg_l2-desc2

BEGIN-SELECT

CLA3.SETID
CLA3.LABOR_AGREEMENT
CLA3.EMPL_CTG
CLA3.EMPL_CTG_L1
CLA3.EMPL_CTG_L2
CLA3.DESCR
  let $Target_Empl_ctg_l2_descr = &CLA3.DESCR
 FROM PS_EMPL_CTG_L3 CLA3
 WHERE CLA3.SETID = &J.SETID_LBR_AGRMNT
   AND CLA3.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
   AND CLA3.EMPL_CTG = &CO.EMPL_CTG
   AND CLA3.EMPL_CTG_L1 = &CO.EMPL_CTG_L1
   AND CLA3.EMPL_CTG_L2 = &CO.EMPL_CTG_L2
   AND CLA3.EFFDT = (SELECT MAX(CCLA3.EFFDT)
                   FROM PS_EMPL_CTG_L3 CCLA3
                   WHERE CCLA3.SETID = &J.SETID_LBR_AGRMNT
                     AND CCLA3.LABOR_AGREEMENT = &CO.LABOR_AGREEMENT
                     AND CCLA3.EMPL_CTG = &CO.EMPL_CTG
                     AND CCLA3.EMPL_CTG_L1 = &CO.EMPL_CTG_L1
                     AND CCLA3.EMPL_CTG_L2 = &CO.EMPL_CTG_L2
                     AND CCLA3.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure


begin-procedure Get-Contract_type_desc

BEGIN-SELECT

CT.DESCR
  let $Contract_type_descr = &CT.DESCR

  FROM PS_PERS_CNTRCT_TYP CT
  WHERE CT.SETID = &CD.REG_REGION
    AND CT.CONTRACT_TYPE = &CO.CONTRACT_TYPE
    AND CT.EFF_STATUS = 'A'
    AND CT.EFFDT = (SELECT MAX(CCT.EFFDT) FROM PS_PERS_CNTRCT_TYP CCT
                    WHERE CCT.SETID = &CD.REG_REGION
                      AND CCT.CONTRACT_TYPE = &CO.CONTRACT_TYPE
                      AND CCT.EFF_STATUS = 'A'
                      AND CCT.EFFDT <= CT.EFFDT)
END-SELECT

end-procedure


Begin-procedure Get-Probation

BEGIN-SELECT
PR.PROBATION_DT
  let $Probation_dt = ''
  if &PR.PROBATION_DT <> ''
   move '1' to $MMLZero
   move '1' to $DDLZero
   move '1' to $Year4
   do Format-DateTime(&PR.PROBATION_DT, $out3, {DEFMDY},'','')
   let $MonthCd3 =  {ps-substr}($out3, 1, 2)
   do Get-Month-Name ($MonthCd3, $MonthName3)
   let $Probation_dt =  {ps-substr}($out3,4,2) || ' ' ||$MonthName3 || ' ' ||{ps-substr}($out3,7,4)
  end-if

  FROM PS_CNT_PROBATION PR
   WHERE PR.EMPLID = &A.EMPLID
     AND PR.CONTRACT_NUM = &J.CONTRACT_NUM
     AND PR.PROBATION_DT = (SELECT MAX(PPR.PROBATION_DT) FROM PS_CNT_PROBATION PPR
                            WHERE  PPR.EMPLID = &A.EMPLID
                              AND  PPR.CONTRACT_NUM = &J.CONTRACT_NUM)
END-SELECT
end-procedure


Begin-procedure Get-Matricula

BEGIN-SELECT
M.MATRICULA_NBR_ITA

 do Format-Number(&M.MATRICULA_NBR_ITA, $out1, '999999')
  let $out1 = ltrim($out1,'0')
  display $out1
!  let $out1 = ltrim($out1,' ')
  let $Matricula_nbr_ita = $out1

 FROM PS_EMPL_MATR_ITA M
 WHERE  M.HIRE_DT = &A.EFFDT
    AND M.EMPLID = &A.EMPLID
    AND M.EMPL_RCD = &A.EMPL_RCD

END-SELECT
end-procedure



Begin-procedure Get-Contract

BEGIN-SELECT

CD.REG_REGION

CO.CONTRACT_NUM
   let $Contract_num = &CO.CONTRACT_NUM
   do Get-Contract_type_desc

CO.CONTRACT_TYPE
   let $Contract_type = &CO.CONTRACT_TYPE
CO.DURATION_MONTH

  do Format-Number(&CO.DURATION_MONTH, $out, '999')
      !logical to leave mask with 2 levels of precision instead of the db
      !format definition of 12.6 for OFFER_AMT
  let $out = ltrim($out,'0')
!  let $out = ltrim($out,' ')
   let $Duration_month = $out

CO.LABOR_AGREEMENT
   do Get-Labor_Agreement-desc2
CO.EMPL_CTG
   do Get-Empl_ctg-desc2
CO.EMPL_CTG_L1
   do Get-Empl_ctg_l1-desc2
CO.EMPL_CTG_L2
   do Get-Empl_ctg_l2-desc2
CD.CONTRACT_BEGIN_DT
  let $Contract_begin_dt = ''
  if &CD.CONTRACT_BEGIN_DT <> ''
   move '1' to $MMLZero
   move '1' to $DDLZero
   move '1' to $Year4
   do Format-DateTime(&CD.CONTRACT_BEGIN_DT, $out1, {DEFMDY},'','')
   let $MonthCd1 =  {ps-substr}($out1, 1, 2)
   do Get-Month-Name ($MonthCd1, $MonthName1)
   let $Contract_begin_dt =  {ps-substr}($out1,4,2) || ' ' ||$MonthName1 || ' ' ||{ps-substr}($out1,7,4)
  end-if

CD.CONTRACT_END_DT
  let $Contract_end_dt = ''
  if &CD.CONTRACT_END_DT <> ''
   move '1' to $MMLZero
   move '1' to $DDLZero
   move '1' to $Year4
   do Format-DateTime(&CD.CONTRACT_END_DT, $out2, {DEFMDY},'','')
   let $MonthCd2 =  {ps-substr}($out2, 1, 2)
   do Get-Month-Name ($MonthCd2, $MonthName2)
   let $Contract_end_dt =  {ps-substr}($out2,4,2) || ' ' ||$MonthName2 || ' ' ||{ps-substr}($out2,7,4)
  end-if

  do Get-Probation

   FROM PS_WKF_CNT_TYPE CO, PS_CONTRACT_DATA CD
   WHERE CO.EMPLID = &A.EMPLID
     AND CD.EMPLID = &A.EMPLID
     AND CO.CONTRACT_NUM = &J.CONTRACT_NUM
     AND CD.CONTRACT_NUM = &J.CONTRACT_NUM
     AND CO.EFFDT = (SELECT MAX(CCO.EFFDT) FROM PS_WKF_CNT_TYPE CCO
                     WHERE CCO.EMPLID = &A.EMPLID
                       AND CCO.CONTRACT_NUM = &J.CONTRACT_NUM
                       AND CCO.EFFDT <= &A.EFFDT)
END-SELECT

end-procedure



begin-procedure Update-Print-Date

let $sql-statement = 'PER066IT.SQR,Update-Print-Date,Update,PS_EMPL_LTR_ITA'
begin-SQL On-Error=SQL-Error
UPDATE PS_EMPL_LTR_ITA
  SET   LETTER_PRINTED_DT = $AsOfToday
  WHERE LETTER_PRINTED_DT IS NULL
    AND PRINT_LETTER_ITA = 'Y'
    AND EMPLID = &A.EMPLID
    AND EMPL_RCD = &A.EMPL_RCD
    AND EFFDT = &A.EFFDT
    AND EFFSEQ = &A.EFFSEQ

end-SQL

end-procedure


begin-procedure Get-Employee-to-Process

    move '{IMPORTPREFIX}' to $FileName           !start a new report file

    do Get-prcsoutputdir
    if rtrim($prcsoutputdir,' ') <> ''
       move $prcsoutputdir to $Filename
    end-if

    concat $AppPrefix with $FileName
    concat '066IT' with $FileName
    concat '.' with $Filename
    concat $OutputFile with $Filename
    concat '{IMPORTSUFFIX}' with $Filename
    NEW-REPORT $Filename
    move 'LANG,SystemDate,Name,Line2,Line3,Line4,Line5,Line6,Jobcode,Loc,LabAgr,Ectg,Ectgl1,Ectgl2,Class,Matrnbr,C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,Freq,Cbegindt,Cenddt,Duration,Prob,C_type,C_num,Tectg,Tectgl1,Tectgl2'
         to $ioarea
    print $ioarea (1,1)
    NEXT-LISTING

BEGIN-SELECT

A.EMPLID
A.EMPL_RCD
A.EFFDT
A.EFFSEQ
A.PRINT_LETTER_ITA
A.LETTER_PRINTED_DT
  do Update-Print-Date
J.SETID_JOBCODE
  let $Setid_Jobcode = &J.SETID_JOBCODE
J.JOBCODE
  let $Jobcode = &J.JOBCODE
  do Get-Jobcode-desc
J.SETID_LOCATION
  let $Setid_Location = &J.SETID_LOCATION
J.LOCATION
  let $Location = &J.LOCATION
  do Get-Location-desc
J.SETID_LBR_AGRMNT
  let $Setid_Lbr_Agrmnt = &J.SETID_LBR_AGRMNT
J.LABOR_AGREEMENT
  let $Labor_Agreement = &J.LABOR_AGREEMENT
  do Get-Labor_Agreement-desc
J.EMPL_CTG
  let $Empl_ctg = &J.EMPL_CTG
  do Get-Empl_Ctg-desc
J.EMPL_CTG_L1
  let $Empl_ctg_l1 = &J.EMPL_CTG_L1
  do Get-Empl_Ctg_l1-desc
J.EMPL_CTG_L2
  let $Empl_ctg_l2 = &J.EMPL_CTG_L2
  do Get-Empl_ctg_l2-desc
J.COMP_FREQUENCY
  let $Comp_Frequency = &J.COMP_FREQUENCY
  do Get-Comp_Frequency-desc
J.CONTRACT_NUM

J.REG_REGION

J.EMPL_CLASS
  let $Empl_class = &J.EMPL_CLASS
  do Get-Empl_class-desc
  do Get-Names
  do Get-Addresses
  do Get-Compensation
  do Get-Contract
  do Get-Matricula

  print '"'                (1,1)
  print $curr_language_cd  ()
  print '","'              ()
  print $Current_Date      ()
  print '","'              ()
  let $Name = rtrim($Name,' ')
  print $Name              ()
  print '","'              ()
  print $AddrLine2         ()
  print '","'              ()
  print $AddrLine3         ()
  print '","'              ()
  print $AddrLine4         ()
  print '","'              ()
  print $AddrLine5         ()
  print '","'              ()
  print $AddrLine6         ()
  print '","'              ()
  let $Jobcode_descr = rtrim($Jobcode_descr,' ')
  print $Jobcode_descr     ()
  print '","'              ()
  let $Location_descr = rtrim($Location_descr,' ')
  print $Location_descr    ()

  print '","'              ()
  let $Labor_Agreement_descr = rtrim($Labor_Agreement_descr,' ')
  print $Labor_Agreement_descr     ()

  print '","'                      ()
  let $Empl_ctg_descr = rtrim($Empl_ctg_descr,' ')
  print $Empl_ctg_descr            ()

  print '","'                      ()
  let $Empl_ctg_l1_descr = rtrim($Empl_ctg_l1_descr,' ')
  print $Empl_ctg_l1_descr         ()

  print '","'                      ()
  let $Empl_ctg_l2_descr = rtrim($Empl_ctg_l2_descr,' ')
  print $Empl_ctg_l2_descr         ()

  print '","'              ()
  let $Empl_class_descr = rtrim($Empl_class_descr,' ')
  print $Empl_class_descr  ()

  print '","'              ()
  print $Matricula_nbr_ita ()
  print '","'              ()
  print $Comprate1         ()
  print '","'              ()
  print $Comprate2         ()
  print '","'              ()
  print $Comprate3         ()
  print '","'              ()
  print $Comprate4         ()
  print '","'              ()
  print $Comprate5         ()
  print '","'              ()
  print $Comprate6         ()
  print '","'              ()
  print $Comprate7         ()
  print '","'              ()
  print $Comprate8         ()
  print '","'              ()
  print $Comprate9         ()
  print '","'              ()
  print $Comprate10        ()

  print '","'              ()
  let $Comp_Frequency_descr = rtrim($Comp_Frequency_descr,' ')
  print $Comp_Frequency_descr   ()

  print '","'                   ()
  print $Contract_begin_dt      ()


  print '","'                   ()
  print $Contract_end_dt        ()


  print '","'                   ()
  print $Duration_month         ()

  print '","'                   ()
  print $Probation_dt           ()

  print '","'                   ()
  let $Contract_type_descr = rtrim($Contract_type_descr,' ')
  print $Contract_type_descr    ()


  print '","'                   ()
  let $Contract_num = rtrim($Contract_num,' ')
  print $Contract_num           ()


  print '","'              ()
  let $Target_empl_ctg_descr = rtrim($Target_empl_ctg_descr,' ')
  print $Target_empl_ctg_descr     ()

  print '","'              ()
  let $Target_empl_ctg_l1_descr = rtrim($Target_empl_ctg_l1_descr,' ')
  print $Target_empl_ctg_l1_descr     ()

  print '","'              ()
  let $Target_empl_ctg_l2_descr = rtrim($Target_empl_ctg_l2_descr,' ')
  print $Target_empl_ctg_l2_descr     ()


  print '"'                ()

  move '' to $Comprate1
  move '' to $Comprate2
  move '' to $Comprate3
  move '' to $Comprate4
  move '' to $Comprate5
  move '' to $Comprate6
  move '' to $Comprate7
  move '' to $Comprate8
  move '' to $Comprate9
  move '' to $Comprate10

  NEXT-LISTING


  FROM PS_EMPL_LTR_ITA A, PS_JOB J
  WHERE A.PRINT_LETTER_ITA = 'Y'
    AND A.LETTER_PRINTED_DT IS NULL
    AND A.EMPLID = J.EMPLID
    AND A.EMPL_RCD = J.EMPL_RCD
    AND A.EFFDT = J.EFFDT
    AND A.EFFSEQ = J.EFFSEQ
    AND J.COMPANY = &RUN_CNTL_PER066.COMPANY


END-SELECT

end-procedure


!**********************************
Begin-Procedure Report-Translation
!**********************************
! This is DUMMY procedure.
! Needed for the reference from getrplng.sqc.
End-Procedure

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'stdapi.sqc'    !Routines to update run status

#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'getcurnm.sqc'  !Get-Currency-Name procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Global address format
#Include 'getrplng.sqc'  !Get the report language
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#include 'getlogou.sqc'  !get current logoutputdir
!**************************** End Of Report ****************************

