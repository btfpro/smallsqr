!***********************************************************************
!  FGPY003:  Create Treasury Interface Files/Reports                   *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2012/05/04:18:56:02                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872522                                              !
!                                                                      *
! PYAP-Mod.  All changes marked thus.
! Modified for V8, to access Vendor Id, instead of Payee Name, as part *
! of the PY/AP integration.                                            *
!
!5/18/01 CRM  --  made changes to look up address for bonds from either
!                          dependent_benef or PERSON_ADDRESS
!
!
!
!***********************************************************************
#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

begin-setup

LOAD-LOOKUP
    NAME=LOAD_DED_TBL
    TABLE='PS_DEDUCTION_TBL LOADDED'
    ROWS=1000
    QUIET
#IFDEF MICROSOFT
    KEY='LOADDED.PLAN_TYPE+LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST+LOADDED.GVT_REPORTING_CD+LOADDED.SPCL_PROCESS'
#ELSE
#IFDEF SYBASE
    KEY='LOADDED.PLAN_TYPE+LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST+LOADDED.GVT_REPORTING_CD+LOADDED.SPCL_PROCESS'
#ELSE
    KEY='LOADDED.PLAN_TYPE||LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST||LOADDED.GVT_REPORTING_CD||LOADDED.SPCL_PROCESS'
#END-IF
#END-IF
#IFDEF SQLBASE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2UNIX
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF ORACLE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= SYSDATE)'
#END-IF
#IFDEF INFORMIX
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= TODAY)'
#END-IF
#IFDEF SYBASE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= GETDATE())'
#END-IF
#IFDEF MICROSOFT
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= GETDATE())'
#END-IF

LOAD-LOOKUP
    NAME=LOAD_GENL_TBL
    TABLE='PS_GENL_DED_TBL LOADGENL'
    KEY='LOADGENL.DEDCD'
    ROWS=1000
    QUIET
#IFDEF SYBASE
    RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG+LOADGENL.GVT_PYMNT_SUMM'
#ELSE
#IFDEF MICROSOFT
   RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG+LOADGENL.GVT_PYMNT_SUMM'
#ELSE
    RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG||LOADGENL.GVT_PYMNT_SUMM'
#END-IF
#END-IF
#IFDEF SQLBASE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2UNIX
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF ORACLE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= SYSDATE)'
#END-IF
#IFDEF INFORMIX
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= TODAY)'
#END-IF
#IFDEF SYBASE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= GETDATE())'
#END-IF
#IFDEF MICROSOFT
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= GETDATE())'
#END-IF

    declare-variable

        integer #bond_log_seq
        integer #seq
        integer #unit
        date    $temp_date
!        date    $check_pay_end_dt
!        date    $check_dt


    end-declare

end-setup

begin-report


    do Init-Report

    do retrieve-agency-info

    do set-julian-date

    do open-treasury-files

    if $output = 'Y'

        if $create_checks = 'Y' or
           $create_eft    = 'Y' or
           $create_venmis = 'Y'

            do create-totals-array

        end-if


       if $create_bonds = 'Y'

            do create-bond-array

            do load-bond-array

        end-if

        do generate-interface-files

        if $create_checks = 'Y' or
           $create_eft    = 'Y'

             do generate-distribution-transactions

        end-if

        if $create_checks = 'Y' or
           $create_venmis = 'Y'

            do generate-tax-transactions

        end-if

        do Commit-Transaction

        do close-treasury-files

        do update-ecs-schedules

        do update-pay-calendar

        do delete-run-control

        do Commit-Transaction

        if $create_eft = 'Y' and
           #eft_count > 0

            do sort-eft-transactions

        end-if

        if $create_venmis = 'Y' and
           #venmis_count > 0

            do sort-venmis-transactions

        end-if


        if $create_bonds = 'Y' and
           #bond_count > 0

            do sort-bond-records

        end-if

        if #bond_purchase_log_count > 0

            do insert-bond-purchase-records

            do Commit-Transaction

        end-if

        display ' '
        display 'For Pay Run ID     - '                  noline
        display $run_id                                  noline
        display ' '
        display '    88 Check Count               '      noline
        display #check_88_count 999,999                  noline
        display '                88 Check Format Total ' noline
        display #check_file_88_tot 999,999,999.99
        display '   152 Check Count               '      noline
        display #check_152_count 999,999                 noline
        display '               152 Check Format Total ' noline
        display #check_file_152_tot 999,999,999.99
        display '   192 Check Count               '      noline
        display #check_192_count 999,999                 noline
        display '               192 Check Format Total ' noline
        display #check_file_192_tot 999,999,999.99
        display '   200 Check Count - Line Code 8 '      noline
        display #check_200_8_count 999,999               noline
        display ' 200 Check - Line Code 8 Format Total ' noline
        display #check_file_200_8_tot 999,999,999.99
        display '   200 Check Count - Line Code 9 '      noline
        display  #check_200_9_count 999,999              noline
        display ' 200 Check - Line Code 9 Format Total ' noline
        display #check_file_200_9_tot 999,999,999.99
        display ' Total Check Count               '      noline
        display #check_count 999,999                     noline
        display ' Total Vendor Check Count        '      noline
        display #venchk_count 999,999                    noline
        display '                     Check File Total ' noline
        display #check_file_tot 999,999,999.99           noline
        display '              Vendor Check File Total ' noline
        display #venchk_file_tot 999,999,999.99
        display ' '
        display '         EFT Count               '      noline
        display #eft_count 999,999                       noline
        display '                       EFT File Total ' noline
        display #eft_file_tot 999,999,999.99
        display '      VENMIS Count               '      noline
        display #venmis_count 999,999                    noline
        display '                    VENMIS File Total ' noline
        display #venmis_file_tot 999,999,999.99
        display '        Bond Count               '      noline
        display #bond_count 999,999                      noline
        display '                      Bond File Total ' noline
        display #bond_file_tot 999,999,999.99

    end-if

    do Stdapi-Term

end-report

begin-heading 9
#Include 'stdhdg03.sqc'
   print '                 '        (4,1,17)
   print 'Payroll Office #:'        (5,1,17)
   print $agency_loc_code           (5,+1,8)
   print 'Date Payroll Paid:'       (6,1,18)
   print  &CAL1.CHECK_DT           (6,+1,12)
   print 'Payroll Period Ending'    (7,1,22)
   print &ONCHK.PAY_END_DT           (7,+1,12)
   print 'Agency '                  (9,1,7)   underline
   print 'Schedule Number'          (9,+2,15) underline
   print 'Transactions in Schedule' (9,+2,24) underline
   print 'Transaction Count'        (9,+2,17) underline
   print 'Schedule Totals'          (9,+2,15) underline

end-heading

!**************************
begin-procedure Init-Report
!**************************

  move 'FGPY003' to $ReportID
  move 'Treasury Interface and Federal Reserve Bond Summary Report' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Stdapi-Init

  if $Prcs_Process_Instance = ''

    input $run_id maxlen=3 'Enter Payroll Run ID' type=char
    uppercase $run_id

  else

    do select-parameters
    do Get-FGPY003-Parameters

  end-if

end-procedure       !Init-Report

!***********************************
begin-procedure retrieve-agency-info
!***********************************


BEGIN-SELECT

INTFC.COMPANY
INTFC.GVT_DESCR70
INTFC.CONTACT_PHONE
INTFC.GVT_AGY_LOC_CODE
INTFC.GVT_AGY_ID
INTFC.GVT_AGY_CHECK_ID
INTFC.GVT_FRB_COMPANY_ID
INTFC.GVT_FRB_LOC_ID
INTFC.GVT_FRB_ACCT_NO
INTFC.GVT_FRB_ACC_BRANCH
INTFC.GVT_FRB_DIST_DESIG
INTFC.GVT_ADDRESS1
INTFC.GVT_ADDRESS_CITY
INTFC.GVT_ADDRESS_STATE
INTFC.GVT_ADDRESS_ZIP

    let $company           = upper(&INTFC.COMPANY)
    let $agency_descr      = upper(&INTFC.GVT_DESCR70)
    let $agency_phone      = upper(&INTFC.CONTACT_PHONE)
    let $agency_loc_code   = upper(&INTFC.GVT_AGY_LOC_CODE)
    let $agency_id         = upper(&INTFC.GVT_AGY_ID)
    let $agency_check_id   = upper(&INTFC.GVT_AGY_CHECK_ID)
    let $frb_company_id    = upper(&INTFC.GVT_FRB_COMPANY_ID)
    let $frb_location_id   = upper(&INTFC.GVT_FRB_LOC_ID)
    let $frb_acct_no       = upper(to_char(&INTFC.GVT_FRB_ACCT_NO))
    let $frb_acct_branch   = upper(to_char(&INTFC.GVT_FRB_ACC_BRANCH))
    let $frb_dist_desig    = upper(to_char(&INTFC.GVT_FRB_DIST_DESIG))
    let $agency_address1   = upper(&INTFC.GVT_ADDRESS1)
    let $agency_addr_city  = upper(&INTFC.GVT_ADDRESS_CITY)
    let $agency_addr_state = upper(&INTFC.GVT_ADDRESS_STATE)
    let $zip_5             = substr(&INTFC.GVT_ADDRESS_ZIP,1,5)
    let $zip_4             = substr(&INTFC.GVT_ADDRESS_ZIP,7,4)
    let $agency_zip_code   = $zip_5||$zip_4

FROM  PS_GVT_INTRFC_INFO INTFC

WHERE INTFC.COMPANY = (SELECT DISTINCT CAL3.COMPANY
                       FROM  PS_PAY_CALENDAR CAL3
                       WHERE CAL3.RUN_ID = $run_id)
AND   INTFC.EFFDT   = (SELECT MAX(INTFC1.EFFDT)
                       FROM PS_GVT_INTRFC_INFO INTFC1
                       WHERE INTFC1.COMPANY = INTFC.COMPANY
                       AND   INTFC1.EFFDT  <= $AsOfToday)

END-SELECT

end-procedure       !retrieve-agency-info

!******************************
begin-procedure set-julian-date
!******************************

let $work_date = datetostr(datenow(),'MMDDYYYY')

let $jul_ddd = datetostr(datenow(),'DDD')

let $jul_date = substr($work_date, 7, 2)||$jul_ddd

end-procedure       !set-julian-date

!**********************************
begin-procedure open-treasury-files
!**********************************

let $create_checks  = 'N'
let $create_eft     = 'N'
let $create_venmis  = 'N'
let $create_venchk  = 'N'
let $create_bonds   = 'N'
let $output         = 'N'

!****** Open Check File
if $check_schedule <> ''

    if $check_ext = ''

        let $check_output_file = '{IMPORTPREFIX}' || $check_file

    else

        let $check_output_file = '{IMPORTPREFIX}' || $check_file || '.' || $check_ext

    end-if

    open $check_output_file as 1 for-writing record=200:vary

    let $output        = 'Y'
    let $create_checks = 'Y'

end-if

!****** Open EFT File

if $eft_schedule <> ''

    if $eft_ext = ''

        let $eft_output_file = '{IMPORTPREFIX}' || $eft_file

    else

        let $eft_output_file = '{IMPORTPREFIX}' || $eft_file || '.' || $eft_ext

    end-if

    open $eft_output_file as 2 for-writing record=160:fixed

    let $output     = 'Y'
    let $create_eft = 'Y'

end-if

!****** Open VENMIS File (EFT)

if $venmis_schedule <> ''

    if $venmis_ext = ''

        let $venmis_output_file = '{IMPORTPREFIX}' || $venmis_file

    else

        let $venmis_output_file = '{IMPORTPREFIX}' || $venmis_file || '.' || $venmis_ext

    end-if

    open $venmis_output_file as 3 for-writing record=160:fixed

    let $output        = 'Y'
    let $create_venmis = 'Y'
    let $create_eft = 'Y'

end-if

!****** Open VENMIS File (CHECK)

if $venchk_schedule <> ''

    if $venchk_ext = ''

        let $venchk_output_file = '{IMPORTPREFIX}' || $venchk_file

    else

        let $venchk_output_file = '{IMPORTPREFIX}' || $venchk_file || '.' || $venchk_ext

    end-if

    open $venchk_output_file as 7 for-writing record=200:fixed

    let $output        = 'Y'
    let $create_venchk = 'Y'
    let $create_checks = 'Y'
    let $venchk_hdr_done = 'N'

end-if


!****** Open Bond File
if $bond_creation = 'Y'

    if $bond_ext = ''

        let $bond_output_file = '{IMPORTPREFIX}' || $bond_file

    else

        let $bond_output_file = '{IMPORTPREFIX}' || $bond_file || '.' || $bond_ext

    end-if

    open $bond_output_file as 4 for-writing record=320:fixed

    let $output       = 'Y'
    let $create_bonds = 'Y'

end-if


if $create_bonds = 'Y'

  let $bond_date_file = '{IMPORTPREFIX}' || 'bonddate'

  open $bond_date_file as 5 for-writing record = 36:fixed

end-if

end-procedure       !open-treasury-files

!**********************************
begin-procedure create-totals-array
!**********************************

if $create_checks = 'Y' or
   $create_eft    = 'Y'

    do determine-total-ded-distributions

    if &DIST_COUNT > 9000

        display ' '
        display 'This process has been halted for the following reason:'
        display ' '
        display 'The maximum number of distribution codes exceeds 9000.'
        display 'The SQR FGPY003  must be modified so that the array'
        display 'DISTRIBUTION_ARRAY has a size greater than ' noline
        display &DIST_COUNT 999,999

        stop

    else

        CREATE-ARRAY NAME=DISTRIBUTION_ARRAY
                     SIZE=9000
                     FIELD=DEDCD_DIST_CD:CHAR
                     FIELD=REPORTING_CD:CHAR
                     FIELD=PAYMENT_ROUTING:CHAR
                     FIELD=PAYMENT_SUMMARY:CHAR
                     FIELD=COUNT:NUMBER
                     FIELD=AMOUNT:NUMBER
                     FIELD=PAYEE_NAME:CHAR
                     FIELD=PAYEE_ID:CHAR
                     FIELD=PAYMENT_METHOD:CHAR
                     FIELD=CHECK_NAME:CHAR
                     FIELD=ADDRESS1:CHAR
                     FIELD=ADDRESS2:CHAR
                     FIELD=CITY:CHAR
                     FIELD=STATE:CHAR
                     FIELD=ZIP:CHAR
                     FIELD=TRANSIT_NO:CHAR
                     FIELD=ACCOUNT_NO:CHAR
                     FIELD=ACCOUNT_TYPE:CHAR
                     FIELD=REMIT_FREQUENCY:CHAR

        do pre-load-distribution-array

    end-if

end-if

if $create_checks = 'Y' or
   $create_venmis = 'Y'

    do determine-total-tax-distributions

    if &TAX_COUNT > 1000

        display ' '
        display 'This process has been halted for the following reason:'
        display ' '
        display 'The maximum number of tax distribution combinations exceeds 1000.'
        display 'The SQR FGPY003 must be modified to so that the array'
        display 'TAX_ARRAY has a size greater than ' noline
        display &TAX_COUNT 999,999

        stop

    else

        CREATE-ARRAY NAME=TAX_ARRAY
                     SIZE=1000
                     FIELD=COMPANY_STATE_LOCALITY:CHAR
                     FIELD=COUNT:NUMBER
                     FIELD=AMOUNT:NUMBER

    end-if

end-if

end-procedure       !create-totals-array

!************************************************
begin-procedure determine-total-ded-distributions
!************************************************

BEGIN-SELECT

COUNT(*) &DIST_COUNT

FROM PS_GVT_DED_DIST DIST_CNT

WHERE DIST_CNT.EFFDT = (SELECT MAX(DIST_CNT1.EFFDT)
                        FROM  PS_GVT_DED_DIST DIST_CNT1
                        WHERE DIST_CNT1.DEDCD           = DIST_CNT.DEDCD
                        AND   DIST_CNT1.GVT_DED_DIST_CD = DIST_CNT.GVT_DED_DIST_CD
                        AND   DIST_CNT1.EFFDT          <= $AsOfToday)

END-SELECT

end-procedure       !determine-total-ded-distributions

!******************************************
begin-procedure pre-load-distribution-array
!******************************************

let #i = 0

BEGIN-SELECT

DIST_ADDR.DEDCD,
DIST_ADDR.GVT_DED_DIST_CD,
DIST_ADDR.GVT_PYMNT_METHOD,
DIST_ADDR.GVT_PAYEE_ID_NO,
DIST_ADDR.GVT_PAYEE_NAME,
DIST_ADDR.GVT_CHK_NAME,
DIST_ADDR.GVT_ADDRESS1,
DIST_ADDR.GVT_ADDRESS2,
DIST_ADDR.GVT_ADDRESS_CITY,
DIST_ADDR.GVT_ADDRESS_STATE,
DIST_ADDR.GVT_ADDRESS_ZIP,
DIST_ADDR.BANK_CD,
DIST_ADDR.ACCOUNT_NUM,
DIST_ADDR.ACCOUNT_TYPE,
DIST_ADDR.REMIT_FREQUENCY

    let $load_ded_key = '00'||&DIST_ADDR.DEDCD

    LOOKUP LOAD_DED_TBL $load_ded_key $load_ded_return

    let $reporting_cd = substr($load_ded_return,2,2)

    LOOKUP LOAD_GENL_TBL &DIST_ADDR.DEDCD $load_genl_return

    let $payment_routing = substr($load_genl_return,1,1)
    let $payment_summary = substr($load_genl_return,2,1)

    let $pre_load_dedcd_dist = &DIST_ADDR.DEDCD||&DIST_ADDR.GVT_DED_DIST_CD

    put $pre_load_dedcd_dist         into DISTRIBUTION_ARRAY(#i) DEDCD_DIST_CD
    put $reporting_cd                into DISTRIBUTION_ARRAY(#i) REPORTING_CD
    put $payment_routing             into DISTRIBUTION_ARRAY(#i) PAYMENT_ROUTING
    put $payment_summary             into DISTRIBUTION_ARRAY(#i) PAYMENT_SUMMARY
    put &DIST_ADDR.GVT_PYMNT_METHOD  into DISTRIBUTION_ARRAY(#i) PAYMENT_METHOD
    put &DIST_ADDR.GVT_PAYEE_ID_NO   into DISTRIBUTION_ARRAY(#i) PAYEE_ID
    put &DIST_ADDR.GVT_PAYEE_NAME    into DISTRIBUTION_ARRAY(#i) PAYEE_NAME
    put &DIST_ADDR.GVT_CHK_NAME      into DISTRIBUTION_ARRAY(#i) CHECK_NAME
    put &DIST_ADDR.GVT_ADDRESS1      into DISTRIBUTION_ARRAY(#i) ADDRESS1
    put &DIST_ADDR.GVT_ADDRESS2      into DISTRIBUTION_ARRAY(#i) ADDRESS2
    put &DIST_ADDR.GVT_ADDRESS_CITY  into DISTRIBUTION_ARRAY(#i) CITY
    put &DIST_ADDR.GVT_ADDRESS_STATE into DISTRIBUTION_ARRAY(#i) STATE
    put &DIST_ADDR.GVT_ADDRESS_ZIP   into DISTRIBUTION_ARRAY(#i) ZIP
    put &DIST_ADDR.BANK_CD           into DISTRIBUTION_ARRAY(#i) TRANSIT_NO
    put &DIST_ADDR.ACCOUNT_NUM       into DISTRIBUTION_ARRAY(#i) ACCOUNT_NO
    put &DIST_ADDR.ACCOUNT_TYPE      into DISTRIBUTION_ARRAY(#i) ACCOUNT_TYPE
    put &DIST_ADDR.REMIT_FREQUENCY   into DISTRIBUTION_ARRAY(#i) REMIT_FREQUENCY

    let #i = #i + 1

FROM  PS_GVT_DED_DIST DIST_ADDR

WHERE DIST_ADDR.EFF_STATUS = 'A'
AND   DIST_ADDR.EFFDT      = (SELECT MAX(DIST_ADDR1.EFFDT)
                         FROM  PS_GVT_DED_DIST DIST_ADDR1
                         WHERE DIST_ADDR1.DEDCD           = DIST_ADDR.DEDCD
                         AND   DIST_ADDR1.GVT_DED_DIST_CD = DIST_ADDR.GVT_DED_DIST_CD
                         AND   DIST_ADDR1.EFFDT          <= $AsOfToday)

ORDER BY DIST_ADDR.DEDCD, DIST_ADDR.GVT_DED_DIST_CD

END-SELECT

end-procedure       !pre-load-distribution-array

!************************************************
begin-procedure determine-total-tax-distributions
!************************************************

BEGIN-SELECT

COUNT(*) &TAX_COUNT


FROM PS_GVT_TAX_ROUTING TAX_CNT

WHERE TAX_CNT.COMPANY = $company
AND   TAX_CNT.EFF_STATUS = 'A'
AND   TAX_CNT.EFFDT   = (SELECT MAX(TAX_CNT1.EFFDT)
                         FROM  PS_GVT_TAX_ROUTING TAX_CNT1
                         WHERE TAX_CNT1.COMPANY         = TAX_CNT.COMPANY
                         AND   TAX_CNT1.STATE           = TAX_CNT.STATE
                         AND   TAX_CNT1.LOCALITY        = TAX_CNT.LOCALITY
                         AND   TAX_CNT1.EFFDT          <= $AsOfToday)

END-SELECT

end-procedure       !determine-total-tax-distributions

!********************************
begin-procedure create-bond-array
!********************************

do determine-total-bond-ids

if &BOND_ARRAY_COUNT > 25

    display ' '
    display 'This process has been halted for the following reason:'
    display ' '
    display 'The maximum number of Bond IDs exceeds 25.'
    display 'The SQR FGPY003 must be modified to so that the array'
    display 'BOND_ARRAY has a size greater than ' noline
    display &BOND_ARRAY_COUNT 999,999

    stop

else

    CREATE-ARRAY NAME=BOND_ARRAY
                 SIZE=25
                 FIELD=BOND_ID:CHAR
                 FIELD=SERIES:CHAR
                 FIELD=DENOM:CHAR
                 FIELD=PURCHASE_AMT:NUMBER
                 FIELD=BOND_DATE_AMT:NUMBER
                 FIELD=COUNT:NUMBER
                 FIELD=AMOUNT:NUMBER

    do load-bond-array

end-if

end-procedure       !create-bond-array

!***************************************
begin-procedure determine-total-bond-ids
!***************************************

BEGIN-SELECT

COUNT(*) &BOND_ARRAY_COUNT

FROM PS_BOND_TBL BOND_CNT

WHERE BOND_CNT.EFF_STATUS = 'A'
AND BOND_CNT.EFFDT = (SELECT MAX(BOND_CNT1.EFFDT)
                        FROM   PS_BOND_TBL BOND_CNT1
                        WHERE  BOND_CNT1.BOND_ID    = BOND_CNT.BOND_ID
                        AND    BOND_CNT1.EFFDT     <= $AsOfToday)

END-SELECT

end-procedure       !determine-total-bond-ids

!******************************
begin-procedure load-bond-array
!******************************

let #i = 0

BEGIN-SELECT

BONDDEF.BOND_ID
BONDDEF.BOND_PURCH_AMT
BONDDEF.BOND_RDMPT_AMT
BONDDEF.GVT_BOND_DATE_AMT


    if &BONDDEF.BOND_PURCH_AMT = &BONDDEF.BOND_RDMPT_AMT

        let $series = 'I'

    else

        let $series = 'EE'

    end-if

    move &BONDDEF.BOND_RDMPT_AMT to $denom 09999.99

    evaluate $denom

        when = '00050.00'

            let $bond_denom = '2'

        when = '00075.00'

            let $bond_denom = '3'

        when = '00100.00'

            let $bond_denom = '4'

        when = '00200.00'

            let $bond_denom = '5'

        when = '00500.00'

            let $bond_denom = '6'

        when = '01000.00'

            let $bond_denom = '7'

        when = '05000.00'

            let $bond_denom = '8'

        when = '10000.00'

            let $bond_denom = '9'

    end-evaluate


    put &BONDDEF.BOND_ID           into BOND_ARRAY(#i) BOND_ID
    put &BONDDEF.BOND_PURCH_AMT    into BOND_ARRAY(#i) PURCHASE_AMT
    put &BONDDEF.GVT_BOND_DATE_AMT into BOND_ARRAY(#i) BOND_DATE_AMT
    put $series                    into BOND_ARRAY(#i) SERIES
    put $bond_denom                into BOND_ARRAY(#i) DENOM


    let #i = #i + 1

FROM PS_BOND_TBL BONDDEF

WHERE BONDDEF.EFFDT = (SELECT MAX(BONDDEF1.EFFDT)
                       FROM   PS_BOND_TBL BONDDEF1
                       WHERE  BONDDEF1.BOND_ID    = BONDDEF.BOND_ID
                       AND    BONDDEF1.EFF_STATUS = 'A'
                       AND    BONDDEF1.EFFDT     <= $AsOfToday)

END-SELECT

end-procedure       !load-bond-array

!***************************************
begin-procedure generate-interface-files
!***************************************

do process-on-cycles

if $off_cycle_net = 'Y' or
   $off_cycle_ded = 'Y' AND
   ($create_venmis = 'Y' or
    $create_checks = 'Y')

    do process-off-cycles

end-if

end-procedure       !generate-interface-files

!********************************
begin-procedure process-on-cycles
!********************************
display ' '
display 'Processing On Cycle Payments for Run ID - ' noline
display $run_id

BEGIN-SELECT

ONCHK.COMPANY
ONCHK.PAYGROUP
ONCHK.PAY_END_DT
ONCHK.OFF_CYCLE
ONCHK.PAGE_NUM
ONCHK.LINE_NUM
ONCHK.SEPCHK
ONCHK.EMPLID
ONCHK.EMPL_RCD
ONCHK.PAYCHECK_NBR
ONCHK.FORM_ID
ONCHK.SSN
ONCHK.NET_PAY
CAL1.CHECK_DT
ONCHK.PAYCHECK_OPTION
ONCHK.PAYCHECK_NAME
ONCHK.ADDRESS1
ONCHK.ADDRESS2
ONCHK.ADDRESS3
ONCHK.ADDRESS4
ONCHK.CITY
ONCHK.STATE
ONCHK.POSTAL
ONCHK.GVT_SCHEDULE_NO
CAL1.PAY_PDS_PER_YEAR


    do reset-check-variables


    let $check_company       = rtrim(&ONCHK.COMPANY,' ')
    let $check_paygroup      = rtrim(&ONCHK.PAYGROUP,' ')
    let $check_pay_end_dt    = &ONCHK.PAY_END_DT
    let $check_off_cycle     = rtrim(&ONCHK.OFF_CYCLE,' ')
    let #check_page_nbr      = &ONCHK.PAGE_NUM
    let #check_line_nbr      = &ONCHK.LINE_NUM
    let #check_sepchk        = &ONCHK.SEPCHK
    let $check_emplid        = rtrim(&ONCHK.EMPLID,' ')
    let #check_empl_rcd_nbr  = &ONCHK.EMPL_RCD
    let $check_ssn           = rtrim(&ONCHK.SSN,' ')
    let $check_dt            = &CAL1.CHECK_DT
    let $check_paycheck_name = rtrim(&ONCHK.PAYCHECK_NAME,' ')
    let #check_net_pay       = &ONCHK.NET_PAY
    let $check_option        = rtrim(&ONCHK.PAYCHECK_OPTION,' ')
    let $check_address1      = rtrim(&ONCHK.ADDRESS1,' ')
    let $check_address2      = rtrim(&ONCHK.ADDRESS2,' ')
    let $check_postal        = rtrim(&ONCHK.POSTAL,' ')
    let $check_city          = rtrim(&ONCHK.CITY,' ')
    let $check_state         = rtrim(&ONCHK.STATE,' ')
    let $check_gvt_schedule  = rtrim(&ONCHK.GVT_SCHEDULE_NO,' ')

    do process-net

    do process-deductions

    if $create_venmis = 'Y' or
       $create_checks = 'Y'

        do process-taxes

    end-if



FROM PS_PAY_CHECK ONCHK,
     PS_PAY_CALENDAR CAL1

WHERE CAL1.RUN_ID          = $run_id
AND   CAL1.GVT_TRES_RUN    = 'N'
AND   CAL1.PAY_CONFIRM_RUN = 'Y'
AND   ONCHK.COMPANY        = CAL1.COMPANY
AND   ONCHK.PAYGROUP       = CAL1.PAYGROUP
AND   ONCHK.PAY_END_DT     = CAL1.PAY_END_DT
AND   ONCHK.OFF_CYCLE      = 'N'
AND   (ONCHK.GVT_SCHEDULE_NO IS NULL
OR     ONCHK.GVT_SCHEDULE_NO = ' ')


END-SELECT

let $control_end_date = datetostr(&ONCHK.PAY_END_DT,'MMDDYYYY')

end-procedure       !process-on-cycles

!*********************************
begin-procedure process-off-cycles
!*********************************

display ' '
display 'Processing Off Cycle Payments'

BEGIN-SELECT

OFFCHK.COMPANY
OFFCHK.PAYGROUP
OFFCHK.PAY_END_DT
OFFCHK.OFF_CYCLE
OFFCHK.PAGE_NUM
OFFCHK.LINE_NUM
OFFCHK.SEPCHK
OFFCHK.EMPLID
OFFCHK.EMPL_RCD
OFFCHK.PAYCHECK_NBR
OFFCHK.FORM_ID
OFFCHK.SSN
OFFCHK.NET_PAY
CAL2.CHECK_DT
OFFCHK.PAYCHECK_OPTION
OFFCHK.PAYCHECK_NAME
OFFCHK.ADDRESS1
OFFCHK.ADDRESS2
OFFCHK.ADDRESS3
OFFCHK.ADDRESS4
OFFCHK.CITY
OFFCHK.STATE
OFFCHK.POSTAL
OFFCHK.GVT_SCHEDULE_NO

    do reset-check-variables

    let $check_company       = rtrim(&OFFCHK.COMPANY,' ')
    let $check_paygroup      = rtrim(&OFFCHK.PAYGROUP,' ')
    let $check_pay_end_dt    = &OFFCHK.PAY_END_DT
    let $check_off_cycle     = rtrim(&OFFCHK.OFF_CYCLE,' ')
    let #check_page_nbr      = &OFFCHK.PAGE_NUM
    let #check_line_nbr      = &OFFCHK.LINE_NUM
    let #check_sepchk        = &OFFCHK.SEPCHK
    let $check_emplid        = rtrim(&OFFCHK.EMPLID,' ')
    let #check_empl_rcd_nbr  = &OFFCHK.EMPL_RCD
    let $check_ssn           = rtrim(&OFFCHK.SSN,' ')
    let $check_dt            = &CAL2.CHECK_DT
    let $check_paycheck_name = rtrim(&OFFCHK.PAYCHECK_NAME,' ')
    let #check_net_pay       = &OFFCHK.NET_PAY
    let $check_option        = rtrim(&OFFCHK.PAYCHECK_OPTION,' ')
    let $check_address1      = rtrim(&OFFCHK.ADDRESS1,' ')
    let $check_address2      = rtrim(&OFFCHK.ADDRESS2,' ')
    let $check_postal        = rtrim(&OFFCHK.POSTAL,' ')
    let $check_city          = rtrim(&OFFCHK.CITY,' ')
    let $check_state         = rtrim(&OFFCHK.STATE,' ')
    let $check_gvt_schedule  = rtrim(&OFFCHK.GVT_SCHEDULE_NO,' ')


    if $off_cycle_net = 'Y'

        if isblank(&OFFCHK.GVT_SCHEDULE_NO) or
           isnull(&OFFCHK.GVT_SCHEDULE_NO)

            do process-net

            do update-off-cycle-check-schedule

        end-if

        if $check_date = ''

            let $save_check_date = &CAL2.CHECK_DT
            let $work_check_date = datetostr(&CAL2.CHECK_DT,'MMDDYYYY')

        end-if

    end-if

    if $off_cycle_ded = 'Y'

        do process-deductions

    end-if

    if $create_venmis = 'Y' or
       $create_checks = 'Y'

        do process-taxes

    end-if


FROM PS_PAY_CHECK OFFCHK,
     PS_PAY_CALENDAR CAL2

WHERE CAL2.RUN_ID            = $run_id
AND   CAL2.GVT_TRES_RUN      = 'N'
AND   CAL2.PAY_CONFIRM_RUN   = 'Y'
AND   OFFCHK.COMPANY         = CAL2.COMPANY
AND   OFFCHK.PAYGROUP        = CAL2.PAYGROUP
AND   OFFCHK.PAY_END_DT     <= CAL2.PAY_END_DT
AND   OFFCHK.OFF_CYCLE       = 'Y'
AND   OFFCHK.PAYCHECK_STATUS IN ('F','R')
AND   (OFFCHK.GVT_SCHEDULE_NO IS NULL
OR     OFFCHK.GVT_SCHEDULE_NO = ' ')
END-SELECT

end-procedure       !process-off-cycles

!************************************
begin-procedure reset-check-variables
!************************************

let $check_company       = ''
let $check_paygroup      = ''
let $check_pay_end_dt    = ''
let $check_off_cycle     = ''
let #check_page_nbr      = 0
let #check_line_nbr      = 0
let #check_sepchk        = 0
let $check_emplid        = ''
let #check_empl_rcd_nbr  = 0
let $check_ssn           = ''
let $check_dt            = ''
let $check_paycheck_name = ''
let #check_net_pay       = 0
let $check_option        = ''
let $check_address1      = ''
let $check_address2      = ''
let $check_postal        = ''
let $check_city          = ''
let $check_state         = ''
let $check_gvt_schedule  = ''

end-procedure       !reset-check-variables

!**************************
begin-procedure process-net
!**************************

let $processing = 'net'

if $check_option <> 'R'

    if ($check_option = '&' or
        $check_option = 'A')

        do process-pay-distribution

    else

        do determine-check-format

    end-if

end-if

end-procedure       !process-net

!**********************************************
begin-procedure update-off-cycle-check-schedule
!**********************************************

let $off_cycle_schedule = ''

if ($check_option  = '&' or
    $check_option = 'A') and
    $eft_schedule <> ''

    let $off_cycle_schedule = $eft_schedule

else

   if $check_schedule <> ''

       let $off_cycle_schedule = $check_schedule

   end-if

end-if

if $off_cycle_schedule <> ''

    BEGIN-SQL

        UPDATE PS_PAY_CHECK SET GVT_SCHEDULE_NO = $off_cycle_schedule

        WHERE  COMPANY    = $check_company
        AND    PAYGROUP   = $check_paygroup
        AND    PAY_END_DT = $check_pay_end_dt
        AND    OFF_CYCLE  = $check_off_cycle
        AND    PAGE_NUM   = #check_page_nbr
        AND    LINE_NUM   = #check_line_nbr
        AND    SEPCHK     = #check_sepchk

    END-SQL

end-if

end-procedure       !update-off-cycle-check-schedule

!***************************************
begin-procedure process-pay-distribution
!***************************************

BEGIN-SELECT

DIST.PRIORITY
DIST.ACCOUNT_TYPE
DIST.ACCOUNT_NUM
DIST.BANK_CD
DIST.DEPOSIT_AMOUNT

    if $create_eft = 'Y'

        do format-eft

    end-if

FROM PS_PAY_DISTRIBUTN DIST

WHERE DIST.COMPANY      = $check_company
AND   DIST.PAYGROUP     = $check_paygroup
AND   DIST.PAY_END_DT   = $check_pay_end_dt
AND   DIST.OFF_CYCLE    = $check_off_cycle
AND   DIST.PAGE_NUM     = #check_page_nbr
AND   DIST.LINE_NUM     = #check_line_nbr
AND   DIST.SEPCHK       = #check_sepchk
AND   DIST.ACCOUNT_TYPE <> '$'

END-SELECT

end-procedure       !process-pay-distribution

!*************************************
begin-procedure determine-check-format
!*************************************

if $create_checks = 'Y'

    let #check_count = #check_88_count + #check_152_count + #check_192_count
    let #venchk_count = #check_200_count

    if #check_count = 0 and $check_schedule <> ''


        do write-check-header

    end-if

    if $venchk_schedule <> ''
      if #venchk_count = 0 and
         $venchk_hdr_done = 'N'

        do write-vendor-check-header

      end-if
    end-if

    evaluate $processing

    when = 'net'

        if #check_sepchk  = 9

            do format-88-check

        else

            if isblank($check_address1)

                do format-88-check

            else

                if isblank($check_address2)

                    do format-152-check

                else

                    do format-192-check

                end-if

            end-if

        end-if
        BREAK

    when = 'deduct'
    when = 'garnish'
    when = 'dist'

        do format-200-check

        BREAK

    end-evaluate

end-if

end-procedure       !determine-check-format

!*********************************
begin-procedure process-deductions
!*********************************



BEGIN-SELECT

DED.PLAN_TYPE
DED.BENEFIT_PLAN
DED.DEDCD
DED.DED_CLASS
DED.DED_SLSTX_CLASS
DED.DED_CUR

    let $last_deduction_routed  = ''
    let $deduction_plan_type    = &DED.PLAN_TYPE
    let $deduction_benefit_plan = &DED.BENEFIT_PLAN
    let $deduction_code         = &DED.DEDCD
    let $deduction_class        = &DED.DED_CLASS
    let $deduction_slstx_class  = &DED.DED_SLSTX_CLASS

    let $load_ded_key = &DED.PLAN_TYPE||&DED.DEDCD

    LOOKUP LOAD_DED_TBL $load_ded_key $load_ded_return

    let $dist_dest    = substr($load_ded_return,1,1)
    let $reporting_cd = substr($load_ded_return,2,2)
    let $spcl_process = substr($load_ded_return,4,1)

    Evaluate $spcl_process

    When = 'G'
        let $garn_process = 'Y'
        let $bond_process = 'N'
    break

    When = 'B'
        let $garn_process = 'N'
        let $bond_process = 'Y'
    break

    When = 'U'
        let $garn_process = 'N'
        let $bond_process = 'N'
    break

    when-other
        let $garn_process = 'N'
        let $bond_process = 'N'
   End-Evaluate

    if $dist_dest = 'T'

        if ($create_checks = 'Y'  or
            $create_eft    = 'Y') and
           ($bond_process  = 'N'  and
            $garn_process  = 'N'  and
           &DED.PLAN_TYPE = '00')

          let $processing = 'deduct'

          do determine-deduction-distribution

        end-if


        if $create_bonds = 'Y' and
           $bond_process = 'Y' and
           &DED.DED_CUR > 0

            let $processing = 'bonds'

            do process-bonds

        end-if

        if ($create_checks = 'Y' or
            $create_eft = 'Y') and
           $garn_process  = 'Y' and
           &DED.DED_CUR > 0

          let $processing = 'garnish'

          do process-garnishments

        end-if

    end-if

FROM PS_PAY_DEDUCTION DED

WHERE DED.COMPANY    = $check_company
AND   DED.PAYGROUP   = $check_paygroup
AND   DED.PAY_END_DT = $check_pay_end_dt
AND   DED.OFF_CYCLE  = $check_off_cycle
AND   DED.PAGE_NUM   = #check_page_nbr
AND   DED.LINE_NUM   = #check_line_nbr
AND   DED.SEPCHK     = #check_sepchk
AND   (DED.GVT_SCHEDULE_NO IS NULL
OR     DED.GVT_SCHEDULE_NO = ' ')

END-SELECT

let $last_deduction_routed  = ''

end-procedure       !process-deductions

!********************************************
begin-procedure update-off-cycle-ded-schedule
!********************************************

let $off_cycle_schedule = ''

evaluate $processing

    when = 'deduct'

        if $last_deduction_routed = 'E' and
           $venmis_schedule <> ''

            let $off_cycle_schedule = $venmis_schedule

        else

           if $last_deduction_routed = 'C' and
              $venchk_schedule <> ''

               let $off_cycle_schedule = $venchk_schedule

           end-if

        end-if
        if $check_off_cycle = 'Y'
            do update-pay-deduction
        end-if
        BREAK

    when = 'tax'

        if $last_deduction_routed = 'E' and
           $venmis_schedule <> ''

            let $off_cycle_schedule = $venmis_schedule

        else

           if $last_deduction_routed = 'C' and
              $venchk_schedule <> ''

               let $off_cycle_schedule = $venchk_schedule

           end-if

        end-if
        if $check_off_cycle = 'Y'
            do update-pay-tax
        end-if
        BREAK

    when = 'bonds'

        if $check_off_cycle = 'Y'
            let $off_cycle_schedule = 'BOND - '||$run_id
            do update-pay-deduction
        end-if
        BREAK

    when = 'garnish'

        if $check_off_cycle = 'Y'
            let $off_cycle_schedule = $venchk_schedule
            do update-pay-deduction
        end-if
        BREAK

end-evaluate

end-procedure       !update-off-cycle-ded-schedule

!***********************************
begin-procedure update-pay-deduction
!***********************************

BEGIN-SQL

    UPDATE PS_PAY_DEDUCTION SET GVT_SCHEDULE_NO = $off_cycle_schedule

    WHERE  COMPANY         = $check_company
    AND    PAYGROUP        = $check_paygroup
    AND    PAY_END_DT      = $check_pay_end_dt
    AND    OFF_CYCLE       = $check_off_cycle
    AND    PAGE_NUM        = #check_page_nbr
    AND    LINE_NUM        = #check_line_nbr
    AND    SEPCHK          = #check_sepchk
    AND    PLAN_TYPE       = $deduction_plan_type
    AND    BENEFIT_PLAN    = $deduction_benefit_plan
    AND    DEDCD           = $deduction_code
    AND    DED_CLASS       = $deduction_class
    AND    DED_SLSTX_CLASS = $deduction_slstx_class

END-SQL

end-procedure       !update-pay-deduction


!*****************************
begin-procedure update-pay-tax
!*****************************


BEGIN-SQL

    UPDATE PS_PAY_TAX SET GVT_SCHEDULE_NO = $off_cycle_schedule

    WHERE  COMPANY    = $check_company
    AND    PAYGROUP   = $check_paygroup
    AND    PAY_END_DT = $check_pay_end_dt
    AND    OFF_CYCLE  = $check_off_cycle
    AND    PAGE_NUM   = #check_page_nbr
    AND    LINE_NUM   = #check_line_nbr
    AND    SEPCHK     = #check_sepchk
    AND    STATE      = $tax_state
    AND    LOCALITY   = $tax_locality
    AND    TAX_CLASS  = $tax_class

END-SQL

end-procedure       !update-pay-tax



!****************************
begin-procedure process-bonds
!****************************


let #bond_seq = 0

BEGIN-SELECT

BOND_LOG.EMPLID
BOND_LOG.BOND_ID
BOND_LOG.BOND_OWNER_ID
BOND_LOG.BOND_OTH_REG_TYPE
BOND_LOG.BOND_OTH_REG_ID
BOND_LOG.BOND_LOG_SEQ
BOND_LOG.BOND_PURCH_UNITS
BOND_LOG.CHECK_DT
BOND_LOG.BOND_COLLECT_AMT
BOND_LOG.BOND_DISBURSE_AMT
BOND_LOG.BOND_ACCUM_AMT
BOND_LOG.BOND_LOG_STATUS


    if &BOND_LOG.BOND_COLLECT_AMT = &BOND_LOG.BOND_DISBURSE_AMT and
       &BOND_LOG.BOND_ACCUM_AMT = 0 and
       &BOND_LOG.BOND_PURCH_UNITS = 1

        let $half_purchase_dt = datetostr(&BOND_LOG.CHECK_DT,'YYYYMMDD')

        let #seq  = 0

        let #unit = 1

        do create-purchase-log

        do create-bond-transactions

        do update-bond-log-status

    else

        if #bond_seq = 0

            do determine-bond-seq-start

        end-if

        do determine-bond-purchase-date

    end-if

FROM  PS_BOND_LOG BOND_LOG

WHERE BOND_LOG.EMPLID          = $check_emplid
AND   BOND_LOG.CHECK_DT        = $check_dt
AND   BOND_LOG.BOND_LOG_STATUS = 'R'  !Ready to Purchase

ORDER BY BOND_LOG.BOND_LOG_SEQ DESC

END-SELECT

end-procedure       !process-bonds

!*************************************
begin-procedure update-bond-log-status
!*************************************

BEGIN-SQL

    UPDATE PS_BOND_LOG
    SET    BOND_LOG_STATUS    = 'D'
    WHERE  EMPLID             = &BOND_LOG.EMPLID
    AND    BOND_ID            = &BOND_LOG.BOND_ID
    AND    BOND_OWNER_ID      = &BOND_LOG.BOND_OWNER_ID
    AND    BOND_OTH_REG_TYPE  = &BOND_LOG.BOND_OTH_REG_TYPE
    AND    BOND_OTH_REG_ID    = &BOND_LOG.BOND_OTH_REG_ID
    AND    BOND_LOG_SEQ       = &BOND_LOG.BOND_LOG_SEQ

END-SQL

end-procedure       !update-bond-log-status

!***********************************
begin-procedure process-garnishments
!***********************************

BEGIN-SELECT

GARN_SPEC.GARNID
GARN_SPEC.GVT_PYMNT_METHOD
GARN_SPEC.GVT_CHK_NAME
GARN_SPEC.GVT_ADDRESS1
GARN_SPEC.GVT_ADDRESS2
GARN_SPEC.GVT_ADDRESS_CITY
GARN_SPEC.GVT_ADDRESS_STATE
GARN_SPEC.GVT_ADDRESS_ZIP
GARN_SPEC.GVT_ADDRESS_CNTRY
GARN_SPEC.BANK_CD
GARN_SPEC.ACCOUNT_NUM
GARN_SPEC.ACCOUNT_TYPE
GARN_SPEC.GVT_PAYEE_ID_NO
GARN_SPEC.GVT_PAYEE_NAME
GARN_SPEC.COURT_DOC_ID
GARN_SPEC.GARN_DED_AMT
GARN_SPEC.GARN_TYPE
GARN_SPEC.CASE_IDENTIFIER
GARN_SPEC.FIPS_CODE
GARN_SPEC.EFT_REMIT_STATE
GARN_PAY.DEDUCT_AMT &GARN_PAY.DEDUCT_AMT

   let #payment_amount = &GARN_PAY.DEDUCT_AMT
   let #amount = &GARN_PAY.DEDUCT_AMT

        if &GARN_SPEC.GVT_PYMNT_METHOD = 'E'

            if $create_eft = 'Y'

                do format-eft-garn

                let $last_deduction_routed = 'E'

            end-if

        else

           if &GARN_SPEC.GVT_PYMNT_METHOD = 'C'

              if $create_checks = 'Y'

                do determine-check-format

                let $last_deduction_routed = 'C'

              end-if

           end-if

        end-if

  let #garn_deduct_amt = 0

FROM  PS_GVT_GARN_SPEC GARN_SPEC , PS_PAY_GARNISH GARN_PAY

WHERE GARN_PAY.COMPANY    = $check_company
AND   GARN_PAY.PAYGROUP   = $check_paygroup
AND   GARN_PAY.PAY_END_DT = $check_pay_end_dt
AND   GARN_PAY.OFF_CYCLE  = $check_off_cycle
AND   GARN_PAY.PAGE_NUM   = #check_page_nbr
AND   GARN_PAY.LINE_NUM   = #check_line_nbr
AND   GARN_PAY.SEPCHK     = #check_sepchk
AND   GARN_SPEC.EMPLID   = $check_emplid
AND   GARN_SPEC.COMPANY  = GARN_PAY.COMPANY
AND   GARN_SPEC.GARNID   = GARN_PAY.GARNID


END-SELECT

end-procedure       !process-garnishments



!***********************************************
begin-procedure determine-deduction-distribution
!***********************************************

LOOKUP LOAD_GENL_TBL &DED.DEDCD $load_genl_return

let $payment_routing = substr($load_genl_return,1,1)

let $payment_summary = substr($load_genl_return,2,1)

if $payment_routing <> 'N'

    if $payment_routing = 'D'

        if $payment_summary <> 'N'

            if $payment_summary = 'D'

                do retrieve-distribution-info

                let $empe_dedcd_dist_cd = &DED.DEDCD||$empe_dist_cd

                do load-deduction-distributions

            else

                do retrieve-distribution-info

                let $empe_dedcd_dist_cd = &DED.DEDCD||$empe_dist_cd

                do load-deduction-distributions

                do retrieve-distribution-address

                let #ded_amount = #deduction_amount

                if $ded_payment_method = 'E' and
                      $create_eft = 'Y'
                        do format-eft
                        let $last_deduction_routed = 'E'
                else
                    !if $create_checks = 'Y'
                        do determine-check-format
                        let $last_deduction_routed = 'C'

                end-if
            end-if
       end-if

    else

        do retrieve-distribution-info
        let #ded_amount = &DED.DED_CUR

        if $ded_payment_method = 'E' and
            $create_eft = 'Y'

                do format-eft

                let $last_deduction_routed = 'E'
        else
                do determine-check-format

                let $last_deduction_routed = 'C'

        end-if

    end-if

end-if


if not isnull($last_deduction_routed) and
              $off_cycle_ded = 'Y'

  do update-off-cycle-ded-schedule

end-if



end-procedure       !determine-deduction-distribution

!*****************************************
begin-procedure retrieve-distribution-info
!*****************************************

let $empe_dist_cd       = ''
let $ded_payment_method = ''
let $ded_check_name     = ''
let $ded_transit_no     = ''
let $ded_account_no     = ''
let $ded_account_type   = ''
let $ded_address1       = ''
let $ded_address2       = ''
let $ded_address_city   = ''
let $ded_address_state  = ''
let $ded_address_zip    = ''

BEGIN-SELECT

GENL_DEDUCT.GVT_DED_DIST_CD,
GENL_DEDUCT.DED_CALC,
GENL_DEDUCT.GVT_PYMNT_METHOD,
GENL_DEDUCT.GVT_CHK_NAME,
GENL_DEDUCT.GVT_ADDRESS1,
GENL_DEDUCT.GVT_ADDRESS2,
GENL_DEDUCT.GVT_ADDRESS_CITY,
GENL_DEDUCT.GVT_ADDRESS_STATE,
GENL_DEDUCT.GVT_ADDRESS_ZIP,
GENL_DEDUCT.BANK_CD,
GENL_DEDUCT.ACCOUNT_NUM,
GENL_DEDUCT.ACCOUNT_TYPE


    let $empe_dist_cd       = &GENL_DEDUCT.GVT_DED_DIST_CD
    let $ded_calc           = &GENL_DEDUCT.DED_CALC
    let $ded_payment_method = &GENL_DEDUCT.GVT_PYMNT_METHOD
    let $ded_check_name     = &GENL_DEDUCT.GVT_CHK_NAME
    let $ded_transit_no     = &GENL_DEDUCT.BANK_CD
    let $ded_account_no     = &GENL_DEDUCT.ACCOUNT_NUM
    let $ded_account_type   = &GENL_DEDUCT.ACCOUNT_TYPE
    let $ded_address1       = &GENL_DEDUCT.GVT_ADDRESS1
    let $ded_address2       = &GENL_DEDUCT.GVT_ADDRESS2
    let $ded_address_city   = &GENL_DEDUCT.GVT_ADDRESS_CITY
    let $ded_address_state  = &GENL_DEDUCT.GVT_ADDRESS_STATE
    let $ded_address_zip    = &GENL_DEDUCT.GVT_ADDRESS_ZIP

    if $empe_dist_cd = ''
       let $empe_dist_cd = $ded_payment_method
    end-if


FROM  PS_GENL_DEDUCTION GENL_DEDUCT

WHERE GENL_DEDUCT.EMPLID    = $check_emplid
AND   GENL_DEDUCT.DEDCD     = &DED.DEDCD
AND   GENL_DEDUCT.EFFDT     = (SELECT MAX(GENL_DEDUCT1.EFFDT)
                               FROM  PS_GENL_DEDUCTION GENL_DEDUCT1
                               WHERE GENL_DEDUCT1.EMPLID    = GENL_DEDUCT.EMPLID
                               AND   GENL_DEDUCT1.DEDCD     = GENL_DEDUCT.DEDCD
                               AND   GENL_DEDUCT1.EFFDT    <= $check_pay_end_dt)

END-SELECT

end-procedure       !retrieve-distribution-info

!*******************************************
begin-procedure load-deduction-distributions
!*******************************************

!  Read thru the deductions and when empe_ded_dist_cd is the same
!  as the $dedcd_dist_cd, add the payment amounts together and store
!  in the Distribution Array


let #i = 0

while #i <= &DIST_COUNT

             let $remit_payment = 'Y'
             let $remittance_is_due = 'Y'
             let #deduction_amount = 0


    get $dedcd_dist_cd         from DISTRIBUTION_ARRAY(#i) DEDCD_DIST_CD
    get $last_deduction_routed from DISTRIBUTION_ARRAY(#i) PAYMENT_METHOD
    get $remit_frequency       from DISTRIBUTION_ARRAY(#i) REMIT_FREQUENCY

    evaluate $dedcd_dist_cd

        when = $empe_dedcd_dist_cd

            if $remit_frequency = 'M'
              do find-pay-frequency
            else
              let $remit_payment = 'Y'
           end-if



           if $pay_frequency = 'B'
               and $remit_frequency = 'M'
                   if #pay_period = 1
                       let #deduction_amount = #mtd_amount
                       array-add #deduction_amount to DISTRIBUTION_ARRAY(#i) AMOUNT
                       array-add 1                 to DISTRIBUTION_ARRAY(#i) COUNT
                       let #saved_index = #i
                   else

                   let #deduction_amount = 0
                       array-add #deduction_amount to DISTRIBUTION_ARRAY(#i) AMOUNT
                       array-add 1                 to DISTRIBUTION_ARRAY(#i) COUNT
                       let #saved_index = #i

                   end-if
           else
               ! remit_frequency and pay_frequency are the same

                   let #deduction_amount       = &DED.DED_CUR
                   array-add #deduction_amount to DISTRIBUTION_ARRAY(#i) AMOUNT
                   array-add 1                 to DISTRIBUTION_ARRAY(#i) COUNT
                   let #saved_index = #i

           end-if

           let #i = &DIST_COUNT
           BREAK

        when <> $empe_dedcd_dist_cd


            let #i = #i + 1

    end-evaluate

end-while

end-procedure       !load-deduction-distributions

!********************************************
begin-procedure retrieve-distribution-address
!********************************************

if #saved_index > 0

    let #i = #saved_index
else

    let #i = 0

end-if

while #i <> &DIST_COUNT

    get $dedcd_dist_cd from DISTRIBUTION_ARRAY(#i) DEDCD_DIST_CD

    evaluate $dedcd_dist_cd

        when = $empe_dedcd_dist_cd

            get $ded_payment_method    from DISTRIBUTION_ARRAY(#i) PAYMENT_METHOD
            get $ded_check_name        from DISTRIBUTION_ARRAY(#i) CHECK_NAME

            if $ded_payment_method = 'E'

                get $ded_transit_no    from DISTRIBUTION_ARRAY(#i) TRANSIT_NO
                get $ded_account_no    from DISTRIBUTION_ARRAY(#i) ACCOUNT_NO
                get $ded_account_type  from DISTRIBUTION_ARRAY(#i) ACCOUNT_TYPE

            else

                get $ded_address1      from DISTRIBUTION_ARRAY(#i) ADDRESS1
                get $ded_address2      from DISTRIBUTION_ARRAY(#i) ADDRESS2
                get $ded_address_city  from DISTRIBUTION_ARRAY(#i) CITY
                get $ded_address_state from DISTRIBUTION_ARRAY(#i) STATE
                get $ded_address_zip   from DISTRIBUTION_ARRAY(#i) ZIP

            end-if

            let #i = &DIST_COUNT
            BREAK

        when <> $empe_dedcd_dist_cd

            let #i = #i + 1

    end-evaluate

end-while

let #saved_index = 0

end-procedure       !retrieve-distribution-address

!****************************
begin-procedure process-taxes
!****************************

let $processing = 'tax'

BEGIN-SELECT

TAX.COMPANY
TAX.STATE
TAX.LOCALITY
TAX.TAX_CLASS
TAX.TAX_CUR

    let $tax_state    = &TAX.STATE
    let $tax_locality = &TAX.LOCALITY
    let $tax_class    = &TAX.TAX_CLASS

    let #counter      = length(&TAX.COMPANY)


    if &TAX.STATE = 'MD'

        let $load_tax_key = rtrim(&TAX.COMPANY,' ')||rtrim(&TAX.STATE,' ')

    else

        let $load_tax_key = rtrim(&TAX.COMPANY,' ')||rtrim(&TAX.STATE,' ')||rtrim(&TAX.LOCALITY,' ')

    end-if

    do check-tax-distribution

    if $tax_distrib_active = 'Y'

       do load-tax-amounts
    end-if
FROM PS_PAY_TAX TAX

WHERE TAX.COMPANY         = $check_company
AND   TAX.PAYGROUP        = $check_paygroup
AND   TAX.PAY_END_DT      = $check_pay_end_dt
AND   TAX.OFF_CYCLE       = $check_off_cycle
AND   TAX.PAGE_NUM        = #check_page_nbr
AND   TAX.LINE_NUM        = #check_line_nbr
AND   TAX.SEPCHK          = #check_sepchk
AND   TAX.TAX_CLASS       = 'H'
AND   (TAX.GVT_SCHEDULE_NO IS NULL
OR     TAX.GVT_SCHEDULE_NO = ' ')
END-SELECT

let $last_deduction_routed  = ''

end-procedure       !process-taxes


!*************************************
begin-procedure check-tax-distribution
!*************************************

let $tax_distrib_active     = 'N'
let $last_deduction_routed  = ''

if &TAX.STATE = 'MD'

    let $tax_locality = ' '

else

    if isblank(&TAX.LOCALITY)

        let $tax_locality = ' '

    else

        let $tax_locality = rtrim(&TAX.LOCALITY,' ')

    end-if

end-if

BEGIN-SELECT

CHECKTAX.GVT_PYMNT_METHOD

    let $tax_distrib_active = 'Y'

    let $last_deduction_routed  = rtrim(&CHECKTAX.GVT_PYMNT_METHOD,' ')

FROM  PS_GVT_TAX_ROUTING CHECKTAX

WHERE CHECKTAX.COMPANY    = &TAX.COMPANY
AND   CHECKTAX.STATE      = &TAX.STATE
AND   CHECKTAX.LOCALITY   = $tax_locality
AND   CHECKTAX.EFF_STATUS = 'A'
AND   CHECKTAX.EFFDT      = (SELECT MAX(CHECKTAX1.EFFDT)
                              FROM  PS_GVT_TAX_ROUTING CHECKTAX1
                              WHERE CHECKTAX1.COMPANY   = CHECKTAX.COMPANY
                              AND   CHECKTAX1.STATE     = CHECKTAX.STATE
                              AND   CHECKTAX1.LOCALITY  = CHECKTAX.LOCALITY
                              AND   CHECKTAX1.EFFDT    <= $AsOfToday)

END-SELECT

end-procedure       !check-tax-distribution


!*******************************
begin-procedure load-tax-amounts
!*******************************

let #i = 0

while #i <= &TAX_COUNT

    get $tax_location from TAX_ARRAY(#i) COMPANY_STATE_LOCALITY


    evaluate $tax_location

          when = ''
  !       when = ' '

            put $load_tax_key into TAX_ARRAY(#i) COMPANY_STATE_LOCALITY
            put 1             into TAX_ARRAY(#i) COUNT
            put &TAX.TAX_CUR  into TAX_ARRAY(#i) AMOUNT
            let #i = &TAX_COUNT +1

            BREAK

        when = $load_tax_key

            array-add 1            to TAX_ARRAY(#i) COUNT
            array-add &TAX.TAX_CUR to TAX_ARRAY(#i) AMOUNT
            let #i = &TAX_COUNT + 1

            BREAK

        when <> $load_tax_key

            let #i = #i + 1

    end-evaluate

end-while

end-procedure       !load-tax-amounts

!*************************************************
begin-procedure generate-distribution-transactions
!*************************************************

let #i = 0

while #i <> &DIST_COUNT

    let $ded_payment_method = ''
    let $ded_check_name     = ''
    let $ded_transit_no     = ''
    let $ded_account_no     = ''
    let $ded_account_type   = ''
    let $ded_address1       = ''
    let $ded_address2       = ''
    let $ded_address_city   = ''
    let $ded_address_state  = ''
    let $ded_address_zip    = ''
    let $ded_payee_name     = ''
    let $ded_payee_id_no    = ''

    get $dedcd_dist_cd   from DISTRIBUTION_ARRAY(#i) DEDCD_DIST_CD
    get $reporting_cd    from DISTRIBUTION_ARRAY(#i) REPORTING_CD
    get $payment_routing from DISTRIBUTION_ARRAY(#i) PAYMENT_ROUTING
    get $payment_summary from DISTRIBUTION_ARRAY(#i) PAYMENT_SUMMARY

    evaluate $payment_summary

        when = 'D'

            get #ded_amount            from DISTRIBUTION_ARRAY(#i) AMOUNT
            get #dist_trans_count      from DISTRIBUTION_ARRAY(#i) COUNT
            get $ded_payment_method    from DISTRIBUTION_ARRAY(#i) PAYMENT_METHOD
            get $ded_check_name        from DISTRIBUTION_ARRAY(#i) CHECK_NAME
            get $ded_payee_name        from DISTRIBUTION_ARRAY(#i) PAYEE_NAME
            get $ded_payee_id_no       from DISTRIBUTION_ARRAY(#i) PAYEE_ID
            get $remit_frequency       from DISTRIBUTION_ARRAY(#i) REMIT_FREQUENCY

            if $ded_payment_method = 'E'

                get $ded_transit_no    from DISTRIBUTION_ARRAY(#i) TRANSIT_NO
                get $ded_account_no    from DISTRIBUTION_ARRAY(#i) ACCOUNT_NO
                get $ded_account_type  from DISTRIBUTION_ARRAY(#i) ACCOUNT_TYPE

            else

                get $ded_address1      from DISTRIBUTION_ARRAY(#i) ADDRESS1
                get $ded_address2      from DISTRIBUTION_ARRAY(#i) ADDRESS2
                get $ded_address_city  from DISTRIBUTION_ARRAY(#i) CITY
                get $ded_address_state from DISTRIBUTION_ARRAY(#i) STATE
                get $ded_address_zip   from DISTRIBUTION_ARRAY(#i) ZIP

            end-if

            if #ded_amount > 0

                let $processing = 'dist'

                if $ded_payment_method = 'E'

                    if $create_eft = 'Y'

                        do format-eft

                    end-if

                else

                    if $create_checks = 'Y'

                        do format-200-check

                    end-if

                end-if

            end-if

      BREAK

    when-other

    BREAK

    end-evaluate

    let #i = #i + 1

end-while

end-procedure       !generate-distribution-transactions

!****************************************
begin-procedure generate-tax-transactions
!****************************************

let #i = 0

while #i <= &TAX_COUNT

    get $tax_location from TAX_ARRAY(#i) COMPANY_STATE_LOCALITY

    evaluate $tax_location

       ! when = ' '
         when = ''
            let #i = &TAX_COUNT + 1
            BREAK

        when-other
            get #tax_count  from TAX_ARRAY(#i) COUNT
            get #tax_amount from TAX_ARRAY(#i) AMOUNT

           if #counter = 2
            let $tax_company  = substr($tax_location,1,2)
            let $tax_state    = substr($tax_location,3,2)
            let $tax_locality = substr($tax_location,5,10)
           else
            let $tax_company  = substr($tax_location,1,3)
            let $tax_state    = substr($tax_location,4,2)
            let $tax_locality = substr($tax_location,6,10)
           end-if

            do retrieve-tax-data
            let #i = #i + 1

    end-evaluate

end-while

end-procedure       !generate-tax-transactions

!********************************
begin-procedure retrieve-tax-data
!********************************

if isnull($tax_locality)
   let $tax_locality = ' '

end-if

BEGIN-SELECT

ROUTE_TAX.COMPANY
ROUTE_TAX.STATE
ROUTE_TAX.LOCALITY
ROUTE_TAX.BANK_CD
ROUTE_TAX.ACCOUNT_NUM
ROUTE_TAX.ACCOUNT_TYPE
ROUTE_TAX.GVT_TAXPAYER_ID
ROUTE_TAX.GVT_TAX_TYPE
ROUTE_TAX.GVT_TAX_PERIOD
ROUTE_TAX.GVT_TXP_AMT_1_IND
ROUTE_TAX.GVT_TXP_AMT_1_SUMM
ROUTE_TAX.GVT_TXP_AMT_2_IND
ROUTE_TAX.GVT_TXP_AMT_2_SUMM
ROUTE_TAX.GVT_TXP_AMT_3_IND
ROUTE_TAX.GVT_TXP_AMT_3_SUMM
ROUTE_TAX.GVT_TXP_VERIF
ROUTE_TAX.GVT_PYMNT_METHOD
ROUTE_TAX.GVT_PAYEE_ID_NO
ROUTE_TAX.GVT_PAYEE_NAME
ROUTE_TAX.GVT_CHK_NAME
ROUTE_TAX.GVT_ADDRESS1
ROUTE_TAX.GVT_ADDRESS2
ROUTE_TAX.GVT_ADDRESS_CITY
ROUTE_TAX.GVT_ADDRESS_STATE
ROUTE_TAX.GVT_ADDRESS_ZIP

    evaluate &ROUTE_TAX.GVT_PYMNT_METHOD

    when = 'E'

        if $create_venmis = 'Y'
        ! create the vendor eft tax information

            do format-venmis

        end-if
        BREAK

    when = 'C'
    ! create the vendor check tax information

        if $create_checks = 'Y'

            let $processing = 'tax'

            do format-200-check

        end-if
        BREAK

    end-evaluate

FROM  PS_GVT_TAX_ROUTING ROUTE_TAX

WHERE ROUTE_TAX.COMPANY    = $tax_company
AND   ROUTE_TAX.STATE      = $tax_state
AND   ROUTE_TAX.LOCALITY   = $tax_locality
AND   ROUTE_TAX.EFF_STATUS = 'A'
AND   ROUTE_TAX.EFFDT      = (SELECT MAX(ROUTE_TAX1.EFFDT)
                              FROM   PS_GVT_TAX_ROUTING ROUTE_TAX1
                              WHERE  ROUTE_TAX1.COMPANY    = ROUTE_TAX.COMPANY
                              AND    ROUTE_TAX1.STATE      = ROUTE_TAX.STATE
                              AND    ROUTE_TAX1.LOCALITY   = ROUTE_TAX.LOCALITY
                              AND    ROUTE_TAX1.EFFDT      <= $AsOfToday)

END-SELECT

end-procedure       !retrieve-state-tax-data

!******************************
begin-procedure format-88-check
!******************************

let $record_code = 'A'

do get-designated-agent

evaluate $processing

when = 'net'

    let $ssn               = rtrim($check_ssn, ' ')
    let $object_code       = '0'
    let $mail_sort_code    = '1'
    let $payment_amount    = '0'
    let $line_code         = '1'

    let $name              = substr($check_paycheck_name,1,25)
    do rotate-name
    let $payee_name        = upper($name)

    let #amount            = #check_net_pay

    let #check_file_tot    = #check_file_tot + #amount
    let #check_file_88_tot = #check_file_88_tot + #amount

    let #check_net_tot     = #check_net_tot + #amount
    let #check_net_count   = #check_net_count + 1

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '00000009')

    do write-88-check

    BREAK

end-evaluate

end-procedure       !format-88-check

!***********************************
begin-procedure get-designated-agent
!***********************************

BEGIN-SELECT

LOC.GVT_DESIG_AGENT

    let $desig_agent = rtrim(upper(&LOC.GVT_DESIG_AGENT), ' ')

FROM  PS_JOB JOB,
      PS_LOCATION_TBL LOC

WHERE JOB.EMPLID    = $check_emplid
AND   JOB.EMPL_RCD  = #check_empl_rcd_nbr
AND   JOB.EFFDT     = (SELECT MAX(JOB1.EFFDT)
                       FROM PS_JOB JOB1
                       WHERE JOB1.EMPLID    = JOB.EMPLID
                       AND   JOB1.EMPL_RCD = JOB.EMPL_RCD
                       AND   JOB1.EFFDT     <= $check_pay_end_dt)
AND   JOB.EFFSEQ    = (SELECT MAX(JOB2.EFFSEQ)
                       FROM PS_JOB JOB2
                       WHERE JOB2.EMPLID    = JOB.EMPLID
                       AND   JOB2.EMPL_RCD = JOB.EMPL_RCD
                       AND   JOB2.EFFDT     = JOB.EFFDT)
AND   LOC.LOCATION  = JOB.LOCATION
AND   LOC.EFFDT     = (SELECT MAX(LOC1.EFFDT)
                       FROM  PS_LOCATION_TBL LOC1
                       WHERE LOC1.LOCATION = LOC.LOCATION
                       AND   LOC1.EFFDT    <= $check_pay_end_dt)

END-SELECT

end-procedure       !get-designated-agent

!*******************************
begin-procedure format-152-check
!*******************************

let $record_code = 'A'

evaluate $processing

when = 'net'

    let $ssn                = rtrim($check_ssn, ' ')
    let $object_code        = '0'
    let $mail_sort_code     = '1'
    let $line_code          = '3'
    let $zip_control_code   = '1'
    let $zip_5              = substr($check_postal,1,5)
    let $zip_4              = substr($check_postal,7,4)
    let $zip_code           = $zip_5||$zip_4
    let $address1           = upper(rtrim($check_address1, ' '))
    let $city               = substr($check_city,1,16)
    let $state              = substr($check_state,1,2)
    let $city_state         = $city||$state
    let $city_state         = upper($city_state)

    let $name               = substr($check_paycheck_name,1,25)
    do rotate-name
    let $payee_name         = upper($name)

    let #amount             = #check_net_pay
    let #check_file_tot     = #check_file_tot + #amount
    let #check_file_152_tot = #check_file_152_tot + #amount

    let #check_net_tot      = #check_net_tot + #amount
    let #check_net_count    = #check_net_count + 1

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '00000009')

    if $check_schedule <> ''
      do write-152-check
    end-if

    BREAK

end-evaluate

end-procedure       !format-152-check

!*******************************
begin-procedure format-192-check
!*******************************

let $record_code = 'A'

evaluate $processing

when = 'net'

    let $ssn                = rtrim($check_ssn, ' ')
    let $object_code        = '0'
    let $mail_sort_code     = '1'
    let $line_code          = '4'
    let $zip_control_code   = '1'
    let $zip_5              = substr($check_postal,1,5)
    let $zip_4              = substr($check_postal,7,4)
    let $zip_code           = $zip_5||$zip_4
    let $address1           = upper(rtrim($check_address1, ' '))
    let $address2           = upper(rtrim($check_address2, ' '))
    let $city               = substr($check_city,1,16)
    let $state              = substr($check_state,1,2)
    let $city_state         = $city||$state
    let $city_state         = upper($city_state)

    let $name               = substr($check_paycheck_name,1,25)
    do rotate-name
    let $payee_name         = upper($name)

    let #amount             = #check_net_pay
    let #check_file_tot     = #check_file_tot + #amount
    let #check_file_192_tot = #check_file_192_tot + #amount

    let #check_net_tot      = #check_net_tot + #amount
    let #check_net_count    = #check_net_count + 1

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '00000009')

    if $check_schedule <> ''
      do write-192-check
    end-if

    BREAK

end-evaluate

end-procedure       !format-192-check

!*******************************
begin-procedure format-200-check
!*******************************

let $record_code = 'A'

evaluate $processing

when = 'deduct'

    let $ssn              = rtrim($check_ssn,' ')
    let #amount           = #ded_amount
    let $name             = substr($check_paycheck_name,1,25)
    do rotate-name
    let $alloter_name     = upper($name)
    let $zip_5            = substr($ded_address_zip,1,5)
    let $zip_4            = substr($ded_address_zip,7,4)
    let $payee_name       = upper(substr($ded_check_name,1,25))
    let $address1         = upper(rtrim($ded_address1,' '))||upper(rtrim($ded_address2,' '))
    let $city             = upper(substr($ded_address_city,1,16))
    let $state            = substr($ded_address_state,1,2)
    let $fo_acct_number   = ' '

    if #amount > 0

        let #check_deduct_tot   = #check_deduct_tot + #amount
        let #check_deduct_count = #check_deduct_count + 1

        do format-line-code-9

        do write-200-9-check

    end-if

    BREAK

when = 'garnish'

    let $ssn              = rtrim($check_ssn,' ')
    let $name             = upper(substr($check_paycheck_name,1,25))
    do rotate-name
    let $alloter_name     = upper($name)
    let $zip_5            = substr(&GARN_SPEC.GVT_ADDRESS_ZIP,1,5)
    let $zip_4            = substr(&GARN_SPEC.GVT_ADDRESS_ZIP,7,4)
    let $payee_name       = upper(substr(&GARN_SPEC.GVT_CHK_NAME,1,25))
    let $address1         = upper(rtrim(&GARN_SPEC.GVT_ADDRESS1,' '))||upper(rtrim(&GARN_SPEC.GVT_ADDRESS2,' '))
    let $city             = upper(substr(&GARN_SPEC.GVT_ADDRESS_CITY,1,16))
    let $state            = upper(substr(&GARN_SPEC.GVT_ADDRESS_STATE,1,2))
    let $fo_acct_number   = upper(substr(&GARN_SPEC.COURT_DOC_ID,1,12))

    if #amount > 0

        let #check_garnish_tot   = #check_garnish_tot + #amount
        let #check_garnish_count = #check_garnish_count + 1

        do format-line-code-9

        do write-200-9-check

    end-if

    BREAK

when = 'dist'


    let $ssn              = rtrim($ded_payee_id_no,' ')
    let #amount           = #ded_amount
    let $alloter_name     = ' '
    let $zip_5            = substr($ded_address_zip,1,5)
    let $zip_4            = substr($ded_address_zip,7,4)
    let $payee_name       = upper(substr($ded_check_name,1,25))
    let $address1         = upper(rtrim($ded_address1,' '))||upper(rtrim($ded_address2,' '))
    let $city             = upper(substr($ded_address_city,1,16))
    let $state            = substr($ded_address_state,1,2)
    let $fo_acct_number   = ' '

    evaluate $reporting_cd

        when = 'CF'

            let #check_charity_tot   = #check_charity_tot + #amount
            let #check_charity_count = #check_charity_count + 1

            let $object_code = '2'

            do format-line-code-8

            do write-200-8-check

            BREAK

        when = 'UN'

            let #check_union_tot   = #check_union_tot + #amount
            let #check_union_count = #check_union_count + 1

            let $object_code = '3'

            do format-line-code-8

            do write-200-8-check

            BREAK

        when-other

            let #check_other_tot   = #check_other_tot + #amount
            let #check_other_count = #check_other_count + 1

            let $object_code = '0'

            do format-line-code-9

            do write-200-9-check

            BREAK

    end-evaluate

    BREAK

when = 'tax'

    let $ssn              = rtrim(&ROUTE_TAX.GVT_PAYEE_ID_NO,' ')
    let $object_code      = '1'
    let $mail_sort_code   = '1'
    let #amount           = #tax_amount
    let $alloter_name     = ' '
    let $zip_5            = substr(&ROUTE_TAX.GVT_ADDRESS_ZIP,1,5)
    let $zip_4            = substr(&ROUTE_TAX.GVT_ADDRESS_ZIP,7,4)
    let $payee_name       = upper(substr(&ROUTE_TAX.GVT_CHK_NAME,1,35))
    let $address1         = upper(rtrim(&ROUTE_TAX.GVT_ADDRESS1,' '))
    let $address2         = upper(rtrim(&ROUTE_TAX.GVT_ADDRESS2,' '))
    let $city             = upper(substr(&ROUTE_TAX.GVT_ADDRESS_CITY,1,16))
    let $state            = substr(&ROUTE_TAX.GVT_ADDRESS_STATE,1,2)
    let $fo_acct_number   = ' '

    if #amount > 0

        let #check_tax_tot   = #check_tax_tot + #amount
        let #check_tax_count = #check_tax_count + 1

        do format-line-code-8

        do write-200-8-check

    end-if

    BREAK

end-evaluate

end-procedure       !format-200-check

!*********************************
begin-procedure format-line-code-8
!*********************************

let $mail_sort_code       = '0'
let $line_code            = '8'
let $zip_control_code     = '1'
let $zip_code             = $zip_5||$zip_4
let $city_state           = $city||$state
let $city_state           = upper($city_state)

let #venchk_file_tot      = #venchk_file_tot + #Amount
let #check_file_200_8_tot = #check_file_200_8_tot + #amount
let #check_file_200_tot   = #check_file_200_tot + #amount

multiply 100 times #Amount
do Format-Number(#Amount, $payment_amount, '00000009')

end-procedure       !format-line-code-8

!*********************************
begin-procedure format-line-code-9
!*********************************

let $object_code          = '0'
let $mail_sort_code       = '0'
let $line_code            = '9'
let $zip_control_code     = '1'
let $zip_code             = $zip_5||$zip_4
let $city_state           = $city||$state
let $city_state           = upper($city_state)

let #venchk_file_tot      = #venchk_file_tot + #Amount
let #check_file_200_9_tot = #check_file_200_9_tot + #amount
let #check_file_200_tot   = #check_file_200_tot + #amount

multiply 100 times #Amount
do Format-Number(#Amount, $payment_amount, '00000009')

end-procedure       !format-line-code-9

!*************************
begin-procedure format-eft
!*************************

let $record_code = 'A'

let $remittance_is_due = 'N'
 evaluate $processing

 when = 'net'

    let $payee_id_number   = $check_ssn
    let $line_code         = 'S'
    let $account_code      = rtrim(&DIST.ACCOUNT_TYPE, ' ')
    let $routing_id_number = rtrim(&DIST.BANK_CD, ' ')
    let $account_number    = rtrim(&DIST.ACCOUNT_NUM, ' ')

    let $name              = substr($check_paycheck_name,1,25)
    do rotate-name
    let $account_holder    = upper($name)

    let #amount            = &DIST.DEPOSIT_AMOUNT
    let #eft_file_tot      = #eft_file_tot + #amount

    let #eft_net_tot       = #eft_net_tot + #amount
    let #eft_net_count     = #eft_net_count + 1

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '00000009')

    if $eft_schedule <> ''
      do write-eft
    end-if

    BREAK

when = 'deduct'

    let $payee_id_number   = rtrim($check_ssn, ' ')
    let $line_code         = 'A'
    let $account_code      = rtrim($ded_account_type, ' ')
    let $routing_id_number = rtrim($ded_transit_no, ' ')
    let $account_number    = rtrim($ded_account_no, ' ')

    let $name              = substr($check_paycheck_name,1,25)
    do rotate-name
    let $account_holder    = upper($name)

    do find-pay-frequency

    if $remittance_is_due = 'Y'
       and $remit_frequency = 'M'
         and $pay_frequency = 'B'
           let #amount           = #mtd_amount

     else
        let #amount           = #ded_amount

    end-if

    let #venmis_file_tot      = #venmis_file_tot + #amount

    let #eft_deduct_tot    = #eft_deduct_tot + #amount

    let #eft_deduct_count  = #eft_deduct_count + 1

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '0000000009')

    if $venmis_schedule <> ''
      do write-venmis-deductions
    end-if

    BREAK

when = 'dist'

    let $payee_id_number   = rtrim($ded_payee_id_no, ' ')
    let $line_code         = 'A'
    let $account_code      = rtrim($ded_account_type, ' ')
    let $routing_id_number = rtrim($ded_transit_no, ' ')
    let $account_number    = rtrim($ded_account_no, ' ')

    let $name              = substr($ded_payee_name,1,22)
    let $account_holder    = upper($name)

    let #amount            = #ded_amount

    !look at reporting code for the summary report
    evaluate $reporting_cd

    when = 'CF'

    let #vendor_charity_tot   = #vendor_charity_tot + #amount
    let #vendor_charity_count = #vendor_charity_count + 1
    BREAK

    when = 'UN'

    let #vendor_union_tot   = #vendor_union_tot + #amount
    let #vendor_union_count = #vendor_union_count + 1
    BREAK

    when-other

    let #vendor_other_tot = #vendor_other_tot + #amount
    let #vendor_other_count = #vendor_other_count + 1

    end-evaluate

    let #venmis_file_tot      = #venmis_file_tot + #amount

    multiply 100 times #Amount
    do Format-Number(#Amount, $payment_amount, '0000000009')

    if $venmis_schedule <> ''
      do write-venmis-deductions
    end-if

    BREAK

when = 'garnish'

    ! let $payee_id_number   = rtrim(&GARN_SPEC.GVT_PAYEE_ID_NO, ' ')
    ! let $line_code         = 'A'
    ! let $account_code      = rtrim(&GARN_SPEC.ACCOUNT_TYPE, ' ')
    ! let $routing_id_number = rtrim(&GARN_SPEC.BANK_CD, ' ')
    ! let $account_number    = rtrim(&GARN_SPEC.ACCOUNT_NUM, ' ')
    !
    ! let $name              = substr(&GARN_SPEC.GVT_PAYEE_NAME,1,22)
    ! let $account_holder    = upper($name)
    !
    ! let #amount            =   &GARN_PAY.DEDUCT_AMT
    ! let #venmis_file_tot      = #venmis_file_tot + #amount
    !
    ! let #eft_garn_tot      = #eft_garn_tot + #amount
    ! let #eft_garn_count    = #eft_garn_count + 1
    !
    ! multiply 100 times #Amount
    ! do Format-Number(#Amount, $payment_amount, '00000009')
    !
    ! if $venmis_schedule <> ''
    !   do write-venmis-deductions
    ! end-if

    BREAK

end-evaluate

end-procedure       !format-eft

!*********************************
begin-procedure find-pay-frequency
!*********************************

if $processing = 'deduct'
    let $payfreq_dedcd_trim = &DED.DEDCD
else
    let $payfreq_dedcd = upper(substr($empe_dedcd_dist_cd, 1, 6))
    let $payfreq_dedcd_trim = rtrim($payfreq_dedcd, ' ')
end-if

let $pay_frequency = ''

BEGIN-SELECT

FREQ.PAY_FREQUENCY
FREQ.DED_ADDL_AMT

    let $pay_frequency = &FREQ.PAY_FREQUENCY
    let $ded_addl_amt  = &FREQ.DED_ADDL_AMT


FROM  PS_GENL_DED_FREQ FREQ


WHERE FREQ.DEDCD    =  $payfreq_dedcd_trim
AND   FREQ.EFFDT     = (SELECT MAX(FREQ1.EFFDT)
                       FROM PS_GENL_DED_FREQ FREQ1
                       WHERE FREQ.DEDCD      = FREQ1.DEDCD
                       AND   FREQ1.EFFDT    <= $check_pay_end_dt)

END-SELECT

 let $trim_pay_frequency     = rtrim($pay_frequency,' ')
 let $trim_remit_frequency   = rtrim($remit_frequency,' ')
 let $pay_frequency          = $trim_pay_frequency
 let $remit_frequency        = $trim_remit_frequency

if $pay_frequency = 'B'
        and $remit_frequency = 'M'
            let $remit_payment = 'N'
            do find-the-pay-period
            let #deduction_amount = #mtd_amount
else
   !both $remit_frequency and pay_frequency are the same
    let #deduction_amount = &DED.DED_CUR
    let $remit_payment = 'Y'
end-if


end-procedure       !find-pay-frequency

!**********************************
begin-procedure find-the-pay-period
!**********************************

BEGIN-SELECT

PAYPER.PAY_PERIOD,
PAYPER.PAY_END_DT

 let #pay_period       =  &PAYPER.PAY_PERIOD
 let $eft_pay_end_date =  &PAYPER.PAY_END_DT

FROM  PS_PAY_CALENDAR PAYPER


WHERE PAYPER.COMPANY      = $company
AND   PAYPER.PAYGROUP     = $check_paygroup
AND   PAYPER.PAY_END_DT   = (SELECT MAX(PAYPER1.PAY_END_DT)
                       FROM PS_PAY_CALENDAR PAYPER1
                       WHERE PAYPER.COMPANY       = PAYPER1.COMPANY
                       AND   PAYPER.PAYGROUP      = PAYPER1.PAYGROUP
                       AND   PAYPER1.PAY_END_DT  <= $check_pay_end_dt)


END-SELECT

  !let $pay_period = rtrim($pay_period, ' ')
  if #pay_period = 1
      do find-prior-period
  else
      let #mtd_amount = 0
      let $remit_payment = 'N'
  end-if

end-procedure       !find-the-pay-period

!***********************************
begin-procedure find-prior-period
!***********************************

!*****************************************************
! this calculates the prior period when remittance is
!   monthly and payroll deductions are taken bi-weekly
!*****************************************************

let $no-prior-period = 'Y'

BEGIN-SELECT

ABAL.BALANCE_YEAR
ABAL.BALANCE_PERIOD

      let $no-prior-period = 'N'
      let $abal_eft_balance_year     = &ABAL.BALANCE_YEAR
      let $eft_balance_year  = substr($abal_eft_balance_year,1,4)

      let #eft_balance_period   = &ABAL.BALANCE_PERIOD

FROM PS_PAY_CAL_BAL_ID ABAL
     WHERE ABAL.COMPANY    = $company
       AND ABAL.PAYGROUP   = $check_paygroup
       AND ABAL.PAY_END_DT =
           (SELECT MAX(BBAL.PAY_END_DT) FROM
            PS_PAY_CAL_BAL_ID BBAL
            WHERE ABAL.COMPANY = BBAL.COMPANY
              AND ABAL.PAYGROUP = BBAL.PAYGROUP
              AND BBAL.PAY_END_DT < $eft_pay_end_date)


END-SELECT

!***********************************************************************
! if an employee is new and didn't pay last month's deduction, there is
!   no remittance, otherwise calculate the amount
!***********************************************************************

if $no-prior-period = 'N'
   do find-remit-bal-amount
else
   let #mtd_amount = 0
end-if

end-procedure       !find-prior-period

!************************************
begin-procedure find-remit-bal-amount
!************************************

  let $plan_type = '00'
  let #mtd_amount = 0
  let #eft_balance_year = $eft_balance_year

BEGIN-SELECT


DBAL.DED_MTD       &DBAL.DED_MTD

  let #mtd_amount = &DBAL.DED_MTD
  let $remit_payment = 'Y'

FROM PS_DEDUCTION_BAL DBAL
       WHERE DBAL.EMPLID            = $check_emplid
        AND DBAL.COMPANY            = $company
        AND DBAL.BALANCE_YEAR       = #eft_balance_year
        AND DBAL.BALANCE_PERIOD     = #eft_balance_period
        AND DBAL.PLAN_TYPE          = $plan_type
        AND DBAL.DEDCD              = $payfreq_dedcd_trim

END-SELECT

end-procedure       !find-remit-bal-amount



!********************************
begin-procedure format-eft-garn
!********************************

let $record_code = 'A'
let $remittance_is_due = 'N'

let $ded01              = ''
let $ded02              = ''
let $ded03              = ''
let $ded04              = ''
let $ded05              = ''
let $ded06              = ''
let $ded07              = ''
let $ded08              = ''
let $ded09              = ''
let $ded10              = ''

evaluate $processing

   when = 'garnish'

        let $payee_id_number   = rtrim(&GARN_SPEC.GVT_PAYEE_ID_NO, ' ')
        let $record_code       = 'A'
        let $line_code         = 'M'
        let $account_code      = rtrim(&GARN_SPEC.ACCOUNT_TYPE, ' ')
        let $routing_id_number = rtrim(&GARN_SPEC.BANK_CD, ' ')
        let $account_number    = rtrim(&GARN_SPEC.ACCOUNT_NUM, ' ')

        let $name              = substr(&GARN_SPEC.GVT_PAYEE_NAME,1,22)
        let $account_holder    = upper($name)

        let #amount            = &GARN_PAY.DEDUCT_AMT
        let #venmis_file_tot   = #venmis_file_tot + #amount

        let #eft_garn_tot      = #eft_garn_tot + #amount
        let #eft_garn_count    = #eft_garn_count + 1

        multiply 100 times #Amount
        do Format-Number(#Amount, $payment_amount, '0000000009')

        evaluate &GARN_SPEC.GARN_TYPE

            when = 'C'

                let $temp_date    = $check_dt

                let $ded          = 'DED'
                let $ded01        = 'CS'
                let $ded02        = substr(rtrim(&GARN_SPEC.CASE_IDENTIFIER,' '),1,20)
                let $ded03        = datetostr($temp_date,'YYMMDD')
                do Format-Number(#Amount, $ded04, '0000000009')
                let $ded05        = rtrim($check_ssn,' ')

                do get-garn-job-fields

                evaluate &GJ.GVT_ELIG_FEHB

                    when = 'CC'
                    when = 'PER'
                    when = 'TAP'
                    when = 'TSV'
                        let $ded06  = 'Y'                                  !medical support indicator
                        break
                    when = 'NE'
                        let $ded06  = 'N'                                  !medical support indicator
                        break
                    when-other
                        let $ded06  = 'N'                                  !medical support indicator
                        break

                end-evaluate

                let $ded07        = substr(upper($check_paycheck_name),1,10)   !non custodial parent name
                let $ded08        = substr(rtrim(&GARN_SPEC.FIPS_CODE,' '),1,7)        !fipps code

                evaluate &GJ.EMPL_STATUS

                    when = 'D'
                    when = 'R'
                    when = 'S'
                    when = 'T'
                        let $ded09  = 'Y'                                         !emp termination ind
                        break
                    when-other
                        let $ded09  = 'N'                                         !emp termination ind
                       break

                end-evaluate

                add 1 to #garn_child_support_count
                add #amount to #total_garn_child_support_amt

                break

            when-other
                break

        end-evaluate

    when-other

      !stub for future CCD payment types
      break

end-evaluate

let $addendum_info         = ''

if isblank($ded09)

   if isblank($ded08)

      if isblank($ded07)   !field 7 and 8 and 9 are blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'***\'

      else                 !field 8 and 9 are blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'**\'

      end-if

   else

      if isblank($ded07)   !field 7 and 9 are blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'**'||upper($ded08)||'*\'

      else                 !field 9 is blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'*'||upper($ded08)||'*\'

     end-if

   end-if

else

   if isblank($ded08)

      if isblank($ded07)   !field 7 and 8 are blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'***'||upper($ded09)||'\'

      else                 !field 8 is blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'**'||upper($ded09)||'\'

      end-if

   else

      if isblank($ded07)   !field 7 is blank

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'**'||upper($ded08)||'*'||upper($ded09)||'\'

      else                 !all 9 fields have a value

         let $addendum_info = upper($ded)||'*'||upper($ded01)||'*'||upper($ded02)||'*'||upper($ded03)||'*'||upper($ded04)||'*'||upper($ded05)||'*'||upper($ded06)||'*'||upper($ded07)||'*'||upper($ded08)||'*'||upper($ded09)||'\'

      end-if

   end-if

end-if

do write-venmis

end-procedure       !format-eft-garn



!**********************************
begin-procedure get-garn-job-fields
!**********************************

BEGIN-SELECT

GJ.EMPL_STATUS
GJ.GVT_ELIG_FEHB

FROM PS_GVT_JOB GJ
WHERE GJ.EMPLID   = $check_emplid
AND   GJ.EMPL_RCD = #check_empl_rcd_nbr
AND   GJ.EFFDT    = (SELECT MAX(GJ1.EFFDT)
                     FROM PS_GVT_JOB GJ1
                     WHERE GJ1.EMPLID          = GJ.EMPLID
                     AND   GJ1.EMPL_RCD        = GJ.EMPL_RCD
                     AND   GJ1.EFFDT          <= $check_pay_end_dt)
AND   GJ.EFFSEQ   = (SELECT MAX(GJ2.EFFSEQ)
                     FROM PS_GVT_JOB GJ2
                     WHERE GJ2.EMPLID          = GJ.EMPLID
                     AND   GJ2.EMPL_RCD        = GJ.EMPL_RCD
                     AND   GJ2.EFFDT           = GJ.EFFDT)
END-SELECT

end-procedure



!****************************
begin-procedure format-venmis
!****************************
!format vendor tax info

let $txp01             = ''
let $txp02             = ''
let $txp03             = ''
let $txp04             = ''
let $txp05             = ''
let $txp06             = ''
let $txp07             = ''
let $txp08             = ''
let $txp09             = ''
let $txp10             = ''
let $payee_id_number   = &ROUTE_TAX.GVT_PAYEE_ID_NO
let $record_code       = 'A'
let $line_code         = 'M'
let $account_holder    = &ROUTE_TAX.GVT_PAYEE_NAME
let $account_code      = &ROUTE_TAX.ACCOUNT_TYPE
let $routing_id_number = &ROUTE_TAX.BANK_CD
let $account_number    = &ROUTE_TAX.ACCOUNT_NUM

let #amount            = #tax_amount
let #vendor_tax_tot = #vendor_tax_tot + #amount
let #vendor_tax_count = #vendor_tax_count + 1
let #venmis_file_tot   = #venmis_file_tot + #amount

multiply 100 times #Amount
do Format-Number(#Amount, $payment_amount, '0000000009')

do set-period-end-date

let $txp   = 'TXP'
let $txp01 = &ROUTE_TAX.GVT_TAXPAYER_ID
let $txp02 = &ROUTE_TAX.GVT_TAX_TYPE
let $txp10 = &ROUTE_TAX.GVT_TXP_VERIF

let $txp04  = &ROUTE_TAX.GVT_TXP_AMT_1_IND
let #amount = #tax_amount
multiply 100 times #Amount
do Format-Number(#Amount, $txp05, '0000000009')

if &ROUTE_TAX.GVT_TXP_AMT_2_IND <> ''

    let $txp06  = &ROUTE_TAX.GVT_TXP_AMT_2_IND
    let #amount = #tax_amount
    multiply 100 times #Amount
    do Format-Number(#Amount, $txp07, '0000000009')

end-if

if &ROUTE_TAX.GVT_TXP_AMT_3_IND <> ''

    let $txp08  = &ROUTE_TAX.GVT_TXP_AMT_3_IND
    let #amount = #tax_amount
    multiply 100 times #Amount
    do Format-Number(#Amount, $txp09, '0000000009')

end-if

let $addendum_info = ''

if isblank($txp08)

    if isblank($txp06)

        if isblank($txp10)

            let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'******\'

        else

            let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'*****'||upper($txp10)||'\'

        end-if

    else

        if isblank($txp10)

            let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'*'||upper($txp06)||'*'||upper($txp07)||'****\'

        else

            let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'*'||upper($txp06)||'*'||upper($txp07)||'***'||upper($txp10)||'\'

        end-if

    end-if

else

    if isblank($txp10)

        let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'*'||upper($txp06)||'*'||upper($txp07)||'*'||upper($txp08)||'*'||upper($txp09)||'**\'

    else

        let $addendum_info = upper($txp)||'*'||upper($txp01)||'*'||upper($txp02)||'*'||upper($txp03)||'*'||upper($txp04)||'*'||upper($txp05)||'*'||upper($txp06)||'*'||upper($txp07)||'*'||upper($txp08)||'*'||upper($txp09)||'*'||
                             upper($txp10)

    end-if

end-if

do write-venmis

end-procedure       !format-venmis

!**********************************
begin-procedure set-period-end-date
!**********************************

evaluate &ROUTE_TAX.GVT_TAX_PERIOD

when = 'P'

    let $txp03 = substr($work_check_date,7,2)||substr($work_check_date,1,2)||substr($work_check_date,4,2)

    BREAK

when = 'M'

    let $txp_month = substr($work_check_date, 1, 2)

    if $txp_month = '02'

        let $txp_days = '28'

    else

       if $txp_month = '04' or
          $txp_month = '06' or
          $txp_month = '09' or
          $txp_month = '11'

           let $txp_days = '30'

       else

           let $txp_days = '31'

       end-if

    end-if

    let $txp03 = substr($work_check_date,7,2)||$txp_month||$txp_days

    BREAK

when = 'Q'

    let $txp_month = substr($work_check_date, 1, 2)

    if $txp_month > '09'

        let $txp_days  = '31'
        let $txp_month = '12'

    else

       if $txp_month > '06'

           let $txp_days  = '30'
           let $txp_month = '09'

       else

           if $txp_month > '03'

               let $txp_days  = '30'
               let $txp_month = '06'

           else

               let $txp_days  = '31'
               let $txp_month = '03'

           end-if

       end-if

    end-if

    let $txp03 = substr($work_check_date,7,2)||$txp_month||$txp_days

    BREAK

when = 'S'

    let $txp_month = substr($work_check_date, 1, 2)

    if $txp_month > '06'

        let $txp_days  = '31'
        let $txp_month = '12'

    else

        let $txp_days  = '30'
        let $txp_month = '06'

    end-if

    let $txp03 = substr($work_check_date,7,2)||$txp_month||$txp_days

    BREAK

when-other

    let $txp_month = '12'
    let $txp_days  = '31'

    let $txp03 = substr($work_check_date,7,2)||$txp_month||$txp_days

    BREAK

end-evaluate

end-procedure       !set-period-end-date

!*****************************
begin-procedure write-88-check
!*****************************

if $payment_amount <> '00000000'
    do format-appropriation
    write 1 from $ssn:9
                 $record_code:1
                 $object_code:1
                 $mail_sort_code:1
                 $type_payment_code:1
                 $payment_amount:8
                 $line_code:1
                 $blank:1
                 $agency_use:4
                 $desig_agent:4
                 $blanks_2:2
                 $agency_loc_code:8
                 $appropriation:16
                 $payee_name:25
                 $blanks_5:5
                 $record_mark:1

let #check_88_count = #check_88_count + 1


end-if

end-procedure       !write-88-check

!******************************
begin-procedure write-152-check
!******************************

if $payment_amount <> '00000000'

    do format-appropriation

    write 1 from $ssn:9
                 $record_code:1
                 $object_code:1
                 $mail_sort_code:1
                 $type_payment_code:1
                 $payment_amount:8
                 $line_code:1
                 $zip_control_code:1
                 $agency_use:4
                 $desig_agent:4
                 $blanks_2:2
                 $agency_loc_code:8
                 $appropriation:16
                 $payee_name:25
                 $zip_code:9
                 $address1:35
                 $city_state:18
                 $blanks_7:7
                 $record_mark:1

    let #check_152_count = #check_152_count + 1

end-if

end-procedure       !write-152-check

!******************************
begin-procedure write-192-check
!******************************

if $payment_amount <> '00000000'

    do format-appropriation

    write 1 from $ssn:9
                 $record_code:1
                 $object_code:1
                 $mail_sort_code:1
                 $type_payment_code:1
                 $payment_amount:8
                 $line_code:1
                 $zip_control_code:1
                 $agency_use:4
                 $desig_agent:4
                 $blanks_2:2
                 $agency_loc_code:8
                 $appropriation:16
                 $payee_name:25
                 $zip_code:9
                 $address1:35
                 $address2:35
                 $city_state:18
                 $blanks_12:12
                 $record_mark:1

       let #check_192_count = #check_192_count + 1

end-if

end-procedure       !write-192-check

!********************************
begin-procedure write-200-8-check
!********************************

if $payment_amount <> '00000000'

    do format-appropriation

    write 7 from $ssn:9
                 $record_code:1
                 $object_code:1
                 $mail_sort_code:1
                 $type_payment_code:1
                 $payment_amount:8
                 $line_code:1
                 $zip_control_code:1
                 $agency_name_location:10
                 $agency_loc_code:8
                 $appropriation:16
                 $address1:25
                 $zip_code:9
                 $payee_name:35
                 $address2:35
                 $city_state:18
                 $blanks_10:10
                 $top_eligibility:1
                 $blanks_9:9
                 $record_mark:1

      let #check_200_count   = #check_200_count + 1

      let #check_200_8_count = #check_200_8_count + 1

end-if

end-procedure       !write-200-8-check

!********************************
begin-procedure write-200-9-check
!********************************

if $payment_amount <> '00000000'

     do format-appropriation

    write 7 from $ssn:9
                 $record_code:1
                 $object_code:1
                 $mail_sort_code:1
                 $type_payment_code:1
                 $payment_amount:8
                 $line_code:1
                 $zip_control_code:1
                 $agency_use:4
                 $desig_agent:4
                 $top_eligibility:1
                 $blank:1
                 $agency_loc_code:8
                 $appropriation:16
                 $alloter_name:25
                 $zip_code:9
                 $payee_name:35
                 $address1:35
                 $city_state:18
                 $blanks_8:8
                 $fo_acct_number:12
                 $record_mark:1

     let #check_200_count   = #check_200_count + 1

     let #check_200_9_count = #check_200_9_count + 1

end-if

end-procedure       !write-200-9-check

!***********************************
begin-procedure format-appropriation
!***********************************

let $appropriation = ' APPROPRIATION '

end-procedure       !format-appropriation


!************************
begin-procedure write-eft
!************************

if $payment_amount <> '00000000'

      write 2 from $payee_id_number:9
                   $record_code:1
                   $payment_amount:8
                   $line_code:1
                   $agency_loc_code:8
                   $account_holder:22
                   $blanks_3:3
                   $account_code:1
                   $routing_id_number:9
                   $account_number:17
                   $blanks_81:81

       if $process <> 'eft sort'

               let #eft_count = #eft_count + 1

        end-if

end-if

end-procedure       !write-eft

!**************************************
begin-procedure write-venmis-deductions
!**************************************

if $payment_amount <> '0000000000'

    write 3 from $payee_id_number:9
                 $record_code:1
                 $payment_amount:10
                 $line_code:1
                 $agency_loc_code:8
                 $account_holder:22
                 $blanks_1:1
                 $account_code:1
                 $routing_id_number:9
                 $account_number:17
                 $blanks_81:81

    if $process <> 'venmis sort'

        let #venmis_count = #venmis_count + 1

    end-if

end-if

end-procedure       !write-venmis-deductions

!***************************
begin-procedure write-venmis
!***************************

if $payment_amount <> '0000000000'

    write 3 from $payee_id_number:9
                 $record_code:1
                 $payment_amount:10
                 $line_code:1
                 $agency_loc_code:8
                 $account_holder:22
                 $blanks_1:1
                 $account_code:1
                 $routing_id_number:9
                 $account_number:17
                 $addendum_info:80
                 $blank:1

     if $process <> 'venmis sort'

          let #venmis_count = #venmis_count + 1

     end-if
end-if

end-procedure       !write-venmis

!***************************************
begin-procedure determine-bond-seq-start
!***************************************

BEGIN-SELECT

BOND_SEQ.BOND_LOG_SEQ

FROM PS_BOND_LOG BOND_SEQ


WHERE BOND_SEQ.EMPLID            =  &BOND_LOG.EMPLID
AND   BOND_SEQ.BOND_ID           =  &BOND_LOG.BOND_ID
AND   BOND_SEQ.BOND_OWNER_ID     =  &BOND_LOG.BOND_OWNER_ID
AND   BOND_SEQ.BOND_OTH_REG_TYPE =  &BOND_LOG.BOND_OTH_REG_TYPE
AND   BOND_SEQ.BOND_OTH_REG_ID   =  &BOND_LOG.BOND_OTH_REG_ID
AND   BOND_SEQ.CHECK_DT          <= &BOND_LOG.CHECK_DT
AND   BOND_SEQ.BOND_LOG_SEQ      <  &BOND_LOG.BOND_LOG_SEQ
AND   BOND_SEQ.BOND_LOG_SEQ      >= (SELECT MAX(BOND_SEQ1.BOND_LOG_SEQ)
                                     FROM   PS_BOND_LOG BOND_SEQ1
                                     WHERE  BOND_SEQ1.EMPLID            =  &BOND_LOG.EMPLID
                                     AND    BOND_SEQ1.BOND_ID           =  &BOND_LOG.BOND_ID
                                     AND    BOND_SEQ1.BOND_OWNER_ID     =  &BOND_LOG.BOND_OWNER_ID
                                     AND    BOND_SEQ1.BOND_OTH_REG_TYPE =  &BOND_LOG.BOND_OTH_REG_TYPE
                                     AND    BOND_SEQ1.BOND_OTH_REG_ID   =  &BOND_LOG.BOND_OTH_REG_ID
                                     AND    BOND_SEQ1.BOND_LOG_SEQ      <= &BOND_LOG.BOND_LOG_SEQ
                                     AND    BOND_SEQ1.CHECK_DT          <= &BOND_LOG.CHECK_DT
                                     AND    BOND_SEQ1.BOND_LOG_STATUS   = 'D')

ORDER BY BOND_SEQ.BOND_LOG_SEQ DESC

END-SELECT

if isnull(&BOND_SEQ.BOND_LOG_SEQ) or
   &BOND_SEQ.BOND_LOG_SEQ = 1

    let #bond_seq = 1

else

    let #bond_seq = &BOND_SEQ.BOND_LOG_SEQ

end-if

end-procedure       !determine-bond-seq-start

!*******************************************
begin-procedure determine-bond-purchase-date
!*******************************************

let #units      = 0
let #seq        = 0
let #accum      = 0
let #accum_used = 0

BEGIN-SELECT

BOND_LOG1.CHECK_DT
BOND_LOG1.BOND_COLLECT_AMT
BOND_LOG1.BOND_DISBURSE_AMT
BOND_LOG1.BOND_PURCH_UNITS
BOND_LOG1.BOND_ACCUM_AMT
BOND_LOG1.EMPLID
BOND_LOG1.BOND_ID
BOND_LOG1.BOND_LOG_SEQ

    let #accum = &BOND_LOG1.BOND_ACCUM_AMT - #accum_used

    let #i = 0

    while #i <> &BOND_ARRAY_COUNT


        get $bond_id from BOND_ARRAY(#i) BOND_ID

        evaluate $bond_id

            when = &BOND_LOG.BOND_ID

                get #bond_date_amt from BOND_ARRAY(#i) BOND_DATE_AMT
                let #saved_index = #i
                let #i = &BOND_ARRAY_COUNT
                BREAK

            when <> &BOND_LOG.BOND_ID

                let #i = #i + 1

        end-evaluate

    end-while


    if #accum >= #bond_date_amt


        let $half_purchase_dt = datetostr(&BOND_LOG1.CHECK_DT,'YYYYMMDD')

        let #units = #units + 1

        let #unit = 1

        do create-purchase-log

        do create-bond-transactions

        do update-bond-log-status

        let #accum_used = #accum_used + #bond_date_amt

    end-if



FROM  PS_BOND_LOG BOND_LOG1

WHERE BOND_LOG1.EMPLID            =  $check_emplid
AND   BOND_LOG1.BOND_ID           =  &BOND_LOG.BOND_ID
AND   BOND_LOG1.BOND_OWNER_ID     =  &BOND_LOG.BOND_OWNER_ID
AND   BOND_LOG1.BOND_OTH_REG_TYPE =  &BOND_LOG.BOND_OTH_REG_TYPE
AND   BOND_LOG1.BOND_OTH_REG_ID   =  &BOND_LOG.BOND_OTH_REG_ID
AND   BOND_LOG1.BOND_LOG_SEQ      <= &BOND_LOG.BOND_LOG_SEQ
AND   BOND_LOG1.BOND_LOG_SEQ      >= #bond_seq

ORDER BY BOND_LOG1.BOND_LOG_SEQ

END-SELECT

let #unit = 0

if #units <> &BOND_LOG.BOND_PURCH_UNITS

    while #units <> &BOND_LOG.BOND_PURCH_UNITS

        let $half_purchase_dt = datetostr(&BOND_LOG1.CHECK_DT,'YYYYMMDD')

        do create-bond-transactions

        let #units = #units + 1

        let #unit = #unit + 1

    end-while

    do create-purchase-log

    do update-bond-log-status

end-if

end-procedure       !determine-bond-purchase-date

!**********************************
begin-procedure create-purchase-log
!**********************************

let #seq = #seq + 1

let $log_seq = to_char(&BOND_LOG.BOND_LOG_SEQ)
let $seq     = to_char(#seq)
let $unit    = to_char(#unit)

write 5 from $check_emplid:11
             &BOND_LOG.BOND_ID:3
             &BOND_LOG.BOND_OWNER_ID:2
             &BOND_LOG.BOND_OTH_REG_TYPE:1
             &BOND_LOG.BOND_OTH_REG_ID:2
             $log_seq:3
             $seq:3
             $unit:3
             $half_purchase_dt:8

let #bond_purchase_log_count = #bond_purchase_log_count + 1

end-procedure       !create-purchase-log

!***************************************
begin-procedure create-bond-transactions
!***************************************

let $bond_denom           = ''
let $zip_code             = ''
let $bond_owner_ssn_code  = ''
let $bond_empe_no         = ''
let $bond_suffix          = ''
let $bond_issue_mm        = ''
let $bond_issue_yy        = ''
let $bond_line_code       = ''
let $bond_agy_use         = ''
let $desig_agent          = ''
let $bond_mail_code       = ''
let $bond_co_own_ben_code = ''
let $bond_ssn_of_ben      = ''
let $bond_name_of_ben     = ''
let $bond_ssn_of_owner    = ''
let $bond_name_of_owner   = ''
let $bond_address1        = ''
let $bond_address2        = ''
let $bond_address3        = ''
let $bond_address_city    = ''
let $bond_address_state   = ''
let $bond_address_country = ''
let $Address_type  = ''
let $benef-same-address = ''
let $benef-address-type = ''
let $bond_dlvy_id = ''

do determine-bond-address

do format-bonds

end-procedure       !create-bond-transactions

!*************************************
begin-procedure determine-bond-address
!*************************************


DO DETERMINE-BOND-ADDRESS-TYPE

if &BOND_LOG.BOND_OWNER_ID <> 'EE'
 ! Dependent Owns bond

      if $bond_dvly_id  = 'EE'
         do retrieve-empe-bond-address
      else
        do retrieve-benef-bond-address
        ! Check to see if the dependent table has
        !  the same address as employee flag checked
        if $benef-same-address = 'Y'
              let $Address_type  =  $benef-address-type
             do retrieve-empe-bond-address
        end-if

      end-if


else

    do retrieve-empe-bond-address

end-if

if $bond_address1 = ' '

    do get-designated-agent

end-if


end-procedure       !determine-bond-address

!******************************************
begin-procedure retrieve-benef-bond-address
!******************************************

BEGIN-SELECT

BENEF.NAME
BENEF.ADDRESS1
BENEF.ADDRESS2
BENEF.ADDRESS3
BENEF.CITY
BENEF.STATE
BENEF.COUNTRY
BENEF.POSTAL
BENEF_NID.NATIONAL_ID
BENEF.ADDRESS_TYPE
BENEF.SAME_ADDRESS_EMPL

    let $benef-same-address = rtrim(ltrim(&BENEF.SAME_ADDRESS_EMPL, ' '), ' ')
    let $benef-address-type = rtrim(ltrim(&BENEF.ADDRESS_TYPE, ' '), ' ')
    !let $benef-same-address = &BENEF.SAME_ADDRESS_EMPL
    !let $benef-address-type = &BENEF.ADDRESS_TYPE


    let $name                = upper(substr(&BENEF.NAME,1,23))
    do rotate-name
    let $bond_address1       = upper($name)
    let $name = ''
    let $bond_address2      = upper(substr(&BENEF.ADDRESS1,1,33))
    let $bond_address3      = upper(substr(&BENEF.ADDRESS2,1,33))
    let $bond_address_city  = upper(substr(&BENEF.CITY,1,20))
    let $bond_address_state = upper(substr(&BENEF.STATE,1,2))
    let $bond_country       = &BENEF.COUNTRY
    let $zip_5              = substr(&BENEF.POSTAL,1,5)
    let $zip_4              = substr(&BENEF.POSTAL,7,4)
    let $zip_code           = $zip_5||$zip_4

FROM   PS_DEPENDENT_BENEF BENEF,
       PS_DEP_BENEF_NID BENEF_NID

WHERE BENEF.EMPLID               = &BOND_LOG.EMPLID
AND   BENEF.DEPENDENT_BENEF      = $bond_dlvy_id
AND   BENEF_NID.EMPLID           = &BOND_LOG.EMPLID
AND   BENEF_NID.DEPENDENT_BENEF  = $bond_dlvy_id
AND   BENEF_NID.COUNTRY          = 'USA'
AND   BENEF_NID.NATIONAL_ID_TYPE = 'PR'

END-SELECT

end-procedure       !retrieve-benef-bond-address

!*******************************************
begin-procedure retrieve-benef-bond-ssn-name
!*******************************************

BEGIN-SELECT

BENEF1.NAME
BENEF1_NID.NATIONAL_ID

FROM   PS_DEPENDENT_BENEF BENEF1,
       PS_DEP_BENEF_NID BENEF1_NID


WHERE BENEF1.EMPLID               = &BOND_LOG.EMPLID
AND   BENEF1.DEPENDENT_BENEF      = &BOND_LOG.BOND_OWNER_ID
AND   BENEF1_NID.EMPLID           = &BOND_LOG.EMPLID
AND   BENEF1.DEPENDENT_BENEF      = &BOND_LOG.BOND_OTH_REG_ID
AND   BENEF1_NID.COUNTRY          = 'USA'
AND   BENEF1_NID.NATIONAL_ID_TYPE = 'PR'

END-SELECT

end-procedure       !retrieve-benef-bond-ssn-name

!*****************************************
begin-procedure retrieve-empe-bond-address
!*****************************************

BEGIN-SELECT

PER.ADDRESS1
PER.ADDRESS2
PER.ADDRESS3
PER.CITY
PER.STATE
PER.COUNTRY
PER.POSTAL

    let $bond_address1      = upper(substr(&PER.ADDRESS1,1,33))
    let $bond_address2      = upper(substr(&PER.ADDRESS2,1,33))
    let $bond_address3      = upper(substr(&PER.ADDRESS3,1,33))
    let $bond_address_city  = upper(substr(&PER.CITY,1,20))
    let $bond_address_state = upper(substr(&PER.STATE,1,2))
    let $bond_country       = &PER.COUNTRY
    let $zip_5              = substr(&PER.POSTAL,1,5)
    let $zip_4              = substr(&PER.POSTAL,7,4)
    let $zip_code           = $zip_5||$zip_4

FROM  PS_PERSON_ADDRESS PER
WHERE PER.EMPLID = $check_emplid
AND PER.ADDRESS_TYPE = $ADDRESS_TYPE
AND PER.EFF_STATUS = 'A'
END-SELECT

end-procedure       !retrieve-empe-bond-address


!************************************* **
begin-procedure DETERMINE-BOND-ADDRESS-TYPE
!******************************************
BEGIN-SELECT
BOND_SPEC.ADDRESS_TYPE
BOND_SPEC.BOND_DLVY_ID
   let $Address_type  = &BOND_SPEC.ADDRESS_TYPE
  ! let $same_address_empl = rtrim(ltrim(&BOND_SPEC.SAME_ADDRESS_EMPL, ' '), ' ')
   let $bond_dlvy_id = rtrim(ltrim(&BOND_SPEC.BOND_DLVY_ID, ' '), ' ')
FROM PS_BOND_SPEC_DATA  BOND_SPEC

WHERE BOND_SPEC.EMPLID            = &BOND_LOG.EMPLID
AND   BOND_SPEC.BOND_ID           = &BOND_LOG.BOND_ID
AND   BOND_SPEC.BOND_OWNER_ID     = &BOND_LOG.BOND_OWNER_ID
AND   BOND_SPEC.BOND_OTH_REG_TYPE = &BOND_LOG.BOND_OTH_REG_TYPE
AND   BOND_SPEC.BOND_OTH_REG_ID   = &BOND_LOG.BOND_OTH_REG_ID
AND   BOND_SPEC.EFFDT             = (SELECT MAX(BOND_SPEC1.EFFDT)
                                     FROM PS_BOND_SPEC_DATA BOND_SPEC1
                                     WHERE BOND_SPEC1.EMPLID            = &BOND_LOG.EMPLID
                                     AND   BOND_SPEC1.BOND_ID           = &BOND_LOG.BOND_ID
                                     AND   BOND_SPEC1.BOND_OWNER_ID     = &BOND_LOG.BOND_OWNER_ID
                                     AND   BOND_SPEC1.BOND_OTH_REG_TYPE = &BOND_LOG.BOND_OTH_REG_TYPE
                                     AND   BOND_SPEC1.BOND_OTH_REG_ID   = &BOND_LOG.BOND_OTH_REG_ID
                                     AND   BOND_SPEC1.EFFDT            <= &BOND_LOG.CHECK_DT)
end-select
end-procedure


!***************************
begin-procedure format-bonds
!***************************

if &BOND_LOG.BOND_OWNER_ID = 'EE'

    let $bond_owner_ssn_code = '0'

    let $name                = substr($check_paycheck_name,1,33)
    do rotate-name
    let $bond_name_of_owner  = upper($name)
    let $bond_ssn_of_owner   = upper(rtrim($check_ssn,' '))

else
    do retrieve-benef-bond-ssn-name   !SSD note to CHRIS: Please review the code for dependent
    let $bond_owner_ssn_code = '1'

    let $name                = substr(&BENEF1.NAME,1,23)
    do rotate-name
    let $bond_name_of_owner  = upper($name)
    let $bond_ssn_of_owner   = upper(rtrim(&BENEF_NID.NATIONAL_ID,' '))

end-if

evaluate &BOND_LOG.BOND_OTH_REG_TYPE

    when = 'N'

        let $bond_co_own_ben_code = ' '

    when = 'B'

        let $bond_co_own_ben_code = 'POD'

    when = 'C'

        let $bond_co_own_ben_code = 'OR'

end-evaluate

evaluate &BOND_LOG.BOND_OTH_REG_ID

    when = 'EE'

        let $name             = substr($check_paycheck_name,1,28)
        do rotate-name
        let $bond_name_of_ben = upper($name)
        let $bond_ssn_of_ben  = upper(rtrim($check_ssn,' '))

    when-other

        do retrieve-benef-bond-ssn-name

        let $name             = substr(&BENEF1.NAME,1,28)
        do rotate-name
        let $bond_name_of_ben = upper($name)
        let $bond_ssn_of_ben  = upper(rtrim(&BENEF_NID.NATIONAL_ID,' '))

end-evaluate

let $bond_empe_no  = upper(rtrim($check_ssn, ' '))
! let $bond_issue    = datetostr(&CHK.CHECK_DT,'MMDDYYYY') !SDEVI changing this to $half_purchase_dt to confirm with SBLAKE-5733-R
!let $bond_issue_mm = substr($bond_issue,1,2)
!let $bond_issue_yy = substr($bond_issue,7,2)
let $bond_issue_mm = substr($half_purchase_dt,5,2)
let $bond_issue_yy = substr($half_purchase_dt,3,2)

if $bond_country <> 'USA'

    do get-country-descr

    let $bond_address_indic = '1'

else

    let $bond_address_indic = '0'

end-if

let #i = 0

while #i <> &BOND_ARRAY_COUNT

    get $bond_id from BOND_ARRAY(#i) BOND_ID

    evaluate $bond_id

        when = &BOND_LOG.BOND_ID

            array-add 1 to BOND_ARRAY(#i) COUNT
            get #purchase_amt from BOND_ARRAY(#i) PURCHASE_AMT
            get $bond_denom   from BOND_ARRAY(#i) DENOM
            get $series       from BOND_ARRAY(#i) SERIES
            get $sort_bond_id from BOND_ARRAY(#i) BOND_ID
            let #saved_index = #i
            let #i = &BOND_ARRAY_COUNT
            BREAK

        when <> &BOND_LOG.BOND_ID

            let #i = #i + 1

    end-evaluate

end-while

do write-bond-file-320

let #bond_count = #bond_count + 1

let #bond_file_tot = #bond_file_tot + #purchase_amt

end-procedure       !format-bonds

!********************************
begin-procedure get-country-descr
!********************************

BEGIN-SELECT

COUNTRY.DESCR

    let $bond_address3 = substr(&COUNTRY.DESCR,1,33)

FROM PS_COUNTRY_TBL COUNTRY

WHERE COUNTRY.COUNTRY = $bond_country

END-SELECT

end-procedure       !get-country-descr

!**********************************
begin-procedure write-bond-file-320
!**********************************

let $bond_inscription = 'B'
let #one              = 1
do Format-Number(#one, $one, '0009')

write 4 from $bond_inscription:1
             $bond_ssn_of_owner:9
             $bond_name_of_owner:33
             $bond_address_indic:1
             $bond_owner_ssn_code:1
             $bond_address1:33
             $bond_address2:33
             $bond_address3:33
             $bond_address_city:20
             $bond_address_state:2
             $zip_code:9
             $bond_co_own_ben_code:3
             $bond_name_of_ben:28
             $bond_denom:1
             $one:4
             $frb_company_id:10
             $frb_location_id:10
             $bond_empl_no:9
             $bond_issue_mm:2
             $bond_issue_yy:2
             $series:2
             $sort_bond_id:3
             $blanks_71:71

end-procedure       !write-bond-file-320

!*********************************
begin-procedure write-check-header
!*********************************

let $dhdr        = 'DHDR'
let $file_id     = 'REGSALARY'||$agency_id
let $descr       = substr($agency_descr, 1, 20)
let $id          = 'SALARY'
let $schedule    = substr($check_schedule, 1, 10)
let $record_code = 'E'

write 1 from $blanks_9:9
             $record_code:1
             $blanks_15:15
             $id:10
             $descr:20
             $agency_phone:12
             $blanks_3:3

end-procedure       !write-check-header

!*********************************
begin-procedure write-vendor-check-header
!*********************************

let $dhdr        = 'DHDR'
let $file_id     = 'REGSALARY'||$agency_id
let $descr       = substr($agency_descr, 1, 20)
let $id          = 'VENDOR'
let $schedule    = substr($venchk_schedule, 1, 10)
let $record_code = 'E'
let $venchk_hdr_done = 'Y'


write 7 from $blanks_9:9
             $record_code:1
             $blanks_15:15
             $id:10
             $descr:20
             $agency_phone:12
             $blanks_3:3

end-procedure       !write-check-header

!***********************************
begin-procedure close-treasury-files
!***********************************

if $check_schedule <> ''

      do write-check-footer

      close 1

end-if

if $venchk_schedule <> ''

      do write-vendor-check-footer

      close 7

end-if

if $eft_schedule <> ''

    close 2

end-if

if $venmis_schedule <> ''

    close 3

end-if

if $bond_creation = 'Y'

    close 4
    close 5

end-if

end-procedure       !close-treasury-files

!*********************************
begin-procedure write-check-footer
!*********************************

let $deor        = 'DEOR'
let #check_count = #check_88_count + #check_152_count + #check_192_count
let $record_code = 'C'
let $id          = lpad($agency_loc_code,10,' ')

do Format-Number(#check_count, $footer_count, '000009')
do Format-Number(#check_file_tot, $footer_amount, '0000000000000V09')

write 1 from $blanks_3:3
             $footer_count:6
             $record_code:1
             $footer_amount:15
             $id:10
             $blanks_35:35


let $record_code = 'F'

write 1 from $blanks_3:3
             $footer_count:6
             $record_code:1
             $footer_amount:15
             $id:10
             $blanks_35:35

end-procedure       !write-check-footer

!*********************************
begin-procedure write-vendor-check-footer
!*********************************

let $deor        = 'DEOR'
let #venchk_count = #check_200_count
let $record_code = 'C'
let $id          = lpad($agency_loc_code,10,' ')

do Format-Number(#venchk_count, $footer_count, '000009')
do Format-Number(#venchk_file_tot, $footer_amount, '0000000000000V09')

write 7 from $blanks_3:3
             $footer_count:6
             $record_code:1
             $footer_amount:15
             $id:10
             $blanks_35:35


let $record_code = 'F'

write 7 from $blanks_3:3
             $footer_count:6
             $record_code:1
             $footer_amount:15
             $id:10
             $blanks_35:35

end-procedure       !write-vender-check-footer

!***********************************
begin-procedure update-ecs-schedules
!***********************************
! Update the ECS Control record and
! Generate the Summary Report for Salary Checks

if $check_schedule <> '' and
   #check_file_tot > 0

    let #check_count = #check_88_count + #check_152_count + #check_192_count

    BEGIN-SQL

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_GEN_DT     = $AsOfToday,
               GVT_ECS_REQ_PAY_DT = $save_check_date,
               GVT_ECS_NO_OF_PMNT = #check_count,
               GVT_ECS_TOT_AMT    = #check_file_tot
        WHERE  COMPANY            = $company
        AND    GVT_SCHEDULE_NO    = $check_schedule

    END-SQL

    print $company              (+1,2)
    print $check_schedule       (,10)
    print 'Net Pay'             (,27)
    print #check_net_count      (,59)  edit 999,999,999
    print #check_net_tot        (,73)  edit 999,999,999.99
    print 'Total'               (+1,27)
    print #check_count          (,59)  edit 999,999,999
    print #check_file_tot       (,73)  edit 999,999,999.99

end-if

! Update the ECS Control record and
! Generate the Summary Report for Vendor Checks
if $venchk_schedule <> '' and
   #venchk_file_tot > 0

    let #venchk_count = #check_200_count

    BEGIN-SQL

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_GEN_DT     = $AsOfToday,
               GVT_ECS_REQ_PAY_DT = $save_check_date,
               GVT_ECS_NO_OF_PMNT = #venchk_count,
               GVT_ECS_TOT_AMT    = #venchk_file_tot
        WHERE  COMPANY            = $company
        AND    GVT_SCHEDULE_NO    = $venchk_schedule

    END-SQL

    let #check_deduct_count = #check_deduct_count + #check_other_count
    let #check_deduct_tot = #check_deduct_tot + #check_other_tot

    print $company              (+2,2)
    print $venchk_schedule      (,10)

    print 'Garnishments'        (,27)
    print #check_garnish_count  (,59)  edit 999,999,999
    print #check_garnish_tot    (,73)  edit 999,999,999.99
    print 'Charity'             (+1,27)
    print #check_charity_count  (,59)  edit 999,999,999
    print #check_charity_tot    (,73)  edit 999,999,999.99
    print 'Union Dues'          (+1,27)
    print #check_union_count    (,59)  edit 999,999,999
    print #check_union_tot      (,73)  edit 999,999,999.99
    print 'Tax Payments'        (+1,27)
    print #check_tax_count      (,59)  edit 999,999,999
    print #check_tax_tot        (,73)  edit 999,999,999.99
    print 'Other Deductions'    (+1,27)
    print #check_deduct_count   (,59)  edit 999,999,999
    print #check_deduct_tot     (,73)  edit 999,999,999.99
    print 'Total'               (+1,27)
    print #venchk_count         (,59)  edit 999,999,999
    print #venchk_file_tot      (,73)  edit 999,999,999.99

end-if
! Update the ECS Control record and
! Generate the Summary Report for Salary EFT

if $eft_schedule <> '' and
   #eft_file_tot > 0

    BEGIN-SQL

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_GEN_DT     = $AsOfToday,
               GVT_ECS_REQ_PAY_DT = $save_check_date,
               GVT_ECS_NO_OF_PMNT = #eft_count,
               GVT_ECS_TOT_AMT    = #eft_file_tot
        WHERE  COMPANY            = $company
        AND    GVT_SCHEDULE_NO    = $eft_schedule

    END-SQL

    print $company              (+2,2)
    print $eft_schedule         (,10)
    print 'Net Pay'             (,27)
    print #eft_net_count        (,59)  edit 999,999,999
    print #eft_net_tot          (,73)  edit 999,999,999.99
    print 'Total'               (+1,27)
    print #eft_count            (,59)  edit 999,999,999
    print #eft_file_tot         (,73)  edit 999,999,999.99

end-if
! Update the ECS Control record and
! Generate the Summary Report for Vendor EFT

if $venmis_schedule <> '' and
   #venmis_file_tot > 0

    BEGIN-SQL

        UPDATE PS_GVT_ECS_CONTROL
        SET    GVT_ECS_GEN_DT     = $AsOfToday,
               GVT_ECS_REQ_PAY_DT = $save_check_date,
               GVT_ECS_NO_OF_PMNT = #venmis_count,
               GVT_ECS_TOT_AMT    = #venmis_file_tot
        WHERE  COMPANY            = $company
        AND    GVT_SCHEDULE_NO    = $venmis_schedule

    END-SQL

    let #eft_deduct_count = #eft_deduct_count + #eft_dist_count
    let #eft_deduct_tot = #eft_deduct_tot + #eft_dist_tot


     LET #all_eft_oth_tot    = #vendor_other_tot   + #eft_deduct_tot
     let #all_eft_oth_count  = #vendor_other_count + #eft_deduct_count


    print $company              (+2,2)
    print $venmis_schedule      (,10)
    print 'Garnishments'        (,27)
    print #eft_garn_count       (,59)  edit 999,999,999
    print #eft_garn_tot         (,73)  edit 999,999,999.99
    print 'Charity'             (+1,27)
    print #vendor_charity_count (,59)  edit 999,999,999
    print #vendor_charity_tot   (,73)  edit 999,999,999.99
    print 'Union Dues'          (+1,27)
    print #vendor_union_count   (,59)  edit 999,999,999
    print #vendor_union_tot     (,73)  edit 999,999,999.99
    print 'Tax Payments'        (+1,27)
    print #vendor_tax_count     (,59)  edit 999,999,999
    print #vendor_tax_tot       (,73)  edit 999,999,999.99
    print 'Other Deductions'    (+1,27)
    print #all_eft_oth_count    (,59)  edit 999,999,999
    print #all_eft_oth_tot      (,73)  edit 999,999,999.99
    !print 'Other Deductions'    (+1,27)
    !print #eft_dist_count       (,59)  edit 999,999,999
    !print #eft_dist_tot         (,73)  edit 999,999,999.99
    print 'Total'               (+1,27)
    print #venmis_count         (,59)  edit 999,999,999
    print #venmis_file_tot      (,73)  edit 999,999,999.99

end-if

end-procedure       !update-ecs-schedules

!**********************************
begin-procedure update-pay-calendar
!**********************************

BEGIN-SQL

    UPDATE PS_PAY_CALENDAR

    SET    GVT_TRES_RUN = 'Y'

    WHERE  RUN_ID = $Run_id

 END-SQL

end-procedure       !update-pay-calendar

!*********************************
begin-procedure delete-run-control
!*********************************

BEGIN-SQL

DELETE FROM PS_GVT_RUN_CNTL
WHERE  RUN_CNTL_ID = $Prcs_Run_Cntl_ID

END-SQL

end-procedure       !delete-run-control


!************************************
begin-procedure sort-eft-transactions
!************************************

let $alc = $agency_loc_code

let $process = 'eft sort'

do clear-eft-sort-table

open $eft_output_file as 2 for-reading record=160:fixed

while 1

    read 2 into $payee_id_number:9
                $record_code:1
                $payment_amount:8
                $line_code:1
                $agency_loc_code:8
                $account_holder:22
                $blanks_3:3
                $account_code:1
                $routing_id_number:9
                $account_number:17
                $blanks_81:81


    if #END-FILE

        break

    end-if

    let $eft_amt         = '00'||$payment_amount

    let $addendum_info   = 'X'

    let $agency_loc_code = $agency_loc_code

    do insert-eft-sort-table

    if #commit_count > 250

        do Commit-Transaction

        let #commit_count = 0

    end-if

end-while

do Commit-Transaction

close 2

let $agency_loc_code = $alc

open $eft_output_file as 2 for-writing record=160:fixed

if $eft_schedule <> ''
   do write-eft-header
   do select-eft-sort-table
   do write-eft-footer
end-if

close 2

end-procedure       !sort-eft-transactions

!***************************************
begin-procedure sort-venmis-transactions
!***************************************

let $alc = $agency_loc_code

let $process = 'venmis sort'

do clear-eft-sort-table

open $venmis_output_file as 3 for-reading record=160:fixed

while 1

    read 3 into $payee_id_number:9
                $record_code:1
                $payment_amount:10
                $line_code:1
                $agency_loc_code:8
                $account_holder:22
                $blanks_1:1
                $account_code:1
                $routing_id_number:9
                $account_number:17
                $addendum_info:80
                $blank:1

    if #END-FILE

        break

    end-if

    let $eft_amt = $payment_amount

    if isnull($addendum_info)

        let $addendum_info = 'X'

    end-if

    let $agency_loc_code = $agency_loc_code

    do insert-eft-sort-table

    if #commit_count > 250

        do Commit-Transaction

        let #commit_count = 0

    end-if

end-while

do Commit-Transaction

close 3

let $agency_loc_code = $alc

open $venmis_output_file as 3 for-writing record=160:fixed

do write-venmis-header

do select-eft-sort-table

do write-venmis-footer

close 3

end-procedure       !sort-venmis-transactions

!***********************************
begin-procedure clear-eft-sort-table
!***********************************

BEGIN-SQL

DELETE FROM PS_R_GVT_EFT_SORT

END-SQL

do Commit-Transaction

end-procedure       !clear-eft-sort-table

!************************************
begin-procedure insert-eft-sort-table
!************************************

if isnull($routing_id_number)
  let $routing_id_number = ' '
end-if

if isnull($payee_id_number)
  let $payee_id_number = ' '
end-if

if isnull($account_holder)
  let $account_holder = ' '
end-if

if isnull($account_code)
  let $account_code = ' '
end-if

if isnull($account_number)
  let $account_number = ' '
end-if

if isnull($line_code)
  let $line_code = ' '
end-if

if isnull($eft_amt)
  let $eft_amt = ' '
end-if

if isnull($addendum_info)
  let $addendum_info = ' '
end-if

BEGIN-SQL

    INSERT INTO PS_R_GVT_EFT_SORT

               (BANK_CD,
                GVT_PAYEE_ID_NO,
                GVT_PAYEE_NAME,
                ACCOUNT_TYPE,
                ACCOUNT_NUM,
                GVT_LINE_CODE,
                GVT_EFT_SORT_AMT,
                GVT_DESCR80)

        VALUES ($routing_id_number,
                $payee_id_number,
                $account_holder,
                $account_code,
                $account_number,
                $line_code,
                $eft_amt,
                $addendum_info)

END-SQL

let #commit_count = #commit_count + 1

end-procedure       !insert-eft-sort-table

!*******************************
begin-procedure write-eft-header
!*******************************

let $dhdr     = 'DHDR'
let $file_id  = $agency_id||'SALARY'
let $descr    = substr($agency_descr,1,20)
let $id       = 'FEDSAL'
let $schedule = substr($eft_schedule,1,10)

write 2 from $dhdr:4
             $blanks_16:16
             $file_id:10
             $jul_date:5
             $blanks_5:5
             $descr:20
             $agency_phone:12
             $id:6
             $schedule:11
             $blanks_71:71

end-procedure       !write-eft-header

!**********************************
begin-procedure write-venmis-header
!**********************************

let $dhdr     = 'DHDR'
let $file_id  = $agency_id||'VENMIS'
let $descr    = substr($agency_descr,1,20)
let $id       = 'VENMIS'
let $schedule = substr($venmis_schedule,1,10)

write 3 from $dhdr:4
             $blanks_16:16
             $file_id:10
             $jul_date:5
             $blanks_5:5
             $descr:20
             $agency_phone:12
             $id:6
             $schedule:11
             $blanks_71:71

end-procedure       !write-venmis-header

!************************************
begin-procedure select-eft-sort-table
!************************************

let $record_code = 'A'

BEGIN-SELECT

EFTSORT.BANK_CD
EFTSORT.GVT_PAYEE_ID_NO
EFTSORT.GVT_PAYEE_NAME
EFTSORT.ACCOUNT_TYPE
EFTSORT.ACCOUNT_NUM
EFTSORT.GVT_LINE_CODE
EFTSORT.GVT_EFT_SORT_AMT
EFTSORT.GVT_DESCR80


    let #length = length(rtrim(&EFTSORT.GVT_PAYEE_ID_NO,' '))

    if #length < 9

        let $payee_id_number = lpad(rtrim(&EFTSORT.GVT_PAYEE_ID_NO,' '),9,' ')

    else

        let $payee_id_number = &EFTSORT.GVT_PAYEE_ID_NO

    end-if

    let $line_code         = &EFTSORT.GVT_LINE_CODE
    let $account_holder    = &EFTSORT.GVT_PAYEE_NAME
    let $account_code      = &EFTSORT.ACCOUNT_TYPE
    let $routing_id_number = &EFTSORT.BANK_CD
    let $account_number    = &EFTSORT.ACCOUNT_NUM
    let $addendum_info     = &EFTSORT.GVT_DESCR80

    evaluate $process

        when = 'eft sort'

            let $payment_amount = substr(&EFTSORT.GVT_EFT_SORT_AMT,3,8)

            if $eft_schedule <> ''

              do write-eft

            end-if

        when = 'venmis sort'

            let $payment_amount = &EFTSORT.GVT_EFT_SORT_AMT

            if $addendum_info = 'X' or
               $addendum_info = ' '

                let $addendum_info = ' '

            end-if

            do write-venmis

    end-evaluate

FROM PS_R_GVT_EFT_SORT EFTSORT

ORDER BY EFTSORT.BANK_CD, EFTSORT.GVT_PAYEE_ID_NO

END-SELECT

end-procedure       !select-eft-sort-table

!*******************************
begin-procedure write-eft-footer
!*******************************

let $deor = 'DEOR'

do Format-Number(#eft_count, $footer_count, '0000000009')
do Format-Number(#eft_file_tot, $footer_amount, '000000000V09')
do Format-Number(#eft_count, $footer_cumm_count, '000000000009')
do Format-Number(#eft_file_tot, $footer_cumm_amount, '00000000000V09')

write 2 from $deor:4
             $blanks_6:6
             $footer_count:10
             $blanks_9:9
             $footer_amount:11
             $blank:1
             $footer_cumm_count:12
             $blank:1
             $footer_cumm_amount:13
             $blanks_85:85
             $agency_loc_code:8

end-procedure       !write-eft-footer

!**********************************
begin-procedure write-venmis-footer
!**********************************

let $deor = 'DEOR'

do Format-Number(#venmis_count, $footer_count, '0000000009')
do Format-Number(#venmis_file_tot, $footer_amount, '0000000000V09')
do Format-Number(#venmis_count, $footer_cumm_count, '000000000009')
do Format-Number(#venmis_file_tot, $footer_cumm_amount, '000000000000V09')

write 3 from $deor:4
             $blanks_6:6
             $footer_count:10
             $blanks_10:10
             $footer_amount:12
             $blank:1
             $footer_cumm_count:12
             $blank:1
             $footer_cumm_amount:14
             $blanks_82:82
             $agency_loc_code:8

end-procedure       !write-venmis-footer

!********************************
begin-procedure sort-bond-records
!********************************

let $process = 'bond sort'

do clear-bond-sort-table

open $bond_output_file as 4 for-reading record=320:fixed

while 1

    read 4 into $bond_inscription:1
                $bond_ssn_of_owner:9
                $bond_name_of_owner:33
                $bond_address_indic:1
                $bond_owner_ssn_code:1
                $bond_address1:33
                $bond_address2:33
                $bond_address3:33
                $bond_address_city:20
                $bond_address_state:2
                $zip_code:9
                $bond_co_own_ben_code:3
                $bond_name_of_ben:28
                $bond_denom:1
                $one:4
                $frb_company_id:10
                $frb_location_id:10
                $bond_empl_no:9
                $bond_issue_mm:2
                $bond_issue_yy:2
                $series:2
                $sort_bond_id:3
                $blanks_71:71

    if #END-FILE

        break

    end-if

    let $frb_company  = $frb_company_id

    let $frb_location = $frb_location_id

    do insert-bond-sort-table

    if #commit_count > 250

        do Commit-Transaction

        let #commit_count = 0

    end-if

end-while

do Commit-Transaction

close 4

if $frb_media_type = 'D'

    open $bond_output_file as 4 for-writing record=240:fixed

else

    open $bond_output_file as 4 for-writing record=320:fixed

    if $frb_include_bdh = 'Y'

        do write-bond-bulk-data-header

    end-if

end-if

do select-bond-sort-table

close 4

end-procedure       !sort-bond-records

!************************************
begin-procedure clear-bond-sort-table
!************************************

BEGIN-SQL

DELETE FROM PS_R_GVT_BOND_ISS

END-SQL

end-procedure       !clear-bond-sort-table

!*************************************
begin-procedure insert-bond-sort-table
!*************************************

if isnull($series)
  let $series = ' '
end-if

if isnull($sort_bond_id)
  let $sort_bond_id = ' '
end-if

if isnull($bond_ssn_of_owner)
  let $bond_ssn_of_owner = ' '
end-if

if isnull($bond_name_of_owner)
  let $bond_name_of_owner = ' '
end-if

if isnull($bond_address_indic)
  let $bond_address_indic = ' '
end-if

if isnull($bond_owner_ssn_code)
  let $bond_owner_ssn_code = ' '
end-if

if isnull($bond_address1)
  let $bond_address1 = ' '
end-if

if isnull($bond_address2)
  let $bond_address2 = ' '
end-if

if isnull($bond_address3)
  let $bond_address3 = ' '
end-if

if isnull($bond_address_city)
  let $bond_address_city = ' '
end-if

if isnull($bond_address_state)
  let $bond_address_state = ' '
end-if

if isnull($zip_code)
  let $zip_code = ' '
end-if

if isnull($bond_co_own_ben_code)
  let $bond_co_own_ben_code = ' '
end-if

if isnull($bond_name_of_ben)
  let $bond_name_of_ben = ' '
end-if

if isnull($bond_denom)
  let $bond_denom = ' '
end-if

if isnull($bond_empl_no)
  let $bond_empl_no = ' '
end-if

if isnull($bond_issue_mm)
  let $bond_issue_mm = ' '
end-if

if isnull($bond_issue_yy)
  let $bond_issue_yy = ' '
end-if

BEGIN-SQL

    INSERT INTO PS_R_GVT_BOND_ISS

               (GVT_BOND_SERIES,
                BOND_ID,
                SSN,
                NAME,
                GVT_BOND_ADDR_IND,
                GVT_BOND_MAIL_DES,
                ADDRESS1,
                ADDRESS2,
                ADDRESS3,
                CITY,
                STATE,
                POSTAL,
                GVT_COOWN_BENEF_CD,
                NAME1,
                GVT_BOND_DENOM_CD,
                SSN1,
                GVT_BOND_ISSUE_MM,
                GVT_BOND_ISSUE_YY)

        VALUES ($series,
                $sort_bond_id,
                $bond_ssn_of_owner,
                $bond_name_of_owner,
                $bond_address_indic,
                $bond_owner_ssn_code,
                $bond_address1,
                $bond_address2,
                $bond_address3,
                $bond_address_city,
                $bond_address_state,
                $zip_code,
                $bond_co_own_ben_code,
                $bond_name_of_ben,
                $bond_denom,
                $bond_empl_no,
                $bond_issue_mm,
                $bond_issue_yy)

END-SQL

let #commit_count = #commit_count + 1

end-procedure       !insert-bond-sort-table

!******************************************
begin-procedure write-bond-bulk-data-header
!******************************************

let $bdh_date = datetostr(datenow(),'MMDDYYYY')

let $bdh_file_date  = substr($bdh_date,3,2)||substr($bdh_date,7,2)||substr($bdh_date,1,2)
let $bdh_file_time  = substr($ReportTime,4,2)||substr($ReportTime,1,2)
let $frb_bd_lrecl   = lpad($frb_bd_lrecl,5,'0')
let $frb_bd_blksize = lpad($frb_bd_blksize,5,'0')

write 4 from $frb_bd_file_t:1
             $frb_bd_file_p:2
             $blank:1
             $frb_bd_rec_aba:9
             $blank:1
             $frb_bd_send_aba:9
             $bdh_file_date:6
             $bdh_file_time:4
             $frb_bd_lrecl:5
             $frb_bd_blksize:5
             $frb_bd_appl_id:4
             $blank:1
             $blank:1
             $frb_bd_extra:31
             $blanks:240

end-procedure       !write-bond-bulk-data-header

!*************************************
begin-procedure select-bond-sort-table
!*************************************

let $frb_company_id  = $frb_company
let $frb_location_id = $frb_location
let $frb_acct_no     = lpad($frb_acct_no,9,'0')
let $frb_acct_branch = lpad($frb_acct_branch,4,'0')
let $frb_dist_desig  = lpad($frb_dist_desig,3,'0')

let #bond_sort_count = 0

BEGIN-SELECT

BONDSORT.GVT_BOND_SERIES
BONDSORT.BOND_ID
BONDSORT.SSN
BONDSORT.NAME
BONDSORT.GVT_BOND_ADDR_IND
BONDSORT.GVT_BOND_MAIL_DES
BONDSORT.ADDRESS1
BONDSORT.ADDRESS2
BONDSORT.ADDRESS3
BONDSORT.CITY
BONDSORT.STATE
BONDSORT.POSTAL
BONDSORT.GVT_COOWN_BENEF_CD
BONDSORT.NAME1
BONDSORT.GVT_BOND_DENOM_CD
BONDSORT.SSN1
BONDSORT.GVT_BOND_ISSUE_MM
BONDSORT.GVT_BOND_ISSUE_YY

    if $saved_bond_series <> rtrim(&BONDSORT.GVT_BOND_SERIES,' ')

        let $saved_bond_series = rtrim(&BONDSORT.GVT_BOND_SERIES,' ')

        if #bond_sort_count > 0

            if $frb_media_type = 'D'

                do write-bond-trailer-240

            else

                do write-bond-trailer-320

            end-if

        end-if

        let $bond_control = 'A'

        let $half_out = datetostr(datenow(),'MMDDYYYY')
        let $bond_issue_mm = substr($half_out,1,2)
        let $bond_issue_yy = substr($half_out,7,2)

        let $pay_end_date = substr($control_end_date,1,2)||substr($control_end_date,3,2)||substr($control_end_date,7,2)

        let $order_type  = '0'
        let $ident_value = '000'

        do retrieve-bond-counts

        if $frb_media_type = 'D'

            do write-bond-control-record-240

        else

            do write-bond-control-record-320

        end-if

    end-if

    let $bond_ssn_of_owner    = &BONDSORT.SSN
    let $bond_name_of_owner   = &BONDSORT.NAME
    let $bond_address_indic   = &BONDSORT.GVT_BOND_ADDR_IND
    let $bond_owner_ssn_code  = &BONDSORT.GVT_BOND_MAIL_DES
    let $bond_address1        = &BONDSORT.ADDRESS1
    let $bond_address2        = rtrim(&BONDSORT.ADDRESS2,' ')
    let $bond_address3        = rtrim(&BONDSORT.ADDRESS3,' ')
    let $bond_address_city    = &BONDSORT.CITY
    let $bond_address_state   = &BONDSORT.STATE
    let $zip_code             = rtrim(&BONDSORT.POSTAL,' ')
    let $bond_co_own_ben_code = rtrim(&BONDSORT.GVT_COOWN_BENEF_CD,' ')
    let $bond_name_of_ben     = rtrim(&BONDSORT.NAME1,' ')
    let $bond_denom           = &BONDSORT.GVT_BOND_DENOM_CD
    let $bond_empl_no         = &BONDSORT.SSN1
    let $bond_issue_mm        = &BONDSORT.GVT_BOND_ISSUE_MM
    let $bond_issue_yy        = &BONDSORT.GVT_BOND_ISSUE_YY
    let $series               = ' '
    let $sort_bond_id         = ' '

    if $frb_media_type = 'D'

        do write-bond-file-240

    else

        do write-bond-file-320

    end-if

    let #bond_sort_count = #bond_sort_count + 1

FROM PS_R_GVT_BOND_ISS BONDSORT

ORDER BY BONDSORT.GVT_BOND_SERIES

END-SELECT

if $frb_media_type = 'D'

    do write-bond-trailer-240

else

    do write-bond-trailer-320

end-if

end-procedure       !select-bond-sort-table

!********************************************
begin-procedure write-bond-control-record-240
!********************************************

write 4 from $bond_control:1
             $bond_issue_mm:2
             $bond_issue_yy:2
             $frb_company_id:10
             $frb_location_id:10
             $pay_end_date:6
             $agency_descr:33
             $agency_address1:33
             $agency_addr_city:20
             $agency_addr_state:2
             $agency_zip_code:9
             $frb_acct_no:9
             $frb_acct_branch:4
             $order_type:1
             $bond_50_count:6
             $bond_75_count:6
             $bond_100_count:6
             $bond_200_count:6
             $bond_500_count:6
             $bond_1000_count:6
             $bond_5000_count:6
             $bond_10000_count:6
             $bond_control_tot:10
             $frb_dist_desig:3
             $blanks_30:30
             $saved_bond_series:2
             $ident_value:3
             $blanks_2:2

do print-bond-control-totals

end-procedure       !write-bond-control-record-240

!********************************************
begin-procedure write-bond-control-record-320
!********************************************

write 4 from $bond_control:1
             $bond_issue_mm:2
             $bond_issue_yy:2
             $frb_company_id:10
             $frb_location_id:10
             $pay_end_date:6
             $agency_descr:33
             $agency_address1:33
             $agency_addr_city:20
             $agency_addr_state:2
             $agency_zip_code:9
             $frb_acct_no:9
             $frb_acct_branch:4
             $order_type:1
             $bond_50_count:6
             $bond_75_count:6
             $bond_100_count:6
             $bond_200_count:6
             $bond_500_count:6
             $bond_1000_count:6
             $bond_5000_count:6
             $bond_10000_count:6
             $bond_control_tot:10
             $frb_dist_desig:3
             $blanks_30:30
             $saved_bond_series:2
             $ident_value:3
             $blanks_82:82

do print-bond-control-totals

end-procedure       !write-bond-control-record-320

!***********************************
begin-procedure retrieve-bond-counts
!***********************************

let $bond_50_count    = '000000'
let $bond_75_count    = '000000'
let $bond_100_count   = '000000'
let $bond_200_count   = '000000'
let $bond_500_count   = '000000'
let $bond_1000_count  = '000000'
let $bond_5000_count  = '000000'
let $bond_10000_count = '000000'
let #bond_50_count    = 0
let #bond_75_count    = 0
let #bond_100_count   = 0
let #bond_200_count   = 0
let #bond_500_count   = 0
let #bond_1000_count  = 0
let #bond_5000_count  = 0
let #bond_10000_count = 0
let #bond_control_tot = 0
let #bond_piece_count = 0

let #i = 0

while #i <> &BOND_ARRAY_COUNT

    get $series from BOND_ARRAY(#i) SERIES

    evaluate $series

        when = $saved_bond_series

            get #purchase_amt from BOND_ARRAY(#i) PURCHASE_AMT
            get $denom        from BOND_ARRAY(#i) DENOM
            get #count        from BOND_ARRAY(#i) COUNT

            evaluate $denom

                when = '2'

                    let #bond_50_count    = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_50_count, $bond_50_count, '000009')

                when = '3'

                    let #bond_75_count    = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_75_count, $bond_75_count, '000009')

                when = '4'

                    let #bond_100_count   = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_100_count, $bond_100_count, '000009')

                when = '5'

                    let #bond_200_count   = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_200_count, $bond_200_count, '000009')

                when = '6'

                    let #bond_500_count   = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_500_count, $bond_500_count, '000009')

                when = '7'

                    let #bond_1000_count  = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_1000_count, $bond_1000_count, '000009')

                when = '8'

                    let #bond_5000_count  = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_5000count, $bond_5000_count, '000009')

                when = '9'

                    let #bond_10000_count = #count
                    let #bond_control_tot = (#bond_control_tot + (#purchase_amt * #count))
                    let #bond_piece_count = #bond_piece_count + #count
                    do Format-Number(#bond_10000count, $bond_10000_count, '000009')

            end-evaluate

    end-evaluate

let #i = #i + 1

end-while

do Format-Number(#bond_control_tot, $bond_control_tot, '00000000V09')

end-procedure       !retrieve-bond-counts

!****************************************
begin-procedure print-bond-control-totals
!****************************************

print 'Series'                            (+5,2) underline
print $saved_bond_series                  (,10)  underline
print '               '                   (+1,2)

if $saved_bond_series = 'I'

    print '$50 Denomination Total Pieces' (+1,2)
    print #bond_50_count                  (,44)  edit b999,999
    print '$75 Denomination Total Pieces' (+1,2)
    print #bond_75_count                  (,44)  edit b999,999

end-if

print '$100 Denomination Total Pieces'    (+1,2)
print #bond_100_count                     (,44)  edit b999,999
print '$200 Denomination Total Pieces'    (+1,2)
print #bond_200_count                     (,44)  edit b999,999
print '$500 Denomination Total Pieces'    (+1,2)
print #bond_500_count                     (,44)  edit b999,999
print '$1,000 Denomination Total Pieces'  (+1,2)
print #bond_1000_count                    (,44)  edit b999,999
print '$5,000 Denomination Total Pieces'  (+1,2)
print #bond_5000_count                    (,44)  edit b999,999
print '$10,000 Denomination Total Pieces' (+1,2) underline
print #bond_10000_count                   (,44)  edit b999,999 underline
print 'Total Pieces'                      (+1,2)
print #bond_piece_count                   (,44)  edit b999,999
print 'Total Purchase for Pieces'         (+2,2)
print #bond_control_tot                   (,35)  edit b9,999,999,999.99

end-procedure       !print-bond-control-totals

!**********************************
begin-procedure write-bond-file-240
!**********************************

let $bond_inscription = 'B'
let #one              = 1
do Format-Number(#one, $one, '0009')

write 4 from $bond_inscription:1
             $bond_ssn_of_owner:9
             $bond_name_of_owner:33
             $bond_address_indic:1
             $bond_owner_ssn_code:1
             $bond_address1:33
             $bond_address2:33
             $bond_address3:33
             $bond_address_city:20
             $bond_address_state:2
             $zip_code:9
             $bond_co_own_ben_code:3
             $bond_name_of_ben:28
             $bond_denom:1
             $one:4
             $bond_empl_no:9
             $bond_issue_mm:2
             $bond_issue_yy:2
             $blanks_16:16

end-procedure       !write-bond-file-240

!*************************************
begin-procedure write-bond-trailer-240
!*************************************

let $nines = '9999999999'

write 4 from $nines:10
             $blanks_230:230

end-procedure       !write-bond-trailer-240

!*************************************
begin-procedure write-bond-trailer-320
!*************************************

let $nines = '9999999999'

write 4 from $nines:10
             $blanks_310:310

end-procedure       !write-bond-trailer-320

!*******************************************
begin-procedure insert-bond-purchase-records
!*******************************************

open $bond_date_file as 6 for-reading record=36:fixed

while 1

    read 6 into $emplid:11
                $bond_id:3
                $bond_owner_id:2
                $bond_oth_reg_type:1
                $bond_oth_reg_id:2
                $bond_log_seq:3
                $seq:3
                $unit:3
                $half_date_in:8

    if #END-FILE

        break

    end-if

    do Format-DateTime($half_date_in,$disbur_purchase_dt,{DEFCMP},'','native')

    let #bond_log_seq       = to_number($bond_log_seq)
    let #seq                = to_number($seq)
    let #unit               = to_number($unit)

    do check-for-purchase-record

    if $purchase_found = 'N'

        do insert-bond-purchase

        let #commit_count = #commit_count + 1

    else

        BEGIN-SQL

               UPDATE PS_GVT_BOND_DISBUR
               SET    BOND_PURCH_UNITS  = #unit,
                      BOND_PURCH_DT     = $disbur_purchase_dt
               WHERE  EMPLID            = $emplid
               AND    BOND_ID           = $bond_id
               AND    BOND_OWNER_ID     = $bond_owner_id
               AND    BOND_OTH_REG_TYPE = $bond_oth_reg_type
               AND    BOND_OTH_REG_ID   = $bond_oth_reg_id
               AND    BOND_LOG_SEQ      = #bond_log_seq
               AND    EFFSEQ            = #seq

        END-SQL

        let #commit_count = #commit_count + 1

    end-if

    if #commit_count > 250

        do Commit-Transaction

        let #commit_count = 0

    end-if

end-while

end-procedure       !insert-bond-purchase-records

!***********************************
begin-procedure insert-bond-purchase
!***********************************

let #bond_log_seq = edit(#bond_log_seq,'999')
let #seq          = edit(#seq,'999')
let #unit         = edit(#unit,'999')

BEGIN-SQL

    INSERT INTO PS_GVT_BOND_DISBUR
          (EMPLID,
           BOND_ID,
           BOND_OWNER_ID,
           BOND_OTH_REG_TYPE,
           BOND_OTH_REG_ID,
           BOND_LOG_SEQ,
           EFFSEQ,
           BOND_PURCH_UNITS,
           BOND_PURCH_DT)

    VALUES
          ($emplid,
           $bond_id,
           $bond_owner_id,
           $bond_oth_reg_type,
           $bond_oth_reg_id,
           #bond_log_seq,
           #seq,
           #unit,
           $disbur_purchase_dt)

END-SQL

end-procedure       !insert-bond-purchase

!****************************************
begin-procedure check-for-purchase-record
!****************************************

let $purchase_found = 'N'

BEGIN-SELECT

DISBUR.EMPLID
DISBUR.BOND_ID
DISBUR.BOND_OWNER_ID
DISBUR.BOND_OTH_REG_TYPE
DISBUR.BOND_OTH_REG_ID
DISBUR.BOND_LOG_SEQ
DISBUR.EFFSEQ

    let $purchase_found = 'Y'

FROM  PS_GVT_BOND_DISBUR DISBUR
WHERE DISBUR.EMPLID            = $emplid
AND   DISBUR.BOND_ID           = $bond_id
AND   DISBUR.BOND_OWNER_ID     = $bond_owner_id
AND   DISBUR.BOND_OTH_REG_TYPE = $bond_oth_reg_type
AND   DISBUR.BOND_OTH_REG_ID   = $bond_oth_reg_id
AND   DISBUR.BOND_LOG_SEQ      = #bond_log_seq
AND   DISBUR.EFFSEQ            = #seq

END-SELECT

end-procedure       !check-for-purchase-record

#Include 'fgrunctl.sqc'  !Get run control parameter values
#include 'fggetval.sqc'  !Get values mask routines
#Include 'reset.sqc'     !Reset printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
#include 'rotname1.sqc'  !Routine to reformat name
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Commit-Transaction
