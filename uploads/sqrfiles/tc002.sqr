!**************************************
! TC002: Group Compensation Report
!**************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:38:38                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

#define GB_GROUP_TBL

!************
Begin-Report
!************

  do Init-Report
  do Get-Compensation-Tree
  do Process-Main
  do StdAPI-Term

End-Report

!******************************
Begin-Procedure Init-Report
!******************************

display 'initreport'

  do Init-DateTime
  do Init-Number

  move 'TC002' to $ReportID
  do Get-Current-DateTime
  do StdAPI-Init

  do Get-Report-Language

  if $prcs_process_instance = ''
!    do Ask-Runcntrl
  else
    do Get-Run-Control-Value
  end-if

End-Procedure

!***********************************
Begin-Procedure Report-Translation
!***********************************
   do Init_Report_Translation($ReportID,$language_cd)

   do Get_Field_Information ('TC002', 'REPORT_TITLE', $ReportTitle, #CW)
   do Get_Field_Information ('TC002', 'FROM', $From, #CW)
   do Get_Field_Information ('TC002', 'TO', $To, #CW)
   do Get_Field_Information ('TC002', 'ASOFDATE', $AsofDate, #CW)
   do Get_Field_Information ('TC002', 'AMOUNT_TYPE', $AmountType, #CW)
   do Get_Field_Information ('TC002', 'EE_AMOUNT', $EmployeeAmount, #CW)
   do Get_Field_Information ('TC002', 'ER_AMOUNT', $EmployerAmount, #CW)
   do Get_Field_Information ('TC002', 'TOTAL_COMP', $TotalComp, #CW)

 !    $ReportTitle    -- 'Group Compensation Report'
 !    $From           -- 'Period: From '
 !    $To             -- ' To '
 !    $AsofDate       -- ' As of Date: '
 !    $AmountType     -- '(From Actual Payroll Amounts)'
 !    $EmployeeAmount -- 'Employee Amount'
 !    $EmployerAmount -- 'Employer Amount'
 !    $TotalComp      -- 'Total Compensation for'

End-Procedure


!***************
Begin-Heading 7
!***************
   print '            '    (1,1)
   print 'PeopleSoft'      (+1, 1)          center
   print $ReportTitle      (+1, 1)          center
   let #RptCol = {ColR} - 7
   Print $From   (+1, 1)
!   Print $From_Date        (0, +1)   Edit {Native-DateMask}
   Print $From_Date        (0, +1)
   Print $To            (0, +1)
!   Print $Thru_Date        (0, +1)   Edit {Native-DateMask}
   Print $Thru_Date        (0, +1)

   If $Amount_Type = 'P'
     Print $AmountType (0, #RptCol)
   End-if

   Do Change-Page

End-Heading

!*******************************
Begin-Procedure Process-Main
!*******************************

   Do Init-Field



Begin-SELECT
L.GB_GROUP_ID                  () bold on-break level=1 print=Never
                                  PROCEDURE = Print-Total-Compensation
    Let $Group_id = &L.GB_GROUP_ID
G.EFFDT
    Let $Group_Effdt = &G.EFFDT
G.DESCR
    Let $Group_Descr = &G.DESCR
L.TC_COMP_SOURCE_ID
SUM(L.TO_COMP_AMT)       &TC_COMP_AMT_VC
SUM(L.TO_PAYROLL_AMT)    &TC_PAYROLL_AMT
  if $Amount_Type = 'C'
     Let #TC_AMT = &TC_COMP_AMT_VC
  else
     Let #TC_AMT = &TC_PAYROLL_AMT
  end-if

K.TC_CATEGORY1
   Let $Category1 = rtrim(&K.TC_CATEGORY1, ' ')

   If $Category1 <> '' and $Category1 <> $Old_Category1
        let #line = 1
        if #current-line = 8
        let #line = #line + 1
        end-if
      Print $Category1            (+#line, 5)
      Let $Old_Category1 = $Category1
   End-if

K.TC_CATEGORY2
   Let $Category2 = rtrim(&K.TC_CATEGORY2, ' ')

   If $Category2 <> '' and $Category2 <> $Old_Category2
      Print $Category2            (+1, 15)
      Let  $Old_Category2 = $Category2
   End-if


K.TC_CATEGORY3
   Let $Category3 = rtrim(&K.TC_CATEGORY3, ' ')

   If $Category3 <> '' and $Category3 <> $Old_Category3
      Print $Category3            (+1, 25)

      Let  $Old_Category3 = $Category3
   End-if


K.TC_CATEGORY4
   Let $Category4 = rtrim(&K.TC_CATEGORY4, ' ')

   If $Category4 <> '' and $Category4 <> $Old_Category4
      Print $Category4            (+1, 35)
      Let  $Old_Category4 = $Category4
   End-if

K.TC_CATEGORY5
   Let $Category5 = rtrim(&K.TC_CATEGORY5, ' ')

   If $Category5 <> '' and $Category5 <> $Old_Category5
      Print $Category5            (+1, 45)
      Let  $Old_Category5 = $Category5
   End-if

K.TC_CATEGORY6
   Let $Category6 = rtrim(&K.TC_CATEGORY6, ' ')

   If $Category6 <> '' and $Category6 <> $Old_Category6
      Print $Category6            (+1, 55)
      Let  $Old_Category6 = $Category6
   End-if


K.TC_CATEGORY7
   Let $Category7 = rtrim(&K.TC_CATEGORY7, ' ')

   If $Category7 <> '' and $Category7 <> $Old_Category7
      Print $Category7            (+1, 65)
      Let  $Old_Category7 = $Category7
   End-if

K.TC_CATEGORY8
   Let $Category8 = rtrim(&K.TC_CATEGORY8, ' ')

   If $Category8 <> '' and $Category8 <> $Old_Category8
      Print $Category8            (+1, 75)
      Let  $Old_Category8 = $Category8
   End-if

K.TC_CATEGORY9
   Let $Category9 = rtrim(&K.TC_CATEGORY9, ' ')

   If $Category9 <> '' and $Category9 <> $Old_Category9
      Print $Category9            (+1, 85)
      Let  $Old_Category9 = $Category9
   End-if

K.TC_CATEGORY10
   Let $Category10 = rtrim(&K.TC_CATEGORY10, ' ')

   If $Category10 <> '' and $Category10 <> $Old_Category10
      Print $Category10            (+1, 95)
      Let  $Old_Category10 = $Category10
   End-if

K.TC_CATEGORY11
   Let $Category11 = rtrim(&K.TC_CATEGORY11, ' ')

   If $Category11 <> '' and $Category11 <> $Old_Category11
      Print $Category11            (+1, 105)
      Let  $Old_Category11 = $Category11
   End-if

K.TC_CATEGORY12
   Let $Category12 = rtrim(&K.TC_CATEGORY12, ' ')

   If $Category12 <> '' and $Category12 <> $Old_Category12
      Print $Category12            (+1, 115)
      Let  $Old_Category12 = $Category12
   End-if

K.TC_CATEGORY13
   Let $Category13 = rtrim(&K.TC_CATEGORY13, ' ')

   If $Category13 <> '' and $Category13 <> $Old_Category13
      Print $Category13            (+1, 125)
      Let  $Old_Category13 = $Category13
   End-if

K.TC_CATEGORY14
   Let $Category14 = rtrim(&K.TC_CATEGORY14, ' ')

   If $Category14 <> '' and $Category14 <> $Old_Category14
      Print $Category14            (+1, 135)
      Let  $Old_Category14 = $Category14
   End-if

D.ORG_COST
   Let $Org_Cost = &D.ORG_COST

   If $Org_Cost = 'Y'
        Let #TC_ER = #TC_AMT
        Let #TotalER = #TotalER + #TC_ER
    else
        Let #TC_EE = #TC_AMT
        Let #TotalEE = #TotalEE + #TC_EE
    End-If

L.COMPENSATION_ID

    Let $CompID = rtrim(&L.COMPENSATION_ID, ' ')

    If $CompID <> $Old_CompID
        If #refcol = 0
                let #Refcol = #CURRENT-COLUMN + 3
                Print $CompID                 (+1, +3) Bold

                DISPLAY #CURRENT-COLUMN
        else
                Print $CompID                 (+1, #Refcol) Bold
        End-if
       Let $Old_CompID = $CompID
    End-if

L.THRU_DATE

    Let $Amt_Date = &L.THRU_DATE

        let #line = 1
        if #current-line > 54
                let #line = #line + 2
        end-if

!    PRINT $Amt_Date (+#line, 80) bold Edit {Native-DateMask}
    PRINT $Amt_Date (+#line, 80) bold 

    Display #TC_EE
    Display #TC_ER

    If #TC_EE > 0.0
       Print #TC_EE ( 0, 100) Edit '999,999,999.99'
    End-if
    If #TC_ER > 0.0
       Print #TC_ER ( 0, 120) Edit '999,999,999.99'
    End-if

    Let #TC_EE = 0.0
    Let #TC_ER = 0.0

FROM PS_TC_CATEGORY_WRK K,
     PS_TC_EE_DETAIL L,
     PS_TC_BEN_GRP P,
     PS_TC_COMP_SOURCE S,
     PS_TC_COMP_DEFN D,
     PS_GB_GROUP_TBL G
WHERE  P.OPRID = $prcs_oprid
AND    P.RUN_CNTL_ID = $prcs_run_cntl_id
AND    P.TC_PLAN_ID      = $Tc_Plan_id
AND    P.TC_PLAN_EFFDT    = $Tc_Plan_Effdt
AND    L.TC_PLAN_ID      = P.TC_PLAN_ID
AND    L.EFFDT = P.TC_PLAN_EFFDT
AND    L.COMPENSATION_ID = K.COMPENSATION_ID
AND    L.GB_GROUP_ID = P.GB_GROUP_ID
AND    (L.FROM_DATE >= $From_Date and L.FROM_DATE <= $Thru_Date)
AND    (L.THRU_DATE >= $From_Date and L.THRU_DATE <= $Thru_Date)
AND    S.TC_MEASURE = $Amount_Type
AND    L.TC_COMP_SOURCE_ID = S.TC_COMP_SOURCE_ID
AND    D.COMPENSATION_ID = L.COMPENSATION_ID
AND    G.GB_GROUP_ID = P.GB_GROUP_ID
AND    G.EFFDT = (SELECT MAX(G1.EFFDT)
                  FROM PS_GB_GROUP_TBL G1
                  WHERE G1.GB_GROUP_ID = P.GB_GROUP_ID
                  AND   G1.EFFDT <= $Tc_Plan_Thru_Dt)
Group By L.GB_GROUP_ID,
         L.COMPENSATION_ID,
         G.EFFDT,
         G.DESCR,
         L.TC_COMP_SOURCE_ID,
         K.TC_CATEGORY1,
         K.TC_CATEGORY2,
         K.TC_CATEGORY3,
         K.TC_CATEGORY4,
         K.TC_CATEGORY5,
         K.TC_CATEGORY6,
         K.TC_CATEGORY7,
         K.TC_CATEGORY8,
         K.TC_CATEGORY9,
         K.TC_CATEGORY10,
         K.TC_CATEGORY11,
         K.TC_CATEGORY12,
         K.TC_CATEGORY13,
         K.TC_CATEGORY14,
         D.ORG_COST,
         L.THRU_DATE
Order By L.GB_GROUP_ID,
         L.TC_COMP_SOURCE_ID,
         L.COMPENSATION_ID

End-Select

   Do Print-Total-Compensation

End-Procedure Process-Main


!*******************************
begin-procedure Change-Page
!*******************************

   print $Group_id  (+2,1)

   Let $_GB_GROUP_TBL-DESCR = $Group_Descr
   Do Get_Related_GB_GROUP_TBL($Group_Effdt,$Group_id)
   Let $Group_Descr = $_GB_GROUP_TBL-DESCR

   Print $Group_Descr (+1, 5)

   Print $AsofDate      (+2, 80)
   Print $EmployeeAmount (0, 100)
   Print $EmployerAmount (0,  125)

end-procedure Change-Page

!********************************************
Begin-Procedure Print-Total-Compensation
!********************************************

   print  $TotalComp (+2,5)  bold
   Print  $Group_id                 (0, +1)
   Print  ':'                       (0, +1)
   print #TotalEE (,90) Edit '999,999,999,999.99' bold
   print $Base_Currency (,+2) bold
   print #TotalER (,116) Edit '999,999,999,999.99'  bold
   print $Base_Currency (,+2)  bold

   Do Init-Field

   new-page

End-Procedure Emplyee-Total

!********************************************
Begin-Procedure Init-Field
!********************************************

   Let #TotalEE = 0
   Let #TotalER = 0
   Let $Old_Category1 = ''
   Let $Old_Category2 = ''
   Let $Old_Category3 = ''
   Let $Old_Category4 = ''
   Let $Old_Category5 = ''
   Let $Old_Category6 = ''
   Let $Old_Category7 = ''
   Let $Old_Category8 = ''
   Let $Old_Category9 = ''
   Let $Old_Category10 = ''
   Let $Old_Category11 = ''
   Let $Old_Category12 = ''
   Let $Old_Category13 = ''
   Let $Old_Category14 = ''
   Let $Old_CompID = ''

End-Procedure Init-Field

! *----------------------------------------------------------------------*
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime procedures
#Include 'stdapi.sqc'    !Update Process API
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Global address format
#Include 'tccomp.sqc'    !Read Total Compensation Tree
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'rellang.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
! *------------------------* End Of Report *-----------------------------*
