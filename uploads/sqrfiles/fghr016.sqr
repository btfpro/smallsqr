
!               CONFIDENTIALITY INFORMATION:                           *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:56:08                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! This interface is submitted to SSA on a biweekly and quarterly       *
! schedule as part of the Federal Parent Locator Service.              *
!***********************************************************************
!*  HISTORY
!***********************************************************************
!  Commented out call to delete run control.
! >>>Changed write procedure to write variable #quarter from $quarter
! >>>Comented out all references to $quarter Variable
! >>>Changed Write Procedure to write variable #year from $year
! >>>Comented out one let to $year variable
! 08/20/03 Lee - ICE 623819000 - change report title to
!    Biweekly/Quarterly New Hire Extract and Processing Results Report
!***********************************************************************
#include 'setenv.sqc'        ! SET ENVIRONMENT
#include 'setup02.sqc'       ! PRINTER AND PAGE-SIZE INITIALIZATION

!***********************************************************************
BEGIN-REPORT
!***********************************************************************

  DO INIT-DATETIME
  DO INIT-NUMBER
  DO GET-CURRENT-DATETIME
  DO INIT-REPORT
  DO INIT-FILE-RECORD
  DO OPEN-FILE
  DO WRITE-FILE-RECORD-HEADER
  DO PROCESS-MAIN
  DO RESET
  DO WRITE-FILE-RECORD-TRAILER
  DO CLOSE-FILE
  If $Reprocess = 'N'
      Do CHECK-NH-CONTROL
      IF $RecExists = 'N'
         DO INSERT-NH-CONTROL
      End-if
  Else
      DO UPDATE-NH-CONTROL
  End-if
!  DO DELETE-RUN-CONTROL
  DO STDAPI-TERM
END-REPORT

BEGIN-PROCEDURE INIT-REPORT

  MOVE 'FGHR016' TO $REPORTID
  MOVE 'Biweekly/Quarterly New Hire Extract and Processing Results Report' TO $REPORTTITLE
  DO STDAPI-INIT

 IF $PRCS_PROCESS_INSTANCE = ''
   DO ASK-FROM-THRU-DATE
   ! CRM Commented out from and thru date
   !INPUT $FROMDATE 'From Date'
   !INPUT $TODATE 'To Date'
   INPUT $RunType 'Run Type (Q - Quarterly,  B - Biweekly)'
   INPUT #YEAR 'Year'
   INPUT #QUARTER 'Quarter'
   INPUT $FILENAME 'Export File Name'
   Uppercase $RunType

 ELSE
   DO SELECT-PARAMETERS
 END-IF

! Error/Warning Messages
let $Err1 = 'Employee Address missing'
let $Err2 = 'Employer Address missing'
let $Err3 = 'Invalid/missing Date of Hire'
let $Err4 = 'Invalid/missing FEIN'

END-PROCEDURE INIT-REPORT

!***********************************************************************
BEGIN-HEADING 6
!***********************************************************************
 #include 'stdhdg08.sqc'

  PRINT 'ERROR MESSAGE'        (+3,1) BOLD
  PRINT 'EMPLID'               (0,35) BOLD
  PRINT 'NAME'                 (0,50) BOLD

END-HEADING

!***********************************************************************
begin-procedure OPEN-FILE
!***********************************************************************
let $FileName1 = '{IMPORTPREFIX}' || $FileName

 Open $FileName1 As 1 For-Writing
                      Record=801:Fixed
                      Status=#FileStatus

  If #FileStatus = -1
     display ' Cannot Open File'
     stop quiet
  End-If

end-procedure OPEN-FILE

!***********************************************************************
begin-procedure CLOSE-FILE
!***********************************************************************
 close 1

  Print 'Num Of Records Written: ' (+3,10)
  Print #NumOfRecords              (0,35)    Edit 9999

  display 'Num Of Records Written: ' noline
  display #NumOfRecords 9999
  display  ' '
   if #NumOfRecords > 0
     Let $Message = 'File '
     concat  $FileName1 with $Message
     concat  ' was created' with $Message
     Print $Message                (+2,10)
     display $Message
  else
     Let $Message = 'File '
     concat  $FileName1 with $Message
     concat  ' is empty' with $Message
     display $Message
   END-IF

end-procedure CLOSE-FILE

!*************************************************************************************
BEGIN-PROCEDURE PROCESS-MAIN
!*************************************************************************************
   If $RunType = 'Q'
       do Get-Calendar-Year-Id
   end-if

   If &Empl_Cnt > 0
     Do Get-Employee-Corrections
   Else
     let $WHERE_CLAUSE = 'P.EMPLID=E.EMPLID'
     Do Get-New-Hire-Data
   END-IF

END-PROCEDURE PROCESS-MAIN

!***********************************************************************
BEGIN-PROCEDURE Get-Employee-Corrections
!***********************************************************************

BEGIN-SELECT

NHE.EMPLID

     let $Emplid = &NHE.EMPLID
     let $WHERE_CLAUSE = 'P.EMPLID=''' || $Emplid ||''''

     Do Get-New-Hire-Data

from PS_GVT_NH_RUNCTL_E NHE
where NHE.OPRID = $prcs_oprid
  and NHE.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

END-PROCEDURE Get-Employee-Contributions

!***********************************************************************
BEGIN-PROCEDURE Get-New-Hire-Data
!***********************************************************************
BEGIN-SELECT DISTINCT
C.COMPANY              &C.COMPANY
C.DESCR
   Let $CompName     = rtrim(&C.DESCR, ' ')
   Uppercase $CompName
C.ADDRESS1
   Let $CompAddress1 =  rtrim(&C.ADDRESS1, ' ')
   Uppercase $CompAddress1
C.ADDRESS2
   Let $CompAddress2 =  rtrim(&C.ADDRESS2, ' ')
   Uppercase $CompAddress2
C.ADDRESS3
   Let $CompAddress2 =  rtrim(&C.ADDRESS2, ' ')
   Uppercase $CompAddress3
C.ADDRESS4
   Let $CompAddress4 =  rtrim(&C.ADDRESS4, ' ')
   Uppercase $CompAddress4
C.CITY
   Let $CompCity = rtrim(&C.CITY, ' ')
   Uppercase $CompCity
C.STATE
   Let $CompState = &C.STATE
C.COUNTRY               &C.COUNTRY
   Let $COMPCOUNTRY = &C.COUNTRY
C.POSTAL
   Let $CompPostal = {ps-substr}(&C.POSTAL,1,9)
   Let $CompPostal = edit($CompPOSTAL,'000009999')

!C.FEDERAL_EIN
!   Let $FEIN = edit(&C.FEDERAL_EIN, '000999999')
 DO GET-COMPANY-DATA

P.EMPLID               &P.EMPLID
E.PER_ORG              &P.PER_STATUS
PN.NAME                 &PN.NAME
   let $Name = &PN.NAME
!   do rotate-name          ! to get firstname, lastname
   do parse-name
   Uppercase $FirstName
   Uppercase $MiddleName
   Uppercase $LastName


P.BIRTHDATE
  do Format-DateTime(&P.BIRTHDATE, $DateOfBirth, {DEFDATE}, '', '')
  let $out1      = substr($DateOfBirth,1,2)
  let $out2      = substr($DateOfBirth,4,2)
  let $out3      = substr($DateOfBirth,7,4)
  let $DateOfBirth = $out3 || $out1 || $out2

N.NATIONAL_ID
   Let $SSN = rtrim(&N.NATIONAL_ID,' ')

J.EMPL_STATUS          &J.EMPL_STATUS
E.HIRE_DT              &E.HIRE_DT
E.REHIRE_DT            &E.REHIRE_DT
L.STATE
   Let $StateOfHire = &L.STATE

  if &E.REHIRE_DT > &E.HIRE_DT
       LET $DateOfHire_ALL=&E.REHIRE_DT
       LET $ACTION='REHIRE'
  ELSE
       LET $DateOfHire_ALL=&E.HIRE_DT
       LET $ACTION='HIRE'
  END-IF

  do Format-DateTime($DateOfHire_ALL, $DateOfHire, {DEFDATE}, '', '')
  let $out1      = substr($DateOfHire,1,2)
  let $out2      = substr($DateOfHire,4,2)
  let $out3      = substr($DateOfHire,7,4)
  let $DateOfHire = $out3 || $out1 || $out2

   If $RunType = 'Q'
       do Get-Quarter-Balance
   End-if

   Let $Emplid = &P.EMPLID
  Do Get-Empl-Address ($Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $ADDRESS3 = $GETADDR_Address3
   let $ADDRESS4 = $GETADDR_Address4

   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL


   Uppercase $Address1
   Uppercase $Address2
   Uppercase $Address3
   Uppercase $Address4
   Uppercase $City

   Let $Postal = {ps-substr}($GETADDR_POSTAL,1,9)
   Let $Postal = edit($Postal,'000009999')


  DO WRITE-FILE-RECORD-DETAIL

FROM PS_PERSON P,
     PS_PERSON_NAME PN,
     PS_EMPLOYMENT E,
     PS_JOB J,
     PS_COMPANY_TBL C,
     PS_PERS_NID N,
     PS_LOCATION_TBL L
WHERE (E.HIRE_DT BETWEEN $FromDate AND $ToDate OR
         E.REHIRE_DT BETWEEN $FromDate AND $ToDate) AND
      P.EMPLID = E.EMPLID AND
      E.PER_ORG = 'EMP' AND
      PN.EMPLID = P.EMPLID AND
      N.EMPLID = P.EMPLID AND
      N.NATIONAL_ID <> ' ' AND
      J.EMPLID = E.EMPLID AND
      J.EMPL_RCD = E.EMPL_RCD AND
      ((J.EFFDT = E.HIRE_DT OR J.EFFDT = E.REHIRE_DT) AND
        J.EFFDT >= $FromDate AND J.EFFDT <= $ToDate) AND
      J.ACTION IN ('HIR','REH') AND
      J.REG_REGION = 'USA' AND
      C.COMPANY = J.COMPANY AND
      C.EFFDT = (SELECT MAX(C6.EFFDT)
                 FROM PS_COMPANY_TBL C6
                 WHERE C6.COMPANY = C.COMPANY AND
                  C6.EFFDT <= $ToDate)
AND   L.SETID=C.SETID_LOCATION
AND   L.LOCATION =J.LOCATION
AND   L.EFFDT = (SELECT MAX(LL.EFFDT)
                 FROM PS_LOCATION_TBL LL
                 WHERE L.SETID =LL.SETID
                 AND L.LOCATION =LL.LOCATION
                 AND LL.EFFDT <= $ToDate)
AND [$WHERE_CLAUSE]
ORDER BY C.COMPANY, C.STATE
END-SELECT

END-PROCEDURE Get-New-Hire-Data

!***********************************************************************
begin-procedure Init-File-Record
!***********************************************************************

 DO GET-COMPANY-DATA

If $RunType = 'B'
    let $HRecId = 'H4'
    let $DRecId = 'W4'
    let $TRecId = 'T4'
    let $TransmitType = 'W4'
else
    let $HRecId = 'HQ'
    let $DRecId = 'QW'
    let $TRecId = 'TQ'
    let $TransmitType = 'QW'
End-If

let $TransmitState = ''
let $TransmitComp = $Fein !'ADOL'
let $DOD = ''
let $VersionNo = '01'
let $DateStamp = ''
let $BatchNo     = edit(&GVT_NH_RUNCTL.GVT_BATCH_NBR,'000009')

let $SSN = ''
let $FirstName =''
let $MiddleName = ''
let $LastName = ''
let $Address1 = ''
let $Address2 = ''
let $Address3 = ''
let $City =''
let $State = ''
let $Postal = ''
let $ForCountryCode = ''
let $ForCountry = ''
let $ForPostal = ''
let $DateOfBirth = ''
let $DateOfHire = ''
let $StateOfHire = ''
let $FEIN = ''
let $StateEIN = ''
let $CompName = ''
let $CompAddress1 = ''
let $CompAddress2 = ''
let $CompAddress3 = ''
let $CompCity = ''
let $CompState = ''
let $CompPostal = ''
let $ForCompCode = ''
let $ForCompName = ''
let $ForCompPostal = ''
let $CompOptAddress1 = ''
let $CompOptAddress2 = ''
let $CompOptAddress3 = ''
let $CompOptCity = ''
let $CompOptState = ''
let $CompOptPostal = ''
let $ForOptCompCode = ''
let $ForOptCompName = ''
let $ForOptCompPostal = ''
let $Filler2 = ''

let #EmpWages = 0
!let $Quarter = ''
!let $Year = ''

end-procedure Init-File-Record

!***********************************************************************
begin-procedure Get-Company-Data
!***********************************************************************

begin-select

C.FEDERAL_EIN
  LET $FEIN = &C.FEDERAL_EIN

FROM   PS_COMPANY_TBL C
WHERE C.COMPANY = $COMPANY
AND   C.EFFDT = (SELECT MAX(C6.EFFDT)
                 FROM PS_COMPANY_TBL C6
                 WHERE C6.COMPANY = C.COMPANY AND
                  C6.EFFDT <= $ToDate)
end-select

end-procedure Get-Company-Data

!***********************************************************************
begin-procedure Get-Quarter-Balance
!***********************************************************************
begin-SELECT

SUM(B.GRS_QTD) &QtrBalance
FROM  PS_EARNINGS_BAL B
WHERE B.EMPLID        = &P.EmplID
  AND B.COMPANY       = &C.Company
  AND B.SPCL_BALANCE  = 'N'
  AND B.BALANCE_ID    = $Calendar_Year_Id
  AND B.BALANCE_YEAR  = #Year
  AND B.BALANCE_QTR   = #Quarter
end-SELECT

end-procedure Get-Quarter-Balance

!***********************************************************************
begin-procedure Write-File-Record-Header
!***********************************************************************
do Format-DateTime($AsOfToday,$out,{DEFDATE}, '', '')
let $out1      = substr($out,1,2)
let $out2      = substr($out,4,2)
let $out3      = substr($out,7,4)
let $DateStamp = $out3 || $out1 || $out2

Write 1 from  $HRecId:2
              $TransmitState:2
              $TransmitComp:9
              $TransmitType:2
              $DOD:1
              $VersionNo:2
              $DateStamp:8
              $BatchNo:6
              $Filler2:769
              Status=#FileStatus

        If #FileStatus != 0
                display 'Error writing a file record'
                stop quiet
        End-If

add 1 to #NumOfRecords

end-procedure Write-File-Record-Header

!***********************************************************************
begin-procedure Write-File-Record-Detail
!***********************************************************************
DO Process-Error-Checking

If $RunType = 'B'
    do Write-Detail-Biweekly
else
    do Write-Detail-Quarterly
End-if

end-procedure Write-File-Record-Detail

!***********************************************************************
begin-procedure Process-Error-Checking
!***********************************************************************
If ISNULL($Address1)
  PRINT $Err1                  (+1,1)
  PRINT &P.EMPLID              (0,35)
  PRINT &PN.NAME                (0,50)
End-if
If ISNULL($CompAddress1)
  PRINT $Err2                  (+1,1)
  PRINT &C.COMPANY             (0,35)
  PRINT &C.DESCR               (0,50)
End-if
If ISNULL($DateOfHire)
  PRINT $Err3                  (+1,1)
  PRINT &P.EMPLID              (0,35)
  PRINT &PN.NAME                (0,50)
End-if
If ISNULL($FEIN)
  PRINT $Err4                  (+1,1)
  PRINT &C.COMPANY             (0,35)
  PRINT &C.DESCR               (0,50)
End-if

end-procedure Process-Error-Checking

!***********************************************************************
begin-procedure Write-Detail-Biweekly
!***********************************************************************
Write 1 from  $DRecId:2
              $SSN:9
              $FirstName:16
              $MiddleName:16
              $LastName:30
              $Address1:40
              $Address2:40
              $Address3:40
              $City:25
              $State:2
              $Postal:9
              $ForCountryCode:2
              $ForCountry:25
              $ForPostal:15
              $DateOfBirth:8
              $DateOfHire:8
              $StateOfHire:2
              $FEIN:9
              $StateEIN:12
              $CompName:45
              $CompAddress1:40
              $CompAddress2:40
              $CompAddress3:40
              $CompCity:25
              $CompState:2
              $CompPostal:9
              $ForCompCode:2
              $ForCompName:25
              $ForCompPostal:15
              $CompOptAddress1:40
              $CompOptAddress2:40
              $CompOptAddress3:40
              $CompOptCity:25
              $CompOptState:2
              $CompOptPostal:9
              $ForOptCompCode:2
              $ForOptCompName:25
              $ForOptCompPostal:15
              $Filler:50
              Status=#FileStatus

        If #FileStatus != 0
                display 'Error writing a file record'
                stop quiet
        End-If

add 1 to #NumOfRecords

end-procedure Write-Detail-Biweekly

!***********************************************************************
begin-procedure Write-Detail-Quarterly
!***********************************************************************
let #QtrBalance = &QtrBalance
do Format-Number(#QtrBalance, $QtrBalance, '099999999V99mi')
let $temp1 =  substr($QtrBalance,11,2)
do overpunch($temp1, $temp2)
let $QtrBalance = substr($QtrBalance,1,10) || rtrim($temp2,' ')

If #QtrBalance >= 0
Write 1 from  $DRecId:2
              $SSN:9
              $FirstName:16
              $MiddleName:16
              $LastName:30
!              $Address1:40
!              $Address2:40
!              $Address3:40
              $QtrBalance:11
              #Quarter:1
              #Year:4
              $FEIN:9
              $StateEIN:12
              $CompName:45
              $CompAddress1:40
              $CompAddress2:40
              $CompAddress3:40
              $CompCity:25
              $CompState:2
              $CompPostal:9
              $ForCompCode:2
              $ForCompName:25
              $ForCompPostal:15
              $CompOptAddress1:40
              $CompOptAddress2:40
              $CompOptAddress3:40
              $CompOptCity:25
              $CompOptState:2
              $CompOptPostal:9
              $ForOptCompCode:2
              $ForOptCompName:25
              $ForOptCompPostal:15
              $Filler:50
              Status=#FileStatus

        If #FileStatus != 0
                display 'Error writing a file record'
                stop quiet
        End-If

  add 1 to #NumOfRecords

End-if
end-procedure Write-Detail-Quarterly

!***********************************************************************
begin-procedure Write-File-Record-Trailer
!***********************************************************************
add 1 to #NumOfRecords

let $NumOfRecords = edit(#NumOfRecords, '00000000099')

Write 1 from  $TRecId:2
              $NumOfRecords
              $Filler2:788
              Status=#FileStatus

        If #FileStatus != 0
                display 'Error writing a file record'
                stop quiet
        End-If

end-procedure Write-File-Record-Trailer

!***********************************************************************
begin-procedure SELECT-PARAMETERS
!***********************************************************************
BEGIN-SELECT

GVT_NH_RUNCTL.OPRID
GVT_NH_RUNCTL.RUN_CNTL_ID
GVT_NH_RUNCTL.FILE_NAME
GVT_NH_RUNCTL.GVT_RUN_TYPE
GVT_NH_RUNCTL.GVT_BATCH_NBR
GVT_NH_RUNCTL.FROM_DATE
GVT_NH_RUNCTL.TO_DATE
GVT_NH_RUNCTL.BALANCE_QTR
GVT_NH_RUNCTL.REPROCESS
GVT_NH_RUNCTL.COMPANY

  let $Oprid       = &GVT_NH_RUNCTL.OPRID
  let $FileName    = &GVT_NH_RUNCTL.FILE_NAME
  let $RunCntl     = &GVT_NH_RUNCTL.RUN_CNTL_ID
  let $RunType     = &GVT_NH_RUNCTL.GVT_RUN_TYPE
  let #BatchNbr    = &GVT_NH_RUNCTL.GVT_BATCH_NBR
  let $FromDate    = &GVT_NH_RUNCTL.FROM_DATE
  let $ToDate      = &GVT_NH_RUNCTL.TO_DATE
  let $ThruDate    = &GVT_NH_RUNCTL.TO_DATE
  let #Quarter     = &GVT_NH_RUNCTL.BALANCE_QTR
  let $Reprocess   = &GVT_NH_RUNCTL.REPROCESS
  let $company     = &GVT_NH_RUNCTL.COMPANY

from PS_GVT_NH_RUNCTL GVT_NH_RUNCTL

where GVT_NH_RUNCTL.OPRID = $prcs_oprid
  and GVT_NH_RUNCTL.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

BEGIN-SELECT

COUNT(*) &EMPL_CNT

from PS_GVT_NH_RUNCTL_E

where OPRID = $prcs_oprid
  and RUN_CNTL_ID = $prcs_run_cntl_id
end-select

do Format-Datetime($FromDate, $Out, {DEFCMP}, '', '')
let $Year = SUBSTR($Out,1,4)
let #Year = to_number($Year)

end-procedure SELECT-PARAMETERS

!***********************************************************************
begin-procedure CHECK-NH-CONTROL
!***********************************************************************

BEGIN-SELECT

COUNT(*) &REC_CNT

  if &REC_CNT = 0 
     let $RecExists = 'N'
  else
     let $RecExists = 'Y'
  end-if

from PS_GVT_NH_CONTROL

WHERE GVT_RUN_TYPE  = $RunType AND
      GVT_BATCH_NBR = #BatchNbr
end-select

end-procedure CHECK-NH-CONTROL

!***********************************************************************
begin-procedure INSERT-NH-CONTROL
!***********************************************************************

let #NumOfRecords = #NumOfRecords - 2

BEGIN-SQL
INSERT INTO PS_GVT_NH_CONTROL (
GVT_RUN_TYPE,
GVT_BATCH_NBR,
FROM_DATE,
TO_DATE,
BALANCE_QTR,
FILE_NAME,
OPRID,
ASOFDATE,
EMPL_CNT
)

VALUES (
$RunType,
#BatchNbr,
$FromDate,
$ToDate,
#Quarter,
$FileName,
$Oprid,
$AsOfToday,
#NumOfRecords
)

end-sql

end-procedure INSERT-NH-CONTROL

!***********************************************************************
begin-procedure UPDATE-NH-CONTROL
!***********************************************************************

let #NumOfRecords = #NumOfRecords - 2

BEGIN-SQL
UPDATE PS_GVT_NH_CONTROL SET
  FROM_DATE   = $FromDate,
  TO_DATE     = $ToDate,
  BALANCE_QTR = #Quarter,
  FILE_NAME   = $FileName,
  OPRID       = $Oprid,
  ASOFDATE    = $AsOfToday,
  EMPL_CNT    = #NumOfRecords
WHERE GVT_RUN_TYPE  = $RunType AND
      GVT_BATCH_NBR = #BatchNbr

end-sql

end-procedure UPDATE-NH-CONTROL

!***********************************************************************
begin-procedure DELETE-RUN-CONTROL
!***********************************************************************
BEGIN-SQL
DELETE FROM PS_GVT_NH_RUNCTL
 WHERE OPRID = $Oprid AND
       RUN_CNTL_ID = $RunCntl
end-sql

BEGIN-SQL
DELETE FROM PS_GVT_NH_RUNCTL_E
 WHERE OPRID = $Oprid AND
       RUN_CNTL_ID = $RunCntl
end-sql

end-procedure DELETE-RUN-CONTROL

!----------------------------------------------------------------------------!
begin-procedure parse-name
!  parse-name - breaks out the first, middle and last name
!             - removed an apostraphic from name - illegal character
!  format of name is last jr/sr, first MI
!----------------------------------------------------------------------------!

 let $name = upper($name)
 let $name = translate($name,'''','')

 move 'N' to $SuffixFound
 let $suffix = ' '
  let $SuffixString =
    'JR.,JR,SR.,SR,III,II,I,IV,MD,M.D.,CPA,C.P.A.,ESQ.,ESQ,' ||
    '2ND.,2ND,SECOND,3RD.,3RD,THIRD,4TH.,4TH,FOURTH'

 DO Rotate-Name-for-Mag-Media

! display $name



  let #offset_space     = instr($firstname,' ', 1)
  let #offset_space2    = instr($firstname,' ',#offset_space + 1)
  let #firstname_length = length($firstname)

!  SHOW 'FIRSTNAME ' $FIRSTNAME ' ' #offset_space ' ' #offset_space2

 IF #OFFSET_SPACE = 0
    let $employee_first_name = $firstname
          let $employee_middle_name = ' '
 else
    let $employee_first_name = substr($firstname,1,#offset_space - 1)
     if #offset_space2 > 0
       let $employee_middle_name = substr($firstname,#offset_space  + 1,
                                (#offset_space2 - (#offset_space  + 1)))
      else
       let $employee_middle_name = substr($firstname,#offset_space  + 1,
                                      #firstname_length - #offset_space)
      end-if
 end-if

  !removes sirname if sirname after middle name

  let #i = 1
    while INSTR($SuffixString,',',#i) > 0
      let #j = INSTR($SuffixString,',',#i)
      let $Suffix = SUBSTR($SuffixString,#i,#j - #i)
          let #offset_middle = instr($employee_middle_name,' ', 1)
          if #offset_middle = 0
         let #locnsuffix = INSTR($employee_middle_name, $Suffix , 1)
         else
                let #locnsuffix = INSTR($employee_middle_name, $Suffix , #offset_middle + 1)
       end-if

      if #locnsuffix > 0
        move 'Y' to $SuffixFound
               if #offset_middle = 0
                  let $employee_middle_name = ' '
                   else
                      let $employee_middle_name = substr($employee_middle_name, 1, #offset_middle - 1)
        end-if
      end-if
      let #i = #j + 1
      if $SuffixFound = 'Y'
              break
      end-if
    end-while



! handles if lastname 'Doe',  or 'Doe ' (with a space at the end). The
 ! space at the end occurs when removing the sirname from lastname.


 if substr($lastname,length($lastname),1) = ','
    let $lastname = SUBSTR($LastName,1,LENGTH($LastName)-1)
 else
    let $lastname = SUBSTR($LastName,1,LENGTH($LastName))
 end-if

 let $employee_last_name = $lastname

 let $employee_first_name = translate($employee_first_name,'.','')
 let $employee_middle_name = translate($employee_middle_name,'.','')
 let $employee_last_name = translate($employee_last_name,'.','')

 let $firstname = $employee_first_name
 let $middlename = $employee_middle_name
 let $lastname   = $employee_last_name

! display ' '
! DISPLAY '$EMPLOYEE_FIRST_NAME:  ' NOLINE
! DISPLAY  $EMPLOYEE_FIRST_NAME
! DISPLAY '$EMPLOYEE_MIDDLE_NAME: ' NOLINE
! DISPLAY $employee_middle_name
! display '$EMPLOYEE_LAST_NAME:   ' NOLINE
! display $EMPLOYEE_LAST_NAME
! DISPLAY &P.EMPLID
! DISPLAY ' '

end-procedure parse-name

#include 'askftd.sqc'       ! FROM THRU DATE INPUT
#include 'reset.sqc'        ! RESET PRINTER PROCEDURE
#include 'stdapi.sqc'       ! UPDATE PROCESS API
#include 'curdttim.sqc'     ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'     ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'       ! ROUTINES TO FORMAT NUMBERS
#include 'datemath.sqc'     ! ROUTINES FOR DATEMATH
#include 'rotname3.sqc'     ! GET FIRSTNAME AND LASTNAME
#include 'rotname5.sqc'     ! GET FIRSTNAME AND LASTNAME
#Include 'getbalid.sqc'     ! GET-CALENDAR-YEAR-ID
#include 'fgovrpch.sqc'     ! Over Punch routine
#include 'getaddr.sqc'      ! Get Employee Address
