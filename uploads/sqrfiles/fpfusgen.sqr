!************************************
!*  FPFUSGEN  *
!************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/19:12:51:34                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************


#include 'fptoolbx.sqc'
#include 'fpsys.sqc'
#include 'setenv.sqc' !Set environment

!directories for file writing
#define chemin    c:\user\sqr\
#define tempdir   c:\temp\
#define MAX_PROG_LINEWIDTH 255

begin-REPORT
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Successful-EOJ
end-REPORT

#Include 'setup01.sqc'   !Printer and page-size initialization

begin-procedure Init-Report !*
  !*

  move 'FUSIGEN' to $ReportID
  move 'Generate Merge Process SQC' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-As-Of-date
  else
    do Select-Parameters
  end-if

  let $dt_nt_AsOfDate = $AsOfDate
  do Format-DateTime($AsOfDate,$dt_cmp_AsOfDate,'CMP','','')

  !setting substitute variables
  let $substit1varname =  '##RECNAME##'

  !opening of main output file
  let  #fic_genere   = 1
  let  $fic_genere   = '{chemin}FPFUSJOB.SQC'
  open $fic_genere    as #fic_genere   for-writing record={MAX_PROG_LINEWIDTH}

end-procedure

begin-procedure gnr-JOB-handling !*
  !* AREA:       handling JOB-related processing
  !* GENERATES:  fusi-set-defaults
  !*             fusi-insert-JOB -(column and values lists)
  !*             fusi-set-buffer-from-defaults
  !*             fusi-debug
  !*             fusi-trace
  !* SELECTS:    FIELDNAMEs from PSRECFIELD where RECNAME = JOB (+ SUBRECORDS)
  !* CALLS:      gnr-field-JOB-handling, which does the field-level generation

let #gnr-field-end = 0
let $gnr-field-line-suffix = ','
let $gnr-field-line-prefix = '('
let $gnr-field-line-prefix-values = 'VALUES ('

!opening of temp file to insert column list
let  #fic_tmp_insc = 2
let  $fic_tmp_insc = '{tempdir}~FU_INSC.TMP'
open $fic_tmp_insc  as #fic_tmp_insc for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0003.COD',#fic_tmp_insc)

!opening of temp file to insert values list
let  #fic_tmp_insv = 3
let  $fic_tmp_insv = '{tempdir}~FU_INSV.TMP'
open $fic_tmp_insv  as #fic_tmp_insv for-writing record={MAX_PROG_LINEWIDTH}

!opening of temp file for default assignment list
let  #fic_tmp_defa = 4
let  $fic_tmp_defa = '{tempdir}~FU_DEFA.TMP'
open $fic_tmp_defa  as #fic_tmp_defa for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0013.COD',#fic_tmp_defa)

!opening of temp file for selecting initial JOB values from existing data
let  #fic_tmp_selj = 5
let  $fic_tmp_selj = '{tempdir}~FU_SELJ.TMP'
open $fic_tmp_selj  as #fic_tmp_selj for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0014.COD',#fic_tmp_selj)

!opening of temp file for trace data
let  #fic_tmp_trac = 6
let  $fic_tmp_trac = '{tempdir}~FU_TRAC.TMP'
open $fic_tmp_trac  as #fic_tmp_trac for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0016.COD',#fic_tmp_trac)

!opening of temp file for debug printing
let  #fic_tmp_debg = 7
let  $fic_tmp_debg = '{tempdir}~FU_DEBG.TMP'
open $fic_tmp_debg  as #fic_tmp_debg for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0017.COD',#fic_tmp_debg)


!SH 13/08/1997 select only fields from record & subrecord

let $mainrecname = 'JOB'
do list-record

let #gnr-field-end = 1
let $gnr-field-line-suffix = ')'

do gnr-field-JOB-handling


write #fic_tmp_defa from 'end-procedure'

!finishing up fusi-insert-JOB
close #fic_tmp_insv
do Append-Code('{tempdir}~FU_INSV.TMP',#fic_tmp_insc)
do Append-Code('{chemin}FUSI0019.COD',#fic_tmp_insc)
close #fic_tmp_insc

close #fic_tmp_defa

!finishing up fusi-select-JOB
do Append-Code('{chemin}FUSI0015.COD',#fic_tmp_selj)
close #fic_tmp_selj

!finishing up fusi-write-trace generation
write #fic_tmp_trac from 'end-procedure'
close #fic_tmp_trac

!finishing up fusi-debug-print-buffer
write #fic_tmp_debg from 'end-procedure'
close #fic_tmp_debg

end-procedure


begin-procedure gnr-field-JOB-handling !*
  !*AREA:  see gnr-JOB-handling
  !*INPUTS:
  !*$fusi_job_fieldname
  !*#fusi_job_fieldtype
  !*$fusi_job_defrecname
  !*$fusi_job_deffieldname

let $openbrace = '{'
let $closebrace = '}'

 evaluate #fusi_job_fieldtype
 when = {VIMP_FTYPE_CHAR}
   let $fusi_prefix = '$'
   let $system_default = ''' '''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = ''
   let $dateinsuf = ''
   let $dateoutpre = ''
   let $dateoutsuf = ''
   break
 when = {VIMP_FTYPE_DATE}
   let $fusi_prefix = '$'
   let $system_default = ''''''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = $openbrace || 'DateIn-Prefix' || $closebrace
   let $dateinsuf = $openbrace || 'DateIn-Suffix' || $closebrace
   let $dateoutpre = $openbrace || 'DateOut-Prefix' || $closebrace
   let $dateoutsuf = $openbrace || 'DateOut-Suffix' || $closebrace
 break
 when = {VIMP_FTYPE_TSTAMP}
   let $fusi_prefix = '$'
   let $system_default = ''''''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = $openbrace || 'DateTimeIn-Prefix' || $closebrace
   let $dateinsuf = $openbrace || 'DateTimeIn-Suffix' || $closebrace
   let $dateoutpre = $openbrace || 'DateTimeOut-Prefix' || $closebrace
   let $dateoutsuf = $openbrace || 'DateTimeOut-Suffix' || $closebrace
 break
 when = {VIMP_FTYPE_NUMBER}
 when = {VIMP_FTYPE_SIGNED}
   let $system_default = '0'
   let $fusi_prefix = '#'
   let $default_val_bracket = ''
!***** SH platform ORACLE
   let $dateinpre = ''
   let $dateinsuf = ''
   let $dateoutpre = ''
   let $dateoutsuf = ''
break
 when-other
    print 'Vertical Import Warning:  unsupported fieldtype :' (+1,1)
    print #fusi_job_fieldtype (0,3)
    print 'for field :' (0,0)
    print $fusi_job_fieldname (0,0,20)
 end-evaluate

!insert column list
write #fic_tmp_insc from $gnr-field-line-prefix $fusi_job_fieldname $gnr-field-line-suffix

!insert values list
!in the case of $emplid, #empl_rcd, $dt_nt_effdt, #effseq, $action
!the insert routine uses its parameter values and not fusi_buffer values
!added benefit of that:  does away with the need to convert # in fieldname (the
!only one in JOB is EMPL_RCD)
EVALUATE $fusi_job_fieldname
WHEN = 'EMPLID'
  let $values_fieldname = '$emplid'
  break
WHEN = 'EMPL_RCD'
  let $values_fieldname = '#empl_rcd'
  break
WHEN = 'EFFDT'
  let $values_fieldname = '$dt_nt_effdt'
  break
WHEN = 'EFFSEQ'
  let $values_fieldname = '#effseq'
  break
WHEN = 'ACTION'
  let $values_fieldname = '$action'
  break
WHEN = 'ACTION_REASON'
  let $values_fieldname = '$action_reason'
  break
WHEN = 'LASTUPDOPRID'
  let $values_fieldname = '$lastupdoprid'
  break
WHEN = 'LASTUPDDTTM'
  let $values_fieldname = '$lastupddttm'
  break
WHEN-OTHER
  let $values_fieldname = $fusi_prefix || '_fusi_buffer_' || $fusi_job_fieldname
END-EVALUATE

write #fic_tmp_insv from $gnr-field-line-prefix-values $dateinpre $values_fieldname $dateinsuf $gnr-field-line-suffix

!defaults assignments :  only constants and no defaults are handled
if ($fusi_job_defrecname = ' ' and $fusi_job_deffieldname != ' ' and $fusi_job_deffieldname != '%date')
  let $default_val = $default_val_bracket  || $fusi_job_deffieldname || $default_val_bracket
else
  let $default_val = $system_default
end-if

!defaulting dates to system date (%date) has no real meaning here
let $test_default = upper($default_val)
#debug print 'testing default' (+1,1)

#debug print '(' (+1,1)
#debug print $test_default ()
#debug print '=' ()
#debug print '%DATE)' ()

if ($test_default = '''%DATE''') or ($test_default = '''%DATETIME''')!and (#fusi_job_fieldtype = {VIMP_FTYPE_DATE})
  let $default_val = ''''''
  #debug print 'substit %date' ()
else
  #debug print 'no substit %date' ()
end-if

write #fic_tmp_defa from 'let ' $values_fieldname ' = ' $default_val

!writing select from existing JOB
write #fic_tmp_selj from $dateoutpre $fusi_job_fieldname $dateoutsuf ' &' $fusi_job_fieldname
write #fic_tmp_selj from '  let ' $values_fieldname ' = &' $fusi_job_fieldname


!writing trace file information, only for character data though
if ($fusi_prefix = '$')
  let $fusi_job_fieldlength = to_char(#fusi_job_fieldlength)
  write #fic_tmp_trac from $values_fieldname ':' $fusi_job_fieldlength
end-if

!writing debug vimp_buffer print commands
write #fic_tmp_debg from '#debug print ''' $fusi_job_fieldname ''' (+1,20)'
write #fic_tmp_debg from '#debug print '':''  (0,0)'
write #fic_tmp_debg from '#debug print ' $values_fieldname ' (0,0)'
write #fic_tmp_debg from '#debug print '':''  (0,0)'

let $gnr-field-line-prefix = ''
let $gnr-field-line-prefix-values = ''

end-procedure


!SH 14/08/1997 take JOB_JR into account

begin-procedure gnr-JOB_JR-handling !*
  !* AREA:       handling JOB_JR-related processing
  !* GENERATES:  fusi-set-defaults
  !*             fusi-insert-JOB_JR-(column and values lists)
  !*             fusi-set-buffer-from-defaults
  !*             fusi-debug
  !*             fusi-trace
  !* SELECTS:    FIELDNAMEs from PSRECFIELD where RECNAME = JOB_JR (+ SUBRECORDS)
  !* CALLS:      gnr-field-JOB_JR-handling, which does the field-level generation

let #gnr-field-end = 0
let $gnr-field-line-suffix = ','
let $gnr-field-line-prefix = '('
let $gnr-field-line-prefix-values = 'VALUES ('

!opening of temp file to insert column list
let  #fic_tmp_insc = 2
let  $fic_tmp_insc = '{tempdir}~FF_INSC.TMP'
open $fic_tmp_insc  as #fic_tmp_insc for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0030.COD',#fic_tmp_insc)

!opening of temp file to insert values list
let  #fic_tmp_insv = 3
let  $fic_tmp_insv = '{tempdir}~FF_INSV.TMP'
open $fic_tmp_insv  as #fic_tmp_insv for-writing record={MAX_PROG_LINEWIDTH}

!opening of temp file for default assignment list
let  #fic_tmp_defa = 4
let  $fic_tmp_defa = '{tempdir}~FF_DEFA.TMP'
open $fic_tmp_defa  as #fic_tmp_defa for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0033.COD',#fic_tmp_defa)

!opening of temp file for selecting initial JOB_JR values from existing data
let  #fic_tmp_selj = 5
let  $fic_tmp_selj = '{tempdir}~FF_SELJ.TMP'
open $fic_tmp_selj as #fic_tmp_selj for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0034.COD',#fic_tmp_selj)

!opening of temp file for trace data
let  #fic_tmp_trac = 6
let  $fic_tmp_trac = '{tempdir}~FF_TRAC.TMP'
open $fic_tmp_trac  as #fic_tmp_trac for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0036.COD',#fic_tmp_trac)

!opening of temp file for debug printing
let  #fic_tmp_debg = 7
let  $fic_tmp_debg = '{tempdir}~FF_DEBG.TMP'
open $fic_tmp_debg  as #fic_tmp_debg for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0037.COD',#fic_tmp_debg)


!SH 13/08/1997 select only fields from record & subrecord

let $mainrecname = 'JOB_JR'
do list-record

let #gnr-field-end = 1
let $gnr-field-line-suffix = ')'

do gnr-field-JOB_JR-handling



write #fic_tmp_defa from 'end-procedure'

!finishing up fusi-insert-JOB_JR
close #fic_tmp_insv
do Append-Code('{tempdir}~FF_INSV.TMP',#fic_tmp_insc)
do Append-Code('{chemin}FUSI0039.COD',#fic_tmp_insc)
close #fic_tmp_insc

close #fic_tmp_defa

!finishing up fusi-select-JOB_JR
do Append-Code('{chemin}FUSI0035.COD',#fic_tmp_selj)
close #fic_tmp_selj

!finishing up fusi-write-trace generation
write #fic_tmp_trac from 'end-procedure'
close #fic_tmp_trac

!finishing up fusi-debug-print-buffer
write #fic_tmp_debg from 'end-procedure'
close #fic_tmp_debg

end-procedure


!SH 14/08/1997
begin-procedure gnr-field-JOB_JR-handling !*
  !*AREA:  see gnr-JOB_JR-handling
  !*INPUTS:
  !*$fusi_job_jr_fieldname
  !*#fusi_job_jr_fieldtype
  !*$fusi_job_jr_defrecname
  !*$fusi_job_jr_deffieldname

let $openbrace = '{'
let $closebrace = '}'

 evaluate #fusi_job_jr_fieldtype
 when = {VIMP_FTYPE_CHAR}
   let $fusi_prefix = '$'
   let $system_default = ''' '''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = ''
   let $dateinsuf = ''
   let $dateoutpre = ''
   let $dateoutsuf = ''
break
 when = {VIMP_FTYPE_DATE}
   let $fusi_prefix = '$'
   let $system_default = ''''''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = $openbrace || 'DateIn-Prefix' || $closebrace
   let $dateinsuf = $openbrace || 'DateIn-Suffix' || $closebrace
   let $dateoutpre = $openbrace || 'DateOut-Prefix' || $closebrace
   let $dateoutsuf = $openbrace || 'DateOut-Suffix' || $closebrace
   break
 when = {VIMP_FTYPE_TSTAMP}
   let $fusi_prefix = '$'
   let $system_default = ''''''
   let $default_val_bracket = ''''
!***** SH platform ORACLE
   let $dateinpre = $openbrace || 'DateTimeIn-Prefix' || $closebrace
   let $dateinsuf = $openbrace || 'DateTimeIn-Suffix' || $closebrace
   let $dateoutpre = $openbrace || 'DateTimeOut-Prefix' || $closebrace
   let $dateoutsuf = $openbrace || 'DateTimeOut-Suffix' || $closebrace
   break
 when = {VIMP_FTYPE_NUMBER}
 when = {VIMP_FTYPE_SIGNED}
   let $system_default = '0'
   let $fusi_prefix = '#'
   let $default_val_bracket = ''
!***** SH platform ORACLE
   let $dateinpre = ''
   let $dateinsuf = ''
   let $dateoutpre = ''
   let $dateoutsuf = ''
   break
 when-other
    print 'Vertical Import Warning:  unsupported fieldtype :' (+1,1)
    print #fusi_job_jr_fieldtype (0,3)
    print 'for field :' (0,0)
    print $fusi_job_jr_fieldname (0,0,20)
 end-evaluate

!insert column list

write #fic_tmp_insc from $gnr-field-line-prefix $fusi_job_jr_fieldname $gnr-field-line-suffix

!insert values list
!in the case of $emplid, #empl_rcd, $dt_nt_effdt, #effseq, $action
!the insert routine uses its parameter values and not fusi_buffer values
!added benefit of that:  does away with the need to convert # in fieldname (the
!only one in JOB_JR is EMPL_RCD)
EVALUATE $fusi_job_jr_fieldname
WHEN = 'EMPLID'
  let $values_fieldname = '$emplid'
  break
WHEN = 'EMPL_RCD'
  let $values_fieldname = '#empl_rcd'
  break
WHEN = 'EFFDT'
  let $values_fieldname = '$dt_nt_effdt'
  break
WHEN = 'EFFSEQ'
  let $values_fieldname = '#effseq'
  break
WHEN = 'ACTION'
  let $values_fieldname = '$action'
  break
WHEN = 'ACTION_REASON'
  let $values_fieldname = '$action_reason'
  break
WHEN = 'LASTUPDOPRID'
  let $values_fieldname = '$lastupdoprid'
  break
WHEN = 'LASTUPDDTTM'
  let $values_fieldname = '$lastupddttm'
  break
WHEN-OTHER
  let $values_fieldname = $fusi_prefix || '_fusi_buffer_' || $fusi_job_jr_fieldname
END-EVALUATE

write #fic_tmp_insv from $gnr-field-line-prefix-values $dateinpre $values_fieldname $dateinsuf $gnr-field-line-suffix

!defaults assignments :  only constants and no defaults are handled
if ($fusi_job_jr_defrecname = ' ' and $fusi_job_jr_deffieldname != ' ') !and $fusi_job_jr_deffieldname != '%date')
  let $default_val = $default_val_bracket  || $fusi_job_jr_deffieldname || $default_val_bracket
else
  let $default_val = $system_default
end-if

!defaulting dates to system date (%date) has no real meaning here
let $test_default = upper($default_val)
#debug print 'testing default' (+1,1)

#debug print '(' (+1,1)
#debug print $test_default ()
#debug print '=' ()
#debug print '%DATE)' ()

if ($test_default = '''%DATE''') or ($test_default = '''%DATETIME''') !and (#fusi_job_jr_fieldtype = {VIMP_FTYPE_DATE})
  !SH 28/08/1998 updating date field when default value is %date
  let $default_val = '$_AsofToday'
  #debug print 'substit %date' ()
else
  #debug print 'no substit %date' ()
end-if

write #fic_tmp_defa from 'let ' $values_fieldname ' = ' $default_val

!writing select from existing JOB_JR

write #fic_tmp_selj from $dateoutpre $fusi_job_jr_fieldname $dateoutsuf ' &' $fusi_job_jr_fieldname
write #fic_tmp_selj from '  let ' $values_fieldname ' = &' $fusi_job_jr_fieldname



!writing trace file information, only for character data though
if ($fusi_prefix = '$')
  let $fusi_job_jr_fieldlength = to_char(#fusi_job_jr_fieldlength)
  write #fic_tmp_trac from $values_fieldname ':' $fusi_job_jr_fieldlength
end-if

!writing debug vimp_buffer print commands
write #fic_tmp_debg from '#debug print ''' $fusi_job_jr_fieldname ''' (+1,20)'
write #fic_tmp_debg from '#debug print '':''  (0,0)'
write #fic_tmp_debg from '#debug print ' $values_fieldname ' (0,0)'
write #fic_tmp_debg from '#debug print '':''  (0,0)'

let $gnr-field-line-prefix = ''
let $gnr-field-line-prefix-values = ''

end-procedure


!SH 14/08/1997  select fields from record and list subrecords
begin-procedure list-record

let $recname = $mainrecname
do list-fields

begin-select

FIELDNAME &subrecord
    let $recname = &subrecord
    do list-fields
from PSRECFIELD
where RECNAME = $mainrecname
and SUBRECORD = 'Y'
order by FIELDNAME

end-select

end-procedure


begin-procedure gnr-FPA_CI_JOB-handling !*
  !* AREA:       handling FPA_CI_JOB-related processing
  !* GENERATES:  fusi-insert-FPA_CI_JOB -(column and values lists)
  !*             fusi-debug
  !*             fusi-trace
  !* SELECTS:    FIELDNAMEs from PSRECFIELD where RECNAME = FPA_CI_JOB (+ SUBRECORDS)
  !* CALLS:      gnr-field-JOB-handling, which does the field-level generation

let #gnr-field-end = 0
let $gnr-field-line-suffix = ','
let $gnr-field-line-prefix = '('
let $gnr-field-line-prefix-values = 'VALUES ('

!opening of temp file to insert column list
let  #fic_tmp_insc = 2
let  $fic_tmp_insc = '{tempdir}~FC_INSC.TMP'
open $fic_tmp_insc  as #fic_tmp_insc for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0043.COD',#fic_tmp_insc)

!opening of temp file to insert values list
let  #fic_tmp_insv = 3
let  $fic_tmp_insv = '{tempdir}~FC_INSV.TMP'
open $fic_tmp_insv  as #fic_tmp_insv for-writing record={MAX_PROG_LINEWIDTH}

!opening of temp file for default assignment list
!8.3 let  #fic_tmp_defa = 4
!8.3 let  $fic_tmp_defa = '{tempdir}~FU_DEFA.TMP'
!8.3 open $fic_tmp_defa  as #fic_tmp_defa for-writing record={MAX_PROG_LINEWIDTH}

!8.3 do Append-Code('{chemin}FUSI0013.COD',#fic_tmp_defa)

!opening of temp file for selecting initial JOB values from existing data
!8.3 let  #fic_tmp_selj = 5
!8.3 let  $fic_tmp_selj = '{tempdir}~FU_SELJ.TMP'
!8.3 open $fic_tmp_selj  as #fic_tmp_selj for-writing record={MAX_PROG_LINEWIDTH}

!8.3 do Append-Code('{chemin}FUSI0014.COD',#fic_tmp_selj)

!opening of temp file for trace data
let  #fic_tmp_trac = 4
let  $fic_tmp_trac = '{tempdir}~FC_TRAC.TMP'
open $fic_tmp_trac  as #fic_tmp_trac for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0016.COD',#fic_tmp_trac)

!opening of temp file for debug printing
let  #fic_tmp_debg = 5
let  $fic_tmp_debg = '{tempdir}~FC_DEBG.TMP'
open $fic_tmp_debg  as #fic_tmp_debg for-writing record={MAX_PROG_LINEWIDTH}

do Append-Code('{chemin}FUSI0017.COD',#fic_tmp_debg)


!SH 13/08/1997 select only fields from record & subrecord

let $mainrecname = 'FPA_CI_JOB'
let $fusi_job_fieldname = ''
do list-record

let #gnr-field-end = 1
let $gnr-field-line-suffix = ')'

do gnr-field-JOB-handling


!8.3 write #fic_tmp_defa from 'end-procedure'

!finishing up fusi-insert-JOB
close #fic_tmp_insv
do Append-Code('{tempdir}~FC_INSV.TMP',#fic_tmp_insc)
do Append-Code('{chemin}FUSI0049.COD',#fic_tmp_insc)
close #fic_tmp_insc

!8.3 close #fic_tmp_defa

!finishing up fusi-select-JOB
!8.3 do Append-Code('{chemin}FUSI0015.COD',#fic_tmp_selj)
!8.3 close #fic_tmp_selj

!finishing up fusi-write-trace generation
write #fic_tmp_trac from 'end-procedure'
close #fic_tmp_trac

!finishing up fusi-debug-print-buffer
write #fic_tmp_debg from 'end-procedure'
close #fic_tmp_debg

end-procedure




!SH 14/08/1997 select fields from $recname
begin-procedure list-fields

begin-select
RF.FIELDNAME            &RF2.FIELDNAME
DF.FIELDTYPE            &DF2.FIELDTYPE
RF.DEFRECNAME           &RF2.DEFRECNAME
RF.DEFFIELDNAME         &RF2.DEFFIELDNAME
DF.LENGTH               &DF2.LENGTH

  !due to special requirements for end-of-list handling (commas in insert lists)
  !field level generation is handled on previously fetched value (and at select end)
  !controlled by #gnr-field-end flag

  !SH 14/08/1997 take JOB_JR into account
  evaluate $mainrecname
  when = 'JOB'
  when = 'FPA_CI_JOB'
    if ($fusi_job_fieldname != '')
        do gnr-field-JOB-handling
    end-if

    let $fusi_job_fieldname = rtrim(&RF2.FIELDNAME,' ')
    let #fusi_job_fieldtype = &DF2.FIELDTYPE
    let $fusi_job_defrecname = &RF2.DEFRECNAME
    let $fusi_job_deffieldname = &RF2.DEFFIELDNAME
    let #fusi_job_fieldlength = &DF2.LENGTH

  when = 'JOB_JR'
    if ($fusi_job_jr_fieldname != '')
        do gnr-field-JOB_JR-handling
    end-if

    let $fusi_job_jr_fieldname = rtrim(&RF2.FIELDNAME,' ')
    let #fusi_job_jr_fieldtype = &DF2.FIELDTYPE
    let $fusi_job_jr_defrecname = &RF2.DEFRECNAME
    let $fusi_job_jr_deffieldname = &RF2.DEFFIELDNAME
    let #fusi_job_jr_fieldlength = &DF2.LENGTH
  end-evaluate

FROM PSRECFIELD RF,
PSDBFIELD       DF
WHERE DF.FIELDNAME  = RF.FIELDNAME
AND   RF.RECNAME    = $recname
AND   RF.SUBRECORD  = 'N'
ORDER BY 1
end-select

end-procedure


begin-procedure gnr-fusion-field-handling !*
  !* AREA:       handling all fields to be fusionned from component tables
  !* GENERATES:  fusi-select-actions (calls to selects of actions on individual records)
  !*             fusi-select-action-##RECNAME## (selects of actions on indiv. records)
  !*             fusi-fusion-JOB (call to fusion from component tables)
  !*             fusi-fusion-##RECNAME## (fusion from component table)
  !* SELECTS:    RECNAME, FIELDNAME, FIELDNAME_SRCE from PS_FPMRECFIELD (+PSDBFIELD)
  !* CALLS:      BEFORE-RECNAME-CHANGE, AFTER-RECNAME-CHANGE, gnr-field-fusion

!opening of temp file to write action selects against component tables
let  #fic_tmp_acts = 2
let  $fic_tmp_acts = '{tempdir}~FU_ACTS.TMP'
open $fic_tmp_acts  as #fic_tmp_acts for-writing record={MAX_PROG_LINEWIDTH}

!opening of temp file to write calls to selects against component tables with effseqs
let  #fic_tmp_sela = 3
let  $fic_tmp_sela = '{tempdir}~FU_SELA.TMP'
open $fic_tmp_sela  as #fic_tmp_sela for-writing record={MAX_PROG_LINEWIDTH}

!writing fusi-select-actions header
#debug display 'write 5'
do Append-Code('{chemin}FUSI0008.COD', #fic_tmp_sela)

!opening of temp file to write calls to fusi-JOB-##RECNAME##
let  #fic_tmp_fjob = 4
let  $fic_tmp_fjob = '{tempdir}~FU_FJOB.TMP'
open $fic_tmp_fjob  as #fic_tmp_fjob for-writing record={MAX_PROG_LINEWIDTH}

!opening of temp file to write fusi-JOB-##RECNAME##
let  #fic_tmp_frec = 5
let  $fic_tmp_frec = '{tempdir}~FU_FREC.TMP'
open $fic_tmp_frec  as #fic_tmp_frec for-writing record={MAX_PROG_LINEWIDTH}

!writing fusi-JOB header
#debug display 'write 6'
do Append-Code('{chemin}FUSI0011.COD', #fic_tmp_fjob)



!post-mods
begin-select
RF.RECNAME        &FUSI_RECNAME       (+1,1,20) ON-BREAK PRINT=ALWAYS LEVEL=1 BEFORE=BEFORE-RECNAME-CHANGE AFTER=AFTER-RECNAME-CHANGE
  let $FUSI_RECNAME = rtrim(&FUSI_RECNAME,' ')
RF.FIELDNAME      &FUSI_FIELDNAME_JOB (,,20)
  let $FUSI_FIELDNAME_JOB = rtrim(&FUSI_FIELDNAME_JOB,' ')
RF.FIELDNAME_SRCE &FUSI_FIELDNAME_COMPO (,,20)  ON-BREAK PRINT=ALWAYS LEVEL=2 BEFORE=gnr-field-fusion !modified from AFTER, fieldname_job
  let $FUSI_FIELDNAME_COMPO= rtrim(&FUSI_FIELDNAME_COMPO,' ')
DF.FIELDTYPE      &FUSI_FIELDTYPE  (,,4)
  let $FUSI_FIELDTYPE = &FUSI_FIELDTYPE
1 &EFFSEQ_PRES
  let #EFFSEQ_PRES = &effseq_pres
from PS_FPMRECFIELD RF,
PSDBFIELD DF
where DF.FIELDNAME = RF.FIELDNAME
and exists
 (select 1 from PSRECFIELD RF2
  where  RF2.RECNAME = RF.RECNAME
  and    RF2.FIELDNAME = 'EFFSEQ')

UNION

select
RF.RECNAME,
RF.FIELDNAME,
RF.FIELDNAME_SRCE,
DF.FIELDTYPE,
0
from PS_FPMRECFIELD RF,
PSDBFIELD DF
where DF.FIELDNAME = RF.FIELDNAME
and not exists
 (select 1 from PSRECFIELD RF2
  where  RF2.RECNAME = RF.RECNAME
  and    RF2.FIELDNAME = 'EFFSEQ')
order by 5 desc, 1, 2
end-select

!post-mods

#debug display 'write 1'
write #fic_tmp_sela from 'no_select:'
write #fic_tmp_sela from 'end-procedure'

#debug display 'write 7'
do Append-Code('{chemin}FUSI0012.COD', #fic_tmp_fjob)


close #fic_tmp_sela
close #fic_tmp_acts
close #fic_tmp_fjob
close #fic_tmp_frec


end-procedure

begin-procedure BEFORE-RECNAME-CHANGE !*
  !* AREA:  handling component table information
  !* GENERATES:  header for fusi-select-action-##RECNAME##s
  !*             header for fusi-fusion-##RECNAME##s
#debug print 'BEFORE-RECNAME' (+2,1)
#debug print &FUSI_RECNAME           (,20,20)
#debug print &FUSI_FIELDNAME_JOB     (,,20)
#debug print &FUSI_FIELDNAME_COMPO   (,,20)

if (&FUSI_RECNAME != '')
  let $FUSI_RECNAME_SUB = rtrim(&FUSI_RECNAME,' ')
  do set-substit-variable($substit1varname,$FUSI_RECNAME_SUB, #substit_var_value_set)


  #debug display 'write 8'

  if (&EFFSEQ_PRES = 1)
    ! this table has an effseq
    #debug print 'EFFSEQ logic'   (,,15)

    !generating individual action selects vs component tables
    do Append-Code('{chemin}FUSI0010.COD', #fic_tmp_acts)

    !generating calls to individual action selects vs component tables
    #debug display 'write 14'
    write #fic_tmp_sela from 'do fusi-select-action-' $FUSI_RECNAME_SUB '($fusi_emplid, #fusi_empl_rcd, $fusi_dt_nt_start_date)'

    !generating calls to individual fusion selects vs component tables   w effseq
    #debug display 'write 9'
    do Append-Code('{chemin}FUSI0002.COD', #fic_tmp_fjob)

    !generating headers to individual fusion selects vs component tables w effseq
    #debug display 'write 10'
    do Append-Code('{chemin}FUSI0004.COD', #fic_tmp_frec)

  else
    ! this table doesn't
    #debug print 'no EFFSEQ logic'   (,,15)

    !generating individual action selects vs component tables
    do Append-Code('{chemin}FUSI0020.COD', #fic_tmp_acts)

    !generating calls to individual action selects vs component tables
    #debug display 'write 2'
    write #fic_tmp_sela from 'do fusi-select-action-' $FUSI_RECNAME_SUB '($fusi_emplid, #fusi_empl_rcd, $fusi_dt_nt_start_date)'

    !generating calls to individual fusion selects vs component tables   wo effseq
    #debug display 'write 9'
    do Append-Code('{chemin}FUSI0021.COD', #fic_tmp_fjob)

    !generating headers to individual fusion selects vs component tables wo effseq
    #debug display 'write 13'
    do Append-Code('{chemin}FUSI0022.COD', #fic_tmp_frec)

  end-if


  !postmods

end-if



end-procedure

begin-procedure AFTER-RECNAME-CHANGE !*
!* AREA:  handling component table information
  !* GENERATES:  footer for fusi-select-action-##RECNAME##s
  !*             footer for fusi-fusion-##RECNAME##s

#debug print 'AFTER-RECNAME' (+2,1)
#debug print $FUSI_RECNAME           (,20,20)
#debug print $FUSI_FIELDNAME_JOB     (,,20)
#debug print $FUSI_FIELDNAME_COMPO   (,,20)

if (#EFFSEQ_PRES = 1)
  #debug display 'write 11'
  do Append-Code('{chemin}FUSI0005.COD', #fic_tmp_frec)
else
  #debug display 'write 12'


  if ($FUSI_RECNAME = 'FPAEELEGALSTAT')
    !fetch STATUS associated with ACTION as well
    do Append-Code('{chemin}FUSI0024.COD', #fic_tmp_frec)
  else
   do Append-Code('{chemin}FUSI0023.COD', #fic_tmp_frec)
  end-if

end-if

end-procedure

begin-procedure gnr-field-fusion !($RECNAME, $FIELDNAME_JOB, $FIELDNAME_COMPO, #FIELDTYPE) !*
 !*AREA:  fusioning data from component tables
 !*GENERATES: selecting component field data
 !*           assigning component field data to JOB fields

if (&FUSI_RECNAME != '')

  EVALUATE &FUSI_FIELDTYPE
   when = {VIMP_FTYPE_CHAR}
   when = {VIMP_FTYPE_DATE}
   when = {VIMP_FTYPE_TSTAMP}
     let $fusi_prefix = '$'
     break
   when = {VIMP_FTYPE_NUMBER}
   when = {VIMP_FTYPE_SIGNED}
     let $fusi_prefix = '#'
     break
  WHEN-OTHER
    print 'Fusion JOB:  unsupported fieldtype :' (+1,1)
    print 'for field :' (0,0)
  END-EVALUATE



!*** platform ORACLE
  if &FUSI_FIELDTYPE = {VIMP_FTYPE_DATE}
     let $openbrace = '{'
     let $closebrace = '}'
     let $beforefield = $openbrace || 'DATEOUT-PREFIX' || $closebrace
     let $afterfield =  $openbrace || 'DATEOUT-SUFFIX' || $closebrace
  else
     If &FUSI_FIELDTYPE = {VIMP_FTYPE_TSTAMP}
        let $openbrace = '{'
        let $closebrace = '}'
        let $beforefield = $openbrace || 'DATETIMEOUT-PREFIX' || $closebrace
        let $afterfield =  $openbrace || 'DATETIMEOUT-SUFFIX' || $closebrace
     else
        let $beforefield = ''
        let $afterfield = ''
     end-if
  end-if

  let $FUSI_GNR_FIELDNAME_JOB = rtrim(&FUSI_FIELDNAME_JOB,' ')
  let $FUSI_GNR_FIELDNAME_COMPO = rtrim(&FUSI_FIELDNAME_COMPO,' ')

  !selecting columns from the component table
  #debug display 'write 3'
  write #fic_tmp_frec from $beforefield $FUSI_GNR_FIELDNAME_COMPO $afterfield ' &' $FUSI_GNR_FIELDNAME_COMPO

  !assigning selected data to the target JOB fields
  #debug display 'write 4'
  write #fic_tmp_frec from ' let ' $fusi_prefix '_fusi_buffer_' $FUSI_GNR_FIELDNAME_JOB ' = &' $FUSI_GNR_FIELDNAME_COMPO

end-if

end-procedure


begin-procedure Get-Values
!   do Get-As-Of-Date
end-procedure

begin-procedure Process-Main !*
  !* main program flow

!Header include
#debug display 'write 15'
do Append-Code('{chemin}FUSI0001.COD', #fic_genere)

!generating field fusion handling and action selection
do  gnr-fusion-field-handling

!generating insert, defaults for JOB
do  gnr-JOB-handling

!SH 14/08/1997 take JOB_JR into account
!generating insert, defaults for JOB_JR
do  gnr-JOB_JR-handling

!generating insert for FPA_CI_JOB
do  gnr-FPA_CI_JOB-handling


!glue-backs
do Append-Code('{tempdir}~FU_ACTS.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_SELA.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_FJOB.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_FREC.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_SELJ.TMP', #fic_genere)
!do Append-Code('{tempdir}~FU_INSC.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_DEFA.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_TRAC.TMP', #fic_genere)
do Append-Code('{tempdir}~FU_DEBG.TMP', #fic_genere)
do Append-Code('{tempdir}~FF_SELJ.TMP', #fic_genere)
!do Append-Code('{tempdir}~FF_INSC.TMP', #fic_genere)
do Append-Code('{tempdir}~FF_DEFA.TMP', #fic_genere)
do Append-Code('{tempdir}~FF_TRAC.TMP', #fic_genere)
do Append-Code('{tempdir}~FF_DEBG.TMP', #fic_genere)

do Append-Code('{tempdir}~FC_INSC.TMP', #fic_genere)

end-procedure



#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
