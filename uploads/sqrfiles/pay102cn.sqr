!**********************************
!  PAY102CN: Workers Compensation *
!**********************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2012/02/17:15:51:45                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  872517                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization
#Include 'canrpt.sqc'    !Get CAN variables

begin-report
  do Init-Report
  do Process-Main
!  If you want the data in the work table to be available after the run,
!  comment out the next line of code "do Delete-Work-Table"
!  do Delete-Work-Table
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'PAY102CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Pay102cn_Title_work_comp to $ReportTitle
  display $ReportTitle

  do Init-DateTime
  do Init-Number


  if $Prcs_Process_Instance = ''
    do Get-From-Thru-Dates
    move $AsOfDate to $ThruDate
    move ''        to $Run_ID
  else
    do Get-Report-Parameters
    if   $Run_ID <> ''
         let $Run_ID = rtrim($Run_ID, ' ')
         do Get-RunID-Check-Date
    end-if
  end-if


  do Format-DateTime($FromDate, $FmtFromDate, {DEFCMP}, '', '')
  do Format-DateTime($ThruDate, $FmtThruDate, {DEFCMP}, '', '')

  do Format-DateTime($ThruDate, $out, {DEFCMP}, '', '')
  let $temp1 = substr($out, 1, 4)
  let $FromDateWork  = $temp1 || '0101'
  do Format-DateTime($FromDateWork, $FromYtdDate, {DEFCMP}, '', 'native')

  do Get-Current-DateTime
  do Delete-Work-Table
  do Get-WCB-Limits

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY102CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY102CN', 'TITLE_WORK_COMP'   , $Pay102cn_Title_work_comp , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'RUNID_HDG'         , $Pay102cn_runid_hdg       , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_LN1'       , $Pay102cn_col_hdg_ln1     , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG1_LN2'      , $Pay102cn_col_hdg1_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG2_LN2'      , $Pay102cn_col_hdg2_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG3_LN2'      , $Pay102cn_col_hdg3_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG4_LN2'      , $Pay102cn_col_hdg4_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG5_LN2'      , $Pay102cn_col_hdg5_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG6_LN2'      , $Pay102cn_col_hdg6_ln2    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG1_LN3'      , $Pay102cn_col_hdg1_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG2_LN3'      , $Pay102cn_col_hdg2_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG3_LN3'      , $Pay102cn_col_hdg3_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG4_LN3'      , $Pay102cn_col_hdg4_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG5_LN3'      , $Pay102cn_col_hdg5_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG6_LN3'      , $Pay102cn_col_hdg6_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG7_LN3'      , $Pay102cn_col_hdg7_ln3    , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'LIMIT'             , $Pay102cn_limit           , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'TOTAL'             , $Pay102cn_total           , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'CLASS_NOT_FOUND'   , $Pay102cn_class_not_found , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'UNKNOWN'           , $Pay102cn_unknown         , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_YTD'       , $Pay102cn_ytd             , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_CHEQUE'    , $Pay102cn_cheque_dt       , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'FOR_PERIOD_HDG'    , $Pay102cn_for_period_hdg  , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'THROUGH_HDG'       , $Pay102cn_through_hdg     , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_BRACKET_1' , $Pay102cn_col_hdg_bracket1, #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_BRACKET_2' , $Pay102cn_col_hdg_bracket2, #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_ARROW_1'   , $Pay102cn_col_hdg_arrow1  , #dummy_width)
   do Get_Field_Information ('PAY102CN', 'COL_HDG_ARROW_2'   , $Pay102cn_col_hdg_arrow2  , #dummy_width)
end-procedure

begin-heading 10

  move $Company   to $Hold-Company
  move $Prev_Comp to $Company
  #Include 'stdhtr02.sqc'

  if    $Run_ID <> ''
        print $Pay102cn_runid_hdg                (+1,01)
        print $Run_ID                            (0, +1)
        print $Pay102cn_col_hdg_bracket1         (0, +1)
        print $Pay102cn_cheque_dt                (0, 0)
        do Format-DateTime($ThruDate, $out, {DEFDATE}, '', '')
        print $out                               (0, +1)
        print $Pay102cn_col_hdg_bracket2         (0, 0)
  else
        print $Pay102cn_for_period_hdg           (+1,01)
        do Format-DateTime($FromDate, $out, {DEFDATE}, '', '')
        print $out                               (0,+1)
        print $Pay102cn_through_hdg              (0,+1)
        do Format-DateTime($ThruDate, $out, {DEFDATE}, '', '')
        print $out                               (0,+1)
  end-if

!-----------------column headings line1

  if    $Run_ID <> ''
        print $Pay102cn_col_hdg_arrow1           (+2,59)
        print $Pay102cn_runid_hdg                (0, +6)
        print $Run_ID                            (0, +1)
        print $Pay102cn_col_hdg_bracket1         (0, +1)
        print $Pay102cn_cheque_dt                (0, 0)
        do Format-DateTime($ThruDate, $out, {DEFDATE}, '', '')
        print $out                               (0, +1)
        print $Pay102cn_col_hdg_bracket2         (0, 0)
        print $Pay102cn_col_hdg_arrow2           (0, +6)
  else
        print $Pay102cn_col_hdg_arrow1           (+2,59)
        print $Pay102cn_for_period_hdg           (0,+5)
        do Format-DateTime($FromDate, $out, {DEFDATE}, '', '')
        print $out                               (0,+1)
        print $Pay102cn_through_hdg              (0,+1)
        do Format-DateTime($ThruDate, $out, {DEFDATE}, '', '')
        print $out                               (0,+1)
        print $Pay102cn_col_hdg_arrow2           (0,+6)
  end-if

  print $Pay102cn_col_hdg_arrow1                 (0,138)
  print $Pay102cn_ytd                            (0,+1)
  print $Pay102cn_through_hdg                    (0,+1)
  do Format-DateTime($ThruDate, $out, {DEFDATE}, '', '')
  print $out                                     (0,+1)
  print $Pay102cn_col_hdg_arrow2                 (0,+2)

!-----------------column headings line2
  print $Pay102cn_col_hdg1_ln2                   (+1,01)
  print $Pay102cn_col_hdg2_ln2                   (0,62)
  print $Pay102cn_col_hdg3_ln2                   (0,73)
  print $Pay102cn_col_hdg4_ln2                   (0,90)
  print $Pay102cn_col_hdg5_ln2                   (0,103)
  print $Pay102cn_col_hdg5_ln2                   (0,118)
  print $Pay102cn_col_hdg3_ln2                   (0,138)
  print $Pay102cn_col_hdg_ln1                    (0,157)

!------------------column headings line3
  print $Pay102cn_col_hdg1_ln3                   (+1,01)
  print $Pay102cn_col_hdg2_ln3                   (0,16)
  print $Pay102cn_col_hdg3_ln3                   (0,59)
  print $Pay102cn_col_hdg4_ln3                   (0,73)
  print $Pay102cn_col_hdg5_ln3                   (0,90)
  print $Pay102cn_col_hdg6_ln3                   (0,108)
  print $Pay102cn_col_hdg7_ln3                   (0,122)
  print $Pay102cn_col_hdg4_ln3                   (0,138)
  print $Pay102cn_col_hdg6_ln2                   (0,153)
  print $Pay102cn_col_hdg5_ln3                   (0,167)

  move $Pay102cn_unknown to $Prov-Descr
  move $Prev_Province to $State
  do Get-State-Tax-Data               ! Call GetStDta sqc to get the province name
  move $StateName to $Prov-descr

!  print $Pay102cn_tot_ytd                        (-5,58)
  let $Prov-Descr = rtrim($Prov-Descr, ' ')
  print $Prov-Descr                              (-5,72)
  print $Pay102cn_limit                          (0,0)
  do Get-Prov-Limit
  do Format-Number(#Prov-Limit, $out, '$$$$,$$9.99')
  print $out                                     (0,0)
  move $Hold-Company to $Company

end-heading

begin-procedure Process-Main

  move 'Y'            to $First-Row
  move 'X'            to $Prev-Company
  move 'X'            to $Prev-Paygroup
  move ''             to $Prev-Pay-End-Dt
  move 'X'            to $Prev-Off-Cycle
  move 0              to #Prev-Page
  move 0              to #Prev-Line
  move 0              to #Prev-AddlNbr
  move 0              to #Prev-SepChk
  move 'X'            to $Prev-Emplid
  move 'X'            to $Prev-Province
  move 0              to #Cur-Earns
  move 0              to #Cur-Assessable
  move 0              to #Cur-Overage
  move 0              to #Emp-Tot-Earns
  move 0              to #Ytd-Earns
  move 0              to #Ytd-Overage

  if $Prov_Opt = 'S'
     do Build-Select
  else
     move ' ' to $Select
  end-if

begin-SELECT
C.OFFICER_CD
C.BUSINESS_UNIT
A.COMPANY
A.PAYGROUP
A.PAY_END_DT
A.OFF_CYCLE
A.PAGE_NUM
A.LINE_NUM
A.ADDL_NBR
A.SEPCHK
A.EMPLID
B.PROVINCE
A.JOBCODE
L.CHECK_DT
L.RUN_ID
A.ERNCD_REG_HRS
A.REG_HRLY_EARNS
A.ERNCD_REG_EARNS
A.REG_EARNS
A.ERNCD_OT_HRS
A.OT_HRLY_EARNS
C.SETID_JOBCODE

  do Get-CU
  do Evaluate-Officers

  if  ((&A.COMPANY    <> $Prev-Company)    or
       (&B.PROVINCE   <> $Prev-Province)   or
       (&A.EMPLID     <> $Prev-Emplid)     or
       ($Rate_Group   <> $Prev-Rt-Grp)     or
       ($CU           <> $Prev-CU))
    if  $First-Row = 'N'
      do Insert-Work-Row

      add #Ytd-Earns      to #Emp-Tot-Earns
      move 0              to #Cur-Earns
      move 0              to #Cur-Assessable
      move 0              to #Cur-Overage
      move 0              to #Ytd-Earns
      move 0              to #Ytd-Overage
    end-if
  end-if

  if  ((&A.COMPANY    <> $Prev-Company)    or
       (&B.PROVINCE   <> $Prev-Province)   or
       (&A.EMPLID     <> $Prev-Emplid))
    if  $First-Row = 'N'
      move 0 to #Emp-Tot-Earns
    end-if
  end-if

  if  ((&A.COMPANY    <> $Prev-Company)    or
       (&A.PAYGROUP   <> $Prev-Paygroup)   or
       (&A.PAY_END_DT <> $Prev-Pay-End-Dt))
    do Format-DateTime(&L.Check_Dt, $FmtCheckDate, {DEFCMP}, '', '')
    if $Run_ID <> ''
      let $Cmp_RunID = rtrim(&L.RUN_ID, ' ')
    end-if
  end-if

  if  ((&A.COMPANY    <> $Prev-Company)    or
       (&A.PAYGROUP   <> $Prev-Paygroup)   or
       (&A.PAY_END_DT <> $Prev-Pay-End-Dt) or
       (&A.OFF_CYCLE  <> $Prev-Off-Cycle)  or
       (&A.PAGE_NUM   <> #Prev-Page)       or
       (&A.LINE_NUM   <> #Prev-Line)       or
       (&A.ADDL_NBR   <> #Prev-AddlNbr))
    if $Zero-Earnings = 'N'
      do Get-Earnings
    end-if
  end-if

  if  ((&A.COMPANY    <> $Prev-Company)    or
       (&A.PAYGROUP   <> $Prev-Paygroup)   or
       (&A.PAY_END_DT <> $Prev-Pay-End-Dt) or
       (&A.OFF_CYCLE  <> $Prev-Off-Cycle)  or
       (&A.PAGE_NUM   <> #Prev-Page)       or
       (&A.LINE_NUM   <> #Prev-Line)       or
       (&A.SEPCHK     <> #Prev-SepChk))
    if $Zero-Earnings = 'N'
      do Get-Deductions
    end-if
  end-if

  if $Zero-Earnings = 'N'

    let #Temp-Earns = &A.REG_HRLY_EARNS
    add #Temp-Earns to #Ytd-Earns
    if  $Run_ID <> ''
        if $Cmp_RunID = $Run_ID
           add #Temp-Earns to #Cur-Earns
        end-if
    else
         if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
            add #Temp-Earns to #Cur-Earns
         end-if
    end-if

    let #Temp-Earns = &A.REG_EARNS
    add #Temp-Earns to #Ytd-Earns
    if  $Run_ID <> ''
        if $Cmp_RunID = $Run_ID
           add #Temp-Earns to #Cur-Earns
        end-if
    else
        if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
            add #Temp-Earns to #Cur-Earns
        end-if
    end-if

    let #Temp-Earns = &A.OT_HRLY_EARNS
    add #Temp-Earns to #Ytd-Earns
    if  $Run_ID <> ''
        if $Cmp_RunID = $Run_ID
           add #Temp-Earns to #Cur-Earns
        end-if
    else
         if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
            add #Temp-Earns to #Cur-Earns
        end-if
    end-if
  end-if

  move &A.COMPANY        to $Prev-Company
  move &A.PAYGROUP       to $Prev-Paygroup
  move &A.PAY_END_DT     to $Prev-Pay-End-Dt
  move &A.OFF_CYCLE      to $Prev-Off-Cycle
  move &A.PAGE_NUM       to #Prev-Page
  move &A.LINE_NUM       to #Prev-Line
  move &A.ADDL_NBR       to #Prev-AddlNbr
  move &A.SEPCHK         to #Prev-SepChk
  move &A.EMPLID         to $Prev-Emplid
  move &B.PROVINCE       to $Prev-Province
  move $Rate_Group       to $Prev-Rt-Grp
  move $CU               to $Prev-CU
  move 'N'               to $First-Row
  move &C.Business_unit  to $Busunit
  let $Recname           = 'LOCATION_TBL'

FROM  PS_PAY_EARNINGS A,
      PS_PAY_TAX_CAN B,
      PS_JOB C,
      PS_PAY_CALENDAR L
WHERE L.CHECK_DT BETWEEN $FromYtdDate AND $ThruDate
  AND A.COMPANY    = L.COMPANY
  AND A.PAYGROUP   = L.PAYGROUP
  AND A.PAY_END_DT = L.PAY_END_DT
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND B.OFF_CYCLE  = A.OFF_CYCLE
  AND B.PAGE_NUM   = A.PAGE_NUM
  AND B.LINE_NUM   = A.LINE_NUM
  AND B.SEPCHK     = A.SEPCHK
  AND A.SINGLE_CHECK_USE IN ('C', 'N')
  AND A.EMPLID     = C.EMPLID
  AND A.EMPL_RCD   = C.EMPL_RCD
  AND B.PROVINCE  <> 'ZZ'
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! If you are printing only selected provinces, enter the provinces           x
! in the line(s) below and space out the exclamation point (!) in column 1   x
! of the lines containing the needed provinces.  Add a line for each         x
! province to be processed.  If only one province is to be processed,        x
! replace the word "or" with a right parenthesis ")" on the first line shown x
! below and remove the "!" from only that line.                              x
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! AND (B.PROVINCE = 'aa' or
!      B.PROVINCE = 'bb' or
!      B.PROVINCE = 'cc')
#ifdef MVS
  \$SELECT\
#else
  [$SELECT]
#endif
  AND B.TAX_CLASS_CAN =
        (SELECT MAX(TAX_CLASS_CAN)
          FROM  PS_PAY_TAX_CAN
         WHERE COMPANY     = B.COMPANY
           AND PAYGROUP    = B.PAYGROUP
           AND PAY_END_DT  = B.PAY_END_DT
           AND OFF_CYCLE   = B.OFF_CYCLE
           AND PAGE_NUM    = B.PAGE_NUM
           AND LINE_NUM    = B.LINE_NUM
           AND SEPCHK      = B.SEPCHK
           AND PROVINCE    = B.PROVINCE)
  AND C.EFFDT =
        (SELECT MAX(J1.EFFDT)
          FROM  PS_JOB J1
         WHERE  J1.EMPLID     = C.EMPLID
           AND  J1.EMPL_RCD   = C.EMPL_RCD
           AND  J1.EFFDT     <= A.PAY_END_DT)
  AND C.EFFSEQ =
        (SELECT MAX(J2.EFFSEQ)
          FROM  PS_JOB J2
         WHERE  J2.EMPLID     = C.EMPLID
           AND  J2.EMPL_RCD   = C.EMPL_RCD
           AND  J2.EFFDT      = C.EFFDT)
ORDER BY A.COMPANY ASC,B.PROVINCE ASC,A.EMPLID ASC,A.PAYGROUP ASC,
         A.PAY_END_DT ASC,A.OFF_CYCLE ASC,A.PAGE_NUM ASC,A.LINE_NUM ASC,
         A.SEPCHK ASC,A.ADDL_NBR ASC
end-SELECT

  if  $First-Row = 'N'
    do Insert-Work-Row
  end-if

  move '*'        to $Province
  move '*'        to $Prev_Empl
  move 0          to #WCB_Earnings
  move '*'        to $Prev_Comp
  move '*'        to $Prev_Province
  move 'Y'        to $First-Row

begin-SELECT
R.COMPANY
R.PROVINCE
R.CAN_WCB_RATE_GROUP
R.CAN_WCB_CU
#ifndef DB2
SUM(R.WCB_YTD_ASSESSABLE)  &Ytd_Assessable
SUM(R.WCB_ASSESSABLE)  &Tot_Assessable
SUM(R.WCB_OVER_EARNS)  &Tot_Over_Earns
SUM(R.WCB_YTD_OVER_EARNS)  &Ytd_Over_Earns
#else
DECIMAL(SUM(R.WCB_YTD_ASSESSABLE), 15, 3)  &Ytd_Assessable
DECIMAL(SUM(R.WCB_ASSESSABLE), 15, 3) &Tot_Assessable
DECIMAL(SUM(R.WCB_OVER_EARNS), 15, 3) &Tot_Over_Earns
DECIMAL(SUM(R.WCB_YTD_OVER_EARNS), 15, 3) &Ytd_Over_Earns
#end-if

  move &R.PROVINCE            to  $Curr_Prov
  move &R.COMPANY             to  $Company
  move &R.CAN_WCB_CU          to  $WCB_CU
  move &R.CAN_WCB_RATE_GROUP  to  $WCB_RG
  move &R.Province            to  $Province

  if $First-Row = 'Y'
    move $Company   to $Prev_Comp
    move $Province  to $Prev_Province
    move 'N'        to $First-Row
  end-if

  if $Company <> $Prev_Comp
    do Company-Change
  else
    if $Curr_Prov <> $Prev_Province
      do Province-Change
    else
      do CU-Change
    end-if
  end-if

  move $Curr_Empl to $Prev_Empl
  move $Company   to $Prev_Comp
  move $Province  to $Prev_Province
  move $WCB_CU    to $Prev_WCB_CU

FROM  PS_R_PAY102CN R
WHERE R.WCB_ASSESSABLE <> 0 !> 0
   OR R.WCB_OVER_EARNS <> 0 !> 0

GROUP BY R.COMPANY, R.PROVINCE, R.CAN_WCB_RATE_GROUP, R.CAN_WCB_CU
ORDER BY R.COMPANY, R.PROVINCE, R.CAN_WCB_RATE_GROUP, R.CAN_WCB_CU
end-SELECT

  if $Province <> '*'
    move '*' to $Prev_Prov
    do Print-Prov-Line
  end-if
end-procedure

begin-procedure Get-WCB-Limits
  move 0 to #Limit
  move 0 to #AB-Limit
  move 0 to #BC-Limit
  move 0 to #MB-Limit
  move 0 to #NB-Limit
  move 0 to #NF-Limit
  move 0 to #NL-Limit
  move 0 to #NS-Limit
  move 0 to #NT-Limit
  move 0 to #NN-Limit
  move 0 to #NU-Limit
  move 0 to #ON-Limit
  move 0 to #PE-Limit
  move 0 to #QC-Limit
  move 0 to #SK-Limit
  move 0 to #YT-Limit

begin-SELECT
AB.EFFDT
AB.WCB_LIMIT
  move &AB.WCB_LIMIT to #AB-Limit
FROM PS_CAN_TAX_PROV AB
WHERE AB.PROVINCE    = 'AB'
  AND AB.EFFDT       =
        (SELECT MAX(EFFDT)
         FROM PS_CAN_TAX_PROV
         WHERE PROVINCE = AB.PROVINCE
         AND   EFFDT <= $ThruDate)
end-SELECT

begin-SELECT
BC.EFFDT
BC.WCB_LIMIT
  move &BC.WCB_LIMIT to #BC-Limit
FROM PS_CAN_TAX_PROV BC
WHERE BC.PROVINCE    = 'BC'
  AND BC.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
MB.EFFDT
MB.WCB_LIMIT
  move &MB.WCB_LIMIT to #MB-Limit
FROM PS_CAN_TAX_PROV MB
WHERE MB.PROVINCE    = 'MB'
  AND MB.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NB.EFFDT
NB.WCB_LIMIT
  move &NB.WCB_LIMIT to #NB-Limit
FROM PS_CAN_TAX_PROV NB
WHERE NB.PROVINCE    = 'NB'
  AND NB.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NF.EFFDT
NF.WCB_LIMIT
  move &NF.WCB_LIMIT to #NF-Limit
FROM PS_CAN_TAX_PROV NF
WHERE NF.PROVINCE    = 'NF'
  AND NF.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NL.EFFDT
NL.WCB_LIMIT
  move &NL.WCB_LIMIT to #NL-Limit
FROM PS_CAN_TAX_PROV NL
WHERE NL.PROVINCE    = 'NL'
  AND NL.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NS.EFFDT
NS.WCB_LIMIT
  move &NS.WCB_LIMIT to #NS-Limit
FROM PS_CAN_TAX_PROV NS
WHERE NS.PROVINCE    = 'NS'
  AND NS.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NT.EFFDT
NT.WCB_LIMIT
  move &NT.WCB_LIMIT to #NT-Limit
FROM PS_CAN_TAX_PROV NT
WHERE NT.PROVINCE    = 'NT'
  AND NT.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NN.EFFDT
NN.WCB_LIMIT
  move &NN.WCB_LIMIT to #NN-Limit
FROM PS_CAN_TAX_PROV NN
WHERE NN.PROVINCE    = 'NN'
  AND NN.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
NU.EFFDT
NU.WCB_LIMIT
  move &NU.WCB_LIMIT to #NU-Limit
FROM PS_CAN_TAX_PROV NU
WHERE NU.PROVINCE    = 'NU'
  AND NU.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
ONT.EFFDT
ONT.WCB_LIMIT
  move &ONT.WCB_LIMIT to #ON-Limit
FROM PS_CAN_TAX_PROV ONT
WHERE ONT.PROVINCE    = 'ON'
  AND ONT.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
PE.EFFDT
PE.WCB_LIMIT
  move &PE.WCB_LIMIT to #PE-Limit
FROM PS_CAN_TAX_PROV PE
WHERE PE.PROVINCE    = 'PE'
  AND PE.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
QC.EFFDT
QC.WCB_LIMIT
  move &QC.WCB_LIMIT to #QC-Limit
FROM PS_CAN_TAX_PROV QC
WHERE QC.PROVINCE    = 'QC'
  AND QC.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
SK.EFFDT
SK.WCB_LIMIT
  move &SK.WCB_LIMIT to #SK-Limit
FROM PS_CAN_TAX_PROV SK
WHERE SK.PROVINCE    = 'SK'
  AND SK.EFFDT       = &AB.EFFDT
end-SELECT

begin-SELECT
YT.EFFDT
YT.WCB_LIMIT
  move &YT.WCB_LIMIT to #YT-Limit
FROM PS_CAN_TAX_PROV YT
WHERE YT.PROVINCE    = 'YT'
  AND YT.EFFDT       = &AB.EFFDT
end-SELECT
end-procedure


begin-procedure Get-Earnings

begin-SELECT

#ifndef DB2
SUM(ORE.OTH_EARNS)  &OthEarnings
#else
DECIMAL(SUM(ORE.OTH_EARNS), 15, 3) &OthEarnings
#end-if

  let #Temp-Earns = &OthEarnings
  add #Temp-Earns to #Ytd-Earns
  if  $Run_ID <> ''
      if $Cmp_RunID = $Run_ID
         add #Temp-Earns to #Cur-Earns
      end-if
  else
      if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
          add #Temp-Earns to #Cur-Earns
      end-if
  end-if

FROM  PS_PAY_OTH_EARNS ORE
WHERE ORE.COMPANY    = &A.COMPANY
  AND ORE.PAYGROUP   = &A.PAYGROUP
  AND ORE.PAY_END_DT = &A.PAY_END_DT
  AND ORE.OFF_CYCLE  = &A.OFF_CYCLE
  AND ORE.PAGE_NUM   = &A.PAGE_NUM
  AND ORE.LINE_NUM   = &A.LINE_NUM
  AND ORE.ADDL_NBR   = &A.ADDL_NBR
  AND    (ORE.ERNCD  = &A.ERNCD_REG_HRS
      OR  ORE.ERNCD  = &A.ERNCD_REG_EARNS
      OR  ORE.ERNCD  = &A.ERNCD_OT_HRS)
end-SELECT

  move 'W' to $TFBOX
  let $Prov = upper(substr(&B.PROVINCE,1,2))
  concat $Prov with $TFBOX

begin-SELECT

#ifndef DB2
SUM(OE.OTH_EARNS)  &Oth_Earnings
#else
DECIMAL(SUM(OE.OTH_EARNS), 15, 3) &Oth_Earnings
#end-if

  let #Temp-Earns = &Oth_Earnings
  add #Temp-Earns to #Ytd-Earns
  if  $Run_ID <> ''
      if $Cmp_RunID = $Run_ID
         add #Temp-Earns to #Cur-Earns
      end-if
  else
      if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
          add #Temp-Earns to #Cur-Earns
      end-if
  end-if

FROM  PS_PAY_OTH_EARNS OE,
      PS_TAXFORM_TBL   TT,
      PS_TAXFORM_ERN   TE
WHERE OE.COMPANY    = &A.COMPANY
  AND OE.PAYGROUP   = &A.PAYGROUP
  AND OE.PAY_END_DT = &A.PAY_END_DT
  AND OE.OFF_CYCLE  = &A.OFF_CYCLE
  AND OE.PAGE_NUM   = &A.PAGE_NUM
  AND OE.LINE_NUM   = &A.LINE_NUM
  AND OE.ADDL_NBR   = &A.ADDL_NBR
  AND TT.TAXFORM_ID = 'C'
  AND TT.EFFDT      =
        (SELECT MAX(EFFDT)
          FROM  PS_TAXFORM_TBL
         WHERE  TAXFORM_ID = TT.TAXFORM_ID
           AND  EFFDT     <= &L.CHECK_DT)
  AND TE.TAXFORM_ID = TT.TAXFORM_ID
  AND TE.EFFDT      = TT.EFFDT
  AND TE.BOX        = $TFBOX
  AND TE.ERNCD      = OE.ERNCD
  AND OE.ERNCD     <> &A.ERNCD_REG_HRS
  AND OE.ERNCD     <> &A.ERNCD_REG_EARNS
  AND OE.ERNCD     <> &A.ERNCD_OT_HRS
end-SELECT

end-procedure


begin-procedure Get-Deductions

  move 'W' to $TFBOX
  let $Prov = upper(substr(&B.PROVINCE,1,2))
  concat $Prov with $TFBOX

begin-SELECT

#ifndef DB2
SUM(PD.DED_CUR)  &Deductions
#else
DECIMAL(SUM(PD.DED_CUR), 15, 3) &Deductions
#end-if

  let #Temp-Earns = &Deductions
  add #Temp-Earns to #Ytd-Earns
  if  $Run_ID <> ''
      if $Cmp_RunID = $Run_ID
         add #Temp-Earns to #Cur-Earns
      end-if
  else
       if $FmtCheckDate >= $FmtFromDate and
            $FmtCheckDate <= $FmtThruDate
          add #Temp-Earns to #Cur-Earns
      end-if
  end-if

FROM  PS_PAY_DEDUCTION PD,
      PS_TAXFORM_TBL   TT1,
      PS_TAXFORM_DED   TD
WHERE PD.COMPANY    = &A.COMPANY
  AND PD.PAYGROUP   = &A.PAYGROUP
  AND PD.PAY_END_DT = &A.PAY_END_DT
  AND PD.OFF_CYCLE  = &A.OFF_CYCLE
  AND PD.PAGE_NUM   = &A.PAGE_NUM
  AND PD.LINE_NUM   = &A.LINE_NUM
  AND PD.SEPCHK     = &A.SEPCHK
  AND TT1.TAXFORM_ID = 'C'
  AND TT1.EFFDT      =
        (SELECT MAX(EFFDT)
          FROM  PS_TAXFORM_TBL
         WHERE  TAXFORM_ID = TT1.TAXFORM_ID
           AND  EFFDT     <= &L.CHECK_DT)
  AND TD.TAXFORM_ID      = TT1.TAXFORM_ID
  AND TD.EFFDT           = TT1.EFFDT
  AND TD.BOX             = $TFBOX
  AND TD.PLAN_TYPE       = PD.PLAN_TYPE
  AND TD.DEDCD           = PD.DEDCD
  AND TD.DED_CLASS       = PD.DED_CLASS
  AND TD.DED_SLSTX_CLASS = PD.DED_SLSTX_CLASS
end-SELECT

end-procedure


begin-procedure Evaluate-Officers

  let $Off-Province = rtrim(&B.PROVINCE, ' ')
  let $Officer      = rtrim(&C.OFFICER_CD, ' ')
  move 'N' to $Zero-Earnings

  EVALUATE $Off-Province
       WHEN = 'AB'
         if  (($Officer = 'C') or
              ($Officer = 'D'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'BC'
         move 'N' to $Zero-Earnings
         break

       WHEN = 'MB'
         if  (($Officer = 'C') or
              ($Officer = 'D'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'NB'
         move 'N' to $Zero-Earnings
         break

       WHEN = 'NF'
       WHEN = 'NL'
         move 'N' to $Zero-Earnings
         break

       WHEN = 'NS'
         move 'N' to $Zero-Earnings
         break

       WHEN = 'NT'
         if  (($Officer = 'C') or
              ($Officer = 'D') or
              ($Officer = 'O') or
              ($Officer = 'P') or
              ($Officer = 'S') or
              ($Officer = 'T') or
              ($Officer = 'V'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'NN'
         if  (($Officer = 'C') or
              ($Officer = 'D') or
              ($Officer = 'O') or
              ($Officer = 'P') or
              ($Officer = 'S') or
              ($Officer = 'T') or
              ($Officer = 'V'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'NU'
         if  (($Officer = 'C') or
              ($Officer = 'D') or
              ($Officer = 'O') or
              ($Officer = 'P') or
              ($Officer = 'S') or
              ($Officer = 'T') or
              ($Officer = 'V'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'ON'
         if  (($Officer = 'C') or
              ($Officer = 'D') or
              ($Officer = 'O') or
              ($Officer = 'P') or
              ($Officer = 'S') or
              ($Officer = 'T') or
              ($Officer = 'V'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'PE'
         if  (($Officer = 'C') or
              ($Officer = 'D') or
              ($Officer = 'O') or
              ($Officer = 'P') or
              ($Officer = 'S') or
              ($Officer = 'T') or
              ($Officer = 'V'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'QC'
         if  (($Officer = 'C') or
              ($Officer = 'D'))
           move 'Y' to $Zero-Earnings
         else
           move 'N' to $Zero-Earnings
         end-if
         break

       WHEN = 'SK'
         move 'N' to $Zero-Earnings
         break

       WHEN = 'YT'
         move 'N' to $Zero-Earnings
         break

       WHEN-OTHER
         move 'N' to $Zero-Earnings
         break
  END-EVALUATE

end-procedure


begin-procedure Print-Line
  do Get-CU-Name
  do Get-Empl-Counts
  if $Sgl-Rt-Firm = 'N'
    print $WCB_RG                                          (+1,1)
    print $WCB_CU                                          (0,6)
  else
    print $SR-RATE-GROUP                                   (+1,1)
    print $SR-CU                                           (0,7)
  end-if
  print $WCB_CU_Name                                       (0,16)
  do Format-Number(#Empl_Count, $out, '999,999')
  print $out                                               (0,59,07)
  let #Tot_Assessable = &Tot_Assessable
  let #Tot_Over_Earns = &Tot_Over_Earns
  move #Tot_Assessable to #Tot-Line
  add  #Tot_Over_Earns to #Tot-Line
  do Format-Number(#Tot-Line, $out, '999,999,999.99')
  print $out                                               (0,69,14)
  do Format-Number(#Tot_Assessable, $out, '999,999,999.99')
  print $out                                               (0,86,14)

  if #CU_Rate > 0
    do Format-Number(#CU_Rate, $out, '999.999')
    print $out                                             (0,105)
    move #Tot_Assessable     to #Assessment
    multiply #CU_Rate     times #Assessment round=2
    divide 100            into  #Assessment round=2
    let #Assessment = round(#Assessment,2)
    do Format-Number(#Assessment, $out, '999,999,999.99')
    print $out                                             (0,114,14)
  else
    let #Assessment = 0
  end-if

  let #Ytd_Assessable = &Ytd_Assessable
  do Format-Number(#Ytd_Assessable, $out, '999,999,999.99')
  print $out                                               (0,134,14)
  if &Ytd_Over_Earns > 0
    do Format-Number(#Empl_Over_Limit, $out, '99,999,999')
    print $out                                             (0,152,10)
    do Format-Number(&Ytd_Over_Earns, $out, '999,999,999.99')
    print $out                                             (0,163,14)
  end-if

  add #Empl_Over_Limit  to #Prov_Empl_Over_Limit
  add #Empl_Count       to #Prov_Empl_Count
  add &Tot_Assessable   to #Prov_Assess_For_Prov
  add #Assessment       to #Prov_Assessment
  add #Tot-Line         to #Prov_Total_Earnings
  add #Earnings         to #Prov_Earnings
  add #Ytd_Assessable   to #Prov_Ytd_Assessable
  add &Ytd_Over_Earns   to #Prov_Over_Limit
  move '*'              to $Prev_Empl
end-procedure


begin-procedure Print-Prov-Line
  print $Pay102cn_total                                    (+1,7)
  do Format-Number(#Prov_Empl_Count, $out, '999,999')
  print $out                                               (0,59,07)
  do Format-Number(#Prov_Total_Earnings, $out, '999,999,999.99')
  print $out                                               (0,69,14)
  do Format-Number(#Prov_Assess_For_Prov, $out, '999,999,999.99')
  print $out                                               (0,86,14)

  if #Prov_Assessment > 0
    do Format-Number(#Prov_Assessment, $out, '999,999,999.99')
    print $out                                             (0,114,14)
  end-if

  do Format-Number(#Prov_Ytd_Assessable, $out, '999,999,999.99')
  print $out                                               (0,134,14)

  if #Prov_Over_Limit > 0
    do Format-Number(#Prov_Empl_Over_Limit, $out, '99,999,999')
    print $out                                             (0,152,10)
    do Format-Number(#Prov_Over_Limit, $out, '999,999,999.99')
    print $out                                             (0,163,14)
  end-if

  print ' '                                                (+1,1)
end-procedure


begin-procedure Company-Change
  do Print-Prov-Line
  do Init-Work-Fields
  do Init-Work-Fields
  do Init-Prov-Work-Fields
  new-page
  do Print-Line
end-procedure


begin-procedure Province-Change
  do Print-Prov-Line
  do Init-Work-Fields
  do Init-Prov-Work-Fields
  new-page
  do Print-Line
end-procedure


begin-procedure CU-Change
  do Print-Line
  do Init-Work-Fields
end-procedure


begin-procedure Init-Work-Fields
  move 0    to #Empl_Over_Limit
  move 0    to #Empl_Count
  move 0    to #Assess_For_Prov
  move 0    to #Total_Earnings
  move 0    to #Earnings
  move 0    to #Over_Limit
end-procedure


begin-procedure Init-Prov-Work-Fields
  move 0    to #Prov_Empl_Over_Limit
  move 0    to #Prov_Empl_Count
  move 0    to #Prov_Assess_For_Prov
  move 0    to #Prov_Assessment
  move 0    to #Prov_Total_Earnings
  move 0    to #Prov_Earnings
  move 0    to #Prov_Over_Limit
  move 0    to #Prov_Ytd_Assessable
end-procedure


begin-procedure Get-CU

  move ' ' to $RATE_GROUP
  move ' ' to $CU

begin-SELECT
J.CAN_WCB_CU
J.CAN_WCB_RATE_GROUP

  move &J.CAN_WCB_CU to $Temp
  if RTRIM($Temp, ' ') <> ''
     move $Temp to $CU
  end-if

  move &J.CAN_WCB_Rate_Group to $Temp
  if RTRIM($Temp, ' ') <> ''
     move $Temp to $Rate_Group
  end-if

FROM PS_CAN_JOBCODE_CU J
WHERE J.SETID   = &C.SETID_JOBCODE
  AND J.JOBCODE = &A.JOBCODE
  AND J.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM PS_JOBCODE_TBL
       WHERE SETID   =  J.SETID
         AND JOBCODE =  J.JOBCODE
         AND EFFDT   <= &L.CHECK_DT)
  AND J.PROVINCE = &B.PROVINCE
end-SELECT

end-procedure


begin-procedure Get-CU-Name

  move $Pay102cn_class_not_found to $WCB_CU_Name
  move 0 to #CU_Rate

begin-SELECT
CU.CAN_WCB_CU_NAME
CU.CAN_WCB_CU_RATE

  move &CU.CAN_WCB_CU_Name to $Temp
  if RTRIM($Temp, ' ') <> ''
     move $Temp to $WCB_CU_Name
  end-if

  move &CU.CAN_WCB_CU_Rate to #CU_Rate

FROM PS_CAN_WCB_PROV   PR,
     PS_CAN_WCB_CU     CU
WHERE PR.COMPANY  = $Company
  AND PR.PROVINCE = $Curr_Prov
  AND PR.EFFDT =
      (SELECT MAX(PR1.EFFDT)
       FROM PS_CAN_WCB_PROV PR1
       WHERE PR1.COMPANY  = PR.COMPANY
         AND PR1.PROVINCE = PR.PROVINCE
         AND PR1.EFFDT <= $AsOfDate)
  AND CU.COMPANY            = PR.COMPANY
  AND CU.PROVINCE           = PR.PROVINCE
  AND CU.EFFDT              = PR.EFFDT
  AND CU.CAN_WCB_RATE_GROUP = $WCB_RG
  AND CU.CAN_WCB_CU         = $WCB_CU
end-SELECT

  move 'N' to $Sgl-Rt-Firm
  if ((RTRIM($WCB_RG, ' ') = '') or
      (RTRIM($WCB_CU, ' ') = ''))
     do Check-Single-Rate-Firm
  end-if

end-procedure


begin-procedure Check-Single-Rate-Firm

begin-SELECT
SRRG.CAN_WCB_RATE_GROUP
SRCU.CAN_WCB_CU
SRCU.CAN_WCB_CU_NAME
SRCU.CAN_WCB_CU_RATE

  move 'Y' to $Sgl-Rt-Firm

  let $SR-RATE-GROUP = RTRIM(&SRRG.CAN_WCB_RATE_GROUP, ' ')
  let $SR-CU         = RTRIM(&SRCU.CAN_WCB_CU, ' ')

  move &SRCU.CAN_WCB_CU_NAME to $Temp

  if RTRIM($Temp, ' ') <> ''
     move $Temp to $WCB_CU_Name
  end-if

  move &SRCU.CAN_WCB_CU_Rate to #CU_Rate

FROM PS_CAN_WCB_PROV   SRPR,
     PS_CAN_WCB_RT_GRP SRRG,
     PS_CAN_WCB_CU     SRCU
WHERE SRPR.COMPANY  = $Company
  AND SRPR.PROVINCE = $Curr_Prov
  AND SRPR.EFFDT =
      (SELECT MAX(SRPR1.EFFDT)
       FROM PS_CAN_WCB_PROV SRPR1
       WHERE SRPR1.COMPANY  = SRPR.COMPANY
         AND SRPR1.PROVINCE = SRPR.PROVINCE
         AND SRPR1.EFFDT <= $AsOfDate)
  AND SRPR.SINGLE_CLASS_FIRM  = 'Y'
  AND SRRG.COMPANY            = SRPR.COMPANY
  AND SRRG.PROVINCE           = SRPR.PROVINCE
  AND SRRG.EFFDT              = SRPR.EFFDT
  AND SRCU.COMPANY            = SRPR.COMPANY
  AND SRCU.PROVINCE           = SRPR.PROVINCE
  AND SRCU.EFFDT              = SRPR.EFFDT
  AND SRCU.CAN_WCB_RATE_GROUP = SRRG.CAN_WCB_RATE_GROUP
end-SELECT

end-procedure


begin-procedure Get-Empl-Counts

begin-SELECT
COUNT(*)           &Empl_Count

  move &Empl_Count to #Empl_Count

FROM PS_R_PAY102CN
WHERE COMPANY            =  $Company
  AND PROVINCE           =  $Curr_Prov
  AND CAN_WCB_RATE_GROUP =  $WCB_RG
  AND CAN_WCB_CU         =  $WCB_CU
  AND (WCB_ASSESSABLE > 0 OR
       WCB_OVER_EARNS > 0)
end-SELECT

begin-SELECT
COUNT(*)           &Empl_Over_Limit

  move &Empl_Over_Limit to #Empl_Over_Limit

FROM PS_R_PAY102CN
WHERE COMPANY            =  $Company
  AND PROVINCE           =  $Curr_Prov
  AND CAN_WCB_RATE_GROUP =  $WCB_RG
  AND CAN_WCB_CU         =  $WCB_CU
  AND WCB_YTD_OVER_EARNS >  0
  AND (WCB_ASSESSABLE > 0 OR
       WCB_OVER_EARNS > 0)
end-SELECT

end-procedure

begin-procedure Get-Prov-Limit
  let $Cut-Prov = substr($Prev_Province,1,2)

  EVALUATE $Cut-Prov
       WHEN = 'AB'
          move #AB-Limit to #Prov-Limit
         break

       WHEN = 'BC'
          move #BC-Limit to #Prov-Limit
         break

       WHEN = 'MB'
          move #MB-Limit to #Prov-Limit
         break

       WHEN = 'NB'
          move #NB-Limit to #Prov-Limit
         break

       WHEN = 'NF'
          move #NF-Limit to #Prov-Limit
         break

       WHEN = 'NL'
          move #NL-Limit to #Prov-Limit
         break

       WHEN = 'NS'
          move #NS-Limit to #Prov-Limit
         break

       WHEN = 'NT'
          move #NT-Limit to #Prov-Limit
         break

       WHEN = 'NN'
          move #NN-Limit to #Prov-Limit
         break

       WHEN = 'NU'
          move #NU-Limit to #Prov-Limit
         break

       WHEN = 'ON'
          move #ON-Limit to #Prov-Limit
         break

       WHEN = 'PE'
          move #PE-Limit to #Prov-Limit
         break

       WHEN = 'QC'
          move #QC-Limit to #Prov-Limit
         break

       WHEN = 'SK'
          move #SK-Limit to #Prov-Limit
         break

       WHEN = 'YT'
          move #YT-Limit to #Prov-Limit
         break

       WHEN-OTHER
          move 0.00      to #Prov-Limit
         break
  END-EVALUATE

end-procedure


begin-procedure Insert-Work-Row
  let $Cut-Prov = substr($Prev-Province,1,2)

  EVALUATE $Cut-Prov
       WHEN = 'AB'
          if #Emp-Tot-Earns + #Ytd-Earns > #AB-Limit
            if  #Emp-Tot-Earns > #AB-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #AB-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #AB-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #AB-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
         end-if
         break

       WHEN = 'BC'
          if #Emp-Tot-Earns + #Ytd-Earns > #BC-Limit
            if  #Emp-Tot-Earns > #BC-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #BC-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #BC-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #BC-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'MB'
          if #Emp-Tot-Earns + #Ytd-Earns > #MB-Limit
            if  #Emp-Tot-Earns > #MB-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #MB-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #MB-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #MB-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NB'
         if #Emp-Tot-Earns + #Ytd-Earns > #NB-Limit
            if  #Emp-Tot-Earns > #NB-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NB-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NB-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NB-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NF'
          if #Emp-Tot-Earns + #Ytd-Earns > #NF-Limit
            if  #Emp-Tot-Earns > #NF-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NF-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NF-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NF-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NL'
          if #Emp-Tot-Earns + #Ytd-Earns > #NL-Limit
            if  #Emp-Tot-Earns > #NL-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NL-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NL-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NL-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NS'
          if #Emp-Tot-Earns + #Ytd-Earns > #NS-Limit
            if  #Emp-Tot-Earns > #NS-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NS-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NS-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NS-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NT'
         if #Emp-Tot-Earns + #Ytd-Earns > #NT-Limit
            if  #Emp-Tot-Earns > #NT-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NT-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NT-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NT-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NN'
          if #Emp-Tot-Earns + #Ytd-Earns > #NN-Limit
            if  #Emp-Tot-Earns > #NN-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NN-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NN-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NN-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'NU'
          if #Emp-Tot-Earns + #Ytd-Earns > #NU-Limit
            if  #Emp-Tot-Earns > #NU-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #NU-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #NU-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #NU-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'ON'
          if #Emp-Tot-Earns + #Ytd-Earns > #ON-Limit
            if  #Emp-Tot-Earns > #ON-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #ON-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #ON-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #ON-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'PE'
         if #Emp-Tot-Earns + #Ytd-Earns > #PE-Limit
            if  #Emp-Tot-Earns > #PE-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #PE-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #PE-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #PE-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'QC'
         if #Emp-Tot-Earns + #Ytd-Earns > #QC-Limit
            if  #Emp-Tot-Earns > #QC-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #QC-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #QC-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #QC-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'SK'
        if #Emp-Tot-Earns + #Ytd-Earns > #SK-Limit
            if  #Emp-Tot-Earns > #SK-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #SK-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #SK-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #SK-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN = 'YT'
         if #Emp-Tot-Earns + #Ytd-Earns > #YT-Limit
            if  #Emp-Tot-Earns > #YT-Limit
              move 0          to #Cur-Assessable
              move #Cur-Earns to #Cur-Overage
              move #Ytd-Earns to #Ytd-Overage
            else
              let #Ytd-Overage = #Emp-Tot-Earns + #Ytd-Earns - #YT-Limit
              if  #Emp-Tot-Earns + #Ytd-Earns - #YT-Limit > #Cur-Earns
                  move 0                  to #Cur-Assessable
                  move #Cur-Earns         to #Cur-Overage
              else
                  move #Emp-Tot-Earns     to #Cur-Overage
                  add  #Ytd-Earns         to #Cur-Overage
                  subtract #YT-Limit    from #Cur-Overage
                  move #Cur-Earns         to #Cur-Assessable
                  subtract #Cur-Overage from #Cur-Assessable
              end-if
            end-if
          else
            move #Cur-Earns to #Cur-Assessable
            move 0          to #Cur-Overage
            move 0          to #Ytd-Overage
          end-if
         break

       WHEN-OTHER
         break

  END-EVALUATE

  let #Ytd-Tot-Earns = #Ytd-Earns

  if  ((#Cur-Assessable <> 0) or
       (#Cur-Overage    <> 0) or
       (#Ytd-Tot-Earns <> 0))
    move 'N' to $Work-Rec-Exists
    do Check-For-Existing-Rec

    if $Work-Rec-Exists = 'N'
      do Insert-New-Rec
    else
      do Update-Existing-Rec
    end-if
  end-if

end-procedure


begin-procedure Check-For-Existing-Rec

begin-SELECT
'X'
    move 'Y' to $Work-Rec-Exists
FROM PS_R_PAY102CN
WHERE COMPANY            = $Prev-Company
AND   PROVINCE           = $Prev-Province
AND   CAN_WCB_RATE_GROUP = $Prev-Rt-Grp
AND   CAN_WCB_CU         = $Prev-CU
AND   EMPLID             = $Prev-Emplid
end-SELECT

end-procedure


begin-procedure Insert-New-Rec

begin-SQL
INSERT INTO PS_R_PAY102CN (COMPANY,
                           PROVINCE,
                           CAN_WCB_RATE_GROUP,
                           CAN_WCB_CU,
                           EMPLID,
                           WCB_ASSESSABLE,
                           WCB_OVER_EARNS,
                           WCB_YTD_ASSESSABLE,
                           WCB_YTD_OVER_EARNS)
                   VALUES ($Prev-Company,
                           $Prev-Province,
                           $Prev-Rt-Grp,
                           $Prev-CU,
                           $Prev-Emplid,
                           #Cur-Assessable,
                           #Cur-Overage,
                           #Ytd-Tot-Earns,
                           #Ytd-Overage)
end-SQL

end-procedure


begin-procedure Update-Existing-Rec

begin-SQL
UPDATE PS_R_PAY102CN
SET WCB_ASSESSABLE = WCB_ASSESSABLE + #Cur-Assessable,
    WCB_OVER_EARNS = WCB_OVER_EARNS + #Cur-Overage,
    WCB_YTD_ASSESSABLE = WCB_YTD_ASSESSABLE + #Ytd-Tot-Earns,
    WCB_YTD_OVER_EARNS = WCB_YTD_OVER_EARNS + #Ytd-Overage
WHERE COMPANY            = $Prev-Company
AND   PROVINCE           = $Prev-Province
AND   CAN_WCB_RATE_GROUP = $Prev-Rt-Grp
AND   CAN_WCB_CU         = $Prev-CU
AND   EMPLID             = $Prev-EMplid
end-SQL

end-procedure



begin-procedure Delete-Work-Table

begin-SQL On-Error=Skip
DELETE FROM PS_R_PAY102CN;
end-SQL

end-procedure


begin-procedure Skip
!Dummy routine. Required for DB2.

end-procedure


begin-procedure Get-RunID-Check-Date

   display 'find cheque date'
   display $Run_ID

begin-SELECT

P.CHECK_DT

  display 'found check date'
  display $Run_ID

  move &P.CHECK_DT      to $FromDate
  move &P.CHECK_DT      to $ThruDate
  move &P.CHECK_DT      to $AsOfDate

FROM  PS_PAY_CALENDAR P
WHERE P.RUN_ID = $Run_ID

end-SELECT

  display 'cheque date'
  display $FromDate
  display $ThruDate
  display $AsOfDate

end-procedure


begin-procedure Build-Select

  move ' ' to $Select
  move 'N' to $Prov-Found
  move 'Y' to $First-Prov

begin-select
LP.PROVINCE

  move 'Y' to $Prov-Found
  if $First-Prov = 'Y'
     move 'N' to $First-Prov
     move 'AND (' to $Select
  else
     concat ' OR '     with $Select
  end-if
  concat 'PROVINCE = ''' with $Select
  concat &LP.Province    with $Select
  concat ''' '         with $Select

FROM PS_CAN_WCBRPT_PROV LP
WHERE LP.OPRID = $Prcs_OprID
  AND LP.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND LP.PROVINCE <> ' '

end-select

  if $Prov-Found = 'Y'
     concat ')' with $Select
  end-if


end-procedure


begin-procedure Get-Report-Parameters

begin-select

RC_PAY102CN.RUN_ID
RC_PAY102CN.FROMDATE
RC_PAY102CN.THRUDATE
RC_PAY102CN.WCB_PROV_OPT

  let  $Run_ID        = RTRIM(&RC_PAY102CN.Run_ID, ' ')
  let  $FromDate      = &RC_PAY102CN.FromDate
  let  $ThruDate      = &RC_PAY102CN.ThruDate
  let  $AsOfDate      = &RC_PAY102CN.ThruDate
  let  $Prov_Opt      = &RC_PAY102CN.Wcb_Prov_Opt

FROM  PS_RC_PAY102CN RC_PAY102CN
WHERE RC_PAY102CN.OPRID          = $Prcs_OprID
AND   RC_PAY102CN.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

end-procedure


begin-procedure Get-State-Tax-Data

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if

begin-SELECT
PS_STATE_NAMES_TBL.DESCR,PS_STATE_NAMES_TBL.NUMERIC_CD
FROM  PS_STATE_NAMES_TBL
WHERE COUNTRY = {NID_COUNTRY}
  AND STATE   = $State
end-SELECT

  let $StateName = RTRIM(&PS_State_Names_Tbl.Descr, ' ')
  move &PS_State_Names_Tbl.Numeric_Cd to $StateNumber

!---------------------------------------------------------------!
! Only retrieve data from the related language table if         !
! the operator language is not the same to the installation     !
! language or $curr_language_cd  is different from $language_cd !
!---------------------------------------------------------------!

  if $curr_language_cd <> $Psoptions_Language_Cd
     do Get-Rel-Lang-State
  end-if

end-procedure


begin-procedure Get-Rel-Lang-State

begin-SELECT
STL.DESCR

    if rtrim(&STL.Descr, ' ') <> ''
       let $StateName = RTRIM(&STL.Descr, ' ')
    end-if

FROM  PS_STATE_NAMES_LNG STL
WHERE STL.COUNTRY     = {NID_COUNTRY}
  AND STL.LANGUAGE_CD = $Curr_language_cd
  AND STL.STATE       = $State

end-SELECT

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getftdts.sqc'  !Get-From-Thru-Dates procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
! #Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
