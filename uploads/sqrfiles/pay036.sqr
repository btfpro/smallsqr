!****************************************************
!  PAY036.SQR: PAYSHEET RECORDS AUDIT PRIOR TO CONFIRM *
!****************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!
!                                                                      *
!          $Date:  2006/07/20:04:35:38                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set Database Environment


begin-report
  do Stdapi-Init
  do Get-Calendar-Year-Id
  move 'PAY036' to $ReportID

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay036_ReportTitle to $ReportTitle

  display $ReportTitle
  display ''
  do Init-DateTime
  do Get-Current-DateTime
  display 'Report Began: ' noline
  display $AsOfNow
  display ''
  move 'N' to $AnyErrors
  do Get-Run-ID

  if $AnyErrors = 'N'
    print $Pay036_NoErr   (+2,1)
  end-if
  display ''
  display 'Report Ended: ' noline
  display $AsOfNow
  display 'Error Records: ' noline
  display #TotRecords 999,999
  do Stdapi-Term
end-report


#include 'setup31.sqc'   !Printer and page-size initialization

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY036 program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY036', 'REPORT_TITLE', $Pay036_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY036', 'CALYR',        $Pay036_CalYr,       #dummy_width)
   do Get_Field_Information ('PAY036', 'MTHCD',        $Pay036_MthCd,       #dummy_width)
   do Get_Field_Information ('PAY036', 'COMP',         $Pay036_Comp,        #dummy_width)
   do Get_Field_Information ('PAY036', 'PAYGRP',       $Pay036_PayGrp,      #dummy_width)
   do Get_Field_Information ('PAY036', 'PAYENDDT',     $Pay036_PayEndDt,    #dummy_width)
   do Get_Field_Information ('PAY036', 'OFFCYCLE',     $Pay036_OffCycle,    #dummy_width)
   do Get_Field_Information ('PAY036', 'PAGE',         $Pay036_Page,        #dummy_width)
   do Get_Field_Information ('PAY036', 'LINE',         $Pay036_Line,        #dummy_width)
   do Get_Field_Information ('PAY036', 'EMPID',        $Pay036_EmpId,       #dummy_width)
   do Get_Field_Information ('PAY036', 'OKTOPAY',      $Pay036_OkToPay,     #dummy_width)
   do Get_Field_Information ('PAY036', 'MSG',          $Pay036_Msg,         #dummy_width)
   do Get_Field_Information ('PAY036', 'NOERR',        $Pay036_NoErr,       #dummy_width)
   do Get_Field_Information ('PAY036', 'TOT_ERR',      $Pay036_Tot_Err,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG1',      $Pay036_ErrMsg1,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG2',      $Pay036_ErrMsg2,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG3',      $Pay036_ErrMsg3,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG4',      $Pay036_ErrMsg4,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG5',      $Pay036_ErrMsg5,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG6',      $Pay036_ErrMsg6,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG7',      $Pay036_ErrMsg7,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG8',      $Pay036_ErrMsg8,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG9',      $Pay036_ErrMsg9,     #dummy_width)
   do Get_Field_Information ('PAY036', 'ERRMSG10',     $Pay036_ErrMsg10,    #dummy_width)
end-procedure

begin-heading 9

  #include 'stdhdgtr.sqc'
  print $Company                (+1,1)
  print $PayGroup               (0,10)
  do Format-DateTime($PayEndDT, $out, {DEFMDY}, '', '')
  print $out                    (0,19) ! Changed from 20 to 19 to match with hdg
  print &C.Run_Id               (0,32)
  print $Pay036_CalYr           (+2,1)
  print $Pay036_MthCd           (0,10)
  print $Pay036_Comp            (+1,1)
  print $Pay036_PayGrp          (0,10)
  print $Pay036_PayEndDt        (0,19) ! Changed from 20 to 19 to acc Fr
  print $Pay036_OffCycle        (0,33) ! Changed from 32 to 33 to acc Fr
  print $Pay036_Page            (0,44) ! Changed from 43 to 44 to acc Fr
  print $Pay036_Line            (0,50)
  print $Pay036_EmpId           (0,57)
  print $Pay036_OkToPay         (0,70)
  print $Pay036_Msg             (0,81)
end-heading


begin-procedure Get-Run-ID
  if $Prcs_Process_Instance = ''
    do Process-Run-ID
    do Edit-Calendar
  else
    do Select-Parameters
    move $RC_PAY.RUN_ID      to  $RunID
    do Edit-Run-ID
     if #Found = 1
        do Edit-Calendar
      else
        display 'Error --  Run ID not valid for any Pay Calendar.'
        move '' to $RunID
     end-if
  end-if
end-procedure

begin-procedure Process-Run-ID
  move 0 to #Found
  while #Found = 0
    input $RunID 'Enter Pay Run ID'
    uppercase $RunID
    if $RunID = ''
      stop
    else
      do Edit-Run-ID
      if #Found = 1
        break
      else
        display 'Error --  Run ID not valid for any Pay Calendar.'
        move '' to $RunID
      end-if
    end-if
  end-while
end-procedure

begin-procedure Edit-Run-ID
begin-SELECT
'X'
  move 1 to #Found
FROM  PS_PAY_CALENDAR
WHERE RUN_ID = $RunID
end-SELECT
end-procedure


begin-procedure Edit-Calendar
move 0  to  #Found
begin-SELECT
C.COMPANY, C.PAYGROUP, C.PAY_END_DT, C.RUN_ID
C.CHECK_DT


  do Format-DateTime( &C.CHECK_DT, $dtout, {DEFCMP}, '', '' )
  do Get-DateComponents( $dtout, #yearout, #monthout, #dayout )


  move #monthout to $Month 09
  move #monthout to #Month
  move #yearout to #CalYear
  Let $Company = &C.Company
  Let $Paygroup = &C.Paygroup
  Let $PayEndDt = &C.Pay_End_Dt
  move 1 to #Found
  display 'Company Being Processed: ' noline
  display $Company
  display 'Paygroup Being Processed: ' noline
  display $Paygroup
  display 'Pay End Date: ' noline
  display $PayEndDt
  do Get-Paygrp-Country
  do Compare-Prev-Bals         ! duplicate key error
  do Ck-Unconf-Runs            ! Error 64
  do Ck-Unconf-OffCycle        ! error 66

  Let $Company = &C.Company
  Let $Paygroup = &C.Paygroup
  Let $PayEndDt = &C.Pay_End_Dt

  do Check-For-Active-Job      ! Error 382
  print $Pay036_Tot_Err    (+2,20)
  print #Records           (0,67)  edit 999,999
  display #Records 999,999
  new-page
  add #Records to #TotRecords
  move 0 to #Records


 FROM  PS_PAY_CALENDAR C
WHERE C.RUN_ID         = $RunID
  end-SELECT
end-procedure


begin-procedure Get-Paygrp-Country
begin-SELECT
CO.COUNTRY
FROM  PS_PAYGROUP_TBL CO
WHERE CO.COMPANY      = $Company
  AND CO.PAYGROUP     = $PayGroup
  AND CO.EFFDT        =
     (SELECT MAX(EFFDT)
     FROM  PS_PAYGROUP_TBL
     WHERE COMPANY    = CO.COMPANY
       AND PAYGROUP   = CO.PAYGROUP
       AND EFFDT     <= $PayEndDt)
end-SELECT
end-procedure



!******************************************************
! Checks for duplicate key error which is caused because
! balance records exist that have a date greater than
! the date being processed.
!******************************************************
begin-procedure Compare-Prev-Bals
begin-SELECT
P.EMPLID, P.COMPANY
  if &CO.COUNTRY = 'CAN'
    do Ck-Can-Earnings-Bal
    do Ck-Can-Tax-Bal
    do Ck-Can-Ded-Bal
  else
    do Ck-Earnings-Bal
    do Ck-Tax-Bal
    do Ck-Ded-Bal
  end-if
FROM PS_PAY_EARNINGS P
WHERE P.COMPANY    = $Company
  AND P.PAYGROUP   = $Paygroup
  AND P.PAY_END_DT = $PayEndDt
GROUP BY P.EMPLID, P.COMPANY
ORDER BY P.EMPLID ASC, P.COMPANY ASC
end-SELECT
end-procedure


begin-procedure Ck-Earnings-Bal
  move $Pay036_ErrMsg1 to $Message
begin-SELECT loops=1
E.BALANCE_YEAR        (+1,1)
E.BALANCE_PERIOD      (0,10)
  print &P.Emplid     (0,57)
  print $Message      (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_EARNINGS_BAL E
WHERE E.EMPLID          = &P.Emplid
  AND E.COMPANY         = &P.Company
  AND E.BALANCE_ID      = $Calendar_Year_Id
  AND ((E.BALANCE_YEAR = #CalYear AND E.BALANCE_PERIOD > #Month)
       OR
       (E.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure


begin-procedure Ck-Tax-Bal
  move $Pay036_ErrMsg2 to $Message
begin-SELECT loops=1
T.BALANCE_YEAR     (+1,1)
T.BALANCE_PERIOD   (0,10)
  print &P.Emplid  (0,57)
  print $Message   (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_TAX_BALANCE T
WHERE T.EMPLID          = &P.Emplid
  AND T.COMPANY         = &P.Company
  AND T.BALANCE_ID      = $Calendar_Year_Id
  AND ((T.BALANCE_YEAR = #CalYear AND T.BALANCE_PERIOD > #Month)
       OR
       (T.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure


begin-procedure Ck-Ded-Bal
  move $Pay036_ErrMsg3 to $Message
begin-SELECT loops=1
D.BALANCE_YEAR       (+1,1)
D.BALANCE_PERIOD     (0,10)
  print &P.Emplid    (0,57)
  print $Message     (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_DEDUCTION_BAL D
WHERE D.EMPLID          = &P.Emplid
  AND D.COMPANY         = &P.Company
  AND D.BALANCE_ID      = $Calendar_Year_Id
  AND ((D.BALANCE_YEAR = #CalYear AND D.BALANCE_PERIOD > #Month)
       OR
       (D.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure


begin-procedure Ck-Can-Earnings-Bal
  move $Pay036_ErrMsg4 to $Message
begin-SELECT loops=1
CE.BALANCE_YEAR        (+1,1)
CE.BALANCE_PERIOD      (0,10)
  print &P.Emplid      (0,57)
  print $Message       (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_CAN_ERN_BALANCE CE
WHERE CE.EMPLID          = &P.Emplid
  AND CE.COMPANY         = &P.Company
  AND CE.BALANCE_ID      = $Calendar_Year_Id
  AND ((CE.BALANCE_YEAR = #CalYear AND CE.BALANCE_PERIOD > #Month)
       OR
       (CE.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure



begin-procedure Ck-Can-Tax-Bal
  move $Pay036_ErrMsg5 to $Message
begin-SELECT loops=1
CT.BALANCE_YEAR     (+1,1)
CT.BALANCE_PERIOD   (0,10)
  print &P.Emplid   (0,57)
  print $Message    (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_CAN_TAX_BALANCE CT
WHERE CT.EMPLID          = &P.Emplid
  AND CT.COMPANY         = &P.Company
  AND CT.BALANCE_ID      = $Calendar_Year_Id
  AND ((CT.BALANCE_YEAR = #CalYear AND CT.BALANCE_PERIOD > #Month)
       OR
       (CT.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure


begin-procedure Ck-Can-Ded-Bal
  move $Pay036_ErrMsg6 to $Message
begin-SELECT loops=1
CD.BALANCE_YEAR       (+1,1)
CD.BALANCE_PERIOD     (0,10)
  print &P.Emplid     (0,57)
  print $Message      (0,81)
  move 'Y' to $AnyErrors
  add 1 to #Records
FROM PS_CAN_DED_BALANCE CD
WHERE CD.EMPLID          = &P.Emplid
  AND CD.COMPANY         = &P.Company
   AND CD.BALANCE_ID      = $Calendar_Year_Id
  AND ((CD.BALANCE_YEAR = #CalYear AND CD.BALANCE_PERIOD > #Month)
       OR
       (CD.BALANCE_YEAR > #CalYear))
end-SELECT
end-procedure



!*********************************************************
!Error 000064 - Looks for run ids with unconfirmed checks.
! Both off-Cycle or on-cycle
!*********************************************************
begin-procedure Ck-Unconf-Runs
  display 'Prior Unconfirmed Runs . . . ' noline
  move $Pay036_ErrMsg7 to $Message
  move 'N' to $OffCycle
begin-SELECT
C2.COMPANY, C2.PAYGROUP, C2.PAY_END_DT, C2.PAY_OFF_CYCLE
  move &C2.PAY_END_DT to $SPayEndDt
  if &C2.PAY_OFF_CYCLE = 'Y'
    move 'Y '            to $OffCycle
  else
    move 'N'             to $OffCycle
  end-if
  move 0              to #PAGE_NUM
  move 0              to #LINE_NUM
  move ''             to $Emplid
  move ''             to $OK_To_Pay
  move 'Y' to $AnyErrors
  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR C2               ! this won't catch previous
WHERE C2.COMPANY          = $Company   ! calendars if they have
  AND C2.PAYGROUP         = $PayGroup  ! the same run id being run
  AND C2.PAY_END_DT      <= $PayEndDt
  AND C2.RUN_ID          <> &C.Run_ID
  AND C2.RUN_ID          <> ' '
  AND (C2.PAY_CONFIRM_RUN = 'N' OR C2.PAY_OFF_CYCLE = 'Y')
end-SELECT                             ! pay_off_cycle flag turns
  display 'Done'                       ! off when off-cycle confirmed
end-procedure


!*****************************************************
!Error 000066 - Looks for Unconfirmed off-cycle pages
!*****************************************************
begin-procedure Ck-Unconf-OffCycle
  display 'Unconfirmed Off-Cycle Pages . . . ' noline
  move $Pay036_ErrMsg8 to $Message
begin-SELECT
P1.COMPANY, P1.PAYGROUP, P1.OFF_CYCLE, P1.PAY_END_DT,
P1.PAGE_NUM
  move &P1.Off_Cycle  to $OffCycle
  move &P1.Pay_End_Dt to $SPayEndDt
  move &P1.PAGE_NUM      to #PAGE_NUM
  move 0              to #LINE_NUM
  move ''             to $Emplid
  move ''             to $OK_To_Pay
  move 'Y'            to $AnyErrors
  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_PAGE P1
WHERE P1.COMPANY      = $Company
  AND P1.PAYGROUP     = $PayGroup
  AND P1.PAY_END_DT  <= $PayEndDt
  AND P1.OFF_CYCLE    = 'Y'
  AND P1.CONFIRMED    = 'N'
end-SELECT
  display 'Done'
end-procedure


!***********************************************************
!Error 000086 - Looks for Multiple off-cycle pages for an ee
!***********************************************************
begin-procedure Ck-Mult-OffCycle
  display 'Multiple Off-Cycle pages. . . ' noline
  move $Pay036_ErrMsg9 to $Message
  move ' ' to $LastEmplid
begin-SELECT
CH4.COMPANY, CH4.PAYGROUP, CH4.OFF_CYCLE, CH4.PAY_END_DT,  CH4.PAGE_NUM, CH4.LINE_NUM, CH4.EMPLID
  if &CH4.EMPLID = $LastEmplid
    move &CH4.Company      to $Company
    move &CH4.Paygroup     to $Paygroup
    move &CH4.Off_Cycle    to $OffCycle
    move &CH4.Pay_End_Dt   to $SPayEndDt !mm/dd/yy
    move &CH4.PAGE_NUM        to #PAGE_NUM
    move &CH4.LINE_NUM        to #LINE_NUM
    move &CH4.Emplid       to $Emplid
    move ''                to $OK_To_Pay
    do Print-Error-Message
    add 1 to #Records
  end-if
  move &CH4.Emplid to $LastEmplid
FROM  PS_PAY_CHECK CH4
WHERE CH4.PAY_END_DT         = $PayEndDt
  AND CH4.OFF_CYCLE          = 'Y'
  AND CH4.PAYCHECK_STATUS   <> 'F'
end-SELECT
  display 'Done'
end-procedure


!***********************************************************
!Error 000382 - No active Job for an Earnings End Date
!***********************************************************
begin-procedure Check-For-Active-Job
  display 'Checking For Active Job . . . ' noline
  move $Pay036_ErrMsg10 to $Message

  move ' '             to $Off_Cycle
  move 0               to #PAGE_NUM
  move 0               to #LINE_NUM
  move ' '             to $Emplid

begin-SELECT
B10.COMPANY,
B10.PAYGROUP,
B10.PAY_END_DT,
B10.OFF_CYCLE,
B10.PAGE_NUM,
B10.LINE_NUM,
B10.EMPLID,
B10.OK_TO_PAY

  if &B10.Off_Cycle    <> $Off_Cycle
  or &B10.PAGE_NUM     <> #PAGE_NUM
  or &B10.LINE_NUM     <> #LINE_NUM
  or &B10.Emplid       <> $Emplid

    move &B10.Pay_End_Dt to $SPayEndDT
    move &B10.Off_Cycle  to $Off_Cycle
    move &B10.PAGE_NUM   to #PAGE_NUM
    move &B10.LINE_NUM   to #LINE_NUM
    move &B10.Emplid     to $Emplid
    move &B10.OK_To_Pay  to $OK_To_Pay
    do Print-Error-Message
    move 'Y'             to $AnyErrors
    add 1 to #Records
  end-if

FROM  PS_PAY_CALENDAR A10,
      PS_PAY_EARNINGS B10
WHERE A10.RUN_ID       = $RunID
  AND A10.COMPANY      = $Company
  AND A10.PAYGROUP     = $Paygroup
  AND A10.PAY_END_DT   = $PayEndDt
  AND A10.COMPANY      = B10.COMPANY
  AND A10.PAYGROUP     = B10.PAYGROUP
  AND A10.PAY_END_DT   = B10.PAY_END_DT
  AND B10.OK_TO_PAY    = 'Y'
  AND B10.PAY_LINE_STATUS IN ('E','I','P','U')
  AND ((B10.REG_PAY <> 0)
      OR (B10.REG_PAY_HRS <> 0)
      OR (B10.OT_HRS <> 0))

  AND (EXISTS (SELECT 'X'
                 FROM  PS_JOB C10
                WHERE  C10.EMPLID      = B10.EMPLID
                  AND  C10.EMPL_RCD    = B10.EMPL_RCD
                  AND  C10.COMPANY     = B10.COMPANY
          AND ((C10.EFFDT =
               (SELECT MIN(EFFDT)
                  FROM PS_JOB
                 WHERE EMPLID          = C10.EMPLID
                   AND EMPL_RCD        = C10.EMPL_RCD
                   AND COMPANY         = C10.COMPANY
                   AND EMPL_STATUS IN('A','P','Q','U'))
               AND C10.EFFDT           > B10.EARNS_BEGIN_DT)

               OR  (C10.EFFDT =
                   (SELECT MAX(EFFDT)
                      FROM PS_JOB
                     WHERE EMPLID      = C10.EMPLID
                       AND EMPL_RCD    = C10.EMPL_RCD
                       AND COMPANY     = C10.COMPANY
                       AND EFFDT      <= B10.EARNS_END_DT)
                   AND C10.EMPL_STATUS NOT IN('A','P','Q','U')))

          AND C10.EFFSEQ=
                 (SELECT MAX(EFFSEQ)
                    FROM PS_JOB
                   WHERE EMPLID        = C10.EMPLID
                     AND EMPL_RCD      = C10.EMPL_RCD
                     AND EFFDT         = C10.EFFDT) )

       OR NOT EXISTS (SELECT 'X'
                        FROM PS_JOB
                       WHERE EMPLID    = B10.EMPLID
                         AND EMPL_RCD  = B10.EMPL_RCD
                         AND COMPANY   = B10.COMPANY) )

end-SELECT
  display 'Done'
end-procedure


begin-procedure Print-Error-Message
  print $Company                (+1,1)
  print $Paygroup               (0,10)
  do Format-DateTime($SPayEndDT, $out, {DEFMDY}, '', '')
  print $out            (0,19) ! Changed from 20 to 19 to match hdg.
  print $OffCycle       (0,36) ! Changed from 35 to 36 because hdg. was also shifted by 1 posn.
  print #PAGE_NUM          (0,44)  edit 99999 ! Changed from 43 to 44 because hdg. shifted by 1 posn.
  print #LINE_NUM          (0,50)  edit 99999
  print $Emplid                 (0,57)
  print $OK_To_Pay      (0,74)
  print $Message                (0,81)
end-procedure


#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'stdapi.sqc'    !Update Process API
#include 'payrctl2.sqc'  !Select Run Contrl Parameters
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
