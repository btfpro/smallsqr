! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSAE: Application Engine Audits
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************


!----------------------------------------------------------------------!
! Procedure: SYS-Application Engine Audits                             !
! Descr:     System for Application Engine  (Introduced in PT8)        !
!----------------------------------------------------------------------!
begin-procedure SYSAE-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Application Engine Audits'

    do SYSAE-01
    do SYSAE-02
    do SYSAE-03
    do SYSAE-04
    do SYSAE-05
    do SYSAE-06
    do SYSAE-07
    do SYSAE-08
    do SYSAE-09
    do SYSAE-10
    do SYSAE-11
#ifdef MICROSFT
! The next 2 reports must be included when converting this SQC to
! some other application (assumed to be AE). The reports were
! Added early in 8.2, but, they do not work on all Platforms
! because of Date vs. Char comparisons in the WHERE clauses.
    do SYSAE-12
    do SYSAE-13
#End-if
    do SYSAE-14
    do SYSAE-15
    do SYSAE-16
!    do SYSAE-17
!    do SYSAE-18
!    do SYSAE-19

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-01                                                  !
! Descr:     Find AE programs without any sections:                    !
!----------------------------------------------------------------------!
begin-procedure SYSAE-01

   let $AuditDescr = '(AE-01) AE programs without any sections: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
        let $Column2Name = 'Ownerid'
    let #Column1len = lengthp($Column1Name)
        let #Column2len = lengthp($Column2Name)


    do RetrieveColumnLength('PSAEAPPLDEFN','AE_APPLID',#Field1Len,$FieldType)
        do RetrieveColumnLength('PSAEAPPLDEFN','OBJECTOWNERID',#Field2Len,$FieldType)

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

        if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
        let #start2                      = ( #Column1len + 4 )
    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
        put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
A.AE_APPLID        &AE01_AE_APPLID
A.OBJECTOWNERID    &AE01_ObjectOwnerid

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE01_AE_APPLID        (+1, #Start1)
   print &AE01_ObjectOwnerid    (0,  #Start2)

FROM PSAEAPPLDEFN A
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSAESECTDEFN S
      WHERE S.AE_APPLID = A.AE_APPLID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-02                                                  !
! Descr:     Find AE sections without AE programs                      !
!----------------------------------------------------------------------!
begin-procedure SYSAE-02

   let $AuditDescr = '(AE-02) AE sections without AE programs: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Section'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PSAESECTDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDEFN','AE_SECTION',#Field2Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
S.AE_APPLID        &AE02_AE_APPLID
S.AE_SECTION       &AE02_AE_SECTION

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE02_AE_APPLID        (+1, #Start1)
   print &AE02_AE_SECTION       ( 0, #Start2)


FROM PSAESECTDEFN S
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSAEAPPLDEFN A
      WHERE A.AE_APPLID = S.AE_APPLID)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-03                                                  !
! Descr:     Find AE state records without AE programs                 !
!----------------------------------------------------------------------!
begin-procedure SYSAE-03

   let $AuditDescr = '(AE-03) AE state records without AE programs: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PSAEAPPLSTATE','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAEAPPLSTATE','AE_STATE_RECNAME',#Field2Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
P.AE_APPLID              &AE03_AE_APPLID
P.AE_STATE_RECNAME       &AE03_AE_STATE_RECNAME

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE03_AE_APPLID        (+1, #Start1)
   print &AE03_AE_STATE_RECNAME ( 0, #Start2)

FROM PSAEAPPLSTATE P
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSAEAPPLDEFN A
      WHERE A.AE_APPLID = P.AE_APPLID)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-04                                                  !
! Descr:     Find AE state records without record definitions          !
!----------------------------------------------------------------------!
begin-procedure SYSAE-04

   let $AuditDescr = '(AE-04) AE state records without record definitions: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PSAEAPPLSTATE','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAEAPPLSTATE','AE_STATE_RECNAME',#Field2Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
P.AE_APPLID              &AE04_AE_APPLID
P.AE_STATE_RECNAME       &AE04_AE_STATE_RECNAME

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE04_AE_APPLID        (+1, #Start1)
   print &AE04_AE_STATE_RECNAME ( 0, #Start2)

FROM PSAEAPPLSTATE P
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSRECDEFN  R
      WHERE R.RECNAME = P.AE_STATE_RECNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-05                                                  !
! Descr:     Find AE section details without base section definitions  !
!----------------------------------------------------------------------!
begin-procedure SYSAE-05

   let $AuditDescr = '(AE-05) AE section details without base section definitions: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Section'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)

    do RetrieveColumnLength('PSAESECTDTLDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDTLDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDTLDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDTLDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDTLDEFN','EFFDT',#Field5Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)

    let #numofhdr        = 5

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)


begin-SELECT on-Error=Rpt-SQL-Error
D.AE_APPLID              &AE05_AE_APPLID
D.AE_SECTION             &AE05_AE_SECTION
D.MARKET                 &AE05_MARKET
D.DBTYPE                 &AE05_DBTYPE
D.EFFDT                  &AE05_EFFDT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE05_AE_APPLID        (+1, #Start1)
   print &AE05_AE_SECTION       ( 0, #Start2)
   print &AE05_MARKET           ( 0, #Start3)
   print &AE05_DBTYPE           ( 0, #Start4)
   print &AE05_EFFDT            ( 0, #Start5) edit {PTRPTDATE}

FROM PSAESECTDTLDEFN D
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSAESECTDEFN S
      WHERE S.AE_APPLID = D.AE_APPLID
        AND S.AE_SECTION = D.AE_SECTION)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSAE-06                                                  !
! Descr:     Find AE base section definitions without section details  !
!----------------------------------------------------------------------!
begin-procedure SYSAE-06

   let $AuditDescr = '(AE-06) AE base section definitions without section details: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Section'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PSAESECTDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESECTDEFN','AE_SECTION',#Field2Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
S.AE_APPLID              &AE06_AE_APPLID
S.AE_SECTION             &AE06_AE_SECTION

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE06_AE_APPLID        (+1, #Start1)
   print &AE06_AE_SECTION       ( 0, #Start2)

FROM PSAESECTDEFN S
WHERE NOT EXISTS
    (SELECT 'X'
       FROM PSAESECTDTLDEFN D
      WHERE D.AE_APPLID = S.AE_APPLID
        AND D.AE_SECTION = S.AE_SECTION)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSAE-07                                                  !
! Descr:     Find AE steps without sections                            !
!----------------------------------------------------------------------!
begin-procedure SYSAE-07

   let $AuditDescr = '(AE-07) AE steps without sections: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Section'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)

    do RetrieveColumnLength('PSAESTEPDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','AE_STEP',#Field6Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)

    let #numofhdr        = 6

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)


begin-SELECT on-Error=Rpt-SQL-Error
T.AE_APPLID              &AE07_AE_APPLID
T.AE_SECTION             &AE07_AE_SECTION
T.MARKET                 &AE07_MARKET
T.DBTYPE                 &AE07_DBTYPE
T.EFFDT                  &AE07_EFFDT
T.AE_STEP                &AE07_AE_STEP

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE07_AE_APPLID        (+1, #Start1)
   print &AE07_AE_SECTION       ( 0, #Start2)
   print &AE07_MARKET           ( 0, #Start3)
   print &AE07_DBTYPE           ( 0, #Start4)
   print &AE07_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &AE07_AE_STEP          ( 0, #Start6)

FROM PSAESTEPDEFN T
WHERE NOT EXISTS
   (SELECT 'X'
      FROM PSAESECTDTLDEFN D
     WHERE D.AE_APPLID = T.AE_APPLID
       AND D.AE_SECTION = T.AE_SECTION
       AND D.MARKET = T.MARKET
       AND D.DBTYPE = T.DBTYPE
       AND D.EFFDT = T.EFFDT)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-08                                                  !
! Descr:     Find AE Call Section actions referring to non-existent sections
!----------------------------------------------------------------------!
begin-procedure SYSAE-08

   let $AuditDescr = '(AE-08) AE Call Section actions referring to non-existent sections: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)

    do RetrieveColumnLength('PSAESTEPDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPDEFN','AE_STEP',#Field6Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)

    let #numofhdr        = 6

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)


begin-SELECT on-Error=Rpt-SQL-Error
T.AE_APPLID              &AE08_AE_APPLID
T.AE_SECTION             &AE08_AE_SECTION
T.MARKET                 &AE08_MARKET
T.DBTYPE                 &AE08_DBTYPE
T.EFFDT                  &AE08_EFFDT
T.AE_STEP                &AE08_AE_STEP

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE08_AE_APPLID        (+1, #Start1)
   print &AE08_AE_SECTION       ( 0, #Start2)
   print &AE08_MARKET           ( 0, #Start3)
   print &AE08_DBTYPE           ( 0, #Start4)
   print &AE08_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &AE08_AE_STEP          ( 0, #Start6)

FROM PSAESTEPDEFN T
WHERE AE_DO_SECTION <> ' '
  AND AE_DYNAMIC_DO = 'N'
  AND (NOT EXISTS
       (SELECT 'X'
          FROM PSAESECTDEFN S
         WHERE S.AE_APPLID = T.AE_DO_APPL_ID
           AND S.AE_SECTION = T.AE_DO_SECTION
           AND T.AE_DO_APPL_ID <> ' ')
       AND NOT EXISTS
           (SELECT 'X'
              FROM PSAESECTDEFN S
             WHERE S.AE_APPLID = T.AE_APPLID
               AND S.AE_SECTION = T.AE_DO_SECTION
               AND T.AE_DO_APPL_ID = ' '))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-09                                                  !
! Descr:     Find AE Log Message actions without an AE step
!----------------------------------------------------------------------!
begin-procedure SYSAE-09

   let $AuditDescr = '(AE-09) AE Log Message actions without an AE step : '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)

    do RetrieveColumnLength('PSAESTEPMSGDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPMSGDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPMSGDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPMSGDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPMSGDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTEPMSGDEFN','AE_STEP',#Field6Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)

    let #numofhdr        = 6

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)


begin-SELECT on-Error=Rpt-SQL-Error
G.AE_APPLID              &AE09_AE_APPLID
G.AE_SECTION             &AE09_AE_SECTION
G.MARKET                 &AE09_MARKET
G.DBTYPE                 &AE09_DBTYPE
G.EFFDT                  &AE09_EFFDT
G.AE_STEP                &AE09_AE_STEP

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE09_AE_APPLID        (+1, #Start1)
   print &AE09_AE_SECTION       ( 0, #Start2)
   print &AE09_MARKET           ( 0, #Start3)
   print &AE09_DBTYPE           ( 0, #Start4)
   print &AE09_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &AE09_AE_STEP          ( 0, #Start6)

FROM PSAESTEPMSGDEFN G
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSAESTEPDEFN T
        WHERE T.AE_APPLID = G.AE_APPLID
          AND T.AE_SECTION = G.AE_SECTION
          AND T.MARKET = G.MARKET
          AND T.DBTYPE = G.DBTYPE
          AND T.EFFDT = G.EFFDT
          AND T.AE_STEP = G.AE_STEP)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-10                                                  !
! Descr:     Find AE actions without an AE step
!----------------------------------------------------------------------!
begin-procedure SYSAE-10

   let $AuditDescr = '(AE-10) AE actions without an AE step: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE State Recname'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)
    let $Column7Name = 'AE StmtType'
    let #Column7len = lengthp($Column7Name)

    do RetrieveColumnLength('PSAESTMTDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_STEP',#Field6Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_STMT_TYPE',#Field7Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if

    if #Field7len > #Column7len
        let #Column7len = #Field7len
    end-if

    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)
    let #Start7          = (#Column6len + 4 + #Start6)

    let #numofhdr        = 7

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)
    put $Column7Name #Start7 #Column7len into printarray(6)


begin-SELECT on-Error=Rpt-SQL-Error
M.AE_APPLID              &AE10_AE_APPLID
M.AE_SECTION             &AE10_AE_SECTION
M.MARKET                 &AE10_MARKET
M.DBTYPE                 &AE10_DBTYPE
M.EFFDT                  &AE10_EFFDT
M.AE_STEP                &AE10_AE_STEP
M.AE_STMT_TYPE           &AE10_AE_STMT_TYPE

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE10_AE_APPLID        (+1, #Start1)
   print &AE10_AE_SECTION       ( 0, #Start2)
   print &AE10_MARKET           ( 0, #Start3)
   print &AE10_DBTYPE           ( 0, #Start4)
   print &AE10_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &AE10_AE_STEP          ( 0, #Start6)
   print &AE10_AE_STMT_TYPE     ( 0, #Start7)

FROM PSAESTMTDEFN M
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSAESTEPDEFN T
        WHERE T.AE_APPLID = M.AE_APPLID
          AND T.AE_SECTION = M.AE_SECTION
          AND T.MARKET = M.MARKET
          AND T.DBTYPE = M.DBTYPE
          AND T.EFFDT = M.EFFDT
          AND T.AE_STEP = M.AE_STEP)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-11                                                  !
! Descr:     Find AE TempTables attached to invalid AE_APPLIDS.        !
!----------------------------------------------------------------------!
begin-procedure SYSAE-11

   let $AuditDescr = '(AE-11) AE TempTables Attached to Invalid Applids: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Temporary Table'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Program'
    let #Column2len = lengthp($Column2Name)

    do RetrieveColumnLength('PSAEAPPLTEMPTBL','RECNAME',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAEAPPLTEMPTBL','AE_APPLID',#Field2Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)


begin-SELECT on-Error=Rpt-SQL-Error
M.RECNAME                &AE11_RECNAME
M.AE_APPLID              &AE11_AE_APPLID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE11_RECNAME          (+1, #Start1)
   print &AE11_AE_APPLID        ( 0, #Start2)

FROM PSAEAPPLTEMPTBL M
WHERE NOT EXISTS
      (SELECT 'X'
         FROM PSAEAPPLDEFN T
        WHERE M.AE_APPLID = T.AE_APPLID)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-12                                                  !
! Descr:     Find Orphaned AE PeopleCode
!----------------------------------------------------------------------!
begin-procedure SYSAE-12

   let $AuditDescr = '(AE-12) Orphaned AE PeopleCode: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if


#ifdef MICROSFT
    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'AE Program'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'AE Section'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Market'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'DBType'
    let #Column4len = lengthp($Column4Name)
    let $Column5Name = 'EffDate'
    let #Column5len = lengthp($Column5Name)
    let $Column6Name = 'AE Step'
    let #Column6len = lengthp($Column6Name)

    do RetrieveColumnLength('PSAESTMTDEFN','AE_APPLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_SECTION',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','MARKET',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','DBTYPE',#Field4Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','EFFDT',#Field5Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','AE_STEP',#Field6Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if

    if #Field5len > #Column5len
        let #Column5len = #Field5len
    end-if

    if #Field6len > #Column6len
        let #Column6len = #Field6len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)
    let #Start5          = (#Column4len + 4 + #Start4)
    let #Start6          = (#Column5len + 4 + #Start5)

    let #numofhdr        = 6

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)
    put $Column5Name #Start5 #Column5len into printarray(4)
    put $Column6Name #Start6 #Column6len into printarray(5)


begin-SELECT on-Error=Rpt-SQL-Error
M.OBJECTVALUE1           &AE12_AE_APPLID
M.OBJECTVALUE2           &AE12_AE_SECTION
M.OBJECTVALUE3           &AE12_MARKET
M.OBJECTVALUE4           &AE12_DBTYPE
M.OBJECTVALUE5           &AE12_EFFDT
M.OBJECTVALUE6           &AE12_AE_STEP

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE12_AE_APPLID        (+1, #Start1)
   print &AE12_AE_SECTION       ( 0, #Start2)
   print &AE12_MARKET           ( 0, #Start3)
   print &AE12_DBTYPE           ( 0, #Start4)
   print &AE12_EFFDT            ( 0, #Start5) edit {PTRPTDATE}
   print &AE12_AE_STEP          ( 0, #Start6)

FROM PSPCMPROG M
WHERE
M.OBJECTID1 = '66' AND
M.OBJECTID2 = '77' AND
M.OBJECTID4 = '20' AND
M.OBJECTID5 = '21' AND
M.OBJECTID6 = '78' AND
NOT EXISTS
    (SELECT 'X'
       FROM PSAESTMTDEFN T
      WHERE M.OBJECTVALUE1   = T.AE_APPLID
        AND M.OBJECTVALUE2   = T.AE_SECTION
        AND M.OBJECTVALUE3   = T.MARKET
        AND ((M.OBJECTVALUE4 = T.DBTYPE) OR
              M.OBJECTVALUE4 = 'default' AND T.DBTYPE = ' ')
        AND M.OBJECTVALUE5   = T.EFFDT
        AND M.OBJECTVALUE6   = T.AE_STEP)
end-select

   do End-Section

#End-if

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSAE-13                                                  !
! Descr:     Find Orphaned AE SQL objects
!----------------------------------------------------------------------!
begin-procedure SYSAE-13

   let $AuditDescr = '(AE-13) Orphaned AE SQL Objects: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if


#ifdef MICROSFT
    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'SQLID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Market'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'DBType'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'EffDate'
    let #Column4len = lengthp($Column4Name)

    do RetrieveColumnLength('PSAESTMTDEFN','SQLID',#Field1Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','MARKET',#Field2Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','DBTYPE',#Field3Len,$FieldType)
    do RetrieveColumnLength('PSAESTMTDEFN','EFFDT',#Field4Len,$FieldType)


    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if

    if #Field2len > #Column2len
        let #Column2len = #Field2len
    end-if

    if #Field3len > #Column3len
        let #Column3len = #Field3len
    end-if

    if #Field4len > #Column4len
        let #Column4len = #Field4len
    end-if


    let #Start1          = 1
    let #Start2          = (#Column1len + 4)
    let #Start3          = (#Column2len + 4 + #Start2)
    let #Start4          = (#Column3len + 4 + #Start3)

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
A.SQLID                  &AE13_SQLID
A.MARKET                 &AE13_MARKET
A.DBTYPE                 &AE13_DBTYPE
A.EFFDT                  &AE13_EFFDT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &AE13_SQLID            (+1, #Start1)
   print &AE13_MARKET           ( 0, #Start2)
   print &AE13_DBTYPE           ( 0, #Start3)
   print &AE13_EFFDT            ( 0, #Start4) edit {PTRPTDATE}

FROM PSSQLTEXTDEFN A
WHERE A.SQLTYPE = '1' AND
NOT EXISTS
    (SELECT 'X'
       FROM PSAESTMTDEFN S
      WHERE A.SQLID = S.SQLID
        AND A.MARKET = S.MARKET
        AND (A.DBTYPE = S.DBTYPE
             OR (A.DBTYPE = ' '  AND
                 A.MARKET = 'GBL' AND
                 A.EFFDT = '1900-01-01' AND
                 1 < (SELECT COUNT(*)
                        FROM PSSQLTEXTDEFN X
                       WHERE X.SQLID = S.SQLID
        AND A.SQLTYPE = '1')))
        AND A.EFFDT = S.EFFDT)
end-select


   do End-Section

#end-if

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-14                                                  !
! Descr:     Verify enough rows loaded into PS_AEONLINEINST.           !
!----------------------------------------------------------------------!
begin-procedure SYSAE-14

   let $AuditDescr = '(AE-14) Audit contents of PS_AEONLINEINST: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let #Field1Len = 70

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if


    let #Start1          = 1

    let #numofhdr        = 1

    put $Column1Name #Start1 #Column1len into printarray(0)




begin-SELECT on-Error=Rpt-SQL-Error
COUNT(*)                                   &AE14_COUNT

    If &AE14_COUNT <> 100
      if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
        move 'Y' to $DetailErrFound
        do PrintSectionHeadings
      end-if
      let #rows = #rows +1
      let $AE14_Message1 =  'PS_AEONLINEINST contains only '
      let $AE14_Message2 =  'row(s). There should be 100 (0-99).'
      print $AE14_Message1        (+1, #Start1)
      print &AE14_COUNT           (0, 32)
      print $AE14_Message2        (0, 36)

    end-if

FROM PS_AEONLINEINST
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-15                                                  !
! Descr:     Verify enough rows loaded into PS_AEINSTANCENBR.          !
!----------------------------------------------------------------------!
begin-procedure SYSAE-15

   let $AuditDescr = '(AE-15) Audit contents of PS_AEINSTANCENBR: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let #Field1Len = 70

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if


    let #Start1          = 1

    let #numofhdr        = 1

    put $Column1Name #Start1 #Column1len into printarray(0)




begin-SELECT on-Error=Rpt-SQL-Error
COUNT(*)                                   &AE15_COUNT

    If &AE15_COUNT <> 99
      if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
        move 'Y' to $DetailErrFound
        do PrintSectionHeadings
      end-if
      let #rows = #rows +1
      let $AE15_Message1 =  'PS_AEINSTANCENBR contains only'
      let $AE15_Message2 =  'row(s). There should be 99 (1-99).'
      print $AE15_Message1        (+1, #Start1)
      print &AE15_COUNT           (0, 32)
      print $AE15_Message2        (0, 36)

    end-if

FROM PS_AEINSTANCENBR
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSAE-16                                                  !
! Descr:     Verify a row is loaded into PS_AELOCKMGR.                 !
!----------------------------------------------------------------------!
begin-procedure SYSAE-16

   let $AuditDescr = '(AE-16) Audit contents of PS_AELOCKMGR: '


#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let #Field1Len = 70

    if #Field1len > #Column1len
        let #Column1len = #Field1len
    end-if


    let #Start1          = 1

    let #numofhdr        = 1

    put $Column1Name #Start1 #Column1len into printarray(0)




begin-SELECT on-Error=Rpt-SQL-Error
COUNT(*)                                   &AE16_COUNT

    If &AE16_COUNT <> 1
      if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
        move 'Y' to $DetailErrFound
        do PrintSectionHeadings
      end-if
      let #rows = #rows +1
      let $AE16_Message1 =  'PS_AELOCKMGR contains '
      let $AE16_Message2 =  'row(s). There should be 1.'
      print $AE16_Message1        (+1, #Start1)
      print &AE16_COUNT           (0, 24)
      print $AE16_Message2        (0, 26)

    end-if

FROM PS_AELOCKMGR
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

