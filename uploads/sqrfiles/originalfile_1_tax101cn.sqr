!********************************
!  TAX101CN:  EI REBATE Report  *
!********************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2006/05/02:20:54:03                           
!             $Release:  HR9                                           
!            $Revision:  101                                           
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'TAX101CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Tax101cn_Title_Ei_rebate to $ReportTitle
  display $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Initialize
end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from TAX101CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('TAX101CN', 'TITLE_EI_REBATE' , $Tax101cn_Title_Ei_rebate , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'EMPLOYEE'        , $Tax101cn_Employee        , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'EMPLOYEE2'       , $Tax101cn_Employee2       , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'EMPLOYER'        , $Tax101cn_Employer        , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'ID'              , $Tax101cn_Id              , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'RATE'            , $Tax101cn_Rate            , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'PREMIUM'         , $Tax101cn_Premium         , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'REBATE'          , $Tax101cn_Rebate          , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'NO_DATA'         , $Tax101cn_No_data         , #dummy_width)
   do Get_Field_Information ('TAX101CN', 'COMP_TOTAL'      , $Tax101cn_Comp_total      , #dummy_width)


end-procedure

begin-heading 7
  #Include 'stdhtr11.sqc'
  print $Tax101cn_Employee   (+2,1,11)
  print $Tax101cn_Employee2  (0,+3,13)
  print $Tax101cn_Employee2  (0,+3,13)
  print $Tax101cn_Employer   (0,+3,12)
  print $Tax101cn_Employer   (0,+3,14)
  print $Tax101cn_Employee2  (0,+3,11)

  print $Tax101cn_Id         (+1,1,11)
  print $Tax101cn_Rate       (0,+3,13)
  print $Tax101cn_Premium    (0,+3,13)
  print $Tax101cn_Rate       (0,+3,12)
  print $Tax101cn_Premium    (0,+3,14)
  print $Tax101cn_Rebate     (0,+3,11)
end-heading

begin-procedure Initialize
  move 'N' to $Employees_Found

  if $Prcs_Process_Instance = ''
    input $Calendar_Year 'Enter Year, e.g. 1990'
  else
    do Select-Parameters
    move #RC_PAY.Balance_Year to $Calendar_Year  9999
  end-if

  move  $Calendar_Year to #Calendar_Year

  move $Calendar_Year to $FromDate
  concat '-01-01' with   $FromDate
  move '-' to $DDelimiter
  move '1' to $DDLZero
  move '0' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($FromDate, $FromDate, {DEFYMD}, '', 'NATIVE')

  move $Calendar_Year to $AsOfDate
  concat '-12-31' with   $AsOfDate
  move '-' to $DDelimiter
  move '1' to $DDLZero
  move '0' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFYMD}, '', 'NATIVE')

  do Get-Current-DateTime
  do Get-Can-Tax-Rates
end-procedure

begin-procedure Process-Main
begin-SELECT
A.COMPANY  () on-break print=never level=1 procedure=Company-Change
  move &A.Company to $Company
W.WAGE_LOSS_PLAN
W.UI_ER_RT

  move ' ' to $Prev_EMPLID
  do Get-UI-Data
FROM  PS_COMPANY_TBL A, PS_WAGELS_PLAN_TBL W
WHERE W.COMPANY     = A.COMPANY
  AND W.UI_ER_RT   <> &T.UI_STD_Er_Prem_Rt
  AND A.EFFDT = 
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = A.COMPANY
         AND ((EFFDT <= $FromDate) OR
              (EFFDT >= $FromDate AND EFFDT <= $AsOfDate)))
  AND W.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_WAGELS_PLAN_TBL
       WHERE  COMPANY           = W.COMPANY
         AND  WAGE_LOSS_PLAN    = W.WAGE_LOSS_PLAN
         AND  EFFDT            <= $FromDate)
ORDER BY A.COMPANY, W.WAGE_LOSS_PLAN
end-SELECT
  if $Employees_Found = 'N'
    print $Tax101cn_No_data             (+5,40)
  else
    do Company-Change
  end-if
end-procedure

begin-procedure Get-UI-Data
begin-SELECT
C.EMPLID

  move 'N' to $EI_Found
  move 0 to #UI_EE_Premium_YTD
  move 0 to #UI_ER_Premium_YTD
  move 0 to #Rebate

  move 'EIE' to $TaxType
  do Get-UI-YTD
  move 'EIR' to $TaxType
  do Get-UI-YTD

  let $Curr_EMPLID = rtrim(&C.EMPLID, ' ')

  if $EI_Found = 'Y' and
     $Curr_EMPLID <> $Prev_EMPLID
     move 'Y' to $Employees_Found
     do Print-Detail
  end-if

  let $Prev_EMPLID = rtrim(&C.EMPLID, ' ')


FROM  PS_CAN_TAX_DATA C,
      PS_EMPL_WAGELS_CAN D
WHERE C.COMPANY    = &A.Company
  AND C.UI_EXEMPT  = 'E'
  AND (C.EFFDT      =
    (SELECT MAX(EFFDT)
    FROM PS_CAN_TAX_DATA
    WHERE COMPANY    = C.COMPANY
      AND EMPLID     = C.EMPLID
      AND EFFDT     <= $FromDate)
  OR (C.EFFDT     >= $FromDate
  AND  C.EFFDT     <= $AsOfDate))
  AND D.EMPLID         = C.EMPLID
  AND D.COMPANY        = C.COMPANY
  AND D.EFFDT          = C.EFFDT
  AND D.WAGE_LOSS_PLAN = &W.WAGE_LOSS_PLAN
ORDER BY C.EMPLID
end-SELECT
end-procedure

begin-procedure Get-UI-YTD

begin-SELECT
B.TAX_YTD
B.TAX_CLASS_CAN

  move 'Y' to $EI_Found

  if &B.TAX_CLASS_CAN = 'EIE'
     add &B.TAX_YTD to #Rebate
     add &B.TAX_YTD to #UI_EE_Premium_YTD
  else
     add &B.TAX_YTD to #UI_ER_Premium_YTD
  end-if

FROM PS_CAN_TAX_BALANCE B
WHERE B.BALANCE_YEAR   = #Calendar_Year
  AND B.BALANCE_ID     = $Calendar_Year_Id
  AND B.EMPLID         = &C.EMPLID
  AND B.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_CAN_TAX_BALANCE
       WHERE  EMPLID         = B.EMPLID
         AND  COMPANY        = B.COMPANY
         AND  BALANCE_ID     = B.BALANCE_ID
         AND  BALANCE_YEAR   = B.BALANCE_YEAR
         AND  WAGE_LOSS_PLAN = B.WAGE_LOSS_PLAN
         AND  TAX_CLASS_CAN  = B.TAX_CLASS_CAN
         AND  PROVINCE       = B.PROVINCE)
  AND B.COMPANY         = &A.Company
  AND B.WAGE_LOSS_PLAN  = &W.Wage_Loss_Plan
  AND B.TAX_CLASS_CAN   = $TaxType
end-SELECT

end-procedure

begin-procedure Print-Detail

  multiply &T.UI_STD_Er_Prem_Rt  times   #Rebate
  subtract #UI_ER_Premium_YTD    from    #Rebate
  multiply .4167                 times   #Rebate    round=2

  add #UI_Ee_Premium_YTD to #Tot_Ee_Premium_YTD     round=2
  add #UI_Er_Premium_YTD to #Tot_Er_Premium_YTD     round=2
  add #Rebate            to #Tot_Rebate_YTD         round=2

  print &C.EmplID             (+1,1,11)
  do Format-Number(&T.UI_EE_Premium_Pct, $out, '999,999.99')
  print $out                  (0,+3,11)
  do Format-Number(#UI_EE_Premium_YTD, $out, '99,999,999.99')
  print $out                  (0,+3,14)
  do Format-Number(&W.UI_ER_Rt, $out, '999,999.999')
  print $out                  (0,+3,11)
  do Format-Number(#UI_ER_Premium_YTD, $out, '99,999,999.99')
  print $out                  (0,+3,14)
  do Format-Number(#Rebate, $out, '99,999,999.99')
  print $out                  (0,+3,14)
end-procedure

begin-procedure Company-Change
  print $Tax101cn_Comp_total          (+2,1)
  do Format-Number(#Tot_Ee_Premium_YTD, $out, '99,999,999.99')
  print $out      (0,+15)
  do Format-Number(#Tot_Er_Premium_YTD, $out, '99,999,999.99')
  print $out      (0,+18)
  do Format-Number(#Tot_Rebate_YTD,     $out, '99,999,999.99')
  print $out      (0,+4)

  move 0 to #Tot_Ee_Premium_YTD
  move 0 to #Tot_Er_Premium_YTD
  move 0 to #Tot_Rebate_YTD
  new-page
end-procedure

begin-procedure Get-Can-Tax-Rates
begin-SELECT
T.UI_EE_PREMIUM_PCT
T.UI_STD_ER_PREM_RT
FROM  PS_CAN_TAX_TBL T
WHERE T.EFFDT              =
      (SELECT MAX(EFFDT)
         FROM PS_CAN_TAX_TBL
         WHERE EFFDT     <= $FromDate)
end-SELECT
end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
