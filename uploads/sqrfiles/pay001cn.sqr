!*********************************************
!  PAY001CN:  Deductions Register - Canada   *
!*********************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/20:04:24:19                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY001CN' to $ReportID

  do Init-DateTime
  do Init-Number
  do Stdapi-Init

  do Get-Report-Language   ! Procedure to decide the report language
                           ! and call 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay001cn_ReportTitle to $ReportTitle

  do Get-Calendar-Year-Id
  do Array-Initialization
  do Payroll-Report-Initialization
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY001CN  and PAY1 program ids
   do Init_Report_Translation($ReportID,$Language_Cd)
   do Append_Report_Translation('PAY1')

   do Get_Field_Information ('PAY001CN', 'REPORT_TITLE', $Pay001cn_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DED_TOT',      $Pay001cn_Ded_Tot,     #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDPSTI_TOT',  $Pay001cn_DedPSTI_Tot, #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDPPT_TOT',   $Pay001cn_DedPPT_Tot,  #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDGST_TOT',   $Pay001cn_DedGST_Tot,  #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDPST_TOT',   $Pay001cn_DedPST_Tot,  #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDHST_TOT',   $Pay001cn_DedHST_Tot,  #dummy_width)
   do Get_Field_Information ('PAY001CN', 'DEDN',         $Pay001cn_Dedn,        #dummy_width)
   do Get_Field_Information ('PAY001CN', 'TYPE',         $Pay001cn_Type,        #dummy_width)
   do Get_Field_Information ('PAY001CN', 'CUR_AMT1',     $Pay001cn_Cur_Amt1,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'TAX_TYPE',     $Pay001cn_Tax_Type,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'REF_AMT1',     $Pay001cn_Ref_Amt1,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'AMT_ARR1',     $Pay001cn_Amt_Arr1,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'AMT_NTKN1',    $Pay001cn_Amt_NTkn1,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'RSN_NTKN1',    $Pay001cn_Rsn_NTkn1,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'MTH_TDT1',     $Pay001cn_Mth_TDt1,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'QTR_TDT1',     $Pay001cn_Qtr_TDt1,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'YR_TDT1',      $Pay001cn_Yr_TDt1,     #dummy_width)
   do Get_Field_Information ('PAY001CN', 'GOAL_AMT1',    $Pay001cn_Goal_Amt1,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'EMP_ID',       $Pay001cn_Emp_Id,      #dummy_width)
   do Get_Field_Information ('PAY001CN', 'NAME',         $Pay001cn_Name,        #dummy_width)
   do Get_Field_Information ('PAY001CN', 'CUR_AMT2',     $Pay001cn_Cur_Amt2,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'REF_AMT2',     $Pay001cn_Ref_Amt2,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'AMT_ARR2',     $Pay001cn_Amt_Arr2,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'AMT_NTKN2',    $Pay001cn_Amt_NTkn2,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'RSN_NTKN2',    $Pay001cn_Rsn_NTkn2,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'MTH_TDT2',     $Pay001cn_Mth_TDt2,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'QTR_TDT2',     $Pay001cn_Qtr_TDt2,    #dummy_width)
   do Get_Field_Information ('PAY001CN', 'YR_TDT2',      $Pay001cn_Yr_TDt2,     #dummy_width)
   do Get_Field_Information ('PAY001CN', 'GOAL_AMT2',    $Pay001cn_Goal_Amt2,   #dummy_width)
   do Get_Field_Information ('PAY001CN', 'OFFCYC_TXT',   $Pay001cn_OffCyc_Txt,  #dummy_width)
   do Get_Field_Information ('PAY001CN', 'END_RPT',      $Pay001cn_End_Rpt,     #dummy_width)
   do Get_Field_Information ('PAY001CN', 'PSTI',         $Pay001cn_PSTI,        #dummy_width)
   do Get_Field_Information ('PAY001CN', 'PPT',          $Pay001cn_PPT,         #dummy_width)
   do Get_Field_Information ('PAY001CN', 'GST',          $Pay001cn_GST,         #dummy_width)
   do Get_Field_Information ('PAY001CN', 'PST',          $Pay001cn_PST,         #dummy_width)
   do Get_Field_Information ('PAY001CN', 'HST',          $Pay001cn_HST,         #dummy_width)
   do Get_Field_Information ('PAY001CN', 'BENEFIT',      $Pay001cn_Benefit,     #dummy_width)
   do Get_Field_Information ('PAY001CN', 'RECORD',       $Pay001cn_Record,      #dummy_width)

   do Get_Field_Information ('PAY1',     'GR_TOT',       $Pay1_Gr_Tot,          #dummy_width)
   do Get_Field_Information ('PAY1',     'CMP_TOT',      $Pay1_Cmp_Tot,         #dummy_width)
   do Get_Field_Information ('PAY1',     'PAYPER_TOT',   $Pay1_PayPer_Tot,      #dummy_width)
   do Get_Field_Information ('PAY1',     'PAYGRP_TOT',   $Pay1_PayGrp_Tot,      #dummy_width)
end-procedure

begin-procedure Array-Initialization
  create-array name=Totals size=11 field=TotalName:char field=total:number:7

  put $Pay1_Gr_Tot          into Totals(1)  TotalName
  put $Pay1_Cmp_Tot         into Totals(2)  TotalName
  put $Pay1_PayPer_Tot      into Totals(3)  TotalName
  put $Pay1_PayGrp_Tot      into Totals(4)  TotalName
  put $Pay001cn_Ded_Tot     into Totals(5)  TotalName
  put $Pay001cn_DedPSTI_Tot into Totals(6)  TotalName
  put $Pay001cn_DedPPT_Tot  into Totals(7)  TotalName
  put $Pay001cn_DedGST_Tot  into Totals(8)  TotalName
  put $Pay001cn_DedPST_Tot  into Totals(9)  TotalName
  put $Pay001cn_DedHST_Tot  into Totals(10) TotalName
end-procedure


begin-heading 11

  #Include 'stdhtrpi.sqc'
  #Include 'stdhtr06.sqc'

  print $Pay001cn_Dedn      (+2,1)
  print $DedCd              (0,13)
  print $DeductionName      (0,20)
  print $Pay001cn_Type      (+1,1)
  print $XlatLongName       (0,13)

  print $Pay001cn_Cur_Amt1  (+2,39)
  print $Pay001cn_Benefit   (0,49)
  print $Pay001cn_Tax_Type  (0,54)
  print $Pay001cn_Ref_Amt1  (0,61)
  print $Pay001cn_Amt_Arr1  (0,72)
  print $Pay001cn_Amt_NTkn1 (0,84)
  print $Pay001cn_Rsn_NTkn1 (0,95)
  print $Pay001cn_Mth_TDt1  (0,114)
  print $Pay001cn_Qtr_TDt1  (0,128)
  print $Pay001cn_Yr_TDt1   (0,142)
  print $Pay001cn_Goal_Amt1 (0,156)

  print $Pay001cn_Emp_Id    (+1,1)
  print $Pay001cn_Name      (0,14)
  print $Pay001cn_Cur_Amt2  (0,39)
  print $Pay001cn_Record    (0,49)
  print $Pay001cn_Type      (0,54)
  print $Pay001cn_Ref_Amt2  (0,61)
  print $Pay001cn_Amt_Arr2  (0,72)
  print $Pay001cn_Amt_NTkn2 (0,84)
  print $Pay001cn_Rsn_NTkn2 (0,95)
  print $Pay001cn_Mth_TDt2  (0,114)
  print $Pay001cn_Qtr_TDt2  (0,128)
  print $Pay001cn_Yr_TDt2   (0,142)
  print $Pay001cn_Goal_Amt2 (0,156)

end-heading


begin-procedure Report
  let $val_emplid    = ' '
  let $val_dedcd     = ' '
  let $val_ded_class = ' '
  let $val_ded_slstx = ' '
  let $val_py_status = ' '
  let #val_ben_rcd   = 0
begin-SELECT
A.COMPANY      () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT   () on-break print=never level=2 procedure=PayEndDate-Change
A.PAYGROUP     () on-break print=never level=3 procedure=PayGroup-Change
C.PLAN_TYPE    () on-break print=never level=4 procedure=Deduction-Change
C.DEDCD        () on-break print=never level=4 procedure=Deduction-Change
C.BENEFIT_RCD_NBR
A.CHECK_DT
C.OFF_CYCLE
C.DED_CLASS
C.DED_SLSTX_CLASS
B.EMPLID          (+1,1)
B.EMPL_RCD
B.NAME            (0,14,20)
C.DED_CUR
C.DED_CUR_REFUND
C.DED_CUR_PAYBK
C.DED_NOT_TAKEN
C.REASON_NOT_TAKEN
B.PAYCHECK_STATUS

  do Format-Number(&C.Ded_Cur, $out, '99999,999.99mi')
  print $out   (0,34)

  if &C.Off_Cycle = 'Y'
    print '*'     (0,47)
  end-if

  do Format-Number(&C.BENEFIT_RCD_NBR, $out, '999')
  print $out (0,49)

  do Format-Number(&C.Ded_Cur_Refund, $out, 'B999,999.99')
  print $out   (0,56)
  do Format-Number(&C.Ded_Cur_PayBk, $out, 'B9999,999.99')
  print $out   (0,68)
  do Format-Number(&C.Ded_Not_Taken, $out, 'B9999,999.99')
  print $out   (0,81)

  if &C.Ded_Not_Taken > 0

    move 'REASON_NOT_TAKEN' to $FieldName
    move &C.Reason_Not_Taken to $FieldValue
    do Read-Translate-Table

    let $Reason_Not_Taken = &C.Reason_Not_Taken || ' ' || $XlatShortName
    print $Reason_Not_Taken  (0,95)

  end-if

  move &A.Check_Dt      to $AsOfDate  !for included procedures
  move &A.Company       to $Company
  move &A.PayGroup      to $PayGroup
  do Get-Company-Data
  do Get-PayGroup-Data

  move $PayGroupCountry to $Country
  move &A.Pay_End_Dt  to $PayEndDate
  do Get-Date-Codes                   !for Get-Deduction-Balances
  move &B.EmplID        to $EmplID

  move &C.Plan_Type     to $PlanType
  move &C.DedCd         to $DedCd

  do Get-Deduction-Name
  move 'PLAN_TYPE' to $FieldName
  move $PlanType   to $FieldValue
  do Read-Translate-Table

  move &C.Benefit_rcd_nbr to #Benefit-Rcd-Nbr
  move &C.Ded_Class       to $DedClass
  move &C.Ded_SlsTx_Class to $DedSlsTxClass
  let $var_emplid    = rtrim(&B.EMPLID,' ')
  let $var_dedcd     = rtrim(&C.DEDCD,' ')
  let $var_ded_class = rtrim(&C.DED_CLASS,' ')
  let $var_ded_slstx = rtrim(&C.DED_SLSTX_CLASS,' ')
  let $var_py_status = rtrim(&B.PAYCHECK_STATUS,' ')
  let #var_ben_rcd   = &C.BENEFIT_RCD_NBR
  do Get-Ded-Tax-Type

  if $val_emplid = $var_emplid  and $val_dedcd = $var_dedcd  and $val_ded_class = $var_ded_class and $val_ded_slstx = $var_ded_slstx and $val_py_status = $var_py_status  and #val_ben_rcd = #var_ben_rcd
    let #DedMTD = 0
    let #DedQTD = 0 
    let #DedYTD = 0 
  else
    do Get-Deduction-Balances
    do Format-Number(#DedMTD, $out, 'B9999,999.99mi')
    print $out   (0,109)
    do Format-Number(#DedQTD, $out, 'B9999,999.99mi')
    print $out   (0,122)
    do Format-Number(#DedYTD, $out, 'B9999,999.99mi')
    print $out   (0,137)
    let $val_emplid    = $var_emplid  
    let $val_dedcd     = $var_dedcd  
    let $val_ded_class = $var_ded_class
    let $val_ded_slstx = $var_ded_slstx
    let $val_py_status = $var_py_status
    let #val_ben_rcd   = #var_ben_rcd
  end-if

  if $PlanType = '00'
    do Get-General-Deductions
    do Format-Number(#Goal_Amt, $out, 'B9999,999.99mi')
    print $out (0,150)
    let #Goal_Amt = 0
  end-if

  ARRAY-ADD &C.Ded_Cur        -
            &C.Ded_Cur_Refund -
            &C.Ded_Cur_PayBk  -
            &C.Ded_Not_Taken  -
            #DedMTD           -
            #DedQTD           -
            #DedYTD           -

    to Totals(5) total(0)     -
               TOTAL(1)       -
               TOTAL(2)       -
               TOTAL(3)       -
               TOTAL(4)       -
               TOTAL(5)       -
               TOTAL(6)

  move 0    to #DedMTD
  move 0    to #DedQTD
  move 0    to #DedYTD

FROM  PS_PAY_CALENDAR  A,
      PS_PAY_DEDUCTION C,
      PS_PAY_CHECK     B
WHERE
  #ifdef MVS
    \$SlctCalendar\
  #else
    [$SlctCalendar]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND C.COMPANY    = A.COMPANY
  AND C.PAYGROUP   = B.PAYGROUP
  AND C.PAY_END_DT = B.PAY_END_DT
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.SEPCHK     = B.SEPCHK
  AND C.DED_CLASS <= 'K'
ORDER BY A.COMPANY ASC,
         A.PAY_END_DT ASC,
         A.PAYGROUP ASC,
         C.PLAN_TYPE ASC,
         C.DEDCD ASC,
         B.NAME ASC,
         B.EMPLID ASC,
         A.CHECK_DT ASC,
         C.BENEFIT_RCD_NBR ASC,
         C.DED_CLASS,
         C.DED_SLSTX_CLASS
end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals

end-procedure


begin-procedure Get-Ded-Tax-Type
  let #TaxTypeCol = 54

  evaluate $DedSlsTxClass
    when = 'I'                          !PSTI
      let $TaxTypeInd = $Pay001cn_PSTI
      print $TaxTypeInd (0,#TaxTypeCol)
      ARRAY-ADD  &C.Ded_Cur to Totals(6) total(0)
      break
    when = 'T'                          !PPT
      let $TaxTypeInd = $Pay001cn_PPT
      print $TaxTypeInd (0,#TaxTypeCol)
      ARRAY-ADD  &C.Ded_Cur to Totals(7) total(0)
      break
    when = 'G'                          !GST
      let $TaxTypeInd = $Pay001cn_GST
      print $TaxTypeInd (0,#TaxTypeCol)
      ARRAY-ADD  &C.Ded_Cur to Totals(8) total(0)
      break
    when = 'P'                          !PST
      let $TaxTypeInd = $Pay001cn_PST
      print $TaxTypeInd (0,#TaxTypeCol)
      ARRAY-ADD  &C.Ded_Cur to Totals(9) total(0)
      break
    when = 'H'                          !HST
      let $TaxTypeInd = $Pay001cn_HST
      print $TaxTypeInd (0,#TaxTypeCol)
      ARRAY-ADD  &C.Ded_Cur to Totals(10) total(0)
      break
    when-other
      break
  end-evaluate

end-procedure


begin-procedure Get-General-Deductions

begin-SELECT
GD.GOAL_AMT

    move &GD.Goal_Amt to #Goal_Amt

FROM  PS_GENL_DEDUCTION GD
WHERE GD.EMPLID     = &B.EmplID
  AND GD.COMPANY    = &A.Company
  AND GD.DEDCD      = &C.DedCd
  AND GD.EFFDT =
      (SELECT MAX(GD1.EFFDT)
       FROM PS_GENL_DEDUCTION GD1
       WHERE GD1.EMPLID    = GD.EMPLID
       AND   GD1.COMPANY   = GD.COMPANY
       AND   GD1.DEDCD     = GD.DEDCD
       AND   GD1.EFFDT    <= &A.PAY_END_DT)
end-SELECT

end-procedure

begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Deduction-Change
  move 5 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals

  move 5 to #totalRow

  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,14)
    move 34 to #startCol
    move 0 to #i

    while #i <= 6
      get #total from Totals(#totalRow) total(#i)
      do Format-Number(#total, $out, '99999,999.99mi')
      print $out (0,#startCol)
      evaluate #i
      when = 0
        add 21   to #startCol
      when = 3
        move 109 to #startCol
      when = 4
        add 13   to #startCol
      when = 5
        add 15   to #startCol
      when-other
        add  13  to #startCol
      end-evaluate
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  move 0 to #col
  move 6 to #dedtaxrow
  move 10 to #dedtaxmaxrow

  while #dedtaxrow <= #dedtaxmaxrow
    get $TotalName #total from Totals(#dedtaxrow) TotalName(#col) total(#col)
    if #total <> 0
      print $TotalName (+2,14)
      do Format-Number(#total, $out, '99999,999.99mi')
      print $out (0,46)
      put 0 into Totals(#dedtaxrow) total(#col)
    end-if

    add 1 to #dedtaxrow
  end-while


  if $End = 'Y'
    do Reset
  end-if

  new-page

end-procedure


begin-procedure Reset
  move 'Y' to $End_of_Report
  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if
end-procedure

begin-footing 2
  print $Pay001cn_OffCyc_Txt    (+0,1)

  if $End_of_Report = 'Y'
    print $Pay001cn_End_Rpt (+1,1) center
 !  encode '<27>E' into $Reset
    print $Reset (+0,+1)
  end-if
end-footing


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getdedb2.sqc'  !Get-Deduction-Balances procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
