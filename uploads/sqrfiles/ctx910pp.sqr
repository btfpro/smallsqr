!***********************************************************************
!  CTX910PP: PRINT Prior 2010 T4A Supplementary from Tax Extract Table *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C)  2011, Oracle and/or its affiliates.                   *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2011/06/29:13:49:03                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860812                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup07.sqc'
#Include 'ctxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#define TAXFORM_NOTES
#include 'rellang.sqc'

begin-report

  do Init-Report

  do Process-Main

!**** XML Publisher
  if $XMLPublisher = 'Y'

    do Capture-OS
    do Insert-YE-Runcontrol

    do XML-Close-Tag('CAN_YearEnd', $closeTag)
    do Write-XML-Line(#Fnum2, $closeTag)
    do Close-XML-File(#FNum2)

    if $RC_CAN_YE.T4A_COPY_TYPE = '2' and #FNum <> 0
      do Write-XML-Line(#Fnum, $closeTag)
      do Close-XML-File(#FNum)
    end-if

  else
    display ''
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    display '{IMPORTPREFIX}CTX910PP.LIS contains print images for paper T4A.'
    display ''
  end-if

#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report


begin-procedure Init-Report

  display 'PRINT T4A SLIP'
  do Init-DateTime
  do Init-Number
#ifdef PRCSSCHD
  do StdAPI-Init
#endif

  do Initialization

     use-printer-type HPLASERJET
     let #StubPtr = 0
     do Set-T4A-Row-Pointers

  encode '<27>(s1S' into $italic
  encode '<27>(s0S' into $upright

  encode '<27>(s3B' into $bold
  encode '<27>(s0B' into $normal

end-procedure


begin-setup

declare-layout default
formfeed        =no
paper-size      =(150,150)
orientation     =portrait
top-margin      = 0.0
left-margin     = 0.25
line-height     = 6pt
end-declare

#ifdef TAXTEST

#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string=<27>E<27>(10U<27>&l0O<27>&l6D<27>&l0E<27>&l80F<27>(s10.0H
  end-declare
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string=<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
#endif
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string=<39>E<39>(10U<39>&l0O<39>&l6D<39>&l0E<39>&l80F<39>(s10.0H
  end-declare
#endif

#endif

#ifndef MVS
#ifndef OS400
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string=<27>E<27>&l0L
  end-declare
#else
  declare-printer DEFAULT-HP
  end-declare
  declare-printer DEFAULT-LP
  init-string=<39>E<39>&l0L
  end-declare
#endif
#else
   declare-printer DEFAULT-HP
   end-declare
   declare-printer DEFAULT-LP
   init-string=<39>E<39>&l0L
   end-declare
#endif

   declare-procedure
     before-report = Init-Page-Size
   end-declare

end-setup


!***********************************************************************
begin-procedure Init-Page-Size
!***********************************************************************
! This sends a 'Perforation Skip' command to disable any bottom
! margin and obtain the maximum PCL page.  This is required in
! the printing of the T4A laser form.

#ifndef MVS
#ifndef OS400
  encode '<27>&l0L<27>&l3E' into $perforation_skip
#else
  encode '<39>&l0L<39>&l3E' into $perforation_skip
#endif
#else
  encode '<39>&l0L<39>&l3E' into $perforation_skip
#endif

  print $perforation_skip () code

end-procedure


begin-procedure Initialization

  let $PriorReportID = ' '
  move 'Y' to $T4A_Assigned

  move 'Y' to $FirstRecord
  move 'N' to $BurstSet
  do Get-Current-DateTime

  do Array-Create

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($AsOfToday, $AsOfDateYMD, {DEFYMD},'','')
  move $AsOfDateYMD to $AsOfYear xxxx

  move $AsOfYear  to #AsOfYear
  subtract 1 from #AsOfYear

  do Get-Can-Tax-Processing-Params

  if &TX.Balance_Year >= 2010
     display ' '
     display 'Reporting Year >= 2010 - Processing stopped'
     stop quiet
  end-if

  move &TX.Balance_Year to #TaxYear
  move &TX.Balance_Year to $TaxYear
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  do Array-Setup-FootNotes

  if &TX.Balance_Year <> #AsOfYear  and $Prcs_Process_Instance = ''

    display ''
    display 'Current Year is ' noline
    display $AsOfYear
    display 'Tax Reporting Year is ' noline
    display $TaxYear
    display 'Current Year is not one greater than Tax Reporting Year.'
    input $Answer maxlen=1 'Current tax year is not one greater than Tax Reporting Year -  Do you want to continue? (Y/N)'
    uppercase $Answer

    if $Answer <> 'Y'
      stop
    end-if
  end-if

  if $PRCS_Process_Instance = ''
     do Prompts
  else
#ifdef PRCSSCHD
           do Select-Canadian-YrEnd-Parameters
           do Convert-Parameters
#endif
  end-if

  move $RC_CAN_YE.T4A_Final_Print to $Slip_Final_Print

!**** XML Publisher
  if $XMLPublisher = 'Y'
    do Get-XMLP-Definitions

    do Format-DateTime($AsOfToday, $out, {DEFYMD},'','')
    do Format-DateTime($out, $IssueDate, {DEFYMD},'','native')

    move 0 to #BatchSize
    move 1 to #BatchId
    let $BurstValueSave = ''

    let #FNum  = 0
    let #FStat = 0

    do Clear-Guide-Temp

    let $FName2 = 'CTXT4AXM.xml'
    let $sourceFile2     = $FName2 || '{IMPORTSUFFIX}'
    let $sourceLocation2 = '{IMPORTPREFIX}' || ''
    let $sourceFileName2 = rtrim($sourceLocation2,' ') || rtrim($sourceFile2,' ')
    let #FNum2  = 4
    let #FStat2 = 0
    do Open-XML-File($FName2, #FNum2, #FStat2)
    do XML-Open-Tag('CAN_YearEnd', $openTag2)
    do Write-XML-Line(#Fnum2, $openTag2)

  end-if

end-procedure


begin-procedure Prompts

  display ' '
  display ' '
  display ' '
  display 'Select the type of form to use for your T4A printing '
  display ' '

  while $FormType = ''
    input $FormType 'Enter L(Laser Form), or X(XML Publisher) or enter Q to quit'
    uppercase $FormType
    if INSTR('LXQ',$FormType, 1) = 0
      display ' '
      display '***** Enter L, X or Q to quit *****'
      display ' '
      move '' to $FormType
    end-if
  end-while

  if $FormType = 'X'
      let $XMLPublisher = 'Y'
  else
      let $XMLPublisher = 'N'
  end-if

  if $FormType = 'Q'
     stop
  else
        display ' '
        display ' '
        display ' '
        display 'Select the T4A copy to print'
        display ' '

        while $CopyType = ''
    input $CopyType 'Enter 1(Govt Copy), or 2(Employee Copy), or 4(Company Copy), or enter Q to quit'
          uppercase $CopyType
          if INSTR('124Q',$CopyType, 1) = 0
             display ' '
             display '***** Enter 1, 2, 4, or Q to quit *****'
             display ' '
             move '' to $CopyType
          end-if
        end-while

        if $CopyType = 'Q'
           stop
        end-if
  end-if

  if $CopyType = '1'
     let $SortInd = '1'
  else
    display ' '
    display ' '
    display ' '
    display 'If this job will print forms to send to the Canadian '
    display 'government, enter 1 and the system will establish the '
    display 'correct sort sequence.'
    display ' '
    display 'If this job will print forms for another use (such as '
    display 'laser forms, employer copy, etc., you may select the '
    display 'sort sequence you prefer.  Enter 2 to see the sort options. '
    display 'You will be shown three levels of sorting options, one level '
    display 'at a time.'
    display ' '

    while $SortInd = ''
      input $SortInd 'Enter 1 (Standard Govt Sort Sequence), or 2 (Other Sort Options) , or enter Q to quit'
      uppercase $SortInd
      if INSTR('12Q',$SortInd, 1) = 0
        display ' '
        display '***** Enter 1, 2, or Q to quit *****'
        display ' '
        move '' to $SortInd
      end-if
    end-while

    if $SortInd = 'Q'
       stop
    end-if
  end-if

  if $SortInd = '1'
    let $SortSequence = 'SL.REPORTING_ID ASC, EE.COUNTRY ASC, ' ||
       'EE.SLIP_SURNAME ASC , EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

  else

    display ' '
    display ' '
    display ' '
    display 'Select the Primary Sort Sequence for your T4A slips.'
    display 'To sequence by Business number, enter 1.'
    display 'To sequence by company, enter 2.'
    display ' '

    while $SortInd1 = ''
      input $SortInd1 'For 1st sort field : enter 1 (Sort by Business Number), or 2 (Sort by Company), or enter Q to quit'
      uppercase $SortInd1
      if INSTR('12Q',$SortInd1, 1) = 0
        display ' '
        display '***** Enter 1, 2, or Q to quit *****'
        display ' '
        move '' to $SortInd1
      end-if
    end-while

  if $SortInd1 = 'Q'
     stop
  end-if

  if $SortInd1 = '1'
     let $Sort1 = 'SL.REPORTING_ID ASC'
     let $DispSort1 = 'Business Number; '
  end-if

  if $SortInd1 = '2'
     let $Sort1 = 'SL.COMPANY ASC'
     let $DispSort1 = 'Company; '
  end-if

  display ' '
  display ' '
  display ' '
  display 'Within the previous sort, select the second sort sequence.'
  display '    To sort by Location Code           - enter 1'
  display '    To sort by Department Code         - enter 2'
  display '    To sort by Mail Drop               - enter 3'
  display '    To sort by Postal Code             - enter 4'
  display '    To sort by none of the above       - enter 5'
  display '    To quit                            - enter Q'
  display ' '

  while $SortInd2 = ''
    input $SortInd2 'For 2nd sort : enter 1 (Loc Code), 2 (Dpt Code), 3 (Mail Drp), 4 (Post Code), 5 (None), or Q to quit'
    uppercase $SortInd2
    if INSTR('12345Q',$SortInd2, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, 4, 5, or Q to quit *****'
      display ' '
      move '' to $SortInd2
    end-if
  end-while

  if $SortInd2 = 'Q'
     stop
  end-if

  if $SortInd2 = '1'
     let $Sort2 = 'EE.LOCATION ASC'
     let $DispSort2 = 'Location; '
  end-if

  if $SortInd2 = '2'
     let $Sort2 = 'EE.DEPTID ASC'
     let $DispSort2 = 'Department; '
  end-if

  if $SortInd2 = '3'
     let $Sort2 = 'EE.MAIL_DROP ASC'
     let $DispSort2 = 'Mail Drop; '
  end-if

  if $SortInd2 = '4'
     let $Sort2 = 'EE.POSTAL ASC'
     let $DispSort2 = 'Postal Code; '
  end-if

  if $SortInd2 = '5'
     let $Sort2 = 'N'
  end-if

  display ' '
  display ' '
  display ' '
  display 'Within the previous sorts, select the third sort sequence.'
  display '   To sort by Employee Name  - enter 1'
  display '   To sort by Employee ID    - enter 2'
  display '   To sort by Employee SIN   - enter 3'
  display '   To quit                   - enter Q'
  display ' '

  while $SortInd3 = ''
    input $SortInd3 'For 3rd sort field : enter 1 (Empl Name), 2 (Empl ID), 3 (Empl SIN), or enter Q to quit'
    uppercase $SortInd3
    if INSTR('123Q',$SortInd3, 1) = 0
      display ' '
      display '***** Enter 1, 2, 3, or Q to quit *****'
      display ' '
      move '' to $SortInd3
    end-if
  end-while

  if $SortInd3 = 'Q'
     stop
  end-if

  if $SortInd3 = '1'
     let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
     let $DispSort3 = 'Employee Name; Employee ID'
  end-if

  if $SortInd3 = '2'
     let $Sort3 = 'EE.EMPLID ASC'
     let $DispSort3 = 'Employee ID'
  end-if

  if $SortInd3 = '3'
     let $Sort3 = 'EE.SIN ASC'
     let $DispSort3 = 'Employee SIN'
  end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if
 end-if

   if $SortInd = '2' and $SortInd1 = '1'
      move 'R' to $SortCode
   else
      if $SortInd = '2' and $SortInd1 = '2'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

   if $SortInd <> '1'
      display '  '
      display '  '
      display 'Your sort sequence is ' noline
      display $DisplaySeq
      display '  '
      display '  '
     display 'Is this sequence correct?'
     display 'If the sequence is correct, enter Y'

      while $Response = ''
        input $Response ' Enter Y to continue or enter Q to quit'
        uppercase $Response
        if INSTR('YQ',$Response, 1) = 0
          display ' '
          display '***** Enter Y or Q to quit *****'
          display ' '
          move '' to $Response
        end-if
      end-while

     if $Response = 'Q'
        stop
     end-if
   else
     display 'Standard Government sort selected.'
   end-if

  while $SelectEEs = ''
    display ''
    display 'Regular processing or Select employees?'
    input $SelectEEs 'Enter R or S'
    uppercase $SelectEEs
    if INSTR('RS',$SelectEEs,1) = 0
      display 'Enter R or S'
      move '' to $SelectEEs
    end-if
  end-while

  if $SelectEEs = 'S'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND EE.EMPLID in (''' to $E.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      if $SelectedEmplID <> ''
        uppercase $SelectedEmplID
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
  end-if

end-procedure

begin-procedure Array-Create

  create-array name=FootNotes size=50  -
    field=FN_Box_Num:char              -
    field=FN_Box_Priority:number       -
    field=FN_Box_Cd:char               -
    field=FN_Text:char

  create-array name=FormNotes size=50  -
    field=Box_Num:char                 -
    field=Box_Priority:number          -
    field=Box_Cd:char                  -
    field=Text:char                    -
    field=Box_Value:char               -
    field=Box_Amount:number

end-procedure

begin-procedure Array-Setup-FootNotes

  let #i = 0

begin-SELECT
FN.BOX
FN.BOX_NOTE_SEQ
FN.BOX_NOTE_CD
FN.BOX_NOTE_TEXT
FN.EFFDT

  move &FN.Box_Note_Seq to $Sequence
  let $TAXFORM_NOTES-BOX_NOTE_TEXT = &FN.BOX_NOTE_TEXT

  do Get_Related_TAXFORM_NOTES(&FN.BOX,&FN.EFFDT,'A')

  PUT  &FN.Box &FN.Box_Note_Seq &FN.Box_Note_Cd $TAXFORM_NOTES-BOX_NOTE_TEXT
        INTO FOOTNOTES(#I) FN_BOX_NUM FN_BOX_PRIORITY FN_BOX_CD FN_TEXT

  move #i to #max_i
  add 1 to #i

FROM  PS_TAXFORM_NOTES  FN
WHERE TAXFORM_ID  =  'A'
  AND EFFDT = (SELECT
      MAX(EFFDT)
      FROM PS_TAXFORM_NOTES
      WHERE EFFDT <= $AsOfDate
        AND TAXFORM_ID = 'A')

end-SELECT
end-procedure


begin-procedure  Process-Main

begin-SELECT
SL.REPORTING_ID
SL.COMPANY
SL.EMPLID
SL.CALENDAR_YEAR
SL.UI_EXEMPT
SL.WAGE_LOSS_PLAN
SL.PROVINCE
SL.SEQUENCE_NUMBER
SL.YE_SLIP_PROCESS
SL.CAN_YE_SLIP_SEQ
EE.SIN
EE.EMPLID
EE.SLIP_SURNAME
EE.SLIP_FIRST_NAME
EE.SLIP_INITIAL
EE.ADDRESS1
EE.ADDRESS2
EE.CITY
EE.PROVINCE
EE.COUNTRY
EE.POSTAL
EE.LOCATION
EE.DEPTID
EE.MAIL_DROP

 if $Proc_Amend_Cancel_New = 'Y'
   do Check-Status
 end-if

 if $StatusOpen = 'Y'

  if $FirstRecord = 'N'
    if $SortInd = '1'

      if &EE.EmplID <> $EmplID or
         &SL.Reporting_ID <> $ReportID
         do Print-T4A-Data
         do Finish-Printing
         move 'Y' to $BurstSet
         do Initialize-Employee-Data
         move 0 to #j
      end-if
    else
      if $SortInd1 = '1'
         if &SL.Reporting_ID <> $ReportID or
            &EE.EmplID <> $EmplID
            do Print-T4A-Data
            do Finish-Printing
            move 'Y' to $BurstSet
            do Initialize-Employee-Data
            move 0 to #j
         end-if
      else
         if &SL.Company <> $Company or
            &SL.Reporting_ID <> $ReportID or
            &EE.EmplID <> $EmplID
            do Print-T4A-Data
            do Finish-Printing
            move 'Y' to $BurstSet
            do Initialize-Employee-Data
            move 0 to #j
         end-if
      end-if
    end-if
  else
    move 'N' to $FirstRecord
    move 'Y' to $BurstSet
  end-if

  do Format-Employee-Data

  if $XMLPublisher = 'Y' and $BurstSet = 'Y'

     move 'N' to $BurstSet

! create burst value for this slip
     let $BurstValue = rtrim(&EE.EMPLID, ' ') || $CalYear
     let $BurstValue = $BurstValue || rtrim(&SL.Company, ' ') || 'A'
     let $BurstValue = $BurstValue || rtrim(&SL.Reporting_ID, ' ')
     let $BurstValue = $BurstValue || rtrim(&SL.WAGE_LOSS_PLAN, ' ')

     do format-number(&SL.SEQUENCE_NUMBER, $T4ASeqNo, '09')
     let $BurstValue = $BurstValue || $T4ASeqNo
!
     if $RC_CAN_YE.T4A_Copy_Type = '2'

        if $BurstValue <> $BurstValueSave

           if $BurstValueSave <> ''
!              do XML-Close-Tag('T4_Data',$closeTag)
!              do Write-XML-Line(#Fnum, $closeTag)
              do XML-Close-Tag('CAN_YearEnd', $closeTag)
              do Write-XML-Line(#Fnum, $closeTag)
              do Close-XML-File(#FNum)
           end-if

           move $BurstValue to $BurstValueSave

           let $FName = rtrim($BurstValue,' ') || '.xml'
           let $sourceFile     = $FName || '{IMPORTSUFFIX}'
           let $sourceLocation = '{IMPORTPREFIX}' || ''
           let $sourceFileName = rtrim($sourceLocation,' ') || rtrim($sourceFile,' ')
           let #FNum  = 3
           let #FStat = 0
           do Open-XML-File($FName, #FNum, #FStat)
           do XML-Open-Tag('CAN_YearEnd', $openTag)
           do Write-XML-Line(#Fnum, $openTag)

        end-if
     end-if

     do XML-Open-Tag('T4A_Data', $openTag)

     if $RC_CAN_YE.T4A_Copy_Type = '2' and #FNum <> 0
        do Write-XML-Line(#Fnum, $openTag)
     end-if

     do Get-SS-Consent
     if $UserFlag = 'Y'
        do Write-XML-Line(#Fnum2, $openTag)
     end-if

!     if ($RC_CAN_YE.T4A_COPY_TYPE  = '2' and $Consent <> 'C') or
!         $RC_CAN_YE.T4A_COPY_TYPE <> '2'
!        do Write-XML-Line(#Fnum2, $openTag)
!     end-if

     if #OPT_BLK.PY_RPT_BATCH_SIZE > 0
        add 1 to #BatchSize
        if #BatchSize > #OPT_BLK.PY_RPT_BATCH_SIZE
           move 0 to #BatchSize
           add 1 to #BatchId
        end-if
     end-if

     do Build-XML-Line('BURST_VALUE', $BurstValue, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('EMPLID', &EE.EMPLID, 'Y', #FNum, #FNum2, $UserFlag)

     do format-number(#BatchId, $T4ABatch, '09999')
     do Build-XML-Line('BATCH_ID', $T4ABatch, 'Y', #FNum, #FNum2, $UserFlag)
  end-if


  do Get-Slip-Detail

  if &SL.Company <> $PriorCompany and $Compbrk = 'Y'
       if #StubPtr <> 0
          do Insert-FormFeed
          new-page
          let #StubPtr = 0
          do Set-T4A-Row-Pointers
       end-if
  end-if

  if &SL.Company <> $PriorCompany
      move &SL.Company to $Company
      do Get-Setup-Viewing-Date
      do Get-Company-Data
      move $Company to $PriorCompany
      move 'Y'      to $Compbrk
  end-if

  if $XMLPublisher <> 'Y'
     if #StubPtr = 0
        if $CopyType = '1'
           do Flash-T4A-Copy1
        else
           if $CopyType = '2'
              do Flash-T4A-Copy2
           else
              do Flash-T4A-Copy4            ! $CopyType = 4
           end-if
        end-if
        do Alter-Printer-T4A-Reg
     end-if
  end-if

  if $SortInd = '1'
     do convert-to-char(&EE.SLIP_Surname, $Segment_Last_Surname)
  end-if

  if $Proc_Amend_Cancel_New = 'Y' and $RC_CAN_YE.T4A_Final_Print = 'Y'
    do Close-Amend-Cancel-T4A
  end-if

  if $XMLPublisher = 'Y' and $CopyType = '2'

     do Insert-Guide-Data
  end-if


 end-if


FROM   PS_CAN_YE_SLIP  SL,
       PS_CAN_YE_EMPL  EE
WHERE  SL.CALENDAR_YEAR = &TX.Balance_Year
  AND  SL.TAXFORM_ID = 'A'
  AND  SL.PROCESS_FLAG <> 'V'
  AND  EE.CALENDAR_YEAR = &TX.Balance_Year
  AND  EE.EMPLID = SL.EMPLID
#ifdef MVS
  \$E.SelectedEEs\
#else
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used
#endif
  AND  EE.COMPANY = SL.COMPANY
  AND  EE.SEQUENCE_NUMBER = SL.SEQUENCE_NUMBER
  AND  SL.SEQUENCE_NUMBER = (SELECT MAX(SL1.SEQUENCE_NUMBER)
               FROM PS_CAN_YE_SLIP SL1
               WHERE SL1.COMPANY = SL.COMPANY
                 AND SL1.EMPLID  = SL.EMPLID
                 AND SL1.CALENDAR_YEAR = SL.CALENDAR_YEAR
#ifdef MVS
  \$seq_number\
#else
  [$seq_number]
#endif
#ifdef MVS
  \$ye_slip_process\
#else
  [$ye_slip_process]
#endif
#ifdef MVS
  ORDER BY \$SORTSEQUENCE\
#else
  ORDER BY [$SortSequence]
#endif
end-SELECT

   if $EmplID <> ''
     do Print-T4A-Data
     do Finish-Printing
   end-if

end-procedure


begin-procedure Get-SLIP-Detail

begin-SELECT
DE.BOX
DE.CAN_YE_BOX_TEXT
DE.CAN_YE_BOX_AMT

  EXTRACT $FN_Ind from &DE.Box 2 1
  if $FN_Ind = '' or $FN_Ind = ' '
      do Accumulate-Employee-Data
  else
      add 1 to #j
      do Insert-EmplNote-Data
  end-if

FROM  PS_CAN_YE_DETAIL DE
WHERE EMPLID            = &EE.EmplID
  AND TAXFORM_ID        = 'A'
  AND WAGE_LOSS_PLAN    = &SL.Wage_Loss_Plan
  AND PROVINCE          = &SL.Province
  AND CALENDAR_YEAR     = &TX.Balance_Year
  AND COMPANY           = &SL.Company
  AND SEQUENCE_NUMBER   = &SL.Sequence_Number
  AND CAN_YE_SLIP_SEQ   = &SL.Can_YE_Slip_Seq

end-SELECT

end-procedure

begin-procedure Insert-EmplNote-Data

  move 0 to #k
  move 50 to #max_k

  while #k <= #max_k
     get $FindBox from FormNotes(#k) Box_Num
     if $FindBox = &DE.Box
        array-add &DE.Can_YE_Box_Amt to FormNotes(#k) Box_Amount
        break
     else
       if $FindBox = ' ' or $FindBox = ''
          put  &DE.Box &DE.Can_YE_Box_Text &DE.Can_YE_Box_Amt
             into FormNotes(#k) Box_Num Box_Value Box_Amount
          let #max_j = #k + 1

          move 0 to #i
          while #i <= #max_i
            do Get-FootNotes
            if $FN_Box = &DE.Box
               put #FN_Priority $FN_BoxCode $FN_Text
                 into FormNotes(#k) Box_Priority Box_Cd Text
               break
            else
              if $FN_Box = '' or $FN_Box = ' '
                 break
              else
                 add 1 to #i
              end-if
            end-if
          end-while
          break
       else
          add 1 to #k
       end-if
    end-if
  end-while

end-procedure
begin-procedure Get-FootNotes

  get  $FN_Box
       #FN_Priority
       $FN_BoxCode
       $FN_Text
  from FootNotes(#i)
        FN_Box_Num
        FN_Box_Priority
        FN_Box_Cd
        FN_Text

end-procedure


begin-procedure Accumulate-Employee-Data

    let $Box = RTRIM(&DE.Box, ' ')
    let #BoxAmt = &DE.Can_YE_Box_Amt
    let $BoxText = &DE.Can_YE_Box_Text

    evaluate $Box

       when = '16'
         if #BoxAmt > 0
            add #BoxAmt to #SegPensionAnnuity
            add #BoxAmt to #EmpPensionAnnuity
         end-if

       when = '18'
         if #BoxAmt > 0
            add #BoxAmt to #EmpLumpSumPayment
            add #BoxAmt to #SegLumpSumPayment
         end-if

       when = '20'
         if #BoxAmt > 0
            add #BoxAmt to #EmpCommissions
            add #BoxAmt to #SegCommissions
         end-if

       when = '22'
         if #BoxAmt > 0
            add #BoxAmt to #EmpIncomeTax
            add #BoxAmt to #SegIncomeTax
         end-if

       when = '24'
         if #BoxAmt > 0
            add #BoxAmt to #EmpAnnuities
            add #BoxAmt to #SegAnnuities
         end-if

       when = '26'
         if #BoxAmt > 0
            add #BoxAmt to #EmpRetireAllow
            add #BoxAmt to #SegRetireAllow
         end-if

       when = '27'
         if #BoxAmt > 0
            add #BoxAmt to #EmpNonElgRetireAllow
            add #BoxAmt to #SegNonElgRetireAllow
         end-if

       when = '28'
         if #BoxAmt > 0
            add #BoxAmt to #EmpOtherIncome
            add #BoxAmt to #SegOtherIncome
         end-if

       when = '30'
         if #BoxAmt > 0
            add #BoxAmt to #EmpPatronageAlloc
            add #BoxAmt to #SegPatronageAlloc
         end-if

       when = '32'
         if #BoxAmt > 0
            add #BoxAmt to #EmpPastPension
            add #BoxAmt to #SegPastPension
         end-if

       when = '34'
         if #BoxAmt > 0
            add #BoxAmt to #EmpPensionAdj
            add #BoxAmt to #SegPensionAdj
         end-if

       when = '36'
         if $BoxText <> ''
            let $Box36Text = RTRIM($BoxText, ' ')
            do Save-RPP-ID
         end-if

       when = '40'
         if #BoxAmt > 0
            add #BoxAmt to #EmpRESPIncome
            add #BoxAmt to #SegRESPIncome
         end-if

       when = '42'
         if #BoxAmt > 0
            add #BoxAmt to #EmpRESPAssistPay
            add #BoxAmt to #SegRESPAssistPay
         end-if

       when = '46'
         if #BoxAmt > 0
            add #BoxAmt to #EmpCharityDonation
            add #BoxAmt to #SegEmpCharityDonation
         end-if

      end-evaluate

end-procedure

begin-procedure Save-RPP-ID

  if $PlanA = ' '
     move $Box36Text to $PlanA
  else
     if $PlanA <> $Box36Text
       if $PlanB = ' '
          move $Box36Text to $PlanB
       else
         if $PlanB <> $Box36Text
           if $PlanC = ' '
              move $Box36Text to $PlanC
           end-if
         end-if
       end-if
     end-if
  end-if

end-procedure


begin-procedure Print-T4A-Data

         if #EmpPensionAnnuity > 0
            do Format-Number (#EmpPensionAnnuity, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Pension', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,2)
            if $CopyType = '2'
              print $BoxAmt (#Row52,2)
            end-if
         end-if


         if #EmpLumpSumPayment > 0
            do Format-Number (#EmpLumpSumPayment, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Lump_sum_pay', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,13)
            if $CopyType = '2'
              print $BoxAmt (#Row52,13)
            end-if
         end-if


         if #EmpCommissions > 0
            do Format-Number (#EmpCommissions, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Self_Commissions', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,24)
            if $CopyType = '2'
              print $BoxAmt (#Row52,24)
            end-if
         end-if


         if #EmpIncomeTax > 0
            do Format-Number (#EmpIncomeTax, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Income_Tax_ded', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,35)
            if $CopyType = '2'
              print $BoxAmt (#Row52,35)
            end-if
         end-if


         if #EmpAnnuities > 0
            do Format-Number (#EmpAnnuities, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Annuities', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,46)
            if $CopyType = '2'
              print $BoxAmt (#Row52,46)
            end-if
         end-if


         if #EmpRetireAllow > 0
            do Format-Number (#EmpRetireAllow, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Eligible_Retire_Allow', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,56)
            if $CopyType = '2'
              print $BoxAmt (#Row52,56)
            end-if
         end-if


         if #EmpNonElgRetireAllow > 0
            do Format-Number (#EmpNonElgRetireAllow, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Non_Eligible_Retire_Allow', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row10,66)
            if $CopyType = '2'
              print $BoxAmt (#Row52,66)
            end-if
         end-if


         if #EmpOtherIncome > 0
            do Format-Number (#EmpOtherIncome, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Oth_Income', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,02)
            if $CopyType = '2'
              print $BoxAmt (#Row58,02)
            end-if
         end-if


         if #EmpPatronageAlloc > 0
            do Format-Number (#EmpPatronageAlloc, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Patronage_alloc', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,13)
            if $CopyType = '2'
              print $BoxAmt (#Row58,13)
            end-if
         end-if


         if #EmpPastPension > 0
            do Format-Number (#EmpPastPension, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('PastPension', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,24)
            if $CopyType = '2'
              print $BoxAmt (#Row58,24)
            end-if
         end-if


         if #EmpPensionAdj > 0
            do Format-Number (#EmpPensionAdj, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Pension_Adj', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,35)
            if $CopyType = '2'
              print $BoxAmt (#Row58,35)
            end-if
         end-if


         if $Box36Text <> '' and
            $Box36Text <> ' '

            if $XMLPublisher = 'Y'
               do Build-XML-Line('PP_Reg_Num', $Box36Text, 'Y', #FNum, #FNum2, $UserFlag)
            else
               print $Box36Text (#Row16,46)
               if $CopyType = '2'
                 print $Box36Text (#Row58,46)
               end-if
            end-if
         end-if


         if #EmpRESPIncome > 0
            do Format-Number (#EmpRESPIncome, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('RESP_Acc_Inc', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,56)
            if $CopyType = '2'
              print $BoxAmt (#Row58,56)
            end-if
         end-if


         if #EmpRESPAssistPay > 0
            do Format-Number (#EmpRESPAssistPay, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('RESP_edu_assist', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row16,66)
            if $CopyType = '2'
              print $BoxAmt (#Row58,66)
            end-if
         end-if


         if #EmpCharityDonation > 0
            do Format-Number (#EmpCharityDonation, $BoxAmt, '9999999.99')
         else
            move ' ' to $BoxAmt
         end-if

         if $XMLPublisher = 'Y'
            do Build-XML-Line('Charitable', $BoxAmt, 'Y', #FNum, #FNum2, $UserFlag)
         else
            print $BoxAmt (#Row22,02)
            if $CopyType = '2'
              print $BoxAmt (#Row64,02)
            end-if
         end-if

end-procedure


begin-procedure Format-Employee-Data

  let $SIN = edit(&EE.SIN, 'xxxbxxxbxxx')          ! Box 12

  let $LastName = substr(&EE.SLIP_Surname, 1, 20)
  do convert-to-char($LastName, $LastName)
  let $FirstName = &EE.SLIP_First_Name
  do convert-to-char($FirstName, $FirstName)
  let $MI = &EE.SLIP_Initial
  do convert-to-char($MI, $MI)
  let $Name = $LastName || ', ' || $FirstName || ' ' || $MI

  let $Street1 =  &EE.Address1
  do convert-to-char($Street1,$Street1)
  let $Street2 = RTRIM(&EE.Address2, ' ')
  do convert-to-char($Street2,$Street2)
  let $EeAddr = RTRIM(&EE.City, ' ')
  do convert-to-char($EeAddr, $EeAddr)
  let $ProvCd = rtrim(&EE.Province,' ')
  if $ProvCd = 'ZZ'
     move ' ' to $ProvCd
  end-if
  concat $ProvCd with $EeAddr ,bxx
  if &EE.Country <> 'CAN'
     move &EE.Country to $Country
     do convert-to-char($Country, $Country)
     let $Country_print = rtrim($Country, ' ')
  else
     let $Country_print = ' '
  end-if

  if $Country = 'USA'
    add 1 to #USACounter
  end-if

  let $TempAddr = RTRIM($EeAddr, ' ')

  unstring &EE.POSTAL by ' ' into $ZIP1 $ZIP2
  let $ZIP1 = $ZIP1  || $ZIP2

  if &EE.Country = 'CAN'
    let $ZipValue = edit($ZIP1, 'xxxbxxx')
  else
    let $ZipValue = rtrim(&EE.POSTAL, ' ')
  end-if

  let $PrintAddr = $TempAddr || '  ' || $ZipValue

  let $ReportID = &SL.Reporting_ID
  let $WageLossPlan = &SL.Wage_Loss_Plan
  let $EmplID =  &EE.EmplID
  let $Slip_Process = &SL.YE_Slip_Process

  let $Prior_LastName = &EE.SLIP_Surname
end-procedure


begin-procedure Finish-Printing

     if $XMLPublisher = 'Y'
        do Build-XML-Line('sin', $SIN, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $SIN (#Row22,13)
        if $CopyType = '2'
          print $SIN (#Row64,13)
        end-if
     end-if


     if $XMLPublisher = 'Y'
        do XML-Open-Tag('EE_Name', $eeNameTag)

        if $RC_CAN_YE.T4A_Copy_Type = '2' and #FNum <> 0
           do Write-XML-Line(#Fnum, $eeNameTag)
        end-if

        if $UserFlag = 'Y'
           do Write-XML-Line(#Fnum2, $eeNameTag)
        end-if

!        if ($RC_CAN_YE.T4A_Copy_Type = '2' and $Consent <> 'C') or
!            $RC_CAN_YE.T4A_Copy_Type <> '2'
!          do Write-XML-Line(#Fnum2, $eeNameTag)
!        end-if

        do Build-XML-Line('Lastname', $LastName, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('Firstname', $FirstName, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('MI', $MI, 'Y', #FNum, #FNum2, $UserFlag)

        do XML-Close-Tag('EE_Name', $eeNameTag)

        if $RC_CAN_YE.T4A_Copy_Type = '2' and #FNum <> 0
           do Write-XML-Line(#Fnum, $eeNameTag)
        end-if

        if $UserFlag = 'Y'
           do Write-XML-Line(#Fnum2, $eeNameTag)
        end-if

!        if ($RC_CAN_YE.T4A_Copy_Type = '2' and $Consent <> 'C') or
!            $RC_CAN_YE.T4A_Copy_Type <> '2'
!          do Write-XML-Line(#Fnum2, $eeNameTag)
!        end-if

     else
        print $LastName (#Row28,04)
        print $FirstName (#Row28,25)
        print $MI (#Row28,39)
        if $CopyType = '2'
           print $LastName (#Row70,04)
           print $FirstName (#Row70,25)
           print $MI (#Row70,39)
        end-if
     end-if


     if $XMLPublisher = 'Y'
        do Build-XML-Line('EE_Street1', $Street1, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $Street1 (#Row30,4)
        if $CopyType = '2'
           print $Street1 (#Row72,4)
        end-if
     end-if

  if $Street2 <> ''

    if $XMLPublisher = 'Y'
       do Build-XML-Line('EE_Street2', $Street2, 'Y', #FNum, #FNum2, $UserFlag)
       do Build-XML-Line('EE_Street3', $PrintAddr, 'Y', #FNum, #FNum2, $UserFlag)
       do Build-XML-Line('EE_Street4', $Country_print, 'Y', #FNum, #FNum2, $UserFlag)
    else
       print $Street2 (#Row32,4)
       print $PrintAddr (#Row34,4)
       print $Country_print (#Row36,4)
       if $CopyType = '2'
          print $Street2 (#Row74,4)
          print $PrintAddr (#Row76,4)
          print $Country_print (#Row78,4)
       end-if
    end-if
  else

    if $XMLPublisher = 'Y'
       do Build-XML-Line('EE_Street2', $PrintAddr, 'Y', #FNum, #FNum2, $UserFlag)
       do Build-XML-Line('EE_Street3', $Country_print, 'Y', #FNum, #FNum2, $UserFlag)
    else
       print $PrintAddr (#Row32,4)
       print $Country_print (#Row34,4)
       if $CopyType = '2'
          print $PrintAddr (#Row74,4)
          print $Country_print (#Row76,4)
       end-if
    end-if
  end-if

  if $SelectEEs = 'S' or $SelectEEs = 'E'

      if $XMLPublisher = 'Y'
         do Build-XML-Line('DUP_Copy', 'DUPLICATE COPY', 'Y', #FNum, #FNum2, $UserFlag)
      else
         print 'DUPLICATE COPY'   (#Row05,45)
         if $CopyType = '2'
            print 'DUPLICATE COPY' (#Row47,45)
         end-if
      end-if
  end-if

  if ($SelectEEs = 'A' or $SelectEEs = 'E') and $Slip_Process = 'A'

      if $XMLPublisher = 'Y'
         do Build-XML-Line('Amend_Cancel', 'AMENDED', 'Y', #FNum, #FNum2, $UserFlag)
      else
         print 'AMENDED'        (#Row05, 33)
         if $CopyType = '2'
            print 'AMENDED'     (#Row47, 33)
         end-if
      end-if
  end-if

  if ($SelectEEs = 'C' or $SelectEEs = 'E') and $Slip_Process = 'C'

      if $XMLPublisher = 'Y'
         do Build-XML-Line('Amend_Cancel', 'CANCELLED', 'Y', #FNum, #FNum2, $UserFlag)
      else
         print 'CANCELLED'        (#Row05, 33)
         if $CopyType = '2'
            print 'CANCELLED'     (#Row47, 33)
         end-if
      end-if
  end-if


     if $CopyType <> '2'
        if $XMLPublisher = 'Y'
          do Build-XML-Line('Reporting_Id', $ReportID, 'Y', #FNum, #FNum2, $UserFlag)
        else
          print $ReportID (#Row21,60)
        end-if
     end-if

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Recipient_Num', $EmplID, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $EmplID (#Row21,46)
        if $CopyType = '2'
           print $EmplID (#Row63,46)
        end-if
     end-if

  do convert-to-char($CompanyName, $CompanyName)

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Payer_Name', $CompanyName, 'Y', #FNum, #FNum2, $UserFlag)
     else
        print $CompanyName (#Row26,46)
        if $CopyType = '2'
           print $CompanyName (#Row68,46)
        end-if
     end-if

     if $XMLPublisher = 'Y'
        do Build-XML-Line('Tax_Year', $CalYear, 'Y', #FNum, #FNum2, $UserFlag)
     end-if

  if #max_j > 0
     do Print-Footnotes
  end-if

  move 0 to #max_j


  if $XMLPublisher = 'Y'
     do XML-Close-Tag('T4A_Data', $closeTag)

     if $UserFlag = 'Y'
        do Write-XML-Line(#Fnum2, $closeTag)
     end-if

!     if ($RC_CAN_YE.T4A_Copy_Type = '2' and $Consent <> 'C') or
!         $RC_CAN_YE.T4A_Copy_Type <> '2'
!
!         do Write-XML-Line(#Fnum2, $closeTag)
!     end-if

     if $RC_CAN_YE.T4A_Copy_Type = '2' and #Fnum <> 0
       do Write-XML-Line(#Fnum, $closeTag)
     end-if

  else
     if $CopyType = '1' or $CopyType = '4'
        if #StubPtr = 84
           do Insert-FormFeed
           new-page
           move 0 to #StubPtr
        else
           add 42 to #StubPtr
        end-if
        do Set-T4A-Row-Pointers
     else
        do Insert-FormFeed
        new-page
     end-if
  end-if

  add 1 to #SegmentCount
  if $SortInd = '1'
     if #SegmentCount = 1
        do convert-to-char($Prior_LastName,$Segment_First_Surname)
     end-if
  end-if
end-procedure


begin-procedure Print-Footnotes

  move 'Y' to $MoreFootnotes
  move 0 to #NoteCount

  move 4 to #MaxFootnotes
  while #NoteCount < #MaxFootnotes
     if #NoteCount > #max_j  or $MoreFootnotes = 'N'
        break
     end-if
     move 999 to #HoldPriority
     move 0 to #j

     while #j < #max_j
        get $CkBox #BoxPriority from FormNotes(#j) Box_Num Box_Priority
        move #BoxPriority to $BoxPriority
        if $CkBox = ' '  or
           $CkBox = ''
           break
        else
           if #BoxPriority < #HoldPriority and
              #BoxPriority <> 0
              let #HoldIdx = #j
              move #BoxPriority to #HoldPriority
           end-if
           add 1 to #j
        end-if
     end-while
      if #HoldPriority <> 999 and
         #HoldPriority <> 0
        put 999 into FormNotes (#HoldIdx) Box_Priority

        get $Note_Box from FormNotes (#HoldIdx) Box_Num
        get $PrintNoteCode from FormNotes (#HoldIdx) Box_Cd
        get $Note_Text from FormNotes (#HoldIdx) Text
        get #Note_Amt from FormNotes (#HoldIdx) Box_Amount
        get $Note_Value from FormNotes (#HoldIdx) Box_Value

        add 1 to #NoteCount
        evaluate #NoteCount
           when = 1
             let #FNLine = #Row30
             let #FNCol  = 46

           when = 2
             let #FNLine = #Row32
             let #FNCol  = 46

           when = 3
             let #FNLine = #Row34
             let #FNCol  = 46

           when = 4
             let #FNLine = #Row36
             let #FNCol  = 46

        end-evaluate

        let $Note_Text = RTRIM($Note_Text, ' ')
        let $BoxNumLit = substr($Note_Box,1,2) || ' '

        if #Note_Amt <> 0
          if #max_j > 1
            do Format-Number(#Note_Amt, $Note_Amt, '999999.99')
            let $Note_Amt = LTRIM($Note_Amt, ' ')
            let $PrintAmt = $PrintNoteCode || '$' || $Note_Amt || ' ' || $Note_Text
          else
            do Format-Number(#Note_Amt, $Note_Amt, '999999.99')
            let $Note_Amt = LTRIM($Note_Amt, ' ')
            let $PrintAmt = $BoxNumLit || '$' || $Note_Amt || ' ' || $Note_Text
          end-if
        else
          if $Note_Text <> ''
            let $PrintAmt = $BoxNumLit || $Note_Text
            let $PrintAmt = substr($PrintAmt,1,30)
            print $PrintAmt (#FNLine,#FNCol)
          end-if
        end-if

       let $PrintAmt = substr($PrintAmt,1,30)

       if $XMLPublisher = 'Y'
          evaluate #NoteCount
            when = 1
               do Build-XML-Line('FootNote_Amt1', $PrintAmt, 'Y', #FNum, #FNum2, $UserFlag)
               break
            when = 2
               do Build-XML-Line('FootNote_Amt2', $PrintAmt, 'Y', #FNum, #FNum2, $UserFlag)
               break
            when = 3
               do Build-XML-Line('FootNote_Amt3', $PrintAmt, 'Y', #FNum, #FNum2, $UserFlag)
               break
            when = 4
               do Build-XML-Line('FootNote_Amt4', $PrintAmt, 'Y', #FNum, #FNum2, $UserFlag)
               break
           end-evaluate
       else
          print $PrintAmt (#FNLine,#FNCol)
          if $CopyType = '2'
             let #FNCopy2 = #FnLine + 42
             print $PrintAmt (#FNCopy2,#FNCol)
          end-if
       end-if

      else
         move 'N' to $MoreFootnotes
      end-if

  end-while

  if #NoteCount > 1
     move '13' to $PrintNoteCode
  end-if

  if $XMLPublisher = 'Y'
     do Build-XML-Line('FootNote_Code', $PrintNoteCode, 'Y', #FNum, #FNum2, $UserFlag)
  else
     print $PrintNoteCode (#Row22,29)
     if $CopyType = '2'
        print $PrintNoteCode (#Row64,29)
     end-if
  end-if

  do Initialize-FormNotes-Array

end-procedure


begin-procedure Initialize-FormNotes-Array

  let #i = 0
  let $InitSpace = ' '
  let #InitNumber = 0

  while #i <= #max_i
   put $InitSpace #InitNumber $InitSpace $InitSpace $InitSpace #InitNumber
    into FormNotes(#i) Box_Num Box_Priority Box_Cd Text Box_Value Box_Amount

    add 1 to #i
  end-while

end-procedure


begin-procedure Initialize-Employee-Data

  move 0 to #EmpPensionAnnuity
  move 0 to #EmpLumpSumPayment
  move 0 to #EmpCommissions
  move 0 to #EmpIncomeTax
  move 0 to #EmpAnnuities
  move 0 to #EmpRetireAllow
  move 0 to #EmpOtherIncome
  move 0 to #EmpPatronageAlloc
  move 0 to #EmpPastPension
  move 0 to #EmpPensionAdj
  move 0 to #EmpCharityDonation
  move ' ' to $Box36Text
  move 0 to #EmpNonElgRetireAllow
  move 0 to #EmpRESPIncome
  move 0 to #EmpRESPAssistPay

end-procedure


begin-procedure Set-T4A-Row-Pointers

  let #Row05 = #StubPtr + 05
  let #Row06 = #StubPtr + 06
  let #Row10 = #StubPtr + 10
  let #Row16 = #StubPtr + 16
  let #Row21 = #StubPtr + 21
  let #Row22 = #StubPtr + 22
  let #Row26 = #StubPtr + 26
  let #Row27 = #StubPtr + 27
  let #Row28 = #StubPtr + 28
  let #Row29 = #StubPtr + 29
  let #Row30 = #StubPtr + 30
  let #Row31 = #StubPtr + 31
  let #Row32 = #StubPtr + 32
  let #Row33 = #StubPtr + 33
  let #Row34 = #StubPtr + 34
  let #Row35 = #StubPtr + 35
  let #Row36 = #StubPtr + 36

  if $CopyType = '2'
     let #Row47 = 47
     let #Row48 = 48
     let #Row52 = 52
     let #Row58 = 58
     let #Row63 = 63
     let #Row64 = 64
     let #Row68 = 68
     let #Row69 = 69
     let #Row70 = 70
     let #Row71 = 71
     let #Row72 = 72
     let #Row73 = 73
     let #Row74 = 74
     let #Row75 = 75
     let #Row76 = 76
     let #Row77 = 77
     let #Row78 = 78
  end-if

end-procedure


begin-procedure Insert-FormFeed

#ifndef MVS
#ifndef OS400
  encode '<27>&k2G' into $FormFeed
#else
  encode '<39>&k2G' into $FormFeed
#endif
#else
  encode '<39>&k2G' into $FormFeed
#endif

 print $FormFeed () code
 print ' ' (140,01)

end-procedure


begin-procedure Convert-Parameters

  let $FormType = $RC_CAN_YE.T4A_Form_Type

  if $FormType = 'X'
    let $XMLPublisher = 'Y'
  else
    let $XMLPublisher = 'N'
  end-if

  let $CopyType = $RC_CAN_YE.T4A_Copy_Type
  let $SelectEEs = $RC_CAN_YE.T4A_Processing_Flg

  if $SelectEEs = 'N' or $SelectEEs = 'R'
     display ' '
     display 'Print all originals or reissued T4A prior to 2010 is not allowed - Processing stopped'
     stop quiet
  end-if

  if $SelectEEs = 'S' or  $SelectEEs = 'E'
    do Read-EEs
  end-if

  let $ye_slip_process = ' '
  let $seq_number      = ' '

  evaluate $SelectEEs
  when = 'A'                    ! Amended slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''A'' '
    let $seq_number      = ')'
    break
  when = 'C'                    ! Cancelled slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''C'' '
    let $seq_number      = ')'
    break
  when = 'E'                    ! Reprint Amended/Cancelled/Reissued slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS IN (''A'', ''C'', ''N'') '
    let $seq_number      = ' AND SL1.TAXFORM_ID = SL.TAXFORM_ID AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    break
  when = 'S'                    ! Reprint Original slips
    let $ye_slip_process = ' AND SL.YE_SLIP_PROCESS = ''O'' '
    let $seq_number      = ' AND SL1.YE_SLIP_PROCESS = SL.YE_SLIP_PROCESS) '
    break
  end-evaluate

  if $SelectEEs = 'A' or $SelectEEs = 'C'
    let $Proc_Amend_Cancel_New = 'Y'
  else
    let $StatusOpen = 'Y'
  end-if


  if $RC_CAN_YE.T4A_Primary_Sort  = '1'
       let $SortInd = '1'
       let $SortSequence = 'SL.REPORTING_ID ASC,EE.COUNTRY ASC, ' ||
       'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'

  else

      if $RC_CAN_YE.T4A_Primary_Sort  = '2'
         let $Sort1 = 'SL.REPORTING_ID ASC'
         let $DispSort1 = 'Business Number ; '
      end-if

      if $RC_CAN_YE.T4A_Primary_Sort  = '3'
         let $Sort1 = 'SL.COMPANY ASC'
         let $DispSort1 = 'Company; '
      end-if

      if $RC_CAN_YE.T4A_Sec_Sort  = '1'
          let $Sort2 = 'EE.LOCATION ASC'
          let $DispSort2 = 'Location; '
      end-if

      if $RC_CAN_YE.T4A_Sec_Sort  = '2'
         let $Sort2 = 'EE.DEPTID ASC'
         let $DispSort2 = 'Department; '
      end-if

      if $RC_CAN_YE.T4A_Sec_Sort  = '3'
         let $Sort2 = 'EE.MAIL_DROP ASC'
         let $DispSort2 = 'Mail Drop; '
      end-if

      if $RC_CAN_YE.T4A_Sec_Sort  = '4'
          let $Sort2 = 'EE.POSTAL ASC'
          let $DispSort2 = 'Postal Code; '
      end-if

      if $RC_CAN_YE.T4A_Sec_Sort  = '5'
          let $Sort2 = 'N'
      end-if

      if $RC_CAN_YE.T4A_Third_Sort  = '1'
          let $Sort3 = 'EE.SLIP_SURNAME ASC, EE.SLIP_FIRST_NAME ASC, EE.EMPLID ASC'
          let $DispSort3 = 'Employee Name; Employee ID'
      end-if

      if $RC_CAN_YE.T4A_Third_Sort  = '2'
         let $Sort3 = 'EE.EMPLID ASC'
         let $DispSort3 = 'Employee ID'
      end-if

      if $RC_CAN_YE.T4A_Third_Sort  = '3'
         let $Sort3 = 'EE.SIN ASC'
         let $DispSort3 = 'Employee SIN'
      end-if

  if $Sort2 = 'N'
     let $SortSequence =  $Sort1 || ', ' ||  $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort3
  else
     let $SortSequence = $Sort1 || ', ' || $Sort2 || ', ' || $Sort3
     let $DisplaySeq = $DispSort1 || $DispSort2 || $DispSort3
  end-if

end-if

    if $RC_CAN_YE.T4A_Primary_Sort  = '2'
          move 'R' to $SortCode
   else
      if $RC_CAN_YE.T4A_Primary_Sort  = '3'
         move 'C' to $SortCode
      else
         move ' ' to $SortCode
      end-if
   end-if

end-procedure


begin-procedure Read-EEs

move 'AND EE.EMPLID in (''' to $E.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
CT.EMPLID

  move &CT.EMPLID     to $SelectedEmplID
  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_CTX910AP CT
WHERE CT.OPRID         = $Prcs_OprID
  AND CT.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

end-procedure


begin-procedure Check-Status

  move 'N' to $StatusOpen

begin-SELECT
CS.EMPLID

  move 'Y' to $StatusOpen

FROM PS_CAN_AMEND_T4A_S CS
WHERE CS.COMPANY         = &SL.COMPANY
  AND CS.EMPLID          = &SL.EMPLID
  AND CS.CALENDAR_YEAR   = &SL.CALENDAR_YEAR
  AND CS.SEQUENCE_NUMBER = &SL.SEQUENCE_NUMBER
  AND CS.WAGE_LOSS_PLAN  = &SL.WAGE_LOSS_PLAN
  AND CS.PROVINCE        = &SL.PROVINCE
  AND CS.CAN_YE_SLIP_SEQ = &SL.CAN_YE_SLIP_SEQ
  AND CS.AMEND_STATUS    = 'O'

end-SELECT

end-procedure


begin-procedure Close-Amend-Cancel-T4A

begin-SQL

  UPDATE PS_CAN_AMEND_T4A_S
  SET AMEND_STATUS       = 'C'
  WHERE COMPANY          = &SL.COMPANY
    AND EMPLID           = &SL.EMPLID
    AND CALENDAR_YEAR    = &SL.CALENDAR_YEAR
    AND SEQUENCE_NUMBER  = &SL.SEQUENCE_NUMBER
    AND WAGE_LOSS_PLAN   = &SL.WAGE_LOSS_PLAN
    AND PROVINCE         = &SL.PROVINCE
    AND CAN_YE_SLIP_SEQ  = &SL.CAN_YE_SLIP_SEQ

end-SQL

end-procedure


begin-procedure Get-XMLP-Definitions

  do Get-XML-URLID
  do Get-Report-Definitions

  move 'N'  to $RC_CAN_YE.Py_Ye_Rpt_Burst
  move 'N'  to $Py_Ye_Rpt_Burst
  if $OPT_SS.PY_YE_RPT_SS = 'Y'
     move $OPT_SS.REPORT_DEFN_ID to $Report_Defn_ID

!     do Check-Burst-Value
!     move $Py_Ye_Rpt_Burst  to $RC_CAN_YE.Py_Ye_Rpt_Burst

!     if $Py_Ye_Rpt_Burst <> 'Y'
!        move 'N' to $OPT_SS.PY_YE_RPT_SS
!        display 'No burst fieldname given for self-service report definition ' noline
!        display $OPT_SS.REPORT_DEFN_ID
!     end-if
  end-if

  move 'N'  to $Py_Ye_Rpt_Burst

  if #OPT_BLK.PY_RPT_BATCH_SIZE <> 0
     move $OPT_BLK.REPORT_DEFN_ID to $Report_Defn_ID
     do Check-Burst-Value

     if $Py_Ye_Rpt_Burst <> 'Y'
        display 'No burst fieldname given for batched report definition ' noline
        display $OPT_BLK.REPORT_DEFN_ID
     end-if
  end-if

end-procedure

begin-procedure Get-XML-URLID

! fetch XML data files URLID

  move ' '  to $OPT_XML.PY_YE_XMLURLID

begin-SELECT
OPT_XML.PY_YE_XMLURLID

  move &OPT_XML.PY_YE_XMLURLID      to $OPT_XML.PY_YE_XMLURLID

  exit-SELECT

FROM PS_PY_YE_OPT_TAX OPT_XML
WHERE OPT_XML.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_XML.TAXFORM_ID      = 'A'
end-SELECT

  if $OPT_XML.PY_YE_XMLURLID = ' '
     display 'XML data file URLID is missing.'
  end-if

end-procedure

begin-procedure Get-Report-Definitions

! fetch definitions for self-service

  move 'N'  to $OPT_SS.PY_YE_RPT_SS
  move ' '  to $OPT_SS.REPORT_DEFN_ID
  move ' '  to $OPT_SS.TMPLDEFN_ID

begin-SELECT
OPT_SS.PY_YE_RPT_SS
OPT_SS.REPORT_DEFN_ID
OPT_SS.TMPLDEFN_ID
OPT_SS.PY_RPT_BATCH_SIZE

  move &OPT_SS.PY_YE_RPT_SS      to $OPT_SS.PY_YE_RPT_SS
  move &OPT_SS.REPORT_DEFN_ID    to $OPT_SS.REPORT_DEFN_ID
  move &OPT_SS.TMPLDEFN_ID       to $OPT_SS.TMPLDEFN_ID
!  move &OPT_SS.PY_RPT_BATCH_SIZE to #OPT_SS.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_SS
WHERE OPT_SS.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_SS.TAXFORM_ID      = 'A'
  AND OPT_SS.PY_W2_COPY_TYPE = $RC_CAN_YE.T4A_Copy_Type
  AND OPT_SS.PY_YE_RPT_SS    = 'Y'
end-SELECT

! fetch definitions for bulk report

  move ' '  to $OPT_BLK.REPORT_DEFN_ID
  move ' '  to $OPT_BLK.TMPLDEFN_ID
  move 0    to #OPT_BLK.PY_RPT_BATCH_SIZE

begin-SELECT
OPT_BLK.REPORT_DEFN_ID
OPT_BLK.TMPLDEFN_ID
OPT_BLK.PY_RPT_BATCH_SIZE

  move &OPT_BLK.REPORT_DEFN_ID    to $OPT_BLK.REPORT_DEFN_ID
  move &OPT_BLK.TMPLDEFN_ID       to $OPT_BLK.TMPLDEFN_ID
  move &OPT_BLK.PY_RPT_BATCH_SIZE to #OPT_BLK.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_BLK
WHERE OPT_BLK.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_BLK.TAXFORM_ID      = 'A'
  AND OPT_BLK.PY_W2_COPY_TYPE = $RC_CAN_YE.T4A_Copy_Type
  AND OPT_BLK.PY_YE_RPT_SS    <> 'Y'
end-SELECT

end-procedure

begin-procedure Check-Burst-Value
  let $Py_Ye_Rpt_Burst = 'N'
begin-SELECT
burst.BURST_FIELDNAME

  if rtrim(&burst.BURST_FIELDNAME, ' ') = ''
     let $Py_Ye_Rpt_Burst = 'N'
  else
     let $Py_Ye_Rpt_Burst = 'Y'
  end-if

  exit-SELECT

FROM PSXPRPTDEFN burst
WHERE burst.REPORT_DEFN_ID = $Report_Defn_ID
end-SELECT
end-procedure


begin-procedure Clear-Guide-Temp
  let $err-statement = 'Clear-Guide-Temp, DELETE PS_PY_SS_CAN_TMP'
begin-SQL on-error=Sql-Statement-Error
DELETE FROM PS_PY_SS_CAN_TMP
WHERE PY_YE_UPD_ACTION <> 'F'
AND TAXFORM_ID = 'A'
end-SQL
end-procedure


begin-procedure Insert-Guide-Data

  let $updateAction = 'I'
  let $NotifyFlag = 'N'
  do Get-Guide-Seqnum

  let $err-statement = 'Insert-Guide-Data, INSERT PS_PY_SS_CAN_TMP'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_SS_CAN_TMP
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,EMPLID
,PY_TAX_YEAR
,COMPANY
,TAXFORM_ID
,SEQUENCE_NUMBER
,WAGE_LOSS_PLAN
,PROVINCE
,PY_YE_FORM_SEQNUM
,YE_FORM_ISSUE_DT
,YE_FORM_VIEWING_DT
,ATTACHSYSFILENAME
,ATTACHUSERFILE
,PY_YE_FILEURLID
,YE_SLIP_PROCESS
,PY_YE_REPORT_URL
,PY_YE_BURST_ID
,PROCESS_INSTANCE
,REPORT_DEFN_ID
,BURST_FIELDNAME
,PY_YE_NOTIFY_FLG
,PY_YE_UPD_ACTION
,PY_SLIP_FINAL_PRT)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'CTX910PP'
,#prcs_job_instance
,&SL.EMPLID
,&SL.CALENDAR_YEAR
,&SL.COMPANY
,'A'      ! taxform id
,&SL.SEQUENCE_NUMBER
,&SL.WAGE_LOSS_PLAN
,' '                ! province
,0                  ! form sequence number
,$IssueDate
,$ViewingDate1             ! viewing date
,$FName                    ! attachsysfilename
,$FName                    ! attachuserfile
,$OPT_XML.PY_YE_XMLURLID   ! urlid
,&SL.YE_SLIP_PROCESS
,' '                ! report url
,$BurstValue
,0
,$OPT_SS.REPORT_DEFN_ID
,'BURST_VALUE'
,$NotifyFlag
,$updateAction
,$Slip_Final_Print)
end-SQL

end-procedure

begin-procedure Insert-YE-Runcontrol
  let $err-statement = 'Insert-YE-Runcontrol, INSERT PS_PY_YE_SLIP_RCTL'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_YE_SLIP_RCTL
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,REPORT_DEFN_ID
,TMPLDEFN_ID
,PY_YE_SOURCEFILE
,PY_YE_SOURCELOC
,PY_YE_SRC_FILENAME
,PY_YE_OSPLATFORM
,FORM_ID
,T4_FINAL_PRINT
,T4A_FINAL_PRINT
,T4_COPY_TYPE
,PY_YE_RPT_BURST
,PY_YE_RPT_SS
,PY_RPT_DEFN_ID_SS
,PY_RPT_TMPL_ID_SS
,TAXFORM_ID
,PY_YE_SOURCEFILE2
,PY_YE_SRC_FILENAM2
,PY_SLIP_FINAL_PRT
,PY_YE_FILE_COUNT
,PY_YE_XMLURLID
,PY_TAX_YEAR
)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'CTX910PP'
,#prcs_job_instance
,$OPT_BLK.REPORT_DEFN_ID
,$OPT_BLK.TMPLDEFN_ID
,$sourceFile2
,$sourceLocation2
,$sourceFileName2
,$yeOS
,'XMLP'
,$RC_CAN_YE.T4_Final_Print
,$RC_CAN_YE.T4A_Final_print
,$RC_CAN_YE.T4A_Copy_Type
,$RC_CAN_YE.Py_Ye_Rpt_Burst
,$OPT_SS.PY_YE_RPT_SS
,$OPT_SS.REPORT_DEFN_ID
,$OPT_SS.TMPLDEFN_ID
,'A'
,$sourceFile2
,$sourceFileName2
,$Slip_Final_Print
,0
,$OPT_XML.PY_YE_XMLURLID
,&TX.Balance_Year
)
end-SQL
end-procedure

begin-procedure Get-Setup-Viewing-Date
  let $yeopt.YE_FORM_VIEWING_DT = ''
  let $yeopt.PY_YE_SS_NOTE_DT   = ''

  let $Year4 = '1'
  do Format-DateTime('20491231', $ViewingDate, {DEFCMP},'','native')

begin-SELECT
yeopt.YE_FORM_VIEWING_DT
yeopt.PY_YE_SS_NOTE_DT

  let $yeopt.YE_FORM_VIEWING_DT = &yeopt.YE_FORM_VIEWING_DT
  let $yeopt.PY_YE_SS_NOTE_DT   = &yeopt.PY_YE_SS_NOTE_DT

  if $yeopt.YE_FORM_VIEWING_DT <> '' and
     $yeopt.YE_FORM_VIEWING_DT >= $IssueDate

     let $ViewingDate = $yeopt.YE_FORM_VIEWING_DT

  else
     if $yeopt.YE_FORM_VIEWING_DT <> '' and
        $yeopt.YE_FORM_VIEWING_DT < $IssueDate

        let $ViewingDate = $IssueDate

     end-if
  end-if

from PS_PY_YEOPT_TX_CAN yeopt
WHERE yeopt.COMPANY     = &SL.COMPANY
  AND yeopt.PY_TAX_YEAR = &SL.CALENDAR_YEAR
  AND yeopt.TAXFORM_ID  = 'A'
end-SELECT
end-procedure

begin-procedure Get-Guide-Seqnum
  let #gde.PY_YE_FORM_SEQNUM =  0
  let $ViewingDate1 = $ViewingDate

begin-SELECT
gde.PY_YE_FORM_SEQNUM
gde.YE_FORM_VIEWING_DT
gde.PY_YE_NOTIFY_FLG

  let #gde.PY_YE_FORM_SEQNUM = &gde.PY_YE_FORM_SEQNUM
  let $NotifyFlag = &gde.PY_YE_NOTIFY_FLG
  let $ViewingDate1 = &gde.YE_FORM_VIEWING_DT
  let $updateAction = 'C'

  exit-SELECT

FROM PS_PY_SS_CAN_GDE gde
WHERE gde.EMPLID          = &SL.EMPLID
  AND gde.PY_TAX_YEAR     = &SL.Calendar_Year
  AND gde.COMPANY         = &SL.COMPANY
  AND gde.TAXFORM_ID      = 'A'
  AND gde.SEQUENCE_NUMBER = &SL.SEQUENCE_NUMBER
  AND gde.WAGE_LOSS_PLAN  = &SL.WAGE_LOSS_PLAN
ORDER BY gde.PY_YE_FORM_SEQNUM DESC
end-SELECT

  if $updateAction <> 'C'
     let #gde.PY_YE_FORM_SEQNUM = #gde.PY_YE_FORM_SEQNUM + 1
  end-if

! It is possible that an Original is run more than once. Therefore,
! the forms must not be viewable until released.
  if $updateAction = 'C' and $NotifyFlag = 'N'

     let $ViewingDate1 = $ViewingDate
  end-if

end-procedure

begin-procedure Capture-OS
  let $yeOS = ' '

  #ifdef NT
     let $yeOS = 'NT'
  #end-if

  #ifdef MVS
     let $yeOS = 'MVS'
  #end-if

  #ifdef UNIX
     let $yeOS = 'UNIX'
  #end-if
end-procedure

begin-procedure Get-SS-Consent
  let $Consent = 'N'
begin-SELECT
CONS.YE_CONSENT_CURRENT

  move &CONS.YE_CONSENT_CURRENT to $Consent

FROM PS_PY_YE_CONS_CAN CONS
WHERE CONS.EMPLID = &SL.EMPLID
  AND CONS.LASTUPDDTTM =
      (SELECT MAX(CONS1.LASTUPDDTTM)
       FROM PS_PY_YE_CONS_CAN CONS1
       WHERE CONS1.EMPLID = CONS.EMPLID)
end-SELECT

  if $Consent = 'C' and $RC_CAN_YE.T4A_COPY_TYPE = '2'
     let $UserFlag = 'N'
  else
     let $UserFlag = 'Y'
  end-if
end-procedure


!----------------------------------
begin-procedure Sql-Statement-Error
!----------------------------------
  show $err-statement
  show ' Error : ' $sql-error
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getdptnm.sqc'  !Get-Department-Name
#Include 'ctxflt4a.sqc'  !T4A Form Flash procedures
#ifdef PRCSSCHD
#Include 'ctxrctl1.sqc' ! Get-Can-Tax YE Report Parameters
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
#Include 'pyxmlbld.sqc'  !Routines for XML formatting
#endif
