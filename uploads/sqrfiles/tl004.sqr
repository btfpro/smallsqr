!***********************************************************************
!   TL004:  Time & Labor Scheduled Hours Report                        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/06:03:55:11                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  688700                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting
#include 'setup32.sqc'  !Printer and page-size initialization, SETUP31 and
                        !  SETUP32 SQCs to support HTML, HP PCL, PostScript,
                        !  PDF and Window in addition to Line Printer as
                        !  the output type.


!***********************************************************************
!                                                                      *
! begin-report                                                         *                                                         *
!                                                                      *
! Called By: TL_SCHHRSRPT (App Engine)                                 *
! Calls:     Init-Processing                                           *
!            Get-Values                                                *
!            Process-Main                                              *
!            Reset                                                     *
!            Print-ReportCount                                         *
!            End-Report                                                *
!                                                                      *
!***********************************************************************

begin-report


#ifdef debugy
        show 'INIT-PROCESSING'
#end-if
        do Init-Processing


#ifdef debugy
        show 'GET-VALUES'
#end-if
        do Get-Values


#ifdef debugy
        show 'PROCESS-MAIN'
#end-if
        do Process-Main


#ifdef debugy
        show 'RESET'
#end-if
        do Reset                        ! called from reset1.sqc


#ifdef debugq
        show 'PRINT-REPORTCOUNT'
        do Print-ReportCount
#end-if


#ifdef debugy
        show 'END-REPORT'
#end-if
        do Update-Prcs-Run-Status       ! called from prcsapi.sqc to update 
                                        ! the Process Monitor to Success
        
end-report



!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Define-Prcs-Vars        - prcsapi.sqc (prcsdef.sqc)    *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Init-Report                                            *
!               Init-Number             - number.sqc                   *
!               Get-Language-Codes      - prcslng.sqc                  *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing


#ifdef debugy
    show 'IN PROCEDURE INIT-PROCESSING'
#end-if


#ifdef debugy
        show 'INIT-DATETIME'
#end-if
        do Init-Datetime                ! called from datetime.sqc


#ifdef debugy
        show 'GET-CURRENT-DATETIME'
#end-if
        do Get-Current-Datetime         ! called from prcsapi.sqc (curdttim.sqc)


#ifdef debugy
        show 'DEFINE-PRCS-VARS'
#end-if
        do Define-Prcs-Vars             ! called from prcsapi.sqc (prcsdef.sqc)


#ifdef debugy
        show 'GET-RUN-CONTROL-PARMS'
#end-if
        do Get-Run-Control-Parms        ! In prcsapi.sqc


#ifdef debugy
        show 'INIT-REPORT'
#end-if
        do Init-Report


#ifdef debugy
        show 'INIT-NUMBER'
#end-if
        do Init-Number                  ! called from number.sqc


#ifdef debugy
        show 'GET-LANGUAGE-CODES'
#end-if
        do Get-Language-Codes           ! called from prcslng.sqc


end-procedure !Init-Processing


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By: Init-Processing                                           *
! Calls:     Init_Report_Translation    -   sqrtrans.sqc               *
!            Append_Report_Translation  -   sqrtrans.sqc               *
!            Define-Prcs-Vars                                          *
!            Get_Field_Information                                     *
!            Format-DateTime                                           *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header, date formatting, time           *
!               formatting, translations & strings table retrievals.   *
!                                                                      *
!***********************************************************************

begin-procedure Init-Report


#ifdef debugy
    show 'IN PROCEDURE INIT-REPORT'
#end-if

!***********************************************************************
!                                                                      *
! Column definitions. Some fields are lined up vertically with other   *
! fields on the report. The first occurence of a column location is    *
! defined. After that, fields that occur in the same column use the    *
! first field's column definition. Field labels end in _lbl. Other     *
! column definitions are for the field values.                         *
!                                                                      *
!***********************************************************************


    #define Col_EMPLID                 1
    #define Col_Date_lbl               4 
    #define Col_EmpName               17
    #define Col_Elap_Work_Hours_graph 20
    #define Col_Elapsed_Schedule_lbl  21
    #define Col_Elap_Work_Hours_lbl   24
    #define Col_Jobdescr              47
    #define Col_Punch_Type_lbl        52
    #define Col_Punch_Schedule_lbl    55
    #define Col_Punch_Time            66
    #define Col_Time_lbl              68
    #define Col_Timezone              74
    #define Col_Schedule_In_lbl       83
    #define Col_Schedule_In           87
    #define Col_Schedule_Out_lbl      99
    #define Col_Schedule_Out         104
    #define Col_Flex_Schedule_lbl    115
    #define Col_Core_Start_lbl       116
    #define Col_Core_Start           119
    #define Col_Core_End_lbl         130
    #define Col_Core_End             131
    #define Col_Work_Hours_lbl       142     
    #define Col_Flex_Work_Hours_lbl  145
       

!***********************************************************************
!                                                                      *
! Translations procedures & Strings Table retrievals.                  *
!                                                                      *
!***********************************************************************


    do Init_Report_Translation ($ReportID,$curr_language_cd)
    do Append_Report_Translation ('TLMAIN')

   do Get_Field_Information ('TLMAIN','SCHEDULES_FROM',      $Schedules_From_lbl,     #DW)
   do Get_Field_Information ('TLMAIN','THROUGH',             $Through_lbl,            #DW)
   do Get_Field_Information ('TLMAIN','ELAPSED_SCHEDULE',    $Elapsed_Schedule_lbl,   #DW)
   do Get_Field_Information ('TLMAIN','PUNCH_SCHEDULE',      $Punch_Schedule_lbl,     #DW)
   do Get_Field_Information ('TLMAIN','FLEX_SCHEDULE',       $Flex_Schedule_lbl,      #DW)
   do Get_Field_Information ('TLMAIN','DATE',                $Date_lbl,               #DW)
   do Get_Field_Information ('TLMAIN','WORK_HOURS',          $Work_Hours_lbl,         #DW)
   do Get_Field_Information ('TLMAIN','PUNCH_TYPE',          $Punch_Type_lbl,         #DW)
   do Get_Field_Information ('TLMAIN','TIME',                $Time_lbl,               #DW)
   do Get_Field_Information ('TLMAIN','SCHEDULE_IN',         $Schedule_In_lbl,        #DW)
   do Get_Field_Information ('TLMAIN','SCHEDULE_OUT',        $Schedule_Out_lbl,       #DW)
   do Get_Field_Information ('TLMAIN','CORE_START',          $Core_Start_lbl,         #DW)
   do Get_Field_Information ('TLMAIN','CORE_END',            $Core_End_lbl,           #DW)
   do Get_Field_Information ('TLMAIN','SCHED_HRS_RPT',       $Sched_Hrs_Rpt_lbl,      #DW)
   do Get_Field_Information ('TLMAIN','NO_ROWS_FOUND',       $No_Rows_Found_lbl,      #DW)
   do Get_Field_Information ('TLMAIN','OFFDAY',              $OFFDAY,                 #DW)
    

!***********************************************************************
!                                                                      *
! Dates:   All of Europe uses date format DD/MM/YYYY                   *
!          The US uses date format of MM/DD/YYYY                       *
!                                                                      *
! Numbers: The U.S. and the U.K. use NN,NNN.NN                         *
!          The rest of Europe uses NN.NNN,NN                           *
!                                                                      *
!***********************************************************************

    if $curr_language_cd      = 'ENG'
        let $ReportDateType   = '0'             ! resolved in datetime.sqc
    else
        let $ReportDateType   = '1'
    end-if

    if $curr_language_cd = 'ENG' or $curr_language_cd = 'INE'
        let $ReportSDecimal   = '.'
        let $ReportSThousand  = ','
    else
        let $ReportSDecimal   = ','             ! resolved in number.sqc
        let $ReportSThousand  = '.'             ! resolved in number.sqc
    end-if


!***********************************************************************
!                                                                      *
! Initialize time formatting.                                          *
!                                                                      *
!***********************************************************************

    let $_ReportTime24 = '0'


!***********************************************************************
!                                                                      *
! Initialize date formatting.                                          *
!                                                                      *
!***********************************************************************

    let $Date_Init = '1900-01-01 17:00:00.000'

        #ifdef ORACLE
            let $Date_Init = '01-NOV-1999 10:00:00 AM'
        #end-if

    do Format-DateTime($Date_Init, $out999, {DEFDATE}, '', '')

#ifdef debugy
        show '$Date_Init   ' noline
        show $Date_Init
        show 'datetime     ' noline
        show $out999
#end-if


!***********************************************************************
!                                                                      *
! Report variables.                                                    *
!                                                                      *
!***********************************************************************


    let $ReportID               = 'TL004'
    let $ReportTitle            = $Sched_Hrs_Rpt_lbl
    let #Maxlines               = 56
    let #Records_Found          = 0
    let $Employee_FirstTimeThru = 'Y'

end-procedure !Init-Report


!***************************
begin-heading 9
!***************************

#include 'stdhdgtr.sqc'

#ifdef debugy
        show 'BEGIN-HEADING'
#end-if


    print $Schedules_From_lbl    (,{Col_EMPLID})
    print $HdgFromDt             (,+2)
    print $Through_lbl           (,+3)
    print $HdgThruDt             (,+2)


end-heading


!***********************************************************************
!                                                                      *
! Get-Values                                                           *
!                                                                      *
!                                                                      *
! Called By: begin-report                                              *
! Calls:     Ask-Values         -   this program                       *
!            Select-Parameters  -   tlrnctl4.sqc                       *
!                                                                      *
! Description:  If process instance blank, prompt user for input       *
!               If populated, get values from run control              *
!               Format dates to print in header                        *
!                                                                      *
!***********************************************************************

begin-procedure Get-Values


#ifdef debugy
    show 'IN PROCEDURE GET-VALUES'
#end-if


    if $prcs_process_instance = ''
        do Ask-Values
    else
        do Select-Parameters
    end-if



#ifdef debugz
    display 'FromDate from run control:             ' noline
    display $FromDate
    display 'ThruDate from run control:             ' noline
    display $ThruDate
    display 'Process_Instance from run control:             ' noline
    display $Process_Instance
#end-if



    do Format-DateTime($FromDate,$HdgFromDt,{DEFDATE}, '', '')
    do Format-DateTime($ThruDate,$HdgThruDt,{DEFDATE}, '', '')


#ifdef debugz
    display 'FromDate to print in header:      ' noline
    display $HdgFromDt
    display 'ThruDate to print in header:      ' noline
    display $HdgThruDt
#end-if


end-procedure !Get-Values


!***********************************************************************
!                                                                      *
! Ask-Values                                                           *
!                                                                      *
!                                                                      *
! Called By: Get-Values                                                *
! Calls:     none                                                      *
!                                                                      *
! Description: Prompt user to input values                             *
!                                                                      *
!***********************************************************************

begin-procedure Ask-Values


#ifdef debugy
    show 'IN PROCEDURE ASK-VALUES'
#end-if


    input $FromDate         'Enter from date (format 01-01-1998)'      TYPE=date  maxlen=11
    input $ThruDate         'Enter through date (format 01-02-1998)'   TYPE=date  maxlen=11

end-procedure !Ask-Values

!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By: begin-report                                              *
! Calls:     Select-Schedules                                          *
!                                                                      *
! Description:  Calls Procedure to select data from SCH_ADHOC_RPT.     *
!                                                                      *
!***********************************************************************

begin-procedure Process-Main


#ifdef debugy
    show 'IN PROCEDURE PROCESS-MAIN'
#end-if
   
    #ifdef ORACLE
       do Select-Schedules-ORA
    #else
       do Select-Schedules
    #end-if
    if #Records_Found = 0
       do Print-Employee-Header
       print $No_Rows_Found_lbl            (+3,{Col_EMPLID})
    end-if
    do Delete-Rows
    
end-procedure !Process-Main



!***********************************************************************
!                                                                      *
! Select-Schedules                                                     *
!                                                                      *
!                                                                      *
! Called By: Process-Main                                              *
! Calls:     Get-JobCodeDescr-Rel-Lang                                 *
!            Print-Schedules                                           *
!                                                                      *
! Description:  Select employees and associated information based on   *
!               dates entered in run control.  For Jobdescr, select    *
!               descriptions from related-language tables.  Call new   *
!               page on employee or employee record change.            *
!                                                                      *
!***********************************************************************


begin-procedure Select-Schedules


#ifdef debugy
    show 'IN PROCEDURE Select-Schedules'
#end-if


begin-SELECT 

#ifdef debugy
    show 'IN SELECT - Select-Schedules'
#end-if

SCHADHOC.EMPLID               &SCHADHOC.EMPLID2
SCHADHOC.EMPL_RCD             &SCHADHOC.EMPL_RCD2
PERSDATA1.NAME_PSFORMAT       &PERSDATA1.NAME2
JOB1.JOBCODE                  &JOB1.JOBCODE2
JOB1.SETID_JOBCODE            &JOB1.SETID_JOBCODE2
JOBCODE1.DESCR                &JOBCODE1.DESCR2
SCHADHOC.SCH_TYPE             &SCHADHOC.SCH_TYPE2
SCHADHOC.WRKDAY_ID            &SCHADHOC.WRKDAY_ID2
SCHADHOC.DUR                  &SCHADHOC.DUR2
SCHADHOC.TL_QUANTITY          &SCHADHOC.ELPWRKHRS2
SCHADHOC.PUNCH_TYPE           &SCHADHOC.PUNCH_TYPE2
{DateTimeOut-Prefix}SCHADHOC.PUNCH_DTTM{DateTimeOut-Suffix}       &SCHADHOC.PUNCH_DTTM2  
{Time24Out-Prefix}SCHADHOC.FLEX_START_TIME{Time24Out-Suffix}      &SCHADHOC.CORE_START2
{Time24Out-Prefix}SCHADHOC.FLEX_END_TIME{Time24Out-Suffix}        &SCHADHOC.CORE_END2
{Time24Out-Prefix}SCHADHOC.START_TIME{Time24Out-Suffix}           &SCHADHOC.FLEX_SCHED_IN2
{Time24Out-Prefix}SCHADHOC.END_TIME{Time24Out-Suffix}             &SCHADHOC.FLEX_SCHED_OUT2
SCHADHOC.SCHED_HRS            &SCHADHOC.WORK_HOURS2
SCHADHOC.OFFDAY_IND           &SCHADHOC.OFFDAY_IND2
SCHADHOC.TIMEZONE             &SCHADHOC.TIMEZONE2


    let $Main_Select_Emplid = &SCHADHOC.EMPLID2
    let $EmpRec1            = &SCHADHOC.EMPL_RCD2
    let $Main_Select_EmpRec = substr($EmpRec1, 1, 1)
    let $Name               = &PERSDATA1.NAME2
    let $JobCode            = &JOB1.JOBCODE2
    let $Setid_JobCode      = &JOB1.SETID_JOBCODE2
    let $Job_Descr          = &JOBCODE1.DESCR2
    let $Sch_Type           = rtrim(&SCHADHOC.SCH_TYPE2,' ')
    let $Wrkday_ID          = rtrim(&SCHADHOC.WRKDAY_ID2,' ')
    let $OffDay_Ind         = rtrim(&SCHADHOC.OFFDAY_IND2,' ')
    let #Qty                = &SCHADHOC.ELPWRKHRS2
    let #work_hours         = &SCHADHOC.WORK_HOURS2

    if $curr_language_cd <> $Psoptions_Language_Cd
        let $Retrieve_Lang_JobCode_Descr = &JOBCODE1.DESCR2
        do Get-JobCodeDescr-Rel-Lang
    end-if

    do Format-DateTime(&SCHADHOC.DUR2, $out, {DEFDATE}, '', '')
    let $DUR = $out
    
    let $Punchtype  = rtrim(&SCHADHOC.PUNCH_TYPE2,' ')
    let $FieldName  = 'PUNCH_TYPE'              ! Input into Read-Translate-Table
    let $FieldValue = $Punchtype                ! Input into Read-Translate-Table
    do Read-Translate-Table                     ! Returns XlatShortName, XlatLongName
    let $Punch_Type             = $XlatShortName
    
    let $Punch_DTTM_In          = &SCHADHOC.PUNCH_DTTM2   
    do Format-DateTime($Punch_DTTM_In, $Formatted_Punch_DTTM, {DEFDATE}, '', '')
    let #lenght = length($Punch_DTTM_In)
    let $Punch_Time             = substr($Punch_DTTM_In, 12, 5)
    let $Timezone               = &SCHADHOC.TIMEZONE2

    do FormatTime ($Punch_Time, $out_time)
    let $Punch_Time = $out_time
    let $flex_start_time        = &SCHADHOC.FLEX_SCHED_IN2  
    let $flex_start_time        = substr($flex_start_time, 1, 5)
    if $flex_start_time <> ''
       do FormatTime ($flex_start_time, $out_time)
       let $flex_start_time = $out_time
    end-if

    let $flex_end_time          = &SCHADHOC.FLEX_SCHED_OUT2   
    let $flex_end_time          = substr($flex_end_time, 1, 5)
    if $flex_end_time <> ''
       do FormatTime ($flex_end_time, $out_time)
       let $flex_end_time = $out_time
    end-if
    let $start_time             = &SCHADHOC.CORE_START2   
    let $start_time             = substr($start_time, 1, 5)
    if $start_time <> ''
       do FormatTime ($start_time, $out_time)
       let $start_time = $out_time
    end-if
    let $end_time               = &SCHADHOC.CORE_END2   
    let $end_time               = substr($end_time, 1, 5)
    if $end_time <> ''
       do FormatTime ($end_time, $out_time)
       let $end_time = $out_time
    end-if

 
#ifdef debugy
    show '$Punchtype             ' noline
    show  $Punchtype
    show '$Wrkday_ID             ' noline
    show  $Wrkday_ID
    show '&SCHADHOC.PUNCH_DTTM2  ' noline
    show  &SCHADHOC.PUNCH_DTTM2
    show '$Punch_DTTM_In         ' noline
    show  $Punch_DTTM_In
    show '$Formatted_Punch_DTTM  ' noline
    show  $Formatted_Punch_DTTM
    show '#lenght                ' noline
    show  #lenght
#end-if


    let #Printed_EE_Header = 0     ! Reset for next EE 

    if $Employee_FirstTimeThru = 'N'
        if $Main_Select_Emplid <> $Prior_Main_Emplid
            new-page
            let #Printed_EE_Header = 0
        else
            let #Printed_EE_Header = 1
        end-if
    end-if

    if $Employee_FirstTimeThru = 'N'
        if $Main_Select_Emplid = $Prior_Main_Emplid
            if $Main_Select_EmpRec <> $Prior_Main_EmpRec
                new-page
                let #Printed_EE_Header = 0
        else
            let #Printed_EE_Header = 1
            end-if
        end-if
    end-if

    let $Employee_FirstTimeThru = 'N'
    let $Prior_Main_Emplid = $Main_Select_Emplid
    let $Prior_Main_EmpRec = $Main_Select_EmpRec
    let #Records_Found = 1
    
    do Print-Schedules

   FROM PS_SCH_ADHOC_RPT SCHADHOC,
        PS_PERSON_NAME PERSDATA1,
        PS_JOB           JOB1,
        PS_JOBCODE_TBL   JOBCODE1
 
   WHERE SCHADHOC.PROCESS_INSTANCE = #Process_Instance
     AND SCHADHOC.DUR     BETWEEN $FromDate AND $ThruDate
     AND PERSDATA1.EMPLID = SCHADHOC.EMPLID
     AND JOB1.EMPLID      = SCHADHOC.EMPLID
     AND JOB1.EMPL_RCD    = SCHADHOC.EMPL_RCD
     AND JOB1.EFFDT       = (SELECT MAX(EFFDT) FROM PS_JOB
                             WHERE EMPLID     = SCHADHOC.EMPLID
                               AND EMPL_RCD   = SCHADHOC.EMPL_RCD
                               AND EFFDT     <= $ThruDate)
     AND JOB1.EFFSEQ      = (SELECT MAX(EFFSEQ) FROM PS_JOB
                             WHERE EMPLID     = SCHADHOC.EMPLID
                               AND EMPL_RCD   = SCHADHOC.EMPL_RCD
                               AND EFFDT      = JOB1.EFFDT)
     AND JOBCODE1.SETID   = JOB1.SETID_JOBCODE
     AND JOBCODE1.JOBCODE = JOB1.JOBCODE
     AND JOBCODE1.EFFDT   = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
                             WHERE SETID      = JOB1.SETID_JOBCODE
                               AND JOBCODE    = JOB1.JOBCODE
                               AND EFFDT     <= $ThruDate
                               AND EFF_STATUS = 'A')
 
   ORDER BY PERSDATA1.LAST_NAME_SRCH, PERSDATA1.FIRST_NAME_SRCH, SCHADHOC.EMPLID, SCHADHOC.EMPL_RCD, SCHADHOC.DUR, SCHADHOC.PUNCH_DTTM


end-SELECT


end-procedure !Select-Schedules



!***********************************************************************
!                                                                      *
! Select-Schedules-ORA                                                 *
!                                                                      *
!                                                                      *
! Called By: Process-Main                                              *
! Calls:     Get-JobCodeDescr-Rel-Lang                                 *
!            Print-Schedules                                           *
!                                                                      *
! Description:  Select employees and associated information based on   *
!               dates entered in run control.  For Jobdescr, select    *
!               descriptions from related-language tables.  Call new   *
!               page on employee or employee record change.            *
!                                                                      *
!***********************************************************************

#ifdef Oracle
begin-procedure Select-Schedules-ORA


begin-SELECT 

SCHADHOC.EMPLID               &SCHADHOC.EMPLID
SCHADHOC.EMPL_RCD             &SCHADHOC.EMPL_RCD
PERSDATA1.NAME_PSFORMAT       &PERSDATA1.NAME
JOB1.JOBCODE                  &JOB1.JOBCODE
JOB1.SETID_JOBCODE            &JOB1.SETID_JOBCODE
JOBCODE1.DESCR                &JOBCODE1.DESCR
SCHADHOC.SCH_TYPE             &SCHADHOC.SCH_TYPE
SCHADHOC.WRKDAY_ID            &SCHADHOC.WRKDAY_ID
SCHADHOC.DUR                  &SCHADHOC.DUR
SCHADHOC.TL_QUANTITY          &SCHADHOC.ELPWRKHRS
SCHADHOC.PUNCH_TYPE           &SCHADHOC.PUNCH_TYPE
SCHADHOC.OFFDAY_IND           &SCHADHOC.OFFDAY_IND
TO_CHAR(SCHADHOC.PUNCH_DTTM,'DD-MON-YYYY_HH24:MI:SS_AM')       &SCHADHOC.PUNCH_DTTM  
TO_CHAR(SCHADHOC.FLEX_START_TIME,'DD-MON-YYYY_HH24:MI:SS_AM')  &SCHADHOC.CORE_START
TO_CHAR(SCHADHOC.FLEX_END_TIME,'DD-MON-YYYY_HH24:MI:SS_AM')    &SCHADHOC.CORE_END
TO_CHAR(SCHADHOC.START_TIME,'DD-MON-YYYY_HH24:MI:SS_AM')       &SCHADHOC.FLEX_SCHED_IN
TO_CHAR(SCHADHOC.END_TIME,'DD-MON-YYYY_HH24:MI:SS_AM')         &SCHADHOC.FLEX_SCHED_OUT
SCHADHOC.SCHED_HRS            &SCHADHOC.WORK_HOURS
SCHADHOC.TIMEZONE             &SCHADHOC.TIMEZONE


    let $Main_Select_Emplid = &SCHADHOC.EMPLID
    let $EmpRec1            = &SCHADHOC.EMPL_RCD
    let $Main_Select_EmpRec = substr($EmpRec1, 1, 1)
    let $Name               = &PERSDATA1.NAME
    let $JobCode            = &JOB1.JOBCODE
    let $Setid_JobCode      = &JOB1.SETID_JOBCODE
    let $Job_Descr          = &JOBCODE1.DESCR
    let $Sch_Type           = rtrim(&SCHADHOC.SCH_TYPE,' ')
    let $Wrkday_ID          = rtrim(&SCHADHOC.WRKDAY_ID,' ')
    let $OffDay_Ind         = rtrim(&SCHADHOC.OFFDAY_IND,' ')
    let #Qty                = &SCHADHOC.ELPWRKHRS
    let #work_hours         = &SCHADHOC.WORK_HOURS

    if $curr_language_cd <> $Psoptions_Language_Cd
        let $Retrieve_Lang_JobCode_Descr = &JOBCODE1.DESCR
        do Get-JobCodeDescr-Rel-Lang
    end-if

    do Format-DateTime(&SCHADHOC.DUR, $out, {DEFDATE}, '', '')
    let $DUR = $out
    
    let $Punchtype  = rtrim(&SCHADHOC.PUNCH_TYPE,' ')
    let $FieldName  = 'PUNCH_TYPE'              ! Input into Read-Translate-Table
    let $FieldValue = $Punchtype                ! Input into Read-Translate-Table
    do Read-Translate-Table                     ! Returns XlatShortName, XlatLongName
    let $Punch_Type             = $XlatShortName
    
    let $Punch_DTTM_In          = &SCHADHOC.PUNCH_DTTM   
    do Format-DateTime($Punch_DTTM_In, $Formatted_Punch_DTTM, {DEFDATE}, '', '')
    let #lenght = length($Punch_DTTM_In)
    let $Punch_Time             = substr($Punch_DTTM_In, 13, 5)
    let $Timezone               = &SCHADHOC.TIMEZONE
    
    do FormatTime ($Punch_Time, $out_time)
    let $Punch_Time = $out_time
    let $flex_start_time        = &SCHADHOC.FLEX_SCHED_IN   
    ! do Format-DateTime($flex_start_time, $Formatted_flex_start_time, {DEFDATE}, '', '')
    let $flex_start_time        = substr($flex_start_time, 13, 5)
    if $flex_start_time <> ''
       do FormatTime ($flex_start_time, $out_time)
       let $flex_start_time = $out_time
    end-if
    let $flex_end_time          = &SCHADHOC.FLEX_SCHED_OUT   
    ! do Format-DateTime($flex_end_time, $Formatted_flex_end_time, {DEFDATE}, '', '')
    let $flex_end_time          = substr($flex_end_time, 13, 5)
    if $flex_end_time <> ''
       do FormatTime ($flex_end_time, $out_time)
       let $flex_end_time = $out_time
    end-if
    let $start_time             = &SCHADHOC.CORE_START   
    ! do Format-DateTime($start_time, $Formatted_start_time, {DEFDATE}, '', '')
    let $start_time             = substr($start_time, 13, 5)
    if $start_time <> ''
       do FormatTime ($start_time, $out_time)
       let $start_time = $out_time
    end-if
    let $end_time               = &SCHADHOC.CORE_END   
    ! do Format-DateTime($end_time, $Formatted_end_time, {DEFDATE}, '', '')
    let $end_time               = substr($end_time, 13, 5)
    if $end_time <> ''
       do FormatTime ($end_time, $out_time)
       let $end_time = $out_time
    end-if

    let #Printed_EE_Header = 0     ! Reset for next EE 

    if $Employee_FirstTimeThru = 'N'
        if $Main_Select_Emplid <> $Prior_Main_Emplid
            new-page
            let #Printed_EE_Header = 0
        else
            let #Printed_EE_Header = 1
        end-if
    end-if

    if $Employee_FirstTimeThru = 'N'
        if $Main_Select_Emplid = $Prior_Main_Emplid
            if $Main_Select_EmpRec <> $Prior_Main_EmpRec
                new-page
                let #Printed_EE_Header = 0
        else
            let #Printed_EE_Header = 1
            end-if
        end-if
    end-if

    let $Employee_FirstTimeThru = 'N'
    let $Prior_Main_Emplid = $Main_Select_Emplid
    let $Prior_Main_EmpRec = $Main_Select_EmpRec
    let #Records_Found = 1
    
    do Print-Schedules

   FROM PS_SCH_ADHOC_RPT SCHADHOC,
        PS_PERSON_NAME   PERSDATA1,
        PS_JOB           JOB1,
        PS_JOBCODE_TBL   JOBCODE1
 
   WHERE SCHADHOC.PROCESS_INSTANCE = #Process_Instance
     AND SCHADHOC.DUR     BETWEEN $FromDate AND $ThruDate
     AND PERSDATA1.EMPLID = SCHADHOC.EMPLID
     AND JOB1.EMPLID      = SCHADHOC.EMPLID
     AND JOB1.EMPL_RCD    = SCHADHOC.EMPL_RCD
     AND JOB1.EFFDT       = (SELECT MAX(EFFDT) FROM PS_JOB
                             WHERE EMPLID     = SCHADHOC.EMPLID
                               AND EMPL_RCD   = SCHADHOC.EMPL_RCD
                               AND EFFDT     <= $ThruDate)
     AND JOB1.EFFSEQ      = (SELECT MAX(EFFSEQ) FROM PS_JOB
                             WHERE EMPLID     = SCHADHOC.EMPLID
                               AND EMPL_RCD   = SCHADHOC.EMPL_RCD
                               AND EFFDT      = JOB1.EFFDT)
     AND JOBCODE1.SETID   = JOB1.SETID_JOBCODE
     AND JOBCODE1.JOBCODE = JOB1.JOBCODE
     AND JOBCODE1.EFFDT   = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
                             WHERE SETID      = JOB1.SETID_JOBCODE
                               AND JOBCODE    = JOB1.JOBCODE
                               AND EFFDT     <= $ThruDate
                               AND EFF_STATUS = 'A')
 
   ORDER BY PERSDATA1.LAST_NAME_SRCH, PERSDATA1.FIRST_NAME_SRCH, SCHADHOC.EMPLID, SCHADHOC.EMPL_RCD, SCHADHOC.DUR, SCHADHOC.PUNCH_DTTM


end-SELECT


end-procedure !Select-Schedules-ORA

#end-if

!***********************************************************************
!                                                                      *
! Delete-Rows                                                          *
!                                                                      *
! Called By: Main                                                      *
! Calls:     none                                                      *
!                                                                      *
! Description:  Deletes rows used by the current process instance for  *
!               cleaning up purposes.                                  *
!                                                                      *
!***********************************************************************


begin-procedure Delete-Rows

#ifdef debugy
    show 'IN PROCEDURE Delete-Rows'
#end-if

#ifdef debugy
    show 'Process_Instance     ' noline
    show  #Process_Instance    
#end-if

begin-SQL

DELETE FROM PS_SCH_ADHOC_RPT
WHERE PROCESS_INSTANCE = #Process_Instance

end-SQL

end-procedure Delete-Rows



!***********************************************************************
!                                                                      *
! Get-JobCodeDescr-Rel-Lang                                            *
!                                                                      *
!                                                                      *
! Called By: Select-Schedules                                          *
! Calls:     none                                                      *
!                                                                      *
! Description:  Retrieves related language description for job code    *
!               description.                                           *
!                                                                      *
!***********************************************************************


begin-procedure Get-JobCodeDescr-Rel-Lang


#ifdef debugy
    show 'IN PROCEDURE GET-JOBCODEDESCR-REL-LANG'
#end-if


begin-SELECT

A.JOBCODE
A.DESCR      &JOBCODE_DESCR_LANG


    let $Job_Descr = rtrim(&JOBCODE_DESCR_LANG,' ')


    FROM PS_JOBCODE_LANG A
    WHERE A.JOBCODE       = $JobCode
        AND A.LANGUAGE_CD = $curr_language_cd
        AND A.SETID       = $Setid_JobCode
        AND A.EFFDT       = (SELECT MAX(EFFDT) FROM PS_JOBCODE_LANG
                                WHERE JOBCODE       = $JobCode
                                    AND LANGUAGE_CD = $curr_language_cd
                                    AND EFFDT       <= $ThruDate)


end-SELECT


end-procedure !Get-JobCodeDescr-Rel-Lang



!***********************************************************************
!                                                                      *
! Print-Schedules                                                      *
!                                                                      *
!                                                                      *
! Called By: Select-Schedules                                          *
! Calls:     Print-Employee-Header                                     *
!                                                                      *
!                                                                      *
! Description:  Prints scheduled hours rows for each employee. Manages *
!               printing of employee header & Schedules headers.       *
!               Manages page breaking.                                 *
!                                                                      *
!                                                                      *
!***********************************************************************

begin-procedure Print-Schedules


#ifdef debugy
    show 'IN PROCEDURE PRINT-SCHEDULES'
#end-if


    if #Printed_EE_Header = 0
        do Print-Employee-Header
        let #Printed_EE_Header = 1
    end-if

    if #current-line + 3 > #Maxlines
        new-page
        do Print-Employee-Header
    end-if

    
    
    evaluate $Sch_Type
    when = 'E'
       print $Formatted_Punch_DTTM   (+1,{Col_EMPLID})
       if $OffDay_Ind = 'Y'
          print $OFFDAY              (,{Col_Elap_Work_Hours_graph}) 
       else
          print #Qty                 (,{Col_Elap_Work_Hours_graph}) edit 999999999999.999999
       end-if
       break
    when = 'F'
       if $Punchtype = '1' or $Punchtype = '0'
          print $Formatted_Punch_DTTM   (+1,{Col_EMPLID})
          if $OffDay_Ind = 'Y'
             print $OFFDAY              (,{Col_Schedule_In})        
             print $OFFDAY              (,{Col_Schedule_Out})       
             print $OFFDAY              (,{Col_Core_Start})         
             print $OFFDAY              (,{Col_Core_End})           
             print $OFFDAY              (,{Col_Work_Hours_lbl})      
          else
             print $flex_start_time     (,{Col_Schedule_In})      
             print $flex_end_time       (,{Col_Schedule_Out})    
             print $start_time          (,{Col_Core_Start})        
             print $end_time            (,{Col_Core_End})           
             print #work_hours          (,{Col_Work_Hours_lbl})     edit 999999999999.999999
          end-if
       end-if
       break
    when-other
       print $Formatted_Punch_DTTM   (+1,{Col_EMPLID})
       if $OffDay_Ind = 'Y'
          print $OFFDAY              (,{Col_Punch_Type_lbl})    
          print $OFFDAY              (,{Col_Punch_Time})          
       else
          print $Punch_Type          (,{Col_Punch_Type_lbl})
          print $Punch_Time          (,{Col_Punch_Time})
          print $Timezone            (,{Col_Timezone}) 
       end-if
       break
    end-evaluate
 
end-procedure !Print-Schedules


!***********************************************************************
!                                                                      *
! Print-Employee-Header                                                *
!                                                                      *
!                                                                      *
! Called By: Print-Schedules                                           *
! Calls:     none                                                      *
!                                                                      *
! Description:  Prints employee information and headers.               *
!                                                                      *
!***********************************************************************


begin-procedure Print-Employee-Header


#ifdef debugy
    show 'IN PROCEDURE PRINT-EMPLOYEE-HEADER'
#end-if

        let $PrtEmplid = Rtrim($Main_Select_Emplid, ' ') || ' / ' || $Main_Select_EmpRec
        print $PrtEmplid            (,{Col_EMPLID})
        print $Name                 (,{Col_EmpName})
        print $Job_Descr            (,{Col_Jobdescr})

        print $Elapsed_Schedule_lbl (+2,{Col_Elapsed_Schedule_lbl})
        print $Punch_Schedule_lbl   (,{Col_Punch_Schedule_lbl})
        print $Flex_Schedule_lbl    (,{Col_Flex_Schedule_lbl})
        
        print '-'                   (, {Col_Schedule_In_lbl}, 27)      fill 
        print '-'                   (, {Col_Core_End_lbl}, 29)         fill
        print '-'                   (, {Col_Punch_Type_lbl}, 2)        fill
        print '-'                   (, 71, 2)                          fill

        print $Date_lbl             (+1,{Col_Date_lbl})
        print $Work_Hours_lbl       (,{Col_Elap_Work_Hours_lbl})
        print $Punch_Type_lbl       (,{Col_Punch_Type_lbl})
        print $Time_lbl             (,{Col_Time_lbl})
        print $Schedule_In_lbl      (,{Col_Schedule_In_lbl})
        print $Schedule_Out_lbl     (,{Col_Schedule_Out_lbl})
        print $Core_Start_lbl       (,{Col_Core_Start_lbl})
        print $Core_End_lbl         (,{Col_Core_End_lbl})
        print $Work_Hours_lbl       (,{Col_Flex_Work_Hours_lbl})
         
        graphic                     (,{Col_EMPLID}, 11)                horz-line
        graphic                     (,{Col_Elap_Work_Hours_graph}, 21) horz-line
        graphic                     (,{Col_Punch_Type_lbl}, 11)        horz-line
        graphic                     (,{Col_Punch_Time}, 8)             horz-line
        graphic                     (,{Col_Schedule_In_lbl}, 12)       horz-line
        graphic                     (,{Col_Schedule_Out_lbl}, 13)      horz-line
        graphic                     (,{Col_Core_Start_lbl}, 11)        horz-line
        graphic                     (,{Col_Core_End_lbl}, 9)           horz-line
        graphic                     (,{Col_Work_Hours_lbl}, 20)        horz-line
        

end-procedure !Print-Employee-Header

!***********************************************************************
!FormatTime                                                            *
! Return the time in the AM/PM Format                                  *
!***********************************************************************
begin-procedure FormatTime ($in, :$tt)

#ifdef debugy
    Show 'IN FormatTime'
    Show ' Input $in       : ' $in
#end-if

let $Time_Str             = substr($in, 1, 2)
let $Min_Str              = substr($in, 4, 2)
move $Time_Str to #Hour
if #hour < 12 
   if #hour < 10
      let $in             = substr($in, 2, 1)
      let $tt = ' ' || $in || ':' || $Min_Str || 'AM'
   else
      let $tt = $in || 'AM'
   end-if   
else
   evaluate #hour 
     when = 12
       let $tt = '12:' || $Min_Str || 'PM'
     when = 13
       let $tt = ' 1:' || $Min_Str || 'PM'
     when = 14
       let $tt = ' 2:' || $Min_Str || 'PM'
     when = 15
       let $tt = ' 3:' || $Min_Str || 'PM'
     when = 16
       let $tt = ' 4:' || $Min_Str || 'PM'
     when = 17
       let $tt = ' 5:' || $Min_Str || 'PM'
     when = 18
       let $tt = ' 6:' || $Min_Str || 'PM'
     when = 19
       let $tt = ' 7:' || $Min_Str || 'PM'
     when = 20
       let $tt = ' 8:' || $Min_Str || 'PM'
     when = 21
       let $tt = ' 9:' || $Min_Str || 'PM'
     when = 22
       let $tt = '10:' || $Min_Str || 'PM'
     when = 23
       let $tt = '11:' || $Min_Str || 'PM'
     when = 24
       let $tt = '  :' || $Min_Str || 'AM'
   end-evaluate
end-if

end-procedure FormatTime


!***********************************************************************
!                                                                      *
! Additional SQCs included in the report                               *
!                                                                      *
!***********************************************************************

#include 'tlrnctl4.sqc'     !Get run control parameter values, specific to this report
#include 'curdttim.sqc'     !Get-Current-DateTime procedure
#include 'datemath.sqc'     !Date conversion procedures
#include 'sqrtrans.sqc'     !Translate SQR strings to given language
#include 'prcsapi.sqc'
#include 'prcslng.sqc'
#include 'prcsdef.sqc'
#include 'readxlat.sqc'     !Procedure to read values from xlattable
#include 'reset1.sqc'        !Reset printer procedure
