! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
!***********************************************************************
! SYSFEED: Feed Audits                                                 *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYSFEED-Main                                       !
! Descr:     System for Feeds                                          !
!----------------------------------------------------------------------!
begin-procedure SYSFEED-Main

        let $ErrorFound = 'N'
        let $AuditTitle = 'Feed Audits'

        do SYSFEED-01
        do SYSFEED-02
        do SYSFEED-03
        do SYSFEED-04
        do SYSFEED-05
        do SYSFEED-06
        do SYSFEED-07
        do SYSFEED-08
        do SYSFEED-09
        do SYSFEED-10
        do SYSFEED-11
        do SYSGENERICFEED-01
        do SYSWORKLISTFEED-01
        do SYSWORKLISTFEED-02
        do SYSWORKLISTFEED-03
        do SYSWORKLISTFEED-04
        do SYSWORKLISTFEED-05
        do SYSQUERYFEED-01
        do SYSQUERYFEED-02
        do SYSQUERYFEED-03

        if $ErrorFound = 'N'
            do PrintSummaryRecord
        end-if

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSFEED-01                                                 !
! Descr:     System table audit against PSFP_FEED table:             !
!            FEED-01 Invalid Feed definiton                             !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-01

   let $AuditDescr = '(FEED-01) Feed referencing a non-existing feed data type:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Description'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Feed Data Type ID'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed01_FeedID
A.DESCR                 &Feed01_FeedDescr
A.PTFP_DATATYPE_ID      &Feed01_DataTypeID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed01_FeedID         (+1,#Start1)
   print &Feed01_FeedDescr      (0 ,#Start2)
   print &Feed01_DataTypeID     (0 ,#Start3)
FROM PSFP_FEED A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_DATATYPE B WHERE A.PTFP_DATATYPE_ID = B.PTFP_DATATYPE_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-02                                                 !
! Descr:     System table audit against PSFP_DTYPE_IBSO table:       !
!            FEED-02 Invalid feed data type for IB service operation    !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-02

   let $AuditDescr = '(FEED-02) Feed data type IB operations table '
        || 'referencing a non-existing feed data type:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'IB Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Data Type ID'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.IB_OPERATIONNAME              &Feed02_IBOperationName
A.PTFP_DATATYPE_ID              &Feed02_DataTypeID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed02_IBOperationName        (+1,#Start1)
   print &Feed02_DataTypeID             (0 ,#Start2)
FROM PSFP_DTYPE_IBSO A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_DATATYPE B WHERE A.PTFP_DATATYPE_ID = B.PTFP_DATATYPE_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-03                                                 !
! Descr:     System table audit against PSFP_DTYPE_ATTR table:       !
!            FEED-03 Invalid default feed attribute                     !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-03

   let $AuditDescr = '(FEED-03) Default feed attributes table referencing '
        || 'a non-existing feed data type:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Default Feed Attribute Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Data Type ID'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 41

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME       &Feed03_DefaultFeedAtrrName
A.PTFP_DATATYPE_ID      &Feed03_DataTypeID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed03_DefaultFeedAtrrName    (+1,#Start1)
   print &Feed03_DataTypeID             (0 ,#Start2)
FROM PSFP_DTYPE_ATTR A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_DATATYPE B WHERE A.PTFP_DATATYPE_ID = B.PTFP_DATATYPE_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-04                                                 !
! Descr:     System table audit against PSFP_ATTRS table:            !
!            FEED-04 Invalid feed attribute                             !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-04

   let $AuditDescr = '(FEED-04) Feed attributes table referencing '
        || 'non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed Attribute Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed ID'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 41

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME       &Feed04_FeedAtrrName
A.PTFP_FEED_ID          &Feed04_FeedID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed04_FeedAtrrName           (+1,#Start1)
   print &Feed04_FeedID                 (0 ,#Start2)
FROM PSFP_ATTRS A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSFEED-05                                                 !
! Descr:     System table audit against PSFP_SETTINGS table:         !
!            FEED-05 Invalid data source settings                       !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-05

   let $AuditDescr = '(FEED-05) Feed data source settings table '
        || 'referencing a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Data Source Setting Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed ID'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 41

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME       &Feed05_DataSourceSettingName
A.PTFP_FEED_ID          &Feed05_FeedID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed05_DataSourceSettingName         (+1,#Start1)
   print &Feed05_FeedID                         (0 ,#Start2)
FROM PSFP_SETTINGS A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-06                                                 !
! Descr:     System table audit against PSFP_PARMS table:            !
!            FEED-06 Invalid data source parameter                      !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-06

   let $AuditDescr = '(FEED-06) Feed data source parameters table '
        || 'referencing a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Data Source Parameter Name'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed ID'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 41

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME       &Feed06_DataSourceParamterName
A.PTFP_FEED_ID          &Feed06_FeedID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed06_DataSourceParamterName         (+1,#Start1)
   print &Feed06_FeedID                         (0 ,#Start2)
FROM PSFP_PARMS A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-07                                                 !
! Descr:     System table audit against PSFP_SECURITY table:         !
!            FEED-07 Invalid feed security                              !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-07

   let $AuditDescr = '(FEED-07) Feed security table referencing '
        || 'a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Authentication Type'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Authentication Name'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed07_FeedID
A.PTFP_AUTH_TYPE        &Feed07_AuthType
A.PTFP_AUTH_NAME        &Feed07_AuthName

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed07_FeedID         (+1,#Start1)
   print &Feed07_AuthType       (0 ,#Start2)
   print &Feed07_AuthName       (0 ,#Start3)
FROM PSFP_SECURITY A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-08                                                 !
! Descr:     System table audit against PSFP_PVALS table:            !
!            FEED-08 Invalid user specified data source parameter       !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-08

   let $AuditDescr = '(FEED-08) User specified data source parameter table '
        || 'referencing a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Data Source Parameter Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Parameter Value ID'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 71

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed08_FeedID
A.PTFP_FIELD_NAME       &Feed08_DataSourceParameterName
A.PTFP_PVALS_ID         &Feed08_ParameterValueID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed08_FeedID                         (+1,#Start1)
   print &Feed08_DataSourceParameterName        (0 ,#Start2)
   print &Feed08_ParameterValueID               (0 ,#Start3)
FROM PSFP_PVALS A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-09                                                 !
! Descr:     System table audit against PSFP_ADMN_PREF table:        !
!            FEED-09 Invalid admin personalization data                 !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-09

   let $AuditDescr = '(FEED-09) Admin personalization table referencing '
        || 'a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Data Source Parameter Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Portal Name'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 71

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed09_FeedID
A.PTFP_FIELD_NAME       &Feed09_DataSourceParameterName
A.PORTAL_NAME           &Feed09_PortalName

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed09_FeedID                         (+1,#Start1)
   print &Feed09_DataSourceParameterName        (0 ,#Start2)
   print &Feed09_PortalName                     (0 ,#Start3)
FROM PSFP_ADMN_PREF A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSFEED-10                                                 !
! Descr:     System table audit against PSFP_USER_PREF table:        !
!            FEED-10 Invalid user personalization data                  !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-10

   let $AuditDescr = '(FEED-10) User personalization table referencing '
        || 'a non-existing feed:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Data Source Parameter Name'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'User ID'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Portal Name'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 71
    let #Start4          = 101

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed10_FeedID
A.PTFP_FIELD_NAME       &Feed10_DataSourceParameterName
A.OPRID                 &Feed10_UserID
A.PORTAL_NAME           &Feed10_PortalName

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed10_FeedID                         (+1,#Start1)
   print &Feed10_DataSourceParameterName        (0 ,#Start2)
   print &Feed10_UserID                         (0 ,#Start3)
   print &Feed10_PortalName                     (0, #Start4)
FROM PSFP_USER_PREF A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_FEED B WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID)
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSFEED-11                                                 !
! Descr:     System table audit against PSFP_FEED table:             !
!            FEED-11 Invalid Feed Category                             !
!-----------------------------------------------------------------------!
begin-procedure SYSFEED-11

   let $AuditDescr = '(FEED-11) Feed referencing a non-existing category:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Description'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Feed Category ID'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &Feed11_FeedID
A.DESCR                 &Feed11_FeedDescr
A.PTFP_CATEGORY_ID      &Feed11_CategoryID

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &Feed11_FeedID         (+1,#Start1)
   print &Feed11_FeedDescr      (0 ,#Start2)
   print &Feed11_CategoryID     (0 ,#Start3)
FROM PSFP_FEED A
WHERE NOT EXISTS (SELECT 'X' FROM PSFP_CATEGORY B WHERE A.PTFP_CATEGORY_ID = B.PTFP_CATEGORY_ID) AND A.PTFP_CATEGORY_ID <> ' '
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSGENERICFEED-01                                          !
! Descr:     System table audit against PSOPERATION table:              !
!            SysGenericFeed-01 Invalid Generic IB Service Operation     !
!-----------------------------------------------------------------------!
begin-procedure SYSGENERICFEED-01

   let $AuditDescr = '(GENERICFEED-01) IB Generic Feed referencing '
        || 'a non-existing IB service operation:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'IB Generic Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Description'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'IB Service Operation'
    let #Column3len = lengthp($Column3Name) 

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &GenericFeed01_FeedID
A.DESCR                 &GenericFeed01_FeedDescr
B.PTFP_VALUE            &GenericFeed01_IBServiceOperation

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &GenericFeed01_FeedID                  (+1,#Start1)
   print &GenericFeed01_FeedDescr               (0 ,#Start2)
   print &GenericFeed01_IBServiceOperation      (0 ,#Start3)
FROM PSFP_FEED A, PSFP_SETTINGS B
WHERE (A.PTFP_DATATYPE_ID = 'GENERICFEED') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND 
(B.PTFP_VALUE NOT IN (SELECT C.IB_OPERATIONNAME FROM PSOPERATION C))
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSWORKLISTFEED-01                                         !
! Descr:     System table audit against PSACTIVYTDEFN table:            !
!            SysWorklistFeed-01 Invalid Activity in feed definition     !
!-----------------------------------------------------------------------!
begin-procedure SYSWORKLISTFEED-01

   let $AuditDescr = '(WORKLISTFEED-01) Worklist feed referencing '
        || 'a non-existing activity:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Worklist Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Activity'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let $WorklistFeed01_Seperator = ','    

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &WorklistFeed01_FeedID
B.PTFP_VALUE            &WorklistFeed01_ActivityList
   
   let #sep_start = 1
   let $tempdata = &WorklistFeed01_ActivityList

   while #sep_start > 0
      let #sep_start = instr($tempdata, $WorklistFeed01_Seperator, 1)

      if #sep_start > 0
         let $WorklistFeed01_Activity = {PS-substr}($tempdata,1,#sep_start)
         let #remainlen = {PS-length}($tempdata) - #sep_start + 1
         let $tempdata = {PS-substr}($tempdata,#sep_start+1,#remainlen)
         let $WorklistFeed01_Activity = rtrim(ltrim($WorklistFeed01_Activity,' '),' ')
         let $WorklistFeed01_Activity = rtrim($WorklistFeed01_Activity, $WorklistFeed01_Seperator)
       else
         let #remainlen = {PS-length}($tempdata)
         let $WorklistFeed01_Activity = {PS-substr}($tempdata,1,#remainlen)
         let $WorklistFeed01_Activity = rtrim(ltrim($WorklistFeed01_Activity,' '),' ')
         let $WorklistFeed01_Activity = rtrim($WorklistFeed01_Activity, $WorklistFeed01_Seperator)
      end-if

      if ({PS-length}($WorklistFeed01_Activity)) > 0
         let $WorklistFeed01_ActivityTemp = ''

         do Select-Worklist_Activity

         if ({PS-length}($WorklistFeed01_ActivityTemp)) = 0
            if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                move 'Y' to $DetailErrFound
                do PrintSectionHeadings
            end-if   
            let #rows = #rows +1

            print &WorklistFeed01_FeedID                 (+1,#Start1)
            print $WorklistFeed01_Activity               (0 ,#Start2)
         end-if
      end-if

   end-while

FROM PSFP_FEED A, PSFP_PARMS B
WHERE (A.PTFP_DATATYPE_ID = 'WORKLIST') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND (B.PTFP_FIELD_NAME='ACTIVITYNAME') AND (B.PTFP_VALUE <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: Select-Worklist_Activity                                   !
! Descr: Select the Worklist Activity from PSACTIVITYDEFN table         !
!-----------------------------------------------------------------------!
begin-procedure Select-Worklist_Activity

begin-SELECT on-Error=Rpt-SQL-Error
C.ACTIVITYNAME          
      let $WorklistFeed01_ActivityTemp = &C.ACTIVITYNAME
FROM PSACTIVITYDEFN C
WHERE C.ACTIVITYNAME = $WorklistFeed01_Activity
end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSWORKLISTFEED-02                                         !
! Descr:     System table audit against PSBUSPROCDEFN table:            !
!            SysWorklistFeed-02 Invalid Business Process in feed defn   !
!-----------------------------------------------------------------------!
begin-procedure SYSWORKLISTFEED-02

   let $AuditDescr = '(WORKLISTFEED-02) Worklist feed referencing '
        || 'a non-existing business process:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Worklist Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Business Process'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let $WorklistFeed02_Seperator = ','    

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &WorklistFeed02_FeedID
B.PTFP_VALUE            &WorklistFeed02_BusinessProcessList
   
   let #sep_start = 1
   let $tempdata = &WorklistFeed02_BusinessProcessList
   
   while #sep_start > 0
      let #sep_start = instr($tempdata, $WorklistFeed02_Seperator, 1)

      if #sep_start > 0
         let $WorklistFeed02_BusinessProcess = {PS-substr}($tempdata,1,#sep_start)
         let #remainlen = {PS-length}($tempdata) - #sep_start + 1
         let $tempdata = {PS-substr}($tempdata,#sep_start+1,#remainlen)
         let $WorklistFeed02_BusinessProcess = rtrim(ltrim($WorklistFeed02_BusinessProcess,' '),' ')
         let $WorklistFeed02_BusinessProcess = rtrim($WorklistFeed02_BusinessProcess, $WorklistFeed02_Seperator)
       else
         let #remainlen = {PS-length}($tempdata)
         let $WorklistFeed02_BusinessProcess = {PS-substr}($tempdata,1,#remainlen)
         let $WorklistFeed02_BusinessProcess = rtrim(ltrim($WorklistFeed02_BusinessProcess,' '),' ')
         let $WorklistFeed02_BusinessProcess = rtrim($WorklistFeed02_BusinessProcess, $WorklistFeed02_Seperator)
      end-if

      if ({PS-length}($WorklistFeed02_BusinessProcess)) > 0 
         let $WorklistFeed02_BusinessProcessTemp = ''

         do Select-Worklist_BusinessProcess
      
         if ({PS-length}($WorklistFeed02_BusinessProcessTemp)) = 0
            if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                move 'Y' to $DetailErrFound
                do PrintSectionHeadings
            end-if   
            let #rows = #rows +1

            print &WorklistFeed02_FeedID                 (+1,#Start1)
            print $WorklistFeed02_BusinessProcess        (0 ,#Start2)
         end-if
      end-if

   end-while

FROM PSFP_FEED A, PSFP_PARMS B
WHERE (A.PTFP_DATATYPE_ID = 'WORKLIST') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND (B.PTFP_FIELD_NAME='BUSPROCNAME') AND (B.PTFP_VALUE <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: Select-Worklist_BusinessProcess                            !
! Descr: Select the Worklist Business Process from PSBUSPROCDEFN table  !
!-----------------------------------------------------------------------!
begin-procedure Select-Worklist_BusinessProcess

begin-SELECT on-Error=Rpt-SQL-Error
BUSPROCNAME          
      let $WorklistFeed02_BusinessProcessTemp = &BUSPROCNAME
FROM PSBUSPROCDEFN
WHERE BUSPROCNAME = $WorklistFeed02_BusinessProcess
end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSWORKLISTFEED-03                                         !
! Descr:     System table audit against PSEVENTDEFN table:              !
!            SysWorklistFeed-03 Invalid Event Name in feed definiton    !
!-----------------------------------------------------------------------!
begin-procedure SYSWORKLISTFEED-03

   let $AuditDescr = '(WORKLISTFEED-03) Worklist feed referencing '
        || 'a non-existing event:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Worklist Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Event'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let $WorklistFeed03_Seperator = ','    

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &WorklistFeed03_FeedID
B.PTFP_VALUE            &WorklistFeed03_EventList
   
   let #sep_start = 1
   let $tempdata = &WorklistFeed03_EventList
   
   while #sep_start > 0
      let #sep_start = instr($tempdata, $WorklistFeed03_Seperator, 1)

      if #sep_start > 0
         let $WorklistFeed03_Event = {PS-substr}($tempdata,1,#sep_start)
         let #remainlen = {PS-length}($tempdata) - #sep_start + 1
         let $tempdata = {PS-substr}($tempdata,#sep_start+1,#remainlen)
         let $WorklistFeed03_Event = rtrim(ltrim($WorklistFeed03_Event,' '),' ')
         let $WorklistFeed03_Event = rtrim($WorklistFeed03_Event, $WorklistFeed03_Seperator)
       else
         let #remainlen = {PS-length}($tempdata)
         let $WorklistFeed03_Event = {PS-substr}($tempdata,1,#remainlen)
         let $WorklistFeed03_Event = rtrim(ltrim($WorklistFeed03_Event,' '),' ')
         let $WorklistFeed03_Event = rtrim($WorklistFeed03_Event, $WorklistFeed03_Seperator)
      end-if

      if ({PS-length}($WorklistFeed03_Event)) > 0 
         let $WorklistFeed03_EventTemp = ''

         do Select-Worklist_Event
      
         if ({PS-length}($WorklistFeed03_EventTemp)) = 0
            if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                move 'Y' to $DetailErrFound
                do PrintSectionHeadings
            end-if   
            let #rows = #rows +1

            print &WorklistFeed03_FeedID                 (+1,#Start1)
            print $WorklistFeed03_Event                  (0 ,#Start2)
         end-if
      end-if

   end-while

FROM PSFP_FEED A, PSFP_PARMS B
WHERE (A.PTFP_DATATYPE_ID = 'WORKLIST') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND (B.PTFP_FIELD_NAME='EVENTNAME') AND (B.PTFP_VALUE <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: Select-Worklist_Event                                      !
! Descr: Select the Worklist Event from PSEVENTDEFN table               !
!-----------------------------------------------------------------------!
begin-procedure Select-Worklist_Event

begin-SELECT on-Error=Rpt-SQL-Error
EVENTNAME
      let $WorklistFeed03_EventTemp = &EVENTNAME
FROM PSEVENTDEFN
WHERE EVENTNAME = $WorklistFeed03_Event
end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSWORKLISTFEED-04                                         !
! Descr:     System table audit against PSEVENTROUTE table:             !
!            SysWorklistFeed-04 Invalid Worklist Name in feed defn      !
!-----------------------------------------------------------------------!
begin-procedure SYSWORKLISTFEED-04

   let $AuditDescr = '(WORKLISTFEED-04) Worklist feed referencing '
        || 'a non-existing worklist name:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Worklist Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Worklist Name'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let $WorklistFeed04_Seperator = ','    

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &WorklistFeed04_FeedID
B.PTFP_VALUE            &WorklistFeed04_WorklistNameList
   
   let #sep_start = 1
   let $tempdata = &WorklistFeed04_WorklistNameList
   
   while #sep_start > 0
      let #sep_start = instr($tempdata, $WorklistFeed04_Seperator, 1)

      if #sep_start > 0
         let $WorklistFeed04_WorklistName = {PS-substr}($tempdata,1,#sep_start)
         let #remainlen = {PS-length}($tempdata) - #sep_start + 1
         let $tempdata = {PS-substr}($tempdata,#sep_start+1,#remainlen)
         let $WorklistFeed04_WorklistName = rtrim(ltrim($WorklistFeed04_WorklistName,' '),' ')
         let $WorklistFeed04_WorklistName = rtrim($WorklistFeed04_WorklistName, $WorklistFeed04_Seperator)
       else
         let #remainlen = {PS-length}($tempdata)
         let $WorklistFeed04_WorklistName = {PS-substr}($tempdata,1,#remainlen)
         let $WorklistFeed04_WorklistName = rtrim(ltrim($WorklistFeed04_WorklistName,' '),' ')
         let $WorklistFeed04_WorklistName = rtrim($WorklistFeed04_WorklistName, $WorklistFeed04_Seperator)
      end-if

      if ({PS-length}($WorklistFeed04_WorklistName)) > 0 
         let $WorklistFeed04_WorklistNameTemp = ''

         do Select-Worklist_WorklistName
      
         if ({PS-length}($WorklistFeed04_WorklistNameTemp)) = 0
            if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                move 'Y' to $DetailErrFound
                do PrintSectionHeadings
            end-if   
            let #rows = #rows +1

            print &WorklistFeed04_FeedID                 (+1,#Start1)
            print $WorklistFeed04_WorklistName           (0 ,#Start2)
         end-if
      end-if

   end-while

FROM PSFP_FEED A, PSFP_PARMS B
WHERE (A.PTFP_DATATYPE_ID = 'WORKLIST') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND (B.PTFP_FIELD_NAME='WORKLISTNAME') AND (B.PTFP_VALUE <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: Select-Worklist_WorklistName                               !
! Descr: Select the Worklist Event from PSEVENTROUTE table              !
!-----------------------------------------------------------------------!
begin-procedure Select-Worklist_WorklistName

begin-SELECT on-Error=Rpt-SQL-Error
ROUTENAME
      let $WorklistFeed04_WorklistNameTemp = &ROUTENAME
FROM PSEVENTROUTE
WHERE ROUTENAME = $WorklistFeed04_WorklistName
end-SELECT

end-procedure


!-----------------------------------------------------------------------!
! Procedure: SYSWORKLISTFEED-05                                         !
! Descr:     System table audit against PSOPRDEFN table:                !
!            SysWorklistFeed-05 Invalid From User in feed defn          !
!-----------------------------------------------------------------------!
begin-procedure SYSWORKLISTFEED-05

   let $AuditDescr = '(WORKLISTFEED-05) Worklist feed referencing '
        || 'a non-existing from user:'

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Worklist Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'From User'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let $WorklistFeed05_Seperator = ','    

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID          &WorklistFeed05_FeedID
B.PTFP_VALUE            &WorklistFeed05_FromUserList
   
   let #sep_start = 1
   let $tempdata = &WorklistFeed05_FromUserList
   
   while #sep_start > 0
      let #sep_start = instr($tempdata, $WorklistFeed05_Seperator, 1)

      if #sep_start > 0
         let $WorklistFeed05_FromUser = {PS-substr}($tempdata,1,#sep_start)
         let #remainlen = {PS-length}($tempdata) - #sep_start + 1
         let $tempdata = {PS-substr}($tempdata,#sep_start+1,#remainlen)
         let $WorklistFeed05_FromUser = rtrim(ltrim($WorklistFeed05_FromUser,' '),' ')
         let $WorklistFeed05_FromUser = rtrim($WorklistFeed05_FromUser, $WorklistFeed05_Seperator)
       else
         let #remainlen = {PS-length}($tempdata)
         let $WorklistFeed05_FromUser = {PS-substr}($tempdata,1,#remainlen)
         let $WorklistFeed05_FromUser = rtrim(ltrim($WorklistFeed05_FromUser,' '),' ')
         let $WorklistFeed05_FromUser = rtrim($WorklistFeed05_FromUser, $WorklistFeed05_Seperator)
      end-if

      if ({PS-length}($WorklistFeed05_FromUser)) > 0 
         let $WorklistFeed05_FromUserTemp = ''

         do Select-Worklist_FromUser
      
         if ({PS-length}($WorklistFeed05_FromUserTemp)) = 0
            if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                move 'Y' to $DetailErrFound
                do PrintSectionHeadings
            end-if   
            let #rows = #rows +1

            print &WorklistFeed05_FeedID                 (+1,#Start1)
            print $WorklistFeed05_FromUser               (0 ,#Start2)
         end-if
      end-if

   end-while

FROM PSFP_FEED A, PSFP_PARMS B
WHERE (A.PTFP_DATATYPE_ID = 'WORKLIST') AND (A.PTFP_FEED_ID = B.PTFP_FEED_ID) AND (B.PTFP_FIELD_NAME='ORIGINATORID') AND (B.PTFP_VALUE <> ' ')
end-SELECT

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!-----------------------------------------------------------------------!
! Procedure: Select-Worklist_FromUser                                   !
! Descr: Select the Originator from PSOPRDEFN table                     !
!-----------------------------------------------------------------------!
begin-procedure Select-Worklist_FromUser

begin-SELECT on-Error=Rpt-SQL-Error
OPRID
      let $WorklistFeed05_FromUserTemp = &OPRID
FROM PSOPRDEFN
WHERE OPRID = $WorklistFeed05_FromUser
end-SELECT

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SYSQUERYFEED-01                                            !
! Descr:     System table audit against PSFP_FEED table:             !
!            SysQueryFeed-01 Invalid Query Feed in PSFP_FEED table   !
!-----------------------------------------------------------------------!
begin-procedure SYSQUERYFEED-01

    let $AuditDescr = '(QUERYFEED-01) Query name in PSQRYDEFN does not '
        || 'match query name in PSFP_FEED table:'
        
    create-array name=ptfp_invalid_feed size=30000
     field=feedid:char

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows =  0
    let $DetailErrFound = 'N'

    let $Column1Name = 'Query Feed ID'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Feed Description'
    let #Column2len = lengthp($Column2Name)
    
    let #Start1          = 1
    let #Start2          = 31
    
    let #numofhdr        = 2
   
    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    
    let #arrayput = 0
    
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID     &QueryFeed01_Feed_ID
A.DESCR            &QueryFeed01_FeedDescr

   if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
      move 'Y' to $DetailErrFound
      do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &QueryFeed01_Feed_ID                  (+1,#Start1)
   print &QueryFeed01_FeedDescr                (0 ,#Start2)
   let $Feed_ID = &QueryFeed01_Feed_ID
   put $Feed_ID into ptfp_invalid_feed(#arrayput)
   add 1 to #arrayput
 
FROM PSFP_FEED A, PSFP_SETTINGS B 
WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID 
AND A.PTFP_DATATYPE_ID = 'PSQUERY'
AND B.PTFP_VALUE NOT IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT
 
   do End-Section
   
   let #rows =  0
   let $DetailErrFound = 'N'
   let $Column1Name = 'Data Source Parameter Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Feed ID'
   let #Column2len = lengthp($Column2Name)

   let #Start1 = 1
   let #Start2 = 31
    
   let #numofhdr = 2
    
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   
   let #arrayget = 0
   while #arrayget < #arrayput
      get $arr_feedid from ptfp_invalid_feed(#arrayget)
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME    &QueryFeed02_DataSourceParamterName
A.PTFP_FEED_ID       &QueryFeed02_FeedID

   if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
      move 'Y' to $DetailErrFound
      do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &QueryFeed02_DataSourceParamterName        (+1,#Start1)
   print &QueryFeed02_FeedID                        (0 ,#Start2)
   add 1 to #arrayget
FROM PSFP_PARMS A, PSFP_SETTINGS B 
WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID 
AND A.PTFP_FEED_ID = $arr_feedid
AND B.PTFP_VALUE NOT IN 
  (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT
   end-while
   
   do End-Section
   
   let #rows = 0
   let $DetailErrFound = 'N'
   let $Column1Name = 'Feed Entry Element Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Feed ID'
   let #Column2len = lengthp($Column2Name)

   let #Start1 = 1
   let #Start2 = 31
    
   let #numofhdr = 2
    
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   
   let #arrayget = 0
   while #arrayget < #arrayput
      get $arr_feedid from ptfp_invalid_feed(#arrayget)
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME       &QueryFeed03_FeedAtrrName
A.PTFP_FEED_ID          &QueryFeed03_FeedID

   if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &QueryFeed03_FeedAtrrName                  (+1,#Start1)
   print &QueryFeed03_FeedID                        (0 ,#Start2)

   add 1 to #arrayget
FROM PSFP_ATTRS A, PSFP_SETTINGS B 
WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID 
AND A.PTFP_FEED_ID = $arr_feedid
AND B.PTFP_VALUE NOT IN 
  (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT
   end-while

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SysQueryFeed-02                                            !
! Descr:     System table audit against PSFP_PARMS table:            !
!            SysQueryFeed-02: Verify query feed parameters definition.  !
!-----------------------------------------------------------------------!
begin-procedure SYSQUERYFEED-02

   let $AuditDescr = '(QUERYFEED-02) Query bind name in PSQRYBIND does not '
     || 'match parameter name in PSFP_PARMS table:'
     
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
     
create-array name=ptfp_feed size=30000
     field=feedid:char
     field=qryname:char
     
create-array name=ptfp_feed_parms size=30000
     field=qryname:char
     field=promptname:char
     field=feedid:char
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Feed Attribute Name'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Feed ID'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Missing query prompt'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
   
   let #arrayput = 0
   let #arrayput1 = 0
           
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID     &QueryFeed04_Feed_ID
B.PTFP_VALUE       &QueryFeed04_QryName
   let $Feed_ID = &QueryFeed04_Feed_ID
   let $Qry_Name = &QueryFeed04_QryName
   put $Feed_ID $Qry_Name into ptfp_feed(#arrayput)
   add 1 to #arrayput
FROM PSFP_FEED A, PSFP_SETTINGS B 
WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID 
AND A.PTFP_DATATYPE_ID = 'PSQUERY'
AND B.PTFP_VALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

   let #arrayget = 0
   while #arrayget < #arrayput
      get $arr_feedid $arr_qryname from ptfp_feed(#arrayget)
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FIELD_NAME           &ValidateFeedParm_DataSourceParamterName
    let $Prompt_Name = rtrim(&ValidateFeedParm_DataSourceParamterName, ' ')
    if $Prompt_Name <> '.MAXROW' 
       and $Prompt_Name <> '.PAGING' 
       and $Prompt_Name <> '.MAXMINUTES' 
       and $Prompt_Name <> 'FEED.PROCINST' 
       and $Prompt_Name <> 'FEED.MAXROWS' 
       and $Prompt_Name <> 'FEED.SECTYPE' 
       and $Prompt_Name <> 'FEED.LANGUAGE' 
       and $Prompt_Name <> 'FEED.ONERWPERETRY'   
       let $Query_Name = $arr_qryname
       put $Query_Name $Prompt_Name $arr_feedid into ptfp_feed_parms(#arrayput1)
       add 1 to #arrayput1
    end-if
FROM PSFP_PARMS A
WHERE A.PTFP_FEED_ID =  $arr_feedid
end-SELECT
       add 1 to #arrayget
    end-while

    let #arrayget1 = 0
    while #arrayget1 < #arrayput1
       let #row = 0
       get $arr_qryname $arr_promptname $arr_feedid from ptfp_feed_parms(#arrayget1)
       do ValidateQueryBind($arr_qryname, $arr_promptname, #row)
       if #row = 0
          if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
             move 'Y' to $DetailErrFound
             do PrintSectionHeadings
          end-if
          print $arr_promptname                                          (+1,#Start1)
          print $arr_feedid                                              (0 ,#Start2)
          print $arr_promptname                                          (0 ,#Start3)
          let #rows = #rows +1
       end-if
       add 1 to #arrayget1
     end-while
      
   do End-Section
   
#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!---------------------------------------------------------------------------------------!
! Procedure:   ValidateQueryBind                                                        !
! Descr:       Validate query bind                                                      !
!---------------------------------------------------------------------------------------!

begin-procedure ValidateQueryBind ($arr_qryname, $arr_promptname, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT(*)  &ValidateQueryBind_Count
    let #row = &ValidateQueryBind_Count
FROM PSQRYBIND A
WHERE A.QRYNAME = $arr_qryname
AND A.FIELDNAME = $arr_promptname
AND A.USECOUNT > 0
end-SELECT

end-procedure

!-----------------------------------------------------------------------!
! Procedure: SysQueryFeed-03                                            !
! Descr:     System table audit against PSFP_ATTRS table:            !
!            SysQueryFeed-03: Verify query feed parameters definition.  !
!-----------------------------------------------------------------------!
begin-procedure SYSQUERYFEED-03

   let $AuditDescr = '(QUERYFEED-03) Query field name in PSQRYFIELD does not '
      || 'match template defined in PSFP_ATTRS table:'
      
create-array name=ptfp_feed1 size=30000
     field=feedid:char
     field=qryname:char
     
create-array name=ptfp_feed_elems size=30000
     field=feedid:char
     field=queryname:char
     field=elementname:char
     field=attributename:char
     
create-array name=ptfp_feed_corr size=3000
     field=corrnamec:char
     field=qryname:char
     
     
   let #rows =  0
   let $DetailErrFound = 'N'
   
   let $Column1Name = 'Feed Entry Element'
   let #Column1len = lengthp($Column1Name)
   let $Column2Name = 'Feed ID'
   let #Column2len = lengthp($Column2Name)
   let $Column3Name = 'Missing query field'
   let #Column3len = lengthp($Column3Name)

   let #Start1 = 1
   let #Start2 = 41
   let #Start3 = 81
   
   let #numofhdr = 3
   
   put $Column1Name #Start1 #Column1len into printarray(0)
   put $Column2Name #Start2 #Column2len into printarray(1)
   put $Column3Name #Start3 #Column3len into printarray(2)
    

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if
    
   let #arrayput = 0
   let #arrayput1 = 0
   let #arrayput2 = 0

begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID     &QueryFeed05_Feed_ID
B.PTFP_VALUE       &QueryFeed05_QryName

   let $Feed_ID = &QueryFeed05_Feed_ID
   let $Qry_Name = &QueryFeed05_QryName
   put $Feed_ID $Qry_Name into ptfp_feed1(#arrayput)
   add 1 to #arrayput
   
FROM PSFP_FEED A, PSFP_SETTINGS B 
WHERE A.PTFP_FEED_ID = B.PTFP_FEED_ID 
AND A.PTFP_DATATYPE_ID = 'PSQUERY'
AND B.PTFP_VALUE IN 
   (SELECT C.QRYNAME 
   FROM PSQRYDEFN C) 
end-SELECT

   let #arrayget = 0
   while #arrayget < #arrayput
      get $arr_feedid $arr_qryname from ptfp_feed1(#arrayget)
      
begin-SELECT on-Error=Rpt-SQL-Error
A.PTFP_FEED_ID               &ValidateFeedAttr_Feed_ID
A.PTFP_FIELD_NAME            &ValidateFeedAttr_FeedAtrrName
A.HTMLAREA                   &ValidateFeedAttr_HtmlArea

    let $Feed_ID = $arr_feedid
    let $Element_Name = &ValidateFeedAttr_HtmlArea
    let $Attr_Name = &ValidateFeedAttr_FeedAtrrName
    put $Feed_ID $arr_qryname $Element_Name $Attr_Name into ptfp_feed_elems(#arrayput1)
    add 1 to #arrayput1

FROM PSFP_ATTRS A
WHERE PTFP_FEED_ID = $arr_feedid
end-SELECT
 
begin-SELECT on-Error=Rpt-SQL-Error
A.CORRNAME   &QueryFeed05_CorrName
A.QRYNAME    &QueryFeed05_QueryName
    let $CorrName = &QueryFeed05_CorrName
    let $QueryName = &QueryFeed05_QueryName
    put $CorrName $QueryName into ptfp_feed_corr(#arrayput2)
    add 1 to #arrayput2 
FROM PSQRYRECORD A
WHERE A.QRYNAME = $arr_qryname
end-SELECT

      add 1 to #arrayget
   end-while 
   
   let #arrayget1 = 0
   let #arrayget2 = 0
   while #arrayget2 < #arrayput2
      get $arr_corrname $att_qryname from ptfp_feed_corr(#arrayget2)
      while #arrayget1 < #arrayput1
         get $arr_feedid $arr_queryname $arr_elementname $arr_attrname from ptfp_feed_elems(#arrayget1)
         let $Query_CorrName = '%' || $arr_corrname || '.'
         let #amp_start = instr ($arr_elementname, $Query_CorrName, 1)
         let #len = lengthp($arr_elementname)
         while #amp_start > 0
            let $Temp = substrp($arr_elementname, #amp_start + 1, #len - #amp_start)
            let #len1 = lengthp($Temp)
            let #amp_stop = instr ($Temp, '%', 1)
            let #amp_start = 0
            if #amp_stop > 0
                let $QueryField_Name = substrp($Temp, 1, #amp_stop - 1)
                let $arr_elementname = substrp($Temp, #amp_stop + 1, #len1 - #amp_stop)
                let #len = lengthp($arr_elementname)
                let #amp_start = instr ($arr_elementname, $Query_CorrName, 1)
                do ValidateFieldName ($arr_queryname, $QueryField_Name, #row)
                if #row = 0
                    if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
                       move 'Y' to $DetailErrFound
                       do PrintSectionHeadings
                    end-if
                    print $arr_attrname        (+1, #Start1)
                    print $arr_feedid          (0,  #Start2)
                    print $QueryField_Name     (0 , #Start3)
                    let #rows = #rows + 1
                end-if 
            end-if
         end-while
         add 1 to #arrayget1
      end-while
      add 1 to #arrayget2
   end-while
   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure
!---------------------------------------------------------------------------------------!
! Procedure:   ValidateFieldName                                                        !
! Descr:       Validate query field                                                     !                                        
!---------------------------------------------------------------------------------------!

begin-procedure ValidateFieldName ($Query_Name, $QueryField_Name, :#row)

begin-SELECT on-Error=Rpt-SQL-Error
COUNT (*)  &QueryFeed05_Count
    let #row = &QueryFeed05_Count
FROM PSQRYFIELD A
WHERE A.QRYNAME = $Query_Name
AND A.QRYFLDNAME = $QueryField_Name

end-SELECT

end-procedure