!***********************************************************************
!  TAX810MN:  Qtrly Wage List - Tape/Diskette - MINNESOTA              *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2011, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2011/02/24:11:47:10                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860365                                              !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
! HP00001       Add $PublicSector indicator                            *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, one or more'
    display 'files will have been created, as follows:'
    display ''
    display '  TAX810MN '
    display ''
    display '     or '
    display ''
    display '  TAX810MN.nnn  where "nnn" represents a volume number '
    display ''

    display 'The file contains 100-char record(s) in the format required'
    display 'for reporting of quarterly wages to the Minnesota Department'
    display 'of Employment and Economic Development.'
    display ''
    display 'The Minnesota State Record Format must be electronically filed'
    display 'starting with the 2nd Quarter 2005. Refer to Minnesota Unemployment'
    display 'Insurance website for further instructions.'
    display ''

  ! display 'The file contains 100-char records in the format required'
  ! display 'for magnetic tape OR diskette (3.5" or 5.25") reporting '
  ! display 'of quarterly wages to the Minnesota Department of Jobs'
  ! display 'and Training.'
  ! display ''
  ! display 'Follow directions provided in the Minnesota Department of'
  ! display 'Jobs and Training ''The Employer''s Guide to Magnetic Media'
  ! display 'Wage Detail Reporting'' for submission of tapes or diskettes.'
  ! display ''

  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-EandG                                                          !HP00001
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810MN' to $ReportID

  do Get-Quarter-Dates

 !if $FileType = 'D'
 ! move 'Minnesota Quarterly UI Wage Report - Diskette' to $ReportTitle
 ! display ''
 ! display 'Creating Diskette File for Minnesota UI Wage Reporting'
 !else
 ! move 'Minnesota Quarterly UI Wage Report - Tape/Diskette' to $ReportTitle
 ! display ''
 ! display 'Creating Tape/Diskette File for MN UI Wage Reporting'
 !end-if

  move 'Minnesota Quarterly UI Wage Report' to $ReportTitle
  display ''
  display 'Creating File for Minnesota UI Wage Reporting'

end-procedure

begin-procedure Initialization
  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 100 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity
  do Open-File
  do Build-Array

  if $PublicSector = 'Y'                                                !HP00001
    #ifdef TAXTEST                                                      !HP99999
       let $State = 'CA'                                                !HP99999
    #else                                                               !HP99999
       let $State = 'MN'                                                !HP99999
    #endif                                                              !HP99999
    do Delete-Work-File                                                 !HP99999
  end-if                                                                !HP00001
end-procedure

begin-procedure Open-File

if $FileType = 'D'
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810MN' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'TAX810MN.' || $FileExtension
#endif

   open $FileID as 10 for-writing record=100:fixed
else
  open '{IMPORTPREFIX}TAX810MN{IMPORTSUFFIX}' as 10 for-writing record=100:fixed

end-if

end-procedure

begin-procedure Build-Array
  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
M.COMPANY
M.DESCR
M.FEDERAL_EIN
M.ADDRESS1
M.CITY
M.STATE
M.POSTAL
M.COUNTRY

  move &M.Company to $Company

  move ''         to $priorEmplID
  if $PublicSector <> 'Y'                                               !HP00001
    do Read-Employee-Data
  else                                                                  !HP00001
    move 'N'        to $Process_Company                                 !HP99999
    do Read-Employee-Data-HP                                            !HP99999
    if $Process_Company = 'Y'                                           !HP99999
       do Generate-Tax-Tape                                             !HP99999
       do Delete-Work-File                                              !HP99999
    end-if                                                              !HP99999
  end-if                                                                !HP00001

FROM  PS_COMPANY_TBL M
WHERE M.EFF_STATUS = 'A'
  AND M.TAX_REPORT_TYPE = '2'
  AND M.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = M.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #T_Count > 0                      !Equivalent of F Record
    do Write-T-Record
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.TAX_CLASS
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.NAME
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  move &C.Company to $Company
  move &C.EmplID  to $EmplID

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &M.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'MN'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Read-Employee-Data-HP                                    !HP99999
begin-SELECT                                                             !HP99999
RC.COMPANY        () on-break print=never level=1                        !HP99999
                                     before=Read-Employer-ID-Default     !HP99999
RC.EMPLID                                                                !HP99999
RC.TAX_CLASS                                                             !HP99999
RC.STATE                                                                 !HP99999
RC.LOCALITY                                                              !HP99999
RC.TXGRS_QTD                                                             !HP99999
RC.NLGRS_QTD                                                             !HP99999
RD1.NATIONAL_ID                                                          !HP99999
RD.NAME                                                                  !HP99999
RD.LAST_NAME
RD.FIRST_NAME
RD.MIDDLE_NAME
                                                                         !HP99999
  move 'Y' to $Process_Company                                           !HP99999
  move &RC.Company to $Company                                           !HP99999
  move &RC.EmplID  to $EmplID                                            !HP99999
  move &RC.State   to $Emp_State                                         !HP99999
  move &RC.Locality   to $Locality                                       !HP99999
  move &RC.Tax_Class  to $Tax_Class                                      !HP99999
  move &RC.Txgrs_QTD  to #Txgrs_QTD                                      !HP99999
  move &RC.Nlgrs_QTD  to #Nlgrs_QTD                                      !HP99999
  move &RD1.National_ID to $National_ID                                  !HP99999
! move &RD.Name    to $Name                                              !HP99999

  let $Name = substr(&RD.Last_Name,1,20) ||
              substr(&RD.First_Name,1,15) ||
              substr(&RD.Middle_Name,1,15)

  do Get-Employer-ID                                                     !HP99999
  do Insert-Work-Record                                                  !HP99999
                                                                         !HP99999
FROM  PS_TAX_BALANCE RC, PS_PERSON_NAME RD,
      PS_PERS_NID RD1                                                    !HP99999
WHERE RC.COMPANY       = &M.Company                                      !HP99999
  AND RD.EMPLID        = RC.EMPLID                                       !HP99999
  AND RC.TAX_CLASS     = 'U'                                             !HP99999
  AND RC.BALANCE_ID    = $Calendar_Year_Id                               !HP99999
  AND RC.BALANCE_YEAR  = &TX.Balance_Year                                !HP99999
  AND RC.BALANCE_QTR   = &TX.Balance_Qtr                                 !HP99999
#ifdef TAXTEST                                                           !HP99999
  AND RC.STATE         = 'CA'                                            !HP99999
#else                                                                    !HP99999
  AND RC.STATE         = 'MN'                                            !HP99999
#endif                                                                   !HP99999
  AND RC.LOCALITY      = ' '                                             !HP99999
  AND RC.BALANCE_PERIOD  =                                               !HP99999
      (SELECT MAX(BALANCE_PERIOD)                                        !HP99999
       FROM   PS_TAX_BALANCE                                             !HP99999
       WHERE  EMPLID        = RC.EMPLID                                  !HP99999
         AND  COMPANY       = RC.COMPANY                                 !HP99999
         AND  BALANCE_ID    = RC.BALANCE_ID                              !HP99999
         AND  BALANCE_YEAR  = RC.BALANCE_YEAR                            !HP99999
         AND  BALANCE_QTR   = RC.BALANCE_QTR                             !HP99999
         AND  STATE         = RC.STATE                                   !HP99999
         AND  LOCALITY      = RC.LOCALITY                                !HP99999
         AND  TAX_CLASS     = RC.TAX_CLASS)                              !HP99999
  AND RC.NLGRS_QTD <> 0                                                  !HP99999
  AND RD.EMPLID            = RD1.EMPLID                                  !HP99999
  AND RD1.COUNTRY = {NID_Country}                                        !HP99999
  AND RD1.NATIONAL_ID_TYPE = $Payroll_NID_Type                           !HP99999
ORDER BY RD1.NATIONAL_ID                                                 !HP99999
end-SELECT                                                               !HP99999
end-procedure                                                            !HP99999
                                                                         !HP99999
begin-procedure Generate-Tax-Tape                                        !HP99999
begin-SELECT                                                             !HP99999
R.COMPANY        () on-break print=never level=1 before=Before-Company   !HP99999
                                                 after=AFTER-COMPANY     !HP99999
R.EMPLOYER_ID    () on-break print=never level=2 after=Empler-ID-Chg     !HP99999
R.STATE                                                                  !HP99999
R.EMPLID                                                                 !HP99999
R.TAX_CLASS                                                              !HP99999
R.LOCALITY                                                               !HP99999
R.TXGRS_QTD                                                              !HP99999
R.NLGRS_QTD                                                              !HP99999
R.NATIONAL_ID                                                            !HP99999
R.NAME                                                                   !HP99999
                                                                         !HP99999
  move &R.EMPLOYER_ID  to $Employer_ID                                   !HP99999
                                                                         !HP99999
  if &R.NlGrs_QTD > 0                                                    !HP99999
    do Process-Employee                                                  !HP99999
  else                                                                   !HP99999
    do Print-Summary-Data('NegWage')                                     !HP99999
  end-if                                                                 !HP99999
                                                                         !HP99999
FROM  PS_R_TAX810MN R                                                    !HP99999
ORDER BY R.EMPLOYER_ID, R.NATIONAL_ID                                    !HP99999
end-SELECT                                                               !HP99999
end-procedure                                                            !HP99999
                                                                         !HP99999
begin-procedure Process-Employee
  if $PublicSector <> 'Y'                                                !HP00001
    move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  else                                                                   !HP00001
    move &R.NATIONAL_ID to $S123 xxx       !isolate first 3 digits       !HP99999
  end-if                                                                 !HP00001

  if $PublicSector <> 'Y'                                                !HP00001
    if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
      move 'I        '   to $NATIONAL_ID
    else
      move &D1.NATIONAL_ID        to $NATIONAL_ID
    end-if

    move &D.Last_Name    to $LstName
    move &D.First_Name   to $FrsName
    move &D.Middle_Name  to $MdlName

    move &D.Name         to $Name
  else                                                                   !HP00001
    if $S123 = &Temp_SSN_Mask or RTRIM(&R.NATIONAL_ID, ' ') = ''         !HP99999
      move 'I        '   to $NATIONAL_ID                                 !HP99999
    else                                                                 !HP99999
      move &R.NATIONAL_ID        to $NATIONAL_ID                         !HP99999
    end-if                                                               !HP99999
    move &R.Name         to $Name                                        !HP99999

    let $LstName = substr(&R.Name,1,20)
    let $FrsName = substr(&R.Name,21,15)
    let $MdlName = substr(&R.Name,36,15)
  end-if                                                                 !HP00001

  do Rotate-Name

  uppercase $LstName
  uppercase $FrsName
  uppercase $MdlName

  uppercase $Name
  while INSTR($Name,'''',1) <> 0
    let $Name = SUBSTR($Name,1,INSTR($Name,'''',1) - 1) ||
                SUBSTR($Name,INSTR($Name,'''',1) + 1,LENGTH($Name))
  end-while

  move ' ' to $Officer_Cd

  if $PublicSector <> 'Y'                                               !HP00001
    move &C.EmplID     to $HoldEmplID                                   !HP00001
    move &M.Company    to $HoldCompany                                  !HP00001
  else                                                                  !HP00001
    move &R.EmplID     to $HoldEmplID                                   !HP99999
    move &R.Company    to $HoldCompany                                  !HP99999
  end-if                                                                !HP00001
                                                                        !HP99999
begin-select
J.OFFICER_CD
  if &J.Officer_Cd <> 'N'
    move 'Y' to $Officer_Cd
  end-if
 FROM PS_JOB J
WHERE J.EMPLID   = $HoldEmplID                                          !HP00001
  AND J.COMPANY  = $HoldCompany                                         !HP00001
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select

  if $PublicSector <> 'Y'                                               !HP00001
    move &C.NlGrs_QTD to #NlGrs_QTD
  else                                                                  !HP00001
    move &R.NlGrs_QTD to #NlGrs_QTD                                     !HP99999
  end-if                                                                !HP00001
  if $PublicSector <> 'Y'                                               !HP00001
    add #NlGrs_QTD to #Co_NlGrs_QTD
  else                                                                  !HP00001
    add #NlGrs_QTD to #Acct_NlGrs_QTD                                   !HP99999
  end-if                                                                !HP00001
  multiply 100 times #NlGrs_QTD
! do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999')
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')

#ifdef TAXTEST
  move 'CA' to $State
#endif

  if $PublicSector <> 'Y'                                               !HP00001
    move &C.Company to $Company
    move &C.EmplID to $EmplID
  else                                                                  !HP00001
    move &R.Company to $Company                                         !HP99999
    move &R.EmplID to $EmplID                                           !HP99999
  end-if                                                                !HP00001

  move 'PS_RC_TAX810MN D'  to $TAX810X1
  move 'PS_RC_TAX810MN D1' to $TAX810X2
  move 'PS_RC_TAX810MN D2' to $TAX810X3
  move 'PS_RC_TAX810MN D3' to $TAX810X4

  do Get-Hours
  if #Hours > 999
     let $Hours = '999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

  let $MonEmpFlg1 = '0'
  let $MonEmpFlg2 = '0'
  let $MonEmpFlg3 = '0'

  do Get-Monthly-Employment-Indicator

  if $PublicSector <> 'Y'
     do Get-Employer-ID
  end-if

  do Write-D-Record
  add 1 to #Count_R
end-procedure

begin-procedure Before-Company
  do Get-Company-Data
  if $PublicSector <> 'Y'                                               !HP00001
    #ifdef TAXTEST
      move 'CA' to $State
    #else
      move 'MN' to $State
    #endif
    do Get-State-Tax-Data             !Employer ID
    if RTRIM(&Employer_ID_SUT,' ') = ''
      display 'Company: ' noline
      display $company    noline
      display '  State: ' noline
      display $state
      display '*** State Unemployment ID missing in Company State Tax Table ***'
      display '*********************** Processing stopped *********************'
      stop
    end-if

    do Format-Employer-ID-SUT

    move $Emplyr_ID_SUT to $StateEIN
  ! move &Employer_ID_SUT to $StateEIN
  end-if                                                                !HP00001
end-procedure

begin-procedure After-Company
  if #Count_S > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Count_R to #Count_R_Total

    move 0 to #Co_NlGrs_QTD
    move 0 to #Count_S
    move 0 to #Count_R
    new-page
  end-if
end-procedure

begin-procedure Empler-ID-Chg                                            !HP99999
                                                                         !HP99999
  if #Count_ID > 0                                                       !HP99999
    do Print-Summary-Data('AcctTotal')                                   !HP99999
                                                                         !HP99999
    add #Acct_NlGrs_QTD to #Co_NlGrs_QTD                                 !HP99999
                                                                         !HP99999
    move 0 to #Acct_NlGrs_QTD                                            !HP99999
    move 0 to #Count_ID                                                  !HP99999
    new-page                                                             !HP99999
  end-if                                                                 !HP99999
                                                                         !HP99999
end-procedure                                                            !HP99999
                                                                         !HP99999
begin-procedure Write-D-Record

  if $FileType = 'D'
    if #RecordCount >= #MaxRecordsPerDiskette
      do Open-File
    end-if
  end-if
!  if $PublicSector <> 'Y'                                               !HP00001
!    move $StateEIN     to $HoldField                                    !HP00001
!  else                                                                  !HP00001
    move $Employer_ID  to $HoldField                                    !HP99999
!  end-if                                                                !HP00001

  write 10 from $HoldField:12
                  $RptYear:4
           &TX.Balance_Qtr:1
               $MonEmpFlg1:1
               $MonEmpFlg2:1
               $MonEmpFlg3:1
              $NATIONAL_ID:9
                  $LstName:20
                  $FrsName:15
                  $MdlName:1
                $NlGrs_QTD:14
                       $Sp:2
                    $Hours:3
               $Officer_Cd:1
                       $Sp:14
                       'X':1

 ! write 10 from 'D':1
 !        $HoldField:10                                                  !HP00001
 !          $RptYear:4
 !   &TX.Balance_Qtr:1
 !               $Sp:17
 !      $NATIONAL_ID:9
 !             $Name:27
 !        $NlGrs_QTD:9
 !               $Sp:8
 !            $Hours:3
 !       $Officer_Cd:1
 !               $Sp:2
 !               'F':1
 !               $Sp:7

  add 1             to #RecordCount
  add 1             to #T_Count
  add #NlGrs_QTD    to #T_Gross
  move '00'         to $Hours

  if $PublicSector = 'Y'                                                !HP00001
    add 1 to #Count_ID                                                  !HP99999
  end-if                                                                !HP00001
  add 1 to #Count_S
  add 1 to #Count_F

  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD

  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-T-Record
  move #T_Count to $T_Count 0999999
  move #T_Gross to $T_Gross 0999999999999

  move 0 to #T_Count

end-procedure

begin-procedure Ignore
end-procedure

begin-procedure Prompts

  move 'T' to $FileType

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while

end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Reporting_Medium to $FileType
  move $RC_QTR_UI.Diskette_Type    to $DisketteType
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

begin-procedure Read-Employer-ID-Default                                !HP99999
                                                                        !HP99999
  do Get-State-Tax-Data                                                 !HP99999
                                                                        !HP99999
  if RTRIM(&Employer_ID_SUT,' ') = ''                                            !HP99999
    display 'Company: ' noline
    display $company    noline
    display '  State: ' noline
    display $state
    display '*** State Unemployment ID missing in Company State Tax Table ***'   !HP99999
    display '*********************** Processing stopped *********************'   !HP99999
    stop                                                                         !HP99999
  end-if                                                                !HP99999
                                                                        !HP99999
  do Format-Employer-ID-SUT

  let $StateEIN = RTRIM($Emplyr_ID_SUT, ' ')
! let $StateEIN = RTRIM(&Employer_ID_SUT, ' ')                          !HP99999
                                                                        !HP99999
end-procedure                                                           !HP99999
                                                                        !HP99999
begin-procedure Get-Employer-ID                                         !HP99999
                                                                        !HP99999
  let $Employer_ID = $StateEIN                                          !HP99999
  let $Employer_ID_Ext = ''                                             !HP99999
                                                                        !HP99999
  let $Job_Found = 'N'                                                  !HP99999
  do Get-Active-Job                                                     !HP99999
                                                                        !HP99999
!  if $Job_Found = 'N'                                                  !HP99999
!    do Get-Inactive-Job                                                !HP99999
!  end-if                                                               !HP99999
                                                                        !HP99999
  if $Job_Found = 'Y'                                                   !HP99999
    do Get-Employer-ID-Extension                                        !HP99999
    CONCAT $Emplyr_ID_Ext with $Employer_ID                             !HP99999
  end-if                                                                !HP99999
end-procedure                                                           !HP99999
                                                                        !HP99999
begin-procedure Get-Active-Job                                          !HP99999
                                                                        !HP99999
#ifdef TAXTEST
  let $Active_Job_State = 'CA'
#else
  let $Active_Job_State = 'MN'
#endif

Let #Prev_Empl_Rcd    = 999

begin-select
JOB1.EMPL_RCD,
JOB1.EFFDT,
JOB1.EFFSEQ,
JOB1.EMPL_STATUS,
JOB1.BUSINESS_UNIT,
JOB1.TAX_LOCATION_CD

  if $Job_Found <> 'Y'
     let $Business_Unit = &JOB1.BUSINESS_UNIT
     let $Tax_Location  = &JOB1.TAX_LOCATION_CD
  end-if
  
  if &Job1.EMPL_STATUS = 'A'
     if &JOB1.EMPL_RCD < #Prev_Empl_Rcd
        let $Business_Unit = &JOB1.BUSINESS_UNIT
        let $Tax_Location  = &JOB1.TAX_LOCATION_CD
        let #Prev_Empl_Rcd = &JOB1.EMPL_RCD
     end-if
  end-if     
     
  let $Job_Found     = 'Y'

  FROM PS_JOB JOB1
 WHERE JOB1.EMPLID          = $EmplID
   AND JOB1.COMPANY         = $Company
   AND EXISTS (SELECT 'X'
                FROM PS_TAX_LOCATION2 TL1
               WHERE TL1.TAX_LOCATION_CD = JOB1.TAX_LOCATION_CD
                 AND TL1.STATE           = $Active_Job_State)
  AND JOB1.EFFDT      =
      (SELECT MAX(JOB13.EFFDT)
         FROM PS_JOB JOB13
        WHERE JOB13.EMPLID          = JOB1.EMPLID
          AND JOB13.COMPANY         = JOB1.COMPANY
          AND JOB13.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB13.EFFDT          <= $AsOfDate
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL13
                       WHERE TL13.TAX_LOCATION_CD = JOB13.TAX_LOCATION_CD
                         AND TL13.STATE           = $Active_Job_State))
  AND JOB1.EFFSEQ     =
      (SELECT MAX(JOB14.EFFSEQ)
         FROM PS_JOB JOB14
        WHERE JOB14.EMPLID          = JOB1.EMPLID
          AND JOB14.COMPANY         = JOB1.COMPANY
          AND JOB14.EMPL_RCD        = JOB1.EMPL_RCD
          AND JOB14.EFFDT           = JOB1.EFFDT
          AND EXISTS (SELECT 'X'
                        FROM PS_TAX_LOCATION2 TL14
                       WHERE TL14.TAX_LOCATION_CD = JOB14.TAX_LOCATION_CD
                         AND TL14.STATE           = $Active_Job_State))
order by JOB1.EFFDT, JOB1.EFFSEQ
end-select                                                              !HP99999
end-procedure                                                           !HP99999
                                                                        !HP99999
!begin-procedure Get-Inactive-Job                                        !HP99999
!                                                                        !HP99999
!#ifdef TAXTEST
!  let $Active_Job_State = 'CA'
!#else
!  let $Active_Job_State = 'MN'
!#endif
!                                                                        !HP99999
!begin-select                                                            !HP99999
!JOB2.BUSINESS_UNIT                                                      !HP99999
!JOB2.TAX_LOCATION_CD                                                    !HP00006
!                                                                        !HP99999
!  let $Business_Unit = &JOB2.BUSINESS_UNIT                              !HP99999
!  let $Tax_Location  = &JOB2.TAX_LOCATION_CD                            !HP00006
!  let $Job_Found     = 'Y'                                              !HP99999
!                                                                        !HP99999
!  FROM PS_JOB JOB2
! WHERE JOB2.EMPLID          = $EmplID
!   AND JOB2.COMPANY         = $Company
!   AND EXISTS (SELECT 'X'
!                FROM PS_TAX_LOCATION2 TL2
!               WHERE TL2.TAX_LOCATION_CD = JOB2.TAX_LOCATION_CD
!                 AND TL2.STATE           = $Active_Job_State)
!  AND JOB2.EMPL_RCD   =
!      (SELECT MIN(JOB22.EMPL_RCD)
!         FROM PS_JOB JOB22
!        WHERE JOB22.EMPLID          = JOB2.EMPLID
!          AND JOB22.COMPANY         = JOB2.COMPANY)
!  AND JOB2.EFFDT      =
!      (SELECT MAX(JOB23.EFFDT)
!         FROM PS_JOB JOB23
!        WHERE JOB23.EMPLID          = JOB2.EMPLID
!          AND JOB23.COMPANY         = JOB2.COMPANY
!          AND JOB23.EMPL_RCD        = JOB2.EMPL_RCD
!          AND JOB23.EFFDT          <= $AsOfDate)
!  AND JOB2.EFFSEQ     =
!      (SELECT MAX(JOB24.EFFSEQ)
!         FROM PS_JOB JOB24
!        WHERE JOB24.EMPLID          = JOB2.EMPLID
!          AND JOB24.COMPANY         = JOB2.COMPANY
!          AND JOB24.EMPL_RCD        = JOB2.EMPL_RCD
!          AND JOB24.EFFDT           = JOB2.EFFDT)
!end-select                                                              !HP99999
!end-procedure                                                           !HP99999
                                                                        !HP99999
begin-procedure Get-Employer-ID-Extension                               !HP99999
begin-select                                                            !HP99999
LOC.EMPLOYER_ID_EXT                                                     !HP99999
                                                                        !HP99999
  let $Employer_ID_Ext = &LOC.Employer_ID_Ext                           !HP99999
                                                                        !HP99999
FROM PS_CO_UI_RPTCD_TBL LOC                                             !HP99999
WHERE LOC.COMPANY = $Company                                            !HP99999
  AND LOC.LOCATION = $Tax_Location                                       !PUBSEC
  AND LOC.EFFDT =                                                       !HP99999
      (SELECT MAX(EFFDT)                                                !HP99999
         FROM PS_CO_UI_RPTCD_TBL                                        !HP99999
        WHERE COMPANY  = LOC.COMPANY                                    !HP99999
          AND LOCATION = LOC.LOCATION                                   !HP99999
          AND EFFDT   <= $AsOfDate)                                     !HP99999
  AND LOC.EFF_STATUS = 'A'                                              !HP99999
end-select                                                              !HP99999

do Format-Employer-ID-Ext

end-procedure                                                           !HP99999
                                                                        !HP99999
begin-procedure Insert-Work-Record                                      !HP99999
                                                                        !HP99999
  let $Txgrs_QTD = #Txgrs_QTD                                           !HP99999
  let $Nlgrs_QTD = #Nlgrs_QTD                                           !HP99999
                                                                        !HP99999
  let $err-statement1 = 'TAX810MN, Insert-Error - INSERT-WORK-RECORD'   !HP99999
  let $err-statement2 = 'Key Values: TABLE PS_R_TAX810MN' ||            !HP99999
                        ', COMPANY ' || $Company ||                     !HP99999
                        ', EMPLOYER_ID ' || $Employer_ID ||             !HP99999
                        ', NATIONAL_ID ' || $National_ID ||             !HP99999
                        ', STATE ' || $Emp_State ||                     !HP99999
                        ', EMPLID ' || $Emplid ||                       !HP99999
                        ', NAME ' || $Name ||                           !HP99999
                        ', TAX_CLASS ' || $Tax_Class ||                 !HP99999
                        ', LOCALITY ' || $Locality ||                   !HP99999
                        ', TXGRS_QTD ' || $Txgrs_QTD ||                 !HP99999
                        ', NLGRS_QTD ' || $Nlgrs_QYD                    !HP99999
                                                                        !HP99999
begin-SQL on-error=Error-Display                                        !HP99999
  INSERT INTO PS_R_TAX810MN                                             !HP99999
        (COMPANY,                                                       !HP99999
         EMPLOYER_ID,                                                   !HP99999
         NATIONAL_ID,                                                   !HP99999
         STATE,                                                         !HP99999
         EMPLID,                                                        !HP99999
         NAME,                                                          !HP99999
         TAX_CLASS,                                                     !HP99999
         LOCALITY,                                                      !HP99999
         TXGRS_QTD,                                                     !HP99999
         NLGRS_QTD)                                                     !HP99999
 VALUES ($Company,                                                      !HP99999
         $Employer_ID,                                                  !HP99999
         $National_ID,                                                  !HP99999
         $Emp_State,                                                    !HP99999
         $EmplID,                                                       !HP99999
         $Name,                                                         !HP99999
         $Tax_Class,                                                    !HP99999
         $Locality,                                                     !HP99999
         #Txgrs_QTD,                                                    !HP99999
         #Nlgrs_QTD)                                                    !HP99999
end-SQL                                                                 !HP99999
end-procedure                                                           !HP99999
                                                                        !HP99999
begin-procedure Delete-Work-File                                        !HP99999
                                                                        !HP99999
  let $err-statement1 = 'TAX810MN, Delete-Error - DELETE-WORK-FILE'     !HP99999
  let $err-statement2 = ' '                                             !HP99999
                                                                        !HP99999
begin-SQL On-Error=Error-Display                                        !HP99999
DELETE FROM PS_R_TAX810MN                                               !HP99999
end-SQL                                                                 !HP99999                                                                 !PUBSEC
                                                                        !HP99999
end-procedure                                                           !HP99999

begin-procedure Get-Quarter-Dates

    move &TX.Balance_Year   to $EffYear 9999
    move &TX.Balance_Qtr    to $EffQuarter 9

    let #EffYear       = to_number($EffYear)
    let #EffQuarter    = to_number($EffQuarter)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            break
        when-other
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
    end-evaluate

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')

end-procedure

begin-procedure Get-Monthly-Employment-Indicator

begin-SELECT
A1.COMPANY
A1.PAYGROUP
A1.PAY_END_DT
A1.EMPLID
A1.EMPL_RCD
A1.EARNS_BEGIN_DT
A1.EARNS_END_DT
A1.PAY_LINE_STATUS

   move &A1.EARNS_BEGIN_DT to $EarnsBD
   move &A1.EARNS_END_DT   to $EarnsED

   do Format-DateTime($EarnsBD, $EarnsBeginDt,{DEFCMP},'','')
   do Format-DateTime($EarnsED, $EarnsEndDt,{DEFCMP},'','')

   if $EarnsBeginDt <= $12thOfMonth1
     if $EarnsEndDt >= $12thOfMonth1
          let $MonEmpFlg1 = '1'
      end-if
   end-if

    if $EarnsBeginDt <= $12thOfMonth2
      if $EarnsEndDt >= $12thOfMonth2
          let $MonEmpFlg2 = '1'
      end-if
    end-if

    if $EarnsBeginDt <= $12thOfMonth3
      if $EarnsEndDt >= $12thOfMonth3
           let $MonEmpFlg3 = '1'
       end-if
    end-if

 FROM PS_PAY_EARNINGS A1, PS_PAY_CHECK C1
WHERE A1.COMPANY = $Company
  AND A1.EMPLID  = $EmplID
  AND A1.PAY_END_DT BETWEEN $First_Day_Of_Quarter AND $Last_Day_Of_Quarter
  AND A1.PAY_LINE_STATUS = 'F'
  AND (($12th_Of_1st_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_2nd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT)
    OR ($12th_Of_3rd_Month BETWEEN A1.EARNS_BEGIN_DT AND A1.EARNS_END_DT))
  AND A1.COMPANY = C1.COMPANY
  AND A1.PAYGROUP = C1.PAYGROUP
  AND A1.PAY_END_DT = C1.PAY_END_DT
  AND A1.OFF_CYCLE = C1.OFF_CYCLE
  AND A1.PAGE_NUM = C1.PAGE_NUM
  AND A1.LINE_NUM = C1.LINE_NUM
  AND C1.PAYCHECK_STATUS IN ('F','A','R')
end-SELECT
end-procedure

begin-procedure Format-Employer-ID-SUT
  let $aflag = ''
  let $ovrs1 = ''
  let #icntr = 1
  let #lngth = Length(&Employer_ID_SUT) + 1
  while #icntr < #lngth
      let $ifld = Substr(&Employer_ID_SUT,#icntr,1)
      let #f_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$ifld, 1)
       if #f_Inst <> 0
          let $ovrs1 =  $ovrs1 || $ifld
         let #a_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$ifld, 1)
         if #a_Inst <> 0
            let $aflag = 'Y'
         end-if
       end-if
       add 1 to #icntr
  end-while

  if $aflag = 'Y'
     display ''
     display '*******************************************************************'
     display 'WARNING: State Unemployment ID ' noline
     display $ovrs1                            noline
     display ' contains non-numeric values.'
     display '*******************************************************************'
  end-if

  let #lngth = Length($ovrs1)
  if #lngth < 8
      let #icntr = 1
      let $ovrs2 = ''

      let #dlngth = 9 - #lngth
      while #icntr < #dlngth
        let $ovrs2 =  $ovrs2 || '0'
        add 1 to #icntr
      end-while
      let $ovrs2 =  $ovrs2 || Substr($ovrs1,1,#lngth)

      let $Emplyr_ID_SUT = Substr($ovrs2,1,8)
  else
      let $Emplyr_ID_SUT = Substr($ovrs1,1,8)
      if #lngth > 8
         display '***************************************************************'
         display 'WARNING: State Unemployment ID ' noline
         display $ovrs1                            noline
         display ' is more than 8 digits'
         display '         in the Company State Tax Table.'
         display '***************************************************************'
      end-if
  end-if

end-procedure

begin-procedure Format-Employer-ID-Ext
  let $aflag = ''
  let $ovrs1 = ''
  let #icntr = 1
  let #lngth = Length($Employer_ID_Ext) + 1
  while #icntr < #lngth
      let $ifld = Substr($Employer_ID_Ext,#icntr,1)
      let #f_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$ifld, 1)
       if #f_Inst <> 0
          let $ovrs1 =  $ovrs1 || $ifld
         let #a_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',$ifld, 1)
         if #a_Inst <> 0
            let $aflag = 'Y'
         end-if
       end-if
       add 1 to #icntr
  end-while

  if $aflag = 'Y'
     display ''
     display '*******************************************************************'
     display 'WARNING: Employer ID Extension ' noline
     display $ovrs1                            noline
     display ' contains non-numeric values.'
     display '*******************************************************************'
  end-if

  let #lngth = Length($ovrs1)
  if #lngth < 4
      let #icntr = 1
      let $ovrs2 = ''

      let #dlngth = 5 - #lngth
      while #icntr < #dlngth
        let $ovrs2 =  $ovrs2 || '0'
        add 1 to #icntr
      end-while
      let $ovrs2 =  $ovrs2 || Substr($ovrs1,1,#lngth)

      let $Emplyr_ID_Ext = Substr($ovrs2,1,4)
  else
      let $Emplyr_ID_Ext = Substr($ovrs1,1,4)
      if #lngth > 4
         display '***************************************************************'
         display 'WARNING: Employer ID Extension ' noline
         display $ovrs1                            noline
         display ' is more than 4 digits'
         display '         in the UI Report Code Table.'
         display '***************************************************************'
      end-if
  end-if

end-procedure
                                                                        !HP99999
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'geteandg.sqc'  !Get-EandG procedure                           !HP00001
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'gethours.sqc'  !Get-Hours procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'stderror.sqc'  !Routine for error display                     !HP99999
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
