!***********************************************************************
!  FPA6INC.SQC  : miscellaneous functions for the retroactivity process*
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2006/07/19:12:47:35                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

!***************************************************************
!
!  Init-retrotmp: Init retroactive actions temporary table
!
!***************************************************************

BEGIN-PROCEDURE init-retrotmp

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Init-retrotmp '
#ENDIF

let $sql-statement = 'FPA6INC.SQC, Init-retrotmp, delete '
begin-SQL On-Error=SQL-Error

delete from PS_FPAEERETRO_TMP

END-SQL

END-PROCEDURE init-retrotmp



!***************************************************************
!
!  insert-retrotmp: Transfer retroactive movements from
!                   FPAEERETROSP to FPAEERETROTMP
!
!***************************************************************
BEGIN-PROCEDURE insert-retrotmp( $p-emplid,#p-emplrcd,$p-effdt,#p-effseq )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / insert-retrotmp '
   display ' Employee : ' noline
   display $p-emplid noline
   display ' Empl record : ' noline
   display #p-emplrcd noline
   display ' EFFDT : ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Insert-retrotmp, Insert '
BEGIN-SQL On-error= sql-error

INSERT INTO PS_FPAEERETRO_TMP (EMPLID, EMPL_RCD, EFFDT, EFFSEQ, FP_CNL_ROW, FP_INST_STAT, FP_ACTION_REF, FP_NOTIF_REF, ACTION, ACTION_REASON, FP_TBL_CD) 
select EMPLID, EMPL_RCD, EFFDT, EFFSEQ, FP_CNL_ROW, FP_INST_STAT, FP_ACTION_REF, FP_NOTIF_REF, ACTION, ACTION_REASON, FP_TBL_CD from PS_FPAEERETROSP
where EMPLID=$p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq

END-SQL

Do delete-retrosp($p-emplid, #p-emplrcd, $p-effdt, #p-effseq)

END-PROCEDURE insert-retrotmp



!***************************************************************
!
!  delete-retrosp: delete one retroactive movement into FPAEERETROSP
!
!***************************************************************

BEGIN-PROCEDURE delete-retrosp( $p-emplid,#p-emplrcd,$p-effdt,#p-effseq )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / delete-retrosp '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, delete-retrotmp, delete '
begin-SQL On-Error=SQL-Error

delete from PS_FPAEERETROSP
where EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq

END-SQL

END-PROCEDURE delete-retrosp



!***************************************************************
!
!  FPA600-Updt-Career: update the retroactive action
!
!***************************************************************

BEGIN-PROCEDURE FPA600-Updt-Career ( $p-emplid,#p-emplrcd,$p-effdt,#p-effseq )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / FPA600-Updt-Career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, FPA600-Updt-Career, Update '
begin-SQL On-Error=SQL-Error

UPDATE PS_FPAEECAREER
SET FP_RETROSPECT = 'N',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq

END-SQL

END-PROCEDURE FPA600-Updt-Career



!***************************************************************
!
!  trace-retro: trace the retroactive movement processing
!
!***************************************************************
BEGIN-PROCEDURE trace-retro ( #fhnd, $p-emplid, #p-emplrcd,$p-effdt,
                              #p-effseq, $p-action )
#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Trace-retro '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq noline
   display ' ACTION: ' noline
   display $p-action
#ENDIF


! Add of an empty row
!--------------------
let $msg_lg = ' '
WRITE #fhnd FROM $msg_lg:79

move #p-emplrcd to $p-emplrcd 99
move #p-effseq to $p-effseq 99

let $msg_lg = '== Mvt Rétro == Employee: '||$p-emplid||'; Empl Record: '
let $msg_lg = $msg_lg||$p-emplrcd||'; Effdt: '||$p-effdt||'/'||$p-effseq
let $msg_lg = $msg_lg ||'; ACTION : '||$p-action

WRITE #fhnd FROM $msg_lg:79

END-PROCEDURE trace-retro



!***************************************************************
!
!  trace-sup-career: trace delete of an action due to a retroactive
!                    movement processing
!
!***************************************************************
BEGIN-PROCEDURE trace-sup-career ( #fhnd, $p-emplid, #p-emplrcd,$p-effdt,
                                   #p-effseq, $p-action, $p-retro,
                                   $p-req, $p-abrog )
#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Trace-sup-career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq noline
   display ' ACTION: ' noline
   display $p-action noline
   display ' Retro? : ' noline
   display $p-retro  noline
   display ' Request ? : ' noline
   display $p-req noline
   display ' Abrog ? ' noline
   display $p-abrog
#ENDIF

move #p-emplrcd to $p-emplrcd 999
move #p-effseq to $p-effseq 999

let $msg_lg = '   Delete =  Effdt: '||$p-effdt||'/ '||$p-effseq
let $msg_lg = $msg_lg||'; ACTION: '||$p-action
if $p-retro = 'Y'
   let $msg_lg = $msg_lg || ' (rétro) '
end-if
if $p-req = 'Y'
   let $msg_lg = $msg_lg || ' (demande) '
end-if
if $p-abrog = 'Y'
   let $msg_lg = $msg_lg || ' (abrog) '
end-if

WRITE #fhnd FROM $msg_lg:79

END-PROCEDURE trace-sup-career



!***************************************************************
!
!  find-prty-act: determine wether the action next to the retroactive mvt
!                 will provoke the process to stop or the process deletion
!
!***************************************************************
BEGIN-PROCEDURE  find-prty-act ( $p-action1 , $p-action2 , :$p-act )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / find-prty-act '
   display 'Action initiale: ' noline
   display $p-action1 noline
   display ' Action suivante ' noline
   display $p-action2  noline
#ENDIF


let $p-act = ' '

let $_sql-statement = 'FPA6INC.SQC, Find-Prty-Act, Select '
BEGIN-SELECT  On-Error=SQL-Error
FP_UP_CN_END

              let $p-act = rtrim(&FP_UP_CN_END,' ')

FROM PS_FPMACTPRTY_TBL
WHERE ACTION = $p-action1 and
      FP_ACTION_2 = $p-action2

END-SELECT

#IFDEF DEBUGI
   display ' Stop or Delete ? : ' noline
   display $p-act
#ENDIF

END-PROCEDURE find-prty-act



!***************************************************************
!
!  select-abrog: select the orders having to be deleted
!
!***************************************************************
BEGIN-PROCEDURE  select-abrog ( $p-emplid, #p-emplrcd, $p-effdt,
                                #p-effseq, $p-notif ,:$p-abrog)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / select-abrog '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq noline
   display ' Order : ' noline
   display $p-notif
#ENDIF


let $p-abrog = 'N'

let $_sql-statement = 'FPA6INC.SQC, Select-abrog, Select '
BEGIN-SELECT On-Error=SQL-Error

{DATEOUT-PREFIX}A.FP_IDVEDIT_DT{DATEOUT-SUFFIX} &FP_IDVEDIT_DT
{DATEOUT-PREFIX}A.FP_COLEDIT_DT{DATEOUT-SUFFIX} &FP_COLEDIT_DT
A.ACTION                                        &ACTION
A.FP_RETURN_R                                   &FP_RETURN_R

        ! Order has been edited : action must be abrogated
        !-------------------------------------------------
        if not isnull(&FP_IDVEDIT_DT) or not isnull(&FP_COLEDIT_DT)

             DO select-EESTATUS ($p-emplid, #p-emplrcd, $p-effdt, $EESTATUS)

             let $abrog_action = rtrim(&ACTION, ' ')
             let $abrog_return = rtrim(&FP_RETURN_R,' ')
             if $abrog_return = ''
                let $abrog_return = ' '
             end-if

             Do edit-abrog( $p-emplid, #p-emplrcd, $p-effdt, #p-effseq,
                            $EESTATUS, $abrog_action , $p-notif, $abrog_return)


             Do Upd-notif( $p-emplid, #p-emplrcd, $p-notif, 'Y')

             let $p-abrog = 'Y'

        else

        ! Order hasn't been edited
        !-------------------------
             Do Upd-notif ( $p-emplid, #p-emplrcd, $p-notif, 'N')

             let $p-abrog = 'N'

        end-if

FROM PS_FPAEENOTICE A

WHERE A.EMPLID = $p-emplid and
      A.EMPL_RCD = #p-emplrcd and
      A.FP_NOTIF_REF = $p-notif

END-SELECT

END-PROCEDURE select-abrog



!***************************************************************
!
!  upd-notif: update the Order table
!
!***************************************************************
BEGIN-PROCEDURE  upd-notif ( $p-emplid, #p-emplrcd, $p-notif, $p-ABROG)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / upd-notif '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' Order: ' noline
   display $p-notif noline
   display ' Abrog ?: ' noline
   display $p-ABROG
#ENDIF

! The abrogated action is stored in the career
! history table
!-------------------------------------------
let $set = 'FP_TBL_CD = ''H'', LAST_UPDATE_DATE = {DATEIN-PREFIX}''' || $_AsOfToday || '''{DYN-DateIn-Suffix}'

! Indicate if order has been abrogated or not
!--------------------------------------------
if $p-ABROG = 'Y'
   let $set = $set ||' , FP_DEC_ABROG = ''Y'' , FP_DEC_ABROG_DT = '
   let $set = $set ||'{DATEIN-PREFIX}'''|| $_AsOfToday ||'''{DYN-DateIn-Suffix} , FP_EDIT_ABROG = ''Y''  '
end-if

let $_sql-statement = 'FPA6INC.SQC, Upd-notif, Update '
BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPAEENOTICE
SET  [$set]

WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      FP_NOTIF_REF = $p-notif

END-SQL

END-PROCEDURE upd-notif



!***************************************************************
!
!  upd-request: update the Requet table
!
!***************************************************************
BEGIN-PROCEDURE  upd-request ( $p-emplid, #p-emplrcd, $p-request )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / upd-request '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' Request: ' noline
   display $p-request
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Upd-request, Update '
BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPAEEREQUEST

SET  FP_TBL_CD = 'H' ,
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      FP_ACTION_REF = $p-request

END-SQL

END-PROCEDURE upd-request



!***************************************************************
!
!  edit-abrog: prepare abrogation editions (read in FPMSTATACTDOC )
!              into FPAEEFLAT (lit dans FPMSTATACTDOC ) dans FPAEEFLAT
!
!***************************************************************

BEGIN-PROCEDURE  edit-abrog ( $p-emplid, #p-emplrcd, $p-effdt, #p-effseq,
                              $p-status, $p-action, $p-notif , $p-return-r)
#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / edit-abrog '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq noline
   display ' Statut: ' noline
   display $p-status noline
   display ' Action: ' noline
   display $p-action noline
   display ' Order: ' noline
   display $p-notif   noline
   display 'Return-R: ' noline
   display $p-return-r
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, edit-abrog, Select '

! FPAEEFLAT fields initialization
!--------------------------------
Do Init-Fields                  ! FPA110.SQC

let $_orig = 'R'
let $_Emplid = $p-emplid
let #_empl_rcd = #p-emplrcd
let $_Notif_Ref = $p-notif
let $_Return_r = $p-return-r
let #_RefcolPS = 0
let $_action = $p-action
let $_TblCd = 'C'

! Init the reference date. This date is used to select data needed in order
! to edit abrogations in tables C1,C2,C3,C4, etc.
!----------------------------------------------------------------------
let $_CurrDt = $p-effdt

let $_C1Statut_Where = ''

let $p-effseq = to_char(#p-effseq)

let $_C2_where = 'and C2.EFFSEQ = ' || $p-effseq

let $_C4_where = 'and C4.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEEPOST_TBL WW
                          where WW.EMPLID =C4.EMPLID
                          and   WW.EMPL_RCD=C4.EMPL_RCD
                          and   WW.EFFDT=C4.EFFDT)'

let $_C5_where = 'and C5.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEESALARY WW
                          where WW.EMPLID =C5.EMPLID
                          and   WW.EMPL_RCD=C5.EMPL_RCD
                          and   WW.EFFDT=C5.EFFDT)'

let $_C6_where = 'and C6.EFFSEQ=(Select max(WW.EFFSEQ) from PS_FPAEEWORKRT WW
                          where WW.EMPLID =C6.EMPLID
                          and   WW.EMPL_RCD=C6.EMPL_RCD
                          and   WW.EFFDT=C6.EFFDT)'


DO Get-CONTRAT         ! C1  cf. FPA110.SQR
Do Get-FPAEECAREER     ! C2  cf. FPA110.SQR
Do Get-CAREER-FPA600 ($p-emplid, #p-emplrcd, $p-effdt, #p-effseq )  ! C2
Do Get-FPAEELEGALSTAT  ! C3  cf. FPA110.SQR
Do Get-FPAEEPOST       ! C4  cf. FPA110.SQR
Do Get-FPAEESALARY     ! C5  cf. FPA110.SQR
Do Get-FPAEEWORKRT     ! C6  cf. FPA110.SQR
Do Get-FPMRANK_TBL     ! C7  cf. FPA110.SQR


! Init the abrogation effdt
! -------------------------
let $_CurrDt = $_AsOfToday

BEGIN-SELECT  On-Error=SQL-Error

FP_WORD01   &FP_WORD01
FP_WORD02   &FP_WORD02
FP_WORD03   &FP_WORD03
FP_WORD04   &FP_WORD04
FP_WORD05   &FP_WORD05


            if not isblank(&FP_WORD01)

                   let $_Word = rtrim(&FP_WORD01,' ')
                   do insert-fpaeeflat

             end-if
             if not isblank(&FP_WORD02)

                   let $_Word = rtrim(&FP_WORD02,' ')
                   do insert-fpaeeflat

             end-if
             if not isblank(&FP_WORD03)

                    let $_Word = rtrim(&FP_WORD03,' ')
                    do insert-fpaeeflat

             end-if
             if not isblank(&FP_WORD04)

                    let $_Word = rtrim(&FP_WORD04,' ')
                    do insert-fpaeeflat

             end-if
             if not isblank(&FP_WORD05)

                    let $_Word = rtrim(&FP_WORD05,' ')
                    do insert-fpaeeflat

             end-if



FROM PS_FPMSTATACTDOC
WHERE  FP_STATUSEE_CD = $p-status and
       ACTION = $p-action and
       FP_TYP_NOT = 'A'

END-SELECT

END-PROCEDURE edit-abrog



!***************************************************************
!
!  Get-CAREER-FPA600: search in FPAEECAREER in a different way than
!                     GEt-FPAEECAREER
!***************************************************************

BEGIN-PROCEDURE  Get-CAREER-FPA600 ($p-emplid, #p-emplrcd, $p-effdt, #p-effseq )
#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Get-CAREER-FPA600  '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Get-CAREER-FPA600, Select '
BEGIN-SELECT On-Error=Sql-error

A.ACTION_REASON
A.FP_ACTION_REF

             let $_C2.ACTION_REASON = rtrim(&A.ACTION_REASON,' ')
             if  $_C2.ACTION_REASON = ''
                let $_C2.ACTION_REASON = ' '
             end-if
             let $_Action_Ref = rtrim(&A.FP_ACTION_REF,' ')
             if $_Action_Ref = ''
                let $_Action_Ref = ' '
             end-if
             display 'Action Ref: ' noline
             display $_Action_Ref

FROM PS_FPAEECAREER A

WHERE A.EMPLID = $p-emplid and
      A.EMPL_RCD = #p-emplrcd and
      A.EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      A.EFFSEQ = #p-effseq

END-SELECT

END-PROCEDURE Get-CAREER-FPA600



!***************************************************************
!
!  insert-eeflat: insert an edition in FPAEEFLAT
!
!***************************************************************

BEGIN-PROCEDURE  insert-FPAEEFLAT
#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / insert-fpaeeflat '

Display $Orig
Display $Emplid
Display $Notif_Ref
Display $Action_Ref
Display $CurrDt
Display $tblCd
Display $Word
Display $action
Display $C2.ACTION_REASON
Display #RefcolPS
Display $Return_r
Display $C1.CONTRACT_TYPE
Display $C1.FP_CONTRACT_RSN
Display $C1.PROBATION_DT
Display $C1.FP_STATUSEE_CD
Display $C1.FP_TRNE_SVT_CD
Display $C1.FP_TENURE_DT
Display $C1.FP_TENURE_NO_DT
Display $C1.FP_FIRST_PRO_DT
Display #C1.FP_FIRST_DUR
Display $C1.FP_FIRST_TYP
Display $C1.FP_TENPD_BRK
Display $C1.FP_TEN_ACCESS
Display $C2.FP_RANK_CD
Display $C2.FP_STEP_CD
Display #C2.FP_SENTOSTPDY
Display #C2.FP_SENTOSTPMN
Display #C2.FP_SENTOSTPYR
Display #C2.FP_SENINSTPDY
Display #C2.FP_SENINSTPMN
Display #C2.FP_SENINSTPYR
Display $C2.FP_CORPS_CD
Display $C2.FP_CHG_COR_DT
Display $C2.FP_CATG_FP
Display $C2.FP_TRAINEE
Display $C2.FP_CATG_LEVEL
Display $C2.FP_NOMINATION_DT
Display $C2.FP_SANCTION
Display $C2.FP_DOWN_GRA
Display $C2.FP_PROPD_BRK
Display $C2.FP_PRO_ACCESS
Display $C8.FP_RANK_CD
Display $C8.FP_STEP_CD
Display $C3.FP_LEGALSTAT_CD
Display $C3.FP_SCNDMT_CD
Display $C3.FP_SCND_TYP
Display #C3.FP_CAREFRZPCT
Display $C3.FP_RETURN_CD
Display $C3.FP_PR_LEGSTA
Display $C4.DEPTID
Display $C4.LOCATION
Display $C4.FP_INSTALL_DT
Display $C4.COMPANY
Display $C4.ESTABID
Display $C4.JOBCODE
Display #C5.FP_GROSS_IND
Display #C5.FP_INCS_IND
Display #C5.ANNUAL_RT
Display #C5.MONTHLY_RT
Display #C5.COMPRATE
Display $C7.FP_MATRIX_TYP
Display $C7.FP_MATRIX_CD
Display $C7.FP_SCALE_CD
Display $C6.FULL_PART_TIME
Display #C6.STD_HOURS
Display $C6.FP_PT_PCT
#ENDIF

let $sql-statement = 'FPA6INC.SQC, Insert-fpaeeflat, Insert '
Begin-SQL On-Error=SQL-Error

Insert  into PS_FPAEEFLAT_TBL
(FP_ORIG ,EMPLID , FP_NOTIF_REF , FP_ACTION_REF, EFFDT , FP_TBL_CD ,
FP_WORD , ACTION,ACTION_REASON ,FP_REFCOL_PS ,FP_RETURN_R ,
CONTRACT_TYPE , FP_CONTRACT_RSN , PROBATION_DT , FP_STATUSEE_CD ,
FP_TRNE_SVT_CD ,FP_TENURE_DT , FP_TENURE_NO_DT , FP_FIRST_PRO_DT ,
FP_FIRST_DUR ,FP_FIRST_TYP , FP_TENPD_BRK , FP_TEN_ACCESS ,FP_SETID_RANK,
FP_RANK_CD, FP_STEP_CD , FP_SENTOSTPDY , FP_SENTOSTPMN , FP_SENTOSTPYR,
FP_SENINSTPDY ,FP_SENINSTPMN , FP_SENINSTPYR ,FP_CORPS_CD , FP_CHG_COR_DT,
FP_CATG_FP,FP_TRAINEE, FP_CATG_LEVEL , FP_NOMINATION_DT, FP_SANCTION ,
FP_DOWN_GRA , FP_PROPD_BRK , FP_PRO_ACCESS ,FP_SETID_RK_PREC, FP_RANK_CD_PRV , FP_STEP_CD_PRV,
FP_LEGALSTAT_CD , FP_SCNDMT_CD , FP_SCND_TYP , FP_CAREFRZPCT , FP_RETURN_CD,
FP_PR_LEGSTA , DEPTID,LOCATION , FP_INSTALL_DT, COMPANY ,ESTABID , JOBCODE ,
BUSINESS_UNIT,SETID_DEPT,SETID_JOBCODE,REG_REGION,
FP_GROSS_IND , FP_INCS_IND ,ANNUAL_RT ,MONTHLY_RT , COMPRATE , FP_RES_FIELD1,
FP_RES_FIELD2 , FP_RES_FIELD3 , FULL_PART_TIME , STD_HOURS , FP_PT_PCT)
VALUES
($Orig,$Emplid,$Notif_Ref,$Action_Ref,{DATEIN-PREFIX}$CurrDt{DATEIN-SUFFIX}, $TblCd,
        $Word,$action,$C2.ACTION_REASON,#RefcolPS,$Return_r,
        $C1.CONTRACT_TYPE,$C1.FP_CONTRACT_RSN,
        {DATEIN-PREFIX}$C1.PROBATION_DT{DATEIN-SUFFIX},$C1.FP_STATUSEE_CD,
        $C1.FP_TRNE_SVT_CD,{DATEIN-PREFIX}$C1.FP_TENURE_DT{DATEIN-SUFFIX},
        {DATEIN-PREFIX}$C1.FP_TENURE_NO_DT{DATEIN-SUFFIX},
        {DATEIN-PREFIX}$C1.FP_FIRST_PRO_DT{DATEIN-SUFFIX},#C1.FP_FIRST_DUR,
        $C1.FP_FIRST_TYP,$C1.FP_TENPD_BRK,$C1.FP_TEN_ACCESS,$C2.FP_SETID_RANK,
        $C2.FP_RANK_CD,$C2.FP_STEP_CD,#C2.FP_SENTOSTPDY,#C2.FP_SENTOSTPMN,
        #C2.FP_SENTOSTPYR,#C2.FP_SENINSTPDY,#C2.FP_SENINSTPMN,
        #C2.FP_SENINSTPYR,
        $C2.FP_CORPS_CD,{DATEIN-PREFIX}$C2.FP_CHG_COR_DT{DATEIN-SUFFIX},
        $C2.FP_CATG_FP,$C2.FP_TRAINEE,
        $C2.FP_CATG_LEVEL,{DATEIN-PREFIX}$C2.FP_NOMINATION_DT{DATEIN-SUFFIX},
        $C2.FP_SANCTION,$C2.FP_DOWN_GRA,$C2.FP_PROPD_BRK,$C2.FP_PRO_ACCESS,
        $C8.FP_SETID_RANK, $C8.FP_RANK_CD,$C8.FP_STEP_CD,
        $C3.FP_LEGALSTAT_CD ,$C3.FP_SCNDMT_CD,$C3.FP_SCND_TYP,
        #C3.FP_CAREFRZPCT,$C3.FP_RETURN_CD,$C3.FP_PR_LEGSTA,
        $C4.DEPTID,$C4.LOCATION,{DATEIN-PREFIX}$C4.FP_INSTALL_DT{DATEIN-SUFFIX},
        $C4.COMPANY,$C4.ESTABID,$C4.JOBCODE,$C4.BUSINESS_UNIT,$C4.SETID_DEPT,$C4.SETID_JOBCODE,$C4.REG_REGION,
        #C5.FP_GROSS_IND,#C5.FP_INCS_IND,#C5.ANNUAL_RT,#C5.MONTHLY_RT,
        #C5.COMPRATE,
        $C7.FP_MATRIX_TYP,$C7.FP_MATRIX_CD,$C7.FP_SCALE_CD,
        $C6.FULL_PART_TIME,#C6.STD_HOURS,$C6.FP_PT_PCT)

end-SQL

END-PROCEDURE insert-FPAEEFLAT



!***************************************************************
!
!  select-EESTATUS: select the employee status
!
!***************************************************************
BEGIN-PROCEDURE  select-eestatus ($p-emplid,#p-emplrcd,$p-effdt,:$p-status)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / select-eestatus '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, select-eestatus, Select '
BEGIN-SELECT  On-Error=SQL-Error

A.FP_STATUSEE_CD     &FP_STATUSEE_CD

                let $p-status = rtrim(&FP_STATUSEE_CD ,' ')

FROM PS_FPAEESTATUS A

WHERE A.EMPLID = $p-emplid and
      A.EMPL_RCD = #p-emplrcd and
      A.EFFDT = (select max(B.EFFDT) from PS_FPAEESTATUS B where
               B.EMPLID = $p-emplid and B.EMPL_RCD = #p-emplrcd and
               B.EFFDT <= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX})

END-SELECT


#IFDEF DEBUGI
   display ' Statut: ' noline
   display $p-status
#ENDIF

END-PROCEDURE select-eestatus



!***************************************************************
!
!  suspend-bonus : suspend bonus concerning a given Grade and Step
!
!***************************************************************
BEGIN-PROCEDURE  suspend-bonus ( $p-emplid, #p-emplrcd, $p-rank, $p-step,
                                 $p-debut-dt, $p-fin-dt)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / suspend-bonus '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' Grade: ' noline
   display $p-rank noline
   display ' Step: ' noline
   display $p-step noline
   display ' Begin date: ' noline
   display $p-debut-dt noline
   display ' End Date: ' noline
   display $p-fin-dt
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Suspend-bonus, Update '

move #p-emplrcd to $p-emplrcd

let $clause-where = ' EMPLID = '''||$p-emplid||''' and EMPL_RCD = '
let $clause-where = $clause-where||$p-emplrcd||' and FP_RANK_CD = '''
let $clause-where = $clause-where||$p-rank||''' and FP_STEP_CD = '''||$p-step
let $clause-where = $clause-where||''' and EFFDT >= {DATEIN-PREFIX}'''||$p-debut-dt||''' '
let $clause-where = $clause-where||'{DYN-DateIn-Suffix}'

if not isnull($p-fin-dt)
    let $clause-where = $clause-where||' and EFFDT <= {DATEIN-PREFIX}'''||$p-fin-dt||''' '
    let $clause-where = $clause-where||'{DYN-DateIn-Suffix}'
end-if

#IFDEF DEBUGI
   display '-- Susp. Bonus clause-where: ' noline
   display $clause-where
#ENDIF

BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPABONUS_TBL
SET FP_IN_ABEYANCE = 'A',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE [$clause-where]

END-SQL

BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPAEE_PREMIUM
SET FP_IN_ABEYANCE = 'A',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE [$clause-where]

END-SQL





END-PROCEDURE suspend-bonus



!***************************************************************
!
!  historise-career:
!
! Description:
! - Archive action in FPAECAREE_HIST
! - Delete action from FPAEECAREER
! - When retroactive movmnt, delete action from FPAEERETROSP
!
!***************************************************************
BEGIN-PROCEDURE  historise-career ( $p-emplid,#p-emplrcd,$p-effdt,#p-effseq)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / historise_career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' / ' noline
   display #p-effseq
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Historise-career, Insert ou Delete '
BEGIN-SQL  On-Error=SQL-Error

INSERT INTO PS_FPAEECAREE_HIST
(EMPLID ,EMPL_RCD , EFFDT , EFFSEQ , FP_ACTION_REF , FP_NOTIF_REF ,
 FP_CNL_ROW, FP_INST_STAT ,ACTION , ACTION_REASON ,FP_RANK_CD , FP_STEP_CD ,
FP_STEP_NO, FP_GROSS_IND, FP_INCS_IND, FP_PROM_LCK ,
FP_SENTOSTPDY , FP_SENTOSTPMN , FP_SENTOSTPYR , FP_SENINSTPDY,
FP_SENINSTPMN , FP_SENINSTPYR , FP_TRUESEN_DY, FP_TRUESEN_MN, FP_TRUESEN_YR,
FP_SENTRANSDY ,FP_SENTRANSMN , FP_SENTRANSYR ,FP_SENKEPT_DY ,FP_SENKEPT_MN,
FP_SENKEPT_YR ,FP_SENRAN_DY,FP_SENRAN_MN,FP_SENRAN_YR,FP_SENCOR_DY,FP_SENCOR_MN,
FP_SENCOR_YR,FP_DURSTEP_DY,FP_DURSTEP_MN,FP_DURSTEP_YR,FP_DURRAN_DY,FP_DURRAN_MN,
FP_DURRAN_YR,FP_DURCOR_DY,FP_DURCOR_MN,FP_DURCOR_YR,FP_SENEQSTP_DY,FP_SENEQSTP_MN,
FP_SENEQSTP_YR,FP_SENENTRK_DY,FP_SENENTRK_MN,FP_SENENTRK_YR,FP_SENENTCRP_DY,
FP_SENENTCRP_MN,FP_SENENTCRP_YR,FP_SENENTCTG_DY,FP_SENENTCTG_MN,FP_SENENTCTG_YR,
FP_SEN_CALC, FP_CLD_INST ,FP_CLD_STEP, FP_FOR_PROM_DT , FP_STEP_END_DT,
FP_RK_ENT_DT, FP_CORPS_CD , FP_CHG_COR_DT ,FP_CATG_FP , FP_TRAINEE , FP_TRNE_POSN ,
FP_CATG_LEVEL, FP_CHG_IND ,FP_APPL_SAL_DT ,FP_ROW_CD, FP_NOMINATION_DT,
FP_RK_TRIALPD ,FP_RK_PD_END_DT ,FP_SANCTION , FP_DOWN_GRA, FP_UPDT_PR_DT ,
 FP_PROM_OK , FP_PROPD_BRK , FP_PRO_ACCESS , FP_SETID_RANK,FP_NX_STP_CD,FP_EQUIV_STEP,
FP_STFBDG_LVL1,FP_STFBDG_LVL3,FP_SETID_CA,FP_COMM_ACNT_ID, FP_RETROSPECT ,FP_TBL_CD,
LAST_UPDATE_DATE)

SELECT
EMPLID ,EMPL_RCD , EFFDT , EFFSEQ , FP_ACTION_REF , FP_NOTIF_REF ,
 FP_CNL_ROW, FP_INST_STAT ,ACTION , ACTION_REASON ,FP_RANK_CD , FP_STEP_CD ,
FP_STEP_NO, FP_GROSS_IND, FP_INCS_IND, FP_PROM_LCK ,
FP_SENTOSTPDY , FP_SENTOSTPMN , FP_SENTOSTPYR , FP_SENINSTPDY,
FP_SENINSTPMN , FP_SENINSTPYR , FP_TRUESEN_DY, FP_TRUESEN_MN, FP_TRUESEN_YR,
FP_SENTRANSDY ,FP_SENTRANSMN , FP_SENTRANSYR ,FP_SENKEPT_DY ,FP_SENKEPT_MN,
FP_SENKEPT_YR ,FP_SENRAN_DY,FP_SENRAN_MN,FP_SENRAN_YR,FP_SENCOR_DY,FP_SENCOR_MN,
FP_SENCOR_YR,FP_DURSTEP_DY,FP_DURSTEP_MN,FP_DURSTEP_YR,FP_DURRAN_DY,FP_DURRAN_MN,
FP_DURRAN_YR,FP_DURCOR_DY,FP_DURCOR_MN,FP_DURCOR_YR,FP_SENEQSTP_DY,FP_SENEQSTP_MN,
FP_SENEQSTP_YR,FP_SENENTRK_DY,FP_SENENTRK_MN,FP_SENENTRK_YR,FP_SENENTCRP_DY,
FP_SENENTCRP_MN,FP_SENENTCRP_YR,FP_SENENTCTG_DY,FP_SENENTCTG_MN,FP_SENENTCTG_YR,
FP_SEN_CALC,FP_CLD_INST ,FP_CLD_STEP, FP_FOR_PROM_DT , FP_STEP_END_DT,
FP_RK_ENT_DT, FP_CORPS_CD , FP_CHG_COR_DT ,FP_CATG_FP , FP_TRAINEE , FP_TRNE_POSN ,
FP_CATG_LEVEL, FP_CHG_IND ,FP_APPL_SAL_DT ,FP_ROW_CD, FP_NOMINATION_DT,
FP_RK_TRIALPD ,FP_RK_PD_END_DT ,FP_SANCTION , FP_DOWN_GRA, FP_UPDT_PR_DT ,
 FP_PROM_OK , FP_PROPD_BRK , FP_PRO_ACCESS , FP_SETID_RANK, FP_NX_STP_CD,FP_EQUIV_STEP,
FP_STFBDG_LVL1,FP_STFBDG_LVL3,FP_SETID_CA,FP_COMM_ACNT_ID ,FP_RETROSPECT ,FP_TBL_CD,
LAST_UPDATE_DATE

FROM PS_FPAEECAREER R

WHERE R.EMPLID = $p-emplid and
      R.EMPL_RCD = #p-emplrcd and
      R.EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      R.EFFSEQ = #p-effseq

END-SQL


BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPAEECAREE_HIST
SET LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq ;

END-SQL


BEGIN-SQL  On-Error=SQL-Error

DELETE FROM PS_FPAEECAREER
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq ;

END-SQL


BEGIN-SQL  On-Error=SQL-Error

delete from PS_FPAEERETROSP
where EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #p-effseq

END-SQL

END-PROCEDURE historise-career



!***************************************************************
!
!  Reconstitue-Career :
!
!***************************************************************
BEGIN-PROCEDURE  Reconstitue-Career ( $p-emplid,#p-emplrcd,
                                      $p-deb-effdt, $p-fin-effdt)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Reconstitue-Career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' Period : [' noline
   display $p-deb-effdt noline
   display ' ; ' noline
   display $p-fin-effdt noline
   display ']'
#ENDIF

let $avanc-stop = 'N'


! Select the first career instance inferior or egal to the begin date
! Advancement period can be distinct from the period given in parameter
!----------------------------------------------------------------------
let $pre-avanc-effdt = $p-deb-effdt

Do Prepare-avanc ($p-emplid, #p-emplrcd,$pre-avanc-effdt )


while ( $avanc-stop = 'N' )

    ! Seniority calculation before advancement
    !-----------------------------------------

    let $_effdt = $pre-avanc-effdt
    let #_effseq = #effseq

    Do Anciennete

    #IFDEF DEBUGI
        DISPLAY '*************$pre-avanc-effdt : ' noline
        display $pre-avanc-effdt
    #ENDIF


    ! Bonus reallocation before calculation of the advancement date
    !--------------------------------------------------------------
    Do Reaffecte-bonus($p-emplid,#p-emplrcd,$pre-avanc-effdt,$p-fin-effdt)

    ! Advancement date calculation
    !-----------------------------
    Do Calcule-date-avanc($p-emplid,#p-emplrcd,$pre-avanc-effdt,$date-avanc)

    ! Test if the calculate advancement is include in the retroactivity period
    ! ------------------------------------------------------------------------

    Do Convert-To-DTU-Date($date-avanc,$date-avanc-dtu)
    Do Convert-To-DTU-Date($p-fin-effdt,$p-fin-effdt-dtu)
    display $date-avanc-dtu
    display $p-fin-effdt-dtu

    if $date-avanc-dtu > $p-fin-effdt-dtu or isnull($date-avanc)

        let $avanc-stop = 'Y'

    else

        Do Execute-avanc-auto ($p-result-ok)



        if $p-result-ok = 'N'

            ! If advancement is not occured, process is stopped
            !--------------------------------------------------
            let $avanc-stop = 'Y'
        else

            let $pre-avanc-effdt = $date-avanc
        end-if

    end-if

end-while

END-PROCEDURE Reconstitue-Career



!***************************************************************
!
! Prepare-avanc :
! - Search for the last career instance inferior or egal to the begin date of period
! - Open the instance to allow is processing by FPA005
!
!***************************************************************
BEGIN-PROCEDURE  Prepare-avanc ( $p-emplid,#p-emplrcd,:$p-effdt )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Prepare-avanc  '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Prepare-avanc, Select '
begin-select On-Error=SQL-Error
{DATEOUT-PREFIX}A1.EFFDT{DATEOUT-SUFFIX} &A1.EFFDT
A1.EFFSEQ       &A1.EFFSEQ

           let $p-effdt  = &A1.EFFDT
           let #effseq = &A1.EFFSEQ

FROM PS_FPAEECAREER A1

WHERE A1.EMPLID = $p-emplid and
      A1.EMPL_RCD = #p-emplrcd and
      A1.EFFDT = (select max(EFFDT) from PS_FPAEECAREER A2
               where A2.EMPLID = A1.EMPLID and
                     A2.EMPL_RCD = A1.EMPL_RCD and
                     A2.EFFDT <= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX})  and
      A1.EFFSEQ = (select max(EFFSEQ) from PS_FPAEECAREER A3
               where A3.EMPLID = A1.EMPLID and
                     A3.EMPL_RCD = A1.EMPL_RCD and
                     A3.EFFDT = A1.EFFDT )

end-select


let $_sql-statement = 'FPA6INC.SQC, Prepare-avanc, Update '

#IFDEF DEBUGI
  display 'Instance to be open: '
  display 'effdt: ' noline
  display $p-effdt noline
  display ' effseq: ' noline
  display #effseq
#ENDIF


BEGIN-SQL    On-Error=SQL-Error
UPDATE PS_FPAEECAREER

SET FP_CLD_INST = 'N',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFSEQ = #effseq

END-SQL

   Do Insert-Fpaeeupdrow ($p-emplid,#p-emplrcd,$p-effdt,$_AsOfToday)

END-PROCEDURE    Prepare-Avanc



!***************************************************************
!
!  calcule-date-avanc: calculate next advancement date
!
!***************************************************************
BEGIN-PROCEDURE  calcule-date-avanc ( $p-emplid,#p-emplrcd,$p-effdt,
                                    :$p-avanc-dt)

#IFDEF DEBUG
   DISPLAY 'FPA6INC.SQC / calcule-date-avanc '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt
#ENDIF



! Init global variables using by FPA005
!---------------------------------------
let $_emplid = $p-emplid
let #_empl_rcd = #p-emplrcd

! Advancement date calculation function
!--------------------------------------
Do  FPA005-Main                         ! in FPA005.SQC


! Fetch the date
!---------------

let $_sql-statement = 'FPA6INC.SQC, Calcule-date-avanc , Select '
BEGIN-SELECT  On-Error=SQL-Error
{DATEOUT-PREFIX}A.FP_FOR_PROM_DT{DATEOUT-SUFFIX} &FP_FOR_PROM_DT

             let $p-avanc-dt = &FP_FOR_PROM_DT

FROM PS_FPAEECAREER A

WHERE A.EMPLID = $p-emplid and
      A.EMPL_RCD = #p-emplrcd and
      A.EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      A.FP_CLD_INST = 'N'

END-SELECT

#IFDEF DEBUGI
   display 'Advancement date: ' noline
   display $p-avanc-dt
#ENDIF

END-PROCEDURE calcule-date-avanc



!***************************************************************
!
!  Execute-avanc-auto: calculation of the next advancement date
!
!***************************************************************
BEGIN-PROCEDURE  Execute-avanc-auto ( :$p-OK )

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Execute-avanc-auto '
#ENDIF

! Ini global variables used by FPA310 and FPA320
!-----------------------------------------------
let $_Corps = ' '
let $_OprID = ' '
let $p-ok = 'N'

! Determine the employee to be advanced
!--------------------------------------
DO FPA310-Main


if $_FPA310_OK = 'Y'

     ! Automatic advancement function
     !-------------------------------
     Do FPA320-Main

     if $_FPA320_OK = 'Y'

         let $p-ok = 'Y'

     end-if

end-if

#IFDEF DEBUGI
   DISPLAY 'Advancement processed ? :  ' noline
   display $p-ok
#ENDIF

END-PROCEDURE Execute-avanc-auto



!***************************************************************
!
!  select-datefin-career: prepare update of end date of Step into
!                         the career instances
!***************************************************************
BEGIN-PROCEDURE   select-datefin-career( $p-emplid, #p-emplrcd, $p-deb-dt,
                                         $p-fin-dt, $arret)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / select-datefin-career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' Retro period: [' noline
   display $p-deb-dt noline
   display ' ; ' noline
   display $p-fin-dt noline
   display '] Stop instance ? ' noline
   display $arret
#ENDIF

if $arret = 'N'
   let $dt-fin = ''
else
   let $dt-fin = $p-fin-dt
end-if

let $dt-prec-effdt = ''

let $_sql-statement = 'FPA6INC.SQC, Select-datefin-career, Select '
BEGIN-SELECT  On-Error=SQL-Error

{DATEOUT-PREFIX}C.EFFDT{DATEOUT-SUFFIX} &C.EFFDT
C.EFFSEQ     &C.EFFSEQ

       let $C_EFFDT = &C.EFFDT
       let #C_EFFSEQ = &C.EFFSEQ

       ! Update of the End date, the terminated instance and the terminated Step
       ! if there is an action stop.
       ! ----------------------------------------------------------------------

       if $dt-fin != ''

            if $dt-prec-effdt != $C_EFFDT

                    Do update-datefin-Career( $p-emplid, #p-emplrcd,
                                      $C_EFFDT, #C_EFFSEQ, $dt-fin )
                    display 'update 1 effectue'
            else
                    display 'update 2 effectue'
                    ! Case: same effdt , different eff seq
                    !-------------------------------------
                    Do update-datefin-Career( $p-emplid, #p-emplrcd,
                                              $C_EFFDT, #C_EFFSEQ, $C_EFFDT )
            end-if

       end-if

       ! Reinit end date
       ! ---------------
       Do Convert-To-DTU-Date(&C.EFFDT, $dtu-date)
       Do dtu-subtract-days($dtu-date, 1 , $dtu-fin)
       Do Convert-From-DTU-Date($dtu-fin, $dt-fin)

       ! Reinit previous end date
       ! ------------------------
       let $dt-prec-effdt = &C.EFFDT

FROM PS_FPAEECAREER C

WHERE    C.EMPLID = $p-emplid
     AND C.EMPL_RCD = #p-emplrcd
     AND ( C.EFFDT >= (select max(EFFDT) from PS_FPAEECAREER R
                    where R.EMPLID = C.EMPLID and
                          R.EMPL_RCD = C.EMPL_RCD and
                          R.EFFDT < {DATEIN-PREFIX}$p-deb-dt{DATEIN-SUFFIX})
           OR  C.EFFDT >= {DATEIN-PREFIX}$p-deb-dt{DATEIN-SUFFIX})
     AND C.EFFDT <= {DATEIN-PREFIX}$p-fin-dt{DATEIN-SUFFIX}

ORDER BY C.EFFDT DESC , C.EFFSEQ DESC

END-SELECT

END-PROCEDURE select-datefin-career



!***************************************************************
!
!  update-datefin-career:
!
!***************************************************************
BEGIN-PROCEDURE  update-datefin-career ( $p-emplid, #p-emplrcd, $p-effdt,
                                         #p-effseq, $p-fin-dt)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / update-datefin-career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display '/ ' noline
   display #p-effseq noline
   display ' End date : ' noline
   display $p-fin-dt
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Update-datefin-career, Update '
BEGIN-SQL  On-Error=SQL-Error

UPDATE PS_FPAEECAREER
SET FP_STEP_END_DT = {DATEIN-PREFIX}$p-fin-dt{DATEIN-SUFFIX},
FP_CLD_INST = 'Y',
FP_CLD_STEP = 'Y',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX}  and
      EFFSEQ = #p-effseq

END-SQL

END-PROCEDURE update-datefin-career



!***************************************************************
!
!  Reaffecte-bonus:
!
!***************************************************************
BEGIN-PROCEDURE  Reaffecte-bonus ( $p-emplid,#p-emplrcd,$p-effdt,$p-fin-dt)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Reaffecte-bonus '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' End date : ' noline
   display $p-fin-dt
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Reaffecte-bonus, Select '
BEGIN-SELECT  On-Error=SQL-Error

{DATEOUT-PREFIX}EFFDT{DATEOUT-SUFFIX} &EFFDT
FP_BONUS_CD     &BONUS_CD
FP_RANK_CD      &RANK
FP_STEP_CD      &STEP

    let $b_effdt = &EFFDT
    let $bonus_cd = rtrim(&BONUS_CD,' ')
    if isblank(&RANK)
        let $b_rank = ' '
    else
        let $b_rank = rtrim(&RANK,' ')
    end-if
    if isblank(&STEP)
        let $b_step = ' '
    else
        let $b_step = rtrim(&STEP,' ')
    end-if

    DO Verifie-Bonus-Career($p-emplid, #p-emplrcd, $b_effdt, $bonus_cd ,
                             $b_rank, $b_step )

FROM PS_FPABONUS_TBL
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT >= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFDT <= {DATEIN-PREFIX}$p-fin-dt{DATEIN-SUFFIX} and
      FP_IN_ABEYANCE = 'A'
ORDER BY EFFDT

END-SELECT



let $_sql-statement = 'FPA6INC.SQC, Reaffecte-bonus, Select '
BEGIN-SELECT  On-Error=SQL-Error

{DATEOUT-PREFIX}EFFDT{DATEOUT-SUFFIX} &PR_EFFDT
EFFSEQ          &PR_EFFSEQ
COMP_RATECD     &PR_COMP_RATECD
FP_RANK_CD      &PR_RANK
FP_STEP_CD      &PR_STEP

    let $pr_effdt = &PR_EFFDT
    let #pr_effseq = &PR_EFFSEQ
    let $rate_cd = rtrim(&PR_COMP_RATECD,' ')
    if isblank(&PR_RANK)
        let $pr_rank = ' '
    else
        let $pr_rank = rtrim(&PR_RANK,' ')
    end-if
    if isblank(&PR_STEP)
        let $pr_step = ' '
    else
        let $pr_step = rtrim(&PR_STEP,' ')
    end-if

    DO Check-premium-career($p-emplid, #p-emplrcd, $pr_effdt, #pr_effseq, $rate_cd ,
                             $pr_rank, $pr_step )

FROM PS_FPAEE_PREMIUM
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFDT >= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX} and
      EFFDT <= {DATEIN-PREFIX}$p-fin-dt{DATEIN-SUFFIX} and
      FP_IN_ABEYANCE = 'A'
ORDER BY EFFDT

END-SELECT



END-PROCEDURE Reaffecte-bonus



!***************************************************************
!
!  Verifie-bonus-career :
!
!***************************************************************
BEGIN-PROCEDURE  Verifie-bonus-Career ( $p-emplid, #p-emplrcd, $p-effdt,
                                        $p-bonus, $p-rank, $p-step)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Verifie-bonus-Career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' Bonus Code: ' noline
   display $p-bonus noline
   display ' Grade : ' noline
   display $p-rank noline
   display ' Step: ' noline
   display $p-step
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Verifie-bonus-Career, Select '
BEGIN-SELECT  On-Error=SQL-Error

distinct {DATEOUT-PREFIX}EFFDT{DATEOUT-SUFFIX} &EFFDT

                Do Update-bonus($p-emplid, #p-emplrcd, $p-effdt, $p-bonus)

FROM PS_FPAEECAREER
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      FP_RANK_CD = $p-rank and
      (FP_STEP_CD = $p-step or FP_EQUIV_STEP = $p-step) and
      EFFDT <= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX}

END-SELECT

END-PROCEDURE Verifie-bonus-Career



!***************************************************************
!
!  Update-bonus :
!
!***************************************************************
BEGIN-PROCEDURE  Update-bonus ( $p-emplid, #p-emplrcd, $p-effdt, $p-bonus)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Update-bonus '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' Bonus Code : ' noline
   display $p-bonus
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Update-bonus, Update '
BEGIN-SQL        On-Error=SQL-Error

UPDATE PS_FPABONUS_TBL
set FP_IN_ABEYANCE = 'R',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}
!FP_TBL_CD = 'C'

Where EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      FP_BONUS_CD = $p-bonus and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX}
END-SQL

END-PROCEDURE Update-bonus


!***************************************************************
!
!  Check-premium-career :
!
!***************************************************************
BEGIN-PROCEDURE  Check-premium-career ( $p-emplid, #p-emplrcd, $p-effdt, #p-effseq,
                                        $p-ratecd, $p-rank, $p-step)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Check-premium-career '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' Rate Code: ' noline
   display $p-ratecd noline
   display ' Grade : ' noline
   display $p-rank noline
   display ' Step: ' noline
   display $p-step
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Check-premium-career, Select '
BEGIN-SELECT  On-Error=SQL-Error

distinct {DATEOUT-PREFIX}EFFDT{DATEOUT-SUFFIX} &PRM_EFFDT

                Do Update-premium($p-emplid, #p-emplrcd, $p-effdt, #p-effseq, $p-ratecd)

FROM PS_FPAEECAREER
WHERE EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      FP_RANK_CD = $p-rank and
      (FP_STEP_CD = $p-step or FP_EQUIV_STEP = $p-step) and
      EFFDT <= {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX}

END-SELECT

END-PROCEDURE Check-premium-career




!***************************************************************
!
!  Update-bonus :
!
!***************************************************************
BEGIN-PROCEDURE  Update-premium ( $p-emplid, #p-emplrcd, $p-effdt,#p-effseq, $p-ratecd)

#IFDEF DEBUGI
   DISPLAY 'FPA6INC.SQC / Update-premium '
   display 'Employee: ' noline
   display $p-emplid noline
   display ' Empl Record: ' noline
   display #p-emplrcd noline
   display ' EFFDT: ' noline
   display $p-effdt noline
   display ' Rate Code : ' noline
   display $p-ratecd
#ENDIF

let $_sql-statement = 'FPA6INC.SQC, Update-premium, Update '
BEGIN-SQL        On-Error=SQL-Error

UPDATE PS_FPAEE_PREMIUM
set FP_IN_ABEYANCE = 'R',
LAST_UPDATE_DATE = {DATEIN-PREFIX}$_AsOfToday{DATEIN-SUFFIX}

Where EMPLID = $p-emplid and
      EMPL_RCD = #p-emplrcd and
      EFFSEQ = #p-effseq and
      COMP_RATECD = $p-ratecd and
      EFFDT = {DATEIN-PREFIX}$p-effdt{DATEIN-SUFFIX}
END-SQL

END-PROCEDURE Update-premium






!*******************************************************************
!
!  Delete-FLAT-ABROG :   delete into the FLAT table the abrogations already edited
!
!*******************************************************************
BEGIN-PROCEDURE  Delete-FLAT-ABROG

#IFDEF DEBUG
   DISPLAY 'FPA6INC.SQC / Delete-FLAT-ABROG     '
#ENDIF

let $sql-statement = 'FPA6INC.SQC, Delete-FLAT-ABROG, Delete '
BEGIN-SQL On-Error=SQL-Error

DELETE FROM PS_FPAEEFLAT_TBL

WHERE FP_ORIG = 'R'

END-SQL

END-PROCEDURE Delete-FLAT-ABROG
