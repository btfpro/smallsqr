!**********************************************************************
! Report Name: GPESBNK2.SQR  Payee Bank Account Report
!**********************************************************************
!----------------------------------------------------------------------
!                                                                      
!                     Confidentiality Information:                     
!                                                                      
!   This module contains confidential and proprietary information      
!   of Oracle; it is not to be copied, reproduced, or transmitted      
!   in any form, by any means, in whole or in part, nor is it to       
!   be used for any purpose other than that for which it is            
!   expressly provided under the applicable license agreement.         
!                                                                      
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    
!                                                                      
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2006/07/20:14:26:20                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      
!----------------------------------------------------------------------


#include 'setenv.sqc'        ! SET ENVIRONMENT
begin-setup
#Include 'ptpsl177.sqc'   !Printer and page-size initialization
end-setup

BEGIN-REPORT
  DO INIT-DATETIME
  DO INIT-NUMBER
  DO GET-CURRENT-DATETIME
  do Init-Report
  IF $PRCS_OPRID=''
     GOTO LAST2
  END-IF
  DO PROCESS-MAIN
  DO RESET
  DO STDAPI-TERM
last2:
END-REPORT

BEGIN-HEADING 8
#include 'stdhdg01.sqc'
  PRINT $PAY_ENTITY                  (+1,1)
  let $Out=rtrim($PAY_ENTITY_RNCTL, ' ')
  PRINT $Out                         (0,+1)
  PRINT '-'                          (0,+2)
  DO GET-PAY-ENTITY-DATA
  PRINT $PAY-ENTITY-NAME             (0,+2)


 PRINT $EMPLOYEE                     (+3,4,11)
 ! PRINT $RCDNUM                       (0,+2,4)
 PRINT $NATIONAL_ID                  (0,+2,11)
 PRINT $EMPL_NAME                    (0,+4,40)
 PRINT $DEPARTMENT                   (0,+4,30)
 PRINT $ACCOUNT                      (0,+4,30)

END-HEADING

BEGIN-PROCEDURE INIT-REPORT

  MOVE 'GPESBNK2' TO $REPORTID
  DO STDAPI-INIT
  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if
!**********  do Security-Param

  IF $PRCS_PROCESS_INSTANCE = ''
    !No Prompt
  ELSE
   DO SELECT-PARAMETERS
  END-IF
  DO INIT_PRINTER
  do Init_Report_Translation ($ReportID, $language_cd)

  do Get_Field_information ('GPESBNK2','REPORT_TITLE', $REPORTTITLE,#DW)
  do Get_Field_information ('GPESBNK2','PAY_ENTITY',$PAY_ENTITY,    #DW)

  do Get_Field_information ('GPESBNK2', 'EMPLOYEE',$EMPLOYEE,       #DW)
 ! do Get_Field_information ('GPESBNK2', 'RCDNUM',$RCDNUM,           #DW)
  do Get_Field_information ('GPESBNK2', 'NATIONAL_ID',$NATIONAL_ID, #DW)
  do Get_Field_information ('GPESBNK2', 'EMPL_NAME', $EMPL_NAME,    #DW)
  do Get_Field_information ('GPESBNK2', 'DEPARTMENT', $DEPARTMENT,  #DW)
  do Get_Field_information ('GPESBNK2', 'ACCOUNT', $ACCOUNT,        #DW)

  LAST1:

END-PROCEDURE INIT-REPORT

BEGIN-PROCEDURE GET-VALUES
   let $language_cd = $PRCS_LANGUAGE_CD
end-procedure


!************************************************************************************
BEGIN-PROCEDURE SELECT-PARAMETERS
!************************************************************************************
#debug do Fin-Debug-Msg('Select-Parameters')

#debugd show 'Operator Id:     ' $prcs_oprid
#debugd show 'Run Control Id:  ' $prcs_run_cntl_id

let $sql-statement = 'GPESBNK2.SQR,Select-Parameters,Select,PS_GPES_RC_BNK'
BEGIN-SELECT on-error=SQL-Error
GPES_RC_BNK.COUNTRY
   MOVE &GPES_RC_BNK.COUNTRY     TO $COUNTRY_RNCTL
GPES_RC_BNK.PAY_ENTITY
   MOVE &GPES_RC_BNK.PAY_ENTITY  TO $PAY_ENTITY_RNCTL
GPES_RC_BNK.GP_PAYGROUP
   MOVE &GPES_RC_BNK.GP_PAYGROUP TO $GP_PAYGROUP_RNCTL

   do Format-DateTime($asoftoday,$asoftoday-NAT,{DEFCMP},'','')

 !** IF NO PAY GROUP PROVIDED, ALL PAY GROUPS FOR THE PAY ENTITY WILL BE RETRIEVED
   IF rtrim($GP_PAYGROUP_RNCTL, ' ') = ''
     let $GP_PAYGROUP_RNCTL = '%'
   END-IF
 !** IF NO PAY GROUP PROVIDED, ALL PAY GROUPS FOR THE PAY ENTITY WILL BE RETRIEVED

FROM PS_GPES_RC_BNK GPES_RC_BNK

   WHERE GPES_RC_BNK.OPRID = $PRCS_OPRID
   AND GPES_RC_BNK.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID


END-SELECT
END-PROCEDURE




!************************************************************************************
BEGIN-PROCEDURE PROCESS-MAIN
!************************************************************************************
#debug do Fin-Debug-Msg('PROCESS-MAIN')

#debugd show 'Country:    ' $COUNTRY_RNCTL
#debugd show 'Pay Entity: ' $PAY_ENTITY_RNCTL
#debugd show 'Pay Group:  ' $GP_PAYGROUP_RNCTL

let $sql-statement = 'GPESBNK2.SQR,PROCESS-MAIN,Select,PS_JOB'
BEGIN-SELECT DISTINCT on-error=SQL-Error
A.EMPLID                &A.EMPLID
  let $EMPLID = rtrim(&A.EMPLID, ' ')
  PRINT $EMPLID         (+1,4,11)
 ! A.EMPL_RCD              (0,+2,4)
  DO  Get-National-Id-Data
  PRINT $NID            (0,+2,11)
PNM.NAME                  &D.NAME
 let $NAME = rtrim(&D.NAME, ' ')
 PRINT $NAME            (0,+4,40)
A.BUSINESS_UNIT         &A.BUSINESS_UNIT
  LET $BU = rtrim(&A.BUSINESS_UNIT, ' ')
A.DEPTID                &A.DEPTID
   LET $DEPTID = rtrim(&A.DEPTID, ' ')
   DO GET-DEPARTMENT-NAME
   PRINT $DEPTNAME      (0,+4,30)
E.BANK_CD
  if rtrim(&E.BANK_CD ,' ') <> ''
     let $BANK_CD_EMPL = rtrim(&E.BANK_CD ,' ')
  end-if
E.BRANCH_EC_CD
  if rtrim(&E.BRANCH_EC_CD ,' ') <> ''
     let $BRANCH_CD_EMPL = rtrim(&E.BRANCH_EC_CD ,' ')
  end-if
E.CHECK_DIGIT
  if rtrim(&E.CHECK_DIGIT ,' ') <> ''
     let $CHECK_DIGIT_EMPL = rtrim(&E.CHECK_DIGIT ,' ')
  end-if
E.ACCOUNT_EC_ID
  if rtrim(&E.ACCOUNT_EC_ID ,' ') <> ''
     let $ACCOUNT_ID_EMPL = rtrim(&E.ACCOUNT_EC_ID ,' ')
  end-if

  LET $LINE2 = $BANK_CD_EMPL || ' ' || $BRANCH_CD_EMPL || ' ' || $CHECK_DIGIT_EMPL || ' ' || $ACCOUNT_ID_EMPL
  PRINT $LINE2          (0,+4,30)

FROM PS_JOB A, PS_PERSON PSN, PS_PERSON_NAME PNM, PS_PER_ORG_ASGN ASGN, PS_PYE_BANKACCT E, PS_GP_PYGRP PG

WHERE A.EMPLID = PSN.EMPLID
    AND  PNM.EMPLID = PSN.EMPLID
    AND  A.EMPLID = E.EMPLID
    AND  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= $AsOfToday)
    AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
    AND A.EMPL_STATUS IN ('A','L','S','P','W')
    AND A.EMPLID = ASGN.EMPLID
    AND A.EMPL_RCD = ASGN.EMPL_RCD
    AND ASGN.PER_ORG = 'EMP'
    AND E.EFF_STATUS = 'A'
    AND PG.GP_PAYGROUP LIKE $GP_PAYGROUP_RNCTL
    AND PG.PAY_ENTITY = $PAY_ENTITY_RNCTL
    AND PG.GP_PAYGROUP = A.GP_PAYGROUP
ORDER BY A.EMPLID
END-SELECT
END-PROCEDURE


!************************************************************************************
BEGIN-PROCEDURE Get-National-Id-Data
!************************************************************************************
#debug do Fin-Debug-Msg('Get-National-Id-Data')

#debugd show 'Employee:  ' $EMPLID

let $sql-statement = 'GPESBNK2.SQR,Get-National-Id-Data,Select,PS_PERS_NID'
BEGIN-SELECT on-error=SQL-Error

B.NATIONAL_ID          &B.NATIONAL_ID
   let $NID = rtrim(&B.NATIONAL_ID, ' ')


  FROM PS_PERS_NID B
  WHERE B.EMPLID = $EMPLID
    AND B.PRIMARY_NID = 'Y'

END-SELECT
END-PROCEDURE



!************************************************************************************
BEGIN-PROCEDURE Get-Pay-Entity-Data
!************************************************************************************
#debug do Fin-Debug-Msg('Get-Pay-Entity-Data')

#debugd show 'Pay Entity: ' $PAY_ENTITY_RNCTL

let $sql-statement = 'GPESBNK2.SQR,Get-Pay-Entity-Data,Select,PS_GP_PYENT'
BEGIN-SELECT on-error=SQL-Error
PE.DESCR     &PE.DESCR
  let $PAY-ENTITY-NAME = &PE.DESCR

FROM PS_GP_PYENT PE
WHERE PE.PAY_ENTITY = $PAY_ENTITY_RNCTL
END-SELECT
END-PROCEDURE


!--------------------------------------------------------------------!
! Debug Msg                                                          !
!--------------------------------------------------------------------!
begin-procedure Fin-Debug-Msg($procedure_name)
   display ' '
   display '----------------------------------'
   display $procedure_name
   #debugt date-time () {Native-DateTime} &SysDateTime
   #debugt move &SysDateTime to $SysDateTime
   #debugt show 'TIMING, ' $procedure_name ', ' $SysDateTime
   display ' '
end-procedure ! Fin-Debug-Msg


!***************************************************************
!Include SQCs
!***************************************************************
!#include 'hrrnctl1.sqc'  ! GET RUN CONTROL PARAMETER VALUES
!#include 'hrgetval.sqc'  ! GET VALUES MASK ROUTINES

#include 'prcsapi.sqc'   !Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declare
#include 'reset.sqc'     ! RESET PRINTER PROCEDURE
#include 'stdapi.sqc'    ! UPDATE PROCESS API
#include 'curdttim.sqc'  ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'  ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'    ! ROUTINES TO FORMAT NUMBERS
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'sqlerr.sqc'
#Include 'sqrtrans.sqc'  !Routines to Translate SQR
#include 'datemath.sqc'  ! ROUTINES FOR DATEMATH
#include 'getbunam.sqc'
#include 'getdptnm.sqc'
#include 'getlocnm.sqc'
#include 'getempnm.sqc'
#include 'useprntr.sqc'
