!***********************************************************************
!  GMTEC002:  Public Sector Time and Effort Certification              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:17:01                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!  $Last Modified: June 4   EIP Check Number now 15                    *
!***********************************************************************
! This program is specific to HRMS for Public Sector - Grants.         *
!***********************************************************************

#include 'setenv.sqc'    !Set environment

#include 'setup32.sqc'   !Set Printer - Landscape

! Column position defines
#define  ac  01   ! Account column for EE data
#define  dc  22   ! Department column - goes with label text
#define  fc  34   ! Fund column - goes with label text
#define  pc  46   ! Program column - goes with label text
#define  sc  58   ! Sub Class column - goes with label text
#define  gc  70   ! Project/Grant column - goes with label text
#define sdc  88   ! Starting date column
#define edc 102   ! Ending date column
#define act 116   ! Actual Effort Percentage column - goes with label text
#define lth 134   ! Total hrs for line
#define tth 157   ! Total Hrs for Employee for the period
#define stc  17   ! Text data column




!*************************************************
begin-heading 10

  #include 'stdhdg01.sqc'

  Print 'Name:'               (+2,{ac}) bold
  print $ADDLINE1             (0,{stc})
  print 'Employee ID:'        (+1,1)   bold
  print $Emplid               (0,{stc})
  print 'Employee Dept:'      (+1,1)   bold
  print $DeptName             (0,{stc})

!  if $Position_Nbr <> ''
!     print '-'                                    (0,+2)
!     print $PosName                               (0,+2)
!     print '-'                                    (0,+2)
!     print $JobTitle                              (0,+2)
!  else
!     print $JobTitle                              (0,+2)
!  end-if

  print 'Account'             (+2,{ac})   bold
  print 'Department'          (0, {dc})   bold
  print 'Fund'                (0, {fc})   bold
  print 'Program'             (0, {pc})   bold
  print 'Class'               (0, {sc})   bold
  print 'Project/Grant'       (0, {gc})   bold
  print 'Start Date'          (0, {sdc})  bold
  print 'End Date'            (0, {edc})  bold
  print 'Actual Payroll %'    (0, {act})  bold
  print '    Hours'           (0, {lth})  bold
!  print 'Amount'              (0, {tth})  bold


end-heading


!***************************************************************************
begin-procedure End-Page

 print '________________' (+1,{act})
 print '  ________' (0 ,{lth})
! print '________________' (0 ,{tth})
 print 'Total ' (+1,{edc})
 let $Tot_Pct = #Tot_Pct
 print $Tot_Pct                (0, {act})  edit BBBBBB99999.99
 print $PrevEE_TOT_HRS         (0, {lth})  edit B99999.99
! print &TEC_EE.MONETARY_AMOUNT (0, {tth})  edit B9999999.99

 print 'I certify that I have personal knowledge of the actual EFFORT as shown above for this employee.' (+4,{ac})
 print 'I am aware that filing inaccurate and/or late effort reports may result in punitive actions as noted in federal and University policies.'(+1,{ac})
 print 'I understand that once this report is signed, NO CHANGES ARE ALLOWED.' (+1,{ac})

 print 'Signature: ______________________________  Date: ____________  Title: _____________________  Phone: ______________  Email: ______________' (+2,{ac})
 print 'Dept. Effort Coord.: ____________________  Reference#: ____________________________________  Phone: ______________  Email: ______________' (+2,{ac})

 if $End_Report = 'N'
    new-page
 end-if

end-procedure


begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

begin-setup

  #ifdef SQLSERVER
     ask dbname 'Database name'
     use {dbname}
  #endif

end-setup
!******************************************************************************
! HOUSEKEEPING                                                                *
!******************************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do STDAPI-INIT

  do CREATE-ARRAYS
  do INITIALIZE-CO-COUNTER

  Move 'GMTEC002'                             to $ReportID
  move 'Grants Time and Effort Certification' to $ReportTitle
  let #Cal = 0


  if $Prcs_Process_Instance = ''

     do PROMPTS
     do SELECT-CALENDAR
     do CALENDAR-CHECK

     if $Posn_Fund_Run = 'Y'
        do BUILD-CALENDAR-ARRAY
     end-if
  else

     do SELECT-PARAMETERS
  end-if


  display $ReportTitle
! display $Prcs_Process_Instance
! display $prcs_oprid
! display $prcs_run_cntl_id
! display $SlctCalendar
! display $SlctCalendar1

end-procedure

!***************************************************************************
! This procedure selects the run cntrl parameters
!***************************************************************************
begin-procedure select-parameters

BEGIN-SELECT

RUN_CNTL_GM.OPRID
RUN_CNTL_GM.RUN_CNTL_ID
RUN_CNTL_GM.RUN_ID
RUN_CNTL_GM.COMPANY
RUN_CNTL_GM.PAYGROUP
RUN_CNTL_GM.PAY_END_DT

!      Display 'Run parms are: Oprid Run_Cntl_id, Run_id, Company, Paygroup, End_dt'
!      Display    &RUN_CNTL_GM.OPRID
!      Display    &RUN_CNTL_GM.RUN_CNTL_ID
!      Display    &RUN_CNTL_GM.RUN_ID
!      Display    &RUN_CNTL_GM.COMPANY
!      Display    &RUN_CNTL_GM.PAYGROUP
!      Display    &RUN_CNTL_GM.PAY_END_DT
!
     do GET-VALUES
     do SELECT-CALENDAR
     do CALENDAR-CHECK

     if $Posn_Fund_Run = 'Y'
        do BUILD-CALENDAR-ARRAY
     end-if

From  PS_GM_RC_TE RUN_CNTL_GM
Where RUN_CNTL_GM.OPRID = $prcs_oprid
  And RUN_CNTL_GM.RUN_CNTL_ID = $prcs_run_cntl_id


end-select


end-procedure

!******************************************************************************
! PROMPTS                                                                     *
! This procedure promts for all the input data                                *
!******************************************************************************
begin-procedure PROMPTS

  input $Run_ID 'Enter Run ID' type=char
  uppercase $Run_ID

  let $Run_ID = rtrim($Run_ID, ' ')

  if $Run_ID = ''

     input $Company 'Enter Company' type=char
     uppercase $Company

     input $Paygroup 'Enter Paygroup' type=char
     uppercase $Paygroup

     input $Pay_End_Dt 'Enter Pay End Date' type=date

  end-if

end-procedure
!******************************************************************************
! GET-VALUES                                                                  *
! This procedure gets the input values when run form the process scheduler    *
!******************************************************************************
begin-procedure GET-VALUES

  let $Run_ID        = rtrim(&RUN_CNTL_GM.RUN_ID, ' ')

  if $Run_ID = ''

     let $Company    = &RUN_CNTL_GM.COMPANY
     let $Paygroup   = &RUN_CNTL_GM.PAYGROUP
     let $Pay_End_Dt = &RUN_CNTL_GM.PAY_END_DT
  end-if

end-procedure
!******************************************************************************
! SELECT-CALENDAR                                                             *
! Sets up the bind variable string for selecting off pay calendar             *
!******************************************************************************
begin-procedure SELECT-CALENDAR

  if $Run_ID = ''

     let $SlctCalendar = 'CAL.COMPANY = '''||$Company||
                     ''' AND CAL.PAYGROUP = '''||$Paygroup||
                     ''' AND CAL.PAY_END_DT = '''||$Pay_End_Dt||''''

     let $SlctCalendar1 = 'CAL1.COMPANY = '''||$Company||
                      ''' AND CAL1.PAYGROUP = '''||$Paygroup||
                      ''' AND CAL1.PAY_END_DT = '''||$Pay_End_Dt||''''

  else

     let $SlctCalendar = 'CAL.RUN_ID = '''||$Run_ID||''''
     let $SlctCalendar1 = 'CAL1.RUN_ID = '''||$Run_ID||''''

  end-if


end-procedure
!******************************************************************************
! CREATE-ARRAYS                                                               *
! Sets up the storage array used during processing                            *
!******************************************************************************
begin-procedure CREATE-ARRAYS

!  Create-array name=Store_Dist  Size = 5000
!       field=Store_DeptId:Char
!       field=Store_Acct_Cd:Char
!       field=Store_Earnings:Number

   Create-array name=Calendars  Size = 100
        field=Company:Char
        field=PayGroup:Char
        field=Pay_End_Dt:Char

   Create-array name=TEC_ErnCd  Size = 2000
        field=ErnCd:Char

   Create-array name=Distributions  Size = 500
        field=ErnCd:Char
        field=Empl_Rcd:Integer
        field=Acct_Cd:Char
        field=Account:Char
        field=Deptid:Char
        field=Begin_Dt:Char
        field=End_Dt:Char
        field=Earn_Amt:Number
        field=Reg_Hrs:Number
        field=Ot_Hrs:Number
        field=Oth_Hrs:Number

   Create-array name=Earnings  Size = 500
        field=ErnCd:Char
        field=Empl_Rcd:Integer
        field=Begin_Dt:Char
        field=End_Dt:Char
        field=Reg_Hrs:Number
        field=Ot_Hrs:Number
        field=Oth_Hrs:Number

end-procedure
!******************************************************************************
! MAINLINE                                                                    *
!******************************************************************************
begin-procedure MAINLINE

  do Delete-TEC-Data

  let #processed_rows = 0
  let $gl_run_date = $AsOfToday
  let #gl_run_seq = 0
  let #gl_entry_line = 0

  let $Cal = #Cal
  let $Msg = ' Total Calendar entries = '||$Cal
  display $Msg

  if $Posn_Fund_Run = 'Y'

     let $Company = ' '
     let #C = 0

     while #C < #Cal

       Get $Cal_Company
           $Cal_PayGroup
           $Cal_Pay_End_Dt
       from Calendars(#C)
            Company
            PayGroup
            Pay_End_Dt

       do CALENDAR-ENTRIES
       add 1 to #C

     end-while

     if #C_Checks_Processed <> 0

        do PRINT-COMPANY-TOTALS
     end-if

     do Print-TE-Report

  end-if


end-procedure
!******************************************************************************
! CALENDAR-CHECK                                                              *
! Procedure checks calendar to insure position funding has been run for all   *
! pay cycles in the run.                                                      *
!******************************************************************************
begin-procedure CALENDAR-CHECK

  let $Posn_Fund_Run  = 'Y'
  let $err-statement1 = 'GMTEC002, Select Error - CALENDAR-CHECK'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar1

begin-SELECT On-Error=Error-Display
CAL1.COMPANY
CAL1.PAYGROUP
CAL1.PAY_END_DT

  let $Posn_Fund_Run = 'N'
  let $Msg = 'ERROR-Default Position Funding has not been run for Company '||
             &CAL1.COMPANY||', PAYGROUP '||&CAL1.PAYGROUP||', and PAY END DATE '||
             &CAL1.PAY_END_DT

  display $Msg

FROM  PS_PAY_CALENDAR CAL1
WHERE [$SlctCalendar1]
  AND CAL1.POSN_FUND_RUN = 'N'
ORDER BY CAL1.COMPANY, CAL1.PAYGROUP, CAL1.PAY_END_DT
end-SELECT

end-procedure
!******************************************************************************
! BUILD-CALENDAR-ARRAY                                                        *
! Select pay cycles to run from pay calendar and build an array for use in    *
! the main driving procedure.                                                 *
!******************************************************************************
begin-procedure BUILD-CALENDAR-ARRAY

  let $err-statement1 = 'GMTEC002, Select Error - BUILD-CALENDAR-ARRAY'
  let $err-statement2 = 'Bind Variables: '||$SlctCalendar

begin-SELECT On-Error=Error-Display
CAL.COMPANY
CAL.PAYGROUP
CAL.PAY_END_DT

       let $Found = 'N'
       let #C     = 0

       while #C < #Cal and $Found = 'N'

          Get $Cal_Company    from Calendars(#C) Company
          Get $Cal_PayGroup   from Calendars(#C) PayGroup
          Get $Cal_Pay_End_Dt from Calendars(#C) Pay_End_Dt

          if &CAL.COMPANY    = $Cal_Company    and
             &CAL.PAYGROUP   = $Cal_PayGroup   and
             &CAL.PAY_END_DT = $Cal_Pay_End_Dt

             let $Found = 'Y'
          end-if

          add 1 to #C
       end-while

       if $Found = 'N'

          PUT &CAL.COMPANY
              &CAL.PAYGROUP
              &CAL.PAY_END_DT
          INTO CALENDARS(#CAL)
               COMPANY
               PAYGROUP
               PAY_END_DT

          add 1 to #Cal
       end-if

FROM  PS_PAY_CALENDAR CAL
WHERE [$SlctCalendar]
ORDER BY CAL.COMPANY, CAL.PAYGROUP, CAL.PAY_END_DT

end-SELECT

end-procedure
!******************************************************************************
! CALENDAR-ENTRIES                                                            *
! Processes a Pay Calendar.  This is the main driving procedure.              *
!******************************************************************************
begin-procedure CALENDAR-ENTRIES



     move 0  to #P_Checks_Processed
     move 0  to #P_Gross_Total
     move 0  to #P_Net_Pay_Total

     move $Cal_PayGroup    to $PayGroup
     move $Cal_Pay_End_Dt  to $Pay_End_Dt
     move $Cal_Pay_End_Dt  to $AsOfDate

     if $Cal_Company <> $Company

        if #C_Checks_Processed <> 0

           do PRINT-COMPANY-TOTALS
           do INITIALIZE-CO-COUNTER
        end-if

        move $Cal_Company    to $Company

        let $Msg = 'Processing Company:'||$Company
        display $Msg

        do GET-COMPANY-DATA

        let #processed_rows = #processed_rows + 1
     end-if

     do GET-TEC-ERNCD

     let $Msg = '   Processing - Company: '||$Company||' Paygroup: '||$Paygroup||
                       ' Pay Date: '||$Pay_End_Dt
     display $Msg
     do PAYCHECK-DATA
     do CALC-COMPANY-TOTALS

end-procedure

!******************************************************************************
! GET-TEC-ERNCD                                                               *
! Selects Time and Effort earnings code for current company/paygroup.         *
!******************************************************************************
begin-procedure GET-TEC-ERNCD

  let #TEC = 0

  let $err-statement1 = 'GMTEC002, Select Error - GET-TEC-ERNCD'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup ' ||
                        $PayGroup || ', and Pay End Date ' || $Pay_End_Dt

begin-SELECT On-Error=Error-Display
PG.ERNCD_REG_HRS
PG.ERNCD_OT_HRS
PG.ERNCD_REG_EARNS

  PUT &PG.ERNCD_REG_HRS      INTO TEC_ErnCd(#TEC) ErnCd
  add 1 to #TEC

  if &PG.ERNCD_OT_HRS    <> &PG.ERNCD_REG_HRS

     PUT &PG.ERNCD_OT_HRS    INTO TEC_ErnCd(#TEC) ErnCd
     add 1 to #TEC
  end-if

  if &PG.ERNCD_REG_EARNS <> &PG.ERNCD_REG_HRS  and
     &PG.ERNCD_REG_EARNS <> &PG.ERNCD_OT_HRS

     PUT &PG.ERNCD_REG_EARNS INTO TEC_ErnCd(#TEC) ErnCd
     add 1 to #TEC
  end-if

FROM  PS_PAYGROUP_TBL  PG
WHERE PG.COMPANY    = $Company
  AND PG.PAYGROUP   = $PayGroup
  AND PG.EFFDT      = (SELECT MAX(PG1.EFFDT)
                         FROM PS_PAYGROUP_TBL PG1
                        WHERE PG1.COMPANY  = PG.COMPANY
                          AND PG1.PAYGROUP = PG.PAYGROUP
                          AND PG1.EFFDT   <= $Pay_End_Dt)
end-SELECT

  let $err-statement2 = 'Bind Variables: Company ' || $Company ||
                        ', and Pay End Date ' || $Pay_End_Dt

begin-SELECT On-Error=Error-Display
OT2.ERNCD

  if &OT2.ERNCD <> &PG.ERNCD_REG_HRS    and
     &OT2.ERNCD <> &PG.ERNCD_OT_HRS     and
     &OT2.ERNCD <> &PG.ERNCD_REG_EARNS

     PUT &OT2.ERNCD INTO TEC_ErnCd(#TEC) ErnCd
     add 1 to #TEC
  end-if

FROM  PS_GM_TEC_OT       OT1
     ,PS_GM_TEC_OT_ERNCD OT2
WHERE OT1.COMPANY    = $Company
  AND OT1.EFF_STATUS = 'A'
  AND OT1.EFFDT      = (SELECT MAX(OT3.EFFDT)
                         FROM PS_GM_TEC_OT OT3
                        WHERE OT3.COMPANY = OT1.COMPANY
                          AND OT3.EFFDT  <= $Pay_End_Dt)
  AND OT2.COMPANY    = OT1.COMPANY
  AND OT2.EFFDT      = OT1.EFFDT
end-SELECT

end-procedure

!****************************************************************************
! PAYCHECK-DATA                                                             *
! Selects individual paychecks within the current pay cycle.                *
!****************************************************************************
begin-procedure PAYCHECK-DATA

  do INITIALIZE-VARIABLES
  let $Business_Unit_HR = ' '

  let $err-statement1 = 'GMTEC002, Select Error - PAYCHECK-DATA'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', and Pay End_Date '||$Pay_End_Dt

begin-SELECT On-Error=Error-Display
PCHECK.OFF_CYCLE
PCHECK.PAGE_NUM
PCHECK.LINE_NUM
PCHECK.SEPCHK
PCHECK.PAYCHECK_NBR
PCHECK.EMPLID
PCHECK.DEPTID
PCHECK.TOTAL_GROSS
PCHECK.TOTAL_TAXES
PCHECK.TOTAL_DEDUCTIONS
PCHECK.NET_PAY
PCHECK.FORM_ID
PCHECK.CHECK_DT
PCHECK.PAYCHECK_OPTION
PCHECK.PAYCHECK_ADJUST
PCHECK.BUSINESS_UNIT

  move &PCHECK.OFF_CYCLE        to $Check.Off_Cycle
  move &PCHECK.PAGE_NUM         to #Check.Page
  move &PCHECK.PAGE_NUM         to $Check.Page
  move &PCHECK.LINE_NUM         to #Check.Line
  move &PCHECK.LINE_NUM         to $Check.Line
  move &PCHECK.SEPCHK           to #Check.SepChk
  move &PCHECK.SEPCHK           to $Check.SepChk
  move &PCHECK.PAYCHECK_NBR     to #Check.Check
  move &PCHECK.EMPLID           to $Check.Emplid
  move &PCHECK.DEPTID           to $Check.DeptID
  move &PCHECK.TOTAL_GROSS      to #Check.Total_Gross
  move &PCHECK.TOTAL_TAXES      to #Check.Total_Taxes
  move &PCHECK.TOTAL_DEDUCTIONS to #Check.Total_Deductions
  move &PCHECK.NET_PAY          to #Check.Net_Pay
  move &PCHECK.FORM_ID          to $Check.Form_ID
  move &PCHECK.CHECK_DT         to $Check.Check_Dt
  move &PCHECK.PAYCHECK_OPTION  to $Check.PayCheck_Option
  move &PCHECK.PAYCHECK_ADJUST  to $Check.PayCheck_Adjust
  move &PCHECK.BUSINESS_UNIT    to $Check.Business_Unit

  if $Business_Unit_HR <>  &PCHECK.BUSINESS_UNIT

    let $Business_Unit_HR    = &PCHECK.BUSINESS_UNIT
    do GET-GL-BUS-UNIT
  end-if

  do CALC-TOTALS

  do GET-DISTRIBUTIONS

  do EARNINGS-EXPENSES

  do CALC-HOURS

  let #D = 0

  while #D < #DIST

     Get $ErnCd            from Distributions(#D) ErnCd
     Get #Empl_Rcd         from Distributions(#D) Empl_Rcd
     Get $Acct_Cd          from Distributions(#D) Acct_Cd
     Get $Account          from Distributions(#D) Account
     Get $GL_DeptID        from Distributions(#D) Deptid
     Get $Begin_Dt         from Distributions(#D) Begin_Dt
     Get $End_Dt           from Distributions(#D) End_Dt
     Get #Monetary_Amount  from Distributions(#D) Earn_Amt
     Get #Reg_Hrs          from Distributions(#D) Reg_Hrs
     Get #Ot_Hrs           from Distributions(#D) Ot_Hrs
     Get #Oth_Hrs          from Distributions(#D) Oth_Hrs

     if #Reg_Hrs <> 0 or
        #Ot_Hrs  <> 0 or
        #Oth_Hrs <> 0

        let #Tot_Hrs = #Reg_Hrs + #Ot_Hrs + #Oth_Hrs

        do GET-CHARTKEYS

        do WRITE-DETAIL-LINE
     end-if

     add 1 to #D
  end-while

  do INITIALIZE-VARIABLES

FROM PS_PAY_CHECK PCHECK
WHERE PCHECK.COMPANY    = $Company
  AND PCHECK.PAYGROUP   = $PayGroup
  AND PCHECK.PAY_END_DT = $Pay_End_Dt

end-SELECT

end-procedure
!******************************************************************************
! GET-DISTRIBUTIONS                                                           *
! Selects distributions information for current pay check.                    *
!******************************************************************************
begin-procedure GET-DISTRIBUTIONS

  let #DIST = 0

  let $err-statement1 = 'GMTEC002, Select Error - GET-DISTRIBUTIONS'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup ' ||
                        $PayGroup || ', Pay End Date ' || $Pay_End_Dt || ', Off Cycle ' ||
                        $Check.Off_Cycle || ', Page ' || $Check.Page || ', Line ' ||
                        $Check.Line || ', Separate Check ' || $Check.SepChk

begin-SELECT On-Error=Error-Display
ED.ERNCD
ED.EMPL_RCD
ED.ACCT_CD
ED.ACCOUNT
ED.DEPTID
ED.EARNINGS

  let $Found = 'N'
  let #T     = 0

  while #T < #TEC and $Found = 'N'

     Get $ErnCd  from TEC_ErnCd(#T) ErnCd

     if &ED.ERNCD = $ErnCd
        let $Found = 'Y'
     end-if

     add 1 to #T
  end-while

  if $Found = 'Y'

     let $Found = 'N'
     let #D     = 0

  else

     let $Found = 'Y'
  end-if

  while #D < #DIST and $Found = 'N'

     Get $Dist_ErnCd     from Distributions(#D) ErnCd
     Get #Dist_Empl_Rcd  from Distributions(#D) Empl_Rcd
     Get $Dist_Acct_Cd   from Distributions(#D) Acct_Cd
     Get $Dist_Account   from Distributions(#D) Account
     Get $Dist_Deptid    from Distributions(#D) Deptid

     if &ED.ERNCD    = $Dist_ErnCd    and
        &ED.EMPL_RCD = #Dist_Empl_Rcd and
        &ED.ACCT_CD  = $Dist_Acct_Cd  and
        &ED.ACCOUNT  = $Dist_Account  and
        &ED.DEPTID   = $Dist_Deptid

        ARRAY-ADD &ED.EARNINGS to Distributions(#D) Earn_Amt
        let $Found = 'Y'
     end-if

     add 1 to #D
  end-while

  if $Found = 'N'

     PUT &ED.ERNCD
         &ED.EMPL_RCD
         &ED.ACCT_CD
         &ED.ACCOUNT
         &ED.DEPTID
         $Pay_End_Dt
         $Pay_End_Dt
         &ED.EARNINGS
         0
         0
         0
     INTO DISTRIBUTIONS(#DIST)
          ERNCD
          EMPL_RCD
          ACCT_CD
          ACCOUNT
          DEPTID
          BEGIN_DT
          END_DT
          EARN_AMT
          REG_HRS
          OT_HRS
          OTH_HRS

     add 1 to #DIST
  end-if

FROM  PS_PAY_ERN_DIST ED
WHERE ED.COMPANY           = $Company
  AND ED.PAYGROUP          = $PayGroup
  AND ED.PAY_END_DT        = $Pay_End_Dt
  AND ED.OFF_CYCLE         = $Check.Off_Cycle
  AND ED.PAGE_NUM          = #Check.Page
  AND ED.LINE_NUM          = #Check.Line
  AND ED.SEPCHK            = #Check.Sepchk
  AND ED.HP_RETDIST_STATUS = '0'
end-SELECT

end-procedure

!****************************************************************************
! EARNINGS-EXPENSES                                                         *
! Selects earnings distributions for current paycheck.                      *
!****************************************************************************
begin-procedure EARNINGS-EXPENSES

  let #ERN = 0

  let $err-statement1 = 'GMTEC002, Select Error - EARNINGS-EXPENSES'
  let $err-statement2 = 'Bind Variables: Company '||$Company||', Paygroup '||
                        $Paygroup||', Pay End_Date '||$Pay_End_Dt||', Off Cycle '||
                        $Check.Off_Cycle||', PAGE_NUM '||$Check.Page||', LINE_NUM '||
                        $Check.Line||', Separate Check '||$Check.SepChk

begin-SELECT On-Error=Error-Display
EARNS.ADDL_NBR
EARNS.DEPTID
EARNS.EMPL_RCD
EARNS.ACCT_CD
EARNS.JOBCODE
EARNS.POSITION_NBR
EARNS.GROSSUP
EARNS.EARNS_BEGIN_DT
EARNS.EARNS_END_DT
EARNS.REG_EARN_HRS
EARNS.REG_HRS
EARNS.OT_HRS
EARNS.REG_HRLY_EARNS
EARNS.OT_HRLY_EARNS
EARNS.REG_EARNS
EARNS.ERNCD_REG_EARNS
EARNS.ERNCD_REG_HRS
EARNS.ERNCD_OT_HRS

  move &EARNS.ADDL_NBR          to #Earns.Addl
  move &EARNS.EMPL_RCD          to #Empl_Rcd
  move &EARNS.DEPTID            to $DeptID
  move &EARNS.JOBCODE           to $Jobcode
  move &EARNS.POSITION_NBR      to $Position_Nbr
  move &EARNS.ACCT_CD           to $Acct_Cd
  move &EARNS.REG_EARNS         to #Monetary_Amount
  move &EARNS.EARNS_BEGIN_DT    to $Begin_Dt
  move &EARNS.EARNS_END_DT      to $End_Dt

  move &EARNS.REG_EARN_HRS      to #Reg_Hrs
  move &EARNS.ERNCD_REG_EARNS   to $ErnCd

  if #Reg_Hrs = 0
     move &EARNS.REG_HRS        to #Reg_Hrs
     move &EARNS.ERNCD_REG_HRS  to $ErnCd
  end-if

  if #Reg_Hrs <> 0

     let $Found = 'N'
     let #E     = 0

     while #E < #ERN and $Found = 'N'

        Get $Ern_ErnCd     from Earnings(#E) ErnCd
        Get #Ern_Empl_Rcd  from Earnings(#E) Empl_Rcd
        Get $Ern_Begin_Dt  from Earnings(#E) Begin_Dt
        Get $Ern_End_Dt    from Earnings(#E) End_Dt

        if $ErnCd    = $Ern_ErnCd    and
           #Empl_Rcd = #Ern_Empl_Rcd

           if $Ern_Begin_Dt > $Begin_Dt
              PUT $Begin_Dt INTO Earnings(#E) Begin_Dt
           end-if

           if $Ern_End_Dt   < $End_Dt
              PUT $End_Dt   INTO Earnings(#E) End_Dt
           end-if

           ARRAY-ADD #Reg_Hrs to Earnings(#E) Reg_Hrs
           let $Found = 'Y'
        end-if

        add 1 to #E
     end-while

     if $Found = 'N'

        PUT $ErnCd
            #Empl_Rcd
            $Begin_Dt
            $End_Dt
            #Reg_Hrs
            0
            0
        INTO EARNINGS(#ERN)
             ERNCD
             EMPL_RCD
             BEGIN_DT
             END_DT
             REG_HRS
             OT_HRS
             OTH_HRS

        add 1 to #ERN
     end-if

  end-if

  move &EARNS.OT_HRS            to #Ot_Hrs
  move &EARNS.ERNCD_OT_HRS      to $ErnCd

  if #Ot_Hrs <> 0

     let $Found = 'N'
     let #E     = 0

     while #E < #ERN and $Found = 'N'

        Get $Ern_ErnCd     from Earnings(#E) ErnCd
        Get #Ern_Empl_Rcd  from Earnings(#E) Empl_Rcd
        Get $Ern_Begin_Dt  from Earnings(#E) Begin_Dt
        Get $Ern_End_Dt    from Earnings(#E) End_Dt

        if $ErnCd    = $Ern_ErnCd    and
           #Empl_Rcd = #Ern_Empl_Rcd

           if $Ern_Begin_Dt > $Begin_Dt
              PUT $Begin_Dt INTO Earnings(#E) Begin_Dt
           end-if

           if $Ern_End_Dt   < $End_Dt
              PUT $End_Dt   INTO Earnings(#E) End_Dt
           end-if

           ARRAY-ADD #Ot_Hrs  to Earnings(#E) Ot_Hrs
           let $Found = 'Y'
        end-if

        add 1 to #E
     end-while

     if $Found = 'N'

        PUT $ErnCd
            #Empl_Rcd
            $Begin_Dt
            $End_Dt
            0
            #Ot_Hrs
            0
        INTO EARNINGS(#ERN)
             ERNCD
             EMPL_RCD
             BEGIN_DT
             END_DT
             REG_HRS
             OT_HRS
             OTH_HRS

        add 1 to #ERN
     end-if

  end-if

! do GET-CHARTKEYS

! let  #Oth_Hrs = 0
  do Get-Other-Earnings

! let  #Tot_Hrs              = #Reg_Hrs + #Ot_Hrs + #Oth_Hrs

! do WRITE-DETAIL-LINE


FROM  PS_PAY_EARNINGS EARNS
WHERE EARNS.COMPANY          = $Company
  AND EARNS.PAYGROUP         = $PayGroup
  AND EARNS.PAY_END_DT       = $Pay_End_Dt
  AND EARNS.OFF_CYCLE        = $Check.Off_Cycle
  AND EARNS.PAGE_NUM         = #Check.Page
  AND EARNS.LINE_NUM         = #Check.Line
  AND EARNS.SEPCHK           = #Check.Sepchk
  AND EARNS.OK_TO_PAY        ='Y'

end-SELECT

end-procedure


!**********************************
begin-procedure Get-Other-Earnings
!**********************************

begin-SELECT
OTH_EARNS.ERNCD
OTH_EARNS.OTH_EARNS
OTH_EARNS.OTH_PAY
OTH_EARNS.OTH_HRS
OTH_EARNS.ADD_GROSS

  let #Oth_Hrs  = &OTH_EARNS.Oth_Hrs

  move &OTH_EARNS.ErnCd     to $ErnCd
! move &OTH_EARNS.Oth_Earns to #Monetary_Amount

  !if &EARNS.GROSSUP = 'Y' AND &OTH_EARNS.ADD_GROSS = 'N'
  !    let #Monetary_Amount = &OTH_EARNS.OTH_EARNS - &D.OTH_PAY
  !else
  !end-if

  if #Oth_Hrs <> 0

     let $Found = 'N'
     let #E     = 0

     while #E < #ERN and $Found = 'N'

        Get $Ern_ErnCd     from Earnings(#E) ErnCd
        Get #Ern_Empl_Rcd  from Earnings(#E) Empl_Rcd
        Get $Ern_Begin_Dt  from Earnings(#E) Begin_Dt
        Get $Ern_End_Dt    from Earnings(#E) End_Dt

        if $ErnCd    = $Ern_ErnCd    and
           #Empl_Rcd = #Ern_Empl_Rcd

           if $Ern_Begin_Dt > $Begin_Dt
              PUT $Begin_Dt INTO Earnings(#E) Begin_Dt
           end-if

           if $Ern_End_Dt   < $End_Dt
              PUT $End_Dt   INTO Earnings(#E) End_Dt
           end-if

           ARRAY-ADD #Oth_Hrs to Earnings(#E) Oth_Hrs
           let $Found = 'Y'
        end-if

        add 1 to #E
     end-while

     if $Found = 'N'

        PUT $ErnCd
            #Empl_Rcd
            $Begin_Dt
            $End_Dt
            0
            0
            #Oth_Hrs
        INTO EARNINGS(#ERN)
             ERNCD
             EMPL_RCD
             BEGIN_DT
             END_DT
             REG_HRS
             OT_HRS
             OTH_HRS

        add 1 to #ERN
     end-if

  end-if

FROM  PS_PAY_OTH_EARNS OTH_EARNS
!    ,PS_GM_TEC_OT       OT1
!    ,PS_GM_TEC_OT_ERNCD OT2
WHERE OTH_EARNS.COMPANY    = $Company
  AND OTH_EARNS.PAYGROUP   = $PayGroup
  AND OTH_EARNS.PAY_END_DT = $Pay_End_Dt
  AND OTH_EARNS.OFF_CYCLE  = $Check.Off_Cycle
  AND OTH_EARNS.PAGE_NUM   = #Check.Page
  AND OTH_EARNS.LINE_NUM   = #Check.Line
  AND OTH_EARNS.ADDL_NBR   = #Earns.Addl
  AND OTH_EARNS.SEPCHK     = #Check.Sepchk

! AND ((OTH_EARNS.ADD_GROSS  = ' ') OR
!      (OTH_EARNS.ADD_GROSS = 'N' AND &EARNS.GROSSUP = 'Y'))

! AND OT1.COMPANY          = $Company
! AND OT1.EFFDT  = (SELECT MAX(OT3.EFFDT)
!     FROM PS_GM_TEC_OT OT3
!     WHERE OT3.COMPANY=OT1.COMPANY
!     AND   OT3.EFF_STATUS = 'A'
!     AND   OT3.EFFDT <= $Pay_End_Dt)
! AND OT2.COMPANY          = OT1.COMPANY
! AND OT2.EFFDT            = OT1.EFFDT
! AND OT2.ERNCD            = OTH_EARNS.ERNCD


end-SELECT

end-procedure


!****************************************************************************
! CALC-HOURS                                                                *
!****************************************************************************
begin-procedure CALC-HOURS

  ! Sort the Array by ErnCd and Empl Rcd

  let #sorted = 0

  while #sorted = 0

     let #moves   = 0
     let #low_idx = 0

     while #low_idx < #DIST - 1

        let #high_idx = #low_idx + 1

        Get $Low_ErnCd      from Distributions(#low_idx) ErnCd
        Get #Low_Empl_Rcd   from Distributions(#low_idx) Empl_Rcd
        Get $Low_Acct_Cd    from Distributions(#low_idx) Acct_Cd
        Get $Low_Account    from Distributions(#low_idx) Account
        Get $Low_Deptid     from Distributions(#low_idx) Deptid
        Get $Low_Begin_Dt   from Distributions(#low_idx) Begin_Dt
        Get $Low_End_Dt     from Distributions(#low_idx) End_Dt
        Get #Low_Earn_Amt   from Distributions(#low_idx) Earn_Amt
        Get #Low_Reg_Hrs    from Distributions(#low_idx) Reg_Hrs
        Get #Low_Ot_Hrs     from Distributions(#low_idx) Ot_Hrs
        Get #Low_Oth_Hrs    from Distributions(#low_idx) Oth_Hrs

        Get $High_ErnCd     from Distributions(#high_idx) ErnCd
        Get #High_Empl_Rcd  from Distributions(#high_idx) Empl_Rcd
        Get $High_Acct_Cd   from Distributions(#high_idx) Acct_Cd
        Get $High_Account   from Distributions(#high_idx) Account
        Get $High_Deptid    from Distributions(#high_idx) Deptid
        Get $High_Begin_Dt  from Distributions(#high_idx) Begin_Dt
        Get $High_End_Dt    from Distributions(#high_idx) End_Dt
        Get #High_Earn_Amt  from Distributions(#high_idx) Earn_Amt
        Get #High_Reg_Hrs   from Distributions(#high_idx) Reg_Hrs
        Get #High_Ot_Hrs    from Distributions(#high_idx) Ot_Hrs
        Get #High_Oth_Hrs   from Distributions(#high_idx) Oth_Hrs

        if $Low_ErnCd > $High_ErnCd  or
           ($Low_ErnCd = $High_ErnCd and #Low_Empl_Rcd > #High_Empl_Rcd)

           PUT $Low_ErnCd
               #Low_Empl_Rcd
               $Low_Acct_Cd
               $Low_Account
               $Low_Deptid
               $Low_Begin_Dt
               $Low_End_Dt
               #Low_Earn_Amt
               #Low_Reg_Hrs
               #Low_Ot_Hrs
               #Low_Oth_Hrs
           INTO DISTRIBUTIONS(#high_idx)
                ERNCD
                EMPL_RCD
                ACCT_CD
                ACCOUNT
                DEPTID
                BEGIN_DT
                END_DT
                EARN_AMT
                REG_HRS
                OT_HRS
                OTH_HRS

           PUT $High_ErnCd
               #High_Empl_Rcd
               $High_Acct_Cd
               $High_Account
               $High_Deptid
               $High_Begin_Dt
               $High_End_Dt
               #High_Earn_Amt
               #High_Reg_Hrs
               #High_Ot_Hrs
               #High_Oth_Hrs
           INTO DISTRIBUTIONS(#low_idx)
                ERNCD
                EMPL_RCD
                ACCT_CD
                ACCOUNT
                DEPTID
                BEGIN_DT
                END_DT
                EARN_AMT
                REG_HRS
                OT_HRS
                OTH_HRS

           add 1 to #moves
        end-if

        add 1 to #low_idx
     end-while

     if #moves = 0
        let #sorted = 1
     end-if
  end-while

  let #E = 0

  while #E < #ERN

     let #D         = 0
     let #Row_Count = 0
     let #total_amt = 0

     Get $Ern_ErnCd     from Earnings(#E) ErnCd
     Get #Ern_Empl_Rcd  from Earnings(#E) Empl_Rcd
     Get $Ern_Begin_Dt  from Earnings(#E) Begin_Dt
     Get $Ern_End_Dt    from Earnings(#E) End_Dt
     Get #Ern_Reg_Hrs   from Earnings(#E) Reg_Hrs
     Get #Ern_Ot_Hrs    from Earnings(#E) Ot_Hrs
     Get #Ern_Oth_Hrs   from Earnings(#E) Oth_Hrs

     while #D < #DIST

        Get $Dist_ErnCd     from Distributions(#D) ErnCd
        Get #Dist_Empl_Rcd  from Distributions(#D) Empl_Rcd
        Get #Dist_Earn_Amt  from Distributions(#D) Earn_Amt

        if $Dist_ErnCd > $Ern_ErnCd or
           ($Dist_ErnCd = $Ern_ErnCd and #Dist_Empl_Rcd > #Ern_Empl_Rcd)

           let #D = #DIST
        else

           if $Dist_ErnCd    = $Ern_ErnCd    and
              #Dist_Empl_Rcd = #Ern_Empl_Rcd

              if #Row_Count = 0
                 let #low_idx = #D
              end-if

              add 1              to #Row_Count
              add #Dist_Earn_Amt to #total_amt
           end-if
        end-if

        add 1 to #D
     end-while

     let #total_reg_hrs = 0
     let #total_ot_hrs  = 0
     let #total_oth_hrs = 0

     if #Row_Count > 0

        let #D = #low_idx

        while #Row_Count >= 2

           Get #Dist_Earn_Amt  from Distributions(#D) Earn_Amt

           if #total_amt = 0
              let #Dist_Reg_Hrs = 0
              let #Dist_Ot_Hrs  = 0
              let #Dist_Oth_Hrs = 0
           else
              let #Dist_Reg_Hrs = round(#Dist_Earn_Amt * #Ern_Reg_Hrs / #total_amt, 2)
              let #Dist_Ot_Hrs  = round(#Dist_Earn_Amt * #Ern_Ot_Hrs / #total_amt, 2)
              let #Dist_Oth_Hrs = round(#Dist_Earn_Amt * #Ern_Oth_Hrs / #total_amt, 2)
           end-if

           let #total_reg_hrs = #total_reg_hrs + #Dist_Reg_Hrs
           let #total_ot_hrs  = #total_ot_hrs + #Dist_Ot_Hrs
           let #total_oth_hrs = #total_oth_hrs + #Dist_Oth_Hrs

           PUT $Ern_Begin_Dt
               $Ern_End_Dt
               #Dist_Reg_Hrs
               #Dist_Ot_Hrs
               #Dist_Oth_Hrs
           INTO DISTRIBUTIONS(#D)
                BEGIN_DT
                END_DT
                REG_HRS
                OT_HRS
                OTH_HRS

           let #Row_Count = #Row_Count - 1
           add 1 to #D
        end-while

        if #total_amt = 0
           let #Dist_Reg_Hrs = 0
           let #Dist_Ot_Hrs  = 0
           let #Dist_Oth_Hrs = 0
        else
           let #Dist_Reg_Hrs = #Ern_Reg_Hrs - #total_reg_hrs
           let #Dist_Ot_Hrs  = #Ern_Ot_Hrs - #total_ot_hrs
           let #Dist_Oth_Hrs = #Ern_Oth_Hrs - #total_oth_hrs
        end-if

        PUT $Ern_Begin_Dt
            $Ern_End_Dt
            #Dist_Reg_Hrs
            #Dist_Ot_Hrs
            #Dist_Oth_Hrs
        INTO DISTRIBUTIONS(#D)
             BEGIN_DT
             END_DT
             REG_HRS
             OT_HRS
             OTH_HRS
     end-if

     add 1 to #E
  end-while

end-procedure

!****************************************************************************
! WRITE-DETAIL-LINE                                                         *
!                                                                           *
!****************************************************************************
begin-procedure WRITE-DETAIL-LINE

  move ' '            to $Line_Descr
  move $Check.Emplid  to $Emplid
  move #Empl_Rcd      to $EMPL_RCD
  move ' '            to $Statistics_Code
  move  0             to #Statistics_Amount
  move ' '            to $Tot_Hrs
  move 0              to #Process_Instance

  let #gl_entry_line     = #gl_entry_line + 1
  let $Jrnl_Ln_Ref       = substr(to_char(#Check.Check), 1, 10)
  let $Appl_Jrnl_ID      = 'None'
  let $Monetary_Amount   = #Monetary_Amount
  let $GL_Amount         = #GL_Amount
  let $Statistics_Amount = #Statistics_Amount
  let $Reg_Hrs           = #Reg_Hrs
  let $Ot_Hrs            = #Ot_Hrs
  let $Tot_Hrs           = #Tot_Hrs
  let $Accounting_Dt     = $Pay_End_Dt
  let $Process_Instance  = #Process_Instance
  let $gl_run_seq        = #gl_run_seq
  let $gl_entry_line     = #gl_entry_line
  let $Currency_Cd_GL    = 'USD'

  let $err-statement1 = 'GMTEC002, Insert-Error - WRITE-ACCOUNTING-LINE'
  let $err-statement2 = 'Key Values: TABLE '||'PS_GM_TEC_LN'||
                        ', GL_RUN_DATE '||$gl_run_date||
                        ', GL_RUN_SEQ '||$gl_run_seq||
                        ', GL_ENTRY_LINE '||$gl_entry_line||
                        ', BUSINESS_UNIT_GL '||$Business_Unit_GL||
                        ', EMPLID '||$Emplid||
                        ', EMPL_RCD '||$EMPL_RCD||
                        ', ACCOUNT '||$Account||
                        ', FUND_CODE '||$Fund_Code||
                        ', DEPTID '||$GL_DeptID||
                        ', PROGRAM_CODE  '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', PRODUCT '||$Product||
                        ', PROJECT_ID '||$Project_Id||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_unit||
                        ', STATISTICS_CODE '||$Statistics_Code||
                        ', MONETARY_AMOUNT '||$GL_Amount||
                        ', STATISTIC_AMOUNT '||$Statistics_Amount||
                        ', BEGIN_DT '||$Begin_Dt||
                        ', END_DT '||$End_Dt||
                        ', REG_HRS '||$Reg_Hrs||
                        ', OT_HRS '||$Ot_Hrs||
                        ', TOT_HRS '||$Tot_Hrs||
                        ', JRNL_LN_REF '||$Jrnl_Ln_Ref||
                        ', LINE_DESCR '||$Descr||
                        ', BUSINESS_UNIT '||$Business_Unit_HR||
                        ', APPL_JRNL_ID '||$Appl_Jrnl_ID||
                        ', ACCOUNTING_DT '||$Accounting_Dt||
                        ', PROCESS_INSTANCE '||$Process_Instance||
                        ', CURRENCY_CD '||$Currency_Cd_GL

begin-SQL On-Error=Error-Display
INSERT INTO PS_GM_TEC_LN
(RUN_DT,
  SEQNUM,
  BUSINESS_UNIT_GL,
  EMPLID,
  EMPL_RCD,
  ACCOUNT,
  FUND_CODE,
  DEPTID,
  PROGRAM_CODE,
  CLASS_FLD,
  PRODUCT,
  PROJECT_ID,
  AFFILIATE,
  OPERATING_UNIT,
  STATISTICS_CODE,
  MONETARY_AMOUNT,
  STATISTIC_AMOUNT,
  BEGIN_DT,
  END_DT,
  REG_HRS,
  OT_HRS,
  TOT_HRS,
  JRNL_LN_REF,
  LINE_DESCR,
  BUSINESS_UNIT,
  APPL_JRNL_ID,
  ACCOUNTING_DT,
  PROCESS_INSTANCE,
  CURRENCY_CD)

VALUES($gl_run_date,
       #gl_run_seq,
       $Business_Unit_GL,
       $Emplid,
       #Empl_Rcd,
       $Account,
       $Fund_Code,
       $GL_DeptID,
       $Program_Code,
       $Class_Fld,
       $Product,
       $Project_ID,
       $Affiliate,
       $Operating_unit,
       $Statistics_Code,
       #Monetary_Amount,
       #Statistics_Amount,
       $Begin_Dt,
       $End_Dt,
       #Reg_Hrs,
       #Ot_Hrs,
       #Tot_Hrs,
       $Jrnl_Ln_Ref,
       $Descr,
       $Business_Unit_HR,
       $Appl_Jrnl_ID,
       $Accounting_Dt,
       #Process_Instance,
       $Currency_Cd_GL)
end-SQL

end-procedure

!****************************************************************************
! Print-TE-Report                                                           *
! Selects TE-LN items                                                       *
!****************************************************************************
begin-procedure Print-TE-Report

  let $err-statement1 = 'GMTEC002, Insert Error - Print-TE-Report'
  let $err-statement2 = 'Key Values: TABLE '||'PS_GM_TEC_EE_SUM'

  do COMMIT-TRANSACTION

begin-SQL On-Error=Error-Display

Insert Into PS_GM_TEC_EE_SUM
 ( BUSINESS_UNIT_GL
  ,EMPLID
  ,MONETARY_AMOUNT
  ,REG_HRS
  ,OT_HRS
  ,TOT_HRS
 )
Select

  BUSINESS_UNIT_GL
  ,EMPLID
  ,Sum(MONETARY_AMOUNT)
  ,Sum(REG_HRS)
  ,Sum(OT_HRS)
  ,Sum(TOT_HRS)

FROM PS_GM_TEC_LN

Group by
    BUSINESS_UNIT_GL
    ,EMPLID


end-SQL

  let $err-statement1 = 'GMTEC002, Insert Error - Print-TE-Report'
  let $err-statement2 = 'Key Values: TABLE '||'PS_GM_TEC_SUM'

begin-SQL On-Error=Error-Display

Insert Into PS_GM_TEC_SUM
 ( BUSINESS_UNIT_GL
  ,EMPLID
  ,EMPL_RCD
  ,ACCOUNT
  ,FUND_CODE
  ,DEPTID
  ,PROGRAM_CODE
  ,CLASS_FLD
  ,PRODUCT
  ,PROJECT_ID
  ,AFFILIATE
  ,OPERATING_UNIT
  ,BEGIN_DT
  ,END_DT
  ,MONETARY_AMOUNT
  ,REG_HRS
  ,OT_HRS
  ,TOT_HRS
 )
Select

  BUSINESS_UNIT_GL
  ,EMPLID
  ,EMPL_RCD
  ,ACCOUNT
  ,FUND_CODE
  ,DEPTID
  ,PROGRAM_CODE
  ,CLASS_FLD
  ,PRODUCT
  ,PROJECT_ID
  ,AFFILIATE
  ,OPERATING_UNIT
  ,Min(BEGIN_DT)
  ,Max(END_DT)
  ,Sum(MONETARY_AMOUNT)
  ,Sum(REG_HRS)
  ,Sum(OT_HRS)
  ,Sum(TOT_HRS)

FROM PS_GM_TEC_LN

Group by
   BUSINESS_UNIT_GL
  ,EMPLID
  ,EMPL_RCD
  ,ACCOUNT
  ,FUND_CODE
  ,DEPTID
  ,PROGRAM_CODE
  ,CLASS_FLD
  ,PRODUCT
  ,PROJECT_ID
  ,AFFILIATE
  ,OPERATING_UNIT


end-SQL

  do COMMIT-TRANSACTION

  let #Tot_EEs = 0
  let #Tot_Pct = 0
  let $End_Report = 'N'
  let $Emplid  = ''
  let $err-statement1 = 'GMTEC002, Insert Error - Print-TE-Report'
  let $err-statement2 = 'Key Values: TABLE(s) '||
                        'PS_GM_TEC_SUM And PS_GM_TEC_EE_SUM'


begin-SELECT On-Error=Error-Display

TEC.BUSINESS_UNIT_GL
TEC.EMPLID
TEC.EMPL_RCD
TEC.ACCOUNT
TEC.FUND_CODE
TEC.DEPTID
TEC.PROGRAM_CODE
TEC.CLASS_FLD
TEC.PRODUCT
TEC.PROJECT_ID
TEC.AFFILIATE
TEC.OPERATING_UNIT
TEC.BEGIN_DT
TEC.END_DT
TEC.MONETARY_AMOUNT
TEC.REG_HRS
TEC.OT_HRS
TEC.TOT_HRS
TEC_EE.MONETARY_AMOUNT
TEC_EE.REG_HRS
TEC_EE.OT_HRS
TEC_EE.TOT_HRS

  if &TEC.EMPLID <> $Emplid

        if #Tot_EEs > 0
            do end-page
        end-if

        let #Tot_Pct = 0
        let $Emplid = &TEC.EMPLID
        let $BU     = &TEC.BUSINESS_UNIT_GL
        add 1 to #Tot_EEs
        do Get-EE-Data
  end-if

  let $PrevEE_TOT_HRS = &TEC_EE.TOT_HRS

  if &TEC_EE.TOT_HRS <> 0

        let #Pct = 100 * &TEC.TOT_HRS / &TEC_EE.TOT_HRS
  else
        let #Pct = 0
  end-if

  let $Pct = #Pct
  add #Pct to #Tot_Pct

  print &TEC.ACCOUNT              (+1,{ac})
  print &TEC.FUND_CODE            (0, {fc})
  print &TEC.DEPTID               (0, {dc})
  print &TEC.PROGRAM_CODE         (0, {pc})
  print &TEC.CLASS_FLD            (0, {sc})
  print &TEC.PROJECT_ID           (0, {gc})
  print &TEC.BEGIN_DT             (0, {sdc},11)
  print &TEC.END_DT               (0, {edc},11)
  print $Pct                      (0, {act}) edit BBBBBB99999.99
  print &TEC.TOT_HRS              (0, {lth}) edit B99999.99
!  print &TEC.MONETARY_AMOUNT      (0, {tth}) edit B9999999.99

From PS_GM_TEC_SUM    TEC,
     PS_GM_TEC_EE_SUM TEC_EE

Where
     TEC.BUSINESS_UNIT_GL = TEC_EE.BUSINESS_UNIT_GL
And  TEC.EMPLID           = TEC_EE.EMPLID
And  TEC.TOT_HRS <> 0
And  TEC_EE.TOT_HRS <> 0

Order By TEC.EMPLID, TEC.BEGIN_DT

end-SELECT

  let $End_Report = 'Y'
  if #Tot_EEs > 0
     do end-page
  end-if


end-procedure


!***************************************************************
Begin-Procedure Get-EE-Data
Begin-SELECT
EE.EMPLID
PN.NAME
  let $Name = ''
  move &PN.Name to $Name
  do Rotate-name


   Do Get-Empl-Address ($Emplid,'HOME', $AddressFound)

   Let $COUNTRY  = $GETADDR_Country
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
   let $ADDRESS3 = $GETADDR_Address3
   let $ADDRESS4 = $GETADDR_Address4
   let $HOUSE_TYPE = $GETADDR_HOUSE_TYPE
   let $ADDR_FIELD1 = $GETADDR_ADDR_FIELD1
   let $ADDR_FIELD2 = $GETADDR_ADDR_FIELD2
   let $ADDR_FIELD3 = $GETADDR_ADDR_FIELD3
   let $NUM1 = $GETADDR_NUM1
   let $NUM2 =$GETADDR_NUM2
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL
   let $COUNTY = $GETADDR_COUNTY
   let $GEO_CODE =$GETADDR_GEO_CODE
   let $IN_CITY_LIMIT =$GETADDR_IN_CITY_LIMIT


  let $CityStatePostal = ''
  concat $City with $CityStatePostal
  concat ', ' with $CityStatePostal
  concat $State with $CityStatePostal
  concat '  ' with $CityStatePostal
  concat $Postal with $CityStatePostal

EP.BIRTHDATE
  do Format-DateTime(&EP.BirthDate,$out,{DEFMDY},'','')
  move $out to $BDate
           DO PROC-STATE
           DO PERS_NID
           DO ADFORMAT

FROM PS_PERS_DATA_EFFDT EE,
     PS_PERSON EP, PS_PERSON_NAME PN
WHERE EE.EMPLID = $Emplid
AND   EE.EMPLID = EP.EMPLID
AND   PN.EMPLID = EE.EMPLID
AND   EE.EFFDT  = (SELECT MAX(EE0.EFFDT)
      FROM PS_PERS_DATA_EFFDT EE0
      WHERE EE0.EMPLID=EE.EMPLID
      AND   EE0.EFFDT <= $AsOfToday)
end-SELECT


Begin-SELECT
JH.EFFDT
JH.POSITION_NBR
  let $Position_Nbr = rtrim(&JH.Position_Nbr, ' ')
  if $Position_Nbr <> ''
     do Get-Position-Title
  end-if
JH.JOBCODE
  let $JobCode = rtrim(&JH.JobCode, ' ')
  if $JobCode <> ''
    do Get-Job-Title
  end-if
JH.DEPTID
  let $DeptID = rtrim(&JH.DeptID, ' ')
  if $DeptID <> ''
     do Get-Department-Name
  end-if

FROM PS_JOB JH
WHERE JH.EMPLID = $Emplid
AND JH.EMPL_RCD = (SELECT MIN(JH2.EMPL_RCD)
      FROM PS_JOB JH2
      WHERE JH2.EMPLID=JH.EMPLID
      AND   JH2.EFFDT =JH.EFFDT)
AND   JH.EFFDT  = (SELECT MAX(JH0.EFFDT)
      FROM PS_JOB JH0
      WHERE JH0.EMPLID=JH.EMPLID
      AND JH0.EMPL_RCD=JH.EMPL_RCD
      AND   JH0.EFFDT <= $AsOfToday)
AND JH.EFFSEQ = (SELECT MIN(JH1.EFFSEQ)
      FROM PS_JOB JH1
      WHERE JH1.EMPLID=JH.EMPLID
      AND   JH1.EFFDT =JH.EFFDT
      AND   JH1.EMPL_RCD=JH.EMPL_RCD)

ORDER BY JH.EFFDT DESC
End-Select


end-procedure

BEGIN-PROCEDURE PROC-STATE
BEGIN-SELECT
ST.DESCR
  let $STATE_DESC = RTRIM(&ST.DESCR,' ')

FROM PS_STATE_NAMES_TBL ST
WHERE ST.STATE=$STATE
 AND ST.COUNTRY=$COUNTRY
END-SELECT
END-PROCEDURE

BEGIN-PROCEDURE PERS_NID
BEGIN-SELECT
DD.NATIONAL_ID

  let $SSN1 = {ps-substr}(&DD.NATIONAL_ID,1,3)
  let $SSN2 = {ps-substr}(&DD.NATIONAL_ID,4,2)
  let $SSN3 = {ps-substr}(&DD.NATIONAL_ID,6,4)
  let $SSN = $SSN1 || '-'
  concat $SSN2 with $SSN
  concat '-' with $SSN
  concat $SSN3 with $SSN
FROM PS_PERS_NID  DD

WHERE DD.EMPLID = $EmplId
 AND DD.COUNTRY = $COUNTRY
END-SELECT
END-PROCEDURE

!********************************************
! copy of getdptnm.sqc modified for dept_tbl!
!********************************************
begin-procedure Get-Department-Name
begin-SELECT

X.DESCR,X.LOCATION

  let $DeptName = rtrim(&X.Descr,' ')
  let $DeptLocation = rtrim(&X.Location,' ')

! FROM  PS_DEPARTMENT_TBL X
FROM  PS_DEPT_TBL X
WHERE X.DEPTID = $DeptID
  AND X.SETID = (SELECT SETID
                 FROM PS_SET_CNTRL_REC
                 WHERE SETCNTRLVALUE = $BU
!                  AND RECNAME = 'DEPARTMENT_TBL')
                  AND RECNAME = 'DEPT_TBL')
  AND X.EFFDT =
      (SELECT MAX(Y.EFFDT)
!       FROM   PS_DEPARTMENT_TBL Y
       FROM   PS_DEPT_TBL Y
       WHERE  Y.DEPTID = $DeptID
         AND  Y.SETID  = X.SETID
         AND  Y.EFFDT <= $AsOfDate)
end-SELECT
end-procedure

!****************************************************************************
! GET-CHARTKEYS                                                             *
! Selects account information for the current account code.                 *
!****************************************************************************
begin-procedure GET-CHARTKEYS

  move 'N' to $ChartKey_Good

  let $err-statement1 = 'GMTEC002, Select Error - GET-CHARTKEYS'
  let $err-statement2 = 'Bind Variables: Account Code '||$Acct_Cd||
                        ', Effective Status A, and Effective date <= '||
                        $Pay_End_Dt

begin-SELECT On-Error=Error-Display
ACCT_CD2.ACCOUNT
ACCT_CD2.FUND_CODE
ACCT_CD2.DEPTID_CF
ACCT_CD2.PROGRAM_CODE
ACCT_CD2.CLASS_FLD
ACCT_CD2.PRODUCT
ACCT_CD2.PROJECT_ID
ACCT_CD2.AFFILIATE
ACCT_CD2.OPERATING_UNIT
ACCT_CD2.DESCR
ACCT_CD2.PRORATE_LIABILITY
ACCT_CD2.ENCUMB_ACCOUNT

   move 'Y' to $ChartKey_Good

!  let $Account           = &ACCT_CD2.ACCOUNT
   let $Fund_Code         = &ACCT_CD2.FUND_CODE
!  let $GL_DeptID         = &ACCT_CD2.DEPTID_CF
   let $Program_Code      = &ACCT_CD2.PROGRAM_CODE
   let $Class_Fld         = &ACCT_CD2.CLASS_FLD
   let $Product           = &ACCT_CD2.PRODUCT
   let $Project_Id        = &ACCT_CD2.PROJECT_ID
   let $Affiliate         = &ACCT_CD2.AFFILIATE
   let $Operating_unit    = &ACCT_CD2.OPERATING_UNIT
   let $Descr             = &ACCT_CD2.DESCR
   let $Prorate_Liability = &ACCT_CD2.PRORATE_LIABILITY
   let $Encumb_Account    = &ACCT_CD2.ENCUMB_ACCOUNT


FROM PS_ACCT_CD_TBL ACCT_CD2
WHERE ACCT_CD2.ACCT_CD    = $Acct_Cd
end-SELECT

  if rtrim($Account, ' ') = ''
     let $Account = 'None'
  end-if

  if $ChartKey_Good = 'N'
     !let $Msg = '   ERROR-Account Code: '||$Acct_Cd||' Is Invalid or Inactive.'

     !display $Msg

!    let $Account      = 'None'
     let $Fund_Code    = 'None'
!    let $GL_DeptID    = $DeptId
     let $Program_Code = 'None'
     let $Class_Fld    = 'None'
     let $Product      = 'None'
     let $Project_Id   = 'None'
     let $Affiliate    = 'None'
     let $Operating_unit = 'None'
     let $Descr        = 'None'
! else

!    if rtrim($Account, ' ') = ''

!       let $ChartKey_Good = 'N'
        ! let $Msg = '   ERROR-Account is Blank for Account Code: '||$Acct_Cd ||'.'

        ! display $Msg
!       let $Account      = 'None'
!       let $Fund_Code    = 'None'
!       let $GL_DeptID    = $DeptId
!       let $Program_Code = 'None'
!       let $Class_Fld    = 'None'
!       let $Product      = 'None'
!       let $Project_Id   = 'None'
!       let $Affiliate    = 'None'
!       let $Operating_unit = 'None'
!       let $Descr        = 'None'
!   end-if
  end-if

end-procedure

!****************************************************************************
! INITIALIZE-CO-COUNTER                                                     *
! Initialize company totals.                                                *
!****************************************************************************
begin-procedure INITIALIZE-CO-COUNTER

  let #C_Checks_Processed           = 0
  let #C_Gross_Total                = 0
  let #C_Net_Pay_Total              = 0

end-procedure
!****************************************************************************
! CALC-COMPANY-TOTALS                                                       *
! Calculates company totals.                                                *
!****************************************************************************
begin-procedure CALC-COMPANY-TOTALS

  add #P_Checks_Processed           to #C_Checks_Processed
  add #P_Gross_Total                to #C_Gross_Total
  add #P_Net_Pay_Total              to #C_Net_Pay_Total

end-procedure
!****************************************************************************
! PRINT-COMPANY-TOTALS                                                      *
! Prints company totals after the completion of each company.               *
!****************************************************************************
begin-procedure PRINT-COMPANY-TOTALS

  move #C_Checks_Processed          to $C_Checks_Processed 999999999999
  move #C_Gross_Total               to $C_Gross_Total 999999999.99
  move #C_Net_Pay_Total             to $C_Net_Pay_Total 999999999.99

  let $Msg = '*** Company '||$Company||' Posting Summary ***'

  display ' '
  display $Msg
  display ' '
  display '   Checks Processed         :  ' noline
  display $C_Checks_Processed
  display '   Total Gross Pay          : $' noline
  display $C_Gross_Total
  display '   Total Net Pay            : $' noline
  display $C_Net_Pay_Total
  display ' '

end-procedure
!****************************************************************************
! CALC-TOTALS                                                               *
! Check and Calculate paygroup totals.                                      *
!****************************************************************************
begin-procedure CALC-TOTALS

  let #Check.Total_Gross       = round(#Check.Total_Gross,2)
  let #Check.Net_Pay           = round(#Check.Net_Pay,2)

  add 1                          to #P_Checks_Processed
  add #Check.Total_Gross         to #P_Gross_Total
  add #Check.Net_Pay             to #P_Net_Pay_Total

end-procedure
!****************************************************************************
! INITIALIZE-VARIABLES                                                      *
!****************************************************************************
begin-procedure INITIALIZE-VARIABLES

! let #Init_Count = 0

! while #Init_Count < 5000

!    put ' ' ' ' 0
!    into Store_Dist(#Init_Count)
!       Store_DeptId
!       Store_Acct_Cd
!       Store_Earnings

!    add 1 to #Init_Count
! end-while

  move 'Y' to $ChartKey_Good
  move ' ' to $Check.Off_Cycle
  move 0   to #Check.Page
  move ' ' to $Check.Page
  move 0   to #Check.Line
  move ' ' to $Check.Line
  move 0   to #Check.SepChk
  move ' ' to $Check.SepChk
  move 0   to #Check.Check
  move ' ' to $Check.Emplid
  move 0   to #Check.Total_Gross
  move 0   to #Check.Net_Pay
  move ' ' to $Check.Check_Dt
  move ' ' to $Check.PayCheck_Option
  move ' ' to $Check.Business_Unit

end-procedure

!****************************************************************************
! GET-GL-BUS-UNIT                                                           *
! Get GL Business Unit
!****************************************************************************

begin-procedure GET-GL-BUS-UNIT

let $Business_Unit_GL = ' '

begin-SELECT

BUSINESS_UNIT_GL
  let $Business_Unit_GL = &BUSINESS_UNIT_GL

FROM PS_BUS_UNIT_TBL_HR
WHERE BUSINESS_UNIT =  $Business_Unit_HR

end-SELECT

end-procedure

!****************************************************************************
! GET-NEXT-SEQNUM                                                           *
!****************************************************************************
begin-procedure Get-Next-Seqnum ($dt, :#no)

let #no = 0

begin-SELECT

MAX(SEQNUM) &SEQNUM
  let #no = &SEQNUM

FROM PS_GL_GEN_HISTORY
WHERE RUN_DT = $dt

end-SELECT

let #no = #no + 1

end-procedure

!****************************************************************************
! DELETE-RUN-CONTROL                                                        *
! Deletes run control information from run control table.                   *
!****************************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'GMTEC002, Delete-Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Key Values: TABLE PS_GM_RC_TE' ||
                        ', OPRID ' || $PRCS_OPRID ||
                        ', RUN_CNTL_ID ' || $PRCS_RUN_CNTL_ID

!begin-SQL On-Error=Error-Display
!
!DELETE FROM PS_GM_RC_TE
!WHERE OPRID       = $Prcs_OprID
!  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
!
!end-SQL

end-procedure
!****************************************************************************
! Deletes TEC information from previous runs.                               *
!****************************************************************************
begin-procedure Delete-TEC-Data

  let $err-statement1 = 'GMTEC002, Delete-Error - DELETE-TEC-DATA'
  let $err-statement2 = 'Key Values: TABLE PS_GM_TEC_LN'

begin-SQL On-Error=Error-Display

DELETE FROM PS_GM_TEC_LN

end-SQL

  let $err-statement2 = 'Key Values: TABLE PS_GM_TEC_SUM'

begin-SQL On-Error=Error-Display

DELETE FROM PS_GM_TEC_SUM

end-SQL

  let $err-statement2 = 'Key Values: TABLE PS_GM_TEC_EE_SUM'

begin-SQL On-Error=Error-Display

DELETE FROM PS_GM_TEC_EE_SUM

end-SQL

end-procedure

!****************************************************************************
! WRAPUP                                                                    *
!****************************************************************************
begin-procedure WRAPUP

  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

end-procedure
!****************************************************************************
! SQC's                                                                     *
!****************************************************************************
#Include 'reset.sqc'     !Reset printer Procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stderror.sqc'  !Routine for error display
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getcodta.sqc'  !Gets Company Data
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#include 'adformat.sqc'  !For Global addressing
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'getjobtl.sqc'  !Get-Job-Title procedure
#Include 'getposnm.sqc'  !Get-Position-Name procedure
#Include 'getaddr.sqc'   !Get Employee Address data
