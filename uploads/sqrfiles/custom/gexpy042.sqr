!***********************************************************************
! GEXPY042:  PHARMACY HOURS REPORT BY DEPTID WORKED                    *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXPY042:             PHARMACY HOURS REPORT                          *
!                                                                      *
! Narrative:            This program originally created a Weekly       *
!                       Pharmacy Hours Report.                         *
!                       User has requested a monthly file in lieu of a *
!                       printed report.  New logic needed to satisfy   *
!                       new user requirements.                         *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    * 
!                                                                      *
! SQL Tables:           PS_JOB                                         * 
!                       PS_PERSONAL_DATA                               *
!                       PS_EARNINGS_BAL    AXL new to this sqr         *
!                                                                      *
! Written by:           Tony Labra                                     *
!                                                                      *
! Normally run:                                                        *
!                                                                      *
! Entered Run                                                          *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                                                                      *
!                       Company Division Code                          *
!                       Company                                        *
!                       Company/Paygroup                               *
!                       Deptid                                         *
!                       Acctcd                                         *                                           
!                       Empl_Status                                    *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE         DESCRIPTION OF THE CHANGE          *        
!***********************************************************************
!          AXL         02/06/2003   Clone of GEXPY034.  Report earns   *
!                                   by deptid worked.                  *
!                                                                      *
!          AXL         02/24/2003   Use date supplied on run cntl panel*
!                                   to determine range of pay end dates*
!                                   for from/through clause.           *
!                                                                      *
!          AXL         02/28/2003   Allow logic to p/u latest security *
!                                   tree changes                       *
!                                                                      *
!	   AXL	       03/11/2003   Modified Empl_rcd join for 8.3     *
!                                   upgrade.                           *
!                                                                      *
!          GBD         04/08/2003   Added Erncd 164 Pharmacy Night     *
!                                   Premium to earnings code selection *
!                                   for oth earns amt.                 *
!                                   Added code to accumulate multiple  *
!                                   Earnings code premiums.            *
!                                                                      * 
!          AXL         10/01/2003   Transferred Treenode assignment to *
!                                   sqc for easier maintenance.        *
!                                                                      *
!          AXL         01/12/2005   Added PREM Hrs to output.  Added   *
!                                   logic to create Excel file instead *
!                                   of DAT file.                       *
!                                                                      *
! 33063   AXL          07/20/2005   Retire hard-coded logic that       *
!                                   determines the Pharmacy Specialist.*
!                                   The info will now come the RX      *
!                                   security tree.                     *
!51359    sxp         22/08/2008    Added 173 earncode                 *
! 60863   mxd	       05/21/2009   Update SQR to retrieve JOB TITLE   *
!					from Position Data	       *
!***********************************************************************
#include 'setenv.sqc' !Set environment
#include 'setup02.sqc' 
#define debug8
!***********************************************************************
begin-report
!***********************************************************************
#debug9 show 'begin-report'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do stdapi-init
  do Init-Variables 
  do Open-File
  do Write-File-Header	!AXL 1/12/2005 New
  
  do Get-Calendar-Year-Id
  do Main
  do Create-Out-File
 
  do EOJ-Process
  
  do stdapi-term

end-report

!***********************************************************************
begin-procedure Init-Variables
!***********************************************************************
#debug9 show 'Init-Variables'

  let $x000_new_page_flag = 'N'
  
  let $ReportID           = 'GEXPY042'
  let $ReportTitle        = 'GEXPY042'
  let $Country            = 'USA'

  encode '<009>' into $tab	!AXL 1/12/2005 New
  
  show '$ReportID= '     $ReportID
  show '$ReportTitle = ' $ReportTitle   

  Do GEXXX951-Select-Oracle-Instance

  !AXL 07/20/2005 Let cmpy/paygroup/dpt come from main select
  Let $GEXXX900_Company_Alias  = 'JOB.COMPANY'
  Let $GEXXX901_Company_Alias  = 'JOB.COMPANY'
  Let $GEXXX901_Paygroup_Alias = 'JOB.PAYGROUP'
  Let $GEXXX902_Deptid_Alias   = 'JOB.DEPTID'
  Let $GEXXX903_Emp_Stat_Alias = 'JOB.EMPL_STATUS'
  Let $GEXXX907_Div_CD_Alias   = 'GDT.GEX_COMPANY_DIV_CD'
  Let $GEXXX909_Acct_CD_Alias  = 'JOB.ACCT_CD'

  if $Prcs_process_instance = ''
    do GEXXX950-Input-Parameters
  else
    Do GEXXX900-Select-Company-Parameters 
    Do GEXXX901-Select-Company-Paygroup-Parameters    
    Do GEXXX902-Select-Deptid-Parameters 
    Do GEXXX903-Select-Emp-Stat-Parameters          
    Do GEXXX907-Select-Div-CD-Parameters
    Do GEXXX909-Select-Acct-CD-Parameters

    Do GEXXX922-Select-Parameters
    Let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_PAY.ASOFDATE
    if rtrim($X000_WHERE_SELECT_ASOFDATE, ' ' ) = ''
      Let $X000_WHERE_SELECT_ASOFDATE = $asoftoday
      Let $AsOfDate = $X000_WHERE_SELECT_ASOFDATE 
    else
      Let $AsOfDate = $X000_WHERE_SELECT_ASOFDATE 
    end-if
  end-if

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan

  Do Get-Last-Confirmed-Pay
  Do Get-From-Pay-End
     Show 'from date: ' &From_Pay_End
  Do Get-Thru-Pay-End
     Show 'thru date: ' &Thru_Pay_End

  !AXL 8/12/2002 - Delete last yr Begin
  If $balance_period = '07'
      Do Delete-Table
  End-if
  !AXL 8/12/2002 - Delete last yr End

  show '$GEXXX907_INCLUDE_DIV_CD_CRITERIA                =' $GEXXX907_INCLUDE_DIV_CD_CRITERIA
  show '$GEXXX900_INCLUDE_COMPANY_CRITERIA               =' $GEXXX900_INCLUDE_COMPANY_CRITERIA
  show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA      =' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA   
  show '$GEXXX902_INCLUDE_DEPTID_CRITERIA                =' $GEXXX902_INCLUDE_DEPTID_CRITERIA
  show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA              =' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
  show '$GEXXX909_INCLUDE_ACCT_CD_CRITERIA               =' $GEXXX909_INCLUDE_ACCT_CD_CRITERIA         
    
  show '$X000_WHERE_SELECT_ASOFDATE                      =' $X000_WHERE_SELECT_ASOFDATE 

end-procedure

!***********************************************************************
begin-procedure Open-File
!***********************************************************************

  let $file1 = '{OUTFILE}' || lower($ReportID) || '.xls'

  open $file1 as 1 for-writing
        record=500:vary	
        status=#filestat
  if #filestat < 0
     display 'Open failed for file <' noline
     display $file1 noline
     display '>'
     stop
  end-if
 
end-procedure

!AXL 1/10/2005 New - Begin
!***********************************************************************************
Begin-Procedure Write-file-header
!***********************************************************************************
#debug9 Show 'Write-File-Header'

    Move '' To $all_cols                                                       
    string '                    ' '          ' '           ' '     '
           '                              ' '               ' '    '      
           '     ' '    Jul' '        ' '        '
           '    Aug' '        ' '        '
           '    Sep' '        ' '        '
           '    Oct' '        ' '        '  
           '    Nov' '        ' '        '  
           '    Dec' '        ' '        '
           '    Jan' '        ' '        '
           '    Feb' '        ' '        '
           '    Mar' '        ' '        '
           '    Apr' '        ' '        '
           '    May' '        ' '        '
           '    Jun' '        ' '        '
           '           ' by $tab into $all_cols   
    
    write 1 from $all_cols Status=#filestat

    If #filestat <> 0
       Show 'Error writing file header.  Program terminating.'
       Stop
    End-If
   !******************************************************
     Move '' To $all_cols             
     
     string 'Mgr                 ' '          ' '           ' '     '
            '                             ' '               ' 'Wrk '      
            'Std  ' 'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
	    'Prem    ' 'Prem    ' 'Otp     '
            'Pay End     ' by $tab into $all_cols   

     write 1 from $all_cols Status=#filestat2
    
     If #filestat2 <> 0
        Show 'Error writing file header2.  Program terminating.'
        Stop
     End-If
   !******************************************************
     Move '' To $all_cols             
     
     string 'Name                ' 'Store     ' 'Emplid     ' 'Rcd# '
            'Name                         ' 'Job Title      ' 'Sts '      
            'Hrs  ' 'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
	    'Amt     ' 'Hrs     ' 'Hrs     '
            'Date        '  by $tab into $all_cols   

     write 1 from $all_cols Status=#filestat3

     If #filestat3 <> 0
        Show 'Error writing file header3.  Program terminating.'
        Stop
     End-If

End-Procedure
!AXL 1/10/2005 New - End 

!***********************************************************************
Begin-Procedure Get-Last-Confirmed-Pay
!***********************************************************************
#debug9 Show 'Get-Last-Confirmed-Pay'
Begin-Select Loops=1
pay_end_dt
To_Char(pay_end_dt,'MM')           &balance_period
To_Char(pay_end_dt,'YYYY')         &balance_year
To_Char(pay_end_dt,'fmMonth YYYY') &period

  Let $pay_end_dt       = &pay_end_dt
  Let $balance_year     = &balance_year
  Let #balance_period   = &balance_period
  Let #balance_year     = &balance_year
  Let $balance_period   = edit(&balance_period,'99')
  Let $Reporting_Period = &period

!  show '$pay_end_dt '	&pay_end_dt
!  show '$balance_year ' &balance_year
!  show '$balance_period ' $balance_period
!  show '#balance_year ' &balance_year
!  show '#balance_period ' &balance_period
!  show '$Reporting_Period ' &period

  Show 'Report will contain balances for the month of ' $Reporting_Period
  Show 'Last confirmed pay end date:  ' $pay_end_dt

From   ps_pay_calendar

Where  pay_end_dt              =
      (Select Max(pay_end_dt)
       From   ps_pay_calendar
       Where  pay_end_dt      <= $AsOfDate
       And    pay_confirm_run  = 'Y')

And    pay_confirm_run         = 'Y'
End-Select
End-Procedure

!***********************************************************************
Begin-Procedure Get-From-Pay-End
!***********************************************************************
#debug9 show 'Get-From-Pay-End'

Begin-select

PC.pay_end_dt	&From_Pay_End

From   PS_PAY_CALENDAR PC
Where  To_Char(pc.check_dt,'YYYYMM') =
      (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
       From   ps_pay_calendar
       !AXL 2/24/2003 Use Date from panel
       Where  $X000_WHERE_SELECT_ASOFDATE Between pay_begin_dt And pay_end_dt
       And    company  = pc.company
       And    paygroup = pc.paygroup
       And    pay_off_cycle_cal = 'N')	
And    pc.pay_period = 1
And    pc.company  = 'GEI'
And    pc.paygroup = 'RET'
And    pc.pay_off_cycle_cal = 'N'	!AXL 2/24/2003 Ignore OFF CYCLES

end-select
end-procedure

!***********************************************************************
Begin-Procedure Get-Thru-Pay-End
!***********************************************************************
#debug9 show 'Get-Thru-Pay-End'

Begin-select

PC2.pay_end_dt  &Thru_Pay_End

From   ps_pay_calendar pc2
Where  To_Char(pc2.check_dt,'YYYYMM') =
      (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
       From   ps_pay_calendar
       !AXL 2/24/2003 Use Date from panel
       Where  $X000_WHERE_SELECT_ASOFDATE Between pay_begin_dt And pay_end_dt
       And    company  = pc2.company
       And    paygroup = pc2.paygroup
       And    pay_off_cycle_cal = 'N')	
And    pc2.pay_period =
      (Select Max(pay_period)
       From   ps_pay_calendar
       Where  To_Char(check_dt,'YYYYMM') =
             (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
              From   ps_pay_calendar
              !AXL 2/24/2003 Use Date from panel
              Where  $X000_WHERE_SELECT_ASOFDATE Between pay_begin_dt And pay_end_dt
              And    company  = pc2.company
              And    paygroup = pc2.paygroup
              And    pay_off_cycle_cal = 'N')
       And    company  = pc2.company
       And    paygroup = pc2.paygroup)
And    pc2.company  = 'GEI'
And    pc2.paygroup = 'RET'
And    pc2.pay_off_cycle_cal = 'N' 	!AXL 2/24/2003 Ignore OFF CYCLES

end-select
end-procedure

!*********************************************************************
begin-procedure Main
!*********************************************************************
  let $sql-statement = 'Main'

begin-select distinct

J.DEPTID

	let $deptid=&j.deptid
        let $process_rx = 'N'
        do Evaluate-TreeNodes !AXL 10/1/2003 - Done in SQC

  #ifdef debug8
!    show 'deptid            = ' $deptid
!    show '   $p_num         = ' $p_num
!    show '   $region        = ' $region
!    show '   $pharm_regions = ' $pharm_regions
!    show '   $pos           = ' #pos
  #endif
        if $process_rx = 'Y'		!AXL 10/1/2003 From SQC
           !Do Evaluate-RX-Regions	AXL 07/20/2005 No longer needed
	   do pharmacy-groups
        end-if

  FROM PS_JOB J
  WHERE J.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE J.EMPLID = EMPLID
          AND J.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $AsOfDate)
    AND J.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE J.EMPLID = EMPLID
          AND J.EMPL_RCD = EMPL_RCD
          AND J.EFFDT = EFFDT)
    
end-select
  
end-procedure

!***********************************************************************
begin-procedure Pharmacy-Groups
!***********************************************************************
#debug9 show 'pharmacy-groups'

  !let #eb.prm_mtd = 0
  !let #eb.otp_mtd = 0
  !let #process_this_month = 0
  let $first_emplid = 'Y'                                    !GBD 04/08/2003
 
begin-select
PAY.COMPANY  
PAY.DEPTID 
PAY.EMPLID
PAY.EMPL_RCD
PR.NAME
PAYOTH.ERNCD		
sum(PAYOTH.oth_earns) 	&sum_oth_earns
sum(PAYOTH.oth_hrs) 	&sum_oth_hrs

!GBD 04/08/2003 Begin
   let $check_emplid = &PAY.EMPLID
   let $check_deptid = &PAY.DEPTID
   let #check_empl_rcd = &PAY.EMPL_RCD
   let $check_erncd = &PAYOTH.ERNCD

   if $first_emplid = 'Y'
      let $hold_emplid = $check_emplid
      let #hold_empl_rcd = #check_empl_rcd
      let $hold_deptid = $check_deptid
      move 'N' to $first_emplid
   end-if

!   show 'Check: ' $check_emplid ' ' #check_empl_rcd ' ' $check_deptid ' ' $check_erncd
!   show 'Hold:  ' $hold_emplid ' ' #hold_empl_rcd ' ' $hold_deptid
   if ($check_emplid = $hold_emplid) and (#check_empl_rcd = #hold_empl_rcd) and
     ($check_deptid = $hold_deptid)
     !show 'Accumulate totals'     
   else
       !show 'Clear totals'
     let #eb.prm_mtd = 0
     let #eb.prm_hrs_mtd = 0	!AXL 1/10/2005 New counter
     let #eb.otp_mtd = 0
     let #process_this_month = 0 
      let $hold_emplid = $check_emplid
      let #hold_empl_rcd = #check_empl_rcd
      let $hold_deptid = $check_deptid
   end-if
!GBD 04/08/2003 End

!   if &PAYOTH.erncd ='167'                                  !GBD 04/08/2003
   if &PAYOTH.erncd ='167' or &PAYOTH.erncd ='164'           !GBD 04/08/2003 Erncd Added
       Add &sum_oth_earns To #eb.prm_mtd
       Add &sum_oth_hrs   To #eb.prm_hrs_mtd	!AXL 1/10/2005 New counter

       Add &sum_oth_earns To #process_this_month
    else
       Add &sum_oth_hrs To #eb.otp_mtd 
       Add &sum_oth_hrs To #process_this_month
    end-if
  !Do Earnings-Balance
  
  Do Evaluate-Insert-Mo

  if #process_this_month <> 0  !Only write record for non-zero amounts
   add 1 to #record_count
 
     #ifdef debug8
      ! show '$balance_period ' $balance_period ' emplid ' &pay.emplid ' #eb.prm_mtd ' #eb.prm_mtd ' #eb.prm_hrs_mtd ' #eb.prm_hrs_mtd  ' #eb.otd_mtd ' #eb.otp_mtd
     #endif
      
    
     Evaluate $balance_period
	   When = '07'     !AXL 08/12/2002  Check for '07' not '7'
              !If #balance_period = '07'  !Fiscal year starts-get rid of old info
              Do Insert-New-Info
              Break
           When-Other
              !Else
              Do Check-Existing-Rows
              if $Prev_Row_Exists ='Y'
              
                 Do Update-Existing-Info
              else
                 Do insert-new-info
              end-if
              !End-if
     end-evaluate
  end-if
 
 
!GBD 04/08/2003 Begin
!  let #eb.prm_mtd = 0
!  let #eb.otp_mtd = 0
!  let #process_this_month = 0 
!GBD 04/08/2003 End

FROM   PS_PERSONAL_DATA  PR,
       PS_JOB            JOB,
       PS_GEX_DEPT_TBL   GDT,
       PS_PAY_EARNINGS PAY,
       PS_PAY_OTH_EARNS PAYOTH
      
WHERE  JOB.EFFDT                =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID            = JOB.EMPLID 
       AND    EMPL_RCD         = JOB.EMPL_RCD
       AND    EFFDT            <= $AsOfDate)

AND    JOB.EFFSEQ               =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID            = JOB.EMPLID
       AND    EMPL_RCD         = JOB.EMPL_RCD
       AND    EFFDT             = JOB.EFFDT)

AND    PAY.deptid 		  = $deptid

AND    PR.EMPLID                = PAY.EMPLID

AND    PAY.DEPTID          = GDT.DEPTID 

AND    GDT.EFFDT           =
      (SELECT MAX(EFFDT)
       FROM   PS_GEX_DEPT_TBL
       WHERE  DEPTID       = GDT.DEPTID
       AND    EFFDT       <= $AsOfDate)

AND    GDT.SEQUENCE_NUMBER =
      (SELECT MAX(SEQUENCE_NUMBER)
       FROM   PS_GEX_DEPT_TBL
       WHERE  DEPTID       = GDT.DEPTID
       AND    EFFDT        = GDT.EFFDT)

And    JOB.company                  = PAY.company
And    JOB.paygroup                 = PAY.paygroup

And    JOB.emplid                   = PAY.EMPLID
And    JOB.empl_rcd                 = PAY.empl_rcd  

And    PAYOTH.company               = PAY.company
And    PAYOTH.paygroup              = PAY.paygroup
And    PAYOTH.pay_end_dt            = PAY.pay_end_dt
And    PAYOTH.off_cycle             = PAY.off_cycle
And    PAYOTH.page_num              = PAY.page_num
And    PAYOTH.line_num              = PAY.line_num
And    PAYOTH.addl_nbr              = PAY.addl_nbr
And    PAY.pay_end_dt               Between &From_Pay_End And &Thru_Pay_End
! GBD 04/08/2003 Begin
!And    PAYOTH.erncd                 IN ('167','OTP')        !GBD 04/08/2003
And    PAYOTH.erncd                 IN ('164','167','OTP','173')   !GBD 04/08/2003 Erncd Added  !SXP ADDED 173 ERNCD
! GBD 04/08/2003 End

AND   [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
AND   [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA] 
AND   [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
AND   [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
AND   [$GEXXX909_INCLUDE_ACCT_CD_CRITERIA]
AND   [$GEXXX907_INCLUDE_DIV_CD_CRITERIA]

Group by PAY.COMPANY, PAY.DEPTID, PAY.EMPLID, PAY.EMPL_RCD, PR.NAME, PAYOTH.ERNCD

end-select

!GBD 04/08/2003 Begin
  let #eb.prm_mtd = 0
  let #eb.prm_hrs_mtd = 0	!AXL 1/10/2005
  let #eb.otp_mtd = 0
  let #process_this_month = 0 
!GBD 04/08/2003 End

end-procedure

!***********************************************************************
Begin-Procedure Check-Existing-Rows
!***********************************************************************
#debug9 Show 'Check-Existing-Rows'
    Let $Prev_Row_Exists = 'N'
Begin-Select
'X'
    Let $Prev_Row_Exists = 'Y'

From   ps_gex_r_gexPY042 x

Where  x.emplid         = &pay.emplid
And    x.empl_rcd      = &pay.empl_rcd
and    x.deptid         = &pay.deptid

End-Select

End-Procedure 
 

!***********************************************************************
Begin-Procedure Evaluate-Insert-Mo
!***********************************************************************

	let #prem_amt_jan = 0
        let #prem_hrs_jan = 0
	let #OTPHrs_jan   = 0
          
	let #prem_amt_feb = 0
	let #prem_hrs_feb = 0
	let #OTPHrs_feb   = 0
        
	let #prem_amt_mar = 0
	let #prem_hrs_mar = 0
	let #OTPHrs_mar   = 0 
            
	let #prem_amt_apr = 0
	let #prem_hrs_apr = 0
	let #OTPHrs_apr   = 0 
             
	let #prem_amt_may = 0
	let #prem_hrs_may = 0
	let #OTPHrs_may   = 0 
           
	let #prem_amt_jun = 0
	let #prem_hrs_jun = 0
	let #OTPHrs_jun   = 0 
             
        let #prem_amt_jul = 0
	let #prem_hrs_jul = 0
	let #OTPHrs_jul   = 0 
           
	let #prem_amt_aug = 0
	let #prem_hrs_aug = 0
	let #OTPHrs_aug   = 0
             
	let #prem_amt_sep = 0
	let #prem_hrs_sep = 0
	let #OTPHrs_sep   = 0 
            
	let #prem_amt_oct = 0
	let #prem_hrs_oct = 0
	let #OTPHrs_oct   = 0
        
	let #prem_amt_nov = 0
	let #prem_hrs_nov = 0
	let #OTPHrs_nov   = 0
            
	let #prem_amt_dec = 0
	let #prem_hrs_dec = 0
	let #OTPHrs_dec   = 0

     Evaluate $balance_period
	   When = '01'
             let #prem_amt_jan = #eb.prm_mtd
             let #prem_hrs_jan = #eb.prm_hrs_mtd
	     let #OTPHrs_jan   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_jan_prem'
	     let $set_condition2 =  'gex_jan_hrs'
	     let $set_condition3 =  'gex_jan_hrs_prem'
             break
           When = '02'
	     let #prem_amt_feb = #eb.prm_mtd
	     let #prem_hrs_feb = #eb.prm_hrs_mtd
	     let #OTPHrs_feb   = #eb.otp_mtd
             let $set_condition1 =  'set gex_feb_prem'
	     let $set_condition2 =  'gex_feb_hrs'
	     let $set_condition3 =  'gex_feb_hrs_prem'
             break
           When = '03'
	     let #prem_amt_mar = #eb.prm_mtd
	     let #prem_hrs_mar = #eb.prm_hrs_mtd
	     let #OTPHrs_mar   = #eb.otp_mtd
             let $set_condition1 =  'set gex_mar_prem'
	     let $set_condition2 =  'gex_mar_hrs'
	     let $set_condition3 =  'gex_mar_hrs_prem'
             break
           When = '04'
	     let #prem_amt_apr = #eb.prm_mtd
	     let #prem_hrs_apr = #eb.prm_hrs_mtd
	     let #OTPHrs_apr   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_apr_prem'
	     let $set_condition2 =  'gex_apr_hrs'
	     let $set_condition3 =  'gex_apr_hrs_prem'
             break
           When = '05'
	     let #prem_amt_may = #eb.prm_mtd
	     let #prem_hrs_may = #eb.prm_hrs_mtd
	     let #OTPHrs_may   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_may_prem'
	     let $set_condition2 =  'gex_may_hrs'
	     let $set_condition3 =  'gex_may_hrs_prem'
             break
           When = '06'
	     let #prem_amt_jun = #eb.prm_mtd
	     let #prem_hrs_jun = #eb.prm_hrs_mtd
	     let #OTPHrs_jun   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_jun_prem'
	     let $set_condition2 =  'gex_jun_hrs'
	     let $set_condition3 =  'gex_jun_hrs_prem'
             break
           When = '07'
             let #prem_amt_jul = #eb.prm_mtd
	     let #prem_hrs_jul = #eb.prm_hrs_mtd
	     let #OTPHrs_jul   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_jul_prem'
	     let $set_condition2 =  'gex_jul_hrs'
	     let $set_condition3 =  'gex_jul_hrs_prem'
             break
           When = '08'
	     let #prem_amt_aug = #eb.prm_mtd
	     let #prem_hrs_aug = #eb.prm_hrs_mtd
	     let #OTPHrs_aug   = #eb.otp_mtd
             let $set_condition1 =  'set gex_aug_prem'
	     let $set_condition2 =  'gex_aug_hrs'
	     let $set_condition3 =  'gex_aug_hrs_prem'
             break
           When = '09'
	     let #prem_amt_sep = #eb.prm_mtd
	     let #prem_hrs_sep = #eb.prm_hrs_mtd
	     let #OTPHrs_sep   = #eb.otp_mtd
             let $set_condition1 =  'set gex_sep_prem'
	     let $set_condition2 =  'gex_sep_hrs'
	     let $set_condition3 =  'gex_sep_hrs_prem'
             break
           When = '10'
	     let #prem_amt_oct = #eb.prm_mtd
	     let #prem_hrs_oct = #eb.prm_hrs_mtd
	     let #OTPHrs_oct   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_oct_prem'
	     let $set_condition2 =  'gex_oct_hrs'
	     let $set_condition3 =  'gex_oct_hrs_prem'
             break
           When = '11'
	     let #prem_amt_nov = #eb.prm_mtd
	     let #prem_hrs_nov = #eb.prm_hrs_mtd
	     let #OTPHrs_nov   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_nov_prem'
	     let $set_condition2 =  'gex_nov_hrs'
	     let $set_condition3 =  'gex_nov_hrs_prem'
             break
           When = '12'
	     let #prem_amt_dec = #eb.prm_mtd
	     let #prem_hrs_dec = #eb.prm_hrs_mtd
	     let #OTPHrs_dec   = #eb.otp_mtd 
             let $set_condition1 =  'set gex_dec_prem'
	     let $set_condition2 =  'gex_dec_hrs'
	     let $set_condition3 =  'gex_dec_hrs_prem'
             break
     End-Evaluate

     #ifdef debug8
!       display 'set cond 1 ' noline
!       display $set_condition1
!
!       display 'set cond 2 ' noline
!       display $set_condition2
!
!       display 'set cond 3 ' noline
!       display $set_condition3
     #endif

End-Procedure

!***********************************************************************
Begin-Procedure Update-Existing-Info
!***********************************************************************
#debug9 Show 'Update-Existing-Info'

  !Update ee row regardless of prior deptid

Begin-SQL
  Update ps_gex_r_gexPY042
     [$set_condition1] = #eb.prm_mtd,
     [$set_condition2] = #eb.otp_mtd,
     [$set_condition3] = #eb.prm_hrs_mtd,	!AXL 1/10/2005 New
      !deptid           = &pay.deptid,   
      last_name        = $resp_mgr		!AXL 2/3/2002 Also needs updating

  Where emplid         = &pay.emplid
    and empl_rcd      = &pay.empl_rcd
    and deptid         = &pay.deptid
    
End-SQL
 
  
End-Procedure

!***********************************************************************
Begin-Procedure Delete-Table
!***********************************************************************
Begin-SQL  

  Delete From ps_gex_r_gexPY042

End-SQL

End-Procedure

!***********************************************************************
Begin-Procedure Insert-New-Info
!***********************************************************************
Begin-SQL  
  Insert Into ps_gex_r_gexPY042
    Values ($resp_mgr,
	    &pay.deptid,
            &pay.emplid,
            &pay.empl_rcd,
            #prem_amt_jan,
            #prem_hrs_jan,
	    #OTPHrs_jan,   
            #prem_amt_feb,
	    #prem_hrs_feb,
	    #OTPHrs_feb,   
	    #prem_amt_mar,
	    #prem_hrs_mar,
	    #OTPHrs_mar, 
            #prem_amt_apr,
            #prem_hrs_apr,
	    #OTPHrs_apr,
	    #prem_amt_may,
	    #prem_hrs_may,
	    #OTPHrs_may,   	
	    #prem_amt_jun,
	    #prem_hrs_jun,
	    #OTPHrs_jun,
	    #prem_amt_jul,
	    #prem_hrs_jul,
	    #OTPHrs_jul,   
            #prem_amt_aug,
	    #prem_hrs_aug,
	    #OTPHrs_aug,   
	    #prem_amt_sep,
	    #prem_hrs_sep,
	    #OTPHrs_sep,   
            #prem_amt_oct,
	    #prem_hrs_oct,
	    #OTPHrs_oct,
	    #prem_amt_nov,
	    #prem_hrs_nov,
	    #OTPHrs_nov,   	
	    #prem_amt_dec,
	    #prem_hrs_dec,
	    #OTPHrs_dec)	
           
End-SQL

End-Procedure

!*********************************************************************
begin-procedure Create-Out-File
!*********************************************************************
  let $sql-statement = 'Create-Out-File'

begin-select

TMP.LAST_NAME              
TMP.DEPTID                 
TMP.EMPLID     
TMP.EMPL_RCD            
TMP.GEX_JAN_PREM         
TMP.GEX_JAN_HRS_PREM
TMP.GEX_JAN_HRS            
TMP.GEX_FEB_PREM 
TMP.GEX_FEB_HRS_PREM
TMP.GEX_FEB_HRS            
TMP.GEX_MAR_PREM    
TMP.GEX_MAR_HRS_PREM
TMP.GEX_MAR_HRS            
TMP.GEX_APR_PREM    
TMP.GEX_APR_HRS_PREM
TMP.GEX_APR_HRS            
TMP.GEX_MAY_PREM    
TMP.GEX_MAY_HRS_PREM
TMP.GEX_MAY_HRS            
TMP.GEX_JUN_PREM    
TMP.GEX_JUN_HRS_PREM
TMP.GEX_JUN_HRS            
TMP.GEX_JUL_PREM    
TMP.GEX_JUL_HRS_PREM
TMP.GEX_JUL_HRS            
TMP.GEX_AUG_PREM    
TMP.GEX_AUG_HRS_PREM
TMP.GEX_AUG_HRS            
TMP.GEX_SEP_PREM    
TMP.GEX_SEP_HRS_PREM
TMP.GEX_SEP_HRS            
TMP.GEX_OCT_PREM    
TMP.GEX_OCT_HRS_PREM
TMP.GEX_OCT_HRS            
TMP.GEX_NOV_PREM    
TMP.GEX_NOV_HRS_PREM
TMP.GEX_NOV_HRS            
TMP.GEX_DEC_PREM    
TMP.GEX_DEC_HRS_PREM
TMP.GEX_DEC_HRS  
PD.name
J2.full_part_time
J2.std_hours
JT.DESCRSHORT
J2.POSITION_NBR			!isdvmxd added for ITG 60863 on 05/21/2009

        If &j2.full_part_time ='F'
           Let $Work_Sts ='FT'
        Else
           Let $Work_sts ='PT'
        End-If
	
	!isdvmxd added on 05/21/2009 for ITG 60863 - Begin
 	 Let $Position_Nbr = &J2.POSITION_NBR
 	 Do  Get-Position-Title			
  	 If $PosNameAbbrv <> ''
  	 
  		Let $jobtitle = $PosNameAbbrv
  	 Else 
   		Let $jobtitle  = &JT.DESCRSHORT	
   		
   	 End-if
  	!isdvmxd added on 05/21/2009 for ITG 60863 - End

  	Do Write-Record

FROM PS_GEX_R_GEXPY042 TMP,
     PS_JOB J2,
     PS_JOBCODE_TBL JT,
     PS_PERSONAL_DATA PD
     
WHERE   TMP.emplid    = j2.emplid
    AND TMP.EMPL_RCD = J2.EMPL_RCD

    AND J2.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE J2.EMPLID = EMPLID
          AND J2.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $ASOFDATE)
    AND J2.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE J2.EMPLID = EMPLID
          AND J2.EMPL_RCD = EMPL_RCD
          AND J2.EFFDT = EFFDT)

    AND JT.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL 
        WHERE JT.SETID = SETID
          AND JT.JOBCODE = JOBCODE
          AND EFFDT <= J2.EFFDT)

    AND J2.jobcode = JT.jobcode
 
    AND J2.emplid    = PD.emplid

order by TMP.LAST_NAME,TMP.DEPTID,TMP.EMPLID
   
End-Select

End-Procedure

!***********************************************************************
Begin-Procedure Write-Record
!***********************************************************************

  !AXL 1/10/2005 Format field for proper importing into excel
  let $deptid =  '="' || &TMP.DEPTID || '"'
  let $emplid =  '="' || &TMP.EMPLID || '"'
    
  let $GEX_JAN_PREM	= edit(&tmp.gex_jan_prem,'9999.99')
  let $GEX_JAN_HRS	= edit(&tmp.gex_jan_hrs,'9999.99')
  let $GEX_JAN_HRS_PREM	= edit(&tmp.gex_jan_hrs_prem,'9999.99')

  let $GEX_FEB_PREM	= edit(&tmp.gex_feb_prem,'9999.99')
  let $GEX_FEB_HRS	= edit(&tmp.gex_feb_hrs,'9999.99')
  let $GEX_FEB_HRS_PREM	= edit(&tmp.gex_feb_hrs_prem,'9999.99')

  let $GEX_MAR_PREM	= edit(&tmp.gex_mar_prem,'9999.99')
  let $GEX_MAR_HRS	= edit(&tmp.gex_mar_hrs,'9999.99')
  let $GEX_MAR_HRS_PREM	= edit(&tmp.gex_mar_hrs_prem,'9999.99')

  let $GEX_APR_PREM	= edit(&tmp.gex_apr_prem,'9999.99')
  let $GEX_APR_HRS	= edit(&tmp.gex_apr_hrs,'9999.99')
  let $GEX_APR_HRS_PREM	= edit(&tmp.gex_apr_hrs_prem,'9999.99')

  let $GEX_MAY_PREM	= edit(&tmp.gex_may_prem,'9999.99')
  let $GEX_MAY_HRS	= edit(&tmp.gex_may_hrs,'9999.99')
  let $GEX_MAY_HRS_PREM	= edit(&tmp.gex_may_hrs_prem,'9999.99')

  let $GEX_JUN_PREM	= edit(&tmp.gex_jun_prem,'9999.99')
  let $GEX_JUN_HRS	= edit(&tmp.gex_jun_hrs,'9999.99')
  let $GEX_JUN_HRS_PREM	= edit(&tmp.gex_jun_hrs_prem,'9999.99')

  let $GEX_JUL_PREM	= edit(&tmp.gex_jul_prem,'9999.99')
  let $GEX_JUL_HRS	= edit(&tmp.gex_jul_hrs,'9999.99')
  let $GEX_JUL_HRS_PREM	= edit(&tmp.gex_jul_hrs_prem,'9999.99')

  let $GEX_AUG_PREM	= edit(&tmp.gex_aug_prem,'9999.99')
  let $GEX_AUG_HRS	= edit(&tmp.gex_aug_hrs,'9999.99')
  let $GEX_AUG_HRS_PREM	= edit(&tmp.gex_aug_hrs_prem,'9999.99')

  let $GEX_SEP_PREM	= edit(&tmp.gex_sep_prem,'9999.99')
  let $GEX_SEP_HRS	= edit(&tmp.gex_sep_hrs,'9999.99')
  let $GEX_SEP_HRS_PREM	= edit(&tmp.gex_sep_hrs_prem,'9999.99')

  let $GEX_OCT_PREM	= edit(&tmp.gex_oct_prem,'9999.99')
  let $GEX_OCT_HRS	= edit(&tmp.gex_oct_hrs,'9999.99')
  let $GEX_OCT_HRS_PREM	= edit(&tmp.gex_oct_hrs_prem,'9999.99')

  let $GEX_NOV_PREM	= edit(&tmp.gex_nov_prem,'9999.99')
  let $GEX_NOV_HRS	= edit(&tmp.gex_nov_hrs,'9999.99')
  let $GEX_NOV_HRS_PREM	= edit(&tmp.gex_nov_hrs_prem,'9999.99')

  let $GEX_DEC_PREM	= edit(&tmp.gex_dec_prem,'9999.99')
  let $GEX_DEC_HRS	= edit(&tmp.gex_dec_hrs,'9999.99')
  let $GEX_DEC_HRS_PREM	= edit(&tmp.gex_dec_hrs_prem,'9999.99')
   
   !AXL 1/10/2005 New WRITE methodology

   Move '' To $all_cols
   string &TMP.LAST_NAME $deptid $EMPLID &TMP.EMPL_RCD &PD.NAME
         ! &JT.DESCRSHORT $work_sts &J2.STD_HOURS 	!isdvmxd commented for ITG 60863
           $jobtitle $work_sts &J2.STD_HOURS		!isdvmxd modified for ITG 60863
	  $GEX_JUL_PREM $GEX_JUL_HRS_PREM $GEX_JUL_HRS
          $GEX_AUG_PREM $GEX_AUG_HRS_PREM $GEX_AUG_HRS
          $GEX_SEP_PREM $GEX_SEP_HRS_PREM $GEX_SEP_HRS
          $GEX_OCT_PREM $GEX_OCT_HRS_PREM $GEX_OCT_HRS
          $GEX_NOV_PREM $GEX_NOV_HRS_PREM $GEX_NOV_HRS
          $GEX_DEC_PREM $GEX_DEC_HRS_PREM $GEX_DEC_HRS     
          $GEX_JAN_PREM $GEX_JAN_HRS_PREM $GEX_JAN_HRS
	  $GEX_FEB_PREM $GEX_FEB_HRS_PREM $GEX_FEB_HRS
          $GEX_MAR_PREM	$GEX_MAR_HRS_PREM $GEX_MAR_HRS
          $GEX_APR_PREM $GEX_APR_HRS_PREM $GEX_APR_HRS
          $GEX_MAY_PREM $GEX_MAY_HRS_PREM $GEX_MAY_HRS
          $GEX_JUN_PREM $GEX_JUN_HRS_PREM $GEX_JUN_HRS
          $AsOfDate by $tab into $all_cols

   write 1 from $all_cols Status=#filestat
               
   If #filestat <> 0
     Show 'Error writing output file1.  Program terminating.'
     Stop
   End-If
  
End-Procedure

!***********************************************************************
Begin-Procedure EOJ-Process
!***********************************************************************

  if #record_count = 0
     show 'No Data Selected This Run'   
  end-if
   
  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  close 1

End-Procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'stdapi.sqc'    !Get_run_control procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id 
#Include 'askaod.sqc'    !Ask-As-Of-Date Procedure


#Include 'gexxx950.sqc'  !SQRW run controls
#Include 'gexxx951.sqc'  !Select Oracle Instance
#Include 'gexxx922.sqc'  !Run Control parameters from GEX_RC_PAY record 
#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx907.sqc'  !Get company/division code multiple row table
#include 'gexxx909.sqc'  !Get acct_cd code multiple row table
#include 'gexxx939.sqc'  !Get RX Mgr names per RX Region
#include 'getposnm.sqc'  !Get-Position-Title procedure