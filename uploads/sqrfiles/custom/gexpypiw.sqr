!***********************************************************************
! GEXPYPIW:  This daily vacation process for part-time employees will  *
!            calculate the correct amount of vacation dollars that the *
!            employee 'earned' in the last calendar year of employment *
!            or in the last 12 months of employment if the employee    *
!            completed first year of service that day.  The vacation   *
!            dollars are awarded at the time the employee meets their  *
!            service anniversary based on their date of service.       *
!                                                                      *
!            Special processing needs to occur for employees that      *
!            transfer from FT to PT. Since the employee is newly       *
!            statused as PT, the Part-Time Vacation process needs to   *
!            occur for the employee immediately to award the employee  *
!            with the correct vacation dollars.                        *
!                                                                      *
!            The vacation process will also process terminated and     *
!            retired employees that have an effective date equal to    *
!            the current date.  There are rules specific to each       *
!            union code for reporting on terminated and retired        *
!            employees.                                                *
!                                                                      *
!            This process must run daily to handle FT/PT status        *
!            and terminated/retired employees.                         *
!            This process must run daily to handle FT/PT status        *
!            and terminated/retired employees.                         *
!            Clone of GEXPYPTW created for New vacation codes for      *
!                                       union codes GGO                *
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!----------------------------------------------------------------------*
! Tables Referenced:						       *
!----------------------------------------------------------------------*
! TABLE                  SEL     UPD     INS     DEL                   *
!----------------------------------------------------------------------*
! PS_ADDL_PAY_DATA        Y       -       Y       -                    *
! PS_ADDL_PAY_EFFDT       -       -       Y       -                    * 
! PS_ADDL_PAY_ERNCD       Y       -       Y       -                    *
! PS_COMPANY_TBL          Y       -       -       -                    *
! PS_DEPT_TBL      	  Y       -       -       -                    *
! PS_EARNINGS_BAL         Y       -       -       -                    * 
! PS_GEX_RC_DPTJC         Y       -       -       -                    *
! PS_JOB      		  Y       -       -       -                    * 
! PS_PAY_CALENDAR      	  Y       -       -       -                    *
! PS_PAY_EARNINGS         Y       -       -       -                    *
! PS_PAY_SPCL_EARNS       Y       -       -       -                    *
!----------------------------------------------------------------------*
!----------------------------------------------------------------------*
! Program Flow:                                                        *
!                                                                      *
! INIT-DATETIME                                                        *
! INIT-NUMBER                                                          *
! GET-CURRENT-DATETIME                                                 *
! STDAPI-INIT                                                          *
! GEXXX922-SELECT-PARAMETERS                                           *
! GEXXX970-SELECT-DEPTID-JOBCODE-PARAMETERS                            *
! GEXXX913-SELECT-UNION-CD-PARAMETERS                                  *
! CONVERT-TO-DTU-DATE                                                  *
! DTU-ADD-DAYS                                                         *
! DTU-ADD-DAYS                                                         *
! CONVERT-FROM-DTU-DATE                                                *
! CONVERT-FROM-DTU-DATE                                                *
! GEXREGTP_INIT_STRINGS                                                *
! GET-DATE-CODES                                                       *
! CONVERT-TO-DTU-DATE                                                  *
! GEXREGTP_INIT_STRINGS                                                *
! SELECT-EMPLOYEES                                                     *
! 	GET-JOB-REHIRE-DT                                              *
! 	DETERMINE-SERVICE-DT                                           *
! 		SELECT-REI-DATE                                        *
! 		CONVERT-TO-DTU-DATE                                    *
! 		DTU-DIFF-YEARS                                         *
! 		DTU-DIFF-YEARS                                         *
! 		DTU-DIFF-MONTHS                                        *
! 		DTU-DIFF-MONTHS                                        *
! 		FIND-MAX-PAY-END                                       *
! 	CHECK-TRANSFER-FT-TO-PT					       *
! 		FORMAT-DATETIME                                        *
! 	GET-FT-VAC-AMT-NEW                                             *
! 	GET-FT-VAC-AMT-NEW                                             *
! 	GET-FT-VAC-AMT                                                 *
! 	CALC-VACATION-AMOUNT                                           *
! 		GET-TOTAL-GROSS-NEW                                    *
! 			GEXXX900-SELECT-COMPANY-PARAMETERS             *
! 		GET-TOTAL-GROSS-NEW                                    *
! 			GEXXX900-SELECT-COMPANY-PARAMETERS             *
! 		GET-TOTAL-GROSS-NEW                                    *
! 			GEXXX900-SELECT-COMPANY-PARAMETERS             *
! 		GET-TOTAL-GROSS                                        *
! 			GEXXX900-SELECT-COMPANY-PARAMETERS             *
! 	SELECT-CURR-ADDL-PAY                                           *
! 	HOURS-WORKED-NEW                                               *
! 		GEXXX900-SELECT-COMPANY-PARAMETERS                     *
! 	HOURS-WORKED                                                   *
! 		GEXXX900-SELECT-COMPANY-PARAMETERS                     *
! 	HOURS-WORKED-NEW                                               *
! 		GEXXX900-SELECT-COMPANY-PARAMETERS                     *
! 	HOURS-WORKED                                                   *
! 	        GEXXX900-SELECT-COMPANY-PARAMETERS                     *
! 	CHECK-EXISTING-VAC-ERNCD                                       *
! 		INSERT-NEW-EFFDT                                       *
! 		INSERT-VAC-ERNCD                                       *
! 		INSERT-NEW-EFFDT                                       *
! 	SELECT-EXISTING-ADDL-PAY                                       *
! 	INSERT-ADDL-PAY-DATA                                           *
! 	PRINT-BALANCE-REPORT                                           *
! SELECT-RETIREES-TERMS                                                *
! 	GEXXX913-SELECT-UNION-CD-PARAMETERS                            *
! 	CHECK-UNUSED-VACATION                                          *
! 	PRINT-PAYOUT-REPORT                                            *
! COMMIT-TRANSACTION                                                   *
! STDAPI-TERM                                                          *
!                                                                      *
!----------------------------------------------------------------------*
! Debugging:                                                           *
!       Syntax:   -Debug89   Place on command line after db name.      *
!       Options:        8       DISPLAY Display variables              *
!       Options:        9       SHOW    Show variables.                *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  GEXPY_848_E147038_01 04/16/2013   Vahini Katta
! Initial Creation Indian daily vacation sqr
! ISDVMZA - 12/03/2015 -- Added TPA and TPC to the exclusion list as   *
!                         per instruction from Diane                   *
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid                     *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup32.sqc'

!***********************************************************************
begin-setup
!***********************************************************************

  declare-report Vacation-Payout-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

  declare-report Report-log
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare
   
  declare-report Balance-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

end-setup


!***********************************************************************
begin-heading 6 for-reports=(report-log)
!***********************************************************************

  LET $REPORTID = 'PYPIWLOG'
  move 'Part Time Vacation Calculation - Report Log' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position          (+2)
  print 'Trans#'    (,1)
  print 'Emplid'    (,18)
  print 'Message'   (,50)

  print '-'         (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Vacation-Payout-Report)
!***********************************************************************

  LET $REPORTID = 'PYPIWPAY'
  move 'Vacation Payout Report' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Vacation Balance'  (,80)

  print '-'                 (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Balance-Report)
!***********************************************************************

  LET $REPORTID = 'PYPIWBAL'
  move 'Payout Report' to $ReportTitle

  #Include 'stdhdg01.sqc'
  do Get-Company-Data
  do Get-Department-Name

  print 'Company'          (3,1)
  print $prev_cmpy         (0,13)
  print $CompanyName       (0,17)
  
  print 'DeptID:'           (4,1)
  print $prev_deptid        (,13)
  print $DeptName           (,+1)

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Earnings'          (,85)
  print 'Balance Due'       (,100)

  print '-'                 (+1,1,174) fill
end-heading

!***********************************************************************
begin-report
!***********************************************************************

  use-report Report-log

  show 'In begin-report .. doing inits'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do stdapi-init

  move 'GEXPYPIW' to $ReportID
  move 'Part-Time Employee Vacation Calculation - Daily' to $ReportTitle
 
  Let $GEXXX970_Deptid_Alias  = 'A.Deptid'
  Let $GEXXX970_Jobcode_Alias = 'A.Jobcode'
 
  if isnull($prcs_process_instance)
	let $Prcs_OprID = 'ISDVDXS'
	let $Prcs_Run_Cntl_ID = 'gexpyPIW'
  end-if

  show 'Selecting runtime params'

    Do GEXXX922-Select-Parameters
    Do GEXXX970-Select-Deptid-Jobcode-Parameters
    Let $AsOfDate = $GEX_RC_PAY.ASOFDATE
    If Rtrim($AsOfDate,' ') = ''
      Let $AsOfDate = $AsOfToday
    End-If

   Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  show ' '

  Do Convert-To-DTU-Date($AsOfDate,$AsofDate_dtu)
  Do dtu-add-days($AsOfDate_dtu, 1, $AsOfDatePlus1_dtu)
  Do dtu-add-days($AsOfDate_dtu,-1, $AsOfDateMinus1_dtu)
  Do Convert-From-DTU-Date($AsOfDatePlus1_dtu,$AsOfDatePlus1)
  Do Convert-From-DTU-Date($AsOfDateMinus1_dtu,$AsOfDateMinus1)

  show 'Doing GEXREGTP_init_strings'
  do GEXREGTP_init_strings

  show 'Doing get-date-codes'
  do get-date-codes

  do Convert-To-DTU-Date($AsOfDate, $AsOfDate_dtu)

  move $AsOfYYYY to #AsOfYYYY

  let #prev_year = #AsOfYYYY - 1

  let $prev_year = to_char(floor(#prev_year))

  let $PrevYearEnd = $prev_year ||'1231'
  let $Prev_YearEndDt = '31-DEC-' || $PREV_YEAR		 
  
  show 'Doing GEXREGTP_init_strings'
  do GEXREGTP_init_strings

  move 'N' to $found
  let #inputtran = 0

  show 'Doing select-employees'
  do select-employees

  show 'Doing select-retirees-terms'
  do select-retirees-terms
  
Report-Exit:

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded

  show ' '
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded
  show ' '

  display #InputTran 999,999 noline
  display ' Transactions Processed'

  Show 'End of report .. commiting'
  do Commit-Transaction
  ! do Rollback-Transaction  ! Uncomment this and comment the commit line above
			     ! if you want to run thsi sqr without commiting any data
  do stdapi-term
end-report


!***********************************************************************
Begin-Procedure Select-Employees
!***********************************************************************

 Show 'Select-Employees'
  move 'N' to $found
  move 'N' to $Empl_found
  move 'N' to $Bal_found	 

  let $var = 'AND ( (A.REG_TEMP '||$GEXREGTP_part_time_code_string || ') OR
                    ( A.DEPTID IN (''0062'',''0066'',''0042'') ) )'
  show 'Exclude Deptid, Jobcode ' $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA   
  show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA                        

begin-select ON-ERROR=SQL-Error-Found
A.COMPANY
A.DEPTID
A.PAYGROUP
A.EMPLID
A.EMPL_RCD
A.REG_TEMP
A.HOURLY_RT
A.UNION_CD 
A.ACTION	 
A.EFFDT		 
A.JOBCODE	
B.GEX_VCN_SENIOR_DT
B.SERVICE_DT
PD.NAME			

  Let $company = &a.company	
  Let $deptid  = &a.deptid	
  Let $union_cd= &a.union_cd 

  move &A.EMPLID to $emplid
  move 'Y' to $Empl_found
  move 'N' to $skip_record

  display '-------------------------------------------'
  display 'emplid ' noline
  display $emplid

  show 'Emplid ================================================= ' $emplid
  show ' in main process '  &B.SERVICE_DT
  show 'Doing determine-service-dt' 
  
   let $GEXJOB_REH_EMPLID = $emplid
   let #GEXJOB_REH_EMPLRCD = &A.EMPL_RCD
   let $GEXJOB_REH_ASOFDATE = $AsOfDate
   do Get-Job-Rehire-Dt
   show 'emplid:' $emplid ',$GEXJOB_REH_REHIRE_DT ' $GEXJOB_REH_REHIRE_DT
    
  do determine-service-dt

  display 'Service_Anniversary Flag before check trans ft pt ' noline
  display $service_anniversary

  Evaluate $deptid
     When = '0062'          
     When = '0066'
     When = '0042'
          let $transfer = 'X'
          break
     When-Other
	   show 'Doing check-transfer-FT-to-PT'
          do check-transfer-FT-to-PT
  End-Evaluate

  display 'Service_Anniversary Flag after check trans ft pt ' noline
  display $service_anniversary

  let #Prior_Vac_Amt = 0	

  display 'Transfer Flag: ' noline 
  display $transfer

  display 'First Year Service Flag: ' noline
  display $first_year_service

  display 'Service_Anniversary Flag: ' noline
  display $service_anniversary
  
  show '$transfer : ' $transfer

  if $transfer = 'Y'
    if $first_year_service = 'Y'
       if $transfer_dt_cmp <= $PrevYearEnd 
          let $pay_end_criteria  = 'AND EE.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND EE.PAY_END_DT <= ' || '''' || $transfer_dt || '''' 
	         show '$pay_end_criteria : ' $pay_end_criteria  
	         show 'Doing get-FT-vac-amt-new'
	         do get-FT-vac-amt-new
       else 
           let $pay_end_criteria  = 'AND EE.PAY_END_DT > ' || '''' || $Prev_YearEndDt || '''' || ' AND EE.PAY_END_DT <= ' || '''' || $transfer_dt || '''' 
	         show '$pay_end_criteria : ' $pay_end_criteria  
	         show 'Doing get-FT-vac-amt-new'
           do get-FT-vac-amt-new
       end-if
    else
       if #dtu_years < 1
          move 'Y' to $skip_record
       else
          let $balance_year_criteria = 'AND    C2.BALANCE_YEAR      = ' || $AsOfYYYY
       	  show 'Doing get-FT-vac-amt'
          do get-FT-vac-amt
       end-if
    end-if
  end-if

  
  let #max_eligible_weeks = 0	
  let $curr_addl_found = 'N'	
  let #curr_wks_check = 0	

  show '$transfer flag        b4 calc vacn stmt ' $transfer 
  show '$service_anniversary  b4 calc vacn stmt ' $service_anniversary
  show '$service_anniversary ' $service_anniversary 
  
  if ($service_anniversary = 'Y' or $transfer = 'Y' or $transfer = 'X') and $skip_record = 'N'
    show 'Doing calc-vacation-amount'    
    do calc-vacation-amount
    show '$transfer flag        b4 select-curr-addl-pay ' $transfer 
    show '#max_eligible_weeks   b4 select-curr-addl-pay ' #max_eligible_weeks
	  show '$transfer ' $transfer
	  show '#max_eligible_weeks ' #max_eligible_weeks 

    if ($transfer <> 'Y' and #max_eligible_weeks <> 0)
       show 'Doing select-curr-addl-pay'
       do select-curr-addl-pay
	      show '$curr_addl_found ' $curr_addl_found 
         if $curr_addl_found = 'Y'
             show '$union_cd ' $union_cd
	        
	           let #Found=instr($GEXXX913_INCLUDE_UNION_CD_CRITERIA,$union_cd,1)
	           show '#Found :' #Found
	           show '$GEXXX913_INCLUDE_UNION_CD_CRITERIA:' $GEXXX913_INCLUDE_UNION_CD_CRITERIA
	           show '$union_cd :' $union_cd
	   
	           if #Found>0  
	   
	              if $first_year_service='Y' and  $service_anniversary='Y'
	                 move #max_eligible_weeks to #eligible_weeks
	                 show '#max_eligible_weeks :' #max_eligible_weeks
	                 show '#eligible_weeks     :' #eligible_weeks
                      else
                         show '#curr_wks_check :' #curr_wks_check
                         if #max_eligible_weeks <= #curr_wks_check
                            move 0 to #eligible_weeks
                            show '#eligible_weeks :' #eligible_weeks
                         else
                            show '#max_eligible_weeks :' #max_eligible_weeks
                            show '#curr_wks_check     :' #curr_wks_check
                            let #eligible_weeks = #max_eligible_weeks - #curr_wks_check
                            show '#eligible_weeks     :' #eligible_weeks
                         end-if
                      end-if 
	              show '#eligible_weeks ' #eligible_weeks 
	     
	           End-If
	           display 'eligible_weeks after new : ' noline
                   display #eligible_weeks 
         end-if
    end-if

    if $skip_record = 'N'
      show '#year_vac_amt = #week_vac_amt * #eligible_weeks'
      show '#week_vac_amt   :' #week_vac_amt
      show '#eligible_weeks :' #eligible_weeks
      let #year_vac_amt = #week_vac_amt * #eligible_weeks
      multiply 1 times #year_vac_amt round=2
    	show '#year_vac_amt ' #year_vac_amt
       
      if #year_vac_amt <= 0
        move 'Y' to $skip_record
      end-if

      if $skip_record = 'N'
        add 1 to #inputtran
        show '#year_vac_Amt = #year_vac_Amt - #Prior_Vac_Amt'
        show '#year_vac_Amt :' #year_vac_Amt
        show '#Prior_Vac_Amt:' #Prior_Vac_Amt
        let #year_vac_Amt = #year_vac_Amt - #Prior_Vac_Amt	!AXL 03/25/2004 
      	show '#year_vac_Amt ' #year_vac_Amt 
        let #hrs_worked = 0
	      show '$first_year_service ' $first_year_service 
	
        if $first_year_service = 'Y'
		       !show '$transfer ' $transfer 
           if $transfer = 'Y'
		          !show '$transfer_dt_cmp ' $transfer_dt_cmp 
		          !show '$PrevYearEnd ' $PrevYearEnd
              if $transfer_dt_cmp <= $PrevYearEnd !new check 5/13/2003
                 let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND CC.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
		              !show '$pay_end_criteria  ' $pay_end_criteria  
		              show 'Doing Hours-Worked-New  '
                  do Hours-Worked-New  
              else 
                let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
		            show '$balance_year_criteria ' $balance_year_criteria 
		            show 'Doing hours-worked'
                do hours-worked 
              end-if
           else !transfer = No --- go ahead and establish criteria
                let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND CC.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
		            show '$pay_end_criteria ' $pay_end_criteria
		            show 'Doing Hours-Worked-New'
                do Hours-Worked-New   !Use PS_PAY_EARNINGS rather than PS_EARNINGS_BAL
           end-if 
        else !first_year_service = 'N'
           let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
	         show '$balance_year_criteria ' $balance_year_criteria 
	        show 'Doing hours-worked'
           do hours-worked
        end-if
	      show '#hrs_worked ' #hrs_worked 
	
	      if $first_year_service = 'Y'
        	let #avg_weekly_hrs_worked = #hrs_worked / 26
        Else
        	let #avg_weekly_hrs_worked = #hrs_worked / 52
        End-If
        
	      show '#avg_weekly_hrs_worked ' #avg_weekly_hrs_worked
        If #avg_weekly_hrs_worked = 0
          let #vac_hourly_rt = 0
        Else
          let #vac_hourly_rt = #week_vac_amt/#avg_weekly_hrs_worked
        End-If

	      If #dtu_years = 1 
		      Do Get-Previous-Amount
		      show '#year_vac_amt =  #Six_Month_Goal_Amount * 2'
		      Let #year_vac_amt =  #Six_Month_Goal_Amount * 2
		      Let #avg_weekly_hrs_worked = #Six_Month_Oth_hrs
		      Let #vac_hourly_rt = #Six_Month_Hourly_Rt
		      Let #week_vac_amt = #Six_Month_Oth_Pay
		      Show '#year_vac_amt =  #Six_Month_Goal_Amount * 2 : '  #year_vac_amt 
   	    end-if
	
	      show '#week_vac_amt ' #week_vac_amt
	      show '#vac_hourly_rt ' #vac_hourly_rt 

	      show 'Doing check-existing-vac-erncd'
        do check-existing-vac-erncd		

	      show 'Doing select-existing-addl-pay'
        do select-existing-addl-pay
        show '#year_vac_amt6 ' #year_vac_amt 

        show '$existing_addl_pay ' $existing_addl_pay 
        if $existing_addl_pay = 'N'
           let #GOAL_BAL = 0
        end-if
      
	       show 'Doing Insert-Addl-Pay-Data'
         do Insert-Addl-Pay-Data
		     show '#week_vac_amt ' #week_vac_amt 
		     show '#year_vac_amt ' #year_vac_amt
		     show '$transfer ' $transfer
           if (#week_vac_amt > #year_vac_amt AND $transfer = 'Y')
              move 'Y' to $Bal_found
              if rtrim(&A.DEPTID,' ') <> rtrim($prev_deptid,' ')
                 and rtrim($prev_deptid,' ') <> ''
                 let $dept_changed='Y'
              end-if  
      	      show 'Doing Print-Balance-Report'
              do Print-Balance-Report
              move &A.DEPTID to $prev_deptid
              move &A.Company to $prev_cmpy
          end-if
    end-if
  end-if
  end-if

FROM  PS_JOB A,
      PS_EMPLOYMENT B, 
      PS_PERSONAL_DATA PD	 
WHERE  A.EMPLID           = B.EMPLID
AND    A.EMPL_RCD        = B.EMPL_RCD  
AND    B.EMPLID           = PD.EMPLID
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]	
AND    A.EMPL_STATUS NOT IN ('T','R','U','Q','D')
AND    A.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A.EMPLID
       AND    EMPL_RCD  = A.EMPL_RCD
       AND    EFFDT     <= $AsOfDate)
AND    A.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID      = A.EMPLID
       AND    EMPL_RCD   = A.EMPL_RCD
       AND    EFFDT       = A.EFFDT)
[$var] 
    AND [$GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA] 	
ORDER BY A.COMPANY, A.DEPTID, A.EMPLID	
end-select

  if $Empl_found = 'N'
    use-report report-log
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  end-if
  
  if $Bal_found = 'N'
    use-report Balance-Report
    Print 'NO DATA SELECTED FOR BALANCE DUE REPORT'	(25,) Center
    use-report report-log
  end-if
end-procedure


!***********************************************************************
!This procedure selects employees, who are retired or terminated 
!during the current pay period and belongs to union codes G01, or G02
!or G04.
!***********************************************************************
Begin-Procedure Select-Retirees-Terms
!***********************************************************************
  Show 'Select-Retirees-Terms'
  move 'N' to $R_Empl_found
  let $var = 'AND ( (A3.REG_TEMP '||$GEXREGTP_part_time_code_string || ') OR ( A3.DEPTID IN (''0062'',''0066'') ) )'
   show 'Select-Retirees-Terms $var ' $var
 
   Let $GEXXX913_UNION_CD_Alias = 'A3.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters
   show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA

begin-select ON-ERROR=SQL-Error-Found
A3.EMPLID
A3.EMPL_RCD
A3.REG_TEMP
A3.HOURLY_RT
to_char(A3.EFFDT,'MM/DD/YYYY') &effdt
A3.EFFDT 
A3.ACTION
A3.EMPL_STATUS
A3.UNION_CD
P3.NAME

  move &A3.EMPLID to $emplid

  show 'Doing check-unused-vacation'
  do check-unused-vacation

  if #vac_bal > 0
    move 'Y' to $R_Empl_found
	show 'Doing print-payout-report'
    do print-payout-report
  end-if

FROM   PS_JOB        A3,
      PS_PERSONAL_DATA P3

WHERE A3.EMPLID         = P3.EMPLID 
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]		
AND    A3.EMPL_STATUS   IN ('R','T','U','Q')
AND    A3.EFFDT          = $AsOfDate
AND    A3.EFFSEQ         =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = A3.EMPLID
       AND    EMPL_RCD  = A3.EMPL_RCD
       AND    EFFDT      = A3.EFFDT)
     [$var]
      And   A3.deptid||A3.JOBCODE not in 
              (select distinct a.deptid||a.jobcode
               from ps_gex_rc_dptjc a
               where a.OPRID                 = [$OprID]
                and  a.RUN_CNTL_ID           = [$Run_Cntl_ID])
ORDER BY A3.EMPLID
end-select
 
  if $R_Empl_found = 'N'
    show 'No Retired/Terminated Employees found to calculate part time vacation amounts'
    use-report Vacation-Payout-Report
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
    use-report report-log
  end-if
end-procedure


!***********************************************************************
!This procedure finds out the appropriate service date and finds out
!if the employee has met his/her service anniversary during the current
!pay period.
!***********************************************************************
begin-procedure determine-service-dt
!***********************************************************************

  Show '-- In Determine-Service-Dt Step --'
  move 'N' to $service_anniversary
 
  show '&B.GEX_VCN_SENIOR_DT ' &B.GEX_VCN_SENIOR_DT

  if RTRIM(&B.GEX_VCN_SENIOR_DT,' ') <> ''
    move &B.GEX_VCN_SENIOR_DT to $service_dt
  else
      
	     show 'Rehire Date : ' $GEXJOB_REH_REHIRE_DT   
      if RTRIM($GEXJOB_REH_REHIRE_DT,' ')	<> ''		
        show 'Doing Select-REI-date'
        do Select-REI-date		
        if $REI_date_found = 'Y'
           show '  &B.SERVICE_DT  ' &B.SERVICE_DT
           move &B.SERVICE_DT to $service_dt	
        else	
           show 'Rehire Date : ' $GEXJOB_REH_REHIRE_DT	
           move $GEXJOB_REH_REHIRE_DT to $service_dt				
        end-if					
      else
         show ' in else $service_dt ' &B.SERVICE_DT
         move &B.SERVICE_DT to $service_dt
      end-if
  end-if
  show '$service_dt '  $service_dt
  Let $Service_Cmp_Dt = strtodate($service_dt,'DD-MON-YYYY')	
  
  do Convert-To-DTU-Date($service_dt, $service_dt_dtu)
  
  do dtu-diff-years($service_dt_dtu,$AsOfDate_dtu,#dtu_years)
  do dtu-diff-years($service_dt_dtu,$AsOfDateMinus1_dtu,#dtu_yearsMinus1)
  do dtu-diff-months($service_dt_dtu,$AsOfDate_dtu,#dtu_months)
  do dtu-diff-months ($service_dt_dtu,$AsOfDateMinus1_dtu,#dtu_monthsMinus1)

  show '#dtu_years ' #dtu_years
  show '#dtu_yearsMinus1 ' #dtu_yearsMinus1
  show '#dtu_months ' #dtu_months
  show '#dtu_monthsMinus1' #dtu_monthsMinus1 

  Let $exclude_last_6_month = 'N' 
  if (#dtu_months=6 and  #dtu_monthsMinus1<>6) or #dtu_years<>#dtu_yearsMinus1
      move 'Y' to $service_anniversary
      if #dtu_months = 6
         Let #dtu_years = 0.5
         move 'Y' to $first_year_service
      else
         move 'N' to $first_year_service
      end-if
    
      If #dtu_years = 1
         Let $HOLD-CHECK-MM = edit($service_dt,'MM')
         let #value = to_number($HOLD-CHECK-MM)
         show '$HOLD-CHECK-MM' $HOLD-CHECK-MM
         show '#value' #value 
         if #value > 6 
            let $exclude_last_6_month = 'Y'
         else
            let $exclude_last_6_month = 'N'
         end-if
      end-if
        show '$exclude_last_6_month' $exclude_last_6_month
  else
     if #dtu_months = 6
       move 'Y' to $first_year_service
     else
       move 'N' to $first_year_service 
     end-if
	show '$first_year_service ' $first_year_service
	show '$service_anniversary ' $service_anniversary
  end-if
  
  if $first_year_service = 'Y'
    let $service_dt_plus_one = dateadd(strtodate($service_dt),'Month',6)
    show 'Doing find-max-pay-end'
    do find-max-pay-end
  end-if
  
end-procedure


!***********************************************************************
Begin-Procedure find-max-pay-end
!***********************************************************************
 move 'N' to $max_found
begin-select loops = 1 
PAY.PAY_END_DT

  move 'Y' to $max_found
  move &PAY.PAY_END_DT to $max_pay_end_Dt

FROM PS_PAY_CALENDAR PAY
WHERE PAY.PAY_END_DT = (SELECT DISTINCT(min(PAY_END_DT))
   		                  FROM PS_PAY_CALENDAR
		                    WHERE PAY_END_DT >= $service_dt_plus_one
                        AND PAY_SHEETS_RUN = 'Y')
end-select

if $max_found = 'N'
   display 'No Pay Cycle as of:' noline
   display $service_dt_plus_one
   move $AsOfToday to $max_pay_end_Dt
   display 'Using today for max pay end dt for ' noline
   display $emplid
end-if
end-procedure

!***********************************************************************
!This procedure selects an REHIRE row with REI reason
!AXL 7/28/2000 Begin
!***********************************************************************
begin-procedure select-REI-date
!***********************************************************************
  Show 'select-REI-date'
  move 'N' to $REI_date_found
Begin-Select on-error=sql-error-found
REI.EFFDT

  move 'Y' to $REI_date_found
 
FROM   PS_JOB REI
WHERE  REI.EMPLID           = &A.EMPLID
AND    REI.EMPL_RCD        = &A.EMPL_RCD
AND    REI.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = REI.EMPLID
       AND    EMPL_RCD   = REI.EMPL_RCD
       AND    ACTION_REASON = 'REI'
       AND    EFFDT      <= $AsOfDate)
AND    REI.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = REI.EMPLID
       AND    EMPL_RCD   = REI.EMPL_RCD
       AND    EFFDT       = REI.EFFDT)
end-select
end-procedure   

!***********************************************************************
!This procedure checks if the current employee being processed, is
!transferred from FT to PT during the current pay period
!***********************************************************************
Begin-Procedure Check-Transfer-FT-to-PT
!***********************************************************************
  Show 'Check-Transfer-FT-to-PT'
  move 'N' to $Transfer
  let $var1 = 'AND REG_TEMP '||$GEXREGTP_full_time_code_string
  let $var2 = 'AND REG_TEMP '||$GEXREGTP_part_time_code_string
  let $var3 = 'AND A1.REG_TEMP '||$GEXREGTP_part_time_code_string

  show '$var1 ' $var1
  show '$var2 ' $var2
  show '$var3 ' $var3
  show '$AsOfDateMinus1 ' $AsOfDateMinus1
  show '$asofdate ' $asofdate

begin-select ON-ERROR=SQL-Error-Found
'A1'
a1.effdt  &a1.effdt

  Do format-datetime (&a1.effdt,$transfer_dt_cmp,{DEFCMP},'','')  
  let $transfer_dt = &a1.effdt
  move 'Y' to $Transfer
  
FROM   PS_JOB A1
WHERE  A1.EMPLID        = &A.EMPLID
AND    A1.EMPL_RCD     = &A.EMPL_RCD
AND  A1.EFFDT            =
      (SELECT Min(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A1.EMPLID
       AND    EMPL_RCD  = A1.EMPL_RCD
       [$var2]
       AND    EFFDT     >=
                         (Select Max(effdt)
                          From   ps_job
                          Where  emplid     = a1.emplid
                          And    empl_rcd  = a1.empl_rcd
                          And    effdt     <= $asofdate
                          [$var1]) )
 AND    A1.EFFSEQ           =
      (SELECT Min(EFFSEQ)	
       FROM   PS_JOB 
       WHERE  EMPLID      = A1.EMPLID
       AND    EMPL_RCD   = A1.EMPL_RCD
       AND    EFFDT       = A1.EFFDT)
[$var3]
AND    A1.ACTION_DT     = $AsOfDateMinus1
end-select

end-procedure

!***********************************************************************
begin-procedure Get-FT-Vac-Amt-New
!***********************************************************************

 Show 'get-FT-vac-amt-new'
 Show '$pay_end_criteria used in get-FT-vac-amt-new ' $pay_end_criteria

 show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY

begin-select on-error=sql-error-found
FF.OTH_EARNS &OTH_EARNS

  add &OTH_EARNS to #Prior_Vac_Amt	

FROM  PS_PAY_EARNINGS EE, PS_PAY_OTH_EARNS FF
WHERE    EE.EMPLID	= &A.EMPLID
     and EE.EMPL_RCD    = &A.EMPL_RCD	
     AND EE.COMPANY     = &A.COMPANY
     AND EE.COMPANY 	= FF.COMPANY
     AND EE.PAYGROUP 	= FF.PAYGROUP
     AND EE.PAY_END_DT 	= FF.PAY_END_DT
     AND EE.OFF_CYCLE 	= FF.OFF_CYCLE
     AND EE.PAGE_NUM 	= FF.PAGE_NUM
     AND EE.LINE_NUM 	= FF.LINE_NUM
     AND EE.ADDL_NBR 	= FF.ADDL_NBR
     AND FF.ERNCD 	= '513'		!FT Vacation
     [$pay_end_criteria]

end-select
end-procedure
!AXL 9/17/2002 - New Procedure - End


!***********************************************************************
begin-procedure get-FT-vac-amt
!***********************************************************************

  Show 'get-FT-vac-amt'
  show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY

begin-select on-error=sql-error-found
C2.GRS_YTD &GRS_YTD

  add &GRS_YTD to #Prior_Vac_Amt			

FROM   PS_EARNINGS_BAL C2
WHERE  C2.EMPLID              = &A.EMPLID
AND    C2.EMPL_RCD            = &A.EMPL_RCD	
AND    C2.COMPANY             = &A.COMPANY
AND    C2.EMPL_RCD            = &A.EMPL_RCD
AND    C2.BALANCE_ID          = 'CY'
[$balance_year_criteria]
AND    C2.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = C2.EMPLID
       AND    EMPL_RCD        = C2.EMPL_RCD	
       AND    COMPANY         = C2.COMPANY
       AND    BALANCE_ID      = C2.BALANCE_ID
       AND    BALANCE_YEAR    = C2.BALANCE_YEAR
       AND    SPCL_BALANCE    = C2.SPCL_BALANCE
       AND    ERNCD           = C2.ERNCD)
AND    C2.SPCL_BALANCE        = 'N'
AND    C2.ERNCD               = '513'    !FT Vacation
end-select
end-procedure


!***********************************************************************
begin-procedure calc-vacation-amount
!***********************************************************************

  Show '-- In Calc-Vacation-Amount Step --'

  let #total_gross = 0
  Let $Mstr_Cntrct_Nrml = 'N'		
  
  if $first_year_service = 'Y'
     if $transfer = 'Y' 
        if $transfer_dt_cmp <= $PrevYearEnd 
           let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND AA.PAY_END_DT <= ' || '''' || $Prev_YearEndDt || ''''
		       show '$pay_end_criteria ' $pay_end_criteria
		       show 'Doing Get-Total-Gross-New'
           do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
        else ! user prior yr & ytd up to anniversay date.
           let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND AA.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
		       do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
        end-if
     else  !transfer = NO use new criteria
        let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND AA.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
    		show 'Doing Get-Total-Gross-New'
        do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
     end-if
  else !1st year svc = No
         let $balance_year_criteria = 'AND    F.BALANCE_YEAR      = ' || $prev_year
     show 'Doing get-total-gross'
     do get-total-gross   
  end-if

  If ($first_year_service = 'Y') or (#dtu_years = 1)
	   Let #week_vac_amt = (#total_gross * 0.04)
	   #debug8 Show ' #week_vac_amt 4% : '#week_vac_amt
  Else
	   Let #week_vac_amt = (#total_gross * 0.02)
	   #debug8 Show ' #week_vac_amt 2% : '#week_vac_amt
  End-if

  show '#week_vac_amt ' #week_vac_amt 
!Whenever employee meets the milestone anniversary, one more week 
!worth of vacation will be allowed.
 
  show '$transfer flag b4 eval stmt ' $transfer 
  show '#dtu_years     b4 eval stmt ' #dtu_years
  show '$union_cd      b4 eval stmt ' $union_cd 

  if ($transfer = 'N' or $transfer = 'X') !Must be a Service Ann or Transfer X
     let #Found_Union_Cd=instr($GEXXX913_INCLUDE_UNION_CD_CRITERIA,$union_cd,1)
     show ' #Found_Union_Cd :'  #Found_Union_Cd
     show ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA :' $GEXXX913_INCLUDE_UNION_CD_CRITERIA
     show ' $union_cd       :' $union_cd
     if  #Found_Union_Cd > 0
          evaluate #dtu_years 
           when = 0.5
              move 1 to #eligible_weeks 
              move 1 to #max_eligible_weeks
              break
           when = 1
              move 2 to #eligible_weeks
              move 2 to #max_eligible_weeks
              break
            when = 5
              move 3 to #eligible_weeks
              move 3 to #max_eligible_weeks
              break
            when = 10
              move 4 to #eligible_weeks
              move 4 to #max_eligible_weeks
              break
            when-other
               move 0 to #eligible_weeks 
            break
          end-evaluate 
    End-If         
  end-if
  show '#eligible_weeks ' #eligible_weeks
  show '#max_eligible_weeks ' #max_eligible_weeks

end-procedure   

   
!AXL 9/17/2002 New Procedure - Begin
!***********************************************************************
begin-procedure Get-Total-Gross-New
!***********************************************************************
  Show '-- In Get-Total-Gross-New Step --'
   Let $GEXXX900_Company_Alias = 'AA.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

Begin-SELECT 
sum(BB.OTH_EARNS) &BB.OTH_EARNS

   add &BB.OTH_EARNS to #total_gross
   show '#total_gross : ' #total_gross

FROM PS_PAY_EARNINGS AA, PS_PAY_OTH_EARNS BB
  WHERE  AA.EMPLID   = &A.EMPLID
     AND AA.EMPL_RCD = &A.EMPL_RCD	
     AND (AA.COMPANY > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
     AND AA.COMPANY  = BB.COMPANY
     AND AA.PAYGROUP = BB.PAYGROUP
     AND AA.PAY_END_DT = BB.PAY_END_DT
     AND AA.OFF_CYCLE = BB.OFF_CYCLE
     AND AA.PAGE_NUM = BB.PAGE_NUM
     AND AA.LINE_NUM = BB.LINE_NUM
     AND AA.ADDL_NBR = BB.ADDL_NBR
     !AND BB.ERNCD NOT IN ('ADJ','525','650','651','602','DDP')
     !Added TPA and TPC to the exclusion list as per Diane's instruction
     AND BB.ERNCD NOT IN ('ADJ','525','650','651','602','DDP','TPC','TPA')
     [$pay_end_criteria]
end-select
end-procedure

!***********************************************************************
begin-procedure get-total-gross
!***********************************************************************
 Show '-- In Get-Total-Gross Step --'
   Let $GEXXX900_Company_Alias = 'F.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

begin-select on-error=sql-error-found
SUM(F.GRS_YTD) &F.GRS_YTD

  add &F.GRS_YTD to #total_gross
  show '#total_gross : ' #total_gross

FROM   PS_EARNINGS_BAL F
WHERE  F.EMPLID         = &A.EMPLID
AND    F.EMPL_RCD       = &A.EMPL_RCD	
AND    (F.COMPANY 	> '999'	 or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] )  
AND    F.BALANCE_ID	= 'CY'
[$balance_year_criteria]
AND    F.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = F.EMPLID
       AND    EMPL_RCD     = F.EMPL_RCD	
       AND    COMPANY      = F.COMPANY
       AND    BALANCE_ID   = F.BALANCE_ID
       AND    BALANCE_YEAR = F.BALANCE_YEAR
       AND    SPCL_BALANCE = F.SPCL_BALANCE
       AND    ERNCD        = F.ERNCD)
AND    F.SPCL_BALANCE      = 'N'
! ISDVMZA - 12/03/2015 -- Added TPA and TPC to the exclusion list as per Diane's instruction
!   why is 509 not in this list but is part of the earnings criteria below ????
!AND    F.ERNCD        NOT IN ('ADJ','525','602','650','651','DDP') 
AND    F.ERNCD        NOT IN ('ADJ','525','602','650','651','DDP','TPA','TPC')   
end-select
end-procedure

!***********************************************************************
begin-procedure hours-worked-new
!***********************************************************************

   Show '-- In Hours-Worked-New Step --'
   show '$criteria used in hours-worked_NEW ' $pay_end_criteria
   Let $GEXXX900_Company_Alias = 'CC.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

Begin-SELECT distinct 
CC.pay_end_dt 
CC.OFF_CYCLE
DD.SPCL_HRS

   add &DD.SPCL_HRS to #hrs_worked

FROM PS_PAY_EARNINGS CC, PS_PAY_SPCL_EARNS DD
  WHERE  CC.EMPLID     = &A.EMPLID
     AND CC.EMPL_RCD  =  &A.EMPL_RCD
     AND CC.COMPANY    = DD.COMPANY
     AND (CC.COMPANY    > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
     AND CC.PAYGROUP   = DD.PAYGROUP
     AND CC.PAY_END_DT = DD.PAY_END_DT
     AND CC.OFF_CYCLE  = DD.OFF_CYCLE
     AND CC.PAGE_NUM      = DD.PAGE_NUM
     AND CC.LINE_NUM      = DD.LINE_NUM
     AND CC.SEPCHK     = DD.SEPCHK	
     AND DD.ERNCD_SPCL = 'WK1'
     [$pay_end_criteria]
end-select
end-procedure

!***********************************************************************
begin-procedure hours-worked
!***********************************************************************

   Show '-- In Hours-Worked Step --'
   Let $GEXXX900_Company_Alias = 'J.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
    
begin-select on-error=sql-error-found
SUM(J.HRS_YTD) &J.HRS_YTD

  add &J.HRS_YTD To #hrs_worked

FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = &A.EMPLID
AND    J.EMPL_RCD          = &A.EMPL_RCD  
AND    J.COMPANY           = &A.COMPANY
AND    (J.COMPANY       > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
AND    J.BALANCE_ID        = 'CY'
[$balance_year_criteria]
AND    J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
       AND    EMPL_RCD     = J.EMPL_RCD	  
       AND    COMPANY      = J.COMPANY
       AND    BALANCE_ID   = J.BALANCE_ID
       AND    BALANCE_YEAR = J.BALANCE_YEAR
       AND    SPCL_BALANCE = J.SPCL_BALANCE
       AND    ERNCD        = J.ERNCD)
AND    J.SPCL_BALANCE      = 'Y'
AND    J.ERNCD             = 'WK1'
end-select
end-procedure


!***********************************************************************
!This procedure calculates the total absentee days of the employee 
!during the previous service year or previous calendar year as 
!determined by the service years.
!***********************************************************************
begin-procedure calc-total-absence-period
!***********************************************************************

  Show 'calc-total-absence-period'
  if $first_year_service = 'Y'
    move $AsOfDate to $RFL_date
    move $service_dt to $start_date
  else
    move '31-DEC-' to $RFL_date
    concat $prev_year with $RFL_date
    move '01-JAN-' to $start_date
    concat $prev_year with $start_date
  end-if
	show '$start_date ' $start_date
	show '$prev_year ' $prev_year 
	show '$RFL_date ' $RFL_date

  move 'N' to $No_More_Absence
  let #total_absence = 0


!Need to find out the absence period by ignoring the actions PLA/FML,
!or PLA/WC2 or LOA/DIS (if the employee belongs to G01), otherwise, 
!if the employee does not belong to G01, just ignore PLA/FML and 
!calculate the absence period

  while $No_More_Absence = 'N'
    if &A.UNION_CD = 'G01'
      let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'',''LOADIS'')'
    else
      let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'')'
    end-if
    show '$ignore_string ' $ignore_string 
    show 'Doing select-LOA-periods'
    do select-LOA-periods
  end-while
end-procedure


!*********************************************************************
!This procedure adjusts the already calculated earned yearly vacation
!amount depending on the total absence period during the last service 
!year or during the last calendar year.(Determined by the Number of 
!service years). 
!*********************************************************************
begin-procedure adjust-year-vac-amt
!***********************************************************************

  Show 'adjust-year-vac-amt'
  if #total_absence <= 90
    goto skip-adjust
  end-if

  if #total_absence > 90 and #total_absence <= 180
     multiply 0.25 times #eligible_weeks
  else    !> 180 days

    if $first_year_service = 'Y'
      move $AsOfDate to $RFL_date
      move $service_Dt to $start_date
    else
      move '31-DEC-' to $RFL_date
      concat $prev_year with $RFL_date
      move '01-JAN-' to $start_date
      concat $prev_year with $start_date
    end-if


!If the total absence period calculated is greater than 180 days, 
!and the employee belongs to union code G01, need to find out the 
!total absence period agian by ignoring only PLA/FML(FMLA Leave)
!and PLA/WC2(Workers Compensation).

    move 'N' to $No_More_Absence

    if &A.UNION_CD = 'G01'
      let #total_absence = 0
      while $No_More_Absence = 'N'
        let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'')'
        do select-LOA-periods
      end-while
    end-if

    if #total_absence > 180 and #total_absence <= 270 
       multiply 0.5 times #eligible_weeks
    else   ! > 270 days
       let #eligible_weeks = 0
    end-if
  end-if

skip-adjust:

  if &A.UNION_CD = 'G01'
    if $first_year_service = 'Y'
      move $AsOfDate to $RFL_date
      move $service_Dt to $start_date
    else
      move '31-DEC-' to $RFL_date
      concat $prev_year with $RFL_date
      move '01-JAN-' to $start_date
      concat $prev_year with $start_date
    end-if


!Employee that has absence period for the action PLA/WC2 (workers Comp)
!must have worked some hours during the previous year in order to 
!qualify for any vacation. Any hours worked in the previous year
!will guarantee full earned vacation dollars.
	show 'Doing check-work-comp'
    do check-work-comp
  end-if

  if #year_vac_amt <= 0
    move 'Y' to $skip_record
  end-if
end-procedure


!*********************************************************************
!This procedure calculates the total absence period. It finds each
!Leave of absence start date and end date during the year
!and adds them together. It enables to sum all the days, the employee
!was in Leave of Absence during the year even though he/she
!uses it multiple times.
!*********************************************************************
begin-procedure select-LOA-Periods
!***********************************************************************

 Show 'select-LOA-Periods'
	show 'Doing select-starting-absence-date'
   do select-starting-absence-date

   if $No_More_Absence = 'N'
      do convert-to-dtu-date(&G.EFFDT,$Start_dt_dtu)
   else
      goto skip-process
   end-if

   if &A.UNION_CD = 'G01'
     let $ignore_string = 'AND H.ACTION||H.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'',''LOADIS'')'
   else
     let $ignore_string = 'AND H.ACTION||H.ACTION_REASON NOT IN (''PLAFML'')'
   end-if
	show '$ignore_string ' $ignore_string 
	show 'Doing select-RFL-date '

   do select-RFL-date

   if $RFL_date_found = 'Y'
      do Convert-To-Dtu-date(&H.EFFDT,$RFL_dt_dtu)
   else
      do convert-to-dtu-date($RFL_date,$RFL_dt_dtu)
      move 'Y' to $No_More_Absence
   end-if

   do dtu-diff-days($Start_dt_dtu,$RFL_dt_dtu,#diff_days)
   add #diff_days to #total_absence

   do convert-from-dtu-date($RFL_dt_dtu,$start_date)

skip-process:

end-procedure


!**********************************************************************
!This procedure selects the each Leave of Absence period's start date
!**********************************************************************
begin-procedure select-starting-absence-date
!***********************************************************************

  Show 'select-starting-absence-date'
  move 'N' to $found
Begin-Select on-error=sql-error-found
G.EFFDT
  move 'Y' to $found
FROM   PS_JOB G
WHERE  G.EMPLID           = &A.EMPLID
AND    G.EMPL_RCD        = &A.EMPL_RCD
AND    G.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       > $Start_date
       AND    EFFDT      <= $RFL_date)
AND    G.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       = G.EFFDT)
AND    G.EMPL_STATUS      = 'P'  !Leave of absence paid
  [$ignore_string]
end-select

  if $found = 'N'
    move 'Y' to $No_More_Absence
  end-if
end-procedure   


!*****************************************************************
!This procedure selects each Leave of Absence period's end date
!*****************************************************************
begin-procedure select-RFL-date
!***********************************************************************

 Show 'select-RFL-date'
  move 'N' to $RFL_date_found

   show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &G.EFFDT ' ' $RFL_date

Begin-Select on-error=sql-error-found
H.EFFDT

  move 'Y' to $RFL_date_found

FROM   PS_JOB H
WHERE  H.EMPLID           = &A.EMPLID
AND    H.EMPL_RCD        = &A.EMPL_RCD
AND    H.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       > &G.EFFDT
       AND    EFFDT      <= $RFL_date)
AND    H.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       = H.EFFDT)
AND    H.EMPL_STATUS     <> 'P'  !Leave of absence paid
  [$ignore_string]
end-select
end-procedure   


!***********************************************************************
!Employee that has absence period for the action PLA/WC2 (workers Comp)
!must have worked some hours during the year in order to 
!qualify for any vacation. Any hours worked in the previous year
!will guarantee full earned vacation dollars.
!***********************************************************************
begin-procedure check-work-comp
!***********************************************************************

 Show 'check-work-comp'
  move 'N' to $Worked
  move 'N' to $work_comp_found

  let $ignore_string = 'AND G1.ACTION||G1.ACTION_REASON IN (''PLAWC2'')'
	show '$ignore_string  ' $ignore_string 
Begin-Select on-error=sql-error-found
'G1'
  move 'Y' to $work_Comp_found

  let #hrs_ytd = 0

  if $first_year_service = 'Y'
    let $balance_year_criteria = 'AND    E1.BALANCE_YEAR     IN (' || $prev_year || ',' || $AsOfYYYY || ')'
    show 'Doing check-earnings-balance'
    do check-earnings-balance
  else
    let $balance_year_criteria = 'AND    E1.BALANCE_YEAR      = ' || $prev_year
    show 'Doing check-earnings-balance'
    do check-earnings-balance
  end-if

  if #hrs_ytd > 0
    move 'Y' to $Worked
  end-if

  exit-select
   
FROM   PS_JOB G1
WHERE  G1.EMPLID         = &A.EMPLID
AND    G1.EMPL_RCD      = &A.EMPL_RCD
AND    G1.EFFDT          =
      (SELECT MIN(EFFDT)
       FROM PS_JOB
       WHERE EMPLID      = G1.EMPLID
       AND EMPL_RCD     = G1.EMPL_RCD
       AND EFFDT        >= $Start_date
       AND EFFDT        <= $RFL_date)
AND    G1.EFFSEQ         =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID     = G1.EMPLID
       AND    EMPL_RCD  = G1.EMPL_RCD
       AND    EFFDT      = G1.EFFDT)
  [$ignore_string]
end-select

  if $worked = 'N' and $work_comp_found = 'Y'
    let #eligible_weeks = 0  !No Vacation if no hours were registered other
 	 		     !than Workers compensations during the year
  end-if
end-procedure   


!***********************************************************************
begin-procedure check-earnings-balance
!***********************************************************************

	show 'Parameters ' &A.EMPLID ' ' &A.COMPANY ' ' &A.EMPL_RCD

Begin-Select on-error=sql-error-found
Sum(E1.HRS_YTD) &hrs_ytd
      
  Add &hrs_ytd To #hrs_ytd

FROM   PS_EARNINGS_BAL E1
WHERE  E1.EMPLID              = &A.EMPLID
AND    E1.COMPANY             = &A.COMPANY
AND    E1.BALANCE_ID          = 'CY'
AND    E1.EMPL_RCD            = &A.EMPL_RCD
[$balance_year_criteria]
AND    E1.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = E1.EMPLID
       AND    EMPL_RCD        = E1.EMPL_RCD	
       AND    COMPANY         = E1.COMPANY
       AND    BALANCE_ID      = E1.BALANCE_ID
       AND    BALANCE_YEAR    = E1.BALANCE_YEAR
       AND    SPCL_BALANCE    = E1.SPCL_BALANCE
       AND    ERNCD           = E1.ERNCD)
AND    E1.SPCL_BALANCE        = 'N'
!AND    E1.ERNCD          NOT IN ('ADJ','509','525','602','650','651','DDP') 
! ISDVMZA - 12/03/2015 -- Added TPA and TPC to the exclusion list as per Diane instruction
AND    E1.ERNCD          NOT IN ('ADJ','509','525','602','650','651','DDP','TPA','TPC') 
AND    E1.HRS_YTD             > 0
end-select
end-procedure   

!*********************************************************************
!This procedure tries to find if the PT Vacation Earnings Code (515) is
!defined in ADDL_PAY_ERNCD table. If there is, inserts a row in 
!ADDL_PAY_EFFDT with next pay begin date as the effective date. Otherwise,
!inserts the earning code 515 in the ADDL_PAY_ERNCD and also a row with
!effective date equal to next pay begin date in ADDL_PAY_EFFDT.
!*********************************************************************
begin-procedure check-existing-vac-erncd
!***********************************************************************

  Show 'check-existing-vac-erncd'
  move 'N' to $found

begin-select on-error=sql-error-found
'K'
  move 'Y' to $found
  show 'Doing insert-new-effdt'
   do insert-new-effdt

FROM   PS_ADDL_PAY_ERNCD K
WHERE  K.EMPLID    = &A.EMPLID
AND    K.EMPL_RCD = &A.EMPL_RCD
AND    K.ERNCD     = '515'
end-select

  if $found = 'N'
    show 'Doing insert-Vac-erncd'
    do insert-Vac-erncd
    show 'Doing insert-new-effdt'
    do insert-new-effdt
  end-if
end-procedure


!***********************************************************************
Begin-Procedure Insert-Vac-Erncd
!***********************************************************************

 Show 'Insert-Vac-Erncd'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_ERNCD
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                RECORD_SOURCE)                  
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                'O')
  end-sql
end-procedure


!***********************************************************************
Begin-Procedure Insert-new-effdt
!***********************************************************************

 Show 'Insert-new-effdt'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_EFFDT
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                RECORD_SOURCE)                  
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
            		$AsOfDate,		
                'O')
  end-sql
end-procedure

!***********************************************************************
Begin-Procedure Select-Curr-Addl-Pay
!***********************************************************************

 Show '-- In Select-Curr-Addl-Pay Step --'

 If $exclude_last_6_month = 'Y' 
   let $AsOfDate1=dateadd(strtodate($AsOfDate),'Month',-6)
   let $AsOfDate1=dateadd(strtodate($AsOfDate1),'Day',-1)
   show '$AsOfDate1' $AsOfDate1
 else
   let $AsOfDate1 = $AsOfDate 
   show '$AsOfDate2' $AsOfDate1
 end-if
  
begin-select on-error=sql-error-found
XX.OTH_PAY
XX.GOAL_AMT

  show 'XX.OTH_PAY and XX.GOAL_AMT ' &XX.OTH_PAY ' ' &XX.GOAL_AMT
 
  let $curr_addl_found = 'Y'
  if &XX.OTH_PAY > 0
     let #curr_wks_check = floor(&XX.GOAL_AMT / &XX.OTH_PAY)
  end-if

FROM PS_ADDL_PAY_DATA XX
WHERE  XX.EMPLID         = &A.EMPLID
AND    XX.EMPL_RCD       = &A.EMPL_RCD
AND    XX.EFFDT = 
       (SELECT MAX(EFFDT) FROM PS_ADDL_PAY_DATA
        WHERE XX.EMPLID = EMPLID
          AND XX.EMPL_RCD = EMPL_RCD
          AND XX.ERNCD = ERNCD
          AND EFFDT <= $AsOfDate1)
AND    XX.ERNCD          = '515'
end-select
end-procedure

!***********************************************************************
Begin-Procedure Select-existing-Addl-Pay
!***********************************************************************

 Show 'Select-existing-Addl-Pay'
  let $year_begin_dt = '01-JAN-'
  concat $AsOfYYYY with $year_begin_Dt

  show '$year_begin_dt ' $year_begin_dt

  let $existing_addl_pay = 'N'
 
 If $exclude_last_6_month = 'Y'
  let $year_begin_Dt=dateadd(strtodate($year_begin_Dt),'Month',6)
  let $year_begin_Dt=dateadd(strtodate($year_begin_Dt),'Day',1)
 end-if
 
 show '$exclude_last_6_month1' $exclude_last_6_month
 show '$year_begin_Dt' $year_begin_Dt
   

begin-select on-error=sql-error-found
I5.EMPLID
I5.EMPL_RCD
I5.ERNCD
I5.EFFDT
I5.ADDL_SEQ
I5.DEPTID
I5.JOBCODE
I5.POSITION_NBR
I5.ACCT_CD
I5.GL_PAY_TYPE
I5.ADDL_PAY_SHIFT
I5.OTH_HRS
I5.HOURLY_RT
I5.OTH_PAY
I5.ADDLPAY_REASON
I5.SEPCHK
I5.EARNINGS_END_DT
I5.GOAL_AMT
I5.GOAL_BAL
I5.OK_TO_PAY
I5.DISABLE_DIR_DEP
I5.PRORATE_ADDL_PAY
I5.PRORATE_CUI_WEEKS
I5.PAY_PERIOD1
I5.PAY_PERIOD2
I5.PAY_PERIOD3
I5.PAY_PERIOD4
I5.PAY_PERIOD5
I5.STATE
I5.LOCALITY
I5.TAX_PERIODS
I5.TAX_METHOD
I5.ADDL_PAY_FREQUENCY
I5.DED_TAKEN
I5.DED_SUBSET_ID
I5.DED_TAKEN_GENL
I5.DED_SUBSET_GENL
I5.PLAN_TYPE
I5.BUSINESS_UNIT
I5.COMP_RATECD


  let $existing_addl_pay = 'Y'
  let #goal_bal = &I5.GOAL_BAL

	
  If $Mstr_Cntrct_Nrml = 'N'		
        show '&I5.GOAL_AMT :' &I5.GOAL_AMT
        add &I5.GOAL_AMT to #year_Vac_amt
        show '#year_Vac_amt:' #year_Vac_amt
  End-If				
  
FROM   PS_ADDL_PAY_DATA I5
WHERE  I5.EMPLID         = &A.EMPLID
AND    I5.EMPL_RCD      = &A.EMPL_RCD
AND    I5.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I5.EMPLID
       AND    EMPL_RCD  = I5.EMPL_RCD
       AND    EFFDT     >= $year_begin_dt
       AND    ERNCD      = I5.ERNCD)
AND    I5.ERNCD          = '515'
end-select
end-procedure


!***********************************************************************
Begin-Procedure Insert-Addl-Pay-Data
!***********************************************************************
 Show 'Insert-Addl-Pay-Data'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_DATA
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                ADDL_SEQ,
                DEPTID,
                JOBCODE,
                POSITION_NBR,
                ACCT_CD,
                GL_PAY_TYPE,
                ADDL_PAY_SHIFT,
                OTH_HRS,
                HOURLY_RT,
                OTH_PAY,
                ADDLPAY_REASON,
                SEPCHK,
                EARNINGS_END_DT,
                GOAL_AMT,
                GOAL_BAL,
                OK_TO_PAY,
                DISABLE_DIR_DEP,
                PRORATE_ADDL_PAY,
                PRORATE_CUI_WEEKS,
                PAY_PERIOD1,
                PAY_PERIOD2,
                PAY_PERIOD3,
                PAY_PERIOD4,
                PAY_PERIOD5,
                STATE,
                LOCALITY,
                TAX_PERIODS,
                TAX_METHOD,
                ADDL_PAY_FREQUENCY,
                DED_TAKEN,
                DED_SUBSET_ID,
                DED_TAKEN_GENL,
                DED_SUBSET_GENL,
                PLAN_TYPE,
		        		BUSINESS_UNIT,
		            COMP_RATECD,
                RECORD_SOURCE)                   
		        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $AsOfDate,		
                1,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                #avg_weekly_hrs_worked,		!OTH_HRS
                #vac_hourly_rt,			      !HOURLY_RT
                #week_vac_amt,            !OTH_PAY
                ' ',
                0,                        !SEPCHK
                '',
                #year_vac_amt,			      !GOAL_AMT
                #GOAL_BAL,                
                'N',			   
                ' ',
                ' ',
                ' ',
                'N',
                'N',
                'N',
                'N',
                'N',
                ' ',
                ' ',
                0,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
	          'STDBU', 
		            ' ',
                'O')                              
  end-sql
end-procedure


!*********************************************************************
!This procedure checks if there is any unused vacation in the current 
!year for the employees who are retired or terminated during the current
!pay period.
!*********************************************************************
Begin-Procedure check-unused-vacation
!*********************************************************************

  Show 'check-unused-vacation'
  let #vac_bal = 0

  move '31-DEC-' to $RFL_date
  concat $AsOfYYYY with $RFL_date
  move '01-JAN-' to $start_date
  concat $AsOfYYYY with $start_date

  show 'Parameters ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
I1.EMPLID 
I1.EMPL_RCD 
I1.EFFDT 
I1.ERNCD 
I1.GOAL_AMT
I1.GOAL_BAL
    
  move &I1.GOAL_AMT to #vac_awarded
  move &I1.GOAL_BAL to #vac_taken

  let #vac_bal = #vac_awarded - #vac_taken

FROM   PS_ADDL_PAY_DATA I1
WHERE  I1.EMPLID         = &A3.EMPLID
AND    I1.EMPL_RCD      = &A3.EMPL_RCD
AND    I1.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I1.EMPLID
       AND    EMPL_RCD  = I1.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date
       AND    ERNCD      = I1.ERNCD)
AND    I1.ERNCD          = '515'
AND   (I1.GOAL_AMT - I1.GOAL_BAL) > 0
end-select
end-procedure


!*********************************************************************
!This procedure finds the previous year's vacation amount that the 
!employee earned. And, prorates that amount depending on the 
!Termination/Retirement month.
!*********************************************************************
Begin-Procedure calc-prorated-vacation
!*********************************************************************

 Show 'calc-prorated-vacation'
	 show 'Parameters ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
I2.EMPLID 
I2.EMPL_RCD 
I2.EFFDT 
I2.ERNCD 
I2.HOURLY_RT 
I2.GOAL_AMT 
I2.GOAL_BAL
    
  move &I2.GOAL_AMT to #prev_vac_bal
  let #term_retire_month = substr(&effdt,1,2)

  evaluate #term_retire_month
    when <= 3
      let #prorate_vac = #prev_vac_bal * 0.25
      break
    when <= 6
      let #prorate_vac = #prev_vac_bal * 0.5
      break
    when <= 9
      let #prorate_vac = #prev_vac_bal * 0.75
      break
    when <= 12
      let #prorate_vac = #prev_vac_bal 
      break
  end-evaluate
     
FROM   PS_ADDL_PAY_DATA I2
WHERE  I2.EMPLID         = &A3.EMPLID
AND    I2.EMPL_RCD      = &A3.EMPL_RCD
AND    I2.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I2.EMPLID
       AND    EMPL_RCD  = I2.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date
       AND    ERNCD      = I2.ERNCD)
AND    I2.ERNCD          = '515'
end-select
end-procedure


!*********************************************************************
!This procedure prints the employee's payout report who are retired
!or terminated during the current pay period.
!*********************************************************************
Begin-Procedure Print-Payout-Report
!*********************************************************************

 Show 'Print-Payout-Report'
	show 'printing Print-Payout-Report'
use-report Vacation-Payout-Report

  print &A3.EMPLID (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta
  print &P3.NAME   (,20) 
  print &A3.ACTION (,50)
  print &A3.EFFDT  (,65)
  print #vac_bal   (,80) 

use-report report-log
end-procedure


!*********************************************************************
Begin-Procedure Print-Balance-Report
!*********************************************************************

  Show 'Print-Balance-Report'
	Show 'Print-Balance-Report'
use-report Balance-Report

  if $dept_changed='Y'
     new-page
  else 
     let $dept_changed='N'
  end-if

  print &A.EMPLID  (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta
  print &PD.NAME   (,20) 
  print &A.ACTION  (,50)
  print &A.EFFDT   (,65)
  print #week_vac_amt (,85)
  print #year_vac_amt (,100)

use-report report-log
end-procedure

!*********************************************************************
begin-procedure SQL-Error-Found
!*********************************************************************

#debug9 Show 'SQL-Error-Found'
  show 'In SQL-Error-Found '  $EmplId
  !GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
  !let $EmplId_1st3 = substr($EmplId,1,3)
  !let $EmplId_mid2 = substr($EmplId,4,2)
  !let $EmplId_last4 = substr($EmplId,6,4)
 
  !String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out         (+1,1)
  !print $EmplID11    (,18)
  print $EmplID    (,18)
  print $sql-error   (,35) 
  !GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
end-procedure


!*********************************************************************
begin-procedure Get-Company-Data
!*********************************************************************

  if rtrim($prev_cmpy,' ') = ''
    move '' to $CompanyName
    goto GetCompanyExit
  end-if
  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if
	show '$prev_cmpy ' $prev_cmpy
	show '$AsOfDate ' $AsOfDate

begin-SELECT
CT.DESCR

FROM  PS_COMPANY_TBL CT
WHERE CT.COMPANY = $prev_cmpy
  AND CT.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = $prev_cmpy
         AND  EFFDT  <= $AsOfDate)
end-SELECT

     let $CompanyName      = rtrim(&CT.Descr,' ')

GetCompanyExit:
    
end-procedure


!*********************************************************************
begin-procedure Get-Department-Name
!*********************************************************************

  move '' to $DeptName
  
  if Rtrim($prev_deptid,' ') = ''
    goto GetDptNmExit
  end-if

  if $AsOfDate = ''
    move $AsOfToday to $AsOfDate
  end-if

	show 'Parameters ' $prev_deptid ' '  $AsOfDate

begin-SELECT
X.DESCR

  let $DeptName      = Rtrim(&X.DESCR,' ')
  
FROM  PS_DEPT_TBL X
WHERE X.DEPTID = $prev_deptid
 AND X.EFFDT <= $AsOfDate
 AND X.EFFDT  =
       (SELECT MAX(EFFDT)
        FROM   PS_DEPT_TBL
        WHERE  DEPTID = X.DEPTID
        AND  EFFDT <= $AsOfDate)
end-SELECT

GetDptNmExit:

end-procedure


Begin-Procedure Get-Previous-Amount

Begin-Select
SIX.GOAL_AMT  &Six_Months_Goal_Amt
SIX.OTH_HRS
SIX.HOURLY_RT
SIX.OTH_PAY
	
	Let #Six_Month_Goal_Amount = &Six_Months_Goal_Amt
	Let #Six_Month_Oth_hrs = &SIX.OTH_HRS
	Let #Six_Month_Hourly_Rt = &SIX.HOURLY_RT
	Let #Six_Month_Oth_Pay = &SIX.OTH_PAY
	Show '#Six_Month_Goal_Amount :' #Six_Month_Goal_Amount
	Show '#Six_Month_Oth_hrs :' #Six_Month_Oth_hrs
	Show '#Six_Month_Hourly_Rt :' #Six_Month_Hourly_Rt
	Show '#Six_Month_Oth_Pay :' #Six_Month_Oth_Pay

FROM PS_ADDL_PAY_DATA SIX
WHERE  SIX.EMPLID         = &A.EMPLID
AND    SIX.EMPL_RCD       = &A.EMPL_RCD
AND    SIX.EFFDT = 
       (SELECT MAX(SIX1.EFFDT) FROM PS_ADDL_PAY_DATA SIX1
        WHERE SIX.EMPLID = SIX1.EMPLID
          AND SIX.EMPL_RCD = SIX1.EMPL_RCD
          AND SIX.ERNCD = SIX1.ERNCD
          AND SIX1.EFFDT <$AsOfDate)
AND    SIX.ERNCD          = '515'
End-Select

End-Procedure Get-Previous-Amount

!*********************************************************************
#Include 'gexxx922.sqc'  !Get GEX_RC_PAY run control parameters
#include 'gexxx970.sqc'  !Get multiple deptid/jobcode row table
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'askaod.sqc'    !Ask-As-Of-Date routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#include 'gexregtp.sqc'  !Translates the REG_TEMP to Full_Part_time
#include 'gexxx913.sqc'  !Union_cd 
#include 'gexxx900.sqc'  !Company
#include 'gexrehdt.sqc'	 !GEX-MXT 03/24/2008 Fixed for REHIRE DT