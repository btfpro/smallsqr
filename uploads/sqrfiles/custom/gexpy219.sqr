!********************************************************************************
! GEXPY219 : ADDRESS ERROR REPORT  				                *
!********************************************************************************
!                                                                               *
!               	Confidentiality Information:                            *
!                                                                               *
! 	This module is the confidential and proprietary information of          *
! 	Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted    *
! 	in any form, by any means, in whole or in part, nor is it to be used    *
! 	for any purpose other than that for which it is expressly provided      *
! 	without the written permission of Giant Eagle.                          *
!                                                                               *
! 	Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved            *
!                                                                               *
!********************************************************************************
!                                                                               *
! GEXPY219 : 		ADDRESS ERROR REPORT  					*
!                                                                               *      
! Narrative:            This program that will report address errors quarterly	*
!                                                                               *
!                                                                               *  
! SQL Tables:           PS_JOB                                                  *
!                       PS_PERSONAL_DATA                                        *
!                                                                               *
! Written by:           Abhishek Gupta                                          *       
!                                                                               *
! Normally Run:         Quarterly                                               *
!                                                                               *
! Modification Log                                                              *
! GEX_SEC_REENG Vahini Katta 09/18/2016                                         *
! Changes related to SSN Conversion                                             *
!********************************************************************************

#include 'setenv.sqc'
#include 'stdapi.sqc'
#Include 'setup01.sqc'   !Printer and Page-Size Initialization (Portrait)

!**************************************************************************************************
Begin-Program

  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  
  Do STDAPI-INIT
  Let $ReportID      = 'GEXPY219'
  Let $ReportTitle   = 'ADDRESS ERROR REPORT'
  Show 'As of today: '$Asoftoday
  let $Year = substr($Asoftoday,8,11)
  !Show 'Year :'$Year
   let $First_Day = '01-JAN-' || $Year
   Show 'First Day of the year : '$First_Day
	Do Initialization
	Do Process-Main
  Do STDAPI-TERM
	
End-Program


!**************************************************************************************************
Begin-Procedure Initialization
!**************************************************************************************************

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

	If $prcs_process_instance = ''
		let $Prcs_OprID = 'HRBATCH'
		let $Prcs_Run_Cntl_ID = 'gexpy219'
  	End-If
    
!  Do Process-Scheduler-Run-Controls
  Do Print-Cover-Page

End-Procedure Initialization
!**************************************************************************************************
Begin-Heading 8
 #Include 'stdhdg01.sqc'
  
  Print 'Employee ID '		(7,1)
  Print 'Employee Name'         (,13)
  Print 'SSN'                   (,49)
  Print 'Message' 		(,61)
  Print '-'			(+1,1,90)	fill

End-Heading
!**************************************************************************************************
Begin-Procedure Print-Cover-Page

  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'        (+12,6)
  Print '$Prcs_OPRID          ='                              (+1,6)
  Print $Prcs_OPRID                                           (0,+2)
  Print '$PRCS_RUN_CNTL_ID    ='                              (+1,6)
  Print $PRCS_RUN_CNTL_ID                                     (0,+2)
 
  LET #PAGE-COUNT = 0
  NEW-PAGE

End-Procedure Print-Cover-Page
!**************************************************************************************************
Begin-Procedure Process-Main

BEGIN-SELECT
J.EMPLID
PD.ADDRESS1
PD.ADDRESS2
PD.CITY
PD.STATE
PD.POSTAL
PD.NAME

    Let $Emplid = Ltrim(Rtrim(&J.EMPLID,' '),' ')
    !GEX_SEC_REENG Vahini Katta Begins
	  Let #tmp = TO_NUMBER(&J.EMPLID)               !Verify SSN is numeric
     do Get-Emp-SSN($Emplid,$Ssn_Out)
    Let #Ssn_Out = TO_NUMBER($Ssn_Out)               !Verify SSN is numeric
  	let $SSN = EDIT(TO_CHAR(#Ssn_Out),'099999999')
    !GEX_SEC_REENG Vahini Katta Ends
  	
  			If #tmp = 0
    				move 'Missing SSN or SSN = 000000000' to $Message
    				Do Print-Data
  			Else
   	 			If $SSN <> &J.EMPLID
      				Move 'Invalid SSN' to $Message
      				do Print-Data
    	 		Else                                     !Check for invalid #'s
          !GEX_SEC_REENG Vahini Katta 09/18/2016 Begins
    				!If RTRIM(&J.EMPLID, ' ') = ''
          	!		   or &J.EMPLID  = '111111111'
          	!   		 or &J.EMPLID  = '123456789'
          	!   		 or &J.EMPLID  = '333333333'
          	!   		 or &J.EMPLID  = '999999999'
          	!   		 or SUBSTR(&J.EMPLID,1,3)  = '000'
	        	!   					Move 'Invalid SSN' to $Message
  					!       	    do Print-Data
      			!End-If
            If RTRIM($SSN, ' ') = ''
          			   or $SSN  = '111111111'
          	   		 or $SSN  = '123456789'
          	   		 or $SSN  = '333333333'
          	   		 or $SSN  = '999999999'
          	   		 or SUBSTR($SSN,1,3)  = '000'
	        	   					Move 'Invalid SSN' to $Message
  					       	    do Print-Data
      			End-If
            !GEX_SEC_REENG Vahini Katta 09/18/2016 Ends
    	 	End-If
  		End-If
  	
  			Let $Address_Type = 'HOME'
  			Do Check-Address
  			If $Address_Found =  'N'
  				Let $Address_Type = 'MAIL'
  	  		Do Check-Address
  	  		If $Address_Found =  'N'
  	  				Move 'Incomplete employee address' to $Message	
       				Do Print-Data
  	 		  Else
  	  
  	  					If ($Address1 = '' and $Address2 = '') or
        					$City  = '' or	$State  = '' or
         					$Postal  = ''
       								Move 'Incomplete employee address' to $Message	
       								Do Print-Data
							End-If    
  	  		End-if
  			Else
  					If ($Address1 = '' and $Address2 = '') or
        			$City  = '' or	$State  = '' or
         			$Postal  = ''
       						Move 'Incomplete employee address' to $Message	
       						Do Print-Data
						End-If    
  			End-if
	  Do Reset-Variable 		
	  
	
FROM PS_JOB J,PS_PERSONAL_DATA PD
WHERE J.EMPLID = PD.EMPLID
AND J.EMPL_RCD =0
AND J.EFFDT = (SELECT MAX(J_ED.EFFDT) FROM PS_JOB J_ED
		WHERE J_ED.EMPLID = J.EMPLID
		AND J_ED.EMPL_RCD = J.EMPL_RCD
		AND J_ED.EFFDT <= SYSDATE)
AND J.EFFSEQ = (SELECT MAX(J_ES.EFFSEQ) FROM PS_JOB J_ES
		WHERE J_ES.EMPLID = J.EMPLID
		AND J_ES.EMPL_RCD = J.EMPL_RCD
		AND J_ES.EFFDT = J.EFFDT)	
AND ((J.EMPL_STATUS IN ('A','L','P','S')	AND J.TERMINATION_DT IS NULL)
		OR (J.TERMINATION_DT BETWEEN  $First_Day AND SYSDATE))

END-SELECT

End-Procedure Process-Main
!**************************************************************************************************
Begin-Procedure Print-Data

Print &J.EMPLID		(+1,1)
Print &PD.NAME		(,13)
Print $SSN		(,49) edit xxx-xx-xxxx
Print $Message		(,61)

End-Procedure Print-Data

!**************************************************************************************************
Begin-Procedure Check-Address

Let $Address_Found =  'N'
Begin-Select
ADDR.ADDRESS1
ADDR.ADDRESS2
ADDR.CITY
ADDR.POSTAL
ADDR.STATE
	
		Let $Address_Found =  'Y'
		let $Address1 = Ltrim(Rtrim(&ADDR.ADDRESS1,' '),' ')
		let $Address2 = Ltrim(Rtrim(&ADDR.ADDRESS2,' '),' ')
		let $City = Ltrim(Rtrim(&ADDR.CITY,' '),' ')
		let $Postal = Ltrim(Rtrim(&ADDR.POSTAL,' '),' ')
		let $State = Ltrim(Rtrim(&ADDR.STATE,' '),' ')
		

FROM PS_ADDRESSES ADDR 
WHERE ADDR.EMPLID = $Emplid
AND ADDR.ADDRESS_TYPE = $Address_Type
AND ADDR.EFFDT = (SELECT MAX(ADDR1.EFFDT) FROM PS_ADDRESSES ADDR1 WHERE ADDR.EMPLID = ADDR1.EMPLID 
									AND ADDR.ADDRESS_TYPE = ADDR1.ADDRESS_TYPE
									AND ADDR1.EFFDT <= SYSDATE)
End-Select

End-Procedure Check-Address
!**************************************************************************************************
Begin-Procedure Reset-Variable
let $Address1 = ''
let $Address2 = ''
Let $City = ''
let $Postal = ''
let $State = ''
End-Procedure Reset-Variable
!**************************************************************************************************


#include 'datetime.sqc'
#include 'number.sqc'
#include 'curdttim.sqc'
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getgeid.sqc'             