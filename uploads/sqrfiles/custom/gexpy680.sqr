!***********************************************************************
! GEXPY680: Pay Sheet Create Process.                                  *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXPY680 :            Pay Sheet creation for Bonus                   *
!                                                                      *
! Narrative:            This program will create Paysheet for Bonus rows*
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           *
!                                                                      *
! SQL Tables:           personal_data                                  *
!                       job                                            *
!                       pay_earnings                                   *
!                       pay_oth_earns                                  *
!			PS_GEX_EMPL_BONUS
!                                                                      *
! Written by:           Abhishek Gupta                                 *
!                                                                      *
! Normally Run:         Adhoc                                          *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                         None                                         *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS  DATE        DESCRIPTION OF THE CHANGE                      *
!***********************************************************************
!                                                                      *
! AXG       07/23/2012    Initial Creation                 *
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup01.sqc'   !Printer and Page-Size Initialization (Portrait)


#define #column1  001
#define #column2  009
#define #column3  018
#define #column4  029
#define #column5  081


Begin-program
#debug9 Show 'Begin-Program'

  Do P100-Initialization
  Do P200-Main-Process
  Do Update-Pay-Calendar
  Do P300-Finalization
  
End-program


Begin-Heading 7
#debug9 Show 'Begin-Heading'
  #Include 'stdhdg01.sqc'

  Print 'As Of Date: '           (3,1)
  Do Format-DateTime($AsOfDate, $out, {DEFDATE}, '', '')
  Print $out ()

  If #BP-recs-printed > 0
    Print 'Benefit Program: '    (4,1)
    Print $save_benefit_program  ()
  End-If

  Print $ReportTitle2            (3,) Center
  Print $ReportTitle3            (4,) Center

  Print 'COMPANY'                (+2,{#column1})
  Print 'PAYGROUP'               (+0,{#column2})
  Print 'EMPLID'                 (+0,{#column3})
  Print 'NAME'                   (+0,{#column4})
  Print 'BENEFIT PGM'            (+0,{#column5})

  Print '-'                      (+1,{#column1},07)  Fill
  Print '-'                      (+0,{#column2},08)  Fill
  Print '-'                      (+0,{#column3},09)  Fill
  Print '-'                      (+0,{#column4},50)  Fill
  Print '-'                      (+0,{#column5},11)  Fill
End-Heading


Begin-Procedure P100-Initialization
#debug9 Show 'P100-Initialization'
  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  
  if $prcs_process_instance = ''
    !do Ask-As-Of-Date
  else
    Do GEXXX922-Select-Parameters
    let $Run_ID = $GEX_RC_PAY.RUN_ID
    if rtrim($GEX_RC_PAY.RUN_ID,' ') = ''
      !let $asofdate = $asoftoday
    end-if
  end-if
  
  let $year = datetostr(datenow(), 'YYYY' )
  show '$asofdate: ' $asofdate
  show '$year : ' $year

  Let $ReportID      = 'GEXPY680'
  Let $ReportTitle   = 'Pay Sheet for Bonus'
  Let $ReportTitle2  = ' '
  Let $ReportTitle3  = ' '

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle
  Show ' '
  Show 'Report Began:'
  Show '  Date = ' $ReportDate
  Show '  Time = ' $ReportTime

  do prepare-businessunit-lookup
  Do Get-Pay-End-Dt

End-Procedure
begin-procedure Prepare-Businessunit-lookup

Load-Lookup
     Name=BULookup
     Table='PS_BUS_UNIT_TBL_HR BU'
     Key='BU.DEFAULT_SETID'
     Return_Value='BU.BUSINESS_UNIT'
     Where='BU.ACTIVE_INACTIVE  = ''A'''   
end-procedure

Begin-Procedure Get-Pay-End-Dt
  Move 'N' To $found
Begin-Select Loops=1 On-Error=P260-sql-error-found('Get-Pay-End-Dt')
PAY.PAY_BEGIN_DT
PAY.PAY_END_DT
PAY.PAY_PERIOD

  Move &PAY.PAY_BEGIN_DT to $pay_begin_dt 
  Move &PAY.PAY_END_DT   To $pay_end_dt
  MOVE &PAY.PAY_PERIOD   To $pay_period 
  Show ' '
  Show 'Pay Begin Date: '  $pay_begin_Dt
  Show 'Pay End Date: '  $pay_end_Dt
  Show 'Pay Period:   '  $pay_period
  Move 'Y' To $found

FROM   PS_PAY_CALENDAR PAY
WHERE  PAY.RUN_ID = $Run_ID
AND PAY.PAY_OFF_CYCLE_CAL = 'Y'
End-Select

  If $found = 'N'
    Display 'No off cycle Pay calendar for Pay Run ID: ' noline
    Display $Run_ID
    Stop
  End-If

End-Procedure  !get-pay-end-dt
!************************************************************************
Begin-Procedure Update-Pay-Calendar
!************************************************************************
Begin-SQL
UPDATE PS_PAY_CALENDAR SET PAY_SHEETS_RUN = 'Y' 
WHERE RUN_ID = $Run_ID AND PAY_OFF_CYCLE_CAL = 'Y'
End-SQL

!************************************************************************
End-Procedure Update-Pay-Calendar
!************************************************************************

!************************************************************************
Begin-Procedure P200-Main-Process
!************************************************************************
#debug9 Show 'P200-Main-Process'


Begin-Select On-Error=P260-SQL-Error-Found('P200-Main-Process')
	distinct
j.company
j.paygroup
j.emplid
j.empl_rcd
j.empl_status
j.empl_type
j.location
j.deptid
j.gl_pay_type
j.jobcode
j.position_nbr
j.shift
j.hourly_rt
e.benefit_rcd_nbr
ded.ded_taken         
ded.ded_subset_id   
p.name
bpp.benefit_program  
bpp.emplid
bpp.empl_rcd
bpp.cobra_event_id

  let $company      = &j.company
  let $paygroup     = &j.paygroup
  let $deptid       = &j.deptid
  let $emplid       = &j.emplid
  let $empl_type    = &j.empl_type
  let $location     = &j.location
  let $gl_pay_type  = &j.gl_pay_type
  let $jobcode      = &j.jobcode  
  let $position_nbr = &j.position_nbr
  let $shift        = &j.shift
  let $dedtaken     = &ded.ded_taken 
  let $dedsubsetid  = &ded.ded_subset_id 
  let $name         = &p.name
  let $benefit_pgm  = &bpp.benefit_program
  move &j.empl_rcd to #empl_rcd
  move &j.hourly_rt to #hourly_rt
  move &e.benefit_rcd_nbr to #benefit_rcd_nbr
  add 1 to #emps_selected
  Do P210-verify-paysheet

From   ps_ben_prog_partic bpp,
       ps_employment      e,  
       ps_personal_data   p,
       ps_job             j,
       ps_ded_na          ded,
       PS_GEX_EMPL_BONUS  BON

Where  e.emplid               = j.emplid
And    e.empl_rcd             = j.empl_rcd
And    ded.emplid             = j.emplid
And    ded.empl_rcd           = j.empl_rcd
And    Bon.emplid             = j.emplid
And    Bon.empl_rcd           = j.empl_rcd
And    BON.GEX_BONUS_YEAR     = $year
And    p.emplid               = j.emplid
And    bpp.emplid             = j.emplid
and    bpp.empl_rcd 	      = j.empl_rcd
And    j.effdt                =
      (Select Max(j1.effdt)
       From   ps_job j1
       Where  j1.emplid          = j.emplid
       And    j1.empl_rcd        = j.empl_rcd
       And    j1.effdt          <= $pay_end_dt)

And    j.effseq               =
      (Select Max(j2.effseq)
       From   ps_job j2
       Where  j2.emplid          = j.emplid
       And    j2.empl_rcd        = j.empl_rcd
       And    j2.effdt           = j.effdt)
And    bpp.effdt              =
      (Select Max(bpp1.effdt)
       From   ps_ben_prog_partic bpp1
       Where  bpp1.emplid          = bpp.emplid
       And    bpp1.empl_rcd        = bpp.empl_rcd
       And    bpp1.cobra_event_id  = bpp.cobra_event_id
       And    bpp1.effdt          <= $pay_end_dt)
!AND j.emplid = '268605424'	  
Order by j.paygroup,j.emplid
End-Select
End-Procedure


Begin-Procedure P210-verify-paysheet
#debug9 Show 'P210-verify-paysheet'
  let $paysheet-found = 'N'
Begin-Select On-Error=P260-SQL-Error-Found('P210-verify-paysheet')
'x'

  let $paysheet-found = 'Y'

From   ps_pay_line     pl

Where  pl.emplid              = $emplid
And    pl.off_cycle           = 'Y'
And    pl.pay_end_dt          = $pay_end_dt
End-Select

  if $paysheet-found = 'N'
     do P230-create-paysheet
  end-if
!************************************************************************
End-Procedure
!************************************************************************

!************************************************************************
Begin-Procedure P230-create-paysheet
!************************************************************************
#debug9 Show 'P230-Create-Paysheet'

  if $paygroup = $save_paygroup
    if #line_num = 7
      add 1 to #page_num
      do P232-Add-page
      move 1 to #line_num
      do P233-Add-line
    else
      add 1 to #line_num
      do P233-Add-line
    end-if
  else 
    do P231-get-last-page
    add 1 to #page_num
    do P232-Add-page
    move 1 to #line_num
    do P233-Add-line
  end-if
  move $paygroup to $save_paygroup

   do P240-print-record
   do P233-add-pay-earnings

!************************************************************************
End-Procedure
!************************************************************************
!*********************************************************************
! Retrieves the last page in the pay_page table for current period
! and paygroup. 
!*********************************************************************
!************************************************************************
begin-procedure P231-Get-Last-Page
!************************************************************************
#debug9 Show 'P231-Get-Last-Page'

 !display 'P231-Get-Last-Page'
 !display 'Pay End date in last-page proc: ' noline
 !display $Pay_End_Dt
 !display 'Company in last-page proc: ' noline
 !display $Company
 !display 'Paygroup in last-page proc: ' noline
 !display $Paygroup

begin-select ON-ERROR=P260-SQL-Error-Found('P231-Get-Last-Page')
/*+ RULE */
MAX(PAGE_NUM) &Page

  move &Page to #page_num
  !display 'Max Page : ' noline 
  !display &Page

FROM PS_PAY_PAGE
WHERE COMPANY = $Company
  AND PAYGROUP = $PayGroup
  AND PAY_END_DT = $Pay_End_Dt
  AND OFF_CYCLE = 'Y'
end-select
!************************************************************************
end-procedure
!************************************************************************
!*********************************************************************
!Inserts a new page in the paysheet
!*********************************************************************
!************************************************************************
Begin-Procedure P232-Add-page
!************************************************************************
#debug9 Show 'P232-Add-page'

 display 'add-page'

 display $company
 display $paygroup
 display $pay_end_dt
 display #page_num
 
begin-SQL ON-ERROR=P260-SQL-Error-Found('P232-Add-page')
/*+ RULE */
INSERT INTO PS_PAY_PAGE ( COMPANY,
			  PAYGROUP,
			  PAY_END_DT,
			  OFF_CYCLE,
			  PAGE_NUM,
			  CONFIRMED,
			  BALNC_LINES,
			  BALNC_LINES_OK,
			  BALNC_REG_PAY_HRS,
			  BALNC_OT_HRS,
			  BALNC_OTH_HRS,
			  BALNC_REG_PAY,
			  BALNC_OTH_EARNS,
			  BALNC_HOURLY_RT,
			  SINGLE_CHECK_USE,
			  PAY_SHEET_SRC)
VALUES                  ( $Company,
			  $paygroup,
			  $pay_end_dt,
			  'Y',
			  #page_num,
			  'N',
			  0,
			  0,
			  0,
			  0,
			  0,
			  0,
			  0,
			  0,
			'N',
			'S')
end-SQL
!************************************************************************
End-Procedure   !P232-Add-Page
!************************************************************************
!*********************************************************************
!insets a new line in the pay sheet
!*********************************************************************
!************************************************************************
Begin-Procedure P233-Add-line
!************************************************************************
#debug9 Show 'P233-Add-line'

 let $bu_lkp = ' '
 lookup bulookup 'COMMN' $bu_lkp  

begin-SQL ON-ERROR=P260-SQL-Error-Found('P233-Add-Line')
/*+ RULE */
INSERT INTO PS_PAY_LINE ( COMPANY,
			  PAYGROUP,
			  PAY_END_DT,
			  OFF_CYCLE,
			  PAGE_NUM,
			  LINE_NUM,
			  EMPLID,
			  EMPL_RCD,
			  BENEFIT_RCD_NBR,
			  NAME,
			  JOB_CHANGE,
			  PARTIAL_PERIOD,
			  CONFIRMED,
			  EMPL_TYPE,
			  LOCATION,
			  DEPTID,
			  BENEFIT_PROGRAM,
			  MANUAL_CHECK,
			  FORM_ID,
			  PAYCHECK_NBR,
			  CHECK_DT,
			  TOTAL_GROSS,
			  NET_PAY,
			  PAYCHECK_ADJUST,
			  SINGLE_CHECK_USE,
			  TL_SOURCE,
			  PAY_SHEET_SRC,
			  BUSINESS_UNIT,        
			  LOCKED_FOR_CONF)	
VALUES                  ( $company,
			  $paygroup,
			  $Pay_End_Dt,
			  'Y',
			  #page_num,
			  #line_num,
			  $emplid,
			  #Empl_Rcd,
			  #benefit_rcd_nbr,
			  $name,
			  'N',
			  'N',
			  'N',
			  $empl_type,
			  $location,
			  $deptid,
			  $benefit_pgm,                   
			  'N',
			  '      ',
			  0,
			  NULL,
			  0,
			  0,
			  'N',
			  'N',
			  'G',
			  'S',
			  $bu_lkp,
			  'N')
end-SQL
!************************************************************************
End-Procedure  !P233-Add-Line
!************************************************************************
!*********************************************************************
!Adds information to Earnings table
!*********************************************************************
!************************************************************************
begin-procedure P233-Add-Pay-Earnings
!************************************************************************
 let $bu_lkp = ' '

 lookup bulookup 'COMMN' $bu_lkp  


  do P234-get-state-locality

  move 'N' to $Addl_Taxes        

begin-SQL ON-ERROR=P260-SQL-Error-Found('P233-Add-Pay-Earnings')
INSERT /*+ RULE */ INTO PS_PAY_EARNINGS ( COMPANY,
			      PAYGROUP,
			      PAY_END_DT,
			      OFF_CYCLE,
			      PAGE_NUM,
			      LINE_NUM,
			      ADDL_NBR,
			      SEPCHK,
			      EMPLID,
			      EMPL_RCD,
			      BENEFIT_RCD_NBR,
			      EARNS_END_DT,
			      EARNS_BEGIN_DT,
			      ADDLPAY_REASON,
			      DISABLE_DIR_DEP,
			      GROSSUP,
			      PAY_LINE_STATUS,
			      OK_TO_PAY,
			      JOB_PAY,
			      SINGLE_CHECK_USE,
			      ACCT_CD,
			      GL_PAY_TYPE,
			      DEPTID,
			      JOBCODE,
			      POSITION_NBR,
			      SHIFT,
			      SHIFT_RT,
			      HOURLY_RT,
			      FLSA_RT,
			      RATE_USED,
			      FLSA_REQUIRED,
			      ERNCD_REG_HRS,
			      ERNCD_OT_HRS,
			      REG_PAY_HRS,
			      REG_HRS,
			      OT_HRS,
			      REG_HRLY_EARNS,
			      OT_HRLY_EARNS,
			      ERNCD_REG_EARNS,
			      REG_PAY,
			      REG_EARNS,
			      REG_EARN_HRS,
			      DED_TAKEN,
			      DED_SUBSET_ID,
                              DED_TAKEN_GENL,           
                              DED_SUBSET_GENL,          
		              STATE,
			      LOCALITY,
			      PAY_FREQUENCY,
			      TAX_PERIODS,
			      TAX_METHOD,
			      ADDL_TAXES,
			      OVERRIDE_HOURLY_RT,
			      TL_SOURCE,
			      PAY_SHEET_SRC,
			      BUSINESS_UNIT,  		
			      EI_PRIOR_PD_CORR,
			      COMP_RATECD_REG,	
          		      COMP_RATECD_OT,		
			      COMPRATE_USED_REG,	
			      COMPRATE_USED_OT,
                              FICA_STATUS_EE,
                              PAID_PRDS_PER_YEAR,
                              FLSA_END_DT,
                              ORIG_PAYGROUP,
                              FLSA_STATUS,
                              XREF_NUM,
                              UNION_CD,		
                              BEN_DED_STATUS,      
                              GENL_DED_STATUS)     
VALUES                  (     $Company,
			      $paygroup,
			      $pay_End_dt,
			      'Y',
			      #page_num,
			      #line_num,
			      0,
			      0,
			      $emplid,
			      #Empl_Rcd,
			      #benefit_rcd_nbr,
                              $Pay_End_Dt,
                              $Pay_Begin_Dt,
			      'N',
			      'N',
			      'N',
			      'I',
			      'Y',
			      'N',
			      'N',
			      ' ',
			      $gl_pay_type,
			      $deptid,
			      $jobcode,
			      $position_nbr,
			      $shift,
			      0,
			      0,
			      0,
			      'H',
			      'N',
			      'REG',
			      'OTP',
			      0,
			      0,
			      0,
			      0,
			      0,
			      'REG',
			      0,
			      0,
			      0,
			      $DedTaken,
			      $DedSubsetId,
                              'D',              
                              ' ',              
			      $state,
			      $locality, 
			      'W',
			      1,
			      'A',
			      'N',
             		      'Y',
			      'G',
			      'S',
			      $bu_lkp, 		
			      'N',	
			      ' ',		
			      ' ',		
			      0,	! new fields in HRMS 8.3	
			      0,
                              'N',
                              0,
                              '',
                              $paygroup,
                              'X',
                              0,
                              ' ',		
                              'I',            
                              'I')            
end-sql
!************************************************************************
End-procedure  !P233-add-pay-earnings
!************************************************************************
!***************************************************************
begin-procedure P234-get-state-locality
!**************************************************************

! display 'P234-get-state-locality'

  move '**' to $State
  move ' ' to $Locality

begin-select
/*+ RULE */
TD.STATE
TD.LOCALITY
TD.DIST_PCT

  let $State = rtrim(&TD.State, ' ')

  if isnull(&TD.Locality) = 1
    let $Locality = '  '
  else
    let $Locality = &TD.Locality
  end-if
  exit-select

 FROM PS_TAX_DISTRIB TD
 where TD.EMPLID = $Emplid
  and TD.EMPL_RCD = #Empl_Rcd
  and TD.EFFDT =
	    (SELECT MAX(TD1.EFFDT)
	     from PS_TAX_DISTRIB TD1
	     where TD1.EMPLID = $emplid
	       and TD1.EMPL_RCD = #EMPL_RCD
	       and TD1.EFFDT <= $Pay_End_Dt)
end-select

  if $state = '**'
    show 'EE ' $emplid ' has no state in PS_TAX_DISTRIB'
  end-if
!************************************************************************
end-procedure  !P234-Get_State-Locality
!************************************************************************

!************************************************************************
Begin-Procedure P240-Print-Record
!************************************************************************
#debug9 Show 'P240-Print-Record'
  Print $company                 (+1,3)
  Print $paygroup                (+0,12) 
  Print &bpp.emplid              (+0,{#column3})      
  Print $name                    (+0,{#column4},50)
  Print &bpp.benefit_program     (+0,85)

  Add 1 To #BP-recs-printed
!************************************************************************
End-Procedure
!************************************************************************

!************************************************************************
Begin-Procedure P260-SQL-Error-Found($Proc_Name) 
!************************************************************************
#debug9 Show 'P260-SQL-Error-Found'
  Display 'SQL Error in ' 
  Display $Proc_Name 
  Display $_sql-error
  Display 'sql-status:' 
  Display #_sql-status 
  Do P270-BP-Emplid-in-Error
  STOP
!************************************************************************
End-Procedure
!************************************************************************

!************************************************************************
Begin-Procedure P270-BP-Emplid-in-Error
!************************************************************************
#debug9 Show 'P270-BP-Emplid-in-Error'
  Display ''
  Display 'Error occurred while processing BP (' Noline
  Display &bpp.benefit_program Noline
  Display '), emplid ' Noline
  Display &bpp.emplid
  Display ''
!************************************************************************
End-Procedure
!************************************************************************

!************************************************************************
Begin-Procedure P300-Finalization
!************************************************************************
#debug9 Show 'P300-Finalization'
  If #BP-recs-printed < 1
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  End-If

  Do Reset                   !reset.sqc
  Do Stdapi-Term             !stdapi.sqc
  Do Get-Current-DateTime    !curdttim.sqc

  Show ' '
  Show 'Program Ended:'
  Show '  Date = ' $ReportDate
  Show '  Time = ' $ReportTime
  Show ' '
  Show 'Successful end of program'
!************************************************************************
End-Procedure
!************************************************************************

#Include 'stdapi.sqc'    !Process Scheduler Interface
#Include 'reset.sqc'     !Reset Printer Procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Routines for date math
#Include 'gexxx911.sqc'  !Multiple Benefits Run Controls
#Include 'gexxx922.sqc'  !PAY AsOfDate Run Control
