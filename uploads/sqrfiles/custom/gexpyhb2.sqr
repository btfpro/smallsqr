!***********************************************************************
! GEXPYHB2: Update of GEX_HRS_BAL_DPT after the on-cycle confirm process   *
!  with addiotnal DEPITD added to GEX_HRS_BAL for reporting                *    
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!           RKK        03/02/2010     INITIAL CREATION                 * 
!Surya Sobha          11/10/2015     Case 01783927                     *
!                             Increased the array size from 300 to 400 *
!GEX_SEC_REENG 09/16/2016 Vahini Katta 
!Changes related to ssn conversion
!***********************************************************************

#include 'setenv.sqc' !Set environment
begin-setup

#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
   layout=DEFAULT
end-declare

end-setup

!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  !do Alter-Session   ! Set Session to RULE Optimizer
  use-report Report-log
  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXPYHBL' to $ReportID
  move 'Hours Balance tbl Update after On-cycle Payroll Confirmation' to $ReportTitle

  do Get-Current-DateTime
  do Report

  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report
  let #InputTran = 0
  let #j = 1
  display $AsOfToday

  !Surya Sobha 11/10/2015 Case 01783927 Increased the array size from 300 to 400
  !let #array_size = 300
  let #array_size = 400
 
  !CREATE-ARRAY name=BPinfo size=300
  CREATE-ARRAY name=BPinfo size=400
  !Surya Sobha 11/10/2015 Case 01783927 Increased the array size from 300 to 400
      field=BP:char
      field=EFFDT:char
      field=PLAN_TYPE:char
      field=OPTION_ID:char
      field=BENEFIT_PLAN:char
      field=DEDCD:char
      field=COST_ID:char
      field=RATE_TYPE:char
      field=RATE_TBL_ID:char
      field=ERNCD_SPCL:char
      field=GEX_RATE_AMT:number
      field=GEX_WEEK_HRS_CAP:number
      field=GEX_YEAR_HRS_CAP:number
  Do Get-Parms
  Do Get-Pay-End
  do load-array
  display 'Benefit Program Array Load - complete'
  do edit-pay-calendar
  
  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Transactions Processed: ' noline
  display &timeProcess

end-procedure

!**********************************************************************
! Get Run control parameters
!**********************************************************************
begin-procedure Get-parms

  If $prcs_process_instance = ''
    Do Get-SQRW-Run-Controls
  Else
    Do Get-Process-Scheduler-Run-Controls
  End-If

end-procedure
!**********************************************************************
! Get Parameters when running through SQRW
!**********************************************************************
Begin-Procedure Get-SQRW-Run-Controls

  While 1=1
    Input $Run_ID maxlen=7 type=char 'Enter the Pay Run ID'
    If $Run_ID <> ''
      Uppercase $Run_Id
      Show $Run_ID
      Break
    End-If
  End-While
End-Procedure

!**********************************************************************
! Get parameters when running through PeopleSoft Process Scheduler
!**********************************************************************
Begin-Procedure Get-Process-Scheduler-Run-Controls

  Do GEXXX922-Select-Parameters

  Let $Run_ID     = &GEX_RC_PAY.RUN_ID           

  If $Run_ID = ''
    Show 'Pay Run ID is required for this process'
    Stop
  End-If
  Show 'Pay Run ID         :  ' $Run_ID
End-Procedure
 
!************************************************************************
!*
!************************************************************************
begin-procedure Edit-Pay-Calendar

  move 'N' to $Found_cal
begin-select 
Y1.COMPANY
Y1.PAYGROUP
Y1.PAY_END_DT 
Y1.pay_begin_dt 
Y1.CHECK_DT

  move 'Y' to $Found_cal

  move &Y1.PAY_END_DT to $pay_end_dt
  move &Y1.PAY_BEGIN_DT TO $pay_begin_dt
  move &Y1.company to $company
  move &y1.paygroup to $paygroup
  move &Y1.check_dt to $cal_check_dt

  display 'Company / Paygroup : ' noline
  display $company noline
  display ' / ' noline
  display $paygroup
  display 'Pay End Date: ' noline
  display $pay_end_dt noline
  display ' Begin at: ' noline
  display $asofnow

  do process-employee-data

  FROM PS_PAY_CALENDAR  Y1
where Y1.PAY_SHEETS_RUN = 'Y'
  AND Y1.PAY_CONFIRM_RUN = 'Y'
  AND Y1.RUN_ID = $Run_Id
  AND Y1.PAY_END_DT = &Z1.PAY_END_DT
end-select

  if $Found_cal = 'N'
    display 'Error --  Pay Calendar not found or not setup for the Run ID.'
    move ' ' to $SlctCompany
  end-if

end-procedure


!*********************************************************************
!Gets the Pay End Date to process for
!*********************************************************************
begin-procedure Get-Pay-End

begin-select LOOPS=1
Z1.PAY_END_DT 

 display 'Pay End Date: ' noline
 display &Z1.PAY_END_DT

FROM PS_PAY_CALENDAR  Z1
where Z1.PAY_SHEETS_RUN = 'Y'
  AND Z1.PAY_CONFIRM_RUN = 'Y'
  AND Z1.RUN_ID = $Run_id
end-select
end-procedure

!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************
begin-heading 8 for-reports=(report-log)

 #Include 'stdhdg01.sqc'

  position (+1)
  print 'Report Log' () center bold

  position (+2)
  print 'Trans#' (,1) bold
  print 'Emplid' (,18) bold
  print 'Message' (,50) bold
  print '-' (+1,1,127) fill
 
end-heading


!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing

!************************************************************************
Begin-Procedure Load-Array

begin-select on-error=sql-error-found('Load-Benefit-Info')
AA1.BENEFIT_PROGRAM
AA1.EFFDT
AA3.OPTION_ID
AA3.BENEFIT_PLAN
AA3.PLAN_TYPE
AA3.DEDCD
AA4.COST_ID
AA4.RATE_TYPE
AA4.RATE_TBL_ID
AA5.ERNCD_SPCL
AA5.GEX_RATE_AMT
AA5.GEX_WEEK_HRS_CAP
AA5.GEX_YEAR_HRS_CAP
AA5.EFFDT

   move &AA1.BENEFIT_PROGRAM to $BP
   move &AA1.EFFDT to $effdt
   move &AA3.OPTION_ID to $option_id
   move &AA3.BENEFIT_PLAN to $benefit_plan
   move &AA3.PLAN_TYPE to $plan_type
   move &AA3.DEDCD to $dedcd
   move &AA4.COST_ID to $cost_id
   move &AA4.RATE_TYPE to $rate_type
   move &AA4.RATE_TBL_ID to $rate_id
   move &AA5.ERNCD_SPCL to $erncd_spcl
   move &AA5.GEX_RATE_AMT to #gex_rate_amt
   move &AA5.GEX_WEEK_HRS_CAP to #in_week_cap
   move &AA5.GEX_YEAR_HRS_CAP to #in_year_cap

 #debug8 display 'BP / EFFDT / OPTION_ID / BENEFIT_PLAN / PLAN_TYPE / DEDCD / COST_ID: ' noline
 #debug8 show $BP '/' $effdt '/' $option_id '/' $benefit_plan '/' $plan_type '/' $dedcd '/' $cost_id


 put $BP $effdt $option_id $benefit_plan $plan_type $dedcd $cost_id -
     $rate_type $rate_id $erncd_spcl #gex_rate_amt #in_week_cap #in_year_cap into BPinfo(#j)

 let #j = #j + 1
 
from PS_BEN_DEFN_PLAN  AA1,
     PS_BEN_DEFN_OPTN  AA3,
     PS_BEN_DEFN_COST  AA4,
     PS_GEX_FLAT_RATE  AA5
where AA1.EFFDT = (select max(BBB1.effdt) from ps_ben_defn_plan  BBB1
                        where BBB1.benefit_program = AA1.benefit_program and
                              BBB1.effdt <= &Z1.PAY_END_DT) and
      AA1.BENEFIT_PROGRAM = AA3.BENEFIT_PROGRAM and
      AA1.EFFDT = AA3.EFFDT and
      AA1.PLAN_TYPE = AA3.PLAN_TYPE and
      AA3.BENEFIT_PROGRAM = AA4.BENEFIT_PROGRAM and
      AA3.EFFDT = AA4.EFFDT and
      AA3.PLAN_TYPE = AA4.PLAN_TYPE and
      AA3.OPTION_ID = AA4.OPTION_ID and
      AA5.EFFDT = (select max(aaa5.effdt) from ps_gex_flat_rate  aaa5
                          where aaa5.RATE_TBL_ID = AA5.RATE_TBL_ID
                            and aaa5.sequence_number = AA5.SEQUENCE_NUMBER
                            and aaa5.effdt <= &Z1.PAY_END_DT) and
      AA4.RATE_TBL_ID = AA5.RATE_TBL_ID and 
      AA5.GEX_RATE_AMT <> 0 and
      AA4.RATE_TYPE = '2' 
end-SELECT
end-procedure
!************************************************************************
! Select EEs for Pay Period with Pay Lines that have been changed/created
!************************************************************************
Begin-Procedure Process-Employee-Data
#debug9 Show 'Process-Employee-Data'

move 'N' to $errorfound
move 'N' to $found
let $first = 'Y'
begin-SELECT on-error=sql-error-found('Process-Employee-Data')
P.COMPANY
P.PAYGROUP
P.PAY_END_DT
P.OFF_CYCLE
P.PAGE_NUM
P.LINE_NUM
D.SEPCHK
P.EMPL_RCD
P.EMPLID
D.PLAN_TYPE
D.BENEFIT_PLAN
D.DED_CLASS
D.DED_CUR
D.DEDCD

  let #contrib_hrs = 0
  #debug8 show &p.company '/' &p.paygroup '/' &p.pay_end_dt '/' &p.off_cycle '/' &p.page_num '/' &p.line_num '/' &d.sepchk '/' &p.emplid
  do Get-Benefit-Info     
        
 
from ps_pay_line  P,
     ps_pay_deduction  D
where P.COMPANY = $company
 and P.PAYGROUP = $paygroup
 and P.PAY_END_DT = $pay_end_dt 
 and P.OFF_CYCLE = 'N'
 and P.CONFIRMED = 'Y'
 and P.Company = D.Company
 and P.Paygroup = D.Paygroup
 and P.Pay_End_dt = D.Pay_End_dt
 and P.Off_cycle = D.Off_cycle
 and P.PAGE_NUM = D.PAGE_NUM
 and P.LINE_NUM = D.LINE_NUM
 and D.ded_class = 'N'

order by P.EMPLID, P.EMPL_RCD
end-SELECT

move #InputTran to #co_count
display #co_count 99999 noline
display ' Employees Processed'
display ' '
let #co_count = 0

end-procedure

!************************************************************************
!Retrieves active benefit plan/option/cost for options w/flat rate costs
!************************************************************************ 

begin-procedure Get-Benefit-Info
#debug9 Show 'Get-Benefit-Info'
#debug8 Show '&D.BENEFIT_PLAN: '&D.BENEFIT_PLAN
#debug8 Show '&D.PLAN_TYPE: '&D.PLAN_TYPE
#debug8 Show '&D.DEDCD: '&D.DEDCD

move 'N' to $errorfound
move 'N' to $plan_found

 add +1 to #InputTran
 #debug8 display '-- Process Employee : ' noline
 #debug8 display &P.emplid noline
 #debug8 display ' / ' noline
 #debug8 display &P.empl_rcd noline
 #debug8 display ' Start: ' noline
 date-time () hh:mi:ss &starttime
 #debug9 display  &starttime 

 let #i = 1
 while 1

  get $BP $effdt $option_id $benefit_plan $plan_type $dedcd $cost_id -
      $rate_type $rate_id $erncd_spcl #array_gex_rate_amt #array_week_cap -
      #array_year_cap from BPinfo(#i)

   if (&D.BENEFIT_PLAN = $benefit_plan) and (&D.PLAN_TYPE = $plan_type) and (&D.DEDCD = $dedcd)
      move 'Y' to $plan_found
      break 
   end-if

   let #i = #i + 1

    if #i = #array_size

      #debug8 display 'EE BP/Plan Type/Benefit Plan not defined as rate*hrs: ' noline
      #debug8 display $plan_type_comp noline
      #debug8 display '/' noline
      #debug8 display $ben_plan_comp
      move 'N' to $plan_found
      break
   end-if
 
 end-while

 if $plan_found = 'Y'
  #debug8 display 'Preparing Hours Balance update for: ' noline
  #debug8 display $benefit_plan noline
  #debug8 display ' / ' noline
  #debug8 display $plan_type
  do get-empl-pay-lines
  do Compare-Actual-Hrs
 end-if

out:

end-procedure
!********************************************************************

!********************************************************************
Begin-Procedure Get-Empl-Pay-lines
#debug9 Show 'Get-Empl-Pay-lines'

move 'N' to $found
let #actual_hrs = 0
let #actual_hrs_all = 0

  do Get-Spcl-Earns  

 #debug8 display 'Actual Hours before Leave: ' noline
 #debug8 display #actual_hrs_all
 if #actual_hrs_all = 0
    if $plan_type = '1X'
       do get-empl-status
       #debug8 display $plan_type
       #debug8 display $full_part_tim
       if $empl_status = 'P'
          if $full_part_time = 'F'
              move 40 to #actual_hrs
              move 40 to #actual_hrs_all
          else
              move 28 to #actual_hrs
              move 28 to #actual_hrs_all
          end-if
       end-if
   end-if

      
 move #actual_hrs to $actual_hrs
 move #actual_hrs_all to $actual_hrs_all
 #debug8 display 'Total Hrs - Vac : ' noline
 #debug8 display $actual_hrs
 #debug8 display 'Total Hrs : ' noline
 #debug8 display $actual_hrs_all

end-if

end-procedure


!*********************************************************************
!Retrieves the weekly earnings of special accumulator ERNCDs for     *
!the employee - all paylines                                         *
!*********************************************************************

begin-procedure Get-Spcl-Earns
#debug9 Show 'Get-Spcl-Earns'
#debug8 Show '&P.EMPLID: '&P.EMPLID
#debug8 Show '&P.EMPL_RCD: '&P.EMPL_RCD
#debug8 Show '$Company: '$Company
#debug8 Show '$Paygroup: '$Paygroup
#debug8 Show '$Pay_end_dt: '$Pay_end_dt

begin-SELECT
O.ERNCD
O.OTH_HRS

!
! filter out vacation earnings
!
  move 'Y' to $found

  if (&o.erncd <> '513' and
      &o.erncd <> '515' and
      &o.erncd <> '519' and
      &o.erncd <> '522' and
      &o.erncd <> '523')
     let #actual_hrs = &o.oth_hrs + #actual_hrs
  end-if

  !Accummulate all hours and classify as #ACTUAL_HRS_ALL
  let #actual_hrs_all = &o.oth_hrs + #actual_hrs_all

from ps_earnings_spcl  S,
     ps_pay_oth_earns  O,
     ps_pay_earnings  P1
where P1.EMPLID    = &P.EMPLID
and P1.EMPL_RCD = &P.EMPL_RCD
and P1.COMPANY = $Company
and P1.PAYGROUP = $Paygroup
and P1.PAY_END_DT = $Pay_end_dt
and P1.OFF_CYCLE = 'N'
and P1.COMPANY = O.COMPANY
and P1.PAYGROUP = O.PAYGROUP
and P1.PAY_END_DT = O.PAY_END_DT
and P1.OFF_CYCLE = O.OFF_CYCLE
and P1.PAGE_NUM = O.PAGE_NUM
and P1.LINE_NUM = O.LINE_NUM
and P1.ADDL_NBR = O.ADDL_NBR
and P1.OK_TO_PAY = 'Y'
and O.OTH_HRS > 0
and O.ERNCD = S.ERNCD 
and S.ERNCD_SPCL = $erncd_spcl
and S.SPCL_EFFECT = 'A'
and S.EFFDT = (select max(ss.effdt) from ps_earnings_spcl  ss
                               where ss.erncd_spcl = s.erncd_spcl
                               and ss.erncd = s.erncd
                               and ss.spcl_effect = S.spcl_effect
                               and ss.effdt <= &P.PAY_END_DT)
end-SELECT
end-procedure


!*********************************************************************
!Retrieves Empl status and full part time from PS_JOB
!*********************************************************************

Begin-Procedure get-empl-status
#debug9 Show 'get-empl-status'

move ' ' to $empl_status
move ' ' to $full_part_time

Begin-Select 
x1.empl_status
x1.full_part_time

   move &x1.empl_status to $empl_status
   move &x1.full_part_time to $full_part_time

from ps_job  x1
where x1.emplid = &P.EMPLID
  and x1.empl_rcd = &P.EMPL_RCD
  and x1.effdt = (select max(effdt)
                    from ps_job 
                   where emplid = &P.EMPLID
                     and empl_Rcd = &P.EMPL_RCD
                     and effdt <= &P.PAY_END_DT)
  and x1.effseq = (select max(effseq)
                     from ps_job 
                    where emplid = &P.EMPLID
                      and empl_Rcd = &P.EMPL_RCD
                      and effdt = x1.effdt)
end-select

end-procedure

!*********************************************************************
!Compare actual hrs with the defined hrs caps
!*********************************************************************

begin-procedure Compare-Actual-Hrs
#debug9 Show 'Compare-Actual-Hrs'

!*********************************************************************
!  Weekly cap should compare to all hrs from spcl accum minus any vacation.
!  Yearly cap should compare to all hrs from spcl accum.
!  Contribution amt (insert into pay_one_time) should include all hours from 
!  the spcl accum unless capped by weekly or yearly cap
!
! NOTE: 
! #actual_hrs - accumulator of all earnigs minus vacation '513' or '515'
! #actual_hrs_all - accumulator of ALL earnings
!
!*********************************************************************
move 0 to #week_cap
move 0 to #year_cap

move 'N' to $weekly_capped
 if #array_week_cap <> 0  
   move #array_week_cap to #week_cap
   if #week_cap >= #actual_hrs   ! Cap the (weekly hours - Vacation earns)
      let #update_hrs = #actual_hrs_all
                        ! if not capped weekly - use all hours
   else
      let #update_hrs = #week_cap + (#actual_hrs_all - #actual_hrs)
                        ! if weekly capped - use cap amt + vacation earns
      move 'Y' to $weekly_capped
   end-if

   if #array_year_cap <> 0  
      move #array_year_cap to #year_cap
      do Get-Year-Balance
      if (#ytd_hrs + #actual_hrs_all) > #year_cap
                          ! Yearly cap of all earnings including vacation earns
         let #update_hrs = #year_cap - #ytd_hrs
       else
         if $weekly_capped = 'N'
             let #update_hrs = #actual_hrs_all
                          ! If no yearly cap, update with all hours
         end-if 
      end-if
   end-if
else
   let #update_hrs = #actual_hrs_all   !no capping found - update with all earns
end-if
 
  do prepare-hrs-bal-dpt

end-procedure    

!*********************************************************************
! Retrieve YTD hrs for EMPLID, PLAN_TYPE and BENEFIT_PLAN 
!*********************************************************************

begin-procedure Get-Year-Balance
#debug9 Show 'Get-Year-Balance'

 Let #ytd_hrs = 0
 do Convert-to-DTU-date($cal_check_dt,$check_dt_DTU)
 let $chk_year = substr($check_dt_DTU,1,4)
begin-SELECT
sum(h.total_hrs) &tot
  
  let  #ytd_hrs =  &tot
  #debug9 display 'Year Balance Total = ' noline
  #debug9 display &tot

from sysadm.ps_gex_hrs_bal_dpt h

where h.company = &p.company
  and h.paygroup = &p.paygroup
  and &p.emplid = h.emplid
  and &P.empl_rcd = h.empl_rcd
  and  h.plan_type = $PLAN_TYPE
  and  h.benefit_plan = $BENEFIT_PLAN
  and  TO_CHAR(h.check_dt,'YYYY') = $chk_year
  and h.check_dt <= $cal_check_dt
end-SELECT	
end-procedure

!*********************************************************************
! Prepare to Insert into GEX_HRS_BAL_DPT table
!*********************************************************************

begin-procedure prepare-hrs-bal-dpt
  #debug9 display 'Prepare Hrs Bal Dpt'
  #debug9 display 'Update hrs: ' noline
  #debug9 display #update_hrs
  #debug9 display 'Actual Hrs: ' noline
  #debug9 display #actual_hrs
  let #update_hrs_abs = abs(#update_hrs)
  let #actual_hrs_abs = abs(#actual_hrs)	!AXL 2/2/2004 new

   if #update_hrs_abs > #actual_hrs_abs
      if $weekly_capped = 'N'
         if #update_hrs < 0
            let #vacn_hours = #actual_hrs - #update_hrs
         else
            let #vacn_hours = #update_hrs - #actual_hrs
         end-if      
      else
         if #update_hrs < 0
            let #vacn_hours = #update_hrs + #week_cap
         else
            let #vacn_hours = #update_hrs - #week_cap
         end-if
      end-if
   else
       let #vacn_hours = #actual_hrs_all - #actual_hrs  
   end-if


   if #update_hrs = 0
      let #vacn_hours = 0
   end-if 

   do Get-Deptid-by-Date
   do insert-hrs-bal-dpt
   
end-procedure

!*********************************************************************
Begin-Procedure Get-Deptid-by-Date
!*********************************************************************
#debug9 Show 'Get-Deptid-by-Date'
#debug8 Show 'EMPLID: '&P.EMPLID
#debug8 Show 'EMPL_RCD: '&P.EMPL_RCD
#debug8 Show 'EFFDT: '&P.PAY_END_DT

Begin-Select
JOB.EFFDT
JOB.DEPTID

FROM   PS_JOB JOB
WHERE  JOB.EMPLID     = &P.EMPLID
AND    JOB.EMPL_RCD  = &P.EMPL_RCD
AND    JOB.EFFDT  =
      (Select Max(job1.effdt)
       From   ps_job job1
       Where  job1.emplid             = &P.EMPLID
       And    job1.empl_rcd          = &P.EMPL_RCD
       And    job1.effdt             <= &P.PAY_END_DT)
And    JOB.effseq                  =
      (Select Max(job2.effseq)
       From   ps_job job2
       Where  job2.emplid             = &P.EMPLID
       And    job2.empl_rcd          = &P.EMPL_RCD
       And    job2.effdt              = job.effdt)

End-Select

End-Procedure

!*********************************************************************
!Inserts a row into the GEX_HRS_BAL_DPT table for EE
!*********************************************************************
begin-procedure insert-hrs-bal-dpt
#debug9 Show 'insert-hrs-bal-dpt'

begin-sql on-error=sql-error-found('insert-hrs-bal-dpt-row')
insert into sysadm.PS_GEX_HRS_BAL_DPT
(COMPANY,
PAYGROUP,
DEPTID,
PAY_END_DT,
OFF_CYCLE,
PAGE_NUM,
LINE_NUM,
ADDL_NBR,
SEPCHK,
EMPLID,
EMPL_RCD,
REQUEST_DT,
CHECK_DT,
PLAN_TYPE,
BENEFIT_PLAN,
TOTAL_HRS,     ! TOTAL HOURS are capped weekly/yearly + vacation
               ! CONTRIBUTION calculated using TOTAL HOURS
VACN_HOURS)    ! VACATION HOURS are ONLY vacation (capped w/yearly cap if applicable)
VALUES
(&P.COMPANY,
&P.PAYGROUP,
&JOB.DEPTID,
&P.PAY_END_DT,
&P.OFF_CYCLE,
&P.PAGE_NUM,
&P.LINE_NUM,
0,
&D.SEPCHK,
&P.EMPLID,
&P.EMPL_RCD,
$cal_check_dt,    !Request Dt and Check Dt will be equal for on-cycle 
$cal_check_dt,
$PLAN_TYPE,
$BENEFIT_PLAN,
#update_hrs,
#vacn_hours)
end-sql

#debug8 display 'insert hrs bal done'
#debug8 display $_sql-error 
#debug8 display #sql-count
#debug8 display 'sql-status: ' noline
#debug8 display #_sql-status 

end-procedure


!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************

begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found

  #debug9 display 'SQL Error in ' noline
  #debug9 display $Proc_Name noline
  #debug9 display $_sql-error noline
  #debug9 display 'sql-status: ' noline
  #debug9 display #_sql-status 

  print 'SQL Error in ' (,34)
  print $Proc_Name ()  
  print $_sql-error () 
  print 'sql-status:' ()
  print #_sql-status () edit 99999 
  stop

end-procedure

!*********************************************************************
!This procedure displays the error message for the records that are in
!progress
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  use-report report-log
  do Format-Number(#InputTran, $out, '99999')
  print $out (+1,1)
  !GEX_SEC_REENG Vahini Katta Begins
  !let $EmplId_1st3 = substr($EmplId,1,3)
  !let $EmplId_mid2 = substr($EmplId,4,2)
  !let $EmplId_last4 = substr($EmplId,6,4)
 
  !String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  !print $EmplID11 (,16)
  print $EmplId   (,16)
  !GEX_SEC_REENG Vahini Katta Ends
end-procedure

!**********************************************************************
#include 'gexaltse.sqc'  ! Alter session SQC
#include 'gexxx922.sqc'  ! Process Scheduler run control procedure
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date Arithmetic functions
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'payinit.sqc'   !Pay init
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
