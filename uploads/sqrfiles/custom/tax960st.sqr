!***********************************************************************
!  TAX960ST: Create EF W-2 Reports for Selected States                 *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  06/21/2010 RSI-HCM101507  v1.0                                      *
!  Descr: Create new EF W-2 Reporting Program                          *
!                                                                      *
!  10/21/2010 RSI-HCM101705  v2.0                                      *
!  Descr: 2010 state annual reporting requirements updates, fixes,     *
!         and enhancements.                                            *
!                                                                      *
!  12/08/2010 RSI-HCM101879  v2.1                                      *
!  Descr: Renamed rsiw2_st.sqc to rsiw2st.sqc due to file naming       *
!         restrictions on certain platforms.                           *
!                                                                      *
!  12/16/2010 RSI-HCM101916  v2.2                                      *
!  Descr: Modified code to remove hyphens from State EINs.             *
!                                                                      *
!  02/14/2011 RSI-HCM102059  v3.0                                      *
!  Descr: Combined TAX962ST reporting functionality into this program. *
!         Replaced and/or removed deprecated code.                     *
!         Corrections to variables, syntax, and code as necessary.     *
!         Modified Reporting Medium functionality commensurate with    *
!         run control page changes.                                    *
!         Corrected Common Paymaster functionality.                    *
!         State W-2 TAX960ST changes for multiple states.              *
!                                                                      *
!  12/07/2011 RSI-HCM102478  v3.1                                      *
!  Descr: 2011 state annual reporting requirements updates, fixes,     *
!         and enhancements.                                            *
!                                                                      *
!  01/20/2012 RSI-HCM102299  v4.0                                      *
!  Descr: Enhanced to include 7.x support for the TAX960ST.SQR         *
!         program. Added LAST_ORACLE_UPDATE substitution variable      *
!         to provide dynamic support by last Oracle tax update         *
!         applied by the client. Updated file handling procedures.     *
!         Modified to support Employer Kind and Type of Employment     *
!         reporting requirements. Misc. updates to remove unnecessary  *
!         procedures, correct variable and procedure names, trim       *
!         trailing spaces, etc.                                        *
!                                                                      *
!  07/16/2012 RSI-HCM102863  v4.1                                      *
!  Descr: Update to set the Error Log file path in the Initialization  *
!         Procedure. Also, corrected ER Kind Field Name.               *
!                                                                      *
!  12/07/2012 RSI-HCM103042  v4.2                                      *
!  Descr: 2012 state annual reporting requirements updates, fixes,     *
!         and enhancements.   Added .txt to Utah file extension.       *
!         Removed obsolete logic related to file name and location.    *
!                                                                      *
!  01/22/2013 RSI-HCM103228  v4.3                                      *
!  Descr: 2012 Electronic Filing Specifications for West Virginia      *
!         and Kentucky.                                                *
!         Added Employer Healthcare Coverage Amount for Reporting      *
!         on RW and RT Records.                                        *
!         Added Program Version for RSI Modification History.          *
!                                                                      *
!  02/11/2013 RSI-HCM103305  v4.4                                      *
!  Descr: 2012 Electronic Filing Specification changes for Colorado,   *
!         Indiana, Maine, Mississippi, and New Mexico.                 *
!         Misc. updates to remove unnecessary code, correct variable   *
!         names, trim trailing spaces, etc. as needed.                 *
!                                                                      *
!  08/22/2013 RSI-HCM103548  v5.0                                      *
!  Descr: 2013 W-2 Electronic Filing specifiation changes.             *
!         Added Email Validation procedure.                            *
!         Added Employer Contact Name, Contact Phone, Extension, Fax   *
!         and Contact Email address print to RE Record                 *
!                                                                      *
!  10/15/2013 RSI-HCM103695  v6.0                                      *
!  Descr: 2013 Electronic Filing Specification changes for NJ          *
!                                                                      *
!  12/06/2013 RSI-HCM103765  v7.0                                      *
!  Descr: 2013 W-2 Electronic Filing specifiation changes.             *
!         Validate Employer Contact Name, Contact Phone, Extension,    *
!         Fax and Contact Email Address.                               *
!         Added Employer Contact Name, Contact Phone, Extension, Fax   *
!         and Contact Email Address to RE Record for Maryland.         *
!         Removed Employment Code in RE Record for Maryland.           *
!                                                                      *
!  02/26/2014 RSI-HCM103955  v8.0                                      *
!  Descr: Corrected EIN validation for AL and MS.                      *
!                                                                      *
!  04/01/2014 RSI-HCM103910  v9.1                                      *
!  Descr: Removed validation of all State EINs.                        *
!                                                                      *
!  08/25/2015 RSI-HCM104869  v10.0                                     *
!  Descr: Add code to limit Pennsylvania file size to 6800 lines.      *
!                                                                      *
!  01/25/2016 RSI-HCM105541  v11.0                                     *
!  Descr: Add code to fix RT record totals for Pennsylvania            *
!                                                                      *
!  01/30/2017 Ujwal Dyasani                                            *
!  Descr: format in function: Format-DateTime has been updated from    *
!		  DEFYMD to DEFCMP                                             *
!***********************************************************************

#include 'setenv.sqc'   !Set Environment
#include 'rsicdver.sqc' !Client Specific PeopleSoft Application Information
#include 'setup32.sqc'  !Printer and Page-Size Initialization

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program

  #Define Prgm_Ver '11.0'   !Corresponds to RSI Modification History above.
  Show ''
  Show 'TAX960ST.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
  Show 'Creating EF W-2 File for Selected States'

  let $t1 = datenow()
  Show 'Report Started at : ' $t1

  do Init-Report            ! Initialization
  do Get-State-Parameters   ! Begin Processing by State

  If $Errors_Found = 'Y'
     do Error-Log
     STOP quiet
  Else
     do Stdapi-Term         ! End of Job Processing
  End-If

  Show ''
  let $t2 = datenow()
  Show 'Report Ended at : ' $t2
End-Program

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls
  do Initialization

  If $Prcs_Process_Instance = ''
     Show 'Report cannot be run outside of PeopleSoft. Please use Process Scheduler.'
     STOP
  End-If

End-Procedure Init-Report

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization
 
  let $Errors_Found   = 'N'
  let #Max_Errors     = 50
  let $Show_FirstTime = 'Y'
  let #RecordLength   = 512
  let #MaxLines       = 6800
  let $Array_Create   = 'N'
  let $Print_Detail   = 'N'
  let $ReportID       = 'TAX960ST'
  let $Fill           = ''
  let $Zero1 = '0'
  let $Zero2 = rpad('',2,'0')
  let $Zero3 = rpad('',3,'0')
  let $Zero4 = rpad('',4,'0')
  let $Zero5 = rpad('',5,'0')
  let $Zero6 = rpad('',6,'0')
  let $Zero7 = rpad('',7,'0')
  let $Zero8 = rpad('',8,'0')
  let $Zero9 = rpad('',9,'0')
  let $Zero10 = rpad('',10,'0')
  let $Zero11 = rpad('',11,'0')
  let $Zero12 = rpad('',12,'0')
  let $Zero15 = rpad('',15,'0')
  let $Zero22 = rpad('',22,'0')
  let $Zero23 = rpad('',23,'0')
  let $Zero55 = rpad('',55,'0')
  let $Sp0 = ''
  let $Sp1 = ' '
  let $Sp2 = rpad('',2,' ')
  let $Sp3 = rpad('',3,' ')
  let $Sp4 = rpad('',4,' ')
  let $Sp4a = rpad('',4,' ')
  let $Sp4b = rpad('',4,' ')
  let $Sp5 = rpad('',5,' ')
  let $Sp6 = rpad('',6,' ')
  let $Sp7 = rpad('',7,' ')
  let $Sp8 = rpad('',8,' ')
  let $Sp9 = rpad('',9,' ')
  let $Sp10 = rpad('',10,' ')
  let $Sp11 = rpad('',11,' ')
  let $Sp12 = rpad('',12,' ')
  let $Sp14 = rpad('',14,' ')
  let $Sp15 = rpad('',15,' ')
  let $Sp16 = rpad('',16,' ')
  let $Sp17 = rpad('',17,' ')
  let $Sp19 = rpad('',19,' ')
  let $Sp20 = rpad('',20,' ')
  let $Sp22 = rpad('',22,' ')
  let $Sp23 = rpad('',23,' ')
  let $Sp25 = rpad('',25,' ')
  let $Sp30 = rpad('',30,' ')
  let $Sp32 = rpad('',32,' ')
  let $Sp40 = rpad('',40,' ')
  let $Sp44 = rpad('',44,' ')
  let $Sp45 = rpad('',45,' ')
  let $Sp47 = rpad('',47,' ')
  let $Sp49 = rpad('',49,' ')
  let $Sp53 = rpad('',53,' ')
  let $Sp70 = rpad('',70,' ')
  let $Sp71 = rpad('',71,' ')
  let $Sp113 = rpad('',113,' ')
  let $Sp116 = rpad('',116,' ')
  let $Sp120 = rpad('',120,' ')
  let $Sp124 = rpad('',124,' ')
  let $Sp127 = rpad('',127,' ')
  let $Sp128 = rpad('',128,' ')
  let $Sp134 = rpad('',134,' ')
  let $Sp153 = rpad('',153,' ')
  let $Sp166 = rpad('',166,' ')
  let $Sp169 = rpad('',169,' ')
  let $Sp175 = rpad('',175,' ')
  let $Sp178 = rpad('',178,' ')
  let $Sp194 = rpad('',194,' ')
  let $Sp205 = rpad('',205,' ')
  let $Sp215 = rpad('',215,' ')
  let $Sp225 = rpad('',225,' ')
  let $Sp267 = rpad('',267,' ')
  let $Sp283 = rpad('',283,' ')
  let $Sp291 = rpad('',291,' ')
  let $Sp293 = rpad('',293,' ')
  let $Sp335 = rpad('',335,' ')
  let $Sp456 = rpad('',456,' ')
  let $Sp469 = rpad('',469,' ')
  let $Sp473 = rpad('',473,' ')
  let $Sp491 = rpad('',491,' ')
  let $Sp496 = rpad('',496,' ')

  do Get-Current-DateTime
  do Get-Output-File-Info
  move '1' to $MMLZero
	!Commented by Ujwal Dyasani 30-Jan-2017 - Begin
		!  do Format-DateTime($AsOfToday, $960Date, {DEFYMD},'','')
	!Commented by Ujwal Dyasani 30-Jan-2017 - End
	!Added by Ujwal Dyasani 30-Jan-2017 - Begin
	do Format-DateTime($AsOfToday, $960Date, {DEFCMP},'','')
	!Added by Ujwal Dyasani 30-Jan-2017 - End



  move $960Date  to $AsOfYear xxxx
  move $AsOfYear to #AsOfYear
  move #AsOfYear to $SaveAsOfYear 9999
  subtract 1 from #AsOfYear
  

  If &TX.BALANCE_YEAR <> #AsOfYear
     Show ''
     Show 'Please note: Current Year is not one greater than Tax Reporting Year.'
     Show 'Tax Reporting Year is ' &TX.BALANCE_YEAR
     Show 'Current Year is ' $SaveAsOfYear
     Show ''
  End-If

  move &TX.COMPANY to $Company_Data
  move &TX.BALANCE_YEAR to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  show '$AsOfDate:' $AsOfDate
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  let $EffDate = $CalYear || '1231'
  show '$EffDate:' $EffDate
  do Format-DateTime($EffDate, $EffDate, {DEFCMP}, '', 'native')
  do Validate-W2-Co
  do Get-Transmitter-Data
  do Assign-Year-End-Variables

Begin-Select
TEMP_SSN_MASK

FROM PS_INSTALLATION
End-Select
 show 'end proc initialization'
End-Procedure Initialization

!***********************************************************************
! Procedure Validate-W2-Co
!***********************************************************************
Begin-Procedure Validate-W2-Co

  let $XmitterFound = 'N'

Begin-Select
X.DESCR
X.FEDERAL_EIN
X.ADDRESS1
X.ADDRESS2
X.CITY
X.STATE
X.POSTAL
X.COUNTRY

  let $XmitterFound = 'Y'
  show '$Company_Data:' $Company_Data
  show '&TX.BALANCE_YEAR :' &TX.BALANCE_YEAR
FROM PS_W2_COMPANY X
WHERE X.COMPANY       = $Company_Data
  AND X.CALENDAR_YEAR = &TX.BALANCE_YEAR
End-Select
  show '$XmitterFound:' $XmitterFound
  If $XmitterFound = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg1 = 'W2 COMPANY DATA NOT SETUP FOR COMPANY: ' || $Company_Data ||
                     '  BALANCE YEAR: ' || $CalYear
     show '$Err_Msg1:' $Err_Msg1
     show '$Prev_Err_Msg1:' $Prev_Err_Msg1
     If $Err_Msg1 <> $Prev_Err_Msg1
        let $Err_Msg = $Err_Msg1
        do Open-ErrorFile
        let $Prev_Err_Msg1 = $Err_Msg1
     End-If
  End-If

End-Procedure Validate-W2-Co

!***********************************************************************
! Procedure Get-Transmitter-Data
!***********************************************************************
Begin-Procedure Get-Transmitter-Data

Begin-Select
RC.EMPLR_PIN
RC.RESUB_INDICATOR
RC.RESUB_TLCN
RC.CONTACT_NAME_SSA
RC.TELEPHONE_NBR
RC.PHONE_EXTN
RC.EMAIL_ADDR_MMREF
RC.CONTACT_FAX
RC.NOTIFY_METHOD

FROM PS_TAX960_PARM RC
End-Select

  If rtrim(&RC.CONTACT_NAME_SSA, ' ') = ''
     let $Errors_Found = 'Y'
     let $Err_Msg2 = 'EF Parameters must be set up on SETUP Menu. Please try ' ||
                     'again after setting up EF Parameters.'

     If $Err_Msg2 <> $Prev_Err_Msg2
        let $Err_Msg = $Err_Msg2
        do Open-ErrorFile
        let $Prev_Err_Msg2 = $Err_Msg2
     End-If
  End-If

  let $Telephone_Nbr = translate(&RC.TELEPHONE_NBR,' ()_-.,\/', '')
  let $Phone         = translate($Telephone_Nbr,'0123456789', '')
  let $Contact_Fax   = translate(&RC.CONTACT_FAX,' ()_-.,\/', '')

  If $Contact_Fax <> ''
     let $Fax = translate($Contact_Fax,'0123456789','')
  End-If

  If $Phone <> '' or $Fax <> ''
     If $Phone <> ''
        let $Errors_Found = 'Y'
        let $Err_Msg18 = 'ERROR: The Contact Phone Number does not meet the required format. '  ||
                         'Please validate the Employer Contact Telephone Number contains numeric values only. '
        If $Err_Msg18 <> $Prev_Err_Msg18
           let $Err_Msg = $Err_Msg18
           do Open-ErrorFile
           let $Prev_Err_Msg18 = $Err_Msg18
        End-If
     End-If
     If $Fax <> ''
        let $Errors_Found = 'Y'
        let $Err_Msg19 = 'ERROR: Fax Number does not meet the required format. '  ||
                         'Please validate Fax Number contains numeric values only. '
        If $Err_Msg19 <> $Prev_Err_Msg19
           let $Err_Msg = $Err_Msg19
           do Open-ErrorFile
           let $Prev_Err_Msg19 = $Err_Msg19
        End-If
     End-If
  End-If

  move &RC.NOTIFY_METHOD    to $Notify_Method
  move &RC.EMAIL_ADDR_MMREF to $Email_Addr
  let $Valid_Email = 'Y'
  do Validate-Email-Address($Email_Addr,$Valid_Email)

  If $Valid_Email = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg7 =  'ERROR: The Contact Email Address is blank or does not meet the required format. ' ||
                      'Please review the Contact Email Address format to ensure compliance with the ' ||
                      'required Social Security Administration Email Address specifications. '

     If $Err_Msg7 <> $Prev_Err_Msg7
        let $Err_Msg = $Err_Msg7
        do Open-ErrorFile
        let $Prev_Err_Msg7 = $Err_Msg7
     End-If
  End-If

  let $Contact_Name_SSA = translate(&RC.CONTACT_NAME_SSA,',','')

End-Procedure Get-Transmitter-Data

!***********************************************************************
! Procedure Get-State-Parameters
!***********************************************************************
Begin-Procedure Get-State-Parameters

  move $Sp1 to $W2_State

Begin-Select
F.STATE

F.RSI_TEST_FILE
F.RSI_COMBINE_CO
F.RSI_DISKETTE
F.DISKETTE_TYPE
F.REPORT_YN

  let $W2_State       = rtrim(&F.STATE,' ')
  let $RSI_Combine_Co = &F.RSI_COMBINE_CO
  let $FileType       = &F.RSI_DISKETTE
  let $Print_Detail   = &F.REPORT_YN
  let $Test_File      = &F.RSI_TEST_FILE
  show '$W2_State :' $W2_State
  show '$FileType :' $FileType
  show '$Print_Detail:' $Print_Detail
  show '$Test_File   :' $Test_File
  if $FileType = 'Y'
     let $FileType = 'D'
     let $DisketteType = &F.DISKETTE_TYPE
     do Calculate-Diskette-Capacity
  else
     let $FileType = ' '
  end-if

  Evaluate $W2_State
    When = 'NJ'
      do NJ-Specific('Get-State-Parameters')
      Break
    When-Other
      let $Prod_Test_File  = ''
      let $File_Type_Title = ''
      Break
  End-Evaluate

  #IfDef TAXTEST
     move 5 to #MaxRecordsPerDiskette
  #EndIf

  do Populate-Headings
  show '$RSI_Combine_Co:' $RSI_Combine_Co
  If $RSI_Combine_Co = 'Y'
     let $ReportID2 = 'TAX960' || $W2_State
     do Get-Output-File-Info
     show 'File-Create'
     do File-Create
  End-If
  show 'Process-State-EE-Data'
  do Process-State-EE-Data  !Main Data Processing

  If $RSI_Combine_Co = 'Y'
     do After-State
  End-If

FROM PS_RC_TAX960ST_RSI F
WHERE F.OPRID       = $Prcs_OprID
  AND F.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY F.STATE
End-Select

End-Procedure Get-State-Parameters

!***********************************************************************
! Procedure Populate-Headings
!***********************************************************************
Begin-Procedure Populate-Headings

  let $ReportID  = 'TAX960ST'
  let $Program   = 'ST'

  do Get-ee-State-Code

  move &S.NUMERIC_CD to $StateNumCd
  move &S.NUMERIC_CD to $StateNumCdA
  let  $StateName     = rtrim(&S.DESCR, ' ')
  let  $StateDescr    = rtrim(&S.DESCR, ' ')

  If $Print_Detail = 'Y'
     let $ReportTitle = $StateDescr || ' W-2 ' || $File_Type_Title || 'File Detail Report'
  Else
     let $ReportTitle = $StateDescr || ' W-2 ' || $File_Type_Title || 'File Summary Report'
  End-If
End-Procedure Populate-Headings

!***********************************************************************
! Procedure Get-Output-File-Info
!***********************************************************************
Begin-Procedure Get-Output-File-Info

  #IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
     let $FileOutputPath = '{IMPORTPREFIX}'
     let $FileExt        = '{IMPORTSUFFIX}'
  #Else                  ! 8.2 and 7.5 Tools Support
     let $FileOutputPath = '{FILEPREFIX}'
     let $FileExt        = '{FILESUFFIX}'
  #EndIf

  let #PathLength = length($FileOutputPath)
  let $End_Char   = substr($FileOutputPath, #PathLength, 1)

  #IfDef NT
    If $End_Char <> '\'
       let $FolderSep = '\'
    Else
       let $FolderSep = ''
    End-If
  #EndIf

  #IfDef UNIX
    If $End_Char <> '/'
       let $FolderSep = '/'
    Else
       let $FolderSep = ''
    End-If
  #EndIf

  let $FileOutputPath = $FileOutputPath || $FolderSep
  let $FileID         = $FileOutputPath || $ReportID2 || $FileExt
  let $ErrorFileID    = $FileOutputPath || $ReportID  || '_' || $Prcs_Process_Instance || '.err'
  
  show '$FileOutputPath :' $FileOutputPath
  show '$FileID         :' $FileID
  show '$ReportID2      :' $ReportID2
  show '$FileExt        :' $FileExt
  show '$ErrorFileID    :' $ErrorFileID
End-Procedure Get-Output-File-Info

!***********************************************************************
! Procedure Get-ee-State-Code
!***********************************************************************
Begin-Procedure Get-ee-State-Code

  let #error_count  = 0
  let $Record_found = 'N'

Begin-Select
S.NUMERIC_CD
S.DESCR

  let $Record_found = 'Y'

FROM PS_STATE_NAMES_TBL S
WHERE S.STATE   = $W2_State
  AND S.COUNTRY = 'USA'
End-Select

  If $Record_found = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg3 = 'State code State: ' || $W2_State || ', Country: ' ||
                     $Country || ' doesn''t exist in State Names table.'

     If $Err_Msg3 <> $Prev_Err_Msg3
        let $Err_Msg = $Err_Msg3
        do Open-ErrorFile
        let $Prev_Err_Msg3 = $Err_Msg3
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

End-Procedure Get-ee-State-Code

!***********************************************************************
! Procedure File-Create
!***********************************************************************
Begin-Procedure File-Create
  show 'File create'
  do Close-stFile
  do Open-stFile
  do Write-Transmitter-Records

End-Procedure File-Create

!***********************************************************************
! Procedure Close-stFile
!***********************************************************************
Begin-Procedure Close-stFile
  show '#FileExtension:' #FileExtension
  If #FileExtension <> 0
     close 10
     move 0 to #FileExtension
  End-If
  show 'End close file'
End-Procedure Close-stFile

!***********************************************************************
! Procedure Open-stFile
!***********************************************************************
Begin-Procedure Open-stFile
 show 'start proc open-stfile'
 show '$FileType:' $FileType
  If $FileType = 'D'
     move 0 to #RecordCount

     If #FileExtension <> 0
        close 10
     End-If

     add 1 to #FileExtension
     move #FileExtension to $FileExtension 099

     #IfDef OS400
        let $FileExtension = '(D' || $FileExtension || ')'
        let $FileID = $FileID ||  '.' || $FileExtension
     #Else
        let $FileID = $FileID ||  '.' || $FileExtension
     #EndIf
  Else
     add 1 to #FileExtension
  End-If

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('Open-stFile')
      Break
    When = 'ME'
      do ME-Specific('Open-stFile')
      Break
    When = 'MS'
      do MS-Specific('Open-stFile')
      Break
    When = 'OR'
      do OR-Specific('Open-stFile')
      Break
    When = 'PA'
      show 'PA-Specific'
      do PA-Specific('Open-stFile')
      show 'open st file'
      If $Array_Create ='N'
         show 'Array Create'
         do PA-Specific('Create-FileNames-Array')
         let $Array_Create ='Y'
      End-if
      show 'break'
      Break
    When = 'UT'
      do UT-Specific('Open-stFile')
      Break
    When = 'WV'
      do WV-Specific('Open-stFile')
      Break
    When-Other
       show 'when other openst file'
      open $FileID as 10 for-writing record=512:fixed
  End-Evaluate
 show 'close open-stfile'
End-Procedure Open-stFile

!***********************************************************************
! Procedure Close-ErrorFile
!***********************************************************************
Begin-Procedure Close-ErrorFile

  close 20

End-Procedure Close-ErrorFile

!***********************************************************************
! Procedure Open-ErrorFile
!***********************************************************************
Begin-Procedure Open-ErrorFile
  show 'Open-ErrorFile'
  show '$Err_Msg:' $Err_Msg 
  open $ErrorFileID as 20 for-append record=512:vary
  show '$Err_Msg:' $Err_Msg
  do Write-Error
  do Close-ErrorFile

  let $Err_Msg = ''

End-Procedure Open-ErrorFile

!***********************************************************************
! Procedure Write-Transmitter-Records
!***********************************************************************
Begin-Procedure Write-Transmitter-Records
 show 'Begin Write-Transmitter-Records'
  let #error_count     = 0
  move &X.Federal_EIN to $FedEIN  099999999
  move &RC.EMPLR_PIN  to $EmprPIN
  move '99'           to $SoftwareCd

  If &RC.RESUB_INDICATOR = 'Y'
     let $RS_Ind = '1'
  Else
     let $RS_Ind = '0'
  End-If

  If &RC.PHONE_EXTN <> 0
     move &RC.PHONE_EXTN to $Phone_Extn
  Else
     move $Sp4 to $Phone_Extn
  End-If

  move &RC.RESUB_TLCN to $TLcn
  move &X.DESCR       to $Xmitr_Name
  move &X.ADDRESS1    to $CO_DTA_Address1
  move &X.ADDRESS2    to $CO_DTA_Address2

  If rtrim($CO_DTA_Address2,' ') = ''
     move $CO_DTA_Address1 to $CO_DTA_Address2
     move $Sp1             to $CO_DTA_Address1
  End-If

  move &X.CITY    to $City
  let  $X_StateCd  = rtrim(&X.State, ' ')
  let  $StateCd    = $X_StateCd
  move &X.POSTAL  to $Zip
  move &X.COUNTRY to $Country

  let $Validate_StateCd = 'X'
  do Foreign-Address-Test

  uppercase $Xmitr_Name
  uppercase $CO_DTA_Address1
  uppercase $CO_DTA_Address2

  If $ForeignAddrInd = 'X'
     let $US_Zip      = $Sp1
     let $US_ZipXtnsn = $Sp1
     let $US_State    = $Sp1
     let $Frgn_Zip    = $Zip
     let $Frgn_State  = $StateName
  Else
     let $US_Zip        = $Zip
     let $US_ZipXtnsn   = $ZipExtsn
     let $US_State      = $StateCd
     let $Frgn_Zip      = $Sp1
     let $Frgn_State    = $Sp1
     let $Country_2Char = $Sp1
  End-If

  If $FileType = 'D'
    If #RecordCount >= #MaxRecordsPerDiskette
      do Open-stFile
    End-If
  End-If

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('Write-Transmitter-Records')
      Break
    When = 'CO'
      do CO-Specific('Write-Transmitter-Records')
      break
    When = 'IL'
      do IL-Specific('Write-Transmitter-Records')
      Break
    When = 'MA'
      do MA-Specific('Write-Transmitter-Records')
      Break
    When = 'NC'
      do NC-Specific('Write-Transmitter-Records')
      Break
    When = 'PA'
      show 'PA-Specific(Write-Transmitter-Records)'
      do PA-Specific('Write-Transmitter-Records')
      show 'after PA-Specific(Write-Transmitter-Records)'
      Break
    When = 'VA'
      do VA-Specific('Write-Transmitter-Records')
      Break
    When-Other
      let $Software_vendor = '1414'
      let $PreparerCd = 'L'
      do Write-RA-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      do Print-RA-Record
      Break
  End-Evaluate

End-Procedure Write-Transmitter-Records

!***********************************************************************
! Procedure Print-RA-Record
!***********************************************************************
Begin-Procedure Print-RA-Record

  let $Column_Hdr = 'RA Record'
  do Print-Columns

  print 'Submitter EIN    : '  (+2,5)
  print  $FedEIN               ()
  print 'PIN              : '  (+1,5)
  print  $EmprPIN              ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Company Name     : '  (+1,5)
  print  $Xmitr_Name           ()
  print 'Location Address : '  (+1,5)
  print  $Co_Dta_Address1      ()
  print 'Delivery Address : '  (+1,5)
  print  $Co_Dta_Address2      ()
  print 'City             : '  (+1,5)
  print  $City                 ()
  print 'State            : '  (+1,5)
  print  $US_State             ()
  print 'Zip              : '  (+1,5)
  print  $US_Zip               ()
  print 'Zip Extension    : '  (+1,5)
  print  $US_ZipXtnsn          ()
  print 'Foreign State    : '  (+1,5)
  print  $Frgn_State           ()
  print 'Foreign Zip      : '  (+1,5)
  print  $Frgn_Zip             ()
  print 'Country Code     : '  (+1,5)
  print  $Country_2Char        ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Submitter Name   : '  (+1,5)
  print  $Xmitr_Name           ()
  print 'Location Address : '  (+1,5)
  print  $Co_Dta_Address1      ()
  print 'Delivery Address : '  (+1,5)
  print  $Co_Dta_Address2      ()
  print 'City             : '  (+1,5)
  print  $City                 ()
  print 'State            : '  (+1,5)
  print  $US_State             ()
  print 'Zip              : '  (+1,5)
  print  $US_Zip               ()
  print 'Zip Extension    : '  (+1,5)
  print  $US_ZipXtnsn          ()
  print 'Foreign State    : '  (+1,5)
  print  $Frgn_State           ()
  print 'Foreign Zip      : '  (+1,5)
  print  $Frgn_Zip             ()
  print 'Country Code     : '  (+1,5)
  print  $Country_2Char        ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Contact Name     : '  (+1,5)
  print  $Contact_name_ssa     ()
  print 'Contact Phone    : '  (+1,5)
  print  $Telephone_Nbr        ()
  print 'Contact Extension: '  (+1,5)
  print  $Phone_Extn           ()
  print 'Contact E-Mail   : '  (+1,5)
  print  $Email_addr           ()
  print 'Contact Fax      : '  (+1,5)
  print  $Contact_Fax          ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)

  let $NewPage_Written = 'Y'
  let $Column_Hdr      = 'RE Record'
  new-page
  do Print-Columns

End-Procedure Print-RA-Record

!***********************************************************************
! Procedure Foreign-Address-Test
!***********************************************************************
Begin-Procedure Foreign-Address-Test

  let $StateName = ''

  If $Country = 'USA'
     move $Sp1 to $ForeignAddrInd
  Else
     move 'X' to $ForeignAddrInd
     do Get-Country-Code
     move &C.DESCR            to $CountryName
     move &C1.COUNTRY_CD_1042 to $Country_2Char

     Evaluate $W2_State
       When = 'CO'
         do CO-Specific('Foreign-Address-Test')
         Break
     End-Evaluate

     Evaluate $Validate_StateCd
        When = 'X'
          If $X_StateCd = ''
             let $Errors_Found = 'Y'
             let $Err_Msg15 = 'No state code for this Transmitter record. Country: ' ||  $Country  ||
                              ', Company: ' || $Company_Data

             If $Err_Msg15 <> $Prev_Err_Msg15
                let $Err_Msg = $Err_Msg15
                do Open-ErrorFile
                let $Prev_Err_Msg15 = $Err_Msg15
             End-If
             let #error_count = #error_count + 1

             If #error_count = #Max_Errors
                Show 'Maximum number of Errors has been exceeded.'
                Show 'The Program has not finished successfully.'
                Show 'Please check the Error Log File.'
                STOP
             End-If
          Else
             let $V_StateCd = $X_StateCd
             do Get-State-Code
          End-If
             let $Validate_StateCd = ''
          Break
        When = 'A'
          If $A_StateCd = ''
             let $Errors_Found = 'Y'
             let $Err_Msg16 = 'No state code for this RE record. Country: ' ||  $Country  ||
                              ', Company: ' || $Company

             If $Err_Msg16 <> $Prev_Err_Msg16
                let $Err_Msg = $Err_Msg16
                do Open-ErrorFile
                let $Prev_Err_Msg16 = $Err_Msg16
             End-If
             let #error_count = #error_count + 1

             If #error_count = #Max_Errors
                Show 'Maximum number of Errors has been exceeded.'
                Show 'The Program has not finished successfully.'
                Show 'Please check the Error Log File.'
                STOP
             End-If
          Else
             let $V_StateCd = $A_StateCd
             do Get-State-Code
          End-If
             let $Validate_StateCd = ''
          Break
        When = 'E'
          If $E_StateCd = ''
             let $Errors_Found = 'Y'
             let $Err_Msg17 = 'No state code for this Employee record. Country: ' ||  $Country  ||
                              ', Company: ' || $Company || ', Emplid = ' || $Emplid

             If $Err_Msg17 <> $Prev_Err_Msg17
                let $Err_Msg = $Err_Msg17
                do Open-ErrorFile
                let $Prev_Err_Msg17 = $Err_Msg17
             End-If
             let #error_count = #error_count + 1

             If #error_count = #Max_Errors
                Show 'Maximum number of Errors has been exceeded.'
                Show 'The Program has not finished successfully.'
                Show 'Please check the Error Log File.'
                STOP
             End-If
          Else
             let $V_StateCd = $E_StateCd
             do Get-State-Code
          End-If
             let $Validate_StateCd = ''
          Break
     End-Evaluate
  End-If

  uppercase $City
  let $EditZip      = rtrim($Zip, ' ')
  let #DashPosition = instr($EditZip,'-',1)

  If #DashPosition <> 6
     move $Zip to $ZipExtsn ~~~~~xxxx
  Else
     move $Zip to $ZipExtsn ~~~~~~xxxx
  End-If

End-Procedure Foreign-Address-Test

!***********************************************************************
! Procedure Get-Country-Code
!***********************************************************************
Begin-Procedure Get-Country-Code

  let #error_count  = 0
  let $Record_found = 'N'

Begin-Select
C.COUNTRY_2CHAR
C.DESCR

  let $Record_found = 'Y'

FROM PS_COUNTRY_TBL C
WHERE C.COUNTRY = $Country
End-Select

  If $Record_found = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg4 = 'Two Character Country code for ' ||  $Country  ||
                     ' doesn''t exist in Country table.'

     If $Err_Msg4 <> $Prev_Err_Msg4
        let $Err_Msg = $Err_Msg4
        do Open-ErrorFile
        let $Prev_Err_Msg4 = $Err_Msg4
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

  let $Record_found = 'N'

Begin-Select
C1.COUNTRY_CD_1042

  let $Record_found = 'Y'

FROM PS_CNTRY_1042_TBL C1
WHERE C1.COUNTRY = $Country
End-Select

  If $Record_found = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg5 = 'Two Character Country code for ' ||  $Country  ||
                     ' doesn''t exist in Country 1042 table.'

     If $Err_Msg5 <> $Prev_Err_Msg5
        let $Err_Msg = $Err_Msg5
        do Open-ErrorFile
        let $Prev_Err_Msg5 = $Err_Msg5
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

End-Procedure Get-Country-Code

!***********************************************************************
! Procedure Get-State-Code
!***********************************************************************
Begin-Procedure Get-State-Code
  let #error_count  = 0
  let $Record_found = 'N'

Begin-Select
ST.NUMERIC_CD
ST.DESCR

  let  $Record_found = 'Y'
  move &ST.DESCR    to $StateName
  let  $StateCd      = &ST.NUMERIC_CD
  uppercase $StateName
  uppercase $StateCd

FROM PS_STATE_NAMES_TBL ST
WHERE ST.COUNTRY = $Country
  AND ST.STATE   = $V_StateCd
End-Select

  If $Record_found = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg6 = 'State code State: ' || $V_StateCd  || ', Country: ' || $Country ||
                     ' doesn''t exist in State table.'

     If $Err_Msg6 <> $Prev_Err_Msg6
        let $Err_Msg = $Err_Msg6
        do Open-ErrorFile
        let $Prev_Err_Msg6 = $Err_Msg6
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

End-Procedure Get-State-Code

!***********************************************************************
! Procedure Process-State-EE-Data
!***********************************************************************
Begin-Procedure Process-State-EE-Data

Begin-Select
A.W2_REPORTING_CO  () on-Break print=never BEFORE=Before-W2-Reporting-Co-Chg level=1
                                           AFTER=After-W2-Reporting-Co-Chg level=1
E.W2_STATE
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.OTHER_EIN
#If LAST_ORACLE_UPDATE > 2011.4
A.EMPLOYMENT_TYPE     &EMPLOYMENT_TYPE
A.EMPLOYER_KIND       &EMPLOYER_KIND
#Else
#IfDef CC
A.CCI_KIND_OF_ER      &EMPLOYER_KIND
#Else
A.RSI_ER_KIND         &EMPLOYER_KIND
#EndIf
#EndIf
A.BUSI_TERM_IND
E.COMPANY
E.EMPLID           () on-Break print=never BEFORE=Before-Emplid level=2
                                           AFTER=After-Emplid level=2
E.SEQUENCE_NUMBER
E.TAXFORM_ID
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.DECEASED
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG

  let $Company             = rtrim(&E.COMPANY,' ')
  move &E.TAXFORM_ID      to $TaxForm_ID
  move &E.SEQUENCE_NUMBER to #Sequence_Number

  do Load-Fed-Amounts
  do Load-State-Amounts

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

! Load Local Amounts
  Evaluate $W2_State
    When = 'IN'
      do IN-Specific('Process-State-EE-Data')
      Break
    When = 'OH'
      do OH-Specific('Process-State-EE-Data')
      Break
    When = 'KY'
      do KY-Specific('Process-State-EE-Data')
      Break
    When = 'MA'
      do MA-Specific('Process-State-EE-Data')
      Break
    When = 'MD'
      do MD-Specific('Process-State-EE-Data')
      Break
    When = 'NJ'
      do NJ-Specific('Process-State-EE-Data')
      Break
  End-Evaluate

FROM PS_W2_COMPANY A, PS_YE_EE EE, PS_YE_DATA E
WHERE A.COMPANY          = E.COMPANY
  AND A.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND A.TAXFORM_ID       = E.TAXFORM_ID
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND A.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND E.W2_STATE         = $W2_State
  AND A.W2_REPORTING_CO <> ' '
  AND A.TAXFORM_ID       = 'W'
  AND EE.PROCESS_FLAG   <> 'V'
ORDER BY A.W2_REPORTING_CO, E.SSN, E.EMPLID

End-Select

  let $Show_FirstTime = 'Y'

End-Procedure Process-State-EE-Data

!***********************************************************************
! Procedure Before-W2-Reporting-Co-Chg
!***********************************************************************
Begin-Procedure Before-W2-Reporting-Co-Chg

  let #error_count = 0
  let $Company     = rtrim(&A.W2_Reporting_Co,' ')
  let $Er_Kind     = rtrim(ltrim(&EMPLOYER_KIND,' '),' ')

  #If LAST_ORACLE_UPDATE > 2011.4
     let $Empl_Type = rtrim(ltrim(&EMPLOYMENT_TYPE,' '),' ')
  #Else
     let $Empl_Type = rtrim(ltrim(&TX.EMPLOYMENT_TYPE,' '),' ')
  #EndIf

  If $RSI_Combine_Co <> 'Y'
     let $ReportID2 = $Company || '960' || $W2_State
     do Get-Output-File-Info
     do File-Create
  End-If

  move &A.BUSI_TERM_IND to $A_Busi_Term_Ind

  If $A_Busi_Term_Ind = 'Y'
     let $A_Busi_Term_Ind = '1'
  Else
     let $A_Busi_Term_Ind = '0'
  End-If

  move &A.FEDERAL_EIN to $FedEIN   099999999
  move &A.OTHER_EIN   to #Other_EIN

  If #Other_EIN <> 0
     move #Other_EIN to $OtherEIN 099999999
  Else
     move $Sp1       to $OtherEIN
  End-If

  move &A.DESCR    to $ErName
  move &A.ADDRESS1 to $ErAddress1
  move &A.ADDRESS2 to $ErAddress2
  move &A.CITY     to $ErCity
  move &A.POSTAL   to $Zip
  move &A.COUNTRY  to $Country
  let  $A_StateCd   = rtrim(&A.STATE, ' ')
  let  $StateCd     = $A_StateCd

  If rtrim($ErAddress2,' ') = ''
     move $ErAddress1 to $ErAddress2
     move $Sp1        to $ErAddress1
  End-If

  If rtrim($ErAddress1, ' ') = ''
     move $Sp8 to $ErAddress1
  End-If

  let $Validate_StateCd = 'A'
  do Foreign-Address-Test

  uppercase $ErName
  uppercase $ErAddress1
  uppercase $ErAddress2
  uppercase $ErCity

  If $ForeignAddrInd = 'X'
     let $ErUS_Zip        = $Sp1
     let $ErUS_ZipXtnsn   = $Sp1
     let $ErUS_State      = $Sp1
     let $ErFrgn_Zip      = $Zip
     let $ErFrgn_State    = $StateName
     let $ErCountry_2Char = $Country_2Char
  Else
     let $ErUS_Zip        = $Zip
     let $ErUS_ZipXtnsn   = $ZipExtsn
     let $ErUS_State      = $A_StateCd
     let $ErFrgn_Zip      = $Sp1
     let $ErFrgn_State    = $Sp1
     let $ErCountry_2Char = $Sp1
  End-If

  do Get-Third-Party-Amount
  do Get-Third-Party-Sick

  move 0   to #Count_S
  move 0   to #Count_T
  move 0   to #Count_U
  move 0   to #Count_W

  do Write-E-Record

  If $Print_Detail = 'Y'
     let $Column_Hdr = 'Employee Detail'

     If #CURRENT-LINE > 55
        new-page
        do Print-Columns
     Else
        do Print-Columns
     End-If
  End-If

End-Procedure Before-W2-Reporting-Co-Chg

!***********************************************************************
! Procedure Get-Third-Party-Amount
!***********************************************************************
Begin-Procedure Get-Third-Party-Amount

  let #Third_party_tax = 0

Begin-Select
TRD_PTY.THIRD_PARTY_TAX

  add &TRD_PTY.THIRD_PARTY_TAX to #Third_party_tax

FROM PS_RC_THIRD_PARTY TRD_PTY, PS_W2_COMPANY TRD_W2_CPNY
WHERE TRD_PTY.OPRID               = $Prcs_OprID
  AND TRD_PTY.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
  AND TRD_PTY.COMPANY             = TRD_W2_CPNY.COMPANY
  AND TRD_W2_CPNY.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND TRD_W2_CPNY.TAXFORM_ID      = 'W'
  AND TRD_W2_CPNY.W2_REPORTING_CO = $Company
End-Select

   let  #Third_party_tax  = #Third_party_tax * 100
   move #Third_party_tax to $Third_party_tax 099999999999999

End-Procedure Get-Third-Party-Amount

!***********************************************************************
! Procedure Get-Third-Party-Sick
!***********************************************************************
Begin-Procedure Get-Third-Party-Sick

  let $Thrd_Pty_Sick = '0'

Begin-Select
TSI.COUNTRY

  let $Thrd_Pty_Sick = '1'

FROM PS_INSTALLATION TSI
WHERE EXISTS (SELECT 'X'
              FROM PS_YE_EE TSE, PS_YE_DATA TS, PS_W2_COMPANY TSC
              WHERE TSC.W2_REPORTING_CO   = $Company
                AND TSC.COMPANY           = TS.COMPANY
                AND TSC.CALENDAR_YEAR     = TS.CALENDAR_YEAR
                AND TS.CALENDAR_YEAR      = &TX.BALANCE_YEAR
                AND TS.SEQUENCE_NUMBER    = 1
                AND TS.COMPANY            = TSE.COMPANY
                AND TS.EMPLID             = TSE.EMPLID
                AND TS.TAXFORM_ID         = TSE.TAXFORM_ID
                AND TS.CALENDAR_YEAR      = TSE.CALENDAR_YEAR
                AND TSE.PROCESS_FLAG      <> 'V'
                AND TS.THIRDPARTY_SICKPAY = 'Y')
End-Select

End-Procedure Get-Third-Party-Sick

!***********************************************************************
! Procedure Before-Emplid
!***********************************************************************
Begin-Procedure Before-Emplid

  let $FirstTime        = 'Y'
  let $State_Reportable = 'N'

  move &E.SSN to $S123 xxx

  If $S123 = &TEMP_SSN_MASK or rtrim(&E.SSN, ' ') = ''
     move $zero9 to $E_Ssn
  Else
     move &E.SSN to $E_Ssn
  End-If

  move &E.YE_FNAME       to $FirstName
  move &E.YE_MIDDLE_NAME to $MiddleName
  move &E.YE_LNAME       to $LastName
  move &E.YE_SUFFIX      to $Suffix
  move $Sp9              to $Phila-SSN
  move $Sp5              to $TaxingEntityCd

  uppercase $FirstName
  uppercase $MiddleName
  uppercase $LastName
  uppercase $Suffix

  move &E.EMPLID to $Emplid
  move &E.CITY   to $City

  let  $E_StateCd  = rtrim(&E.STATE,' ')
  let  $StateCd    = $E_StateCd
  move &E.POSTAL  to $Zip
  move &E.COUNTRY to $Country

  If &E.STATUTORY_EE = 'Y'
     move '1' to $StatutoryEe
  Else
     move '0' to $StatutoryEe
  End-If

  If &E.PENSION_PLAN = 'Y'
     move 1 to #RetirePlan
  Else
     move 0 to #RetirePlan
  End-If

  If &E.DECEASED = 'Y'
     move '1' to $DeceasedFlag
  Else
     move '0' to $DeceasedFlag
  End-If

  If &E.THIRDPARTY_SICKPAY = 'Y'
     move 1 to #Third_Party_Sick_Ind
  Else
     move 0 to #Third_Party_Sick_Ind
  End-If

  do Populate-EE-Address

End-Procedure Before-Emplid

!***********************************************************************
! Procedure Populate-EE-Address
!***********************************************************************
Begin-Procedure Populate-EE-Address

  let #error_count = 0

  If rtrim($City,' ') = ''
     let $Errors_Found = 'Y'
     let $Err_Msg8 = 'City is blank in YE data for employee, ' ||  $Emplid  || '. ' ||
                    'Please correct in personal data and run the load program (tax910ld.sqr) again.'

     If $Err_Msg8 <> $Prev_Err_Msg8
        let $Err_Msg = $Err_Msg8
        do Open-ErrorFile
        let $Prev_Err_Msg8 = $Err_Msg8
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

  let $Validate_StateCd = 'E'
  do Foreign-Address-Test

  If $ForeignAddrInd = 'X'
     let $US_Zip      = $Sp1
     let $US_ZipXtnsn = $Sp1
     let $US_State    = $Sp1
     let $Frgn_Zip    = $Zip
     let $Frgn_State  = $StateName

     Evaluate $W2_State
       When = 'CO'
         do CO-Specific('Populate-EE-Address')
       Break
     End-Evaluate
  Else
     let $US_Zip        = $Zip
     let $US_ZipXtnsn   = $ZipExtsn
     let $US_State      = $StateCd
     let $Frgn_Zip      = $Sp1
     let $Frgn_State    = $Sp1
     let $Country_2Char = $Sp1
  End-If

  move &E.ADDRESS1 to $EeAddress1
  move &E.ADDRESS2 to $EeAddress2

  If rtrim($EeAddress2, ' ') = ''
     move $EeAddress1 to $EeAddress2
     move $Sp1        to $EeAddress1
  End-If

  If rtrim($EeAddress1, ' ') = ''
     move $Sp8 to $EeAddress1
  End-If

  uppercase $EeAddress1
  uppercase $EeAddress2
  uppercase $City

End-Procedure Populate-EE-Address

!***********************************************************************
! Procedure Load-Fed-Amounts
!***********************************************************************
Begin-Procedure Load-Fed-Amounts

  move 'N' to $WriteORec

Begin-Select
D.BOX
D.W2_AMOUNT

  do Assign-Year-End-Variables

  let #Amount = &D.W2_AMOUNT * 100

  If #Amount < 0 and $FdBox <> $YE_Adv_EIC
     Show 'EMPLID: ' $Emplid ', W2 Box ID: ' $FdBox ', Amount: ' #Amount '. Amount has been set to Zero.'
     move 0 to #Amount
  End-If

  let $FdBox  = rtrim(&D.BOX,' ')

  Evaluate $FdBox
    When = $YE_Fed_Wages
      If $TaxForm_ID = 'W'
         add #Amount to #Fed_Wages
      Else
         add #Amount to #Fed_Wages_TY
      End-If
      Break
    When = $YE_Fed_Tax
      If $TaxForm_ID = 'W'
         add #Amount to #Fed_Tax
      Else
         add #Amount to #Fed_Tax_TY
      End-If
      Break
    When = $YE_SS_Wages
      add #Amount to #SS_Wages
      Break
    When = $YE_SS_Tax
      add #Amount to #SS_Tax
      Break
    When = $YE_Med_Wages
      add #Amount to #Med_Wages
      Break
    When = $YE_Med_Tax
      add #Amount to #Med_Tax
      Break
    When = $YE_SS_Tips
      add #Amount to #SS_Tips
      Break
    When = $YE_Adv_EIC
      add #Amount to #Adv_EIC
      Break
    When = $YE_Dep_Care
      add #Amount to #Dep_Care
      Break
    When = $YE_Non_Qual_457_N
      add #Amount to #Non_Qual_457_N
      Break
    When = $YE_Non_Qual_457_Y
      add #Amount to #Non_Qual_457_Y
      Break
    When = $YE_Alloc_Tips
      move 'Y' to $WriteORec
      add #Amount to #Alloc_TIPS
      Break
    When = $YE_Uncoll_SS_Tax_On_Tips
    When = $YE_Uncoll_Med_Tax_On_Tips
      move 'Y' to $WriteORec
      add #Amount to #Uncoll_Tax_On_Tips
      Break
    When = $YE_Group_Term_LIfe
      add #Amount to #Group_Term_LIfe
      Break
    When = $YE_401K
      add #Amount to #401K
      Break
    When = $YE_403B
      add #Amount to #403B
      Break
    When = $YE_408K6
      add #Amount to #408K6
      Break
    When = $YE_457B
      add #Amount to #457B
      Break
    When = $YE_501C18D
      add #Amount to #501C18D
      Break
    When = $YE_Uncoll_SS_Tax_GTL
      move 'Y' to $WriteORec
      add #Amount to #Uncoll_SS_Tax_GTL
      Break
    When = $YE_Uncoll_Med_Tax_GTL
      move 'Y' to $WriteORec
      add #Amount to #Uncoll_Med_Tax_GTL
      Break
    When = $YE_NonTaxable_Combat_Pay
      add #Amount to #Combat_Pay
      Break
    When = $YE_Med_Svgs_Acct
      move 'Y' to $WriteORec
      add #Amount to #Med_Svgs_Acct
      Break
    When = $YE_408P_Simple_Retirement
      add  #Amount to #408P_Simple_Retirement
      move 'Y' to $WriteORec
      Break
    When = $Ye_Adoption_Exp
      add #Amount to #Adoption_Exp
      move 'Y' to $WriteORec
      Break
    When = $YE_NonStatutory_Stock_Opt
      add #Amount to #Nonstatutory_Stock_Options
      Break
    When = $YE_HSA_Employer_Contrib
      add #Amount to #HSA_Employer_Contrib
      Break
    When = $YE_Non_Qual_409A_Deferral
      add #Amount to #Non_Qual_409A_Deferral
      Break
    When = $YE_Non_Qual_409A_Income
      add #Amount to #Non_Qual_409A_Income
      Break
    When = $YE_Roth_401k
      add #Amount to #Roth_401k
      Break
    When = $YE_Roth_403b
      add #Amount to #Roth_403b
      Break
    When = $Ye_Er_Hlth_Cvg
      add #Amount to #Er_Hlth_Cvg
      Break
  End-Evaluate

FROM PS_YE_AMOUNTS D
WHERE D.COMPANY         = $Company
  AND D.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND D.EMPLID          = $Emplid
  AND D.TAXFORM_ID      = $TaxForm_ID
  AND D.SEQUENCE_NUMBER = 1
  AND D.STATE           = '$U'
End-Select

End-Procedure Load-Fed-Amounts

!***********************************************************************
! Procedure Load-State-Amounts
!***********************************************************************
Begin-Procedure Load-State-Amounts

  let $State_Reportable = 'N'

Begin-Select
DS.BOX
DS.W2_AMOUNT

  let #Amount = &DS.W2_AMOUNT * 100
  let $StBox  = rtrim(&DS.Box,' ')

  Evaluate $StBox
    When = $YE_State_Wages
      add #Amount to #State_Wages
      Break
    When = $YE_State_Tax
      add #Amount to #State_Tax
      Break
  End-Evaluate

  let $State_Reportable = 'Y'

FROM PS_YE_AMOUNTS DS
WHERE DS.COMPANY         = $Company
  AND DS.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND DS.EMPLID          = $Emplid
  AND DS.TAXFORM_ID      = $TaxForm_ID
  AND DS.SEQUENCE_NUMBER = #Sequence_Number
  AND DS.BOX            IN ('16','17')
End-Select

End-Procedure Load-State-Amounts

!***********************************************************************
! Procedure Load-Local-Amounts
!***********************************************************************
Begin-Procedure Load-Local-Amounts

  let #error_count = 0

Begin-Select
DL.BOX
DL.W2_AMOUNT
DL.STATE
DL.LOCALITY       () on-Break print=never after=Report-Local-Amounts

  let $LCL_Status = nvl(&DL.LOCALITY,'none')

  If $LCL_Status = 'none'
     let $Errors_Found = 'Y'
     let $Err_Msg9 = 'No Locality identified for local amount. Error occurred on Emplid: ' ||
                     $Emplid || ', in company: ' || $Company || '.'

     If $Err_Msg9 <> $Prev_Err_Msg9
        let $Err_Msg = $Err_Msg9
        do Open-ErrorFile
        let $Prev_Err_Msg9 = $Err_Msg9
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

  let #Amount       = &DL.W2_AMOUNT * 100
  let $Lcl_Locality = rtrim(&DL.LOCALITY,' ')
  let $Lcl_State    = rtrim(&DL.STATE,' ')
  let $Lcl_Box      = rtrim(&DL.BOX,' ')

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $Lcl_State
    When = 'IN'
      do IN-Specific('Load-Local-Amounts')
      Break
    When = 'OH'
      do OH-Specific('Load-Local-Amounts')
      Break
  End-Evaluate

FROM PS_YE_AMOUNTS DL
WHERE DL.COMPANY         = $Company
  AND DL.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND DL.EMPLID          = $Emplid
  AND DL.TAXFORM_ID      = $TaxForm_ID
  AND DL.SEQUENCE_NUMBER = #Sequence_Number
  AND DL.STATE           = $W2_State
  AND DL.BOX            IN ('18','19')
ORDER BY DL.LOCALITY DESC
End-Select

End-Procedure Load-Local-Amounts

!***********************************************************************
! Procedure Report-Local-Amounts
!***********************************************************************
Begin-Procedure Report-Local-Amounts

  let $Loc_Tax_Cd = ''
  let $Locality = rtrim($Lcl_Locality,' ')

  If $Locality <> ''
     Evaluate $Lcl_State
       When = 'IN'
         do IN-Specific('Report-Local-Amounts')
         Break
       When = 'OH'
         do OH-Specific('Report-Local-Amounts')
         Break
     End-Evaluate
  End-If
  move $Sp1 to $Loc_Mag_Cd

End-Procedure Report-Local-Amounts

!***********************************************************************
! Procedure Get-Locality-Mag-CD
!***********************************************************************
Begin-Procedure Get-Locality-Mag-CD

  do Check-Report-Table

  If $Code_Found = 'N'
     do Check-Local-Tax-Table
  Else
     move &LL.W2_MAG_CODE to $Loc_Tax_Cd
  End-If

End-Procedure Get-Locality-Mag-CD

!***********************************************************************
! Procedure Check-Report-Table
!***********************************************************************
Begin-Procedure Check-Report-Table

  let $Code_Found = 'N'

Begin-Select
LL.W2_MAG_CODE
LL.LOCALITY

  let $Code_Found = 'Y'

FROM PS_R_TAX960XX LL
WHERE LL.STATE    = $W2_State
  AND LL.LOCALITY = $Locality
End-Select

End-Procedure Check-Report-Table

!***********************************************************************
! Procedure Check-Local-Tax-Table
!***********************************************************************
Begin-Procedure Check-Local-Tax-Table

  let $LocalityNameFound = 'N'

Begin-Select
L.LOCALITY_NAME

  move &L.LOCALITY_NAME to $Locality_Name
  let $Locality_Name = rtrim($Locality_Name,' ')
  let $LocalityNameFound = 'Y'

FROM PS_LOCAL_TAX_TBL L
WHERE L.STATE    = $W2_State
  AND L.LOCALITY = $Locality
  AND L.EFFDT    = (SELECT MAX(L1.EFFDT)
                    FROM PS_LOCAL_TAX_TBL L1
                    WHERE L1.STATE    = L.STATE
                      AND L1.LOCALITY = L.LOCALITY
                      AND L1.EFFDT   <= $AsOfDate)
End-Select

  If $LocalityNameFound = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg10 = 'Locality Name not found for State, ' || $W2_State || '. ' ||
                      'Emplid = ' || $Emplid || ', and Locality = ' || nvl($Locality,'''NONE''') || '.'

     If $Err_Msg10 <> $Prev_Err_Msg10
        let $Err_Msg = $Err_Msg10
        do Open-ErrorFile
        let $Prev_Err_Msg10 = $Err_Msg10
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

  do Get-W2-Mag-Code

End-Procedure Check-Local-Tax-Table

!***********************************************************************
! Procedure Get-W2-Mag-Code
!***********************************************************************
Begin-Procedure Get-W2-Mag-Code

  let $W2_Mag_Cd_Found = 'N'

Begin-Select
L2.W2_MAG_CODE

  move &L2.W2_Mag_Code to $Loc_Tax_Cd
  let $Loc_Tax_Cd = rtrim($Loc_Tax_Cd,' ')
  let  $W2_Mag_Cd_Found = 'Y'

FROM PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE    = $W2_State
  AND L2.LOCALITY = $Locality
  AND L2.EFFDT    = (SELECT MAX(L3.EFFDT)
                     FROM PS_LOCAL_TAX_TBL2 L3
                     WHERE L3.STATE    = L2.STATE
                       AND L3.LOCALITY = L2.LOCALITY
                       AND L3.EFFDT   <= $AsOfDate)
End-Select

  If $W2_Mag_Cd_Found = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg11 = 'W2 Mag Code not found for State, ' || $W2_State ||
                      'Emplid = ' || $Emplid || ', and Locality, ' || nvl($Locality,'''NONE''') || '.'

     If $Err_Msg11 <> $Prev_Err_Msg11
        let $Err_Msg = $Err_Msg11
        do Open-ErrorFile
        let $Prev_Err_Msg11 = $Err_Msg11
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
  End-If

  do Build-Report-Table

End-Procedure Get-W2-Mag-Code

!***********************************************************************
! Procedure Build-Report-Table
!***********************************************************************
Begin-Procedure Build-Report-Table

Begin-Sql on-error=Insert-Report-Table-Error
  INSERT INTO PS_R_TAX960XX (STATE,
                             LOCALITY,
                             W2_MAG_CODE,
                             LOCALITY_NAME,
                          #IfDef W2_MAG_MEDIA_NAME_Y
                             W2_MAG_MEDIA_NAME,
                          #EndIf
                             WAGES,
                             TAXES)
                     VALUES ($W2_State,
                             $Locality,
                             $Loc_Tax_Cd,
                             $Locality_Name,
                          #IfDef W2_MAG_MEDIA_NAME_Y
                             ' ',
                          #EndIf
                             0,
                             0)
End-Sql

End-Procedure Build-Report-Table

!***********************************************************************
! Procedure Insert-Report-Table-Error
!***********************************************************************
Begin-Procedure Insert-Report-Table-Error

  Evaluate $W2_State
    When = 'OH'
      do OH-Specific('Insert-Report-Table-Error')
      Break
    When = 'IN'
      let $Errors_Found = 'Y'
      let $Err_Msg12 = 'Error on Report Table Insert. Data: State = ' || $W2_State ||
                       ', Locality = ' || nvl($Locality,'''NONE''') ||
                       ', W2_Mag_Code = ' || nvl($Loc_Tax_Cd,'''NONE''') ||
                       ', Locality_Name = ' || nvl($Locality_Name,'''NONE''') ||
                       ', Emplid = ' || $Emplid || '.'

     If $Err_Msg12 <> $Prev_Err_Msg12
        let $Err_Msg = $Err_Msg12
        do Open-ErrorFile
        let $Prev_Err_Msg12 = $Err_Msg12
     End-If
     let #error_count = #error_count + 1

     If #error_count = #Max_Errors
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        STOP
     End-If
     Break
  End-Evaluate

End-Procedure Insert-Report-Table-Error

!***********************************************************************
! Procedure Update-Report-Table
!***********************************************************************
Begin-Procedure Update-Report-Table

Begin-Sql on-error=Update-Report-Table-Error
  UPDATE PS_R_TAX960XX
  SET WAGES = WAGES + #Local_Wages, TAXES = TAXES + #Local_Tax
  WHERE STATE    = $W2_State
    AND LOCALITY = $Locality
End-Sql

End-Procedure Update-Report-Table

!***********************************************************************
! Procedure Update-Report-Table-Error
!***********************************************************************
Begin-Procedure Update-Report-Table-Error

  let $Errors_Found = 'Y'
  let $Err_Msg13 = 'Error on Update of Report table. Data: State = ' ||
                   $W2_State || ', Emplid = ' || $Emplid || ', Locality = ' ||
                   nvl($Locality,'''NONE''') || '.'

  If $Err_Msg13 <> $Prev_Err_Msg13
     let $Err_Msg = $Err_Msg13
     do Open-ErrorFile
     let $Prev_Err_Msg13 = $Err_Msg13
  End-If
  let #error_count = #error_count + 1

  If #error_count = #Max_Errors
     Show 'Maximum number of Errors has been exceeded.'
     Show 'The Program has not finished successfully.'
     Show 'Please check the Error Log File.'
     STOP
  End-If

End-Procedure Update-Report-Table-Error

!***********************************************************************
! Procedure Gather-Local-Amounts
!***********************************************************************
Begin-Procedure Gather-Local-Amounts

Begin-Select
GL.BOX
GL.W2_AMOUNT

  let #Amount   = &GL.W2_AMOUNT * 100
  let $Lcl2_BOX = rtrim(&GL.BOX,' ')

  Evaluate $Lcl2_Box
    When = $YE_Local_Wages
      add #Amount to #Local_Wages
      Break
    When = $YE_Local_Tax
      add #Amount to #Local_Tax
      Break
  End-Evaluate

FROM PS_YE_AMOUNTS GL
WHERE GL.COMPANY         = $Company
  AND GL.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND GL.EMPLID          = $Emplid
  AND GL.TAXFORM_ID      = $TaxForm_ID
  AND GL.SEQUENCE_NUMBER = #Sequence_Number
  AND GL.STATE           = $W2_State
  AND GL.BOX            IN ('18','19')
End-Select

End-Procedure Gather-Local-Amounts

!***********************************************************************
! Procedure After-Emplid
!***********************************************************************
Begin-Procedure After-Emplid

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('After-Emplid')
      Break
    When = 'AR'
      do AR-Specific('After-Emplid')
      Break
    When = 'AZ'
      do AZ-Specific('After-Emplid')
      Break
    When = 'CO'
      do CO-Specific('After-Emplid')
      Break
    When = 'CT'
      do CT-Specific('After-Emplid')
      Break
    When = 'DC'
      do DC-Specific('After-Emplid')
      Break
    When = 'DE'
      do DE-Specific('After-Emplid')
      Break
    When = 'GA'
      do GA-Specific('After-Emplid')
      Break
    When = 'ID'
      do ID-Specific('After-Emplid')
      Break
    When = 'IL'
      do IL-Specific('After-Emplid')
      Break
    When = 'IN'
      do IN-Specific('After-Emplid')
      Break
    When = 'KS'
      do KS-Specific('After-Emplid')
      Break
    When = 'KY'
      do KY-Specific('After-Emplid')
      Break
    When = 'LA'
      do LA-Specific('After-Emplid')
      Break
    When = 'MA'
      do MA-Specific('After-Emplid')
      Break
    When = 'MD'
      do MD-Specific('After-Emplid')
      Break
    When = 'ME'
      do ME-Specific('After-Emplid')
      Break
    When = 'MI'
      do MI-Specific('After-Emplid')
      Break
    When = 'MN'
      do MN-Specific('After-Emplid')
      Break
    When = 'MO'
      do MO-Specific('After-Emplid')
      Break
    When = 'MS'
      do MS-Specific('After-Emplid')
      Break
    When = 'MT'
      do MT-Specific('After-Emplid')
      Break
    When = 'NC'
      do NC-Specific('After-Emplid')
      Break
    When = 'ND'
      do ND-Specific('After-Emplid')
      Break
    When = 'NE'
      do NE-Specific('After-Emplid')
      Break
    When = 'NJ'
      do NJ-Specific('After-Emplid')
      Break
    When = 'NM'
      do NM-Specific('After-Emplid')
      Break
    When = 'OH'
      do OH-Specific('After-Emplid')
      Break
    When = 'PA'
      do PA-Specific('After-Emplid')
      Break
    When = 'RI'
      do RI-Specific('After-Emplid')
      Break
    When = 'SC'
      do SC-Specific('After-Emplid')
      Break
    When = 'UT'
      do UT-Specific('After-Emplid')
      Break
    When = 'VA'
      do VA-Specific('After-Emplid')
      Break
    When = 'VT'
      do VT-Specific('After-Emplid')
      Break
    When = 'WI'
      do WI-Specific('After-Emplid')
      Break
    When = 'WV'
      do WV-Specific('After-Emplid')
      Break
    When-Other

      If $State_Reportable = 'Y'
         do Write-W-Record
         do Write-S-Record

         If $Print_Detail = 'Y'
            do Print-Employee-Detail
         End-If
      End-If
      Break
  End-Evaluate

  do Zero-W-Record
  do Zero-O-Record
  do Zero-S-Record
  do Clear-Space-Fields

  let $LocalReportable = 'N'

End-Procedure After-Emplid

!***********************************************************************
! Procedure Print-Employee-Detail
!***********************************************************************
Begin-Procedure Print-Employee-Detail

  If #CURRENT-LINE > 55
     let $Column_Hdr = 'Employee Detail'
     new-page
     do Print-Columns
  End-If

  let $Employee_Name = rtrim(ltrim($LastName, ' '), ' ') || ', ' ||
                       rtrim(ltrim($FirstName, ' '), ' ') || ' ' ||
                       rtrim(ltrim($MiddleName, ' '), ' ')
  print $Employee_Name (+1,43)
  print $E_Ssn         (,91)

  move $State_Wages to #State_Wages
  move $State_Tax   to #State_Tax

  let #out = #State_Wages / 100
  do Format-Number(#out, $out, 'B999,999,999.99')
  print $out  (,103)

  let #out = #State_Tax / 100
  do Format-Number(#out, $out, 'B9,999,999.99')
  print $out  (,121)

End-Procedure Print-Employee-Detail

!***********************************************************************
! Procedure After-W2-Reporting-Co-Chg
!***********************************************************************
Begin-Procedure After-W2-Reporting-Co-Chg
! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  let $Column_Hdr = ' '
  let $Sub_Hdr    = ' '

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'CT'
      do CT-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'DE'
      do DE-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'ID'
      do ID-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'IL'
      do IL-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'IN'
      do IN-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'MA'
      do MA-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'MD'
      do MD-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'NE'
      do NE-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'OH'
      do OH-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'OR'
      do OR-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'PA'
      do PA-Specific('After-W2-Reporting-Co-Chg')
      Break
    When = 'RI'
      do RI-Specific('After-W2-Reporting-Co-Chg')
      Break
    When-Other
      If #Count_W <> 0
         let #Count_T = #Count_W
         do Write-T-Record
         add #Count_T to #Count_F
         add #Count_W to #StateW2Cnt
      Else
         If #Count_S <> 0
            let #Count_T = #Count_S
            do Write-T-Record
            add #Count_T to #Count_F
            add #Count_S to #StateW2Cnt
         End-If
      End-If
      do Print-State-Totals
      Break
  End-Evaluate

  do Zero-T-Record

  If $RSI_Combine_Co <> 'Y'
     do After-State
  End-If

End-Procedure After-W2-Reporting-Co-Chg

!***********************************************************************
! Procedure Print-State-Totals
!***********************************************************************
Begin-Procedure Print-State-Totals

  If #CURRENT-LINE > 55
     let $Column_Hdr = 'State Company Totals'
     new-page
     do Print-Columns
  End-If

  let   $out = 'Company Totals: W2 Count, Wages & Taxes'
  print $out                                      (+1,1)
  print $Company                                  (+1,1)
  print $RptStateEIN                              (,10)

  let #Prt_Count = #StateW2Cnt
  do Format-Number(#Prt_Count, $out, 'B999,999')
  print $out                                      (,33)

  let #out = #State_Wages_T / 100
  do Format-Number(#out, $out, 'B9,999,999,999.99')
  print $out                                      (,101)

  let #out = #State_Tax_T / 100
  do Format-Number(#out, $out, 'B999,999,999.99')
  print $out                                      (,119)

  let $TtlStateDescr = $StateDescr

  If $TtlStateDescr <> $PrevTtlStateDescr and $RSI_Combine_Co <> 'Y'
     let $Separator = rpad('',170,'-')
     print $Separator                             (+1,1)
     let $Separator = ' '
     print $Separator (+1,1)
     let $PrevTtlStateDescr = $TtlStateDescr
  Else
     let $Separator = rpad('',173,'-')
     print $Separator                             (+1,1)
     let $Separator = ' '
     print $Separator (+1,1)
     let $PrevTtlStateDescr = $TtlStateDescr
  End-If

  add #StateW2Cnt to #StateW2Cnt_Ttl
  move 0 to #Prt_Count
  move 0 to #StateW2Cnt
  let $NewPage_Written = 'N'
End-Procedure Print-State-Totals

!***********************************************************************
! Procedure After-State
!***********************************************************************
Begin-Procedure After-State

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('After-State')
      Break
    When = 'LA'
      do LA-Specific('After-State')
      Break
    When = 'MA'
      do MA-Specific('After-State')
      Break
    When = 'MD'
      do MD-Specific('After-State')
      Break
    When = 'NC'
      do NC-Specific('After-State')
      Break
    When = 'NM'
      do NM-Specific('After-State')
      Break
    When = 'VA'
      do VA-Specific('After-State')
      Break
    When = 'WV'
      do WV-Specific('After-State')
      Break
    When-Other
      do Write-F-Record
      Break
  End-Evaluate

  do State-End-Totals
  do Print-Totals
  do Zero-F-Record
  new-page
  let $Print_Detail = 'N'

End-Procedure After-State

!***********************************************************************
! Procedure State-End-Totals
!***********************************************************************
Begin-Procedure State-End-Totals

  If $Show_FirstTime = 'Y'
     Show ''
     Show $StateDescr ' W-2 File Records'
     Show '********************************************'
     Evaluate $W2_State
       When = 'PA'
         do PA-Specific('State-End-Totals')
         Break
       When-Other
         If $FileType = 'D'
            Show 'The following W-2 diskette file(s) have been created:'
         Else
            Show 'The following W-2 ' $File_Type_Title 'file(s) have been created:'
         End-If
         Show $FileID
         Break
     End-Evaluate
     let $Show_FirstTime = 'N'
  End-If

  do Delete-Report-Table

End-Procedure State-End-Totals

!***********************************************************************
! Procedure Delete-Report-Table
!***********************************************************************
Begin-Procedure Delete-Report-Table

Begin-Sql on-error=Ignore-SQL-Error
DELETE FROM PS_R_TAX960XX
End-Sql

End-Procedure Delete-Report-Table

!***********************************************************************
! Procedure Ignore-SQL-Error
!***********************************************************************
Begin-Procedure Ignore-SQL-Error

! Dummy procedure to avoid SQL error message on delete of empty table

End-Procedure Ignore-SQL-Error

!***********************************************************************
! Procedure Print-Totals
!***********************************************************************
Begin-Procedure Print-Totals

  If #CURRENT-LINE > 55
     let $Column_Hdr = 'File Totals'
     new-page
     do Print-Columns
  End-If

  If $RSI_Combine_Co <> 'Y'
     print $W2_State           (+2,1)
     print $Company            (0,+1)
     print 'State W2 Count : ' (0,+1)
  Else
     print $W2_State                (+2,1)
     print 'State File W2 Count : ' (0,+1)
  End-If

  do Format-Number (#StateW2Cnt_Ttl, $out, 'B999,999')
  print $out (,33)
  move 0 to #StateW2Cnt_Ttl

  If $RSI_Combine_Co = 'Y'
     Evaluate $W2_State
       When = 'PA'
         do PA-Specific('Print-Totals')
         Break
       When-Other
         do Format-Number (#Tot_Record_Count, $out, 'B999,999')
         print 'Total File Record Count: '(+1,1)
         print $out (,33)
         move 0 to #Tot_Record_Count
     End-Evaluate
  End-If

  let $Separator = rpad('',173,'_')
  let $Separator = ' '
  print $Separator (+1,1)

End-Procedure Print-Totals

!***********************************************************************
! Procedure Print-Local
!***********************************************************************
Begin-Procedure Print-Local

  If #CURRENT-LINE > 55
     let $Column_Hdr = 'Employee Detail'
     let $Sub_Hdr    = 'Local Detail'
     new-page
     do Print-Columns
  End-If

  Evaluate $W2_State
    When = 'IN'
      do IN-Specific('Print-Local')
      Break
    When = 'OH'
      do OH-Specific('Print-Local')
      Break
  End-Evaluate

  If #Local_Wages_T <> 0 or #Local_Tax_T <> 0
     print $Local_Desc1 (+1,1)
     do Print-Report-Table

     print $Local_Desc2 (+1,113)
     let #out = #Local_Wages_T / 100
     do Format-Number(#out, $out, 'B99,999,999.99')
     print $out  (,135)

     let #out = #Local_Tax_T / 100
     do Format-Number(#out, $out, 'B9,999,999.99')
     print $out  (,150)
  End-If

  do Delete-Report-Table

End-Procedure Print-Local

!***********************************************************************
! Procedure Print-Report-Table
!***********************************************************************
Begin-Procedure Print-Report-Table

Begin-Select
LCL.LOCALITY_NAME
LCL.WAGES
LCL.TAXES
LCL.W2_MAG_CODE

  let $W2_Mag_Code = ltrim (&LCL.W2_MAG_CODE,' ')

  If $W2_Mag_Code <> ''
     let $Local_Desc = substr (&LCL.LOCALITY_NAME,1,18)
     let $Local_Desc = $Local_Desc || ':'
     print $Local_Desc (+1,115)

     let #out = &LCL.WAGES / 100
     do Format-Number(#out, $out, 'B99,999,999.99')
     print $out  (,135)

     let #out = &LCL.TAXES / 100
     do Format-Number(#out, $out, 'B9,999,999.99')
     print $out  (,150)
  End-If

FROM PS_R_TAX960XX LCL
End-Select

End-Procedure Print-Report-Table

!***********************************************************************
! Procedure Write-E-Record
!***********************************************************************
Begin-Procedure Write-E-Record

let $AgentId = $Sp1

Begin-Select
CP.COMMON_PAY_ID

  let $AgentId = '2'

FROM PS_COMPANY_TBL CP
WHERE CP.COMPANY = $Company
  AND CP.COMMON_PAY_ID <> ' '
  AND CP.EFFDT   = (SELECT MAX(CP1.EFFDT)
                    FROM PS_COMPANY_TBL CP1
                    WHERE CP1.COMPANY = CP.COMPANY
                      AND CP1.EFFDT  <= $EffDate)
End-Select

  move &E.EMPLOYER_ID_SWT  to $StateEIN
  move $StateEIN to $RptStateEIN

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('Write-E-Record')
      Break
    When = 'CO'
      do CO-Specific('Write-E-Record')
      Break
    When = 'DC'
      do DC-Specific('Write-E-Record')
      Break
    When = 'DE'
      do DE-Specific('Write-E-Record')
      Break
    When = 'GA'
      do GA-Specific('Write-E-Record')
      Break
    When = 'ID'
      do ID-Specific('Write-E-Record')
      Break
    When = 'IN'
      do IN-Specific('Write-E-Record')
      Break
    When = 'KY'
      do KY-Specific('Write-E-Record')
      Break
    When = 'MA'
      do MA-Specific('Write-E-Record')
      Break
    When = 'MD'
      do MD-Specific('Write-E-Record')
      Break
    When = 'ME'
      do ME-Specific('Write-E-Record')
      Break
    When = 'MS'
      do MS-Specific('Write-E-Record')
      Break
    When = 'NC'
      do NC-Specific('Write-E-Record')
      Break
    When = 'NE'
      do NE-Specific('Write-E-Record')
      Break
    When = 'NM'
      do NM-Specific('Write-E-Record')
      Break
    When = 'OR'
      do OR-Specific('Write-E-Record')
      Break
    When = 'PA'
      do PA-Specific('Write-E-Record')
      Break
    When-Other
      If $FileType = 'D'
         If #RecordCount >= #MaxRecordsPerDiskette
            do Open-stFile
         End-If
      End-If

      do Write-RE-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count

      If $NewPage_Written = 'Y'
         let $NewPage = 'N'
      Else
         let $NewPage = 'Y'
      End-If
      do Print-RE-Record
  End-Evaluate

End-Procedure Write-E-Record

!***********************************************************************
! Procedure Print-RE-Record
!***********************************************************************
Begin-Procedure Print-RE-Record

  If $NewPage = 'Y'
     let $Column_Hdr = 'RE Record'
     new-page
     do Print-Columns
     let $NewPage_Written = 'Y'
  End-If

  print 'Payment Year     : ' (+2,5)
  print  $CalYear             ()
  print 'Federal EIN      : ' (+1,5)
  print  $FedEIN              ()
  print 'Employer Name    : ' (+1,5)
  print  $ErName              ()
  print 'Location Address : ' (+1,5)
  print  $ErAddress1          ()
  print 'Delivery Address : ' (+1,5)
  print  $ErAddress2          ()
  print 'City             : ' (+1,5)
  print  $ErCity              ()
  print 'State            : ' (+1,5)
  print  $ErUS_State          ()
  print 'Zip              : ' (+1,5)
  print  $ErUS_Zip            ()
  print 'Zip Extension    : ' (+1,5)
  print  $ErUS_ZipXtnsn       ()
  print 'Foreign State    : ' (+1,5)
  print  $ErFrgn_State        ()
  print 'Foreign Zip      : ' (+1,5)
  print  $ErFrgn_Zip          ()
  print 'Country Code     : ' (+1,5)
  print  $ErCountry_2Char     ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)
  print 'Employment Code  : ' (+1,5)
  print  $Empl_Type           ()
  print 'Other EIN        : ' (+1,5)
  print  $OtherEIN            ()
  print 'Tax Jurisdiction : ' (+1,5)
  print  $TaxJurisdiction     ()
  print 'Contact Name     : ' (+1,5)
  print  $Contact_name_ssa    ()
  print 'Contact Phone    : ' (+1,5)
  print  $Telephone_Nbr       ()
  print 'Contact Extension: ' (+1,5)
  print  $Phone_Extn          ()
  print 'Contact Fax      : ' (+1,5)
  print  $Contact_Fax         ()
  print 'Contact E-Mail   : ' (+1,5)
  print  $Email_addr          ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)

  let $Column_Hdr = ' '
  let $Sub_Hdr    = ' '
  If $Print_Detail = 'Y'
     new-page
  End-If

End-Procedure Print-RE-Record

!***********************************************************************
! Procedure Error-Log
!***********************************************************************
Begin-Procedure Error-Log

  Show ''
  Show '********************************************************************************'
  Show ''
  Show 'Errors were found in the data. The following Error Log File has been created: '
  Show $ErrorFileID
  Show ''

End-Procedure Error-Log

!***********************************************************************
! Procedure Write-F-Record
!***********************************************************************
Begin-Procedure Write-F-Record

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'CO'
      move $zero9 to $Count_F
      do Write-RF-Record
      Break
    When = 'CT'
      do CT-Specific('Write-F-Record')
      Break
    When = 'PA'
      do PA-Specific('Write-F-Record')
      Break
    When-Other
      move #Count_F to $Count_F   099999999
      do Write-RF-Record
      Break
  End-Evaluate

  move 0 to #Count_S
  move 0 to #Count_W
  do Zero-F-Record

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

End-Procedure Write-F-Record

!***********************************************************************
! Procedure Write-O-Record
!***********************************************************************
Begin-Procedure Write-O-Record

  If $FileType = 'D'
     If #RecordCount >= #MaxRecordsPerDiskette
        do Open-stFile
     End-If
  End-If

  If $WriteORec = 'Y'
     do Before-RO-Record
     do Write-RO-Record
     do After-RO-Record
  End-If

End-Procedure Write-O-Record

!***********************************************************************
! Procedure Write-S-Record
!***********************************************************************
Begin-Procedure Write-S-Record

  If $FileType = 'D'
     If #RecordCount >= #MaxRecordsPerDiskette
        do Open-stFile
     End-If
  End-If

  move #State_Wages to $State_Wages   09999999999
  move #State_Tax   to $State_Tax     09999999999

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'AL'
      do AL-Specific('Write-S-Record')
      Break
    When = 'GA'
      do GA-Specific('Write-S-Record')
      Break
    When = 'IN'
      do IN-Specific('Write-S-Record')
      Break
    When = 'KY'
      do KY-Specific('Write-S-Record')
      Break
    When = 'MD'
      do MD-Specific('Write-S-Record')
      Break
    When = 'ME'
      do ME-Specific('Write-S-Record')
      Break
    When = 'MI'
      do MI-Specific('Write-S-Record')
      Break
    When = 'MO'
      do MO-Specific('Write-S-Record')
      Break
    When = 'MS'
      do MS-Specific('Write-S-Record')
      Break
    When = 'NJ'
      do NJ-Specific('Write-S-Record')
      Break
    When = 'NM'
      do NM-Specific('Write-S-Record')
      Break
    When = 'OH'
      do OH-Specific('Write-S-Record')
      Break
    When = 'OR'
      do OR-Specific('Write-S-Record')
      Break
    When = 'PA'
      do PA-Specific('Write-S-Record')
      Break
    When-Other
      do Write-RS-Record
      do After-RS-Record
      Break
  End-Evaluate

End-Procedure Write-S-Record

!***********************************************************************
! Procedure Write-S-Record-from-Local
!***********************************************************************
Begin-Procedure Write-S-Record-from-Local

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'IN'
      do IN-Specific('Write-S-Record-from-Local')
      Break
    When = 'NC'
      do NC-Specific('Write-S-Record-from-Local')
      Break
    When = 'OH'
      do OH-Specific('Write-S-Record-from-Local')
    When-Other
      Break
  End-Evaluate

  move 0 to #State_Wages
  move 0 to #State_Tax
  move 0 to #Local_Wages
  move 0 to #Local_Tax
  move 0 to #State_EIC

End-Procedure Write-S-Record-from-Local

!***********************************************************************
! Procedure Write-T-Record
!***********************************************************************
Begin-Procedure Write-T-Record

  move #Count_T to $Count_T  0999999

  If $FileType = 'D'
     If #RecordCount >= #MaxRecordsPerDiskette
        do Open-stFile
     End-If
  End-If

! The following Evaluate Statement calls State Specific procedures in RSISTCD.SQC and
! executes code within those procedures based on the $Proc_Name variable
! passed with the 'Do' statement.

  Evaluate $W2_State
    When = 'CO'
      do CO-Specific('Write-T-Record')
      Break
    When = 'DE'
      do DE-Specific('Write-T-Record')
      Break
    When = 'MD'
      do MD-Specific('Write-T-Record')
      Break
    When = 'ME'
      do ME-Specific('Write-T-Record')
      Break
    When = 'PA'
      do PA-Specific('Write-T-Record')
      Break
    When = 'LA'
      do LA-Specific('Write-T-Record')
      Break
    When = 'NC'
      do NC-Specific('Write-T-Record')
      Break
    When = 'NM'
      do NM-Specific('Write-T-Record')
      Break
    When = 'VA'
      do VA-Specific('Write-T-Record')
      Break
    When = 'WI'
      do WI-Specific('Write-T-Record')
      Break
    When-Other
      do Before-RT-Record
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      Break
  End-Evaluate

End-Procedure Write-T-Record

!***********************************************************************
! Procedure Write-U-Record
!***********************************************************************
Begin-Procedure Write-U-Record

  If $FileType = 'D'
     If #RecordCount >= #MaxRecordsPerDiskette
        do Open-stFile
     End-If
  End-If

  do Before-RU-Record

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  do Zero-U-Record

End-Procedure Write-U-Record

!***********************************************************************
! Procedure Write-W-Record
!***********************************************************************
Begin-Procedure Write-W-Record

If $FileType = 'D'
   If #RecordCount >= #MaxRecordsPerDiskette
      do Open-stFile
   End-If
End-If

  do Before-RW-Record

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  add 1 to #Count_W

End-Procedure Write-W-Record

!***********************************************************************
! Procedure Assign-Year-End-Variables
!***********************************************************************
Begin-Procedure Assign-Year-End-Variables

  let $YE_Fed_Wages               = '01'
  let $YE_Fed_Tax                 = '02'
  let $YE_SS_Wages                = '03'
  let $YE_SS_Tax                  = '04'
  let $YE_Med_Wages               = '05'
  let $YE_Med_Tax                 = '06'
  let $YE_SS_Tips                 = '07'
  let $YE_Alloc_Tips              = '08'
  let $YE_Adv_EIC                 = '09'
  let $YE_Dep_Care                = '10'
  let $YE_Non_Qual_457_Y          = '11A'
  let $YE_Non_Qual_457_N          = '11B'
  let $YE_Uncoll_SS_Tax_On_Tips   = '12A'
  let $YE_Uncoll_Med_Tax_On_Tips  = '12B'
  let $YE_Group_Term_LIfe         = '12C'
  let $YE_401K                    = '12D'
  let $YE_403B                    = '12E'
  let $YE_408K6                   = '12F'
  let $YE_457B                    = '12G'
  let $YE_501C18D                 = '12H'
  let $YE_Uncoll_SS_Tax_GTL       = '12M'
  let $YE_Uncoll_Med_Tax_GTL      = '12N'
  let $YE_NonTaxable_Combat_Pay   = '12Q'
  let $YE_Med_Svgs_Acct           = '12R'
  let $YE_408P_Simple_Retirement  = '12S'
  let $YE_Adoption_Exp            = '12T'
  let $YE_NonStatutory_Stock_Opt  = '12V'
  let $YE_HSA_Employer_Contrib    = '12W'
  let $YE_Non_Qual_409A_Deferral  = '12Y'
  let $YE_Non_Qual_409A_Income    = '12Z'
  let $YE_Roth_401k               = '12AA'
  let $YE_Roth_403b               = '12BB'
  let $Ye_Er_Hlth_Cvg             = '12DD'
  let $YE_OtherB                  = '14B'   ! <-- Not Mapped
  let $YE_OtherC                  = '14C'
  let $YE_OtherD                  = '14D'
  let $YE_OtherE                  = '14E'
  let $YE_OtherF                  = '14F'   ! <-- Not Mapped
  let $YE_OtherG                  = '14G'
  let $YE_OtherH                  = '14H'
  let $YE_OtherYL                 = '14YL'
  let $YE_Other_WEIC              = '14YM'  ! <-- Not Mapped
  let $YE_OtherYN                 = '14YN'  ! <-- Not Mapped
  let $YE_OtherYT                 = '14YT'  ! <-- Not Mapped
  let $YE_OtherZN                 = '14ZN'  ! <-- Not Mapped
  let $YE_State                   = '15'    ! <-- Not Mapped
  let $YE_State_ID                = '15A'   ! <-- Not Mapped
  let $YE_State_Wages             = '16'
  let $YE_State_Tax               = '17'
  let $YE_Local_Wages             = '18'
  let $YE_Local_Tax               = '19'
  let $YE_Locality                = '20'    ! <-- Not Mapped

End-Procedure Assign-Year-End-Variables

!***********************************************************************
! Procedure After-RO-Record
!***********************************************************************
Begin-Procedure After-RO-Record

  add #Alloc_TIPS             to #Alloc_TIPS_U
  add #Uncoll_Tax_On_Tips     to #Uncoll_Tax_On_Tips_U
  add #Med_Svgs_Acct          to #Med_Svgs_Acct_U
  add #408P_Simple_Retirement to #408P_Simple_Retirement_U
  add #Adoption_Exp           to #Adoption_Exp_U
  add #Fed_Wages_PR           to #Fed_Wages_PR_U
  add #Commissions_PR         to #Commissions_PR_U
  add #Allow_Subj_Tax_PR      to #Allow_Subj_Tax_PR_U
  add #Tips_Subj_Tax_PR       to #Tips_Subj_Tax_PR_U
  add #Total_Comm_Allow_Tips  to #Total_Comp_PR_U
  add #Fed_Tax_PR             to #Fed_Tax_PR_U
  add #Retire_Fund_Contrib_PR to #Retire_Fund_Contrib_PR_U
  add #Fed_Wages_TY           to #Fed_Wages_TY_U
  add #Fed_Tax_TY             to #Fed_Tax_TY_U
  add #Uncoll_SS_Tax_GTL      to #Uncoll_SS_Tax_GTL_U
  add #Uncoll_Med_Tax_GTL     to #Uncoll_Med_Tax_GTL_U
  add #Non_Qual_409A_Income   to #409A_Inc_NQ_Def_Comp_U
  add 1                       to #RecordCount
  add 1                       to #Tot_Record_Count
  add 1                       to #Count_U

End-Procedure After-RO-Record

!***********************************************************************
! Procedure After-RS-Record
!***********************************************************************
Begin-Procedure After-RS-Record

  add 1            to #RecordCount
  add 1            to #Tot_Record_Count
  add 1            to #Count_S
  add 1            to #S_Count_F
  add #State_Wages to #State_Wages_T
  add #State_Tax   to #State_Tax_T
  add #Local_Wages to #Local_Wages_T
  add #Local_Tax   to #Local_Tax_T
  add #State_Wages to #State_Wages_F
  add #State_Tax   to #State_Tax_F
  add #Local_Wages to #Local_Wages_F
  add #Local_Tax   to #Local_Tax_F
  add 1            to #Count_S_PA
  add #State_Wages to #State_Wages_T_PA
  add #State_Tax   to #State_Tax_T_PA
  add 1            to #S_Count_F_PA
  add #State_Wages to #State_Wages_F_PA
  add #State_Tax   to #State_Tax_F_PA

End-Procedure After-RS-Record

!***********************************************************************
! Procedure After-RW-Record
!***********************************************************************
begin-procedure After-RW-Record

  add #Fed_Wages                  to #Fed_Wages_T
  add #Fed_Tax                    to #Fed_Tax_T
  add #SS_Wages                   to #SS_Wages_T
  add #SS_Tax                     to #SS_Tax_T
  add #Med_Wages                  to #Med_Wages_T
  add #Med_Tax                    to #Med_Tax_T
  add #SS_Tips                    to #SS_Tips_T
  add #Adv_EIC                    to #Adv_EIC_T
  add #Dep_Care                   to #Dep_Care_T
  add #Non_Qual_457_Y             to #Non_Qual_457_Y_T
  add #Non_Qual_457_N             to #Non_Qual_457_N_T
  add #Group_Term_LIfe            to #Group_Term_ER_Cost_T
  add #401K                       to #401K_T
  add #403B                       to #403B_T
  add #408K6                      to #408K6_T
  add #457B                       to #457B_T
  add #501C18D                    to #501C18D_T
  add #Nonstatutory_Stock_Options to #Nonstatutory_Stock_Options_T
  add #HSA_Employer_Contrib       to #HSA_Employer_Contrib_T
  add #Combat_Pay                 to #Combat_Pay_T
  add #Non_Qual_409A_Deferral     to #Non_Qual_409A_Deferral_T
  add #Roth_401K                  to #Roth_401K_T
  add #Roth_403B                  to #Roth_403B_T
  add #Er_Hlth_Cvg                to #Er_Hlth_Cvg_T

End-Procedure After-RW-Record

!***********************************************************************
! Procedure Before-RO-Record
!***********************************************************************
Begin-Procedure Before-RO-Record

  move #Alloc_TIPS             to $Alloc_TIPS               09999999999
  move #Uncoll_Tax_On_Tips     to $Uncoll_Tax_On_Tips       09999999999
  move #Med_Svgs_Acct          to $Med_Svgs_Acct            09999999999
  move #408P_Simple_Retirement to $408P_Simple_Retirement   09999999999
  move #Adoption_Exp           to $Adoption_Exp             09999999999
  move #Uncoll_SS_Tax_GTL      to $Uncoll_SS_Tax_GTL        09999999999
  move #Uncoll_Med_Tax_GTL     to $Uncoll_Med_Tax_GTL       09999999999
  move #Fed_Wages_PR           to $Fed_Wages_PR             09999999999
  move #Commissions_PR         to $Commissions_PR           09999999999
  move #Allow_Subj_Tax_PR      to $Allow_Subj_Tax_PR        09999999999
  move #Tips_Subj_Tax_PR       to $Tips_Subj_Tax_PR         09999999999
  move #Total_Comm_Allow_Tips  to $Total_Comp_PR            09999999999
  move #Fed_Tax_PR             to $Fed_Tax_PR               09999999999
  move #Retire_Fund_Contrib_PR to $Retire_Fund_Contrib_PR   09999999999
  move #Fed_Wages_TY           to $Fed_Wages_TY             09999999999
  move #Fed_Tax_TY             to $Fed_Tax_TY               09999999999
  move #Non_Qual_409A_Income   to $409A_Inc_NQ_Def_Comp     09999999999

End-Procedure Before-RO-Record

!***********************************************************************
! Procedure Before-RT-Record
!***********************************************************************
Begin-Procedure Before-RT-Record

  move #Fed_Wages_T                  to $Fed_Wages_T                  099999999999999
  move #Fed_Tax_T                    to $Fed_Tax_T                    099999999999999
  move #SS_Wages_T                   to $SS_Wages_T                   099999999999999
  move #SS_Tax_T                     to $SS_Tax_T                     099999999999999
  move #Med_Wages_T                  to $Med_Wages_T                  099999999999999
  move #Med_Tax_T                    to $Med_Tax_T                    099999999999999
  move #SS_Tips_T                    to $SS_Tips_T                    099999999999999
  move #Adv_EIC_T                    to $Adv_EIC_T                    099999999999999
  move #Dep_Care_T                   to $Dep_Care_T                   099999999999999
  move #Non_Qual_457_Y_T             to $Non_Qual_457_Y_T             099999999999999
  move #Non_Qual_457_N_T             to $Non_Qual_457_N_T             099999999999999
  move #Group_Term_ER_Cost_T         to $Group_Term_ER_Cost_T         099999999999999
  move #Third_party_tax              to $Third_party_tax              099999999999999
  move #401K_T                       to $401K_T                       099999999999999
  move #403B_T                       to $403B_T                       099999999999999
  move #408K6_T                      to $408K6_T                      099999999999999
  move #457B_T                       to $457B_T                       099999999999999
  move #501C18D_T                    to $501C18D_T                    099999999999999
  move #Nonstatutory_Stock_Options_T to $Nonstatutory_Stock_Options_T 099999999999999
  move #HSA_Employer_Contrib_T       to $HSA_Employer_Contrib_T       099999999999999
  move #Combat_Pay_T                 to $Combat_Pay_T                 099999999999999
  move #Non_Qual_409A_Deferral_T     to $409A_Def_NQ_Def_Comp_T       099999999999999
  move #Roth_401K_T                  to $Roth_401K_T                  099999999999999
  move #Roth_403B_T                  to $Roth_403B_T                  099999999999999
  move #Er_Hlth_Cvg_T                to $Er_Hlth_Cvg_T                099999999999999

  Evaluate $W2_State
    When = 'RI'
      do RI-Specific('Before-RT-Record')
      Break
  End-Evaluate

  do Write-RT-Record

End-Procedure Before-RT-Record

!***********************************************************************
! Procedure Before-RU-Record
!***********************************************************************
Begin-Procedure Before-RU-Record

  move #Count_U                  to $Count_U                    0999999
  move #Alloc_TIPS_U             to $Alloc_TIPS_U               099999999999999
  move #Uncoll_Tax_On_Tips_U     to $Uncoll_Tax_On_Tips_U       099999999999999
  move #Med_Svgs_Acct_U          to $Med_Svgs_Acct_U            099999999999999
  move #408P_Simple_Retirement_U to $408P_Simple_Retirement_U   099999999999999
  move #Adoption_Exp_U           to $Adoption_Exp_U             099999999999999
  move #Uncoll_SS_Tax_GTL_U      to $Uncoll_SS_Tax_GTL_U        099999999999999
  move #Uncoll_Med_Tax_GTL_U     to $Uncoll_Med_Tax_GTL_U       099999999999999
  move #Fed_Wages_PR_U           to $Fed_Wages_PR_U             099999999999999
  move #Commissions_PR_U         to $Commissions_PR_U           099999999999999
  move #Allow_Subj_Tax_PR_U      to $Allow_Subj_Tax_PR_U        099999999999999
  move #Tips_Subj_Tax_PR_U       to $Tips_Subj_Tax_PR_U         099999999999999
  move #Total_Comp_PR_U          to $Total_Comp_PR_U            099999999999999
  move #Fed_Tax_PR_U             to $Fed_Tax_PR_U               099999999999999
  move #Retire_Fund_Contrib_PR_U to $Retire_Fund_Contrib_PR_U   099999999999999
  move #Fed_Wages_TY_U           to $Fed_Wages_TY_U             099999999999999
  move #Fed_Tax_TY_U             to $Fed_Tax_TY_U               099999999999999
  move #409A_Inc_NQ_Def_Comp_U   to $409A_Inc_NQ_Def_Comp_U     099999999999999

  do Write-RU-Record

End-Procedure Before-RU-Record

!***********************************************************************
! Procedure Before-RW-Record
!***********************************************************************
Begin-Procedure Before-RW-Record

  move #Fed_Wages                  to $Fed_Wages                  09999999999
  move #Fed_Tax                    to $Fed_Tax                    09999999999
  move #SS_Wages                   to $SS_Wages                   09999999999
  move #SS_Tax                     to $SS_Tax                     09999999999
  move #Med_Wages                  to $Med_Wages                  09999999999
  move #Med_Tax                    to $Med_Tax                    09999999999
  move #SS_Tips                    to $SS_Tips                    09999999999
  move #Adv_EIC                    to $Adv_EIC                    09999999999
  move #Dep_Care                   to $Dep_Care                   09999999999
  move #Non_Qual_457_Y             to $Non_Qual_457_Y             09999999999
  move #Non_Qual_457_N             to $Non_Qual_457_N             09999999999
  move #Group_Term_LIfe            to $Group_Term_ER_Cost         09999999999
  move #401K                       to $401K                       09999999999
  move #403B                       to $403B                       09999999999
  move #408K6                      to $408K6                      09999999999
  move #457B                       to $457B                       09999999999
  move #501C18D                    to $501C18D                    09999999999
  move #Nonstatutory_Stock_Options to $Nonstatutory_Stock_Options 09999999999
  move #HSA_Employer_Contrib       to $HSA_Employer_Contrib       09999999999
  move #Combat_Pay                 to $Combat_Pay                 09999999999
  move #Non_Qual_409A_Deferral     to $409A_Def_NQ_Def_Comp       09999999999
  move #Roth_401K                  to $Roth_401K                  09999999999
  move #Roth_403B                  to $Roth_403B                  09999999999
  move #Er_Hlth_Cvg                to $Er_Hlth_Cvg                09999999999
  move #RetirePlan                 to $RetirePlan                 9
  move #Third_Party_Sick_Ind       to $Third_Party_Sick_Ind       9

  do Write-RW-Record
  do After-RW-Record

End-Procedure Before-RW-Record

!***********************************************************************
! Procedure Zero-F-Record
!***********************************************************************
Begin-Procedure Zero-F-Record

  move 0 to #Count_F
  move 0 to #State_Wages_F
  move 0 to #State_Tax_F
  move 0 to #Local_Wages_F
  move 0 to #Local_Tax_F
  move 0 to #S_Count_F
  move 0 to #S_Count_F_PA
  move 0 to #State_Wages_F_PA
  move 0 to #State_Tax_F_PA  

End-Procedure Zero-F-Record

!***********************************************************************
! Procedure Zero-O-Record
!***********************************************************************
Begin-Procedure Zero-O-Record

  move 0 to #Alloc_TIPS
  move 0 to #Uncoll_Tax_On_Tips
  move 0 to #Med_Svgs_Acct
  move 0 to #408P_Simple_Retirement
  move 0 to #Adoption_Exp
  move 0 to #Fed_Wages_PR
  move 0 to #Commissions_PR
  move 0 to #Allow_Subj_Tax_PR
  move 0 to #Tips_Subj_Tax_PR
  move 0 to #Total_Comm_Allow_Tips
  move 0 to #Fed_Tax_PR
  move 0 to #Retire_Fund_Contrib_PR
  move 0 to #Fed_Wages_TY
  move 0 to #Fed_Tax_TY
  move 0 to #Uncoll_SS_Tax_GTL
  move 0 to #Uncoll_Med_Tax_GTL
  move 0 to #Non_Qual_409A_Income
  move $Sp1 to $Civil_Status_PR

End-Procedure Zero-O-Record

!***********************************************************************
! Procedure Zero-S-Record
!***********************************************************************
Begin-Procedure Zero-S-Record

  move 0 to #State_Wages
  move 0 to #State_Tax
  move 0 to #Local_Wages
  move 0 to #Local_Tax
  move 0 to #KY_KREDA
  move 0 to #KY_KJDA
  move 0 to #KY_KIRA
  move 0 to #KY_KIDA
  move 0 to #Cost_Pension_Annuity
  move 0 to #CODA_Plans
  move 0 to #Reimbursed_Expense
  move 0 to #Uncoll_SS_Tax_On_Tips
  move 0 to #Uncoll_Med_Tax_On_Tips
  move 0 to #Sal_Act_No_324
  move 0 to #State_EIC

End-Procedure Zero-S-Record

!***********************************************************************
! Procedure RE-CommonClear
!***********************************************************************
Begin-Procedure RE-CommonClear

  move $Sp4 to $A_Busi_Term_Ind
  move $Sp5 to $ErFrgn_State
  move $Sp5 to $ErFrgn_Zip
  move $Sp5 to $ErCountry_2Char
  move $Sp5 to $Empl_Type
  move $Sp5 to $Tax_Jurisdiction
  move $Sp5 to $Thrd_Pty_Sick

End-Procedure RE-CommonClear

!***********************************************************************
! Procedure RS-CommonClear
!***********************************************************************
Begin-Procedure RS-CommonClear

  move $Sp5 to $Suffix
  move $Sp5 to $EeAddress1
  move $Sp5 to $EeAddress2
  move $Sp5 to $City
  move $Sp5 to $US_State
  move $Sp5 to $US_Zip
  move $Sp5 to $US_ZipXtnsn
  move $Sp5 to $Frgn_State
  move $Sp5 to $Frgn_Zip
  move $Sp5 to $Country_2Char
  move $Sp1 to $Tax_Type_Cd

End-Procedure RS-CommonClear

!***********************************************************************
! Procedure Zero-T-Record
!***********************************************************************
Begin-Procedure Zero-T-Record
  move 0 to #Count_T
  move 0 to #Fed_Wages_T
  move 0 to #Fed_Tax_T
  move 0 to #SS_Wages_T
  move 0 to #SS_Tax_T
  move 0 to #Med_Wages_T
  move 0 to #Med_Tax_T
  move 0 to #SS_Tips_T
  move 0 to #Adv_EIC_T
  move 0 to #Dep_Care_T
  move 0 to #Non_Qual_457_Y_T
  move 0 to #Non_Qual_457_N_T
  move 0 to #Third_party_tax
  move 0 to #Group_Term_ER_Cost_T
  move 0 to #401K_T
  move 0 to #403B_T
  move 0 to #408K6_T
  move 0 to #457B_T
  move 0 to #501C18D_T
  move 0 to #State_Wages_T
  move 0 to #State_Tax_T
  move 0 to #Local_Wages_T
  move 0 to #Local_Tax_T
  move 0 to #Nonstatutory_Stock_Options_T
  move 0 to #HSA_Employer_Contrib_T
  move 0 to #Cost_Pension_Annuity_T
  move 0 to #CODA_Plans_T
  move 0 to #Reimbursed_Expense_T
  move 0 to #Combat_Pay_T
  move 0 to #Non_Qual_409A_Deferral_T
  move 0 to #Roth_401K_T
  move 0 to #Roth_403B_T
  move 0 to #Er_Hlth_Cvg_T
  move 0 to #Sal_Act_No_324_T
  move 0 to #SS_Tax_Tips_T
  move 0 to #Med_Tax_Tips_T
  move 0 to #Uncoll_SS_Tax_On_Tips_T
  move 0 to #Uncoll_Med_Tax_On_Tips_T
  move 0 to #Count_S_PA       
  move 0 to #State_Wages_T_PA
  move 0 to #State_Tax_T_PA  

End-Procedure Zero-T-Record

!***********************************************************************
! Procedure Blank-T-Record
!***********************************************************************
Begin-Procedure Blank-T-Record
  move $Sp7  to $Count_T
  move $Sp15 to $Fed_Wages_T
  move $Sp15 to $Fed_Tax_T
  move $Sp15 to $SS_Wages_T
  move $Sp15 to $SS_Tax_T
  move $Sp15 to $Med_Wages_T
  move $Sp15 to $Med_Tax_T
  move $Sp15 to $SS_Tips_T
  move $Sp15 to $Adv_EIC_T
  move $Sp15 to $Dep_Care_T
  move $Sp15 to $Non_Qual_457_Y_T
  move $Sp15 to $Non_Qual_457_N_T
  move $Sp15 to $Third_party_tax
  move $Sp15 to $Group_Term_ER_Cost_T
  move $Sp15 to $401K_T
  move $Sp15 to $403B_T
  move $Sp15 to $408K6_T
  move $Sp15 to $457B_T
  move $Sp15 to $501C18D_T
  move $Sp15 to $State_Wages_T
  move $Sp15 to $State_Tax_T
  move $Sp15 to $Local_Wages_T
  move $Sp15 to $Local_Tax_T
  move $Sp15 to $Nonstatutory_Stock_Options_T
  move $Sp15 to $HSA_Employer_Contrib_T
  move $Sp15 to $Third_party_tax
  move $Sp15 to $Cost_Pension_Annuity_T
  move $Sp15 to $CODA_Plans_T
  move $Sp15 to $Reimbursed_Expense_T
  move $Sp15 to $Combat_Pay_T
  move $Sp15 to $409A_Def_NQ_Def_Comp_T
  move $Sp15 to $Roth_401K_T
  move $Sp15 to $Roth_403B_T
  move $Sp15 to $Er_Hlth_Cvg_T
  move $Sp15 to $Sal_Act_No_324_T
  move $Sp15 to $SS_Tax_Tips_T
  move $Sp15 to $Med_Tax_Tips_T

End-Procedure Blank-T-Record

!***********************************************************************
! Procedure Zero-U-Record
!***********************************************************************
Begin-Procedure Zero-U-Record

  move 0 to #Count_U
  move 0 to #Alloc_TIPS_U
  move 0 to #Uncoll_Tax_On_Tips_U
  move 0 to #Med_Svgs_Acct_U
  move 0 to #408P_Simple_Retirement_U
  move 0 to #Adoption_Exp_U
  move 0 to #Uncoll_SS_GTL_U
  move 0 to #Uncoll_Med_GTL_U
  move 0 to #Fed_Wages_PR_U
  move 0 to #Commissions_PR_U
  move 0 to #Allow_Subj_Tax_PR_U
  move 0 to #Tips_Subj_Tax_PR_U
  move 0 to #Total_Comp_PR_U
  move 0 to #Fed_Tax_PR_U
  move 0 to #Retire_Fund_Contrib_PR_U
  move 0 to #Fed_Wages_TY_U
  move 0 to #Fed_Tax_TY_U
  move 0 to #Uncoll_SS_Tax_GTL_U
  move 0 to #Uncoll_Med_Tax_GTL_U
  move 0 to #409A_Inc_NQ_Def_Comp_U

End-Procedure Zero-U-Record

!***********************************************************************
! Procedure Zero-W-Record
!***********************************************************************
Begin-Procedure Zero-W-Record

  move 0  to #Fed_Wages
  move 0  to #Fed_Tax
  move 0  to #SS_Wages
  move 0  to #SS_Tax
  move 0  to #Med_Wages
  move 0  to #Med_Tax
  move 0  to #SS_Tips
  move 0  to #Adv_EIC
  move 0  to #Dep_Care
  move 0  to #Non_Qual_457_Y
  move 0  to #Non_Qual_457_N
  move 0  to #Group_Term_LIfe
  move 0  to #401K
  move 0  to #403B
  move 0  to #408K6
  move 0  to #457B
  move 0  to #501C18D
  move 0  to #Third_Party_Sick_Ind
  move 0  to #RetirePlan
  move 0  to #Nonstatutory_Stock_Options
  move 0  to #HSA_Employer_Contrib
  move 0  to #Combat_Pay
  move 0  to #Non_Qual_409A_Deferral
  move 0  to #Roth_401K
  move 0  to #Roth_403B
  move 0  to #Er_Hlth_Cvg
  move '' to $409A_Def_NQ_Def_Comp

End-Procedure Zero-W-Record

!***********************************************************************
! Procedure RW-CommonClear
!***********************************************************************
Begin-Procedure RW-CommonClear

  move $Sp5    to $City
  move $zero11 to #SS_Wages
  move $zero11 to #SS_Tax
  move $zero11 to #Med_Wages
  move $zero11 to #Med_Tax
  move $zero11 to #SS_Tips
  move $zero11 to #Adv_EIC
  move $zero11 to #Dep_Care
  move $zero11 to #401K
  move $zero11 to #403B
  move $zero11 to #408K6
  move $zero11 to #457B
  move $zero11 to #501C18D
  move $zero11 to #Non_Qual_457_Y
  move $zero11 to #Non_Qual_457_N
  move $zero11 to #Group_Term_ER_Cost
  move $zero11 to #Nonstatutory_Stock_Options
  move $zero11 to #HSA_Employer_Contrib
  move $zero11 to #NonTaxable_Combat_Pay
  move $zero11 to #Non_Qual_409A_Deferral
  move $zero11 to #Non_Qual_409A_Income
  move $zero11 to #Roth_401k
  move $zero11 to #Roth_403b
  move $zero11 to #Er_Hlth_Cvg
  move $Sp1    to $StatutoryEe
  move $zero1  to #RetirePlan
  move $zero1  to #Third_Party_Sick_Ind

End-Procedure RW-CommonClear

!***********************************************************************
! Procedure Clear-Space-Fields
!***********************************************************************
Begin-Procedure Clear-Space-Fields

  move $Sp8  to $EmployDate
  move $Sp8  to $SepDate
  move $Sp7  to $StateControlNumber
  move $Sp6  to $RptgPeriod
  move $Sp2  to $WorkWeeks
  move $Sp10 to $OtherStateData
  move $Sp2  to $Fed_Tax_AL
  move $Sp1  to $Tax_Type_CD
  move ''    to $SupplData1
  move ''    to $SupplData2

End-Procedure Clear-Space-Fields

!***********************************************************************
! Procedure Write-Error   !Record format for the TAX960ST Error Log File
!***********************************************************************
Begin-Procedure Write-Error

  write 20 from $Err_Msg:512 ! 1 - 512

End-Procedure Write-Error

!***********************************************************************
! Procedure Print-Columns
!***********************************************************************
Begin-Procedure Print-Columns
  Evaluate $Column_Hdr
    When = 'RA Record'
      let $out = 'RA Record'
      print $out                  (0,1)
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Break
    When = 'RE Record'
      let $out = 'RE Record'
      print $out                  (0,1)
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Break
    When = 'Employee Detail'
      print 'Company'             (0,1)
      print 'State EIN'           (,10)
      print 'W-2 Count'           (,32)
      print 'Employee Name'       (,43)
      print 'SSN'                 (,91)
      print 'State Wages'         (,107)
      print 'State Tax'           (,125)
      Evaluate $W2_State
        When = 'IN'
        When = 'OH'
          print 'Local Wages'       (,138)
          print 'Local Tax'         (,154)
          Break
      End-Evaluate
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Evaluate $Sub_Hdr
        When = ' '
          print 'Employee Detail'     (+2,1)
          Break
        When = 'Local Detail'
          !print nothing
          Break
      End-Evaluate
      Break
    When = 'State Company Totals'
      print 'Company'             (0,1)
      print 'State EIN'           (,10)
      print 'W-2 Count'           (,36)
      print 'State Wages'         (,107)
      print 'State Tax'           (,125)
      Evaluate $W2_State
      When = 'IN'
      When = 'OH'
        print 'Local Wages'         (,138)
        print 'Local Tax'           (,154)
        Break
      End-Evaluate
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Break
    When = 'RV Record'
      let $out = 'RV Record'
      print $out                  (0,1)
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Break
    When = 'File Totals'
      let $out = 'File Totals for State: ' || $W2_State
      print $out                  (0,1)
      let $Separator = rpad('',173,'_')
      print $Separator            (+1,1)
      Break
  End-Evaluate

End-Procedure Print-Columns

!***********************************************************************
! Procedure Heading
!***********************************************************************
Begin-Heading 5

  #Include 'stdhdg01.sqc'
  print 'Transmitter Company: '  (3,1)
  print $XCompany                (0,+2)
  print &X.Descr                 (0,+2)
  let $TaxYear = 'Tax Year ' || $CalYear
  print $TaxYear                 (3,)    center
  print 'Federal EIN: '          (4,1)
  move &X.Federal_EIN to $FederalEIN
  let #loc = length($FederalEIN)
  extract $Federal_EIN from $FederalEIN 0 #loc
  if #loc <> 9
     print '0'                   (0,+2)
     print $Federal_EIN          (0,0) edit X-XXXXXXX
  else
     print $Federal_EIN          (0,+2) edit XX-XXXXXXX
  end-if

End-Heading

#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'rsiw2ssa.sqc'  !Electronic File Format
#Include 'rsistcd.sqc'   !State Specific Code used by the TAX960ST
#Include 'rsiw2st.sqc'   !State Specific Record Types
#Include 'rsiemval.sqc'  !Validate-Email-Address procedure
