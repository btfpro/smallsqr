!***********************************************************************
! GEXBN835:  Open Enrollment - new benefits audit to support new requirement 
!            for TM's to provide proof of dependent eligibility       
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *        
! GEXBN835 :            New benefits audit                             *
!                                                                      *        
! Narrative:            New benefits audit to support new requirement 
!                       for TM's to provide proof of dependent eligibility                                                                    *
!                                                                      *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           *
!                                                                      *  
! SQL Tables:           PS_HEALTH_BENEFIT
!                       PS_BEN_PROG_PARTIC
!                       PS_HEALTH_DEPENDNT  
!                       PS_DEP_BEN_EFF                                 *
!                                                                      *
! Written by:           Siva Pudi                                      *       
!                                                                      *
! Normally Run:         Daily                                      *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                         Benefit Program                               *
!                         Benefit Plan                                  *
!                         Coverage Code                                 *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INIT  CSR     DATE            DESCRIPTION OF THE CHANGE              *
! S3    KXY     05/06/2010      Change efft to coverage_lect_dt
!S3    MXR     05/06/2010      Change efft to coverage_lect_dt
!***********************************************************************


begin-setup
declare-report gexbn835
  layout = gexbn835
end-declare

declare-layout gexbn835
      paper-size=(25,11)
      left-margin=0.25    right-margin=0.25
      top-margin=0.25     bottom-margin=0.25

end-declare

!begin-sql
!create table ps_gex_emp_dep_temp
!(emplid char(11),
!dependent_benef char(2))
!end-sql 


end-setup

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'   !Printer and Page-Size Initialization (Landscape)



#define 	#column1 	001
#define 	#column2 	008
#define 	#column3 	020
#define 	#column4 	026
#define 	#column5 	051
#define 	#column6 	076
#define 	#column7 	101
#define 	#column8 	116
#define 	#column9 	126
#define 	#column10 	136
#define 	#column11 	146
#define 	#column12	165
#define 	#column13 	185
#define 	#column14	200

!***********************************************************************
! Main Procedure
!***********************************************************************

Begin-Report
     
  do P100-Initialization
  do GET-EMP-HEALTH-BENEF
  do sendfile
  Do P300-Finalization
  !do sendmail
End-Report




Begin-Procedure P100-Initialization
#debug9 Show 'P100-Initialization'
  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc
  do Get-Run-Control	     !gexrnctl.sqc

  Let $ReportID      = 'GEXBN835'
  Let $ReportTitle   = 'DEPENDENT CERTIFICATION AUDIT'

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

  Let $GEXXX911_Benefit_Program_Alias = 'BPP.BENEFIT_PROGRAM'
  Let $GEXXX911_Plan_Type_Alias       = 'HB.PLAN_TYPE'
  Let $GEXXX911_Benefit_Plan_Alias    = 'HB.BENEFIT_PLAN'
   Let $GEXXX912_Plan_Type_Alias       = 'HB.PLAN_TYPE'
  Let $GEXXX912_Benefit_Plan_Alias    = 'HB.BENEFIT_PLAN'
  Let $GEXXX977_COVRG_CD_Alias        = 'HB.COVRG_CD' 
  Let $Gex_Coverage_Elect_Dt          = 'HB.COVERAGE_ELECT_DT'

  If $Prcs_process_instance = ''
    Do P110-SQRW-Run-Controls
  Else
    Do P120-Process-Scheduler-Run-Controls
  End-If

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show ' '
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  
  !Do Format-DateTime($X000_Where_Select_AsOfDate, $X000_Report_Heading_AsOfDate, {DEFDATE}, '', '')
  Let $X000_Order_By = 'Benefit Program, Benefit Plan, Name'

  Show ' '
  Show '$GEXXX911_Include_Benefit_Program_Display_Criteria  = ' $GEXXX911_Include_Benefit_Program_Display_Criteria
  Show '$X000_Where_Select_AsOfDate = ' $X000_Where_Select_AsOfDate
  Show ' '
  Do P130-Print-Cover-Page
  
  
  Do Print-Header-csv
  !Do Print-Header-lis
  begin-sql
  delete from ps_gex_emp_dep
  end-sql
  
  
End-Procedure P100-Initialization




Begin-Procedure P110-SQRW-Run-Controls
#debug9 Show 'P110-SQRW-Run-Controls'
  Display 'Enter Benefit Program/Plan Type/Benefit Program or leave blank to exit.'
  While 1=1
    Input $In-Benefit-Program Maxlen=3 'Benefit Program'
    Uppercase $In-Benefit-Program
    If Rtrim($In-Benefit-Program, ' ') = ''
      Break
    Else
      Input $In-Plan-Type Maxlen=2 'Plan Type'
      Uppercase $In-Plan-Type
      If Rtrim($In-Plan-Type, ' ') = ''
        Let $Include_Condition =   '(' || $GEXXX911_Benefit_Program_Alias || ' = ''' || $In-Benefit-Program || ''')'
      Else
        Input $In-Covrg-Code Maxlen=2 'Coverage Code'
        Uppercase $In-Covrg-Code
        If Rtrim($In-Covrg-Code ' ') = ''
          Let $Include_Condition = '(' || $GEXXX911_Benefit_Program_Alias || ' = ''' || $In-Benefit-Program || ''' And '
                                       || $GEXXX911_Plan_Type_Alias       || ' = ''' || $In-Plan-Type       || ''')'
        Else
          Let $Include_Condition = '(' || $GEXXX911_Benefit_Program_Alias || ' = ''' || $In-Benefit-Program || ''' And '
                                       || $GEXXX911_Plan_Type_Alias       || ' = ''' || $In-Plan-Type       || ''' And '
                                       || $GEXXX911_Benefit_Plan_Alias    || ' = ''' || $In-Benefit-Plan    || ''')'
        End-If
        Add 1 To #GEX_RC_BEN_PRGM_ROWS
        If #GEX_RC_BEN_PRGM_ROWS = 1
          Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = '(' || $Include_Condition
        Else
          Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA || ' Or '  || $Include_Condition
        End-If
      End-If
    End-If
  End-While

  If #GEX_RC_BEN_PRGM_ROWS = 0
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = '1=1'
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA || ')'
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA
  End-If

  !Do Ask-As-Of-Date
  !Let $X000_Where_Select_AsOfDate = $AsOfDate

 
End-Procedure

Begin-Procedure P120-Process-Scheduler-Run-Controls
#debug9 Show 'P120-Process-Scheduler-Run-Controls'
  Do GEXRCBN1-SELECT-PARAMETERS 

  Let $X000_Where_Select_AsOfDate = &GEX_RC_BEN.AsOfDate
   Let $Gex_Where_Elective_Date = '( '|| $Gex_Coverage_Elect_Dt || ' = ' ||'''' || &GEX_RC_BEN.AsOfDate || ''''|| ')'
  If Rtrim (&GEX_RC_BEN.AsOfDate, ' ') = ''
    Let $X000_Where_Select_AsOfDate = $AsOfToday
    let $yesdate = dateadd($current-date,'day',-1)
     Let $Gex_Where_Elective_Date = '(' || $Gex_Coverage_Elect_Dt || ' <= '''  || $AsOfToday || ''' or ' || $Gex_Coverage_Elect_Dt || ' <= ''' || $yesdate || ''')'
     show '******************** $Gex_Where_Elective_Date = ' $Gex_Where_Elective_Date 
  End-If

  Do GEXXX911-Select-Benefit-Program-Parameters     
  #debug9 show '$GEXXX911_Include_Benefit_Program_Criteria '   $GEXXX911_Include_Benefit_Program_Criteria
  do GEXXX912-Select-Benefit-Plan-Parameters
  #debug9 SHOW '$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA '  $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA
  Do GEXXX977-Select-COVRG-CD-Parameters
  #debug9 show '$GEXXX977_INCLUDE_COVRG_CD_CRITERIA '    $GEXXX977_INCLUDE_COVRG_CD_CRITERIA
  
End-Procedure



begin-procedure P130-Print-Cover-Page
#debug9 Show 'P130-Print-Cover-Page'
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
  Print '$GEXXX911_Include_Benefit_Program_Display_Criteria  = '  (+2,5)
  Print $GEXXX911_Include_Benefit_Program_Display_Criteria        (0,+2)
  Print '$AsOfDate :'                                             (+2,5)
 ! Print $X000_Report_Heading_AsOfDate                             (0,+2)
  Print $AsOfToday                                                 (0,+2)
  Print '$GEXXX977_INCLUDE_COVRG_CD_CRITERIA '                    (+2,5)
  Print $GEXXX977_INCLUDE_COVRG_CD_CRITERIA                       (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN:'                         (+5,2)
  Print $X000_Order_By                                            (+2,5)

  Let #PAGE-COUNT = 0
  NEW-PAGE
  Let #PAGE-COUNT = 1
End-Procedure
!***************************************************************
! Opens the LIS file for writing and writes the header row.
!***************************************************************
Begin-Heading 7
       
    !Print 'Benefits Dependent Certified Audit Report '     (1,1) center
    #include 'stdhdg01.sqc'
    Print 'BEN '     		(+2,{#column1})
    Print 'EMPLID'	        (+0,{#column2})
    Print 'EMPL'     		(+0,{#column3})
    Print 'NAME'    		(+0,{#column4})
    Print 'ADDRESS1'    	(+0,{#column5})
    Print 'ADDRESS2'    	(+0,{#column6})
    Print 'CITY'    	        (+0,{#column7})
    Print 'STATE'    		(+0,{#column8})
    Print 'ZIP'                 (+0,{#column9})
    Print 'DEPENDENT'           (+0,{#column10})
    Print 'DEPENDENT'           (+0,{#column11})
    Print 'DEPENDENT'    	(+0,{#column12})
    Print 'DEPENDENT'    	(+0,{#column13})
    Print 'DEPENDENT'   	(+0,{#column14})
    Print 'PGM'     		(+1,{#column1})
    Print 'RCD'     		(+0,{#column3})
    Print 'CODE'                (+0,{#column9})
    Print 'ID'                (+0,{#column10})
    Print 'NAME'              (+0,{#column11})
    Print 'RELATIONSHIP'    	(+0,{#column12})
    Print 'BIRTHDATE'    	(+0,{#column13})
    Print 'CERTIFIED'    	(+0,{#column14})
    

End-Heading

!***************************************************************
! Opens the CSV file for writing and writes the header row.
!***************************************************************
Begin-Procedure Print-Header-csv
        
        let $filename = 'gexbn835.csv'
        open $filename
        as 1
        for-writing
        !record=65:fixed
        record=200:fixed
        status=#filestat
        
        encode ',' into $delimit
     string 'BEN PGM' 'EMPLID' 'EMPL RCD' 'NAME' 'ADDRESS1' 'ADDRESS2' 'CITY' 'STATE' 'ZIP CODE' 'DEPENDENT ID' 'DEPENDENT NAME' 'DEPENDENT RELATIONSHIP' 'DEPENDENT BIRTHDATE' 'DEPENDENT CERTIFIED' BY $delimit into $head 
  
     write 1 from $head
    
End-Procedure

BEGIN-PROCEDURE GET-EMP-HEALTH-BENEF


 Let $prevemplid = ' '
BEGIN-SELECT distinct
HB.EMPLID
BPP.BENEFIT_PROGRAM
HB.EMPL_RCD
HB.COVERAGE_ELECT
HB.EFFDT
HB.PLAN_TYPE
PN.NATIONAL_ID
PD.LAST_NAME
PD.FIRST_NAME
PD.MIDDLE_NAME
PD.ADDRESS1
PD.ADDRESS2
PD.CITY
PD.STATE
PD.POSTAL

   Move &PN.NATIONAL_ID to $EMPLID '999999999'
   Let $empl_rcd = &HB.EMPL_RCD
   Let $Benpgm = LTRIM(RTRIM(&BPP.BENEFIT_PROGRAM,' '),' ')
   Let $Addr1   = LTRIM(RTRIM(&PD.ADDRESS1,' '),' ')
   Let $lastname   = LTRIM(RTRIM(&PD.LAST_NAME,' '),' ')
   Let $firstname   = LTRIM(RTRIM(&PD.first_NAME,' '),' ')
   Let $middlename   = LTRIM(RTRIM(&PD.MIDDLE_NAME,' '),' ')
   lET $name = $lastname ||' ' || $firstname ||' ' || $middlename
   Let $Addr2   = LTRIM(RTRIM(&PD.ADDRESS2,' '),' ')
   Let $City   = LTRIM(RTRIM(&PD.CITY,' '),' ')
   Let $State   = LTRIM(RTRIM(&PD.STATE,' '),' ')
  
  
   if &hb.emplid <> $prevemplid
    do flush-temp
   end-if
   
 DO GET-DEPENDENT
 let $prevemplid = &hb.emplid
 show '$prevemplid ' $prevemplid 
 
FROM PS_HEALTH_BENEFIT HB,PS_BEN_PROG_PARTIC BPP,PS_PERS_NID PN,PS_PERSONAL_DATA PD
WHERE  HB.EMPLID = BPP.EMPLID 
     AND HB.EMPL_RCD = BPP.EMPL_RCD 
     AND HB.COBRA_EVENT_ID = BPP.COBRA_EVENT_ID 
    ! AND HB.EFFDT = 
     AND HB.COVERAGE_ELECT = 'E'  
    AND HB.COVERAGE_ELECT_DT  = TO_CHAR(SYSDATE-1,'DD-MON-YYYY')
        !(SELECT MAX(A_ED.COVERAGE_ELECT_DT) FROM PS_HEALTH_BENEFIT A_ED 
        !WHERE HB.EMPLID = A_ED.EMPLID 
        !  AND HB.EMPL_RCD = A_ED.EMPL_RCD 
        !  AND HB.COBRA_EVENT_ID = A_ED.COBRA_EVENT_ID 
        !  AND HB.PLAN_TYPE = A_ED.PLAN_TYPE 
        !  AND HB.BENEFIT_NBR = A_ED.BENEFIT_NBR 
          !  AND A_ED.EFFDT <= SYSDATE)
        !  AND A_ED.COVERAGE_ELECT_DT <= TO_CHAR(SYSDATE-1,'DD-MON-YYYY')) 
     AND [$GEXXX911_Include_Benefit_Program_Criteria] 
     AND  [$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA]
     AND [$GEXXX977_Include_Covrg_CD_Criteria]
   !  AND [$Gex_Where_Elective_Date]
     
     !AND (HB.COVERAGE_ELECT_DT = TO_CHAR(SYSDATE,'DD-MON-YYYY') OR HB.COVERAGE_ELECT_DT = TO_CHAR(SYSDATE-1,'DD-MON-YYYY'))
     AND BPP.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_BEN_PROG_PARTIC   B_ED 
        WHERE BPP.EMPLID = B_ED.EMPLID 
          AND BPP.EMPL_RCD = B_ED.EMPL_RCD 
          AND BPP.COBRA_EVENT_ID = B_ED.COBRA_EVENT_ID 
          AND B_ED.EFFDT <= SYSDATE) 
     AND HB.EMPLID = PN.EMPLID
     AND HB.EMPLID = PD.EMPLID  
     !and HB.EMPLID IN ('172445001','172446588','172523264','172646883')
     !and HB.EMPLID IN ('179689208', '145723792', '374946287', '415415964') !vendkxy
     order by 1
END-SELECT
END-PROCEDURE

BEGIN-PROCEDURE GET-DEPENDENT
   
BEGIN-SELECT distinct
B.DEPENDENT_BENEF 
A.EMPLID
A.EFFDT
B.LAST_NAME
B.FIRST_NAME
B.MIDDLE_NAME
B.RELATIONSHIP
B.BIRTHDATE
B.GEX_DEP_CERT 

   Let $lastname   = LTRIM(RTRIM(&B.LAST_NAME,' '),' ')
   Let $firstname   = LTRIM(RTRIM(&B.first_NAME,' '),' ')
   Let $middlename   = LTRIM(RTRIM(&B.MIDDLE_NAME,' '),' ')
   lET $depname = $lastname ||' ' || $firstname ||' ' || $middlename
   
  if &A.EMPLID <> $prevemplid or $prevemplid = ' '
  show 'in new emplid ' &A.EMPLID
  ! do flush-temp
   do insert-temp
   do getxlat
   DO PRINT-CSV
   DO PRINT-LIS
  else 
   show 'in exist emplid ' $prevemplid
   do checkdependent
    show '$exists ' &b.dependent_benef $exists
   if $exists ='N'
    do insert-temp
    do getxlat
    DO PRINT-CSV
    DO PRINT-LIS
   end-if
  end-if
   
   
 
FROM PS_HEALTH_DEPENDNT  A,PS_DEPENDENT_BENEF B
  WHERE A.EMPLID  = &HB.EMPLID
  AND A.EFFDT     = &HB.EFFDT
  AND A.PLAN_TYPE = &HB.PLAN_TYPE
  AND A.EMPLID = B.EMPLID 
  AND A.DEPENDENT_BENEF = B.DEPENDENT_BENEF 
  !AND B.GEX_DEP_CERT = 'N' !vendkxy
  AND (B.GEX_DEP_CERT = 'N'  or B.GEX_DEP_CERT = ' ' )!vendkxy
     
order by 1     
                
END-SELECT
END-PROCEDURE
  
  
begin-procedure flush-temp
begin-sql
delete from ps_gex_emp_dep
end-sql
 commit
end-procedure
  
begin-procedure insert-temp
 show 'inserting ' &A.EMPLID &B.DEPENDENT_BENEF
begin-sql ON-ERROR=SQL-Error-Found('insert into temp')
insert into ps_gex_emp_dep (emplid,dependent_benef) values 
(&A.EMPLID,
&B.DEPENDENT_BENEF)
end-sql
commit
end-procedure


begin-procedure checkdependent
 Let $exists = 'N'
begin-select
temp.dependent_benef
 show 'in check depenedenty'

 let $exists= 'Y'
 
from ps_gex_emp_dep temp
 where temp.emplid = &A.EMPLID 
 and temp.dependent_benef = &B.DEPENDENT_BENEF
end-select
end-procedure

    
BEGIN-PROCEDURE getxlat
begin-select
XLAT.FIELDVALUE, 
XLAT.XLATLONGNAME, 
XLAT.XLATSHORTNAME
  
FROM PSXLATITEM XLAT
 WHERE XLAT.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PSXLATITEM A_ED
        WHERE XLAT.FIELDNAME = A_ED.FIELDNAME
          AND XLAT.FIELDVALUE = A_ED.FIELDVALUE
          AND A_ED.EFFDT <= SYSDATE)
     AND XLAT.EFF_STATUS = 'A'
     AND XLAT.FIELDNAME = 'RELATIONSHIP'
     AND XLAT.FIELDVALUE = &B.RELATIONSHIP
end-select
end-procedure

BEGIN-PROCEDURE PRINT-CSV
 
     string $Benpgm $emplid $EMPL_RCD $NAME $ADDR1 $ADDR2 $CITY $STATE &PD.POSTAL &B.DEPENDENT_BENEF $DEPNAME &XLAT.XLATLONGNAME &B.BIRTHDATE &B.GEX_DEP_CERT  BY $delimit into $data
     
     write 1 from $data  	        
END-PROCEDURE

BEGIN-PROCEDURE PRINT-LIS
    
    
    Print &BPP.BENEFIT_PROGRAM          (+1,{#column1})
    Print $emplid			(+0,{#column2})
    Print &HB.EMPL_RCD     		(+0,{#column3})
    Print $name    		        (+0,{#column4})
    Print &PD.ADDRESS1    	        (+0,{#column5})
    Print &PD.ADDRESS2   	        (+0,{#column6})
    Print &PD.CITY    	                (+0,{#column7})
    Print &PD.STATE    			(+0,{#column8})
    Print &PD.POSTAL                    (+0,{#column9})
    Print &B.DEPENDENT_BENEF            (+0,{#column10})
    Print $DEPNAME                       (+0,{#column11})
    Print &XLAT.XLATLONGNAME    	(+0,{#column12})
    Print &B.BIRTHDATE    	        (+0,{#column13})
    Print &B.GEX_DEP_CERT    	        (+0,{#column14})
END-PROCEDURE

Begin-Procedure P300-Finalization
 ! begin-sql
 ! drop table ps_gex_emp_dep_temp
 ! end-sql
  Do P300-Close-File
  Do Reset                   !reset.sqc
  Do Stdapi-Term             !stdapi.sqc

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'
End-Procedure



begin-procedure P300-Close-File
#debug9 Show 'P300-Close-File'
  close 1
  
end-procedure

begin-procedure SendFile
 do gettolist
 do sendemail
 !do sendmail
end-procedure

begin-procedure SendEmail
!let $tolist=' Molly.Singley@gianteagle.com'
 
     Let $subject='Dependent Audit Report'
     Let $body_txt='Please Find the attached Dependent Audit Report'

   
     !let $SENDMAILCOMMAND = ' uuencode ' || $filename || ' ' || 'gexbn835.csv' || ' | mailx -s ' || '"Dependent Audit Report"' ||  $tolist 
     !1289792 - 9/29/2016 - Ptools and OS Upgrade - Begin
     !let $SENDMAILCOMMAND = 'psmail -TO"'||$tolist||'" -SUBJECT"'||$subject||'" -BODY"'||$body_txt||'" -FILE"'||$filename
      let $SENDMAILCOMMAND = 'psmail -TO"'||$tolist||'" -SUBJECT"'||$subject||'" -BODY"'||$body_txt||'" -FILE"'||$filename||'"'
     !1289792 - 9/29/2016 - Ptools and OS Upgrade - End
     display $SENDMAILCOMMAND
     CALL SYSTEM USING $SENDMAILCOMMAND #system_status

       if #system_status <> 0
            add 1 to #errorcount
            display 'eMail of ' noline
            display $filename noline
           display ' failed'
          STOP
        else
           display $file1
          display ' was emailed successfully'
       end-if
end-procedure


begin-procedure gettolist
 let $first = 'Y'
 LET $tolist = ' '
 !iSDVDZK Added the code 
    Let $OprID                = '''' || $Prcs_OprID       || ''''
    Let $Run_Cntl_ID          = '''' || $Prcs_Run_Cntl_ID || ''''
   
    
begin-select
EM.EMAILID
 
 
  let $tolist = $tolist || Rtrim(&EM.EMAILID, ' ') || ';'
  
  
from PS_GEX_RC_835EMAIL EM 
 where EM.OPRID = [$OprID]
 and EM.RUN_CNTL_ID = [$Run_Cntl_ID]
 
end-select
 !show '$tolist'  $tolist
end-procedure

!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 
!  do error-found
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure

!#include 'askaod.sqc'    !Ask-As-Of-Date procedure

!#include 'gexpt215.sqc'
#include 'stdapi.sqc'    !Process Scheduler Interface
#include 'reset.sqc'     !Reset Printer Procedure
#include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'datemath.sqc'  !Routines for date math
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#include 'gexrnctl.sqc'  !Get Asofdate from Run Control Page
#include 'gexxx911.sqc'  !Get benefit_program multiple row table
#include 'gexxx920.sqc'  !Get ben single row run control
#include 'gexxx977.sqc'  !Get Multiple Coverage Code Run Control
#include 'askaod.sqc'    !Ask-As-Of-Date routine
#include 'gexxx912.sqc'  !Get Plan Type Multiples Run Controls

