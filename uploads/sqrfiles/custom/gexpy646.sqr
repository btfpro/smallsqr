!***********************************************************************
! GEXPY646.SQR - Giant Eagle version of LTTax Withholding Interface    *
! ---------------------------------------------------------------------*
!
!  IPAYO34I.SQR L&T Tax System (tax withholding by pay cycle)          *
!***********************************************************************
!
!***********************************************************************
!                            L&T Tax System                            *
!                    Tax Withholdings by Pay Cycle                     *
!                           Interface Program                          *
!                                                                      *
!          June 8, 1999      - Revised for PeopleTools 7.04 Date Format*
!          September 28, 1999- Revised for Common PayMaster (BNX/MVS)  *
!          January 4, 1999   - Revised for Common PayMaster (BNX/FMS)  *
!
!    CJH    10/30/2001 - correct output record length to 62            *
!    CJH    01/08/2002 - correct C909 employee extract data            *
!                                                                      *
!    SXD    08/22/2007   No changes made to sqr, moved as it is to 9.0 *
!GEXHR_848_E116967		01/09/2012   ISDVAKG Exclude PA Local TAX rows 	 * 	 
!***********************************************************************
#include 'setenv.sqc'
#include 'setup02.sqc'
!*********************************************************************
!                       SUBSTITUTION VARIABLES
!*********************************************************************
#Define     Dash            '-'
#Define     Space           ' '
#Define     Asterisk        '*'
#Define     Back-Slant      '\'
!*********************************************************************
!                          REPORT HEADINGS
!*********************************************************************
begin-heading 8
    #include 'stdhdg01.sqc'
    Print   'Pay'            (+2,   8,   3)
    Print   'Pay Per'        (0,   14,   7)
    Print   'Check'          (0,   26,   5)
    Print   'State'          (0,   34,   5)
    Print   'Locality'       (0,   41,   8)
    Print   'Tax'            (0,   51,   5)
    Print   'Conv'           (0,   56,   4)
    Print   '****** T A X  ******'    (0,   66,  20)
    Print   '****** W A G E  ******'  (0,   89,  22)
    Print   'Off'            (0,  113,   3)
    Print   'Page'           (0,  118,   4)
    Print   'Line'           (0,  124,   4)
    Print   'Emp'            (0,  132,   3)
    Print   'Line'           (0,  153,   4)
    Print   'Co'             (+1,   2,   2)
    Print   'Grp'            (0,    8,   3)
    Print   'End Date'       (0,   14,   8)
    Print   'Date'           (0,   27,   4)
    Print   'Code'           (0,   35,   4)
    Print   'Code'           (0,   43,   4)
    Print   'Class'          (0,   50,   5)
    Print   'Code'           (0,   56,   4)
    Print   'Type'           (0,   66,   4)
    Print   'Amount'         (0,   80,   6)
    Print   'Type'           (0,   89,   4)
    Print   'Amount'         (0,  105,   6)
    Print   'Cyc'            (0,  113,   3)
    Print   'Nbr'            (0,  119,   3)
    Print   'Nbr'            (0,  125,   3)
    Print   'Nbr'            (0,  132,   3)
    Print   'Employee Name'  (0,  138,  13)
    Print   'Stat'           (0,  153,   4)
    Print   'Error Message'  (0,  159,  13)
    Print   {Dash}           (+1,   2,   3)     Fill
    Print   {Dash}           (0,    8,   3)     Fill
    Print   {Dash}           (0,   14,   8)     Fill
    Print   {Dash}           (0,   25,   8)     Fill
    Print   {Dash}           (0,   35,   4)     Fill
    Print   {Dash}           (0,   41,   8)     Fill
    Print   {Dash}           (0,   50,   5)     Fill
    Print   {Dash}           (0,   56,   4)     Fill
    Print   {Dash}           (0,   66,   4)     Fill
    Print   {Dash}           (0,   80,   6)     Fill
    Print   {Dash}           (0,   89,   4)     Fill
    Print   {Dash}           (0,  105,   6)     Fill
    Print   {Dash}           (0,  113,   3)     Fill
    Print   {Dash}           (0,  118,   4)     Fill
    Print   {Dash}           (0,  125,   4)     Fill
    Print   {Dash}           (0,  132,   3)     Fill
    Print   {Dash}           (0,  138,  13)     Fill
    Print   {Dash}           (0,  153,   4)     Fill
    Print   {Dash}           (0,  159,  13)     Fill
end-heading
!*********************************************************************
!                           MAIN ROUTINE
!*********************************************************************
begin-report
    Do Get-Current-DateTime
! GE
    Do Init-datetime
    do Stdapi-Init
! GE
    Do Get-Parms                          ! REW001
    Do Open-Interface-File
    Do Initialize-Report
    display 'Process Non Common PayMaster Rows'
    Do Process-Non-Common-PayMaster-Rows
!    display 'Process Common PayMaster Rows'
!    Do Process-Common-PayMaster-Rows
    display 'Process Retirees'
! GEX 01/08/20002 - CJH
    Do Process-Retirees

! GEX 01/08/2002 - CJH
    Do Close-Interface-File
    do Stdapi-term
end-report
!*********************************************************************
!                            OPEN INTERFACE FILE
!*********************************************************************
begin-procedure Open-Interface-File
 
#ifdef NT
  !let $FileName  = 'm:\psoft\lttax\' || 'PAYROLL.DAT'
  let $FileName  = '\\nt5\people\psoft\lttax\' || 'PAYROLL.DAT'
  !let $FileName  = 'C:\Temp\' || 'PAYROLL.DAT'
#else
  let $FileName  = '{FILEPREFIX}' || 'PAYROLL.DAT'
#endif
 
 
#debuga show $Primary-File
 
    Open  $FileName     as 1
    For-writing
!   Record=59:fixed
!   Record=59:fixed_nolf
! GEX - 10/30/2001 - CJH - Correct record length to 59 from 60 (delivered)
!    Record=60:fixed_nolf
    Record=59:fixed
    Status= #open1
 
    If #open1 = -1
        Let $Open-Msg = 'Open '||$FileName   ||' 1 failed'
        Display $Open-Msg
        stop quiet
    Else 
        Let $Open-Msg = $FileName    ||'  Opened'
        Display $Open-Msg
    End-if
end-procedure Open-Interface-File
!*********************************************************************
!                          CLOSE INTERFACE FILE
!*********************************************************************
begin-procedure Close-Interface-File
 
    Close 1
 
    Let $Close-Msg    =  $FileName    ||' Closed'
 
    Display  $Close-Msg
 
 
end-procedure  Close-Interface-File
 
!*********************************************************************
!                       INITIALIZE REPORT
!*********************************************************************
begin-procedure  Initialize-Report
    Let  $ReportTitle       =  'L&T Tax System - Taxes by Pay Cycle'
    Let  $ReportID          =  'GEXPY646'
    Let  $Conv-Date         =  $SysDateTime
    Do   Date-Conversion-757
    Let  $ReportDate        =  $Conv-MM||'/'||$Conv-DD||'/'||$Conv-CC||$Conv-YY
    Let  $ReportTime        =  Substr($SysDateTime,    12,  5)
end-procedure    Initialize-Report
!**********************************************************************************
!                Get Parms        CUSTOMIZE THIS SECTION AS NEEDED TO SELECT RUN ID
!**********************************************************************************
 
Begin-Procedure  Get-Parms
 
  if $Prcs_process_instance = ''
   Input  $Run-Id   maxlen=3 'Enter Current Run Id   '
  else
    Do GEXXX922-Select-Parameters 
    Let $Run-ID = $GEX_RC_PAY.Run_ID
  end-if
 
  display 'Processing for Run_id: ' noline
  display $Run-ID
End-Procedure    Get-Parms
 
!*********************************************************************
!                      PROCESS NON-COMMON PAY MASTER ROWS
!*********************************************************************
begin-procedure Process-Non-Common-PayMaster-Rows
    Let  $First-Read         =  'Y'
Begin-SELECT on-error=SQL-Error
A.COMPANY,
A.PAYGROUP,
A.PAY_END_DT,
A.CHECK_DT,
C.OFF_CYCLE,
C.PAGE_NUM, 
C.LINE_NUM, 
C.ADDL_NBR, 
C.EMPLID,
C.PAY_LINE_STATUS,
C.DEPTID,
B.TAX_CLASS,
B.TAX_CUR,
B.TXGRS_CUR,
B.STATE, 
B.LOCALITY
    Let  $Com-Company           =  &A.COMPANY
    Let  $Com-PayGroup          =  &A.PAYGROUP
    Let  $Com-Pay-End-Dt        =  &A.PAY_END_DT
    Let  $Com-Check-Dt          =  &A.CHECK_DT
    Let  $Com-Off-Cycle         =  &C.OFF_CYCLE
    Let  #Com-Page              =  &C.PAGE_NUM
    Let  #Com-Line              =  &C.LINE_NUM
    Let  #Com-Addl              =  &C.ADDL_NBR
    Let  $Com-Emplid            =  &C.EMPLID
    Let  $Com-Pay-Line-Status   =  &C.PAY_LINE_STATUS
    Let  $Com-Tax-Class         =  Rtrim(&B.TAX_CLASS, ' ')
    Let  #Com-Tax-Cur           =  &B.TAX_CUR
    Let  #Com-Txgrs-Cur         =  &B.TXGRS_CUR
    Let  $Com-State             =  Rtrim(&B.STATE, ' ')
    Let  $Com-Locality          =  Rtrim(&B.LOCALITY, ' ')
    Let  $Conv-Date             =  $Com-Pay-End-Dt
    Do   Date-Conversion-757
    Let  $Pay-End-Date          =  $Conv-MM||'/'||$Conv-DD||'/'||$Conv-CC||$Conv-YY
    If $Com-Pay-Line-Status     =  'F'
        Do  Accumulate-Totals
    Else 
        Let $Error-Message      =  'Unconfirmed Pay Line'
        Do  Read-Personal-Data
        Do  Write-Report-Error-Unconfirm
    End-If
FROM      PS_PAY_TAX      B,
          PS_PAY_EARNINGS        C,
          PS_PAY_CALENDAR         A
WHERE     A.RUN_ID             =  $Run-Id                                       and
          A.COMPANY       Not In  ('BNX', 'FMS')                                and
          C.COMPANY            =  A.COMPANY                                     and
          C.PAYGROUP           =  A.PAYGROUP                                    and
          C.PAY_END_DT         =  A.PAY_END_DT                                  and
          C.ADDL_NBR              = (SELECT  MAX(C1.ADDL_NBR)
                                  FROM    PS_PAY_EARNINGS       C1
                                  WHERE   C1.COMPANY    =       C.COMPANY       and
                                          C1.PAYGROUP   =       C.PAYGROUP      and
                                          C1.PAY_END_DT =       C.PAY_END_DT    and
                                          C1.OFF_CYCLE  =       C.OFF_CYCLE     and
                                          C1.PAGE_NUM      =       C.PAGE_NUM   and
                                          C1.LINE_NUM      =       C.LINE_NUM)  and
          B.COMPANY            =  A.COMPANY                                     and
          B.PAY_END_DT         =  A.PAY_END_DT                                  and
          B.PAYGROUP           =  A.PAYGROUP                                    and
          B.OFF_CYCLE          =  C.OFF_CYCLE                                   and
          B.PAGE_NUM           =  C.PAGE_NUM		                        				and
          B.LINE_NUM           =  C.LINE_NUM  	                                and
          C.DEPTID             <> 'C909'																				AND
        !GEXHR_848_E116967 - Begin
          NOT EXISTS (SELECT 'X' FROM PS_PAY_TAX T 
          		WHERE T.COMPANY = B.COMPANY 																			AND 
          		T.PAY_END_DT = B.PAY_END_DT 																			AND 
          		T.PAYGROUP = B.PAYGROUP 																					AND 
          		T.OFF_CYCLE = B.OFF_CYCLE 																				AND
          		T.PAGE_NUM = B.PAGE_NUM 																					AND
          		T.LINE_NUM = B.LINE_NUM     																			AND
          		T.SEPCHK = B.SEPCHK																								AND
          		T.WORK_PSD_CD = B.WORK_PSD_CD 																		AND
          		T.STATE = 'PA' 																										AND
          		T.TAX_CLASS = 'H' 																								AND
          		T.LOCALITY BETWEEN '000000' AND '999999') 	
				!GEXHR_848_E116967 - End
ORDER BY  A.COMPANY,
          A.PAYGROUP,
          A.PAY_END_DT,
          A.CHECK_DT,
          B.STATE,
          B.LOCALITY,
          B.TAX_CLASS
End-SELECT
    Do  Prepare-Extract-Records
end-procedure   Process-Non-Common-PayMaster-Rows
!*********************************************************************
!                  PROCESS COMMON PAY MASTER ROWS
!*********************************************************************
begin-procedure Process-Common-PayMaster-Rows
    Let  $First-Read         =  'Y'
Begin-SELECT on-error=SQL-Error
AA.COMPANY,
AA.PAYGROUP,
AA.PAY_END_DT,
AA.CHECK_DT,
CC.OFF_CYCLE,
CC.PAGE_NUM,
CC.LINE_NUM,
CC.ADDL_NBR,
CC.EMPLID,
CC.PAY_LINE_STATUS,
!GE
CC.DEPTID,
!GE
BB.TAX_CLASS,
BB.TAX_CUR,
BB.TXGRS_CUR,
BB.STATE,
BB.LOCALITY
    Let  $Com-Company           =  'FMS'
    Let  $Com-PayGroup          =  &AA.PAYGROUP
    Let  $Com-Pay-End-Dt        =  &AA.PAY_END_DT
    Let  $Com-Check-Dt          =  &AA.CHECK_DT
    Let  $Com-Off-Cycle         =  &CC.OFF_CYCLE
    Let  #Com-Page              =  &CC.PAGE_NUM
    Let  #Com-Line              =  &CC.LINE_NUM
    Let  #Com-Addl              =  &CC.ADDL_NBR
    Let  $Com-Emplid            =  &CC.EMPLID
    Let  $Com-Pay-Line-Status   =  &CC.PAY_LINE_STATUS
    Let  $Com-Tax-Class         =  Rtrim(&BB.TAX_CLASS, ' ')
    Let  #Com-Tax-Cur           =  &BB.TAX_CUR
    Let  #Com-Txgrs-Cur         =  &BB.TXGRS_CUR
    Let  $Com-State             =  Rtrim(&BB.STATE, ' ')
    Let  $Com-Locality          =  Rtrim(&BB.LOCALITY, ' ')
    Let  $Conv-Date             =  $Com-Pay-End-Dt

    Do   Date-Conversion-757
    Let  $Pay-End-Date          =  $Conv-MM||'/'||$Conv-DD||'/'||$Conv-CC||$Conv-YY
    If $Com-Pay-Line-Status     =  'F'
        Do  Accumulate-Totals
    Else 
        Let $Error-Message      =  'Unconfirmed Pay Line'
        Do  Read-Personal-Data
        Do  Write-Report-Error-Unconfirm
    End-If
FROM      PS_PAY_CALENDAR         AA,
          PS_PAY_TAX              BB,
          PS_PAY_EARNINGS         CC
WHERE     AA.RUN_ID             =  $Run-Id                                         and
          AA.COMPANY           In  ('BNX', 'FMS')                                  and
          CC.COMPANY            =  AA.COMPANY                                      and
          CC.PAYGROUP           =  AA.PAYGROUP                                     and
          CC.PAY_END_DT         =  AA.PAY_END_DT                                   and
          CC.ADDL_NBR              = (SELECT  MAX(CC1.ADDL_NBR)
                                   FROM    PS_PAY_EARNINGS       CC1
                                   WHERE   CC1.COMPANY    =       CC.COMPANY       and
                                           CC1.PAYGROUP   =       CC.PAYGROUP      and
                                           CC1.PAY_END_DT =       CC.PAY_END_DT    and
                                           CC1.OFF_CYCLE  =       CC.OFF_CYCLE     and
                                           CC1.PAGE_NUM      =       CC.PAGE_NUM   and
                                           CC1.LINE_NUM      =       CC.LINE_NUM)  and
          BB.COMPANY            =  AA.COMPANY                                      and
          BB.PAY_END_DT         =  AA.PAY_END_DT                                   and
          BB.PAYGROUP           =  AA.PAYGROUP                                     and
          BB.OFF_CYCLE          =  CC.OFF_CYCLE                                    and
          BB.PAGE_NUM              =  CC.PAGE_NUM                                  and
          BB.LINE_NUM              =  CC.LINE_NUM																	 AND
         !GEXHR_848_E116967 - Begin
          NOT EXISTS (SELECT 'X' FROM PS_PAY_TAX T 
          						WHERE T.COMPANY = BB.COMPANY 		AND 
          						T.PAY_END_DT = BB.PAY_END_DT 		AND 
          						T.PAYGROUP = BB.PAYGROUP 				AND 
          						T.OFF_CYCLE = BB.OFF_CYCLE 			AND
          						T.PAGE_NUM = BB.PAGE_NUM 				AND
          						T.LINE_NUM = BB.LINE_NUM     		AND
          						T.SEPCHK = BB.SEPCHK						AND
          						T.WORK_PSD_CD = BB.WORK_PSD_CD 	AND
          						T.STATE = 'PA' 									AND
          						T.TAX_CLASS = 'H' 							AND
          						T.LOCALITY BETWEEN '000000' AND '999999') 	
			   !GEXHR_848_E116967 - End 	
ORDER BY  AA.PAYGROUP,
          AA.PAY_END_DT,
          AA.CHECK_DT,
          BB.STATE,
          BB.LOCALITY,
          BB.TAX_CLASS
End-SELECT
    Do  Prepare-Extract-Records
! GEX - 01/08/2002 - run after Retirees -     Do  Write-Report-Totals
end-procedure   Process-Common-PayMaster-Rows

! GEX - 01/08/2002 - CJH
!************************************************************************
!                         PROCESS RETIREES
!************************************************************************
begin-procedure Process-Retirees
    Let  $First-Read         =  'Y'
Begin-SELECT on-error=SQL-Error
AR.COMPANY,
AR.PAYGROUP,
AR.PAY_END_DT,
AR.CHECK_DT,
CR.OFF_CYCLE,
CR.PAGE_NUM, 
CR.LINE_NUM, 
CR.ADDL_NBR, 
CR.EMPLID,
CR.PAY_LINE_STATUS,
CR.DEPTID
BR.TAX_CLASS,
BR.TAX_CUR,
BR.TXGRS_CUR,
BR.STATE, 
BR.LOCALITY
    Let  $Com-Company           =  &AR.COMPANY
    Let  $Com-PayGroup          =  &AR.PAYGROUP
    Let  $Com-Pay-End-Dt        =  &AR.PAY_END_DT
    Let  $Com-Check-Dt          =  &AR.CHECK_DT
    Let  $Com-Off-Cycle         =  &CR.OFF_CYCLE
    Let  #Com-Page              =  &CR.PAGE_NUM
    Let  #Com-Line              =  &CR.LINE_NUM
    Let  #Com-Addl              =  &CR.ADDL_NBR
    Let  $Com-Emplid            =  &CR.EMPLID
    Let  $Com-Pay-Line-Status   =  &CR.PAY_LINE_STATUS
    Let  $Com-Tax-Class         =  Rtrim(&BR.TAX_CLASS, ' ')
    Let  #Com-Tax-Cur           =  &BR.TAX_CUR
    Let  #Com-Txgrs-Cur         =  &BR.TXGRS_CUR
    Let  $Com-State             =  Rtrim(&BR.STATE, ' ')
    Let  $Com-Locality          =  Rtrim(&BR.LOCALITY, ' ')
    Let  $Conv-Date             =  $Com-Pay-End-Dt
    Let  $Com-Deptid            =  &CR.DEPTID
    Do   Date-Conversion-757
    Let  $Pay-End-Date          =  $Conv-MM||'/'||$Conv-DD||'/'||$Conv-CC||$Conv-YY
    If $Com-Pay-Line-Status     =  'F'
        Do  Accumulate-Totals
    Else 
        Let $Error-Message      =  'Unconfirmed Pay Line'
        Do  Read-Personal-Data
        Do  Write-Report-Error-Unconfirm
    End-If
FROM      PS_PAY_TAX              BR,
          PS_PAY_EARNINGS         CR,
          PS_PAY_CALENDAR         AR
WHERE     AR.RUN_ID             =  $Run-Id                                        and
          AR.COMPANY       Not In  ('BNX', 'FMS')                                 and
          CR.COMPANY            =  AR.COMPANY                                     and
          CR.PAYGROUP           =  AR.PAYGROUP                                    and
          CR.PAY_END_DT         =  AR.PAY_END_DT                                  and
          CR.ADDL_NBR              = (SELECT  MAX(C11.ADDL_NBR)
                                  FROM    PS_PAY_EARNINGS       C11
                                  WHERE   C11.COMPANY    =       CR.COMPANY       and
                                          C11.PAYGROUP   =       CR.PAYGROUP      and
                                          C11.PAY_END_DT =       CR.PAY_END_DT    and
                                          C11.OFF_CYCLE  =       CR.OFF_CYCLE     and
                                          C11.PAGE_NUM      =       CR.PAGE_NUM         and
                                          C11.LINE_NUM      =       CR.LINE_NUM)        and
          BR.COMPANY            =  AR.COMPANY                                     and
          BR.PAY_END_DT         =  AR.PAY_END_DT                                  and
          BR.PAYGROUP           =  AR.PAYGROUP                                    and
          BR.OFF_CYCLE          =  CR.OFF_CYCLE                                   and
          BR.PAGE_NUM              =  CR.PAGE_NUM                                 and
          BR.LINE_NUM              =  CR.LINE_NUM                                 and
          CR.DEPTID             =  'C909'																					AND	
     !GEXHR_848_E116967 - Begin
          NOT EXISTS (SELECT 'X' FROM PS_PAY_TAX T 
          						WHERE T.COMPANY = BR.COMPANY 			AND 
          						T.PAY_END_DT = BR.PAY_END_DT 			AND 
          						T.PAYGROUP = BR.PAYGROUP 					AND 
          						T.OFF_CYCLE = BR.OFF_CYCLE 				AND
          						T.PAGE_NUM = BR.PAGE_NUM 					AND
          						T.LINE_NUM = BR.LINE_NUM     			AND
          						T.SEPCHK = BR.SEPCHK							AND
          						T.WORK_PSD_CD = BR.WORK_PSD_CD		AND
          						T.STATE = 'PA' 										AND
          						T.TAX_CLASS = 'H' 					AND
          						T.LOCALITY BETWEEN '000000' AND '999999') 	
			   !GEXHR_848_E116967 - End 	
ORDER BY  AR.COMPANY,
          AR.PAYGROUP,
          AR.PAY_END_DT,
          AR.CHECK_DT,
          BR.STATE,
          BR.LOCALITY,
          BR.TAX_CLASS
End-SELECT
    Do  Prepare-Extract-Records
    Do  Write-Report-Totals
end-procedure Process-Retirees
!************************************************************************
!                         ACCUMULATE TOTALS
!************************************************************************
begin-procedure Accumulate-Totals
!    Let $Current-Key         =  $Com-Company||$Com-PayGroup||$Com-Pay-End-Dt||
!                                $Com-Check-Dt||$Com-State||$Com-Locality||$Com-Tax-Class
    Let $Current-Key         =  $Com-Company||$Com-Pay-End-Dt||
                                $Com-Check-Dt||$Com-State||$Com-Locality||$Com-Tax-Class
    If  $First-Read          =  'Y'
        Let $First-Read      =  'N'
        Do  Move-And-Clear-Values
    End-If
    If  $Current-Key        <>  $Hold-Key
        Do  Prepare-Extract-Records
        Do  Move-And-Clear-Values
    End-If
    Let  #Tax-Cur            =  #Tax-Cur    +  #Com-Tax-Cur
    Let  #Txgrs-Cur          =  #Txgrs-Cur  +  #Com-Txgrs-Cur
end-procedure   Accumulate-Totals
!************************************************************************
!                      MOVE AND CLEAR VALUES
!************************************************************************
begin-procedure Move-And-Clear-Values
        Let $Hold-Key        =  $Current-Key
!        Let $Hold-Co-Grp     =  $Com-Company||$Com-PayGroup
        Let $Hold-Co-Grp     =  $Com-Company||$Com-Company
        Let $Hold-Company    =  $Com-Company
        Let $Hold-Paygroup   =  $Com-PayGroup
        Let $Hold-Pay-End-Dt =  $Com-Pay-End-Dt
        Let $Hold-Check-Dt   =  $Com-Check-Dt
        Let $Hold-State      =  $Com-State
        Let $Hold-Locality   =  $Com-Locality
        Let $Hold-Tax-Class  =  $Com-Tax-Class
        Let #Tax-Cur         =  0
        Let #Txgrs-Cur       =  0
end-procedure   Move-And-Clear-Values
!************************************************************************
!                         PREPARE EXTRACT RECORDS
!************************************************************************
begin-procedure Prepare-Extract-Records
    Let $Error-Indicator                     =  'N'
    Let $Tax-Type1                           =  ''
    Let $Tax-Type2                           =  ''
    Let  $Conv-Date         =  $Hold-Pay-End-Dt
    Do   Date-Conversion-757
    Let  $Pay-End-Dt        =  $Conv-MM||'-'||$Conv-DD||'-'||$Conv-CC||$Conv-YY
    Let  $Conv-Date         =  $Hold-Check-Dt
    Do   Date-Conversion-757
    Let  $Check-Dt          =  $Conv-MM||'-'||$Conv-DD||'-'||$Conv-CC||$Conv-YY
    
    Evaluate $Hold-Locality
        When                                 =  ''
            Evaluate $Hold-State
                When                         =  '$U'
                    Evaluate $Hold-Tax-Class
                        When                 =  'H'
! GEX - 01/08/2002 - Retiree conv code logic
                            if $Com-Deptid = 'C909'
                              display 'c909 dept'
                              Let $Conv-Code   =  'PENS'
                            else
                              Let $Conv-Code   =  'FED'
                            end-if        
! GEX - 01-08-2002 - end
                        When                 =  'C'
                            Let $Conv-Code   =  'EIC'
                        When                 =  'D'                             
                            Let $Conv-Code   =  'EFICA'                         
                        When                 =  'E'                             
! GE - zero tax-cur and txgrs-cur so that extract file writing logic will not write entries for Medicare and FICA
                            Let $Conv-Code   =  'RFICA'                         
!                            Let #tax-cur     = 0
!                            Let #txgrs-cur   = 0
                        When                 =  'F'                            
                            Let $Conv-Code   =  'EMED'                          
                        When                 =  'Q'                             
                            Let $Conv-Code   =  'RMED'      
                            Let #tax-cur     = 0
                            Let #txgrs-cur   = 0
! GE                    
                        When                 =  'U'                             
                            Let $Conv-Code   =  ' '                             
                        When-Other                                              
                            Let $Conv-Code   =  '????'                          
                            Let $Msg         =  $Hold-Tax-Class||' '||$Conv-Code
                            Display  $Msg                                       
                    End-Evaluate
                When-Other
                    Evaluate $Hold-Tax-Class
                        When                 =  'M'
                            Let $Conv-Code   =  'NJWFD'                          
                        When                 =  'N'
                            Let $Conv-Code   =  'NJHCS'                          
                        When                 =  'S'
                            Let $Conv-Code   =  'MAHLTH'
                        When-Other
                            Let $Conv-Code   =  $Hold-State
                    End-Evaluate
            End-Evaluate                                                         
        When                                 =  'P0001'                          
            If  $Hold-State                  =  'KY'                             
!               Let $Conv-Code               =  'P0002  '                        
                Let $Conv-Code               =  'KYP0002'                        
            Else                                                                 
!               Let $Conv-Code               =  $Hold-Locality                   
                Let $Conv-Code               =  Rtrim($HOLD-State, ' ')||        
                                                Rtrim($Hold-Locality, ' ')       
            End-If                                                               
        When-Other
            Let $Conv-Code                   =  Rtrim($HOLD-State, ' ')||        
                                                Rtrim($Hold-Locality, ' ')       
    End-Evaluate
    Evaluate  $Hold-State
        When                                 =  '$U'
            Evaluate $Hold-Tax-Class
                When                         =  'C'
                    Let $Tax-Type1           =  'EIC'
                    Let $Tax-Type2           =  'WHWT'
                When                         =  'D'
                    Let $Tax-Type1           =  'EFICA'
                    Let $Tax-Type2           =  'FICAW'
                When                         =  'E'                            
                    Let $Tax-Type1           =  'RFICA'                        
!                   Let $Tax-Type2           =  'FICAW'                        
                When                         =  'F'
                    Let $Tax-Type1           =  'EMED'
                    Let $Tax-Type2           =  'MEDWT'
                When                         =  'H'
                    Let $Tax-Type1           =  'FIT'
                    Let $Tax-Type2           =  'WHWT'
                When                         =  'Q'                            
                    Let $Tax-Type1           =  'RMED'                         
!                   Let $Tax-Type2           =  'MEDWT'                        
                When                         =  'U'
                    Let $Tax-Type1           =  ''
                    Let $Tax-Type2           =  'FUTAW'
! CJH 11/5                    Let #Tax-Cur             =  0
                When-Other
                    Let $Error-Indicator     =  'Y'
                    Let $Error-Message       =  'Unassigned Tax Class'
                    Do  Write-Report-Error-Tax-Class
            End-Evaluate
        When-Other
            Evaluate $Hold-Tax-Class
                When                         =  'H'
                When                         =  'P'
!               When                         =  'S'                              
                When                         =  'B'
                    Let $Tax-Type1           =  'STATE'
                    Let $Tax-Type2           =  'STATW'
                When                         =  'D'
                When                         =  'M'
                When                         =  'N'
                    Let $Tax-Type1           =  'SDI'
                    Let $Tax-Type2           =  'STATW'
                    Let $Conv-Code           =  Rtrim($Conv-Code,' ')
                    Evaluate $Conv-Code
                        When                 =  'CA'
                            Let $Conv-Code   =  'CASDI'
                        When                 =  'NJ'                             
                            Let $Conv-Code   =  'NJSDI'                          
                        When                 =  'NY'                             
                            Let $Conv-Code   =  'NYSDI'                          
                        When                 =  'HI'                             
                            Let $Conv-Code   =  'HISDI'                          
                        When                 =  'RI'                             
                            Let $Conv-Code   =  'RISDI'                          
                        When                 =  'PR'                             
                            Let $Conv-Code   =  'PRSDI'                          
                    End-Evaluate
                When                         =  'U'
                When                         =  'V'
                    Let $Error-Indicator     =  'Y'
                When-Other
                    Let $Error-Indicator     =  'Y'
                    Let $Error-Message       =  'Unassigned Tax Class'
                    Do  Write-Report-Error-Tax-Class
            End-Evaluate
        End-Evaluate
    If  $Error-Indicator                     =  'N'
        If  #Tax-Cur                        <>  0                  and
            Rtrim($Tax-Type1,' ')           <>  ''
            If  Substr($Conv-Code, 1, 2)     =  'NJ'               and           
                $Tax-Type1                   =  'SDI'                            
                Let $Conv-Code-Out           =  'NJSDI'                          
            Else                                                                 
                Let $Conv-Code-Out           =  $Conv-Code                       
            End-If                                                               
            Let $Tax-Type                    =  $Tax-Type1
            Let #Amount                      =  #Tax-Cur
            Let #Total-Tax-Cur               =  #Total-Tax-Cur  +  #Tax-Cur
            Do  Write-To-Extract-File
        End-If
        If  #Txgrs-Cur                      <>  0                 and
            $Conv-Code                      <>  'RMED'            and
            $Conv-Code                      <>  'RFICA'
            Let $Conv-Code-Out               =  $Conv-Code                       
            Let $Tax-Type                    =  $Tax-Type2
            Let #Amount                      =  #Txgrs-Cur
            Let #Total-Txgrs-Cur             =  #Total-Txgrs-Cur  +  #Txgrs-Cur
            Do  Write-To-Extract-File
        End-If
        Do  Write-Report-Detail
    End-If
end-procedure   Prepare-Extract-Records
!************************************************************************
!                         WRITE-TO-EXTRACT-FILE
!************************************************************************
begin-procedure   Write-To-Extract-File
    Let  #Rec-Count                      =  #Rec-Count  + 1
    Move #Amount                        to  $Amount 00000000009.99
    Write 1 from  $Hold-Company:3
!$Hold-Co-Grp:6
                  {Back-Slant}:1
                  $Conv-Code-Out:12                                              !rew 08/07/2001
                  {Back-Slant}:1
                  $Tax-Type:5
                  {Back-Slant}:1
                  $Check-Dt:10
                  {Back-Slant}:1
                  $Amount:14
                  {Back-Slant}:1
                  $Pay-End-Dt:10
!**************************** MSDOS DISPLAY CODE ********************************
    Let $Disp-Scrn          =  $Error-Indicator||' '||$Hold-Co-Grp||' '||
                               $Conv-Code||' '||$Check-Dt||' '||$Amount||' '||
                               $Pay-End-Dt
    Display $Disp-Scrn
!*********************************************************************************
  end-procedure   Write-To-Extract-File
!************************************************************************
!                         READ-PERSONAL-DATA
!************************************************************************
begin-procedure Read-Personal-Data
Begin-SELECT on-error=SQL-Error
D.NAME
FROM   PS_PERSONAL_DATA        D
WHERE  D.EMPLID             =  $Com-Emplid
End-SELECT
end-procedure   Read-Personal-Data
!************************************************************************
!                     WRITE-REPORT-DETAIL
!************************************************************************
begin-procedure Write-Report-Detail
    Print  $Hold-Company       (+1,  2,   3)
    Print  $Hold-Paygroup      ( 0,  8,   3)
    Print  $Pay-End-Dt         ( 0, 13,  10)
!GE
    Print  $Check-Dt           ( 0, 24,  10)
!GE
    Print  $Hold-State         ( 0, 36,   2)
    Print  $Hold-Locality      ( 0, 42,   7)
    Print  $Hold-Tax-Class     ( 0, 52,   1)
    Print  $Conv-Code          ( 0, 56,  12)
    Print  $Tax-Type1          ( 0, 66,   5)
    Print  #Tax-Cur            ( 0, 72,  14)   Edit '999,999,999.99'
    Print  $Tax-Type2          ( 0, 89,   7)
    Print  #Txgrs-Cur          ( 0, 97,  14)   Edit '999,999,999.99'
end-procedure   Write-Report-Detail
!************************************************************************
!                     WRITE-REPORT-ERROR-UNCONFIRM
!************************************************************************
begin-procedure Write-Report-Error-Unconfirm
    Print  $Com-Company         (+1,   2,   3)
    Print  $Com-PayGroup        ( 0,   8,   3)
    Print  $Pay-End-Dt          ( 0,  13,  10)
    Print  $Com-Off-Cycle       ( 0, 114,   1)
    Print  #Com-Page            ( 0, 118,   4)
    Print  #Com-Page            ( 0, 125,   2)
    Print  $Com-Emplid          ( 0, 131,   5)
    Print  &D.NAME              ( 0, 138,  15)
    Print  $Com-Pay-Line-Status ( 0, 155,   1)
    Print  $Error-Message       ( 0, 157,  20)
end-procedure   Write-Report-Error-Unconfirm
!************************************************************************
!                     WRITE-REPORT-ERROR-Tax-Class
!************************************************************************
begin-procedure Write-Report-Error-Tax-Class
    Print  $Hold-Company       (+1,   2,   3)
    Print  $Hold-Paygroup      ( 0,   8,   3)
    Print  $Pay-End-Dt         ( 0,  13,  10)
    Print  $Check-Dt           ( 0,  24,  10)
    Print  $Hold-State         ( 0,  36,   2)
    Print  $Hold-Locality      ( 0,  42,   7)
    Print  $Hold-Tax-Class     ( 0,  52,   1)
    Print  $Conv-Code          ( 0,  56,   9)
    Print  $Tax-Type1          ( 0,  66,   5)
    Print  #Tax-Cur            ( 0,  72,  14)   Edit '999,999,999.99'
    Print  $Tax-Type2          ( 0,  89,   7)
    Print  #Txgrs-Cur          ( 0,  97,  14)   Edit '999,999,999.99'
    Print  $Hold-Tax-Class     ( 0, 155,   1)
    Print  $Error-Message      ( 0, 157,  20)
end-procedure   Write-Report-Error-Tax-Class
!************************************************************************
!                     WRITE-REPORT-TOTALS
!************************************************************************
begin-procedure Write-Report-Totals
    Print  'Report Totals:'    (+1,  57,  14)
    Print  #Total-Tax-Cur      ( 0,  72,  14)   Edit '999,999,999.99'
    Print  #Total-Txgrs-Cur    ( 0,  97,  14)   Edit '999,999,999.99'
    Print  'Record Count:'     (+1,  57,  13)
    Print  #Rec-Count          ( 0, 106,   5)   Edit '9,999'
end-procedure   Write-Report-Totals
!************************************************************************
!                         7.57 DATE CONVERSION
!************************************************************************
begin-procedure Date-Conversion-757

! GE
    let $conv_date_dt = substr($conv-date,1,11)
    do Format-datetime($conv_date_dt,$conv-date,{DEFCMP},'','')
    Let $Conv-CC         =      Substr($Conv-Date,  1,  2)
    Let $Conv-YY         =      Substr($Conv-Date,  3,  2)
    Let $Conv-DD         =      Substr($Conv-Date,  7,  2)
    Let $Conv-MM         =      Substr($Conv-Date,  5,  2)
! GE

!    Let $Conv-CC         =      Substr($Conv-Date,  1,  2)
!    Let $Conv-YY         =      Substr($Conv-Date,  3,  2)
!    Let $Conv-DD         =      Substr($Conv-Date,  9,  2)
!    Let $Conv-MM         =      Substr($Conv-Date,  6,  2)
end-procedure   Date-Conversion-757
!************************************************************************
!                           SQC INCLUDES
!************************************************************************
#include 'stdapi.sqc'            !Routines to update run status
#Include 'curdttim.sqc'          !Get-Current-DateTime procedure
#Include 'datetime.sqc'          !Routines for date and time formatting
#include 'datemath.sqc'
#include 'gexxx922.sqc'          ! Run control parm selection
