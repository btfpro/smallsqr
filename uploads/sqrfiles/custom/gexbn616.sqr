!***********************************************************************
!      GEXBN616.SQR -This program reads an Input file from InProc, the * 
!                    third party open enrollment firm, and loads into  *  
!                    Bas Tables.                                       *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                                                                      *
! Tables:                                                              *
!           PS_BAS_PARTIC                                              *
!           PS_BAS_PARTIC_PLAN                                         *
!           PS_BAS_PARTIC_OPTN                                         *
!           PS_BAS_PARTIC_COST                                         *
!           PS_BAS_PARTIC_DPND                                         *
!                                                                      *
!***********************************************************************
! Written by:   Carl Buckrop                                           *
!                                                                      *
! Normally Run:                                                        *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#         INITIALS    DATE           DESCRIPTION OF THE CHANGE    *
!***********************************************************************
!CSR HR-10814  CWB         11/04/2004     INITIAL CREATION             *
!VENDCXB       GEX-CXB	   11/13/2007	  HCM 9.0 Upgrade Customization*
!***********************************************************************
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment

!-----------------------------------------------------------------------
begin-setup
!-----------------------------------------------------------------------

#include 'setupdb.sqc'

end-setup


!-----------------------------------------------------------------------
begin-report
!-----------------------------------------------------------------------

  ! Set up Flag for 4 position year in date fields
  move '1' to $ReportYear4

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  
  do Init-Report

  do Process-Main

  close 1

   do Reset
 !  do Rollback-Transaction
   do Stdapi-Term

  date-time () hh:mi:ss &timeEnded
  display ' '
  display 'Process Ended: ' noline
  display &timeEnded

end-report


!-----------------------------------------------------------------------
begin-procedure Init-Report
!-----------------------------------------------------------------------

  let $Proced-Name = 'Init-Report'
  #debugA display $Proced-Name

  move 'GEXBN616.SQR'   to $ReportID
  display ' '
  display  $ReportID

  Move 'Open Enrollment data load to Bas tables' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

  date-time () hh:mi:ss &timeBegan
  display 'Process Began: ' noline
  display &timeBegan
  display ' '

  do Stdapi-Init

  if $prcs_process_instance = ''
	let $Prcs_OprID = 'ISDVDXS'
	let $Prcs_Run_Cntl_ID = 'gexbn616'
  end-if

     #debugA show 'Doing Select-Parameters '
     do Select-Parameters       


!  Any other variables to be initialized

  let #Tot_Ctr      = 0
  let #Err_Ctr      = 0
  let #Rec_Ctr	    = 0
  let #Commit_After = 100

end-procedure	!Init-Report


!-----------------------------------------------------------------------
begin-procedure select-parameters
!-----------------------------------------------------------------------

  let $Proced-Name = 'select-parameters'
  #debugA display $Proced-Name

	do select-gex_rc_gexbn616
	do select-gex_rc_bas_stat
	do select-gex_rc_evt_sts

end-procedure


!-----------------------------------------------------------------------
begin-procedure select-gex_rc_gexbn616
!-----------------------------------------------------------------------

begin-select
GEX_RC_GEXBN616.EVENT_DT
GEX_RC_GEXBN616.NUM_DAYS
GEX_RC_GEXBN616.EVENT_CLASS
GEX_RC_GEXBN616.PROCESS_IND

	let $event_dt = &GEX_RC_GEXBN616.EVENT_DT
	let #weeks = &GEX_RC_GEXBN616.NUM_DAYS
	let $class = &GEX_RC_GEXBN616.EVENT_CLASS
	let $prcs_ind = &GEX_RC_GEXBN616.PROCESS_IND

   #debugA show '$event_dt ' $event_dt 
   #debugA show '#weeks ' #weeks 
   #debugA show 'Class ' $class
   #debugA show '$prcs_ind ' $prcs_ind

from PS_GEX_RC_GEXBN616 GEX_RC_GEXBN616
where GEX_RC_GEXBN616.OPRID = $Prcs_OprID
  and GEX_RC_GEXBN616.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select

end-procedure 


!-----------------------------------------------------------------------
begin-procedure select-gex_rc_bas_stat
!-----------------------------------------------------------------------

  Let $BAS_STAT_Alias = 'HB.BAS_PROCESS_STATUS'
  Let $OprID         = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID   = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_BAS_STAT_ROWS = 0
  Let $INCLUDE_BAS_STAT_CRITERIA = ''
 
Begin-Select

GEX_RC_BAS_STAT.BAS_PROCESS_STATUS

  Add 1 To #GEX_RC_BAS_STAT_ROWS

  If #GEX_RC_BAS_STAT_ROWS = 1
    Let $INCLUDE_BAS_STAT_CRITERIA = '(' || $BAS_STAT_Alias || ' In ('''     || &GEX_RC_BAS_STAT.BAS_PROCESS_STATUS || ''''
  Else
    Let $INCLUDE_BAS_STAT_CRITERIA = $INCLUDE_BAS_STAT_CRITERIA || ',''' || &GEX_RC_BAS_STAT.BAS_PROCESS_STATUS  || ''''
  End-If

From  PS_GEX_RC_BAS_STAT GEX_RC_BAS_STAT

Where GEX_RC_BAS_STAT.OPRID               = [$OprID]
And   GEX_RC_BAS_STAT.RUN_CNTL_ID         = [$Run_Cntl_ID]
End-Select

  If #GEX_RC_BAS_STAT_ROWS = 0
  
    Let $INCLUDE_BAS_STAT_CRITERIA = $BAS_STAT_Alias || ' = ' || $BAS_STAT_Alias
  Else
    Let $INCLUDE_BAS_STAT_CRITERIA = $INCLUDE_BAS_STAT_CRITERIA || '))'
  End-If

  #debugA show '$INCLUDE_BAS_STAT_CRITERIA ' $INCLUDE_BAS_STAT_CRITERIA
  

end-procedure   


!----------------------------------------------------------------
begin-procedure select-gex_rc_evt_sts
!----------------------------------------------------------------

  Let $EVT_STAT_Alias = 'HB.EVENT_STATUS'
  Let $OprID         = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID   = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_EVT_STAT_ROWS = 0
  Let $INCLUDE_EVT_STAT_CRITERIA = ''
 
Begin-Select

GEX_RC_EVT_STS.EVENT_STATUS

  Add 1 To #GEX_RC_EVT_STAT_ROWS

  If #GEX_RC_EVT_STAT_ROWS = 1
    Let $INCLUDE_EVT_STAT_CRITERIA = '(' || $EVT_STAT_Alias || ' In ('''     || &GEX_RC_EVT_STS.EVENT_STATUS || ''''
  Else
    Let $INCLUDE_EVT_STAT_CRITERIA = $INCLUDE_EVT_STAT_CRITERIA || ',''' || &GEX_RC_EVT_STS.EVENT_STATUS  || ''''
  End-If

From  PS_GEX_RC_EVT_STS GEX_RC_EVT_STS

Where GEX_RC_EVT_STS.OPRID               = [$OprID]
And   GEX_RC_EVT_STS.RUN_CNTL_ID         = [$Run_Cntl_ID]
End-Select

  If #GEX_RC_EVT_STAT_ROWS = 0
    Let $INCLUDE_EVT_STAT_CRITERIA = $EVT_STAT_Alias || ' = ' || $EVT_STAT_Alias
  Else
    Let $INCLUDE_EVT_STAT_CRITERIA = $INCLUDE_EVT_STAT_CRITERIA || '))'
  End-If

  #debugA show '$INCLUDE_EVT_STAT_CRITERIA ' $INCLUDE_EVT_STAT_CRITERIA
  

end-procedure



!----------------------------------------------------------------
begin-procedure Process-Main
!-----------------------------------------------------------------------

  let $Proced-Name = 'Process-Main'
  #debugA display $Proced-Name

    ! Let $filename = 'Z:\psoft\working\isdvdxs\' || 'EE.txt'
    Let $filename = '{INFILE}' || 'EE.txt'
  
    display 'Processing File  [' noline
    display $filename         noline
    display ']'
    display ' '

  open $FileName as 1 for-reading record=332:vary  status=#filestat
  if #filestat != 0
	show 'Error Opening File: ' $filename
	stop
  end-if

  let $Last_Pers_Id = ' '

 while 1 = 1

    let $Err_Relationship = 'N'
							! Starting position numbers
    read 1 into $schedule_id:6				! 1
		$emplid:11				! 7
                $ssn:9					! 18
                $filler:3				! 27
                $event_id:6				! 30
                $benefit_prg:3				! 36
		$filler:6				! 39
		$medical_plan_type:2			! 45
                $medical_option_cd:3			! 47
		$dental_plan_type:2			! 50
                $dental_option_cd:3			! 52
		$vision_plan_type:2			! 55
                $vision_option_cd:3			! 57
	!GEX-CXB  11/13/2007 HCM 9.0 Upgarde Begin
		$HSA_plan_type:2			! 60
                $HSA_option_cd:3			! 62			
                $HSA_flat_amount:8			! 65
                $LtdFSA_plan_type:2			! 73
                $LtdFSA_option_cd:3			! 75
                $LtdFSA_flat_amount:8			! 78          
	!	$baslife_plan_type:2			! 60
	!       $baslife_option_cd:3			! 62
	!	$baslife_flat_amount:8			! 65
	!	$vollife_plan_type:2			! 73
	!       $vollife_option_cd:3			! 75
	!	$vollife_flat_amount:8			! 78
	!GEX-CXB  11/13/2007 HCM 9.0 Upgarde End
		$voladd_plan_type:2			! 86
                $voladd_option_cd:3			! 88
		$voladd_flat_amount:8			! 91
		$deplife_plan_type:2			! 99
                $deplife_option_cd:3			! 101
		$deplife_flat_amount:8			! 104
		$depadd_plan_type:2			! 112
                $depadd_option_cd:3			! 114
		$depadd_flat_amount:8			! 117
		$volspadd_plan_type:2			! 125
                $volspadd_option_cd:3			! 127
		$volspadd_flat_amount:8			! 130
		$childadd_plan_type:2			! 138
                $childadd_option_cd:3			! 140
		$childadd_flat_amount:8			! 143
		$ltd_plan_type:2			! 151
                $ltd_option_cd:3			! 153
		$healthFSA_plan_type:2			! 156
                $healthFSA_option_cd:3			! 158
		$healthFSA_flat_amount:7 		!annual pledge, 161
		$depFSA_plan_type:2			! 168
                $depFSA_option_cd:3			! 170
		$depFSA_flat_amount:7 			!annual pledge, 173
                $address1:35				! 180
                $address2:35				! 215
                $city:30				! 250
    		$state:2				! 280
		$zip:12					! 282
                $std_plan_type:2			! 294
                $std_option_cd:3			! 296
                $basadd_plan_type:2			! 299
                $basadd_option_cd:3			! 301
                $basadd_flat_amount:8			! 304
		$RX_plan_type:2				! 312
 		$RX_option_cd:3				! 314
		$spouse_life_plan_type:2		! 317
		$spouse_life_option_cd:3		! 319
		$spouse_life_flat_amount:7		! 322
                $filler:1				! 329
		$benefit_rcd:1				! 330
							! 331
   #ifdef DEBUGA 
   show 'Reading file'
   show '$voladd_flat_amount <' $voladd_flat_amount '>'
   show '$std_plan_type <' $std_plan_type '>'
   show '$basadd_plan_type <' $basadd_plan_type '>'
   show '$basadd_flat_amount <' $basadd_flat_amount '>'

   show 'voladd_option_cd <' $voladd_option_cd '>'
   show '$healthfsa_option_cd <' $healthfsa_option_cd '>'
   show '$depfsa_option_cd <' $depfsa_option_cd '>'
   #end-if

   #DEBUGA Show 'Doing Get-Emplid-Map for ' $emplid
   do Get-Emplid-Map		! Added by DXS

   #DEBUGA display '  $oe_emplid    [' noline
   #DEBUGA display $oe_emplid          noline
   #DEBUGA display ']' noline
   #DEBUGA display '  $Last_Pers_Id  [' noline
   #DEBUGA display $Last_Pers_Id        noline
   #DEBUGA display ']' noline
   #DEBUGA display '  $schedule_id  [' noline
   #DEBUGA display $schedule_id       noline
   #DEBUGA display ']' noline
   #DEBUGA display '  $benefit_prg  [' noline
   #DEBUGA display $benefit_prg        noline
   #DEBUGA display ']'

	
   if #end-file = 1
      ! do EmplId-Changed-Process   ! DXS
      break
   end-if


   add 1 to #Rec_Ctr
   add 1 to #Tot_Ctr

   let $voladd_flat_amount = TO_CHAR(#voladd_flat_amount)

   let #basadd_flat_amount = TO_NUMBER($basadd_flat_amount)
   let $basadd_flat_amount = TO_CHAR(#basadd_flat_amount)

	#DEBUGA show 'Check for emplid'

   if $Last_Pers_Id <> $oe_emplid

	#DEBUGA show 'Doing EmplId-Changed-Process'
      do EmplId-Changed-Process

      let $Empl_Err_Flag = 'N'
      let $Last_Pers_Id = $oe_emplid
      let $Get_Bas_Data = 'Y'
      let $Get_Empl_Stat = 'Y'
      let $Inactive_Flag = 'N'
      let #Gross_Pct = 0

      let $Plan_10 = 'N'
      let $Plan_11 = 'N'
      let $Plan_14 = 'N'
      let $Plan_20 = 'N'
      let $Plan_21 = 'N'
      let $Plan_22 = 'N'
      let $Plan_23 = 'N'
      let $Plan_24 = 'N'
      let $Plan_25 = 'N'
      let $Plan_27 = 'N'
      let $Plan_2W = 'N'
      let $Plan_30 = 'N'
      let $Plan_31 = 'N'
      let $Plan_60 = 'N'
      let $Plan_61 = 'N'
   else
      #DEBUGBA display 'Same Empl-ID as previous record - Empl_ID:  ['  noline
      #DEBUGBA display $oe_emplid     					noline
      #DEBUGBA display ']'

   end-if

   
 end-while

  if #Tot_Ctr = 0  and  #Err_Ctr = 0

     Display ' '
     Display '***  No Data found for criteria selected  ***'
     display ' '

  else

         display ' '
         Display  'RECORDS READ IN COUNT TOTAL :  ['   Noline
         Display  #Rec_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'EMPLOYEES COUNT TOTAL       :  ['   Noline
         Display  #Empl_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'RECORDS UPDATED COUNT TOTAL :  ['   Noline
         Display  #Tot_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'RECORDS BYPASSES-INACTIVES  :  ['   Noline
         Display  #Inactive_Ctr Noline
         display ']'
         display ' '


         if #Err_Ctr > 0

             display ' '
             Display  'RECORDS BYPASSED-ERRORS     :  ['   Noline
             Display  #Bypass_Ctr Noline
             display ']'
             display ' '


            display ' '
            display ' '
            display  'EMPLOYEES W/ ERRORS/WARNINGS COUNT        :  [' noline
            display  #Empl_Err_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'ERRORS WARNINGS FOUND IN THIS RUN         :  [' noline
            display  #Err_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'WARNINGS FOUND IN THIS RUN                :  [' noline
            display  #Warn_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'FSA Manual Setups Required                :  [' noline
            display  #FSA_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'Employees with Beneficiaries Missing      :  [' noline
            display  #Benef_Miss  Noline
            display ']'
            display ' '

         end-if

  end-if

end-procedure  !Process-Main


!-----------------------------------------------------------------------
begin-procedure Get-Emplid-Map
!-----------------------------------------------------------------------
begin-select distinct
mapp.ssn

	move &mapp.ssn to $oe_emplid

from ps_gex_emplid_mapp mapp
where mapp.emplid = $emplid
end-select
end-procedure 


!-----------------------------------------------------------------------
begin-procedure EmplId-Changed-Process
!-----------------------------------------------------------------------

  let $Proced-Name = 'EmplId-Changed-Process'
  #debugA display $Proced-Name

   add 1 to  #Empl_Ctr
!   add 1 to  #Tot_Ctr   ! DXS

   let $Coverage_Elect  = 'W'
   let $Process_Status  = 'ET'
   let $Elect_Source    = 'W'
   let $Election_Made	= 'Y'
   let $Covrg_Cd        = ' '
   let #EE_Pledge       = 0

   #DEBUGA display ' '

	#DEBUGA show 'Doing Get-Hire-Date'
   do Get-Hire-Date
	#DEBUGA show 'Doing Update-BAS-PARTIC-table'
   do Update-BAS-PARTIC-table

   if $medical_plan_type = '10'
      let $plan_type = '10'
      let $option_cd = $medical_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if

   if $medical_plan_type = '1Y'
      let $plan_type = '1Y'
      let $option_cd = $medical_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $dental_plan_type = '11'
      let $plan_type = '11'
      let $option_cd = $dental_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $RX_plan_type = '1Z'
      let $plan_type = '1Z'
      let $option_cd = $RX_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $spouse_life_plan_type = '2Z'
      let $plan_type = '2Z'
      let $option_cd = $spouse_life_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $vision_plan_type = '14'
      let $plan_type = '14'
      let $option_cd = $vision_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $baslife_plan_type = '20'
      let $plan_type = '20'
      let $option_cd = $baslife_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $vollife_plan_type = '21'
      let $plan_type = '21'
      let $option_cd = $vollife_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $basadd_plan_type = '22'
      let $plan_type = '22'
      let $option_cd = $basadd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $voladd_plan_type = '27'
      let $plan_type = '27'
      let $option_cd = $voladd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-cvg
   end-if
   
   if $deplife_plan_type = '25'
      let $plan_type = '25'
      let $option_cd = $deplife_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if

   if $depadd_plan_type = '24'
      let $plan_type = '24'
      let $option_cd = $depadd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $volspadd_plan_type = '23'
      let $plan_type = '23'
      let $option_cd = $volspadd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if

   if $childadd_plan_type = '2W'
      let $plan_type = '2W'
      let $option_cd = $childadd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if

   if $std_plan_type = '30'
      let $plan_type = '30'
      let $option_cd = $std_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if

   if $ltd_plan_type = '31'
      let $plan_type = '31'
      let $option_cd = $ltd_option_cd
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-opt
   end-if
   
   if $healthfsa_plan_type = '60'
      let $plan_type = '60'
      let $option_cd = $healthfsa_option_cd
      let #pledge = $healthfsa_flat_amount
      let #empl_contrib = #pledge / #weeks    ! DXS, #weeks = 52, comes from run_control_page
      #DEBUGA display #pledge
      #DEBUGA display $healthfsa_flat_amount
      #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa'
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-fsa
   else
!   if yes, set all amounts to 0 and election_made flag to 'N'
!   check if a prior election exists for that employee and sched_id
      let $plan_type = '60'
      let $option_cd = 'W'
      let #pledge = 0
      let #empl_contrib = 0 
      let $fsa_eligibility_flag = 'N'
      #DEBUGA show 'Doing Check-FSA-Eligibility, plan_type 60'
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      do Check-FSA-Eligibility
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      if $fsa_eligibility_flag = 'Y'
	 #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa, plan_type 60'
         #debuga show '$option_cd ' $option_cd
         do Update_BAS-PARTIC-PLAN-fsa
      end-if
   end-if

   if $depfsa_plan_type = '61'
      let $plan_type = '61'
      let $option_cd = $depfsa_option_cd
      let #pledge = $depfsa_flat_amount
      let #empl_contrib = #pledge / #weeks    ! DXS, #weeks = 52, comes from run_control_page
      #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa, depfsa_plan_type = 61 '
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-fsa
   else
!      check if a prior election exists for that employee and sched_id
!      if yes, set all amounts to 0 and election_made flag to 'N'
      let $plan_type = '61'
      let $option_cd = 'W'
      let #pledge = 0
      let #empl_contrib = 0
      let $fsa_eligibility_flag = 'N'
      #DEBUGA show 'Doing Check-FSA-Eligibility, plan_type 61'
      do Check-FSA-Eligibility
      if $fsa_eligibility_flag = 'Y'
	 #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa, plan_type 61'
         #debuga show '$option_cd ' $option_cd
         do Update_BAS-PARTIC-PLAN-fsa
      end-if
   end-if
   
   !GEX-CXB  11/13/2007 HCM 9.0 Upgarde Added Begin
   If $HSA_plan_type = '67'
      let $plan_type = '67'
      let $option_cd = $HSA_option_cd
      let #pledge = to_number($HSA_flat_amount)
      let #empl_contrib = #pledge / #weeks    ! #weeks = 52, comes from run_control_page
      #DEBUGA display #pledge
      #DEBUGA display $HSA_flat_amount
      #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa'
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-fsa
   Else
      let $plan_type = '67'
      let $option_cd = 'W'
      let #pledge = 0
      let #empl_contrib = 0 
      let $fsa_eligibility_flag = 'N'
      #DEBUGA show 'Doing Check-FSA-Eligibility, plan_type 67'
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      do Check-FSA-Eligibility
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      If $fsa_eligibility_flag = 'Y'
	 #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa, plan_type 67'
         #debuga show '$option_cd ' $option_cd
         do Update_BAS-PARTIC-PLAN-fsa
      End-If
   End-If

   If $LtdFSA_plan_type = '6Z'
      let $plan_type = '6Z'
      let $option_cd = $LtdFSA_option_cd
      let #pledge = to_number($LtdFSA_flat_amount)
      let #empl_contrib = #pledge / #weeks    ! #weeks = 52, comes from run_control_page
      #DEBUGA display #pledge
      #DEBUGA display $LtdFSA_flat_amount
      #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa'
      #debuga show '$option_cd ' $option_cd
      do Update_BAS-PARTIC-PLAN-fsa
   Else
      let $plan_type = '6Z'
      let $option_cd = 'W'
      let #pledge = 0
      let #empl_contrib = 0 
      let $fsa_eligibility_flag = 'N'
      #DEBUGA show 'Doing Check-FSA-Eligibility, plan_type 6Z'
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      do Check-FSA-Eligibility
      #DEBUGA show '$fsa_eligibility_flag ' $fsa_eligibility_flag
      If $fsa_eligibility_flag = 'Y'
	 #DEBUGA show 'Doing Update_BAS-PARTIC-PLAN-fsa, plan_type 6Z'
         #debuga show '$option_cd ' $option_cd
         do Update_BAS-PARTIC-PLAN-fsa
      End-If
   End-If
!GEX-CXB  11/13/2007 HCM 9.0 Upgarde Added End

end-procedure   !EmplId-Changed-Process

!-----------------------------------------------------------------------
begin-procedure Get-Hire-Date
!-----------------------------------------------------------------------

  let $Proced-Name = 'Get-Hire-Date'
  #debugA display $Proced-Name
  #debugA show 'oe_emplid <' $oe_emplid '>'

  move ''  to $hire_date
  move ''  to $empl_hire_dt_ymd
  let $Found_Hire_Dt = 'N'

begin-select
to_char(A2.EFFDT,'YYYYMMDD')   &A2.EFFDT_YMD
A2.EFFDT

  let $hire_date    = &A2.EFFDT
  let $empl_hire_dt_ymd = &A2.EFFDT_YMD
  let $Found_Hire_Dt = 'Y'

  #debuga show '$hire_date <' $hire_date '>'
  #debuga show '$empl_hire_dt_ymd <' $empl_hire_dt_ymd '>'

from  ps_job A2
where A2.emplid = $oe_emplid		! DXS, this was $emplid which is not defined
  and A2.ACTION = 'HIR'			! anywhere. Changed it to $oe_emplid
  and A2.EFFDT =
        (SELECT MAX(A2_ED.EFFDT) FROM PS_JOB A2_ED
        WHERE A2.EMPLID = A2_ED.EMPLID
          AND A2.EMPL_RCD = A2_ED.EMPL_RCD
          AND A2_ED.EFFDT <= SYSDATE
          AND A2_ED.ACTION = A2.ACTION)
    AND A2.EFFSEQ =
        (SELECT MAX(A2_ES.EFFSEQ) FROM PS_JOB A2_ES
        WHERE A2.EMPLID = A2_ES.EMPLID
          AND A2.EMPL_RCD = A2_ES.EMPL_RCD
          AND A2.EFFDT = A2_ES.EFFDT)
end-select

end-procedure   !Get-Hire-Date

!-----------------------------------------------------------------------
begin-procedure Update-BAS-PARTIC-table
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update-BAS-PARTIC-table'
  #debugA display $Proced-Name
  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Open-Enrollment-Fields
  let $today = datenow()
  !See if Service_DT is empty, if it is fill it with hire date

  #debugA show 'oe_emplid ' $oe_EMPLID
  #debugA show '$benefit_rcd ' $benefit_rcd
  #debugA show '$schedule_id ' $schedule_id
  #debugA show '$event_id ' $event_id
  #debugA show '$benefit_prg ' $benefit_prg

  let $bas_record_found = 'N'

begin-Select
HB.EMPLID		! DXS, Added this, earlier only service_dt field 
HB.SERVICE_DT		! was present. If val for service_dt is blank then the
			! if condition within this select would never be executed

  #DEBUGA display &HB.SERVICE_DT
  if isblank(&HB.SERVICE_DT)
    let $service_dt = $hire_date
  else
    let $service_dt = &HB.SERVICE_DT
  end-if
  #DEBUGA display $service_dt
  let $bas_record_found = 'Y'

FROM PS_BAS_PARTIC HB
where HB.EMPLID                = $oe_EMPLID
and HB.BENEFIT_RCD_NBR       = $benefit_rcd
and HB.SCHED_ID              = $schedule_id
and HB.EVENT_ID              = $event_id
and HB.EVENT_CLASS           = $class			! DXS, 'OE', from run control page
and [$INCLUDE_EVT_STAT_CRITERIA]			! DXS, and HB.EVENT_STATUS = 'O'
and HB.BENEFIT_PROGRAM       = $benefit_prg
and [$INCLUDE_BAS_STAT_CRITERIA]			! DXS,  and HB.BAS_PROCESS_STATUS in ('NT','PR','ET','RE')
and HB.PROCESS_IND = $prcs_ind				! DXS, 'N', from run control page
and HB.EVENT_DT		    = $event_dt			! DXS, '01-JAN-2006', from run control page
end-select

#DEBUGA display $service_dt
#DEBUGA display 'Select for service-date END'

if $bas_record_found = 'N'
   #DEBUG9 display 'Record not found in BAS-PARTIC Table: '  !ISDVSRC
   #DEBUG9 display $oe_emplid                                !ISDVSRC
end-if

  let $sql-statement = 'GEXBN616.SQR,Update-BAS-PARTIC-table,UPDATE,PS_BAS_PARTIC'

 ! DXS, added the following 2 statements.
  let $UPDATE_EVT_STAT_CRITERIA = '(' || substr($INCLUDE_EVT_STAT_CRITERIA,5,length($INCLUDE_EVT_STAT_CRITERIA)) 
  let $UPDATE_BAS_STAT_CRITERIA = '(' || substr($INCLUDE_BAS_STAT_CRITERIA,5,length($INCLUDE_BAS_STAT_CRITERIA)) 

  #debugA show '$UPDATE_EVT_STAT_CRITERIA ' $UPDATE_EVT_STAT_CRITERIA
  #debugA show '$UPDATE_BAS_STAT_CRITERIA ' $UPDATE_BAS_STAT_CRITERIA

#DEBUGA show '$Process_Status '  $Process_Status
     
begin-SQL  on-error=SQL-Error-Update-BAS-PARTIC-table
	
UPDATE PS_BAS_PARTIC
    SET BAS_PROCESS_STATUS   = $Process_Status,
        ELECT_SOURCE         = $Elect_Source,
        STATUS_DT            = $today,  
        SERVICE_DT 	     = $service_dt
where EMPLID                = $oe_EMPLID
  and SCHED_ID              = $schedule_id
  and EVENT_ID              = $event_id
  and EVENT_CLASS           = $class		! DXS, 'OE'
   
  and [$UPDATE_EVT_STAT_CRITERIA]  	! DXS, EVENT_STATUS = 'O'
  and [$UPDATE_BAS_STAT_CRITERIA]  	! DXS, BAS_PROCESS_STATUS in ('NT','PR','ET','RE')
  and BENEFIT_PROGRAM       = $benefit_prg
  and PROCESS_IND	    = $prcs_ind			! DXS,  'N'
  and EVENT_DT		    = $event_dt   ! DXS, '01-JAN-2006' '01-JUL-2005' '01-Jan-2005'
end-SQL
 
end-procedure  !Update-BAS-PARTIC-table


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-BAS-PARTIC-table
!-----------------------------------------------------------------------
  let $Proced-Name = 'SQL-Error-Update-BAS-PARTIC-table'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Open-Enrollment-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-BAS-PARTIC-table


!-----------------------------------------------------------------------
begin-procedure Update_BAS-PARTIC-PLAN-opt
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update_BAS-PARTIC-PLAN-opt'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Open-Enrollment-Fields

  let $sql-statement = 'GEXBN616.SQR,Update_BAS-PARTIC-PLAN-opt,UPDATE,PS_BAS-PARTIC-PLAN'

begin-SQL  on-error=SQL-Error-Update-BAS-PARTIC-PLAN-opt

UPDATE PS_BAS_PARTIC_PLAN
    SET ELECTION_MADE        = 'Y',
        OPTION_CD            = $option_cd
where EMPLID                = $oe_EMPLID
  and PLAN_TYPE   	    = $plan_type
  and BENEFIT_PROGRAM       = $benefit_prg
  and BENEFIT_RCD_NBR       = $benefit_rcd
  and SCHED_ID              = $schedule_id
  and EVENT_ID              = $event_id
  and EVENT_DT		    = $event_dt   ! DXS, '01-JAN-2006' '01-JUL-2005' '01-Jan-2005' 
end-SQL

end-procedure  !Update_BAS-PARTIC-PLAN-opt


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-BAS-PARTIC-PLAN-opt
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Update-BAS-PARTIC-PLAN-opt'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Open-Enrollment-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-BAS-PARTIC-PLAN-opt


!-----------------------------------------------------------------------
begin-procedure Update_BAS-PARTIC-PLAN-cvg
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update_BAS-PARTIC-PLAN-cvg'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Open-Enrollment-Fields

  let $sql-statement = 'GEXBN616.SQR,Update_BAS-PARTIC-PLAN-cvg,UPDATE,PS_BAS-PARTIC-PLAN'

begin-SQL  on-error=SQL-Error-Update-BAS-PARTIC-PLAN-cvg

UPDATE PS_BAS_PARTIC_PLAN
    SET ELECTION_MADE        = 'Y',
        OPTION_CD            = $option_cd,
        FLAT_AMOUNT          = $voladd_flat_amount
where EMPLID                = $oe_EMPLID
  and PLAN_TYPE   	    = $plan_type
  and BENEFIT_PROGRAM       = $benefit_prg
  and BENEFIT_RCD_NBR       = $benefit_rcd
  and SCHED_ID              = $schedule_id
  and EVENT_ID              = $event_id
  and EVENT_DT		    = $event_dt   ! DXS, '01-JAN-2006' '01-JUL-2005' '01-Jan-2005' 

end-SQL

end-procedure  !Update_BAS-PARTIC-PLAN-cvg


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-BAS-PARTIC-PLAN-cvg
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Update-BAS-PARTIC-PLAN-cvg'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Open-Enrollment-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-BAS-PARTIC-PLAN-cvg


!-----------------------------------------------------------------------
begin-procedure Update_BAS-PARTIC-PLAN-fsa
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update_BAS-PARTIC-PLAN-fsa'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Open-Enrollment-Fields

  let $sql-statement = 'GEXBN616.SQR,Update_BAS-PARTIC-PLAN-fsa,UPDATE,PS_BAS-PARTIC-PLAN'

begin-SQL  on-error=SQL-Error-Update-BAS-PARTIC-PLAN-fsa

UPDATE PS_BAS_PARTIC_PLAN
    SET ELECTION_MADE        = 'Y',
        OPTION_CD            = $option_cd,
        ANNUAL_PLEDGE        = #pledge,
	EMPL_CONTRBUTN_AMT   = #empl_contrib
where EMPLID                = $oe_EMPLID
  and PLAN_TYPE   	    = $plan_type
  and BENEFIT_PROGRAM       = $benefit_prg
  and BENEFIT_RCD_NBR       = $benefit_rcd
  and SCHED_ID              = $schedule_id
  and EVENT_ID              = $event_id
  and EVENT_DT		    = $event_dt   ! DXS,  '01-JAN-2006' '01-JUL-2005' '01-Jan-2005' 

end-SQL

end-procedure  !Update_BAS-PARTIC-PLAN-fsa


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-BAS-PARTIC-PLAN-fsa
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Update-BAS-PARTIC-PLAN-fsa'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Open-Enrollment-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-BAS-PARTIC-PLAN-fsa


!-----------------------------------------------------------------------
begin-procedure Check-FSA-Eligibility
!-----------------------------------------------------------------------

  let $Proced-Name = 'Check-FSA-Eligibility'
  #debugA display $Proced-Name


begin-Select
'FSA'

      let $fsa_eligibility_flag = 'Y'
  #debugA Display 'FSA record exists but election is waved'

from PS_BAS_PARTIC_PLAN
where EMPLID                = $oe_EMPLID
  and PLAN_TYPE   	    = $plan_type
  and BENEFIT_RCD_NBR       = $benefit_rcd
  and BENEFIT_PROGRAM       = $benefit_prg
  and SCHED_ID              = $schedule_id
  and EVENT_ID              = $event_id
  and EVENT_DT		    = $event_dt   ! DXS, '01-JAN-2006' '01-JUL-2005' '01-Jan-2005' 

end-Select

end-procedure  !Check-FSA-Eligibility


!-----------------------------------------------------------------------
begin-procedure Display-Open-Enrollment-Fields
!-----------------------------------------------------------------------

  let $Proced-Name = 'Display-Open-Enrollment-Fields'
  #debugA display $Proced-Name

   display ' ' noline
   display '   Record # [' noline
   display  #Rec_Ctr  noline
   display ']'
   display ' '

   display '$oe_EMPLID         [' noline
   display $oe_EMPLID             noline
   display ']'
   display '$plan_type         [' noline
   display $plan_type             noline
   display ']'
   display '$recno             [' noline
   display $recno                 noline
   display ']'
   display '$schedule_id       [' noline
   display $schedule_id           noline
   display ']'
   display '$event_id          [' noline
   display $event_id              noline
   display ']'
   display '$event_dt          [' noline
   display $event_dt	          noline
   display ']'
   display '$BENEFIT_prg       [' noline
   display $BENEFIT_prg           noline
   display ']'
   display '$benefit_rcd       [' noline
   display $benefit_rcd           noline
   display ']'
   display '$medical_option_cd [' noline
   display $medical_option_cd     noline
   display ']'
   display '$dental_option_cd  [' noline
   display $dental_option_cd      noline
   display ']'
   display '$vision_option_cd  [' noline
   display $vision_option_cd      noline
   display ']'
   display '$baslife_option_cd [' noline
   display $baslife_option_cd    noline
   display ']'
   display '$vollife_option_cd [' noline
   display $vollife_option_cd     noline
   display ']'
   display '$voladd_option_cd  [' noline
   display $voladd_option_cd      noline
   display ']'
   display '$voladd_flat_amount [' noline
   display $voladd_flat_amount    noline
   display ']'
   display '$deplife_option_cd  [' noline
   display $deplife_option_cd     noline
   display ']'
   display '$depadd_option_cd  [' noline
   display $depadd_option_cd      noline
   display ']'
   display '$volspadd_option_cd [' noline
   display $volspadd_option_cd    noline
   display ']'
   display '$childadd_option_cd [' noline
   display $childadd_option_cd    noline
   display ']'
   display '$ltd_option_cd      [' noline
   display $ltd_option_cd         noline
   display ']'
   display '$healthfsa_option_cd [' noline
   display $healthfsa_option_cd   noline
   display ']'
   display '$healthfsa_flat_amount [' noline
   display $healthfsa_flat_amount noline
   display ']'
   display '$depfsa_option_cd [' noline
   display $depfsa_option_cd      noline
   display ']'
   display '$depfsa_flat_amount [' noline
   display $depfsa_flat_amount    noline
   display ']'

   display ' '

end-procedure  !Display-Open-Enrollment-Fields


!-----------------------------------------------------------------------
#include 'gexxx951.sqc'  !Get the Database name being accessed
#Include 'stdapi.sqc'    !Update Process API
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date manipulation
#Include 'validdt.sqc'   !Routines for date Validations
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'tranctrl.sqc'  !Commit-Transaction procedure
