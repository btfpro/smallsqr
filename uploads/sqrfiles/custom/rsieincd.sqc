!***********************************************************************
!  RSIEINCD: State EIN validation logic.                               *
!***********************************************************************
!***********************************************************************
!  Rimini Street Modification Log                                      *
!                                                                      *
!  06/02/2014  RSI-HCM103949  v1.0                                     *
!  Descr: Created new program to synchronize State EIN validations     *
!         across all Releases and Tax Updates.                         *
!                                                                      *
!  09/05/2014  RSI-HCM104282  v2.0                                     *
!  Descr: STATE value trimmed to remove blank spaces.                  *
!                                                                      *
!***********************************************************************

!***********************************************************************
! Procedure Rsiein-Validate-SWT-ID
! Note: State specific EIN validation logic.
!***********************************************************************
Begin-Procedure Rsiein-Validate-SWT-ID

  let $Sp8 = rpad('',8,' ')
  let $Rsiein_Err_Msg_Generated = 'N'
  let $Rsiein_W2_State = rtrim(ltrim($Rsiein_W2_State,' '),' ')

  If $Rsiein_W2_State <> 'DE' and $Rsiein_W2_State <> 'WA'
     let $Employer_StateEIN = rtrim(ltrim($Rsiein_Employer_SWT_ID,' '),' ')
     If $Employer_StateEIN = ''
        do Rsiein-Invalid-SWT-ID
     End-If
  End-If

  Evaluate $Rsiein_W2_State
     When = 'AL'
        let $StateEIN_Firstchar = substr($Employer_StateEIN, 1, 1)

        If $StateEIN_Firstchar = 'R'
           let $StateEIN_Numeric = substr($Employer_StateEIN, 2, 9)
        Else
           let $StateEIN_Numeric = substr($Employer_StateEIN, 1, 10)
        End-if

        do Check-Is-String-Numeric($StateEIN_Numeric, #Result)
        If #Result = 0
           do Rsiein-Invalid-SWT-ID
        Else
           move $StateEIN_Numeric to #StateEIN_Numeric
           If $StateEIN_Firstchar <> 'R'
              If #StateEIN_Numeric < 700000
                 move #StateEIN_Numeric to $Employer_StateEIN 0000999999
              Else
                 do Rsiein-Invalid-SWT-ID
              End-If
           Else
              If #StateEIN_Numeric < 700000
                 do Rsiein-Invalid-SWT-ID
              End-If
           End-If
        End-If
        Break
     When = 'AR'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')

        If length($Employer_StateEIN) <> 11
           do Rsiein-Invalid-SWT-ID
        End-If
        Break
     When = 'DC'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        do Check-Is-String-Numeric($Employer_StateEIN, #Result)
        If #Result = 0
           do Rsiein-Invalid-SWT-ID
        End-If
        move $Employer_StateEIN to $Employer_StateEIN 00000000000099999999
        Break
     When = 'DE'
     When = 'WA'
        move $Sp8 to $Employer_StateEIN
        Break
     When = 'ID'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')

        If (length($Employer_StateEIN)) <> 9
	   do Rsiein-Invalid-SWT-ID
        End-If
        do Check-Is-String-Numeric($Employer_StateEIN, #Result)
	If #Result = 0
	   do Rsiein-Invalid-SWT-ID
        End-If
        let $Employer_StateEIN = lpad($Employer_StateEIN,20,' ')
        Break
     When = 'IN'
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
	let $StateEIN_Test = substr($StateEIN_Test, 1, 13)
	
        If (length($StateEIN_Test)) <> 13
           do Rsiein-Invalid-SWT-ID
	Else
	   do Check-Is-String-Numeric($StateEIN_Test, #Result)
	
	   If #Result = 0
	      do Rsiein-Invalid-SWT-ID
	   End-If
        End-If
        Break
     When = 'KY'
        let $StateEIN_Numeric = substr($Employer_StateEIN, 1, 6)
	
	If (length($StateEIN_Numeric)) <> 6
	   do Rsiein-Invalid-SWT-ID
	Else
	   do Check-Is-String-Numeric($StateEIN_Numeric, #Result)
	
	   If #Result = 0
	      do Rsiein-Invalid-SWT-ID
	   End-If
	End-If
	move $StateEIN_Numeric to $Employer_StateEIN      00000000000000999999
        move $StateEIN_Numeric to $StateEIN
        Break
     When = 'MD'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test  = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
	
	If (length($StateEIN_Test)) <> 8
           do Rsiein-Invalid-SWT-ID
        Else
	   do Check-Is-String-Numeric($StateEIN_Test, #Result)
	
	   If #Result = 0
	      do Rsiein-Invalid-SWT-ID
	   End-If
	End-If
        Break
     When = 'ME'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test  = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
	
	If (length($StateEIN_Test)) <> 11
	   do Rsiein-Invalid-SWT-ID
	End-If
	Break
     When = 'MS'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test  = rtrim(ltrim($Employer_StateEIN, ' '), ' ')

        If (length($StateEIN_Test)) < 8
	   or (length($StateEIN_Test)) > 10
	   do Rsiein-Invalid-SWT-ID
	Else
	   do Check-Is-String-Numeric($StateEIN_Test, #Result)
	
	   If #Result = 0
	      do Rsiein-Invalid-SWT-ID
	   End-If
	End-If
	
	If (length($StateEIN_Test)) = 8
	   let $StateEIN_Test = $StateEIN_Test || '00'
	Else
	   If (length($StateEIN_Test)) = 9
	      let $StateEIN_Test = $StateEIN_Test || '0'
	   End-If
	End-If
	let $Employer_StateEIN = $StateEIN_Test || $FedEIN
        Break
     When = 'MT'
        move $Rsiein_Employer_SWT_ID to $Employer_StateEIN
        Break
     When = 'NC'
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
        let $StateEIN_Test = substr($StateEIN_Test, 1, 9)

        do Check-Is-String-Numeric($StateEIN_Test, #Result)
        If #Result = 0
           do Rsiein-Invalid-SWT-ID
        End-If
        let $Employer_StateEIN = $StateEIN_Test
        Break
     When = 'NE'
        move $Rsiein_Employer_SWT_ID to $Employer_StateEIN
	let $Employer_StateEIN = RTRIM($Employer_StateEIN, ' ')
	do Strip-Hyphen
	
	do  Check-Is-String-Numeric ($StateID_Numeric, #Result)
	If #Result = 0
	   do Rsiein-Invalid-SWT-ID
	End-If
	Break
     When = 'NM'
        If INSTR($Employer_StateEIN,'-',1) <> 0
	   let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
	   If SUBSTR($Employer_StateEIN,1,1) <> '0' or SUBSTR($Employer_StateEIN,9,2) <> '00'
	      do Rsiein-Invalid-SWT-ID
	      Break
	   Else
	      do Check-Is-String-Numeric ($Employer_StateEIN, #Result)
	      If #Result = 0
	         do Rsiein-Invalid-SWT-ID
	         Break
	      Else
	         let $StateEIN_Test = SUBSTR($Employer_StateEIN,2,10)
	      End-If
	   End-If
	Else
	   let $StateEIN_Test  = ltrim ($Employer_StateEIN, ' ')
	   let $len = length($StateEIN_Test)

	   If (length($StateEIN_Test)) <> 8 and (length($StateEIN_Test))<> 10
	      do Rsiein-Invalid-SWT-ID
	      Break
	   Else
	      do Check-Is-String-Numeric ($StateEIN_Test, #Result)
	      If #Result = 0
	         do Rsiein-Invalid-SWT-ID
	      Else
	         If (length($StateEIN_Test)) = 10
	            If SUBSTR($StateEIN_Test,8,2) <> '00'
	               do Rsiein-Invalid-SWT-ID
	            End-If
	         End-If
	      End-If
	   End-If	
        End-If
        Break
     When = 'OH'
        let $StateEIN_Test = ltrim(rtrim($Employer_StateEIN, ' '),' ')
        If (length($StateEIN_Test)) < 8
           or (length($StateEIN_Test)) > 9
           do Rsiein-Invalid-SWT-ID
        End-If
        If length($StateEIN_Test) = 8
           let $StateEIN_Test = substr($Employer_StateEIN, 1, 8)
        End-If
        If length($StateEIN_Test) = 9
           let $StateEIN_Test = substr($Employer_StateEIN, 1, 9)
        End-If

        do Check-Is-String-Numeric($StateEIN_Test, #Result)
        If #Result = 0
           do Rsiein-Invalid-SWT-ID
        End-If
        Break
     When = 'OR'
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
        let $StateEIN_Test = substr($StateEIN_Test, 1, 20)

        do Check-Is-String-Numeric($StateEIN_Test, #Result)
        If #Result = 0
          do Rsiein-Invalid-SWT-ID
        End-If
        move $StateEIN_Test to $Employer_StateEIN    09999999999999999999
        Break
     When = 'PA'
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
        let $StateEIN_Test = substr($StateEIN_Test, 1, 8)

        do Check-Is-String-Numeric($StateEIN_Test, #Result)
        If #Result = 0
           do Rsiein-Invalid-SWT-ID
        End-If
        let $Employer_StateEIN = $StateEIN_Test
        Break
     When = 'UT'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test  = rtrim(ltrim($Employer_StateEIN, ' '), ' ')

        If (length($StateEIN_Test)) <> 14
           do Rsiein-Invalid-SWT-ID
        End-If

        let $Last_3chars = substr($StateEIN_Test , 12, 3)
        uppercase $Last_3chars

        If $Last_3chars <> 'WTH' and $Last_3chars <> 'WMP'
           do Rsiein-Invalid-SWT-ID
        End-If

        let $StateEIN_Numeric = substr($StateEIN_Test, 1, 11)
        do Check-Is-String-Numeric($StateEIN_Numeric, #Result)
        If #Result = 0
	   do Rsiein-Invalid-SWT-ID
        End-If
        let $Employer_StateEIN = substr($StateEIN_Test, 1, 14)
        Break
     When = 'VA'
        let $Employer_StateEIN = lpad($Employer_StateEIN,20,' ')
	Break
     When = 'VT'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')
        let $Employer_StateEIN = rpad($StateEIN_Test,20,' ')
        Break
     When = 'WI'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')

        If (length($StateEIN_Test)) <> 15
	   do Rsiein-Invalid-SWT-ID
	End-If
	If $StateEIN_Test <> '036APPLIEDFOR01'
	   do  Check-Is-String-Numeric ($StateEIN_Test, #Result)
	   If #Result = 0
	      do Rsiein-Invalid-SWT-ID
	   End-If
	End-If
	let $Employer_StateEIN = rpad($StateEIN_Test,20,' ')
	Break
     When = 'WV'
        let $Employer_StateEIN = translate($Employer_StateEIN,' -.', '')
        let $StateEIN_Test = rtrim(ltrim($Employer_StateEIN, ' '), ' ')

	If (length($StateEIN_Test)) <> 8 and
	   (length($StateEIN_Test)) <> 9 and
	   (length($StateEIN_Test)) <> 12
	      do Rsiein-Invalid-SWT-ID
	End-If
	
	do  Check-Is-String-Numeric ($StateEIN_Test, #Result)
	If #Result = 0
	   do Rsiein-Invalid-SWT-ID
	End-If
	let $Employer_StateEIN = rpad($StateEIN_Test,20,'0')
	Break	
     When-Other
        move $Rsiein_Employer_SWT_ID  to  $Employer_StateEIN
        Break
  End-Evaluate
  move $Employer_StateEIN to $StateEIN

End-Procedure Validate-SWT-ID-No-Abort

!***********************************************************************
! Procedure Rsiein-Invalid-SWT-ID
!***********************************************************************
Begin-Procedure Rsiein-Invalid-SWT-ID

  If $Rsiein_Err_Msg_Generated = 'N'
     let $Rsiein_Err_Msg = 'Invalid State EIN  : ' || '''' || $Employer_StateEIN || '''' || ' for ' || $Rsiein_W2_State

     Evaluate $Rsiein_W2_State
        When = 'AL'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN format for Alabama State: < 700,000 then 0123456789; > 700,000 then R123456789'
           Break
        When = 'AR'
	   let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Arkansas State should be 11 characters in length'
           Break
        When = 'DC'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for District of Columbia should be numeric'
           Break
        When = 'ID'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Idaho State should be numeric and 9 digits in length'
           Break
        When = 'IN'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Indiana State should be numeric and 13 digits in length'
           Break
        When = 'KY'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Kentucky State should be entered as: 999999'
           Break
        When = 'MD'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Maryland State should be entered as: 99999999 or 9999999-9'
           Break
        When = 'ME'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Maine State should be 11 characters in length'
           Break
        When = 'MS'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Mississippi State should be numeric and 8, 9 or 10 digits in length'
           Break
        When = 'NC'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for North Carolina State should be entered as: 999999999'
           Break
        When = 'NM'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for New Mexico State should be entered as: 99999999, 9999999009 or 09-999999-009'
           Break
        When = 'OH'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Ohio State should be entered as: 99999999 or 999999999'
           Break
        When = 'OR'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Oregon State should be numeric'
           Break
        When = 'PA'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Pennsylvania State should be entered as: 99999999'
           Break
        When = 'UT'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Utah State should be entered as: 99999999-999-xxx or 99999999999xxx'
           Break
        When = 'WI'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for Wisconsin State should be numeric and 15 digits in length'
           Break
        When = 'WV'
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg || ', EIN for West Virginia State should be numeric and 8, 9 or 12 digits in length'
           Break
        When-Other
           let $Rsiein_Err_Msg = $Rsiein_Err_Msg
           Break
     End-Evaluate

     let $Rsiein_Err_Msg_Generated = 'Y'
  End-If

End-Procedure Rsiein-Invalid-SWT-ID

!***********************************************************************
! Procedure Check-Is-String-Numeric
!***********************************************************************
Begin-Procedure Check-Is-String-Numeric($Validate_String, :#Result)

  let #Max_Length    = length($Validate_String)
  let #Result = 1
  let #CharPos     = 1

  While #CharPos <= #Max_Length
     let $Validate_Char   = substr($Validate_String, #CharPos, 1)
     let #Valid_Digit = instr('0123456789', $Validate_Char, 1)
     If  #Valid_Digit = 0
        let #Result = 0
        Break
     End-If
     add 1 to #CharPos
  End-While

End-Procedure Check-Is-String-Numeric

!***********************************************************************
! Procedure Strip-Hyphen
!***********************************************************************
Begin-Procedure Strip-Hyphen

  let #HyphenPosition = INSTR($Employer_StateEIN,'-',1)
  If #HyphenPosition <> 2 and #HyphenPosition <> 3
    let $State_ID = ltrim ($Employer_StateEIN, ' ')
  Else
    let $State_ID = ltrim ($Employer_StateEIN, ' ')
    let $State_ID = ltrim ($State_ID, '0123456789')
    let $State_ID = ltrim ($State_ID, '-')
  End-If
  let $StateID_Numeric  = $State_ID
  let #Employer_StateEIN = $StateID_Numeric
  move #Employer_StateEIN to $Employer_StateEIN    09999999999999999999

End-Procedure Strip-Hyphen
