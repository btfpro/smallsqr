!***********************************************************************
! GEXBN804: RESET CONFIG2 AND DELETE CLICKER TABLE ENTRIES             *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!  NARRATIVE: Reset Config2 and delete clicker table entries
!
!  This sqr will reset bytes 4 to 10 of elig_config2 field in JOB 
!  to 0000000 for Benefit Programs specified in the SQR PROCESS TABLE 
!  under sqr name GEXBN804.
!
!  RUN FREQUENCY:
!
!  Weekly
!
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *  
!***********************************************************************
!  GBNC054   GXD       08/11/1998     INITIAL CREATION                 *
!                                     (used GEXBNNAH as a template)    *
!	     SXK       08/12/1998     Should not be clearing config2   *
!				      for benefit program W07          *
!            CJH       11/19/1998     Should not clear elig_config2    *
!                                     for transfers from W06 to W05    *
!            SXK       12/07/98       Do not print EEs that did not    *
!                                     get processed                    *
!            AXL       12/21/1999     Added EFFSEQ as key join between *
!                                     PS_JOB and BAS_PARTIC            *
!            CJH       12/04/2000     Add Old and New BP to report for *
!                                     COD implementation.              *
!            PLN       12/12/2000     Added Company/Paygroup to        *
!                                     order by, column alignment and   *
!                                     logic for BP = R36.              *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment

begin-setup
#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup


!*********************************************************************
!Initial processing, retrieving current dates, etc. 
!*********************************************************************
begin-report
#debug9 show 'gexbn804.begin-report'

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXBN804' to $ReportID
  move 'Reset Config2 and Delete Clicker Table Entries' to $ReportTitle
  show '$ReportID=' $ReportID
  show '$ReportTitle=' $ReportTitle 

  do Get-Current-DateTime
  show '$asoftoday=' $asoftoday 
  show '$reportdate=' $reportdate 
  
  do Report

!  do rollback-transaction                      !**debug**remove
  do Commit-Transaction                 

  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report
#debug9 show 'gexbnnah.report'

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

  move 'N' to $Errorfound

  move $asoftoday to $where_select_date
  
  show '$where_select_date= ' $where_select_date

  Do Convert-to-dtu-date($AsOfToday,$current_date)
  let $curr_yy = substr($current_date,1,4)
  let $curr_mm = substr($current_date,6,2)
  let $curr_dd = substr($current_date,9,2)
  let $curr_all = $curr_yy||$curr_mm||$curr_dd

  do Main-Process

Report-Exit:

  date-time () hh:mi:ss &timeProcess
!  display ' Total EE Participating Benefit Programs Rows Read: ' noline
!  display #TotalInputTran 9999999
!  do Format-Number(#TotalInputTran,$TotalInputTran,'9999999')
!  move #TotalInputTran to $TotalInputTran 
!  let $x000_temp_out =  ' Total EE Participating Benefit Programs Rows Read: ' || $TotalInputTran 
!  print $x000_temp_out  (+2,34)

  display ' Total Current rows Updated in JOB:                 ' noline
  display #current_count 9999999
  do Format-Number(#current_count,$current_count,'9999999')
!  move #current_count to $current_count 
  let $x000_temp_out =  ' Total Current rows Updated in JOB:                 ' || $current_count 
  print $x000_temp_out  (+1,34)

  display ' Total Future JOB Rows Updated:                     ' noline
  display #future_count 9999999
  do Format-Number(#future_count,$future_count,'9999999')
!  move #future_count to $future_count
  let $x000_temp_out =  ' Total Future JOB Rows Updated:                     ' || $future_count
  print $x000_temp_out  (+1,34)                                

!  display ' Total Gex Clicker Rows Deleted:                    ' noline 
!  display #delete_count 9999999
!  do Format-Number(#delete_count,$delete_count,'9999999')
!  move #delete_count to $delete_count
!  let $x000_temp_out =  ' Total Gex Clicker Rows Deleted:                    ' || $delete_count
!  print $x000_temp_out  (+1,34)


  Do Get-Current-DateTime
  Print 'End Time: ' (+2,1)
  Print $ReportDate      ()
  Print ' '              ()
  Print $ReportTime      ()

  display &timeProcess

end-procedure


!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************

begin-heading 8  for-reports=(report-log)
#debug9 show 'gexbn804.begin-heading'

concat '(' with $reporttitle
concat $bp_name with $reporttitle
concat ')' with $reporttitle
 #Include 'stdhdg01.sqc'

!  date-time () DD-MON-YYYY &curr_Date 
!  print &curr_Date ()
  position (-1)
  print 'Report Log' () center bold

  position (+3)

!PLN - 12/12/2000 begin
  print 'Company'	          (,01) bold
  print 'Paygroup'          (,10) bold
  print 'Emplid'            (,25) bold
  print 'Empl Rcd'          (,35) bold
  print 'Effective Date'    (,50) bold
! CJH - 12/04/2000 - COD changes - begin
!  print 'Old Elig Config2'  (,47) bold
!  print 'New Elig Config2'  (,67) bold
!  print '-'             (+1,1,83) fill

  print 'Old BP'            (,70) bold
  print 'New BP'            (,80) bold
! print 'Old Elig Config2'  (,87) bold
! print 'New Elig Config2'  (,107) bold
  print 'Old Elig Config2'  (,95) bold
  print 'New Elig Config2'  (,115) bold
!PLN - 12/12/2000 end
  print '-'             (+1,1,131) fill
! CJH - 12/04/2000 - end
 
end-heading


!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
#debug9 show 'gexbnnah.begin-footing'

page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing


!*******************************************************************
!Retrieves all the benefit programs for this SQR program and process 
!them one by one
!*******************************************************************
Begin-Procedure Main-Process
!Display 'gexbn804.Main-Process'

 move 0 to #current_count
 move 0 to #future_count
 move 0 to #delete_count
 
 Do Get-Pay-Calendar
 Do Get-Job

end-procedure

!*****************************************************************
! Get the Maximum Pay End Dt < Current Date from Pay Calendar
!*****************************************************************
begin-procedure Get-Pay-Calendar
!Display 'Get-Pay-Calendar'
begin-select

PC.PAY_END_DT
   move &PC.PAY_END_DT   to $pay_end_dt
   
PC.PAY_BEGIN_DT
   move &PC.PAY_BEGIN_DT to $pay_begin_dt

   Do Convert-to-dtu-date($pay_end_dt,$pay_end)
   display 'Pay end date:' noline
   display $pay_end

   let $end_yy = substr($pay_end,1,4)
   let $end_mm = substr($pay_end,6,2)
   let $end_dd = substr($pay_end,9,2)
   let $end_all = $end_yy||$end_mm||$end_dd

   Do Convert-to-dtu-date($pay_begin_dt,$pay_beg)
   let $beg_yy = substr($pay_beg,1,4)
   let $beg_mm = substr($pay_beg,6,2)
   let $beg_dd = substr($pay_beg,9,2)
   let $beg_all = $beg_yy||$beg_mm||$beg_dd
   exit-select

FROM PS_PAY_CALENDAR PC
WHERE PC.PAY_END_DT = (SELECT MAX(PAY_END_DT)
		       FROM PS_PAY_CALENDAR
		       WHERE to_char(PAY_END_DT,'yyyymmdd') <= $curr_all
                         and pay_confirm_run = 'Y')
end-select
end-procedure

!*****************************************************************
! Get Job Record Where Action Date Between Pay Begin Date and 
!         Pay End Dt from Pay Calendar
!*****************************************************************
begin-procedure Get-Job
!Display 'Get-Job'

begin-select
JB.EMPLID
   move &JB.EMPLID    to $emplid

JB.EMPL_RCD
   move &JB.EMPL_RCD to #empl_rcd

JB.EFFDT
   move &JB.EFFDT     to $effective_date


!PLN - 12/12/2000 begin
JB.COMPANY
   move &JB.COMPANY     to $company

JB.PAYGROUP
   move &JB.paygroup     to $paygroup
!PLN - 12/12/2000 end

   Do Convert-to-dtu-date($effective_date,$effdt)
   let $eff_yy = substr($effdt,1,4)
   let $eff_mm = substr($effdt,6,2)
   let $eff_dd = substr($effdt,9,2)
   let $eff_all = $eff_yy||$eff_mm||$eff_dd

JB.EFFSEQ		!AXL 12/21/99 Mod
   move &JB.EFFSEQ     to #effseq

!   Display 'Job Selection'
  #debug9  Display $emplid
!   Display #empl_rcd
  #debug9   Display $eff_all

   Do Get-Bas-Partic
   #debug9 display $bas_partic_found
   if $bas_partic_found = 'Y'
         #debug9 display 'Bas Partic:      ' noline
         #debug9 display $bp_benefit_program
      
      Do Get-Ben-Prog-Partic
      if $ben_prog_partic_found = 'Y'

         #debug9 display 'Ben Prog Partic: ' noline
         #debug9 display $bpp_benefit_program

	 if $bp_benefit_program <> $bpp_benefit_program
	    if $bp_benefit_program <> 'R17'
         !SXK 08/12/98 Begin
               and $bp_benefit_program <> 'W07'
         !SXK 08/12/98 end
         !CJH 11/19/1998 Begin
               and $bp_benefit_program <> 'W05'
         !CJH 11/19/1998 end
         
         !PLN 12/12/2000 Begin
               and $bp_benefit_program <> 'R36'
         !PLN 12/12/2000 end

                add 1 to #TotalInputTran
!               Display 'Get Current & Future Records.'
	       Do Get-Current-Job
	       Do Get-Future-Job
	    end-if
	    Do Delete-Gex-Clicker
	 else
  !SXK 12/07/98 Begin No need to report if employee is not processed
  !	    print $emplid                (+1,1)
  !	    print $bpp.benefit_program   (0,11)
  !	    print $bp.benefit_program    (0,+2)
  !	    print '- not processed.'     (0,+1)
  !SXK 12/07/98 End
	 end-if
      end-if
   end-if

FROM PS_JOB JB
WHERE (to_char(JB.ACTION_DT,'yyyymmdd') BETWEEN $beg_all AND $end_all)
AND   substr(JB.ELIG_CONFIG2,4,7) <> '0000000'
!AND   JB.EFFDT = (SELECT MAX(EFFDT)
!		  FROM PS_JOB
!		  WHERE EMPLID    = JB.EMPLID
!		  AND   EMPL_RCD = JB.EMPL_RCD
!		  AND   to_char(EFFDT,'yyyymmdd') < $pay_end)
!PLN - 12/12/2000 - begin
ORDER BY JB.COMPANY, JB.PAYGROUP, JB.EMPLID
!PLN - 12/12/2000 - end
end-select
end-procedure

!*****************************************************************
! Get Benefit Program from Bas Partic Table
!*****************************************************************
begin-procedure Get-Bas-Partic

  Let $bas_partic_found = 'N'

begin-select
BP.BENEFIT_PROGRAM
   move &BP.BENEFIT_PROGRAM to $bp_benefit_program

BP.JOB_EFFDT
   move &BP.JOB_EFFDT to $job_effective_date
   
   Do Convert-to-dtu-date($job_effective_date,$job_effdt)
   let $job_yy = substr($job_effdt,1,4)
   let $job_mm = substr($job_effdt,6,2)
   let $job_dd = substr($job_effdt,9,2)
   let $job_all = $job_yy||$job_mm||$job_dd

   Let $bas_partic_found = 'Y'

FROM PS_BAS_PARTIC BP
WHERE BP.EMPLID    = $emplid
AND   BP.EMPL_RCD = #empl_rcd
AND   BP.JOB_EFFSEQ= #effseq		!AXL 12/21/99 Mod
AND   to_char(BP.JOB_EFFDT,'yyyymmdd') = $eff_all

end-select
end-procedure

!*****************************************************************
! Get Benefit Program from Ben Prog Partic Table
!*****************************************************************
begin-procedure Get-Ben-Prog-Partic

move 'N' to $ben_prog_partic_found

begin-select
BPP.BENEFIT_PROGRAM
   move &BPP.BENEFIT_PROGRAM to $bpp_benefit_program

   move 'Y' to $ben_prog_partic_found

FROM PS_BEN_PROG_PARTIC BPP
WHERE BPP.EMPLID    = $emplid
AND   BPP.EMPL_RCD = #empl_rcd
AND   BPP.EFFDT = (SELECT MAX(EFFDT)
		   FROM PS_BEN_PROG_PARTIC
		   WHERE EMPLID = $emplid
		   AND   EMPL_RCD = #empl_rcd
		   AND   to_char(EFFDT,'yyyymmdd') < $job_all)
end-select
end-procedure

!********************************************************************
! Get Current Job Record
!********************************************************************
begin-procedure Get-Current-Job

begin-select
CJ.EFFDT
   move &CJ.EFFDT        to $update_effdt
   
CJ.EFFSEQ
   move &CJ.EFFSEQ       to #update_effseq

CJ.ELIG_CONFIG2
   move &CJ.ELIG_CONFIG2 to $elig_config2

   Do Convert-to-dtu-date($update_effdt,$upd_effdt)
   let $upd_yy = substr($upd_effdt,1,4)
   let $upd_mm = substr($upd_effdt,6,2)
   let $upd_dd = substr($upd_effdt,9,2)
   let $upd_all = $upd_yy||$upd_mm||$upd_dd

!   Display 'Current Record'
!   Display $emplid
!   Display $update_effdt
!   Display $elig_config2

    add 1 to #current_count
    Do Update-Job-Record
    Do Print-Record

FROM PS_JOB CJ
WHERE CJ.EMPLID    = $emplid
AND   CJ.EMPL_RCD = #empl_rcd
AND   CJ.EFFDT = $effective_date
AND   CJ.EFFSEQ = (SELECT MAX(EFFSEQ)
		   FROM PS_JOB
		   WHERE EMPLID    = $emplid
		   AND   EMPL_RCD = #empl_rcd
		   AND   EFFDT = CJ.EFFDT)
AND   substr(CJ.ELIG_CONFIG2,4,7) <> '0000000'

end-select
end-procedure

!********************************************************************
! Get Future Job Record(s)
!********************************************************************
begin-procedure Get-Future-Job

begin-select
FJ.EFFDT
   move &FJ.EFFDT        to $update_effdt
   
FJ.EFFSEQ
   move &FJ.EFFSEQ       to #update_effseq

FJ.ELIG_CONFIG2
   move &FJ.ELIG_CONFIG2 to $elig_config2

   Do Convert-to-dtu-date($update_effdt,$upd_effdt)
   let $upd_yy = substr($upd_effdt,1,4)
   let $upd_mm = substr($upd_effdt,6,2)
   let $upd_dd = substr($upd_effdt,9,2)
   let $upd_all = $upd_yy||$upd_mm||$upd_dd

!   Display 'Future Record'
!   Display $emplid
!   Display $update_effdt
!   Display $elig_config2

    add 1 to #future_count
    Do Update-Job-Record
    Do Print-Record

FROM PS_JOB FJ
WHERE FJ.EMPLID    = $emplid
AND   FJ.EMPL_RCD = #empl_rcd
AND   FJ.EFFDT > $effective_date
AND   substr(FJ.ELIG_CONFIG2,4,7) <> '0000000'
end-select
end-procedure

!********************************************************************
! Update Current and Future Job Records - Elig Config2 Field
!********************************************************************
begin-procedure Update-Job-Record

  let $elig_hold = substr($elig_config2,1,3)
  let $new_elig_config2 = $elig_hold||'0000000'


begin-sql on-error=SQL-Error-Found('Update-Job-Record')

Update ps_job
set elig_config2 = $new_elig_config2
where emplid     = $emplid
and   empl_rcd  = #empl_rcd
and   to_char(effdt,'yyyymmdd') = $upd_all
and   effseq     = #update_effseq

end-sql
end-procedure
			   
!********************************************************************
! Delete Gex Clicker Table Entries
!********************************************************************
begin-procedure Delete-Gex-Clicker
begin-sql on-error=SQL-Error-Found('Delete-Clicker')
Delete from
ps_gex_clicker
where emplid = $emplid
and   empl_rcd = #empl_rcd
end-sql

  add 1 to #delete_count

end-procedure

!********************************************************************
! Print Record
!********************************************************************
begin-procedure Print-Record

 do Format-Number(#empl_rcd,$empl_rcd,'9')

 let $print_effdt = $upd_mm||'/'||$upd_dd||'/'||$upd_yy

!PLN - 12/12/2000 begin
 print $company              (+1,3)
 print $paygroup             (0,13)
 print $emplid               (0,25)
 print $empl_rcd              (0,39)
! CJH - 12/04/2000 - COD Changes
! print $print_effdt           (0,31)
! print $elig_config2          (0,54)
! print $new_elig_config2      (0,74)

!print $print_effdt           (0,25)
 print $print_effdt           (0,53)

!print $bp_benefit_program    (0,45) ! new BP
!print $bpp_benefit_program   (0,65) ! old BP
 print $bpp_benefit_program    (0,72) ! old BP
 print $bp_benefit_program   (0,82) ! new BP

!print $elig_config2          (0,85)
!print $new_elig_config2      (0,135)
 print $elig_config2          (0,98)
 print $new_elig_config2      (0,118)
!PLN - 12/12/2000 end
! CJH - 12/04/2000 - end
end-procedure

!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
#debug9 show 'gexbn804.SQL-Error-Found'

  print 'SQL Error in ' (,34)
  print $Proc_Name         ()  
  print $_sql-error        () 
  print 'sql-status:'      ()
  print #_sql-status       () edit 99999 

end-procedure

!**************************************************************  
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'readxlat.sqc'  !Read xlattable
