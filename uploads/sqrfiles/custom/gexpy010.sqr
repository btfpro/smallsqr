!***********************************************************************
!  GEXPY010:  Payroll Register                                         *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1996 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 10/23/98 6:34p   $                                      *
!  $Revision:: 6                $                                      *
!  $Workfile:: PAY002.SQR       $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!     INITIALS	  DATE	      DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!     JDH	  05/06/98    Initial Creation  (Cloned PAY002)        *
!                             Modified to move deptid to heading, page *
!                             break by deptid, add acct_cd             *
!                             to detail, and sort by acct_cd. Also     *
!                             added code to not print employees with   *
!                             zero gross pay.                          *
!                                                                      *
!     JDH         12/16/98    Fixed problem with the way job was being *
!                             joined to the pay check.                 *
!                                                                      *
!     SXK         02/15/99    Fixed the problem with duplicate         *
!                             garnishment printing.                    *
!                                                                      *
!     SXK         03/23/99    Fixed the problem - not pulling gross >0 *
!                                                                      *
!     SXK         04/19/99    Added Ytd information for each EE.       *
!                                                                      *
!     SXK         04/27/1999  Added Ytd subtotals by acctcd, deptid,   *
!			      paygroup and company                     *
!                                                                      *
!     SXK         06/14/1999  Modified to pull multiple check info.    *
!			      Also if adjustments are made for an      *
!                             employee for previous checks and the     *
!                             original deptid is different from        *
!                             current one, this adjustment will be     *
!                             shown on the current deptid              *
!                                                                      *
!     SXK         06/16/1999  Also if payroll entered some manual pay  *
!                             sheets for an employee for a different   *
!                             pay group than his/her job paygroup,that *
!                             information will be shown under original *
!                             job paygroup.                            *
!                                                                      *
!     SXK         07/13/1999  Modified to extend the above modification*
!                             across the run ids.                      *
!                                                                      *
!     AXL         10/28/1999  Added logic to insert YTD Earnings,      *
!                             Deductions, Tax amounts into temporary   *
!                             tables formerly created outside of this  *
!                             sqr via scripts.                         *
!                                                                      *
!     CWB         02/28/2000  Commented out the Canadian tax procedure *
!                             to eliminate compiler error.             *
!     SXC         06/05/2000  Fixed a problem when an empl who has     *
!                             a check advice when an adjustment is     *
!                             processed, its showing up on the         *
!                             Payroll/Check register.                  *
!                                                                      *
!     SCM        04/05/2002   Added taxclasses for tips.               *
!                             G=OASDI Tips and T=MEDIcare tips.        *
!     AXC	 08/01/2002   EMPL_RCD added to join on earnings balance
!			      Field names changed, paycheck_nbr , line#*
!			      ADDL# page#. 8.3 Upgrade                 *
!     SRK         02/18/03    Modified to sum(ded_ytd) instead of just *
!				ded_ytd in the deduction_bal select    *
!				to accomodate multi job people in the  *
!				same company. Similarly sum(hrs_ytd) and
!				sum(grs_ytd) for earnings_bal          *
!                                                                      *
!     CWB        05/05/2003   Added logic to prevent EEs YTD balances  *
!                             being reported in Paygroups in which they*
!                             are no longer employed. CSR HR-10423.    *
!                                                                      *
!   AXL   10863  05/16/2005   Removed some of the criteria introduced  *
!                             on the last modification. The addl joins *
!                             were causing newhires to drop off and the*
!                             results would not reconcile to GEXPY006. *
!                                                                      *
!   AXL   33081  06/30/2005   Additional tweaking of the sub-select    *
!                             logic that is still causing out of       *
!                             balance conditions.                      
!GEX_PY230  SXD  08/20/2007   Commented the optimizer rule and all hints          
!!GEX-TLL        03/05/08     HCM9.0 Upgarde Retrofitting Begin        *
!Jyotsna -       02/02/2017   To display TMs with single rows in Balance
!                             Tables
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'GEXPY010' to $ReportID
  move 'Payroll Register' to $ReportTitle
  !SXD   08/20/2007    Begin
  !do Alter-Session   ! Set Session to RULE Optimizer
  !SXD   08/20/2007    End
  do Array-Initialization
  do truncate-temp-tables	!AXL-add 10/28/1999
  do create-ytd-arrays
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Payroll-Report-Initialization
end-procedure


begin-procedure Array-Initialization
#debug8 show 'Array Initialization'
  create-array name=Totals               -
               size=7                    -
               field=TotalName:char      -
               field=total:number:13     -
               field=startCol:number:13

  put 'Current Report Total'     into Totals(1) TotalName
  put 'Current Company Total'    into Totals(2) TotalName
  put 'Curr. Period Total'     into Totals(3) TotalName
  put 'Current Pay Group Total'  into Totals(4) TotalName
  put 'Current Department Total' into Totals(5) TotalName
  put 'Current AcctCD Total'     into Totals(6) TotalName
  put  31 into Totals(0) startCol(0)
  put  45 into Totals(0) startCol(1)
  put  54 into Totals(0) startCol(2)
  put  65 into Totals(0) startCol(3)
  put  78 into Totals(0) startCol(4)
  put  92 into Totals(0) startCol(5)
  put 106 into Totals(0) startCol(6)
  put 119 into Totals(0) startCol(7)
  put 138 into Totals(0) startCol(8)
  put 161 into Totals(0) startCol(9)
  put 161 into Totals(0) startCol(10)
  put 161 into Totals(0) startCol(11)
  put 161 into Totals(0) startCol(12)

  create-array name=ETDarray          -
               size=150               -
               field=EarnType:char    -
               field=EarnHours:number -
               field=EarnGross:number -
               field=TaxAmt:number    -
               field=TaxType:char     -
               field=DedAmt:number    -
               field=DedCode:char

!SXK 04/19/1999 Begin

  create-array name=earns
	       size=150
	       field=erncd:char
               field=ytd_h:number
	       field=ytd:number

  create-array name=ded
		size=150
		field=dedcd:char
		field=ytd_d:number

  create-array name=tax
		size=150
		field=taxcd:char
		field=ytd_t:number

!SXK 04/19/1999 End

end-procedure

!*********************************************************************
begin-procedure Truncate-Temp-Tables
!*********************************************************************
#debug8 show 'Truncate ps_gex_b_run_etot'
begin-SQL 
TRUNCATE TABLE SYSADM.PS_GEX_B_RUN_ETOT
end-SQL

#debug8 show 'truncate ps_gex_b_run_dtot'
begin-SQL 
TRUNCATE TABLE SYSADM.PS_GEX_B_RUN_DTOT
end-SQL

#debug8 show 'truncate ps_gex_b_run_ttot'

begin-SQL 
TRUNCATE TABLE SYSADM.PS_GEX_B_RUN_TTOT
end-SQL

end-procedure

begin-heading 9
  #Include 'stdhdgpi.sqc'
  #Include 'stdhdg06.sqc'

  print 'Deptid' (6,1)
  print $DeptID  (,+6)

  print 'Employee Name/ID        Form ID      <----- REGULAR -----'    (+2,1)
  print '>  <--- OVERTIME --->  <-------- OTHER -------->'             ()

#ifdef USA
  print 'Acct. Cd.    Check Date   Check No.    Hours      Earning'    (+1,1)
#endif

#ifdef CANADA
  print 'Acct. Cd.    Cheque Date  Cheque No.   Hours      Earning'    (+1,1)
#endif

  print 's    Hours   Earnings  Type  Hours      Earnings     Gross P' ()
  print 'ay       Taxes  Type    Deductions Code            Net Pay'   ()
end-heading

begin-procedure Report
begin-select
A.COMPANY    () on-break print=never  level=1 procedure=Company-Change save=$prev_company
A.PAY_END_DT () on-break print=never  level=2 procedure=PayEndDate-Change save=$prev_pay_end_dt
A.PAYGROUP   () on-break print=never  level=3 procedure=PayGroup-Change save=$prev_paygroup
A.CHECK_DT 
  move &A.check_dt to $prev_check_dt
  do convert-to-dtu-date($prev_CHECK_DT, $check_dt_dtu)
  let $balance_year = substr($check_dt_dtu,1,4)
  let #balance_period = substr($check_dt_dtu,6,2)
  !display $balance_year
  !display #balance_period
! CWB 05/05/2003 BEGIN
  let $first_of_year = '01-JAN-'||$balance_year
  show '$first_of_year: ' $first_of_year
! CWB 05/05/2003 END
  do main-process
from ps_pay_calendar A
where [$SlctCalendar]

end-select
  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals

end-procedure


begin-procedure main-process
begin-SELECT
! /*+ RULE */
J.DEPTID     () on-break print=never  level=4 procedure=Department-Change save=$prev_deptid
J.ACCT_CD    () on-break print=never  level=5 procedure=Acctcd-Change save=$prev_acct_cd
P2.NAME
J.EMPLID () on-break print=never level=6 after=print-empl-ytd save=$prev_emplid
J.EMPL_RCD
!P.COUNTRY

  move &A.Company     to $Company
  move &A.PayGroup    to $PayGroup
  move &A.Pay_End_Dt  to $PayEndDate
!  move &J.Deptid      to $Deptid
  move &A.Check_Dt    to $AsOfDate  !for included procedures
  move &J.Acct_Cd     to $AcctCd
  !SXK 06/14/1999 Begin
  do Initialize-ETD-Array
  !SXK 06/14/1999 End
  do get-pay-check

  do convert-to-dtu-date(&a.check_dt,$check_dt_dtu)
  let $balance_year = substr($check_dt_dtu,1,4)
  let #balance_period = substr($check_dt_dtu,6,2)
!SXK 06/14/1999 Begin
!  if $check_found = 'Y'
!     do Get-Pay-Earnings
!  end-if

  if $check_found = 'N'
    move &J.Deptid      to $Deptid
!SXK 06/14/1999 End
    let $Name = RTRIM(&P2.Name, ' ')
    print $Name                   (2,1,23)

    if #Current-Line = 10
        move 'N' to $Overflow_SW
    else
        move 'Y' to $Overflow_SW
    end-if

    print &B.Form_ID              (2,25)
    print &J.EmplID               (3,1)
    print &J.Acct_Cd              (4,1)

    if RTRIM(&B.Check_Dt, ' ') <> ''
      do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
      print $out  (3,14)
    end-if

    evaluate &B.PayCheck_Option
      when = 'R'
      when = 'M'
      when = 'A'
        print &B.PayCheck_Option  (3,+2)
    end-evaluate

    if &B.PayCheck_Option = '&' or &B.PayCheck_Option = 'A'
      do Get-Pay-Distribution
    end-if

    if &B.paycheck_nbr <> 0
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting Begin
      !do Format-Number(&B.paycheck_nbr, $out, '0999999')
       do Format-Number(&B.paycheck_nbr, $out, '9999999999')
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting End
      print $out         (3,28)
    end-if

    if &B.Pay_Sheet_Src = 'O'
       print &B.Pay_Sheet_Src   (3,36)
    end-if

    if &B.PayCheck_Option = '&'                      ! Advice and Check
      print 'A'          (4,26)
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting Begin
      !do Format-Number(#Advice#, $out, '0999999')
      do Format-Number(#Advice#, $out, '9999999999')
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting End
      print $out         (4,28)
    end-if

    do Format-Number(&B.Total_Gross, $out, '99,999,999.99mi')
    print $out         (2,107)
    do Format-Number(&B.Net_Pay, $out, '99,999,999.99mi')
    print $out         (2,162)

    evaluate &B.PayCheck_Option
      when = 'C'
      when = 'M'

        if &B.PayCheck_Status = 'F'
                or &B.PayCheck_Status = 'A'
                or &B.PayCheck_Status = 'R'
            move &B.Net_Pay to #Check_Amount
            print 'C'            (+0,0)
        else
            move &B.Net_Pay to #UnConfirm_Total
            print 'U'            (+0,0)
        end-if

      when = 'A'
        print 'A'            (+0,0)
      when = '&'
        move 3 to #line_num

        if #Check_Amount <> 0
          do Format-Number(#Check_Amount, $out, '99,999,999.99mi')
          print $out  (#line_num,162)
          print 'C'            (+0,0)
          add 1 to #line_num
        end-if

        if #Deposit_Total <> 0
          do Format-Number(#Deposit_Total, $out, '99,999,999.99mi')
          print $out (#line_num,162)
          print 'A'            (+0,0)
          add 1 to #line_num
        end-if

      when = 'R'
        if &B.PayCheck_Status = 'F'
                or &B.PayCheck_Status = 'A'
            do Process-Reversal
        else
            move &B.Net_Pay to #UnConfirm_Total
        end-if
    end-evaluate

    ARRAY-ADD &B.Total_Gross      -
              &B.Total_Taxes      -
              &B.Total_Deductions -
              &B.Net_Pay          -
              #Check_Amount       -
              #Deposit_Total      -
              #UnConfirm_Total    -
      to Totals(6) total(6)       -
                   TOTAL(7)       -
                   TOTAL(8)       -
                   TOTAL(9)       -
                   TOTAL(10)      -
                   TOTAL(11)      -
                   TOTAL(12)

 !   if &P.Country = 'USA'
     if $check_found = 'Y'
      do Get-USA-Taxes
     end-if
 !   else
 !     if &P.Country = 'CAN'
 !       do Get-CAN-Taxes
 !     end-if
 !   end-if
    if $check_found = 'Y'
       do Get-Deductions
    end-if
    do Print-Detail
  end-if

  move 0 to #Advice#
  move 0 to #UnConfirm_Total
  move 0 to #Deposit_Total
  move 0 to #Check_Amount
  move 0 to #Cash_Total
  NEXT-LISTING NEED=4

  move &a.company to $company
  move &a.paygroup to $paygroup

FROM  PS_JOB          J,
      PS_PERSONAL_DATA P2

WHERE P2.EMPLID = J.EMPLID
  AND J.EMPLID > '0'
  AND J.COMPANY  = &A.COMPANY
  AND J.PAYGROUP = &A.PAYGROUP
  AND J.EFFDT     =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = j.EMPLID
          AND EMPL_RCD = j.EMPL_RCD
          AND EFFDT    <= &A.PAY_END_DT
          AND COMPANY   = j.COMPANY
          AND PAYGROUP  = j.PAYGROUP)
  AND J.EFFSEQ          =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND EMPL_RCD = J.EMPL_RCD
          AND EFFDT     = J.EFFDT
          AND COMPANY   = J.COMPANY
          AND PAYGROUP  = J.PAYGROUP)
  and J.EMPLID IN (select y.emplid from ps_check_ytd y
		where Y.EMPLID = J.EMPLID
!SXK 06/16/1999 Begin
!		  AND Y.COMPANY = J.COMPANY
!SXK 06/16/1999 End
		  AND Y.BALANCE_YEAR = $Balance_year
		  AND Y.BALANCE_ID = 'CY')
! CWB 05/05/2003 BEGIN
  and  j.emplid in 
         (select distinct payc.emplid 
          from ps_pay_check payc
	  where payc.company = j.company
          and payc.paygroup = j.paygroup        
	  !and payc.deptid = j.deptid		*AXL 3/25/2005
          and payc.check_dt > $first_of_year)	!*AXL 6/30/2005
! CWB 05/05/2003 END
!SXK 06/14/1999 Begin
!		  AND Y.TOTAL_GROSS_YTD > 0)
!SXK 06/14/1999 End
ORDER BY 
!A.COMPANY,
!         A.PAY_END_DT,
!         A.PAYGROUP,
         J.DEPTID,
         J.ACCT_CD,
         P2.NAME,
         J.EMPLID
end-SELECT

end-procedure

begin-Procedure get-pay-check
!display 'get-pay-check'

  move ' ' to $SlctCalendar
  if $SlctRunID <> '*'
    move  'CR.RUN_ID = ''' to $SlctCalendar
    concat $SlctRunID     with $SlctCalendar
    concat ''''           with $SlctCalendar
  else
    move  'CR.COMPANY = ''' to $SlctCalendar
    concat $SlctCompany    with $SlctCalendar
    concat ''' AND CR.PAYGROUP = '''    with $SlctCalendar
    concat $SlctPayGroup   with $SlctCalendar
    concat ''' AND CR.PAY_END_DT = '''  with $SlctCalendar
    concat $SlctPayEndDt   with $SlctCalendar
    concat '''' with $SlctCalendar
  end-if

move ' ' to $SlctCalendar1
  if $SlctRunID <> '*'
    move  'CR1.RUN_ID = ''' to $SlctCalendar1
    concat $SlctRunID     with $SlctCalendar1
    concat ''''           with $SlctCalendar1
  else
    move  'CR1.COMPANY = ''' to $SlctCalendar1
    concat $SlctCompany    with $SlctCalendar1
    concat ''' AND CR1.PAYGROUP = '''    with $SlctCalendar1
    concat $SlctPayGroup   with $SlctCalendar1
    concat ''' AND CR1.PAY_END_DT = '''  with $SlctCalendar1
    concat $SlctPayEndDt   with $SlctCalendar1
    concat '''' with $SlctCalendar1
  end-if
move 'N' to $Check_found

move $company to $company_save
move $paygroup  to $paygroup_save

begin-select
! /*+ RULE */
B.COMPANY
B.PAYGROUP
  if &b.company <> &a.company
     move &b.company to $company
  end-if
  if &b.paygroup <> &a.paygroup
     move &b.paygroup to $paygroup
  end-if
B.DEPTID
B.CHECK_DT
B.PAYCHECK_OPTION
B.PAYCHECK_STATUS
B.FORM_ID
B.PAYCHECK_NBR
B.TOTAL_GROSS
B.NET_PAY
B.TOTAL_TAXES
B.TOTAL_DEDUCTIONS
B.OFF_CYCLE
B.PAGE_NUM
B.LINE_NUM
B.SEPCHK
B.PAY_SHEET_SRC

  move 'Y' to $check_found
  !SXK 06/14/1999 Begin
  do Initialize-ETD-Array
  do Get-Pay-Earnings
  do print-each-check
  !SXK 06/14/1999 End
from ps_pay_check b
where b.company in (select cr1.company
                    from ps_pay_calendar cr1
		    where [$SlctCalendar1])
and ((&a.company = (select k2.company from ps_job k2
                where k2.emplid = &j.emplid
                and k2.empl_rcd = &j.empl_rcd
                and k2.effdt = (Select max(effdt) from ps_job
                        where emplid = k2.emplid
                        and empl_rcd = k2.empl_rcd
                        and effdt <= &a.pay_end_Dt)
                and k2.effseq = (Select max(effseq) from ps_job
                        where emplid = k2.emplid
                        and empl_rcd = k2.empl_Rcd
                        and effdt = k2.effdt))
        and (not exists (select 'X1'
                          from ps_job k3
			where k3.emplid = &j.emplid
			and k3.empl_Rcd = &j.empl_rcd
                         and k3.company = b.company)))   
     or b.company = &a.company)  !SXK 07/13/1999 
and b.paygroup in (select cr.paygroup
	from ps_pay_calendar cr
	where [$SlctCalendar])
and ((&a.paygroup = (select k1.paygroup from ps_job k1
		where k1.emplid = &j.emplid
		and k1.empl_rcd = &j.empl_rcd
		and k1.company = &a.company
		and k1.effdt = (Select max(effdt) from ps_job
			where emplid = k1.emplid
			and empl_rcd = k1.empl_rcd
			and effdt <= &a.pay_end_Dt)
		and k1.effseq = (Select max(effseq) from ps_job
			where emplid = k1.emplid
			and empl_rcd = k1.empl_Rcd
			and effdt = k1.effdt))
        and (not exists(select 'Y1'
                          from ps_job k4
			where k4.emplid = &j.emplid
			and k4.empl_Rcd = &j.empl_rcd
                        and k4.paygroup = b.paygroup)))
or b.paygroup = &a.paygroup) !SXK 07/13/1999
and b.pay_end_dt = &a.pay_end_dt
and b.emplid = &j.emplid
and b.empl_rcd = &j.empl_rcd
order by b.deptid,b.page_num, b.line_num, b.sepchk
end-select

end-procedure

begin-procedure print-each-check
!display 'print-each-check'
!display $check_found 
  move &j.Deptid      to $Deptid
  if $check_found = 'Y'
    let $Name = RTRIM(&P2.Name, ' ')
    print $Name                   (2,1,23)

    if #Current-Line = 10
        move 'N' to $Overflow_SW
    else
        move 'Y' to $Overflow_SW
    end-if

    print &B.Form_ID              (2,25)
    print &J.EmplID               (3,1)
    print &J.Acct_Cd              (4,1)

    if RTRIM(&B.Check_Dt, ' ') <> ''
      do Format-DateTime(&B.Check_Dt, $out, {DEFDATE}, '', '')
      print $out  (3,14)
    end-if

    evaluate &B.PayCheck_Option
      when = 'R'
      when = 'M'
      when = 'A'
        print &B.PayCheck_Option  (3,+2)
    end-evaluate

    if &B.PayCheck_Option = '&' or &B.PayCheck_Option = 'A'
      do Get-Pay-Distribution
    end-if

    if &B.paycheck_nbr <> 0
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting Begin
      !do Format-Number(&B.paycheck_nbr, $out, '0999999')
       do Format-Number(&B.paycheck_nbr, $out, '9999999999')
       !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting End
      print $out         (3,28)
    end-if

    if &B.Pay_Sheet_Src = 'O'
       print &B.Pay_Sheet_Src   (3,36)
    end-if

    if &B.PayCheck_Option = '&'                      ! Advice and Check
      print 'A'          (4,26)
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting Begin
      !do Format-Number(#Advice#, $out, '0999999')
      do Format-Number(#Advice#, $out, '9999999999')
      !GEX-TLL 03/05/08 HCM 9.0 Upgarde Retrofitting End
      print $out         (4,28)
    end-if

    do Format-Number(&B.Total_Gross, $out, '99,999,999.99mi')
    print $out         (2,107)
    do Format-Number(&B.Net_Pay, $out, '99,999,999.99mi')
    print $out         (2,162)

    evaluate &B.PayCheck_Option
      when = 'C'
      when = 'M'

        if &B.PayCheck_Status = 'F'
                or &B.PayCheck_Status = 'A'
                or &B.PayCheck_Status = 'R'
            move &B.Net_Pay to #Check_Amount
            print 'C'            (+0,0)
        else
            move &B.Net_Pay to #UnConfirm_Total
            print 'U'            (+0,0)
        end-if

      when = 'A'
        print 'A'            (+0,0)
      when = '&'
        move 3 to #line_num

        if #Check_Amount <> 0
          do Format-Number(#Check_Amount, $out, '99,999,999.99mi')
          print $out  (#line_num,162)
          print 'C'            (+0,0)
          add 1 to #line_num
        end-if

        if #Deposit_Total <> 0
          do Format-Number(#Deposit_Total, $out, '99,999,999.99mi')
          print $out (#line_num,162)
          print 'A'            (+0,0)
          add 1 to #line_num
        end-if

      when = 'R'
        if &B.PayCheck_Status = 'F'
                or &B.PayCheck_Status = 'A'
            do Process-Reversal
        else
            move &B.Net_Pay to #UnConfirm_Total
        end-if
    end-evaluate

    ARRAY-ADD &B.Total_Gross      -
              &B.Total_Taxes      -
              &B.Total_Deductions -
              &B.Net_Pay          -
              #Check_Amount       -
              #Deposit_Total      -
              #UnConfirm_Total    -
      to Totals(6) total(6)       -
                   TOTAL(7)       -
                   TOTAL(8)       -
                   TOTAL(9)       -
                   TOTAL(10)      -
                   TOTAL(11)      -
                   TOTAL(12)

 !   if &P.Country = 'USA'
     if $check_found = 'Y'
      do Get-USA-Taxes
     end-if
 !   else
 !     if &P.Country = 'CAN'
 !       do Get-CAN-Taxes
 !     end-if
 !   end-if
    if $check_found = 'Y'
       do Get-Deductions
    end-if
    do Print-Detail
  end-if

  move 0 to #Advice#
  move 0 to #UnConfirm_Total
  move 0 to #Deposit_Total
  move 0 to #Check_Amount
  move 0 to #Cash_Total
  NEXT-LISTING NEED=4

end-procedure

begin-procedure Initialize-ETD-Array

  move 0 to #i

  while #i <= #ETDmax
    put                   ' '       -
                          0         -
                          0         -
                          0         -
                          ' '       -
                          0         -
                          ' '       -
        into ETDarray(#i) EarnType  -
                          EarnHours -
                          EarnGross -
                          TaxAmt    -
                          TaxType   -
                          DedAmt    -
                          DedCode
    add 1 to #i
  end-while

  move -1 to #ETDmax

end-procedure


begin-procedure Get-Pay-Earnings
#debug8 show 'Get-Pay-Earnings'
  position (1)
  move -1 to #i
  move 'N' to $Pay_Status_OK

begin-SELECT
! /*+ RULE */
C.REG_HRS+C.REG_EARN_HRS     &Hours    (+1,38) EDIT       B999.99MI
C.REG_EARNS+C.REG_HRLY_EARNS &Earnings (0,46)  EDIT B9,999,999.99MI
C.OT_HRS                               (0,61)  EDIT       B999.99MI
C.OT_HRLY_EARNS                        (0,69)  EDIT    B99,999.99MI
C.ADDL_NBR

  ARRAY-ADD &Hours           -
            &Earnings        -
            &C.OT_Hrs        -
            &C.OT_Hrly_Earns -
    to Totals(6) total(0)    -
                 TOTAL(1)    -
                 TOTAL(2)    -
                 TOTAL(3)

  do Get-Other-Hours-Earnings
  move 'Y' to $Pay_Status_OK

FROM  PS_PAY_EARNINGS C
WHERE COMPANY         = $Company
  AND PAYGROUP        = $PayGroup
  AND PAY_END_DT      = $PayEndDate
  AND OFF_CYCLE       = &B.Off_Cycle
  AND PAGE_NUM           = &B.Page_num
  AND LINE_NUM           = &B.Line_num
  AND SEPCHK          = &B.SepChk
  AND OK_TO_PAY       = 'Y'
  AND PAY_LINE_STATUS IN ('C','F')
  AND C.SINGLE_CHECK_USE IN ('C', 'N')
ORDER BY C.ADDL_NBR
end-SELECT

end-procedure


begin-procedure Get-Other-Hours-Earnings
#debug8 show 'Get-Other-Hours-Earnings'
begin-SELECT
! /*+ RULE */
ERNCD,
OTH_HRS,
OTH_EARNS

  add 1 to #i
  PUT                 &ErnCd     -
                      &Oth_Hrs   -
                      &Oth_Earns -
    INTO ETDARRAY(#I)  EARNTYPE  -
                       EARNHOURS -
                       EARNGROSS

  ARRAY-ADD     &Oth_Hrs   -
                &Oth_Earns -
    to Totals(6) total(4)  -
                 TOTAL(5)

FROM  PS_PAY_OTH_EARNS
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDate
  AND OFF_CYCLE  = &B.Off_Cycle
  AND PAGE_NUM      = &B.Page_num
  AND LINE_NUM      = &B.Line_num
  AND SEPCHK     = &B.SepChk
  AND ADDL_NBR      = &C.Addl_nbr
ORDER BY ERNCD
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

end-procedure


begin-procedure Process-Reversal

  do Get-Original-Check

  evaluate $PayCheck_Option
    when = 'C'
    when = 'M'
      print 'C'            (+0,0)
    when = 'A'
      print 'A'            (+0,0)
    when = '&'
      move 3 to #line_num

      if #CheckReversalAmount <> 0
        do Format-Number(#CheckReversalAmount, $out, '99,999,999.99mi')
        print $out  (#line_num,162)
        print 'C'            (+0,0)
        add 1 to #line_num
      end-if

      if #DepositReversalAmount <> 0
        do Format-Number(#DepositReversalAmount, $out, '99,999,999.99mi')
        print $out (#line_num,162)
        print 'A'            (+0,0)
        add 1 to #line_num
      end-if

  end-evaluate

  if #Advice# <> 0
    print 'A'          (4,25)
    !GEX-TLL 03/05/08 HCM9.0 Upgarde Retrofitting Begin
    !do Format-Number(#Advice#, $out, '0999999')
    do Format-Number(#Advice#, $out, '9999999999')
    !GEX-TLL 03/05/08 HCM9.0 Upgarde Retrofitting End
    print $out     (4,27)
  end-if

end-procedure


begin-procedure Get-Original-Check

  move 0 to #DepositReversalAmount
  move 0 to #CheckReversalAmount
#debug8 show 'Get-original-check'
begin-SELECT
! /*+ RULE */
P1.COMPANY
P1.PAYGROUP
P1.PAY_END_DT
P1.PAYCHECK_OPTION
P1.PAYCHECK_STATUS
P1.NET_PAY
P1.OFF_CYCLE
P1.PAGE_NUM
P1.LINE_NUM
P1.SEPCHK

  move &P1.PayCheck_Option to $PayCheck_Option
  move &P1.PayCheck_Status to $PayCheck_Status

  evaluate &P1.PayCheck_Option
    when = 'C'
    when = 'M'
      subtract &P1.Net_Pay from #CheckReversalAmount

      if $PayCheck_Status <> 'A'
        subtract &P1.Net_Pay from #Check_Amount
      end-if

    when = 'A'
      subtract &P1.Net_Pay from #DepositReversalAmount

      if $PayCheck_Status <> 'A'
        subtract &P1.Net_Pay from #Deposit_Total
      end-if

! SXC 06/05/2000 Begin   Commented the following 2 lines
!    when = '&'
!      do Get-Original-Distribution
! SXC 06/05/2000 End

  end-evaluate

FROM  PS_PAY_CHECK P1
WHERE P1.PAYCHECK_NBR          = &B.paycheck_nbr
  AND P1.FORM_ID         = &B.Form_ID
  AND P1.CHECK_DT        = &B.Check_Dt
  AND P1.PAYCHECK_OPTION <> 'R'
end-SELECT

end-procedure


begin-procedure Get-Original-Distribution
#debug8 show 'Get-Original-Distribution'
  move 0 to #Advice#

begin-SELECT
! /*+ RULE */
PAYCHECK_NBR
ACCOUNT_TYPE
DEPOSIT_AMOUNT

  if &Account_Type = '$'
    subtract &Deposit_Amount from #CheckReversalAmount

    if $PayCheck_Status <> 'A'
        subtract &Deposit_Amount from #Check_Amount
    end-if

  else
    subtract &Deposit_Amount from #DepositReversalAmount

    if $PayCheck_Status <> 'A'
        subtract &Deposit_Amount from #Deposit_Total
    end-if
  end-if

  move &paycheck_nbr to #Advice#

FROM  PS_PAY_DISTRIBUTN
WHERE COMPANY    = &P1.Company
  AND PAYGROUP   = &P1.PayGroup
  AND PAY_END_DT = &P1.Pay_End_Dt
  AND OFF_CYCLE  = &P1.Off_Cycle
  AND PAGE_NUM      = &P1.Page_num
  AND LINE_NUM      = &P1.Line_num
  AND SEPCHK     = &P1.SepChk
end-SELECT

end-procedure


begin-procedure Get-USA-Taxes
#debug8 show 'Get-USA-Taxes'
  move -1 to #i

begin-SELECT
! /*+ RULE */
L.STATE,
L.LOCALITY,
L.TAX_CLASS,
L.TAX_CUR

  add 1 to #i


  if RTRIM(&L.State, ' ') = '$U'  !if U.S. federal

    evaluate &L.Tax_Class
      when = 'H'  !FWT
        move 'FWT' to $TaxType
      when = 'C'  !Earned Income Credit
        move 'EIC' to $TaxType
      when = 'D'  !FICA
        move 'OASDI' to $TaxType
      when = 'G'     !OASDI Tips              SCM  04/05/2002
        move 'OASDT' to $TaxType              !SCM  04/05/2002
      when = 'F'  !FICA Medicare
        move 'MEDI' to $TaxType
      when = 'T'     !Medicare Tips           SCM  04/05/2002
        move 'MEDIT' to $TaxType              !SCM  04/05/2002
    end-evaluate

  else

    if RTRIM(&L.Locality, ' ') = '' !if a State
     LET $TaxType = RTRIM(&L.State, ' ')
      evaluate &L.Tax_Class
        when = 'H'  !SWT
          concat 'SWT' with $TaxType
        when = 'D'  !Employee SDI
          concat 'SDI' with $TaxType
        when = 'M'  !New Jersey WFDP
          concat 'WFDP' with $TaxType
        when = 'N'  !New Jersey HCSF
          concat 'HCSF' with $TaxType
        when = 'V'  !Employee UI
          concat 'UI' with $TaxType
      end-evaluate

    else
      move &L.Locality to $TaxType
    end-if
  end-if

  PUT                &L.Tax_Cur -
                     $TaxType   -
    INTO ETDARRAY(#I) TAXAMT    -
                      TAXTYPE

FROM  PS_PAY_TAX L
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDate
  AND OFF_CYCLE  = &B.Off_Cycle
  AND PAGE_NUM      = &B.Page_num
  AND LINE_NUM      = &B.Line_num
  AND SEPCHK     = &B.SepChk
  AND TAX_CLASS IN ('H','C','D','F','M','N','V','P','B','G','T')   !SCM 04/05/2002 Add Tips; Class=G and T
  AND TAX_CUR   <> 0
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

end-procedure


!begin-procedure Get-CAN-Taxes

!  move -1 to #i

!begin-SELECT
!/*+ RULE */
!M.PROVINCE
!M.CIT_TAX_CUR
!M.QIT_TAX_CUR
!M.T4A_TAX_CUR
!M.RV2_TAX_CUR
!M.PAYROLL_TAX_CUR
!M.CPP_CONTRIB_CUR
!M.QPP_CONTRIB_CUR
!M.UI_EE_PREMIUM_CUR

!  if &M.CIT_Tax_Cur <> 0
!    add 1 to #i
!    PUT &M.CIT_Tax_Cur 'CIT' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.QIT_Tax_Cur <> 0
!    add 1 to #i
!    PUT &M.QIT_Tax_Cur 'QIT' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.T4A_Tax_Cur <> 0
!    add 1 to #i
!    PUT &M.T4A_Tax_Cur 'T4A' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.RV2_Tax_Cur <> 0
!    add 1 to #i
!    PUT &M.RV2_Tax_Cur 'RV2' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.Payroll_Tax_Cur <> 0
!    add 1 to #i
!    PUT &M.Payroll_Tax_Cur 'PT' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.CPP_Contrib_Cur <> 0
!    add 1 to #i
!    PUT &M.CPP_Contrib_Cur 'CPP' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.QPP_Contrib_Cur <> 0
!    add 1 to #i
!    PUT &M.QPP_Contrib_Cur 'QPP' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!  if &M.UI_EE_Premium_Cur <> 0
!    add 1 to #i
!    PUT &M.UI_EE_Premium_Cur 'EI' INTO ETDARRAY(#I) TAXAMT TAXTYPE
!  end-if

!FROM  PS_PAY_TAX_CAN M
!WHERE M.COMPANY    = $Company
!  AND M.PAYGROUP   = $PayGroup
!  AND M.PAY_END_DT = $PayEndDate
!  AND M.OFF_CYCLE  = &B.Off_Cycle
!  AND M.PAGE_NUM      = &B.Page_num
!  AND M.LINE_NUM      = &B.Line_num
!  AND M.SEPCHK     = &B.SepChk
!end-SELECT

!  if #i > #ETDmax
!    move #i to #ETDmax
!  end-if

!end-procedure


begin-procedure Get-Deductions
#debug8 show 'Get-Deductions'
  move -1 to #i

begin-SELECT DISTINCT
! /*+ RULE */
F.PLAN_TYPE
F.DEDCD
F.DED_CUR
G.SPCL_PROCESS

  if &G.SPCL_PROCESS = 'G'
    do Get-Garnishment-Detail
  else
    let #DedAmt = &F.Ded_Cur
    move &F.Plan_Type to $DedCode xx
    concat &F.DedCd with $DedCode -xxxxxx
    add 1 to #i
    PUT #DedAmt $DedCode INTO ETDARRAY(#I) DEDAMT DEDCODE
  end-if

FROM  PS_PAY_DEDUCTION F,
      PS_DEDUCTION_TBL G
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDate
  AND OFF_CYCLE  = &B.Off_Cycle
  AND PAGE_NUM      = &B.Page_num
  AND LINE_NUM      = &B.Line_num
  AND SEPCHK     = &B.SepChk
  AND DED_CLASS <= 'K'
  AND DED_CUR   <> 0
  AND G.DEDCD    = F.DEDCD
  AND G.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_DEDUCTION_TBL
        WHERE DEDCD    = F.DEDCD)
ORDER BY F.PLAN_TYPE,
         F.DEDCD
end-SELECT

  if #i > #ETDmax
    move #i to #ETDmax
  end-if

end-procedure

!**********************************************************************
begin-procedure Get-Garnishment-Detail
!**********************************************************************
#debug8 show 'Get-Garnishment-Detail'
begin-SELECT
! /*+ RULE */
GR.GARNID
GR.DEDCD
GR.DEDUCT_AMT

  if &F.DEDCD = &GR.DEDCD and
     &GR.DEDUCT_AMT <> 0
    move &GR.DEDUCT_AMT to #DedAmt

    let $DedCode = 'GR'
    let $Garn = RTRIM(&GR.GARNID, ' ')
    concat $Garn with $DedCode -xxxxxx
    add 1 to #i
    PUT #DedAmt $DedCode INTO ETDARRAY(#I) DEDAMT DEDCODE
  end-if

FROM PS_PAY_GARNISH GR
WHERE GR.COMPANY = $COMPANY
  AND GR.PAYGROUP = $PAYGROUP
  AND GR.PAY_END_DT = &A.PAY_END_DT
  AND GR.OFF_CYCLE = &B.OFF_CYCLE
  AND GR.PAGE_NUM = &B.PAGE_NUM
  AND GR.LINE_NUM = &B.LINE_NUM
!SXK 02/15/1999 Added to avoid duplicate printing
  AND GR.SEPCHK     = &B.SepChk
!SXK 02/15/99 End
ORDER BY GR.GARNID
end-SELECT
end-procedure

begin-procedure Get-Pay-Distribution
#debug8 show 'Get-Pay-Distribution'
begin-SELECT
! /*+ RULE */
PD.ACCOUNT_TYPE
PD.DEPOSIT_AMOUNT
PD.PAYCHECK_NBR

  if &PD.paycheck_nbr = &B.paycheck_nbr

    if &PD.Account_Type <> '$'
      add &PD.Deposit_Amount to #Deposit_Total
    else
      move &PD.Deposit_Amount to #Check_Amount
    end-if

  else

    if &PD.Account_Type <> '$'
      add &PD.Deposit_Amount to #Deposit_Total
    end-if

    move &PD.paycheck_nbr to #Advice#
  end-if

FROM  PS_PAY_DISTRIBUTN PD
WHERE PD.COMPANY         = $Company
  AND PD.PAYGROUP        = $PayGroup
  AND PD.PAY_END_DT      = &A.Pay_End_Dt
  AND PD.OFF_CYCLE       = &B.Off_Cycle
  AND PD.PAGE_NUM           = &B.Page_num
  AND PD.LINE_NUM           = &B.Line_num
  AND PD.SEPCHK          = &B.SepChk
end-SELECT

end-procedure


begin-procedure Print-Detail


  position (1)
  move 0 to #i

  while #i <= #ETDmax

    get                $EarnType   -
                       #EarnHours  -
                       #EarnGross  -
                       #TaxAmt     -
                       $TaxType    -
                       #DedAmt     -
                       $DedCode    -
      from ETDarray(#i) EarnType   -
                        EarnHours  -
                        EarnGross  -
                        TaxAmt     -
                        TaxType    -
                        DedAmt     -
                        DedCode

    print $EarnType  (+1,81)

    if #Current-Line = 10 and $Overflow_SW = 'Y'
      if length($name) >  16
        let $Name = substr($Name,1,16)||' (cont.)'
      else
        let $Name = $Name||' (cont.)'
      end-if
      print $Name            (0,1)
      move 'N' to $Overflow_SW
    end-if
    do Format-Number(#EarnHours, $out, 'b999.99mi')
    print $out (0,85)
    do Format-Number(#EarnGross, $out, 'b9,999,999.99mi')
    print $out (0,93)
    do Format-Number(#TaxAmt, $out, 'b9999,999.99mi')
    print $out    (0,121)
    print $TaxType   (0,134)
    do Format-Number(#DedAmt, $out, 'b999,999.99mi')
    print $out    (0,141)
    print $DedCode   (0,153)

    add 1 to #i

  end-while

end-procedure

Begin-Procedure print-empl-ytd

!SXK 04/19/1999 Begin - Added code to print earnings ytd, deductions ytd
!and taxes ytd underneath the current payroll information

do get-check-ytd
do get-earnings-ytd
do get-deductions-ytd
do get-taxes-ytd

do print-ytd-info

end-procedure

!SXK 04/19/1999 End


begin-procedure Company-Change
  #debug9 show 'Company: ' $prev_company
  move 2 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  #debug9 show 'Paygroup:' $prev_paygroup
  move 4 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Department-Change
 #debug9 show 'Deptid:' $prev_deptid
  move 5 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Acctcd-Change
  #debug9 show 'Acctcd:' $prev_acct_cd
  move 6 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Print-Totals

  move 6 to #totalRow

  while #totalRow >= #changeLevel

    if #current-line > 53  !don't split a total series across pages
      new-page
    end-if

    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+1,1)
    evaluate #totalrow
        when = 6
           print '(' ()
           print $prev_acct_cd ()
           print ')' ()
        when = 5
           print '(' ()
           print $prev_deptid ()
           print ')' ()
        when = 4
           print '(' ()
           print $prev_paygroup ()
           print ')' ()
        when = 3
           print '(' ()
           do convert-to-dtu-date($prev_pay_end_Dt,$prev_pay_end_dt_dtu)
           print $prev_pay_end_dt_dtu ()
           print ')' ()
        when = 2
           print '(' ()
           print $prev_company ()
           print ')' ()
    end-evaluate

    position (+1)
    move -1 to #posn
    move 0 to #i

    while #i <= 8
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999,999,999.99mi')
      print $out (+#posn,#startCol)
      multiply -1 times #posn
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    position (-1)

    while #i <= 12
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)

      if #total <> 0
        do Format-Number(#total, $out, '999,999,999.99mi')
        print $out (+#posn,#startCol)

        evaluate #i
          when = 10
            print 'C' ()
          when = 11
            print 'A' ()
          when = 12
            print 'U' ()
        end-evaluate

        array-add #total to Totals(#rollRow) total(#i)

        put 0 into Totals(#totalRow) total(#i)

      else

        evaluate #i
          when = 9
          when = 10
            print 0.00 (+#posn,#startCol) edit 999,999,999.99mi
        end-evaluate

      end-if

      add 1 to #i
    end-while

    if #totalRow <> 1
      position (+1)
    end-if
    if #totalrow = 6

!     do get-check-ytd-acct
     do get-earnings-bal-acct
     do get-deductions-bal-acct
     do get-tax-bal-acct

     print 'Acct CD YTD Info' (,1)
     print '(' ()
     print $prev_acct_cd ()
     print ')' ()
     position (+1)

     move #ae to #ia
     move #ad to #ja
     move #at to #jb

     do print-acct-ytd-info

     print 'YTD Total by Acct CD:' (,1) 
     print '(' ()
     print $prev_acct_cd ()
     print ')' ()

     do Format-Number(#Acct_Hrs_Ytd, $out, 'b999,999,999.99mi')
     print $out (,77)
!     show 'hrs ytd acct' #acct_hrs_ytd
     do Format-Number(#Acct_Earns_Ytd, $out, 'b99,999,999.99mi')
     print $out (,92)
!     show 'earns ytd acct' #acct_earns_ytd
     do Format-Number(#acct_Ded_Ytd, $out, 'b999,999,999.99mi')
     print $out (,137)
!     show 'ded ytd acct' #acct_ded_ytd
     do Format-Number(#Acct_Tax_Ytd, $out, 'b999,999,999.99mi')
     print $out (,118)
!     show 'tax ytd acct' #acct_tax_ytd
     do Format-Number(#Acct_Gross_Ytd, $out, '999,999,999.99mi')
     print $out (,106)
!     show 'Gross ytd acct' #acct_gross_ytd
     do Format-Number(#Acct_Net_Pay_Ytd, $out, '999,999,999.99mi')
     print $out (,161)
!     show 'Net pay ytd acct' #acct_net_pay_ytd

     add #acct_gross_ytd to #gross_ytd_dept
     add #acct_net_pay_ytd to #net_pay_ytd_dept

!     add #acct_hrs_ytd to #hrs_ytd_dept
!     add #acct_earns_ytd to #earns_ytd_dept
!     add #acct_ded_ytd to #ded_ytd_dept
!     add #acct_tax_ytd to #tax_ytd_dept

     let #acct_gross_ytd = 0
     let #acct_net_pay_ytd = 0    
     let #acct_hrs_ytd = 0
     let #acct_earns_ytd = 0
     let #acct_ded_ytd = 0
     let #acct_tax_ytd = 0

    end-if
    if #totalrow = 5

     do get-earnings-bal-dept
     do get-deductions-bal-dept
     do get-tax-bal-dept

     print 'Dept ID YTD Info' (,1)
     print '(' ()
     print $prev_deptid ()
     print ')' ()

     position (+1)
     move #de to #ia
     move #dd to #ja
     move #dt to #jb

     do print-dept-ytd-info

     print 'YTD Total by Dept ID:' (,1) 
     print '(' ()
     print $prev_deptid ()
     print ')' ()

     do Format-Number(#Hrs_Ytd_Dept, $out, 'b999,999,999.99mi')
     print $out (,77)
     do Format-Number(#Earns_Ytd_Dept, $out, 'b99,999,999.99mi')
     print $out (,92)

     do Format-Number(#Ded_Ytd_Dept, $out, 'b999,999,999.99mi')
     print $out (,137)

     do Format-Number(#Tax_Ytd_Dept, $out, 'b999,999,999.99mi')
     print $out (,118)

     do Format-Number(#Gross_Ytd_Dept, $out, '999,999,999.99mi')
     print $out (,106)

     do Format-Number(#Net_Pay_Ytd_dEpt, $out, '999,999,999.99mi')
     print $out (,161)

     add #gross_ytd_dept to #gross_ytd_paygroup
     add #net_pay_ytd_dept to #net_pay_ytd_paygroup

!     add #hrs_ytd_dept to #hrs_ytd_paygroup
!     add #earns_ytd_dept to #earns_ytd_paygroup
!     add #ded_ytd_dept to #ded_ytd_paygroup
!     add #tax_ytd_dept to #taX_ytd_paygroup
     
     let #gross_ytd_dept = 0
     let #net_pay_ytd_dept = 0    
     let #hrs_ytd_dept = 0
     let #earns_ytd_dept = 0
     let #ded_ytd_dept = 0
     let #tax_ytd_dept = 0

    end-if
    if #totalrow = 4
     move &a.paygroup to $pay_group

     do get-earnings-bal-paygroup
     do get-deductions-bal-paygroup
     do get-tax-bal-paygroup

     print 'PayGroup YTD Info' (,1)
     print '(' ()
     print $prev_paygroup ()
     print ')' ()

     position (+1)

     move #pe to #ia
     move #pd to #ja
     move #pt to #jb

     do print-Paygroup-ytd-info

     print 'YTD Total by Paygroup:' (,1) 
     print '(' ()
     print $prev_paygroup ()
     print ')' ()

     do Format-Number(#Hrs_Ytd_Paygroup, $out, 'b999,999,999.99mi')
     print $out (,77)
     do Format-Number(#Earns_Ytd_paygroup, $out, 'b99,999,999.99mi')
     print $out (,92)

     do Format-Number(#Ded_Ytd_paygroup, $out, 'b999,999,999.99mi')
     print $out (,137)

     do Format-Number(#Tax_Ytd_paygroup, $out, 'b999,999,999.99mi')
     print $out (,118)

     do Format-Number(#Gross_Ytd_Paygroup, $out, '999,999,999.99mi')
     print $out (,106)

     do Format-Number(#Net_Pay_Ytd_Paygroup, $out, '999,999,999.99mi')
     print $out (,161)

     add #gross_ytd_Paygroup to #gross_ytd_company
     add #net_pay_ytd_Paygroup to #net_pay_ytd_company
     
!     add #hrs_ytd_paygroup to #hrs_ytd_company
!     add #earns_ytd_paygroup to #earns_ytd_company
!     add #ded_ytd_paygroup to #ded_ytd_company
!     add #tax_ytd_paygroup to #taX_ytd_company

     let #gross_ytd_paygroup = 0
     let #net_pay_ytd_paygroup = 0    
     let #hrs_ytd_paygroup = 0
     let #earns_ytd_paygroup = 0
     let #ded_ytd_paygroup = 0
     let #tax_ytd_paygroup = 0

    end-if
    if #totalrow = 2

     do get-earnings-bal-company
     do get-deductions-bal-company
     do get-tax-bal-company

     print 'Company YTD Info' (,1)
     print '(' ()
     print $prev_company ()
     print ')' ()

     position (+1)
     move #ce to #ia
     move #cd to #ja
     move #ct to #jb

     do print-company-ytd-info

     print 'YTD Total by Company:' (,1) 
     print '(' ()
     print $prev_company ()
     print ')' ()

     do Format-Number(#Hrs_Ytd_company, $out, 'b999,999,999.99mi')
     print $out (,77)
     do Format-Number(#Earns_Ytd_company, $out, 'b99,999,999.99mi')
     print $out (,92)

     do Format-Number(#Ded_Ytd_company, $out, 'b999,999,999.99mi')
     print $out (,137)

     do Format-Number(#Tax_Ytd_company, $out, 'b999,999,999.99mi')
     print $out (,118)

     do Format-Number(#Gross_Ytd_Company, $out, '999,999,999.99mi')
     print $out (,106)

     do Format-Number(#Net_Pay_Ytd_Company, $out, '999,999,999.99mi')
     print $out (,161)

     let #gross_ytd_company = 0
     let #net_pay_ytd_company = 0    
     let #hrs_ytd_company = 0
     let #earns_ytd_company = 0
     let #ded_ytd_company = 0
     let #tax_ytd_company = 0
    end-if

    position (+1)
    subtract 1 from #totalRow
  end-while

!  if #changeLevel = 5  !skip page except on Department change
!    position (+1)
!    next-listing need=5
!  else

    if $End = 'Y'
      do Reset
    end-if

    new-page

!  end-if

end-procedure
!SXK 04/28/1999 Begin
!**********************************************************************
Begin-Procedure Get-Check-ytd
!**********************************************************************
#debug8 show 'Get-Check-Ytd'
let #gross_ytd = 0
let #net_pay_ytd = 0
Begin-Select
! /*+ RULE */
cy.total_gross_ytd
cy.net_pay_ytd

  let #gross_ytd = &cy.total_gross_ytd
  let #net_pay_ytd = &cy.net_pay_ytd

  add #gross_ytd to #acct_gross_ytd 
  add #net_pay_ytd to #acct_net_pay_ytd 

from   ps_check_ytd cy
where  cy.emplid = $prev_EMPLID
and    cy.company              = $prev_COMPANY
and    cy.balance_id           = 'CY'
and    cy.balance_year         = $balance_year
and    cy.balance_period       = (select max(balance_period)
				from ps_check_ytd
				where emplid = cy.emplid
				and company = cy.company
				and balance_id = 'CY'
				and balance_year = $balance_year
				and balance_period <= #balance_period)
end-select

end-procedure
!SXK 04/28/1999 End

!SXK 04/19/1999 Begin
!**********************************************************************
Begin-Procedure Get-Earnings-ytd
!**********************************************************************
#debug8 show 'Get-Earnings-Ytd'
let #i1 = 0
Begin-Select
! /*+ RULE */
b2.erncd
sum(b2.hrs_ytd) &hrs_ytd		!SRK 02/18/03 changed it to sum
sum(b2.grs_ytd) &earns_ytd		!SRK 02/18/03 changed it to sum

  move &b2.erncd to $erncd

  move &earns_ytd to #earns_ytd
  move &hrs_ytd to #hrs_ytd
!  display 'Erncd: ' noline
!  display $erncd
!  display 'YTD: ' noline
!  display #earns_ytd

!  display 'Counter: ' noline
!  display #i1

  if #earns_ytd > 0
     put $erncd #hrs_ytd #earns_ytd into earns(#i1)

     add 1 to #i1
     
!     add #hrs_ytd to #acct_hrs_ytd
!     add #earns_ytd to #acct_earns_ytd

  end-if

  !AXL- 10/28/1999 Mod Begin
  do Check-Existing-EYTD

  if $ERow_Exists='Y'
     do Update-ETemp-Table
  else
     do Insert-ETemp-Table
  end-if
  !AXL- 10/28/1999 Mod End

  let #hrs_ytd = 0
  let #earns_ytd = 0

from   ps_earnings_bal b2
where  b2.emplid = $prev_EMPLID
and    b2.company              = $prev_COMPANY
and    b2.balance_id           = 'CY'
and    b2.balance_year         = $balance_year
and    b2.balance_period       = (select max(balance_period)
				from ps_earnings_bal
				where emplid = b2.emplid
				and company = b2.company
				and empl_rcd = b2.empl_rcd
				and balance_id = 'CY'
				and balance_year = $balance_year
                                and erncd = b2.erncd
                                and spcl_balance = b2.spcl_balance
				and balance_period <= #balance_period)
and    b2.spcl_balance         = 'N'
group by b2.erncd
order by b2.erncd
end-select

!show 'counter:' #i1
end-procedure

!AXL- 10/28/1999 New Procs Begin
!**********************************************************************
Begin-Procedure Check-Existing-EYTD
!**********************************************************************
#debug8 show 'Check-Existing-YTD'
  let $ERow_Exists ='N'
Begin-Select
! /*+ RULE */
etmp.company
etmp.paygroup
etmp.deptid
etmp.acct_cd
etmp.balance_id
etmp.balance_year
etmp.erncd
etmp.spcl_balance

  let $ERow_Exists='Y'

from   ps_gex_b_run_etot etmp
where etmp.company            	= $prev_company
and   etmp.paygroup		= $prev_paygroup
and   etmp.deptid		= $prev_deptid
and   etmp.acct_cd		= $prev_acct_cd
and   etmp.balance_id           = 'CY'
and   etmp.balance_year         = $balance_year
and   etmp.erncd		= &b2.erncd
and   etmp.spcl_balance		= 'N'

end-select
end-procedure

!**********************************************************************
begin-procedure Update-Etemp-table
!**********************************************************************
begin-sql
Update ps_gex_b_run_etot
    set sum_hrs_ytd = sum_hrs_ytd + &hrs_ytd,
        sum_grs_ytd = sum_grs_ytd + &earns_ytd
where company           = $prev_company
and   paygroup		= $prev_paygroup
and   deptid		= $prev_deptid
and   acct_cd		= $prev_acct_cd
and   balance_id        = 'CY'
and   balance_year      = $balance_year
and   erncd		= &b2.erncd
and   spcl_balance	= 'N'
end-sql
end-procedure

!**********************************************************************
begin-procedure insert-Etemp-table
!**********************************************************************
  #ifdef debug7
    show '&j.emplid ' &j.emplid
    show '$prev_company '  $prev_company 
    show '$prev_paygroup ' $prev_paygroup
    show '$prev_deptid '   $prev_deptid
    show '$Prev_acct_cd '  $Prev_acct_cd
    show '$balance_year '  $balance_year
    show '&b2.erncd '      &b2.erncd
    show '&hrs_ytd '       &hrs_ytd
    show '&earns_ytd '     &earns_ytd
  #endif

begin-sql
insert into ps_gex_b_run_etot values(
$prev_company,
$prev_paygroup,
$prev_deptid,
$Prev_acct_cd,
'CY',
$balance_year,
&b2.erncd,
'N',
&hrs_ytd,
&earns_ytd)
end-sql
  
end-procedure
!AXL- 10/28/1999 New Procs End

!**********************************************************************
Begin-Procedure Get-Deductions-Ytd
!**********************************************************************
#debug8 show 'Get-Deductions-Ytd'
let #j1=0
Begin-Select
! /*+ RULE */
c2.plan_type
c2.dedcd
sum(c2.ded_ytd) &ded_ytd     !SRK 02/18/03 - changed it to sum

  move &c2.dedcd to $dedcd
  let $dedcd = &c2.plan_type||'-'||$dedcd

  move &ded_ytd to #ded_ytd

!  display 'Dedcd: ' noline
!  display $dedcd
!  display 'YTD: ' noline
!  display #ded_ytd 
!  display 'Counter: ' noline
!  display #j1
  if #ded_ytd > 0
     put $dedcd #ded_ytd into ded(#j1)

     add 1 to #j1

!     add #ded_ytd to #acct_ded_ytd

  end-if

  !AXL- 10/28/1999 Mod Begin
  do Check-Existing-DYTD
  if $DRow_Exists='Y'
     do Update-DTemp-Table
  else
     do Insert-DTemp-Table
  end-if
  !AXL- 10/28/1999 Mod End

  let #ded_ytd = 0


from   ps_deduction_bal c2
where  c2.emplid = $prev_EMPLID
and    c2.company              = $prev_COMPANY
and    c2.balance_id           = 'CY'
and    c2.ded_class <= 'K'
and    c2.balance_year         = $balance_year
and    c2.balance_period       = (select max(balance_period)
				from ps_deduction_bal
				where emplid = c2.emplid
				and company = c2.company
				and benefit_rcd_nbr = c2.benefit_rcd_nbr
				and balance_id = 'CY'
				and balance_year = $balance_year
                                and ded_class <= 'K'
                                and ded_class = c2.ded_class
                                and dedcd = c2.dedcd
				and balance_period <= #balance_period)
group by c2.plan_type, c2.dedcd		!SRK Added group by
order by c2.plan_type, c2.dedcd
end-select
!show 'counter:' #j1
end-procedure

!AXL- 10/28/1999 New Procs Begin
!**********************************************************************
Begin-Procedure Check-Existing-DYTD
!**********************************************************************
#debug8 show 'Check-Existing-DYTD'
  let $DRow_Exists ='N'
Begin-Select
! /*+ RULE */
dtmp.company
dtmp.paygroup
dtmp.deptid
dtmp.acct_cd
dtmp.dedcd

  let $DRow_Exists='Y'

from   ps_gex_b_run_dtot dtmp
where dtmp.company            	= $prev_company
and   dtmp.paygroup		= $prev_paygroup
and   dtmp.deptid		= $prev_deptid
and   dtmp.acct_cd		= $prev_acct_cd
and   dtmp.dedcd		= &c2.dedcd

end-select
end-procedure

!**********************************************************************
begin-procedure Update-Dtemp-table
!**********************************************************************
begin-sql
Update ps_gex_b_run_dtot
    set sum_ded_ytd = sum_ded_ytd + &ded_ytd
where company           = $prev_company
and   paygroup		= $prev_paygroup
and   deptid		= $prev_deptid
and   acct_cd		= $prev_acct_cd
and   dedcd		= &c2.dedcd
end-sql

end-procedure

!**********************************************************************
begin-procedure insert-Dtemp-table
!**********************************************************************
begin-sql
insert into ps_gex_b_run_dtot values(
$prev_company,
$prev_paygroup,
$prev_deptid,
$Prev_acct_cd,
&c2.dedcd,
&ded_ytd)
end-sql
  
end-procedure
!AXL- 10/28/1999 New Procs End

!**********************************************************************
Begin-Procedure Get-Taxes-Ytd
!**********************************************************************
#debug8 show 'Get-Taxes-Ytd'
let #j2 = 0
Begin-Select
! /*+ RULE */
d2.state
d2.locality
d2.tax_class
d2.tax_ytd &tax_ytd
d2.NLGRS_YTD &NLGRS_YTD  	!AXL add 10/28
d2.TXGRS_YTD &TXGRS_YTD		!AXL add 10/28

   move &tax_ytd to #tax_ytd
   
 if #tax_ytd > 0

  if RTRIM(&d2.State, ' ') = '$U'  !if U.S. federal

    evaluate &d2.Tax_Class
      when = 'H'  !FWT
        move 'FWT' to $TaxType1
      when = 'C'  !Earned Income Credit
        move 'EIC' to $TaxType1
      when = 'D'  !FICA
        move 'OASDI' to $TaxType1
      when = 'G'     !OASDI Tips               SCM  04/05/2002
        move 'OASDT' to $TaxType1              !SCM  04/05/2002         
      when = 'F'  !FICA Medicare
        move 'MEDI' to $TaxType1
      when = 'T'     !Medicare Tips            SCM  04/05/2002
        move 'MEDIT' to $TaxType1              !SCM  04/05/2002
    end-evaluate

  else

    if RTRIM(&d2.Locality, ' ') = '' !if a State
     LET $TaxType1 = RTRIM(&d2.State, ' ')
      evaluate &d2.Tax_Class
        when = 'H'  !SWT
          concat 'SWT' with $TaxType1
        when = 'D'  !Employee SDI
          concat 'SDI' with $TaxType1
        when = 'M'  !New Jersey WFDP
          concat 'WFDP' with $TaxType1
        when = 'N'  !New Jersey HCSF
          concat 'HCSF' with $TaxType1
        when = 'V'  !Employee UI
          concat 'UI' with $TaxType1
      end-evaluate

    else
      move &d2.Locality to $TaxType1
    end-if
  end-if

  put $taxtype1 #tax_ytd into tax(#j2)
  add 1 to #j2
  
!  add #tax_ytd to #acct_taX_ytd
 end-if
 
  !AXL- 10/28/1999 Mod Begin
  do Check-Existing-TYTD
  if $TRow_Exists='Y'
     do Update-TTemp-Table
  else
     do Insert-TTemp-Table
  end-if
  !AXL- 10/28/1999 Mod End

 move 0 to #tax_ytd

from   ps_tax_balance d2
where  d2.emplid = $prev_EMPLID
and    d2.company              = $prev_COMPANY
and    d2.balance_id           = 'CY'
and    d2.balance_year         = $balance_year
and    d2.balance_period       = (select max(balance_period)
				from ps_tax_balance
				where emplid = D2.emplid
				and company = D2.company
				and balance_id = 'CY'
				and balance_year = $balance_year
 				and tax_class = d2.tax_class
				and state = d2.state
				and locality = d2.locality
				and balance_period <= #balance_period)
AND TAX_CLASS IN ('H','C','D','F','M','N','V','P','B','G','T')  !SCM  04/05/2002-add 'G' 'T' for tips
order by d2.state, d2.locality, d2.tax_class
end-select
!show 'counter:' #j2
end-procedure

!AXL- 10/28/1999 New Procs Begin
!**********************************************************************
Begin-Procedure Check-Existing-TYTD
!**********************************************************************
#debug8 show 'Check-Existing-TYTD'
  let $TRow_Exists ='N'
Begin-Select
! /*+ RULE */
ttmp.company
ttmp.paygroup
ttmp.deptid
ttmp.acct_cd
ttmp.state
ttmp.locality
ttmp.tax_class

  let $TRow_Exists='Y'

from   ps_gex_b_run_ttot ttmp
where ttmp.company            	= $prev_company
and   ttmp.paygroup		= $prev_paygroup
and   ttmp.deptid		= $prev_deptid
and   ttmp.acct_cd		= $prev_acct_cd
and   ttmp.state		= &d2.state
and   ttmp.locality             = &d2.locality
and   ttmp.tax_class            = &d2.tax_class

end-select
end-procedure

!**********************************************************************
begin-procedure Update-Ttemp-table
!**********************************************************************
begin-sql
Update ps_gex_b_run_ttot
    set sum_nlgrs_ytd = sum_nlgrs_ytd + &nlgrs_ytd,
	sum_txgrs_ytd = sum_txgrs_ytd + &txgrs_ytd,
	sum_tax_ytd   = sum_tax_ytd   + &tax_ytd
where company           = $prev_company
and   paygroup		= $prev_paygroup
and   deptid		= $prev_deptid
and   acct_cd		= $prev_acct_cd
and   state		= &d2.state
and   locality          = &d2.locality
and   tax_class         = &d2.tax_class
end-sql

end-procedure

!**********************************************************************
begin-procedure insert-Ttemp-table
!**********************************************************************
begin-sql
insert into ps_gex_b_run_ttot values(
$prev_company,
$prev_paygroup,
$prev_deptid,
$Prev_acct_cd,
&d2.state,
&d2.locality,
&d2.tax_class,
&nlgrs_ytd,
&txgrs_ytd,
&tax_ytd)
end-sql
  
end-procedure
!AXL- 10/28/1999 New Procs End

!**********************************************************************
Begin-Procedure Print-YTD-Info
!**********************************************************************

 let #k = 0
 let #l = 0
 let #m = 0
 let #max_loop = 0
 let #max_1 = 0

 let $data_exists = 'N'

!Jyotsna - 02/02/2017 - To display TMs with single rows in Balance Tables - Begin
! let #i1 = #i1 - 1
! let #j1 = #j1 - 1
! let #j2 = #j2 - 1
!Jyotsna - 02/02/2017 - To display TMs with single rows in Balance Tables - End

 if #j1 > 0 or #i1 > 0 or #j2 > 0
   let $data_exists = 'Y'
 end-if

!Jyotsna - 02/02/2017 - To display TMs with single rows in Balance Tables - Begin
 let #i1 = #i1 - 1
 let #j1 = #j1 - 1
 let #j2 = #j2 - 1
!Jyotsna - 02/02/2017 - To display TMs with single rows in Balance Tables - End

 if $data_exists = 'Y'
    if #i1 <= #j1
        if #j1 <= #j2
           move #j2 to #max_1
        else
           move #j1 to #max_1
        end-if
    else
       if #i1<= #j2
          move #j2 to #max_1
       else
          move #i1 to #max_1
       end-if
    end-if
 end-if   

!show 'data exists:' $data_exists
!show 'max:' #max_1

 if $data_exists = 'Y'
  print 'YTD Information:' (+1,1)
!  show 'YTD information'
  position (+1)
  do Format-Number(#Gross_Ytd, $out, '99,999,999.99mi')
  print $out (,107)
  do Format-Number(#Net_Pay_Ytd, $out, '99,999,999.99mi')
  print $out (,162)
  while #max_loop <= #max_1

       if #k <= #i1
        get $erncd_o #hrs_ytd_o #earns_ytd_o from earns(#k)
        print $erncd_o (,81)
        do Format-Number(#Hrs_Ytd_O, $out, 'b999.99mi')
        print $out (,85)
        do Format-Number(#Earns_Ytd_O, $out, 'b9,999,999.99mi')
        print $out (,93)
        add 1 to #k
       end-if

       if #l <= #j1
          get $dedcd_o #ded_ytd_o from ded(#l)
          do Format-Number(#Ded_Ytd_O, $out, 'b999,999.99mi')
          print $out (,141)
          print $dedcd_o (,153)
          add 1 to #l
       end-if

       if #m <= #j2
          get $tax_o #tax_ytd_o from tax(#m)
          print $tax_o (,134)
          do Format-Number(#Tax_Ytd_O, $out, 'b9999,999.99mi')
          print $out (,121)
          add 1 to #m
       end-if

       position (+1)
       add 1 to #max_loop
  end-while

 end-if
 clear-array name=earns
 clear-array name=ded
 clear-array name=tax
 NEXT-LISTING NEED=4
end-procedure

!SXK 04/14/1999 End
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'gexpyytd.sqc'  !gets ytd totals
#include 'gexaltse.sqc'
