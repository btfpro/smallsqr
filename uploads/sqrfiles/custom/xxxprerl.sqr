!********************************************************************!
!XXXPRERL.SQR - XXX PRE ENROLLMENT DATA EXTRACT                      !
!********************************************************************!
!         !!!!!  This version is for HR 9.0 PeopleSoft !!!!!         !
!********************************************************************!
!                                                                    !
!Description - This program is designed to export data from five     !
!              populations of data for XXX pre-benefit processing.   !
!              The five populations are benefits data, pre-dependent !
!              data, current benefit data, pre-deduction data and job!
!              data. These files are then sent to XXX for processing.!
!                                                                    !
!  ^^^^^^^^^^^NOTE^^^^^^^^^^^^^                                      !
!  If processing time is an issue due to large employee populations, !
!  Changes could be made to speed processing, including the use of   !
!  Load lookups and / or arrays.  They are not added here as this is !
!  the most straight forward approach for any viewing the code to    !
!  follow and understand.                                            !
!                                                                    !
!Database Tables:                                                    !
!                 PS_BEN_PROG_PARTIC      SELECT                     !
!                 PS_BENEF_PLAN_TBL       SELECT                     !
!                 PS_CBP_BENPLN_DATA      INSERT/UPDATE/SELECT       !
!                 PS_CBP_RUN_XXXPRE       SELECT                     !
!                 PS_DEP_BENEF_NID        SELECT                     !
!                 PS_DEPENDENT_BENEF      SELECT                     !
!                 PS_EMPLOYEES            SELECT                     !
!                 PS_EMPLOYMENT           SELECT                     !
!                 PS_FED_TAX_DATA         SELECT                     !
!                 PS_FSA_BENEFIT          SELECT                     !
!                 PS_HEALTH_BENEFIT       SELECT                     !
!                 PS_HEALTH_DEPENDNT      SELECT                     !
!                 PS_JOB                  SELECT                     !
!                 PS_JOBCODE_TBL          SELECT                     !
!                 PS_LIFE_ADD_BENEFC      SELECT                     !
!                 PS_PAY_CHECK            SELECT                     !
!                 PS_PAY_DEDUCTION        SELECT                     !
!                 PS_PAYGROUP_TBL PG      SELECT                     !
!                 PS_PERS_DATA_EFFDT      SELECT                     !
!                 PS_PERS_NID             SELECT                     !
!                 PS_PERSON               SELECT                     !
!                 PS_PERSON_PHONE         SELECT                     !
!                 PS_PERSON_ADDRESS       SELECT                     !
!                 PS_PERSON_NAME          SELECT                     !
!                 PS_SAVINGS_BENEFIC      SELECT                     !
!                 PS_SET_CNTRL_REC        SELECT                     !
!                 PS_STATE_TAX_DATA       SELECT                     !
!                                                                    !
!                                                                    !
!Runtime Prompts: Output File location                               !
!                                                                    !
!Output:  5 files, one per file required                             !
!                                                                    !
!********************************************************************!
!Author    Whitney, Greg   Crestone International, Inc.              !
!Created   10/24/03                                                  !
!********************************************************************!
!
! Date       programmer                    Modification
! ----       ----------     --------------------------------------------
! 10/24/03   Crestone glw   Original development
!
! 01/01/04   Crestone glw   Coded insert to ps_ben_plan_data to mimic 
!                           BEN100 code so ben100 does not need to be run
!
! 08/17/04   Crestone glw   Various changes including adding of bendeps.sqc 
!                           to insert dep records into ben plan data.
!
! 10/07/05   Crestone glw   Minor changes to code.
!
! 08/05/10   Crestone sks   Updated for HR 9.0 application.
!                           PS_BEN_PLAN_DATA does not exist in 9.0 so 
!                           creating a new custom table called
!                           PS_CBP_BENPLN_DATA to replace it.
!                           The bendeps.sqc is obsolete.  Moved code from
!                           the sqc to the end of this sqr.
! 08/16/10   Crestone sks   Modify for Giant Eagle to only create the 
!                           job_file and the pre_dep_file.
!***********************************************************************

!-----------------------------------------------------------------------
!   Set Environment                                                    -
!-----------------------------------------------------------------------
#include 'setenv.sqc'    !Set environment
#include 'setup01.sqc'   !Printer and page-size initialization

! Default values for sqr, #define values, see input section

!-----------------------------------------------------------------------
!  Report Calls                                                        -
!-----------------------------------------------------------------------
begin-report

        do init-number
        do init-datetime
        do get-current-datetime
        do Init-Report
        show ' '
        display 'Start Run Time: ' noline
        do display-time
        
     !START - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
      ! do Delete-Old-Data
      ! do Clear-Local-Ben-Data
        
      ! display 'Inserting Employee Benefit Records     ' noline
      ! do display-time
      ! do Get-Benefits-Table-Data
        
      ! display 'Inserting Dependent Records            ' noline
      ! do display-time
      ! do Insert-Dependent-Records        !This is located in bendeps.sqc 
                                           !9.0 made bendeps.sqc obsolete.  code is here in sqr.
     !END   - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE

     !START - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
       !let #file_num = 1
       !do open-file($pre_ded_file, #file_num)
       !do pre-ded-file
       !do close-file(1)
        
       !let #file_num = 2
       !do open-file($ben_plan_file, #file_num)
       !do ben-plan-file
       !do close-file(2)
     !END   - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
        
        let #file_num = 3
        do open-file($job_file, #file_num)
        do job-file  
        do close-file(3)

     !START - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
       !let #file_num = 4
       !do open-file($cur_benprog_file, #file_num)
       !do cur_benprog_file
       !do close-file(4)
     !END   - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE

        let #file_num = 5
        do open-file($pre_dep_file, #file_num)
        do pre-dep-file
        do close-file(5)
                          
        show ' '
        display 'End Run Time: ' noline
        do display-time
        do Stdapi-Term

end-report


!-----------------------------------------------------------------------
! Function:    display-time                                            -
! Description: gets current date time and displays it                  -
! Called By:   Report                                                  -
! Calls:       get-current-datetime                                    -
!-----------------------------------------------------------------------
begin-procedure display-time

        do get-current-datetime
        display $asofnow
        show ' '
        
end-procedure


!-----------------------------------------------------------------------
! Function:    Init-Report                                             -
! Description: this section initializes all the variables              -
! Called By:   Report                                                  -
! Calls:       Select-Parameters, Ask-Values                           -
!-----------------------------------------------------------------------
begin-procedure Init-Report

  move 'XXX Pre-Enrl SQR'   to $ReportID
  move 'Pre-Enrl File Creation ' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Select-Parameters
  end-if

   Let $Quote = '"'
   Let $Comma = ','
   LET $52    = '52'

end-procedure Init-Report


!-----------------------------------------------------------------------
! Function:    ASK-VALUES                                              -
! Description: Obtain input values upon execution using SQRW.          -
! Called By:   Init-Report                                             -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure ask-values
#debugd show 'Ask-Values'

!  input $Run_Mode          maxlen=1  'Enter Run Mode, R for Rollback or C for Commit' type=char
!  input $FromDate          maxlen=11 'Enter From Date, MM-DD-YYYY' type=date
  
!START - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
!  input $pre_ded_file      maxlen=50 'Enter the pre_ded_file file output location like c:\temp\pre_ded_file.csv' type=char        !026
!  input $ben_plan_file     maxlen=50 'Enter the ben_plan_file file output location like c:\temp\ben_plan_file.csv' type=char        !026
!END   - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
  input $job_file          maxlen=500 'Enter the job_file file output location like c:\temp\job_file.csv' type=char
!START - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
!  input $cur_benprog_file  maxlen=50 'Enter the cur_benprog_file file output location like c:\temp\cur_benprog_file.csv' type=char
!END   - UNV - 08/16/2010 - Only create the JOB_FILE and the PRE_DEP_FILE
  input $pre_dep_file      maxlen=500 'Enter the pre_dep_file file output location like c:\temp\pre_dep_file.csv' type=char

!  if nvl(rtrim($FromDate, ' '), '') <> ''
!    let $FromDate = strtodate($FromDate,'MM-DD-YYYY')
!    let $FromDate = strtodate($FromDate,'DD-MON-YYYY')
!    show 'FromDate: ' $FromDate
!  end-if

! Default values for benefit files output
!        let $pre_ded_file     = 'c:\temp\pre_ded_file.csv'       !dedendent Data File
!        let $ben_plan_file    = 'c:\temp\ben_plan_file.csv'      !Benefit Plan File
!        let $job_file         = 'c:\temp\job_file.csv'           !Job Data File
!        let $cur_benprog_file = 'c:\temp\cur_benprog_file.csv'   !Current Benefit Program
!        let $pre_dep_file     = 'c:\temp\pre_dep_file.csv'       !Pre Dependent file

  show ' '
  show '*** File Locations ***'
! show $pre_ded_file  
! show $ben_plan_file 
  show $job_file   
! show $cur_benprog_file
  show $pre_dep_file   
  show ' '
  
end-procedure


!-----------------------------------------------------------------------
! Function:    Select-Parameters                                       -
! Description: Select Values from Run Control                          -
! Called By:   Init-Report                                             -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Select-Parameters
#debugd show 'Select-Parameters'

 show '$prcs_run_cntl_id = ' $prcs_run_cntl_id
 show '$prcs_oprid       = ' $prcs_oprid

BEGIN-SELECT
RC.FILE_PATH

 ! let $pre_ded_file     = &RC.FILE_PATH || 'pre_ded_file.csv'       !dedendent Data File
 ! let $ben_plan_file    = &RC.FILE_PATH || 'ben_plan_file.csv'      !Benefit Plan File
   let $job_file         = &RC.FILE_PATH || 'job_file.csv'           !Job Data File
 ! let $cur_benprog_file = &RC.FILE_PATH || 'cur_benprog_file.csv'   !Current Benefit Program
   let $pre_dep_file     = &RC.FILE_PATH || 'pre_dep_file.csv'       !Pre Dependent file

FROM PS_CBP_RUN_XXXPRE RC
WHERE RC.oprid       = $prcs_oprid
  AND RC.run_cntl_id = $prcs_run_cntl_id
END-SELECT
  
  show ' '
  show '*** File Locations ***'
 !show 'Pre Deduction File:       ' $pre_ded_file  
 !show 'Benefits Data File:       ' $ben_plan_file 
  show 'Job Data File:            ' $job_file   
 !show 'Current Benefit Programs: ' $cur_benprog_file
  show 'Pre Dependent File:       ' $pre_dep_file   
  show ' '

end-procedure !Select-Parameters


!-----------------------------------------------------------------------
! Function:    Delete-Old-Data                                         -
! Description: Delete from ps_ben_plan_data to clean it out.           -
! Description: 9.0 Delete from ps_cbp_benpln_data to clean it out.     -
! Called By:   Report                                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Delete-Old-Data

let $sql-statement = 'Delete-Old-Data,DELETE,PS_CBP_BENPLN_DATA'
BEGIN-SQL ON-ERROR=SQL-ERROR
DELETE FROM PS_CBP_BENPLN_DATA;
END-SQL

end-procedure


!-----------------------------------------------------------------------
! Function:    Open-File                                               -
! Description: Opens Files for Writing                                 -
! Called By:   Report                                                  -
! Calls:       None                                                    -
! Parameters:  $file_name and #file_num                                - 
!-----------------------------------------------------------------------
begin-procedure open-file($file_name, #file_num)

Let #numTest = delete($File_Name)

open $file_name as #file_num 
     for-writing 
     record=1500:fixed
!     record=1100:fixed
     status=#filestatus

     if #filestatus = -1
       show ' '
       show ' '
       show ' ***** WARNING ***** Open for ' $file_name ' in program ' $report_name ' failed.'
       show ' '
       show ' '
       stop quiet
     else
       let $error_flag = 'N'
       show ' '
       show 'File Opened for Writing: ' $file_name
     end-if

end-procedure open-file


!-----------------------------------------------------------------------
! Function:    Close-File                                              -
! Description: Closes Files                                            -
! Called By:   Report                                                  -
! Calls:       None                                                    -
! Parameters:  #file_num                                               - 
!-----------------------------------------------------------------------
begin-procedure close-file(#file_num)

close #file_num

!if $error_flag = 'Y'
!  stop quiet
!end-if
 
end-procedure close-file


!-----------------------------------------------------------------------
! Function:    Get-Benefits-Table-Data                                 -
! Description: insert current employee data from various employee      -
!              records.                                                -
! Called By:   Report                                                  -
! Calls:       Insert-Health-Records, Insert-Benefit-Records,          -
!              Insert-FSA-Records, Insert-Vacation-Buy-Sell-Records    -
!-----------------------------------------------------------------------
begin-procedure Get-Benefits-Table-Data
#debugd show 'Get-Benefits-Table-Data'

BEGIN-SELECT
A1.EMPLID
A1.EMPL_RCD
A1.EFFDT
A1.EFFSEQ
A1.COMPANY
A1.PAYGROUP
B1.COBRA_EVENT_ID
B1.BENEFIT_PROGRAM

  #debugd show '..Processing Emplid ' &A1.EMPLID

  MOVE &A1.EMPLID          TO $CURRENT_EMPLID
  MOVE &A1.EMPL_RCD        TO #CURRENT_EMPL_RCD
  MOVE &A1.EFFDT           TO $CURRENT_EFFDT
  MOVE &A1.EFFSEQ          TO #CURRENT_EFFSEQ
  MOVE &A1.COMPANY         TO $CURRENT_COMPANY
  MOVE &A1.PAYGROUP        TO $CURRENT_PAYGROUP
  MOVE &B1.BENEFIT_PROGRAM TO $CURRENT_BENEFIT_PROGRAM
  MOVE &B1.COBRA_EVENT_ID  TO #COBRA_EVENT_ID

  DO INSERT-HEALTH-RECORDS

  MOVE 'PS_LIFE_ADD_BEN D' TO $TBLNAME
  MOVE 'PS_LIFE_ADD_BEN D2' TO $TBLNAME2
  DO INSERT-BENEFIT-RECORDS
  
  MOVE 'PS_DISABILITY_BEN D' TO $TBLNAME
  MOVE 'PS_DISABILITY_BEN D2' TO $TBLNAME2
  DO INSERT-BENEFIT-RECORDS

  DO INSERT-FSA-RECORDS
  
  DO INSERT-VACATION-BUY-SELL-RECORDS

  MOVE ' ' TO $CURRENT_EMPLID
  LET #CURRENT_EMPL_RCD = 0
  MOVE ' ' TO $CURRENT_EFFDT
  MOVE ' ' TO $CURRENT_EFFSEQ
  MOVE ' ' TO $CURRENT_COMPANY
  MOVE ' ' TO $CURRENT_PAYGROUP
  MOVE ' ' TO $CURRENT_BENEFIT_PROGRAM

FROM PS_JOB A1,
     PS_BEN_PROG_PARTIC B1,
     PS_EMPLOYMENT EM
   
WHERE A1.EMPL_STATUS   NOT IN ('D', 'T')
  AND A1.EMPLID         = B1.EMPLID
  AND A1.EMPLID         = EM.EMPLID
! AND EM.BENEFIT_RCD_NBR = B1.EMPL_RCD
  AND EM.EMPL_RCD       = (SELECT PJ.EMPL_RCD                                    ! NEW FORM TO DETERMINE "PRIMARY" JOB WITHIN
                           FROM PS_PRIMARY_JOBS PJ                               ! THIS BENEFIT RCD GROUP
                           WHERE PJ.EMPLID          = A1.EMPLID 
                             AND PJ.EMPL_RCD        = A1.EMPL_RCD 
                             AND PJ.PRIMARY_JOB_APP = 'BN' 
                             AND PJ.EFFDT           = (SELECT MAX(PJ1.EFFDT) FROM PS_PRIMARY_JOBS PJ1
                                                       WHERE PJ1.EMPLID   = PJ.EMPLID
                                                         AND PJ1.EMPL_RCD = PJ.EMPL_RCD
                                                         AND PJ1.EFFDT   <= $ASOFTODAY)
                             AND PJ.PRIMARY_JOB_IND = 'Y' 
                             AND PJ.EMPLID          = (SELECT EM1.EMPLID FROM PS_EMPLOYMENT EM1
                                                       WHERE EM1.EMPLID          = PJ.EMPLID 
                                                         AND EM1.EMPL_RCD        = PJ.EMPL_RCD 
                                                         AND EM1.BENEFIT_RCD_NBR = EM.BENEFIT_RCD_NBR))  ! END OF NEW PRIM JOB    
  AND A1.EMPL_RCD       = B1.EMPL_RCD
  AND A1.EFFDT          = (SELECT MAX(J.EFFDT) FROM PS_JOB J
                           WHERE J.EMPLID    = A1.EMPLID
                             AND J.EMPL_RCD  = A1.EMPL_RCD
                             AND J.EFFDT    <= $ASOFTODAY)
  AND A1.EFFSEQ         = (SELECT MAX(I.EFFSEQ) FROM PS_JOB I
                           WHERE I.EMPLID   = A1.EMPLID
                             AND I.EMPL_RCD = A1.EMPL_RCD
                             AND I.EFFDT    = A1.EFFDT)
  AND B1.EFFDT          = (SELECT MAX(B.EFFDT) FROM PS_BEN_PROG_PARTIC B
                           WHERE B.EMPLID          = B1.EMPLID
                             AND B.EMPL_RCD        = B1.EMPL_RCD
                             AND B.COBRA_EVENT_ID  = 0
                             AND B.EFFDT          <= $ASOFTODAY)
  AND B1.COBRA_EVENT_ID = 0
END-SELECT
  !do Commit-Transaction
end-procedure


!-----------------------------------------------------------------------
! Function:    Insert-Health-Records                                   -
! Description: insert health records                                   -
! Called By:   Get-Benefits-Table-Data                                 -
! Calls:       Get-Enroll-Date, Get-Deduction-Data, Insert-Plan-Record,-
!              Clear-Local-Ben-Data                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Health-Records
#debugd Show '...Insert-Health-Records'

BEGIN-SELECT
A.COBRA_EVENT_ID
A.PLAN_TYPE
A.EFFDT   &HBEFFDT
A.BENEFIT_PLAN
A.COVERAGE_ELECT
A.COVRG_CD
A.COVERAGE_BEGIN_DT
A.COVERAGE_END_DT
A.DEDUCTION_END_DT
A.HLTH_PROVIDER_ID
A.PREVIOUSLY_SEEN

  MOVE &A.COBRA_EVENT_ID    TO #COBRA_EVENT_ID
  MOVE &A.PLAN_TYPE         TO $PLAN_TYPE
  MOVE &HBEFFDT             TO $EFFDT
  MOVE &HBEFFDT             TO $DEDUCTION_BEGIN_DT
  MOVE &A.BENEFIT_PLAN      TO $BENEFIT_PLAN
  MOVE &A.COVERAGE_ELECT    TO $COVERAGE_ELECT
  MOVE &A.COVRG_CD          TO $COVRG_CD
  MOVE &A.COVERAGE_BEGIN_DT TO $COVERAGE_BEGIN_DT
  MOVE &A.COVERAGE_END_DT   TO $COVERAGE_END_DT
  MOVE &A.DEDUCTION_END_DT  TO $DEDUCTION_END_DT
  MOVE &A.HLTH_PROVIDER_ID  TO $HLTH_PROVIDER_ID
  MOVE &A.PREVIOUSLY_SEEN   TO $PREVIOUSLY_SEEN
  
  IF (&A.COVERAGE_ELECT <> 'W')
    DO GET-ENROLL-DATE
    IF #COBRA_EVENT_ID = 0
      DO GET-DEDUCTION-DATA
    END-IF
  END-IF
  
  DO Get-Plan-Type-Descr
  DO INSERT-PLAN-RECORD
  DO CLEAR-LOCAL-BEN-DATA
  
FROM  PS_HEALTH_BENEFIT A
WHERE A.EMPLID           = $CURRENT_EMPLID
  AND A.EMPL_RCD         = #CURRENT_EMPL_RCD
  AND A.COBRA_EVENT_ID   = #COBRA_EVENT_ID
  AND A.COVERAGE_ELECT  <> 'T'
  AND (A.COVERAGE_END_DT > $ASOFTODAY
       OR 
       A.COVERAGE_END_DT IS NULL)
  AND A.EFFDT = (SELECT MAX(HH.EFFDT) FROM PS_HEALTH_BENEFIT HH
                  WHERE A.EMPLID              = HH.EMPLID
                    AND A.EMPL_RCD            = HH.EMPL_RCD
                    AND A.COBRA_EVENT_ID      = HH.COBRA_EVENT_ID
                    AND A.PLAN_TYPE           = HH.PLAN_TYPE)
END-SELECT
end-procedure


!-----------------------------------------------------------------------
! Function:    Get-Enroll-Date                                         -
! Description: Get enrollment date for health insert                   -
! Called By:   Insert-Health-Records                                   -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Enroll-Date
#debugd show '......Get-Enrollment-Date'
  move &HBeffdt to $enrollment_dt

BEGIN-SELECT
H3.EMPLID
H3.BENEFIT_PLAN
H3.EFFDT
H3.PLAN_TYPE

 IF (&H3.BENEFIT_PLAN != $BENEFIT_PLAN)
   EXIT-SELECT
 ELSE
   MOVE &H3.EFFDT TO $ENROLLMENT_DT
 END-IF
 
FROM PS_HEALTH_BENEFIT H3
WHERE H3.EMPLID          = $CURRENT_EMPLID
  AND H3.COBRA_EVENT_ID  = #COBRA_EVENT_ID
  AND H3.EMPL_RCD        = #CURRENT_EMPL_RCD
  AND H3.PLAN_TYPE       = $PLAN_TYPE
  AND H3.EFFDT          <= &HBEFFDT
ORDER BY H3.EFFDT DESC
END-SELECT

end-procedure


!-----------------------------------------------------------------------
! Function:    Get-Plan-Type-Descr                                     -
! Description: Get enrollment date for health insert                   -
! Called By:   Insert-Health-Records                                   -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Plan-Type-Descr
#debugd show '......Get-Plan-Type-Descr'
let $plan_type_descr = ' '

BEGIN-SELECT
PTD.DESCR

   let $plan_type_descr = &ptd.descr
 
FROM PS_PLAN_TYPE_VW PTD
WHERE PTD.PLAN_TYPE = $PLAN_TYPE
AND PTD.EFFDT = (SELECT MAX(PTD1.EFFDT) FROM PS_PLAN_TYPE_VW PTD1
                 WHERE PTD1.PLAN_TYPE = PTD.PLAN_TYPE
                   AND PTD1.EFFDT <= $AsOfToday)
END-SELECT

end-procedure Get-Plan-Type-Descr


!-----------------------------------------------------------------------
! Function:    Get-Deduction-Data                                      -
! Description: Get deduction data from pay check                       -
! Called By:   Insert-Health-Records, Insert-Benefit-Records           -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Deduction-Data
#debugd show '......Get-Deduction-Data'
#debugd show '........$PLAN_TYPE         = ' $plan_type
#debugd show '........$BENEFIT_PLAN      = ' $Benefit_Plan
#debugd show '........$COVERAGE_BEGIN_DT = ' $Coverage_Begin_Dt
let $Ded_Class = ' '
let #Ded_Cur   = 0
BEGIN-SELECT            
C.DED_CUR
C.DED_CLASS
C.PAY_END_DT
C.CALCULATED_BASE

  MOVE &C.DED_CUR         TO #DED_CUR
  MOVE &C.DED_CLASS       TO $DED_CLASS          !Added in 9.0 version to replace TAX_CLASS_NLD
  #debugd show '........&c.ded_class = ' &c.ded_class
  MOVE &C.PAY_END_DT      TO $PAY_END_DT
  MOVE &C.CALCULATED_BASE TO #CALCULATED_BASE

FROM PS_PAY_DEDUCTION C,
     PS_PAY_CHECK P
WHERE P.EMPLID       = $CURRENT_EMPLID
  AND P.EMPL_RCD     = #CURRENT_EMPL_RCD
  AND C.PLAN_TYPE    = $PLAN_TYPE
  AND C.BENEFIT_PLAN = $BENEFIT_PLAN
  AND P.COMPANY      = C.COMPANY
  AND P.PAYGROUP     = C.PAYGROUP
  AND P.PAY_END_DT   = C.PAY_END_DT
  AND P.OFF_CYCLE    = C.OFF_CYCLE
  AND P.PAGE_NUM     = C.PAGE_NUM
  AND P.LINE_NUM     = C.LINE_NUM
  AND P.SEPCHK       = C.SEPCHK
  AND C.PAY_END_DT   = (SELECT MAX(PP.PAY_END_DT) FROM PS_PAY_CHECK PP
                        WHERE  PP.COMPANY   = P.COMPANY
                          AND  PP.PAYGROUP  = P.PAYGROUP
                          AND  PP.OFF_CYCLE = P.OFF_CYCLE
                          AND  PP.PAGE_NUM  = P.PAGE_NUM
                          AND  PP.LINE_NUM  = P.LINE_NUM
                          AND  PP.SEPCHK    = P.SEPCHK 
                          AND  PP.PAY_END_DT    >= $COVERAGE_BEGIN_DT)
END-SELECT

  

end-procedure


!-----------------------------------------------------------------------
! Function:    Insert-Benefit-Records                                  -
! Description: insert Disability and Life, called twice                -
! Called By:   Get-Benefits-Table-Data                                 -
! Calls:       Get-Deduction-Data, Insert-Plan-Record,                 -
!              Clear-Local-Ben-Data                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Benefit-Records
#debugd SHOW '...Insert-Benefit-Records'

BEGIN-SELECT
D.PLAN_TYPE
D.EFFDT
D.BENEFIT_PLAN
D.COVERAGE_ELECT
D.COVERAGE_BEGIN_DT
D.COVERAGE_END_DT
D.DEDUCTION_END_DT

  MOVE &D.PLAN_TYPE         TO $PLAN_TYPE
  MOVE &D.EFFDT             TO $EFFDT
  MOVE &D.EFFDT             TO $DEDUCTION_BEGIN_DT
  MOVE &D.BENEFIT_PLAN      TO $BENEFIT_PLAN
  MOVE &D.COVERAGE_ELECT    TO $COVERAGE_ELECT
  MOVE &D.COVERAGE_BEGIN_DT TO $COVERAGE_BEGIN_DT
  MOVE &D.COVERAGE_END_DT   TO $COVERAGE_END_DT
  MOVE &D.DEDUCTION_END_DT  TO $DEDUCTION_END_DT
  
  IF (&D.COVERAGE_ELECT <> 'W')
    DO GET-DEDUCTION-DATA
  END-IF
  
  DO Get-Plan-Type-Descr
  DO INSERT-PLAN-RECORD
  DO CLEAR-LOCAL-BEN-DATA
  
FROM  [PS_DISABILITY_BEN D : $TBLNAME]
WHERE D.EMPLID           = $CURRENT_EMPLID
  AND D.EMPL_RCD         = #CURRENT_EMPL_RCD
  AND D.COVERAGE_ELECT  <> 'T'
  AND (D.COVERAGE_END_DT > $ASOFTODAY
       OR
       D.COVERAGE_END_DT IS NULL)
  AND D.EFFDT = (SELECT MAX(D2.EFFDT) FROM [PS_DISABILITY_BEN D2 : $TBLNAME2]
                  WHERE D.EMPLID              = D2.EMPLID
                    AND D.EMPL_RCD            = D2.EMPL_RCD
                    AND D.PLAN_TYPE           = D2.PLAN_TYPE)
END-SELECT

end-procedure


!-----------------------------------------------------------------------
! Function:    Insert-FSA-Records                                      -
! Description: insert FSA records                                      -
! Called By:   Get-Benefits-Table-Data                                 -
! Calls:       Get-Deduction-Data, Insert-Plan-Record,                 -
!              Clear-Local-Ben-Data                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-FSA-Records
#debugd show '...Insert-FSA-Records'

BEGIN-SELECT
F.PLAN_TYPE
F.EFFDT
F.BENEFIT_PLAN
F.COVERAGE_ELECT
F.COVERAGE_BEGIN_DT
F.COVERAGE_END_DT
F.DEDUCTION_END_DT
F.ANNUAL_PLEDGE

  MOVE &F.PLAN_TYPE         TO $PLAN_TYPE
  MOVE &F.EFFDT             TO $EFFDT
  MOVE &F.EFFDT             TO $DEDUCTION_BEGIN_DT
  MOVE &F.BENEFIT_PLAN      TO $BENEFIT_PLAN
  MOVE &F.COVERAGE_ELECT    TO $COVERAGE_ELECT
  MOVE &F.COVERAGE_BEGIN_DT TO $COVERAGE_BEGIN_DT
  MOVE &F.COVERAGE_END_DT   TO $COVERAGE_END_DT
  MOVE &F.DEDUCTION_END_DT  TO $DEDUCTION_END_DT
  MOVE &F.ANNUAL_PLEDGE     TO #ANNUAL_PLEDGE
  
  IF (&F.COVERAGE_ELECT <> 'W')
    DO GET-DEDUCTION-DATA
  END-IF
  
  DO Get-Plan-Type-Descr
  DO INSERT-PLAN-RECORD
  DO CLEAR-LOCAL-BEN-DATA
  
FROM  PS_FSA_BENEFIT    F
WHERE F.EMPLID           = $CURRENT_EMPLID
  AND F.EMPL_RCD         = #CURRENT_EMPL_RCD
  AND F.COVERAGE_ELECT  <> 'T'
  AND (F.COVERAGE_END_DT > $ASOFTODAY
       OR
       F.COVERAGE_END_DT IS NULL)
  AND F.EFFDT = (SELECT MAX(F2.EFFDT) FROM PS_FSA_BENEFIT F2
                  WHERE F.EMPLID              = F2.EMPLID
                    AND F.EMPL_RCD            = F2.EMPL_RCD
                    AND F.PLAN_TYPE           = F2.PLAN_TYPE)
END-SELECT

end-procedure


!-----------------------------------------------------------------------
! Function:    Insert-Vacation-Buy-Sell-Records                        -
! Description: insert Leave records                                    -
! Called By:   Get-Benefits-Table-Data                                 -
! Calls:       Insert-Plan-Record, Clear-Local-Ben-Data                -
!-----------------------------------------------------------------------
begin-procedure Insert-Vacation-Buy-Sell-Records
#debugd show '...Insert-Vacation-Buy-Sell-Records'

BEGIN-SELECT
VA.PLAN_TYPE
VA.EFFDT
VA.BENEFIT_PLAN
VA.COVERAGE_ELECT
VA.DEDUCTION_END_DT
VA.VACN_HOURS
VA.VACN_BUY_FLAT_AMT
VA.VACN_SELL_FLAT_AMT

  MOVE &VA.PLAN_TYPE          TO $PLAN_TYPE
  MOVE &VA.EFFDT              TO $EFFDT
  MOVE &VA.EFFDT              TO $DEDUCTION_BEGIN_DT
  MOVE &VA.BENEFIT_PLAN       TO $BENEFIT_PLAN
  MOVE &VA.COVERAGE_ELECT     TO $COVERAGE_ELECT
  MOVE &VA.DEDUCTION_END_DT   TO $DEDUCTION_END_DT
  MOVE &VA.VACN_HOURS         TO #VACN_HOURS
  MOVE &VA.VACN_BUY_FLAT_AMT  TO #VACN_BUY_FLAT_AMT
  MOVE &VA.VACN_SELL_FLAT_AMT TO #VACN_SELL_FLAT_AMT
  
  DO Get-Plan-Type-Descr
  DO INSERT-PLAN-RECORD
  DO CLEAR-LOCAL-BEN-DATA
  
FROM  PS_VACATION_BEN   VA
WHERE VA.EMPLID          = $CURRENT_EMPLID
  AND VA.EMPL_RCD        = #CURRENT_EMPL_RCD
  AND VA.COVERAGE_ELECT <> 'T'
  AND VA.EFFDT = (SELECT MAX(V2.EFFDT) FROM PS_VACATION_BEN   V2
                   WHERE VA.EMPLID    = V2.EMPLID
                     AND VA.EMPL_RCD  = V2.EMPL_RCD
                     AND VA.PLAN_TYPE = V2.PLAN_TYPE)
END-SELECT

end-procedure


!-----------------------------------------------------------------------
! Function:    Insert-Plan-Record                                      -
! Description: insert Leave records                                    -
! Called By:   Insert-Health-Records, Insert-Benefit-Records,          -
!              Insert-FSA-Records, Insert-Vacation-Buy-Sell-Records    -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Plan-Record
#debugd show '.........Insert-Plan-Record'

If $Ded_Class = ''
   Let $Ded_Class = ' '
End-If

   do Get-Benefit-Plan-Tbl-Data                                         
                                         
let $sql-statement = 'Insert-Plan-Record,INSERT,PS_CBP_BENPLN_DATA'
BEGIN-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_CBP_BENPLN_DATA
(EMPLID,
EMPL_RCD,
COBRA_EVENT_ID,
DEPENDENT_BENEF,
PLAN_TYPE,
PLAN_TYPE_DESCR,
EFFDT,
BENEFIT_PLAN,
BEN_PLAN_DESCR,
SETID,
VENDOR_ID,
CBP_VENDOR_NAME,
GROUP_NBR,
POLICY_NBR,
COVERAGE_ELECT,
COVRG_CD,
COVRG_CODE_DESCR,
COVERAGE_BEGIN_DT,
COVERAGE_END_DT,
DEDUCTION_BEGIN_DT,
DEDUCTION_END_DT,
ENROLLMENT_DT,
ANNUAL_PLEDGE,
FLAT_DED_AMT,
PCT_GROSS,
FLAT_DED_AMT_ATAX,
PCT_GROSS_ATAX,
VACN_HOURS,
VACN_BUY_FLAT_AMT,
VACN_SELL_FLAT_AMT,
BENEF_PCT,
FLAT_AMOUNT,
EXCESS,
CONTINGENT,
DED_CUR,
DED_CLASS,                !9.0 added this field to give Univers before/after tax info
PAY_END_DT,
CALCULATED_BASE,
BENEFIT_PROGRAM,
CBP_BENPROG_DESCR,
COMPANY,
CBP_COMPANY_DESCR,
PAYGROUP,
CBP_PAYGROUP_DESCR,
CURRENCY_CD,
CBP_CURRENCY_DESCR,
HLTH_PROVIDER_ID,
PREVIOUSLY_SEEN)
VALUES
($CURRENT_EMPLID,
#CURRENT_EMPL_RCD,
#COBRA_EVENT_ID,
$DEPENDENT_BENEF,
$PLAN_TYPE,
$PLAN_TYPE_DESCR,
$EFFDT,
$BENEFIT_PLAN,
$BEN_PLAN_DESCR,
$SETID,
$PROVIDER,
$Vendor_Name,
$GROUP_NBR,
$POLICY_NBR,
$COVERAGE_ELECT,
$COVRG_CD,
$COVRG_CODE_DESCR,
$COVERAGE_BEGIN_DT,
NULL,                      !COVERAGE_END_DT
$DEDUCTION_BEGIN_DT,
NULL,                      !DEDUCTION_END_DT
NULL,                      !ENROLLMENT_DT
#ANNUAL_PLEDGE,
#FLAT_DED_AMT,
#PCT_GROSS,
#FLAT_DED_AMT_ATAX,
#PCT_GROSS_ATAX,
#VACN_HOURS,
#VACN_BUY_FLAT_AMT,
#VACN_SELL_FLAT_AMT,
#BENEF_PCT,
#FLAT_AMOUNT,
$EXCESS,
$CONTINGENT,
#DED_CUR,
$DED_CLASS,                !9.0 added this field to give Univers before/after tax info
NULL,                      !PAY_END_DT
#CALCULATED_BASE,
$CURRENT_BENEFIT_PROGRAM,
' ',                       !CBP_BENPRG_DESCR
$CURRENT_COMPANY,
' ',                       !CBP_COMPANY_DESCR
$CURRENT_PAYGROUP,
' ',                       !CBP_PAYGROUP_DESCR
' ',                       !CURRENCY_CD
' ',                       !CBP_CURRENCY_CD
$HLTH_PROVIDER_ID,
$PREVIOUSLY_SEEN)
END-SQL

if $coverage_end_dt <> ''
let $sql-statement = 'Insert-Plan-Record,UPDATE1,PS_CBP_BENPLN_DATA'
BEGIN-SQL
UPDATE PS_CBP_BENPLN_DATA
SET COVERAGE_END_DT   = $COVERAGE_END_DT
WHERE EMPLID          = $CURRENT_EMPLID
  AND COBRA_EVENT_ID  = #COBRA_EVENT_ID
  AND EMPL_RCD        = #CURRENT_EMPL_RCD
  AND DEPENDENT_BENEF = $DEPENDENT_BENEF
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL
end-if

if $deduction_end_dt <> ''
let $sql-statement = 'Insert-Plan-Record,UPDATE2,PS_CBP_BENPLN_DATA'
BEGIN-SQL
UPDATE PS_CBP_BENPLN_DATA
SET DEDUCTION_END_DT  = $DEDUCTION_END_DT
WHERE EMPLID          = $CURRENT_EMPLID
  AND COBRA_EVENT_ID  = #COBRA_EVENT_ID
  AND EMPL_RCD        = #CURRENT_EMPL_RCD
  AND DEPENDENT_BENEF = $DEPENDENT_BENEF
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL
end-if

let $plan_type_num = substr($plan_type,1,1)
if $plan_type_num  = '1'
let $sql-statement = 'Insert-Plan-Record,UPDATE3,PS_CBP_BENPLN_DATA'
BEGIN-SQL
UPDATE PS_CBP_BENPLN_DATA
SET ENROLLMENT_DT     = $ENROLLMENT_DT
WHERE EMPLID          = $CURRENT_EMPLID
  AND COBRA_EVENT_ID  = #COBRA_EVENT_ID
  AND EMPL_RCD        = #CURRENT_EMPL_RCD
  AND DEPENDENT_BENEF = $DEPENDENT_BENEF
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL
end-if

if $pay_end_dt <> ''
let $sql-statement = 'Insert-Plan-Record,UPDATE4,PS_CBP_BENPLN_DATA'
BEGIN-SQL
UPDATE PS_CBP_BENPLN_DATA
SET PAY_END_DT        = $PAY_END_DT
WHERE EMPLID          = $CURRENT_EMPLID
  AND COBRA_EVENT_ID  = #COBRA_EVENT_ID
  AND EMPL_RCD        = #CURRENT_EMPL_RCD
  AND DEPENDENT_BENEF = $DEPENDENT_BENEF
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL
end-if

end-procedure Insert-Plan-Record


!-----------------------------------------------------------------------
! Function:    Get-Benefit-Plan-Tbl-Data                               -
! Description: gets benefit plan table data for insert                 -
! Called By:   Insert-Plan-Record                                      -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Benefit-Plan-Tbl-Data
#debugd show '............Get-Benefit-Plan-Tbl-Data'

      let $BEN_PLAN_DESCR = ' '
      let $SETID          = ' '
      let $PROVIDER       = ' '
      let $GROUP_NBR      = ' '

BEGIN-SELECT
B1.BENEFIT_PLAN
B1.EFFDT
B1.DESCR
B1.SETID
B1.VENDOR_ID
B1.GROUP_NBR

  MOVE &B1.DESCR     TO $BEN_PLAN_DESCR
  MOVE &B1.SETID     TO $SETID
  MOVE &B1.VENDOR_ID TO $PROVIDER
  MOVE &B1.GROUP_NBR TO $GROUP_NBR

  Do Get-Vendor-Name
  
FROM PS_BENEF_PLAN_TBL B1
WHERE B1.PLAN_TYPE    = $PLAN_TYPE
  AND B1.BENEFIT_PLAN = $BENEFIT_PLAN
  AND B1.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_BENEF_PLAN_TBL B2
                   WHERE B2.PLAN_TYPE    = B1.PLAN_TYPE
                     AND B2.BENEFIT_PLAN = B1.BENEFIT_PLAN
                     AND B2.EFFDT       <= $ASOFTODAY)
END-SELECT

end-procedure get-benefit-plan-tbl-data


!-----------------------------------------------------------------------
! Function:    Get-Vendor-Name                                         -
! Description: gets the Vendor Name                                    -
! Called By:   Get-Benefit-Plan-Tbl-Data                               -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Vendor-Name
#debugd show '............Get-Vendor-Name'

      let $VENDOR_NAME = ' '

BEGIN-SELECT
V1.NAME1

  MOVE &V1.NAME1     TO $Vendor_Name
  
FROM PS_VENDOR V1
WHERE V1.VENDOR_ID = $PROVIDER
END-SELECT

end-procedure get-vendor-name


!-----------------------------------------------------------------------
! Function:    Clear-Local-Ben-Data                                    -
! Description: clears values for insert to PS_CBP_BENPLN_DATA            -
! Called By:   Insert-Health-Records, Insert-Benefit-Records,          -
!              Insert-FSA-Records, Insert-Vacation-Buy-Sell-Records    -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Clear-Local-Ben-Data
#debugd show '...Clear-Local-Ben-Data'
  
  move ' ' to $dependent_benef
  move ' ' to $plan_type
  move ' ' to $plan_type_descr
  move ' ' to $effdt
  move ' ' to $benefit_plan
  move ' ' to $BEN_PLAN_descr
  move ' ' to $setid
  move ' ' to $provider
  move ' ' to $provider_descr
  move ' ' to $GROUP_NBR
  move ' ' to $POLICY_NBR
  move ' ' to $coverage_elect
  move ' ' to $covrg_cd
  move ' ' to $covrg_code_descr
  move ''  to $coverage_begin_dt
  move ''  to $coverage_end_dt
  move ''  to $deduction_begin_dt
  move ''  to $deduction_end_dt
  move ' ' to $hlth_provider_id
  move ' ' to $previously_seen
  move ''  to $enrollment_dt
  move 0   to #benef_pct
  move 0   to #flat_amount
  move 0   to #annual_pledge
  move 0   to #flat_ded_amt
  move 0   to #pct_gross
  move 0   to #flat_ded_amt_atax
  move 0   to #pct_gross_atax
  move 0   to #vacn_hours
  move 0   to #vacn_buy_flat_amt
  move 0   to #vacn_sell_flat_amt
  move ' ' to $excess
  move ' ' to $contingent
  move 0   to #ded_cur
  move ''  to $pay_end_dt
  move 0   to #calculated_base
  move ' ' to $benefit_program
  move ' ' to $benefit_prog_descr
  move ' ' to $company
  move ' ' to $company_descr
  move ' ' to $paygroup
  move ' ' to $paygroup_descr
  move ' ' to $currency_cd
  move ' ' to $currency_descr
  
end-procedure


!-----------------------------------------------------------------------
! Function:    pre-ded-file                                            -
! Description: Process Pre-deduction Data and write it out             -
! Called By:   Report                                                  -
! Calls:       write-row-pre-ded                                       -
!-----------------------------------------------------------------------
begin-procedure pre-ded-file
#debugd show 'pre-ded-file'

  do write-header-pre-ded

!9.0 Version Commented out and rewrote  
!BEGIN-SELECT
!BPD1.BEN_PLAN_DESCR 
!BPD1.DED_CUR 
!DT1.TAX_CLASS_NLD 
!BPD1.EMPLID 
!
!        LET $BEN_PLAN_DESCR = &BPD1.BEN_PLAN_DESCR 
!        LET $DED_CUR        = &BPD1.DED_CUR 
!        LET $TAX_CLASS_NLD  = &DT1.TAX_CLASS_NLD
!        LET $EMPLID         = &BPD1.EMPLID
!         
!        DO GET-PERSNID-DED     
!        DO WRITE-ROW-PRE-DED
!
!FROM PS_CBP_BENPLN_DATA BPD1, 
!     PS_BENEF_PLAN_TBL BPT1, 
!     PS_DEDUCTION_TBL DT1 
!WHERE DT1.DEDCD         = BPT1.DEDCD 
!  AND DT1.PLAN_TYPE     = BPT1.PLAN_TYPE 
!  AND BPD1.PLAN_TYPE    = BPT1.PLAN_TYPE 
!  AND BPT1.EFFDT        = (SELECT MAX(BPT1_ED.EFFDT) FROM PS_BENEF_PLAN_TBL BPT1_ED
!                           WHERE BPT1.PLAN_TYPE    = BPT1_ED.PLAN_TYPE
!                             AND BPT1.BENEFIT_PLAN = BPT1_ED.BENEFIT_PLAN 
!                             AND BPT1_ED.EFFDT    <= BPD1.EFFDT) 
!  AND BPD1.BENEFIT_PLAN = BPT1.BENEFIT_PLAN 
!  AND DT1.EFFDT         = (SELECT MAX(DT1_ED.EFFDT) FROM PS_DEDUCTION_TBL DT1_ED 
!                           WHERE DT1.PLAN_TYPE  = DT1_ED.PLAN_TYPE 
!                             AND DT1.DEDCD      = DT1_ED.DEDCD 
!                             AND DT1_ED.EFFDT  <= BPT1.EFFDT)
!END-SELECT

Let $Ded_Class = ' '

BEGIN-SELECT
BPD1.BEN_PLAN_DESCR 
BPD1.DED_CUR 
BPD1.DED_CLASS
BPD1.EMPLID 

        LET $BEN_PLAN_DESCR = &BPD1.BEN_PLAN_DESCR 
        LET $DED_CUR        = &BPD1.DED_CUR 
        LET $DED_CLASS      = &BPD1.DED_CLASS
        LET $EMPLID         = &BPD1.EMPLID
         
        DO GET-PERSNID-DED     
        DO WRITE-ROW-PRE-DED

FROM PS_CBP_BENPLN_DATA BPD1 
END-SELECT

end-procedure pre-ded-file


!-----------------------------------------------------------------------
! Function:    get-persnid-ded                                         -
! Description: Get persnid information                                 -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-persnid-ded
#debugd show '...get-persnid-ded'

        let $NATIONAL_ID = ' '
        
begin-select
PNPD.NATIONAL_ID 

        let $NATIONAL_ID = &PNPD.NATIONAL_ID  

FROM PS_PERS_NID PNPD
WHERE PNPD.EMPLID = &BPD1.EMPLID  
end-select

end-procedure get-persnid-ded


!-----------------------------------------------------------------------
! Function:    write-header-pre-ded                                    -
! Description: Write header record for output file, {pre_ded_file}     -
! Called By:   pre-ded-file                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-header-pre-ded
#debugd show 'write-header-pre-ded'
  
        write 1 from    $Quote 'NATIONAL_ID'    $Quote $Comma
                        $Quote 'BEN_PLAN_DESCR' $Quote $Comma
                        $Quote 'DED_CUR'        $Quote $Comma
                        $Quote 'DED_CLASS'      $Quote $Comma       !9.0 version changed to use ded_class
                       !$Quote 'TAX_CLASS_NLD'  $Quote $Comma       !9.0 version changed to use ded_class
                        $Quote 'EMPLID'         $Quote                    
   
end-procedure !write-header-pre-ded

                                              
!-----------------------------------------------------------------------
! Function:    write-row-pre-ded                                       -
! Description: Write Data to output file, {pre_ded_file}               -
! Called By:   pre-ded-file                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-row-pre-ded
#debugd show 'write-row-pre-ded' 

        write 1 from    $Quote $NATIONAL_ID    $Quote $Comma
                        $Quote $BEN_PLAN_DESCR $Quote $Comma
                        $Quote $DED_CUR        $Quote $Comma
                        $Quote $DED_CLASS      $Quote $Comma       !9.0 version changed to use ded_class
                       !$Quote $TAX_CLASS_NLD  $Quote $Comma       !9.0 version changed to use ded_class
                        $Quote $EMPLID         $Quote  

end-procedure !write-row-pre-ded


!-----------------------------------------------------------------------
! Function:    ben-plan-file                                           -
! Description: Process Benefit Plan Data and write it out              -
! Called By:   Report                                                  -
! Calls:       write-row-ben-plan                                      -
!-----------------------------------------------------------------------
begin-procedure ben-plan-file
#debugd show 'ben-plan-file'

  do write-header-ben-plan
  
BEGIN-SELECT
BPD2.EMPLID
BPD2.DEPENDENT_BENEF
BPD2.PLAN_TYPE
BPD2.PLAN_TYPE_DESCR
BPD2.EFFDT
BPD2.BENEFIT_PLAN
BPD2.BEN_PLAN_DESCR
BPD2.COVERAGE_ELECT
BPD2.COVRG_CD
BPD2.COVRG_CODE_DESCR
BPD2.ANNUAL_PLEDGE
BPD2.BENEF_PCT
BPD2.EXCESS
BPD2.CONTINGENT

        LET $EMPLID           = &BPD2.EMPLID              
        LET $DEPENDENT_BENEF  = &BPD2.DEPENDENT_BENEF     
        LET $PLAN_TYPE        = &BPD2.PLAN_TYPE           
        LET $PLAN_TYPE_DESCR  = &BPD2.PLAN_TYPE_DESCR     
        LET $EFFDT            = &BPD2.EFFDT               
        LET $BENEFIT_PLAN     = &BPD2.BENEFIT_PLAN        
        LET $BEN_PLAN_DESCR   = &BPD2.BEN_PLAN_DESCR      
        LET $COVERAGE_ELECT   = &BPD2.COVERAGE_ELECT      
        LET $COVRG_CD         = &BPD2.COVRG_CD            
        LET $COVRG_CODE_DESCR = &BPD2.COVRG_CODE_DESCR    
        LET #ANNUAL_PLEDGE    = &BPD2.ANNUAL_PLEDGE       
        LET #BENEF_PCT        = &BPD2.BENEF_PCT           
        LET $EXCESS           = &BPD2.EXCESS              
        LET $CONTINGENT       = &BPD2.CONTINGENT          
        
        DO WRITE-ROW-BEN-PLAN
  
FROM PS_CBP_BENPLN_DATA BPD2
ORDER BY BPD2.EMPLID
END-SELECT

end-procedure ben-plan-file


!-----------------------------------------------------------------------
! Function:    write-header-ben-plan                                   -
! Description: Write header record for output file, {ben_plan_file}    -
! Called By:   ben-plan-file                                           -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-header-ben-plan
  
        write 2 from    $Quote 'EMPLID'           $Quote $Comma
                        $Quote 'DEPENDENT_BENEF'  $Quote $Comma
                        $Quote 'PLAN_TYPE'        $Quote $Comma
                        $Quote 'PLAN_TYPE_DESCR'  $Quote $Comma
                        $Quote 'EFFDT'            $Quote $Comma
                        $Quote 'BENEFIT_PLAN'     $Quote $Comma
                        $Quote 'BEN_PLAN_DESCR'   $Quote $Comma
                        $Quote 'COVERAGE_ELECT'   $Quote $Comma
                        $Quote 'COVRG_CD'         $Quote $Comma
                        $Quote 'COVRG_CODE_DESCR' $Quote $Comma
                        $Quote 'ANNUAL_PLEDGE'    $Quote $Comma
                        $Quote 'BENEF_PCT'        $Quote $Comma
                        $Quote 'EXCESS'           $Quote $Comma
                        $Quote 'CONTINGENT'       $Quote      
                  
end-procedure !write-header-ben-plan

                                              
!-----------------------------------------------------------------------
! Function:    write-row-ben-plan                                      -
! Description: Write Data to output file, {ben_plan_file}              -
! Called By:   ben-plan-file                                           -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-row-ben-plan

        let $ANNUAL_PLEDGE = edit(#ANNUAL_PLEDGE, '999999.99')   
        let $BENEF_PCT     = edit(#BENEF_PCT, '999.99')       
 
        write 2 from    $Quote $EMPLID           $Quote $Comma
                        $Quote $DEPENDENT_BENEF  $Quote $Comma
                        $Quote $PLAN_TYPE        $Quote $Comma
                        $Quote $PLAN_TYPE_DESCR  $Quote $Comma
                        $Quote $EFFDT            $Quote $Comma
                        $Quote $BENEFIT_PLAN     $Quote $Comma
                        $Quote $BEN_PLAN_DESCR   $Quote $Comma
                        $Quote $COVERAGE_ELECT   $Quote $Comma
                        $Quote $COVRG_CD         $Quote $Comma
                        $Quote $COVRG_CODE_DESCR $Quote $Comma
                        $Quote $ANNUAL_PLEDGE    $Quote $Comma
                        $Quote $BENEF_PCT        $Quote $Comma
                        $Quote $EXCESS           $Quote $Comma
                        $Quote $CONTINGENT       $Quote 
                        
end-procedure !write-row-ben-plan


!-----------------------------------------------------------------------
! Function:    job-file                                                -
! Description: Process Job and Personal Data and write it out          -
! Called By:   Report                                                  -
! Calls:       get-jobcode                                             -
!              get-per1                                                -
!              get-per2                                                -
!              get-per3                                                -
!              get-per4                                                -
!              get-per5                                                - 
!              get-persnid                                             -
!              get-PAYGROUP                                            -
!              get-fedtax                                              -
!              get-statetax                                            - 
!              GET-GEX-EMPLID                                          -
!              write-row-job-file                                      -
!              GET-BEN-PROG                                            -
!-----------------------------------------------------------------------
begin-procedure job-file
#debugd show 'job-file'

  do write-header-job-file
  
BEGIN-SELECT
J1.JOBCODE  
J1.DEPTID 
J1.EMPL_TYPE 
J1.FULL_PART_TIME 
J1.STD_HOURS 
J1.ANNUAL_RT 
J1.COMPANY 
J1.PAYGROUP 
J1.EMPL_CLASS 
J1.REG_TEMP 
J1.EMPL_STATUS 
J1.OFFICER_CD 
J1.ELIG_CONFIG1 
J1.ELIG_CONFIG2 
J1.ELIG_CONFIG3 
J1.ELIG_CONFIG4 
J1.ELIG_CONFIG5 
J1.ELIG_CONFIG6 
J1.ELIG_CONFIG7 
J1.ELIG_CONFIG8 
J1.ELIG_CONFIG9 
J1.EFFDT
J1.EMPLID
J1.EMPL_RCD
J1.BUSINESS_UNIT
J1.ANNL_BENEF_BASE_RT
J1.LOCATION
J1.PER_ORG
J1.UNION_CD 
J1.LAST_HIRE_DT

        let $EMPLID             = &J1.EMPLID         
        let $EMPL_RCD           = &J1.EMPL_RCD
        let $JOBCODE            = &J1.JOBCODE         
        let $DEPTID             = &J1.DEPTID          
        let $EMPL_TYPE          = &J1.EMPL_TYPE       
        let $FULL_PART_TIME     = &J1.FULL_PART_TIME  
        let $STD_HOURS          = &J1.STD_HOURS       
        let $ANNUAL_RT          = &J1.ANNUAL_RT       
        let $COMPANY            = &J1.COMPANY         
        let $PAYGROUP           = &J1.PAYGROUP        
        let $EMPL_CLASS         = &J1.EMPL_CLASS      
        let $REG_TEMP           = &J1.REG_TEMP        
        let $EMPL_STATUS        = &J1.EMPL_STATUS     
        let $OFFICER_CD         = &J1.OFFICER_CD      
        let $ELIG_CONFIG1       = &J1.ELIG_CONFIG1    
        let $ELIG_CONFIG2       = &J1.ELIG_CONFIG2    
        let $ELIG_CONFIG3       = &J1.ELIG_CONFIG3    
        let $ELIG_CONFIG4       = &J1.ELIG_CONFIG4    
        let $ELIG_CONFIG5       = &J1.ELIG_CONFIG5    
        let $ELIG_CONFIG6       = &J1.ELIG_CONFIG6    
        let $ELIG_CONFIG7       = &J1.ELIG_CONFIG7    
        let $ELIG_CONFIG8       = &J1.ELIG_CONFIG8    
        let $ELIG_CONFIG9       = &J1.ELIG_CONFIG9 
        LET $ANNL_BENEF_BASE_RT = &J1.ANNL_BENEF_BASE_RT
        LET $LOCATION           = &J1.LOCATION    
        LET $UNION_CD           = &J1.UNION_CD 
        LET $LAST_HIRE_DT       = &J1.LAST_HIRE_DT
        
        if ($UNION_CD <> 'W02'
          AND $FULL_PART_TIME <> 'P')
        DO GET-JOBCODE
        DO GET-PER1
        DO GET-PER2
        DO GET-PER3
        DO GET-PER4
        DO GET-PER5
        DO GET-PERSNID
        DO GET-PAYGROUP
        DO GET-FEDTAX
        DO GET-STATETAX
        DO GET-BEN-PROG
        DO GET-GEX-EMPLID
        DO get-benefit-service-date
        DO get-current-pay-deductions
        DO get-average-hours-worked
        let $AVG_HOURS          = #avg_weekly_hrs_worked       
        
        DO WRITE-ROW-JOB-FILE
        end-if

FROM PS_JOB J1
WHERE J1.EMPL_STATUS IN ('A','L','P','S')
  AND J1.EFFDT       = (SELECT MAX(C_ED.EFFDT) FROM PS_JOB C_ED 
                        WHERE J1.EMPLID   = C_ED.EMPLID 
                          AND J1.EMPL_RCD = C_ED.EMPL_RCD 
                          AND C_ED.EFFDT <= $ASOFTODAY) 
  AND J1.EFFSEQ      = (SELECT MAX(C_ES.EFFSEQ) FROM PS_JOB C_ES 
                        WHERE J1.EMPLID   = C_ES.EMPLID 
                          AND J1.EMPL_RCD = C_ES.EMPL_RCD 
                          AND J1.EFFDT    = C_ES.EFFDT) 
  AND J1.COMPANY <> J1.PAYGROUP                               !Exclude Giant Eagle Independent store locations
ORDER BY J1.EMPLID
END-SELECT

end-procedure job-file


!-----------------------------------------------------------------------
! Function:    get-per1                                                -
! Description: Get personal information                                -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-per1
#debugd show '...get-per1'

        let $BIRTHDATE      = ' '      
        
begin-select
PER1.BIRTHDATE                   

        let $BIRTHDATE      = &PER1.BIRTHDATE      
        
FROM PS_PERSON PER1
WHERE PER1.EMPLID   = &J1.EMPLID
end-select

end-procedure get-per1


!-----------------------------------------------------------------------
! Function:    get-per2                                                -
! Description: Get Name information                                    -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-per2
#debugd show '...get-per2'

        let $NAME           = ' '           
        let $LAST_NAME      = ' '      
        let $MIDDLE_NAME    = ' '    
        let $FIRST_NAME     = ' ' 

begin-select
PER2.NAME        
PER2.LAST_NAME   
PER2.MIDDLE_NAME  
PER2.FIRST_NAME  

        let $NAME           = &PER2.NAME           
        let $LAST_NAME      = &PER2.LAST_NAME      
        let $MIDDLE_NAME    = &PER2.MIDDLE_NAME    
        let $FIRST_NAME     = &PER2.FIRST_NAME 
        
FROM PS_PERSON_NAME     PER2
WHERE PER2.EMPLID = &J1.EMPLID
end-select

end-procedure get-per2


!-----------------------------------------------------------------------
! Function:    get-per3                                                -
! Description: Get personal address information                        -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-per3
#debugd show '...get-per3'

        let $ADDRESS1       = ' '
        let $ADDRESS2       = ' '
        let $CITY           = ' '
        let $STATE          = ' '
        let $POSTAL         = ' ' 

begin-select
PER3.ADDRESS1  
PER3.ADDRESS2  
PER3.CITY       
PER3.STATE     
PER3.POSTAL   

        let $ADDRESS1       = &PER3.ADDRESS1       
        let $ADDRESS2       = &PER3.ADDRESS2       
        let $CITY           = &PER3.CITY           
        let $STATE          = &PER3.STATE          
        let $POSTAL         = &PER3.POSTAL 
        
FROM PS_PERSON_ADDRESS  PER3
WHERE PER3.EMPLID = &J1.EMPLID
end-select

end-procedure get-per3


!-----------------------------------------------------------------------
! Function:    get-per4                                                -
! Description: Get phone number                                        -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-per4
#debugd show '...get-per4'

        let $PHONE          = ' '

begin-select
PER4.PHONE   

        let $PHONE          = &PER4.PHONE 
        
FROM PS_PERSON_PHONE    PER4
WHERE PER4.EMPLID = &J1.EMPLID
end-select

end-procedure get-per4


!-----------------------------------------------------------------------
! Function:    get-per5                                                -
! Description: Get personal data information                           -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-per5
#debugd show '...get-per5'

        let $SEX            = ' '            
        let $MAR_STATUS     = ' '
        
begin-select
PER5.SEX           
PER5.MAR_STATUS 

        let $SEX            = &PER5.SEX            
        let $MAR_STATUS     = &PER5.MAR_STATUS 
        
FROM PS_PERS_DATA_EFFDT PER5
WHERE PER5.EMPLID = &J1.EMPLID
  AND PER5.EFFDT = (SELECT MAX(PER5X.EFFDT) 
                    FROM PS_PERS_DATA_EFFDT PER5X 
                    WHERE PER5X.EMPLID = &J1.EMPLID)
end-select

end-procedure get-per5


!-----------------------------------------------------------------------
! Function:    get-jobcode                                             -
! Description: Get jobcode information                                 -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-jobcode
#debugd show '...get-jobcode'

        let $DESCR = ' '
        
BEGIN-SELECT
JC.DESCR

        LET $DESCR = &JC.DESCR 
        
FROM PS_JOBCODE_TBL JC, 
     PS_SET_CNTRL_REC B2
WHERE JC.JOBCODE       = &J1.JOBCODE 
  AND B2.SETCNTRLVALUE = &J1.BUSINESS_UNIT
  AND B2.RECNAME       = 'JOBCODE_TBL'
  AND B2.SETID         = JC.SETID
  AND JC.EFFDT         = (SELECT MAX(JC1.EFFDT) FROM PS_JOBCODE_TBL JC1 
                          WHERE JC1.SETID   = JC.SETID 
                            AND JC1.JOBCODE = JC.JOBCODE 
                            AND JC1.EFFDT  <= &J1.EFFDT)  
END-SELECT

end-procedure get-jobcode


!-----------------------------------------------------------------------
! Function:    get-persnid                                             -
! Description: Get persnid information                                 -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-persnid
#debugd show '...get-persnid'

        let $NATIONAL_ID = ' '
        
BEGIN-SELECT
PDB.NATIONAL_ID 

        LET $NATIONAL_ID = &PDB.NATIONAL_ID  

FROM PS_PERS_NID PDB
WHERE PDB.EMPLID = &J1.EMPLID  
END-SELECT

end-procedure get-persnid


!-----------------------------------------------------------------------
! Function:    get-PAYGROUP                                            -
! Description: Get pay frequency information                           -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-PAYGROUP
#debugd show '...get-paygroup'

        let $PAY_FREQUENCY = ' '
        
BEGIN-SELECT
PG.PAY_FREQUENCY 

        LET $PAY_FREQUENCY = &PG.PAY_FREQUENCY  

FROM PS_PAYGROUP_TBL PG
WHERE PG.COMPANY  = &J1.COMPANY  
  AND PG.PAYGROUP = &J1.PAYGROUP 
  AND PG.EFFDT    = (SELECT MAX(PG1.EFFDT) FROM PS_PAYGROUP_TBL PG1 
                    WHERE PG1.COMPANY  = PG.COMPANY 
                      AND PG1.PAYGROUP = PG.PAYGROUP  
                      AND PG1.EFFDT   <= &J1.EFFDT)
END-SELECT

end-procedure get-PAYGROUP


!-----------------------------------------------------------------------
! Function:    get-fedtax                                              -
! Description: Get fed tax information                                 -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-fedtax
#debugd show '...get-fedtax'

        let $FWT_MAR_STATUS = ' ' 
        let $FWT_ALLOWANCES = ' '
        
BEGIN-SELECT
FTD.FWT_MAR_STATUS 
FTD.FWT_ALLOWANCES 

        LET $FWT_MAR_STATUS = &FTD.FWT_MAR_STATUS 
        LET $FWT_ALLOWANCES = &FTD.FWT_ALLOWANCES 

FROM PS_FED_TAX_DATA FTD 
WHERE FTD.EMPLID  = &J1.EMPLID  
  AND FTD.COMPANY = &J1.COMPANY
  AND FTD.EFFDT   = (SELECT MAX(D_ED.EFFDT) FROM PS_FED_TAX_DATA D_ED 
                     WHERE FTD.EMPLID  = D_ED.EMPLID 
                       AND FTD.COMPANY = D_ED.COMPANY 
                       AND D_ED.EFFDT <= &J1.EFFDT)
END-SELECT

END-PROCEDURE GET-FEDTAX


!-----------------------------------------------------------------------
! Function:    get-statetax                                            -
! Description: Get state tax information                               -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-statetax
#debugd show '...get-statetax'

        let $SWT_MAR_STATUS = ' ' 
        let $SWT_ALLOWANCES = ' '
        
BEGIN-SELECT
STE.SWT_MAR_STATUS 
STE.SWT_ALLOWANCES 

        LET $SWT_MAR_STATUS = &STE.SWT_MAR_STATUS 
        LET $SWT_ALLOWANCES = &STE.SWT_ALLOWANCES  

FROM PS_STATE_TAX_DATA STE
WHERE STE.EMPLID  = &J1.EMPLID  
  AND STE.COMPANY = &J1.COMPANY
  AND STE.EFFDT   = (SELECT MAX(E_ED.EFFDT) FROM PS_STATE_TAX_DATA E_ED 
                     WHERE STE.EMPLID  = E_ED.EMPLID 
                       AND STE.COMPANY = E_ED.COMPANY 
                       AND E_ED.EFFDT <= &J1.EFFDT)
END-SELECT

END-PROCEDURE GET-STATETAX


!-----------------------------------------------------------------------
! Function:    get-ben-prog                                            -
! Description: Get Benefit Program (ben program that is inserted       -
!              (usually defaulted paygroup) when emplid is hired.      -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-ben-prog
#debugd show '...get-ben-prog'

        let $BENEFIT_PROGRAM = ' ' 
        
BEGIN-SELECT
BPP1.BENEFIT_PROGRAM

        LET $BENEFIT_PROGRAM = &BPP1.BENEFIT_PROGRAM

FROM PS_BEN_PROG_PARTIC BPP1
WHERE BPP1.EMPLID         = &J1.EMPLID
  AND BPP1.EMPL_RCD       = &J1.EMPL_RCD
  AND BPP1.COBRA_EVENT_ID = 0                  
  AND BPP1.EFFDT          = (SELECT MAX(BPP2.EFFDT) FROM PS_BEN_PROG_PARTIC BPP2
                           WHERE BPP2.EMPLID          = BPP1.EMPLID
                             AND BPP2.EMPL_RCD        = BPP1.EMPL_RCD
                             AND BPP2.COBRA_EVENT_ID  = 0
                             AND BPP2.EFFDT          <= &J1.EFFDT)
END-SELECT

end-procedure get-ben-prog


!START - UNIVERS - 446670 - 08/18/2010
!-----------------------------------------------------------------------
! Function:    get-gex-emplid                                          -
! Description: Get Giant Eagles 7 digit emplid                         -
! Called By:   job-file, pre-dep-file                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-gex-emplid
#debugd show '...get-gex-emplid'

        let $GEX-EMPLID = ' '
        
BEGIN-SELECT
GEX.EMPLID

        LET $GEX-EMPLID = &GEX.EMPLID

FROM PS_GEX_EMPLID_MAPP GEX
WHERE GEX.SSN      = $EMPLID
  AND GEX.EMPL_RCD = $EMPL_RCD
END-SELECT

end-procedure get-gex-emplid
!-----------------------------------------------------------------------
! Function:    get-average-hours-worked                                -
! Description: Get Giant Eagles Average hours worked                   -
! Called By:   job-file, pre-dep-file                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-average-hours-worked
#debugd show '...get-average-hours-worked'

        
BEGIN-SELECT
MIN(PAY_END_DT) &MIN_PAY_END_DT
MAX(PAY_END_DT) &MAX_PAY_END_DT

FROM PS_PAY_CALENDAR 
where substr(run_id,1,2) = to_char(sysdate,'YY')
END-SELECT
        
BEGIN-SELECT
COUNT(PAYCHECK_NBR) &COUNT_PAYS

FROM PS_PAY_CHECK AVGHRS
WHERE AVGHRS.EMPLID      = $EMPLID
  AND AVGHRS.EMPL_RCD    = $EMPL_RCD
  and AVGHRS.PAY_END_DT BETWEEN &MIN_PAY_END_DT AND &MAX_PAY_END_DT
END-SELECT
        
BEGIN-SELECT
SUM(J.HRS_YTD) &J.HRS_YTD

  if &COUNT_PAYS > 0
    let #avg_weekly_hrs_worked = &J.HRS_YTD / &COUNT_PAYS
    multiply 1 times #avg_weekly_hrs_worked round=2
    let $AVG_HOURS          = #avg_weekly_hrs_worked       
  end-if 
FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = $EMPLID
AND    J.EMPL_RCD          = $EMPL_RCD
AND    J.BALANCE_ID        = 'CY'
AND    J.BALANCE_YEAR      = to_char(sysdate,'YYYY')
AND    J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
       AND    EMPL_RCD     = J.EMPL_RCD
       AND    COMPANY      = J.COMPANY
       AND    BALANCE_ID   = J.BALANCE_ID
       AND    BALANCE_YEAR = J.BALANCE_YEAR
       AND    SPCL_BALANCE = J.SPCL_BALANCE
       AND    ERNCD        = J.ERNCD)
AND    J.ERNCD             = 'TOT'

END-SELECT

end-procedure get-average-hours-worked
!-----------------------------------------------------------------------
! Function:    get-current-pay-deductions                                -
! Description: Get Giant Eagles pay deductions                         -
! Called By:   job-file, pre-dep-file                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-current-pay-deductions

Begin-Select
DD.DED_MTD

  let $MONTH_DEDUCT = &DD.DED_MTD
  do get-current-pay-deductions-weekly

FROM PS_DEDUCTION_BAL DD 
WHERE DD.DEDCD in ('MARSH1','MARSH2','MARSH3','SB1529','SB2529','5TRUST','5NEWYK','10UMUN','5MILLB','8MILLB')
AND DD.BALANCE_YEAR = to_char(sysdate,'YYYY')
AND DD.BALANCE_QTR = (SELECT MAX(D.BALANCE_QTR) FROM PS_DEDUCTION_BAL D 
			WHERE DD.EMPLID = D.EMPLID 
			AND DD.COMPANY = D.COMPANY 
			AND DD.BALANCE_YEAR = D.BALANCE_YEAR )
AND DD.BALANCE_PERIOD = (SELECT MAX(E.BALANCE_PERIOD) FROM PS_DEDUCTION_BAL E 
			WHERE DD.EMPLID = E.EMPLID 
			AND DD.COMPANY = E.COMPANY 
			AND DD.BALANCE_YEAR = E.BALANCE_YEAR 
			AND DD.BALANCE_QTR = E.BALANCE_QTR)
AND DD.EMPLID = $Emplid
AND DD.COMPANY = $Company
End-Select
end-procedure
!*********************************************************************
begin-procedure get-current-pay-deductions-weekly
!  Locate existing Assessment Deduction.
!*********************************************************************
#debug9 Show 'get-current-pay-deductions-weekly'
begin-select 

sum(gen.ded_addl_amt)

   let $WEEK_DEDUCT = &gen.ded_addl_amt

FROM ps_genl_deduction gen
WHERE gen.emplid    = $emplid
  and gen.company   = $company                        
  and  gen.DEDCD in ('MARSH1','MARSH2','MARSH3','SB1529','SB2529','5TRUST','5NEWYK','10UMUN','5MILLB','8MILLB')
  and gen.effdt     = 
         (select max(gen1.effdt) 
          FROM PS_GENL_DEDUCTION gen1
          WHERE gen1.emplid    = gen.emplid
            and gen1.company   = gen.company             
            and gen1.dedcd     = gen.dedcd
            and gen1.effdt     < $AsOfDate)
  and gen.deduction_end_dt is null
  
end-select
end-procedure get-current-pay-deductions-weekly



!-----------------------------------------------------------------------
! Function:    get-benefit-service-date                                -
! Description: Get Giant Eagles Benefits Service dates                 -
! Called By:   job-file, pre-dep-file                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-benefit-service-date
!********************************************************************

Begin-Select

PD.SERVICE_DT

    let $eben_service_dt = &PD.SERVICE_DT

FROM ps_per_org_asgn PD		
Where PD.Emplid = $Emplid 
and PD.PER_ORG = 'EMP'


End-Select

end-procedure

!-----------------------------------------------------------------------
! Function:    write-header-job-file                                   -
! Description: Write header record for output file, {job_file}         -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-header-job-file
  
        write 3 from    $Quote 'NATIONAL_ID        '  $Quote $Comma
                        $Quote 'NAME               '  $Quote $Comma
                        $Quote 'LAST_NAME          '  $Quote $Comma
                        $Quote 'MIDDLE_NAME        '  $Quote $Comma
                        $Quote 'FIRST_NAME         '  $Quote $Comma
                        $Quote 'BIRTHDATE          '  $Quote $Comma
                        $Quote 'ADDRESS1           '  $Quote $Comma
                        $Quote 'ADDRESS2           '  $Quote $Comma
                        $Quote 'CITY               '  $Quote $Comma
                        $Quote 'STATE              '  $Quote $Comma
                        $Quote 'POSTAL             '  $Quote $Comma
                        $Quote 'PHONE              '  $Quote $Comma
                        $Quote 'SEX                '  $Quote $Comma
                        $Quote 'MAR_STATUS         '  $Quote $Comma
                        $Quote 'EMPLID             '  $Quote $Comma
                        $Quote 'EMPL_RCD           '  $Quote $Comma
                        $Quote 'LAST_HIRE_DT       '  $Quote $Comma
                        $Quote 'JOBCODE            '  $Quote $Comma
                        $Quote 'DESCR              '  $Quote $Comma
                        $Quote 'DEPTID             '  $Quote $Comma
                        $Quote 'EMPL_TYPE          '  $Quote $Comma
                        $Quote 'FULL_PART_TIME     '  $Quote $Comma
                        $Quote 'STD_HOURS          '  $Quote $Comma
                        $Quote 'ANNUAL_RT          '  $Quote $Comma
                        $Quote '52                 '  $Quote $Comma
                        $Quote 'PAY_FREQUENCY      '  $Quote $Comma
                        $Quote 'FWT_MAR_STATUS     '  $Quote $Comma
                        $Quote 'FWT_ALLOWANCES     '  $Quote $Comma
                        $Quote 'SWT_MAR_STATUS     '  $Quote $Comma
                        $Quote 'SWT_ALLOWANCES     '  $Quote $Comma
                        $Quote 'COMPANY            '  $Quote $Comma
                        $Quote 'PAYGROUP           '  $Quote $Comma
                        $Quote 'EMPL_CLASS         '  $Quote $Comma
                        $Quote 'REG_TEMP           '  $Quote $Comma
                        $Quote 'EMPL_STATUS        '  $Quote $Comma
                        $Quote 'UNION_CD           '  $Quote $Comma
                        $Quote 'OFFICER_CD         '  $Quote $Comma
                        $Quote 'ELIG_CONFIG1       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG2       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG3       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG4       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG5       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG6       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG7       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG8       '  $Quote $Comma
                        $Quote 'ELIG_CONFIG9       '  $Quote $Comma  
                        $Quote 'ANNL_BENEF_BASE_RT '  $Quote $Comma
                        $Quote 'LOCATION           '  $Quote $Comma
                        $Quote 'BENEFIT_PROGRAM    '  $Quote $Comma
                        $Quote 'AVERAGE HOURS      '  $Quote $Comma
                        $Quote 'EBENE SERVICE DT   '  $Quote $Comma
                        $Quote 'MONTHLY DEDUCTIONS '  $Quote $Comma
                        $Quote 'WEEKLY DEDUCTIONS  '  $Quote
                        
end-procedure !write-header-job-file

                                              
!-----------------------------------------------------------------------
! Function:    write-row-job-file                                      -
! Description: Write Data to output file, {job_file}                   -
! Called By:   job-file                                                -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-row-job-file
 
        write 3 from    $Quote $NATIONAL_ID        $Quote $Comma
                        $Quote $NAME               $Quote $Comma
                        $Quote $LAST_NAME          $Quote $Comma
                        $Quote $MIDDLE_NAME        $Quote $Comma
                        $Quote $FIRST_NAME         $Quote $Comma
                        $Quote $BIRTHDATE          $Quote $Comma
                        $Quote $ADDRESS1           $Quote $Comma
                        $Quote $ADDRESS2           $Quote $Comma
                        $Quote $CITY               $Quote $Comma
                        $Quote $STATE              $Quote $Comma
                        $Quote $POSTAL             $Quote $Comma
                        $Quote $PHONE              $Quote $Comma
                        $Quote $SEX                $Quote $Comma
                        $Quote $MAR_STATUS         $Quote $Comma
                        $Quote $GEX-EMPLID         $Quote $Comma       !UNIVERS - 08/18/2010 - use GE's 7-digit emplid
                        $Quote $EMPL_RCD           $Quote $Comma
                        $Quote $LAST_HIRE_DT       $Quote $Comma       !UNIVERS - 08/18/2010 - replace ORIG_HIRE_DT
                        $Quote $JOBCODE            $Quote $Comma
                        $Quote $DESCR              $Quote $Comma
                        $Quote $DEPTID             $Quote $Comma
                        $Quote $EMPL_TYPE          $Quote $Comma
                        $Quote $FULL_PART_TIME     $Quote $Comma
                        $Quote $STD_HOURS          $Quote $Comma
                        $Quote $ANNUAL_RT          $Quote $Comma
                        $Quote $52                 $Quote $Comma
                        $Quote $PAY_FREQUENCY      $Quote $Comma
                        $Quote $FWT_MAR_STATUS     $Quote $Comma
                        $Quote $FWT_ALLOWANCES     $Quote $Comma
                        $Quote $SWT_MAR_STATUS     $Quote $Comma
                        $Quote $SWT_ALLOWANCES     $Quote $Comma
                        $Quote $COMPANY            $Quote $Comma
                        $Quote $PAYGROUP           $Quote $Comma
                        $Quote $EMPL_CLASS         $Quote $Comma
                        $Quote $REG_TEMP           $Quote $Comma
                        $Quote $EMPL_STATUS        $Quote $Comma
                        $Quote $UNION_CD           $Quote $Comma
                        $Quote $OFFICER_CD         $Quote $Comma
                        $Quote $ELIG_CONFIG1       $Quote $Comma
                        $Quote $ELIG_CONFIG2       $Quote $Comma
                        $Quote $ELIG_CONFIG3       $Quote $Comma
                        $Quote $ELIG_CONFIG4       $Quote $Comma
                        $Quote $ELIG_CONFIG5       $Quote $Comma
                        $Quote $ELIG_CONFIG6       $Quote $Comma
                        $Quote $ELIG_CONFIG7       $Quote $Comma
                        $Quote $ELIG_CONFIG8       $Quote $Comma
                        $Quote $ELIG_CONFIG9       $Quote $Comma
                        $Quote $ANNL_BENEF_BASE_RT $Quote $Comma
                        $Quote $LOCATION           $Quote $Comma
                        $Quote $BENEFIT_PROGRAM    $Quote $Comma
                        $Quote $AVG_HOURS          $Quote $Comma
                        $Quote $EBEN_SERVICE_DT    $Quote $Comma
                        $Quote $MONTH_DEDUCT       $Quote $Comma
                        $Quote $WEEK_DEDUCT        $Quote

end-procedure !write-row-job-file


!-----------------------------------------------------------------------
! Function:    pre_dep_file                                            -
! Description: Process Pre-dependent Data and write it out             -
! Called By:   Report                                                  -
! Calls:       write-row-pre-dep                                       -
!              GET-GEX-EMPLID                                          -
!              GET-PERSNID-DEP                                         -
!-----------------------------------------------------------------------
begin-procedure pre-dep-file
#debugd show 'pre-dep-file'

  do write-header-pre-dep
  
begin-select
DB.EMPLID 
DB.DEPENDENT_BENEF 
DB.NAME 
DB.RELATIONSHIP 
DB.DEP_BENEF_TYPE 
DB.MAR_STATUS 
DB.SEX 
DB.BIRTHDATE 
DB.STUDENT 
DB.DISABLED 
DB.STUDENT_STATUS_DT 
DB.SMOKER
DB.LAST_NAME      
DB.FIRST_NAME     
DB.MIDDLE_NAME      
PE.EMPL_RCD

        let $EMPLID              = &DB.EMPLID              
        let $EMPL_RCD            = &PE.EMPL_RCD
        let $DEPENDENT_BENEF     = &DB.DEPENDENT_BENEF     
        let $NAME                = &DB.NAME                
        let $RELATIONSHIP        = &DB.RELATIONSHIP        
        let $DEP_BENEF_TYPE      = &DB.DEP_BENEF_TYPE      
        let $MAR_STATUS          = &DB.MAR_STATUS          
        let $SEX                 = &DB.SEX                 
        let $BIRTHDATE           = &DB.BIRTHDATE           
        let $STUDENT             = &DB.STUDENT             
        let $DISABLED            = &DB.DISABLED            
        let $STUDENT_STATUS_DT   = &DB.STUDENT_STATUS_DT   
        let $SMOKER              = &DB.SMOKER  
        let $LAST_NAME           = &DB.LAST_NAME         
        let $FIRST_NAME          = &DB.FIRST_NAME        
        let $MIDDLE_NAME         = &DB.MIDDLE_NAME  
                              
        DO GET-GEX-EMPLID
        DO GET-PERSNID-DEP     
        DO WRITE-ROW-PRE-DEP

FROM PS_DEPENDENT_BENEF DB,
     PS_EMPLOYEES       PE
WHERE DB.EMPLID = PE.EMPLID
ORDER BY PE.EMPLID
end-select

end-procedure pre-dep-file


!-----------------------------------------------------------------------
! Function:    get-persnid-dep                                         -
! Description: Get persnid information                                 -
! Called By:   pre-dep-file                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure get-persnid-dep
#debugd show '...get-persnid-dep'

        let $NATIONAL_ID = ' '
        
begin-select
DBN.NATIONAL_ID 

        let $NATIONAL_ID = &DBN.NATIONAL_ID  

FROM PS_DEP_BENEF_NID DBN
WHERE DBN.EMPLID          = &DB.EMPLID 
  AND DBN.DEPENDENT_BENEF = &DB.DEPENDENT_BENEF 
end-select

end-procedure get-persnid-dep


!-----------------------------------------------------------------------
! Function:    write-header-pre-dep                                    -
! Description: Write header record for output file, {pre_dep_file}     -
! Called By:   pre-dep-file                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-header-pre-dep
  
        write 5 from    $Quote 'EMPLID             ' $Quote $Comma
                        $Quote 'DEPENDENT_BENEF    ' $Quote $Comma
                        $Quote 'NAME               ' $Quote $Comma
                        $Quote 'LAST_NAME          ' $Quote $Comma
                        $Quote 'FIRST_NAME         ' $Quote $Comma  
                        $Quote 'MIDDLE_NAME        ' $Quote $Comma
                        $Quote 'RELATIONSHIP       ' $Quote $Comma
                        $Quote 'DEP_BENEF_TYPE     ' $Quote $Comma
                        $Quote 'MAR_STATUS         ' $Quote $Comma
                        $Quote 'SEX                ' $Quote $Comma
                        $Quote 'BIRTHDATE          ' $Quote $Comma
                        $Quote 'STUDENT            ' $Quote $Comma
                        $Quote 'DISABLED           ' $Quote $Comma
                        $Quote 'STUDENT_STATUS_DT  ' $Quote $Comma
                        $Quote 'NATIONAL_ID        ' $Quote $Comma
                        $Quote 'SMOKER             ' $Quote 
   
end-procedure !write-header-pre-dep

                                              
!-----------------------------------------------------------------------
! Function:    write-row-pre-dep                                       -
! Description: Write Data to output file, {pre_dep_file}               -
! Called By:   pre-dep-file                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-row-pre-dep
 
        write 5 from    $Quote $GEX-EMPLID          $Quote $Comma          !UNIVERS - 446670 - use GE's 7-digit emplid
                        $Quote $DEPENDENT_BENEF     $Quote $Comma
                        $Quote $NAME                $Quote $Comma
                        $Quote $LAST_NAME           $Quote $Comma
                        $Quote $FIRST_NAME          $Quote $Comma  
                        $Quote $MIDDLE_NAME         $Quote $Comma
                        $Quote $RELATIONSHIP        $Quote $Comma
                        $Quote $DEP_BENEF_TYPE      $Quote $Comma
                        $Quote $MAR_STATUS          $Quote $Comma
                        $Quote $SEX                 $Quote $Comma
                        $Quote $BIRTHDATE           $Quote $Comma
                        $Quote $STUDENT             $Quote $Comma
                        $Quote $DISABLED            $Quote $Comma
                        $Quote $STUDENT_STATUS_DT   $Quote $Comma
                        $Quote $NATIONAL_ID         $Quote $Comma
                        $Quote $SMOKER              $Quote  
                                                   
end-procedure !write-row-pre-dep


!-----------------------------------------------------------------------
! Function:    cur_benprog_file                                        -
! Description: Process Current Benefit Program Data and write it out   -
! Called By:   Report                                                  -
! Calls:       write-row-pre-ded                                       -
!-----------------------------------------------------------------------
begin-procedure cur_benprog_file
#debugd show 'cur_benprog_file'

  do write-header-cur-benprog
  
begin-select
PNB.NATIONAL_ID 
BPP.EMPLID 
BPP.BENEFIT_PROGRAM 

        let $NATIONAL_ID     = &PNB.NATIONAL_ID 
        let $EMPLID          = &BPP.EMPLID 
        let $BENEFIT_PROGRAM = &BPP.BENEFIT_PROGRAM

        DO WRITE-ROW-CUR-BENPROG

FROM PS_BEN_PROG_PARTIC BPP,
     PS_PERS_NID PNB,
     PS_EMPLOYEES PSE
WHERE BPP.EMPLID      = PNB.EMPLID 
  AND BPP.EMPLID      = PSE.EMPLID
  AND BPP.EFFDT       = (SELECT MAX(BPP_ED.EFFDT) FROM PS_BEN_PROG_PARTIC BPP_ED 
                         WHERE BPP.EMPLID         = BPP_ED.EMPLID 
                           AND BPP.EMPL_RCD       = BPP_ED.EMPL_RCD 
                           AND BPP.COBRA_EVENT_ID = BPP_ED.COBRA_EVENT_ID 
                           AND BPP_ED.EFFDT      <= $ASOFTODAY) 
  AND PNB.PRIMARY_NID = 'Y' 
ORDER BY BPP.EMPLID
end-select

end-procedure cur_benprog_file


!-----------------------------------------------------------------------
! Function:    write-header-cur-benprog                                -
! Description: Write header record for output file, {cur_benprog_file} -
! Called By:   cur_benprog_file                                        -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-header-cur-benprog
  
        write 4 from    $Quote 'NATIONAL_ID     ' $Quote $Comma
                        $Quote 'EMPLID          ' $Quote $Comma
                        $Quote 'BENEFIT_PROGRAM ' $Quote                    
   
end-procedure !write-header-cur-benprog
                                              

!-----------------------------------------------------------------------
! Function:    write-row-cur-benprog                                   -
! Description: Write Data to output file, {cur_benprog_file}           -
! Called By:   cur_benprog_file                                        -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-row-cur-benprog
 
        write 4 from    $Quote $NATIONAL_ID      $Quote $Comma
                        $Quote $EMPLID           $Quote $Comma
                        $Quote $BENEFIT_PROGRAM  $Quote  

end-procedure !write-row-cur-benprog


!The code from here on came from bendeps.sqc which became obsolete in 9.0
!********************************************
begin-procedure Insert-Dependent-Records
!********************************************
#debugd show 'Insert-Dependent-Records'
! Insert-Dependent-Records
! Control procedure for inserting all dependent records.

  do Insert-Health-Dependent-Records
  do Insert-Life-Beneficiary-Records
  do Insert-Savings-Beneficiary-Records

end-procedure


!********************************************
begin-procedure Insert-Health-Dependent-Records
!********************************************
! Insert-Health-Dependent-Records
! For each employee health record in BEN_PLAN_DATA,
! insert 1 row for each dependent covered under the empl record.
#debugd show '...Insert-Health-Dependent-Records'

begin-select
H.EMPLID
H.COBRA_EVENT_ID
H.EMPL_RCD
D.DEPENDENT_BENEF
H.PLAN_TYPE
H.PLAN_TYPE_DESCR
H.EFFDT &DepEffdt
H.BENEFIT_PLAN
H.BEN_PLAN_DESCR
H.SETID
H.VENDOR_ID
H.CBP_VENDOR_NAME
H.GROUP_NBR
H.POLICY_NBR
H.COVERAGE_ELECT
H.COVRG_CD
H.COVRG_CODE_DESCR
H.COVERAGE_BEGIN_DT
H.COVERAGE_END_DT
H.DEDUCTION_BEGIN_DT
H.DEDUCTION_END_DT
H.ANNUAL_PLEDGE
H.BENEF_PCT
H.FLAT_AMOUNT
H.EXCESS
H.CONTINGENT
D.HLTH_PROVIDER_ID
D.PREVIOUSLY_SEEN

  move &H.emplid             to $current_emplid
  move &H.cobra_event_id     to #cobra_event_id
  move &H.EMPL_RCD           to #current_empl_rcd
  move &D.dependent_benef    to $dependent_benef
  move &H.plan_type          to $plan_type
  move &H.plan_type_descr    to $plan_type_descr
  move &DepEffdt             to $effdt
  move &H.benefit_plan       to $benefit_plan
  move &H.ben_plan_descr     to $BEN_PLAN_descr
  move &H.setid              to $setid
  move &H.vendor_id          to $provider
  move &H.cbp_vendor_name    to $provider_descr
  move &H.GROUP_NBR          to $GROUP_NBR
  move &H.POLICY_NBR         to $POLICY_NBR
  move &H.coverage_elect     to $coverage_elect
  move &H.covrg_cd           to $covrg_cd
  move &H.covrg_code_descr   to $covrg_code_descr
  move &H.coverage_begin_dt  to $coverage_begin_dt
  move &H.coverage_end_dt    to $coverage_end_dt
  move &H.deduction_begin_dt to $deduction_begin_dt
  move &H.deduction_end_dt   to $deduction_end_dt
  move &H.annual_pledge      to #annual_pledge
  move &H.benef_pct          to #benef_pct
  move &H.flat_amount        to #flat_amount
  move &H.excess             to $excess
  move &H.contingent         to $contingent
  move &D.hlth_provider_id   to $hlth_provider_id
  move &D.previously_seen    to $previously_seen

  do Get-Dependent-Enroll-Date
  do Insert-Plan-Record
  do Clear-Local-Ben-Data

FROM  PS_CBP_BENPLN_DATA   H,
      PS_HEALTH_DEPENDNT D
where H.EMPLID          = D.EMPLID
  and H.COBRA_EVENT_ID  = D.COBRA_EVENT_ID
  and H.EMPL_RCD        = D.EMPL_RCD
  and H.EFFDT           = D.EFFDT
  and H.PLAN_TYPE       = D.PLAN_TYPE
  and H.PLAN_TYPE       LIKE '1%'
  and H.DEPENDENT_BENEF = ' '
end-select
end-procedure


!********************************************
begin-procedure Insert-Life-Beneficiary-Records
!********************************************
! Insert-Life-Beneficiary-Records
! For each employee life/ADD record in BEN_PLAN_DATA,
! insert 1 row for each beneficiary record under the empl record.
#debugd show '...Insert-Life-Beneficiary-Records'

let $sql-statement = 'BEN100.SQR,Insert-Life-Beneficiary-Records,INSERT,PS_CBP_BENPLN_DATA'
begin-select
H1.EMPLID
H1.COBRA_EVENT_ID,
H1.EMPL_RCD,
L.DEPENDENT_BENEF,
H1.PLAN_TYPE,
H1.PLAN_TYPE_DESCR,
H1.EFFDT,
H1.BENEFIT_PLAN,
H1.BEN_PLAN_DESCR,
H1.SETID,
H1.VENDOR_ID,
H1.CBP_VENDOR_NAME,
H1.GROUP_NBR,
H1.POLICY_NBR,
H1.COVERAGE_ELECT,
H1.COVRG_CD,
H1.COVRG_CODE_DESCR,
H1.COVERAGE_BEGIN_DT,
H1.COVERAGE_END_DT,
H1.DEDUCTION_BEGIN_DT,
H1.DEDUCTION_END_DT,
H1.ENROLLMENT_DT,
H1.ANNUAL_PLEDGE,
H1.FLAT_DED_AMT,
H1.PCT_GROSS,
H1.FLAT_DED_AMT_ATAX,
H1.PCT_GROSS_ATAX,
H1.VACN_HOURS,
H1.VACN_BUY_FLAT_AMT,
H1.VACN_SELL_FLAT_AMT,
L.BENEF_PCT,
L.FLAT_AMOUNT,
L.EXCESS,
L.CONTINGENT

  move &H1.emplid             to $current_emplid
  move &H1.cobra_event_id     to #cobra_event_id
  move &H1.EMPL_RCD           to #current_empl_rcd
  move &L.dependent_benef     to $dependent_benef
  move &H1.plan_type          to $plan_type
  move &H1.plan_type_descr    to $plan_type_descr
  move &H1.effdt              to $effdt
  move &H1.benefit_plan       to $benefit_plan
  move &H1.BEN_PLAN_descr     to $BEN_PLAN_descr
  move &H1.setid              to $setid
  move &H1.vendor_id          to $provider
  move &H1.cbp_vendor_name    to $provider_descr
  move &H1.GROUP_NBR          to $GROUP_NBR
  move &H1.POLICY_NBR         to $POLICY_NBR
  move &H1.coverage_elect     to $coverage_elect
  move &H1.covrg_cd           to $covrg_cd
  move &H1.covrg_code_descr   to $covrg_code_descr
  move &H1.coverage_begin_dt  to $coverage_begin_dt
  move &H1.coverage_end_dt    to $coverage_end_dt
  move &H1.deduction_begin_dt to $deduction_begin_dt
  move &H1.deduction_end_dt   to $deduction_end_dt
  move &H1.annual_pledge      to #annual_pledge
  move &L.benef_pct           to #benef_pct
  move &L.flat_amount         to #flat_amount
  move &L.excess              to $excess
  move &L.contingent          to $contingent

  do Insert-Plan-Record
  do Clear-Local-Ben-Data

FROM  PS_CBP_BENPLN_DATA   H1,
      PS_LIFE_ADD_BENEFC L
where H1.EMPLID    = L.EMPLID
  and H1.EMPL_RCD  = L.EMPL_RCD
  and H1.EFFDT     = L.EFFDT
  and H1.PLAN_TYPE = L.PLAN_TYPE
  and H1.PLAN_TYPE LIKE '2%'
  and H1.DEPENDENT_BENEF = ' '
end-select
end-procedure

!********************************************
begin-procedure Insert-Savings-Beneficiary-Records
!********************************************
! Insert-Savings-Beneficiary-Records
! For each employee savings record in BEN_PLAN_DATA,
! insert 1 row for each beneficiary record under the empl record.
#debugd show '...Insert-Savings-Beneficiary-Records'

let $sql-statement = 'BEN100.SQR,Insert-Savings-Beneficiary-Records,INSERT,PS_CBP_BENPLN_DATA'
begin-select
HS.EMPLID,
HS.COBRA_EVENT_ID,
HS.EMPL_RCD,
S.DEPENDENT_BENEF,
HS.PLAN_TYPE,
HS.PLAN_TYPE_DESCR,
HS.EFFDT,
HS.BENEFIT_PLAN,
HS.BEN_PLAN_DESCR,
HS.SETID
HS.VENDOR_ID,
HS.CBP_VENDOR_NAME,
HS.GROUP_NBR,
HS.POLICY_NBR,
HS.COVERAGE_ELECT,
HS.COVRG_CD,
HS.COVRG_CODE_DESCR,
HS.COVERAGE_END_DT,
HS.DEDUCTION_BEGIN_DT,
HS.DEDUCTION_END_DT,
HS.COVERAGE_BEGIN_DT,
HS.ANNUAL_PLEDGE,
S.BENEF_PCT,
HS.FLAT_AMOUNT,
HS.EXCESS,
HS.CONTINGENT

  move &Hs.emplid             to $current_emplid
  move &Hs.cobra_event_id     to #cobra_event_id
  move &Hs.EMPL_RCD           to #current_empl_rcd
  move &S.dependent_benef     to $dependent_benef
  move &Hs.plan_type          to $plan_type
  move &Hs.plan_type_descr    to $plan_type_descr
  move &Hs.effdt              to $effdt
  move &Hs.benefit_plan       to $benefit_plan
  move &Hs.ben_plan_descr     to $BEN_PLAN_descr
  move &Hs.setid              to $setid
  move &Hs.vendor_id          to $provider
  move &Hs.cbp_vendor_name    to $provider_descr
  move &Hs.GROUP_NBR          to $GROUP_NBR
  move &Hs.POLICY_NBR         to $POLICY_NBR
  move &Hs.coverage_elect     to $coverage_elect
  move &Hs.covrg_cd           to $covrg_cd
  move &Hs.covrg_code_descr   to $covrg_code_descr
  move &H1.coverage_begin_dt  to $coverage_begin_dt
  move &Hs.coverage_end_dt    to $coverage_end_dt
  move &Hs.deduction_begin_dt to $deduction_begin_dt
  move &Hs.deduction_end_dt   to $deduction_end_dt
  move &Hs.annual_pledge      to #annual_pledge
  move &s.benef_pct           to #benef_pct
  move &Hs.flat_amount        to #flat_amount
  move &Hs.excess             to $excess
  move &Hs.contingent         to $contingent

  do Insert-Plan-Record
  do Clear-Local-Ben-Data

FROM  PS_CBP_BENPLN_DATA   HS,
      PS_SAVINGS_BENEFIC S
where HS.EMPLID    = S.EMPLID
  and HS.EMPL_RCD  = S.EMPL_RCD
  and HS.EFFDT     = S.EFFDT
  and HS.PLAN_TYPE = S.PLAN_TYPE
  and HS.DEPENDENT_BENEF = ' '
  and HS.PLAN_TYPE LIKE '4%'
end-select
end-procedure


!********************************************
begin-procedure Get-Dependent-Enroll-Date
!********************************************
! Get-Dependent-Enroll-Date
! Determines the original enrollment date for each covered dependent
! (health plans only). This procedure reads all the empl health records
! for a plan_type. If the benefit plan changes, then stop processing.
! If the benefit plan is the same, then check if the dependent is
! covered under that history record.
#debugd show '......Get-Dependent-Enroll-Data'

  move &DepEffdt to $enrollment_dt
begin-select
H5.EMPLID,H5.BENEFIT_PLAN,H5.PLAN_TYPE,
H5.EFFDT
  move 'NO' to $found
  move &H5.effdt to $currenteffdt
  if (&H5.benefit_plan = $benefit_plan)
    do Get-Previous-Enroll-Date
    if $found = 'YES'
      move &H5.effdt to $enrollment_dt
    else
      EXIT-SELECT
    end-if
  else
    EXIT-SELECT
  end-if
from PS_HEALTH_BENEFIT H5
where H5.EMPLID          = $current_emplid
  and H5.COBRA_EVENT_ID  = #cobra_event_id
  and H5.EMPL_RCD        = #current_empl_rcd
  and H5.PLAN_TYPE       = $plan_type
  and H5.EFFDT           < &DepEffdt
order by H5.EFFDT DESC
end-select
end-procedure


!********************************************
begin-procedure Get-Previous-Enroll-Date
!********************************************
! Get-Previous-Enroll-Date
! Updates $enrollment_dt if the current dependent is covered
! by the health record as of $currenteffdt.
#debugd show '.........Get-Previous-Enroll-Data'

begin-select
H4.EMPLID,H4.EFFDT,H4.PLAN_TYPE
! move &H4.effdt to $enrollment_dt
  move 'YES' to $found
from PS_HEALTH_DEPENDNT H4
where H4.EMPLID          = $current_emplid
  and H4.COBRA_EVENT_ID  = #cobra_event_id
  and H4.EMPL_RCD        = #current_empl_rcd
  and H4.PLAN_TYPE       = $plan_type
  and H4.DEPENDENT_BENEF = $dependent_benef
  and H4.EFFDT           = $currenteffdt
end-select
end-procedure



!-----------------------------------------------------------------------
! SQC Files for called procedures                                      -
!-----------------------------------------------------------------------
! required if you use AsOfDate
!#include 'hrrnctl1.sqc'  !Get run control parameter values
!#include 'hrgetval.sqc'  !Get values mask routines
!#include 'askaod.sqc'    !From Thru Date input
#include 'stdapi.sqc'
#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'datemath.sqc'  !Routines to calculate with dates
!#include 'bendeps.sqc'  !routines to put dep recs in PS_BEN_PLAN_DATA
!                        !this sqc is obsolete with 9.0 - code incorporated
!                        !into the SQR.
! -------------------  END OF FILE   ---------------------------------
