!***********************************************************************
! GEXBN632: L880 Monthly Changes Report                                *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *        
! GEXBN632 : L880 Monthly Changes Report                               *
!                                                                      *        
! Narrative: In order to reduce the large number of questions from     *
!            Local 880 to Giant Eagle with regard to our Team Members’ *
!            eligibility for union pension and health/welfare, Giant   *
!            Eagle will provide Local 880 with a new report on a       *
!            monthly basis. The new report will capture changes to     *
!            employee data that may impact benefits eligibility. In    *
!            addition to changes in employee data, Giant Eagle will    *
!            also provide current union pension and health/welfare plan*
!            enrollment information for the Team Members written to the*
!            new report each month. Providing this information to the  *
!            union on a monthly basis will reduce back billing         *
!            situations as well.                                       *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                                                                      *  
! SQL Tables:           PS_JOB                                         *
!                       PS_PERSONAL_DATA                               *
!                       PS_BEN_PROG_PARTIC                             *
!			                  PS_JOBCODE_TBL				                         *
!			                  PS_PAY_CALENDAR				                         *	
!			                  PS_PERS_NID				                             *  	
!                       PS_EMPLOYMENT                                  *                      
!			                  PS_PAY_LINE				                             *  	 
!			                  PS_PAY_SPCL_EARNS			                         *
!                                                                      *
! Written by:           Vahini Katta                                   *       
!                                                                      *
! Normally Run:         Monthly                                        *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS      DATE            DESCRIPTION OF THE CHANGE              *
!***********************************************************************
! ISDVVXK       05/02/2011      Initial Development                    *
! GEXBN_848_P118801_01 2012-09-17 Vahini Katta                         *
! Corrected the run contol id field                                    *
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'

Begin-Report
#debug9 Show 'Begin-Report'

  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc
  
  show ' '
  display 'Start Run Time: ' noline
  show $AsofNow
  Do P100-Initialization
  Do Open-File
  Do Write_Header
 
  Do P160-Get-Pay-begin-dt
  Do P170-Get-Pay-end-dt
  
  Do Main-Process
  Do Close-File
  
  show ' '
  display 'End Run Time: ' noline
  show $AsofNow
  do Stdapi-Term
    
End-Report


!****************************************************************************
Begin-Procedure P100-Initialization
#debug9 Show 'P100-Initialization'
   
  Let $ReportID      = 'GEXBN632'
  Let $ReportTitle   = 'L880 Monthly Changes Report'
  Let $delim = ','

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle
  Show '$ReportDate  = ' $ReportDate
  Show '$ReportTime  = ' $ReportTime
    
  If $prcs_process_instance = ''
    Do P110-SQRW-Run-Controls
  Else
    Do P120-Process-Scheduler-Run-Controls
  End-if
End-Procedure

!****************************************************************************
Begin-Procedure P110-SQRW-Run-Controls
#debug9 Show 'P110-SQRW-Run-Controls'

  Do Ask-As-Of-Date
 
  Move 'E.BENEFIT_PROGRAM' to $BENEFIT_PROGRAM_Alias
  
  input $Ben_Program maxlen=100 type=char 'Enter the Benefit Program enclosed in quotes. Multiple Ben Program should be separated by commas'
  
  let $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA='E.BENEFIT_PROGRAM in ('||$Ben_Program||')'
  
  show '$Ben_Program :' $Ben_Program
  show '$GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA:' $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA
End-Procedure

!****************************************************************************
Begin-Procedure P120-Process-Scheduler-Run-Controls
#debug9 Show 'P120-Process-Scheduler-Run-Controls'
  Do GEXRCBN1-SELECT-PARAMETERS		
  Let $OprID                = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID          = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_GEXBN632_ROWS = 0
  Let $Include_Condition    = ''
  Let $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA_1 =''
  Let $GEXBN632_INCLUDE_BENEFIT_PRG_DISPLAY_CRITERIA = 'ALL'
   
  LET $BENEFIT_PROGRAM_Alias  = 'E.BENEFIT_PROGRAM'
  Let $AsOfDate = &GEX_RC_BEN.AsOfDate
  SHOW '&GEX_RC_BEN.AsOfDate: ' &GEX_RC_BEN.AsOfDate
  If ltrim(Rtrim(&GEX_RC_BEN.AsOfDate, ' '),' ') = ''
     Let $AsOfDate = $AsOfToday
     SHOW '$AsOfDate: ' $AsOfToday  
  End-If
  
Begin-Select
GEX_RC_GEXBN632.BENEFIT_PROGRAM

  Add 1 To #GEX_RC_GEXBN632_ROWS
  Let $Include_Condition =  '(' || $BENEFIT_PROGRAM_Alias || ' = '''  || &GEX_RC_GEXBN632.BENEFIT_PROGRAM ||  ''')'

  If #GEX_RC_GEXBN632_ROWS = 1
    Let  $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA = '(' || $Include_Condition
  Else
    Let  $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA =  $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA || ' Or '  || $Include_Condition
  End-If
  show '$GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA  :' $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA
 
From  PS_GEX_RC_GEXBN632  GEX_RC_GEXBN632
Where GEX_RC_GEXBN632.OPRID                         = [$OprID]
!GEXBN_848_P118801_01 2012-09-17 Vahini Katta Begins
!And   GEX_RC_GEXBN632.RUNCNTLID                    = [$Run_Cntl_ID]
And   GEX_RC_GEXBN632.RUN_CNTL_ID                   = [$Run_Cntl_ID]
!GEXBN_848_P118801_01 2012-09-17 Vahini Katta Ends
And   Rtrim(GEX_RC_GEXBN632.BENEFIT_PROGRAM, ' ')  != ' '
End-Select

  If #GEX_RC_GEXBN632_ROWS = 0
    Let $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA = $BENEFIT_PROGRAM_Alias     || ' = ' || $BENEFIT_PROGRAM_Alias                                                      
  Else
    Let $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA           = $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA || ')'
    Let $GEXBN632_INCLUDE_BENEFIT_PRG_DISPLAY_CRITERIA   = $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA 
  End-If
  show '$GEXBN632_INCLUDE_BENEFIT_PRG_DISPLAY_CRITERIA   :' $GEXBN632_INCLUDE_BENEFIT_PRG_DISPLAY_CRITERIA
End-Procedure

!**************************************************************************
Begin-Procedure Open-File
#debug9 Show 'P140-Open-File'
  #ifdef UNIX
   Let $File = '{OUTFILE}' || Lower($ReportID) || '.csv'
  #end-if
  #ifdef NT   
   LET $File = 'C:\TEMP\' || Lower($ReportID) || '.csv'  
  #end-if 
   OPEN $File as 1 
   for-writing
   record=1600    
   status = #Open_mem
   !show '$File  '   $File 
    
   if (#Open_mem <> 0)
      let $Error-Message = 'PROGRAM ABORTED - Problem opening file : ' || $File
      show $Error-Message
      STOP
   end-if
   
End-Procedure

!**************************************************************************

Begin-Procedure Write_Header
        
    Write 1 from 'BEN PGM'       $delim
                 'NAME'          $delim
                 'SSN'           $delim
                 'EFFDT'         $delim
                 'EFFSEQ'        $delim
                 'ACTION'        $delim
                 'ACTION REASON' $delim
                 'ACTION DATE'   $delim
                 'EMPL STATUS'   $delim
                 'DEPTID'        $delim
                 'TITLE'         $delim
                 'REG TEMP'      $delim
                 'UNION CODE'    $delim
                 'ELIG 2'        $delim
                 'SERVICE DATE'  $delim
                 'PLAN TYPE'     $delim
                 'COV ELECT'     $delim
                 'COV BEGIN DT'  $delim
                 'PLAN TYPE'     $delim
                 'COV ELECT'     $delim
                 'COV BEGIN DT'  $delim

End-Procedure

!**************************************************************************
Begin-Procedure P160-Get-Pay-begin-dt
Begin-Select DISTINCT 
pc.pay_begin_dt 

From   ps_pay_calendar pc
Where To_Char(pc.check_dt,'YYYYMM') = (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
                                          From   ps_pay_calendar
                                          Where  $AsOfDate  Between pay_begin_dt And pay_end_dt
                                          And    company  = pc.company
                                          And    paygroup = pc.paygroup
                                          And    pay_off_cycle_cal = 'N')
And    pc.pay_period = 1
And    pc.company  = 'GEI'
And    pc.paygroup = 'RET'
End-Select
End-Procedure  P160-Get-Pay-begin-dt

!*****************************************************************
Begin-Procedure P170-Get-Pay-end-dt
Begin-Select DISTINCT 
pc.pay_end_dt 
	
From   ps_pay_calendar pc
Where  To_Char(pc.check_dt,'YYYYMM') = (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
                                           From   ps_pay_calendar
                                           Where $AsOfDate  Between pay_begin_dt And pay_end_dt
                                           And    company  = pc.company
                                           And    paygroup = pc.paygroup
                                           And    pay_off_cycle_cal = 'N')    
And    pc.pay_period = (Select Max(pay_period) From   ps_pay_calendar
                          Where  To_Char(check_dt,'YYYYMM') = (Select To_Char(Add_Months(check_dt,-1),'YYYYMM')
                                                               From   ps_pay_calendar
                                                               Where  $AsOfDate Between pay_begin_dt And pay_end_dt
                                                               And    company  = pc.company
                                                               And    paygroup = pc.paygroup
                                                               And    pay_off_cycle_cal = 'N')
                          And    company  = pc.company
                          And    paygroup = pc.paygroup)
And    pc.company  = 'GEI'
And    pc.paygroup = 'RET'
End-Select
End-Procedure  P170-Get-Pay-end-dt
!******************************************************************************************

Begin-Procedure Main-Process 
!show 'Main-Process'	
 show '$GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA ' $GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA
 show '&pc.pay_begin_dt:' &pc.pay_begin_dt
 show '&pc.pay_end_dt  :' &pc.pay_end_dt
 Move 'N' to $Changed
 Move ''  to $Effdt
 Move ''  to $Curr_Effdt
 Move ' ' to $Curr_Effseq 
 Move ''  to $Curr_Action_Dt
 Move ' ' to $Curr_Empl_Status
 Move ' ' to $Curr_Reg_Temp
 Move ' ' to $Curr_Deptid
 Move ''  to $Cur_Service_Dt
 Move ' ' to $Curr_Emplid
 Move ' ' to $Name
Begin-Select 
E.BENEFIT_PROGRAM , 
D.NAME,  
A.EMPLID,
A.EMPL_RCD,
A.EFFDT,
A.EFFSEQ ,
A.ACTION,
A.ACTION_REASON,
A.ACTION_DT,
A.EMPL_STATUS,
A.DEPTID,
A.POSITION_NBR,
A.REG_TEMP,
A.UNION_CD,
A.ELIG_CONFIG2,
substr(A.ELIG_CONFIG2,4,1) &Curr_Byte4
B.SERVICE_DT,
A.JOBCODE
        
        Move &A.EFFDT        to $Effdt
        Move &A.DEPTID       to $Curr_Deptid
        Move &A.EMPLID       to $Curr_Emplid
        Move &A.ELIG_CONFIG2 to $Curr_Elig_Config2
        Move &Curr_Byte4     to $Curr_Byte4
        Move &A.POSITION_NBR to $Position_nbr
        
        Let $Name = translate(&D.NAME, ',',' ') 
        
        do Get-Health-Benefit
        do Get-Title
        
        Move &P.DESCR to $Curr_Title
        LET $Curr_Title=translate($Curr_Title, ',','') 
        
        Move 'EMPL_STATUS'       to  $FieldName
	      Move &A.EMPL_STATUS      to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to $Curr_Empl_Status
	      
	      Move 'REG_TEMP'       to  $FieldName
	      Move &A.REG_TEMP      to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to $Curr_Reg_Temp
	      	      
        if &A.EFFSEQ>0
           show 'Get-Prev-Effseq-Row'
           do Get-Prev-Effseq-Row
        else
           show 'Get-Prev-Effdt-Row'
           do Get-Prev-Effdt-Row
        end-if
        
        let $Curr_Effseq    = &A.EFFSEQ
        let $Curr_Effseq    = rpad( substr($Curr_Effseq,1,1),6,' ')
        let $Curr_Effdt     = edit(&A.EFFDT,'mm/dd/yyyy')
        let $Curr_Action_Dt = edit(&A.ACTION_DT,'mm/dd/yyyy')
        let $Cur_Service_Dt = edit(&B.SERVICE_DT,'mm/dd/yyyy')
        
        if &A.ACTION='HIR'
           do Write-Curr-Row
           write 1 from ' '
        end-if
        
        if $Changed='Y'
           do Write-Curr-Row
           do Write-Prev-Row
           write 1 from ' '
        end-if   
        
        
FROM PS_JOB A, 
     PS_EMPLOYMENT B,
     PS_PERSONAL_DATA D,
     PS_BEN_PROG_PARTIC E
WHERE   A.EFFDT = (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
                     WHERE A.EMPLID = A_ED.EMPLID
                       AND A.EMPL_RCD = A_ED.EMPL_RCD
                       AND A_ED.EFFDT <= $AsofDate)
    AND A.EFFSEQ = (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
                    WHERE A.EMPLID = A_ES.EMPLID
                      AND A.EMPL_RCD = A_ES.EMPL_RCD
                      AND A.EFFDT = A_ES.EFFDT)
    AND A.EMPLID = B.EMPLID
    AND A.EMPL_RCD = B.EMPL_RCD
    AND B.EMPLID = D.EMPLID
    AND B.EMPLID=E.EMPLID
    AND B.EMPL_RCD = E.EMPL_RCD
    AND E.EFFDT =  (SELECT MAX(EFFDT) FROM PS_BEN_PROG_PARTIC
                    WHERE E.EMPLID = EMPLID
                      AND E.EMPL_RCD = EMPL_RCD
                      AND E.COBRA_EVENT_ID = COBRA_EVENT_ID
                      AND EFFDT    <= $AsofDate)
    AND (A.ACTION_DT >= &pc.pay_begin_dt AND A.ACTION_DT <=&pc.pay_end_dt)
    AND [$GEXBN632_INCLUDE_BENEFIT_PRG_CRITERIA]
ORDER BY E.BENEFIT_PROGRAM , D.NAME    
End-Select	 
End-Procedure Main-Process	

!-----------------------------------------------------------------------
! Function:    Get-Prev-Effseq-Row                                     -
! Description: Get the Previous Effseq Row                             -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Prev-Effseq-Row
#debugd show '...Get-Prev-Effseq-Row'
  Move 'N' to $Changed
  Move ' ' to $Prev_Empl_Status
  Move ' ' to $Prev_Reg_Temp
  Move ' ' to $Prev_Effseq
  Move ''  to $Prev_Effdt
  Move ' ' to $Prev_Action
  Move ''  to $Prev_Action_Dt
  Move ' ' to $Prev_Emplid 
  Move ' ' to $Prev_Actn_Reason
  Move ' ' to $Prev_Deptid 
  Move ' ' to $Prev_Title 
  Move ' ' to $Prev_Union_cd 
  Move ' ' to $Prev_Elig_Config2
  Move ' ' to $Prev_Byte4
begin-select
PA.EMPLID,
PA.EMPL_RCD,
PA.EFFDT,
PA.EFFSEQ ,
PA.ACTION,
PA.ACTION_REASON,
PA.ACTION_DT,
PA.EMPL_STATUS,
PA.DEPTID,
PA.POSITION_NBR,
PA.REG_TEMP,
PA.UNION_CD,
PA.ELIG_CONFIG2,
substr(PA.ELIG_CONFIG2,4,1) &Prev_Byte4
PA.JOBCODE
  	
  Move &PA.ELIG_CONFIG2 to $Prev_Elig_Config2
  Move &Prev_Byte4      to $Prev_Byte4	
  show '$Prev_Byte4 :' $Prev_Byte4
  show '$Curr_Byte4 :' $Curr_Byte4
  
  if (&PA.DEPTID<>&A.DEPTID) OR 
     (&PA.JOBCODE<>&A.JOBCODE) OR 
     (&PA.REG_TEMP<>&A.REG_TEMP) OR 
     (&PA.EMPL_STATUS<>&A.EMPL_STATUS) OR 
     ($Prev_Byte4<>$Curr_Byte4) OR	
     (&PA.UNION_CD<>&A.UNION_CD)
      
      Move &PA.EFFDT        to $Effdt
      Move &PA.POSITION_NBR to $Position_nbr
      do Get-Title
     
     let $Prev_Effseq     = &PA.EFFSEQ
     let $Prev_Effseq     = rpad(substr($Prev_Effseq,1,1),6,' ')
     let $Prev_Effdt      = edit(&PA.EFFDT,'mm/dd/yyyy')
     let $Prev_Action_Dt  = edit(&PA.ACTION_DT,'mm/dd/yyyy')
          
        Move 'Y' to $Changed
        Move &PA.EMPLID        to $Prev_Emplid
        Move &PA.ACTION        to $Prev_Action
        Move &PA.ACTION_REASON to $Prev_Actn_Reason
        Move &PA.DEPTID        to $Prev_Deptid
        Move &P.DESCR          to $Prev_Title
        LET $Prev_Title=translate($Prev_Title, ',','') 
        Move &PA.UNION_CD      to $Prev_Union_cd
        Move &PA.ELIG_CONFIG2  to $Prev_Elig_Config2
        
        Move 'EMPL_STATUS'    to  $FieldName
	      Move &PA.EMPL_STATUS  to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to  $Prev_Empl_Status
	      
	      Move 'REG_TEMP'       to  $FieldName
	      Move &PA.REG_TEMP     to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to  $Prev_Reg_Temp
	      SHOW '$Prev_Reg_Temp :' $Prev_Reg_Temp
  End-if
  
FROM PS_JOB PA
WHERE   PA.EFFDT = (SELECT MAX(PA_ED.EFFDT) FROM PS_JOB PA_ED
                     WHERE PA.EMPLID = PA_ED.EMPLID
                       AND PA.EMPL_RCD = PA_ED.EMPL_RCD
                       AND PA_ED.EFFDT = &A.EFFDT)
    AND PA.EFFSEQ = (SELECT MAX(PA_ES.EFFSEQ) FROM PS_JOB PA_ES
                    WHERE PA.EMPLID = PA_ES.EMPLID
                      AND PA.EMPL_RCD = PA_ES.EMPL_RCD
                      AND PA_ES.EFFDT = &A.EFFDT
	                    AND PA_ES.EFFSEQ < &A.EFFSEQ)
    AND PA.EMPLID=&A.EMPLID   
    AND PA.EMPL_RCD=&A.EMPL_RCD                   
end-select
end-procedure Get-Prev-Effseq-Row

!-----------------------------------------------------------------------
! Function:    Get-Prev-Effdt-Row                                      -
! Description: Get the Previous Effdt Row                              -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Prev-Effdt-Row
#debugd show '...Get-Prev-Effseq-Row'
  Move 'N' to $Changed
  Move ' ' to $Prev_Empl_Status
  Move ' ' to $Prev_Reg_Temp
  Move ' ' to $Prev_Effseq
  Move ''  to $Prev_Effdt
  Move ' ' to $Prev_Action
  Move ''  to $Prev_Action_Dt
  Move ' ' to $Prev_Emplid 
  Move ' ' to $Prev_Actn_Reason
  Move ' ' to $Prev_Deptid 
  Move ' ' to $Prev_Title 
  Move ' ' to $Prev_Union_cd 
  Move ' ' to $Prev_Elig_Config2 
begin-select
HA.EMPLID,
HA.EMPL_RCD,
HA.EFFDT,
HA.EFFSEQ ,
HA.ACTION,
HA.ACTION_REASON,
HA.ACTION_DT,
HA.EMPL_STATUS,
HA.DEPTID,
HA.POSITION_NBR,
HA.REG_TEMP,
HA.UNION_CD,
HA.ELIG_CONFIG2,
substr(HA.ELIG_CONFIG2,4,1) &Prevs_Byte4
HA.JOBCODE
  	
  Move &HA.ELIG_CONFIG2 to $Prev_Elig_Config2
  Move &Prevs_Byte4      to $Prev_Byte4
  
  show '$Prev_Byte4 :' $Prev_Byte4
  show '$Curr_Byte4 :' $Curr_Byte4	
  if (&HA.DEPTID<>&A.DEPTID) OR 
     (&HA.JOBCODE<>&A.JOBCODE) OR 
     (&HA.REG_TEMP<>&A.REG_TEMP) OR 
     (&HA.EMPL_STATUS<>&A.EMPL_STATUS) OR 
     ($Prev_Byte4<>$Curr_Byte4) OR	
     (&HA.UNION_CD<>&A.UNION_CD)
    
     Move &HA.EFFDT to $Effdt
     Move &HA.POSITION_NBR to $Position_nbr
     do Get-Title
     
     let $Prev_Effseq     = &HA.EFFSEQ
     let $Prev_Effseq     = rpad(substr($Prev_Effseq,1,1),6,' ')
     let $Prev_Effdt      = edit(&HA.EFFDT,'mm/dd/yyyy')
     let $Prev_Action_Dt  = edit(&HA.ACTION_DT,'mm/dd/yyyy')
          
        Move 'Y' to $Changed
        Move &HA.EMPLID        to $Prev_Emplid
        Move &HA.ACTION        to $Prev_Action
        Move &HA.ACTION_REASON to $Prev_Actn_Reason
        Move &HA.DEPTID        to $Prev_Deptid
        Move &P.DESCR          to $Prev_Title
        LET $Prev_Title=translate($Prev_Title, ',','') 
        Move &HA.UNION_CD      to $Prev_Union_cd
        Move &HA.ELIG_CONFIG2  to $Prev_Elig_Config2
        
        Move 'EMPL_STATUS'    to  $FieldName
	      Move &HA.EMPL_STATUS  to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to  $Prev_Empl_Status
	      
	      Move 'REG_TEMP'       to  $FieldName
	      Move &HA.REG_TEMP     to  $FieldValue
        do Read-Translate-Table
	      Move $XlatShortName   to  $Prev_Reg_Temp
	      SHOW '$Prev_Reg_Temp :' $Prev_Reg_Temp
  End-if
  
FROM PS_JOB HA
WHERE   HA.EFFDT = (SELECT MAX(HA_ED.EFFDT) FROM PS_JOB HA_ED
                     WHERE HA.EMPLID = HA_ED.EMPLID
                       AND HA.EMPL_RCD = HA_ED.EMPL_RCD
                       AND HA_ED.EFFDT < &A.EFFDT)
    AND HA.EFFSEQ = (SELECT MAX(HA_ES.EFFSEQ) FROM PS_JOB HA_ES
                    WHERE HA.EMPLID = HA_ES.EMPLID
                      AND HA.EMPL_RCD = HA_ES.EMPL_RCD
                      AND HA.EFFDT = HA_ES.EFFDT)
    AND HA.EMPLID=&A.EMPLID                      
end-select
end-procedure Get-Prev-Effdt-Row

!-----------------------------------------------------------------------
! Function:    Get-Health-Benefit                                      -
! Description: Get the details for 1X and 1Y plans                     -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Health-Benefit
#debugd show '...Get-Health-Benefit'
  Move ' ' to $1X_PLAN_TYPE
  Move ' ' to $1Y_PLAN_TYPE
  Move ''  to $1X_Covg_Begin_Dt
  Move ''  to $1Y_Covg_Begin_Dt
begin-select
H.EMPLID,
H.PLAN_TYPE,
H.COVERAGE_ELECT,
H.COVERAGE_BEGIN_DT

   Move 'PLAN_TYPE'       to  $FieldName
	 Move &H.PLAN_TYPE      to  $FieldValue
   do Read-Translate-Table
	 Move $XlatShortName    to  $1X_PLAN_TYPE
	 
	 let $1X_Covg_Begin_Dt  = edit(&H.COVERAGE_BEGIN_DT,'mm/dd/yyyy')
	 
FROM PS_HEALTH_BENEFIT H 
WHERE H.PLAN_TYPE = '1X'
AND H.EMPLID=&A.EMPLID
AND H.EFFDT=(SELECT MAX(H1.EFFDT) FROM PS_HEALTH_BENEFIT H1
              WHERE H1.EMPLID=H.EMPLID
              AND H1.EMPL_RCD=H.EMPL_RCD
              AND H1.COBRA_EVENT_ID=H.COBRA_EVENT_ID
              AND H1.PLAN_TYPE=H.PLAN_TYPE
              AND H1.BENEFIT_NBR=H.BENEFIT_NBR
              AND H1.EFFDT<=$AsofDate)
end-select

begin-select
HB.EMPLID,
HB.PLAN_TYPE,
HB.COVERAGE_ELECT,
HB.COVERAGE_BEGIN_DT

    Move 'PLAN_TYPE'       to  $FieldName
	  Move &HB.PLAN_TYPE     to  $FieldValue
    do Read-Translate-Table
	  Move $XlatShortName    to  $1Y_PLAN_TYPE
	  
	  let $1Y_Covg_Begin_Dt  = edit(&HB.COVERAGE_BEGIN_DT,'mm/dd/yyyy')

FROM PS_HEALTH_BENEFIT HB 
WHERE HB.PLAN_TYPE = '1Y'
AND HB.EMPLID=&A.EMPLID
AND HB.EFFDT=(SELECT MAX(HB1.EFFDT) FROM PS_HEALTH_BENEFIT HB1
              WHERE HB1.EMPLID=HB.EMPLID
              AND HB1.EMPL_RCD=HB.EMPL_RCD
              AND HB1.COBRA_EVENT_ID=HB.COBRA_EVENT_ID
              AND HB1.PLAN_TYPE=HB.PLAN_TYPE
              AND HB1.BENEFIT_NBR=HB.BENEFIT_NBR
              AND HB1.EFFDT<=$AsofDate)
end-select
End-Procedure Get-Health-Benefit

!-----------------------------------------------------------------------
! Function:    Get-Title                                               -
! Description: Get the Position Title                                  -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-Title
#debugd show '...Get-Title'
begin-select
P.DESCR

FROM PS_POSITION_DATA P
WHERE P.POSITION_NBR=$Position_nbr
AND P.EFFDT=(SELECT MAX(P1.EFFDT) FROM PS_POSITION_DATA P1
             WHERE P1.POSITION_NBR=P.POSITION_NBR
             AND P1.EFFDT<=$Effdt)
end-select
end-procedure Get-Title

!-----------------------------------------------------------------------
! Function:    Write-Curr-Row                                          -
! Description: Write the Current Row                                   -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Write-Curr-Row
    
    !GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
    do Get-Emp-Ssn ($Curr_Emplid,$Ssn_Out) 
    Move $Ssn_Out to $Curr_Emplid
    !GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
    let $Curr_Deptid      =''''||$Curr_Deptid
    let $Curr_Emplid      =''''||$Curr_Emplid
    let $Curr_Elig_Config2=''''||$Curr_Elig_Config2
    
    write 1 from &E.BENEFIT_PROGRAM    $delim
                $NAME                  $delim
                $Curr_Emplid           $delim
                $Curr_Effdt            $delim
                $Curr_Effseq           $delim
                &A.ACTION              $delim
                &A.ACTION_REASON       $delim
                $Curr_Action_Dt        $delim
                $Curr_Empl_Status      $delim
                $Curr_Deptid           $delim
                $Curr_Title            $delim
                $Curr_Reg_Temp         $delim
                &A.UNION_CD            $delim
                $Curr_Elig_Config2     $delim
                $Cur_Service_Dt        $delim
                $1X_PLAN_TYPE          $delim
                &H.COVERAGE_ELECT      $delim
                $1X_Covg_Begin_Dt      $delim
                $1Y_PLAN_TYPE          $delim
                &HB.COVERAGE_ELECT     $delim
                $1Y_Covg_Begin_Dt      $delim
                
End-Procedure Write-Curr-Row

!-----------------------------------------------------------------------
! Function:    Write-Prev-Row                                          -
! Description: Write the Current Row                                   -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Write-Prev-Row

   !GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
   do Get-Emp-Ssn ($Prev_Emplid,$Ssn_Out) 
   Move $Ssn_Out to $Prev_Emplid
   !GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
   let $Prev_Deptid      =''''||$Prev_Deptid
   let $Prev_Emplid      =''''||$Prev_Emplid
   let $Prev_Elig_Config2=''''||$Prev_Elig_Config2
   
   write 1 from &E.BENEFIT_PROGRAM     $delim
                $NAME                  $delim
                $Prev_Emplid           $delim
                $Prev_Effdt            $delim
                $Prev_Effseq           $delim
                $Prev_Action           $delim
                $Prev_Actn_Reason      $delim
                $Prev_Action_Dt        $delim
                $Prev_Empl_Status      $delim
                $Prev_Deptid           $delim
                $Prev_Title            $delim
                $Prev_Reg_Temp         $delim
                $Prev_Union_cd         $delim
                $Prev_Elig_Config2     $delim
                $Cur_Service_Dt        $delim
                ' '                    $delim
                ' '                    $delim
                ''                     $delim
                ' '                    $delim
                ' '                    $delim
                ''                     $delim 
                

End-Procedure Write_Prv_Row  

!-----------------------------------------------------------------------
! Function:    Close-File                                              -
! Description: Closes the File                                         -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Close-File
  Close 1

  If #filestat != 0
     Show 'Error closing output file.  Program terminating.'
     Stop 
  End-If
End-Procedure

#include 'gexxx951.sqc'
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
#Include 'getgeid.sqc'   !Get 7 digit Emplid	
#include 'gexxx920.sqc'  !Get ben single row run control	!isdvmxd added on 05/19/2009
#Include 'readxlat.sqc'  !Routines for the translate values