!***********************************************************************
! Interface Name: GEXBN608                                             *
! GEXBN608: This program creates a weekly interface to Dreyfus for     *
!           indicative data changes. This file consists of full file   *
!	    information for newly eligibles and changes for enrollment *
!	    changes.                                                   *
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!  $Date:: 01/29/98 10:30a      $                                      *
!  $Revision:: 01               $                                      *
!  $Workfile:: GEXBN608.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  SXK         08/11/1999     INITIAL CREATION                         *
!                                                                      *
!  SXK         09/13/1999     Modified to print terms on ee termination*
!                                                                      *
!  SXK         09/22/1999     Modified to look for same plan type      *
!			      when checking prior elects/terms         *
!                                                                      *
!  SXK         10/18/1999     Modified to comment out j.birhtdate is   *
!                             null condition while selecting address   *
!                             changes                                  *
!                                                                      *
!  JDH         10/22/1999     Changed delete table to truncate table   *
!                                                                      *
!  JNB         12/06/1999     Changed so that program will not stop    *
!                             if there is no mapping for plan type and *
!                             benefit plan. Declared Error-Report.     *
!                             check-prev-enrollment logic changed.     *
!                                                                      *
!  JDH         12/22/1999     Added logic to check-prev-enrollment to  *
!                             bypass new enrollments where previous    *
!                             enrollment and new enrollment are both   *
!                             in dreyfus plan '543351'.                *
!                                                                      *
!  SXK         01/07/1999     Changed from zip to postal               *
!                                                                      *
!  AXL         10/19/2000     Added new logic to handle rare cases in  *
!                             which an employee terminates from one    *
!                             plan and rejoins another in same week.   *
!                                                                      *
!  AXL         01/09/2000     Replaced truncate routine for backup     *
!                             audit tbl to a delete routine that only  *
!                             deletes rows older than 6 months.        *
!                                                                      *
!  SRK         08/01/2002     Modified setup32a to ptset02.sqc and     *      
!                             changed empl_rcd# to empl_rcd            *
!                                                                      *
!  AXL         03/13/2003     New logic to create audit table formerly *
!                             generated by Tools Selective Audit.      *
!                                                                      *
!  AXL         06/20/2003     Increased the scope of the address/name  *
!                             audit to all non-independants.           *
!                             Added BENEFIT PROGRAM to ADR report.     *
!                                                                      *
!  AXL         07/18/2003     Commented out Alter-session to improve   *
!                             performance in version 8.3.              *
!                                                                      *
!  KMW         05/18/2006     Modify to include employee status        *
!                                                                      *
! ISDVNPK      08/25/2007     Modified for upgrade 9.0                 *
!                                                                      *
! ISDVASS      03/11/2008     added plan_type to order by clause       *
! GEX-MXT      03/24/2008     Fixed for REHIRE DT issue in 9.0         *
! ISDVASS      04/09/2008     used $RANGE_END_dT instead of SYSDATE to *
!                             pull rehire_dt from the SQC              * 
!***********************************************************************

!selection criteria
#define #x000_col_selection_criteria_a  02
#define #x000_col_selection_criteria_b  05

#include 'setenv.sqc' !Set environment
begin-setup
!#include 'setup32a.sqc'
#include 'ptset02.sqc'
declare-report ET-Report
Printer-Type=HPLASERJET
  layout=default
end-declare
declare-report address-report
Printer-Type=HPLASERJET
  layout=default
end-declare
! JNB 12/06/1999
declare-report Error-Report
Printer-Type=HPLASERJET
  layout=default
end-declare
! JNB 12/06/1999

end-setup

begin-report
  !do Alter-Session   AXL 7/18/2003 No longer beneficial in 8.3
  do Init-DateTime
  do Init-Number
  do stdapi-init

  do Get-Calendar-Year-Id
  move 'GEXBN608' to $ReportID
  move ' Dreyfus Indicative Data '   to $ReportTitle     !GEX001-add

  display $ReportTitle noline
  display '  ' noline

  do Get-Current-DateTime

  let $sev-error = 'N'

  let #tot_count = 0
  let #write_recs = 0

  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
end-report

!***********************************************************************
begin-procedure Report
!***********************************************************************
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan

  move 'N' to $Errorfound

  do check_run_controls                 !GEX001-add
  do Select-Pay-End-Dt          !AXL 3/13/2003
  
  do swap-data			!AXL 3/13/2003
  do id-plan-types		!AXL 3/13/2003			

  do populate-audit-tbl	        !AXL 3/13/2003
  do create-current-snapshot	!AXL 3/13/2003
  
  do process-data

  date-time () hh:mi:ss &timeProcess
  display #total_new_enrol 99999 noline
  display ' New Enrollments Processed '
  display #total_changes_count 99999 noline
  display ' Data changes Processed ' noline
  display &timeProcess
end-procedure

!***********************************************************************
begin-procedure check_run_controls
!***********************************************************************
#debug8 display 'Check-run-Controls'
  if $Prcs_Process_Instance = ''
    Do Ask-As-Of-Date
    Let $X000_WHERE_SELECT_ASOFDATE = $AsOfDate

  else

    Do GEXXX922-Select-Parameters

    let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_PAY.ASOFDATE
    if rtrim($GEX_RC_PAY.ASOFDATE,' ') = ''
      let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    end-if

  end-if

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE ,{DEFDATE}, '', '')

  show '$X000_WHERE_SELECT_ASOFDATE      = ' $X000_WHERE_SELECT_ASOFDATE 

  print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'        (+5,{#x000_col_selection_criteria_a})
  print '$Prcs_OPRID          ='                              (+1,{#x000_col_selection_criteria_b})
  print $Prcs_OPRID                                           (0,+2)
  print '$PRCS_RUN_CNTL_ID    ='                              (+1,{#x000_col_selection_criteria_b})
  print $PRCS_RUN_CNTL_ID                                     (0,+2)

  print '$X000_WHERE_SELECT_ASOFDATE                     ='   (+1,{#x000_col_selection_criteria_b})
  print $X000_WHERE_SELECT_ASOFDATE                           (0,+2)
	 
  LET #PAGE-COUNT = 0
  NEW-PAGE
end-procedure        


begin-heading 6 for-reports=(Address-report)
 move 'BN608ADR' to $ReportID
 move 'Address Change Report' to $ReportTitle
 #Include 'stdhdg01.sqc'

  print 'BNFT PGM/CMPY/'         (+1,01)
  print 'PAY GROUP/DEPTID'       (+1,1)
  !print 'DEPTID'                (0,11)
  !print 'SS-NUM'                (0,21)
  print 'SS-NUM'                 (0,24)
  print 'NAME'                   (0,35)
  print 'ADDRESS 1/'             (0,75)
  print 'CITY'                   (0,115)
  print 'STATE/ZIP'              (0,140)
  print 'BIRTH DT' 		 (0,155)

  print 'ADDRESS 2'              (+1,75)  

end-heading


begin-heading 6 for-reports=(ET-report)
 move 'BN608ETR' to $ReportID
 move 'New Enrollment/Termination Report' to $ReportTitle
 #Include 'stdhdg01.sqc'
  position (+1)
  print $header_string () center

  print 'COMPANY/'               (+1,01)
  print 'PAY GROUP/DEPTID'       (+1,1)
!  print 'DEPTID'                 (0,11)
  print 'SS-NUM'                 (0,28)
  print 'NAME'                   (0,38)
  print 'PLAN TYPE/BENEFIT PLAN' (0,78)
  print 'EMPL STATUS'            (0,108) !KMW 5/19/2006
  print 'COVERAGE BEGIN DT'      (0,123)
  print 'EFFECTIVE DT'           (0,141)

end-heading

! JNB 12/06/1999
begin-heading 6 for-reports=(Error-Report)
 move 'BN608ERR' to $ReportID
 move 'Mapping Error Report' to $ReportTitle
 #Include 'stdhdg01.sqc'
  position (+1)

 end-heading

! JNB 12/06/1999

!AXL 3/13/2003 New - Begin
!***********************************************************************
begin-procedure swap-data
!***********************************************************************
#debug8 display 'swap-data'

begin-sql on-error=sql-error-found('swap-data')
 delete from ps_gex_r_gexbn608
end-sql

  do Commit-Transaction

begin-sql on-error=sql-error-found('swap-data2')
 insert into ps_gex_r_gexbn608
 (select * FROM ps_gex_r_gexbn608B)
end-sql

  do Commit-Transaction

end-procedure

!***********************************************************************
begin-procedure id-plan-types
!***********************************************************************
#debug8 display 'id-plan-types'
   
  let $plan_type_String_a    = 'sp.plan_type in ('
  let $plan_type_String_b    = 'spx.plan_type in ('


  let #plan_count_xy = 0
 
begin-select distinct on-error=sql-error-found('id-plan-types')

xy.plan_type

  add 1 to #plan_count_xy
  if #plan_count_xy = 1
     let $plan_type_string_a = $plan_type_string_a || ''''||&xy.plan_type||''''
     let $plan_type_string_b = $plan_type_string_b || ''''||&xy.plan_type||''''
    
  else
     
     let $plan_type_string_a = $plan_type_string_a ||','||''''||&xy.plan_type||''''
     let $plan_type_string_b = $plan_type_string_b ||','||''''||&xy.plan_type||''''
    
  end-if

from ps_gex_dreyfus_map xy
where xy.gex_prof_shr = 'N'

end-select

   let $plan_type_string_a = $plan_type_String_a||')'
   let $plan_type_string_b = $plan_type_String_b||')'

   let $benefit_plan_string_a = 'sp.benefit_plan in ('
   let $benefit_plan_string_b = 'spx.benefit_plan in ('
 

  let #plan_count_xz = 0
 
begin-select distinct on-error=sql-error-found('id-benefit-plans')

xz.benefit_plan

  add 1 to #plan_count_xz
  if #plan_count_xz = 1
    
     let $benefit_plan_string_a = $benefit_plan_string_a || '''' ||&xz.benefit_plan||''''
     let $benefit_plan_string_b = $benefit_plan_string_b || '''' ||&xz.benefit_plan||''''

  else
       
     let $benefit_plan_string_a = $benefit_plan_string_a ||','||'''' ||&xz.benefit_plan||''''
     let $benefit_plan_string_b = $benefit_plan_string_b ||','||'''' ||&xz.benefit_plan||''''

  end-if

from ps_gex_dreyfus_map xz
where xz.gex_prof_shr = 'N'

end-select

   let $benefit_plan_string_a = $benefit_plan_string_a||')'
   let $benefit_plan_string_b = $benefit_plan_string_b||')'

end-procedure

!AXL 3/13/2003 New - End

!***********************************************************************
begin-procedure process-data
!***********************************************************************
#debug8 display 'process-data'
   
  do truncate-dreyfus-temp
  !AXL 3/13/2003 8.3 code disabled under slective audit is fixed
  !SRK 10/16/2002 Added this code to call gexaudemp.sqc to create
  !one row per timestamp per employee in ps_audit_gex_empl. This
  !change is necessary as this audit table will have 3 rows if an operator
  !changes name, address and birthdate. Previously, in 7.5, all these
  !fields exist on personal_data itself, whereas now in 8, this audit
  !table is being created from 3 tables NAMES, ADDRESSES and PERSON

  !begin-sql
  !alter session set nls_date_format = 'DD-MON-YYYY_HH:MI:SS_AM'
  ! end-sql

  !do Format-Audit-Gex-Empl

  !SRK 10/16/2002 End

  !do Select-Pay-End-Dt  Moved to beginning of sqr AXL 3/13/2003

  let $filename = '{OUTFILE}'||'gexbn608.dat'
  open $filename as 1
     for-writing record=80 status=#writestat

  if #writestat != 0
    display 'Error Opening output file.  Program terminating.'
    stop
  end-if

  move 'N' to $rowfound
  use-report ET-Report

  let #inputtran = 0
  let $plan_type_String      = 'A.plan_type in ( '
  let $benefit_plan_string   = 'A.benefit_plan in ( '

  let $plan_type_String_1    = 'A1.plan_type in ( '
  let $benefit_plan_string_1 = 'A1.benefit_plan in ( '

  let $plan_type_String_2    = 'T.plan_type in ( '
  let $benefit_plan_string_2 = 'T.benefit_plan in ( '

  let $plan_type_String_3    = 'xyz.plan_type in ( '
  let $benefit_plan_string_3 = 'xyz.benefit_plan in ( '

  let #plan_count = 0
  let #total_new_enrol = 0
  let #total_changes_count = 0

begin-select on-error=sql-error-found('Process-Data')
xx.gex_dreyfus_plan () on-break print=never level=1 after=dreyfus-plan-change
	save=$prev_dreyfus_plan
xx.plan_type
xx.benefit_plan
xx.gex_prof_shr

  add 1 to #plan_count
  if #plan_count = 1
     let $plan_type_string = $plan_type_string || ''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_string || '''' ||&xx.benefit_plan||''''

     let $plan_type_string_1 = $plan_type_string_1 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 || '''' ||&xx.benefit_plan||''''

     let $plan_type_string_2 = $plan_type_string_2 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_2 = $benefit_plan_string_2 || '''' ||&xx.benefit_plan||''''

     let $plan_type_string_3 = $plan_type_string_3 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_3 = $benefit_plan_string_3 || '''' ||&xx.benefit_plan||''''

  else
     let $plan_type_string = $plan_type_string||','||''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_String||','||''''||&xx.benefit_plan||''''

     let $plan_type_string_1 = $plan_type_string_1 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 ||','||'''' ||&xx.benefit_plan||''''

     let $plan_type_string_2 = $plan_type_string_2 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_2 = $benefit_plan_string_2 ||','||'''' ||&xx.benefit_plan||''''

     let $plan_type_string_3 = $plan_type_string_3 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_3 = $benefit_plan_string_3 ||','||'''' ||&xx.benefit_plan||''''

  end-if

from ps_gex_dreyfus_map xx
where gex_prof_shr = 'N'
order by gex_dreyfus_plan 
end-select

  do write-indicative-data
  do address-change-report
  do archive-audit-info
  do truncate-audit-record

end-procedure

!***********************************************************************
begin-procedure truncate-dreyfus-temp
!***********************************************************************
#debug8 display 'truncate-dreyfus-temp'
begin-sql on-error=sql-error-found('Truncate-Dreyfus-Temp')
truncate table ps_gex_dreyfus_wrk
end-sql
end-procedure


!***********************************************************************
begin-procedure dreyfus-plan-change
!***********************************************************************
#debug8 display 'dreyfus-plan-change'

if #plan_count > 0
   let $plan_type_string = $plan_type_String||')'
   let $benefit_plan_string = $benefit_plan_string||')'

   let $plan_type_string_1 = $plan_type_String_1||')'
   let $benefit_plan_string_1 = $benefit_plan_string_1||')'
   
   let $plan_type_string_2 = $plan_type_String_2||')'
   let $benefit_plan_string_2 = $benefit_plan_string_2||')'

   let $plan_type_string_3 = $plan_type_String_3||')'
   let $benefit_plan_string_3 = $benefit_plan_string_3||')'

   display $plan_type_String
   display $benefit_plan_string

   display $plan_type_String_1
   display $benefit_plan_string_1

   display $plan_type_String_2
   display $benefit_plan_string_2

   display $plan_type_String_3
   display $benefit_plan_string_3

   move $prev_dreyfus_plan to $gex_dreyfus_plan

   move 'New Enrollments' to $header_string

   do process-new-enrollments
   do process-changes
   
   let $plan_type_String = 'A.plan_type in ('
   let $benefit_plan_string = 'A.benefit_plan in ('

   let $plan_type_String_1 = 'A1.plan_type in ('
   let $benefit_plan_string_1 = 'A1.benefit_plan in ('

   let $plan_type_String_2 = 'T.plan_type in ('
   let $benefit_plan_string_2 = 'T.benefit_plan in ('

   let $plan_type_String_3 = 'xyz.plan_type in ('
   let $benefit_plan_string_3 = 'xyz.benefit_plan in ('

   let #plan_count = 0

end-if

end-procedure

!***********************************************************************
begin-procedure process-new-enrollments
!***********************************************************************
#debug8 display 'process-new-enrollments'
     
move ' ' to $emplid

begin-select ON-ERROR=SQL-Error-Found('Process-new-enrollments')
A.EMPLID
A.EMPL_RCD
A.BENEFIT_NBR
A.COVERAGE_BEGIN_DT
A.EFFDT
A.PLAN_TYPE
A.BENEFIT_PLAN
B.NAME
B.ADDRESS1
B.ADDRESS2
B.CITY
B.STATE
B.POSTAL !SXK 11/23/99 Changed from zip to postal
B.BIRTHDATE
!B.HIGHLY_COMP_EMPL_P  ! ISDVNPK      08/25/2007     Modified for upgrade 9.0 
C.HIRE_DT
!C.REHIRE_DT					!GEX-MXT COMMENTED FOR REHIRE DATE LOGIC IN 9.0
!C.OWN_5PERCENT_CO  ! ISDVNPK      08/25/2007     Modified for upgrade 9.0 
C1.ANNUAL_RT
C1.COMPANY
C1.PAYGROUP
C1.DEPTID
C1.EMPL_STATUS !KMW 5/18/2006
!SYSDATE        &GEXJOB_REH_ASOFDATE 	!GEX-MXT ADDED FOR REHIRE DATE LOGIC IN 9.0  ISDVASS used $RANGE_END_dT
 
 if $emplid <> &a.emplid 

  move &a.emplid to $emplid

  ! GEX-MXT 03/24/2008 Fixed for REHIRE DT
   let $GEXJOB_REH_EMPLID = $emplid
   let #GEXJOB_REH_EMPLRCD = &A.EMPL_RCD
   !let $GEXJOB_REH_ASOFDATE = &GEXJOB_REH_ASOFDATE        ! ISDVASS used $RANGE_END_dT
   let $GEXJOB_REH_ASOFDATE = $RANGE_END_dT                ! ISDVASS used $RANGE_END_dT
   do Get-Job-Rehire-Dt
  ! GEX-MXT 03/24/2008 Fixed for REHIRE DT 

  !Checking to see if previous enrollment is termed or not

  let $skip-new-enrollment = 'N'   ! JDH 12/22/1999
  do check-prev-enrollment
  if $skip-new-enrollment = 'Y'    ! JDH 12/22/1999
   goto skip-new-enrollment        ! JDH 12/22/1999
  end-if                           ! JDH 12/22/1999

  print &c1.company (+1,3)
  print '/' ()
  print &c1.paygroup ()
  print '/' ()
  print &c1.deptid ()
  print &a.emplid (,25)
  print &b.name (,38)
  let $comb_bp = &a.plan_type||'/'||&a.benefit_plan
  print $comb_bp (,78)
  print &c1.empl_status (,108) !KMW 5/18/2006
  print &a.coverage_begin_dt (,123)
  print &a.effdt (,141)
     
  move '800' to $gex_tran_id
  move &b.name to $gex_data_value
  move ' ' to $gex_data_element
  do insert-record

  move '813' to $gex_tran_id
  
  move '011' to $gex_data_element
  move &b.name to $gex_data_value
  do insert-Record
  
  move '290' to $gex_data_element
  move &b.address1 to $gex_data_value
  do insert-Record

  if rtrim(&b.address2,' ') <> ''
     move '291' to $gex_data_element
     move &b.address2 to $gex_data_value
     do insert-Record
  end-if

  move '293' to $gex_data_element
  move &b.city to $gex_data_value
  do insert-Record

  move '294' to $gex_data_element
  move &b.state to $gex_data_value
  do insert-Record

  move '295' to $gex_data_element
  move &b.postal to $gex_data_value
  do insert-Record

  move '771' to $gex_data_element
  do convert-to-dtu-date(&a.coverage_begin_dt,$coverage_begin_dt_dtu)
  let $gex_data_value = substr($coverage_begin_dt_dtu,3,2)||
			substr($coverage_begin_dt_dtu,6,2)||
			substr($coverage_begin_dt_dtu,9,2)
  do insert-Record

  move '050' to $gex_data_element
  do convert-to-dtu-date(&b.birthdate,$birthdate_dtu)
  let $gex_data_value = substr($birthdate_dtu,3,2)||
			substr($birthdate_dtu,6,2)||
			substr($birthdate_dtu,9,2)

  do insert-Record

  move '052' to $gex_data_element
  
  !GEX-MXT MODIFIED FOR REHIRE DATE LOGIC-BEGIN
  !if rtrim(&c.rehire_dt,' ') <> ''
  !   move &c.rehire_dt to $gex_data_value
  !else
  !   move &c.hire_dt to $gex_data_value
  !end-if
  
  if rtrim($GEXJOB_REH_REHIRE_DT,' ') <> ''
     move $GEXJOB_REH_REHIRE_DT to $gex_data_value
  else
     move &c.hire_dt to $gex_data_value
  end-if
  !GEX-MXT MODIFIED FOR REHIRE DATE LOGIC-END
  do convert-to-dtu-date($gex_data_value,$gex_data_value_dtu)
  let $gex_data_value = substr($gex_data_value_dtu,3,2)||
			substr($gex_data_value_dtu,6,2)||
			substr($gex_data_value_dtu,9,2)

  do insert-Record

  move '653' to $gex_data_element
  move '7' to $gex_data_value
  do insert-Record

!  move '170' to $gex_data_element
!  move &c1.annual_Rt to $gex_data_value
!  do insert-Record

!  move '032' to $gex_data_element
!  if &c.own_5percent_co = 'Y'
!     move '1' to $gex_data_value
!  else
!     if &b.highly_comp_empl_p = 'H'
!        move '5' to $gex_data_value
!     else
!        move '0' to $gex_data_Value
!     end-if
!  end-if
!  do insert-Record


!  move $emplid to $emplid_bonus
!  move &a.empl_rcd to #empl_rcd
!  do check-bonus-payments
!  if #bonus_payments  > 0
!     move '611' to $gex_data_element
!     move #bonus_payments to $gex_data_value
!     do insert-Record
!  end-if

  move 'Y' to $rowfound
  add 1 to #inputtran

 end-if

skip-new-enrollment:           ! JDH 12/22/1999

FROM   PS_Savings_Plan A, PS_PERSONAL_DATA B, PS_EMPLOYMENT C,
       PS_JOB C1

WHERE  a.coverage_elect = 'E'
and a.coverage_elect_dt between $range_begin_dt and $range_end_Dt
and [$plan_type_string]
and [$benefit_plan_string]
AND B.EMPLID = A.EMPLID
AND C.EMPLID = B.EMPLID
AND C1.EMPLID = C.EMPLID
AND C1.EMPL_RCD = C.EMPL_RCD
and c.empl_rcd = a.empl_rcd
AND C1.EFFDT = (SELECT MAX(EFFDT)
		FROM PS_JOB
		WHERE EMPLID = C1.EMPLID
		AND EMPL_RCD = C1.EMPL_RCD
		AND EFFDT <= $RANGE_END_dT)
AND C1.EFFSEQ = (SELECT MAX(EFFSEQ)
		FROM PS_JOB
		WHERE EMPLID = C1.EMPLID
		AND EMPL_RCD = C1.EMPL_RCD
		AND EFFDT = C1.EFFDT)
Order by A.emplid, a.empl_rcd, A.plan_type					!ISDVASS added plan_type to order by clause 03/11/2008
end-select

  if $rowfound = 'N'
    display  '** NO Indicative data new enrollments selected for this plan: '  noline
    display $gex_dreyfus_plan
  else
    display 'Number of New Enrollments for plan ' noline
    display $gex_dreyfus_plan noline
    display ' is ' noline
    display #inputtran
    move 'N' to $rowfound
    add #inputtran to #total_new_enrol 
    move 0 to #inputtran
    new-page
  end-if

end-procedure

!AXL 3/13/2003 New - Begin
!***********************************************************************
begin-procedure populate-audit-tbl
!***********************************************************************
#debug8 display  'populate-audit-tbl'
!This creates the Audit table that was formerly created by the 
!tools slective audit process.
!AXL 6/20/2003 New Table joins
begin-sql on-error=sql-error-found('populate-audit-tbl')
INSERT INTO PS_AUDIT_GEX_EMPL
  (SELECT 'GEXBN608', '01-JAN-1900', 'C', 'RECNM',
           OLD.EMPLID, OLD.EMPL_RCD, rtrim(OLD.NAME,' '), OLD.ADDRESS1, OLD.ADDRESS2,
           OLD.CITY, OLD.STATE, OLD.POSTAL, OLD.BIRTHDATE
   FROM PS_GEX_R_GEXBN608 OLD 
   where old.emplid in (SELECT JJ.emplid FROM PS_JOB JJ 
        WHERE JJ.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE JJ.EMPLID =  EMPLID
          AND JJ.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $range_end_dt)
    AND JJ.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE JJ.EMPLID = EMPLID
          AND JJ.EMPL_RCD = EMPL_RCD
          AND JJ.EFFDT = EFFDT)

    AND JJ.EMPL_STATUS in ('A','L','P','S')

    AND JJ.COMPANY > '999'  )
 )
minus
  (SELECT 'GEXBN608', '01-JAN-1900', 'C', 'RECNM',
          JX.EMPLID, JX.EMPL_RCD, rtrim(CX.NAME,' '),
          BX.ADDRESS1, BX.ADDRESS2, BX.CITY, BX.STATE, BX.POSTAL,
          AX.BIRTHDATE

   FROM PS_PERSONAL_DATA AX,
        PS_JOB JX,
        PS_ADDRESSES BX,
        PS_NAMES CX

   WHERE AX.EMPLID = BX.EMPLID
    AND  BX.EMPLID = CX.EMPLID
    AND  CX.EMPLID = JX.EMPLID
   
    AND JX.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE JX.EMPLID =  EMPLID
          AND JX.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $range_end_dt)
    AND JX.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE JX.EMPLID = EMPLID
          AND JX.EMPL_RCD = EMPL_RCD
          AND JX.EFFDT = EFFDT)

    AND JX.EMPL_STATUS in ('A','L','P','S')

    AND JX.COMPANY > '999'  

    AND BX.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_ADDRESSES
         WHERE BX.EMPLID       = EMPLID
           AND BX.ADDRESS_TYPE = ADDRESS_TYPE
           AND EFFDT          <= $range_end_dt)
         
    AND CX.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_NAMES
         WHERE CX.EMPLID    = EMPLID
           AND CX.NAME_TYPE = NAME_TYPE
           AND EFFDT      <= $range_end_dt) 

    AND CX.NAME_TYPE='PRI' 
  
   
  )
end-sql

end-procedure

!***********************************************************************
begin-procedure create-current-snapshot
!***********************************************************************
#debug8 display  'create-current-snapshot'

!Delete last week
begin-sql on-error=sql-error-found('create-current-snapshot')
 delete from ps_gex_r_gexbn608B
end-sql

  do Commit-Transaction


begin-sql on-error=sql-error-found('create-current-snapshot')
INSERT INTO PS_GEX_R_GEXBN608B
(select 'GEXBN608', '01-JAN-1900', 'C', 'RECNM',
        JOB.EMPLID, JOB.EMPL_RCD, NAM.NAME,
        ADDR.ADDRESS1, ADDR.ADDRESS2, ADDR.CITY, ADDR.STATE, ADDR.POSTAL,
        PER.BIRTHDATE
 !AXL 6/20/2003 New Table joins
 FROM PS_PERSONAl_DATA PER,
      PS_JOB JOB,
      PS_NAMES NAM, 
      PS_ADDRESSES ADDR
 WHERE PER.EMPLID = JOB.EMPLID
    AND JOB.EMPLID = NAM.EMPLID  
    AND NAM.EMPLID = ADDR.EMPLID

    AND JOB.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE JOB.EMPLID =  EMPLID
          AND JOB.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $range_end_dt)
    AND JOB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE JOB.EMPLID = EMPLID
          AND JOB.EMPL_RCD = EMPL_RCD
          AND JOB.EFFDT = EFFDT)

    AND JOB.EMPL_STATUS in ('A','L','P','S')

    AND JOB.COMPANY > '999'  
    
    AND NAM.EFFDT = (SELECT MAX(EFFDT) FROM PS_NAMES
        WHERE NAM.EMPLID    = EMPLID
          AND NAM.NAME_TYPE = NAME_TYPE
          AND EFFDT <= $range_end_dt)

    AND NAM.NAME_TYPE = 'PRI'

    AND ADDR.EFFDT = (SELECT MAX(EFFDT) FROM PS_ADDRESSES
        WHERE ADDR.EMPLID       = EMPLID
          AND ADDR.ADDRESS_TYPE = ADDRESS_TYPE
          AND EFFDT <=$range_end_dt) 
 )

end-sql
end-procedure

!AXL 3/13/2003 New - End

!***********************************************************************
begin-procedure process-changes
!***********************************************************************
#debug8 display 'process-changes'
move 'N' to $rowfound_1
move 0 to #changes_count
move ' ' to $emplid
move ' ' to $plan_type_str
begin-select ON-ERROR=SQL-Error-Found('Process-changes')
A1.EMPLID
A1.EMPL_RCD
A1.BENEFIT_NBR
A1.COVERAGE_BEGIN_DT
A1.EFFDT
A1.PLAN_TYPE
A1.BENEFIT_PLAN
B2.NAME
B2.ADDRESS1
B2.ADDRESS2
B2.CITY
B2.STATE
B2.POSTAL !sxk 11/23/99 Changed from zip
B2.BIRTHDATE
B1.NAME
B1.ADDRESS1
B1.ADDRESS2
B1.CITY
B1.STATE
B1.POSTAL !SXK 11/23/99 Changed from zip
B1.BIRTHDATE

!  if &a1.plan_type <> $plan_type_str and (&a1.emplid = $emplid)
  if (&a1.emplid = $emplid)
  else
  
  move '813' to $gex_tran_id
  move &a1.emplid to $emplid
  move &a1.empl_Rcd to #empl_rcd

  if rtrim(&b1.name,' ') <> ''
     if rtrim(&b2.name,' ') <> rtrim(&b1.name,' ')
     move '011' to $gex_data_element
     move &b2.name to $gex_data_value
     do insert-Record
     end-if
     
    if rtrim(&b1.address1,' ') <> rtrim(&b2.address1,' ')
     move '290' to $gex_data_element
     move &b2.address1 to $gex_data_value
     do insert-Record
    end-if

    if rtrim(&b1.address2,' ') <> rtrim(&b2.address2,' ')
     move '291' to $gex_data_element
     move &b2.address2 to $gex_data_value
     do insert-Record
    end-if

    if rtrim(&b1.city,' ') <> rtrim(&b2.city,' ')
     move '293' to $gex_data_element
     move &b2.city to $gex_data_value
     do insert-Record
    end-if

    if rtrim(&b1.state,' ') <> rtrim(&b2.state,' ')
     move '294' to $gex_data_element
     move &b2.state to $gex_data_value
     do insert-Record
    end-if

    if rtrim(&b1.postal,' ') <> rtrim(&b2.postal,' ')
     move '295' to $gex_data_element
     move &b2.postal to $gex_data_value
     do insert-Record
    end-if

!  move '771' to $gex_data_element
!  move &A.coverage_begin_dt to $gex_data_value
!  do insert-Record

    if rtrim(&b1.birthdate,' ') <> rtrim(&b2.birthdate,' ')
     move '050' to $gex_data_element
     move &b2.birthdate to $gex_data_value
  do convert-to-dtu-date($gex_data_value,$gex_data_value_dtu)
  let $gex_data_value = substr($gex_data_value_dtu,3,2)||
			substr($gex_data_value_dtu,6,2)||
			substr($gex_data_value_dtu,9,2)

     do insert-Record
    end-if

!  move '052' to $gex_data_element
!  if rtrim(&c.rehire_dt,' ') <> ''
!     move &c.rehire_dt to $gex_data_value
!  else
!     move &c.hire_dt to $gex_data_value
!  end-if
!  do insert-Record

!  move '653' to $gex_data_element
!  move '7' to $gex_data_value
!  do insert-Record

!   do check-annual-rate-change

!   if $change_annual_rate = 'Y'
!     move '170' to $gex_data_element
!     move &g.annual_Rt to $gex_data_value
!     do insert-Record
!   end-if

!  move '032' to $gex_data_element
!  if &c.own_5percent_co = 'Y'
!     move '1' to $gex_data_value
!  else
!     if &b.highly_comp_empl_p = 'H'
!        move '5' to $gex_data_value
!     else
!        move '0' to $gex_data_Value
!     end-if
!  end-if
!  do insert-Record


    
!  move $emplid to $emplid_bonus
!  move &a1.empl_rcd to #empl_rcd
!  do check-bonus-payments
!  if #bonus_payments  > 0
!     move '611' to $gex_data_element
!     move #bonus_payments to $gex_data_value
!     do insert-Record
!  end-if

  move 'Y' to $rowfound_1
  add 1 to #changes_count

  end-if
 end-if  

 move &a1.plan_type to $plan_type_str

FROM   PS_Savings_Plan A1, 
       PS_AUDIT_GEX_EMPL B1,
       PS_PERSONAL_DATA B2

WHERE  a1.coverage_elect = 'E'
and [$plan_type_string_1]
and [$benefit_plan_string_1]
and $range_begin_dt > (select max(coverage_begin_dt)
		from ps_savings_plan 
		where emplid = a1.emplid
		and empl_rcd = a1.empl_Rcd
		and benefit_nbr = a1.benefit_nbr
		and plan_type = a1.plan_type
                and benefit_plan = a1.benefit_plan)
AND B1.EMPLID = A1.EMPLID
AND B1.EMPL_RCD = A1.EMPL_RCD
AND B2.EMPLID = A1.EMPLID

Order by A1.emplid, a1.empl_rcd, a1.plan_type,a1.benefit_plan
end-select

  if $rowfound_1 = 'N'
    display  '** NO Indicative data changes selected for this plan: '  noline
    display $gex_dreyfus_plan
  else
    display 'Number of Changes for plan ' noline
    display $gex_dreyfus_plan noline
    display ' is ' noline
    display #changes_count
    add #changes_count to #total_changes_count 
  end-if
  move 'New Terminations' to $header_string
  do check-terms
  
  do prepare-highly-comp

end-procedure

!***********************************************************************
Begin-Procedure check-annual-rate-change
!***********************************************************************
#debug8 display 'Check-annual-rate-change'

move 'N' to $change_annual_rt

begin-select on-error=sql-error-found('Check-Annual-Rate-Change')
g.annual_rt
  move 'Y' to $change_annual_rt
from ps_job g
where g.emplid = $emplid
  and g.empl_Rcd = #empl_rcd
  and g.action_dt between $range_begin_dt and $range_end_Dt
  and g.annual_rt <> (select annual_Rt
			from ps_job
			where emplid = g.emplid
			and empl_rcd = g.empl_rcd
			and effdt = (select max(g1.effdt)
					from ps_job g1
					where g1.emplid = emplid
					and g1.empl_Rcd = empl_Rcd
					and g1.effdt < g.effdt)
			and effseq = (select max(g2.effseq)
					from ps_job g2
					where g2.emplid = emplid
					and g2.empl_rcd = empl_Rcd
					and g2.effdt = effdt))
  and g.effdt = (Select max(effdt)
		from ps_job 
		where emplid = g.emplid
		and empl_Rcd = g.empl_Rcd
		and effdt <= $range_end_Dt)
  and g.effseq = (Select max(effseq)
		from ps_job 
		where emplid = g.emplid
		and empl_rcd = g.empl_Rcd
		and effdt = g.effdt)
end-select

end-procedure

!***********************************************************************
Begin-Procedure check-terms
!***********************************************************************
#debug8 display 'Check-terms'
move 'N' to $terms_found
move 'N' to $plan_terms
begin-select on-error=sql-error-found('Check-Terms')
t1.emplid
t1.empl_rcd
t1.effdt
t1.coverage_begin_dt
t1.plan_type

 if &t1.emplid <> $term_emplid
  move &t1.emplid to $term_emplid
  move &t1.empl_rcd to #term_empl_rcd
  move &t1.effdt to $term_effdt
  do select-empl-status

  #debug7 show 'emplid ' $term_emplid ' status ' $empl_status
  evaluate $empl_status
	when = 'A'
	when = 'L'
	when = 'P'
             !AXL 10/19/2000 - Extra term check - Begin
             do select-termination-date-jph
             #debug7 show 'emplid ' $term_emplid ' term found flag  ' $term_found

             if $term_found='N'
                
                move '813' to $gex_tran_id
	        move '608' to $gex_data_element
                move $term_emplid to $emplid
	        move '1' to $gex_data_value
	        do insert-record
                move 'Y' to $plan_terms
                do select-empl-info
                print &yz.company (+1,3)
                print '/' ()
                print &yz.paygroup ()
                print '/' ()
                print &yz.deptid ()
                print &t1.emplid (,25)
                print &za.name (,38)
                let $comb_bp_1 = &t1.plan_type
                print $comb_bp_1 (,78)
                print &c1.empl_status (,108) !KMW 5/18/2006
                print &t1.coverage_begin_dt (,123)
                print &t1.effdt (,141)
 
             else

                move '813' to $gex_tran_id
	        move '056' to $gex_data_element
                move $term_emplid to $emplid
                move &jph.effdt to $gex_data_value
	        do convert-to-dtu-date($gex_data_value,$gex_data_value_dtu)
	        let $gex_data_value = substr($gex_data_value_dtu,3,2)||
			substr($gex_data_value_dtu,6,2)||
			substr($gex_data_value_dtu,9,2)

	        do insert-Record
	  
		move '813' to $gex_tran_id
		move '138' to $gex_data_element
	
		evaluate &jph.action_reason
		when = 'PTD'
			move '5' to $gex_data_value
		when = 'DEA'
		when = 'DE2'
			move '6' to $gex_data_value
		when-other
			move '0' to $gex_data_value
		end-evaluate
		do insert-record            
                move 'Y' to $plan_terms
               
                print &jph.company (+1,3)
                print '/' ()
                print &jph.paygroup ()
                print '/' ()
                print &jph.deptid ()
                print &jph.emplid (,25)
                print &za2.name (,38)
                let $comb_bp_1 = &t1.plan_type
                print $comb_bp_1 (,78)
                print &jph.empl_status (,108) !KMW 5/18/2006
                print &t1.coverage_begin_dt (,123)
                print &t1.effdt (,141)
              
             end-if
             !AXL 10/19/2000 - Extra term check - End

        when-other
             move '813' to $gex_tran_id
	     move '056' to $gex_data_element
             move $term_emplid to $emplid
             do select-termination-date
	     move &h.termination_Dt to $gex_data_value
	     do convert-to-dtu-date($gex_data_value,$gex_data_value_dtu)
	     let $gex_data_value = substr($gex_data_value_dtu,3,2)||
			substr($gex_data_value_dtu,6,2)||
			substr($gex_data_value_dtu,9,2)

	     do insert-Record
		do select-term-reason
		move '813' to $gex_tran_id
		move '138' to $gex_data_element
		move $term_emplid to $emplid
		evaluate $term_reason
		when = 'PTD'
			move '5' to $gex_data_value
		when = 'DEA'
		when = 'DE2'
			move '6' to $gex_data_value
		when-other
			move '0' to $gex_data_value
		end-evaluate
		do insert-record            
                move 'Y' to $plan_terms
                do select-empl-info
                print &yz.company (+1,3)
                print '/' ()
                print &yz.paygroup ()
                print '/' ()
                print &yz.deptid ()
                print &t1.emplid (,25)
                print &za.name (,38)
                let $comb_bp_1 = &t1.plan_type
                print $comb_bp_1 (,78)
                print &yz.empl_status (,108) !KMW 5/18/2006
                print &t1.coverage_begin_dt (,123)
                print &t1.effdt (,141)


  end-evaluate
 end-if
		
from ps_savings_plan t1
where t1.coverage_elect = 'T'
and t1.coverage_elect_dt between $range_begin_dt and $range_end_Dt

!SXK this part makes sure that there was an enrollment prior to term
!in the current plan, benefit plan combination, that we are processing

and exists (select 'x'
		from ps_savings_plan t
		where t.emplid = t1.emplid
		and t.empl_rcd = t1.empl_rcd
		and t.benefit_nbr = t1.benefit_nbr
		and [$plan_type_string_2]
		and [$benefit_plan_string_2]
		and t.coverage_elect <> 'T'
		and t.effdt = (Select max(effdt)
			from ps_savings_plan
			where emplid = t.emplid
			and empl_rcd = t.empl_rcd
			and benefit_nbr = t.benefit_nbr
			and plan_type = t.plan_type
			and coverage_elect = 'E'
			and effdt < t1.effdt)
		and not exists (select 'xxxx' from ps_savings_plan xx
				where xx.emplid = t.emplid
				and xx.empl_rcd = t.empl_Rcd
				and xx.benefit_nbr = t.benefit_nbr
				and xx.plan_type = t.plan_type
				and xx.coverage_elect = 'T'
				and xx.effdt > t.effdt 
				and xx.effdt < t1.effdt))
!SXK this part makes sure that there is no future rows after the
!plan termination
and not exists (select 'yy'
		from ps_savings_plan t2
		where t2.emplid = t1.emplid
		and t2.empl_rcd = t1.empl_rcd
		and t2.benefit_nbr = t1.benefit_nbr
		and t2.plan_type = t1.plan_type
		and t2.effdt = (Select max(effdt)
			from ps_savings_plan
			where emplid = t1.emplid
			and empl_rcd = t1.empl_rcd
			and benefit_nbr = t1.benefit_nbr
			and plan_type = t1.plan_type
			and effdt > t1.effdt))
order by t1.emplid,t1.empl_rcd
end-select

if $plan_terms = 'Y'
   new-page
end-if

end-procedure

!***********************************************************************
begin-procedure select-empl-info
!***********************************************************************
#debug8 display 'select-empl-info'
begin-select 
yz.company
yz.paygroup
yz.deptid
za.name
yz.empl_status 
from ps_job yz, ps_personal_data za
where yz.emplid = &t1.emplid
and yz.empl_Rcd = &t1.empl_rcd
and yz.effdt = (Select max(effdt)
		from ps_job 
		where emplid = yz.emplid
		and empl_Rcd = yz.empl_rcd
		and effdt <= sysdate)
and yz.effseq = (Select max(effseq)
		from ps_job
		where emplid = yz.emplid
		and empl_Rcd = yz.empl_Rcd
		and effdt = yz.effdt)
and yz.emplid = za.emplid
end-select
end-procedure

!***********************************************************************
begin-procedure prepare-highly-comp
!***********************************************************************
#debug8 display 'prepare-highly-comp'

move ' ' to $emplid

begin-select ON-ERROR=SQL-Error-Found('Prepare-Highly-Comp')
B3.EMPLID
B3.HIGHLY_COMP_EMPL_P

  move '813' to $gex_tran_id
  move &b3.emplid to $emplid

  move '032' to $gex_data_element
  move '5' to $gex_data_value
  do insert-Record

FROM  PS_BN_PERSON B3   ! PS_PERSONAL_DATA B3! ISDVNPK      08/25/2007     Modified for upgrade 9.0 

WHERE b3.emplid > '0'
and b3.highly_comp_empl_p = 'H'
and exists (select 'XXXX' from ps_savings_plan xyz
        where xyz.emplid = b3.emplid
	and xyz.coverage_elect in ('E','T')
	and [$plan_type_string_3]
	and [$benefit_plan_string_3]
	and effdt = (select max(effdt)
		from ps_savings_plan 
		where emplid = xyz.emplid
		and empl_rcd = xyz.empl_Rcd
		and benefit_nbr = xyz.benefit_nbr
		and plan_type = xyz.plan_type
                and benefit_plan = xyz.benefit_plan))

Order by B3.emplid
end-select

end-procedure


!***********************************************************************
Begin-Procedure check-prev-enrollment
!***********************************************************************
#debug8 display 'Check-prev-enrollment'
! JNB  12/06/1999 logic changed for the from clause
begin-select on-error=sql-error-found('Check-Prev-Enrollment')
D.PLAN_TYPE
D.BENEFIT_PLAN
D.COVERAGE_ELECT
D.COVERAGE_BEGIN_DT
D.EFFDT
  
  if &d.coverage_elect = 'T'
     move &d.effdt to $term_asofdate
     move &a.emplid to $term_emplid
     move &a.empl_rcd to #term_empl_rcd
     do select-empl-status
     Evaluate $empl_status
       when = 'A'
       when = 'L'
       when = 'P'
         move &d.plan_type to $plan_type
         do select-prior-enrol-to-term
         move &et.benefit_plan to $benefit_plan
         if rtrim($benefit_plan,' ') <> ''
           do select-dreyfus-plan
           if $dreyfus_found = 'Y'               ! JNB 12/06/1999
             if rtrim(&y.gex_dreyfus_plan,' ') <>
                rtrim($gex_dreyfus_plan,' ')
               move &y.gex_dreyfus_plan to $gex_dreyfus_plan
               move '813' to $gex_tran_id
               move '608' to $gex_data_element
               move '1' to $gex_data_value
               do insert-Record
               move $prev_dreyfus_plan to $gex_dreyfus_plan
             end-if
           end-if                               ! JNB 12/06/1999
         end-if
     end-evaluate
  else
     move &d.plan_type to $plan_type
     move &d.benefit_plan to $benefit_plan
     do select-dreyfus-plan
     if $dreyfus_found = 'Y'                              ! JNB 12/06/1999
       if rtrim($gex_dreyfus_plan,' ')   = '543351' and   ! JDH 12/22/1999
          rtrim(&y.gex_dreyfus_plan,' ') = '543351'       ! JDH 12/22/1999
         let $skip-new-enrollment = 'Y'                   ! JDH 12/22/1999
       else                                               ! JDH 12/22/1999
         move &y.gex_dreyfus_plan to $gex_dreyfus_plan
         move '813' to $gex_tran_id
         move '608' to $gex_data_element
         move '1' to $gex_data_value
         do insert-Record
         move $prev_dreyfus_plan to $gex_dreyfus_plan
       end-if                                             ! JDH 12/22/1999
     end-if                                               ! JNB 12/06/1999
   end-if

from ps_savings_plan d
where d.emplid = &a.emplid
and d.empl_rcd = &a.empl_Rcd
and d.benefit_nbr = &a.benefit_nbr
and d.effdt = (select max(effdt)
                 from ps_savings_plan
                where emplid = d.emplid
		  and empl_rcd = d.empl_rcd
		  and benefit_nbr = d.benefit_nbr
		  and coverage_elect in ('E')    ! JNB ,'T') 12/06/99
		  and plan_type = &a.plan_type !SXK 09/22/1999 
                  and benefit_plan <> &a.benefit_plan 
		  and effdt < &a.effdt)
and d.benefit_plan <> &a.benefit_plan        !JNB added 12/06/1999
and d.coverage_elect = 'E'                   !JNB added 12/06/1999
and d.plan_type = &a.plan_type               !JNB added 12/06/1999 

end-select
end-procedure

!***********************************************************************
Begin-procedure select-prior-enrol-to-term
!***********************************************************************
#debug8 display 'select-prior-enrol-to-term'
begin-select on-error=sql-error-found('Select-Prior-Enrol-To-Term')
ET.BENEFIT_PLAN
FROM PS_SAVINGS_PLAN ET
WHERE ET.EMPLID = $term_emplid
and et.empl_rcd = #term_empl_rcd
and et.plan_type = $plan_type
and et.coverage_elect = 'E'
and et.effdt = (select max(effdt)
		from ps_savings_plan
		where emplid = et.emplid		
		and empl_rcd = et.empl_rcd
		and plan_type = et.plan_type
		and benefit_nbr = et.benefit_nbr
		and effdt < $term_asofdate)
end-select
end-procedure

!***********************************************************************
begin-procedure select-empl-status
!***********************************************************************
#debug8 display 'select-empl-status'
move ' ' to $empl_status
begin-select on-error=sql-error-found('Select-Empl-Status')
E.EMPL_STATUS
e.effdt 
 move &e.empl_Status to $empl_Status
from ps_job e
where e.emplid = $term_emplid
and e.empl_Rcd = #term_empl_rcd
and e.effdt = (select max(Effdt)
		from ps_job
		where emplid = $term_emplid
		and empl_rcd = #term_empl_rcd)
!		and effdt <= $term_effdt)
and e.effseq = (Select max(effseq)
		from ps_job
		where emplid = $term_emplid
		and empl_rcd = #term_empl_rcd
		and effdt = e.effdt)
end-select
end-procedure

!***********************************************************************
begin-procedure select-term-reason
!***********************************************************************
#debug8 display 'select-term-reason'
move ' ' to $term_reason
begin-select on-error=sql-error-found('Select-Term-Reason')
ETe.ACTION_REASON
 move &ete.action_reason to $term_reason
from ps_job ete
where ete.emplid = $term_emplid
and ete.empl_Rcd = #term_empl_rcd
and ete.effdt = (select min(Effdt)
		from ps_job
		where emplid = $term_emplid
		and empl_rcd = #term_empl_rcd
		and empl_Status not in ('A','L','P')
		and effdt > (select max(et1.effdt)
				from ps_job et1
				where et1.emplid = $term_emplid
				and et1.empl_Rcd = #term_emplid
				and et1.empl_status in ('A','L','P') ))
!				and et1.effdt <= $term_effdt))
and ete.effseq = (Select max(effseq)
		from ps_job
		where emplid = $term_emplid
		and empl_rcd = #term_empl_rcd
		and effdt = ete.effdt)
end-select
end-procedure

!***********************************************************************
Begin-Procedure select-termination-date
!***********************************************************************
#debug8 display 'select-termination-date'
begin-select on-error=sql-error-found('Select-Termination-Date')
h.termination_dt
from ps_employment h
where h.emplid = $term_emplid
and h.empl_Rcd = #term_empl_rcd
end-select
end-procedure

!AXL 10/19/2000 - New term check procedure - Begin
!***********************************************************************
Begin-Procedure select-termination-date-jph
!***********************************************************************
#debug8 display 'select-termination-date-jph'
	let $term_found = 'N'
begin-select on-error=sql-error-found('Select-Termination-Date-Jph')
jph.emplid
jph.company
jph.paygroup
jph.deptid
jph.effdt
jph.action_reason
jph.empl_status !KMW 5/18/2006
za2.name

	let $term_found = 'Y'

from ps_job jph, ps_personal_data za2
where jph.emplid    = $term_emplid
and   jph.empl_Rcd = #term_empl_rcd
and   jph.emplid    = za2.emplid
and   jph.effdt = (select max(Effdt) from ps_job
		   where jph.emplid = emplid
	             and jph.empl_rcd = empl_rcd
                     and empl_Status not in ('A','L','P')
	             and action_dt between $range_begin_dt and $range_end_Dt)
and   jph.effseq = (Select max(effseq) from ps_job
		   where jph.emplid    = emplid
		     and jph.empl_rcd = empl_rcd
		     and jph.effdt     = effdt)
end-select
end-procedure
!AXL 10/19/2000 - New term check procedure - End

!***********************************************************************
Begin-Procedure select-Dreyfus-Plan
!***********************************************************************
#debug8 display 'select-dreyfus-plan'
move 'N' to $dreyfus_found

begin-select on-error=sql-error-found('Select-Dreyfus-Plan')
y.gex_dreyfus_plan
 move 'Y' to $dreyfus_found
from ps_gex_dreyfus_map y
where y.plan_type = $plan_type
and y.benefit_plan = $benefit_plan
end-select
if $dreyfus_found = 'N'
! JNB 12/06/1999
   use-report Error-Report
   Print 'There is no mapping for plan type ' (+1,3)
   Print $plan_type                           (,38)
   Print ' and benefit plan '                 (,42)
   Print '  in GEX_DREYFUS_MAP table'         (,50)
   Print $emplid                              (,80)
   use-report ET-Report       
!   display 'There is no mapping for plan type ' noline
!   display $plan_type noline
!   display ' and benefit plan ' noline
!   display $benefit_plan noline
!   display '  in GEX_DREYFUS_MAP table'
!   display $emplid
   
!   stop
! JNB 12/06/1999
end-if

end-procedure

!***********************************************************************
!Begin-Procedure Check-Bonus-Payments
!***********************************************************************
!let #bonus_payments = 0

!begin-select on-error=sql-error-found('Check-Bonus-Payments')
!sum(F.OTH_EARNS) &bonus_payments
!move &bonus_payments to #bonus_payments
!from ps_pay_oth_earns f, ps_pay_earnings f1, ps_pay_check f2
!where f2.emplid = $emplid_bonus
!  and f2.empl_rcd = #empl_rcd
!  and f2.pay_end_dt = $pay_end_dt
! and f2.company = f1.company
!  and f2.paygroup = f1.paygroup
!  and f2.pay_end_dt = f1.pay_end_dt
!  and f2.off_cycle = f1.off_cycle
!  and f2.page_num = f1.page_num
!  and f2.line_num = f1.line_num
!  and f2.sepchk = f1.sepchk
!  and f2.paycheck_status = 'F'
!  and f1.company = f.company
!  and f1.paygroup = f.paygroup
!  and f1.pay_end_dt = f.pay_end_dt
!  and f1.off_cycle = f.off_cycle
!  and f1.page_num = f.page_num
!  and f1.line_num = f.line_num
! and f1.addl_nbr = f.addl_nbr
!  and f.erncd in ('510','511','512','517')
!end-select
!end-procedure
  
!*********************************************************************
! Insert Record into Dreyfus work table
!*********************************************************************
begin-procedure Insert-Record
!***********************************************************************
#debug8 display 'insert-record'
#debug9	display $gex_dreyfus_plan
#debug9	display $gex_tran_id
#debug9	display $emplid
#debug9	display $gex_data_element
#debug9	display $gex_data_value

begin-sql on-error=sql-error-found('Insert-Record')
INSERT INTO PS_GEX_DREYFUS_WRK
VALUES
($GEX_DREYFUS_PLAN,
$GEX_TRAN_ID,
$EMPLID,
$GEX_DATA_ELEMENT,
nvl($GEX_DATA_VALUE,' '))
end-sql

let $gex_data_element = ' '
let $gex_data_value = ' '

end-procedure


!*********************************************************************
! Reads from Temp table and creates records
!*********************************************************************
begin-procedure Write-Indicative-Data
#debug8 display 'write-indicative-data'
let $pay_end_dt_yy = substr($pay_end_Dt_dtu,3,2)
let $pay_end_dt_mm = substr($pay_end_dt_dtu,6,2)
let $pay_end_dt_dd = substr($pay_end_dt_dtu,9,2)
let $pay_end_dt_yymmdd = $pay_end_dt_yy||$pay_end_dt_mm||$pay_End_dt_dd

move 0 to #write_plan_count

Begin-select on-error=sql-error-found('Write-Indicative-Data')
I.GEX_DREYFUS_PLAN 
I.GEX_TRAN_ID_C () on-break print=never level=1 save=$prev_tran after=tran-after
		before=tran-before
I.EMPLID
I.GEX_DATA_ELEMENT_C
I.GEX_DATA_VALUE
P.NAME
   unstring &p.name by ',' into $last_name $rest_of_name
   let $name = $last_name||', '||$rest_of_name

   evaluate &i.gex_tran_id_c
	when = '800'
	   write 1 from '800':3
			'02':2
			&i.gex_dreyfus_plan:6
			' ':3
			&i.emplid:9
			'04':2
			' ':4
			' ':5
			&i.emplid:13
			$name:30
			' ':3

       when = '813'

          if &i.gex_data_element_c = '011'
            let $name = ' '
	    let $last_name = ' '
	    let $rest_of_name = ' '
     	    unstring &i.gex_data_value by ',' into $last_name $rest_of_name
	    let $name = $last_name||', '||$rest_of_name
 	    move $name to $out_value
          else
            move &i.gex_data_value to $out_value
          end-if

	  write 1 from  '813':3
			' ':2
			&i.gex_dreyfus_plan:6
			' ':3
			&i.emplid:9
			&i.gex_data_element_c:3
			$out_value:32
			' ':1
			$pay_end_dt_yymmdd:6
			' ':15
   end-evaluate

   add 1 to #write_plan_count
		
from ps_gex_dreyfus_wrk i, ps_personal_Data p
where p.emplid = i.emplid
order by i.gex_dreyfus_plan, i.gex_Tran_id_c, i.emplid, i.gex_data_element_c
end-select
close 1
end-procedure

!*********************************************************************
!Writes header for 813, 800
!*********************************************************************
begin-procedure tran-before
!***********************************************************************
#debug8 display 'tran-before'

 let $header_string = $pay_end_dt_yymmdd||'.'||&i.gex_tran_id_c

 write 1 from   '002':3
		' ':2
		&i.gex_dreyfus_plan:6
		' ':12
		'DEFINE':6
		' ':4
		$header_string:10
		' ':37

 add 1 to #write_plan_count

end-procedure

!*********************************************************************
!Writes trailer for 813, 800
!*********************************************************************
begin-procedure tran-after
!***********************************************************************
#debug8 display 'tran-after'

 let $pay_end_dt_mmddyyyy = $pay_end_dt_mm||$pay_End_Dt_dd||substr($pay_end_dt_dtu,1,4)

! move #write_plan_count to #out bbbbb9
 move #write_plan_count to #out 

 let $out = to_char(#out)
 let #len = length($out)
 let #zero_length = 6 - #len
 let #i = 0

 while #i < #zero_length
   let $out = '0'||$out
   add 1 to #i
 end-while
 
 write 1 from   'ZZZ':3
		' ':2
		&i.gex_dreyfus_plan:6
		'Giant Eagle Inc':32
		$pay_end_dt_mmddyyyy:8
		$out:6
		' ':23

 let #write_plan_count = 0

end-procedure


!*********************************************************************
! Address change report 
!*********************************************************************
begin-procedure Address-Change-Report
!***********************************************************************
#debug8 display 'address-change-report'
use-report address-report
begin-select on-error=sql-error-found('Address-Change-Report')
J1.COMPANY 
J1.PAYGROUP
J1.DEPTID 
J.EMPLID  
J.EMPL_RCD
p1.name 
P1.ADDRESS1
p1.ADDRESS2
p1.city
p1.state
p1.postal !SXK 11/23/99 Changed from zip
p1.birthdate
j.name 
j.ADDRESS1
j.ADDRESS2
j.city
j.state
j.postal
j.birthdate


  Do Get-Benefit-Program  !AXL 6/20/2003 New

  if &p1.name <> $prev_name

     show  '&p1.name <> &j.name ' &p1.name ' ' &j.name
     if rtrim(&p1.name,' ') <> rtrim(&j.name,' ')
        let $flag_name = '*'||&p1.name
     else
        let $flag_name = &p1.name
     end-if

     show  '&p1.address1 <> &j.address1 ' &p1.address1 ' ' &j.address1
     if rtrim(&p1.address1,' ') <> rtrim(&j.address1,' ')
        let $flag_address1 = '*'||&p1.address1
     else
        let $flag_address1 = &p1.address1
     end-if
 
     if rtrim(&p1.address2,' ') <> rtrim(&j.address2,' ')
        let $flag_address2 = '*'||&p1.address2
     else
        let $flag_address2 = &p1.address2
     end-if

     if rtrim(&p1.city,' ') <> rtrim(&j.city,' ')
        let $flag_city = '*'||&p1.city
     else
        let $flag_city = &p1.city
     end-if

     if rtrim(&p1.state,' ') <> rtrim(&j.state,' ')
        let $flag_state = '*'||&p1.state
     else
        let $flag_state = &p1.state
     end-if

     if rtrim(&p1.postal,' ') <> rtrim(&j.postal,' ')
        let $flag_postal = '*'||&p1.postal
     else
        let $flag_postal = &p1.postal
     end-if

     show  '&p1.birthdate <> &j.birthdate ' &p1.birthdate ' ' &j.birthdate
     if &p1.birthdate <> &j.birthdate
        let $flag_birthdate = '*'||&p1.birthdate
     else
        let $flag_birthdate = &p1.birthdate
     end-if

        print &bp.benefit_program  (+1,3)	!AXL 6/20/2003
        print '/'    		()		!AXL 6/20/2003
        print &j1.company  	()
        print '/'    		()
        print &j1.paygroup 	()
        print '/' 		()
        print &j1.deptid 	()
        print &j.emplid 	(,21)
        print $flag_name 	(,35)
        print $flag_address1 	(,75)
        print $flag_city 	(,115)
        print $flag_state 	(,140)
        print '/' 		()
        print $flag_postal 	()
        print $flag_birthdate 	(,155)

        if rtrim($flag_address2,' ') <> ''
           print $flag_address2 	(+1,75)
        end-if
        print ' ' 		(+1,1)

  end-if
  move &p1.name to $prev_name
   

from ps_audit_gex_empl j, ps_personal_Data p1, ps_job j1
where 
!j.name = ' ' 
!SXK 10/18/1999 Begin
!   j.birthdate is null
!SXK 10/18/1999 End
  p1.emplid = j.emplid
 and j1.emplid = j.emplid
 and j1.empl_rcd = j.empl_rcd
 and j1.effdt = (Select max(effdt)
		from ps_job
		where emplid = j1.emplid
		and empl_Rcd = j1.empl_Rcd
		and effdt <= $range_end_Dt)
 and j1.effseq = (select max(effseq)
		from ps_job		
		where emplid = j1.emplid
		and empl_Rcd = j1.empl_Rcd
		and effdt = j1.effdt)
order by p1.name
end-select

end-procedure

!AXL 6/20/2003 - New Proc - Begin
!***********************************************************************
begin-procedure Get-Benefit-Program
!***********************************************************************
#debug8 display 'Get-Benefit-Program'

BEGIN-SELECT 
BP.Benefit_Program 

  FROM PS_BEN_PROG_PARTIC BP
  WHERE BP.EMPLID   = &J.EMPLID
    AND BP.EMPL_RCD = &J.EMPL_RCD
    AND BP.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_BEN_PROG_PARTIC
        WHERE BP.EMPLID   = EMPLID
          AND BP.EMPL_RCD = EMPL_RCD
          AND BP.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND EFFDT <= $RANGE_END_DT) 

end-select

end-procedure
!AXL 6/20/2003 - New Proc - End

!***********************************************************************
begin-procedure Select-Pay-End-Dt
!***********************************************************************
#debug8 display 'select-pay-end-dt'
begin-select
MAX(PC.PAY_END_DT)      &pay_end_dt
  move &pay_end_dt   to $pay_end_dt
FROM   PS_PAY_CALENDAR PC
WHERE  PC.PAY_END_DT <= $X000_WHERE_SELECT_ASOFDATE 
AND    PC.PAY_CONFIRM_RUN = 'Y'
end-select
  display 'Last Confirmed Pay End Date: ' noline
  display $pay_end_dt

if rtrim($pay_end_dt,' ') <> ''

   do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
   do dtu-subtract-days($pay_end_dt_dtu,2,$range_begin_dt_dtu)
   do convert-from-dtu-date($range_begin_dt_dtu,$range_begin_dt)

   do dtu-add-days($pay_end_dt_dtu,4,$range_end_dt_dtu)
   do convert-from-dtu-date($range_end_dt_dtu,$range_end_dt)

   display 'Range Begin Dt: ' noline
   display $range_begin_dt
   display 'Range End Dt: ' noline
   display $range_end_dt

else

   display 'No Pay End Dt found prior to ' noline
   display $X000_WHERE_SELECT_ASOFDATE
   stop

end-if

end-procedure

!AXL 3/13/2003 New - Begin
!***********************************************************************
begin-procedure archive-audit-info
!***********************************************************************
#debug8 display 'archive-audit-info'


begin-sql on-error=sql-error-found('populate-audit-tbl')
 insert into ps_gex_emplaud_bkp
 (select 'GEXBN608',SYSDATE,'C','RECNM',EMPLID, EMPL_RCD, NAME,
         ADDRESS1, ADDRESS2, CITY, STATE, POSTAL, BIRTHDATE
  FROM PS_AUDIT_GEX_EMPL)
end-sql

begin-sql on-error=sql-error-found('archive-audit-info')
!AXL 1/9/2000 New routine to keep 6 months of data - Begin
delete from ps_gex_emplaud_bkp
where audit_stamp < 
      (select distinct add_months(max(audit_stamp), -6) 
      from ps_gex_emplaud_bkp)
!AXL 1/9/2000 New routine to keep 6 months of data - End
end-sql

end-procedure
!AXL 3/13/2003 New - End

!***********************************************************************
begin-procedure truncate-audit-record
!***********************************************************************
#debug8 display 'truncate-audit-record'
begin-sql on-error=sql-error-found('Truncate-Audit-Record')
truncate table ps_audit_gex_empl
end-sql
end-procedure

!***********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
!***********************************************************************
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 
!  STOP
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'rotname3.sqc'  !Rotate-Name
#Include 'askaod.sqc'    !Ask-As-Of-Date Routine
#include 'gexxx922.sqc'  !Get pay single row run control
#Include 'gexxx919.sqc'  !Get Dedcd multiple row table
!#include 'gexaltse.sqc'  !Alter session SQC
!#Include 'gexaudem.sqc'  Formats AUDIT_GEX_EMPL AXL 3/13/2003 disable for now
#include 'gexrehdt.sqc'	 !GEX-MXT 03/24/2008 Fixed for REHIRE DT
