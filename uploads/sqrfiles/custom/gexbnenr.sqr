!***********************************************************************
! GEXBNENR: Benefits Enrollment Form                                   *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1997 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 7/02/98 6:47p    $                                      *
!  $Revision:: 7                $                                      *
!  $Workfile:: GEXBNENR.SQR       $                                    *
!                                                                      *
!***********************************************************************
!                                                                      *
! Function: Generate the Benefit Enrollment Form                       *
! Input:   PS_BAS_PARTIC          -  Participant Level Record          *
!          PS_BAS_PARTIC_PLAN     -  Plan Type Level Record            *
!          PS_BAS_PARTIC_OPTN     -  Option Level Record               *
!          PS_BAS_PARTIC_COST     -  Cost Level Record                 *
!          Enrollment Tables      -  Get Participant & Dependent/Benef *
!                                    Current Elections                 *
!          PS_PERSONAL_DATA       -  Get Participants Name & Address   *
!                                                                      *
! Output: 1 Enrollment Form Per Validated Participant Where the Form   *
!         has not all ready been printed.                              *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#    INIT	DATE     	DESCRIPTION OF THE CHANGE              *
!***********************************************************************
! GBNC60   SXK	12/01/1998	INITIAL CREATION                       *
!                                                                      *
! GBNC60   SXK  12/23/1998      Modified to not to print unless        *
!                               multiple options exist for at least    *
!                               for one plan type.  Printing 401k on a *
!                               separate page.  Not to print profit    *
!                               sharing, deferred comp.                *
!                                                                      *
!          SXK	02/10/1999	Modified not to print prescription,    *
!                               supplemental life benefit plans unless *
!                               they are already enrolled (This applies*
!                               to only some benefit plans).Similarily,*
!                               not to print cost info unless enrolled *
!                               in spouse plans (This also applies only*
!                               to some benefit plans).  Modified to   *
!                               not print for every plan type unless   *
!                               they have multiple options to choose.  *
!                               Removed Empl+child, empl+spouse        *
!                                                                      *
!	   SXK	02/23/1999	Modified to not to print life insurance*
!                               dependent info. Also modified text in  *
!                               dependent section and main section.    *
!                                                                      *
!	   SXK	04/20/1999	Modified incorrect subselects while    *
!                               fetching current elections.  See       *
!                               references SXK 04/20/1999.             *
!                                                                      *
!          SXK	11/23/1999      Changed from zip to postal             *
!                                                                      *
!          CWB  08/28/2000 	Changes to accommodate Columbus        *
!                               benefit programs C06 and C07           *
!                                                                      *
!          AXL  09/14/2000      Added 7.5 functionality to printing    *
!                               single emplid's.                       *
!                               New check for Vision coverage to impact*
!                               final page on form.                    *
!                                                                      *
!          AXL  02/14/2001      Added a line check procedure to        *
!                               to evaluate the need for a page break. *
!                                                                      * 
!          CWB  08/20/2001 	Changes to accommodate Toledo          *
!                               benefit programs C10 and C11           *
!                                                                      * 
!          GBD  06/17/2002      Prevent 401k information from printing *
!                               on the enrollment form.                *
!                                                                      *
!          GBD  06/18/2002      Corrected Code in Max Effective Date   *
!                               selection.                             *
!                                                                      *
!          GBD  08/09/2002      Benefit_Rcd# references needed updated *
!                               to Benefit_Rcd_Nbr.                    *
!                               Empl_Rcd# references needed updated to *
!                               Empl_Rcd.                              *
!                                                                      *  
!          CWB  05/01/2003      Expanded the edit for EVENT_ID         *
!                                       from '9' to '999'              *
!                                                                      *   
!          AXL  11/21/2003      Various updates to change the overall  *
!                               format to conform with Open Enrollment *
!                               forms.                                 *
!                                                                      *
! HR-10847 AXL  1/21/2005       Modify to incorporate new logic from   *
!                               GEXBNOER for coverage code descrs &    *
!                               column headers.                        *
!                                                                      *
! 10872    AXL  05/31/2005      Always print 4 columns in grid.        *
!                                                                      *
!          AXL  09/01/2005      Add logic for a new mailer page for a  *
!                               window address envelope.               *
!								       *
! 11151    DXS  02/13/2007      Made printing changes in procedure     *
!				Print-First-Pg-Header, Bottom-Line     *
!                               and Bottom-Line-New.		       *
!				Added procedure Get-Mapp-Emplid        *
!				Changed the $prcs_process_instance = ''*
!				logic for testing code via SQRW.       *
!                               Added new procedure Init-Random-Number *
!                               called from Init-Report.               *
!                               Added new procedure Get-Random-Number  *
!				called from Select-Data                *
! ITG-43752 NRR 10/30/2007      Modify GEXBNENR (format only) to       *
!                               accommodate new plan types for 2008    *
!           KXY 06/20/2008	VENDKXY changes done for wrong amounts *
!	   KXY  06/25/2008	VENDKXY Commented the code to get the  *
!				correct min/max values in 9.0	       *
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid
!***********************************************************************

#include 'setenv.sqc'
#Include 'setup01.sqc'   !Printer and page-size initialization

!******************************
Begin-Procedure Init-Variables
!******************************

#define OE_Return_Dt  '11/15/'  !Printed in Heading for Open Enrollment
#define EM_Return_Dt  '2 weeks' !Printed in Heading for Event Maintenance

#define HEADING_LINES 3         !Number of heading lines

#define SMALL         '8'       !Small point size
#define NORM          '10'      !Normal point size
#define BIG           '14'      !Large point size
#define NORM_LNSIZE   '10'      !Normal Line Size
#define NORM_LNLENGTH 80        !Normal Line Length
#define BIG_LNSIZE    '20'      !Large Line Size
#define WIDTH         24        !Width of dep name box
#define DEPCOL        5         !Dependent name column
#define BOX_LEN       12        !Width of plan boxes
#define SHADE         25        !25 percent darkness
#define SMAL_LNSIZE   5         !Box and horz line size
#define BIG_LNSIZE    10        !Bigger Box and horz line size AXL 11/21/2003 New
#define CRED_LNLENGTH 35        !Line Length for Credits Heading
#define OPTN_LNLENGTH 35        !Line Length for Option Heading !***AXL 11/21/2003 was 50
#define SAV_LNLENGTH  25        !Line Length for Option Heading

#define COVRG_MASK    $9,999,999  !Used with Life Insurance Coverages
#define COVRG_MASK2   $,$$$,$$$.99 	!AXL 11/2003 New 
#define PER_PAY_MASK  $99,999.99
#define PER_PAY_MASK2 $,$$$.99 		!AXL 11/2003 New 
#define CREDIT_MASK   '$9,999.99'

#define INVCOL        5         !Benefit plan column
#define OPTCOL        5         !Investment option name column
#define O_WIDTH       5         !Width of invest opt box
#define O_BOX_LEN     12        !Width of percent box

let #Heading_Count = 0          !Count number of regular headings
let #Page_Maximum  = 57         !Maximum physical rows before bottom line
let #Page_Max_Last = 40         !Maximum physical rows before last page footer
let #Start_Row     = 1          !1st row to Print Header
let #Start_Footer  = 41         !Row to start footer (does not include header)

let #ccol1  = 25                !Employee Only
let #ccol2  = 34                !Employee + Spouse
let #ccol3  = 42                !Employee + Children
let #ccol4  = 50                !Employee + Family
let #ccol5  = 59                !Employee Elections
let #ccol6  = 72                !EmplId at bottom of page
let #ccol7  = 36                !EmplId Name
let #ccol8  = 3                 !Cash Box

let #ccol8B = 20                !FSA-Health Care Box
let #ccol8C = 37                !FSA-Dep Care Box
let #ccol8D = 55                !Savings Box

let #ccol9  = 10                !FSA Box
let #ccol1a = 29                !Employee Only Option Code  		***AXL 11/21/2003 was 31
let #ccol2a = 38                !Employee + Spouse Option Code		***AXL 11/21/2003 was 39
let #ccol3a = 46                !Employee + Children Option Code	***AXL 11/21/2003 was 47
let #ccol4a = 54                !Employee + Family Option Code		***AXL 11/21/2003 was 55

let #Bottom_Line = 56           !Line for bottom line of each page       

let #orow_depth = 2                 !depth of inv opt lines
let #orow0      = 4                 !first row to print inv opt box
let #orow1      = #orow0+2          !row to start first horz line
                                    !and print inv opt title
let #ocol1      = {WIDTH}+{OPTCOL}  !column to start percent box

let #optnrow1   = 9                 !row to start printing benefit plan
let #optnrow2   = 10                !row to start printing benefit plan
let #optncol4   = 6                 !print inv opt (across) heading
let #optncol5   = 31                !print percent (across) heading

let #stboxrow   = 8                 !start next dep/benef box rows down
let #bencol1    = 10                !print beneficiaries headin
let #drow_depth = 2                 !depth of dep lines
let #drow0      = 9                 !first row to print dep name box
let #drow1      = #drow0+3          !row to start first horz line

let #dcol1      = {WIDTH}+{DEPCOL}  !column to start medical box
let #dpcol      = 12                !column to start dental box
let #depcol1    = 33                !print dep data in medical box
let #depcol4    = 11                !print dependent heading
let #depcol5    = 30                !print plan type headings
let #depcol6    = 42                !print plan type headings
let #depcol7    = 54                !print plan type headings
let #depcol8    = 59                !print plan type headings
let #depcol9    = 71


#ifndef MVS
#ifndef OS400
  encode '<27>E<27>&l0O<27>&l1E' into $reset_cd
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif
#else
  encode '<39>E<39>&l0O<39>&l1E' into $reset_cd
#endif

End-Procedure

!******************************
Begin-Report
!******************************

  do Init-Report

  do Get-Report-Language

  display 'Report Began at: ' NoLine
  do Display-Time

  do Main-Report

  display 'Report Ended at: ' noline
  do display-time

  let $Form_Cnt = EDIT(#Form_Cnt, '99999')
  let $Form_Cnt = LTRIM($Form_Cnt, ' ')
  display '**** '   NoLine
  display $Form_Cnt NoLine
  display ' ENROLLMENT FORMS PRINTED ****'
  display ''

! DXS, comment this after testing
!  do Rollback-Transaction

! DXS, un-comment this after testing
  do StdAPI-Term

End-Report

!******************************
Begin-Procedure Init-Report
!******************************

  let $ReportID    = 'GEXBNENR'
  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime

  display ''
  display 'GEXBNENR: Enrollment Forms'

  do Init-Variables
  do StdAPI-Init
  Let $hold_Dep_Benef = ''   !AXL 11/21/2003

! DXS, added this 
  if $prcs_process_instance = ''
   let $prcs_oprid = 'ISDVDXS'
   let $prcs_run_cntl_id = 'gexbnenr'
  end-if

    do Get-Values
  
    do Init-Random-Number	! DXS, 2/13/07

  Graphic () font 5 {NORM}               !Normal point size.

End-Procedure


!**************************************
! This procedure is used to Initialize
! the random number generation logic
! Called once for every run.
! DXS, 2/13/07
!**************************************
begin-procedure Init-Random-Number
begin-sql
   begin
	DBMS_RANDOM.initialize(TO_NUMBER(TO_CHAR(SYSDATE, 'SSSSS')));;
   end;;
end-sql
end-procedure 



!**********************************
! This procedure is used to read language-dependent text from the Strings table
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS004 program IDS
do Init_Report_Translation('BAS004', $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS004', 'BEN_PGM',      $BAS004-BEN-PGM,     #CW)
do Get_Field_Information ('BAS004', 'DT_OF_BIRTH',  $BAS004-DT-OF-BIRTH, #CW)
do Get_Field_Information ('BAS004', 'SERV_DT',      $BAS004-SERV-DT,     #CW)
do Get_Field_Information ('BAS004', 'EVNT_CLASS',   $BAS004-EVNT-CLASS,  #CW)
do Get_Field_Information ('BAS004', 'FLEX_CREDS',   $BAS004-FLEX-CREDS,  #CW)
do Get_Field_Information ('BAS004', 'FSA_HEALTH_CARE',$BAS004-FSA-HEALTH-CARE,#CW)
do Get_Field_Information ('BAS004', 'CASH',         $BAS004-CASH,        #CW)
do Get_Field_Information ('BAS004', 'FSA_DEP_CARE', $BAS004-FSA-DEP-CARE,#CW)
do Get_Field_Information ('BAS004', 'SAVINGS',      $BAS004-SAVINGS,     #CW)
do Get_Field_Information ('BAS004', 'CRDS_OPT_CD',  $BAS004-CRDS-OPT-CD, #CW)
do Get_Field_Information ('BAS004', 'YOUR_OPT',     $BAS004-YOUR-OPT,    #CW)
do Get_Field_Information ('BAS004', 'NO_DESCR',     $BAS004-NO-DESCR,    #CW)
do Get_Field_Information ('BAS004', 'ONLY',         $BAS004-ONLY,        #CW)
do Get_Field_Information ('BAS004', 'PL_SPOUSE',    $BAS004-PL-SPOUSE,   #CW)
do Get_Field_Information ('BAS004', 'PL_CHILD',     $BAS004-PL-CHILD,    #CW)
do Get_Field_Information ('BAS004', 'PL_FAMILY',    $BAS004-PL-FAMILY,   #CW)
do Get_Field_Information ('BAS004', 'OPTN_SEL',     $BAS004-OPTN-SEL,    #CW)
do Get_Field_Information ('BAS004', 'CST_PER_PAY',  $BAS004-CST-PER-PAY ,#CW)
do Get_Field_Information ('BAS004', 'PRC_OPT_CD',   $BAS004-PRC-OPT-CD,  #CW)
do Get_Field_Information ('BAS004', 'NBR_HOURS',    $BAS004-NBR-HOURS,   #CW)
do Get_Field_Information ('BAS004', 'MAX_ANN_CON',  $BAS004-MAX-ANN-CON, #CW)
do Get_Field_Information ('BAS004', 'MIN_ANN_CON',  $BAS004-MIN-ANN-CON, #CW)
do Get_Field_Information ('BAS004', 'ANN_PLG',      $BAS004-ANN-PLG,     #CW)
do Get_Field_Information ('BAS004', 'ANN_CST',      $BAS004-ANN-COST,    #CW)
do Get_Field_Information ('BAS004', 'PAY_PER_CST',  $BAS004-PAY-PER-CST, #CW)
do Get_Field_Information ('BAS004', 'INVTS',        $BAS004-INVTS,       #CW)
do Get_Field_Information ('BAS004', 'INV_OPT',      $BAS004-INV-OPT,     #CW)
do Get_Field_Information ('BAS004', 'PERCENT',      $BAS004-PERCENT,     #CW)

do Get_Field_Information ('BAS004', 'T00_L01A',     $BAS004-T00-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01B',     $BAS004-T00-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01C',     $BAS004-T00-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T00_L01D',     $BAS004-T00-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01A',     $BAS004-T01-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01B',     $BAS004-T01-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01C',     $BAS004-T01-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T01_L01D',     $BAS004-T01-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T01_L02A',     $BAS004-T01-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L03A',     $BAS004-T01-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L03B',     $BAS004-T01-L03B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L04A',     $BAS004-T01-L04A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L04B',     $BAS004-T01-L04B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05A',     $BAS004-T01-L05A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05B',     $BAS004-T01-L05B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L05C',     $BAS004-T01-L05C,    #CW)
do Get_Field_Information ('BAS004', 'T01_L06A',     $BAS004-T01-L06A,    #CW)
do Get_Field_Information ('BAS004', 'T01_L06B',     $BAS004-T01-L06B,    #CW)
do Get_Field_Information ('BAS004', 'T01_L07A',     $BAS004-T01-L07A,    #CW)
do Get_Field_Information ('BAS004', 'T02_L01A',     $BAS004-T02-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L01A',     $BAS004-T03-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L02A',     $BAS004-T03-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T03_L03A',     $BAS004-T03-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01A',     $BAS004-T04-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01B',     $BAS004-T04-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01C',     $BAS004-T04-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T04_L01D',     $BAS004-T04-L01D,    #CW)
do Get_Field_Information ('BAS004', 'T05_L01A',     $BAS004-T05-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T05_L01B',     $BAS004-T05-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T05_L02A',     $BAS004-T05-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01A',     $BAS004-T06-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01B',     $BAS004-T06-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T06_L01C',     $BAS004-T06-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T07_L01A',     $BAS004-T07-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T08_L01A',     $BAS004-T08-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T09_L01A',     $BAS004-T09-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T09_L01B',     $BAS004-T09-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T10_L01A',     $BAS004-T10-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T10_L01B',     $BAS004-T10-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T11_L01A',     $BAS004-T11-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01A',     $BAS004-T12-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01B',     $BAS004-T12-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T12_L01C',     $BAS004-T12-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01A',     $BAS004-T13-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01B',     $BAS004-T13-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T13_L01C',     $BAS004-T13-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T14_L01A',     $BAS004-T14-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T14_L01B',     $BAS004-T14-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T15_L01A',     $BAS004-T15-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T17_L01A',     $BAS004-T17-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T18_L01A',     $BAS004-T18-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T19_L01A',     $BAS004-T19-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T20_L01A',     $BAS004-T20-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T21_L01A',     $BAS004-T21-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01A',     $BAS004-T22-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01B',     $BAS004-T22-L01B,    #CW)
do Get_Field_Information ('BAS004', 'T22_L01C',     $BAS004-T22-L01C,    #CW)
do Get_Field_Information ('BAS004', 'T22_L02A',     $BAS004-T22-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03A',     $BAS004-T22-L03A,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03B',     $BAS004-T22-L03B,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03C',     $BAS004-T22-L03C,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03D',     $BAS004-T22-L03D,    #CW)
do Get_Field_Information ('BAS004', 'T22_L03E',     $BAS004-T22-L03E,    #CW)
do Get_Field_Information ('BAS004', 'T23_L01A',     $BAS004-T23-L01A,    #CW)
do Get_Field_Information ('BAS004', 'T23_L02A',     $BAS004-T23-L02A,    #CW)
do Get_Field_Information ('BAS004', 'T23_L02B',     $BAS004-T23-L02B,    #CW)
do Get_Field_Information ('BAS004', 'T23_L02C',     $BAS004-T23-L02C,    #CW)

do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
do Get_Field_Information ('BEN1',   'EMPLOYEE_ID2', $BEN1-EMPLOYEE-ID2,  #CW)
do Get_Field_Information ('BEN1',   'EFFDT2',       $BEN1-EFFDT2,        #CW)
do Get_Field_Information ('BEN1',   'DATE_OF_BIRTH2',$BEN1-DATE-OF-BIRTH2,#CW)
do Get_Field_Information ('BEN1',   'SER_DATE2',    $BEN1-SER-DATE2,     #CW)
do Get_Field_Information ('BEN1',   'EVENT_ID2',    $BEN1-EVENT-ID2,     #CW)
do Get_Field_Information ('BEN1',   'PAGE',         $BEN1-PAGE,          #CW)
do Get_Field_Information ('BEN1',   'WAIVE',        $BEN1-WAIVE,         #CW)
do Get_Field_Information ('BEN1',   'ANNUAL',       $BEN1-ANNUAL,        #CW)
do Get_Field_Information ('BEN1',   'PAY_PERIOD',   $BEN1-PAY-PERIOD,    #CW)
do Get_Field_Information ('BEN1',   'OPT_CD2',      $BEN1-OPT-CD2,       #CW)
do Get_Field_Information ('BEN1',   'TOTAL',        $BEN1-TOTAL,         #CW)
do Get_Field_Information ('BEN1',   'SIGNATURE2',   $BEN1-SIGNATURE2,    #CW)
do Get_Field_Information ('BEN1',   'DATE2',        $BEN1-DATE2,         #CW)
do Get_Field_Information ('BEN1',   'COVER_AMT',    $BEN1-COVER-AMT,     #CW)
do Get_Field_Information ('BEN1',   'COST2',        $BEN1-COST2,         #CW)
do Get_Field_Information ('BEN1',   'CREDIT2',      $BEN1-CREDIT2,       #CW)

End-Procedure

!******************************
Begin-Procedure Ask-Values
!******************************

  do Ask-Schedule-Id
  do Ask-EmplID			!AXL - 9/14/2000 - New 7.5 option
  do Ask-Reprint-Prompt
  do Ask-Cost-Freq

End-Procedure

!******************************
Begin-Procedure Get-Values
!******************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-EmplID			!AXL - 9/14/2000 - New 7.5 option
  do Get-Reprint-Prompt
  do Get-Cost-Freq

End-Procedure

!*********************************
Begin-Procedure Ask-Reprint-Prompt
!*********************************

  let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  if ($Reprint = 'Y')
    do Ask-Reprint-Id
  end-if


End-Procedure

!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  let $Reprint_Match = 'N'
  input $Reprint_Id 'Enter Reprint Id'
  let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And ($Reprint_Id <> '')
    do Validate-Reprint-Id
    if ($Reprint_Match = 'N')
      input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    end-if
  End-While

End-Procedure

!**********************************
Begin-Procedure Validate-Reprint-Id
!**********************************

  let $Reprint_Match = 'N'

Begin-SELECT
PRINT_ID
  let $Reprint_Match = 'Y'
FROM  PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id
AND   SCHED_ID = $Sched_Id
End-SELECT

End-Procedure

!******************************
Begin-Procedure Ask-Cost-Freq
!******************************

  let $Cost_Freq = ''

  While ($Cost_Freq <> 'A') And ($Cost_Freq <> 'D')
    input $Cost_Freq 'Enter Cost Frequency as (A)nnual or (D)eduction Period [A/D]'
    let $Cost_Freq = UPPER(RTRIM($Cost_Freq, ' '))
  End-While

End-Procedure

!******************************
Begin-Procedure Main-Report
!******************************

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Forms
      do Delete-Reprint-Id
    end-if
  else
    do Print-Forms
  end-if

End-Procedure

!******************************
Begin-Procedure Reprint-Forms
!******************************
!  display 'Reprint Forms'

Begin-SELECT
PRN.PRINT_ID
PRNP.EMPLID
PRNP.BENEFIT_RCD_NBR
PRNP.EVENT_ID

  let $Where = '(A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''RE'',''ET'',''EE'')) And '
  let $Where = $Where || '(A.EMPLID = '''  || &PRNP.EmplId || ''') And '
  let $TempVal = edit(&PRNP.BENEFIT_RCD_NBR, '9')
#ifdef INFORMIX
  let $Where = $Where || '(A.EMPL_RCDN = ' || $TempVal     || ') And '
#else
  let $Where = $Where || '(A.EMPL_RCD = ' || $TempVal     || ') And '
#endif

! CWB 05/01/2003 BEGIN
!  let $TempVal = edit(&PRNP.Event_Id, '9')
  let $TempVal = edit(&PRNP.Event_Id, '999')
! CWB 05/01/2003 END

  let $Where = $Where || '(A.EVENT_ID = '  || $TempVal     || ') '
  
  !show '$Where           :'  $Where                               !ITG-43752 NRR 10/30/2007
  !show '$Reprint_Id      :'  $Reprint_Id                          !ITG-43752 NRR 10/30/2007
  !show '$Sched_Id        :'  $Sched_Id                            !ITG-43752 NRR 10/30/2007

  do Select-Data

FROM  PS_BAS_PRNT        PRN,
      PS_BAS_PRNT_PARTIC PRNP
WHERE PRN.PRINT_ID = $Reprint_Id
AND   PRN.PRINT_ID = PRNP.PRINT_ID
AND   PRN.SCHED_ID = $Sched_Id
ORDER BY PRNP.EMPLID ASC,
         PRNP.BENEFIT_RCD_NBR ASC,
         PRNP.EVENT_ID ASC
End-SELECT
End-Procedure

!******************************
Begin-Setup
!******************************

#define Laser Postscript
Page-Size 63 130

 Declare Printer
    Type=HPLASERJET         ! Types are POSTSCRIPT, HPLASERJET,
    Orientation=Portrait
    Top-Margin= .4
    Left-Margin=.60         ! or LINEPRINTER
    Font=5
    Point-Size=12
    Char-Size=7.2

End-Setup

!******************************
Begin-Procedure Print-Forms
!******************************
!  display 'Print-Forms'

  !AXL - 9/14/2000 - New 7.5 option Begin
  !Where clause if not reprinting...
    let $where = '(A.EVENT_STATUS = ''O'') And '
    if $EmplID = ''
      let $where = $where || '((A.BAS_PROCESS_STATUS=''PR'' And '
      let $where = $where || 'A.STATUS_DT > A.OPTION_NOTIFY_DT) Or '
      let $where = $where || '(A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''ET'',''EE'') And '
      let $where = $where || 'A.OPTION_NOTIFY_DT IS NULL))'
    else
      let $where = $where || 'A.BAS_PROCESS_STATUS IN (''PR'',''NT'',''ET'',''EE'') And '
      let $where = $where || 'A.EMPLID = ''' || $EmplID || ''''
    end-if
   !AXL - 9/14/2000 - New 7.5 End

 #debug8 show '$where ' $where 
 show '$where ' $where 
    do Select-Data

End-Procedure

!******************************
Begin-Procedure Select-Data
!******************************
!  display 'Select-Data'
	#debug8 show '$Sched_Id ' $Sched_Id
	show '$Sched_Id ' $Sched_Id

Begin-SELECT
A.SCHED_ID
A.EMPLID
A.EMPL_RCD
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.BENEFIT_PROGRAM
A.EVENT_CLASS
A.EVENT_DT
B.NAME
  let $Name = RTRIM(&b.Name, ' ')			!AXL 9/1/2005
  do Rotate-Name  !convert to First name Last name	AXL 9/1/2005
B.ADDRESS1
B.ADDRESS2

B.CITY
B.STATE
B.POSTAL !SXK 11/23/99 Changed from zip to postal
  let $bb_city_st_zip = RTRIM(&B.City, ' ') || ',  ' || RTRIM(&B.State,' ') || ' ' || &B.Postal

B.BIRTHDATE
C.EFFDT
C.DESCR
C.DFLT_CREDIT_RLLOVR
D.SERVICE_DT
D.EMPL_RCD

  move 'N' to $multiple_options
 
  do Has-Eligible-Opts

  if $multiple_options = 'Y' !(&EligOptsCnt > 0)  !Bypass EEs that don't have any eligible options 
	#debug8 show 'A.EMPLID ' &A.EMPLID
	 show 'A.EMPLID ' &A.EMPLID
    do Get-Random-Number	! DXS, 2/13/07. To get random number
    let #Page_Number = 0
    add 1 to #Form_Cnt
    do Print-Mailer-Pg		!AXL 9/1/2005
    do Print-First-Pg-Header

  !SXK 12/01/1998 Begin
  !     do Select-Credits-Data
  !SXK 12/01/1998 End

    do Select-Plan
    !do Footer   AXL 11/21/2003 Dis-able footer and page-break logic to condense pages
  !SXK 12/23/1998 Begin
  !  if ($IsEligForSvgsFlag = 'Y')
!GBD 06/17/2002 Begin
!    do select-plan-1

!    if $IsEligForSvgsFlag = 'Y'
!       do Print-Sav-Instructions
!       do Print-Investment-Boxes
!       do Select-Inv-Optns
!       do footer
!    end-if
!GBD 06/17/2002 End
  !SXK 12/23/1998 End

    do check-for-vision		!AXL 09/14/2000 - New check for Vision Cvrg
    do check-for-dental		!AXL 011/21/2003 - New check for Vision Cvrg
    let $dental_vision_combo = $dental_cvrg_flag || $vision_cvrg_flag

    do Determine-Dep-Benef-Exist !AXL 011/21/2003 - Need to know for page-breaking
    !AXL 1/21/2005 New Check for page breaking - Begin
    if $Deps_Exist = 'Y'
       do Determine-Max-Deps
       !show 'max_dep ' $max_dep
       evaluate $max_dep
          when = '01'
	  when = '02'
	  when = '03'
	  when = '04'
	   let #max_dep = 4
	   break
	  when-other
	   let #max_dep = 5
       end-evaluate 
    end-if
    !AXL 1/21/2005 New Check for page breaking - End

    do Process-Dep-Benef
    do Print-Signature-Line
    do Reset-Printer
    do Upd-Status-Date                                                     

  end-if

FROM  PS_BAS_PARTIC    A,
      PS_PERSONAL_DATA B,
      PS_BEN_DEFN_PGM  C,
      PS_EMPLOYMENT    D
WHERE A.SCHED_ID LIKE $Sched_Id
AND   A.PROCESS_IND = 'N'
AND   [$where]           !VENDKXY FOR TESTING                                   
AND   A.EVENT_CLASS <> 'TER'
AND   A.BENEFIT_RCD_NBR    =
      (SELECT MAX(BENEFIT_RCD_NBR)
       FROM   PS_BAS_PARTIC
       WHERE  SCHED_ID     = A.SCHED_ID
       AND    EMPLID       = A.EMPLID
       AND    BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
       AND    EVENT_ID     = A.EVENT_ID)
AND   B.EMPLID          = A.EMPLID
AND   C.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
AND   C.EFFDT = (SELECT MAX(EFFDT)
                 FROM   PS_BEN_DEFN_PGM
                 WHERE  BENEFIT_PROGRAM = C.BENEFIT_PROGRAM
                 AND    EFFDT          <= A.EVENT_DT)
AND   D.EMPLID          = A.EMPLID
AND   D.BENEFIT_RCD_NBR    = A.BENEFIT_RCD_NBR
AND   D.EMPL_RCD       = A.EMPL_RCD
!AXL 09/26/2005 Test Cases Enable / Disable
!and a.emplid in ('191467377','210640868','178600291','142554213') ! ITG-43752 NRR 10/30/2007 !isdvmxr 06/20/2008 testing commented out to slelect emplids
!and a.emplid in ('142554213') !VENDKXY for Testing
!ORDER BY A.EMPLID ASC, A.BENEFIT_RCD_NBR ASC, A.EVENT_ID ASC
! CWB 08/20/2001 BEGIN
!ORDER BY A.BENEFIT_PROGRAM ASC, A.EMPLID ASC, A.BENEFIT_RCD_NBR ASC, A.EVENT_ID ASC
ORDER BY A.BENEFIT_PROGRAM ASC, B.NAME ASC, A.BENEFIT_RCD_NBR ASC, A.EVENT_ID ASC
! CWB 08/20/2001 END

End-SELECT

End-Procedure


!********************************
! Procedure which generates the 
! random number. Called for each
! emplid that is processed.
! DXS, 02/13/2007
!********************************
begin-procedure Get-Random-Number
begin-select
(1+ABS(MOD(dbms_random.random,9)))	&random_num

	move &random_num to $random_num

FROM dual
end-select
end-procedure 



!AXL 11/21/2003 - New procedure to check for Dep - Begin
!********************************
Begin-Procedure Determine-Dep-Benef-Exist
!********************************
 
  let $Deps_Exist = 'N'

Begin-SELECT

'X'
       
   let $Deps_Exist = 'Y'

FROM  PS_DEPENDENT_BENEF BAX,
      PS_HEALTH_DEPENDNT BBX,
      PS_HEALTH_BENEFIT  BPX
WHERE BPX.EMPLID           = &A.EMPLID
  and BPX.EMPL_RCD         = &D.EMPL_RCD
  and BPX.EFFDT = (SELECT MAX(EFFDT) FROM  PS_HEALTH_BENEFIT 
       WHERE EMPLID          = BPX.EMPLID
       and   EMPL_RCD        = BPX.EMPL_RCD
       and   COBRA_EVENT_ID  = BPX.COBRA_EVENT_ID
       and   PLAN_TYPE       = BPX.PLAN_TYPE
       and   BENEFIT_NBR     = BPX.BENEFIT_NBR
       and   EFFDT          <= &A.Event_Dt)
  and BAX.EMPLID           = BPX.EMPLID
  and BAX.DEP_BENEF_TYPE   IN ('D','O')
  and BBX.EMPLID           = BPX.EMPLID
  and BBX.EMPL_RCD         = BPX.EMPL_RCD
  and BPX.PLAN_TYPE        IN ('10','11','14','1Z')
  AND BPX.PLAN_TYPE        = BBX.PLAN_TYPE
  and BBX.DEPENDENT_BENEF  = BAX.DEPENDENT_BENEF
  and BBX.EFFDT            = BPX.EFFDT

End-SELECT

End-Procedure
!AXL 11/21/2003 - New procedure to check for Dep - End

!AXL 1/21/2005 - New procedure to check for Max Dep
!********************************
Begin-Procedure Determine-Max-Deps
!********************************
 Begin-SELECT

max(bbx2.dependent_benef)  &bbx2_dependent_benef

   let $max_dep = &bbx2_dependent_benef

FROM  PS_DEPENDENT_BENEF BAX2,
      PS_HEALTH_DEPENDNT BBX2,
      PS_HEALTH_BENEFIT  BPX2
WHERE BPX2.EMPLID           = &A.EMPLID
  and BPX2.EMPL_RCD          = &D.EMPL_RCD
  and BPX2.EFFDT = (SELECT MAX(EFFDT) FROM  PS_HEALTH_BENEFIT 
       WHERE EMPLID          = BPX2.EMPLID
       and   EMPL_RCD        = BPX2.EMPL_RCD
       and   COBRA_EVENT_ID  = BPX2.COBRA_EVENT_ID
       and   PLAN_TYPE       = BPX2.PLAN_TYPE
       and   BENEFIT_NBR     = BPX2.BENEFIT_NBR
       and   EFFDT          <= &A.Event_Dt)
  and BAX2.EMPLID           = BPX2.EMPLID
  and BAX2.DEP_BENEF_TYPE   IN ('D','O')
  and BBX2.EMPLID           = BPX2.EMPLID
  and BBX2.EMPL_RCD         = BPX2.EMPL_RCD
  and BPX2.PLAN_TYPE        IN ('10','11','14','1Z')
  AND BPX2.PLAN_TYPE        = BBX2.PLAN_TYPE
  and BBX2.DEPENDENT_BENEF  = BAX2.DEPENDENT_BENEF
  and BBX2.EFFDT            = BPX2.EFFDT

End-SELECT

End-Procedure
!AXL 1/21/2005 - New procedure to check for Max Dep - End

!AXL 09/14/2000 - New procedure to check for Vision Cvrg - Begin
!********************************
Begin-Procedure Check-For-Vision
!********************************
  
   let $vision_cvrg_flag = 'N'

Begin-SELECT loops = 1

VC.BENEFIT_PROGRAM

   let $vision_cvrg_flag = 'Y'

FROM PS_BEN_DEFN_PGM VC,
     PS_BEN_DEFN_PLAN VC2

  WHERE VC.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM

     AND VC.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_BEN_DEFN_PGM 
        WHERE VC.BENEFIT_PROGRAM = BENEFIT_PROGRAM
                      AND EFFDT <= &A.EVENT_DT)

     AND VC.BENEFIT_PROGRAM = VC2.BENEFIT_PROGRAM
     AND VC2.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_BEN_DEFN_PLAN 
        WHERE VC2.BENEFIT_PROGRAM = BENEFIT_PROGRAM
                       AND EFFDT <= VC.EFFDT)

     AND VC2.PLAN_TYPE = '14'
     AND VC.EFF_STATUS ='A'

End-SELECT

End-Procedure
!AXL 09/14/2000 - New procedure to check for Vision Cvrg - End

!AXL 011/21/2003 - New procedure to check for Dental Cvrg - Begin
!********************************
Begin-Procedure Check-For-Dental
!********************************
  
   let $dental_cvrg_flag = 'N'

Begin-SELECT loops = 1

DC.BENEFIT_PROGRAM

   let $dental_cvrg_flag = 'Y'

FROM PS_BEN_DEFN_PGM DC,
     PS_BEN_DEFN_PLAN DC2

  WHERE DC.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM

     AND DC.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_BEN_DEFN_PGM 
        WHERE DC.BENEFIT_PROGRAM = BENEFIT_PROGRAM
                      AND EFFDT <= &A.EVENT_DT)

     AND DC.BENEFIT_PROGRAM = DC2.BENEFIT_PROGRAM
     AND DC2.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_BEN_DEFN_PLAN 
        WHERE DC2.BENEFIT_PROGRAM = BENEFIT_PROGRAM
                       AND EFFDT <= DC.EFFDT)

     AND DC2.PLAN_TYPE = '11'
     AND DC.EFF_STATUS ='A'

End-SELECT

End-Procedure
!AXL 011/21/2003 - New procedure to check for Dental Cvrg - End

!********************************
Begin-Procedure Has-Eligible-Opts
!********************************
!  display 'Has-Eligible-Opts'

Begin-SELECT
!SXK 12/23/1998 begin
PL.PLAN_TYPE 
!COUNT(*)  &EligOptsCnt

 do process-options
 #ifdef debug7
   display 'PL.PLAN_TYPE ' noline
   display &PL.PLAN_TYPE
   display '&option_counter ' noline
   display &option_counter
   display '#Option_max_counter ' noline
   display #Option_max_counter
   display '$multiple_options ' noline
   display $multiple_options
 #endif


FROM  PS_BAS_PARTIC_PLAN PL
WHERE PL.SCHED_ID      = &A.Sched_Id
AND   PL.EMPLID        = &A.EmplId
AND   PL.BENEFIT_RCD_NBR  = &A.BENEFIT_RCD_NBR
AND   PL.EVENT_ID      = &A.Event_Id
AND   PL.ELECT_ALLOWED = 'Y'
!SXK 02/10/1999 Begin
AND   PL.PLAN_TYPE  <> '20'
AND   PL.PLAN_TYPE  <> '22'
!AND   PL.PLAN_TYPE  <> '40'
!AND   PL.PLAN_TYPE  <> '41'
AND   PL.PLAN_TYPE  <> '4W'
AND   PL.PLAN_TYPE  <> '4X'
AND   PL.PLAN_TYPE  <> '4Y'
AND   PL.PLAN_TYPE  <> '4Z'
AND   PL.PLAN_TYPE  <> '30'
AND   PL.PLAN_TYPE  <> '31'
AND   PL.PLAN_TYPE  <> '15'              !ITG-43752 10\30\2007  vendnrr - Begin                 
AND   PL.PLAN_TYPE  <> '16'
AND   PL.PLAN_TYPE  <> '17'
AND   PL.PLAN_TYPE  <> '18'              !ITG-43752 10\30\2007  vendnrr - End
!AND   PL.PLAN_TYPE  <> '82'
!SXK 02/10/1999 End

End-SELECT

End-Procedure


Begin-Procedure Process-Options
!  display 'Process-Options'

begin-select 
count(D11.PLAN_TYPE) &option_counter

  move &option_counter to  #Option_max_counter
     if #option_max_counter > 1
     move 'Y' to $multiple_options
  end-if

FROM PS_BAS_PARTIC_OPTN D11
WHERE D11.SCHED_ID = &A.SCHED_ID
  AND D11.EMPLID = &A.EMPLID
  AND D11.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND D11.EVENT_ID = &A.EVENT_ID
  AND D11.PLAN_TYPE = &PL.PLAN_TYPE
  AND D11.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM
  AND D11.EVENT_DT = &A.EVENT_DT
end-select

end-procedure
!******************************
Begin-Heading {HEADING_LINES}
!******************************

  !AXL 011/21/2003 New code for duplex
  if $blank_page='Y'
     !nothing
  else
     !AXL 011/21/2003 New code for duplex

     do Format-Datetime(&A.Event_Dt, $Out, {DEFCMP}, '', '')
     !PLN 07/29/1999 Begin
     !let $Tmp_YY   = SUBSTR($Out,3,2)
     let $Tmp_YY   = SUBSTR($Out,1,4)
     !let $Tmp_YYYY = '19' || $Tmp_YY
     let $Tmp_YYYY = $Tmp_YY
     !PLN 07/29/1999 End

     if RTRIM(&A.Event_Class,' ') = 'OE'
     !***  ' - OPEN ENROLLMENT'
       let $Admin_Type = $BAS004-T00-L01B
     else
     !***  ' - EVENT MAINTENANCE '
       let $Admin_Type = $BAS004-T00-L01C  || &A.Event_Class
     end-if

     !*** ' PERSONAL ENROLLMENT FORM'
     let $Tmp_Text = $Tmp_YYYY || $BAS004-T00-L01A  || $Admin_Type
     if (#Page_Number > 1)
     !***  ' Continued'
       let $Tmp_Text = $Tmp_Text || $BAS004-T00-L01D
     end-if

     add 1 to #Heading_Count

     Graphic () Font 5 {NORM}
     let $Tmp_Text2 = UPPER(&C.Descr)
     if $mailer_pg = 'Y'		!AXL 9/1/2005
        !do nothing			AXL 9/1/2005
     Else				!AXL 9/1/2005
        print $Tmp_Text2                             (#Start_Row,1) Bold
        print $Tmp_Text                              (+1,1) Bold
        Graphic (+0,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}
     end-if
  end-if

  let $blank_page='N'
  !AXL 011/21/2003 New code for duplex

End-Heading

!AXL 9/1/2005 New - Begin
!************************************
Begin-Procedure Print-Mailer-Pg
!************************************

   Graphic () Font 5 {BIG}             !Increase font size
   let $mailer_pg = 'Y'
   print $Name                              (+25,30)	Bold
   print &B.Address1                        (+1,30)	Bold
   if rtrim(&B.Address2,' ') <> ''
      print &B.Address2                     (+1,30)	Bold
      print $bb_city_st_zip                 (+1,30)	Bold	
   else
      print $bb_city_st_zip                 (+1,30)	Bold
   end-if
   Graphic () Font 5 {NORM}             !Restore font size
   New-Page
   let $mailer_pg = 'N'
end-procedure
!AXL 9/1/2005 New - End

!************************************
Begin-Procedure Print-First-Pg-Header
!************************************

do Format-Datetime(&A.Event_Dt, $Out, {DEFCMP}, '', '')
let $Tmp_YY   = SUBSTR($Out,3,2)

!SXK 12/01/1998 Begin
do convert-to-dtu-date(&A.Event_Dt, $Out)
let $Tmp_YYYY = substr($Out,1,4)
!let $Tmp_YYYY = '19' || $Tmp_YY
!SXK 12/01/1998 End

  !AXL 9/1/2005 - Begin
  let $mailer_pg = 'Y'
  new-page
  let $mailer_pg = 'N'
  !AXL 9/1/2005 - End

  !do Get-Mapp-Emplid	! DXS, 02/12/07, Get GE Emplid !GEX_SEC_REENG 2015-04-29 Vahini Katta

print &B.Name                            (+0,1)  !***AXL 11/21/2003 was +1
!***  'Benefit Pgm:'
!SXK 12/04/1998 Begin
!print $BAS004-BEN-PGM                    (,#ccol4)
print 'Benefit Pgm: '                    (,#ccol4)
!SXK 12/04/1998 End
print &A.Benefit_Program                 (,#ccol5)

print &B.Address1                        (+1,1)
!*** 'Employee  ID:'
print $BEN1-EMPLOYEE-ID2                 (,#ccol1)
! print &A.EmplId                          (,#ccol7)
print $mapp_emplid                       (,#ccol7)  ! DXS, 02/12/07, Print GE Emplid

!***  'Effective Date:'
print $BEN1-EFFDT2                    (,#ccol4)
do Format-Datetime(&A.Event_Dt, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol5)

if rtrim(&B.Address2,' ') <> ''
   print &B.Address2                     (+1,1)
else
   print $bb_city_st_zip                 (+1,1)
end-if
!*** 'Date of Birth:'
print $BEN1-DATE-OF-BIRTH2             (,#ccol1)
do Format-Datetime(&B.Birthdate, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol7)
!*** 'Service Date:'
print $BEN1-SER-DATE2                   (,#ccol4)
do Format-Datetime(&D.Service_Dt, $Out, {DEFDATE}, '', '')
print $Out                               (,#ccol5)

if rtrim(&B.Address2,' ') <> ''
   print $bb_city_st_zip                 (+1,1)
else
   print ''                              (+1,1)
end-if
!*** 'Event ID:'
print $BEN1-EVENT-ID2                        (,#ccol1)
print &A.Event_Id                        (,36)
!*** 'Event Class:'
!SXK 12/04/1998 Begin
!print $BAS004-EVNT-CLASS                     (,#ccol4)
print 'Event Class:' (,#ccol4)
!SXK 12/04/1998 End
print &A.Event_Class                     (,#ccol5)

Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}

!---------------------------------------
!Beg of Text
!---------------------------------------

!*** 'This statement lists your benefit options and their associated '
!let $Tmp_Text = $BAS004-T01-L01A
!if ($Cost_Freq = 'A')
!***  'annual'
!  let $Tmp_Text = $Tmp_Text || $BAS004-T01-L01B
!else
!***  'pay period'
!  let $Tmp_Text = $Tmp_Text || ' '|| $BAS004-T01-L01C
!end-if
!***  ' costs.  Use this worksheet to select your '
!***  'coverages for'
!let $Tmp_Text = $Tmp_Text || $BAS004-T01-L01D
!print $Tmp_Text                       (+1,1)
!let $Tmp_Text = $BAS004-T01-L02A || $Tmp_YYYY
!let $Tmp_Text = $Tmp_Text || '.'
!print $Tmp_Text                          (+1,1)

!*** 'Please note that these choices will remain in '
!*** 'effect throughout ' || $Tmp_YYYY || ' unless you '
!*** 'experience a change in family status.'
!*** print $Tmp_Text                          (+1,1)
!let $Tmp_Text = $BAS004-T01-L03A || $Tmp_YYYY
!let $Tmp_Text = $Tmp_Text || $BAS004-T01-L03B
!print $Tmp_Text                          (+1,1)

let $tmp_text = 'This statement lists your benefit options and, '||
                'if applicable, any associated pay period costs.'
print $Tmp_text (+1,1)

let $tmp_Text = 'Use this worksheet to select your coverages.  '
let $Tmp_Text = $Tmp_Text || 'For the coverage you have chosen, check the appropriate box.'
print $tmp_text (+1,1)

!*** 'Check the box next to the desired option and put the option '
!*** 'code in the space provided on the right.'
!let $Tmp_Text = $BAS004-T01-L04A  || $BAS004-T01-L04B
!print $Tmp_Text                          (+1,1)
!11/21/2003 New text - Begin
!print 'For the coverage you have chosen, enter the option code in the space provided on the right.' (+1,1)
!11/21/2003 New text - End

!*** 'Return your completed enrollment form to the Human Resources '
!*** 'Department '

!SXK 12/01/1998 Begin
!let $Tmp_Text = $BAS004-T01-L05A

let $Tmp_Text = 'Return your completed enrollment form to the '
let $Tmp_Text = $Tmp_Text||'Benefits Department.'
print $Tmp_Text (+1,1) Bold
!SXK 12/01/1998 End

!SXK 12/01/1998 Begin
!if RTRIM(&A.Event_Class,' ') = 'OE'
!***  || 'by ' || {OE_Return_Dt} || $Tmp_YY || '. '
!  let $Tmp_Text = $Tmp_Text || $BAS004-T01-L05B
!  let $Tmp_Text = $Tmp_Text || {OE_Return_Dt} || $Tmp_YY || '. '
!else
!***  'within ' || {EM_Return_Dt} || '. '
!  let $Tmp_Text = $Tmp_Text || $BAS004-T01-L05C
!  let $Tmp_Text = $Tmp_Text || {EM_Return_Dt} || '.'
!end-if
!print $Tmp_Text                          (+1,1) Bold

!*** 'Please keep a copy of this form for your records.  Default '
!*** 'option codes are in bold print.  Proof is '
!*** 'required for options that'
!let $Tmp_Text = $BAS004-T01-L06A
!let $Tmp_Text = $Tmp_Text || $BAS004-T01-L06B
!print $Tmp_Text                          (+1,1)
!*** 'are followed by an asterisk (*).'
!let $Tmp_Text = $BAS004-T01-L07A
!print $Tmp_Text                          (+1,1)

!SXK 12/01/1998 End

Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE}

!---------------------------------------
!Beg of Flex Credits
!---------------------------------------

!SXK 12/01/1998 Begin

!***  'FLEXIBLE CREDITS'
!print $BAS004-FLEX-CREDS                 (+1,1)
!*** 'Excess Credits will default to cash unless one of the '
!*** 'following rollover options is selected: '
!let $Tmp_Text =  $BAS004-T02-L01A
!print $Tmp_Text                          (+2,1)

!Graphic (+1,#ccol8,1) box 1 {NORM_LNSIZE} ! Cash Box
!*** ' Cash'
!print $BAS004-CASH                        (+0,+2)
!Graphic (+0,#ccol8B,1) box 1 {NORM_LNSIZE} ! Health Box
!*** ' FSA-Health Care'
!print $BAS004-FSA-HEALTH-CARE                 (+0,+2)
!Graphic (+0,#ccol8C,1) box 1 {NORM_LNSIZE} ! Dep Box
!*** ' FSA-Dep Care'
!print $BAS004-FSA-DEP-CARE                  (+0,+2)
!Graphic (+0,#ccol8D,1) box 1 {NORM_LNSIZE} ! Savings Box
!*** ' Savings'
!print $BAS004-SAVINGS                     (+0,+2)

!*** 'Note:  Excess credits can only be applied to eligible benefits'
!*** ' as specified on this enrollment form.  Refer to '
!*** 'the table below'
!*** 'to get the value of your plan based credits.  This value is '
!*** 'used in computing the cost of the benefit '
!*** '(price - credit = cost).'
!print $BAS004-T03-L01A       (+2,1)
!print $BAS004-T03-L02A       (+1,1)
!print $BAS004-T03-L03A       (+1,1)

!SXK 12/01/1998 End

let $FirstCredPage = 'Y'

End-Procedure


!*********************************
! ISDVDXS 02/12/2007
! Procedure to get GE Emplid 
!*********************************
!GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
!Begin-Procedure Get-Mapp-Emplid

!let $mapp_emplid = ' '
!Begin-SELECT
!MAPP.EMPLID
! let $mapp_emplid = RTRIM(&MAPP.EMPLID,' ')

!FROM PS_GEX_EMPLID_MAPP MAPP
!WHERE MAPP.SSN = &A.EMPLID

!End-SELECT

!End-Procedure
!GEX_SEC_REENG 2015-04-29 Vahini Katta Ends


!**********************************
Begin-Procedure Select-Credits-Data
!**********************************

 let $Prior_Plan_Type    = 'XYZ'
 let $Prior_Benefit_Plan = 'XYZ'
 let $Ben_Plan           = 'XYZ'
 let $Plan_Type          = 'XYZ'
 let $Descr              = 'XYZ'
 let #Col                = 0
 let #PgmCred            = 0.0

Begin-SELECT
E.SCHED_ID
E.EMPLID
E.BENEFIT_RCD_NBR
E.EVENT_ID
E.PLAN_TYPE     () On-Break Print=Never Before=Get-General-Credit
E.BENEFIT_PROGRAM
E.EVENT_DT
F.SCHED_ID
F.EMPLID
F.BENEFIT_RCD_NBR
F.EVENT_ID
F.PLAN_TYPE
F.OPTION_CD
F.OPTION_ID
F.OPTION_TYPE
F.BENEFIT_PLAN
F.COVRG_CD
F.DISPLAY_PLN_SEQ
F.DISPLAY_OPT_SEQ

  let $Plan_Category = SUBSTR(&E.Plan_Type,1,1)

  if (&F.Option_Type <> 'G')
    do Get-Option-Credit
    do Print-Benefit-Plan
    do Print-Credit-Amount
  end-if

FROM PS_BAS_PARTIC_PLAN E,
     PS_BAS_PARTIC_OPTN F
WHERE E.SCHED_ID        = &A.Sched_Id
AND   E.EMPLID          = &A.EmplId
AND   E.BENEFIT_RCD_NBR    = &A.BENEFIT_RCD_NBR
AND   E.EVENT_ID        = &A.Event_Id
AND   ((E.ELECT_ALLOWED = 'Y') Or (E.PLAN_TYPE = '01'))
AND   ((E.PLAN_TYPE     = '01')
 OR    (E.PLAN_TYPE     LIKE '1%')
 OR    (E.PLAN_TYPE     LIKE '2%')
 OR    (E.PLAN_TYPE     LIKE '3%'))
AND   F.SCHED_ID        = E.SCHED_ID
AND   F.EMPLID          = E.EMPLID
AND   F.BENEFIT_RCD_NBR    = E.BENEFIT_RCD_NBR
AND   F.EVENT_ID        = E.EVENT_ID
AND   F.PLAN_TYPE       = E.PLAN_TYPE
AND   F.OPTION_TYPE     IN ('G','O','W')
AND   F.HISTORY_ONLY    = 'N'
ORDER BY F.DISPLAY_PLN_SEQ ASC,
         F.DISPLAY_OPT_SEQ ASC
End-SELECT

!*** 'The flexible credits provided to you by the company for '
!*** $Tmp_YYYY || ' totals'
let $Tmp_Text = $BAS004-T04-L01A || $Tmp_YYYY
let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01B
let $PgmCrednew = Edit(#PgmCred, '99,999.99')
let $Tmp_Text = $Tmp_Text || $PgmCrednew
if ($Cost_Freq = 'A')
!*** ' for the year.'
  let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01C
else
!*** ' per pay-period.'
  let $Tmp_Text = $Tmp_Text || $BAS004-T04-L01D
end-if

print $Tmp_Text                 (+2,1) bold

End-Procedure

!*********************************
Begin-Procedure Get-General-Credit
!*********************************

SHOW ' Begin-Procedure Get-General-Credit +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ '

  let #GenCred = 0.0

Begin-SELECT
G1.SCHED_ID
G1.EMPLID
G1.BENEFIT_RCD_NBR
G1.EVENT_ID
G1.PLAN_TYPE
G1.OPTION_ID
!VENDKXY changes done for wrong amounts -----start 
sum(G1.ANNL_AMT_A_TAX) &G1.Annual_A_Amt
sum(G1.DEDN_AMT_A_TAX) &G1.Deduct_A_Amt
sum(G1.ANNL_AMT_b_TAX) &G1.Annual_B_Amt
sum(G1.DEDN_AMT_b_TAX) &G1.Deduct_B_Amt
!SUM(G1.ANNUAL_AMT) &G1.Annual_Amt !vendcxb
!SUM(G1.DEDUCT_AMT) &G1.Deduct_Amt !VENDCXB

  show ' &G1.Annual_A_Amt  ' &G1.Annual_A_Amt
   show ' &G1.Deduct_A_Amt ' &G1.Deduct_A_Amt
    show ' &G1.Annual_B_Amt  ' &G1.Annual_B_Amt
     show ' &G1.Deduct_B_Amt  ' &G1.Deduct_B_Amt
 
 if ($Cost_Freq = 'A')
   if &G1.Annual_A_Amt <> 0 
   let #GenCred = &G1.Annual_A_Amt
   else 
   let #GenCred = &G1.Annual_B_Amt
   end-if
 else
    if &G1.Deduct_A_Amt <> 0
    let #GenCred = &G1.Deduct_A_Amt
    else
    let #GenCred = &G1.Deduct_B_Amt
    end-if
 end-if
 
!  if ($Cost_Freq = 'A')
!   let #GenCred = &G1.Annual_Amt
! else
!   let #GenCred = &G1.Deduct_Amt
! end-if 
!VENDKXY changes done for wrong amounts -----end
FROM PS_BAS_PARTIC_OPTN O1,
     PS_BAS_PARTIC_COST G1
WHERE O1.SCHED_ID     = &F.Sched_Id
AND   O1.EMPLID       = &F.EmplId
AND   O1.BENEFIT_RCD_NBR = &F.BENEFIT_RCD_NBR
AND   O1.EVENT_ID     = &F.Event_Id
AND   O1.PLAN_TYPE    = &F.Plan_Type
AND   O1.OPTION_TYPE  = 'G'
AND   G1.SCHED_ID     = O1.SCHED_ID
AND   G1.EMPLID       = O1.EMPLID
AND   G1.BENEFIT_RCD_NBR = O1.BENEFIT_RCD_NBR
AND   G1.EVENT_ID     = O1.EVENT_ID
AND   G1.PLAN_TYPE    = O1.PLAN_TYPE
AND   G1.OPTION_ID    = O1.OPTION_ID
AND   G1.COST_TYPE    = 'C'
GROUP BY G1.SCHED_ID,
         G1.EMPLID,
         G1.BENEFIT_RCD_NBR,
         G1.EVENT_ID,
         G1.PLAN_TYPE,
         G1.OPTION_ID
ORDER BY G1.SCHED_ID ASC,
         G1.EMPLID ASC,
         G1.BENEFIT_RCD_NBR ASC,
         G1.EVENT_ID ASC,
         G1.PLAN_TYPE ASC,
         G1.OPTION_ID ASC
End-SELECT

  if (&F.Plan_Type = '01')
    let #PgmCred = #GenCred
    let #GenCred = 0.0
  end-if

End-Procedure

!********************************
Begin-Procedure Get-Option-Credit
!********************************

let #TmpAmt = 0

Begin-SELECT
G2.SCHED_ID
G2.EMPLID
G2.BENEFIT_RCD_NBR
G2.EVENT_ID
G2.PLAN_TYPE
G2.OPTION_ID
!VENDKXY changes done for wrong amounts -----start
sum(G2.ANNL_AMT_A_TAX) &G2.Annual_A_Amt
sum(G2.DEDN_AMT_A_TAX) &G2.Deduct_A_Amt
sum(G2.ANNL_AMT_B_TAX) &G2.Annual_B_Amt
sum(G2.DEDN_AMT_B_TAX) &G2.Deduct_B_Amt
!SUM(G2.ANNUAL_AMT) &G2.Annual_Amt !vendcxb
!SUM(G2.DEDUCT_AMT) &G2.Deduct_Amt !vendcxb

   show ' &G2.Annual_A_Amt  ' &G2.Annual_A_Amt
   show ' &G2.Deduct_A_Amt  ' &G2.Deduct_A_Amt
    show ' &G2.Annual_B_Amt  ' &G2.Annual_B_Amt
     show ' &G2.Deduct_B_Amt  ' &G2.Deduct_B_Amt

 if ($Cost_Freq = 'A')
   if &G2.Annual_A_Amt <> 0 
   let #TmpAmt = &G2.Annual_A_Amt
   else 
   let #TmpAmt = &G2.Annual_B_Amt
   end-if
 else
    if &G2.Deduct_A_Amt <> 0
    let #TmpAmt = &G2.Deduct_A_Amt
    else
    let #TmpAmt = &G2.Deduct_B_Amt
    end-if
 end-if




!  if ($Cost_Freq = 'A')
!   let #TmpAmt = &G2.Annual_Amt
! else
!   let #TmpAmt = &G2.Deduct_Amt
! end-if
!VENDKXY changes done for wrong amounts -----end
FROM PS_BAS_PARTIC_COST G2
WHERE G2.SCHED_ID     = &F.Sched_Id
AND   G2.EMPLID       = &F.EmplId
AND   G2.BENEFIT_RCD_NBR = &F.BENEFIT_RCD_NBR
AND   G2.EVENT_ID     = &F.Event_Id
AND   G2.PLAN_TYPE    = &F.Plan_Type
AND   G2.OPTION_ID    = &F.Option_Id
AND   G2.COST_TYPE    = 'C'
GROUP BY G2.SCHED_ID,
         G2.EMPLID,
         G2.BENEFIT_RCD_NBR,
         G2.EVENT_ID,
         G2.PLAN_TYPE,
         G2.OPTION_ID
ORDER BY G2.SCHED_ID ASC,
         G2.EMPLID ASC,
         G2.BENEFIT_RCD_NBR ASC,
         G2.EVENT_ID ASC,
         G2.PLAN_TYPE ASC,
         G2.OPTION_ID ASC
End-SELECT
End-Procedure

!**********************************
Begin-Procedure Print-Credit-Amount
!**********************************

!Default positioning...
let #col  = #ccol1
let #cola = #ccol1a

let $TestVal = RTRIM(&F.Covrg_Cd,' ')
Evaluate $TestVal
  When = ''                  !Employee Only
  When = '1'                 !Employee Only
    let #col  = #ccol1
    let #cola = #ccol1a
    break
  When = '2'                 !Employee + Spouse
    let #col  = #ccol2
    let #cola = #ccol2a
    break
  When = '3'                 !Employee + Dependents
    let #col  = #ccol3
    let #cola = #ccol3a
    break
  When = '4'                 !Family
    let #col  = #ccol4
    let #cola = #ccol4a
    break
End-Evaluate

if (&F.Option_Type = 'O')
  let #TmpAmt = #TmpAmt + #GenCred    !Don't add Genl Creds to Waive option
end-if

Graphic () Font 5 {SMALL}             !Reduce font size
print #TmpAmt                         (+0,#col) edit {PER_PAY_MASK}
let $Tmp_Text = '(' || RTRIM(&F.Option_Cd,' ') || ')'
print $Tmp_Text (+0,#cola)
Graphic () Font 5 {NORM}              !Return font size to normal
let $Tmp_Text = ' '

End-Procedure

!*********************************
Begin-Procedure Print-Benefit-Plan
!*********************************

let $PrintHeaderFlag = 'N'

if ($FirstCredPage = 'Y')
  let $PrintHeaderFlag = 'Y'
  let $FirstCredPage = 'N'
end-if

if (#Current-Line + 1 >= #Page_Maximum)
  do Bottom-Line
  New-Page
  let $PrintHeaderFlag = 'Y'
end-if

if ($PrintHeaderFlag = 'Y')
  do Print-Cred-Pg-Header
end-if

if ($Prior_Plan_Type <> &E.Plan_Type)
  do Print-Plan-Title
end-if

if ($Prior_Benefit_Plan <> &F.Benefit_Plan) Or (&F.Option_Type='W')
  if (&F.Option_Type <> 'W')
    let $Prior_Benefit_Plan = &F.Benefit_Plan
    let $Ben_Plan           = &F.Benefit_Plan
    do Get-Ben-Plan-Descr
  else
    let $Prior_Benefit_Plan = ''
    let $Descr = 'Waive'
  end-if

  print $Descr                    (+1,1)
end-if

let $Prior_Plan_Type    = &E.Plan_Type

End-Procedure

!**********************************
Begin-Procedure Print-Cred-Pg-Header
!**********************************

let #ccol = #ccol2 - 3

if ($Plan_Category <> '1')
!*** 'CREDITS AND OPTION CODES'
  print $BAS004-CRDS-OPT-CD  (+2,#ccol) Bold
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
!*** 'YOUR OPTIONS'
  print $BAS004-YOUR-OPT              (+1,1) Bold
else
!*** 'CREDITS AND OPTION CODES'
  print $BAS004-CRDS-OPT-CD  (+2,#ccol) Bold
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
  print $BAS004-YOUR-OPT            (+1,1)      Bold
  print $BEN1-EMPLOYEE              (+0,#ccol1)
  print $BEN1-EMPLOYEE              (+0,#ccol2)
  print $BEN1-EMPLOYEE              (+0,#ccol3)
  print $BEN1-EMPLOYEE              (+0,#ccol4)
  print $BAS004-ONLY                (+1,#ccol1)
  print $BAS004-PL-SPOUSE           (+0,#ccol2)
  print $BAS004-PL-CHILD            (+0,#ccol3)
  print $BAS004-PL-FAMILY           (+0,#ccol4)
  Graphic (+0,#ccol1,{CRED_LNLENGTH}) Horz-Line {NORM_LNSIZE}
end-if

End-Procedure

!*********************************
Begin-Procedure Get-Ben-Plan-Descr
!*********************************

!*** '[Description not available]'
  let $Descr = $BAS004-NO-DESCR

Begin-SELECT

DD.DESCRSHORT
DD.DESCR
 let $Descr = RTRIM(&DD.Descr,' ')

FROM PS_BENEF_PLAN_TBL DD

WHERE DD.BENEFIT_PLAN   = $Ben_Plan
AND   DD.PLAN_TYPE      = $Plan_Type
AND   DD.EFFDT = (SELECT MAX(EFFDT)
                  FROM   PS_BENEF_PLAN_TBL
                  WHERE  BENEFIT_PLAN = DD.BENEFIT_PLAN
                  AND    PLAN_TYPE    = DD.PLAN_TYPE
                  AND    EFFDT       <= &A.Event_Dt)

End-SELECT

End-Procedure

!******************************
Begin-Procedure Print-Plan-Title
!******************************

if (#Current-Line + 2 >= #Page_Maximum)
  do Bottom-Line
  New-Page
  do Print-Cred-Pg-Header
  print '' (+1,1)
end-if

move 'PLAN_TYPE' to $FieldName
move &F.Plan_Type to $Plan_Type
move $Plan_Type to $FieldValue
do Read-Translate-Table

let $Plan_Title = RTRIM($XlatLongName,' ')
!SXK 12/04/1998 Begin
if $plan_type <> '30' and $plan_type <> '31' and 
   $plan_type <>'82'
   and $plan_type <> '15'                      !vendnrr Begin 
   and $plan_type <> '16'
   and $plan_type <> '17' 
   and $plan_type <> '18'                      !vendnrr End 
  print $Plan_Title                     (+1,1) UNDERLINE !AXL 11/21/2003 was +2
end-if
!SXK 12/04/1998 End

End-Procedure

!******************************
Begin-Procedure Bottom-Line
!******************************

add 1 to #Page_Number

Graphic (#Bottom_Line,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE}

! DXS, 03/07/07, Print Name in the lower left corner 
 print &B.name                            (+1,1)
 
let $Page_Number = EDIT(#Page_Number,'99')
!***'Page ' || $Page_Number
let $Page_Number = $BEN1-PAGE || $Page_Number
print $Page_Number                       (+0,#ccol2)

! DXS, 03/07/07. Setting column position. Not printing form_cnt anymore 
let #col = #ccol6 - 6
!print #Form_Cnt                          (+0,#col) edit 0000

! DXS, 3/07/07, Print SSN padded by random number on the left and right. 
 let $bottom_ssn = $random_num || &A.emplid || $random_num  
 print $bottom_ssn                   (0,#col)

 
End-Procedure

!AXL 011/21/2003 New code for duplex - Begin
!******************************
Begin-Procedure Bottom-Line-New
!******************************
add 1 to #Page_Number

 let #remainder_odd = mod(#Page_Number,2)


 if #remainder_odd  = 0  !Even number of pages

   Graphic (#Bottom_Line,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE}


! DXS, 03/07/07, Print Name in the lower left corner 
 print &B.name                            (+1,1)

   let $Page_Number = EDIT(#Page_Number,'99')
   !***'Page ' || $Page_Number
   let $Page_Number = $BEN1-PAGE || $Page_Number
   print $Page_Number                       (+0,#ccol2)
   
  
  ! DXS, 03/07/07. Setting column position. Not printing form_cnt anymore 
  let #col = #ccol6 - 6
  !print #Form_Cnt                          (+0,#col) edit 0000
  
  ! DXS, 3/07/07, Print SSN padded by random number on the left and right. 
   let $bottom_ssn = $random_num || &A.emplid || $random_num  
   print $bottom_ssn                   (0,#col)

 else

   Graphic (#Bottom_Line,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE}

   ! DXS, 03/07/07, Print Name in the lower left corner 
   print &B.name                            (+1,1)
  
   let $Page_Number = EDIT(#Page_Number,'99')
   !***'Page ' || $Page_Number
   let $Page_Number = $BEN1-PAGE || $Page_Number
   print $Page_Number                       (+0,#ccol2)
  
   ! DXS, 03/07/07. Setting column position. Not printing form_cnt anymore 
   let #col = #ccol6 - 6
   !print #Form_Cnt                          (+0,#col) edit 0000
  
   ! DXS, 3/07/07, Print SSN padded by random number on the left and right. 
   let $bottom_ssn = $random_num || &A.emplid || $random_num  
   print $bottom_ssn                   (0,#col)

   new-page
   let $blank_page='Y'

 end-if

End-Procedure
!AXL 011/21/2003 New code for duplex - End

!******************************
Begin-Procedure Select-Plan
!******************************
!  display 'Select-Plan'

!Set Plan Variables...
let $Plan_Type     = 'XYZ'
let $FirstOptnPage = 'Y'
let $CurElectFlag = 'N'
let $ElectAllowFlag    = 'N'
let $IsEligForSvgsFlag = 'N'

!Set Option Variables...
let $Prior_Benefit_Plan  = 'XYZ'
let $Prior_Plan_Type     = 'XYZ'
let $Prior_Option_Type   = 'XYZ'
let $Ben_Plan            = 'XYZ'
let $Descr               = 'XYZ'
let $Prior_Plan_Category = ' '
let #col                 = 0
let #Optn_Cnt            = 0
let $first_sel = 'Y'

Begin-SELECT
J.SCHED_ID
J.EMPLID
J.BENEFIT_RCD_NBR
J.EVENT_ID
J.PLAN_TYPE     () On-Break Print=Never Before=On-Plan-Break
J.EVENT_DT
J.ELECT_ALLOWED
J.BENEFIT_PROGRAM
J.CUR_ELECT_IND
K.SCHED_ID
K.EMPLID
K.BENEFIT_RCD_NBR
K.EVENT_ID
K.PLAN_TYPE
K.BENEFIT_PROGRAM
K.EVENT_DT
K.OPTION_ID
K.DISPLAY_PLN_SEQ
K.DISPLAY_OPT_SEQ
K.OPTION_TYPE
K.BENEFIT_PLAN
K.COVRG_CD
K.OPTION_CD
K.DEFAULT_IND
K.PROOF_REQ_IND
K.CALCULATED_BASE

  let $Plan_Type           = &J.Plan_Type
  let $CurElectFlag = &J.Cur_Elect_Ind
  let $ElectAllowFlag    = &J.Elect_Allowed
  let $print_cost = 'Y'
  let $Plan_Category = SUBSTR(&J.Plan_Type,1,1)

  if ($ElectAllowFlag = 'Y')

   !SXK 12/04/1998 Begin
   if $plan_type <> '30' and $plan_type <> '31' and $plan_type <> '82'
    do Print-Benefit-Plan-Optns
   end-if
   !SXK 12/04/1998 End

    Evaluate $Plan_Category
      When = '1'
      When = '2'
      When = '3'
   !SXK 12/04/1998 Begin
   !    display $print_cost 
       if $plan_type <> '30' and $plan_type <> '31'
          if ($plan_type = '21' and $print_cost = 'N') or
             ($plan_type = '1Z' and $print_cost = 'N') 
          else
           do Select-Price-Amt
           do Print-Price-Amt
          end-if
       end-if
   !SXK 12/04/1998 End
      When = '4'
        let #Cola = #CCol9 + 7
        do Print-Option-Cd
        let $IsEligForSvgsFlag = 'Y'
      When = '5'
      When = '6'
      When = '7'
      When = '8'
      When = '9'
        let #Cola = #CCol2
     !SXK 12/04/1998 Begin
       if $plan_type <>'82'
        do Print-Option-Cd
       end-if
     !SXK 12/04/1998 End
    End-Evaluate

  end-if

FROM  PS_BAS_PARTIC_PLAN J,
      PS_BAS_PARTIC_OPTN K
WHERE J.SCHED_ID        = &A.Sched_Id
AND   J.EMPLID          = &A.EmplId
AND   J.BENEFIT_RCD_NBR    = &A.BENEFIT_RCD_NBR
AND   J.EVENT_ID        = &A.Event_Id
AND   J.PLAN_TYPE      <> '01'
!SXK 12/23/1998 Begin
AND   J.PLAN_TYPE  <> '20'
AND   J.PLAN_TYPE  <> '22'
AND   J.PLAN_TYPE  <> '40'
AND   J.PLAN_TYPE  <> '41'
AND   J.PLAN_TYPE  <> '4W'
AND   J.PLAN_TYPE  <> '4X'
AND   J.PLAN_TYPE  <> '4Y'
AND   J.PLAN_TYPE  <> '4Z'
!SXK 02/10/1999 Begin
AND   J.PLAN_TYPE  <> '30'
AND   J.PLAN_TYPE  <> '31'
AND   J.PLAN_TYPE  <> '82'
!SXK 02/10/1999 End
!SXK 12/23/1998 End
!NRR 11/01/2007 Begin
AND   J.PLAN_TYPE  <> '15'
AND   J.PLAN_TYPE  <> '16'
AND   J.PLAN_TYPE  <> '17'
AND   J.PLAN_TYPE  <> '18'
!NRR 11/01/2007 End
AND   K.SCHED_ID        = J.SCHED_ID
AND   K.EMPLID          = J.EMPLID
AND   K.BENEFIT_RCD_NBR    = J.BENEFIT_RCD_NBR
AND   K.EVENT_ID        = J.EVENT_ID
AND   K.PLAN_TYPE       = J.PLAN_TYPE
AND   K.OPTION_TYPE    IN ('O','W')
AND   K.HISTORY_ONLY    = 'N'
!SXK 02/10/1999 Begin
AND   1 < (select count(plan_type) from ps_bas_partic_optn        
            where     SCHED_ID        = K.SCHED_ID
		AND   EMPLID          = K.EMPLID
		AND   BENEFIT_RCD_NBR    = K.BENEFIT_RCD_NBR
		AND   EVENT_ID        = K.EVENT_ID
		AND   PLAN_TYPE       = K.PLAN_TYPE
		AND   OPTION_TYPE    IN ('O','W')
		AND   HISTORY_ONLY    = 'N')                      
!SXK 02/10/1999 End
ORDER BY K.DISPLAY_PLN_SEQ ASC,
         K.DISPLAY_OPT_SEQ ASC
End-SELECT

  do On-Plan-Break

End-Procedure

!******************************
Begin-Procedure Select-Plan-1
!******************************
!  display 'Select-Plan-1'

!Set Plan Variables...
let $Plan_Type     = 'XYZ'
let $FirstOptnPage = 'Y'
let $CurElectFlag = 'N'
let $ElectAllowFlag    = 'N'
let $IsEligForSvgsFlag = 'N'

!Set Option Variables...
let $Prior_Benefit_Plan  = 'XYZ'
let $Prior_Plan_Type     = 'XYZ'
let $Prior_Option_Type   = 'XYZ'
let $Ben_Plan            = 'XYZ'
let $Descr               = 'XYZ'
let $Prior_Plan_Category = ' '
let #col                 = 0
let #Optn_Cnt            = 0
let $first_sel = 'N'

Begin-SELECT
J1.SCHED_ID
J1.EMPLID
J1.BENEFIT_RCD_NBR
J1.EVENT_ID
J1.PLAN_TYPE     () On-Break Print=Never Before=On-Plan-Break
J1.EVENT_DT
J1.ELECT_ALLOWED
J1.BENEFIT_PROGRAM
J1.CUR_ELECT_IND
K1.SCHED_ID
K1.EMPLID
K1.BENEFIT_RCD_NBR
K1.EVENT_ID
K1.PLAN_TYPE
K1.BENEFIT_PROGRAM
K1.EVENT_DT
K1.OPTION_ID
K1.DISPLAY_PLN_SEQ
K1.DISPLAY_OPT_SEQ
K1.OPTION_TYPE
K1.BENEFIT_PLAN
K1.COVRG_CD
K1.OPTION_CD
K1.DEFAULT_IND
K1.PROOF_REQ_IND
K1.CALCULATED_BASE

  let $Plan_Type           = &J1.Plan_Type
  let $CurElectFlag = &J1.Cur_Elect_Ind
  let $ElectAllowFlag    = &J1.Elect_Allowed

  let $Plan_Category = SUBSTR(&J1.Plan_Type,1,1)
  

!GBD 06/17/2002 Begin
!  display 'Plan Type: ' noline
!  display $Plan_Type
!  display 'Plan Category: ' noline
!  display $Plan_Category
!  display 'Elect Allowed: ' noline
!  display $ElectAllowFlag
!GBD 06/17/2002 End

  if ($ElectAllowFlag = 'Y')
    let $IsEligForSvgsFlag = 'Y'
    do Print-Benefit-Plan-Optns-1

    let #Cola = #CCol9 + 7
    do Print-Option-Cd-1

  end-if

FROM  PS_BAS_PARTIC_PLAN J1,
      PS_BAS_PARTIC_OPTN K1
WHERE J1.SCHED_ID        = &A.Sched_Id
AND   J1.EMPLID          = &A.EmplId
AND   J1.BENEFIT_RCD_NBR    = &A.BENEFIT_RCD_NBR
AND   J1.EVENT_ID        = &A.Event_Id
AND   J1.PLAN_TYPE       = '40'
AND   K1.SCHED_ID        = J1.SCHED_ID
AND   K1.EMPLID          = J1.EMPLID
AND   K1.BENEFIT_RCD_NBR    = J1.BENEFIT_RCD_NBR
AND   K1.EVENT_ID        = J1.EVENT_ID
AND   K1.PLAN_TYPE       = J1.PLAN_TYPE
AND   K1.OPTION_TYPE    IN ('O','W')
AND   K1.HISTORY_ONLY    = 'N'
ORDER BY K1.DISPLAY_PLN_SEQ ASC,
         K1.DISPLAY_OPT_SEQ ASC
End-SELECT

  do On-Plan-Break

End-Procedure

!***************************************
Begin-Procedure Print-Benefit-Plan-Optns
!***************************************
!  display 'Print-Benefit-Plan-Optns'

if ($Prior_Plan_Type <> &J.Plan_Type)

  do Check-Optn-Pg-Header

  move 'PLAN_TYPE' to $FieldName
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $Plan_Title = RTRIM($XlatLongName,' ')

!SXK 12/04/1998 Begin
  if $plan_type <> '30' and $plan_type <> '31' and 
     $plan_type <> '82'
     do Check-Avail-Lines	!AXL - 2/14/2001 - New line check 
     print $Plan_Title          (+1,1) UNDERLINE   !AXL 11/21/2003 was +2
  end-if
!SXK 12/04/1998 End
  let $plan_title_len = length(rtrim($Plan_Title,' '))
  
  Evaluate $Plan_Category
    When = '2'
!***  'Coverage Amount'
      print $BEN1-COVER-AMT         (+0,#ccol1) UNDERLINE
    When = '4'
!***  ' --- Pre Tax Per Pay Pd ---         --- After Tax Per Pay Pd ---'
!***  ' Pct%      or      Flat-Amt          Pct%      or      Flat-Amt'
   SHOW '$BAS004-T05-L01A  ' $BAS004-T05-L01A
   SHOW '$BAS004-T05-L01B  ' $BAS004-T05-L01B
   SHOW '$BAS004-T05-L02A   ' $BAS004-T05-L02A 
   SHOW '$BAS004-T05-L02A  ' $BAS004-T05-L02A
      print $BAS004-T05-L01A   (+0,20)
      print $BAS004-T05-L01B   (+0,40)
      print $BAS004-T05-L02A   (+1,20)
      print $BAS004-T05-L02A   (+0,40)
      print ''         (+1,1)
    When = '6'
      do Plan-Type-6X-Min-Max
  End-Evaluate

  let #counter = 1                          !Counts within Plan_Type

end-if


    !SXK 02/10/1999 Begin - To check if they already enrolled
    let $enrolled = 'N'
    Evaluate $plan_category 
       when = '1'
           if &K.BENEFIT_PLAN = 'PGE01B' !or &K.BENEFIT_PLAN = 'XGE01D'
              let $table_name = 'PS_HEALTH_BENEFIT CE'
              let $table_name_1 = 'PS_HEALTH_BENEFIT OOO1'
              let $table_name_2 = 'PS_HEALTH_BENEFIT OO1'
              do check-current-election
              if $enrolled = 'N'
                 let $print_cost = 'N'
                 goto skip-print
              end-if
           end-if
       when = '2'
           if &K.BENEFIT_PLAN = 'XGE01C' or &K.BENEFIT_PLAN = 'XGE01D'
              let $table_name = 'PS_LIFE_ADD_BEN CE'
              let $table_name_1 = 'PS_LIFE_ADD_BEN OOO1'
              let $table_name_2 = 'PS_LIFE_ADD_BEN OO1'
              do check-current-election
              if $enrolled = 'N'
                 let $print_cost = 'N'
                 goto skip-print
              end-if
           else
              if &K.BENEFIT_PLAN = 'BGE01A'
                let $table_name = 'PS_LIFE_ADD_BEN CE'
                let $table_name_1 = 'PS_LIFE_ADD_BEN OOO1'
                let $table_name_2 = 'PS_LIFE_ADD_BEN OO1'
                let $print_cost = 'N'
                do check-current-election
                if $enrolled = 'Y'
                   let $print_cost = 'Y'
                end-if
              end-if
           end-if
     End-Evaluate
    !SXK 02/10/1999 End 



if  (($Prior_Benefit_Plan <> &K.Benefit_Plan) Or (&K.Option_Type = 'W'))
    Or
    (($Plan_Category = '2') And ($Prior_Option_Type  = 'W'))

  do Check-Optn-Pg-Header

  if (&K.Option_Type <> 'W')
    let $Ben_Plan     = &K.Benefit_Plan
    do Get-Ben-Plan-Descr
    !SXK 12/04/1998 Begin
       let #len = length($Descr)
       !AXL 1/21/2005 Go with table values
       !if substr($Descr,1,3) = 'GEI'
       !   let $Descr = substr($Descr,5,#len)
       !end-if
       !AXL 11/21/2003 Begin
       If $Plan_Category = '6'
          
          let $Descr = $Descr || ' Wkly Contribution Amount'          !ITG-43752 NRR 10/30/2007
     
       End-if                                                         
              
       !AXL 11/21/2003 End 
    !SXK 12/04/1998 End
  else
!***  'Waive'
     let $Descr   =  $BEN1-WAIVE
  end-if

  if ($Cost_Freq = 'A')
!***  'Annual'
    let $Tmp_Text = $BEN1-ANNUAL
  else
!***  'Pay Period'
    let $Tmp_Text = $BEN1-PAY-PERIOD
  end-if

  Evaluate $Plan_Category

    !---------------------------------------------
    When = '1'
      print $Descr                           (+1,1)
      Evaluate #counter
        When = 1
!***      'Option Code:'
	  !print $BEN1-OPT-CD2       (+0,#ccol5)   		AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
          break
        When = 2
!***      $Tmp_Text || ' Cost:'
	  !let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2		AXL 11/21/2003 Disable
	  !print $Tmp_Text2                   (+0,#ccol5)	AXL 11/21/2003 Disable
	  !let #col = #ccol6 - 3				AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
!SXK 12/01/1998 Begin
!        When = 3
!***      $Tmp_Text || ' Credit:'
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 2
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/01/1998 End
      End-Evaluate
      break

    !---------------------------------------------
    When ='2'
      print $Descr                           (+1,1)
      Evaluate #counter
        When = 1
!***     ' Option Code:'
	  !print $BEN1-OPT-CD2          (+0,#ccol5)		AXL 11/21/2003 Disable
	  !let #col = #ccol6 - 3				AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
        When = 2
!***      $Tmp_Text || ' Cost:'
	  !let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2		AXL 11/21/2003 Disable
	  !print $Tmp_Text2                   (+0,#ccol5)	AXL 11/21/2003 Disable
	  !let #col = #ccol6 - 3				AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
!SXK 12/01/1998 Begin
!        When = 3
!***      $Tmp_Text || ' Credit:'
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 2
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      End-Evaluate
      break

    !---------------------------------------------
    When ='3'
!SXK 12/01/1998
     if $plan_type <> '31' and $plan_type <> '30'  !LTD, STD
         
      print $Descr                           (+1,1)
      Evaluate #counter
        When = 1
!***      'Option Code:'
	  !print $BEN1-OPT-CD2    (+0,#ccol5)			AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
        When = 2
	  !let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2		AXL 11/21/2003 Disable
	  !print $Tmp_Text2                   (+0,#ccol5)	AXL 11/21/2003 Disable
	  !let #col = #ccol6 - 3				AXL 11/21/2003 Disable
	  !Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}	AXL 11/21/2003 Disable
!SXK 12/01/1998 Begin
!        When = 3
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 2
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/01/1998 End
      End-Evaluate
     end-if
!SXK 12/01/1998 End
      break

    !---------------------------------------------
    When ='4'
      if (#counter = 1)
        let #col = #ccol1 - 5
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}
        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol2 - 6
        print '$'                          (+0,#col)
        let #col = #ccol2 - 4
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

        let #col = #ccol3 - 4
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}

        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol4 - 4
        print '$'                          (+0,#col)
        let #col = #ccol4 - 1
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

!***    'Option Code:'
        print $BEN1-OPT-CD2           (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if

      print $Descr                         (+1,1)

      break

    !---------------------------------------------
    When ='5'
      print $Descr                         (+1,1)
      if (#counter = 1)
        print $BEN1-OPT-CD2                (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if
      break

    !---------------------------------------------
    When ='6'
      print $Descr                         (+1,1)
      break

    !---------------------------------------------
    When ='7'
      print $Descr                         (+1,1)
      if (#counter = 1)
        print $BEN1-OPT-CD2                (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if
      break

    !---------------------------------------------
!SXK 12/01/1998 Begin
!    When ='8'
!      if (#counter = 1)
!***    'Per Pay Pd:  Voluntary Amt $__________  or  Pct ____%'
!        let $Tmp_Text = $BAS004-T06-L01A || $BAS004-T06-L01B
!        let $Tmp_Text = $Tmp_Text || '$__________ '
!        let $Tmp_Text = $Tmp_Text || $BAS004-T06-L01C
!        let $Tmp_Text = $Tmp_Text || '____%'
!        print $Tmp_Text                    (+0,+0)
!        print $BEN1-OPT-CD2                (+0,#ccol5)
!        let #col = #ccol6 - 5
!        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!        print ''         (+1,1)
!      end-if
!      print $Descr                         (+1,1)
!      break
!SXK 12/01/1998 End
    !---------------------------------------------
    When ='9'
      if (#counter = 1)
!***    'Number of Hours _________'
        let $Tmp_Text = $BAS004-NBR-HOURS || '_________'
        print $Tmp_Text              (+0,+8)
        print $BEN1-OPT-CD2          (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
        print ''         (+1,1)
      end-if
      print $Descr                         (+1,1)
      break

  End-Evaluate

  add 1  to #counter

end-if
skip-print:

let $Prior_Benefit_Plan = &K.Benefit_Plan  !Set Prior Value
let $Prior_Option_Type  = &K.Option_Type   !Set Prior Value
let $Prior_Plan_Type    = &J.Plan_Type     !Set Prior Value
let $Prior_Plan_Category = $Plan_Category  !Set Prior Value
add 1 to #Optn_Cnt

End-Procedure
!***************************************
Begin-Procedure Print-Benefit-Plan-Optns-1
!***************************************
!  display 'Print-Benefit-Plan-Optns-1'

if ($Prior_Plan_Type <> &J1.Plan_Type)

  do Check-Optn-Pg-Header

  move 'PLAN_TYPE' to $FieldName
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $Plan_Title = RTRIM($XlatLongName,' ')
  do Check-Avail-Lines		!AXL - 2/14/2001 - New line check 
  print $Plan_Title             (+2,1) UNDERLINE
  

  let #counter = 1                          !Counts within Plan_Type

end-if

if  (($Prior_Benefit_Plan <> &K1.Benefit_Plan) Or (&K1.Option_Type = 'W'))
    Or
    (($Plan_Category = '2') And ($Prior_Option_Type  = 'W'))

  do Check-Optn-Pg-Header

  if (&K1.Option_Type <> 'W')
    let $Ben_Plan     = &K1.Benefit_Plan
    do Get-Ben-Plan-Descr
    let #len = length($Descr)
    !  AXL 1/21/2005 -  Disable Go with table values
    !if substr($Descr,1,3) = 'GEI'
    !   let $Descr = substr($Descr,5,#len)
    !else
       let $descr = substr($descr,1,24)
    !end-if
  else
!***  'Waive'
     let $Descr   =  $BEN1-WAIVE
  end-if

  if ($Cost_Freq = 'A')
!***  'Annual'
    let $Tmp_Text = $BEN1-ANNUAL
  else
!***  'Pay Period'
    let $Tmp_Text = $BEN1-PAY-PERIOD
  end-if

  Evaluate $Plan_Category

    When ='4'
      if (#counter = 1)
        let #col = #ccol1 - 5
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}
        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol2 - 6
        print '$'                          (+0,#col)
        let #col = #ccol2 - 4
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

        let #col = #ccol3 - 4
        Graphic (+0,#col,4) horz-line {NORM_LNSIZE}

        let #col = #col + 4
        print '%'                          (+0,#col)

        let #col = #ccol4 - 4
        print '$'                          (+0,#col)
        let #col = #ccol4 - 1
        Graphic (+0,#col,6) horz-line {NORM_LNSIZE}

!***    'Option Code:'
        print $BEN1-OPT-CD2           (+0,#ccol5)
        let #col = #ccol6 - 5
        Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
      end-if

      print $Descr                         (+1,1)

      break

    !---------------------------------------------
  End-Evaluate

  add 1  to #counter

end-if

let $Prior_Benefit_Plan = &K1.Benefit_Plan  !Set Prior Value
let $Prior_Option_Type  = &K1.Option_Type   !Set Prior Value
let $Prior_Plan_Type    = &J1.Plan_Type     !Set Prior Value
let $Prior_Plan_Category = $Plan_Category  !Set Prior Value
add 1 to #Optn_Cnt

End-Procedure

!**********************************
Begin-Procedure Check-Optn-Pg-Header
!**********************************

let $PrintHeaderFlag = 'N'

let #NeedLines = 2
if ($Plan_Category = '4') And ($Plan_Category <> $Prior_Plan_Category)
  let #NeedLines = 5
end-if
if ($Plan_Category = '6') And ($Plan_Category <> $Prior_Plan_Category)
  if ($Cost_Freq = 'A')
    let #NeedLines = 6
  else
    let #NeedLines = 8
  end-if
end-if
if ($FirstOptnPage = 'Y')
  let #NeedLines = 8
end-if

if ((#Current-Line + #NeedLines) >= #Page_Maximum)
  do Bottom-Line
  New-Page
  let $PrintHeaderFlag = 'Y'
end-if

if ($FirstOptnPage = 'Y')
  let $PrintHeaderFlag = 'Y'
end-if

if ($PrintHeaderFlag = 'Y')
  do Print-Optn-Pg-Header
end-if

let $FirstOptnPage = 'N'

End-Procedure

!**********************************
Begin-Procedure Print-Optn-Pg-Header
!**********************************

if ($Plan_Category <> '1')
!***  'PRICES AND OPTION CODES'

!SXK 12/01/1998 Begin
!  print $BAS004-PRC-OPT-CD     (+2,#ccol2) Bold
  !print 'COST AND OPTION CODES' (+2,#ccol2) Bold 	AXL 11/21/2003 Disable
!SXK 12/01/1998 End

  !print $BAS004-OPTN-SEL       (+0,#ccol5)		AXL 11/21/2003 Disable
  !print $BAS004-YOUR-OPT            (+1,1) Bold	AXL 11/21/2003 Disable
  !Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}	AXL 11/21/2003 Disable
else
!***  'PRICE AND OPTION CODES'

!SXK 12/01/1998 Begin
  !print 'COST AND OPTION CODES' (+2,#ccol2) Bold  	AXL 11/21/2003 Disable
  print 'COST PER WEEK' (+2,#ccol2) Bold		!AXL 11/21/2003 New Text
!  print $BAS004-PRC-OPT-CD     (+2,#ccol2) Bold
!SXK 12/01/1998 End

  Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}
  print $BAS004-YOUR-OPT       (+1,1) Bold
  print $BEN1-EMPLOYEE         (+0,#ccol1)
  print $BEN1-EMPLOYEE         (+0,#ccol2)
!SXK 02/10/1999 Begin
!  print $BEN1-EMPLOYEE         (+0,#ccol3)

!AXL 1/21/2005 - Begin disable special treatment for C06 and others
!CWB 08/28/2000 - Begin
  !if &A.BENEFIT_PROGRAM = 'C06' 
  !or &A.BENEFIT_PROGRAM = 'C07' 
!CWB 08/20/2001 - BEGIN
  !or &A.BENEFIT_PROGRAM = 'C10' 
  !or &A.BENEFIT_PROGRAM = 'C11' 
!CWB 08/20/2001 - END
    print $BEN1-EMPLOYEE         (+0,#ccol3)
  !else  
  !  print ' '                    (+0,#ccol3)
  !end-if
!CWB 08/28/2000 - End
!AXL 1/21/2005 - End disable special treatment for C06 and others

!SXK 02/10/1999 End
  print $BEN1-EMPLOYEE         (+0,#ccol4)
!*** 'Option Selected &'
  !print $BAS004-OPTN-SEL       (+0,#ccol5)	AXL 11/21/2003 Disable
  print $BAS004-ONLY           (+1,#ccol1)
!SXK 02/10/1999 Begin
  print $BAS004-PL-SPOUSE      (+0,#ccol2)	!AXL 1/21/2005 re-activate
  !let $pl_dpndt = '+'||'1 Dpndt'		AXL 1/21/2005 de-activate		
  !print $pl_dpndt              (+0,#ccol2)	AXL 1/21/2005 de-activate
!SXK 02/10/1999 End

!SXK 12/01/1998 Begin
!  print $BAS004-PL-CHILD       (+0,#ccol3)
!SXK 02/10/1999 Begin
!  let $pl_child = '+'||'1 Child'
!  print $pl_child              (+0,#ccol3)

!AXL 1/21/2005 - Begin disable special treatment for C06 and others
!CWB 08/28/2000 - Begin
   !if &A.BENEFIT_PROGRAM = 'C06' 
   !or &A.BENEFIT_PROGRAM = 'C07' 
!CWB 08/20/2001 - BEGIN
  !or &A.BENEFIT_PROGRAM = 'C10' 
  !or &A.BENEFIT_PROGRAM = 'C11' 
!CWB 08/20/2001 - END
      !let $pl_dependents = '+' || 'Dpndnts'	AXL 1/21/2005 retire
      let $pl_dependents = '+' || 'Child(ren)'	!AXL 1/21/2005 new
      print $pl_dependents         (+0,#ccol3) 
   !else
   !   let $pl_dependents = ' ' 
   !   print $pl_dependents         (+0,#ccol3) 
   !end-if
!CWB 08/28/2000 - End
!AXL 1/21/2005 - End disable special treatment for C06 and others

!SXK 02/10/1999 End
!SXK 12/01/1998 End

  print $BAS004-PL-FAMILY               (+0,#ccol4)
!*** 'Cost Per Pay Period'
  !print $BAS004-CST-PER-PAY        (+0,#ccol5)  AXL 11/21/2003 Disable

  Graphic (+0,#ccol1,{OPTN_LNLENGTH}) Horz-Line {NORM_LNSIZE}
end-if

if $first_sel = 'Y'
  if ($Prior_Plan_Type = &J.Plan_Type)
     print '' (+2,1)
  end-if
else
  if ($Prior_Plan_Type = &J1.Plan_Type)
     print '' (+2,1)
  end-if
end-if


End-Procedure

!AXL - 2/14/2001 - New line check procedure - Begin
!**********************************
Begin-Procedure Check-Avail-Lines
!**********************************

 let $PrintHeaderFlag = 'N'
 let #NeedLines = 10
 
 if ((#Current-Line + #NeedLines) >= #Page_Maximum)
    do Bottom-Line
    New-Page
    let $PrintHeaderFlag = 'Y'
 end-if

 if ($PrintHeaderFlag = 'Y')
    do Print-Optn-Pg-Header
 end-if
  
End-Procedure
 
!AXL - 2/14/2001 - New line check procedure - End

!*******************************
Begin-Procedure Select-Price-Amt
!*******************************
  show ' Begin-Procedure Select-Price-Amt*************************************************'
let #TmpAmt = 0

Begin-SELECT

N.SCHED_ID
N.EMPLID
N.BENEFIT_RCD_NBR
N.EVENT_ID
N.PLAN_TYPE
N.OPTION_ID
!VENDKXY changes done for wrong amounts----- start

sum(N.ANNL_AMT_A_TAX) &N.Annual_A_Amt
sum(N.DEDN_AMT_A_TAX) &N.Deduct_A_Amt
sum(N.ANNL_AMT_B_TAX) &N.Annual_B_Amt
sum(N.DEDN_AMT_B_TAX) &N.Deduct_B_Amt


!SUM(N.ANNUAL_AMT) &n_annual_amt !vendcxb  
!SUM(N.DEDUCT_AMT) &n_deduct_amt !vendcxb  

	show    ' &N.Annual_A_Amt   '&N.Annual_A_Amt 

	show    ' &N.Deduct_A_Amt   '&N.Deduct_A_Amt

	show    ' &N.Annual_B_Amt   '&N.Annual_B_Amt

	show    ' &N.Deduct_B_Amt   '&N.Deduct_B_Amt

  
 if ($Cost_Freq = 'A')
   if &N.Annual_A_Amt <> 0 
   let #TmpAmt= &N.Annual_A_Amt
   else 
   let #TmpAmt = &N.Annual_B_Amt
   end-if
 else
    if &N.Deduct_A_Amt <> 0
    let #TmpAmt = &N.Deduct_A_Amt
    else
    let #TmpAmt = &N.Deduct_B_Amt
    end-if
 end-if

!  if ($Cost_Freq = 'A')
!    let #TmpAmt = &n_annual_amt
!  else
!   let #TmpAmt = &n_deduct_amt
!  end-if
!VENDKXY changes done for wrong amounts----- end

FROM PS_BAS_PARTIC_COST N
WHERE N.SCHED_ID        = &K.Sched_Id
AND   N.EMPLID          = &K.EmplId
AND   N.BENEFIT_RCD_NBR    = &K.BENEFIT_RCD_NBR
AND   N.EVENT_ID        = &K.Event_Id
AND   N.PLAN_TYPE       = &K.Plan_Type
AND   N.OPTION_ID       = &K.Option_Id
AND   N.COST_TYPE       = 'P'
GROUP BY N.SCHED_ID,N.EMPLID,N.BENEFIT_RCD_NBR,N.EVENT_ID,N.PLAN_TYPE,
         N.OPTION_ID
ORDER BY N.SCHED_ID ASC,
         N.EMPLID ASC,
         N.BENEFIT_RCD_NBR ASC,
         N.EVENT_ID ASC,
         N.PLAN_TYPE ASC,
         N.OPTION_ID ASC

End-SELECT

End-Procedure

!******************************
Begin-Procedure Print-Price-Amt
!******************************

let #col  = #ccol1
let #cola = #ccol1a
Evaluate $Plan_Category
  When = '1'
    let $TestVal = RTRIM(&K.Covrg_Cd, ' ')
    Evaluate $TestVal
      When = ''                  !Employee Only
      When = '1'                 !Employee Only
        let #col  = #ccol1
        let #cola = #ccol1a
        break
      When = '2'                 !Employee + Spouse
        let #col  = #ccol2
        let #cola = #ccol2a
        break
      When = '3'                 !Employee + Dependents
        let #col  = #ccol3
        let #cola = #ccol3a
        break
      When = '4'                 !Family
        let #col  = #ccol4
        let #cola = #ccol4a
        break
    End-Evaluate
  When = '2'
    let #col  = #ccol2
    let #cola = #ccol2a
End-Evaluate

Graphic () Font 5 {SMALL}             !Reduce font size
!SXK 02/10/1999 Begin
if $print_cost = 'Y'
   !AXL 11/21/2003 Move $ closer to amount - Begin
   print #TmpAmt                         (+0,#col) edit {PER_PAY_MASK2}
   !AXL 11/21/2003 Move $ closer to amount - End
end-if
!SXK 02/10/1999 End
do print-Option-Cd

Graphic () Font 5 {SMALL}             !Reduce font size
if ($Plan_Category = '2')
  let #col = #ccol1
  if (RTRIM(&K.Option_Cd,' ') = 'W')
    !AXL 1/21/2005 New formatting - Begin
    let #waive = 0
    let $waive = ltrim(edit(#waive,'$9.99'), ' ')
    !print 0                           (+0,#col) Edit {COVRG_MASK2} AXL 11/21/2003
    print $waive                       (+0,#col)
  else
    let $Calculated_Base = ltrim(edit(&K.Calculated_Base,'$,$$$,$$$.99'), ' ')
    !print &K.Calculated_Base          (+0,#col) Edit {COVRG_MASK2} AXL 11/21/2003
    print $Calculated_Base          (+0,#col)
    !AXL 1/21/2005 New formatting - End
  end-if
end-if
Graphic () Font 5 {NORM}              !Return font size to normal

let $Tmp_Text = ' '

End-Procedure

!******************************
Begin-Procedure Print-Option-Cd
!******************************

Graphic () Font 5 {SMALL}             !Reduce font size

 !AXL 11/21/2003 Disable - Begin
 !let $Tmp_Text = '(' || RTRIM(&K.Option_Cd,' ') || ')'

 !if (&K.Default_Ind = 'Y')
 !print $Tmp_Text                     (+0,#cola) bold
 !else
 ! print $Tmp_Text                     (+0,#cola)
 !end-if
 !AXL 11/21/2003 Disable - End
  
 !AXL 11/21/2003 Display small checkboxes everywhere except FSA plans - Begin
 Evaluate $Plan_Category 
  when = '6' 
     let #cola = #cola + 2 
     Graphic (+0,#cola,{BIG_LNSIZE}) Horz-Line {NORM_LNSIZE} !Lines for FSA
     let #cola = #cola - 2
   break
  when-other 
     Graphic (+0,#cola,2) box 1 {NORM_LNSIZE} !Option Small Checkbox graphic 
 End-Evaluate
 !AXL 11/21/2003 Display small checkboxes everywhere except FSA plans - End

if (&K.Proof_Req_Ind = 'Y')
  print '*'                           (+0,+1)
end-if

Graphic () Font 5 {NORM}              !Return font size to normal

End-Procedure

!******************************
Begin-Procedure Print-Option-Cd-1
!******************************

Graphic () Font 5 {SMALL}             !Reduce font size

let $Tmp_Text = '(' || RTRIM(&K1.Option_Cd,' ') || ')'

if (&K1.Default_Ind = 'Y')
  print $Tmp_Text                     (+0,#cola) bold
else
  print $Tmp_Text                     (+0,#cola)
end-if

if (&K1.Proof_Req_Ind = 'Y')
  print '*'                           (+0,+1)
end-if

Graphic () Font 5 {NORM}              !Return font size to normal

End-Procedure

!***********************************
Begin-Procedure Plan-Type-6X-Min-Max
!***********************************

let #FSA_Min = 0
let #FSA_Max = 0
let $FSA_Min = '0'
let $FSA_Max = '0'

Begin-SELECT

L.FSA_MAX_ANNL_PLDG
MM.MIN_ANNUAL_CONTRIB	!VENDKXY Commented the code to get the correct min/max values in 9.0
MM.MAX_ANNUAL_CONTRIB	!VENDKXY Commented the code to get the correct min/max values in 9.0

  let #FSA_Min = &MM.Min_Annual_Contrib	!VENDKXY Commented the code to get the correct min/max values in 9.0
  let #FSA_Max = &MM.Max_Annual_Contrib	!VENDKXY Commented the code to get the correct min/max values in 9.0
  if (#FSA_Max > &L.FSA_Max_Annl_Pldg)       !Take the more restrictive max
    let #FSA_Max = &L.FSA_Max_Annl_Pldg
  end-if

FROM  PS_BEN_DEFN_PGM  L,
     PS_BEN_DEFN_PLAN M, 
      PS_FSA_BENEF_TBL MM !VENDKXY Commented the code to get the correct min/max values in 9.0  
WHERE L.BENEFIT_PROGRAM = &K.Benefit_Program
and MM.BENEFIT_PLAN= &K.BENEFIT_PLAN !VENDKXY Commented the code to get the correct min/max values in 9.0  
AND   L.EFFDT =
      (SELECT MAX(LL.EFFDT)
       FROM   PS_BEN_DEFN_PGM LL
       WHERE  LL.BENEFIT_PROGRAM = L.BENEFIT_PROGRAM
       AND    LL.EFFDT          <= &J.Event_Dt)
AND   M.BENEFIT_PROGRAM = L.BENEFIT_PROGRAM
AND   M.EFFDT           = L.EFFDT
AND   M.PLAN_TYPE       = &J.Plan_Type
!AND   M.PLAN_TYPE= MM.PLAN_TYPE	!VENDKXY Commented the code to get the correct min/max values in 9.0
End-SELECT

let $FSA_Min = #FSA_Min
let $FSA_Max = #FSA_Max

!*** 'Minimum Annual Contribution:  '
!print $BAS004-MIN-ANN-CON     (+1,1)				AXL 11/21/2003 Disable
!print $FSA_Min                (+0,20) edit {PER_PAY_MASK}	AXL 11/21/2003 Disable

let #col = #ccol5 - 25
!*** 'Annual Pledge $'
!SXK 12/01/1998 Begin
!print $BAS004-ANN-PLG                    (+0,#col)
!print 'Wkly Contribution Amount' (+0,#col)			AXL 11/21/2003 Disable
!SXK 12/01/1998 End

!AXL 11/21/2003 Disable Begin
!let #col = #col + 15 !10
!Graphic (+0,#col,8) horz-line {NORM_LNSIZE}

!print $BEN1-OPT-CD2           (+0,#ccol5)
!let #col = #ccol6 - 5
!Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!AXL 11/21/2003 Disable End

!*** 'Maximum Annual Contribution:  '
!AXL 11/21/2003 New formatting - Begin

!ITG-43752 10\30\2007  vendnrr - Begin

If &j.Plan_Type = '6Z'
       let #new_place = to_number($plan_title_len) + 6
        show '#new_place : '   #new_place
else 
       let #new_place = to_number($plan_title_len) - 5 !AXL 05/31/2005 Used to be 9  
       show '#new_place else : '   #new_place
End-if

!ITG-43752 10\30\2007  vendnrr - End

!AXL 1/21/2005 New MIN clause - Begin
let $FSA_Min_print = edit(#FSA_MIN,'$9,999.99')
let $new_BAS004_MIN_ANN_CON_blurb = '(' || $BAS004-MIN-ANN-CON || ' ' || $FSA_Min_print || '.'


let $FSA_Max_print = edit(#FSA_MAX,'$99,999.99')
!let $new_BAS004_MAX_ANN_CON_blurb = '(' || $BAS004-MAX-ANN-CON || ' ' || $FSA_Max_print || ')'
let $new_BAS004_MAX_ANN_CON_blurb = $BAS004-MAX-ANN-CON || ' ' || $FSA_Max_print || ')'

let $new_BAS004_MAX_MIN_ANN_CON_blurb = $new_BAS004_MIN_ANN_CON_blurb || ' ' || $new_BAS004_MAX_ANN_CON_blurb

!print $BAS004-MAX-ANN-CON     (+1,1)
!print $FSA_Max                (+0,+1) edit {PER_PAY_MASK}
!print $new_BAS004_MAX_ANN_CON_blurb     (+0,#new_place)

!ITG-43752 10\30\2007  vendnrr - Begin
If &j.Plan_Type <> '67'                                               
   print $new_BAS004_MAX_MIN_ANN_CON_blurb     (+0,#new_place)
End-if      
!ITG-43752 10\30\2007  vendnrr - End   
                                                       
!show ' $new_BAS004_MAX_MIN_ANN_CON_blurb ' $new_BAS004_MAX_MIN_ANN_CON_blurb  !testing vendnrr
!AXL 11/21/2003 New formatting - End
!AXL 1/21/2005 New MIN clause - End

if ($Cost_Freq = 'A')
  let #col = #ccol5
!***  'Annual Cost:'
  print $BAS004-ANN-CST      (+0,#col)
  let #col = #ccol6 - 5
  Graphic (+0,#col,8) horz-line {NORM_LNSIZE}
else

!SXK 12/01/1998 Begin
!  let #col = #ccol5 - 32
!***  '(Annual-Pledge - Balance-YTD) / Pay-Pds-Remaining'
!  print $BAS004-T07-L01A           (+1,#col)
!  print '( ____________ - __________ ) /       _______      =' (+1,#col)
!SXK 12/01/1998 End

  let #col = #ccol5
!*** 'Pay Period Cost:'
  !AXL 11/21/2003 Disable Begin
  !print $BAS004-PAY-PER-CST   (+0,#col)
  !let #col = #ccol6 - 3
  !Graphic (+0,#col,8) horz-line {NORM_LNSIZE}
  !AXL 11/21/2003 Disable End
end-if

print ''         (+1,1)

End-Procedure

!********************************
Begin-Procedure Fin-Opt-Calc-Flds
!********************************

!This procedure prints the remaining standard data entry lines in the
!cases where there are so few eligible options that not all lines get
!triggered through the normal process.

if ($Cost_Freq = 'A')
!***  'Annual'
    let $Tmp_Text = $BEN1-ANNUAL
else
!***  'Pay Period'
    let $Tmp_Text = $BEN1-PAY-PERIOD
end-if

Evaluate $Plan_Category

  !---------------------------------------------
  When = '1'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 Begin
!        When = 3
!          print ''                           (+1,1)
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 2
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 End
      End-Evaluate
      add 1 to #counter
    end-while
    break

  !---------------------------------------------
  When ='2'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 3
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 Begin
!        When = 3
!          print ''                           (+1,1)
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 3
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 End
      End-Evaluate
      add 1 to #counter
    end-while
    break

  !---------------------------------------------
  When ='3'
    while #counter < 4
      Evaluate #counter
        When = 2
          print ''                           (+1,1)
          let $Tmp_Text2 = $Tmp_Text || $BEN1-COST2
          print $Tmp_Text2                   (+0,#ccol5)
          let #col = #ccol6 - 4
          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 Begin
!        When = 3
!          print ''                           (+1,1)
!          let $Tmp_Text2 = $Tmp_Text || $BEN1-CREDIT2
!          print $Tmp_Text2                   (+0,#ccol5)
!          let #col = #ccol6 - 4
!          Graphic (+0,#ccol6,3) horz-line {NORM_LNSIZE}
!SXK 12/04/1998 End
      End-Evaluate
      add 1 to #counter
    end-while
    break

End-Evaluate

End-Procedure

!***********************************
Begin-Procedure On-Plan-Break
!***********************************

if ($Plan_Type <> 'XYZ')

  if ($ElectAllowFlag = 'Y')

    if (#Optn_Cnt = 0)
!***    'You do not have any eligible options for this plan.'
        print $BAS004-T08-L01A       (+1,1) Bold
    end-if

    Evaluate $Plan_Category
      When = '1'
      When = '2'
      When = '3'
        if (#counter < 4)
          do Fin-Opt-Calc-Flds
        end-if
        break
    End-Evaluate

  end-if

  do Select-Current-Elect

end-if

End-Procedure

!***********************************
Begin-Procedure Select-Current-Elect
!***********************************

if ((#Current-Line + 2) >= #Page_Maximum)
  do Bottom-Line
  New-Page
  do Check-Optn-Pg-Header
end-if

show ' $FoundCurElectFlag =  '$FoundCurElectFlag
let $FoundCurElectFlag = 'N'

 

!This IF will display current elections for all plans...
!if ($CurElectFlag <> 'N')
!This IF will only display current elections for term'd or 'open' plans...
if ($CurElectFlag = 'O') Or (($CurElectFlag = 'Y') And ($ElectAllowFlag = 'Y'))
  Evaluate $Plan_Category
    When = '1'
      do Current-Health
    When = '2'
      do Current-Life
    When = '3'

!SXK 12/01/1998 Begin
      if $plan_type <> '31' and $plan_type <> '30'
         do Current-Disability  !No IF statement before
      end-if
!SXK 12/01/1998 End

    When = '4'
      do Current-Savings
    When = '5'
      do Current-Leave
    When = '6'
      do Current-FSA
    When = '7'
      do Current-Rtrmnt
    When = '8'
!SXK 12/01/1998 Begin
      if $plan_type <> '82'
         do Current-Pension  !NO if statement before
      end-if
!SXK 12/01/1998 End
    When = '9'
      do Current-Vacation
  End-Evaluate
end-if

if ($ElectAllowFlag = 'Y') And ($FoundCurElectFlag = 'N')
!SXK 12/01/1998 Begin
  And ($plan_type <> '31' and $plan_type <> '82' and $plan_type <> '30')
!SXK 12/01/1998 End

  move 'PLAN_TYPE' to $FieldName
  move $Plan_Type to $FieldValue
  do Read-Translate-Table
  let $Plan_Title = RTRIM($XlatLongName,' ')

!***  'You are not currently participating in the '
!***  $Tmp_Txt || $Plan_Title || ' plan.'
  let $Tmp_Txt = $BAS004-T09-L01A || $Plan_Title
  let $Tmp_Txt = $Tmp_Txt || $BAS004-T09-L01B
  print $Tmp_Txt   (+2,1) Bold
  Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE} !AXL 11/21/2003 New Line
end-if

let $Tmp_Text = ' '

End-Procedure

!SXK 02/10/1999 Begin
!******************************
Begin-Procedure Check-Current-Election
!******************************
let $enrolled = 'N'

Begin-SELECT
CE.COVERAGE_ELECT
  show ' &CE.Coverage_Elect = '

  if (&CE.Coverage_Elect = 'E')
    let $enrolled = 'Y'
  end-if


FROM  [$table_name]
WHERE CE.EMPLID       = &A.EmplId
AND   CE.EMPL_RCD    = &D.EMPL_RCD
AND   CE.PLAN_TYPE    = $Plan_Type
AND   CE.BENEFIT_PLAN = &K.BENEFIT_PLAN
AND   CE.BENEFIT_NBR     =
      (SELECT MAX(OOO1.BENEFIT_NBR)
       FROM  [$table_name_1]
       WHERE CE.EMPLID    = OOO1.EMPLID
       AND   CE.EMPL_RCD = OOO1.EMPL_RCD
       AND   CE.PLAN_TYPE = OOO1.PLAN_TYPE
       AND   CE.EFFDT     = OOO1.EFFDT)
AND   CE.EFFDT =
      (SELECT MAX(OO1.EFFDT)
       FROM  [$table_name_2]
       WHERE CE.EMPLID    = OO1.EMPLID
       AND   CE.EMPL_RCD = OO1.EMPL_RCD
       AND   CE.PLAN_TYPE = OO1.PLAN_TYPE
       AND   CE.BENEFIT_NBR  = OO1.BENEFIT_NBR
!GBD 06/18/2002 BEGIN
!       AND   CE.EFFDT    < &A.Event_Dt)
       AND   OO1.EFFDT   <= &A.Event_Dt)
!GBD 06/18/2002 END
End-SELECT
!display $plan_type
!display $enrolled

End-Procedure



!******************************
Begin-Procedure Current-Health
!******************************

Begin-SELECT
O.BENEFIT_PLAN
O.COVRG_CD
O.COVERAGE_ELECT

  if (&O.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    move &O.Covrg_Cd to $CovrgCd
    !move $AsOfToday to $CovrgEffdt	AXL 1/21/2005 New
    move &A.Event_Dt to $CovrgEffdt	!AXL 1/21/2005 New
    do Get-Covrg-Code-Descr
    Let $Covrg_Cd = RTRIM($CovrgDescr,' ')
    let $Ben_Plan     = &O.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_HEALTH_BENEFIT O
WHERE O.EMPLID       = &A.EmplId
AND   O.EMPL_RCD    = &D.EMPL_RCD
AND   O.PLAN_TYPE    = $Plan_Type
AND   O.BENEFIT_NBR     =
      (SELECT MAX(OOO.BENEFIT_NBR)
       FROM  PS_HEALTH_BENEFIT OOO
       WHERE O.EMPLID    = OOO.EMPLID
       AND   O.EMPL_RCD = OOO.EMPL_RCD
       AND   O.PLAN_TYPE = OOO.PLAN_TYPE
       AND   O.EFFDT     = OOO.EFFDT)
AND   O.EFFDT =
      (SELECT MAX(OO.EFFDT)
       FROM  PS_HEALTH_BENEFIT OO
       WHERE O.EMPLID    = OO.EMPLID
       AND   O.EMPL_RCD = OO.EMPL_RCD
       AND   O.PLAN_TYPE = OO.PLAN_TYPE
       AND   O.BENEFIT_NBR  = OO.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added OO instead of O in EFFDT prefix
       AND   OO.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Life
!******************************

Begin-SELECT
P.BENEFIT_PLAN
P.COVERAGE_ELECT

  if (&P.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &P.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_LIFE_ADD_BEN P
WHERE P.EMPLID       = &A.EmplId
AND   P.EMPL_RCD    = &D.EMPL_RCD
AND   P.PLAN_TYPE    = $Plan_Type
AND   P.BENEFIT_NBR     =
      (SELECT MAX(PPP.BENEFIT_NBR)
       FROM  PS_LIFE_ADD_BEN PPP
       WHERE P.EMPLID    = PPP.EMPLID
       AND   P.EMPL_RCD = PPP.EMPL_RCD
       AND   P.PLAN_TYPE = PPP.PLAN_TYPE
       AND   P.EFFDT     = PPP.EFFDT)
AND   P.EFFDT =
      (SELECT MAX(PP.EFFDT)
       FROM  PS_LIFE_ADD_BEN PP
       WHERE P.EMPLID    = PP.EMPLID
       AND   P.EMPL_RCD = PP.EMPL_RCD
       AND   P.PLAN_TYPE = PP.PLAN_TYPE
       AND   P.BENEFIT_NBR  = PP.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added PP instead of P in EFFDT prefix
       AND   PP.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!*********************************
Begin-Procedure Current-Disability
!*********************************

Begin-SELECT
Q.BENEFIT_PLAN
Q.COVERAGE_ELECT

  if (&Q.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &Q.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_DISABILITY_BEN Q
WHERE Q.EMPLID       = &A.EmplId
AND   Q.EMPL_RCD    = &D.EMPL_RCD
AND   Q.PLAN_TYPE    = $Plan_Type
AND   Q.BENEFIT_NBR     =
      (SELECT MAX(QQQ.BENEFIT_NBR)
       FROM  PS_DISABILITY_BEN QQQ
       WHERE Q.EMPLID    = QQQ.EMPLID
       AND   Q.EMPL_RCD = QQQ.EMPL_RCD
       AND   Q.PLAN_TYPE = QQQ.PLAN_TYPE
       AND   Q.EFFDT     = QQQ.EFFDT)
AND   Q.EFFDT =
      (SELECT MAX(QQ.EFFDT)
       FROM  PS_DISABILITY_BEN QQ
       WHERE Q.EMPLID    = QQ.EMPLID
       AND   Q.EMPL_RCD = QQ.EMPL_RCD
       AND   Q.PLAN_TYPE = QQ.PLAN_TYPE
       AND   Q.BENEFIT_NBR  = QQ.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added QQ instead of Q in EFFDT prefix
       AND   QQ.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Savings
!******************************

let $tax               = 'N'    !values are N(one), P(re), A(fter)
let $pctflt            = 'N'    !values are N(one), P(ercent), F(lat)
let $pct_gross         = '0'
let $flat_ded_amt      = '0'
let $pct_gross_atax    = '0'
let $flat_ded_amt_atax = '0'

Begin-SELECT
R.BENEFIT_PLAN
R.PCT_GROSS
R.FLAT_DED_AMT
R.PCT_GROSS_ATAX
R.FLAT_DED_AMT_ATAX
R.COVERAGE_ELECT

  if (&R.Coverage_Elect = 'E')
    let $Ben_Plan     = &R.Benefit_Plan
    do Get-Ben-Plan-Descr

    if (&R.Pct_Gross > 0)
      let $Tax       = 'P'
      let $PctFlt    = 'P'
      let $Pct_Gross = edit(&R.Pct_Gross, '99.99')
    else
      if (&R.Flat_Ded_Amt > 0)
        let $Tax          = 'P'
        let $PctFlt       = 'F'
        let $Flat_Ded_Amt = edit(&R.Flat_Ded_Amt, '99999.99')
      end-if
    end-if

    if ($Tax = 'P')
!***  'You are currently Contributing pre-tax '
      let $Tmp_Txt1 = $BAS004-T10-L01A
      if ($PctFlt = 'P')
!***    $Pct_Gross || '% to the ' || $Descr || ' plan.'
        let $Tmp_Txt2 = $Pct_Gross || '%'
        let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
        let $Tmp_Txt2 = $Tmp_Txt2  || $Descr
        let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

      else
        if ($PctFlt = 'F')
!***       '$' || $Flat_Ded_Amt || ' to the ' || $Descr || ' plan.'
           let $Tmp_Txt2 = '$' || $Flat_Ded_Amt
           let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
           let $Tmp_Txt2 = $Tmp_Txt2  || $Descr
           let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

        end-if
      end-if
      do Print-Current-Elect
    end-if

    if (&R.Pct_Gross_Atax > 0)
      let $Tax            = 'A'
      let $PctFlt         = 'P'
      let $Pct_Gross_Atax = edit(&R.Pct_Gross_Atax, '99.99')
    else
      if (&R.Flat_Ded_Amt_Atax > 0)
        let $Tax               = 'A'
        let $PctFlt            = 'F'
        let $Flat_Ded_Amt_Atax = edit(&R.Flat_Ded_Amt_Atax, '99999.99')
      end-if
    end-if

    if ($Tax = 'A')
!***  'You are currently Contributing after-tax '
      let $Tmp_Txt1 = $BAS004-T11-L01A
      if ($PctFlt = 'P')
!***     $Pct_Gross_Atax || '% to the ' || $Descr || ' plan.'
         let $Tmp_Txt2 = $Pct_Gross_Atax || '%'
         let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
         let $Tmp_Txt2 = $Tmp_Txt2  || $Descr
         let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B


      else
        if ($PctFlt = 'F')
!***      '$' || $Flat_Ded_Amt_Atax || ' to the ' || $Descr || ' plan.'
          let $Tmp_Txt2 = '$' || $Flat_Ded_Amt_Atax
          let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T10-L01B
          let $Tmp_Txt2 = $Tmp_Txt2  || $Descr
          let $Tmp_Txt2 = $Tmp_Txt2  || $BAS004-T09-L01B

        end-if
      end-if
      do Print-Current-Elect
    end-if

    if ($Tax <> 'N') Or ($PctFlt <> 'N')
      let $FoundCurElectFlag = 'Y'
    end-if
  end-if

FROM  PS_SAVINGS_PLAN R
WHERE R.EMPLID       = &A.EmplId
AND   R.EMPL_RCD    = &D.EMPL_RCD
AND   R.PLAN_TYPE    = $Plan_Type
AND   R.BENEFIT_NBR     =
      (SELECT MAX(RRR.BENEFIT_NBR)
       FROM  PS_SAVINGS_PLAN RRR
       WHERE R.EMPLID    = RRR.EMPLID
       AND   R.EMPL_RCD = RRR.EMPL_RCD
       AND   R.PLAN_TYPE = RRR.PLAN_TYPE
       AND   R.EFFDT     = RRR.EFFDT)
AND   R.EFFDT =
      (SELECT MAX(RR.EFFDT)
       FROM  PS_SAVINGS_PLAN RR
       WHERE R.EMPLID    = RR.EMPLID
       AND   R.EMPL_RCD = RR.EMPL_RCD
       AND   R.PLAN_TYPE = RR.PLAN_TYPE
       AND   R.BENEFIT_NBR  = RR.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added RR instead of R in EFFDT prefix
       AND   RR.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Leave
!******************************

Begin-SELECT
U.BENEFIT_PLAN
U.COVERAGE_ELECT

  if (&U.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &U.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_LEAVE_PLAN U
WHERE U.EMPLID       = &A.EmplId
AND   U.EMPL_RCD    = &D.EMPL_RCD
AND   U.PLAN_TYPE    = $Plan_Type
AND   U.BENEFIT_NBR     =
      (SELECT MAX(UUU.BENEFIT_NBR)
       FROM  PS_LEAVE_PLAN UUU
       WHERE U.EMPLID    = UUU.EMPLID
       AND   U.EMPL_RCD = UUU.EMPL_RCD
       AND   U.PLAN_TYPE = UUU.PLAN_TYPE
       AND   U.EFFDT     = UUU.EFFDT)
AND   U.EFFDT =
      (SELECT MAX(UU.EFFDT)
       FROM  PS_LEAVE_PLAN UU
       WHERE U.EMPLID    = UU.EMPLID
       AND   U.EMPL_RCD = UU.EMPL_RCD
       AND   U.PLAN_TYPE = UU.PLAN_TYPE
       AND   U.BENEFIT_NBR  = UU.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added UU instead of U in EFFDT prefix
       AND   UU.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-FSA
!******************************

  let $Empl_Contrbutn_Amt = '0'
  let $Annual_Pledge      = '0'

Begin-SELECT
V.BENEFIT_PLAN
V.EMPL_CONTRBUTN_AMT
V.ANNUAL_PLEDGE
V.COVERAGE_ELECT

  if (&V.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan = &V.Benefit_Plan
    do Get-Ben-Plan-Descr
!***'You are currently covered under the ' || $Descr || ' option with '
    let $Tmp_Txt1 = $BAS004-T12-L01A
    let $Tmp_Txt1 = $Tmp_Txt1 || $Descr
    let $Tmp_Txt1 = $Tmp_Txt1 || $BAS004-T12-L01B

    let $Annual_Pledge = Edit(&V.Annual_Pledge, '99,999.99')

!SXK 12/01/1998 Begin
    let $weekly_contrib = Edit(&V.Empl_Contrbutn_Amt, '99,999.99')
!***'an Annual Pledge of $' || $Annual_Pledge
!    let $Tmp_Txt2 = $BAS004-T12-L01C || $Annual_Pledge || '.'
     let $Tmp_Txt2 = 'Weekly Contribution of $'||$weekly_Contrib|| '.'   
!SXK 12/01/1998 End

    do Print-Current-Elect
  end-if

FROM PS_FSA_BENEFIT V
WHERE V.EMPLID       = &A.EmplId
AND   V.EMPL_RCD    = &D.EMPL_RCD
AND   V.PLAN_TYPE    = $Plan_Type
AND   V.BENEFIT_NBR     =
      (SELECT MAX(VVV.BENEFIT_NBR)
       FROM  PS_FSA_BENEFIT VVV
       WHERE V.EMPLID    = VVV.EMPLID
       AND   V.EMPL_RCD = VVV.EMPL_RCD
       AND   V.PLAN_TYPE = VVV.PLAN_TYPE
       AND   V.EFFDT     = VVV.EFFDT)
AND   V.EFFDT =
      (SELECT MAX(VV.EFFDT)
       FROM  PS_FSA_BENEFIT VV
       WHERE V.EMPLID    = VV.EMPLID
       AND   V.EMPL_RCD = VV.EMPL_RCD
       AND   V.PLAN_TYPE = VV.PLAN_TYPE
       AND   V.BENEFIT_NBR  = VV.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added VV instead of V in EFFDT prefix
       AND   VV.EFFDT     < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Rtrmnt
!******************************

Begin-SELECT
Y.BENEFIT_PLAN
Y.COVERAGE_ELECT

  if (&Y.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &Y.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM  PS_RTRMNT_PLAN Y
WHERE Y.EMPLID       = &A.EmplId
AND   Y.EMPL_RCD    = &D.EMPL_RCD
AND   Y.PLAN_TYPE    = $Plan_Type
AND   Y.BENEFIT_NBR     =
      (SELECT MAX(YYY.BENEFIT_NBR)
       FROM  PS_RTRMNT_PLAN YYY
       WHERE Y.EMPLID    = YYY.EMPLID
       AND   Y.EMPL_RCD = YYY.EMPL_RCD
       AND   Y.PLAN_TYPE = YYY.PLAN_TYPE
       AND   Y.EFFDT     = YYY.EFFDT)
AND   Y.EFFDT =
      (SELECT MAX(YY.EFFDT)
       FROM  PS_RTRMNT_PLAN YY
       WHERE Y.EMPLID    = YY.EMPLID
       AND   Y.EMPL_RCD = YY.EMPL_RCD
       AND   Y.PLAN_TYPE = YY.PLAN_TYPE
       AND   Y.BENEFIT_NBR  = YY.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added YY instead of Y in EFFDT prefix
       AND   YY.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!******************************
Begin-Procedure Current-Pension
!******************************

Begin-SELECT
W.BENEFIT_PLAN
W.COVERAGE_ELECT

  if (&W.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &W.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_PENSION_PLAN W
WHERE W.EMPLID       = &A.EmplId
AND   W.EMPL_RCD    = &D.EMPL_RCD
AND   W.PLAN_TYPE    = $Plan_Type
AND   W.BENEFIT_NBR     =
      (SELECT MAX(WWW.BENEFIT_NBR)
       FROM  PS_PENSION_PLAN WWW
       WHERE W.EMPLID    = WWW.EMPLID
       AND   W.EMPL_RCD = WWW.EMPL_RCD
       AND   W.PLAN_TYPE = WWW.PLAN_TYPE
       AND   W.EFFDT     = WWW.EFFDT)
AND   W.EFFDT =
      (SELECT MAX(WW.EFFDT)
       FROM  PS_PENSION_PLAN WW
       WHERE W.EMPLID    = WW.EMPLID
       AND   W.EMPL_RCD = WW.EMPL_RCD
       AND   W.PLAN_TYPE = WW.PLAN_TYPE
       AND   W.BENEFIT_NBR  = WW.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added WW instead of W in EFFDT prefix
       AND   WW.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!*******************************
Begin-Procedure Current-Vacation
!*******************************

Begin-SELECT
X.BENEFIT_PLAN
X.COVERAGE_ELECT

  if (&X.Coverage_Elect = 'E')
    let $FoundCurElectFlag = 'Y'
    let $Ben_Plan     = &X.Benefit_Plan
    do Get-Ben-Plan-Descr
    do Print-Current-Elect
  end-if

FROM PS_VACATION_BEN X
WHERE X.EMPLID       = &A.EmplId
AND   X.EMPL_RCD    = &D.EMPL_RCD
AND   X.PLAN_TYPE    = $Plan_Type
AND   X.BENEFIT_NBR     =
      (SELECT MAX(XX.BENEFIT_NBR)
       FROM  PS_VACATION_BEN XX
       WHERE X.EMPLID    = XX.EMPLID
       AND   X.EMPL_RCD = XX.EMPL_RCD
       AND   X.PLAN_TYPE = XX.PLAN_TYPE
       AND   X.EFFDT     = XX.EFFDT)
AND   X.EFFDT =
      (SELECT MAX(XXX.EFFDT)
       FROM  PS_VACATION_BEN XXX
       WHERE X.EMPLID    = XXX.EMPLID
       AND   X.EMPL_RCD = XXX.EMPL_RCD
       AND   X.PLAN_TYPE = XXX.PLAN_TYPE
       AND   X.BENEFIT_NBR  = XXX.BENEFIT_NBR
!SXK 04/20/1999 Begin - Added XXX instead of X in EFFDT prefix
       AND   XXX.EFFDT    < &A.Event_Dt)
!SXK 04/20/1999 End
End-SELECT

End-Procedure

!**********************************
Begin-Procedure Print-Current-Elect
!**********************************

Evaluate $Plan_Category
  When = '1'
    if ($CurElectFlag <> 'O')
!***  'You are currently covered under ' || $Descr
!***  $Tmp_Txt || ' with '  || $Covrg_Cd || ' coverage.'
      let $Tmp_Txt = $BAS004-T13-L01A || $Descr
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T13-L01B
      let $Tmp_Txt = $Tmp_Txt || $Covrg_Cd
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T13-L01C

    else
!***  'Your current coverage under ' || $Descr
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T14-L01A || $Descr
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B

    end-if
  When = '2'
  When = '3'
  When = '5'
  When = '8'
  When = '9'
    if ($CurElectFlag <> 'O')
!***  'You are currently covered under the ' || $Descr || ' option.'
      let $Tmp_Txt = $BAS004-T12-L01A || $Descr
      let $Tmp_Txt = $Tmp_Txt ||  $BAS004-T15-L01A
    else
!***  'Your current coverage under ' || $Descr
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T14-L01A || $Descr
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B

    end-if
  When = '4'
  When = '6'
    if ($CurElectFlag <> 'O')
      let $Tmp_Txt = $Tmp_Txt1 || $Tmp_Txt2
    else
!***  'Your current contribution to ' || $Descr
!***  'will be terminated due to loss of eligibility.'
      let $Tmp_Txt = $BAS004-T17-L01A || $Descr
      let $Tmp_Txt = $Tmp_Txt || $BAS004-T14-L01B
    end-if
End-Evaluate

print $Tmp_Txt (+2,1) bold
Graphic (+1,1,{NORM_LNLENGTH}) Horz-Line {NORM_LNSIZE} !AXL 11/21/2003 New Line

End-Procedure

!******************************
Begin-Procedure Footer
!******************************

if (#Current-Line >= #Page_Max_Last)
  do Bottom-Line
  New-Page
  print '' (+1,1)
  goto exit-proc
end-if

!SXK 12/01/1998 Begin
!Graphic () font 5 {NORM}
!Graphic (#Start_Footer,1,{NORM_LNLENGTH}) horz-line {NORM_LNSIZE} ! Horizontal line.

!if ($Cost_Freq = 'A')
!***'Total Cost per Year '
!  print $BAS004-T18-L01A        (+2,1)
!else
!***'Total Per Pay Period Cost '
!   print  $BAS004-T19-L01A      (+2,1)
!end-if
!print '$'        (+0,#ccol5)
!let  #col = #ccol5+1
!Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

!if ($Cost_Freq = 'A')
!***'Minus Total Annual Flexible Credits'
!  print $BAS004-T20-L01A      (+2,1)
!else
!***'Minus Total Per Pay Flexible Credits'
!  print $BAS004-T21-L01A      (+2,1)
!end-if
!print '$'        (+0,#ccol5)
!let  #col = #ccol5+1
!Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

!***'Total'
!print $BEN1-TOTAL             (+2,1) bold
!print '$'        (+0,#ccol5)
!let  #col = #ccol5+1
!Graphic          (+0,#col,8) horz-line {NORM_LNSIZE} ! Horizontal line.

!***'If the Total number is positive,'
!***'it represents the annual deductions from your pay that will'
!***'be required to pay for your'
!***'benefits.'
!let $Tmp_Txt = $BAS004-T22-L01A
!let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L01B
!let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L01C
!print $Tmp_Txt     (+2,1)
!let $Tmp_Txt = $BAS004-T22-L02A
!print $Tmp_Txt     (+1,1)

!***'If this number is negative,'
!***' it represents the amount of cash '
!let $Tmp_Txt = $BAS004-T22-L03A
!let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03B
!if ($Cost_Freq = 'A')
!***'annually '
!  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03C
!else
!***'per pay period '
!  let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03D
!end-if
!let $Tmp_Txt = $Tmp_Txt || $BAS004-T22-L03E
!print $Tmp_Txt     (+1,1)

!SXK 12/01/1998 End

do Bottom-Line
New-Page

exit-proc:
End-Procedure

!*************************************
Begin-Procedure Print-Sav-Instructions
!*************************************

!***'INVESTMENTS'
!***$BAS004-INVTS
!***'The following box lists all the investment options that you are '
!***'eligible for.  Please select the investment you would'
!***' like to'
!***'participate in by entering a percent of your 401k Contribution      '
!***' to go into the fund.'

let $Tmp_Txt = $BAS004-T23-L01A
print $Tmp_Txt     (+3,1)
let $Tmp_Txt = $BAS004-T23-L02A
let $Tmp_Txt = $Tmp_Txt || $BAS004-T23-L02B
print $Tmp_Txt     (+1,1)
let $Tmp_Txt = $BAS004-T23-L02C
print $Tmp_Txt     (+1,1)


End-Procedure

!*******************************
Begin-Procedure Select-Inv-Optns
!*******************************
!  display 'Select-Inv-Optns'

Begin-SELECT
Z.SCHED_ID
Z.EMPLID
Z.BENEFIT_RCD_NBR
Z.EVENT_ID
Z.PLAN_TYPE

  do Process-Inv-Optns

FROM  PS_BAS_PARTIC_PLAN Z
WHERE Z.SCHED_ID      = &A.Sched_Id
AND   Z.EMPLID        = &A.EmplId
AND   Z.BENEFIT_RCD_NBR  = &A.BENEFIT_RCD_NBR
AND   Z.EVENT_ID      = &A.Event_Id
!SXK 12/23/1998 begin
!AND   Z.PLAN_TYPE     LIKE '4%'
AND   Z.PLAN_TYPE     in ('40','4W')
!SXK 12/23/1998 End
AND   Z.ELECT_ALLOWED = 'Y'
ORDER BY Z.PLAN_TYPE ASC
End-SELECT

End-Procedure

!********************************
Begin-Procedure Process-Inv-Optns
!********************************
!  display 'Process-Inv-Optns'

let $Last_Plan  = 'xyz'
let #Invest_Cnt = 0
let #PrRowCnt   = 0

Begin-SELECT

ZA.BENEFIT_PLAN

!GBD 06/17/2002 Begin
!  display 'Benefit Plan: ' noline
!  display &ZA.BENEFIT_PLAN
!GBD 06/17/2002 End

  if (&ZA.Benefit_Plan <> $Last_Plan)
    do Select-Valid-Optns
  end-if
  let $Last_Plan = &ZA.Benefit_Plan

FROM  PS_BAS_PARTIC_OPTN ZA
WHERE ZA.SCHED_ID     = &Z.Sched_Id
AND   ZA.EMPLID       = &Z.EmplId
AND   ZA.BENEFIT_RCD_NBR = &Z.BENEFIT_RCD_NBR
AND   ZA.EVENT_ID     = &Z.Event_Id
AND   ZA.PLAN_TYPE    = &Z.Plan_Type
AND   ZA.HISTORY_ONLY = 'N'
ORDER BY ZA.BENEFIT_PLAN ASC
End-SELECT

End-Procedure

!*********************************
Begin-Procedure Select-Valid-Optns
!*********************************
!  display 'Select-Valid-Optns'

let #Invest_Cnt = 0

Begin-SELECT

ZB.INVESTMENT_OPT
ZB.DESCRSHORT

!GBD 06/17/2002 Begin
!  display 'Investment Option: ' noline
!  display &ZB.INVESTMENT_OPT noline
!  display ' - ' noline
!  display &ZB.DESCRSHORT
!GBD 06/17/2002 End

  add 1 to #Invest_Cnt
  do Print-Inv-Optns

FROM  PS_SAVINGS_INV_TBL ZB
WHERE ZB.PLAN_TYPE    = &Z.Plan_Type
AND   ZB.BENEFIT_PLAN = &ZA.Benefit_Plan
AND   ZB.EFFDT =
      (SELECT MAX(ZC.EFFDT)
      FROM  PS_SAVINGS_INV_TBL ZC
      WHERE ZC.PLAN_TYPE    = ZB.PLAN_TYPE
      AND   ZC.BENEFIT_PLAN = ZB.BENEFIT_PLAN
      AND   ZC.EFFDT       <= &A.Event_Dt)
ORDER BY ZB.INVESTMENT_OPT ASC
End-SELECT

if  #Invest_Cnt       > 0
 Graphic (0,#TmpCol,{SAV_LNLENGTH}) Horz-Line {NORM_LNSIZE}
end-if

if ((#Current-Line +5) >= #Page_Maximum)
  do Bottom-Line
  New-Page
  print '' (+1,1)
  do Print-Investment-Boxes
end-if

End-Procedure

!*******************************
Begin-Procedure Print-Inv-Optns
!*******************************

let #TmpCol = {INVCOL} + 1                       !Column to print benefit plan
let #PrRowCnt = #PrRowCnt + 1

!SXK 12/04/1998 Begin
Graphic (+1,{OPTCOL},{WIDTH}) box :#depth {NORM_LNSIZE}
print &ZA.Benefit_Plan            (+0,#TmpCol)
!SXK 12/04/1998 End

print &ZB.Investment_Opt          (+0,12)
print &ZB.DescrShort              (+0,14)
Graphic (+0,29,12) box 1 {NORM_LNSIZE}           ! Percent Option Box

End-Procedure

!**************************************
Begin-Procedure Print-Investment-Boxes
!**************************************

let #depth = 1

!***'INVESTMENT OPTION'
!SXK 12/23/1998 Begin Changed orow1 to 0
!print $BAS004-INV-OPT         (#orow1,#optncol4) Bold
print $BAS004-INV-OPT         (+3,#optncol4) Bold
Graphic (0,{OPTCOL},{WIDTH}) box :#depth {SMAL_LNSIZE}
Graphic (0,{OPTCOL},{WIDTH}) horz-line {SMAL_LNSIZE}

!***'PERCENT'
print $BAS004-PERCENT               (0,#optncol5)
Graphic (0,#ocol1,{O_BOX_LEN}) box :#depth {SMAL_LNSIZE}
Graphic (0,#ocol1,{O_BOX_LEN}) horz-line {SMAL_LNSIZE}
!SXK 12/23/1998 End
End-Procedure

!***********************************
Begin-Procedure Print-Signature-Line
!***********************************

 if ((#Current-Line + 5) >= #Page_Maximum) !Used to 10
   do Bottom-Line
   New-Page
 end-if

 !***'Authoriztion - AXL 1/21/2005 New blurb'
 let $gex_auth = 'I hereby authorize Giant Eagle, Inc. to withhold the necessary '
 let $gex_auth = $gex_auth || 'contributions from my paycheck for '
 let $gex_auth = $gex_auth || 'the benefits elected above.'

 print $gex_auth  (+4,1)

 !***'SIGNATURE:'
 print $BEN1-SIGNATURE2                    (+3,1) bold !10 was (+5,1) AXL 1/2005
 print '_________________________________' (+0,+0)
 print $BEN1-DATE2                         (+0,+0) bold
 print '______/______/________'            (+0,+0)  	!AXL 11/212003 Extend lines

 do Bottom-Line-New	!AXL 011/21/2003 New code for duplex

End-Procedure

!*******************************
Begin-Procedure Upd-Status-Date
!*******************************

let $Sql-Statement = 'BAS004: UPDATE PS_Bas_Partic (Notify_Dt)'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
   SET OPTION_NOTIFY_DT = $AsOfToday
 WHERE SCHED_ID         = &A.Sched_Id
   AND EMPLID           = &A.EmplId
   AND BENEFIT_RCD_NBR     = &A.BENEFIT_RCD_NBR
   AND EVENT_ID         = &A.Event_Id;

End-SQL

let $Sql-Statement = 'BAS004: UPDATE PS_Bas_Partic (Status)'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
   SET BAS_PROCESS_STATUS = 'NT',
       STATUS_DT          = $AsOfToday
 WHERE SCHED_ID           = &A.Sched_Id
   AND EMPLID             = &A.EmplId
   AND BENEFIT_RCD_NBR       = &A.BENEFIT_RCD_NBR
   AND EVENT_ID           = &A.Event_Id
   AND BAS_PROCESS_STATUS = 'PR';

End-SQL

  display 'Form printed for EmplId: ' NoLine
  display &A.EmplId

End-Procedure

!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id;

End-SQL

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt_Partic'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT_PARTIC
WHERE PRINT_ID = $Reprint_Id;

End-SQL

End-Procedure

!*******************************
Begin-Procedure Reset-Printer
!*******************************

New-Page

End-Procedure

!*******************************
Begin-Procedure Display-Time
!*******************************

  do Get-Current-Datetime
  display $AsOfNow
  display ''

End-Procedure

!***************************************************************************

#Include 'readxlat.sqc' !Get translate Values
!SXK 12/01/1998 Begin
!#Include 'basdep00.sqc' !Process Dependent Coverages
#include 'gexbndep.sqc' !Process Dependent Coverages
#include 'datemath.sqc'
!SXK 12/01/1998 End
#Include 'number.sqc'   !Number formatting routines
#Include 'datetime.sqc' !Date formatting routines
#Include 'askcar.sqc'    !Ask_EmplID
#Include 'curdttim.sqc' !Get-Current-DateTime procedure
#Include 'getsched.sqc' !Ask-Schedule-Id Procedure
#Include 'getcvgcd.sqc' !Get-Covrg-Code-Descr procedure

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!GBD 06/17/2002 Begin
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!GBD 06/17/2002 End
#Include 'rotname1.sqc'  !Rotate-Name procedure
!**************************** End of Report ********************************