!***********************************************************************
! RSIHRSWK:  Hourly Employees Average Weekly Hours Report              *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  11/07/2013  RSI-HCM103269  v1.1                                     *
!  Descr: Initial Version to populate table and create report.         *
!         Created for Patient Protection and Affordable Care Act       *
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'   ! Set Environment
#Include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information
#Include 'setup32.sqc'  ! Printer and Page-Size Initialization

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver     '1.1'
  #Define ReportID     RSIHRSWK
  #Define Max_Rows     500000
  !#Define DebugB
  !#Define DebugE      !Shows employee selected JOB data
  !#Define DebugH      !Shows employee Health Benefit data
  !#Define DebugS      !Shows employee Special Earnings

  #Define Dyn-S [
  #Define Dyn-E ]

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #IfDef RSI_TOOLS_7.5
     #Define HdgLines 10
  #Else
     #Define HdgLines 8
  #EndIf

End-Setup

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program

  do Initialization
  do Get-Current-DateTime

  Show $sqr-platform
  Show '{ReportID}.SQR - Version '  {Prgm_Ver}
  Show '**************************************************'
  let $Start = edit(datenow(),'MM/DD/YYYY HH24:MI:SS')
  Show 'Report Started at : ' $Start
  Show ''
  Show $ReportDescr
  Show ''

  If $Prcs_Process_Instance <> ''
     do Get-Rptg-Parms
  Else

     input $Prcs_OprID batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     If $Prcs_OprID = '' and $Prcs_Run_Cntl_ID = ''
        Show ''
        Show 'Report requires Operator ID and Run Control ID used on the Run Control Records to run.'
        Show ''
        STOP
     Else
        do Get-Rptg-Parms
     End-If

  End-If

     Show '  ********* Run Parameters ***************'
     Show '  Run Control ID:         ' $Stg_Run_Cntl_ID
     Show '  Period Date From:       ' $Prnt_FromDate
     Show '  Period Date To:         ' $Prnt_ThruDate
     Show '  Special Accumulator:    ' $RC_Erncd_Spcl
     Show '  Average Hours Limit:    ' $RC_Limit_Hours_Prnt
     Show '  Hours Condition:        ' $RC_Gt_Lt
     Show '  Print PS Health Data:   ' $RC_Print_HB
     Show '  Without Coverage Only:  ' $RC_Without_HB
     Show '  ****************************************'
     Show ''
     Show '  Weeks in report period = ' $WeeksInFromTo
     Show ''

  do Delete-Staging
  do Process-Main

  let $End = edit(datenow(),'MM/DD/YYYY HH24:MI:SS')
  Show ' '
  Show 'Report Ended at : ' $End
  Show '**************************************************'

  do Stdapi-Term

End-Program

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Set-DB

  Create-Array
    Name  = EMPL_HB
    Size  = {Max_Rows}
    Field = EMPLID:char
    Field = COMPANY:char

  let $ReportID    = '{ReportID}'
  let $ReportDescr = 'Hourly Employees Average Weekly Hours'
  let $NoData      = 'No data found for report request parameters'

End-Procedure Initialization

!***********************************************************************
! Procedure Set-DB
!***********************************************************************
Begin-Procedure Set-DB

  #IfDef DB2ALL
     #Define DB2
  #EndIf
  #IfDef DB2UNIX
     #Define DB2
  #EndIf
  #IfDef DB2400
     #Define DB2
  #EndIf
  #IfDef DB2DDCS
     #Define DB2
  #EndIf

End-Procedure Set-DB

!***********************************************************************
! Procedure Get-Rptg-Parms
!***********************************************************************
Begin-Procedure Get-Rptg-Parms

BEGIN-SELECT
FF.DATE_FROM
FF.DATE_TO
FF.ERNCD_SPCL
FF.DESIRED_HOURS
FF.RSI_PRINT_FLG
FF.RSI_WAIVE_FLG
FF.REPORT_YN

  move &FF.DATE_FROM     to $RC_FromDate
  move &FF.DATE_TO       to $RC_ThruDate
  move &FF.ERNCD_SPCL    to $RC_Erncd_Spcl
  move &FF.DESIRED_HOURS to #RC_Limit_Hours
  move &FF.DESIRED_HOURS to $RC_Limit_Hours_Prnt '89.9B'
  move &FF.RSI_PRINT_FLG to $RC_Print_HB
  move &FF.RSI_WAIVE_FLG to $RC_Without_HB
  move &FF.REPORT_YN     to $RC_Gt_Lt

  If $RC_Gt_Lt = 'Y'
     let $RC_Gt_Lt = '>='
  Else
     let $RC_Gt_Lt = '<='
  End-If

  let $ReportSubtitle = 'Special Accumulator ' || $RC_Erncd_Spcl || ' Hours Limit ' || $RC_Gt_Lt || ' ' || $RC_Limit_Hours_Prnt
  let $AsOfDate = $RC_ThruDate

  do Format-DateTime($RC_FromDate, $Prnt_FromDate, {DEFMDY},'','')
  do Format-DateTime($RC_ThruDate, $Prnt_ThruDate, {DEFMDY},'','')
  let $ReportDates = 'Pay End Dates From ' || $Prnt_FromDate || ' To ' || $Prnt_ThruDate

  do Convert-To-DTU-Date(&FF.DATE_FROM, $RC_FromDate_YMD)
  do Convert-To-DTU-Date(&FF.DATE_TO, $RC_ThruDate_YMD)
  do DTU-Diff-Days($RC_FromDate_YMD, $RC_ThruDate_YMD, #DaysInFromTo)
  add 1 to #DaysInFromTo
  let $WeeksInFromTo = rtrim(edit((#DaysInFromTo/7),'889.9B'),'.0')
  let $Stg_Run_Cntl_ID = Upper($Prcs_Run_Cntl_ID)

FROM PS_RC_RSIHRSWK FF
WHERE FF.OPRID       = $Prcs_OprID
  AND FF.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

End-Procedure Get-Rptg-Parms

!***********************************************************************
! Procedure Heading {HdgLines}
!***********************************************************************
Begin-Heading {HdgLines}

  #Include 'stdhdg01.sqc'

  #IfDef RSI_TOOLS_7.5
     print $ReportDescr                      (2,66)
     print $ReportSubtitle                   (3,62)
  #Else
     print $ReportDescr                      (2)  center
     print $ReportSubtitle                   (3)  center
  #EndIf
  print 'Date From: '                        (3,1)
  print $Prnt_FromDate                       (3,+1)
  print 'Date To:   '                        (4,1)
  print $Prnt_ThruDate                       (4,+1)

  print '<---- Status Changes ---->'         (+3,67)
  print 'Empl'                               (+1,47)
  print 'Employee'                           (0,55)
  print 'Hire or'                            (0,67)
  print 'Full/'                              (0,79)
  print 'Leave'                              (0,87)
  print 'Total'                              (0,120)
  print 'Average'                            (0,133)

  If $RC_Print_HB = 'Y'
     print 'Health'                          (0,151)
     print 'Effective'                       (0,164)
  End-If

  print 'Employee ID'                        (+1,2)
  print 'Employee Name'                      (0,17)
  print 'Rcd#'                               (0,47)
  print 'Status'                             (0,56)
  print 'Rehire'                             (0,67)
  print 'Part'                               (0,79)
  print 'Status'                             (0,87)
  print 'Company'                            (0,97)
  print 'Hours'                              (0,120)
  print 'Hours'                              (0,134)

  If $RC_Print_HB = 'Y'
     print 'Election'                        (0,150)
     print 'Date'                            (0,167)
  End-If

  #IfDef RSI_TOOLS_7.5
     Position (+1)
  #EndIf
  print '_'                                  (0,2,103)  fill
  print '_'                                  (0,117,23) fill

  If $RC_Print_HB = 'Y'
     print '_'                               (0,150,24) fill
  End-If

End-Heading

!***********************************************************************
! Procedure Delete-Staging
!***********************************************************************
Begin-Procedure Delete-Staging

BEGIN-SELECT
COUNT(*) &STG_DEL_COUNT

  move &STG_DEL_COUNT to #Stg_Del_Count

FROM PS_RSIHRSWK_STG
WHERE RUN_CNTL_ID = $Stg_Run_Cntl_ID
END-SELECT

BEGIN-SQL on-error=Ignore-SQL-Error
DELETE FROM PS_RSIHRSWK_STG
WHERE RUN_CNTL_ID = $Stg_Run_Cntl_ID
END-SQL

End-Procedure Delete-Staging

!***********************************************************************
! Procedure Ignore-SQL-Error
!***********************************************************************
Begin-Procedure Ignore-SQL-Error

! Dummy procedure to avoid SQL error message on delete of empty table

End-Procedure Ignore-SQL-Error

!***********************************************************************
! Process-Main
!***********************************************************************
Begin-Procedure Process-Main

#IfDef RSI_TOOLS_7.5
   let $Job_Empl_Rcd     = ' JOB.EMPL_RCD# '
   let $Job_Empl_Rcd2    = ' AND JOB2.EMPL_RCD# = JOB.EMPL_RCD# '
   let $Job_Empl_Rcd3    = ' AND JOB3.EMPL_RCD# = JOB.EMPL_RCD# '
   let $Job_Emplid_Join  = ' AND JOB.EMPLID     = EMP.EMPLID '
   let $Job_Emp_Rcd_Join = ' AND JOB.EMPL_RCD#  = EMP.EMPL_RCD# '
   let $Job_Order_By     = ' ORDER BY JOB.COMPANY, JOB.EMPLID, JOB.EMPL_RCD# '
#Else
   let $Job_Empl_Rcd     = ' JOB.EMPL_RCD '
   let $Job_Empl_Rcd2    = ' AND JOB2.EMPL_RCD = JOB.EMPL_RCD '
   let $Job_Empl_Rcd3    = ' AND JOB3.EMPL_RCD = JOB.EMPL_RCD '
   #If {RSI_APP_REL} < 8.9
       let $Job_Emplid_Join  = ' AND JOB.EMPLID   = EMP.EMPLID '
       let $Job_Emp_Rcd_Join = ' AND JOB.EMPL_RCD = EMP.EMPL_RCD '
   #Else
       let $Job_Emplid_Join  = ''
       let $Job_Emp_Rcd_Join = ''
   #EndIf
   let $Job_Order_By = ' ORDER BY JOB.COMPANY, JOB.EMPLID, JOB.EMPL_RCD '
#EndIf

BEGIN-SELECT
JOB.EMPLID
{Dyn-S}$Job_Empl_Rcd{Dyn-E}  &JOB.EMPL_RCD=number
JOB.EFFDT
JOB.EFFSEQ
JOB.ACTION
JOB.DEPTID
JOB.EMPL_STATUS
JOB.EMPL_TYPE
JOB.REG_TEMP
JOB.FULL_PART_TIME
JOB.COMPANY
JOB.PAYGROUP
JOB.STD_HOURS
#If {RSI_APP_REL} < 8.9
EMP.HIRE_DT           &HIRE_DT
EMP.REHIRE_DT         &REHIRE_DT
#Else
JOB.HIRE_DT           &HIRE_DT
JOB.LAST_HIRE_DT      &REHIRE_DT
#EndIf
A.COMMON_PAY_ID

  let $Emplid       = &JOB.EMPLID
  let #Empl_Rcd     = &JOB.EMPL_RCD
  let $EmplRcd      = to_char(#Empl_Rcd)
  let $Job_Action   = &JOB.ACTION
  let $Deptid       = &JOB.DEPTID
  let $Empl_Status  = &JOB.EMPL_STATUS
  let $Status_Prior = &JOB.EMPL_STATUS
  let $FtPt         = &JOB.FULL_PART_TIME
  let $FtPt_Prior   = &JOB.FULL_PART_TIME
  let $Reg_Temp     = &JOB.REG_TEMP
  let $Paygroup     = &JOB.PAYGROUP
  let #Std_Hours    = &JOB.STD_HOURS
  let $Hire_Dt      = &HIRE_DT
  let $Last_Hire    = &REHIRE_DT
  let $Paymaster    = &A.COMMON_PAY_ID

  If &JOB.COMPANY <> $Company
     move &JOB.COMPANY to $Company
     #IfDef DebugE
        do Get-Company-Data
        Show ' '
        Show 'Main Select Company:  ' $Company ' - ' $CompanyName
        If rtrim($Paymaster, ' ') <> ''
           Show 'Common Pay ID:   ' $Paymaster
        End-If
     #EndIf
  End-If

  #IfDef DebugE
     do Show-DebugE-Statements
  #EndIf

  do Evaluate-EE-Job
  do Convert-To-DTU-Date(&JOB.EFFDT, $Job_Effdt_YMD)

  If $Job_Effdt_YMD > $RC_FromDate_YMD
     #IfDef DebugE
        Show '    ' &JOB.EMPLID ' ' &JOB.EMPL_RCD ':  Effective date ' &JOB.EFFDT ' within date range ' $RC_FromDate ' - ' $RC_ThruDate
     #EndIf
     do Select-Prior-Job
  End-If

  do Sel-Hours-By-Spcl-Earns
  do Calc-Avg-Wkly-Hrs
  do Select-Health-Ben
  do Insert-Staging

#If {RSI_APP_REL} < 8.9
FROM PS_JOB JOB, PS_EMPLOYMENT EMP, PS_COMPANY_TBL A
#Else
FROM PS_JOB JOB, PS_COMPANY_TBL A
#EndIf
WHERE JOB.COMPANY      = A.COMPANY
  AND JOB.EMPL_STATUS IN ('A','L','P','S')
  AND JOB.EMPL_TYPE   IN ('E','H')
  AND JOB.EFFDT        = (SELECT MAX(JOB2.EFFDT)
                          FROM PS_JOB JOB2
                          WHERE JOB2.EMPLID = JOB.EMPLID
                            {Dyn-S}$Job_Empl_Rcd2{Dyn-E}
                            AND JOB2.EFFDT <= $RC_ThruDate)
  AND JOB.EFFSEQ       = (SELECT MAX(JOB3.EFFSEQ)
                          FROM PS_JOB JOB3
                          WHERE JOB3.EMPLID = JOB.EMPLID
                            {Dyn-S}$Job_Empl_Rcd3{Dyn-E}
                            AND JOB3.EFFDT = JOB.EFFDT)
  AND A.EFFDT          = (SELECT MAX(A1.EFFDT)
                          FROM PS_COMPANY_TBL A1
                          WHERE A1.COMPANY = A.COMPANY
                            AND A1.EFFDT  <= $RC_ThruDate)
 {Dyn-S}$Job_Emplid_Join{Dyn-E}
 {Dyn-S}$Job_Emp_Rcd_Join{Dyn-E}
 {Dyn-S}$Job_Order_By{Dyn-E}
END-SELECT

  do Create-Report
  do Report-Summary

End-Procedure Process-Main

!***********************************************************************
! Procedure Evaluate-EE-Job
!***********************************************************************
Begin-Procedure Evaluate-EE-Job

  let $Hir_Reh      = 'N'
  let $Pt_Ft        = 'N'
  let $Leave_Status = 'N'

  If $Job_Action = 'HIR' or $Job_Action = 'REH'
     If $Job_Effdt_YMD >= $RC_FromDate_YMD
        let $Hir_Reh = 'Y'
     End-If
  End-If

  If $FtPt <> $FtPt_Prior or $Type_Prior = 'S'
     let $Pt_Ft = 'Y'
  End-If

  If (($Empl_Status = 'L' or $Empl_Status = 'P') and ($Status_Prior = 'A' or $Status_Prior = 'S'))
  or (($Empl_Status = 'A' or $Empl_Status = 'S') and ($Status_Prior = 'L' or $Status_Prior = 'P'))
     let $Leave_Status = 'Y'
  End-If

End-Procedure Evaluate-EE-Job

!***********************************************************************
! Select-Prior-Job
!***********************************************************************
Begin-Procedure Select-Prior-Job

  #IfDef RSI_TOOLS_7.5
     let $Empl_Rcd_WhereClause2 = ' AND JOBP.EMPL_RCD# = ' || $EmplRcd
  #Else
     let $Empl_Rcd_WhereClause2 = ' AND JOBP.EMPL_RCD  = ' || $EmplRcd
  #EndIf

BEGIN-SELECT
JOBP.EFFDT
JOBP.EFFSEQ
JOBP.ACTION
JOBP.EMPL_STATUS
JOBP.EMPL_TYPE
JOBP.FULL_PART_TIME

  let $Job_Action   = &JOBP.ACTION
  let $FtPt_Prior   = &JOBP.FULL_PART_TIME
  let $Status_Prior = &JOBP.EMPL_STATUS
  let $Type_Prior   = &JOBP.EMPL_TYPE

  do Convert-To-DTU-Date(&JOBP.EFFDT, $Job_Effdt_YMD)
  do Evaluate-EE-Job

  #IfDef DebugE
     Show '    Select-Prior-Job:  ' &JOB.EMPLID ' ' &JOB.EMPL_RCD ' ' &JOBP.EFFDT ' ' &JOBP.EFFSEQ ' Action=' $Job_Action  ' FTPT=' $FtPt_Prior ' Status=' $Empl_Status
  #EndIf

  do Convert-To-DTU-Date(&JOBP.EFFDT, $Job_Effdt_Prior_YMD)

  If $Job_Effdt_Prior_YMD < $RC_FromDate_YMD
     Exit-Select
  End-If

FROM PS_JOB JOBP
WHERE JOBP.EMPLID  = &JOB.EMPLID
{Dyn-S}$Empl_Rcd_WhereClause2{Dyn-E}
  AND ((JOBP.EFFDT = &JOB.EFFDT AND JOBP.EFFSEQ < &JOB.EFFSEQ)
   OR (JOBP.EFFDT  < &JOB.EFFDT))
ORDER BY JOBP.EFFDT DESC, JOBP.EFFSEQ DESC
END-SELECT

End-Procedure Select-Prior-Job

!***********************************************************************
! Procedure Sel-Hours-By-Spcl-Earns
!***********************************************************************
Begin-Procedure Sel-Hours-By-Spcl-Earns

  #IfDef RSI_TOOLS_7.5
     let $Se_Empl_Rcd           = ' PC.EMPL_RCD# '
     let $Page_Num_WhereClause  = ' AND SE.PAGE#     = PC.PAGE# '
     let $Page_Line_WhereClause = ' AND SE.LINE#     = PC.LINE# '
     let $Empl_Rcd_WhereClause  = ' AND PC.EMPL_RCD# = ' || $EmplRcd
     let $Group_By              = ' GROUP BY PC.EMPLID, PC.EMPL_RCD# '
  #Else
     let $Se_Empl_Rcd           = ' SE.EMPL_RCD '
     let $Page_Num_WhereClause  = ' AND SE.PAGE_NUM  = PC.PAGE_NUM '
     let $Page_Line_WhereClause = ' AND SE.LINE_NUM  = PC.LINE_NUM '
     let $Empl_Rcd_WhereClause  = ' AND SE.EMPL_RCD  = ' || $EmplRcd
     let $Group_By              = ' GROUP BY PC.EMPLID, SE.EMPL_RCD '
  #EndIf

  let #EE_Spcl_Earn_Hrs    = 0
  let $EE_Pay_Begin_Dt_YMD = ''
  let $EE_Pay_End_Dt_YMD   = ''

BEGIN-SELECT
PC.EMPLID
{Dyn-S}$Se_Empl_Rcd{Dyn-E}       &PC_EMPL_RCD_NUM=number
#IfDef DB2
DECIMAL(SUM(SE.SPCL_HRS),15,3)   &SPCL_PAYHRS=number
#Else
SUM(SE.SPCL_HRS)                 &SPCL_PAYHRS=number
#EndIf
MIN(CAL.PAY_BEGIN_DT)            &MIN_PAY_BEGIN_DT=date
MAX(CAL.PAY_END_DT)              &MAX_PAY_END_DT=date

  add &SPCL_PAYHRS to #EE_Spcl_Earn_Hrs

  #IfDef DebugS
     Show '    Spcl-Earns Hours:   ' &JOB.EMPLID ' ' $EmplRcd ' ' &Spcl_PayHrs ' ' &MIN_PAY_BEGIN_DT ' - ' &MAX_PAY_END_DT
  #EndIf

  do Convert-To-DTU-Date(&MIN_PAY_BEGIN_DT, $EE_Pay_Begin_Dt_YMD)
  do Convert-To-DTU-Date(&MAX_PAY_END_DT, $EE_Pay_End_Dt_YMD)

FROM PS_PAY_CHECK PC, PS_PAY_SPCL_EARNS SE, PS_PAY_CALENDAR CAL
WHERE SE.COMPANY          = PC.COMPANY
  AND SE.PAYGROUP         = PC.PAYGROUP
  AND SE.PAY_END_DT       = PC.PAY_END_DT
  AND SE.OFF_CYCLE        = PC.OFF_CYCLE
  {Dyn-S}$Page_Num_WhereClause{Dyn-E}
  {Dyn-S}$Page_Line_WhereClause{Dyn-E}
  AND SE.SEPCHK           = PC.SEPCHK
  AND PC.COMPANY          = CAL.COMPANY
  AND PC.PAYGROUP         = CAL.PAYGROUP
  AND PC.PAY_END_DT       = CAL.PAY_END_DT
  AND PC.EMPLID           = &JOB.EMPLID
 {Dyn-S}$Empl_Rcd_WhereClause{Dyn-E}
  AND SE.ERNCD_SPCL       = $RC_Erncd_Spcl
  AND PC.PAYCHECK_STATUS IN ('F','R','A')
#Ifdef DebugB
  AND ((CAL.PAY_BEGIN_DT >= $RC_FromDate AND
        CAL.PAY_BEGIN_DT <= $RC_ThruDate)
   OR
       (CAL.PAY_END_DT   >= $RC_FromDate AND
        CAL.PAY_END_DT   <= $RC_ThruDate))
#Else
  AND (SE.PAY_END_DT     >= $RC_FromDate AND
       SE.PAY_END_DT     <= $RC_ThruDate)
#EndIf
{Dyn-S}$Group_By{Dyn-E}
END-SELECT

End-Procedure Sel-Hours-By-Spcl-Earns

!***********************************************************************
! Procedure Calc-Avg-Wkly-Hrs
!***********************************************************************
Begin-Procedure Calc-Avg-Wkly-Hrs

  let #EE_HrsPerWeek = 0
  let #CalcDays      = #DaysInFromTo

  #Ifdef DebugB
     let #AddPayBegDays = 0
     let #AddPayEndDays = 0

     If $EE_Pay_Begin_Dt_YMD < $RC_FromDate_YMD and $EE_Pay_Begin_Dt_YMD <> ''
        do DTU-Diff-Days($EE_Pay_Begin_Dt_YMD, $RC_FromDate_YMD, #AddPayBegDays)
        let $AddPayBegDays = edit(#AddPayBegDays,'889')
     End-If

     If $EE_Pay_End_Dt_YMD > $RC_ThruDate_YMD and $EE_Pay_End_Dt_YMD <> ''
        do DTU-Diff-Days($RC_ThruDate_YMD, $EE_Pay_End_Dt_YMD, #AddPayEndDays)
        let $AddPayEndDays = edit(#AddPayEndDays,'889')
     End-If

     let #CalcDays = #DaysInFromTo + #AddPayBegDays + #AddPayEndDays
  #EndIf

  let #Weeks = #CalcDays/7

  If #Weeks <> 0
     let #EE_HrsPerWeek = (#EE_Spcl_Earn_Hrs / #Weeks)
  End-If

  #IfDef DebugS
     If #EE_HrsPerWeek <> 0
        move #EE_HrsPerWeek to $EE_HrsPerWeek '899.99mi'
        move #CalcDays to $CalcDays '8,889'
        Show '    Calc-Avg-Wkly-Hrs:  ' $Emplid ' ' $EmplRcd ' ' $EE_HrsPerWeek '    (' $CalcDays ' Days in calc)'
     End-If
  #EndIf

End-Procedure Calc-Avg-Wkly-Hrs

!***********************************************************************
! Procedure Select-Health-Ben
!***********************************************************************
Begin-Procedure Select-Health-Ben

  let $HB_Covg_Elect = ' '
  let $HB_Effdt      = ''

  #IfDef RSI_TOOLS_7.5
     let $HB_Benefit_Nbr        = ' HB.BENEFIT# '
     let $Empl_Rcd_WhereClause3 = ' AND HB.EMPL_RCD#  = ' || $EmplRcd
     move ' AND HB.EMPL_RCD#    = HB1.EMPL_RCD# ' to $And_HB_Empl_Rcd
     move ' AND HB.BENEFIT#     = HB1.BENEFIT# '  to $And_HB_Benefit_Num
  #Else
     let $HB_Benefit_Nbr        = ' HB.BENEFIT_NBR '
     let $Empl_Rcd_WhereClause3 = ' AND HB.EMPL_RCD     = ' || $EmplRcd
     let $And_HB_Empl_Rcd       = ' AND HB1.EMPL_RCD    = HB.EMPL_RCD '
     let $And_HB_Benefit_Num    = ' AND HB1.BENEFIT_NBR = HB.BENEFIT_NBR '
  #EndIf

BEGIN-SELECT
HB.COBRA_EVENT_ID
HB.PLAN_TYPE
{Dyn-S}$HB_Benefit_Nbr{Dyn-E} &HB.BENEFIT_NUM=number
HB.EFFDT
HB.COVERAGE_ELECT
HB.BENEFIT_PLAN
HB.COVERAGE_BEGIN_DT
HB.COVERAGE_END_DT

  let $HB_Covg_Elect = rtrim(&HB.COVERAGE_ELECT,' ')
  let $HB_Effdt      = &HB.EFFDT

  #IfDef DebugH
     do Show-DebugH-Statements
  #EndIf

  If $HB_Covg_Elect = 'E'
     do Empl-Health-Elect-Save
  End-If

FROM PS_HEALTH_BENEFIT HB
WHERE HB.EMPLID         = $Emplid
  {Dyn-S}$Empl_Rcd_WhereClause3{Dyn-E}
  AND HB.COBRA_EVENT_ID = 0
  AND HB.PLAN_TYPE      = '10'
  AND HB.EFFDT          = (SELECT MAX(HB1.EFFDT)
                           FROM PS_HEALTH_BENEFIT HB1
                           WHERE HB1.EMPLID         = HB.EMPLID
                             {Dyn-S}$And_HB_Empl_Rcd{Dyn-E}
                             AND HB1.COBRA_EVENT_ID = HB.COBRA_EVENT_ID
                             AND HB1.PLAN_TYPE      = HB.PLAN_TYPE
                             {Dyn-S}$And_HB_Benefit_Num{Dyn-E}
                             AND HB1.EFFDT         <= $RC_ThruDate)
  AND ((HB.COVERAGE_END_DT IS NULL) OR (HB.COVERAGE_END_DT > $RC_ThruDate))
END-SELECT

End-Procedure Select-Health-Ben

!***********************************************************************
!Procedure Empl-Health-Elect-Save
!***********************************************************************
Begin-Procedure Empl-Health-Elect-Save

  let #Tmp           = 0
  let $Found_Empl_HB = 'N'

  While #Tmp < #EE_Co
    get $Empl $Co from EMPL_HB(#Tmp)

    If $Empl = $Emplid And $Co = $Company
       let $Found_Empl_HB = 'Y'
       Break
    End-If
    add 1 to #Tmp
  End-While

  If $Found_Empl_HB = 'N'
     If #EE_Co < {Max_Rows}
        put $Emplid $Company into EMPL_HB(#EE_Co)
        add 1 to #EE_Co
     Else
        Show 'Cache capacity exceeded {Max_Rows} for Employees Array'
        STOP
     End-If
  End-If

End-Procedure Empl-Health-Elect-Save

!***********************************************************************
! Procedure Insert-Staging
!***********************************************************************
Begin-Procedure Insert-Staging

  #IfDef RSI_TOOLS_7.5
     let $Empl_Rcd = 'EMPL_RCD#'
  #Else
     let $Empl_Rcd = 'EMPL_RCD'
  #EndIf

BEGIN-SQL
INSERT INTO PS_RSIHRSWK_STG (RUN_CNTL_ID
                            ,EMPLID
                            ,{Dyn-S}$Empl_Rcd{Dyn-E}
                            ,COMPANY
                            ,COMMON_PAY_ID
                            ,DEPTID
                            ,EMPL_STATUS
                            ,FULL_PART_TIME
                            ,STD_HOURS
                            ,HIRE_DT
                            ,REHIRE_DT
                            ,RSI_HIR_REH_CHG
                            ,RSI_FULL_PART_CHG
                            ,RSI_LEAVE_CHG
                            ,RSI_CO_HRS
                            ,RSI_AVG_HRS
                            ,COVERAGE_ELECT
                            ,EFFDT
                            ,DATE_FROM
                            ,DATE_TO
                            ,DESIRED_HOURS
                            ,ERNCD_SPCL
                            ,OPRID
                            ,RUNDATE)
                     VALUES ($Stg_Run_Cntl_ID
                            ,$Emplid
                            ,#Empl_Rcd
                            ,$Company
                            ,$Paymaster
                            ,$Deptid
                            ,$Empl_Status
                            ,$FtPt
                            ,#Std_Hours
                            ,$Hire_Dt
                            ,$Last_Hire
                            ,$Hir_Reh
                            ,$Pt_Ft
                            ,$Leave_Status
                            ,#EE_Spcl_Earn_Hrs
                            ,#EE_HrsPerWeek
                            ,$HB_Covg_Elect
                            ,$HB_Effdt
                            ,$RC_FromDate
                            ,$RC_ThruDate
                            ,#RC_Limit_Hours
                            ,$RC_Erncd_Spcl
                            ,$Prcs_OprID
                            ,$AsOfToday)
END-SQL

  add 1 to #Stg_Ins_Count

End-Procedure Insert-Staging

!***********************************************************************
! Create-Report
!***********************************************************************
Begin-Procedure Create-Report

BEGIN-SELECT
TOT.EMPLID
COUNT(*)                             &EMPL_RCD_CNT
#IfDef DB2
DECIMAL(SUM(TOT.RSI_AVG_HRS),15,3)   &EMPL_AVG_HRS
#Else
SUM(TOT.RSI_AVG_HRS)                 &EMPL_AVG_HRS
#EndIf

  let $Report_Emplid = &TOT.EMPLID
  let #EE_HrsPerWeek = &EMPL_AVG_HRS
  do Evaluate-Total-Hours

FROM PS_RSIHRSWK_STG TOT
WHERE TOT.RUN_CNTL_ID = $Stg_Run_Cntl_ID
GROUP BY TOT.EMPLID
END-SELECT

End-Procedure Create-Report

!***********************************************************************
!Procedure Evaluate-Total-Hours
!***********************************************************************
Begin-Procedure Evaluate-Total-Hours

  let $Hours_Conditions = 'N'

  If $RC_Gt_Lt = '>='
     If #EE_HrsPerWeek >= #RC_Limit_Hours
        let $Hours_Conditions = 'Y'
     End-If
  Else
     If #EE_HrsPerWeek <= #RC_Limit_Hours
        let $Hours_Conditions = 'Y'
     End-If
  End-If

  #IfDef DebugS
     If #EE_HrsPerWeek <> 0
        let $Emplid_Show        = rpad($Report_Emplid,11,' ')
        let $EE_HrsPerWeek_Show = edit(#EE_HrsPerWeek,'999,999.99mi')
        Show '    Evaluate-Total-Hours:  Average Wkly Hrs: ' $Emplid_Show '       ' $EE_HrsPerWeek_Show
     End-If
  #EndIf

  If $Hours_Conditions = 'Y'
     If $RC_Without_HB = 'Y'
        do Empl-Health-Elect-Check

        If $Found_Empl_HB = 'Y'
           add &EMPL_RCD_CNT to #Elect_Count
        Else
           do Report-Employee
        End-If
     Else
        do Report-Employee
     End-If
  Else
     add &EMPL_RCD_CNT to #Limit
  End-If

End-Procedure Evaluate-Total-Hours

!***********************************************************************
!Procedure Empl-Health-Elect-Check
!***********************************************************************
Begin-Procedure Empl-Health-Elect-Check

  let #Tmp           = 0
  let $Found_Empl_HB = 'N'

  While #Tmp < #EE_Co
    get $Empl from EMPL_HB(#Tmp) EMPLID

    If $Empl = $Report_Emplid
       let $Found_Empl_HB = 'Y'
       Break
    End-If
    add 1 to #Tmp
  End-While

End-Procedure Empl-Health-Elect-Check

!***********************************************************************
!Procedure Report-Employee
!***********************************************************************
Begin-Procedure Report-Employee

  #IfDef RSI_TOOLS_7.5
     let $Stg_Empl_Rcd = ' STG.EMPL_RCD# '
     let $RsiHrsWk_Stg = ' PS_RSIHRSWK_STG STG, PS_PERSONAL_DATA PD '
     let $Stg_Order_By = ' STG.EMPLID, STG.COMPANY, STG.EMPL_RCD# '
  #Else
     let $Stg_Empl_Rcd = ' STG.EMPL_RCD '
     let $RsiHrsWk_Stg = ' PS_RSIHRSWK_STG STG, PS_PERSON_NAME PD '
     let $Stg_Order_By = ' STG.EMPLID, STG.COMPANY, STG.EMPL_RCD '
  #EndIf

BEGIN-SELECT
PD.NAME
STG.EMPLID
{Dyn-S}$Stg_Empl_Rcd{Dyn-E} &STG.EMPL_RCD=number
STG.COMPANY
STG.COMMON_PAY_ID
STG.DEPTID
STG.EMPL_STATUS
STG.FULL_PART_TIME
STG.STD_HOURS
STG.HIRE_DT
STG.REHIRE_DT
STG.RSI_HIR_REH_CHG
STG.RSI_FULL_PART_CHG
STG.RSI_LEAVE_CHG
STG.RSI_CO_HRS              &STG.RSI_CO_HRS=number
STG.RSI_AVG_HRS             &STG.RSI_AVG_HRS=number
STG.COVERAGE_ELECT
STG.EFFDT

  let $Empl_Name        = &PD.NAME
  let $Emplid           = &STG.EMPLID
  let #EmplRcd          = &STG.EMPL_RCD
  let $Company          = &STG.COMPANY
  let $Hir_Reh          = &STG.RSI_HIR_REH_CHG
  let $Pt_Ft            = &STG.RSI_FULL_PART_CHG
  let $Leave_Status     = &STG.RSI_LEAVE_CHG
  let $Empl_Status      = &STG.EMPL_STATUS
  let $FullPart         = &STG.FULL_PART_TIME
  let $Covrg_Elect      = &STG.COVERAGE_ELECT
  let $HB_Effdt         = &STG.EFFDT
  let #EE_Spcl_Earn_Hrs = &STG.RSI_CO_HRS
  let #EE_HrsPerWeek    = &STG.RSI_AVG_HRS

  #IfDef DebugS
     let $Emplid_Show        = rpad(&STG.EMPLID,11,' ')
     let $EmplRcd_Show       = edit(&STG.EMPL_RCD, '89')
     let $EE_HrsPerWeek_Show = edit(&STG.RSI_AVG_HRS,'999,999.99mi')
     Show '      Report-Employee:     Average Wkly Hrs: ' $Emplid_Show ' ' $EmplRcd_Show ' ' $Company ' ' $EE_HrsPerWeek_Show
  #EndIf

  do Emp-Print

FROM {Dyn-S}$RsiHrsWk_Stg{Dyn-E}
WHERE STG.EMPLID      = PD.EMPLID
  AND STG.RUN_CNTL_ID = $Stg_Run_Cntl_ID
  AND STG.EMPLID      = $Report_Emplid
ORDER BY {Dyn-S}$Stg_Order_By{Dyn-E}
END-SELECT

End-Procedure Report-Employee

!***********************************************************************
!Procedure Emp-Print
!***********************************************************************
Begin-Procedure Emp-Print

  let $FieldName          = 'EMPL_STATUS'
  let $FieldValue         = $Empl_Status
  do Read-Translate-Table
  let $Empl_Status_Prnt   = rtrim($XlatShortName,' ')
  let $FieldName          = 'COVERAGE_ELECT'
  let $FieldValue         = $Covrg_Elect
  do Read-Translate-Table
  let $HB_Covg_Elect_Prnt = rtrim($XlatShortName,' ')
  let $FieldName          = 'FULL_PART_TIME'
  let $FieldValue         = $FullPart
  do Read-Translate-Table
  let $FullPart           = substr(rtrim($XlatShortName,' ')1,4)

  let $EmplRcd_Prnt       = edit(#EmplRcd,'89')
  let $HB_Effdt_Prnt      = edit($HB_Effdt, 'MM/DD/YYYY')
  let $EE_Spcl_Earn_Hrs   = edit(#EE_Spcl_Earn_Hrs,'999,999.99mi')
  let $EE_HrsPerWeek      = edit(#EE_HrsPerWeek,'999,999.99mi')

  If $Emplid <> $Emplid_Prev
     Position (+2)
  Else
     Position (+1)
  End-If

  let $Emplid_Prev = $Emplid

  print $Emplid                           (0,2)
  print $Empl_Name                        (0,17)
  print $EmplRcd_Prnt                     (0,49)
  print $Empl_Status_Prnt                 (0,56)
  print $Hir_Reh                          (0,70)
  print $Pt_Ft                            (0,80)
  print $Leave_Status                     (0,90)
  print $Company                          (0,99)
  print $EE_Spcl_Earn_Hrs                 (0,115)
  print $EE_HrsPerWeek                    (0,129)

  If $RC_Print_HB = 'Y'
     print $HB_Covg_Elect_Prnt            (0,152)
     print $HB_Effdt_Prnt                 (0,164)
  End-If

  let $Print = 'Y'
  add 1 to #Prt_Count

End-Procedure Emp-Print

!***********************************************************************
!Procedure Report-Summary
!***********************************************************************
Begin-Procedure Report-Summary

  If $Print <> 'Y'
     let $CompanyName = ''
     print $NoData               (+6)        center
     Show ' '
     Show ' '
     Show $NoData
  End-If

  let $Stg_Del_Count = '  STG Record Delete:      ' || edit(#Stg_Del_Count, '88,888,889')
  let $Stg_Ins_Count = '  STG Record Insert:      ' || edit(#Stg_Ins_Count, '88,888,889')
  let $Elect_Count   = '  EE w/Elect Not Printed: ' || edit(#Elect_Count, '88,888,889')
  let $Under_Lim     = '  EE Not ' || $RC_Gt_Lt || ' ' || $RC_Limit_Hours_Prnt || ' Hours:  ' || edit(#Limit, '88,888,889')
  let $Prt_Count     = '  EE Records Printed:     ' || edit(#Prt_Count, '88,888,889')

  Show ' '
  Show '  ********* Process Results **************'
  Show $Stg_Del_Count
  Show $Stg_Ins_Count
  Show $Under_Lim
  Show $Elect_Count
  Show $Prt_Count
  Show '  ****************************************'
  Show ' '

End-Procedure Report-Summary

!***********************************************************************
! Procedure Show-DebugE-Statements
!***********************************************************************
Begin-Procedure Show-DebugE-Statements

  Show ' '
  Show '    ********** Employee Data *********************'
  Show '      Emplid            = ' &JOB.EMPLID
  Show '      Empl_Rcd          = ' &JOB.EMPL_RCD
  show '      Effdt             = ' &JOB.EFFDT
  show '      Effseq            = ' &JOB.EFFSEQ
  show '      Deptid            = ' &JOB.DEPTID
  Show '      Action            = ' &JOB.ACTION
  show '      Empl_Status       = ' &JOB.EMPL_STATUS
  show '      Empl_Type         = ' &JOB.EMPL_TYPE
  show '      Reg_Temp          = ' &JOB.REG_TEMP
  show '      Full_Part_Time    = ' &JOB.FULL_PART_TIME
  show '      Company           = ' &JOB.COMPANY
  show '      Paygroup          = ' &JOB.PAYGROUP
  show '      Std_Hours         = ' &JOB.STD_HOURS
  show '      Hire_Dt           = ' &HIRE_DT
  show '      Rehire_Dt         = ' &REHIRE_DT
  Show '    **********************************************'
  Show ' '

End-Procedure Show-DebugE-Statements

!***********************************************************************
! Procedure Show-DebugH-Statements
!***********************************************************************
Begin-Procedure Show-DebugH-Statements

  Show ' '
  Show '    ********** Health Benefit Data ***************'
  Show '      Emplid            = ' &JOB.EMPLID
  Show '      Empl_Rcd          = ' &JOB.EMPL_RCD
  show '      Cobra_Event_Id    = ' &HB.COBRA_EVENT_ID
  show '      Plan_Type         = ' &HB.PLAN_TYPE
  Show '      Benefit_Nbr       = ' &HB.BENEFIT_NUM
  show '      Effdt             = ' &HB.EFFDT
  show '      Coverage_Elect    = ' &HB.COVERAGE_ELECT
  show '      Benefit_Plan      = ' &HB.BENEFIT_PLAN
  show '      Coverage_Begin_Dt = ' &HB.COVERAGE_BEGIN_DT
  show '      Coverage_End_Dt   = ' &HB.COVERAGE_END_DT
  Show '    **********************************************'
  Show ' '

End-Procedure Show-DebugH-Statements

#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'datemath.sqc'  ! Routines for date math
#Include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Update Process API
#Include 'readxlat.sqc'  ! Read-Translate-Table procedure
#Include 'getcodta.sqc'  ! Get-Company-Data procedure