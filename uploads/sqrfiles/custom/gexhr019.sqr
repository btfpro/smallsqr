!***********************************************************************
!  GEXHR019:  Employee Turnover Analysis                               *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXHR019:  		Employee Turnover Analysis                     * 
!                                                                      *        
! Narrative:		This report will provide turnover counts by    *
!                       jobcode.  Based on delivered report PER010.    *
!                                                                      *
! #Debugx Used:		#debug9 paragraph trace                        *
!			      #debug8 key variable values              *
!			      #debug7 data returned from sql calls     * 
!                                                                      *  
! SQL Tables:		gex_r_gexhr019                                 *
!                       gex_dept_tbl                                   *
!                       personal_data                                  *
!                       job                                            *
!                                                                      *
! Written by:		Sreenivas Kutam  01/13/98                      *       
!                                                                      *
! Normally Run:		Unknown                                        *
!                                                                      *
! Control Parms:		FOR WHERE CLAUSE:                      *
!				  Company Division Code                *
!				  Company  	                       *
!				  Paygroup  	                       *
!				  Deptid	                       *
!				  Employee Status	               *
!				  Account Code                         *
!                         As Of Date                                   *
!                         From Date                                    *
!                         Thru Date                                    *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!	INITIALS	DATE	      DESCRIPTION OF THE CHANGE        *
!***********************************************************************
!	SXK		01/13/98      Initial Creation                 *
!                                                                      *
!       AXL             10/22/1999    Changed delete table to truncate *
!                                     table                            *
!       VENDVXR         08/15/2007    Upgrade 8.3- 9.0                 *
!                                     Code change for PER_STATUS field *
!       GEX-MXT         04/02/2008    ADDED THE join condition for     *
!                                     PER_ORG_INST                     *
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization


begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do P000-Process-Main
  do Reset
  do Stdapi-Term
  Show 'Successful end of report'
end-report


begin-heading 7
#debug9 show 'begin-heading'

do Get_Field_Information ('PER010',     'REPORT_TITLE', $REPORTTITLE,   #DW)
  #Include 'stdhtr08.sqc'

Let $X000_temp_out = 'Sorted by ' || $X000_ORDER_BY
Print $X000_temp_out         (3,)  center
Let $X000_temp_out = 'Report as of ' || $X000_REPORT_HEADING_ASOFDATE
Print $X000_temp_out         (4,)  center

do Get_Field_Information ('PER010',     'BEGIN_CT1',    $BEGIN1,        #DW)
do Get_Field_Information ('PER010',     'BEGIN_CT2',    $BEGIN2,        #DW)
do Get_Field_Information ('PER010',     'END_CT1',      $END_CT1,       #DW)
do Get_Field_Information ('PER010',     'END_CT2',      $END_CT2,       #DW)
do Get_Field_Information ('PER010',     'HIRE_REHIRE1', $HIRE1,         #DW)
do Get_Field_Information ('PER010',     'HIRE_REHIRE2', $HIRE2,         #DW)
do Get_Field_Information ('PER010',     'RETIRE1',      $RETIRE1,       #DW)
do Get_Field_Information ('PER010',     'RETIRE2',      $RETIRE2,       #DW)
!do Get_Field_Information ('PER010',     'TERM1',        $TERM1,         #DW)
!do Get_Field_Information ('PER010',     'TERM2',        $TERM2,         #DW)
!do Get_Field_Information ('PER010',     'TRANS_IN1',    $TRANS_IN1,     #DW)
!do Get_Field_Information ('PER010',     'TRANS_IN2',    $TRANS_IN2,     #DW)
!do Get_Field_Information ('PER010',     'TRANS_OUT1',   $TRANS_OUT1,    #DW)
!do Get_Field_Information ('PER010',     'TRANS_OUT2',   $TRANS_OUT2,    #DW)
!do Get_Field_Information ('PER010',     'TURNOVER_RT1', $TURN1,         #DW)
!do Get_Field_Information ('PER010',     'TURNOVER_RT2', $TURN2,         #DW)
let $TERM1 = '  Termi-'
let $TERM2 = 'nations  -'
let $TRANS_IN1 = 'Transfer'
let $TRANS_IN2 = '      In -'
let $TRANS_OUT1 = 'Transfer'
let $TRANS_OUT2 = '     Out'
let $TURN1 = 'Turn-'
let $TURN2 = 'Over'

do Get_Field_Information ('HR',         'JOBTITLE',      $JOBNM,        #DW)
do Get_Field_Information ('HR',         'JOBCODE',       $JOBCODE,      #DW)

PRINT   $BEGIN1                 (+2,55)
PRINT   $HIRE1                  (0,70)
PRINT   $TERM1                  (0,85)
PRINT   $RETIRE1                (0,102)
PRINT   $TRANS_IN1              (0,117)
PRINT   $TRANS_OUT1             (0,135)
PRINT   $END_CT1                (0,156)
PRINT   $TURN1                  (0,170)
PRINT   $JOBCODE                (+1,1)
PRINT   $JOBNM                  (0,13)
PRINT   $BEGIN2                 (0,55)
PRINT   $HIRE2                  (0,69)
PRINT   $TERM2                  (0,85)
PRINT   $RETIRE2                (0,103)
PRINT   $TRANS_IN2              (0,117)
PRINT   $TRANS_OUT2             (0,135)
PRINT   $END_CT2                (0,154)
PRINT   $TURN2                  (0,170)
end-heading

begin-procedure Init-Report
#debug9 show 'Init-Report'

  move 'PER010' to $ReportID
  do P400-Truncate-Worktable

  do Stdapi-Init

  Show '$ReportID=' $ReportID
  Show '$ReportTitle=' $ReportTitle
  Show '$ReportDate=' $ReportDate
  Show '$ReportTime=' $ReportTime

  if $prcs_process_instance = ''
    do P015-get-input
    do Ask-From-Thru-Date
  Else

    Do GEXRCHR1-SELECT-PARAMETERS

    Let $GEXXX900_Company_Alias  = 'A.COMPANY'
    Do GEXXX900-Select-Company-Parameters

    Let $GEXXX901_Company_Alias  = 'A.COMPANY'
    Let $GEXXX901_Paygroup_Alias = 'A.PAYGROUP'
    Do GEXXX901-Select-Company-Paygroup-Parameters

    Let $GEXXX902_Deptid_Alias = 'A.DEPTID'
    Do GEXXX902-Select-Deptid-Parameters

    Let $GEXXX903_Emp_Stat_Alias = 'A.EMPL_STATUS'
    Do GEXXX903-Select-Emp-Stat-Parameters

    Let $GEXXX907_Div_CD_Alias = 'GDT.GEX_COMPANY_DIV_CD'                    
    Do GEXXX907-Select-Div-CD-Parameters 
          
    Let $GEXXX909_Acct_CD_Alias = 'A.ACCT_CD'
    Do GEXXX909-Select-Acct-CD-Parameters

    Let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_HR.AsOfDate
    If Rtrim ($GEX_RC_HR.AsOfDate, ' ') = ''
      Let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    End-If

    Let $FromDate = $GEX_RC_HR.FromDate
    Let $ThruDate = $GEX_RC_HR.ThruDate
    If Rtrim($FromDate, ' ') = ''
      Let $FromDate = '01-JAN-1900'
    End-If
    If Rtrim($ThruDate, ' ') = ''
      Let $ThruDate = $AsOfToday
    End-If
  End-If

  Let $DateRange = 'AND B.EFFDT BETWEEN ''' || $FromDate || ''' AND ''' || $ThruDate || ''''

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE, {DEFDATE}, '', '')
  Let $X000_ORDER_BY = 'Jobcode'

  Show '$GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA           ='   $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA
  Show '$GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA          ='   $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA
  Show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA ='   $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA
  Show '$GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA           ='   $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA
  Show '$GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA         ='   $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA
  Show '$GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA          ='   $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA
  Show '$X000_WHERE_SELECT_ASOFDATE ='   $X000_WHERE_SELECT_ASOFDATE
  Show '$FromDate = ' $FromDate
  Show '$ThruDate = ' $ThruDate

  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  move 'GEXHR019' to $ReportID

  Do P040-Print-Cover-Page
end-procedure


begin-procedure Get-Values
#debug9 show 'Get-Values'

   let $language_cd = $PRCS_LANGUAGE_CD
end-procedure


begin-procedure P000-Process-Main
#debug9 show 'P000-Prcoess-Main'

  do P100-Get-Begin-and-End-Counts
  do P200-Read-Job-Records
  do P300-Create-Report
  do P400-Truncate-Worktable
end-procedure


begin-procedure P015-get-input
#debug9 show 'P015-get-input'

  let $GEXXX907_INCLUDE_DIV_CD_CRITERIA           = '1=1'           
  let $GEXXX900_INCLUDE_COMPANY_CRITERIA          = '1=1'
  let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1' 
  let $GEXXX902_INCLUDE_DEPTID_CRITERIA	        = '1=1'
  let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA         = '1=1'
  let $GEXXX909_INCLUDE_ACCT_CD_CRITERIA          = '1=1'
  let $X000_WHERE_SELECT_ASOFDATE                 = $AsOfToday
  let $X000_ORDER_BY = ' '
end-procedure


begin-procedure P040-Print-Cover-Page
#debug9 Show 'P040-Print-Cover-Page'

  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OPRID          ='                                  (+2,5)
  Print $Prcs_OPRID                                               (0,+2)
  Print '$PRCS_RUN_CNTL_ID    ='                                  (+1,5)
  Print $PRCS_RUN_CNTL_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
  Print '$GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA           ='   (+2,5)
  Print $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA                 (0,+2)
  Print '$GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA          ='   (+1,5)
  Print $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA                (0,+2)
  Print '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA ='   (+1,5)
  Print $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA       (0,+2)
  Print '$GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA           ='   (+1,5)
  Print $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA	            (0,+2)
  Print '$GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA         ='   (+1,5)
  Print $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA               (0,+2)
  Print '$GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA          ='   (+1,5)
  Print $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA                (0,+2)

  Print 'From Date :'                                        (+2,5)
  Print $FromDate                                            (0,+2)

  Print 'Thru Date :'                                        (+1,5)
  Print $ThruDate                                            (0,+2)

  Print 'As Of Date :'                                        (+2,5)
  Print $X000_REPORT_HEADING_ASOFDATE                         (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN:'                     (+5,2)
  Print $X000_ORDER_BY                                        (+2,5)

  Let #PAGE-COUNT = 0
  NEW-PAGE
  Let #PAGE-COUNT = 1
End-Procedure


begin-procedure P100-Get-Begin-and-End-Counts
#debug9 show 'P100-Get-Begin-and-End-Counts'

  move 'Y' to $EndCounts
  move $ThruDate to $CountDate
  do P150-Get-Count

  move 'N' to $EndCounts
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($FromDate, $From_YMD, {DEFYMD}, '', '')
  do dtu-subtract-days($From_YMD,1,$Count_YMD)
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($Count_YMD,$CountDate,{DEFYMD},'','native')
  do P150-Get-Count
end-procedure


begin-procedure P150-Get-Count
#debug9 show 'P150-Get-Count'

begin-SELECT
A.JOBCODE,COUNT(*) &Count
  if $EndCounts = 'Y'
    move &Count to #Ends
  else
    move &Count to #Begins
  end-if
  move &A.JOBCODE to $JobCode
  do P155-Jobcode-Change
FROM  ps_gex_dept_tbl gdt,
      PS_JOB A,
      PS_PERSONAL_DATA PP
WHERE A.EMPLID = PP.EMPLID
  !AND PP.PER_STATUS = 'E'    ! Upgrade to 9.0 8.3 Code
   AND EXISTS (SELECT 'X'																			!'FXX' CustID04											
         FROM PS_PER_ORG_INST AVW																!'FXX' CustID04															
      !WHERE  AVW.PER_ORG = 'EMP' AND AVW.EMPLID = PP.EMPLID)	  ! UPgrade to 9.0 code
      WHERE  AVW.PER_ORG = 'EMP' AND AVW.EMPLID = A.EMPLID AND AVW.ORG_INSTANCE_ERN = A.EMPL_RCD)!GEX-MXT MODIFIED THE CONDITION
!  AND A.EMPL_STATUS IN ('A','L','S','P')
  AND A.EFFDT =
      (SELECT MAX(H.EFFDT)
       FROM PS_JOB H
       WHERE H.EMPLID = A.EMPLID
         AND H.EMPL_RCD = A.EMPL_RCD
         AND H.EFFDT <= $CountDate)
  AND A.EFFSEQ =
      (SELECT MAX(I.EFFSEQ)
       FROM PS_JOB I
       WHERE I.EMPLID = A.EMPLID
         AND I.EMPL_RCD = A.EMPL_RCD
         AND I.EFFDT = A.EFFDT)
AND [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA] 
AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
AND [$GEXXX907_INCLUDE_DIV_CD_CRITERIA]
AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
AND [$GEXXX909_INCLUDE_ACCT_CD_CRITERIA]
And    a.deptid                  = gdt.deptid
And    gdt.effdt                 =
      (Select Max(effdt)
       From   ps_gex_dept_tbl
       Where  deptid             = gdt.deptid
       And    effdt             <= $X000_WHERE_SELECT_ASOFDATE)
And    gdt.sequence_number       =
      (Select Max(sequence_number)
       From   ps_gex_dept_tbl
       Where  deptid             = gdt.deptid
       And    effdt              = gdt.effdt)
GROUP BY A.JOBCODE
end-SELECT
end-procedure


begin-procedure P155-JobCode-Change
#debug9 show 'P155-Jobcode-Change'

let $sql-statement = 'GEXHR019.SQR,P155-JobCode-Change,Insert,PS_GEX_R_GEXHR019'

begin-SQL On-Error=SQL-Error
INSERT INTO PS_GEX_R_GEXHR019 VALUES
  ($JobCode,#Begins,#Hires,#Retires,#XfersIn,0,#Terminations,#Ends)
end-SQL
  move 0 to #Begins
  move 0 to #Hires
  move 0 to #Retires
  move 0 to #XfersIn
  move 0 to #Terminations
  move 0 to #Ends
end-procedure

begin-procedure P200-Read-Job-Records
#debug9 show 'P200-Read-Job-Records'

  Let $GEXXX900_Company_Alias  = 'B.COMPANY'
  Do GEXXX900-Select-Company-Parameters

  Let $GEXXX901_Company_Alias  = 'B.COMPANY'
  Let $GEXXX901_Paygroup_Alias = 'B.PAYGROUP'
  Do GEXXX901-Select-Company-Paygroup-Parameters

  Let $GEXXX902_Deptid_Alias = 'B.DEPTID'
  Do GEXXX902-Select-Deptid-Parameters

  Let $GEXXX903_Emp_Stat_Alias = 'B.EMPL_STATUS'
  Do GEXXX903-Select-Emp-Stat-Parameters
          
  Let $GEXXX909_Acct_CD_Alias = 'B.ACCT_CD'
  Do GEXXX909-Select-Acct-CD-Parameters

begin-SELECT
B.JOBCODE () on-break print=never procedure=P155-JobCode-Change
B.EMPLID  () on-break print=never procedure=P220-Clear-Duplicates
B.ACTION,B.ACTION_REASON,B.EMPL_STATUS,B.EMPL_RCD,B.EFFDT,B.EFFSEQ
  move &B.JOBCODE to $JobCode

  evaluate &B.Action
    when = 'HIR'              !Hire
    when = 'REH'              !Rehire
      add 1 to #Hires
    when = 'TER'              !Termination
    when = 'TWP'
    when = 'TWB'
      if (#dup_term = 0)
        if &B.EMPL_STATUS <> 'X' and &B.EMPL_STATUS <> 'V'
          add 1 to #Terminations
          let #dup_term = 1
        end-if
      end-if
    when = 'RET'              !Retirement
    when = 'RWP'
      if (#dup_retire = 0)
        add 1 to #Retires
        let #dup_retire = 1
      end-if
    when = 'XFR'              !Transfer
      add 1 to #XfersIn
      do P210-Find-Transfer-Out
    when = 'POS'              !Transfer
      if (&B.action_reason = 'XFR')
        add 1 to #XfersIn
        do P210-Find-Transfer-Out
      end-if
  end-evaluate
FROM  ps_gex_dept_tbl gdt,
      PS_JOB B,
      PS_PERSONAL_DATA PP2
WHERE B.EMPLID = PP2.EMPLID
!AND   PP2.PER_STATUS = 'E'       ! UPgrade 9.0 8.3 code
   AND EXISTS (SELECT 'X'																			!'FXX' CustID04											
         FROM PS_PER_ORG_INST AVW2																!'FXX' CustID04															
      !WHERE  AVW2.PER_ORG = 'EMP' AND AVW2.EMPLID = PP2.EMPLID)	  ! UPgrade to 9.0 code
      WHERE  AVW2.PER_ORG = 'EMP' AND AVW2.EMPLID = B.EMPLID AND AVW2.ORG_INSTANCE_ERN = B.EMPL_RCD)!GEX-MXT MODIFIED THE CONDITION
AND [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA] 
AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
AND [$GEXXX907_INCLUDE_DIV_CD_CRITERIA]
AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
AND [$GEXXX909_INCLUDE_ACCT_CD_CRITERIA]
And    b.deptid                  = gdt.deptid
And    gdt.effdt                 =
      (Select Max(effdt)
       From   ps_gex_dept_tbl
       Where  deptid             = gdt.deptid
       And    effdt             <= $X000_WHERE_SELECT_ASOFDATE)
And    gdt.sequence_number       =
      (Select Max(sequence_number)
       From   ps_gex_dept_tbl
       Where  deptid             = gdt.deptid
       And    effdt              = gdt.effdt)
[$DateRange]
ORDER BY B.JOBCODE,B.EMPLID
end-SELECT
  do P155-JobCode-Change
end-procedure


begin-procedure P210-Find-Transfer-Out
#debug9 show 'P210-Find-Transfer-Out'

begin-SELECT Loops=1
E.JOBCODE
E.EFFDT
E.EFFSEQ
  do P215-Insert-XferOut
FROM  PS_JOB E,
      PS_PERSONAL_DATA PP3
WHERE E.EMPLID    = &B.EmplID
  AND E.EMPLID    = PP3.EMPLID
 ! AND PP3.PER_STATUS = 'E'  !UPgrade 9.0 8.3 code
     AND EXISTS (SELECT 'X'																			!'FXX' CustID04											
           FROM PS_PER_ORG_INST AVW3																!'FXX' CustID04															
      !WHERE  AVW3.PER_ORG = 'EMP' AND AVW3.EMPLID = PP3.EMPLID)	  ! UPgrade to 9.0 code
      WHERE  AVW3.PER_ORG = 'EMP' AND AVW3.EMPLID = E.EMPLID AND AVW3.ORG_INSTANCE_ERN = E.EMPL_RCD)!GEX-MXT MODIFIED THE CONDITION
  AND E.EMPL_RCD = &B.Empl_Rcd
  AND (E.EFFDT < &B.EffDt OR E.EFFDT = &B.EffDt AND E.EFFSEQ < &B.EffSeq)
ORDER BY E.EFFDT DESC, E.EFFSEQ DESC
end-SELECT
end-procedure


begin-procedure P215-Insert-XferOut
#debug9 show 'P215-Insert-XferOut'

let $sql-statement = 'GEXHR019.SQR,Insert-XferOut,Insert,PS_GEX_R_GEXHR019'
begin-SQL On-Error=SQL-Error
INSERT INTO PS_GEX_R_GEXHR019 VALUES(&E.jOBCODE,0,0,0,0,1,0,0)
end-SQL
end-procedure


begin-procedure P220-Clear-Duplicates
#debug9 show 'P220-Clear-Duplicates'

  let #dup_term = 0
  let #dup_retire = 0
end-procedure


begin-procedure P300-Create-Report
#debug9 show 'P300-Create-Report'

  Let $Data-Found-Flag = 'N'

begin-SELECT
JOBCODE                      (+1,1)
  move &JobCode to $JobCode

  do Get-Job-Title
  print $JobTitle                (0,13)
SUM(BEGINS)       &BeginCount
  do Format-Number(&BeginCount, $out, '999,999')
  print $out                     (0,53)
SUM(HIRES)        &HireCount
  do Format-Number(&HireCount, $out, '999,999')
  print $out                     (0,69)
SUM(TERMINATIONS) &TermCount
  do Format-Number(&TermCount, $out, '999,999')
  print $out                     (0,85)
SUM(RETIRES)      &RetireCount
  do Format-Number(&RetireCount, $out, '999,999')
  print $out                     (0,101)
SUM(XFERSIN)      &XfersInCount
  do Format-Number(&XfersInCount, $out, '999,999')
  print $out                     (0,118)
SUM(XFERSOUT)     &XfersOutCount
  do Format-Number(&XfersOutCount, $out, '999,999')
  print $out                     (0,136)
SUM(ENDS)         &EndCount
  do Format-Number(&EndCount, $out, '999,999')
  print $out                     (0,152)

!***********************************************************
!   Turnover Rate =      Terminations * 100%
!                   -----------------------------
!                   (Begin Count + End Count) / 2
!***********************************************************

  move &BeginCount to #BeginPlusEnd
  add &EndCount    to #BeginPlusEnd
  if #BeginPlusEnd > 0
    move &TermCount to #Terminations
    multiply 200 times #Terminations
    divide #BeginPlusEnd into #Terminations
    do Format-Number(#Terminations, $out, '9999.9')
    print $out                   (0,168)
    print '%'                    ()
  end-if
  Let $Data-Found-Flag = 'Y'
FROM PS_GEX_R_GEXHR019
GROUP BY JOBCODE
ORDER BY JOBCODE
end-SELECT

begin-SELECT
  print 'Company Total'           (+2,13)
SUM(BEGINS)       &BeginCountC
  do Format-Number(&BeginCountC, $out, '999,999')
  print $out                      (0,53)
SUM(HIRES)        &HireCountC
  do Format-Number(&HireCountC, $out, '999,999')
  print $out                      (0,69)
SUM(TERMINATIONS) &TermCountC
  do Format-Number(&TermCountC, $out, '999,999')
  print $out                      (0,85)
SUM(RETIRES)      &RetireCountC
  do Format-Number(&RetireCountC, $out, '999,999')
  print $out                      (0,101)
SUM(XFERSIN)      &XfersInCountC
  do Format-Number(&XfersInCountC, $out, '999,999')
  print $out                      (0,118)
SUM(XFERSOUT)     &XfersOutCountC
  do Format-Number(&XfersOutCountC, $out, '999,999')
  print $out                      (0,136)
SUM(ENDS)         &EndCountC
  do Format-Number(&EndCountC, $out, '999,999')
  print $out                      (0,152)
  move &BeginCountC to #BeginPlusEnd
  add &EndCountC    to #BeginPlusEnd
  if #BeginPlusEnd > 0
    move &TermCountC to #Terminations
    multiply 200 times  #Terminations
    divide #BeginPlusEnd into #Terminations
    do Format-Number(#Terminations, $out, '9999.9')
    print $out                    (0,168)
    print '%'                     ()
  end-if
FROM PS_GEX_R_GEXHR019
end-SELECT

  If $Data-Found-Flag = 'N'
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  End-If
end-procedure


begin-procedure P400-Truncate-Worktable
#debug9 show 'P400-Truncate-Worktable'

let $sql-statement = 'GEXHR019.SQR,Truncate-Worktable,Truncate,PS_GEX_R_GEXHR019'
begin-SQL On-Error=SQL-Error
TRUNCATE TABLE PS_GEX_R_GEXHR019
end-SQL
end-procedure


!#include 'GEXXX900.sqc'  !Get company multiple row table
!#include 'GEXXX901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table

#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx904.sqc'  !Get grade multiple row table
#include 'gexxx907.sqc'  !Get company/division code multiple row table
#include 'gexxx908.sqc'  !Get sal_admin_plan multiple row table
#include 'gexxx909.sqc'  !Get acct_cd code multiple row table
#include 'gexxx921.sqc'  !Get hr single row run control

#include 'stdapi.sqc'    !Routine to update run status
#include 'askftd.sqc'    !From Thru Date input
#Include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getjobtl.sqc'  !Retrieves the Job Title
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
