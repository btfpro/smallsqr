!***********************************************************************
! GEXBN001: Base Benefit Audit Report                                  *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1996 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 11/15/96 5:59p   $                                      *
!  $Revision:: 5                $                                      *
!  $Workfile:: GEXBN001.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                      MODIFICATION HISTORY                            *
!***********************************************************************
!ID	Date	       Description                                     *
!***********************************************************************
!SXK	09/21/1998     Customized to improve performance.              *
!                                                                      *
!SXK  11/18/1998       Added GEXBN001 as reportid                      *
!                                                                      *
!JDH  11/20/1998       Changed heading for section that checks for     *
!                      incorrect health plan setups on the benefit     *
!                      program table.                                  *
!                                                                      *
!SXK  02/08/1999       Increased date field sizes to 11 to be able to  *
!                      print year.                                     *
!                                                                      *
!sxk  06/23/1999       Modified to use current date while calculating  *
!		       overage dependent years.                        *
!                                                                      *
!SXK  11/23/1999       Modified to have ssn changed to emplid          *
!                                                                      *
!CWB  03/07/2000       Added logic to remove from the report those emps*
!                      and/or their dependents who have been fixed by  *
!                      the Benefits Dept.                              *
!                                                                      *
!CWB  04/25/2000       Added logic to over-age dependents to forecast  *
!                      the report 30 days ahead. Added benefit plan to *
!                      the report detail lines.                        *
!                                                                      *
!SCM  02/6/2001        Added Store#(deptid) and Job Title to Employees *
!                      Less Than 16 Year Old Report                    *
!                                                                      *
!SCM  2/14/2001        Changed order by on the following repts to sort *
!                      by Benefit Program: EE's less than 16 years old,*
!                      People w/Unusual Dependents signed up for       *
!                      Coverage, EE's with Over-age Dependent Coverage.*
!                      Added code to the above reports to ensure that  *
!                      only active employees would appear on reports,  *
!                      i.e. JOB.EMPL_STATUS IN ('A', 'L', 'P', 'S').   *
!                                                                      *
!AXL  07/27/2004       Disable all procedures except for               *
!                      Get-Employees-With-Over-Age-Dependent-Coverage  *
!								       *
!DXS  12/03/2007       Get-Employees-With-Non-Standard-Dependents, made*
!		       relationship value changes, as a result of      *
!		       upgrade to 9.0				       *
!KXY  03/11/2011       Done the Changes for ITG 73441		       *
!GEXBN_848_E105149_01  07/19/2011       Modified the code to send .Lis * 
!						      file to mobius   *
! Ujwal Dyasani		  26-Jan-2017		Updated "psmail" command to    *
!										Linux after PT852 upgrade	   *
!***********************************************************************


#Include 'setenv.sqc'   !Set Database Environment
#Include 'setup02.sqc'  !Printer and Page-Size Initialization (Landscape) !GEXBN_848_E105149_01 07/15/2011 KUNDAN
!vendkxy changes done for ITG 73441-- Begin

!GEXBN_848_E105149_01 07/19/2011 KUNDAN BEGIN
!begin-setup		  !Printer and page-size initialization
 

!declare-printer DEFAULT-PD
!  point-size=7.2
!  pitch=17
!  font=2
!end-declare
!
!#define PAGE_ORIENTATION LANDSCAPE
!#define PAGE_MAX_COLS    179 
!#define PAGE_MAX_LINES   58
!#Define ColR 160 

! Define Parameters
!    #define PAGE_PAPER_SIZE (11,8.5)
!    #define LINE_HEIGHT 9.5 
!
!    #if {PRINTER_TYPE} = 'LINEPRINTER'
!      #define PAGE_LEFT_MARG 0.05			
!      #define PAGE_TOP_MARG  0.5			
!      #define CHAR_WIDTH 4.32
!    #endif
!    
! declare-layout default
!  paper-size={PAGE_PAPER_SIZE}
!  orientation={PAGE_ORIENTATION}
!  max-columns={PAGE_MAX_COLS}
!  max-lines={PAGE_MAX_LINES}
!  left-margin={PAGE_LEFT_MARG}
!  top-margin={PAGE_TOP_MARG}
!  line-height={LINE_HEIGHT}              ! 72/printer_point-size
!  char-width={CHAR_WIDTH}                ! points, to handle max cols
!end-declare
!
!end-setup 
!GEXBN_848_E105149_01 07/19/2011 KUNDAN END

!Set report column widths.



#Define col_name                25      !Employee Name
#Define col_benefit_plan         7      !Benefit Plan
#Define col_plan_type            4      !Plan Type
#Define col_covrg_cd             5      !Coverage Code
#Define col_effdt               11      !Effective Date
#Define col_cost_id              4      !Cost ID
#Define col_calc_rules           4      !Calculation Rules Table ID
#Define col_mar_sts              3      !Marital Status
#Define col_mar_sts_dt          11      !Marital Status Date
#Define col_SSN			9	!Dependent National Id
#Define col_Gender		4	!Dependent Gender
#Define col_deptid              10      !Dept Id (Store#)              !SCM 02/6/2001
#Define col_job_title           25      !Job Title                     !SCM 02/6/2001    



#Define col_sep                  1      !Column Separator   
!#Define col_benefit_program      4      !Benefit Program   !GEXBN_848_E105149_01 07/18/2011 KUNDAN 
#Define col_benefit_program      3      !Benefit Program    !GEXBN_848_E105149_01 07/18/2011 KUNDAN
                                                            
#Define col_emplid              9      !Employee ID        
#Define col_empl_rcd            3      !Employee Record Number
#Define col_emp_name            30      !Employee Name      
#Define col_emp_add1		30	!Address1           
!#Define col_emp_add2		30	!Address2           
#Define col_emp_city		20	!City               
#Define col_emp_state		5	!State              
#Define col_emp_zip		5	!Postal             
#Define col_dep_id               3      !Dependent Beneficiary ID                 
#Define col_dep_name            30      !Dependent Name                           
#Define col_relation            4      !Relationship                              
#Define col_birthdate           9      !Birthdate  
#Define col_SSN			9	!Dependent National Id
!#Define col_Gender		4	!Dependent Gender !GEXBN_848_E105149_01 07/18/2011 KUNDAN
#Define col_Gender		3	!Dependent Gender !GEXBN_848_E105149_01 07/18/2011 KUNDAN                             
!vendkxy changes done   for ITG 73441-- End
                        
!*********************  *************
Begin-Report          
!**********************************
                      
  do Init-Report      
                      
  display 'Report Begin at: ' noline
  do display-time     
  
  !vendkxy changes done   for ITG 73441--Begin
  
  do  Openfile  
    
 !GEXBN_848_E105149_01 07/15/2011 KUNDAN commented the code BEGIN
 
   !do findmailids
  
   !show $to_list
  
  !if $to_list = ' '
 
    !Let $report-name = '/apps/hr/mobius/prod/' ||'gexbn001' ||'.lis'
       
  !else 
  
   ! Let $report-name = '{OUTFILE}' ||'gexbn001'  ||'.lis'
    
   !end-if
    
   !new-report  $report-name
   
   !show '$report-name:---' $report-name
     
   !vendkxy changes done   for ITG 73441--end 
 !GEXBN_848_E105149_01 07/15/2011 KUNDAN commented the code END

  do Process-Main
  
  DO mail-gexbn001  !vendkxy changes done   for ITG 73441 ! commented for testing 

  display 'Report Ended at: ' noline
  do display-time

  do Reset
  do StdAPI-Term

End-Report

!vendkxy changes done   for ITG 73441-- Begin
!***********************************************************************
Begin-Procedure Openfile
!***********************************************************************

   
   Let $delim = ','
   encode '<012>' into $newline
 
   Let $fileout = Lower($ReportID) || '.csv'
        
   Open $fileout As 1 For-Writing Record=1000:Vary
  
   
   String 'Report ID:' $ReportID  ' ' ' ' ' ' ' ' ' ' $ReportTitle by $delim into $gexbn001
   Write 1 from $gexbn001
   WRITE 1 FROM $newline
   WRITE 1 FROM $newline
   String 'BEN PGM' 'PLAN TYPE' 'BENEFIT PLAN' 'EMPLID' 'EMPL RCD' 'NAME' 'ADDRESS1' 'ADDRESS2' 'CITY' 'STATE' 'ZIP CODE'  'DEPENDENT NAME' 'DEPENDENT RELATION' 'DEPENDENT BIRTHDATE' 'DEPENDENT SSN' 'DEP GENDER' by $delim into $gexbn001
   Write 1 from $gexbn001
   
End-Procedure

!vendkxy changes done   for ITG 73441-- End

!**********************************
Begin-Procedure Init-Report
!**********************************

  let $ReportID    = 'GEXBN001'
  let $ReportTitle = 'Base Benefits Audit Report'

  display $ReportID    NoLine
  display ': '         NoLine
  display $ReportTitle
  display ''

  do Init-DateTime
  do Get-Current-DateTime
  do StdAPI-Init
  
!vendkxy changes done   for ITG 73441-- Begin 
  do Get-Run-Control	     !gexrnctl.sqc  
    If Rtrim (&asofdate, ' ') = ''
    	Let $AsOfDate = $AsOfToday
     else
    	let $AsOfDate = &asofdate
    end-if
!vendkxy changes done   for ITG 73441-- End
End-Procedure

!***************
Begin-Heading 4
!***************

#Include 'stdhdg01.sqc' !Standard Headings

End-Heading

!****************************
Begin-Procedure Process-Main
!****************************

 do Get-Employees-With-Over-Age-Dependent-Coverage

End-Procedure

!**********************************************************
Begin-Procedure Get-Employees-Without-Employment-Records
!**********************************************************

  let $SubTitle = 'Employees Without Employment Records'

  print $SubTitle                  (+3,1)
  print 'Employee Name'            (+2,1,{col_name})
  print 'Emplid'                   (0,+{col_sep},{col_emplid})
  print '-'                        (+1,1,40)  Fill

  let #rcds = 0

Begin-Select
A.NAME                  (+1,1,{COL_NAME})
A.EMPLID                (0,+{COL_SEP},{COL_EMPLID})

  add 1 to #rcds

From PS_PERSONAL_DATA A
Where !A.PER_STATUS = 'E'And   
NOT EXISTS (SELECT 'x'
                    From PS_EMPLOYMENT
                   Where EMPLID = A.EMPLID)
Order By A.NAME ASC
End-Select

 print 'The number of records that met this criteria is ' (+2,1)
 print #rcds    () edit 999.

End-Procedure

!*************************************************
Begin-Procedure Get-Employees-Without-Job-Records
!*************************************************

  let $SubTitle = 'Employees Without Job Records'

  print $SubTitle                  (+4,1)
  print 'Employee Name'            (+2,1,{col_name})
  print 'Emplid'                   (0,+{col_sep},{col_emplid})
  print '-'                        (+1,1,40)  Fill

  let #rcds = 0

Begin-Select
B.NAME                  (+1,1,{COL_NAME})
B.EMPLID                (0,+{COL_SEP},{COL_EMPLID})

   Add 1 to #rcds

From  PS_PERSONAL_DATA B,
      PS_EMPLOYMENT    C
Where B.EMPLID = C.EMPLID
And   NOT EXISTS (SELECT 'x'
                    From PS_JOB
                   Where EMPLID    = C.EMPLID
                     And EMPL_RCD = C.EMPL_RCD)
Order By B.NAME ASC
End-Select

 print 'The number of records that met this criteria is ' (+2,1)
 print #rcds    () edit 999.

End-Procedure

!****************************************************
Begin-Procedure Get-Employees-Less-Than-16-Years-Old
!****************************************************
  let $SubTitle = 'Employees Less Than 16 Years Old'

  print $SubTitle                  (+4,1)
  print 'Employee'                 (+2,1,{col_name})

! SCM 02/6/2001  Add store#(deptid) and job title       BEGIN
  print 'Store#'                   (0,+{col_sep},{col_deptid})                                
  print 'Job'                      (0,+{col_sep},{col_job_title})         
  print 'Bene'                     (0,+{col_sep},{col_benefit_program})
  print 'Name'			   (+1,1,{col_name})
  print ''                         (0,+{col_sep},{col_emplid})
  print ''                         (0,+{col_sep},{col_deptid})
  print 'Title'                    (0,+{col_sep},{col_job_title})                      
  print 'Prgm'                     (0,+{col_sep},{col_benefit_program})  
  print '-'                        (+1,1,85)  Fill                       
! SCM 02/6/2001   END


  let #rcds = 0

Begin-Select
E.NAME
E.EMPLID
E.BIRTHDATE
JOB.EMPL_STATUS
JOB.DEPTID                                          !SCM  02/6/2001
JOB.JOBCODE                                         !SCM  02/6/2001
  move &JOB.JobCode to $Jobcode                     !SCM  02/6/2001
  do get-job-title                                  !SCM  02/6/2001

! CWB 04/25/2000 Begin
bp.benefit_program
! CWB 04/25/2000 End
  do Convert-To-DTU-Date(&E.Birthdate,$CvtBDay)
  do Convert-To-DTU-Date($AsOfToday,$CvtToday)
  do Dtu-Diff-Years($CvtBDay,$CvtToday,#Age_Yrs)

  if (#Age_Yrs < 16)
    print &E.Name                  (+1,1,{col_name})
    print &E.Emplid                (0,+{col_sep},{col_emplid})
    print &JOB.DEPTID              (0,+{col_sep},{col_deptid})              !SCM  02/6/2001
    print $jobtitle                (0,+{col_sep},{col_job_title})           !SCM  02/6/2001
! CWB 04/25/2000 Begin
    print &BP.benefit_program      (0,+{col_sep},{col_benefit_program})
! CWB 04/25/2000 End               
    add 1 to #rcds
  end-if


From  PS_PERSONAL_DATA E, PS_JOB JOB, PS_BEN_PROG_PARTIC BP 
Where !E.PER_STATUS = 'E' AND  

! CWB 03/07/2000 Begin
JOB.EMPLID            = E.EMPLID 
AND  JOB.EMPL_STATUS IN ('A', 'L', 'P', 'S')               !SCM 2/14/2001
AND  JOB.EFFDT             =	 
     (SELECT MAX(EFFDT)
      FROM   PS_JOB
      WHERE  EMPLID        = JOB.EMPLID
        AND  EMPL_RCD       = JOB.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)
AND  JOB.EFFSEQ               =	 
     (SELECT MAX(EFFSEQ)
      FROM   PS_JOB
      WHERE  EMPLID          = JOB.EMPLID
        AND  EMPL_RCD       = JOB.EMPL_RCD
	AND  EFFDT           = JOB.EFFDT)
! CWB 04/25/2000 Begin
AND BP.EMPLID              = E.EMPLID
AND BP.EFFDT               =	 
     (SELECT MAX(EFFDT)
      FROM   PS_BEN_PROG_PARTIC
      WHERE  EMPLID        = BP.EMPLID
        AND  EMPL_RCD       = BP.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)

Order By bp.benefit_program,                    !SCM 2/14/2001  Added bene pgm to order by stmt
         E.NAME ASC,
         E.EMPLID ASC
End-Select

  print 'The number of employees that met this criteria is ' (+2,1)
  print  #rcds  ()  edit 999.

End-Procedure

!***********************************************************************
! The purpose of this procedure is to identify employees with unusual
! dependents (i.e., not a son, daughter, father, or mother) enrolled
! in a health plan.
!***********************************************************************

!**********************************************************
Begin-Procedure Get-Employees-With-Non-Standard-Dependents
!**********************************************************

  let $Subtitle = 'People With Unusual Dependents Signed Up For Coverage'

  print $SubTitle                  (+4,1)
  print ''                         (+2,1,{col_emplid})
  print 'Empl'                     (0,+{col_sep},{col_empl_rcd})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print ''                         (0,+{col_sep},{col_benefit_plan})
  print 'Dep'                      (0,+{col_sep},{col_dep_id})
  print 'Rel-'                     (0,+{col_sep},{col_relation})
  print 'Bene'                     (0,+{col_sep},{col_benefit_program})     !SCM 2/14/2001                     
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'Rcd#'                     (0,+{col_sep},{col_empl_rcd})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Plan'                     (0,+{col_sep},{col_benefit_plan})
  print 'ID'                       (0,+{col_sep},{col_dep_id})
  print 'Ship'                     (0,+{col_sep},{col_relation})
  print 'Prgm'                     (0,+{col_sep},{col_benefit_program})    !SCM 2/14/2001
  print '-'                        (+1,1,50)  Fill                         !SCM 2/14/2001


  let #rcds = 0

Begin-Select
F.EMPLID                        (+1,1,{COL_EMPLID})
F.EMPL_RCD                     (0,+{COL_SEP},{COL_EMPL_RCD})
F.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
F.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
I.DEPENDENT_BENEF               (0,+{COL_SEP},{COL_DEP_ID})
I.RELATIONSHIP                  (0,+{COL_SEP},{COL_RELATION})
BP2.BENEFIT_PROGRAM             (0,+{col_sep},{col_benefit_program})      !SCM 2/14/2001
G.NAME


  add 1 to #rcds

From  PS_HEALTH_BENEFIT  F,
      PS_PERSONAL_DATA   G,
      PS_HEALTH_DEPENDNT H,
      PS_DEPENDENT_BENEF I,
      PS_BEN_PROG_PARTIC BP2,                     ! SCM 2/14/2001
      PS_JOB J2                                   ! SCM 2/14/2001

WHERE F.EFFDT = (SELECT MAX(EFFDT)
                    FROM PS_HEALTH_BENEFIT
                   WHERE EMPLID          = F.EMPLID
                     AND COBRA_EVENT_ID  = F.COBRA_EVENT_ID
                     AND EMPL_RCD       = F.EMPL_RCD
                     AND PLAN_TYPE       = F.PLAN_TYPE
                     AND BENEFIT_NBR        = F.BENEFIT_NBR
                     AND EFFDT          <= $asofdate)
  AND  F.COVERAGE_ELECT  = 'E'
  AND  ((F.COVERAGE_END_DT IS NULL) OR (F.COVERAGE_END_DT > $AsOfDate))
  AND  G.EMPLID          = F.EMPLID
  AND  H.EMPLID          = F.EMPLID
  AND  H.COBRA_EVENT_ID  = F.COBRA_EVENT_ID
  AND  H.EMPL_RCD       = F.EMPL_RCD
  AND  H.PLAN_TYPE       = F.PLAN_TYPE
  AND  H.BENEFIT_NBR        = F.BENEFIT_NBR
  AND  I.EMPLID          = F.EMPLID
  AND  I.DEPENDENT_BENEF = H.DEPENDENT_BENEF
!SXK 09/21/1998 Added SS - Step Son, SD - Step Daughter
 AND  I.RELATIONSHIP NOT IN ('C','P','SP','SC')		! Deepak, FC, 12/03/07. changes to 9.0 
							! FA and M = P
							! D and S = C
							! SP = SP 
							! SS and SD = SC
!  SCM 2/14/2001   Added benefit program and ensured that EE is active   **BEGIN**
  AND BP2.EMPLID              = G.EMPLID
  AND BP2.EFFDT               =	 
     (SELECT MAX(EFFDT)
      FROM   PS_BEN_PROG_PARTIC
      WHERE  EMPLID          = BP2.EMPLID
        AND  EMPL_RCD       = BP2.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)
 AND J2.EMPLID            = F.EMPLID 
 AND  J2.EMPL_STATUS IN ('A', 'L', 'P', 'S')                 
 AND  J2.EFFDT             =	 
     (SELECT MAX(EFFDT)
      FROM   PS_JOB
      WHERE  EMPLID          = J2.EMPLID
        AND  EMPL_RCD       = J2.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)
 AND  J2.EFFSEQ               =	 
     (SELECT MAX(EFFSEQ)
      FROM   PS_JOB
      WHERE  EMPLID          = J2.EMPLID
        AND  EMPL_RCD       = J2.EMPL_RCD
	AND  EFFDT           = J2.EFFDT)
!  SCM 2/14/2001                                                       ** END **

ORDER BY BP2.BENEFIT_PROGRAM,                               !SCM 2/14/2001
         G.NAME ASC,
         F.PLAN_TYPE ASC
End-Select

 print 'The number of records that met this criteria is ' (+2,1)
 print #rcds    () edit 999.

End-Procedure

!*************************************************************************
! The purpose of this procedure is to identify occurrences of employee   *
! and spouse (or other dependent) both working at the same company and   *
! both electing (i.e., not Waving) health coverage in the same Plan Type *
! and the dependent is covered by the employee.                          *
!                                                                        *
! CWB 03/21/2000
! NOTE: The following procedure was copied from the PeopleSoft delivered
!       7.51 version of BEN733.SQR, with the addition of the RULE hint
!       and the hard-coding of 'USA' in the WHERE clause.
!
!*************************************************************************
!*********************************************************************
Begin-Procedure Get-Employee-And-Spouse-Both-Electing-Health-Benefits
!*********************************************************************

!*** 'Employee and Spouse (or Other Dependent) Both Electing Health Benefits'
let $SubTitle =
    'Employee and Spouse (or Other Dependent) Both Electing Health Benefits'

  print $SubTitle                  (+4,1)
  print ''                         (+2,1,{col_emplid})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Benefit'                  (0,+{col_sep},{col_benefit_plan})
  print 'Covrg'                    (0,+{col_sep},{col_covrg_cd})
  print 'Dep'                      (0,+{col_sep},{col_dep_id})
  print 'Dependent'                (0,+{col_sep},{col_emplid})
  print 'Employee ID'              (+1,1,{col_emplid})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Plan'                     (0,+{col_sep},{col_benefit_plan})
  print 'Code'                     (0,+{col_sep},{col_covrg_cd})
  print 'ID'                       (0,+{col_sep},{col_dep_id})
  print 'Employee ID'              (0,+{col_sep},{col_emplid})
  print '-'                        (+1,1,54)  Fill 

  let #rcds = 0

Begin-Select
K.EMPLID                        (+1,1,{COL_EMPLID})
K.NAME
J.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
J.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
J.COVRG_CD                      (0,+{COL_SEP},{COL_COVRG_CD})
L.DEPENDENT_BENEF               (0,+{COL_SEP},{COL_DEP_ID})
M.EMPLID                        (0,+{COL_SEP},{COL_EMPLID})

  add 1 to #rcds

From    PS_JOB J3,                      !SCM 2/14/2001
        PS_HEALTH_BENEFIT J,
        PS_PERSONAL_DATA K,
        PS_DEPENDENT_BENEF L,
        PS_DEP_BENEF_NID LN,
        PS_PERSONAL_DATA M,
        PS_PERS_NID MN,
        PS_HEALTH_BENEFIT N
! SCM  2/14/2001                                 *****BEGIN ****
WHERE J3.EMPL_STATUS IN ('A', 'L', 'P', 'S')                 
 AND  J3.EFFDT             =	 
     (SELECT MAX(EFFDT)
      FROM   PS_JOB
      WHERE  EMPLID          = J3.EMPLID
        AND  EMPL_RCD       = J3.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)
 AND  J3.EFFSEQ               =	 
     (SELECT MAX(EFFSEQ)
      FROM   PS_JOB
      WHERE  EMPLID          = J3.EMPLID
        AND  EMPL_RCD       = J3.EMPL_RCD
	AND  EFFDT           = J3.EFFDT)
  AND J3.EMPLID              = J.EMPLID
!  SCM 2/14/2001                                ***** END  ****                                  
  AND J.COVERAGE_ELECT = 'E'
  AND  J.EFFDT =
       (SELECT MAX(Z1.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z1
        WHERE  Z1.EMPLID          = J.EMPLID
          AND  Z1.COBRA_EVENT_ID  = J.COBRA_EVENT_ID
          AND  Z1.EMPL_RCD       = J.EMPL_RCD
          AND  Z1.PLAN_TYPE       = J.PLAN_TYPE
          AND  Z1.BENEFIT_NBR        = J.BENEFIT_NBR
          AND  Z1.EFFDT          <= $AsOfDate)
  AND  (J.COVERAGE_END_DT IS NULL OR J.COVERAGE_END_DT > $AsOfDate)
  AND  K.EMPLID         = J.EMPLID
  AND  L.EMPLID         = J.EMPLID
  AND  LN.EMPLID        = L.EMPLID
  AND  LN.DEPENDENT_BENEF = L.DEPENDENT_BENEF
  AND  LN.COUNTRY       = 'USA'
  AND  MN.EMPLID        = M.EMPLID
  AND  MN.COUNTRY       = 'USA'
  AND  MN.NATIONAL_ID   = LN.NATIONAL_ID
  AND  MN.NATIONAL_ID   <> ' '
  AND  N.EMPLID         = M.EMPLID
  AND  N.COVERAGE_ELECT = 'E'
  AND  N.EFFDT =
       (SELECT MAX(Z2.EFFDT)
        FROM   PS_HEALTH_BENEFIT Z2
        WHERE  Z2.EMPLID          = N.EMPLID
          AND  Z2.COBRA_EVENT_ID  = N.COBRA_EVENT_ID
          AND  Z2.EMPL_RCD       = N.EMPL_RCD
          AND  Z2.PLAN_TYPE       = N.PLAN_TYPE
          AND  Z2.BENEFIT_NBR        = N.BENEFIT_NBR
          AND  Z2.EFFDT          <= $AsOfDate)
  AND  (N.COVERAGE_END_DT IS NULL OR N.COVERAGE_END_DT > $AsOfDate)
  AND  N.PLAN_TYPE      = J.PLAN_TYPE
  AND  EXISTS
       (SELECT 'x'
        FROM   PS_HEALTH_DEPENDNT Z3
        WHERE  Z3.EMPLID          = J.EMPLID
          AND  Z3.COBRA_EVENT_ID  = J.COBRA_EVENT_ID
          AND  Z3.EMPL_RCD       = J.EMPL_RCD
          AND  Z3.PLAN_TYPE       = J.PLAN_TYPE
          AND  Z3.BENEFIT_NBR        = J.BENEFIT_NBR
          AND  Z3.EFFDT          <= $AsOfDate
          AND  Z3.DEPENDENT_BENEF = L.DEPENDENT_BENEF)
ORDER BY K.NAME ASC,
         J.PLAN_TYPE ASC
End-Select

 print 'The number of records that met this criteria is '      (+2,1)
 print #rcds                                           () edit 999.

End-Procedure

!***************************************************************************


!***************************************************************************
! The purpose of this procedure is to identify employees that are actively *
! enrolled in health benefits with dependent coverage where the dependent  *
! is considered to be overage.  Dependents are considered overage if the   *
! age as of the health plan coverage begin date is greater than or equal   *
! to the limit specified at the benefit program level.  These limits are   *
! specified separately for non-students and students.  In addition, a      *
! handicapped parameter defines whether handicapped dependents should be   *
! considered when determining whether a dependents is overage.  These      *
! limits only apply to dependents with a relationship of son or daughter.  *
!***************************************************************************

!***************************************************************************
Begin-Procedure Get-Employees-With-Over-Age-Dependent-Coverage
!***************************************************************************

  let $SubTitle =
    'Employees With Over-Age Dependent Coverage'
!VENDKXY Changes done for ITG 73441-- Begin
  print $SubTitle                  (+4,1)
 
! CWB 04/25/2000 Begin
  !print 'Benefit'                  (0,+{col_sep},{col_benefit_plan})
  print 'Ben'                     (+2,1,{col_benefit_program}) 
! CWB 04/25/2000 End
  print 'Empl ID'                 (0,+{col_sep},{col_emplid})
  print 'Emp'                     (0,+{col_sep},{col_empl_rcd})
  print 'Emp Name'                (0,+{col_sep},{col_emp_name})
  print 'ADDRESS1'		  (0,+{col_sep},{col_emp_add1})
!  print 'ADDRESS2'		  (0,+{col_sep},{col_emp_add2})
  print 'CITY'		          (0,+{col_sep},{col_emp_city})
  print 'STATE'		          (0,+{col_sep},{col_emp_state})
  print 'Zip'                     (0,+{col_sep},{col_emp_zip})
  print 'Dep'                     (0,+{col_sep},{col_dep_id})
  print 'Dependent name'          (0,+{col_sep},{col_dep_name})
  print 'Rel-'                     (0,+{col_sep},{col_relation})
  print 'Dependent'               (0,+{col_sep},{col_birthdate})
  print 'Dep SSN'		   (0,+{col_sep},{col_SSN})      ! Added for ITG 73441
  print 'Dep'			   (0,+{col_sep},{col_Gender})   ! Added for ITG 73441
  print 'Pgm'                     (+1,1,{col_benefit_program})
  
!GEXBN_848_E105149_01 07/18/2011 KUNDAN commented the code BEGIN
 ! print 'Rcd'                    (0,17,{col_empl_rcd})
 ! print 'Code'                    (0,110,{col_emp_zip})
 ! print 'ID'                      (0,116,{col_dep_id})
 ! print 'Ship'                    (0,151,{col_relation})
 ! print 'Birthdate'               (0,156,{col_birthdate})
 ! print 'Gen'		          (0,177,{col_Gender})   
  
  print 'Rcd'                    (0,15,{col_empl_rcd})
  print 'Code'                    (0,108,{col_emp_zip})
  print 'ID'                      (0,114,{col_dep_id})
  print 'Ship'                    (0,149,{col_relation})
  print 'Birthdate'               (0,154,{col_birthdate})
  print 'Gen'		          (0,174,{col_Gender})
  
  
  !print '-'                       (+1,1,179)  Fill
  print '-'                       (+1,1,177)  Fill
 !GEXBN_848_E105149_01 07/18/2011 KUNDAN commented the code END    
  
  
  
!VENDKXY Changes done for ITG 73441-- End
  let #rcds = 0

Begin-Select
P.NAME
P.EMPLID
!VENDKXY Changes done for ITG 73441-- Begin
P.ADDRESS1
P.ADDRESS2
P.CITY
P.STATE
P.POSTAL
O.EMPL_RCD
O.BENEFIT_PLAN 
Q.NAME
!VENDKXY Changes done for ITG 73441-- End
O.PLAN_TYPE
O.COVRG_CD
O.COVERAGE_BEGIN_DT
Q.DEPENDENT_BENEF
Q.RELATIONSHIP
Q.BIRTHDATE
Q.STUDENT      		
Q.STUDENT_STATUS_DT 	
Q.DISABLED 		
!VENDKXY Changes done for ITG 73441-- Begin
DEP_NID.NATIONAL_ID 	
Q.SEX 			
!VENDKXY Changes done for ITG 73441-- End
Q.MAR_STATUS
Q.MAR_STATUS_DT
Z.DEP_AGE_LIMIT
Z.STUDENT_AGE_LIMIT
Z.EXCL_DISABLED_AGE
Y.BENEFIT_PROGRAM

!SXK 06/23/1999 Begin
  do Convert-To-DTU-Date(&Q.Birthdate,$CvtBDay)
  do convert-to-dtu-date($AsOfDate,$CvtToday)
!SXK 06/23/1999 End
! CWB 04/25/2000 Begin
  do Dtu-add-days  ($cvttoday,30,$CvtTodayPlus)
! Let $CvtTodayPlus = dateadd($AsOfDate1,'MON',1)
! Let $CvtTodayPlus = dateadd($CvtTodayPlus,'DAY',-1) 
 
  do Dtu-Diff-Years($CvtBDay,$CvtTodayPlus,#Age_Yrs)
! CWB 04/25/2000 End

 Let $birth_Dt = edit(&Q.Birthdate,'mm/dd/yy') !vendkxy done changes for ITG 73411

  if &Z.Excl_Disabled_Age = 'Y' and &Q.Disabled = 'Y'
  else
  
  !vendkxy done changes for ITG 73411--Begin
     !if &Q.Student = 'N'
       ! if #Age_Yrs >= &Z.Dep_Age_Limit  !Added = condition SXK 06/23/1999  
         
         
         
          Let $birth_month = edit(&Q.Birthdate,'MON')
          Let $this_month = edit($AsOfDate , 'MON')
          let #Age_Yrs = edit(#Age_Yrs,'99')
                   
          
          if #Age_Yrs = &Z.Dep_Age_Limit and $birth_month= $this_month
          
         ! show '$birth_month==' $birth_month '$this_month==' $this_month
         
         ! show '&P.Emplid ==' &P.Emplid '  &DEP_NID.NATIONAL_ID ==' &DEP_NID.NATIONAL_ID '  #Age_Yrs==' #Age_Yrs '   &Q.Birthdate==' &Q.Birthdate
                                                        
	  print &Y.benefit_program        (+1,1,{col_benefit_program})                                             
          print &P.Emplid                 (0,+{col_sep},{col_emplid}) 
          print &O.EMPL_RCD               (0,+{col_sep},{col_empl_rcd})                    
          print &P.NAME			  (0,+{col_sep},{col_emp_name})
          print &P.ADDRESS1		  (0,+{col_sep},{col_emp_add1})
!          print &P.ADDRESS2		  (0,+{col_sep},{col_emp_add2})
          print &P.CITY		          (0,+{col_sep},{col_emp_city})
          print &P.STATE	          (0,+{col_sep},{col_emp_state})
          print &P.POSTAL                 (0,+{col_sep},{col_emp_zip})
          print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})
          print &Q.NAME		          (0,+{col_sep},{col_dep_name})
          print &Q.Relationship           (0,+{col_sep},{col_relation})
          print $birth_Dt		  (0,+{col_sep},{col_birthdate})
          !print &Q.Birthdate              (0,+{col_sep},{col_birthdate})
          print  &DEP_NID.NATIONAL_ID 	  (0,+{col_sep},{col_SSN})    
 	  print  &Q.SEX                   (0,+{col_sep},{col_Gender}) 
  	            
          Do Print-Detail
          
          !vendkxy done changes for ITG 73411--End
           add 1 to #rcds
       ! end-if
     end-if
 !vendkxy done changes for ITG 73411--Begin
    ! if &Q.Student = 'Y'
    !    if #Age_Yrs >= &Z.Student_Age_Limit  !Added = condition PLN 06/24/1999
       

! CWB 04/25/2000 Begin
           !print &Y.benefit_program        (0,+{col_sep},{col_benefit_plan}) 
! CWB 04/25/2000 End
          
           
         ! print &Y.benefit_program        (+1,1,{col_benefit_program})   
  	 ! print &P.Emplid                 (0,+{col_sep},{col_emplid})    
  	 ! print &O.EMPL_RCD               (0,+{col_sep},{col_empl_rcd})  
  	 ! print &P.NAME			  (0,+{col_sep},{col_emp_name})  
  	 ! print &P.ADDRESS1		  (0,+{col_sep},{col_emp_add1})  
!  	  print &P.ADDRESS2		  (0,+{col_sep},{col_emp_add2})  
  	  !print &P.CITY		          (0,+{col_sep},{col_emp_city})  
  	  !print &P.STATE	          (0,+{col_sep},{col_emp_state}) 
  	  !print &P.POSTAL                 (0,+{col_sep},{col_emp_zip})   
  	  !print &Q.Dependent_Benef        (0,+{col_sep},{col_dep_id})    
  	  !print &Q.NAME		          (0,+{col_sep},{col_dep_name})  
  	  !print &Q.Relationship           (0,+{col_sep},{col_relation})  
  	  !print $birth_Dt		  (0,+{col_sep},{col_birthdate})
  	  !print &Q.Birthdate              (0,+{col_sep},{col_birthdate}) 
  	  !print  &DEP_NID.NATIONAL_ID 	  (0,+{col_sep},{col_SSN})
 	  !print  &Q.SEX                   (0,+{col_sep},{col_Gender})
  	  	  
 	  !Do Print-Detail

        !vendkxy done changes for ITG 73411--End
         !  add 1 to #rcds
        !end-if
     !end-if
   end-if

From PS_JOB            J4,
     PS_HEALTH_BENEFIT  O,
     PS_PERSONAL_DATA   P,
    ! PS_DEPENDENT_BENEF Q, ! Removed for ITG 73441 
     PS_BEN_PROG_PARTIC Y,
     PS_BEN_DEFN_PGM Z,
     PS_DEPENDENT_BENEF Q LEFT OUTER JOIN PS_DEP_BENEF_NID DEP_NID ON  DEP_NID.EMPLID = Q.EMPLID AND DEP_NID.DEPENDENT_BENEF = Q.DEPENDENT_BENEF   ! Added for ITG 73441  
!  SCM 2/14/2001                               **** BEGIN  ****
 WHERE J4.EMPL_STATUS IN ('A', 'L', 'P', 'S')                 
 AND  J4.EFFDT             =	 
     (SELECT MAX(EFFDT)
      FROM   PS_JOB
      WHERE  EMPLID          = J4.EMPLID
        AND  EMPL_RCD       = J4.EMPL_RCD
        AND  EFFDT          <= $AsOfDate)
 AND  J4.EFFSEQ               =	 
     (SELECT MAX(EFFSEQ)
      FROM   PS_JOB
      WHERE  EMPLID          = J4.EMPLID
        AND  EMPL_RCD       = J4.EMPL_RCD
	AND  EFFDT           = J4.EFFDT)
  AND J4.EMPLID              = O.EMPLID
!  SCM 2/14/2001                                ***** END  **** 

  AND  O.COVERAGE_ELECT = 'E'
  AND  O.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_HEALTH_BENEFIT
        WHERE  EMPLID          = O.EMPLID
          AND  COBRA_EVENT_ID  = O.COBRA_EVENT_ID
          AND  EMPL_RCD       = O.EMPL_RCD
          AND  PLAN_TYPE       = O.PLAN_TYPE
          AND  BENEFIT_NBR        = O.BENEFIT_NBR
          AND  EFFDT          <= $AsOfDate)
  AND  (O.COVERAGE_END_DT IS NULL OR O.COVERAGE_END_DT > $AsOfDate)
  AND  P.EMPLID         = O.EMPLID
  AND  Q.EMPLID         = O.EMPLID
  AND  Y.EMPLID         = O.EMPLID
  AND  Y.COBRA_EVENT_ID = O.COBRA_EVENT_ID
  AND  Y.EMPL_RCD      = O.EMPL_RCD
  AND  Y.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_BEN_PROG_PARTIC
        WHERE  EMPLID          = Y.EMPLID
          AND  COBRA_EVENT_ID  = Y.COBRA_EVENT_ID
          AND  EMPL_RCD       = Y.EMPL_RCD
          AND  EFFDT          <= $AsOfDate)
  AND  Z.BENEFIT_PROGRAM =Y.BENEFIT_PROGRAM
  AND  Z.EFFDT =
       (SELECT MAX(EFFDT)
        FROM   PS_BEN_DEFN_PGM
        WHERE  BENEFIT_PROGRAM = Z.BENEFIT_PROGRAM
         AND  EFFDT          <= $AsOfDate)
!  AND  Q.RELATIONSHIP  <> 'SP'
  AND  Q.RELATIONSHIP NOT IN('SP','NA')  !VENDKXY Done the changes for ITG 73441
  AND  Q.BIRTHDATE IS NOT NULL
  AND  EXISTS
       (SELECT 'x'
        FROM   PS_HEALTH_DEPENDNT
        WHERE  EMPLID          = O.EMPLID
          AND  COBRA_EVENT_ID  = O.COBRA_EVENT_ID
          AND  EMPL_RCD       = O.EMPL_RCD
          AND  PLAN_TYPE       = O.PLAN_TYPE
          AND  BENEFIT_NBR        = O.BENEFIT_NBR

! CWB 03/07/2000 Begin
!          AND  EFFDT          <= $AsOfDate
          AND EFFDT            = O.EFFDT
! CWB 03/07/2000 End

          AND  DEPENDENT_BENEF = Q.DEPENDENT_BENEF)

ORDER BY Y.BENEFIT_PROGRAM,           !SCM 2/14/2001
         P.NAME ASC,
         O.PLAN_TYPE ASC

End-Select

  print 'The number of records that met this criteria is ' (+2,1)
  print #rcds   () edit 999.

End-Procedure

!vendkxy done changes for ITG 73411--Begin
!***********************************************************************
begin-procedure Print-Detail
!***********************************************************************
#debug9 show 'Print-Detail'
 
 let $name = '"' || &P.NAME || '"'
 Let $depen_name ='"' ||&Q.NAME || '"'
 Let $addr1 = '"' ||&P.ADDRESS1 || '"'
 Let $addr2 = '"' ||&P.ADDRESS2 || '"'

 STRING &Y.benefit_program &O.PLAN_TYPE &O.BENEFIT_PLAN  &P.Emplid &O.EMPL_RCD $NAME $addr1 $addr2 &P.CITY &P.STATE &P.POSTAL $depen_name &Q.Relationship &Q.Birthdate &DEP_NID.NATIONAL_ID &Q.SEX BY $DELIM INTO $GEXBN001
  
 WRITE 1 FROM $GEXBN001
   
   
  
End-Procedure


!***********************************************************************
!***********************************************************************
begin-procedure  mail-gexbn001

close 1
let $to_list = ' '

Begin-Select

GEX_EMAIL_ADDR1.EMAILID


   do create-to-list

From  SYSADM.PS_GEX_EMAIL_ADDR GEX_EMAIL_ADDR1
WHERE RTRIM(GEX_EMAIL_ADDR1.GEX_EMAILTYPE, ' ') = 'BN01'

End-Select

do send-it

end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure  findmailids

let $to_list = ' '

Begin-Select

GEX_EMAIL_ADDR.EMAILID


   let $to_list = $to_list || &GEX_EMAIL_ADDR.EMAILID || ';'

From  SYSADM.PS_GEX_EMAIL_ADDR GEX_EMAIL_ADDR
WHERE RTRIM(GEX_EMAIL_ADDR.GEX_EMAILTYPE, ' ') = 'BN01'

End-Select

end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure  create-to-list
#debug9 display 'create-to-list'

   let $to_list = $to_list || &GEX_EMAIL_ADDR1.EMAILID || ';'

end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure  send-it
#debug9 display 'send-it'

let $TEXT_ID = $ReportID || '_SUBJ' 
do gexbn001-verbiage
let $subject = &A.HR_SSTEXT_TEXT

let $enter = chr(10)

let $TEXT_ID = $ReportID || '_BODY' 
do gexbn001-verbiage

let $body_txt = &A.HR_SSTEXT_TEXT 

! Commented by Ujwal 20170126 - Begin
let $mail-cmd = 'psmail -TO"'||$to_list||'" -SUBJECT"'||$subject||'" -BODY"'||$body_txt||'" -FILE"'||$fileout
! Commented by Ujwal 20170126 - End
! Added by Ujwal 20170126 - Begin
let $mail-cmd = 'psmail -TO"'||$to_list||'" -SUBJECT"'||$subject||'" -BODY"'||$body_txt||'" -FILE"'||$fileout||'"'
! Added by Ujwal 20170126 - End

if $to_list <> ' '

CALL SYSTEM USING $mail-cmd #Status

end-if

end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure  gexbn001-verbiage

Begin-Select
A.HR_SSTEXT_TEXT

 from ps_HR_SSTEXT_TEXT A 
 WHERE A.OBJECTOWNERID = 'HHR' 
 AND A.HR_SSTEXT_SUB_ID = 'GEX' 
 AND A.TEXT_ID = $TEXT_ID 
 AND A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_HR_SSTEXT_EFFDT B 
 WHERE B.OBJECTOWNERID = A.OBJECTOWNERID 
 AND B.HR_SSTEXT_SUB_ID = A.HR_SSTEXT_SUB_ID 
 AND B.TEXT_ID = A.TEXT_ID AND B.EFFDT <= $AsOfDate)

End-Select
 
end-procedure

!vendkxy done changes for ITG 73411-End



!***********************************************************************
! The purpose of this procedure is to identify Health Plans on the     *
! Benefit Program Table with an associated Rate Schedule Id, if any,   *
! where Unit Type is not set to 'None' on the Rate Schedule Table      *
!***********************************************************************

!*****************************************************************************
Begin-Procedure Get-Incorrect-Health-Plan-Setups-On-The-Benefit-Program-Table
!*****************************************************************************

  let $SubTitle =
    'Cost ID Requires a Calc Rule on Benefit Program'
!    'Employees With Incorrect Health Plan Setup On The Benefit Program Table'

  print $SubTitle                  (+4,1)
  print 'Ben'                      (+2,1,{col_benefit_program})
  print 'Effective'                (0,+{col_sep},{col_effdt})
  print 'Plan'                     (0,+{col_sep},{col_plan_type})
  print 'Covrg'                    (0,+{col_sep},{col_covrg_cd})
  print 'Ben'                      (0,+{col_sep},{col_benefit_plan})
  print 'Cost'                     (0,+{col_sep},{col_cost_id})
  print 'Calc'                     (0,+{col_sep},{col_calc_rules})
  print 'Prgm'                     (+1,1,{col_benefit_program})
  print 'Date'                     (0,+{col_sep},{col_effdt})
  print 'Type'                     (0,+{col_sep},{col_plan_type})
  print 'Code'                     (0,+{col_sep},{col_covrg_cd})
  print 'Plan'                     (0,+{col_sep},{col_benefit_plan})
  print 'Id'                       (0,+{col_sep},{col_cost_id})
  print 'Rule'                     (0,+{col_sep},{col_calc_rules})
  print '-'                        (+1,1,50)  Fill

  let #rcds = 0

Begin-Select
R.BENEFIT_PROGRAM               (+1,1,{COL_BENEFIT_PROGRAM})
R.EFFDT                         (0,+{COL_SEP},{COL_EFFDT})
S.PLAN_TYPE                     (0,+{COL_SEP},{COL_PLAN_TYPE})
S.COVRG_CD                      (0,+{COL_SEP},{COL_COVRG_CD})
S.BENEFIT_PLAN                  (0,+{COL_SEP},{COL_BENEFIT_PLAN})
T.COST_ID                       (0,+{COL_SEP},{COL_COST_ID})
T.CALC_RULES_ID                 (0,+{COL_SEP},{COL_CALC_RULES})

 add 1 to #rcds

From    PS_BEN_DEFN_PGM R,
        PS_BEN_DEFN_OPTN S,
        PS_BEN_DEFN_COST T
Where   R.EFFDT = (SELECT MAX(EFFDT)
                   From  PS_BEN_DEFN_PGM
                   Where BENEFIT_PROGRAM = R.BENEFIT_PROGRAM
                   And   EFFDT <= $AsOfDate)
And     S.BENEFIT_PROGRAM = R.BENEFIT_PROGRAM
And     S.EFFDT = R.EFFDT
And     S.PLAN_TYPE LIKE '1%'
And     T.BENEFIT_PROGRAM = S.BENEFIT_PROGRAM
And     T.EFFDT = S.EFFDT
And     T.PLAN_TYPE = S.PLAN_TYPE
And     T.OPTION_ID = S.OPTION_ID
And     T.RATE_TBL_ID <> ' '
And EXISTS (SELECT 'x'
            From PS_FLAT_RATE_TBL U
            Where U.FLAT_RATE_ID = T.RATE_TBL_ID
            And U.RATE_UNIT <> '1'
            And U.EFFDT = (SELECT MAX(EFFDT)
                           From PS_FLAT_RATE_TBL
                           Where FLAT_RATE_ID = U.FLAT_RATE_ID
                           And EFFDT <= U.EFFDT))
Order By R.BENEFIT_PROGRAM ASC,
         R.EFFDT ASC,
         S.PLAN_TYPE ASC,
         S.COVRG_CD ASC,
         S.BENEFIT_PLAN ASC,
         T.COST_ID ASC,
         T.CALC_RULES_ID ASC
End-Select

 print 'The number of records that met this criteria is ' (+2,1)
 print #rcds () edit 999.

End-Procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Format-DateTime
#Include 'datemath.sqc'  !Convert to DTU procedure
#include 'getjobtl.sqc'  !Get-Job-Title procedure

#Include 'stdapi.sqc'    !Update Process API
#include 'gexrnctl.sqc'  !for Run-Cntrl-Parameters !vendkxy

!******************************* End of Report *******************************
