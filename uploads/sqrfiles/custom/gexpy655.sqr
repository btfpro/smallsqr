!***********************************************************************
! GEXPY655:  This program produces a file and report of employee       *
!            deductions for OMEGA Federal Credit Union.                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!  $Date:: 03/26/04 02:00P      $                                      *
!  $Revision:: 01               $                                      *
!  $Workfile:: GEXPY655.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  xxxx    CWB         03/26/2004     INITIAL CREATION                 *
!                                     Based on GEXPY001                *      
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid
!***********************************************************************
!#Define OUTFILE /apps/hr/hrms90/hrdev90/outgoing/	!For Testing
#include 'setenv.sqc' !Set environment
#Include 'setup01.sqc' !Printer and page-size initialization - Portrait

!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init
  do create-work-table
  move 'GEXPY655' to $ReportID
  show ' '
  show 'Log for report ' $reportid
  move 'Omega Credit Union Report' to $ReportTitle
  show $ReportTitle
  show ' '

  date-time () mm/dd/yyyy &dayBegan
  date-time () hh:mi:ss &timeBegan
  show 'Report Began on ' &daybegan ' at '&timebegan
  show ' '

  do Report

  date-time () mm/dd/yyyy &dayEnded
  date-time () hh:mi:ss &timeEnded
  show ' '
  show 'Report Ended on ' &dayended ' at '&timeEnded

  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report

 move 'N' to $Errorfound

  if $prcs_process_instance = ''
      input $rnctl_date 'Enter Run Control Date({Prompt-Date}): ' type=char
      do format-datetime($rnctl_date,$rnctl_date,{prompt-mask},'','native')
      if rtrim($rnctl_Date,' ') = ''
         let $rnctl_date = $asoftoday
      end-if

      input $Run_ID 'Enter Run ID ' type=char
      uppercase $Run_ID 
      do edit-runid
      if $found = 'N'
      display 'Error found -- Invalid Run ID'
      STOP
      end-if


      Let $GEXXX900_Company_Alias = 'C.COMPANY'
      Let $CompanyString = ''''
      Display 'Enter Company or leave blank to exit.'
      While 1=1
        Input $In-Company Maxlen=3 'Company'
        Uppercase $In-Company
      If Rtrim($In-Company, ' ') = ''
        Concat '''' With $CompanyString
        Break
      End-If
      If $CompanyString <> ''''
        Concat ''',''' With $CompanyString
      End-If
      Concat $In-Company With $CompanyString
    End-While

    If $CompanyString = ''''''
      Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = '1=1'
      Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'
    Else
      Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = $GEXXX900_Company_Alias || ' In (' || $CompanyString || ')'
      Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = $GEXXX900_INCLUDE_COMPANY_CRITERIA
    End-If

       Let $GEXXX919_DEDCD_Alias    = 'D.DEDCD'
       Let $DEDCDString = ''''
       Display 'Enter DEDCD or leave blank to exit.'
       While 1=1
          Input $In-Dedcd Maxlen=10 'DEDCD'
          Uppercase $In-DedcD
          If Rtrim($In-DedcD, ' ') = ''
             Concat '''' With $DEDCDString
             Break
          End-If
          If $DEDCDString <> ''''
             Concat ''',''' With $DEDCDString
          End-If
          Concat $In-DEDCD With $DEDCDString
       End-While

       If $DeptIDString = ''''''
          Let $GEXXX919_INCLUDE_DEDCD_CRITERIA = '1=1'
          Let $GEXXX919_INCLUDE_DEDCD_DISPLAY_CRITERIA = 'ALL'
       Else
          Let $GEXXX919_INCLUDE_DEDCD_CRITERIA = $GEXXX919_Dedcd_Alias || ' In (' || $DEDCDString || ')'
          Let $GEXXX919_INCLUDE_DEDCD_DISPLAY_CRITERIA = $GEXXX919_INCLUDE_DEDCD_CRITERIA
       End-If

  else
!get parameters from single row run control record 
       Do GEXXX922-Select-Parameters
       let $rnctl_date = $GEX_RC_PAY.ASOFDATE
       if rtrim($GEX_RC_PAY.ASOFDATE,' ') = ''
          let $rnctl_date = $asoftoday
       end-if
       let $Run_ID = $GEX_RC_PAY.RUN_ID
!get parameters from multiple row run control record
     Let $GEXXX900_Company_Alias = 'C.COMPANY'
     do GEXXX900-Select-company-Parameters
     Let $GEXXX919_DEDCD_Alias    = 'D.DEDCD'
     do GEXXX919-Select-DEDCD-Parameters
 end-if

 let $Filename = '{OUTFILE}'||'gexpy655.dat'
 let $delim = ';'

 do Open-File
 do get-pay-end-dt  
 do Print-Cover-Page  
 do process-employee-data
 do finish-report

end-procedure

!***********************************************************************
begin-procedure Print-Cover-Page
!***********************************************************************
#debug9 show 'Print-Cover-Page'

  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print 'Pay Run ID           ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)

  Print 'Pay Run ID                                           = '   (+1,5)
  Print  $Run_ID                                                  (0,+2)

  Print '$As Of Date                                          = '   (+1,5)
  Print  $rnctl_date                                               (0,+2)

  Print '$GEXXX919_INCLUDE_DEDCD_DISPLAY_CRITERIA              = '  (+1,5) 
  Print $GEXXX919_INCLUDE_DEDCD_DISPLAY_CRITERIA                    (0,+2) 

  Let #PAGE-COUNT = 0

  new-page
 
End-Procedure

!*********************************************************************
!Gets latest pay end date confirmed
!*********************************************************************
begin-procedure get-pay-end-dt
begin-select loops=1
x.pay_end_dt

   let $pay_end_dt = &x.pay_end_dt
!   show '$pay_end_Dt: ' $pay_end_Dt
   let $year4 = '1' 
   do Format-DateTime($pay_end_Dt, $pay_end_Date,{DEFDATE}, '', '')
   show 'Pay End Date: ' $pay_end_Date

from ps_pay_Calendar x
where x.pay_confirm_run = 'Y'
and x.run_id = $Run_ID    
end-select
 if rtrim(&x.pay_end_Dt,' ') = ''
    show 'The latest pay end date is not confirmed yet'
    stop
end-if

end-procedure
!*********************************************************************
!Edit Run ID
!*********************************************************************
begin-procedure edit-runid
begin-select loops=1
x1.run_id

   display &x1.run_id

from ps_pay_Calendar x1
where x1.run_id = $Run_ID 

end-select
 if rtrim(&x1.run_id,' ') = ''
    show 'Invalid Run ID is entered.'
    stop
end-if

end-procedure

!*********************************************************************
!Prints the header information in the report.
!*********************************************************************

begin-heading 5

#Include 'stdhdg01.sqc'


  print 'COMP' (+1,4)
  print 'PYGRP' (,9)
  print 'NAME' (,16)
  print 'SSN' (,58) 
  print 'DEDUCTION' (,70) 


end-heading

!*********************************************************************
!This is the main processing control procedure. Depending on the 
!sorting option, calls the corresponding procedure to process.
!********************************************************************* 

begin-procedure process-employee-data

move 'N' to $found

begin-select ON-ERROR=SQL-Error-Found('Process-employee-data')
C.COMPANY   () on-break print=never after=After-Company-Change 
               level=01
C.PAYGROUP  () on-break print=never after=After-Paygroup-Change
               level=02   
C.DEPTID    
c.name    
c.emplid
c.empl_rcd
D.DED_CUR

  move 'Y' to $Found
  move 'N' to $errorfound
  move &x.pay_end_dt to $pay_end_dt
  move &c.company to $company
  move &c.paygroup to $paygroup
  move &c.emplid to $emplid
  move &C.empl_rcd to #empl_rcd
  move &c.name to $name
  let $name = substr($name,1,40)
  move &D.DED_CUR to #dedCUR
  let  #ded_cur = #dedcur 
  add  #ded_CUR to #company_ded_CUR
  add  #ded_CUR to #paygroup_ded_CUR
  add  #ded_CUR to #tot_ded_CUR
  move #ded_cur to $ded_amount 99,999.99
  add 1 to #company_emps
  add 1 to #paygroup_emps
  add 1 to #tot_emps
  do insert-into-work-table
  do write-report-line

FROM   PS_PAY_CHECK C,                          
       PS_PAY_DEDUCTION D
where  C.COMPANY = D.COMPANY
   AND C.PAYGROUP = D.PAYGROUP
   AND [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
   AND [$GEXXX919_INCLUDE_DEDCD_CRITERIA]
   AND C.PAY_END_DT = &x.pay_end_Dt
   AND C.PAY_END_DT = D.PAY_END_DT
   AND C.OFF_CYCLE = D.OFF_CYCLE
   AND C.PAGE_NUM     = D.PAGE_NUM
   AND C.LINE_NUM     = D.LINE_NUM
   AND C.SEPCHK    = D.SEPCHK
ORDER BY  C.COMPANY,C.PAYGROUP,C.NAME
end-select
  
do get-wt-data

end-procedure

!*********************************************************************
Begin-procedure Create-work-table
!*********************************************************************
#debug9 show 'Create-Work-Table'

 Let $tablename = 'PS_WT_GEXPY655'

begin-sql 
CREATE TABLE [$tablename] 
	(NAME		VARCHAR2(50)	NOT NULL,
	 EMPLID		VARCHAR2(11)	NOT NULL,
         DED_CUR        NUMBER(10,2)    NOT NULL)
        TABLESPACE TE7TOOLS001

end-sql 
end-procedure

!*********************************************
begin-procedure Insert-into-work-table
!*********************************************
#debug9 show 'Insert-into-work-table'

Begin-SQL

Insert Into [$tablename]
   Values (&C.NAME,
           &C.EMPLID,
           &D.DED_CUR)  
end-sql 
end-procedure

!***********************************************************************
begin-procedure Open-File
!***********************************************************************
#debug9 show 'Open-File'

   open $Filename as 1 for-writing record=75:fixed status=#filestat  
   let $display_filename = $Filename 

 #ifndef UNIX
  #ifndef NT
	show '**ERROR** During file open. Incorrect operating system type.'
	print '**ERROR** During file open. Incorrect operating system type.' (+10,10)
	show '** Stopping SQR.' 
	print '** Stopping SQR.' (+1,10) 
	STOP
  #end-if
 #end-if

 if #filestat <> 0
   show '**ERROR** During file open. Non zero status code.'
   print '**ERROR** During file open. Non zero status code.'  (+10,10)
 end-if
end-procedure

!*********************************************************************
Begin-procedure get-wt-data
!*********************************************************************
#debug9 show 'Get-WT-Data'

Begin-select
WT.NAME
WT.EMPLID
WT.DED_CUR

  let $w_name = substr(&wt.name,1,40)
  let $w_emplid = &wt.emplid
  move &WT.DED_CUR to #w_ded_CUR
  move #w_ded_cur to $w_ded_amt 0999999.99

  do write-data-record
  
from [$tablename] WT
order by WT.NAME

end-select

end-procedure

!***********************************************************************
begin-procedure Write-data-record
!***********************************************************************
#debug9 show 'Write-data-record'
  do Get-Emp-Ssn ($w_emplid, $Ssn_Out) !GEX_SEC_REENG 2015-04-29 Vahini Katta  
  write 1 from $w_name:40
               $delim:1  
               !$w_emplid:9 !GEX_SEC_REENG 2015-04-29 Vahini Katta
               $Ssn_Out:9   !GEX_SEC_REENG 2015-04-29 Vahini Katta
               $delim:1  
               $pay_end_date:10
               $delim:1  
               $w_ded_amt:13
end-procedure    

!*********************************************
begin-procedure Write-Report-Line
!*********************************************
#debug9 show  'Write-Report-Line'
  do Get-Emp-Ssn ($EMPLID, $Ssn_Out) !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $company                 (+1,4)
  print $paygroup                (,10)
  print $name                    (,16)
  !print $EMPLID                  (,58) !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $Ssn_Out                 (,58)  !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $ded_amount              (,70)

end-procedure

!*********************************************************************
Begin-procedure After-Paygroup-Change
!*********************************************************************
  let $out = 'Paygroup '||$paygroup||' totals' 
  print $out              (+2,4)
  print #paygroup_emps    (,58) EDIT 99,999
  print #paygroup_ded_cur (,67) EDIT $,$$$,$$9.00
  position (+1)
  move 0 to #paygroup_emps
  move 0 to #paygroup_ded_cur

end-procedure

!*********************************************************************
Begin-procedure After-Company-Change
!*********************************************************************
  let $out =  'Company '||$company||' totals' 
  print $out             (+1,4)
  print #company_emps    (,58) EDIT 99,999
  print #company_ded_cur (,67) EDIT $,$$$,$$9.00
  new-page
  move 0 to #company_emps
  move 0 to #company_ded_cur

end-procedure

!*********************************************************************
!Displays the employee id that failed 
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  display 'Emplid: ' $EmplID 
end-procedure

!*********************************************************************
! Produce totals for the log
!*********************************************************************
Begin-procedure Finish-report
  If $found = 'N'
    print 'NO DATA SELECTED FOR THIS REPORT RUN'  (10,) CENTER
    show ' '
    show 'NO DATA SELECTED FOR THIS REPORT RUN'
  else
    move #tot_emps to $tot_emps 99,999 
    move #tot_ded_cur to $tot_ded_cur $,$$$,$$9.99
    print 'Report Totals'   (+2,4)
    print $tot_emps         (,58) 
    print $tot_ded_cur      (,67) 
    show ' '
    show 'Total number of employees processed: ' $tot_emps
    show ' '
    show 'Total deduction amount processed   : ' $tot_ded_cur
  end-if
do drop-work-table
end-procedure

!************************************
begin-procedure Drop-work-table
!************************************
#debug9 show 'Drop-work-table' 

begin-sql 
DROP TABLE [$tablename]
end-sql
end-procedure

!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure

!*********************************************************************

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx907.sqc'  !Get company/division code multiple row table
#include 'gexxx908.sqc'  !Get sal_admin_plan multiple row table
#include 'gexxx909.sqc'  !Get acct_cd code multiple row table
#include 'gexxx919.sqc'  !Get dedcd multiple row table
#include 'gexxx922.sqc'  !Get pay single row run control
#include 'gexaltse.sqc'  ! Alter session SQC
#Include 'getgeid.sqc'   !Get SSN !GEX_SEC_REENG 2015-04-29 Vahini Katta