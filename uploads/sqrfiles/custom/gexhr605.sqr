!***********************************************************************
! GEXHR605  Interface to CE City
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  SRC         12/20/2005     INITIAL CREATION                         *
!     								       *
!  NYS         08/20/2007      Upgrade 9.0 changes                     *
!                             changed the reference of ROWSECCLASS     *
! VENDKXY      05/11/2009 	Done job title changes for ITG 60299
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'

begin-report
  ! do Alter-Session    !ISDVSRC    commented for upgrade 9.0 
   
  do Init-DateTime
  do Init-Number
  do stdapi-init
  move 'GEXPYCEC' to $ReportID
  move 'Employee Changes for CE CITY' to $ReportTitle
  display $ReportID
  display $ReportTitle

  do Get-Current-DateTime

 
  Let $GEXXX901_Company_Alias  = 'JOB.company'
  Let $GEXXX901_Paygroup_Alias = 'JOB.paygroup'
  Let $GEXXX916_Jobcode_Alias  = 'JOB.jobcode'
  Let $GEXXX903_Emp_Stat_Alias = 'JOB.EMPL_STATUS'
  show ' $prcs_oprid' $Prcs_OprID
  if $prcs_process_instance = ''
    Do Ask-As-Of-Date
    Let $X000_WHERE_SELECT_ASOFDATE = $AsOfDate
    !**** Handle Company/Paygroup 
    
  Display 'Enter Company/Paygroup or leave blank to exit.'
  While 1=1
    Input $In-Company Maxlen=3 'Company'
    Uppercase $In-Company
    If Rtrim($In-Company, ' ') = ''
      Break
    Else
      Input $In-Paygroup Maxlen=3 'Paygroup'
      Uppercase $In-Paygroup
      If Rtrim($In-Paygroup, ' ') = ''
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''')'
      Else
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''' And ' || $GEXXX901_Paygroup_Alias || ' = '''  || $In-Paygroup || ''')'
      End-If
      Add 1 To #GEX_RC_PAYGROUP_ROWS
      If #GEX_RC_PAYGROUP_ROWS = 1
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ' Or '  || $Include_Condition
      End-If
    End-If
  End-While

  If #GEX_RC_PAYGROUP_ROWS = 0
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
  End-If  
    
!**** Handle jobcodes
  Let $JobcodeString = ''''
  Display 'Enter Jobcode or leave blank to exit.'
  While 1=1
    Input $In-Jobcode Maxlen=6 'Jobcode'
    Uppercase $In-Jobcode
    If Rtrim($In-Jobcode, ' ') = ''
      Concat '''' With $JobcodeString
      Break
    End-If
    If $JobcodeString <> ''''
      Concat ''',''' With $JobcodeString
    End-If
    Concat $In-Jobcode With $JobcodeString
  End-While

  If $JobcodeString = ''''''
    Let $GEXXX916_INCLUDE_JOBCODE_CRITERIA = '1=1'
    Let $GEXXX916_INCLUDE_JOBCODE_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX916_INCLUDE_JOBCODE_CRITERIA = $GEXXX916_Jobcode_Alias || ' In (' || $JobcodeString || ')'
    Let $GEXXX916_INCLUDE_JOBCODE_DISPLAY_CRITERIA = $GEXXX916_INCLUDE_JOBCODE_CRITERIA
  End-If
  
!----------------------------------------------------
!	  Let $EmplStatusString = ''''
!
!	  Display 'Enter Employee Status or leave blank to exit.'
!	  While 1=1
!	    Input $In-EmplStatus Maxlen=1 'Employee Status'
!	    Uppercase $In-EmplStatus
!	    If Rtrim($In-EmplStatus, ' ') = ''
!	      Concat '''' With $EmplStatusString
!	      Break
!	    End-If
!	    If $EmplStatusString <> ''''
!	      Concat ''',''' With $EmplStatusString
!	    End-If
!	    Concat $In-EmplStatus With $EmplStatusString
!	  End-While
!	
!	  If $EmplStatusString = ''''''
!	    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = '1=1'
!	    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = 'ALL'
!    
!	  Else
!	    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = $GEXXX903_Emp_Stat_Alias || ' In (' || $EmplStatusString || ')'
!	    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
!
!	  End-If
!	!----------------------------------------------------
!	show '$GEXXX903_Include_Emp_Stat_Criteria        :' $GEXXX903_Include_Emp_Stat_Criteria
!	show '$GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA:' $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA
!      
      !----------------------------------------------------


 Else

    Do GEXXX922-Select-Parameters   ! TO GET AS OF DATE
    Let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_PAY.AsOfDate
    If Rtrim ($GEX_RC_PAY.AsOfDate, ' ') = ''
      Let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    End-If
    
    Do GEXXX903-Select-Emp-Stat-Parameters 
    Do GEXXX901-Select-Company-Paygroup-Parameters
    Do GEXXX916-Select-Jobcode-Parameters   
 End-if

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
    show 'Report Began at ' &timeBegan ' on ' &dateBegan

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE, {DEFDATE}, '', '')

    show ' '
    show '$X000_WHERE_SELECT_ASOFDATE                          = '  $X000_WHERE_SELECT_ASOFDATE
    show '$GEXXX901_Include_Company_Paygroup_Display_Criteria  = ' $GEXXX901_Include_Company_Paygroup_Display_Criteria
    show '$GEXXX916_Include_Jobcode_Display_Criteria           = ' $GEXXX916_Include_Jobcode_Display_Criteria
    show ' '
  
  
  
  

  Let $Year4 = '1'
  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $reportdate, {DEFDATE}, '', '')
  
  let $reportdate_mm = substr($reportdate,1,2)
  let $reportdate_dd = substr($reportdate,4,2)
  let $reportdate_yy = substr($reportdate,7,4)
  let $reportdate_ccyy = $reportdate_yy||'-'||$reportdate_mm||'-'||$reportdate_dd
  do Convert-From-DTU-Date($reportdate_ccyy, $reportdate_dbf)

!##################################################################
  let $reportdate_dtu = $reportdate_ccyy
  let $excep_flag = 'Y'
  let $alert_flag = 'Y'
!##################################################################

! CJH - 04/12/1999 - make deletes 21 days
! let #subtract_Days = 14
  let #subtract_Days = 1
! CJH - 04/12/1999

  do dtu-subtract-days($reportdate_ccyy, #subtract_Days, $reportdate_less14)
  do Convert-From-DTU-Date($reportdate_less14, $reportdate_less14_dbf)

  do Report
  do Commit-Transaction

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
    show 'Report Ended at ' &timeEnded ' on ' &dateEnded
    show ' '

  do stdapi-term
 
 end-report

!************************************************************************
begin-procedure Report
!************************************************************************
   show 'Entered into Report'
 date-time () hh:mi:ss &timeBegan
 display 'Report Began: ' noline
 display &timeBegan

 move 'N' to $Errorfound
 move '0' to $filler

  Let $COMMA = ','
  
  encode '<009>' into $tab  
  encode '<39>' into $Quote
  Let $quote1 = '"'
  Let $quote2 = '"'
  
 
 Let #seqno	  = 1
 
 
 
 Do Delete-Prior-Entries
 Do Move-New-To-Old
 Do Select-New-Data
 Do Find-Changes
 
 Do Open-File1
 Do Open-File2
 
 Do Write-File1
 Do Pharmacy-File

 
 do Format-Number(#recs-written, $out, '99999')
 
 #debug8 show 'Records Written:'  $out
 
 
  

  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded



end-procedure

!**********************************************************************
begin-procedure delete-prior-entries
! Delete Data from PS_GEX_CEC_OLD and PS_GEX_CEC_CHG tables
!**********************************************************************
 #debug9 show 'Entered into procedure delete-prior-entries'

begin-sql
delete from PS_GEX_CEC_CHG
end-sql

begin-sql
delete from PS_GEX_CEC_OLD
end-sql


end-procedure


!**********************************************************************
begin-procedure Move-New-To-Old
!Move Data from PS_GEX_CEC_NEW Table to PS_GEX_CEC_OLD table
!And delete data from  PS_GEX_CEC_NEW Table
!********************************************************************** 
 #debug9 show 'Entered into procedure Move-New-To-Old'
 
begin-sql on-error=sql-error-found('Move-New-To-Old')
 insert into PS_GEX_CEC_OLD
 (select  
NEW.SEQNO            ,            
NEW.TERMINATION_DT   ,
NEW.COMPANYID        ,
NEW.USERMAPNAME      ,
NEW.PASSWORD         ,
NEW.EMPLID           ,
NEW.EMPL_RCD         ,
NEW.GEX_EMPLID       ,
NEW.FIRST_NAME       ,
NEW.LAST_NAME        ,
NEW.MIDDLE_INITIAL   ,
NEW.ADDRESS1         ,
NEW.ADDRESS2         ,
NEW.CITY             ,
NEW.STATE            ,
NEW.ZIP              ,
NEW.JOBCODE          ,
NEW.JOBCODE_DESCR    ,
NEW.EMAILID          ,
NEW.GEX_LIC_STATE    ,
NEW.DEPTID
from PS_GEX_CEC_NEW NEW)
end-sql

begin-sql
delete from PS_GEX_CEC_NEW
end-sql
end-procedure


!******************************************************************
begin-procedure Select-New-Data
!Select current Data and Insert into PS_GEX_CEC_NEW table
!******************************************************************
  #debug9 show 'Entered into  Select-New-Data'
begin-select ON-ERROR=SQL-Error-Found('Select-New-Data')

EMP.TERMINATION_DT
EMP.EMPLID
EMP.EMPL_RCD
JOB.DEPTID
JOB.JOBCODE
PD.FIRST_NAME
PD.LAST_NAME
PD.MIDDLE_NAME 
PD.ADDRESS1
PD.ADDRESS2
PD.CITY
PD.STATE
PD.POSTAL
MAPP.EMPLID
Job.position_Nbr 			 !VENDKXY done job title changes for ITG 60299 
 
 Let $TERM_DATE   = &EMP.TERMINATION_DT                
 Let $EMPLID      = &EMP.EMPLID                        
 Let #EMPL_RCD    = &EMP.EMPL_RCD                      
 
 Let $DEPTID      = &JOB.DEPTID                        
 Let $JOBCODE     = &JOB.JOBCODE        
 
 Let $FIRST_NAME  = &PD.FIRST_NAME                     
 Let $LAST_NAME   = &PD.LAST_NAME                      
 Let $MIDDLE_NAME = SUBSTR(&PD.MIDDLE_NAME ,1 ,1)      
 Let $ADDRESS1    = &PD.ADDRESS1                       
 Let $ADDRESS2    = &PD.ADDRESS2                       
 Let $CITY        = &PD.CITY                           
 Let $STATE       = &PD.STATE                          
 Let $POSTAL      = &PD.POSTAL                         
 
 Let $GEX_EMPLID  = &MAPP.EMPLID               
  
  
  Do Get-JobCode-Descr
  

	!VENDKXY done job title changes for ITG 60299
  	Let $Position_Nbr= &JOb.position_Nbr  
  		DO Get-Position-Title
 	IF $PosName = ' '
 	 	Let $JT.DESCR  = $JT.DESCR 
 	 ELSE
 	 	Let $JT.DESCR  =$PosName
	 END-IF
 	!VENDKXY done job title changes for ITG 60299

  
  Do Insert-New-Tbl
 
  

!  FROM PS_JOB JOB, PS_EMPLMT_SRCH_QRY A1, PS_PERSONAL_DATA PD, PS_EMPLOYMENT EMP,PS_GEX_EMPLID_MAPP MAPP  vendkxy
  FROM PS_JOB JOB, PS_PERSONAL_DATA PD, PS_EMPLOYMENT EMP,PS_GEX_EMPLID_MAPP MAPP
  WHERE
  !Vendkxy
   !JOB.EMPLID = A1.EMPLID
    !AND JOB.EMPL_RCD = A1.EMPL_RCD
    !AND A1.ROWSECCLASS = 'DPN25'  ! upgrade 9.0 changes
    !AND A1.OPRID = 'ISDVSTAT'     ! upgrade 9.0 changes
    !AND PD.EMPLID = A1.EMPLID
    !AND EMP.EMPLID = A1.EMPLID
    !AND EMP.EMPL_RCD = A1.EMPL_RCD
    !AND 
    !Vendkxy
    JOB.EFFDT =(SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED WHERE JOB.EMPLID = A_ED.EMPLID
          	     AND JOB.EMPL_RCD = A_ED.EMPL_RCD AND A_ED.EFFDT <= $X000_WHERE_SELECT_ASOFDATE)
    AND JOB.EFFSEQ = (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES WHERE JOB.EMPLID = A_ES.EMPLID
          	      AND JOB.EMPL_RCD = A_ES.EMPL_RCD AND JOB.EFFDT = A_ES.EFFDT)
    AND JOB.EMPLID = PD.EMPLID
    AND PD.EMPLID  = EMP.EMPLID
    AND PD.EMPLID   = MAPP.SSN
    AND JOB.EMPL_STATUS IN ('A','L','P','S','T','Q','R','U')  !Second and going forward
    !AND   [$GEXXX903_Include_Emp_Stat_Criteria]
 AND ((JOB.company = 'GEI' And JOB.paygroup = 'PHM') Or (JOB.company = 'RFI' And JOB.paygroup = 'PH3') Or (JOB.company = 'TMK' And JOB.paygroup = 'PH2') Or (JOB.company = 'TMK' And JOB.paygroup = 'PH4'))     
 AND (JOB.jobcode In ('20138','30170','30299'))                                                                                                                 
 !  AND   [$GEXXX901_Include_Company_Paygroup_Criteria]
 !  AND   [$GEXXX916_Include_Jobcode_Criteria]
    
    
End-select



 If $found = 'N'
   add #1 to #errorcount
   do error-found
    #debug8 show 'No employees found for any store' 
 End-If

End-Procedure


!********************************************************************
begin-procedure  Get-JobCode-Descr
!********************************************************************
   #debug9 show 'Entered into  Get-JobCode-Descr'
   #debug8 show ' $JOBCODE :'  $JOBCODE  
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND('Get-JobCode-Descr')
JT.DESCR 

 #debug7 show 'JT.DESCR :' &JT.DESCR 
 Let $JT.DESCR  =&JT.DESCR 


FROM  PS_JOBCODE_TBL JT
WHERE JT.JOBCODE =  $JOBCODE 
  AND JT.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
       		WHERE  JOBCODE = $JOBCODE   
       		AND  EFFDT  <= $X000_WHERE_SELECT_ASOFDATE)
END-SELECT
End-Procedure
         
!********************************************************************
begin-procedure Insert-New-Tbl
!********************************************************************
 #debug9  show 'ENTERED INTO  Insert-New-Tbl'

 add 1 to #inputtran
 #debug8 show '#seqno:' #seqno


 	#debug8 show '$TERM_DATE     ' $TERM_DATE                         
	!#debug8 show '$EMPLID        ' $EMPLID            
	!#debug8 show '#EMPL_RCD      ' #EMPL_RCD          
	#debug8 show 'NEW.GEX_EMPLID ' $GEX_EMPLID 
	#debug8 show '$FIRST_NAME    ' $FIRST_NAME        
	#debug8 show '$LAST_NAME     ' $LAST_NAME         
	#debug8 show '$MIDDLE_NAME   ' $MIDDLE_NAME          
	#debug8 show '$ADDRESS1      ' $ADDRESS1           
	#debug8 show '$ADDRESS2      ' $ADDRESS2
	#debug8 show '$CITY          ' $CITY
	#debug8 show '$STATE         ' $STATE
	#debug8 show '$POSTAL        ' $POSTAL
	#debug8 show '$JOBCODE       ' $JOBCODE
	#debug8 show '$JT.DESCR      ' $JT.DESCR
	#debug8 show '$DEPTID        ' $DEPTID
        
        
     


begin-SQL ON-ERROR=SQL-Error-Found('Insert-New-Tbl')
insert into PS_GEX_CEC_NEW
(
SEQNO          ,        
TERMINATION_DT ,        
COMPANYID      ,        
USERMAPNAME    ,        
PASSWORD       ,        
EMPLID         ,        
EMPL_RCD       ,        
GEX_EMPLID     ,        
FIRST_NAME     ,        
LAST_NAME      ,        
MIDDLE_INITIAL,         
ADDRESS1       ,        
ADDRESS2       ,        
CITY           ,        
STATE          ,        
ZIP            ,        
JOBCODE        ,        
JOBCODE_DESCR  ,        
EMAILID        ,        
GEX_LIC_STATE  ,        
DEPTID                  
)
VALUES
(
#seqno	             ,
$TERM_DATE           ,                
''	             ,
$GEX_EMPLID    	     ,
$GEX_EMPLID    	     ,
$EMPLID              ,
#EMPL_RCD            ,
$GEX_EMPLID          ,
$FIRST_NAME          ,
$LAST_NAME           ,
nvl($MIDDLE_NAME,' '),
nvl($ADDRESS1,' ')   ,
nvl($ADDRESS2,' ')   , 
nvl($CITY,' ')       , 
nvl($STATE,' ')      , 
nvl($POSTAL,' ')     , 
nvl($JOBCODE, ' ')   ,
nvl($JT.DESCR, ' ')  ,
''	             ,
''                   ,
nvl($DEPTID, ' ')
)

 END-SQL
 
 let #recs_loaded = #recs_loaded + 1    
 let  #seqno = #seqno + 1

End-Procedure





!****************************************************************************
!This procedure takes the database format date and gives back date in 
!mm/dd/yyyy and yyyymmdd formats
!****************************************************************************

Begin-procedure get-string-date($date, :$str_date_mdy, :$str_Date_ymd)

 Do format-datetime($date,$str_date_mdy,{DEFMDY},'','')

 let $date_dd_mm = substr($str_Date_mdy,1,2)
 !let $date_dd_yyyy = substr($str_Date_mdy,7,2)    JNB 08/13/1999
 let $date_dd_yyyy = substr($date,8,4)            !JNB 08/13/1999 
 let $date_dd_dd = substr($str_date_mdy,4,2)
  !display '$date_dd_yyyy ' noline                  JNB 08/13/1999
  !display $date_dd_yyyy                            JNB 08/13/1999
  !do MakeYear4Digits($date_Dd_yyyy)                JNB 08/13/1999
 let $str_Date_mdy = $date_dd_mm||'/'||$date_dd_dd||'/'||$date_dd_yyyy
  !do format-datetime($date,$str_date_ymd,{DEFCMP},'','')
 let $str_Date_ymd = $date_dd_yyyy||$date_dd_mm||$date_dd_dd
End-procedure

!********************************************************************
!This procedure prefixes the string values with zeros as the CCS 
!format of base rate and alternate rate needs to be
!********************************************************************

Begin-procedure prefix_zeros($string,:$string_prefix)

 UNSTRING $string BY '.' INTO $string_int $string_after_Dec
 move 0 to #string_int_len

 let #string_int_len = length($string_int)

 while #string_int_len < 5
   let $string_prefix = '0'||$string_int
   move $string_prefix to $string_int
   add 1 to #string_int_len
 end-while

 move $string_int to $string_prefix

 let $string_after_Dec2 = substr($string_After_Dec,1,2)
 let $string_prefix = $string_prefix||'.'||$string_after_dec2

End-procedure

!********************************************************************
!This procedure takes a numeric value with no decimals and prefixes
!it with zeros.
!********************************************************************

Begin-procedure prefix_zeros_no_Dec($string_no_Dec,:$string_prefix_no_dec)
 move 0 to #string_int_len
 let #string_int_len = length($string_no_Dec)

 While #string_int_len < 4
  let $string_prefix_no_Dec = '0'||$string_no_Dec
  move $string_prefix_no_Dec to $string_no_Dec
  add 1 to #string_int_len
 End-while
 
 move $string_no_Dec to $string_prefix_no_Dec
 
End-procedure

!******************************************************************
begin-procedure Find-Changes
!Find changes from PS_GEX_CEC_NEW and PS_GEX_CEC_OLD Tables and Insert into 
! PS_GEX_CEC_CHG Table and Write a dat file out of it.
!******************************************************************
 #debug9  show 'ENTERED INTO  Find-Changes'
   

   
begin-sql on-error=sql-error-found('Find-Changes')
INSERT INTO PS_GEX_CEC_CHG
(SELECT
#seqno, 
 NEW1.TERMINATION_DT,        
 NEW1.COMPANYID,              
 NEW1.USERMAPNAME,            
 NEW1.PASSWORD,               
 NEW1.EMPLID,                 
 NEW1.EMPL_RCD,      
 NEW1.GEX_EMPLID,         
 NEW1.FIRST_NAME,             
 NEW1.LAST_NAME,              
 NEW1.MIDDLE_INITIAL,         
 NEW1.ADDRESS1,               
 NEW1.ADDRESS2,               
 NEW1.CITY,                   
 NEW1.STATE,                  
 NEW1.ZIP,                    
 NEW1.JOBCODE,                
 NEW1.JOBCODE_DESCR,          
 NEW1.EMAILID,                
 NEW1.GEX_LIC_STATE ,         
 NEW1.DEPTID                 
FROM PS_GEX_CEC_NEW NEW1)
 minus
(SELECT 
#seqno,
OLD1.TERMINATION_DT,
 OLD1.COMPANYID,              
 OLD1.USERMAPNAME,            
 OLD1.PASSWORD,               
 OLD1.EMPLID,                 
 OLD1.EMPL_RCD,      
 OLD1.GEX_EMPLID,         
 OLD1.FIRST_NAME,             
 OLD1.LAST_NAME,              
 OLD1.MIDDLE_INITIAL,         
 OLD1.ADDRESS1,               
 OLD1.ADDRESS2,               
 OLD1.CITY,                   
 OLD1.STATE,                  
 OLD1.ZIP,                    
 OLD1.JOBCODE,                
 OLD1.JOBCODE_DESCR,          
 OLD1.EMAILID,                
 OLD1.GEX_LIC_STATE ,         
 OLD1.DEPTID 
FROM PS_GEX_CEC_OLD OLD1)
end-sql

End-procedure

!***********************************************************************************
begin-procedure Open-File1
!***********************************************************************************
  Show 'Open-File1'

   Let $File_Name = 'gexhr605.csv'
   Let $OutFile1  = '{OUTFILE}' || Lower($File_Name)  
     show '$File_Name:' $File_Name
     show '$OutFile1 :' $OutFile1 

!   Let $OutFile1 = 'U:\psoft\working\isdvsrc\gexhr605.csv'  
!   show '$OutFile1 :' $OutFile1 
   
   Open $OutFile1
       As 1
       For-Writing
       Record=500:Vary
       Status=#filestat
       
               
  If #filestat != 0
       show 'Error opening output file.  Program terminating.'
     Stop
  End-If
  
  Move '' To $all_cols
  string 'Row_Num'  'Term_Date'  'Company_Code'  'username'  'password'  'first_name'  'last_name'  'middle_initial'  'address1'  'address2'  'city2'  'state2'  'zip2'  'job_title'  'email'  'lic_state'  'dept_id' by $COMMA  into $all_cols
  Write 1 from $all_cols Status=#filestat

End-Procedure

!***********************************************************************************
begin-procedure Open-File2
!***********************************************************************************
#debug9 Show 'Open-File2'

 !-----------------open file1 -----------------------------
   Let $File_Name2 = 'pharmacy_hierarchy.csv'
   Let $OutFile2 = '{OUTFILE}' || Lower($File_Name2) 
   !Let $OutFile2 = 'U:\psoft\working\isdvsrc\pharmacy_hierarchy.csv'
   show '$filename:' $OutFile2
  
  Open $OutFile2
       As 2
       For-Writing
       Record=255:Vary
       Status=#filestat

  If #filestat != 0
     Show 'Error opening output file.  Program terminating.'
     Stop
  End-If

   Move '' To $all_cols2
    
    string 'Phrmcy No' 'Trty Name' 'Phrmcy Spcl Nme' 'Rgn Nme' 'Div Nme' 'Phrmcy St' by $COMMA  into $all_cols2   
    write 2 from $all_cols2 Status=#filestat	

  
End-Procedure

!******************************************************************
begin-procedure Write-File1
!******************************************************************
 #debug9  show 'ENTERED INTO  Write-File1'
 
 Let #seq_number =1
 
begin-select ON-ERROR=SQL-Error-Found('Write-File1')
CHG1.TERMINATION_DT
CHG1.COMPANYID              
CHG1.USERMAPNAME            
CHG1.PASSWORD               
CHG1.GEX_EMPLID
CHG1.FIRST_NAME            
CHG1.LAST_NAME              
CHG1.MIDDLE_INITIAL         
CHG1.ADDRESS1               
CHG1.ADDRESS2               
CHG1.CITY                   
CHG1.STATE                  
CHG1.ZIP                    
CHG1.JOBCODE                
CHG1.JOBCODE_DESCR          
CHG1.EMAILID               
CHG1.GEX_LIC_STATE          
CHG1.DEPTID

!   Let $Phrmcy_Deptid = &CHG1.DEPTID

    
  Let $CHG1.TERMINATION_DT =        LTRIM(RTRIM(&CHG1.TERMINATION_DT, ' '), ' ') 
  Let $CHG1.COMPANYID      =        LTRIM(RTRIM(&CHG1.COMPANYID, ' '), ' ')               
  Let $CHG1.USERMAPNAME    =        LTRIM(RTRIM(&CHG1.USERMAPNAME, ' '), ' ')             
  Let $CHG1.PASSWORD       =        LTRIM(RTRIM(&CHG1.PASSWORD, ' '), ' ')                
    
  Let $CHG1.GEX_EMPLID     =        LTRIM(RTRIM(&CHG1.GEX_EMPLID, ' '), ' ')         
  
  Let $CHG1.FIRST_NAME     =        LTRIM(RTRIM(&CHG1.FIRST_NAME, ' '), ' ')             
  Let $CHG1.LAST_NAME      =        LTRIM(RTRIM(&CHG1.LAST_NAME, ' '), ' ')               
  Let $CHG1.MIDDLE_INITIAL =        LTRIM(RTRIM(&CHG1.MIDDLE_INITIAL, ' '), ' ')          
  
  Let $CHG1.ADDRESS1       =        LTRIM(RTRIM(&CHG1.ADDRESS1, ' '), ' ')                
  Let $CHG1.ADDRESS2       =        LTRIM(RTRIM(&CHG1.ADDRESS2, ' '), ' ')                
  Let $CHG1.CITY           =        LTRIM(RTRIM(&CHG1.CITY, ' '), ' ')                    
  Let $CHG1.STATE          =        LTRIM(RTRIM(&CHG1.STATE, ' '), ' ')                   
  Let $CHG1.ZIP            =        LTRIM(RTRIM(&CHG1.ZIP, ' '), ' ')                     
  
  Let $CHG1.JOBCODE        =        LTRIM(RTRIM(&CHG1.JOBCODE, ' '), ' ')    
               
  Let $CHG1.JOBCODE_DESCR  =        LTRIM(RTRIM(&CHG1.JOBCODE_DESCR, ' '), ' ')           
  
  Let $CHG1.EMAILID        =        LTRIM(RTRIM(&CHG1.EMAILID, ' '), ' ')                
  Let $CHG1.GEX_LIC_STATE  =        LTRIM(RTRIM(&CHG1.GEX_LIC_STATE, ' '), ' ')  
 
  Let $CHG1.DEPTID         =        LTRIM(RTRIM(&CHG1.DEPTID, ' '), ' ')   
  
  move  #CHG1.EMPL_RCD to $CHG1EMPL_RCD 9
  
    #debug7 show '*************************************'
    #debug7 show '$CHG1EMPL_RCD:' $CHG1EMPL_RCD 
   
                                         
  
    #debug7 show 'database &CHG1.TERMINATION_DT:' &CHG1.TERMINATION_DT 
  
  Do get-string-date(&CHG1.TERMINATION_DT, $term_Dt_Str, $term_date_ymd)    
    

      #debug7 show '$term_Dt_Str :' $term_Dt_Str
  
    If #seq_number < 10
        move  #seq_number to $seq_number 9
           #debug7 show '$seq_number9:' $seq_number 
    End-if        
    If ( #seq_number > 9 and #seq_number <99)
        move  #seq_number to $seq_number 99
          #debug7 show '$seq_number99:' $seq_number 
    End-if        
    
    If ( #seq_number > 99 and #seq_number <999)
        move  #seq_number to $seq_number 999
          #debug7 show '$seq_number999:' $seq_number 
    End-if        
    
    If ( #seq_number > 999 and #seq_number <9999)
        move  #seq_number to $seq_number 9999
          #debug7 show '$seq_number9999:' $seq_number 
    End-if        
     
 !     move  #seq_number to $seq_number 0999 
        	 
     
      #debug7 show '$seq_number_modified :' $seq_number 


!---------------------------------------------    

    If $term_Dt_Str = '//'
    !If $CHG1.TERMINATION_DT   = ''
      Let $CHG1.TERMINATION_DT =''    
    Else
     Let $CHG1.TERMINATION_DT  =  $quote1||$term_Dt_Str||$quote2 
    End-If
  
      #debug7 show '$CHG1.TERMINATION_DT  :' $CHG1.TERMINATION_DT  
!---------------------------------------------        
      
    If $CHG1.COMPANYID   = ''
      Let $CHG1.COMPANYID = ''    
     Else
      Let $CHG1.COMPANYID  =  $quote1||$CHG1.COMPANYID||$quote2 	
    End-If
    
    
!------------------------------------------------

    Let $CHG1.GEX_EMPLID     =        $quote1||$CHG1.GEX_EMPLID||$quote2 
   
    Let $CHG1.FIRST_NAME      =        $quote1||$CHG1.FIRST_NAME||$quote2  
    Let $CHG1.LAST_NAME       =        $quote1||$CHG1.LAST_NAME||$quote2  

!---------------------------------------------        
    If $CHG1.MIDDLE_INITIAL    = ' ' or $CHG1.MIDDLE_INITIAL =''
        #debug7 show '$CHG1.MIDDLE_INITIAL is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.MIDDLE_INITIAL = ''    
    Else
      Let $CHG1.MIDDLE_INITIAL  =        $quote1||$CHG1.MIDDLE_INITIAL||$quote2  
    End-If
!---------------------------------------------        
    
    
    If $CHG1.ADDRESS1     = ' ' or $CHG1.ADDRESS1 =''
       #debug7 show '$CHG1.ADDRESS1 is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.ADDRESS1  = ''    
    Else
      Let $CHG1.ADDRESS1        =        $quote1||$CHG1.ADDRESS1||$quote2  
    End-If
    
    If $CHG1.ADDRESS2     = ' ' or $CHG1.ADDRESS2 =''
       #debug7 show '$CHG1.ADDRESS2 is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.ADDRESS2  = ''    
    Else
     Let $CHG1.ADDRESS2        =        $quote1||$CHG1.ADDRESS2||$quote2  
    End-If
    
    
    If $CHG1.CITY      = ' ' or $CHG1.CITY  =''
       #debug7 show '$CHG1.CITY  is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.CITY   = ''    
    Else
        Let $CHG1.CITY            =        $quote1||$CHG1.CITY||$quote2  
    End-If
    
    
    If $CHG1.STATE     = ' ' or $CHG1.STATE =''
       #debug7 show '$CHG1.STATE is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.STATE  = ''    
    Else
       Let $CHG1.STATE           =        $quote1||$CHG1.STATE||$quote2  
    End-If
    
    
    If $CHG1.ZIP     = ' ' or $CHG1.ZIP = ''
        #debug7 show '$CHG1.ZIP is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.ZIP  = ''    
    Else
      Let $CHG1.ZIP             =        $quote1||$CHG1.ZIP||$quote2  
    End-If 
!---------------------------------------------    
   
      !#debug7 show '$CHG1.JOBCODE_DESCR 1: ' $CHG1.JOBCODE_DESCR   
    
    If $CHG1.JOBCODE_DESCR     = ' ' or $CHG1.JOBCODE_DESCR =''
       #debug7 show '$CHG1.JOBCODE_DESCR is empty for EMPLID:' $CHG1.EMPLID
      Let $CHG1.JOBCODE_DESCR  =''    
    Else
      Let $CHG1.JOBCODE_DESCR   =        $quote1||$CHG1.JOBCODE_DESCR||$quote2  
    End-If
    
      !#debug7 show '$CHG1.JOBCODE_DESCR 2: ' $CHG1.JOBCODE_DESCR   
    
!---------------------------------------------        
   If $CHG1.EMAILID     = ''
      Let $CHG1.EMAILID  = ''    
    Else
      Let $CHG1.EMAILID  =        $quote1||$CHG1.EMAILID||$quote2  
    End-If
!---------------------------------------------          
    If $CHG1.GEX_LIC_STATE     = ''
      Let $CHG1.GEX_LIC_STATE  =''    
    Else
     Let $CHG1.GEX_LIC_STATE   =  $quote1||$CHG1.GEX_LIC_STATE||$quote2 
    End-If
!---------------------------------------------        
    If $CHG1.TERMINATION_DT   = ''
      Let $CHG1.TERMINATION_DT  =''    
    Else
     Let $CHG1.TERMINATION_DT  =  $quote1||$term_Dt_Str||$quote2 
    End-If
!---------------------------------------------    
 
    If $CHG1.DEPTID    = ''
      #debug7 show '$CHG1.DEPTID is empty for EMPLID:' $CHG1.GEX_EMPLID
      Let $CHG1.DEPTID = ''    
    Else
      Let $CHG1.DEPTID =    $quote1||$CHG1.DEPTID||$quote2
    End-If
!---------------------------------------------      
  
 show '$seq_number          :'  $seq_number          
 show '$CHG1.TERMINATION_DT :'   $CHG1.TERMINATION_DT 
 show '$CHG1.COMPANYID      :'   $CHG1.COMPANYID      
 show '$CHG1.GEX_EMPLID     :'   $CHG1.GEX_EMPLID     
 show '$CHG1.GEX_EMPLID     :'   $CHG1.GEX_EMPLID     
 show '$CHG1.FIRST_NAME     :'   $CHG1.FIRST_NAME     
 show '$CHG1.LAST_NAME      :'   $CHG1.LAST_NAME      
 show '$CHG1.MIDDLE_INITIAL :'   $CHG1.MIDDLE_INITIAL 
 show '$CHG1.ADDRESS1       :'   $CHG1.ADDRESS1       
 show '$CHG1.ADDRESS2       :'   $CHG1.ADDRESS2       
 show '$CHG1.CITY           :'   $CHG1.CITY           
 show '$CHG1.STATE          :'   $CHG1.STATE          
 show '$CHG1.ZIP            :'   $CHG1.ZIP            
 show '$CHG1.JOBCODE_DESCR  :'   $CHG1.JOBCODE_DESCR  
 show '$CHG1.EMAILID        :'   $CHG1.EMAILID        
 show '$CHG1.GEX_LIC_STATE  :'   $CHG1.GEX_LIC_STATE  
 show '$CHG1.DEPTID         :'   $CHG1.DEPTID         
                            
                            
                            

     Move '' To $all_cols
     
     		
     string  $seq_number 
     	     $CHG1.TERMINATION_DT 
     	     $CHG1.COMPANYID 
     	     $CHG1.GEX_EMPLID   
     	     $CHG1.GEX_EMPLID
     	     $CHG1.FIRST_NAME 
     	     $CHG1.LAST_NAME  
     	     $CHG1.MIDDLE_INITIAL 
     	     $CHG1.ADDRESS1 
     	     $CHG1.ADDRESS2 
     	     $CHG1.CITY 
     	     $CHG1.STATE 
     	     $CHG1.ZIP 
     	     $CHG1.JOBCODE_DESCR  		
     	     $CHG1.EMAILID        		
     	     $CHG1.GEX_LIC_STATE  		
     	     $CHG1.DEPTID         		 
     	     by $COMMA  into $all_cols
     
       #debug7 show '$all_cols:' $all_cols
     write 1 from $all_cols Status=#filestat

  Add 1 To #recs-written

  If #filestat <> 0
       #debug8 show 'Error writing output file.  Program terminating.'
     Stop
  End-If
  
    #debug7 show 'Row Inserted:.  ' #seq_number 
  Let #seq_number = #seq_number + 1 
    #debug7 show 'Added new seq_number: ' #seq_number 
    #debug8 show '*************************************'
  
FROM PS_GEX_CEC_CHG CHG1
End-select

   

end-procedure




!******************************************************************
Begin-procedure Write-File2
!******************************************************************
 #debug9  show 'ENTERED INTO  Write-File2'

!!---------------------------------------------      
!  If  #ST.CUS_ACT_NO < 10
!   Do Format-Number(#ST.CUS_ACT_NO, $ST.CUS_ACT_NO, '9')
!   Let $ST.CUS_ACT_NO = '000'||$ST.CUS_ACT_NO
!  Else
!    If (  #ST.CUS_ACT_NO > 9 and   #ST.CUS_ACT_NO < 99 )
!      Do Format-Number(#ST.CUS_ACT_NO, $ST.CUS_ACT_NO, '99')
!      Let $ST.CUS_ACT_NO = '00'||$ST.CUS_ACT_NO
!    Else
!   
!       If (  #ST.CUS_ACT_NO > 99 and   #ST.CUS_ACT_NO < 999 )
!         Do Format-Number(#ST.CUS_ACT_NO, $ST.CUS_ACT_NO, '999')
!         Let $ST.CUS_ACT_NO = '0'||$ST.CUS_ACT_NO
!       Else
!         If (  #ST.CUS_ACT_NO > 999 and   #ST.CUS_ACT_NO < 10000 )
!          Do Format-Number(#ST.CUS_ACT_NO, $ST.CUS_ACT_NO, '9999')   
!!         Else
!!   
!!           If (  #ST.CUS_ACT_NO > 9999 and   #ST.CUS_ACT_NO < 99999 )
!!            SHOW ' ENT..LAST'
!!            Do Format-Number(#ST.CUS_ACT_NO, $ST.CUS_ACT_NO, '99999')   
!!           End-If	 
!         End-If
!       End-If     
!    End-If   
!  End-If
!  
!!---------------------------------------------        
!    If $ST.CUS_ACT_NO    = ''
!      Let $ST.CUS_ACT_NO = ''    
!    Else
!      Let $ST.CUS_ACT_NO =    $quote1||$ST.CUS_ACT_NO||$quote2
!    End-If
!!---------------------------------------------      

    If $Phrmcy_Deptid    = ''
      Let $Phrmcy_Deptid = ''    
    Else
      Let $Phrmcy_Deptid =    $quote1||$Phrmcy_Deptid||$quote2
    End-If




  

    If $TR.TRTY_NME   = ''
      Let $TR.TRTY_NME= ''    
    Else
      Let $TR.TRTY_NME =    $quote1||$TR.TRTY_NME||$quote2
    End-If
!---------------------------------------------        
    If $PHRMCY_SPCL_NME  = ''
      Let $PHRMCY_SPCL_NME= ''    
    Else
      Let $PHRMCY_SPCL_NME =    $quote1||$PHRMCY_SPCL_NME||$quote2
    End-If
!---------------------------------------------    
    
    If $REG.RGN_NME  = ''
      Let $REG.RGN_NME= ''    
    Else
      Let $REG.RGN_NME =    $quote1||$REG.RGN_NME||$quote2
    End-If
!---------------------------------------------        
    If $REG.DIV_CD  = ''
      Let $REG.DIV_CD= ''    
    Else
      Let $REG.DIV_CD =    $quote1||$REG.DIV_CD||$quote2
    End-If
!---------------------------------------------        
    If $ST.STR_ST   = ''
      Let $ST.STR_ST = ''    
    Else
      Let $ST.STR_ST  =    $quote1||$ST.STR_ST ||$quote2
    End-If
    
!---------------------------------------------      

     Move '' To $all_cols2
     string  !$ST.CUS_ACT_NO
     	     $Phrmcy_Deptid
     	     $TR.TRTY_NME  
     	     $PHRMCY_SPCL_NME                
     	     $REG.RGN_NME  	
     	     $REG.DIV_CD  
     	     $ST.STR_ST      
     	     by $COMMA  into $all_cols2
     
       #debug7 show '$all_cols2:' $all_cols2
     write 2 from $all_cols2 Status=#filestat

  Add 1 To #recs-written2

 !let $ST.CUS_ACT_NO    = ''
 let $Phrmcy_Deptid  = ''
 let $TR.TRTY_NME      = ''
 let $PHRMCY_SPCL_NME  = '' 
 let $REG.RGN_NME      = ''
 let $REG.DIV_CD       = ''
 let $ST.STR_ST        = ''

  If #filestat <> 0
       #debug8 show 'Error writing output file2.  Program terminating.'
     Stop
  End-If
   
 
End-Procedure 

!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
!*********************************************************************
  do error-found
  
    show 'SQL Error in >' 
    show $Proc_Name   
    show $_sql-error 
    show 'sql-status:' 
    show #_sql-status 
    show '----------------'

end-procedure

!*********************************************************************
!This procedure displays the error message for the records that are in
!progress
!*********************************************************************
begin-procedure Error-Found
!*********************************************************************
 show 'Entered into Error-Found'
  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
    show '----------------'
    show $out 
    show '$EmplID :' $EmplID 

 
end-procedure

!*********************************************************************

begin-procedure Alter-Session
  show 'Alter-Session'
begin-sql
  ALTER SESSION SET GLOBAL_NAMES = TRUE 
end-sql
end-procedure

!*********************************************************************
begin-procedure Pharmacy-File
!******************************************************************
 #debug9  show 'ENTERED INTO  Pharmacy-File'
 
 Let #seq_number_Pharmacy =1
 
begin-select DISTINCT ON-ERROR=SQL-Error-Found('Pharmacy-File')
PHM.DEPTID

   Let $Phrmcy_Deptid = &PHM.DEPTID
    
   Do Get-Div-Terr-State 
   Do Write-File2    
FROM PS_GEX_CEC_CHG PHM
ORDER BY PHM.DEPTID 
End-select
end-procedure   
  
!********************************************************************
begin-procedure Get-Div-Terr-State
!********************************************************************
  #debug9 show 'Entered into Get-Div-Terr-State'
  !#debug8 show '$DEPTID 	 :' $DEPTID
  #debug8 show '$Phrmcy_Deptid :' $Phrmcy_Deptid 
  
  
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND('Get-Div-Terr-State')
PH.PHRMCY_NO
PH.STR_ID

  
  Let $PH.PHRMCY_NO =   &PH.PHRMCY_NO 
  Let $PH.STR_ID    =   &PH.STR_ID    
 
  Do Get-Store-Info

FROM GE_PHARMACY PH WHERE PH.PHRMCY_NO = $Phrmcy_Deptid  
END-SELECT
End-Procedure


!********************************************************************
begin-procedure Get-Store-Info
!********************************************************************
  #debug9 show 'Entered into Get-Store-Info'
   
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND('Get-Store-Info')
ST.STR_ID
!ST.CUS_ACT_NO
ST.TRTY_ID 
ST.STR_ST 
ST.RGN_ID
A1.PHRMCY_SPCL_ID

    ! #debug7 show 'ST.CUS_ACT_NO   :' &ST.CUS_ACT_NO  
     #debug7 show 'ST.ST.STR_ID     :' &ST.STR_ID         ! STR_ID 
     #debug7 show 'ST.TRTY_ID       :' &ST.TRTY_ID
     #debug7 show 'ST.STR_ST        :' &ST.STR_ST 
     #debug7 show 'ST.RGN_ID        :' &ST.RGN_ID 
     #debug7 show 'A1.PHRMCY_SPCL_ID:' &A1.PHRMCY_SPCL_ID   !Phm.Specialist ID
     
    
!    Let $ST.CUS_ACT_NO  = &ST.CUS_ACT_NO  !Pharmacy No 
!    Let #ST.CUS_ACT_NO  = &ST.CUS_ACT_NO  !Pharmacy No 
!    
!     SHOW '&ST.CUS_ACT_NO  >' &ST.CUS_ACT_NO  
!     SHOW '$ST.CUS_ACT_NO  >' $ST.CUS_ACT_NO  
!     SHOW '#ST.CUS_ACT_NO  >' #ST.CUS_ACT_NO  
!     
    Let $ST.TRTY_ID         = &ST.TRTY_ID        !Terriroty ID
    Let $ST.STR_ST          = &ST.STR_ST         !STATE
    Let $ST.RGN_ID          = &ST.RGN_ID         !Region ID
    Let $A1.PHRMCY_SPCL_ID  = &A1.PHRMCY_SPCL_ID !Pharmacy Specialist ID 
    
 Do Get-Phrmcy-Spcl-Nme
 Do Get-Territory    
 Do Get-Region
 
FROM  GE_STORE ST  , GE_PHARMACY A1        
WHERE ST.STR_ID   = $PH.STR_ID
AND A1.PHRMCY_NO = $Phrmcy_Deptid
END-SELECT
End-Procedure


!********************************************************************
begin-procedure  Get-Phrmcy-Spcl-Nme
!********************************************************************
  #debug9 show 'Entered into  Get-Phrmcy-Spcl-Nme'
  #debug8 show '$A1.PHRMCY_SPCL_ID  :' $A1.PHRMCY_SPCL_ID 
  
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND(' Get-Phrmcy-Spcl-Nme')
PS.PHRMCY_SPCL_LST_NME 
PS.PHRMCY_SPCL_FST_NME 

     #debug7 show 'Last Name :'  &PS.PHRMCY_SPCL_LST_NME
     #debug7 show 'First Name :' &PS.PHRMCY_SPCL_FST_NME
     
    Let $PHRMCY_SPCL_NME   = &PS.PHRMCY_SPCL_LST_NME || ',' || &PS.PHRMCY_SPCL_FST_NME ! Pharmacy Spcl Name
    
    show '$PHRMCY_SPCL_NME   :' $PHRMCY_SPCL_NME   
    
FROM  PHARMACY_SPECIALIST PS
WHERE PS.PHRMCY_SPCL_ID = $A1.PHRMCY_SPCL_ID
END-SELECT
End-Procedure 

!********************************************************************
begin-procedure Get-Territory
!********************************************************************
  #debug9 show 'Entered into Get-Territory'
  #debug8 show '$ST.TRTY_ID  :' $ST.TRTY_ID 
  
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND('Get-Territory')
TR.TRTY_NME 
  
    #debug7 show 'TR.TRTY_NME :' &TR.TRTY_NME 
    Let $TR.TRTY_NME  = &TR.TRTY_NME          !Territory Name
    
FROM  GE_TERRITORY TR  WHERE TR.TRTY_ID = $ST.TRTY_ID           
END-SELECT
End-Procedure 

!********************************************************************
begin-procedure Get-Region
!********************************************************************
  #debug9 show 'Entered into Get-Region'
  #debug8 show '$ST.RGN_ID :' $ST.RGN_ID 
 
BEGIN-SELECT DISTINCT ON-ERROR=SQL-ERROR-FOUND('Get-Region')
REG.DIV_CD 
REG.RGN_NME			  
  
    #debug7 show 'REG.DIV_CD  :' &REG.DIV_CD 
    Let $REG.DIV_CD   = &REG.DIV_CD 
    
    Evaluate  $REG.DIV_CD		
      when ='COD'
       Let $REG.DIV_CD ='Cleveland'	 !Translated Division - Div Name
       break
      when ='MOD'
       Let $REG.DIV_CD ='Maryland'	 !Translated Division - Div Name
       break
      
      when ='POD'
       Let $REG.DIV_CD ='Pittsburgh'	 !Translated Division - Div Name
       break
      
      when ='COL'
       Let $REG.DIV_CD ='Columbus'	 !Translated Division - Div Name
       break       
      
      when-other
       Let $REG.DIV_CD   = &REG.DIV_CD 	 !Translated Division - Div Name
       break
     
    End-Evaluate
    
    Let $REG.RGN_NME  = &REG.RGN_NME	 !Region Name
    
     show '$REG.DIV_CD :' $REG.DIV_CD 
     show '$REG.RGN_NME:' $REG.RGN_NME
 
!   Do Write-File2    
 
FROM  GE_REGION REG WHERE REG.RGN_ID = $ST.RGN_ID          
END-SELECT

End-Procedure 

!*********************************************************************************** 
#Include 'gexxx902.sqc'  !Get deptid multiple row table
#Include 'gexxx922.sqc'  !Get pay single row run control
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx901.sqc'  !Get company paygroup multiple row table
#include 'gexxx916.sqc'  !Get jobcode multiple row table
#Include 'gexxx951.sqc'  !Get Oracle instance
#Include 'askaod.sqc'    !Ask-As-Of-Date routine
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'gexxx971.sqc'  !Email and FTP Parameters   ! CWB 04/05/2004
#Include 'getposnm.sqc'   ! get position data title description !Vendkxy Added for ITG 60299