!***********************************************************************
! GEXPYDED:  Deduction Load                                            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 2001-2004 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXPYDED :            Deduction Load Process                         *
!                                                                      *
! Narrative:            This SQR is designed to read a text file       *
!                       containing deduction amounts from the Benefits *
!                       department.                                    *
!                                                                      *
!                       Input File Specs:                              *
!                       1) Remove extra columns from spreadsheet       *
!                       2) Column A should be left-justified, have a   *
!                          width of 10, and contain the emplid.        *
!                       3) Column B should be left-justified, have a   *
!                          width of 5, and contain the deptid.         *
!                       4) Column C should be have a width of 9 and    *
!                          contain the bonus amt.                      *
!                                                                      *
! SQL Tables:           ps_GENL_DEDUCTION                              *
!                       ps_GENL_DED_CD                                 *
!                                                                      *
! Written by:           Carey Alton Jr                                 *
!                       Tony Labra                                     *
!                                                                      *
! Normally Run:         On Demand                                      *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                         None                                         *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS  DATE        DESCRIPTION OF THE CHANGE                      *
!***********************************************************************
!                                                                      * 
! CXA/AXL   09/10/2004  Initial Creation                               *
!                                                                      * 
! CWB       02/21/2005  CSR #10797 - Add fields to run control.        *
! CXA       03/04/2005  CSR #10797 - Add filed to input record.        *
!                                                                      * 
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup01.sqc'

!*****************************************************************
begin-report
!*****************************************************************
  do Init-DateTime
  do Init-Number
  Do Get-Current-DateTime    !curdttim.sqc
  do Init-Report
  do Open-Files
  do Process-Data
  do End-of-Job-Routine
  do Stdapi-Term

end-report

!*****************************************************************
begin-procedure Init-Report
!*****************************************************************

  let $ReportID = 'GEXPYDED'
  let $ReportTitle = 'Deduction Load'

  display $ReportID noline
  display ' - '     noline
  display $ReportTitle
  do Stdapi-Init

  date-time () hh:mi:ss &TimeBegan
  date-time () MM/DD/YYYY  &DateBegan
  show 'Report Began at ' &TimeBegan ' on '  &DateBegan

  Let $AsOfDate = $AsOfToday
  do get-date-codes
  
  if $prcs_process_instance = ''
     !display 'Need to run this program thru process scheduler'
     !stop
  else

     do GEXXX922-Select-Parameters
     let $select_file  = lower($GEX_RC_PAY.GEX_FILE_LOCATION)
     let $select_dedcd = $GEX_RC_PAY.DEDCD
     let $effdt        = $GEX_RC_PAY.ASOFDATE
     let $output_file  = $GEX_RC_PAY.Variation_Reason
     let $ded_calc     = $GEX_RC_PAY.DED_CALC           ! CWB 02/21/2005
     let $ded_end_dt   = $GEX_RC_PAY.DEDUCTION_END_DT   ! CWB 02/21/2005

     show 'dedcd:     ' $select_dedcd
     show 'ded calc:  ' $ded_calc
     show 'effdt:     ' $effdt
     show 'end dt:    ' $ded_end_dt
!##########################################################################
  end-if

end-procedure

!*****************************************************************
begin-procedure Open-Files
!*****************************************************************

  open $select_file as 1 for-reading
!     record=43:vary                  ! CXA 03/04/2005
     record=53:vary                   ! CXA 03/04/2005
     status=#open1
  if #open1 = -1
     display 'Open failed for file <' noline
     display $select_file noline
     display '>'
     stop 
  end-if

  !let $filenm= '{OUTFILE}' || lower($ReportId) || '.lis'
  let $filenm = $output_file
  open $filenm as 10 for-writing
      record=150:fixed
      status=#open10
  if #open10 = -1
     display 'Open failed for file <' noline
     display $filenm noline
     display '>'
     stop
  end-if
  
  write 10 from $ReportTitle
  write 10 from ' '
  write 10 from $ReportID
  write 10 from ' '
  write 10 from 'Update Began:' $ReportDate ' ' $ReportTime
  write 10 from ' '
  write 10 from ' '
  write 10 from 'FIELD':15     'REASON':40
  write 10 from '---------':15 '-------------------------':40 

end-procedure

!********************************************************************
begin-procedure End-of-Job-Routine
!********************************************************************
     
      Let $missing_emplid     = to_char(#missing_emplid)
      Let $missing_company    = to_char(#missing_company)
      Let $missing_deduction  = to_char(#missing_deduction)
      Let $missing_goal_amt   = to_char(#missing_goal_amt)
      Let $missing_goal_bal   = to_char(#missing_goal_bal)
 
      Let $invalid_emplid = to_char(#invalid_emplid)
      let $invalid_company  = to_char(#invalid_company)

      Let $not_updated    = to_char(#not_updated)

      Let #error_nbr = #missing_emplid + #missing_company + #missing_deduction +
                       #missing_goal_amt + #missing_goal_bal + 
                       #not_updated + #invalid_emplid + #invalid_company

      Let $error_nbr = to_char(#error_nbr)

      Let $record_count = to_char(#record_count)
      Let $invalid_recs = to_char(#invalid_recs)
      Let $update_count = to_char(#update_count)
      Let $insert_count = to_char(#insert_count)

      write 10 from ' '
      write 10 from 'ERROR SUMMARY INFORMATION'
      write 10 from ' '
      write 10 from ' '
      write 10 from 'Records processed: ' $record_count
      write 10 from ' Total errors    : ' $error_nbr
      write 10 from ' '
      write 10 from 'Total Errors Breakdown'
      write 10 from ' Blank EMPLID               : ' $missing_emplid
      write 10 from ' Invalid EMPLID             : ' $invalid_emplid
      write 10 from ' '
      write 10 from ' Blank Cmpy                 : ' $missing_company
      write 10 from ' Invalid Cmpy               : ' $invalid_company
      write 10 from ' '
      write 10 from 'SQL REVIEW'
      write 10 from ' '
      write 10 from 'Valid records updated       : ' $Update_count
      write 10 from 'Valid records inserted      : ' $insert_count
      write 10 from ' '
      write 10 from 'Deduction Load Ended:' $ReportDate ' ' $ReportTime
      
      close 1
      close 10

      date-time () HH:MI:SS &timeEnded
      date-time () MM/DD/YYYY &dateEnded
      show 'Report Ended at ' &timeEnded ' on ' &dateEnded

end-procedure

!*********************************************************************
begin-procedure Process-Data
!*********************************************************************

   while 1
    read 1 into $EMPLID:9		!1 - 9
                $filler:1		!10
                $COMPANY:3		!11 - 13
                $filler:1		!14
                $DEDUCTION_AMT:9	!15 - 23
                $filler:1		!24
                $GOAL_AMT:9		!25 - 33
                $filler:1		!34
                $GOAL_BAL:9		!35 - 43
                $filler:1		!44         ! CXA 03/04/2005
                $DED_RATE:9		!45 - 53    ! CXA 03/04/2005 
                
    if #end-file                ! Check for EOF in Input Data File
       break
    end-if

    show 'EMPLID ' $EMPLID ' COMPANY ' $COMPANY ' DEDUCTION_AMT ' $DEDUCTION_AMT 
         ' GOAL_AMT ' $GOAL_AMT ' GOAL_BAL ' $GOAL_BAL 'DEDUCTION RATE ' $DED_RATE

    Let #DEDUCTION_AMT = to_number($DEDUCTION_AMT)
    Let #GOAL_AMT      = to_number($GOAL_AMT)
    Let #GOAL_BAL      = to_number($GOAL_BAL)
    Let #DED_RATE      = to_number($DED_RATE)       ! CXA 03/04/2005
  
    Let #Record_count = #Record_count + 1
    let #temp_count = #temp_count + 1
    if #temp_count = 1000
       display #Record_count 999,999,999 noline
       display ' rows processed'
       let #temp_count = 0
    end-if
    Let $Record_error = 'N'

    !** Check required fields = nulls, write to conversion report 
    If isblank($EMPLID) = 1
       let $temp_cnt = to_char(#Record_count)
       let $Error_Field = 'Emplid'
       let $Reason = 'Is null for record # '     
       let $Reason = $Reason  || $temp_cnt
       do Print-error($Error_Field,$Reason)
       let #missing_emplid = #missing_emplid + 1
       let $Record_error = 'Y'
    else
       let $employee_exists = 'N'
       do Verify-Personal-Data
          if $employee_exists = 'N'  
             let $Error_Field = $emplid          
             let $Reason = 'Invalid Emplid in Psoft'
             do Print-error($Error_Field,$Reason)
             let #invalid_emplid = #invalid_emplid + 1
             let $Record_error = 'Y'
          else
            If isblank($company) = 1
               let $temp_cnt = to_char(#Record_count)
               let $Error_Field = 'Company'
               let $Reason = 'Is null for record # '     
               let $Reason = $Reason  || $temp_cnt
               do Print-error($Error_Field,$Reason)
               let #missing_company = #missing_company + 1
               let $Record_error = 'Y'
            else
              let $company_exists = 'N'
              do Verify-Company-Employee
              if $company_exists = 'N'  
                let $Error_Field = $company|| ' ' || $emplid          
                let $Reason = 'Invalid Company/Emplid in Psoft'
                do Print-error($Error_Field,$Reason)
                let #invalid_company = #invalid_company + 1
                let $Record_error = 'Y'
              end-if
            end-if
            If isblank($DEDUCTION_AMT) = 1
               let $temp_cnt = to_char(#Record_count)
               let $Error_Field = '#Deduction Amt'
               let $Reason = 'Is null for record # '     
               let $Reason = $Reason  || $temp_cnt
               do Print-error($Error_Field,$Reason)
               let #missing_deduction = #missing_deduction + 1
               let $Record_error = 'Y'
            end-if
            If isblank($GOAL_AMT) = 1
               let $temp_cnt = to_char(#Record_count)
               let $Error_Field = '#Goal Amt'
               let $Reason = 'Is null for record # '     
               let $Reason = $Reason  || $temp_cnt
               do Print-error($Error_Field,$Reason)
               let #missing_goal_amt = #missing_goal_amt + 1
               let $Record_error = 'Y'
            end-if
            If isblank($GOAL_BAL) = 1
               let $temp_cnt = to_char(#Record_count)
               let $Error_Field = '#Goal Bal'
               let $Reason = 'Is null for record # '     
               let $Reason = $Reason  || $temp_cnt
               do Print-error($Error_Field,$Reason)
               let #missing_goal_bal = #missing_goal_bal + 1
               let $Record_error = 'Y'
            end-if
          end-if
    end-if

    !** Prep for load                            
    If $Record_error = 'N'
      do check-genl-ded-cd
      if $genl_ded_cd_found = 'N'
         do genl-ded-cd-insert  !Load Parent Row if not found
	 if #sql-count > 0 
          Let #insert_count_hdr = #insert_count_hdr + #sql-count
         End-if
      end-if
      
      If #sql-error = 0       
        Do insert-genl-deduction
        if #sql-count > 0 
          Let #insert_count = #insert_count + #sql-count
        End-if
      End-if
    else
       let #invalid_recs = #invalid_recs + 1
    End-if

   End-while

end-procedure

!********************************************************************
begin-procedure Verify-Personal-Data
!********************************************************************
     !show 'emplid before ' $emplid
Begin-Select
PD.Emplid

    let $employee_exists = 'Y'
    !show 'emplid after ' $emplid

From PS_PERSONAL_DATA PD
Where PD.Emplid = $Emplid 

End-Select

end-procedure

!********************************************************************
begin-procedure Verify-Company-Employee
!********************************************************************
Begin-Select
CE.Emplid
CE.Company

    let $company_exists = 'Y'
  
From PS_JOB CE
WHERE CE.EFFDT =
        (SELECT MAX(CE_ED.EFFDT) FROM PS_JOB CE_ED
        WHERE CE.EMPLID = CE_ED.EMPLID
          AND CE.EMPL_RCD = CE_ED.EMPL_RCD
          AND CE_ED.EFFDT <= $asoftoday)
  AND CE.EFFSEQ =
        (SELECT MAX(CE_ES.EFFSEQ) FROM PS_JOB CE_ES
        WHERE CE.EMPLID = CE_ES.EMPLID
          AND CE.EMPL_RCD = CE_ES.EMPL_RCD
          AND CE.EFFDT = CE_ES.EFFDT)
  and CE.Emplid = $Emplid 
  and CE.Company = $Company

End-Select

end-procedure

!********************************************************************
Begin-Procedure Check-Genl-Ded-Cd
!********************************************************************
#debug9 Show 'Check-Genl-Ded-Cd'

let $genl_ded_cd_found = 'N'

begin-select 
'Z'
  let $genl_ded_cd_found = 'Y'

from ps_genl_ded_cd
where emplid =	$Emplid
and dedcd    = $select_dedcd 
and company  = $company
end-select

end-procedure

!********************************************************************
Begin-Procedure Genl-Ded-Cd-Insert
!********************************************************************
#debug9 Show 'Genl-Ded-Cd-Insert'
  Begin-SQL 
    Insert Into ps_genl_ded_cd
	Values ($emplid,
		$select_dedcd,
                $company)
  End-SQL

End-Procedure

!***********************************************************************
begin-procedure insert-genl-deduction
!***********************************************************************
#debug9 Show 'Insert-Genl-Ddeduction'
let $sql-statement = 'INSERT GENL_DEDUCTION'
let $filler = ' '
begin-SQL 
INSERT into PS_GENL_DEDUCTION
               (EMPLID,
		DEDCD,
		EFFDT,
		DED_CALC,
		DEDUCTION_END_DT,
		DED_ADDL_AMT,
		DED_RATE_PCT,
		GOAL_AMT,
		GOAL_BAL,
		LOAN_INT_PCT,
		BAS_TAXABLE_BEN,
		DED_STOPPED,
		LAST_ACTION,
		LAST_UPDATE_DATE,
		COMPANY,
		PROCESS_DEDN,
		GVT_DED_DIST_CD,
		GVT_PYMNT_METHOD,
		GVT_CHK_NAME,
		GVT_ADDRESS1,
		GVT_ADDRESS2,
		GVT_ADDRESS_CITY,
		GVT_ADDRESS_STATE,
		GVT_ADDRESS_ZIP,
		GVT_ADDRESS_CNTRY,
		BANK_CD,
		ACCOUNT_NUM,
		ACCOUNT_TYPE,
		GVT_PAYEE_ID_NO,
		GVT_PAYEE_NAME,
		GVT_ALLOT_PB )
VALUES         ($emplid,
		$select_dedcd,
		$effdt,
		$ded_calc,                                  ! CWB 02/21/2005
		$ded_end_dt,		!DEDUCTION_END_DT   ! CWB 02/21/2005
		#DEDUCTION_AMT,
		#DED_RATE,		!DEDUCTION RATE     ! CXA 03/04/2005
		#goal_amt,
		#goal_bal,
		0,
		' ',
		' ',
		'C',
		$asoftoday,
		$company,
		'Y',		
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',
		' ',	
		' ',
		' ')

end-SQL

end-procedure

!********************************************************************
begin-procedure SQL-Error-E
!********************************************************************

   Let $Error_message= $Error_message || ', SSN=' || $EMPLID || ' Did not Insert.'
   Let $SQL_Error_Msg1 = 'SQL Status: ' || to_char(#sql-status)
   Let $SQL_Error_Msg2 = 'SQL Error: ' || $sql-error
   Let $Error_Field = 'SQL-ERR '
   Let $Reason = $sql-error
   Let #not_updated = #not_updated + 1
   show $SQL_Error_Msg1
   show $SQL_Error_Msg2
   do Print-error($Error_Field,$Reason)

end-procedure


!********************************************************************
begin-procedure Print-error($Error_Field, $Reason)
!********************************************************************

   write 10 from $Error_Field:15 $Reason:40 

end-procedure


!***********************************************************************
begin-procedure SQL-Error-GDC
!***********************************************************************
  show $sql-statement '  EMPLID = ' $EMPLID
  show 'SQL Status = ' #sql-status
  show 'SQL Error = ' $sql-error
  show ' '

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'gexxx922.sqc'
