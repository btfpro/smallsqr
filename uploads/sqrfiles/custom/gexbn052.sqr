!******************************************
! GEXBN052: Benefits Confirmation Audits
!******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopeSoft, Inc.; it is not to be copied, reproduced, or transmitted  *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1997 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 7/02/98 5:59p    $                                      *
!  $Revision:: 3                $                                      *
!  $Workfile:: GEXBN052.SQR       $                                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  GBNC60   SXK      12/04/1998         INITIAL CREATION               *
!           SXK      02/23/1999         Modified to show every plan type
!	    SXK      03/11/1999         Modified to include benefit_rcd_nbr
!           CJH      04/09/1999         Added min in subselect to
!					get previous sched_id
!	    SXK      11/23/1999	        Changed from zip to postal     *
!           SXK      03/29/2000         Modified to have a check on    *
!					coverage_elect_dt before printing
!					coverage_begin_dt and also to 
!					determine if prior enrollment
!					rows need to be verified or not
!					This is necessary in 7.5 because
!					Peoplesoft is populating coverage_begin_dt
!					even though there is no actual
!					change in the enrollment status
!           GBD      10/01/2002         Provider field was replaced by *
!                                       Vendor_ID on PS_BENEF_PLAN_TBL.*
! ISDVNPK 08/23/2007 Modified part of 9.0 upgrade
! ISDVDZK 02/08/2010 made the change as per the SCT 13811256 
!***********************************************************************

#include 'setenv.sqc'  !Set Database Environment
#Include 'setup01.sqc' ! Portrait  Printer and page-size initialization

!*************************************
Begin-Report
!*************************************

  do Init-Report

  display 'Report Begin at ' noline
  do display-time

  do Main-Report

  display 'Report Ended at ' noline
  do display-time

  if #Empl_Cnt = 0
    display '**** NO CONFIRMATION FORMS PRINTED ****'
  end-if

  do StdAPI-Term

End-Report

!*************************************
Begin-Procedure Init-Report
!*************************************

  let $ReportID    = 'GEXBN052'
  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime
  move 0 to #Empl_Cnt            !Number of confirmation forms processed

 ! do Alter-Session   ! Set Session to RULE Optimizer   ! ISDVNPK 08/23/2007 Modified part of 9.0 upgrade                   

  display ''
  display 'GEXBN052: Confirmation Audit Report'

  do StdAPI-Init

  create-array name=terms size=100
               field=bpgm:char:3
               field=type:char:15
               field=bplan:char:10
               field=prvdr:char:10
               field=grp:char:10
               field=ccd:char:1
               field=bdt:char:15

  create-array name=enrol size=100
               field=bpgm_e:char:3
               field=type_e:char:15
               field=bplan_e:char:10
               field=prvdr_e:char:10
               field=grp_e:char:10
               field=ccd_e:char:1
               field=bdt_e:char:15

  create-array name=waive size=100
               field=bpgm_w:char:3
               field=type_w:char:15
               field=bplan_w:char:10
               field=prvdr_w:char:10
               field=grp_w:char:10
               field=ccd_w:char:1
               field=bdt_w:char:15

  clear-array name=terms
  clear-array name=enrol
  clear-array name=waive

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

End-Procedure

!*********************************************************************
!Prints the header information in the report.
!*********************************************************************
begin-heading 11 
  move 'Confirmation forms - Audit Report'  to $reporttitle
  LET $REPORTID = 'GEXBN052'
  #Include 'stdhdg01.sqc'
  
  position (+2)
  print 'COV.'                   (+1,87)
  

  print 'B.PGM'                  (+1,1)
  print '  PLAN TYPE  '          (,12)
  print ' B.PLAN '               (,40)
  print 'PROVIDER'               (,53)
  print 'GROUP_NBR'                 (,79)
  print ' CD '                   (,87)
  Print 'EFFECTIVE DT'           (,93)

  print '-'                  (+1,01,104) FILL
  print ' '                      (+1,1)

end-heading

!*************************************
Begin-Procedure Ask-Values
!*************************************

  do Ask-Schedule-Id
  do Ask-Process-Status
!  do Ask-Reprint-Prompt

End-Procedure


!*************************************
Begin-Procedure Get-Values
!*************************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-Process-Status

  if $process_status_EE = 'Y' and $process_status_FE = 'N'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'')) '
  else
  if $process_status_EE = 'N' and $process_status_FE = 'Y'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''FE'')) '
  else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 end-if
 end-if

!  do Get-Reprint-Prompt

End-Procedure

!*********************************
Begin-Procedure Ask-Reprint-Prompt
!*********************************

  let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  if ($Reprint = 'Y')
    do Ask-Reprint-Id
  end-if


End-Procedure

!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  let $Reprint_Match = 'N'
  input $Reprint_Id 'Enter Reprint Id'
  let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And ($Reprint_Id <> '')
    do Validate-Reprint-Id
    if ($Reprint_Match = 'N')
      input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    end-if
  End-While

End-Procedure

!**********************************
Begin-Procedure Validate-Reprint-Id
!**********************************

  let $Reprint_Match = 'N'

Begin-SELECT
PRINT_ID
  let $Reprint_Match = 'Y'
FROM  PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id
AND   SCHED_ID = $Sched_Id
End-SELECT

End-Procedure

!**********************************
Begin-Procedure Ask-Process-Status
!**********************************

 again:
 input $ProcStat 'Enter Process Status [FE or EE] '
 let $ProcStat = UPPER(RTRIM($ProcStat,' '))
 if $ProcStat <> 'FE' and $ProcStat <> 'EE' and $ProcStat <> ''
   goto again
 end-if

 if ($ProcStat = '')
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS = ''' || $ProcStat || ''') '
 end-if

End-Procedure

!****************************
Begin-Procedure Main-Report
!****************************

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Forms
      do Delete-Reprint-Id
    end-if
  else
    do Print-Forms
  end-if


End-Procedure

!****************************
Begin-Procedure Reprint-Forms
!****************************

Begin-Select
A3.PRINT_ID
A4.EMPLID
A4.BENEFIT_RCD_NBR
A4.EVENT_ID

  let $Where =        ' (A.EMPLID = '''       || &A4.EmplId || ''') And '
  let $TempVal = edit(&A4.Benefit_Rcd_nbr, '9')
#ifdef INFORMIX
  let $Where = $Where || '(A.BENEFIT_RCDN = ' || $TempVal     || ') And '
#else
  let $Where = $Where || '(A.BENEFIT_RCD_NBR = ' || $TempVal     || ') And '
#endif
  let $TempVal = edit(&A4.Event_Id, '9')
  let $Where = $Where || '(A.EVENT_ID = '     || $TempVal     || ') '

  do Select-Data

From  PS_BAS_PRNT A3,
      PS_BAS_PRNT_PARTIC A4
Where A3.PRINT_ID = $Reprint_Id
And   A3.PRINT_ID = A4.PRINT_ID
And   A3.SCHED_ID = $Sched_Id
Order By A4.EMPLID ASC,
         A4.BENEFIT_RCD_NBR ASC,
         A4.EVENT_ID ASC
End-Select

End-Procedure

!****************************
Begin-Procedure Print-Forms
!****************************

    let $Where = '(A.EVENT_STATUS IN (''O'',''C'')) And '
    let $Where = $Where || '((A.CONFIRM_NOTIFY_DT IS NULL) Or '
    let $Where = $Where || '(A.STATUS_DT > A.CONFIRM_NOTIFY_DT)) '

    do Select-Data

 End-Procedure

!************************************
Begin-Procedure Select-Data
!***IL*********************************

 move 0 to #TmpRow              !Initialize

Begin-Select
A.SCHED_ID
A.EMPLID
A.EMPL_RCD
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.BENEFIT_PROGRAM
 move &A.Benefit_Program to $ReportID

A.EVENT_CLASS
 do Get-Event-Descr

A.EVENT_DT
  do Format-DateTime(&A.Event_Dt,$Event_Dt,{DEFDATE},'', '')
  do convert-to-dtu-date(&A.Event_Dt,$Event_dt_dtu)
  let $Event_YY = substr($Event_Dt_dtu,1,4)

A.BAS_PROCESS_STATUS
B.NAME
B.ADDRESS1
B.ADDRESS2

B.CITY
B.STATE
!SXK 11/23/99 Changed from zip
B.postal
  let $CityState = RTRIM(&B.City, ' ') || ',  ' || RTRIM(&B.State,' ') || ' ' || &B.postal

B.BIRTHDATE
 do Format-DateTime(&B.Birthdate,$Birthdate,{DEFDATE},'', '')

C.EFFDT
 do Format-DateTime(&C.Effdt,$EFfdt,{DEFDATE},'','')

C.DESCR
C.DFLT_CREDIT_RLLOVR
D.SERVICE_DT
 do Format-DateTime(&D.Service_Dt,$Service_dt,{DEFDATE},'','')

D.EMPL_RCD

 move 0 to #Flexible_Credits  !Flexible Credits Accumulator
 move 0 to #Page_Number       !Reset to 0 for each employee
 display &a.event_id

 do check-options
 if $options_found = 'Y'
    add 1 to  #Empl_Cnt          !Increment the employee counter
    if &a.emplid <> $prev_emplid and (RTRIM($prev_emplid,' ') <> '')
       do print-report
       clear-array name=terms
       move 0 to #i
       do print-report-1
       clear-array name=enrol
       move 0 to #j
       do print-report-2
       clear-array name=waive
       move 0 to #w
       move &a.emplid to $prev_emplid
       move &b.name to $prev_name
    else
       move &a.emplid to $prev_emplid
       move &b.name to $prev_name
    end-if


    if (&A.BAS_PROCESS_STATUS <> 'EE')
       do Get-Flexible-Credits
    end-if

    do Benefit-Choices           !Get elections; then, print forms.

!    do Benefit-Choices-Con       !
!    do Investment-Choices        !Get investment choices; then, print information
!    do Dependent-Benef

    if (&A.BAS_PROCESS_STATUS <> 'EE')
!        do Update-Confirm-Notify-Date
    end-if

 end-if


A.CREDIT_ROLLOVER
A.CONFIRM_NOTIFY_DT
A.JOB_EFFDT
P1.PAY_FREQUENCY

From  PS_BAS_PARTIC A,
      PS_PERSONAL_DATA B,
      PS_BEN_DEFN_PGM C,
      PS_EMPLOYMENT D,
      PS_JOB A2,
      PS_PAYGROUP_TBL P1

! 02/23/1999 - change operator 
! Where A.SCHED_ID LIKE $Sched_Id
Where A.SCHED_ID = $Sched_Id
And   A.PROCESS_IND = 'N'
And   [$Where]
And   [$ProcStatCriteria]
And   A.BENEFIT_RCD_NBR =
        (SELECT MAX(BENEFIT_RCD_NBR)
         From PS_BAS_PARTIC
         Where SCHED_ID = A.SCHED_ID
         And   EMPLID = A.EMPLID
         And   BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
         And   EVENT_ID = A.EVENT_ID)
AND   A.EVENT_ID = (SELECT MAX(EVENT_ID)
                      FROM PS_BAS_PARTIC
                     WHERE SCHED_ID = A.SCHED_ID
                       AND EMPLID = A.EMPLID
                       AND BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR)
And   B.EMPLID = A.EMPLID
And   C.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
And   C.EFFDT =
        (SELECT MAX(EFFDT)
         From PS_BEN_DEFN_PGM
         Where BENEFIT_PROGRAM = C.BENEFIT_PROGRAM)
And   D.EMPLID = A.EMPLID
And   D.BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
And   D.EMPL_RCD = A.EMPL_RCD
And   A2.EMPLID = A.EMPLID
And   A2.EFFDT = A.JOB_EFFDT
And   A2.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_JOB
          Where EMPLID = A2.EMPLID
          And   EMPL_RCD = A2.EMPL_RCD
          And   EFFDT = A.JOB_EFFDT)
And   A2.EFFSEQ =
         (SELECT MAX(EFFSEQ)
          From PS_JOB
          Where EMPLID = A2.EMPLID
          And   EMPL_RCD = A2.EMPL_RCD
          And   EFFDT = A.JOB_EFFDT)
And   P1.COMPANY = A2.COMPANY
And   P1.PAYGROUP = A2.PAYGROUP
And   P1.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_PAYGROUP_TBL
          Where COMPANY = P1.COMPANY
          And   PAYGROUP = P1.PAYGROUP
          And   EFFDT <= A2.EFFDT)
Order By A.BAS_PROCESS_STATUS ASC,
         A.EMPLID ASC,
         A.BENEFIT_RCD_NBR ASC,
         A.EVENT_ID ASC

End-Select

    add 1 to  #Empl_Cnt          !Increment the employee counter
    do print-report
    clear-array name=terms
    move 0 to #i
    do print-report-1
    clear-array name=enrol
    move 0 to #j
    do print-report-2
    clear-array name=waive
    move 0 to #w
    move &a.emplid to $prev_emplid

End-Procedure

!*******************************
Begin-Procedure Get-Event-Descr
!*******************************

Begin-Select
A1.DESCR
 move &A1.Descr to $Benef_Admin_Type

From PS_BAS_EVT_CLASS A1
Where A1.EVENT_CLASS = &A.Event_Class
And   A1.EFF_STATUS = 'A'
End-Select

End-Procedure


!*******************************
Begin-Procedure Benefit-Choices
!*******************************

 move 0 to #PreTax_Total        !PreTax Total Accumulator
 move 0 to #AfterTax_Total      !AfterTax Total Accumulator
 move 0 to #Line_Ct             !Detail Line Counter

Begin-Select
E.SCHED_ID
 move &E.Sched_Id to $SchedId
E.EMPLID
 move &E.Emplid to $Empl_Id
E.BENEFIT_RCD_NBR
 move &E.benefit_rcd_nbr to #BenefitRcdNo
E.EVENT_ID
 move &E.Event_Id to #EventId
E.PLAN_TYPE
 move &E.Plan_Type to $Plan_Type
 move 'PLAN_TYPE'  to $Fieldname
 move $Plan_Type to $Fieldvalue
 do Read-Translate-Table
 let $PlanDescr = $Xlatlongname

E.OPTION_CD
 let $Option_Cd = RTRIM(&E.Option_Cd,' ')
E.ENROLL_ACTION
E.BAS_ERROR
E.ANNUAL_PLEDGE
E.ANN_EX_CREDIT_FSA
E.VACN_HOURS
E.APAY_EFFDT
E.DISPLAY_PLN_SEQ
E.COVERAGE_BEGIN_DT 
!SXK 03/29/2000 Added coverage_elect_dt to determine if it is a new
!enrollment or termination
E.COVERAGE_ELECT_DT
!SXK 03/29/2000 End

 display &e.emplid
 display &e.plan_type
 display &e.option_cd
 display &e.enroll_action


 move ' ' to $covrgcd
 move ' ' to $op_benefit_plan
 move ' ' to $provider_descr
 move ' ' to $group
 if ($Option_Cd <> '') !and ($plan_type <> '30' and $plan_type <> '31' and $plan_type <> '82')

   do Get-Option-Info

   move &Op.Covrg_Cd to $CovrgCd
   move $AsOfToday to $CovrgEffdt
   do Get-Covrg-Code-Descr
   let $Covrg_Cd = &OP.Covrg_Cd || ' ' || $CovrgDescr
   let $op_benefit_plan = &op.benefit_plan

   if ($Option_Cd = 'W')
     let $Option = '(' || $Option_Cd || ') ' || 'WAIVE'
     let $op_benefit_plan = 'WAIVE'
     let $provider_descr = ' '
     let $group = ' '
   else
     let $Option = '(' || $Option_Cd || ') ' || &Benefit_Plan
     do Get-Benef-Descr
   end-if

   move 0 to #PreTax_Deduction   !PreTax Deduction Accumulator
   move 0 to #AfterTax_Deduction !AfterTax Deduction Accumulator

!   do Get-Cost-Data

 end-if

 display $op_benefit_plan

! if $plan_type <> '30' and $plan_type <> '31' and $plan_type <> '82'
 move &e.enroll_Action to $enrol_Action
   if $Option_Cd <> '' 

!SXK 03/29/00 Added check for coverage_elect_dt before printing coverage_begin_dt
!This is necessary since in 7.5 coverage_begin_dt is being populated even if there
!is no actual change in the enrollment status

     if rtrim(&e.coverage_elect_dt,' ') <> ''
        move &e.coverage_begin_dt to $coverage_begin_dt_a
     else 
        move ' ' to $coverage_begin_dt_a
     end-if

     if $option_cd <> 'W'
        put &a.benefit_program $plandescr $Op_benefit_plan $provider_descr $group $covrgcd $coverage_begin_dt_a into enrol(#j)
        add 1 to #j
     else
        put &a.benefit_program $plandescr $Op_benefit_plan $provider_descr $group $covrgcd $coverage_begin_dt_a into waive(#w)
        add 1 to #w
     end-if

     move $op_benefit_plan to $save_bplan
     move $coverage_begin_dt_a to $save_cov_begin_dt

     if RTRIM($save_cov_begin_dt,' ') <> ''
        do check-prior-info
     end-if
   else
     if &e.enroll_action = 'T'
        move &e.coverage_begin_dt to $coverage_begin_dt_a
        do get-prev-bpgm
        if RTRIM($bprogram,' ') = ''
           move &a.benefit_program to $bprogram
        end-if
        put $bprogram $plandescr $Op_benefit_plan $provider_descr $group $covrgcd $coverage_begin_dt_a into terms(#i)
        add 1 to #i
        move $op_benefit_plan to $save_bplan
        move $coverage_begin_dt_a to $save_cov_begin_dt

        do check-prior-info
     else
     move &e.coverage_begin_dt to $coverage_begin_dt_a !ISDVDZK made the change as per the SCT 13811256  
     
        move $op_benefit_plan to $save_bplan
        move $coverage_begin_dt_a to $save_cov_begin_dt

      !ISDVDZK made the change as per the SCT 13811256 start 
     if RTRIM($save_cov_begin_dt,' ') <> ''
        do check-prior-info
     end-if
        !ISDVDZK made the change as per the SCT 13811256 end 
     end-if
   end-if
! end-if

From PS_BAS_PARTIC_PLAN E
Where E.SCHED_ID     = &A.Sched_Id
And   E.EMPLID       = &A.Emplid
And   E.BENEFIT_RCD_NBR = &A.Benefit_Rcd_nbr
And   E.EVENT_ID     = &A.Event_Id
And   ((E.OPTION_CD <> ' ')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION <> 'T' And E.BAS_ERROR = 'Y')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION = 'T'))
Order by E.DISPLAY_PLN_SEQ ASC,
         E.PLAN_TYPE ASC
End-Select
End-Procedure

!*******************************
Begin-Procedure Check-Options
!*******************************

let $options_found = 'N'

Begin-Select
'x'
   move 'Y' to $options_found

From PS_BAS_PARTIC_PLAN E11
Where E11.SCHED_ID     = &A.Sched_Id
And   E11.EMPLID       = &A.Emplid
And   E11.BENEFIT_RCD_NBR = &A.Benefit_Rcd_nbr
And   E11.EVENT_ID     = &A.Event_Id
And   ((E11.OPTION_CD <> ' ')
    Or (E11.OPTION_CD = ' ' And E11.ENROLL_ACTION <> 'T' And E11.BAS_ERROR = 'Y')
    Or (E11.OPTION_CD = ' ' And E11.ENROLL_ACTION = 'T'))
End-Select
End-Procedure

!*******************************
Begin-Procedure Check-Prior-Info
!*******************************
! display $plan_type
Begin-Select
E4.SCHED_ID
E4.EVENT_ID
E4.BENEFIT_PROGRAM
E4.COVERAGE_ELECT
E4.COVERAGE_BEGIN_DT
E4.COVERAGE_ELECT_DT
E4.OPTION_CD
E4.ENROLL_ACTION
E5.OPTION_ID
E5.BENEFIT_PLAN
E5.COVRG_CD
  ! display #i 

  let $op_benefit_plan = &e5.benefit_plan
  let $covrgcd = &e5.covrg_cd

  ! display $plandescr
  ! display $provider_descr
  ! display $group
  ! display 'Prev Benefit Plan:' noline
  ! display $save_bplan
  ! display 'Prev coverage begin dt:' noline
  ! display $save_cov_begin_dt
  display 'In prev sql'
  display &e5.benefit_plan
  display &e4.sched_id
  display &e4.event_id
  display &e4.option_Cd
  display &e4.enroll_action
  ! display &e4.coverage_begin_dt
!SXK 03/29/00 Added check for coverage_elect_dt before printing coverage_begin_dt
!This is necessary since in 7.5 coverage_begin_dt is being populated even if there
!is no actual change in the enrollment status

     if rtrim(&e4.coverage_elect_dt,' ') <> ''
        move &e4.coverage_begin_dt to $coverage_begin_dt_p
     else 
        move ' ' to $coverage_begin_dt_p
     end-if


  if RTRIM(&e5.benefit_plan,' ') <> ''

     if $option_cd = 'W'
        do get-benef-descr
        put &e4.benefit_program $plandescr &e5.benefit_plan $provider_descr $group $covrgcd $coverage_begin_dt_p into waive(#w)
        add 1 to #w
     else
        if (&e5.benefit_plan <> $save_bplan)
           or (&e4.coverage_begin_dt <> $save_cov_begin_dt)
           do get-benef-descr
           put &e4.benefit_program $plandescr &e5.benefit_plan $provider_descr $group $covrgcd $coverage_begin_dt_p into terms(#i)
           add 1 to #i
        end-if
     end-if
  else
     if &e4.enroll_Action <> 'T' and (&e4.option_cd = 'W' and
        $option_cd <> 'W' and $enrol_action <> 'T')
      if &e4.option_cd = 'W' 
        let $bplan_a = 'WAIVE'
        let $provider_descr = ' '
        let $group = ' '
      end-if
      display $plandescr
      display $sav_bplan
      if (&e5.benefit_plan <> $save_bplan)
        or (&e4.coverage_begin_dt <> $save_cov_begin_dt)
        
        put &e4.benefit_program $plandescr $bplan_a $provider_descr $group $covrgcd $coverage_begin_dt_p into enrol(#j)
        add 1 to #j
      end-if
    end-if   
  end-if

From PS_BAS_PARTIC_PLAN E4, PS_BAS_PARTIC_OPTN E5
!CJH 04/09/1999 Added min in subselect
Where E4.sched_id = (select min(bs.sched_id)
                       from ps_bas_partic bs
                      where bs.emplid = &a.emplid
                        and bs.benefit_rcd_nbr = &a.benefit_rcd_nbr
                        and bs.event_id < &a.event_id
                        and bs.event_id = (select max(event_id)
                                             from ps_bas_partic
                                            where emplid = &a.emplid
					      and benefit_rcd_nbr = &a.benefit_rcd_nbr
                                              and event_id < &a.event_id))
And E4.EMPLID       = &A.Emplid
and e4.benefit_rcd_nbr = &a.benefit_rcd_nbr
and e4.event_id < &a.event_id
And   ((E4.OPTION_CD <> ' ')
    Or (E4.OPTION_CD = ' ' And E4.ENROLL_ACTION <> 'T' And E4.BAS_ERROR = 'Y')
    Or (E4.OPTION_CD = ' ' And E4.ENROLL_ACTION = 'T'))
And   E4.EVENT_ID     = (Select max(event_id)
			 from ps_bas_partic_plan
                         where sched_id = e4.sched_id
			and emplid = &A.Emplid
		      and benefit_rcd_nbr = &a.benefit_rcd_nbr
                           and plan_type = $plan_type
                           and event_id < &A.Event_id)
And   E4.PLAN_TYPE    = $Plan_Type
And   E4.SCHED_ID     = E5.SCHED_ID
And   E4.EMPLID       = E5.EMPLID
And   E4.BENEFIT_RCD_NBR = E5.BENEFIT_RCD_NBR
And   E4.EVENT_ID     = E5.EVENT_ID
And   E4.PLAN_TYPE    = E5.PLAN_TYPE
and   e4.option_cd =  e5.option_cd
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Prev-BPGm
!*******************************

let $bprogram = ' '
Begin-Select
E41.BENEFIT_PROGRAM
 move &e41.benefit_program to $bprogram
From PS_BAS_PARTIC_PLAN E41
!CJH 04/09/1999 Added min in subselect
Where E41.sched_id = (select min(bs.sched_id)
                       from ps_bas_partic bs
                      where bs.emplid = &a.emplid
         	      and bs.benefit_rcd_nbr = &a.benefit_rcd_nbr
                        and bs.event_id < &a.event_id
                        and bs.event_id = (select max(event_id)
                                             from ps_bas_partic
                                            where emplid = &a.emplid
					      and benefit_rcd_nbr = &a.benefit_rcd_nbr
                                              and event_id < &a.event_id))
and e41.event_id < &a.event_id
And E41.EMPLID       = &A.Emplid
and e41.benefit_rcd_nbr = &a.benefit_rcd_nbr
And   ((E41.OPTION_CD <> ' ')
    Or (E41.OPTION_CD = ' ' And E41.ENROLL_ACTION <> 'T' And E41.BAS_ERROR = 'Y')
    Or (E41.OPTION_CD = ' ' And E41.ENROLL_ACTION = 'T'))
And   E41.EVENT_ID     = (Select max(event_id)
			 from ps_bas_partic_plan
                         where sched_id = e41.sched_id
			and emplid = &A.Emplid
		      and benefit_rcd_nbr = &a.benefit_rcd_nbr
                           and plan_type = $plan_type
                           and event_id < &A.Event_id)
And   E41.PLAN_TYPE    = $Plan_Type
End-Select
End-Procedure


!*******************************
Begin-Procedure Get-Option-Info
!*******************************

Begin-Select

OP.COVRG_CD
OP.CALCULATED_BASE
OP.DED_CLASS
OP.OPTION_ID
OP.BENEFIT_PLAN
OP.PAY_PERIOD1
OP.PAY_PERIOD2
OP.PAY_PERIOD3
OP.PAY_PERIOD4
OP.PAY_PERIOD5

From PS_BAS_PARTIC_OPTN OP
Where OP.SCHED_ID     = $SchedId
And   OP.EMPLID       = $Empl_Id
And   OP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   OP.EVENT_ID     = #EventId
And   OP.PLAN_TYPE    = $Plan_Type
And   OP.OPTION_CD    = $Option_Cd
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Benef-Descr
!*******************************
let $Provider = ''

let $group = ''

Begin-Select

E2.DESCRSHORT &Benefit_Plan
!PSR 10/01/02 v8.3 Upgrade Begin
!E2.PROVIDER   
E2.VENDOR_ID
!  move &E2.PROVIDER to $provider
   move &E2.VENDOR_ID to $provider
!PSR 10/01/02 v8.3 Upgrade End
  if RTRIM($provider,' ') <> ''
     do get-provider-descr
  end-if
E2.GROUP_NBR
  move &E2.GROUP_NBR to $group
  ! display 'Group:' noline
  ! display $group
  ! display 'Provider:' noline
  ! display $provider_descr

From PS_BENEF_PLAN_TBL E2
Where  E2.PLAN_TYPE    = $Plan_Type
And    E2.BENEFIT_PLAN = $OP_Benefit_Plan
And    E2.EFFDT =
              (SELECT MAX(EFFDT)
               From PS_BENEF_PLAN_TBL
               Where PLAN_TYPE    = E2.PLAN_TYPE
               And   BENEFIT_PLAN = E2.BENEFIT_PLAN
               And   EFFDT       <= &A.Event_Dt)
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Provider-Descr
!*******************************
let $provider_descr = ' '
Begin-Select

E21.DESCR 

  move &E21.DESCR to $provider_descr

From PS_PROVIDR_TBL E21
Where  E21.PROVIDER    = $provider
And    E21.EFF_STATUS = 'A'
And    E21.EFFDT =
              (SELECT MAX(EFFDT)
               From PS_PROVIDR_TBL
               Where PROVIDER    = E21.PROVIDER
               And   EFFDT       <= &A.Event_Dt)
End-Select
End-Procedure

! ISDVNPK 08/23/2007 Modified part of 9.0 upgrade
!*****************************
!Begin-Procedure Get-Cost-Data
!*****************************

 !move ' ' to $Msg

!Begin-Select

!G.PLAN_TYPE
!G.OPTION_ID
!G.DEDUCT_AMT

 !if &OP.Ded_Class = 'B'
  ! let #PreTax_Deduction = #PreTax_Deduction + &G.Deduct_Amt
   !let #PreTax_Total = #PreTax_Total + &G.Deduct_Amt
 !end-if

 !if &OP.Ded_Class = 'A'
  ! let #AfterTax_Deduction = #AfterTax_Deduction + &G.Deduct_Amt
   !let #AfterTax_Total = #AfterTax_Total + &G.Deduct_Amt
 !end-if

! Evaluate &P1.Pay_Frequency
!  When = 'M'
!    if &OP.Pay_Period1 <> 'Y'
!      let $Msg = 'Your deductions are not synchronized with your pay frequency.'
!    end-if
!    break
!  When = 'S'
!    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y')
!      let $Msg = 'Your deductions are not synchronized with your pay frequency.'
!    end-if
!    break
!  When = 'B'
!    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
!        Or &OP.Pay_Period3 <> 'Y')
!      let $Msg = 'Your deductions are not synchronized with your pay frequency.'
!    end-if
!    break
!  When = 'W'
!    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
!        Or &OP.Pay_Period3 <> 'Y' Or &OP.Pay_Period4 <> 'Y'
!        Or &OP.Pay_Period5 <> 'Y')
!      let $Msg = 'Your deductions are not synchronized with your pay frequency.'
!    end-if
!    break
! End-Evaluate

!From PS_BAS_PARTIC_COST G
!Where G.SCHED_ID     = &E.Sched_Id
!And   G.EMPLID       = &E.Emplid
!And   G.BENEFIT_RCD_NBR = &E.Benefit_Rcd_nbr
!And   G.EVENT_ID     = &E.Event_Id
!And   G.PLAN_TYPE    = &E.Plan_Type
!And   G.OPTION_ID    = &OP.Option_Id
!And   G.COST_TYPE    = 'P'
!End-Select
!End-Procedure

!************************************
Begin-Procedure Get-Flexible-Credits
!************************************

Begin-Select
M.EMPLID
M.PLAN_TYPE
L.EARNINGS_END_DT
L.OTH_PAY

 Add &L.Oth_Pay to #Flexible_Credits

From PS_BAS_PARTIC_PLAN M,
     PS_ADDL_PAY_DATA   L
Where M.SCHED_ID         = &A.Sched_Id
And   M.EMPLID           = &A.Emplid
And   M.BENEFIT_RCD_NBR     = &A.Benefit_Rcd_nbr
And   M.EVENT_ID         = &A.Event_Id
And   L.EMPLID           = M.EMPLID
And   L.PLAN_TYPE        = M.PLAN_TYPE
And   L.ADDLPAY_REASON   = 'BAS'
And   L.EFFDT = (SELECT MAX(EFFDT)
                 From   PS_ADDL_PAY_DATA
                 Where  EMPLID         = M.EMPLID
                 And    PLAN_TYPE      = M.PLAN_TYPE
                 And    ADDLPAY_REASON = 'BAS')
And   ((L.EARNINGS_END_DT IS NULL) Or (L.EARNINGS_END_DT > &A.Event_Dt))

End-Select
End-Procedure

!***********************************
Begin-Procedure Benefit-Choices-Con
!***********************************

 let $ChoiceFoundFlag = 'N'

Begin-Select
E1.SCHED_ID
 move &E1.Sched_Id to $SchedId
E1.EMPLID
 move &E1.Emplid to $Empl_Id
E1.BENEFIT_RCD_NBR
 move &E1.benefit_rcd_nbr to #BenefitRcdNo
E1.EVENT_ID
 move &E1.Event_Id to #EventId
E1.PLAN_TYPE
 move &E1.Plan_Type to $Plan_Type
 move 'PLAN_TYPE' to $Fieldname
 move $Plan_Type  to $Fieldvalue
 do Read-Translate-Table
 let $Plan_Descr = $Xlatlongname

E1.OPTION_CD
 let $Option_Cd = RTRIM(&E1.Option_Cd,' ')
E1.ENROLL_ACTION

E1.FLAT_DED_AMT
E1.PCT_GROSS
E1.SAVINGS_COVRG
 if &E1.Savings_Covrg = '1'
   let $PreTax_Election = 'PRE-TAX       - ' || $Flat_Ded_Amt
 else
   let $PreTax_Election = 'PRE-TAX       - ' || $Pct_Gross || '%'
 end-if

E1.FLAT_DED_AMT_ATAX
E1.PCT_GROSS_ATAX
E1.SAVINGS_COVRG_ATAX
 if &E1.Savings_Covrg_Atax = '1'
   let $AfterTax_Election = 'AFTER-TAX  - ' || $Flat_Ded_Amt_Atax
 else
   let $AfterTax_Election = 'AFTER-TAX  - ' || $Pct_Gross_Atax || '%'
 end-if

E1.PENSION_BASE
E1.VOLUNTARY_AMT

E1.VOLUNTARY_PCT


E1.BAS_ERROR
E1.DISPLAY_PLN_SEQ
E1.COVERAGE_BEGIN_DT
 if ($Option_Cd <> '')

   do Get-Option-Info
   do Get-Benef-Descr

   if ($Option_Cd = 'W')
     let $Option = '(' || $Option_Cd || ') ' || 'WAIVE'
   else
     let $Option = '(' || $Option_Cd || ') ' || &Benefit_Plan
   end-if

 end-if
 if $plan_type <> '82'
   if $Option_Cd <> ''
     move &e1.coverage_begin_dt to $coverage_begin_dt_a
     put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
     add 1 to #j
   end-if

    do check-prior-info
 end-if


From PS_BAS_PARTIC_PLAN E1
Where E1.SCHED_ID     = &A.Sched_Id
And   E1.EMPLID       = &A.Emplid
And   E1.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   E1.EVENT_ID     = &A.Event_Id
And   ((E1.OPTION_CD <> ' ')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION <> 'T' And E1.BAS_ERROR = 'Y')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION = 'T'))
And   ((E1.PLAN_TYPE >= '40' and E1.PLAN_TYPE < '60')
    Or (E1.PLAN_TYPE >= '4A' and E1.PLAN_TYPE <= '5Z')
    Or (E1.PLAN_TYPE >= '70' and E1.PLAN_TYPE < '90')
    Or (E1.PLAN_TYPE >= '7A' and E1.PLAN_TYPE <= '8Z'))
Order by E1.DISPLAY_PLN_SEQ ASC
End-Select
End-Procedure

!**********************************
Begin-Procedure Investment-Choices
!**********************************

 let $InvestFoundFlag = 'N'
Begin-Select

P.SCHED_ID
 move &P.Sched_Id to $SchedId
P.EMPLID
 move &P.Emplid to $Empl_Id
P.BENEFIT_RCD_NBR
 move &P.benefit_rcd_nbr to #BenefitRcdNo
P.EVENT_ID
 move &P.Event_Id to #EventId
P.COVERAGE_BEGIN_DT
  
Q.PLAN_TYPE
 move &Q.Plan_Type to $Plan_Type
 move 'PLAN_TYPE' to $Fieldname
 move $Plan_Type  to $Fieldvalue
 do Read-Translate-Table
 let $Plan_Descr = $Xlatlongname

Q.INVESTMENT_OPT
Q.EVENT_DT
 do Get-Investment-Descr
 let $Investment = &Q1.DescrShort

Q.INVESTMENT_PCT
Q.BAS_ERROR
 if &Q.Bas_Error = 'Y'
  do Get-Bas-Message
  let $Error_Message = '* ' || $Short_Error_Message
 end-if
   if $Option_Cd <> ''
     move &p.coverage_begin_dt to $coverage_begin_dt_a
    put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
    add 1 to #j
   end-if

 do check-prior-info

From PS_BAS_PARTIC_PLAN P,
     PS_BAS_PARTIC_INVT Q
Where P.SCHED_ID     = &A.Sched_Id
And   P.EMPLID       = &A.Emplid
And   P.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   P.EVENT_ID     = &A.Event_Id
And   ((P.OPTION_CD <> ' ')
      Or (P.OPTION_CD = ' ' And P.ENROLL_ACTION <> 'T' And P.BAS_ERROR = 'Y'))
And   Q.SCHED_ID     = P.SCHED_ID
And   Q.EMPLID       = P.EMPLID
And   Q.BENEFIT_RCD_NBR = P.BENEFIT_RCD_NBR
And   Q.EVENT_ID     = P.EVENT_ID
And   Q.PLAN_TYPE    = P.PLAN_TYPE
Order By Q.PLAN_TYPE ASC, Q.INVESTMENT_OPT ASC
End-Select


End-Procedure

!************************************
Begin-Procedure Get-Investment-Descr
!************************************
Begin-Select

Q1.DESCRSHORT
From PS_SAVINGS_INV_TBL Q1
Where Q1.PLAN_TYPE = &Q.Plan_Type
And   Q1.INVESTMENT_OPT = &Q.Investment_Opt
And   Q1.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_SAVINGS_INV_TBL
          Where PLAN_TYPE = Q1.PLAN_TYPE
          And   INVESTMENT_OPT = Q1.INVESTMENT_OPT
          And   EFFDT <= &A.Event_Dt)

End-Select
End-Procedure


!*******************************
Begin-Procedure Dependent-Benef
!*******************************

!*** 'DEPENDENTS/BENEFICIARIES'
  let $DpndFoundFlag = 'N'
  let $SectionFlag = 'N'

!--------------------------------------

!*** 'Medical/Dental'

  let $Error_Message  = ''
  let $MedCvgFlag     = ''
  let $DenCvgFlag     = ''
  let $VisCvgFlag     = ''
  let $DependentBenef = ''
  let $PriorDpnd      = ''

Begin-Select

S.DEPENDENT_BENEF
  if ($PriorDpnd <> &S.Dependent_Benef)
    let $PriorDpnd = &S.Dependent_Benef
  end-if
  let $DependentBenef = &S.Dependent_Benef

R.SCHED_ID
  move &R.Sched_Id to     $SchedId       !Bas Error procedure
R.EMPLID
  move &R.Emplid to       $Empl_Id       !Bas Error procedure
R.BENEFIT_RCD_NBR
  move &R.benefit_rcd_nbr to #BenefitRcdNo  !Bas Error procedure
R.EVENT_ID
  move &R.Event_Id to     #EventId       !Bas Error procedure
R.PLAN_TYPE
  move &R.Plan_Type to    $Plan_Type     !Bas Error procedure
R.COVERAGE_BEGIN_DT
S.BAS_ERROR

T.NAME
  let $DpndName = &T.Name

S.PLAN_TYPE

  Evaluate &S.Plan_Type
    When = '10'
      let $MedCvgFlag = 'Y'
      break
    When = '11'
      let $DenCvgFlag = 'Y'
      break
 !SXK 12/06/98 begin
 !    When = '14'
 !      let $VisCvgFlag = 'Y'
 !      break
 !SXK 12/06/98 End
  End-Evaluate

  if (&S.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = $Error_Message || $Short_Error_Message
  end-if
     if $Option_Cd <> ''
     move &r.coverage_begin_dt to $coverage_begin_dt_a
    put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
    add 1 to #j
   end-if

   do check-prior-info

From PS_BAS_PARTIC_PLAN R,
     PS_BAS_PARTIC_DPND S,
     PS_DEPENDENT_BENEF T
Where R.SCHED_ID     = &A.Sched_id
And   R.EMPLID       = &A.Emplid
And   R.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   R.EVENT_ID     = &A.Event_Id
And   ((R.PLAN_TYPE >= '10' And R.PLAN_TYPE <= '19')
    Or (R.PLAN_TYPE >= '1A' and R.PLAN_TYPE <= '1Z'))
And   R.COVERAGE_ELECT <> 'W'
And   R.OPTION_CD      <> ' '
And   S.SCHED_ID     = R.SCHED_ID
And   S.EMPLID       = R.EMPLID
And   S.BENEFIT_RCD_NBR = R.BENEFIT_RCD_NBR
And   S.EVENT_ID     = R.EVENT_ID
And   S.PLAN_TYPE    = R.PLAN_TYPE
And   T.EMPLID          = S.EMPLID
And   T.DEPENDENT_BENEF = S.DEPENDENT_BENEF
Order By S.DEPENDENT_BENEF ASC, R.PLAN_TYPE ASC
End-Select



!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = 'Life Insurance'

Begin-Select

U.SCHED_ID
  move &U.Sched_Id to     $SchedId       !Bas Error procedure
U.EMPLID
  move &U.Emplid to       $Empl_Id       !Bas Error procedure
U.BENEFIT_RCD_NBR
  move &U.benefit_rcd_nbr to #BenefitRcdNo  !Bas Error procedure
U.EVENT_ID
  move &U.Event_Id to     #EventId       !Bas Error procedure
U.PLAN_TYPE
  move &U.Plan_Type to    $Plan_Type     !Bas Error procedure
U.OPTION_CD
  move &U.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan
U.COVERAGE_BEGIN_DT
V.BAS_ERROR

V.DEPENDENT_BENEF
  let $DependentBenef = &V.Dependent_Benef

  if (&V.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

W.NAME
  let $DpndName = &W.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName

V.BENEF_PCT
V.FLAT_AMOUNT
V.EXCESS
V.CONTINGENT

  if (&V.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $Short_Error_Message
  end-if
   if $Option_Cd <> ''
     move &u.coverage_begin_dt to $coverage_begin_dt_a
    put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
    add 1 to #j
   end-if

 do check-prior-info

From PS_BAS_PARTIC_PLAN U,
     PS_BAS_PARTIC_DPND V,
     PS_DEPENDENT_BENEF W
Where U.SCHED_ID     = &A.Sched_id
And   U.EMPLID       = &A.Emplid
And   U.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   U.EVENT_ID     = &A.Event_Id
And   ((U.PLAN_TYPE >= '20' And U.PLAN_TYPE <= '29')
    Or (U.PLAN_TYPE >= '2A' And U.PLAN_TYPE <= '2Z'))
And   U.COVERAGE_ELECT <> 'W'
And   U.OPTION_CD      <> ' '
And   V.SCHED_ID     = U.SCHED_ID
And   V.EMPLID       = U.EMPLID
And   V.BENEFIT_RCD_NBR = U.BENEFIT_RCD_NBR
And   V.EVENT_ID     = U.EVENT_ID
And   V.PLAN_TYPE    = U.PLAN_TYPE
And   W.EMPLID          = V.EMPLID
And   W.DEPENDENT_BENEF = V.DEPENDENT_BENEF
Order By V.DEPENDENT_BENEF ASC, U.PLAN_TYPE ASC
End-Select

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = 'Savings'

Begin-Select

X.SCHED_ID
  move &X.Sched_Id to     $SchedId       !Bas Error procedure
X.EMPLID
  move &X.Emplid to       $Empl_Id       !Bas Error procedure
X.BENEFIT_RCD_NBR
  move &X.benefit_rcd_nbr to #BenefitRcdNo  !Bas Error procedure
X.EVENT_ID
  move &X.Event_Id to     #EventId       !Bas Error procedure
X.PLAN_TYPE
  move &X.Plan_Type to    $Plan_Type     !Bas Error procedure
X.OPTION_CD
  move &X.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan
X.COVERAGE_BEGIN_DT
Y.BAS_ERROR

Y.DEPENDENT_BENEF
  let $DependentBenef = &Y.Dependent_Benef

  if (&Y.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

Z.NAME
  let $DpndName = &Z.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName

Y.BENEF_PCT 

  if (&Y.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $Short_Error_Message
  end-if
   if $Option_Cd <> ''
     move &x.coverage_begin_dt to $coverage_begin_dt_a
    put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
    add 1 to #j
   end-if

 do check-prior-info

From PS_BAS_PARTIC_PLAN X,
     PS_BAS_PARTIC_DPND Y,
     PS_DEPENDENT_BENEF Z
Where X.SCHED_ID     = &A.Sched_id
And   X.EMPLID       = &A.Emplid
And   X.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   X.EVENT_ID     = &A.Event_Id
And   ((X.PLAN_TYPE >= '40' And X.PLAN_TYPE <= '49')
    Or (X.PLAN_TYPE >= '4A' And X.PLAN_TYPE <= '4Z'))
And   X.COVERAGE_ELECT <> 'W'
And   X.OPTION_CD      <> ' '
And   Y.SCHED_ID     = X.SCHED_ID
And   Y.EMPLID       = X.EMPLID
And   Y.BENEFIT_RCD_NBR = X.BENEFIT_RCD_NBR
And   Y.EVENT_ID     = X.EVENT_ID
And   Y.PLAN_TYPE    = X.PLAN_TYPE
And   Z.EMPLID          = Y.EMPLID
And   Z.DEPENDENT_BENEF = Y.DEPENDENT_BENEF
Order By Y.DEPENDENT_BENEF ASC, X.PLAN_TYPE ASC
End-Select

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = 'Pension'

Begin-Select

A1.SCHED_ID
  move &A1.Sched_Id to     $SchedId       !Bas Error procedure
A1.EMPLID
  move &A1.Emplid to       $Empl_Id       !Bas Error procedure
A1.BENEFIT_RCD_NBR
  move &A1.benefit_rcd_nbr to #BenefitRcdNo  !Bas Error procedure
A1.EVENT_ID
  move &A1.Event_Id to     #EventId       !Bas Error procedure
A1.PLAN_TYPE
  move &A1.Plan_Type to    $Plan_Type     !Bas Error procedure
A1.OPTION_CD
  move &A1.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan
A1.COVERAGE_BEGIN_DT
B1.BAS_ERROR

B1.DEPENDENT_BENEF
  let $DependentBenef = &B1.Dependent_Benef

  if (&B1.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

C1.NAME
  let $DpndName = &C1.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName

B1.BENEF_PCT
B1.FLAT_AMOUNT
B1.EXCESS
B1.CONTINGENT

  if (&B1.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $Short_Error_Message
  end-if
   if $Option_Cd <> ''
     move &a1.coverage_begin_dt to $coverage_begin_dt_a
    put &a.benefit_program $plandescr &benefit_plan $provider_descr $group $coverage_begin_dt_a into enrol(#j)
    add 1 to #j
   end-if

 do check-prior-info
From PS_BAS_PARTIC_PLAN A1,
     PS_BAS_PARTIC_DPND B1,
     PS_DEPENDENT_BENEF C1
Where A1.SCHED_ID     = &A.Sched_id
And   A1.EMPLID       = &A.Emplid
And   A1.BENEFIT_RCD_NBR = &A.benefit_rcd_nbr
And   A1.EVENT_ID     = &A.Event_Id
And   ((A1.PLAN_TYPE >= '80' And A1.PLAN_TYPE <= '89')
    Or (A1.PLAN_TYPE >= '8A' And A1.PLAN_TYPE <= '8Z'))
And   A1.COVERAGE_ELECT <> 'W'
And   A1.OPTION_CD      <> ' '
And   B1.SCHED_ID     = A1.SCHED_ID
And   B1.EMPLID       = A1.EMPLID
And   B1.BENEFIT_RCD_NBR = A1.BENEFIT_RCD_NBR
And   B1.EVENT_ID     = A1.EVENT_ID
And   B1.PLAN_TYPE    = A1.PLAN_TYPE
And   C1.EMPLID          = B1.EMPLID
And   C1.DEPENDENT_BENEF = B1.DEPENDENT_BENEF
Order By B1.DEPENDENT_BENEF ASC, A1.PLAN_TYPE ASC
End-Select

!--------------------------------------

End-Procedure


!*******************************
Begin-Procedure Get-Ben-Plan
!*******************************

  let $Benefit_Plan = 'NoFind'!''

Begin-Select

BP.BENEFIT_PLAN
  let $Benefit_Plan = RTRIM(&BP.Benefit_Plan,' ')

From PS_BAS_PARTIC_OPTN BP
Where BP.SCHED_ID     = $SchedId
And   BP.EMPLID       = $Empl_Id
And   BP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   BP.EVENT_ID     = #EventId
And   BP.PLAN_TYPE    = $Plan_Type
And   BP.OPTION_CD    = $Option_Cd
End-Select

End-Procedure

!*******************************
Begin-Procedure Get-Bas-Message
!*******************************

  let $Short_Error_Message = '[ErrMsg Not Available]'

Begin-Select

O.DESCR
  let $Short_Error_Message = RTRIM(&O.Descr,' ')

From PS_BAS_MESSAGE     N,
     PS_PAY_MESSAGE_TBL O
Where N.SCHED_ID     = $SchedId
And   N.EMPLID       = $Empl_Id
And   N.BENEFIT_RCD_NBR = #BenefitRcdNo
And   N.EVENT_ID     = #EventId
And   N.MSGDATA1     = $Plan_Type
And   O.MSGID        = N.MSGID
End-Select
End-Procedure


!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id;

End-SQL

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt_Partic'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT_PARTIC
WHERE PRINT_ID = $Reprint_Id;

End-SQL

End-Procedure

!****************************
Begin-Procedure Display-Time
!****************************

do get-current-datetime
display $asofnow

End-Procedure
!SXK 12/21/1998 Begin
!****************************
Begin-Procedure Print-Report
!****************************

! display 'In Print Terms'
! display $prev_emplid
! display $prev_name

let #l = #i - 1
let #k = 0
get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $bdate_p from terms(#k)
if rtrim($bpgm_p,' ') = ''
   goto exit-proc
end-if
print $prev_emplid (+2,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta
print $prev_name  (,17) bold
print '********TERMINATIONS********' (,60)
print '-' (+1,1,104) fill
while #k <= #l
    get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $ccd_p $bdate_p from terms(#k)
    print $bpgm_p (+1,1)
    print $type_p (,12)
    print $bplan_p (,40)
    print $prvdr_p (,48)
    print $group_p (,79)
    print $ccd_p (,89)
    print $bdate_p (,93)
   
    add 1 to #k

end-while

exit-proc:

end-procedure

!****************************
Begin-Procedure Print-Report-1
!****************************

! display 'In Print Enroll'
! display $prev_emplid
! display $prev_name

let #l = #j - 1
let #k = 0
get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $bdate_p from enrol(#k)
if rtrim($bpgm_p,' ') = ''
   goto exit-proc-1
end-if
print $prev_emplid (+2,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta
print $prev_name (,17) bold
print '********ENROLLMENTS********' (,60)
print '-' (+1,1,104) fill
while #k <= #l
    get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $ccd_p $bdate_p from enrol(#k)
    print $bpgm_p (+1,1)
    print $type_p (,12)
    print $bplan_p (,40)
    print $prvdr_p (,48)
    print $group_p (,79)
    print $ccd_p (,89)
    print $bdate_p (,93)
   
    add 1 to #k

end-while

exit-proc-1:

end-procedure

!****************************
Begin-Procedure Print-Report-2
!****************************

! display 'In Print Waive'
! display $prev_emplid
! display $prev_name

let #l = #w - 1
let #k = 0
get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $bdate_p from waive(#k)
if rtrim($bpgm_p,' ') = ''
   goto exit-proc-1
end-if
print $prev_emplid (+2,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta
print $prev_name (,17) bold
print '********WAIVES*************' (,60)
print '-' (+1,1,104) fill
while #k <= #l
    get $bpgm_p $type_p $bplan_p $prvdr_p $group_p $ccd_p $bdate_p from waive(#k)
    print $bpgm_p (+1,1)
    print $type_p (,12)
    print $bplan_p (,40)
    print $prvdr_p (,48)
    print $group_p (,79)
    print $ccd_p   (,89)
    print $bdate_p (,93)
   
    add 1 to #k

end-while

exit-proc-1:

end-procedure


!******************************************
Begin-Procedure Update-Confirm-Notify-Date
!******************************************

let $Sql-Statement = 'GEXBN052: UPDATE PS_BAS_Partic'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
SET    CONFIRM_NOTIFY_DT = $AsOfToday
Where  SCHED_ID = &A.Sched_Id
And    EMPLID = &A.Emplid
And    BENEFIT_RCD_NBR = &A.Benefit_Rcd_nbr
And    EVENT_ID = &A.Event_Id;

End-SQL

 display 'Confirmation Notify Date updated for Emplid: ' noline
 display &A.Emplid

End-Procedure



! *-----------------------------------------------------------------------*

#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Format-DateTime
#include 'getsched.sqc'  !Ask-Schedule-Id Procedure
#include 'readxlat.sqc'  !Read-Translate-Table Procedure
#include 'number.sqc'    !Init-Number Procedure
#include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr

#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'datemath.sqc'

!#include 'gexaltse.sqc'  ! Alter session SQC
! *------------------------* End Of Report *------------------------------*

