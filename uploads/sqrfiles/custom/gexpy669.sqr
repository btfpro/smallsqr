!**************************************************************************
! GEXPY669:  The new sqr will read the vendor file and create a file      *
!            TAC*** and place it in the staging folder after data         *
!            mining for the additional fields and formatting the layout   *
!**************************************************************************
!                                                                         *
!               Confidentiality Information:                              *
!                                                                         *
! This module is the confidential and proprietary information of          *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted    *
! in any form, by any means, in whole or in part, nor is it to be used    *
! for any purpose other than that for which it is expressly provided      *
! without the written permission of Giant Eagle.                          *
!                                                                         *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved            *
!                                                                         *
!**************************************************************************
!                                                                         *
! GEXPY669 :            EXPENSE ANYWHERE                                  *
!                                                                         *
! Narrative:  The redesigned sqr will read from Finance table which is    *
!             populated by Expense Anywhere, then create a file called    *
!             TAC*** and place it in the staging folder after data        *
!             mining for the additional fields and formatting the         *
!             layout to be merged with TA1 files.                         *
!                                                                         *
! SQL Tables:           PS_JOB                                            *
!                       PS_GEX_EMPLID_MAPP                                *
!                       PS_GEX_EXPENSE_STG                                *
!                       PS_PAY_EARNINGS                                   *
!                                                                         *
! Written by:           Mel Abuyo                                         *
!                                                                         *
! Date :                03/05/2013                                        *
! Normally Run:         Sunday @ 19:00                                    *
!                                                                         *
!**************************************************************************
!                         MODIFICATION HISTORY                            *
!**************************************************************************
! ISDVMZA 	03/04/2013     Redesigned version to use Staging tables   *
!                              to read Expenses instead of reading from   *
!                              a flat file --  This was done to avoid     *
!                              clutter in the program due to comments.    *
!                              This process will also result in the       *
!                              elimination of gexpy669.sh -- which was    *
!                              used to retrieve the file from ftp site.   *
!                              Previous version is renamed gexpy669_old   *
!                              Process Status Used:                       *
!                              N - Initial Load from Expense Anywhere     *
!                              P - Currently being processed              *
!                              A - Processing completed/success           *
!                              E - Error in processing                    *
! ISDVMZA 	05/28/2013     Added the ability to read from EA flat file*
! ISDVVXK       07/22/2013     Commented the code that reads the file from*
!                              Expense Anywhere                           *
! ISDVMZA 	11/28/2013     Send log file to Payroll Admin                 *
! GEX_SEC_REENG 2015-04-29 Vahini Katta                                   *
! Changes related to gex_emplid_mapp/7 digit emplid                       *
! Ujwal Dyasani 13-Jul-2017		Commented Vahini's Email and uncommented  *
!								Payroll.Administrator@gianteagle.com      *
!**************************************************************************

#include 'setenv.sqc'
!#DEFINE Input_file1 'Payroll_' !isdvvxk
#DEFINE outfile2    'staging/TACEXP.'
#DEFINE logfile     'staging/gexpy669.log'              !ISDVMZA 11/28/2013
! Uncommented by Ujwal Dyasani - 13-Jul-2017 - Begin
!#DEFINE email_addr  'Payroll.Administrator@gianteagle.com'
#DEFINE email_addr  'Payroll.Administrator@gianteagle.com'
! Uncommented by Ujwal Dyasani - 13-Jul-2017 - End

! Commented by Ujwal Dyasani - 13-Jul-2017 - Begin
!#DEFINE email_addr  'vahini.katta@gianteagle.com'
! Commented by Ujwal Dyasani - 13-Jul-2017 - End
#DEFINE FS_TABLE    PS_GEX_EXPENSE_STG


!**************************************************************************
Begin-Program
!**************************************************************************
   do Init-DateTime           !datetime.sqc
   do Init-Number             !number.sqc
   do Get-Current-DateTime    !curdttim.sqc
   do Stdapi-Init             !stdapi.sqc
   do P100-Init-Report
   do P300-Main-Process
   do P110-Close-File
   do Stdapi-Term             !stdapi.sqc
End-Program


!**************************************************************************
Begin-procedure P100-Init-Report
!**************************************************************************

   let $pshome = getenv('PS_HOME')
   do P120-Get-Pay-begin-End-Dt
   do P130-Open-file

End-procedure P100-Init-Report


!**************************************************************************
Begin-procedure P110-Close-File
!**************************************************************************

   close 1
   !ISDVVXK-Begins
   !if #ea_ind
   !   close 2
   !end-if
   !ISDVVXK-Ends

   !ISDVMZA 11/28/2013  --  Begin
      let $UNIX_MAIL_COMMAND = 'cat '|| $logfilename || '| mailx -s "Expense Box Load Exception Report" ' || {email_addr}
      show $UNIX_MAIL_COMMAND

      CALL SYSTEM USING $UNIX_MAIL_COMMAND #system_status
      if #system_status <> 0
         add 1 to #errorcount
         display 'eMail of gexpy669.log failed'
         STOP
      else
         display 'gexpy669.log was emailed successfully'
      end-if
   !ISDVMZA 11/28/2013  --  End

End-procedure P110-Close-File


!**************************************************************************
Begin-procedure P120-Get-Pay-begin-End-Dt
!**************************************************************************
#debug1 show 'P120-Get-Pay-begin-End-Dt'

   let $found = 'N'

Begin-select LOOPS=1
Y1.PAY_BEGIN_DT
Y1.PAY_END_DT

   move 'Y' to $found
   move &Y1.PAY_BEGIN_DT  to $pay_begin_dt        'mm/dd/yyyy'
   move &Y1.PAY_END_DT    to $pay_end_dt          'mm/dd/yyyy'
   move &Y1.PAY_BEGIN_DT  to $pay_begin_yyyymmdd  'yyyymmdd'
   move &Y1.PAY_END_DT    to $pay_end_yyyymmdd    'yyyymmdd'

   display '  Pay begin: ' noline
   display $pay_begin_dt
   display '  Pay end: ' noline
   display $pay_end_dt

FROM PS_PAY_CALENDAR Y1
where Y1.PAY_SHEETS_RUN = 'Y'
  AND Y1.PAY_CONFIRM_RUN = 'N'
  AND Y1.RUN_ID > ' '
  AND Y1.PAY_OFF_CYCLE_CAL = 'N'
  AND Y1.PAY_END_DT = (SELECT MAX(PAY_END_DT)
			 FROM PS_PAY_CALENDAR
		        WHERE PAY_SHEETS_RUN = 'Y'
			  AND PAY_CONFIRM_RUN = 'N'
			  AND PAY_OFF_CYCLE_CAL = 'N'
			  AND PAY_END_DT <= $AsOfToday)
End-select

  if $found = 'N'
     display 'Error --  Pay Calendar not found or not setup for the Run ID.'
     move ' ' to $SlctCompany
     stop
  end-if

End-procedure P120-Get-Pay-begin-End-Dt


!**************************************************************************
Begin-procedure P130-Open-file
!**************************************************************************
#debug1 show 'P130-Open-file'
    show 'Oprid : ' $prcs_oprid
    show 'Run : ' $prcs_run_cntl_id

    let $ofilename = '{PSHOME}' || {outfile2} || $pay_end_yyyymmdd

    open $ofilename as 1 for-writing
         record=200:fixed status=#filestat

    if #filestat
        show 'Error opening output file failed -- ' $ofilepath
        stop
    else
        show 'Output file will be written to: ' $ofilename
   end-if
    !ISDVVX-Begins
    !let $EA_File = '{PSHOME}' || 'incoming/' || {Input_file1} || $pay_begin_yyyymmdd || '_' || $pay_end_yyyymmdd ||'.txt'
    !open $EA_File as 2
    !     for-reading
    !     record=210:vary
    !     status=#open1

    !show '***  Processing Expense Anywhere  ***'
    !show $EA_File

    !if #open1 <> 0
    !    display '***********************************************************'
    !    display 'There is no Expense Anywhere file available for processing.'
    !    display '***********************************************************'
    !    move 0 to #ea_ind
    !else
    !    move 1 to #ea_ind
    !end-if
    !ISDVVX-Ends

    !ISDVMZA 11/28/2013  --  Begin
    let $logfilename = '{PSHOME}' || {logfile}

    open $logfilename as 2 for-writing
         record=200:fixed status=#filestat

    if #filestat
        show 'Error opening output file failed -- ' $logfilename
        stop
    else
        let $msg = 'Expense Box Exception Report -- TM not loaded for week-ending: '||$pay_end_dt
        write 2 from $msg
        write 2 from ' '
    end-if
    !ISDVMZA 11/28/2013  --  End

End-procedure P130-Open-file


!**************************************************************************
Begin-procedure P200-Process-EA-file
!This will read and process the Expense Anywhere files
!**************************************************************************

   move 0 to #rec_proc

   while 1
      read 2 into $data:210

      if #end-file
         break
      end-if

      add 1 to #rec_proc

      unstring $data by ',' into $emplid $name $deptidx $depname $earns $pay_begin_xx $pay_end_xx
      let $emplid = ltrim(rtrim($emplid,'"'),'"')
      let $name = ltrim(rtrim($name,'"'),'"')
      let $deptidx = ltrim(rtrim($deptidx,'"'),'"')
      let $depname = ltrim(rtrim($depname,'"'),'"')
      let $earns = ltrim(rtrim($earns,'"'),'"')
      let #tot_amt = $earns
      let $pay_begin_xx = ltrim(rtrim($pay_begin_xx,'"'),'"')
      let $pay_end_xx = ltrim(rtrim($pay_end_xx,'"'),'"')

      do P400-Get-Emplid
      do P410-Get_Empl-Detail

      if #found
         let $deptid = $deptidx
         do P700-Write-File
      else
         show 'No records found for emplid: ' $emplid
      end-if

   end-while

   move #rec_proc to $rec_proc 99990
   show $rec_proc ' records processed for EA file '

End-procedure P200-Process-EA-file


!**************************************************************************
Begin-procedure P300-Main-Process
!**************************************************************************
#debug1 show 'P300-Main-Process'
   !ISDVVX-Begins
   !if #ea_ind
   !   do P200-Process-EA-file
   !end-if
   !ISDVVX-Ends
   do P310-Lock-for-Processing
   do P320-Process-Data

   display #rec_proc 999,999 noline
   display ' Records Processed.'

   do P850-Purge-Old-Records

End-procedure P300-Main-Process


!**************************************************************************
! Lock records for processing
Begin-procedure P310-Lock-for-Processing
!**************************************************************************
#debug1 show 'P310-Lock-for-Processing'
   move 'P310-Lock-for-Processing' to $procname
   display ' '
   show '***  Processing Expense Box  ***'

Begin-SQL on-error=P900-SQL-Error
UPDATE {FS_TABLE}
   SET PROCESS_STATUS = 'P'
      ,PAY_BEGIN_DT   = &Y1.PAY_BEGIN_DT
      ,PAY_END_DT     = NVL(PAY_END_DT, &Y1.PAY_END_DT)
 WHERE PROCESS_STATUS IN ('N', 'E')
   AND (PAY_END_DT IS NULL OR
        PAY_END_DT = to_date($pay_end_dt, 'mm/dd/yyyy'))
End-SQL

End-procedure P310-Lock-for-Processing


!**************************************************************************
Begin-procedure P320-Process-Data
!**************************************************************************
#debug1 show 'P320-Process-Data'


   move 0 to #rec_proc

Begin-select
EMPLID
SUM(Amount)  &tot_amt

   add 1 to #rec_proc
   move &EMPLID  to $emplid
   move &tot_amt to #tot_amt

#debug1   show 'Processing Emplid: ' &PROCESS_STATUS ' - ' $emplid ' - ' #tot_amt

   do P400-Get-Emplid
   do P410-Get_Empl-Detail

   if #found
      move 'A' to $proc_status
      do P700-Write-File
   else
      move 'E' to $proc_status

     !ISDVMZA 11/28/2013  --  Begin
     move #tot_amt to $disp_amt '999,990.00'
     let $msg = 'No records found for emplid: '||$emplid || ' -> ' ||$disp_amt
     show $msg
     write 2 from $msg
     write 2 from ' '
     !ISDVMZA 11/28/2013  --  End

   end-if

   do P800-Update-Records

 FROM {FS_TABLE}
 WHERE PROCESS_STATUS = 'P'
   AND (PAY_END_DT IS NULL OR
        PAY_END_DT = to_date($pay_end_dt, 'mm/dd/yyyy'))
GROUP BY EMPLID

End-Select

End-procedure P320-Process-Data


!**************************************************************************
Begin-Procedure P400-Get-Emplid
!**************************************************************************
#debug1 show 'P400-Get-Emplid'

   move 0 to #found

Begin-select DISTINCT
B.SSN

   move 1 to #found
   move &B.SSN TO $SSN

 FROM PS_GEX_EMPLID_MAPP B
WHERE B.EMPLID = $emplid
End-select

End-Procedure P400-Get-Emplid


!**************************************************************************
Begin-Procedure P410-Get_Empl-Detail
!**************************************************************************
#debug1 show 'P410-Get_Empl-Detail'

   move 0 to #found

Begin-select
J.COMPANY  &company
J.PAYGROUP &paygroup
J.EMPL_RCD &empl_rcd
J.JOBCODE  &jobcode
J.DEPTID   &deptid

   move 1 to #found
   move &company  to $company
   move &paygroup to $paygroup
   move &empl_rcd to $empl_rcd
   move &jobcode  to $jobcode
   move &deptid   to $deptid

#debug1   show 'Processing Emplid: ' $SSN ' - ' $jobcode

 FROM PS_JOB J
WHERE J.EMPLID = $emplid !$SSN !GEX_SEC_REENG 2015-04-29 Vahini Katta
  AND J.EMPL_STATUS IN ('A','L','P','S')
  AND ( J.EFFDT =
        (SELECT MAX(J_ED.EFFDT)
           FROM PS_JOB J_ED
          WHERE J.EMPLID = J_ED.EMPLID
            AND J.EMPL_RCD = J_ED.EMPL_RCD
            AND J_ED.EFFDT <= SYSDATE)
  AND J.EFFSEQ =
        (SELECT MAX(J_ES.EFFSEQ)
           FROM PS_JOB J_ES
          WHERE J.EMPLID = J_ES.EMPLID
            AND J.EMPL_RCD = J_ES.EMPL_RCD
            AND J.EFFDT = J_ES.EFFDT) )

End-select

End-procedure P410-Get_Empl-Detail


!**************************************************************************
Begin-Procedure P700-Write-File
!**************************************************************************
     let  $symbol = 'XXXXXX'
     let  $ern_cd = '615'
     let  $space = ' '
     let  $zeropad = '0'
     let  $char_space = '         '
     let  #earns = #tot_amt
     move #earns to $earns '000000000000.000000'

     encode '' into $delimit
     string $company $paygroup $SSN $empl_rcd $deptid $jobcode $space $jobcode $space $symbol $ern_cd
            $char_space $earns $space $pay_begin_dt $pay_end_dt $zeropad BY $delimit into $head

     write 1 from $head

End-Procedure P700-Write-File


!**************************************************************************
Begin-Procedure P800-Update-Records
!**************************************************************************
#debug1 show 'P800-Update-Records'
   move 'P800-Update-Records' to $procname

Begin-SQL on-error=P900-SQL-Error
UPDATE {FS_TABLE}
   SET PROCESS_STATUS = $proc_status
      ,LASTUPDDTTM    = $AsOfToday
 WHERE EMPLID         = $emplid
   AND PROCESS_STATUS = 'P'
End-SQL

End-Procedure P800-Update-Records


!**************************************************************************
Begin-Procedure P850-Purge-Old-Records
!**************************************************************************
#debug1 show 'P850-Purge-Old-Records'
   move 'P850-Purge-Old-Records' to $procname

   display 'Purging Records older than 52 weeks ...'

Begin-SQL on-error=P900-SQL-Error
DELETE FROM {FS_TABLE}
 WHERE PAY_END_DT     = (to_date($pay_end_dt, 'mm/dd/yyyy') - 360)
   AND PROCESS_STATUS = 'C'
End-SQL

   display #sql-count 999,999 noline
   display ' Records Purged.'

End-Procedure P850-Purge-Old-Records


!**************************************************************************
Begin-Procedure P900-SQL-Error
!**************************************************************************

   show 'Error in procedure: ' $procname
   show 'SQL Error: ' #sql-status ' - ' $sql-error

End-Procedure P900-SQL-Error

!--------------------------------------------------------------------!

#include 'ldnumlit.sqc'
#include 'netinwds.sqc'
#include 'reset.sqc'     ! end of program
#include 'curdttim.sqc'  ! get-current-datetime procedure
#include 'datetime.sqc'  ! routines for date and time formatting
#include 'number.sqc'    ! routines to format numbers
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declare
#include 'tranctrl.sqc'  ! Routines for platform database processing
#include 'stdapi.sqc'
!---------------------------------------------------------------------!
